// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// CreateNature ;
   8: CALL 841 0 0
// PrepareArabian ;
  12: CALL 1215 0 0
// PrepareAmerican ;
  16: CALL 6234 0 0
// PrepareRussian ;
  20: CALL 2171 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 7794 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 25 25$00 , 24 24$00 , 23 23$00 , 22 22$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 52500
 188: PUSH
 189: LD_INT 50400
 191: PUSH
 192: LD_INT 48300
 194: PUSH
 195: LD_INT 46200
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// escapeCounter := 0 ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// loseCounter := 0 ;
 218: LD_ADDR_EXP 14
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// labCaptured := false ;
 226: LD_ADDR_EXP 21
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// hillBase := false ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 242: LD_ADDR_EXP 8
 246: PUSH
 247: LD_INT 3
 249: PUSH
 250: LD_INT 4
 252: PUSH
 253: LD_INT 5
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 7
 261: PUSH
 262: LD_INT 8
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 273: LD_ADDR_EXP 23
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// kaganCaptured := false ;
 281: LD_ADDR_EXP 24
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// end ;
 289: LD_VAR 0 1
 293: RET
// every 0 0$1 trigger debug do var i ;
 294: LD_EXP 1
 298: IFFALSE 367
 300: GO 302
 302: DISABLE
 303: LD_INT 0
 305: PPUSH
// begin enable ;
 306: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 307: LD_ADDR_VAR 0 1
 311: PUSH
 312: LD_INT 22
 314: PUSH
 315: LD_INT 2
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 3
 324: PUSH
 325: LD_INT 21
 327: PUSH
 328: LD_INT 3
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PPUSH
 343: CALL_OW 69
 347: PUSH
 348: FOR_IN
 349: IFFALSE 365
// SetLives ( i , 1000 ) ;
 351: LD_VAR 0 1
 355: PPUSH
 356: LD_INT 1000
 358: PPUSH
 359: CALL_OW 234
 363: GO 348
 365: POP
 366: POP
// end ; end_of_file
 367: PPOPN 1
 369: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 370: LD_INT 0
 372: PPUSH
// uc_side := side ;
 373: LD_ADDR_OWVAR 20
 377: PUSH
 378: LD_VAR 0 1
 382: ST_TO_ADDR
// uc_nation := nation ;
 383: LD_ADDR_OWVAR 21
 387: PUSH
 388: LD_VAR 0 2
 392: ST_TO_ADDR
// vc_chassis := chassis ;
 393: LD_ADDR_OWVAR 37
 397: PUSH
 398: LD_VAR 0 3
 402: ST_TO_ADDR
// vc_engine := engine ;
 403: LD_ADDR_OWVAR 39
 407: PUSH
 408: LD_VAR 0 4
 412: ST_TO_ADDR
// vc_control := control ;
 413: LD_ADDR_OWVAR 38
 417: PUSH
 418: LD_VAR 0 5
 422: ST_TO_ADDR
// vc_weapon := weapon ;
 423: LD_ADDR_OWVAR 40
 427: PUSH
 428: LD_VAR 0 6
 432: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 433: LD_ADDR_OWVAR 41
 437: PUSH
 438: LD_VAR 0 7
 442: ST_TO_ADDR
// result := CreateVehicle ;
 443: LD_ADDR_VAR 0 8
 447: PUSH
 448: CALL_OW 45
 452: ST_TO_ADDR
// end ;
 453: LD_VAR 0 8
 457: RET
// export function SayX ( units , ident ) ; var i ; begin
 458: LD_INT 0
 460: PPUSH
 461: PPUSH
// result := false ;
 462: LD_ADDR_VAR 0 3
 466: PUSH
 467: LD_INT 0
 469: ST_TO_ADDR
// if not units then
 470: LD_VAR 0 1
 474: NOT
 475: IFFALSE 479
// exit ;
 477: GO 533
// for i in units do
 479: LD_ADDR_VAR 0 4
 483: PUSH
 484: LD_VAR 0 1
 488: PUSH
 489: FOR_IN
 490: IFFALSE 531
// if IsOk ( i ) then
 492: LD_VAR 0 4
 496: PPUSH
 497: CALL_OW 302
 501: IFFALSE 529
// begin Say ( i , ident ) ;
 503: LD_VAR 0 4
 507: PPUSH
 508: LD_VAR 0 2
 512: PPUSH
 513: CALL_OW 88
// result := i ;
 517: LD_ADDR_VAR 0 3
 521: PUSH
 522: LD_VAR 0 4
 526: ST_TO_ADDR
// break ;
 527: GO 531
// end ;
 529: GO 489
 531: POP
 532: POP
// end ;
 533: LD_VAR 0 3
 537: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 538: LD_INT 0
 540: PPUSH
 541: PPUSH
 542: PPUSH
// if not observer or not unit then
 543: LD_VAR 0 1
 547: NOT
 548: PUSH
 549: LD_VAR 0 2
 553: NOT
 554: OR
 555: IFFALSE 559
// exit ;
 557: GO 607
// if not See ( GetSide ( observer ) , unit ) then
 559: LD_VAR 0 1
 563: PPUSH
 564: CALL_OW 255
 568: PPUSH
 569: LD_VAR 0 2
 573: PPUSH
 574: CALL_OW 292
 578: NOT
 579: IFFALSE 583
// exit ;
 581: GO 607
// result := GetDistUnits ( observer , unit ) < 12 ;
 583: LD_ADDR_VAR 0 3
 587: PUSH
 588: LD_VAR 0 1
 592: PPUSH
 593: LD_VAR 0 2
 597: PPUSH
 598: CALL_OW 296
 602: PUSH
 603: LD_INT 12
 605: LESS
 606: ST_TO_ADDR
// end ;
 607: LD_VAR 0 3
 611: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 612: LD_INT 0
 614: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 615: LD_VAR 0 2
 619: PUSH
 620: LD_INT 1
 622: ARRAY
 623: PPUSH
 624: LD_VAR 0 2
 628: PUSH
 629: LD_INT 2
 631: ARRAY
 632: PPUSH
 633: CALL_OW 488
 637: PUSH
 638: LD_VAR 0 2
 642: PUSH
 643: LD_INT 1
 645: ARRAY
 646: PPUSH
 647: LD_VAR 0 2
 651: PUSH
 652: LD_INT 2
 654: ARRAY
 655: PPUSH
 656: CALL_OW 428
 660: PUSH
 661: LD_INT 0
 663: EQUAL
 664: AND
 665: IFFALSE 699
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 667: LD_VAR 0 1
 671: PPUSH
 672: LD_VAR 0 2
 676: PUSH
 677: LD_INT 1
 679: ARRAY
 680: PPUSH
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 2
 688: ARRAY
 689: PPUSH
 690: LD_VAR 0 3
 694: PPUSH
 695: CALL_OW 48
// end ;
 699: LD_VAR 0 4
 703: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 704: LD_INT 0
 706: PPUSH
 707: PPUSH
// InitUc ;
 708: CALL_OW 18
// InitHc ;
 712: CALL_OW 19
// uc_side := 0 ;
 716: LD_ADDR_OWVAR 20
 720: PUSH
 721: LD_INT 0
 723: ST_TO_ADDR
// uc_nation := 0 ;
 724: LD_ADDR_OWVAR 21
 728: PUSH
 729: LD_INT 0
 731: ST_TO_ADDR
// for i = 1 to amount do
 732: LD_ADDR_VAR 0 4
 736: PUSH
 737: DOUBLE
 738: LD_INT 1
 740: DEC
 741: ST_TO_ADDR
 742: LD_VAR 0 2
 746: PUSH
 747: FOR_TO
 748: IFFALSE 830
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 750: LD_ADDR_OWVAR 29
 754: PUSH
 755: LD_INT 9
 757: PPUSH
 758: LD_INT 12
 760: PPUSH
 761: CALL_OW 12
 765: PUSH
 766: LD_INT 9
 768: PPUSH
 769: LD_INT 12
 771: PPUSH
 772: CALL_OW 12
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 781: LD_ADDR_OWVAR 35
 785: PUSH
 786: LD_INT 1
 788: NEG
 789: PPUSH
 790: LD_INT 1
 792: PPUSH
 793: CALL_OW 12
 797: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 798: LD_INT 0
 800: PPUSH
 801: LD_INT 12
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 811: CALL_OW 44
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: LD_INT 0
 823: PPUSH
 824: CALL_OW 49
// end ;
 828: GO 747
 830: POP
 831: POP
// InitHc ;
 832: CALL_OW 19
// end ;
 836: LD_VAR 0 3
 840: RET
// export function CreateNature ; var i ; begin
 841: LD_INT 0
 843: PPUSH
 844: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 , 2 ] [ Difficulty ] ) ;
 845: LD_INT 18
 847: PPUSH
 848: LD_INT 5
 850: PUSH
 851: LD_INT 4
 853: PUSH
 854: LD_INT 3
 856: PUSH
 857: LD_INT 2
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: PUSH
 866: LD_OWVAR 67
 870: ARRAY
 871: PPUSH
 872: CALL 704 0 2
// for i := 1 to 3 do
 876: LD_ADDR_VAR 0 2
 880: PUSH
 881: DOUBLE
 882: LD_INT 1
 884: DEC
 885: ST_TO_ADDR
 886: LD_INT 3
 888: PUSH
 889: FOR_TO
 890: IFFALSE 925
// begin hc_class := 21 ;
 892: LD_ADDR_OWVAR 28
 896: PUSH
 897: LD_INT 21
 899: ST_TO_ADDR
// hc_gallery :=  ;
 900: LD_ADDR_OWVAR 33
 904: PUSH
 905: LD_STRING 
 907: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 908: CALL_OW 44
 912: PPUSH
 913: LD_INT 18
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 49
// end ;
 923: GO 889
 925: POP
 926: POP
// for i := 1 to 2 do
 927: LD_ADDR_VAR 0 2
 931: PUSH
 932: DOUBLE
 933: LD_INT 1
 935: DEC
 936: ST_TO_ADDR
 937: LD_INT 2
 939: PUSH
 940: FOR_TO
 941: IFFALSE 976
// begin hc_class := 18 ;
 943: LD_ADDR_OWVAR 28
 947: PUSH
 948: LD_INT 18
 950: ST_TO_ADDR
// hc_gallery :=  ;
 951: LD_ADDR_OWVAR 33
 955: PUSH
 956: LD_STRING 
 958: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 959: CALL_OW 44
 963: PPUSH
 964: LD_INT 18
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 49
// end ;
 974: GO 940
 976: POP
 977: POP
// for i := 1 to 2 do
 978: LD_ADDR_VAR 0 2
 982: PUSH
 983: DOUBLE
 984: LD_INT 1
 986: DEC
 987: ST_TO_ADDR
 988: LD_INT 2
 990: PUSH
 991: FOR_TO
 992: IFFALSE 1027
// begin hc_class := 13 ;
 994: LD_ADDR_OWVAR 28
 998: PUSH
 999: LD_INT 13
1001: ST_TO_ADDR
// hc_gallery :=  ;
1002: LD_ADDR_OWVAR 33
1006: PUSH
1007: LD_STRING 
1009: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1010: CALL_OW 44
1014: PPUSH
1015: LD_INT 18
1017: PPUSH
1018: LD_INT 0
1020: PPUSH
1021: CALL_OW 49
// end ;
1025: GO 991
1027: POP
1028: POP
// end ;
1029: LD_VAR 0 1
1033: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1034: LD_INT 0
1036: PPUSH
1037: PPUSH
1038: PPUSH
1039: PPUSH
1040: PPUSH
// result := false ;
1041: LD_ADDR_VAR 0 4
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// if not sideList or not enemySide then
1049: LD_VAR 0 1
1053: NOT
1054: PUSH
1055: LD_VAR 0 2
1059: NOT
1060: OR
1061: IFFALSE 1065
// exit ;
1063: GO 1210
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1065: LD_ADDR_VAR 0 7
1069: PUSH
1070: LD_INT 22
1072: PUSH
1073: LD_VAR 0 2
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PPUSH
1082: CALL_OW 69
1086: ST_TO_ADDR
// if not tmp then
1087: LD_VAR 0 7
1091: NOT
1092: IFFALSE 1096
// exit ;
1094: GO 1210
// for s in sideList do
1096: LD_ADDR_VAR 0 6
1100: PUSH
1101: LD_VAR 0 1
1105: PUSH
1106: FOR_IN
1107: IFFALSE 1208
// for i in tmp do
1109: LD_ADDR_VAR 0 5
1113: PUSH
1114: LD_VAR 0 7
1118: PUSH
1119: FOR_IN
1120: IFFALSE 1204
// if See ( s , i ) then
1122: LD_VAR 0 6
1126: PPUSH
1127: LD_VAR 0 5
1131: PPUSH
1132: CALL_OW 292
1136: IFFALSE 1202
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
1138: LD_ADDR_VAR 0 8
1142: PUSH
1143: LD_INT 22
1145: PUSH
1146: LD_VAR 0 6
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: PPUSH
1155: CALL_OW 69
1159: PPUSH
1160: LD_VAR 0 5
1164: PPUSH
1165: CALL_OW 74
1169: ST_TO_ADDR
// if tmp2 in exceptUnits then
1170: LD_VAR 0 8
1174: PUSH
1175: LD_VAR 0 3
1179: IN
1180: IFFALSE 1186
// continue else
1182: GO 1119
1184: GO 1202
// begin result := tmp2 ;
1186: LD_ADDR_VAR 0 4
1190: PUSH
1191: LD_VAR 0 8
1195: ST_TO_ADDR
// exit ;
1196: POP
1197: POP
1198: POP
1199: POP
1200: GO 1210
// end ; end ;
1202: GO 1119
1204: POP
1205: POP
1206: GO 1106
1208: POP
1209: POP
// end ; end_of_file
1210: LD_VAR 0 4
1214: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1215: LD_INT 0
1217: PPUSH
1218: PPUSH
// uc_side := 5 ;
1219: LD_ADDR_OWVAR 20
1223: PUSH
1224: LD_INT 5
1226: ST_TO_ADDR
// uc_nation := 2 ;
1227: LD_ADDR_OWVAR 21
1231: PUSH
1232: LD_INT 2
1234: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1235: LD_ADDR_EXP 36
1239: PUSH
1240: LD_STRING Abdul
1242: PPUSH
1243: LD_INT 0
1245: PPUSH
1246: LD_STRING 
1248: PPUSH
1249: CALL 34471 0 3
1253: ST_TO_ADDR
// uc_side := 2 ;
1254: LD_ADDR_OWVAR 20
1258: PUSH
1259: LD_INT 2
1261: ST_TO_ADDR
// uc_nation := 2 ;
1262: LD_ADDR_OWVAR 21
1266: PUSH
1267: LD_INT 2
1269: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1270: LD_ADDR_EXP 25
1274: PUSH
1275: LD_STRING Heike
1277: PPUSH
1278: LD_EXP 1
1282: NOT
1283: PPUSH
1284: LD_EXP 2
1288: PPUSH
1289: CALL 34471 0 3
1293: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1294: LD_ADDR_EXP 28
1298: PUSH
1299: LD_STRING Ibrahim
1301: PPUSH
1302: LD_EXP 1
1306: NOT
1307: PPUSH
1308: LD_EXP 2
1312: PPUSH
1313: CALL 34471 0 3
1317: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1318: LD_ADDR_EXP 26
1322: PUSH
1323: LD_STRING Givi
1325: PPUSH
1326: LD_EXP 1
1330: NOT
1331: PPUSH
1332: LD_EXP 2
1336: PPUSH
1337: CALL 34471 0 3
1341: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1342: LD_ADDR_EXP 29
1346: PUSH
1347: LD_STRING Kamil
1349: PPUSH
1350: LD_EXP 1
1354: NOT
1355: PPUSH
1356: LD_EXP 2
1360: PPUSH
1361: CALL 34471 0 3
1365: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1366: LD_ADDR_EXP 30
1370: PUSH
1371: LD_STRING Kaia
1373: PPUSH
1374: LD_EXP 1
1378: NOT
1379: PPUSH
1380: LD_EXP 2
1384: PPUSH
1385: CALL 34471 0 3
1389: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1390: LD_ADDR_EXP 31
1394: PUSH
1395: LD_STRING Sophia
1397: PPUSH
1398: LD_EXP 1
1402: NOT
1403: PPUSH
1404: LD_EXP 2
1408: PPUSH
1409: CALL 34471 0 3
1413: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1414: LD_ADDR_EXP 32
1418: PUSH
1419: LD_STRING Markov
1421: PPUSH
1422: LD_EXP 1
1426: NOT
1427: PPUSH
1428: LD_EXP 2
1432: PPUSH
1433: CALL 34471 0 3
1437: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1438: LD_ADDR_EXP 35
1442: PUSH
1443: LD_STRING Aviradze
1445: PPUSH
1446: LD_EXP 1
1450: NOT
1451: PPUSH
1452: LD_EXP 2
1456: PPUSH
1457: CALL 34471 0 3
1461: ST_TO_ADDR
// aviradzeSquad := [ ] ;
1462: LD_ADDR_EXP 39
1466: PUSH
1467: EMPTY
1468: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
1469: LD_ADDR_EXP 37
1473: PUSH
1474: LD_STRING 03_others
1476: PPUSH
1477: CALL_OW 31
1481: ST_TO_ADDR
// uc_side := 5 ;
1482: LD_ADDR_OWVAR 20
1486: PUSH
1487: LD_INT 5
1489: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
1490: LD_ADDR_EXP 34
1494: PUSH
1495: LD_STRING Kurt
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: LD_STRING 
1503: PPUSH
1504: CALL 34471 0 3
1508: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1509: LD_ADDR_EXP 27
1513: PUSH
1514: LD_STRING Mike
1516: PPUSH
1517: LD_EXP 1
1521: NOT
1522: PPUSH
1523: LD_EXP 2
1527: PPUSH
1528: CALL 34471 0 3
1532: ST_TO_ADDR
// if Mike then
1533: LD_EXP 27
1537: IFFALSE 1560
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
1539: LD_EXP 27
1543: PPUSH
1544: LD_INT 142
1546: PPUSH
1547: LD_INT 63
1549: PPUSH
1550: LD_INT 2
1552: PPUSH
1553: LD_INT 0
1555: PPUSH
1556: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
1560: LD_EXP 34
1564: PPUSH
1565: LD_INT 142
1567: PPUSH
1568: LD_INT 63
1570: PPUSH
1571: LD_INT 3
1573: PPUSH
1574: LD_INT 0
1576: PPUSH
1577: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
1581: LD_EXP 34
1585: PUSH
1586: LD_EXP 27
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 140
// end ;
1599: LD_VAR 0 1
1603: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
1604: LD_INT 0
1606: PPUSH
1607: PPUSH
1608: PPUSH
1609: PPUSH
// uc_side := 5 ;
1610: LD_ADDR_OWVAR 20
1614: PUSH
1615: LD_INT 5
1617: ST_TO_ADDR
// uc_nation := 2 ;
1618: LD_ADDR_OWVAR 21
1622: PUSH
1623: LD_INT 2
1625: ST_TO_ADDR
// InitHc ;
1626: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
1630: LD_ADDR_EXP 33
1634: PUSH
1635: LD_STRING Omar
1637: PPUSH
1638: LD_INT 0
1640: PPUSH
1641: LD_STRING 
1643: PPUSH
1644: CALL 34471 0 3
1648: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
1649: LD_EXP 33
1653: PPUSH
1654: LD_INT 284
1656: PPUSH
1657: LD_INT 163
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
1667: LD_EXP 33
1671: PPUSH
1672: LD_INT 256
1674: PPUSH
1675: LD_INT 129
1677: PPUSH
1678: CALL_OW 111
// wait ( 0 0$2 ) ;
1682: LD_INT 70
1684: PPUSH
1685: CALL_OW 67
// omarSquad := [ ] ;
1689: LD_ADDR_EXP 38
1693: PUSH
1694: EMPTY
1695: ST_TO_ADDR
// for i := 1 to 5 do
1696: LD_ADDR_VAR 0 2
1700: PUSH
1701: DOUBLE
1702: LD_INT 1
1704: DEC
1705: ST_TO_ADDR
1706: LD_INT 5
1708: PUSH
1709: FOR_TO
1710: IFFALSE 1916
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1712: LD_INT 5
1714: PPUSH
1715: LD_INT 2
1717: PPUSH
1718: LD_INT 13
1720: PUSH
1721: LD_INT 14
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: LD_VAR 0 2
1732: PUSH
1733: LD_INT 2
1735: MOD
1736: PUSH
1737: LD_INT 1
1739: PLUS
1740: ARRAY
1741: PPUSH
1742: LD_INT 1
1744: PPUSH
1745: LD_INT 1
1747: PPUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 27
1753: PUSH
1754: LD_INT 26
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: LIST
1761: PUSH
1762: LD_VAR 0 2
1766: PUSH
1767: LD_INT 3
1769: MOD
1770: PUSH
1771: LD_INT 1
1773: PLUS
1774: ARRAY
1775: PPUSH
1776: LD_INT 100
1778: PPUSH
1779: CALL 370 0 7
// veh := CreateVehicle ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: CALL_OW 45
1792: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1793: LD_VAR 0 4
1797: PPUSH
1798: LD_INT 5
1800: PPUSH
1801: CALL_OW 233
// omarSquad := omarSquad union veh ;
1805: LD_ADDR_EXP 38
1809: PUSH
1810: LD_EXP 38
1814: PUSH
1815: LD_VAR 0 4
1819: UNION
1820: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
1821: LD_VAR 0 4
1825: PPUSH
1826: LD_INT 284
1828: PPUSH
1829: LD_INT 163
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
1839: LD_INT 0
1841: PPUSH
1842: LD_INT 3
1844: PPUSH
1845: LD_INT 2
1847: PPUSH
1848: CALL_OW 380
// un := CreateHuman ;
1852: LD_ADDR_VAR 0 3
1856: PUSH
1857: CALL_OW 44
1861: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1862: LD_ADDR_EXP 38
1866: PUSH
1867: LD_EXP 38
1871: PUSH
1872: LD_VAR 0 3
1876: UNION
1877: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1878: LD_VAR 0 3
1882: PPUSH
1883: LD_VAR 0 4
1887: PPUSH
1888: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
1892: LD_VAR 0 3
1896: PPUSH
1897: LD_INT 271
1899: PPUSH
1900: LD_INT 144
1902: PPUSH
1903: CALL_OW 111
// wait ( 0 0$2 ) ;
1907: LD_INT 70
1909: PPUSH
1910: CALL_OW 67
// end ;
1914: GO 1709
1916: POP
1917: POP
// for i := 1 to 3 do
1918: LD_ADDR_VAR 0 2
1922: PUSH
1923: DOUBLE
1924: LD_INT 1
1926: DEC
1927: ST_TO_ADDR
1928: LD_INT 3
1930: PUSH
1931: FOR_TO
1932: IFFALSE 2015
// begin PrepareHuman ( false , 1 , 2 ) ;
1934: LD_INT 0
1936: PPUSH
1937: LD_INT 1
1939: PPUSH
1940: LD_INT 2
1942: PPUSH
1943: CALL_OW 380
// un := CreateHuman ;
1947: LD_ADDR_VAR 0 3
1951: PUSH
1952: CALL_OW 44
1956: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1957: LD_ADDR_EXP 38
1961: PUSH
1962: LD_EXP 38
1966: PUSH
1967: LD_VAR 0 3
1971: UNION
1972: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
1973: LD_VAR 0 3
1977: PPUSH
1978: LD_INT 284
1980: PPUSH
1981: LD_INT 163
1983: PPUSH
1984: LD_INT 0
1986: PPUSH
1987: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
1991: LD_VAR 0 3
1995: PPUSH
1996: LD_INT 257
1998: PPUSH
1999: LD_INT 138
2001: PPUSH
2002: CALL_OW 111
// wait ( 0 0$1 ) ;
2006: LD_INT 35
2008: PPUSH
2009: CALL_OW 67
// end ;
2013: GO 1931
2015: POP
2016: POP
// for i := 1 to 6 do
2017: LD_ADDR_VAR 0 2
2021: PUSH
2022: DOUBLE
2023: LD_INT 1
2025: DEC
2026: ST_TO_ADDR
2027: LD_INT 6
2029: PUSH
2030: FOR_TO
2031: IFFALSE 2164
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2033: LD_INT 0
2035: PPUSH
2036: LD_INT 1
2038: PUSH
2039: LD_INT 1
2041: PUSH
2042: LD_INT 4
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: PUSH
2050: LD_VAR 0 2
2054: PUSH
2055: LD_INT 3
2057: MOD
2058: PUSH
2059: LD_INT 1
2061: PLUS
2062: ARRAY
2063: PPUSH
2064: LD_INT 3
2066: PPUSH
2067: CALL_OW 380
// un := CreateHuman ;
2071: LD_ADDR_VAR 0 3
2075: PUSH
2076: CALL_OW 44
2080: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2081: LD_ADDR_EXP 38
2085: PUSH
2086: LD_EXP 38
2090: PUSH
2091: LD_VAR 0 3
2095: UNION
2096: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2097: LD_VAR 0 3
2101: PPUSH
2102: LD_INT 225
2104: PPUSH
2105: LD_INT 163
2107: PPUSH
2108: LD_INT 0
2110: PPUSH
2111: CALL_OW 48
// if i = 1 then
2115: LD_VAR 0 2
2119: PUSH
2120: LD_INT 1
2122: EQUAL
2123: IFFALSE 2140
// SetAttr ( un , attr_speed , 12 ) ;
2125: LD_VAR 0 3
2129: PPUSH
2130: LD_INT 2
2132: PPUSH
2133: LD_INT 12
2135: PPUSH
2136: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2140: LD_VAR 0 3
2144: PPUSH
2145: LD_INT 222
2147: PPUSH
2148: LD_INT 157
2150: PPUSH
2151: CALL_OW 111
// wait ( 0 0$1 ) ;
2155: LD_INT 35
2157: PPUSH
2158: CALL_OW 67
// end ;
2162: GO 2030
2164: POP
2165: POP
// end ; end_of_file
2166: LD_VAR 0 1
2170: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2171: LD_INT 0
2173: PPUSH
2174: PPUSH
2175: PPUSH
2176: PPUSH
2177: PPUSH
2178: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
2179: LD_INT 3
2181: PPUSH
2182: LD_INT 149
2184: PPUSH
2185: LD_INT 67
2187: PPUSH
2188: CALL_OW 428
2192: PPUSH
2193: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
2197: LD_ADDR_EXP 50
2201: PUSH
2202: LD_INT 111
2204: PPUSH
2205: LD_INT 89
2207: PPUSH
2208: CALL_OW 428
2212: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2213: LD_ADDR_VAR 0 2
2217: PUSH
2218: LD_INT 21
2220: PUSH
2221: LD_INT 3
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: PUSH
2228: LD_INT 23
2230: PUSH
2231: LD_INT 3
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PPUSH
2242: CALL_OW 69
2246: PUSH
2247: FOR_IN
2248: IFFALSE 2264
// SetBLevel ( i , 5 ) ;
2250: LD_VAR 0 2
2254: PPUSH
2255: LD_INT 5
2257: PPUSH
2258: CALL_OW 241
2262: GO 2247
2264: POP
2265: POP
// SetBName ( kirov , kirov ) ;
2266: LD_INT 71
2268: PPUSH
2269: LD_STRING kirov
2271: PPUSH
2272: CALL_OW 500
// SetBName ( beria , beria ) ;
2276: LD_INT 106
2278: PPUSH
2279: LD_STRING beria
2281: PPUSH
2282: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2286: LD_INT 112
2288: PPUSH
2289: LD_STRING kagan
2291: PPUSH
2292: CALL_OW 500
// uc_side := 6 ;
2296: LD_ADDR_OWVAR 20
2300: PUSH
2301: LD_INT 6
2303: ST_TO_ADDR
// uc_nation := 3 ;
2304: LD_ADDR_OWVAR 21
2308: PUSH
2309: LD_INT 3
2311: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2312: LD_ADDR_VAR 0 5
2316: PUSH
2317: LD_INT 22
2319: PUSH
2320: LD_INT 6
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PUSH
2327: LD_INT 30
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: PPUSH
2341: CALL_OW 69
2345: PUSH
2346: LD_INT 1
2348: ARRAY
2349: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
2350: LD_ADDR_VAR 0 4
2354: PUSH
2355: LD_INT 22
2357: PUSH
2358: LD_INT 6
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: PUSH
2365: LD_INT 30
2367: PUSH
2368: LD_INT 4
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: PPUSH
2379: CALL_OW 69
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
2388: LD_ADDR_EXP 44
2392: PUSH
2393: EMPTY
2394: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
2395: LD_ADDR_EXP 45
2399: PUSH
2400: EMPTY
2401: ST_TO_ADDR
// russianPatrol := [ ] ;
2402: LD_ADDR_EXP 47
2406: PUSH
2407: EMPTY
2408: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
2409: LD_ADDR_EXP 40
2413: PUSH
2414: LD_STRING Kurin
2416: PPUSH
2417: LD_INT 0
2419: PPUSH
2420: LD_STRING 
2422: PPUSH
2423: CALL 34471 0 3
2427: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
2428: LD_EXP 40
2432: PPUSH
2433: LD_INT 71
2435: PPUSH
2436: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
2440: LD_ADDR_EXP 42
2444: PUSH
2445: LD_STRING Popov
2447: PPUSH
2448: LD_INT 0
2450: PPUSH
2451: LD_STRING 
2453: PPUSH
2454: CALL 34471 0 3
2458: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
2459: LD_EXP 42
2463: PPUSH
2464: LD_INT 71
2466: PPUSH
2467: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
2471: LD_ADDR_EXP 41
2475: PUSH
2476: LD_STRING Grishko
2478: PPUSH
2479: LD_INT 0
2481: PPUSH
2482: LD_STRING 
2484: PPUSH
2485: CALL 34471 0 3
2489: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
2490: LD_EXP 41
2494: PPUSH
2495: LD_INT 207
2497: PPUSH
2498: LD_INT 106
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
2508: LD_EXP 41
2512: PPUSH
2513: LD_INT 209
2515: PPUSH
2516: LD_INT 106
2518: PPUSH
2519: CALL_OW 118
// for i := 1 to 2 do
2523: LD_ADDR_VAR 0 2
2527: PUSH
2528: DOUBLE
2529: LD_INT 1
2531: DEC
2532: ST_TO_ADDR
2533: LD_INT 2
2535: PUSH
2536: FOR_TO
2537: IFFALSE 2592
// begin PrepareHuman ( false , 2 , 2 ) ;
2539: LD_INT 0
2541: PPUSH
2542: LD_INT 2
2544: PPUSH
2545: LD_INT 2
2547: PPUSH
2548: CALL_OW 380
// un := CreateHuman ;
2552: LD_ADDR_VAR 0 3
2556: PUSH
2557: CALL_OW 44
2561: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2562: LD_VAR 0 3
2566: PPUSH
2567: LD_INT 71
2569: PPUSH
2570: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2574: LD_ADDR_EXP 44
2578: PUSH
2579: LD_EXP 44
2583: PUSH
2584: LD_VAR 0 3
2588: UNION
2589: ST_TO_ADDR
// end ;
2590: GO 2536
2592: POP
2593: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2594: LD_ADDR_VAR 0 2
2598: PUSH
2599: DOUBLE
2600: LD_INT 1
2602: DEC
2603: ST_TO_ADDR
2604: LD_INT 5
2606: PUSH
2607: LD_INT 6
2609: PUSH
2610: LD_INT 6
2612: PUSH
2613: LD_INT 6
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: PUSH
2622: LD_OWVAR 67
2626: ARRAY
2627: PUSH
2628: FOR_TO
2629: IFFALSE 2707
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
2631: LD_INT 0
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_INT 2
2639: PUSH
2640: LD_INT 3
2642: PUSH
2643: LD_INT 4
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: LIST
2654: PUSH
2655: LD_OWVAR 67
2659: ARRAY
2660: PPUSH
2661: CALL_OW 380
// un := CreateHuman ;
2665: LD_ADDR_VAR 0 3
2669: PUSH
2670: CALL_OW 44
2674: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
2675: LD_VAR 0 3
2679: PPUSH
2680: LD_VAR 0 5
2684: PPUSH
2685: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2689: LD_ADDR_EXP 44
2693: PUSH
2694: LD_EXP 44
2698: PUSH
2699: LD_VAR 0 3
2703: UNION
2704: ST_TO_ADDR
// end ;
2705: GO 2628
2707: POP
2708: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
2709: LD_ADDR_VAR 0 2
2713: PUSH
2714: LD_INT 22
2716: PUSH
2717: LD_INT 6
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: PUSH
2724: LD_INT 30
2726: PUSH
2727: LD_INT 32
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: PPUSH
2738: CALL_OW 69
2742: PUSH
2743: FOR_IN
2744: IFFALSE 2822
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
2746: LD_INT 0
2748: PPUSH
2749: LD_INT 1
2751: PPUSH
2752: LD_INT 3
2754: PUSH
2755: LD_INT 4
2757: PUSH
2758: LD_INT 4
2760: PUSH
2761: LD_INT 5
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: LIST
2768: LIST
2769: PUSH
2770: LD_OWVAR 67
2774: ARRAY
2775: PPUSH
2776: CALL_OW 380
// un := CreateHuman ;
2780: LD_ADDR_VAR 0 3
2784: PUSH
2785: CALL_OW 44
2789: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2790: LD_VAR 0 3
2794: PPUSH
2795: LD_VAR 0 2
2799: PPUSH
2800: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2804: LD_ADDR_EXP 44
2808: PUSH
2809: LD_EXP 44
2813: PUSH
2814: LD_VAR 0 3
2818: UNION
2819: ST_TO_ADDR
// end ;
2820: GO 2743
2822: POP
2823: POP
// for i := 1 to 3 do
2824: LD_ADDR_VAR 0 2
2828: PUSH
2829: DOUBLE
2830: LD_INT 1
2832: DEC
2833: ST_TO_ADDR
2834: LD_INT 3
2836: PUSH
2837: FOR_TO
2838: IFFALSE 2893
// begin PrepareHuman ( false , 3 , 3 ) ;
2840: LD_INT 0
2842: PPUSH
2843: LD_INT 3
2845: PPUSH
2846: LD_INT 3
2848: PPUSH
2849: CALL_OW 380
// un := CreateHuman ;
2853: LD_ADDR_VAR 0 3
2857: PUSH
2858: CALL_OW 44
2862: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
2863: LD_VAR 0 3
2867: PPUSH
2868: LD_INT 92
2870: PPUSH
2871: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2875: LD_ADDR_EXP 44
2879: PUSH
2880: LD_EXP 44
2884: PUSH
2885: LD_VAR 0 3
2889: UNION
2890: ST_TO_ADDR
// end ;
2891: GO 2837
2893: POP
2894: POP
// for i := 1 to 2 do
2895: LD_ADDR_VAR 0 2
2899: PUSH
2900: DOUBLE
2901: LD_INT 1
2903: DEC
2904: ST_TO_ADDR
2905: LD_INT 2
2907: PUSH
2908: FOR_TO
2909: IFFALSE 2964
// begin PrepareHuman ( false , 4 , 3 ) ;
2911: LD_INT 0
2913: PPUSH
2914: LD_INT 4
2916: PPUSH
2917: LD_INT 3
2919: PPUSH
2920: CALL_OW 380
// un := CreateHuman ;
2924: LD_ADDR_VAR 0 3
2928: PUSH
2929: CALL_OW 44
2933: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2934: LD_VAR 0 3
2938: PPUSH
2939: LD_INT 83
2941: PPUSH
2942: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2946: LD_ADDR_EXP 44
2950: PUSH
2951: LD_EXP 44
2955: PUSH
2956: LD_VAR 0 3
2960: UNION
2961: ST_TO_ADDR
// end ;
2962: GO 2908
2964: POP
2965: POP
// for i := 1 to 5 do
2966: LD_ADDR_VAR 0 2
2970: PUSH
2971: DOUBLE
2972: LD_INT 1
2974: DEC
2975: ST_TO_ADDR
2976: LD_INT 5
2978: PUSH
2979: FOR_TO
2980: IFFALSE 3037
// begin PrepareHuman ( false , 1 , 3 ) ;
2982: LD_INT 0
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 3
2990: PPUSH
2991: CALL_OW 380
// un := CreateHuman ;
2995: LD_ADDR_VAR 0 3
2999: PUSH
3000: CALL_OW 44
3004: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3005: LD_VAR 0 3
3009: PPUSH
3010: LD_VAR 0 4
3014: PPUSH
3015: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3019: LD_ADDR_EXP 46
3023: PUSH
3024: LD_EXP 46
3028: PUSH
3029: LD_VAR 0 3
3033: UNION
3034: ST_TO_ADDR
// end ;
3035: GO 2979
3037: POP
3038: POP
// russianCargo := [ ] ;
3039: LD_ADDR_EXP 49
3043: PUSH
3044: EMPTY
3045: ST_TO_ADDR
// for i := 1 to 2 do
3046: LD_ADDR_VAR 0 2
3050: PUSH
3051: DOUBLE
3052: LD_INT 1
3054: DEC
3055: ST_TO_ADDR
3056: LD_INT 2
3058: PUSH
3059: FOR_TO
3060: IFFALSE 3192
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3062: LD_INT 6
3064: PPUSH
3065: LD_INT 3
3067: PPUSH
3068: LD_INT 21
3070: PPUSH
3071: LD_INT 1
3073: PPUSH
3074: LD_INT 1
3076: PPUSH
3077: LD_INT 51
3079: PPUSH
3080: LD_INT 100
3082: PPUSH
3083: CALL 370 0 7
// un := CreateVehicle ;
3087: LD_ADDR_VAR 0 3
3091: PUSH
3092: CALL_OW 45
3096: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3097: LD_ADDR_EXP 49
3101: PUSH
3102: LD_EXP 49
3106: PUSH
3107: LD_VAR 0 3
3111: UNION
3112: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3113: LD_VAR 0 3
3117: PPUSH
3118: LD_INT 2
3120: PPUSH
3121: LD_INT 100
3123: PPUSH
3124: CALL_OW 290
// SetDir ( un , 4 ) ;
3128: LD_VAR 0 3
3132: PPUSH
3133: LD_INT 4
3135: PPUSH
3136: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3140: LD_VAR 0 3
3144: PPUSH
3145: LD_INT 147
3147: PPUSH
3148: LD_INT 103
3150: PPUSH
3151: LD_INT 4
3153: PPUSH
3154: LD_INT 0
3156: PPUSH
3157: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3161: LD_INT 0
3163: PPUSH
3164: LD_INT 1
3166: PPUSH
3167: LD_OWVAR 67
3171: PPUSH
3172: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3176: CALL_OW 44
3180: PPUSH
3181: LD_VAR 0 3
3185: PPUSH
3186: CALL_OW 52
// end ;
3190: GO 3059
3192: POP
3193: POP
// uc_side := 3 ;
3194: LD_ADDR_OWVAR 20
3198: PUSH
3199: LD_INT 3
3201: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3202: LD_ADDR_EXP 43
3206: PUSH
3207: LD_STRING Burlak
3209: PPUSH
3210: LD_INT 0
3212: PPUSH
3213: LD_STRING 
3215: PPUSH
3216: CALL 34471 0 3
3220: ST_TO_ADDR
// for i := 1 to 5 do
3221: LD_ADDR_VAR 0 2
3225: PUSH
3226: DOUBLE
3227: LD_INT 1
3229: DEC
3230: ST_TO_ADDR
3231: LD_INT 5
3233: PUSH
3234: FOR_TO
3235: IFFALSE 3328
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3237: LD_INT 0
3239: PPUSH
3240: LD_INT 1
3242: PPUSH
3243: LD_OWVAR 67
3247: PUSH
3248: LD_INT 1
3250: PLUS
3251: PPUSH
3252: CALL_OW 380
// un := CreateHuman ;
3256: LD_ADDR_VAR 0 3
3260: PUSH
3261: CALL_OW 44
3265: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3266: LD_VAR 0 3
3270: PPUSH
3271: LD_INT 22
3273: PUSH
3274: LD_INT 3
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 30
3283: PUSH
3284: LD_INT 32
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PPUSH
3295: CALL_OW 69
3299: PUSH
3300: LD_VAR 0 2
3304: ARRAY
3305: PPUSH
3306: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3310: LD_ADDR_EXP 45
3314: PUSH
3315: LD_EXP 45
3319: PUSH
3320: LD_VAR 0 3
3324: UNION
3325: ST_TO_ADDR
// end ;
3326: GO 3234
3328: POP
3329: POP
// for i := 1 to 2 do
3330: LD_ADDR_VAR 0 2
3334: PUSH
3335: DOUBLE
3336: LD_INT 1
3338: DEC
3339: ST_TO_ADDR
3340: LD_INT 2
3342: PUSH
3343: FOR_TO
3344: IFFALSE 3435
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3346: LD_INT 0
3348: PPUSH
3349: LD_INT 1
3351: PPUSH
3352: LD_OWVAR 67
3356: PUSH
3357: LD_INT 1
3359: PLUS
3360: PPUSH
3361: CALL_OW 380
// un := CreateHuman ;
3365: LD_ADDR_VAR 0 3
3369: PUSH
3370: CALL_OW 44
3374: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3375: LD_VAR 0 3
3379: PPUSH
3380: LD_INT 22
3382: PUSH
3383: LD_INT 3
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: PUSH
3390: LD_INT 30
3392: PUSH
3393: LD_INT 5
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PPUSH
3404: CALL_OW 69
3408: PUSH
3409: LD_INT 1
3411: ARRAY
3412: PPUSH
3413: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3417: LD_ADDR_EXP 45
3421: PUSH
3422: LD_EXP 45
3426: PUSH
3427: LD_VAR 0 3
3431: UNION
3432: ST_TO_ADDR
// end ;
3433: GO 3343
3435: POP
3436: POP
// for i := 1 to 2 do
3437: LD_ADDR_VAR 0 2
3441: PUSH
3442: DOUBLE
3443: LD_INT 1
3445: DEC
3446: ST_TO_ADDR
3447: LD_INT 2
3449: PUSH
3450: FOR_TO
3451: IFFALSE 3538
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3453: LD_INT 0
3455: PPUSH
3456: LD_INT 4
3458: PPUSH
3459: LD_OWVAR 67
3463: PPUSH
3464: CALL_OW 380
// un := CreateHuman ;
3468: LD_ADDR_VAR 0 3
3472: PUSH
3473: CALL_OW 44
3477: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
3478: LD_VAR 0 3
3482: PPUSH
3483: LD_INT 22
3485: PUSH
3486: LD_INT 3
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 30
3495: PUSH
3496: LD_INT 7
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PPUSH
3507: CALL_OW 69
3511: PUSH
3512: LD_INT 1
3514: ARRAY
3515: PPUSH
3516: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3520: LD_ADDR_EXP 45
3524: PUSH
3525: LD_EXP 45
3529: PUSH
3530: LD_VAR 0 3
3534: UNION
3535: ST_TO_ADDR
// end ;
3536: GO 3450
3538: POP
3539: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
3540: LD_INT 0
3542: PPUSH
3543: LD_INT 2
3545: PPUSH
3546: LD_OWVAR 67
3550: PPUSH
3551: CALL_OW 380
// un := CreateHuman ;
3555: LD_ADDR_VAR 0 3
3559: PUSH
3560: CALL_OW 44
3564: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
3565: LD_VAR 0 3
3569: PPUSH
3570: LD_INT 106
3572: PPUSH
3573: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3577: LD_ADDR_EXP 45
3581: PUSH
3582: LD_EXP 45
3586: PUSH
3587: LD_VAR 0 3
3591: UNION
3592: ST_TO_ADDR
// for i := 1 to 3 do
3593: LD_ADDR_VAR 0 2
3597: PUSH
3598: DOUBLE
3599: LD_INT 1
3601: DEC
3602: ST_TO_ADDR
3603: LD_INT 3
3605: PUSH
3606: FOR_TO
3607: IFFALSE 3729
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
3609: LD_ADDR_VAR 0 6
3613: PUSH
3614: LD_INT 22
3616: PUSH
3617: LD_INT 3
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: PUSH
3624: LD_INT 30
3626: PUSH
3627: LD_INT 31
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: PUSH
3634: EMPTY
3635: LIST
3636: LIST
3637: PPUSH
3638: CALL_OW 69
3642: PUSH
3643: LD_VAR 0 2
3647: ARRAY
3648: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
3649: LD_INT 0
3651: PPUSH
3652: LD_INT 1
3654: PPUSH
3655: LD_OWVAR 67
3659: PPUSH
3660: CALL_OW 380
// un := CreateHuman ;
3664: LD_ADDR_VAR 0 3
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
3674: LD_VAR 0 3
3678: PPUSH
3679: LD_VAR 0 6
3683: PPUSH
3684: CALL_OW 254
3688: PUSH
3689: LD_INT 3
3691: PLUS
3692: PPUSH
3693: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
3697: LD_VAR 0 3
3701: PPUSH
3702: LD_VAR 0 6
3706: PPUSH
3707: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3711: LD_ADDR_EXP 45
3715: PUSH
3716: LD_EXP 45
3720: PUSH
3721: LD_VAR 0 3
3725: UNION
3726: ST_TO_ADDR
// end ;
3727: GO 3606
3729: POP
3730: POP
// if Difficulty > 1 then
3731: LD_OWVAR 67
3735: PUSH
3736: LD_INT 1
3738: GREATER
3739: IFFALSE 3814
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
3741: LD_ADDR_VAR 0 3
3745: PUSH
3746: LD_INT 3
3748: PPUSH
3749: LD_INT 3
3751: PPUSH
3752: LD_INT 23
3754: PPUSH
3755: LD_INT 1
3757: PPUSH
3758: LD_INT 1
3760: PPUSH
3761: LD_INT 44
3763: PPUSH
3764: LD_INT 100
3766: PPUSH
3767: CALL 370 0 7
3771: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
3772: LD_VAR 0 3
3776: PPUSH
3777: LD_INT 73
3779: PPUSH
3780: LD_INT 110
3782: PPUSH
3783: LD_INT 0
3785: PPUSH
3786: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
3790: LD_INT 0
3792: PPUSH
3793: LD_INT 3
3795: PPUSH
3796: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
3800: CALL_OW 44
3804: PPUSH
3805: LD_VAR 0 3
3809: PPUSH
3810: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
3814: LD_ADDR_EXP 48
3818: PUSH
3819: EMPTY
3820: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 , 8 ] [ Difficulty ] do
3821: LD_ADDR_VAR 0 2
3825: PUSH
3826: DOUBLE
3827: LD_INT 1
3829: DEC
3830: ST_TO_ADDR
3831: LD_INT 6
3833: PUSH
3834: LD_INT 7
3836: PUSH
3837: LD_INT 8
3839: PUSH
3840: LD_INT 8
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: LD_OWVAR 67
3853: ARRAY
3854: PUSH
3855: FOR_TO
3856: IFFALSE 4080
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
3858: LD_INT 3
3860: PPUSH
3861: LD_INT 3
3863: PPUSH
3864: LD_INT 21
3866: PUSH
3867: LD_INT 23
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: LD_VAR 0 2
3878: PUSH
3879: LD_INT 2
3881: MOD
3882: PUSH
3883: LD_INT 1
3885: PLUS
3886: ARRAY
3887: PPUSH
3888: LD_INT 1
3890: PPUSH
3891: LD_INT 1
3893: PPUSH
3894: LD_INT 43
3896: PUSH
3897: LD_INT 44
3899: PUSH
3900: LD_INT 42
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: LIST
3907: PUSH
3908: LD_VAR 0 2
3912: PUSH
3913: LD_INT 3
3915: MOD
3916: PUSH
3917: LD_INT 1
3919: PLUS
3920: ARRAY
3921: PPUSH
3922: LD_INT 100
3924: PPUSH
3925: CALL 370 0 7
// un := CreateVehicle ;
3929: LD_ADDR_VAR 0 3
3933: PUSH
3934: CALL_OW 45
3938: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
3939: LD_VAR 0 3
3943: PPUSH
3944: LD_INT 0
3946: PUSH
3947: LD_INT 5
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: PUSH
3954: LD_INT 1
3956: PPUSH
3957: LD_INT 2
3959: PPUSH
3960: CALL_OW 12
3964: ARRAY
3965: PPUSH
3966: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
3970: LD_ADDR_EXP 48
3974: PUSH
3975: LD_EXP 48
3979: PUSH
3980: LD_VAR 0 3
3984: UNION
3985: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
3986: LD_VAR 0 3
3990: PPUSH
3991: LD_INT 127
3993: PPUSH
3994: LD_INT 89
3996: PPUSH
3997: LD_INT 7
3999: PPUSH
4000: LD_INT 0
4002: PPUSH
4003: CALL_OW 50
// uc_side := 3 ;
4007: LD_ADDR_OWVAR 20
4011: PUSH
4012: LD_INT 3
4014: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4015: LD_INT 0
4017: PPUSH
4018: LD_INT 3
4020: PPUSH
4021: LD_INT 3
4023: PPUSH
4024: CALL_OW 380
// un := CreateHuman ;
4028: LD_ADDR_VAR 0 3
4032: PUSH
4033: CALL_OW 44
4037: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4038: LD_ADDR_EXP 48
4042: PUSH
4043: LD_EXP 48
4047: PUSH
4048: LD_VAR 0 3
4052: UNION
4053: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4054: LD_VAR 0 3
4058: PPUSH
4059: LD_EXP 48
4063: PUSH
4064: LD_EXP 48
4068: PUSH
4069: LD_INT 1
4071: MINUS
4072: ARRAY
4073: PPUSH
4074: CALL_OW 52
// end ;
4078: GO 3855
4080: POP
4081: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
4082: LD_ADDR_VAR 0 2
4086: PUSH
4087: DOUBLE
4088: LD_INT 1
4090: DEC
4091: ST_TO_ADDR
4092: LD_INT 3
4094: PUSH
4095: LD_INT 4
4097: PUSH
4098: LD_INT 5
4100: PUSH
4101: LD_INT 6
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: PUSH
4110: LD_OWVAR 67
4114: ARRAY
4115: PUSH
4116: FOR_TO
4117: IFFALSE 4183
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4119: LD_INT 0
4121: PPUSH
4122: LD_INT 1
4124: PPUSH
4125: LD_OWVAR 67
4129: PPUSH
4130: CALL_OW 380
// un := CreateHuman ;
4134: LD_ADDR_VAR 0 3
4138: PUSH
4139: CALL_OW 44
4143: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4144: LD_ADDR_EXP 48
4148: PUSH
4149: LD_EXP 48
4153: PUSH
4154: LD_VAR 0 3
4158: UNION
4159: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4160: LD_VAR 0 3
4164: PPUSH
4165: LD_INT 91
4167: PPUSH
4168: LD_INT 60
4170: PPUSH
4171: LD_INT 3
4173: PPUSH
4174: LD_INT 0
4176: PPUSH
4177: CALL_OW 50
// end ;
4181: GO 4116
4183: POP
4184: POP
// end ;
4185: LD_VAR 0 1
4189: RET
// every 0 0$3 do var i ;
4190: GO 4192
4192: DISABLE
4193: LD_INT 0
4195: PPUSH
// begin for i := 1 to 4 do
4196: LD_ADDR_VAR 0 1
4200: PUSH
4201: DOUBLE
4202: LD_INT 1
4204: DEC
4205: ST_TO_ADDR
4206: LD_INT 4
4208: PUSH
4209: FOR_TO
4210: IFFALSE 4229
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4212: LD_EXP 46
4216: PUSH
4217: LD_VAR 0 1
4221: ARRAY
4222: PPUSH
4223: CALL_OW 122
4227: GO 4209
4229: POP
4230: POP
// wait ( 3 ) ;
4231: LD_INT 3
4233: PPUSH
4234: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4238: LD_EXP 46
4242: PUSH
4243: LD_INT 1
4245: ARRAY
4246: PPUSH
4247: LD_INT 22
4249: PUSH
4250: LD_INT 6
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: LD_INT 30
4259: PUSH
4260: LD_INT 31
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: PPUSH
4271: CALL_OW 69
4275: PPUSH
4276: LD_EXP 46
4280: PUSH
4281: LD_INT 1
4283: ARRAY
4284: PPUSH
4285: CALL_OW 74
4289: PPUSH
4290: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4294: LD_EXP 46
4298: PUSH
4299: LD_INT 2
4301: ARRAY
4302: PPUSH
4303: LD_INT 211
4305: PPUSH
4306: LD_INT 107
4308: PPUSH
4309: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4313: LD_EXP 46
4317: PUSH
4318: LD_INT 2
4320: ARRAY
4321: PPUSH
4322: LD_INT 209
4324: PPUSH
4325: LD_INT 106
4327: PPUSH
4328: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4332: LD_EXP 46
4336: PUSH
4337: LD_INT 3
4339: ARRAY
4340: PPUSH
4341: LD_INT 209
4343: PPUSH
4344: LD_INT 103
4346: PPUSH
4347: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4351: LD_EXP 46
4355: PUSH
4356: LD_INT 3
4358: ARRAY
4359: PPUSH
4360: LD_INT 209
4362: PPUSH
4363: LD_INT 106
4365: PPUSH
4366: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4370: LD_EXP 46
4374: PUSH
4375: LD_INT 4
4377: ARRAY
4378: PPUSH
4379: LD_INT 227
4381: PPUSH
4382: LD_INT 117
4384: PPUSH
4385: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4389: LD_EXP 46
4393: PUSH
4394: LD_INT 4
4396: ARRAY
4397: PPUSH
4398: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4402: LD_INT 700
4404: PPUSH
4405: CALL_OW 67
// for i := 3 downto 2 do
4409: LD_ADDR_VAR 0 1
4413: PUSH
4414: DOUBLE
4415: LD_INT 3
4417: INC
4418: ST_TO_ADDR
4419: LD_INT 2
4421: PUSH
4422: FOR_DOWNTO
4423: IFFALSE 4590
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4425: LD_EXP 46
4429: PUSH
4430: LD_VAR 0 1
4434: ARRAY
4435: PPUSH
4436: LD_INT 200
4438: PPUSH
4439: LD_INT 91
4441: PPUSH
4442: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4446: LD_EXP 46
4450: PUSH
4451: LD_VAR 0 1
4455: ARRAY
4456: PPUSH
4457: LD_INT 210
4459: PPUSH
4460: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4464: LD_EXP 46
4468: PUSH
4469: LD_VAR 0 1
4473: ARRAY
4474: PPUSH
4475: LD_INT 224
4477: PPUSH
4478: LD_INT 93
4480: PPUSH
4481: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4485: LD_EXP 46
4489: PUSH
4490: LD_VAR 0 1
4494: ARRAY
4495: PPUSH
4496: LD_INT 210
4498: PPUSH
4499: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4503: LD_EXP 46
4507: PUSH
4508: LD_VAR 0 1
4512: ARRAY
4513: PPUSH
4514: LD_INT 239
4516: PPUSH
4517: LD_INT 123
4519: PPUSH
4520: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4524: LD_EXP 46
4528: PUSH
4529: LD_VAR 0 1
4533: ARRAY
4534: PPUSH
4535: LD_INT 210
4537: PPUSH
4538: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4542: LD_EXP 46
4546: PUSH
4547: LD_VAR 0 1
4551: ARRAY
4552: PPUSH
4553: LD_INT 212
4555: PPUSH
4556: LD_INT 105
4558: PPUSH
4559: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4563: LD_EXP 46
4567: PUSH
4568: LD_VAR 0 1
4572: ARRAY
4573: PPUSH
4574: LD_INT 700
4576: PPUSH
4577: CALL_OW 202
// wait ( 0 0$30 ) ;
4581: LD_INT 1050
4583: PPUSH
4584: CALL_OW 67
// end ;
4588: GO 4422
4590: POP
4591: POP
// until not activeGrishkoAI ;
4592: LD_EXP 10
4596: NOT
4597: IFFALSE 4402
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
4599: LD_EXP 46
4603: PPUSH
4604: LD_INT 221
4606: PPUSH
4607: LD_INT 110
4609: PPUSH
4610: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
4614: LD_EXP 46
4618: PPUSH
4619: LD_INT 228
4621: PPUSH
4622: LD_INT 115
4624: PPUSH
4625: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
4629: LD_EXP 46
4633: PPUSH
4634: CALL_OW 200
// end ;
4638: PPOPN 1
4640: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
4641: LD_EXP 12
4645: IFFALSE 5391
4647: GO 4649
4649: DISABLE
4650: LD_INT 0
4652: PPUSH
4653: PPUSH
4654: PPUSH
4655: PPUSH
// begin uc_side := 6 ;
4656: LD_ADDR_OWVAR 20
4660: PUSH
4661: LD_INT 6
4663: ST_TO_ADDR
// uc_nation := 3 ;
4664: LD_ADDR_OWVAR 21
4668: PUSH
4669: LD_INT 3
4671: ST_TO_ADDR
// for i := 1 to 3 do
4672: LD_ADDR_VAR 0 2
4676: PUSH
4677: DOUBLE
4678: LD_INT 1
4680: DEC
4681: ST_TO_ADDR
4682: LD_INT 3
4684: PUSH
4685: FOR_TO
4686: IFFALSE 4799
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
4688: LD_INT 0
4690: PPUSH
4691: LD_INT 1
4693: PPUSH
4694: LD_INT 2
4696: PUSH
4697: LD_INT 3
4699: PUSH
4700: LD_INT 4
4702: PUSH
4703: LD_INT 4
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: PUSH
4712: LD_OWVAR 67
4716: ARRAY
4717: PPUSH
4718: CALL_OW 380
// un := CreateHuman ;
4722: LD_ADDR_VAR 0 1
4726: PUSH
4727: CALL_OW 44
4731: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
4732: LD_ADDR_EXP 47
4736: PUSH
4737: LD_EXP 47
4741: PUSH
4742: LD_VAR 0 1
4746: UNION
4747: ST_TO_ADDR
// SetTag ( un , 1 ) ;
4748: LD_VAR 0 1
4752: PPUSH
4753: LD_INT 1
4755: PPUSH
4756: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
4760: LD_VAR 0 1
4764: PPUSH
4765: LD_INT 11
4767: PPUSH
4768: LD_INT 0
4770: PPUSH
4771: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
4775: LD_VAR 0 1
4779: PPUSH
4780: LD_INT 210
4782: PPUSH
4783: LD_INT 159
4785: PPUSH
4786: CALL_OW 111
// wait ( 0 0$2 ) ;
4790: LD_INT 70
4792: PPUSH
4793: CALL_OW 67
// end ;
4797: GO 4685
4799: POP
4800: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
4801: LD_ADDR_VAR 0 4
4805: PUSH
4806: LD_INT 172
4808: PUSH
4809: LD_INT 76
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 150
4818: PUSH
4819: LD_INT 38
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: LD_INT 148
4828: PUSH
4829: LD_INT 9
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 165
4838: PUSH
4839: LD_INT 38
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: PUSH
4852: LD_INT 191
4854: PUSH
4855: LD_INT 77
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 168
4864: PUSH
4865: LD_INT 42
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: PUSH
4872: LD_INT 166
4874: PUSH
4875: LD_INT 11
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PUSH
4882: LD_INT 151
4884: PUSH
4885: LD_INT 12
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: PUSH
4898: LD_INT 221
4900: PUSH
4901: LD_INT 88
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 217
4910: PUSH
4911: LD_INT 64
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 232
4920: PUSH
4921: LD_INT 66
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: LD_INT 200
4930: PUSH
4931: LD_INT 56
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: LIST
4948: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4949: LD_INT 35
4951: PPUSH
4952: CALL_OW 67
// for i := russianPatrol downto 1 do
4956: LD_ADDR_VAR 0 2
4960: PUSH
4961: DOUBLE
4962: LD_EXP 47
4966: INC
4967: ST_TO_ADDR
4968: LD_INT 1
4970: PUSH
4971: FOR_DOWNTO
4972: IFFALSE 5355
// begin if IsDead ( russianPatrol [ i ] ) then
4974: LD_EXP 47
4978: PUSH
4979: LD_VAR 0 2
4983: ARRAY
4984: PPUSH
4985: CALL_OW 301
4989: IFFALSE 4993
// continue ;
4991: GO 4971
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
4993: LD_EXP 47
4997: PUSH
4998: LD_VAR 0 2
5002: ARRAY
5003: PPUSH
5004: CALL_OW 256
5008: PUSH
5009: LD_INT 990
5011: LESS
5012: PUSH
5013: LD_EXP 47
5017: PUSH
5018: LD_VAR 0 2
5022: ARRAY
5023: PPUSH
5024: CALL_OW 110
5028: PUSH
5029: LD_INT 1
5031: EQUAL
5032: AND
5033: IFFALSE 5053
// SetTag ( russianPatrol [ i ] , 2 ) ;
5035: LD_EXP 47
5039: PUSH
5040: LD_VAR 0 2
5044: ARRAY
5045: PPUSH
5046: LD_INT 2
5048: PPUSH
5049: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5053: LD_EXP 47
5057: PUSH
5058: LD_VAR 0 2
5062: ARRAY
5063: PPUSH
5064: CALL_OW 110
5068: PUSH
5069: LD_INT 2
5071: EQUAL
5072: IFFALSE 5139
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5074: LD_EXP 47
5078: PUSH
5079: LD_VAR 0 2
5083: ARRAY
5084: PPUSH
5085: LD_INT 166
5087: PPUSH
5088: LD_INT 101
5090: PPUSH
5091: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5095: LD_EXP 47
5099: PUSH
5100: LD_VAR 0 2
5104: ARRAY
5105: PPUSH
5106: LD_INT 71
5108: PPUSH
5109: CALL_OW 296
5113: PUSH
5114: LD_INT 10
5116: LESS
5117: IFFALSE 5137
// SetTag ( russianPatrol [ i ] , 3 ) ;
5119: LD_EXP 47
5123: PUSH
5124: LD_VAR 0 2
5128: ARRAY
5129: PPUSH
5130: LD_INT 3
5132: PPUSH
5133: CALL_OW 109
// continue ;
5137: GO 4971
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5139: LD_EXP 47
5143: PUSH
5144: LD_VAR 0 2
5148: ARRAY
5149: PPUSH
5150: CALL_OW 110
5154: PUSH
5155: LD_INT 3
5157: EQUAL
5158: IFFALSE 5253
// begin spottedByPatrol := true ;
5160: LD_ADDR_EXP 7
5164: PUSH
5165: LD_INT 1
5167: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5168: LD_EXP 47
5172: PUSH
5173: LD_VAR 0 2
5177: ARRAY
5178: PPUSH
5179: CALL_OW 250
5183: PPUSH
5184: LD_EXP 47
5188: PUSH
5189: LD_VAR 0 2
5193: ARRAY
5194: PPUSH
5195: CALL_OW 251
5199: PPUSH
5200: LD_INT 2
5202: PPUSH
5203: LD_INT 6
5205: NEG
5206: PPUSH
5207: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
5211: LD_EXP 47
5215: PUSH
5216: LD_VAR 0 2
5220: ARRAY
5221: PPUSH
5222: CALL_OW 87
// DialogueOn ;
5226: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
5230: LD_EXP 25
5234: PPUSH
5235: LD_STRING DH-Spot-f-3
5237: PPUSH
5238: CALL_OW 88
// DialogueOff ;
5242: CALL_OW 7
// YouLost ( Spotted ) ;
5246: LD_STRING Spotted
5248: PPUSH
5249: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
5253: LD_EXP 47
5257: PUSH
5258: LD_VAR 0 2
5262: ARRAY
5263: PPUSH
5264: CALL_OW 314
5268: NOT
5269: IFFALSE 5353
// for j in patrol [ i ] do
5271: LD_ADDR_VAR 0 3
5275: PUSH
5276: LD_VAR 0 4
5280: PUSH
5281: LD_VAR 0 2
5285: ARRAY
5286: PUSH
5287: FOR_IN
5288: IFFALSE 5351
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5290: LD_EXP 47
5294: PUSH
5295: LD_VAR 0 2
5299: ARRAY
5300: PPUSH
5301: LD_INT 35
5303: PPUSH
5304: LD_INT 175
5306: PPUSH
5307: CALL_OW 12
5311: PPUSH
5312: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5316: LD_EXP 47
5320: PUSH
5321: LD_VAR 0 2
5325: ARRAY
5326: PPUSH
5327: LD_VAR 0 3
5331: PUSH
5332: LD_INT 1
5334: ARRAY
5335: PPUSH
5336: LD_VAR 0 3
5340: PUSH
5341: LD_INT 2
5343: ARRAY
5344: PPUSH
5345: CALL_OW 174
// end ;
5349: GO 5287
5351: POP
5352: POP
// end ;
5353: GO 4971
5355: POP
5356: POP
// until not russianPatrol or russianAlert ;
5357: LD_EXP 47
5361: NOT
5362: PUSH
5363: LD_EXP 9
5367: OR
5368: IFFALSE 4949
// if russianPatrol then
5370: LD_EXP 47
5374: IFFALSE 5391
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5376: LD_EXP 47
5380: PPUSH
5381: LD_INT 161
5383: PPUSH
5384: LD_INT 107
5386: PPUSH
5387: CALL_OW 114
// end ;
5391: PPOPN 4
5393: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5394: LD_EXP 6
5398: PUSH
5399: LD_EXP 13
5403: NOT
5404: AND
5405: IFFALSE 5891
5407: GO 5409
5409: DISABLE
5410: LD_INT 0
5412: PPUSH
5413: PPUSH
5414: PPUSH
5415: PPUSH
5416: PPUSH
// begin enable ;
5417: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5418: LD_ADDR_VAR 0 2
5422: PUSH
5423: LD_EXP 48
5427: PPUSH
5428: LD_INT 21
5430: PUSH
5431: LD_INT 2
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PPUSH
5438: CALL_OW 72
5442: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5443: LD_ADDR_VAR 0 4
5447: PUSH
5448: LD_INT 22
5450: PUSH
5451: LD_INT 4
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PPUSH
5458: CALL_OW 69
5462: ST_TO_ADDR
// for i in filter do
5463: LD_ADDR_VAR 0 1
5467: PUSH
5468: LD_VAR 0 2
5472: PUSH
5473: FOR_IN
5474: IFFALSE 5889
// begin tmp := IsDrivenBy ( i ) ;
5476: LD_ADDR_VAR 0 3
5480: PUSH
5481: LD_VAR 0 1
5485: PPUSH
5486: CALL_OW 311
5490: ST_TO_ADDR
// if not tmp then
5491: LD_VAR 0 3
5495: NOT
5496: IFFALSE 5500
// continue ;
5498: GO 5473
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5500: LD_VAR 0 1
5504: PPUSH
5505: CALL_OW 261
5509: PUSH
5510: LD_INT 90
5512: GREATER
5513: PUSH
5514: LD_VAR 0 1
5518: PPUSH
5519: CALL_OW 110
5523: PUSH
5524: LD_INT 2
5526: EQUAL
5527: AND
5528: IFFALSE 5544
// SetTag ( i , 0 ) else
5530: LD_VAR 0 1
5534: PPUSH
5535: LD_INT 0
5537: PPUSH
5538: CALL_OW 109
5542: GO 5640
// if GetTag ( i ) = 2 then
5544: LD_VAR 0 1
5548: PPUSH
5549: CALL_OW 110
5553: PUSH
5554: LD_INT 2
5556: EQUAL
5557: IFFALSE 5640
// begin x := rand ( 1 , 2 ) ;
5559: LD_ADDR_VAR 0 5
5563: PUSH
5564: LD_INT 1
5566: PPUSH
5567: LD_INT 2
5569: PPUSH
5570: CALL_OW 12
5574: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5575: LD_VAR 0 1
5579: PPUSH
5580: LD_EXP 49
5584: PUSH
5585: LD_VAR 0 5
5589: ARRAY
5590: PPUSH
5591: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
5595: LD_EXP 49
5599: PUSH
5600: LD_VAR 0 5
5604: ARRAY
5605: PPUSH
5606: LD_INT 2
5608: PPUSH
5609: CALL_OW 289
5613: PUSH
5614: LD_INT 20
5616: LESS
5617: IFFALSE 5640
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
5619: LD_EXP 49
5623: PUSH
5624: LD_VAR 0 5
5628: ARRAY
5629: PPUSH
5630: LD_INT 2
5632: PPUSH
5633: LD_INT 100
5635: PPUSH
5636: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5640: LD_VAR 0 1
5644: PPUSH
5645: CALL_OW 256
5649: PUSH
5650: LD_INT 600
5652: GREATEREQUAL
5653: PUSH
5654: LD_VAR 0 1
5658: PPUSH
5659: CALL_OW 110
5663: NOT
5664: AND
5665: IFFALSE 5691
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5667: LD_VAR 0 1
5671: PPUSH
5672: LD_VAR 0 4
5676: PPUSH
5677: LD_VAR 0 1
5681: PPUSH
5682: CALL_OW 74
5686: PPUSH
5687: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5691: LD_VAR 0 1
5695: PPUSH
5696: CALL_OW 256
5700: PUSH
5701: LD_INT 600
5703: LESS
5704: PUSH
5705: LD_VAR 0 1
5709: PPUSH
5710: CALL_OW 110
5714: NOT
5715: AND
5716: IFFALSE 5745
// begin SetTag ( i , 1 ) ;
5718: LD_VAR 0 1
5722: PPUSH
5723: LD_INT 1
5725: PPUSH
5726: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5730: LD_VAR 0 1
5734: PPUSH
5735: LD_INT 62
5737: PPUSH
5738: LD_INT 22
5740: PPUSH
5741: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5745: LD_VAR 0 1
5749: PPUSH
5750: CALL_OW 110
5754: PUSH
5755: LD_INT 1
5757: EQUAL
5758: PUSH
5759: LD_VAR 0 1
5763: PPUSH
5764: LD_INT 62
5766: PPUSH
5767: LD_INT 22
5769: PPUSH
5770: CALL_OW 297
5774: PUSH
5775: LD_INT 6
5777: LESS
5778: AND
5779: PUSH
5780: LD_VAR 0 3
5784: AND
5785: IFFALSE 5887
// begin ComExitVehicle ( tmp ) ;
5787: LD_VAR 0 3
5791: PPUSH
5792: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
5796: LD_VAR 0 3
5800: PPUSH
5801: LD_VAR 0 1
5805: PPUSH
5806: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5810: LD_INT 35
5812: PPUSH
5813: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5817: LD_VAR 0 1
5821: PPUSH
5822: CALL_OW 256
5826: PUSH
5827: LD_INT 1000
5829: EQUAL
5830: IFFALSE 5810
// ComEnterUnit ( tmp , i ) ;
5832: LD_VAR 0 3
5836: PPUSH
5837: LD_VAR 0 1
5841: PPUSH
5842: CALL_OW 120
// if GetFuel ( i ) <= 90 then
5846: LD_VAR 0 1
5850: PPUSH
5851: CALL_OW 261
5855: PUSH
5856: LD_INT 90
5858: LESSEQUAL
5859: IFFALSE 5875
// SetTag ( i , 2 ) else
5861: LD_VAR 0 1
5865: PPUSH
5866: LD_INT 2
5868: PPUSH
5869: CALL_OW 109
5873: GO 5887
// SetTag ( i , 0 ) ;
5875: LD_VAR 0 1
5879: PPUSH
5880: LD_INT 0
5882: PPUSH
5883: CALL_OW 109
// end ; end ;
5887: GO 5473
5889: POP
5890: POP
// end ;
5891: PPOPN 5
5893: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
5894: LD_EXP 20
5898: IFFALSE 6121
5900: GO 5902
5902: DISABLE
5903: LD_INT 0
5905: PPUSH
5906: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
5907: LD_EXP 49
5911: PPUSH
5912: LD_INT 79
5914: PPUSH
5915: LD_INT 155
5917: PPUSH
5918: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
5922: LD_EXP 49
5926: PPUSH
5927: LD_INT 16
5929: PPUSH
5930: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5934: LD_ADDR_VAR 0 2
5938: PUSH
5939: LD_EXP 48
5943: PPUSH
5944: LD_INT 50
5946: PUSH
5947: EMPTY
5948: LIST
5949: PPUSH
5950: CALL_OW 72
5954: ST_TO_ADDR
// for i in tmp do
5955: LD_ADDR_VAR 0 1
5959: PUSH
5960: LD_VAR 0 2
5964: PUSH
5965: FOR_IN
5966: IFFALSE 6000
// begin ComAgressiveMove ( i , 123 , 60 ) ;
5968: LD_VAR 0 1
5972: PPUSH
5973: LD_INT 123
5975: PPUSH
5976: LD_INT 60
5978: PPUSH
5979: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
5983: LD_VAR 0 1
5987: PPUSH
5988: LD_INT 153
5990: PPUSH
5991: LD_INT 103
5993: PPUSH
5994: CALL_OW 174
// end ;
5998: GO 5965
6000: POP
6001: POP
// repeat wait ( 0 0$1 ) ;
6002: LD_INT 35
6004: PPUSH
6005: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6009: LD_ADDR_VAR 0 2
6013: PUSH
6014: LD_EXP 48
6018: PPUSH
6019: LD_INT 50
6021: PUSH
6022: EMPTY
6023: LIST
6024: PPUSH
6025: CALL_OW 72
6029: ST_TO_ADDR
// for i in tmp do
6030: LD_ADDR_VAR 0 1
6034: PUSH
6035: LD_VAR 0 2
6039: PUSH
6040: FOR_IN
6041: IFFALSE 6112
// if not HasTask ( i ) then
6043: LD_VAR 0 1
6047: PPUSH
6048: CALL_OW 314
6052: NOT
6053: IFFALSE 6110
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
6055: LD_VAR 0 1
6059: PPUSH
6060: LD_INT 81
6062: PUSH
6063: LD_INT 3
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: PUSH
6070: LD_INT 3
6072: PUSH
6073: LD_INT 21
6075: PUSH
6076: LD_INT 3
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: PPUSH
6091: CALL_OW 69
6095: PPUSH
6096: LD_VAR 0 1
6100: PPUSH
6101: CALL_OW 74
6105: PPUSH
6106: CALL_OW 115
6110: GO 6040
6112: POP
6113: POP
6114: LD_VAR 0 2
6118: NOT
6119: IFFALSE 6002
// end ;
6121: PPOPN 2
6123: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6124: LD_INT 22
6126: PUSH
6127: LD_INT 3
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: PUSH
6134: LD_INT 32
6136: PUSH
6137: LD_INT 1
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PPUSH
6148: CALL_OW 69
6152: IFFALSE 6231
6154: GO 6156
6156: DISABLE
6157: LD_INT 0
6159: PPUSH
// begin enable ;
6160: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6161: LD_ADDR_VAR 0 1
6165: PUSH
6166: LD_INT 22
6168: PUSH
6169: LD_INT 3
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 32
6178: PUSH
6179: LD_INT 1
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PPUSH
6190: CALL_OW 69
6194: PUSH
6195: FOR_IN
6196: IFFALSE 6229
// if GetFuel ( i ) < 1 then
6198: LD_VAR 0 1
6202: PPUSH
6203: CALL_OW 261
6207: PUSH
6208: LD_INT 1
6210: LESS
6211: IFFALSE 6227
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6213: LD_VAR 0 1
6217: PPUSH
6218: CALL_OW 311
6222: PPUSH
6223: CALL_OW 121
6227: GO 6195
6229: POP
6230: POP
// end ; end_of_file
6231: PPOPN 1
6233: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6234: LD_INT 0
6236: PPUSH
6237: PPUSH
6238: PPUSH
// SetBName ( omikron , omikron ) ;
6239: LD_INT 64
6241: PPUSH
6242: LD_STRING omikron
6244: PPUSH
6245: CALL_OW 500
// uc_side := 4 ;
6249: LD_ADDR_OWVAR 20
6253: PUSH
6254: LD_INT 4
6256: ST_TO_ADDR
// uc_nation := 1 ;
6257: LD_ADDR_OWVAR 21
6261: PUSH
6262: LD_INT 1
6264: ST_TO_ADDR
// omicronSquad := [ ] ;
6265: LD_ADDR_EXP 51
6269: PUSH
6270: EMPTY
6271: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6272: LD_ADDR_VAR 0 2
6276: PUSH
6277: LD_INT 22
6279: PUSH
6280: LD_INT 4
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 2
6289: PUSH
6290: LD_INT 30
6292: PUSH
6293: LD_INT 32
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: PUSH
6300: LD_INT 30
6302: PUSH
6303: LD_INT 31
6305: PUSH
6306: EMPTY
6307: LIST
6308: LIST
6309: PUSH
6310: EMPTY
6311: LIST
6312: LIST
6313: LIST
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: PPUSH
6319: CALL_OW 69
6323: PUSH
6324: FOR_IN
6325: IFFALSE 6382
// begin PrepareHuman ( false , 1 , 1 ) ;
6327: LD_INT 0
6329: PPUSH
6330: LD_INT 1
6332: PPUSH
6333: LD_INT 1
6335: PPUSH
6336: CALL_OW 380
// un := CreateHuman ;
6340: LD_ADDR_VAR 0 3
6344: PUSH
6345: CALL_OW 44
6349: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6350: LD_ADDR_EXP 51
6354: PUSH
6355: LD_EXP 51
6359: PUSH
6360: LD_VAR 0 3
6364: UNION
6365: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6366: LD_VAR 0 3
6370: PPUSH
6371: LD_VAR 0 2
6375: PPUSH
6376: CALL_OW 52
// end ;
6380: GO 6324
6382: POP
6383: POP
// for i := 1 to 3 do
6384: LD_ADDR_VAR 0 2
6388: PUSH
6389: DOUBLE
6390: LD_INT 1
6392: DEC
6393: ST_TO_ADDR
6394: LD_INT 3
6396: PUSH
6397: FOR_TO
6398: IFFALSE 6453
// begin PrepareHuman ( false , 2 , 2 ) ;
6400: LD_INT 0
6402: PPUSH
6403: LD_INT 2
6405: PPUSH
6406: LD_INT 2
6408: PPUSH
6409: CALL_OW 380
// un := CreateHuman ;
6413: LD_ADDR_VAR 0 3
6417: PUSH
6418: CALL_OW 44
6422: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6423: LD_ADDR_EXP 51
6427: PUSH
6428: LD_EXP 51
6432: PUSH
6433: LD_VAR 0 3
6437: UNION
6438: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6439: LD_VAR 0 3
6443: PPUSH
6444: LD_INT 64
6446: PPUSH
6447: CALL_OW 52
// end ;
6451: GO 6397
6453: POP
6454: POP
// for i := 1 to 2 do
6455: LD_ADDR_VAR 0 2
6459: PUSH
6460: DOUBLE
6461: LD_INT 1
6463: DEC
6464: ST_TO_ADDR
6465: LD_INT 2
6467: PUSH
6468: FOR_TO
6469: IFFALSE 6608
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6471: LD_INT 4
6473: PPUSH
6474: LD_INT 1
6476: PPUSH
6477: LD_INT 2
6479: PPUSH
6480: LD_INT 2
6482: PPUSH
6483: LD_INT 1
6485: PPUSH
6486: LD_INT 3
6488: PPUSH
6489: LD_INT 100
6491: PPUSH
6492: CALL 370 0 7
// un := CreateVehicle ;
6496: LD_ADDR_VAR 0 3
6500: PUSH
6501: CALL_OW 45
6505: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6506: LD_ADDR_EXP 51
6510: PUSH
6511: LD_EXP 51
6515: PUSH
6516: LD_VAR 0 3
6520: UNION
6521: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
6522: LD_VAR 0 3
6526: PPUSH
6527: LD_INT 28
6529: PPUSH
6530: LD_INT 37
6532: PPUSH
6533: LD_INT 6
6535: PPUSH
6536: LD_INT 0
6538: PPUSH
6539: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
6543: LD_INT 0
6545: PPUSH
6546: LD_INT 3
6548: PPUSH
6549: LD_INT 2
6551: PPUSH
6552: CALL_OW 380
// un := CreateHuman ;
6556: LD_ADDR_VAR 0 3
6560: PUSH
6561: CALL_OW 44
6565: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6566: LD_ADDR_EXP 51
6570: PUSH
6571: LD_EXP 51
6575: PUSH
6576: LD_VAR 0 3
6580: UNION
6581: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
6582: LD_VAR 0 3
6586: PPUSH
6587: LD_EXP 51
6591: PUSH
6592: LD_EXP 51
6596: PUSH
6597: LD_INT 1
6599: MINUS
6600: ARRAY
6601: PPUSH
6602: CALL_OW 52
// end ;
6606: GO 6468
6608: POP
6609: POP
// end ;
6610: LD_VAR 0 1
6614: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
6615: LD_INT 0
6617: PPUSH
6618: PPUSH
6619: PPUSH
6620: PPUSH
// uc_side := 4 ;
6621: LD_ADDR_OWVAR 20
6625: PUSH
6626: LD_INT 4
6628: ST_TO_ADDR
// uc_nation := 1 ;
6629: LD_ADDR_OWVAR 21
6633: PUSH
6634: LD_INT 1
6636: ST_TO_ADDR
// tmp := [ ] ;
6637: LD_ADDR_VAR 0 4
6641: PUSH
6642: EMPTY
6643: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
6644: LD_INT 4
6646: PPUSH
6647: LD_INT 1
6649: PPUSH
6650: LD_INT 2
6652: PPUSH
6653: LD_INT 1
6655: PPUSH
6656: LD_INT 1
6658: PPUSH
6659: LD_INT 4
6661: PPUSH
6662: LD_INT 77
6664: PPUSH
6665: CALL 370 0 7
// un := CreateVehicle ;
6669: LD_ADDR_VAR 0 3
6673: PUSH
6674: CALL_OW 45
6678: ST_TO_ADDR
// tmp := tmp union un ;
6679: LD_ADDR_VAR 0 4
6683: PUSH
6684: LD_VAR 0 4
6688: PUSH
6689: LD_VAR 0 3
6693: UNION
6694: ST_TO_ADDR
// SetDir ( un , 2 ) ;
6695: LD_VAR 0 3
6699: PPUSH
6700: LD_INT 2
6702: PPUSH
6703: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
6707: LD_VAR 0 3
6711: PPUSH
6712: LD_INT 106
6714: PPUSH
6715: LD_INT 3
6717: PPUSH
6718: LD_INT 0
6720: PPUSH
6721: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
6725: LD_INT 0
6727: PPUSH
6728: LD_INT 3
6730: PPUSH
6731: LD_INT 2
6733: PPUSH
6734: CALL_OW 380
// un := CreateHuman ;
6738: LD_ADDR_VAR 0 3
6742: PUSH
6743: CALL_OW 44
6747: ST_TO_ADDR
// tmp := tmp union un ;
6748: LD_ADDR_VAR 0 4
6752: PUSH
6753: LD_VAR 0 4
6757: PUSH
6758: LD_VAR 0 3
6762: UNION
6763: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
6764: LD_VAR 0 3
6768: PPUSH
6769: LD_VAR 0 4
6773: PUSH
6774: LD_VAR 0 4
6778: PUSH
6779: LD_INT 1
6781: MINUS
6782: ARRAY
6783: PPUSH
6784: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
6788: LD_VAR 0 3
6792: PPUSH
6793: LD_INT 109
6795: PPUSH
6796: LD_INT 9
6798: PPUSH
6799: CALL_OW 111
// wait ( 0 0$1 ) ;
6803: LD_INT 35
6805: PPUSH
6806: CALL_OW 67
// for i := 1 to 2 do
6810: LD_ADDR_VAR 0 2
6814: PUSH
6815: DOUBLE
6816: LD_INT 1
6818: DEC
6819: ST_TO_ADDR
6820: LD_INT 2
6822: PUSH
6823: FOR_TO
6824: IFFALSE 6888
// begin PrepareHuman ( false , 1 , 2 ) ;
6826: LD_INT 0
6828: PPUSH
6829: LD_INT 1
6831: PPUSH
6832: LD_INT 2
6834: PPUSH
6835: CALL_OW 380
// un := CreateHuman ;
6839: LD_ADDR_VAR 0 3
6843: PUSH
6844: CALL_OW 44
6848: ST_TO_ADDR
// tmp := tmp union un ;
6849: LD_ADDR_VAR 0 4
6853: PUSH
6854: LD_VAR 0 4
6858: PUSH
6859: LD_VAR 0 3
6863: UNION
6864: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
6865: LD_VAR 0 3
6869: PPUSH
6870: LD_INT 105
6872: PPUSH
6873: LD_INT 2
6875: PPUSH
6876: LD_INT 2
6878: PPUSH
6879: LD_INT 0
6881: PPUSH
6882: CALL_OW 50
// end ;
6886: GO 6823
6888: POP
6889: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
6890: LD_VAR 0 4
6894: PPUSH
6895: LD_INT 26
6897: PPUSH
6898: LD_INT 35
6900: PPUSH
6901: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
6905: LD_INT 35
6907: PPUSH
6908: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
6912: LD_VAR 0 4
6916: PPUSH
6917: LD_INT 50
6919: PUSH
6920: EMPTY
6921: LIST
6922: PPUSH
6923: CALL_OW 72
6927: NOT
6928: IFFALSE 6932
// exit ;
6930: GO 7059
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
6932: LD_VAR 0 4
6936: PPUSH
6937: LD_INT 91
6939: PUSH
6940: LD_INT 64
6942: PUSH
6943: LD_INT 12
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: LIST
6950: PPUSH
6951: CALL_OW 72
6955: PUSH
6956: LD_VAR 0 4
6960: EQUAL
6961: IFFALSE 6905
// omicronSquad := omicronSquad union tmp ;
6963: LD_ADDR_EXP 51
6967: PUSH
6968: LD_EXP 51
6972: PUSH
6973: LD_VAR 0 4
6977: UNION
6978: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
6979: LD_ADDR_VAR 0 2
6983: PUSH
6984: LD_VAR 0 4
6988: PPUSH
6989: LD_INT 25
6991: PUSH
6992: LD_INT 1
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: PPUSH
6999: CALL_OW 72
7003: PUSH
7004: FOR_IN
7005: IFFALSE 7057
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7007: LD_VAR 0 2
7011: PPUSH
7012: LD_INT 22
7014: PUSH
7015: LD_INT 4
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PUSH
7022: LD_INT 30
7024: PUSH
7025: LD_INT 4
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PPUSH
7036: CALL_OW 69
7040: PPUSH
7041: LD_VAR 0 2
7045: PPUSH
7046: CALL_OW 74
7050: PPUSH
7051: CALL_OW 120
7055: GO 7004
7057: POP
7058: POP
// end ;
7059: LD_VAR 0 1
7063: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7064: LD_EXP 13
7068: NOT
7069: IFFALSE 7640
7071: GO 7073
7073: DISABLE
7074: LD_INT 0
7076: PPUSH
7077: PPUSH
7078: PPUSH
7079: PPUSH
// begin enable ;
7080: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7081: LD_ADDR_VAR 0 2
7085: PUSH
7086: LD_INT 22
7088: PUSH
7089: LD_INT 4
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PUSH
7096: LD_INT 21
7098: PUSH
7099: LD_INT 3
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: PUSH
7106: LD_INT 3
7108: PUSH
7109: LD_INT 24
7111: PUSH
7112: LD_INT 1000
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: LIST
7127: PPUSH
7128: CALL_OW 69
7132: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7133: LD_ADDR_VAR 0 3
7137: PUSH
7138: LD_EXP 51
7142: PPUSH
7143: LD_INT 25
7145: PUSH
7146: LD_INT 2
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PPUSH
7153: CALL_OW 72
7157: ST_TO_ADDR
// if filter and tmp then
7158: LD_VAR 0 2
7162: PUSH
7163: LD_VAR 0 3
7167: AND
7168: IFFALSE 7241
// begin for i in tmp do
7170: LD_ADDR_VAR 0 1
7174: PUSH
7175: LD_VAR 0 3
7179: PUSH
7180: FOR_IN
7181: IFFALSE 7237
// if IsInUnit ( i ) then
7183: LD_VAR 0 1
7187: PPUSH
7188: CALL_OW 310
7192: IFFALSE 7205
// ComExitBuilding ( i ) else
7194: LD_VAR 0 1
7198: PPUSH
7199: CALL_OW 122
7203: GO 7235
// if not HasTask ( i ) then
7205: LD_VAR 0 1
7209: PPUSH
7210: CALL_OW 314
7214: NOT
7215: IFFALSE 7235
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7217: LD_VAR 0 1
7221: PPUSH
7222: LD_VAR 0 2
7226: PUSH
7227: LD_INT 1
7229: ARRAY
7230: PPUSH
7231: CALL_OW 130
7235: GO 7180
7237: POP
7238: POP
// end else
7239: GO 7312
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7241: LD_VAR 0 3
7245: PPUSH
7246: LD_INT 3
7248: PUSH
7249: LD_INT 54
7251: PUSH
7252: EMPTY
7253: LIST
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: PPUSH
7259: CALL_OW 72
7263: IFFALSE 7312
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7265: LD_ADDR_VAR 0 1
7269: PUSH
7270: LD_VAR 0 3
7274: PPUSH
7275: LD_INT 3
7277: PUSH
7278: LD_INT 54
7280: PUSH
7281: EMPTY
7282: LIST
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PPUSH
7288: CALL_OW 72
7292: PUSH
7293: FOR_IN
7294: IFFALSE 7310
// ComEnterUnit ( i , omikron ) ;
7296: LD_VAR 0 1
7300: PPUSH
7301: LD_INT 64
7303: PPUSH
7304: CALL_OW 120
7308: GO 7293
7310: POP
7311: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7312: LD_ADDR_VAR 0 2
7316: PUSH
7317: LD_EXP 51
7321: PPUSH
7322: LD_INT 21
7324: PUSH
7325: LD_INT 2
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PPUSH
7332: CALL_OW 72
7336: ST_TO_ADDR
// if not filter then
7337: LD_VAR 0 2
7341: NOT
7342: IFFALSE 7346
// exit ;
7344: GO 7640
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7346: LD_ADDR_VAR 0 4
7350: PUSH
7351: LD_INT 13
7353: PPUSH
7354: LD_INT 81
7356: PUSH
7357: LD_INT 4
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: PPUSH
7364: CALL_OW 70
7368: ST_TO_ADDR
// if enemy then
7369: LD_VAR 0 4
7373: IFFALSE 7640
// begin for i in filter do
7375: LD_ADDR_VAR 0 1
7379: PUSH
7380: LD_VAR 0 2
7384: PUSH
7385: FOR_IN
7386: IFFALSE 7638
// begin tmp := IsDrivenBy ( i ) ;
7388: LD_ADDR_VAR 0 3
7392: PUSH
7393: LD_VAR 0 1
7397: PPUSH
7398: CALL_OW 311
7402: ST_TO_ADDR
// if not tmp then
7403: LD_VAR 0 3
7407: NOT
7408: IFFALSE 7412
// continue ;
7410: GO 7385
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7412: LD_VAR 0 1
7416: PPUSH
7417: CALL_OW 256
7421: PUSH
7422: LD_INT 600
7424: GREATEREQUAL
7425: PUSH
7426: LD_VAR 0 1
7430: PPUSH
7431: CALL_OW 110
7435: PUSH
7436: LD_INT 1
7438: NONEQUAL
7439: AND
7440: IFFALSE 7466
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7442: LD_VAR 0 1
7446: PPUSH
7447: LD_VAR 0 4
7451: PPUSH
7452: LD_VAR 0 1
7456: PPUSH
7457: CALL_OW 74
7461: PPUSH
7462: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7466: LD_VAR 0 1
7470: PPUSH
7471: CALL_OW 256
7475: PUSH
7476: LD_INT 600
7478: LESS
7479: PUSH
7480: LD_VAR 0 1
7484: PPUSH
7485: CALL_OW 110
7489: PUSH
7490: LD_INT 1
7492: NONEQUAL
7493: AND
7494: IFFALSE 7523
// begin SetTag ( i , 1 ) ;
7496: LD_VAR 0 1
7500: PPUSH
7501: LD_INT 1
7503: PPUSH
7504: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
7508: LD_VAR 0 1
7512: PPUSH
7513: LD_INT 27
7515: PPUSH
7516: LD_INT 35
7518: PPUSH
7519: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
7523: LD_VAR 0 1
7527: PPUSH
7528: CALL_OW 110
7532: PUSH
7533: LD_INT 1
7535: EQUAL
7536: PUSH
7537: LD_VAR 0 1
7541: PPUSH
7542: LD_INT 27
7544: PPUSH
7545: LD_INT 35
7547: PPUSH
7548: CALL_OW 297
7552: PUSH
7553: LD_INT 6
7555: LESS
7556: AND
7557: PUSH
7558: LD_VAR 0 3
7562: AND
7563: IFFALSE 7636
// begin ComExitVehicle ( tmp ) ;
7565: LD_VAR 0 3
7569: PPUSH
7570: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
7574: LD_VAR 0 3
7578: PPUSH
7579: LD_VAR 0 1
7583: PPUSH
7584: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
7588: LD_INT 35
7590: PPUSH
7591: CALL_OW 67
// until GetLives ( i ) = 1000 ;
7595: LD_VAR 0 1
7599: PPUSH
7600: CALL_OW 256
7604: PUSH
7605: LD_INT 1000
7607: EQUAL
7608: IFFALSE 7588
// ComEnterUnit ( tmp , i ) ;
7610: LD_VAR 0 3
7614: PPUSH
7615: LD_VAR 0 1
7619: PPUSH
7620: CALL_OW 120
// SetTag ( i , 0 ) ;
7624: LD_VAR 0 1
7628: PPUSH
7629: LD_INT 0
7631: PPUSH
7632: CALL_OW 109
// end ; end ;
7636: GO 7385
7638: POP
7639: POP
// end ; end ;
7640: PPOPN 4
7642: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
7643: LD_EXP 13
7647: IFFALSE 7791
7649: GO 7651
7651: DISABLE
7652: LD_INT 0
7654: PPUSH
7655: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
7656: LD_ADDR_VAR 0 2
7660: PUSH
7661: LD_EXP 51
7665: PPUSH
7666: LD_INT 21
7668: PUSH
7669: LD_INT 1
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PUSH
7676: LD_INT 50
7678: PUSH
7679: EMPTY
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PPUSH
7686: CALL_OW 72
7690: ST_TO_ADDR
// if not tmp then
7691: LD_VAR 0 2
7695: NOT
7696: IFFALSE 7700
// exit ;
7698: GO 7791
// repeat wait ( 0 0$1 ) ;
7700: LD_INT 35
7702: PPUSH
7703: CALL_OW 67
// for i in tmp do
7707: LD_ADDR_VAR 0 1
7711: PUSH
7712: LD_VAR 0 2
7716: PUSH
7717: FOR_IN
7718: IFFALSE 7782
// begin ComExit ( i ) ;
7720: LD_VAR 0 1
7724: PPUSH
7725: CALL 71596 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
7729: LD_VAR 0 1
7733: PPUSH
7734: LD_INT 14
7736: PPUSH
7737: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
7741: LD_VAR 0 1
7745: PPUSH
7746: LD_INT 14
7748: PPUSH
7749: CALL_OW 308
7753: IFFALSE 7780
// begin tmp := tmp diff i ;
7755: LD_ADDR_VAR 0 2
7759: PUSH
7760: LD_VAR 0 2
7764: PUSH
7765: LD_VAR 0 1
7769: DIFF
7770: ST_TO_ADDR
// RemoveUnit ( i ) ;
7771: LD_VAR 0 1
7775: PPUSH
7776: CALL_OW 64
// end ; end ;
7780: GO 7717
7782: POP
7783: POP
// until not tmp ;
7784: LD_VAR 0 2
7788: NOT
7789: IFFALSE 7700
// end ; end_of_file
7791: PPOPN 2
7793: END
// export function Action ; var i , un , veh , tmp ; begin
7794: LD_INT 0
7796: PPUSH
7797: PPUSH
7798: PPUSH
7799: PPUSH
7800: PPUSH
// InGameOn ;
7801: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
7805: LD_INT 179
7807: PPUSH
7808: LD_INT 5
7810: PPUSH
7811: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
7815: LD_ADDR_VAR 0 4
7819: PUSH
7820: LD_INT 2
7822: PPUSH
7823: LD_INT 2
7825: PPUSH
7826: LD_INT 12
7828: PPUSH
7829: LD_INT 1
7831: PPUSH
7832: LD_INT 1
7834: PPUSH
7835: LD_INT 24
7837: PPUSH
7838: LD_INT 33
7840: PPUSH
7841: CALL 370 0 7
7845: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
7846: LD_VAR 0 4
7850: PPUSH
7851: LD_INT 2
7853: PPUSH
7854: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
7858: LD_VAR 0 4
7862: PPUSH
7863: LD_INT 178
7865: PPUSH
7866: LD_INT 2
7868: PPUSH
7869: LD_INT 0
7871: PPUSH
7872: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
7876: LD_EXP 25
7880: PPUSH
7881: LD_VAR 0 4
7885: PPUSH
7886: CALL_OW 52
// if Kamil then
7890: LD_EXP 29
7894: IFFALSE 7929
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
7896: LD_EXP 29
7900: PPUSH
7901: LD_INT 207
7903: PPUSH
7904: LD_INT 37
7906: PPUSH
7907: LD_INT 0
7909: PPUSH
7910: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
7914: LD_EXP 29
7918: PPUSH
7919: LD_INT 211
7921: PPUSH
7922: LD_INT 38
7924: PPUSH
7925: CALL_OW 118
// end ; if Sophia then
7929: LD_EXP 31
7933: IFFALSE 7968
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
7935: LD_EXP 31
7939: PPUSH
7940: LD_INT 209
7942: PPUSH
7943: LD_INT 40
7945: PPUSH
7946: LD_INT 0
7948: PPUSH
7949: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
7953: LD_EXP 31
7957: PPUSH
7958: LD_INT 211
7960: PPUSH
7961: LD_INT 38
7963: PPUSH
7964: CALL_OW 118
// end ; if Givi then
7968: LD_EXP 26
7972: IFFALSE 8007
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
7974: LD_EXP 26
7978: PPUSH
7979: LD_INT 201
7981: PPUSH
7982: LD_INT 34
7984: PPUSH
7985: LD_INT 0
7987: PPUSH
7988: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
7992: LD_EXP 26
7996: PPUSH
7997: LD_INT 206
7999: PPUSH
8000: LD_INT 36
8002: PPUSH
8003: CALL_OW 118
// end ; if Ibrahim then
8007: LD_EXP 28
8011: IFFALSE 8046
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8013: LD_EXP 28
8017: PPUSH
8018: LD_INT 202
8020: PPUSH
8021: LD_INT 39
8023: PPUSH
8024: LD_INT 0
8026: PPUSH
8027: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8031: LD_EXP 28
8035: PPUSH
8036: LD_INT 206
8038: PPUSH
8039: LD_INT 36
8041: PPUSH
8042: CALL_OW 118
// end ; if Markov then
8046: LD_EXP 32
8050: IFFALSE 8137
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8052: LD_ADDR_VAR 0 4
8056: PUSH
8057: LD_INT 2
8059: PPUSH
8060: LD_INT 2
8062: PPUSH
8063: LD_INT 13
8065: PPUSH
8066: LD_INT 1
8068: PPUSH
8069: LD_INT 1
8071: PPUSH
8072: LD_INT 25
8074: PPUSH
8075: LD_INT 80
8077: PUSH
8078: LD_INT 20
8080: PUSH
8081: LD_OWVAR 67
8085: MUL
8086: MINUS
8087: PPUSH
8088: CALL 370 0 7
8092: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8093: LD_VAR 0 4
8097: PPUSH
8098: LD_INT 2
8100: PPUSH
8101: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8105: LD_VAR 0 4
8109: PPUSH
8110: LD_INT 197
8112: PPUSH
8113: LD_INT 35
8115: PPUSH
8116: LD_INT 0
8118: PPUSH
8119: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8123: LD_EXP 32
8127: PPUSH
8128: LD_VAR 0 4
8132: PPUSH
8133: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8137: LD_ADDR_VAR 0 5
8141: PUSH
8142: LD_EXP 30
8146: PUSH
8147: LD_EXP 37
8151: UNION
8152: ST_TO_ADDR
// for i in tmp do
8153: LD_ADDR_VAR 0 2
8157: PUSH
8158: LD_VAR 0 5
8162: PUSH
8163: FOR_IN
8164: IFFALSE 8198
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8166: LD_VAR 0 2
8170: PPUSH
8171: LD_INT 203
8173: PPUSH
8174: LD_INT 41
8176: PPUSH
8177: LD_INT 6
8179: PPUSH
8180: LD_INT 0
8182: PPUSH
8183: CALL_OW 50
// ComHold ( i ) ;
8187: LD_VAR 0 2
8191: PPUSH
8192: CALL_OW 140
// end ;
8196: GO 8163
8198: POP
8199: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8200: LD_INT 22
8202: PUSH
8203: LD_INT 2
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: PUSH
8210: LD_INT 25
8212: PUSH
8213: LD_INT 2
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: PPUSH
8224: CALL_OW 69
8228: NOT
8229: IFFALSE 8243
// SetClass ( Heike , 2 ) ;
8231: LD_EXP 25
8235: PPUSH
8236: LD_INT 2
8238: PPUSH
8239: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8243: LD_EXP 25
8247: PPUSH
8248: LD_INT 183
8250: PPUSH
8251: LD_INT 12
8253: PPUSH
8254: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8258: LD_EXP 25
8262: PPUSH
8263: LD_INT 188
8265: PPUSH
8266: LD_INT 20
8268: PPUSH
8269: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8273: LD_EXP 25
8277: PPUSH
8278: LD_INT 191
8280: PPUSH
8281: LD_INT 25
8283: PPUSH
8284: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8288: LD_EXP 25
8292: PPUSH
8293: LD_INT 203
8295: PPUSH
8296: LD_INT 29
8298: PPUSH
8299: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8303: LD_EXP 25
8307: PPUSH
8308: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8312: LD_INT 35
8314: PPUSH
8315: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8319: LD_EXP 25
8323: PPUSH
8324: CALL_OW 310
8328: NOT
8329: IFFALSE 8312
// CenterOnUnits ( Heike ) ;
8331: LD_EXP 25
8335: PPUSH
8336: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8340: LD_ADDR_VAR 0 5
8344: PUSH
8345: LD_INT 22
8347: PUSH
8348: LD_INT 2
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: PUSH
8355: LD_INT 21
8357: PUSH
8358: LD_INT 1
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: PPUSH
8369: CALL_OW 69
8373: PUSH
8374: LD_EXP 25
8378: PUSH
8379: LD_EXP 32
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: DIFF
8388: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8389: LD_VAR 0 5
8393: PPUSH
8394: LD_EXP 25
8398: PPUSH
8399: CALL_OW 119
// if Givi then
8403: LD_EXP 26
8407: IFFALSE 8425
// ComTurnUnit ( Heike , Givi ) else
8409: LD_EXP 25
8413: PPUSH
8414: LD_EXP 26
8418: PPUSH
8419: CALL_OW 119
8423: GO 8443
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8425: LD_EXP 25
8429: PPUSH
8430: LD_VAR 0 5
8434: PUSH
8435: LD_INT 1
8437: ARRAY
8438: PPUSH
8439: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8443: LD_EXP 25
8447: PPUSH
8448: LD_STRING DH-Start-1
8450: PPUSH
8451: CALL_OW 88
// if Givi then
8455: LD_EXP 26
8459: IFFALSE 8506
// begin Say ( Givi , DG-Start-2 ) ;
8461: LD_EXP 26
8465: PPUSH
8466: LD_STRING DG-Start-2
8468: PPUSH
8469: CALL_OW 88
// if not Mike then
8473: LD_EXP 27
8477: NOT
8478: IFFALSE 8504
// begin Say ( Givi , DG-Start-b-3 ) ;
8480: LD_EXP 26
8484: PPUSH
8485: LD_STRING DG-Start-b-3
8487: PPUSH
8488: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
8492: LD_EXP 25
8496: PPUSH
8497: LD_STRING DH-Start-b-4
8499: PPUSH
8500: CALL_OW 88
// end ; end else
8504: GO 8571
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
8506: LD_EXP 37
8510: PPUSH
8511: LD_INT 26
8513: PUSH
8514: LD_INT 1
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: PPUSH
8521: CALL_OW 72
8525: PUSH
8526: LD_INT 1
8528: ARRAY
8529: PPUSH
8530: LD_STRING DArm-Start-a-2
8532: PPUSH
8533: CALL_OW 88
8537: NOT
8538: IFFALSE 8571
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
8540: LD_EXP 37
8544: PPUSH
8545: LD_INT 26
8547: PUSH
8548: LD_INT 2
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: PPUSH
8555: CALL_OW 72
8559: PUSH
8560: LD_INT 1
8562: ARRAY
8563: PPUSH
8564: LD_STRING DArf-Start-a-2
8566: PPUSH
8567: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
8571: LD_EXP 25
8575: PPUSH
8576: LD_INT 211
8578: PPUSH
8579: LD_INT 38
8581: PPUSH
8582: CALL_OW 118
// wait ( 0 0$1 ) ;
8586: LD_INT 35
8588: PPUSH
8589: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
8593: LD_EXP 25
8597: PPUSH
8598: LD_STRING DH-Start-3
8600: PPUSH
8601: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8605: LD_EXP 25
8609: PPUSH
8610: LD_STRING DH-Start-4
8612: PPUSH
8613: CALL_OW 88
// InGameOff ;
8617: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
8621: LD_STRING Prepare
8623: PPUSH
8624: CALL_OW 337
// SaveForQuickRestart ;
8628: CALL_OW 22
// wait ( 0 0$10 ) ;
8632: LD_INT 350
8634: PPUSH
8635: CALL_OW 67
// if not Aviradze then
8639: LD_EXP 35
8643: NOT
8644: IFFALSE 8648
// exit ;
8646: GO 8888
// SetDir ( Aviradze , 4 ) ;
8648: LD_EXP 35
8652: PPUSH
8653: LD_INT 4
8655: PPUSH
8656: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
8660: LD_EXP 35
8664: PPUSH
8665: LD_INT 225
8667: PPUSH
8668: LD_INT 33
8670: PPUSH
8671: LD_INT 0
8673: PPUSH
8674: CALL_OW 48
// for i := 1 to 2 do
8678: LD_ADDR_VAR 0 2
8682: PUSH
8683: DOUBLE
8684: LD_INT 1
8686: DEC
8687: ST_TO_ADDR
8688: LD_INT 2
8690: PUSH
8691: FOR_TO
8692: IFFALSE 8823
// begin uc_side := 2 ;
8694: LD_ADDR_OWVAR 20
8698: PUSH
8699: LD_INT 2
8701: ST_TO_ADDR
// uc_nation := 0 ;
8702: LD_ADDR_OWVAR 21
8706: PUSH
8707: LD_INT 0
8709: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
8710: LD_INT 0
8712: PPUSH
8713: LD_INT 12
8715: PPUSH
8716: LD_INT 1
8718: PPUSH
8719: CALL_OW 380
// hc_gallery :=  ;
8723: LD_ADDR_OWVAR 33
8727: PUSH
8728: LD_STRING 
8730: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
8731: LD_ADDR_OWVAR 26
8735: PUSH
8736: LD_STRING Artudito
8738: PUSH
8739: LD_STRING Textur
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: LD_VAR 0 2
8750: ARRAY
8751: ST_TO_ADDR
// un := CreateHuman ;
8752: LD_ADDR_VAR 0 3
8756: PUSH
8757: CALL_OW 44
8761: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
8762: LD_VAR 0 3
8766: PPUSH
8767: LD_INT 224
8769: PUSH
8770: LD_INT 226
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: PUSH
8777: LD_VAR 0 2
8781: ARRAY
8782: PPUSH
8783: LD_INT 31
8785: PUSH
8786: LD_INT 35
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: LD_VAR 0 2
8797: ARRAY
8798: PPUSH
8799: LD_INT 0
8801: PPUSH
8802: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
8806: LD_VAR 0 3
8810: PPUSH
8811: LD_INT 215
8813: PPUSH
8814: LD_INT 36
8816: PPUSH
8817: CALL_OW 111
// end ;
8821: GO 8691
8823: POP
8824: POP
// hc_name :=  ;
8825: LD_ADDR_OWVAR 26
8829: PUSH
8830: LD_STRING 
8832: ST_TO_ADDR
// InitHc ;
8833: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
8837: LD_EXP 35
8841: PPUSH
8842: LD_INT 215
8844: PPUSH
8845: LD_INT 36
8847: PPUSH
8848: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
8852: LD_EXP 35
8856: PPUSH
8857: LD_STRING DA-Arrive-1
8859: PPUSH
8860: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
8864: LD_EXP 25
8868: PPUSH
8869: LD_STRING DH-Arrive-2
8871: PPUSH
8872: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
8876: LD_EXP 35
8880: PPUSH
8881: LD_STRING DA-Arrive-3
8883: PPUSH
8884: CALL_OW 88
// end ;
8888: LD_VAR 0 1
8892: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
8893: LD_EXP 3
8897: IFFALSE 10298
8899: GO 8901
8901: DISABLE
8902: LD_INT 0
8904: PPUSH
8905: PPUSH
8906: PPUSH
// begin DialogueOn ;
8907: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
8911: LD_EXP 25
8915: PPUSH
8916: LD_STRING DH-base-1
8918: PPUSH
8919: CALL_OW 88
// if Markov then
8923: LD_EXP 32
8927: IFFALSE 8979
// begin Say ( Markov , DMar-base-2 ) ;
8929: LD_EXP 32
8933: PPUSH
8934: LD_STRING DMar-base-2
8936: PPUSH
8937: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
8941: LD_EXP 32
8945: PPUSH
8946: LD_STRING DMar-base-3
8948: PPUSH
8949: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
8953: LD_EXP 25
8957: PPUSH
8958: LD_STRING DH-base-4
8960: PPUSH
8961: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
8965: LD_EXP 32
8969: PPUSH
8970: LD_STRING DMar-base-5
8972: PPUSH
8973: CALL_OW 88
// end else
8977: GO 9056
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
8979: LD_EXP 37
8983: PPUSH
8984: LD_INT 26
8986: PUSH
8987: LD_INT 1
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: PPUSH
8994: CALL_OW 72
8998: PUSH
8999: LD_INT 1
9001: ARRAY
9002: PPUSH
9003: LD_STRING DArm-base-a-2
9005: PPUSH
9006: CALL_OW 88
9010: NOT
9011: IFFALSE 9044
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9013: LD_EXP 37
9017: PPUSH
9018: LD_INT 26
9020: PUSH
9021: LD_INT 2
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: PPUSH
9028: CALL_OW 72
9032: PUSH
9033: LD_INT 1
9035: ARRAY
9036: PPUSH
9037: LD_STRING DArf-base-a-2
9039: PPUSH
9040: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9044: LD_EXP 25
9048: PPUSH
9049: LD_STRING DH-base-a-3
9051: PPUSH
9052: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9056: LD_EXP 35
9060: PPUSH
9061: LD_STRING DA-base-6
9063: PPUSH
9064: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9068: LD_EXP 35
9072: PPUSH
9073: LD_STRING DA-base-7
9075: PPUSH
9076: CALL_OW 88
// DialogueOff ;
9080: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9084: LD_STRING Flamethrower
9086: PPUSH
9087: CALL_OW 337
// wait ( 2 2$00 ) ;
9091: LD_INT 4200
9093: PPUSH
9094: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9098: LD_EXP 34
9102: PUSH
9103: LD_EXP 27
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: PPUSH
9112: LD_INT 203
9114: PPUSH
9115: LD_INT 37
9117: PPUSH
9118: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9122: LD_INT 22
9124: PUSH
9125: LD_INT 2
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: PUSH
9132: LD_INT 92
9134: PUSH
9135: LD_INT 203
9137: PUSH
9138: LD_INT 37
9140: PUSH
9141: LD_INT 10
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: PPUSH
9154: CALL_OW 69
9158: NOT
9159: IFFALSE 9199
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9161: LD_EXP 34
9165: PUSH
9166: LD_EXP 27
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PPUSH
9175: LD_EXP 25
9179: PPUSH
9180: CALL_OW 250
9184: PPUSH
9185: LD_EXP 25
9189: PPUSH
9190: CALL_OW 251
9194: PPUSH
9195: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9199: LD_INT 35
9201: PPUSH
9202: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9206: LD_INT 2
9208: PPUSH
9209: LD_EXP 34
9213: PPUSH
9214: CALL_OW 292
9218: PUSH
9219: LD_EXP 34
9223: PPUSH
9224: LD_EXP 25
9228: PPUSH
9229: CALL_OW 296
9233: PUSH
9234: LD_INT 8
9236: LESS
9237: PUSH
9238: LD_EXP 34
9242: PPUSH
9243: LD_INT 22
9245: PUSH
9246: LD_INT 2
9248: PUSH
9249: EMPTY
9250: LIST
9251: LIST
9252: PUSH
9253: LD_INT 21
9255: PUSH
9256: LD_INT 3
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PPUSH
9267: CALL_OW 69
9271: PPUSH
9272: LD_EXP 34
9276: PPUSH
9277: CALL_OW 74
9281: PPUSH
9282: CALL_OW 296
9286: PUSH
9287: LD_INT 7
9289: LESS
9290: OR
9291: AND
9292: PUSH
9293: LD_EXP 34
9297: PPUSH
9298: LD_INT 10
9300: PPUSH
9301: CALL_OW 308
9305: NOT
9306: AND
9307: IFFALSE 9199
// InGameOn ;
9309: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9313: LD_EXP 34
9317: PPUSH
9318: CALL_OW 87
// if IsInUnit ( Heike ) then
9322: LD_EXP 25
9326: PPUSH
9327: CALL_OW 310
9331: IFFALSE 9342
// ComExitBuilding ( Heike ) ;
9333: LD_EXP 25
9337: PPUSH
9338: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9342: LD_EXP 34
9346: PUSH
9347: LD_EXP 27
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PPUSH
9356: LD_EXP 25
9360: PPUSH
9361: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9365: LD_EXP 25
9369: PPUSH
9370: LD_EXP 34
9374: PPUSH
9375: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9379: LD_INT 22
9381: PUSH
9382: LD_INT 2
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 91
9391: PUSH
9392: LD_EXP 34
9396: PUSH
9397: LD_INT 10
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: LIST
9404: PUSH
9405: LD_INT 21
9407: PUSH
9408: LD_INT 3
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: LIST
9419: PPUSH
9420: CALL_OW 69
9424: IFFALSE 9450
// begin Say ( Kurt , DKs-scout-1 ) ;
9426: LD_EXP 34
9430: PPUSH
9431: LD_STRING DKs-scout-1
9433: PPUSH
9434: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9438: LD_EXP 25
9442: PPUSH
9443: LD_STRING DH-scout-2
9445: PPUSH
9446: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
9450: LD_EXP 25
9454: PPUSH
9455: CALL_OW 85
// if IsInUnit ( Heike ) then
9459: LD_EXP 25
9463: PPUSH
9464: CALL_OW 310
9468: IFFALSE 9479
// ComExit ( Heike ) ;
9470: LD_EXP 25
9474: PPUSH
9475: CALL 71596 0 1
// repeat wait ( 0 0$1 ) ;
9479: LD_INT 35
9481: PPUSH
9482: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
9486: LD_EXP 25
9490: PPUSH
9491: LD_EXP 34
9495: PPUSH
9496: CALL_OW 112
// until GetDistUnits ( Heike , Kurt ) < 6 ;
9500: LD_EXP 25
9504: PPUSH
9505: LD_EXP 34
9509: PPUSH
9510: CALL_OW 296
9514: PUSH
9515: LD_INT 6
9517: LESS
9518: IFFALSE 9479
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
9520: LD_EXP 34
9524: PUSH
9525: LD_EXP 27
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PPUSH
9534: LD_EXP 25
9538: PPUSH
9539: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
9543: LD_EXP 34
9547: PPUSH
9548: LD_STRING DKs-scout-3
9550: PPUSH
9551: CALL_OW 88
// if Kaia and GetDistUnits ( Kaia , Kurt ) < 15 then
9555: LD_EXP 30
9559: PUSH
9560: LD_EXP 30
9564: PPUSH
9565: LD_EXP 34
9569: PPUSH
9570: CALL_OW 296
9574: PUSH
9575: LD_INT 15
9577: LESS
9578: AND
9579: IFFALSE 9769
// begin if IsInUnit ( Kaia ) then
9581: LD_EXP 30
9585: PPUSH
9586: CALL_OW 310
9590: IFFALSE 9601
// ComExitBuilding ( Kaia ) ;
9592: LD_EXP 30
9596: PPUSH
9597: CALL_OW 122
// wait ( 0 0$1 ) ;
9601: LD_INT 35
9603: PPUSH
9604: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
9608: LD_EXP 30
9612: PPUSH
9613: LD_EXP 34
9617: PPUSH
9618: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
9622: LD_INT 35
9624: PPUSH
9625: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
9629: LD_EXP 30
9633: PPUSH
9634: LD_EXP 34
9638: PPUSH
9639: CALL_OW 296
9643: PUSH
9644: LD_INT 6
9646: LESS
9647: IFFALSE 9622
// ComTurnUnit ( Kaia , Kurt ) ;
9649: LD_EXP 30
9653: PPUSH
9654: LD_EXP 34
9658: PPUSH
9659: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
9663: LD_EXP 30
9667: PPUSH
9668: LD_STRING DK-scout-4
9670: PPUSH
9671: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
9675: LD_EXP 34
9679: PPUSH
9680: LD_EXP 30
9684: PPUSH
9685: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
9689: LD_EXP 34
9693: PPUSH
9694: LD_STRING DKs-scout-5
9696: PPUSH
9697: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
9701: LD_EXP 30
9705: PPUSH
9706: LD_STRING DK-scout-6
9708: PPUSH
9709: CALL_OW 88
// if Mike then
9713: LD_EXP 27
9717: IFFALSE 9769
// begin Say ( Mike , DM-scout-7 ) ;
9719: LD_EXP 27
9723: PPUSH
9724: LD_STRING DM-scout-7
9726: PPUSH
9727: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
9731: LD_EXP 30
9735: PPUSH
9736: LD_EXP 27
9740: PPUSH
9741: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
9745: LD_EXP 30
9749: PPUSH
9750: LD_STRING DK-scout-8
9752: PPUSH
9753: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
9757: LD_EXP 27
9761: PPUSH
9762: LD_STRING DM-scout-9
9764: PPUSH
9765: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
9769: LD_INT 184
9771: PPUSH
9772: LD_INT 100
9774: PPUSH
9775: LD_INT 2
9777: PPUSH
9778: LD_INT 12
9780: NEG
9781: PPUSH
9782: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
9786: LD_INT 184
9788: PPUSH
9789: LD_INT 100
9791: PPUSH
9792: LD_INT 2
9794: PPUSH
9795: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
9799: LD_INT 184
9801: PPUSH
9802: LD_INT 100
9804: PPUSH
9805: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
9809: LD_EXP 34
9813: PPUSH
9814: LD_STRING DKs-scout-10
9816: PPUSH
9817: CALL_OW 88
// wait ( 0 0$1 ) ;
9821: LD_INT 35
9823: PPUSH
9824: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
9828: LD_INT 144
9830: PPUSH
9831: LD_INT 65
9833: PPUSH
9834: LD_INT 2
9836: PPUSH
9837: LD_INT 12
9839: NEG
9840: PPUSH
9841: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
9845: LD_INT 144
9847: PPUSH
9848: LD_INT 65
9850: PPUSH
9851: LD_INT 2
9853: PPUSH
9854: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
9858: LD_INT 144
9860: PPUSH
9861: LD_INT 65
9863: PPUSH
9864: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
9868: LD_EXP 34
9872: PPUSH
9873: LD_STRING DKs-scout-11
9875: PPUSH
9876: CALL_OW 88
// wait ( 0 0$1 ) ;
9880: LD_INT 35
9882: PPUSH
9883: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
9887: LD_EXP 34
9891: PPUSH
9892: CALL_OW 87
// if Mike and not Givi then
9896: LD_EXP 27
9900: PUSH
9901: LD_EXP 26
9905: NOT
9906: AND
9907: IFFALSE 9933
// begin Say ( Mike , DM-scout-a-1 ) ;
9909: LD_EXP 27
9913: PPUSH
9914: LD_STRING DM-scout-a-1
9916: PPUSH
9917: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
9921: LD_EXP 25
9925: PPUSH
9926: LD_STRING DH-scout-a-2
9928: PPUSH
9929: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
9933: LD_EXP 34
9937: PUSH
9938: LD_EXP 27
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PPUSH
9947: LD_INT 2
9949: PPUSH
9950: CALL_OW 235
// InGameOff ;
9954: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
9958: LD_STRING Hill
9960: PPUSH
9961: CALL_OW 337
// SetAreaMapShow ( dontGoArea , 1 ) ;
9965: LD_INT 20
9967: PPUSH
9968: LD_INT 1
9970: PPUSH
9971: CALL_OW 424
// allowToPatrol := true ;
9975: LD_ADDR_EXP 12
9979: PUSH
9980: LD_INT 1
9982: ST_TO_ADDR
// wait ( 1 1$30 ) ;
9983: LD_INT 3150
9985: PPUSH
9986: CALL_OW 67
// InitHc ;
9990: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
9994: LD_ADDR_VAR 0 1
9998: PUSH
9999: DOUBLE
10000: LD_INT 1
10002: DEC
10003: ST_TO_ADDR
10004: LD_INT 3
10006: PUSH
10007: LD_INT 3
10009: PUSH
10010: LD_INT 2
10012: PUSH
10013: LD_INT 2
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: PUSH
10022: LD_OWVAR 67
10026: ARRAY
10027: PUSH
10028: FOR_TO
10029: IFFALSE 10296
// begin uc_side := 2 ;
10031: LD_ADDR_OWVAR 20
10035: PUSH
10036: LD_INT 2
10038: ST_TO_ADDR
// uc_nation := 2 ;
10039: LD_ADDR_OWVAR 21
10043: PUSH
10044: LD_INT 2
10046: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 , 2 ] [ Difficulty ] ) ;
10047: LD_INT 0
10049: PPUSH
10050: LD_INT 1
10052: PUSH
10053: LD_INT 3
10055: PUSH
10056: LD_INT 1
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: LIST
10063: PUSH
10064: LD_VAR 0 1
10068: PUSH
10069: LD_INT 3
10071: MOD
10072: PUSH
10073: LD_INT 1
10075: PLUS
10076: ARRAY
10077: PPUSH
10078: LD_INT 3
10080: PUSH
10081: LD_INT 2
10083: PUSH
10084: LD_INT 2
10086: PUSH
10087: LD_INT 2
10089: PUSH
10090: EMPTY
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: PUSH
10096: LD_OWVAR 67
10100: ARRAY
10101: PPUSH
10102: CALL_OW 380
// un := CreateHuman ;
10106: LD_ADDR_VAR 0 2
10110: PUSH
10111: CALL_OW 44
10115: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10116: LD_ADDR_EXP 37
10120: PUSH
10121: LD_EXP 37
10125: PUSH
10126: LD_VAR 0 2
10130: UNION
10131: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10132: LD_INT 2
10134: PPUSH
10135: LD_INT 2
10137: PPUSH
10138: LD_INT 13
10140: PPUSH
10141: LD_INT 2
10143: PUSH
10144: LD_INT 1
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: PUSH
10151: LD_VAR 0 1
10155: PUSH
10156: LD_INT 2
10158: MOD
10159: PUSH
10160: LD_INT 1
10162: PLUS
10163: ARRAY
10164: PPUSH
10165: LD_INT 1
10167: PPUSH
10168: LD_INT 27
10170: PUSH
10171: LD_INT 25
10173: PUSH
10174: LD_INT 27
10176: PUSH
10177: LD_INT 23
10179: PUSH
10180: LD_INT 23
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: PUSH
10190: LD_OWVAR 67
10194: PUSH
10195: LD_INT 0
10197: PPUSH
10198: LD_INT 1
10200: PPUSH
10201: CALL_OW 12
10205: PLUS
10206: ARRAY
10207: PPUSH
10208: LD_INT 77
10210: PPUSH
10211: CALL 370 0 7
// veh := CreateVehicle ;
10215: LD_ADDR_VAR 0 3
10219: PUSH
10220: CALL_OW 45
10224: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10225: LD_VAR 0 3
10229: PPUSH
10230: LD_INT 2
10232: PPUSH
10233: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10237: LD_VAR 0 3
10241: PPUSH
10242: LD_INT 178
10244: PPUSH
10245: LD_INT 2
10247: PPUSH
10248: LD_INT 2
10250: PPUSH
10251: LD_INT 0
10253: PPUSH
10254: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10258: LD_VAR 0 2
10262: PPUSH
10263: LD_VAR 0 3
10267: PPUSH
10268: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10272: LD_VAR 0 2
10276: PPUSH
10277: LD_INT 183
10279: PPUSH
10280: LD_INT 11
10282: PPUSH
10283: CALL_OW 111
// wait ( 0 0$2 ) ;
10287: LD_INT 70
10289: PPUSH
10290: CALL_OW 67
// end ;
10294: GO 10028
10296: POP
10297: POP
// end ;
10298: PPOPN 3
10300: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10301: LD_EXP 4
10305: PUSH
10306: LD_EXP 35
10310: PPUSH
10311: CALL_OW 302
10315: AND
10316: IFFALSE 10365
10318: GO 10320
10320: DISABLE
// begin DialogueOn ;
10321: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10325: LD_EXP 35
10329: PPUSH
10330: LD_STRING DA-lab-1
10332: PPUSH
10333: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10337: LD_EXP 35
10341: PPUSH
10342: LD_STRING DA-lab-2
10344: PPUSH
10345: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10349: LD_EXP 25
10353: PPUSH
10354: LD_STRING DH-lab-3
10356: PPUSH
10357: CALL_OW 88
// DialogueOff ;
10361: CALL_OW 7
// end ;
10365: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10366: LD_INT 17
10368: PPUSH
10369: LD_INT 2
10371: PPUSH
10372: CALL_OW 321
10376: PUSH
10377: LD_INT 2
10379: EQUAL
10380: IFFALSE 10512
10382: GO 10384
10384: DISABLE
10385: LD_INT 0
10387: PPUSH
// begin DialogueOn ;
10388: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10392: LD_EXP 35
10396: PPUSH
10397: LD_STRING DA-Cam-1
10399: PPUSH
10400: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10404: LD_EXP 35
10408: PPUSH
10409: LD_STRING DA-Cam-2
10411: PPUSH
10412: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10416: LD_EXP 35
10420: PPUSH
10421: LD_STRING DA-Cam-3
10423: PPUSH
10424: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10428: LD_EXP 25
10432: PPUSH
10433: LD_STRING DH-Cam-4
10435: PPUSH
10436: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
10440: LD_EXP 30
10444: PPUSH
10445: LD_STRING DK-Cam-5
10447: PPUSH
10448: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
10452: LD_EXP 30
10456: PPUSH
10457: LD_STRING DK-Cam-6
10459: PPUSH
10460: CALL_OW 88
// DialogueOff ;
10464: CALL_OW 7
// Query ( Camera ) ;
10468: LD_STRING Camera
10470: PPUSH
10471: CALL_OW 97
// hiddenCameraAllowed := true ;
10475: LD_ADDR_EXP 5
10479: PUSH
10480: LD_INT 1
10482: ST_TO_ADDR
// for i in camAreas do
10483: LD_ADDR_VAR 0 1
10487: PUSH
10488: LD_EXP 8
10492: PUSH
10493: FOR_IN
10494: IFFALSE 10510
// SetAreaMapShow ( i , 1 ) ;
10496: LD_VAR 0 1
10500: PPUSH
10501: LD_INT 1
10503: PPUSH
10504: CALL_OW 424
10508: GO 10493
10510: POP
10511: POP
// end ;
10512: PPOPN 1
10514: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
10515: LD_EXP 8
10519: NOT
10520: PUSH
10521: LD_EXP 5
10525: AND
10526: IFFALSE 10624
10528: GO 10530
10530: DISABLE
10531: LD_INT 0
10533: PPUSH
// begin stop_talking := true ;
10534: LD_ADDR_OWVAR 56
10538: PUSH
10539: LD_INT 1
10541: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
10542: LD_ADDR_VAR 0 1
10546: PUSH
10547: LD_INT 22
10549: PUSH
10550: LD_INT 2
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PUSH
10557: LD_INT 21
10559: PUSH
10560: LD_INT 1
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PUSH
10567: LD_INT 23
10569: PUSH
10570: LD_INT 2
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: LIST
10581: PPUSH
10582: CALL_OW 69
10586: PUSH
10587: FOR_IN
10588: IFFALSE 10607
// AddExperience ( i , 2 , 450 ) ;
10590: LD_VAR 0 1
10594: PPUSH
10595: LD_INT 2
10597: PPUSH
10598: LD_INT 450
10600: PPUSH
10601: CALL_OW 492
10605: GO 10587
10607: POP
10608: POP
// stop_talking := false ;
10609: LD_ADDR_OWVAR 56
10613: PUSH
10614: LD_INT 0
10616: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
10617: LD_STRING ACH_CAMERA
10619: PPUSH
10620: CALL_OW 543
// end ;
10624: PPOPN 1
10626: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
10627: LD_EXP 9
10631: PUSH
10632: LD_EXP 11
10636: NOT
10637: AND
10638: IFFALSE 10697
10640: GO 10642
10642: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
10643: LD_EXP 9
10647: PPUSH
10648: CALL_OW 250
10652: PPUSH
10653: LD_EXP 9
10657: PPUSH
10658: CALL_OW 251
10662: PPUSH
10663: LD_INT 2
10665: PPUSH
10666: LD_INT 6
10668: NEG
10669: PPUSH
10670: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
10674: LD_EXP 9
10678: PPUSH
10679: CALL_OW 87
// wait ( 0 0$1 ) ;
10683: LD_INT 35
10685: PPUSH
10686: CALL_OW 67
// YouLost ( Spotted ) ;
10690: LD_STRING Spotted
10692: PPUSH
10693: CALL_OW 104
// end ;
10697: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
10698: LD_INT 3
10700: PUSH
10701: LD_INT 6
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: PPUSH
10708: LD_INT 2
10710: PPUSH
10711: LD_EXP 47
10715: PPUSH
10716: CALL 1034 0 3
10720: IFFALSE 10753
10722: GO 10724
10724: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
10725: LD_ADDR_EXP 9
10729: PUSH
10730: LD_INT 3
10732: PUSH
10733: LD_INT 6
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PPUSH
10740: LD_INT 2
10742: PPUSH
10743: LD_EXP 47
10747: PPUSH
10748: CALL 1034 0 3
10752: ST_TO_ADDR
10753: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
10754: LD_INT 22
10756: PUSH
10757: LD_INT 6
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: PUSH
10764: LD_INT 30
10766: PUSH
10767: LD_INT 32
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: PUSH
10774: LD_INT 3
10776: PUSH
10777: LD_INT 24
10779: PUSH
10780: LD_INT 1000
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: LIST
10795: PPUSH
10796: CALL_OW 69
10800: IFFALSE 10861
10802: GO 10804
10804: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
10805: LD_ADDR_EXP 9
10809: PUSH
10810: LD_INT 22
10812: PUSH
10813: LD_INT 6
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: PUSH
10820: LD_INT 30
10822: PUSH
10823: LD_INT 32
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: PUSH
10830: LD_INT 3
10832: PUSH
10833: LD_INT 24
10835: PUSH
10836: LD_INT 1000
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: PUSH
10843: EMPTY
10844: LIST
10845: LIST
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: LIST
10851: PPUSH
10852: CALL_OW 69
10856: PUSH
10857: LD_INT 1
10859: ARRAY
10860: ST_TO_ADDR
10861: END
// every 0 0$1 trigger russianAlert do var i , tmp , towers , noncombat ;
10862: LD_EXP 9
10866: IFFALSE 11098
10868: GO 10870
10870: DISABLE
10871: LD_INT 0
10873: PPUSH
10874: PPUSH
10875: PPUSH
10876: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
10877: LD_ADDR_VAR 0 4
10881: PUSH
10882: LD_EXP 42
10886: PUSH
10887: LD_EXP 44
10891: PUSH
10892: LD_EXP 45
10896: UNION
10897: PPUSH
10898: LD_INT 3
10900: PUSH
10901: LD_INT 25
10903: PUSH
10904: LD_INT 1
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: PPUSH
10915: CALL_OW 72
10919: UNION
10920: ST_TO_ADDR
// for i in noncombat do
10921: LD_ADDR_VAR 0 1
10925: PUSH
10926: LD_VAR 0 4
10930: PUSH
10931: FOR_IN
10932: IFFALSE 11028
// begin if IsInUnit ( i ) then
10934: LD_VAR 0 1
10938: PPUSH
10939: CALL_OW 310
10943: IFFALSE 10954
// ComExitBuilding ( i ) ;
10945: LD_VAR 0 1
10949: PPUSH
10950: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
10954: LD_VAR 0 1
10958: PPUSH
10959: LD_INT 114
10961: PPUSH
10962: LD_INT 97
10964: PPUSH
10965: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
10969: LD_VAR 0 1
10973: PPUSH
10974: LD_INT 99
10976: PPUSH
10977: LD_INT 128
10979: PPUSH
10980: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
10984: LD_VAR 0 1
10988: PPUSH
10989: LD_INT 91
10991: PPUSH
10992: LD_INT 145
10994: PPUSH
10995: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
10999: LD_VAR 0 1
11003: PPUSH
11004: LD_INT 82
11006: PPUSH
11007: LD_INT 153
11009: PPUSH
11010: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
11014: LD_VAR 0 1
11018: PPUSH
11019: LD_INT 16
11021: PPUSH
11022: CALL_OW 173
// end ;
11026: GO 10931
11028: POP
11029: POP
// if not allowHeikeAttack then
11030: LD_EXP 11
11034: NOT
11035: IFFALSE 11039
// exit ;
11037: GO 11098
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11039: LD_EXP 40
11043: PPUSH
11044: LD_STRING D9a-Kur-1
11046: PPUSH
11047: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11051: LD_EXP 43
11055: PPUSH
11056: LD_STRING D9a-Bur-1
11058: PPUSH
11059: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11063: LD_EXP 40
11067: PPUSH
11068: LD_STRING D9a-Kur-2
11070: PPUSH
11071: CALL_OW 94
// omicronFall := true ;
11075: LD_ADDR_EXP 13
11079: PUSH
11080: LD_INT 1
11082: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11083: LD_INT 105
11085: PPUSH
11086: CALL_OW 67
// retreatFromOmicron := true ;
11090: LD_ADDR_EXP 20
11094: PUSH
11095: LD_INT 1
11097: ST_TO_ADDR
// end ;
11098: PPOPN 4
11100: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11101: LD_INT 16
11103: PPUSH
11104: LD_INT 3
11106: PUSH
11107: LD_INT 22
11109: PUSH
11110: LD_INT 2
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PUSH
11121: LD_INT 23
11123: PUSH
11124: LD_INT 3
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: PPUSH
11135: CALL_OW 70
11139: IFFALSE 11222
11141: GO 11143
11143: DISABLE
11144: LD_INT 0
11146: PPUSH
// begin enable ;
11147: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11148: LD_ADDR_VAR 0 1
11152: PUSH
11153: LD_INT 16
11155: PPUSH
11156: LD_INT 3
11158: PUSH
11159: LD_INT 22
11161: PUSH
11162: LD_INT 2
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: PUSH
11173: LD_INT 23
11175: PUSH
11176: LD_INT 3
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: PPUSH
11187: CALL_OW 70
11191: PUSH
11192: FOR_IN
11193: IFFALSE 11220
// begin escapeCounter := escapeCounter + 1 ;
11195: LD_ADDR_EXP 19
11199: PUSH
11200: LD_EXP 19
11204: PUSH
11205: LD_INT 1
11207: PLUS
11208: ST_TO_ADDR
// RemoveUnit ( i ) ;
11209: LD_VAR 0 1
11213: PPUSH
11214: CALL_OW 64
// end ;
11218: GO 11192
11220: POP
11221: POP
// end ;
11222: PPOPN 1
11224: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11225: LD_OWVAR 1
11229: PUSH
11230: LD_INT 13650
11232: PUSH
11233: LD_INT 0
11235: PPUSH
11236: LD_INT 3150
11238: PPUSH
11239: CALL_OW 12
11243: PLUS
11244: GREATEREQUAL
11245: IFFALSE 11254
11247: GO 11249
11249: DISABLE
// SmallAmericanReinforcements ;
11250: CALL 6615 0 0
11254: END
// every 0 0$1 trigger tick >= 9 9$15 do
11255: LD_OWVAR 1
11259: PUSH
11260: LD_INT 19425
11262: GREATEREQUAL
11263: IFFALSE 11328
11265: GO 11267
11267: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11268: LD_EXP 48
11272: PPUSH
11273: LD_INT 21
11275: PUSH
11276: LD_INT 2
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: PPUSH
11283: CALL_OW 72
11287: PPUSH
11288: LD_INT 62
11290: PPUSH
11291: LD_INT 22
11293: PPUSH
11294: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11298: LD_EXP 49
11302: PPUSH
11303: LD_INT 69
11305: PPUSH
11306: LD_INT 27
11308: PPUSH
11309: CALL_OW 111
// wait ( 1 1$00 ) ;
11313: LD_INT 2100
11315: PPUSH
11316: CALL_OW 67
// startAttackOnOmicron := true ;
11320: LD_ADDR_EXP 6
11324: PUSH
11325: LD_INT 1
11327: ST_TO_ADDR
// end ;
11328: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11329: LD_EXP 22
11333: PUSH
11334: LD_INT 0
11336: EQUAL
11337: IFFALSE 13354
11339: GO 11341
11341: DISABLE
11342: LD_INT 0
11344: PPUSH
11345: PPUSH
11346: PPUSH
11347: PPUSH
11348: PPUSH
11349: PPUSH
11350: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11351: LD_INT 5
11353: PPUSH
11354: LD_INT 2
11356: PPUSH
11357: CALL_OW 343
// PrepareOmarForces ;
11361: CALL 1604 0 0
// wait ( 0 0$03 ) ;
11365: LD_INT 105
11367: PPUSH
11368: CALL_OW 67
// allowHeikeAttack := true ;
11372: LD_ADDR_EXP 11
11376: PUSH
11377: LD_INT 1
11379: ST_TO_ADDR
// activeGrishkoAI := false ;
11380: LD_ADDR_EXP 10
11384: PUSH
11385: LD_INT 0
11387: ST_TO_ADDR
// SetAreaMapShow ( dontGoArea , 0 ) ;
11388: LD_INT 20
11390: PPUSH
11391: LD_INT 0
11393: PPUSH
11394: CALL_OW 424
// if not hillBase then
11398: LD_EXP 15
11402: NOT
11403: IFFALSE 11412
// ChangeMissionObjectives ( HillDone ) ;
11405: LD_STRING HillDone
11407: PPUSH
11408: CALL_OW 337
// CenterOnUnits ( Omar ) ;
11412: LD_EXP 33
11416: PPUSH
11417: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
11421: LD_ADDR_VAR 0 1
11425: PUSH
11426: LD_INT 22
11428: PUSH
11429: LD_INT 2
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: PUSH
11436: LD_INT 21
11438: PUSH
11439: LD_INT 1
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: PPUSH
11450: CALL_OW 69
11454: PUSH
11455: FOR_IN
11456: IFFALSE 11480
// if HasTask ( i ) then
11458: LD_VAR 0 1
11462: PPUSH
11463: CALL_OW 314
11467: IFFALSE 11478
// ComHold ( i ) ;
11469: LD_VAR 0 1
11473: PPUSH
11474: CALL_OW 140
11478: GO 11455
11480: POP
11481: POP
// DialogueOn ;
11482: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
11486: LD_EXP 33
11490: PPUSH
11491: LD_STRING DO-assault-1
11493: PPUSH
11494: CALL_OW 94
// DialogueOff ;
11498: CALL_OW 7
// game_speed := 4 ;
11502: LD_ADDR_OWVAR 65
11506: PUSH
11507: LD_INT 4
11509: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
11510: LD_ADDR_VAR 0 1
11514: PUSH
11515: LD_EXP 46
11519: PPUSH
11520: LD_INT 3
11522: PUSH
11523: LD_INT 54
11525: PUSH
11526: EMPTY
11527: LIST
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PPUSH
11533: CALL_OW 72
11537: PUSH
11538: FOR_IN
11539: IFFALSE 11558
// ComMoveXY ( i , 226 , 114 ) ;
11541: LD_VAR 0 1
11545: PPUSH
11546: LD_INT 226
11548: PPUSH
11549: LD_INT 114
11551: PPUSH
11552: CALL_OW 111
11556: GO 11538
11558: POP
11559: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
11560: LD_EXP 41
11564: PPUSH
11565: LD_INT 22
11567: PUSH
11568: LD_INT 6
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PUSH
11575: LD_INT 30
11577: PUSH
11578: LD_INT 4
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: PPUSH
11589: CALL_OW 69
11593: PPUSH
11594: LD_EXP 41
11598: PPUSH
11599: CALL_OW 74
11603: PPUSH
11604: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
11608: LD_STRING Attack
11610: PPUSH
11611: CALL_OW 337
// music_class := music_combat ;
11615: LD_ADDR_OWVAR 72
11619: PUSH
11620: LD_INT 1
11622: ST_TO_ADDR
// music_nat := 4 ;
11623: LD_ADDR_OWVAR 71
11627: PUSH
11628: LD_INT 4
11630: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
11631: LD_INT 5
11633: PPUSH
11634: LD_EXP 41
11638: PPUSH
11639: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
11643: LD_INT 6
11645: PPUSH
11646: LD_EXP 38
11650: PPUSH
11651: LD_INT 25
11653: PUSH
11654: LD_INT 1
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PPUSH
11661: CALL_OW 72
11665: PUSH
11666: LD_INT 4
11668: ARRAY
11669: PPUSH
11670: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
11674: LD_ADDR_VAR 0 1
11678: PUSH
11679: LD_EXP 38
11683: PPUSH
11684: LD_INT 3
11686: PUSH
11687: LD_INT 25
11689: PUSH
11690: LD_INT 4
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PPUSH
11701: CALL_OW 72
11705: PUSH
11706: FOR_IN
11707: IFFALSE 11726
// ComAgressiveMove ( i , 221 , 110 ) ;
11709: LD_VAR 0 1
11713: PPUSH
11714: LD_INT 221
11716: PPUSH
11717: LD_INT 110
11719: PPUSH
11720: CALL_OW 114
11724: GO 11706
11726: POP
11727: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
11728: LD_EXP 38
11732: PPUSH
11733: LD_INT 25
11735: PUSH
11736: LD_INT 4
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: PPUSH
11743: CALL_OW 72
11747: PPUSH
11748: LD_INT 214
11750: PPUSH
11751: LD_INT 124
11753: PPUSH
11754: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
11758: LD_EXP 38
11762: PPUSH
11763: LD_INT 25
11765: PUSH
11766: LD_INT 1
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: PPUSH
11773: CALL_OW 72
11777: PUSH
11778: LD_INT 4
11780: ARRAY
11781: PPUSH
11782: LD_INT 214
11784: PPUSH
11785: LD_INT 114
11787: PPUSH
11788: LD_INT 0
11790: PPUSH
11791: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
11795: LD_EXP 41
11799: PPUSH
11800: LD_STRING D9-Gri-1
11802: PPUSH
11803: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
11807: LD_EXP 40
11811: PPUSH
11812: LD_STRING D9-Kur-1
11814: PPUSH
11815: CALL_OW 94
// wait ( 0 0$1 ) ;
11819: LD_INT 35
11821: PPUSH
11822: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
11826: LD_EXP 33
11830: PPUSH
11831: LD_INT 233
11833: PPUSH
11834: LD_INT 130
11836: PPUSH
11837: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
11841: LD_EXP 41
11845: PPUSH
11846: LD_STRING D9-Gri-2
11848: PPUSH
11849: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
11853: LD_EXP 40
11857: PPUSH
11858: LD_STRING D9-Kur-2
11860: PPUSH
11861: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
11865: LD_EXP 41
11869: PPUSH
11870: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
11874: LD_EXP 41
11878: PPUSH
11879: LD_INT 211
11881: PPUSH
11882: LD_INT 104
11884: PPUSH
11885: CALL_OW 171
// AddComHold ( Grishko ) ;
11889: LD_EXP 41
11893: PPUSH
11894: CALL_OW 200
// repeat wait ( 3 ) ;
11898: LD_INT 3
11900: PPUSH
11901: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
11905: LD_EXP 41
11909: PPUSH
11910: CALL_OW 310
11914: NOT
11915: IFFALSE 11898
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
11917: LD_EXP 38
11921: PPUSH
11922: LD_INT 34
11924: PUSH
11925: LD_INT 26
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: PPUSH
11932: CALL_OW 72
11936: PPUSH
11937: LD_EXP 41
11941: PPUSH
11942: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
11946: LD_EXP 38
11950: PPUSH
11951: LD_INT 34
11953: PUSH
11954: LD_INT 26
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: PPUSH
11961: CALL_OW 72
11965: PPUSH
11966: LD_INT 215
11968: PPUSH
11969: LD_INT 106
11971: PPUSH
11972: CALL_OW 174
// repeat wait ( 3 ) ;
11976: LD_INT 3
11978: PPUSH
11979: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
11983: LD_EXP 41
11987: PPUSH
11988: CALL_OW 256
11992: PUSH
11993: LD_INT 1000
11995: LESS
11996: IFFALSE 11976
// NormalAttack ( 5 , Grishko ) ;
11998: LD_INT 5
12000: PPUSH
12001: LD_EXP 41
12005: PPUSH
12006: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12010: LD_INT 6
12012: PPUSH
12013: LD_EXP 38
12017: PPUSH
12018: LD_INT 25
12020: PUSH
12021: LD_INT 1
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: PPUSH
12028: CALL_OW 72
12032: PUSH
12033: LD_INT 4
12035: ARRAY
12036: PPUSH
12037: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
12041: LD_EXP 41
12045: PPUSH
12046: LD_STRING D9-Gri-3
12048: PPUSH
12049: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12053: LD_EXP 40
12057: PPUSH
12058: LD_STRING D9-Kur-3
12060: PPUSH
12061: CALL_OW 94
// music_class := music_auto ;
12065: LD_ADDR_OWVAR 72
12069: PUSH
12070: LD_INT 0
12072: ST_TO_ADDR
// music_nat := music_auto ;
12073: LD_ADDR_OWVAR 71
12077: PUSH
12078: LD_INT 0
12080: ST_TO_ADDR
// for i in omarSquad do
12081: LD_ADDR_VAR 0 1
12085: PUSH
12086: LD_EXP 38
12090: PUSH
12091: FOR_IN
12092: IFFALSE 12234
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12094: LD_VAR 0 1
12098: PPUSH
12099: CALL_OW 247
12103: PUSH
12104: LD_INT 2
12106: EQUAL
12107: PUSH
12108: LD_VAR 0 1
12112: PPUSH
12113: CALL_OW 256
12117: PUSH
12118: LD_INT 1000
12120: LESS
12121: AND
12122: IFFALSE 12188
// begin driver := IsDrivenBy ( i ) ;
12124: LD_ADDR_VAR 0 2
12128: PUSH
12129: LD_VAR 0 1
12133: PPUSH
12134: CALL_OW 311
12138: ST_TO_ADDR
// veh := i ;
12139: LD_ADDR_VAR 0 3
12143: PUSH
12144: LD_VAR 0 1
12148: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12149: LD_VAR 0 2
12153: PPUSH
12154: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12158: LD_VAR 0 2
12162: PPUSH
12163: LD_VAR 0 3
12167: PPUSH
12168: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12172: LD_VAR 0 2
12176: PPUSH
12177: LD_VAR 0 3
12181: PPUSH
12182: CALL_OW 180
// end else
12186: GO 12232
// if GetLives ( i ) < 500 then
12188: LD_VAR 0 1
12192: PPUSH
12193: CALL_OW 256
12197: PUSH
12198: LD_INT 500
12200: LESS
12201: IFFALSE 12232
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12203: LD_EXP 38
12207: PPUSH
12208: LD_INT 25
12210: PUSH
12211: LD_INT 4
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PPUSH
12218: CALL_OW 72
12222: PPUSH
12223: LD_VAR 0 1
12227: PPUSH
12228: CALL_OW 188
// end ; end ;
12232: GO 12091
12234: POP
12235: POP
// repeat wait ( 0 0$1 ) ;
12236: LD_INT 35
12238: PPUSH
12239: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12243: LD_EXP 38
12247: PPUSH
12248: LD_INT 3
12250: PUSH
12251: LD_INT 24
12253: PUSH
12254: LD_INT 1000
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: PUSH
12265: LD_INT 21
12267: PUSH
12268: LD_INT 2
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: PPUSH
12279: CALL_OW 72
12283: NOT
12284: PUSH
12285: LD_EXP 38
12289: PPUSH
12290: LD_INT 3
12292: PUSH
12293: LD_INT 24
12295: PUSH
12296: LD_INT 250
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: PPUSH
12307: CALL_OW 72
12311: NOT
12312: AND
12313: IFFALSE 12236
// wait ( 0 0$2 ) ;
12315: LD_INT 70
12317: PPUSH
12318: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12322: LD_ADDR_VAR 0 5
12326: PUSH
12327: LD_EXP 38
12331: PPUSH
12332: LD_INT 58
12334: PUSH
12335: EMPTY
12336: LIST
12337: PUSH
12338: LD_INT 21
12340: PUSH
12341: LD_INT 2
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PPUSH
12352: CALL_OW 72
12356: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
12357: LD_ADDR_VAR 0 6
12361: PUSH
12362: LD_EXP 38
12366: PPUSH
12367: LD_INT 25
12369: PUSH
12370: LD_INT 3
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PUSH
12377: LD_INT 3
12379: PUSH
12380: LD_INT 55
12382: PUSH
12383: EMPTY
12384: LIST
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: PPUSH
12394: CALL_OW 72
12398: ST_TO_ADDR
// for i := 1 to tmp do
12399: LD_ADDR_VAR 0 1
12403: PUSH
12404: DOUBLE
12405: LD_INT 1
12407: DEC
12408: ST_TO_ADDR
12409: LD_VAR 0 5
12413: PUSH
12414: FOR_TO
12415: IFFALSE 12445
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
12417: LD_VAR 0 6
12421: PUSH
12422: LD_VAR 0 1
12426: ARRAY
12427: PPUSH
12428: LD_VAR 0 5
12432: PUSH
12433: LD_VAR 0 1
12437: ARRAY
12438: PPUSH
12439: CALL_OW 120
12443: GO 12414
12445: POP
12446: POP
// wait ( 0 0$5 ) ;
12447: LD_INT 175
12449: PPUSH
12450: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
12454: LD_EXP 38
12458: PPUSH
12459: LD_INT 199
12461: PPUSH
12462: LD_INT 141
12464: PPUSH
12465: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
12469: LD_EXP 33
12473: PPUSH
12474: LD_INT 190
12476: PPUSH
12477: LD_INT 143
12479: PPUSH
12480: CALL_OW 114
// AddComHold ( Omar ) ;
12484: LD_EXP 33
12488: PPUSH
12489: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
12493: LD_EXP 38
12497: PPUSH
12498: LD_INT 2
12500: PUSH
12501: LD_INT 25
12503: PUSH
12504: LD_INT 1
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PUSH
12511: LD_INT 25
12513: PUSH
12514: LD_INT 4
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PUSH
12521: EMPTY
12522: LIST
12523: LIST
12524: LIST
12525: PPUSH
12526: CALL_OW 72
12530: PPUSH
12531: LD_INT 161
12533: PPUSH
12534: LD_INT 130
12536: PPUSH
12537: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
12541: LD_EXP 38
12545: PPUSH
12546: LD_INT 25
12548: PUSH
12549: LD_INT 1
12551: PUSH
12552: EMPTY
12553: LIST
12554: LIST
12555: PPUSH
12556: CALL_OW 72
12560: PPUSH
12561: LD_INT 163
12563: PPUSH
12564: LD_INT 122
12566: PPUSH
12567: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
12571: LD_EXP 38
12575: PPUSH
12576: LD_INT 25
12578: PUSH
12579: LD_INT 1
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: PPUSH
12586: CALL_OW 72
12590: PUSH
12591: LD_INT 4
12593: ARRAY
12594: PPUSH
12595: LD_INT 165
12597: PPUSH
12598: LD_INT 118
12600: PPUSH
12601: LD_INT 0
12603: PPUSH
12604: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
12608: LD_EXP 38
12612: PPUSH
12613: LD_INT 25
12615: PUSH
12616: LD_INT 1
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: PPUSH
12623: CALL_OW 72
12627: PUSH
12628: LD_INT 4
12630: ARRAY
12631: PPUSH
12632: LD_INT 159
12634: PPUSH
12635: LD_INT 116
12637: PPUSH
12638: LD_INT 0
12640: PPUSH
12641: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
12645: LD_EXP 38
12649: PPUSH
12650: LD_INT 21
12652: PUSH
12653: LD_INT 2
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PPUSH
12660: CALL_OW 72
12664: PPUSH
12665: LD_INT 169
12667: PPUSH
12668: LD_INT 114
12670: PPUSH
12671: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
12675: LD_INT 35
12677: PPUSH
12678: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
12682: LD_ADDR_VAR 0 5
12686: PUSH
12687: LD_EXP 38
12691: PPUSH
12692: LD_INT 25
12694: PUSH
12695: LD_INT 1
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PPUSH
12702: CALL_OW 72
12706: ST_TO_ADDR
// for i in tmp do
12707: LD_ADDR_VAR 0 1
12711: PUSH
12712: LD_VAR 0 5
12716: PUSH
12717: FOR_IN
12718: IFFALSE 12815
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
12720: LD_VAR 0 1
12724: PPUSH
12725: CALL_OW 256
12729: PUSH
12730: LD_INT 600
12732: LESS
12733: PUSH
12734: LD_VAR 0 1
12738: PPUSH
12739: LD_INT 161
12741: PPUSH
12742: LD_INT 130
12744: PPUSH
12745: CALL_OW 297
12749: PUSH
12750: LD_INT 6
12752: GREATER
12753: AND
12754: IFFALSE 12771
// ComMoveXY ( i , 161 , 130 ) ;
12756: LD_VAR 0 1
12760: PPUSH
12761: LD_INT 161
12763: PPUSH
12764: LD_INT 130
12766: PPUSH
12767: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
12771: LD_VAR 0 1
12775: PPUSH
12776: CALL_OW 256
12780: PUSH
12781: LD_INT 1000
12783: EQUAL
12784: PUSH
12785: LD_VAR 0 1
12789: PPUSH
12790: CALL_OW 314
12794: NOT
12795: AND
12796: IFFALSE 12813
// ComAgressiveMove ( i , 160 , 109 ) ;
12798: LD_VAR 0 1
12802: PPUSH
12803: LD_INT 160
12805: PPUSH
12806: LD_INT 109
12808: PPUSH
12809: CALL_OW 114
// end ;
12813: GO 12717
12815: POP
12816: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
12817: LD_ADDR_VAR 0 5
12821: PUSH
12822: LD_EXP 38
12826: PPUSH
12827: LD_INT 21
12829: PUSH
12830: LD_INT 2
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: PPUSH
12837: CALL_OW 72
12841: ST_TO_ADDR
// for i in tmp do
12842: LD_ADDR_VAR 0 1
12846: PUSH
12847: LD_VAR 0 5
12851: PUSH
12852: FOR_IN
12853: IFFALSE 13119
// begin tmp2 := IsDrivenBy ( i ) ;
12855: LD_ADDR_VAR 0 6
12859: PUSH
12860: LD_VAR 0 1
12864: PPUSH
12865: CALL_OW 311
12869: ST_TO_ADDR
// if not tmp2 then
12870: LD_VAR 0 6
12874: NOT
12875: IFFALSE 12879
// continue ;
12877: GO 12852
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
12879: LD_VAR 0 1
12883: PPUSH
12884: CALL_OW 256
12888: PUSH
12889: LD_INT 600
12891: GREATEREQUAL
12892: PUSH
12893: LD_VAR 0 1
12897: PPUSH
12898: CALL_OW 110
12902: PUSH
12903: LD_INT 1
12905: EQUAL
12906: AND
12907: IFFALSE 12921
// SetTag ( i , 0 ) ;
12909: LD_VAR 0 1
12913: PPUSH
12914: LD_INT 0
12916: PPUSH
12917: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
12921: LD_VAR 0 1
12925: PPUSH
12926: CALL_OW 256
12930: PUSH
12931: LD_INT 600
12933: GREATEREQUAL
12934: PUSH
12935: LD_VAR 0 1
12939: PPUSH
12940: CALL_OW 110
12944: NOT
12945: AND
12946: IFFALSE 12972
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
12948: LD_VAR 0 1
12952: PPUSH
12953: LD_VAR 0 7
12957: PPUSH
12958: LD_VAR 0 1
12962: PPUSH
12963: CALL_OW 74
12967: PPUSH
12968: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
12972: LD_VAR 0 1
12976: PPUSH
12977: CALL_OW 256
12981: PUSH
12982: LD_INT 600
12984: LESS
12985: PUSH
12986: LD_VAR 0 1
12990: PPUSH
12991: CALL_OW 110
12995: NOT
12996: AND
12997: IFFALSE 13026
// begin SetTag ( i , 1 ) ;
12999: LD_VAR 0 1
13003: PPUSH
13004: LD_INT 1
13006: PPUSH
13007: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13011: LD_VAR 0 1
13015: PPUSH
13016: LD_INT 202
13018: PPUSH
13019: LD_INT 150
13021: PPUSH
13022: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13026: LD_VAR 0 1
13030: PPUSH
13031: CALL_OW 110
13035: PUSH
13036: LD_INT 1
13038: EQUAL
13039: PUSH
13040: LD_VAR 0 1
13044: PPUSH
13045: LD_INT 202
13047: PPUSH
13048: LD_INT 150
13050: PPUSH
13051: CALL_OW 297
13055: PUSH
13056: LD_INT 6
13058: LESS
13059: AND
13060: PUSH
13061: LD_VAR 0 6
13065: AND
13066: IFFALSE 13117
// begin ComExitVehicle ( tmp2 ) ;
13068: LD_VAR 0 6
13072: PPUSH
13073: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13077: LD_VAR 0 6
13081: PPUSH
13082: LD_VAR 0 1
13086: PPUSH
13087: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13091: LD_VAR 0 6
13095: PPUSH
13096: LD_INT 700
13098: PPUSH
13099: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13103: LD_VAR 0 6
13107: PPUSH
13108: LD_VAR 0 1
13112: PPUSH
13113: CALL_OW 180
// end ; end ;
13117: GO 12852
13119: POP
13120: POP
// until kirovDestroyed ;
13121: LD_EXP 16
13125: IFFALSE 12675
// repeat wait ( 0 0$1 ) ;
13127: LD_INT 35
13129: PPUSH
13130: CALL_OW 67
// for i in omarSquad union Omar do
13134: LD_ADDR_VAR 0 1
13138: PUSH
13139: LD_EXP 38
13143: PUSH
13144: LD_EXP 33
13148: UNION
13149: PUSH
13150: FOR_IN
13151: IFFALSE 13321
// if IsInArea ( i , southRoadArea ) then
13153: LD_VAR 0 1
13157: PPUSH
13158: LD_INT 15
13160: PPUSH
13161: CALL_OW 308
13165: IFFALSE 13178
// RemoveUnit ( i ) else
13167: LD_VAR 0 1
13171: PPUSH
13172: CALL_OW 64
13176: GO 13319
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
13178: LD_VAR 0 1
13182: PPUSH
13183: CALL_OW 257
13187: PUSH
13188: LD_INT 3
13190: EQUAL
13191: PUSH
13192: LD_VAR 0 1
13196: PPUSH
13197: CALL_OW 310
13201: NOT
13202: AND
13203: PUSH
13204: LD_INT 22
13206: PUSH
13207: LD_INT 5
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PUSH
13214: LD_INT 24
13216: PUSH
13217: LD_INT 251
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PUSH
13224: LD_INT 21
13226: PUSH
13227: LD_INT 2
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: PUSH
13234: LD_INT 58
13236: PUSH
13237: EMPTY
13238: LIST
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: PPUSH
13246: CALL_OW 69
13250: AND
13251: IFFALSE 13304
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
13253: LD_VAR 0 1
13257: PPUSH
13258: LD_INT 22
13260: PUSH
13261: LD_INT 5
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 21
13270: PUSH
13271: LD_INT 2
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PUSH
13278: LD_INT 58
13280: PUSH
13281: EMPTY
13282: LIST
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: LIST
13288: PPUSH
13289: CALL_OW 69
13293: PUSH
13294: LD_INT 1
13296: ARRAY
13297: PPUSH
13298: CALL_OW 120
13302: GO 13319
// ComMoveXY ( i , 208 , 162 ) ;
13304: LD_VAR 0 1
13308: PPUSH
13309: LD_INT 208
13311: PPUSH
13312: LD_INT 162
13314: PPUSH
13315: CALL_OW 111
// end ;
13319: GO 13150
13321: POP
13322: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
13323: LD_INT 22
13325: PUSH
13326: LD_INT 5
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: PUSH
13333: LD_INT 21
13335: PUSH
13336: LD_INT 1
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: PPUSH
13347: CALL_OW 69
13351: NOT
13352: IFFALSE 13127
// end ;
13354: PPOPN 7
13356: END
// every 0 0$1 trigger IsDead ( kirov ) do
13357: LD_INT 71
13359: PPUSH
13360: CALL_OW 301
13364: IFFALSE 13381
13366: GO 13368
13368: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
13369: LD_EXP 25
13373: PPUSH
13374: LD_STRING DH-1-Kirov
13376: PPUSH
13377: CALL_OW 88
13381: END
// every 0 0$1 trigger See ( 2 , beria ) do
13382: LD_INT 2
13384: PPUSH
13385: LD_INT 106
13387: PPUSH
13388: CALL_OW 292
13392: IFFALSE 13409
13394: GO 13396
13396: DISABLE
// Say ( Heike , DH-1-Beria ) ;
13397: LD_EXP 25
13401: PPUSH
13402: LD_STRING DH-1-Beria
13404: PPUSH
13405: CALL_OW 88
13409: END
// every 0 0$1 trigger See ( 2 , kagan ) do
13410: LD_INT 2
13412: PPUSH
13413: LD_INT 112
13415: PPUSH
13416: CALL_OW 292
13420: IFFALSE 13687
13422: GO 13424
13424: DISABLE
// begin DialogueOn ;
13425: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
13429: LD_INT 112
13431: PPUSH
13432: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
13436: LD_EXP 25
13440: PPUSH
13441: LD_STRING DH-1-Kagan
13443: PPUSH
13444: CALL_OW 88
// if Kamil then
13448: LD_EXP 29
13452: IFFALSE 13490
// begin Say ( Kamil , DKam-Kagan-2 ) ;
13454: LD_EXP 29
13458: PPUSH
13459: LD_STRING DKam-Kagan-2
13461: PPUSH
13462: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
13466: LD_EXP 26
13470: PPUSH
13471: LD_STRING DG-Kagan-3
13473: PPUSH
13474: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
13478: LD_EXP 26
13482: PPUSH
13483: LD_STRING DG-Kagan-4
13485: PPUSH
13486: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
13490: LD_STRING KaganBase
13492: PPUSH
13493: CALL_OW 97
13497: PUSH
13498: LD_INT 1
13500: DOUBLE
13501: EQUAL
13502: IFTRUE 13506
13504: GO 13601
13506: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
13507: LD_EXP 25
13511: PPUSH
13512: LD_STRING DH-Kagan-5
13514: PPUSH
13515: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
13519: LD_EXP 25
13523: PPUSH
13524: LD_STRING DH-Kagan-6
13526: PPUSH
13527: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
13531: LD_EXP 36
13535: PPUSH
13536: LD_STRING DShar-Kagan-7
13538: PPUSH
13539: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
13543: LD_EXP 25
13547: PPUSH
13548: LD_STRING DH-Kagan-8
13550: PPUSH
13551: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
13555: LD_EXP 25
13559: PPUSH
13560: LD_STRING DH-Kagan-9
13562: PPUSH
13563: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
13567: LD_EXP 36
13571: PPUSH
13572: LD_STRING DShar-Kagan-10
13574: PPUSH
13575: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
13579: LD_EXP 25
13583: PPUSH
13584: LD_STRING DH-Kagan-11
13586: PPUSH
13587: CALL_OW 88
// kaganCaptured := true ;
13591: LD_ADDR_EXP 24
13595: PUSH
13596: LD_INT 1
13598: ST_TO_ADDR
// end ; 2 :
13599: GO 13683
13601: LD_INT 2
13603: DOUBLE
13604: EQUAL
13605: IFTRUE 13609
13607: GO 13682
13609: POP
// begin if FilterAllUnits ( [ f_side , 8 ] ) and Aviradze then
13610: LD_INT 22
13612: PUSH
13613: LD_INT 8
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PPUSH
13620: CALL_OW 69
13624: PUSH
13625: LD_EXP 35
13629: AND
13630: IFFALSE 13644
// Say ( Heike , DH-Kagan-a-5 ) ;
13632: LD_EXP 25
13636: PPUSH
13637: LD_STRING DH-Kagan-a-5
13639: PPUSH
13640: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
13644: LD_EXP 25
13648: PPUSH
13649: LD_STRING DH-Kagan-a-6
13651: PPUSH
13652: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
13656: LD_EXP 25
13660: PPUSH
13661: LD_STRING DH-Kagan-a-7
13663: PPUSH
13664: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
13668: LD_EXP 26
13672: PPUSH
13673: LD_STRING DG-Kagan-a-8
13675: PPUSH
13676: CALL_OW 88
// end ; end ;
13680: GO 13683
13682: POP
// DialogueOff ;
13683: CALL_OW 7
// end ;
13687: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
13688: LD_EXP 18
13692: PUSH
13693: LD_INT 112
13695: PPUSH
13696: CALL_OW 255
13700: PUSH
13701: LD_INT 2
13703: EQUAL
13704: OR
13705: IFFALSE 13717
13707: GO 13709
13709: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
13710: LD_STRING KaganDone
13712: PPUSH
13713: CALL_OW 337
13717: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
13718: LD_EXP 6
13722: PUSH
13723: LD_EXP 48
13727: PPUSH
13728: LD_INT 95
13730: PUSH
13731: LD_INT 19
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PPUSH
13738: CALL_OW 72
13742: AND
13743: IFFALSE 13820
13745: GO 13747
13747: DISABLE
// begin DialogueOn ;
13748: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
13752: LD_INT 63
13754: PPUSH
13755: LD_INT 32
13757: PPUSH
13758: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
13762: LD_INT 63
13764: PPUSH
13765: LD_INT 32
13767: PPUSH
13768: LD_INT 2
13770: PPUSH
13771: LD_INT 12
13773: NEG
13774: PPUSH
13775: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
13779: LD_EXP 25
13783: PPUSH
13784: LD_STRING DH-Omicron-1
13786: PPUSH
13787: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
13791: LD_EXP 27
13795: PPUSH
13796: LD_STRING DM-Omicron-2
13798: PPUSH
13799: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
13803: LD_INT 63
13805: PPUSH
13806: LD_INT 32
13808: PPUSH
13809: LD_INT 2
13811: PPUSH
13812: CALL_OW 331
// DialogueOff ;
13816: CALL_OW 7
// end ;
13820: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
13821: LD_INT 2
13823: PPUSH
13824: LD_EXP 50
13828: PPUSH
13829: CALL_OW 292
13833: PUSH
13834: LD_EXP 50
13838: PPUSH
13839: CALL_OW 255
13843: PUSH
13844: LD_INT 2
13846: EQUAL
13847: OR
13848: PUSH
13849: LD_INT 106
13851: PPUSH
13852: CALL_OW 255
13856: PUSH
13857: LD_INT 2
13859: EQUAL
13860: OR
13861: PUSH
13862: LD_EXP 50
13866: PPUSH
13867: CALL_OW 302
13871: AND
13872: PUSH
13873: LD_EXP 25
13877: PPUSH
13878: CALL_OW 302
13882: AND
13883: PUSH
13884: LD_EXP 35
13888: PPUSH
13889: CALL_OW 302
13893: AND
13894: IFFALSE 14615
13896: GO 13898
13898: DISABLE
13899: LD_INT 0
13901: PPUSH
13902: PPUSH
13903: PPUSH
13904: PPUSH
13905: PPUSH
// begin DialogueOn ;
13906: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
13910: LD_INT 111
13912: PPUSH
13913: LD_INT 90
13915: PPUSH
13916: LD_INT 2
13918: PPUSH
13919: LD_INT 6
13921: NEG
13922: PPUSH
13923: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
13927: LD_INT 111
13929: PPUSH
13930: LD_INT 90
13932: PPUSH
13933: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
13937: LD_EXP 35
13941: PPUSH
13942: LD_STRING DA-Cap-1
13944: PPUSH
13945: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
13949: LD_EXP 25
13953: PPUSH
13954: LD_STRING DH-Cap-2
13956: PPUSH
13957: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
13961: LD_INT 111
13963: PPUSH
13964: LD_INT 90
13966: PPUSH
13967: LD_INT 2
13969: PPUSH
13970: CALL_OW 331
// DialogueOff ;
13974: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
13978: LD_INT 35
13980: PPUSH
13981: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 110 , 95 , 12 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_distxy , 110 , 95 , 12 ] ] ) ;
13985: LD_EXP 17
13989: PUSH
13990: LD_INT 106
13992: PPUSH
13993: CALL_OW 255
13997: PUSH
13998: LD_INT 2
14000: EQUAL
14001: OR
14002: PUSH
14003: LD_EXP 50
14007: PPUSH
14008: CALL_OW 255
14012: PUSH
14013: LD_INT 2
14015: EQUAL
14016: OR
14017: PUSH
14018: LD_EXP 50
14022: PPUSH
14023: CALL_OW 302
14027: AND
14028: PUSH
14029: LD_EXP 35
14033: PPUSH
14034: CALL_OW 302
14038: AND
14039: PUSH
14040: LD_INT 2
14042: PPUSH
14043: CALL_OW 463
14047: NOT
14048: AND
14049: PUSH
14050: LD_INT 22
14052: PUSH
14053: LD_INT 3
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: PUSH
14060: LD_INT 21
14062: PUSH
14063: LD_INT 1
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 92
14072: PUSH
14073: LD_INT 110
14075: PUSH
14076: LD_INT 95
14078: PUSH
14079: LD_INT 12
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: LIST
14092: PPUSH
14093: CALL_OW 69
14097: NOT
14098: AND
14099: PUSH
14100: LD_INT 22
14102: PUSH
14103: LD_INT 3
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PUSH
14110: LD_INT 30
14112: PUSH
14113: LD_INT 5
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PUSH
14120: LD_INT 92
14122: PUSH
14123: LD_INT 110
14125: PUSH
14126: LD_INT 95
14128: PUSH
14129: LD_INT 12
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: LIST
14142: PPUSH
14143: CALL_OW 69
14147: NOT
14148: AND
14149: IFFALSE 13978
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14151: LD_ADDR_VAR 0 2
14155: PUSH
14156: LD_EXP 37
14160: PUSH
14161: LD_EXP 28
14165: PUSH
14166: LD_EXP 29
14170: PUSH
14171: LD_EXP 31
14175: PUSH
14176: LD_EXP 30
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: UNION
14187: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14188: LD_ADDR_VAR 0 2
14192: PUSH
14193: LD_VAR 0 2
14197: PPUSH
14198: LD_INT 50
14200: PUSH
14201: EMPTY
14202: LIST
14203: PPUSH
14204: CALL_OW 72
14208: ST_TO_ADDR
// if tmp < 2 then
14209: LD_VAR 0 2
14213: PUSH
14214: LD_INT 2
14216: LESS
14217: IFFALSE 14229
// q := 2 else
14219: LD_ADDR_VAR 0 4
14223: PUSH
14224: LD_INT 2
14226: ST_TO_ADDR
14227: GO 14242
// q := Query ( LabCap ) ;
14229: LD_ADDR_VAR 0 4
14233: PUSH
14234: LD_STRING LabCap
14236: PPUSH
14237: CALL_OW 97
14241: ST_TO_ADDR
// case q of 1 :
14242: LD_VAR 0 4
14246: PUSH
14247: LD_INT 1
14249: DOUBLE
14250: EQUAL
14251: IFTRUE 14255
14253: GO 14579
14255: POP
// begin DoNotAttack ( 2 , ruLab ) ;
14256: LD_INT 2
14258: PPUSH
14259: LD_EXP 50
14263: PPUSH
14264: CALL_OW 471
// labCaptured := true ;
14268: LD_ADDR_EXP 21
14272: PUSH
14273: LD_INT 1
14275: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
14276: LD_EXP 25
14280: PPUSH
14281: LD_STRING DH-Cap-a-1
14283: PPUSH
14284: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
14288: LD_EXP 35
14292: PPUSH
14293: LD_STRING DA-Cap-a-2
14295: PPUSH
14296: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike ] ^ [ sel_changeable ] ^ tmp ;
14300: LD_ADDR_VAR 0 5
14304: PUSH
14305: LD_EXP 35
14309: PUSH
14310: LD_INT -3
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: PUSH
14317: LD_INT -2
14319: PUSH
14320: LD_INT -4
14322: PUSH
14323: LD_EXP 25
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: LIST
14332: ADD
14333: PUSH
14334: LD_INT -3
14336: PUSH
14337: EMPTY
14338: LIST
14339: ADD
14340: PUSH
14341: LD_VAR 0 2
14345: ADD
14346: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
14347: LD_ADDR_VAR 0 3
14351: PUSH
14352: LD_STRING Select two characters to go with Aviradze
14354: PPUSH
14355: LD_INT 2
14357: PPUSH
14358: LD_INT 2
14360: PPUSH
14361: LD_VAR 0 5
14365: PPUSH
14366: EMPTY
14367: PPUSH
14368: CALL_OW 42
14372: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
14373: LD_EXP 50
14377: PPUSH
14378: LD_INT 8
14380: PPUSH
14381: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
14385: LD_EXP 35
14389: PPUSH
14390: LD_INT 8
14392: PPUSH
14393: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
14397: LD_ADDR_EXP 39
14401: PUSH
14402: LD_EXP 35
14406: PUSH
14407: EMPTY
14408: LIST
14409: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
14410: LD_EXP 35
14414: PPUSH
14415: CALL_OW 310
14419: IFFALSE 14430
// ComExit ( Aviradze ) ;
14421: LD_EXP 35
14425: PPUSH
14426: CALL 71596 0 1
// wait ( 3 ) ;
14430: LD_INT 3
14432: PPUSH
14433: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
14437: LD_EXP 35
14441: PPUSH
14442: LD_EXP 50
14446: PPUSH
14447: CALL_OW 120
// for i := 1 to 2 do
14451: LD_ADDR_VAR 0 1
14455: PUSH
14456: DOUBLE
14457: LD_INT 1
14459: DEC
14460: ST_TO_ADDR
14461: LD_INT 2
14463: PUSH
14464: FOR_TO
14465: IFFALSE 14568
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
14467: LD_ADDR_EXP 39
14471: PUSH
14472: LD_EXP 39
14476: PUSH
14477: LD_VAR 0 3
14481: PUSH
14482: LD_VAR 0 1
14486: ARRAY
14487: UNION
14488: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
14489: LD_VAR 0 3
14493: PUSH
14494: LD_VAR 0 1
14498: ARRAY
14499: PPUSH
14500: LD_INT 8
14502: PPUSH
14503: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
14507: LD_VAR 0 3
14511: PUSH
14512: LD_VAR 0 1
14516: ARRAY
14517: PPUSH
14518: CALL_OW 310
14522: IFFALSE 14539
// ComExit ( tmp2 [ i ] ) ;
14524: LD_VAR 0 3
14528: PUSH
14529: LD_VAR 0 1
14533: ARRAY
14534: PPUSH
14535: CALL 71596 0 1
// wait ( 3 ) ;
14539: LD_INT 3
14541: PPUSH
14542: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
14546: LD_VAR 0 3
14550: PUSH
14551: LD_VAR 0 1
14555: ARRAY
14556: PPUSH
14557: LD_EXP 50
14561: PPUSH
14562: CALL_OW 120
// end ;
14566: GO 14464
14568: POP
14569: POP
// SetAchievement ( ACH_LAB ) ;
14570: LD_STRING ACH_LAB
14572: PPUSH
14573: CALL_OW 543
// end ; 2 :
14577: GO 14615
14579: LD_INT 2
14581: DOUBLE
14582: EQUAL
14583: IFTRUE 14587
14585: GO 14614
14587: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
14588: LD_EXP 25
14592: PPUSH
14593: LD_STRING DH-Cap-b-1
14595: PPUSH
14596: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
14600: LD_EXP 35
14604: PPUSH
14605: LD_STRING DA-Cap-b-2
14607: PPUSH
14608: CALL_OW 88
// end ; end ;
14612: GO 14615
14614: POP
// end ;
14615: PPOPN 5
14617: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
14618: LD_INT 10
14620: PPUSH
14621: LD_INT 22
14623: PUSH
14624: LD_INT 2
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: PUSH
14631: LD_INT 30
14633: PUSH
14634: LD_INT 31
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: PPUSH
14645: CALL_OW 70
14649: PUSH
14650: LD_INT 2
14652: GREATEREQUAL
14653: IFFALSE 14665
14655: GO 14657
14657: DISABLE
// SetAchievement ( ACH_KING ) ;
14658: LD_STRING ACH_KING
14660: PPUSH
14661: CALL_OW 543
14665: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
14666: LD_EXP 11
14670: NOT
14671: PUSH
14672: LD_INT 10
14674: PPUSH
14675: LD_INT 22
14677: PUSH
14678: LD_INT 2
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: PUSH
14685: LD_INT 2
14687: PUSH
14688: LD_INT 30
14690: PUSH
14691: LD_INT 31
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: PUSH
14698: LD_INT 30
14700: PUSH
14701: LD_INT 4
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: LIST
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: PPUSH
14717: CALL_OW 70
14721: AND
14722: IFFALSE 14742
14724: GO 14726
14726: DISABLE
// begin hillBase := true ;
14727: LD_ADDR_EXP 15
14731: PUSH
14732: LD_INT 1
14734: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
14735: LD_STRING HillDone
14737: PPUSH
14738: CALL_OW 337
// end ;
14742: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
14743: LD_EXP 30
14747: PUSH
14748: LD_EXP 30
14752: PPUSH
14753: CALL_OW 256
14757: PUSH
14758: LD_INT 3
14760: LESS
14761: AND
14762: IFFALSE 14808
14764: GO 14766
14766: DISABLE
// begin DialogueOn ;
14767: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
14771: LD_EXP 30
14775: PPUSH
14776: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
14780: LD_EXP 30
14784: PPUSH
14785: LD_STRING DK-Kkilled-1
14787: PPUSH
14788: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
14792: LD_EXP 25
14796: PPUSH
14797: LD_STRING DH-Kkilled-2
14799: PPUSH
14800: CALL_OW 88
// DialogueOff ;
14804: CALL_OW 7
// end ;
14808: END
// every 0 0$1 trigger kaiaKilledByRussian do
14809: LD_EXP 23
14813: IFFALSE 14830
14815: GO 14817
14817: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
14818: LD_EXP 25
14822: PPUSH
14823: LD_STRING DH-Kkilled-3
14825: PPUSH
14826: CALL_OW 88
14830: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo ;
14831: LD_EXP 16
14835: PUSH
14836: LD_INT 106
14838: PPUSH
14839: CALL_OW 255
14843: PUSH
14844: LD_INT 2
14846: EQUAL
14847: PUSH
14848: LD_EXP 17
14852: OR
14853: AND
14854: PUSH
14855: LD_EXP 18
14859: PUSH
14860: LD_EXP 24
14864: PUSH
14865: LD_INT 112
14867: PPUSH
14868: CALL_OW 255
14872: PUSH
14873: LD_INT 2
14875: EQUAL
14876: AND
14877: OR
14878: AND
14879: IFFALSE 16068
14881: GO 14883
14883: DISABLE
14884: LD_INT 0
14886: PPUSH
14887: PPUSH
14888: PPUSH
14889: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
14890: LD_STRING GoToWest
14892: PPUSH
14893: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
14897: LD_INT 17
14899: PPUSH
14900: LD_INT 1
14902: PPUSH
14903: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
14907: LD_INT 35
14909: PPUSH
14910: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
14914: LD_ADDR_VAR 0 2
14918: PUSH
14919: LD_INT 17
14921: PPUSH
14922: LD_INT 22
14924: PUSH
14925: LD_INT 2
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: PUSH
14932: LD_INT 2
14934: PUSH
14935: LD_INT 21
14937: PUSH
14938: LD_INT 1
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 21
14947: PUSH
14948: LD_INT 2
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PUSH
14955: LD_INT 3
14957: PUSH
14958: LD_INT 58
14960: PUSH
14961: EMPTY
14962: LIST
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: LIST
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: PPUSH
14981: CALL_OW 70
14985: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
14986: LD_ADDR_VAR 0 3
14990: PUSH
14991: LD_INT 22
14993: PUSH
14994: LD_INT 2
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PUSH
15001: LD_INT 3
15003: PUSH
15004: LD_INT 55
15006: PUSH
15007: EMPTY
15008: LIST
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PUSH
15014: LD_INT 2
15016: PUSH
15017: LD_INT 21
15019: PUSH
15020: LD_INT 1
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: PUSH
15027: LD_INT 21
15029: PUSH
15030: LD_INT 2
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: PUSH
15037: LD_INT 3
15039: PUSH
15040: LD_INT 58
15042: PUSH
15043: EMPTY
15044: LIST
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: LIST
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: LIST
15063: PPUSH
15064: CALL_OW 69
15068: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15069: LD_VAR 0 2
15073: PUSH
15074: LD_INT 0
15076: PLUS
15077: PUSH
15078: LD_VAR 0 3
15082: PUSH
15083: LD_INT 0
15085: PLUS
15086: EQUAL
15087: IFFALSE 14907
// SaveCharacters ( Heike , 04_1_Heike ) ;
15089: LD_EXP 25
15093: PPUSH
15094: LD_STRING 04_1_Heike
15096: PPUSH
15097: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15101: LD_EXP 35
15105: PUSH
15106: LD_EXP 35
15110: PUSH
15111: LD_EXP 39
15115: IN
15116: NOT
15117: AND
15118: IFFALSE 15134
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15120: LD_EXP 35
15124: PPUSH
15125: LD_STRING 04_1_Aviradze
15127: PPUSH
15128: CALL_OW 38
15132: GO 15152
// if Aviradze then
15134: LD_EXP 35
15138: IFFALSE 15152
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15140: LD_EXP 35
15144: PPUSH
15145: LD_STRING 04_1_Aviradze_L
15147: PPUSH
15148: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15152: LD_EXP 28
15156: PUSH
15157: LD_EXP 28
15161: PUSH
15162: LD_EXP 39
15166: IN
15167: NOT
15168: AND
15169: IFFALSE 15185
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15171: LD_EXP 28
15175: PPUSH
15176: LD_STRING 04_1_Ibrahim
15178: PPUSH
15179: CALL_OW 38
15183: GO 15203
// if Ibrahim then
15185: LD_EXP 28
15189: IFFALSE 15203
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
15191: LD_EXP 28
15195: PPUSH
15196: LD_STRING 04_1_Ibrahim_L
15198: PPUSH
15199: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
15203: LD_EXP 29
15207: PUSH
15208: LD_EXP 29
15212: PUSH
15213: LD_EXP 39
15217: IN
15218: NOT
15219: AND
15220: IFFALSE 15236
// SaveCharacters ( Kamil , 04_1_Kamil ) else
15222: LD_EXP 29
15226: PPUSH
15227: LD_STRING 04_1_Kamil
15229: PPUSH
15230: CALL_OW 38
15234: GO 15254
// if Kamil then
15236: LD_EXP 29
15240: IFFALSE 15254
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
15242: LD_EXP 29
15246: PPUSH
15247: LD_STRING 04_1_Kamil_L
15249: PPUSH
15250: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
15254: LD_EXP 31
15258: PUSH
15259: LD_EXP 31
15263: PUSH
15264: LD_EXP 39
15268: IN
15269: NOT
15270: AND
15271: IFFALSE 15287
// SaveCharacters ( Sophia , 04_1_Sophia ) else
15273: LD_EXP 31
15277: PPUSH
15278: LD_STRING 04_1_Sophia
15280: PPUSH
15281: CALL_OW 38
15285: GO 15305
// if Sophia then
15287: LD_EXP 31
15291: IFFALSE 15305
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
15293: LD_EXP 31
15297: PPUSH
15298: LD_STRING 04_1_Sophia_L
15300: PPUSH
15301: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
15305: LD_EXP 30
15309: PUSH
15310: LD_EXP 30
15314: PUSH
15315: LD_EXP 39
15319: IN
15320: NOT
15321: AND
15322: IFFALSE 15338
// SaveCharacters ( Kaia , 04_1_Kaia ) else
15324: LD_EXP 30
15328: PPUSH
15329: LD_STRING 04_1_Kaia
15331: PPUSH
15332: CALL_OW 38
15336: GO 15356
// if Kaia then
15338: LD_EXP 30
15342: IFFALSE 15356
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
15344: LD_EXP 30
15348: PPUSH
15349: LD_STRING 04_1_Kaia_L
15351: PPUSH
15352: CALL_OW 38
// if Givi then
15356: LD_EXP 26
15360: IFFALSE 15374
// SaveCharacters ( Givi , 04_1_Givi ) ;
15362: LD_EXP 26
15366: PPUSH
15367: LD_STRING 04_1_Givi
15369: PPUSH
15370: CALL_OW 38
// if Mike then
15374: LD_EXP 27
15378: IFFALSE 15392
// SaveCharacters ( Mike , 04_1_Mike ) ;
15380: LD_EXP 27
15384: PPUSH
15385: LD_STRING 04_1_Mike
15387: PPUSH
15388: CALL_OW 38
// if Markov then
15392: LD_EXP 32
15396: IFFALSE 15410
// SaveCharacters ( Markov , 04_1_Markov ) ;
15398: LD_EXP 32
15402: PPUSH
15403: LD_STRING 04_1_Markov
15405: PPUSH
15406: CALL_OW 38
// if Kurt then
15410: LD_EXP 34
15414: IFFALSE 15435
// begin SaveCharacters ( Kurt , 04_1_Kurt ) ;
15416: LD_EXP 34
15420: PPUSH
15421: LD_STRING 04_1_Kurt
15423: PPUSH
15424: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KURT) ) ;
15428: LD_STRING enableBioCharacter(BIO_KURT)
15430: PPUSH
15431: CALL_OW 559
// end ; if heikeSecondSquad diff aviradzeSquad then
15435: LD_EXP 37
15439: PUSH
15440: LD_EXP 39
15444: DIFF
15445: IFFALSE 15465
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
15447: LD_EXP 37
15451: PUSH
15452: LD_EXP 39
15456: DIFF
15457: PPUSH
15458: LD_STRING 04_1_others
15460: PPUSH
15461: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
15465: LD_EXP 39
15469: PUSH
15470: LD_EXP 37
15474: AND
15475: IFFALSE 15560
// begin tmp := [ ] ;
15477: LD_ADDR_VAR 0 2
15481: PUSH
15482: EMPTY
15483: ST_TO_ADDR
// for i in heikeSecondSquad do
15484: LD_ADDR_VAR 0 1
15488: PUSH
15489: LD_EXP 37
15493: PUSH
15494: FOR_IN
15495: IFFALSE 15540
// if i in aviradzeSquad then
15497: LD_VAR 0 1
15501: PUSH
15502: LD_EXP 39
15506: IN
15507: IFFALSE 15538
// tmp := Replace ( tmp , tmp + 1 , i ) ;
15509: LD_ADDR_VAR 0 2
15513: PUSH
15514: LD_VAR 0 2
15518: PPUSH
15519: LD_VAR 0 2
15523: PUSH
15524: LD_INT 1
15526: PLUS
15527: PPUSH
15528: LD_VAR 0 1
15532: PPUSH
15533: CALL_OW 1
15537: ST_TO_ADDR
15538: GO 15494
15540: POP
15541: POP
// if tmp then
15542: LD_VAR 0 2
15546: IFFALSE 15560
// SaveCharacters ( tmp , 04_1_others_L ) ;
15548: LD_VAR 0 2
15552: PPUSH
15553: LD_STRING 04_1_others_L
15555: PPUSH
15556: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
15560: LD_ADDR_VAR 0 2
15564: PUSH
15565: LD_INT 22
15567: PUSH
15568: LD_INT 2
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: PUSH
15575: LD_INT 23
15577: PUSH
15578: LD_INT 0
15580: PUSH
15581: EMPTY
15582: LIST
15583: LIST
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: PPUSH
15589: CALL_OW 69
15593: ST_TO_ADDR
// if tmp then
15594: LD_VAR 0 2
15598: IFFALSE 15612
// SaveCharacters ( tmp , 04_1_apes ) ;
15600: LD_VAR 0 2
15604: PPUSH
15605: LD_STRING 04_1_apes
15607: PPUSH
15608: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
15612: LD_ADDR_VAR 0 2
15616: PUSH
15617: LD_INT 17
15619: PPUSH
15620: LD_INT 21
15622: PUSH
15623: LD_INT 2
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: PPUSH
15630: CALL_OW 70
15634: ST_TO_ADDR
// if tmp then
15635: LD_VAR 0 2
15639: IFFALSE 15933
// begin tmp2 := [ ] ;
15641: LD_ADDR_VAR 0 3
15645: PUSH
15646: EMPTY
15647: ST_TO_ADDR
// for i in tmp do
15648: LD_ADDR_VAR 0 1
15652: PUSH
15653: LD_VAR 0 2
15657: PUSH
15658: FOR_IN
15659: IFFALSE 15919
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
15661: LD_VAR 0 1
15665: PPUSH
15666: CALL_OW 264
15670: PUSH
15671: LD_INT 32
15673: PUSH
15674: LD_INT 12
15676: PUSH
15677: LD_INT 51
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: LIST
15684: IN
15685: IFFALSE 15822
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
15687: LD_ADDR_VAR 0 4
15691: PUSH
15692: LD_VAR 0 1
15696: PPUSH
15697: LD_INT 1
15699: PPUSH
15700: CALL_OW 289
15704: PUSH
15705: LD_VAR 0 1
15709: PPUSH
15710: LD_INT 2
15712: PPUSH
15713: CALL_OW 289
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
15722: LD_ADDR_VAR 0 3
15726: PUSH
15727: LD_VAR 0 3
15731: PPUSH
15732: LD_VAR 0 3
15736: PUSH
15737: LD_INT 1
15739: PLUS
15740: PPUSH
15741: LD_VAR 0 1
15745: PPUSH
15746: CALL_OW 265
15750: PUSH
15751: LD_VAR 0 1
15755: PPUSH
15756: CALL_OW 262
15760: PUSH
15761: LD_VAR 0 1
15765: PPUSH
15766: CALL_OW 263
15770: PUSH
15771: LD_VAR 0 1
15775: PPUSH
15776: CALL_OW 264
15780: PUSH
15781: LD_VAR 0 1
15785: PPUSH
15786: CALL_OW 248
15790: PUSH
15791: LD_VAR 0 1
15795: PPUSH
15796: CALL_OW 256
15800: PUSH
15801: LD_VAR 0 4
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: PPUSH
15815: CALL_OW 1
15819: ST_TO_ADDR
// end else
15820: GO 15917
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
15822: LD_ADDR_VAR 0 3
15826: PUSH
15827: LD_VAR 0 3
15831: PPUSH
15832: LD_VAR 0 3
15836: PUSH
15837: LD_INT 1
15839: PLUS
15840: PPUSH
15841: LD_VAR 0 1
15845: PPUSH
15846: CALL_OW 265
15850: PUSH
15851: LD_VAR 0 1
15855: PPUSH
15856: CALL_OW 262
15860: PUSH
15861: LD_VAR 0 1
15865: PPUSH
15866: CALL_OW 263
15870: PUSH
15871: LD_VAR 0 1
15875: PPUSH
15876: CALL_OW 264
15880: PUSH
15881: LD_VAR 0 1
15885: PPUSH
15886: CALL_OW 248
15890: PUSH
15891: LD_VAR 0 1
15895: PPUSH
15896: CALL_OW 256
15900: PUSH
15901: EMPTY
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: PPUSH
15912: CALL_OW 1
15916: ST_TO_ADDR
15917: GO 15658
15919: POP
15920: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
15921: LD_VAR 0 3
15925: PPUSH
15926: LD_STRING 04_1_Vehicles
15928: PPUSH
15929: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
15933: LD_EXP 21
15937: PPUSH
15938: LD_STRING 04_1_RuLabCaptured
15940: PPUSH
15941: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
15945: LD_EXP 19
15949: PPUSH
15950: LD_STRING 04_1_EscapeCounter
15952: PPUSH
15953: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
15957: LD_EXP 15
15961: PPUSH
15962: LD_STRING 04_1_BaseHill
15964: PPUSH
15965: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
15969: LD_OWVAR 1
15973: PPUSH
15974: LD_STRING 04_1_Time
15976: PPUSH
15977: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
15981: LD_EXP 14
15985: PPUSH
15986: LD_STRING 04_1_DeadCounter
15988: PPUSH
15989: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
15993: LD_EXP 24
15997: PUSH
15998: LD_INT 112
16000: PPUSH
16001: CALL_OW 255
16005: MUL
16006: PUSH
16007: LD_INT 2
16009: EQUAL
16010: PPUSH
16011: LD_STRING 04_1_KaganCaptured
16013: PPUSH
16014: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
16018: LD_INT 22
16020: PUSH
16021: LD_INT 2
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: PUSH
16028: LD_INT 34
16030: PUSH
16031: LD_INT 26
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PPUSH
16042: CALL_OW 69
16046: PUSH
16047: LD_INT 0
16049: PLUS
16050: PPUSH
16051: LD_STRING 04_1_Flamethrower
16053: PPUSH
16054: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16058: LD_INT 1
16060: PPUSH
16061: LD_STRING __x1\04_cont2
16063: PPUSH
16064: CALL_OW 340
// end ; end_of_file
16068: PPOPN 4
16070: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16071: LD_VAR 0 1
16075: PPUSH
16076: CALL_OW 266
16080: PUSH
16081: LD_INT 0
16083: EQUAL
16084: PUSH
16085: LD_VAR 0 1
16089: PPUSH
16090: CALL_OW 255
16094: PUSH
16095: LD_INT 2
16097: EQUAL
16098: AND
16099: IFFALSE 16109
// baseConstructed := true ;
16101: LD_ADDR_EXP 3
16105: PUSH
16106: LD_INT 1
16108: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16109: LD_VAR 0 1
16113: PPUSH
16114: CALL_OW 266
16118: PUSH
16119: LD_INT 6
16121: EQUAL
16122: PUSH
16123: LD_VAR 0 1
16127: PPUSH
16128: CALL_OW 255
16132: PUSH
16133: LD_INT 2
16135: EQUAL
16136: AND
16137: IFFALSE 16147
// labConstructed := true ;
16139: LD_ADDR_EXP 4
16143: PUSH
16144: LD_INT 1
16146: ST_TO_ADDR
// end ;
16147: PPOPN 1
16149: END
// on UnitDestroyed ( un ) do begin if un = Heike then
16150: LD_VAR 0 1
16154: PUSH
16155: LD_EXP 25
16159: EQUAL
16160: IFFALSE 16169
// YouLost ( Heike ) ;
16162: LD_STRING Heike
16164: PPUSH
16165: CALL_OW 104
// if un = Omar then
16169: LD_VAR 0 1
16173: PUSH
16174: LD_EXP 33
16178: EQUAL
16179: IFFALSE 16188
// YouLost ( Omar ) ;
16181: LD_STRING Omar
16183: PPUSH
16184: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
16188: LD_VAR 0 1
16192: PUSH
16193: LD_INT 22
16195: PUSH
16196: LD_INT 2
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: PUSH
16203: LD_INT 23
16205: PUSH
16206: LD_INT 2
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PUSH
16213: LD_INT 21
16215: PUSH
16216: LD_INT 1
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: LIST
16227: PPUSH
16228: CALL_OW 69
16232: IN
16233: IFFALSE 16249
// loseCounter := loseCounter + 1 ;
16235: LD_ADDR_EXP 14
16239: PUSH
16240: LD_EXP 14
16244: PUSH
16245: LD_INT 1
16247: PLUS
16248: ST_TO_ADDR
// if un = omikron then
16249: LD_VAR 0 1
16253: PUSH
16254: LD_INT 64
16256: EQUAL
16257: IFFALSE 16267
// omicronFall := true ;
16259: LD_ADDR_EXP 13
16263: PUSH
16264: LD_INT 1
16266: ST_TO_ADDR
// if un = kirov then
16267: LD_VAR 0 1
16271: PUSH
16272: LD_INT 71
16274: EQUAL
16275: IFFALSE 16292
// begin ChangeMissionObjectives ( KirovDone ) ;
16277: LD_STRING KirovDone
16279: PPUSH
16280: CALL_OW 337
// kirovDestroyed := true ;
16284: LD_ADDR_EXP 16
16288: PUSH
16289: LD_INT 1
16291: ST_TO_ADDR
// end ; if un = beria then
16292: LD_VAR 0 1
16296: PUSH
16297: LD_INT 106
16299: EQUAL
16300: IFFALSE 16317
// begin ChangeMissionObjectives ( BeriaDone ) ;
16302: LD_STRING BeriaDone
16304: PPUSH
16305: CALL_OW 337
// beriaDestroyed := true ;
16309: LD_ADDR_EXP 17
16313: PUSH
16314: LD_INT 1
16316: ST_TO_ADDR
// end ; if un = kagan then
16317: LD_VAR 0 1
16321: PUSH
16322: LD_INT 112
16324: EQUAL
16325: IFFALSE 16335
// kaganDestroyed := true ;
16327: LD_ADDR_EXP 18
16331: PUSH
16332: LD_INT 1
16334: ST_TO_ADDR
// if un in russianPatrol then
16335: LD_VAR 0 1
16339: PUSH
16340: LD_EXP 47
16344: IN
16345: IFFALSE 16363
// russianPatrol := russianPatrol diff un ;
16347: LD_ADDR_EXP 47
16351: PUSH
16352: LD_EXP 47
16356: PUSH
16357: LD_VAR 0 1
16361: DIFF
16362: ST_TO_ADDR
// if un in russianOmicronAttackers then
16363: LD_VAR 0 1
16367: PUSH
16368: LD_EXP 48
16372: IN
16373: IFFALSE 16391
// russianOmicronAttackers := russianOmicronAttackers diff un ;
16375: LD_ADDR_EXP 48
16379: PUSH
16380: LD_EXP 48
16384: PUSH
16385: LD_VAR 0 1
16389: DIFF
16390: ST_TO_ADDR
// end ;
16391: PPOPN 1
16393: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
16394: LD_INT 0
16396: PPUSH
16397: PPUSH
16398: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
16399: LD_VAR 0 1
16403: PUSH
16404: LD_INT 2
16406: PUSH
16407: LD_INT 22
16409: PUSH
16410: LD_INT 3
16412: PUSH
16413: EMPTY
16414: LIST
16415: LIST
16416: PUSH
16417: LD_INT 22
16419: PUSH
16420: LD_INT 4
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: PUSH
16427: LD_INT 22
16429: PUSH
16430: LD_INT 6
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: PUSH
16443: LD_INT 30
16445: PUSH
16446: LD_INT 32
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: PPUSH
16457: CALL_OW 69
16461: IN
16462: IFFALSE 16635
// begin sol := UnitsInside ( un ) ;
16464: LD_ADDR_VAR 0 3
16468: PUSH
16469: LD_VAR 0 1
16473: PPUSH
16474: CALL_OW 313
16478: ST_TO_ADDR
// if not sol then
16479: LD_VAR 0 3
16483: NOT
16484: IFFALSE 16488
// exit ;
16486: GO 16635
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16488: LD_ADDR_VAR 0 4
16492: PUSH
16493: LD_INT 22
16495: PUSH
16496: LD_VAR 0 1
16500: PPUSH
16501: CALL_OW 255
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: LD_INT 2
16512: PUSH
16513: LD_INT 30
16515: PUSH
16516: LD_INT 4
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: LD_INT 30
16525: PUSH
16526: LD_INT 5
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: LIST
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PPUSH
16542: CALL_OW 69
16546: ST_TO_ADDR
// if not nearestBarracks then
16547: LD_VAR 0 4
16551: NOT
16552: IFFALSE 16556
// exit ;
16554: GO 16635
// for i in nearestBarracks do
16556: LD_ADDR_VAR 0 2
16560: PUSH
16561: LD_VAR 0 4
16565: PUSH
16566: FOR_IN
16567: IFFALSE 16602
// if UnitsInside ( i ) = 6 then
16569: LD_VAR 0 2
16573: PPUSH
16574: CALL_OW 313
16578: PUSH
16579: LD_INT 6
16581: EQUAL
16582: IFFALSE 16600
// nearestBarracks := nearestBarracks diff i ;
16584: LD_ADDR_VAR 0 4
16588: PUSH
16589: LD_VAR 0 4
16593: PUSH
16594: LD_VAR 0 2
16598: DIFF
16599: ST_TO_ADDR
16600: GO 16566
16602: POP
16603: POP
// if not nearestBarracks then
16604: LD_VAR 0 4
16608: NOT
16609: IFFALSE 16613
// exit ;
16611: GO 16635
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
16613: LD_VAR 0 3
16617: PUSH
16618: LD_INT 1
16620: ARRAY
16621: PPUSH
16622: LD_VAR 0 4
16626: PUSH
16627: LD_INT 1
16629: ARRAY
16630: PPUSH
16631: CALL_OW 120
// end ; end ;
16635: PPOPN 4
16637: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
16638: LD_INT 0
16640: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
16641: LD_EXP 8
16645: NOT
16646: PUSH
16647: LD_EXP 5
16651: NOT
16652: OR
16653: IFFALSE 16657
// exit ;
16655: GO 16725
// for i in camAreas do
16657: LD_ADDR_VAR 0 5
16661: PUSH
16662: LD_EXP 8
16666: PUSH
16667: FOR_IN
16668: IFFALSE 16723
// if InArea ( x , y , i ) then
16670: LD_VAR 0 3
16674: PPUSH
16675: LD_VAR 0 4
16679: PPUSH
16680: LD_VAR 0 5
16684: PPUSH
16685: CALL_OW 309
16689: IFFALSE 16721
// begin SetAreaMapShow ( i , 0 ) ;
16691: LD_VAR 0 5
16695: PPUSH
16696: LD_INT 0
16698: PPUSH
16699: CALL_OW 424
// camAreas := camAreas diff i ;
16703: LD_ADDR_EXP 8
16707: PUSH
16708: LD_EXP 8
16712: PUSH
16713: LD_VAR 0 5
16717: DIFF
16718: ST_TO_ADDR
// break ;
16719: GO 16723
// end ;
16721: GO 16667
16723: POP
16724: POP
// end ;
16725: PPOPN 5
16727: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
16728: LD_VAR 0 1
16732: PUSH
16733: LD_INT 2
16735: EQUAL
16736: PUSH
16737: LD_VAR 0 2
16741: PUSH
16742: LD_INT 5
16744: PUSH
16745: LD_INT 8
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: IN
16752: AND
16753: IFFALSE 16762
// YouLost ( Ally ) ;
16755: LD_STRING Ally
16757: PPUSH
16758: CALL_OW 104
// end ;
16762: PPOPN 2
16764: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
16765: LD_VAR 0 1
16769: PUSH
16770: LD_EXP 30
16774: EQUAL
16775: PUSH
16776: LD_VAR 0 2
16780: PUSH
16781: LD_INT 3
16783: PUSH
16784: LD_INT 6
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: IN
16791: AND
16792: IFFALSE 16823
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
16794: LD_ADDR_EXP 23
16798: PUSH
16799: LD_VAR 0 1
16803: PPUSH
16804: CALL_OW 250
16808: PUSH
16809: LD_VAR 0 1
16813: PPUSH
16814: CALL_OW 251
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: ST_TO_ADDR
// end ; end_of_file
16823: PPOPN 3
16825: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 , 10 ] [ Difficulty ] do
16826: LD_EXP 11
16830: NOT
16831: PUSH
16832: LD_INT 12
16834: PPUSH
16835: LD_INT 1
16837: PPUSH
16838: CALL_OW 287
16842: PUSH
16843: LD_INT 20
16845: PUSH
16846: LD_INT 16
16848: PUSH
16849: LD_INT 12
16851: PUSH
16852: LD_INT 10
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: PUSH
16861: LD_OWVAR 67
16865: ARRAY
16866: LESS
16867: AND
16868: IFFALSE 16895
16870: GO 16872
16872: DISABLE
// begin enable ;
16873: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
16874: LD_INT 1
16876: PPUSH
16877: LD_INT 5
16879: PPUSH
16880: CALL_OW 12
16884: PPUSH
16885: LD_INT 12
16887: PPUSH
16888: LD_INT 1
16890: PPUSH
16891: CALL_OW 55
// end ; end_of_file
16895: END
// every 0 0$1 trigger omarCountdown do
16896: LD_EXP 22
16900: IFFALSE 16952
16902: GO 16904
16904: DISABLE
// begin enable ;
16905: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
16906: LD_ADDR_OWVAR 47
16910: PUSH
16911: LD_STRING #X104-1
16913: PUSH
16914: LD_EXP 22
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
16923: LD_ADDR_EXP 22
16927: PUSH
16928: LD_EXP 22
16932: PUSH
16933: LD_INT 35
16935: MINUS
16936: ST_TO_ADDR
// if not omarCountdown then
16937: LD_EXP 22
16941: NOT
16942: IFFALSE 16952
// display_strings :=  ;
16944: LD_ADDR_OWVAR 47
16948: PUSH
16949: LD_STRING 
16951: ST_TO_ADDR
// end ; end_of_file
16952: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16953: LD_INT 0
16955: PPUSH
// if p2 = 100 then
16956: LD_VAR 0 2
16960: PUSH
16961: LD_INT 100
16963: EQUAL
16964: IFFALSE 17913
// begin if not StreamModeActive then
16966: LD_EXP 52
16970: NOT
16971: IFFALSE 16981
// StreamModeActive := true ;
16973: LD_ADDR_EXP 52
16977: PUSH
16978: LD_INT 1
16980: ST_TO_ADDR
// if p3 = 0 then
16981: LD_VAR 0 3
16985: PUSH
16986: LD_INT 0
16988: EQUAL
16989: IFFALSE 16995
// InitStreamMode ;
16991: CALL 18073 0 0
// if p3 = 1 then
16995: LD_VAR 0 3
16999: PUSH
17000: LD_INT 1
17002: EQUAL
17003: IFFALSE 17013
// sRocket := true ;
17005: LD_ADDR_EXP 57
17009: PUSH
17010: LD_INT 1
17012: ST_TO_ADDR
// if p3 = 2 then
17013: LD_VAR 0 3
17017: PUSH
17018: LD_INT 2
17020: EQUAL
17021: IFFALSE 17031
// sSpeed := true ;
17023: LD_ADDR_EXP 56
17027: PUSH
17028: LD_INT 1
17030: ST_TO_ADDR
// if p3 = 3 then
17031: LD_VAR 0 3
17035: PUSH
17036: LD_INT 3
17038: EQUAL
17039: IFFALSE 17049
// sEngine := true ;
17041: LD_ADDR_EXP 58
17045: PUSH
17046: LD_INT 1
17048: ST_TO_ADDR
// if p3 = 4 then
17049: LD_VAR 0 3
17053: PUSH
17054: LD_INT 4
17056: EQUAL
17057: IFFALSE 17067
// sSpec := true ;
17059: LD_ADDR_EXP 55
17063: PUSH
17064: LD_INT 1
17066: ST_TO_ADDR
// if p3 = 5 then
17067: LD_VAR 0 3
17071: PUSH
17072: LD_INT 5
17074: EQUAL
17075: IFFALSE 17085
// sLevel := true ;
17077: LD_ADDR_EXP 59
17081: PUSH
17082: LD_INT 1
17084: ST_TO_ADDR
// if p3 = 6 then
17085: LD_VAR 0 3
17089: PUSH
17090: LD_INT 6
17092: EQUAL
17093: IFFALSE 17103
// sArmoury := true ;
17095: LD_ADDR_EXP 60
17099: PUSH
17100: LD_INT 1
17102: ST_TO_ADDR
// if p3 = 7 then
17103: LD_VAR 0 3
17107: PUSH
17108: LD_INT 7
17110: EQUAL
17111: IFFALSE 17121
// sRadar := true ;
17113: LD_ADDR_EXP 61
17117: PUSH
17118: LD_INT 1
17120: ST_TO_ADDR
// if p3 = 8 then
17121: LD_VAR 0 3
17125: PUSH
17126: LD_INT 8
17128: EQUAL
17129: IFFALSE 17139
// sBunker := true ;
17131: LD_ADDR_EXP 62
17135: PUSH
17136: LD_INT 1
17138: ST_TO_ADDR
// if p3 = 9 then
17139: LD_VAR 0 3
17143: PUSH
17144: LD_INT 9
17146: EQUAL
17147: IFFALSE 17157
// sHack := true ;
17149: LD_ADDR_EXP 63
17153: PUSH
17154: LD_INT 1
17156: ST_TO_ADDR
// if p3 = 10 then
17157: LD_VAR 0 3
17161: PUSH
17162: LD_INT 10
17164: EQUAL
17165: IFFALSE 17175
// sFire := true ;
17167: LD_ADDR_EXP 64
17171: PUSH
17172: LD_INT 1
17174: ST_TO_ADDR
// if p3 = 11 then
17175: LD_VAR 0 3
17179: PUSH
17180: LD_INT 11
17182: EQUAL
17183: IFFALSE 17193
// sRefresh := true ;
17185: LD_ADDR_EXP 65
17189: PUSH
17190: LD_INT 1
17192: ST_TO_ADDR
// if p3 = 12 then
17193: LD_VAR 0 3
17197: PUSH
17198: LD_INT 12
17200: EQUAL
17201: IFFALSE 17211
// sExp := true ;
17203: LD_ADDR_EXP 66
17207: PUSH
17208: LD_INT 1
17210: ST_TO_ADDR
// if p3 = 13 then
17211: LD_VAR 0 3
17215: PUSH
17216: LD_INT 13
17218: EQUAL
17219: IFFALSE 17229
// sDepot := true ;
17221: LD_ADDR_EXP 67
17225: PUSH
17226: LD_INT 1
17228: ST_TO_ADDR
// if p3 = 14 then
17229: LD_VAR 0 3
17233: PUSH
17234: LD_INT 14
17236: EQUAL
17237: IFFALSE 17247
// sFlag := true ;
17239: LD_ADDR_EXP 68
17243: PUSH
17244: LD_INT 1
17246: ST_TO_ADDR
// if p3 = 15 then
17247: LD_VAR 0 3
17251: PUSH
17252: LD_INT 15
17254: EQUAL
17255: IFFALSE 17265
// sKamikadze := true ;
17257: LD_ADDR_EXP 76
17261: PUSH
17262: LD_INT 1
17264: ST_TO_ADDR
// if p3 = 16 then
17265: LD_VAR 0 3
17269: PUSH
17270: LD_INT 16
17272: EQUAL
17273: IFFALSE 17283
// sTroll := true ;
17275: LD_ADDR_EXP 77
17279: PUSH
17280: LD_INT 1
17282: ST_TO_ADDR
// if p3 = 17 then
17283: LD_VAR 0 3
17287: PUSH
17288: LD_INT 17
17290: EQUAL
17291: IFFALSE 17301
// sSlow := true ;
17293: LD_ADDR_EXP 78
17297: PUSH
17298: LD_INT 1
17300: ST_TO_ADDR
// if p3 = 18 then
17301: LD_VAR 0 3
17305: PUSH
17306: LD_INT 18
17308: EQUAL
17309: IFFALSE 17319
// sLack := true ;
17311: LD_ADDR_EXP 79
17315: PUSH
17316: LD_INT 1
17318: ST_TO_ADDR
// if p3 = 19 then
17319: LD_VAR 0 3
17323: PUSH
17324: LD_INT 19
17326: EQUAL
17327: IFFALSE 17337
// sTank := true ;
17329: LD_ADDR_EXP 81
17333: PUSH
17334: LD_INT 1
17336: ST_TO_ADDR
// if p3 = 20 then
17337: LD_VAR 0 3
17341: PUSH
17342: LD_INT 20
17344: EQUAL
17345: IFFALSE 17355
// sRemote := true ;
17347: LD_ADDR_EXP 82
17351: PUSH
17352: LD_INT 1
17354: ST_TO_ADDR
// if p3 = 21 then
17355: LD_VAR 0 3
17359: PUSH
17360: LD_INT 21
17362: EQUAL
17363: IFFALSE 17373
// sPowell := true ;
17365: LD_ADDR_EXP 83
17369: PUSH
17370: LD_INT 1
17372: ST_TO_ADDR
// if p3 = 22 then
17373: LD_VAR 0 3
17377: PUSH
17378: LD_INT 22
17380: EQUAL
17381: IFFALSE 17391
// sTeleport := true ;
17383: LD_ADDR_EXP 86
17387: PUSH
17388: LD_INT 1
17390: ST_TO_ADDR
// if p3 = 23 then
17391: LD_VAR 0 3
17395: PUSH
17396: LD_INT 23
17398: EQUAL
17399: IFFALSE 17409
// sOilTower := true ;
17401: LD_ADDR_EXP 88
17405: PUSH
17406: LD_INT 1
17408: ST_TO_ADDR
// if p3 = 24 then
17409: LD_VAR 0 3
17413: PUSH
17414: LD_INT 24
17416: EQUAL
17417: IFFALSE 17427
// sShovel := true ;
17419: LD_ADDR_EXP 89
17423: PUSH
17424: LD_INT 1
17426: ST_TO_ADDR
// if p3 = 25 then
17427: LD_VAR 0 3
17431: PUSH
17432: LD_INT 25
17434: EQUAL
17435: IFFALSE 17445
// sSheik := true ;
17437: LD_ADDR_EXP 90
17441: PUSH
17442: LD_INT 1
17444: ST_TO_ADDR
// if p3 = 26 then
17445: LD_VAR 0 3
17449: PUSH
17450: LD_INT 26
17452: EQUAL
17453: IFFALSE 17463
// sEarthquake := true ;
17455: LD_ADDR_EXP 92
17459: PUSH
17460: LD_INT 1
17462: ST_TO_ADDR
// if p3 = 27 then
17463: LD_VAR 0 3
17467: PUSH
17468: LD_INT 27
17470: EQUAL
17471: IFFALSE 17481
// sAI := true ;
17473: LD_ADDR_EXP 93
17477: PUSH
17478: LD_INT 1
17480: ST_TO_ADDR
// if p3 = 28 then
17481: LD_VAR 0 3
17485: PUSH
17486: LD_INT 28
17488: EQUAL
17489: IFFALSE 17499
// sCargo := true ;
17491: LD_ADDR_EXP 96
17495: PUSH
17496: LD_INT 1
17498: ST_TO_ADDR
// if p3 = 29 then
17499: LD_VAR 0 3
17503: PUSH
17504: LD_INT 29
17506: EQUAL
17507: IFFALSE 17517
// sDLaser := true ;
17509: LD_ADDR_EXP 97
17513: PUSH
17514: LD_INT 1
17516: ST_TO_ADDR
// if p3 = 30 then
17517: LD_VAR 0 3
17521: PUSH
17522: LD_INT 30
17524: EQUAL
17525: IFFALSE 17535
// sExchange := true ;
17527: LD_ADDR_EXP 98
17531: PUSH
17532: LD_INT 1
17534: ST_TO_ADDR
// if p3 = 31 then
17535: LD_VAR 0 3
17539: PUSH
17540: LD_INT 31
17542: EQUAL
17543: IFFALSE 17553
// sFac := true ;
17545: LD_ADDR_EXP 99
17549: PUSH
17550: LD_INT 1
17552: ST_TO_ADDR
// if p3 = 32 then
17553: LD_VAR 0 3
17557: PUSH
17558: LD_INT 32
17560: EQUAL
17561: IFFALSE 17571
// sPower := true ;
17563: LD_ADDR_EXP 100
17567: PUSH
17568: LD_INT 1
17570: ST_TO_ADDR
// if p3 = 33 then
17571: LD_VAR 0 3
17575: PUSH
17576: LD_INT 33
17578: EQUAL
17579: IFFALSE 17589
// sRandom := true ;
17581: LD_ADDR_EXP 101
17585: PUSH
17586: LD_INT 1
17588: ST_TO_ADDR
// if p3 = 34 then
17589: LD_VAR 0 3
17593: PUSH
17594: LD_INT 34
17596: EQUAL
17597: IFFALSE 17607
// sShield := true ;
17599: LD_ADDR_EXP 102
17603: PUSH
17604: LD_INT 1
17606: ST_TO_ADDR
// if p3 = 35 then
17607: LD_VAR 0 3
17611: PUSH
17612: LD_INT 35
17614: EQUAL
17615: IFFALSE 17625
// sTime := true ;
17617: LD_ADDR_EXP 103
17621: PUSH
17622: LD_INT 1
17624: ST_TO_ADDR
// if p3 = 36 then
17625: LD_VAR 0 3
17629: PUSH
17630: LD_INT 36
17632: EQUAL
17633: IFFALSE 17643
// sTools := true ;
17635: LD_ADDR_EXP 104
17639: PUSH
17640: LD_INT 1
17642: ST_TO_ADDR
// if p3 = 101 then
17643: LD_VAR 0 3
17647: PUSH
17648: LD_INT 101
17650: EQUAL
17651: IFFALSE 17661
// sSold := true ;
17653: LD_ADDR_EXP 69
17657: PUSH
17658: LD_INT 1
17660: ST_TO_ADDR
// if p3 = 102 then
17661: LD_VAR 0 3
17665: PUSH
17666: LD_INT 102
17668: EQUAL
17669: IFFALSE 17679
// sDiff := true ;
17671: LD_ADDR_EXP 70
17675: PUSH
17676: LD_INT 1
17678: ST_TO_ADDR
// if p3 = 103 then
17679: LD_VAR 0 3
17683: PUSH
17684: LD_INT 103
17686: EQUAL
17687: IFFALSE 17697
// sFog := true ;
17689: LD_ADDR_EXP 73
17693: PUSH
17694: LD_INT 1
17696: ST_TO_ADDR
// if p3 = 104 then
17697: LD_VAR 0 3
17701: PUSH
17702: LD_INT 104
17704: EQUAL
17705: IFFALSE 17715
// sReset := true ;
17707: LD_ADDR_EXP 74
17711: PUSH
17712: LD_INT 1
17714: ST_TO_ADDR
// if p3 = 105 then
17715: LD_VAR 0 3
17719: PUSH
17720: LD_INT 105
17722: EQUAL
17723: IFFALSE 17733
// sSun := true ;
17725: LD_ADDR_EXP 75
17729: PUSH
17730: LD_INT 1
17732: ST_TO_ADDR
// if p3 = 106 then
17733: LD_VAR 0 3
17737: PUSH
17738: LD_INT 106
17740: EQUAL
17741: IFFALSE 17751
// sTiger := true ;
17743: LD_ADDR_EXP 71
17747: PUSH
17748: LD_INT 1
17750: ST_TO_ADDR
// if p3 = 107 then
17751: LD_VAR 0 3
17755: PUSH
17756: LD_INT 107
17758: EQUAL
17759: IFFALSE 17769
// sBomb := true ;
17761: LD_ADDR_EXP 72
17765: PUSH
17766: LD_INT 1
17768: ST_TO_ADDR
// if p3 = 108 then
17769: LD_VAR 0 3
17773: PUSH
17774: LD_INT 108
17776: EQUAL
17777: IFFALSE 17787
// sWound := true ;
17779: LD_ADDR_EXP 80
17783: PUSH
17784: LD_INT 1
17786: ST_TO_ADDR
// if p3 = 109 then
17787: LD_VAR 0 3
17791: PUSH
17792: LD_INT 109
17794: EQUAL
17795: IFFALSE 17805
// sBetray := true ;
17797: LD_ADDR_EXP 84
17801: PUSH
17802: LD_INT 1
17804: ST_TO_ADDR
// if p3 = 110 then
17805: LD_VAR 0 3
17809: PUSH
17810: LD_INT 110
17812: EQUAL
17813: IFFALSE 17823
// sContamin := true ;
17815: LD_ADDR_EXP 85
17819: PUSH
17820: LD_INT 1
17822: ST_TO_ADDR
// if p3 = 111 then
17823: LD_VAR 0 3
17827: PUSH
17828: LD_INT 111
17830: EQUAL
17831: IFFALSE 17841
// sOil := true ;
17833: LD_ADDR_EXP 87
17837: PUSH
17838: LD_INT 1
17840: ST_TO_ADDR
// if p3 = 112 then
17841: LD_VAR 0 3
17845: PUSH
17846: LD_INT 112
17848: EQUAL
17849: IFFALSE 17859
// sStu := true ;
17851: LD_ADDR_EXP 91
17855: PUSH
17856: LD_INT 1
17858: ST_TO_ADDR
// if p3 = 113 then
17859: LD_VAR 0 3
17863: PUSH
17864: LD_INT 113
17866: EQUAL
17867: IFFALSE 17877
// sBazooka := true ;
17869: LD_ADDR_EXP 94
17873: PUSH
17874: LD_INT 1
17876: ST_TO_ADDR
// if p3 = 114 then
17877: LD_VAR 0 3
17881: PUSH
17882: LD_INT 114
17884: EQUAL
17885: IFFALSE 17895
// sMortar := true ;
17887: LD_ADDR_EXP 95
17891: PUSH
17892: LD_INT 1
17894: ST_TO_ADDR
// if p3 = 115 then
17895: LD_VAR 0 3
17899: PUSH
17900: LD_INT 115
17902: EQUAL
17903: IFFALSE 17913
// sRanger := true ;
17905: LD_ADDR_EXP 105
17909: PUSH
17910: LD_INT 1
17912: ST_TO_ADDR
// end ; if p2 = 101 then
17913: LD_VAR 0 2
17917: PUSH
17918: LD_INT 101
17920: EQUAL
17921: IFFALSE 18049
// begin case p3 of 1 :
17923: LD_VAR 0 3
17927: PUSH
17928: LD_INT 1
17930: DOUBLE
17931: EQUAL
17932: IFTRUE 17936
17934: GO 17943
17936: POP
// hHackUnlimitedResources ; 2 :
17937: CALL 29086 0 0
17941: GO 18049
17943: LD_INT 2
17945: DOUBLE
17946: EQUAL
17947: IFTRUE 17951
17949: GO 17958
17951: POP
// hHackSetLevel10 ; 3 :
17952: CALL 29219 0 0
17956: GO 18049
17958: LD_INT 3
17960: DOUBLE
17961: EQUAL
17962: IFTRUE 17966
17964: GO 17973
17966: POP
// hHackSetLevel10YourUnits ; 4 :
17967: CALL 29304 0 0
17971: GO 18049
17973: LD_INT 4
17975: DOUBLE
17976: EQUAL
17977: IFTRUE 17981
17979: GO 17988
17981: POP
// hHackInvincible ; 5 :
17982: CALL 29752 0 0
17986: GO 18049
17988: LD_INT 5
17990: DOUBLE
17991: EQUAL
17992: IFTRUE 17996
17994: GO 18003
17996: POP
// hHackInvisible ; 6 :
17997: CALL 29863 0 0
18001: GO 18049
18003: LD_INT 6
18005: DOUBLE
18006: EQUAL
18007: IFTRUE 18011
18009: GO 18018
18011: POP
// hHackChangeYourSide ; 7 :
18012: CALL 29920 0 0
18016: GO 18049
18018: LD_INT 7
18020: DOUBLE
18021: EQUAL
18022: IFTRUE 18026
18024: GO 18033
18026: POP
// hHackChangeUnitSide ; 8 :
18027: CALL 29962 0 0
18031: GO 18049
18033: LD_INT 8
18035: DOUBLE
18036: EQUAL
18037: IFTRUE 18041
18039: GO 18048
18041: POP
// hHackFog ; end ;
18042: CALL 30063 0 0
18046: GO 18049
18048: POP
// end ; end ;
18049: LD_VAR 0 7
18053: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
18054: GO 18056
18056: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
18057: LD_STRING initStreamRollete();
18059: PPUSH
18060: CALL_OW 559
// InitStreamMode ;
18064: CALL 18073 0 0
// DefineStreamItems ( ) ;
18068: CALL 18513 0 0
// end ;
18072: END
// function InitStreamMode ; begin
18073: LD_INT 0
18075: PPUSH
// streamModeActive := false ;
18076: LD_ADDR_EXP 52
18080: PUSH
18081: LD_INT 0
18083: ST_TO_ADDR
// normalCounter := 36 ;
18084: LD_ADDR_EXP 53
18088: PUSH
18089: LD_INT 36
18091: ST_TO_ADDR
// hardcoreCounter := 16 ;
18092: LD_ADDR_EXP 54
18096: PUSH
18097: LD_INT 16
18099: ST_TO_ADDR
// sRocket := false ;
18100: LD_ADDR_EXP 57
18104: PUSH
18105: LD_INT 0
18107: ST_TO_ADDR
// sSpeed := false ;
18108: LD_ADDR_EXP 56
18112: PUSH
18113: LD_INT 0
18115: ST_TO_ADDR
// sEngine := false ;
18116: LD_ADDR_EXP 58
18120: PUSH
18121: LD_INT 0
18123: ST_TO_ADDR
// sSpec := false ;
18124: LD_ADDR_EXP 55
18128: PUSH
18129: LD_INT 0
18131: ST_TO_ADDR
// sLevel := false ;
18132: LD_ADDR_EXP 59
18136: PUSH
18137: LD_INT 0
18139: ST_TO_ADDR
// sArmoury := false ;
18140: LD_ADDR_EXP 60
18144: PUSH
18145: LD_INT 0
18147: ST_TO_ADDR
// sRadar := false ;
18148: LD_ADDR_EXP 61
18152: PUSH
18153: LD_INT 0
18155: ST_TO_ADDR
// sBunker := false ;
18156: LD_ADDR_EXP 62
18160: PUSH
18161: LD_INT 0
18163: ST_TO_ADDR
// sHack := false ;
18164: LD_ADDR_EXP 63
18168: PUSH
18169: LD_INT 0
18171: ST_TO_ADDR
// sFire := false ;
18172: LD_ADDR_EXP 64
18176: PUSH
18177: LD_INT 0
18179: ST_TO_ADDR
// sRefresh := false ;
18180: LD_ADDR_EXP 65
18184: PUSH
18185: LD_INT 0
18187: ST_TO_ADDR
// sExp := false ;
18188: LD_ADDR_EXP 66
18192: PUSH
18193: LD_INT 0
18195: ST_TO_ADDR
// sDepot := false ;
18196: LD_ADDR_EXP 67
18200: PUSH
18201: LD_INT 0
18203: ST_TO_ADDR
// sFlag := false ;
18204: LD_ADDR_EXP 68
18208: PUSH
18209: LD_INT 0
18211: ST_TO_ADDR
// sKamikadze := false ;
18212: LD_ADDR_EXP 76
18216: PUSH
18217: LD_INT 0
18219: ST_TO_ADDR
// sTroll := false ;
18220: LD_ADDR_EXP 77
18224: PUSH
18225: LD_INT 0
18227: ST_TO_ADDR
// sSlow := false ;
18228: LD_ADDR_EXP 78
18232: PUSH
18233: LD_INT 0
18235: ST_TO_ADDR
// sLack := false ;
18236: LD_ADDR_EXP 79
18240: PUSH
18241: LD_INT 0
18243: ST_TO_ADDR
// sTank := false ;
18244: LD_ADDR_EXP 81
18248: PUSH
18249: LD_INT 0
18251: ST_TO_ADDR
// sRemote := false ;
18252: LD_ADDR_EXP 82
18256: PUSH
18257: LD_INT 0
18259: ST_TO_ADDR
// sPowell := false ;
18260: LD_ADDR_EXP 83
18264: PUSH
18265: LD_INT 0
18267: ST_TO_ADDR
// sTeleport := false ;
18268: LD_ADDR_EXP 86
18272: PUSH
18273: LD_INT 0
18275: ST_TO_ADDR
// sOilTower := false ;
18276: LD_ADDR_EXP 88
18280: PUSH
18281: LD_INT 0
18283: ST_TO_ADDR
// sShovel := false ;
18284: LD_ADDR_EXP 89
18288: PUSH
18289: LD_INT 0
18291: ST_TO_ADDR
// sSheik := false ;
18292: LD_ADDR_EXP 90
18296: PUSH
18297: LD_INT 0
18299: ST_TO_ADDR
// sEarthquake := false ;
18300: LD_ADDR_EXP 92
18304: PUSH
18305: LD_INT 0
18307: ST_TO_ADDR
// sAI := false ;
18308: LD_ADDR_EXP 93
18312: PUSH
18313: LD_INT 0
18315: ST_TO_ADDR
// sCargo := false ;
18316: LD_ADDR_EXP 96
18320: PUSH
18321: LD_INT 0
18323: ST_TO_ADDR
// sDLaser := false ;
18324: LD_ADDR_EXP 97
18328: PUSH
18329: LD_INT 0
18331: ST_TO_ADDR
// sExchange := false ;
18332: LD_ADDR_EXP 98
18336: PUSH
18337: LD_INT 0
18339: ST_TO_ADDR
// sFac := false ;
18340: LD_ADDR_EXP 99
18344: PUSH
18345: LD_INT 0
18347: ST_TO_ADDR
// sPower := false ;
18348: LD_ADDR_EXP 100
18352: PUSH
18353: LD_INT 0
18355: ST_TO_ADDR
// sRandom := false ;
18356: LD_ADDR_EXP 101
18360: PUSH
18361: LD_INT 0
18363: ST_TO_ADDR
// sShield := false ;
18364: LD_ADDR_EXP 102
18368: PUSH
18369: LD_INT 0
18371: ST_TO_ADDR
// sTime := false ;
18372: LD_ADDR_EXP 103
18376: PUSH
18377: LD_INT 0
18379: ST_TO_ADDR
// sTools := false ;
18380: LD_ADDR_EXP 104
18384: PUSH
18385: LD_INT 0
18387: ST_TO_ADDR
// sSold := false ;
18388: LD_ADDR_EXP 69
18392: PUSH
18393: LD_INT 0
18395: ST_TO_ADDR
// sDiff := false ;
18396: LD_ADDR_EXP 70
18400: PUSH
18401: LD_INT 0
18403: ST_TO_ADDR
// sFog := false ;
18404: LD_ADDR_EXP 73
18408: PUSH
18409: LD_INT 0
18411: ST_TO_ADDR
// sReset := false ;
18412: LD_ADDR_EXP 74
18416: PUSH
18417: LD_INT 0
18419: ST_TO_ADDR
// sSun := false ;
18420: LD_ADDR_EXP 75
18424: PUSH
18425: LD_INT 0
18427: ST_TO_ADDR
// sTiger := false ;
18428: LD_ADDR_EXP 71
18432: PUSH
18433: LD_INT 0
18435: ST_TO_ADDR
// sBomb := false ;
18436: LD_ADDR_EXP 72
18440: PUSH
18441: LD_INT 0
18443: ST_TO_ADDR
// sWound := false ;
18444: LD_ADDR_EXP 80
18448: PUSH
18449: LD_INT 0
18451: ST_TO_ADDR
// sBetray := false ;
18452: LD_ADDR_EXP 84
18456: PUSH
18457: LD_INT 0
18459: ST_TO_ADDR
// sContamin := false ;
18460: LD_ADDR_EXP 85
18464: PUSH
18465: LD_INT 0
18467: ST_TO_ADDR
// sOil := false ;
18468: LD_ADDR_EXP 87
18472: PUSH
18473: LD_INT 0
18475: ST_TO_ADDR
// sStu := false ;
18476: LD_ADDR_EXP 91
18480: PUSH
18481: LD_INT 0
18483: ST_TO_ADDR
// sBazooka := false ;
18484: LD_ADDR_EXP 94
18488: PUSH
18489: LD_INT 0
18491: ST_TO_ADDR
// sMortar := false ;
18492: LD_ADDR_EXP 95
18496: PUSH
18497: LD_INT 0
18499: ST_TO_ADDR
// sRanger := false ;
18500: LD_ADDR_EXP 105
18504: PUSH
18505: LD_INT 0
18507: ST_TO_ADDR
// end ;
18508: LD_VAR 0 1
18512: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
18513: LD_INT 0
18515: PPUSH
18516: PPUSH
18517: PPUSH
18518: PPUSH
18519: PPUSH
// result := [ ] ;
18520: LD_ADDR_VAR 0 1
18524: PUSH
18525: EMPTY
18526: ST_TO_ADDR
// if campaign_id = 1 then
18527: LD_OWVAR 69
18531: PUSH
18532: LD_INT 1
18534: EQUAL
18535: IFFALSE 21473
// begin case mission_number of 1 :
18537: LD_OWVAR 70
18541: PUSH
18542: LD_INT 1
18544: DOUBLE
18545: EQUAL
18546: IFTRUE 18550
18548: GO 18614
18550: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
18551: LD_ADDR_VAR 0 1
18555: PUSH
18556: LD_INT 2
18558: PUSH
18559: LD_INT 4
18561: PUSH
18562: LD_INT 11
18564: PUSH
18565: LD_INT 12
18567: PUSH
18568: LD_INT 15
18570: PUSH
18571: LD_INT 16
18573: PUSH
18574: LD_INT 22
18576: PUSH
18577: LD_INT 23
18579: PUSH
18580: LD_INT 26
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 101
18596: PUSH
18597: LD_INT 102
18599: PUSH
18600: LD_INT 106
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: LIST
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: ST_TO_ADDR
18612: GO 21471
18614: LD_INT 2
18616: DOUBLE
18617: EQUAL
18618: IFTRUE 18622
18620: GO 18694
18622: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
18623: LD_ADDR_VAR 0 1
18627: PUSH
18628: LD_INT 2
18630: PUSH
18631: LD_INT 4
18633: PUSH
18634: LD_INT 11
18636: PUSH
18637: LD_INT 12
18639: PUSH
18640: LD_INT 15
18642: PUSH
18643: LD_INT 16
18645: PUSH
18646: LD_INT 22
18648: PUSH
18649: LD_INT 23
18651: PUSH
18652: LD_INT 26
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 101
18668: PUSH
18669: LD_INT 102
18671: PUSH
18672: LD_INT 105
18674: PUSH
18675: LD_INT 106
18677: PUSH
18678: LD_INT 108
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: ST_TO_ADDR
18692: GO 21471
18694: LD_INT 3
18696: DOUBLE
18697: EQUAL
18698: IFTRUE 18702
18700: GO 18778
18702: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
18703: LD_ADDR_VAR 0 1
18707: PUSH
18708: LD_INT 2
18710: PUSH
18711: LD_INT 4
18713: PUSH
18714: LD_INT 5
18716: PUSH
18717: LD_INT 11
18719: PUSH
18720: LD_INT 12
18722: PUSH
18723: LD_INT 15
18725: PUSH
18726: LD_INT 16
18728: PUSH
18729: LD_INT 22
18731: PUSH
18732: LD_INT 26
18734: PUSH
18735: LD_INT 36
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: PUSH
18750: LD_INT 101
18752: PUSH
18753: LD_INT 102
18755: PUSH
18756: LD_INT 105
18758: PUSH
18759: LD_INT 106
18761: PUSH
18762: LD_INT 108
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: ST_TO_ADDR
18776: GO 21471
18778: LD_INT 4
18780: DOUBLE
18781: EQUAL
18782: IFTRUE 18786
18784: GO 18870
18786: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
18787: LD_ADDR_VAR 0 1
18791: PUSH
18792: LD_INT 2
18794: PUSH
18795: LD_INT 4
18797: PUSH
18798: LD_INT 5
18800: PUSH
18801: LD_INT 8
18803: PUSH
18804: LD_INT 11
18806: PUSH
18807: LD_INT 12
18809: PUSH
18810: LD_INT 15
18812: PUSH
18813: LD_INT 16
18815: PUSH
18816: LD_INT 22
18818: PUSH
18819: LD_INT 23
18821: PUSH
18822: LD_INT 26
18824: PUSH
18825: LD_INT 36
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: PUSH
18842: LD_INT 101
18844: PUSH
18845: LD_INT 102
18847: PUSH
18848: LD_INT 105
18850: PUSH
18851: LD_INT 106
18853: PUSH
18854: LD_INT 108
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: ST_TO_ADDR
18868: GO 21471
18870: LD_INT 5
18872: DOUBLE
18873: EQUAL
18874: IFTRUE 18878
18876: GO 18978
18878: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
18879: LD_ADDR_VAR 0 1
18883: PUSH
18884: LD_INT 2
18886: PUSH
18887: LD_INT 4
18889: PUSH
18890: LD_INT 5
18892: PUSH
18893: LD_INT 6
18895: PUSH
18896: LD_INT 8
18898: PUSH
18899: LD_INT 11
18901: PUSH
18902: LD_INT 12
18904: PUSH
18905: LD_INT 15
18907: PUSH
18908: LD_INT 16
18910: PUSH
18911: LD_INT 22
18913: PUSH
18914: LD_INT 23
18916: PUSH
18917: LD_INT 25
18919: PUSH
18920: LD_INT 26
18922: PUSH
18923: LD_INT 36
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: PUSH
18942: LD_INT 101
18944: PUSH
18945: LD_INT 102
18947: PUSH
18948: LD_INT 105
18950: PUSH
18951: LD_INT 106
18953: PUSH
18954: LD_INT 108
18956: PUSH
18957: LD_INT 109
18959: PUSH
18960: LD_INT 112
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: ST_TO_ADDR
18976: GO 21471
18978: LD_INT 6
18980: DOUBLE
18981: EQUAL
18982: IFTRUE 18986
18984: GO 19106
18986: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
18987: LD_ADDR_VAR 0 1
18991: PUSH
18992: LD_INT 2
18994: PUSH
18995: LD_INT 4
18997: PUSH
18998: LD_INT 5
19000: PUSH
19001: LD_INT 6
19003: PUSH
19004: LD_INT 8
19006: PUSH
19007: LD_INT 11
19009: PUSH
19010: LD_INT 12
19012: PUSH
19013: LD_INT 15
19015: PUSH
19016: LD_INT 16
19018: PUSH
19019: LD_INT 20
19021: PUSH
19022: LD_INT 21
19024: PUSH
19025: LD_INT 22
19027: PUSH
19028: LD_INT 23
19030: PUSH
19031: LD_INT 25
19033: PUSH
19034: LD_INT 26
19036: PUSH
19037: LD_INT 30
19039: PUSH
19040: LD_INT 31
19042: PUSH
19043: LD_INT 32
19045: PUSH
19046: LD_INT 36
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 101
19072: PUSH
19073: LD_INT 102
19075: PUSH
19076: LD_INT 105
19078: PUSH
19079: LD_INT 106
19081: PUSH
19082: LD_INT 108
19084: PUSH
19085: LD_INT 109
19087: PUSH
19088: LD_INT 112
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: ST_TO_ADDR
19104: GO 21471
19106: LD_INT 7
19108: DOUBLE
19109: EQUAL
19110: IFTRUE 19114
19112: GO 19214
19114: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
19115: LD_ADDR_VAR 0 1
19119: PUSH
19120: LD_INT 2
19122: PUSH
19123: LD_INT 4
19125: PUSH
19126: LD_INT 5
19128: PUSH
19129: LD_INT 7
19131: PUSH
19132: LD_INT 11
19134: PUSH
19135: LD_INT 12
19137: PUSH
19138: LD_INT 15
19140: PUSH
19141: LD_INT 16
19143: PUSH
19144: LD_INT 20
19146: PUSH
19147: LD_INT 21
19149: PUSH
19150: LD_INT 22
19152: PUSH
19153: LD_INT 23
19155: PUSH
19156: LD_INT 25
19158: PUSH
19159: LD_INT 26
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: PUSH
19178: LD_INT 101
19180: PUSH
19181: LD_INT 102
19183: PUSH
19184: LD_INT 103
19186: PUSH
19187: LD_INT 105
19189: PUSH
19190: LD_INT 106
19192: PUSH
19193: LD_INT 108
19195: PUSH
19196: LD_INT 112
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: ST_TO_ADDR
19212: GO 21471
19214: LD_INT 8
19216: DOUBLE
19217: EQUAL
19218: IFTRUE 19222
19220: GO 19350
19222: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
19223: LD_ADDR_VAR 0 1
19227: PUSH
19228: LD_INT 2
19230: PUSH
19231: LD_INT 4
19233: PUSH
19234: LD_INT 5
19236: PUSH
19237: LD_INT 6
19239: PUSH
19240: LD_INT 7
19242: PUSH
19243: LD_INT 8
19245: PUSH
19246: LD_INT 11
19248: PUSH
19249: LD_INT 12
19251: PUSH
19252: LD_INT 15
19254: PUSH
19255: LD_INT 16
19257: PUSH
19258: LD_INT 20
19260: PUSH
19261: LD_INT 21
19263: PUSH
19264: LD_INT 22
19266: PUSH
19267: LD_INT 23
19269: PUSH
19270: LD_INT 25
19272: PUSH
19273: LD_INT 26
19275: PUSH
19276: LD_INT 30
19278: PUSH
19279: LD_INT 31
19281: PUSH
19282: LD_INT 32
19284: PUSH
19285: LD_INT 36
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: PUSH
19310: LD_INT 101
19312: PUSH
19313: LD_INT 102
19315: PUSH
19316: LD_INT 103
19318: PUSH
19319: LD_INT 105
19321: PUSH
19322: LD_INT 106
19324: PUSH
19325: LD_INT 108
19327: PUSH
19328: LD_INT 109
19330: PUSH
19331: LD_INT 112
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: ST_TO_ADDR
19348: GO 21471
19350: LD_INT 9
19352: DOUBLE
19353: EQUAL
19354: IFTRUE 19358
19356: GO 19494
19358: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
19359: LD_ADDR_VAR 0 1
19363: PUSH
19364: LD_INT 2
19366: PUSH
19367: LD_INT 4
19369: PUSH
19370: LD_INT 5
19372: PUSH
19373: LD_INT 6
19375: PUSH
19376: LD_INT 7
19378: PUSH
19379: LD_INT 8
19381: PUSH
19382: LD_INT 11
19384: PUSH
19385: LD_INT 12
19387: PUSH
19388: LD_INT 15
19390: PUSH
19391: LD_INT 16
19393: PUSH
19394: LD_INT 20
19396: PUSH
19397: LD_INT 21
19399: PUSH
19400: LD_INT 22
19402: PUSH
19403: LD_INT 23
19405: PUSH
19406: LD_INT 25
19408: PUSH
19409: LD_INT 26
19411: PUSH
19412: LD_INT 28
19414: PUSH
19415: LD_INT 30
19417: PUSH
19418: LD_INT 31
19420: PUSH
19421: LD_INT 32
19423: PUSH
19424: LD_INT 36
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: PUSH
19450: LD_INT 101
19452: PUSH
19453: LD_INT 102
19455: PUSH
19456: LD_INT 103
19458: PUSH
19459: LD_INT 105
19461: PUSH
19462: LD_INT 106
19464: PUSH
19465: LD_INT 108
19467: PUSH
19468: LD_INT 109
19470: PUSH
19471: LD_INT 112
19473: PUSH
19474: LD_INT 114
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: ST_TO_ADDR
19492: GO 21471
19494: LD_INT 10
19496: DOUBLE
19497: EQUAL
19498: IFTRUE 19502
19500: GO 19686
19502: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
19503: LD_ADDR_VAR 0 1
19507: PUSH
19508: LD_INT 2
19510: PUSH
19511: LD_INT 4
19513: PUSH
19514: LD_INT 5
19516: PUSH
19517: LD_INT 6
19519: PUSH
19520: LD_INT 7
19522: PUSH
19523: LD_INT 8
19525: PUSH
19526: LD_INT 9
19528: PUSH
19529: LD_INT 10
19531: PUSH
19532: LD_INT 11
19534: PUSH
19535: LD_INT 12
19537: PUSH
19538: LD_INT 13
19540: PUSH
19541: LD_INT 14
19543: PUSH
19544: LD_INT 15
19546: PUSH
19547: LD_INT 16
19549: PUSH
19550: LD_INT 17
19552: PUSH
19553: LD_INT 18
19555: PUSH
19556: LD_INT 19
19558: PUSH
19559: LD_INT 20
19561: PUSH
19562: LD_INT 21
19564: PUSH
19565: LD_INT 22
19567: PUSH
19568: LD_INT 23
19570: PUSH
19571: LD_INT 24
19573: PUSH
19574: LD_INT 25
19576: PUSH
19577: LD_INT 26
19579: PUSH
19580: LD_INT 28
19582: PUSH
19583: LD_INT 30
19585: PUSH
19586: LD_INT 31
19588: PUSH
19589: LD_INT 32
19591: PUSH
19592: LD_INT 36
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: PUSH
19626: LD_INT 101
19628: PUSH
19629: LD_INT 102
19631: PUSH
19632: LD_INT 103
19634: PUSH
19635: LD_INT 104
19637: PUSH
19638: LD_INT 105
19640: PUSH
19641: LD_INT 106
19643: PUSH
19644: LD_INT 107
19646: PUSH
19647: LD_INT 108
19649: PUSH
19650: LD_INT 109
19652: PUSH
19653: LD_INT 110
19655: PUSH
19656: LD_INT 111
19658: PUSH
19659: LD_INT 112
19661: PUSH
19662: LD_INT 114
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: ST_TO_ADDR
19684: GO 21471
19686: LD_INT 11
19688: DOUBLE
19689: EQUAL
19690: IFTRUE 19694
19692: GO 19886
19694: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
19695: LD_ADDR_VAR 0 1
19699: PUSH
19700: LD_INT 2
19702: PUSH
19703: LD_INT 3
19705: PUSH
19706: LD_INT 4
19708: PUSH
19709: LD_INT 5
19711: PUSH
19712: LD_INT 6
19714: PUSH
19715: LD_INT 7
19717: PUSH
19718: LD_INT 8
19720: PUSH
19721: LD_INT 9
19723: PUSH
19724: LD_INT 10
19726: PUSH
19727: LD_INT 11
19729: PUSH
19730: LD_INT 12
19732: PUSH
19733: LD_INT 13
19735: PUSH
19736: LD_INT 14
19738: PUSH
19739: LD_INT 15
19741: PUSH
19742: LD_INT 16
19744: PUSH
19745: LD_INT 17
19747: PUSH
19748: LD_INT 18
19750: PUSH
19751: LD_INT 19
19753: PUSH
19754: LD_INT 20
19756: PUSH
19757: LD_INT 21
19759: PUSH
19760: LD_INT 22
19762: PUSH
19763: LD_INT 23
19765: PUSH
19766: LD_INT 24
19768: PUSH
19769: LD_INT 25
19771: PUSH
19772: LD_INT 26
19774: PUSH
19775: LD_INT 28
19777: PUSH
19778: LD_INT 30
19780: PUSH
19781: LD_INT 31
19783: PUSH
19784: LD_INT 32
19786: PUSH
19787: LD_INT 34
19789: PUSH
19790: LD_INT 36
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 101
19828: PUSH
19829: LD_INT 102
19831: PUSH
19832: LD_INT 103
19834: PUSH
19835: LD_INT 104
19837: PUSH
19838: LD_INT 105
19840: PUSH
19841: LD_INT 106
19843: PUSH
19844: LD_INT 107
19846: PUSH
19847: LD_INT 108
19849: PUSH
19850: LD_INT 109
19852: PUSH
19853: LD_INT 110
19855: PUSH
19856: LD_INT 111
19858: PUSH
19859: LD_INT 112
19861: PUSH
19862: LD_INT 114
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: ST_TO_ADDR
19884: GO 21471
19886: LD_INT 12
19888: DOUBLE
19889: EQUAL
19890: IFTRUE 19894
19892: GO 20102
19894: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
19895: LD_ADDR_VAR 0 1
19899: PUSH
19900: LD_INT 1
19902: PUSH
19903: LD_INT 2
19905: PUSH
19906: LD_INT 3
19908: PUSH
19909: LD_INT 4
19911: PUSH
19912: LD_INT 5
19914: PUSH
19915: LD_INT 6
19917: PUSH
19918: LD_INT 7
19920: PUSH
19921: LD_INT 8
19923: PUSH
19924: LD_INT 9
19926: PUSH
19927: LD_INT 10
19929: PUSH
19930: LD_INT 11
19932: PUSH
19933: LD_INT 12
19935: PUSH
19936: LD_INT 13
19938: PUSH
19939: LD_INT 14
19941: PUSH
19942: LD_INT 15
19944: PUSH
19945: LD_INT 16
19947: PUSH
19948: LD_INT 17
19950: PUSH
19951: LD_INT 18
19953: PUSH
19954: LD_INT 19
19956: PUSH
19957: LD_INT 20
19959: PUSH
19960: LD_INT 21
19962: PUSH
19963: LD_INT 22
19965: PUSH
19966: LD_INT 23
19968: PUSH
19969: LD_INT 24
19971: PUSH
19972: LD_INT 25
19974: PUSH
19975: LD_INT 26
19977: PUSH
19978: LD_INT 27
19980: PUSH
19981: LD_INT 28
19983: PUSH
19984: LD_INT 30
19986: PUSH
19987: LD_INT 31
19989: PUSH
19990: LD_INT 32
19992: PUSH
19993: LD_INT 33
19995: PUSH
19996: LD_INT 34
19998: PUSH
19999: LD_INT 36
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 101
20040: PUSH
20041: LD_INT 102
20043: PUSH
20044: LD_INT 103
20046: PUSH
20047: LD_INT 104
20049: PUSH
20050: LD_INT 105
20052: PUSH
20053: LD_INT 106
20055: PUSH
20056: LD_INT 107
20058: PUSH
20059: LD_INT 108
20061: PUSH
20062: LD_INT 109
20064: PUSH
20065: LD_INT 110
20067: PUSH
20068: LD_INT 111
20070: PUSH
20071: LD_INT 112
20073: PUSH
20074: LD_INT 113
20076: PUSH
20077: LD_INT 114
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: ST_TO_ADDR
20100: GO 21471
20102: LD_INT 13
20104: DOUBLE
20105: EQUAL
20106: IFTRUE 20110
20108: GO 20306
20110: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
20111: LD_ADDR_VAR 0 1
20115: PUSH
20116: LD_INT 1
20118: PUSH
20119: LD_INT 2
20121: PUSH
20122: LD_INT 3
20124: PUSH
20125: LD_INT 4
20127: PUSH
20128: LD_INT 5
20130: PUSH
20131: LD_INT 8
20133: PUSH
20134: LD_INT 9
20136: PUSH
20137: LD_INT 10
20139: PUSH
20140: LD_INT 11
20142: PUSH
20143: LD_INT 12
20145: PUSH
20146: LD_INT 14
20148: PUSH
20149: LD_INT 15
20151: PUSH
20152: LD_INT 16
20154: PUSH
20155: LD_INT 17
20157: PUSH
20158: LD_INT 18
20160: PUSH
20161: LD_INT 19
20163: PUSH
20164: LD_INT 20
20166: PUSH
20167: LD_INT 21
20169: PUSH
20170: LD_INT 22
20172: PUSH
20173: LD_INT 23
20175: PUSH
20176: LD_INT 24
20178: PUSH
20179: LD_INT 25
20181: PUSH
20182: LD_INT 26
20184: PUSH
20185: LD_INT 27
20187: PUSH
20188: LD_INT 28
20190: PUSH
20191: LD_INT 30
20193: PUSH
20194: LD_INT 31
20196: PUSH
20197: LD_INT 32
20199: PUSH
20200: LD_INT 33
20202: PUSH
20203: LD_INT 34
20205: PUSH
20206: LD_INT 36
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: PUSH
20242: LD_INT 101
20244: PUSH
20245: LD_INT 102
20247: PUSH
20248: LD_INT 103
20250: PUSH
20251: LD_INT 104
20253: PUSH
20254: LD_INT 105
20256: PUSH
20257: LD_INT 106
20259: PUSH
20260: LD_INT 107
20262: PUSH
20263: LD_INT 108
20265: PUSH
20266: LD_INT 109
20268: PUSH
20269: LD_INT 110
20271: PUSH
20272: LD_INT 111
20274: PUSH
20275: LD_INT 112
20277: PUSH
20278: LD_INT 113
20280: PUSH
20281: LD_INT 114
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: ST_TO_ADDR
20304: GO 21471
20306: LD_INT 14
20308: DOUBLE
20309: EQUAL
20310: IFTRUE 20314
20312: GO 20526
20314: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
20315: LD_ADDR_VAR 0 1
20319: PUSH
20320: LD_INT 1
20322: PUSH
20323: LD_INT 2
20325: PUSH
20326: LD_INT 3
20328: PUSH
20329: LD_INT 4
20331: PUSH
20332: LD_INT 5
20334: PUSH
20335: LD_INT 6
20337: PUSH
20338: LD_INT 7
20340: PUSH
20341: LD_INT 8
20343: PUSH
20344: LD_INT 9
20346: PUSH
20347: LD_INT 10
20349: PUSH
20350: LD_INT 11
20352: PUSH
20353: LD_INT 12
20355: PUSH
20356: LD_INT 13
20358: PUSH
20359: LD_INT 14
20361: PUSH
20362: LD_INT 15
20364: PUSH
20365: LD_INT 16
20367: PUSH
20368: LD_INT 17
20370: PUSH
20371: LD_INT 18
20373: PUSH
20374: LD_INT 19
20376: PUSH
20377: LD_INT 20
20379: PUSH
20380: LD_INT 21
20382: PUSH
20383: LD_INT 22
20385: PUSH
20386: LD_INT 23
20388: PUSH
20389: LD_INT 24
20391: PUSH
20392: LD_INT 25
20394: PUSH
20395: LD_INT 26
20397: PUSH
20398: LD_INT 27
20400: PUSH
20401: LD_INT 28
20403: PUSH
20404: LD_INT 29
20406: PUSH
20407: LD_INT 30
20409: PUSH
20410: LD_INT 31
20412: PUSH
20413: LD_INT 32
20415: PUSH
20416: LD_INT 33
20418: PUSH
20419: LD_INT 34
20421: PUSH
20422: LD_INT 36
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: PUSH
20462: LD_INT 101
20464: PUSH
20465: LD_INT 102
20467: PUSH
20468: LD_INT 103
20470: PUSH
20471: LD_INT 104
20473: PUSH
20474: LD_INT 105
20476: PUSH
20477: LD_INT 106
20479: PUSH
20480: LD_INT 107
20482: PUSH
20483: LD_INT 108
20485: PUSH
20486: LD_INT 109
20488: PUSH
20489: LD_INT 110
20491: PUSH
20492: LD_INT 111
20494: PUSH
20495: LD_INT 112
20497: PUSH
20498: LD_INT 113
20500: PUSH
20501: LD_INT 114
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: ST_TO_ADDR
20524: GO 21471
20526: LD_INT 15
20528: DOUBLE
20529: EQUAL
20530: IFTRUE 20534
20532: GO 20746
20534: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
20535: LD_ADDR_VAR 0 1
20539: PUSH
20540: LD_INT 1
20542: PUSH
20543: LD_INT 2
20545: PUSH
20546: LD_INT 3
20548: PUSH
20549: LD_INT 4
20551: PUSH
20552: LD_INT 5
20554: PUSH
20555: LD_INT 6
20557: PUSH
20558: LD_INT 7
20560: PUSH
20561: LD_INT 8
20563: PUSH
20564: LD_INT 9
20566: PUSH
20567: LD_INT 10
20569: PUSH
20570: LD_INT 11
20572: PUSH
20573: LD_INT 12
20575: PUSH
20576: LD_INT 13
20578: PUSH
20579: LD_INT 14
20581: PUSH
20582: LD_INT 15
20584: PUSH
20585: LD_INT 16
20587: PUSH
20588: LD_INT 17
20590: PUSH
20591: LD_INT 18
20593: PUSH
20594: LD_INT 19
20596: PUSH
20597: LD_INT 20
20599: PUSH
20600: LD_INT 21
20602: PUSH
20603: LD_INT 22
20605: PUSH
20606: LD_INT 23
20608: PUSH
20609: LD_INT 24
20611: PUSH
20612: LD_INT 25
20614: PUSH
20615: LD_INT 26
20617: PUSH
20618: LD_INT 27
20620: PUSH
20621: LD_INT 28
20623: PUSH
20624: LD_INT 29
20626: PUSH
20627: LD_INT 30
20629: PUSH
20630: LD_INT 31
20632: PUSH
20633: LD_INT 32
20635: PUSH
20636: LD_INT 33
20638: PUSH
20639: LD_INT 34
20641: PUSH
20642: LD_INT 36
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: PUSH
20682: LD_INT 101
20684: PUSH
20685: LD_INT 102
20687: PUSH
20688: LD_INT 103
20690: PUSH
20691: LD_INT 104
20693: PUSH
20694: LD_INT 105
20696: PUSH
20697: LD_INT 106
20699: PUSH
20700: LD_INT 107
20702: PUSH
20703: LD_INT 108
20705: PUSH
20706: LD_INT 109
20708: PUSH
20709: LD_INT 110
20711: PUSH
20712: LD_INT 111
20714: PUSH
20715: LD_INT 112
20717: PUSH
20718: LD_INT 113
20720: PUSH
20721: LD_INT 114
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: ST_TO_ADDR
20744: GO 21471
20746: LD_INT 16
20748: DOUBLE
20749: EQUAL
20750: IFTRUE 20754
20752: GO 20878
20754: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
20755: LD_ADDR_VAR 0 1
20759: PUSH
20760: LD_INT 2
20762: PUSH
20763: LD_INT 4
20765: PUSH
20766: LD_INT 5
20768: PUSH
20769: LD_INT 7
20771: PUSH
20772: LD_INT 11
20774: PUSH
20775: LD_INT 12
20777: PUSH
20778: LD_INT 15
20780: PUSH
20781: LD_INT 16
20783: PUSH
20784: LD_INT 20
20786: PUSH
20787: LD_INT 21
20789: PUSH
20790: LD_INT 22
20792: PUSH
20793: LD_INT 23
20795: PUSH
20796: LD_INT 25
20798: PUSH
20799: LD_INT 26
20801: PUSH
20802: LD_INT 30
20804: PUSH
20805: LD_INT 31
20807: PUSH
20808: LD_INT 32
20810: PUSH
20811: LD_INT 33
20813: PUSH
20814: LD_INT 34
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: PUSH
20838: LD_INT 101
20840: PUSH
20841: LD_INT 102
20843: PUSH
20844: LD_INT 103
20846: PUSH
20847: LD_INT 106
20849: PUSH
20850: LD_INT 108
20852: PUSH
20853: LD_INT 112
20855: PUSH
20856: LD_INT 113
20858: PUSH
20859: LD_INT 114
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: ST_TO_ADDR
20876: GO 21471
20878: LD_INT 17
20880: DOUBLE
20881: EQUAL
20882: IFTRUE 20886
20884: GO 21098
20886: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
20887: LD_ADDR_VAR 0 1
20891: PUSH
20892: LD_INT 1
20894: PUSH
20895: LD_INT 2
20897: PUSH
20898: LD_INT 3
20900: PUSH
20901: LD_INT 4
20903: PUSH
20904: LD_INT 5
20906: PUSH
20907: LD_INT 6
20909: PUSH
20910: LD_INT 7
20912: PUSH
20913: LD_INT 8
20915: PUSH
20916: LD_INT 9
20918: PUSH
20919: LD_INT 10
20921: PUSH
20922: LD_INT 11
20924: PUSH
20925: LD_INT 12
20927: PUSH
20928: LD_INT 13
20930: PUSH
20931: LD_INT 14
20933: PUSH
20934: LD_INT 15
20936: PUSH
20937: LD_INT 16
20939: PUSH
20940: LD_INT 17
20942: PUSH
20943: LD_INT 18
20945: PUSH
20946: LD_INT 19
20948: PUSH
20949: LD_INT 20
20951: PUSH
20952: LD_INT 21
20954: PUSH
20955: LD_INT 22
20957: PUSH
20958: LD_INT 23
20960: PUSH
20961: LD_INT 24
20963: PUSH
20964: LD_INT 25
20966: PUSH
20967: LD_INT 26
20969: PUSH
20970: LD_INT 27
20972: PUSH
20973: LD_INT 28
20975: PUSH
20976: LD_INT 29
20978: PUSH
20979: LD_INT 30
20981: PUSH
20982: LD_INT 31
20984: PUSH
20985: LD_INT 32
20987: PUSH
20988: LD_INT 33
20990: PUSH
20991: LD_INT 34
20993: PUSH
20994: LD_INT 36
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: PUSH
21034: LD_INT 101
21036: PUSH
21037: LD_INT 102
21039: PUSH
21040: LD_INT 103
21042: PUSH
21043: LD_INT 104
21045: PUSH
21046: LD_INT 105
21048: PUSH
21049: LD_INT 106
21051: PUSH
21052: LD_INT 107
21054: PUSH
21055: LD_INT 108
21057: PUSH
21058: LD_INT 109
21060: PUSH
21061: LD_INT 110
21063: PUSH
21064: LD_INT 111
21066: PUSH
21067: LD_INT 112
21069: PUSH
21070: LD_INT 113
21072: PUSH
21073: LD_INT 114
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: ST_TO_ADDR
21096: GO 21471
21098: LD_INT 18
21100: DOUBLE
21101: EQUAL
21102: IFTRUE 21106
21104: GO 21242
21106: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
21107: LD_ADDR_VAR 0 1
21111: PUSH
21112: LD_INT 2
21114: PUSH
21115: LD_INT 4
21117: PUSH
21118: LD_INT 5
21120: PUSH
21121: LD_INT 7
21123: PUSH
21124: LD_INT 11
21126: PUSH
21127: LD_INT 12
21129: PUSH
21130: LD_INT 15
21132: PUSH
21133: LD_INT 16
21135: PUSH
21136: LD_INT 20
21138: PUSH
21139: LD_INT 21
21141: PUSH
21142: LD_INT 22
21144: PUSH
21145: LD_INT 23
21147: PUSH
21148: LD_INT 25
21150: PUSH
21151: LD_INT 26
21153: PUSH
21154: LD_INT 30
21156: PUSH
21157: LD_INT 31
21159: PUSH
21160: LD_INT 32
21162: PUSH
21163: LD_INT 33
21165: PUSH
21166: LD_INT 34
21168: PUSH
21169: LD_INT 35
21171: PUSH
21172: LD_INT 36
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 101
21200: PUSH
21201: LD_INT 102
21203: PUSH
21204: LD_INT 103
21206: PUSH
21207: LD_INT 106
21209: PUSH
21210: LD_INT 108
21212: PUSH
21213: LD_INT 112
21215: PUSH
21216: LD_INT 113
21218: PUSH
21219: LD_INT 114
21221: PUSH
21222: LD_INT 115
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: ST_TO_ADDR
21240: GO 21471
21242: LD_INT 19
21244: DOUBLE
21245: EQUAL
21246: IFTRUE 21250
21248: GO 21470
21250: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
21251: LD_ADDR_VAR 0 1
21255: PUSH
21256: LD_INT 1
21258: PUSH
21259: LD_INT 2
21261: PUSH
21262: LD_INT 3
21264: PUSH
21265: LD_INT 4
21267: PUSH
21268: LD_INT 5
21270: PUSH
21271: LD_INT 6
21273: PUSH
21274: LD_INT 7
21276: PUSH
21277: LD_INT 8
21279: PUSH
21280: LD_INT 9
21282: PUSH
21283: LD_INT 10
21285: PUSH
21286: LD_INT 11
21288: PUSH
21289: LD_INT 12
21291: PUSH
21292: LD_INT 13
21294: PUSH
21295: LD_INT 14
21297: PUSH
21298: LD_INT 15
21300: PUSH
21301: LD_INT 16
21303: PUSH
21304: LD_INT 17
21306: PUSH
21307: LD_INT 18
21309: PUSH
21310: LD_INT 19
21312: PUSH
21313: LD_INT 20
21315: PUSH
21316: LD_INT 21
21318: PUSH
21319: LD_INT 22
21321: PUSH
21322: LD_INT 23
21324: PUSH
21325: LD_INT 24
21327: PUSH
21328: LD_INT 25
21330: PUSH
21331: LD_INT 26
21333: PUSH
21334: LD_INT 27
21336: PUSH
21337: LD_INT 28
21339: PUSH
21340: LD_INT 29
21342: PUSH
21343: LD_INT 30
21345: PUSH
21346: LD_INT 31
21348: PUSH
21349: LD_INT 32
21351: PUSH
21352: LD_INT 33
21354: PUSH
21355: LD_INT 34
21357: PUSH
21358: LD_INT 35
21360: PUSH
21361: LD_INT 36
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: PUSH
21402: LD_INT 101
21404: PUSH
21405: LD_INT 102
21407: PUSH
21408: LD_INT 103
21410: PUSH
21411: LD_INT 104
21413: PUSH
21414: LD_INT 105
21416: PUSH
21417: LD_INT 106
21419: PUSH
21420: LD_INT 107
21422: PUSH
21423: LD_INT 108
21425: PUSH
21426: LD_INT 109
21428: PUSH
21429: LD_INT 110
21431: PUSH
21432: LD_INT 111
21434: PUSH
21435: LD_INT 112
21437: PUSH
21438: LD_INT 113
21440: PUSH
21441: LD_INT 114
21443: PUSH
21444: LD_INT 115
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: ST_TO_ADDR
21468: GO 21471
21470: POP
// end else
21471: GO 21690
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
21473: LD_ADDR_VAR 0 1
21477: PUSH
21478: LD_INT 1
21480: PUSH
21481: LD_INT 2
21483: PUSH
21484: LD_INT 3
21486: PUSH
21487: LD_INT 4
21489: PUSH
21490: LD_INT 5
21492: PUSH
21493: LD_INT 6
21495: PUSH
21496: LD_INT 7
21498: PUSH
21499: LD_INT 8
21501: PUSH
21502: LD_INT 9
21504: PUSH
21505: LD_INT 10
21507: PUSH
21508: LD_INT 11
21510: PUSH
21511: LD_INT 12
21513: PUSH
21514: LD_INT 13
21516: PUSH
21517: LD_INT 14
21519: PUSH
21520: LD_INT 15
21522: PUSH
21523: LD_INT 16
21525: PUSH
21526: LD_INT 17
21528: PUSH
21529: LD_INT 18
21531: PUSH
21532: LD_INT 19
21534: PUSH
21535: LD_INT 20
21537: PUSH
21538: LD_INT 21
21540: PUSH
21541: LD_INT 22
21543: PUSH
21544: LD_INT 23
21546: PUSH
21547: LD_INT 24
21549: PUSH
21550: LD_INT 25
21552: PUSH
21553: LD_INT 26
21555: PUSH
21556: LD_INT 27
21558: PUSH
21559: LD_INT 28
21561: PUSH
21562: LD_INT 29
21564: PUSH
21565: LD_INT 30
21567: PUSH
21568: LD_INT 31
21570: PUSH
21571: LD_INT 32
21573: PUSH
21574: LD_INT 33
21576: PUSH
21577: LD_INT 34
21579: PUSH
21580: LD_INT 35
21582: PUSH
21583: LD_INT 36
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 101
21626: PUSH
21627: LD_INT 102
21629: PUSH
21630: LD_INT 103
21632: PUSH
21633: LD_INT 104
21635: PUSH
21636: LD_INT 105
21638: PUSH
21639: LD_INT 106
21641: PUSH
21642: LD_INT 107
21644: PUSH
21645: LD_INT 108
21647: PUSH
21648: LD_INT 109
21650: PUSH
21651: LD_INT 110
21653: PUSH
21654: LD_INT 111
21656: PUSH
21657: LD_INT 112
21659: PUSH
21660: LD_INT 113
21662: PUSH
21663: LD_INT 114
21665: PUSH
21666: LD_INT 115
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: ST_TO_ADDR
// if result then
21690: LD_VAR 0 1
21694: IFFALSE 21983
// begin normal :=  ;
21696: LD_ADDR_VAR 0 3
21700: PUSH
21701: LD_STRING 
21703: ST_TO_ADDR
// hardcore :=  ;
21704: LD_ADDR_VAR 0 4
21708: PUSH
21709: LD_STRING 
21711: ST_TO_ADDR
// for i = 1 to normalCounter do
21712: LD_ADDR_VAR 0 5
21716: PUSH
21717: DOUBLE
21718: LD_INT 1
21720: DEC
21721: ST_TO_ADDR
21722: LD_EXP 53
21726: PUSH
21727: FOR_TO
21728: IFFALSE 21829
// begin tmp := 0 ;
21730: LD_ADDR_VAR 0 2
21734: PUSH
21735: LD_STRING 0
21737: ST_TO_ADDR
// if result [ 1 ] then
21738: LD_VAR 0 1
21742: PUSH
21743: LD_INT 1
21745: ARRAY
21746: IFFALSE 21811
// if result [ 1 ] [ 1 ] = i then
21748: LD_VAR 0 1
21752: PUSH
21753: LD_INT 1
21755: ARRAY
21756: PUSH
21757: LD_INT 1
21759: ARRAY
21760: PUSH
21761: LD_VAR 0 5
21765: EQUAL
21766: IFFALSE 21811
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
21768: LD_ADDR_VAR 0 1
21772: PUSH
21773: LD_VAR 0 1
21777: PPUSH
21778: LD_INT 1
21780: PPUSH
21781: LD_VAR 0 1
21785: PUSH
21786: LD_INT 1
21788: ARRAY
21789: PPUSH
21790: LD_INT 1
21792: PPUSH
21793: CALL_OW 3
21797: PPUSH
21798: CALL_OW 1
21802: ST_TO_ADDR
// tmp := 1 ;
21803: LD_ADDR_VAR 0 2
21807: PUSH
21808: LD_STRING 1
21810: ST_TO_ADDR
// end ; normal := normal & tmp ;
21811: LD_ADDR_VAR 0 3
21815: PUSH
21816: LD_VAR 0 3
21820: PUSH
21821: LD_VAR 0 2
21825: STR
21826: ST_TO_ADDR
// end ;
21827: GO 21727
21829: POP
21830: POP
// for i = 1 to hardcoreCounter do
21831: LD_ADDR_VAR 0 5
21835: PUSH
21836: DOUBLE
21837: LD_INT 1
21839: DEC
21840: ST_TO_ADDR
21841: LD_EXP 54
21845: PUSH
21846: FOR_TO
21847: IFFALSE 21952
// begin tmp := 0 ;
21849: LD_ADDR_VAR 0 2
21853: PUSH
21854: LD_STRING 0
21856: ST_TO_ADDR
// if result [ 2 ] then
21857: LD_VAR 0 1
21861: PUSH
21862: LD_INT 2
21864: ARRAY
21865: IFFALSE 21934
// if result [ 2 ] [ 1 ] = 100 + i then
21867: LD_VAR 0 1
21871: PUSH
21872: LD_INT 2
21874: ARRAY
21875: PUSH
21876: LD_INT 1
21878: ARRAY
21879: PUSH
21880: LD_INT 100
21882: PUSH
21883: LD_VAR 0 5
21887: PLUS
21888: EQUAL
21889: IFFALSE 21934
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
21891: LD_ADDR_VAR 0 1
21895: PUSH
21896: LD_VAR 0 1
21900: PPUSH
21901: LD_INT 2
21903: PPUSH
21904: LD_VAR 0 1
21908: PUSH
21909: LD_INT 2
21911: ARRAY
21912: PPUSH
21913: LD_INT 1
21915: PPUSH
21916: CALL_OW 3
21920: PPUSH
21921: CALL_OW 1
21925: ST_TO_ADDR
// tmp := 1 ;
21926: LD_ADDR_VAR 0 2
21930: PUSH
21931: LD_STRING 1
21933: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21934: LD_ADDR_VAR 0 4
21938: PUSH
21939: LD_VAR 0 4
21943: PUSH
21944: LD_VAR 0 2
21948: STR
21949: ST_TO_ADDR
// end ;
21950: GO 21846
21952: POP
21953: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
21954: LD_STRING getStreamItemsFromMission("
21956: PUSH
21957: LD_VAR 0 3
21961: STR
21962: PUSH
21963: LD_STRING ","
21965: STR
21966: PUSH
21967: LD_VAR 0 4
21971: STR
21972: PUSH
21973: LD_STRING ")
21975: STR
21976: PPUSH
21977: CALL_OW 559
// end else
21981: GO 21990
// ToLua ( getStreamItemsFromMission("","") ) ;
21983: LD_STRING getStreamItemsFromMission("","")
21985: PPUSH
21986: CALL_OW 559
// end ;
21990: LD_VAR 0 1
21994: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21995: LD_EXP 52
21999: PUSH
22000: LD_EXP 57
22004: AND
22005: IFFALSE 22129
22007: GO 22009
22009: DISABLE
22010: LD_INT 0
22012: PPUSH
22013: PPUSH
// begin enable ;
22014: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
22015: LD_ADDR_VAR 0 2
22019: PUSH
22020: LD_INT 22
22022: PUSH
22023: LD_OWVAR 2
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: LD_INT 2
22034: PUSH
22035: LD_INT 34
22037: PUSH
22038: LD_INT 7
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: PUSH
22045: LD_INT 34
22047: PUSH
22048: LD_INT 45
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PUSH
22055: LD_INT 34
22057: PUSH
22058: LD_INT 28
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 34
22067: PUSH
22068: LD_INT 47
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PPUSH
22086: CALL_OW 69
22090: ST_TO_ADDR
// if not tmp then
22091: LD_VAR 0 2
22095: NOT
22096: IFFALSE 22100
// exit ;
22098: GO 22129
// for i in tmp do
22100: LD_ADDR_VAR 0 1
22104: PUSH
22105: LD_VAR 0 2
22109: PUSH
22110: FOR_IN
22111: IFFALSE 22127
// begin SetLives ( i , 0 ) ;
22113: LD_VAR 0 1
22117: PPUSH
22118: LD_INT 0
22120: PPUSH
22121: CALL_OW 234
// end ;
22125: GO 22110
22127: POP
22128: POP
// end ;
22129: PPOPN 2
22131: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
22132: LD_EXP 52
22136: PUSH
22137: LD_EXP 58
22141: AND
22142: IFFALSE 22226
22144: GO 22146
22146: DISABLE
22147: LD_INT 0
22149: PPUSH
22150: PPUSH
// begin enable ;
22151: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
22152: LD_ADDR_VAR 0 2
22156: PUSH
22157: LD_INT 22
22159: PUSH
22160: LD_OWVAR 2
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 32
22171: PUSH
22172: LD_INT 3
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PPUSH
22183: CALL_OW 69
22187: ST_TO_ADDR
// if not tmp then
22188: LD_VAR 0 2
22192: NOT
22193: IFFALSE 22197
// exit ;
22195: GO 22226
// for i in tmp do
22197: LD_ADDR_VAR 0 1
22201: PUSH
22202: LD_VAR 0 2
22206: PUSH
22207: FOR_IN
22208: IFFALSE 22224
// begin SetLives ( i , 0 ) ;
22210: LD_VAR 0 1
22214: PPUSH
22215: LD_INT 0
22217: PPUSH
22218: CALL_OW 234
// end ;
22222: GO 22207
22224: POP
22225: POP
// end ;
22226: PPOPN 2
22228: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
22229: LD_EXP 52
22233: PUSH
22234: LD_EXP 55
22238: AND
22239: IFFALSE 22332
22241: GO 22243
22243: DISABLE
22244: LD_INT 0
22246: PPUSH
// begin enable ;
22247: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22248: LD_ADDR_VAR 0 1
22252: PUSH
22253: LD_INT 22
22255: PUSH
22256: LD_OWVAR 2
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 2
22267: PUSH
22268: LD_INT 25
22270: PUSH
22271: LD_INT 5
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PUSH
22278: LD_INT 25
22280: PUSH
22281: LD_INT 9
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 25
22290: PUSH
22291: LD_INT 8
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PPUSH
22308: CALL_OW 69
22312: PUSH
22313: FOR_IN
22314: IFFALSE 22330
// begin SetClass ( i , 1 ) ;
22316: LD_VAR 0 1
22320: PPUSH
22321: LD_INT 1
22323: PPUSH
22324: CALL_OW 336
// end ;
22328: GO 22313
22330: POP
22331: POP
// end ;
22332: PPOPN 1
22334: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22335: LD_EXP 52
22339: PUSH
22340: LD_EXP 56
22344: AND
22345: PUSH
22346: LD_OWVAR 65
22350: PUSH
22351: LD_INT 7
22353: LESS
22354: AND
22355: IFFALSE 22369
22357: GO 22359
22359: DISABLE
// begin enable ;
22360: ENABLE
// game_speed := 7 ;
22361: LD_ADDR_OWVAR 65
22365: PUSH
22366: LD_INT 7
22368: ST_TO_ADDR
// end ;
22369: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
22370: LD_EXP 52
22374: PUSH
22375: LD_EXP 59
22379: AND
22380: IFFALSE 22582
22382: GO 22384
22384: DISABLE
22385: LD_INT 0
22387: PPUSH
22388: PPUSH
22389: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22390: LD_ADDR_VAR 0 3
22394: PUSH
22395: LD_INT 81
22397: PUSH
22398: LD_OWVAR 2
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 21
22409: PUSH
22410: LD_INT 1
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: PPUSH
22421: CALL_OW 69
22425: ST_TO_ADDR
// if not tmp then
22426: LD_VAR 0 3
22430: NOT
22431: IFFALSE 22435
// exit ;
22433: GO 22582
// if tmp > 5 then
22435: LD_VAR 0 3
22439: PUSH
22440: LD_INT 5
22442: GREATER
22443: IFFALSE 22455
// k := 5 else
22445: LD_ADDR_VAR 0 2
22449: PUSH
22450: LD_INT 5
22452: ST_TO_ADDR
22453: GO 22465
// k := tmp ;
22455: LD_ADDR_VAR 0 2
22459: PUSH
22460: LD_VAR 0 3
22464: ST_TO_ADDR
// for i := 1 to k do
22465: LD_ADDR_VAR 0 1
22469: PUSH
22470: DOUBLE
22471: LD_INT 1
22473: DEC
22474: ST_TO_ADDR
22475: LD_VAR 0 2
22479: PUSH
22480: FOR_TO
22481: IFFALSE 22580
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22483: LD_VAR 0 3
22487: PUSH
22488: LD_VAR 0 1
22492: ARRAY
22493: PPUSH
22494: LD_VAR 0 1
22498: PUSH
22499: LD_INT 4
22501: MOD
22502: PUSH
22503: LD_INT 1
22505: PLUS
22506: PPUSH
22507: CALL_OW 259
22511: PUSH
22512: LD_INT 10
22514: LESS
22515: IFFALSE 22578
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22517: LD_VAR 0 3
22521: PUSH
22522: LD_VAR 0 1
22526: ARRAY
22527: PPUSH
22528: LD_VAR 0 1
22532: PUSH
22533: LD_INT 4
22535: MOD
22536: PUSH
22537: LD_INT 1
22539: PLUS
22540: PPUSH
22541: LD_VAR 0 3
22545: PUSH
22546: LD_VAR 0 1
22550: ARRAY
22551: PPUSH
22552: LD_VAR 0 1
22556: PUSH
22557: LD_INT 4
22559: MOD
22560: PUSH
22561: LD_INT 1
22563: PLUS
22564: PPUSH
22565: CALL_OW 259
22569: PUSH
22570: LD_INT 1
22572: PLUS
22573: PPUSH
22574: CALL_OW 237
22578: GO 22480
22580: POP
22581: POP
// end ;
22582: PPOPN 3
22584: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22585: LD_EXP 52
22589: PUSH
22590: LD_EXP 60
22594: AND
22595: IFFALSE 22615
22597: GO 22599
22599: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22600: LD_INT 4
22602: PPUSH
22603: LD_OWVAR 2
22607: PPUSH
22608: LD_INT 0
22610: PPUSH
22611: CALL_OW 324
22615: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22616: LD_EXP 52
22620: PUSH
22621: LD_EXP 89
22625: AND
22626: IFFALSE 22646
22628: GO 22630
22630: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22631: LD_INT 19
22633: PPUSH
22634: LD_OWVAR 2
22638: PPUSH
22639: LD_INT 0
22641: PPUSH
22642: CALL_OW 324
22646: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22647: LD_EXP 52
22651: PUSH
22652: LD_EXP 61
22656: AND
22657: IFFALSE 22759
22659: GO 22661
22661: DISABLE
22662: LD_INT 0
22664: PPUSH
22665: PPUSH
// begin enable ;
22666: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22667: LD_ADDR_VAR 0 2
22671: PUSH
22672: LD_INT 22
22674: PUSH
22675: LD_OWVAR 2
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: PUSH
22684: LD_INT 2
22686: PUSH
22687: LD_INT 34
22689: PUSH
22690: LD_INT 11
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 34
22699: PUSH
22700: LD_INT 30
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: LIST
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PPUSH
22716: CALL_OW 69
22720: ST_TO_ADDR
// if not tmp then
22721: LD_VAR 0 2
22725: NOT
22726: IFFALSE 22730
// exit ;
22728: GO 22759
// for i in tmp do
22730: LD_ADDR_VAR 0 1
22734: PUSH
22735: LD_VAR 0 2
22739: PUSH
22740: FOR_IN
22741: IFFALSE 22757
// begin SetLives ( i , 0 ) ;
22743: LD_VAR 0 1
22747: PPUSH
22748: LD_INT 0
22750: PPUSH
22751: CALL_OW 234
// end ;
22755: GO 22740
22757: POP
22758: POP
// end ;
22759: PPOPN 2
22761: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22762: LD_EXP 52
22766: PUSH
22767: LD_EXP 62
22771: AND
22772: IFFALSE 22792
22774: GO 22776
22776: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22777: LD_INT 32
22779: PPUSH
22780: LD_OWVAR 2
22784: PPUSH
22785: LD_INT 0
22787: PPUSH
22788: CALL_OW 324
22792: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22793: LD_EXP 52
22797: PUSH
22798: LD_EXP 63
22802: AND
22803: IFFALSE 22984
22805: GO 22807
22807: DISABLE
22808: LD_INT 0
22810: PPUSH
22811: PPUSH
22812: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22813: LD_ADDR_VAR 0 2
22817: PUSH
22818: LD_INT 22
22820: PUSH
22821: LD_OWVAR 2
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: LD_INT 33
22832: PUSH
22833: LD_INT 3
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PPUSH
22844: CALL_OW 69
22848: ST_TO_ADDR
// if not tmp then
22849: LD_VAR 0 2
22853: NOT
22854: IFFALSE 22858
// exit ;
22856: GO 22984
// side := 0 ;
22858: LD_ADDR_VAR 0 3
22862: PUSH
22863: LD_INT 0
22865: ST_TO_ADDR
// for i := 1 to 8 do
22866: LD_ADDR_VAR 0 1
22870: PUSH
22871: DOUBLE
22872: LD_INT 1
22874: DEC
22875: ST_TO_ADDR
22876: LD_INT 8
22878: PUSH
22879: FOR_TO
22880: IFFALSE 22928
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22882: LD_OWVAR 2
22886: PUSH
22887: LD_VAR 0 1
22891: NONEQUAL
22892: PUSH
22893: LD_OWVAR 2
22897: PPUSH
22898: LD_VAR 0 1
22902: PPUSH
22903: CALL_OW 81
22907: PUSH
22908: LD_INT 2
22910: EQUAL
22911: AND
22912: IFFALSE 22926
// begin side := i ;
22914: LD_ADDR_VAR 0 3
22918: PUSH
22919: LD_VAR 0 1
22923: ST_TO_ADDR
// break ;
22924: GO 22928
// end ;
22926: GO 22879
22928: POP
22929: POP
// if not side then
22930: LD_VAR 0 3
22934: NOT
22935: IFFALSE 22939
// exit ;
22937: GO 22984
// for i := 1 to tmp do
22939: LD_ADDR_VAR 0 1
22943: PUSH
22944: DOUBLE
22945: LD_INT 1
22947: DEC
22948: ST_TO_ADDR
22949: LD_VAR 0 2
22953: PUSH
22954: FOR_TO
22955: IFFALSE 22982
// if Prob ( 60 ) then
22957: LD_INT 60
22959: PPUSH
22960: CALL_OW 13
22964: IFFALSE 22980
// SetSide ( i , side ) ;
22966: LD_VAR 0 1
22970: PPUSH
22971: LD_VAR 0 3
22975: PPUSH
22976: CALL_OW 235
22980: GO 22954
22982: POP
22983: POP
// end ;
22984: PPOPN 3
22986: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22987: LD_EXP 52
22991: PUSH
22992: LD_EXP 65
22996: AND
22997: IFFALSE 23116
22999: GO 23001
23001: DISABLE
23002: LD_INT 0
23004: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
23005: LD_ADDR_VAR 0 1
23009: PUSH
23010: LD_INT 22
23012: PUSH
23013: LD_OWVAR 2
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 21
23024: PUSH
23025: LD_INT 1
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 3
23034: PUSH
23035: LD_INT 23
23037: PUSH
23038: LD_INT 0
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: LIST
23053: PPUSH
23054: CALL_OW 69
23058: PUSH
23059: FOR_IN
23060: IFFALSE 23114
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
23062: LD_VAR 0 1
23066: PPUSH
23067: CALL_OW 257
23071: PUSH
23072: LD_INT 1
23074: PUSH
23075: LD_INT 2
23077: PUSH
23078: LD_INT 3
23080: PUSH
23081: LD_INT 4
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: IN
23090: IFFALSE 23112
// SetClass ( un , rand ( 1 , 4 ) ) ;
23092: LD_VAR 0 1
23096: PPUSH
23097: LD_INT 1
23099: PPUSH
23100: LD_INT 4
23102: PPUSH
23103: CALL_OW 12
23107: PPUSH
23108: CALL_OW 336
23112: GO 23059
23114: POP
23115: POP
// end ;
23116: PPOPN 1
23118: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
23119: LD_EXP 52
23123: PUSH
23124: LD_EXP 64
23128: AND
23129: IFFALSE 23208
23131: GO 23133
23133: DISABLE
23134: LD_INT 0
23136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23137: LD_ADDR_VAR 0 1
23141: PUSH
23142: LD_INT 22
23144: PUSH
23145: LD_OWVAR 2
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 21
23156: PUSH
23157: LD_INT 3
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PPUSH
23168: CALL_OW 69
23172: ST_TO_ADDR
// if not tmp then
23173: LD_VAR 0 1
23177: NOT
23178: IFFALSE 23182
// exit ;
23180: GO 23208
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
23182: LD_VAR 0 1
23186: PUSH
23187: LD_INT 1
23189: PPUSH
23190: LD_VAR 0 1
23194: PPUSH
23195: CALL_OW 12
23199: ARRAY
23200: PPUSH
23201: LD_INT 100
23203: PPUSH
23204: CALL_OW 234
// end ;
23208: PPOPN 1
23210: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
23211: LD_EXP 52
23215: PUSH
23216: LD_EXP 66
23220: AND
23221: IFFALSE 23319
23223: GO 23225
23225: DISABLE
23226: LD_INT 0
23228: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23229: LD_ADDR_VAR 0 1
23233: PUSH
23234: LD_INT 22
23236: PUSH
23237: LD_OWVAR 2
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: LD_INT 21
23248: PUSH
23249: LD_INT 1
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PPUSH
23260: CALL_OW 69
23264: ST_TO_ADDR
// if not tmp then
23265: LD_VAR 0 1
23269: NOT
23270: IFFALSE 23274
// exit ;
23272: GO 23319
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
23274: LD_VAR 0 1
23278: PUSH
23279: LD_INT 1
23281: PPUSH
23282: LD_VAR 0 1
23286: PPUSH
23287: CALL_OW 12
23291: ARRAY
23292: PPUSH
23293: LD_INT 1
23295: PPUSH
23296: LD_INT 4
23298: PPUSH
23299: CALL_OW 12
23303: PPUSH
23304: LD_INT 3000
23306: PPUSH
23307: LD_INT 9000
23309: PPUSH
23310: CALL_OW 12
23314: PPUSH
23315: CALL_OW 492
// end ;
23319: PPOPN 1
23321: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23322: LD_EXP 52
23326: PUSH
23327: LD_EXP 67
23331: AND
23332: IFFALSE 23352
23334: GO 23336
23336: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
23337: LD_INT 1
23339: PPUSH
23340: LD_OWVAR 2
23344: PPUSH
23345: LD_INT 0
23347: PPUSH
23348: CALL_OW 324
23352: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
23353: LD_EXP 52
23357: PUSH
23358: LD_EXP 68
23362: AND
23363: IFFALSE 23446
23365: GO 23367
23367: DISABLE
23368: LD_INT 0
23370: PPUSH
23371: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23372: LD_ADDR_VAR 0 2
23376: PUSH
23377: LD_INT 22
23379: PUSH
23380: LD_OWVAR 2
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PUSH
23389: LD_INT 21
23391: PUSH
23392: LD_INT 3
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: PPUSH
23403: CALL_OW 69
23407: ST_TO_ADDR
// if not tmp then
23408: LD_VAR 0 2
23412: NOT
23413: IFFALSE 23417
// exit ;
23415: GO 23446
// for i in tmp do
23417: LD_ADDR_VAR 0 1
23421: PUSH
23422: LD_VAR 0 2
23426: PUSH
23427: FOR_IN
23428: IFFALSE 23444
// SetBLevel ( i , 10 ) ;
23430: LD_VAR 0 1
23434: PPUSH
23435: LD_INT 10
23437: PPUSH
23438: CALL_OW 241
23442: GO 23427
23444: POP
23445: POP
// end ;
23446: PPOPN 2
23448: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23449: LD_EXP 52
23453: PUSH
23454: LD_EXP 69
23458: AND
23459: IFFALSE 23570
23461: GO 23463
23463: DISABLE
23464: LD_INT 0
23466: PPUSH
23467: PPUSH
23468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23469: LD_ADDR_VAR 0 3
23473: PUSH
23474: LD_INT 22
23476: PUSH
23477: LD_OWVAR 2
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: LD_INT 25
23488: PUSH
23489: LD_INT 1
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PPUSH
23500: CALL_OW 69
23504: ST_TO_ADDR
// if not tmp then
23505: LD_VAR 0 3
23509: NOT
23510: IFFALSE 23514
// exit ;
23512: GO 23570
// un := tmp [ rand ( 1 , tmp ) ] ;
23514: LD_ADDR_VAR 0 2
23518: PUSH
23519: LD_VAR 0 3
23523: PUSH
23524: LD_INT 1
23526: PPUSH
23527: LD_VAR 0 3
23531: PPUSH
23532: CALL_OW 12
23536: ARRAY
23537: ST_TO_ADDR
// if Crawls ( un ) then
23538: LD_VAR 0 2
23542: PPUSH
23543: CALL_OW 318
23547: IFFALSE 23558
// ComWalk ( un ) ;
23549: LD_VAR 0 2
23553: PPUSH
23554: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23558: LD_VAR 0 2
23562: PPUSH
23563: LD_INT 5
23565: PPUSH
23566: CALL_OW 336
// end ;
23570: PPOPN 3
23572: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
23573: LD_EXP 52
23577: PUSH
23578: LD_EXP 70
23582: AND
23583: PUSH
23584: LD_OWVAR 67
23588: PUSH
23589: LD_INT 4
23591: LESS
23592: AND
23593: IFFALSE 23612
23595: GO 23597
23597: DISABLE
// begin Difficulty := Difficulty + 1 ;
23598: LD_ADDR_OWVAR 67
23602: PUSH
23603: LD_OWVAR 67
23607: PUSH
23608: LD_INT 1
23610: PLUS
23611: ST_TO_ADDR
// end ;
23612: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23613: LD_EXP 52
23617: PUSH
23618: LD_EXP 71
23622: AND
23623: IFFALSE 23726
23625: GO 23627
23627: DISABLE
23628: LD_INT 0
23630: PPUSH
// begin for i := 1 to 5 do
23631: LD_ADDR_VAR 0 1
23635: PUSH
23636: DOUBLE
23637: LD_INT 1
23639: DEC
23640: ST_TO_ADDR
23641: LD_INT 5
23643: PUSH
23644: FOR_TO
23645: IFFALSE 23724
// begin uc_nation := nation_nature ;
23647: LD_ADDR_OWVAR 21
23651: PUSH
23652: LD_INT 0
23654: ST_TO_ADDR
// uc_side := 0 ;
23655: LD_ADDR_OWVAR 20
23659: PUSH
23660: LD_INT 0
23662: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23663: LD_ADDR_OWVAR 29
23667: PUSH
23668: LD_INT 12
23670: PUSH
23671: LD_INT 12
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: ST_TO_ADDR
// hc_agressivity := 20 ;
23678: LD_ADDR_OWVAR 35
23682: PUSH
23683: LD_INT 20
23685: ST_TO_ADDR
// hc_class := class_tiger ;
23686: LD_ADDR_OWVAR 28
23690: PUSH
23691: LD_INT 14
23693: ST_TO_ADDR
// hc_gallery :=  ;
23694: LD_ADDR_OWVAR 33
23698: PUSH
23699: LD_STRING 
23701: ST_TO_ADDR
// hc_name :=  ;
23702: LD_ADDR_OWVAR 26
23706: PUSH
23707: LD_STRING 
23709: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23710: CALL_OW 44
23714: PPUSH
23715: LD_INT 0
23717: PPUSH
23718: CALL_OW 51
// end ;
23722: GO 23644
23724: POP
23725: POP
// end ;
23726: PPOPN 1
23728: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23729: LD_EXP 52
23733: PUSH
23734: LD_EXP 72
23738: AND
23739: IFFALSE 23748
23741: GO 23743
23743: DISABLE
// StreamSibBomb ;
23744: CALL 23749 0 0
23748: END
// export function StreamSibBomb ; var i , x , y ; begin
23749: LD_INT 0
23751: PPUSH
23752: PPUSH
23753: PPUSH
23754: PPUSH
// result := false ;
23755: LD_ADDR_VAR 0 1
23759: PUSH
23760: LD_INT 0
23762: ST_TO_ADDR
// for i := 1 to 16 do
23763: LD_ADDR_VAR 0 2
23767: PUSH
23768: DOUBLE
23769: LD_INT 1
23771: DEC
23772: ST_TO_ADDR
23773: LD_INT 16
23775: PUSH
23776: FOR_TO
23777: IFFALSE 23976
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23779: LD_ADDR_VAR 0 3
23783: PUSH
23784: LD_INT 10
23786: PUSH
23787: LD_INT 20
23789: PUSH
23790: LD_INT 30
23792: PUSH
23793: LD_INT 40
23795: PUSH
23796: LD_INT 50
23798: PUSH
23799: LD_INT 60
23801: PUSH
23802: LD_INT 70
23804: PUSH
23805: LD_INT 80
23807: PUSH
23808: LD_INT 90
23810: PUSH
23811: LD_INT 100
23813: PUSH
23814: LD_INT 110
23816: PUSH
23817: LD_INT 120
23819: PUSH
23820: LD_INT 130
23822: PUSH
23823: LD_INT 140
23825: PUSH
23826: LD_INT 150
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: PUSH
23846: LD_INT 1
23848: PPUSH
23849: LD_INT 15
23851: PPUSH
23852: CALL_OW 12
23856: ARRAY
23857: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23858: LD_ADDR_VAR 0 4
23862: PUSH
23863: LD_INT 10
23865: PUSH
23866: LD_INT 20
23868: PUSH
23869: LD_INT 30
23871: PUSH
23872: LD_INT 40
23874: PUSH
23875: LD_INT 50
23877: PUSH
23878: LD_INT 60
23880: PUSH
23881: LD_INT 70
23883: PUSH
23884: LD_INT 80
23886: PUSH
23887: LD_INT 90
23889: PUSH
23890: LD_INT 100
23892: PUSH
23893: LD_INT 110
23895: PUSH
23896: LD_INT 120
23898: PUSH
23899: LD_INT 130
23901: PUSH
23902: LD_INT 140
23904: PUSH
23905: LD_INT 150
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 1
23927: PPUSH
23928: LD_INT 15
23930: PPUSH
23931: CALL_OW 12
23935: ARRAY
23936: ST_TO_ADDR
// if ValidHex ( x , y ) then
23937: LD_VAR 0 3
23941: PPUSH
23942: LD_VAR 0 4
23946: PPUSH
23947: CALL_OW 488
23951: IFFALSE 23974
// begin result := [ x , y ] ;
23953: LD_ADDR_VAR 0 1
23957: PUSH
23958: LD_VAR 0 3
23962: PUSH
23963: LD_VAR 0 4
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: ST_TO_ADDR
// break ;
23972: GO 23976
// end ; end ;
23974: GO 23776
23976: POP
23977: POP
// if result then
23978: LD_VAR 0 1
23982: IFFALSE 24042
// begin ToLua ( playSibBomb() ) ;
23984: LD_STRING playSibBomb()
23986: PPUSH
23987: CALL_OW 559
// wait ( 0 0$14 ) ;
23991: LD_INT 490
23993: PPUSH
23994: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23998: LD_VAR 0 1
24002: PUSH
24003: LD_INT 1
24005: ARRAY
24006: PPUSH
24007: LD_VAR 0 1
24011: PUSH
24012: LD_INT 2
24014: ARRAY
24015: PPUSH
24016: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
24020: LD_VAR 0 1
24024: PUSH
24025: LD_INT 1
24027: ARRAY
24028: PPUSH
24029: LD_VAR 0 1
24033: PUSH
24034: LD_INT 2
24036: ARRAY
24037: PPUSH
24038: CALL_OW 429
// end ; end ;
24042: LD_VAR 0 1
24046: RET
// every 0 0$1 trigger StreamModeActive and sReset do
24047: LD_EXP 52
24051: PUSH
24052: LD_EXP 74
24056: AND
24057: IFFALSE 24069
24059: GO 24061
24061: DISABLE
// YouLost (  ) ;
24062: LD_STRING 
24064: PPUSH
24065: CALL_OW 104
24069: END
// every 0 0$1 trigger StreamModeActive and sFog do
24070: LD_EXP 52
24074: PUSH
24075: LD_EXP 73
24079: AND
24080: IFFALSE 24094
24082: GO 24084
24084: DISABLE
// FogOff ( your_side ) ;
24085: LD_OWVAR 2
24089: PPUSH
24090: CALL_OW 344
24094: END
// every 0 0$1 trigger StreamModeActive and sSun do
24095: LD_EXP 52
24099: PUSH
24100: LD_EXP 75
24104: AND
24105: IFFALSE 24133
24107: GO 24109
24109: DISABLE
// begin solar_recharge_percent := 0 ;
24110: LD_ADDR_OWVAR 79
24114: PUSH
24115: LD_INT 0
24117: ST_TO_ADDR
// wait ( 5 5$00 ) ;
24118: LD_INT 10500
24120: PPUSH
24121: CALL_OW 67
// solar_recharge_percent := 100 ;
24125: LD_ADDR_OWVAR 79
24129: PUSH
24130: LD_INT 100
24132: ST_TO_ADDR
// end ;
24133: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
24134: LD_EXP 52
24138: PUSH
24139: LD_EXP 76
24143: AND
24144: IFFALSE 24383
24146: GO 24148
24148: DISABLE
24149: LD_INT 0
24151: PPUSH
24152: PPUSH
24153: PPUSH
// begin tmp := [ ] ;
24154: LD_ADDR_VAR 0 3
24158: PUSH
24159: EMPTY
24160: ST_TO_ADDR
// for i := 1 to 6 do
24161: LD_ADDR_VAR 0 1
24165: PUSH
24166: DOUBLE
24167: LD_INT 1
24169: DEC
24170: ST_TO_ADDR
24171: LD_INT 6
24173: PUSH
24174: FOR_TO
24175: IFFALSE 24280
// begin uc_nation := nation_nature ;
24177: LD_ADDR_OWVAR 21
24181: PUSH
24182: LD_INT 0
24184: ST_TO_ADDR
// uc_side := 0 ;
24185: LD_ADDR_OWVAR 20
24189: PUSH
24190: LD_INT 0
24192: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24193: LD_ADDR_OWVAR 29
24197: PUSH
24198: LD_INT 12
24200: PUSH
24201: LD_INT 12
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: ST_TO_ADDR
// hc_agressivity := 20 ;
24208: LD_ADDR_OWVAR 35
24212: PUSH
24213: LD_INT 20
24215: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
24216: LD_ADDR_OWVAR 28
24220: PUSH
24221: LD_INT 17
24223: ST_TO_ADDR
// hc_gallery :=  ;
24224: LD_ADDR_OWVAR 33
24228: PUSH
24229: LD_STRING 
24231: ST_TO_ADDR
// hc_name :=  ;
24232: LD_ADDR_OWVAR 26
24236: PUSH
24237: LD_STRING 
24239: ST_TO_ADDR
// un := CreateHuman ;
24240: LD_ADDR_VAR 0 2
24244: PUSH
24245: CALL_OW 44
24249: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24250: LD_VAR 0 2
24254: PPUSH
24255: LD_INT 1
24257: PPUSH
24258: CALL_OW 51
// tmp := tmp ^ un ;
24262: LD_ADDR_VAR 0 3
24266: PUSH
24267: LD_VAR 0 3
24271: PUSH
24272: LD_VAR 0 2
24276: ADD
24277: ST_TO_ADDR
// end ;
24278: GO 24174
24280: POP
24281: POP
// repeat wait ( 0 0$1 ) ;
24282: LD_INT 35
24284: PPUSH
24285: CALL_OW 67
// for un in tmp do
24289: LD_ADDR_VAR 0 2
24293: PUSH
24294: LD_VAR 0 3
24298: PUSH
24299: FOR_IN
24300: IFFALSE 24374
// begin if IsDead ( un ) then
24302: LD_VAR 0 2
24306: PPUSH
24307: CALL_OW 301
24311: IFFALSE 24331
// begin tmp := tmp diff un ;
24313: LD_ADDR_VAR 0 3
24317: PUSH
24318: LD_VAR 0 3
24322: PUSH
24323: LD_VAR 0 2
24327: DIFF
24328: ST_TO_ADDR
// continue ;
24329: GO 24299
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24331: LD_VAR 0 2
24335: PPUSH
24336: LD_INT 3
24338: PUSH
24339: LD_INT 22
24341: PUSH
24342: LD_INT 0
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: PPUSH
24353: CALL_OW 69
24357: PPUSH
24358: LD_VAR 0 2
24362: PPUSH
24363: CALL_OW 74
24367: PPUSH
24368: CALL_OW 115
// end ;
24372: GO 24299
24374: POP
24375: POP
// until not tmp ;
24376: LD_VAR 0 3
24380: NOT
24381: IFFALSE 24282
// end ;
24383: PPOPN 3
24385: END
// every 0 0$1 trigger StreamModeActive and sTroll do
24386: LD_EXP 52
24390: PUSH
24391: LD_EXP 77
24395: AND
24396: IFFALSE 24450
24398: GO 24400
24400: DISABLE
// begin ToLua ( displayTroll(); ) ;
24401: LD_STRING displayTroll();
24403: PPUSH
24404: CALL_OW 559
// wait ( 3 3$00 ) ;
24408: LD_INT 6300
24410: PPUSH
24411: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24415: LD_STRING hideTroll();
24417: PPUSH
24418: CALL_OW 559
// wait ( 1 1$00 ) ;
24422: LD_INT 2100
24424: PPUSH
24425: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24429: LD_STRING displayTroll();
24431: PPUSH
24432: CALL_OW 559
// wait ( 1 1$00 ) ;
24436: LD_INT 2100
24438: PPUSH
24439: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24443: LD_STRING hideTroll();
24445: PPUSH
24446: CALL_OW 559
// end ;
24450: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24451: LD_EXP 52
24455: PUSH
24456: LD_EXP 78
24460: AND
24461: IFFALSE 24524
24463: GO 24465
24465: DISABLE
24466: LD_INT 0
24468: PPUSH
// begin p := 0 ;
24469: LD_ADDR_VAR 0 1
24473: PUSH
24474: LD_INT 0
24476: ST_TO_ADDR
// repeat game_speed := 1 ;
24477: LD_ADDR_OWVAR 65
24481: PUSH
24482: LD_INT 1
24484: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24485: LD_INT 35
24487: PPUSH
24488: CALL_OW 67
// p := p + 1 ;
24492: LD_ADDR_VAR 0 1
24496: PUSH
24497: LD_VAR 0 1
24501: PUSH
24502: LD_INT 1
24504: PLUS
24505: ST_TO_ADDR
// until p >= 60 ;
24506: LD_VAR 0 1
24510: PUSH
24511: LD_INT 60
24513: GREATEREQUAL
24514: IFFALSE 24477
// game_speed := 4 ;
24516: LD_ADDR_OWVAR 65
24520: PUSH
24521: LD_INT 4
24523: ST_TO_ADDR
// end ;
24524: PPOPN 1
24526: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24527: LD_EXP 52
24531: PUSH
24532: LD_EXP 79
24536: AND
24537: IFFALSE 24683
24539: GO 24541
24541: DISABLE
24542: LD_INT 0
24544: PPUSH
24545: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24546: LD_ADDR_VAR 0 1
24550: PUSH
24551: LD_INT 22
24553: PUSH
24554: LD_OWVAR 2
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 2
24565: PUSH
24566: LD_INT 30
24568: PUSH
24569: LD_INT 0
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: PUSH
24576: LD_INT 30
24578: PUSH
24579: LD_INT 1
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: LIST
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PPUSH
24595: CALL_OW 69
24599: ST_TO_ADDR
// if not depot then
24600: LD_VAR 0 1
24604: NOT
24605: IFFALSE 24609
// exit ;
24607: GO 24683
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24609: LD_ADDR_VAR 0 2
24613: PUSH
24614: LD_VAR 0 1
24618: PUSH
24619: LD_INT 1
24621: PPUSH
24622: LD_VAR 0 1
24626: PPUSH
24627: CALL_OW 12
24631: ARRAY
24632: PPUSH
24633: CALL_OW 274
24637: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24638: LD_VAR 0 2
24642: PPUSH
24643: LD_INT 1
24645: PPUSH
24646: LD_INT 0
24648: PPUSH
24649: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24653: LD_VAR 0 2
24657: PPUSH
24658: LD_INT 2
24660: PPUSH
24661: LD_INT 0
24663: PPUSH
24664: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24668: LD_VAR 0 2
24672: PPUSH
24673: LD_INT 3
24675: PPUSH
24676: LD_INT 0
24678: PPUSH
24679: CALL_OW 277
// end ;
24683: PPOPN 2
24685: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24686: LD_EXP 52
24690: PUSH
24691: LD_EXP 80
24695: AND
24696: IFFALSE 24793
24698: GO 24700
24700: DISABLE
24701: LD_INT 0
24703: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24704: LD_ADDR_VAR 0 1
24708: PUSH
24709: LD_INT 22
24711: PUSH
24712: LD_OWVAR 2
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 21
24723: PUSH
24724: LD_INT 1
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 3
24733: PUSH
24734: LD_INT 23
24736: PUSH
24737: LD_INT 0
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: LIST
24752: PPUSH
24753: CALL_OW 69
24757: ST_TO_ADDR
// if not tmp then
24758: LD_VAR 0 1
24762: NOT
24763: IFFALSE 24767
// exit ;
24765: GO 24793
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24767: LD_VAR 0 1
24771: PUSH
24772: LD_INT 1
24774: PPUSH
24775: LD_VAR 0 1
24779: PPUSH
24780: CALL_OW 12
24784: ARRAY
24785: PPUSH
24786: LD_INT 200
24788: PPUSH
24789: CALL_OW 234
// end ;
24793: PPOPN 1
24795: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24796: LD_EXP 52
24800: PUSH
24801: LD_EXP 81
24805: AND
24806: IFFALSE 24885
24808: GO 24810
24810: DISABLE
24811: LD_INT 0
24813: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24814: LD_ADDR_VAR 0 1
24818: PUSH
24819: LD_INT 22
24821: PUSH
24822: LD_OWVAR 2
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 21
24833: PUSH
24834: LD_INT 2
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PPUSH
24845: CALL_OW 69
24849: ST_TO_ADDR
// if not tmp then
24850: LD_VAR 0 1
24854: NOT
24855: IFFALSE 24859
// exit ;
24857: GO 24885
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24859: LD_VAR 0 1
24863: PUSH
24864: LD_INT 1
24866: PPUSH
24867: LD_VAR 0 1
24871: PPUSH
24872: CALL_OW 12
24876: ARRAY
24877: PPUSH
24878: LD_INT 60
24880: PPUSH
24881: CALL_OW 234
// end ;
24885: PPOPN 1
24887: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24888: LD_EXP 52
24892: PUSH
24893: LD_EXP 82
24897: AND
24898: IFFALSE 24997
24900: GO 24902
24902: DISABLE
24903: LD_INT 0
24905: PPUSH
24906: PPUSH
// begin enable ;
24907: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24908: LD_ADDR_VAR 0 1
24912: PUSH
24913: LD_INT 22
24915: PUSH
24916: LD_OWVAR 2
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 61
24927: PUSH
24928: EMPTY
24929: LIST
24930: PUSH
24931: LD_INT 33
24933: PUSH
24934: LD_INT 2
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: LIST
24945: PPUSH
24946: CALL_OW 69
24950: ST_TO_ADDR
// if not tmp then
24951: LD_VAR 0 1
24955: NOT
24956: IFFALSE 24960
// exit ;
24958: GO 24997
// for i in tmp do
24960: LD_ADDR_VAR 0 2
24964: PUSH
24965: LD_VAR 0 1
24969: PUSH
24970: FOR_IN
24971: IFFALSE 24995
// if IsControledBy ( i ) then
24973: LD_VAR 0 2
24977: PPUSH
24978: CALL_OW 312
24982: IFFALSE 24993
// ComUnlink ( i ) ;
24984: LD_VAR 0 2
24988: PPUSH
24989: CALL_OW 136
24993: GO 24970
24995: POP
24996: POP
// end ;
24997: PPOPN 2
24999: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
25000: LD_EXP 52
25004: PUSH
25005: LD_EXP 83
25009: AND
25010: IFFALSE 25150
25012: GO 25014
25014: DISABLE
25015: LD_INT 0
25017: PPUSH
25018: PPUSH
// begin ToLua ( displayPowell(); ) ;
25019: LD_STRING displayPowell();
25021: PPUSH
25022: CALL_OW 559
// uc_side := 0 ;
25026: LD_ADDR_OWVAR 20
25030: PUSH
25031: LD_INT 0
25033: ST_TO_ADDR
// uc_nation := 2 ;
25034: LD_ADDR_OWVAR 21
25038: PUSH
25039: LD_INT 2
25041: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
25042: LD_ADDR_OWVAR 37
25046: PUSH
25047: LD_INT 14
25049: ST_TO_ADDR
// vc_engine := engine_siberite ;
25050: LD_ADDR_OWVAR 39
25054: PUSH
25055: LD_INT 3
25057: ST_TO_ADDR
// vc_control := control_apeman ;
25058: LD_ADDR_OWVAR 38
25062: PUSH
25063: LD_INT 5
25065: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25066: LD_ADDR_OWVAR 40
25070: PUSH
25071: LD_INT 29
25073: ST_TO_ADDR
// un := CreateVehicle ;
25074: LD_ADDR_VAR 0 2
25078: PUSH
25079: CALL_OW 45
25083: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25084: LD_VAR 0 2
25088: PPUSH
25089: LD_INT 1
25091: PPUSH
25092: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25096: LD_INT 35
25098: PPUSH
25099: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25103: LD_VAR 0 2
25107: PPUSH
25108: LD_INT 22
25110: PUSH
25111: LD_OWVAR 2
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PPUSH
25120: CALL_OW 69
25124: PPUSH
25125: LD_VAR 0 2
25129: PPUSH
25130: CALL_OW 74
25134: PPUSH
25135: CALL_OW 115
// until IsDead ( un ) ;
25139: LD_VAR 0 2
25143: PPUSH
25144: CALL_OW 301
25148: IFFALSE 25096
// end ;
25150: PPOPN 2
25152: END
// every 0 0$1 trigger StreamModeActive and sStu do
25153: LD_EXP 52
25157: PUSH
25158: LD_EXP 91
25162: AND
25163: IFFALSE 25179
25165: GO 25167
25167: DISABLE
// begin ToLua ( displayStucuk(); ) ;
25168: LD_STRING displayStucuk();
25170: PPUSH
25171: CALL_OW 559
// ResetFog ;
25175: CALL_OW 335
// end ;
25179: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
25180: LD_EXP 52
25184: PUSH
25185: LD_EXP 84
25189: AND
25190: IFFALSE 25331
25192: GO 25194
25194: DISABLE
25195: LD_INT 0
25197: PPUSH
25198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25199: LD_ADDR_VAR 0 2
25203: PUSH
25204: LD_INT 22
25206: PUSH
25207: LD_OWVAR 2
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 21
25218: PUSH
25219: LD_INT 1
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PPUSH
25230: CALL_OW 69
25234: ST_TO_ADDR
// if not tmp then
25235: LD_VAR 0 2
25239: NOT
25240: IFFALSE 25244
// exit ;
25242: GO 25331
// un := tmp [ rand ( 1 , tmp ) ] ;
25244: LD_ADDR_VAR 0 1
25248: PUSH
25249: LD_VAR 0 2
25253: PUSH
25254: LD_INT 1
25256: PPUSH
25257: LD_VAR 0 2
25261: PPUSH
25262: CALL_OW 12
25266: ARRAY
25267: ST_TO_ADDR
// SetSide ( un , 0 ) ;
25268: LD_VAR 0 1
25272: PPUSH
25273: LD_INT 0
25275: PPUSH
25276: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
25280: LD_VAR 0 1
25284: PPUSH
25285: LD_OWVAR 3
25289: PUSH
25290: LD_VAR 0 1
25294: DIFF
25295: PPUSH
25296: LD_VAR 0 1
25300: PPUSH
25301: CALL_OW 74
25305: PPUSH
25306: CALL_OW 115
// wait ( 0 0$20 ) ;
25310: LD_INT 700
25312: PPUSH
25313: CALL_OW 67
// SetSide ( un , your_side ) ;
25317: LD_VAR 0 1
25321: PPUSH
25322: LD_OWVAR 2
25326: PPUSH
25327: CALL_OW 235
// end ;
25331: PPOPN 2
25333: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25334: LD_EXP 52
25338: PUSH
25339: LD_EXP 85
25343: AND
25344: IFFALSE 25450
25346: GO 25348
25348: DISABLE
25349: LD_INT 0
25351: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25352: LD_ADDR_VAR 0 1
25356: PUSH
25357: LD_INT 22
25359: PUSH
25360: LD_OWVAR 2
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: LD_INT 2
25371: PUSH
25372: LD_INT 30
25374: PUSH
25375: LD_INT 0
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 30
25384: PUSH
25385: LD_INT 1
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: LIST
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PPUSH
25401: CALL_OW 69
25405: ST_TO_ADDR
// if not depot then
25406: LD_VAR 0 1
25410: NOT
25411: IFFALSE 25415
// exit ;
25413: GO 25450
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25415: LD_VAR 0 1
25419: PUSH
25420: LD_INT 1
25422: ARRAY
25423: PPUSH
25424: CALL_OW 250
25428: PPUSH
25429: LD_VAR 0 1
25433: PUSH
25434: LD_INT 1
25436: ARRAY
25437: PPUSH
25438: CALL_OW 251
25442: PPUSH
25443: LD_INT 70
25445: PPUSH
25446: CALL_OW 495
// end ;
25450: PPOPN 1
25452: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25453: LD_EXP 52
25457: PUSH
25458: LD_EXP 86
25462: AND
25463: IFFALSE 25674
25465: GO 25467
25467: DISABLE
25468: LD_INT 0
25470: PPUSH
25471: PPUSH
25472: PPUSH
25473: PPUSH
25474: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25475: LD_ADDR_VAR 0 5
25479: PUSH
25480: LD_INT 22
25482: PUSH
25483: LD_OWVAR 2
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 21
25494: PUSH
25495: LD_INT 1
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PPUSH
25506: CALL_OW 69
25510: ST_TO_ADDR
// if not tmp then
25511: LD_VAR 0 5
25515: NOT
25516: IFFALSE 25520
// exit ;
25518: GO 25674
// for i in tmp do
25520: LD_ADDR_VAR 0 1
25524: PUSH
25525: LD_VAR 0 5
25529: PUSH
25530: FOR_IN
25531: IFFALSE 25672
// begin d := rand ( 0 , 5 ) ;
25533: LD_ADDR_VAR 0 4
25537: PUSH
25538: LD_INT 0
25540: PPUSH
25541: LD_INT 5
25543: PPUSH
25544: CALL_OW 12
25548: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25549: LD_ADDR_VAR 0 2
25553: PUSH
25554: LD_VAR 0 1
25558: PPUSH
25559: CALL_OW 250
25563: PPUSH
25564: LD_VAR 0 4
25568: PPUSH
25569: LD_INT 3
25571: PPUSH
25572: LD_INT 12
25574: PPUSH
25575: CALL_OW 12
25579: PPUSH
25580: CALL_OW 272
25584: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25585: LD_ADDR_VAR 0 3
25589: PUSH
25590: LD_VAR 0 1
25594: PPUSH
25595: CALL_OW 251
25599: PPUSH
25600: LD_VAR 0 4
25604: PPUSH
25605: LD_INT 3
25607: PPUSH
25608: LD_INT 12
25610: PPUSH
25611: CALL_OW 12
25615: PPUSH
25616: CALL_OW 273
25620: ST_TO_ADDR
// if ValidHex ( x , y ) then
25621: LD_VAR 0 2
25625: PPUSH
25626: LD_VAR 0 3
25630: PPUSH
25631: CALL_OW 488
25635: IFFALSE 25670
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25637: LD_VAR 0 1
25641: PPUSH
25642: LD_VAR 0 2
25646: PPUSH
25647: LD_VAR 0 3
25651: PPUSH
25652: LD_INT 3
25654: PPUSH
25655: LD_INT 6
25657: PPUSH
25658: CALL_OW 12
25662: PPUSH
25663: LD_INT 1
25665: PPUSH
25666: CALL_OW 483
// end ;
25670: GO 25530
25672: POP
25673: POP
// end ;
25674: PPOPN 5
25676: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25677: LD_EXP 52
25681: PUSH
25682: LD_EXP 87
25686: AND
25687: IFFALSE 25781
25689: GO 25691
25691: DISABLE
25692: LD_INT 0
25694: PPUSH
25695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25696: LD_ADDR_VAR 0 2
25700: PUSH
25701: LD_INT 22
25703: PUSH
25704: LD_OWVAR 2
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 32
25715: PUSH
25716: LD_INT 1
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: LD_INT 21
25725: PUSH
25726: LD_INT 2
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: LIST
25737: PPUSH
25738: CALL_OW 69
25742: ST_TO_ADDR
// if not tmp then
25743: LD_VAR 0 2
25747: NOT
25748: IFFALSE 25752
// exit ;
25750: GO 25781
// for i in tmp do
25752: LD_ADDR_VAR 0 1
25756: PUSH
25757: LD_VAR 0 2
25761: PUSH
25762: FOR_IN
25763: IFFALSE 25779
// SetFuel ( i , 0 ) ;
25765: LD_VAR 0 1
25769: PPUSH
25770: LD_INT 0
25772: PPUSH
25773: CALL_OW 240
25777: GO 25762
25779: POP
25780: POP
// end ;
25781: PPOPN 2
25783: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25784: LD_EXP 52
25788: PUSH
25789: LD_EXP 88
25793: AND
25794: IFFALSE 25860
25796: GO 25798
25798: DISABLE
25799: LD_INT 0
25801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25802: LD_ADDR_VAR 0 1
25806: PUSH
25807: LD_INT 22
25809: PUSH
25810: LD_OWVAR 2
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 30
25821: PUSH
25822: LD_INT 29
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PPUSH
25833: CALL_OW 69
25837: ST_TO_ADDR
// if not tmp then
25838: LD_VAR 0 1
25842: NOT
25843: IFFALSE 25847
// exit ;
25845: GO 25860
// DestroyUnit ( tmp [ 1 ] ) ;
25847: LD_VAR 0 1
25851: PUSH
25852: LD_INT 1
25854: ARRAY
25855: PPUSH
25856: CALL_OW 65
// end ;
25860: PPOPN 1
25862: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25863: LD_EXP 52
25867: PUSH
25868: LD_EXP 90
25872: AND
25873: IFFALSE 26002
25875: GO 25877
25877: DISABLE
25878: LD_INT 0
25880: PPUSH
// begin uc_side := 0 ;
25881: LD_ADDR_OWVAR 20
25885: PUSH
25886: LD_INT 0
25888: ST_TO_ADDR
// uc_nation := nation_arabian ;
25889: LD_ADDR_OWVAR 21
25893: PUSH
25894: LD_INT 2
25896: ST_TO_ADDR
// hc_gallery :=  ;
25897: LD_ADDR_OWVAR 33
25901: PUSH
25902: LD_STRING 
25904: ST_TO_ADDR
// hc_name :=  ;
25905: LD_ADDR_OWVAR 26
25909: PUSH
25910: LD_STRING 
25912: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25913: LD_INT 1
25915: PPUSH
25916: LD_INT 11
25918: PPUSH
25919: LD_INT 10
25921: PPUSH
25922: CALL_OW 380
// un := CreateHuman ;
25926: LD_ADDR_VAR 0 1
25930: PUSH
25931: CALL_OW 44
25935: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25936: LD_VAR 0 1
25940: PPUSH
25941: LD_INT 1
25943: PPUSH
25944: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25948: LD_INT 35
25950: PPUSH
25951: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25955: LD_VAR 0 1
25959: PPUSH
25960: LD_INT 22
25962: PUSH
25963: LD_OWVAR 2
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PPUSH
25972: CALL_OW 69
25976: PPUSH
25977: LD_VAR 0 1
25981: PPUSH
25982: CALL_OW 74
25986: PPUSH
25987: CALL_OW 115
// until IsDead ( un ) ;
25991: LD_VAR 0 1
25995: PPUSH
25996: CALL_OW 301
26000: IFFALSE 25948
// end ;
26002: PPOPN 1
26004: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26005: LD_EXP 52
26009: PUSH
26010: LD_EXP 92
26014: AND
26015: IFFALSE 26027
26017: GO 26019
26019: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
26020: LD_STRING earthquake(getX(game), 0, 32)
26022: PPUSH
26023: CALL_OW 559
26027: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
26028: LD_EXP 52
26032: PUSH
26033: LD_EXP 93
26037: AND
26038: IFFALSE 26129
26040: GO 26042
26042: DISABLE
26043: LD_INT 0
26045: PPUSH
// begin enable ;
26046: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26047: LD_ADDR_VAR 0 1
26051: PUSH
26052: LD_INT 22
26054: PUSH
26055: LD_OWVAR 2
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 21
26066: PUSH
26067: LD_INT 2
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: LD_INT 33
26076: PUSH
26077: LD_INT 3
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: LIST
26088: PPUSH
26089: CALL_OW 69
26093: ST_TO_ADDR
// if not tmp then
26094: LD_VAR 0 1
26098: NOT
26099: IFFALSE 26103
// exit ;
26101: GO 26129
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26103: LD_VAR 0 1
26107: PUSH
26108: LD_INT 1
26110: PPUSH
26111: LD_VAR 0 1
26115: PPUSH
26116: CALL_OW 12
26120: ARRAY
26121: PPUSH
26122: LD_INT 1
26124: PPUSH
26125: CALL_OW 234
// end ;
26129: PPOPN 1
26131: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
26132: LD_EXP 52
26136: PUSH
26137: LD_EXP 94
26141: AND
26142: IFFALSE 26283
26144: GO 26146
26146: DISABLE
26147: LD_INT 0
26149: PPUSH
26150: PPUSH
26151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26152: LD_ADDR_VAR 0 3
26156: PUSH
26157: LD_INT 22
26159: PUSH
26160: LD_OWVAR 2
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 25
26171: PUSH
26172: LD_INT 1
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PPUSH
26183: CALL_OW 69
26187: ST_TO_ADDR
// if not tmp then
26188: LD_VAR 0 3
26192: NOT
26193: IFFALSE 26197
// exit ;
26195: GO 26283
// un := tmp [ rand ( 1 , tmp ) ] ;
26197: LD_ADDR_VAR 0 2
26201: PUSH
26202: LD_VAR 0 3
26206: PUSH
26207: LD_INT 1
26209: PPUSH
26210: LD_VAR 0 3
26214: PPUSH
26215: CALL_OW 12
26219: ARRAY
26220: ST_TO_ADDR
// if Crawls ( un ) then
26221: LD_VAR 0 2
26225: PPUSH
26226: CALL_OW 318
26230: IFFALSE 26241
// ComWalk ( un ) ;
26232: LD_VAR 0 2
26236: PPUSH
26237: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26241: LD_VAR 0 2
26245: PPUSH
26246: LD_INT 9
26248: PPUSH
26249: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
26253: LD_INT 28
26255: PPUSH
26256: LD_OWVAR 2
26260: PPUSH
26261: LD_INT 2
26263: PPUSH
26264: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
26268: LD_INT 29
26270: PPUSH
26271: LD_OWVAR 2
26275: PPUSH
26276: LD_INT 2
26278: PPUSH
26279: CALL_OW 322
// end ;
26283: PPOPN 3
26285: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
26286: LD_EXP 52
26290: PUSH
26291: LD_EXP 95
26295: AND
26296: IFFALSE 26407
26298: GO 26300
26300: DISABLE
26301: LD_INT 0
26303: PPUSH
26304: PPUSH
26305: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26306: LD_ADDR_VAR 0 3
26310: PUSH
26311: LD_INT 22
26313: PUSH
26314: LD_OWVAR 2
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 25
26325: PUSH
26326: LD_INT 1
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PPUSH
26337: CALL_OW 69
26341: ST_TO_ADDR
// if not tmp then
26342: LD_VAR 0 3
26346: NOT
26347: IFFALSE 26351
// exit ;
26349: GO 26407
// un := tmp [ rand ( 1 , tmp ) ] ;
26351: LD_ADDR_VAR 0 2
26355: PUSH
26356: LD_VAR 0 3
26360: PUSH
26361: LD_INT 1
26363: PPUSH
26364: LD_VAR 0 3
26368: PPUSH
26369: CALL_OW 12
26373: ARRAY
26374: ST_TO_ADDR
// if Crawls ( un ) then
26375: LD_VAR 0 2
26379: PPUSH
26380: CALL_OW 318
26384: IFFALSE 26395
// ComWalk ( un ) ;
26386: LD_VAR 0 2
26390: PPUSH
26391: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26395: LD_VAR 0 2
26399: PPUSH
26400: LD_INT 8
26402: PPUSH
26403: CALL_OW 336
// end ;
26407: PPOPN 3
26409: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26410: LD_EXP 52
26414: PUSH
26415: LD_EXP 96
26419: AND
26420: IFFALSE 26564
26422: GO 26424
26424: DISABLE
26425: LD_INT 0
26427: PPUSH
26428: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26429: LD_ADDR_VAR 0 2
26433: PUSH
26434: LD_INT 22
26436: PUSH
26437: LD_OWVAR 2
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 21
26448: PUSH
26449: LD_INT 2
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 2
26458: PUSH
26459: LD_INT 34
26461: PUSH
26462: LD_INT 12
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 34
26471: PUSH
26472: LD_INT 51
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 34
26481: PUSH
26482: LD_INT 32
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: LIST
26499: PPUSH
26500: CALL_OW 69
26504: ST_TO_ADDR
// if not tmp then
26505: LD_VAR 0 2
26509: NOT
26510: IFFALSE 26514
// exit ;
26512: GO 26564
// for i in tmp do
26514: LD_ADDR_VAR 0 1
26518: PUSH
26519: LD_VAR 0 2
26523: PUSH
26524: FOR_IN
26525: IFFALSE 26562
// if GetCargo ( i , mat_artifact ) = 0 then
26527: LD_VAR 0 1
26531: PPUSH
26532: LD_INT 4
26534: PPUSH
26535: CALL_OW 289
26539: PUSH
26540: LD_INT 0
26542: EQUAL
26543: IFFALSE 26560
// SetCargo ( i , mat_siberit , 100 ) ;
26545: LD_VAR 0 1
26549: PPUSH
26550: LD_INT 3
26552: PPUSH
26553: LD_INT 100
26555: PPUSH
26556: CALL_OW 290
26560: GO 26524
26562: POP
26563: POP
// end ;
26564: PPOPN 2
26566: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26567: LD_EXP 52
26571: PUSH
26572: LD_EXP 97
26576: AND
26577: IFFALSE 26760
26579: GO 26581
26581: DISABLE
26582: LD_INT 0
26584: PPUSH
26585: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26586: LD_ADDR_VAR 0 2
26590: PUSH
26591: LD_INT 22
26593: PUSH
26594: LD_OWVAR 2
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PPUSH
26603: CALL_OW 69
26607: ST_TO_ADDR
// if not tmp then
26608: LD_VAR 0 2
26612: NOT
26613: IFFALSE 26617
// exit ;
26615: GO 26760
// for i := 1 to 2 do
26617: LD_ADDR_VAR 0 1
26621: PUSH
26622: DOUBLE
26623: LD_INT 1
26625: DEC
26626: ST_TO_ADDR
26627: LD_INT 2
26629: PUSH
26630: FOR_TO
26631: IFFALSE 26758
// begin uc_side := your_side ;
26633: LD_ADDR_OWVAR 20
26637: PUSH
26638: LD_OWVAR 2
26642: ST_TO_ADDR
// uc_nation := nation_american ;
26643: LD_ADDR_OWVAR 21
26647: PUSH
26648: LD_INT 1
26650: ST_TO_ADDR
// vc_chassis := us_morphling ;
26651: LD_ADDR_OWVAR 37
26655: PUSH
26656: LD_INT 5
26658: ST_TO_ADDR
// vc_engine := engine_siberite ;
26659: LD_ADDR_OWVAR 39
26663: PUSH
26664: LD_INT 3
26666: ST_TO_ADDR
// vc_control := control_computer ;
26667: LD_ADDR_OWVAR 38
26671: PUSH
26672: LD_INT 3
26674: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26675: LD_ADDR_OWVAR 40
26679: PUSH
26680: LD_INT 10
26682: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26683: LD_VAR 0 2
26687: PUSH
26688: LD_INT 1
26690: ARRAY
26691: PPUSH
26692: CALL_OW 310
26696: NOT
26697: IFFALSE 26744
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26699: CALL_OW 45
26703: PPUSH
26704: LD_VAR 0 2
26708: PUSH
26709: LD_INT 1
26711: ARRAY
26712: PPUSH
26713: CALL_OW 250
26717: PPUSH
26718: LD_VAR 0 2
26722: PUSH
26723: LD_INT 1
26725: ARRAY
26726: PPUSH
26727: CALL_OW 251
26731: PPUSH
26732: LD_INT 12
26734: PPUSH
26735: LD_INT 1
26737: PPUSH
26738: CALL_OW 50
26742: GO 26756
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26744: CALL_OW 45
26748: PPUSH
26749: LD_INT 1
26751: PPUSH
26752: CALL_OW 51
// end ;
26756: GO 26630
26758: POP
26759: POP
// end ;
26760: PPOPN 2
26762: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26763: LD_EXP 52
26767: PUSH
26768: LD_EXP 98
26772: AND
26773: IFFALSE 26995
26775: GO 26777
26777: DISABLE
26778: LD_INT 0
26780: PPUSH
26781: PPUSH
26782: PPUSH
26783: PPUSH
26784: PPUSH
26785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26786: LD_ADDR_VAR 0 6
26790: PUSH
26791: LD_INT 22
26793: PUSH
26794: LD_OWVAR 2
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 21
26805: PUSH
26806: LD_INT 1
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 3
26815: PUSH
26816: LD_INT 23
26818: PUSH
26819: LD_INT 0
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: LIST
26834: PPUSH
26835: CALL_OW 69
26839: ST_TO_ADDR
// if not tmp then
26840: LD_VAR 0 6
26844: NOT
26845: IFFALSE 26849
// exit ;
26847: GO 26995
// s1 := rand ( 1 , 4 ) ;
26849: LD_ADDR_VAR 0 2
26853: PUSH
26854: LD_INT 1
26856: PPUSH
26857: LD_INT 4
26859: PPUSH
26860: CALL_OW 12
26864: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26865: LD_ADDR_VAR 0 4
26869: PUSH
26870: LD_VAR 0 6
26874: PUSH
26875: LD_INT 1
26877: ARRAY
26878: PPUSH
26879: LD_VAR 0 2
26883: PPUSH
26884: CALL_OW 259
26888: ST_TO_ADDR
// if s1 = 1 then
26889: LD_VAR 0 2
26893: PUSH
26894: LD_INT 1
26896: EQUAL
26897: IFFALSE 26917
// s2 := rand ( 2 , 4 ) else
26899: LD_ADDR_VAR 0 3
26903: PUSH
26904: LD_INT 2
26906: PPUSH
26907: LD_INT 4
26909: PPUSH
26910: CALL_OW 12
26914: ST_TO_ADDR
26915: GO 26925
// s2 := 1 ;
26917: LD_ADDR_VAR 0 3
26921: PUSH
26922: LD_INT 1
26924: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26925: LD_ADDR_VAR 0 5
26929: PUSH
26930: LD_VAR 0 6
26934: PUSH
26935: LD_INT 1
26937: ARRAY
26938: PPUSH
26939: LD_VAR 0 3
26943: PPUSH
26944: CALL_OW 259
26948: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26949: LD_VAR 0 6
26953: PUSH
26954: LD_INT 1
26956: ARRAY
26957: PPUSH
26958: LD_VAR 0 2
26962: PPUSH
26963: LD_VAR 0 5
26967: PPUSH
26968: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26972: LD_VAR 0 6
26976: PUSH
26977: LD_INT 1
26979: ARRAY
26980: PPUSH
26981: LD_VAR 0 3
26985: PPUSH
26986: LD_VAR 0 4
26990: PPUSH
26991: CALL_OW 237
// end ;
26995: PPOPN 6
26997: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26998: LD_EXP 52
27002: PUSH
27003: LD_EXP 99
27007: AND
27008: IFFALSE 27087
27010: GO 27012
27012: DISABLE
27013: LD_INT 0
27015: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
27016: LD_ADDR_VAR 0 1
27020: PUSH
27021: LD_INT 22
27023: PUSH
27024: LD_OWVAR 2
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 30
27035: PUSH
27036: LD_INT 3
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PPUSH
27047: CALL_OW 69
27051: ST_TO_ADDR
// if not tmp then
27052: LD_VAR 0 1
27056: NOT
27057: IFFALSE 27061
// exit ;
27059: GO 27087
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27061: LD_VAR 0 1
27065: PUSH
27066: LD_INT 1
27068: PPUSH
27069: LD_VAR 0 1
27073: PPUSH
27074: CALL_OW 12
27078: ARRAY
27079: PPUSH
27080: LD_INT 1
27082: PPUSH
27083: CALL_OW 234
// end ;
27087: PPOPN 1
27089: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27090: LD_EXP 52
27094: PUSH
27095: LD_EXP 100
27099: AND
27100: IFFALSE 27212
27102: GO 27104
27104: DISABLE
27105: LD_INT 0
27107: PPUSH
27108: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27109: LD_ADDR_VAR 0 2
27113: PUSH
27114: LD_INT 22
27116: PUSH
27117: LD_OWVAR 2
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 2
27128: PUSH
27129: LD_INT 30
27131: PUSH
27132: LD_INT 27
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 30
27141: PUSH
27142: LD_INT 26
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 30
27151: PUSH
27152: LD_INT 28
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PPUSH
27169: CALL_OW 69
27173: ST_TO_ADDR
// if not tmp then
27174: LD_VAR 0 2
27178: NOT
27179: IFFALSE 27183
// exit ;
27181: GO 27212
// for i in tmp do
27183: LD_ADDR_VAR 0 1
27187: PUSH
27188: LD_VAR 0 2
27192: PUSH
27193: FOR_IN
27194: IFFALSE 27210
// SetLives ( i , 1 ) ;
27196: LD_VAR 0 1
27200: PPUSH
27201: LD_INT 1
27203: PPUSH
27204: CALL_OW 234
27208: GO 27193
27210: POP
27211: POP
// end ;
27212: PPOPN 2
27214: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
27215: LD_EXP 52
27219: PUSH
27220: LD_EXP 101
27224: AND
27225: IFFALSE 27499
27227: GO 27229
27229: DISABLE
27230: LD_INT 0
27232: PPUSH
27233: PPUSH
27234: PPUSH
// begin i := rand ( 1 , 7 ) ;
27235: LD_ADDR_VAR 0 1
27239: PUSH
27240: LD_INT 1
27242: PPUSH
27243: LD_INT 7
27245: PPUSH
27246: CALL_OW 12
27250: ST_TO_ADDR
// case i of 1 :
27251: LD_VAR 0 1
27255: PUSH
27256: LD_INT 1
27258: DOUBLE
27259: EQUAL
27260: IFTRUE 27264
27262: GO 27274
27264: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
27265: LD_STRING earthquake(getX(game), 0, 32)
27267: PPUSH
27268: CALL_OW 559
27272: GO 27499
27274: LD_INT 2
27276: DOUBLE
27277: EQUAL
27278: IFTRUE 27282
27280: GO 27296
27282: POP
// begin ToLua ( displayStucuk(); ) ;
27283: LD_STRING displayStucuk();
27285: PPUSH
27286: CALL_OW 559
// ResetFog ;
27290: CALL_OW 335
// end ; 3 :
27294: GO 27499
27296: LD_INT 3
27298: DOUBLE
27299: EQUAL
27300: IFTRUE 27304
27302: GO 27408
27304: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27305: LD_ADDR_VAR 0 2
27309: PUSH
27310: LD_INT 22
27312: PUSH
27313: LD_OWVAR 2
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 25
27324: PUSH
27325: LD_INT 1
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PPUSH
27336: CALL_OW 69
27340: ST_TO_ADDR
// if not tmp then
27341: LD_VAR 0 2
27345: NOT
27346: IFFALSE 27350
// exit ;
27348: GO 27499
// un := tmp [ rand ( 1 , tmp ) ] ;
27350: LD_ADDR_VAR 0 3
27354: PUSH
27355: LD_VAR 0 2
27359: PUSH
27360: LD_INT 1
27362: PPUSH
27363: LD_VAR 0 2
27367: PPUSH
27368: CALL_OW 12
27372: ARRAY
27373: ST_TO_ADDR
// if Crawls ( un ) then
27374: LD_VAR 0 3
27378: PPUSH
27379: CALL_OW 318
27383: IFFALSE 27394
// ComWalk ( un ) ;
27385: LD_VAR 0 3
27389: PPUSH
27390: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27394: LD_VAR 0 3
27398: PPUSH
27399: LD_INT 8
27401: PPUSH
27402: CALL_OW 336
// end ; 4 :
27406: GO 27499
27408: LD_INT 4
27410: DOUBLE
27411: EQUAL
27412: IFTRUE 27416
27414: GO 27477
27416: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27417: LD_ADDR_VAR 0 2
27421: PUSH
27422: LD_INT 22
27424: PUSH
27425: LD_OWVAR 2
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PUSH
27434: LD_INT 30
27436: PUSH
27437: LD_INT 29
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PPUSH
27448: CALL_OW 69
27452: ST_TO_ADDR
// if not tmp then
27453: LD_VAR 0 2
27457: NOT
27458: IFFALSE 27462
// exit ;
27460: GO 27499
// DestroyUnit ( tmp [ 1 ] ) ;
27462: LD_VAR 0 2
27466: PUSH
27467: LD_INT 1
27469: ARRAY
27470: PPUSH
27471: CALL_OW 65
// end ; 5 .. 7 :
27475: GO 27499
27477: LD_INT 5
27479: DOUBLE
27480: GREATEREQUAL
27481: IFFALSE 27489
27483: LD_INT 7
27485: DOUBLE
27486: LESSEQUAL
27487: IFTRUE 27491
27489: GO 27498
27491: POP
// StreamSibBomb ; end ;
27492: CALL 23749 0 0
27496: GO 27499
27498: POP
// end ;
27499: PPOPN 3
27501: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27502: LD_EXP 52
27506: PUSH
27507: LD_EXP 102
27511: AND
27512: IFFALSE 27668
27514: GO 27516
27516: DISABLE
27517: LD_INT 0
27519: PPUSH
27520: PPUSH
27521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27522: LD_ADDR_VAR 0 2
27526: PUSH
27527: LD_INT 81
27529: PUSH
27530: LD_OWVAR 2
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 2
27541: PUSH
27542: LD_INT 21
27544: PUSH
27545: LD_INT 1
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 21
27554: PUSH
27555: LD_INT 2
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: LIST
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PPUSH
27571: CALL_OW 69
27575: ST_TO_ADDR
// if not tmp then
27576: LD_VAR 0 2
27580: NOT
27581: IFFALSE 27585
// exit ;
27583: GO 27668
// p := 0 ;
27585: LD_ADDR_VAR 0 3
27589: PUSH
27590: LD_INT 0
27592: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27593: LD_INT 35
27595: PPUSH
27596: CALL_OW 67
// p := p + 1 ;
27600: LD_ADDR_VAR 0 3
27604: PUSH
27605: LD_VAR 0 3
27609: PUSH
27610: LD_INT 1
27612: PLUS
27613: ST_TO_ADDR
// for i in tmp do
27614: LD_ADDR_VAR 0 1
27618: PUSH
27619: LD_VAR 0 2
27623: PUSH
27624: FOR_IN
27625: IFFALSE 27656
// if GetLives ( i ) < 1000 then
27627: LD_VAR 0 1
27631: PPUSH
27632: CALL_OW 256
27636: PUSH
27637: LD_INT 1000
27639: LESS
27640: IFFALSE 27654
// SetLives ( i , 1000 ) ;
27642: LD_VAR 0 1
27646: PPUSH
27647: LD_INT 1000
27649: PPUSH
27650: CALL_OW 234
27654: GO 27624
27656: POP
27657: POP
// until p > 20 ;
27658: LD_VAR 0 3
27662: PUSH
27663: LD_INT 20
27665: GREATER
27666: IFFALSE 27593
// end ;
27668: PPOPN 3
27670: END
// every 0 0$1 trigger StreamModeActive and sTime do
27671: LD_EXP 52
27675: PUSH
27676: LD_EXP 103
27680: AND
27681: IFFALSE 27716
27683: GO 27685
27685: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27686: LD_INT 28
27688: PPUSH
27689: LD_OWVAR 2
27693: PPUSH
27694: LD_INT 2
27696: PPUSH
27697: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27701: LD_INT 30
27703: PPUSH
27704: LD_OWVAR 2
27708: PPUSH
27709: LD_INT 2
27711: PPUSH
27712: CALL_OW 322
// end ;
27716: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27717: LD_EXP 52
27721: PUSH
27722: LD_EXP 104
27726: AND
27727: IFFALSE 27848
27729: GO 27731
27731: DISABLE
27732: LD_INT 0
27734: PPUSH
27735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27736: LD_ADDR_VAR 0 2
27740: PUSH
27741: LD_INT 22
27743: PUSH
27744: LD_OWVAR 2
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 21
27755: PUSH
27756: LD_INT 1
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 3
27765: PUSH
27766: LD_INT 23
27768: PUSH
27769: LD_INT 0
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: LIST
27784: PPUSH
27785: CALL_OW 69
27789: ST_TO_ADDR
// if not tmp then
27790: LD_VAR 0 2
27794: NOT
27795: IFFALSE 27799
// exit ;
27797: GO 27848
// for i in tmp do
27799: LD_ADDR_VAR 0 1
27803: PUSH
27804: LD_VAR 0 2
27808: PUSH
27809: FOR_IN
27810: IFFALSE 27846
// begin if Crawls ( i ) then
27812: LD_VAR 0 1
27816: PPUSH
27817: CALL_OW 318
27821: IFFALSE 27832
// ComWalk ( i ) ;
27823: LD_VAR 0 1
27827: PPUSH
27828: CALL_OW 138
// SetClass ( i , 2 ) ;
27832: LD_VAR 0 1
27836: PPUSH
27837: LD_INT 2
27839: PPUSH
27840: CALL_OW 336
// end ;
27844: GO 27809
27846: POP
27847: POP
// end ;
27848: PPOPN 2
27850: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27851: LD_EXP 52
27855: PUSH
27856: LD_EXP 105
27860: AND
27861: IFFALSE 28142
27863: GO 27865
27865: DISABLE
27866: LD_INT 0
27868: PPUSH
27869: PPUSH
27870: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27871: LD_OWVAR 2
27875: PPUSH
27876: LD_INT 9
27878: PPUSH
27879: LD_INT 1
27881: PPUSH
27882: LD_INT 1
27884: PPUSH
27885: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27889: LD_INT 9
27891: PPUSH
27892: LD_OWVAR 2
27896: PPUSH
27897: CALL_OW 343
// uc_side := 9 ;
27901: LD_ADDR_OWVAR 20
27905: PUSH
27906: LD_INT 9
27908: ST_TO_ADDR
// uc_nation := 2 ;
27909: LD_ADDR_OWVAR 21
27913: PUSH
27914: LD_INT 2
27916: ST_TO_ADDR
// hc_name := Dark Warrior ;
27917: LD_ADDR_OWVAR 26
27921: PUSH
27922: LD_STRING Dark Warrior
27924: ST_TO_ADDR
// hc_gallery :=  ;
27925: LD_ADDR_OWVAR 33
27929: PUSH
27930: LD_STRING 
27932: ST_TO_ADDR
// hc_noskilllimit := true ;
27933: LD_ADDR_OWVAR 76
27937: PUSH
27938: LD_INT 1
27940: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27941: LD_ADDR_OWVAR 31
27945: PUSH
27946: LD_INT 30
27948: PUSH
27949: LD_INT 30
27951: PUSH
27952: LD_INT 30
27954: PUSH
27955: LD_INT 30
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: ST_TO_ADDR
// un := CreateHuman ;
27964: LD_ADDR_VAR 0 3
27968: PUSH
27969: CALL_OW 44
27973: ST_TO_ADDR
// hc_noskilllimit := false ;
27974: LD_ADDR_OWVAR 76
27978: PUSH
27979: LD_INT 0
27981: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27982: LD_VAR 0 3
27986: PPUSH
27987: LD_INT 1
27989: PPUSH
27990: CALL_OW 51
// p := 0 ;
27994: LD_ADDR_VAR 0 2
27998: PUSH
27999: LD_INT 0
28001: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28002: LD_INT 35
28004: PPUSH
28005: CALL_OW 67
// p := p + 1 ;
28009: LD_ADDR_VAR 0 2
28013: PUSH
28014: LD_VAR 0 2
28018: PUSH
28019: LD_INT 1
28021: PLUS
28022: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28023: LD_VAR 0 3
28027: PPUSH
28028: CALL_OW 256
28032: PUSH
28033: LD_INT 1000
28035: LESS
28036: IFFALSE 28050
// SetLives ( un , 1000 ) ;
28038: LD_VAR 0 3
28042: PPUSH
28043: LD_INT 1000
28045: PPUSH
28046: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
28050: LD_VAR 0 3
28054: PPUSH
28055: LD_INT 81
28057: PUSH
28058: LD_OWVAR 2
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 91
28069: PUSH
28070: LD_VAR 0 3
28074: PUSH
28075: LD_INT 30
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: LIST
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PPUSH
28087: CALL_OW 69
28091: PPUSH
28092: LD_VAR 0 3
28096: PPUSH
28097: CALL_OW 74
28101: PPUSH
28102: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
28106: LD_VAR 0 2
28110: PUSH
28111: LD_INT 60
28113: GREATER
28114: PUSH
28115: LD_VAR 0 3
28119: PPUSH
28120: CALL_OW 301
28124: OR
28125: IFFALSE 28002
// if un then
28127: LD_VAR 0 3
28131: IFFALSE 28142
// RemoveUnit ( un ) ;
28133: LD_VAR 0 3
28137: PPUSH
28138: CALL_OW 64
// end ;
28142: PPOPN 3
28144: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28145: LD_INT 0
28147: PPUSH
// case cmd of 301 :
28148: LD_VAR 0 1
28152: PUSH
28153: LD_INT 301
28155: DOUBLE
28156: EQUAL
28157: IFTRUE 28161
28159: GO 28193
28161: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28162: LD_VAR 0 6
28166: PPUSH
28167: LD_VAR 0 7
28171: PPUSH
28172: LD_VAR 0 8
28176: PPUSH
28177: LD_VAR 0 4
28181: PPUSH
28182: LD_VAR 0 5
28186: PPUSH
28187: CALL 29394 0 5
28191: GO 28314
28193: LD_INT 302
28195: DOUBLE
28196: EQUAL
28197: IFTRUE 28201
28199: GO 28238
28201: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28202: LD_VAR 0 6
28206: PPUSH
28207: LD_VAR 0 7
28211: PPUSH
28212: LD_VAR 0 8
28216: PPUSH
28217: LD_VAR 0 9
28221: PPUSH
28222: LD_VAR 0 4
28226: PPUSH
28227: LD_VAR 0 5
28231: PPUSH
28232: CALL 29485 0 6
28236: GO 28314
28238: LD_INT 303
28240: DOUBLE
28241: EQUAL
28242: IFTRUE 28246
28244: GO 28283
28246: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28247: LD_VAR 0 6
28251: PPUSH
28252: LD_VAR 0 7
28256: PPUSH
28257: LD_VAR 0 8
28261: PPUSH
28262: LD_VAR 0 9
28266: PPUSH
28267: LD_VAR 0 4
28271: PPUSH
28272: LD_VAR 0 5
28276: PPUSH
28277: CALL 28319 0 6
28281: GO 28314
28283: LD_INT 304
28285: DOUBLE
28286: EQUAL
28287: IFTRUE 28291
28289: GO 28313
28291: POP
// hHackTeleport ( unit , x , y ) ; end ;
28292: LD_VAR 0 2
28296: PPUSH
28297: LD_VAR 0 4
28301: PPUSH
28302: LD_VAR 0 5
28306: PPUSH
28307: CALL 30078 0 3
28311: GO 28314
28313: POP
// end ;
28314: LD_VAR 0 12
28318: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28319: LD_INT 0
28321: PPUSH
28322: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28323: LD_VAR 0 1
28327: PUSH
28328: LD_INT 1
28330: LESS
28331: PUSH
28332: LD_VAR 0 1
28336: PUSH
28337: LD_INT 3
28339: GREATER
28340: OR
28341: PUSH
28342: LD_VAR 0 5
28346: PPUSH
28347: LD_VAR 0 6
28351: PPUSH
28352: CALL_OW 428
28356: OR
28357: IFFALSE 28361
// exit ;
28359: GO 29081
// uc_side := your_side ;
28361: LD_ADDR_OWVAR 20
28365: PUSH
28366: LD_OWVAR 2
28370: ST_TO_ADDR
// uc_nation := nation ;
28371: LD_ADDR_OWVAR 21
28375: PUSH
28376: LD_VAR 0 1
28380: ST_TO_ADDR
// bc_level = 1 ;
28381: LD_ADDR_OWVAR 43
28385: PUSH
28386: LD_INT 1
28388: ST_TO_ADDR
// case btype of 1 :
28389: LD_VAR 0 2
28393: PUSH
28394: LD_INT 1
28396: DOUBLE
28397: EQUAL
28398: IFTRUE 28402
28400: GO 28413
28402: POP
// bc_type := b_depot ; 2 :
28403: LD_ADDR_OWVAR 42
28407: PUSH
28408: LD_INT 0
28410: ST_TO_ADDR
28411: GO 29025
28413: LD_INT 2
28415: DOUBLE
28416: EQUAL
28417: IFTRUE 28421
28419: GO 28432
28421: POP
// bc_type := b_warehouse ; 3 :
28422: LD_ADDR_OWVAR 42
28426: PUSH
28427: LD_INT 1
28429: ST_TO_ADDR
28430: GO 29025
28432: LD_INT 3
28434: DOUBLE
28435: EQUAL
28436: IFTRUE 28440
28438: GO 28451
28440: POP
// bc_type := b_lab ; 4 .. 9 :
28441: LD_ADDR_OWVAR 42
28445: PUSH
28446: LD_INT 6
28448: ST_TO_ADDR
28449: GO 29025
28451: LD_INT 4
28453: DOUBLE
28454: GREATEREQUAL
28455: IFFALSE 28463
28457: LD_INT 9
28459: DOUBLE
28460: LESSEQUAL
28461: IFTRUE 28465
28463: GO 28517
28465: POP
// begin bc_type := b_lab_half ;
28466: LD_ADDR_OWVAR 42
28470: PUSH
28471: LD_INT 7
28473: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28474: LD_ADDR_OWVAR 44
28478: PUSH
28479: LD_INT 10
28481: PUSH
28482: LD_INT 11
28484: PUSH
28485: LD_INT 12
28487: PUSH
28488: LD_INT 15
28490: PUSH
28491: LD_INT 14
28493: PUSH
28494: LD_INT 13
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: PUSH
28505: LD_VAR 0 2
28509: PUSH
28510: LD_INT 3
28512: MINUS
28513: ARRAY
28514: ST_TO_ADDR
// end ; 10 .. 13 :
28515: GO 29025
28517: LD_INT 10
28519: DOUBLE
28520: GREATEREQUAL
28521: IFFALSE 28529
28523: LD_INT 13
28525: DOUBLE
28526: LESSEQUAL
28527: IFTRUE 28531
28529: GO 28608
28531: POP
// begin bc_type := b_lab_full ;
28532: LD_ADDR_OWVAR 42
28536: PUSH
28537: LD_INT 8
28539: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28540: LD_ADDR_OWVAR 44
28544: PUSH
28545: LD_INT 10
28547: PUSH
28548: LD_INT 12
28550: PUSH
28551: LD_INT 14
28553: PUSH
28554: LD_INT 13
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: PUSH
28563: LD_VAR 0 2
28567: PUSH
28568: LD_INT 9
28570: MINUS
28571: ARRAY
28572: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28573: LD_ADDR_OWVAR 45
28577: PUSH
28578: LD_INT 11
28580: PUSH
28581: LD_INT 15
28583: PUSH
28584: LD_INT 12
28586: PUSH
28587: LD_INT 15
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: PUSH
28596: LD_VAR 0 2
28600: PUSH
28601: LD_INT 9
28603: MINUS
28604: ARRAY
28605: ST_TO_ADDR
// end ; 14 :
28606: GO 29025
28608: LD_INT 14
28610: DOUBLE
28611: EQUAL
28612: IFTRUE 28616
28614: GO 28627
28616: POP
// bc_type := b_workshop ; 15 :
28617: LD_ADDR_OWVAR 42
28621: PUSH
28622: LD_INT 2
28624: ST_TO_ADDR
28625: GO 29025
28627: LD_INT 15
28629: DOUBLE
28630: EQUAL
28631: IFTRUE 28635
28633: GO 28646
28635: POP
// bc_type := b_factory ; 16 :
28636: LD_ADDR_OWVAR 42
28640: PUSH
28641: LD_INT 3
28643: ST_TO_ADDR
28644: GO 29025
28646: LD_INT 16
28648: DOUBLE
28649: EQUAL
28650: IFTRUE 28654
28652: GO 28665
28654: POP
// bc_type := b_ext_gun ; 17 :
28655: LD_ADDR_OWVAR 42
28659: PUSH
28660: LD_INT 17
28662: ST_TO_ADDR
28663: GO 29025
28665: LD_INT 17
28667: DOUBLE
28668: EQUAL
28669: IFTRUE 28673
28671: GO 28701
28673: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28674: LD_ADDR_OWVAR 42
28678: PUSH
28679: LD_INT 19
28681: PUSH
28682: LD_INT 23
28684: PUSH
28685: LD_INT 19
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: LIST
28692: PUSH
28693: LD_VAR 0 1
28697: ARRAY
28698: ST_TO_ADDR
28699: GO 29025
28701: LD_INT 18
28703: DOUBLE
28704: EQUAL
28705: IFTRUE 28709
28707: GO 28720
28709: POP
// bc_type := b_ext_radar ; 19 :
28710: LD_ADDR_OWVAR 42
28714: PUSH
28715: LD_INT 20
28717: ST_TO_ADDR
28718: GO 29025
28720: LD_INT 19
28722: DOUBLE
28723: EQUAL
28724: IFTRUE 28728
28726: GO 28739
28728: POP
// bc_type := b_ext_radio ; 20 :
28729: LD_ADDR_OWVAR 42
28733: PUSH
28734: LD_INT 22
28736: ST_TO_ADDR
28737: GO 29025
28739: LD_INT 20
28741: DOUBLE
28742: EQUAL
28743: IFTRUE 28747
28745: GO 28758
28747: POP
// bc_type := b_ext_siberium ; 21 :
28748: LD_ADDR_OWVAR 42
28752: PUSH
28753: LD_INT 21
28755: ST_TO_ADDR
28756: GO 29025
28758: LD_INT 21
28760: DOUBLE
28761: EQUAL
28762: IFTRUE 28766
28764: GO 28777
28766: POP
// bc_type := b_ext_computer ; 22 :
28767: LD_ADDR_OWVAR 42
28771: PUSH
28772: LD_INT 24
28774: ST_TO_ADDR
28775: GO 29025
28777: LD_INT 22
28779: DOUBLE
28780: EQUAL
28781: IFTRUE 28785
28783: GO 28796
28785: POP
// bc_type := b_ext_track ; 23 :
28786: LD_ADDR_OWVAR 42
28790: PUSH
28791: LD_INT 16
28793: ST_TO_ADDR
28794: GO 29025
28796: LD_INT 23
28798: DOUBLE
28799: EQUAL
28800: IFTRUE 28804
28802: GO 28815
28804: POP
// bc_type := b_ext_laser ; 24 :
28805: LD_ADDR_OWVAR 42
28809: PUSH
28810: LD_INT 25
28812: ST_TO_ADDR
28813: GO 29025
28815: LD_INT 24
28817: DOUBLE
28818: EQUAL
28819: IFTRUE 28823
28821: GO 28834
28823: POP
// bc_type := b_control_tower ; 25 :
28824: LD_ADDR_OWVAR 42
28828: PUSH
28829: LD_INT 36
28831: ST_TO_ADDR
28832: GO 29025
28834: LD_INT 25
28836: DOUBLE
28837: EQUAL
28838: IFTRUE 28842
28840: GO 28853
28842: POP
// bc_type := b_breastwork ; 26 :
28843: LD_ADDR_OWVAR 42
28847: PUSH
28848: LD_INT 31
28850: ST_TO_ADDR
28851: GO 29025
28853: LD_INT 26
28855: DOUBLE
28856: EQUAL
28857: IFTRUE 28861
28859: GO 28872
28861: POP
// bc_type := b_bunker ; 27 :
28862: LD_ADDR_OWVAR 42
28866: PUSH
28867: LD_INT 32
28869: ST_TO_ADDR
28870: GO 29025
28872: LD_INT 27
28874: DOUBLE
28875: EQUAL
28876: IFTRUE 28880
28878: GO 28891
28880: POP
// bc_type := b_turret ; 28 :
28881: LD_ADDR_OWVAR 42
28885: PUSH
28886: LD_INT 33
28888: ST_TO_ADDR
28889: GO 29025
28891: LD_INT 28
28893: DOUBLE
28894: EQUAL
28895: IFTRUE 28899
28897: GO 28910
28899: POP
// bc_type := b_armoury ; 29 :
28900: LD_ADDR_OWVAR 42
28904: PUSH
28905: LD_INT 4
28907: ST_TO_ADDR
28908: GO 29025
28910: LD_INT 29
28912: DOUBLE
28913: EQUAL
28914: IFTRUE 28918
28916: GO 28929
28918: POP
// bc_type := b_barracks ; 30 :
28919: LD_ADDR_OWVAR 42
28923: PUSH
28924: LD_INT 5
28926: ST_TO_ADDR
28927: GO 29025
28929: LD_INT 30
28931: DOUBLE
28932: EQUAL
28933: IFTRUE 28937
28935: GO 28948
28937: POP
// bc_type := b_solar_power ; 31 :
28938: LD_ADDR_OWVAR 42
28942: PUSH
28943: LD_INT 27
28945: ST_TO_ADDR
28946: GO 29025
28948: LD_INT 31
28950: DOUBLE
28951: EQUAL
28952: IFTRUE 28956
28954: GO 28967
28956: POP
// bc_type := b_oil_power ; 32 :
28957: LD_ADDR_OWVAR 42
28961: PUSH
28962: LD_INT 26
28964: ST_TO_ADDR
28965: GO 29025
28967: LD_INT 32
28969: DOUBLE
28970: EQUAL
28971: IFTRUE 28975
28973: GO 28986
28975: POP
// bc_type := b_siberite_power ; 33 :
28976: LD_ADDR_OWVAR 42
28980: PUSH
28981: LD_INT 28
28983: ST_TO_ADDR
28984: GO 29025
28986: LD_INT 33
28988: DOUBLE
28989: EQUAL
28990: IFTRUE 28994
28992: GO 29005
28994: POP
// bc_type := b_oil_mine ; 34 :
28995: LD_ADDR_OWVAR 42
28999: PUSH
29000: LD_INT 29
29002: ST_TO_ADDR
29003: GO 29025
29005: LD_INT 34
29007: DOUBLE
29008: EQUAL
29009: IFTRUE 29013
29011: GO 29024
29013: POP
// bc_type := b_siberite_mine ; end ;
29014: LD_ADDR_OWVAR 42
29018: PUSH
29019: LD_INT 30
29021: ST_TO_ADDR
29022: GO 29025
29024: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
29025: LD_ADDR_VAR 0 8
29029: PUSH
29030: LD_VAR 0 5
29034: PPUSH
29035: LD_VAR 0 6
29039: PPUSH
29040: LD_VAR 0 3
29044: PPUSH
29045: CALL_OW 47
29049: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
29050: LD_OWVAR 42
29054: PUSH
29055: LD_INT 32
29057: PUSH
29058: LD_INT 33
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: IN
29065: IFFALSE 29081
// PlaceWeaponTurret ( b , weapon ) ;
29067: LD_VAR 0 8
29071: PPUSH
29072: LD_VAR 0 4
29076: PPUSH
29077: CALL_OW 431
// end ;
29081: LD_VAR 0 7
29085: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29086: LD_INT 0
29088: PPUSH
29089: PPUSH
29090: PPUSH
29091: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29092: LD_ADDR_VAR 0 4
29096: PUSH
29097: LD_INT 22
29099: PUSH
29100: LD_OWVAR 2
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 2
29111: PUSH
29112: LD_INT 30
29114: PUSH
29115: LD_INT 0
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 30
29124: PUSH
29125: LD_INT 1
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: LIST
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PPUSH
29141: CALL_OW 69
29145: ST_TO_ADDR
// if not tmp then
29146: LD_VAR 0 4
29150: NOT
29151: IFFALSE 29155
// exit ;
29153: GO 29214
// for i in tmp do
29155: LD_ADDR_VAR 0 2
29159: PUSH
29160: LD_VAR 0 4
29164: PUSH
29165: FOR_IN
29166: IFFALSE 29212
// for j = 1 to 3 do
29168: LD_ADDR_VAR 0 3
29172: PUSH
29173: DOUBLE
29174: LD_INT 1
29176: DEC
29177: ST_TO_ADDR
29178: LD_INT 3
29180: PUSH
29181: FOR_TO
29182: IFFALSE 29208
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29184: LD_VAR 0 2
29188: PPUSH
29189: CALL_OW 274
29193: PPUSH
29194: LD_VAR 0 3
29198: PPUSH
29199: LD_INT 99999
29201: PPUSH
29202: CALL_OW 277
29206: GO 29181
29208: POP
29209: POP
29210: GO 29165
29212: POP
29213: POP
// end ;
29214: LD_VAR 0 1
29218: RET
// export function hHackSetLevel10 ; var i , j ; begin
29219: LD_INT 0
29221: PPUSH
29222: PPUSH
29223: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29224: LD_ADDR_VAR 0 2
29228: PUSH
29229: LD_INT 21
29231: PUSH
29232: LD_INT 1
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PPUSH
29239: CALL_OW 69
29243: PUSH
29244: FOR_IN
29245: IFFALSE 29297
// if IsSelected ( i ) then
29247: LD_VAR 0 2
29251: PPUSH
29252: CALL_OW 306
29256: IFFALSE 29295
// begin for j := 1 to 4 do
29258: LD_ADDR_VAR 0 3
29262: PUSH
29263: DOUBLE
29264: LD_INT 1
29266: DEC
29267: ST_TO_ADDR
29268: LD_INT 4
29270: PUSH
29271: FOR_TO
29272: IFFALSE 29293
// SetSkill ( i , j , 10 ) ;
29274: LD_VAR 0 2
29278: PPUSH
29279: LD_VAR 0 3
29283: PPUSH
29284: LD_INT 10
29286: PPUSH
29287: CALL_OW 237
29291: GO 29271
29293: POP
29294: POP
// end ;
29295: GO 29244
29297: POP
29298: POP
// end ;
29299: LD_VAR 0 1
29303: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29304: LD_INT 0
29306: PPUSH
29307: PPUSH
29308: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29309: LD_ADDR_VAR 0 2
29313: PUSH
29314: LD_INT 22
29316: PUSH
29317: LD_OWVAR 2
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 21
29328: PUSH
29329: LD_INT 1
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PPUSH
29340: CALL_OW 69
29344: PUSH
29345: FOR_IN
29346: IFFALSE 29387
// begin for j := 1 to 4 do
29348: LD_ADDR_VAR 0 3
29352: PUSH
29353: DOUBLE
29354: LD_INT 1
29356: DEC
29357: ST_TO_ADDR
29358: LD_INT 4
29360: PUSH
29361: FOR_TO
29362: IFFALSE 29383
// SetSkill ( i , j , 10 ) ;
29364: LD_VAR 0 2
29368: PPUSH
29369: LD_VAR 0 3
29373: PPUSH
29374: LD_INT 10
29376: PPUSH
29377: CALL_OW 237
29381: GO 29361
29383: POP
29384: POP
// end ;
29385: GO 29345
29387: POP
29388: POP
// end ;
29389: LD_VAR 0 1
29393: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
29394: LD_INT 0
29396: PPUSH
// uc_side := your_side ;
29397: LD_ADDR_OWVAR 20
29401: PUSH
29402: LD_OWVAR 2
29406: ST_TO_ADDR
// uc_nation := nation ;
29407: LD_ADDR_OWVAR 21
29411: PUSH
29412: LD_VAR 0 1
29416: ST_TO_ADDR
// InitHc ;
29417: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29421: LD_INT 0
29423: PPUSH
29424: LD_VAR 0 2
29428: PPUSH
29429: LD_VAR 0 3
29433: PPUSH
29434: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29438: LD_VAR 0 4
29442: PPUSH
29443: LD_VAR 0 5
29447: PPUSH
29448: CALL_OW 428
29452: PUSH
29453: LD_INT 0
29455: EQUAL
29456: IFFALSE 29480
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29458: CALL_OW 44
29462: PPUSH
29463: LD_VAR 0 4
29467: PPUSH
29468: LD_VAR 0 5
29472: PPUSH
29473: LD_INT 1
29475: PPUSH
29476: CALL_OW 48
// end ;
29480: LD_VAR 0 6
29484: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29485: LD_INT 0
29487: PPUSH
29488: PPUSH
// uc_side := your_side ;
29489: LD_ADDR_OWVAR 20
29493: PUSH
29494: LD_OWVAR 2
29498: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29499: LD_VAR 0 1
29503: PUSH
29504: LD_INT 1
29506: PUSH
29507: LD_INT 2
29509: PUSH
29510: LD_INT 3
29512: PUSH
29513: LD_INT 4
29515: PUSH
29516: LD_INT 5
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: IN
29526: IFFALSE 29538
// uc_nation := nation_american else
29528: LD_ADDR_OWVAR 21
29532: PUSH
29533: LD_INT 1
29535: ST_TO_ADDR
29536: GO 29581
// if chassis in [ 11 , 12 , 13 , 14 ] then
29538: LD_VAR 0 1
29542: PUSH
29543: LD_INT 11
29545: PUSH
29546: LD_INT 12
29548: PUSH
29549: LD_INT 13
29551: PUSH
29552: LD_INT 14
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: IN
29561: IFFALSE 29573
// uc_nation := nation_arabian else
29563: LD_ADDR_OWVAR 21
29567: PUSH
29568: LD_INT 2
29570: ST_TO_ADDR
29571: GO 29581
// uc_nation := nation_russian ;
29573: LD_ADDR_OWVAR 21
29577: PUSH
29578: LD_INT 3
29580: ST_TO_ADDR
// vc_chassis := chassis ;
29581: LD_ADDR_OWVAR 37
29585: PUSH
29586: LD_VAR 0 1
29590: ST_TO_ADDR
// vc_engine := engine ;
29591: LD_ADDR_OWVAR 39
29595: PUSH
29596: LD_VAR 0 2
29600: ST_TO_ADDR
// vc_control := control ;
29601: LD_ADDR_OWVAR 38
29605: PUSH
29606: LD_VAR 0 3
29610: ST_TO_ADDR
// vc_weapon := weapon ;
29611: LD_ADDR_OWVAR 40
29615: PUSH
29616: LD_VAR 0 4
29620: ST_TO_ADDR
// un := CreateVehicle ;
29621: LD_ADDR_VAR 0 8
29625: PUSH
29626: CALL_OW 45
29630: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29631: LD_VAR 0 8
29635: PPUSH
29636: LD_INT 0
29638: PPUSH
29639: LD_INT 5
29641: PPUSH
29642: CALL_OW 12
29646: PPUSH
29647: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29651: LD_VAR 0 8
29655: PPUSH
29656: LD_VAR 0 5
29660: PPUSH
29661: LD_VAR 0 6
29665: PPUSH
29666: LD_INT 1
29668: PPUSH
29669: CALL_OW 48
// end ;
29673: LD_VAR 0 7
29677: RET
// export hInvincible ; every 1 do
29678: GO 29680
29680: DISABLE
// hInvincible := [ ] ;
29681: LD_ADDR_EXP 106
29685: PUSH
29686: EMPTY
29687: ST_TO_ADDR
29688: END
// every 10 do var i ;
29689: GO 29691
29691: DISABLE
29692: LD_INT 0
29694: PPUSH
// begin enable ;
29695: ENABLE
// if not hInvincible then
29696: LD_EXP 106
29700: NOT
29701: IFFALSE 29705
// exit ;
29703: GO 29749
// for i in hInvincible do
29705: LD_ADDR_VAR 0 1
29709: PUSH
29710: LD_EXP 106
29714: PUSH
29715: FOR_IN
29716: IFFALSE 29747
// if GetLives ( i ) < 1000 then
29718: LD_VAR 0 1
29722: PPUSH
29723: CALL_OW 256
29727: PUSH
29728: LD_INT 1000
29730: LESS
29731: IFFALSE 29745
// SetLives ( i , 1000 ) ;
29733: LD_VAR 0 1
29737: PPUSH
29738: LD_INT 1000
29740: PPUSH
29741: CALL_OW 234
29745: GO 29715
29747: POP
29748: POP
// end ;
29749: PPOPN 1
29751: END
// export function hHackInvincible ; var i ; begin
29752: LD_INT 0
29754: PPUSH
29755: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29756: LD_ADDR_VAR 0 2
29760: PUSH
29761: LD_INT 2
29763: PUSH
29764: LD_INT 21
29766: PUSH
29767: LD_INT 1
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 21
29776: PUSH
29777: LD_INT 2
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: LIST
29788: PPUSH
29789: CALL_OW 69
29793: PUSH
29794: FOR_IN
29795: IFFALSE 29856
// if IsSelected ( i ) then
29797: LD_VAR 0 2
29801: PPUSH
29802: CALL_OW 306
29806: IFFALSE 29854
// begin if i in hInvincible then
29808: LD_VAR 0 2
29812: PUSH
29813: LD_EXP 106
29817: IN
29818: IFFALSE 29838
// hInvincible := hInvincible diff i else
29820: LD_ADDR_EXP 106
29824: PUSH
29825: LD_EXP 106
29829: PUSH
29830: LD_VAR 0 2
29834: DIFF
29835: ST_TO_ADDR
29836: GO 29854
// hInvincible := hInvincible union i ;
29838: LD_ADDR_EXP 106
29842: PUSH
29843: LD_EXP 106
29847: PUSH
29848: LD_VAR 0 2
29852: UNION
29853: ST_TO_ADDR
// end ;
29854: GO 29794
29856: POP
29857: POP
// end ;
29858: LD_VAR 0 1
29862: RET
// export function hHackInvisible ; var i , j ; begin
29863: LD_INT 0
29865: PPUSH
29866: PPUSH
29867: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29868: LD_ADDR_VAR 0 2
29872: PUSH
29873: LD_INT 21
29875: PUSH
29876: LD_INT 1
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PPUSH
29883: CALL_OW 69
29887: PUSH
29888: FOR_IN
29889: IFFALSE 29913
// if IsSelected ( i ) then
29891: LD_VAR 0 2
29895: PPUSH
29896: CALL_OW 306
29900: IFFALSE 29911
// ComForceInvisible ( i ) ;
29902: LD_VAR 0 2
29906: PPUSH
29907: CALL_OW 496
29911: GO 29888
29913: POP
29914: POP
// end ;
29915: LD_VAR 0 1
29919: RET
// export function hHackChangeYourSide ; begin
29920: LD_INT 0
29922: PPUSH
// if your_side = 8 then
29923: LD_OWVAR 2
29927: PUSH
29928: LD_INT 8
29930: EQUAL
29931: IFFALSE 29943
// your_side := 0 else
29933: LD_ADDR_OWVAR 2
29937: PUSH
29938: LD_INT 0
29940: ST_TO_ADDR
29941: GO 29957
// your_side := your_side + 1 ;
29943: LD_ADDR_OWVAR 2
29947: PUSH
29948: LD_OWVAR 2
29952: PUSH
29953: LD_INT 1
29955: PLUS
29956: ST_TO_ADDR
// end ;
29957: LD_VAR 0 1
29961: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29962: LD_INT 0
29964: PPUSH
29965: PPUSH
29966: PPUSH
// for i in all_units do
29967: LD_ADDR_VAR 0 2
29971: PUSH
29972: LD_OWVAR 3
29976: PUSH
29977: FOR_IN
29978: IFFALSE 30056
// if IsSelected ( i ) then
29980: LD_VAR 0 2
29984: PPUSH
29985: CALL_OW 306
29989: IFFALSE 30054
// begin j := GetSide ( i ) ;
29991: LD_ADDR_VAR 0 3
29995: PUSH
29996: LD_VAR 0 2
30000: PPUSH
30001: CALL_OW 255
30005: ST_TO_ADDR
// if j = 8 then
30006: LD_VAR 0 3
30010: PUSH
30011: LD_INT 8
30013: EQUAL
30014: IFFALSE 30026
// j := 0 else
30016: LD_ADDR_VAR 0 3
30020: PUSH
30021: LD_INT 0
30023: ST_TO_ADDR
30024: GO 30040
// j := j + 1 ;
30026: LD_ADDR_VAR 0 3
30030: PUSH
30031: LD_VAR 0 3
30035: PUSH
30036: LD_INT 1
30038: PLUS
30039: ST_TO_ADDR
// SetSide ( i , j ) ;
30040: LD_VAR 0 2
30044: PPUSH
30045: LD_VAR 0 3
30049: PPUSH
30050: CALL_OW 235
// end ;
30054: GO 29977
30056: POP
30057: POP
// end ;
30058: LD_VAR 0 1
30062: RET
// export function hHackFog ; begin
30063: LD_INT 0
30065: PPUSH
// FogOff ( true ) ;
30066: LD_INT 1
30068: PPUSH
30069: CALL_OW 344
// end ;
30073: LD_VAR 0 1
30077: RET
// export function hHackTeleport ( unit , x , y ) ; begin
30078: LD_INT 0
30080: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
30081: LD_VAR 0 1
30085: PPUSH
30086: LD_VAR 0 2
30090: PPUSH
30091: LD_VAR 0 3
30095: PPUSH
30096: LD_INT 1
30098: PPUSH
30099: LD_INT 1
30101: PPUSH
30102: CALL_OW 483
// CenterOnXY ( x , y ) ;
30106: LD_VAR 0 2
30110: PPUSH
30111: LD_VAR 0 3
30115: PPUSH
30116: CALL_OW 84
// end ; end_of_file
30120: LD_VAR 0 4
30124: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
30125: LD_VAR 0 1
30129: PUSH
30130: LD_INT 200
30132: DOUBLE
30133: GREATEREQUAL
30134: IFFALSE 30142
30136: LD_INT 299
30138: DOUBLE
30139: LESSEQUAL
30140: IFTRUE 30144
30142: GO 30176
30144: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
30145: LD_VAR 0 1
30149: PPUSH
30150: LD_VAR 0 2
30154: PPUSH
30155: LD_VAR 0 3
30159: PPUSH
30160: LD_VAR 0 4
30164: PPUSH
30165: LD_VAR 0 5
30169: PPUSH
30170: CALL 30420 0 5
30174: GO 30253
30176: LD_INT 300
30178: DOUBLE
30179: GREATEREQUAL
30180: IFFALSE 30188
30182: LD_INT 399
30184: DOUBLE
30185: LESSEQUAL
30186: IFTRUE 30190
30188: GO 30252
30190: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
30191: LD_VAR 0 1
30195: PPUSH
30196: LD_VAR 0 2
30200: PPUSH
30201: LD_VAR 0 3
30205: PPUSH
30206: LD_VAR 0 4
30210: PPUSH
30211: LD_VAR 0 5
30215: PPUSH
30216: LD_VAR 0 6
30220: PPUSH
30221: LD_VAR 0 7
30225: PPUSH
30226: LD_VAR 0 8
30230: PPUSH
30231: LD_VAR 0 9
30235: PPUSH
30236: LD_VAR 0 10
30240: PPUSH
30241: LD_VAR 0 11
30245: PPUSH
30246: CALL 28145 0 11
30250: GO 30253
30252: POP
// end ;
30253: PPOPN 11
30255: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
30256: LD_VAR 0 1
30260: PPUSH
30261: LD_VAR 0 2
30265: PPUSH
30266: LD_VAR 0 3
30270: PPUSH
30271: LD_VAR 0 4
30275: PPUSH
30276: LD_VAR 0 5
30280: PPUSH
30281: CALL 30402 0 5
// end ; end_of_file
30285: PPOPN 5
30287: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
30288: LD_INT 0
30290: PPUSH
30291: PPUSH
30292: PPUSH
30293: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
30294: LD_VAR 0 1
30298: PPUSH
30299: CALL_OW 264
30303: PUSH
30304: LD_EXP 123
30308: EQUAL
30309: IFFALSE 30381
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
30311: LD_INT 68
30313: PPUSH
30314: LD_VAR 0 1
30318: PPUSH
30319: CALL_OW 255
30323: PPUSH
30324: CALL_OW 321
30328: PUSH
30329: LD_INT 2
30331: EQUAL
30332: IFFALSE 30344
// eff := 70 else
30334: LD_ADDR_VAR 0 4
30338: PUSH
30339: LD_INT 70
30341: ST_TO_ADDR
30342: GO 30352
// eff := 30 ;
30344: LD_ADDR_VAR 0 4
30348: PUSH
30349: LD_INT 30
30351: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
30352: LD_VAR 0 1
30356: PPUSH
30357: CALL_OW 250
30361: PPUSH
30362: LD_VAR 0 1
30366: PPUSH
30367: CALL_OW 251
30371: PPUSH
30372: LD_VAR 0 4
30376: PPUSH
30377: CALL_OW 495
// end ; end ;
30381: LD_VAR 0 2
30385: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
30386: LD_INT 0
30388: PPUSH
// end ;
30389: LD_VAR 0 4
30393: RET
// export function SOS_Command ( cmd ) ; begin
30394: LD_INT 0
30396: PPUSH
// end ;
30397: LD_VAR 0 2
30401: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
30402: LD_INT 0
30404: PPUSH
// if cmd = 121 then
30405: LD_VAR 0 1
30409: PUSH
30410: LD_INT 121
30412: EQUAL
30413: IFFALSE 30415
// end ;
30415: LD_VAR 0 6
30419: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
30420: LD_INT 0
30422: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
30423: LD_VAR 0 1
30427: PUSH
30428: LD_INT 250
30430: EQUAL
30431: PUSH
30432: LD_VAR 0 2
30436: PPUSH
30437: CALL_OW 264
30441: PUSH
30442: LD_EXP 126
30446: EQUAL
30447: AND
30448: IFFALSE 30469
// MinerPlaceMine ( unit , x , y ) ;
30450: LD_VAR 0 2
30454: PPUSH
30455: LD_VAR 0 4
30459: PPUSH
30460: LD_VAR 0 5
30464: PPUSH
30465: CALL 32818 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
30469: LD_VAR 0 1
30473: PUSH
30474: LD_INT 251
30476: EQUAL
30477: PUSH
30478: LD_VAR 0 2
30482: PPUSH
30483: CALL_OW 264
30487: PUSH
30488: LD_EXP 126
30492: EQUAL
30493: AND
30494: IFFALSE 30515
// MinerDetonateMine ( unit , x , y ) ;
30496: LD_VAR 0 2
30500: PPUSH
30501: LD_VAR 0 4
30505: PPUSH
30506: LD_VAR 0 5
30510: PPUSH
30511: CALL 33095 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
30515: LD_VAR 0 1
30519: PUSH
30520: LD_INT 252
30522: EQUAL
30523: PUSH
30524: LD_VAR 0 2
30528: PPUSH
30529: CALL_OW 264
30533: PUSH
30534: LD_EXP 126
30538: EQUAL
30539: AND
30540: IFFALSE 30561
// MinerCreateMinefield ( unit , x , y ) ;
30542: LD_VAR 0 2
30546: PPUSH
30547: LD_VAR 0 4
30551: PPUSH
30552: LD_VAR 0 5
30556: PPUSH
30557: CALL 33512 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
30561: LD_VAR 0 1
30565: PUSH
30566: LD_INT 253
30568: EQUAL
30569: PUSH
30570: LD_VAR 0 2
30574: PPUSH
30575: CALL_OW 257
30579: PUSH
30580: LD_INT 5
30582: EQUAL
30583: AND
30584: IFFALSE 30605
// ComBinocular ( unit , x , y ) ;
30586: LD_VAR 0 2
30590: PPUSH
30591: LD_VAR 0 4
30595: PPUSH
30596: LD_VAR 0 5
30600: PPUSH
30601: CALL 33883 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
30605: LD_VAR 0 1
30609: PUSH
30610: LD_INT 254
30612: EQUAL
30613: PUSH
30614: LD_VAR 0 2
30618: PPUSH
30619: CALL_OW 264
30623: PUSH
30624: LD_EXP 121
30628: EQUAL
30629: AND
30630: PUSH
30631: LD_VAR 0 3
30635: PPUSH
30636: CALL_OW 263
30640: PUSH
30641: LD_INT 3
30643: EQUAL
30644: AND
30645: IFFALSE 30661
// HackDestroyVehicle ( unit , selectedUnit ) ;
30647: LD_VAR 0 2
30651: PPUSH
30652: LD_VAR 0 3
30656: PPUSH
30657: CALL 32178 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
30661: LD_VAR 0 1
30665: PUSH
30666: LD_INT 255
30668: EQUAL
30669: PUSH
30670: LD_VAR 0 2
30674: PPUSH
30675: CALL_OW 264
30679: PUSH
30680: LD_INT 14
30682: PUSH
30683: LD_INT 53
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: IN
30690: AND
30691: PUSH
30692: LD_VAR 0 4
30696: PPUSH
30697: LD_VAR 0 5
30701: PPUSH
30702: CALL_OW 488
30706: AND
30707: IFFALSE 30731
// CutTreeXYR ( unit , x , y , 12 ) ;
30709: LD_VAR 0 2
30713: PPUSH
30714: LD_VAR 0 4
30718: PPUSH
30719: LD_VAR 0 5
30723: PPUSH
30724: LD_INT 12
30726: PPUSH
30727: CALL 30744 0 4
// end ;
30731: LD_VAR 0 6
30735: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
30736: LD_INT 0
30738: PPUSH
// end ;
30739: LD_VAR 0 4
30743: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
30744: LD_INT 0
30746: PPUSH
30747: PPUSH
30748: PPUSH
30749: PPUSH
30750: PPUSH
30751: PPUSH
30752: PPUSH
30753: PPUSH
30754: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
30755: LD_VAR 0 1
30759: NOT
30760: PUSH
30761: LD_VAR 0 2
30765: PPUSH
30766: LD_VAR 0 3
30770: PPUSH
30771: CALL_OW 488
30775: NOT
30776: OR
30777: PUSH
30778: LD_VAR 0 4
30782: NOT
30783: OR
30784: IFFALSE 30788
// exit ;
30786: GO 31128
// list := [ ] ;
30788: LD_ADDR_VAR 0 13
30792: PUSH
30793: EMPTY
30794: ST_TO_ADDR
// if x - r < 0 then
30795: LD_VAR 0 2
30799: PUSH
30800: LD_VAR 0 4
30804: MINUS
30805: PUSH
30806: LD_INT 0
30808: LESS
30809: IFFALSE 30821
// min_x := 0 else
30811: LD_ADDR_VAR 0 7
30815: PUSH
30816: LD_INT 0
30818: ST_TO_ADDR
30819: GO 30837
// min_x := x - r ;
30821: LD_ADDR_VAR 0 7
30825: PUSH
30826: LD_VAR 0 2
30830: PUSH
30831: LD_VAR 0 4
30835: MINUS
30836: ST_TO_ADDR
// if y - r < 0 then
30837: LD_VAR 0 3
30841: PUSH
30842: LD_VAR 0 4
30846: MINUS
30847: PUSH
30848: LD_INT 0
30850: LESS
30851: IFFALSE 30863
// min_y := 0 else
30853: LD_ADDR_VAR 0 8
30857: PUSH
30858: LD_INT 0
30860: ST_TO_ADDR
30861: GO 30879
// min_y := y - r ;
30863: LD_ADDR_VAR 0 8
30867: PUSH
30868: LD_VAR 0 3
30872: PUSH
30873: LD_VAR 0 4
30877: MINUS
30878: ST_TO_ADDR
// max_x := x + r ;
30879: LD_ADDR_VAR 0 9
30883: PUSH
30884: LD_VAR 0 2
30888: PUSH
30889: LD_VAR 0 4
30893: PLUS
30894: ST_TO_ADDR
// max_y := y + r ;
30895: LD_ADDR_VAR 0 10
30899: PUSH
30900: LD_VAR 0 3
30904: PUSH
30905: LD_VAR 0 4
30909: PLUS
30910: ST_TO_ADDR
// for _x = min_x to max_x do
30911: LD_ADDR_VAR 0 11
30915: PUSH
30916: DOUBLE
30917: LD_VAR 0 7
30921: DEC
30922: ST_TO_ADDR
30923: LD_VAR 0 9
30927: PUSH
30928: FOR_TO
30929: IFFALSE 31046
// for _y = min_y to max_y do
30931: LD_ADDR_VAR 0 12
30935: PUSH
30936: DOUBLE
30937: LD_VAR 0 8
30941: DEC
30942: ST_TO_ADDR
30943: LD_VAR 0 10
30947: PUSH
30948: FOR_TO
30949: IFFALSE 31042
// begin if not ValidHex ( _x , _y ) then
30951: LD_VAR 0 11
30955: PPUSH
30956: LD_VAR 0 12
30960: PPUSH
30961: CALL_OW 488
30965: NOT
30966: IFFALSE 30970
// continue ;
30968: GO 30948
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
30970: LD_VAR 0 11
30974: PPUSH
30975: LD_VAR 0 12
30979: PPUSH
30980: CALL_OW 351
30984: PUSH
30985: LD_VAR 0 11
30989: PPUSH
30990: LD_VAR 0 12
30994: PPUSH
30995: CALL_OW 554
30999: AND
31000: IFFALSE 31040
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
31002: LD_ADDR_VAR 0 13
31006: PUSH
31007: LD_VAR 0 13
31011: PPUSH
31012: LD_VAR 0 13
31016: PUSH
31017: LD_INT 1
31019: PLUS
31020: PPUSH
31021: LD_VAR 0 11
31025: PUSH
31026: LD_VAR 0 12
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PPUSH
31035: CALL_OW 2
31039: ST_TO_ADDR
// end ;
31040: GO 30948
31042: POP
31043: POP
31044: GO 30928
31046: POP
31047: POP
// if not list then
31048: LD_VAR 0 13
31052: NOT
31053: IFFALSE 31057
// exit ;
31055: GO 31128
// for i in list do
31057: LD_ADDR_VAR 0 6
31061: PUSH
31062: LD_VAR 0 13
31066: PUSH
31067: FOR_IN
31068: IFFALSE 31126
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
31070: LD_VAR 0 1
31074: PPUSH
31075: LD_STRING M
31077: PUSH
31078: LD_VAR 0 6
31082: PUSH
31083: LD_INT 1
31085: ARRAY
31086: PUSH
31087: LD_VAR 0 6
31091: PUSH
31092: LD_INT 2
31094: ARRAY
31095: PUSH
31096: LD_INT 0
31098: PUSH
31099: LD_INT 0
31101: PUSH
31102: LD_INT 0
31104: PUSH
31105: LD_INT 0
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: PUSH
31117: EMPTY
31118: LIST
31119: PPUSH
31120: CALL_OW 447
31124: GO 31067
31126: POP
31127: POP
// end ;
31128: LD_VAR 0 5
31132: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
31133: LD_EXP 109
31137: NOT
31138: IFFALSE 31188
31140: GO 31142
31142: DISABLE
// begin initHack := true ;
31143: LD_ADDR_EXP 109
31147: PUSH
31148: LD_INT 1
31150: ST_TO_ADDR
// hackTanks := [ ] ;
31151: LD_ADDR_EXP 110
31155: PUSH
31156: EMPTY
31157: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
31158: LD_ADDR_EXP 111
31162: PUSH
31163: EMPTY
31164: ST_TO_ADDR
// hackLimit := 3 ;
31165: LD_ADDR_EXP 112
31169: PUSH
31170: LD_INT 3
31172: ST_TO_ADDR
// hackDist := 12 ;
31173: LD_ADDR_EXP 113
31177: PUSH
31178: LD_INT 12
31180: ST_TO_ADDR
// hackCounter := [ ] ;
31181: LD_ADDR_EXP 114
31185: PUSH
31186: EMPTY
31187: ST_TO_ADDR
// end ;
31188: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
31189: LD_EXP 109
31193: PUSH
31194: LD_INT 34
31196: PUSH
31197: LD_EXP 121
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PPUSH
31206: CALL_OW 69
31210: AND
31211: IFFALSE 31466
31213: GO 31215
31215: DISABLE
31216: LD_INT 0
31218: PPUSH
31219: PPUSH
// begin enable ;
31220: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
31221: LD_ADDR_VAR 0 1
31225: PUSH
31226: LD_INT 34
31228: PUSH
31229: LD_EXP 121
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PPUSH
31238: CALL_OW 69
31242: PUSH
31243: FOR_IN
31244: IFFALSE 31464
// begin if not i in hackTanks then
31246: LD_VAR 0 1
31250: PUSH
31251: LD_EXP 110
31255: IN
31256: NOT
31257: IFFALSE 31340
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
31259: LD_ADDR_EXP 110
31263: PUSH
31264: LD_EXP 110
31268: PPUSH
31269: LD_EXP 110
31273: PUSH
31274: LD_INT 1
31276: PLUS
31277: PPUSH
31278: LD_VAR 0 1
31282: PPUSH
31283: CALL_OW 1
31287: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
31288: LD_ADDR_EXP 111
31292: PUSH
31293: LD_EXP 111
31297: PPUSH
31298: LD_EXP 111
31302: PUSH
31303: LD_INT 1
31305: PLUS
31306: PPUSH
31307: EMPTY
31308: PPUSH
31309: CALL_OW 1
31313: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
31314: LD_ADDR_EXP 114
31318: PUSH
31319: LD_EXP 114
31323: PPUSH
31324: LD_EXP 114
31328: PUSH
31329: LD_INT 1
31331: PLUS
31332: PPUSH
31333: EMPTY
31334: PPUSH
31335: CALL_OW 1
31339: ST_TO_ADDR
// end ; if not IsOk ( i ) then
31340: LD_VAR 0 1
31344: PPUSH
31345: CALL_OW 302
31349: NOT
31350: IFFALSE 31363
// begin HackUnlinkAll ( i ) ;
31352: LD_VAR 0 1
31356: PPUSH
31357: CALL 31469 0 1
// continue ;
31361: GO 31243
// end ; HackCheckCapturedStatus ( i ) ;
31363: LD_VAR 0 1
31367: PPUSH
31368: CALL 31912 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
31372: LD_ADDR_VAR 0 2
31376: PUSH
31377: LD_INT 81
31379: PUSH
31380: LD_VAR 0 1
31384: PPUSH
31385: CALL_OW 255
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 33
31396: PUSH
31397: LD_INT 3
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 91
31406: PUSH
31407: LD_VAR 0 1
31411: PUSH
31412: LD_EXP 113
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 50
31424: PUSH
31425: EMPTY
31426: LIST
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: PPUSH
31434: CALL_OW 69
31438: ST_TO_ADDR
// if not tmp then
31439: LD_VAR 0 2
31443: NOT
31444: IFFALSE 31448
// continue ;
31446: GO 31243
// HackLink ( i , tmp ) ;
31448: LD_VAR 0 1
31452: PPUSH
31453: LD_VAR 0 2
31457: PPUSH
31458: CALL 31605 0 2
// end ;
31462: GO 31243
31464: POP
31465: POP
// end ;
31466: PPOPN 2
31468: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
31469: LD_INT 0
31471: PPUSH
31472: PPUSH
31473: PPUSH
// if not hack in hackTanks then
31474: LD_VAR 0 1
31478: PUSH
31479: LD_EXP 110
31483: IN
31484: NOT
31485: IFFALSE 31489
// exit ;
31487: GO 31600
// index := GetElementIndex ( hackTanks , hack ) ;
31489: LD_ADDR_VAR 0 4
31493: PUSH
31494: LD_EXP 110
31498: PPUSH
31499: LD_VAR 0 1
31503: PPUSH
31504: CALL 39242 0 2
31508: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
31509: LD_EXP 111
31513: PUSH
31514: LD_VAR 0 4
31518: ARRAY
31519: IFFALSE 31600
// begin for i in hackTanksCaptured [ index ] do
31521: LD_ADDR_VAR 0 3
31525: PUSH
31526: LD_EXP 111
31530: PUSH
31531: LD_VAR 0 4
31535: ARRAY
31536: PUSH
31537: FOR_IN
31538: IFFALSE 31564
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
31540: LD_VAR 0 3
31544: PUSH
31545: LD_INT 1
31547: ARRAY
31548: PPUSH
31549: LD_VAR 0 3
31553: PUSH
31554: LD_INT 2
31556: ARRAY
31557: PPUSH
31558: CALL_OW 235
31562: GO 31537
31564: POP
31565: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
31566: LD_ADDR_EXP 111
31570: PUSH
31571: LD_EXP 111
31575: PPUSH
31576: LD_VAR 0 4
31580: PPUSH
31581: EMPTY
31582: PPUSH
31583: CALL_OW 1
31587: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
31588: LD_VAR 0 1
31592: PPUSH
31593: LD_INT 0
31595: PPUSH
31596: CALL_OW 505
// end ; end ;
31600: LD_VAR 0 2
31604: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
31605: LD_INT 0
31607: PPUSH
31608: PPUSH
31609: PPUSH
// if not hack in hackTanks or not vehicles then
31610: LD_VAR 0 1
31614: PUSH
31615: LD_EXP 110
31619: IN
31620: NOT
31621: PUSH
31622: LD_VAR 0 2
31626: NOT
31627: OR
31628: IFFALSE 31632
// exit ;
31630: GO 31907
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
31632: LD_ADDR_VAR 0 2
31636: PUSH
31637: LD_VAR 0 1
31641: PPUSH
31642: LD_VAR 0 2
31646: PPUSH
31647: LD_INT 1
31649: PPUSH
31650: LD_INT 1
31652: PPUSH
31653: CALL 39892 0 4
31657: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
31658: LD_ADDR_VAR 0 5
31662: PUSH
31663: LD_EXP 110
31667: PPUSH
31668: LD_VAR 0 1
31672: PPUSH
31673: CALL 39242 0 2
31677: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
31678: LD_EXP 111
31682: PUSH
31683: LD_VAR 0 5
31687: ARRAY
31688: PUSH
31689: LD_EXP 112
31693: LESS
31694: IFFALSE 31883
// begin for i := 1 to vehicles do
31696: LD_ADDR_VAR 0 4
31700: PUSH
31701: DOUBLE
31702: LD_INT 1
31704: DEC
31705: ST_TO_ADDR
31706: LD_VAR 0 2
31710: PUSH
31711: FOR_TO
31712: IFFALSE 31881
// begin if hackTanksCaptured [ index ] = hackLimit then
31714: LD_EXP 111
31718: PUSH
31719: LD_VAR 0 5
31723: ARRAY
31724: PUSH
31725: LD_EXP 112
31729: EQUAL
31730: IFFALSE 31734
// break ;
31732: GO 31881
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
31734: LD_ADDR_EXP 114
31738: PUSH
31739: LD_EXP 114
31743: PPUSH
31744: LD_VAR 0 5
31748: PPUSH
31749: LD_EXP 114
31753: PUSH
31754: LD_VAR 0 5
31758: ARRAY
31759: PUSH
31760: LD_INT 1
31762: PLUS
31763: PPUSH
31764: CALL_OW 1
31768: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
31769: LD_ADDR_EXP 111
31773: PUSH
31774: LD_EXP 111
31778: PPUSH
31779: LD_VAR 0 5
31783: PUSH
31784: LD_EXP 111
31788: PUSH
31789: LD_VAR 0 5
31793: ARRAY
31794: PUSH
31795: LD_INT 1
31797: PLUS
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PPUSH
31803: LD_VAR 0 2
31807: PUSH
31808: LD_VAR 0 4
31812: ARRAY
31813: PUSH
31814: LD_VAR 0 2
31818: PUSH
31819: LD_VAR 0 4
31823: ARRAY
31824: PPUSH
31825: CALL_OW 255
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PPUSH
31834: CALL 39457 0 3
31838: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
31839: LD_VAR 0 2
31843: PUSH
31844: LD_VAR 0 4
31848: ARRAY
31849: PPUSH
31850: LD_VAR 0 1
31854: PPUSH
31855: CALL_OW 255
31859: PPUSH
31860: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
31864: LD_VAR 0 2
31868: PUSH
31869: LD_VAR 0 4
31873: ARRAY
31874: PPUSH
31875: CALL_OW 141
// end ;
31879: GO 31711
31881: POP
31882: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31883: LD_VAR 0 1
31887: PPUSH
31888: LD_EXP 111
31892: PUSH
31893: LD_VAR 0 5
31897: ARRAY
31898: PUSH
31899: LD_INT 0
31901: PLUS
31902: PPUSH
31903: CALL_OW 505
// end ;
31907: LD_VAR 0 3
31911: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
31912: LD_INT 0
31914: PPUSH
31915: PPUSH
31916: PPUSH
31917: PPUSH
// if not hack in hackTanks then
31918: LD_VAR 0 1
31922: PUSH
31923: LD_EXP 110
31927: IN
31928: NOT
31929: IFFALSE 31933
// exit ;
31931: GO 32173
// index := GetElementIndex ( hackTanks , hack ) ;
31933: LD_ADDR_VAR 0 4
31937: PUSH
31938: LD_EXP 110
31942: PPUSH
31943: LD_VAR 0 1
31947: PPUSH
31948: CALL 39242 0 2
31952: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
31953: LD_ADDR_VAR 0 3
31957: PUSH
31958: DOUBLE
31959: LD_EXP 111
31963: PUSH
31964: LD_VAR 0 4
31968: ARRAY
31969: INC
31970: ST_TO_ADDR
31971: LD_INT 1
31973: PUSH
31974: FOR_DOWNTO
31975: IFFALSE 32147
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
31977: LD_ADDR_VAR 0 5
31981: PUSH
31982: LD_EXP 111
31986: PUSH
31987: LD_VAR 0 4
31991: ARRAY
31992: PUSH
31993: LD_VAR 0 3
31997: ARRAY
31998: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
31999: LD_VAR 0 5
32003: PUSH
32004: LD_INT 1
32006: ARRAY
32007: PPUSH
32008: CALL_OW 302
32012: NOT
32013: PUSH
32014: LD_VAR 0 5
32018: PUSH
32019: LD_INT 1
32021: ARRAY
32022: PPUSH
32023: CALL_OW 255
32027: PUSH
32028: LD_VAR 0 1
32032: PPUSH
32033: CALL_OW 255
32037: NONEQUAL
32038: OR
32039: IFFALSE 32145
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
32041: LD_VAR 0 5
32045: PUSH
32046: LD_INT 1
32048: ARRAY
32049: PPUSH
32050: CALL_OW 305
32054: PUSH
32055: LD_VAR 0 5
32059: PUSH
32060: LD_INT 1
32062: ARRAY
32063: PPUSH
32064: CALL_OW 255
32068: PUSH
32069: LD_VAR 0 1
32073: PPUSH
32074: CALL_OW 255
32078: EQUAL
32079: AND
32080: IFFALSE 32104
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
32082: LD_VAR 0 5
32086: PUSH
32087: LD_INT 1
32089: ARRAY
32090: PPUSH
32091: LD_VAR 0 5
32095: PUSH
32096: LD_INT 2
32098: ARRAY
32099: PPUSH
32100: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
32104: LD_ADDR_EXP 111
32108: PUSH
32109: LD_EXP 111
32113: PPUSH
32114: LD_VAR 0 4
32118: PPUSH
32119: LD_EXP 111
32123: PUSH
32124: LD_VAR 0 4
32128: ARRAY
32129: PPUSH
32130: LD_VAR 0 3
32134: PPUSH
32135: CALL_OW 3
32139: PPUSH
32140: CALL_OW 1
32144: ST_TO_ADDR
// end ; end ;
32145: GO 31974
32147: POP
32148: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32149: LD_VAR 0 1
32153: PPUSH
32154: LD_EXP 111
32158: PUSH
32159: LD_VAR 0 4
32163: ARRAY
32164: PUSH
32165: LD_INT 0
32167: PLUS
32168: PPUSH
32169: CALL_OW 505
// end ;
32173: LD_VAR 0 2
32177: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
32178: LD_INT 0
32180: PPUSH
32181: PPUSH
32182: PPUSH
32183: PPUSH
// if not hack in hackTanks then
32184: LD_VAR 0 1
32188: PUSH
32189: LD_EXP 110
32193: IN
32194: NOT
32195: IFFALSE 32199
// exit ;
32197: GO 32284
// index := GetElementIndex ( hackTanks , hack ) ;
32199: LD_ADDR_VAR 0 5
32203: PUSH
32204: LD_EXP 110
32208: PPUSH
32209: LD_VAR 0 1
32213: PPUSH
32214: CALL 39242 0 2
32218: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
32219: LD_ADDR_VAR 0 4
32223: PUSH
32224: DOUBLE
32225: LD_INT 1
32227: DEC
32228: ST_TO_ADDR
32229: LD_EXP 111
32233: PUSH
32234: LD_VAR 0 5
32238: ARRAY
32239: PUSH
32240: FOR_TO
32241: IFFALSE 32282
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
32243: LD_EXP 111
32247: PUSH
32248: LD_VAR 0 5
32252: ARRAY
32253: PUSH
32254: LD_VAR 0 4
32258: ARRAY
32259: PUSH
32260: LD_INT 1
32262: ARRAY
32263: PUSH
32264: LD_VAR 0 2
32268: EQUAL
32269: IFFALSE 32280
// KillUnit ( vehicle ) ;
32271: LD_VAR 0 2
32275: PPUSH
32276: CALL_OW 66
32280: GO 32240
32282: POP
32283: POP
// end ;
32284: LD_VAR 0 3
32288: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
32289: LD_EXP 115
32293: NOT
32294: IFFALSE 32329
32296: GO 32298
32298: DISABLE
// begin initMiner := true ;
32299: LD_ADDR_EXP 115
32303: PUSH
32304: LD_INT 1
32306: ST_TO_ADDR
// minersList := [ ] ;
32307: LD_ADDR_EXP 116
32311: PUSH
32312: EMPTY
32313: ST_TO_ADDR
// minerMinesList := [ ] ;
32314: LD_ADDR_EXP 117
32318: PUSH
32319: EMPTY
32320: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
32321: LD_ADDR_EXP 118
32325: PUSH
32326: LD_INT 5
32328: ST_TO_ADDR
// end ;
32329: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
32330: LD_EXP 115
32334: PUSH
32335: LD_INT 34
32337: PUSH
32338: LD_EXP 126
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PPUSH
32347: CALL_OW 69
32351: AND
32352: IFFALSE 32815
32354: GO 32356
32356: DISABLE
32357: LD_INT 0
32359: PPUSH
32360: PPUSH
32361: PPUSH
32362: PPUSH
// begin enable ;
32363: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
32364: LD_ADDR_VAR 0 1
32368: PUSH
32369: LD_INT 34
32371: PUSH
32372: LD_EXP 126
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PPUSH
32381: CALL_OW 69
32385: PUSH
32386: FOR_IN
32387: IFFALSE 32459
// begin if not i in minersList then
32389: LD_VAR 0 1
32393: PUSH
32394: LD_EXP 116
32398: IN
32399: NOT
32400: IFFALSE 32457
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
32402: LD_ADDR_EXP 116
32406: PUSH
32407: LD_EXP 116
32411: PPUSH
32412: LD_EXP 116
32416: PUSH
32417: LD_INT 1
32419: PLUS
32420: PPUSH
32421: LD_VAR 0 1
32425: PPUSH
32426: CALL_OW 1
32430: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
32431: LD_ADDR_EXP 117
32435: PUSH
32436: LD_EXP 117
32440: PPUSH
32441: LD_EXP 117
32445: PUSH
32446: LD_INT 1
32448: PLUS
32449: PPUSH
32450: EMPTY
32451: PPUSH
32452: CALL_OW 1
32456: ST_TO_ADDR
// end end ;
32457: GO 32386
32459: POP
32460: POP
// for i := minerMinesList downto 1 do
32461: LD_ADDR_VAR 0 1
32465: PUSH
32466: DOUBLE
32467: LD_EXP 117
32471: INC
32472: ST_TO_ADDR
32473: LD_INT 1
32475: PUSH
32476: FOR_DOWNTO
32477: IFFALSE 32813
// begin if IsLive ( minersList [ i ] ) then
32479: LD_EXP 116
32483: PUSH
32484: LD_VAR 0 1
32488: ARRAY
32489: PPUSH
32490: CALL_OW 300
32494: IFFALSE 32522
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
32496: LD_EXP 116
32500: PUSH
32501: LD_VAR 0 1
32505: ARRAY
32506: PPUSH
32507: LD_EXP 117
32511: PUSH
32512: LD_VAR 0 1
32516: ARRAY
32517: PPUSH
32518: CALL_OW 505
// if not minerMinesList [ i ] then
32522: LD_EXP 117
32526: PUSH
32527: LD_VAR 0 1
32531: ARRAY
32532: NOT
32533: IFFALSE 32537
// continue ;
32535: GO 32476
// for j := minerMinesList [ i ] downto 1 do
32537: LD_ADDR_VAR 0 2
32541: PUSH
32542: DOUBLE
32543: LD_EXP 117
32547: PUSH
32548: LD_VAR 0 1
32552: ARRAY
32553: INC
32554: ST_TO_ADDR
32555: LD_INT 1
32557: PUSH
32558: FOR_DOWNTO
32559: IFFALSE 32809
// begin side := GetSide ( minersList [ i ] ) ;
32561: LD_ADDR_VAR 0 3
32565: PUSH
32566: LD_EXP 116
32570: PUSH
32571: LD_VAR 0 1
32575: ARRAY
32576: PPUSH
32577: CALL_OW 255
32581: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
32582: LD_ADDR_VAR 0 4
32586: PUSH
32587: LD_EXP 117
32591: PUSH
32592: LD_VAR 0 1
32596: ARRAY
32597: PUSH
32598: LD_VAR 0 2
32602: ARRAY
32603: PUSH
32604: LD_INT 1
32606: ARRAY
32607: PPUSH
32608: LD_EXP 117
32612: PUSH
32613: LD_VAR 0 1
32617: ARRAY
32618: PUSH
32619: LD_VAR 0 2
32623: ARRAY
32624: PUSH
32625: LD_INT 2
32627: ARRAY
32628: PPUSH
32629: CALL_OW 428
32633: ST_TO_ADDR
// if not tmp then
32634: LD_VAR 0 4
32638: NOT
32639: IFFALSE 32643
// continue ;
32641: GO 32558
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
32643: LD_VAR 0 4
32647: PUSH
32648: LD_INT 81
32650: PUSH
32651: LD_VAR 0 3
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PPUSH
32660: CALL_OW 69
32664: IN
32665: PUSH
32666: LD_EXP 117
32670: PUSH
32671: LD_VAR 0 1
32675: ARRAY
32676: PUSH
32677: LD_VAR 0 2
32681: ARRAY
32682: PUSH
32683: LD_INT 1
32685: ARRAY
32686: PPUSH
32687: LD_EXP 117
32691: PUSH
32692: LD_VAR 0 1
32696: ARRAY
32697: PUSH
32698: LD_VAR 0 2
32702: ARRAY
32703: PUSH
32704: LD_INT 2
32706: ARRAY
32707: PPUSH
32708: CALL_OW 458
32712: AND
32713: IFFALSE 32807
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
32715: LD_EXP 117
32719: PUSH
32720: LD_VAR 0 1
32724: ARRAY
32725: PUSH
32726: LD_VAR 0 2
32730: ARRAY
32731: PUSH
32732: LD_INT 1
32734: ARRAY
32735: PPUSH
32736: LD_EXP 117
32740: PUSH
32741: LD_VAR 0 1
32745: ARRAY
32746: PUSH
32747: LD_VAR 0 2
32751: ARRAY
32752: PUSH
32753: LD_INT 2
32755: ARRAY
32756: PPUSH
32757: LD_VAR 0 3
32761: PPUSH
32762: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
32766: LD_ADDR_EXP 117
32770: PUSH
32771: LD_EXP 117
32775: PPUSH
32776: LD_VAR 0 1
32780: PPUSH
32781: LD_EXP 117
32785: PUSH
32786: LD_VAR 0 1
32790: ARRAY
32791: PPUSH
32792: LD_VAR 0 2
32796: PPUSH
32797: CALL_OW 3
32801: PPUSH
32802: CALL_OW 1
32806: ST_TO_ADDR
// end ; end ;
32807: GO 32558
32809: POP
32810: POP
// end ;
32811: GO 32476
32813: POP
32814: POP
// end ;
32815: PPOPN 4
32817: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
32818: LD_INT 0
32820: PPUSH
32821: PPUSH
// result := false ;
32822: LD_ADDR_VAR 0 4
32826: PUSH
32827: LD_INT 0
32829: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
32830: LD_VAR 0 1
32834: PPUSH
32835: CALL_OW 264
32839: PUSH
32840: LD_EXP 126
32844: EQUAL
32845: NOT
32846: IFFALSE 32850
// exit ;
32848: GO 33090
// index := GetElementIndex ( minersList , unit ) ;
32850: LD_ADDR_VAR 0 5
32854: PUSH
32855: LD_EXP 116
32859: PPUSH
32860: LD_VAR 0 1
32864: PPUSH
32865: CALL 39242 0 2
32869: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
32870: LD_EXP 117
32874: PUSH
32875: LD_VAR 0 5
32879: ARRAY
32880: PUSH
32881: LD_EXP 118
32885: GREATEREQUAL
32886: IFFALSE 32890
// exit ;
32888: GO 33090
// ComMoveXY ( unit , x , y ) ;
32890: LD_VAR 0 1
32894: PPUSH
32895: LD_VAR 0 2
32899: PPUSH
32900: LD_VAR 0 3
32904: PPUSH
32905: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32909: LD_INT 35
32911: PPUSH
32912: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
32916: LD_VAR 0 1
32920: PPUSH
32921: LD_VAR 0 2
32925: PPUSH
32926: LD_VAR 0 3
32930: PPUSH
32931: CALL 70014 0 3
32935: NOT
32936: PUSH
32937: LD_VAR 0 1
32941: PPUSH
32942: CALL_OW 314
32946: AND
32947: IFFALSE 32951
// exit ;
32949: GO 33090
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
32951: LD_VAR 0 2
32955: PPUSH
32956: LD_VAR 0 3
32960: PPUSH
32961: CALL_OW 428
32965: PUSH
32966: LD_VAR 0 1
32970: EQUAL
32971: PUSH
32972: LD_VAR 0 1
32976: PPUSH
32977: CALL_OW 314
32981: NOT
32982: AND
32983: IFFALSE 32909
// PlaySoundXY ( x , y , PlantMine ) ;
32985: LD_VAR 0 2
32989: PPUSH
32990: LD_VAR 0 3
32994: PPUSH
32995: LD_STRING PlantMine
32997: PPUSH
32998: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
33002: LD_VAR 0 2
33006: PPUSH
33007: LD_VAR 0 3
33011: PPUSH
33012: LD_VAR 0 1
33016: PPUSH
33017: CALL_OW 255
33021: PPUSH
33022: LD_INT 0
33024: PPUSH
33025: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
33029: LD_ADDR_EXP 117
33033: PUSH
33034: LD_EXP 117
33038: PPUSH
33039: LD_VAR 0 5
33043: PUSH
33044: LD_EXP 117
33048: PUSH
33049: LD_VAR 0 5
33053: ARRAY
33054: PUSH
33055: LD_INT 1
33057: PLUS
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PPUSH
33063: LD_VAR 0 2
33067: PUSH
33068: LD_VAR 0 3
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PPUSH
33077: CALL 39457 0 3
33081: ST_TO_ADDR
// result := true ;
33082: LD_ADDR_VAR 0 4
33086: PUSH
33087: LD_INT 1
33089: ST_TO_ADDR
// end ;
33090: LD_VAR 0 4
33094: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
33095: LD_INT 0
33097: PPUSH
33098: PPUSH
33099: PPUSH
// if not unit in minersList then
33100: LD_VAR 0 1
33104: PUSH
33105: LD_EXP 116
33109: IN
33110: NOT
33111: IFFALSE 33115
// exit ;
33113: GO 33507
// index := GetElementIndex ( minersList , unit ) ;
33115: LD_ADDR_VAR 0 6
33119: PUSH
33120: LD_EXP 116
33124: PPUSH
33125: LD_VAR 0 1
33129: PPUSH
33130: CALL 39242 0 2
33134: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
33135: LD_ADDR_VAR 0 5
33139: PUSH
33140: DOUBLE
33141: LD_EXP 117
33145: PUSH
33146: LD_VAR 0 6
33150: ARRAY
33151: INC
33152: ST_TO_ADDR
33153: LD_INT 1
33155: PUSH
33156: FOR_DOWNTO
33157: IFFALSE 33318
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
33159: LD_EXP 117
33163: PUSH
33164: LD_VAR 0 6
33168: ARRAY
33169: PUSH
33170: LD_VAR 0 5
33174: ARRAY
33175: PUSH
33176: LD_INT 1
33178: ARRAY
33179: PUSH
33180: LD_VAR 0 2
33184: EQUAL
33185: PUSH
33186: LD_EXP 117
33190: PUSH
33191: LD_VAR 0 6
33195: ARRAY
33196: PUSH
33197: LD_VAR 0 5
33201: ARRAY
33202: PUSH
33203: LD_INT 2
33205: ARRAY
33206: PUSH
33207: LD_VAR 0 3
33211: EQUAL
33212: AND
33213: IFFALSE 33316
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
33215: LD_EXP 117
33219: PUSH
33220: LD_VAR 0 6
33224: ARRAY
33225: PUSH
33226: LD_VAR 0 5
33230: ARRAY
33231: PUSH
33232: LD_INT 1
33234: ARRAY
33235: PPUSH
33236: LD_EXP 117
33240: PUSH
33241: LD_VAR 0 6
33245: ARRAY
33246: PUSH
33247: LD_VAR 0 5
33251: ARRAY
33252: PUSH
33253: LD_INT 2
33255: ARRAY
33256: PPUSH
33257: LD_VAR 0 1
33261: PPUSH
33262: CALL_OW 255
33266: PPUSH
33267: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
33271: LD_ADDR_EXP 117
33275: PUSH
33276: LD_EXP 117
33280: PPUSH
33281: LD_VAR 0 6
33285: PPUSH
33286: LD_EXP 117
33290: PUSH
33291: LD_VAR 0 6
33295: ARRAY
33296: PPUSH
33297: LD_VAR 0 5
33301: PPUSH
33302: CALL_OW 3
33306: PPUSH
33307: CALL_OW 1
33311: ST_TO_ADDR
// exit ;
33312: POP
33313: POP
33314: GO 33507
// end ; end ;
33316: GO 33156
33318: POP
33319: POP
// for i := minerMinesList [ index ] downto 1 do
33320: LD_ADDR_VAR 0 5
33324: PUSH
33325: DOUBLE
33326: LD_EXP 117
33330: PUSH
33331: LD_VAR 0 6
33335: ARRAY
33336: INC
33337: ST_TO_ADDR
33338: LD_INT 1
33340: PUSH
33341: FOR_DOWNTO
33342: IFFALSE 33505
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
33344: LD_EXP 117
33348: PUSH
33349: LD_VAR 0 6
33353: ARRAY
33354: PUSH
33355: LD_VAR 0 5
33359: ARRAY
33360: PUSH
33361: LD_INT 1
33363: ARRAY
33364: PPUSH
33365: LD_EXP 117
33369: PUSH
33370: LD_VAR 0 6
33374: ARRAY
33375: PUSH
33376: LD_VAR 0 5
33380: ARRAY
33381: PUSH
33382: LD_INT 2
33384: ARRAY
33385: PPUSH
33386: LD_VAR 0 2
33390: PPUSH
33391: LD_VAR 0 3
33395: PPUSH
33396: CALL_OW 298
33400: PUSH
33401: LD_INT 6
33403: LESS
33404: IFFALSE 33503
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
33406: LD_EXP 117
33410: PUSH
33411: LD_VAR 0 6
33415: ARRAY
33416: PUSH
33417: LD_VAR 0 5
33421: ARRAY
33422: PUSH
33423: LD_INT 1
33425: ARRAY
33426: PPUSH
33427: LD_EXP 117
33431: PUSH
33432: LD_VAR 0 6
33436: ARRAY
33437: PUSH
33438: LD_VAR 0 5
33442: ARRAY
33443: PUSH
33444: LD_INT 2
33446: ARRAY
33447: PPUSH
33448: LD_VAR 0 1
33452: PPUSH
33453: CALL_OW 255
33457: PPUSH
33458: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
33462: LD_ADDR_EXP 117
33466: PUSH
33467: LD_EXP 117
33471: PPUSH
33472: LD_VAR 0 6
33476: PPUSH
33477: LD_EXP 117
33481: PUSH
33482: LD_VAR 0 6
33486: ARRAY
33487: PPUSH
33488: LD_VAR 0 5
33492: PPUSH
33493: CALL_OW 3
33497: PPUSH
33498: CALL_OW 1
33502: ST_TO_ADDR
// end ; end ;
33503: GO 33341
33505: POP
33506: POP
// end ;
33507: LD_VAR 0 4
33511: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
33512: LD_INT 0
33514: PPUSH
33515: PPUSH
33516: PPUSH
33517: PPUSH
33518: PPUSH
33519: PPUSH
33520: PPUSH
33521: PPUSH
33522: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
33523: LD_VAR 0 1
33527: PPUSH
33528: CALL_OW 264
33532: PUSH
33533: LD_EXP 126
33537: EQUAL
33538: NOT
33539: PUSH
33540: LD_VAR 0 1
33544: PUSH
33545: LD_EXP 116
33549: IN
33550: NOT
33551: OR
33552: IFFALSE 33556
// exit ;
33554: GO 33878
// index := GetElementIndex ( minersList , unit ) ;
33556: LD_ADDR_VAR 0 6
33560: PUSH
33561: LD_EXP 116
33565: PPUSH
33566: LD_VAR 0 1
33570: PPUSH
33571: CALL 39242 0 2
33575: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
33576: LD_ADDR_VAR 0 8
33580: PUSH
33581: LD_EXP 118
33585: PUSH
33586: LD_EXP 117
33590: PUSH
33591: LD_VAR 0 6
33595: ARRAY
33596: MINUS
33597: ST_TO_ADDR
// if not minesFreeAmount then
33598: LD_VAR 0 8
33602: NOT
33603: IFFALSE 33607
// exit ;
33605: GO 33878
// tmp := [ ] ;
33607: LD_ADDR_VAR 0 7
33611: PUSH
33612: EMPTY
33613: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
33614: LD_ADDR_VAR 0 5
33618: PUSH
33619: DOUBLE
33620: LD_INT 1
33622: DEC
33623: ST_TO_ADDR
33624: LD_VAR 0 8
33628: PUSH
33629: FOR_TO
33630: IFFALSE 33825
// begin _d := rand ( 0 , 5 ) ;
33632: LD_ADDR_VAR 0 11
33636: PUSH
33637: LD_INT 0
33639: PPUSH
33640: LD_INT 5
33642: PPUSH
33643: CALL_OW 12
33647: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
33648: LD_ADDR_VAR 0 12
33652: PUSH
33653: LD_INT 2
33655: PPUSH
33656: LD_INT 6
33658: PPUSH
33659: CALL_OW 12
33663: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
33664: LD_ADDR_VAR 0 9
33668: PUSH
33669: LD_VAR 0 2
33673: PPUSH
33674: LD_VAR 0 11
33678: PPUSH
33679: LD_VAR 0 12
33683: PPUSH
33684: CALL_OW 272
33688: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
33689: LD_ADDR_VAR 0 10
33693: PUSH
33694: LD_VAR 0 3
33698: PPUSH
33699: LD_VAR 0 11
33703: PPUSH
33704: LD_VAR 0 12
33708: PPUSH
33709: CALL_OW 273
33713: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
33714: LD_VAR 0 9
33718: PPUSH
33719: LD_VAR 0 10
33723: PPUSH
33724: CALL_OW 488
33728: PUSH
33729: LD_VAR 0 9
33733: PUSH
33734: LD_VAR 0 10
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_VAR 0 7
33747: IN
33748: NOT
33749: AND
33750: PUSH
33751: LD_VAR 0 9
33755: PPUSH
33756: LD_VAR 0 10
33760: PPUSH
33761: CALL_OW 458
33765: NOT
33766: AND
33767: IFFALSE 33809
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
33769: LD_ADDR_VAR 0 7
33773: PUSH
33774: LD_VAR 0 7
33778: PPUSH
33779: LD_VAR 0 7
33783: PUSH
33784: LD_INT 1
33786: PLUS
33787: PPUSH
33788: LD_VAR 0 9
33792: PUSH
33793: LD_VAR 0 10
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PPUSH
33802: CALL_OW 1
33806: ST_TO_ADDR
33807: GO 33823
// i := i - 1 ;
33809: LD_ADDR_VAR 0 5
33813: PUSH
33814: LD_VAR 0 5
33818: PUSH
33819: LD_INT 1
33821: MINUS
33822: ST_TO_ADDR
// end ;
33823: GO 33629
33825: POP
33826: POP
// for i in tmp do
33827: LD_ADDR_VAR 0 5
33831: PUSH
33832: LD_VAR 0 7
33836: PUSH
33837: FOR_IN
33838: IFFALSE 33876
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
33840: LD_VAR 0 1
33844: PPUSH
33845: LD_VAR 0 5
33849: PUSH
33850: LD_INT 1
33852: ARRAY
33853: PPUSH
33854: LD_VAR 0 5
33858: PUSH
33859: LD_INT 2
33861: ARRAY
33862: PPUSH
33863: CALL 32818 0 3
33867: NOT
33868: IFFALSE 33874
// exit ;
33870: POP
33871: POP
33872: GO 33878
33874: GO 33837
33876: POP
33877: POP
// end ;
33878: LD_VAR 0 4
33882: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
33883: LD_INT 0
33885: PPUSH
33886: PPUSH
33887: PPUSH
33888: PPUSH
33889: PPUSH
33890: PPUSH
33891: PPUSH
// if not GetClass ( unit ) = class_sniper then
33892: LD_VAR 0 1
33896: PPUSH
33897: CALL_OW 257
33901: PUSH
33902: LD_INT 5
33904: EQUAL
33905: NOT
33906: IFFALSE 33910
// exit ;
33908: GO 34298
// dist := 8 ;
33910: LD_ADDR_VAR 0 5
33914: PUSH
33915: LD_INT 8
33917: ST_TO_ADDR
// viewRange := 12 ;
33918: LD_ADDR_VAR 0 7
33922: PUSH
33923: LD_INT 12
33925: ST_TO_ADDR
// side := GetSide ( unit ) ;
33926: LD_ADDR_VAR 0 6
33930: PUSH
33931: LD_VAR 0 1
33935: PPUSH
33936: CALL_OW 255
33940: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
33941: LD_INT 61
33943: PPUSH
33944: LD_VAR 0 6
33948: PPUSH
33949: CALL_OW 321
33953: PUSH
33954: LD_INT 2
33956: EQUAL
33957: IFFALSE 33967
// viewRange := 16 ;
33959: LD_ADDR_VAR 0 7
33963: PUSH
33964: LD_INT 16
33966: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
33967: LD_VAR 0 1
33971: PPUSH
33972: LD_VAR 0 2
33976: PPUSH
33977: LD_VAR 0 3
33981: PPUSH
33982: CALL_OW 297
33986: PUSH
33987: LD_VAR 0 5
33991: GREATER
33992: IFFALSE 34071
// begin ComMoveXY ( unit , x , y ) ;
33994: LD_VAR 0 1
33998: PPUSH
33999: LD_VAR 0 2
34003: PPUSH
34004: LD_VAR 0 3
34008: PPUSH
34009: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34013: LD_INT 35
34015: PPUSH
34016: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
34020: LD_VAR 0 1
34024: PPUSH
34025: LD_VAR 0 2
34029: PPUSH
34030: LD_VAR 0 3
34034: PPUSH
34035: CALL 70014 0 3
34039: NOT
34040: IFFALSE 34044
// exit ;
34042: GO 34298
// until GetDistUnitXY ( unit , x , y ) < dist ;
34044: LD_VAR 0 1
34048: PPUSH
34049: LD_VAR 0 2
34053: PPUSH
34054: LD_VAR 0 3
34058: PPUSH
34059: CALL_OW 297
34063: PUSH
34064: LD_VAR 0 5
34068: LESS
34069: IFFALSE 34013
// end ; ComTurnXY ( unit , x , y ) ;
34071: LD_VAR 0 1
34075: PPUSH
34076: LD_VAR 0 2
34080: PPUSH
34081: LD_VAR 0 3
34085: PPUSH
34086: CALL_OW 118
// wait ( 5 ) ;
34090: LD_INT 5
34092: PPUSH
34093: CALL_OW 67
// _d := GetDir ( unit ) ;
34097: LD_ADDR_VAR 0 10
34101: PUSH
34102: LD_VAR 0 1
34106: PPUSH
34107: CALL_OW 254
34111: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
34112: LD_ADDR_VAR 0 8
34116: PUSH
34117: LD_VAR 0 1
34121: PPUSH
34122: CALL_OW 250
34126: PPUSH
34127: LD_VAR 0 10
34131: PPUSH
34132: LD_VAR 0 5
34136: PPUSH
34137: CALL_OW 272
34141: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
34142: LD_ADDR_VAR 0 9
34146: PUSH
34147: LD_VAR 0 1
34151: PPUSH
34152: CALL_OW 251
34156: PPUSH
34157: LD_VAR 0 10
34161: PPUSH
34162: LD_VAR 0 5
34166: PPUSH
34167: CALL_OW 273
34171: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34172: LD_VAR 0 8
34176: PPUSH
34177: LD_VAR 0 9
34181: PPUSH
34182: CALL_OW 488
34186: NOT
34187: IFFALSE 34191
// exit ;
34189: GO 34298
// ComAnimCustom ( unit , 1 ) ;
34191: LD_VAR 0 1
34195: PPUSH
34196: LD_INT 1
34198: PPUSH
34199: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
34203: LD_VAR 0 8
34207: PPUSH
34208: LD_VAR 0 9
34212: PPUSH
34213: LD_VAR 0 6
34217: PPUSH
34218: LD_VAR 0 7
34222: PPUSH
34223: CALL_OW 330
// repeat wait ( 1 ) ;
34227: LD_INT 1
34229: PPUSH
34230: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
34234: LD_VAR 0 1
34238: PPUSH
34239: CALL_OW 316
34243: PUSH
34244: LD_VAR 0 1
34248: PPUSH
34249: CALL_OW 314
34253: OR
34254: PUSH
34255: LD_VAR 0 1
34259: PPUSH
34260: CALL_OW 302
34264: NOT
34265: OR
34266: PUSH
34267: LD_VAR 0 1
34271: PPUSH
34272: CALL_OW 301
34276: OR
34277: IFFALSE 34227
// RemoveSeeing ( _x , _y , side ) ;
34279: LD_VAR 0 8
34283: PPUSH
34284: LD_VAR 0 9
34288: PPUSH
34289: LD_VAR 0 6
34293: PPUSH
34294: CALL_OW 331
// end ; end_of_file
34298: LD_VAR 0 4
34302: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
34303: LD_INT 0
34305: PPUSH
// ar_miner := 81 ;
34306: LD_ADDR_EXP 126
34310: PUSH
34311: LD_INT 81
34313: ST_TO_ADDR
// ar_crane := 88 ;
34314: LD_ADDR_EXP 125
34318: PUSH
34319: LD_INT 88
34321: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
34322: LD_ADDR_EXP 120
34326: PUSH
34327: LD_INT 89
34329: ST_TO_ADDR
// us_hack := 99 ;
34330: LD_ADDR_EXP 121
34334: PUSH
34335: LD_INT 99
34337: ST_TO_ADDR
// us_artillery := 97 ;
34338: LD_ADDR_EXP 122
34342: PUSH
34343: LD_INT 97
34345: ST_TO_ADDR
// ar_bio_bomb := 91 ;
34346: LD_ADDR_EXP 123
34350: PUSH
34351: LD_INT 91
34353: ST_TO_ADDR
// ar_mortar := 92 ;
34354: LD_ADDR_EXP 124
34358: PUSH
34359: LD_INT 92
34361: ST_TO_ADDR
// ru_radar := 98 ;
34362: LD_ADDR_EXP 119
34366: PUSH
34367: LD_INT 98
34369: ST_TO_ADDR
// tech_Artillery := 80 ;
34370: LD_ADDR_EXP 127
34374: PUSH
34375: LD_INT 80
34377: ST_TO_ADDR
// tech_RadMat := 81 ;
34378: LD_ADDR_EXP 128
34382: PUSH
34383: LD_INT 81
34385: ST_TO_ADDR
// tech_BasicTools := 82 ;
34386: LD_ADDR_EXP 129
34390: PUSH
34391: LD_INT 82
34393: ST_TO_ADDR
// tech_Cargo := 83 ;
34394: LD_ADDR_EXP 130
34398: PUSH
34399: LD_INT 83
34401: ST_TO_ADDR
// tech_Track := 84 ;
34402: LD_ADDR_EXP 131
34406: PUSH
34407: LD_INT 84
34409: ST_TO_ADDR
// tech_Crane := 85 ;
34410: LD_ADDR_EXP 132
34414: PUSH
34415: LD_INT 85
34417: ST_TO_ADDR
// tech_Bulldozer := 86 ;
34418: LD_ADDR_EXP 133
34422: PUSH
34423: LD_INT 86
34425: ST_TO_ADDR
// tech_Hovercraft := 87 ;
34426: LD_ADDR_EXP 134
34430: PUSH
34431: LD_INT 87
34433: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
34434: LD_ADDR_EXP 135
34438: PUSH
34439: LD_INT 88
34441: ST_TO_ADDR
// class_mastodont := 31 ;
34442: LD_ADDR_EXP 136
34446: PUSH
34447: LD_INT 31
34449: ST_TO_ADDR
// class_horse := 21 ;
34450: LD_ADDR_EXP 137
34454: PUSH
34455: LD_INT 21
34457: ST_TO_ADDR
// end ;
34458: LD_VAR 0 1
34462: RET
// every 1 do
34463: GO 34465
34465: DISABLE
// InitGlobalVariables ; end_of_file
34466: CALL 34303 0 0
34470: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
34471: LD_INT 0
34473: PPUSH
34474: PPUSH
// if exist_mode then
34475: LD_VAR 0 2
34479: IFFALSE 34504
// unit := CreateCharacter ( prefix & ident ) else
34481: LD_ADDR_VAR 0 5
34485: PUSH
34486: LD_VAR 0 3
34490: PUSH
34491: LD_VAR 0 1
34495: STR
34496: PPUSH
34497: CALL_OW 34
34501: ST_TO_ADDR
34502: GO 34519
// unit := NewCharacter ( ident ) ;
34504: LD_ADDR_VAR 0 5
34508: PUSH
34509: LD_VAR 0 1
34513: PPUSH
34514: CALL_OW 25
34518: ST_TO_ADDR
// result := unit ;
34519: LD_ADDR_VAR 0 4
34523: PUSH
34524: LD_VAR 0 5
34528: ST_TO_ADDR
// end ;
34529: LD_VAR 0 4
34533: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
34534: LD_INT 0
34536: PPUSH
34537: PPUSH
// if not side or not nation then
34538: LD_VAR 0 1
34542: NOT
34543: PUSH
34544: LD_VAR 0 2
34548: NOT
34549: OR
34550: IFFALSE 34554
// exit ;
34552: GO 35322
// case nation of nation_american :
34554: LD_VAR 0 2
34558: PUSH
34559: LD_INT 1
34561: DOUBLE
34562: EQUAL
34563: IFTRUE 34567
34565: GO 34781
34567: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
34568: LD_ADDR_VAR 0 4
34572: PUSH
34573: LD_INT 35
34575: PUSH
34576: LD_INT 45
34578: PUSH
34579: LD_INT 46
34581: PUSH
34582: LD_INT 47
34584: PUSH
34585: LD_INT 82
34587: PUSH
34588: LD_INT 83
34590: PUSH
34591: LD_INT 84
34593: PUSH
34594: LD_INT 85
34596: PUSH
34597: LD_INT 86
34599: PUSH
34600: LD_INT 1
34602: PUSH
34603: LD_INT 2
34605: PUSH
34606: LD_INT 6
34608: PUSH
34609: LD_INT 15
34611: PUSH
34612: LD_INT 16
34614: PUSH
34615: LD_INT 7
34617: PUSH
34618: LD_INT 12
34620: PUSH
34621: LD_INT 13
34623: PUSH
34624: LD_INT 10
34626: PUSH
34627: LD_INT 14
34629: PUSH
34630: LD_INT 20
34632: PUSH
34633: LD_INT 21
34635: PUSH
34636: LD_INT 22
34638: PUSH
34639: LD_INT 25
34641: PUSH
34642: LD_INT 32
34644: PUSH
34645: LD_INT 27
34647: PUSH
34648: LD_INT 36
34650: PUSH
34651: LD_INT 69
34653: PUSH
34654: LD_INT 39
34656: PUSH
34657: LD_INT 34
34659: PUSH
34660: LD_INT 40
34662: PUSH
34663: LD_INT 48
34665: PUSH
34666: LD_INT 49
34668: PUSH
34669: LD_INT 50
34671: PUSH
34672: LD_INT 51
34674: PUSH
34675: LD_INT 52
34677: PUSH
34678: LD_INT 53
34680: PUSH
34681: LD_INT 54
34683: PUSH
34684: LD_INT 55
34686: PUSH
34687: LD_INT 56
34689: PUSH
34690: LD_INT 57
34692: PUSH
34693: LD_INT 58
34695: PUSH
34696: LD_INT 59
34698: PUSH
34699: LD_INT 60
34701: PUSH
34702: LD_INT 61
34704: PUSH
34705: LD_INT 62
34707: PUSH
34708: LD_INT 80
34710: PUSH
34711: LD_INT 82
34713: PUSH
34714: LD_INT 83
34716: PUSH
34717: LD_INT 84
34719: PUSH
34720: LD_INT 85
34722: PUSH
34723: LD_INT 86
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: ST_TO_ADDR
34779: GO 35246
34781: LD_INT 2
34783: DOUBLE
34784: EQUAL
34785: IFTRUE 34789
34787: GO 35015
34789: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
34790: LD_ADDR_VAR 0 4
34794: PUSH
34795: LD_INT 35
34797: PUSH
34798: LD_INT 45
34800: PUSH
34801: LD_INT 46
34803: PUSH
34804: LD_INT 47
34806: PUSH
34807: LD_INT 82
34809: PUSH
34810: LD_INT 83
34812: PUSH
34813: LD_INT 84
34815: PUSH
34816: LD_INT 85
34818: PUSH
34819: LD_INT 87
34821: PUSH
34822: LD_INT 70
34824: PUSH
34825: LD_INT 1
34827: PUSH
34828: LD_INT 11
34830: PUSH
34831: LD_INT 3
34833: PUSH
34834: LD_INT 4
34836: PUSH
34837: LD_INT 5
34839: PUSH
34840: LD_INT 6
34842: PUSH
34843: LD_INT 15
34845: PUSH
34846: LD_INT 18
34848: PUSH
34849: LD_INT 7
34851: PUSH
34852: LD_INT 17
34854: PUSH
34855: LD_INT 8
34857: PUSH
34858: LD_INT 20
34860: PUSH
34861: LD_INT 21
34863: PUSH
34864: LD_INT 22
34866: PUSH
34867: LD_INT 72
34869: PUSH
34870: LD_INT 26
34872: PUSH
34873: LD_INT 69
34875: PUSH
34876: LD_INT 39
34878: PUSH
34879: LD_INT 40
34881: PUSH
34882: LD_INT 41
34884: PUSH
34885: LD_INT 42
34887: PUSH
34888: LD_INT 43
34890: PUSH
34891: LD_INT 48
34893: PUSH
34894: LD_INT 49
34896: PUSH
34897: LD_INT 50
34899: PUSH
34900: LD_INT 51
34902: PUSH
34903: LD_INT 52
34905: PUSH
34906: LD_INT 53
34908: PUSH
34909: LD_INT 54
34911: PUSH
34912: LD_INT 55
34914: PUSH
34915: LD_INT 56
34917: PUSH
34918: LD_INT 60
34920: PUSH
34921: LD_INT 61
34923: PUSH
34924: LD_INT 62
34926: PUSH
34927: LD_INT 66
34929: PUSH
34930: LD_INT 67
34932: PUSH
34933: LD_INT 68
34935: PUSH
34936: LD_INT 81
34938: PUSH
34939: LD_INT 82
34941: PUSH
34942: LD_INT 83
34944: PUSH
34945: LD_INT 84
34947: PUSH
34948: LD_INT 85
34950: PUSH
34951: LD_INT 87
34953: PUSH
34954: LD_INT 88
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: ST_TO_ADDR
35013: GO 35246
35015: LD_INT 3
35017: DOUBLE
35018: EQUAL
35019: IFTRUE 35023
35021: GO 35245
35023: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
35024: LD_ADDR_VAR 0 4
35028: PUSH
35029: LD_INT 46
35031: PUSH
35032: LD_INT 47
35034: PUSH
35035: LD_INT 1
35037: PUSH
35038: LD_INT 2
35040: PUSH
35041: LD_INT 82
35043: PUSH
35044: LD_INT 83
35046: PUSH
35047: LD_INT 84
35049: PUSH
35050: LD_INT 85
35052: PUSH
35053: LD_INT 86
35055: PUSH
35056: LD_INT 11
35058: PUSH
35059: LD_INT 9
35061: PUSH
35062: LD_INT 20
35064: PUSH
35065: LD_INT 19
35067: PUSH
35068: LD_INT 21
35070: PUSH
35071: LD_INT 24
35073: PUSH
35074: LD_INT 22
35076: PUSH
35077: LD_INT 25
35079: PUSH
35080: LD_INT 28
35082: PUSH
35083: LD_INT 29
35085: PUSH
35086: LD_INT 30
35088: PUSH
35089: LD_INT 31
35091: PUSH
35092: LD_INT 37
35094: PUSH
35095: LD_INT 38
35097: PUSH
35098: LD_INT 32
35100: PUSH
35101: LD_INT 27
35103: PUSH
35104: LD_INT 33
35106: PUSH
35107: LD_INT 69
35109: PUSH
35110: LD_INT 39
35112: PUSH
35113: LD_INT 34
35115: PUSH
35116: LD_INT 40
35118: PUSH
35119: LD_INT 71
35121: PUSH
35122: LD_INT 23
35124: PUSH
35125: LD_INT 44
35127: PUSH
35128: LD_INT 48
35130: PUSH
35131: LD_INT 49
35133: PUSH
35134: LD_INT 50
35136: PUSH
35137: LD_INT 51
35139: PUSH
35140: LD_INT 52
35142: PUSH
35143: LD_INT 53
35145: PUSH
35146: LD_INT 54
35148: PUSH
35149: LD_INT 55
35151: PUSH
35152: LD_INT 56
35154: PUSH
35155: LD_INT 57
35157: PUSH
35158: LD_INT 58
35160: PUSH
35161: LD_INT 59
35163: PUSH
35164: LD_INT 63
35166: PUSH
35167: LD_INT 64
35169: PUSH
35170: LD_INT 65
35172: PUSH
35173: LD_INT 82
35175: PUSH
35176: LD_INT 83
35178: PUSH
35179: LD_INT 84
35181: PUSH
35182: LD_INT 85
35184: PUSH
35185: LD_INT 86
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: ST_TO_ADDR
35243: GO 35246
35245: POP
// if state > - 1 and state < 3 then
35246: LD_VAR 0 3
35250: PUSH
35251: LD_INT 1
35253: NEG
35254: GREATER
35255: PUSH
35256: LD_VAR 0 3
35260: PUSH
35261: LD_INT 3
35263: LESS
35264: AND
35265: IFFALSE 35322
// for i in result do
35267: LD_ADDR_VAR 0 5
35271: PUSH
35272: LD_VAR 0 4
35276: PUSH
35277: FOR_IN
35278: IFFALSE 35320
// if GetTech ( i , side ) <> state then
35280: LD_VAR 0 5
35284: PPUSH
35285: LD_VAR 0 1
35289: PPUSH
35290: CALL_OW 321
35294: PUSH
35295: LD_VAR 0 3
35299: NONEQUAL
35300: IFFALSE 35318
// result := result diff i ;
35302: LD_ADDR_VAR 0 4
35306: PUSH
35307: LD_VAR 0 4
35311: PUSH
35312: LD_VAR 0 5
35316: DIFF
35317: ST_TO_ADDR
35318: GO 35277
35320: POP
35321: POP
// end ;
35322: LD_VAR 0 4
35326: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35327: LD_INT 0
35329: PPUSH
35330: PPUSH
35331: PPUSH
// result := true ;
35332: LD_ADDR_VAR 0 3
35336: PUSH
35337: LD_INT 1
35339: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35340: LD_ADDR_VAR 0 5
35344: PUSH
35345: LD_VAR 0 2
35349: PPUSH
35350: CALL_OW 480
35354: ST_TO_ADDR
// if not tmp then
35355: LD_VAR 0 5
35359: NOT
35360: IFFALSE 35364
// exit ;
35362: GO 35413
// for i in tmp do
35364: LD_ADDR_VAR 0 4
35368: PUSH
35369: LD_VAR 0 5
35373: PUSH
35374: FOR_IN
35375: IFFALSE 35411
// if GetTech ( i , side ) <> state_researched then
35377: LD_VAR 0 4
35381: PPUSH
35382: LD_VAR 0 1
35386: PPUSH
35387: CALL_OW 321
35391: PUSH
35392: LD_INT 2
35394: NONEQUAL
35395: IFFALSE 35409
// begin result := false ;
35397: LD_ADDR_VAR 0 3
35401: PUSH
35402: LD_INT 0
35404: ST_TO_ADDR
// exit ;
35405: POP
35406: POP
35407: GO 35413
// end ;
35409: GO 35374
35411: POP
35412: POP
// end ;
35413: LD_VAR 0 3
35417: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
35418: LD_INT 0
35420: PPUSH
35421: PPUSH
35422: PPUSH
35423: PPUSH
35424: PPUSH
35425: PPUSH
35426: PPUSH
35427: PPUSH
35428: PPUSH
35429: PPUSH
35430: PPUSH
35431: PPUSH
35432: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
35433: LD_VAR 0 1
35437: NOT
35438: PUSH
35439: LD_VAR 0 1
35443: PPUSH
35444: CALL_OW 257
35448: PUSH
35449: LD_INT 9
35451: NONEQUAL
35452: OR
35453: IFFALSE 35457
// exit ;
35455: GO 36030
// side := GetSide ( unit ) ;
35457: LD_ADDR_VAR 0 9
35461: PUSH
35462: LD_VAR 0 1
35466: PPUSH
35467: CALL_OW 255
35471: ST_TO_ADDR
// tech_space := tech_spacanom ;
35472: LD_ADDR_VAR 0 12
35476: PUSH
35477: LD_INT 29
35479: ST_TO_ADDR
// tech_time := tech_taurad ;
35480: LD_ADDR_VAR 0 13
35484: PUSH
35485: LD_INT 28
35487: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
35488: LD_ADDR_VAR 0 11
35492: PUSH
35493: LD_VAR 0 1
35497: PPUSH
35498: CALL_OW 310
35502: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
35503: LD_VAR 0 11
35507: PPUSH
35508: CALL_OW 247
35512: PUSH
35513: LD_INT 2
35515: EQUAL
35516: IFFALSE 35520
// exit ;
35518: GO 36030
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35520: LD_ADDR_VAR 0 8
35524: PUSH
35525: LD_INT 81
35527: PUSH
35528: LD_VAR 0 9
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 3
35539: PUSH
35540: LD_INT 21
35542: PUSH
35543: LD_INT 3
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PPUSH
35558: CALL_OW 69
35562: ST_TO_ADDR
// if not tmp then
35563: LD_VAR 0 8
35567: NOT
35568: IFFALSE 35572
// exit ;
35570: GO 36030
// if in_unit then
35572: LD_VAR 0 11
35576: IFFALSE 35600
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
35578: LD_ADDR_VAR 0 10
35582: PUSH
35583: LD_VAR 0 8
35587: PPUSH
35588: LD_VAR 0 11
35592: PPUSH
35593: CALL_OW 74
35597: ST_TO_ADDR
35598: GO 35620
// enemy := NearestUnitToUnit ( tmp , unit ) ;
35600: LD_ADDR_VAR 0 10
35604: PUSH
35605: LD_VAR 0 8
35609: PPUSH
35610: LD_VAR 0 1
35614: PPUSH
35615: CALL_OW 74
35619: ST_TO_ADDR
// if not enemy then
35620: LD_VAR 0 10
35624: NOT
35625: IFFALSE 35629
// exit ;
35627: GO 36030
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
35629: LD_VAR 0 11
35633: PUSH
35634: LD_VAR 0 11
35638: PPUSH
35639: LD_VAR 0 10
35643: PPUSH
35644: CALL_OW 296
35648: PUSH
35649: LD_INT 13
35651: GREATER
35652: AND
35653: PUSH
35654: LD_VAR 0 1
35658: PPUSH
35659: LD_VAR 0 10
35663: PPUSH
35664: CALL_OW 296
35668: PUSH
35669: LD_INT 12
35671: GREATER
35672: OR
35673: IFFALSE 35677
// exit ;
35675: GO 36030
// missile := [ 1 ] ;
35677: LD_ADDR_VAR 0 14
35681: PUSH
35682: LD_INT 1
35684: PUSH
35685: EMPTY
35686: LIST
35687: ST_TO_ADDR
// if Researched ( side , tech_space ) then
35688: LD_VAR 0 9
35692: PPUSH
35693: LD_VAR 0 12
35697: PPUSH
35698: CALL_OW 325
35702: IFFALSE 35731
// missile := Insert ( missile , missile + 1 , 2 ) ;
35704: LD_ADDR_VAR 0 14
35708: PUSH
35709: LD_VAR 0 14
35713: PPUSH
35714: LD_VAR 0 14
35718: PUSH
35719: LD_INT 1
35721: PLUS
35722: PPUSH
35723: LD_INT 2
35725: PPUSH
35726: CALL_OW 2
35730: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
35731: LD_VAR 0 9
35735: PPUSH
35736: LD_VAR 0 13
35740: PPUSH
35741: CALL_OW 325
35745: PUSH
35746: LD_VAR 0 10
35750: PPUSH
35751: CALL_OW 255
35755: PPUSH
35756: LD_VAR 0 13
35760: PPUSH
35761: CALL_OW 325
35765: NOT
35766: AND
35767: IFFALSE 35796
// missile := Insert ( missile , missile + 1 , 3 ) ;
35769: LD_ADDR_VAR 0 14
35773: PUSH
35774: LD_VAR 0 14
35778: PPUSH
35779: LD_VAR 0 14
35783: PUSH
35784: LD_INT 1
35786: PLUS
35787: PPUSH
35788: LD_INT 3
35790: PPUSH
35791: CALL_OW 2
35795: ST_TO_ADDR
// if missile < 2 then
35796: LD_VAR 0 14
35800: PUSH
35801: LD_INT 2
35803: LESS
35804: IFFALSE 35808
// exit ;
35806: GO 36030
// x := GetX ( enemy ) ;
35808: LD_ADDR_VAR 0 4
35812: PUSH
35813: LD_VAR 0 10
35817: PPUSH
35818: CALL_OW 250
35822: ST_TO_ADDR
// y := GetY ( enemy ) ;
35823: LD_ADDR_VAR 0 5
35827: PUSH
35828: LD_VAR 0 10
35832: PPUSH
35833: CALL_OW 251
35837: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35838: LD_ADDR_VAR 0 6
35842: PUSH
35843: LD_VAR 0 4
35847: PUSH
35848: LD_INT 1
35850: NEG
35851: PPUSH
35852: LD_INT 1
35854: PPUSH
35855: CALL_OW 12
35859: PLUS
35860: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35861: LD_ADDR_VAR 0 7
35865: PUSH
35866: LD_VAR 0 5
35870: PUSH
35871: LD_INT 1
35873: NEG
35874: PPUSH
35875: LD_INT 1
35877: PPUSH
35878: CALL_OW 12
35882: PLUS
35883: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35884: LD_VAR 0 6
35888: PPUSH
35889: LD_VAR 0 7
35893: PPUSH
35894: CALL_OW 488
35898: NOT
35899: IFFALSE 35921
// begin _x := x ;
35901: LD_ADDR_VAR 0 6
35905: PUSH
35906: LD_VAR 0 4
35910: ST_TO_ADDR
// _y := y ;
35911: LD_ADDR_VAR 0 7
35915: PUSH
35916: LD_VAR 0 5
35920: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35921: LD_ADDR_VAR 0 3
35925: PUSH
35926: LD_INT 1
35928: PPUSH
35929: LD_VAR 0 14
35933: PPUSH
35934: CALL_OW 12
35938: ST_TO_ADDR
// case i of 1 :
35939: LD_VAR 0 3
35943: PUSH
35944: LD_INT 1
35946: DOUBLE
35947: EQUAL
35948: IFTRUE 35952
35950: GO 35969
35952: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35953: LD_VAR 0 1
35957: PPUSH
35958: LD_VAR 0 10
35962: PPUSH
35963: CALL_OW 115
35967: GO 36030
35969: LD_INT 2
35971: DOUBLE
35972: EQUAL
35973: IFTRUE 35977
35975: GO 35999
35977: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35978: LD_VAR 0 1
35982: PPUSH
35983: LD_VAR 0 6
35987: PPUSH
35988: LD_VAR 0 7
35992: PPUSH
35993: CALL_OW 153
35997: GO 36030
35999: LD_INT 3
36001: DOUBLE
36002: EQUAL
36003: IFTRUE 36007
36005: GO 36029
36007: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
36008: LD_VAR 0 1
36012: PPUSH
36013: LD_VAR 0 6
36017: PPUSH
36018: LD_VAR 0 7
36022: PPUSH
36023: CALL_OW 154
36027: GO 36030
36029: POP
// end ;
36030: LD_VAR 0 2
36034: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
36035: LD_INT 0
36037: PPUSH
36038: PPUSH
36039: PPUSH
36040: PPUSH
36041: PPUSH
36042: PPUSH
// if not unit or not building then
36043: LD_VAR 0 1
36047: NOT
36048: PUSH
36049: LD_VAR 0 2
36053: NOT
36054: OR
36055: IFFALSE 36059
// exit ;
36057: GO 36217
// x := GetX ( building ) ;
36059: LD_ADDR_VAR 0 5
36063: PUSH
36064: LD_VAR 0 2
36068: PPUSH
36069: CALL_OW 250
36073: ST_TO_ADDR
// y := GetY ( building ) ;
36074: LD_ADDR_VAR 0 6
36078: PUSH
36079: LD_VAR 0 2
36083: PPUSH
36084: CALL_OW 251
36088: ST_TO_ADDR
// for i = 0 to 5 do
36089: LD_ADDR_VAR 0 4
36093: PUSH
36094: DOUBLE
36095: LD_INT 0
36097: DEC
36098: ST_TO_ADDR
36099: LD_INT 5
36101: PUSH
36102: FOR_TO
36103: IFFALSE 36215
// begin _x := ShiftX ( x , i , 3 ) ;
36105: LD_ADDR_VAR 0 7
36109: PUSH
36110: LD_VAR 0 5
36114: PPUSH
36115: LD_VAR 0 4
36119: PPUSH
36120: LD_INT 3
36122: PPUSH
36123: CALL_OW 272
36127: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
36128: LD_ADDR_VAR 0 8
36132: PUSH
36133: LD_VAR 0 6
36137: PPUSH
36138: LD_VAR 0 4
36142: PPUSH
36143: LD_INT 3
36145: PPUSH
36146: CALL_OW 273
36150: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36151: LD_VAR 0 7
36155: PPUSH
36156: LD_VAR 0 8
36160: PPUSH
36161: CALL_OW 488
36165: NOT
36166: IFFALSE 36170
// continue ;
36168: GO 36102
// if HexInfo ( _x , _y ) = 0 then
36170: LD_VAR 0 7
36174: PPUSH
36175: LD_VAR 0 8
36179: PPUSH
36180: CALL_OW 428
36184: PUSH
36185: LD_INT 0
36187: EQUAL
36188: IFFALSE 36213
// begin ComMoveXY ( unit , _x , _y ) ;
36190: LD_VAR 0 1
36194: PPUSH
36195: LD_VAR 0 7
36199: PPUSH
36200: LD_VAR 0 8
36204: PPUSH
36205: CALL_OW 111
// exit ;
36209: POP
36210: POP
36211: GO 36217
// end ; end ;
36213: GO 36102
36215: POP
36216: POP
// end ;
36217: LD_VAR 0 3
36221: RET
// export function ScanBase ( side , base_area ) ; begin
36222: LD_INT 0
36224: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
36225: LD_ADDR_VAR 0 3
36229: PUSH
36230: LD_VAR 0 2
36234: PPUSH
36235: LD_INT 81
36237: PUSH
36238: LD_VAR 0 1
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PPUSH
36247: CALL_OW 70
36251: ST_TO_ADDR
// end ;
36252: LD_VAR 0 3
36256: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
36257: LD_INT 0
36259: PPUSH
36260: PPUSH
36261: PPUSH
36262: PPUSH
// result := false ;
36263: LD_ADDR_VAR 0 2
36267: PUSH
36268: LD_INT 0
36270: ST_TO_ADDR
// side := GetSide ( unit ) ;
36271: LD_ADDR_VAR 0 3
36275: PUSH
36276: LD_VAR 0 1
36280: PPUSH
36281: CALL_OW 255
36285: ST_TO_ADDR
// nat := GetNation ( unit ) ;
36286: LD_ADDR_VAR 0 4
36290: PUSH
36291: LD_VAR 0 1
36295: PPUSH
36296: CALL_OW 248
36300: ST_TO_ADDR
// case nat of 1 :
36301: LD_VAR 0 4
36305: PUSH
36306: LD_INT 1
36308: DOUBLE
36309: EQUAL
36310: IFTRUE 36314
36312: GO 36325
36314: POP
// tech := tech_lassight ; 2 :
36315: LD_ADDR_VAR 0 5
36319: PUSH
36320: LD_INT 12
36322: ST_TO_ADDR
36323: GO 36364
36325: LD_INT 2
36327: DOUBLE
36328: EQUAL
36329: IFTRUE 36333
36331: GO 36344
36333: POP
// tech := tech_mortar ; 3 :
36334: LD_ADDR_VAR 0 5
36338: PUSH
36339: LD_INT 41
36341: ST_TO_ADDR
36342: GO 36364
36344: LD_INT 3
36346: DOUBLE
36347: EQUAL
36348: IFTRUE 36352
36350: GO 36363
36352: POP
// tech := tech_bazooka ; end ;
36353: LD_ADDR_VAR 0 5
36357: PUSH
36358: LD_INT 44
36360: ST_TO_ADDR
36361: GO 36364
36363: POP
// if Researched ( side , tech ) then
36364: LD_VAR 0 3
36368: PPUSH
36369: LD_VAR 0 5
36373: PPUSH
36374: CALL_OW 325
36378: IFFALSE 36405
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
36380: LD_ADDR_VAR 0 2
36384: PUSH
36385: LD_INT 5
36387: PUSH
36388: LD_INT 8
36390: PUSH
36391: LD_INT 9
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: LIST
36398: PUSH
36399: LD_VAR 0 4
36403: ARRAY
36404: ST_TO_ADDR
// end ;
36405: LD_VAR 0 2
36409: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
36410: LD_INT 0
36412: PPUSH
36413: PPUSH
36414: PPUSH
// if not mines then
36415: LD_VAR 0 2
36419: NOT
36420: IFFALSE 36424
// exit ;
36422: GO 36568
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36424: LD_ADDR_VAR 0 5
36428: PUSH
36429: LD_INT 81
36431: PUSH
36432: LD_VAR 0 1
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 3
36443: PUSH
36444: LD_INT 21
36446: PUSH
36447: LD_INT 3
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PPUSH
36462: CALL_OW 69
36466: ST_TO_ADDR
// for i in mines do
36467: LD_ADDR_VAR 0 4
36471: PUSH
36472: LD_VAR 0 2
36476: PUSH
36477: FOR_IN
36478: IFFALSE 36566
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
36480: LD_VAR 0 4
36484: PUSH
36485: LD_INT 1
36487: ARRAY
36488: PPUSH
36489: LD_VAR 0 4
36493: PUSH
36494: LD_INT 2
36496: ARRAY
36497: PPUSH
36498: CALL_OW 458
36502: NOT
36503: IFFALSE 36507
// continue ;
36505: GO 36477
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
36507: LD_VAR 0 4
36511: PUSH
36512: LD_INT 1
36514: ARRAY
36515: PPUSH
36516: LD_VAR 0 4
36520: PUSH
36521: LD_INT 2
36523: ARRAY
36524: PPUSH
36525: CALL_OW 428
36529: PUSH
36530: LD_VAR 0 5
36534: IN
36535: IFFALSE 36564
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
36537: LD_VAR 0 4
36541: PUSH
36542: LD_INT 1
36544: ARRAY
36545: PPUSH
36546: LD_VAR 0 4
36550: PUSH
36551: LD_INT 2
36553: ARRAY
36554: PPUSH
36555: LD_VAR 0 1
36559: PPUSH
36560: CALL_OW 456
// end ;
36564: GO 36477
36566: POP
36567: POP
// end ;
36568: LD_VAR 0 3
36572: RET
// export function Count ( array ) ; var i ; begin
36573: LD_INT 0
36575: PPUSH
36576: PPUSH
// result := 0 ;
36577: LD_ADDR_VAR 0 2
36581: PUSH
36582: LD_INT 0
36584: ST_TO_ADDR
// for i in array do
36585: LD_ADDR_VAR 0 3
36589: PUSH
36590: LD_VAR 0 1
36594: PUSH
36595: FOR_IN
36596: IFFALSE 36620
// if i then
36598: LD_VAR 0 3
36602: IFFALSE 36618
// result := result + 1 ;
36604: LD_ADDR_VAR 0 2
36608: PUSH
36609: LD_VAR 0 2
36613: PUSH
36614: LD_INT 1
36616: PLUS
36617: ST_TO_ADDR
36618: GO 36595
36620: POP
36621: POP
// end ;
36622: LD_VAR 0 2
36626: RET
// export function IsEmpty ( building ) ; begin
36627: LD_INT 0
36629: PPUSH
// if not building then
36630: LD_VAR 0 1
36634: NOT
36635: IFFALSE 36639
// exit ;
36637: GO 36682
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
36639: LD_ADDR_VAR 0 2
36643: PUSH
36644: LD_VAR 0 1
36648: PUSH
36649: LD_INT 22
36651: PUSH
36652: LD_VAR 0 1
36656: PPUSH
36657: CALL_OW 255
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 58
36668: PUSH
36669: EMPTY
36670: LIST
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PPUSH
36676: CALL_OW 69
36680: IN
36681: ST_TO_ADDR
// end ;
36682: LD_VAR 0 2
36686: RET
// export function IsNotFull ( building ) ; begin
36687: LD_INT 0
36689: PPUSH
// if not building then
36690: LD_VAR 0 1
36694: NOT
36695: IFFALSE 36699
// exit ;
36697: GO 36718
// result := UnitsInside ( building ) < 6 ;
36699: LD_ADDR_VAR 0 2
36703: PUSH
36704: LD_VAR 0 1
36708: PPUSH
36709: CALL_OW 313
36713: PUSH
36714: LD_INT 6
36716: LESS
36717: ST_TO_ADDR
// end ;
36718: LD_VAR 0 2
36722: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
36723: LD_INT 0
36725: PPUSH
36726: PPUSH
36727: PPUSH
36728: PPUSH
// tmp := [ ] ;
36729: LD_ADDR_VAR 0 3
36733: PUSH
36734: EMPTY
36735: ST_TO_ADDR
// list := [ ] ;
36736: LD_ADDR_VAR 0 5
36740: PUSH
36741: EMPTY
36742: ST_TO_ADDR
// for i = 16 to 25 do
36743: LD_ADDR_VAR 0 4
36747: PUSH
36748: DOUBLE
36749: LD_INT 16
36751: DEC
36752: ST_TO_ADDR
36753: LD_INT 25
36755: PUSH
36756: FOR_TO
36757: IFFALSE 36830
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
36759: LD_ADDR_VAR 0 3
36763: PUSH
36764: LD_VAR 0 3
36768: PUSH
36769: LD_INT 22
36771: PUSH
36772: LD_VAR 0 1
36776: PPUSH
36777: CALL_OW 255
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 91
36788: PUSH
36789: LD_VAR 0 1
36793: PUSH
36794: LD_INT 6
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 30
36804: PUSH
36805: LD_VAR 0 4
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: LIST
36818: PUSH
36819: EMPTY
36820: LIST
36821: PPUSH
36822: CALL_OW 69
36826: ADD
36827: ST_TO_ADDR
36828: GO 36756
36830: POP
36831: POP
// for i = 1 to tmp do
36832: LD_ADDR_VAR 0 4
36836: PUSH
36837: DOUBLE
36838: LD_INT 1
36840: DEC
36841: ST_TO_ADDR
36842: LD_VAR 0 3
36846: PUSH
36847: FOR_TO
36848: IFFALSE 36936
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
36850: LD_ADDR_VAR 0 5
36854: PUSH
36855: LD_VAR 0 5
36859: PUSH
36860: LD_VAR 0 3
36864: PUSH
36865: LD_VAR 0 4
36869: ARRAY
36870: PPUSH
36871: CALL_OW 266
36875: PUSH
36876: LD_VAR 0 3
36880: PUSH
36881: LD_VAR 0 4
36885: ARRAY
36886: PPUSH
36887: CALL_OW 250
36891: PUSH
36892: LD_VAR 0 3
36896: PUSH
36897: LD_VAR 0 4
36901: ARRAY
36902: PPUSH
36903: CALL_OW 251
36907: PUSH
36908: LD_VAR 0 3
36912: PUSH
36913: LD_VAR 0 4
36917: ARRAY
36918: PPUSH
36919: CALL_OW 254
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: PUSH
36930: EMPTY
36931: LIST
36932: ADD
36933: ST_TO_ADDR
36934: GO 36847
36936: POP
36937: POP
// result := list ;
36938: LD_ADDR_VAR 0 2
36942: PUSH
36943: LD_VAR 0 5
36947: ST_TO_ADDR
// end ;
36948: LD_VAR 0 2
36952: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36953: LD_INT 0
36955: PPUSH
36956: PPUSH
36957: PPUSH
36958: PPUSH
36959: PPUSH
36960: PPUSH
36961: PPUSH
// if not factory then
36962: LD_VAR 0 1
36966: NOT
36967: IFFALSE 36971
// exit ;
36969: GO 37564
// if control = control_apeman then
36971: LD_VAR 0 4
36975: PUSH
36976: LD_INT 5
36978: EQUAL
36979: IFFALSE 37088
// begin tmp := UnitsInside ( factory ) ;
36981: LD_ADDR_VAR 0 8
36985: PUSH
36986: LD_VAR 0 1
36990: PPUSH
36991: CALL_OW 313
36995: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36996: LD_VAR 0 8
37000: PPUSH
37001: LD_INT 25
37003: PUSH
37004: LD_INT 12
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PPUSH
37011: CALL_OW 72
37015: NOT
37016: IFFALSE 37026
// control := control_manual ;
37018: LD_ADDR_VAR 0 4
37022: PUSH
37023: LD_INT 1
37025: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
37026: LD_ADDR_VAR 0 8
37030: PUSH
37031: LD_VAR 0 1
37035: PPUSH
37036: CALL 36723 0 1
37040: ST_TO_ADDR
// if tmp then
37041: LD_VAR 0 8
37045: IFFALSE 37088
// begin for i in tmp do
37047: LD_ADDR_VAR 0 7
37051: PUSH
37052: LD_VAR 0 8
37056: PUSH
37057: FOR_IN
37058: IFFALSE 37086
// if i [ 1 ] = b_ext_radio then
37060: LD_VAR 0 7
37064: PUSH
37065: LD_INT 1
37067: ARRAY
37068: PUSH
37069: LD_INT 22
37071: EQUAL
37072: IFFALSE 37084
// begin control := control_remote ;
37074: LD_ADDR_VAR 0 4
37078: PUSH
37079: LD_INT 2
37081: ST_TO_ADDR
// break ;
37082: GO 37086
// end ;
37084: GO 37057
37086: POP
37087: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37088: LD_VAR 0 1
37092: PPUSH
37093: LD_VAR 0 2
37097: PPUSH
37098: LD_VAR 0 3
37102: PPUSH
37103: LD_VAR 0 4
37107: PPUSH
37108: LD_VAR 0 5
37112: PPUSH
37113: CALL_OW 448
37117: IFFALSE 37152
// begin result := [ chassis , engine , control , weapon ] ;
37119: LD_ADDR_VAR 0 6
37123: PUSH
37124: LD_VAR 0 2
37128: PUSH
37129: LD_VAR 0 3
37133: PUSH
37134: LD_VAR 0 4
37138: PUSH
37139: LD_VAR 0 5
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: ST_TO_ADDR
// exit ;
37150: GO 37564
// end ; _chassis := AvailableChassisList ( factory ) ;
37152: LD_ADDR_VAR 0 9
37156: PUSH
37157: LD_VAR 0 1
37161: PPUSH
37162: CALL_OW 475
37166: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
37167: LD_ADDR_VAR 0 11
37171: PUSH
37172: LD_VAR 0 1
37176: PPUSH
37177: CALL_OW 476
37181: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
37182: LD_ADDR_VAR 0 12
37186: PUSH
37187: LD_VAR 0 1
37191: PPUSH
37192: CALL_OW 477
37196: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
37197: LD_ADDR_VAR 0 10
37201: PUSH
37202: LD_VAR 0 1
37206: PPUSH
37207: CALL_OW 478
37211: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
37212: LD_VAR 0 9
37216: NOT
37217: PUSH
37218: LD_VAR 0 11
37222: NOT
37223: OR
37224: PUSH
37225: LD_VAR 0 12
37229: NOT
37230: OR
37231: PUSH
37232: LD_VAR 0 10
37236: NOT
37237: OR
37238: IFFALSE 37273
// begin result := [ chassis , engine , control , weapon ] ;
37240: LD_ADDR_VAR 0 6
37244: PUSH
37245: LD_VAR 0 2
37249: PUSH
37250: LD_VAR 0 3
37254: PUSH
37255: LD_VAR 0 4
37259: PUSH
37260: LD_VAR 0 5
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: ST_TO_ADDR
// exit ;
37271: GO 37564
// end ; if not chassis in _chassis then
37273: LD_VAR 0 2
37277: PUSH
37278: LD_VAR 0 9
37282: IN
37283: NOT
37284: IFFALSE 37310
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
37286: LD_ADDR_VAR 0 2
37290: PUSH
37291: LD_VAR 0 9
37295: PUSH
37296: LD_INT 1
37298: PPUSH
37299: LD_VAR 0 9
37303: PPUSH
37304: CALL_OW 12
37308: ARRAY
37309: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
37310: LD_VAR 0 2
37314: PPUSH
37315: LD_VAR 0 3
37319: PPUSH
37320: CALL 37569 0 2
37324: NOT
37325: IFFALSE 37384
// repeat engine := _engine [ 1 ] ;
37327: LD_ADDR_VAR 0 3
37331: PUSH
37332: LD_VAR 0 11
37336: PUSH
37337: LD_INT 1
37339: ARRAY
37340: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
37341: LD_ADDR_VAR 0 11
37345: PUSH
37346: LD_VAR 0 11
37350: PPUSH
37351: LD_INT 1
37353: PPUSH
37354: CALL_OW 3
37358: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
37359: LD_VAR 0 2
37363: PPUSH
37364: LD_VAR 0 3
37368: PPUSH
37369: CALL 37569 0 2
37373: PUSH
37374: LD_VAR 0 11
37378: PUSH
37379: EMPTY
37380: EQUAL
37381: OR
37382: IFFALSE 37327
// if not control in _control then
37384: LD_VAR 0 4
37388: PUSH
37389: LD_VAR 0 12
37393: IN
37394: NOT
37395: IFFALSE 37421
// control := _control [ rand ( 1 , _control ) ] ;
37397: LD_ADDR_VAR 0 4
37401: PUSH
37402: LD_VAR 0 12
37406: PUSH
37407: LD_INT 1
37409: PPUSH
37410: LD_VAR 0 12
37414: PPUSH
37415: CALL_OW 12
37419: ARRAY
37420: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
37421: LD_VAR 0 2
37425: PPUSH
37426: LD_VAR 0 5
37430: PPUSH
37431: CALL 37789 0 2
37435: NOT
37436: IFFALSE 37495
// repeat weapon := _weapon [ 1 ] ;
37438: LD_ADDR_VAR 0 5
37442: PUSH
37443: LD_VAR 0 10
37447: PUSH
37448: LD_INT 1
37450: ARRAY
37451: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
37452: LD_ADDR_VAR 0 10
37456: PUSH
37457: LD_VAR 0 10
37461: PPUSH
37462: LD_INT 1
37464: PPUSH
37465: CALL_OW 3
37469: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
37470: LD_VAR 0 2
37474: PPUSH
37475: LD_VAR 0 5
37479: PPUSH
37480: CALL 37789 0 2
37484: PUSH
37485: LD_VAR 0 10
37489: PUSH
37490: EMPTY
37491: EQUAL
37492: OR
37493: IFFALSE 37438
// result := [ ] ;
37495: LD_ADDR_VAR 0 6
37499: PUSH
37500: EMPTY
37501: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37502: LD_VAR 0 1
37506: PPUSH
37507: LD_VAR 0 2
37511: PPUSH
37512: LD_VAR 0 3
37516: PPUSH
37517: LD_VAR 0 4
37521: PPUSH
37522: LD_VAR 0 5
37526: PPUSH
37527: CALL_OW 448
37531: IFFALSE 37564
// result := [ chassis , engine , control , weapon ] ;
37533: LD_ADDR_VAR 0 6
37537: PUSH
37538: LD_VAR 0 2
37542: PUSH
37543: LD_VAR 0 3
37547: PUSH
37548: LD_VAR 0 4
37552: PUSH
37553: LD_VAR 0 5
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: ST_TO_ADDR
// end ;
37564: LD_VAR 0 6
37568: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
37569: LD_INT 0
37571: PPUSH
// if not chassis or not engine then
37572: LD_VAR 0 1
37576: NOT
37577: PUSH
37578: LD_VAR 0 2
37582: NOT
37583: OR
37584: IFFALSE 37588
// exit ;
37586: GO 37784
// case engine of engine_solar :
37588: LD_VAR 0 2
37592: PUSH
37593: LD_INT 2
37595: DOUBLE
37596: EQUAL
37597: IFTRUE 37601
37599: GO 37639
37601: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
37602: LD_ADDR_VAR 0 3
37606: PUSH
37607: LD_INT 11
37609: PUSH
37610: LD_INT 12
37612: PUSH
37613: LD_INT 13
37615: PUSH
37616: LD_INT 14
37618: PUSH
37619: LD_INT 1
37621: PUSH
37622: LD_INT 2
37624: PUSH
37625: LD_INT 3
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: ST_TO_ADDR
37637: GO 37768
37639: LD_INT 1
37641: DOUBLE
37642: EQUAL
37643: IFTRUE 37647
37645: GO 37709
37647: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
37648: LD_ADDR_VAR 0 3
37652: PUSH
37653: LD_INT 11
37655: PUSH
37656: LD_INT 12
37658: PUSH
37659: LD_INT 13
37661: PUSH
37662: LD_INT 14
37664: PUSH
37665: LD_INT 1
37667: PUSH
37668: LD_INT 2
37670: PUSH
37671: LD_INT 3
37673: PUSH
37674: LD_INT 4
37676: PUSH
37677: LD_INT 5
37679: PUSH
37680: LD_INT 21
37682: PUSH
37683: LD_INT 23
37685: PUSH
37686: LD_INT 22
37688: PUSH
37689: LD_INT 24
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: ST_TO_ADDR
37707: GO 37768
37709: LD_INT 3
37711: DOUBLE
37712: EQUAL
37713: IFTRUE 37717
37715: GO 37767
37717: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37718: LD_ADDR_VAR 0 3
37722: PUSH
37723: LD_INT 13
37725: PUSH
37726: LD_INT 14
37728: PUSH
37729: LD_INT 2
37731: PUSH
37732: LD_INT 3
37734: PUSH
37735: LD_INT 4
37737: PUSH
37738: LD_INT 5
37740: PUSH
37741: LD_INT 21
37743: PUSH
37744: LD_INT 22
37746: PUSH
37747: LD_INT 23
37749: PUSH
37750: LD_INT 24
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: ST_TO_ADDR
37765: GO 37768
37767: POP
// result := ( chassis in result ) ;
37768: LD_ADDR_VAR 0 3
37772: PUSH
37773: LD_VAR 0 1
37777: PUSH
37778: LD_VAR 0 3
37782: IN
37783: ST_TO_ADDR
// end ;
37784: LD_VAR 0 3
37788: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
37789: LD_INT 0
37791: PPUSH
// if not chassis or not weapon then
37792: LD_VAR 0 1
37796: NOT
37797: PUSH
37798: LD_VAR 0 2
37802: NOT
37803: OR
37804: IFFALSE 37808
// exit ;
37806: GO 38870
// case weapon of us_machine_gun :
37808: LD_VAR 0 2
37812: PUSH
37813: LD_INT 2
37815: DOUBLE
37816: EQUAL
37817: IFTRUE 37821
37819: GO 37851
37821: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
37822: LD_ADDR_VAR 0 3
37826: PUSH
37827: LD_INT 1
37829: PUSH
37830: LD_INT 2
37832: PUSH
37833: LD_INT 3
37835: PUSH
37836: LD_INT 4
37838: PUSH
37839: LD_INT 5
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: ST_TO_ADDR
37849: GO 38854
37851: LD_INT 3
37853: DOUBLE
37854: EQUAL
37855: IFTRUE 37859
37857: GO 37889
37859: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
37860: LD_ADDR_VAR 0 3
37864: PUSH
37865: LD_INT 1
37867: PUSH
37868: LD_INT 2
37870: PUSH
37871: LD_INT 3
37873: PUSH
37874: LD_INT 4
37876: PUSH
37877: LD_INT 5
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: ST_TO_ADDR
37887: GO 38854
37889: LD_INT 11
37891: DOUBLE
37892: EQUAL
37893: IFTRUE 37897
37895: GO 37927
37897: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37898: LD_ADDR_VAR 0 3
37902: PUSH
37903: LD_INT 1
37905: PUSH
37906: LD_INT 2
37908: PUSH
37909: LD_INT 3
37911: PUSH
37912: LD_INT 4
37914: PUSH
37915: LD_INT 5
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: ST_TO_ADDR
37925: GO 38854
37927: LD_INT 4
37929: DOUBLE
37930: EQUAL
37931: IFTRUE 37935
37933: GO 37961
37935: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37936: LD_ADDR_VAR 0 3
37940: PUSH
37941: LD_INT 2
37943: PUSH
37944: LD_INT 3
37946: PUSH
37947: LD_INT 4
37949: PUSH
37950: LD_INT 5
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: ST_TO_ADDR
37959: GO 38854
37961: LD_INT 5
37963: DOUBLE
37964: EQUAL
37965: IFTRUE 37969
37967: GO 37995
37969: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37970: LD_ADDR_VAR 0 3
37974: PUSH
37975: LD_INT 2
37977: PUSH
37978: LD_INT 3
37980: PUSH
37981: LD_INT 4
37983: PUSH
37984: LD_INT 5
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: ST_TO_ADDR
37993: GO 38854
37995: LD_INT 9
37997: DOUBLE
37998: EQUAL
37999: IFTRUE 38003
38001: GO 38029
38003: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
38004: LD_ADDR_VAR 0 3
38008: PUSH
38009: LD_INT 2
38011: PUSH
38012: LD_INT 3
38014: PUSH
38015: LD_INT 4
38017: PUSH
38018: LD_INT 5
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: ST_TO_ADDR
38027: GO 38854
38029: LD_INT 7
38031: DOUBLE
38032: EQUAL
38033: IFTRUE 38037
38035: GO 38063
38037: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
38038: LD_ADDR_VAR 0 3
38042: PUSH
38043: LD_INT 2
38045: PUSH
38046: LD_INT 3
38048: PUSH
38049: LD_INT 4
38051: PUSH
38052: LD_INT 5
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: ST_TO_ADDR
38061: GO 38854
38063: LD_INT 12
38065: DOUBLE
38066: EQUAL
38067: IFTRUE 38071
38069: GO 38097
38071: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
38072: LD_ADDR_VAR 0 3
38076: PUSH
38077: LD_INT 2
38079: PUSH
38080: LD_INT 3
38082: PUSH
38083: LD_INT 4
38085: PUSH
38086: LD_INT 5
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: ST_TO_ADDR
38095: GO 38854
38097: LD_INT 13
38099: DOUBLE
38100: EQUAL
38101: IFTRUE 38105
38103: GO 38131
38105: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
38106: LD_ADDR_VAR 0 3
38110: PUSH
38111: LD_INT 2
38113: PUSH
38114: LD_INT 3
38116: PUSH
38117: LD_INT 4
38119: PUSH
38120: LD_INT 5
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: ST_TO_ADDR
38129: GO 38854
38131: LD_INT 14
38133: DOUBLE
38134: EQUAL
38135: IFTRUE 38139
38137: GO 38157
38139: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
38140: LD_ADDR_VAR 0 3
38144: PUSH
38145: LD_INT 4
38147: PUSH
38148: LD_INT 5
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: ST_TO_ADDR
38155: GO 38854
38157: LD_INT 6
38159: DOUBLE
38160: EQUAL
38161: IFTRUE 38165
38163: GO 38183
38165: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
38166: LD_ADDR_VAR 0 3
38170: PUSH
38171: LD_INT 4
38173: PUSH
38174: LD_INT 5
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: ST_TO_ADDR
38181: GO 38854
38183: LD_INT 10
38185: DOUBLE
38186: EQUAL
38187: IFTRUE 38191
38189: GO 38209
38191: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
38192: LD_ADDR_VAR 0 3
38196: PUSH
38197: LD_INT 4
38199: PUSH
38200: LD_INT 5
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: ST_TO_ADDR
38207: GO 38854
38209: LD_INT 22
38211: DOUBLE
38212: EQUAL
38213: IFTRUE 38217
38215: GO 38243
38217: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
38218: LD_ADDR_VAR 0 3
38222: PUSH
38223: LD_INT 11
38225: PUSH
38226: LD_INT 12
38228: PUSH
38229: LD_INT 13
38231: PUSH
38232: LD_INT 14
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: ST_TO_ADDR
38241: GO 38854
38243: LD_INT 23
38245: DOUBLE
38246: EQUAL
38247: IFTRUE 38251
38249: GO 38277
38251: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
38252: LD_ADDR_VAR 0 3
38256: PUSH
38257: LD_INT 11
38259: PUSH
38260: LD_INT 12
38262: PUSH
38263: LD_INT 13
38265: PUSH
38266: LD_INT 14
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: ST_TO_ADDR
38275: GO 38854
38277: LD_INT 24
38279: DOUBLE
38280: EQUAL
38281: IFTRUE 38285
38283: GO 38311
38285: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
38286: LD_ADDR_VAR 0 3
38290: PUSH
38291: LD_INT 11
38293: PUSH
38294: LD_INT 12
38296: PUSH
38297: LD_INT 13
38299: PUSH
38300: LD_INT 14
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: ST_TO_ADDR
38309: GO 38854
38311: LD_INT 30
38313: DOUBLE
38314: EQUAL
38315: IFTRUE 38319
38317: GO 38345
38319: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
38320: LD_ADDR_VAR 0 3
38324: PUSH
38325: LD_INT 11
38327: PUSH
38328: LD_INT 12
38330: PUSH
38331: LD_INT 13
38333: PUSH
38334: LD_INT 14
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: ST_TO_ADDR
38343: GO 38854
38345: LD_INT 25
38347: DOUBLE
38348: EQUAL
38349: IFTRUE 38353
38351: GO 38371
38353: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
38354: LD_ADDR_VAR 0 3
38358: PUSH
38359: LD_INT 13
38361: PUSH
38362: LD_INT 14
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: ST_TO_ADDR
38369: GO 38854
38371: LD_INT 27
38373: DOUBLE
38374: EQUAL
38375: IFTRUE 38379
38377: GO 38397
38379: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
38380: LD_ADDR_VAR 0 3
38384: PUSH
38385: LD_INT 13
38387: PUSH
38388: LD_INT 14
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: ST_TO_ADDR
38395: GO 38854
38397: LD_EXP 124
38401: DOUBLE
38402: EQUAL
38403: IFTRUE 38407
38405: GO 38433
38407: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
38408: LD_ADDR_VAR 0 3
38412: PUSH
38413: LD_INT 11
38415: PUSH
38416: LD_INT 12
38418: PUSH
38419: LD_INT 13
38421: PUSH
38422: LD_INT 14
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: ST_TO_ADDR
38431: GO 38854
38433: LD_INT 28
38435: DOUBLE
38436: EQUAL
38437: IFTRUE 38441
38439: GO 38459
38441: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
38442: LD_ADDR_VAR 0 3
38446: PUSH
38447: LD_INT 13
38449: PUSH
38450: LD_INT 14
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: ST_TO_ADDR
38457: GO 38854
38459: LD_INT 29
38461: DOUBLE
38462: EQUAL
38463: IFTRUE 38467
38465: GO 38485
38467: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
38468: LD_ADDR_VAR 0 3
38472: PUSH
38473: LD_INT 13
38475: PUSH
38476: LD_INT 14
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: ST_TO_ADDR
38483: GO 38854
38485: LD_INT 31
38487: DOUBLE
38488: EQUAL
38489: IFTRUE 38493
38491: GO 38511
38493: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
38494: LD_ADDR_VAR 0 3
38498: PUSH
38499: LD_INT 13
38501: PUSH
38502: LD_INT 14
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: ST_TO_ADDR
38509: GO 38854
38511: LD_INT 26
38513: DOUBLE
38514: EQUAL
38515: IFTRUE 38519
38517: GO 38537
38519: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
38520: LD_ADDR_VAR 0 3
38524: PUSH
38525: LD_INT 13
38527: PUSH
38528: LD_INT 14
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: ST_TO_ADDR
38535: GO 38854
38537: LD_INT 42
38539: DOUBLE
38540: EQUAL
38541: IFTRUE 38545
38543: GO 38571
38545: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
38546: LD_ADDR_VAR 0 3
38550: PUSH
38551: LD_INT 21
38553: PUSH
38554: LD_INT 22
38556: PUSH
38557: LD_INT 23
38559: PUSH
38560: LD_INT 24
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: ST_TO_ADDR
38569: GO 38854
38571: LD_INT 43
38573: DOUBLE
38574: EQUAL
38575: IFTRUE 38579
38577: GO 38605
38579: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
38580: LD_ADDR_VAR 0 3
38584: PUSH
38585: LD_INT 21
38587: PUSH
38588: LD_INT 22
38590: PUSH
38591: LD_INT 23
38593: PUSH
38594: LD_INT 24
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: ST_TO_ADDR
38603: GO 38854
38605: LD_INT 44
38607: DOUBLE
38608: EQUAL
38609: IFTRUE 38613
38611: GO 38639
38613: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
38614: LD_ADDR_VAR 0 3
38618: PUSH
38619: LD_INT 21
38621: PUSH
38622: LD_INT 22
38624: PUSH
38625: LD_INT 23
38627: PUSH
38628: LD_INT 24
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: ST_TO_ADDR
38637: GO 38854
38639: LD_INT 45
38641: DOUBLE
38642: EQUAL
38643: IFTRUE 38647
38645: GO 38673
38647: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
38648: LD_ADDR_VAR 0 3
38652: PUSH
38653: LD_INT 21
38655: PUSH
38656: LD_INT 22
38658: PUSH
38659: LD_INT 23
38661: PUSH
38662: LD_INT 24
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: ST_TO_ADDR
38671: GO 38854
38673: LD_INT 49
38675: DOUBLE
38676: EQUAL
38677: IFTRUE 38681
38679: GO 38707
38681: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
38682: LD_ADDR_VAR 0 3
38686: PUSH
38687: LD_INT 21
38689: PUSH
38690: LD_INT 22
38692: PUSH
38693: LD_INT 23
38695: PUSH
38696: LD_INT 24
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: ST_TO_ADDR
38705: GO 38854
38707: LD_INT 51
38709: DOUBLE
38710: EQUAL
38711: IFTRUE 38715
38713: GO 38741
38715: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
38716: LD_ADDR_VAR 0 3
38720: PUSH
38721: LD_INT 21
38723: PUSH
38724: LD_INT 22
38726: PUSH
38727: LD_INT 23
38729: PUSH
38730: LD_INT 24
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: ST_TO_ADDR
38739: GO 38854
38741: LD_INT 52
38743: DOUBLE
38744: EQUAL
38745: IFTRUE 38749
38747: GO 38775
38749: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
38750: LD_ADDR_VAR 0 3
38754: PUSH
38755: LD_INT 21
38757: PUSH
38758: LD_INT 22
38760: PUSH
38761: LD_INT 23
38763: PUSH
38764: LD_INT 24
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: ST_TO_ADDR
38773: GO 38854
38775: LD_INT 53
38777: DOUBLE
38778: EQUAL
38779: IFTRUE 38783
38781: GO 38801
38783: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
38784: LD_ADDR_VAR 0 3
38788: PUSH
38789: LD_INT 23
38791: PUSH
38792: LD_INT 24
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: ST_TO_ADDR
38799: GO 38854
38801: LD_INT 46
38803: DOUBLE
38804: EQUAL
38805: IFTRUE 38809
38807: GO 38827
38809: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
38810: LD_ADDR_VAR 0 3
38814: PUSH
38815: LD_INT 23
38817: PUSH
38818: LD_INT 24
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: ST_TO_ADDR
38825: GO 38854
38827: LD_INT 47
38829: DOUBLE
38830: EQUAL
38831: IFTRUE 38835
38833: GO 38853
38835: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38836: LD_ADDR_VAR 0 3
38840: PUSH
38841: LD_INT 23
38843: PUSH
38844: LD_INT 24
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: ST_TO_ADDR
38851: GO 38854
38853: POP
// result := ( chassis in result ) ;
38854: LD_ADDR_VAR 0 3
38858: PUSH
38859: LD_VAR 0 1
38863: PUSH
38864: LD_VAR 0 3
38868: IN
38869: ST_TO_ADDR
// end ;
38870: LD_VAR 0 3
38874: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
38875: LD_INT 0
38877: PPUSH
38878: PPUSH
38879: PPUSH
38880: PPUSH
38881: PPUSH
38882: PPUSH
38883: PPUSH
// result := array ;
38884: LD_ADDR_VAR 0 5
38888: PUSH
38889: LD_VAR 0 1
38893: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38894: LD_VAR 0 1
38898: NOT
38899: PUSH
38900: LD_VAR 0 2
38904: NOT
38905: OR
38906: PUSH
38907: LD_VAR 0 3
38911: NOT
38912: OR
38913: PUSH
38914: LD_VAR 0 2
38918: PUSH
38919: LD_VAR 0 1
38923: GREATER
38924: OR
38925: PUSH
38926: LD_VAR 0 3
38930: PUSH
38931: LD_VAR 0 1
38935: GREATER
38936: OR
38937: IFFALSE 38941
// exit ;
38939: GO 39237
// if direction then
38941: LD_VAR 0 4
38945: IFFALSE 39009
// begin d := 1 ;
38947: LD_ADDR_VAR 0 9
38951: PUSH
38952: LD_INT 1
38954: ST_TO_ADDR
// if i_from > i_to then
38955: LD_VAR 0 2
38959: PUSH
38960: LD_VAR 0 3
38964: GREATER
38965: IFFALSE 38991
// length := ( array - i_from ) + i_to else
38967: LD_ADDR_VAR 0 11
38971: PUSH
38972: LD_VAR 0 1
38976: PUSH
38977: LD_VAR 0 2
38981: MINUS
38982: PUSH
38983: LD_VAR 0 3
38987: PLUS
38988: ST_TO_ADDR
38989: GO 39007
// length := i_to - i_from ;
38991: LD_ADDR_VAR 0 11
38995: PUSH
38996: LD_VAR 0 3
39000: PUSH
39001: LD_VAR 0 2
39005: MINUS
39006: ST_TO_ADDR
// end else
39007: GO 39070
// begin d := - 1 ;
39009: LD_ADDR_VAR 0 9
39013: PUSH
39014: LD_INT 1
39016: NEG
39017: ST_TO_ADDR
// if i_from > i_to then
39018: LD_VAR 0 2
39022: PUSH
39023: LD_VAR 0 3
39027: GREATER
39028: IFFALSE 39048
// length := i_from - i_to else
39030: LD_ADDR_VAR 0 11
39034: PUSH
39035: LD_VAR 0 2
39039: PUSH
39040: LD_VAR 0 3
39044: MINUS
39045: ST_TO_ADDR
39046: GO 39070
// length := ( array - i_to ) + i_from ;
39048: LD_ADDR_VAR 0 11
39052: PUSH
39053: LD_VAR 0 1
39057: PUSH
39058: LD_VAR 0 3
39062: MINUS
39063: PUSH
39064: LD_VAR 0 2
39068: PLUS
39069: ST_TO_ADDR
// end ; if not length then
39070: LD_VAR 0 11
39074: NOT
39075: IFFALSE 39079
// exit ;
39077: GO 39237
// tmp := array ;
39079: LD_ADDR_VAR 0 10
39083: PUSH
39084: LD_VAR 0 1
39088: ST_TO_ADDR
// for i = 1 to length do
39089: LD_ADDR_VAR 0 6
39093: PUSH
39094: DOUBLE
39095: LD_INT 1
39097: DEC
39098: ST_TO_ADDR
39099: LD_VAR 0 11
39103: PUSH
39104: FOR_TO
39105: IFFALSE 39225
// begin for j = 1 to array do
39107: LD_ADDR_VAR 0 7
39111: PUSH
39112: DOUBLE
39113: LD_INT 1
39115: DEC
39116: ST_TO_ADDR
39117: LD_VAR 0 1
39121: PUSH
39122: FOR_TO
39123: IFFALSE 39211
// begin k := j + d ;
39125: LD_ADDR_VAR 0 8
39129: PUSH
39130: LD_VAR 0 7
39134: PUSH
39135: LD_VAR 0 9
39139: PLUS
39140: ST_TO_ADDR
// if k > array then
39141: LD_VAR 0 8
39145: PUSH
39146: LD_VAR 0 1
39150: GREATER
39151: IFFALSE 39161
// k := 1 ;
39153: LD_ADDR_VAR 0 8
39157: PUSH
39158: LD_INT 1
39160: ST_TO_ADDR
// if not k then
39161: LD_VAR 0 8
39165: NOT
39166: IFFALSE 39178
// k := array ;
39168: LD_ADDR_VAR 0 8
39172: PUSH
39173: LD_VAR 0 1
39177: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
39178: LD_ADDR_VAR 0 10
39182: PUSH
39183: LD_VAR 0 10
39187: PPUSH
39188: LD_VAR 0 8
39192: PPUSH
39193: LD_VAR 0 1
39197: PUSH
39198: LD_VAR 0 7
39202: ARRAY
39203: PPUSH
39204: CALL_OW 1
39208: ST_TO_ADDR
// end ;
39209: GO 39122
39211: POP
39212: POP
// array := tmp ;
39213: LD_ADDR_VAR 0 1
39217: PUSH
39218: LD_VAR 0 10
39222: ST_TO_ADDR
// end ;
39223: GO 39104
39225: POP
39226: POP
// result := array ;
39227: LD_ADDR_VAR 0 5
39231: PUSH
39232: LD_VAR 0 1
39236: ST_TO_ADDR
// end ;
39237: LD_VAR 0 5
39241: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
39242: LD_INT 0
39244: PPUSH
39245: PPUSH
// result := 0 ;
39246: LD_ADDR_VAR 0 3
39250: PUSH
39251: LD_INT 0
39253: ST_TO_ADDR
// if not array or not value in array then
39254: LD_VAR 0 1
39258: NOT
39259: PUSH
39260: LD_VAR 0 2
39264: PUSH
39265: LD_VAR 0 1
39269: IN
39270: NOT
39271: OR
39272: IFFALSE 39276
// exit ;
39274: GO 39330
// for i = 1 to array do
39276: LD_ADDR_VAR 0 4
39280: PUSH
39281: DOUBLE
39282: LD_INT 1
39284: DEC
39285: ST_TO_ADDR
39286: LD_VAR 0 1
39290: PUSH
39291: FOR_TO
39292: IFFALSE 39328
// if value = array [ i ] then
39294: LD_VAR 0 2
39298: PUSH
39299: LD_VAR 0 1
39303: PUSH
39304: LD_VAR 0 4
39308: ARRAY
39309: EQUAL
39310: IFFALSE 39326
// begin result := i ;
39312: LD_ADDR_VAR 0 3
39316: PUSH
39317: LD_VAR 0 4
39321: ST_TO_ADDR
// exit ;
39322: POP
39323: POP
39324: GO 39330
// end ;
39326: GO 39291
39328: POP
39329: POP
// end ;
39330: LD_VAR 0 3
39334: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
39335: LD_INT 0
39337: PPUSH
// vc_chassis := chassis ;
39338: LD_ADDR_OWVAR 37
39342: PUSH
39343: LD_VAR 0 1
39347: ST_TO_ADDR
// vc_engine := engine ;
39348: LD_ADDR_OWVAR 39
39352: PUSH
39353: LD_VAR 0 2
39357: ST_TO_ADDR
// vc_control := control ;
39358: LD_ADDR_OWVAR 38
39362: PUSH
39363: LD_VAR 0 3
39367: ST_TO_ADDR
// vc_weapon := weapon ;
39368: LD_ADDR_OWVAR 40
39372: PUSH
39373: LD_VAR 0 4
39377: ST_TO_ADDR
// vc_fuel_battery := fuel ;
39378: LD_ADDR_OWVAR 41
39382: PUSH
39383: LD_VAR 0 5
39387: ST_TO_ADDR
// end ;
39388: LD_VAR 0 6
39392: RET
// export function WantPlant ( unit ) ; var task ; begin
39393: LD_INT 0
39395: PPUSH
39396: PPUSH
// result := false ;
39397: LD_ADDR_VAR 0 2
39401: PUSH
39402: LD_INT 0
39404: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
39405: LD_ADDR_VAR 0 3
39409: PUSH
39410: LD_VAR 0 1
39414: PPUSH
39415: CALL_OW 437
39419: ST_TO_ADDR
// if task then
39420: LD_VAR 0 3
39424: IFFALSE 39452
// if task [ 1 ] [ 1 ] = p then
39426: LD_VAR 0 3
39430: PUSH
39431: LD_INT 1
39433: ARRAY
39434: PUSH
39435: LD_INT 1
39437: ARRAY
39438: PUSH
39439: LD_STRING p
39441: EQUAL
39442: IFFALSE 39452
// result := true ;
39444: LD_ADDR_VAR 0 2
39448: PUSH
39449: LD_INT 1
39451: ST_TO_ADDR
// end ;
39452: LD_VAR 0 2
39456: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
39457: LD_INT 0
39459: PPUSH
39460: PPUSH
39461: PPUSH
39462: PPUSH
// if pos < 1 then
39463: LD_VAR 0 2
39467: PUSH
39468: LD_INT 1
39470: LESS
39471: IFFALSE 39475
// exit ;
39473: GO 39778
// if pos = 1 then
39475: LD_VAR 0 2
39479: PUSH
39480: LD_INT 1
39482: EQUAL
39483: IFFALSE 39516
// result := Replace ( arr , pos [ 1 ] , value ) else
39485: LD_ADDR_VAR 0 4
39489: PUSH
39490: LD_VAR 0 1
39494: PPUSH
39495: LD_VAR 0 2
39499: PUSH
39500: LD_INT 1
39502: ARRAY
39503: PPUSH
39504: LD_VAR 0 3
39508: PPUSH
39509: CALL_OW 1
39513: ST_TO_ADDR
39514: GO 39778
// begin tmp := arr ;
39516: LD_ADDR_VAR 0 6
39520: PUSH
39521: LD_VAR 0 1
39525: ST_TO_ADDR
// s_arr := [ tmp ] ;
39526: LD_ADDR_VAR 0 7
39530: PUSH
39531: LD_VAR 0 6
39535: PUSH
39536: EMPTY
39537: LIST
39538: ST_TO_ADDR
// for i = 1 to pos - 1 do
39539: LD_ADDR_VAR 0 5
39543: PUSH
39544: DOUBLE
39545: LD_INT 1
39547: DEC
39548: ST_TO_ADDR
39549: LD_VAR 0 2
39553: PUSH
39554: LD_INT 1
39556: MINUS
39557: PUSH
39558: FOR_TO
39559: IFFALSE 39604
// begin tmp := tmp [ pos [ i ] ] ;
39561: LD_ADDR_VAR 0 6
39565: PUSH
39566: LD_VAR 0 6
39570: PUSH
39571: LD_VAR 0 2
39575: PUSH
39576: LD_VAR 0 5
39580: ARRAY
39581: ARRAY
39582: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
39583: LD_ADDR_VAR 0 7
39587: PUSH
39588: LD_VAR 0 7
39592: PUSH
39593: LD_VAR 0 6
39597: PUSH
39598: EMPTY
39599: LIST
39600: ADD
39601: ST_TO_ADDR
// end ;
39602: GO 39558
39604: POP
39605: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
39606: LD_ADDR_VAR 0 6
39610: PUSH
39611: LD_VAR 0 6
39615: PPUSH
39616: LD_VAR 0 2
39620: PUSH
39621: LD_VAR 0 2
39625: ARRAY
39626: PPUSH
39627: LD_VAR 0 3
39631: PPUSH
39632: CALL_OW 1
39636: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
39637: LD_ADDR_VAR 0 7
39641: PUSH
39642: LD_VAR 0 7
39646: PPUSH
39647: LD_VAR 0 7
39651: PPUSH
39652: LD_VAR 0 6
39656: PPUSH
39657: CALL_OW 1
39661: ST_TO_ADDR
// for i = s_arr downto 2 do
39662: LD_ADDR_VAR 0 5
39666: PUSH
39667: DOUBLE
39668: LD_VAR 0 7
39672: INC
39673: ST_TO_ADDR
39674: LD_INT 2
39676: PUSH
39677: FOR_DOWNTO
39678: IFFALSE 39762
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
39680: LD_ADDR_VAR 0 6
39684: PUSH
39685: LD_VAR 0 7
39689: PUSH
39690: LD_VAR 0 5
39694: PUSH
39695: LD_INT 1
39697: MINUS
39698: ARRAY
39699: PPUSH
39700: LD_VAR 0 2
39704: PUSH
39705: LD_VAR 0 5
39709: PUSH
39710: LD_INT 1
39712: MINUS
39713: ARRAY
39714: PPUSH
39715: LD_VAR 0 7
39719: PUSH
39720: LD_VAR 0 5
39724: ARRAY
39725: PPUSH
39726: CALL_OW 1
39730: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
39731: LD_ADDR_VAR 0 7
39735: PUSH
39736: LD_VAR 0 7
39740: PPUSH
39741: LD_VAR 0 5
39745: PUSH
39746: LD_INT 1
39748: MINUS
39749: PPUSH
39750: LD_VAR 0 6
39754: PPUSH
39755: CALL_OW 1
39759: ST_TO_ADDR
// end ;
39760: GO 39677
39762: POP
39763: POP
// result := s_arr [ 1 ] ;
39764: LD_ADDR_VAR 0 4
39768: PUSH
39769: LD_VAR 0 7
39773: PUSH
39774: LD_INT 1
39776: ARRAY
39777: ST_TO_ADDR
// end ; end ;
39778: LD_VAR 0 4
39782: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
39783: LD_INT 0
39785: PPUSH
39786: PPUSH
// if not list then
39787: LD_VAR 0 1
39791: NOT
39792: IFFALSE 39796
// exit ;
39794: GO 39887
// i := list [ pos1 ] ;
39796: LD_ADDR_VAR 0 5
39800: PUSH
39801: LD_VAR 0 1
39805: PUSH
39806: LD_VAR 0 2
39810: ARRAY
39811: ST_TO_ADDR
// if not i then
39812: LD_VAR 0 5
39816: NOT
39817: IFFALSE 39821
// exit ;
39819: GO 39887
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
39821: LD_ADDR_VAR 0 1
39825: PUSH
39826: LD_VAR 0 1
39830: PPUSH
39831: LD_VAR 0 2
39835: PPUSH
39836: LD_VAR 0 1
39840: PUSH
39841: LD_VAR 0 3
39845: ARRAY
39846: PPUSH
39847: CALL_OW 1
39851: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
39852: LD_ADDR_VAR 0 1
39856: PUSH
39857: LD_VAR 0 1
39861: PPUSH
39862: LD_VAR 0 3
39866: PPUSH
39867: LD_VAR 0 5
39871: PPUSH
39872: CALL_OW 1
39876: ST_TO_ADDR
// result := list ;
39877: LD_ADDR_VAR 0 4
39881: PUSH
39882: LD_VAR 0 1
39886: ST_TO_ADDR
// end ;
39887: LD_VAR 0 4
39891: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39892: LD_INT 0
39894: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39895: LD_ADDR_VAR 0 5
39899: PUSH
39900: LD_VAR 0 1
39904: PPUSH
39905: CALL_OW 250
39909: PPUSH
39910: LD_VAR 0 1
39914: PPUSH
39915: CALL_OW 251
39919: PPUSH
39920: LD_VAR 0 2
39924: PPUSH
39925: LD_VAR 0 3
39929: PPUSH
39930: LD_VAR 0 4
39934: PPUSH
39935: CALL 39945 0 5
39939: ST_TO_ADDR
// end ;
39940: LD_VAR 0 5
39944: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39945: LD_INT 0
39947: PPUSH
39948: PPUSH
39949: PPUSH
39950: PPUSH
// if not list then
39951: LD_VAR 0 3
39955: NOT
39956: IFFALSE 39960
// exit ;
39958: GO 40348
// result := [ ] ;
39960: LD_ADDR_VAR 0 6
39964: PUSH
39965: EMPTY
39966: ST_TO_ADDR
// for i in list do
39967: LD_ADDR_VAR 0 7
39971: PUSH
39972: LD_VAR 0 3
39976: PUSH
39977: FOR_IN
39978: IFFALSE 40180
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39980: LD_ADDR_VAR 0 9
39984: PUSH
39985: LD_VAR 0 7
39989: PPUSH
39990: LD_VAR 0 1
39994: PPUSH
39995: LD_VAR 0 2
39999: PPUSH
40000: CALL_OW 297
40004: ST_TO_ADDR
// if not result then
40005: LD_VAR 0 6
40009: NOT
40010: IFFALSE 40036
// result := [ [ i , tmp ] ] else
40012: LD_ADDR_VAR 0 6
40016: PUSH
40017: LD_VAR 0 7
40021: PUSH
40022: LD_VAR 0 9
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: EMPTY
40032: LIST
40033: ST_TO_ADDR
40034: GO 40178
// begin if result [ result ] [ 2 ] < tmp then
40036: LD_VAR 0 6
40040: PUSH
40041: LD_VAR 0 6
40045: ARRAY
40046: PUSH
40047: LD_INT 2
40049: ARRAY
40050: PUSH
40051: LD_VAR 0 9
40055: LESS
40056: IFFALSE 40098
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
40058: LD_ADDR_VAR 0 6
40062: PUSH
40063: LD_VAR 0 6
40067: PPUSH
40068: LD_VAR 0 6
40072: PUSH
40073: LD_INT 1
40075: PLUS
40076: PPUSH
40077: LD_VAR 0 7
40081: PUSH
40082: LD_VAR 0 9
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PPUSH
40091: CALL_OW 2
40095: ST_TO_ADDR
40096: GO 40178
// for j = 1 to result do
40098: LD_ADDR_VAR 0 8
40102: PUSH
40103: DOUBLE
40104: LD_INT 1
40106: DEC
40107: ST_TO_ADDR
40108: LD_VAR 0 6
40112: PUSH
40113: FOR_TO
40114: IFFALSE 40176
// begin if tmp < result [ j ] [ 2 ] then
40116: LD_VAR 0 9
40120: PUSH
40121: LD_VAR 0 6
40125: PUSH
40126: LD_VAR 0 8
40130: ARRAY
40131: PUSH
40132: LD_INT 2
40134: ARRAY
40135: LESS
40136: IFFALSE 40174
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40138: LD_ADDR_VAR 0 6
40142: PUSH
40143: LD_VAR 0 6
40147: PPUSH
40148: LD_VAR 0 8
40152: PPUSH
40153: LD_VAR 0 7
40157: PUSH
40158: LD_VAR 0 9
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PPUSH
40167: CALL_OW 2
40171: ST_TO_ADDR
// break ;
40172: GO 40176
// end ; end ;
40174: GO 40113
40176: POP
40177: POP
// end ; end ;
40178: GO 39977
40180: POP
40181: POP
// if result and not asc then
40182: LD_VAR 0 6
40186: PUSH
40187: LD_VAR 0 4
40191: NOT
40192: AND
40193: IFFALSE 40268
// begin tmp := result ;
40195: LD_ADDR_VAR 0 9
40199: PUSH
40200: LD_VAR 0 6
40204: ST_TO_ADDR
// for i = tmp downto 1 do
40205: LD_ADDR_VAR 0 7
40209: PUSH
40210: DOUBLE
40211: LD_VAR 0 9
40215: INC
40216: ST_TO_ADDR
40217: LD_INT 1
40219: PUSH
40220: FOR_DOWNTO
40221: IFFALSE 40266
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
40223: LD_ADDR_VAR 0 6
40227: PUSH
40228: LD_VAR 0 6
40232: PPUSH
40233: LD_VAR 0 9
40237: PUSH
40238: LD_VAR 0 7
40242: MINUS
40243: PUSH
40244: LD_INT 1
40246: PLUS
40247: PPUSH
40248: LD_VAR 0 9
40252: PUSH
40253: LD_VAR 0 7
40257: ARRAY
40258: PPUSH
40259: CALL_OW 1
40263: ST_TO_ADDR
40264: GO 40220
40266: POP
40267: POP
// end ; tmp := [ ] ;
40268: LD_ADDR_VAR 0 9
40272: PUSH
40273: EMPTY
40274: ST_TO_ADDR
// if mode then
40275: LD_VAR 0 5
40279: IFFALSE 40348
// begin for i = 1 to result do
40281: LD_ADDR_VAR 0 7
40285: PUSH
40286: DOUBLE
40287: LD_INT 1
40289: DEC
40290: ST_TO_ADDR
40291: LD_VAR 0 6
40295: PUSH
40296: FOR_TO
40297: IFFALSE 40336
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
40299: LD_ADDR_VAR 0 9
40303: PUSH
40304: LD_VAR 0 9
40308: PPUSH
40309: LD_VAR 0 7
40313: PPUSH
40314: LD_VAR 0 6
40318: PUSH
40319: LD_VAR 0 7
40323: ARRAY
40324: PUSH
40325: LD_INT 1
40327: ARRAY
40328: PPUSH
40329: CALL_OW 1
40333: ST_TO_ADDR
40334: GO 40296
40336: POP
40337: POP
// result := tmp ;
40338: LD_ADDR_VAR 0 6
40342: PUSH
40343: LD_VAR 0 9
40347: ST_TO_ADDR
// end ; end ;
40348: LD_VAR 0 6
40352: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
40353: LD_INT 0
40355: PPUSH
40356: PPUSH
40357: PPUSH
40358: PPUSH
40359: PPUSH
40360: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
40361: LD_ADDR_VAR 0 5
40365: PUSH
40366: LD_INT 0
40368: PUSH
40369: LD_INT 0
40371: PUSH
40372: LD_INT 0
40374: PUSH
40375: EMPTY
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: ST_TO_ADDR
// if not x or not y then
40383: LD_VAR 0 2
40387: NOT
40388: PUSH
40389: LD_VAR 0 3
40393: NOT
40394: OR
40395: IFFALSE 40399
// exit ;
40397: GO 42051
// if not range then
40399: LD_VAR 0 4
40403: NOT
40404: IFFALSE 40414
// range := 10 ;
40406: LD_ADDR_VAR 0 4
40410: PUSH
40411: LD_INT 10
40413: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40414: LD_ADDR_VAR 0 8
40418: PUSH
40419: LD_INT 81
40421: PUSH
40422: LD_VAR 0 1
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 92
40433: PUSH
40434: LD_VAR 0 2
40438: PUSH
40439: LD_VAR 0 3
40443: PUSH
40444: LD_VAR 0 4
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 3
40457: PUSH
40458: LD_INT 21
40460: PUSH
40461: LD_INT 3
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: LIST
40476: PPUSH
40477: CALL_OW 69
40481: ST_TO_ADDR
// if not tmp then
40482: LD_VAR 0 8
40486: NOT
40487: IFFALSE 40491
// exit ;
40489: GO 42051
// for i in tmp do
40491: LD_ADDR_VAR 0 6
40495: PUSH
40496: LD_VAR 0 8
40500: PUSH
40501: FOR_IN
40502: IFFALSE 42026
// begin points := [ 0 , 0 , 0 ] ;
40504: LD_ADDR_VAR 0 9
40508: PUSH
40509: LD_INT 0
40511: PUSH
40512: LD_INT 0
40514: PUSH
40515: LD_INT 0
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: LIST
40522: ST_TO_ADDR
// bpoints := 1 ;
40523: LD_ADDR_VAR 0 10
40527: PUSH
40528: LD_INT 1
40530: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40531: LD_VAR 0 6
40535: PPUSH
40536: CALL_OW 247
40540: PUSH
40541: LD_INT 1
40543: DOUBLE
40544: EQUAL
40545: IFTRUE 40549
40547: GO 41127
40549: POP
// begin if GetClass ( i ) = 1 then
40550: LD_VAR 0 6
40554: PPUSH
40555: CALL_OW 257
40559: PUSH
40560: LD_INT 1
40562: EQUAL
40563: IFFALSE 40584
// points := [ 10 , 5 , 3 ] ;
40565: LD_ADDR_VAR 0 9
40569: PUSH
40570: LD_INT 10
40572: PUSH
40573: LD_INT 5
40575: PUSH
40576: LD_INT 3
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: LIST
40583: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40584: LD_VAR 0 6
40588: PPUSH
40589: CALL_OW 257
40593: PUSH
40594: LD_INT 2
40596: PUSH
40597: LD_INT 3
40599: PUSH
40600: LD_INT 4
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: LIST
40607: IN
40608: IFFALSE 40629
// points := [ 3 , 2 , 1 ] ;
40610: LD_ADDR_VAR 0 9
40614: PUSH
40615: LD_INT 3
40617: PUSH
40618: LD_INT 2
40620: PUSH
40621: LD_INT 1
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: LIST
40628: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40629: LD_VAR 0 6
40633: PPUSH
40634: CALL_OW 257
40638: PUSH
40639: LD_INT 5
40641: EQUAL
40642: IFFALSE 40663
// points := [ 130 , 5 , 2 ] ;
40644: LD_ADDR_VAR 0 9
40648: PUSH
40649: LD_INT 130
40651: PUSH
40652: LD_INT 5
40654: PUSH
40655: LD_INT 2
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: LIST
40662: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40663: LD_VAR 0 6
40667: PPUSH
40668: CALL_OW 257
40672: PUSH
40673: LD_INT 8
40675: EQUAL
40676: IFFALSE 40697
// points := [ 35 , 35 , 30 ] ;
40678: LD_ADDR_VAR 0 9
40682: PUSH
40683: LD_INT 35
40685: PUSH
40686: LD_INT 35
40688: PUSH
40689: LD_INT 30
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: LIST
40696: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40697: LD_VAR 0 6
40701: PPUSH
40702: CALL_OW 257
40706: PUSH
40707: LD_INT 9
40709: EQUAL
40710: IFFALSE 40731
// points := [ 20 , 55 , 40 ] ;
40712: LD_ADDR_VAR 0 9
40716: PUSH
40717: LD_INT 20
40719: PUSH
40720: LD_INT 55
40722: PUSH
40723: LD_INT 40
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: LIST
40730: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40731: LD_VAR 0 6
40735: PPUSH
40736: CALL_OW 257
40740: PUSH
40741: LD_INT 12
40743: PUSH
40744: LD_INT 16
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: IN
40751: IFFALSE 40772
// points := [ 5 , 3 , 2 ] ;
40753: LD_ADDR_VAR 0 9
40757: PUSH
40758: LD_INT 5
40760: PUSH
40761: LD_INT 3
40763: PUSH
40764: LD_INT 2
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: LIST
40771: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40772: LD_VAR 0 6
40776: PPUSH
40777: CALL_OW 257
40781: PUSH
40782: LD_INT 17
40784: EQUAL
40785: IFFALSE 40806
// points := [ 100 , 50 , 75 ] ;
40787: LD_ADDR_VAR 0 9
40791: PUSH
40792: LD_INT 100
40794: PUSH
40795: LD_INT 50
40797: PUSH
40798: LD_INT 75
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: LIST
40805: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40806: LD_VAR 0 6
40810: PPUSH
40811: CALL_OW 257
40815: PUSH
40816: LD_INT 15
40818: EQUAL
40819: IFFALSE 40840
// points := [ 10 , 5 , 3 ] ;
40821: LD_ADDR_VAR 0 9
40825: PUSH
40826: LD_INT 10
40828: PUSH
40829: LD_INT 5
40831: PUSH
40832: LD_INT 3
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: LIST
40839: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40840: LD_VAR 0 6
40844: PPUSH
40845: CALL_OW 257
40849: PUSH
40850: LD_INT 14
40852: EQUAL
40853: IFFALSE 40874
// points := [ 10 , 0 , 0 ] ;
40855: LD_ADDR_VAR 0 9
40859: PUSH
40860: LD_INT 10
40862: PUSH
40863: LD_INT 0
40865: PUSH
40866: LD_INT 0
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: LIST
40873: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40874: LD_VAR 0 6
40878: PPUSH
40879: CALL_OW 257
40883: PUSH
40884: LD_INT 11
40886: EQUAL
40887: IFFALSE 40908
// points := [ 30 , 10 , 5 ] ;
40889: LD_ADDR_VAR 0 9
40893: PUSH
40894: LD_INT 30
40896: PUSH
40897: LD_INT 10
40899: PUSH
40900: LD_INT 5
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: LIST
40907: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40908: LD_VAR 0 1
40912: PPUSH
40913: LD_INT 5
40915: PPUSH
40916: CALL_OW 321
40920: PUSH
40921: LD_INT 2
40923: EQUAL
40924: IFFALSE 40941
// bpoints := bpoints * 1.8 ;
40926: LD_ADDR_VAR 0 10
40930: PUSH
40931: LD_VAR 0 10
40935: PUSH
40936: LD_REAL  1.80000000000000E+0000
40939: MUL
40940: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40941: LD_VAR 0 6
40945: PPUSH
40946: CALL_OW 257
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: LD_INT 2
40956: PUSH
40957: LD_INT 3
40959: PUSH
40960: LD_INT 4
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: IN
40969: PUSH
40970: LD_VAR 0 1
40974: PPUSH
40975: LD_INT 51
40977: PPUSH
40978: CALL_OW 321
40982: PUSH
40983: LD_INT 2
40985: EQUAL
40986: AND
40987: IFFALSE 41004
// bpoints := bpoints * 1.2 ;
40989: LD_ADDR_VAR 0 10
40993: PUSH
40994: LD_VAR 0 10
40998: PUSH
40999: LD_REAL  1.20000000000000E+0000
41002: MUL
41003: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
41004: LD_VAR 0 6
41008: PPUSH
41009: CALL_OW 257
41013: PUSH
41014: LD_INT 5
41016: PUSH
41017: LD_INT 7
41019: PUSH
41020: LD_INT 9
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: LIST
41027: IN
41028: PUSH
41029: LD_VAR 0 1
41033: PPUSH
41034: LD_INT 52
41036: PPUSH
41037: CALL_OW 321
41041: PUSH
41042: LD_INT 2
41044: EQUAL
41045: AND
41046: IFFALSE 41063
// bpoints := bpoints * 1.5 ;
41048: LD_ADDR_VAR 0 10
41052: PUSH
41053: LD_VAR 0 10
41057: PUSH
41058: LD_REAL  1.50000000000000E+0000
41061: MUL
41062: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
41063: LD_VAR 0 1
41067: PPUSH
41068: LD_INT 66
41070: PPUSH
41071: CALL_OW 321
41075: PUSH
41076: LD_INT 2
41078: EQUAL
41079: IFFALSE 41096
// bpoints := bpoints * 1.1 ;
41081: LD_ADDR_VAR 0 10
41085: PUSH
41086: LD_VAR 0 10
41090: PUSH
41091: LD_REAL  1.10000000000000E+0000
41094: MUL
41095: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
41096: LD_ADDR_VAR 0 10
41100: PUSH
41101: LD_VAR 0 10
41105: PUSH
41106: LD_VAR 0 6
41110: PPUSH
41111: LD_INT 1
41113: PPUSH
41114: CALL_OW 259
41118: PUSH
41119: LD_REAL  1.15000000000000E+0000
41122: MUL
41123: MUL
41124: ST_TO_ADDR
// end ; unit_vehicle :
41125: GO 41955
41127: LD_INT 2
41129: DOUBLE
41130: EQUAL
41131: IFTRUE 41135
41133: GO 41943
41135: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
41136: LD_VAR 0 6
41140: PPUSH
41141: CALL_OW 264
41145: PUSH
41146: LD_INT 2
41148: PUSH
41149: LD_INT 42
41151: PUSH
41152: LD_INT 24
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: LIST
41159: IN
41160: IFFALSE 41181
// points := [ 25 , 5 , 3 ] ;
41162: LD_ADDR_VAR 0 9
41166: PUSH
41167: LD_INT 25
41169: PUSH
41170: LD_INT 5
41172: PUSH
41173: LD_INT 3
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: LIST
41180: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
41181: LD_VAR 0 6
41185: PPUSH
41186: CALL_OW 264
41190: PUSH
41191: LD_INT 4
41193: PUSH
41194: LD_INT 43
41196: PUSH
41197: LD_INT 25
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: LIST
41204: IN
41205: IFFALSE 41226
// points := [ 40 , 15 , 5 ] ;
41207: LD_ADDR_VAR 0 9
41211: PUSH
41212: LD_INT 40
41214: PUSH
41215: LD_INT 15
41217: PUSH
41218: LD_INT 5
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: LIST
41225: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
41226: LD_VAR 0 6
41230: PPUSH
41231: CALL_OW 264
41235: PUSH
41236: LD_INT 3
41238: PUSH
41239: LD_INT 23
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: IN
41246: IFFALSE 41267
// points := [ 7 , 25 , 8 ] ;
41248: LD_ADDR_VAR 0 9
41252: PUSH
41253: LD_INT 7
41255: PUSH
41256: LD_INT 25
41258: PUSH
41259: LD_INT 8
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: LIST
41266: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
41267: LD_VAR 0 6
41271: PPUSH
41272: CALL_OW 264
41276: PUSH
41277: LD_INT 5
41279: PUSH
41280: LD_INT 27
41282: PUSH
41283: LD_INT 44
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: LIST
41290: IN
41291: IFFALSE 41312
// points := [ 14 , 50 , 16 ] ;
41293: LD_ADDR_VAR 0 9
41297: PUSH
41298: LD_INT 14
41300: PUSH
41301: LD_INT 50
41303: PUSH
41304: LD_INT 16
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: LIST
41311: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
41312: LD_VAR 0 6
41316: PPUSH
41317: CALL_OW 264
41321: PUSH
41322: LD_INT 6
41324: PUSH
41325: LD_INT 46
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: IN
41332: IFFALSE 41353
// points := [ 32 , 120 , 70 ] ;
41334: LD_ADDR_VAR 0 9
41338: PUSH
41339: LD_INT 32
41341: PUSH
41342: LD_INT 120
41344: PUSH
41345: LD_INT 70
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: LIST
41352: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
41353: LD_VAR 0 6
41357: PPUSH
41358: CALL_OW 264
41362: PUSH
41363: LD_INT 7
41365: PUSH
41366: LD_INT 28
41368: PUSH
41369: LD_INT 45
41371: PUSH
41372: LD_EXP 124
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: IN
41383: IFFALSE 41404
// points := [ 35 , 20 , 45 ] ;
41385: LD_ADDR_VAR 0 9
41389: PUSH
41390: LD_INT 35
41392: PUSH
41393: LD_INT 20
41395: PUSH
41396: LD_INT 45
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: LIST
41403: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
41404: LD_VAR 0 6
41408: PPUSH
41409: CALL_OW 264
41413: PUSH
41414: LD_INT 47
41416: PUSH
41417: EMPTY
41418: LIST
41419: IN
41420: IFFALSE 41441
// points := [ 67 , 45 , 75 ] ;
41422: LD_ADDR_VAR 0 9
41426: PUSH
41427: LD_INT 67
41429: PUSH
41430: LD_INT 45
41432: PUSH
41433: LD_INT 75
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: LIST
41440: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41441: LD_VAR 0 6
41445: PPUSH
41446: CALL_OW 264
41450: PUSH
41451: LD_INT 26
41453: PUSH
41454: EMPTY
41455: LIST
41456: IN
41457: IFFALSE 41478
// points := [ 120 , 30 , 80 ] ;
41459: LD_ADDR_VAR 0 9
41463: PUSH
41464: LD_INT 120
41466: PUSH
41467: LD_INT 30
41469: PUSH
41470: LD_INT 80
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: LIST
41477: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41478: LD_VAR 0 6
41482: PPUSH
41483: CALL_OW 264
41487: PUSH
41488: LD_INT 22
41490: PUSH
41491: EMPTY
41492: LIST
41493: IN
41494: IFFALSE 41515
// points := [ 40 , 1 , 1 ] ;
41496: LD_ADDR_VAR 0 9
41500: PUSH
41501: LD_INT 40
41503: PUSH
41504: LD_INT 1
41506: PUSH
41507: LD_INT 1
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: LIST
41514: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41515: LD_VAR 0 6
41519: PPUSH
41520: CALL_OW 264
41524: PUSH
41525: LD_INT 29
41527: PUSH
41528: EMPTY
41529: LIST
41530: IN
41531: IFFALSE 41552
// points := [ 70 , 200 , 400 ] ;
41533: LD_ADDR_VAR 0 9
41537: PUSH
41538: LD_INT 70
41540: PUSH
41541: LD_INT 200
41543: PUSH
41544: LD_INT 400
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: LIST
41551: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41552: LD_VAR 0 6
41556: PPUSH
41557: CALL_OW 264
41561: PUSH
41562: LD_INT 14
41564: PUSH
41565: LD_INT 53
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: IN
41572: IFFALSE 41593
// points := [ 40 , 10 , 20 ] ;
41574: LD_ADDR_VAR 0 9
41578: PUSH
41579: LD_INT 40
41581: PUSH
41582: LD_INT 10
41584: PUSH
41585: LD_INT 20
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: LIST
41592: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41593: LD_VAR 0 6
41597: PPUSH
41598: CALL_OW 264
41602: PUSH
41603: LD_INT 9
41605: PUSH
41606: EMPTY
41607: LIST
41608: IN
41609: IFFALSE 41630
// points := [ 5 , 70 , 20 ] ;
41611: LD_ADDR_VAR 0 9
41615: PUSH
41616: LD_INT 5
41618: PUSH
41619: LD_INT 70
41621: PUSH
41622: LD_INT 20
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: LIST
41629: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41630: LD_VAR 0 6
41634: PPUSH
41635: CALL_OW 264
41639: PUSH
41640: LD_INT 10
41642: PUSH
41643: EMPTY
41644: LIST
41645: IN
41646: IFFALSE 41667
// points := [ 35 , 110 , 70 ] ;
41648: LD_ADDR_VAR 0 9
41652: PUSH
41653: LD_INT 35
41655: PUSH
41656: LD_INT 110
41658: PUSH
41659: LD_INT 70
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: LIST
41666: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41667: LD_VAR 0 6
41671: PPUSH
41672: CALL_OW 265
41676: PUSH
41677: LD_INT 25
41679: EQUAL
41680: IFFALSE 41701
// points := [ 80 , 65 , 100 ] ;
41682: LD_ADDR_VAR 0 9
41686: PUSH
41687: LD_INT 80
41689: PUSH
41690: LD_INT 65
41692: PUSH
41693: LD_INT 100
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: LIST
41700: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41701: LD_VAR 0 6
41705: PPUSH
41706: CALL_OW 263
41710: PUSH
41711: LD_INT 1
41713: EQUAL
41714: IFFALSE 41749
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41716: LD_ADDR_VAR 0 10
41720: PUSH
41721: LD_VAR 0 10
41725: PUSH
41726: LD_VAR 0 6
41730: PPUSH
41731: CALL_OW 311
41735: PPUSH
41736: LD_INT 3
41738: PPUSH
41739: CALL_OW 259
41743: PUSH
41744: LD_INT 4
41746: MUL
41747: MUL
41748: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41749: LD_VAR 0 6
41753: PPUSH
41754: CALL_OW 263
41758: PUSH
41759: LD_INT 2
41761: EQUAL
41762: IFFALSE 41813
// begin j := IsControledBy ( i ) ;
41764: LD_ADDR_VAR 0 7
41768: PUSH
41769: LD_VAR 0 6
41773: PPUSH
41774: CALL_OW 312
41778: ST_TO_ADDR
// if j then
41779: LD_VAR 0 7
41783: IFFALSE 41813
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41785: LD_ADDR_VAR 0 10
41789: PUSH
41790: LD_VAR 0 10
41794: PUSH
41795: LD_VAR 0 7
41799: PPUSH
41800: LD_INT 3
41802: PPUSH
41803: CALL_OW 259
41807: PUSH
41808: LD_INT 3
41810: MUL
41811: MUL
41812: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41813: LD_VAR 0 6
41817: PPUSH
41818: CALL_OW 264
41822: PUSH
41823: LD_INT 5
41825: PUSH
41826: LD_INT 6
41828: PUSH
41829: LD_INT 46
41831: PUSH
41832: LD_INT 44
41834: PUSH
41835: LD_INT 47
41837: PUSH
41838: LD_INT 45
41840: PUSH
41841: LD_INT 28
41843: PUSH
41844: LD_INT 7
41846: PUSH
41847: LD_INT 27
41849: PUSH
41850: LD_INT 29
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: IN
41865: PUSH
41866: LD_VAR 0 1
41870: PPUSH
41871: LD_INT 52
41873: PPUSH
41874: CALL_OW 321
41878: PUSH
41879: LD_INT 2
41881: EQUAL
41882: AND
41883: IFFALSE 41900
// bpoints := bpoints * 1.2 ;
41885: LD_ADDR_VAR 0 10
41889: PUSH
41890: LD_VAR 0 10
41894: PUSH
41895: LD_REAL  1.20000000000000E+0000
41898: MUL
41899: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41900: LD_VAR 0 6
41904: PPUSH
41905: CALL_OW 264
41909: PUSH
41910: LD_INT 6
41912: PUSH
41913: LD_INT 46
41915: PUSH
41916: LD_INT 47
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: LIST
41923: IN
41924: IFFALSE 41941
// bpoints := bpoints * 1.2 ;
41926: LD_ADDR_VAR 0 10
41930: PUSH
41931: LD_VAR 0 10
41935: PUSH
41936: LD_REAL  1.20000000000000E+0000
41939: MUL
41940: ST_TO_ADDR
// end ; unit_building :
41941: GO 41955
41943: LD_INT 3
41945: DOUBLE
41946: EQUAL
41947: IFTRUE 41951
41949: GO 41954
41951: POP
// ; end ;
41952: GO 41955
41954: POP
// for j = 1 to 3 do
41955: LD_ADDR_VAR 0 7
41959: PUSH
41960: DOUBLE
41961: LD_INT 1
41963: DEC
41964: ST_TO_ADDR
41965: LD_INT 3
41967: PUSH
41968: FOR_TO
41969: IFFALSE 42022
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41971: LD_ADDR_VAR 0 5
41975: PUSH
41976: LD_VAR 0 5
41980: PPUSH
41981: LD_VAR 0 7
41985: PPUSH
41986: LD_VAR 0 5
41990: PUSH
41991: LD_VAR 0 7
41995: ARRAY
41996: PUSH
41997: LD_VAR 0 9
42001: PUSH
42002: LD_VAR 0 7
42006: ARRAY
42007: PUSH
42008: LD_VAR 0 10
42012: MUL
42013: PLUS
42014: PPUSH
42015: CALL_OW 1
42019: ST_TO_ADDR
42020: GO 41968
42022: POP
42023: POP
// end ;
42024: GO 40501
42026: POP
42027: POP
// result := Replace ( result , 4 , tmp ) ;
42028: LD_ADDR_VAR 0 5
42032: PUSH
42033: LD_VAR 0 5
42037: PPUSH
42038: LD_INT 4
42040: PPUSH
42041: LD_VAR 0 8
42045: PPUSH
42046: CALL_OW 1
42050: ST_TO_ADDR
// end ;
42051: LD_VAR 0 5
42055: RET
// export function DangerAtRange ( unit , range ) ; begin
42056: LD_INT 0
42058: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
42059: LD_ADDR_VAR 0 3
42063: PUSH
42064: LD_VAR 0 1
42068: PPUSH
42069: CALL_OW 255
42073: PPUSH
42074: LD_VAR 0 1
42078: PPUSH
42079: CALL_OW 250
42083: PPUSH
42084: LD_VAR 0 1
42088: PPUSH
42089: CALL_OW 251
42093: PPUSH
42094: LD_VAR 0 2
42098: PPUSH
42099: CALL 40353 0 4
42103: ST_TO_ADDR
// end ;
42104: LD_VAR 0 3
42108: RET
// export function DangerInArea ( side , area ) ; begin
42109: LD_INT 0
42111: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
42112: LD_ADDR_VAR 0 3
42116: PUSH
42117: LD_VAR 0 2
42121: PPUSH
42122: LD_INT 81
42124: PUSH
42125: LD_VAR 0 1
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PPUSH
42134: CALL_OW 70
42138: ST_TO_ADDR
// end ;
42139: LD_VAR 0 3
42143: RET
// export function IsExtension ( b ) ; begin
42144: LD_INT 0
42146: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
42147: LD_ADDR_VAR 0 2
42151: PUSH
42152: LD_VAR 0 1
42156: PUSH
42157: LD_INT 23
42159: PUSH
42160: LD_INT 20
42162: PUSH
42163: LD_INT 22
42165: PUSH
42166: LD_INT 17
42168: PUSH
42169: LD_INT 24
42171: PUSH
42172: LD_INT 21
42174: PUSH
42175: LD_INT 19
42177: PUSH
42178: LD_INT 16
42180: PUSH
42181: LD_INT 25
42183: PUSH
42184: LD_INT 18
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: IN
42199: ST_TO_ADDR
// end ;
42200: LD_VAR 0 2
42204: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
42205: LD_INT 0
42207: PPUSH
42208: PPUSH
42209: PPUSH
// result := [ ] ;
42210: LD_ADDR_VAR 0 4
42214: PUSH
42215: EMPTY
42216: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
42217: LD_ADDR_VAR 0 5
42221: PUSH
42222: LD_VAR 0 2
42226: PPUSH
42227: LD_INT 21
42229: PUSH
42230: LD_INT 3
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PPUSH
42237: CALL_OW 70
42241: ST_TO_ADDR
// if not tmp then
42242: LD_VAR 0 5
42246: NOT
42247: IFFALSE 42251
// exit ;
42249: GO 42315
// if checkLink then
42251: LD_VAR 0 3
42255: IFFALSE 42305
// begin for i in tmp do
42257: LD_ADDR_VAR 0 6
42261: PUSH
42262: LD_VAR 0 5
42266: PUSH
42267: FOR_IN
42268: IFFALSE 42303
// if GetBase ( i ) <> base then
42270: LD_VAR 0 6
42274: PPUSH
42275: CALL_OW 274
42279: PUSH
42280: LD_VAR 0 1
42284: NONEQUAL
42285: IFFALSE 42301
// ComLinkToBase ( base , i ) ;
42287: LD_VAR 0 1
42291: PPUSH
42292: LD_VAR 0 6
42296: PPUSH
42297: CALL_OW 169
42301: GO 42267
42303: POP
42304: POP
// end ; result := tmp ;
42305: LD_ADDR_VAR 0 4
42309: PUSH
42310: LD_VAR 0 5
42314: ST_TO_ADDR
// end ;
42315: LD_VAR 0 4
42319: RET
// export function ComComplete ( units , b ) ; var i ; begin
42320: LD_INT 0
42322: PPUSH
42323: PPUSH
// if not units then
42324: LD_VAR 0 1
42328: NOT
42329: IFFALSE 42333
// exit ;
42331: GO 42423
// for i in units do
42333: LD_ADDR_VAR 0 4
42337: PUSH
42338: LD_VAR 0 1
42342: PUSH
42343: FOR_IN
42344: IFFALSE 42421
// if BuildingStatus ( b ) = bs_build then
42346: LD_VAR 0 2
42350: PPUSH
42351: CALL_OW 461
42355: PUSH
42356: LD_INT 1
42358: EQUAL
42359: IFFALSE 42419
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
42361: LD_VAR 0 4
42365: PPUSH
42366: LD_STRING h
42368: PUSH
42369: LD_VAR 0 2
42373: PPUSH
42374: CALL_OW 250
42378: PUSH
42379: LD_VAR 0 2
42383: PPUSH
42384: CALL_OW 251
42388: PUSH
42389: LD_VAR 0 2
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: LD_INT 0
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: PUSH
42412: EMPTY
42413: LIST
42414: PPUSH
42415: CALL_OW 446
42419: GO 42343
42421: POP
42422: POP
// end ;
42423: LD_VAR 0 3
42427: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42428: LD_INT 0
42430: PPUSH
42431: PPUSH
42432: PPUSH
42433: PPUSH
42434: PPUSH
42435: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
42436: LD_VAR 0 1
42440: NOT
42441: PUSH
42442: LD_VAR 0 1
42446: PPUSH
42447: CALL_OW 263
42451: PUSH
42452: LD_INT 2
42454: NONEQUAL
42455: OR
42456: IFFALSE 42460
// exit ;
42458: GO 42776
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42460: LD_ADDR_VAR 0 6
42464: PUSH
42465: LD_INT 22
42467: PUSH
42468: LD_VAR 0 1
42472: PPUSH
42473: CALL_OW 255
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 2
42484: PUSH
42485: LD_INT 30
42487: PUSH
42488: LD_INT 36
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 34
42497: PUSH
42498: LD_INT 31
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: LIST
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PPUSH
42514: CALL_OW 69
42518: ST_TO_ADDR
// if not tmp then
42519: LD_VAR 0 6
42523: NOT
42524: IFFALSE 42528
// exit ;
42526: GO 42776
// result := [ ] ;
42528: LD_ADDR_VAR 0 2
42532: PUSH
42533: EMPTY
42534: ST_TO_ADDR
// for i in tmp do
42535: LD_ADDR_VAR 0 3
42539: PUSH
42540: LD_VAR 0 6
42544: PUSH
42545: FOR_IN
42546: IFFALSE 42617
// begin t := UnitsInside ( i ) ;
42548: LD_ADDR_VAR 0 4
42552: PUSH
42553: LD_VAR 0 3
42557: PPUSH
42558: CALL_OW 313
42562: ST_TO_ADDR
// if t then
42563: LD_VAR 0 4
42567: IFFALSE 42615
// for j in t do
42569: LD_ADDR_VAR 0 7
42573: PUSH
42574: LD_VAR 0 4
42578: PUSH
42579: FOR_IN
42580: IFFALSE 42613
// result := Replace ( result , result + 1 , j ) ;
42582: LD_ADDR_VAR 0 2
42586: PUSH
42587: LD_VAR 0 2
42591: PPUSH
42592: LD_VAR 0 2
42596: PUSH
42597: LD_INT 1
42599: PLUS
42600: PPUSH
42601: LD_VAR 0 7
42605: PPUSH
42606: CALL_OW 1
42610: ST_TO_ADDR
42611: GO 42579
42613: POP
42614: POP
// end ;
42615: GO 42545
42617: POP
42618: POP
// if not result then
42619: LD_VAR 0 2
42623: NOT
42624: IFFALSE 42628
// exit ;
42626: GO 42776
// mech := result [ 1 ] ;
42628: LD_ADDR_VAR 0 5
42632: PUSH
42633: LD_VAR 0 2
42637: PUSH
42638: LD_INT 1
42640: ARRAY
42641: ST_TO_ADDR
// if result > 1 then
42642: LD_VAR 0 2
42646: PUSH
42647: LD_INT 1
42649: GREATER
42650: IFFALSE 42762
// begin for i = 2 to result do
42652: LD_ADDR_VAR 0 3
42656: PUSH
42657: DOUBLE
42658: LD_INT 2
42660: DEC
42661: ST_TO_ADDR
42662: LD_VAR 0 2
42666: PUSH
42667: FOR_TO
42668: IFFALSE 42760
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42670: LD_ADDR_VAR 0 4
42674: PUSH
42675: LD_VAR 0 2
42679: PUSH
42680: LD_VAR 0 3
42684: ARRAY
42685: PPUSH
42686: LD_INT 3
42688: PPUSH
42689: CALL_OW 259
42693: PUSH
42694: LD_VAR 0 2
42698: PUSH
42699: LD_VAR 0 3
42703: ARRAY
42704: PPUSH
42705: CALL_OW 432
42709: MINUS
42710: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42711: LD_VAR 0 4
42715: PUSH
42716: LD_VAR 0 5
42720: PPUSH
42721: LD_INT 3
42723: PPUSH
42724: CALL_OW 259
42728: PUSH
42729: LD_VAR 0 5
42733: PPUSH
42734: CALL_OW 432
42738: MINUS
42739: GREATEREQUAL
42740: IFFALSE 42758
// mech := result [ i ] ;
42742: LD_ADDR_VAR 0 5
42746: PUSH
42747: LD_VAR 0 2
42751: PUSH
42752: LD_VAR 0 3
42756: ARRAY
42757: ST_TO_ADDR
// end ;
42758: GO 42667
42760: POP
42761: POP
// end ; ComLinkTo ( vehicle , mech ) ;
42762: LD_VAR 0 1
42766: PPUSH
42767: LD_VAR 0 5
42771: PPUSH
42772: CALL_OW 135
// end ;
42776: LD_VAR 0 2
42780: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42781: LD_INT 0
42783: PPUSH
42784: PPUSH
42785: PPUSH
42786: PPUSH
42787: PPUSH
42788: PPUSH
42789: PPUSH
42790: PPUSH
42791: PPUSH
42792: PPUSH
42793: PPUSH
42794: PPUSH
42795: PPUSH
// result := [ ] ;
42796: LD_ADDR_VAR 0 7
42800: PUSH
42801: EMPTY
42802: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42803: LD_VAR 0 1
42807: PPUSH
42808: CALL_OW 266
42812: PUSH
42813: LD_INT 0
42815: PUSH
42816: LD_INT 1
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: IN
42823: NOT
42824: IFFALSE 42828
// exit ;
42826: GO 44462
// if name then
42828: LD_VAR 0 3
42832: IFFALSE 42848
// SetBName ( base_dep , name ) ;
42834: LD_VAR 0 1
42838: PPUSH
42839: LD_VAR 0 3
42843: PPUSH
42844: CALL_OW 500
// base := GetBase ( base_dep ) ;
42848: LD_ADDR_VAR 0 15
42852: PUSH
42853: LD_VAR 0 1
42857: PPUSH
42858: CALL_OW 274
42862: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42863: LD_ADDR_VAR 0 16
42867: PUSH
42868: LD_VAR 0 1
42872: PPUSH
42873: CALL_OW 255
42877: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42878: LD_ADDR_VAR 0 17
42882: PUSH
42883: LD_VAR 0 1
42887: PPUSH
42888: CALL_OW 248
42892: ST_TO_ADDR
// if sources then
42893: LD_VAR 0 5
42897: IFFALSE 42944
// for i = 1 to 3 do
42899: LD_ADDR_VAR 0 8
42903: PUSH
42904: DOUBLE
42905: LD_INT 1
42907: DEC
42908: ST_TO_ADDR
42909: LD_INT 3
42911: PUSH
42912: FOR_TO
42913: IFFALSE 42942
// AddResourceType ( base , i , sources [ i ] ) ;
42915: LD_VAR 0 15
42919: PPUSH
42920: LD_VAR 0 8
42924: PPUSH
42925: LD_VAR 0 5
42929: PUSH
42930: LD_VAR 0 8
42934: ARRAY
42935: PPUSH
42936: CALL_OW 276
42940: GO 42912
42942: POP
42943: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42944: LD_ADDR_VAR 0 18
42948: PUSH
42949: LD_VAR 0 15
42953: PPUSH
42954: LD_VAR 0 2
42958: PPUSH
42959: LD_INT 1
42961: PPUSH
42962: CALL 42205 0 3
42966: ST_TO_ADDR
// InitHc ;
42967: CALL_OW 19
// InitUc ;
42971: CALL_OW 18
// uc_side := side ;
42975: LD_ADDR_OWVAR 20
42979: PUSH
42980: LD_VAR 0 16
42984: ST_TO_ADDR
// uc_nation := nation ;
42985: LD_ADDR_OWVAR 21
42989: PUSH
42990: LD_VAR 0 17
42994: ST_TO_ADDR
// if buildings then
42995: LD_VAR 0 18
42999: IFFALSE 44321
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
43001: LD_ADDR_VAR 0 19
43005: PUSH
43006: LD_VAR 0 18
43010: PPUSH
43011: LD_INT 2
43013: PUSH
43014: LD_INT 30
43016: PUSH
43017: LD_INT 29
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 30
43026: PUSH
43027: LD_INT 30
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: LIST
43038: PPUSH
43039: CALL_OW 72
43043: ST_TO_ADDR
// if tmp then
43044: LD_VAR 0 19
43048: IFFALSE 43096
// for i in tmp do
43050: LD_ADDR_VAR 0 8
43054: PUSH
43055: LD_VAR 0 19
43059: PUSH
43060: FOR_IN
43061: IFFALSE 43094
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
43063: LD_VAR 0 8
43067: PPUSH
43068: CALL_OW 250
43072: PPUSH
43073: LD_VAR 0 8
43077: PPUSH
43078: CALL_OW 251
43082: PPUSH
43083: LD_VAR 0 16
43087: PPUSH
43088: CALL_OW 441
43092: GO 43060
43094: POP
43095: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
43096: LD_VAR 0 18
43100: PPUSH
43101: LD_INT 2
43103: PUSH
43104: LD_INT 30
43106: PUSH
43107: LD_INT 32
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 30
43116: PUSH
43117: LD_INT 33
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: LIST
43128: PPUSH
43129: CALL_OW 72
43133: IFFALSE 43221
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
43135: LD_ADDR_VAR 0 8
43139: PUSH
43140: LD_VAR 0 18
43144: PPUSH
43145: LD_INT 2
43147: PUSH
43148: LD_INT 30
43150: PUSH
43151: LD_INT 32
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 30
43160: PUSH
43161: LD_INT 33
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: LIST
43172: PPUSH
43173: CALL_OW 72
43177: PUSH
43178: FOR_IN
43179: IFFALSE 43219
// begin if not GetBWeapon ( i ) then
43181: LD_VAR 0 8
43185: PPUSH
43186: CALL_OW 269
43190: NOT
43191: IFFALSE 43217
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
43193: LD_VAR 0 8
43197: PPUSH
43198: LD_VAR 0 8
43202: PPUSH
43203: LD_VAR 0 2
43207: PPUSH
43208: CALL 44467 0 2
43212: PPUSH
43213: CALL_OW 431
// end ;
43217: GO 43178
43219: POP
43220: POP
// end ; for i = 1 to personel do
43221: LD_ADDR_VAR 0 8
43225: PUSH
43226: DOUBLE
43227: LD_INT 1
43229: DEC
43230: ST_TO_ADDR
43231: LD_VAR 0 6
43235: PUSH
43236: FOR_TO
43237: IFFALSE 44301
// begin if i > 4 then
43239: LD_VAR 0 8
43243: PUSH
43244: LD_INT 4
43246: GREATER
43247: IFFALSE 43251
// break ;
43249: GO 44301
// case i of 1 :
43251: LD_VAR 0 8
43255: PUSH
43256: LD_INT 1
43258: DOUBLE
43259: EQUAL
43260: IFTRUE 43264
43262: GO 43344
43264: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
43265: LD_ADDR_VAR 0 12
43269: PUSH
43270: LD_VAR 0 18
43274: PPUSH
43275: LD_INT 22
43277: PUSH
43278: LD_VAR 0 16
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 58
43289: PUSH
43290: EMPTY
43291: LIST
43292: PUSH
43293: LD_INT 2
43295: PUSH
43296: LD_INT 30
43298: PUSH
43299: LD_INT 32
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 30
43308: PUSH
43309: LD_INT 4
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 30
43318: PUSH
43319: LD_INT 5
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: LIST
43336: PPUSH
43337: CALL_OW 72
43341: ST_TO_ADDR
43342: GO 43566
43344: LD_INT 2
43346: DOUBLE
43347: EQUAL
43348: IFTRUE 43352
43350: GO 43414
43352: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
43353: LD_ADDR_VAR 0 12
43357: PUSH
43358: LD_VAR 0 18
43362: PPUSH
43363: LD_INT 22
43365: PUSH
43366: LD_VAR 0 16
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 2
43377: PUSH
43378: LD_INT 30
43380: PUSH
43381: LD_INT 0
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 30
43390: PUSH
43391: LD_INT 1
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: LIST
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PPUSH
43407: CALL_OW 72
43411: ST_TO_ADDR
43412: GO 43566
43414: LD_INT 3
43416: DOUBLE
43417: EQUAL
43418: IFTRUE 43422
43420: GO 43484
43422: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
43423: LD_ADDR_VAR 0 12
43427: PUSH
43428: LD_VAR 0 18
43432: PPUSH
43433: LD_INT 22
43435: PUSH
43436: LD_VAR 0 16
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 2
43447: PUSH
43448: LD_INT 30
43450: PUSH
43451: LD_INT 2
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 30
43460: PUSH
43461: LD_INT 3
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: LIST
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PPUSH
43477: CALL_OW 72
43481: ST_TO_ADDR
43482: GO 43566
43484: LD_INT 4
43486: DOUBLE
43487: EQUAL
43488: IFTRUE 43492
43490: GO 43565
43492: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43493: LD_ADDR_VAR 0 12
43497: PUSH
43498: LD_VAR 0 18
43502: PPUSH
43503: LD_INT 22
43505: PUSH
43506: LD_VAR 0 16
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 2
43517: PUSH
43518: LD_INT 30
43520: PUSH
43521: LD_INT 6
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 30
43530: PUSH
43531: LD_INT 7
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 30
43540: PUSH
43541: LD_INT 8
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PPUSH
43558: CALL_OW 72
43562: ST_TO_ADDR
43563: GO 43566
43565: POP
// if i = 1 then
43566: LD_VAR 0 8
43570: PUSH
43571: LD_INT 1
43573: EQUAL
43574: IFFALSE 43685
// begin tmp := [ ] ;
43576: LD_ADDR_VAR 0 19
43580: PUSH
43581: EMPTY
43582: ST_TO_ADDR
// for j in f do
43583: LD_ADDR_VAR 0 9
43587: PUSH
43588: LD_VAR 0 12
43592: PUSH
43593: FOR_IN
43594: IFFALSE 43667
// if GetBType ( j ) = b_bunker then
43596: LD_VAR 0 9
43600: PPUSH
43601: CALL_OW 266
43605: PUSH
43606: LD_INT 32
43608: EQUAL
43609: IFFALSE 43636
// tmp := Insert ( tmp , 1 , j ) else
43611: LD_ADDR_VAR 0 19
43615: PUSH
43616: LD_VAR 0 19
43620: PPUSH
43621: LD_INT 1
43623: PPUSH
43624: LD_VAR 0 9
43628: PPUSH
43629: CALL_OW 2
43633: ST_TO_ADDR
43634: GO 43665
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43636: LD_ADDR_VAR 0 19
43640: PUSH
43641: LD_VAR 0 19
43645: PPUSH
43646: LD_VAR 0 19
43650: PUSH
43651: LD_INT 1
43653: PLUS
43654: PPUSH
43655: LD_VAR 0 9
43659: PPUSH
43660: CALL_OW 2
43664: ST_TO_ADDR
43665: GO 43593
43667: POP
43668: POP
// if tmp then
43669: LD_VAR 0 19
43673: IFFALSE 43685
// f := tmp ;
43675: LD_ADDR_VAR 0 12
43679: PUSH
43680: LD_VAR 0 19
43684: ST_TO_ADDR
// end ; x := personel [ i ] ;
43685: LD_ADDR_VAR 0 13
43689: PUSH
43690: LD_VAR 0 6
43694: PUSH
43695: LD_VAR 0 8
43699: ARRAY
43700: ST_TO_ADDR
// if x = - 1 then
43701: LD_VAR 0 13
43705: PUSH
43706: LD_INT 1
43708: NEG
43709: EQUAL
43710: IFFALSE 43919
// begin for j in f do
43712: LD_ADDR_VAR 0 9
43716: PUSH
43717: LD_VAR 0 12
43721: PUSH
43722: FOR_IN
43723: IFFALSE 43915
// repeat InitHc ;
43725: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43729: LD_VAR 0 9
43733: PPUSH
43734: CALL_OW 266
43738: PUSH
43739: LD_INT 5
43741: EQUAL
43742: IFFALSE 43812
// begin if UnitsInside ( j ) < 3 then
43744: LD_VAR 0 9
43748: PPUSH
43749: CALL_OW 313
43753: PUSH
43754: LD_INT 3
43756: LESS
43757: IFFALSE 43793
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43759: LD_INT 0
43761: PPUSH
43762: LD_INT 5
43764: PUSH
43765: LD_INT 8
43767: PUSH
43768: LD_INT 9
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: LIST
43775: PUSH
43776: LD_VAR 0 17
43780: ARRAY
43781: PPUSH
43782: LD_VAR 0 4
43786: PPUSH
43787: CALL_OW 380
43791: GO 43810
// PrepareHuman ( false , i , skill ) ;
43793: LD_INT 0
43795: PPUSH
43796: LD_VAR 0 8
43800: PPUSH
43801: LD_VAR 0 4
43805: PPUSH
43806: CALL_OW 380
// end else
43810: GO 43829
// PrepareHuman ( false , i , skill ) ;
43812: LD_INT 0
43814: PPUSH
43815: LD_VAR 0 8
43819: PPUSH
43820: LD_VAR 0 4
43824: PPUSH
43825: CALL_OW 380
// un := CreateHuman ;
43829: LD_ADDR_VAR 0 14
43833: PUSH
43834: CALL_OW 44
43838: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43839: LD_ADDR_VAR 0 7
43843: PUSH
43844: LD_VAR 0 7
43848: PPUSH
43849: LD_INT 1
43851: PPUSH
43852: LD_VAR 0 14
43856: PPUSH
43857: CALL_OW 2
43861: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43862: LD_VAR 0 14
43866: PPUSH
43867: LD_VAR 0 9
43871: PPUSH
43872: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43876: LD_VAR 0 9
43880: PPUSH
43881: CALL_OW 313
43885: PUSH
43886: LD_INT 6
43888: EQUAL
43889: PUSH
43890: LD_VAR 0 9
43894: PPUSH
43895: CALL_OW 266
43899: PUSH
43900: LD_INT 32
43902: PUSH
43903: LD_INT 31
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: IN
43910: OR
43911: IFFALSE 43725
43913: GO 43722
43915: POP
43916: POP
// end else
43917: GO 44299
// for j = 1 to x do
43919: LD_ADDR_VAR 0 9
43923: PUSH
43924: DOUBLE
43925: LD_INT 1
43927: DEC
43928: ST_TO_ADDR
43929: LD_VAR 0 13
43933: PUSH
43934: FOR_TO
43935: IFFALSE 44297
// begin InitHc ;
43937: CALL_OW 19
// if not f then
43941: LD_VAR 0 12
43945: NOT
43946: IFFALSE 44035
// begin PrepareHuman ( false , i , skill ) ;
43948: LD_INT 0
43950: PPUSH
43951: LD_VAR 0 8
43955: PPUSH
43956: LD_VAR 0 4
43960: PPUSH
43961: CALL_OW 380
// un := CreateHuman ;
43965: LD_ADDR_VAR 0 14
43969: PUSH
43970: CALL_OW 44
43974: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43975: LD_ADDR_VAR 0 7
43979: PUSH
43980: LD_VAR 0 7
43984: PPUSH
43985: LD_INT 1
43987: PPUSH
43988: LD_VAR 0 14
43992: PPUSH
43993: CALL_OW 2
43997: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43998: LD_VAR 0 14
44002: PPUSH
44003: LD_VAR 0 1
44007: PPUSH
44008: CALL_OW 250
44012: PPUSH
44013: LD_VAR 0 1
44017: PPUSH
44018: CALL_OW 251
44022: PPUSH
44023: LD_INT 10
44025: PPUSH
44026: LD_INT 0
44028: PPUSH
44029: CALL_OW 50
// continue ;
44033: GO 43934
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
44035: LD_VAR 0 12
44039: PUSH
44040: LD_INT 1
44042: ARRAY
44043: PPUSH
44044: CALL_OW 313
44048: PUSH
44049: LD_VAR 0 12
44053: PUSH
44054: LD_INT 1
44056: ARRAY
44057: PPUSH
44058: CALL_OW 266
44062: PUSH
44063: LD_INT 32
44065: PUSH
44066: LD_INT 31
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: IN
44073: AND
44074: PUSH
44075: LD_VAR 0 12
44079: PUSH
44080: LD_INT 1
44082: ARRAY
44083: PPUSH
44084: CALL_OW 313
44088: PUSH
44089: LD_INT 6
44091: EQUAL
44092: OR
44093: IFFALSE 44113
// f := Delete ( f , 1 ) ;
44095: LD_ADDR_VAR 0 12
44099: PUSH
44100: LD_VAR 0 12
44104: PPUSH
44105: LD_INT 1
44107: PPUSH
44108: CALL_OW 3
44112: ST_TO_ADDR
// if not f then
44113: LD_VAR 0 12
44117: NOT
44118: IFFALSE 44136
// begin x := x + 2 ;
44120: LD_ADDR_VAR 0 13
44124: PUSH
44125: LD_VAR 0 13
44129: PUSH
44130: LD_INT 2
44132: PLUS
44133: ST_TO_ADDR
// continue ;
44134: GO 43934
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
44136: LD_VAR 0 12
44140: PUSH
44141: LD_INT 1
44143: ARRAY
44144: PPUSH
44145: CALL_OW 266
44149: PUSH
44150: LD_INT 5
44152: EQUAL
44153: IFFALSE 44227
// begin if UnitsInside ( f [ 1 ] ) < 3 then
44155: LD_VAR 0 12
44159: PUSH
44160: LD_INT 1
44162: ARRAY
44163: PPUSH
44164: CALL_OW 313
44168: PUSH
44169: LD_INT 3
44171: LESS
44172: IFFALSE 44208
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44174: LD_INT 0
44176: PPUSH
44177: LD_INT 5
44179: PUSH
44180: LD_INT 8
44182: PUSH
44183: LD_INT 9
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: LIST
44190: PUSH
44191: LD_VAR 0 17
44195: ARRAY
44196: PPUSH
44197: LD_VAR 0 4
44201: PPUSH
44202: CALL_OW 380
44206: GO 44225
// PrepareHuman ( false , i , skill ) ;
44208: LD_INT 0
44210: PPUSH
44211: LD_VAR 0 8
44215: PPUSH
44216: LD_VAR 0 4
44220: PPUSH
44221: CALL_OW 380
// end else
44225: GO 44244
// PrepareHuman ( false , i , skill ) ;
44227: LD_INT 0
44229: PPUSH
44230: LD_VAR 0 8
44234: PPUSH
44235: LD_VAR 0 4
44239: PPUSH
44240: CALL_OW 380
// un := CreateHuman ;
44244: LD_ADDR_VAR 0 14
44248: PUSH
44249: CALL_OW 44
44253: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44254: LD_ADDR_VAR 0 7
44258: PUSH
44259: LD_VAR 0 7
44263: PPUSH
44264: LD_INT 1
44266: PPUSH
44267: LD_VAR 0 14
44271: PPUSH
44272: CALL_OW 2
44276: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
44277: LD_VAR 0 14
44281: PPUSH
44282: LD_VAR 0 12
44286: PUSH
44287: LD_INT 1
44289: ARRAY
44290: PPUSH
44291: CALL_OW 52
// end ;
44295: GO 43934
44297: POP
44298: POP
// end ;
44299: GO 43236
44301: POP
44302: POP
// result := result ^ buildings ;
44303: LD_ADDR_VAR 0 7
44307: PUSH
44308: LD_VAR 0 7
44312: PUSH
44313: LD_VAR 0 18
44317: ADD
44318: ST_TO_ADDR
// end else
44319: GO 44462
// begin for i = 1 to personel do
44321: LD_ADDR_VAR 0 8
44325: PUSH
44326: DOUBLE
44327: LD_INT 1
44329: DEC
44330: ST_TO_ADDR
44331: LD_VAR 0 6
44335: PUSH
44336: FOR_TO
44337: IFFALSE 44460
// begin if i > 4 then
44339: LD_VAR 0 8
44343: PUSH
44344: LD_INT 4
44346: GREATER
44347: IFFALSE 44351
// break ;
44349: GO 44460
// x := personel [ i ] ;
44351: LD_ADDR_VAR 0 13
44355: PUSH
44356: LD_VAR 0 6
44360: PUSH
44361: LD_VAR 0 8
44365: ARRAY
44366: ST_TO_ADDR
// if x = - 1 then
44367: LD_VAR 0 13
44371: PUSH
44372: LD_INT 1
44374: NEG
44375: EQUAL
44376: IFFALSE 44380
// continue ;
44378: GO 44336
// PrepareHuman ( false , i , skill ) ;
44380: LD_INT 0
44382: PPUSH
44383: LD_VAR 0 8
44387: PPUSH
44388: LD_VAR 0 4
44392: PPUSH
44393: CALL_OW 380
// un := CreateHuman ;
44397: LD_ADDR_VAR 0 14
44401: PUSH
44402: CALL_OW 44
44406: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44407: LD_VAR 0 14
44411: PPUSH
44412: LD_VAR 0 1
44416: PPUSH
44417: CALL_OW 250
44421: PPUSH
44422: LD_VAR 0 1
44426: PPUSH
44427: CALL_OW 251
44431: PPUSH
44432: LD_INT 10
44434: PPUSH
44435: LD_INT 0
44437: PPUSH
44438: CALL_OW 50
// result := result ^ un ;
44442: LD_ADDR_VAR 0 7
44446: PUSH
44447: LD_VAR 0 7
44451: PUSH
44452: LD_VAR 0 14
44456: ADD
44457: ST_TO_ADDR
// end ;
44458: GO 44336
44460: POP
44461: POP
// end ; end ;
44462: LD_VAR 0 7
44466: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44467: LD_INT 0
44469: PPUSH
44470: PPUSH
44471: PPUSH
44472: PPUSH
44473: PPUSH
44474: PPUSH
44475: PPUSH
44476: PPUSH
44477: PPUSH
44478: PPUSH
44479: PPUSH
44480: PPUSH
44481: PPUSH
44482: PPUSH
44483: PPUSH
44484: PPUSH
// result := false ;
44485: LD_ADDR_VAR 0 3
44489: PUSH
44490: LD_INT 0
44492: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44493: LD_VAR 0 1
44497: NOT
44498: PUSH
44499: LD_VAR 0 1
44503: PPUSH
44504: CALL_OW 266
44508: PUSH
44509: LD_INT 32
44511: PUSH
44512: LD_INT 33
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: IN
44519: NOT
44520: OR
44521: IFFALSE 44525
// exit ;
44523: GO 45634
// nat := GetNation ( tower ) ;
44525: LD_ADDR_VAR 0 12
44529: PUSH
44530: LD_VAR 0 1
44534: PPUSH
44535: CALL_OW 248
44539: ST_TO_ADDR
// side := GetSide ( tower ) ;
44540: LD_ADDR_VAR 0 16
44544: PUSH
44545: LD_VAR 0 1
44549: PPUSH
44550: CALL_OW 255
44554: ST_TO_ADDR
// x := GetX ( tower ) ;
44555: LD_ADDR_VAR 0 10
44559: PUSH
44560: LD_VAR 0 1
44564: PPUSH
44565: CALL_OW 250
44569: ST_TO_ADDR
// y := GetY ( tower ) ;
44570: LD_ADDR_VAR 0 11
44574: PUSH
44575: LD_VAR 0 1
44579: PPUSH
44580: CALL_OW 251
44584: ST_TO_ADDR
// if not x or not y then
44585: LD_VAR 0 10
44589: NOT
44590: PUSH
44591: LD_VAR 0 11
44595: NOT
44596: OR
44597: IFFALSE 44601
// exit ;
44599: GO 45634
// weapon := 0 ;
44601: LD_ADDR_VAR 0 18
44605: PUSH
44606: LD_INT 0
44608: ST_TO_ADDR
// fac_list := [ ] ;
44609: LD_ADDR_VAR 0 17
44613: PUSH
44614: EMPTY
44615: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44616: LD_ADDR_VAR 0 6
44620: PUSH
44621: LD_VAR 0 1
44625: PPUSH
44626: CALL_OW 274
44630: PPUSH
44631: LD_VAR 0 2
44635: PPUSH
44636: LD_INT 0
44638: PPUSH
44639: CALL 42205 0 3
44643: PPUSH
44644: LD_INT 30
44646: PUSH
44647: LD_INT 3
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PPUSH
44654: CALL_OW 72
44658: ST_TO_ADDR
// if not factories then
44659: LD_VAR 0 6
44663: NOT
44664: IFFALSE 44668
// exit ;
44666: GO 45634
// for i in factories do
44668: LD_ADDR_VAR 0 8
44672: PUSH
44673: LD_VAR 0 6
44677: PUSH
44678: FOR_IN
44679: IFFALSE 44704
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44681: LD_ADDR_VAR 0 17
44685: PUSH
44686: LD_VAR 0 17
44690: PUSH
44691: LD_VAR 0 8
44695: PPUSH
44696: CALL_OW 478
44700: UNION
44701: ST_TO_ADDR
44702: GO 44678
44704: POP
44705: POP
// if not fac_list then
44706: LD_VAR 0 17
44710: NOT
44711: IFFALSE 44715
// exit ;
44713: GO 45634
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44715: LD_ADDR_VAR 0 5
44719: PUSH
44720: LD_INT 4
44722: PUSH
44723: LD_INT 5
44725: PUSH
44726: LD_INT 9
44728: PUSH
44729: LD_INT 10
44731: PUSH
44732: LD_INT 6
44734: PUSH
44735: LD_INT 7
44737: PUSH
44738: LD_INT 11
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 27
44752: PUSH
44753: LD_INT 28
44755: PUSH
44756: LD_INT 26
44758: PUSH
44759: LD_INT 30
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 43
44770: PUSH
44771: LD_INT 44
44773: PUSH
44774: LD_INT 46
44776: PUSH
44777: LD_INT 45
44779: PUSH
44780: LD_INT 47
44782: PUSH
44783: LD_INT 49
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: LIST
44798: PUSH
44799: LD_VAR 0 12
44803: ARRAY
44804: ST_TO_ADDR
// list := list isect fac_list ;
44805: LD_ADDR_VAR 0 5
44809: PUSH
44810: LD_VAR 0 5
44814: PUSH
44815: LD_VAR 0 17
44819: ISECT
44820: ST_TO_ADDR
// if not list then
44821: LD_VAR 0 5
44825: NOT
44826: IFFALSE 44830
// exit ;
44828: GO 45634
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44830: LD_VAR 0 12
44834: PUSH
44835: LD_INT 3
44837: EQUAL
44838: PUSH
44839: LD_INT 49
44841: PUSH
44842: LD_VAR 0 5
44846: IN
44847: AND
44848: PUSH
44849: LD_INT 31
44851: PPUSH
44852: LD_VAR 0 16
44856: PPUSH
44857: CALL_OW 321
44861: PUSH
44862: LD_INT 2
44864: EQUAL
44865: AND
44866: IFFALSE 44926
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44868: LD_INT 22
44870: PUSH
44871: LD_VAR 0 16
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 35
44882: PUSH
44883: LD_INT 49
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 91
44892: PUSH
44893: LD_VAR 0 1
44897: PUSH
44898: LD_INT 10
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: LIST
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: LIST
44910: PPUSH
44911: CALL_OW 69
44915: NOT
44916: IFFALSE 44926
// weapon := ru_time_lapser ;
44918: LD_ADDR_VAR 0 18
44922: PUSH
44923: LD_INT 49
44925: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44926: LD_VAR 0 12
44930: PUSH
44931: LD_INT 1
44933: PUSH
44934: LD_INT 2
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: IN
44941: PUSH
44942: LD_INT 11
44944: PUSH
44945: LD_VAR 0 5
44949: IN
44950: PUSH
44951: LD_INT 30
44953: PUSH
44954: LD_VAR 0 5
44958: IN
44959: OR
44960: AND
44961: PUSH
44962: LD_INT 6
44964: PPUSH
44965: LD_VAR 0 16
44969: PPUSH
44970: CALL_OW 321
44974: PUSH
44975: LD_INT 2
44977: EQUAL
44978: AND
44979: IFFALSE 45144
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44981: LD_INT 22
44983: PUSH
44984: LD_VAR 0 16
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 2
44995: PUSH
44996: LD_INT 35
44998: PUSH
44999: LD_INT 11
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 35
45008: PUSH
45009: LD_INT 30
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 91
45023: PUSH
45024: LD_VAR 0 1
45028: PUSH
45029: LD_INT 18
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: LIST
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: LIST
45041: PPUSH
45042: CALL_OW 69
45046: NOT
45047: PUSH
45048: LD_INT 22
45050: PUSH
45051: LD_VAR 0 16
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 2
45062: PUSH
45063: LD_INT 30
45065: PUSH
45066: LD_INT 32
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 30
45075: PUSH
45076: LD_INT 33
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 91
45090: PUSH
45091: LD_VAR 0 1
45095: PUSH
45096: LD_INT 12
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: LIST
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: LIST
45108: PUSH
45109: EMPTY
45110: LIST
45111: PPUSH
45112: CALL_OW 69
45116: PUSH
45117: LD_INT 2
45119: GREATER
45120: AND
45121: IFFALSE 45144
// weapon := [ us_radar , ar_radar ] [ nat ] ;
45123: LD_ADDR_VAR 0 18
45127: PUSH
45128: LD_INT 11
45130: PUSH
45131: LD_INT 30
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_VAR 0 12
45142: ARRAY
45143: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
45144: LD_VAR 0 18
45148: NOT
45149: PUSH
45150: LD_INT 40
45152: PPUSH
45153: LD_VAR 0 16
45157: PPUSH
45158: CALL_OW 321
45162: PUSH
45163: LD_INT 2
45165: EQUAL
45166: AND
45167: PUSH
45168: LD_INT 7
45170: PUSH
45171: LD_VAR 0 5
45175: IN
45176: PUSH
45177: LD_INT 28
45179: PUSH
45180: LD_VAR 0 5
45184: IN
45185: OR
45186: PUSH
45187: LD_INT 45
45189: PUSH
45190: LD_VAR 0 5
45194: IN
45195: OR
45196: AND
45197: IFFALSE 45451
// begin hex := GetHexInfo ( x , y ) ;
45199: LD_ADDR_VAR 0 4
45203: PUSH
45204: LD_VAR 0 10
45208: PPUSH
45209: LD_VAR 0 11
45213: PPUSH
45214: CALL_OW 546
45218: ST_TO_ADDR
// if hex [ 1 ] then
45219: LD_VAR 0 4
45223: PUSH
45224: LD_INT 1
45226: ARRAY
45227: IFFALSE 45231
// exit ;
45229: GO 45634
// height := hex [ 2 ] ;
45231: LD_ADDR_VAR 0 15
45235: PUSH
45236: LD_VAR 0 4
45240: PUSH
45241: LD_INT 2
45243: ARRAY
45244: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
45245: LD_ADDR_VAR 0 14
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: LD_INT 2
45255: PUSH
45256: LD_INT 3
45258: PUSH
45259: LD_INT 5
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: ST_TO_ADDR
// for i in tmp do
45268: LD_ADDR_VAR 0 8
45272: PUSH
45273: LD_VAR 0 14
45277: PUSH
45278: FOR_IN
45279: IFFALSE 45449
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
45281: LD_ADDR_VAR 0 9
45285: PUSH
45286: LD_VAR 0 10
45290: PPUSH
45291: LD_VAR 0 8
45295: PPUSH
45296: LD_INT 5
45298: PPUSH
45299: CALL_OW 272
45303: PUSH
45304: LD_VAR 0 11
45308: PPUSH
45309: LD_VAR 0 8
45313: PPUSH
45314: LD_INT 5
45316: PPUSH
45317: CALL_OW 273
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
45326: LD_VAR 0 9
45330: PUSH
45331: LD_INT 1
45333: ARRAY
45334: PPUSH
45335: LD_VAR 0 9
45339: PUSH
45340: LD_INT 2
45342: ARRAY
45343: PPUSH
45344: CALL_OW 488
45348: IFFALSE 45447
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
45350: LD_ADDR_VAR 0 4
45354: PUSH
45355: LD_VAR 0 9
45359: PUSH
45360: LD_INT 1
45362: ARRAY
45363: PPUSH
45364: LD_VAR 0 9
45368: PUSH
45369: LD_INT 2
45371: ARRAY
45372: PPUSH
45373: CALL_OW 546
45377: ST_TO_ADDR
// if hex [ 1 ] then
45378: LD_VAR 0 4
45382: PUSH
45383: LD_INT 1
45385: ARRAY
45386: IFFALSE 45390
// continue ;
45388: GO 45278
// h := hex [ 2 ] ;
45390: LD_ADDR_VAR 0 13
45394: PUSH
45395: LD_VAR 0 4
45399: PUSH
45400: LD_INT 2
45402: ARRAY
45403: ST_TO_ADDR
// if h + 7 < height then
45404: LD_VAR 0 13
45408: PUSH
45409: LD_INT 7
45411: PLUS
45412: PUSH
45413: LD_VAR 0 15
45417: LESS
45418: IFFALSE 45447
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45420: LD_ADDR_VAR 0 18
45424: PUSH
45425: LD_INT 7
45427: PUSH
45428: LD_INT 28
45430: PUSH
45431: LD_INT 45
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: LIST
45438: PUSH
45439: LD_VAR 0 12
45443: ARRAY
45444: ST_TO_ADDR
// break ;
45445: GO 45449
// end ; end ; end ;
45447: GO 45278
45449: POP
45450: POP
// end ; if not weapon then
45451: LD_VAR 0 18
45455: NOT
45456: IFFALSE 45516
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45458: LD_ADDR_VAR 0 5
45462: PUSH
45463: LD_VAR 0 5
45467: PUSH
45468: LD_INT 11
45470: PUSH
45471: LD_INT 30
45473: PUSH
45474: LD_INT 49
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: LIST
45481: DIFF
45482: ST_TO_ADDR
// if not list then
45483: LD_VAR 0 5
45487: NOT
45488: IFFALSE 45492
// exit ;
45490: GO 45634
// weapon := list [ rand ( 1 , list ) ] ;
45492: LD_ADDR_VAR 0 18
45496: PUSH
45497: LD_VAR 0 5
45501: PUSH
45502: LD_INT 1
45504: PPUSH
45505: LD_VAR 0 5
45509: PPUSH
45510: CALL_OW 12
45514: ARRAY
45515: ST_TO_ADDR
// end ; if weapon then
45516: LD_VAR 0 18
45520: IFFALSE 45634
// begin tmp := CostOfWeapon ( weapon ) ;
45522: LD_ADDR_VAR 0 14
45526: PUSH
45527: LD_VAR 0 18
45531: PPUSH
45532: CALL_OW 451
45536: ST_TO_ADDR
// j := GetBase ( tower ) ;
45537: LD_ADDR_VAR 0 9
45541: PUSH
45542: LD_VAR 0 1
45546: PPUSH
45547: CALL_OW 274
45551: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45552: LD_VAR 0 9
45556: PPUSH
45557: LD_INT 1
45559: PPUSH
45560: CALL_OW 275
45564: PUSH
45565: LD_VAR 0 14
45569: PUSH
45570: LD_INT 1
45572: ARRAY
45573: GREATEREQUAL
45574: PUSH
45575: LD_VAR 0 9
45579: PPUSH
45580: LD_INT 2
45582: PPUSH
45583: CALL_OW 275
45587: PUSH
45588: LD_VAR 0 14
45592: PUSH
45593: LD_INT 2
45595: ARRAY
45596: GREATEREQUAL
45597: AND
45598: PUSH
45599: LD_VAR 0 9
45603: PPUSH
45604: LD_INT 3
45606: PPUSH
45607: CALL_OW 275
45611: PUSH
45612: LD_VAR 0 14
45616: PUSH
45617: LD_INT 3
45619: ARRAY
45620: GREATEREQUAL
45621: AND
45622: IFFALSE 45634
// result := weapon ;
45624: LD_ADDR_VAR 0 3
45628: PUSH
45629: LD_VAR 0 18
45633: ST_TO_ADDR
// end ; end ;
45634: LD_VAR 0 3
45638: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45639: LD_INT 0
45641: PPUSH
45642: PPUSH
// result := true ;
45643: LD_ADDR_VAR 0 3
45647: PUSH
45648: LD_INT 1
45650: ST_TO_ADDR
// if array1 = array2 then
45651: LD_VAR 0 1
45655: PUSH
45656: LD_VAR 0 2
45660: EQUAL
45661: IFFALSE 45721
// begin for i = 1 to array1 do
45663: LD_ADDR_VAR 0 4
45667: PUSH
45668: DOUBLE
45669: LD_INT 1
45671: DEC
45672: ST_TO_ADDR
45673: LD_VAR 0 1
45677: PUSH
45678: FOR_TO
45679: IFFALSE 45717
// if array1 [ i ] <> array2 [ i ] then
45681: LD_VAR 0 1
45685: PUSH
45686: LD_VAR 0 4
45690: ARRAY
45691: PUSH
45692: LD_VAR 0 2
45696: PUSH
45697: LD_VAR 0 4
45701: ARRAY
45702: NONEQUAL
45703: IFFALSE 45715
// begin result := false ;
45705: LD_ADDR_VAR 0 3
45709: PUSH
45710: LD_INT 0
45712: ST_TO_ADDR
// break ;
45713: GO 45717
// end ;
45715: GO 45678
45717: POP
45718: POP
// end else
45719: GO 45729
// result := false ;
45721: LD_ADDR_VAR 0 3
45725: PUSH
45726: LD_INT 0
45728: ST_TO_ADDR
// end ;
45729: LD_VAR 0 3
45733: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45734: LD_INT 0
45736: PPUSH
45737: PPUSH
// if not array1 or not array2 then
45738: LD_VAR 0 1
45742: NOT
45743: PUSH
45744: LD_VAR 0 2
45748: NOT
45749: OR
45750: IFFALSE 45754
// exit ;
45752: GO 45818
// result := true ;
45754: LD_ADDR_VAR 0 3
45758: PUSH
45759: LD_INT 1
45761: ST_TO_ADDR
// for i = 1 to array1 do
45762: LD_ADDR_VAR 0 4
45766: PUSH
45767: DOUBLE
45768: LD_INT 1
45770: DEC
45771: ST_TO_ADDR
45772: LD_VAR 0 1
45776: PUSH
45777: FOR_TO
45778: IFFALSE 45816
// if array1 [ i ] <> array2 [ i ] then
45780: LD_VAR 0 1
45784: PUSH
45785: LD_VAR 0 4
45789: ARRAY
45790: PUSH
45791: LD_VAR 0 2
45795: PUSH
45796: LD_VAR 0 4
45800: ARRAY
45801: NONEQUAL
45802: IFFALSE 45814
// begin result := false ;
45804: LD_ADDR_VAR 0 3
45808: PUSH
45809: LD_INT 0
45811: ST_TO_ADDR
// break ;
45812: GO 45816
// end ;
45814: GO 45777
45816: POP
45817: POP
// end ;
45818: LD_VAR 0 3
45822: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45823: LD_INT 0
45825: PPUSH
45826: PPUSH
45827: PPUSH
// pom := GetBase ( fac ) ;
45828: LD_ADDR_VAR 0 5
45832: PUSH
45833: LD_VAR 0 1
45837: PPUSH
45838: CALL_OW 274
45842: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45843: LD_ADDR_VAR 0 4
45847: PUSH
45848: LD_VAR 0 2
45852: PUSH
45853: LD_INT 1
45855: ARRAY
45856: PPUSH
45857: LD_VAR 0 2
45861: PUSH
45862: LD_INT 2
45864: ARRAY
45865: PPUSH
45866: LD_VAR 0 2
45870: PUSH
45871: LD_INT 3
45873: ARRAY
45874: PPUSH
45875: LD_VAR 0 2
45879: PUSH
45880: LD_INT 4
45882: ARRAY
45883: PPUSH
45884: CALL_OW 449
45888: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45889: LD_ADDR_VAR 0 3
45893: PUSH
45894: LD_VAR 0 5
45898: PPUSH
45899: LD_INT 1
45901: PPUSH
45902: CALL_OW 275
45906: PUSH
45907: LD_VAR 0 4
45911: PUSH
45912: LD_INT 1
45914: ARRAY
45915: GREATEREQUAL
45916: PUSH
45917: LD_VAR 0 5
45921: PPUSH
45922: LD_INT 2
45924: PPUSH
45925: CALL_OW 275
45929: PUSH
45930: LD_VAR 0 4
45934: PUSH
45935: LD_INT 2
45937: ARRAY
45938: GREATEREQUAL
45939: AND
45940: PUSH
45941: LD_VAR 0 5
45945: PPUSH
45946: LD_INT 3
45948: PPUSH
45949: CALL_OW 275
45953: PUSH
45954: LD_VAR 0 4
45958: PUSH
45959: LD_INT 3
45961: ARRAY
45962: GREATEREQUAL
45963: AND
45964: ST_TO_ADDR
// end ;
45965: LD_VAR 0 3
45969: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45970: LD_INT 0
45972: PPUSH
45973: PPUSH
45974: PPUSH
45975: PPUSH
// pom := GetBase ( building ) ;
45976: LD_ADDR_VAR 0 3
45980: PUSH
45981: LD_VAR 0 1
45985: PPUSH
45986: CALL_OW 274
45990: ST_TO_ADDR
// if not pom then
45991: LD_VAR 0 3
45995: NOT
45996: IFFALSE 46000
// exit ;
45998: GO 46170
// btype := GetBType ( building ) ;
46000: LD_ADDR_VAR 0 5
46004: PUSH
46005: LD_VAR 0 1
46009: PPUSH
46010: CALL_OW 266
46014: ST_TO_ADDR
// if btype = b_armoury then
46015: LD_VAR 0 5
46019: PUSH
46020: LD_INT 4
46022: EQUAL
46023: IFFALSE 46033
// btype := b_barracks ;
46025: LD_ADDR_VAR 0 5
46029: PUSH
46030: LD_INT 5
46032: ST_TO_ADDR
// if btype = b_depot then
46033: LD_VAR 0 5
46037: PUSH
46038: LD_INT 0
46040: EQUAL
46041: IFFALSE 46051
// btype := b_warehouse ;
46043: LD_ADDR_VAR 0 5
46047: PUSH
46048: LD_INT 1
46050: ST_TO_ADDR
// if btype = b_workshop then
46051: LD_VAR 0 5
46055: PUSH
46056: LD_INT 2
46058: EQUAL
46059: IFFALSE 46069
// btype := b_factory ;
46061: LD_ADDR_VAR 0 5
46065: PUSH
46066: LD_INT 3
46068: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46069: LD_ADDR_VAR 0 4
46073: PUSH
46074: LD_VAR 0 5
46078: PPUSH
46079: LD_VAR 0 1
46083: PPUSH
46084: CALL_OW 248
46088: PPUSH
46089: CALL_OW 450
46093: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46094: LD_ADDR_VAR 0 2
46098: PUSH
46099: LD_VAR 0 3
46103: PPUSH
46104: LD_INT 1
46106: PPUSH
46107: CALL_OW 275
46111: PUSH
46112: LD_VAR 0 4
46116: PUSH
46117: LD_INT 1
46119: ARRAY
46120: GREATEREQUAL
46121: PUSH
46122: LD_VAR 0 3
46126: PPUSH
46127: LD_INT 2
46129: PPUSH
46130: CALL_OW 275
46134: PUSH
46135: LD_VAR 0 4
46139: PUSH
46140: LD_INT 2
46142: ARRAY
46143: GREATEREQUAL
46144: AND
46145: PUSH
46146: LD_VAR 0 3
46150: PPUSH
46151: LD_INT 3
46153: PPUSH
46154: CALL_OW 275
46158: PUSH
46159: LD_VAR 0 4
46163: PUSH
46164: LD_INT 3
46166: ARRAY
46167: GREATEREQUAL
46168: AND
46169: ST_TO_ADDR
// end ;
46170: LD_VAR 0 2
46174: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
46175: LD_INT 0
46177: PPUSH
46178: PPUSH
46179: PPUSH
// pom := GetBase ( building ) ;
46180: LD_ADDR_VAR 0 4
46184: PUSH
46185: LD_VAR 0 1
46189: PPUSH
46190: CALL_OW 274
46194: ST_TO_ADDR
// if not pom then
46195: LD_VAR 0 4
46199: NOT
46200: IFFALSE 46204
// exit ;
46202: GO 46305
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46204: LD_ADDR_VAR 0 5
46208: PUSH
46209: LD_VAR 0 2
46213: PPUSH
46214: LD_VAR 0 1
46218: PPUSH
46219: CALL_OW 248
46223: PPUSH
46224: CALL_OW 450
46228: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46229: LD_ADDR_VAR 0 3
46233: PUSH
46234: LD_VAR 0 4
46238: PPUSH
46239: LD_INT 1
46241: PPUSH
46242: CALL_OW 275
46246: PUSH
46247: LD_VAR 0 5
46251: PUSH
46252: LD_INT 1
46254: ARRAY
46255: GREATEREQUAL
46256: PUSH
46257: LD_VAR 0 4
46261: PPUSH
46262: LD_INT 2
46264: PPUSH
46265: CALL_OW 275
46269: PUSH
46270: LD_VAR 0 5
46274: PUSH
46275: LD_INT 2
46277: ARRAY
46278: GREATEREQUAL
46279: AND
46280: PUSH
46281: LD_VAR 0 4
46285: PPUSH
46286: LD_INT 3
46288: PPUSH
46289: CALL_OW 275
46293: PUSH
46294: LD_VAR 0 5
46298: PUSH
46299: LD_INT 3
46301: ARRAY
46302: GREATEREQUAL
46303: AND
46304: ST_TO_ADDR
// end ;
46305: LD_VAR 0 3
46309: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
46310: LD_INT 0
46312: PPUSH
46313: PPUSH
46314: PPUSH
46315: PPUSH
46316: PPUSH
46317: PPUSH
46318: PPUSH
46319: PPUSH
46320: PPUSH
46321: PPUSH
46322: PPUSH
// result := false ;
46323: LD_ADDR_VAR 0 8
46327: PUSH
46328: LD_INT 0
46330: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
46331: LD_VAR 0 5
46335: NOT
46336: PUSH
46337: LD_VAR 0 1
46341: NOT
46342: OR
46343: PUSH
46344: LD_VAR 0 2
46348: NOT
46349: OR
46350: PUSH
46351: LD_VAR 0 3
46355: NOT
46356: OR
46357: IFFALSE 46361
// exit ;
46359: GO 47175
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46361: LD_ADDR_VAR 0 14
46365: PUSH
46366: LD_VAR 0 1
46370: PPUSH
46371: LD_VAR 0 2
46375: PPUSH
46376: LD_VAR 0 3
46380: PPUSH
46381: LD_VAR 0 4
46385: PPUSH
46386: LD_VAR 0 5
46390: PUSH
46391: LD_INT 1
46393: ARRAY
46394: PPUSH
46395: CALL_OW 248
46399: PPUSH
46400: LD_INT 0
46402: PPUSH
46403: CALL 48412 0 6
46407: ST_TO_ADDR
// if not hexes then
46408: LD_VAR 0 14
46412: NOT
46413: IFFALSE 46417
// exit ;
46415: GO 47175
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46417: LD_ADDR_VAR 0 17
46421: PUSH
46422: LD_VAR 0 5
46426: PPUSH
46427: LD_INT 22
46429: PUSH
46430: LD_VAR 0 13
46434: PPUSH
46435: CALL_OW 255
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 2
46446: PUSH
46447: LD_INT 30
46449: PUSH
46450: LD_INT 0
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 30
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: LIST
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PPUSH
46476: CALL_OW 72
46480: ST_TO_ADDR
// for i = 1 to hexes do
46481: LD_ADDR_VAR 0 9
46485: PUSH
46486: DOUBLE
46487: LD_INT 1
46489: DEC
46490: ST_TO_ADDR
46491: LD_VAR 0 14
46495: PUSH
46496: FOR_TO
46497: IFFALSE 47173
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46499: LD_ADDR_VAR 0 13
46503: PUSH
46504: LD_VAR 0 14
46508: PUSH
46509: LD_VAR 0 9
46513: ARRAY
46514: PUSH
46515: LD_INT 1
46517: ARRAY
46518: PPUSH
46519: LD_VAR 0 14
46523: PUSH
46524: LD_VAR 0 9
46528: ARRAY
46529: PUSH
46530: LD_INT 2
46532: ARRAY
46533: PPUSH
46534: CALL_OW 428
46538: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46539: LD_VAR 0 14
46543: PUSH
46544: LD_VAR 0 9
46548: ARRAY
46549: PUSH
46550: LD_INT 1
46552: ARRAY
46553: PPUSH
46554: LD_VAR 0 14
46558: PUSH
46559: LD_VAR 0 9
46563: ARRAY
46564: PUSH
46565: LD_INT 2
46567: ARRAY
46568: PPUSH
46569: CALL_OW 351
46573: PUSH
46574: LD_VAR 0 14
46578: PUSH
46579: LD_VAR 0 9
46583: ARRAY
46584: PUSH
46585: LD_INT 1
46587: ARRAY
46588: PPUSH
46589: LD_VAR 0 14
46593: PUSH
46594: LD_VAR 0 9
46598: ARRAY
46599: PUSH
46600: LD_INT 2
46602: ARRAY
46603: PPUSH
46604: CALL_OW 488
46608: NOT
46609: OR
46610: PUSH
46611: LD_VAR 0 13
46615: PPUSH
46616: CALL_OW 247
46620: PUSH
46621: LD_INT 3
46623: EQUAL
46624: OR
46625: IFFALSE 46631
// exit ;
46627: POP
46628: POP
46629: GO 47175
// if not tmp then
46631: LD_VAR 0 13
46635: NOT
46636: IFFALSE 46640
// continue ;
46638: GO 46496
// result := true ;
46640: LD_ADDR_VAR 0 8
46644: PUSH
46645: LD_INT 1
46647: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46648: LD_VAR 0 6
46652: PUSH
46653: LD_VAR 0 13
46657: PPUSH
46658: CALL_OW 247
46662: PUSH
46663: LD_INT 2
46665: EQUAL
46666: AND
46667: PUSH
46668: LD_VAR 0 13
46672: PPUSH
46673: CALL_OW 263
46677: PUSH
46678: LD_INT 1
46680: EQUAL
46681: AND
46682: IFFALSE 46846
// begin if IsDrivenBy ( tmp ) then
46684: LD_VAR 0 13
46688: PPUSH
46689: CALL_OW 311
46693: IFFALSE 46697
// continue ;
46695: GO 46496
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46697: LD_VAR 0 6
46701: PPUSH
46702: LD_INT 3
46704: PUSH
46705: LD_INT 60
46707: PUSH
46708: EMPTY
46709: LIST
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 3
46717: PUSH
46718: LD_INT 55
46720: PUSH
46721: EMPTY
46722: LIST
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PPUSH
46732: CALL_OW 72
46736: IFFALSE 46844
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46738: LD_ADDR_VAR 0 18
46742: PUSH
46743: LD_VAR 0 6
46747: PPUSH
46748: LD_INT 3
46750: PUSH
46751: LD_INT 60
46753: PUSH
46754: EMPTY
46755: LIST
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 3
46763: PUSH
46764: LD_INT 55
46766: PUSH
46767: EMPTY
46768: LIST
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PPUSH
46778: CALL_OW 72
46782: PUSH
46783: LD_INT 1
46785: ARRAY
46786: ST_TO_ADDR
// if IsInUnit ( driver ) then
46787: LD_VAR 0 18
46791: PPUSH
46792: CALL_OW 310
46796: IFFALSE 46807
// ComExit ( driver ) ;
46798: LD_VAR 0 18
46802: PPUSH
46803: CALL 71596 0 1
// AddComEnterUnit ( driver , tmp ) ;
46807: LD_VAR 0 18
46811: PPUSH
46812: LD_VAR 0 13
46816: PPUSH
46817: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46821: LD_VAR 0 18
46825: PPUSH
46826: LD_VAR 0 7
46830: PPUSH
46831: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46835: LD_VAR 0 18
46839: PPUSH
46840: CALL_OW 181
// end ; continue ;
46844: GO 46496
// end ; if not cleaners or not tmp in cleaners then
46846: LD_VAR 0 6
46850: NOT
46851: PUSH
46852: LD_VAR 0 13
46856: PUSH
46857: LD_VAR 0 6
46861: IN
46862: NOT
46863: OR
46864: IFFALSE 47171
// begin if dep then
46866: LD_VAR 0 17
46870: IFFALSE 47006
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46872: LD_ADDR_VAR 0 16
46876: PUSH
46877: LD_VAR 0 17
46881: PUSH
46882: LD_INT 1
46884: ARRAY
46885: PPUSH
46886: CALL_OW 250
46890: PPUSH
46891: LD_VAR 0 17
46895: PUSH
46896: LD_INT 1
46898: ARRAY
46899: PPUSH
46900: CALL_OW 254
46904: PPUSH
46905: LD_INT 5
46907: PPUSH
46908: CALL_OW 272
46912: PUSH
46913: LD_VAR 0 17
46917: PUSH
46918: LD_INT 1
46920: ARRAY
46921: PPUSH
46922: CALL_OW 251
46926: PPUSH
46927: LD_VAR 0 17
46931: PUSH
46932: LD_INT 1
46934: ARRAY
46935: PPUSH
46936: CALL_OW 254
46940: PPUSH
46941: LD_INT 5
46943: PPUSH
46944: CALL_OW 273
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46953: LD_VAR 0 16
46957: PUSH
46958: LD_INT 1
46960: ARRAY
46961: PPUSH
46962: LD_VAR 0 16
46966: PUSH
46967: LD_INT 2
46969: ARRAY
46970: PPUSH
46971: CALL_OW 488
46975: IFFALSE 47006
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46977: LD_VAR 0 13
46981: PPUSH
46982: LD_VAR 0 16
46986: PUSH
46987: LD_INT 1
46989: ARRAY
46990: PPUSH
46991: LD_VAR 0 16
46995: PUSH
46996: LD_INT 2
46998: ARRAY
46999: PPUSH
47000: CALL_OW 111
// continue ;
47004: GO 46496
// end ; end ; r := GetDir ( tmp ) ;
47006: LD_ADDR_VAR 0 15
47010: PUSH
47011: LD_VAR 0 13
47015: PPUSH
47016: CALL_OW 254
47020: ST_TO_ADDR
// if r = 5 then
47021: LD_VAR 0 15
47025: PUSH
47026: LD_INT 5
47028: EQUAL
47029: IFFALSE 47039
// r := 0 ;
47031: LD_ADDR_VAR 0 15
47035: PUSH
47036: LD_INT 0
47038: ST_TO_ADDR
// for j = r to 5 do
47039: LD_ADDR_VAR 0 10
47043: PUSH
47044: DOUBLE
47045: LD_VAR 0 15
47049: DEC
47050: ST_TO_ADDR
47051: LD_INT 5
47053: PUSH
47054: FOR_TO
47055: IFFALSE 47169
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
47057: LD_ADDR_VAR 0 11
47061: PUSH
47062: LD_VAR 0 13
47066: PPUSH
47067: CALL_OW 250
47071: PPUSH
47072: LD_VAR 0 10
47076: PPUSH
47077: LD_INT 2
47079: PPUSH
47080: CALL_OW 272
47084: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
47085: LD_ADDR_VAR 0 12
47089: PUSH
47090: LD_VAR 0 13
47094: PPUSH
47095: CALL_OW 251
47099: PPUSH
47100: LD_VAR 0 10
47104: PPUSH
47105: LD_INT 2
47107: PPUSH
47108: CALL_OW 273
47112: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
47113: LD_VAR 0 11
47117: PPUSH
47118: LD_VAR 0 12
47122: PPUSH
47123: CALL_OW 488
47127: PUSH
47128: LD_VAR 0 11
47132: PPUSH
47133: LD_VAR 0 12
47137: PPUSH
47138: CALL_OW 428
47142: NOT
47143: AND
47144: IFFALSE 47167
// begin ComMoveXY ( tmp , _x , _y ) ;
47146: LD_VAR 0 13
47150: PPUSH
47151: LD_VAR 0 11
47155: PPUSH
47156: LD_VAR 0 12
47160: PPUSH
47161: CALL_OW 111
// break ;
47165: GO 47169
// end ; end ;
47167: GO 47054
47169: POP
47170: POP
// end ; end ;
47171: GO 46496
47173: POP
47174: POP
// end ;
47175: LD_VAR 0 8
47179: RET
// export function BuildingTechInvented ( side , btype ) ; begin
47180: LD_INT 0
47182: PPUSH
// result := true ;
47183: LD_ADDR_VAR 0 3
47187: PUSH
47188: LD_INT 1
47190: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
47191: LD_VAR 0 2
47195: PUSH
47196: LD_INT 24
47198: DOUBLE
47199: EQUAL
47200: IFTRUE 47210
47202: LD_INT 33
47204: DOUBLE
47205: EQUAL
47206: IFTRUE 47210
47208: GO 47235
47210: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
47211: LD_ADDR_VAR 0 3
47215: PUSH
47216: LD_INT 32
47218: PPUSH
47219: LD_VAR 0 1
47223: PPUSH
47224: CALL_OW 321
47228: PUSH
47229: LD_INT 2
47231: EQUAL
47232: ST_TO_ADDR
47233: GO 47555
47235: LD_INT 20
47237: DOUBLE
47238: EQUAL
47239: IFTRUE 47243
47241: GO 47268
47243: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
47244: LD_ADDR_VAR 0 3
47248: PUSH
47249: LD_INT 6
47251: PPUSH
47252: LD_VAR 0 1
47256: PPUSH
47257: CALL_OW 321
47261: PUSH
47262: LD_INT 2
47264: EQUAL
47265: ST_TO_ADDR
47266: GO 47555
47268: LD_INT 22
47270: DOUBLE
47271: EQUAL
47272: IFTRUE 47282
47274: LD_INT 36
47276: DOUBLE
47277: EQUAL
47278: IFTRUE 47282
47280: GO 47307
47282: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
47283: LD_ADDR_VAR 0 3
47287: PUSH
47288: LD_INT 15
47290: PPUSH
47291: LD_VAR 0 1
47295: PPUSH
47296: CALL_OW 321
47300: PUSH
47301: LD_INT 2
47303: EQUAL
47304: ST_TO_ADDR
47305: GO 47555
47307: LD_INT 30
47309: DOUBLE
47310: EQUAL
47311: IFTRUE 47315
47313: GO 47340
47315: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
47316: LD_ADDR_VAR 0 3
47320: PUSH
47321: LD_INT 20
47323: PPUSH
47324: LD_VAR 0 1
47328: PPUSH
47329: CALL_OW 321
47333: PUSH
47334: LD_INT 2
47336: EQUAL
47337: ST_TO_ADDR
47338: GO 47555
47340: LD_INT 28
47342: DOUBLE
47343: EQUAL
47344: IFTRUE 47354
47346: LD_INT 21
47348: DOUBLE
47349: EQUAL
47350: IFTRUE 47354
47352: GO 47379
47354: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
47355: LD_ADDR_VAR 0 3
47359: PUSH
47360: LD_INT 21
47362: PPUSH
47363: LD_VAR 0 1
47367: PPUSH
47368: CALL_OW 321
47372: PUSH
47373: LD_INT 2
47375: EQUAL
47376: ST_TO_ADDR
47377: GO 47555
47379: LD_INT 16
47381: DOUBLE
47382: EQUAL
47383: IFTRUE 47387
47385: GO 47414
47387: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
47388: LD_ADDR_VAR 0 3
47392: PUSH
47393: LD_EXP 131
47397: PPUSH
47398: LD_VAR 0 1
47402: PPUSH
47403: CALL_OW 321
47407: PUSH
47408: LD_INT 2
47410: EQUAL
47411: ST_TO_ADDR
47412: GO 47555
47414: LD_INT 19
47416: DOUBLE
47417: EQUAL
47418: IFTRUE 47428
47420: LD_INT 23
47422: DOUBLE
47423: EQUAL
47424: IFTRUE 47428
47426: GO 47455
47428: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
47429: LD_ADDR_VAR 0 3
47433: PUSH
47434: LD_EXP 130
47438: PPUSH
47439: LD_VAR 0 1
47443: PPUSH
47444: CALL_OW 321
47448: PUSH
47449: LD_INT 2
47451: EQUAL
47452: ST_TO_ADDR
47453: GO 47555
47455: LD_INT 17
47457: DOUBLE
47458: EQUAL
47459: IFTRUE 47463
47461: GO 47488
47463: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47464: LD_ADDR_VAR 0 3
47468: PUSH
47469: LD_INT 39
47471: PPUSH
47472: LD_VAR 0 1
47476: PPUSH
47477: CALL_OW 321
47481: PUSH
47482: LD_INT 2
47484: EQUAL
47485: ST_TO_ADDR
47486: GO 47555
47488: LD_INT 18
47490: DOUBLE
47491: EQUAL
47492: IFTRUE 47496
47494: GO 47521
47496: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47497: LD_ADDR_VAR 0 3
47501: PUSH
47502: LD_INT 40
47504: PPUSH
47505: LD_VAR 0 1
47509: PPUSH
47510: CALL_OW 321
47514: PUSH
47515: LD_INT 2
47517: EQUAL
47518: ST_TO_ADDR
47519: GO 47555
47521: LD_INT 27
47523: DOUBLE
47524: EQUAL
47525: IFTRUE 47529
47527: GO 47554
47529: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47530: LD_ADDR_VAR 0 3
47534: PUSH
47535: LD_INT 35
47537: PPUSH
47538: LD_VAR 0 1
47542: PPUSH
47543: CALL_OW 321
47547: PUSH
47548: LD_INT 2
47550: EQUAL
47551: ST_TO_ADDR
47552: GO 47555
47554: POP
// end ;
47555: LD_VAR 0 3
47559: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47560: LD_INT 0
47562: PPUSH
47563: PPUSH
47564: PPUSH
47565: PPUSH
47566: PPUSH
47567: PPUSH
47568: PPUSH
47569: PPUSH
47570: PPUSH
47571: PPUSH
47572: PPUSH
// result := false ;
47573: LD_ADDR_VAR 0 6
47577: PUSH
47578: LD_INT 0
47580: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47581: LD_VAR 0 1
47585: NOT
47586: PUSH
47587: LD_VAR 0 1
47591: PPUSH
47592: CALL_OW 266
47596: PUSH
47597: LD_INT 0
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: IN
47607: NOT
47608: OR
47609: PUSH
47610: LD_VAR 0 2
47614: NOT
47615: OR
47616: PUSH
47617: LD_VAR 0 5
47621: PUSH
47622: LD_INT 0
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: LD_INT 2
47630: PUSH
47631: LD_INT 3
47633: PUSH
47634: LD_INT 4
47636: PUSH
47637: LD_INT 5
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: IN
47648: NOT
47649: OR
47650: PUSH
47651: LD_VAR 0 3
47655: PPUSH
47656: LD_VAR 0 4
47660: PPUSH
47661: CALL_OW 488
47665: NOT
47666: OR
47667: IFFALSE 47671
// exit ;
47669: GO 48407
// side := GetSide ( depot ) ;
47671: LD_ADDR_VAR 0 9
47675: PUSH
47676: LD_VAR 0 1
47680: PPUSH
47681: CALL_OW 255
47685: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47686: LD_VAR 0 9
47690: PPUSH
47691: LD_VAR 0 2
47695: PPUSH
47696: CALL 47180 0 2
47700: NOT
47701: IFFALSE 47705
// exit ;
47703: GO 48407
// pom := GetBase ( depot ) ;
47705: LD_ADDR_VAR 0 10
47709: PUSH
47710: LD_VAR 0 1
47714: PPUSH
47715: CALL_OW 274
47719: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47720: LD_ADDR_VAR 0 11
47724: PUSH
47725: LD_VAR 0 2
47729: PPUSH
47730: LD_VAR 0 1
47734: PPUSH
47735: CALL_OW 248
47739: PPUSH
47740: CALL_OW 450
47744: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47745: LD_VAR 0 10
47749: PPUSH
47750: LD_INT 1
47752: PPUSH
47753: CALL_OW 275
47757: PUSH
47758: LD_VAR 0 11
47762: PUSH
47763: LD_INT 1
47765: ARRAY
47766: GREATEREQUAL
47767: PUSH
47768: LD_VAR 0 10
47772: PPUSH
47773: LD_INT 2
47775: PPUSH
47776: CALL_OW 275
47780: PUSH
47781: LD_VAR 0 11
47785: PUSH
47786: LD_INT 2
47788: ARRAY
47789: GREATEREQUAL
47790: AND
47791: PUSH
47792: LD_VAR 0 10
47796: PPUSH
47797: LD_INT 3
47799: PPUSH
47800: CALL_OW 275
47804: PUSH
47805: LD_VAR 0 11
47809: PUSH
47810: LD_INT 3
47812: ARRAY
47813: GREATEREQUAL
47814: AND
47815: NOT
47816: IFFALSE 47820
// exit ;
47818: GO 48407
// if GetBType ( depot ) = b_depot then
47820: LD_VAR 0 1
47824: PPUSH
47825: CALL_OW 266
47829: PUSH
47830: LD_INT 0
47832: EQUAL
47833: IFFALSE 47845
// dist := 28 else
47835: LD_ADDR_VAR 0 14
47839: PUSH
47840: LD_INT 28
47842: ST_TO_ADDR
47843: GO 47853
// dist := 36 ;
47845: LD_ADDR_VAR 0 14
47849: PUSH
47850: LD_INT 36
47852: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47853: LD_VAR 0 1
47857: PPUSH
47858: LD_VAR 0 3
47862: PPUSH
47863: LD_VAR 0 4
47867: PPUSH
47868: CALL_OW 297
47872: PUSH
47873: LD_VAR 0 14
47877: GREATER
47878: IFFALSE 47882
// exit ;
47880: GO 48407
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47882: LD_ADDR_VAR 0 12
47886: PUSH
47887: LD_VAR 0 2
47891: PPUSH
47892: LD_VAR 0 3
47896: PPUSH
47897: LD_VAR 0 4
47901: PPUSH
47902: LD_VAR 0 5
47906: PPUSH
47907: LD_VAR 0 1
47911: PPUSH
47912: CALL_OW 248
47916: PPUSH
47917: LD_INT 0
47919: PPUSH
47920: CALL 48412 0 6
47924: ST_TO_ADDR
// if not hexes then
47925: LD_VAR 0 12
47929: NOT
47930: IFFALSE 47934
// exit ;
47932: GO 48407
// hex := GetHexInfo ( x , y ) ;
47934: LD_ADDR_VAR 0 15
47938: PUSH
47939: LD_VAR 0 3
47943: PPUSH
47944: LD_VAR 0 4
47948: PPUSH
47949: CALL_OW 546
47953: ST_TO_ADDR
// if hex [ 1 ] then
47954: LD_VAR 0 15
47958: PUSH
47959: LD_INT 1
47961: ARRAY
47962: IFFALSE 47966
// exit ;
47964: GO 48407
// height := hex [ 2 ] ;
47966: LD_ADDR_VAR 0 13
47970: PUSH
47971: LD_VAR 0 15
47975: PUSH
47976: LD_INT 2
47978: ARRAY
47979: ST_TO_ADDR
// for i = 1 to hexes do
47980: LD_ADDR_VAR 0 7
47984: PUSH
47985: DOUBLE
47986: LD_INT 1
47988: DEC
47989: ST_TO_ADDR
47990: LD_VAR 0 12
47994: PUSH
47995: FOR_TO
47996: IFFALSE 48326
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47998: LD_VAR 0 12
48002: PUSH
48003: LD_VAR 0 7
48007: ARRAY
48008: PUSH
48009: LD_INT 1
48011: ARRAY
48012: PPUSH
48013: LD_VAR 0 12
48017: PUSH
48018: LD_VAR 0 7
48022: ARRAY
48023: PUSH
48024: LD_INT 2
48026: ARRAY
48027: PPUSH
48028: CALL_OW 488
48032: NOT
48033: PUSH
48034: LD_VAR 0 12
48038: PUSH
48039: LD_VAR 0 7
48043: ARRAY
48044: PUSH
48045: LD_INT 1
48047: ARRAY
48048: PPUSH
48049: LD_VAR 0 12
48053: PUSH
48054: LD_VAR 0 7
48058: ARRAY
48059: PUSH
48060: LD_INT 2
48062: ARRAY
48063: PPUSH
48064: CALL_OW 428
48068: PUSH
48069: LD_INT 0
48071: GREATER
48072: OR
48073: PUSH
48074: LD_VAR 0 12
48078: PUSH
48079: LD_VAR 0 7
48083: ARRAY
48084: PUSH
48085: LD_INT 1
48087: ARRAY
48088: PPUSH
48089: LD_VAR 0 12
48093: PUSH
48094: LD_VAR 0 7
48098: ARRAY
48099: PUSH
48100: LD_INT 2
48102: ARRAY
48103: PPUSH
48104: CALL_OW 351
48108: OR
48109: IFFALSE 48115
// exit ;
48111: POP
48112: POP
48113: GO 48407
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48115: LD_ADDR_VAR 0 8
48119: PUSH
48120: LD_VAR 0 12
48124: PUSH
48125: LD_VAR 0 7
48129: ARRAY
48130: PUSH
48131: LD_INT 1
48133: ARRAY
48134: PPUSH
48135: LD_VAR 0 12
48139: PUSH
48140: LD_VAR 0 7
48144: ARRAY
48145: PUSH
48146: LD_INT 2
48148: ARRAY
48149: PPUSH
48150: CALL_OW 546
48154: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48155: LD_VAR 0 8
48159: PUSH
48160: LD_INT 1
48162: ARRAY
48163: PUSH
48164: LD_VAR 0 8
48168: PUSH
48169: LD_INT 2
48171: ARRAY
48172: PUSH
48173: LD_VAR 0 13
48177: PUSH
48178: LD_INT 2
48180: PLUS
48181: GREATER
48182: OR
48183: PUSH
48184: LD_VAR 0 8
48188: PUSH
48189: LD_INT 2
48191: ARRAY
48192: PUSH
48193: LD_VAR 0 13
48197: PUSH
48198: LD_INT 2
48200: MINUS
48201: LESS
48202: OR
48203: PUSH
48204: LD_VAR 0 8
48208: PUSH
48209: LD_INT 3
48211: ARRAY
48212: PUSH
48213: LD_INT 0
48215: PUSH
48216: LD_INT 8
48218: PUSH
48219: LD_INT 9
48221: PUSH
48222: LD_INT 10
48224: PUSH
48225: LD_INT 11
48227: PUSH
48228: LD_INT 12
48230: PUSH
48231: LD_INT 13
48233: PUSH
48234: LD_INT 16
48236: PUSH
48237: LD_INT 17
48239: PUSH
48240: LD_INT 18
48242: PUSH
48243: LD_INT 19
48245: PUSH
48246: LD_INT 20
48248: PUSH
48249: LD_INT 21
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: IN
48267: NOT
48268: OR
48269: PUSH
48270: LD_VAR 0 8
48274: PUSH
48275: LD_INT 5
48277: ARRAY
48278: NOT
48279: OR
48280: PUSH
48281: LD_VAR 0 8
48285: PUSH
48286: LD_INT 6
48288: ARRAY
48289: PUSH
48290: LD_INT 1
48292: PUSH
48293: LD_INT 2
48295: PUSH
48296: LD_INT 7
48298: PUSH
48299: LD_INT 9
48301: PUSH
48302: LD_INT 10
48304: PUSH
48305: LD_INT 11
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: IN
48316: NOT
48317: OR
48318: IFFALSE 48324
// exit ;
48320: POP
48321: POP
48322: GO 48407
// end ;
48324: GO 47995
48326: POP
48327: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48328: LD_VAR 0 9
48332: PPUSH
48333: LD_VAR 0 3
48337: PPUSH
48338: LD_VAR 0 4
48342: PPUSH
48343: LD_INT 20
48345: PPUSH
48346: CALL 40353 0 4
48350: PUSH
48351: LD_INT 4
48353: ARRAY
48354: IFFALSE 48358
// exit ;
48356: GO 48407
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48358: LD_VAR 0 2
48362: PUSH
48363: LD_INT 29
48365: PUSH
48366: LD_INT 30
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: IN
48373: PUSH
48374: LD_VAR 0 3
48378: PPUSH
48379: LD_VAR 0 4
48383: PPUSH
48384: LD_VAR 0 9
48388: PPUSH
48389: CALL_OW 440
48393: NOT
48394: AND
48395: IFFALSE 48399
// exit ;
48397: GO 48407
// result := true ;
48399: LD_ADDR_VAR 0 6
48403: PUSH
48404: LD_INT 1
48406: ST_TO_ADDR
// end ;
48407: LD_VAR 0 6
48411: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48412: LD_INT 0
48414: PPUSH
48415: PPUSH
48416: PPUSH
48417: PPUSH
48418: PPUSH
48419: PPUSH
48420: PPUSH
48421: PPUSH
48422: PPUSH
48423: PPUSH
48424: PPUSH
48425: PPUSH
48426: PPUSH
48427: PPUSH
48428: PPUSH
48429: PPUSH
48430: PPUSH
48431: PPUSH
48432: PPUSH
48433: PPUSH
48434: PPUSH
48435: PPUSH
48436: PPUSH
48437: PPUSH
48438: PPUSH
48439: PPUSH
48440: PPUSH
48441: PPUSH
48442: PPUSH
48443: PPUSH
48444: PPUSH
48445: PPUSH
48446: PPUSH
48447: PPUSH
48448: PPUSH
48449: PPUSH
48450: PPUSH
48451: PPUSH
48452: PPUSH
48453: PPUSH
48454: PPUSH
48455: PPUSH
48456: PPUSH
48457: PPUSH
48458: PPUSH
48459: PPUSH
48460: PPUSH
48461: PPUSH
48462: PPUSH
48463: PPUSH
48464: PPUSH
48465: PPUSH
48466: PPUSH
48467: PPUSH
48468: PPUSH
48469: PPUSH
48470: PPUSH
48471: PPUSH
// result = [ ] ;
48472: LD_ADDR_VAR 0 7
48476: PUSH
48477: EMPTY
48478: ST_TO_ADDR
// temp_list = [ ] ;
48479: LD_ADDR_VAR 0 9
48483: PUSH
48484: EMPTY
48485: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48486: LD_VAR 0 4
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: LD_INT 1
48496: PUSH
48497: LD_INT 2
48499: PUSH
48500: LD_INT 3
48502: PUSH
48503: LD_INT 4
48505: PUSH
48506: LD_INT 5
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: IN
48517: NOT
48518: PUSH
48519: LD_VAR 0 1
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: IN
48534: PUSH
48535: LD_VAR 0 5
48539: PUSH
48540: LD_INT 1
48542: PUSH
48543: LD_INT 2
48545: PUSH
48546: LD_INT 3
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: LIST
48553: IN
48554: NOT
48555: AND
48556: OR
48557: IFFALSE 48561
// exit ;
48559: GO 66952
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48561: LD_VAR 0 1
48565: PUSH
48566: LD_INT 6
48568: PUSH
48569: LD_INT 7
48571: PUSH
48572: LD_INT 8
48574: PUSH
48575: LD_INT 13
48577: PUSH
48578: LD_INT 12
48580: PUSH
48581: LD_INT 15
48583: PUSH
48584: LD_INT 11
48586: PUSH
48587: LD_INT 14
48589: PUSH
48590: LD_INT 10
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: IN
48604: IFFALSE 48614
// btype = b_lab ;
48606: LD_ADDR_VAR 0 1
48610: PUSH
48611: LD_INT 6
48613: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48614: LD_VAR 0 6
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: LD_INT 2
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: LIST
48632: IN
48633: NOT
48634: PUSH
48635: LD_VAR 0 1
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: LD_INT 1
48645: PUSH
48646: LD_INT 2
48648: PUSH
48649: LD_INT 3
48651: PUSH
48652: LD_INT 6
48654: PUSH
48655: LD_INT 36
48657: PUSH
48658: LD_INT 4
48660: PUSH
48661: LD_INT 5
48663: PUSH
48664: LD_INT 31
48666: PUSH
48667: LD_INT 32
48669: PUSH
48670: LD_INT 33
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: IN
48686: NOT
48687: PUSH
48688: LD_VAR 0 6
48692: PUSH
48693: LD_INT 1
48695: EQUAL
48696: AND
48697: OR
48698: PUSH
48699: LD_VAR 0 1
48703: PUSH
48704: LD_INT 2
48706: PUSH
48707: LD_INT 3
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: IN
48714: NOT
48715: PUSH
48716: LD_VAR 0 6
48720: PUSH
48721: LD_INT 2
48723: EQUAL
48724: AND
48725: OR
48726: IFFALSE 48736
// mode = 0 ;
48728: LD_ADDR_VAR 0 6
48732: PUSH
48733: LD_INT 0
48735: ST_TO_ADDR
// case mode of 0 :
48736: LD_VAR 0 6
48740: PUSH
48741: LD_INT 0
48743: DOUBLE
48744: EQUAL
48745: IFTRUE 48749
48747: GO 60202
48749: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48750: LD_ADDR_VAR 0 11
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: LD_INT 0
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 0
48767: PUSH
48768: LD_INT 1
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 1
48788: PUSH
48789: LD_INT 1
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 0
48798: PUSH
48799: LD_INT 1
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 1
48808: NEG
48809: PUSH
48810: LD_INT 0
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: NEG
48820: PUSH
48821: LD_INT 1
48823: NEG
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: NEG
48832: PUSH
48833: LD_INT 2
48835: NEG
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: LD_INT 2
48846: NEG
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: LD_INT 2
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: LD_INT 2
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 1
48885: NEG
48886: PUSH
48887: LD_INT 1
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 1
48896: PUSH
48897: LD_INT 3
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 0
48906: PUSH
48907: LD_INT 3
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 1
48916: NEG
48917: PUSH
48918: LD_INT 2
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48943: LD_ADDR_VAR 0 12
48947: PUSH
48948: LD_INT 0
48950: PUSH
48951: LD_INT 0
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 0
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 1
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 1
48981: PUSH
48982: LD_INT 1
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: LD_INT 1
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 1
49001: NEG
49002: PUSH
49003: LD_INT 0
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 1
49012: NEG
49013: PUSH
49014: LD_INT 1
49016: NEG
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 1
49024: PUSH
49025: LD_INT 1
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 2
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 2
49045: PUSH
49046: LD_INT 1
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 1
49055: NEG
49056: PUSH
49057: LD_INT 1
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 2
49066: NEG
49067: PUSH
49068: LD_INT 0
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 2
49077: NEG
49078: PUSH
49079: LD_INT 1
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 2
49089: NEG
49090: PUSH
49091: LD_INT 1
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 3
49100: NEG
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 3
49111: NEG
49112: PUSH
49113: LD_INT 1
49115: NEG
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49139: LD_ADDR_VAR 0 13
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: LD_INT 0
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: LD_INT 1
49159: NEG
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: PUSH
49168: LD_INT 0
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 1
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: LD_INT 1
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 1
49197: NEG
49198: PUSH
49199: LD_INT 0
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 1
49208: NEG
49209: PUSH
49210: LD_INT 1
49212: NEG
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 1
49220: NEG
49221: PUSH
49222: LD_INT 2
49224: NEG
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 2
49232: PUSH
49233: LD_INT 1
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 2
49242: PUSH
49243: LD_INT 2
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 1
49252: PUSH
49253: LD_INT 2
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 2
49262: NEG
49263: PUSH
49264: LD_INT 1
49266: NEG
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 2
49274: NEG
49275: PUSH
49276: LD_INT 2
49278: NEG
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 2
49286: NEG
49287: PUSH
49288: LD_INT 3
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 3
49298: NEG
49299: PUSH
49300: LD_INT 2
49302: NEG
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 3
49310: NEG
49311: PUSH
49312: LD_INT 3
49314: NEG
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49338: LD_ADDR_VAR 0 14
49342: PUSH
49343: LD_INT 0
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 0
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 1
49366: PUSH
49367: LD_INT 0
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 1
49376: PUSH
49377: LD_INT 1
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 0
49386: PUSH
49387: LD_INT 1
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: LD_INT 0
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: LD_INT 1
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: NEG
49420: PUSH
49421: LD_INT 2
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 0
49431: PUSH
49432: LD_INT 2
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 1
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: LD_INT 2
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: LD_INT 2
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 1
49473: NEG
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 1
49484: NEG
49485: PUSH
49486: LD_INT 3
49488: NEG
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 0
49496: PUSH
49497: LD_INT 3
49499: NEG
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 1
49507: PUSH
49508: LD_INT 2
49510: NEG
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49534: LD_ADDR_VAR 0 15
49538: PUSH
49539: LD_INT 0
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 0
49551: PUSH
49552: LD_INT 1
49554: NEG
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 1
49562: PUSH
49563: LD_INT 0
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 1
49572: PUSH
49573: LD_INT 1
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 0
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 1
49592: NEG
49593: PUSH
49594: LD_INT 0
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 1
49603: NEG
49604: PUSH
49605: LD_INT 1
49607: NEG
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 1
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 2
49626: PUSH
49627: LD_INT 0
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 2
49636: PUSH
49637: LD_INT 1
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: PUSH
49648: LD_INT 1
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 2
49657: NEG
49658: PUSH
49659: LD_INT 0
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 2
49668: NEG
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 2
49680: PUSH
49681: LD_INT 1
49683: NEG
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 3
49691: PUSH
49692: LD_INT 0
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 3
49701: PUSH
49702: LD_INT 1
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49727: LD_ADDR_VAR 0 16
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: LD_INT 1
49747: NEG
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 0
49775: PUSH
49776: LD_INT 1
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: NEG
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 1
49796: NEG
49797: PUSH
49798: LD_INT 1
49800: NEG
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 1
49808: NEG
49809: PUSH
49810: LD_INT 2
49812: NEG
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 2
49820: PUSH
49821: LD_INT 1
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 2
49830: PUSH
49831: LD_INT 2
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 1
49840: PUSH
49841: LD_INT 2
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 2
49850: NEG
49851: PUSH
49852: LD_INT 1
49854: NEG
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 2
49862: NEG
49863: PUSH
49864: LD_INT 2
49866: NEG
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 3
49874: PUSH
49875: LD_INT 2
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 3
49884: PUSH
49885: LD_INT 3
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 2
49894: PUSH
49895: LD_INT 3
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49920: LD_ADDR_VAR 0 17
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: LD_INT 1
49940: NEG
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 1
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: LD_INT 1
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 1
49978: NEG
49979: PUSH
49980: LD_INT 0
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 1
49989: NEG
49990: PUSH
49991: LD_INT 1
49993: NEG
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: LD_INT 2
50005: NEG
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: LD_INT 2
50016: NEG
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 2
50035: PUSH
50036: LD_INT 0
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 2
50045: PUSH
50046: LD_INT 1
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 2
50055: PUSH
50056: LD_INT 2
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: LD_INT 2
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: LD_INT 2
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: NEG
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 2
50096: NEG
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 2
50107: NEG
50108: PUSH
50109: LD_INT 1
50111: NEG
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 2
50119: NEG
50120: PUSH
50121: LD_INT 2
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50150: LD_ADDR_VAR 0 18
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 1
50178: PUSH
50179: LD_INT 0
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 1
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: LD_INT 1
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 1
50208: NEG
50209: PUSH
50210: LD_INT 0
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 1
50219: NEG
50220: PUSH
50221: LD_INT 1
50223: NEG
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 1
50231: NEG
50232: PUSH
50233: LD_INT 2
50235: NEG
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 0
50243: PUSH
50244: LD_INT 2
50246: NEG
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 1
50254: PUSH
50255: LD_INT 1
50257: NEG
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 2
50265: PUSH
50266: LD_INT 0
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 2
50275: PUSH
50276: LD_INT 1
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 2
50285: PUSH
50286: LD_INT 2
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 1
50295: PUSH
50296: LD_INT 2
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 0
50305: PUSH
50306: LD_INT 2
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: LD_INT 1
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 2
50326: NEG
50327: PUSH
50328: LD_INT 0
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 2
50337: NEG
50338: PUSH
50339: LD_INT 1
50341: NEG
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 2
50349: NEG
50350: PUSH
50351: LD_INT 2
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50380: LD_ADDR_VAR 0 19
50384: PUSH
50385: LD_INT 0
50387: PUSH
50388: LD_INT 0
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: LD_INT 1
50400: NEG
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 1
50408: PUSH
50409: LD_INT 0
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 1
50418: PUSH
50419: LD_INT 1
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: LD_INT 1
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 1
50438: NEG
50439: PUSH
50440: LD_INT 0
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: NEG
50450: PUSH
50451: LD_INT 1
50453: NEG
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 1
50461: NEG
50462: PUSH
50463: LD_INT 2
50465: NEG
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 0
50473: PUSH
50474: LD_INT 2
50476: NEG
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 1
50484: PUSH
50485: LD_INT 1
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 2
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 2
50505: PUSH
50506: LD_INT 1
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 2
50515: PUSH
50516: LD_INT 2
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: LD_INT 2
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: LD_INT 2
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 2
50556: NEG
50557: PUSH
50558: LD_INT 0
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 2
50567: NEG
50568: PUSH
50569: LD_INT 1
50571: NEG
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 2
50579: NEG
50580: PUSH
50581: LD_INT 2
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50610: LD_ADDR_VAR 0 20
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 1
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 1
50648: PUSH
50649: LD_INT 1
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 1
50668: NEG
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 1
50679: NEG
50680: PUSH
50681: LD_INT 1
50683: NEG
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 1
50691: NEG
50692: PUSH
50693: LD_INT 2
50695: NEG
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: LD_INT 2
50706: NEG
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 1
50714: PUSH
50715: LD_INT 1
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 2
50725: PUSH
50726: LD_INT 0
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 2
50735: PUSH
50736: LD_INT 1
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 2
50745: PUSH
50746: LD_INT 2
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: LD_INT 2
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: LD_INT 2
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: LD_INT 1
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 2
50786: NEG
50787: PUSH
50788: LD_INT 0
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 2
50797: NEG
50798: PUSH
50799: LD_INT 1
50801: NEG
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 2
50809: NEG
50810: PUSH
50811: LD_INT 2
50813: NEG
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50840: LD_ADDR_VAR 0 21
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: LD_INT 0
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: LD_INT 1
50860: NEG
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: LD_INT 0
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: LD_INT 1
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 0
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 1
50909: NEG
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: LD_INT 2
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: LD_INT 2
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 1
50944: PUSH
50945: LD_INT 1
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 2
50955: PUSH
50956: LD_INT 0
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 2
50965: PUSH
50966: LD_INT 1
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 2
50975: PUSH
50976: LD_INT 2
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 1
50985: PUSH
50986: LD_INT 2
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: LD_INT 2
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 1
51005: NEG
51006: PUSH
51007: LD_INT 1
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 2
51016: NEG
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 2
51027: NEG
51028: PUSH
51029: LD_INT 1
51031: NEG
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 2
51039: NEG
51040: PUSH
51041: LD_INT 2
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51070: LD_ADDR_VAR 0 22
51074: PUSH
51075: LD_INT 0
51077: PUSH
51078: LD_INT 0
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: LD_INT 1
51090: NEG
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 1
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: PUSH
51109: LD_INT 1
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 0
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: NEG
51129: PUSH
51130: LD_INT 0
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 1
51139: NEG
51140: PUSH
51141: LD_INT 1
51143: NEG
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: LD_INT 2
51155: NEG
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 0
51163: PUSH
51164: LD_INT 2
51166: NEG
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 1
51174: PUSH
51175: LD_INT 1
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 2
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 2
51195: PUSH
51196: LD_INT 1
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 2
51205: PUSH
51206: LD_INT 2
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: LD_INT 2
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 1
51235: NEG
51236: PUSH
51237: LD_INT 1
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 2
51246: NEG
51247: PUSH
51248: LD_INT 0
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 2
51257: NEG
51258: PUSH
51259: LD_INT 1
51261: NEG
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 2
51269: NEG
51270: PUSH
51271: LD_INT 2
51273: NEG
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51300: LD_ADDR_VAR 0 23
51304: PUSH
51305: LD_INT 0
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: LD_INT 1
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 1
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: LD_INT 1
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 0
51348: PUSH
51349: LD_INT 1
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: NEG
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 1
51369: NEG
51370: PUSH
51371: LD_INT 1
51373: NEG
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: LD_INT 2
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 0
51393: PUSH
51394: LD_INT 2
51396: NEG
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: PUSH
51405: LD_INT 1
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 2
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 2
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 2
51435: PUSH
51436: LD_INT 2
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: LD_INT 2
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 0
51455: PUSH
51456: LD_INT 2
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 1
51465: NEG
51466: PUSH
51467: LD_INT 1
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 2
51476: NEG
51477: PUSH
51478: LD_INT 0
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 2
51487: NEG
51488: PUSH
51489: LD_INT 1
51491: NEG
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 2
51499: NEG
51500: PUSH
51501: LD_INT 2
51503: NEG
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 2
51511: NEG
51512: PUSH
51513: LD_INT 3
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 1
51523: NEG
51524: PUSH
51525: LD_INT 3
51527: NEG
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: LD_INT 2
51538: NEG
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 2
51546: PUSH
51547: LD_INT 1
51549: NEG
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51580: LD_ADDR_VAR 0 24
51584: PUSH
51585: LD_INT 0
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 0
51597: PUSH
51598: LD_INT 1
51600: NEG
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 1
51608: PUSH
51609: LD_INT 0
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 1
51618: PUSH
51619: LD_INT 1
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 0
51628: PUSH
51629: LD_INT 1
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 1
51649: NEG
51650: PUSH
51651: LD_INT 1
51653: NEG
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 1
51661: NEG
51662: PUSH
51663: LD_INT 2
51665: NEG
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 0
51673: PUSH
51674: LD_INT 2
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 1
51684: PUSH
51685: LD_INT 1
51687: NEG
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 2
51695: PUSH
51696: LD_INT 0
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 2
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 2
51715: PUSH
51716: LD_INT 2
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: PUSH
51726: LD_INT 2
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: LD_INT 2
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: NEG
51746: PUSH
51747: LD_INT 1
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 2
51756: NEG
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 2
51767: NEG
51768: PUSH
51769: LD_INT 1
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 2
51779: NEG
51780: PUSH
51781: LD_INT 2
51783: NEG
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 1
51791: PUSH
51792: LD_INT 2
51794: NEG
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 2
51802: PUSH
51803: LD_INT 1
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 3
51813: PUSH
51814: LD_INT 1
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 3
51823: PUSH
51824: LD_INT 2
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51856: LD_ADDR_VAR 0 25
51860: PUSH
51861: LD_INT 0
51863: PUSH
51864: LD_INT 0
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 0
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 1
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 0
51904: PUSH
51905: LD_INT 1
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 1
51914: NEG
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 1
51925: NEG
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 1
51937: NEG
51938: PUSH
51939: LD_INT 2
51941: NEG
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: LD_INT 2
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: LD_INT 1
51963: NEG
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 2
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 2
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 2
51991: PUSH
51992: LD_INT 2
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 1
52001: PUSH
52002: LD_INT 2
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 0
52011: PUSH
52012: LD_INT 2
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 1
52021: NEG
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 2
52032: NEG
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 2
52043: NEG
52044: PUSH
52045: LD_INT 1
52047: NEG
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 2
52055: NEG
52056: PUSH
52057: LD_INT 2
52059: NEG
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 3
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 3
52077: PUSH
52078: LD_INT 2
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 2
52087: PUSH
52088: LD_INT 3
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: LD_INT 3
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52130: LD_ADDR_VAR 0 26
52134: PUSH
52135: LD_INT 0
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 0
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 1
52158: PUSH
52159: LD_INT 0
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 1
52168: PUSH
52169: LD_INT 1
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: LD_INT 1
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: LD_INT 0
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 1
52199: NEG
52200: PUSH
52201: LD_INT 1
52203: NEG
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 1
52211: NEG
52212: PUSH
52213: LD_INT 2
52215: NEG
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 0
52223: PUSH
52224: LD_INT 2
52226: NEG
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: PUSH
52235: LD_INT 1
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 2
52245: PUSH
52246: LD_INT 0
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 2
52255: PUSH
52256: LD_INT 1
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 2
52265: PUSH
52266: LD_INT 2
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 1
52275: PUSH
52276: LD_INT 2
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: LD_INT 2
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 1
52295: NEG
52296: PUSH
52297: LD_INT 1
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 2
52306: NEG
52307: PUSH
52308: LD_INT 0
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 2
52317: NEG
52318: PUSH
52319: LD_INT 1
52321: NEG
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 2
52329: NEG
52330: PUSH
52331: LD_INT 2
52333: NEG
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 2
52341: PUSH
52342: LD_INT 3
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 1
52351: PUSH
52352: LD_INT 3
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 1
52361: NEG
52362: PUSH
52363: LD_INT 2
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 2
52372: NEG
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52406: LD_ADDR_VAR 0 27
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 0
52423: PUSH
52424: LD_INT 1
52426: NEG
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 1
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: LD_INT 1
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 1
52464: NEG
52465: PUSH
52466: LD_INT 0
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 1
52475: NEG
52476: PUSH
52477: LD_INT 1
52479: NEG
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 1
52487: NEG
52488: PUSH
52489: LD_INT 2
52491: NEG
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 0
52499: PUSH
52500: LD_INT 2
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 1
52510: PUSH
52511: LD_INT 1
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 2
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 2
52531: PUSH
52532: LD_INT 1
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 2
52541: PUSH
52542: LD_INT 2
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 1
52551: PUSH
52552: LD_INT 2
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 0
52561: PUSH
52562: LD_INT 2
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 1
52571: NEG
52572: PUSH
52573: LD_INT 1
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 2
52582: NEG
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 2
52593: NEG
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 2
52605: NEG
52606: PUSH
52607: LD_INT 2
52609: NEG
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 1
52617: NEG
52618: PUSH
52619: LD_INT 2
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 2
52628: NEG
52629: PUSH
52630: LD_INT 1
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 3
52639: NEG
52640: PUSH
52641: LD_INT 1
52643: NEG
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 3
52651: NEG
52652: PUSH
52653: LD_INT 2
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52686: LD_ADDR_VAR 0 28
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 0
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 1
52714: PUSH
52715: LD_INT 0
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: LD_INT 0
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: NEG
52756: PUSH
52757: LD_INT 1
52759: NEG
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: LD_INT 2
52771: NEG
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 0
52779: PUSH
52780: LD_INT 2
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: LD_INT 1
52793: NEG
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 2
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 2
52811: PUSH
52812: LD_INT 1
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 2
52821: PUSH
52822: LD_INT 2
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: LD_INT 2
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 0
52841: PUSH
52842: LD_INT 2
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 1
52851: NEG
52852: PUSH
52853: LD_INT 1
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 2
52862: NEG
52863: PUSH
52864: LD_INT 0
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 2
52873: NEG
52874: PUSH
52875: LD_INT 1
52877: NEG
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 2
52885: NEG
52886: PUSH
52887: LD_INT 2
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 2
52897: NEG
52898: PUSH
52899: LD_INT 3
52901: NEG
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: NEG
52910: PUSH
52911: LD_INT 3
52913: NEG
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 3
52921: NEG
52922: PUSH
52923: LD_INT 1
52925: NEG
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 3
52933: NEG
52934: PUSH
52935: LD_INT 2
52937: NEG
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52968: LD_ADDR_VAR 0 29
52972: PUSH
52973: LD_INT 0
52975: PUSH
52976: LD_INT 0
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 0
52985: PUSH
52986: LD_INT 1
52988: NEG
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: LD_INT 0
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: LD_INT 1
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: LD_INT 1
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: NEG
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 1
53037: NEG
53038: PUSH
53039: LD_INT 1
53041: NEG
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: LD_INT 2
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: LD_INT 2
53064: NEG
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 1
53072: PUSH
53073: LD_INT 1
53075: NEG
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 2
53083: PUSH
53084: LD_INT 0
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 2
53093: PUSH
53094: LD_INT 1
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: LD_INT 2
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: LD_INT 2
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 1
53123: NEG
53124: PUSH
53125: LD_INT 1
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 2
53134: NEG
53135: PUSH
53136: LD_INT 1
53138: NEG
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 2
53146: NEG
53147: PUSH
53148: LD_INT 2
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 2
53158: NEG
53159: PUSH
53160: LD_INT 3
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 2
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 3
53181: PUSH
53182: LD_INT 1
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: PUSH
53192: LD_INT 3
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 1
53201: NEG
53202: PUSH
53203: LD_INT 2
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 3
53212: NEG
53213: PUSH
53214: LD_INT 2
53216: NEG
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53247: LD_ADDR_VAR 0 30
53251: PUSH
53252: LD_INT 0
53254: PUSH
53255: LD_INT 0
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: LD_INT 1
53267: NEG
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 1
53275: PUSH
53276: LD_INT 0
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 1
53285: PUSH
53286: LD_INT 1
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 0
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 1
53305: NEG
53306: PUSH
53307: LD_INT 0
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 1
53316: NEG
53317: PUSH
53318: LD_INT 1
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: LD_INT 2
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 0
53340: PUSH
53341: LD_INT 2
53343: NEG
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 2
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 2
53372: PUSH
53373: LD_INT 1
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 2
53382: PUSH
53383: LD_INT 2
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 1
53392: PUSH
53393: LD_INT 2
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 1
53402: NEG
53403: PUSH
53404: LD_INT 1
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 2
53413: NEG
53414: PUSH
53415: LD_INT 0
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 2
53424: NEG
53425: PUSH
53426: LD_INT 1
53428: NEG
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 1
53436: NEG
53437: PUSH
53438: LD_INT 3
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 1
53448: PUSH
53449: LD_INT 2
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 3
53459: PUSH
53460: LD_INT 2
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 2
53469: PUSH
53470: LD_INT 3
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 2
53479: NEG
53480: PUSH
53481: LD_INT 1
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 3
53490: NEG
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53525: LD_ADDR_VAR 0 31
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: LD_INT 1
53545: NEG
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 1
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: LD_INT 1
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: LD_INT 1
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 1
53583: NEG
53584: PUSH
53585: LD_INT 0
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 1
53594: NEG
53595: PUSH
53596: LD_INT 1
53598: NEG
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: LD_INT 2
53610: NEG
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 1
53618: PUSH
53619: LD_INT 1
53621: NEG
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 2
53629: PUSH
53630: LD_INT 0
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 2
53639: PUSH
53640: LD_INT 1
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 2
53649: PUSH
53650: LD_INT 2
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 1
53659: PUSH
53660: LD_INT 2
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: LD_INT 2
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 1
53679: NEG
53680: PUSH
53681: LD_INT 1
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 2
53690: NEG
53691: PUSH
53692: LD_INT 1
53694: NEG
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 2
53702: NEG
53703: PUSH
53704: LD_INT 2
53706: NEG
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 2
53714: NEG
53715: PUSH
53716: LD_INT 3
53718: NEG
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 2
53726: PUSH
53727: LD_INT 1
53729: NEG
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 3
53737: PUSH
53738: LD_INT 1
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 1
53747: PUSH
53748: LD_INT 3
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 1
53757: NEG
53758: PUSH
53759: LD_INT 2
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 3
53768: NEG
53769: PUSH
53770: LD_INT 2
53772: NEG
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53803: LD_ADDR_VAR 0 32
53807: PUSH
53808: LD_INT 0
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: LD_INT 1
53823: NEG
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 1
53831: PUSH
53832: LD_INT 0
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 1
53841: PUSH
53842: LD_INT 1
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: LD_INT 1
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 1
53861: NEG
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 1
53872: NEG
53873: PUSH
53874: LD_INT 1
53876: NEG
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: LD_INT 2
53888: NEG
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: LD_INT 2
53899: NEG
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 1
53907: PUSH
53908: LD_INT 1
53910: NEG
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 2
53918: PUSH
53919: LD_INT 1
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 2
53928: PUSH
53929: LD_INT 2
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: LD_INT 2
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 0
53948: PUSH
53949: LD_INT 2
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: LD_INT 1
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 2
53969: NEG
53970: PUSH
53971: LD_INT 0
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 2
53980: NEG
53981: PUSH
53982: LD_INT 1
53984: NEG
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: LD_INT 3
53996: NEG
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 1
54004: PUSH
54005: LD_INT 2
54007: NEG
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 3
54015: PUSH
54016: LD_INT 2
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 2
54025: PUSH
54026: LD_INT 3
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 2
54035: NEG
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 3
54046: NEG
54047: PUSH
54048: LD_INT 1
54050: NEG
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54081: LD_ADDR_VAR 0 33
54085: PUSH
54086: LD_INT 0
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 0
54098: PUSH
54099: LD_INT 1
54101: NEG
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 1
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 1
54119: PUSH
54120: LD_INT 1
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: LD_INT 1
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 1
54150: NEG
54151: PUSH
54152: LD_INT 1
54154: NEG
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 1
54162: NEG
54163: PUSH
54164: LD_INT 2
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 1
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 2
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 2
54195: PUSH
54196: LD_INT 1
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 1
54205: PUSH
54206: LD_INT 2
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: LD_INT 2
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 1
54225: NEG
54226: PUSH
54227: LD_INT 1
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 2
54236: NEG
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 2
54247: NEG
54248: PUSH
54249: LD_INT 1
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 2
54259: NEG
54260: PUSH
54261: LD_INT 2
54263: NEG
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 2
54271: NEG
54272: PUSH
54273: LD_INT 3
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 2
54283: PUSH
54284: LD_INT 1
54286: NEG
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 3
54294: PUSH
54295: LD_INT 1
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 1
54304: PUSH
54305: LD_INT 3
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 1
54314: NEG
54315: PUSH
54316: LD_INT 2
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 3
54325: NEG
54326: PUSH
54327: LD_INT 2
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54360: LD_ADDR_VAR 0 34
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: LD_INT 1
54380: NEG
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 1
54388: PUSH
54389: LD_INT 0
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: LD_INT 1
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 0
54408: PUSH
54409: LD_INT 1
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 1
54429: NEG
54430: PUSH
54431: LD_INT 1
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 1
54441: NEG
54442: PUSH
54443: LD_INT 2
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: LD_INT 2
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 1
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 2
54475: PUSH
54476: LD_INT 1
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 2
54485: PUSH
54486: LD_INT 2
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 1
54495: PUSH
54496: LD_INT 2
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: LD_INT 1
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 2
54516: NEG
54517: PUSH
54518: LD_INT 0
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 2
54527: NEG
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 2
54539: NEG
54540: PUSH
54541: LD_INT 2
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: NEG
54552: PUSH
54553: LD_INT 3
54555: NEG
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 1
54563: PUSH
54564: LD_INT 2
54566: NEG
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 3
54574: PUSH
54575: LD_INT 2
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 2
54584: PUSH
54585: LD_INT 3
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 2
54594: NEG
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 3
54605: NEG
54606: PUSH
54607: LD_INT 1
54609: NEG
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54640: LD_ADDR_VAR 0 35
54644: PUSH
54645: LD_INT 0
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 1
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: LD_INT 1
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 1
54698: NEG
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 1
54709: NEG
54710: PUSH
54711: LD_INT 1
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 2
54721: PUSH
54722: LD_INT 1
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 2
54731: NEG
54732: PUSH
54733: LD_INT 1
54735: NEG
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54752: LD_ADDR_VAR 0 36
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: LD_INT 0
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 1
54780: PUSH
54781: LD_INT 0
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: LD_INT 1
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: LD_INT 1
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 1
54810: NEG
54811: PUSH
54812: LD_INT 0
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: NEG
54822: PUSH
54823: LD_INT 1
54825: NEG
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 1
54833: NEG
54834: PUSH
54835: LD_INT 2
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: LD_INT 2
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54864: LD_ADDR_VAR 0 37
54868: PUSH
54869: LD_INT 0
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 0
54881: PUSH
54882: LD_INT 1
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 1
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 1
54902: PUSH
54903: LD_INT 1
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 0
54912: PUSH
54913: LD_INT 1
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 1
54922: NEG
54923: PUSH
54924: LD_INT 0
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 1
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 1
54956: NEG
54957: PUSH
54958: LD_INT 1
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54976: LD_ADDR_VAR 0 38
54980: PUSH
54981: LD_INT 0
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: LD_INT 1
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: LD_INT 0
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 1
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 0
55024: PUSH
55025: LD_INT 1
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 1
55034: NEG
55035: PUSH
55036: LD_INT 0
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 1
55045: NEG
55046: PUSH
55047: LD_INT 1
55049: NEG
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 2
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 2
55067: NEG
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55088: LD_ADDR_VAR 0 39
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: LD_INT 0
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: LD_INT 1
55108: NEG
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 1
55116: PUSH
55117: LD_INT 0
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 1
55126: PUSH
55127: LD_INT 1
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 0
55136: PUSH
55137: LD_INT 1
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 1
55146: NEG
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 1
55157: NEG
55158: PUSH
55159: LD_INT 1
55161: NEG
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 1
55169: NEG
55170: PUSH
55171: LD_INT 2
55173: NEG
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: LD_INT 2
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55200: LD_ADDR_VAR 0 40
55204: PUSH
55205: LD_INT 0
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 0
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 1
55228: PUSH
55229: LD_INT 0
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 1
55238: PUSH
55239: LD_INT 1
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: LD_INT 1
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 1
55258: NEG
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 1
55269: NEG
55270: PUSH
55271: LD_INT 1
55273: NEG
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 1
55281: PUSH
55282: LD_INT 1
55284: NEG
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 1
55292: NEG
55293: PUSH
55294: LD_INT 1
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55312: LD_ADDR_VAR 0 41
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 0
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 1
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: LD_INT 1
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 1
55370: NEG
55371: PUSH
55372: LD_INT 0
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: LD_INT 1
55385: NEG
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: LD_INT 2
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 1
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 2
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 2
55426: PUSH
55427: LD_INT 1
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 2
55436: PUSH
55437: LD_INT 2
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: LD_INT 2
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 2
55467: NEG
55468: PUSH
55469: LD_INT 0
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 2
55478: NEG
55479: PUSH
55480: LD_INT 1
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 2
55490: NEG
55491: PUSH
55492: LD_INT 2
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 2
55502: NEG
55503: PUSH
55504: LD_INT 3
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 2
55514: PUSH
55515: LD_INT 1
55517: NEG
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 3
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 3
55535: PUSH
55536: LD_INT 1
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 3
55545: PUSH
55546: LD_INT 2
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 3
55555: PUSH
55556: LD_INT 3
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 2
55565: PUSH
55566: LD_INT 3
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 2
55575: NEG
55576: PUSH
55577: LD_INT 1
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 3
55586: NEG
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 3
55597: NEG
55598: PUSH
55599: LD_INT 1
55601: NEG
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 3
55609: NEG
55610: PUSH
55611: LD_INT 2
55613: NEG
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 3
55621: NEG
55622: PUSH
55623: LD_INT 3
55625: NEG
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55662: LD_ADDR_VAR 0 42
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 0
55679: PUSH
55680: LD_INT 1
55682: NEG
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 1
55690: PUSH
55691: LD_INT 0
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 1
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 0
55710: PUSH
55711: LD_INT 1
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 1
55720: NEG
55721: PUSH
55722: LD_INT 0
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 1
55731: NEG
55732: PUSH
55733: LD_INT 1
55735: NEG
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 1
55743: NEG
55744: PUSH
55745: LD_INT 2
55747: NEG
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 0
55755: PUSH
55756: LD_INT 2
55758: NEG
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 1
55766: PUSH
55767: LD_INT 1
55769: NEG
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 2
55777: PUSH
55778: LD_INT 1
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 2
55787: PUSH
55788: LD_INT 2
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 1
55797: PUSH
55798: LD_INT 2
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: LD_INT 2
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 1
55817: NEG
55818: PUSH
55819: LD_INT 1
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 2
55828: NEG
55829: PUSH
55830: LD_INT 1
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 2
55840: NEG
55841: PUSH
55842: LD_INT 2
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 2
55852: NEG
55853: PUSH
55854: LD_INT 3
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 1
55864: NEG
55865: PUSH
55866: LD_INT 3
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 0
55876: PUSH
55877: LD_INT 3
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 1
55887: PUSH
55888: LD_INT 2
55890: NEG
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 3
55898: PUSH
55899: LD_INT 2
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 3
55908: PUSH
55909: LD_INT 3
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 2
55918: PUSH
55919: LD_INT 3
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 1
55928: PUSH
55929: LD_INT 3
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: LD_INT 3
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 1
55948: NEG
55949: PUSH
55950: LD_INT 2
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 3
55959: NEG
55960: PUSH
55961: LD_INT 2
55963: NEG
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 3
55971: NEG
55972: PUSH
55973: LD_INT 3
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56012: LD_ADDR_VAR 0 43
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: LD_INT 1
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 1
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 0
56060: PUSH
56061: LD_INT 1
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 1
56070: NEG
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 1
56081: NEG
56082: PUSH
56083: LD_INT 1
56085: NEG
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 1
56093: NEG
56094: PUSH
56095: LD_INT 2
56097: NEG
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 0
56105: PUSH
56106: LD_INT 2
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 1
56116: PUSH
56117: LD_INT 1
56119: NEG
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 2
56127: PUSH
56128: LD_INT 0
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 2
56137: PUSH
56138: LD_INT 1
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: LD_INT 2
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: LD_INT 2
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 1
56167: NEG
56168: PUSH
56169: LD_INT 1
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 2
56178: NEG
56179: PUSH
56180: LD_INT 0
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 2
56189: NEG
56190: PUSH
56191: LD_INT 1
56193: NEG
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: LD_INT 3
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: LD_INT 3
56216: NEG
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: PUSH
56225: LD_INT 2
56227: NEG
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 2
56235: PUSH
56236: LD_INT 1
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 3
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 3
56256: PUSH
56257: LD_INT 1
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 1
56266: PUSH
56267: LD_INT 3
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 0
56276: PUSH
56277: LD_INT 3
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: PUSH
56288: LD_INT 2
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 2
56297: NEG
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 3
56308: NEG
56309: PUSH
56310: LD_INT 0
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 3
56319: NEG
56320: PUSH
56321: LD_INT 1
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56360: LD_ADDR_VAR 0 44
56364: PUSH
56365: LD_INT 0
56367: PUSH
56368: LD_INT 0
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 0
56377: PUSH
56378: LD_INT 1
56380: NEG
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 1
56388: PUSH
56389: LD_INT 0
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 1
56398: PUSH
56399: LD_INT 1
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 0
56408: PUSH
56409: LD_INT 1
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 1
56418: NEG
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 1
56429: NEG
56430: PUSH
56431: LD_INT 1
56433: NEG
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 1
56441: NEG
56442: PUSH
56443: LD_INT 2
56445: NEG
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: PUSH
56454: LD_INT 1
56456: NEG
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 2
56464: PUSH
56465: LD_INT 0
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 2
56474: PUSH
56475: LD_INT 1
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 2
56484: PUSH
56485: LD_INT 2
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 1
56494: PUSH
56495: LD_INT 2
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 1
56504: NEG
56505: PUSH
56506: LD_INT 1
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 2
56515: NEG
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 2
56526: NEG
56527: PUSH
56528: LD_INT 1
56530: NEG
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 2
56538: NEG
56539: PUSH
56540: LD_INT 2
56542: NEG
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 2
56550: NEG
56551: PUSH
56552: LD_INT 3
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 2
56562: PUSH
56563: LD_INT 1
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 3
56573: PUSH
56574: LD_INT 0
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 3
56583: PUSH
56584: LD_INT 1
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 3
56593: PUSH
56594: LD_INT 2
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 3
56603: PUSH
56604: LD_INT 3
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 2
56613: PUSH
56614: LD_INT 3
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 2
56623: NEG
56624: PUSH
56625: LD_INT 1
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 3
56634: NEG
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 3
56645: NEG
56646: PUSH
56647: LD_INT 1
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 3
56657: NEG
56658: PUSH
56659: LD_INT 2
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 3
56669: NEG
56670: PUSH
56671: LD_INT 3
56673: NEG
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56710: LD_ADDR_VAR 0 45
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 0
56727: PUSH
56728: LD_INT 1
56730: NEG
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 1
56738: PUSH
56739: LD_INT 0
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 1
56748: PUSH
56749: LD_INT 1
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 0
56758: PUSH
56759: LD_INT 1
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 1
56768: NEG
56769: PUSH
56770: LD_INT 0
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 1
56779: NEG
56780: PUSH
56781: LD_INT 1
56783: NEG
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 1
56791: NEG
56792: PUSH
56793: LD_INT 2
56795: NEG
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 0
56803: PUSH
56804: LD_INT 2
56806: NEG
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 1
56814: PUSH
56815: LD_INT 1
56817: NEG
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 2
56825: PUSH
56826: LD_INT 1
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 2
56835: PUSH
56836: LD_INT 2
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 1
56845: PUSH
56846: LD_INT 2
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 0
56855: PUSH
56856: LD_INT 2
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 1
56865: NEG
56866: PUSH
56867: LD_INT 1
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 2
56876: NEG
56877: PUSH
56878: LD_INT 1
56880: NEG
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 2
56888: NEG
56889: PUSH
56890: LD_INT 2
56892: NEG
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 2
56900: NEG
56901: PUSH
56902: LD_INT 3
56904: NEG
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 1
56912: NEG
56913: PUSH
56914: LD_INT 3
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: LD_INT 3
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 1
56935: PUSH
56936: LD_INT 2
56938: NEG
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 3
56946: PUSH
56947: LD_INT 2
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 3
56956: PUSH
56957: LD_INT 3
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 2
56966: PUSH
56967: LD_INT 3
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 1
56976: PUSH
56977: LD_INT 3
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: LD_INT 3
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 1
56996: NEG
56997: PUSH
56998: LD_INT 2
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 3
57007: NEG
57008: PUSH
57009: LD_INT 2
57011: NEG
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 3
57019: NEG
57020: PUSH
57021: LD_INT 3
57023: NEG
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57060: LD_ADDR_VAR 0 46
57064: PUSH
57065: LD_INT 0
57067: PUSH
57068: LD_INT 0
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: LD_INT 1
57080: NEG
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 1
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 1
57098: PUSH
57099: LD_INT 1
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 0
57108: PUSH
57109: LD_INT 1
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 1
57118: NEG
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 1
57129: NEG
57130: PUSH
57131: LD_INT 1
57133: NEG
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 1
57141: NEG
57142: PUSH
57143: LD_INT 2
57145: NEG
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 0
57153: PUSH
57154: LD_INT 2
57156: NEG
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 1
57164: PUSH
57165: LD_INT 1
57167: NEG
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 2
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 2
57185: PUSH
57186: LD_INT 1
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: LD_INT 2
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: LD_INT 2
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 1
57215: NEG
57216: PUSH
57217: LD_INT 1
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 2
57226: NEG
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 2
57237: NEG
57238: PUSH
57239: LD_INT 1
57241: NEG
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 1
57249: NEG
57250: PUSH
57251: LD_INT 3
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 0
57261: PUSH
57262: LD_INT 3
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 1
57272: PUSH
57273: LD_INT 2
57275: NEG
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 2
57283: PUSH
57284: LD_INT 1
57286: NEG
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 3
57294: PUSH
57295: LD_INT 0
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 3
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 1
57314: PUSH
57315: LD_INT 3
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 0
57324: PUSH
57325: LD_INT 3
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 1
57334: NEG
57335: PUSH
57336: LD_INT 2
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 2
57345: NEG
57346: PUSH
57347: LD_INT 1
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 3
57356: NEG
57357: PUSH
57358: LD_INT 0
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 3
57367: NEG
57368: PUSH
57369: LD_INT 1
57371: NEG
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57408: LD_ADDR_VAR 0 47
57412: PUSH
57413: LD_INT 0
57415: PUSH
57416: LD_INT 0
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 0
57425: PUSH
57426: LD_INT 1
57428: NEG
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 1
57436: PUSH
57437: LD_INT 0
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 1
57446: PUSH
57447: LD_INT 1
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 0
57456: PUSH
57457: LD_INT 1
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 1
57466: NEG
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 1
57477: NEG
57478: PUSH
57479: LD_INT 1
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 1
57489: NEG
57490: PUSH
57491: LD_INT 2
57493: NEG
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: LD_INT 2
57504: NEG
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 1
57512: PUSH
57513: LD_INT 1
57515: NEG
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 2
57523: NEG
57524: PUSH
57525: LD_INT 1
57527: NEG
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 2
57535: NEG
57536: PUSH
57537: LD_INT 2
57539: NEG
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57559: LD_ADDR_VAR 0 48
57563: PUSH
57564: LD_INT 0
57566: PUSH
57567: LD_INT 0
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 0
57576: PUSH
57577: LD_INT 1
57579: NEG
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 1
57587: PUSH
57588: LD_INT 0
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: PUSH
57598: LD_INT 1
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 0
57607: PUSH
57608: LD_INT 1
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 1
57617: NEG
57618: PUSH
57619: LD_INT 0
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 1
57628: NEG
57629: PUSH
57630: LD_INT 1
57632: NEG
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 1
57640: NEG
57641: PUSH
57642: LD_INT 2
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 0
57652: PUSH
57653: LD_INT 2
57655: NEG
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 1
57663: PUSH
57664: LD_INT 1
57666: NEG
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 2
57674: PUSH
57675: LD_INT 0
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 2
57684: PUSH
57685: LD_INT 1
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57706: LD_ADDR_VAR 0 49
57710: PUSH
57711: LD_INT 0
57713: PUSH
57714: LD_INT 0
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 0
57723: PUSH
57724: LD_INT 1
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 1
57734: PUSH
57735: LD_INT 0
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 1
57744: PUSH
57745: LD_INT 1
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 0
57754: PUSH
57755: LD_INT 1
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 1
57764: NEG
57765: PUSH
57766: LD_INT 0
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 1
57775: NEG
57776: PUSH
57777: LD_INT 1
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 2
57798: PUSH
57799: LD_INT 0
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 2
57808: PUSH
57809: LD_INT 1
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 2
57818: PUSH
57819: LD_INT 2
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 1
57828: PUSH
57829: LD_INT 2
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57850: LD_ADDR_VAR 0 50
57854: PUSH
57855: LD_INT 0
57857: PUSH
57858: LD_INT 0
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: LD_INT 1
57870: NEG
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 1
57878: PUSH
57879: LD_INT 0
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 1
57888: PUSH
57889: LD_INT 1
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 0
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 1
57908: NEG
57909: PUSH
57910: LD_INT 0
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 1
57919: NEG
57920: PUSH
57921: LD_INT 1
57923: NEG
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 2
57931: PUSH
57932: LD_INT 1
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 2
57941: PUSH
57942: LD_INT 2
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 1
57951: PUSH
57952: LD_INT 2
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 0
57961: PUSH
57962: LD_INT 2
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 1
57971: NEG
57972: PUSH
57973: LD_INT 1
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57994: LD_ADDR_VAR 0 51
57998: PUSH
57999: LD_INT 0
58001: PUSH
58002: LD_INT 0
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: LD_INT 1
58014: NEG
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 1
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 1
58032: PUSH
58033: LD_INT 1
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 0
58042: PUSH
58043: LD_INT 1
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 1
58052: NEG
58053: PUSH
58054: LD_INT 0
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 1
58063: NEG
58064: PUSH
58065: LD_INT 1
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 1
58075: PUSH
58076: LD_INT 2
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 0
58085: PUSH
58086: LD_INT 2
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 1
58095: NEG
58096: PUSH
58097: LD_INT 1
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 2
58106: NEG
58107: PUSH
58108: LD_INT 0
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 2
58117: NEG
58118: PUSH
58119: LD_INT 1
58121: NEG
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58141: LD_ADDR_VAR 0 52
58145: PUSH
58146: LD_INT 0
58148: PUSH
58149: LD_INT 0
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 0
58158: PUSH
58159: LD_INT 1
58161: NEG
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 1
58169: PUSH
58170: LD_INT 0
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 1
58179: PUSH
58180: LD_INT 1
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 0
58189: PUSH
58190: LD_INT 1
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 1
58199: NEG
58200: PUSH
58201: LD_INT 0
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 1
58210: NEG
58211: PUSH
58212: LD_INT 1
58214: NEG
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 1
58222: NEG
58223: PUSH
58224: LD_INT 2
58226: NEG
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 1
58234: NEG
58235: PUSH
58236: LD_INT 1
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 2
58245: NEG
58246: PUSH
58247: LD_INT 0
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 2
58256: NEG
58257: PUSH
58258: LD_INT 1
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 2
58268: NEG
58269: PUSH
58270: LD_INT 2
58272: NEG
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58292: LD_ADDR_VAR 0 53
58296: PUSH
58297: LD_INT 0
58299: PUSH
58300: LD_INT 0
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 0
58309: PUSH
58310: LD_INT 1
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 1
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 1
58330: PUSH
58331: LD_INT 1
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 0
58340: PUSH
58341: LD_INT 1
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 1
58350: NEG
58351: PUSH
58352: LD_INT 0
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 1
58361: NEG
58362: PUSH
58363: LD_INT 1
58365: NEG
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 1
58373: NEG
58374: PUSH
58375: LD_INT 2
58377: NEG
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 0
58385: PUSH
58386: LD_INT 2
58388: NEG
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 1
58396: PUSH
58397: LD_INT 1
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 2
58407: PUSH
58408: LD_INT 0
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 2
58417: PUSH
58418: LD_INT 1
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 2
58427: PUSH
58428: LD_INT 2
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 1
58437: PUSH
58438: LD_INT 2
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 0
58447: PUSH
58448: LD_INT 2
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 1
58457: NEG
58458: PUSH
58459: LD_INT 1
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 2
58468: NEG
58469: PUSH
58470: LD_INT 0
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 2
58479: NEG
58480: PUSH
58481: LD_INT 1
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 2
58491: NEG
58492: PUSH
58493: LD_INT 2
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58522: LD_ADDR_VAR 0 54
58526: PUSH
58527: LD_INT 0
58529: PUSH
58530: LD_INT 0
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 0
58539: PUSH
58540: LD_INT 1
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 1
58550: PUSH
58551: LD_INT 0
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 1
58560: PUSH
58561: LD_INT 1
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 0
58570: PUSH
58571: LD_INT 1
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 1
58580: NEG
58581: PUSH
58582: LD_INT 0
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 1
58591: NEG
58592: PUSH
58593: LD_INT 1
58595: NEG
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 1
58603: NEG
58604: PUSH
58605: LD_INT 2
58607: NEG
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 0
58615: PUSH
58616: LD_INT 2
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 1
58626: PUSH
58627: LD_INT 1
58629: NEG
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 2
58637: PUSH
58638: LD_INT 0
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 2
58647: PUSH
58648: LD_INT 1
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 2
58657: PUSH
58658: LD_INT 2
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 1
58667: PUSH
58668: LD_INT 2
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 0
58677: PUSH
58678: LD_INT 2
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 1
58687: NEG
58688: PUSH
58689: LD_INT 1
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 2
58698: NEG
58699: PUSH
58700: LD_INT 0
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 2
58709: NEG
58710: PUSH
58711: LD_INT 1
58713: NEG
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 2
58721: NEG
58722: PUSH
58723: LD_INT 2
58725: NEG
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58752: LD_ADDR_VAR 0 55
58756: PUSH
58757: LD_INT 0
58759: PUSH
58760: LD_INT 0
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 0
58769: PUSH
58770: LD_INT 1
58772: NEG
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 1
58780: PUSH
58781: LD_INT 0
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 1
58790: PUSH
58791: LD_INT 1
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 0
58800: PUSH
58801: LD_INT 1
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 1
58810: NEG
58811: PUSH
58812: LD_INT 0
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 1
58821: NEG
58822: PUSH
58823: LD_INT 1
58825: NEG
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 1
58833: NEG
58834: PUSH
58835: LD_INT 2
58837: NEG
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 0
58845: PUSH
58846: LD_INT 2
58848: NEG
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 1
58856: PUSH
58857: LD_INT 1
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 2
58867: PUSH
58868: LD_INT 0
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 2
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 2
58887: PUSH
58888: LD_INT 2
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 1
58897: PUSH
58898: LD_INT 2
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 0
58907: PUSH
58908: LD_INT 2
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 1
58917: NEG
58918: PUSH
58919: LD_INT 1
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 2
58928: NEG
58929: PUSH
58930: LD_INT 0
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 2
58939: NEG
58940: PUSH
58941: LD_INT 1
58943: NEG
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 2
58951: NEG
58952: PUSH
58953: LD_INT 2
58955: NEG
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58982: LD_ADDR_VAR 0 56
58986: PUSH
58987: LD_INT 0
58989: PUSH
58990: LD_INT 0
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 0
58999: PUSH
59000: LD_INT 1
59002: NEG
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 1
59010: PUSH
59011: LD_INT 0
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 1
59020: PUSH
59021: LD_INT 1
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 0
59030: PUSH
59031: LD_INT 1
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 1
59040: NEG
59041: PUSH
59042: LD_INT 0
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 1
59051: NEG
59052: PUSH
59053: LD_INT 1
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 1
59063: NEG
59064: PUSH
59065: LD_INT 2
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 0
59075: PUSH
59076: LD_INT 2
59078: NEG
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 1
59086: PUSH
59087: LD_INT 1
59089: NEG
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 2
59097: PUSH
59098: LD_INT 0
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 2
59107: PUSH
59108: LD_INT 1
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 2
59117: PUSH
59118: LD_INT 2
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 1
59127: PUSH
59128: LD_INT 2
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 0
59137: PUSH
59138: LD_INT 2
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 1
59147: NEG
59148: PUSH
59149: LD_INT 1
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 2
59158: NEG
59159: PUSH
59160: LD_INT 0
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 2
59169: NEG
59170: PUSH
59171: LD_INT 1
59173: NEG
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 2
59181: NEG
59182: PUSH
59183: LD_INT 2
59185: NEG
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59212: LD_ADDR_VAR 0 57
59216: PUSH
59217: LD_INT 0
59219: PUSH
59220: LD_INT 0
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 0
59229: PUSH
59230: LD_INT 1
59232: NEG
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 1
59240: PUSH
59241: LD_INT 0
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 1
59250: PUSH
59251: LD_INT 1
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 0
59260: PUSH
59261: LD_INT 1
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 1
59270: NEG
59271: PUSH
59272: LD_INT 0
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 1
59281: NEG
59282: PUSH
59283: LD_INT 1
59285: NEG
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 1
59293: NEG
59294: PUSH
59295: LD_INT 2
59297: NEG
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 0
59305: PUSH
59306: LD_INT 2
59308: NEG
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 1
59316: PUSH
59317: LD_INT 1
59319: NEG
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 2
59327: PUSH
59328: LD_INT 0
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 2
59337: PUSH
59338: LD_INT 1
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 2
59347: PUSH
59348: LD_INT 2
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 1
59357: PUSH
59358: LD_INT 2
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 0
59367: PUSH
59368: LD_INT 2
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 1
59377: NEG
59378: PUSH
59379: LD_INT 1
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 2
59388: NEG
59389: PUSH
59390: LD_INT 0
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 2
59399: NEG
59400: PUSH
59401: LD_INT 1
59403: NEG
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 2
59411: NEG
59412: PUSH
59413: LD_INT 2
59415: NEG
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59442: LD_ADDR_VAR 0 58
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: LD_INT 0
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: LD_INT 1
59462: NEG
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 1
59470: PUSH
59471: LD_INT 0
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 1
59480: PUSH
59481: LD_INT 1
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 0
59490: PUSH
59491: LD_INT 1
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 1
59500: NEG
59501: PUSH
59502: LD_INT 0
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 1
59511: NEG
59512: PUSH
59513: LD_INT 1
59515: NEG
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 1
59523: NEG
59524: PUSH
59525: LD_INT 2
59527: NEG
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 0
59535: PUSH
59536: LD_INT 2
59538: NEG
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 1
59546: PUSH
59547: LD_INT 1
59549: NEG
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 2
59557: PUSH
59558: LD_INT 0
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 2
59567: PUSH
59568: LD_INT 1
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 2
59577: PUSH
59578: LD_INT 2
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 1
59587: PUSH
59588: LD_INT 2
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 0
59597: PUSH
59598: LD_INT 2
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 1
59607: NEG
59608: PUSH
59609: LD_INT 1
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 2
59618: NEG
59619: PUSH
59620: LD_INT 0
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 2
59629: NEG
59630: PUSH
59631: LD_INT 1
59633: NEG
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 2
59641: NEG
59642: PUSH
59643: LD_INT 2
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59672: LD_ADDR_VAR 0 59
59676: PUSH
59677: LD_INT 0
59679: PUSH
59680: LD_INT 0
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 0
59689: PUSH
59690: LD_INT 1
59692: NEG
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 1
59700: PUSH
59701: LD_INT 0
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 1
59710: PUSH
59711: LD_INT 1
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 0
59720: PUSH
59721: LD_INT 1
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 1
59730: NEG
59731: PUSH
59732: LD_INT 0
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 1
59741: NEG
59742: PUSH
59743: LD_INT 1
59745: NEG
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59760: LD_ADDR_VAR 0 60
59764: PUSH
59765: LD_INT 0
59767: PUSH
59768: LD_INT 0
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 0
59777: PUSH
59778: LD_INT 1
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 1
59788: PUSH
59789: LD_INT 0
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 1
59798: PUSH
59799: LD_INT 1
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 0
59808: PUSH
59809: LD_INT 1
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 1
59818: NEG
59819: PUSH
59820: LD_INT 0
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 1
59829: NEG
59830: PUSH
59831: LD_INT 1
59833: NEG
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59848: LD_ADDR_VAR 0 61
59852: PUSH
59853: LD_INT 0
59855: PUSH
59856: LD_INT 0
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 0
59865: PUSH
59866: LD_INT 1
59868: NEG
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 1
59876: PUSH
59877: LD_INT 0
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 1
59886: PUSH
59887: LD_INT 1
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 0
59896: PUSH
59897: LD_INT 1
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 1
59906: NEG
59907: PUSH
59908: LD_INT 0
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 1
59917: NEG
59918: PUSH
59919: LD_INT 1
59921: NEG
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59936: LD_ADDR_VAR 0 62
59940: PUSH
59941: LD_INT 0
59943: PUSH
59944: LD_INT 0
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 0
59953: PUSH
59954: LD_INT 1
59956: NEG
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 1
59964: PUSH
59965: LD_INT 0
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 1
59974: PUSH
59975: LD_INT 1
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 0
59984: PUSH
59985: LD_INT 1
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 1
59994: NEG
59995: PUSH
59996: LD_INT 0
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 1
60005: NEG
60006: PUSH
60007: LD_INT 1
60009: NEG
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60024: LD_ADDR_VAR 0 63
60028: PUSH
60029: LD_INT 0
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 0
60041: PUSH
60042: LD_INT 1
60044: NEG
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 1
60052: PUSH
60053: LD_INT 0
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 1
60062: PUSH
60063: LD_INT 1
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 0
60072: PUSH
60073: LD_INT 1
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 1
60082: NEG
60083: PUSH
60084: LD_INT 0
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 1
60093: NEG
60094: PUSH
60095: LD_INT 1
60097: NEG
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60112: LD_ADDR_VAR 0 64
60116: PUSH
60117: LD_INT 0
60119: PUSH
60120: LD_INT 0
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 0
60129: PUSH
60130: LD_INT 1
60132: NEG
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 1
60140: PUSH
60141: LD_INT 0
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 1
60150: PUSH
60151: LD_INT 1
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 0
60160: PUSH
60161: LD_INT 1
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 1
60170: NEG
60171: PUSH
60172: LD_INT 0
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 1
60181: NEG
60182: PUSH
60183: LD_INT 1
60185: NEG
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: ST_TO_ADDR
// end ; 1 :
60200: GO 66097
60202: LD_INT 1
60204: DOUBLE
60205: EQUAL
60206: IFTRUE 60210
60208: GO 62833
60210: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60211: LD_ADDR_VAR 0 11
60215: PUSH
60216: LD_INT 1
60218: NEG
60219: PUSH
60220: LD_INT 3
60222: NEG
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 0
60230: PUSH
60231: LD_INT 3
60233: NEG
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 1
60241: PUSH
60242: LD_INT 2
60244: NEG
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: LIST
60254: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60255: LD_ADDR_VAR 0 12
60259: PUSH
60260: LD_INT 2
60262: PUSH
60263: LD_INT 1
60265: NEG
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 3
60273: PUSH
60274: LD_INT 0
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 3
60283: PUSH
60284: LD_INT 1
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: LIST
60295: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60296: LD_ADDR_VAR 0 13
60300: PUSH
60301: LD_INT 3
60303: PUSH
60304: LD_INT 2
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 3
60313: PUSH
60314: LD_INT 3
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 2
60323: PUSH
60324: LD_INT 3
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: LIST
60335: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60336: LD_ADDR_VAR 0 14
60340: PUSH
60341: LD_INT 1
60343: PUSH
60344: LD_INT 3
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 0
60353: PUSH
60354: LD_INT 3
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 1
60363: NEG
60364: PUSH
60365: LD_INT 2
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: LIST
60376: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60377: LD_ADDR_VAR 0 15
60381: PUSH
60382: LD_INT 2
60384: NEG
60385: PUSH
60386: LD_INT 1
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 3
60395: NEG
60396: PUSH
60397: LD_INT 0
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 3
60406: NEG
60407: PUSH
60408: LD_INT 1
60410: NEG
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: LIST
60420: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60421: LD_ADDR_VAR 0 16
60425: PUSH
60426: LD_INT 2
60428: NEG
60429: PUSH
60430: LD_INT 3
60432: NEG
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 3
60440: NEG
60441: PUSH
60442: LD_INT 2
60444: NEG
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 3
60452: NEG
60453: PUSH
60454: LD_INT 3
60456: NEG
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: LIST
60466: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60467: LD_ADDR_VAR 0 17
60471: PUSH
60472: LD_INT 1
60474: NEG
60475: PUSH
60476: LD_INT 3
60478: NEG
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 0
60486: PUSH
60487: LD_INT 3
60489: NEG
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 1
60497: PUSH
60498: LD_INT 2
60500: NEG
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: LIST
60510: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60511: LD_ADDR_VAR 0 18
60515: PUSH
60516: LD_INT 2
60518: PUSH
60519: LD_INT 1
60521: NEG
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 3
60529: PUSH
60530: LD_INT 0
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 3
60539: PUSH
60540: LD_INT 1
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: LIST
60551: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60552: LD_ADDR_VAR 0 19
60556: PUSH
60557: LD_INT 3
60559: PUSH
60560: LD_INT 2
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 3
60569: PUSH
60570: LD_INT 3
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 2
60579: PUSH
60580: LD_INT 3
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: LIST
60591: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60592: LD_ADDR_VAR 0 20
60596: PUSH
60597: LD_INT 1
60599: PUSH
60600: LD_INT 3
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 0
60609: PUSH
60610: LD_INT 3
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 1
60619: NEG
60620: PUSH
60621: LD_INT 2
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: LIST
60632: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60633: LD_ADDR_VAR 0 21
60637: PUSH
60638: LD_INT 2
60640: NEG
60641: PUSH
60642: LD_INT 1
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 3
60651: NEG
60652: PUSH
60653: LD_INT 0
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 3
60662: NEG
60663: PUSH
60664: LD_INT 1
60666: NEG
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: LIST
60676: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60677: LD_ADDR_VAR 0 22
60681: PUSH
60682: LD_INT 2
60684: NEG
60685: PUSH
60686: LD_INT 3
60688: NEG
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 3
60696: NEG
60697: PUSH
60698: LD_INT 2
60700: NEG
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 3
60708: NEG
60709: PUSH
60710: LD_INT 3
60712: NEG
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: LIST
60722: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60723: LD_ADDR_VAR 0 23
60727: PUSH
60728: LD_INT 0
60730: PUSH
60731: LD_INT 3
60733: NEG
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 1
60741: NEG
60742: PUSH
60743: LD_INT 4
60745: NEG
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 1
60753: PUSH
60754: LD_INT 3
60756: NEG
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: LIST
60766: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60767: LD_ADDR_VAR 0 24
60771: PUSH
60772: LD_INT 3
60774: PUSH
60775: LD_INT 0
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 3
60784: PUSH
60785: LD_INT 1
60787: NEG
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 4
60795: PUSH
60796: LD_INT 1
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: LIST
60807: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60808: LD_ADDR_VAR 0 25
60812: PUSH
60813: LD_INT 3
60815: PUSH
60816: LD_INT 3
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 4
60825: PUSH
60826: LD_INT 3
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 3
60835: PUSH
60836: LD_INT 4
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: LIST
60847: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60848: LD_ADDR_VAR 0 26
60852: PUSH
60853: LD_INT 0
60855: PUSH
60856: LD_INT 3
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 1
60865: PUSH
60866: LD_INT 4
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 1
60875: NEG
60876: PUSH
60877: LD_INT 3
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: LIST
60888: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60889: LD_ADDR_VAR 0 27
60893: PUSH
60894: LD_INT 3
60896: NEG
60897: PUSH
60898: LD_INT 0
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 3
60907: NEG
60908: PUSH
60909: LD_INT 1
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 4
60918: NEG
60919: PUSH
60920: LD_INT 1
60922: NEG
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: LIST
60932: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60933: LD_ADDR_VAR 0 28
60937: PUSH
60938: LD_INT 3
60940: NEG
60941: PUSH
60942: LD_INT 3
60944: NEG
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 3
60952: NEG
60953: PUSH
60954: LD_INT 4
60956: NEG
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 4
60964: NEG
60965: PUSH
60966: LD_INT 3
60968: NEG
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: LIST
60978: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60979: LD_ADDR_VAR 0 29
60983: PUSH
60984: LD_INT 1
60986: NEG
60987: PUSH
60988: LD_INT 3
60990: NEG
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 0
60998: PUSH
60999: LD_INT 3
61001: NEG
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 1
61009: PUSH
61010: LD_INT 2
61012: NEG
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 1
61020: NEG
61021: PUSH
61022: LD_INT 4
61024: NEG
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 0
61032: PUSH
61033: LD_INT 4
61035: NEG
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 1
61043: PUSH
61044: LD_INT 3
61046: NEG
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 1
61054: NEG
61055: PUSH
61056: LD_INT 5
61058: NEG
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 0
61066: PUSH
61067: LD_INT 5
61069: NEG
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 1
61077: PUSH
61078: LD_INT 4
61080: NEG
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 1
61088: NEG
61089: PUSH
61090: LD_INT 6
61092: NEG
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 0
61100: PUSH
61101: LD_INT 6
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 1
61111: PUSH
61112: LD_INT 5
61114: NEG
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61134: LD_ADDR_VAR 0 30
61138: PUSH
61139: LD_INT 2
61141: PUSH
61142: LD_INT 1
61144: NEG
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 3
61152: PUSH
61153: LD_INT 0
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 3
61162: PUSH
61163: LD_INT 1
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 3
61172: PUSH
61173: LD_INT 1
61175: NEG
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 4
61183: PUSH
61184: LD_INT 0
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 4
61193: PUSH
61194: LD_INT 1
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 4
61203: PUSH
61204: LD_INT 1
61206: NEG
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 5
61214: PUSH
61215: LD_INT 0
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 5
61224: PUSH
61225: LD_INT 1
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 5
61234: PUSH
61235: LD_INT 1
61237: NEG
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 6
61245: PUSH
61246: LD_INT 0
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 6
61255: PUSH
61256: LD_INT 1
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61277: LD_ADDR_VAR 0 31
61281: PUSH
61282: LD_INT 3
61284: PUSH
61285: LD_INT 2
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 3
61294: PUSH
61295: LD_INT 3
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 2
61304: PUSH
61305: LD_INT 3
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 4
61314: PUSH
61315: LD_INT 3
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 4
61324: PUSH
61325: LD_INT 4
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 3
61334: PUSH
61335: LD_INT 4
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 5
61344: PUSH
61345: LD_INT 4
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 5
61354: PUSH
61355: LD_INT 5
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 4
61364: PUSH
61365: LD_INT 5
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 6
61374: PUSH
61375: LD_INT 5
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 6
61384: PUSH
61385: LD_INT 6
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 5
61394: PUSH
61395: LD_INT 6
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61416: LD_ADDR_VAR 0 32
61420: PUSH
61421: LD_INT 1
61423: PUSH
61424: LD_INT 3
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 0
61433: PUSH
61434: LD_INT 3
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 1
61443: NEG
61444: PUSH
61445: LD_INT 2
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 1
61454: PUSH
61455: LD_INT 4
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 0
61464: PUSH
61465: LD_INT 4
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 1
61474: NEG
61475: PUSH
61476: LD_INT 3
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 1
61485: PUSH
61486: LD_INT 5
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 0
61495: PUSH
61496: LD_INT 5
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 1
61505: NEG
61506: PUSH
61507: LD_INT 4
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 1
61516: PUSH
61517: LD_INT 6
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 0
61526: PUSH
61527: LD_INT 6
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 1
61536: NEG
61537: PUSH
61538: LD_INT 5
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61559: LD_ADDR_VAR 0 33
61563: PUSH
61564: LD_INT 2
61566: NEG
61567: PUSH
61568: LD_INT 1
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 3
61577: NEG
61578: PUSH
61579: LD_INT 0
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 3
61588: NEG
61589: PUSH
61590: LD_INT 1
61592: NEG
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 3
61600: NEG
61601: PUSH
61602: LD_INT 1
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 4
61611: NEG
61612: PUSH
61613: LD_INT 0
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 4
61622: NEG
61623: PUSH
61624: LD_INT 1
61626: NEG
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 4
61634: NEG
61635: PUSH
61636: LD_INT 1
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 5
61645: NEG
61646: PUSH
61647: LD_INT 0
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 5
61656: NEG
61657: PUSH
61658: LD_INT 1
61660: NEG
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 5
61668: NEG
61669: PUSH
61670: LD_INT 1
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 6
61679: NEG
61680: PUSH
61681: LD_INT 0
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 6
61690: NEG
61691: PUSH
61692: LD_INT 1
61694: NEG
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61714: LD_ADDR_VAR 0 34
61718: PUSH
61719: LD_INT 2
61721: NEG
61722: PUSH
61723: LD_INT 3
61725: NEG
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 3
61733: NEG
61734: PUSH
61735: LD_INT 2
61737: NEG
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 3
61745: NEG
61746: PUSH
61747: LD_INT 3
61749: NEG
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 3
61757: NEG
61758: PUSH
61759: LD_INT 4
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 4
61769: NEG
61770: PUSH
61771: LD_INT 3
61773: NEG
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 4
61781: NEG
61782: PUSH
61783: LD_INT 4
61785: NEG
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 4
61793: NEG
61794: PUSH
61795: LD_INT 5
61797: NEG
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 5
61805: NEG
61806: PUSH
61807: LD_INT 4
61809: NEG
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 5
61817: NEG
61818: PUSH
61819: LD_INT 5
61821: NEG
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 5
61829: NEG
61830: PUSH
61831: LD_INT 6
61833: NEG
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 6
61841: NEG
61842: PUSH
61843: LD_INT 5
61845: NEG
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 6
61853: NEG
61854: PUSH
61855: LD_INT 6
61857: NEG
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61877: LD_ADDR_VAR 0 41
61881: PUSH
61882: LD_INT 0
61884: PUSH
61885: LD_INT 2
61887: NEG
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 1
61895: NEG
61896: PUSH
61897: LD_INT 3
61899: NEG
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 1
61907: PUSH
61908: LD_INT 2
61910: NEG
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: LIST
61920: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61921: LD_ADDR_VAR 0 42
61925: PUSH
61926: LD_INT 2
61928: PUSH
61929: LD_INT 0
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 2
61938: PUSH
61939: LD_INT 1
61941: NEG
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 3
61949: PUSH
61950: LD_INT 1
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: LIST
61961: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61962: LD_ADDR_VAR 0 43
61966: PUSH
61967: LD_INT 2
61969: PUSH
61970: LD_INT 2
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 3
61979: PUSH
61980: LD_INT 2
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 2
61989: PUSH
61990: LD_INT 3
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: LIST
62001: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62002: LD_ADDR_VAR 0 44
62006: PUSH
62007: LD_INT 0
62009: PUSH
62010: LD_INT 2
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 1
62019: PUSH
62020: LD_INT 3
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 1
62029: NEG
62030: PUSH
62031: LD_INT 2
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: LIST
62042: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62043: LD_ADDR_VAR 0 45
62047: PUSH
62048: LD_INT 2
62050: NEG
62051: PUSH
62052: LD_INT 0
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 2
62061: NEG
62062: PUSH
62063: LD_INT 1
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 3
62072: NEG
62073: PUSH
62074: LD_INT 1
62076: NEG
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: LIST
62086: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62087: LD_ADDR_VAR 0 46
62091: PUSH
62092: LD_INT 2
62094: NEG
62095: PUSH
62096: LD_INT 2
62098: NEG
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 2
62106: NEG
62107: PUSH
62108: LD_INT 3
62110: NEG
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 3
62118: NEG
62119: PUSH
62120: LD_INT 2
62122: NEG
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: LIST
62132: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62133: LD_ADDR_VAR 0 47
62137: PUSH
62138: LD_INT 2
62140: NEG
62141: PUSH
62142: LD_INT 3
62144: NEG
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 1
62152: NEG
62153: PUSH
62154: LD_INT 3
62156: NEG
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62166: LD_ADDR_VAR 0 48
62170: PUSH
62171: LD_INT 1
62173: PUSH
62174: LD_INT 2
62176: NEG
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 2
62184: PUSH
62185: LD_INT 1
62187: NEG
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62197: LD_ADDR_VAR 0 49
62201: PUSH
62202: LD_INT 3
62204: PUSH
62205: LD_INT 1
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 3
62214: PUSH
62215: LD_INT 2
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
62226: LD_ADDR_VAR 0 50
62230: PUSH
62231: LD_INT 2
62233: PUSH
62234: LD_INT 3
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 1
62243: PUSH
62244: LD_INT 3
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62255: LD_ADDR_VAR 0 51
62259: PUSH
62260: LD_INT 1
62262: NEG
62263: PUSH
62264: LD_INT 2
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 2
62273: NEG
62274: PUSH
62275: LD_INT 1
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62286: LD_ADDR_VAR 0 52
62290: PUSH
62291: LD_INT 3
62293: NEG
62294: PUSH
62295: LD_INT 1
62297: NEG
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 3
62305: NEG
62306: PUSH
62307: LD_INT 2
62309: NEG
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62319: LD_ADDR_VAR 0 53
62323: PUSH
62324: LD_INT 1
62326: NEG
62327: PUSH
62328: LD_INT 3
62330: NEG
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 0
62338: PUSH
62339: LD_INT 3
62341: NEG
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 1
62349: PUSH
62350: LD_INT 2
62352: NEG
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: LIST
62362: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62363: LD_ADDR_VAR 0 54
62367: PUSH
62368: LD_INT 2
62370: PUSH
62371: LD_INT 1
62373: NEG
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 3
62381: PUSH
62382: LD_INT 0
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 3
62391: PUSH
62392: LD_INT 1
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: LIST
62403: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62404: LD_ADDR_VAR 0 55
62408: PUSH
62409: LD_INT 3
62411: PUSH
62412: LD_INT 2
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 3
62421: PUSH
62422: LD_INT 3
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 2
62431: PUSH
62432: LD_INT 3
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: LIST
62443: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62444: LD_ADDR_VAR 0 56
62448: PUSH
62449: LD_INT 1
62451: PUSH
62452: LD_INT 3
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 0
62461: PUSH
62462: LD_INT 3
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 1
62471: NEG
62472: PUSH
62473: LD_INT 2
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: LIST
62484: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62485: LD_ADDR_VAR 0 57
62489: PUSH
62490: LD_INT 2
62492: NEG
62493: PUSH
62494: LD_INT 1
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 3
62503: NEG
62504: PUSH
62505: LD_INT 0
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 3
62514: NEG
62515: PUSH
62516: LD_INT 1
62518: NEG
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: LIST
62528: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62529: LD_ADDR_VAR 0 58
62533: PUSH
62534: LD_INT 2
62536: NEG
62537: PUSH
62538: LD_INT 3
62540: NEG
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 3
62548: NEG
62549: PUSH
62550: LD_INT 2
62552: NEG
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 3
62560: NEG
62561: PUSH
62562: LD_INT 3
62564: NEG
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: LIST
62574: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62575: LD_ADDR_VAR 0 59
62579: PUSH
62580: LD_INT 1
62582: NEG
62583: PUSH
62584: LD_INT 2
62586: NEG
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 0
62594: PUSH
62595: LD_INT 2
62597: NEG
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 1
62605: PUSH
62606: LD_INT 1
62608: NEG
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: LIST
62618: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62619: LD_ADDR_VAR 0 60
62623: PUSH
62624: LD_INT 1
62626: PUSH
62627: LD_INT 1
62629: NEG
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 2
62637: PUSH
62638: LD_INT 0
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 2
62647: PUSH
62648: LD_INT 1
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: LIST
62659: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62660: LD_ADDR_VAR 0 61
62664: PUSH
62665: LD_INT 2
62667: PUSH
62668: LD_INT 1
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 2
62677: PUSH
62678: LD_INT 2
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 1
62687: PUSH
62688: LD_INT 2
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: LIST
62699: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62700: LD_ADDR_VAR 0 62
62704: PUSH
62705: LD_INT 1
62707: PUSH
62708: LD_INT 2
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 0
62717: PUSH
62718: LD_INT 2
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 1
62727: NEG
62728: PUSH
62729: LD_INT 1
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: LIST
62740: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62741: LD_ADDR_VAR 0 63
62745: PUSH
62746: LD_INT 1
62748: NEG
62749: PUSH
62750: LD_INT 1
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 2
62759: NEG
62760: PUSH
62761: LD_INT 0
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 2
62770: NEG
62771: PUSH
62772: LD_INT 1
62774: NEG
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: LIST
62784: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62785: LD_ADDR_VAR 0 64
62789: PUSH
62790: LD_INT 1
62792: NEG
62793: PUSH
62794: LD_INT 2
62796: NEG
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 2
62804: NEG
62805: PUSH
62806: LD_INT 1
62808: NEG
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 2
62816: NEG
62817: PUSH
62818: LD_INT 2
62820: NEG
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: LIST
62830: ST_TO_ADDR
// end ; 2 :
62831: GO 66097
62833: LD_INT 2
62835: DOUBLE
62836: EQUAL
62837: IFTRUE 62841
62839: GO 66096
62841: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62842: LD_ADDR_VAR 0 29
62846: PUSH
62847: LD_INT 4
62849: PUSH
62850: LD_INT 0
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 4
62859: PUSH
62860: LD_INT 1
62862: NEG
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 5
62870: PUSH
62871: LD_INT 0
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 5
62880: PUSH
62881: LD_INT 1
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 4
62890: PUSH
62891: LD_INT 1
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 3
62900: PUSH
62901: LD_INT 0
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 3
62910: PUSH
62911: LD_INT 1
62913: NEG
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 3
62921: PUSH
62922: LD_INT 2
62924: NEG
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 5
62932: PUSH
62933: LD_INT 2
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: LD_INT 3
62942: PUSH
62943: LD_INT 3
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 3
62952: PUSH
62953: LD_INT 2
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 4
62962: PUSH
62963: LD_INT 3
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 4
62972: PUSH
62973: LD_INT 4
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 3
62982: PUSH
62983: LD_INT 4
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 2
62992: PUSH
62993: LD_INT 3
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 2
63002: PUSH
63003: LD_INT 2
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 4
63012: PUSH
63013: LD_INT 2
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 2
63022: PUSH
63023: LD_INT 4
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 0
63032: PUSH
63033: LD_INT 4
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 0
63042: PUSH
63043: LD_INT 3
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 1
63052: PUSH
63053: LD_INT 4
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 1
63062: PUSH
63063: LD_INT 5
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 0
63072: PUSH
63073: LD_INT 5
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 1
63082: NEG
63083: PUSH
63084: LD_INT 4
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 1
63093: NEG
63094: PUSH
63095: LD_INT 3
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 2
63104: PUSH
63105: LD_INT 5
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 2
63114: NEG
63115: PUSH
63116: LD_INT 3
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 3
63125: NEG
63126: PUSH
63127: LD_INT 0
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 3
63136: NEG
63137: PUSH
63138: LD_INT 1
63140: NEG
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 2
63148: NEG
63149: PUSH
63150: LD_INT 0
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 2
63159: NEG
63160: PUSH
63161: LD_INT 1
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 3
63170: NEG
63171: PUSH
63172: LD_INT 1
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 4
63181: NEG
63182: PUSH
63183: LD_INT 0
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 4
63192: NEG
63193: PUSH
63194: LD_INT 1
63196: NEG
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 4
63204: NEG
63205: PUSH
63206: LD_INT 2
63208: NEG
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 2
63216: NEG
63217: PUSH
63218: LD_INT 2
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 4
63227: NEG
63228: PUSH
63229: LD_INT 4
63231: NEG
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 4
63239: NEG
63240: PUSH
63241: LD_INT 5
63243: NEG
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 3
63251: NEG
63252: PUSH
63253: LD_INT 4
63255: NEG
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 3
63263: NEG
63264: PUSH
63265: LD_INT 3
63267: NEG
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: LD_INT 4
63275: NEG
63276: PUSH
63277: LD_INT 3
63279: NEG
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 5
63287: NEG
63288: PUSH
63289: LD_INT 4
63291: NEG
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 5
63299: NEG
63300: PUSH
63301: LD_INT 5
63303: NEG
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 3
63311: NEG
63312: PUSH
63313: LD_INT 5
63315: NEG
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 5
63323: NEG
63324: PUSH
63325: LD_INT 3
63327: NEG
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63380: LD_ADDR_VAR 0 30
63384: PUSH
63385: LD_INT 4
63387: PUSH
63388: LD_INT 4
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 4
63397: PUSH
63398: LD_INT 3
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 5
63407: PUSH
63408: LD_INT 4
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 5
63417: PUSH
63418: LD_INT 5
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 4
63427: PUSH
63428: LD_INT 5
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 3
63437: PUSH
63438: LD_INT 4
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 3
63447: PUSH
63448: LD_INT 3
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 5
63457: PUSH
63458: LD_INT 3
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 3
63467: PUSH
63468: LD_INT 5
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 0
63477: PUSH
63478: LD_INT 3
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 0
63487: PUSH
63488: LD_INT 2
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 1
63497: PUSH
63498: LD_INT 3
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 1
63507: PUSH
63508: LD_INT 4
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 0
63517: PUSH
63518: LD_INT 4
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 1
63527: NEG
63528: PUSH
63529: LD_INT 3
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 1
63538: NEG
63539: PUSH
63540: LD_INT 2
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 2
63549: PUSH
63550: LD_INT 4
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 2
63559: NEG
63560: PUSH
63561: LD_INT 2
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 4
63570: NEG
63571: PUSH
63572: LD_INT 0
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 4
63581: NEG
63582: PUSH
63583: LD_INT 1
63585: NEG
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 3
63593: NEG
63594: PUSH
63595: LD_INT 0
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 3
63604: NEG
63605: PUSH
63606: LD_INT 1
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 4
63615: NEG
63616: PUSH
63617: LD_INT 1
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 5
63626: NEG
63627: PUSH
63628: LD_INT 0
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 5
63637: NEG
63638: PUSH
63639: LD_INT 1
63641: NEG
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 5
63649: NEG
63650: PUSH
63651: LD_INT 2
63653: NEG
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 3
63661: NEG
63662: PUSH
63663: LD_INT 2
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 3
63672: NEG
63673: PUSH
63674: LD_INT 3
63676: NEG
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 3
63684: NEG
63685: PUSH
63686: LD_INT 4
63688: NEG
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 2
63696: NEG
63697: PUSH
63698: LD_INT 3
63700: NEG
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 2
63708: NEG
63709: PUSH
63710: LD_INT 2
63712: NEG
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 3
63720: NEG
63721: PUSH
63722: LD_INT 2
63724: NEG
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 4
63732: NEG
63733: PUSH
63734: LD_INT 3
63736: NEG
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 4
63744: NEG
63745: PUSH
63746: LD_INT 4
63748: NEG
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 2
63756: NEG
63757: PUSH
63758: LD_INT 4
63760: NEG
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 4
63768: NEG
63769: PUSH
63770: LD_INT 2
63772: NEG
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 0
63780: PUSH
63781: LD_INT 4
63783: NEG
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 0
63791: PUSH
63792: LD_INT 5
63794: NEG
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 1
63802: PUSH
63803: LD_INT 4
63805: NEG
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 1
63813: PUSH
63814: LD_INT 3
63816: NEG
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 0
63824: PUSH
63825: LD_INT 3
63827: NEG
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 1
63835: NEG
63836: PUSH
63837: LD_INT 4
63839: NEG
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 1
63847: NEG
63848: PUSH
63849: LD_INT 5
63851: NEG
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 2
63859: PUSH
63860: LD_INT 3
63862: NEG
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 2
63870: NEG
63871: PUSH
63872: LD_INT 5
63874: NEG
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63927: LD_ADDR_VAR 0 31
63931: PUSH
63932: LD_INT 0
63934: PUSH
63935: LD_INT 4
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 0
63944: PUSH
63945: LD_INT 3
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 1
63954: PUSH
63955: LD_INT 4
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 1
63964: PUSH
63965: LD_INT 5
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 0
63974: PUSH
63975: LD_INT 5
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 1
63984: NEG
63985: PUSH
63986: LD_INT 4
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 1
63995: NEG
63996: PUSH
63997: LD_INT 3
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 2
64006: PUSH
64007: LD_INT 5
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 2
64016: NEG
64017: PUSH
64018: LD_INT 3
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 3
64027: NEG
64028: PUSH
64029: LD_INT 0
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 3
64038: NEG
64039: PUSH
64040: LD_INT 1
64042: NEG
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 2
64050: NEG
64051: PUSH
64052: LD_INT 0
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 2
64061: NEG
64062: PUSH
64063: LD_INT 1
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 3
64072: NEG
64073: PUSH
64074: LD_INT 1
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 4
64083: NEG
64084: PUSH
64085: LD_INT 0
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 4
64094: NEG
64095: PUSH
64096: LD_INT 1
64098: NEG
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PUSH
64104: LD_INT 4
64106: NEG
64107: PUSH
64108: LD_INT 2
64110: NEG
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 2
64118: NEG
64119: PUSH
64120: LD_INT 2
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: LD_INT 4
64129: NEG
64130: PUSH
64131: LD_INT 4
64133: NEG
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: LD_INT 4
64141: NEG
64142: PUSH
64143: LD_INT 5
64145: NEG
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: LD_INT 3
64153: NEG
64154: PUSH
64155: LD_INT 4
64157: NEG
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 3
64165: NEG
64166: PUSH
64167: LD_INT 3
64169: NEG
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 4
64177: NEG
64178: PUSH
64179: LD_INT 3
64181: NEG
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 5
64189: NEG
64190: PUSH
64191: LD_INT 4
64193: NEG
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 5
64201: NEG
64202: PUSH
64203: LD_INT 5
64205: NEG
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 3
64213: NEG
64214: PUSH
64215: LD_INT 5
64217: NEG
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 5
64225: NEG
64226: PUSH
64227: LD_INT 3
64229: NEG
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 0
64237: PUSH
64238: LD_INT 3
64240: NEG
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 0
64248: PUSH
64249: LD_INT 4
64251: NEG
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 1
64259: PUSH
64260: LD_INT 3
64262: NEG
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 1
64270: PUSH
64271: LD_INT 2
64273: NEG
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 0
64281: PUSH
64282: LD_INT 2
64284: NEG
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 1
64292: NEG
64293: PUSH
64294: LD_INT 3
64296: NEG
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 1
64304: NEG
64305: PUSH
64306: LD_INT 4
64308: NEG
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 2
64316: PUSH
64317: LD_INT 2
64319: NEG
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 2
64327: NEG
64328: PUSH
64329: LD_INT 4
64331: NEG
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 4
64339: PUSH
64340: LD_INT 0
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 4
64349: PUSH
64350: LD_INT 1
64352: NEG
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 5
64360: PUSH
64361: LD_INT 0
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: LD_INT 5
64370: PUSH
64371: LD_INT 1
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 4
64380: PUSH
64381: LD_INT 1
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 3
64390: PUSH
64391: LD_INT 0
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 3
64400: PUSH
64401: LD_INT 1
64403: NEG
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 3
64411: PUSH
64412: LD_INT 2
64414: NEG
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 5
64422: PUSH
64423: LD_INT 2
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64477: LD_ADDR_VAR 0 32
64481: PUSH
64482: LD_INT 4
64484: NEG
64485: PUSH
64486: LD_INT 0
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 4
64495: NEG
64496: PUSH
64497: LD_INT 1
64499: NEG
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 3
64507: NEG
64508: PUSH
64509: LD_INT 0
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: PUSH
64516: LD_INT 3
64518: NEG
64519: PUSH
64520: LD_INT 1
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: LD_INT 4
64529: NEG
64530: PUSH
64531: LD_INT 1
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 5
64540: NEG
64541: PUSH
64542: LD_INT 0
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 5
64551: NEG
64552: PUSH
64553: LD_INT 1
64555: NEG
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 5
64563: NEG
64564: PUSH
64565: LD_INT 2
64567: NEG
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 3
64575: NEG
64576: PUSH
64577: LD_INT 2
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: LD_INT 3
64586: NEG
64587: PUSH
64588: LD_INT 3
64590: NEG
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 3
64598: NEG
64599: PUSH
64600: LD_INT 4
64602: NEG
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 2
64610: NEG
64611: PUSH
64612: LD_INT 3
64614: NEG
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 2
64622: NEG
64623: PUSH
64624: LD_INT 2
64626: NEG
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: PUSH
64632: LD_INT 3
64634: NEG
64635: PUSH
64636: LD_INT 2
64638: NEG
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: LD_INT 4
64646: NEG
64647: PUSH
64648: LD_INT 3
64650: NEG
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 4
64658: NEG
64659: PUSH
64660: LD_INT 4
64662: NEG
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 2
64670: NEG
64671: PUSH
64672: LD_INT 4
64674: NEG
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 4
64682: NEG
64683: PUSH
64684: LD_INT 2
64686: NEG
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: LD_INT 0
64694: PUSH
64695: LD_INT 4
64697: NEG
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 0
64705: PUSH
64706: LD_INT 5
64708: NEG
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: LD_INT 1
64716: PUSH
64717: LD_INT 4
64719: NEG
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 1
64727: PUSH
64728: LD_INT 3
64730: NEG
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 0
64738: PUSH
64739: LD_INT 3
64741: NEG
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 1
64749: NEG
64750: PUSH
64751: LD_INT 4
64753: NEG
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 1
64761: NEG
64762: PUSH
64763: LD_INT 5
64765: NEG
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 2
64773: PUSH
64774: LD_INT 3
64776: NEG
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 2
64784: NEG
64785: PUSH
64786: LD_INT 5
64788: NEG
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 3
64796: PUSH
64797: LD_INT 0
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 3
64806: PUSH
64807: LD_INT 1
64809: NEG
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 4
64817: PUSH
64818: LD_INT 0
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 4
64827: PUSH
64828: LD_INT 1
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 3
64837: PUSH
64838: LD_INT 1
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 2
64847: PUSH
64848: LD_INT 0
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 2
64857: PUSH
64858: LD_INT 1
64860: NEG
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 2
64868: PUSH
64869: LD_INT 2
64871: NEG
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 4
64879: PUSH
64880: LD_INT 2
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 4
64889: PUSH
64890: LD_INT 4
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 4
64899: PUSH
64900: LD_INT 3
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 5
64909: PUSH
64910: LD_INT 4
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 5
64919: PUSH
64920: LD_INT 5
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 4
64929: PUSH
64930: LD_INT 5
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 3
64939: PUSH
64940: LD_INT 4
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 3
64949: PUSH
64950: LD_INT 3
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: LD_INT 5
64959: PUSH
64960: LD_INT 3
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: LD_INT 3
64969: PUSH
64970: LD_INT 5
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65024: LD_ADDR_VAR 0 33
65028: PUSH
65029: LD_INT 4
65031: NEG
65032: PUSH
65033: LD_INT 4
65035: NEG
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 4
65043: NEG
65044: PUSH
65045: LD_INT 5
65047: NEG
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: LD_INT 3
65055: NEG
65056: PUSH
65057: LD_INT 4
65059: NEG
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 3
65067: NEG
65068: PUSH
65069: LD_INT 3
65071: NEG
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: LD_INT 4
65079: NEG
65080: PUSH
65081: LD_INT 3
65083: NEG
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 5
65091: NEG
65092: PUSH
65093: LD_INT 4
65095: NEG
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 5
65103: NEG
65104: PUSH
65105: LD_INT 5
65107: NEG
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 3
65115: NEG
65116: PUSH
65117: LD_INT 5
65119: NEG
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: LD_INT 5
65127: NEG
65128: PUSH
65129: LD_INT 3
65131: NEG
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 0
65139: PUSH
65140: LD_INT 3
65142: NEG
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 0
65150: PUSH
65151: LD_INT 4
65153: NEG
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 1
65161: PUSH
65162: LD_INT 3
65164: NEG
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: LD_INT 1
65172: PUSH
65173: LD_INT 2
65175: NEG
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 0
65183: PUSH
65184: LD_INT 2
65186: NEG
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: LD_INT 1
65194: NEG
65195: PUSH
65196: LD_INT 3
65198: NEG
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 1
65206: NEG
65207: PUSH
65208: LD_INT 4
65210: NEG
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 2
65218: PUSH
65219: LD_INT 2
65221: NEG
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 2
65229: NEG
65230: PUSH
65231: LD_INT 4
65233: NEG
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 4
65241: PUSH
65242: LD_INT 0
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 4
65251: PUSH
65252: LD_INT 1
65254: NEG
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: PUSH
65260: LD_INT 5
65262: PUSH
65263: LD_INT 0
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 5
65272: PUSH
65273: LD_INT 1
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 4
65282: PUSH
65283: LD_INT 1
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 3
65292: PUSH
65293: LD_INT 0
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 3
65302: PUSH
65303: LD_INT 1
65305: NEG
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: LD_INT 3
65313: PUSH
65314: LD_INT 2
65316: NEG
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_INT 5
65324: PUSH
65325: LD_INT 2
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: LD_INT 3
65334: PUSH
65335: LD_INT 3
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: PUSH
65342: LD_INT 3
65344: PUSH
65345: LD_INT 2
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 4
65354: PUSH
65355: LD_INT 3
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 4
65364: PUSH
65365: LD_INT 4
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 3
65374: PUSH
65375: LD_INT 4
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 2
65384: PUSH
65385: LD_INT 3
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 2
65394: PUSH
65395: LD_INT 2
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 4
65404: PUSH
65405: LD_INT 2
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 2
65414: PUSH
65415: LD_INT 4
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: LD_INT 0
65424: PUSH
65425: LD_INT 4
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 0
65434: PUSH
65435: LD_INT 3
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 1
65444: PUSH
65445: LD_INT 4
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: LD_INT 1
65454: PUSH
65455: LD_INT 5
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 0
65464: PUSH
65465: LD_INT 5
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_INT 1
65474: NEG
65475: PUSH
65476: LD_INT 4
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 1
65485: NEG
65486: PUSH
65487: LD_INT 3
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 2
65496: PUSH
65497: LD_INT 5
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 2
65506: NEG
65507: PUSH
65508: LD_INT 3
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65562: LD_ADDR_VAR 0 34
65566: PUSH
65567: LD_INT 0
65569: PUSH
65570: LD_INT 4
65572: NEG
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 0
65580: PUSH
65581: LD_INT 5
65583: NEG
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 1
65591: PUSH
65592: LD_INT 4
65594: NEG
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 1
65602: PUSH
65603: LD_INT 3
65605: NEG
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 0
65613: PUSH
65614: LD_INT 3
65616: NEG
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 1
65624: NEG
65625: PUSH
65626: LD_INT 4
65628: NEG
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: LD_INT 1
65636: NEG
65637: PUSH
65638: LD_INT 5
65640: NEG
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 2
65648: PUSH
65649: LD_INT 3
65651: NEG
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 2
65659: NEG
65660: PUSH
65661: LD_INT 5
65663: NEG
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 3
65671: PUSH
65672: LD_INT 0
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 3
65681: PUSH
65682: LD_INT 1
65684: NEG
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PUSH
65690: LD_INT 4
65692: PUSH
65693: LD_INT 0
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: LD_INT 4
65702: PUSH
65703: LD_INT 1
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: LD_INT 3
65712: PUSH
65713: LD_INT 1
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 2
65722: PUSH
65723: LD_INT 0
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: LD_INT 2
65732: PUSH
65733: LD_INT 1
65735: NEG
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 2
65743: PUSH
65744: LD_INT 2
65746: NEG
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: LD_INT 4
65754: PUSH
65755: LD_INT 2
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: LD_INT 4
65764: PUSH
65765: LD_INT 4
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: LD_INT 4
65774: PUSH
65775: LD_INT 3
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 5
65784: PUSH
65785: LD_INT 4
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 5
65794: PUSH
65795: LD_INT 5
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 4
65804: PUSH
65805: LD_INT 5
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: LD_INT 3
65814: PUSH
65815: LD_INT 4
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: LD_INT 3
65824: PUSH
65825: LD_INT 3
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: LD_INT 5
65834: PUSH
65835: LD_INT 3
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 3
65844: PUSH
65845: LD_INT 5
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 0
65854: PUSH
65855: LD_INT 3
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 0
65864: PUSH
65865: LD_INT 2
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 1
65874: PUSH
65875: LD_INT 3
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 1
65884: PUSH
65885: LD_INT 4
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 0
65894: PUSH
65895: LD_INT 4
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 1
65904: NEG
65905: PUSH
65906: LD_INT 3
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 1
65915: NEG
65916: PUSH
65917: LD_INT 2
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 2
65926: PUSH
65927: LD_INT 4
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: LD_INT 2
65936: NEG
65937: PUSH
65938: LD_INT 2
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PUSH
65945: LD_INT 4
65947: NEG
65948: PUSH
65949: LD_INT 0
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: LD_INT 4
65958: NEG
65959: PUSH
65960: LD_INT 1
65962: NEG
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 3
65970: NEG
65971: PUSH
65972: LD_INT 0
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 3
65981: NEG
65982: PUSH
65983: LD_INT 1
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 4
65992: NEG
65993: PUSH
65994: LD_INT 1
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: LD_INT 5
66003: NEG
66004: PUSH
66005: LD_INT 0
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: LD_INT 5
66014: NEG
66015: PUSH
66016: LD_INT 1
66018: NEG
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 5
66026: NEG
66027: PUSH
66028: LD_INT 2
66030: NEG
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 3
66038: NEG
66039: PUSH
66040: LD_INT 2
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: LIST
66074: LIST
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: ST_TO_ADDR
// end ; end ;
66094: GO 66097
66096: POP
// case btype of b_depot , b_warehouse :
66097: LD_VAR 0 1
66101: PUSH
66102: LD_INT 0
66104: DOUBLE
66105: EQUAL
66106: IFTRUE 66116
66108: LD_INT 1
66110: DOUBLE
66111: EQUAL
66112: IFTRUE 66116
66114: GO 66317
66116: POP
// case nation of nation_american :
66117: LD_VAR 0 5
66121: PUSH
66122: LD_INT 1
66124: DOUBLE
66125: EQUAL
66126: IFTRUE 66130
66128: GO 66186
66130: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66131: LD_ADDR_VAR 0 9
66135: PUSH
66136: LD_VAR 0 11
66140: PUSH
66141: LD_VAR 0 12
66145: PUSH
66146: LD_VAR 0 13
66150: PUSH
66151: LD_VAR 0 14
66155: PUSH
66156: LD_VAR 0 15
66160: PUSH
66161: LD_VAR 0 16
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: PUSH
66174: LD_VAR 0 4
66178: PUSH
66179: LD_INT 1
66181: PLUS
66182: ARRAY
66183: ST_TO_ADDR
66184: GO 66315
66186: LD_INT 2
66188: DOUBLE
66189: EQUAL
66190: IFTRUE 66194
66192: GO 66250
66194: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66195: LD_ADDR_VAR 0 9
66199: PUSH
66200: LD_VAR 0 17
66204: PUSH
66205: LD_VAR 0 18
66209: PUSH
66210: LD_VAR 0 19
66214: PUSH
66215: LD_VAR 0 20
66219: PUSH
66220: LD_VAR 0 21
66224: PUSH
66225: LD_VAR 0 22
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: PUSH
66238: LD_VAR 0 4
66242: PUSH
66243: LD_INT 1
66245: PLUS
66246: ARRAY
66247: ST_TO_ADDR
66248: GO 66315
66250: LD_INT 3
66252: DOUBLE
66253: EQUAL
66254: IFTRUE 66258
66256: GO 66314
66258: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66259: LD_ADDR_VAR 0 9
66263: PUSH
66264: LD_VAR 0 23
66268: PUSH
66269: LD_VAR 0 24
66273: PUSH
66274: LD_VAR 0 25
66278: PUSH
66279: LD_VAR 0 26
66283: PUSH
66284: LD_VAR 0 27
66288: PUSH
66289: LD_VAR 0 28
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: LIST
66298: LIST
66299: LIST
66300: LIST
66301: PUSH
66302: LD_VAR 0 4
66306: PUSH
66307: LD_INT 1
66309: PLUS
66310: ARRAY
66311: ST_TO_ADDR
66312: GO 66315
66314: POP
66315: GO 66870
66317: LD_INT 2
66319: DOUBLE
66320: EQUAL
66321: IFTRUE 66331
66323: LD_INT 3
66325: DOUBLE
66326: EQUAL
66327: IFTRUE 66331
66329: GO 66387
66331: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66332: LD_ADDR_VAR 0 9
66336: PUSH
66337: LD_VAR 0 29
66341: PUSH
66342: LD_VAR 0 30
66346: PUSH
66347: LD_VAR 0 31
66351: PUSH
66352: LD_VAR 0 32
66356: PUSH
66357: LD_VAR 0 33
66361: PUSH
66362: LD_VAR 0 34
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: PUSH
66375: LD_VAR 0 4
66379: PUSH
66380: LD_INT 1
66382: PLUS
66383: ARRAY
66384: ST_TO_ADDR
66385: GO 66870
66387: LD_INT 16
66389: DOUBLE
66390: EQUAL
66391: IFTRUE 66449
66393: LD_INT 17
66395: DOUBLE
66396: EQUAL
66397: IFTRUE 66449
66399: LD_INT 18
66401: DOUBLE
66402: EQUAL
66403: IFTRUE 66449
66405: LD_INT 19
66407: DOUBLE
66408: EQUAL
66409: IFTRUE 66449
66411: LD_INT 22
66413: DOUBLE
66414: EQUAL
66415: IFTRUE 66449
66417: LD_INT 20
66419: DOUBLE
66420: EQUAL
66421: IFTRUE 66449
66423: LD_INT 21
66425: DOUBLE
66426: EQUAL
66427: IFTRUE 66449
66429: LD_INT 23
66431: DOUBLE
66432: EQUAL
66433: IFTRUE 66449
66435: LD_INT 24
66437: DOUBLE
66438: EQUAL
66439: IFTRUE 66449
66441: LD_INT 25
66443: DOUBLE
66444: EQUAL
66445: IFTRUE 66449
66447: GO 66505
66449: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66450: LD_ADDR_VAR 0 9
66454: PUSH
66455: LD_VAR 0 35
66459: PUSH
66460: LD_VAR 0 36
66464: PUSH
66465: LD_VAR 0 37
66469: PUSH
66470: LD_VAR 0 38
66474: PUSH
66475: LD_VAR 0 39
66479: PUSH
66480: LD_VAR 0 40
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: LIST
66489: LIST
66490: LIST
66491: LIST
66492: PUSH
66493: LD_VAR 0 4
66497: PUSH
66498: LD_INT 1
66500: PLUS
66501: ARRAY
66502: ST_TO_ADDR
66503: GO 66870
66505: LD_INT 6
66507: DOUBLE
66508: EQUAL
66509: IFTRUE 66561
66511: LD_INT 7
66513: DOUBLE
66514: EQUAL
66515: IFTRUE 66561
66517: LD_INT 8
66519: DOUBLE
66520: EQUAL
66521: IFTRUE 66561
66523: LD_INT 13
66525: DOUBLE
66526: EQUAL
66527: IFTRUE 66561
66529: LD_INT 12
66531: DOUBLE
66532: EQUAL
66533: IFTRUE 66561
66535: LD_INT 15
66537: DOUBLE
66538: EQUAL
66539: IFTRUE 66561
66541: LD_INT 11
66543: DOUBLE
66544: EQUAL
66545: IFTRUE 66561
66547: LD_INT 14
66549: DOUBLE
66550: EQUAL
66551: IFTRUE 66561
66553: LD_INT 10
66555: DOUBLE
66556: EQUAL
66557: IFTRUE 66561
66559: GO 66617
66561: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66562: LD_ADDR_VAR 0 9
66566: PUSH
66567: LD_VAR 0 41
66571: PUSH
66572: LD_VAR 0 42
66576: PUSH
66577: LD_VAR 0 43
66581: PUSH
66582: LD_VAR 0 44
66586: PUSH
66587: LD_VAR 0 45
66591: PUSH
66592: LD_VAR 0 46
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: LIST
66601: LIST
66602: LIST
66603: LIST
66604: PUSH
66605: LD_VAR 0 4
66609: PUSH
66610: LD_INT 1
66612: PLUS
66613: ARRAY
66614: ST_TO_ADDR
66615: GO 66870
66617: LD_INT 36
66619: DOUBLE
66620: EQUAL
66621: IFTRUE 66625
66623: GO 66681
66625: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66626: LD_ADDR_VAR 0 9
66630: PUSH
66631: LD_VAR 0 47
66635: PUSH
66636: LD_VAR 0 48
66640: PUSH
66641: LD_VAR 0 49
66645: PUSH
66646: LD_VAR 0 50
66650: PUSH
66651: LD_VAR 0 51
66655: PUSH
66656: LD_VAR 0 52
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: PUSH
66669: LD_VAR 0 4
66673: PUSH
66674: LD_INT 1
66676: PLUS
66677: ARRAY
66678: ST_TO_ADDR
66679: GO 66870
66681: LD_INT 4
66683: DOUBLE
66684: EQUAL
66685: IFTRUE 66707
66687: LD_INT 5
66689: DOUBLE
66690: EQUAL
66691: IFTRUE 66707
66693: LD_INT 34
66695: DOUBLE
66696: EQUAL
66697: IFTRUE 66707
66699: LD_INT 37
66701: DOUBLE
66702: EQUAL
66703: IFTRUE 66707
66705: GO 66763
66707: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66708: LD_ADDR_VAR 0 9
66712: PUSH
66713: LD_VAR 0 53
66717: PUSH
66718: LD_VAR 0 54
66722: PUSH
66723: LD_VAR 0 55
66727: PUSH
66728: LD_VAR 0 56
66732: PUSH
66733: LD_VAR 0 57
66737: PUSH
66738: LD_VAR 0 58
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: PUSH
66751: LD_VAR 0 4
66755: PUSH
66756: LD_INT 1
66758: PLUS
66759: ARRAY
66760: ST_TO_ADDR
66761: GO 66870
66763: LD_INT 31
66765: DOUBLE
66766: EQUAL
66767: IFTRUE 66813
66769: LD_INT 32
66771: DOUBLE
66772: EQUAL
66773: IFTRUE 66813
66775: LD_INT 33
66777: DOUBLE
66778: EQUAL
66779: IFTRUE 66813
66781: LD_INT 27
66783: DOUBLE
66784: EQUAL
66785: IFTRUE 66813
66787: LD_INT 26
66789: DOUBLE
66790: EQUAL
66791: IFTRUE 66813
66793: LD_INT 28
66795: DOUBLE
66796: EQUAL
66797: IFTRUE 66813
66799: LD_INT 29
66801: DOUBLE
66802: EQUAL
66803: IFTRUE 66813
66805: LD_INT 30
66807: DOUBLE
66808: EQUAL
66809: IFTRUE 66813
66811: GO 66869
66813: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66814: LD_ADDR_VAR 0 9
66818: PUSH
66819: LD_VAR 0 59
66823: PUSH
66824: LD_VAR 0 60
66828: PUSH
66829: LD_VAR 0 61
66833: PUSH
66834: LD_VAR 0 62
66838: PUSH
66839: LD_VAR 0 63
66843: PUSH
66844: LD_VAR 0 64
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: PUSH
66857: LD_VAR 0 4
66861: PUSH
66862: LD_INT 1
66864: PLUS
66865: ARRAY
66866: ST_TO_ADDR
66867: GO 66870
66869: POP
// temp_list2 = [ ] ;
66870: LD_ADDR_VAR 0 10
66874: PUSH
66875: EMPTY
66876: ST_TO_ADDR
// for i in temp_list do
66877: LD_ADDR_VAR 0 8
66881: PUSH
66882: LD_VAR 0 9
66886: PUSH
66887: FOR_IN
66888: IFFALSE 66940
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66890: LD_ADDR_VAR 0 10
66894: PUSH
66895: LD_VAR 0 10
66899: PUSH
66900: LD_VAR 0 8
66904: PUSH
66905: LD_INT 1
66907: ARRAY
66908: PUSH
66909: LD_VAR 0 2
66913: PLUS
66914: PUSH
66915: LD_VAR 0 8
66919: PUSH
66920: LD_INT 2
66922: ARRAY
66923: PUSH
66924: LD_VAR 0 3
66928: PLUS
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: EMPTY
66935: LIST
66936: ADD
66937: ST_TO_ADDR
66938: GO 66887
66940: POP
66941: POP
// result = temp_list2 ;
66942: LD_ADDR_VAR 0 7
66946: PUSH
66947: LD_VAR 0 10
66951: ST_TO_ADDR
// end ;
66952: LD_VAR 0 7
66956: RET
// export function EnemyInRange ( unit , dist ) ; begin
66957: LD_INT 0
66959: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66960: LD_ADDR_VAR 0 3
66964: PUSH
66965: LD_VAR 0 1
66969: PPUSH
66970: CALL_OW 255
66974: PPUSH
66975: LD_VAR 0 1
66979: PPUSH
66980: CALL_OW 250
66984: PPUSH
66985: LD_VAR 0 1
66989: PPUSH
66990: CALL_OW 251
66994: PPUSH
66995: LD_VAR 0 2
66999: PPUSH
67000: CALL 40353 0 4
67004: PUSH
67005: LD_INT 4
67007: ARRAY
67008: ST_TO_ADDR
// end ;
67009: LD_VAR 0 3
67013: RET
// export function PlayerSeeMe ( unit ) ; begin
67014: LD_INT 0
67016: PPUSH
// result := See ( your_side , unit ) ;
67017: LD_ADDR_VAR 0 2
67021: PUSH
67022: LD_OWVAR 2
67026: PPUSH
67027: LD_VAR 0 1
67031: PPUSH
67032: CALL_OW 292
67036: ST_TO_ADDR
// end ;
67037: LD_VAR 0 2
67041: RET
// export function ReverseDir ( unit ) ; begin
67042: LD_INT 0
67044: PPUSH
// if not unit then
67045: LD_VAR 0 1
67049: NOT
67050: IFFALSE 67054
// exit ;
67052: GO 67077
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67054: LD_ADDR_VAR 0 2
67058: PUSH
67059: LD_VAR 0 1
67063: PPUSH
67064: CALL_OW 254
67068: PUSH
67069: LD_INT 3
67071: PLUS
67072: PUSH
67073: LD_INT 6
67075: MOD
67076: ST_TO_ADDR
// end ;
67077: LD_VAR 0 2
67081: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
67082: LD_INT 0
67084: PPUSH
67085: PPUSH
67086: PPUSH
67087: PPUSH
67088: PPUSH
// if not hexes then
67089: LD_VAR 0 2
67093: NOT
67094: IFFALSE 67098
// exit ;
67096: GO 67246
// dist := 9999 ;
67098: LD_ADDR_VAR 0 5
67102: PUSH
67103: LD_INT 9999
67105: ST_TO_ADDR
// for i = 1 to hexes do
67106: LD_ADDR_VAR 0 4
67110: PUSH
67111: DOUBLE
67112: LD_INT 1
67114: DEC
67115: ST_TO_ADDR
67116: LD_VAR 0 2
67120: PUSH
67121: FOR_TO
67122: IFFALSE 67234
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
67124: LD_VAR 0 1
67128: PPUSH
67129: LD_VAR 0 2
67133: PUSH
67134: LD_VAR 0 4
67138: ARRAY
67139: PUSH
67140: LD_INT 1
67142: ARRAY
67143: PPUSH
67144: LD_VAR 0 2
67148: PUSH
67149: LD_VAR 0 4
67153: ARRAY
67154: PUSH
67155: LD_INT 2
67157: ARRAY
67158: PPUSH
67159: CALL_OW 297
67163: PUSH
67164: LD_VAR 0 5
67168: LESS
67169: IFFALSE 67232
// begin hex := hexes [ i ] ;
67171: LD_ADDR_VAR 0 7
67175: PUSH
67176: LD_VAR 0 2
67180: PUSH
67181: LD_VAR 0 4
67185: ARRAY
67186: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67187: LD_ADDR_VAR 0 5
67191: PUSH
67192: LD_VAR 0 1
67196: PPUSH
67197: LD_VAR 0 2
67201: PUSH
67202: LD_VAR 0 4
67206: ARRAY
67207: PUSH
67208: LD_INT 1
67210: ARRAY
67211: PPUSH
67212: LD_VAR 0 2
67216: PUSH
67217: LD_VAR 0 4
67221: ARRAY
67222: PUSH
67223: LD_INT 2
67225: ARRAY
67226: PPUSH
67227: CALL_OW 297
67231: ST_TO_ADDR
// end ; end ;
67232: GO 67121
67234: POP
67235: POP
// result := hex ;
67236: LD_ADDR_VAR 0 3
67240: PUSH
67241: LD_VAR 0 7
67245: ST_TO_ADDR
// end ;
67246: LD_VAR 0 3
67250: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67251: LD_INT 0
67253: PPUSH
67254: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67255: LD_VAR 0 1
67259: NOT
67260: PUSH
67261: LD_VAR 0 1
67265: PUSH
67266: LD_INT 21
67268: PUSH
67269: LD_INT 2
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 23
67278: PUSH
67279: LD_INT 2
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: PPUSH
67290: CALL_OW 69
67294: IN
67295: NOT
67296: OR
67297: IFFALSE 67301
// exit ;
67299: GO 67348
// for i = 1 to 3 do
67301: LD_ADDR_VAR 0 3
67305: PUSH
67306: DOUBLE
67307: LD_INT 1
67309: DEC
67310: ST_TO_ADDR
67311: LD_INT 3
67313: PUSH
67314: FOR_TO
67315: IFFALSE 67346
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67317: LD_VAR 0 1
67321: PPUSH
67322: CALL_OW 250
67326: PPUSH
67327: LD_VAR 0 1
67331: PPUSH
67332: CALL_OW 251
67336: PPUSH
67337: LD_INT 1
67339: PPUSH
67340: CALL_OW 453
67344: GO 67314
67346: POP
67347: POP
// end ;
67348: LD_VAR 0 2
67352: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67353: LD_INT 0
67355: PPUSH
67356: PPUSH
67357: PPUSH
67358: PPUSH
67359: PPUSH
67360: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
67361: LD_VAR 0 1
67365: NOT
67366: PUSH
67367: LD_VAR 0 2
67371: NOT
67372: OR
67373: PUSH
67374: LD_VAR 0 1
67378: PPUSH
67379: CALL_OW 314
67383: OR
67384: IFFALSE 67388
// exit ;
67386: GO 67829
// x := GetX ( enemy_unit ) ;
67388: LD_ADDR_VAR 0 7
67392: PUSH
67393: LD_VAR 0 2
67397: PPUSH
67398: CALL_OW 250
67402: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67403: LD_ADDR_VAR 0 8
67407: PUSH
67408: LD_VAR 0 2
67412: PPUSH
67413: CALL_OW 251
67417: ST_TO_ADDR
// if not x or not y then
67418: LD_VAR 0 7
67422: NOT
67423: PUSH
67424: LD_VAR 0 8
67428: NOT
67429: OR
67430: IFFALSE 67434
// exit ;
67432: GO 67829
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67434: LD_ADDR_VAR 0 6
67438: PUSH
67439: LD_VAR 0 7
67443: PPUSH
67444: LD_INT 0
67446: PPUSH
67447: LD_INT 4
67449: PPUSH
67450: CALL_OW 272
67454: PUSH
67455: LD_VAR 0 8
67459: PPUSH
67460: LD_INT 0
67462: PPUSH
67463: LD_INT 4
67465: PPUSH
67466: CALL_OW 273
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: LD_VAR 0 7
67479: PPUSH
67480: LD_INT 1
67482: PPUSH
67483: LD_INT 4
67485: PPUSH
67486: CALL_OW 272
67490: PUSH
67491: LD_VAR 0 8
67495: PPUSH
67496: LD_INT 1
67498: PPUSH
67499: LD_INT 4
67501: PPUSH
67502: CALL_OW 273
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_VAR 0 7
67515: PPUSH
67516: LD_INT 2
67518: PPUSH
67519: LD_INT 4
67521: PPUSH
67522: CALL_OW 272
67526: PUSH
67527: LD_VAR 0 8
67531: PPUSH
67532: LD_INT 2
67534: PPUSH
67535: LD_INT 4
67537: PPUSH
67538: CALL_OW 273
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: LD_VAR 0 7
67551: PPUSH
67552: LD_INT 3
67554: PPUSH
67555: LD_INT 4
67557: PPUSH
67558: CALL_OW 272
67562: PUSH
67563: LD_VAR 0 8
67567: PPUSH
67568: LD_INT 3
67570: PPUSH
67571: LD_INT 4
67573: PPUSH
67574: CALL_OW 273
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: PUSH
67583: LD_VAR 0 7
67587: PPUSH
67588: LD_INT 4
67590: PPUSH
67591: LD_INT 4
67593: PPUSH
67594: CALL_OW 272
67598: PUSH
67599: LD_VAR 0 8
67603: PPUSH
67604: LD_INT 4
67606: PPUSH
67607: LD_INT 4
67609: PPUSH
67610: CALL_OW 273
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: LD_VAR 0 7
67623: PPUSH
67624: LD_INT 5
67626: PPUSH
67627: LD_INT 4
67629: PPUSH
67630: CALL_OW 272
67634: PUSH
67635: LD_VAR 0 8
67639: PPUSH
67640: LD_INT 5
67642: PPUSH
67643: LD_INT 4
67645: PPUSH
67646: CALL_OW 273
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: LIST
67659: LIST
67660: LIST
67661: LIST
67662: ST_TO_ADDR
// for i = tmp downto 1 do
67663: LD_ADDR_VAR 0 4
67667: PUSH
67668: DOUBLE
67669: LD_VAR 0 6
67673: INC
67674: ST_TO_ADDR
67675: LD_INT 1
67677: PUSH
67678: FOR_DOWNTO
67679: IFFALSE 67780
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67681: LD_VAR 0 6
67685: PUSH
67686: LD_VAR 0 4
67690: ARRAY
67691: PUSH
67692: LD_INT 1
67694: ARRAY
67695: PPUSH
67696: LD_VAR 0 6
67700: PUSH
67701: LD_VAR 0 4
67705: ARRAY
67706: PUSH
67707: LD_INT 2
67709: ARRAY
67710: PPUSH
67711: CALL_OW 488
67715: NOT
67716: PUSH
67717: LD_VAR 0 6
67721: PUSH
67722: LD_VAR 0 4
67726: ARRAY
67727: PUSH
67728: LD_INT 1
67730: ARRAY
67731: PPUSH
67732: LD_VAR 0 6
67736: PUSH
67737: LD_VAR 0 4
67741: ARRAY
67742: PUSH
67743: LD_INT 2
67745: ARRAY
67746: PPUSH
67747: CALL_OW 428
67751: PUSH
67752: LD_INT 0
67754: NONEQUAL
67755: OR
67756: IFFALSE 67778
// tmp := Delete ( tmp , i ) ;
67758: LD_ADDR_VAR 0 6
67762: PUSH
67763: LD_VAR 0 6
67767: PPUSH
67768: LD_VAR 0 4
67772: PPUSH
67773: CALL_OW 3
67777: ST_TO_ADDR
67778: GO 67678
67780: POP
67781: POP
// j := GetClosestHex ( unit , tmp ) ;
67782: LD_ADDR_VAR 0 5
67786: PUSH
67787: LD_VAR 0 1
67791: PPUSH
67792: LD_VAR 0 6
67796: PPUSH
67797: CALL 67082 0 2
67801: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67802: LD_VAR 0 1
67806: PPUSH
67807: LD_VAR 0 5
67811: PUSH
67812: LD_INT 1
67814: ARRAY
67815: PPUSH
67816: LD_VAR 0 5
67820: PUSH
67821: LD_INT 2
67823: ARRAY
67824: PPUSH
67825: CALL_OW 111
// end ;
67829: LD_VAR 0 3
67833: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67834: LD_INT 0
67836: PPUSH
67837: PPUSH
67838: PPUSH
// uc_side = 0 ;
67839: LD_ADDR_OWVAR 20
67843: PUSH
67844: LD_INT 0
67846: ST_TO_ADDR
// uc_nation = 0 ;
67847: LD_ADDR_OWVAR 21
67851: PUSH
67852: LD_INT 0
67854: ST_TO_ADDR
// InitHc_All ( ) ;
67855: CALL_OW 584
// InitVc ;
67859: CALL_OW 20
// if mastodonts then
67863: LD_VAR 0 6
67867: IFFALSE 67934
// for i = 1 to mastodonts do
67869: LD_ADDR_VAR 0 11
67873: PUSH
67874: DOUBLE
67875: LD_INT 1
67877: DEC
67878: ST_TO_ADDR
67879: LD_VAR 0 6
67883: PUSH
67884: FOR_TO
67885: IFFALSE 67932
// begin vc_chassis := 31 ;
67887: LD_ADDR_OWVAR 37
67891: PUSH
67892: LD_INT 31
67894: ST_TO_ADDR
// vc_control := control_rider ;
67895: LD_ADDR_OWVAR 38
67899: PUSH
67900: LD_INT 4
67902: ST_TO_ADDR
// animal := CreateVehicle ;
67903: LD_ADDR_VAR 0 12
67907: PUSH
67908: CALL_OW 45
67912: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67913: LD_VAR 0 12
67917: PPUSH
67918: LD_VAR 0 8
67922: PPUSH
67923: LD_INT 0
67925: PPUSH
67926: CALL 70122 0 3
// end ;
67930: GO 67884
67932: POP
67933: POP
// if horses then
67934: LD_VAR 0 5
67938: IFFALSE 68005
// for i = 1 to horses do
67940: LD_ADDR_VAR 0 11
67944: PUSH
67945: DOUBLE
67946: LD_INT 1
67948: DEC
67949: ST_TO_ADDR
67950: LD_VAR 0 5
67954: PUSH
67955: FOR_TO
67956: IFFALSE 68003
// begin hc_class := 21 ;
67958: LD_ADDR_OWVAR 28
67962: PUSH
67963: LD_INT 21
67965: ST_TO_ADDR
// hc_gallery :=  ;
67966: LD_ADDR_OWVAR 33
67970: PUSH
67971: LD_STRING 
67973: ST_TO_ADDR
// animal := CreateHuman ;
67974: LD_ADDR_VAR 0 12
67978: PUSH
67979: CALL_OW 44
67983: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67984: LD_VAR 0 12
67988: PPUSH
67989: LD_VAR 0 8
67993: PPUSH
67994: LD_INT 0
67996: PPUSH
67997: CALL 70122 0 3
// end ;
68001: GO 67955
68003: POP
68004: POP
// if birds then
68005: LD_VAR 0 1
68009: IFFALSE 68076
// for i = 1 to birds do
68011: LD_ADDR_VAR 0 11
68015: PUSH
68016: DOUBLE
68017: LD_INT 1
68019: DEC
68020: ST_TO_ADDR
68021: LD_VAR 0 1
68025: PUSH
68026: FOR_TO
68027: IFFALSE 68074
// begin hc_class = 18 ;
68029: LD_ADDR_OWVAR 28
68033: PUSH
68034: LD_INT 18
68036: ST_TO_ADDR
// hc_gallery =  ;
68037: LD_ADDR_OWVAR 33
68041: PUSH
68042: LD_STRING 
68044: ST_TO_ADDR
// animal := CreateHuman ;
68045: LD_ADDR_VAR 0 12
68049: PUSH
68050: CALL_OW 44
68054: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68055: LD_VAR 0 12
68059: PPUSH
68060: LD_VAR 0 8
68064: PPUSH
68065: LD_INT 0
68067: PPUSH
68068: CALL 70122 0 3
// end ;
68072: GO 68026
68074: POP
68075: POP
// if tigers then
68076: LD_VAR 0 2
68080: IFFALSE 68164
// for i = 1 to tigers do
68082: LD_ADDR_VAR 0 11
68086: PUSH
68087: DOUBLE
68088: LD_INT 1
68090: DEC
68091: ST_TO_ADDR
68092: LD_VAR 0 2
68096: PUSH
68097: FOR_TO
68098: IFFALSE 68162
// begin hc_class = class_tiger ;
68100: LD_ADDR_OWVAR 28
68104: PUSH
68105: LD_INT 14
68107: ST_TO_ADDR
// hc_gallery =  ;
68108: LD_ADDR_OWVAR 33
68112: PUSH
68113: LD_STRING 
68115: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68116: LD_ADDR_OWVAR 35
68120: PUSH
68121: LD_INT 7
68123: NEG
68124: PPUSH
68125: LD_INT 7
68127: PPUSH
68128: CALL_OW 12
68132: ST_TO_ADDR
// animal := CreateHuman ;
68133: LD_ADDR_VAR 0 12
68137: PUSH
68138: CALL_OW 44
68142: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68143: LD_VAR 0 12
68147: PPUSH
68148: LD_VAR 0 8
68152: PPUSH
68153: LD_INT 0
68155: PPUSH
68156: CALL 70122 0 3
// end ;
68160: GO 68097
68162: POP
68163: POP
// if apemans then
68164: LD_VAR 0 3
68168: IFFALSE 68291
// for i = 1 to apemans do
68170: LD_ADDR_VAR 0 11
68174: PUSH
68175: DOUBLE
68176: LD_INT 1
68178: DEC
68179: ST_TO_ADDR
68180: LD_VAR 0 3
68184: PUSH
68185: FOR_TO
68186: IFFALSE 68289
// begin hc_class = class_apeman ;
68188: LD_ADDR_OWVAR 28
68192: PUSH
68193: LD_INT 12
68195: ST_TO_ADDR
// hc_gallery =  ;
68196: LD_ADDR_OWVAR 33
68200: PUSH
68201: LD_STRING 
68203: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
68204: LD_ADDR_OWVAR 35
68208: PUSH
68209: LD_INT 2
68211: NEG
68212: PPUSH
68213: LD_INT 2
68215: PPUSH
68216: CALL_OW 12
68220: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68221: LD_ADDR_OWVAR 31
68225: PUSH
68226: LD_INT 1
68228: PPUSH
68229: LD_INT 3
68231: PPUSH
68232: CALL_OW 12
68236: PUSH
68237: LD_INT 1
68239: PPUSH
68240: LD_INT 3
68242: PPUSH
68243: CALL_OW 12
68247: PUSH
68248: LD_INT 0
68250: PUSH
68251: LD_INT 0
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: LIST
68258: LIST
68259: ST_TO_ADDR
// animal := CreateHuman ;
68260: LD_ADDR_VAR 0 12
68264: PUSH
68265: CALL_OW 44
68269: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68270: LD_VAR 0 12
68274: PPUSH
68275: LD_VAR 0 8
68279: PPUSH
68280: LD_INT 0
68282: PPUSH
68283: CALL 70122 0 3
// end ;
68287: GO 68185
68289: POP
68290: POP
// if enchidnas then
68291: LD_VAR 0 4
68295: IFFALSE 68362
// for i = 1 to enchidnas do
68297: LD_ADDR_VAR 0 11
68301: PUSH
68302: DOUBLE
68303: LD_INT 1
68305: DEC
68306: ST_TO_ADDR
68307: LD_VAR 0 4
68311: PUSH
68312: FOR_TO
68313: IFFALSE 68360
// begin hc_class = 13 ;
68315: LD_ADDR_OWVAR 28
68319: PUSH
68320: LD_INT 13
68322: ST_TO_ADDR
// hc_gallery =  ;
68323: LD_ADDR_OWVAR 33
68327: PUSH
68328: LD_STRING 
68330: ST_TO_ADDR
// animal := CreateHuman ;
68331: LD_ADDR_VAR 0 12
68335: PUSH
68336: CALL_OW 44
68340: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68341: LD_VAR 0 12
68345: PPUSH
68346: LD_VAR 0 8
68350: PPUSH
68351: LD_INT 0
68353: PPUSH
68354: CALL 70122 0 3
// end ;
68358: GO 68312
68360: POP
68361: POP
// if fishes then
68362: LD_VAR 0 7
68366: IFFALSE 68433
// for i = 1 to fishes do
68368: LD_ADDR_VAR 0 11
68372: PUSH
68373: DOUBLE
68374: LD_INT 1
68376: DEC
68377: ST_TO_ADDR
68378: LD_VAR 0 7
68382: PUSH
68383: FOR_TO
68384: IFFALSE 68431
// begin hc_class = 20 ;
68386: LD_ADDR_OWVAR 28
68390: PUSH
68391: LD_INT 20
68393: ST_TO_ADDR
// hc_gallery =  ;
68394: LD_ADDR_OWVAR 33
68398: PUSH
68399: LD_STRING 
68401: ST_TO_ADDR
// animal := CreateHuman ;
68402: LD_ADDR_VAR 0 12
68406: PUSH
68407: CALL_OW 44
68411: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68412: LD_VAR 0 12
68416: PPUSH
68417: LD_VAR 0 9
68421: PPUSH
68422: LD_INT 0
68424: PPUSH
68425: CALL 70122 0 3
// end ;
68429: GO 68383
68431: POP
68432: POP
// end ;
68433: LD_VAR 0 10
68437: RET
// export function WantHeal ( sci , unit ) ; begin
68438: LD_INT 0
68440: PPUSH
// if GetTaskList ( sci ) > 0 then
68441: LD_VAR 0 1
68445: PPUSH
68446: CALL_OW 437
68450: PUSH
68451: LD_INT 0
68453: GREATER
68454: IFFALSE 68524
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68456: LD_VAR 0 1
68460: PPUSH
68461: CALL_OW 437
68465: PUSH
68466: LD_INT 1
68468: ARRAY
68469: PUSH
68470: LD_INT 1
68472: ARRAY
68473: PUSH
68474: LD_STRING l
68476: EQUAL
68477: PUSH
68478: LD_VAR 0 1
68482: PPUSH
68483: CALL_OW 437
68487: PUSH
68488: LD_INT 1
68490: ARRAY
68491: PUSH
68492: LD_INT 4
68494: ARRAY
68495: PUSH
68496: LD_VAR 0 2
68500: EQUAL
68501: AND
68502: IFFALSE 68514
// result := true else
68504: LD_ADDR_VAR 0 3
68508: PUSH
68509: LD_INT 1
68511: ST_TO_ADDR
68512: GO 68522
// result := false ;
68514: LD_ADDR_VAR 0 3
68518: PUSH
68519: LD_INT 0
68521: ST_TO_ADDR
// end else
68522: GO 68532
// result := false ;
68524: LD_ADDR_VAR 0 3
68528: PUSH
68529: LD_INT 0
68531: ST_TO_ADDR
// end ;
68532: LD_VAR 0 3
68536: RET
// export function HealTarget ( sci ) ; begin
68537: LD_INT 0
68539: PPUSH
// if not sci then
68540: LD_VAR 0 1
68544: NOT
68545: IFFALSE 68549
// exit ;
68547: GO 68614
// result := 0 ;
68549: LD_ADDR_VAR 0 2
68553: PUSH
68554: LD_INT 0
68556: ST_TO_ADDR
// if GetTaskList ( sci ) then
68557: LD_VAR 0 1
68561: PPUSH
68562: CALL_OW 437
68566: IFFALSE 68614
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
68568: LD_VAR 0 1
68572: PPUSH
68573: CALL_OW 437
68577: PUSH
68578: LD_INT 1
68580: ARRAY
68581: PUSH
68582: LD_INT 1
68584: ARRAY
68585: PUSH
68586: LD_STRING l
68588: EQUAL
68589: IFFALSE 68614
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
68591: LD_ADDR_VAR 0 2
68595: PUSH
68596: LD_VAR 0 1
68600: PPUSH
68601: CALL_OW 437
68605: PUSH
68606: LD_INT 1
68608: ARRAY
68609: PUSH
68610: LD_INT 4
68612: ARRAY
68613: ST_TO_ADDR
// end ;
68614: LD_VAR 0 2
68618: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
68619: LD_INT 0
68621: PPUSH
68622: PPUSH
68623: PPUSH
68624: PPUSH
// if not base_units then
68625: LD_VAR 0 1
68629: NOT
68630: IFFALSE 68634
// exit ;
68632: GO 68721
// result := false ;
68634: LD_ADDR_VAR 0 2
68638: PUSH
68639: LD_INT 0
68641: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
68642: LD_ADDR_VAR 0 5
68646: PUSH
68647: LD_VAR 0 1
68651: PPUSH
68652: LD_INT 21
68654: PUSH
68655: LD_INT 3
68657: PUSH
68658: EMPTY
68659: LIST
68660: LIST
68661: PPUSH
68662: CALL_OW 72
68666: ST_TO_ADDR
// if not tmp then
68667: LD_VAR 0 5
68671: NOT
68672: IFFALSE 68676
// exit ;
68674: GO 68721
// for i in tmp do
68676: LD_ADDR_VAR 0 3
68680: PUSH
68681: LD_VAR 0 5
68685: PUSH
68686: FOR_IN
68687: IFFALSE 68719
// begin result := EnemyInRange ( i , 22 ) ;
68689: LD_ADDR_VAR 0 2
68693: PUSH
68694: LD_VAR 0 3
68698: PPUSH
68699: LD_INT 22
68701: PPUSH
68702: CALL 66957 0 2
68706: ST_TO_ADDR
// if result then
68707: LD_VAR 0 2
68711: IFFALSE 68717
// exit ;
68713: POP
68714: POP
68715: GO 68721
// end ;
68717: GO 68686
68719: POP
68720: POP
// end ;
68721: LD_VAR 0 2
68725: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
68726: LD_INT 0
68728: PPUSH
68729: PPUSH
// if not units then
68730: LD_VAR 0 1
68734: NOT
68735: IFFALSE 68739
// exit ;
68737: GO 68809
// result := [ ] ;
68739: LD_ADDR_VAR 0 3
68743: PUSH
68744: EMPTY
68745: ST_TO_ADDR
// for i in units do
68746: LD_ADDR_VAR 0 4
68750: PUSH
68751: LD_VAR 0 1
68755: PUSH
68756: FOR_IN
68757: IFFALSE 68807
// if GetTag ( i ) = tag then
68759: LD_VAR 0 4
68763: PPUSH
68764: CALL_OW 110
68768: PUSH
68769: LD_VAR 0 2
68773: EQUAL
68774: IFFALSE 68805
// result := Replace ( result , result + 1 , i ) ;
68776: LD_ADDR_VAR 0 3
68780: PUSH
68781: LD_VAR 0 3
68785: PPUSH
68786: LD_VAR 0 3
68790: PUSH
68791: LD_INT 1
68793: PLUS
68794: PPUSH
68795: LD_VAR 0 4
68799: PPUSH
68800: CALL_OW 1
68804: ST_TO_ADDR
68805: GO 68756
68807: POP
68808: POP
// end ;
68809: LD_VAR 0 3
68813: RET
// export function IsDriver ( un ) ; begin
68814: LD_INT 0
68816: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
68817: LD_ADDR_VAR 0 2
68821: PUSH
68822: LD_VAR 0 1
68826: PUSH
68827: LD_INT 55
68829: PUSH
68830: EMPTY
68831: LIST
68832: PPUSH
68833: CALL_OW 69
68837: IN
68838: ST_TO_ADDR
// end ;
68839: LD_VAR 0 2
68843: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
68844: LD_INT 0
68846: PPUSH
68847: PPUSH
// list := [ ] ;
68848: LD_ADDR_VAR 0 5
68852: PUSH
68853: EMPTY
68854: ST_TO_ADDR
// case d of 0 :
68855: LD_VAR 0 3
68859: PUSH
68860: LD_INT 0
68862: DOUBLE
68863: EQUAL
68864: IFTRUE 68868
68866: GO 69001
68868: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
68869: LD_ADDR_VAR 0 5
68873: PUSH
68874: LD_VAR 0 1
68878: PUSH
68879: LD_INT 4
68881: MINUS
68882: PUSH
68883: LD_VAR 0 2
68887: PUSH
68888: LD_INT 4
68890: MINUS
68891: PUSH
68892: LD_INT 2
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: LIST
68899: PUSH
68900: LD_VAR 0 1
68904: PUSH
68905: LD_INT 3
68907: MINUS
68908: PUSH
68909: LD_VAR 0 2
68913: PUSH
68914: LD_INT 1
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: LIST
68921: PUSH
68922: LD_VAR 0 1
68926: PUSH
68927: LD_INT 4
68929: PLUS
68930: PUSH
68931: LD_VAR 0 2
68935: PUSH
68936: LD_INT 4
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: LIST
68943: PUSH
68944: LD_VAR 0 1
68948: PUSH
68949: LD_INT 3
68951: PLUS
68952: PUSH
68953: LD_VAR 0 2
68957: PUSH
68958: LD_INT 3
68960: PLUS
68961: PUSH
68962: LD_INT 5
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: LIST
68969: PUSH
68970: LD_VAR 0 1
68974: PUSH
68975: LD_VAR 0 2
68979: PUSH
68980: LD_INT 4
68982: PLUS
68983: PUSH
68984: LD_INT 0
68986: PUSH
68987: EMPTY
68988: LIST
68989: LIST
68990: LIST
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: ST_TO_ADDR
// end ; 1 :
68999: GO 69699
69001: LD_INT 1
69003: DOUBLE
69004: EQUAL
69005: IFTRUE 69009
69007: GO 69142
69009: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69010: LD_ADDR_VAR 0 5
69014: PUSH
69015: LD_VAR 0 1
69019: PUSH
69020: LD_VAR 0 2
69024: PUSH
69025: LD_INT 4
69027: MINUS
69028: PUSH
69029: LD_INT 3
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: LIST
69036: PUSH
69037: LD_VAR 0 1
69041: PUSH
69042: LD_INT 3
69044: MINUS
69045: PUSH
69046: LD_VAR 0 2
69050: PUSH
69051: LD_INT 3
69053: MINUS
69054: PUSH
69055: LD_INT 2
69057: PUSH
69058: EMPTY
69059: LIST
69060: LIST
69061: LIST
69062: PUSH
69063: LD_VAR 0 1
69067: PUSH
69068: LD_INT 4
69070: MINUS
69071: PUSH
69072: LD_VAR 0 2
69076: PUSH
69077: LD_INT 1
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: LIST
69084: PUSH
69085: LD_VAR 0 1
69089: PUSH
69090: LD_VAR 0 2
69094: PUSH
69095: LD_INT 3
69097: PLUS
69098: PUSH
69099: LD_INT 0
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: LIST
69106: PUSH
69107: LD_VAR 0 1
69111: PUSH
69112: LD_INT 4
69114: PLUS
69115: PUSH
69116: LD_VAR 0 2
69120: PUSH
69121: LD_INT 4
69123: PLUS
69124: PUSH
69125: LD_INT 5
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: LIST
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: LIST
69139: ST_TO_ADDR
// end ; 2 :
69140: GO 69699
69142: LD_INT 2
69144: DOUBLE
69145: EQUAL
69146: IFTRUE 69150
69148: GO 69279
69150: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69151: LD_ADDR_VAR 0 5
69155: PUSH
69156: LD_VAR 0 1
69160: PUSH
69161: LD_VAR 0 2
69165: PUSH
69166: LD_INT 3
69168: MINUS
69169: PUSH
69170: LD_INT 3
69172: PUSH
69173: EMPTY
69174: LIST
69175: LIST
69176: LIST
69177: PUSH
69178: LD_VAR 0 1
69182: PUSH
69183: LD_INT 4
69185: PLUS
69186: PUSH
69187: LD_VAR 0 2
69191: PUSH
69192: LD_INT 4
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: LIST
69199: PUSH
69200: LD_VAR 0 1
69204: PUSH
69205: LD_VAR 0 2
69209: PUSH
69210: LD_INT 4
69212: PLUS
69213: PUSH
69214: LD_INT 0
69216: PUSH
69217: EMPTY
69218: LIST
69219: LIST
69220: LIST
69221: PUSH
69222: LD_VAR 0 1
69226: PUSH
69227: LD_INT 3
69229: MINUS
69230: PUSH
69231: LD_VAR 0 2
69235: PUSH
69236: LD_INT 1
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: LIST
69243: PUSH
69244: LD_VAR 0 1
69248: PUSH
69249: LD_INT 4
69251: MINUS
69252: PUSH
69253: LD_VAR 0 2
69257: PUSH
69258: LD_INT 4
69260: MINUS
69261: PUSH
69262: LD_INT 2
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: LIST
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: LIST
69274: LIST
69275: LIST
69276: ST_TO_ADDR
// end ; 3 :
69277: GO 69699
69279: LD_INT 3
69281: DOUBLE
69282: EQUAL
69283: IFTRUE 69287
69285: GO 69420
69287: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69288: LD_ADDR_VAR 0 5
69292: PUSH
69293: LD_VAR 0 1
69297: PUSH
69298: LD_INT 3
69300: PLUS
69301: PUSH
69302: LD_VAR 0 2
69306: PUSH
69307: LD_INT 4
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: LIST
69314: PUSH
69315: LD_VAR 0 1
69319: PUSH
69320: LD_INT 4
69322: PLUS
69323: PUSH
69324: LD_VAR 0 2
69328: PUSH
69329: LD_INT 4
69331: PLUS
69332: PUSH
69333: LD_INT 5
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: LIST
69340: PUSH
69341: LD_VAR 0 1
69345: PUSH
69346: LD_INT 4
69348: MINUS
69349: PUSH
69350: LD_VAR 0 2
69354: PUSH
69355: LD_INT 1
69357: PUSH
69358: EMPTY
69359: LIST
69360: LIST
69361: LIST
69362: PUSH
69363: LD_VAR 0 1
69367: PUSH
69368: LD_VAR 0 2
69372: PUSH
69373: LD_INT 4
69375: MINUS
69376: PUSH
69377: LD_INT 3
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: LIST
69384: PUSH
69385: LD_VAR 0 1
69389: PUSH
69390: LD_INT 3
69392: MINUS
69393: PUSH
69394: LD_VAR 0 2
69398: PUSH
69399: LD_INT 3
69401: MINUS
69402: PUSH
69403: LD_INT 2
69405: PUSH
69406: EMPTY
69407: LIST
69408: LIST
69409: LIST
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: LIST
69415: LIST
69416: LIST
69417: ST_TO_ADDR
// end ; 4 :
69418: GO 69699
69420: LD_INT 4
69422: DOUBLE
69423: EQUAL
69424: IFTRUE 69428
69426: GO 69561
69428: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69429: LD_ADDR_VAR 0 5
69433: PUSH
69434: LD_VAR 0 1
69438: PUSH
69439: LD_VAR 0 2
69443: PUSH
69444: LD_INT 4
69446: PLUS
69447: PUSH
69448: LD_INT 0
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: LIST
69455: PUSH
69456: LD_VAR 0 1
69460: PUSH
69461: LD_INT 3
69463: PLUS
69464: PUSH
69465: LD_VAR 0 2
69469: PUSH
69470: LD_INT 3
69472: PLUS
69473: PUSH
69474: LD_INT 5
69476: PUSH
69477: EMPTY
69478: LIST
69479: LIST
69480: LIST
69481: PUSH
69482: LD_VAR 0 1
69486: PUSH
69487: LD_INT 4
69489: PLUS
69490: PUSH
69491: LD_VAR 0 2
69495: PUSH
69496: LD_INT 4
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: LIST
69503: PUSH
69504: LD_VAR 0 1
69508: PUSH
69509: LD_VAR 0 2
69513: PUSH
69514: LD_INT 3
69516: MINUS
69517: PUSH
69518: LD_INT 3
69520: PUSH
69521: EMPTY
69522: LIST
69523: LIST
69524: LIST
69525: PUSH
69526: LD_VAR 0 1
69530: PUSH
69531: LD_INT 4
69533: MINUS
69534: PUSH
69535: LD_VAR 0 2
69539: PUSH
69540: LD_INT 4
69542: MINUS
69543: PUSH
69544: LD_INT 2
69546: PUSH
69547: EMPTY
69548: LIST
69549: LIST
69550: LIST
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: ST_TO_ADDR
// end ; 5 :
69559: GO 69699
69561: LD_INT 5
69563: DOUBLE
69564: EQUAL
69565: IFTRUE 69569
69567: GO 69698
69569: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
69570: LD_ADDR_VAR 0 5
69574: PUSH
69575: LD_VAR 0 1
69579: PUSH
69580: LD_INT 4
69582: MINUS
69583: PUSH
69584: LD_VAR 0 2
69588: PUSH
69589: LD_INT 1
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: LIST
69596: PUSH
69597: LD_VAR 0 1
69601: PUSH
69602: LD_VAR 0 2
69606: PUSH
69607: LD_INT 4
69609: MINUS
69610: PUSH
69611: LD_INT 3
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: LIST
69618: PUSH
69619: LD_VAR 0 1
69623: PUSH
69624: LD_INT 4
69626: PLUS
69627: PUSH
69628: LD_VAR 0 2
69632: PUSH
69633: LD_INT 4
69635: PLUS
69636: PUSH
69637: LD_INT 5
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: LIST
69644: PUSH
69645: LD_VAR 0 1
69649: PUSH
69650: LD_INT 3
69652: PLUS
69653: PUSH
69654: LD_VAR 0 2
69658: PUSH
69659: LD_INT 4
69661: PUSH
69662: EMPTY
69663: LIST
69664: LIST
69665: LIST
69666: PUSH
69667: LD_VAR 0 1
69671: PUSH
69672: LD_VAR 0 2
69676: PUSH
69677: LD_INT 3
69679: PLUS
69680: PUSH
69681: LD_INT 0
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: LIST
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: LIST
69693: LIST
69694: LIST
69695: ST_TO_ADDR
// end ; end ;
69696: GO 69699
69698: POP
// result := list ;
69699: LD_ADDR_VAR 0 4
69703: PUSH
69704: LD_VAR 0 5
69708: ST_TO_ADDR
// end ;
69709: LD_VAR 0 4
69713: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
69714: LD_INT 0
69716: PPUSH
69717: PPUSH
69718: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
69719: LD_VAR 0 1
69723: NOT
69724: PUSH
69725: LD_VAR 0 2
69729: PUSH
69730: LD_INT 1
69732: PUSH
69733: LD_INT 2
69735: PUSH
69736: LD_INT 3
69738: PUSH
69739: LD_INT 4
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: LIST
69746: LIST
69747: IN
69748: NOT
69749: OR
69750: IFFALSE 69754
// exit ;
69752: GO 69846
// tmp := [ ] ;
69754: LD_ADDR_VAR 0 5
69758: PUSH
69759: EMPTY
69760: ST_TO_ADDR
// for i in units do
69761: LD_ADDR_VAR 0 4
69765: PUSH
69766: LD_VAR 0 1
69770: PUSH
69771: FOR_IN
69772: IFFALSE 69815
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
69774: LD_ADDR_VAR 0 5
69778: PUSH
69779: LD_VAR 0 5
69783: PPUSH
69784: LD_VAR 0 5
69788: PUSH
69789: LD_INT 1
69791: PLUS
69792: PPUSH
69793: LD_VAR 0 4
69797: PPUSH
69798: LD_VAR 0 2
69802: PPUSH
69803: CALL_OW 259
69807: PPUSH
69808: CALL_OW 2
69812: ST_TO_ADDR
69813: GO 69771
69815: POP
69816: POP
// if not tmp then
69817: LD_VAR 0 5
69821: NOT
69822: IFFALSE 69826
// exit ;
69824: GO 69846
// result := SortListByListDesc ( units , tmp ) ;
69826: LD_ADDR_VAR 0 3
69830: PUSH
69831: LD_VAR 0 1
69835: PPUSH
69836: LD_VAR 0 5
69840: PPUSH
69841: CALL_OW 77
69845: ST_TO_ADDR
// end ;
69846: LD_VAR 0 3
69850: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
69851: LD_INT 0
69853: PPUSH
69854: PPUSH
69855: PPUSH
// result := false ;
69856: LD_ADDR_VAR 0 3
69860: PUSH
69861: LD_INT 0
69863: ST_TO_ADDR
// x := GetX ( building ) ;
69864: LD_ADDR_VAR 0 4
69868: PUSH
69869: LD_VAR 0 2
69873: PPUSH
69874: CALL_OW 250
69878: ST_TO_ADDR
// y := GetY ( building ) ;
69879: LD_ADDR_VAR 0 5
69883: PUSH
69884: LD_VAR 0 2
69888: PPUSH
69889: CALL_OW 251
69893: ST_TO_ADDR
// if not building or not x or not y then
69894: LD_VAR 0 2
69898: NOT
69899: PUSH
69900: LD_VAR 0 4
69904: NOT
69905: OR
69906: PUSH
69907: LD_VAR 0 5
69911: NOT
69912: OR
69913: IFFALSE 69917
// exit ;
69915: GO 70009
// if GetTaskList ( unit ) then
69917: LD_VAR 0 1
69921: PPUSH
69922: CALL_OW 437
69926: IFFALSE 70009
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69928: LD_STRING e
69930: PUSH
69931: LD_VAR 0 1
69935: PPUSH
69936: CALL_OW 437
69940: PUSH
69941: LD_INT 1
69943: ARRAY
69944: PUSH
69945: LD_INT 1
69947: ARRAY
69948: EQUAL
69949: PUSH
69950: LD_VAR 0 4
69954: PUSH
69955: LD_VAR 0 1
69959: PPUSH
69960: CALL_OW 437
69964: PUSH
69965: LD_INT 1
69967: ARRAY
69968: PUSH
69969: LD_INT 2
69971: ARRAY
69972: EQUAL
69973: AND
69974: PUSH
69975: LD_VAR 0 5
69979: PUSH
69980: LD_VAR 0 1
69984: PPUSH
69985: CALL_OW 437
69989: PUSH
69990: LD_INT 1
69992: ARRAY
69993: PUSH
69994: LD_INT 3
69996: ARRAY
69997: EQUAL
69998: AND
69999: IFFALSE 70009
// result := true end ;
70001: LD_ADDR_VAR 0 3
70005: PUSH
70006: LD_INT 1
70008: ST_TO_ADDR
// end ;
70009: LD_VAR 0 3
70013: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70014: LD_INT 0
70016: PPUSH
// result := false ;
70017: LD_ADDR_VAR 0 4
70021: PUSH
70022: LD_INT 0
70024: ST_TO_ADDR
// if GetTaskList ( unit ) then
70025: LD_VAR 0 1
70029: PPUSH
70030: CALL_OW 437
70034: IFFALSE 70117
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70036: LD_STRING M
70038: PUSH
70039: LD_VAR 0 1
70043: PPUSH
70044: CALL_OW 437
70048: PUSH
70049: LD_INT 1
70051: ARRAY
70052: PUSH
70053: LD_INT 1
70055: ARRAY
70056: EQUAL
70057: PUSH
70058: LD_VAR 0 2
70062: PUSH
70063: LD_VAR 0 1
70067: PPUSH
70068: CALL_OW 437
70072: PUSH
70073: LD_INT 1
70075: ARRAY
70076: PUSH
70077: LD_INT 2
70079: ARRAY
70080: EQUAL
70081: AND
70082: PUSH
70083: LD_VAR 0 3
70087: PUSH
70088: LD_VAR 0 1
70092: PPUSH
70093: CALL_OW 437
70097: PUSH
70098: LD_INT 1
70100: ARRAY
70101: PUSH
70102: LD_INT 3
70104: ARRAY
70105: EQUAL
70106: AND
70107: IFFALSE 70117
// result := true ;
70109: LD_ADDR_VAR 0 4
70113: PUSH
70114: LD_INT 1
70116: ST_TO_ADDR
// end ; end ;
70117: LD_VAR 0 4
70121: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70122: LD_INT 0
70124: PPUSH
70125: PPUSH
70126: PPUSH
70127: PPUSH
// if not unit or not area then
70128: LD_VAR 0 1
70132: NOT
70133: PUSH
70134: LD_VAR 0 2
70138: NOT
70139: OR
70140: IFFALSE 70144
// exit ;
70142: GO 70308
// tmp := AreaToList ( area , i ) ;
70144: LD_ADDR_VAR 0 6
70148: PUSH
70149: LD_VAR 0 2
70153: PPUSH
70154: LD_VAR 0 5
70158: PPUSH
70159: CALL_OW 517
70163: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70164: LD_ADDR_VAR 0 5
70168: PUSH
70169: DOUBLE
70170: LD_INT 1
70172: DEC
70173: ST_TO_ADDR
70174: LD_VAR 0 6
70178: PUSH
70179: LD_INT 1
70181: ARRAY
70182: PUSH
70183: FOR_TO
70184: IFFALSE 70306
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70186: LD_ADDR_VAR 0 7
70190: PUSH
70191: LD_VAR 0 6
70195: PUSH
70196: LD_INT 1
70198: ARRAY
70199: PUSH
70200: LD_VAR 0 5
70204: ARRAY
70205: PUSH
70206: LD_VAR 0 6
70210: PUSH
70211: LD_INT 2
70213: ARRAY
70214: PUSH
70215: LD_VAR 0 5
70219: ARRAY
70220: PUSH
70221: EMPTY
70222: LIST
70223: LIST
70224: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
70225: LD_VAR 0 7
70229: PUSH
70230: LD_INT 1
70232: ARRAY
70233: PPUSH
70234: LD_VAR 0 7
70238: PUSH
70239: LD_INT 2
70241: ARRAY
70242: PPUSH
70243: CALL_OW 428
70247: PUSH
70248: LD_INT 0
70250: EQUAL
70251: IFFALSE 70304
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70253: LD_VAR 0 1
70257: PPUSH
70258: LD_VAR 0 7
70262: PUSH
70263: LD_INT 1
70265: ARRAY
70266: PPUSH
70267: LD_VAR 0 7
70271: PUSH
70272: LD_INT 2
70274: ARRAY
70275: PPUSH
70276: LD_VAR 0 3
70280: PPUSH
70281: CALL_OW 48
// result := IsPlaced ( unit ) ;
70285: LD_ADDR_VAR 0 4
70289: PUSH
70290: LD_VAR 0 1
70294: PPUSH
70295: CALL_OW 305
70299: ST_TO_ADDR
// exit ;
70300: POP
70301: POP
70302: GO 70308
// end ; end ;
70304: GO 70183
70306: POP
70307: POP
// end ;
70308: LD_VAR 0 4
70312: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70313: LD_INT 0
70315: PPUSH
70316: PPUSH
70317: PPUSH
// if not side or side > 8 then
70318: LD_VAR 0 1
70322: NOT
70323: PUSH
70324: LD_VAR 0 1
70328: PUSH
70329: LD_INT 8
70331: GREATER
70332: OR
70333: IFFALSE 70337
// exit ;
70335: GO 70524
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70337: LD_ADDR_VAR 0 4
70341: PUSH
70342: LD_INT 22
70344: PUSH
70345: LD_VAR 0 1
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: PUSH
70354: LD_INT 21
70356: PUSH
70357: LD_INT 3
70359: PUSH
70360: EMPTY
70361: LIST
70362: LIST
70363: PUSH
70364: EMPTY
70365: LIST
70366: LIST
70367: PPUSH
70368: CALL_OW 69
70372: ST_TO_ADDR
// if not tmp then
70373: LD_VAR 0 4
70377: NOT
70378: IFFALSE 70382
// exit ;
70380: GO 70524
// enable_addtolog := true ;
70382: LD_ADDR_OWVAR 81
70386: PUSH
70387: LD_INT 1
70389: ST_TO_ADDR
// AddToLog ( [ ) ;
70390: LD_STRING [
70392: PPUSH
70393: CALL_OW 561
// for i in tmp do
70397: LD_ADDR_VAR 0 3
70401: PUSH
70402: LD_VAR 0 4
70406: PUSH
70407: FOR_IN
70408: IFFALSE 70515
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70410: LD_STRING [
70412: PUSH
70413: LD_VAR 0 3
70417: PPUSH
70418: CALL_OW 266
70422: STR
70423: PUSH
70424: LD_STRING , 
70426: STR
70427: PUSH
70428: LD_VAR 0 3
70432: PPUSH
70433: CALL_OW 250
70437: STR
70438: PUSH
70439: LD_STRING , 
70441: STR
70442: PUSH
70443: LD_VAR 0 3
70447: PPUSH
70448: CALL_OW 251
70452: STR
70453: PUSH
70454: LD_STRING , 
70456: STR
70457: PUSH
70458: LD_VAR 0 3
70462: PPUSH
70463: CALL_OW 254
70467: STR
70468: PUSH
70469: LD_STRING , 
70471: STR
70472: PUSH
70473: LD_VAR 0 3
70477: PPUSH
70478: LD_INT 1
70480: PPUSH
70481: CALL_OW 268
70485: STR
70486: PUSH
70487: LD_STRING , 
70489: STR
70490: PUSH
70491: LD_VAR 0 3
70495: PPUSH
70496: LD_INT 2
70498: PPUSH
70499: CALL_OW 268
70503: STR
70504: PUSH
70505: LD_STRING ],
70507: STR
70508: PPUSH
70509: CALL_OW 561
// end ;
70513: GO 70407
70515: POP
70516: POP
// AddToLog ( ]; ) ;
70517: LD_STRING ];
70519: PPUSH
70520: CALL_OW 561
// end ;
70524: LD_VAR 0 2
70528: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70529: LD_INT 0
70531: PPUSH
70532: PPUSH
70533: PPUSH
70534: PPUSH
70535: PPUSH
// if not area or not rate or not max then
70536: LD_VAR 0 1
70540: NOT
70541: PUSH
70542: LD_VAR 0 2
70546: NOT
70547: OR
70548: PUSH
70549: LD_VAR 0 4
70553: NOT
70554: OR
70555: IFFALSE 70559
// exit ;
70557: GO 70751
// while 1 do
70559: LD_INT 1
70561: IFFALSE 70751
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
70563: LD_ADDR_VAR 0 9
70567: PUSH
70568: LD_VAR 0 1
70572: PPUSH
70573: LD_INT 1
70575: PPUSH
70576: CALL_OW 287
70580: PUSH
70581: LD_INT 10
70583: MUL
70584: ST_TO_ADDR
// r := rate / 10 ;
70585: LD_ADDR_VAR 0 7
70589: PUSH
70590: LD_VAR 0 2
70594: PUSH
70595: LD_INT 10
70597: DIVREAL
70598: ST_TO_ADDR
// time := 1 1$00 ;
70599: LD_ADDR_VAR 0 8
70603: PUSH
70604: LD_INT 2100
70606: ST_TO_ADDR
// if amount < min then
70607: LD_VAR 0 9
70611: PUSH
70612: LD_VAR 0 3
70616: LESS
70617: IFFALSE 70635
// r := r * 2 else
70619: LD_ADDR_VAR 0 7
70623: PUSH
70624: LD_VAR 0 7
70628: PUSH
70629: LD_INT 2
70631: MUL
70632: ST_TO_ADDR
70633: GO 70661
// if amount > max then
70635: LD_VAR 0 9
70639: PUSH
70640: LD_VAR 0 4
70644: GREATER
70645: IFFALSE 70661
// r := r / 2 ;
70647: LD_ADDR_VAR 0 7
70651: PUSH
70652: LD_VAR 0 7
70656: PUSH
70657: LD_INT 2
70659: DIVREAL
70660: ST_TO_ADDR
// time := time / r ;
70661: LD_ADDR_VAR 0 8
70665: PUSH
70666: LD_VAR 0 8
70670: PUSH
70671: LD_VAR 0 7
70675: DIVREAL
70676: ST_TO_ADDR
// if time < 0 then
70677: LD_VAR 0 8
70681: PUSH
70682: LD_INT 0
70684: LESS
70685: IFFALSE 70702
// time := time * - 1 ;
70687: LD_ADDR_VAR 0 8
70691: PUSH
70692: LD_VAR 0 8
70696: PUSH
70697: LD_INT 1
70699: NEG
70700: MUL
70701: ST_TO_ADDR
// wait ( time ) ;
70702: LD_VAR 0 8
70706: PPUSH
70707: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
70711: LD_INT 35
70713: PPUSH
70714: LD_INT 875
70716: PPUSH
70717: CALL_OW 12
70721: PPUSH
70722: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
70726: LD_INT 1
70728: PPUSH
70729: LD_INT 5
70731: PPUSH
70732: CALL_OW 12
70736: PPUSH
70737: LD_VAR 0 1
70741: PPUSH
70742: LD_INT 1
70744: PPUSH
70745: CALL_OW 55
// end ;
70749: GO 70559
// end ;
70751: LD_VAR 0 5
70755: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
70756: LD_INT 0
70758: PPUSH
70759: PPUSH
70760: PPUSH
70761: PPUSH
70762: PPUSH
70763: PPUSH
70764: PPUSH
70765: PPUSH
// if not turrets or not factories then
70766: LD_VAR 0 1
70770: NOT
70771: PUSH
70772: LD_VAR 0 2
70776: NOT
70777: OR
70778: IFFALSE 70782
// exit ;
70780: GO 71089
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
70782: LD_ADDR_VAR 0 10
70786: PUSH
70787: LD_INT 5
70789: PUSH
70790: LD_INT 6
70792: PUSH
70793: EMPTY
70794: LIST
70795: LIST
70796: PUSH
70797: LD_INT 2
70799: PUSH
70800: LD_INT 4
70802: PUSH
70803: EMPTY
70804: LIST
70805: LIST
70806: PUSH
70807: LD_INT 3
70809: PUSH
70810: LD_INT 5
70812: PUSH
70813: EMPTY
70814: LIST
70815: LIST
70816: PUSH
70817: EMPTY
70818: LIST
70819: LIST
70820: LIST
70821: PUSH
70822: LD_INT 24
70824: PUSH
70825: LD_INT 25
70827: PUSH
70828: EMPTY
70829: LIST
70830: LIST
70831: PUSH
70832: LD_INT 23
70834: PUSH
70835: LD_INT 27
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: PUSH
70842: EMPTY
70843: LIST
70844: LIST
70845: PUSH
70846: LD_INT 42
70848: PUSH
70849: LD_INT 43
70851: PUSH
70852: EMPTY
70853: LIST
70854: LIST
70855: PUSH
70856: LD_INT 44
70858: PUSH
70859: LD_INT 46
70861: PUSH
70862: EMPTY
70863: LIST
70864: LIST
70865: PUSH
70866: LD_INT 45
70868: PUSH
70869: LD_INT 47
70871: PUSH
70872: EMPTY
70873: LIST
70874: LIST
70875: PUSH
70876: EMPTY
70877: LIST
70878: LIST
70879: LIST
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: LIST
70885: ST_TO_ADDR
// result := [ ] ;
70886: LD_ADDR_VAR 0 3
70890: PUSH
70891: EMPTY
70892: ST_TO_ADDR
// for i in turrets do
70893: LD_ADDR_VAR 0 4
70897: PUSH
70898: LD_VAR 0 1
70902: PUSH
70903: FOR_IN
70904: IFFALSE 71087
// begin nat := GetNation ( i ) ;
70906: LD_ADDR_VAR 0 7
70910: PUSH
70911: LD_VAR 0 4
70915: PPUSH
70916: CALL_OW 248
70920: ST_TO_ADDR
// weapon := 0 ;
70921: LD_ADDR_VAR 0 8
70925: PUSH
70926: LD_INT 0
70928: ST_TO_ADDR
// if not nat then
70929: LD_VAR 0 7
70933: NOT
70934: IFFALSE 70938
// continue ;
70936: GO 70903
// for j in list [ nat ] do
70938: LD_ADDR_VAR 0 5
70942: PUSH
70943: LD_VAR 0 10
70947: PUSH
70948: LD_VAR 0 7
70952: ARRAY
70953: PUSH
70954: FOR_IN
70955: IFFALSE 70996
// if GetBWeapon ( i ) = j [ 1 ] then
70957: LD_VAR 0 4
70961: PPUSH
70962: CALL_OW 269
70966: PUSH
70967: LD_VAR 0 5
70971: PUSH
70972: LD_INT 1
70974: ARRAY
70975: EQUAL
70976: IFFALSE 70994
// begin weapon := j [ 2 ] ;
70978: LD_ADDR_VAR 0 8
70982: PUSH
70983: LD_VAR 0 5
70987: PUSH
70988: LD_INT 2
70990: ARRAY
70991: ST_TO_ADDR
// break ;
70992: GO 70996
// end ;
70994: GO 70954
70996: POP
70997: POP
// if not weapon then
70998: LD_VAR 0 8
71002: NOT
71003: IFFALSE 71007
// continue ;
71005: GO 70903
// for k in factories do
71007: LD_ADDR_VAR 0 6
71011: PUSH
71012: LD_VAR 0 2
71016: PUSH
71017: FOR_IN
71018: IFFALSE 71083
// begin weapons := AvailableWeaponList ( k ) ;
71020: LD_ADDR_VAR 0 9
71024: PUSH
71025: LD_VAR 0 6
71029: PPUSH
71030: CALL_OW 478
71034: ST_TO_ADDR
// if not weapons then
71035: LD_VAR 0 9
71039: NOT
71040: IFFALSE 71044
// continue ;
71042: GO 71017
// if weapon in weapons then
71044: LD_VAR 0 8
71048: PUSH
71049: LD_VAR 0 9
71053: IN
71054: IFFALSE 71081
// begin result := [ i , weapon ] ;
71056: LD_ADDR_VAR 0 3
71060: PUSH
71061: LD_VAR 0 4
71065: PUSH
71066: LD_VAR 0 8
71070: PUSH
71071: EMPTY
71072: LIST
71073: LIST
71074: ST_TO_ADDR
// exit ;
71075: POP
71076: POP
71077: POP
71078: POP
71079: GO 71089
// end ; end ;
71081: GO 71017
71083: POP
71084: POP
// end ;
71085: GO 70903
71087: POP
71088: POP
// end ;
71089: LD_VAR 0 3
71093: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71094: LD_INT 0
71096: PPUSH
// if not side or side > 8 then
71097: LD_VAR 0 3
71101: NOT
71102: PUSH
71103: LD_VAR 0 3
71107: PUSH
71108: LD_INT 8
71110: GREATER
71111: OR
71112: IFFALSE 71116
// exit ;
71114: GO 71175
// if not range then
71116: LD_VAR 0 4
71120: NOT
71121: IFFALSE 71132
// range := - 12 ;
71123: LD_ADDR_VAR 0 4
71127: PUSH
71128: LD_INT 12
71130: NEG
71131: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71132: LD_VAR 0 1
71136: PPUSH
71137: LD_VAR 0 2
71141: PPUSH
71142: LD_VAR 0 3
71146: PPUSH
71147: LD_VAR 0 4
71151: PPUSH
71152: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71156: LD_VAR 0 1
71160: PPUSH
71161: LD_VAR 0 2
71165: PPUSH
71166: LD_VAR 0 3
71170: PPUSH
71171: CALL_OW 331
// end ;
71175: LD_VAR 0 5
71179: RET
// export function Video ( mode ) ; begin
71180: LD_INT 0
71182: PPUSH
// ingame_video = mode ;
71183: LD_ADDR_OWVAR 52
71187: PUSH
71188: LD_VAR 0 1
71192: ST_TO_ADDR
// interface_hidden = mode ;
71193: LD_ADDR_OWVAR 54
71197: PUSH
71198: LD_VAR 0 1
71202: ST_TO_ADDR
// end ;
71203: LD_VAR 0 2
71207: RET
// export function Join ( array , element ) ; begin
71208: LD_INT 0
71210: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71211: LD_ADDR_VAR 0 3
71215: PUSH
71216: LD_VAR 0 1
71220: PPUSH
71221: LD_VAR 0 1
71225: PUSH
71226: LD_INT 1
71228: PLUS
71229: PPUSH
71230: LD_VAR 0 2
71234: PPUSH
71235: CALL_OW 1
71239: ST_TO_ADDR
// end ;
71240: LD_VAR 0 3
71244: RET
// export function JoinUnion ( array , element ) ; begin
71245: LD_INT 0
71247: PPUSH
// result := array union element ;
71248: LD_ADDR_VAR 0 3
71252: PUSH
71253: LD_VAR 0 1
71257: PUSH
71258: LD_VAR 0 2
71262: UNION
71263: ST_TO_ADDR
// end ;
71264: LD_VAR 0 3
71268: RET
// export function GetBehemoths ( side ) ; begin
71269: LD_INT 0
71271: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
71272: LD_ADDR_VAR 0 2
71276: PUSH
71277: LD_INT 22
71279: PUSH
71280: LD_VAR 0 1
71284: PUSH
71285: EMPTY
71286: LIST
71287: LIST
71288: PUSH
71289: LD_INT 31
71291: PUSH
71292: LD_INT 25
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: PUSH
71299: EMPTY
71300: LIST
71301: LIST
71302: PPUSH
71303: CALL_OW 69
71307: ST_TO_ADDR
// end ;
71308: LD_VAR 0 2
71312: RET
// export function Shuffle ( array ) ; var i , index ; begin
71313: LD_INT 0
71315: PPUSH
71316: PPUSH
71317: PPUSH
// result := [ ] ;
71318: LD_ADDR_VAR 0 2
71322: PUSH
71323: EMPTY
71324: ST_TO_ADDR
// if not array then
71325: LD_VAR 0 1
71329: NOT
71330: IFFALSE 71334
// exit ;
71332: GO 71433
// Randomize ;
71334: CALL_OW 10
// for i = array downto 1 do
71338: LD_ADDR_VAR 0 3
71342: PUSH
71343: DOUBLE
71344: LD_VAR 0 1
71348: INC
71349: ST_TO_ADDR
71350: LD_INT 1
71352: PUSH
71353: FOR_DOWNTO
71354: IFFALSE 71431
// begin index := rand ( 1 , array ) ;
71356: LD_ADDR_VAR 0 4
71360: PUSH
71361: LD_INT 1
71363: PPUSH
71364: LD_VAR 0 1
71368: PPUSH
71369: CALL_OW 12
71373: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71374: LD_ADDR_VAR 0 2
71378: PUSH
71379: LD_VAR 0 2
71383: PPUSH
71384: LD_VAR 0 2
71388: PUSH
71389: LD_INT 1
71391: PLUS
71392: PPUSH
71393: LD_VAR 0 1
71397: PUSH
71398: LD_VAR 0 4
71402: ARRAY
71403: PPUSH
71404: CALL_OW 2
71408: ST_TO_ADDR
// array := Delete ( array , index ) ;
71409: LD_ADDR_VAR 0 1
71413: PUSH
71414: LD_VAR 0 1
71418: PPUSH
71419: LD_VAR 0 4
71423: PPUSH
71424: CALL_OW 3
71428: ST_TO_ADDR
// end ;
71429: GO 71353
71431: POP
71432: POP
// end ;
71433: LD_VAR 0 2
71437: RET
// export function GetBaseMaterials ( base ) ; begin
71438: LD_INT 0
71440: PPUSH
// result := [ 0 , 0 , 0 ] ;
71441: LD_ADDR_VAR 0 2
71445: PUSH
71446: LD_INT 0
71448: PUSH
71449: LD_INT 0
71451: PUSH
71452: LD_INT 0
71454: PUSH
71455: EMPTY
71456: LIST
71457: LIST
71458: LIST
71459: ST_TO_ADDR
// if not base then
71460: LD_VAR 0 1
71464: NOT
71465: IFFALSE 71469
// exit ;
71467: GO 71518
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
71469: LD_ADDR_VAR 0 2
71473: PUSH
71474: LD_VAR 0 1
71478: PPUSH
71479: LD_INT 1
71481: PPUSH
71482: CALL_OW 275
71486: PUSH
71487: LD_VAR 0 1
71491: PPUSH
71492: LD_INT 2
71494: PPUSH
71495: CALL_OW 275
71499: PUSH
71500: LD_VAR 0 1
71504: PPUSH
71505: LD_INT 3
71507: PPUSH
71508: CALL_OW 275
71512: PUSH
71513: EMPTY
71514: LIST
71515: LIST
71516: LIST
71517: ST_TO_ADDR
// end ;
71518: LD_VAR 0 2
71522: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
71523: LD_INT 0
71525: PPUSH
71526: PPUSH
// result := array ;
71527: LD_ADDR_VAR 0 3
71531: PUSH
71532: LD_VAR 0 1
71536: ST_TO_ADDR
// if size > 0 then
71537: LD_VAR 0 2
71541: PUSH
71542: LD_INT 0
71544: GREATER
71545: IFFALSE 71591
// for i := array downto size do
71547: LD_ADDR_VAR 0 4
71551: PUSH
71552: DOUBLE
71553: LD_VAR 0 1
71557: INC
71558: ST_TO_ADDR
71559: LD_VAR 0 2
71563: PUSH
71564: FOR_DOWNTO
71565: IFFALSE 71589
// result := Delete ( result , result ) ;
71567: LD_ADDR_VAR 0 3
71571: PUSH
71572: LD_VAR 0 3
71576: PPUSH
71577: LD_VAR 0 3
71581: PPUSH
71582: CALL_OW 3
71586: ST_TO_ADDR
71587: GO 71564
71589: POP
71590: POP
// end ;
71591: LD_VAR 0 3
71595: RET
// export function ComExit ( unit ) ; var tmp ; begin
71596: LD_INT 0
71598: PPUSH
71599: PPUSH
// if not IsInUnit ( unit ) then
71600: LD_VAR 0 1
71604: PPUSH
71605: CALL_OW 310
71609: NOT
71610: IFFALSE 71614
// exit ;
71612: GO 71674
// tmp := IsInUnit ( unit ) ;
71614: LD_ADDR_VAR 0 3
71618: PUSH
71619: LD_VAR 0 1
71623: PPUSH
71624: CALL_OW 310
71628: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
71629: LD_VAR 0 3
71633: PPUSH
71634: CALL_OW 247
71638: PUSH
71639: LD_INT 2
71641: EQUAL
71642: IFFALSE 71655
// ComExitVehicle ( unit ) else
71644: LD_VAR 0 1
71648: PPUSH
71649: CALL_OW 121
71653: GO 71664
// ComExitBuilding ( unit ) ;
71655: LD_VAR 0 1
71659: PPUSH
71660: CALL_OW 122
// result := tmp ;
71664: LD_ADDR_VAR 0 2
71668: PUSH
71669: LD_VAR 0 3
71673: ST_TO_ADDR
// end ;
71674: LD_VAR 0 2
71678: RET
// export function ComExitAll ( units ) ; var i ; begin
71679: LD_INT 0
71681: PPUSH
71682: PPUSH
// if not units then
71683: LD_VAR 0 1
71687: NOT
71688: IFFALSE 71692
// exit ;
71690: GO 71718
// for i in units do
71692: LD_ADDR_VAR 0 3
71696: PUSH
71697: LD_VAR 0 1
71701: PUSH
71702: FOR_IN
71703: IFFALSE 71716
// ComExit ( i ) ;
71705: LD_VAR 0 3
71709: PPUSH
71710: CALL 71596 0 1
71714: GO 71702
71716: POP
71717: POP
// end ;
71718: LD_VAR 0 2
71722: RET
// export function ResetHc ; begin
71723: LD_INT 0
71725: PPUSH
// InitHc ;
71726: CALL_OW 19
// hc_importance := 0 ;
71730: LD_ADDR_OWVAR 32
71734: PUSH
71735: LD_INT 0
71737: ST_TO_ADDR
// end ;
71738: LD_VAR 0 1
71742: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
71743: LD_INT 0
71745: PPUSH
71746: PPUSH
71747: PPUSH
// _x := ( x1 + x2 ) div 2 ;
71748: LD_ADDR_VAR 0 6
71752: PUSH
71753: LD_VAR 0 1
71757: PUSH
71758: LD_VAR 0 3
71762: PLUS
71763: PUSH
71764: LD_INT 2
71766: DIV
71767: ST_TO_ADDR
// if _x < 0 then
71768: LD_VAR 0 6
71772: PUSH
71773: LD_INT 0
71775: LESS
71776: IFFALSE 71793
// _x := _x * - 1 ;
71778: LD_ADDR_VAR 0 6
71782: PUSH
71783: LD_VAR 0 6
71787: PUSH
71788: LD_INT 1
71790: NEG
71791: MUL
71792: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
71793: LD_ADDR_VAR 0 7
71797: PUSH
71798: LD_VAR 0 2
71802: PUSH
71803: LD_VAR 0 4
71807: PLUS
71808: PUSH
71809: LD_INT 2
71811: DIV
71812: ST_TO_ADDR
// if _y < 0 then
71813: LD_VAR 0 7
71817: PUSH
71818: LD_INT 0
71820: LESS
71821: IFFALSE 71838
// _y := _y * - 1 ;
71823: LD_ADDR_VAR 0 7
71827: PUSH
71828: LD_VAR 0 7
71832: PUSH
71833: LD_INT 1
71835: NEG
71836: MUL
71837: ST_TO_ADDR
// result := [ _x , _y ] ;
71838: LD_ADDR_VAR 0 5
71842: PUSH
71843: LD_VAR 0 6
71847: PUSH
71848: LD_VAR 0 7
71852: PUSH
71853: EMPTY
71854: LIST
71855: LIST
71856: ST_TO_ADDR
// end ;
71857: LD_VAR 0 5
71861: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
71862: LD_INT 0
71864: PPUSH
71865: PPUSH
71866: PPUSH
71867: PPUSH
// task := GetTaskList ( unit ) ;
71868: LD_ADDR_VAR 0 7
71872: PUSH
71873: LD_VAR 0 1
71877: PPUSH
71878: CALL_OW 437
71882: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71883: LD_VAR 0 7
71887: NOT
71888: PUSH
71889: LD_VAR 0 1
71893: PPUSH
71894: LD_VAR 0 2
71898: PPUSH
71899: CALL_OW 308
71903: NOT
71904: AND
71905: IFFALSE 71909
// exit ;
71907: GO 72027
// if IsInArea ( unit , area ) then
71909: LD_VAR 0 1
71913: PPUSH
71914: LD_VAR 0 2
71918: PPUSH
71919: CALL_OW 308
71923: IFFALSE 71941
// begin ComMoveToArea ( unit , goAway ) ;
71925: LD_VAR 0 1
71929: PPUSH
71930: LD_VAR 0 3
71934: PPUSH
71935: CALL_OW 113
// exit ;
71939: GO 72027
// end ; if task [ 1 ] [ 1 ] <> M then
71941: LD_VAR 0 7
71945: PUSH
71946: LD_INT 1
71948: ARRAY
71949: PUSH
71950: LD_INT 1
71952: ARRAY
71953: PUSH
71954: LD_STRING M
71956: NONEQUAL
71957: IFFALSE 71961
// exit ;
71959: GO 72027
// x := task [ 1 ] [ 2 ] ;
71961: LD_ADDR_VAR 0 5
71965: PUSH
71966: LD_VAR 0 7
71970: PUSH
71971: LD_INT 1
71973: ARRAY
71974: PUSH
71975: LD_INT 2
71977: ARRAY
71978: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71979: LD_ADDR_VAR 0 6
71983: PUSH
71984: LD_VAR 0 7
71988: PUSH
71989: LD_INT 1
71991: ARRAY
71992: PUSH
71993: LD_INT 3
71995: ARRAY
71996: ST_TO_ADDR
// if InArea ( x , y , area ) then
71997: LD_VAR 0 5
72001: PPUSH
72002: LD_VAR 0 6
72006: PPUSH
72007: LD_VAR 0 2
72011: PPUSH
72012: CALL_OW 309
72016: IFFALSE 72027
// ComStop ( unit ) ;
72018: LD_VAR 0 1
72022: PPUSH
72023: CALL_OW 141
// end ;
72027: LD_VAR 0 4
72031: RET
// export function Abs ( value ) ; begin
72032: LD_INT 0
72034: PPUSH
// result := value ;
72035: LD_ADDR_VAR 0 2
72039: PUSH
72040: LD_VAR 0 1
72044: ST_TO_ADDR
// if value < 0 then
72045: LD_VAR 0 1
72049: PUSH
72050: LD_INT 0
72052: LESS
72053: IFFALSE 72070
// result := value * - 1 ;
72055: LD_ADDR_VAR 0 2
72059: PUSH
72060: LD_VAR 0 1
72064: PUSH
72065: LD_INT 1
72067: NEG
72068: MUL
72069: ST_TO_ADDR
// end ;
72070: LD_VAR 0 2
72074: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72075: LD_INT 0
72077: PPUSH
72078: PPUSH
72079: PPUSH
72080: PPUSH
72081: PPUSH
72082: PPUSH
72083: PPUSH
72084: PPUSH
// if not unit or not building then
72085: LD_VAR 0 1
72089: NOT
72090: PUSH
72091: LD_VAR 0 2
72095: NOT
72096: OR
72097: IFFALSE 72101
// exit ;
72099: GO 72327
// x := GetX ( building ) ;
72101: LD_ADDR_VAR 0 4
72105: PUSH
72106: LD_VAR 0 2
72110: PPUSH
72111: CALL_OW 250
72115: ST_TO_ADDR
// y := GetY ( building ) ;
72116: LD_ADDR_VAR 0 6
72120: PUSH
72121: LD_VAR 0 2
72125: PPUSH
72126: CALL_OW 251
72130: ST_TO_ADDR
// d := GetDir ( building ) ;
72131: LD_ADDR_VAR 0 8
72135: PUSH
72136: LD_VAR 0 2
72140: PPUSH
72141: CALL_OW 254
72145: ST_TO_ADDR
// r := 4 ;
72146: LD_ADDR_VAR 0 9
72150: PUSH
72151: LD_INT 4
72153: ST_TO_ADDR
// for i := 1 to 5 do
72154: LD_ADDR_VAR 0 10
72158: PUSH
72159: DOUBLE
72160: LD_INT 1
72162: DEC
72163: ST_TO_ADDR
72164: LD_INT 5
72166: PUSH
72167: FOR_TO
72168: IFFALSE 72325
// begin _x := ShiftX ( x , d , r + i ) ;
72170: LD_ADDR_VAR 0 5
72174: PUSH
72175: LD_VAR 0 4
72179: PPUSH
72180: LD_VAR 0 8
72184: PPUSH
72185: LD_VAR 0 9
72189: PUSH
72190: LD_VAR 0 10
72194: PLUS
72195: PPUSH
72196: CALL_OW 272
72200: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
72201: LD_ADDR_VAR 0 7
72205: PUSH
72206: LD_VAR 0 6
72210: PPUSH
72211: LD_VAR 0 8
72215: PPUSH
72216: LD_VAR 0 9
72220: PUSH
72221: LD_VAR 0 10
72225: PLUS
72226: PPUSH
72227: CALL_OW 273
72231: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
72232: LD_VAR 0 5
72236: PPUSH
72237: LD_VAR 0 7
72241: PPUSH
72242: CALL_OW 488
72246: PUSH
72247: LD_VAR 0 5
72251: PPUSH
72252: LD_VAR 0 7
72256: PPUSH
72257: CALL_OW 428
72261: PPUSH
72262: CALL_OW 247
72266: PUSH
72267: LD_INT 3
72269: PUSH
72270: LD_INT 2
72272: PUSH
72273: EMPTY
72274: LIST
72275: LIST
72276: IN
72277: NOT
72278: AND
72279: IFFALSE 72323
// begin ComMoveXY ( unit , _x , _y ) ;
72281: LD_VAR 0 1
72285: PPUSH
72286: LD_VAR 0 5
72290: PPUSH
72291: LD_VAR 0 7
72295: PPUSH
72296: CALL_OW 111
// result := [ _x , _y ] ;
72300: LD_ADDR_VAR 0 3
72304: PUSH
72305: LD_VAR 0 5
72309: PUSH
72310: LD_VAR 0 7
72314: PUSH
72315: EMPTY
72316: LIST
72317: LIST
72318: ST_TO_ADDR
// exit ;
72319: POP
72320: POP
72321: GO 72327
// end ; end ;
72323: GO 72167
72325: POP
72326: POP
// end ;
72327: LD_VAR 0 3
72331: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
72332: LD_INT 0
72334: PPUSH
72335: PPUSH
72336: PPUSH
// result := 0 ;
72337: LD_ADDR_VAR 0 3
72341: PUSH
72342: LD_INT 0
72344: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
72345: LD_VAR 0 1
72349: PUSH
72350: LD_INT 0
72352: LESS
72353: PUSH
72354: LD_VAR 0 1
72358: PUSH
72359: LD_INT 8
72361: GREATER
72362: OR
72363: PUSH
72364: LD_VAR 0 2
72368: PUSH
72369: LD_INT 0
72371: LESS
72372: OR
72373: PUSH
72374: LD_VAR 0 2
72378: PUSH
72379: LD_INT 8
72381: GREATER
72382: OR
72383: IFFALSE 72387
// exit ;
72385: GO 72462
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72387: LD_ADDR_VAR 0 4
72391: PUSH
72392: LD_INT 22
72394: PUSH
72395: LD_VAR 0 2
72399: PUSH
72400: EMPTY
72401: LIST
72402: LIST
72403: PPUSH
72404: CALL_OW 69
72408: PUSH
72409: FOR_IN
72410: IFFALSE 72460
// begin un := UnitShoot ( i ) ;
72412: LD_ADDR_VAR 0 5
72416: PUSH
72417: LD_VAR 0 4
72421: PPUSH
72422: CALL_OW 504
72426: ST_TO_ADDR
// if GetSide ( un ) = side1 then
72427: LD_VAR 0 5
72431: PPUSH
72432: CALL_OW 255
72436: PUSH
72437: LD_VAR 0 1
72441: EQUAL
72442: IFFALSE 72458
// begin result := un ;
72444: LD_ADDR_VAR 0 3
72448: PUSH
72449: LD_VAR 0 5
72453: ST_TO_ADDR
// exit ;
72454: POP
72455: POP
72456: GO 72462
// end ; end ;
72458: GO 72409
72460: POP
72461: POP
// end ;
72462: LD_VAR 0 3
72466: RET
// export function GetCargoBay ( units ) ; begin
72467: LD_INT 0
72469: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
72470: LD_ADDR_VAR 0 2
72474: PUSH
72475: LD_VAR 0 1
72479: PPUSH
72480: LD_INT 2
72482: PUSH
72483: LD_INT 34
72485: PUSH
72486: LD_INT 12
72488: PUSH
72489: EMPTY
72490: LIST
72491: LIST
72492: PUSH
72493: LD_INT 34
72495: PUSH
72496: LD_INT 51
72498: PUSH
72499: EMPTY
72500: LIST
72501: LIST
72502: PUSH
72503: LD_INT 34
72505: PUSH
72506: LD_INT 32
72508: PUSH
72509: EMPTY
72510: LIST
72511: LIST
72512: PUSH
72513: LD_INT 34
72515: PUSH
72516: LD_EXP 120
72520: PUSH
72521: EMPTY
72522: LIST
72523: LIST
72524: PUSH
72525: EMPTY
72526: LIST
72527: LIST
72528: LIST
72529: LIST
72530: LIST
72531: PPUSH
72532: CALL_OW 72
72536: ST_TO_ADDR
// end ;
72537: LD_VAR 0 2
72541: RET
// export function Negate ( value ) ; begin
72542: LD_INT 0
72544: PPUSH
// result := not value ;
72545: LD_ADDR_VAR 0 2
72549: PUSH
72550: LD_VAR 0 1
72554: NOT
72555: ST_TO_ADDR
// end ;
72556: LD_VAR 0 2
72560: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
72561: LD_INT 0
72563: PPUSH
// if x1 = x2 then
72564: LD_VAR 0 1
72568: PUSH
72569: LD_VAR 0 3
72573: EQUAL
72574: IFFALSE 72608
// begin if y1 > y2 then
72576: LD_VAR 0 2
72580: PUSH
72581: LD_VAR 0 4
72585: GREATER
72586: IFFALSE 72598
// result := 0 else
72588: LD_ADDR_VAR 0 5
72592: PUSH
72593: LD_INT 0
72595: ST_TO_ADDR
72596: GO 72606
// result := 3 ;
72598: LD_ADDR_VAR 0 5
72602: PUSH
72603: LD_INT 3
72605: ST_TO_ADDR
// exit ;
72606: GO 72694
// end ; if y1 = y2 then
72608: LD_VAR 0 2
72612: PUSH
72613: LD_VAR 0 4
72617: EQUAL
72618: IFFALSE 72652
// begin if x1 > x2 then
72620: LD_VAR 0 1
72624: PUSH
72625: LD_VAR 0 3
72629: GREATER
72630: IFFALSE 72642
// result := 1 else
72632: LD_ADDR_VAR 0 5
72636: PUSH
72637: LD_INT 1
72639: ST_TO_ADDR
72640: GO 72650
// result := 4 ;
72642: LD_ADDR_VAR 0 5
72646: PUSH
72647: LD_INT 4
72649: ST_TO_ADDR
// exit ;
72650: GO 72694
// end ; if x1 > x2 and y1 > y2 then
72652: LD_VAR 0 1
72656: PUSH
72657: LD_VAR 0 3
72661: GREATER
72662: PUSH
72663: LD_VAR 0 2
72667: PUSH
72668: LD_VAR 0 4
72672: GREATER
72673: AND
72674: IFFALSE 72686
// result := 2 else
72676: LD_ADDR_VAR 0 5
72680: PUSH
72681: LD_INT 2
72683: ST_TO_ADDR
72684: GO 72694
// result := 5 ;
72686: LD_ADDR_VAR 0 5
72690: PUSH
72691: LD_INT 5
72693: ST_TO_ADDR
// end ;
72694: LD_VAR 0 5
72698: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72699: LD_INT 0
72701: PPUSH
72702: PPUSH
// if not driver or not IsInUnit ( driver ) then
72703: LD_VAR 0 1
72707: NOT
72708: PUSH
72709: LD_VAR 0 1
72713: PPUSH
72714: CALL_OW 310
72718: NOT
72719: OR
72720: IFFALSE 72724
// exit ;
72722: GO 72814
// vehicle := IsInUnit ( driver ) ;
72724: LD_ADDR_VAR 0 3
72728: PUSH
72729: LD_VAR 0 1
72733: PPUSH
72734: CALL_OW 310
72738: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72739: LD_VAR 0 1
72743: PPUSH
72744: LD_STRING \
72746: PUSH
72747: LD_INT 0
72749: PUSH
72750: LD_INT 0
72752: PUSH
72753: LD_INT 0
72755: PUSH
72756: LD_INT 0
72758: PUSH
72759: LD_INT 0
72761: PUSH
72762: LD_INT 0
72764: PUSH
72765: EMPTY
72766: LIST
72767: LIST
72768: LIST
72769: LIST
72770: LIST
72771: LIST
72772: LIST
72773: PUSH
72774: LD_STRING E
72776: PUSH
72777: LD_INT 0
72779: PUSH
72780: LD_INT 0
72782: PUSH
72783: LD_VAR 0 3
72787: PUSH
72788: LD_INT 0
72790: PUSH
72791: LD_INT 0
72793: PUSH
72794: LD_INT 0
72796: PUSH
72797: EMPTY
72798: LIST
72799: LIST
72800: LIST
72801: LIST
72802: LIST
72803: LIST
72804: LIST
72805: PUSH
72806: EMPTY
72807: LIST
72808: LIST
72809: PPUSH
72810: CALL_OW 446
// end ;
72814: LD_VAR 0 2
72818: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72819: LD_INT 0
72821: PPUSH
72822: PPUSH
// if not driver or not IsInUnit ( driver ) then
72823: LD_VAR 0 1
72827: NOT
72828: PUSH
72829: LD_VAR 0 1
72833: PPUSH
72834: CALL_OW 310
72838: NOT
72839: OR
72840: IFFALSE 72844
// exit ;
72842: GO 72934
// vehicle := IsInUnit ( driver ) ;
72844: LD_ADDR_VAR 0 3
72848: PUSH
72849: LD_VAR 0 1
72853: PPUSH
72854: CALL_OW 310
72858: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72859: LD_VAR 0 1
72863: PPUSH
72864: LD_STRING \
72866: PUSH
72867: LD_INT 0
72869: PUSH
72870: LD_INT 0
72872: PUSH
72873: LD_INT 0
72875: PUSH
72876: LD_INT 0
72878: PUSH
72879: LD_INT 0
72881: PUSH
72882: LD_INT 0
72884: PUSH
72885: EMPTY
72886: LIST
72887: LIST
72888: LIST
72889: LIST
72890: LIST
72891: LIST
72892: LIST
72893: PUSH
72894: LD_STRING E
72896: PUSH
72897: LD_INT 0
72899: PUSH
72900: LD_INT 0
72902: PUSH
72903: LD_VAR 0 3
72907: PUSH
72908: LD_INT 0
72910: PUSH
72911: LD_INT 0
72913: PUSH
72914: LD_INT 0
72916: PUSH
72917: EMPTY
72918: LIST
72919: LIST
72920: LIST
72921: LIST
72922: LIST
72923: LIST
72924: LIST
72925: PUSH
72926: EMPTY
72927: LIST
72928: LIST
72929: PPUSH
72930: CALL_OW 447
// end ;
72934: LD_VAR 0 2
72938: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72939: LD_INT 0
72941: PPUSH
72942: PPUSH
72943: PPUSH
// tmp := [ ] ;
72944: LD_ADDR_VAR 0 5
72948: PUSH
72949: EMPTY
72950: ST_TO_ADDR
// for i in units do
72951: LD_ADDR_VAR 0 4
72955: PUSH
72956: LD_VAR 0 1
72960: PUSH
72961: FOR_IN
72962: IFFALSE 73000
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72964: LD_ADDR_VAR 0 5
72968: PUSH
72969: LD_VAR 0 5
72973: PPUSH
72974: LD_VAR 0 5
72978: PUSH
72979: LD_INT 1
72981: PLUS
72982: PPUSH
72983: LD_VAR 0 4
72987: PPUSH
72988: CALL_OW 256
72992: PPUSH
72993: CALL_OW 2
72997: ST_TO_ADDR
72998: GO 72961
73000: POP
73001: POP
// if not tmp then
73002: LD_VAR 0 5
73006: NOT
73007: IFFALSE 73011
// exit ;
73009: GO 73059
// if asc then
73011: LD_VAR 0 2
73015: IFFALSE 73039
// result := SortListByListAsc ( units , tmp ) else
73017: LD_ADDR_VAR 0 3
73021: PUSH
73022: LD_VAR 0 1
73026: PPUSH
73027: LD_VAR 0 5
73031: PPUSH
73032: CALL_OW 76
73036: ST_TO_ADDR
73037: GO 73059
// result := SortListByListDesc ( units , tmp ) ;
73039: LD_ADDR_VAR 0 3
73043: PUSH
73044: LD_VAR 0 1
73048: PPUSH
73049: LD_VAR 0 5
73053: PPUSH
73054: CALL_OW 77
73058: ST_TO_ADDR
// end ;
73059: LD_VAR 0 3
73063: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
73064: LD_INT 0
73066: PPUSH
73067: PPUSH
// task := GetTaskList ( mech ) ;
73068: LD_ADDR_VAR 0 4
73072: PUSH
73073: LD_VAR 0 1
73077: PPUSH
73078: CALL_OW 437
73082: ST_TO_ADDR
// if not task then
73083: LD_VAR 0 4
73087: NOT
73088: IFFALSE 73092
// exit ;
73090: GO 73134
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
73092: LD_ADDR_VAR 0 3
73096: PUSH
73097: LD_VAR 0 4
73101: PUSH
73102: LD_INT 1
73104: ARRAY
73105: PUSH
73106: LD_INT 1
73108: ARRAY
73109: PUSH
73110: LD_STRING r
73112: EQUAL
73113: PUSH
73114: LD_VAR 0 4
73118: PUSH
73119: LD_INT 1
73121: ARRAY
73122: PUSH
73123: LD_INT 4
73125: ARRAY
73126: PUSH
73127: LD_VAR 0 2
73131: EQUAL
73132: AND
73133: ST_TO_ADDR
// end ;
73134: LD_VAR 0 3
73138: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
73139: LD_INT 0
73141: PPUSH
// SetDir ( unit , d ) ;
73142: LD_VAR 0 1
73146: PPUSH
73147: LD_VAR 0 4
73151: PPUSH
73152: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
73156: LD_VAR 0 1
73160: PPUSH
73161: LD_VAR 0 2
73165: PPUSH
73166: LD_VAR 0 3
73170: PPUSH
73171: LD_VAR 0 5
73175: PPUSH
73176: CALL_OW 48
// end ;
73180: LD_VAR 0 6
73184: RET
// export function ToNaturalNumber ( number ) ; begin
73185: LD_INT 0
73187: PPUSH
// result := number div 1 ;
73188: LD_ADDR_VAR 0 2
73192: PUSH
73193: LD_VAR 0 1
73197: PUSH
73198: LD_INT 1
73200: DIV
73201: ST_TO_ADDR
// if number < 0 then
73202: LD_VAR 0 1
73206: PUSH
73207: LD_INT 0
73209: LESS
73210: IFFALSE 73220
// result := 0 ;
73212: LD_ADDR_VAR 0 2
73216: PUSH
73217: LD_INT 0
73219: ST_TO_ADDR
// end ;
73220: LD_VAR 0 2
73224: RET
// export function SortByClass ( units , class ) ; var un ; begin
73225: LD_INT 0
73227: PPUSH
73228: PPUSH
// if not units or not class then
73229: LD_VAR 0 1
73233: NOT
73234: PUSH
73235: LD_VAR 0 2
73239: NOT
73240: OR
73241: IFFALSE 73245
// exit ;
73243: GO 73340
// result := [ ] ;
73245: LD_ADDR_VAR 0 3
73249: PUSH
73250: EMPTY
73251: ST_TO_ADDR
// for un in units do
73252: LD_ADDR_VAR 0 4
73256: PUSH
73257: LD_VAR 0 1
73261: PUSH
73262: FOR_IN
73263: IFFALSE 73338
// if GetClass ( un ) = class then
73265: LD_VAR 0 4
73269: PPUSH
73270: CALL_OW 257
73274: PUSH
73275: LD_VAR 0 2
73279: EQUAL
73280: IFFALSE 73307
// result := Insert ( result , 1 , un ) else
73282: LD_ADDR_VAR 0 3
73286: PUSH
73287: LD_VAR 0 3
73291: PPUSH
73292: LD_INT 1
73294: PPUSH
73295: LD_VAR 0 4
73299: PPUSH
73300: CALL_OW 2
73304: ST_TO_ADDR
73305: GO 73336
// result := Replace ( result , result + 1 , un ) ;
73307: LD_ADDR_VAR 0 3
73311: PUSH
73312: LD_VAR 0 3
73316: PPUSH
73317: LD_VAR 0 3
73321: PUSH
73322: LD_INT 1
73324: PLUS
73325: PPUSH
73326: LD_VAR 0 4
73330: PPUSH
73331: CALL_OW 1
73335: ST_TO_ADDR
73336: GO 73262
73338: POP
73339: POP
// end ;
73340: LD_VAR 0 3
73344: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
73345: LD_INT 0
73347: PPUSH
73348: PPUSH
73349: PPUSH
73350: PPUSH
73351: PPUSH
73352: PPUSH
73353: PPUSH
// result := [ ] ;
73354: LD_ADDR_VAR 0 4
73358: PUSH
73359: EMPTY
73360: ST_TO_ADDR
// if x - r < 0 then
73361: LD_VAR 0 1
73365: PUSH
73366: LD_VAR 0 3
73370: MINUS
73371: PUSH
73372: LD_INT 0
73374: LESS
73375: IFFALSE 73387
// min_x := 0 else
73377: LD_ADDR_VAR 0 8
73381: PUSH
73382: LD_INT 0
73384: ST_TO_ADDR
73385: GO 73403
// min_x := x - r ;
73387: LD_ADDR_VAR 0 8
73391: PUSH
73392: LD_VAR 0 1
73396: PUSH
73397: LD_VAR 0 3
73401: MINUS
73402: ST_TO_ADDR
// if y - r < 0 then
73403: LD_VAR 0 2
73407: PUSH
73408: LD_VAR 0 3
73412: MINUS
73413: PUSH
73414: LD_INT 0
73416: LESS
73417: IFFALSE 73429
// min_y := 0 else
73419: LD_ADDR_VAR 0 7
73423: PUSH
73424: LD_INT 0
73426: ST_TO_ADDR
73427: GO 73445
// min_y := y - r ;
73429: LD_ADDR_VAR 0 7
73433: PUSH
73434: LD_VAR 0 2
73438: PUSH
73439: LD_VAR 0 3
73443: MINUS
73444: ST_TO_ADDR
// max_x := x + r ;
73445: LD_ADDR_VAR 0 9
73449: PUSH
73450: LD_VAR 0 1
73454: PUSH
73455: LD_VAR 0 3
73459: PLUS
73460: ST_TO_ADDR
// max_y := y + r ;
73461: LD_ADDR_VAR 0 10
73465: PUSH
73466: LD_VAR 0 2
73470: PUSH
73471: LD_VAR 0 3
73475: PLUS
73476: ST_TO_ADDR
// for _x = min_x to max_x do
73477: LD_ADDR_VAR 0 5
73481: PUSH
73482: DOUBLE
73483: LD_VAR 0 8
73487: DEC
73488: ST_TO_ADDR
73489: LD_VAR 0 9
73493: PUSH
73494: FOR_TO
73495: IFFALSE 73596
// for _y = min_y to max_y do
73497: LD_ADDR_VAR 0 6
73501: PUSH
73502: DOUBLE
73503: LD_VAR 0 7
73507: DEC
73508: ST_TO_ADDR
73509: LD_VAR 0 10
73513: PUSH
73514: FOR_TO
73515: IFFALSE 73592
// begin if not ValidHex ( _x , _y ) then
73517: LD_VAR 0 5
73521: PPUSH
73522: LD_VAR 0 6
73526: PPUSH
73527: CALL_OW 488
73531: NOT
73532: IFFALSE 73536
// continue ;
73534: GO 73514
// if GetResourceTypeXY ( _x , _y ) then
73536: LD_VAR 0 5
73540: PPUSH
73541: LD_VAR 0 6
73545: PPUSH
73546: CALL_OW 283
73550: IFFALSE 73590
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
73552: LD_ADDR_VAR 0 4
73556: PUSH
73557: LD_VAR 0 4
73561: PPUSH
73562: LD_VAR 0 4
73566: PUSH
73567: LD_INT 1
73569: PLUS
73570: PPUSH
73571: LD_VAR 0 5
73575: PUSH
73576: LD_VAR 0 6
73580: PUSH
73581: EMPTY
73582: LIST
73583: LIST
73584: PPUSH
73585: CALL_OW 1
73589: ST_TO_ADDR
// end ;
73590: GO 73514
73592: POP
73593: POP
73594: GO 73494
73596: POP
73597: POP
// end ;
73598: LD_VAR 0 4
73602: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
73603: LD_INT 0
73605: PPUSH
73606: PPUSH
73607: PPUSH
73608: PPUSH
73609: PPUSH
73610: PPUSH
// if not units then
73611: LD_VAR 0 1
73615: NOT
73616: IFFALSE 73620
// exit ;
73618: GO 74021
// result := UnitFilter ( units , [ f_ok ] ) ;
73620: LD_ADDR_VAR 0 3
73624: PUSH
73625: LD_VAR 0 1
73629: PPUSH
73630: LD_INT 50
73632: PUSH
73633: EMPTY
73634: LIST
73635: PPUSH
73636: CALL_OW 72
73640: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
73641: LD_ADDR_VAR 0 7
73645: PUSH
73646: LD_VAR 0 1
73650: PUSH
73651: LD_INT 1
73653: ARRAY
73654: PPUSH
73655: CALL_OW 255
73659: ST_TO_ADDR
// if not result then
73660: LD_VAR 0 3
73664: NOT
73665: IFFALSE 73669
// exit ;
73667: GO 74021
// for i in result do
73669: LD_ADDR_VAR 0 4
73673: PUSH
73674: LD_VAR 0 3
73678: PUSH
73679: FOR_IN
73680: IFFALSE 74019
// begin tag := GetTag ( i ) + 1 ;
73682: LD_ADDR_VAR 0 8
73686: PUSH
73687: LD_VAR 0 4
73691: PPUSH
73692: CALL_OW 110
73696: PUSH
73697: LD_INT 1
73699: PLUS
73700: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
73701: LD_ADDR_VAR 0 6
73705: PUSH
73706: LD_VAR 0 4
73710: PPUSH
73711: CALL_OW 250
73715: PPUSH
73716: LD_VAR 0 4
73720: PPUSH
73721: CALL_OW 251
73725: PPUSH
73726: LD_INT 6
73728: PPUSH
73729: CALL 73345 0 3
73733: ST_TO_ADDR
// if cr then
73734: LD_VAR 0 6
73738: IFFALSE 73777
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
73740: LD_VAR 0 4
73744: PPUSH
73745: LD_VAR 0 6
73749: PUSH
73750: LD_INT 1
73752: ARRAY
73753: PUSH
73754: LD_INT 1
73756: ARRAY
73757: PPUSH
73758: LD_VAR 0 6
73762: PUSH
73763: LD_INT 1
73765: ARRAY
73766: PUSH
73767: LD_INT 2
73769: ARRAY
73770: PPUSH
73771: CALL_OW 116
73775: GO 74017
// if path > tag then
73777: LD_VAR 0 2
73781: PUSH
73782: LD_VAR 0 8
73786: GREATER
73787: IFFALSE 73965
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
73789: LD_ADDR_VAR 0 5
73793: PUSH
73794: LD_INT 81
73796: PUSH
73797: LD_VAR 0 7
73801: PUSH
73802: EMPTY
73803: LIST
73804: LIST
73805: PUSH
73806: LD_INT 91
73808: PUSH
73809: LD_VAR 0 4
73813: PUSH
73814: LD_INT 12
73816: PUSH
73817: EMPTY
73818: LIST
73819: LIST
73820: LIST
73821: PUSH
73822: EMPTY
73823: LIST
73824: LIST
73825: PPUSH
73826: CALL_OW 69
73830: ST_TO_ADDR
// if enemy then
73831: LD_VAR 0 5
73835: IFFALSE 73863
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
73837: LD_VAR 0 4
73841: PPUSH
73842: LD_VAR 0 5
73846: PPUSH
73847: LD_VAR 0 4
73851: PPUSH
73852: CALL_OW 74
73856: PPUSH
73857: CALL_OW 115
73861: GO 73963
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73863: LD_VAR 0 4
73867: PPUSH
73868: LD_VAR 0 2
73872: PUSH
73873: LD_VAR 0 8
73877: ARRAY
73878: PUSH
73879: LD_INT 1
73881: ARRAY
73882: PPUSH
73883: LD_VAR 0 2
73887: PUSH
73888: LD_VAR 0 8
73892: ARRAY
73893: PUSH
73894: LD_INT 2
73896: ARRAY
73897: PPUSH
73898: CALL_OW 297
73902: PUSH
73903: LD_INT 6
73905: GREATER
73906: IFFALSE 73949
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73908: LD_VAR 0 4
73912: PPUSH
73913: LD_VAR 0 2
73917: PUSH
73918: LD_VAR 0 8
73922: ARRAY
73923: PUSH
73924: LD_INT 1
73926: ARRAY
73927: PPUSH
73928: LD_VAR 0 2
73932: PUSH
73933: LD_VAR 0 8
73937: ARRAY
73938: PUSH
73939: LD_INT 2
73941: ARRAY
73942: PPUSH
73943: CALL_OW 114
73947: GO 73963
// SetTag ( i , tag ) ;
73949: LD_VAR 0 4
73953: PPUSH
73954: LD_VAR 0 8
73958: PPUSH
73959: CALL_OW 109
// end else
73963: GO 74017
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
73965: LD_ADDR_VAR 0 5
73969: PUSH
73970: LD_INT 81
73972: PUSH
73973: LD_VAR 0 7
73977: PUSH
73978: EMPTY
73979: LIST
73980: LIST
73981: PPUSH
73982: CALL_OW 69
73986: ST_TO_ADDR
// if enemy then
73987: LD_VAR 0 5
73991: IFFALSE 74017
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73993: LD_VAR 0 4
73997: PPUSH
73998: LD_VAR 0 5
74002: PPUSH
74003: LD_VAR 0 4
74007: PPUSH
74008: CALL_OW 74
74012: PPUSH
74013: CALL_OW 115
// end ; end ;
74017: GO 73679
74019: POP
74020: POP
// end ; end_of_file
74021: LD_VAR 0 3
74025: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74026: LD_VAR 0 1
74030: PPUSH
74031: LD_VAR 0 2
74035: PPUSH
74036: LD_VAR 0 3
74040: PPUSH
74041: LD_VAR 0 4
74045: PPUSH
74046: LD_VAR 0 5
74050: PPUSH
74051: LD_VAR 0 6
74055: PPUSH
74056: CALL 16953 0 6
// end ;
74060: PPOPN 6
74062: END
