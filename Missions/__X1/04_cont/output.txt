// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// CreateNature ;
   8: CALL 861 0 0
// PrepareArabian ;
  12: CALL 1237 0 0
// PrepareAmerican ;
  16: CALL 6832 0 0
// PrepareRussian ;
  20: CALL 2225 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 8402 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured , cargoRecycled ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 30 30$00 , 27 27$00 , 25 25$00 , 23 23$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 63000
 188: PUSH
 189: LD_INT 56700
 191: PUSH
 192: LD_INT 52500
 194: PUSH
 195: LD_INT 48300
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// escapeCounter := 0 ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// loseCounter := 0 ;
 218: LD_ADDR_EXP 14
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// labCaptured := false ;
 226: LD_ADDR_EXP 21
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// hillBase := false ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 242: LD_ADDR_EXP 8
 246: PUSH
 247: LD_INT 3
 249: PUSH
 250: LD_INT 4
 252: PUSH
 253: LD_INT 5
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 7
 261: PUSH
 262: LD_INT 8
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 273: LD_ADDR_EXP 23
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// kaganCaptured := false ;
 281: LD_ADDR_EXP 24
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// cargoRecycled := LoadVariable ( 03_CargoRecycled , false ) ;
 289: LD_ADDR_EXP 25
 293: PUSH
 294: LD_STRING 03_CargoRecycled
 296: PPUSH
 297: LD_INT 0
 299: PPUSH
 300: CALL_OW 30
 304: ST_TO_ADDR
// end ;
 305: LD_VAR 0 1
 309: RET
// every 0 0$1 trigger debug do var i ;
 310: LD_EXP 1
 314: IFFALSE 383
 316: GO 318
 318: DISABLE
 319: LD_INT 0
 321: PPUSH
// begin enable ;
 322: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 323: LD_ADDR_VAR 0 1
 327: PUSH
 328: LD_INT 22
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 3
 340: PUSH
 341: LD_INT 21
 343: PUSH
 344: LD_INT 3
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: PPUSH
 359: CALL_OW 69
 363: PUSH
 364: FOR_IN
 365: IFFALSE 381
// SetLives ( i , 1000 ) ;
 367: LD_VAR 0 1
 371: PPUSH
 372: LD_INT 1000
 374: PPUSH
 375: CALL_OW 234
 379: GO 364
 381: POP
 382: POP
// end ; end_of_file
 383: PPOPN 1
 385: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 386: LD_INT 0
 388: PPUSH
// uc_side := side ;
 389: LD_ADDR_OWVAR 20
 393: PUSH
 394: LD_VAR 0 1
 398: ST_TO_ADDR
// uc_nation := nation ;
 399: LD_ADDR_OWVAR 21
 403: PUSH
 404: LD_VAR 0 2
 408: ST_TO_ADDR
// vc_chassis := chassis ;
 409: LD_ADDR_OWVAR 37
 413: PUSH
 414: LD_VAR 0 3
 418: ST_TO_ADDR
// vc_engine := engine ;
 419: LD_ADDR_OWVAR 39
 423: PUSH
 424: LD_VAR 0 4
 428: ST_TO_ADDR
// vc_control := control ;
 429: LD_ADDR_OWVAR 38
 433: PUSH
 434: LD_VAR 0 5
 438: ST_TO_ADDR
// vc_weapon := weapon ;
 439: LD_ADDR_OWVAR 40
 443: PUSH
 444: LD_VAR 0 6
 448: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 449: LD_ADDR_OWVAR 41
 453: PUSH
 454: LD_VAR 0 7
 458: ST_TO_ADDR
// result := CreateVehicle ;
 459: LD_ADDR_VAR 0 8
 463: PUSH
 464: CALL_OW 45
 468: ST_TO_ADDR
// end ;
 469: LD_VAR 0 8
 473: RET
// export function SayX ( units , ident ) ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// result := false ;
 478: LD_ADDR_VAR 0 3
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// if not units then
 486: LD_VAR 0 1
 490: NOT
 491: IFFALSE 495
// exit ;
 493: GO 549
// for i in units do
 495: LD_ADDR_VAR 0 4
 499: PUSH
 500: LD_VAR 0 1
 504: PUSH
 505: FOR_IN
 506: IFFALSE 547
// if IsOk ( i ) then
 508: LD_VAR 0 4
 512: PPUSH
 513: CALL_OW 302
 517: IFFALSE 545
// begin Say ( i , ident ) ;
 519: LD_VAR 0 4
 523: PPUSH
 524: LD_VAR 0 2
 528: PPUSH
 529: CALL_OW 88
// result := i ;
 533: LD_ADDR_VAR 0 3
 537: PUSH
 538: LD_VAR 0 4
 542: ST_TO_ADDR
// break ;
 543: GO 547
// end ;
 545: GO 505
 547: POP
 548: POP
// end ;
 549: LD_VAR 0 3
 553: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 554: LD_INT 0
 556: PPUSH
 557: PPUSH
 558: PPUSH
// if not observer or not unit then
 559: LD_VAR 0 1
 563: NOT
 564: IFTRUE 573
 566: PUSH
 567: LD_VAR 0 2
 571: NOT
 572: OR
 573: IFFALSE 577
// exit ;
 575: GO 625
// if not See ( GetSide ( observer ) , unit ) then
 577: LD_VAR 0 1
 581: PPUSH
 582: CALL_OW 255
 586: PPUSH
 587: LD_VAR 0 2
 591: PPUSH
 592: CALL_OW 292
 596: NOT
 597: IFFALSE 601
// exit ;
 599: GO 625
// result := GetDistUnits ( observer , unit ) < 12 ;
 601: LD_ADDR_VAR 0 3
 605: PUSH
 606: LD_VAR 0 1
 610: PPUSH
 611: LD_VAR 0 2
 615: PPUSH
 616: CALL_OW 296
 620: PUSH
 621: LD_INT 12
 623: LESS
 624: ST_TO_ADDR
// end ;
 625: LD_VAR 0 3
 629: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 630: LD_INT 0
 632: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 633: LD_VAR 0 2
 637: PUSH
 638: LD_INT 1
 640: ARRAY
 641: PPUSH
 642: LD_VAR 0 2
 646: PUSH
 647: LD_INT 2
 649: ARRAY
 650: PPUSH
 651: CALL_OW 488
 655: IFFALSE 685
 657: PUSH
 658: LD_VAR 0 2
 662: PUSH
 663: LD_INT 1
 665: ARRAY
 666: PPUSH
 667: LD_VAR 0 2
 671: PUSH
 672: LD_INT 2
 674: ARRAY
 675: PPUSH
 676: CALL_OW 428
 680: PUSH
 681: LD_INT 0
 683: EQUAL
 684: AND
 685: IFFALSE 719
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 687: LD_VAR 0 1
 691: PPUSH
 692: LD_VAR 0 2
 696: PUSH
 697: LD_INT 1
 699: ARRAY
 700: PPUSH
 701: LD_VAR 0 2
 705: PUSH
 706: LD_INT 2
 708: ARRAY
 709: PPUSH
 710: LD_VAR 0 3
 714: PPUSH
 715: CALL_OW 48
// end ;
 719: LD_VAR 0 4
 723: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 724: LD_INT 0
 726: PPUSH
 727: PPUSH
// InitUc ;
 728: CALL_OW 18
// InitHc ;
 732: CALL_OW 19
// uc_side := 0 ;
 736: LD_ADDR_OWVAR 20
 740: PUSH
 741: LD_INT 0
 743: ST_TO_ADDR
// uc_nation := 0 ;
 744: LD_ADDR_OWVAR 21
 748: PUSH
 749: LD_INT 0
 751: ST_TO_ADDR
// for i = 1 to amount do
 752: LD_ADDR_VAR 0 4
 756: PUSH
 757: DOUBLE
 758: LD_INT 1
 760: DEC
 761: ST_TO_ADDR
 762: LD_VAR 0 2
 766: PUSH
 767: FOR_TO
 768: IFFALSE 850
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 770: LD_ADDR_OWVAR 29
 774: PUSH
 775: LD_INT 9
 777: PPUSH
 778: LD_INT 12
 780: PPUSH
 781: CALL_OW 12
 785: PUSH
 786: LD_INT 9
 788: PPUSH
 789: LD_INT 12
 791: PPUSH
 792: CALL_OW 12
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 801: LD_ADDR_OWVAR 35
 805: PUSH
 806: LD_INT 1
 808: NEG
 809: PPUSH
 810: LD_INT 1
 812: PPUSH
 813: CALL_OW 12
 817: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 818: LD_INT 0
 820: PPUSH
 821: LD_INT 12
 823: PPUSH
 824: LD_INT 1
 826: PPUSH
 827: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 831: CALL_OW 44
 835: PPUSH
 836: LD_VAR 0 1
 840: PPUSH
 841: LD_INT 0
 843: PPUSH
 844: CALL_OW 49
// end ;
 848: GO 767
 850: POP
 851: POP
// InitHc ;
 852: CALL_OW 19
// end ;
 856: LD_VAR 0 3
 860: RET
// export function CreateNature ; var i ; begin
 861: LD_INT 0
 863: PPUSH
 864: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 , 2 ] [ Difficulty ] ) ;
 865: LD_INT 18
 867: PPUSH
 868: LD_INT 5
 870: PUSH
 871: LD_INT 4
 873: PUSH
 874: LD_INT 3
 876: PUSH
 877: LD_INT 2
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: PUSH
 886: LD_OWVAR 67
 890: ARRAY
 891: PPUSH
 892: CALL 724 0 2
// for i := 1 to 3 do
 896: LD_ADDR_VAR 0 2
 900: PUSH
 901: DOUBLE
 902: LD_INT 1
 904: DEC
 905: ST_TO_ADDR
 906: LD_INT 3
 908: PUSH
 909: FOR_TO
 910: IFFALSE 945
// begin hc_class := 21 ;
 912: LD_ADDR_OWVAR 28
 916: PUSH
 917: LD_INT 21
 919: ST_TO_ADDR
// hc_gallery :=  ;
 920: LD_ADDR_OWVAR 33
 924: PUSH
 925: LD_STRING 
 927: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 928: CALL_OW 44
 932: PPUSH
 933: LD_INT 18
 935: PPUSH
 936: LD_INT 0
 938: PPUSH
 939: CALL_OW 49
// end ;
 943: GO 909
 945: POP
 946: POP
// for i := 1 to 2 do
 947: LD_ADDR_VAR 0 2
 951: PUSH
 952: DOUBLE
 953: LD_INT 1
 955: DEC
 956: ST_TO_ADDR
 957: LD_INT 2
 959: PUSH
 960: FOR_TO
 961: IFFALSE 996
// begin hc_class := 18 ;
 963: LD_ADDR_OWVAR 28
 967: PUSH
 968: LD_INT 18
 970: ST_TO_ADDR
// hc_gallery :=  ;
 971: LD_ADDR_OWVAR 33
 975: PUSH
 976: LD_STRING 
 978: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 979: CALL_OW 44
 983: PPUSH
 984: LD_INT 18
 986: PPUSH
 987: LD_INT 0
 989: PPUSH
 990: CALL_OW 49
// end ;
 994: GO 960
 996: POP
 997: POP
// for i := 1 to 2 do
 998: LD_ADDR_VAR 0 2
1002: PUSH
1003: DOUBLE
1004: LD_INT 1
1006: DEC
1007: ST_TO_ADDR
1008: LD_INT 2
1010: PUSH
1011: FOR_TO
1012: IFFALSE 1047
// begin hc_class := 13 ;
1014: LD_ADDR_OWVAR 28
1018: PUSH
1019: LD_INT 13
1021: ST_TO_ADDR
// hc_gallery :=  ;
1022: LD_ADDR_OWVAR 33
1026: PUSH
1027: LD_STRING 
1029: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1030: CALL_OW 44
1034: PPUSH
1035: LD_INT 18
1037: PPUSH
1038: LD_INT 0
1040: PPUSH
1041: CALL_OW 49
// end ;
1045: GO 1011
1047: POP
1048: POP
// end ;
1049: LD_VAR 0 1
1053: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1054: LD_INT 0
1056: PPUSH
1057: PPUSH
1058: PPUSH
1059: PPUSH
1060: PPUSH
// result := false ;
1061: LD_ADDR_VAR 0 4
1065: PUSH
1066: LD_INT 0
1068: ST_TO_ADDR
// if not sideList or not enemySide then
1069: LD_VAR 0 1
1073: NOT
1074: IFTRUE 1083
1076: PUSH
1077: LD_VAR 0 2
1081: NOT
1082: OR
1083: IFFALSE 1087
// exit ;
1085: GO 1232
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1087: LD_ADDR_VAR 0 7
1091: PUSH
1092: LD_INT 22
1094: PUSH
1095: LD_VAR 0 2
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: PPUSH
1104: CALL_OW 69
1108: ST_TO_ADDR
// if not tmp then
1109: LD_VAR 0 7
1113: NOT
1114: IFFALSE 1118
// exit ;
1116: GO 1232
// for s in sideList do
1118: LD_ADDR_VAR 0 6
1122: PUSH
1123: LD_VAR 0 1
1127: PUSH
1128: FOR_IN
1129: IFFALSE 1230
// for i in tmp do
1131: LD_ADDR_VAR 0 5
1135: PUSH
1136: LD_VAR 0 7
1140: PUSH
1141: FOR_IN
1142: IFFALSE 1226
// if See ( s , i ) then
1144: LD_VAR 0 6
1148: PPUSH
1149: LD_VAR 0 5
1153: PPUSH
1154: CALL_OW 292
1158: IFFALSE 1224
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
1160: LD_ADDR_VAR 0 8
1164: PUSH
1165: LD_INT 22
1167: PUSH
1168: LD_VAR 0 6
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PPUSH
1177: CALL_OW 69
1181: PPUSH
1182: LD_VAR 0 5
1186: PPUSH
1187: CALL_OW 74
1191: ST_TO_ADDR
// if tmp2 in exceptUnits then
1192: LD_VAR 0 8
1196: PUSH
1197: LD_VAR 0 3
1201: IN
1202: IFFALSE 1208
// continue else
1204: GO 1141
1206: GO 1224
// begin result := tmp2 ;
1208: LD_ADDR_VAR 0 4
1212: PUSH
1213: LD_VAR 0 8
1217: ST_TO_ADDR
// exit ;
1218: POP
1219: POP
1220: POP
1221: POP
1222: GO 1232
// end ; end ;
1224: GO 1141
1226: POP
1227: POP
1228: GO 1128
1230: POP
1231: POP
// end ; end_of_file
1232: LD_VAR 0 4
1236: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1237: LD_INT 0
1239: PPUSH
1240: PPUSH
// if cargoRecycled then
1241: LD_EXP 25
1245: IFFALSE 1273
// begin SetTech ( tech_BasicTools , 2 , state_researched ) ;
1247: LD_INT 82
1249: PPUSH
1250: LD_INT 2
1252: PPUSH
1253: LD_INT 2
1255: PPUSH
1256: CALL_OW 322
// SetTech ( tech_Cargo , 2 , state_researched ) ;
1260: LD_INT 83
1262: PPUSH
1263: LD_INT 2
1265: PPUSH
1266: LD_INT 2
1268: PPUSH
1269: CALL_OW 322
// end ; uc_side := 5 ;
1273: LD_ADDR_OWVAR 20
1277: PUSH
1278: LD_INT 5
1280: ST_TO_ADDR
// uc_nation := 2 ;
1281: LD_ADDR_OWVAR 21
1285: PUSH
1286: LD_INT 2
1288: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1289: LD_ADDR_EXP 37
1293: PUSH
1294: LD_STRING Abdul
1296: PPUSH
1297: LD_INT 0
1299: PPUSH
1300: LD_STRING 
1302: PPUSH
1303: CALL 40789 0 3
1307: ST_TO_ADDR
// uc_side := 2 ;
1308: LD_ADDR_OWVAR 20
1312: PUSH
1313: LD_INT 2
1315: ST_TO_ADDR
// uc_nation := 2 ;
1316: LD_ADDR_OWVAR 21
1320: PUSH
1321: LD_INT 2
1323: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1324: LD_ADDR_EXP 26
1328: PUSH
1329: LD_STRING Heike
1331: PPUSH
1332: LD_EXP 1
1336: NOT
1337: PPUSH
1338: LD_EXP 2
1342: PPUSH
1343: CALL 40789 0 3
1347: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1348: LD_ADDR_EXP 29
1352: PUSH
1353: LD_STRING Ibrahim
1355: PPUSH
1356: LD_EXP 1
1360: NOT
1361: PPUSH
1362: LD_EXP 2
1366: PPUSH
1367: CALL 40789 0 3
1371: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1372: LD_ADDR_EXP 27
1376: PUSH
1377: LD_STRING Givi
1379: PPUSH
1380: LD_EXP 1
1384: NOT
1385: PPUSH
1386: LD_EXP 2
1390: PPUSH
1391: CALL 40789 0 3
1395: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1396: LD_ADDR_EXP 30
1400: PUSH
1401: LD_STRING Kamil
1403: PPUSH
1404: LD_EXP 1
1408: NOT
1409: PPUSH
1410: LD_EXP 2
1414: PPUSH
1415: CALL 40789 0 3
1419: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1420: LD_ADDR_EXP 31
1424: PUSH
1425: LD_STRING Kaia
1427: PPUSH
1428: LD_EXP 1
1432: NOT
1433: PPUSH
1434: LD_EXP 2
1438: PPUSH
1439: CALL 40789 0 3
1443: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1444: LD_ADDR_EXP 32
1448: PUSH
1449: LD_STRING Sophia
1451: PPUSH
1452: LD_EXP 1
1456: NOT
1457: PPUSH
1458: LD_EXP 2
1462: PPUSH
1463: CALL 40789 0 3
1467: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1468: LD_ADDR_EXP 33
1472: PUSH
1473: LD_STRING Markov
1475: PPUSH
1476: LD_EXP 1
1480: NOT
1481: PPUSH
1482: LD_EXP 2
1486: PPUSH
1487: CALL 40789 0 3
1491: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1492: LD_ADDR_EXP 36
1496: PUSH
1497: LD_STRING Aviradze
1499: PPUSH
1500: LD_EXP 1
1504: NOT
1505: PPUSH
1506: LD_EXP 2
1510: PPUSH
1511: CALL 40789 0 3
1515: ST_TO_ADDR
// aviradzeSquad := [ ] ;
1516: LD_ADDR_EXP 40
1520: PUSH
1521: EMPTY
1522: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
1523: LD_ADDR_EXP 38
1527: PUSH
1528: LD_STRING 03_others
1530: PPUSH
1531: CALL_OW 31
1535: ST_TO_ADDR
// uc_side := 5 ;
1536: LD_ADDR_OWVAR 20
1540: PUSH
1541: LD_INT 5
1543: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
1544: LD_ADDR_EXP 35
1548: PUSH
1549: LD_STRING Kurt
1551: PPUSH
1552: LD_INT 0
1554: PPUSH
1555: LD_STRING 
1557: PPUSH
1558: CALL 40789 0 3
1562: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1563: LD_ADDR_EXP 28
1567: PUSH
1568: LD_STRING Mike
1570: PPUSH
1571: LD_EXP 1
1575: NOT
1576: PPUSH
1577: LD_EXP 2
1581: PPUSH
1582: CALL 40789 0 3
1586: ST_TO_ADDR
// if Mike then
1587: LD_EXP 28
1591: IFFALSE 1614
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
1593: LD_EXP 28
1597: PPUSH
1598: LD_INT 142
1600: PPUSH
1601: LD_INT 63
1603: PPUSH
1604: LD_INT 2
1606: PPUSH
1607: LD_INT 0
1609: PPUSH
1610: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
1614: LD_EXP 35
1618: PPUSH
1619: LD_INT 142
1621: PPUSH
1622: LD_INT 63
1624: PPUSH
1625: LD_INT 3
1627: PPUSH
1628: LD_INT 0
1630: PPUSH
1631: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
1635: LD_EXP 35
1639: PUSH
1640: LD_EXP 28
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: PPUSH
1649: CALL_OW 140
// end ;
1653: LD_VAR 0 1
1657: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
1658: LD_INT 0
1660: PPUSH
1661: PPUSH
1662: PPUSH
1663: PPUSH
// uc_side := 5 ;
1664: LD_ADDR_OWVAR 20
1668: PUSH
1669: LD_INT 5
1671: ST_TO_ADDR
// uc_nation := 2 ;
1672: LD_ADDR_OWVAR 21
1676: PUSH
1677: LD_INT 2
1679: ST_TO_ADDR
// InitHc ;
1680: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
1684: LD_ADDR_EXP 34
1688: PUSH
1689: LD_STRING Omar
1691: PPUSH
1692: LD_INT 0
1694: PPUSH
1695: LD_STRING 
1697: PPUSH
1698: CALL 40789 0 3
1702: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
1703: LD_EXP 34
1707: PPUSH
1708: LD_INT 284
1710: PPUSH
1711: LD_INT 163
1713: PPUSH
1714: LD_INT 0
1716: PPUSH
1717: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
1721: LD_EXP 34
1725: PPUSH
1726: LD_INT 256
1728: PPUSH
1729: LD_INT 129
1731: PPUSH
1732: CALL_OW 111
// wait ( 0 0$2 ) ;
1736: LD_INT 70
1738: PPUSH
1739: CALL_OW 67
// omarSquad := [ ] ;
1743: LD_ADDR_EXP 39
1747: PUSH
1748: EMPTY
1749: ST_TO_ADDR
// for i := 1 to 5 do
1750: LD_ADDR_VAR 0 2
1754: PUSH
1755: DOUBLE
1756: LD_INT 1
1758: DEC
1759: ST_TO_ADDR
1760: LD_INT 5
1762: PUSH
1763: FOR_TO
1764: IFFALSE 1970
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1766: LD_INT 5
1768: PPUSH
1769: LD_INT 2
1771: PPUSH
1772: LD_INT 13
1774: PUSH
1775: LD_INT 14
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PUSH
1782: LD_VAR 0 2
1786: PUSH
1787: LD_INT 2
1789: MOD
1790: PUSH
1791: LD_INT 1
1793: PLUS
1794: ARRAY
1795: PPUSH
1796: LD_INT 1
1798: PPUSH
1799: LD_INT 1
1801: PPUSH
1802: LD_INT 25
1804: PUSH
1805: LD_INT 27
1807: PUSH
1808: LD_INT 26
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: LIST
1815: PUSH
1816: LD_VAR 0 2
1820: PUSH
1821: LD_INT 3
1823: MOD
1824: PUSH
1825: LD_INT 1
1827: PLUS
1828: ARRAY
1829: PPUSH
1830: LD_INT 100
1832: PPUSH
1833: CALL 386 0 7
// veh := CreateVehicle ;
1837: LD_ADDR_VAR 0 4
1841: PUSH
1842: CALL_OW 45
1846: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1847: LD_VAR 0 4
1851: PPUSH
1852: LD_INT 5
1854: PPUSH
1855: CALL_OW 233
// omarSquad := omarSquad union veh ;
1859: LD_ADDR_EXP 39
1863: PUSH
1864: LD_EXP 39
1868: PUSH
1869: LD_VAR 0 4
1873: UNION
1874: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
1875: LD_VAR 0 4
1879: PPUSH
1880: LD_INT 284
1882: PPUSH
1883: LD_INT 163
1885: PPUSH
1886: LD_INT 0
1888: PPUSH
1889: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
1893: LD_INT 0
1895: PPUSH
1896: LD_INT 3
1898: PPUSH
1899: LD_INT 2
1901: PPUSH
1902: CALL_OW 380
// un := CreateHuman ;
1906: LD_ADDR_VAR 0 3
1910: PUSH
1911: CALL_OW 44
1915: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1916: LD_ADDR_EXP 39
1920: PUSH
1921: LD_EXP 39
1925: PUSH
1926: LD_VAR 0 3
1930: UNION
1931: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1932: LD_VAR 0 3
1936: PPUSH
1937: LD_VAR 0 4
1941: PPUSH
1942: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
1946: LD_VAR 0 3
1950: PPUSH
1951: LD_INT 271
1953: PPUSH
1954: LD_INT 144
1956: PPUSH
1957: CALL_OW 111
// wait ( 0 0$2 ) ;
1961: LD_INT 70
1963: PPUSH
1964: CALL_OW 67
// end ;
1968: GO 1763
1970: POP
1971: POP
// for i := 1 to 3 do
1972: LD_ADDR_VAR 0 2
1976: PUSH
1977: DOUBLE
1978: LD_INT 1
1980: DEC
1981: ST_TO_ADDR
1982: LD_INT 3
1984: PUSH
1985: FOR_TO
1986: IFFALSE 2069
// begin PrepareHuman ( false , 1 , 2 ) ;
1988: LD_INT 0
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: LD_INT 2
1996: PPUSH
1997: CALL_OW 380
// un := CreateHuman ;
2001: LD_ADDR_VAR 0 3
2005: PUSH
2006: CALL_OW 44
2010: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2011: LD_ADDR_EXP 39
2015: PUSH
2016: LD_EXP 39
2020: PUSH
2021: LD_VAR 0 3
2025: UNION
2026: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
2027: LD_VAR 0 3
2031: PPUSH
2032: LD_INT 284
2034: PPUSH
2035: LD_INT 163
2037: PPUSH
2038: LD_INT 0
2040: PPUSH
2041: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
2045: LD_VAR 0 3
2049: PPUSH
2050: LD_INT 257
2052: PPUSH
2053: LD_INT 138
2055: PPUSH
2056: CALL_OW 111
// wait ( 0 0$1 ) ;
2060: LD_INT 35
2062: PPUSH
2063: CALL_OW 67
// end ;
2067: GO 1985
2069: POP
2070: POP
// for i := 1 to 6 do
2071: LD_ADDR_VAR 0 2
2075: PUSH
2076: DOUBLE
2077: LD_INT 1
2079: DEC
2080: ST_TO_ADDR
2081: LD_INT 6
2083: PUSH
2084: FOR_TO
2085: IFFALSE 2218
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2087: LD_INT 0
2089: PPUSH
2090: LD_INT 1
2092: PUSH
2093: LD_INT 1
2095: PUSH
2096: LD_INT 4
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: PUSH
2104: LD_VAR 0 2
2108: PUSH
2109: LD_INT 3
2111: MOD
2112: PUSH
2113: LD_INT 1
2115: PLUS
2116: ARRAY
2117: PPUSH
2118: LD_INT 3
2120: PPUSH
2121: CALL_OW 380
// un := CreateHuman ;
2125: LD_ADDR_VAR 0 3
2129: PUSH
2130: CALL_OW 44
2134: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2135: LD_ADDR_EXP 39
2139: PUSH
2140: LD_EXP 39
2144: PUSH
2145: LD_VAR 0 3
2149: UNION
2150: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2151: LD_VAR 0 3
2155: PPUSH
2156: LD_INT 225
2158: PPUSH
2159: LD_INT 163
2161: PPUSH
2162: LD_INT 0
2164: PPUSH
2165: CALL_OW 48
// if i = 1 then
2169: LD_VAR 0 2
2173: PUSH
2174: LD_INT 1
2176: EQUAL
2177: IFFALSE 2194
// SetAttr ( un , attr_speed , 12 ) ;
2179: LD_VAR 0 3
2183: PPUSH
2184: LD_INT 2
2186: PPUSH
2187: LD_INT 12
2189: PPUSH
2190: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2194: LD_VAR 0 3
2198: PPUSH
2199: LD_INT 222
2201: PPUSH
2202: LD_INT 157
2204: PPUSH
2205: CALL_OW 111
// wait ( 0 0$1 ) ;
2209: LD_INT 35
2211: PPUSH
2212: CALL_OW 67
// end ;
2216: GO 2084
2218: POP
2219: POP
// end ; end_of_file
2220: LD_VAR 0 1
2224: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2225: LD_INT 0
2227: PPUSH
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
2232: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
2233: LD_INT 3
2235: PPUSH
2236: LD_INT 149
2238: PPUSH
2239: LD_INT 67
2241: PPUSH
2242: CALL_OW 428
2246: PPUSH
2247: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
2251: LD_ADDR_EXP 51
2255: PUSH
2256: LD_INT 111
2258: PPUSH
2259: LD_INT 89
2261: PPUSH
2262: CALL_OW 428
2266: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2267: LD_ADDR_VAR 0 2
2271: PUSH
2272: LD_INT 21
2274: PUSH
2275: LD_INT 3
2277: PUSH
2278: EMPTY
2279: LIST
2280: LIST
2281: PUSH
2282: LD_INT 23
2284: PUSH
2285: LD_INT 3
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: PPUSH
2296: CALL_OW 69
2300: PUSH
2301: FOR_IN
2302: IFFALSE 2318
// SetBLevel ( i , 5 ) ;
2304: LD_VAR 0 2
2308: PPUSH
2309: LD_INT 5
2311: PPUSH
2312: CALL_OW 241
2316: GO 2301
2318: POP
2319: POP
// SetBName ( kirov , kirov ) ;
2320: LD_INT 71
2322: PPUSH
2323: LD_STRING kirov
2325: PPUSH
2326: CALL_OW 500
// SetBName ( beria , beria ) ;
2330: LD_INT 106
2332: PPUSH
2333: LD_STRING beria
2335: PPUSH
2336: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2340: LD_INT 112
2342: PPUSH
2343: LD_STRING kagan
2345: PPUSH
2346: CALL_OW 500
// uc_side := 6 ;
2350: LD_ADDR_OWVAR 20
2354: PUSH
2355: LD_INT 6
2357: ST_TO_ADDR
// uc_nation := 3 ;
2358: LD_ADDR_OWVAR 21
2362: PUSH
2363: LD_INT 3
2365: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2366: LD_ADDR_VAR 0 5
2370: PUSH
2371: LD_INT 22
2373: PUSH
2374: LD_INT 6
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: PUSH
2381: LD_INT 30
2383: PUSH
2384: LD_INT 5
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: PPUSH
2395: CALL_OW 69
2399: PUSH
2400: LD_INT 1
2402: ARRAY
2403: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
2404: LD_ADDR_VAR 0 4
2408: PUSH
2409: LD_INT 22
2411: PUSH
2412: LD_INT 6
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: PUSH
2419: LD_INT 30
2421: PUSH
2422: LD_INT 4
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PPUSH
2433: CALL_OW 69
2437: PUSH
2438: LD_INT 1
2440: ARRAY
2441: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
2442: LD_ADDR_EXP 45
2446: PUSH
2447: EMPTY
2448: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
2449: LD_ADDR_EXP 46
2453: PUSH
2454: EMPTY
2455: ST_TO_ADDR
// russianPatrol := [ ] ;
2456: LD_ADDR_EXP 48
2460: PUSH
2461: EMPTY
2462: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
2463: LD_ADDR_EXP 41
2467: PUSH
2468: LD_STRING Kurin
2470: PPUSH
2471: LD_INT 0
2473: PPUSH
2474: LD_STRING 
2476: PPUSH
2477: CALL 40789 0 3
2481: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
2482: LD_EXP 41
2486: PPUSH
2487: LD_INT 71
2489: PPUSH
2490: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
2494: LD_ADDR_EXP 43
2498: PUSH
2499: LD_STRING Popov
2501: PPUSH
2502: LD_INT 0
2504: PPUSH
2505: LD_STRING 
2507: PPUSH
2508: CALL 40789 0 3
2512: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
2513: LD_EXP 43
2517: PPUSH
2518: LD_INT 71
2520: PPUSH
2521: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
2525: LD_ADDR_EXP 42
2529: PUSH
2530: LD_STRING Grishko
2532: PPUSH
2533: LD_INT 0
2535: PPUSH
2536: LD_STRING 
2538: PPUSH
2539: CALL 40789 0 3
2543: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
2544: LD_EXP 42
2548: PPUSH
2549: LD_INT 207
2551: PPUSH
2552: LD_INT 106
2554: PPUSH
2555: LD_INT 0
2557: PPUSH
2558: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
2562: LD_EXP 42
2566: PPUSH
2567: LD_INT 209
2569: PPUSH
2570: LD_INT 106
2572: PPUSH
2573: CALL_OW 118
// for i := 1 to 2 do
2577: LD_ADDR_VAR 0 2
2581: PUSH
2582: DOUBLE
2583: LD_INT 1
2585: DEC
2586: ST_TO_ADDR
2587: LD_INT 2
2589: PUSH
2590: FOR_TO
2591: IFFALSE 2646
// begin PrepareHuman ( false , 2 , 2 ) ;
2593: LD_INT 0
2595: PPUSH
2596: LD_INT 2
2598: PPUSH
2599: LD_INT 2
2601: PPUSH
2602: CALL_OW 380
// un := CreateHuman ;
2606: LD_ADDR_VAR 0 3
2610: PUSH
2611: CALL_OW 44
2615: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2616: LD_VAR 0 3
2620: PPUSH
2621: LD_INT 71
2623: PPUSH
2624: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2628: LD_ADDR_EXP 45
2632: PUSH
2633: LD_EXP 45
2637: PUSH
2638: LD_VAR 0 3
2642: UNION
2643: ST_TO_ADDR
// end ;
2644: GO 2590
2646: POP
2647: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2648: LD_ADDR_VAR 0 2
2652: PUSH
2653: DOUBLE
2654: LD_INT 1
2656: DEC
2657: ST_TO_ADDR
2658: LD_INT 5
2660: PUSH
2661: LD_INT 6
2663: PUSH
2664: LD_INT 6
2666: PUSH
2667: LD_INT 6
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: LIST
2674: LIST
2675: PUSH
2676: LD_OWVAR 67
2680: ARRAY
2681: PUSH
2682: FOR_TO
2683: IFFALSE 2761
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
2685: LD_INT 0
2687: PPUSH
2688: LD_INT 1
2690: PPUSH
2691: LD_INT 2
2693: PUSH
2694: LD_INT 3
2696: PUSH
2697: LD_INT 4
2699: PUSH
2700: LD_INT 4
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: PUSH
2709: LD_OWVAR 67
2713: ARRAY
2714: PPUSH
2715: CALL_OW 380
// un := CreateHuman ;
2719: LD_ADDR_VAR 0 3
2723: PUSH
2724: CALL_OW 44
2728: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
2729: LD_VAR 0 3
2733: PPUSH
2734: LD_VAR 0 5
2738: PPUSH
2739: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2743: LD_ADDR_EXP 45
2747: PUSH
2748: LD_EXP 45
2752: PUSH
2753: LD_VAR 0 3
2757: UNION
2758: ST_TO_ADDR
// end ;
2759: GO 2682
2761: POP
2762: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
2763: LD_ADDR_VAR 0 2
2767: PUSH
2768: LD_INT 22
2770: PUSH
2771: LD_INT 6
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: LD_INT 30
2780: PUSH
2781: LD_INT 32
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PPUSH
2792: CALL_OW 69
2796: PUSH
2797: FOR_IN
2798: IFFALSE 2876
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
2800: LD_INT 0
2802: PPUSH
2803: LD_INT 1
2805: PPUSH
2806: LD_INT 3
2808: PUSH
2809: LD_INT 4
2811: PUSH
2812: LD_INT 4
2814: PUSH
2815: LD_INT 5
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: LIST
2822: LIST
2823: PUSH
2824: LD_OWVAR 67
2828: ARRAY
2829: PPUSH
2830: CALL_OW 380
// un := CreateHuman ;
2834: LD_ADDR_VAR 0 3
2838: PUSH
2839: CALL_OW 44
2843: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2844: LD_VAR 0 3
2848: PPUSH
2849: LD_VAR 0 2
2853: PPUSH
2854: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2858: LD_ADDR_EXP 45
2862: PUSH
2863: LD_EXP 45
2867: PUSH
2868: LD_VAR 0 3
2872: UNION
2873: ST_TO_ADDR
// end ;
2874: GO 2797
2876: POP
2877: POP
// for i := 1 to 3 do
2878: LD_ADDR_VAR 0 2
2882: PUSH
2883: DOUBLE
2884: LD_INT 1
2886: DEC
2887: ST_TO_ADDR
2888: LD_INT 3
2890: PUSH
2891: FOR_TO
2892: IFFALSE 2947
// begin PrepareHuman ( false , 3 , 3 ) ;
2894: LD_INT 0
2896: PPUSH
2897: LD_INT 3
2899: PPUSH
2900: LD_INT 3
2902: PPUSH
2903: CALL_OW 380
// un := CreateHuman ;
2907: LD_ADDR_VAR 0 3
2911: PUSH
2912: CALL_OW 44
2916: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
2917: LD_VAR 0 3
2921: PPUSH
2922: LD_INT 92
2924: PPUSH
2925: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2929: LD_ADDR_EXP 45
2933: PUSH
2934: LD_EXP 45
2938: PUSH
2939: LD_VAR 0 3
2943: UNION
2944: ST_TO_ADDR
// end ;
2945: GO 2891
2947: POP
2948: POP
// for i := 1 to 2 do
2949: LD_ADDR_VAR 0 2
2953: PUSH
2954: DOUBLE
2955: LD_INT 1
2957: DEC
2958: ST_TO_ADDR
2959: LD_INT 2
2961: PUSH
2962: FOR_TO
2963: IFFALSE 3018
// begin PrepareHuman ( false , 4 , 3 ) ;
2965: LD_INT 0
2967: PPUSH
2968: LD_INT 4
2970: PPUSH
2971: LD_INT 3
2973: PPUSH
2974: CALL_OW 380
// un := CreateHuman ;
2978: LD_ADDR_VAR 0 3
2982: PUSH
2983: CALL_OW 44
2987: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2988: LD_VAR 0 3
2992: PPUSH
2993: LD_INT 83
2995: PPUSH
2996: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3000: LD_ADDR_EXP 45
3004: PUSH
3005: LD_EXP 45
3009: PUSH
3010: LD_VAR 0 3
3014: UNION
3015: ST_TO_ADDR
// end ;
3016: GO 2962
3018: POP
3019: POP
// for i := 1 to 5 do
3020: LD_ADDR_VAR 0 2
3024: PUSH
3025: DOUBLE
3026: LD_INT 1
3028: DEC
3029: ST_TO_ADDR
3030: LD_INT 5
3032: PUSH
3033: FOR_TO
3034: IFFALSE 3091
// begin PrepareHuman ( false , 1 , 3 ) ;
3036: LD_INT 0
3038: PPUSH
3039: LD_INT 1
3041: PPUSH
3042: LD_INT 3
3044: PPUSH
3045: CALL_OW 380
// un := CreateHuman ;
3049: LD_ADDR_VAR 0 3
3053: PUSH
3054: CALL_OW 44
3058: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3059: LD_VAR 0 3
3063: PPUSH
3064: LD_VAR 0 4
3068: PPUSH
3069: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3073: LD_ADDR_EXP 47
3077: PUSH
3078: LD_EXP 47
3082: PUSH
3083: LD_VAR 0 3
3087: UNION
3088: ST_TO_ADDR
// end ;
3089: GO 3033
3091: POP
3092: POP
// russianCargo := [ ] ;
3093: LD_ADDR_EXP 50
3097: PUSH
3098: EMPTY
3099: ST_TO_ADDR
// for i := 1 to 2 do
3100: LD_ADDR_VAR 0 2
3104: PUSH
3105: DOUBLE
3106: LD_INT 1
3108: DEC
3109: ST_TO_ADDR
3110: LD_INT 2
3112: PUSH
3113: FOR_TO
3114: IFFALSE 3246
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3116: LD_INT 6
3118: PPUSH
3119: LD_INT 3
3121: PPUSH
3122: LD_INT 21
3124: PPUSH
3125: LD_INT 1
3127: PPUSH
3128: LD_INT 1
3130: PPUSH
3131: LD_INT 51
3133: PPUSH
3134: LD_INT 100
3136: PPUSH
3137: CALL 386 0 7
// un := CreateVehicle ;
3141: LD_ADDR_VAR 0 3
3145: PUSH
3146: CALL_OW 45
3150: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3151: LD_ADDR_EXP 50
3155: PUSH
3156: LD_EXP 50
3160: PUSH
3161: LD_VAR 0 3
3165: UNION
3166: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3167: LD_VAR 0 3
3171: PPUSH
3172: LD_INT 2
3174: PPUSH
3175: LD_INT 100
3177: PPUSH
3178: CALL_OW 290
// SetDir ( un , 4 ) ;
3182: LD_VAR 0 3
3186: PPUSH
3187: LD_INT 4
3189: PPUSH
3190: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3194: LD_VAR 0 3
3198: PPUSH
3199: LD_INT 147
3201: PPUSH
3202: LD_INT 103
3204: PPUSH
3205: LD_INT 4
3207: PPUSH
3208: LD_INT 0
3210: PPUSH
3211: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3215: LD_INT 0
3217: PPUSH
3218: LD_INT 1
3220: PPUSH
3221: LD_OWVAR 67
3225: PPUSH
3226: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3230: CALL_OW 44
3234: PPUSH
3235: LD_VAR 0 3
3239: PPUSH
3240: CALL_OW 52
// end ;
3244: GO 3113
3246: POP
3247: POP
// uc_side := 3 ;
3248: LD_ADDR_OWVAR 20
3252: PUSH
3253: LD_INT 3
3255: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3256: LD_ADDR_EXP 44
3260: PUSH
3261: LD_STRING Burlak
3263: PPUSH
3264: LD_INT 0
3266: PPUSH
3267: LD_STRING 
3269: PPUSH
3270: CALL 40789 0 3
3274: ST_TO_ADDR
// for i := 1 to 5 do
3275: LD_ADDR_VAR 0 2
3279: PUSH
3280: DOUBLE
3281: LD_INT 1
3283: DEC
3284: ST_TO_ADDR
3285: LD_INT 5
3287: PUSH
3288: FOR_TO
3289: IFFALSE 3382
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3291: LD_INT 0
3293: PPUSH
3294: LD_INT 1
3296: PPUSH
3297: LD_OWVAR 67
3301: PUSH
3302: LD_INT 1
3304: PLUS
3305: PPUSH
3306: CALL_OW 380
// un := CreateHuman ;
3310: LD_ADDR_VAR 0 3
3314: PUSH
3315: CALL_OW 44
3319: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3320: LD_VAR 0 3
3324: PPUSH
3325: LD_INT 22
3327: PUSH
3328: LD_INT 3
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: PUSH
3335: LD_INT 30
3337: PUSH
3338: LD_INT 32
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PPUSH
3349: CALL_OW 69
3353: PUSH
3354: LD_VAR 0 2
3358: ARRAY
3359: PPUSH
3360: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3364: LD_ADDR_EXP 46
3368: PUSH
3369: LD_EXP 46
3373: PUSH
3374: LD_VAR 0 3
3378: UNION
3379: ST_TO_ADDR
// end ;
3380: GO 3288
3382: POP
3383: POP
// for i := 1 to 2 do
3384: LD_ADDR_VAR 0 2
3388: PUSH
3389: DOUBLE
3390: LD_INT 1
3392: DEC
3393: ST_TO_ADDR
3394: LD_INT 2
3396: PUSH
3397: FOR_TO
3398: IFFALSE 3489
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3400: LD_INT 0
3402: PPUSH
3403: LD_INT 1
3405: PPUSH
3406: LD_OWVAR 67
3410: PUSH
3411: LD_INT 1
3413: PLUS
3414: PPUSH
3415: CALL_OW 380
// un := CreateHuman ;
3419: LD_ADDR_VAR 0 3
3423: PUSH
3424: CALL_OW 44
3428: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3429: LD_VAR 0 3
3433: PPUSH
3434: LD_INT 22
3436: PUSH
3437: LD_INT 3
3439: PUSH
3440: EMPTY
3441: LIST
3442: LIST
3443: PUSH
3444: LD_INT 30
3446: PUSH
3447: LD_INT 5
3449: PUSH
3450: EMPTY
3451: LIST
3452: LIST
3453: PUSH
3454: EMPTY
3455: LIST
3456: LIST
3457: PPUSH
3458: CALL_OW 69
3462: PUSH
3463: LD_INT 1
3465: ARRAY
3466: PPUSH
3467: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3471: LD_ADDR_EXP 46
3475: PUSH
3476: LD_EXP 46
3480: PUSH
3481: LD_VAR 0 3
3485: UNION
3486: ST_TO_ADDR
// end ;
3487: GO 3397
3489: POP
3490: POP
// for i := 1 to 2 do
3491: LD_ADDR_VAR 0 2
3495: PUSH
3496: DOUBLE
3497: LD_INT 1
3499: DEC
3500: ST_TO_ADDR
3501: LD_INT 2
3503: PUSH
3504: FOR_TO
3505: IFFALSE 3592
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3507: LD_INT 0
3509: PPUSH
3510: LD_INT 4
3512: PPUSH
3513: LD_OWVAR 67
3517: PPUSH
3518: CALL_OW 380
// un := CreateHuman ;
3522: LD_ADDR_VAR 0 3
3526: PUSH
3527: CALL_OW 44
3531: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
3532: LD_VAR 0 3
3536: PPUSH
3537: LD_INT 22
3539: PUSH
3540: LD_INT 3
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: PUSH
3547: LD_INT 30
3549: PUSH
3550: LD_INT 7
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: PPUSH
3561: CALL_OW 69
3565: PUSH
3566: LD_INT 1
3568: ARRAY
3569: PPUSH
3570: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3574: LD_ADDR_EXP 46
3578: PUSH
3579: LD_EXP 46
3583: PUSH
3584: LD_VAR 0 3
3588: UNION
3589: ST_TO_ADDR
// end ;
3590: GO 3504
3592: POP
3593: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
3594: LD_INT 0
3596: PPUSH
3597: LD_INT 2
3599: PPUSH
3600: LD_OWVAR 67
3604: PPUSH
3605: CALL_OW 380
// un := CreateHuman ;
3609: LD_ADDR_VAR 0 3
3613: PUSH
3614: CALL_OW 44
3618: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
3619: LD_VAR 0 3
3623: PPUSH
3624: LD_INT 106
3626: PPUSH
3627: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3631: LD_ADDR_EXP 46
3635: PUSH
3636: LD_EXP 46
3640: PUSH
3641: LD_VAR 0 3
3645: UNION
3646: ST_TO_ADDR
// for i := 1 to 3 do
3647: LD_ADDR_VAR 0 2
3651: PUSH
3652: DOUBLE
3653: LD_INT 1
3655: DEC
3656: ST_TO_ADDR
3657: LD_INT 3
3659: PUSH
3660: FOR_TO
3661: IFFALSE 3783
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
3663: LD_ADDR_VAR 0 6
3667: PUSH
3668: LD_INT 22
3670: PUSH
3671: LD_INT 3
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: PUSH
3678: LD_INT 30
3680: PUSH
3681: LD_INT 31
3683: PUSH
3684: EMPTY
3685: LIST
3686: LIST
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: PPUSH
3692: CALL_OW 69
3696: PUSH
3697: LD_VAR 0 2
3701: ARRAY
3702: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
3703: LD_INT 0
3705: PPUSH
3706: LD_INT 1
3708: PPUSH
3709: LD_OWVAR 67
3713: PPUSH
3714: CALL_OW 380
// un := CreateHuman ;
3718: LD_ADDR_VAR 0 3
3722: PUSH
3723: CALL_OW 44
3727: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
3728: LD_VAR 0 3
3732: PPUSH
3733: LD_VAR 0 6
3737: PPUSH
3738: CALL_OW 254
3742: PUSH
3743: LD_INT 3
3745: PLUS
3746: PPUSH
3747: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
3751: LD_VAR 0 3
3755: PPUSH
3756: LD_VAR 0 6
3760: PPUSH
3761: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3765: LD_ADDR_EXP 46
3769: PUSH
3770: LD_EXP 46
3774: PUSH
3775: LD_VAR 0 3
3779: UNION
3780: ST_TO_ADDR
// end ;
3781: GO 3660
3783: POP
3784: POP
// if Difficulty > 1 then
3785: LD_OWVAR 67
3789: PUSH
3790: LD_INT 1
3792: GREATER
3793: IFFALSE 3868
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
3795: LD_ADDR_VAR 0 3
3799: PUSH
3800: LD_INT 3
3802: PPUSH
3803: LD_INT 3
3805: PPUSH
3806: LD_INT 23
3808: PPUSH
3809: LD_INT 1
3811: PPUSH
3812: LD_INT 1
3814: PPUSH
3815: LD_INT 44
3817: PPUSH
3818: LD_INT 100
3820: PPUSH
3821: CALL 386 0 7
3825: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
3826: LD_VAR 0 3
3830: PPUSH
3831: LD_INT 73
3833: PPUSH
3834: LD_INT 110
3836: PPUSH
3837: LD_INT 0
3839: PPUSH
3840: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
3844: LD_INT 0
3846: PPUSH
3847: LD_INT 3
3849: PPUSH
3850: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
3854: CALL_OW 44
3858: PPUSH
3859: LD_VAR 0 3
3863: PPUSH
3864: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
3868: LD_ADDR_EXP 49
3872: PUSH
3873: EMPTY
3874: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 , 8 ] [ Difficulty ] do
3875: LD_ADDR_VAR 0 2
3879: PUSH
3880: DOUBLE
3881: LD_INT 1
3883: DEC
3884: ST_TO_ADDR
3885: LD_INT 6
3887: PUSH
3888: LD_INT 7
3890: PUSH
3891: LD_INT 8
3893: PUSH
3894: LD_INT 8
3896: PUSH
3897: EMPTY
3898: LIST
3899: LIST
3900: LIST
3901: LIST
3902: PUSH
3903: LD_OWVAR 67
3907: ARRAY
3908: PUSH
3909: FOR_TO
3910: IFFALSE 4134
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
3912: LD_INT 3
3914: PPUSH
3915: LD_INT 3
3917: PPUSH
3918: LD_INT 21
3920: PUSH
3921: LD_INT 23
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: PUSH
3928: LD_VAR 0 2
3932: PUSH
3933: LD_INT 2
3935: MOD
3936: PUSH
3937: LD_INT 1
3939: PLUS
3940: ARRAY
3941: PPUSH
3942: LD_INT 1
3944: PPUSH
3945: LD_INT 1
3947: PPUSH
3948: LD_INT 43
3950: PUSH
3951: LD_INT 44
3953: PUSH
3954: LD_INT 42
3956: PUSH
3957: EMPTY
3958: LIST
3959: LIST
3960: LIST
3961: PUSH
3962: LD_VAR 0 2
3966: PUSH
3967: LD_INT 3
3969: MOD
3970: PUSH
3971: LD_INT 1
3973: PLUS
3974: ARRAY
3975: PPUSH
3976: LD_INT 100
3978: PPUSH
3979: CALL 386 0 7
// un := CreateVehicle ;
3983: LD_ADDR_VAR 0 3
3987: PUSH
3988: CALL_OW 45
3992: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
3993: LD_VAR 0 3
3997: PPUSH
3998: LD_INT 0
4000: PUSH
4001: LD_INT 5
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: PUSH
4008: LD_INT 1
4010: PPUSH
4011: LD_INT 2
4013: PPUSH
4014: CALL_OW 12
4018: ARRAY
4019: PPUSH
4020: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
4024: LD_ADDR_EXP 49
4028: PUSH
4029: LD_EXP 49
4033: PUSH
4034: LD_VAR 0 3
4038: UNION
4039: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
4040: LD_VAR 0 3
4044: PPUSH
4045: LD_INT 127
4047: PPUSH
4048: LD_INT 89
4050: PPUSH
4051: LD_INT 7
4053: PPUSH
4054: LD_INT 0
4056: PPUSH
4057: CALL_OW 50
// uc_side := 3 ;
4061: LD_ADDR_OWVAR 20
4065: PUSH
4066: LD_INT 3
4068: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4069: LD_INT 0
4071: PPUSH
4072: LD_INT 3
4074: PPUSH
4075: LD_INT 3
4077: PPUSH
4078: CALL_OW 380
// un := CreateHuman ;
4082: LD_ADDR_VAR 0 3
4086: PUSH
4087: CALL_OW 44
4091: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4092: LD_ADDR_EXP 49
4096: PUSH
4097: LD_EXP 49
4101: PUSH
4102: LD_VAR 0 3
4106: UNION
4107: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4108: LD_VAR 0 3
4112: PPUSH
4113: LD_EXP 49
4117: PUSH
4118: LD_EXP 49
4122: PUSH
4123: LD_INT 1
4125: MINUS
4126: ARRAY
4127: PPUSH
4128: CALL_OW 52
// end ;
4132: GO 3909
4134: POP
4135: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
4136: LD_ADDR_VAR 0 2
4140: PUSH
4141: DOUBLE
4142: LD_INT 1
4144: DEC
4145: ST_TO_ADDR
4146: LD_INT 3
4148: PUSH
4149: LD_INT 4
4151: PUSH
4152: LD_INT 5
4154: PUSH
4155: LD_INT 6
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: PUSH
4164: LD_OWVAR 67
4168: ARRAY
4169: PUSH
4170: FOR_TO
4171: IFFALSE 4237
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4173: LD_INT 0
4175: PPUSH
4176: LD_INT 1
4178: PPUSH
4179: LD_OWVAR 67
4183: PPUSH
4184: CALL_OW 380
// un := CreateHuman ;
4188: LD_ADDR_VAR 0 3
4192: PUSH
4193: CALL_OW 44
4197: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4198: LD_ADDR_EXP 49
4202: PUSH
4203: LD_EXP 49
4207: PUSH
4208: LD_VAR 0 3
4212: UNION
4213: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4214: LD_VAR 0 3
4218: PPUSH
4219: LD_INT 91
4221: PPUSH
4222: LD_INT 60
4224: PPUSH
4225: LD_INT 3
4227: PPUSH
4228: LD_INT 0
4230: PPUSH
4231: CALL_OW 50
// end ;
4235: GO 4170
4237: POP
4238: POP
// end ;
4239: LD_VAR 0 1
4243: RET
// every 0 0$3 do var i ;
4244: GO 4246
4246: DISABLE
4247: LD_INT 0
4249: PPUSH
// begin for i := 1 to 4 do
4250: LD_ADDR_VAR 0 1
4254: PUSH
4255: DOUBLE
4256: LD_INT 1
4258: DEC
4259: ST_TO_ADDR
4260: LD_INT 4
4262: PUSH
4263: FOR_TO
4264: IFFALSE 4283
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4266: LD_EXP 47
4270: PUSH
4271: LD_VAR 0 1
4275: ARRAY
4276: PPUSH
4277: CALL_OW 122
4281: GO 4263
4283: POP
4284: POP
// wait ( 3 ) ;
4285: LD_INT 3
4287: PPUSH
4288: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4292: LD_EXP 47
4296: PUSH
4297: LD_INT 1
4299: ARRAY
4300: PPUSH
4301: LD_INT 22
4303: PUSH
4304: LD_INT 6
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: PUSH
4311: LD_INT 30
4313: PUSH
4314: LD_INT 31
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: PPUSH
4325: CALL_OW 69
4329: PPUSH
4330: LD_EXP 47
4334: PUSH
4335: LD_INT 1
4337: ARRAY
4338: PPUSH
4339: CALL_OW 74
4343: PPUSH
4344: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4348: LD_EXP 47
4352: PUSH
4353: LD_INT 2
4355: ARRAY
4356: PPUSH
4357: LD_INT 211
4359: PPUSH
4360: LD_INT 107
4362: PPUSH
4363: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4367: LD_EXP 47
4371: PUSH
4372: LD_INT 2
4374: ARRAY
4375: PPUSH
4376: LD_INT 209
4378: PPUSH
4379: LD_INT 106
4381: PPUSH
4382: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4386: LD_EXP 47
4390: PUSH
4391: LD_INT 3
4393: ARRAY
4394: PPUSH
4395: LD_INT 209
4397: PPUSH
4398: LD_INT 103
4400: PPUSH
4401: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4405: LD_EXP 47
4409: PUSH
4410: LD_INT 3
4412: ARRAY
4413: PPUSH
4414: LD_INT 209
4416: PPUSH
4417: LD_INT 106
4419: PPUSH
4420: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4424: LD_EXP 47
4428: PUSH
4429: LD_INT 4
4431: ARRAY
4432: PPUSH
4433: LD_INT 227
4435: PPUSH
4436: LD_INT 117
4438: PPUSH
4439: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4443: LD_EXP 47
4447: PUSH
4448: LD_INT 4
4450: ARRAY
4451: PPUSH
4452: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4456: LD_INT 700
4458: PPUSH
4459: CALL_OW 67
// for i := 3 downto 2 do
4463: LD_ADDR_VAR 0 1
4467: PUSH
4468: DOUBLE
4469: LD_INT 3
4471: INC
4472: ST_TO_ADDR
4473: LD_INT 2
4475: PUSH
4476: FOR_DOWNTO
4477: IFFALSE 4644
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4479: LD_EXP 47
4483: PUSH
4484: LD_VAR 0 1
4488: ARRAY
4489: PPUSH
4490: LD_INT 200
4492: PPUSH
4493: LD_INT 91
4495: PPUSH
4496: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4500: LD_EXP 47
4504: PUSH
4505: LD_VAR 0 1
4509: ARRAY
4510: PPUSH
4511: LD_INT 210
4513: PPUSH
4514: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4518: LD_EXP 47
4522: PUSH
4523: LD_VAR 0 1
4527: ARRAY
4528: PPUSH
4529: LD_INT 224
4531: PPUSH
4532: LD_INT 93
4534: PPUSH
4535: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4539: LD_EXP 47
4543: PUSH
4544: LD_VAR 0 1
4548: ARRAY
4549: PPUSH
4550: LD_INT 210
4552: PPUSH
4553: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4557: LD_EXP 47
4561: PUSH
4562: LD_VAR 0 1
4566: ARRAY
4567: PPUSH
4568: LD_INT 239
4570: PPUSH
4571: LD_INT 123
4573: PPUSH
4574: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4578: LD_EXP 47
4582: PUSH
4583: LD_VAR 0 1
4587: ARRAY
4588: PPUSH
4589: LD_INT 210
4591: PPUSH
4592: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4596: LD_EXP 47
4600: PUSH
4601: LD_VAR 0 1
4605: ARRAY
4606: PPUSH
4607: LD_INT 212
4609: PPUSH
4610: LD_INT 105
4612: PPUSH
4613: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4617: LD_EXP 47
4621: PUSH
4622: LD_VAR 0 1
4626: ARRAY
4627: PPUSH
4628: LD_INT 700
4630: PPUSH
4631: CALL_OW 202
// wait ( 0 0$30 ) ;
4635: LD_INT 1050
4637: PPUSH
4638: CALL_OW 67
// end ;
4642: GO 4476
4644: POP
4645: POP
// until not activeGrishkoAI ;
4646: LD_EXP 10
4650: NOT
4651: IFFALSE 4456
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
4653: LD_EXP 47
4657: PPUSH
4658: LD_INT 221
4660: PPUSH
4661: LD_INT 110
4663: PPUSH
4664: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
4668: LD_EXP 47
4672: PPUSH
4673: LD_INT 228
4675: PPUSH
4676: LD_INT 115
4678: PPUSH
4679: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
4683: LD_EXP 47
4687: PPUSH
4688: CALL_OW 200
// end ;
4692: PPOPN 1
4694: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
4695: LD_EXP 12
4699: IFFALSE 5449
4701: GO 4703
4703: DISABLE
4704: LD_INT 0
4706: PPUSH
4707: PPUSH
4708: PPUSH
4709: PPUSH
// begin uc_side := 6 ;
4710: LD_ADDR_OWVAR 20
4714: PUSH
4715: LD_INT 6
4717: ST_TO_ADDR
// uc_nation := 3 ;
4718: LD_ADDR_OWVAR 21
4722: PUSH
4723: LD_INT 3
4725: ST_TO_ADDR
// for i := 1 to 3 do
4726: LD_ADDR_VAR 0 2
4730: PUSH
4731: DOUBLE
4732: LD_INT 1
4734: DEC
4735: ST_TO_ADDR
4736: LD_INT 3
4738: PUSH
4739: FOR_TO
4740: IFFALSE 4853
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
4742: LD_INT 0
4744: PPUSH
4745: LD_INT 1
4747: PPUSH
4748: LD_INT 2
4750: PUSH
4751: LD_INT 3
4753: PUSH
4754: LD_INT 4
4756: PUSH
4757: LD_INT 4
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: PUSH
4766: LD_OWVAR 67
4770: ARRAY
4771: PPUSH
4772: CALL_OW 380
// un := CreateHuman ;
4776: LD_ADDR_VAR 0 1
4780: PUSH
4781: CALL_OW 44
4785: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
4786: LD_ADDR_EXP 48
4790: PUSH
4791: LD_EXP 48
4795: PUSH
4796: LD_VAR 0 1
4800: UNION
4801: ST_TO_ADDR
// SetTag ( un , 1 ) ;
4802: LD_VAR 0 1
4806: PPUSH
4807: LD_INT 1
4809: PPUSH
4810: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
4814: LD_VAR 0 1
4818: PPUSH
4819: LD_INT 11
4821: PPUSH
4822: LD_INT 0
4824: PPUSH
4825: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
4829: LD_VAR 0 1
4833: PPUSH
4834: LD_INT 210
4836: PPUSH
4837: LD_INT 159
4839: PPUSH
4840: CALL_OW 111
// wait ( 0 0$2 ) ;
4844: LD_INT 70
4846: PPUSH
4847: CALL_OW 67
// end ;
4851: GO 4739
4853: POP
4854: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
4855: LD_ADDR_VAR 0 4
4859: PUSH
4860: LD_INT 172
4862: PUSH
4863: LD_INT 76
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: PUSH
4870: LD_INT 150
4872: PUSH
4873: LD_INT 38
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: PUSH
4880: LD_INT 148
4882: PUSH
4883: LD_INT 9
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: PUSH
4890: LD_INT 165
4892: PUSH
4893: LD_INT 38
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: PUSH
4906: LD_INT 191
4908: PUSH
4909: LD_INT 77
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: PUSH
4916: LD_INT 168
4918: PUSH
4919: LD_INT 42
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: PUSH
4926: LD_INT 166
4928: PUSH
4929: LD_INT 11
4931: PUSH
4932: EMPTY
4933: LIST
4934: LIST
4935: PUSH
4936: LD_INT 151
4938: PUSH
4939: LD_INT 12
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: PUSH
4952: LD_INT 221
4954: PUSH
4955: LD_INT 88
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: PUSH
4962: LD_INT 217
4964: PUSH
4965: LD_INT 64
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: PUSH
4972: LD_INT 232
4974: PUSH
4975: LD_INT 66
4977: PUSH
4978: EMPTY
4979: LIST
4980: LIST
4981: PUSH
4982: LD_INT 200
4984: PUSH
4985: LD_INT 56
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: LIST
5002: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5003: LD_INT 35
5005: PPUSH
5006: CALL_OW 67
// for i := russianPatrol downto 1 do
5010: LD_ADDR_VAR 0 2
5014: PUSH
5015: DOUBLE
5016: LD_EXP 48
5020: INC
5021: ST_TO_ADDR
5022: LD_INT 1
5024: PUSH
5025: FOR_DOWNTO
5026: IFFALSE 5411
// begin if IsDead ( russianPatrol [ i ] ) then
5028: LD_EXP 48
5032: PUSH
5033: LD_VAR 0 2
5037: ARRAY
5038: PPUSH
5039: CALL_OW 301
5043: IFFALSE 5047
// continue ;
5045: GO 5025
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
5047: LD_EXP 48
5051: PUSH
5052: LD_VAR 0 2
5056: ARRAY
5057: PPUSH
5058: CALL_OW 256
5062: PUSH
5063: LD_INT 990
5065: LESS
5066: IFFALSE 5089
5068: PUSH
5069: LD_EXP 48
5073: PUSH
5074: LD_VAR 0 2
5078: ARRAY
5079: PPUSH
5080: CALL_OW 110
5084: PUSH
5085: LD_INT 1
5087: EQUAL
5088: AND
5089: IFFALSE 5109
// SetTag ( russianPatrol [ i ] , 2 ) ;
5091: LD_EXP 48
5095: PUSH
5096: LD_VAR 0 2
5100: ARRAY
5101: PPUSH
5102: LD_INT 2
5104: PPUSH
5105: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5109: LD_EXP 48
5113: PUSH
5114: LD_VAR 0 2
5118: ARRAY
5119: PPUSH
5120: CALL_OW 110
5124: PUSH
5125: LD_INT 2
5127: EQUAL
5128: IFFALSE 5195
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5130: LD_EXP 48
5134: PUSH
5135: LD_VAR 0 2
5139: ARRAY
5140: PPUSH
5141: LD_INT 166
5143: PPUSH
5144: LD_INT 101
5146: PPUSH
5147: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5151: LD_EXP 48
5155: PUSH
5156: LD_VAR 0 2
5160: ARRAY
5161: PPUSH
5162: LD_INT 71
5164: PPUSH
5165: CALL_OW 296
5169: PUSH
5170: LD_INT 10
5172: LESS
5173: IFFALSE 5193
// SetTag ( russianPatrol [ i ] , 3 ) ;
5175: LD_EXP 48
5179: PUSH
5180: LD_VAR 0 2
5184: ARRAY
5185: PPUSH
5186: LD_INT 3
5188: PPUSH
5189: CALL_OW 109
// continue ;
5193: GO 5025
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5195: LD_EXP 48
5199: PUSH
5200: LD_VAR 0 2
5204: ARRAY
5205: PPUSH
5206: CALL_OW 110
5210: PUSH
5211: LD_INT 3
5213: EQUAL
5214: IFFALSE 5309
// begin spottedByPatrol := true ;
5216: LD_ADDR_EXP 7
5220: PUSH
5221: LD_INT 1
5223: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5224: LD_EXP 48
5228: PUSH
5229: LD_VAR 0 2
5233: ARRAY
5234: PPUSH
5235: CALL_OW 250
5239: PPUSH
5240: LD_EXP 48
5244: PUSH
5245: LD_VAR 0 2
5249: ARRAY
5250: PPUSH
5251: CALL_OW 251
5255: PPUSH
5256: LD_INT 2
5258: PPUSH
5259: LD_INT 6
5261: NEG
5262: PPUSH
5263: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
5267: LD_EXP 48
5271: PUSH
5272: LD_VAR 0 2
5276: ARRAY
5277: PPUSH
5278: CALL_OW 87
// DialogueOn ;
5282: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
5286: LD_EXP 26
5290: PPUSH
5291: LD_STRING DH-Spot-f-3
5293: PPUSH
5294: CALL_OW 88
// DialogueOff ;
5298: CALL_OW 7
// YouLost ( Spotted ) ;
5302: LD_STRING Spotted
5304: PPUSH
5305: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
5309: LD_EXP 48
5313: PUSH
5314: LD_VAR 0 2
5318: ARRAY
5319: PPUSH
5320: CALL_OW 314
5324: NOT
5325: IFFALSE 5409
// for j in patrol [ i ] do
5327: LD_ADDR_VAR 0 3
5331: PUSH
5332: LD_VAR 0 4
5336: PUSH
5337: LD_VAR 0 2
5341: ARRAY
5342: PUSH
5343: FOR_IN
5344: IFFALSE 5407
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5346: LD_EXP 48
5350: PUSH
5351: LD_VAR 0 2
5355: ARRAY
5356: PPUSH
5357: LD_INT 35
5359: PPUSH
5360: LD_INT 175
5362: PPUSH
5363: CALL_OW 12
5367: PPUSH
5368: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5372: LD_EXP 48
5376: PUSH
5377: LD_VAR 0 2
5381: ARRAY
5382: PPUSH
5383: LD_VAR 0 3
5387: PUSH
5388: LD_INT 1
5390: ARRAY
5391: PPUSH
5392: LD_VAR 0 3
5396: PUSH
5397: LD_INT 2
5399: ARRAY
5400: PPUSH
5401: CALL_OW 174
// end ;
5405: GO 5343
5407: POP
5408: POP
// end ;
5409: GO 5025
5411: POP
5412: POP
// until not russianPatrol or russianAlert ;
5413: LD_EXP 48
5417: NOT
5418: IFTRUE 5426
5420: PUSH
5421: LD_EXP 9
5425: OR
5426: IFFALSE 5003
// if russianPatrol then
5428: LD_EXP 48
5432: IFFALSE 5449
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5434: LD_EXP 48
5438: PPUSH
5439: LD_INT 161
5441: PPUSH
5442: LD_INT 107
5444: PPUSH
5445: CALL_OW 114
// end ;
5449: PPOPN 4
5451: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5452: LD_EXP 6
5456: IFFALSE 5465
5458: PUSH
5459: LD_EXP 13
5463: NOT
5464: AND
5465: IFFALSE 5961
5467: GO 5469
5469: DISABLE
5470: LD_INT 0
5472: PPUSH
5473: PPUSH
5474: PPUSH
5475: PPUSH
5476: PPUSH
// begin enable ;
5477: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5478: LD_ADDR_VAR 0 2
5482: PUSH
5483: LD_EXP 49
5487: PPUSH
5488: LD_INT 21
5490: PUSH
5491: LD_INT 2
5493: PUSH
5494: EMPTY
5495: LIST
5496: LIST
5497: PPUSH
5498: CALL_OW 72
5502: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5503: LD_ADDR_VAR 0 4
5507: PUSH
5508: LD_INT 22
5510: PUSH
5511: LD_INT 4
5513: PUSH
5514: EMPTY
5515: LIST
5516: LIST
5517: PPUSH
5518: CALL_OW 69
5522: ST_TO_ADDR
// for i in filter do
5523: LD_ADDR_VAR 0 1
5527: PUSH
5528: LD_VAR 0 2
5532: PUSH
5533: FOR_IN
5534: IFFALSE 5959
// begin tmp := IsDrivenBy ( i ) ;
5536: LD_ADDR_VAR 0 3
5540: PUSH
5541: LD_VAR 0 1
5545: PPUSH
5546: CALL_OW 311
5550: ST_TO_ADDR
// if not tmp then
5551: LD_VAR 0 3
5555: NOT
5556: IFFALSE 5560
// continue ;
5558: GO 5533
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5560: LD_VAR 0 1
5564: PPUSH
5565: CALL_OW 261
5569: PUSH
5570: LD_INT 90
5572: GREATER
5573: IFFALSE 5590
5575: PUSH
5576: LD_VAR 0 1
5580: PPUSH
5581: CALL_OW 110
5585: PUSH
5586: LD_INT 2
5588: EQUAL
5589: AND
5590: IFFALSE 5606
// SetTag ( i , 0 ) else
5592: LD_VAR 0 1
5596: PPUSH
5597: LD_INT 0
5599: PPUSH
5600: CALL_OW 109
5604: GO 5702
// if GetTag ( i ) = 2 then
5606: LD_VAR 0 1
5610: PPUSH
5611: CALL_OW 110
5615: PUSH
5616: LD_INT 2
5618: EQUAL
5619: IFFALSE 5702
// begin x := rand ( 1 , 2 ) ;
5621: LD_ADDR_VAR 0 5
5625: PUSH
5626: LD_INT 1
5628: PPUSH
5629: LD_INT 2
5631: PPUSH
5632: CALL_OW 12
5636: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5637: LD_VAR 0 1
5641: PPUSH
5642: LD_EXP 50
5646: PUSH
5647: LD_VAR 0 5
5651: ARRAY
5652: PPUSH
5653: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
5657: LD_EXP 50
5661: PUSH
5662: LD_VAR 0 5
5666: ARRAY
5667: PPUSH
5668: LD_INT 2
5670: PPUSH
5671: CALL_OW 289
5675: PUSH
5676: LD_INT 20
5678: LESS
5679: IFFALSE 5702
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
5681: LD_EXP 50
5685: PUSH
5686: LD_VAR 0 5
5690: ARRAY
5691: PPUSH
5692: LD_INT 2
5694: PPUSH
5695: LD_INT 100
5697: PPUSH
5698: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5702: LD_VAR 0 1
5706: PPUSH
5707: CALL_OW 256
5711: PUSH
5712: LD_INT 600
5714: GREATEREQUAL
5715: IFFALSE 5729
5717: PUSH
5718: LD_VAR 0 1
5722: PPUSH
5723: CALL_OW 110
5727: NOT
5728: AND
5729: IFFALSE 5755
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5731: LD_VAR 0 1
5735: PPUSH
5736: LD_VAR 0 4
5740: PPUSH
5741: LD_VAR 0 1
5745: PPUSH
5746: CALL_OW 74
5750: PPUSH
5751: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5755: LD_VAR 0 1
5759: PPUSH
5760: CALL_OW 256
5764: PUSH
5765: LD_INT 600
5767: LESS
5768: IFFALSE 5782
5770: PUSH
5771: LD_VAR 0 1
5775: PPUSH
5776: CALL_OW 110
5780: NOT
5781: AND
5782: IFFALSE 5811
// begin SetTag ( i , 1 ) ;
5784: LD_VAR 0 1
5788: PPUSH
5789: LD_INT 1
5791: PPUSH
5792: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5796: LD_VAR 0 1
5800: PPUSH
5801: LD_INT 62
5803: PPUSH
5804: LD_INT 22
5806: PPUSH
5807: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5811: LD_VAR 0 1
5815: PPUSH
5816: CALL_OW 110
5820: PUSH
5821: LD_INT 1
5823: EQUAL
5824: IFFALSE 5847
5826: PUSH
5827: LD_VAR 0 1
5831: PPUSH
5832: LD_INT 62
5834: PPUSH
5835: LD_INT 22
5837: PPUSH
5838: CALL_OW 297
5842: PUSH
5843: LD_INT 6
5845: LESS
5846: AND
5847: IFFALSE 5855
5849: PUSH
5850: LD_VAR 0 3
5854: AND
5855: IFFALSE 5957
// begin ComExitVehicle ( tmp ) ;
5857: LD_VAR 0 3
5861: PPUSH
5862: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
5866: LD_VAR 0 3
5870: PPUSH
5871: LD_VAR 0 1
5875: PPUSH
5876: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5880: LD_INT 35
5882: PPUSH
5883: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5887: LD_VAR 0 1
5891: PPUSH
5892: CALL_OW 256
5896: PUSH
5897: LD_INT 1000
5899: EQUAL
5900: IFFALSE 5880
// ComEnterUnit ( tmp , i ) ;
5902: LD_VAR 0 3
5906: PPUSH
5907: LD_VAR 0 1
5911: PPUSH
5912: CALL_OW 120
// if GetFuel ( i ) <= 90 then
5916: LD_VAR 0 1
5920: PPUSH
5921: CALL_OW 261
5925: PUSH
5926: LD_INT 90
5928: LESSEQUAL
5929: IFFALSE 5945
// SetTag ( i , 2 ) else
5931: LD_VAR 0 1
5935: PPUSH
5936: LD_INT 2
5938: PPUSH
5939: CALL_OW 109
5943: GO 5957
// SetTag ( i , 0 ) ;
5945: LD_VAR 0 1
5949: PPUSH
5950: LD_INT 0
5952: PPUSH
5953: CALL_OW 109
// end ; end ;
5957: GO 5533
5959: POP
5960: POP
// end ;
5961: PPOPN 5
5963: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
5964: LD_EXP 20
5968: IFFALSE 6227
5970: GO 5972
5972: DISABLE
5973: LD_INT 0
5975: PPUSH
5976: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
5977: LD_EXP 50
5981: PPUSH
5982: LD_INT 79
5984: PPUSH
5985: LD_INT 155
5987: PPUSH
5988: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
5992: LD_EXP 50
5996: PPUSH
5997: LD_INT 16
5999: PPUSH
6000: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6004: LD_ADDR_VAR 0 2
6008: PUSH
6009: LD_EXP 49
6013: PPUSH
6014: LD_INT 50
6016: PUSH
6017: EMPTY
6018: LIST
6019: PPUSH
6020: CALL_OW 72
6024: ST_TO_ADDR
// tmp := tmp diff UnitFilter ( tmp , [ [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] ] ) ;
6025: LD_ADDR_VAR 0 2
6029: PUSH
6030: LD_VAR 0 2
6034: PUSH
6035: LD_VAR 0 2
6039: PPUSH
6040: LD_INT 25
6042: PUSH
6043: LD_INT 3
6045: PUSH
6046: EMPTY
6047: LIST
6048: LIST
6049: PUSH
6050: LD_INT 3
6052: PUSH
6053: LD_INT 55
6055: PUSH
6056: EMPTY
6057: LIST
6058: PUSH
6059: EMPTY
6060: LIST
6061: LIST
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: PPUSH
6067: CALL_OW 72
6071: DIFF
6072: ST_TO_ADDR
// for i in tmp do
6073: LD_ADDR_VAR 0 1
6077: PUSH
6078: LD_VAR 0 2
6082: PUSH
6083: FOR_IN
6084: IFFALSE 6118
// begin ComAgressiveMove ( i , 123 , 60 ) ;
6086: LD_VAR 0 1
6090: PPUSH
6091: LD_INT 123
6093: PPUSH
6094: LD_INT 60
6096: PPUSH
6097: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
6101: LD_VAR 0 1
6105: PPUSH
6106: LD_INT 153
6108: PPUSH
6109: LD_INT 103
6111: PPUSH
6112: CALL_OW 174
// end ;
6116: GO 6083
6118: POP
6119: POP
// repeat wait ( 0 0$1 ) ;
6120: LD_INT 35
6122: PPUSH
6123: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6127: LD_ADDR_VAR 0 2
6131: PUSH
6132: LD_EXP 49
6136: PPUSH
6137: LD_INT 50
6139: PUSH
6140: EMPTY
6141: LIST
6142: PPUSH
6143: CALL_OW 72
6147: ST_TO_ADDR
// for i in tmp do
6148: LD_ADDR_VAR 0 1
6152: PUSH
6153: LD_VAR 0 2
6157: PUSH
6158: FOR_IN
6159: IFFALSE 6218
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
6161: LD_VAR 0 1
6165: PPUSH
6166: LD_INT 81
6168: PUSH
6169: LD_INT 3
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 3
6178: PUSH
6179: LD_INT 21
6181: PUSH
6182: LD_INT 3
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: PUSH
6193: EMPTY
6194: LIST
6195: LIST
6196: PPUSH
6197: CALL_OW 69
6201: PPUSH
6202: LD_VAR 0 1
6206: PPUSH
6207: CALL_OW 74
6211: PPUSH
6212: CALL_OW 115
6216: GO 6158
6218: POP
6219: POP
6220: LD_VAR 0 2
6224: NOT
6225: IFFALSE 6120
// end ;
6227: PPOPN 2
6229: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6230: LD_INT 22
6232: PUSH
6233: LD_INT 3
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: PUSH
6240: LD_INT 32
6242: PUSH
6243: LD_INT 1
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: PPUSH
6254: CALL_OW 69
6258: IFFALSE 6337
6260: GO 6262
6262: DISABLE
6263: LD_INT 0
6265: PPUSH
// begin enable ;
6266: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6267: LD_ADDR_VAR 0 1
6271: PUSH
6272: LD_INT 22
6274: PUSH
6275: LD_INT 3
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: PUSH
6282: LD_INT 32
6284: PUSH
6285: LD_INT 1
6287: PUSH
6288: EMPTY
6289: LIST
6290: LIST
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: PPUSH
6296: CALL_OW 69
6300: PUSH
6301: FOR_IN
6302: IFFALSE 6335
// if GetFuel ( i ) < 1 then
6304: LD_VAR 0 1
6308: PPUSH
6309: CALL_OW 261
6313: PUSH
6314: LD_INT 1
6316: LESS
6317: IFFALSE 6333
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6319: LD_VAR 0 1
6323: PPUSH
6324: CALL_OW 311
6328: PPUSH
6329: CALL_OW 121
6333: GO 6301
6335: POP
6336: POP
// end ;
6337: PPOPN 1
6339: END
// every 0 0$2 trigger IsDying ( Kurin ) or IsDead ( Kurin ) or IsDying ( Kirov ) or IsDead ( Kirov ) do var i , tmp , enemy , barracks ;
6340: LD_EXP 41
6344: PPUSH
6345: CALL_OW 303
6349: IFTRUE 6362
6351: PUSH
6352: LD_EXP 41
6356: PPUSH
6357: CALL_OW 301
6361: OR
6362: IFTRUE 6373
6364: PUSH
6365: LD_INT 71
6367: PPUSH
6368: CALL_OW 303
6372: OR
6373: IFTRUE 6384
6375: PUSH
6376: LD_INT 71
6378: PPUSH
6379: CALL_OW 301
6383: OR
6384: IFFALSE 6713
6386: GO 6388
6388: DISABLE
6389: LD_INT 0
6391: PPUSH
6392: PPUSH
6393: PPUSH
6394: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 1 ] ) ;
6395: LD_ADDR_VAR 0 2
6399: PUSH
6400: LD_EXP 45
6404: PPUSH
6405: LD_INT 25
6407: PUSH
6408: LD_INT 1
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PPUSH
6415: CALL_OW 72
6419: ST_TO_ADDR
// if not tmp then
6420: LD_VAR 0 2
6424: NOT
6425: IFFALSE 6429
// exit ;
6427: GO 6713
// barracks := HexInfo ( 166 , 116 ) ;
6429: LD_ADDR_VAR 0 4
6433: PUSH
6434: LD_INT 166
6436: PPUSH
6437: LD_INT 116
6439: PPUSH
6440: CALL_OW 428
6444: ST_TO_ADDR
// for i in tmp do
6445: LD_ADDR_VAR 0 1
6449: PUSH
6450: LD_VAR 0 2
6454: PUSH
6455: FOR_IN
6456: IFFALSE 6469
// ComExitBuilding ( i ) ;
6458: LD_VAR 0 1
6462: PPUSH
6463: CALL_OW 122
6467: GO 6455
6469: POP
6470: POP
// repeat wait ( 0 0$1 ) ;
6471: LD_INT 35
6473: PPUSH
6474: CALL_OW 67
// tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
6478: LD_ADDR_VAR 0 2
6482: PUSH
6483: LD_EXP 45
6487: PPUSH
6488: LD_INT 25
6490: PUSH
6491: LD_INT 1
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: PUSH
6498: LD_INT 50
6500: PUSH
6501: EMPTY
6502: LIST
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: PPUSH
6508: CALL_OW 72
6512: ST_TO_ADDR
// enemy := FilterUnitsInArea ( kirovBaseArea , [ f_enemy , 6 ] ) ;
6513: LD_ADDR_VAR 0 3
6517: PUSH
6518: LD_INT 21
6520: PPUSH
6521: LD_INT 81
6523: PUSH
6524: LD_INT 6
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PPUSH
6531: CALL_OW 70
6535: ST_TO_ADDR
// if enemy then
6536: LD_VAR 0 3
6540: IFFALSE 6585
// begin for i in tmp do
6542: LD_ADDR_VAR 0 1
6546: PUSH
6547: LD_VAR 0 2
6551: PUSH
6552: FOR_IN
6553: IFFALSE 6581
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6555: LD_VAR 0 1
6559: PPUSH
6560: LD_VAR 0 3
6564: PPUSH
6565: LD_VAR 0 1
6569: PPUSH
6570: CALL_OW 74
6574: PPUSH
6575: CALL_OW 115
6579: GO 6552
6581: POP
6582: POP
// end else
6583: GO 6706
// begin for i in tmp do
6585: LD_ADDR_VAR 0 1
6589: PUSH
6590: LD_VAR 0 2
6594: PUSH
6595: FOR_IN
6596: IFFALSE 6704
// if HasTask ( i ) or not IsInArea ( i , kirovBaseArea ) then
6598: LD_VAR 0 1
6602: PPUSH
6603: CALL_OW 314
6607: IFTRUE 6624
6609: PUSH
6610: LD_VAR 0 1
6614: PPUSH
6615: LD_INT 21
6617: PPUSH
6618: CALL_OW 308
6622: NOT
6623: OR
6624: IFFALSE 6702
// if GetLives ( i ) < 600 and IsOk ( barracks ) and UnitsInside ( barracks ) < 6 then
6626: LD_VAR 0 1
6630: PPUSH
6631: CALL_OW 256
6635: PUSH
6636: LD_INT 600
6638: LESS
6639: IFFALSE 6652
6641: PUSH
6642: LD_VAR 0 4
6646: PPUSH
6647: CALL_OW 302
6651: AND
6652: IFFALSE 6669
6654: PUSH
6655: LD_VAR 0 4
6659: PPUSH
6660: CALL_OW 313
6664: PUSH
6665: LD_INT 6
6667: LESS
6668: AND
6669: IFFALSE 6687
// ComEnterUnit ( i , barracks ) else
6671: LD_VAR 0 1
6675: PPUSH
6676: LD_VAR 0 4
6680: PPUSH
6681: CALL_OW 120
6685: GO 6702
// ComMoveXY ( i , 162 , 109 ) ;
6687: LD_VAR 0 1
6691: PPUSH
6692: LD_INT 162
6694: PPUSH
6695: LD_INT 109
6697: PPUSH
6698: CALL_OW 111
6702: GO 6595
6704: POP
6705: POP
// end ; until not tmp ;
6706: LD_VAR 0 2
6710: NOT
6711: IFFALSE 6471
// end ;
6713: PPOPN 4
6715: END
// every 0 0$2 trigger IsDying ( Beria ) or IsDead ( Beria ) do var i , tmp ;
6716: LD_INT 106
6718: PPUSH
6719: CALL_OW 303
6723: IFTRUE 6734
6725: PUSH
6726: LD_INT 106
6728: PPUSH
6729: CALL_OW 301
6733: OR
6734: IFFALSE 6829
6736: GO 6738
6738: DISABLE
6739: LD_INT 0
6741: PPUSH
6742: PPUSH
// begin tmp := UnitFilter ( beriaBaseSquad , [ f_class , 1 ] ) ;
6743: LD_ADDR_VAR 0 2
6747: PUSH
6748: LD_EXP 46
6752: PPUSH
6753: LD_INT 25
6755: PUSH
6756: LD_INT 1
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: PPUSH
6763: CALL_OW 72
6767: ST_TO_ADDR
// if not tmp then
6768: LD_VAR 0 2
6772: NOT
6773: IFFALSE 6777
// exit ;
6775: GO 6829
// for i in tmp do
6777: LD_ADDR_VAR 0 1
6781: PUSH
6782: LD_VAR 0 2
6786: PUSH
6787: FOR_IN
6788: IFFALSE 6827
// begin if IsInUnit ( i ) then
6790: LD_VAR 0 1
6794: PPUSH
6795: CALL_OW 310
6799: IFFALSE 6810
// ComExitBuilding ( i ) ;
6801: LD_VAR 0 1
6805: PPUSH
6806: CALL_OW 122
// AddComMoveXY ( i , 66 , 128 ) ;
6810: LD_VAR 0 1
6814: PPUSH
6815: LD_INT 66
6817: PPUSH
6818: LD_INT 128
6820: PPUSH
6821: CALL_OW 171
// end ;
6825: GO 6787
6827: POP
6828: POP
// end ; end_of_file
6829: PPOPN 2
6831: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6832: LD_INT 0
6834: PPUSH
6835: PPUSH
6836: PPUSH
// SetBName ( omikron , omikron ) ;
6837: LD_INT 64
6839: PPUSH
6840: LD_STRING omikron
6842: PPUSH
6843: CALL_OW 500
// uc_side := 4 ;
6847: LD_ADDR_OWVAR 20
6851: PUSH
6852: LD_INT 4
6854: ST_TO_ADDR
// uc_nation := 1 ;
6855: LD_ADDR_OWVAR 21
6859: PUSH
6860: LD_INT 1
6862: ST_TO_ADDR
// omicronSquad := [ ] ;
6863: LD_ADDR_EXP 52
6867: PUSH
6868: EMPTY
6869: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6870: LD_ADDR_VAR 0 2
6874: PUSH
6875: LD_INT 22
6877: PUSH
6878: LD_INT 4
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: PUSH
6885: LD_INT 2
6887: PUSH
6888: LD_INT 30
6890: PUSH
6891: LD_INT 32
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PUSH
6898: LD_INT 30
6900: PUSH
6901: LD_INT 31
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: LIST
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: PPUSH
6917: CALL_OW 69
6921: PUSH
6922: FOR_IN
6923: IFFALSE 6980
// begin PrepareHuman ( false , 1 , 1 ) ;
6925: LD_INT 0
6927: PPUSH
6928: LD_INT 1
6930: PPUSH
6931: LD_INT 1
6933: PPUSH
6934: CALL_OW 380
// un := CreateHuman ;
6938: LD_ADDR_VAR 0 3
6942: PUSH
6943: CALL_OW 44
6947: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6948: LD_ADDR_EXP 52
6952: PUSH
6953: LD_EXP 52
6957: PUSH
6958: LD_VAR 0 3
6962: UNION
6963: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6964: LD_VAR 0 3
6968: PPUSH
6969: LD_VAR 0 2
6973: PPUSH
6974: CALL_OW 52
// end ;
6978: GO 6922
6980: POP
6981: POP
// for i := 1 to 3 do
6982: LD_ADDR_VAR 0 2
6986: PUSH
6987: DOUBLE
6988: LD_INT 1
6990: DEC
6991: ST_TO_ADDR
6992: LD_INT 3
6994: PUSH
6995: FOR_TO
6996: IFFALSE 7051
// begin PrepareHuman ( false , 2 , 2 ) ;
6998: LD_INT 0
7000: PPUSH
7001: LD_INT 2
7003: PPUSH
7004: LD_INT 2
7006: PPUSH
7007: CALL_OW 380
// un := CreateHuman ;
7011: LD_ADDR_VAR 0 3
7015: PUSH
7016: CALL_OW 44
7020: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7021: LD_ADDR_EXP 52
7025: PUSH
7026: LD_EXP 52
7030: PUSH
7031: LD_VAR 0 3
7035: UNION
7036: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
7037: LD_VAR 0 3
7041: PPUSH
7042: LD_INT 64
7044: PPUSH
7045: CALL_OW 52
// end ;
7049: GO 6995
7051: POP
7052: POP
// for i := 1 to 2 do
7053: LD_ADDR_VAR 0 2
7057: PUSH
7058: DOUBLE
7059: LD_INT 1
7061: DEC
7062: ST_TO_ADDR
7063: LD_INT 2
7065: PUSH
7066: FOR_TO
7067: IFFALSE 7206
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
7069: LD_INT 4
7071: PPUSH
7072: LD_INT 1
7074: PPUSH
7075: LD_INT 2
7077: PPUSH
7078: LD_INT 2
7080: PPUSH
7081: LD_INT 1
7083: PPUSH
7084: LD_INT 3
7086: PPUSH
7087: LD_INT 100
7089: PPUSH
7090: CALL 386 0 7
// un := CreateVehicle ;
7094: LD_ADDR_VAR 0 3
7098: PUSH
7099: CALL_OW 45
7103: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7104: LD_ADDR_EXP 52
7108: PUSH
7109: LD_EXP 52
7113: PUSH
7114: LD_VAR 0 3
7118: UNION
7119: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
7120: LD_VAR 0 3
7124: PPUSH
7125: LD_INT 28
7127: PPUSH
7128: LD_INT 37
7130: PPUSH
7131: LD_INT 6
7133: PPUSH
7134: LD_INT 0
7136: PPUSH
7137: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
7141: LD_INT 0
7143: PPUSH
7144: LD_INT 3
7146: PPUSH
7147: LD_INT 2
7149: PPUSH
7150: CALL_OW 380
// un := CreateHuman ;
7154: LD_ADDR_VAR 0 3
7158: PUSH
7159: CALL_OW 44
7163: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7164: LD_ADDR_EXP 52
7168: PUSH
7169: LD_EXP 52
7173: PUSH
7174: LD_VAR 0 3
7178: UNION
7179: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
7180: LD_VAR 0 3
7184: PPUSH
7185: LD_EXP 52
7189: PUSH
7190: LD_EXP 52
7194: PUSH
7195: LD_INT 1
7197: MINUS
7198: ARRAY
7199: PPUSH
7200: CALL_OW 52
// end ;
7204: GO 7066
7206: POP
7207: POP
// end ;
7208: LD_VAR 0 1
7212: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
7213: LD_INT 0
7215: PPUSH
7216: PPUSH
7217: PPUSH
7218: PPUSH
// uc_side := 4 ;
7219: LD_ADDR_OWVAR 20
7223: PUSH
7224: LD_INT 4
7226: ST_TO_ADDR
// uc_nation := 1 ;
7227: LD_ADDR_OWVAR 21
7231: PUSH
7232: LD_INT 1
7234: ST_TO_ADDR
// tmp := [ ] ;
7235: LD_ADDR_VAR 0 4
7239: PUSH
7240: EMPTY
7241: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7242: LD_INT 4
7244: PPUSH
7245: LD_INT 1
7247: PPUSH
7248: LD_INT 2
7250: PPUSH
7251: LD_INT 1
7253: PPUSH
7254: LD_INT 1
7256: PPUSH
7257: LD_INT 4
7259: PPUSH
7260: LD_INT 77
7262: PPUSH
7263: CALL 386 0 7
// un := CreateVehicle ;
7267: LD_ADDR_VAR 0 3
7271: PUSH
7272: CALL_OW 45
7276: ST_TO_ADDR
// tmp := tmp union un ;
7277: LD_ADDR_VAR 0 4
7281: PUSH
7282: LD_VAR 0 4
7286: PUSH
7287: LD_VAR 0 3
7291: UNION
7292: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7293: LD_VAR 0 3
7297: PPUSH
7298: LD_INT 2
7300: PPUSH
7301: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
7305: LD_VAR 0 3
7309: PPUSH
7310: LD_INT 106
7312: PPUSH
7313: LD_INT 3
7315: PPUSH
7316: LD_INT 0
7318: PPUSH
7319: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
7323: LD_INT 0
7325: PPUSH
7326: LD_INT 3
7328: PPUSH
7329: LD_INT 2
7331: PPUSH
7332: CALL_OW 380
// un := CreateHuman ;
7336: LD_ADDR_VAR 0 3
7340: PUSH
7341: CALL_OW 44
7345: ST_TO_ADDR
// tmp := tmp union un ;
7346: LD_ADDR_VAR 0 4
7350: PUSH
7351: LD_VAR 0 4
7355: PUSH
7356: LD_VAR 0 3
7360: UNION
7361: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7362: LD_VAR 0 3
7366: PPUSH
7367: LD_VAR 0 4
7371: PUSH
7372: LD_VAR 0 4
7376: PUSH
7377: LD_INT 1
7379: MINUS
7380: ARRAY
7381: PPUSH
7382: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7386: LD_VAR 0 3
7390: PPUSH
7391: LD_INT 109
7393: PPUSH
7394: LD_INT 9
7396: PPUSH
7397: CALL_OW 111
// wait ( 0 0$1 ) ;
7401: LD_INT 35
7403: PPUSH
7404: CALL_OW 67
// for i := 1 to 2 do
7408: LD_ADDR_VAR 0 2
7412: PUSH
7413: DOUBLE
7414: LD_INT 1
7416: DEC
7417: ST_TO_ADDR
7418: LD_INT 2
7420: PUSH
7421: FOR_TO
7422: IFFALSE 7486
// begin PrepareHuman ( false , 1 , 2 ) ;
7424: LD_INT 0
7426: PPUSH
7427: LD_INT 1
7429: PPUSH
7430: LD_INT 2
7432: PPUSH
7433: CALL_OW 380
// un := CreateHuman ;
7437: LD_ADDR_VAR 0 3
7441: PUSH
7442: CALL_OW 44
7446: ST_TO_ADDR
// tmp := tmp union un ;
7447: LD_ADDR_VAR 0 4
7451: PUSH
7452: LD_VAR 0 4
7456: PUSH
7457: LD_VAR 0 3
7461: UNION
7462: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7463: LD_VAR 0 3
7467: PPUSH
7468: LD_INT 105
7470: PPUSH
7471: LD_INT 2
7473: PPUSH
7474: LD_INT 2
7476: PPUSH
7477: LD_INT 0
7479: PPUSH
7480: CALL_OW 50
// end ;
7484: GO 7421
7486: POP
7487: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7488: LD_VAR 0 4
7492: PPUSH
7493: LD_INT 26
7495: PPUSH
7496: LD_INT 35
7498: PPUSH
7499: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7503: LD_INT 35
7505: PPUSH
7506: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7510: LD_VAR 0 4
7514: PPUSH
7515: LD_INT 50
7517: PUSH
7518: EMPTY
7519: LIST
7520: PPUSH
7521: CALL_OW 72
7525: NOT
7526: IFFALSE 7530
// exit ;
7528: GO 7657
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7530: LD_VAR 0 4
7534: PPUSH
7535: LD_INT 91
7537: PUSH
7538: LD_INT 64
7540: PUSH
7541: LD_INT 12
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: LIST
7548: PPUSH
7549: CALL_OW 72
7553: PUSH
7554: LD_VAR 0 4
7558: EQUAL
7559: IFFALSE 7503
// omicronSquad := omicronSquad union tmp ;
7561: LD_ADDR_EXP 52
7565: PUSH
7566: LD_EXP 52
7570: PUSH
7571: LD_VAR 0 4
7575: UNION
7576: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7577: LD_ADDR_VAR 0 2
7581: PUSH
7582: LD_VAR 0 4
7586: PPUSH
7587: LD_INT 25
7589: PUSH
7590: LD_INT 1
7592: PUSH
7593: EMPTY
7594: LIST
7595: LIST
7596: PPUSH
7597: CALL_OW 72
7601: PUSH
7602: FOR_IN
7603: IFFALSE 7655
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7605: LD_VAR 0 2
7609: PPUSH
7610: LD_INT 22
7612: PUSH
7613: LD_INT 4
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: PUSH
7620: LD_INT 30
7622: PUSH
7623: LD_INT 4
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PPUSH
7634: CALL_OW 69
7638: PPUSH
7639: LD_VAR 0 2
7643: PPUSH
7644: CALL_OW 74
7648: PPUSH
7649: CALL_OW 120
7653: GO 7602
7655: POP
7656: POP
// end ;
7657: LD_VAR 0 1
7661: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7662: LD_EXP 13
7666: NOT
7667: IFFALSE 8248
7669: GO 7671
7671: DISABLE
7672: LD_INT 0
7674: PPUSH
7675: PPUSH
7676: PPUSH
7677: PPUSH
// begin enable ;
7678: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7679: LD_ADDR_VAR 0 2
7683: PUSH
7684: LD_INT 22
7686: PUSH
7687: LD_INT 4
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: PUSH
7694: LD_INT 21
7696: PUSH
7697: LD_INT 3
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: PUSH
7704: LD_INT 3
7706: PUSH
7707: LD_INT 24
7709: PUSH
7710: LD_INT 1000
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: LIST
7725: PPUSH
7726: CALL_OW 69
7730: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7731: LD_ADDR_VAR 0 3
7735: PUSH
7736: LD_EXP 52
7740: PPUSH
7741: LD_INT 25
7743: PUSH
7744: LD_INT 2
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PPUSH
7751: CALL_OW 72
7755: ST_TO_ADDR
// if filter and tmp then
7756: LD_VAR 0 2
7760: IFFALSE 7768
7762: PUSH
7763: LD_VAR 0 3
7767: AND
7768: IFFALSE 7841
// begin for i in tmp do
7770: LD_ADDR_VAR 0 1
7774: PUSH
7775: LD_VAR 0 3
7779: PUSH
7780: FOR_IN
7781: IFFALSE 7837
// if IsInUnit ( i ) then
7783: LD_VAR 0 1
7787: PPUSH
7788: CALL_OW 310
7792: IFFALSE 7805
// ComExitBuilding ( i ) else
7794: LD_VAR 0 1
7798: PPUSH
7799: CALL_OW 122
7803: GO 7835
// if not HasTask ( i ) then
7805: LD_VAR 0 1
7809: PPUSH
7810: CALL_OW 314
7814: NOT
7815: IFFALSE 7835
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7817: LD_VAR 0 1
7821: PPUSH
7822: LD_VAR 0 2
7826: PUSH
7827: LD_INT 1
7829: ARRAY
7830: PPUSH
7831: CALL_OW 130
7835: GO 7780
7837: POP
7838: POP
// end else
7839: GO 7912
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7841: LD_VAR 0 3
7845: PPUSH
7846: LD_INT 3
7848: PUSH
7849: LD_INT 54
7851: PUSH
7852: EMPTY
7853: LIST
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PPUSH
7859: CALL_OW 72
7863: IFFALSE 7912
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7865: LD_ADDR_VAR 0 1
7869: PUSH
7870: LD_VAR 0 3
7874: PPUSH
7875: LD_INT 3
7877: PUSH
7878: LD_INT 54
7880: PUSH
7881: EMPTY
7882: LIST
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: PPUSH
7888: CALL_OW 72
7892: PUSH
7893: FOR_IN
7894: IFFALSE 7910
// ComEnterUnit ( i , omikron ) ;
7896: LD_VAR 0 1
7900: PPUSH
7901: LD_INT 64
7903: PPUSH
7904: CALL_OW 120
7908: GO 7893
7910: POP
7911: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7912: LD_ADDR_VAR 0 2
7916: PUSH
7917: LD_EXP 52
7921: PPUSH
7922: LD_INT 21
7924: PUSH
7925: LD_INT 2
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PPUSH
7932: CALL_OW 72
7936: ST_TO_ADDR
// if not filter then
7937: LD_VAR 0 2
7941: NOT
7942: IFFALSE 7946
// exit ;
7944: GO 8248
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7946: LD_ADDR_VAR 0 4
7950: PUSH
7951: LD_INT 13
7953: PPUSH
7954: LD_INT 81
7956: PUSH
7957: LD_INT 4
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: PPUSH
7964: CALL_OW 70
7968: ST_TO_ADDR
// if enemy then
7969: LD_VAR 0 4
7973: IFFALSE 8248
// begin for i in filter do
7975: LD_ADDR_VAR 0 1
7979: PUSH
7980: LD_VAR 0 2
7984: PUSH
7985: FOR_IN
7986: IFFALSE 8246
// begin tmp := IsDrivenBy ( i ) ;
7988: LD_ADDR_VAR 0 3
7992: PUSH
7993: LD_VAR 0 1
7997: PPUSH
7998: CALL_OW 311
8002: ST_TO_ADDR
// if not tmp then
8003: LD_VAR 0 3
8007: NOT
8008: IFFALSE 8012
// continue ;
8010: GO 7985
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
8012: LD_VAR 0 1
8016: PPUSH
8017: CALL_OW 256
8021: PUSH
8022: LD_INT 600
8024: GREATEREQUAL
8025: IFFALSE 8042
8027: PUSH
8028: LD_VAR 0 1
8032: PPUSH
8033: CALL_OW 110
8037: PUSH
8038: LD_INT 1
8040: NONEQUAL
8041: AND
8042: IFFALSE 8068
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8044: LD_VAR 0 1
8048: PPUSH
8049: LD_VAR 0 4
8053: PPUSH
8054: LD_VAR 0 1
8058: PPUSH
8059: CALL_OW 74
8063: PPUSH
8064: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
8068: LD_VAR 0 1
8072: PPUSH
8073: CALL_OW 256
8077: PUSH
8078: LD_INT 600
8080: LESS
8081: IFFALSE 8098
8083: PUSH
8084: LD_VAR 0 1
8088: PPUSH
8089: CALL_OW 110
8093: PUSH
8094: LD_INT 1
8096: NONEQUAL
8097: AND
8098: IFFALSE 8127
// begin SetTag ( i , 1 ) ;
8100: LD_VAR 0 1
8104: PPUSH
8105: LD_INT 1
8107: PPUSH
8108: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
8112: LD_VAR 0 1
8116: PPUSH
8117: LD_INT 27
8119: PPUSH
8120: LD_INT 35
8122: PPUSH
8123: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
8127: LD_VAR 0 1
8131: PPUSH
8132: CALL_OW 110
8136: PUSH
8137: LD_INT 1
8139: EQUAL
8140: IFFALSE 8163
8142: PUSH
8143: LD_VAR 0 1
8147: PPUSH
8148: LD_INT 27
8150: PPUSH
8151: LD_INT 35
8153: PPUSH
8154: CALL_OW 297
8158: PUSH
8159: LD_INT 6
8161: LESS
8162: AND
8163: IFFALSE 8171
8165: PUSH
8166: LD_VAR 0 3
8170: AND
8171: IFFALSE 8244
// begin ComExitVehicle ( tmp ) ;
8173: LD_VAR 0 3
8177: PPUSH
8178: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8182: LD_VAR 0 3
8186: PPUSH
8187: LD_VAR 0 1
8191: PPUSH
8192: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8196: LD_INT 35
8198: PPUSH
8199: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8203: LD_VAR 0 1
8207: PPUSH
8208: CALL_OW 256
8212: PUSH
8213: LD_INT 1000
8215: EQUAL
8216: IFFALSE 8196
// ComEnterUnit ( tmp , i ) ;
8218: LD_VAR 0 3
8222: PPUSH
8223: LD_VAR 0 1
8227: PPUSH
8228: CALL_OW 120
// SetTag ( i , 0 ) ;
8232: LD_VAR 0 1
8236: PPUSH
8237: LD_INT 0
8239: PPUSH
8240: CALL_OW 109
// end ; end ;
8244: GO 7985
8246: POP
8247: POP
// end ; end ;
8248: PPOPN 4
8250: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
8251: LD_EXP 13
8255: IFFALSE 8399
8257: GO 8259
8259: DISABLE
8260: LD_INT 0
8262: PPUSH
8263: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
8264: LD_ADDR_VAR 0 2
8268: PUSH
8269: LD_EXP 52
8273: PPUSH
8274: LD_INT 21
8276: PUSH
8277: LD_INT 1
8279: PUSH
8280: EMPTY
8281: LIST
8282: LIST
8283: PUSH
8284: LD_INT 50
8286: PUSH
8287: EMPTY
8288: LIST
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: PPUSH
8294: CALL_OW 72
8298: ST_TO_ADDR
// if not tmp then
8299: LD_VAR 0 2
8303: NOT
8304: IFFALSE 8308
// exit ;
8306: GO 8399
// repeat wait ( 0 0$1 ) ;
8308: LD_INT 35
8310: PPUSH
8311: CALL_OW 67
// for i in tmp do
8315: LD_ADDR_VAR 0 1
8319: PUSH
8320: LD_VAR 0 2
8324: PUSH
8325: FOR_IN
8326: IFFALSE 8390
// begin ComExit ( i ) ;
8328: LD_VAR 0 1
8332: PPUSH
8333: CALL 79387 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
8337: LD_VAR 0 1
8341: PPUSH
8342: LD_INT 14
8344: PPUSH
8345: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
8349: LD_VAR 0 1
8353: PPUSH
8354: LD_INT 14
8356: PPUSH
8357: CALL_OW 308
8361: IFFALSE 8388
// begin tmp := tmp diff i ;
8363: LD_ADDR_VAR 0 2
8367: PUSH
8368: LD_VAR 0 2
8372: PUSH
8373: LD_VAR 0 1
8377: DIFF
8378: ST_TO_ADDR
// RemoveUnit ( i ) ;
8379: LD_VAR 0 1
8383: PPUSH
8384: CALL_OW 64
// end ; end ;
8388: GO 8325
8390: POP
8391: POP
// until not tmp ;
8392: LD_VAR 0 2
8396: NOT
8397: IFFALSE 8308
// end ; end_of_file
8399: PPOPN 2
8401: END
// export function Action ; var i , un , veh , tmp ; begin
8402: LD_INT 0
8404: PPUSH
8405: PPUSH
8406: PPUSH
8407: PPUSH
8408: PPUSH
// InGameOn ;
8409: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8413: LD_INT 179
8415: PPUSH
8416: LD_INT 5
8418: PPUSH
8419: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8423: LD_ADDR_VAR 0 4
8427: PUSH
8428: LD_INT 2
8430: PPUSH
8431: LD_INT 2
8433: PPUSH
8434: LD_INT 12
8436: PPUSH
8437: LD_INT 1
8439: PPUSH
8440: LD_INT 1
8442: PPUSH
8443: LD_INT 24
8445: PPUSH
8446: LD_INT 33
8448: PPUSH
8449: CALL 386 0 7
8453: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8454: LD_VAR 0 4
8458: PPUSH
8459: LD_INT 2
8461: PPUSH
8462: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8466: LD_VAR 0 4
8470: PPUSH
8471: LD_INT 178
8473: PPUSH
8474: LD_INT 2
8476: PPUSH
8477: LD_INT 0
8479: PPUSH
8480: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8484: LD_EXP 26
8488: PPUSH
8489: LD_VAR 0 4
8493: PPUSH
8494: CALL_OW 52
// if Kamil then
8498: LD_EXP 30
8502: IFFALSE 8537
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8504: LD_EXP 30
8508: PPUSH
8509: LD_INT 207
8511: PPUSH
8512: LD_INT 37
8514: PPUSH
8515: LD_INT 0
8517: PPUSH
8518: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8522: LD_EXP 30
8526: PPUSH
8527: LD_INT 211
8529: PPUSH
8530: LD_INT 38
8532: PPUSH
8533: CALL_OW 118
// end ; if Sophia then
8537: LD_EXP 32
8541: IFFALSE 8576
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8543: LD_EXP 32
8547: PPUSH
8548: LD_INT 209
8550: PPUSH
8551: LD_INT 40
8553: PPUSH
8554: LD_INT 0
8556: PPUSH
8557: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8561: LD_EXP 32
8565: PPUSH
8566: LD_INT 211
8568: PPUSH
8569: LD_INT 38
8571: PPUSH
8572: CALL_OW 118
// end ; if Givi then
8576: LD_EXP 27
8580: IFFALSE 8615
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8582: LD_EXP 27
8586: PPUSH
8587: LD_INT 201
8589: PPUSH
8590: LD_INT 34
8592: PPUSH
8593: LD_INT 0
8595: PPUSH
8596: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8600: LD_EXP 27
8604: PPUSH
8605: LD_INT 206
8607: PPUSH
8608: LD_INT 36
8610: PPUSH
8611: CALL_OW 118
// end ; if Ibrahim then
8615: LD_EXP 29
8619: IFFALSE 8654
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8621: LD_EXP 29
8625: PPUSH
8626: LD_INT 202
8628: PPUSH
8629: LD_INT 39
8631: PPUSH
8632: LD_INT 0
8634: PPUSH
8635: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8639: LD_EXP 29
8643: PPUSH
8644: LD_INT 206
8646: PPUSH
8647: LD_INT 36
8649: PPUSH
8650: CALL_OW 118
// end ; if Markov then
8654: LD_EXP 33
8658: IFFALSE 8745
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8660: LD_ADDR_VAR 0 4
8664: PUSH
8665: LD_INT 2
8667: PPUSH
8668: LD_INT 2
8670: PPUSH
8671: LD_INT 13
8673: PPUSH
8674: LD_INT 1
8676: PPUSH
8677: LD_INT 1
8679: PPUSH
8680: LD_INT 25
8682: PPUSH
8683: LD_INT 80
8685: PUSH
8686: LD_INT 20
8688: PUSH
8689: LD_OWVAR 67
8693: MUL
8694: MINUS
8695: PPUSH
8696: CALL 386 0 7
8700: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8701: LD_VAR 0 4
8705: PPUSH
8706: LD_INT 2
8708: PPUSH
8709: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8713: LD_VAR 0 4
8717: PPUSH
8718: LD_INT 197
8720: PPUSH
8721: LD_INT 35
8723: PPUSH
8724: LD_INT 0
8726: PPUSH
8727: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8731: LD_EXP 33
8735: PPUSH
8736: LD_VAR 0 4
8740: PPUSH
8741: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8745: LD_ADDR_VAR 0 5
8749: PUSH
8750: LD_EXP 31
8754: PUSH
8755: LD_EXP 38
8759: UNION
8760: ST_TO_ADDR
// for i in tmp do
8761: LD_ADDR_VAR 0 2
8765: PUSH
8766: LD_VAR 0 5
8770: PUSH
8771: FOR_IN
8772: IFFALSE 8806
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8774: LD_VAR 0 2
8778: PPUSH
8779: LD_INT 203
8781: PPUSH
8782: LD_INT 41
8784: PPUSH
8785: LD_INT 6
8787: PPUSH
8788: LD_INT 0
8790: PPUSH
8791: CALL_OW 50
// ComHold ( i ) ;
8795: LD_VAR 0 2
8799: PPUSH
8800: CALL_OW 140
// end ;
8804: GO 8771
8806: POP
8807: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8808: LD_INT 22
8810: PUSH
8811: LD_INT 2
8813: PUSH
8814: EMPTY
8815: LIST
8816: LIST
8817: PUSH
8818: LD_INT 25
8820: PUSH
8821: LD_INT 2
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: PPUSH
8832: CALL_OW 69
8836: NOT
8837: IFFALSE 8851
// SetClass ( Heike , 2 ) ;
8839: LD_EXP 26
8843: PPUSH
8844: LD_INT 2
8846: PPUSH
8847: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8851: LD_EXP 26
8855: PPUSH
8856: LD_INT 183
8858: PPUSH
8859: LD_INT 12
8861: PPUSH
8862: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8866: LD_EXP 26
8870: PPUSH
8871: LD_INT 188
8873: PPUSH
8874: LD_INT 20
8876: PPUSH
8877: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8881: LD_EXP 26
8885: PPUSH
8886: LD_INT 191
8888: PPUSH
8889: LD_INT 25
8891: PPUSH
8892: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8896: LD_EXP 26
8900: PPUSH
8901: LD_INT 203
8903: PPUSH
8904: LD_INT 29
8906: PPUSH
8907: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8911: LD_EXP 26
8915: PPUSH
8916: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8920: LD_INT 35
8922: PPUSH
8923: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8927: LD_EXP 26
8931: PPUSH
8932: CALL_OW 310
8936: NOT
8937: IFFALSE 8920
// CenterOnUnits ( Heike ) ;
8939: LD_EXP 26
8943: PPUSH
8944: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8948: LD_ADDR_VAR 0 5
8952: PUSH
8953: LD_INT 22
8955: PUSH
8956: LD_INT 2
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: PUSH
8963: LD_INT 21
8965: PUSH
8966: LD_INT 1
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: PPUSH
8977: CALL_OW 69
8981: PUSH
8982: LD_EXP 26
8986: PUSH
8987: LD_EXP 33
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: DIFF
8996: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8997: LD_VAR 0 5
9001: PPUSH
9002: LD_EXP 26
9006: PPUSH
9007: CALL_OW 119
// if Givi then
9011: LD_EXP 27
9015: IFFALSE 9033
// ComTurnUnit ( Heike , Givi ) else
9017: LD_EXP 26
9021: PPUSH
9022: LD_EXP 27
9026: PPUSH
9027: CALL_OW 119
9031: GO 9051
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
9033: LD_EXP 26
9037: PPUSH
9038: LD_VAR 0 5
9042: PUSH
9043: LD_INT 1
9045: ARRAY
9046: PPUSH
9047: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
9051: LD_EXP 26
9055: PPUSH
9056: LD_STRING DH-Start-1
9058: PPUSH
9059: CALL_OW 88
// if Givi then
9063: LD_EXP 27
9067: IFFALSE 9114
// begin Say ( Givi , DG-Start-2 ) ;
9069: LD_EXP 27
9073: PPUSH
9074: LD_STRING DG-Start-2
9076: PPUSH
9077: CALL_OW 88
// if not Mike then
9081: LD_EXP 28
9085: NOT
9086: IFFALSE 9112
// begin Say ( Givi , DG-Start-b-3 ) ;
9088: LD_EXP 27
9092: PPUSH
9093: LD_STRING DG-Start-b-3
9095: PPUSH
9096: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
9100: LD_EXP 26
9104: PPUSH
9105: LD_STRING DH-Start-b-4
9107: PPUSH
9108: CALL_OW 88
// end ; end else
9112: GO 9179
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
9114: LD_EXP 38
9118: PPUSH
9119: LD_INT 26
9121: PUSH
9122: LD_INT 1
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: PPUSH
9129: CALL_OW 72
9133: PUSH
9134: LD_INT 1
9136: ARRAY
9137: PPUSH
9138: LD_STRING DArm-Start-a-2
9140: PPUSH
9141: CALL_OW 88
9145: NOT
9146: IFFALSE 9179
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
9148: LD_EXP 38
9152: PPUSH
9153: LD_INT 26
9155: PUSH
9156: LD_INT 2
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PPUSH
9163: CALL_OW 72
9167: PUSH
9168: LD_INT 1
9170: ARRAY
9171: PPUSH
9172: LD_STRING DArf-Start-a-2
9174: PPUSH
9175: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
9179: LD_EXP 26
9183: PPUSH
9184: LD_INT 211
9186: PPUSH
9187: LD_INT 38
9189: PPUSH
9190: CALL_OW 118
// wait ( 0 0$1 ) ;
9194: LD_INT 35
9196: PPUSH
9197: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
9201: LD_EXP 26
9205: PPUSH
9206: LD_STRING DH-Start-3
9208: PPUSH
9209: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9213: LD_EXP 26
9217: PPUSH
9218: LD_STRING DH-Start-4
9220: PPUSH
9221: CALL_OW 88
// InGameOff ;
9225: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
9229: LD_STRING Prepare
9231: PPUSH
9232: CALL_OW 337
// SaveForQuickRestart ;
9236: CALL_OW 22
// wait ( 0 0$10 ) ;
9240: LD_INT 350
9242: PPUSH
9243: CALL_OW 67
// if not Aviradze then
9247: LD_EXP 36
9251: NOT
9252: IFFALSE 9256
// exit ;
9254: GO 9496
// SetDir ( Aviradze , 4 ) ;
9256: LD_EXP 36
9260: PPUSH
9261: LD_INT 4
9263: PPUSH
9264: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
9268: LD_EXP 36
9272: PPUSH
9273: LD_INT 225
9275: PPUSH
9276: LD_INT 33
9278: PPUSH
9279: LD_INT 0
9281: PPUSH
9282: CALL_OW 48
// for i := 1 to 2 do
9286: LD_ADDR_VAR 0 2
9290: PUSH
9291: DOUBLE
9292: LD_INT 1
9294: DEC
9295: ST_TO_ADDR
9296: LD_INT 2
9298: PUSH
9299: FOR_TO
9300: IFFALSE 9431
// begin uc_side := 2 ;
9302: LD_ADDR_OWVAR 20
9306: PUSH
9307: LD_INT 2
9309: ST_TO_ADDR
// uc_nation := 0 ;
9310: LD_ADDR_OWVAR 21
9314: PUSH
9315: LD_INT 0
9317: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9318: LD_INT 0
9320: PPUSH
9321: LD_INT 12
9323: PPUSH
9324: LD_INT 1
9326: PPUSH
9327: CALL_OW 380
// hc_gallery :=  ;
9331: LD_ADDR_OWVAR 33
9335: PUSH
9336: LD_STRING 
9338: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
9339: LD_ADDR_OWVAR 26
9343: PUSH
9344: LD_STRING Artudito
9346: PUSH
9347: LD_STRING Textur
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: PUSH
9354: LD_VAR 0 2
9358: ARRAY
9359: ST_TO_ADDR
// un := CreateHuman ;
9360: LD_ADDR_VAR 0 3
9364: PUSH
9365: CALL_OW 44
9369: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9370: LD_VAR 0 3
9374: PPUSH
9375: LD_INT 224
9377: PUSH
9378: LD_INT 226
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PUSH
9385: LD_VAR 0 2
9389: ARRAY
9390: PPUSH
9391: LD_INT 31
9393: PUSH
9394: LD_INT 35
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: PUSH
9401: LD_VAR 0 2
9405: ARRAY
9406: PPUSH
9407: LD_INT 0
9409: PPUSH
9410: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9414: LD_VAR 0 3
9418: PPUSH
9419: LD_INT 215
9421: PPUSH
9422: LD_INT 36
9424: PPUSH
9425: CALL_OW 111
// end ;
9429: GO 9299
9431: POP
9432: POP
// hc_name :=  ;
9433: LD_ADDR_OWVAR 26
9437: PUSH
9438: LD_STRING 
9440: ST_TO_ADDR
// InitHc ;
9441: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9445: LD_EXP 36
9449: PPUSH
9450: LD_INT 215
9452: PPUSH
9453: LD_INT 36
9455: PPUSH
9456: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
9460: LD_EXP 36
9464: PPUSH
9465: LD_STRING DA-Arrive-1
9467: PPUSH
9468: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
9472: LD_EXP 26
9476: PPUSH
9477: LD_STRING DH-Arrive-2
9479: PPUSH
9480: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
9484: LD_EXP 36
9488: PPUSH
9489: LD_STRING DA-Arrive-3
9491: PPUSH
9492: CALL_OW 88
// end ;
9496: LD_VAR 0 1
9500: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh , p , sex ;
9501: LD_EXP 3
9505: IFFALSE 11057
9507: GO 9509
9509: DISABLE
9510: LD_INT 0
9512: PPUSH
9513: PPUSH
9514: PPUSH
9515: PPUSH
9516: PPUSH
// begin DialogueOn ;
9517: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9521: LD_EXP 26
9525: PPUSH
9526: LD_STRING DH-base-1
9528: PPUSH
9529: CALL_OW 88
// if Markov then
9533: LD_EXP 33
9537: IFFALSE 9589
// begin Say ( Markov , DMar-base-2 ) ;
9539: LD_EXP 33
9543: PPUSH
9544: LD_STRING DMar-base-2
9546: PPUSH
9547: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9551: LD_EXP 33
9555: PPUSH
9556: LD_STRING DMar-base-3
9558: PPUSH
9559: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9563: LD_EXP 26
9567: PPUSH
9568: LD_STRING DH-base-4
9570: PPUSH
9571: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9575: LD_EXP 33
9579: PPUSH
9580: LD_STRING DMar-base-5
9582: PPUSH
9583: CALL_OW 88
// end else
9587: GO 9666
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9589: LD_EXP 38
9593: PPUSH
9594: LD_INT 26
9596: PUSH
9597: LD_INT 1
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: PPUSH
9604: CALL_OW 72
9608: PUSH
9609: LD_INT 1
9611: ARRAY
9612: PPUSH
9613: LD_STRING DArm-base-a-2
9615: PPUSH
9616: CALL_OW 88
9620: NOT
9621: IFFALSE 9654
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9623: LD_EXP 38
9627: PPUSH
9628: LD_INT 26
9630: PUSH
9631: LD_INT 2
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: PPUSH
9638: CALL_OW 72
9642: PUSH
9643: LD_INT 1
9645: ARRAY
9646: PPUSH
9647: LD_STRING DArf-base-a-2
9649: PPUSH
9650: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9654: LD_EXP 26
9658: PPUSH
9659: LD_STRING DH-base-a-3
9661: PPUSH
9662: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9666: LD_EXP 36
9670: PPUSH
9671: LD_STRING DA-base-6
9673: PPUSH
9674: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9678: LD_EXP 36
9682: PPUSH
9683: LD_STRING DA-base-7
9685: PPUSH
9686: CALL_OW 88
// DialogueOff ;
9690: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9694: LD_STRING Flamethrower
9696: PPUSH
9697: CALL_OW 337
// wait ( 2 2$00 ) ;
9701: LD_INT 4200
9703: PPUSH
9704: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9708: LD_EXP 35
9712: PUSH
9713: LD_EXP 28
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: PPUSH
9722: LD_INT 203
9724: PPUSH
9725: LD_INT 37
9727: PPUSH
9728: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9732: LD_INT 22
9734: PUSH
9735: LD_INT 2
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: PUSH
9742: LD_INT 92
9744: PUSH
9745: LD_INT 203
9747: PUSH
9748: LD_INT 37
9750: PUSH
9751: LD_INT 10
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: PPUSH
9764: CALL_OW 69
9768: NOT
9769: IFFALSE 9809
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9771: LD_EXP 35
9775: PUSH
9776: LD_EXP 28
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PPUSH
9785: LD_EXP 26
9789: PPUSH
9790: CALL_OW 250
9794: PPUSH
9795: LD_EXP 26
9799: PPUSH
9800: CALL_OW 251
9804: PPUSH
9805: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9809: LD_INT 35
9811: PPUSH
9812: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9816: LD_INT 2
9818: PPUSH
9819: LD_EXP 35
9823: PPUSH
9824: CALL_OW 292
9828: IFFALSE 9906
9830: PUSH
9831: LD_EXP 35
9835: PPUSH
9836: LD_EXP 26
9840: PPUSH
9841: CALL_OW 296
9845: PUSH
9846: LD_INT 8
9848: LESS
9849: IFTRUE 9905
9851: PUSH
9852: LD_EXP 35
9856: PPUSH
9857: LD_INT 22
9859: PUSH
9860: LD_INT 2
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 21
9869: PUSH
9870: LD_INT 3
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: PPUSH
9881: CALL_OW 69
9885: PPUSH
9886: LD_EXP 35
9890: PPUSH
9891: CALL_OW 74
9895: PPUSH
9896: CALL_OW 296
9900: PUSH
9901: LD_INT 7
9903: LESS
9904: OR
9905: AND
9906: IFFALSE 9923
9908: PUSH
9909: LD_EXP 35
9913: PPUSH
9914: LD_INT 10
9916: PPUSH
9917: CALL_OW 308
9921: NOT
9922: AND
9923: IFFALSE 9809
// InGameOn ;
9925: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9929: LD_EXP 35
9933: PPUSH
9934: CALL_OW 87
// if IsInUnit ( Heike ) then
9938: LD_EXP 26
9942: PPUSH
9943: CALL_OW 310
9947: IFFALSE 9965
// begin ComExit ( Heike ) ;
9949: LD_EXP 26
9953: PPUSH
9954: CALL 79387 0 1
// wait ( 0 0$1 ) ;
9958: LD_INT 35
9960: PPUSH
9961: CALL_OW 67
// end ; ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9965: LD_EXP 35
9969: PUSH
9970: LD_EXP 28
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: PPUSH
9979: LD_EXP 26
9983: PPUSH
9984: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9988: LD_EXP 26
9992: PPUSH
9993: LD_EXP 35
9997: PPUSH
9998: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
10002: LD_INT 22
10004: PUSH
10005: LD_INT 2
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: PUSH
10012: LD_INT 91
10014: PUSH
10015: LD_EXP 35
10019: PUSH
10020: LD_INT 10
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: LIST
10027: PUSH
10028: LD_INT 21
10030: PUSH
10031: LD_INT 3
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: LIST
10042: PPUSH
10043: CALL_OW 69
10047: IFFALSE 10073
// begin Say ( Kurt , DKs-scout-1 ) ;
10049: LD_EXP 35
10053: PPUSH
10054: LD_STRING DKs-scout-1
10056: PPUSH
10057: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
10061: LD_EXP 26
10065: PPUSH
10066: LD_STRING DH-scout-2
10068: PPUSH
10069: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
10073: LD_EXP 26
10077: PPUSH
10078: CALL_OW 85
// repeat wait ( 0 0$1 ) ;
10082: LD_INT 35
10084: PPUSH
10085: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
10089: LD_EXP 26
10093: PPUSH
10094: LD_EXP 35
10098: PPUSH
10099: CALL_OW 112
// until GetDistUnits ( Heike , Kurt ) < 6 ;
10103: LD_EXP 26
10107: PPUSH
10108: LD_EXP 35
10112: PPUSH
10113: CALL_OW 296
10117: PUSH
10118: LD_INT 6
10120: LESS
10121: IFFALSE 10082
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
10123: LD_EXP 35
10127: PUSH
10128: LD_EXP 28
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: PPUSH
10137: LD_EXP 26
10141: PPUSH
10142: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
10146: LD_EXP 35
10150: PPUSH
10151: LD_STRING DKs-scout-3
10153: PPUSH
10154: CALL_OW 88
// if Kaia and GetDistUnits ( Kaia , Kurt ) < 15 then
10158: LD_EXP 31
10162: IFFALSE 10184
10164: PUSH
10165: LD_EXP 31
10169: PPUSH
10170: LD_EXP 35
10174: PPUSH
10175: CALL_OW 296
10179: PUSH
10180: LD_INT 15
10182: LESS
10183: AND
10184: IFFALSE 10409
// begin p := 1 ;
10186: LD_ADDR_VAR 0 4
10190: PUSH
10191: LD_INT 1
10193: ST_TO_ADDR
// if IsInUnit ( Kaia ) then
10194: LD_EXP 31
10198: PPUSH
10199: CALL_OW 310
10203: IFFALSE 10214
// ComExit ( Kaia ) ;
10205: LD_EXP 31
10209: PPUSH
10210: CALL 79387 0 1
// wait ( 0 0$1 ) ;
10214: LD_INT 35
10216: PPUSH
10217: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
10221: LD_EXP 31
10225: PPUSH
10226: LD_EXP 35
10230: PPUSH
10231: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
10235: LD_INT 35
10237: PPUSH
10238: CALL_OW 67
// p := Inc ( p ) ;
10242: LD_ADDR_VAR 0 4
10246: PUSH
10247: LD_VAR 0 4
10251: PPUSH
10252: CALL 80362 0 1
10256: ST_TO_ADDR
// until GetDistUnits ( Kaia , Kurt ) < 6 or p > 12 ;
10257: LD_EXP 31
10261: PPUSH
10262: LD_EXP 35
10266: PPUSH
10267: CALL_OW 296
10271: PUSH
10272: LD_INT 6
10274: LESS
10275: IFTRUE 10287
10277: PUSH
10278: LD_VAR 0 4
10282: PUSH
10283: LD_INT 12
10285: GREATER
10286: OR
10287: IFFALSE 10235
// ComTurnUnit ( Kaia , Kurt ) ;
10289: LD_EXP 31
10293: PPUSH
10294: LD_EXP 35
10298: PPUSH
10299: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
10303: LD_EXP 31
10307: PPUSH
10308: LD_STRING DK-scout-4
10310: PPUSH
10311: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
10315: LD_EXP 35
10319: PPUSH
10320: LD_EXP 31
10324: PPUSH
10325: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
10329: LD_EXP 35
10333: PPUSH
10334: LD_STRING DKs-scout-5
10336: PPUSH
10337: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
10341: LD_EXP 31
10345: PPUSH
10346: LD_STRING DK-scout-6
10348: PPUSH
10349: CALL_OW 88
// if Mike then
10353: LD_EXP 28
10357: IFFALSE 10409
// begin Say ( Mike , DM-scout-7 ) ;
10359: LD_EXP 28
10363: PPUSH
10364: LD_STRING DM-scout-7
10366: PPUSH
10367: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
10371: LD_EXP 31
10375: PPUSH
10376: LD_EXP 28
10380: PPUSH
10381: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
10385: LD_EXP 31
10389: PPUSH
10390: LD_STRING DK-scout-8
10392: PPUSH
10393: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
10397: LD_EXP 28
10401: PPUSH
10402: LD_STRING DM-scout-9
10404: PPUSH
10405: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
10409: LD_INT 184
10411: PPUSH
10412: LD_INT 100
10414: PPUSH
10415: LD_INT 2
10417: PPUSH
10418: LD_INT 12
10420: NEG
10421: PPUSH
10422: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
10426: LD_INT 184
10428: PPUSH
10429: LD_INT 100
10431: PPUSH
10432: LD_INT 2
10434: PPUSH
10435: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
10439: LD_INT 184
10441: PPUSH
10442: LD_INT 100
10444: PPUSH
10445: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
10449: LD_EXP 35
10453: PPUSH
10454: LD_STRING DKs-scout-10
10456: PPUSH
10457: CALL_OW 88
// wait ( 0 0$1 ) ;
10461: LD_INT 35
10463: PPUSH
10464: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
10468: LD_INT 144
10470: PPUSH
10471: LD_INT 65
10473: PPUSH
10474: LD_INT 2
10476: PPUSH
10477: LD_INT 12
10479: NEG
10480: PPUSH
10481: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
10485: LD_INT 144
10487: PPUSH
10488: LD_INT 65
10490: PPUSH
10491: LD_INT 2
10493: PPUSH
10494: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
10498: LD_INT 144
10500: PPUSH
10501: LD_INT 65
10503: PPUSH
10504: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
10508: LD_EXP 35
10512: PPUSH
10513: LD_STRING DKs-scout-11
10515: PPUSH
10516: CALL_OW 88
// Say ( Kurt , DKs-scout-12 ) ;
10520: LD_EXP 35
10524: PPUSH
10525: LD_STRING DKs-scout-12
10527: PPUSH
10528: CALL_OW 88
// wait ( 0 0$1 ) ;
10532: LD_INT 35
10534: PPUSH
10535: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
10539: LD_EXP 35
10543: PPUSH
10544: CALL_OW 87
// if Mike and not Givi then
10548: LD_EXP 28
10552: IFFALSE 10561
10554: PUSH
10555: LD_EXP 27
10559: NOT
10560: AND
10561: IFFALSE 10587
// begin Say ( Mike , DM-scout-a-1 ) ;
10563: LD_EXP 28
10567: PPUSH
10568: LD_STRING DM-scout-a-1
10570: PPUSH
10571: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
10575: LD_EXP 26
10579: PPUSH
10580: LD_STRING DH-scout-a-2
10582: PPUSH
10583: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10587: LD_EXP 35
10591: PUSH
10592: LD_EXP 28
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: PPUSH
10601: LD_INT 2
10603: PPUSH
10604: CALL_OW 235
// ComStop ( [ Kurt , Mike ] ) ;
10608: LD_EXP 35
10612: PUSH
10613: LD_EXP 28
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: PPUSH
10622: CALL_OW 141
// InGameOff ;
10626: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
10630: LD_STRING Hill
10632: PPUSH
10633: CALL_OW 337
// Hint ( BunkerHill ) ;
10637: LD_STRING BunkerHill
10639: PPUSH
10640: CALL_OW 339
// SetAreaMapShow ( bunkerHillArea , 1 ) ;
10644: LD_INT 22
10646: PPUSH
10647: LD_INT 1
10649: PPUSH
10650: CALL_OW 424
// SetAreaMapShow ( dontGoArea , 1 ) ;
10654: LD_INT 20
10656: PPUSH
10657: LD_INT 1
10659: PPUSH
10660: CALL_OW 424
// allowToPatrol := true ;
10664: LD_ADDR_EXP 12
10668: PUSH
10669: LD_INT 1
10671: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10672: LD_INT 3150
10674: PPUSH
10675: CALL_OW 67
// InitHc ;
10679: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
10683: LD_ADDR_VAR 0 1
10687: PUSH
10688: DOUBLE
10689: LD_INT 1
10691: DEC
10692: ST_TO_ADDR
10693: LD_INT 3
10695: PUSH
10696: LD_INT 3
10698: PUSH
10699: LD_INT 2
10701: PUSH
10702: LD_INT 2
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: PUSH
10711: LD_OWVAR 67
10715: ARRAY
10716: PUSH
10717: FOR_TO
10718: IFFALSE 11055
// begin uc_side := 2 ;
10720: LD_ADDR_OWVAR 20
10724: PUSH
10725: LD_INT 2
10727: ST_TO_ADDR
// uc_nation := 2 ;
10728: LD_ADDR_OWVAR 21
10732: PUSH
10733: LD_INT 2
10735: ST_TO_ADDR
// if i = 1 then
10736: LD_VAR 0 1
10740: PUSH
10741: LD_INT 1
10743: EQUAL
10744: IFFALSE 10756
// sex := sex_male else
10746: LD_ADDR_VAR 0 5
10750: PUSH
10751: LD_INT 1
10753: ST_TO_ADDR
10754: GO 10764
// sex := false ;
10756: LD_ADDR_VAR 0 5
10760: PUSH
10761: LD_INT 0
10763: ST_TO_ADDR
// PrepareHuman ( sex , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 , 2 ] [ Difficulty ] ) ;
10764: LD_VAR 0 5
10768: PPUSH
10769: LD_INT 1
10771: PUSH
10772: LD_INT 3
10774: PUSH
10775: LD_INT 1
10777: PUSH
10778: EMPTY
10779: LIST
10780: LIST
10781: LIST
10782: PUSH
10783: LD_VAR 0 1
10787: PUSH
10788: LD_INT 3
10790: MOD
10791: PUSH
10792: LD_INT 1
10794: PLUS
10795: ARRAY
10796: PPUSH
10797: LD_INT 3
10799: PUSH
10800: LD_INT 2
10802: PUSH
10803: LD_INT 2
10805: PUSH
10806: LD_INT 2
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: PUSH
10815: LD_OWVAR 67
10819: ARRAY
10820: PPUSH
10821: CALL_OW 380
// un := CreateHuman ;
10825: LD_ADDR_VAR 0 2
10829: PUSH
10830: CALL_OW 44
10834: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10835: LD_ADDR_EXP 38
10839: PUSH
10840: LD_EXP 38
10844: PUSH
10845: LD_VAR 0 2
10849: UNION
10850: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10851: LD_INT 2
10853: PPUSH
10854: LD_INT 2
10856: PPUSH
10857: LD_INT 13
10859: PPUSH
10860: LD_INT 2
10862: PUSH
10863: LD_INT 1
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: PUSH
10870: LD_VAR 0 1
10874: PUSH
10875: LD_INT 2
10877: MOD
10878: PUSH
10879: LD_INT 1
10881: PLUS
10882: ARRAY
10883: PPUSH
10884: LD_INT 1
10886: PPUSH
10887: LD_INT 27
10889: PUSH
10890: LD_INT 25
10892: PUSH
10893: LD_INT 27
10895: PUSH
10896: LD_INT 23
10898: PUSH
10899: LD_INT 23
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: PUSH
10909: LD_OWVAR 67
10913: PUSH
10914: LD_INT 0
10916: PPUSH
10917: LD_INT 1
10919: PPUSH
10920: CALL_OW 12
10924: PLUS
10925: ARRAY
10926: PPUSH
10927: LD_INT 77
10929: PPUSH
10930: CALL 386 0 7
// veh := CreateVehicle ;
10934: LD_ADDR_VAR 0 3
10938: PUSH
10939: CALL_OW 45
10943: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10944: LD_VAR 0 3
10948: PPUSH
10949: LD_INT 2
10951: PPUSH
10952: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
10956: LD_INT 35
10958: PPUSH
10959: CALL_OW 67
// until PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10963: LD_VAR 0 3
10967: PPUSH
10968: LD_INT 178
10970: PPUSH
10971: LD_INT 2
10973: PPUSH
10974: LD_INT 2
10976: PPUSH
10977: LD_INT 0
10979: PPUSH
10980: CALL_OW 50
10984: IFFALSE 10956
// PlaceHumanInUnit ( un , veh ) ;
10986: LD_VAR 0 2
10990: PPUSH
10991: LD_VAR 0 3
10995: PPUSH
10996: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
11000: LD_VAR 0 2
11004: PPUSH
11005: LD_INT 183
11007: PPUSH
11008: LD_INT 11
11010: PPUSH
11011: CALL_OW 111
// if i = 1 then
11015: LD_VAR 0 1
11019: PUSH
11020: LD_INT 1
11022: EQUAL
11023: IFFALSE 11046
// begin CenterOnUnits ( un ) ;
11025: LD_VAR 0 2
11029: PPUSH
11030: CALL_OW 85
// Say ( un , DArSol-Arrival-1 ) ;
11034: LD_VAR 0 2
11038: PPUSH
11039: LD_STRING DArSol-Arrival-1
11041: PPUSH
11042: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
11046: LD_INT 70
11048: PPUSH
11049: CALL_OW 67
// end ;
11053: GO 10717
11055: POP
11056: POP
// end ;
11057: PPOPN 5
11059: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
11060: LD_EXP 4
11064: IFFALSE 11077
11066: PUSH
11067: LD_EXP 36
11071: PPUSH
11072: CALL_OW 302
11076: AND
11077: IFFALSE 11126
11079: GO 11081
11081: DISABLE
// begin DialogueOn ;
11082: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
11086: LD_EXP 36
11090: PPUSH
11091: LD_STRING DA-lab-1
11093: PPUSH
11094: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
11098: LD_EXP 36
11102: PPUSH
11103: LD_STRING DA-lab-2
11105: PPUSH
11106: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
11110: LD_EXP 26
11114: PPUSH
11115: LD_STRING DH-lab-3
11117: PPUSH
11118: CALL_OW 88
// DialogueOff ;
11122: CALL_OW 7
// end ;
11126: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
11127: LD_INT 17
11129: PPUSH
11130: LD_INT 2
11132: PPUSH
11133: CALL_OW 321
11137: PUSH
11138: LD_INT 2
11140: EQUAL
11141: IFFALSE 11273
11143: GO 11145
11145: DISABLE
11146: LD_INT 0
11148: PPUSH
// begin DialogueOn ;
11149: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
11153: LD_EXP 36
11157: PPUSH
11158: LD_STRING DA-Cam-1
11160: PPUSH
11161: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
11165: LD_EXP 36
11169: PPUSH
11170: LD_STRING DA-Cam-2
11172: PPUSH
11173: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
11177: LD_EXP 36
11181: PPUSH
11182: LD_STRING DA-Cam-3
11184: PPUSH
11185: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
11189: LD_EXP 26
11193: PPUSH
11194: LD_STRING DH-Cam-4
11196: PPUSH
11197: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
11201: LD_EXP 31
11205: PPUSH
11206: LD_STRING DK-Cam-5
11208: PPUSH
11209: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
11213: LD_EXP 31
11217: PPUSH
11218: LD_STRING DK-Cam-6
11220: PPUSH
11221: CALL_OW 88
// DialogueOff ;
11225: CALL_OW 7
// Query ( Camera ) ;
11229: LD_STRING Camera
11231: PPUSH
11232: CALL_OW 97
// hiddenCameraAllowed := true ;
11236: LD_ADDR_EXP 5
11240: PUSH
11241: LD_INT 1
11243: ST_TO_ADDR
// for i in camAreas do
11244: LD_ADDR_VAR 0 1
11248: PUSH
11249: LD_EXP 8
11253: PUSH
11254: FOR_IN
11255: IFFALSE 11271
// SetAreaMapShow ( i , 1 ) ;
11257: LD_VAR 0 1
11261: PPUSH
11262: LD_INT 1
11264: PPUSH
11265: CALL_OW 424
11269: GO 11254
11271: POP
11272: POP
// end ;
11273: PPOPN 1
11275: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
11276: LD_EXP 8
11280: NOT
11281: IFFALSE 11289
11283: PUSH
11284: LD_EXP 5
11288: AND
11289: IFFALSE 11387
11291: GO 11293
11293: DISABLE
11294: LD_INT 0
11296: PPUSH
// begin stop_talking := true ;
11297: LD_ADDR_OWVAR 56
11301: PUSH
11302: LD_INT 1
11304: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
11305: LD_ADDR_VAR 0 1
11309: PUSH
11310: LD_INT 22
11312: PUSH
11313: LD_INT 2
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: PUSH
11320: LD_INT 21
11322: PUSH
11323: LD_INT 1
11325: PUSH
11326: EMPTY
11327: LIST
11328: LIST
11329: PUSH
11330: LD_INT 23
11332: PUSH
11333: LD_INT 2
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: LIST
11344: PPUSH
11345: CALL_OW 69
11349: PUSH
11350: FOR_IN
11351: IFFALSE 11370
// AddExperience ( i , 2 , 450 ) ;
11353: LD_VAR 0 1
11357: PPUSH
11358: LD_INT 2
11360: PPUSH
11361: LD_INT 450
11363: PPUSH
11364: CALL_OW 492
11368: GO 11350
11370: POP
11371: POP
// stop_talking := false ;
11372: LD_ADDR_OWVAR 56
11376: PUSH
11377: LD_INT 0
11379: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
11380: LD_STRING ACH_CAMERA
11382: PPUSH
11383: CALL_OW 543
// end ;
11387: PPOPN 1
11389: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
11390: LD_EXP 9
11394: IFFALSE 11403
11396: PUSH
11397: LD_EXP 11
11401: NOT
11402: AND
11403: IFFALSE 11462
11405: GO 11407
11407: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
11408: LD_EXP 9
11412: PPUSH
11413: CALL_OW 250
11417: PPUSH
11418: LD_EXP 9
11422: PPUSH
11423: CALL_OW 251
11427: PPUSH
11428: LD_INT 2
11430: PPUSH
11431: LD_INT 6
11433: NEG
11434: PPUSH
11435: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
11439: LD_EXP 9
11443: PPUSH
11444: CALL_OW 87
// wait ( 0 0$1 ) ;
11448: LD_INT 35
11450: PPUSH
11451: CALL_OW 67
// YouLost ( Spotted ) ;
11455: LD_STRING Spotted
11457: PPUSH
11458: CALL_OW 104
// end ;
11462: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
11463: LD_INT 3
11465: PUSH
11466: LD_INT 6
11468: PUSH
11469: EMPTY
11470: LIST
11471: LIST
11472: PPUSH
11473: LD_INT 2
11475: PPUSH
11476: LD_EXP 48
11480: PPUSH
11481: CALL 1054 0 3
11485: IFFALSE 11518
11487: GO 11489
11489: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
11490: LD_ADDR_EXP 9
11494: PUSH
11495: LD_INT 3
11497: PUSH
11498: LD_INT 6
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PPUSH
11505: LD_INT 2
11507: PPUSH
11508: LD_EXP 48
11512: PPUSH
11513: CALL 1054 0 3
11517: ST_TO_ADDR
11518: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
11519: LD_INT 22
11521: PUSH
11522: LD_INT 6
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PUSH
11529: LD_INT 30
11531: PUSH
11532: LD_INT 32
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PUSH
11539: LD_INT 3
11541: PUSH
11542: LD_INT 24
11544: PUSH
11545: LD_INT 1000
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: LIST
11560: PPUSH
11561: CALL_OW 69
11565: IFFALSE 11626
11567: GO 11569
11569: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
11570: LD_ADDR_EXP 9
11574: PUSH
11575: LD_INT 22
11577: PUSH
11578: LD_INT 6
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PUSH
11585: LD_INT 30
11587: PUSH
11588: LD_INT 32
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: PUSH
11595: LD_INT 3
11597: PUSH
11598: LD_INT 24
11600: PUSH
11601: LD_INT 1000
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: LIST
11616: PPUSH
11617: CALL_OW 69
11621: PUSH
11622: LD_INT 1
11624: ARRAY
11625: ST_TO_ADDR
11626: END
// every 0 0$1 trigger russianAlert and FilterUnitsInArea ( kirovBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , towers , noncombat ;
11627: LD_EXP 9
11631: IFFALSE 11673
11633: PUSH
11634: LD_INT 21
11636: PPUSH
11637: LD_INT 21
11639: PUSH
11640: LD_INT 3
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: PUSH
11647: LD_INT 3
11649: PUSH
11650: LD_INT 24
11652: PUSH
11653: LD_INT 1000
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PPUSH
11668: CALL_OW 70
11672: AND
11673: IFFALSE 11912
11675: GO 11677
11677: DISABLE
11678: LD_INT 0
11680: PPUSH
11681: PPUSH
11682: PPUSH
11683: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11684: LD_ADDR_VAR 0 4
11688: PUSH
11689: LD_EXP 43
11693: PUSH
11694: LD_EXP 45
11698: PUSH
11699: LD_EXP 46
11703: UNION
11704: PPUSH
11705: LD_INT 3
11707: PUSH
11708: LD_INT 25
11710: PUSH
11711: LD_INT 1
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: PPUSH
11722: CALL_OW 72
11726: UNION
11727: ST_TO_ADDR
// for i in noncombat do
11728: LD_ADDR_VAR 0 1
11732: PUSH
11733: LD_VAR 0 4
11737: PUSH
11738: FOR_IN
11739: IFFALSE 11835
// begin if IsInUnit ( i ) then
11741: LD_VAR 0 1
11745: PPUSH
11746: CALL_OW 310
11750: IFFALSE 11761
// ComExitBuilding ( i ) ;
11752: LD_VAR 0 1
11756: PPUSH
11757: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
11761: LD_VAR 0 1
11765: PPUSH
11766: LD_INT 114
11768: PPUSH
11769: LD_INT 97
11771: PPUSH
11772: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
11776: LD_VAR 0 1
11780: PPUSH
11781: LD_INT 99
11783: PPUSH
11784: LD_INT 128
11786: PPUSH
11787: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
11791: LD_VAR 0 1
11795: PPUSH
11796: LD_INT 91
11798: PPUSH
11799: LD_INT 145
11801: PPUSH
11802: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
11806: LD_VAR 0 1
11810: PPUSH
11811: LD_INT 82
11813: PPUSH
11814: LD_INT 153
11816: PPUSH
11817: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
11821: LD_VAR 0 1
11825: PPUSH
11826: LD_INT 16
11828: PPUSH
11829: CALL_OW 173
// end ;
11833: GO 11738
11835: POP
11836: POP
// if not allowHeikeAttack then
11837: LD_EXP 11
11841: NOT
11842: IFFALSE 11846
// exit ;
11844: GO 11912
// wait ( 0 0$05 ) ;
11846: LD_INT 175
11848: PPUSH
11849: CALL_OW 67
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11853: LD_EXP 41
11857: PPUSH
11858: LD_STRING D9a-Kur-1
11860: PPUSH
11861: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11865: LD_EXP 44
11869: PPUSH
11870: LD_STRING D9a-Bur-1
11872: PPUSH
11873: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11877: LD_EXP 41
11881: PPUSH
11882: LD_STRING D9a-Kur-2
11884: PPUSH
11885: CALL_OW 94
// omicronFall := true ;
11889: LD_ADDR_EXP 13
11893: PUSH
11894: LD_INT 1
11896: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11897: LD_INT 105
11899: PPUSH
11900: CALL_OW 67
// retreatFromOmicron := true ;
11904: LD_ADDR_EXP 20
11908: PUSH
11909: LD_INT 1
11911: ST_TO_ADDR
// end ;
11912: PPOPN 4
11914: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11915: LD_INT 16
11917: PPUSH
11918: LD_INT 3
11920: PUSH
11921: LD_INT 22
11923: PUSH
11924: LD_INT 2
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: PUSH
11935: LD_INT 23
11937: PUSH
11938: LD_INT 3
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: PPUSH
11949: CALL_OW 70
11953: IFFALSE 12036
11955: GO 11957
11957: DISABLE
11958: LD_INT 0
11960: PPUSH
// begin enable ;
11961: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11962: LD_ADDR_VAR 0 1
11966: PUSH
11967: LD_INT 16
11969: PPUSH
11970: LD_INT 3
11972: PUSH
11973: LD_INT 22
11975: PUSH
11976: LD_INT 2
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: PUSH
11987: LD_INT 23
11989: PUSH
11990: LD_INT 3
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: PPUSH
12001: CALL_OW 70
12005: PUSH
12006: FOR_IN
12007: IFFALSE 12034
// begin escapeCounter := escapeCounter + 1 ;
12009: LD_ADDR_EXP 19
12013: PUSH
12014: LD_EXP 19
12018: PUSH
12019: LD_INT 1
12021: PLUS
12022: ST_TO_ADDR
// RemoveUnit ( i ) ;
12023: LD_VAR 0 1
12027: PPUSH
12028: CALL_OW 64
// end ;
12032: GO 12006
12034: POP
12035: POP
// end ;
12036: PPOPN 1
12038: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
12039: LD_OWVAR 1
12043: PUSH
12044: LD_INT 13650
12046: PUSH
12047: LD_INT 0
12049: PPUSH
12050: LD_INT 3150
12052: PPUSH
12053: CALL_OW 12
12057: PLUS
12058: GREATEREQUAL
12059: IFFALSE 12068
12061: GO 12063
12063: DISABLE
// SmallAmericanReinforcements ;
12064: CALL 7213 0 0
12068: END
// every 0 0$1 trigger tick >= [ 15 15$00 , 14 14$00 , 13 13$00 , 12 12$00 ] [ Difficulty ] do
12069: LD_OWVAR 1
12073: PUSH
12074: LD_INT 31500
12076: PUSH
12077: LD_INT 29400
12079: PUSH
12080: LD_INT 27300
12082: PUSH
12083: LD_INT 25200
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: PUSH
12092: LD_OWVAR 67
12096: ARRAY
12097: GREATEREQUAL
12098: IFFALSE 12163
12100: GO 12102
12102: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
12103: LD_EXP 49
12107: PPUSH
12108: LD_INT 21
12110: PUSH
12111: LD_INT 2
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: PPUSH
12118: CALL_OW 72
12122: PPUSH
12123: LD_INT 62
12125: PPUSH
12126: LD_INT 22
12128: PPUSH
12129: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
12133: LD_EXP 50
12137: PPUSH
12138: LD_INT 69
12140: PPUSH
12141: LD_INT 27
12143: PPUSH
12144: CALL_OW 111
// wait ( 1 1$00 ) ;
12148: LD_INT 2100
12150: PPUSH
12151: CALL_OW 67
// startAttackOnOmicron := true ;
12155: LD_ADDR_EXP 6
12159: PUSH
12160: LD_INT 1
12162: ST_TO_ADDR
// end ;
12163: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
12164: LD_EXP 22
12168: PUSH
12169: LD_INT 0
12171: EQUAL
12172: IFFALSE 14244
12174: GO 12176
12176: DISABLE
12177: LD_INT 0
12179: PPUSH
12180: PPUSH
12181: PPUSH
12182: PPUSH
12183: PPUSH
12184: PPUSH
12185: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
12186: LD_INT 5
12188: PPUSH
12189: LD_INT 2
12191: PPUSH
12192: CALL_OW 343
// PrepareOmarForces ;
12196: CALL 1658 0 0
// wait ( 0 0$03 ) ;
12200: LD_INT 105
12202: PPUSH
12203: CALL_OW 67
// allowHeikeAttack := true ;
12207: LD_ADDR_EXP 11
12211: PUSH
12212: LD_INT 1
12214: ST_TO_ADDR
// activeGrishkoAI := false ;
12215: LD_ADDR_EXP 10
12219: PUSH
12220: LD_INT 0
12222: ST_TO_ADDR
// SetAreaMapShow ( dontGoArea , 0 ) ;
12223: LD_INT 20
12225: PPUSH
12226: LD_INT 0
12228: PPUSH
12229: CALL_OW 424
// if not hillBase then
12233: LD_EXP 15
12237: NOT
12238: IFFALSE 12247
// ChangeMissionObjectives ( HillDone ) ;
12240: LD_STRING HillDone
12242: PPUSH
12243: CALL_OW 337
// CenterOnUnits ( Omar ) ;
12247: LD_EXP 34
12251: PPUSH
12252: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
12256: LD_ADDR_VAR 0 1
12260: PUSH
12261: LD_INT 22
12263: PUSH
12264: LD_INT 2
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: PUSH
12271: LD_INT 21
12273: PUSH
12274: LD_INT 1
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: PPUSH
12285: CALL_OW 69
12289: PUSH
12290: FOR_IN
12291: IFFALSE 12315
// if HasTask ( i ) then
12293: LD_VAR 0 1
12297: PPUSH
12298: CALL_OW 314
12302: IFFALSE 12313
// ComHold ( i ) ;
12304: LD_VAR 0 1
12308: PPUSH
12309: CALL_OW 140
12313: GO 12290
12315: POP
12316: POP
// DialogueOn ;
12317: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
12321: LD_EXP 34
12325: PPUSH
12326: LD_STRING DO-assault-1
12328: PPUSH
12329: CALL_OW 94
// DialogueOff ;
12333: CALL_OW 7
// game_speed := 4 ;
12337: LD_ADDR_OWVAR 65
12341: PUSH
12342: LD_INT 4
12344: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
12345: LD_ADDR_VAR 0 1
12349: PUSH
12350: LD_EXP 47
12354: PPUSH
12355: LD_INT 3
12357: PUSH
12358: LD_INT 54
12360: PUSH
12361: EMPTY
12362: LIST
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: PPUSH
12368: CALL_OW 72
12372: PUSH
12373: FOR_IN
12374: IFFALSE 12393
// ComMoveXY ( i , 226 , 114 ) ;
12376: LD_VAR 0 1
12380: PPUSH
12381: LD_INT 226
12383: PPUSH
12384: LD_INT 114
12386: PPUSH
12387: CALL_OW 111
12391: GO 12373
12393: POP
12394: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
12395: LD_EXP 42
12399: PPUSH
12400: LD_INT 22
12402: PUSH
12403: LD_INT 6
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: PUSH
12410: LD_INT 30
12412: PUSH
12413: LD_INT 4
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: PPUSH
12424: CALL_OW 69
12428: PPUSH
12429: LD_EXP 42
12433: PPUSH
12434: CALL_OW 74
12438: PPUSH
12439: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
12443: LD_STRING Attack
12445: PPUSH
12446: CALL_OW 337
// music_class := music_combat ;
12450: LD_ADDR_OWVAR 72
12454: PUSH
12455: LD_INT 1
12457: ST_TO_ADDR
// music_nat := 4 ;
12458: LD_ADDR_OWVAR 71
12462: PUSH
12463: LD_INT 4
12465: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
12466: LD_INT 5
12468: PPUSH
12469: LD_EXP 42
12473: PPUSH
12474: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12478: LD_INT 6
12480: PPUSH
12481: LD_EXP 39
12485: PPUSH
12486: LD_INT 25
12488: PUSH
12489: LD_INT 1
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: PPUSH
12496: CALL_OW 72
12500: PUSH
12501: LD_INT 4
12503: ARRAY
12504: PPUSH
12505: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
12509: LD_ADDR_VAR 0 1
12513: PUSH
12514: LD_EXP 39
12518: PPUSH
12519: LD_INT 3
12521: PUSH
12522: LD_INT 25
12524: PUSH
12525: LD_INT 4
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PPUSH
12536: CALL_OW 72
12540: PUSH
12541: FOR_IN
12542: IFFALSE 12561
// ComAgressiveMove ( i , 221 , 110 ) ;
12544: LD_VAR 0 1
12548: PPUSH
12549: LD_INT 221
12551: PPUSH
12552: LD_INT 110
12554: PPUSH
12555: CALL_OW 114
12559: GO 12541
12561: POP
12562: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
12563: LD_EXP 39
12567: PPUSH
12568: LD_INT 25
12570: PUSH
12571: LD_INT 4
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: PPUSH
12578: CALL_OW 72
12582: PPUSH
12583: LD_INT 214
12585: PPUSH
12586: LD_INT 124
12588: PPUSH
12589: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
12593: LD_EXP 39
12597: PPUSH
12598: LD_INT 25
12600: PUSH
12601: LD_INT 1
12603: PUSH
12604: EMPTY
12605: LIST
12606: LIST
12607: PPUSH
12608: CALL_OW 72
12612: PUSH
12613: LD_INT 4
12615: ARRAY
12616: PPUSH
12617: LD_INT 214
12619: PPUSH
12620: LD_INT 114
12622: PPUSH
12623: LD_INT 0
12625: PPUSH
12626: CALL_OW 132
// if IsOk ( Grishko ) then
12630: LD_EXP 42
12634: PPUSH
12635: CALL_OW 302
12639: IFFALSE 12665
// begin SayRadio ( Grishko , D9-Gri-1 ) ;
12641: LD_EXP 42
12645: PPUSH
12646: LD_STRING D9-Gri-1
12648: PPUSH
12649: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
12653: LD_EXP 41
12657: PPUSH
12658: LD_STRING D9-Kur-1
12660: PPUSH
12661: CALL_OW 94
// end ; wait ( 0 0$1 ) ;
12665: LD_INT 35
12667: PPUSH
12668: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
12672: LD_EXP 34
12676: PPUSH
12677: LD_INT 233
12679: PPUSH
12680: LD_INT 130
12682: PPUSH
12683: CALL_OW 114
// if IsOk ( Grishko ) then
12687: LD_EXP 42
12691: PPUSH
12692: CALL_OW 302
12696: IFFALSE 12722
// begin SayRadio ( Grishko , D9-Gri-2 ) ;
12698: LD_EXP 42
12702: PPUSH
12703: LD_STRING D9-Gri-2
12705: PPUSH
12706: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12710: LD_EXP 41
12714: PPUSH
12715: LD_STRING D9-Kur-2
12717: PPUSH
12718: CALL_OW 94
// end ; ComExitBuilding ( Grishko ) ;
12722: LD_EXP 42
12726: PPUSH
12727: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
12731: LD_EXP 42
12735: PPUSH
12736: LD_INT 211
12738: PPUSH
12739: LD_INT 104
12741: PPUSH
12742: CALL_OW 171
// AddComHold ( Grishko ) ;
12746: LD_EXP 42
12750: PPUSH
12751: CALL_OW 200
// repeat wait ( 3 ) ;
12755: LD_INT 3
12757: PPUSH
12758: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
12762: LD_EXP 42
12766: PPUSH
12767: CALL_OW 310
12771: NOT
12772: IFFALSE 12755
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
12774: LD_EXP 39
12778: PPUSH
12779: LD_INT 34
12781: PUSH
12782: LD_INT 26
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: PPUSH
12789: CALL_OW 72
12793: PPUSH
12794: LD_EXP 42
12798: PPUSH
12799: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12803: LD_EXP 39
12807: PPUSH
12808: LD_INT 34
12810: PUSH
12811: LD_INT 26
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: PPUSH
12818: CALL_OW 72
12822: PPUSH
12823: LD_INT 215
12825: PPUSH
12826: LD_INT 106
12828: PPUSH
12829: CALL_OW 174
// repeat wait ( 3 ) ;
12833: LD_INT 3
12835: PPUSH
12836: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12840: LD_EXP 42
12844: PPUSH
12845: CALL_OW 256
12849: PUSH
12850: LD_INT 1000
12852: LESS
12853: IFFALSE 12833
// NormalAttack ( 5 , Grishko ) ;
12855: LD_INT 5
12857: PPUSH
12858: LD_EXP 42
12862: PPUSH
12863: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12867: LD_INT 6
12869: PPUSH
12870: LD_EXP 39
12874: PPUSH
12875: LD_INT 25
12877: PUSH
12878: LD_INT 1
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PPUSH
12885: CALL_OW 72
12889: PUSH
12890: LD_INT 4
12892: ARRAY
12893: PPUSH
12894: CALL_OW 472
// if IsOk ( Grishko ) then
12898: LD_EXP 42
12902: PPUSH
12903: CALL_OW 302
12907: IFFALSE 12933
// begin SayRadio ( Grishko , D9-Gri-3 ) ;
12909: LD_EXP 42
12913: PPUSH
12914: LD_STRING D9-Gri-3
12916: PPUSH
12917: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12921: LD_EXP 41
12925: PPUSH
12926: LD_STRING D9-Kur-3
12928: PPUSH
12929: CALL_OW 94
// end ; music_class := music_auto ;
12933: LD_ADDR_OWVAR 72
12937: PUSH
12938: LD_INT 0
12940: ST_TO_ADDR
// music_nat := music_auto ;
12941: LD_ADDR_OWVAR 71
12945: PUSH
12946: LD_INT 0
12948: ST_TO_ADDR
// for i in omarSquad do
12949: LD_ADDR_VAR 0 1
12953: PUSH
12954: LD_EXP 39
12958: PUSH
12959: FOR_IN
12960: IFFALSE 13104
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12962: LD_VAR 0 1
12966: PPUSH
12967: CALL_OW 247
12971: PUSH
12972: LD_INT 2
12974: EQUAL
12975: IFFALSE 12992
12977: PUSH
12978: LD_VAR 0 1
12982: PPUSH
12983: CALL_OW 256
12987: PUSH
12988: LD_INT 1000
12990: LESS
12991: AND
12992: IFFALSE 13058
// begin driver := IsDrivenBy ( i ) ;
12994: LD_ADDR_VAR 0 2
12998: PUSH
12999: LD_VAR 0 1
13003: PPUSH
13004: CALL_OW 311
13008: ST_TO_ADDR
// veh := i ;
13009: LD_ADDR_VAR 0 3
13013: PUSH
13014: LD_VAR 0 1
13018: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
13019: LD_VAR 0 2
13023: PPUSH
13024: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
13028: LD_VAR 0 2
13032: PPUSH
13033: LD_VAR 0 3
13037: PPUSH
13038: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
13042: LD_VAR 0 2
13046: PPUSH
13047: LD_VAR 0 3
13051: PPUSH
13052: CALL_OW 180
// end else
13056: GO 13102
// if GetLives ( i ) < 500 then
13058: LD_VAR 0 1
13062: PPUSH
13063: CALL_OW 256
13067: PUSH
13068: LD_INT 500
13070: LESS
13071: IFFALSE 13102
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
13073: LD_EXP 39
13077: PPUSH
13078: LD_INT 25
13080: PUSH
13081: LD_INT 4
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PPUSH
13088: CALL_OW 72
13092: PPUSH
13093: LD_VAR 0 1
13097: PPUSH
13098: CALL_OW 188
// end ; end ;
13102: GO 12959
13104: POP
13105: POP
// repeat wait ( 0 0$1 ) ;
13106: LD_INT 35
13108: PPUSH
13109: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
13113: LD_EXP 39
13117: PPUSH
13118: LD_INT 3
13120: PUSH
13121: LD_INT 24
13123: PUSH
13124: LD_INT 1000
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PUSH
13135: LD_INT 21
13137: PUSH
13138: LD_INT 2
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: PPUSH
13149: CALL_OW 72
13153: NOT
13154: IFFALSE 13185
13156: PUSH
13157: LD_EXP 39
13161: PPUSH
13162: LD_INT 3
13164: PUSH
13165: LD_INT 24
13167: PUSH
13168: LD_INT 250
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PPUSH
13179: CALL_OW 72
13183: NOT
13184: AND
13185: IFFALSE 13106
// wait ( 0 0$2 ) ;
13187: LD_INT 70
13189: PPUSH
13190: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
13194: LD_ADDR_VAR 0 5
13198: PUSH
13199: LD_EXP 39
13203: PPUSH
13204: LD_INT 58
13206: PUSH
13207: EMPTY
13208: LIST
13209: PUSH
13210: LD_INT 21
13212: PUSH
13213: LD_INT 2
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PPUSH
13224: CALL_OW 72
13228: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
13229: LD_ADDR_VAR 0 6
13233: PUSH
13234: LD_EXP 39
13238: PPUSH
13239: LD_INT 25
13241: PUSH
13242: LD_INT 3
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: PUSH
13249: LD_INT 3
13251: PUSH
13252: LD_INT 55
13254: PUSH
13255: EMPTY
13256: LIST
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: PPUSH
13266: CALL_OW 72
13270: ST_TO_ADDR
// for i := 1 to tmp do
13271: LD_ADDR_VAR 0 1
13275: PUSH
13276: DOUBLE
13277: LD_INT 1
13279: DEC
13280: ST_TO_ADDR
13281: LD_VAR 0 5
13285: PUSH
13286: FOR_TO
13287: IFFALSE 13317
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
13289: LD_VAR 0 6
13293: PUSH
13294: LD_VAR 0 1
13298: ARRAY
13299: PPUSH
13300: LD_VAR 0 5
13304: PUSH
13305: LD_VAR 0 1
13309: ARRAY
13310: PPUSH
13311: CALL_OW 120
13315: GO 13286
13317: POP
13318: POP
// wait ( 0 0$5 ) ;
13319: LD_INT 175
13321: PPUSH
13322: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
13326: LD_EXP 39
13330: PPUSH
13331: LD_INT 199
13333: PPUSH
13334: LD_INT 141
13336: PPUSH
13337: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
13341: LD_EXP 34
13345: PPUSH
13346: LD_INT 190
13348: PPUSH
13349: LD_INT 143
13351: PPUSH
13352: CALL_OW 114
// AddComHold ( Omar ) ;
13356: LD_EXP 34
13360: PPUSH
13361: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
13365: LD_EXP 39
13369: PPUSH
13370: LD_INT 2
13372: PUSH
13373: LD_INT 25
13375: PUSH
13376: LD_INT 1
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PUSH
13383: LD_INT 25
13385: PUSH
13386: LD_INT 4
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: LIST
13397: PPUSH
13398: CALL_OW 72
13402: PPUSH
13403: LD_INT 161
13405: PPUSH
13406: LD_INT 130
13408: PPUSH
13409: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
13413: LD_EXP 39
13417: PPUSH
13418: LD_INT 25
13420: PUSH
13421: LD_INT 1
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: PPUSH
13428: CALL_OW 72
13432: PPUSH
13433: LD_INT 163
13435: PPUSH
13436: LD_INT 122
13438: PPUSH
13439: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
13443: LD_EXP 39
13447: PPUSH
13448: LD_INT 25
13450: PUSH
13451: LD_INT 1
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PPUSH
13458: CALL_OW 72
13462: PUSH
13463: LD_INT 4
13465: ARRAY
13466: PPUSH
13467: LD_INT 165
13469: PPUSH
13470: LD_INT 118
13472: PPUSH
13473: LD_INT 0
13475: PPUSH
13476: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
13480: LD_EXP 39
13484: PPUSH
13485: LD_INT 25
13487: PUSH
13488: LD_INT 1
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: PPUSH
13495: CALL_OW 72
13499: PUSH
13500: LD_INT 4
13502: ARRAY
13503: PPUSH
13504: LD_INT 159
13506: PPUSH
13507: LD_INT 116
13509: PPUSH
13510: LD_INT 0
13512: PPUSH
13513: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
13517: LD_EXP 39
13521: PPUSH
13522: LD_INT 21
13524: PUSH
13525: LD_INT 2
13527: PUSH
13528: EMPTY
13529: LIST
13530: LIST
13531: PPUSH
13532: CALL_OW 72
13536: PPUSH
13537: LD_INT 169
13539: PPUSH
13540: LD_INT 114
13542: PPUSH
13543: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
13547: LD_INT 35
13549: PPUSH
13550: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
13554: LD_ADDR_VAR 0 5
13558: PUSH
13559: LD_EXP 39
13563: PPUSH
13564: LD_INT 25
13566: PUSH
13567: LD_INT 1
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PPUSH
13574: CALL_OW 72
13578: ST_TO_ADDR
// for i in tmp do
13579: LD_ADDR_VAR 0 1
13583: PUSH
13584: LD_VAR 0 5
13588: PUSH
13589: FOR_IN
13590: IFFALSE 13691
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
13592: LD_VAR 0 1
13596: PPUSH
13597: CALL_OW 256
13601: PUSH
13602: LD_INT 600
13604: LESS
13605: IFFALSE 13628
13607: PUSH
13608: LD_VAR 0 1
13612: PPUSH
13613: LD_INT 161
13615: PPUSH
13616: LD_INT 130
13618: PPUSH
13619: CALL_OW 297
13623: PUSH
13624: LD_INT 6
13626: GREATER
13627: AND
13628: IFFALSE 13645
// ComMoveXY ( i , 161 , 130 ) ;
13630: LD_VAR 0 1
13634: PPUSH
13635: LD_INT 161
13637: PPUSH
13638: LD_INT 130
13640: PPUSH
13641: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
13645: LD_VAR 0 1
13649: PPUSH
13650: CALL_OW 256
13654: PUSH
13655: LD_INT 1000
13657: EQUAL
13658: IFFALSE 13672
13660: PUSH
13661: LD_VAR 0 1
13665: PPUSH
13666: CALL_OW 314
13670: NOT
13671: AND
13672: IFFALSE 13689
// ComAgressiveMove ( i , 160 , 109 ) ;
13674: LD_VAR 0 1
13678: PPUSH
13679: LD_INT 160
13681: PPUSH
13682: LD_INT 109
13684: PPUSH
13685: CALL_OW 114
// end ;
13689: GO 13589
13691: POP
13692: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
13693: LD_ADDR_VAR 0 5
13697: PUSH
13698: LD_EXP 39
13702: PPUSH
13703: LD_INT 21
13705: PUSH
13706: LD_INT 2
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: PPUSH
13713: CALL_OW 72
13717: ST_TO_ADDR
// for i in tmp do
13718: LD_ADDR_VAR 0 1
13722: PUSH
13723: LD_VAR 0 5
13727: PUSH
13728: FOR_IN
13729: IFFALSE 14005
// begin tmp2 := IsDrivenBy ( i ) ;
13731: LD_ADDR_VAR 0 6
13735: PUSH
13736: LD_VAR 0 1
13740: PPUSH
13741: CALL_OW 311
13745: ST_TO_ADDR
// if not tmp2 then
13746: LD_VAR 0 6
13750: NOT
13751: IFFALSE 13755
// continue ;
13753: GO 13728
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
13755: LD_VAR 0 1
13759: PPUSH
13760: CALL_OW 256
13764: PUSH
13765: LD_INT 600
13767: GREATEREQUAL
13768: IFFALSE 13785
13770: PUSH
13771: LD_VAR 0 1
13775: PPUSH
13776: CALL_OW 110
13780: PUSH
13781: LD_INT 1
13783: EQUAL
13784: AND
13785: IFFALSE 13799
// SetTag ( i , 0 ) ;
13787: LD_VAR 0 1
13791: PPUSH
13792: LD_INT 0
13794: PPUSH
13795: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
13799: LD_VAR 0 1
13803: PPUSH
13804: CALL_OW 256
13808: PUSH
13809: LD_INT 600
13811: GREATEREQUAL
13812: IFFALSE 13826
13814: PUSH
13815: LD_VAR 0 1
13819: PPUSH
13820: CALL_OW 110
13824: NOT
13825: AND
13826: IFFALSE 13852
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13828: LD_VAR 0 1
13832: PPUSH
13833: LD_VAR 0 7
13837: PPUSH
13838: LD_VAR 0 1
13842: PPUSH
13843: CALL_OW 74
13847: PPUSH
13848: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13852: LD_VAR 0 1
13856: PPUSH
13857: CALL_OW 256
13861: PUSH
13862: LD_INT 600
13864: LESS
13865: IFFALSE 13879
13867: PUSH
13868: LD_VAR 0 1
13872: PPUSH
13873: CALL_OW 110
13877: NOT
13878: AND
13879: IFFALSE 13908
// begin SetTag ( i , 1 ) ;
13881: LD_VAR 0 1
13885: PPUSH
13886: LD_INT 1
13888: PPUSH
13889: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13893: LD_VAR 0 1
13897: PPUSH
13898: LD_INT 202
13900: PPUSH
13901: LD_INT 150
13903: PPUSH
13904: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13908: LD_VAR 0 1
13912: PPUSH
13913: CALL_OW 110
13917: PUSH
13918: LD_INT 1
13920: EQUAL
13921: IFFALSE 13944
13923: PUSH
13924: LD_VAR 0 1
13928: PPUSH
13929: LD_INT 202
13931: PPUSH
13932: LD_INT 150
13934: PPUSH
13935: CALL_OW 297
13939: PUSH
13940: LD_INT 6
13942: LESS
13943: AND
13944: IFFALSE 13952
13946: PUSH
13947: LD_VAR 0 6
13951: AND
13952: IFFALSE 14003
// begin ComExitVehicle ( tmp2 ) ;
13954: LD_VAR 0 6
13958: PPUSH
13959: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13963: LD_VAR 0 6
13967: PPUSH
13968: LD_VAR 0 1
13972: PPUSH
13973: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13977: LD_VAR 0 6
13981: PPUSH
13982: LD_INT 700
13984: PPUSH
13985: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13989: LD_VAR 0 6
13993: PPUSH
13994: LD_VAR 0 1
13998: PPUSH
13999: CALL_OW 180
// end ; end ;
14003: GO 13728
14005: POP
14006: POP
// until kirovDestroyed ;
14007: LD_EXP 16
14011: IFFALSE 13547
// repeat wait ( 0 0$1 ) ;
14013: LD_INT 35
14015: PPUSH
14016: CALL_OW 67
// for i in omarSquad union Omar do
14020: LD_ADDR_VAR 0 1
14024: PUSH
14025: LD_EXP 39
14029: PUSH
14030: LD_EXP 34
14034: UNION
14035: PUSH
14036: FOR_IN
14037: IFFALSE 14211
// if IsInArea ( i , southRoadArea ) then
14039: LD_VAR 0 1
14043: PPUSH
14044: LD_INT 15
14046: PPUSH
14047: CALL_OW 308
14051: IFFALSE 14064
// RemoveUnit ( i ) else
14053: LD_VAR 0 1
14057: PPUSH
14058: CALL_OW 64
14062: GO 14209
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
14064: LD_VAR 0 1
14068: PPUSH
14069: CALL_OW 257
14073: PUSH
14074: LD_INT 3
14076: EQUAL
14077: IFFALSE 14091
14079: PUSH
14080: LD_VAR 0 1
14084: PPUSH
14085: CALL_OW 310
14089: NOT
14090: AND
14091: IFFALSE 14141
14093: PUSH
14094: LD_INT 22
14096: PUSH
14097: LD_INT 5
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: PUSH
14104: LD_INT 24
14106: PUSH
14107: LD_INT 251
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: PUSH
14114: LD_INT 21
14116: PUSH
14117: LD_INT 2
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PUSH
14124: LD_INT 58
14126: PUSH
14127: EMPTY
14128: LIST
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: PPUSH
14136: CALL_OW 69
14140: AND
14141: IFFALSE 14194
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
14143: LD_VAR 0 1
14147: PPUSH
14148: LD_INT 22
14150: PUSH
14151: LD_INT 5
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: PUSH
14158: LD_INT 21
14160: PUSH
14161: LD_INT 2
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: PUSH
14168: LD_INT 58
14170: PUSH
14171: EMPTY
14172: LIST
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: LIST
14178: PPUSH
14179: CALL_OW 69
14183: PUSH
14184: LD_INT 1
14186: ARRAY
14187: PPUSH
14188: CALL_OW 120
14192: GO 14209
// ComMoveXY ( i , 208 , 162 ) ;
14194: LD_VAR 0 1
14198: PPUSH
14199: LD_INT 208
14201: PPUSH
14202: LD_INT 162
14204: PPUSH
14205: CALL_OW 111
// end ;
14209: GO 14036
14211: POP
14212: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
14213: LD_INT 22
14215: PUSH
14216: LD_INT 5
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: PUSH
14223: LD_INT 21
14225: PUSH
14226: LD_INT 1
14228: PUSH
14229: EMPTY
14230: LIST
14231: LIST
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: PPUSH
14237: CALL_OW 69
14241: NOT
14242: IFFALSE 14013
// end ;
14244: PPOPN 7
14246: END
// every 0 0$1 trigger IsDead ( kirov ) do
14247: LD_INT 71
14249: PPUSH
14250: CALL_OW 301
14254: IFFALSE 14271
14256: GO 14258
14258: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
14259: LD_EXP 26
14263: PPUSH
14264: LD_STRING DH-1-Kirov
14266: PPUSH
14267: CALL_OW 88
14271: END
// every 0 0$1 trigger See ( 2 , beria ) do
14272: LD_INT 2
14274: PPUSH
14275: LD_INT 106
14277: PPUSH
14278: CALL_OW 292
14282: IFFALSE 14299
14284: GO 14286
14286: DISABLE
// Say ( Heike , DH-1-Beria ) ;
14287: LD_EXP 26
14291: PPUSH
14292: LD_STRING DH-1-Beria
14294: PPUSH
14295: CALL_OW 88
14299: END
// every 0 0$1 trigger See ( 2 , kagan ) do
14300: LD_INT 2
14302: PPUSH
14303: LD_INT 112
14305: PPUSH
14306: CALL_OW 292
14310: IFFALSE 14579
14312: GO 14314
14314: DISABLE
// begin DialogueOn ;
14315: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
14319: LD_INT 112
14321: PPUSH
14322: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
14326: LD_EXP 26
14330: PPUSH
14331: LD_STRING DH-1-Kagan
14333: PPUSH
14334: CALL_OW 88
// if Kamil then
14338: LD_EXP 30
14342: IFFALSE 14380
// begin Say ( Kamil , DKam-Kagan-2 ) ;
14344: LD_EXP 30
14348: PPUSH
14349: LD_STRING DKam-Kagan-2
14351: PPUSH
14352: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
14356: LD_EXP 27
14360: PPUSH
14361: LD_STRING DG-Kagan-3
14363: PPUSH
14364: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
14368: LD_EXP 27
14372: PPUSH
14373: LD_STRING DG-Kagan-4
14375: PPUSH
14376: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
14380: LD_STRING KaganBase
14382: PPUSH
14383: CALL_OW 97
14387: PUSH
14388: LD_INT 1
14390: DOUBLE
14391: EQUAL
14392: IFTRUE 14396
14394: GO 14491
14396: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
14397: LD_EXP 26
14401: PPUSH
14402: LD_STRING DH-Kagan-5
14404: PPUSH
14405: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
14409: LD_EXP 26
14413: PPUSH
14414: LD_STRING DH-Kagan-6
14416: PPUSH
14417: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
14421: LD_EXP 37
14425: PPUSH
14426: LD_STRING DShar-Kagan-7
14428: PPUSH
14429: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
14433: LD_EXP 26
14437: PPUSH
14438: LD_STRING DH-Kagan-8
14440: PPUSH
14441: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
14445: LD_EXP 26
14449: PPUSH
14450: LD_STRING DH-Kagan-9
14452: PPUSH
14453: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
14457: LD_EXP 37
14461: PPUSH
14462: LD_STRING DShar-Kagan-10
14464: PPUSH
14465: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
14469: LD_EXP 26
14473: PPUSH
14474: LD_STRING DH-Kagan-11
14476: PPUSH
14477: CALL_OW 88
// kaganCaptured := true ;
14481: LD_ADDR_EXP 24
14485: PUSH
14486: LD_INT 1
14488: ST_TO_ADDR
// end ; 2 :
14489: GO 14575
14491: LD_INT 2
14493: DOUBLE
14494: EQUAL
14495: IFTRUE 14499
14497: GO 14574
14499: POP
// begin if FilterAllUnits ( [ f_side , 8 ] ) and Aviradze then
14500: LD_INT 22
14502: PUSH
14503: LD_INT 8
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: PPUSH
14510: CALL_OW 69
14514: IFFALSE 14522
14516: PUSH
14517: LD_EXP 36
14521: AND
14522: IFFALSE 14536
// Say ( Heike , DH-Kagan-a-5 ) ;
14524: LD_EXP 26
14528: PPUSH
14529: LD_STRING DH-Kagan-a-5
14531: PPUSH
14532: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
14536: LD_EXP 26
14540: PPUSH
14541: LD_STRING DH-Kagan-a-6
14543: PPUSH
14544: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
14548: LD_EXP 26
14552: PPUSH
14553: LD_STRING DH-Kagan-a-7
14555: PPUSH
14556: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
14560: LD_EXP 27
14564: PPUSH
14565: LD_STRING DG-Kagan-a-8
14567: PPUSH
14568: CALL_OW 88
// end ; end ;
14572: GO 14575
14574: POP
// DialogueOff ;
14575: CALL_OW 7
// end ;
14579: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
14580: LD_EXP 18
14584: IFTRUE 14599
14586: PUSH
14587: LD_INT 112
14589: PPUSH
14590: CALL_OW 255
14594: PUSH
14595: LD_INT 2
14597: EQUAL
14598: OR
14599: IFFALSE 14611
14601: GO 14603
14603: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
14604: LD_STRING KaganDone
14606: PPUSH
14607: CALL_OW 337
14611: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
14612: LD_EXP 6
14616: IFFALSE 14639
14618: PUSH
14619: LD_EXP 49
14623: PPUSH
14624: LD_INT 95
14626: PUSH
14627: LD_INT 19
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: PPUSH
14634: CALL_OW 72
14638: AND
14639: IFFALSE 14716
14641: GO 14643
14643: DISABLE
// begin DialogueOn ;
14644: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
14648: LD_INT 63
14650: PPUSH
14651: LD_INT 32
14653: PPUSH
14654: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
14658: LD_INT 63
14660: PPUSH
14661: LD_INT 32
14663: PPUSH
14664: LD_INT 2
14666: PPUSH
14667: LD_INT 12
14669: NEG
14670: PPUSH
14671: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
14675: LD_EXP 26
14679: PPUSH
14680: LD_STRING DH-Omicron-1
14682: PPUSH
14683: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
14687: LD_EXP 28
14691: PPUSH
14692: LD_STRING DM-Omicron-2
14694: PPUSH
14695: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
14699: LD_INT 63
14701: PPUSH
14702: LD_INT 32
14704: PPUSH
14705: LD_INT 2
14707: PPUSH
14708: CALL_OW 331
// DialogueOff ;
14712: CALL_OW 7
// end ;
14716: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
14717: LD_INT 2
14719: PPUSH
14720: LD_EXP 51
14724: PPUSH
14725: CALL_OW 292
14729: IFTRUE 14746
14731: PUSH
14732: LD_EXP 51
14736: PPUSH
14737: CALL_OW 255
14741: PUSH
14742: LD_INT 2
14744: EQUAL
14745: OR
14746: IFTRUE 14761
14748: PUSH
14749: LD_INT 106
14751: PPUSH
14752: CALL_OW 255
14756: PUSH
14757: LD_INT 2
14759: EQUAL
14760: OR
14761: IFFALSE 14774
14763: PUSH
14764: LD_EXP 51
14768: PPUSH
14769: CALL_OW 302
14773: AND
14774: IFFALSE 14787
14776: PUSH
14777: LD_EXP 26
14781: PPUSH
14782: CALL_OW 302
14786: AND
14787: IFFALSE 14800
14789: PUSH
14790: LD_EXP 36
14794: PPUSH
14795: CALL_OW 302
14799: AND
14800: IFFALSE 15553
14802: GO 14804
14804: DISABLE
14805: LD_INT 0
14807: PPUSH
14808: PPUSH
14809: PPUSH
14810: PPUSH
14811: PPUSH
// begin DialogueOn ;
14812: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
14816: LD_INT 111
14818: PPUSH
14819: LD_INT 90
14821: PPUSH
14822: LD_INT 2
14824: PPUSH
14825: LD_INT 6
14827: NEG
14828: PPUSH
14829: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
14833: LD_INT 111
14835: PPUSH
14836: LD_INT 90
14838: PPUSH
14839: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
14843: LD_EXP 36
14847: PPUSH
14848: LD_STRING DA-Cap-1
14850: PPUSH
14851: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
14855: LD_EXP 26
14859: PPUSH
14860: LD_STRING DH-Cap-2
14862: PPUSH
14863: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
14867: LD_INT 111
14869: PPUSH
14870: LD_INT 90
14872: PPUSH
14873: LD_INT 2
14875: PPUSH
14876: CALL_OW 331
// DialogueOff ;
14880: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
14884: LD_INT 35
14886: PPUSH
14887: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 110 , 95 , 12 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_distxy , 110 , 95 , 12 ] ] ) ;
14891: LD_EXP 17
14895: IFTRUE 14910
14897: PUSH
14898: LD_INT 106
14900: PPUSH
14901: CALL_OW 255
14905: PUSH
14906: LD_INT 2
14908: EQUAL
14909: OR
14910: IFTRUE 14927
14912: PUSH
14913: LD_EXP 51
14917: PPUSH
14918: CALL_OW 255
14922: PUSH
14923: LD_INT 2
14925: EQUAL
14926: OR
14927: IFFALSE 14940
14929: PUSH
14930: LD_EXP 51
14934: PPUSH
14935: CALL_OW 302
14939: AND
14940: IFFALSE 14953
14942: PUSH
14943: LD_EXP 36
14947: PPUSH
14948: CALL_OW 302
14952: AND
14953: IFFALSE 14965
14955: PUSH
14956: LD_INT 2
14958: PPUSH
14959: CALL_OW 463
14963: NOT
14964: AND
14965: IFFALSE 15017
14967: PUSH
14968: LD_INT 22
14970: PUSH
14971: LD_INT 3
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 21
14980: PUSH
14981: LD_INT 1
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 92
14990: PUSH
14991: LD_INT 110
14993: PUSH
14994: LD_INT 95
14996: PUSH
14997: LD_INT 12
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: LIST
15010: PPUSH
15011: CALL_OW 69
15015: NOT
15016: AND
15017: IFFALSE 15069
15019: PUSH
15020: LD_INT 22
15022: PUSH
15023: LD_INT 3
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: PUSH
15030: LD_INT 30
15032: PUSH
15033: LD_INT 5
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: PUSH
15040: LD_INT 92
15042: PUSH
15043: LD_INT 110
15045: PUSH
15046: LD_INT 95
15048: PUSH
15049: LD_INT 12
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: LIST
15062: PPUSH
15063: CALL_OW 69
15067: NOT
15068: AND
15069: IFFALSE 14884
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
15071: LD_ADDR_VAR 0 2
15075: PUSH
15076: LD_EXP 38
15080: PUSH
15081: LD_EXP 29
15085: PUSH
15086: LD_EXP 30
15090: PUSH
15091: LD_EXP 32
15095: PUSH
15096: LD_EXP 31
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: UNION
15107: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
15108: LD_ADDR_VAR 0 2
15112: PUSH
15113: LD_VAR 0 2
15117: PPUSH
15118: LD_INT 50
15120: PUSH
15121: EMPTY
15122: LIST
15123: PPUSH
15124: CALL_OW 72
15128: ST_TO_ADDR
// if tmp < 2 then
15129: LD_VAR 0 2
15133: PUSH
15134: LD_INT 2
15136: LESS
15137: IFFALSE 15149
// q := 2 else
15139: LD_ADDR_VAR 0 4
15143: PUSH
15144: LD_INT 2
15146: ST_TO_ADDR
15147: GO 15162
// q := Query ( LabCap ) ;
15149: LD_ADDR_VAR 0 4
15153: PUSH
15154: LD_STRING LabCap
15156: PPUSH
15157: CALL_OW 97
15161: ST_TO_ADDR
// case q of 1 :
15162: LD_VAR 0 4
15166: PUSH
15167: LD_INT 1
15169: DOUBLE
15170: EQUAL
15171: IFTRUE 15175
15173: GO 15517
15175: POP
// begin DoNotAttack ( 2 , ruLab ) ;
15176: LD_INT 2
15178: PPUSH
15179: LD_EXP 51
15183: PPUSH
15184: CALL_OW 471
// labCaptured := true ;
15188: LD_ADDR_EXP 21
15192: PUSH
15193: LD_INT 1
15195: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
15196: LD_EXP 26
15200: PPUSH
15201: LD_STRING DH-Cap-a-1
15203: PPUSH
15204: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
15208: LD_EXP 36
15212: PPUSH
15213: LD_STRING DA-Cap-a-2
15215: PPUSH
15216: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike , Givi , Kurt , Markov ] ^ [ sel_changeable ] ^ tmp ;
15220: LD_ADDR_VAR 0 5
15224: PUSH
15225: LD_EXP 36
15229: PUSH
15230: LD_INT -3
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: PUSH
15237: LD_INT -2
15239: PUSH
15240: LD_INT -4
15242: PUSH
15243: LD_EXP 26
15247: PUSH
15248: LD_EXP 27
15252: PUSH
15253: LD_EXP 35
15257: PUSH
15258: LD_EXP 33
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: ADD
15271: PUSH
15272: LD_INT -3
15274: PUSH
15275: EMPTY
15276: LIST
15277: ADD
15278: PUSH
15279: LD_VAR 0 2
15283: ADD
15284: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
15285: LD_ADDR_VAR 0 3
15289: PUSH
15290: LD_STRING Select two characters to go with Aviradze
15292: PPUSH
15293: LD_INT 2
15295: PPUSH
15296: LD_INT 2
15298: PPUSH
15299: LD_VAR 0 5
15303: PPUSH
15304: EMPTY
15305: PPUSH
15306: CALL_OW 42
15310: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
15311: LD_EXP 51
15315: PPUSH
15316: LD_INT 8
15318: PPUSH
15319: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
15323: LD_EXP 36
15327: PPUSH
15328: LD_INT 8
15330: PPUSH
15331: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
15335: LD_ADDR_EXP 40
15339: PUSH
15340: LD_EXP 36
15344: PUSH
15345: EMPTY
15346: LIST
15347: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
15348: LD_EXP 36
15352: PPUSH
15353: CALL_OW 310
15357: IFFALSE 15368
// ComExit ( Aviradze ) ;
15359: LD_EXP 36
15363: PPUSH
15364: CALL 79387 0 1
// wait ( 3 ) ;
15368: LD_INT 3
15370: PPUSH
15371: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
15375: LD_EXP 36
15379: PPUSH
15380: LD_EXP 51
15384: PPUSH
15385: CALL_OW 120
// for i := 1 to 2 do
15389: LD_ADDR_VAR 0 1
15393: PUSH
15394: DOUBLE
15395: LD_INT 1
15397: DEC
15398: ST_TO_ADDR
15399: LD_INT 2
15401: PUSH
15402: FOR_TO
15403: IFFALSE 15506
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
15405: LD_ADDR_EXP 40
15409: PUSH
15410: LD_EXP 40
15414: PUSH
15415: LD_VAR 0 3
15419: PUSH
15420: LD_VAR 0 1
15424: ARRAY
15425: UNION
15426: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
15427: LD_VAR 0 3
15431: PUSH
15432: LD_VAR 0 1
15436: ARRAY
15437: PPUSH
15438: LD_INT 8
15440: PPUSH
15441: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
15445: LD_VAR 0 3
15449: PUSH
15450: LD_VAR 0 1
15454: ARRAY
15455: PPUSH
15456: CALL_OW 310
15460: IFFALSE 15477
// ComExit ( tmp2 [ i ] ) ;
15462: LD_VAR 0 3
15466: PUSH
15467: LD_VAR 0 1
15471: ARRAY
15472: PPUSH
15473: CALL 79387 0 1
// wait ( 3 ) ;
15477: LD_INT 3
15479: PPUSH
15480: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
15484: LD_VAR 0 3
15488: PUSH
15489: LD_VAR 0 1
15493: ARRAY
15494: PPUSH
15495: LD_EXP 51
15499: PPUSH
15500: CALL_OW 120
// end ;
15504: GO 15402
15506: POP
15507: POP
// SetAchievement ( ACH_LAB ) ;
15508: LD_STRING ACH_LAB
15510: PPUSH
15511: CALL_OW 543
// end ; 2 :
15515: GO 15553
15517: LD_INT 2
15519: DOUBLE
15520: EQUAL
15521: IFTRUE 15525
15523: GO 15552
15525: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
15526: LD_EXP 26
15530: PPUSH
15531: LD_STRING DH-Cap-b-1
15533: PPUSH
15534: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
15538: LD_EXP 36
15542: PPUSH
15543: LD_STRING DA-Cap-b-2
15545: PPUSH
15546: CALL_OW 88
// end ; end ;
15550: GO 15553
15552: POP
// end ;
15553: PPOPN 5
15555: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
15556: LD_INT 10
15558: PPUSH
15559: LD_INT 22
15561: PUSH
15562: LD_INT 2
15564: PUSH
15565: EMPTY
15566: LIST
15567: LIST
15568: PUSH
15569: LD_INT 30
15571: PUSH
15572: LD_INT 31
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: PPUSH
15583: CALL_OW 70
15587: PUSH
15588: LD_INT 2
15590: GREATEREQUAL
15591: IFFALSE 15603
15593: GO 15595
15595: DISABLE
// SetAchievement ( ACH_KING ) ;
15596: LD_STRING ACH_KING
15598: PPUSH
15599: CALL_OW 543
15603: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
15604: LD_EXP 11
15608: NOT
15609: IFFALSE 15662
15611: PUSH
15612: LD_INT 10
15614: PPUSH
15615: LD_INT 22
15617: PUSH
15618: LD_INT 2
15620: PUSH
15621: EMPTY
15622: LIST
15623: LIST
15624: PUSH
15625: LD_INT 2
15627: PUSH
15628: LD_INT 30
15630: PUSH
15631: LD_INT 31
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: PUSH
15638: LD_INT 30
15640: PUSH
15641: LD_INT 4
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: LIST
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PPUSH
15657: CALL_OW 70
15661: AND
15662: IFFALSE 15692
15664: GO 15666
15666: DISABLE
// begin hillBase := true ;
15667: LD_ADDR_EXP 15
15671: PUSH
15672: LD_INT 1
15674: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
15675: LD_STRING HillDone
15677: PPUSH
15678: CALL_OW 337
// SetAreaMapShow ( bunkerHillArea , 0 ) ;
15682: LD_INT 22
15684: PPUSH
15685: LD_INT 0
15687: PPUSH
15688: CALL_OW 424
// end ;
15692: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
15693: LD_EXP 31
15697: IFFALSE 15714
15699: PUSH
15700: LD_EXP 31
15704: PPUSH
15705: CALL_OW 256
15709: PUSH
15710: LD_INT 3
15712: LESS
15713: AND
15714: IFFALSE 15760
15716: GO 15718
15718: DISABLE
// begin DialogueOn ;
15719: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
15723: LD_EXP 31
15727: PPUSH
15728: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
15732: LD_EXP 31
15736: PPUSH
15737: LD_STRING DK-Kkilled-1
15739: PPUSH
15740: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
15744: LD_EXP 26
15748: PPUSH
15749: LD_STRING DH-Kkilled-2
15751: PPUSH
15752: CALL_OW 88
// DialogueOff ;
15756: CALL_OW 7
// end ;
15760: END
// every 0 0$1 trigger kaiaKilledByRussian do
15761: LD_EXP 23
15765: IFFALSE 15782
15767: GO 15769
15769: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
15770: LD_EXP 26
15774: PPUSH
15775: LD_STRING DH-Kkilled-3
15777: PPUSH
15778: CALL_OW 88
15782: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo , driver ;
15783: LD_EXP 16
15787: IFFALSE 15810
15789: PUSH
15790: LD_INT 106
15792: PPUSH
15793: CALL_OW 255
15797: PUSH
15798: LD_INT 2
15800: EQUAL
15801: IFTRUE 15809
15803: PUSH
15804: LD_EXP 17
15808: OR
15809: AND
15810: IFFALSE 15841
15812: PUSH
15813: LD_EXP 18
15817: IFTRUE 15840
15819: PUSH
15820: LD_EXP 24
15824: IFFALSE 15839
15826: PUSH
15827: LD_INT 112
15829: PPUSH
15830: CALL_OW 255
15834: PUSH
15835: LD_INT 2
15837: EQUAL
15838: AND
15839: OR
15840: AND
15841: IFFALSE 17093
15843: GO 15845
15845: DISABLE
15846: LD_INT 0
15848: PPUSH
15849: PPUSH
15850: PPUSH
15851: PPUSH
15852: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
15853: LD_STRING GoToWest
15855: PPUSH
15856: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
15860: LD_INT 17
15862: PPUSH
15863: LD_INT 1
15865: PPUSH
15866: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
15870: LD_INT 35
15872: PPUSH
15873: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15877: LD_ADDR_VAR 0 2
15881: PUSH
15882: LD_INT 17
15884: PPUSH
15885: LD_INT 22
15887: PUSH
15888: LD_INT 2
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: PUSH
15895: LD_INT 2
15897: PUSH
15898: LD_INT 21
15900: PUSH
15901: LD_INT 1
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PUSH
15908: LD_INT 21
15910: PUSH
15911: LD_INT 2
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PUSH
15918: LD_INT 3
15920: PUSH
15921: LD_INT 58
15923: PUSH
15924: EMPTY
15925: LIST
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: PUSH
15931: EMPTY
15932: LIST
15933: LIST
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: LIST
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PPUSH
15944: CALL_OW 70
15948: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15949: LD_ADDR_VAR 0 3
15953: PUSH
15954: LD_INT 22
15956: PUSH
15957: LD_INT 2
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: LD_INT 3
15966: PUSH
15967: LD_INT 55
15969: PUSH
15970: EMPTY
15971: LIST
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: LD_INT 2
15979: PUSH
15980: LD_INT 21
15982: PUSH
15983: LD_INT 1
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: PUSH
15990: LD_INT 21
15992: PUSH
15993: LD_INT 2
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: PUSH
16000: LD_INT 3
16002: PUSH
16003: LD_INT 58
16005: PUSH
16006: EMPTY
16007: LIST
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: LIST
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: LIST
16026: PPUSH
16027: CALL_OW 69
16031: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
16032: LD_VAR 0 2
16036: PUSH
16037: LD_INT 0
16039: PLUS
16040: PUSH
16041: LD_VAR 0 3
16045: PUSH
16046: LD_INT 0
16048: PLUS
16049: EQUAL
16050: IFFALSE 15870
// SaveCharacters ( Heike , 04_1_Heike ) ;
16052: LD_EXP 26
16056: PPUSH
16057: LD_STRING 04_1_Heike
16059: PPUSH
16060: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
16064: LD_EXP 36
16068: IFFALSE 16083
16070: PUSH
16071: LD_EXP 36
16075: PUSH
16076: LD_EXP 40
16080: IN
16081: NOT
16082: AND
16083: IFFALSE 16099
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
16085: LD_EXP 36
16089: PPUSH
16090: LD_STRING 04_1_Aviradze
16092: PPUSH
16093: CALL_OW 38
16097: GO 16117
// if Aviradze then
16099: LD_EXP 36
16103: IFFALSE 16117
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
16105: LD_EXP 36
16109: PPUSH
16110: LD_STRING 04_1_Aviradze_L
16112: PPUSH
16113: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
16117: LD_EXP 29
16121: IFFALSE 16136
16123: PUSH
16124: LD_EXP 29
16128: PUSH
16129: LD_EXP 40
16133: IN
16134: NOT
16135: AND
16136: IFFALSE 16152
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
16138: LD_EXP 29
16142: PPUSH
16143: LD_STRING 04_1_Ibrahim
16145: PPUSH
16146: CALL_OW 38
16150: GO 16170
// if Ibrahim then
16152: LD_EXP 29
16156: IFFALSE 16170
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
16158: LD_EXP 29
16162: PPUSH
16163: LD_STRING 04_1_Ibrahim_L
16165: PPUSH
16166: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
16170: LD_EXP 30
16174: IFFALSE 16189
16176: PUSH
16177: LD_EXP 30
16181: PUSH
16182: LD_EXP 40
16186: IN
16187: NOT
16188: AND
16189: IFFALSE 16205
// SaveCharacters ( Kamil , 04_1_Kamil ) else
16191: LD_EXP 30
16195: PPUSH
16196: LD_STRING 04_1_Kamil
16198: PPUSH
16199: CALL_OW 38
16203: GO 16223
// if Kamil then
16205: LD_EXP 30
16209: IFFALSE 16223
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
16211: LD_EXP 30
16215: PPUSH
16216: LD_STRING 04_1_Kamil_L
16218: PPUSH
16219: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
16223: LD_EXP 32
16227: IFFALSE 16242
16229: PUSH
16230: LD_EXP 32
16234: PUSH
16235: LD_EXP 40
16239: IN
16240: NOT
16241: AND
16242: IFFALSE 16258
// SaveCharacters ( Sophia , 04_1_Sophia ) else
16244: LD_EXP 32
16248: PPUSH
16249: LD_STRING 04_1_Sophia
16251: PPUSH
16252: CALL_OW 38
16256: GO 16276
// if Sophia then
16258: LD_EXP 32
16262: IFFALSE 16276
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
16264: LD_EXP 32
16268: PPUSH
16269: LD_STRING 04_1_Sophia_L
16271: PPUSH
16272: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
16276: LD_EXP 31
16280: IFFALSE 16295
16282: PUSH
16283: LD_EXP 31
16287: PUSH
16288: LD_EXP 40
16292: IN
16293: NOT
16294: AND
16295: IFFALSE 16311
// SaveCharacters ( Kaia , 04_1_Kaia ) else
16297: LD_EXP 31
16301: PPUSH
16302: LD_STRING 04_1_Kaia
16304: PPUSH
16305: CALL_OW 38
16309: GO 16329
// if Kaia then
16311: LD_EXP 31
16315: IFFALSE 16329
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
16317: LD_EXP 31
16321: PPUSH
16322: LD_STRING 04_1_Kaia_L
16324: PPUSH
16325: CALL_OW 38
// if Givi then
16329: LD_EXP 27
16333: IFFALSE 16347
// SaveCharacters ( Givi , 04_1_Givi ) ;
16335: LD_EXP 27
16339: PPUSH
16340: LD_STRING 04_1_Givi
16342: PPUSH
16343: CALL_OW 38
// if Mike then
16347: LD_EXP 28
16351: IFFALSE 16365
// SaveCharacters ( Mike , 04_1_Mike ) ;
16353: LD_EXP 28
16357: PPUSH
16358: LD_STRING 04_1_Mike
16360: PPUSH
16361: CALL_OW 38
// if Markov then
16365: LD_EXP 33
16369: IFFALSE 16383
// SaveCharacters ( Markov , 04_1_Markov ) ;
16371: LD_EXP 33
16375: PPUSH
16376: LD_STRING 04_1_Markov
16378: PPUSH
16379: CALL_OW 38
// if Kurt then
16383: LD_EXP 35
16387: IFFALSE 16408
// begin SaveCharacters ( Kurt , 04_1_Kurt ) ;
16389: LD_EXP 35
16393: PPUSH
16394: LD_STRING 04_1_Kurt
16396: PPUSH
16397: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KURT) ) ;
16401: LD_STRING enableBioCharacter(BIO_KURT)
16403: PPUSH
16404: CALL_OW 559
// end ; if heikeSecondSquad diff aviradzeSquad then
16408: LD_EXP 38
16412: PUSH
16413: LD_EXP 40
16417: DIFF
16418: IFFALSE 16438
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
16420: LD_EXP 38
16424: PUSH
16425: LD_EXP 40
16429: DIFF
16430: PPUSH
16431: LD_STRING 04_1_others
16433: PPUSH
16434: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
16438: LD_EXP 40
16442: IFFALSE 16450
16444: PUSH
16445: LD_EXP 38
16449: AND
16450: IFFALSE 16535
// begin tmp := [ ] ;
16452: LD_ADDR_VAR 0 2
16456: PUSH
16457: EMPTY
16458: ST_TO_ADDR
// for i in heikeSecondSquad do
16459: LD_ADDR_VAR 0 1
16463: PUSH
16464: LD_EXP 38
16468: PUSH
16469: FOR_IN
16470: IFFALSE 16515
// if i in aviradzeSquad then
16472: LD_VAR 0 1
16476: PUSH
16477: LD_EXP 40
16481: IN
16482: IFFALSE 16513
// tmp := Replace ( tmp , tmp + 1 , i ) ;
16484: LD_ADDR_VAR 0 2
16488: PUSH
16489: LD_VAR 0 2
16493: PPUSH
16494: LD_VAR 0 2
16498: PUSH
16499: LD_INT 1
16501: PLUS
16502: PPUSH
16503: LD_VAR 0 1
16507: PPUSH
16508: CALL_OW 1
16512: ST_TO_ADDR
16513: GO 16469
16515: POP
16516: POP
// if tmp then
16517: LD_VAR 0 2
16521: IFFALSE 16535
// SaveCharacters ( tmp , 04_1_others_L ) ;
16523: LD_VAR 0 2
16527: PPUSH
16528: LD_STRING 04_1_others_L
16530: PPUSH
16531: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
16535: LD_ADDR_VAR 0 2
16539: PUSH
16540: LD_INT 22
16542: PUSH
16543: LD_INT 2
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: LD_INT 23
16552: PUSH
16553: LD_INT 0
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: PPUSH
16564: CALL_OW 69
16568: ST_TO_ADDR
// if tmp then
16569: LD_VAR 0 2
16573: IFFALSE 16587
// SaveCharacters ( tmp , 04_1_apes ) ;
16575: LD_VAR 0 2
16579: PPUSH
16580: LD_STRING 04_1_apes
16582: PPUSH
16583: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
16587: LD_ADDR_VAR 0 2
16591: PUSH
16592: LD_INT 17
16594: PPUSH
16595: LD_INT 21
16597: PUSH
16598: LD_INT 2
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PPUSH
16605: CALL_OW 70
16609: ST_TO_ADDR
// if tmp then
16610: LD_VAR 0 2
16614: IFFALSE 16958
// begin tmp2 := [ ] ;
16616: LD_ADDR_VAR 0 3
16620: PUSH
16621: EMPTY
16622: ST_TO_ADDR
// for i in tmp do
16623: LD_ADDR_VAR 0 1
16627: PUSH
16628: LD_VAR 0 2
16632: PUSH
16633: FOR_IN
16634: IFFALSE 16944
// begin driver := IsDrivenBy ( i ) ;
16636: LD_ADDR_VAR 0 5
16640: PUSH
16641: LD_VAR 0 1
16645: PPUSH
16646: CALL_OW 311
16650: ST_TO_ADDR
// if not driver then
16651: LD_VAR 0 5
16655: NOT
16656: IFFALSE 16660
// continue ;
16658: GO 16633
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay ] then
16660: LD_VAR 0 1
16664: PPUSH
16665: CALL_OW 264
16669: PUSH
16670: LD_INT 32
16672: PUSH
16673: LD_INT 12
16675: PUSH
16676: LD_INT 51
16678: PUSH
16679: LD_INT 89
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: IN
16688: IFFALSE 16836
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
16690: LD_ADDR_VAR 0 4
16694: PUSH
16695: LD_VAR 0 1
16699: PPUSH
16700: LD_INT 1
16702: PPUSH
16703: CALL_OW 289
16707: PUSH
16708: LD_VAR 0 1
16712: PPUSH
16713: LD_INT 2
16715: PPUSH
16716: CALL_OW 289
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo , GetClass ( driver ) ] ) ;
16725: LD_ADDR_VAR 0 3
16729: PUSH
16730: LD_VAR 0 3
16734: PPUSH
16735: LD_VAR 0 3
16739: PUSH
16740: LD_INT 1
16742: PLUS
16743: PPUSH
16744: LD_VAR 0 1
16748: PPUSH
16749: CALL_OW 265
16753: PUSH
16754: LD_VAR 0 1
16758: PPUSH
16759: CALL_OW 262
16763: PUSH
16764: LD_VAR 0 1
16768: PPUSH
16769: CALL_OW 263
16773: PUSH
16774: LD_VAR 0 1
16778: PPUSH
16779: CALL_OW 264
16783: PUSH
16784: LD_VAR 0 1
16788: PPUSH
16789: CALL_OW 248
16793: PUSH
16794: LD_VAR 0 1
16798: PPUSH
16799: CALL_OW 256
16803: PUSH
16804: LD_VAR 0 4
16808: PUSH
16809: LD_VAR 0 5
16813: PPUSH
16814: CALL_OW 257
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: PPUSH
16829: CALL_OW 1
16833: ST_TO_ADDR
// end else
16834: GO 16942
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] , GetClass ( driver ) ] ) ;
16836: LD_ADDR_VAR 0 3
16840: PUSH
16841: LD_VAR 0 3
16845: PPUSH
16846: LD_VAR 0 3
16850: PUSH
16851: LD_INT 1
16853: PLUS
16854: PPUSH
16855: LD_VAR 0 1
16859: PPUSH
16860: CALL_OW 265
16864: PUSH
16865: LD_VAR 0 1
16869: PPUSH
16870: CALL_OW 262
16874: PUSH
16875: LD_VAR 0 1
16879: PPUSH
16880: CALL_OW 263
16884: PUSH
16885: LD_VAR 0 1
16889: PPUSH
16890: CALL_OW 264
16894: PUSH
16895: LD_VAR 0 1
16899: PPUSH
16900: CALL_OW 248
16904: PUSH
16905: LD_VAR 0 1
16909: PPUSH
16910: CALL_OW 256
16914: PUSH
16915: EMPTY
16916: PUSH
16917: LD_VAR 0 5
16921: PPUSH
16922: CALL_OW 257
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: PPUSH
16937: CALL_OW 1
16941: ST_TO_ADDR
// end ;
16942: GO 16633
16944: POP
16945: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
16946: LD_VAR 0 3
16950: PPUSH
16951: LD_STRING 04_1_Vehicles
16953: PPUSH
16954: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
16958: LD_EXP 21
16962: PPUSH
16963: LD_STRING 04_1_RuLabCaptured
16965: PPUSH
16966: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
16970: LD_EXP 19
16974: PPUSH
16975: LD_STRING 04_1_EscapeCounter
16977: PPUSH
16978: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
16982: LD_EXP 15
16986: PPUSH
16987: LD_STRING 04_1_BaseHill
16989: PPUSH
16990: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
16994: LD_OWVAR 1
16998: PPUSH
16999: LD_STRING 04_1_Time
17001: PPUSH
17002: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
17006: LD_EXP 14
17010: PPUSH
17011: LD_STRING 04_1_DeadCounter
17013: PPUSH
17014: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
17018: LD_EXP 24
17022: PUSH
17023: LD_INT 112
17025: PPUSH
17026: CALL_OW 255
17030: MUL
17031: PUSH
17032: LD_INT 2
17034: EQUAL
17035: PPUSH
17036: LD_STRING 04_1_KaganCaptured
17038: PPUSH
17039: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
17043: LD_INT 22
17045: PUSH
17046: LD_INT 2
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 34
17055: PUSH
17056: LD_INT 26
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PPUSH
17067: CALL_OW 69
17071: PUSH
17072: LD_INT 0
17074: PLUS
17075: PPUSH
17076: LD_STRING 04_1_Flamethrower
17078: PPUSH
17079: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
17083: LD_INT 1
17085: PPUSH
17086: LD_STRING __x1\04_cont2
17088: PPUSH
17089: CALL_OW 340
// end ; end_of_file
17093: PPOPN 5
17095: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
17096: LD_VAR 0 1
17100: PPUSH
17101: CALL_OW 266
17105: PUSH
17106: LD_INT 0
17108: EQUAL
17109: IFFALSE 17126
17111: PUSH
17112: LD_VAR 0 1
17116: PPUSH
17117: CALL_OW 255
17121: PUSH
17122: LD_INT 2
17124: EQUAL
17125: AND
17126: IFFALSE 17136
// baseConstructed := true ;
17128: LD_ADDR_EXP 3
17132: PUSH
17133: LD_INT 1
17135: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
17136: LD_VAR 0 1
17140: PPUSH
17141: CALL_OW 266
17145: PUSH
17146: LD_INT 6
17148: EQUAL
17149: IFFALSE 17166
17151: PUSH
17152: LD_VAR 0 1
17156: PPUSH
17157: CALL_OW 255
17161: PUSH
17162: LD_INT 2
17164: EQUAL
17165: AND
17166: IFFALSE 17176
// labConstructed := true ;
17168: LD_ADDR_EXP 4
17172: PUSH
17173: LD_INT 1
17175: ST_TO_ADDR
// end ;
17176: PPOPN 1
17178: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
17179: LD_VAR 0 1
17183: PPUSH
17184: CALL 34315 0 1
// if un = Heike then
17188: LD_VAR 0 1
17192: PUSH
17193: LD_EXP 26
17197: EQUAL
17198: IFFALSE 17207
// YouLost ( Heike ) ;
17200: LD_STRING Heike
17202: PPUSH
17203: CALL_OW 104
// if un = Omar then
17207: LD_VAR 0 1
17211: PUSH
17212: LD_EXP 34
17216: EQUAL
17217: IFFALSE 17226
// YouLost ( Omar ) ;
17219: LD_STRING Omar
17221: PPUSH
17222: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
17226: LD_VAR 0 1
17230: PUSH
17231: LD_INT 22
17233: PUSH
17234: LD_INT 2
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: PUSH
17241: LD_INT 23
17243: PUSH
17244: LD_INT 2
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: PUSH
17251: LD_INT 21
17253: PUSH
17254: LD_INT 1
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: LIST
17265: PPUSH
17266: CALL_OW 69
17270: IN
17271: IFFALSE 17287
// loseCounter := loseCounter + 1 ;
17273: LD_ADDR_EXP 14
17277: PUSH
17278: LD_EXP 14
17282: PUSH
17283: LD_INT 1
17285: PLUS
17286: ST_TO_ADDR
// if un = omikron then
17287: LD_VAR 0 1
17291: PUSH
17292: LD_INT 64
17294: EQUAL
17295: IFFALSE 17305
// omicronFall := true ;
17297: LD_ADDR_EXP 13
17301: PUSH
17302: LD_INT 1
17304: ST_TO_ADDR
// if un = kirov then
17305: LD_VAR 0 1
17309: PUSH
17310: LD_INT 71
17312: EQUAL
17313: IFFALSE 17330
// begin ChangeMissionObjectives ( KirovDone ) ;
17315: LD_STRING KirovDone
17317: PPUSH
17318: CALL_OW 337
// kirovDestroyed := true ;
17322: LD_ADDR_EXP 16
17326: PUSH
17327: LD_INT 1
17329: ST_TO_ADDR
// end ; if un = beria then
17330: LD_VAR 0 1
17334: PUSH
17335: LD_INT 106
17337: EQUAL
17338: IFFALSE 17355
// begin ChangeMissionObjectives ( BeriaDone ) ;
17340: LD_STRING BeriaDone
17342: PPUSH
17343: CALL_OW 337
// beriaDestroyed := true ;
17347: LD_ADDR_EXP 17
17351: PUSH
17352: LD_INT 1
17354: ST_TO_ADDR
// end ; if un = kagan then
17355: LD_VAR 0 1
17359: PUSH
17360: LD_INT 112
17362: EQUAL
17363: IFFALSE 17373
// kaganDestroyed := true ;
17365: LD_ADDR_EXP 18
17369: PUSH
17370: LD_INT 1
17372: ST_TO_ADDR
// if un in russianPatrol then
17373: LD_VAR 0 1
17377: PUSH
17378: LD_EXP 48
17382: IN
17383: IFFALSE 17401
// russianPatrol := russianPatrol diff un ;
17385: LD_ADDR_EXP 48
17389: PUSH
17390: LD_EXP 48
17394: PUSH
17395: LD_VAR 0 1
17399: DIFF
17400: ST_TO_ADDR
// if un in russianOmicronAttackers then
17401: LD_VAR 0 1
17405: PUSH
17406: LD_EXP 49
17410: IN
17411: IFFALSE 17429
// russianOmicronAttackers := russianOmicronAttackers diff un ;
17413: LD_ADDR_EXP 49
17417: PUSH
17418: LD_EXP 49
17422: PUSH
17423: LD_VAR 0 1
17427: DIFF
17428: ST_TO_ADDR
// end ;
17429: PPOPN 1
17431: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
17432: LD_INT 0
17434: PPUSH
17435: PPUSH
17436: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
17437: LD_VAR 0 1
17441: PUSH
17442: LD_INT 2
17444: PUSH
17445: LD_INT 22
17447: PUSH
17448: LD_INT 3
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: PUSH
17455: LD_INT 22
17457: PUSH
17458: LD_INT 4
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PUSH
17465: LD_INT 22
17467: PUSH
17468: LD_INT 6
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: PUSH
17481: LD_INT 30
17483: PUSH
17484: LD_INT 32
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: PPUSH
17495: CALL_OW 69
17499: IN
17500: IFFALSE 17673
// begin sol := UnitsInside ( un ) ;
17502: LD_ADDR_VAR 0 3
17506: PUSH
17507: LD_VAR 0 1
17511: PPUSH
17512: CALL_OW 313
17516: ST_TO_ADDR
// if not sol then
17517: LD_VAR 0 3
17521: NOT
17522: IFFALSE 17526
// exit ;
17524: GO 17673
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17526: LD_ADDR_VAR 0 4
17530: PUSH
17531: LD_INT 22
17533: PUSH
17534: LD_VAR 0 1
17538: PPUSH
17539: CALL_OW 255
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 2
17550: PUSH
17551: LD_INT 30
17553: PUSH
17554: LD_INT 4
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: PUSH
17561: LD_INT 30
17563: PUSH
17564: LD_INT 5
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: LIST
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PPUSH
17580: CALL_OW 69
17584: ST_TO_ADDR
// if not nearestBarracks then
17585: LD_VAR 0 4
17589: NOT
17590: IFFALSE 17594
// exit ;
17592: GO 17673
// for i in nearestBarracks do
17594: LD_ADDR_VAR 0 2
17598: PUSH
17599: LD_VAR 0 4
17603: PUSH
17604: FOR_IN
17605: IFFALSE 17640
// if UnitsInside ( i ) = 6 then
17607: LD_VAR 0 2
17611: PPUSH
17612: CALL_OW 313
17616: PUSH
17617: LD_INT 6
17619: EQUAL
17620: IFFALSE 17638
// nearestBarracks := nearestBarracks diff i ;
17622: LD_ADDR_VAR 0 4
17626: PUSH
17627: LD_VAR 0 4
17631: PUSH
17632: LD_VAR 0 2
17636: DIFF
17637: ST_TO_ADDR
17638: GO 17604
17640: POP
17641: POP
// if not nearestBarracks then
17642: LD_VAR 0 4
17646: NOT
17647: IFFALSE 17651
// exit ;
17649: GO 17673
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
17651: LD_VAR 0 3
17655: PUSH
17656: LD_INT 1
17658: ARRAY
17659: PPUSH
17660: LD_VAR 0 4
17664: PUSH
17665: LD_INT 1
17667: ARRAY
17668: PPUSH
17669: CALL_OW 120
// end ; end ;
17673: PPOPN 4
17675: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
17676: LD_INT 0
17678: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
17679: LD_EXP 8
17683: NOT
17684: IFTRUE 17693
17686: PUSH
17687: LD_EXP 5
17691: NOT
17692: OR
17693: IFFALSE 17697
// exit ;
17695: GO 17765
// for i in camAreas do
17697: LD_ADDR_VAR 0 5
17701: PUSH
17702: LD_EXP 8
17706: PUSH
17707: FOR_IN
17708: IFFALSE 17763
// if InArea ( x , y , i ) then
17710: LD_VAR 0 3
17714: PPUSH
17715: LD_VAR 0 4
17719: PPUSH
17720: LD_VAR 0 5
17724: PPUSH
17725: CALL_OW 309
17729: IFFALSE 17761
// begin SetAreaMapShow ( i , 0 ) ;
17731: LD_VAR 0 5
17735: PPUSH
17736: LD_INT 0
17738: PPUSH
17739: CALL_OW 424
// camAreas := camAreas diff i ;
17743: LD_ADDR_EXP 8
17747: PUSH
17748: LD_EXP 8
17752: PUSH
17753: LD_VAR 0 5
17757: DIFF
17758: ST_TO_ADDR
// break ;
17759: GO 17763
// end ;
17761: GO 17707
17763: POP
17764: POP
// end ;
17765: PPOPN 5
17767: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
17768: LD_VAR 0 1
17772: PUSH
17773: LD_INT 2
17775: EQUAL
17776: IFFALSE 17795
17778: PUSH
17779: LD_VAR 0 2
17783: PUSH
17784: LD_INT 5
17786: PUSH
17787: LD_INT 8
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: IN
17794: AND
17795: IFFALSE 17804
// YouLost ( Ally ) ;
17797: LD_STRING Ally
17799: PPUSH
17800: CALL_OW 104
// end ;
17804: PPOPN 2
17806: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
17807: LD_VAR 0 1
17811: PUSH
17812: LD_EXP 31
17816: EQUAL
17817: IFFALSE 17836
17819: PUSH
17820: LD_VAR 0 2
17824: PUSH
17825: LD_INT 3
17827: PUSH
17828: LD_INT 6
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: IN
17835: AND
17836: IFFALSE 17867
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
17838: LD_ADDR_EXP 23
17842: PUSH
17843: LD_VAR 0 1
17847: PPUSH
17848: CALL_OW 250
17852: PUSH
17853: LD_VAR 0 1
17857: PPUSH
17858: CALL_OW 251
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: ST_TO_ADDR
// end ;
17867: PPOPN 3
17869: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
17870: LD_VAR 0 1
17874: PPUSH
17875: LD_VAR 0 2
17879: PPUSH
17880: CALL 34373 0 2
// end ; end_of_file
17884: PPOPN 2
17886: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 , 10 ] [ Difficulty ] do
17887: LD_EXP 11
17891: NOT
17892: IFFALSE 17931
17894: PUSH
17895: LD_INT 12
17897: PPUSH
17898: LD_INT 1
17900: PPUSH
17901: CALL_OW 287
17905: PUSH
17906: LD_INT 20
17908: PUSH
17909: LD_INT 16
17911: PUSH
17912: LD_INT 12
17914: PUSH
17915: LD_INT 10
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: PUSH
17924: LD_OWVAR 67
17928: ARRAY
17929: LESS
17930: AND
17931: IFFALSE 17958
17933: GO 17935
17935: DISABLE
// begin enable ;
17936: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
17937: LD_INT 1
17939: PPUSH
17940: LD_INT 5
17942: PPUSH
17943: CALL_OW 12
17947: PPUSH
17948: LD_INT 12
17950: PPUSH
17951: LD_INT 1
17953: PPUSH
17954: CALL_OW 55
// end ;
17958: END
// every 1 1$20 trigger allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < 15 do
17959: LD_EXP 11
17963: IFFALSE 17981
17965: PUSH
17966: LD_INT 12
17968: PPUSH
17969: LD_INT 1
17971: PPUSH
17972: CALL_OW 287
17976: PUSH
17977: LD_INT 15
17979: LESS
17980: AND
17981: IFFALSE 18008
17983: GO 17985
17985: DISABLE
// begin enable ;
17986: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
17987: LD_INT 1
17989: PPUSH
17990: LD_INT 5
17992: PPUSH
17993: CALL_OW 12
17997: PPUSH
17998: LD_INT 12
18000: PPUSH
18001: LD_INT 1
18003: PPUSH
18004: CALL_OW 55
// end ; end_of_file
18008: END
// every 0 0$1 trigger omarCountdown do
18009: LD_EXP 22
18013: IFFALSE 18065
18015: GO 18017
18017: DISABLE
// begin enable ;
18018: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
18019: LD_ADDR_OWVAR 47
18023: PUSH
18024: LD_STRING #X104-1
18026: PUSH
18027: LD_EXP 22
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
18036: LD_ADDR_EXP 22
18040: PUSH
18041: LD_EXP 22
18045: PUSH
18046: LD_INT 35
18048: MINUS
18049: ST_TO_ADDR
// if not omarCountdown then
18050: LD_EXP 22
18054: NOT
18055: IFFALSE 18065
// display_strings :=  ;
18057: LD_ADDR_OWVAR 47
18061: PUSH
18062: LD_STRING 
18064: ST_TO_ADDR
// end ; end_of_file
18065: END
// export globalGameSaveCounter ; every 0 0$1 do
18066: GO 18068
18068: DISABLE
// begin enable ;
18069: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18070: LD_STRING updateTimer(
18072: PUSH
18073: LD_OWVAR 1
18077: STR
18078: PUSH
18079: LD_STRING );
18081: STR
18082: PPUSH
18083: CALL_OW 559
// end ;
18087: END
// every 0 0$1 do
18088: GO 18090
18090: DISABLE
// begin globalGameSaveCounter := 0 ;
18091: LD_ADDR_EXP 53
18095: PUSH
18096: LD_INT 0
18098: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
18099: LD_STRING setGameSaveCounter(0)
18101: PPUSH
18102: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
18106: LD_STRING initStreamRollete();
18108: PPUSH
18109: CALL_OW 559
// InitStreamMode ;
18113: CALL 19465 0 0
// DefineStreamItems ( false ) ;
18117: LD_INT 0
18119: PPUSH
18120: CALL 19929 0 1
// end ;
18124: END
// export function SOS_MapStart ( ) ; begin
18125: LD_INT 0
18127: PPUSH
// if streamModeActive then
18128: LD_EXP 54
18132: IFFALSE 18141
// DefineStreamItems ( true ) ;
18134: LD_INT 1
18136: PPUSH
18137: CALL 19929 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
18141: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
18143: PPUSH
18144: CALL_OW 559
// UpdateLuaVariables ( ) ;
18148: CALL 18165 0 0
// UpdateFactoryWaypoints ( ) ;
18152: CALL 33051 0 0
// UpdateWarehouseGatheringPoints ( ) ;
18156: CALL 33303 0 0
// end ;
18160: LD_VAR 0 1
18164: RET
// function UpdateLuaVariables ( ) ; begin
18165: LD_INT 0
18167: PPUSH
// if globalGameSaveCounter then
18168: LD_EXP 53
18172: IFFALSE 18206
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
18174: LD_ADDR_EXP 53
18178: PUSH
18179: LD_EXP 53
18183: PPUSH
18184: CALL 80362 0 1
18188: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
18189: LD_STRING setGameSaveCounter(
18191: PUSH
18192: LD_EXP 53
18196: STR
18197: PUSH
18198: LD_STRING )
18200: STR
18201: PPUSH
18202: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
18206: LD_STRING setGameDifficulty(
18208: PUSH
18209: LD_OWVAR 67
18213: STR
18214: PUSH
18215: LD_STRING )
18217: STR
18218: PPUSH
18219: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
18223: LD_STRING displayDifficulty(
18225: PUSH
18226: LD_OWVAR 67
18230: STR
18231: PUSH
18232: LD_STRING )
18234: STR
18235: PPUSH
18236: CALL_OW 559
// end ;
18240: LD_VAR 0 1
18244: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18245: LD_INT 0
18247: PPUSH
// if p2 = stream_mode then
18248: LD_VAR 0 2
18252: PUSH
18253: LD_INT 100
18255: EQUAL
18256: IFFALSE 19259
// begin if not StreamModeActive then
18258: LD_EXP 54
18262: NOT
18263: IFFALSE 18273
// StreamModeActive := true ;
18265: LD_ADDR_EXP 54
18269: PUSH
18270: LD_INT 1
18272: ST_TO_ADDR
// if p3 = 0 then
18273: LD_VAR 0 3
18277: PUSH
18278: LD_INT 0
18280: EQUAL
18281: IFFALSE 18287
// InitStreamMode ;
18283: CALL 19465 0 0
// if p3 = 1 then
18287: LD_VAR 0 3
18291: PUSH
18292: LD_INT 1
18294: EQUAL
18295: IFFALSE 18305
// sRocket := true ;
18297: LD_ADDR_EXP 59
18301: PUSH
18302: LD_INT 1
18304: ST_TO_ADDR
// if p3 = 2 then
18305: LD_VAR 0 3
18309: PUSH
18310: LD_INT 2
18312: EQUAL
18313: IFFALSE 18323
// sSpeed := true ;
18315: LD_ADDR_EXP 58
18319: PUSH
18320: LD_INT 1
18322: ST_TO_ADDR
// if p3 = 3 then
18323: LD_VAR 0 3
18327: PUSH
18328: LD_INT 3
18330: EQUAL
18331: IFFALSE 18341
// sEngine := true ;
18333: LD_ADDR_EXP 60
18337: PUSH
18338: LD_INT 1
18340: ST_TO_ADDR
// if p3 = 4 then
18341: LD_VAR 0 3
18345: PUSH
18346: LD_INT 4
18348: EQUAL
18349: IFFALSE 18359
// sSpec := true ;
18351: LD_ADDR_EXP 57
18355: PUSH
18356: LD_INT 1
18358: ST_TO_ADDR
// if p3 = 5 then
18359: LD_VAR 0 3
18363: PUSH
18364: LD_INT 5
18366: EQUAL
18367: IFFALSE 18377
// sLevel := true ;
18369: LD_ADDR_EXP 61
18373: PUSH
18374: LD_INT 1
18376: ST_TO_ADDR
// if p3 = 6 then
18377: LD_VAR 0 3
18381: PUSH
18382: LD_INT 6
18384: EQUAL
18385: IFFALSE 18395
// sArmoury := true ;
18387: LD_ADDR_EXP 62
18391: PUSH
18392: LD_INT 1
18394: ST_TO_ADDR
// if p3 = 7 then
18395: LD_VAR 0 3
18399: PUSH
18400: LD_INT 7
18402: EQUAL
18403: IFFALSE 18413
// sRadar := true ;
18405: LD_ADDR_EXP 63
18409: PUSH
18410: LD_INT 1
18412: ST_TO_ADDR
// if p3 = 8 then
18413: LD_VAR 0 3
18417: PUSH
18418: LD_INT 8
18420: EQUAL
18421: IFFALSE 18431
// sBunker := true ;
18423: LD_ADDR_EXP 64
18427: PUSH
18428: LD_INT 1
18430: ST_TO_ADDR
// if p3 = 9 then
18431: LD_VAR 0 3
18435: PUSH
18436: LD_INT 9
18438: EQUAL
18439: IFFALSE 18449
// sHack := true ;
18441: LD_ADDR_EXP 65
18445: PUSH
18446: LD_INT 1
18448: ST_TO_ADDR
// if p3 = 10 then
18449: LD_VAR 0 3
18453: PUSH
18454: LD_INT 10
18456: EQUAL
18457: IFFALSE 18467
// sFire := true ;
18459: LD_ADDR_EXP 66
18463: PUSH
18464: LD_INT 1
18466: ST_TO_ADDR
// if p3 = 11 then
18467: LD_VAR 0 3
18471: PUSH
18472: LD_INT 11
18474: EQUAL
18475: IFFALSE 18485
// sRefresh := true ;
18477: LD_ADDR_EXP 67
18481: PUSH
18482: LD_INT 1
18484: ST_TO_ADDR
// if p3 = 12 then
18485: LD_VAR 0 3
18489: PUSH
18490: LD_INT 12
18492: EQUAL
18493: IFFALSE 18503
// sExp := true ;
18495: LD_ADDR_EXP 68
18499: PUSH
18500: LD_INT 1
18502: ST_TO_ADDR
// if p3 = 13 then
18503: LD_VAR 0 3
18507: PUSH
18508: LD_INT 13
18510: EQUAL
18511: IFFALSE 18521
// sDepot := true ;
18513: LD_ADDR_EXP 69
18517: PUSH
18518: LD_INT 1
18520: ST_TO_ADDR
// if p3 = 14 then
18521: LD_VAR 0 3
18525: PUSH
18526: LD_INT 14
18528: EQUAL
18529: IFFALSE 18539
// sFlag := true ;
18531: LD_ADDR_EXP 70
18535: PUSH
18536: LD_INT 1
18538: ST_TO_ADDR
// if p3 = 15 then
18539: LD_VAR 0 3
18543: PUSH
18544: LD_INT 15
18546: EQUAL
18547: IFFALSE 18557
// sKamikadze := true ;
18549: LD_ADDR_EXP 78
18553: PUSH
18554: LD_INT 1
18556: ST_TO_ADDR
// if p3 = 16 then
18557: LD_VAR 0 3
18561: PUSH
18562: LD_INT 16
18564: EQUAL
18565: IFFALSE 18575
// sTroll := true ;
18567: LD_ADDR_EXP 79
18571: PUSH
18572: LD_INT 1
18574: ST_TO_ADDR
// if p3 = 17 then
18575: LD_VAR 0 3
18579: PUSH
18580: LD_INT 17
18582: EQUAL
18583: IFFALSE 18593
// sSlow := true ;
18585: LD_ADDR_EXP 80
18589: PUSH
18590: LD_INT 1
18592: ST_TO_ADDR
// if p3 = 18 then
18593: LD_VAR 0 3
18597: PUSH
18598: LD_INT 18
18600: EQUAL
18601: IFFALSE 18611
// sLack := true ;
18603: LD_ADDR_EXP 81
18607: PUSH
18608: LD_INT 1
18610: ST_TO_ADDR
// if p3 = 19 then
18611: LD_VAR 0 3
18615: PUSH
18616: LD_INT 19
18618: EQUAL
18619: IFFALSE 18629
// sTank := true ;
18621: LD_ADDR_EXP 83
18625: PUSH
18626: LD_INT 1
18628: ST_TO_ADDR
// if p3 = 20 then
18629: LD_VAR 0 3
18633: PUSH
18634: LD_INT 20
18636: EQUAL
18637: IFFALSE 18647
// sRemote := true ;
18639: LD_ADDR_EXP 84
18643: PUSH
18644: LD_INT 1
18646: ST_TO_ADDR
// if p3 = 21 then
18647: LD_VAR 0 3
18651: PUSH
18652: LD_INT 21
18654: EQUAL
18655: IFFALSE 18665
// sPowell := true ;
18657: LD_ADDR_EXP 85
18661: PUSH
18662: LD_INT 1
18664: ST_TO_ADDR
// if p3 = 22 then
18665: LD_VAR 0 3
18669: PUSH
18670: LD_INT 22
18672: EQUAL
18673: IFFALSE 18683
// sTeleport := true ;
18675: LD_ADDR_EXP 88
18679: PUSH
18680: LD_INT 1
18682: ST_TO_ADDR
// if p3 = 23 then
18683: LD_VAR 0 3
18687: PUSH
18688: LD_INT 23
18690: EQUAL
18691: IFFALSE 18701
// sOilTower := true ;
18693: LD_ADDR_EXP 90
18697: PUSH
18698: LD_INT 1
18700: ST_TO_ADDR
// if p3 = 24 then
18701: LD_VAR 0 3
18705: PUSH
18706: LD_INT 24
18708: EQUAL
18709: IFFALSE 18719
// sShovel := true ;
18711: LD_ADDR_EXP 91
18715: PUSH
18716: LD_INT 1
18718: ST_TO_ADDR
// if p3 = 25 then
18719: LD_VAR 0 3
18723: PUSH
18724: LD_INT 25
18726: EQUAL
18727: IFFALSE 18737
// sSheik := true ;
18729: LD_ADDR_EXP 92
18733: PUSH
18734: LD_INT 1
18736: ST_TO_ADDR
// if p3 = 26 then
18737: LD_VAR 0 3
18741: PUSH
18742: LD_INT 26
18744: EQUAL
18745: IFFALSE 18755
// sEarthquake := true ;
18747: LD_ADDR_EXP 94
18751: PUSH
18752: LD_INT 1
18754: ST_TO_ADDR
// if p3 = 27 then
18755: LD_VAR 0 3
18759: PUSH
18760: LD_INT 27
18762: EQUAL
18763: IFFALSE 18773
// sAI := true ;
18765: LD_ADDR_EXP 95
18769: PUSH
18770: LD_INT 1
18772: ST_TO_ADDR
// if p3 = 28 then
18773: LD_VAR 0 3
18777: PUSH
18778: LD_INT 28
18780: EQUAL
18781: IFFALSE 18791
// sCargo := true ;
18783: LD_ADDR_EXP 98
18787: PUSH
18788: LD_INT 1
18790: ST_TO_ADDR
// if p3 = 29 then
18791: LD_VAR 0 3
18795: PUSH
18796: LD_INT 29
18798: EQUAL
18799: IFFALSE 18809
// sDLaser := true ;
18801: LD_ADDR_EXP 99
18805: PUSH
18806: LD_INT 1
18808: ST_TO_ADDR
// if p3 = 30 then
18809: LD_VAR 0 3
18813: PUSH
18814: LD_INT 30
18816: EQUAL
18817: IFFALSE 18827
// sExchange := true ;
18819: LD_ADDR_EXP 100
18823: PUSH
18824: LD_INT 1
18826: ST_TO_ADDR
// if p3 = 31 then
18827: LD_VAR 0 3
18831: PUSH
18832: LD_INT 31
18834: EQUAL
18835: IFFALSE 18845
// sFac := true ;
18837: LD_ADDR_EXP 101
18841: PUSH
18842: LD_INT 1
18844: ST_TO_ADDR
// if p3 = 32 then
18845: LD_VAR 0 3
18849: PUSH
18850: LD_INT 32
18852: EQUAL
18853: IFFALSE 18863
// sPower := true ;
18855: LD_ADDR_EXP 102
18859: PUSH
18860: LD_INT 1
18862: ST_TO_ADDR
// if p3 = 33 then
18863: LD_VAR 0 3
18867: PUSH
18868: LD_INT 33
18870: EQUAL
18871: IFFALSE 18881
// sRandom := true ;
18873: LD_ADDR_EXP 103
18877: PUSH
18878: LD_INT 1
18880: ST_TO_ADDR
// if p3 = 34 then
18881: LD_VAR 0 3
18885: PUSH
18886: LD_INT 34
18888: EQUAL
18889: IFFALSE 18899
// sShield := true ;
18891: LD_ADDR_EXP 104
18895: PUSH
18896: LD_INT 1
18898: ST_TO_ADDR
// if p3 = 35 then
18899: LD_VAR 0 3
18903: PUSH
18904: LD_INT 35
18906: EQUAL
18907: IFFALSE 18917
// sTime := true ;
18909: LD_ADDR_EXP 105
18913: PUSH
18914: LD_INT 1
18916: ST_TO_ADDR
// if p3 = 36 then
18917: LD_VAR 0 3
18921: PUSH
18922: LD_INT 36
18924: EQUAL
18925: IFFALSE 18935
// sTools := true ;
18927: LD_ADDR_EXP 106
18931: PUSH
18932: LD_INT 1
18934: ST_TO_ADDR
// if p3 = 101 then
18935: LD_VAR 0 3
18939: PUSH
18940: LD_INT 101
18942: EQUAL
18943: IFFALSE 18953
// sSold := true ;
18945: LD_ADDR_EXP 71
18949: PUSH
18950: LD_INT 1
18952: ST_TO_ADDR
// if p3 = 102 then
18953: LD_VAR 0 3
18957: PUSH
18958: LD_INT 102
18960: EQUAL
18961: IFFALSE 18971
// sDiff := true ;
18963: LD_ADDR_EXP 72
18967: PUSH
18968: LD_INT 1
18970: ST_TO_ADDR
// if p3 = 103 then
18971: LD_VAR 0 3
18975: PUSH
18976: LD_INT 103
18978: EQUAL
18979: IFFALSE 18989
// sFog := true ;
18981: LD_ADDR_EXP 75
18985: PUSH
18986: LD_INT 1
18988: ST_TO_ADDR
// if p3 = 104 then
18989: LD_VAR 0 3
18993: PUSH
18994: LD_INT 104
18996: EQUAL
18997: IFFALSE 19007
// sReset := true ;
18999: LD_ADDR_EXP 76
19003: PUSH
19004: LD_INT 1
19006: ST_TO_ADDR
// if p3 = 105 then
19007: LD_VAR 0 3
19011: PUSH
19012: LD_INT 105
19014: EQUAL
19015: IFFALSE 19025
// sSun := true ;
19017: LD_ADDR_EXP 77
19021: PUSH
19022: LD_INT 1
19024: ST_TO_ADDR
// if p3 = 106 then
19025: LD_VAR 0 3
19029: PUSH
19030: LD_INT 106
19032: EQUAL
19033: IFFALSE 19043
// sTiger := true ;
19035: LD_ADDR_EXP 73
19039: PUSH
19040: LD_INT 1
19042: ST_TO_ADDR
// if p3 = 107 then
19043: LD_VAR 0 3
19047: PUSH
19048: LD_INT 107
19050: EQUAL
19051: IFFALSE 19061
// sBomb := true ;
19053: LD_ADDR_EXP 74
19057: PUSH
19058: LD_INT 1
19060: ST_TO_ADDR
// if p3 = 108 then
19061: LD_VAR 0 3
19065: PUSH
19066: LD_INT 108
19068: EQUAL
19069: IFFALSE 19079
// sWound := true ;
19071: LD_ADDR_EXP 82
19075: PUSH
19076: LD_INT 1
19078: ST_TO_ADDR
// if p3 = 109 then
19079: LD_VAR 0 3
19083: PUSH
19084: LD_INT 109
19086: EQUAL
19087: IFFALSE 19097
// sBetray := true ;
19089: LD_ADDR_EXP 86
19093: PUSH
19094: LD_INT 1
19096: ST_TO_ADDR
// if p3 = 110 then
19097: LD_VAR 0 3
19101: PUSH
19102: LD_INT 110
19104: EQUAL
19105: IFFALSE 19115
// sContamin := true ;
19107: LD_ADDR_EXP 87
19111: PUSH
19112: LD_INT 1
19114: ST_TO_ADDR
// if p3 = 111 then
19115: LD_VAR 0 3
19119: PUSH
19120: LD_INT 111
19122: EQUAL
19123: IFFALSE 19133
// sOil := true ;
19125: LD_ADDR_EXP 89
19129: PUSH
19130: LD_INT 1
19132: ST_TO_ADDR
// if p3 = 112 then
19133: LD_VAR 0 3
19137: PUSH
19138: LD_INT 112
19140: EQUAL
19141: IFFALSE 19151
// sStu := true ;
19143: LD_ADDR_EXP 93
19147: PUSH
19148: LD_INT 1
19150: ST_TO_ADDR
// if p3 = 113 then
19151: LD_VAR 0 3
19155: PUSH
19156: LD_INT 113
19158: EQUAL
19159: IFFALSE 19169
// sBazooka := true ;
19161: LD_ADDR_EXP 96
19165: PUSH
19166: LD_INT 1
19168: ST_TO_ADDR
// if p3 = 114 then
19169: LD_VAR 0 3
19173: PUSH
19174: LD_INT 114
19176: EQUAL
19177: IFFALSE 19187
// sMortar := true ;
19179: LD_ADDR_EXP 97
19183: PUSH
19184: LD_INT 1
19186: ST_TO_ADDR
// if p3 = 115 then
19187: LD_VAR 0 3
19191: PUSH
19192: LD_INT 115
19194: EQUAL
19195: IFFALSE 19205
// sRanger := true ;
19197: LD_ADDR_EXP 107
19201: PUSH
19202: LD_INT 1
19204: ST_TO_ADDR
// if p3 = 116 then
19205: LD_VAR 0 3
19209: PUSH
19210: LD_INT 116
19212: EQUAL
19213: IFFALSE 19223
// sComputer := true ;
19215: LD_ADDR_EXP 108
19219: PUSH
19220: LD_INT 1
19222: ST_TO_ADDR
// if p3 = 117 then
19223: LD_VAR 0 3
19227: PUSH
19228: LD_INT 117
19230: EQUAL
19231: IFFALSE 19241
// s30 := true ;
19233: LD_ADDR_EXP 109
19237: PUSH
19238: LD_INT 1
19240: ST_TO_ADDR
// if p3 = 118 then
19241: LD_VAR 0 3
19245: PUSH
19246: LD_INT 118
19248: EQUAL
19249: IFFALSE 19259
// s60 := true ;
19251: LD_ADDR_EXP 110
19255: PUSH
19256: LD_INT 1
19258: ST_TO_ADDR
// end ; if p2 = hack_mode then
19259: LD_VAR 0 2
19263: PUSH
19264: LD_INT 101
19266: EQUAL
19267: IFFALSE 19395
// begin case p3 of 1 :
19269: LD_VAR 0 3
19273: PUSH
19274: LD_INT 1
19276: DOUBLE
19277: EQUAL
19278: IFTRUE 19282
19280: GO 19289
19282: POP
// hHackUnlimitedResources ; 2 :
19283: CALL 31658 0 0
19287: GO 19395
19289: LD_INT 2
19291: DOUBLE
19292: EQUAL
19293: IFTRUE 19297
19295: GO 19304
19297: POP
// hHackSetLevel10 ; 3 :
19298: CALL 31791 0 0
19302: GO 19395
19304: LD_INT 3
19306: DOUBLE
19307: EQUAL
19308: IFTRUE 19312
19310: GO 19319
19312: POP
// hHackSetLevel10YourUnits ; 4 :
19313: CALL 31876 0 0
19317: GO 19395
19319: LD_INT 4
19321: DOUBLE
19322: EQUAL
19323: IFTRUE 19327
19325: GO 19334
19327: POP
// hHackInvincible ; 5 :
19328: CALL 32324 0 0
19332: GO 19395
19334: LD_INT 5
19336: DOUBLE
19337: EQUAL
19338: IFTRUE 19342
19340: GO 19349
19342: POP
// hHackInvisible ; 6 :
19343: CALL 32435 0 0
19347: GO 19395
19349: LD_INT 6
19351: DOUBLE
19352: EQUAL
19353: IFTRUE 19357
19355: GO 19364
19357: POP
// hHackChangeYourSide ; 7 :
19358: CALL 32492 0 0
19362: GO 19395
19364: LD_INT 7
19366: DOUBLE
19367: EQUAL
19368: IFTRUE 19372
19370: GO 19379
19372: POP
// hHackChangeUnitSide ; 8 :
19373: CALL 32534 0 0
19377: GO 19395
19379: LD_INT 8
19381: DOUBLE
19382: EQUAL
19383: IFTRUE 19387
19385: GO 19394
19387: POP
// hHackFog ; end ;
19388: CALL 32635 0 0
19392: GO 19395
19394: POP
// end ; if p2 = game_save_mode then
19395: LD_VAR 0 2
19399: PUSH
19400: LD_INT 102
19402: EQUAL
19403: IFFALSE 19460
// begin if p3 = 1 then
19405: LD_VAR 0 3
19409: PUSH
19410: LD_INT 1
19412: EQUAL
19413: IFFALSE 19425
// globalGameSaveCounter := p4 ;
19415: LD_ADDR_EXP 53
19419: PUSH
19420: LD_VAR 0 4
19424: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
19425: LD_VAR 0 3
19429: PUSH
19430: LD_INT 2
19432: EQUAL
19433: IFFALSE 19441
19435: PUSH
19436: LD_EXP 53
19440: AND
19441: IFFALSE 19460
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19443: LD_STRING setGameSaveCounter(
19445: PUSH
19446: LD_EXP 53
19450: STR
19451: PUSH
19452: LD_STRING )
19454: STR
19455: PPUSH
19456: CALL_OW 559
// end ; end ;
19460: LD_VAR 0 7
19464: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
19465: LD_INT 0
19467: PPUSH
// streamModeActive := false ;
19468: LD_ADDR_EXP 54
19472: PUSH
19473: LD_INT 0
19475: ST_TO_ADDR
// normalCounter := 36 ;
19476: LD_ADDR_EXP 55
19480: PUSH
19481: LD_INT 36
19483: ST_TO_ADDR
// hardcoreCounter := 18 ;
19484: LD_ADDR_EXP 56
19488: PUSH
19489: LD_INT 18
19491: ST_TO_ADDR
// sRocket := false ;
19492: LD_ADDR_EXP 59
19496: PUSH
19497: LD_INT 0
19499: ST_TO_ADDR
// sSpeed := false ;
19500: LD_ADDR_EXP 58
19504: PUSH
19505: LD_INT 0
19507: ST_TO_ADDR
// sEngine := false ;
19508: LD_ADDR_EXP 60
19512: PUSH
19513: LD_INT 0
19515: ST_TO_ADDR
// sSpec := false ;
19516: LD_ADDR_EXP 57
19520: PUSH
19521: LD_INT 0
19523: ST_TO_ADDR
// sLevel := false ;
19524: LD_ADDR_EXP 61
19528: PUSH
19529: LD_INT 0
19531: ST_TO_ADDR
// sArmoury := false ;
19532: LD_ADDR_EXP 62
19536: PUSH
19537: LD_INT 0
19539: ST_TO_ADDR
// sRadar := false ;
19540: LD_ADDR_EXP 63
19544: PUSH
19545: LD_INT 0
19547: ST_TO_ADDR
// sBunker := false ;
19548: LD_ADDR_EXP 64
19552: PUSH
19553: LD_INT 0
19555: ST_TO_ADDR
// sHack := false ;
19556: LD_ADDR_EXP 65
19560: PUSH
19561: LD_INT 0
19563: ST_TO_ADDR
// sFire := false ;
19564: LD_ADDR_EXP 66
19568: PUSH
19569: LD_INT 0
19571: ST_TO_ADDR
// sRefresh := false ;
19572: LD_ADDR_EXP 67
19576: PUSH
19577: LD_INT 0
19579: ST_TO_ADDR
// sExp := false ;
19580: LD_ADDR_EXP 68
19584: PUSH
19585: LD_INT 0
19587: ST_TO_ADDR
// sDepot := false ;
19588: LD_ADDR_EXP 69
19592: PUSH
19593: LD_INT 0
19595: ST_TO_ADDR
// sFlag := false ;
19596: LD_ADDR_EXP 70
19600: PUSH
19601: LD_INT 0
19603: ST_TO_ADDR
// sKamikadze := false ;
19604: LD_ADDR_EXP 78
19608: PUSH
19609: LD_INT 0
19611: ST_TO_ADDR
// sTroll := false ;
19612: LD_ADDR_EXP 79
19616: PUSH
19617: LD_INT 0
19619: ST_TO_ADDR
// sSlow := false ;
19620: LD_ADDR_EXP 80
19624: PUSH
19625: LD_INT 0
19627: ST_TO_ADDR
// sLack := false ;
19628: LD_ADDR_EXP 81
19632: PUSH
19633: LD_INT 0
19635: ST_TO_ADDR
// sTank := false ;
19636: LD_ADDR_EXP 83
19640: PUSH
19641: LD_INT 0
19643: ST_TO_ADDR
// sRemote := false ;
19644: LD_ADDR_EXP 84
19648: PUSH
19649: LD_INT 0
19651: ST_TO_ADDR
// sPowell := false ;
19652: LD_ADDR_EXP 85
19656: PUSH
19657: LD_INT 0
19659: ST_TO_ADDR
// sTeleport := false ;
19660: LD_ADDR_EXP 88
19664: PUSH
19665: LD_INT 0
19667: ST_TO_ADDR
// sOilTower := false ;
19668: LD_ADDR_EXP 90
19672: PUSH
19673: LD_INT 0
19675: ST_TO_ADDR
// sShovel := false ;
19676: LD_ADDR_EXP 91
19680: PUSH
19681: LD_INT 0
19683: ST_TO_ADDR
// sSheik := false ;
19684: LD_ADDR_EXP 92
19688: PUSH
19689: LD_INT 0
19691: ST_TO_ADDR
// sEarthquake := false ;
19692: LD_ADDR_EXP 94
19696: PUSH
19697: LD_INT 0
19699: ST_TO_ADDR
// sAI := false ;
19700: LD_ADDR_EXP 95
19704: PUSH
19705: LD_INT 0
19707: ST_TO_ADDR
// sCargo := false ;
19708: LD_ADDR_EXP 98
19712: PUSH
19713: LD_INT 0
19715: ST_TO_ADDR
// sDLaser := false ;
19716: LD_ADDR_EXP 99
19720: PUSH
19721: LD_INT 0
19723: ST_TO_ADDR
// sExchange := false ;
19724: LD_ADDR_EXP 100
19728: PUSH
19729: LD_INT 0
19731: ST_TO_ADDR
// sFac := false ;
19732: LD_ADDR_EXP 101
19736: PUSH
19737: LD_INT 0
19739: ST_TO_ADDR
// sPower := false ;
19740: LD_ADDR_EXP 102
19744: PUSH
19745: LD_INT 0
19747: ST_TO_ADDR
// sRandom := false ;
19748: LD_ADDR_EXP 103
19752: PUSH
19753: LD_INT 0
19755: ST_TO_ADDR
// sShield := false ;
19756: LD_ADDR_EXP 104
19760: PUSH
19761: LD_INT 0
19763: ST_TO_ADDR
// sTime := false ;
19764: LD_ADDR_EXP 105
19768: PUSH
19769: LD_INT 0
19771: ST_TO_ADDR
// sTools := false ;
19772: LD_ADDR_EXP 106
19776: PUSH
19777: LD_INT 0
19779: ST_TO_ADDR
// sSold := false ;
19780: LD_ADDR_EXP 71
19784: PUSH
19785: LD_INT 0
19787: ST_TO_ADDR
// sDiff := false ;
19788: LD_ADDR_EXP 72
19792: PUSH
19793: LD_INT 0
19795: ST_TO_ADDR
// sFog := false ;
19796: LD_ADDR_EXP 75
19800: PUSH
19801: LD_INT 0
19803: ST_TO_ADDR
// sReset := false ;
19804: LD_ADDR_EXP 76
19808: PUSH
19809: LD_INT 0
19811: ST_TO_ADDR
// sSun := false ;
19812: LD_ADDR_EXP 77
19816: PUSH
19817: LD_INT 0
19819: ST_TO_ADDR
// sTiger := false ;
19820: LD_ADDR_EXP 73
19824: PUSH
19825: LD_INT 0
19827: ST_TO_ADDR
// sBomb := false ;
19828: LD_ADDR_EXP 74
19832: PUSH
19833: LD_INT 0
19835: ST_TO_ADDR
// sWound := false ;
19836: LD_ADDR_EXP 82
19840: PUSH
19841: LD_INT 0
19843: ST_TO_ADDR
// sBetray := false ;
19844: LD_ADDR_EXP 86
19848: PUSH
19849: LD_INT 0
19851: ST_TO_ADDR
// sContamin := false ;
19852: LD_ADDR_EXP 87
19856: PUSH
19857: LD_INT 0
19859: ST_TO_ADDR
// sOil := false ;
19860: LD_ADDR_EXP 89
19864: PUSH
19865: LD_INT 0
19867: ST_TO_ADDR
// sStu := false ;
19868: LD_ADDR_EXP 93
19872: PUSH
19873: LD_INT 0
19875: ST_TO_ADDR
// sBazooka := false ;
19876: LD_ADDR_EXP 96
19880: PUSH
19881: LD_INT 0
19883: ST_TO_ADDR
// sMortar := false ;
19884: LD_ADDR_EXP 97
19888: PUSH
19889: LD_INT 0
19891: ST_TO_ADDR
// sRanger := false ;
19892: LD_ADDR_EXP 107
19896: PUSH
19897: LD_INT 0
19899: ST_TO_ADDR
// sComputer := false ;
19900: LD_ADDR_EXP 108
19904: PUSH
19905: LD_INT 0
19907: ST_TO_ADDR
// s30 := false ;
19908: LD_ADDR_EXP 109
19912: PUSH
19913: LD_INT 0
19915: ST_TO_ADDR
// s60 := false ;
19916: LD_ADDR_EXP 110
19920: PUSH
19921: LD_INT 0
19923: ST_TO_ADDR
// end ;
19924: LD_VAR 0 1
19928: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
19929: LD_INT 0
19931: PPUSH
19932: PPUSH
19933: PPUSH
19934: PPUSH
19935: PPUSH
19936: PPUSH
19937: PPUSH
// result := [ ] ;
19938: LD_ADDR_VAR 0 2
19942: PUSH
19943: EMPTY
19944: ST_TO_ADDR
// if campaign_id = 1 then
19945: LD_OWVAR 69
19949: PUSH
19950: LD_INT 1
19952: EQUAL
19953: IFFALSE 23119
// begin case mission_number of 1 :
19955: LD_OWVAR 70
19959: PUSH
19960: LD_INT 1
19962: DOUBLE
19963: EQUAL
19964: IFTRUE 19968
19966: GO 20044
19968: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
19969: LD_ADDR_VAR 0 2
19973: PUSH
19974: LD_INT 2
19976: PUSH
19977: LD_INT 4
19979: PUSH
19980: LD_INT 11
19982: PUSH
19983: LD_INT 12
19985: PUSH
19986: LD_INT 15
19988: PUSH
19989: LD_INT 16
19991: PUSH
19992: LD_INT 22
19994: PUSH
19995: LD_INT 23
19997: PUSH
19998: LD_INT 26
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: PUSH
20012: LD_INT 101
20014: PUSH
20015: LD_INT 102
20017: PUSH
20018: LD_INT 106
20020: PUSH
20021: LD_INT 116
20023: PUSH
20024: LD_INT 117
20026: PUSH
20027: LD_INT 118
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: ST_TO_ADDR
20042: GO 23117
20044: LD_INT 2
20046: DOUBLE
20047: EQUAL
20048: IFTRUE 20052
20050: GO 20136
20052: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20053: LD_ADDR_VAR 0 2
20057: PUSH
20058: LD_INT 2
20060: PUSH
20061: LD_INT 4
20063: PUSH
20064: LD_INT 11
20066: PUSH
20067: LD_INT 12
20069: PUSH
20070: LD_INT 15
20072: PUSH
20073: LD_INT 16
20075: PUSH
20076: LD_INT 22
20078: PUSH
20079: LD_INT 23
20081: PUSH
20082: LD_INT 26
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: PUSH
20096: LD_INT 101
20098: PUSH
20099: LD_INT 102
20101: PUSH
20102: LD_INT 105
20104: PUSH
20105: LD_INT 106
20107: PUSH
20108: LD_INT 108
20110: PUSH
20111: LD_INT 116
20113: PUSH
20114: LD_INT 117
20116: PUSH
20117: LD_INT 118
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: ST_TO_ADDR
20134: GO 23117
20136: LD_INT 3
20138: DOUBLE
20139: EQUAL
20140: IFTRUE 20144
20142: GO 20232
20144: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20145: LD_ADDR_VAR 0 2
20149: PUSH
20150: LD_INT 2
20152: PUSH
20153: LD_INT 4
20155: PUSH
20156: LD_INT 5
20158: PUSH
20159: LD_INT 11
20161: PUSH
20162: LD_INT 12
20164: PUSH
20165: LD_INT 15
20167: PUSH
20168: LD_INT 16
20170: PUSH
20171: LD_INT 22
20173: PUSH
20174: LD_INT 26
20176: PUSH
20177: LD_INT 36
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 101
20194: PUSH
20195: LD_INT 102
20197: PUSH
20198: LD_INT 105
20200: PUSH
20201: LD_INT 106
20203: PUSH
20204: LD_INT 108
20206: PUSH
20207: LD_INT 116
20209: PUSH
20210: LD_INT 117
20212: PUSH
20213: LD_INT 118
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: ST_TO_ADDR
20230: GO 23117
20232: LD_INT 4
20234: DOUBLE
20235: EQUAL
20236: IFTRUE 20240
20238: GO 20336
20240: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20241: LD_ADDR_VAR 0 2
20245: PUSH
20246: LD_INT 2
20248: PUSH
20249: LD_INT 4
20251: PUSH
20252: LD_INT 5
20254: PUSH
20255: LD_INT 8
20257: PUSH
20258: LD_INT 11
20260: PUSH
20261: LD_INT 12
20263: PUSH
20264: LD_INT 15
20266: PUSH
20267: LD_INT 16
20269: PUSH
20270: LD_INT 22
20272: PUSH
20273: LD_INT 23
20275: PUSH
20276: LD_INT 26
20278: PUSH
20279: LD_INT 36
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 101
20298: PUSH
20299: LD_INT 102
20301: PUSH
20302: LD_INT 105
20304: PUSH
20305: LD_INT 106
20307: PUSH
20308: LD_INT 108
20310: PUSH
20311: LD_INT 116
20313: PUSH
20314: LD_INT 117
20316: PUSH
20317: LD_INT 118
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: ST_TO_ADDR
20334: GO 23117
20336: LD_INT 5
20338: DOUBLE
20339: EQUAL
20340: IFTRUE 20344
20342: GO 20456
20344: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20345: LD_ADDR_VAR 0 2
20349: PUSH
20350: LD_INT 2
20352: PUSH
20353: LD_INT 4
20355: PUSH
20356: LD_INT 5
20358: PUSH
20359: LD_INT 6
20361: PUSH
20362: LD_INT 8
20364: PUSH
20365: LD_INT 11
20367: PUSH
20368: LD_INT 12
20370: PUSH
20371: LD_INT 15
20373: PUSH
20374: LD_INT 16
20376: PUSH
20377: LD_INT 22
20379: PUSH
20380: LD_INT 23
20382: PUSH
20383: LD_INT 25
20385: PUSH
20386: LD_INT 26
20388: PUSH
20389: LD_INT 36
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 101
20410: PUSH
20411: LD_INT 102
20413: PUSH
20414: LD_INT 105
20416: PUSH
20417: LD_INT 106
20419: PUSH
20420: LD_INT 108
20422: PUSH
20423: LD_INT 109
20425: PUSH
20426: LD_INT 112
20428: PUSH
20429: LD_INT 116
20431: PUSH
20432: LD_INT 117
20434: PUSH
20435: LD_INT 118
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: ST_TO_ADDR
20454: GO 23117
20456: LD_INT 6
20458: DOUBLE
20459: EQUAL
20460: IFTRUE 20464
20462: GO 20596
20464: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20465: LD_ADDR_VAR 0 2
20469: PUSH
20470: LD_INT 2
20472: PUSH
20473: LD_INT 4
20475: PUSH
20476: LD_INT 5
20478: PUSH
20479: LD_INT 6
20481: PUSH
20482: LD_INT 8
20484: PUSH
20485: LD_INT 11
20487: PUSH
20488: LD_INT 12
20490: PUSH
20491: LD_INT 15
20493: PUSH
20494: LD_INT 16
20496: PUSH
20497: LD_INT 20
20499: PUSH
20500: LD_INT 21
20502: PUSH
20503: LD_INT 22
20505: PUSH
20506: LD_INT 23
20508: PUSH
20509: LD_INT 25
20511: PUSH
20512: LD_INT 26
20514: PUSH
20515: LD_INT 30
20517: PUSH
20518: LD_INT 31
20520: PUSH
20521: LD_INT 32
20523: PUSH
20524: LD_INT 36
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: PUSH
20548: LD_INT 101
20550: PUSH
20551: LD_INT 102
20553: PUSH
20554: LD_INT 105
20556: PUSH
20557: LD_INT 106
20559: PUSH
20560: LD_INT 108
20562: PUSH
20563: LD_INT 109
20565: PUSH
20566: LD_INT 112
20568: PUSH
20569: LD_INT 116
20571: PUSH
20572: LD_INT 117
20574: PUSH
20575: LD_INT 118
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: ST_TO_ADDR
20594: GO 23117
20596: LD_INT 7
20598: DOUBLE
20599: EQUAL
20600: IFTRUE 20604
20602: GO 20716
20604: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20605: LD_ADDR_VAR 0 2
20609: PUSH
20610: LD_INT 2
20612: PUSH
20613: LD_INT 4
20615: PUSH
20616: LD_INT 5
20618: PUSH
20619: LD_INT 7
20621: PUSH
20622: LD_INT 11
20624: PUSH
20625: LD_INT 12
20627: PUSH
20628: LD_INT 15
20630: PUSH
20631: LD_INT 16
20633: PUSH
20634: LD_INT 20
20636: PUSH
20637: LD_INT 21
20639: PUSH
20640: LD_INT 22
20642: PUSH
20643: LD_INT 23
20645: PUSH
20646: LD_INT 25
20648: PUSH
20649: LD_INT 26
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: PUSH
20668: LD_INT 101
20670: PUSH
20671: LD_INT 102
20673: PUSH
20674: LD_INT 103
20676: PUSH
20677: LD_INT 105
20679: PUSH
20680: LD_INT 106
20682: PUSH
20683: LD_INT 108
20685: PUSH
20686: LD_INT 112
20688: PUSH
20689: LD_INT 116
20691: PUSH
20692: LD_INT 117
20694: PUSH
20695: LD_INT 118
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: ST_TO_ADDR
20714: GO 23117
20716: LD_INT 8
20718: DOUBLE
20719: EQUAL
20720: IFTRUE 20724
20722: GO 20864
20724: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
20725: LD_ADDR_VAR 0 2
20729: PUSH
20730: LD_INT 2
20732: PUSH
20733: LD_INT 4
20735: PUSH
20736: LD_INT 5
20738: PUSH
20739: LD_INT 6
20741: PUSH
20742: LD_INT 7
20744: PUSH
20745: LD_INT 8
20747: PUSH
20748: LD_INT 11
20750: PUSH
20751: LD_INT 12
20753: PUSH
20754: LD_INT 15
20756: PUSH
20757: LD_INT 16
20759: PUSH
20760: LD_INT 20
20762: PUSH
20763: LD_INT 21
20765: PUSH
20766: LD_INT 22
20768: PUSH
20769: LD_INT 23
20771: PUSH
20772: LD_INT 25
20774: PUSH
20775: LD_INT 26
20777: PUSH
20778: LD_INT 30
20780: PUSH
20781: LD_INT 31
20783: PUSH
20784: LD_INT 32
20786: PUSH
20787: LD_INT 36
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: PUSH
20812: LD_INT 101
20814: PUSH
20815: LD_INT 102
20817: PUSH
20818: LD_INT 103
20820: PUSH
20821: LD_INT 105
20823: PUSH
20824: LD_INT 106
20826: PUSH
20827: LD_INT 108
20829: PUSH
20830: LD_INT 109
20832: PUSH
20833: LD_INT 112
20835: PUSH
20836: LD_INT 116
20838: PUSH
20839: LD_INT 117
20841: PUSH
20842: LD_INT 118
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: ST_TO_ADDR
20862: GO 23117
20864: LD_INT 9
20866: DOUBLE
20867: EQUAL
20868: IFTRUE 20872
20870: GO 21020
20872: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
20873: LD_ADDR_VAR 0 2
20877: PUSH
20878: LD_INT 2
20880: PUSH
20881: LD_INT 4
20883: PUSH
20884: LD_INT 5
20886: PUSH
20887: LD_INT 6
20889: PUSH
20890: LD_INT 7
20892: PUSH
20893: LD_INT 8
20895: PUSH
20896: LD_INT 11
20898: PUSH
20899: LD_INT 12
20901: PUSH
20902: LD_INT 15
20904: PUSH
20905: LD_INT 16
20907: PUSH
20908: LD_INT 20
20910: PUSH
20911: LD_INT 21
20913: PUSH
20914: LD_INT 22
20916: PUSH
20917: LD_INT 23
20919: PUSH
20920: LD_INT 25
20922: PUSH
20923: LD_INT 26
20925: PUSH
20926: LD_INT 28
20928: PUSH
20929: LD_INT 30
20931: PUSH
20932: LD_INT 31
20934: PUSH
20935: LD_INT 32
20937: PUSH
20938: LD_INT 36
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 101
20966: PUSH
20967: LD_INT 102
20969: PUSH
20970: LD_INT 103
20972: PUSH
20973: LD_INT 105
20975: PUSH
20976: LD_INT 106
20978: PUSH
20979: LD_INT 108
20981: PUSH
20982: LD_INT 109
20984: PUSH
20985: LD_INT 112
20987: PUSH
20988: LD_INT 114
20990: PUSH
20991: LD_INT 116
20993: PUSH
20994: LD_INT 117
20996: PUSH
20997: LD_INT 118
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: ST_TO_ADDR
21018: GO 23117
21020: LD_INT 10
21022: DOUBLE
21023: EQUAL
21024: IFTRUE 21028
21026: GO 21224
21028: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21029: LD_ADDR_VAR 0 2
21033: PUSH
21034: LD_INT 2
21036: PUSH
21037: LD_INT 4
21039: PUSH
21040: LD_INT 5
21042: PUSH
21043: LD_INT 6
21045: PUSH
21046: LD_INT 7
21048: PUSH
21049: LD_INT 8
21051: PUSH
21052: LD_INT 9
21054: PUSH
21055: LD_INT 10
21057: PUSH
21058: LD_INT 11
21060: PUSH
21061: LD_INT 12
21063: PUSH
21064: LD_INT 13
21066: PUSH
21067: LD_INT 14
21069: PUSH
21070: LD_INT 15
21072: PUSH
21073: LD_INT 16
21075: PUSH
21076: LD_INT 17
21078: PUSH
21079: LD_INT 18
21081: PUSH
21082: LD_INT 19
21084: PUSH
21085: LD_INT 20
21087: PUSH
21088: LD_INT 21
21090: PUSH
21091: LD_INT 22
21093: PUSH
21094: LD_INT 23
21096: PUSH
21097: LD_INT 24
21099: PUSH
21100: LD_INT 25
21102: PUSH
21103: LD_INT 26
21105: PUSH
21106: LD_INT 28
21108: PUSH
21109: LD_INT 30
21111: PUSH
21112: LD_INT 31
21114: PUSH
21115: LD_INT 32
21117: PUSH
21118: LD_INT 36
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 101
21154: PUSH
21155: LD_INT 102
21157: PUSH
21158: LD_INT 103
21160: PUSH
21161: LD_INT 104
21163: PUSH
21164: LD_INT 105
21166: PUSH
21167: LD_INT 106
21169: PUSH
21170: LD_INT 107
21172: PUSH
21173: LD_INT 108
21175: PUSH
21176: LD_INT 109
21178: PUSH
21179: LD_INT 110
21181: PUSH
21182: LD_INT 111
21184: PUSH
21185: LD_INT 112
21187: PUSH
21188: LD_INT 114
21190: PUSH
21191: LD_INT 116
21193: PUSH
21194: LD_INT 117
21196: PUSH
21197: LD_INT 118
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: ST_TO_ADDR
21222: GO 23117
21224: LD_INT 11
21226: DOUBLE
21227: EQUAL
21228: IFTRUE 21232
21230: GO 21436
21232: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21233: LD_ADDR_VAR 0 2
21237: PUSH
21238: LD_INT 2
21240: PUSH
21241: LD_INT 3
21243: PUSH
21244: LD_INT 4
21246: PUSH
21247: LD_INT 5
21249: PUSH
21250: LD_INT 6
21252: PUSH
21253: LD_INT 7
21255: PUSH
21256: LD_INT 8
21258: PUSH
21259: LD_INT 9
21261: PUSH
21262: LD_INT 10
21264: PUSH
21265: LD_INT 11
21267: PUSH
21268: LD_INT 12
21270: PUSH
21271: LD_INT 13
21273: PUSH
21274: LD_INT 14
21276: PUSH
21277: LD_INT 15
21279: PUSH
21280: LD_INT 16
21282: PUSH
21283: LD_INT 17
21285: PUSH
21286: LD_INT 18
21288: PUSH
21289: LD_INT 19
21291: PUSH
21292: LD_INT 20
21294: PUSH
21295: LD_INT 21
21297: PUSH
21298: LD_INT 22
21300: PUSH
21301: LD_INT 23
21303: PUSH
21304: LD_INT 24
21306: PUSH
21307: LD_INT 25
21309: PUSH
21310: LD_INT 26
21312: PUSH
21313: LD_INT 28
21315: PUSH
21316: LD_INT 30
21318: PUSH
21319: LD_INT 31
21321: PUSH
21322: LD_INT 32
21324: PUSH
21325: LD_INT 34
21327: PUSH
21328: LD_INT 36
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 101
21366: PUSH
21367: LD_INT 102
21369: PUSH
21370: LD_INT 103
21372: PUSH
21373: LD_INT 104
21375: PUSH
21376: LD_INT 105
21378: PUSH
21379: LD_INT 106
21381: PUSH
21382: LD_INT 107
21384: PUSH
21385: LD_INT 108
21387: PUSH
21388: LD_INT 109
21390: PUSH
21391: LD_INT 110
21393: PUSH
21394: LD_INT 111
21396: PUSH
21397: LD_INT 112
21399: PUSH
21400: LD_INT 114
21402: PUSH
21403: LD_INT 116
21405: PUSH
21406: LD_INT 117
21408: PUSH
21409: LD_INT 118
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: ST_TO_ADDR
21434: GO 23117
21436: LD_INT 12
21438: DOUBLE
21439: EQUAL
21440: IFTRUE 21444
21442: GO 21664
21444: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21445: LD_ADDR_VAR 0 2
21449: PUSH
21450: LD_INT 1
21452: PUSH
21453: LD_INT 2
21455: PUSH
21456: LD_INT 3
21458: PUSH
21459: LD_INT 4
21461: PUSH
21462: LD_INT 5
21464: PUSH
21465: LD_INT 6
21467: PUSH
21468: LD_INT 7
21470: PUSH
21471: LD_INT 8
21473: PUSH
21474: LD_INT 9
21476: PUSH
21477: LD_INT 10
21479: PUSH
21480: LD_INT 11
21482: PUSH
21483: LD_INT 12
21485: PUSH
21486: LD_INT 13
21488: PUSH
21489: LD_INT 14
21491: PUSH
21492: LD_INT 15
21494: PUSH
21495: LD_INT 16
21497: PUSH
21498: LD_INT 17
21500: PUSH
21501: LD_INT 18
21503: PUSH
21504: LD_INT 19
21506: PUSH
21507: LD_INT 20
21509: PUSH
21510: LD_INT 21
21512: PUSH
21513: LD_INT 22
21515: PUSH
21516: LD_INT 23
21518: PUSH
21519: LD_INT 24
21521: PUSH
21522: LD_INT 25
21524: PUSH
21525: LD_INT 26
21527: PUSH
21528: LD_INT 27
21530: PUSH
21531: LD_INT 28
21533: PUSH
21534: LD_INT 30
21536: PUSH
21537: LD_INT 31
21539: PUSH
21540: LD_INT 32
21542: PUSH
21543: LD_INT 33
21545: PUSH
21546: LD_INT 34
21548: PUSH
21549: LD_INT 36
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 101
21590: PUSH
21591: LD_INT 102
21593: PUSH
21594: LD_INT 103
21596: PUSH
21597: LD_INT 104
21599: PUSH
21600: LD_INT 105
21602: PUSH
21603: LD_INT 106
21605: PUSH
21606: LD_INT 107
21608: PUSH
21609: LD_INT 108
21611: PUSH
21612: LD_INT 109
21614: PUSH
21615: LD_INT 110
21617: PUSH
21618: LD_INT 111
21620: PUSH
21621: LD_INT 112
21623: PUSH
21624: LD_INT 113
21626: PUSH
21627: LD_INT 114
21629: PUSH
21630: LD_INT 116
21632: PUSH
21633: LD_INT 117
21635: PUSH
21636: LD_INT 118
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: ST_TO_ADDR
21662: GO 23117
21664: LD_INT 13
21666: DOUBLE
21667: EQUAL
21668: IFTRUE 21672
21670: GO 21880
21672: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
21673: LD_ADDR_VAR 0 2
21677: PUSH
21678: LD_INT 1
21680: PUSH
21681: LD_INT 2
21683: PUSH
21684: LD_INT 3
21686: PUSH
21687: LD_INT 4
21689: PUSH
21690: LD_INT 5
21692: PUSH
21693: LD_INT 8
21695: PUSH
21696: LD_INT 9
21698: PUSH
21699: LD_INT 10
21701: PUSH
21702: LD_INT 11
21704: PUSH
21705: LD_INT 12
21707: PUSH
21708: LD_INT 14
21710: PUSH
21711: LD_INT 15
21713: PUSH
21714: LD_INT 16
21716: PUSH
21717: LD_INT 17
21719: PUSH
21720: LD_INT 18
21722: PUSH
21723: LD_INT 19
21725: PUSH
21726: LD_INT 20
21728: PUSH
21729: LD_INT 21
21731: PUSH
21732: LD_INT 22
21734: PUSH
21735: LD_INT 23
21737: PUSH
21738: LD_INT 24
21740: PUSH
21741: LD_INT 25
21743: PUSH
21744: LD_INT 26
21746: PUSH
21747: LD_INT 27
21749: PUSH
21750: LD_INT 28
21752: PUSH
21753: LD_INT 30
21755: PUSH
21756: LD_INT 31
21758: PUSH
21759: LD_INT 32
21761: PUSH
21762: LD_INT 33
21764: PUSH
21765: LD_INT 34
21767: PUSH
21768: LD_INT 36
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: PUSH
21804: LD_INT 101
21806: PUSH
21807: LD_INT 102
21809: PUSH
21810: LD_INT 103
21812: PUSH
21813: LD_INT 104
21815: PUSH
21816: LD_INT 105
21818: PUSH
21819: LD_INT 106
21821: PUSH
21822: LD_INT 107
21824: PUSH
21825: LD_INT 108
21827: PUSH
21828: LD_INT 109
21830: PUSH
21831: LD_INT 110
21833: PUSH
21834: LD_INT 111
21836: PUSH
21837: LD_INT 112
21839: PUSH
21840: LD_INT 113
21842: PUSH
21843: LD_INT 114
21845: PUSH
21846: LD_INT 116
21848: PUSH
21849: LD_INT 117
21851: PUSH
21852: LD_INT 118
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: ST_TO_ADDR
21878: GO 23117
21880: LD_INT 14
21882: DOUBLE
21883: EQUAL
21884: IFTRUE 21888
21886: GO 22112
21888: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
21889: LD_ADDR_VAR 0 2
21893: PUSH
21894: LD_INT 1
21896: PUSH
21897: LD_INT 2
21899: PUSH
21900: LD_INT 3
21902: PUSH
21903: LD_INT 4
21905: PUSH
21906: LD_INT 5
21908: PUSH
21909: LD_INT 6
21911: PUSH
21912: LD_INT 7
21914: PUSH
21915: LD_INT 8
21917: PUSH
21918: LD_INT 9
21920: PUSH
21921: LD_INT 10
21923: PUSH
21924: LD_INT 11
21926: PUSH
21927: LD_INT 12
21929: PUSH
21930: LD_INT 13
21932: PUSH
21933: LD_INT 14
21935: PUSH
21936: LD_INT 15
21938: PUSH
21939: LD_INT 16
21941: PUSH
21942: LD_INT 17
21944: PUSH
21945: LD_INT 18
21947: PUSH
21948: LD_INT 19
21950: PUSH
21951: LD_INT 20
21953: PUSH
21954: LD_INT 21
21956: PUSH
21957: LD_INT 22
21959: PUSH
21960: LD_INT 23
21962: PUSH
21963: LD_INT 24
21965: PUSH
21966: LD_INT 25
21968: PUSH
21969: LD_INT 26
21971: PUSH
21972: LD_INT 27
21974: PUSH
21975: LD_INT 28
21977: PUSH
21978: LD_INT 29
21980: PUSH
21981: LD_INT 30
21983: PUSH
21984: LD_INT 31
21986: PUSH
21987: LD_INT 32
21989: PUSH
21990: LD_INT 33
21992: PUSH
21993: LD_INT 34
21995: PUSH
21996: LD_INT 36
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: PUSH
22036: LD_INT 101
22038: PUSH
22039: LD_INT 102
22041: PUSH
22042: LD_INT 103
22044: PUSH
22045: LD_INT 104
22047: PUSH
22048: LD_INT 105
22050: PUSH
22051: LD_INT 106
22053: PUSH
22054: LD_INT 107
22056: PUSH
22057: LD_INT 108
22059: PUSH
22060: LD_INT 109
22062: PUSH
22063: LD_INT 110
22065: PUSH
22066: LD_INT 111
22068: PUSH
22069: LD_INT 112
22071: PUSH
22072: LD_INT 113
22074: PUSH
22075: LD_INT 114
22077: PUSH
22078: LD_INT 116
22080: PUSH
22081: LD_INT 117
22083: PUSH
22084: LD_INT 118
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: ST_TO_ADDR
22110: GO 23117
22112: LD_INT 15
22114: DOUBLE
22115: EQUAL
22116: IFTRUE 22120
22118: GO 22344
22120: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22121: LD_ADDR_VAR 0 2
22125: PUSH
22126: LD_INT 1
22128: PUSH
22129: LD_INT 2
22131: PUSH
22132: LD_INT 3
22134: PUSH
22135: LD_INT 4
22137: PUSH
22138: LD_INT 5
22140: PUSH
22141: LD_INT 6
22143: PUSH
22144: LD_INT 7
22146: PUSH
22147: LD_INT 8
22149: PUSH
22150: LD_INT 9
22152: PUSH
22153: LD_INT 10
22155: PUSH
22156: LD_INT 11
22158: PUSH
22159: LD_INT 12
22161: PUSH
22162: LD_INT 13
22164: PUSH
22165: LD_INT 14
22167: PUSH
22168: LD_INT 15
22170: PUSH
22171: LD_INT 16
22173: PUSH
22174: LD_INT 17
22176: PUSH
22177: LD_INT 18
22179: PUSH
22180: LD_INT 19
22182: PUSH
22183: LD_INT 20
22185: PUSH
22186: LD_INT 21
22188: PUSH
22189: LD_INT 22
22191: PUSH
22192: LD_INT 23
22194: PUSH
22195: LD_INT 24
22197: PUSH
22198: LD_INT 25
22200: PUSH
22201: LD_INT 26
22203: PUSH
22204: LD_INT 27
22206: PUSH
22207: LD_INT 28
22209: PUSH
22210: LD_INT 29
22212: PUSH
22213: LD_INT 30
22215: PUSH
22216: LD_INT 31
22218: PUSH
22219: LD_INT 32
22221: PUSH
22222: LD_INT 33
22224: PUSH
22225: LD_INT 34
22227: PUSH
22228: LD_INT 36
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: PUSH
22268: LD_INT 101
22270: PUSH
22271: LD_INT 102
22273: PUSH
22274: LD_INT 103
22276: PUSH
22277: LD_INT 104
22279: PUSH
22280: LD_INT 105
22282: PUSH
22283: LD_INT 106
22285: PUSH
22286: LD_INT 107
22288: PUSH
22289: LD_INT 108
22291: PUSH
22292: LD_INT 109
22294: PUSH
22295: LD_INT 110
22297: PUSH
22298: LD_INT 111
22300: PUSH
22301: LD_INT 112
22303: PUSH
22304: LD_INT 113
22306: PUSH
22307: LD_INT 114
22309: PUSH
22310: LD_INT 116
22312: PUSH
22313: LD_INT 117
22315: PUSH
22316: LD_INT 118
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: ST_TO_ADDR
22342: GO 23117
22344: LD_INT 16
22346: DOUBLE
22347: EQUAL
22348: IFTRUE 22352
22350: GO 22488
22352: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22353: LD_ADDR_VAR 0 2
22357: PUSH
22358: LD_INT 2
22360: PUSH
22361: LD_INT 4
22363: PUSH
22364: LD_INT 5
22366: PUSH
22367: LD_INT 7
22369: PUSH
22370: LD_INT 11
22372: PUSH
22373: LD_INT 12
22375: PUSH
22376: LD_INT 15
22378: PUSH
22379: LD_INT 16
22381: PUSH
22382: LD_INT 20
22384: PUSH
22385: LD_INT 21
22387: PUSH
22388: LD_INT 22
22390: PUSH
22391: LD_INT 23
22393: PUSH
22394: LD_INT 25
22396: PUSH
22397: LD_INT 26
22399: PUSH
22400: LD_INT 30
22402: PUSH
22403: LD_INT 31
22405: PUSH
22406: LD_INT 32
22408: PUSH
22409: LD_INT 33
22411: PUSH
22412: LD_INT 34
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 101
22438: PUSH
22439: LD_INT 102
22441: PUSH
22442: LD_INT 103
22444: PUSH
22445: LD_INT 106
22447: PUSH
22448: LD_INT 108
22450: PUSH
22451: LD_INT 112
22453: PUSH
22454: LD_INT 113
22456: PUSH
22457: LD_INT 114
22459: PUSH
22460: LD_INT 116
22462: PUSH
22463: LD_INT 117
22465: PUSH
22466: LD_INT 118
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: ST_TO_ADDR
22486: GO 23117
22488: LD_INT 17
22490: DOUBLE
22491: EQUAL
22492: IFTRUE 22496
22494: GO 22720
22496: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22497: LD_ADDR_VAR 0 2
22501: PUSH
22502: LD_INT 1
22504: PUSH
22505: LD_INT 2
22507: PUSH
22508: LD_INT 3
22510: PUSH
22511: LD_INT 4
22513: PUSH
22514: LD_INT 5
22516: PUSH
22517: LD_INT 6
22519: PUSH
22520: LD_INT 7
22522: PUSH
22523: LD_INT 8
22525: PUSH
22526: LD_INT 9
22528: PUSH
22529: LD_INT 10
22531: PUSH
22532: LD_INT 11
22534: PUSH
22535: LD_INT 12
22537: PUSH
22538: LD_INT 13
22540: PUSH
22541: LD_INT 14
22543: PUSH
22544: LD_INT 15
22546: PUSH
22547: LD_INT 16
22549: PUSH
22550: LD_INT 17
22552: PUSH
22553: LD_INT 18
22555: PUSH
22556: LD_INT 19
22558: PUSH
22559: LD_INT 20
22561: PUSH
22562: LD_INT 21
22564: PUSH
22565: LD_INT 22
22567: PUSH
22568: LD_INT 23
22570: PUSH
22571: LD_INT 24
22573: PUSH
22574: LD_INT 25
22576: PUSH
22577: LD_INT 26
22579: PUSH
22580: LD_INT 27
22582: PUSH
22583: LD_INT 28
22585: PUSH
22586: LD_INT 29
22588: PUSH
22589: LD_INT 30
22591: PUSH
22592: LD_INT 31
22594: PUSH
22595: LD_INT 32
22597: PUSH
22598: LD_INT 33
22600: PUSH
22601: LD_INT 34
22603: PUSH
22604: LD_INT 36
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 101
22646: PUSH
22647: LD_INT 102
22649: PUSH
22650: LD_INT 103
22652: PUSH
22653: LD_INT 104
22655: PUSH
22656: LD_INT 105
22658: PUSH
22659: LD_INT 106
22661: PUSH
22662: LD_INT 107
22664: PUSH
22665: LD_INT 108
22667: PUSH
22668: LD_INT 109
22670: PUSH
22671: LD_INT 110
22673: PUSH
22674: LD_INT 111
22676: PUSH
22677: LD_INT 112
22679: PUSH
22680: LD_INT 113
22682: PUSH
22683: LD_INT 114
22685: PUSH
22686: LD_INT 116
22688: PUSH
22689: LD_INT 117
22691: PUSH
22692: LD_INT 118
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: ST_TO_ADDR
22718: GO 23117
22720: LD_INT 18
22722: DOUBLE
22723: EQUAL
22724: IFTRUE 22728
22726: GO 22876
22728: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
22729: LD_ADDR_VAR 0 2
22733: PUSH
22734: LD_INT 2
22736: PUSH
22737: LD_INT 4
22739: PUSH
22740: LD_INT 5
22742: PUSH
22743: LD_INT 7
22745: PUSH
22746: LD_INT 11
22748: PUSH
22749: LD_INT 12
22751: PUSH
22752: LD_INT 15
22754: PUSH
22755: LD_INT 16
22757: PUSH
22758: LD_INT 20
22760: PUSH
22761: LD_INT 21
22763: PUSH
22764: LD_INT 22
22766: PUSH
22767: LD_INT 23
22769: PUSH
22770: LD_INT 25
22772: PUSH
22773: LD_INT 26
22775: PUSH
22776: LD_INT 30
22778: PUSH
22779: LD_INT 31
22781: PUSH
22782: LD_INT 32
22784: PUSH
22785: LD_INT 33
22787: PUSH
22788: LD_INT 34
22790: PUSH
22791: LD_INT 35
22793: PUSH
22794: LD_INT 36
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 101
22822: PUSH
22823: LD_INT 102
22825: PUSH
22826: LD_INT 103
22828: PUSH
22829: LD_INT 106
22831: PUSH
22832: LD_INT 108
22834: PUSH
22835: LD_INT 112
22837: PUSH
22838: LD_INT 113
22840: PUSH
22841: LD_INT 114
22843: PUSH
22844: LD_INT 115
22846: PUSH
22847: LD_INT 116
22849: PUSH
22850: LD_INT 117
22852: PUSH
22853: LD_INT 118
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: ST_TO_ADDR
22874: GO 23117
22876: LD_INT 19
22878: DOUBLE
22879: EQUAL
22880: IFTRUE 22884
22882: GO 23116
22884: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
22885: LD_ADDR_VAR 0 2
22889: PUSH
22890: LD_INT 1
22892: PUSH
22893: LD_INT 2
22895: PUSH
22896: LD_INT 3
22898: PUSH
22899: LD_INT 4
22901: PUSH
22902: LD_INT 5
22904: PUSH
22905: LD_INT 6
22907: PUSH
22908: LD_INT 7
22910: PUSH
22911: LD_INT 8
22913: PUSH
22914: LD_INT 9
22916: PUSH
22917: LD_INT 10
22919: PUSH
22920: LD_INT 11
22922: PUSH
22923: LD_INT 12
22925: PUSH
22926: LD_INT 13
22928: PUSH
22929: LD_INT 14
22931: PUSH
22932: LD_INT 15
22934: PUSH
22935: LD_INT 16
22937: PUSH
22938: LD_INT 17
22940: PUSH
22941: LD_INT 18
22943: PUSH
22944: LD_INT 19
22946: PUSH
22947: LD_INT 20
22949: PUSH
22950: LD_INT 21
22952: PUSH
22953: LD_INT 22
22955: PUSH
22956: LD_INT 23
22958: PUSH
22959: LD_INT 24
22961: PUSH
22962: LD_INT 25
22964: PUSH
22965: LD_INT 26
22967: PUSH
22968: LD_INT 27
22970: PUSH
22971: LD_INT 28
22973: PUSH
22974: LD_INT 29
22976: PUSH
22977: LD_INT 30
22979: PUSH
22980: LD_INT 31
22982: PUSH
22983: LD_INT 32
22985: PUSH
22986: LD_INT 33
22988: PUSH
22989: LD_INT 34
22991: PUSH
22992: LD_INT 35
22994: PUSH
22995: LD_INT 36
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: PUSH
23036: LD_INT 101
23038: PUSH
23039: LD_INT 102
23041: PUSH
23042: LD_INT 103
23044: PUSH
23045: LD_INT 104
23047: PUSH
23048: LD_INT 105
23050: PUSH
23051: LD_INT 106
23053: PUSH
23054: LD_INT 107
23056: PUSH
23057: LD_INT 108
23059: PUSH
23060: LD_INT 109
23062: PUSH
23063: LD_INT 110
23065: PUSH
23066: LD_INT 111
23068: PUSH
23069: LD_INT 112
23071: PUSH
23072: LD_INT 113
23074: PUSH
23075: LD_INT 114
23077: PUSH
23078: LD_INT 115
23080: PUSH
23081: LD_INT 116
23083: PUSH
23084: LD_INT 117
23086: PUSH
23087: LD_INT 118
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: ST_TO_ADDR
23114: GO 23117
23116: POP
// end else
23117: GO 23348
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23119: LD_ADDR_VAR 0 2
23123: PUSH
23124: LD_INT 1
23126: PUSH
23127: LD_INT 2
23129: PUSH
23130: LD_INT 3
23132: PUSH
23133: LD_INT 4
23135: PUSH
23136: LD_INT 5
23138: PUSH
23139: LD_INT 6
23141: PUSH
23142: LD_INT 7
23144: PUSH
23145: LD_INT 8
23147: PUSH
23148: LD_INT 9
23150: PUSH
23151: LD_INT 10
23153: PUSH
23154: LD_INT 11
23156: PUSH
23157: LD_INT 12
23159: PUSH
23160: LD_INT 13
23162: PUSH
23163: LD_INT 14
23165: PUSH
23166: LD_INT 15
23168: PUSH
23169: LD_INT 16
23171: PUSH
23172: LD_INT 17
23174: PUSH
23175: LD_INT 18
23177: PUSH
23178: LD_INT 19
23180: PUSH
23181: LD_INT 20
23183: PUSH
23184: LD_INT 21
23186: PUSH
23187: LD_INT 22
23189: PUSH
23190: LD_INT 23
23192: PUSH
23193: LD_INT 24
23195: PUSH
23196: LD_INT 25
23198: PUSH
23199: LD_INT 26
23201: PUSH
23202: LD_INT 27
23204: PUSH
23205: LD_INT 28
23207: PUSH
23208: LD_INT 29
23210: PUSH
23211: LD_INT 30
23213: PUSH
23214: LD_INT 31
23216: PUSH
23217: LD_INT 32
23219: PUSH
23220: LD_INT 33
23222: PUSH
23223: LD_INT 34
23225: PUSH
23226: LD_INT 35
23228: PUSH
23229: LD_INT 36
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: PUSH
23270: LD_INT 101
23272: PUSH
23273: LD_INT 102
23275: PUSH
23276: LD_INT 103
23278: PUSH
23279: LD_INT 104
23281: PUSH
23282: LD_INT 105
23284: PUSH
23285: LD_INT 106
23287: PUSH
23288: LD_INT 107
23290: PUSH
23291: LD_INT 108
23293: PUSH
23294: LD_INT 109
23296: PUSH
23297: LD_INT 110
23299: PUSH
23300: LD_INT 111
23302: PUSH
23303: LD_INT 112
23305: PUSH
23306: LD_INT 113
23308: PUSH
23309: LD_INT 114
23311: PUSH
23312: LD_INT 115
23314: PUSH
23315: LD_INT 116
23317: PUSH
23318: LD_INT 117
23320: PUSH
23321: LD_INT 118
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: ST_TO_ADDR
// if result then
23348: LD_VAR 0 2
23352: IFFALSE 24138
// begin normal :=  ;
23354: LD_ADDR_VAR 0 5
23358: PUSH
23359: LD_STRING 
23361: ST_TO_ADDR
// hardcore :=  ;
23362: LD_ADDR_VAR 0 6
23366: PUSH
23367: LD_STRING 
23369: ST_TO_ADDR
// active :=  ;
23370: LD_ADDR_VAR 0 7
23374: PUSH
23375: LD_STRING 
23377: ST_TO_ADDR
// for i = 1 to normalCounter do
23378: LD_ADDR_VAR 0 8
23382: PUSH
23383: DOUBLE
23384: LD_INT 1
23386: DEC
23387: ST_TO_ADDR
23388: LD_EXP 55
23392: PUSH
23393: FOR_TO
23394: IFFALSE 23495
// begin tmp := 0 ;
23396: LD_ADDR_VAR 0 3
23400: PUSH
23401: LD_STRING 0
23403: ST_TO_ADDR
// if result [ 1 ] then
23404: LD_VAR 0 2
23408: PUSH
23409: LD_INT 1
23411: ARRAY
23412: IFFALSE 23477
// if result [ 1 ] [ 1 ] = i then
23414: LD_VAR 0 2
23418: PUSH
23419: LD_INT 1
23421: ARRAY
23422: PUSH
23423: LD_INT 1
23425: ARRAY
23426: PUSH
23427: LD_VAR 0 8
23431: EQUAL
23432: IFFALSE 23477
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23434: LD_ADDR_VAR 0 2
23438: PUSH
23439: LD_VAR 0 2
23443: PPUSH
23444: LD_INT 1
23446: PPUSH
23447: LD_VAR 0 2
23451: PUSH
23452: LD_INT 1
23454: ARRAY
23455: PPUSH
23456: LD_INT 1
23458: PPUSH
23459: CALL_OW 3
23463: PPUSH
23464: CALL_OW 1
23468: ST_TO_ADDR
// tmp := 1 ;
23469: LD_ADDR_VAR 0 3
23473: PUSH
23474: LD_STRING 1
23476: ST_TO_ADDR
// end ; normal := normal & tmp ;
23477: LD_ADDR_VAR 0 5
23481: PUSH
23482: LD_VAR 0 5
23486: PUSH
23487: LD_VAR 0 3
23491: STR
23492: ST_TO_ADDR
// end ;
23493: GO 23393
23495: POP
23496: POP
// for i = 1 to hardcoreCounter do
23497: LD_ADDR_VAR 0 8
23501: PUSH
23502: DOUBLE
23503: LD_INT 1
23505: DEC
23506: ST_TO_ADDR
23507: LD_EXP 56
23511: PUSH
23512: FOR_TO
23513: IFFALSE 23618
// begin tmp := 0 ;
23515: LD_ADDR_VAR 0 3
23519: PUSH
23520: LD_STRING 0
23522: ST_TO_ADDR
// if result [ 2 ] then
23523: LD_VAR 0 2
23527: PUSH
23528: LD_INT 2
23530: ARRAY
23531: IFFALSE 23600
// if result [ 2 ] [ 1 ] = 100 + i then
23533: LD_VAR 0 2
23537: PUSH
23538: LD_INT 2
23540: ARRAY
23541: PUSH
23542: LD_INT 1
23544: ARRAY
23545: PUSH
23546: LD_INT 100
23548: PUSH
23549: LD_VAR 0 8
23553: PLUS
23554: EQUAL
23555: IFFALSE 23600
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23557: LD_ADDR_VAR 0 2
23561: PUSH
23562: LD_VAR 0 2
23566: PPUSH
23567: LD_INT 2
23569: PPUSH
23570: LD_VAR 0 2
23574: PUSH
23575: LD_INT 2
23577: ARRAY
23578: PPUSH
23579: LD_INT 1
23581: PPUSH
23582: CALL_OW 3
23586: PPUSH
23587: CALL_OW 1
23591: ST_TO_ADDR
// tmp := 1 ;
23592: LD_ADDR_VAR 0 3
23596: PUSH
23597: LD_STRING 1
23599: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23600: LD_ADDR_VAR 0 6
23604: PUSH
23605: LD_VAR 0 6
23609: PUSH
23610: LD_VAR 0 3
23614: STR
23615: ST_TO_ADDR
// end ;
23616: GO 23512
23618: POP
23619: POP
// if isGameLoad then
23620: LD_VAR 0 1
23624: IFFALSE 24099
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
23626: LD_ADDR_VAR 0 4
23630: PUSH
23631: LD_EXP 59
23635: PUSH
23636: LD_EXP 58
23640: PUSH
23641: LD_EXP 60
23645: PUSH
23646: LD_EXP 57
23650: PUSH
23651: LD_EXP 61
23655: PUSH
23656: LD_EXP 62
23660: PUSH
23661: LD_EXP 63
23665: PUSH
23666: LD_EXP 64
23670: PUSH
23671: LD_EXP 65
23675: PUSH
23676: LD_EXP 66
23680: PUSH
23681: LD_EXP 67
23685: PUSH
23686: LD_EXP 68
23690: PUSH
23691: LD_EXP 69
23695: PUSH
23696: LD_EXP 70
23700: PUSH
23701: LD_EXP 78
23705: PUSH
23706: LD_EXP 79
23710: PUSH
23711: LD_EXP 80
23715: PUSH
23716: LD_EXP 81
23720: PUSH
23721: LD_EXP 83
23725: PUSH
23726: LD_EXP 84
23730: PUSH
23731: LD_EXP 85
23735: PUSH
23736: LD_EXP 88
23740: PUSH
23741: LD_EXP 90
23745: PUSH
23746: LD_EXP 91
23750: PUSH
23751: LD_EXP 92
23755: PUSH
23756: LD_EXP 94
23760: PUSH
23761: LD_EXP 95
23765: PUSH
23766: LD_EXP 98
23770: PUSH
23771: LD_EXP 99
23775: PUSH
23776: LD_EXP 100
23780: PUSH
23781: LD_EXP 101
23785: PUSH
23786: LD_EXP 102
23790: PUSH
23791: LD_EXP 103
23795: PUSH
23796: LD_EXP 104
23800: PUSH
23801: LD_EXP 105
23805: PUSH
23806: LD_EXP 106
23810: PUSH
23811: LD_EXP 71
23815: PUSH
23816: LD_EXP 72
23820: PUSH
23821: LD_EXP 75
23825: PUSH
23826: LD_EXP 76
23830: PUSH
23831: LD_EXP 77
23835: PUSH
23836: LD_EXP 73
23840: PUSH
23841: LD_EXP 74
23845: PUSH
23846: LD_EXP 82
23850: PUSH
23851: LD_EXP 86
23855: PUSH
23856: LD_EXP 87
23860: PUSH
23861: LD_EXP 89
23865: PUSH
23866: LD_EXP 93
23870: PUSH
23871: LD_EXP 96
23875: PUSH
23876: LD_EXP 97
23880: PUSH
23881: LD_EXP 107
23885: PUSH
23886: LD_EXP 108
23890: PUSH
23891: LD_EXP 109
23895: PUSH
23896: LD_EXP 110
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: ST_TO_ADDR
// tmp :=  ;
23957: LD_ADDR_VAR 0 3
23961: PUSH
23962: LD_STRING 
23964: ST_TO_ADDR
// for i = 1 to normalCounter do
23965: LD_ADDR_VAR 0 8
23969: PUSH
23970: DOUBLE
23971: LD_INT 1
23973: DEC
23974: ST_TO_ADDR
23975: LD_EXP 55
23979: PUSH
23980: FOR_TO
23981: IFFALSE 24017
// begin if flags [ i ] then
23983: LD_VAR 0 4
23987: PUSH
23988: LD_VAR 0 8
23992: ARRAY
23993: IFFALSE 24015
// tmp := tmp & i & ; ;
23995: LD_ADDR_VAR 0 3
23999: PUSH
24000: LD_VAR 0 3
24004: PUSH
24005: LD_VAR 0 8
24009: STR
24010: PUSH
24011: LD_STRING ;
24013: STR
24014: ST_TO_ADDR
// end ;
24015: GO 23980
24017: POP
24018: POP
// for i = 1 to hardcoreCounter do
24019: LD_ADDR_VAR 0 8
24023: PUSH
24024: DOUBLE
24025: LD_INT 1
24027: DEC
24028: ST_TO_ADDR
24029: LD_EXP 56
24033: PUSH
24034: FOR_TO
24035: IFFALSE 24081
// begin if flags [ normalCounter + i ] then
24037: LD_VAR 0 4
24041: PUSH
24042: LD_EXP 55
24046: PUSH
24047: LD_VAR 0 8
24051: PLUS
24052: ARRAY
24053: IFFALSE 24079
// tmp := tmp & ( 100 + i ) & ; ;
24055: LD_ADDR_VAR 0 3
24059: PUSH
24060: LD_VAR 0 3
24064: PUSH
24065: LD_INT 100
24067: PUSH
24068: LD_VAR 0 8
24072: PLUS
24073: STR
24074: PUSH
24075: LD_STRING ;
24077: STR
24078: ST_TO_ADDR
// end ;
24079: GO 24034
24081: POP
24082: POP
// if tmp then
24083: LD_VAR 0 3
24087: IFFALSE 24099
// active := tmp ;
24089: LD_ADDR_VAR 0 7
24093: PUSH
24094: LD_VAR 0 3
24098: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24099: LD_STRING getStreamItemsFromMission("
24101: PUSH
24102: LD_VAR 0 5
24106: STR
24107: PUSH
24108: LD_STRING ","
24110: STR
24111: PUSH
24112: LD_VAR 0 6
24116: STR
24117: PUSH
24118: LD_STRING ","
24120: STR
24121: PUSH
24122: LD_VAR 0 7
24126: STR
24127: PUSH
24128: LD_STRING ")
24130: STR
24131: PPUSH
24132: CALL_OW 559
// end else
24136: GO 24145
// ToLua ( getStreamItemsFromMission("","","") ) ;
24138: LD_STRING getStreamItemsFromMission("","","")
24140: PPUSH
24141: CALL_OW 559
// end ;
24145: LD_VAR 0 2
24149: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24150: LD_EXP 54
24154: IFFALSE 24162
24156: PUSH
24157: LD_EXP 59
24161: AND
24162: IFFALSE 24286
24164: GO 24166
24166: DISABLE
24167: LD_INT 0
24169: PPUSH
24170: PPUSH
// begin enable ;
24171: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24172: LD_ADDR_VAR 0 2
24176: PUSH
24177: LD_INT 22
24179: PUSH
24180: LD_OWVAR 2
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 2
24191: PUSH
24192: LD_INT 34
24194: PUSH
24195: LD_INT 7
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 34
24204: PUSH
24205: LD_INT 45
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: PUSH
24212: LD_INT 34
24214: PUSH
24215: LD_INT 28
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 34
24224: PUSH
24225: LD_INT 47
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PPUSH
24243: CALL_OW 69
24247: ST_TO_ADDR
// if not tmp then
24248: LD_VAR 0 2
24252: NOT
24253: IFFALSE 24257
// exit ;
24255: GO 24286
// for i in tmp do
24257: LD_ADDR_VAR 0 1
24261: PUSH
24262: LD_VAR 0 2
24266: PUSH
24267: FOR_IN
24268: IFFALSE 24284
// begin SetLives ( i , 0 ) ;
24270: LD_VAR 0 1
24274: PPUSH
24275: LD_INT 0
24277: PPUSH
24278: CALL_OW 234
// end ;
24282: GO 24267
24284: POP
24285: POP
// end ;
24286: PPOPN 2
24288: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24289: LD_EXP 54
24293: IFFALSE 24301
24295: PUSH
24296: LD_EXP 60
24300: AND
24301: IFFALSE 24385
24303: GO 24305
24305: DISABLE
24306: LD_INT 0
24308: PPUSH
24309: PPUSH
// begin enable ;
24310: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24311: LD_ADDR_VAR 0 2
24315: PUSH
24316: LD_INT 22
24318: PUSH
24319: LD_OWVAR 2
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PUSH
24328: LD_INT 32
24330: PUSH
24331: LD_INT 3
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PPUSH
24342: CALL_OW 69
24346: ST_TO_ADDR
// if not tmp then
24347: LD_VAR 0 2
24351: NOT
24352: IFFALSE 24356
// exit ;
24354: GO 24385
// for i in tmp do
24356: LD_ADDR_VAR 0 1
24360: PUSH
24361: LD_VAR 0 2
24365: PUSH
24366: FOR_IN
24367: IFFALSE 24383
// begin SetLives ( i , 0 ) ;
24369: LD_VAR 0 1
24373: PPUSH
24374: LD_INT 0
24376: PPUSH
24377: CALL_OW 234
// end ;
24381: GO 24366
24383: POP
24384: POP
// end ;
24385: PPOPN 2
24387: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24388: LD_EXP 54
24392: IFFALSE 24400
24394: PUSH
24395: LD_EXP 57
24399: AND
24400: IFFALSE 24493
24402: GO 24404
24404: DISABLE
24405: LD_INT 0
24407: PPUSH
// begin enable ;
24408: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24409: LD_ADDR_VAR 0 1
24413: PUSH
24414: LD_INT 22
24416: PUSH
24417: LD_OWVAR 2
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 2
24428: PUSH
24429: LD_INT 25
24431: PUSH
24432: LD_INT 5
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 25
24441: PUSH
24442: LD_INT 9
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PUSH
24449: LD_INT 25
24451: PUSH
24452: LD_INT 8
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PPUSH
24469: CALL_OW 69
24473: PUSH
24474: FOR_IN
24475: IFFALSE 24491
// begin SetClass ( i , 1 ) ;
24477: LD_VAR 0 1
24481: PPUSH
24482: LD_INT 1
24484: PPUSH
24485: CALL_OW 336
// end ;
24489: GO 24474
24491: POP
24492: POP
// end ;
24493: PPOPN 1
24495: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24496: LD_EXP 54
24500: IFFALSE 24508
24502: PUSH
24503: LD_EXP 58
24507: AND
24508: IFFALSE 24520
24510: PUSH
24511: LD_OWVAR 65
24515: PUSH
24516: LD_INT 7
24518: LESS
24519: AND
24520: IFFALSE 24534
24522: GO 24524
24524: DISABLE
// begin enable ;
24525: ENABLE
// game_speed := 7 ;
24526: LD_ADDR_OWVAR 65
24530: PUSH
24531: LD_INT 7
24533: ST_TO_ADDR
// end ;
24534: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24535: LD_EXP 54
24539: IFFALSE 24547
24541: PUSH
24542: LD_EXP 61
24546: AND
24547: IFFALSE 24749
24549: GO 24551
24551: DISABLE
24552: LD_INT 0
24554: PPUSH
24555: PPUSH
24556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24557: LD_ADDR_VAR 0 3
24561: PUSH
24562: LD_INT 81
24564: PUSH
24565: LD_OWVAR 2
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 21
24576: PUSH
24577: LD_INT 1
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PPUSH
24588: CALL_OW 69
24592: ST_TO_ADDR
// if not tmp then
24593: LD_VAR 0 3
24597: NOT
24598: IFFALSE 24602
// exit ;
24600: GO 24749
// if tmp > 5 then
24602: LD_VAR 0 3
24606: PUSH
24607: LD_INT 5
24609: GREATER
24610: IFFALSE 24622
// k := 5 else
24612: LD_ADDR_VAR 0 2
24616: PUSH
24617: LD_INT 5
24619: ST_TO_ADDR
24620: GO 24632
// k := tmp ;
24622: LD_ADDR_VAR 0 2
24626: PUSH
24627: LD_VAR 0 3
24631: ST_TO_ADDR
// for i := 1 to k do
24632: LD_ADDR_VAR 0 1
24636: PUSH
24637: DOUBLE
24638: LD_INT 1
24640: DEC
24641: ST_TO_ADDR
24642: LD_VAR 0 2
24646: PUSH
24647: FOR_TO
24648: IFFALSE 24747
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24650: LD_VAR 0 3
24654: PUSH
24655: LD_VAR 0 1
24659: ARRAY
24660: PPUSH
24661: LD_VAR 0 1
24665: PUSH
24666: LD_INT 4
24668: MOD
24669: PUSH
24670: LD_INT 1
24672: PLUS
24673: PPUSH
24674: CALL_OW 259
24678: PUSH
24679: LD_INT 10
24681: LESS
24682: IFFALSE 24745
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24684: LD_VAR 0 3
24688: PUSH
24689: LD_VAR 0 1
24693: ARRAY
24694: PPUSH
24695: LD_VAR 0 1
24699: PUSH
24700: LD_INT 4
24702: MOD
24703: PUSH
24704: LD_INT 1
24706: PLUS
24707: PPUSH
24708: LD_VAR 0 3
24712: PUSH
24713: LD_VAR 0 1
24717: ARRAY
24718: PPUSH
24719: LD_VAR 0 1
24723: PUSH
24724: LD_INT 4
24726: MOD
24727: PUSH
24728: LD_INT 1
24730: PLUS
24731: PPUSH
24732: CALL_OW 259
24736: PUSH
24737: LD_INT 1
24739: PLUS
24740: PPUSH
24741: CALL_OW 237
24745: GO 24647
24747: POP
24748: POP
// end ;
24749: PPOPN 3
24751: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24752: LD_EXP 54
24756: IFFALSE 24764
24758: PUSH
24759: LD_EXP 62
24763: AND
24764: IFFALSE 24784
24766: GO 24768
24768: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24769: LD_INT 4
24771: PPUSH
24772: LD_OWVAR 2
24776: PPUSH
24777: LD_INT 0
24779: PPUSH
24780: CALL_OW 324
24784: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24785: LD_EXP 54
24789: IFFALSE 24797
24791: PUSH
24792: LD_EXP 91
24796: AND
24797: IFFALSE 24817
24799: GO 24801
24801: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24802: LD_INT 19
24804: PPUSH
24805: LD_OWVAR 2
24809: PPUSH
24810: LD_INT 0
24812: PPUSH
24813: CALL_OW 324
24817: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24818: LD_EXP 54
24822: IFFALSE 24830
24824: PUSH
24825: LD_EXP 63
24829: AND
24830: IFFALSE 24932
24832: GO 24834
24834: DISABLE
24835: LD_INT 0
24837: PPUSH
24838: PPUSH
// begin enable ;
24839: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24840: LD_ADDR_VAR 0 2
24844: PUSH
24845: LD_INT 22
24847: PUSH
24848: LD_OWVAR 2
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 2
24859: PUSH
24860: LD_INT 34
24862: PUSH
24863: LD_INT 11
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 34
24872: PUSH
24873: LD_INT 30
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: LIST
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PPUSH
24889: CALL_OW 69
24893: ST_TO_ADDR
// if not tmp then
24894: LD_VAR 0 2
24898: NOT
24899: IFFALSE 24903
// exit ;
24901: GO 24932
// for i in tmp do
24903: LD_ADDR_VAR 0 1
24907: PUSH
24908: LD_VAR 0 2
24912: PUSH
24913: FOR_IN
24914: IFFALSE 24930
// begin SetLives ( i , 0 ) ;
24916: LD_VAR 0 1
24920: PPUSH
24921: LD_INT 0
24923: PPUSH
24924: CALL_OW 234
// end ;
24928: GO 24913
24930: POP
24931: POP
// end ;
24932: PPOPN 2
24934: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24935: LD_EXP 54
24939: IFFALSE 24947
24941: PUSH
24942: LD_EXP 64
24946: AND
24947: IFFALSE 24967
24949: GO 24951
24951: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24952: LD_INT 32
24954: PPUSH
24955: LD_OWVAR 2
24959: PPUSH
24960: LD_INT 0
24962: PPUSH
24963: CALL_OW 324
24967: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24968: LD_EXP 54
24972: IFFALSE 24980
24974: PUSH
24975: LD_EXP 65
24979: AND
24980: IFFALSE 25163
24982: GO 24984
24984: DISABLE
24985: LD_INT 0
24987: PPUSH
24988: PPUSH
24989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24990: LD_ADDR_VAR 0 2
24994: PUSH
24995: LD_INT 22
24997: PUSH
24998: LD_OWVAR 2
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: PUSH
25007: LD_INT 33
25009: PUSH
25010: LD_INT 3
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PPUSH
25021: CALL_OW 69
25025: ST_TO_ADDR
// if not tmp then
25026: LD_VAR 0 2
25030: NOT
25031: IFFALSE 25035
// exit ;
25033: GO 25163
// side := 0 ;
25035: LD_ADDR_VAR 0 3
25039: PUSH
25040: LD_INT 0
25042: ST_TO_ADDR
// for i := 1 to 8 do
25043: LD_ADDR_VAR 0 1
25047: PUSH
25048: DOUBLE
25049: LD_INT 1
25051: DEC
25052: ST_TO_ADDR
25053: LD_INT 8
25055: PUSH
25056: FOR_TO
25057: IFFALSE 25107
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25059: LD_OWVAR 2
25063: PUSH
25064: LD_VAR 0 1
25068: NONEQUAL
25069: IFFALSE 25091
25071: PUSH
25072: LD_OWVAR 2
25076: PPUSH
25077: LD_VAR 0 1
25081: PPUSH
25082: CALL_OW 81
25086: PUSH
25087: LD_INT 2
25089: EQUAL
25090: AND
25091: IFFALSE 25105
// begin side := i ;
25093: LD_ADDR_VAR 0 3
25097: PUSH
25098: LD_VAR 0 1
25102: ST_TO_ADDR
// break ;
25103: GO 25107
// end ;
25105: GO 25056
25107: POP
25108: POP
// if not side then
25109: LD_VAR 0 3
25113: NOT
25114: IFFALSE 25118
// exit ;
25116: GO 25163
// for i := 1 to tmp do
25118: LD_ADDR_VAR 0 1
25122: PUSH
25123: DOUBLE
25124: LD_INT 1
25126: DEC
25127: ST_TO_ADDR
25128: LD_VAR 0 2
25132: PUSH
25133: FOR_TO
25134: IFFALSE 25161
// if Prob ( 60 ) then
25136: LD_INT 60
25138: PPUSH
25139: CALL_OW 13
25143: IFFALSE 25159
// SetSide ( i , side ) ;
25145: LD_VAR 0 1
25149: PPUSH
25150: LD_VAR 0 3
25154: PPUSH
25155: CALL_OW 235
25159: GO 25133
25161: POP
25162: POP
// end ;
25163: PPOPN 3
25165: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25166: LD_EXP 54
25170: IFFALSE 25178
25172: PUSH
25173: LD_EXP 67
25177: AND
25178: IFFALSE 25297
25180: GO 25182
25182: DISABLE
25183: LD_INT 0
25185: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25186: LD_ADDR_VAR 0 1
25190: PUSH
25191: LD_INT 22
25193: PUSH
25194: LD_OWVAR 2
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: LD_INT 21
25205: PUSH
25206: LD_INT 1
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: LD_INT 3
25215: PUSH
25216: LD_INT 23
25218: PUSH
25219: LD_INT 0
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: LIST
25234: PPUSH
25235: CALL_OW 69
25239: PUSH
25240: FOR_IN
25241: IFFALSE 25295
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25243: LD_VAR 0 1
25247: PPUSH
25248: CALL_OW 257
25252: PUSH
25253: LD_INT 1
25255: PUSH
25256: LD_INT 2
25258: PUSH
25259: LD_INT 3
25261: PUSH
25262: LD_INT 4
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: IN
25271: IFFALSE 25293
// SetClass ( un , rand ( 1 , 4 ) ) ;
25273: LD_VAR 0 1
25277: PPUSH
25278: LD_INT 1
25280: PPUSH
25281: LD_INT 4
25283: PPUSH
25284: CALL_OW 12
25288: PPUSH
25289: CALL_OW 336
25293: GO 25240
25295: POP
25296: POP
// end ;
25297: PPOPN 1
25299: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25300: LD_EXP 54
25304: IFFALSE 25312
25306: PUSH
25307: LD_EXP 66
25311: AND
25312: IFFALSE 25391
25314: GO 25316
25316: DISABLE
25317: LD_INT 0
25319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25320: LD_ADDR_VAR 0 1
25324: PUSH
25325: LD_INT 22
25327: PUSH
25328: LD_OWVAR 2
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: LD_INT 21
25339: PUSH
25340: LD_INT 3
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PPUSH
25351: CALL_OW 69
25355: ST_TO_ADDR
// if not tmp then
25356: LD_VAR 0 1
25360: NOT
25361: IFFALSE 25365
// exit ;
25363: GO 25391
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25365: LD_VAR 0 1
25369: PUSH
25370: LD_INT 1
25372: PPUSH
25373: LD_VAR 0 1
25377: PPUSH
25378: CALL_OW 12
25382: ARRAY
25383: PPUSH
25384: LD_INT 100
25386: PPUSH
25387: CALL_OW 234
// end ;
25391: PPOPN 1
25393: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25394: LD_EXP 54
25398: IFFALSE 25406
25400: PUSH
25401: LD_EXP 68
25405: AND
25406: IFFALSE 25504
25408: GO 25410
25410: DISABLE
25411: LD_INT 0
25413: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25414: LD_ADDR_VAR 0 1
25418: PUSH
25419: LD_INT 22
25421: PUSH
25422: LD_OWVAR 2
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: LD_INT 21
25433: PUSH
25434: LD_INT 1
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PPUSH
25445: CALL_OW 69
25449: ST_TO_ADDR
// if not tmp then
25450: LD_VAR 0 1
25454: NOT
25455: IFFALSE 25459
// exit ;
25457: GO 25504
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25459: LD_VAR 0 1
25463: PUSH
25464: LD_INT 1
25466: PPUSH
25467: LD_VAR 0 1
25471: PPUSH
25472: CALL_OW 12
25476: ARRAY
25477: PPUSH
25478: LD_INT 1
25480: PPUSH
25481: LD_INT 4
25483: PPUSH
25484: CALL_OW 12
25488: PPUSH
25489: LD_INT 3000
25491: PPUSH
25492: LD_INT 9000
25494: PPUSH
25495: CALL_OW 12
25499: PPUSH
25500: CALL_OW 492
// end ;
25504: PPOPN 1
25506: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25507: LD_EXP 54
25511: IFFALSE 25519
25513: PUSH
25514: LD_EXP 69
25518: AND
25519: IFFALSE 25539
25521: GO 25523
25523: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25524: LD_INT 1
25526: PPUSH
25527: LD_OWVAR 2
25531: PPUSH
25532: LD_INT 0
25534: PPUSH
25535: CALL_OW 324
25539: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25540: LD_EXP 54
25544: IFFALSE 25552
25546: PUSH
25547: LD_EXP 70
25551: AND
25552: IFFALSE 25635
25554: GO 25556
25556: DISABLE
25557: LD_INT 0
25559: PPUSH
25560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25561: LD_ADDR_VAR 0 2
25565: PUSH
25566: LD_INT 22
25568: PUSH
25569: LD_OWVAR 2
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 21
25580: PUSH
25581: LD_INT 3
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PPUSH
25592: CALL_OW 69
25596: ST_TO_ADDR
// if not tmp then
25597: LD_VAR 0 2
25601: NOT
25602: IFFALSE 25606
// exit ;
25604: GO 25635
// for i in tmp do
25606: LD_ADDR_VAR 0 1
25610: PUSH
25611: LD_VAR 0 2
25615: PUSH
25616: FOR_IN
25617: IFFALSE 25633
// SetBLevel ( i , 10 ) ;
25619: LD_VAR 0 1
25623: PPUSH
25624: LD_INT 10
25626: PPUSH
25627: CALL_OW 241
25631: GO 25616
25633: POP
25634: POP
// end ;
25635: PPOPN 2
25637: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25638: LD_EXP 54
25642: IFFALSE 25650
25644: PUSH
25645: LD_EXP 71
25649: AND
25650: IFFALSE 25761
25652: GO 25654
25654: DISABLE
25655: LD_INT 0
25657: PPUSH
25658: PPUSH
25659: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25660: LD_ADDR_VAR 0 3
25664: PUSH
25665: LD_INT 22
25667: PUSH
25668: LD_OWVAR 2
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_INT 25
25679: PUSH
25680: LD_INT 1
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PPUSH
25691: CALL_OW 69
25695: ST_TO_ADDR
// if not tmp then
25696: LD_VAR 0 3
25700: NOT
25701: IFFALSE 25705
// exit ;
25703: GO 25761
// un := tmp [ rand ( 1 , tmp ) ] ;
25705: LD_ADDR_VAR 0 2
25709: PUSH
25710: LD_VAR 0 3
25714: PUSH
25715: LD_INT 1
25717: PPUSH
25718: LD_VAR 0 3
25722: PPUSH
25723: CALL_OW 12
25727: ARRAY
25728: ST_TO_ADDR
// if Crawls ( un ) then
25729: LD_VAR 0 2
25733: PPUSH
25734: CALL_OW 318
25738: IFFALSE 25749
// ComWalk ( un ) ;
25740: LD_VAR 0 2
25744: PPUSH
25745: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25749: LD_VAR 0 2
25753: PPUSH
25754: LD_INT 5
25756: PPUSH
25757: CALL_OW 336
// end ;
25761: PPOPN 3
25763: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25764: LD_EXP 54
25768: IFFALSE 25776
25770: PUSH
25771: LD_EXP 72
25775: AND
25776: IFFALSE 25788
25778: PUSH
25779: LD_OWVAR 67
25783: PUSH
25784: LD_INT 4
25786: LESS
25787: AND
25788: IFFALSE 25807
25790: GO 25792
25792: DISABLE
// begin Difficulty := Difficulty + 1 ;
25793: LD_ADDR_OWVAR 67
25797: PUSH
25798: LD_OWVAR 67
25802: PUSH
25803: LD_INT 1
25805: PLUS
25806: ST_TO_ADDR
// end ;
25807: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25808: LD_EXP 54
25812: IFFALSE 25820
25814: PUSH
25815: LD_EXP 73
25819: AND
25820: IFFALSE 25923
25822: GO 25824
25824: DISABLE
25825: LD_INT 0
25827: PPUSH
// begin for i := 1 to 5 do
25828: LD_ADDR_VAR 0 1
25832: PUSH
25833: DOUBLE
25834: LD_INT 1
25836: DEC
25837: ST_TO_ADDR
25838: LD_INT 5
25840: PUSH
25841: FOR_TO
25842: IFFALSE 25921
// begin uc_nation := nation_nature ;
25844: LD_ADDR_OWVAR 21
25848: PUSH
25849: LD_INT 0
25851: ST_TO_ADDR
// uc_side := 0 ;
25852: LD_ADDR_OWVAR 20
25856: PUSH
25857: LD_INT 0
25859: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25860: LD_ADDR_OWVAR 29
25864: PUSH
25865: LD_INT 12
25867: PUSH
25868: LD_INT 12
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: ST_TO_ADDR
// hc_agressivity := 20 ;
25875: LD_ADDR_OWVAR 35
25879: PUSH
25880: LD_INT 20
25882: ST_TO_ADDR
// hc_class := class_tiger ;
25883: LD_ADDR_OWVAR 28
25887: PUSH
25888: LD_INT 14
25890: ST_TO_ADDR
// hc_gallery :=  ;
25891: LD_ADDR_OWVAR 33
25895: PUSH
25896: LD_STRING 
25898: ST_TO_ADDR
// hc_name :=  ;
25899: LD_ADDR_OWVAR 26
25903: PUSH
25904: LD_STRING 
25906: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25907: CALL_OW 44
25911: PPUSH
25912: LD_INT 0
25914: PPUSH
25915: CALL_OW 51
// end ;
25919: GO 25841
25921: POP
25922: POP
// end ;
25923: PPOPN 1
25925: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25926: LD_EXP 54
25930: IFFALSE 25938
25932: PUSH
25933: LD_EXP 74
25937: AND
25938: IFFALSE 25947
25940: GO 25942
25942: DISABLE
// StreamSibBomb ;
25943: CALL 25948 0 0
25947: END
// export function StreamSibBomb ; var i , x , y ; begin
25948: LD_INT 0
25950: PPUSH
25951: PPUSH
25952: PPUSH
25953: PPUSH
// result := false ;
25954: LD_ADDR_VAR 0 1
25958: PUSH
25959: LD_INT 0
25961: ST_TO_ADDR
// for i := 1 to 16 do
25962: LD_ADDR_VAR 0 2
25966: PUSH
25967: DOUBLE
25968: LD_INT 1
25970: DEC
25971: ST_TO_ADDR
25972: LD_INT 16
25974: PUSH
25975: FOR_TO
25976: IFFALSE 26175
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25978: LD_ADDR_VAR 0 3
25982: PUSH
25983: LD_INT 10
25985: PUSH
25986: LD_INT 20
25988: PUSH
25989: LD_INT 30
25991: PUSH
25992: LD_INT 40
25994: PUSH
25995: LD_INT 50
25997: PUSH
25998: LD_INT 60
26000: PUSH
26001: LD_INT 70
26003: PUSH
26004: LD_INT 80
26006: PUSH
26007: LD_INT 90
26009: PUSH
26010: LD_INT 100
26012: PUSH
26013: LD_INT 110
26015: PUSH
26016: LD_INT 120
26018: PUSH
26019: LD_INT 130
26021: PUSH
26022: LD_INT 140
26024: PUSH
26025: LD_INT 150
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 1
26047: PPUSH
26048: LD_INT 15
26050: PPUSH
26051: CALL_OW 12
26055: ARRAY
26056: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26057: LD_ADDR_VAR 0 4
26061: PUSH
26062: LD_INT 10
26064: PUSH
26065: LD_INT 20
26067: PUSH
26068: LD_INT 30
26070: PUSH
26071: LD_INT 40
26073: PUSH
26074: LD_INT 50
26076: PUSH
26077: LD_INT 60
26079: PUSH
26080: LD_INT 70
26082: PUSH
26083: LD_INT 80
26085: PUSH
26086: LD_INT 90
26088: PUSH
26089: LD_INT 100
26091: PUSH
26092: LD_INT 110
26094: PUSH
26095: LD_INT 120
26097: PUSH
26098: LD_INT 130
26100: PUSH
26101: LD_INT 140
26103: PUSH
26104: LD_INT 150
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: PUSH
26124: LD_INT 1
26126: PPUSH
26127: LD_INT 15
26129: PPUSH
26130: CALL_OW 12
26134: ARRAY
26135: ST_TO_ADDR
// if ValidHex ( x , y ) then
26136: LD_VAR 0 3
26140: PPUSH
26141: LD_VAR 0 4
26145: PPUSH
26146: CALL_OW 488
26150: IFFALSE 26173
// begin result := [ x , y ] ;
26152: LD_ADDR_VAR 0 1
26156: PUSH
26157: LD_VAR 0 3
26161: PUSH
26162: LD_VAR 0 4
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: ST_TO_ADDR
// break ;
26171: GO 26175
// end ; end ;
26173: GO 25975
26175: POP
26176: POP
// if result then
26177: LD_VAR 0 1
26181: IFFALSE 26241
// begin ToLua ( playSibBomb() ) ;
26183: LD_STRING playSibBomb()
26185: PPUSH
26186: CALL_OW 559
// wait ( 0 0$14 ) ;
26190: LD_INT 490
26192: PPUSH
26193: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26197: LD_VAR 0 1
26201: PUSH
26202: LD_INT 1
26204: ARRAY
26205: PPUSH
26206: LD_VAR 0 1
26210: PUSH
26211: LD_INT 2
26213: ARRAY
26214: PPUSH
26215: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26219: LD_VAR 0 1
26223: PUSH
26224: LD_INT 1
26226: ARRAY
26227: PPUSH
26228: LD_VAR 0 1
26232: PUSH
26233: LD_INT 2
26235: ARRAY
26236: PPUSH
26237: CALL_OW 429
// end ; end ;
26241: LD_VAR 0 1
26245: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26246: LD_EXP 54
26250: IFFALSE 26258
26252: PUSH
26253: LD_EXP 76
26257: AND
26258: IFFALSE 26270
26260: GO 26262
26262: DISABLE
// YouLost (  ) ;
26263: LD_STRING 
26265: PPUSH
26266: CALL_OW 104
26270: END
// every 0 0$1 trigger StreamModeActive and sFog do
26271: LD_EXP 54
26275: IFFALSE 26283
26277: PUSH
26278: LD_EXP 75
26282: AND
26283: IFFALSE 26297
26285: GO 26287
26287: DISABLE
// FogOff ( your_side ) ;
26288: LD_OWVAR 2
26292: PPUSH
26293: CALL_OW 344
26297: END
// every 0 0$1 trigger StreamModeActive and sSun do
26298: LD_EXP 54
26302: IFFALSE 26310
26304: PUSH
26305: LD_EXP 77
26309: AND
26310: IFFALSE 26338
26312: GO 26314
26314: DISABLE
// begin solar_recharge_percent := 0 ;
26315: LD_ADDR_OWVAR 79
26319: PUSH
26320: LD_INT 0
26322: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26323: LD_INT 10500
26325: PPUSH
26326: CALL_OW 67
// solar_recharge_percent := 100 ;
26330: LD_ADDR_OWVAR 79
26334: PUSH
26335: LD_INT 100
26337: ST_TO_ADDR
// end ;
26338: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26339: LD_EXP 54
26343: IFFALSE 26351
26345: PUSH
26346: LD_EXP 78
26350: AND
26351: IFFALSE 26590
26353: GO 26355
26355: DISABLE
26356: LD_INT 0
26358: PPUSH
26359: PPUSH
26360: PPUSH
// begin tmp := [ ] ;
26361: LD_ADDR_VAR 0 3
26365: PUSH
26366: EMPTY
26367: ST_TO_ADDR
// for i := 1 to 6 do
26368: LD_ADDR_VAR 0 1
26372: PUSH
26373: DOUBLE
26374: LD_INT 1
26376: DEC
26377: ST_TO_ADDR
26378: LD_INT 6
26380: PUSH
26381: FOR_TO
26382: IFFALSE 26487
// begin uc_nation := nation_nature ;
26384: LD_ADDR_OWVAR 21
26388: PUSH
26389: LD_INT 0
26391: ST_TO_ADDR
// uc_side := 0 ;
26392: LD_ADDR_OWVAR 20
26396: PUSH
26397: LD_INT 0
26399: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26400: LD_ADDR_OWVAR 29
26404: PUSH
26405: LD_INT 12
26407: PUSH
26408: LD_INT 12
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: ST_TO_ADDR
// hc_agressivity := 20 ;
26415: LD_ADDR_OWVAR 35
26419: PUSH
26420: LD_INT 20
26422: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26423: LD_ADDR_OWVAR 28
26427: PUSH
26428: LD_INT 17
26430: ST_TO_ADDR
// hc_gallery :=  ;
26431: LD_ADDR_OWVAR 33
26435: PUSH
26436: LD_STRING 
26438: ST_TO_ADDR
// hc_name :=  ;
26439: LD_ADDR_OWVAR 26
26443: PUSH
26444: LD_STRING 
26446: ST_TO_ADDR
// un := CreateHuman ;
26447: LD_ADDR_VAR 0 2
26451: PUSH
26452: CALL_OW 44
26456: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26457: LD_VAR 0 2
26461: PPUSH
26462: LD_INT 1
26464: PPUSH
26465: CALL_OW 51
// tmp := tmp ^ un ;
26469: LD_ADDR_VAR 0 3
26473: PUSH
26474: LD_VAR 0 3
26478: PUSH
26479: LD_VAR 0 2
26483: ADD
26484: ST_TO_ADDR
// end ;
26485: GO 26381
26487: POP
26488: POP
// repeat wait ( 0 0$1 ) ;
26489: LD_INT 35
26491: PPUSH
26492: CALL_OW 67
// for un in tmp do
26496: LD_ADDR_VAR 0 2
26500: PUSH
26501: LD_VAR 0 3
26505: PUSH
26506: FOR_IN
26507: IFFALSE 26581
// begin if IsDead ( un ) then
26509: LD_VAR 0 2
26513: PPUSH
26514: CALL_OW 301
26518: IFFALSE 26538
// begin tmp := tmp diff un ;
26520: LD_ADDR_VAR 0 3
26524: PUSH
26525: LD_VAR 0 3
26529: PUSH
26530: LD_VAR 0 2
26534: DIFF
26535: ST_TO_ADDR
// continue ;
26536: GO 26506
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26538: LD_VAR 0 2
26542: PPUSH
26543: LD_INT 3
26545: PUSH
26546: LD_INT 22
26548: PUSH
26549: LD_INT 0
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PPUSH
26560: CALL_OW 69
26564: PPUSH
26565: LD_VAR 0 2
26569: PPUSH
26570: CALL_OW 74
26574: PPUSH
26575: CALL_OW 115
// end ;
26579: GO 26506
26581: POP
26582: POP
// until not tmp ;
26583: LD_VAR 0 3
26587: NOT
26588: IFFALSE 26489
// end ;
26590: PPOPN 3
26592: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26593: LD_EXP 54
26597: IFFALSE 26605
26599: PUSH
26600: LD_EXP 79
26604: AND
26605: IFFALSE 26659
26607: GO 26609
26609: DISABLE
// begin ToLua ( displayTroll(); ) ;
26610: LD_STRING displayTroll();
26612: PPUSH
26613: CALL_OW 559
// wait ( 3 3$00 ) ;
26617: LD_INT 6300
26619: PPUSH
26620: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26624: LD_STRING hideTroll();
26626: PPUSH
26627: CALL_OW 559
// wait ( 1 1$00 ) ;
26631: LD_INT 2100
26633: PPUSH
26634: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26638: LD_STRING displayTroll();
26640: PPUSH
26641: CALL_OW 559
// wait ( 1 1$00 ) ;
26645: LD_INT 2100
26647: PPUSH
26648: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26652: LD_STRING hideTroll();
26654: PPUSH
26655: CALL_OW 559
// end ;
26659: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26660: LD_EXP 54
26664: IFFALSE 26672
26666: PUSH
26667: LD_EXP 80
26671: AND
26672: IFFALSE 26735
26674: GO 26676
26676: DISABLE
26677: LD_INT 0
26679: PPUSH
// begin p := 0 ;
26680: LD_ADDR_VAR 0 1
26684: PUSH
26685: LD_INT 0
26687: ST_TO_ADDR
// repeat game_speed := 1 ;
26688: LD_ADDR_OWVAR 65
26692: PUSH
26693: LD_INT 1
26695: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26696: LD_INT 35
26698: PPUSH
26699: CALL_OW 67
// p := p + 1 ;
26703: LD_ADDR_VAR 0 1
26707: PUSH
26708: LD_VAR 0 1
26712: PUSH
26713: LD_INT 1
26715: PLUS
26716: ST_TO_ADDR
// until p >= 60 ;
26717: LD_VAR 0 1
26721: PUSH
26722: LD_INT 60
26724: GREATEREQUAL
26725: IFFALSE 26688
// game_speed := 4 ;
26727: LD_ADDR_OWVAR 65
26731: PUSH
26732: LD_INT 4
26734: ST_TO_ADDR
// end ;
26735: PPOPN 1
26737: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26738: LD_EXP 54
26742: IFFALSE 26750
26744: PUSH
26745: LD_EXP 81
26749: AND
26750: IFFALSE 26896
26752: GO 26754
26754: DISABLE
26755: LD_INT 0
26757: PPUSH
26758: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26759: LD_ADDR_VAR 0 1
26763: PUSH
26764: LD_INT 22
26766: PUSH
26767: LD_OWVAR 2
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 2
26778: PUSH
26779: LD_INT 30
26781: PUSH
26782: LD_INT 0
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 30
26791: PUSH
26792: LD_INT 1
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: LIST
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PPUSH
26808: CALL_OW 69
26812: ST_TO_ADDR
// if not depot then
26813: LD_VAR 0 1
26817: NOT
26818: IFFALSE 26822
// exit ;
26820: GO 26896
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26822: LD_ADDR_VAR 0 2
26826: PUSH
26827: LD_VAR 0 1
26831: PUSH
26832: LD_INT 1
26834: PPUSH
26835: LD_VAR 0 1
26839: PPUSH
26840: CALL_OW 12
26844: ARRAY
26845: PPUSH
26846: CALL_OW 274
26850: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26851: LD_VAR 0 2
26855: PPUSH
26856: LD_INT 1
26858: PPUSH
26859: LD_INT 0
26861: PPUSH
26862: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26866: LD_VAR 0 2
26870: PPUSH
26871: LD_INT 2
26873: PPUSH
26874: LD_INT 0
26876: PPUSH
26877: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26881: LD_VAR 0 2
26885: PPUSH
26886: LD_INT 3
26888: PPUSH
26889: LD_INT 0
26891: PPUSH
26892: CALL_OW 277
// end ;
26896: PPOPN 2
26898: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26899: LD_EXP 54
26903: IFFALSE 26911
26905: PUSH
26906: LD_EXP 82
26910: AND
26911: IFFALSE 27008
26913: GO 26915
26915: DISABLE
26916: LD_INT 0
26918: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26919: LD_ADDR_VAR 0 1
26923: PUSH
26924: LD_INT 22
26926: PUSH
26927: LD_OWVAR 2
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 21
26938: PUSH
26939: LD_INT 1
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 3
26948: PUSH
26949: LD_INT 23
26951: PUSH
26952: LD_INT 0
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: LIST
26967: PPUSH
26968: CALL_OW 69
26972: ST_TO_ADDR
// if not tmp then
26973: LD_VAR 0 1
26977: NOT
26978: IFFALSE 26982
// exit ;
26980: GO 27008
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26982: LD_VAR 0 1
26986: PUSH
26987: LD_INT 1
26989: PPUSH
26990: LD_VAR 0 1
26994: PPUSH
26995: CALL_OW 12
26999: ARRAY
27000: PPUSH
27001: LD_INT 200
27003: PPUSH
27004: CALL_OW 234
// end ;
27008: PPOPN 1
27010: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27011: LD_EXP 54
27015: IFFALSE 27023
27017: PUSH
27018: LD_EXP 83
27022: AND
27023: IFFALSE 27102
27025: GO 27027
27027: DISABLE
27028: LD_INT 0
27030: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27031: LD_ADDR_VAR 0 1
27035: PUSH
27036: LD_INT 22
27038: PUSH
27039: LD_OWVAR 2
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 21
27050: PUSH
27051: LD_INT 2
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PPUSH
27062: CALL_OW 69
27066: ST_TO_ADDR
// if not tmp then
27067: LD_VAR 0 1
27071: NOT
27072: IFFALSE 27076
// exit ;
27074: GO 27102
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27076: LD_VAR 0 1
27080: PUSH
27081: LD_INT 1
27083: PPUSH
27084: LD_VAR 0 1
27088: PPUSH
27089: CALL_OW 12
27093: ARRAY
27094: PPUSH
27095: LD_INT 60
27097: PPUSH
27098: CALL_OW 234
// end ;
27102: PPOPN 1
27104: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27105: LD_EXP 54
27109: IFFALSE 27117
27111: PUSH
27112: LD_EXP 84
27116: AND
27117: IFFALSE 27216
27119: GO 27121
27121: DISABLE
27122: LD_INT 0
27124: PPUSH
27125: PPUSH
// begin enable ;
27126: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27127: LD_ADDR_VAR 0 1
27131: PUSH
27132: LD_INT 22
27134: PUSH
27135: LD_OWVAR 2
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 61
27146: PUSH
27147: EMPTY
27148: LIST
27149: PUSH
27150: LD_INT 33
27152: PUSH
27153: LD_INT 2
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: LIST
27164: PPUSH
27165: CALL_OW 69
27169: ST_TO_ADDR
// if not tmp then
27170: LD_VAR 0 1
27174: NOT
27175: IFFALSE 27179
// exit ;
27177: GO 27216
// for i in tmp do
27179: LD_ADDR_VAR 0 2
27183: PUSH
27184: LD_VAR 0 1
27188: PUSH
27189: FOR_IN
27190: IFFALSE 27214
// if IsControledBy ( i ) then
27192: LD_VAR 0 2
27196: PPUSH
27197: CALL_OW 312
27201: IFFALSE 27212
// ComUnlink ( i ) ;
27203: LD_VAR 0 2
27207: PPUSH
27208: CALL_OW 136
27212: GO 27189
27214: POP
27215: POP
// end ;
27216: PPOPN 2
27218: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27219: LD_EXP 54
27223: IFFALSE 27231
27225: PUSH
27226: LD_EXP 85
27230: AND
27231: IFFALSE 27371
27233: GO 27235
27235: DISABLE
27236: LD_INT 0
27238: PPUSH
27239: PPUSH
// begin ToLua ( displayPowell(); ) ;
27240: LD_STRING displayPowell();
27242: PPUSH
27243: CALL_OW 559
// uc_side := 0 ;
27247: LD_ADDR_OWVAR 20
27251: PUSH
27252: LD_INT 0
27254: ST_TO_ADDR
// uc_nation := 2 ;
27255: LD_ADDR_OWVAR 21
27259: PUSH
27260: LD_INT 2
27262: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27263: LD_ADDR_OWVAR 37
27267: PUSH
27268: LD_INT 14
27270: ST_TO_ADDR
// vc_engine := engine_siberite ;
27271: LD_ADDR_OWVAR 39
27275: PUSH
27276: LD_INT 3
27278: ST_TO_ADDR
// vc_control := control_apeman ;
27279: LD_ADDR_OWVAR 38
27283: PUSH
27284: LD_INT 5
27286: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27287: LD_ADDR_OWVAR 40
27291: PUSH
27292: LD_INT 29
27294: ST_TO_ADDR
// un := CreateVehicle ;
27295: LD_ADDR_VAR 0 2
27299: PUSH
27300: CALL_OW 45
27304: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27305: LD_VAR 0 2
27309: PPUSH
27310: LD_INT 1
27312: PPUSH
27313: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27317: LD_INT 35
27319: PPUSH
27320: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27324: LD_VAR 0 2
27328: PPUSH
27329: LD_INT 22
27331: PUSH
27332: LD_OWVAR 2
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PPUSH
27341: CALL_OW 69
27345: PPUSH
27346: LD_VAR 0 2
27350: PPUSH
27351: CALL_OW 74
27355: PPUSH
27356: CALL_OW 115
// until IsDead ( un ) ;
27360: LD_VAR 0 2
27364: PPUSH
27365: CALL_OW 301
27369: IFFALSE 27317
// end ;
27371: PPOPN 2
27373: END
// every 0 0$1 trigger StreamModeActive and sStu do
27374: LD_EXP 54
27378: IFFALSE 27386
27380: PUSH
27381: LD_EXP 93
27385: AND
27386: IFFALSE 27402
27388: GO 27390
27390: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27391: LD_STRING displayStucuk();
27393: PPUSH
27394: CALL_OW 559
// ResetFog ;
27398: CALL_OW 335
// end ;
27402: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27403: LD_EXP 54
27407: IFFALSE 27415
27409: PUSH
27410: LD_EXP 86
27414: AND
27415: IFFALSE 27556
27417: GO 27419
27419: DISABLE
27420: LD_INT 0
27422: PPUSH
27423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27424: LD_ADDR_VAR 0 2
27428: PUSH
27429: LD_INT 22
27431: PUSH
27432: LD_OWVAR 2
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: LD_INT 21
27443: PUSH
27444: LD_INT 1
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PPUSH
27455: CALL_OW 69
27459: ST_TO_ADDR
// if not tmp then
27460: LD_VAR 0 2
27464: NOT
27465: IFFALSE 27469
// exit ;
27467: GO 27556
// un := tmp [ rand ( 1 , tmp ) ] ;
27469: LD_ADDR_VAR 0 1
27473: PUSH
27474: LD_VAR 0 2
27478: PUSH
27479: LD_INT 1
27481: PPUSH
27482: LD_VAR 0 2
27486: PPUSH
27487: CALL_OW 12
27491: ARRAY
27492: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27493: LD_VAR 0 1
27497: PPUSH
27498: LD_INT 0
27500: PPUSH
27501: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27505: LD_VAR 0 1
27509: PPUSH
27510: LD_OWVAR 3
27514: PUSH
27515: LD_VAR 0 1
27519: DIFF
27520: PPUSH
27521: LD_VAR 0 1
27525: PPUSH
27526: CALL_OW 74
27530: PPUSH
27531: CALL_OW 115
// wait ( 0 0$20 ) ;
27535: LD_INT 700
27537: PPUSH
27538: CALL_OW 67
// SetSide ( un , your_side ) ;
27542: LD_VAR 0 1
27546: PPUSH
27547: LD_OWVAR 2
27551: PPUSH
27552: CALL_OW 235
// end ;
27556: PPOPN 2
27558: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27559: LD_EXP 54
27563: IFFALSE 27571
27565: PUSH
27566: LD_EXP 87
27570: AND
27571: IFFALSE 27677
27573: GO 27575
27575: DISABLE
27576: LD_INT 0
27578: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27579: LD_ADDR_VAR 0 1
27583: PUSH
27584: LD_INT 22
27586: PUSH
27587: LD_OWVAR 2
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 2
27598: PUSH
27599: LD_INT 30
27601: PUSH
27602: LD_INT 0
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 30
27611: PUSH
27612: LD_INT 1
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: LIST
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PPUSH
27628: CALL_OW 69
27632: ST_TO_ADDR
// if not depot then
27633: LD_VAR 0 1
27637: NOT
27638: IFFALSE 27642
// exit ;
27640: GO 27677
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27642: LD_VAR 0 1
27646: PUSH
27647: LD_INT 1
27649: ARRAY
27650: PPUSH
27651: CALL_OW 250
27655: PPUSH
27656: LD_VAR 0 1
27660: PUSH
27661: LD_INT 1
27663: ARRAY
27664: PPUSH
27665: CALL_OW 251
27669: PPUSH
27670: LD_INT 70
27672: PPUSH
27673: CALL_OW 495
// end ;
27677: PPOPN 1
27679: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27680: LD_EXP 54
27684: IFFALSE 27692
27686: PUSH
27687: LD_EXP 88
27691: AND
27692: IFFALSE 27903
27694: GO 27696
27696: DISABLE
27697: LD_INT 0
27699: PPUSH
27700: PPUSH
27701: PPUSH
27702: PPUSH
27703: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27704: LD_ADDR_VAR 0 5
27708: PUSH
27709: LD_INT 22
27711: PUSH
27712: LD_OWVAR 2
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 21
27723: PUSH
27724: LD_INT 1
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PPUSH
27735: CALL_OW 69
27739: ST_TO_ADDR
// if not tmp then
27740: LD_VAR 0 5
27744: NOT
27745: IFFALSE 27749
// exit ;
27747: GO 27903
// for i in tmp do
27749: LD_ADDR_VAR 0 1
27753: PUSH
27754: LD_VAR 0 5
27758: PUSH
27759: FOR_IN
27760: IFFALSE 27901
// begin d := rand ( 0 , 5 ) ;
27762: LD_ADDR_VAR 0 4
27766: PUSH
27767: LD_INT 0
27769: PPUSH
27770: LD_INT 5
27772: PPUSH
27773: CALL_OW 12
27777: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27778: LD_ADDR_VAR 0 2
27782: PUSH
27783: LD_VAR 0 1
27787: PPUSH
27788: CALL_OW 250
27792: PPUSH
27793: LD_VAR 0 4
27797: PPUSH
27798: LD_INT 3
27800: PPUSH
27801: LD_INT 12
27803: PPUSH
27804: CALL_OW 12
27808: PPUSH
27809: CALL_OW 272
27813: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27814: LD_ADDR_VAR 0 3
27818: PUSH
27819: LD_VAR 0 1
27823: PPUSH
27824: CALL_OW 251
27828: PPUSH
27829: LD_VAR 0 4
27833: PPUSH
27834: LD_INT 3
27836: PPUSH
27837: LD_INT 12
27839: PPUSH
27840: CALL_OW 12
27844: PPUSH
27845: CALL_OW 273
27849: ST_TO_ADDR
// if ValidHex ( x , y ) then
27850: LD_VAR 0 2
27854: PPUSH
27855: LD_VAR 0 3
27859: PPUSH
27860: CALL_OW 488
27864: IFFALSE 27899
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27866: LD_VAR 0 1
27870: PPUSH
27871: LD_VAR 0 2
27875: PPUSH
27876: LD_VAR 0 3
27880: PPUSH
27881: LD_INT 3
27883: PPUSH
27884: LD_INT 6
27886: PPUSH
27887: CALL_OW 12
27891: PPUSH
27892: LD_INT 1
27894: PPUSH
27895: CALL_OW 483
// end ;
27899: GO 27759
27901: POP
27902: POP
// end ;
27903: PPOPN 5
27905: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27906: LD_EXP 54
27910: IFFALSE 27918
27912: PUSH
27913: LD_EXP 89
27917: AND
27918: IFFALSE 28012
27920: GO 27922
27922: DISABLE
27923: LD_INT 0
27925: PPUSH
27926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27927: LD_ADDR_VAR 0 2
27931: PUSH
27932: LD_INT 22
27934: PUSH
27935: LD_OWVAR 2
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 32
27946: PUSH
27947: LD_INT 1
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PUSH
27954: LD_INT 21
27956: PUSH
27957: LD_INT 2
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: LIST
27968: PPUSH
27969: CALL_OW 69
27973: ST_TO_ADDR
// if not tmp then
27974: LD_VAR 0 2
27978: NOT
27979: IFFALSE 27983
// exit ;
27981: GO 28012
// for i in tmp do
27983: LD_ADDR_VAR 0 1
27987: PUSH
27988: LD_VAR 0 2
27992: PUSH
27993: FOR_IN
27994: IFFALSE 28010
// SetFuel ( i , 0 ) ;
27996: LD_VAR 0 1
28000: PPUSH
28001: LD_INT 0
28003: PPUSH
28004: CALL_OW 240
28008: GO 27993
28010: POP
28011: POP
// end ;
28012: PPOPN 2
28014: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28015: LD_EXP 54
28019: IFFALSE 28027
28021: PUSH
28022: LD_EXP 90
28026: AND
28027: IFFALSE 28093
28029: GO 28031
28031: DISABLE
28032: LD_INT 0
28034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28035: LD_ADDR_VAR 0 1
28039: PUSH
28040: LD_INT 22
28042: PUSH
28043: LD_OWVAR 2
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: LD_INT 30
28054: PUSH
28055: LD_INT 29
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PPUSH
28066: CALL_OW 69
28070: ST_TO_ADDR
// if not tmp then
28071: LD_VAR 0 1
28075: NOT
28076: IFFALSE 28080
// exit ;
28078: GO 28093
// DestroyUnit ( tmp [ 1 ] ) ;
28080: LD_VAR 0 1
28084: PUSH
28085: LD_INT 1
28087: ARRAY
28088: PPUSH
28089: CALL_OW 65
// end ;
28093: PPOPN 1
28095: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28096: LD_EXP 54
28100: IFFALSE 28108
28102: PUSH
28103: LD_EXP 92
28107: AND
28108: IFFALSE 28237
28110: GO 28112
28112: DISABLE
28113: LD_INT 0
28115: PPUSH
// begin uc_side := 0 ;
28116: LD_ADDR_OWVAR 20
28120: PUSH
28121: LD_INT 0
28123: ST_TO_ADDR
// uc_nation := nation_arabian ;
28124: LD_ADDR_OWVAR 21
28128: PUSH
28129: LD_INT 2
28131: ST_TO_ADDR
// hc_gallery :=  ;
28132: LD_ADDR_OWVAR 33
28136: PUSH
28137: LD_STRING 
28139: ST_TO_ADDR
// hc_name :=  ;
28140: LD_ADDR_OWVAR 26
28144: PUSH
28145: LD_STRING 
28147: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28148: LD_INT 1
28150: PPUSH
28151: LD_INT 11
28153: PPUSH
28154: LD_INT 10
28156: PPUSH
28157: CALL_OW 380
// un := CreateHuman ;
28161: LD_ADDR_VAR 0 1
28165: PUSH
28166: CALL_OW 44
28170: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28171: LD_VAR 0 1
28175: PPUSH
28176: LD_INT 1
28178: PPUSH
28179: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28183: LD_INT 35
28185: PPUSH
28186: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28190: LD_VAR 0 1
28194: PPUSH
28195: LD_INT 22
28197: PUSH
28198: LD_OWVAR 2
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PPUSH
28207: CALL_OW 69
28211: PPUSH
28212: LD_VAR 0 1
28216: PPUSH
28217: CALL_OW 74
28221: PPUSH
28222: CALL_OW 115
// until IsDead ( un ) ;
28226: LD_VAR 0 1
28230: PPUSH
28231: CALL_OW 301
28235: IFFALSE 28183
// end ;
28237: PPOPN 1
28239: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28240: LD_EXP 54
28244: IFFALSE 28252
28246: PUSH
28247: LD_EXP 94
28251: AND
28252: IFFALSE 28264
28254: GO 28256
28256: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28257: LD_STRING earthquake(getX(game), 0, 32)
28259: PPUSH
28260: CALL_OW 559
28264: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28265: LD_EXP 54
28269: IFFALSE 28277
28271: PUSH
28272: LD_EXP 95
28276: AND
28277: IFFALSE 28368
28279: GO 28281
28281: DISABLE
28282: LD_INT 0
28284: PPUSH
// begin enable ;
28285: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28286: LD_ADDR_VAR 0 1
28290: PUSH
28291: LD_INT 22
28293: PUSH
28294: LD_OWVAR 2
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 21
28305: PUSH
28306: LD_INT 2
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 33
28315: PUSH
28316: LD_INT 3
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: LIST
28327: PPUSH
28328: CALL_OW 69
28332: ST_TO_ADDR
// if not tmp then
28333: LD_VAR 0 1
28337: NOT
28338: IFFALSE 28342
// exit ;
28340: GO 28368
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28342: LD_VAR 0 1
28346: PUSH
28347: LD_INT 1
28349: PPUSH
28350: LD_VAR 0 1
28354: PPUSH
28355: CALL_OW 12
28359: ARRAY
28360: PPUSH
28361: LD_INT 1
28363: PPUSH
28364: CALL_OW 234
// end ;
28368: PPOPN 1
28370: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28371: LD_EXP 54
28375: IFFALSE 28383
28377: PUSH
28378: LD_EXP 96
28382: AND
28383: IFFALSE 28524
28385: GO 28387
28387: DISABLE
28388: LD_INT 0
28390: PPUSH
28391: PPUSH
28392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28393: LD_ADDR_VAR 0 3
28397: PUSH
28398: LD_INT 22
28400: PUSH
28401: LD_OWVAR 2
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 25
28412: PUSH
28413: LD_INT 1
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PPUSH
28424: CALL_OW 69
28428: ST_TO_ADDR
// if not tmp then
28429: LD_VAR 0 3
28433: NOT
28434: IFFALSE 28438
// exit ;
28436: GO 28524
// un := tmp [ rand ( 1 , tmp ) ] ;
28438: LD_ADDR_VAR 0 2
28442: PUSH
28443: LD_VAR 0 3
28447: PUSH
28448: LD_INT 1
28450: PPUSH
28451: LD_VAR 0 3
28455: PPUSH
28456: CALL_OW 12
28460: ARRAY
28461: ST_TO_ADDR
// if Crawls ( un ) then
28462: LD_VAR 0 2
28466: PPUSH
28467: CALL_OW 318
28471: IFFALSE 28482
// ComWalk ( un ) ;
28473: LD_VAR 0 2
28477: PPUSH
28478: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28482: LD_VAR 0 2
28486: PPUSH
28487: LD_INT 9
28489: PPUSH
28490: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28494: LD_INT 28
28496: PPUSH
28497: LD_OWVAR 2
28501: PPUSH
28502: LD_INT 2
28504: PPUSH
28505: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28509: LD_INT 29
28511: PPUSH
28512: LD_OWVAR 2
28516: PPUSH
28517: LD_INT 2
28519: PPUSH
28520: CALL_OW 322
// end ;
28524: PPOPN 3
28526: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28527: LD_EXP 54
28531: IFFALSE 28539
28533: PUSH
28534: LD_EXP 97
28538: AND
28539: IFFALSE 28650
28541: GO 28543
28543: DISABLE
28544: LD_INT 0
28546: PPUSH
28547: PPUSH
28548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28549: LD_ADDR_VAR 0 3
28553: PUSH
28554: LD_INT 22
28556: PUSH
28557: LD_OWVAR 2
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: LD_INT 25
28568: PUSH
28569: LD_INT 1
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PPUSH
28580: CALL_OW 69
28584: ST_TO_ADDR
// if not tmp then
28585: LD_VAR 0 3
28589: NOT
28590: IFFALSE 28594
// exit ;
28592: GO 28650
// un := tmp [ rand ( 1 , tmp ) ] ;
28594: LD_ADDR_VAR 0 2
28598: PUSH
28599: LD_VAR 0 3
28603: PUSH
28604: LD_INT 1
28606: PPUSH
28607: LD_VAR 0 3
28611: PPUSH
28612: CALL_OW 12
28616: ARRAY
28617: ST_TO_ADDR
// if Crawls ( un ) then
28618: LD_VAR 0 2
28622: PPUSH
28623: CALL_OW 318
28627: IFFALSE 28638
// ComWalk ( un ) ;
28629: LD_VAR 0 2
28633: PPUSH
28634: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28638: LD_VAR 0 2
28642: PPUSH
28643: LD_INT 8
28645: PPUSH
28646: CALL_OW 336
// end ;
28650: PPOPN 3
28652: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28653: LD_EXP 54
28657: IFFALSE 28665
28659: PUSH
28660: LD_EXP 98
28664: AND
28665: IFFALSE 28809
28667: GO 28669
28669: DISABLE
28670: LD_INT 0
28672: PPUSH
28673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28674: LD_ADDR_VAR 0 2
28678: PUSH
28679: LD_INT 22
28681: PUSH
28682: LD_OWVAR 2
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 21
28693: PUSH
28694: LD_INT 2
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 2
28703: PUSH
28704: LD_INT 34
28706: PUSH
28707: LD_INT 12
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: LD_INT 34
28716: PUSH
28717: LD_INT 51
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: LD_INT 34
28726: PUSH
28727: LD_INT 32
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: LIST
28744: PPUSH
28745: CALL_OW 69
28749: ST_TO_ADDR
// if not tmp then
28750: LD_VAR 0 2
28754: NOT
28755: IFFALSE 28759
// exit ;
28757: GO 28809
// for i in tmp do
28759: LD_ADDR_VAR 0 1
28763: PUSH
28764: LD_VAR 0 2
28768: PUSH
28769: FOR_IN
28770: IFFALSE 28807
// if GetCargo ( i , mat_artifact ) = 0 then
28772: LD_VAR 0 1
28776: PPUSH
28777: LD_INT 4
28779: PPUSH
28780: CALL_OW 289
28784: PUSH
28785: LD_INT 0
28787: EQUAL
28788: IFFALSE 28805
// SetCargo ( i , mat_siberit , 100 ) ;
28790: LD_VAR 0 1
28794: PPUSH
28795: LD_INT 3
28797: PPUSH
28798: LD_INT 100
28800: PPUSH
28801: CALL_OW 290
28805: GO 28769
28807: POP
28808: POP
// end ;
28809: PPOPN 2
28811: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28812: LD_EXP 54
28816: IFFALSE 28824
28818: PUSH
28819: LD_EXP 99
28823: AND
28824: IFFALSE 29007
28826: GO 28828
28828: DISABLE
28829: LD_INT 0
28831: PPUSH
28832: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28833: LD_ADDR_VAR 0 2
28837: PUSH
28838: LD_INT 22
28840: PUSH
28841: LD_OWVAR 2
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: PPUSH
28850: CALL_OW 69
28854: ST_TO_ADDR
// if not tmp then
28855: LD_VAR 0 2
28859: NOT
28860: IFFALSE 28864
// exit ;
28862: GO 29007
// for i := 1 to 2 do
28864: LD_ADDR_VAR 0 1
28868: PUSH
28869: DOUBLE
28870: LD_INT 1
28872: DEC
28873: ST_TO_ADDR
28874: LD_INT 2
28876: PUSH
28877: FOR_TO
28878: IFFALSE 29005
// begin uc_side := your_side ;
28880: LD_ADDR_OWVAR 20
28884: PUSH
28885: LD_OWVAR 2
28889: ST_TO_ADDR
// uc_nation := nation_american ;
28890: LD_ADDR_OWVAR 21
28894: PUSH
28895: LD_INT 1
28897: ST_TO_ADDR
// vc_chassis := us_morphling ;
28898: LD_ADDR_OWVAR 37
28902: PUSH
28903: LD_INT 5
28905: ST_TO_ADDR
// vc_engine := engine_siberite ;
28906: LD_ADDR_OWVAR 39
28910: PUSH
28911: LD_INT 3
28913: ST_TO_ADDR
// vc_control := control_computer ;
28914: LD_ADDR_OWVAR 38
28918: PUSH
28919: LD_INT 3
28921: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28922: LD_ADDR_OWVAR 40
28926: PUSH
28927: LD_INT 10
28929: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28930: LD_VAR 0 2
28934: PUSH
28935: LD_INT 1
28937: ARRAY
28938: PPUSH
28939: CALL_OW 310
28943: NOT
28944: IFFALSE 28991
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28946: CALL_OW 45
28950: PPUSH
28951: LD_VAR 0 2
28955: PUSH
28956: LD_INT 1
28958: ARRAY
28959: PPUSH
28960: CALL_OW 250
28964: PPUSH
28965: LD_VAR 0 2
28969: PUSH
28970: LD_INT 1
28972: ARRAY
28973: PPUSH
28974: CALL_OW 251
28978: PPUSH
28979: LD_INT 12
28981: PPUSH
28982: LD_INT 1
28984: PPUSH
28985: CALL_OW 50
28989: GO 29003
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28991: CALL_OW 45
28995: PPUSH
28996: LD_INT 1
28998: PPUSH
28999: CALL_OW 51
// end ;
29003: GO 28877
29005: POP
29006: POP
// end ;
29007: PPOPN 2
29009: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29010: LD_EXP 54
29014: IFFALSE 29022
29016: PUSH
29017: LD_EXP 100
29021: AND
29022: IFFALSE 29244
29024: GO 29026
29026: DISABLE
29027: LD_INT 0
29029: PPUSH
29030: PPUSH
29031: PPUSH
29032: PPUSH
29033: PPUSH
29034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29035: LD_ADDR_VAR 0 6
29039: PUSH
29040: LD_INT 22
29042: PUSH
29043: LD_OWVAR 2
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 21
29054: PUSH
29055: LD_INT 1
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: LD_INT 3
29064: PUSH
29065: LD_INT 23
29067: PUSH
29068: LD_INT 0
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: LIST
29083: PPUSH
29084: CALL_OW 69
29088: ST_TO_ADDR
// if not tmp then
29089: LD_VAR 0 6
29093: NOT
29094: IFFALSE 29098
// exit ;
29096: GO 29244
// s1 := rand ( 1 , 4 ) ;
29098: LD_ADDR_VAR 0 2
29102: PUSH
29103: LD_INT 1
29105: PPUSH
29106: LD_INT 4
29108: PPUSH
29109: CALL_OW 12
29113: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29114: LD_ADDR_VAR 0 4
29118: PUSH
29119: LD_VAR 0 6
29123: PUSH
29124: LD_INT 1
29126: ARRAY
29127: PPUSH
29128: LD_VAR 0 2
29132: PPUSH
29133: CALL_OW 259
29137: ST_TO_ADDR
// if s1 = 1 then
29138: LD_VAR 0 2
29142: PUSH
29143: LD_INT 1
29145: EQUAL
29146: IFFALSE 29166
// s2 := rand ( 2 , 4 ) else
29148: LD_ADDR_VAR 0 3
29152: PUSH
29153: LD_INT 2
29155: PPUSH
29156: LD_INT 4
29158: PPUSH
29159: CALL_OW 12
29163: ST_TO_ADDR
29164: GO 29174
// s2 := 1 ;
29166: LD_ADDR_VAR 0 3
29170: PUSH
29171: LD_INT 1
29173: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29174: LD_ADDR_VAR 0 5
29178: PUSH
29179: LD_VAR 0 6
29183: PUSH
29184: LD_INT 1
29186: ARRAY
29187: PPUSH
29188: LD_VAR 0 3
29192: PPUSH
29193: CALL_OW 259
29197: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29198: LD_VAR 0 6
29202: PUSH
29203: LD_INT 1
29205: ARRAY
29206: PPUSH
29207: LD_VAR 0 2
29211: PPUSH
29212: LD_VAR 0 5
29216: PPUSH
29217: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29221: LD_VAR 0 6
29225: PUSH
29226: LD_INT 1
29228: ARRAY
29229: PPUSH
29230: LD_VAR 0 3
29234: PPUSH
29235: LD_VAR 0 4
29239: PPUSH
29240: CALL_OW 237
// end ;
29244: PPOPN 6
29246: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29247: LD_EXP 54
29251: IFFALSE 29259
29253: PUSH
29254: LD_EXP 101
29258: AND
29259: IFFALSE 29338
29261: GO 29263
29263: DISABLE
29264: LD_INT 0
29266: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29267: LD_ADDR_VAR 0 1
29271: PUSH
29272: LD_INT 22
29274: PUSH
29275: LD_OWVAR 2
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 30
29286: PUSH
29287: LD_INT 3
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PPUSH
29298: CALL_OW 69
29302: ST_TO_ADDR
// if not tmp then
29303: LD_VAR 0 1
29307: NOT
29308: IFFALSE 29312
// exit ;
29310: GO 29338
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29312: LD_VAR 0 1
29316: PUSH
29317: LD_INT 1
29319: PPUSH
29320: LD_VAR 0 1
29324: PPUSH
29325: CALL_OW 12
29329: ARRAY
29330: PPUSH
29331: LD_INT 1
29333: PPUSH
29334: CALL_OW 234
// end ;
29338: PPOPN 1
29340: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29341: LD_EXP 54
29345: IFFALSE 29353
29347: PUSH
29348: LD_EXP 102
29352: AND
29353: IFFALSE 29465
29355: GO 29357
29357: DISABLE
29358: LD_INT 0
29360: PPUSH
29361: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29362: LD_ADDR_VAR 0 2
29366: PUSH
29367: LD_INT 22
29369: PUSH
29370: LD_OWVAR 2
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 2
29381: PUSH
29382: LD_INT 30
29384: PUSH
29385: LD_INT 27
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: LD_INT 30
29394: PUSH
29395: LD_INT 26
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: LD_INT 30
29404: PUSH
29405: LD_INT 28
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PPUSH
29422: CALL_OW 69
29426: ST_TO_ADDR
// if not tmp then
29427: LD_VAR 0 2
29431: NOT
29432: IFFALSE 29436
// exit ;
29434: GO 29465
// for i in tmp do
29436: LD_ADDR_VAR 0 1
29440: PUSH
29441: LD_VAR 0 2
29445: PUSH
29446: FOR_IN
29447: IFFALSE 29463
// SetLives ( i , 1 ) ;
29449: LD_VAR 0 1
29453: PPUSH
29454: LD_INT 1
29456: PPUSH
29457: CALL_OW 234
29461: GO 29446
29463: POP
29464: POP
// end ;
29465: PPOPN 2
29467: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29468: LD_EXP 54
29472: IFFALSE 29480
29474: PUSH
29475: LD_EXP 103
29479: AND
29480: IFFALSE 29767
29482: GO 29484
29484: DISABLE
29485: LD_INT 0
29487: PPUSH
29488: PPUSH
29489: PPUSH
// begin i := rand ( 1 , 7 ) ;
29490: LD_ADDR_VAR 0 1
29494: PUSH
29495: LD_INT 1
29497: PPUSH
29498: LD_INT 7
29500: PPUSH
29501: CALL_OW 12
29505: ST_TO_ADDR
// case i of 1 :
29506: LD_VAR 0 1
29510: PUSH
29511: LD_INT 1
29513: DOUBLE
29514: EQUAL
29515: IFTRUE 29519
29517: GO 29529
29519: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29520: LD_STRING earthquake(getX(game), 0, 32)
29522: PPUSH
29523: CALL_OW 559
29527: GO 29767
29529: LD_INT 2
29531: DOUBLE
29532: EQUAL
29533: IFTRUE 29537
29535: GO 29551
29537: POP
// begin ToLua ( displayStucuk(); ) ;
29538: LD_STRING displayStucuk();
29540: PPUSH
29541: CALL_OW 559
// ResetFog ;
29545: CALL_OW 335
// end ; 3 :
29549: GO 29767
29551: LD_INT 3
29553: DOUBLE
29554: EQUAL
29555: IFTRUE 29559
29557: GO 29663
29559: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29560: LD_ADDR_VAR 0 2
29564: PUSH
29565: LD_INT 22
29567: PUSH
29568: LD_OWVAR 2
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 25
29579: PUSH
29580: LD_INT 1
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PPUSH
29591: CALL_OW 69
29595: ST_TO_ADDR
// if not tmp then
29596: LD_VAR 0 2
29600: NOT
29601: IFFALSE 29605
// exit ;
29603: GO 29767
// un := tmp [ rand ( 1 , tmp ) ] ;
29605: LD_ADDR_VAR 0 3
29609: PUSH
29610: LD_VAR 0 2
29614: PUSH
29615: LD_INT 1
29617: PPUSH
29618: LD_VAR 0 2
29622: PPUSH
29623: CALL_OW 12
29627: ARRAY
29628: ST_TO_ADDR
// if Crawls ( un ) then
29629: LD_VAR 0 3
29633: PPUSH
29634: CALL_OW 318
29638: IFFALSE 29649
// ComWalk ( un ) ;
29640: LD_VAR 0 3
29644: PPUSH
29645: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29649: LD_VAR 0 3
29653: PPUSH
29654: LD_INT 8
29656: PPUSH
29657: CALL_OW 336
// end ; 4 :
29661: GO 29767
29663: LD_INT 4
29665: DOUBLE
29666: EQUAL
29667: IFTRUE 29671
29669: GO 29745
29671: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29672: LD_ADDR_VAR 0 2
29676: PUSH
29677: LD_INT 22
29679: PUSH
29680: LD_OWVAR 2
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: LD_INT 30
29691: PUSH
29692: LD_INT 29
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PPUSH
29703: CALL_OW 69
29707: ST_TO_ADDR
// if not tmp then
29708: LD_VAR 0 2
29712: NOT
29713: IFFALSE 29717
// exit ;
29715: GO 29767
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29717: LD_VAR 0 2
29721: PUSH
29722: LD_INT 1
29724: ARRAY
29725: PPUSH
29726: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29730: LD_VAR 0 2
29734: PUSH
29735: LD_INT 1
29737: ARRAY
29738: PPUSH
29739: CALL_OW 65
// end ; 5 .. 7 :
29743: GO 29767
29745: LD_INT 5
29747: DOUBLE
29748: GREATEREQUAL
29749: IFFALSE 29757
29751: LD_INT 7
29753: DOUBLE
29754: LESSEQUAL
29755: IFTRUE 29759
29757: GO 29766
29759: POP
// StreamSibBomb ; end ;
29760: CALL 25948 0 0
29764: GO 29767
29766: POP
// end ;
29767: PPOPN 3
29769: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29770: LD_EXP 54
29774: IFFALSE 29782
29776: PUSH
29777: LD_EXP 104
29781: AND
29782: IFFALSE 29938
29784: GO 29786
29786: DISABLE
29787: LD_INT 0
29789: PPUSH
29790: PPUSH
29791: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29792: LD_ADDR_VAR 0 2
29796: PUSH
29797: LD_INT 81
29799: PUSH
29800: LD_OWVAR 2
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 2
29811: PUSH
29812: LD_INT 21
29814: PUSH
29815: LD_INT 1
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: LD_INT 21
29824: PUSH
29825: LD_INT 2
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: LIST
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PPUSH
29841: CALL_OW 69
29845: ST_TO_ADDR
// if not tmp then
29846: LD_VAR 0 2
29850: NOT
29851: IFFALSE 29855
// exit ;
29853: GO 29938
// p := 0 ;
29855: LD_ADDR_VAR 0 3
29859: PUSH
29860: LD_INT 0
29862: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29863: LD_INT 35
29865: PPUSH
29866: CALL_OW 67
// p := p + 1 ;
29870: LD_ADDR_VAR 0 3
29874: PUSH
29875: LD_VAR 0 3
29879: PUSH
29880: LD_INT 1
29882: PLUS
29883: ST_TO_ADDR
// for i in tmp do
29884: LD_ADDR_VAR 0 1
29888: PUSH
29889: LD_VAR 0 2
29893: PUSH
29894: FOR_IN
29895: IFFALSE 29926
// if GetLives ( i ) < 1000 then
29897: LD_VAR 0 1
29901: PPUSH
29902: CALL_OW 256
29906: PUSH
29907: LD_INT 1000
29909: LESS
29910: IFFALSE 29924
// SetLives ( i , 1000 ) ;
29912: LD_VAR 0 1
29916: PPUSH
29917: LD_INT 1000
29919: PPUSH
29920: CALL_OW 234
29924: GO 29894
29926: POP
29927: POP
// until p > 20 ;
29928: LD_VAR 0 3
29932: PUSH
29933: LD_INT 20
29935: GREATER
29936: IFFALSE 29863
// end ;
29938: PPOPN 3
29940: END
// every 0 0$1 trigger StreamModeActive and sTime do
29941: LD_EXP 54
29945: IFFALSE 29953
29947: PUSH
29948: LD_EXP 105
29952: AND
29953: IFFALSE 29988
29955: GO 29957
29957: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29958: LD_INT 28
29960: PPUSH
29961: LD_OWVAR 2
29965: PPUSH
29966: LD_INT 2
29968: PPUSH
29969: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29973: LD_INT 30
29975: PPUSH
29976: LD_OWVAR 2
29980: PPUSH
29981: LD_INT 2
29983: PPUSH
29984: CALL_OW 322
// end ;
29988: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29989: LD_EXP 54
29993: IFFALSE 30001
29995: PUSH
29996: LD_EXP 106
30000: AND
30001: IFFALSE 30122
30003: GO 30005
30005: DISABLE
30006: LD_INT 0
30008: PPUSH
30009: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30010: LD_ADDR_VAR 0 2
30014: PUSH
30015: LD_INT 22
30017: PUSH
30018: LD_OWVAR 2
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PUSH
30027: LD_INT 21
30029: PUSH
30030: LD_INT 1
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: PUSH
30037: LD_INT 3
30039: PUSH
30040: LD_INT 23
30042: PUSH
30043: LD_INT 0
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: LIST
30058: PPUSH
30059: CALL_OW 69
30063: ST_TO_ADDR
// if not tmp then
30064: LD_VAR 0 2
30068: NOT
30069: IFFALSE 30073
// exit ;
30071: GO 30122
// for i in tmp do
30073: LD_ADDR_VAR 0 1
30077: PUSH
30078: LD_VAR 0 2
30082: PUSH
30083: FOR_IN
30084: IFFALSE 30120
// begin if Crawls ( i ) then
30086: LD_VAR 0 1
30090: PPUSH
30091: CALL_OW 318
30095: IFFALSE 30106
// ComWalk ( i ) ;
30097: LD_VAR 0 1
30101: PPUSH
30102: CALL_OW 138
// SetClass ( i , 2 ) ;
30106: LD_VAR 0 1
30110: PPUSH
30111: LD_INT 2
30113: PPUSH
30114: CALL_OW 336
// end ;
30118: GO 30083
30120: POP
30121: POP
// end ;
30122: PPOPN 2
30124: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30125: LD_EXP 54
30129: IFFALSE 30137
30131: PUSH
30132: LD_EXP 107
30136: AND
30137: IFFALSE 30427
30139: GO 30141
30141: DISABLE
30142: LD_INT 0
30144: PPUSH
30145: PPUSH
30146: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30147: LD_OWVAR 2
30151: PPUSH
30152: LD_INT 9
30154: PPUSH
30155: LD_INT 1
30157: PPUSH
30158: LD_INT 1
30160: PPUSH
30161: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30165: LD_INT 9
30167: PPUSH
30168: LD_OWVAR 2
30172: PPUSH
30173: CALL_OW 343
// uc_side := 9 ;
30177: LD_ADDR_OWVAR 20
30181: PUSH
30182: LD_INT 9
30184: ST_TO_ADDR
// uc_nation := 2 ;
30185: LD_ADDR_OWVAR 21
30189: PUSH
30190: LD_INT 2
30192: ST_TO_ADDR
// hc_name := Dark Warrior ;
30193: LD_ADDR_OWVAR 26
30197: PUSH
30198: LD_STRING Dark Warrior
30200: ST_TO_ADDR
// hc_gallery :=  ;
30201: LD_ADDR_OWVAR 33
30205: PUSH
30206: LD_STRING 
30208: ST_TO_ADDR
// hc_noskilllimit := true ;
30209: LD_ADDR_OWVAR 76
30213: PUSH
30214: LD_INT 1
30216: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30217: LD_ADDR_OWVAR 31
30221: PUSH
30222: LD_INT 30
30224: PUSH
30225: LD_INT 30
30227: PUSH
30228: LD_INT 30
30230: PUSH
30231: LD_INT 30
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: ST_TO_ADDR
// un := CreateHuman ;
30240: LD_ADDR_VAR 0 3
30244: PUSH
30245: CALL_OW 44
30249: ST_TO_ADDR
// hc_noskilllimit := false ;
30250: LD_ADDR_OWVAR 76
30254: PUSH
30255: LD_INT 0
30257: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30258: LD_VAR 0 3
30262: PPUSH
30263: LD_INT 1
30265: PPUSH
30266: CALL_OW 51
// ToLua ( playRanger() ) ;
30270: LD_STRING playRanger()
30272: PPUSH
30273: CALL_OW 559
// p := 0 ;
30277: LD_ADDR_VAR 0 2
30281: PUSH
30282: LD_INT 0
30284: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30285: LD_INT 35
30287: PPUSH
30288: CALL_OW 67
// p := p + 1 ;
30292: LD_ADDR_VAR 0 2
30296: PUSH
30297: LD_VAR 0 2
30301: PUSH
30302: LD_INT 1
30304: PLUS
30305: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30306: LD_VAR 0 3
30310: PPUSH
30311: CALL_OW 256
30315: PUSH
30316: LD_INT 1000
30318: LESS
30319: IFFALSE 30333
// SetLives ( un , 1000 ) ;
30321: LD_VAR 0 3
30325: PPUSH
30326: LD_INT 1000
30328: PPUSH
30329: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30333: LD_VAR 0 3
30337: PPUSH
30338: LD_INT 81
30340: PUSH
30341: LD_OWVAR 2
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 91
30352: PUSH
30353: LD_VAR 0 3
30357: PUSH
30358: LD_INT 30
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: LIST
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PPUSH
30370: CALL_OW 69
30374: PPUSH
30375: LD_VAR 0 3
30379: PPUSH
30380: CALL_OW 74
30384: PPUSH
30385: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30389: LD_VAR 0 2
30393: PUSH
30394: LD_INT 80
30396: GREATER
30397: IFTRUE 30410
30399: PUSH
30400: LD_VAR 0 3
30404: PPUSH
30405: CALL_OW 301
30409: OR
30410: IFFALSE 30285
// if un then
30412: LD_VAR 0 3
30416: IFFALSE 30427
// RemoveUnit ( un ) ;
30418: LD_VAR 0 3
30422: PPUSH
30423: CALL_OW 64
// end ;
30427: PPOPN 3
30429: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30430: LD_EXP 108
30434: IFFALSE 30550
30436: GO 30438
30438: DISABLE
30439: LD_INT 0
30441: PPUSH
30442: PPUSH
30443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30444: LD_ADDR_VAR 0 2
30448: PUSH
30449: LD_INT 81
30451: PUSH
30452: LD_OWVAR 2
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 21
30463: PUSH
30464: LD_INT 1
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PPUSH
30475: CALL_OW 69
30479: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30480: LD_STRING playComputer()
30482: PPUSH
30483: CALL_OW 559
// if not tmp then
30487: LD_VAR 0 2
30491: NOT
30492: IFFALSE 30496
// exit ;
30494: GO 30550
// for i in tmp do
30496: LD_ADDR_VAR 0 1
30500: PUSH
30501: LD_VAR 0 2
30505: PUSH
30506: FOR_IN
30507: IFFALSE 30548
// for j := 1 to 4 do
30509: LD_ADDR_VAR 0 3
30513: PUSH
30514: DOUBLE
30515: LD_INT 1
30517: DEC
30518: ST_TO_ADDR
30519: LD_INT 4
30521: PUSH
30522: FOR_TO
30523: IFFALSE 30544
// SetSkill ( i , j , 10 ) ;
30525: LD_VAR 0 1
30529: PPUSH
30530: LD_VAR 0 3
30534: PPUSH
30535: LD_INT 10
30537: PPUSH
30538: CALL_OW 237
30542: GO 30522
30544: POP
30545: POP
30546: GO 30506
30548: POP
30549: POP
// end ;
30550: PPOPN 3
30552: END
// every 0 0$1 trigger s30 do var i , tmp ;
30553: LD_EXP 109
30557: IFFALSE 30626
30559: GO 30561
30561: DISABLE
30562: LD_INT 0
30564: PPUSH
30565: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30566: LD_ADDR_VAR 0 2
30570: PUSH
30571: LD_INT 22
30573: PUSH
30574: LD_OWVAR 2
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PPUSH
30583: CALL_OW 69
30587: ST_TO_ADDR
// if not tmp then
30588: LD_VAR 0 2
30592: NOT
30593: IFFALSE 30597
// exit ;
30595: GO 30626
// for i in tmp do
30597: LD_ADDR_VAR 0 1
30601: PUSH
30602: LD_VAR 0 2
30606: PUSH
30607: FOR_IN
30608: IFFALSE 30624
// SetLives ( i , 300 ) ;
30610: LD_VAR 0 1
30614: PPUSH
30615: LD_INT 300
30617: PPUSH
30618: CALL_OW 234
30622: GO 30607
30624: POP
30625: POP
// end ;
30626: PPOPN 2
30628: END
// every 0 0$1 trigger s60 do var i , tmp ;
30629: LD_EXP 110
30633: IFFALSE 30702
30635: GO 30637
30637: DISABLE
30638: LD_INT 0
30640: PPUSH
30641: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30642: LD_ADDR_VAR 0 2
30646: PUSH
30647: LD_INT 22
30649: PUSH
30650: LD_OWVAR 2
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PPUSH
30659: CALL_OW 69
30663: ST_TO_ADDR
// if not tmp then
30664: LD_VAR 0 2
30668: NOT
30669: IFFALSE 30673
// exit ;
30671: GO 30702
// for i in tmp do
30673: LD_ADDR_VAR 0 1
30677: PUSH
30678: LD_VAR 0 2
30682: PUSH
30683: FOR_IN
30684: IFFALSE 30700
// SetLives ( i , 600 ) ;
30686: LD_VAR 0 1
30690: PPUSH
30691: LD_INT 600
30693: PPUSH
30694: CALL_OW 234
30698: GO 30683
30700: POP
30701: POP
// end ;
30702: PPOPN 2
30704: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30705: LD_INT 0
30707: PPUSH
// case cmd of 301 :
30708: LD_VAR 0 1
30712: PUSH
30713: LD_INT 301
30715: DOUBLE
30716: EQUAL
30717: IFTRUE 30721
30719: GO 30753
30721: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30722: LD_VAR 0 6
30726: PPUSH
30727: LD_VAR 0 7
30731: PPUSH
30732: LD_VAR 0 8
30736: PPUSH
30737: LD_VAR 0 4
30741: PPUSH
30742: LD_VAR 0 5
30746: PPUSH
30747: CALL 31966 0 5
30751: GO 30874
30753: LD_INT 302
30755: DOUBLE
30756: EQUAL
30757: IFTRUE 30761
30759: GO 30798
30761: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30762: LD_VAR 0 6
30766: PPUSH
30767: LD_VAR 0 7
30771: PPUSH
30772: LD_VAR 0 8
30776: PPUSH
30777: LD_VAR 0 9
30781: PPUSH
30782: LD_VAR 0 4
30786: PPUSH
30787: LD_VAR 0 5
30791: PPUSH
30792: CALL 32057 0 6
30796: GO 30874
30798: LD_INT 303
30800: DOUBLE
30801: EQUAL
30802: IFTRUE 30806
30804: GO 30843
30806: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30807: LD_VAR 0 6
30811: PPUSH
30812: LD_VAR 0 7
30816: PPUSH
30817: LD_VAR 0 8
30821: PPUSH
30822: LD_VAR 0 9
30826: PPUSH
30827: LD_VAR 0 4
30831: PPUSH
30832: LD_VAR 0 5
30836: PPUSH
30837: CALL 30879 0 6
30841: GO 30874
30843: LD_INT 304
30845: DOUBLE
30846: EQUAL
30847: IFTRUE 30851
30849: GO 30873
30851: POP
// hHackTeleport ( unit , x , y ) ; end ;
30852: LD_VAR 0 2
30856: PPUSH
30857: LD_VAR 0 4
30861: PPUSH
30862: LD_VAR 0 5
30866: PPUSH
30867: CALL 32650 0 3
30871: GO 30874
30873: POP
// end ;
30874: LD_VAR 0 12
30878: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30879: LD_INT 0
30881: PPUSH
30882: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30883: LD_VAR 0 1
30887: PUSH
30888: LD_INT 1
30890: LESS
30891: IFTRUE 30903
30893: PUSH
30894: LD_VAR 0 1
30898: PUSH
30899: LD_INT 3
30901: GREATER
30902: OR
30903: IFTRUE 30921
30905: PUSH
30906: LD_VAR 0 5
30910: PPUSH
30911: LD_VAR 0 6
30915: PPUSH
30916: CALL_OW 428
30920: OR
30921: IFFALSE 30925
// exit ;
30923: GO 31653
// uc_side := your_side ;
30925: LD_ADDR_OWVAR 20
30929: PUSH
30930: LD_OWVAR 2
30934: ST_TO_ADDR
// uc_nation := nation ;
30935: LD_ADDR_OWVAR 21
30939: PUSH
30940: LD_VAR 0 1
30944: ST_TO_ADDR
// bc_level = 1 ;
30945: LD_ADDR_OWVAR 43
30949: PUSH
30950: LD_INT 1
30952: ST_TO_ADDR
// case btype of 1 :
30953: LD_VAR 0 2
30957: PUSH
30958: LD_INT 1
30960: DOUBLE
30961: EQUAL
30962: IFTRUE 30966
30964: GO 30977
30966: POP
// bc_type := b_depot ; 2 :
30967: LD_ADDR_OWVAR 42
30971: PUSH
30972: LD_INT 0
30974: ST_TO_ADDR
30975: GO 31597
30977: LD_INT 2
30979: DOUBLE
30980: EQUAL
30981: IFTRUE 30985
30983: GO 30996
30985: POP
// bc_type := b_warehouse ; 3 :
30986: LD_ADDR_OWVAR 42
30990: PUSH
30991: LD_INT 1
30993: ST_TO_ADDR
30994: GO 31597
30996: LD_INT 3
30998: DOUBLE
30999: EQUAL
31000: IFTRUE 31004
31002: GO 31015
31004: POP
// bc_type := b_lab ; 4 .. 9 :
31005: LD_ADDR_OWVAR 42
31009: PUSH
31010: LD_INT 6
31012: ST_TO_ADDR
31013: GO 31597
31015: LD_INT 4
31017: DOUBLE
31018: GREATEREQUAL
31019: IFFALSE 31027
31021: LD_INT 9
31023: DOUBLE
31024: LESSEQUAL
31025: IFTRUE 31029
31027: GO 31089
31029: POP
// begin bc_type := b_lab_half ;
31030: LD_ADDR_OWVAR 42
31034: PUSH
31035: LD_INT 7
31037: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31038: LD_ADDR_OWVAR 44
31042: PUSH
31043: LD_INT 10
31045: PUSH
31046: LD_INT 11
31048: PUSH
31049: LD_INT 12
31051: PUSH
31052: LD_INT 15
31054: PUSH
31055: LD_INT 14
31057: PUSH
31058: LD_INT 13
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: PUSH
31069: LD_VAR 0 2
31073: PUSH
31074: LD_INT 3
31076: MINUS
31077: ARRAY
31078: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
31079: LD_ADDR_OWVAR 45
31083: PUSH
31084: LD_INT 9
31086: ST_TO_ADDR
// end ; 10 .. 13 :
31087: GO 31597
31089: LD_INT 10
31091: DOUBLE
31092: GREATEREQUAL
31093: IFFALSE 31101
31095: LD_INT 13
31097: DOUBLE
31098: LESSEQUAL
31099: IFTRUE 31103
31101: GO 31180
31103: POP
// begin bc_type := b_lab_full ;
31104: LD_ADDR_OWVAR 42
31108: PUSH
31109: LD_INT 8
31111: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31112: LD_ADDR_OWVAR 44
31116: PUSH
31117: LD_INT 10
31119: PUSH
31120: LD_INT 12
31122: PUSH
31123: LD_INT 14
31125: PUSH
31126: LD_INT 13
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: PUSH
31135: LD_VAR 0 2
31139: PUSH
31140: LD_INT 9
31142: MINUS
31143: ARRAY
31144: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31145: LD_ADDR_OWVAR 45
31149: PUSH
31150: LD_INT 11
31152: PUSH
31153: LD_INT 15
31155: PUSH
31156: LD_INT 12
31158: PUSH
31159: LD_INT 15
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: PUSH
31168: LD_VAR 0 2
31172: PUSH
31173: LD_INT 9
31175: MINUS
31176: ARRAY
31177: ST_TO_ADDR
// end ; 14 :
31178: GO 31597
31180: LD_INT 14
31182: DOUBLE
31183: EQUAL
31184: IFTRUE 31188
31186: GO 31199
31188: POP
// bc_type := b_workshop ; 15 :
31189: LD_ADDR_OWVAR 42
31193: PUSH
31194: LD_INT 2
31196: ST_TO_ADDR
31197: GO 31597
31199: LD_INT 15
31201: DOUBLE
31202: EQUAL
31203: IFTRUE 31207
31205: GO 31218
31207: POP
// bc_type := b_factory ; 16 :
31208: LD_ADDR_OWVAR 42
31212: PUSH
31213: LD_INT 3
31215: ST_TO_ADDR
31216: GO 31597
31218: LD_INT 16
31220: DOUBLE
31221: EQUAL
31222: IFTRUE 31226
31224: GO 31237
31226: POP
// bc_type := b_ext_gun ; 17 :
31227: LD_ADDR_OWVAR 42
31231: PUSH
31232: LD_INT 17
31234: ST_TO_ADDR
31235: GO 31597
31237: LD_INT 17
31239: DOUBLE
31240: EQUAL
31241: IFTRUE 31245
31243: GO 31273
31245: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31246: LD_ADDR_OWVAR 42
31250: PUSH
31251: LD_INT 19
31253: PUSH
31254: LD_INT 23
31256: PUSH
31257: LD_INT 19
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: LIST
31264: PUSH
31265: LD_VAR 0 1
31269: ARRAY
31270: ST_TO_ADDR
31271: GO 31597
31273: LD_INT 18
31275: DOUBLE
31276: EQUAL
31277: IFTRUE 31281
31279: GO 31292
31281: POP
// bc_type := b_ext_radar ; 19 :
31282: LD_ADDR_OWVAR 42
31286: PUSH
31287: LD_INT 20
31289: ST_TO_ADDR
31290: GO 31597
31292: LD_INT 19
31294: DOUBLE
31295: EQUAL
31296: IFTRUE 31300
31298: GO 31311
31300: POP
// bc_type := b_ext_radio ; 20 :
31301: LD_ADDR_OWVAR 42
31305: PUSH
31306: LD_INT 22
31308: ST_TO_ADDR
31309: GO 31597
31311: LD_INT 20
31313: DOUBLE
31314: EQUAL
31315: IFTRUE 31319
31317: GO 31330
31319: POP
// bc_type := b_ext_siberium ; 21 :
31320: LD_ADDR_OWVAR 42
31324: PUSH
31325: LD_INT 21
31327: ST_TO_ADDR
31328: GO 31597
31330: LD_INT 21
31332: DOUBLE
31333: EQUAL
31334: IFTRUE 31338
31336: GO 31349
31338: POP
// bc_type := b_ext_computer ; 22 :
31339: LD_ADDR_OWVAR 42
31343: PUSH
31344: LD_INT 24
31346: ST_TO_ADDR
31347: GO 31597
31349: LD_INT 22
31351: DOUBLE
31352: EQUAL
31353: IFTRUE 31357
31355: GO 31368
31357: POP
// bc_type := b_ext_track ; 23 :
31358: LD_ADDR_OWVAR 42
31362: PUSH
31363: LD_INT 16
31365: ST_TO_ADDR
31366: GO 31597
31368: LD_INT 23
31370: DOUBLE
31371: EQUAL
31372: IFTRUE 31376
31374: GO 31387
31376: POP
// bc_type := b_ext_laser ; 24 :
31377: LD_ADDR_OWVAR 42
31381: PUSH
31382: LD_INT 25
31384: ST_TO_ADDR
31385: GO 31597
31387: LD_INT 24
31389: DOUBLE
31390: EQUAL
31391: IFTRUE 31395
31393: GO 31406
31395: POP
// bc_type := b_control_tower ; 25 :
31396: LD_ADDR_OWVAR 42
31400: PUSH
31401: LD_INT 36
31403: ST_TO_ADDR
31404: GO 31597
31406: LD_INT 25
31408: DOUBLE
31409: EQUAL
31410: IFTRUE 31414
31412: GO 31425
31414: POP
// bc_type := b_breastwork ; 26 :
31415: LD_ADDR_OWVAR 42
31419: PUSH
31420: LD_INT 31
31422: ST_TO_ADDR
31423: GO 31597
31425: LD_INT 26
31427: DOUBLE
31428: EQUAL
31429: IFTRUE 31433
31431: GO 31444
31433: POP
// bc_type := b_bunker ; 27 :
31434: LD_ADDR_OWVAR 42
31438: PUSH
31439: LD_INT 32
31441: ST_TO_ADDR
31442: GO 31597
31444: LD_INT 27
31446: DOUBLE
31447: EQUAL
31448: IFTRUE 31452
31450: GO 31463
31452: POP
// bc_type := b_turret ; 28 :
31453: LD_ADDR_OWVAR 42
31457: PUSH
31458: LD_INT 33
31460: ST_TO_ADDR
31461: GO 31597
31463: LD_INT 28
31465: DOUBLE
31466: EQUAL
31467: IFTRUE 31471
31469: GO 31482
31471: POP
// bc_type := b_armoury ; 29 :
31472: LD_ADDR_OWVAR 42
31476: PUSH
31477: LD_INT 4
31479: ST_TO_ADDR
31480: GO 31597
31482: LD_INT 29
31484: DOUBLE
31485: EQUAL
31486: IFTRUE 31490
31488: GO 31501
31490: POP
// bc_type := b_barracks ; 30 :
31491: LD_ADDR_OWVAR 42
31495: PUSH
31496: LD_INT 5
31498: ST_TO_ADDR
31499: GO 31597
31501: LD_INT 30
31503: DOUBLE
31504: EQUAL
31505: IFTRUE 31509
31507: GO 31520
31509: POP
// bc_type := b_solar_power ; 31 :
31510: LD_ADDR_OWVAR 42
31514: PUSH
31515: LD_INT 27
31517: ST_TO_ADDR
31518: GO 31597
31520: LD_INT 31
31522: DOUBLE
31523: EQUAL
31524: IFTRUE 31528
31526: GO 31539
31528: POP
// bc_type := b_oil_power ; 32 :
31529: LD_ADDR_OWVAR 42
31533: PUSH
31534: LD_INT 26
31536: ST_TO_ADDR
31537: GO 31597
31539: LD_INT 32
31541: DOUBLE
31542: EQUAL
31543: IFTRUE 31547
31545: GO 31558
31547: POP
// bc_type := b_siberite_power ; 33 :
31548: LD_ADDR_OWVAR 42
31552: PUSH
31553: LD_INT 28
31555: ST_TO_ADDR
31556: GO 31597
31558: LD_INT 33
31560: DOUBLE
31561: EQUAL
31562: IFTRUE 31566
31564: GO 31577
31566: POP
// bc_type := b_oil_mine ; 34 :
31567: LD_ADDR_OWVAR 42
31571: PUSH
31572: LD_INT 29
31574: ST_TO_ADDR
31575: GO 31597
31577: LD_INT 34
31579: DOUBLE
31580: EQUAL
31581: IFTRUE 31585
31583: GO 31596
31585: POP
// bc_type := b_siberite_mine ; end ;
31586: LD_ADDR_OWVAR 42
31590: PUSH
31591: LD_INT 30
31593: ST_TO_ADDR
31594: GO 31597
31596: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31597: LD_ADDR_VAR 0 8
31601: PUSH
31602: LD_VAR 0 5
31606: PPUSH
31607: LD_VAR 0 6
31611: PPUSH
31612: LD_VAR 0 3
31616: PPUSH
31617: CALL_OW 47
31621: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31622: LD_OWVAR 42
31626: PUSH
31627: LD_INT 32
31629: PUSH
31630: LD_INT 33
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: IN
31637: IFFALSE 31653
// PlaceWeaponTurret ( b , weapon ) ;
31639: LD_VAR 0 8
31643: PPUSH
31644: LD_VAR 0 4
31648: PPUSH
31649: CALL_OW 431
// end ;
31653: LD_VAR 0 7
31657: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31658: LD_INT 0
31660: PPUSH
31661: PPUSH
31662: PPUSH
31663: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31664: LD_ADDR_VAR 0 4
31668: PUSH
31669: LD_INT 22
31671: PUSH
31672: LD_OWVAR 2
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 2
31683: PUSH
31684: LD_INT 30
31686: PUSH
31687: LD_INT 0
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 30
31696: PUSH
31697: LD_INT 1
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: LIST
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PPUSH
31713: CALL_OW 69
31717: ST_TO_ADDR
// if not tmp then
31718: LD_VAR 0 4
31722: NOT
31723: IFFALSE 31727
// exit ;
31725: GO 31786
// for i in tmp do
31727: LD_ADDR_VAR 0 2
31731: PUSH
31732: LD_VAR 0 4
31736: PUSH
31737: FOR_IN
31738: IFFALSE 31784
// for j = 1 to 3 do
31740: LD_ADDR_VAR 0 3
31744: PUSH
31745: DOUBLE
31746: LD_INT 1
31748: DEC
31749: ST_TO_ADDR
31750: LD_INT 3
31752: PUSH
31753: FOR_TO
31754: IFFALSE 31780
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31756: LD_VAR 0 2
31760: PPUSH
31761: CALL_OW 274
31765: PPUSH
31766: LD_VAR 0 3
31770: PPUSH
31771: LD_INT 99999
31773: PPUSH
31774: CALL_OW 277
31778: GO 31753
31780: POP
31781: POP
31782: GO 31737
31784: POP
31785: POP
// end ;
31786: LD_VAR 0 1
31790: RET
// export function hHackSetLevel10 ; var i , j ; begin
31791: LD_INT 0
31793: PPUSH
31794: PPUSH
31795: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31796: LD_ADDR_VAR 0 2
31800: PUSH
31801: LD_INT 21
31803: PUSH
31804: LD_INT 1
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PPUSH
31811: CALL_OW 69
31815: PUSH
31816: FOR_IN
31817: IFFALSE 31869
// if IsSelected ( i ) then
31819: LD_VAR 0 2
31823: PPUSH
31824: CALL_OW 306
31828: IFFALSE 31867
// begin for j := 1 to 4 do
31830: LD_ADDR_VAR 0 3
31834: PUSH
31835: DOUBLE
31836: LD_INT 1
31838: DEC
31839: ST_TO_ADDR
31840: LD_INT 4
31842: PUSH
31843: FOR_TO
31844: IFFALSE 31865
// SetSkill ( i , j , 10 ) ;
31846: LD_VAR 0 2
31850: PPUSH
31851: LD_VAR 0 3
31855: PPUSH
31856: LD_INT 10
31858: PPUSH
31859: CALL_OW 237
31863: GO 31843
31865: POP
31866: POP
// end ;
31867: GO 31816
31869: POP
31870: POP
// end ;
31871: LD_VAR 0 1
31875: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31876: LD_INT 0
31878: PPUSH
31879: PPUSH
31880: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31881: LD_ADDR_VAR 0 2
31885: PUSH
31886: LD_INT 22
31888: PUSH
31889: LD_OWVAR 2
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 21
31900: PUSH
31901: LD_INT 1
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PPUSH
31912: CALL_OW 69
31916: PUSH
31917: FOR_IN
31918: IFFALSE 31959
// begin for j := 1 to 4 do
31920: LD_ADDR_VAR 0 3
31924: PUSH
31925: DOUBLE
31926: LD_INT 1
31928: DEC
31929: ST_TO_ADDR
31930: LD_INT 4
31932: PUSH
31933: FOR_TO
31934: IFFALSE 31955
// SetSkill ( i , j , 10 ) ;
31936: LD_VAR 0 2
31940: PPUSH
31941: LD_VAR 0 3
31945: PPUSH
31946: LD_INT 10
31948: PPUSH
31949: CALL_OW 237
31953: GO 31933
31955: POP
31956: POP
// end ;
31957: GO 31917
31959: POP
31960: POP
// end ;
31961: LD_VAR 0 1
31965: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31966: LD_INT 0
31968: PPUSH
// uc_side := your_side ;
31969: LD_ADDR_OWVAR 20
31973: PUSH
31974: LD_OWVAR 2
31978: ST_TO_ADDR
// uc_nation := nation ;
31979: LD_ADDR_OWVAR 21
31983: PUSH
31984: LD_VAR 0 1
31988: ST_TO_ADDR
// InitHc ;
31989: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31993: LD_INT 0
31995: PPUSH
31996: LD_VAR 0 2
32000: PPUSH
32001: LD_VAR 0 3
32005: PPUSH
32006: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32010: LD_VAR 0 4
32014: PPUSH
32015: LD_VAR 0 5
32019: PPUSH
32020: CALL_OW 428
32024: PUSH
32025: LD_INT 0
32027: EQUAL
32028: IFFALSE 32052
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32030: CALL_OW 44
32034: PPUSH
32035: LD_VAR 0 4
32039: PPUSH
32040: LD_VAR 0 5
32044: PPUSH
32045: LD_INT 1
32047: PPUSH
32048: CALL_OW 48
// end ;
32052: LD_VAR 0 6
32056: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32057: LD_INT 0
32059: PPUSH
32060: PPUSH
// uc_side := your_side ;
32061: LD_ADDR_OWVAR 20
32065: PUSH
32066: LD_OWVAR 2
32070: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32071: LD_VAR 0 1
32075: PUSH
32076: LD_INT 1
32078: PUSH
32079: LD_INT 2
32081: PUSH
32082: LD_INT 3
32084: PUSH
32085: LD_INT 4
32087: PUSH
32088: LD_INT 5
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: IN
32098: IFFALSE 32110
// uc_nation := nation_american else
32100: LD_ADDR_OWVAR 21
32104: PUSH
32105: LD_INT 1
32107: ST_TO_ADDR
32108: GO 32153
// if chassis in [ 11 , 12 , 13 , 14 ] then
32110: LD_VAR 0 1
32114: PUSH
32115: LD_INT 11
32117: PUSH
32118: LD_INT 12
32120: PUSH
32121: LD_INT 13
32123: PUSH
32124: LD_INT 14
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: IN
32133: IFFALSE 32145
// uc_nation := nation_arabian else
32135: LD_ADDR_OWVAR 21
32139: PUSH
32140: LD_INT 2
32142: ST_TO_ADDR
32143: GO 32153
// uc_nation := nation_russian ;
32145: LD_ADDR_OWVAR 21
32149: PUSH
32150: LD_INT 3
32152: ST_TO_ADDR
// vc_chassis := chassis ;
32153: LD_ADDR_OWVAR 37
32157: PUSH
32158: LD_VAR 0 1
32162: ST_TO_ADDR
// vc_engine := engine ;
32163: LD_ADDR_OWVAR 39
32167: PUSH
32168: LD_VAR 0 2
32172: ST_TO_ADDR
// vc_control := control ;
32173: LD_ADDR_OWVAR 38
32177: PUSH
32178: LD_VAR 0 3
32182: ST_TO_ADDR
// vc_weapon := weapon ;
32183: LD_ADDR_OWVAR 40
32187: PUSH
32188: LD_VAR 0 4
32192: ST_TO_ADDR
// un := CreateVehicle ;
32193: LD_ADDR_VAR 0 8
32197: PUSH
32198: CALL_OW 45
32202: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32203: LD_VAR 0 8
32207: PPUSH
32208: LD_INT 0
32210: PPUSH
32211: LD_INT 5
32213: PPUSH
32214: CALL_OW 12
32218: PPUSH
32219: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32223: LD_VAR 0 8
32227: PPUSH
32228: LD_VAR 0 5
32232: PPUSH
32233: LD_VAR 0 6
32237: PPUSH
32238: LD_INT 1
32240: PPUSH
32241: CALL_OW 48
// end ;
32245: LD_VAR 0 7
32249: RET
// export hInvincible ; every 1 do
32250: GO 32252
32252: DISABLE
// hInvincible := [ ] ;
32253: LD_ADDR_EXP 111
32257: PUSH
32258: EMPTY
32259: ST_TO_ADDR
32260: END
// every 10 do var i ;
32261: GO 32263
32263: DISABLE
32264: LD_INT 0
32266: PPUSH
// begin enable ;
32267: ENABLE
// if not hInvincible then
32268: LD_EXP 111
32272: NOT
32273: IFFALSE 32277
// exit ;
32275: GO 32321
// for i in hInvincible do
32277: LD_ADDR_VAR 0 1
32281: PUSH
32282: LD_EXP 111
32286: PUSH
32287: FOR_IN
32288: IFFALSE 32319
// if GetLives ( i ) < 1000 then
32290: LD_VAR 0 1
32294: PPUSH
32295: CALL_OW 256
32299: PUSH
32300: LD_INT 1000
32302: LESS
32303: IFFALSE 32317
// SetLives ( i , 1000 ) ;
32305: LD_VAR 0 1
32309: PPUSH
32310: LD_INT 1000
32312: PPUSH
32313: CALL_OW 234
32317: GO 32287
32319: POP
32320: POP
// end ;
32321: PPOPN 1
32323: END
// export function hHackInvincible ; var i ; begin
32324: LD_INT 0
32326: PPUSH
32327: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32328: LD_ADDR_VAR 0 2
32332: PUSH
32333: LD_INT 2
32335: PUSH
32336: LD_INT 21
32338: PUSH
32339: LD_INT 1
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 21
32348: PUSH
32349: LD_INT 2
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: LIST
32360: PPUSH
32361: CALL_OW 69
32365: PUSH
32366: FOR_IN
32367: IFFALSE 32428
// if IsSelected ( i ) then
32369: LD_VAR 0 2
32373: PPUSH
32374: CALL_OW 306
32378: IFFALSE 32426
// begin if i in hInvincible then
32380: LD_VAR 0 2
32384: PUSH
32385: LD_EXP 111
32389: IN
32390: IFFALSE 32410
// hInvincible := hInvincible diff i else
32392: LD_ADDR_EXP 111
32396: PUSH
32397: LD_EXP 111
32401: PUSH
32402: LD_VAR 0 2
32406: DIFF
32407: ST_TO_ADDR
32408: GO 32426
// hInvincible := hInvincible union i ;
32410: LD_ADDR_EXP 111
32414: PUSH
32415: LD_EXP 111
32419: PUSH
32420: LD_VAR 0 2
32424: UNION
32425: ST_TO_ADDR
// end ;
32426: GO 32366
32428: POP
32429: POP
// end ;
32430: LD_VAR 0 1
32434: RET
// export function hHackInvisible ; var i , j ; begin
32435: LD_INT 0
32437: PPUSH
32438: PPUSH
32439: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32440: LD_ADDR_VAR 0 2
32444: PUSH
32445: LD_INT 21
32447: PUSH
32448: LD_INT 1
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PPUSH
32455: CALL_OW 69
32459: PUSH
32460: FOR_IN
32461: IFFALSE 32485
// if IsSelected ( i ) then
32463: LD_VAR 0 2
32467: PPUSH
32468: CALL_OW 306
32472: IFFALSE 32483
// ComForceInvisible ( i ) ;
32474: LD_VAR 0 2
32478: PPUSH
32479: CALL_OW 496
32483: GO 32460
32485: POP
32486: POP
// end ;
32487: LD_VAR 0 1
32491: RET
// export function hHackChangeYourSide ; begin
32492: LD_INT 0
32494: PPUSH
// if your_side = 8 then
32495: LD_OWVAR 2
32499: PUSH
32500: LD_INT 8
32502: EQUAL
32503: IFFALSE 32515
// your_side := 0 else
32505: LD_ADDR_OWVAR 2
32509: PUSH
32510: LD_INT 0
32512: ST_TO_ADDR
32513: GO 32529
// your_side := your_side + 1 ;
32515: LD_ADDR_OWVAR 2
32519: PUSH
32520: LD_OWVAR 2
32524: PUSH
32525: LD_INT 1
32527: PLUS
32528: ST_TO_ADDR
// end ;
32529: LD_VAR 0 1
32533: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32534: LD_INT 0
32536: PPUSH
32537: PPUSH
32538: PPUSH
// for i in all_units do
32539: LD_ADDR_VAR 0 2
32543: PUSH
32544: LD_OWVAR 3
32548: PUSH
32549: FOR_IN
32550: IFFALSE 32628
// if IsSelected ( i ) then
32552: LD_VAR 0 2
32556: PPUSH
32557: CALL_OW 306
32561: IFFALSE 32626
// begin j := GetSide ( i ) ;
32563: LD_ADDR_VAR 0 3
32567: PUSH
32568: LD_VAR 0 2
32572: PPUSH
32573: CALL_OW 255
32577: ST_TO_ADDR
// if j = 8 then
32578: LD_VAR 0 3
32582: PUSH
32583: LD_INT 8
32585: EQUAL
32586: IFFALSE 32598
// j := 0 else
32588: LD_ADDR_VAR 0 3
32592: PUSH
32593: LD_INT 0
32595: ST_TO_ADDR
32596: GO 32612
// j := j + 1 ;
32598: LD_ADDR_VAR 0 3
32602: PUSH
32603: LD_VAR 0 3
32607: PUSH
32608: LD_INT 1
32610: PLUS
32611: ST_TO_ADDR
// SetSide ( i , j ) ;
32612: LD_VAR 0 2
32616: PPUSH
32617: LD_VAR 0 3
32621: PPUSH
32622: CALL_OW 235
// end ;
32626: GO 32549
32628: POP
32629: POP
// end ;
32630: LD_VAR 0 1
32634: RET
// export function hHackFog ; begin
32635: LD_INT 0
32637: PPUSH
// FogOff ( true ) ;
32638: LD_INT 1
32640: PPUSH
32641: CALL_OW 344
// end ;
32645: LD_VAR 0 1
32649: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32650: LD_INT 0
32652: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32653: LD_VAR 0 1
32657: PPUSH
32658: LD_VAR 0 2
32662: PPUSH
32663: LD_VAR 0 3
32667: PPUSH
32668: LD_INT 1
32670: PPUSH
32671: LD_INT 1
32673: PPUSH
32674: CALL_OW 483
// CenterOnXY ( x , y ) ;
32678: LD_VAR 0 2
32682: PPUSH
32683: LD_VAR 0 3
32687: PPUSH
32688: CALL_OW 84
// end ;
32692: LD_VAR 0 4
32696: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
32697: LD_INT 0
32699: PPUSH
32700: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
32701: LD_VAR 0 1
32705: NOT
32706: IFTRUE 32725
32708: PUSH
32709: LD_VAR 0 2
32713: PPUSH
32714: LD_VAR 0 3
32718: PPUSH
32719: CALL_OW 488
32723: NOT
32724: OR
32725: IFTRUE 32760
32727: PUSH
32728: LD_VAR 0 1
32732: PPUSH
32733: CALL_OW 266
32737: PUSH
32738: LD_INT 3
32740: NONEQUAL
32741: IFFALSE 32759
32743: PUSH
32744: LD_VAR 0 1
32748: PPUSH
32749: CALL_OW 247
32753: PUSH
32754: LD_INT 1
32756: EQUAL
32757: NOT
32758: AND
32759: OR
32760: IFFALSE 32764
// exit ;
32762: GO 33046
// if GetType ( factory ) = unit_human then
32764: LD_VAR 0 1
32768: PPUSH
32769: CALL_OW 247
32773: PUSH
32774: LD_INT 1
32776: EQUAL
32777: IFFALSE 32794
// factory := IsInUnit ( factory ) ;
32779: LD_ADDR_VAR 0 1
32783: PUSH
32784: LD_VAR 0 1
32788: PPUSH
32789: CALL_OW 310
32793: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
32794: LD_VAR 0 1
32798: PPUSH
32799: CALL_OW 266
32803: PUSH
32804: LD_INT 3
32806: NONEQUAL
32807: IFFALSE 32811
// exit ;
32809: GO 33046
// for i := 1 to Count ( factoryWaypoints ) do
32811: LD_ADDR_VAR 0 5
32815: PUSH
32816: DOUBLE
32817: LD_INT 1
32819: DEC
32820: ST_TO_ADDR
32821: LD_EXP 112
32825: PPUSH
32826: CALL 43013 0 1
32830: PUSH
32831: FOR_TO
32832: IFFALSE 32994
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
32834: LD_VAR 0 2
32838: PPUSH
32839: LD_VAR 0 3
32843: PPUSH
32844: CALL_OW 428
32848: PUSH
32849: LD_EXP 112
32853: PUSH
32854: LD_VAR 0 5
32858: ARRAY
32859: PUSH
32860: LD_INT 2
32862: ARRAY
32863: EQUAL
32864: IFFALSE 32896
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
32866: LD_ADDR_EXP 112
32870: PUSH
32871: LD_EXP 112
32875: PPUSH
32876: LD_VAR 0 5
32880: PPUSH
32881: CALL_OW 3
32885: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32886: CALL 33051 0 0
// exit ;
32890: POP
32891: POP
32892: GO 33046
// end else
32894: GO 32992
// if factory = factoryWaypoints [ i ] [ 2 ] then
32896: LD_VAR 0 1
32900: PUSH
32901: LD_EXP 112
32905: PUSH
32906: LD_VAR 0 5
32910: ARRAY
32911: PUSH
32912: LD_INT 2
32914: ARRAY
32915: EQUAL
32916: IFFALSE 32992
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
32918: LD_ADDR_EXP 112
32922: PUSH
32923: LD_EXP 112
32927: PPUSH
32928: LD_VAR 0 5
32932: PPUSH
32933: CALL_OW 3
32937: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
32938: LD_ADDR_EXP 112
32942: PUSH
32943: LD_EXP 112
32947: PPUSH
32948: LD_VAR 0 1
32952: PPUSH
32953: CALL_OW 255
32957: PUSH
32958: LD_VAR 0 1
32962: PUSH
32963: LD_VAR 0 2
32967: PUSH
32968: LD_VAR 0 3
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: PPUSH
32979: CALL 78989 0 2
32983: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32984: CALL 33051 0 0
// exit ;
32988: POP
32989: POP
32990: GO 33046
// end ; end ;
32992: GO 32831
32994: POP
32995: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
32996: LD_ADDR_EXP 112
33000: PUSH
33001: LD_EXP 112
33005: PPUSH
33006: LD_VAR 0 1
33010: PPUSH
33011: CALL_OW 255
33015: PUSH
33016: LD_VAR 0 1
33020: PUSH
33021: LD_VAR 0 2
33025: PUSH
33026: LD_VAR 0 3
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: PPUSH
33037: CALL 78989 0 2
33041: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33042: CALL 33051 0 0
// end ;
33046: LD_VAR 0 4
33050: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33051: LD_INT 0
33053: PPUSH
33054: PPUSH
33055: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33056: LD_STRING resetFactoryWaypoint();
33058: PPUSH
33059: CALL_OW 559
// if factoryWaypoints then
33063: LD_EXP 112
33067: IFFALSE 33188
// begin list := factoryWaypoints ;
33069: LD_ADDR_VAR 0 3
33073: PUSH
33074: LD_EXP 112
33078: ST_TO_ADDR
// for i := 1 to list do
33079: LD_ADDR_VAR 0 2
33083: PUSH
33084: DOUBLE
33085: LD_INT 1
33087: DEC
33088: ST_TO_ADDR
33089: LD_VAR 0 3
33093: PUSH
33094: FOR_TO
33095: IFFALSE 33186
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33097: LD_STRING setFactoryWaypointXY(
33099: PUSH
33100: LD_VAR 0 3
33104: PUSH
33105: LD_VAR 0 2
33109: ARRAY
33110: PUSH
33111: LD_INT 1
33113: ARRAY
33114: STR
33115: PUSH
33116: LD_STRING ,
33118: STR
33119: PUSH
33120: LD_VAR 0 3
33124: PUSH
33125: LD_VAR 0 2
33129: ARRAY
33130: PUSH
33131: LD_INT 2
33133: ARRAY
33134: STR
33135: PUSH
33136: LD_STRING ,
33138: STR
33139: PUSH
33140: LD_VAR 0 3
33144: PUSH
33145: LD_VAR 0 2
33149: ARRAY
33150: PUSH
33151: LD_INT 3
33153: ARRAY
33154: STR
33155: PUSH
33156: LD_STRING ,
33158: STR
33159: PUSH
33160: LD_VAR 0 3
33164: PUSH
33165: LD_VAR 0 2
33169: ARRAY
33170: PUSH
33171: LD_INT 4
33173: ARRAY
33174: STR
33175: PUSH
33176: LD_STRING )
33178: STR
33179: PPUSH
33180: CALL_OW 559
33184: GO 33094
33186: POP
33187: POP
// end ; end ;
33188: LD_VAR 0 1
33192: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33193: LD_INT 0
33195: PPUSH
// if HexInfo ( x , y ) = warehouse then
33196: LD_VAR 0 2
33200: PPUSH
33201: LD_VAR 0 3
33205: PPUSH
33206: CALL_OW 428
33210: PUSH
33211: LD_VAR 0 1
33215: EQUAL
33216: IFFALSE 33243
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33218: LD_ADDR_EXP 114
33222: PUSH
33223: LD_EXP 114
33227: PPUSH
33228: LD_VAR 0 1
33232: PPUSH
33233: LD_INT 0
33235: PPUSH
33236: CALL_OW 1
33240: ST_TO_ADDR
33241: GO 33294
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33243: LD_ADDR_EXP 114
33247: PUSH
33248: LD_EXP 114
33252: PPUSH
33253: LD_VAR 0 1
33257: PPUSH
33258: LD_VAR 0 1
33262: PPUSH
33263: CALL_OW 255
33267: PUSH
33268: LD_VAR 0 1
33272: PUSH
33273: LD_VAR 0 2
33277: PUSH
33278: LD_VAR 0 3
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: PPUSH
33289: CALL_OW 1
33293: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33294: CALL 33303 0 0
// end ;
33298: LD_VAR 0 4
33302: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33303: LD_INT 0
33305: PPUSH
33306: PPUSH
33307: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33308: LD_STRING resetWarehouseGatheringPoints();
33310: PPUSH
33311: CALL_OW 559
// if warehouseGatheringPoints then
33315: LD_EXP 114
33319: IFFALSE 33445
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33321: LD_ADDR_VAR 0 3
33325: PUSH
33326: LD_EXP 114
33330: PPUSH
33331: CALL 82923 0 1
33335: ST_TO_ADDR
// for i := 1 to list do
33336: LD_ADDR_VAR 0 2
33340: PUSH
33341: DOUBLE
33342: LD_INT 1
33344: DEC
33345: ST_TO_ADDR
33346: LD_VAR 0 3
33350: PUSH
33351: FOR_TO
33352: IFFALSE 33443
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33354: LD_STRING setWarehouseGatheringPointXY(
33356: PUSH
33357: LD_VAR 0 3
33361: PUSH
33362: LD_VAR 0 2
33366: ARRAY
33367: PUSH
33368: LD_INT 1
33370: ARRAY
33371: STR
33372: PUSH
33373: LD_STRING ,
33375: STR
33376: PUSH
33377: LD_VAR 0 3
33381: PUSH
33382: LD_VAR 0 2
33386: ARRAY
33387: PUSH
33388: LD_INT 2
33390: ARRAY
33391: STR
33392: PUSH
33393: LD_STRING ,
33395: STR
33396: PUSH
33397: LD_VAR 0 3
33401: PUSH
33402: LD_VAR 0 2
33406: ARRAY
33407: PUSH
33408: LD_INT 3
33410: ARRAY
33411: STR
33412: PUSH
33413: LD_STRING ,
33415: STR
33416: PUSH
33417: LD_VAR 0 3
33421: PUSH
33422: LD_VAR 0 2
33426: ARRAY
33427: PUSH
33428: LD_INT 4
33430: ARRAY
33431: STR
33432: PUSH
33433: LD_STRING )
33435: STR
33436: PPUSH
33437: CALL_OW 559
33441: GO 33351
33443: POP
33444: POP
// end ; end ;
33445: LD_VAR 0 1
33449: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
33450: LD_EXP 114
33454: IFFALSE 34149
33456: GO 33458
33458: DISABLE
33459: LD_INT 0
33461: PPUSH
33462: PPUSH
33463: PPUSH
33464: PPUSH
33465: PPUSH
33466: PPUSH
33467: PPUSH
33468: PPUSH
33469: PPUSH
// begin enable ;
33470: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
33471: LD_ADDR_VAR 0 3
33475: PUSH
33476: LD_EXP 114
33480: PPUSH
33481: CALL 82923 0 1
33485: ST_TO_ADDR
// if not list then
33486: LD_VAR 0 3
33490: NOT
33491: IFFALSE 33495
// exit ;
33493: GO 34149
// for i := 1 to list do
33495: LD_ADDR_VAR 0 1
33499: PUSH
33500: DOUBLE
33501: LD_INT 1
33503: DEC
33504: ST_TO_ADDR
33505: LD_VAR 0 3
33509: PUSH
33510: FOR_TO
33511: IFFALSE 34147
// begin depot := list [ i ] [ 2 ] ;
33513: LD_ADDR_VAR 0 8
33517: PUSH
33518: LD_VAR 0 3
33522: PUSH
33523: LD_VAR 0 1
33527: ARRAY
33528: PUSH
33529: LD_INT 2
33531: ARRAY
33532: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33533: LD_ADDR_VAR 0 5
33537: PUSH
33538: LD_VAR 0 3
33542: PUSH
33543: LD_VAR 0 1
33547: ARRAY
33548: PUSH
33549: LD_INT 1
33551: ARRAY
33552: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33553: LD_VAR 0 8
33557: PPUSH
33558: CALL_OW 301
33562: IFTRUE 33581
33564: PUSH
33565: LD_VAR 0 5
33569: PUSH
33570: LD_VAR 0 8
33574: PPUSH
33575: CALL_OW 255
33579: NONEQUAL
33580: OR
33581: IFFALSE 33610
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
33583: LD_ADDR_EXP 114
33587: PUSH
33588: LD_EXP 114
33592: PPUSH
33593: LD_VAR 0 8
33597: PPUSH
33598: LD_INT 0
33600: PPUSH
33601: CALL_OW 1
33605: ST_TO_ADDR
// exit ;
33606: POP
33607: POP
33608: GO 34149
// end ; x := list [ i ] [ 3 ] ;
33610: LD_ADDR_VAR 0 6
33614: PUSH
33615: LD_VAR 0 3
33619: PUSH
33620: LD_VAR 0 1
33624: ARRAY
33625: PUSH
33626: LD_INT 3
33628: ARRAY
33629: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
33630: LD_ADDR_VAR 0 7
33634: PUSH
33635: LD_VAR 0 3
33639: PUSH
33640: LD_VAR 0 1
33644: ARRAY
33645: PUSH
33646: LD_INT 4
33648: ARRAY
33649: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
33650: LD_ADDR_VAR 0 9
33654: PUSH
33655: LD_VAR 0 6
33659: PPUSH
33660: LD_VAR 0 7
33664: PPUSH
33665: LD_INT 16
33667: PPUSH
33668: CALL 81497 0 3
33672: ST_TO_ADDR
// if not cratesNearbyPoint then
33673: LD_VAR 0 9
33677: NOT
33678: IFFALSE 33684
// exit ;
33680: POP
33681: POP
33682: GO 34149
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
33684: LD_ADDR_VAR 0 4
33688: PUSH
33689: LD_INT 22
33691: PUSH
33692: LD_VAR 0 5
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 3
33703: PUSH
33704: LD_INT 60
33706: PUSH
33707: EMPTY
33708: LIST
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 91
33716: PUSH
33717: LD_VAR 0 8
33721: PUSH
33722: LD_INT 6
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 2
33732: PUSH
33733: LD_INT 25
33735: PUSH
33736: LD_INT 2
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 25
33745: PUSH
33746: LD_INT 16
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: LIST
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: PPUSH
33764: CALL_OW 69
33768: PUSH
33769: LD_VAR 0 8
33773: PPUSH
33774: CALL_OW 313
33778: PPUSH
33779: LD_INT 3
33781: PUSH
33782: LD_INT 60
33784: PUSH
33785: EMPTY
33786: LIST
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 2
33794: PUSH
33795: LD_INT 25
33797: PUSH
33798: LD_INT 2
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 25
33807: PUSH
33808: LD_INT 16
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: LIST
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PPUSH
33824: CALL_OW 72
33828: UNION
33829: ST_TO_ADDR
// if tmp then
33830: LD_VAR 0 4
33834: IFFALSE 33914
// begin tmp := ShrinkArray ( tmp , 3 ) ;
33836: LD_ADDR_VAR 0 4
33840: PUSH
33841: LD_VAR 0 4
33845: PPUSH
33846: LD_INT 3
33848: PPUSH
33849: CALL 79304 0 2
33853: ST_TO_ADDR
// for j in tmp do
33854: LD_ADDR_VAR 0 2
33858: PUSH
33859: LD_VAR 0 4
33863: PUSH
33864: FOR_IN
33865: IFFALSE 33908
// begin if IsInUnit ( j ) then
33867: LD_VAR 0 2
33871: PPUSH
33872: CALL_OW 310
33876: IFFALSE 33887
// ComExit ( j ) ;
33878: LD_VAR 0 2
33882: PPUSH
33883: CALL 79387 0 1
// AddComCollect ( j , x , y ) ;
33887: LD_VAR 0 2
33891: PPUSH
33892: LD_VAR 0 6
33896: PPUSH
33897: LD_VAR 0 7
33901: PPUSH
33902: CALL_OW 177
// end ;
33906: GO 33864
33908: POP
33909: POP
// exit ;
33910: POP
33911: POP
33912: GO 34149
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
33914: LD_ADDR_VAR 0 4
33918: PUSH
33919: LD_INT 22
33921: PUSH
33922: LD_VAR 0 5
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 91
33933: PUSH
33934: LD_VAR 0 8
33938: PUSH
33939: LD_INT 8
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 2
33949: PUSH
33950: LD_INT 34
33952: PUSH
33953: LD_INT 12
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 34
33962: PUSH
33963: LD_INT 51
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 34
33972: PUSH
33973: LD_INT 32
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 34
33982: PUSH
33983: LD_INT 89
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: LIST
34001: PPUSH
34002: CALL_OW 69
34006: ST_TO_ADDR
// if tmp then
34007: LD_VAR 0 4
34011: IFFALSE 34145
// begin for j in tmp do
34013: LD_ADDR_VAR 0 2
34017: PUSH
34018: LD_VAR 0 4
34022: PUSH
34023: FOR_IN
34024: IFFALSE 34143
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34026: LD_VAR 0 2
34030: PPUSH
34031: CALL_OW 262
34035: PUSH
34036: LD_INT 3
34038: EQUAL
34039: IFTRUE 34056
34041: PUSH
34042: LD_VAR 0 2
34046: PPUSH
34047: CALL_OW 261
34051: PUSH
34052: LD_INT 20
34054: GREATER
34055: OR
34056: IFFALSE 34070
34058: PUSH
34059: LD_VAR 0 2
34063: PPUSH
34064: CALL_OW 314
34068: NOT
34069: AND
34070: IFFALSE 34100
34072: PUSH
34073: LD_VAR 0 2
34077: PPUSH
34078: CALL_OW 263
34082: PUSH
34083: LD_INT 1
34085: NONEQUAL
34086: IFTRUE 34099
34088: PUSH
34089: LD_VAR 0 2
34093: PPUSH
34094: CALL_OW 311
34098: OR
34099: AND
34100: IFFALSE 34141
// begin ComCollect ( j , x , y ) ;
34102: LD_VAR 0 2
34106: PPUSH
34107: LD_VAR 0 6
34111: PPUSH
34112: LD_VAR 0 7
34116: PPUSH
34117: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34121: LD_VAR 0 2
34125: PPUSH
34126: LD_VAR 0 8
34130: PPUSH
34131: CALL_OW 172
// exit ;
34135: POP
34136: POP
34137: POP
34138: POP
34139: GO 34149
// end ;
34141: GO 34023
34143: POP
34144: POP
// end ; end ;
34145: GO 33510
34147: POP
34148: POP
// end ; end_of_file
34149: PPOPN 9
34151: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
34152: LD_VAR 0 1
34156: PUSH
34157: LD_INT 200
34159: DOUBLE
34160: GREATEREQUAL
34161: IFFALSE 34169
34163: LD_INT 299
34165: DOUBLE
34166: LESSEQUAL
34167: IFTRUE 34171
34169: GO 34203
34171: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
34172: LD_VAR 0 1
34176: PPUSH
34177: LD_VAR 0 2
34181: PPUSH
34182: LD_VAR 0 3
34186: PPUSH
34187: LD_VAR 0 4
34191: PPUSH
34192: LD_VAR 0 5
34196: PPUSH
34197: CALL 35065 0 5
34201: GO 34280
34203: LD_INT 300
34205: DOUBLE
34206: GREATEREQUAL
34207: IFFALSE 34215
34209: LD_INT 399
34211: DOUBLE
34212: LESSEQUAL
34213: IFTRUE 34217
34215: GO 34279
34217: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
34218: LD_VAR 0 1
34222: PPUSH
34223: LD_VAR 0 2
34227: PPUSH
34228: LD_VAR 0 3
34232: PPUSH
34233: LD_VAR 0 4
34237: PPUSH
34238: LD_VAR 0 5
34242: PPUSH
34243: LD_VAR 0 6
34247: PPUSH
34248: LD_VAR 0 7
34252: PPUSH
34253: LD_VAR 0 8
34257: PPUSH
34258: LD_VAR 0 9
34262: PPUSH
34263: LD_VAR 0 10
34267: PPUSH
34268: LD_VAR 0 11
34272: PPUSH
34273: CALL 30705 0 11
34277: GO 34280
34279: POP
// end ;
34280: PPOPN 11
34282: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
34283: LD_VAR 0 1
34287: PPUSH
34288: LD_VAR 0 2
34292: PPUSH
34293: LD_VAR 0 3
34297: PPUSH
34298: LD_VAR 0 4
34302: PPUSH
34303: LD_VAR 0 5
34307: PPUSH
34308: CALL 34365 0 5
// end ; end_of_file
34312: PPOPN 5
34314: END
// export function SOS_UnitDestroyed ( un ) ; begin
34315: LD_INT 0
34317: PPUSH
// ComRadiation ( un ) ;
34318: LD_VAR 0 1
34322: PPUSH
34323: CALL 35485 0 1
// end ;
34327: LD_VAR 0 2
34331: RET
// export function SOS_UnitKamikazed ( un ) ; begin
34332: LD_INT 0
34334: PPUSH
// ComRadiation ( un ) ;
34335: LD_VAR 0 1
34339: PPUSH
34340: CALL 35485 0 1
// end ;
34344: LD_VAR 0 2
34348: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34349: LD_INT 0
34351: PPUSH
// end ;
34352: LD_VAR 0 4
34356: RET
// export function SOS_Command ( cmd ) ; begin
34357: LD_INT 0
34359: PPUSH
// end ;
34360: LD_VAR 0 2
34364: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34365: LD_INT 0
34367: PPUSH
// end ;
34368: LD_VAR 0 6
34372: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
34373: LD_INT 0
34375: PPUSH
34376: PPUSH
34377: PPUSH
34378: PPUSH
34379: PPUSH
// if not vehicle or not factory then
34380: LD_VAR 0 1
34384: NOT
34385: IFTRUE 34394
34387: PUSH
34388: LD_VAR 0 2
34392: NOT
34393: OR
34394: IFFALSE 34398
// exit ;
34396: GO 35060
// weapon := GetWeapon ( vehicle ) ;
34398: LD_ADDR_VAR 0 7
34402: PUSH
34403: LD_VAR 0 1
34407: PPUSH
34408: CALL_OW 264
34412: ST_TO_ADDR
// if weapon = ar_miner then
34413: LD_VAR 0 7
34417: PUSH
34418: LD_INT 81
34420: EQUAL
34421: IFFALSE 34478
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
34423: LD_ADDR_EXP 123
34427: PUSH
34428: LD_EXP 123
34432: PPUSH
34433: LD_EXP 123
34437: PUSH
34438: LD_INT 1
34440: PLUS
34441: PPUSH
34442: LD_VAR 0 1
34446: PPUSH
34447: CALL_OW 1
34451: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34452: LD_ADDR_EXP 124
34456: PUSH
34457: LD_EXP 124
34461: PPUSH
34462: LD_EXP 124
34466: PUSH
34467: LD_INT 1
34469: PLUS
34470: PPUSH
34471: EMPTY
34472: PPUSH
34473: CALL_OW 1
34477: ST_TO_ADDR
// end ; if not factoryWaypoints then
34478: LD_EXP 112
34482: NOT
34483: IFFALSE 34487
// exit ;
34485: GO 35060
// for i := 1 to Count ( factoryWaypoints ) do
34487: LD_ADDR_VAR 0 4
34491: PUSH
34492: DOUBLE
34493: LD_INT 1
34495: DEC
34496: ST_TO_ADDR
34497: LD_EXP 112
34501: PPUSH
34502: CALL 43013 0 1
34506: PUSH
34507: FOR_TO
34508: IFFALSE 35058
// if factoryWaypoints [ i ] [ 2 ] = factory then
34510: LD_EXP 112
34514: PUSH
34515: LD_VAR 0 4
34519: ARRAY
34520: PUSH
34521: LD_INT 2
34523: ARRAY
34524: PUSH
34525: LD_VAR 0 2
34529: EQUAL
34530: IFFALSE 35056
// begin if GetControl ( vehicle ) = control_manual then
34532: LD_VAR 0 1
34536: PPUSH
34537: CALL_OW 263
34541: PUSH
34542: LD_INT 1
34544: EQUAL
34545: IFFALSE 34909
// begin driver := IsDrivenBy ( vehicle ) ;
34547: LD_ADDR_VAR 0 5
34551: PUSH
34552: LD_VAR 0 1
34556: PPUSH
34557: CALL_OW 311
34561: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
34562: LD_VAR 0 5
34566: PUSH
34567: LD_EXP 113
34571: IN
34572: IFTRUE 34586
34574: PUSH
34575: LD_VAR 0 1
34579: PUSH
34580: LD_EXP 113
34584: IN
34585: OR
34586: IFFALSE 34592
// exit ;
34588: POP
34589: POP
34590: GO 35060
// if not HasTask ( driver ) then
34592: LD_VAR 0 5
34596: PPUSH
34597: CALL_OW 314
34601: NOT
34602: IFFALSE 34907
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
34604: LD_ADDR_EXP 113
34608: PUSH
34609: LD_EXP 113
34613: PPUSH
34614: LD_VAR 0 5
34618: PPUSH
34619: CALL 78989 0 2
34623: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
34624: LD_ADDR_EXP 113
34628: PUSH
34629: LD_EXP 113
34633: PPUSH
34634: LD_VAR 0 1
34638: PPUSH
34639: CALL 78989 0 2
34643: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
34644: LD_ADDR_VAR 0 6
34648: PUSH
34649: LD_EXP 112
34653: PUSH
34654: LD_VAR 0 4
34658: ARRAY
34659: PUSH
34660: LD_INT 3
34662: ARRAY
34663: PPUSH
34664: LD_EXP 112
34668: PUSH
34669: LD_VAR 0 4
34673: ARRAY
34674: PUSH
34675: LD_INT 4
34677: ARRAY
34678: PPUSH
34679: CALL_OW 428
34683: ST_TO_ADDR
// if hex then
34684: LD_VAR 0 6
34688: IFFALSE 34706
// ComMoveUnit ( driver , hex ) else
34690: LD_VAR 0 5
34694: PPUSH
34695: LD_VAR 0 6
34699: PPUSH
34700: CALL_OW 112
34704: GO 34790
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
34706: LD_VAR 0 1
34710: PPUSH
34711: LD_EXP 112
34715: PUSH
34716: LD_VAR 0 4
34720: ARRAY
34721: PUSH
34722: LD_INT 3
34724: ARRAY
34725: PPUSH
34726: LD_EXP 112
34730: PUSH
34731: LD_VAR 0 4
34735: ARRAY
34736: PUSH
34737: LD_INT 4
34739: ARRAY
34740: PPUSH
34741: CALL_OW 297
34745: PUSH
34746: LD_INT 0
34748: GREATER
34749: IFFALSE 34790
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
34751: LD_VAR 0 5
34755: PPUSH
34756: LD_EXP 112
34760: PUSH
34761: LD_VAR 0 4
34765: ARRAY
34766: PUSH
34767: LD_INT 3
34769: ARRAY
34770: PPUSH
34771: LD_EXP 112
34775: PUSH
34776: LD_VAR 0 4
34780: ARRAY
34781: PUSH
34782: LD_INT 4
34784: ARRAY
34785: PPUSH
34786: CALL_OW 111
// AddComExitVehicle ( driver ) ;
34790: LD_VAR 0 5
34794: PPUSH
34795: CALL_OW 181
// if Multiplayer then
34799: LD_OWVAR 4
34803: IFFALSE 34852
// begin repeat wait ( 10 ) ;
34805: LD_INT 10
34807: PPUSH
34808: CALL_OW 67
// until not IsInUnit ( driver ) ;
34812: LD_VAR 0 5
34816: PPUSH
34817: CALL_OW 310
34821: NOT
34822: IFFALSE 34805
// if not HasTask ( driver ) then
34824: LD_VAR 0 5
34828: PPUSH
34829: CALL_OW 314
34833: NOT
34834: IFFALSE 34850
// ComEnterUnit ( driver , factory ) ;
34836: LD_VAR 0 5
34840: PPUSH
34841: LD_VAR 0 2
34845: PPUSH
34846: CALL_OW 120
// end else
34850: GO 34866
// AddComEnterUnit ( driver , factory ) ;
34852: LD_VAR 0 5
34856: PPUSH
34857: LD_VAR 0 2
34861: PPUSH
34862: CALL_OW 180
// wait ( 0 0$1 ) ;
34866: LD_INT 35
34868: PPUSH
34869: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
34873: LD_ADDR_EXP 113
34877: PUSH
34878: LD_EXP 113
34882: PUSH
34883: LD_VAR 0 5
34887: DIFF
34888: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
34889: LD_ADDR_EXP 113
34893: PUSH
34894: LD_EXP 113
34898: PUSH
34899: LD_VAR 0 1
34903: DIFF
34904: ST_TO_ADDR
// break ;
34905: GO 35058
// end ; end else
34907: GO 35056
// if GetControl ( vehicle ) = control_remote then
34909: LD_VAR 0 1
34913: PPUSH
34914: CALL_OW 263
34918: PUSH
34919: LD_INT 2
34921: EQUAL
34922: IFFALSE 35008
// begin wait ( 0 0$2 ) ;
34924: LD_INT 70
34926: PPUSH
34927: CALL_OW 67
// repeat wait ( 10 ) ;
34931: LD_INT 10
34933: PPUSH
34934: CALL_OW 67
// Connect ( vehicle ) ;
34938: LD_VAR 0 1
34942: PPUSH
34943: CALL 49291 0 1
// until IsControledBy ( vehicle ) ;
34947: LD_VAR 0 1
34951: PPUSH
34952: CALL_OW 312
34956: IFFALSE 34931
// wait ( 10 ) ;
34958: LD_INT 10
34960: PPUSH
34961: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
34965: LD_VAR 0 1
34969: PPUSH
34970: LD_EXP 112
34974: PUSH
34975: LD_VAR 0 4
34979: ARRAY
34980: PUSH
34981: LD_INT 3
34983: ARRAY
34984: PPUSH
34985: LD_EXP 112
34989: PUSH
34990: LD_VAR 0 4
34994: ARRAY
34995: PUSH
34996: LD_INT 4
34998: ARRAY
34999: PPUSH
35000: CALL_OW 111
// break ;
35004: GO 35058
// end else
35006: GO 35056
// begin wait ( 0 0$3 ) ;
35008: LD_INT 105
35010: PPUSH
35011: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35015: LD_VAR 0 1
35019: PPUSH
35020: LD_EXP 112
35024: PUSH
35025: LD_VAR 0 4
35029: ARRAY
35030: PUSH
35031: LD_INT 3
35033: ARRAY
35034: PPUSH
35035: LD_EXP 112
35039: PUSH
35040: LD_VAR 0 4
35044: ARRAY
35045: PUSH
35046: LD_INT 4
35048: ARRAY
35049: PPUSH
35050: CALL_OW 111
// break ;
35054: GO 35058
// end ; end ;
35056: GO 34507
35058: POP
35059: POP
// end ;
35060: LD_VAR 0 3
35064: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35065: LD_INT 0
35067: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35068: LD_VAR 0 1
35072: PUSH
35073: LD_INT 250
35075: EQUAL
35076: IFFALSE 35093
35078: PUSH
35079: LD_VAR 0 2
35083: PPUSH
35084: CALL_OW 264
35088: PUSH
35089: LD_INT 81
35091: EQUAL
35092: AND
35093: IFFALSE 35114
// MinerPlaceMine ( unit , x , y ) ;
35095: LD_VAR 0 2
35099: PPUSH
35100: LD_VAR 0 4
35104: PPUSH
35105: LD_VAR 0 5
35109: PPUSH
35110: CALL 38460 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35114: LD_VAR 0 1
35118: PUSH
35119: LD_INT 251
35121: EQUAL
35122: IFFALSE 35139
35124: PUSH
35125: LD_VAR 0 2
35129: PPUSH
35130: CALL_OW 264
35134: PUSH
35135: LD_INT 81
35137: EQUAL
35138: AND
35139: IFFALSE 35160
// MinerDetonateMine ( unit , x , y ) ;
35141: LD_VAR 0 2
35145: PPUSH
35146: LD_VAR 0 4
35150: PPUSH
35151: LD_VAR 0 5
35155: PPUSH
35156: CALL 38867 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35160: LD_VAR 0 1
35164: PUSH
35165: LD_INT 252
35167: EQUAL
35168: IFFALSE 35185
35170: PUSH
35171: LD_VAR 0 2
35175: PPUSH
35176: CALL_OW 264
35180: PUSH
35181: LD_INT 81
35183: EQUAL
35184: AND
35185: IFFALSE 35206
// MinerCreateMinefield ( unit , x , y ) ;
35187: LD_VAR 0 2
35191: PPUSH
35192: LD_VAR 0 4
35196: PPUSH
35197: LD_VAR 0 5
35201: PPUSH
35202: CALL 39099 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35206: LD_VAR 0 1
35210: PUSH
35211: LD_INT 253
35213: EQUAL
35214: IFFALSE 35231
35216: PUSH
35217: LD_VAR 0 2
35221: PPUSH
35222: CALL_OW 257
35226: PUSH
35227: LD_INT 5
35229: EQUAL
35230: AND
35231: IFFALSE 35252
// ComBinocular ( unit , x , y ) ;
35233: LD_VAR 0 2
35237: PPUSH
35238: LD_VAR 0 4
35242: PPUSH
35243: LD_VAR 0 5
35247: PPUSH
35248: CALL 39474 0 3
// if selectedUnit then
35252: LD_VAR 0 3
35256: IFFALSE 35316
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35258: LD_VAR 0 1
35262: PUSH
35263: LD_INT 254
35265: EQUAL
35266: IFFALSE 35283
35268: PUSH
35269: LD_VAR 0 2
35273: PPUSH
35274: CALL_OW 264
35278: PUSH
35279: LD_INT 99
35281: EQUAL
35282: AND
35283: IFFALSE 35300
35285: PUSH
35286: LD_VAR 0 3
35290: PPUSH
35291: CALL_OW 263
35295: PUSH
35296: LD_INT 3
35298: EQUAL
35299: AND
35300: IFFALSE 35316
// HackDestroyVehicle ( unit , selectedUnit ) ;
35302: LD_VAR 0 2
35306: PPUSH
35307: LD_VAR 0 3
35311: PPUSH
35312: CALL 37650 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35316: LD_VAR 0 1
35320: PUSH
35321: LD_INT 255
35323: EQUAL
35324: IFFALSE 35348
35326: PUSH
35327: LD_VAR 0 2
35331: PPUSH
35332: CALL_OW 264
35336: PUSH
35337: LD_INT 14
35339: PUSH
35340: LD_INT 53
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: IN
35347: AND
35348: IFFALSE 35366
35350: PUSH
35351: LD_VAR 0 4
35355: PPUSH
35356: LD_VAR 0 5
35360: PPUSH
35361: CALL_OW 488
35365: AND
35366: IFFALSE 35390
// CutTreeXYR ( unit , x , y , 12 ) ;
35368: LD_VAR 0 2
35372: PPUSH
35373: LD_VAR 0 4
35377: PPUSH
35378: LD_VAR 0 5
35382: PPUSH
35383: LD_INT 12
35385: PPUSH
35386: CALL 35581 0 4
// if cmd = 256 then
35390: LD_VAR 0 1
35394: PUSH
35395: LD_INT 256
35397: EQUAL
35398: IFFALSE 35419
// SetFactoryWaypoint ( unit , x , y ) ;
35400: LD_VAR 0 2
35404: PPUSH
35405: LD_VAR 0 4
35409: PPUSH
35410: LD_VAR 0 5
35414: PPUSH
35415: CALL 32697 0 3
// if cmd = 257 then
35419: LD_VAR 0 1
35423: PUSH
35424: LD_INT 257
35426: EQUAL
35427: IFFALSE 35448
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35429: LD_VAR 0 2
35433: PPUSH
35434: LD_VAR 0 4
35438: PPUSH
35439: LD_VAR 0 5
35443: PPUSH
35444: CALL 33193 0 3
// if cmd = 258 then
35448: LD_VAR 0 1
35452: PUSH
35453: LD_INT 258
35455: EQUAL
35456: IFFALSE 35480
// BurnTreeXYR ( unit , x , y , 8 ) ;
35458: LD_VAR 0 2
35462: PPUSH
35463: LD_VAR 0 4
35467: PPUSH
35468: LD_VAR 0 5
35472: PPUSH
35473: LD_INT 8
35475: PPUSH
35476: CALL 36003 0 4
// end ;
35480: LD_VAR 0 6
35484: RET
// export function ComRadiation ( un ) ; var eff ; begin
35485: LD_INT 0
35487: PPUSH
35488: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
35489: LD_VAR 0 1
35493: PPUSH
35494: CALL_OW 264
35498: PUSH
35499: LD_INT 91
35501: NONEQUAL
35502: IFFALSE 35506
// exit ;
35504: GO 35576
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35506: LD_INT 68
35508: PPUSH
35509: LD_VAR 0 1
35513: PPUSH
35514: CALL_OW 255
35518: PPUSH
35519: CALL_OW 321
35523: PUSH
35524: LD_INT 2
35526: EQUAL
35527: IFFALSE 35539
// eff := 50 else
35529: LD_ADDR_VAR 0 3
35533: PUSH
35534: LD_INT 50
35536: ST_TO_ADDR
35537: GO 35547
// eff := 25 ;
35539: LD_ADDR_VAR 0 3
35543: PUSH
35544: LD_INT 25
35546: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35547: LD_VAR 0 1
35551: PPUSH
35552: CALL_OW 250
35556: PPUSH
35557: LD_VAR 0 1
35561: PPUSH
35562: CALL_OW 251
35566: PPUSH
35567: LD_VAR 0 3
35571: PPUSH
35572: CALL_OW 495
// end ;
35576: LD_VAR 0 2
35580: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35581: LD_INT 0
35583: PPUSH
35584: PPUSH
35585: PPUSH
35586: PPUSH
35587: PPUSH
35588: PPUSH
35589: PPUSH
35590: PPUSH
35591: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
35592: LD_VAR 0 1
35596: PPUSH
35597: CALL_OW 302
35601: NOT
35602: IFTRUE 35621
35604: PUSH
35605: LD_VAR 0 2
35609: PPUSH
35610: LD_VAR 0 3
35614: PPUSH
35615: CALL_OW 488
35619: NOT
35620: OR
35621: IFTRUE 35630
35623: PUSH
35624: LD_VAR 0 4
35628: NOT
35629: OR
35630: IFFALSE 35634
// exit ;
35632: GO 35998
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
35634: LD_VAR 0 1
35638: PPUSH
35639: CALL_OW 437
35643: PPUSH
35644: CALL 43013 0 1
35648: PUSH
35649: LD_INT 10
35651: GREATER
35652: IFFALSE 35656
// exit ;
35654: GO 35998
// list := [ ] ;
35656: LD_ADDR_VAR 0 13
35660: PUSH
35661: EMPTY
35662: ST_TO_ADDR
// if x - r < 0 then
35663: LD_VAR 0 2
35667: PUSH
35668: LD_VAR 0 4
35672: MINUS
35673: PUSH
35674: LD_INT 0
35676: LESS
35677: IFFALSE 35689
// min_x := 0 else
35679: LD_ADDR_VAR 0 7
35683: PUSH
35684: LD_INT 0
35686: ST_TO_ADDR
35687: GO 35705
// min_x := x - r ;
35689: LD_ADDR_VAR 0 7
35693: PUSH
35694: LD_VAR 0 2
35698: PUSH
35699: LD_VAR 0 4
35703: MINUS
35704: ST_TO_ADDR
// if y - r < 0 then
35705: LD_VAR 0 3
35709: PUSH
35710: LD_VAR 0 4
35714: MINUS
35715: PUSH
35716: LD_INT 0
35718: LESS
35719: IFFALSE 35731
// min_y := 0 else
35721: LD_ADDR_VAR 0 8
35725: PUSH
35726: LD_INT 0
35728: ST_TO_ADDR
35729: GO 35747
// min_y := y - r ;
35731: LD_ADDR_VAR 0 8
35735: PUSH
35736: LD_VAR 0 3
35740: PUSH
35741: LD_VAR 0 4
35745: MINUS
35746: ST_TO_ADDR
// max_x := x + r ;
35747: LD_ADDR_VAR 0 9
35751: PUSH
35752: LD_VAR 0 2
35756: PUSH
35757: LD_VAR 0 4
35761: PLUS
35762: ST_TO_ADDR
// max_y := y + r ;
35763: LD_ADDR_VAR 0 10
35767: PUSH
35768: LD_VAR 0 3
35772: PUSH
35773: LD_VAR 0 4
35777: PLUS
35778: ST_TO_ADDR
// for _x = min_x to max_x do
35779: LD_ADDR_VAR 0 11
35783: PUSH
35784: DOUBLE
35785: LD_VAR 0 7
35789: DEC
35790: ST_TO_ADDR
35791: LD_VAR 0 9
35795: PUSH
35796: FOR_TO
35797: IFFALSE 35916
// for _y = min_y to max_y do
35799: LD_ADDR_VAR 0 12
35803: PUSH
35804: DOUBLE
35805: LD_VAR 0 8
35809: DEC
35810: ST_TO_ADDR
35811: LD_VAR 0 10
35815: PUSH
35816: FOR_TO
35817: IFFALSE 35912
// begin if not ValidHex ( _x , _y ) then
35819: LD_VAR 0 11
35823: PPUSH
35824: LD_VAR 0 12
35828: PPUSH
35829: CALL_OW 488
35833: NOT
35834: IFFALSE 35838
// continue ;
35836: GO 35816
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35838: LD_VAR 0 11
35842: PPUSH
35843: LD_VAR 0 12
35847: PPUSH
35848: CALL_OW 351
35852: IFFALSE 35870
35854: PUSH
35855: LD_VAR 0 11
35859: PPUSH
35860: LD_VAR 0 12
35864: PPUSH
35865: CALL_OW 554
35869: AND
35870: IFFALSE 35910
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35872: LD_ADDR_VAR 0 13
35876: PUSH
35877: LD_VAR 0 13
35881: PPUSH
35882: LD_VAR 0 13
35886: PUSH
35887: LD_INT 1
35889: PLUS
35890: PPUSH
35891: LD_VAR 0 11
35895: PUSH
35896: LD_VAR 0 12
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PPUSH
35905: CALL_OW 2
35909: ST_TO_ADDR
// end ;
35910: GO 35816
35912: POP
35913: POP
35914: GO 35796
35916: POP
35917: POP
// if not list then
35918: LD_VAR 0 13
35922: NOT
35923: IFFALSE 35927
// exit ;
35925: GO 35998
// for i in list do
35927: LD_ADDR_VAR 0 6
35931: PUSH
35932: LD_VAR 0 13
35936: PUSH
35937: FOR_IN
35938: IFFALSE 35996
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35940: LD_VAR 0 1
35944: PPUSH
35945: LD_STRING M
35947: PUSH
35948: LD_VAR 0 6
35952: PUSH
35953: LD_INT 1
35955: ARRAY
35956: PUSH
35957: LD_VAR 0 6
35961: PUSH
35962: LD_INT 2
35964: ARRAY
35965: PUSH
35966: LD_INT 0
35968: PUSH
35969: LD_INT 0
35971: PUSH
35972: LD_INT 0
35974: PUSH
35975: LD_INT 0
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: PUSH
35987: EMPTY
35988: LIST
35989: PPUSH
35990: CALL_OW 447
35994: GO 35937
35996: POP
35997: POP
// end ;
35998: LD_VAR 0 5
36002: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
36003: LD_INT 0
36005: PPUSH
36006: PPUSH
36007: PPUSH
36008: PPUSH
36009: PPUSH
36010: PPUSH
36011: PPUSH
36012: PPUSH
36013: PPUSH
36014: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
36015: LD_VAR 0 1
36019: PPUSH
36020: CALL_OW 302
36024: NOT
36025: IFTRUE 36044
36027: PUSH
36028: LD_VAR 0 2
36032: PPUSH
36033: LD_VAR 0 3
36037: PPUSH
36038: CALL_OW 488
36042: NOT
36043: OR
36044: IFTRUE 36053
36046: PUSH
36047: LD_VAR 0 4
36051: NOT
36052: OR
36053: IFFALSE 36057
// exit ;
36055: GO 36596
// if Count ( GetTaskList ( flame ) ) > 10 then
36057: LD_VAR 0 1
36061: PPUSH
36062: CALL_OW 437
36066: PPUSH
36067: CALL 43013 0 1
36071: PUSH
36072: LD_INT 10
36074: GREATER
36075: IFFALSE 36079
// exit ;
36077: GO 36596
// list := [ ] ;
36079: LD_ADDR_VAR 0 13
36083: PUSH
36084: EMPTY
36085: ST_TO_ADDR
// if x - r < 0 then
36086: LD_VAR 0 2
36090: PUSH
36091: LD_VAR 0 4
36095: MINUS
36096: PUSH
36097: LD_INT 0
36099: LESS
36100: IFFALSE 36112
// min_x := 0 else
36102: LD_ADDR_VAR 0 7
36106: PUSH
36107: LD_INT 0
36109: ST_TO_ADDR
36110: GO 36128
// min_x := x - r ;
36112: LD_ADDR_VAR 0 7
36116: PUSH
36117: LD_VAR 0 2
36121: PUSH
36122: LD_VAR 0 4
36126: MINUS
36127: ST_TO_ADDR
// if y - r < 0 then
36128: LD_VAR 0 3
36132: PUSH
36133: LD_VAR 0 4
36137: MINUS
36138: PUSH
36139: LD_INT 0
36141: LESS
36142: IFFALSE 36154
// min_y := 0 else
36144: LD_ADDR_VAR 0 8
36148: PUSH
36149: LD_INT 0
36151: ST_TO_ADDR
36152: GO 36170
// min_y := y - r ;
36154: LD_ADDR_VAR 0 8
36158: PUSH
36159: LD_VAR 0 3
36163: PUSH
36164: LD_VAR 0 4
36168: MINUS
36169: ST_TO_ADDR
// max_x := x + r ;
36170: LD_ADDR_VAR 0 9
36174: PUSH
36175: LD_VAR 0 2
36179: PUSH
36180: LD_VAR 0 4
36184: PLUS
36185: ST_TO_ADDR
// max_y := y + r ;
36186: LD_ADDR_VAR 0 10
36190: PUSH
36191: LD_VAR 0 3
36195: PUSH
36196: LD_VAR 0 4
36200: PLUS
36201: ST_TO_ADDR
// for _x = min_x to max_x do
36202: LD_ADDR_VAR 0 11
36206: PUSH
36207: DOUBLE
36208: LD_VAR 0 7
36212: DEC
36213: ST_TO_ADDR
36214: LD_VAR 0 9
36218: PUSH
36219: FOR_TO
36220: IFFALSE 36339
// for _y = min_y to max_y do
36222: LD_ADDR_VAR 0 12
36226: PUSH
36227: DOUBLE
36228: LD_VAR 0 8
36232: DEC
36233: ST_TO_ADDR
36234: LD_VAR 0 10
36238: PUSH
36239: FOR_TO
36240: IFFALSE 36335
// begin if not ValidHex ( _x , _y ) then
36242: LD_VAR 0 11
36246: PPUSH
36247: LD_VAR 0 12
36251: PPUSH
36252: CALL_OW 488
36256: NOT
36257: IFFALSE 36261
// continue ;
36259: GO 36239
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36261: LD_VAR 0 11
36265: PPUSH
36266: LD_VAR 0 12
36270: PPUSH
36271: CALL_OW 351
36275: IFFALSE 36293
36277: PUSH
36278: LD_VAR 0 11
36282: PPUSH
36283: LD_VAR 0 12
36287: PPUSH
36288: CALL_OW 554
36292: AND
36293: IFFALSE 36333
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36295: LD_ADDR_VAR 0 13
36299: PUSH
36300: LD_VAR 0 13
36304: PPUSH
36305: LD_VAR 0 13
36309: PUSH
36310: LD_INT 1
36312: PLUS
36313: PPUSH
36314: LD_VAR 0 11
36318: PUSH
36319: LD_VAR 0 12
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PPUSH
36328: CALL_OW 2
36332: ST_TO_ADDR
// end ;
36333: GO 36239
36335: POP
36336: POP
36337: GO 36219
36339: POP
36340: POP
// if not list then
36341: LD_VAR 0 13
36345: NOT
36346: IFFALSE 36350
// exit ;
36348: GO 36596
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
36350: LD_ADDR_VAR 0 13
36354: PUSH
36355: LD_VAR 0 1
36359: PPUSH
36360: LD_VAR 0 13
36364: PPUSH
36365: LD_INT 1
36367: PPUSH
36368: LD_INT 1
36370: PPUSH
36371: CALL 46419 0 4
36375: ST_TO_ADDR
// ComStop ( flame ) ;
36376: LD_VAR 0 1
36380: PPUSH
36381: CALL_OW 141
// for i in list do
36385: LD_ADDR_VAR 0 6
36389: PUSH
36390: LD_VAR 0 13
36394: PUSH
36395: FOR_IN
36396: IFFALSE 36427
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
36398: LD_VAR 0 1
36402: PPUSH
36403: LD_VAR 0 6
36407: PUSH
36408: LD_INT 1
36410: ARRAY
36411: PPUSH
36412: LD_VAR 0 6
36416: PUSH
36417: LD_INT 2
36419: ARRAY
36420: PPUSH
36421: CALL_OW 176
36425: GO 36395
36427: POP
36428: POP
// repeat wait ( 0 0$1 ) ;
36429: LD_INT 35
36431: PPUSH
36432: CALL_OW 67
// task := GetTaskList ( flame ) ;
36436: LD_ADDR_VAR 0 14
36440: PUSH
36441: LD_VAR 0 1
36445: PPUSH
36446: CALL_OW 437
36450: ST_TO_ADDR
// if not task then
36451: LD_VAR 0 14
36455: NOT
36456: IFFALSE 36460
// exit ;
36458: GO 36596
// if task [ 1 ] [ 1 ] <> | then
36460: LD_VAR 0 14
36464: PUSH
36465: LD_INT 1
36467: ARRAY
36468: PUSH
36469: LD_INT 1
36471: ARRAY
36472: PUSH
36473: LD_STRING |
36475: NONEQUAL
36476: IFFALSE 36480
// exit ;
36478: GO 36596
// _x := task [ 1 ] [ 2 ] ;
36480: LD_ADDR_VAR 0 11
36484: PUSH
36485: LD_VAR 0 14
36489: PUSH
36490: LD_INT 1
36492: ARRAY
36493: PUSH
36494: LD_INT 2
36496: ARRAY
36497: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
36498: LD_ADDR_VAR 0 12
36502: PUSH
36503: LD_VAR 0 14
36507: PUSH
36508: LD_INT 1
36510: ARRAY
36511: PUSH
36512: LD_INT 3
36514: ARRAY
36515: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
36516: LD_VAR 0 11
36520: PPUSH
36521: LD_VAR 0 12
36525: PPUSH
36526: CALL_OW 351
36530: NOT
36531: IFTRUE 36550
36533: PUSH
36534: LD_VAR 0 11
36538: PPUSH
36539: LD_VAR 0 12
36543: PPUSH
36544: CALL_OW 554
36548: NOT
36549: OR
36550: IFFALSE 36584
// begin task := Delete ( task , 1 ) ;
36552: LD_ADDR_VAR 0 14
36556: PUSH
36557: LD_VAR 0 14
36561: PPUSH
36562: LD_INT 1
36564: PPUSH
36565: CALL_OW 3
36569: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
36570: LD_VAR 0 1
36574: PPUSH
36575: LD_VAR 0 14
36579: PPUSH
36580: CALL_OW 446
// end ; until not HasTask ( flame ) ;
36584: LD_VAR 0 1
36588: PPUSH
36589: CALL_OW 314
36593: NOT
36594: IFFALSE 36429
// end ;
36596: LD_VAR 0 5
36600: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36601: LD_EXP 116
36605: NOT
36606: IFFALSE 36656
36608: GO 36610
36610: DISABLE
// begin initHack := true ;
36611: LD_ADDR_EXP 116
36615: PUSH
36616: LD_INT 1
36618: ST_TO_ADDR
// hackTanks := [ ] ;
36619: LD_ADDR_EXP 117
36623: PUSH
36624: EMPTY
36625: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36626: LD_ADDR_EXP 118
36630: PUSH
36631: EMPTY
36632: ST_TO_ADDR
// hackLimit := 3 ;
36633: LD_ADDR_EXP 119
36637: PUSH
36638: LD_INT 3
36640: ST_TO_ADDR
// hackDist := 12 ;
36641: LD_ADDR_EXP 120
36645: PUSH
36646: LD_INT 12
36648: ST_TO_ADDR
// hackCounter := [ ] ;
36649: LD_ADDR_EXP 121
36653: PUSH
36654: EMPTY
36655: ST_TO_ADDR
// end ;
36656: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36657: LD_EXP 116
36661: IFFALSE 36679
36663: PUSH
36664: LD_INT 34
36666: PUSH
36667: LD_INT 99
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PPUSH
36674: CALL_OW 69
36678: AND
36679: IFFALSE 36932
36681: GO 36683
36683: DISABLE
36684: LD_INT 0
36686: PPUSH
36687: PPUSH
// begin enable ;
36688: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36689: LD_ADDR_VAR 0 1
36693: PUSH
36694: LD_INT 34
36696: PUSH
36697: LD_INT 99
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PPUSH
36704: CALL_OW 69
36708: PUSH
36709: FOR_IN
36710: IFFALSE 36930
// begin if not i in hackTanks then
36712: LD_VAR 0 1
36716: PUSH
36717: LD_EXP 117
36721: IN
36722: NOT
36723: IFFALSE 36806
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36725: LD_ADDR_EXP 117
36729: PUSH
36730: LD_EXP 117
36734: PPUSH
36735: LD_EXP 117
36739: PUSH
36740: LD_INT 1
36742: PLUS
36743: PPUSH
36744: LD_VAR 0 1
36748: PPUSH
36749: CALL_OW 1
36753: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36754: LD_ADDR_EXP 118
36758: PUSH
36759: LD_EXP 118
36763: PPUSH
36764: LD_EXP 118
36768: PUSH
36769: LD_INT 1
36771: PLUS
36772: PPUSH
36773: EMPTY
36774: PPUSH
36775: CALL_OW 1
36779: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36780: LD_ADDR_EXP 121
36784: PUSH
36785: LD_EXP 121
36789: PPUSH
36790: LD_EXP 121
36794: PUSH
36795: LD_INT 1
36797: PLUS
36798: PPUSH
36799: EMPTY
36800: PPUSH
36801: CALL_OW 1
36805: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36806: LD_VAR 0 1
36810: PPUSH
36811: CALL_OW 302
36815: NOT
36816: IFFALSE 36829
// begin HackUnlinkAll ( i ) ;
36818: LD_VAR 0 1
36822: PPUSH
36823: CALL 36935 0 1
// continue ;
36827: GO 36709
// end ; HackCheckCapturedStatus ( i ) ;
36829: LD_VAR 0 1
36833: PPUSH
36834: CALL 37380 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36838: LD_ADDR_VAR 0 2
36842: PUSH
36843: LD_INT 81
36845: PUSH
36846: LD_VAR 0 1
36850: PPUSH
36851: CALL_OW 255
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 33
36862: PUSH
36863: LD_INT 3
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 91
36872: PUSH
36873: LD_VAR 0 1
36877: PUSH
36878: LD_EXP 120
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 50
36890: PUSH
36891: EMPTY
36892: LIST
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: PPUSH
36900: CALL_OW 69
36904: ST_TO_ADDR
// if not tmp then
36905: LD_VAR 0 2
36909: NOT
36910: IFFALSE 36914
// continue ;
36912: GO 36709
// HackLink ( i , tmp ) ;
36914: LD_VAR 0 1
36918: PPUSH
36919: LD_VAR 0 2
36923: PPUSH
36924: CALL 37071 0 2
// end ;
36928: GO 36709
36930: POP
36931: POP
// end ;
36932: PPOPN 2
36934: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36935: LD_INT 0
36937: PPUSH
36938: PPUSH
36939: PPUSH
// if not hack in hackTanks then
36940: LD_VAR 0 1
36944: PUSH
36945: LD_EXP 117
36949: IN
36950: NOT
36951: IFFALSE 36955
// exit ;
36953: GO 37066
// index := GetElementIndex ( hackTanks , hack ) ;
36955: LD_ADDR_VAR 0 4
36959: PUSH
36960: LD_EXP 117
36964: PPUSH
36965: LD_VAR 0 1
36969: PPUSH
36970: CALL 45714 0 2
36974: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36975: LD_EXP 118
36979: PUSH
36980: LD_VAR 0 4
36984: ARRAY
36985: IFFALSE 37066
// begin for i in hackTanksCaptured [ index ] do
36987: LD_ADDR_VAR 0 3
36991: PUSH
36992: LD_EXP 118
36996: PUSH
36997: LD_VAR 0 4
37001: ARRAY
37002: PUSH
37003: FOR_IN
37004: IFFALSE 37030
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37006: LD_VAR 0 3
37010: PUSH
37011: LD_INT 1
37013: ARRAY
37014: PPUSH
37015: LD_VAR 0 3
37019: PUSH
37020: LD_INT 2
37022: ARRAY
37023: PPUSH
37024: CALL_OW 235
37028: GO 37003
37030: POP
37031: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37032: LD_ADDR_EXP 118
37036: PUSH
37037: LD_EXP 118
37041: PPUSH
37042: LD_VAR 0 4
37046: PPUSH
37047: EMPTY
37048: PPUSH
37049: CALL_OW 1
37053: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37054: LD_VAR 0 1
37058: PPUSH
37059: LD_INT 0
37061: PPUSH
37062: CALL_OW 505
// end ; end ;
37066: LD_VAR 0 2
37070: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37071: LD_INT 0
37073: PPUSH
37074: PPUSH
37075: PPUSH
// if not hack in hackTanks or not vehicles then
37076: LD_VAR 0 1
37080: PUSH
37081: LD_EXP 117
37085: IN
37086: NOT
37087: IFTRUE 37096
37089: PUSH
37090: LD_VAR 0 2
37094: NOT
37095: OR
37096: IFFALSE 37100
// exit ;
37098: GO 37375
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37100: LD_ADDR_VAR 0 2
37104: PUSH
37105: LD_VAR 0 1
37109: PPUSH
37110: LD_VAR 0 2
37114: PPUSH
37115: LD_INT 1
37117: PPUSH
37118: LD_INT 1
37120: PPUSH
37121: CALL 46366 0 4
37125: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37126: LD_ADDR_VAR 0 5
37130: PUSH
37131: LD_EXP 117
37135: PPUSH
37136: LD_VAR 0 1
37140: PPUSH
37141: CALL 45714 0 2
37145: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37146: LD_EXP 118
37150: PUSH
37151: LD_VAR 0 5
37155: ARRAY
37156: PUSH
37157: LD_EXP 119
37161: LESS
37162: IFFALSE 37351
// begin for i := 1 to vehicles do
37164: LD_ADDR_VAR 0 4
37168: PUSH
37169: DOUBLE
37170: LD_INT 1
37172: DEC
37173: ST_TO_ADDR
37174: LD_VAR 0 2
37178: PUSH
37179: FOR_TO
37180: IFFALSE 37349
// begin if hackTanksCaptured [ index ] = hackLimit then
37182: LD_EXP 118
37186: PUSH
37187: LD_VAR 0 5
37191: ARRAY
37192: PUSH
37193: LD_EXP 119
37197: EQUAL
37198: IFFALSE 37202
// break ;
37200: GO 37349
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37202: LD_ADDR_EXP 121
37206: PUSH
37207: LD_EXP 121
37211: PPUSH
37212: LD_VAR 0 5
37216: PPUSH
37217: LD_EXP 121
37221: PUSH
37222: LD_VAR 0 5
37226: ARRAY
37227: PUSH
37228: LD_INT 1
37230: PLUS
37231: PPUSH
37232: CALL_OW 1
37236: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37237: LD_ADDR_EXP 118
37241: PUSH
37242: LD_EXP 118
37246: PPUSH
37247: LD_VAR 0 5
37251: PUSH
37252: LD_EXP 118
37256: PUSH
37257: LD_VAR 0 5
37261: ARRAY
37262: PUSH
37263: LD_INT 1
37265: PLUS
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PPUSH
37271: LD_VAR 0 2
37275: PUSH
37276: LD_VAR 0 4
37280: ARRAY
37281: PUSH
37282: LD_VAR 0 2
37286: PUSH
37287: LD_VAR 0 4
37291: ARRAY
37292: PPUSH
37293: CALL_OW 255
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PPUSH
37302: CALL 45931 0 3
37306: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37307: LD_VAR 0 2
37311: PUSH
37312: LD_VAR 0 4
37316: ARRAY
37317: PPUSH
37318: LD_VAR 0 1
37322: PPUSH
37323: CALL_OW 255
37327: PPUSH
37328: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37332: LD_VAR 0 2
37336: PUSH
37337: LD_VAR 0 4
37341: ARRAY
37342: PPUSH
37343: CALL_OW 141
// end ;
37347: GO 37179
37349: POP
37350: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37351: LD_VAR 0 1
37355: PPUSH
37356: LD_EXP 118
37360: PUSH
37361: LD_VAR 0 5
37365: ARRAY
37366: PUSH
37367: LD_INT 0
37369: PLUS
37370: PPUSH
37371: CALL_OW 505
// end ;
37375: LD_VAR 0 3
37379: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37380: LD_INT 0
37382: PPUSH
37383: PPUSH
37384: PPUSH
37385: PPUSH
// if not hack in hackTanks then
37386: LD_VAR 0 1
37390: PUSH
37391: LD_EXP 117
37395: IN
37396: NOT
37397: IFFALSE 37401
// exit ;
37399: GO 37645
// index := GetElementIndex ( hackTanks , hack ) ;
37401: LD_ADDR_VAR 0 4
37405: PUSH
37406: LD_EXP 117
37410: PPUSH
37411: LD_VAR 0 1
37415: PPUSH
37416: CALL 45714 0 2
37420: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37421: LD_ADDR_VAR 0 3
37425: PUSH
37426: DOUBLE
37427: LD_EXP 118
37431: PUSH
37432: LD_VAR 0 4
37436: ARRAY
37437: INC
37438: ST_TO_ADDR
37439: LD_INT 1
37441: PUSH
37442: FOR_DOWNTO
37443: IFFALSE 37619
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37445: LD_ADDR_VAR 0 5
37449: PUSH
37450: LD_EXP 118
37454: PUSH
37455: LD_VAR 0 4
37459: ARRAY
37460: PUSH
37461: LD_VAR 0 3
37465: ARRAY
37466: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37467: LD_VAR 0 5
37471: PUSH
37472: LD_INT 1
37474: ARRAY
37475: PPUSH
37476: CALL_OW 302
37480: NOT
37481: IFTRUE 37509
37483: PUSH
37484: LD_VAR 0 5
37488: PUSH
37489: LD_INT 1
37491: ARRAY
37492: PPUSH
37493: CALL_OW 255
37497: PUSH
37498: LD_VAR 0 1
37502: PPUSH
37503: CALL_OW 255
37507: NONEQUAL
37508: OR
37509: IFFALSE 37617
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37511: LD_VAR 0 5
37515: PUSH
37516: LD_INT 1
37518: ARRAY
37519: PPUSH
37520: CALL_OW 305
37524: IFFALSE 37552
37526: PUSH
37527: LD_VAR 0 5
37531: PUSH
37532: LD_INT 1
37534: ARRAY
37535: PPUSH
37536: CALL_OW 255
37540: PUSH
37541: LD_VAR 0 1
37545: PPUSH
37546: CALL_OW 255
37550: EQUAL
37551: AND
37552: IFFALSE 37576
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37554: LD_VAR 0 5
37558: PUSH
37559: LD_INT 1
37561: ARRAY
37562: PPUSH
37563: LD_VAR 0 5
37567: PUSH
37568: LD_INT 2
37570: ARRAY
37571: PPUSH
37572: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37576: LD_ADDR_EXP 118
37580: PUSH
37581: LD_EXP 118
37585: PPUSH
37586: LD_VAR 0 4
37590: PPUSH
37591: LD_EXP 118
37595: PUSH
37596: LD_VAR 0 4
37600: ARRAY
37601: PPUSH
37602: LD_VAR 0 3
37606: PPUSH
37607: CALL_OW 3
37611: PPUSH
37612: CALL_OW 1
37616: ST_TO_ADDR
// end ; end ;
37617: GO 37442
37619: POP
37620: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37621: LD_VAR 0 1
37625: PPUSH
37626: LD_EXP 118
37630: PUSH
37631: LD_VAR 0 4
37635: ARRAY
37636: PUSH
37637: LD_INT 0
37639: PLUS
37640: PPUSH
37641: CALL_OW 505
// end ;
37645: LD_VAR 0 2
37649: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37650: LD_INT 0
37652: PPUSH
37653: PPUSH
37654: PPUSH
37655: PPUSH
// if not hack in hackTanks then
37656: LD_VAR 0 1
37660: PUSH
37661: LD_EXP 117
37665: IN
37666: NOT
37667: IFFALSE 37671
// exit ;
37669: GO 37756
// index := GetElementIndex ( hackTanks , hack ) ;
37671: LD_ADDR_VAR 0 5
37675: PUSH
37676: LD_EXP 117
37680: PPUSH
37681: LD_VAR 0 1
37685: PPUSH
37686: CALL 45714 0 2
37690: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37691: LD_ADDR_VAR 0 4
37695: PUSH
37696: DOUBLE
37697: LD_INT 1
37699: DEC
37700: ST_TO_ADDR
37701: LD_EXP 118
37705: PUSH
37706: LD_VAR 0 5
37710: ARRAY
37711: PUSH
37712: FOR_TO
37713: IFFALSE 37754
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37715: LD_EXP 118
37719: PUSH
37720: LD_VAR 0 5
37724: ARRAY
37725: PUSH
37726: LD_VAR 0 4
37730: ARRAY
37731: PUSH
37732: LD_INT 1
37734: ARRAY
37735: PUSH
37736: LD_VAR 0 2
37740: EQUAL
37741: IFFALSE 37752
// KillUnit ( vehicle ) ;
37743: LD_VAR 0 2
37747: PPUSH
37748: CALL_OW 66
37752: GO 37712
37754: POP
37755: POP
// end ;
37756: LD_VAR 0 3
37760: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
37761: LD_EXP 122
37765: NOT
37766: IFFALSE 37899
37768: GO 37770
37770: DISABLE
37771: LD_INT 0
37773: PPUSH
// begin initMiner := true ;
37774: LD_ADDR_EXP 122
37778: PUSH
37779: LD_INT 1
37781: ST_TO_ADDR
// minersList := [ ] ;
37782: LD_ADDR_EXP 123
37786: PUSH
37787: EMPTY
37788: ST_TO_ADDR
// minerMinesList := [ ] ;
37789: LD_ADDR_EXP 124
37793: PUSH
37794: EMPTY
37795: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
37796: LD_ADDR_EXP 125
37800: PUSH
37801: LD_INT 10
37803: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37804: LD_ADDR_VAR 0 1
37808: PUSH
37809: LD_INT 34
37811: PUSH
37812: LD_INT 81
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PPUSH
37819: CALL_OW 69
37823: PUSH
37824: FOR_IN
37825: IFFALSE 37897
// begin if not i in minersList then
37827: LD_VAR 0 1
37831: PUSH
37832: LD_EXP 123
37836: IN
37837: NOT
37838: IFFALSE 37895
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37840: LD_ADDR_EXP 123
37844: PUSH
37845: LD_EXP 123
37849: PPUSH
37850: LD_EXP 123
37854: PUSH
37855: LD_INT 1
37857: PLUS
37858: PPUSH
37859: LD_VAR 0 1
37863: PPUSH
37864: CALL_OW 1
37868: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37869: LD_ADDR_EXP 124
37873: PUSH
37874: LD_EXP 124
37878: PPUSH
37879: LD_EXP 124
37883: PUSH
37884: LD_INT 1
37886: PLUS
37887: PPUSH
37888: EMPTY
37889: PPUSH
37890: CALL_OW 1
37894: ST_TO_ADDR
// end end ;
37895: GO 37824
37897: POP
37898: POP
// end ;
37899: PPOPN 1
37901: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
37902: LD_EXP 122
37906: IFFALSE 37937
37908: PUSH
37909: LD_EXP 124
37913: PPUSH
37914: CALL 43013 0 1
37918: IFTRUE 37936
37920: PUSH
37921: LD_INT 34
37923: PUSH
37924: LD_INT 81
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PPUSH
37931: CALL_OW 69
37935: OR
37936: AND
37937: IFFALSE 38457
37939: GO 37941
37941: DISABLE
37942: LD_INT 0
37944: PPUSH
37945: PPUSH
37946: PPUSH
37947: PPUSH
// begin enable ;
37948: ENABLE
// for i := minerMinesList downto 1 do
37949: LD_ADDR_VAR 0 1
37953: PUSH
37954: DOUBLE
37955: LD_EXP 124
37959: INC
37960: ST_TO_ADDR
37961: LD_INT 1
37963: PUSH
37964: FOR_DOWNTO
37965: IFFALSE 38455
// begin side := GetSide ( minersList [ i ] ) ;
37967: LD_ADDR_VAR 0 3
37971: PUSH
37972: LD_EXP 123
37976: PUSH
37977: LD_VAR 0 1
37981: ARRAY
37982: PPUSH
37983: CALL_OW 255
37987: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
37988: LD_EXP 123
37992: PUSH
37993: LD_VAR 0 1
37997: ARRAY
37998: PPUSH
37999: CALL_OW 300
38003: IFFALSE 38024
38005: PUSH
38006: LD_VAR 0 3
38010: PUSH
38011: LD_OWVAR 2
38015: PUSH
38016: LD_INT 9
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: IN
38023: AND
38024: IFFALSE 38057
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
38026: LD_EXP 123
38030: PUSH
38031: LD_VAR 0 1
38035: ARRAY
38036: PPUSH
38037: LD_EXP 124
38041: PUSH
38042: LD_VAR 0 1
38046: ARRAY
38047: PPUSH
38048: CALL 43013 0 1
38052: PPUSH
38053: CALL_OW 505
// if not minerMinesList [ i ] then
38057: LD_EXP 124
38061: PUSH
38062: LD_VAR 0 1
38066: ARRAY
38067: NOT
38068: IFFALSE 38072
// continue ;
38070: GO 37964
// for j := minerMinesList [ i ] downto 1 do
38072: LD_ADDR_VAR 0 2
38076: PUSH
38077: DOUBLE
38078: LD_EXP 124
38082: PUSH
38083: LD_VAR 0 1
38087: ARRAY
38088: INC
38089: ST_TO_ADDR
38090: LD_INT 1
38092: PUSH
38093: FOR_DOWNTO
38094: IFFALSE 38451
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
38096: LD_EXP 123
38100: PUSH
38101: LD_VAR 0 1
38105: ARRAY
38106: PPUSH
38107: CALL_OW 301
38111: IFTRUE 38131
38113: PUSH
38114: LD_EXP 123
38118: PUSH
38119: LD_VAR 0 1
38123: ARRAY
38124: PPUSH
38125: CALL_OW 305
38129: NOT
38130: OR
38131: IFFALSE 38222
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38133: LD_EXP 124
38137: PUSH
38138: LD_VAR 0 1
38142: ARRAY
38143: PUSH
38144: LD_VAR 0 2
38148: ARRAY
38149: PUSH
38150: LD_INT 1
38152: ARRAY
38153: PPUSH
38154: LD_EXP 124
38158: PUSH
38159: LD_VAR 0 1
38163: ARRAY
38164: PUSH
38165: LD_VAR 0 2
38169: ARRAY
38170: PUSH
38171: LD_INT 2
38173: ARRAY
38174: PPUSH
38175: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38179: LD_ADDR_EXP 124
38183: PUSH
38184: LD_EXP 124
38188: PPUSH
38189: LD_VAR 0 1
38193: PPUSH
38194: LD_EXP 124
38198: PUSH
38199: LD_VAR 0 1
38203: ARRAY
38204: PPUSH
38205: LD_VAR 0 2
38209: PPUSH
38210: CALL_OW 3
38214: PPUSH
38215: CALL_OW 1
38219: ST_TO_ADDR
// continue ;
38220: GO 38093
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38222: LD_ADDR_VAR 0 4
38226: PUSH
38227: LD_EXP 124
38231: PUSH
38232: LD_VAR 0 1
38236: ARRAY
38237: PUSH
38238: LD_VAR 0 2
38242: ARRAY
38243: PUSH
38244: LD_INT 1
38246: ARRAY
38247: PPUSH
38248: LD_EXP 124
38252: PUSH
38253: LD_VAR 0 1
38257: ARRAY
38258: PUSH
38259: LD_VAR 0 2
38263: ARRAY
38264: PUSH
38265: LD_INT 2
38267: ARRAY
38268: PPUSH
38269: CALL_OW 428
38273: ST_TO_ADDR
// if not tmp then
38274: LD_VAR 0 4
38278: NOT
38279: IFFALSE 38283
// continue ;
38281: GO 38093
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38283: LD_VAR 0 4
38287: PUSH
38288: LD_INT 81
38290: PUSH
38291: LD_VAR 0 3
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PPUSH
38300: CALL_OW 69
38304: IN
38305: IFFALSE 38355
38307: PUSH
38308: LD_EXP 124
38312: PUSH
38313: LD_VAR 0 1
38317: ARRAY
38318: PUSH
38319: LD_VAR 0 2
38323: ARRAY
38324: PUSH
38325: LD_INT 1
38327: ARRAY
38328: PPUSH
38329: LD_EXP 124
38333: PUSH
38334: LD_VAR 0 1
38338: ARRAY
38339: PUSH
38340: LD_VAR 0 2
38344: ARRAY
38345: PUSH
38346: LD_INT 2
38348: ARRAY
38349: PPUSH
38350: CALL_OW 458
38354: AND
38355: IFFALSE 38449
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38357: LD_EXP 124
38361: PUSH
38362: LD_VAR 0 1
38366: ARRAY
38367: PUSH
38368: LD_VAR 0 2
38372: ARRAY
38373: PUSH
38374: LD_INT 1
38376: ARRAY
38377: PPUSH
38378: LD_EXP 124
38382: PUSH
38383: LD_VAR 0 1
38387: ARRAY
38388: PUSH
38389: LD_VAR 0 2
38393: ARRAY
38394: PUSH
38395: LD_INT 2
38397: ARRAY
38398: PPUSH
38399: LD_VAR 0 3
38403: PPUSH
38404: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38408: LD_ADDR_EXP 124
38412: PUSH
38413: LD_EXP 124
38417: PPUSH
38418: LD_VAR 0 1
38422: PPUSH
38423: LD_EXP 124
38427: PUSH
38428: LD_VAR 0 1
38432: ARRAY
38433: PPUSH
38434: LD_VAR 0 2
38438: PPUSH
38439: CALL_OW 3
38443: PPUSH
38444: CALL_OW 1
38448: ST_TO_ADDR
// end ; end ;
38449: GO 38093
38451: POP
38452: POP
// end ;
38453: GO 37964
38455: POP
38456: POP
// end ;
38457: PPOPN 4
38459: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
38460: LD_INT 0
38462: PPUSH
38463: PPUSH
38464: PPUSH
38465: PPUSH
// result := false ;
38466: LD_ADDR_VAR 0 4
38470: PUSH
38471: LD_INT 0
38473: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38474: LD_VAR 0 1
38478: PPUSH
38479: CALL_OW 264
38483: PUSH
38484: LD_INT 81
38486: EQUAL
38487: NOT
38488: IFFALSE 38492
// exit ;
38490: GO 38862
// side := GetSide ( unit ) ;
38492: LD_ADDR_VAR 0 6
38496: PUSH
38497: LD_VAR 0 1
38501: PPUSH
38502: CALL_OW 255
38506: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
38507: LD_ADDR_VAR 0 5
38511: PUSH
38512: LD_EXP 123
38516: PPUSH
38517: LD_VAR 0 1
38521: PPUSH
38522: CALL 45714 0 2
38526: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38527: LD_EXP 124
38531: PUSH
38532: LD_VAR 0 5
38536: ARRAY
38537: PUSH
38538: LD_EXP 125
38542: GREATEREQUAL
38543: IFFALSE 38547
// exit ;
38545: GO 38862
// ComMoveXY ( unit , x , y ) ;
38547: LD_VAR 0 1
38551: PPUSH
38552: LD_VAR 0 2
38556: PPUSH
38557: LD_VAR 0 3
38561: PPUSH
38562: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38566: LD_INT 35
38568: PPUSH
38569: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38573: LD_VAR 0 1
38577: PPUSH
38578: LD_VAR 0 2
38582: PPUSH
38583: LD_VAR 0 3
38587: PPUSH
38588: CALL 77770 0 3
38592: NOT
38593: IFFALSE 38606
38595: PUSH
38596: LD_VAR 0 1
38600: PPUSH
38601: CALL_OW 314
38605: AND
38606: IFFALSE 38610
// exit ;
38608: GO 38862
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38610: LD_VAR 0 2
38614: PPUSH
38615: LD_VAR 0 3
38619: PPUSH
38620: CALL_OW 428
38624: PUSH
38625: LD_VAR 0 1
38629: EQUAL
38630: IFFALSE 38644
38632: PUSH
38633: LD_VAR 0 1
38637: PPUSH
38638: CALL_OW 314
38642: NOT
38643: AND
38644: IFFALSE 38566
// if MineAtPos ( x , y ) then
38646: LD_VAR 0 2
38650: PPUSH
38651: LD_VAR 0 3
38655: PPUSH
38656: CALL_OW 458
38660: IFFALSE 38664
// exit ;
38662: GO 38862
// if your_side = side then
38664: LD_OWVAR 2
38668: PUSH
38669: LD_VAR 0 6
38673: EQUAL
38674: IFFALSE 38693
// PlaySoundXY ( x , y , PlantMine ) ;
38676: LD_VAR 0 2
38680: PPUSH
38681: LD_VAR 0 3
38685: PPUSH
38686: LD_STRING PlantMine
38688: PPUSH
38689: CALL_OW 366
// repeat wait ( 1 ) ;
38693: LD_INT 1
38695: PPUSH
38696: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
38700: LD_VAR 0 2
38704: PPUSH
38705: LD_VAR 0 3
38709: PPUSH
38710: LD_VAR 0 6
38714: PPUSH
38715: LD_INT 0
38717: PPUSH
38718: CALL_OW 454
38722: IFFALSE 38693
// if MineAtPos ( x , y ) then
38724: LD_VAR 0 2
38728: PPUSH
38729: LD_VAR 0 3
38733: PPUSH
38734: CALL_OW 458
38738: IFFALSE 38854
// begin for i in minerMinesList [ index ] do
38740: LD_ADDR_VAR 0 7
38744: PUSH
38745: LD_EXP 124
38749: PUSH
38750: LD_VAR 0 5
38754: ARRAY
38755: PUSH
38756: FOR_IN
38757: IFFALSE 38799
// if i [ 1 ] = x and i [ 2 ] = y then
38759: LD_VAR 0 7
38763: PUSH
38764: LD_INT 1
38766: ARRAY
38767: PUSH
38768: LD_VAR 0 2
38772: EQUAL
38773: IFFALSE 38791
38775: PUSH
38776: LD_VAR 0 7
38780: PUSH
38781: LD_INT 2
38783: ARRAY
38784: PUSH
38785: LD_VAR 0 3
38789: EQUAL
38790: AND
38791: IFFALSE 38797
// exit ;
38793: POP
38794: POP
38795: GO 38862
38797: GO 38756
38799: POP
38800: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38801: LD_ADDR_EXP 124
38805: PUSH
38806: LD_EXP 124
38810: PPUSH
38811: LD_VAR 0 5
38815: PUSH
38816: LD_EXP 124
38820: PUSH
38821: LD_VAR 0 5
38825: ARRAY
38826: PUSH
38827: LD_INT 1
38829: PLUS
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PPUSH
38835: LD_VAR 0 2
38839: PUSH
38840: LD_VAR 0 3
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PPUSH
38849: CALL 45931 0 3
38853: ST_TO_ADDR
// end ; result := true ;
38854: LD_ADDR_VAR 0 4
38858: PUSH
38859: LD_INT 1
38861: ST_TO_ADDR
// end ;
38862: LD_VAR 0 4
38866: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38867: LD_INT 0
38869: PPUSH
38870: PPUSH
38871: PPUSH
// if not unit in minersList then
38872: LD_VAR 0 1
38876: PUSH
38877: LD_EXP 123
38881: IN
38882: NOT
38883: IFFALSE 38887
// exit ;
38885: GO 39094
// index := GetElementIndex ( minersList , unit ) ;
38887: LD_ADDR_VAR 0 6
38891: PUSH
38892: LD_EXP 123
38896: PPUSH
38897: LD_VAR 0 1
38901: PPUSH
38902: CALL 45714 0 2
38906: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38907: LD_ADDR_VAR 0 5
38911: PUSH
38912: DOUBLE
38913: LD_EXP 124
38917: PUSH
38918: LD_VAR 0 6
38922: ARRAY
38923: INC
38924: ST_TO_ADDR
38925: LD_INT 1
38927: PUSH
38928: FOR_DOWNTO
38929: IFFALSE 39092
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38931: LD_EXP 124
38935: PUSH
38936: LD_VAR 0 6
38940: ARRAY
38941: PUSH
38942: LD_VAR 0 5
38946: ARRAY
38947: PUSH
38948: LD_INT 1
38950: ARRAY
38951: PPUSH
38952: LD_EXP 124
38956: PUSH
38957: LD_VAR 0 6
38961: ARRAY
38962: PUSH
38963: LD_VAR 0 5
38967: ARRAY
38968: PUSH
38969: LD_INT 2
38971: ARRAY
38972: PPUSH
38973: LD_VAR 0 2
38977: PPUSH
38978: LD_VAR 0 3
38982: PPUSH
38983: CALL_OW 298
38987: PUSH
38988: LD_INT 6
38990: LESS
38991: IFFALSE 39090
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38993: LD_EXP 124
38997: PUSH
38998: LD_VAR 0 6
39002: ARRAY
39003: PUSH
39004: LD_VAR 0 5
39008: ARRAY
39009: PUSH
39010: LD_INT 1
39012: ARRAY
39013: PPUSH
39014: LD_EXP 124
39018: PUSH
39019: LD_VAR 0 6
39023: ARRAY
39024: PUSH
39025: LD_VAR 0 5
39029: ARRAY
39030: PUSH
39031: LD_INT 2
39033: ARRAY
39034: PPUSH
39035: LD_VAR 0 1
39039: PPUSH
39040: CALL_OW 255
39044: PPUSH
39045: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39049: LD_ADDR_EXP 124
39053: PUSH
39054: LD_EXP 124
39058: PPUSH
39059: LD_VAR 0 6
39063: PPUSH
39064: LD_EXP 124
39068: PUSH
39069: LD_VAR 0 6
39073: ARRAY
39074: PPUSH
39075: LD_VAR 0 5
39079: PPUSH
39080: CALL_OW 3
39084: PPUSH
39085: CALL_OW 1
39089: ST_TO_ADDR
// end ; end ;
39090: GO 38928
39092: POP
39093: POP
// end ;
39094: LD_VAR 0 4
39098: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39099: LD_INT 0
39101: PPUSH
39102: PPUSH
39103: PPUSH
39104: PPUSH
39105: PPUSH
39106: PPUSH
39107: PPUSH
39108: PPUSH
39109: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39110: LD_VAR 0 1
39114: PPUSH
39115: CALL_OW 264
39119: PUSH
39120: LD_INT 81
39122: EQUAL
39123: NOT
39124: IFTRUE 39139
39126: PUSH
39127: LD_VAR 0 1
39131: PUSH
39132: LD_EXP 123
39136: IN
39137: NOT
39138: OR
39139: IFFALSE 39143
// exit ;
39141: GO 39469
// index := GetElementIndex ( minersList , unit ) ;
39143: LD_ADDR_VAR 0 6
39147: PUSH
39148: LD_EXP 123
39152: PPUSH
39153: LD_VAR 0 1
39157: PPUSH
39158: CALL 45714 0 2
39162: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39163: LD_ADDR_VAR 0 8
39167: PUSH
39168: LD_EXP 125
39172: PUSH
39173: LD_EXP 124
39177: PUSH
39178: LD_VAR 0 6
39182: ARRAY
39183: MINUS
39184: ST_TO_ADDR
// if not minesFreeAmount then
39185: LD_VAR 0 8
39189: NOT
39190: IFFALSE 39194
// exit ;
39192: GO 39469
// tmp := [ ] ;
39194: LD_ADDR_VAR 0 7
39198: PUSH
39199: EMPTY
39200: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39201: LD_ADDR_VAR 0 5
39205: PUSH
39206: DOUBLE
39207: LD_INT 1
39209: DEC
39210: ST_TO_ADDR
39211: LD_VAR 0 8
39215: PUSH
39216: FOR_TO
39217: IFFALSE 39416
// begin _d := rand ( 0 , 5 ) ;
39219: LD_ADDR_VAR 0 11
39223: PUSH
39224: LD_INT 0
39226: PPUSH
39227: LD_INT 5
39229: PPUSH
39230: CALL_OW 12
39234: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39235: LD_ADDR_VAR 0 12
39239: PUSH
39240: LD_INT 2
39242: PPUSH
39243: LD_INT 6
39245: PPUSH
39246: CALL_OW 12
39250: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39251: LD_ADDR_VAR 0 9
39255: PUSH
39256: LD_VAR 0 2
39260: PPUSH
39261: LD_VAR 0 11
39265: PPUSH
39266: LD_VAR 0 12
39270: PPUSH
39271: CALL_OW 272
39275: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39276: LD_ADDR_VAR 0 10
39280: PUSH
39281: LD_VAR 0 3
39285: PPUSH
39286: LD_VAR 0 11
39290: PPUSH
39291: LD_VAR 0 12
39295: PPUSH
39296: CALL_OW 273
39300: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39301: LD_VAR 0 9
39305: PPUSH
39306: LD_VAR 0 10
39310: PPUSH
39311: CALL_OW 488
39315: IFFALSE 39339
39317: PUSH
39318: LD_VAR 0 9
39322: PUSH
39323: LD_VAR 0 10
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_VAR 0 7
39336: IN
39337: NOT
39338: AND
39339: IFFALSE 39358
39341: PUSH
39342: LD_VAR 0 9
39346: PPUSH
39347: LD_VAR 0 10
39351: PPUSH
39352: CALL_OW 458
39356: NOT
39357: AND
39358: IFFALSE 39400
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39360: LD_ADDR_VAR 0 7
39364: PUSH
39365: LD_VAR 0 7
39369: PPUSH
39370: LD_VAR 0 7
39374: PUSH
39375: LD_INT 1
39377: PLUS
39378: PPUSH
39379: LD_VAR 0 9
39383: PUSH
39384: LD_VAR 0 10
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PPUSH
39393: CALL_OW 1
39397: ST_TO_ADDR
39398: GO 39414
// i := i - 1 ;
39400: LD_ADDR_VAR 0 5
39404: PUSH
39405: LD_VAR 0 5
39409: PUSH
39410: LD_INT 1
39412: MINUS
39413: ST_TO_ADDR
// end ;
39414: GO 39216
39416: POP
39417: POP
// for i in tmp do
39418: LD_ADDR_VAR 0 5
39422: PUSH
39423: LD_VAR 0 7
39427: PUSH
39428: FOR_IN
39429: IFFALSE 39467
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39431: LD_VAR 0 1
39435: PPUSH
39436: LD_VAR 0 5
39440: PUSH
39441: LD_INT 1
39443: ARRAY
39444: PPUSH
39445: LD_VAR 0 5
39449: PUSH
39450: LD_INT 2
39452: ARRAY
39453: PPUSH
39454: CALL 38460 0 3
39458: NOT
39459: IFFALSE 39465
// exit ;
39461: POP
39462: POP
39463: GO 39469
39465: GO 39428
39467: POP
39468: POP
// end ;
39469: LD_VAR 0 4
39473: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
39474: LD_INT 0
39476: PPUSH
39477: PPUSH
39478: PPUSH
39479: PPUSH
39480: PPUSH
39481: PPUSH
39482: PPUSH
39483: PPUSH
39484: PPUSH
// if GetClass ( unit ) <> class_sniper then
39485: LD_VAR 0 1
39489: PPUSH
39490: CALL_OW 257
39494: PUSH
39495: LD_INT 5
39497: NONEQUAL
39498: IFFALSE 39502
// exit ;
39500: GO 39972
// dist := 8 ;
39502: LD_ADDR_VAR 0 5
39506: PUSH
39507: LD_INT 8
39509: ST_TO_ADDR
// viewRange := 12 ;
39510: LD_ADDR_VAR 0 8
39514: PUSH
39515: LD_INT 12
39517: ST_TO_ADDR
// side := GetSide ( unit ) ;
39518: LD_ADDR_VAR 0 6
39522: PUSH
39523: LD_VAR 0 1
39527: PPUSH
39528: CALL_OW 255
39532: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39533: LD_INT 61
39535: PPUSH
39536: LD_VAR 0 6
39540: PPUSH
39541: CALL_OW 321
39545: PUSH
39546: LD_INT 2
39548: EQUAL
39549: IFFALSE 39559
// viewRange := 16 ;
39551: LD_ADDR_VAR 0 8
39555: PUSH
39556: LD_INT 16
39558: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39559: LD_VAR 0 1
39563: PPUSH
39564: LD_VAR 0 2
39568: PPUSH
39569: LD_VAR 0 3
39573: PPUSH
39574: CALL_OW 297
39578: PUSH
39579: LD_VAR 0 5
39583: GREATER
39584: IFFALSE 39663
// begin ComMoveXY ( unit , x , y ) ;
39586: LD_VAR 0 1
39590: PPUSH
39591: LD_VAR 0 2
39595: PPUSH
39596: LD_VAR 0 3
39600: PPUSH
39601: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39605: LD_INT 35
39607: PPUSH
39608: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39612: LD_VAR 0 1
39616: PPUSH
39617: LD_VAR 0 2
39621: PPUSH
39622: LD_VAR 0 3
39626: PPUSH
39627: CALL 77770 0 3
39631: NOT
39632: IFFALSE 39636
// exit ;
39634: GO 39972
// until GetDistUnitXY ( unit , x , y ) < dist ;
39636: LD_VAR 0 1
39640: PPUSH
39641: LD_VAR 0 2
39645: PPUSH
39646: LD_VAR 0 3
39650: PPUSH
39651: CALL_OW 297
39655: PUSH
39656: LD_VAR 0 5
39660: LESS
39661: IFFALSE 39605
// end ; ComTurnXY ( unit , x , y ) ;
39663: LD_VAR 0 1
39667: PPUSH
39668: LD_VAR 0 2
39672: PPUSH
39673: LD_VAR 0 3
39677: PPUSH
39678: CALL_OW 118
// repeat if Multiplayer then
39682: LD_OWVAR 4
39686: IFFALSE 39697
// wait ( 35 ) else
39688: LD_INT 35
39690: PPUSH
39691: CALL_OW 67
39695: GO 39704
// wait ( 5 ) ;
39697: LD_INT 5
39699: PPUSH
39700: CALL_OW 67
// _d := GetDir ( unit ) ;
39704: LD_ADDR_VAR 0 11
39708: PUSH
39709: LD_VAR 0 1
39713: PPUSH
39714: CALL_OW 254
39718: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
39719: LD_ADDR_VAR 0 7
39723: PUSH
39724: LD_VAR 0 1
39728: PPUSH
39729: CALL_OW 250
39733: PPUSH
39734: LD_VAR 0 1
39738: PPUSH
39739: CALL_OW 251
39743: PPUSH
39744: LD_VAR 0 2
39748: PPUSH
39749: LD_VAR 0 3
39753: PPUSH
39754: CALL 80406 0 4
39758: ST_TO_ADDR
// until dir = _d ;
39759: LD_VAR 0 7
39763: PUSH
39764: LD_VAR 0 11
39768: EQUAL
39769: IFFALSE 39682
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
39771: LD_ADDR_VAR 0 9
39775: PUSH
39776: LD_VAR 0 1
39780: PPUSH
39781: CALL_OW 250
39785: PPUSH
39786: LD_VAR 0 7
39790: PPUSH
39791: LD_VAR 0 5
39795: PPUSH
39796: CALL_OW 272
39800: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
39801: LD_ADDR_VAR 0 10
39805: PUSH
39806: LD_VAR 0 1
39810: PPUSH
39811: CALL_OW 251
39815: PPUSH
39816: LD_VAR 0 7
39820: PPUSH
39821: LD_VAR 0 5
39825: PPUSH
39826: CALL_OW 273
39830: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39831: LD_VAR 0 9
39835: PPUSH
39836: LD_VAR 0 10
39840: PPUSH
39841: CALL_OW 488
39845: NOT
39846: IFFALSE 39850
// exit ;
39848: GO 39972
// ComAnimCustom ( unit , 1 ) ;
39850: LD_VAR 0 1
39854: PPUSH
39855: LD_INT 1
39857: PPUSH
39858: CALL_OW 592
// p := 0 ;
39862: LD_ADDR_VAR 0 12
39866: PUSH
39867: LD_INT 0
39869: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39870: LD_VAR 0 9
39874: PPUSH
39875: LD_VAR 0 10
39879: PPUSH
39880: LD_VAR 0 6
39884: PPUSH
39885: LD_VAR 0 8
39889: PPUSH
39890: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
39894: LD_INT 35
39896: PPUSH
39897: CALL_OW 67
// p := Inc ( p ) ;
39901: LD_ADDR_VAR 0 12
39905: PUSH
39906: LD_VAR 0 12
39910: PPUSH
39911: CALL 80362 0 1
39915: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
39916: LD_VAR 0 12
39920: PUSH
39921: LD_INT 3
39923: EQUAL
39924: IFTRUE 39938
39926: PUSH
39927: LD_VAR 0 1
39931: PPUSH
39932: CALL_OW 302
39936: NOT
39937: OR
39938: IFTRUE 39951
39940: PUSH
39941: LD_VAR 0 1
39945: PPUSH
39946: CALL_OW 301
39950: OR
39951: IFFALSE 39894
// RemoveSeeing ( _x , _y , side ) ;
39953: LD_VAR 0 9
39957: PPUSH
39958: LD_VAR 0 10
39962: PPUSH
39963: LD_VAR 0 6
39967: PPUSH
39968: CALL_OW 331
// end ;
39972: LD_VAR 0 4
39976: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
39977: LD_INT 0
39979: PPUSH
39980: PPUSH
39981: PPUSH
39982: PPUSH
39983: PPUSH
39984: PPUSH
39985: PPUSH
39986: PPUSH
39987: PPUSH
39988: PPUSH
39989: PPUSH
// if not unit then
39990: LD_VAR 0 1
39994: NOT
39995: IFFALSE 39999
// exit ;
39997: GO 40270
// side := GetSide ( unit ) ;
39999: LD_ADDR_VAR 0 3
40003: PUSH
40004: LD_VAR 0 1
40008: PPUSH
40009: CALL_OW 255
40013: ST_TO_ADDR
// x := GetX ( unit ) ;
40014: LD_ADDR_VAR 0 5
40018: PUSH
40019: LD_VAR 0 1
40023: PPUSH
40024: CALL_OW 250
40028: ST_TO_ADDR
// y := GetY ( unit ) ;
40029: LD_ADDR_VAR 0 6
40033: PUSH
40034: LD_VAR 0 1
40038: PPUSH
40039: CALL_OW 251
40043: ST_TO_ADDR
// r := 8 ;
40044: LD_ADDR_VAR 0 4
40048: PUSH
40049: LD_INT 8
40051: ST_TO_ADDR
// if x - r < 0 then
40052: LD_VAR 0 5
40056: PUSH
40057: LD_VAR 0 4
40061: MINUS
40062: PUSH
40063: LD_INT 0
40065: LESS
40066: IFFALSE 40078
// min_x := 0 else
40068: LD_ADDR_VAR 0 7
40072: PUSH
40073: LD_INT 0
40075: ST_TO_ADDR
40076: GO 40094
// min_x := x - r ;
40078: LD_ADDR_VAR 0 7
40082: PUSH
40083: LD_VAR 0 5
40087: PUSH
40088: LD_VAR 0 4
40092: MINUS
40093: ST_TO_ADDR
// if y - r < 0 then
40094: LD_VAR 0 6
40098: PUSH
40099: LD_VAR 0 4
40103: MINUS
40104: PUSH
40105: LD_INT 0
40107: LESS
40108: IFFALSE 40120
// min_y := 0 else
40110: LD_ADDR_VAR 0 8
40114: PUSH
40115: LD_INT 0
40117: ST_TO_ADDR
40118: GO 40136
// min_y := y - r ;
40120: LD_ADDR_VAR 0 8
40124: PUSH
40125: LD_VAR 0 6
40129: PUSH
40130: LD_VAR 0 4
40134: MINUS
40135: ST_TO_ADDR
// max_x := x + r ;
40136: LD_ADDR_VAR 0 9
40140: PUSH
40141: LD_VAR 0 5
40145: PUSH
40146: LD_VAR 0 4
40150: PLUS
40151: ST_TO_ADDR
// max_y := y + r ;
40152: LD_ADDR_VAR 0 10
40156: PUSH
40157: LD_VAR 0 6
40161: PUSH
40162: LD_VAR 0 4
40166: PLUS
40167: ST_TO_ADDR
// for _x = min_x to max_x do
40168: LD_ADDR_VAR 0 11
40172: PUSH
40173: DOUBLE
40174: LD_VAR 0 7
40178: DEC
40179: ST_TO_ADDR
40180: LD_VAR 0 9
40184: PUSH
40185: FOR_TO
40186: IFFALSE 40268
// for _y = min_y to max_y do
40188: LD_ADDR_VAR 0 12
40192: PUSH
40193: DOUBLE
40194: LD_VAR 0 8
40198: DEC
40199: ST_TO_ADDR
40200: LD_VAR 0 10
40204: PUSH
40205: FOR_TO
40206: IFFALSE 40264
// begin if not ValidHex ( _x , _y ) then
40208: LD_VAR 0 11
40212: PPUSH
40213: LD_VAR 0 12
40217: PPUSH
40218: CALL_OW 488
40222: NOT
40223: IFFALSE 40227
// continue ;
40225: GO 40205
// if MineAtPos ( _x , _y ) then
40227: LD_VAR 0 11
40231: PPUSH
40232: LD_VAR 0 12
40236: PPUSH
40237: CALL_OW 458
40241: IFFALSE 40262
// ViewMineAtPos ( _x , _y , side ) ;
40243: LD_VAR 0 11
40247: PPUSH
40248: LD_VAR 0 12
40252: PPUSH
40253: LD_VAR 0 3
40257: PPUSH
40258: CALL_OW 457
// end ;
40262: GO 40205
40264: POP
40265: POP
40266: GO 40185
40268: POP
40269: POP
// end ;
40270: LD_VAR 0 2
40274: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
40275: LD_INT 0
40277: PPUSH
40278: PPUSH
40279: PPUSH
40280: PPUSH
40281: PPUSH
40282: PPUSH
40283: PPUSH
// if not units then
40284: LD_VAR 0 1
40288: NOT
40289: IFFALSE 40293
// exit ;
40291: GO 40757
// scaners := [ ] ;
40293: LD_ADDR_VAR 0 6
40297: PUSH
40298: EMPTY
40299: ST_TO_ADDR
// for i in units do
40300: LD_ADDR_VAR 0 3
40304: PUSH
40305: LD_VAR 0 1
40309: PUSH
40310: FOR_IN
40311: IFFALSE 40468
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
40313: LD_VAR 0 3
40317: PPUSH
40318: CALL_OW 264
40322: PUSH
40323: LD_INT 11
40325: NONEQUAL
40326: IFTRUE 40340
40328: PUSH
40329: LD_VAR 0 3
40333: PPUSH
40334: CALL_OW 302
40338: NOT
40339: OR
40340: IFTRUE 40357
40342: PUSH
40343: LD_VAR 0 3
40347: PPUSH
40348: CALL_OW 110
40352: PUSH
40353: LD_INT 502
40355: EQUAL
40356: OR
40357: IFFALSE 40361
// continue ;
40359: GO 40310
// ComStop ( i ) ;
40361: LD_VAR 0 3
40365: PPUSH
40366: CALL_OW 141
// x := GetX ( i ) ;
40370: LD_ADDR_VAR 0 4
40374: PUSH
40375: LD_VAR 0 3
40379: PPUSH
40380: CALL_OW 250
40384: ST_TO_ADDR
// y := GetY ( i ) ;
40385: LD_ADDR_VAR 0 5
40389: PUSH
40390: LD_VAR 0 3
40394: PPUSH
40395: CALL_OW 251
40399: ST_TO_ADDR
// if GetSide ( i ) = your_side then
40400: LD_VAR 0 3
40404: PPUSH
40405: CALL_OW 255
40409: PUSH
40410: LD_OWVAR 2
40414: EQUAL
40415: IFFALSE 40434
// PlaySoundXY ( x , y , mineDetector ) ;
40417: LD_VAR 0 4
40421: PPUSH
40422: LD_VAR 0 5
40426: PPUSH
40427: LD_STRING mineDetector
40429: PPUSH
40430: CALL_OW 366
// scaners := Join ( scaners , i ) ;
40434: LD_ADDR_VAR 0 6
40438: PUSH
40439: LD_VAR 0 6
40443: PPUSH
40444: LD_VAR 0 3
40448: PPUSH
40449: CALL 78989 0 2
40453: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
40454: LD_VAR 0 3
40458: PPUSH
40459: LD_INT 502
40461: PPUSH
40462: CALL_OW 109
// end ;
40466: GO 40310
40468: POP
40469: POP
// if not scaners then
40470: LD_VAR 0 6
40474: NOT
40475: IFFALSE 40479
// exit ;
40477: GO 40757
// wait ( 3 ) ;
40479: LD_INT 3
40481: PPUSH
40482: CALL_OW 67
// timer := 6 ;
40486: LD_ADDR_VAR 0 7
40490: PUSH
40491: LD_INT 6
40493: ST_TO_ADDR
// repeat for i in scaners do
40494: LD_ADDR_VAR 0 3
40498: PUSH
40499: LD_VAR 0 6
40503: PUSH
40504: FOR_IN
40505: IFFALSE 40655
// begin side := GetSide ( i ) ;
40507: LD_ADDR_VAR 0 8
40511: PUSH
40512: LD_VAR 0 3
40516: PPUSH
40517: CALL_OW 255
40521: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
40522: LD_VAR 0 3
40526: PPUSH
40527: CALL_OW 302
40531: NOT
40532: IFTRUE 40545
40534: PUSH
40535: LD_VAR 0 3
40539: PPUSH
40540: CALL_OW 314
40544: OR
40545: IFTRUE 40576
40547: PUSH
40548: LD_VAR 0 3
40552: PPUSH
40553: CALL_OW 263
40557: PUSH
40558: LD_INT 1
40560: EQUAL
40561: IFFALSE 40575
40563: PUSH
40564: LD_VAR 0 3
40568: PPUSH
40569: CALL_OW 311
40573: NOT
40574: AND
40575: OR
40576: IFFALSE 40620
// begin SetUnitDisplayNumber ( i , 0 ) ;
40578: LD_VAR 0 3
40582: PPUSH
40583: LD_INT 0
40585: PPUSH
40586: CALL_OW 505
// SetTag ( i , 0 ) ;
40590: LD_VAR 0 3
40594: PPUSH
40595: LD_INT 0
40597: PPUSH
40598: CALL_OW 109
// scaners := scaners diff i ;
40602: LD_ADDR_VAR 0 6
40606: PUSH
40607: LD_VAR 0 6
40611: PUSH
40612: LD_VAR 0 3
40616: DIFF
40617: ST_TO_ADDR
// continue ;
40618: GO 40504
// end ; if side in [ your_side , 9 ] then
40620: LD_VAR 0 8
40624: PUSH
40625: LD_OWVAR 2
40629: PUSH
40630: LD_INT 9
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: IN
40637: IFFALSE 40653
// SetUnitDisplayNumber ( i , timer ) ;
40639: LD_VAR 0 3
40643: PPUSH
40644: LD_VAR 0 7
40648: PPUSH
40649: CALL_OW 505
// end ;
40653: GO 40504
40655: POP
40656: POP
// if not scaners then
40657: LD_VAR 0 6
40661: NOT
40662: IFFALSE 40666
// exit ;
40664: GO 40757
// timer := Dec ( timer ) ;
40666: LD_ADDR_VAR 0 7
40670: PUSH
40671: LD_VAR 0 7
40675: PPUSH
40676: CALL 80384 0 1
40680: ST_TO_ADDR
// wait ( 0 0$1 ) ;
40681: LD_INT 35
40683: PPUSH
40684: CALL_OW 67
// until timer = 0 ;
40688: LD_VAR 0 7
40692: PUSH
40693: LD_INT 0
40695: EQUAL
40696: IFFALSE 40494
// if not scaners then
40698: LD_VAR 0 6
40702: NOT
40703: IFFALSE 40707
// exit ;
40705: GO 40757
// for i in scaners do
40707: LD_ADDR_VAR 0 3
40711: PUSH
40712: LD_VAR 0 6
40716: PUSH
40717: FOR_IN
40718: IFFALSE 40755
// begin SetUnitDisplayNumber ( i , 0 ) ;
40720: LD_VAR 0 3
40724: PPUSH
40725: LD_INT 0
40727: PPUSH
40728: CALL_OW 505
// SetTag ( i , 0 ) ;
40732: LD_VAR 0 3
40736: PPUSH
40737: LD_INT 0
40739: PPUSH
40740: CALL_OW 109
// RevealDetectorMine ( i ) ;
40744: LD_VAR 0 3
40748: PPUSH
40749: CALL 39977 0 1
// end ;
40753: GO 40717
40755: POP
40756: POP
// end ;
40757: LD_VAR 0 2
40761: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
40762: LD_INT 0
40764: PPUSH
// if p1 = mine_detector_mode then
40765: LD_VAR 0 2
40769: PUSH
40770: LD_INT 103
40772: EQUAL
40773: IFFALSE 40784
// DetectMine ( units ) ;
40775: LD_VAR 0 1
40779: PPUSH
40780: CALL 40275 0 1
// end ; end_of_file
40784: LD_VAR 0 7
40788: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40789: LD_INT 0
40791: PPUSH
40792: PPUSH
// if exist_mode then
40793: LD_VAR 0 2
40797: IFFALSE 40843
// begin unit := CreateCharacter ( prefix & ident ) ;
40799: LD_ADDR_VAR 0 5
40803: PUSH
40804: LD_VAR 0 3
40808: PUSH
40809: LD_VAR 0 1
40813: STR
40814: PPUSH
40815: CALL_OW 34
40819: ST_TO_ADDR
// if unit then
40820: LD_VAR 0 5
40824: IFFALSE 40841
// DeleteCharacters ( prefix & ident ) ;
40826: LD_VAR 0 3
40830: PUSH
40831: LD_VAR 0 1
40835: STR
40836: PPUSH
40837: CALL_OW 40
// end else
40841: GO 40858
// unit := NewCharacter ( ident ) ;
40843: LD_ADDR_VAR 0 5
40847: PUSH
40848: LD_VAR 0 1
40852: PPUSH
40853: CALL_OW 25
40857: ST_TO_ADDR
// result := unit ;
40858: LD_ADDR_VAR 0 4
40862: PUSH
40863: LD_VAR 0 5
40867: ST_TO_ADDR
// end ;
40868: LD_VAR 0 4
40872: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
40873: LD_INT 0
40875: PPUSH
40876: PPUSH
// if exist_mode then
40877: LD_VAR 0 2
40881: IFFALSE 40906
// unit := CreateCharacter ( prefix & ident ) else
40883: LD_ADDR_VAR 0 5
40887: PUSH
40888: LD_VAR 0 3
40892: PUSH
40893: LD_VAR 0 1
40897: STR
40898: PPUSH
40899: CALL_OW 34
40903: ST_TO_ADDR
40904: GO 40921
// unit := NewCharacter ( ident ) ;
40906: LD_ADDR_VAR 0 5
40910: PUSH
40911: LD_VAR 0 1
40915: PPUSH
40916: CALL_OW 25
40920: ST_TO_ADDR
// result := unit ;
40921: LD_ADDR_VAR 0 4
40925: PUSH
40926: LD_VAR 0 5
40930: ST_TO_ADDR
// end ;
40931: LD_VAR 0 4
40935: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40936: LD_INT 0
40938: PPUSH
40939: PPUSH
// if not side or not nation then
40940: LD_VAR 0 1
40944: NOT
40945: IFTRUE 40954
40947: PUSH
40948: LD_VAR 0 2
40952: NOT
40953: OR
40954: IFFALSE 40958
// exit ;
40956: GO 41752
// case nation of nation_american :
40958: LD_VAR 0 2
40962: PUSH
40963: LD_INT 1
40965: DOUBLE
40966: EQUAL
40967: IFTRUE 40971
40969: GO 41193
40971: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
40972: LD_ADDR_VAR 0 4
40976: PUSH
40977: LD_INT 35
40979: PUSH
40980: LD_INT 45
40982: PUSH
40983: LD_INT 46
40985: PUSH
40986: LD_INT 47
40988: PUSH
40989: LD_INT 82
40991: PUSH
40992: LD_INT 83
40994: PUSH
40995: LD_INT 84
40997: PUSH
40998: LD_INT 85
41000: PUSH
41001: LD_INT 86
41003: PUSH
41004: LD_INT 1
41006: PUSH
41007: LD_INT 2
41009: PUSH
41010: LD_INT 6
41012: PUSH
41013: LD_INT 15
41015: PUSH
41016: LD_INT 16
41018: PUSH
41019: LD_INT 7
41021: PUSH
41022: LD_INT 12
41024: PUSH
41025: LD_INT 13
41027: PUSH
41028: LD_INT 10
41030: PUSH
41031: LD_INT 14
41033: PUSH
41034: LD_INT 20
41036: PUSH
41037: LD_INT 21
41039: PUSH
41040: LD_INT 22
41042: PUSH
41043: LD_INT 25
41045: PUSH
41046: LD_INT 32
41048: PUSH
41049: LD_INT 27
41051: PUSH
41052: LD_INT 36
41054: PUSH
41055: LD_INT 69
41057: PUSH
41058: LD_INT 39
41060: PUSH
41061: LD_INT 34
41063: PUSH
41064: LD_INT 40
41066: PUSH
41067: LD_INT 48
41069: PUSH
41070: LD_INT 49
41072: PUSH
41073: LD_INT 50
41075: PUSH
41076: LD_INT 51
41078: PUSH
41079: LD_INT 52
41081: PUSH
41082: LD_INT 53
41084: PUSH
41085: LD_INT 54
41087: PUSH
41088: LD_INT 55
41090: PUSH
41091: LD_INT 56
41093: PUSH
41094: LD_INT 57
41096: PUSH
41097: LD_INT 58
41099: PUSH
41100: LD_INT 59
41102: PUSH
41103: LD_INT 60
41105: PUSH
41106: LD_INT 61
41108: PUSH
41109: LD_INT 62
41111: PUSH
41112: LD_INT 80
41114: PUSH
41115: LD_INT 82
41117: PUSH
41118: LD_INT 83
41120: PUSH
41121: LD_INT 84
41123: PUSH
41124: LD_INT 85
41126: PUSH
41127: LD_INT 86
41129: PUSH
41130: LD_INT 90
41132: PUSH
41133: LD_INT 93
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: ST_TO_ADDR
41191: GO 41674
41193: LD_INT 2
41195: DOUBLE
41196: EQUAL
41197: IFTRUE 41201
41199: GO 41435
41201: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
41202: LD_ADDR_VAR 0 4
41206: PUSH
41207: LD_INT 35
41209: PUSH
41210: LD_INT 45
41212: PUSH
41213: LD_INT 46
41215: PUSH
41216: LD_INT 47
41218: PUSH
41219: LD_INT 82
41221: PUSH
41222: LD_INT 83
41224: PUSH
41225: LD_INT 84
41227: PUSH
41228: LD_INT 85
41230: PUSH
41231: LD_INT 87
41233: PUSH
41234: LD_INT 70
41236: PUSH
41237: LD_INT 1
41239: PUSH
41240: LD_INT 11
41242: PUSH
41243: LD_INT 3
41245: PUSH
41246: LD_INT 4
41248: PUSH
41249: LD_INT 5
41251: PUSH
41252: LD_INT 6
41254: PUSH
41255: LD_INT 15
41257: PUSH
41258: LD_INT 18
41260: PUSH
41261: LD_INT 7
41263: PUSH
41264: LD_INT 17
41266: PUSH
41267: LD_INT 8
41269: PUSH
41270: LD_INT 20
41272: PUSH
41273: LD_INT 21
41275: PUSH
41276: LD_INT 22
41278: PUSH
41279: LD_INT 72
41281: PUSH
41282: LD_INT 26
41284: PUSH
41285: LD_INT 69
41287: PUSH
41288: LD_INT 39
41290: PUSH
41291: LD_INT 40
41293: PUSH
41294: LD_INT 41
41296: PUSH
41297: LD_INT 42
41299: PUSH
41300: LD_INT 43
41302: PUSH
41303: LD_INT 48
41305: PUSH
41306: LD_INT 49
41308: PUSH
41309: LD_INT 50
41311: PUSH
41312: LD_INT 51
41314: PUSH
41315: LD_INT 52
41317: PUSH
41318: LD_INT 53
41320: PUSH
41321: LD_INT 54
41323: PUSH
41324: LD_INT 55
41326: PUSH
41327: LD_INT 56
41329: PUSH
41330: LD_INT 60
41332: PUSH
41333: LD_INT 61
41335: PUSH
41336: LD_INT 62
41338: PUSH
41339: LD_INT 66
41341: PUSH
41342: LD_INT 67
41344: PUSH
41345: LD_INT 68
41347: PUSH
41348: LD_INT 81
41350: PUSH
41351: LD_INT 82
41353: PUSH
41354: LD_INT 83
41356: PUSH
41357: LD_INT 84
41359: PUSH
41360: LD_INT 85
41362: PUSH
41363: LD_INT 87
41365: PUSH
41366: LD_INT 88
41368: PUSH
41369: LD_INT 92
41371: PUSH
41372: LD_INT 94
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: ST_TO_ADDR
41433: GO 41674
41435: LD_INT 3
41437: DOUBLE
41438: EQUAL
41439: IFTRUE 41443
41441: GO 41673
41443: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
41444: LD_ADDR_VAR 0 4
41448: PUSH
41449: LD_INT 46
41451: PUSH
41452: LD_INT 47
41454: PUSH
41455: LD_INT 1
41457: PUSH
41458: LD_INT 2
41460: PUSH
41461: LD_INT 82
41463: PUSH
41464: LD_INT 83
41466: PUSH
41467: LD_INT 84
41469: PUSH
41470: LD_INT 85
41472: PUSH
41473: LD_INT 86
41475: PUSH
41476: LD_INT 11
41478: PUSH
41479: LD_INT 9
41481: PUSH
41482: LD_INT 20
41484: PUSH
41485: LD_INT 19
41487: PUSH
41488: LD_INT 21
41490: PUSH
41491: LD_INT 24
41493: PUSH
41494: LD_INT 22
41496: PUSH
41497: LD_INT 25
41499: PUSH
41500: LD_INT 28
41502: PUSH
41503: LD_INT 29
41505: PUSH
41506: LD_INT 30
41508: PUSH
41509: LD_INT 31
41511: PUSH
41512: LD_INT 37
41514: PUSH
41515: LD_INT 38
41517: PUSH
41518: LD_INT 32
41520: PUSH
41521: LD_INT 27
41523: PUSH
41524: LD_INT 33
41526: PUSH
41527: LD_INT 69
41529: PUSH
41530: LD_INT 39
41532: PUSH
41533: LD_INT 34
41535: PUSH
41536: LD_INT 40
41538: PUSH
41539: LD_INT 71
41541: PUSH
41542: LD_INT 23
41544: PUSH
41545: LD_INT 44
41547: PUSH
41548: LD_INT 48
41550: PUSH
41551: LD_INT 49
41553: PUSH
41554: LD_INT 50
41556: PUSH
41557: LD_INT 51
41559: PUSH
41560: LD_INT 52
41562: PUSH
41563: LD_INT 53
41565: PUSH
41566: LD_INT 54
41568: PUSH
41569: LD_INT 55
41571: PUSH
41572: LD_INT 56
41574: PUSH
41575: LD_INT 57
41577: PUSH
41578: LD_INT 58
41580: PUSH
41581: LD_INT 59
41583: PUSH
41584: LD_INT 63
41586: PUSH
41587: LD_INT 64
41589: PUSH
41590: LD_INT 65
41592: PUSH
41593: LD_INT 82
41595: PUSH
41596: LD_INT 83
41598: PUSH
41599: LD_INT 84
41601: PUSH
41602: LD_INT 85
41604: PUSH
41605: LD_INT 86
41607: PUSH
41608: LD_INT 89
41610: PUSH
41611: LD_INT 91
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: ST_TO_ADDR
41671: GO 41674
41673: POP
// if state > - 1 and state < 3 then
41674: LD_VAR 0 3
41678: PUSH
41679: LD_INT 1
41681: NEG
41682: GREATER
41683: IFFALSE 41695
41685: PUSH
41686: LD_VAR 0 3
41690: PUSH
41691: LD_INT 3
41693: LESS
41694: AND
41695: IFFALSE 41752
// for i in result do
41697: LD_ADDR_VAR 0 5
41701: PUSH
41702: LD_VAR 0 4
41706: PUSH
41707: FOR_IN
41708: IFFALSE 41750
// if GetTech ( i , side ) <> state then
41710: LD_VAR 0 5
41714: PPUSH
41715: LD_VAR 0 1
41719: PPUSH
41720: CALL_OW 321
41724: PUSH
41725: LD_VAR 0 3
41729: NONEQUAL
41730: IFFALSE 41748
// result := result diff i ;
41732: LD_ADDR_VAR 0 4
41736: PUSH
41737: LD_VAR 0 4
41741: PUSH
41742: LD_VAR 0 5
41746: DIFF
41747: ST_TO_ADDR
41748: GO 41707
41750: POP
41751: POP
// end ;
41752: LD_VAR 0 4
41756: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41757: LD_INT 0
41759: PPUSH
41760: PPUSH
41761: PPUSH
// result := true ;
41762: LD_ADDR_VAR 0 3
41766: PUSH
41767: LD_INT 1
41769: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41770: LD_ADDR_VAR 0 5
41774: PUSH
41775: LD_VAR 0 2
41779: PPUSH
41780: CALL_OW 480
41784: ST_TO_ADDR
// if not tmp then
41785: LD_VAR 0 5
41789: NOT
41790: IFFALSE 41794
// exit ;
41792: GO 41843
// for i in tmp do
41794: LD_ADDR_VAR 0 4
41798: PUSH
41799: LD_VAR 0 5
41803: PUSH
41804: FOR_IN
41805: IFFALSE 41841
// if GetTech ( i , side ) <> state_researched then
41807: LD_VAR 0 4
41811: PPUSH
41812: LD_VAR 0 1
41816: PPUSH
41817: CALL_OW 321
41821: PUSH
41822: LD_INT 2
41824: NONEQUAL
41825: IFFALSE 41839
// begin result := false ;
41827: LD_ADDR_VAR 0 3
41831: PUSH
41832: LD_INT 0
41834: ST_TO_ADDR
// exit ;
41835: POP
41836: POP
41837: GO 41843
// end ;
41839: GO 41804
41841: POP
41842: POP
// end ;
41843: LD_VAR 0 3
41847: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41848: LD_INT 0
41850: PPUSH
41851: PPUSH
41852: PPUSH
41853: PPUSH
41854: PPUSH
41855: PPUSH
41856: PPUSH
41857: PPUSH
41858: PPUSH
41859: PPUSH
41860: PPUSH
41861: PPUSH
41862: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41863: LD_VAR 0 1
41867: NOT
41868: IFTRUE 41885
41870: PUSH
41871: LD_VAR 0 1
41875: PPUSH
41876: CALL_OW 257
41880: PUSH
41881: LD_INT 9
41883: NONEQUAL
41884: OR
41885: IFFALSE 41889
// exit ;
41887: GO 42468
// side := GetSide ( unit ) ;
41889: LD_ADDR_VAR 0 9
41893: PUSH
41894: LD_VAR 0 1
41898: PPUSH
41899: CALL_OW 255
41903: ST_TO_ADDR
// tech_space := tech_spacanom ;
41904: LD_ADDR_VAR 0 12
41908: PUSH
41909: LD_INT 29
41911: ST_TO_ADDR
// tech_time := tech_taurad ;
41912: LD_ADDR_VAR 0 13
41916: PUSH
41917: LD_INT 28
41919: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41920: LD_ADDR_VAR 0 11
41924: PUSH
41925: LD_VAR 0 1
41929: PPUSH
41930: CALL_OW 310
41934: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41935: LD_VAR 0 11
41939: PPUSH
41940: CALL_OW 247
41944: PUSH
41945: LD_INT 2
41947: EQUAL
41948: IFFALSE 41952
// exit ;
41950: GO 42468
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41952: LD_ADDR_VAR 0 8
41956: PUSH
41957: LD_INT 81
41959: PUSH
41960: LD_VAR 0 9
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 3
41971: PUSH
41972: LD_INT 21
41974: PUSH
41975: LD_INT 3
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PPUSH
41990: CALL_OW 69
41994: ST_TO_ADDR
// if not tmp then
41995: LD_VAR 0 8
41999: NOT
42000: IFFALSE 42004
// exit ;
42002: GO 42468
// if in_unit then
42004: LD_VAR 0 11
42008: IFFALSE 42032
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42010: LD_ADDR_VAR 0 10
42014: PUSH
42015: LD_VAR 0 8
42019: PPUSH
42020: LD_VAR 0 11
42024: PPUSH
42025: CALL_OW 74
42029: ST_TO_ADDR
42030: GO 42052
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42032: LD_ADDR_VAR 0 10
42036: PUSH
42037: LD_VAR 0 8
42041: PPUSH
42042: LD_VAR 0 1
42046: PPUSH
42047: CALL_OW 74
42051: ST_TO_ADDR
// if not enemy then
42052: LD_VAR 0 10
42056: NOT
42057: IFFALSE 42061
// exit ;
42059: GO 42468
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42061: LD_VAR 0 11
42065: IFFALSE 42087
42067: PUSH
42068: LD_VAR 0 11
42072: PPUSH
42073: LD_VAR 0 10
42077: PPUSH
42078: CALL_OW 296
42082: PUSH
42083: LD_INT 13
42085: GREATER
42086: AND
42087: IFTRUE 42109
42089: PUSH
42090: LD_VAR 0 1
42094: PPUSH
42095: LD_VAR 0 10
42099: PPUSH
42100: CALL_OW 296
42104: PUSH
42105: LD_INT 12
42107: GREATER
42108: OR
42109: IFFALSE 42113
// exit ;
42111: GO 42468
// missile := [ 1 ] ;
42113: LD_ADDR_VAR 0 14
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: EMPTY
42122: LIST
42123: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42124: LD_VAR 0 9
42128: PPUSH
42129: LD_VAR 0 12
42133: PPUSH
42134: CALL_OW 325
42138: IFFALSE 42167
// missile := Replace ( missile , missile + 1 , 2 ) ;
42140: LD_ADDR_VAR 0 14
42144: PUSH
42145: LD_VAR 0 14
42149: PPUSH
42150: LD_VAR 0 14
42154: PUSH
42155: LD_INT 1
42157: PLUS
42158: PPUSH
42159: LD_INT 2
42161: PPUSH
42162: CALL_OW 1
42166: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42167: LD_VAR 0 9
42171: PPUSH
42172: LD_VAR 0 13
42176: PPUSH
42177: CALL_OW 325
42181: IFFALSE 42205
42183: PUSH
42184: LD_VAR 0 10
42188: PPUSH
42189: CALL_OW 255
42193: PPUSH
42194: LD_VAR 0 13
42198: PPUSH
42199: CALL_OW 325
42203: NOT
42204: AND
42205: IFFALSE 42234
// missile := Replace ( missile , missile + 1 , 3 ) ;
42207: LD_ADDR_VAR 0 14
42211: PUSH
42212: LD_VAR 0 14
42216: PPUSH
42217: LD_VAR 0 14
42221: PUSH
42222: LD_INT 1
42224: PLUS
42225: PPUSH
42226: LD_INT 3
42228: PPUSH
42229: CALL_OW 1
42233: ST_TO_ADDR
// if missile < 2 then
42234: LD_VAR 0 14
42238: PUSH
42239: LD_INT 2
42241: LESS
42242: IFFALSE 42246
// exit ;
42244: GO 42468
// x := GetX ( enemy ) ;
42246: LD_ADDR_VAR 0 4
42250: PUSH
42251: LD_VAR 0 10
42255: PPUSH
42256: CALL_OW 250
42260: ST_TO_ADDR
// y := GetY ( enemy ) ;
42261: LD_ADDR_VAR 0 5
42265: PUSH
42266: LD_VAR 0 10
42270: PPUSH
42271: CALL_OW 251
42275: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42276: LD_ADDR_VAR 0 6
42280: PUSH
42281: LD_VAR 0 4
42285: PUSH
42286: LD_INT 1
42288: NEG
42289: PPUSH
42290: LD_INT 1
42292: PPUSH
42293: CALL_OW 12
42297: PLUS
42298: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42299: LD_ADDR_VAR 0 7
42303: PUSH
42304: LD_VAR 0 5
42308: PUSH
42309: LD_INT 1
42311: NEG
42312: PPUSH
42313: LD_INT 1
42315: PPUSH
42316: CALL_OW 12
42320: PLUS
42321: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42322: LD_VAR 0 6
42326: PPUSH
42327: LD_VAR 0 7
42331: PPUSH
42332: CALL_OW 488
42336: NOT
42337: IFFALSE 42359
// begin _x := x ;
42339: LD_ADDR_VAR 0 6
42343: PUSH
42344: LD_VAR 0 4
42348: ST_TO_ADDR
// _y := y ;
42349: LD_ADDR_VAR 0 7
42353: PUSH
42354: LD_VAR 0 5
42358: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42359: LD_ADDR_VAR 0 3
42363: PUSH
42364: LD_INT 1
42366: PPUSH
42367: LD_VAR 0 14
42371: PPUSH
42372: CALL_OW 12
42376: ST_TO_ADDR
// case i of 1 :
42377: LD_VAR 0 3
42381: PUSH
42382: LD_INT 1
42384: DOUBLE
42385: EQUAL
42386: IFTRUE 42390
42388: GO 42407
42390: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42391: LD_VAR 0 1
42395: PPUSH
42396: LD_VAR 0 10
42400: PPUSH
42401: CALL_OW 115
42405: GO 42468
42407: LD_INT 2
42409: DOUBLE
42410: EQUAL
42411: IFTRUE 42415
42413: GO 42437
42415: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42416: LD_VAR 0 1
42420: PPUSH
42421: LD_VAR 0 6
42425: PPUSH
42426: LD_VAR 0 7
42430: PPUSH
42431: CALL_OW 153
42435: GO 42468
42437: LD_INT 3
42439: DOUBLE
42440: EQUAL
42441: IFTRUE 42445
42443: GO 42467
42445: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42446: LD_VAR 0 1
42450: PPUSH
42451: LD_VAR 0 6
42455: PPUSH
42456: LD_VAR 0 7
42460: PPUSH
42461: CALL_OW 154
42465: GO 42468
42467: POP
// end ;
42468: LD_VAR 0 2
42472: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42473: LD_INT 0
42475: PPUSH
42476: PPUSH
42477: PPUSH
42478: PPUSH
42479: PPUSH
42480: PPUSH
// if not unit or not building then
42481: LD_VAR 0 1
42485: NOT
42486: IFTRUE 42495
42488: PUSH
42489: LD_VAR 0 2
42493: NOT
42494: OR
42495: IFFALSE 42499
// exit ;
42497: GO 42657
// x := GetX ( building ) ;
42499: LD_ADDR_VAR 0 5
42503: PUSH
42504: LD_VAR 0 2
42508: PPUSH
42509: CALL_OW 250
42513: ST_TO_ADDR
// y := GetY ( building ) ;
42514: LD_ADDR_VAR 0 6
42518: PUSH
42519: LD_VAR 0 2
42523: PPUSH
42524: CALL_OW 251
42528: ST_TO_ADDR
// for i := 0 to 5 do
42529: LD_ADDR_VAR 0 4
42533: PUSH
42534: DOUBLE
42535: LD_INT 0
42537: DEC
42538: ST_TO_ADDR
42539: LD_INT 5
42541: PUSH
42542: FOR_TO
42543: IFFALSE 42655
// begin _x := ShiftX ( x , i , 3 ) ;
42545: LD_ADDR_VAR 0 7
42549: PUSH
42550: LD_VAR 0 5
42554: PPUSH
42555: LD_VAR 0 4
42559: PPUSH
42560: LD_INT 3
42562: PPUSH
42563: CALL_OW 272
42567: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42568: LD_ADDR_VAR 0 8
42572: PUSH
42573: LD_VAR 0 6
42577: PPUSH
42578: LD_VAR 0 4
42582: PPUSH
42583: LD_INT 3
42585: PPUSH
42586: CALL_OW 273
42590: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42591: LD_VAR 0 7
42595: PPUSH
42596: LD_VAR 0 8
42600: PPUSH
42601: CALL_OW 488
42605: NOT
42606: IFFALSE 42610
// continue ;
42608: GO 42542
// if HexInfo ( _x , _y ) = 0 then
42610: LD_VAR 0 7
42614: PPUSH
42615: LD_VAR 0 8
42619: PPUSH
42620: CALL_OW 428
42624: PUSH
42625: LD_INT 0
42627: EQUAL
42628: IFFALSE 42653
// begin ComMoveXY ( unit , _x , _y ) ;
42630: LD_VAR 0 1
42634: PPUSH
42635: LD_VAR 0 7
42639: PPUSH
42640: LD_VAR 0 8
42644: PPUSH
42645: CALL_OW 111
// exit ;
42649: POP
42650: POP
42651: GO 42657
// end ; end ;
42653: GO 42542
42655: POP
42656: POP
// end ;
42657: LD_VAR 0 3
42661: RET
// export function ScanBase ( side , base_area ) ; begin
42662: LD_INT 0
42664: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42665: LD_ADDR_VAR 0 3
42669: PUSH
42670: LD_VAR 0 2
42674: PPUSH
42675: LD_INT 81
42677: PUSH
42678: LD_VAR 0 1
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PPUSH
42687: CALL_OW 70
42691: ST_TO_ADDR
// end ;
42692: LD_VAR 0 3
42696: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42697: LD_INT 0
42699: PPUSH
42700: PPUSH
42701: PPUSH
42702: PPUSH
// result := false ;
42703: LD_ADDR_VAR 0 2
42707: PUSH
42708: LD_INT 0
42710: ST_TO_ADDR
// side := GetSide ( unit ) ;
42711: LD_ADDR_VAR 0 3
42715: PUSH
42716: LD_VAR 0 1
42720: PPUSH
42721: CALL_OW 255
42725: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42726: LD_ADDR_VAR 0 4
42730: PUSH
42731: LD_VAR 0 1
42735: PPUSH
42736: CALL_OW 248
42740: ST_TO_ADDR
// case nat of 1 :
42741: LD_VAR 0 4
42745: PUSH
42746: LD_INT 1
42748: DOUBLE
42749: EQUAL
42750: IFTRUE 42754
42752: GO 42765
42754: POP
// tech := tech_lassight ; 2 :
42755: LD_ADDR_VAR 0 5
42759: PUSH
42760: LD_INT 12
42762: ST_TO_ADDR
42763: GO 42804
42765: LD_INT 2
42767: DOUBLE
42768: EQUAL
42769: IFTRUE 42773
42771: GO 42784
42773: POP
// tech := tech_mortar ; 3 :
42774: LD_ADDR_VAR 0 5
42778: PUSH
42779: LD_INT 41
42781: ST_TO_ADDR
42782: GO 42804
42784: LD_INT 3
42786: DOUBLE
42787: EQUAL
42788: IFTRUE 42792
42790: GO 42803
42792: POP
// tech := tech_bazooka ; end ;
42793: LD_ADDR_VAR 0 5
42797: PUSH
42798: LD_INT 44
42800: ST_TO_ADDR
42801: GO 42804
42803: POP
// if Researched ( side , tech ) then
42804: LD_VAR 0 3
42808: PPUSH
42809: LD_VAR 0 5
42813: PPUSH
42814: CALL_OW 325
42818: IFFALSE 42845
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42820: LD_ADDR_VAR 0 2
42824: PUSH
42825: LD_INT 5
42827: PUSH
42828: LD_INT 8
42830: PUSH
42831: LD_INT 9
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: LIST
42838: PUSH
42839: LD_VAR 0 4
42843: ARRAY
42844: ST_TO_ADDR
// end ;
42845: LD_VAR 0 2
42849: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42850: LD_INT 0
42852: PPUSH
42853: PPUSH
42854: PPUSH
// if not mines then
42855: LD_VAR 0 2
42859: NOT
42860: IFFALSE 42864
// exit ;
42862: GO 43008
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42864: LD_ADDR_VAR 0 5
42868: PUSH
42869: LD_INT 81
42871: PUSH
42872: LD_VAR 0 1
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 3
42883: PUSH
42884: LD_INT 21
42886: PUSH
42887: LD_INT 3
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PPUSH
42902: CALL_OW 69
42906: ST_TO_ADDR
// for i in mines do
42907: LD_ADDR_VAR 0 4
42911: PUSH
42912: LD_VAR 0 2
42916: PUSH
42917: FOR_IN
42918: IFFALSE 43006
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42920: LD_VAR 0 4
42924: PUSH
42925: LD_INT 1
42927: ARRAY
42928: PPUSH
42929: LD_VAR 0 4
42933: PUSH
42934: LD_INT 2
42936: ARRAY
42937: PPUSH
42938: CALL_OW 458
42942: NOT
42943: IFFALSE 42947
// continue ;
42945: GO 42917
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42947: LD_VAR 0 4
42951: PUSH
42952: LD_INT 1
42954: ARRAY
42955: PPUSH
42956: LD_VAR 0 4
42960: PUSH
42961: LD_INT 2
42963: ARRAY
42964: PPUSH
42965: CALL_OW 428
42969: PUSH
42970: LD_VAR 0 5
42974: IN
42975: IFFALSE 43004
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42977: LD_VAR 0 4
42981: PUSH
42982: LD_INT 1
42984: ARRAY
42985: PPUSH
42986: LD_VAR 0 4
42990: PUSH
42991: LD_INT 2
42993: ARRAY
42994: PPUSH
42995: LD_VAR 0 1
42999: PPUSH
43000: CALL_OW 456
// end ;
43004: GO 42917
43006: POP
43007: POP
// end ;
43008: LD_VAR 0 3
43012: RET
// export function Count ( array ) ; begin
43013: LD_INT 0
43015: PPUSH
// result := array + 0 ;
43016: LD_ADDR_VAR 0 2
43020: PUSH
43021: LD_VAR 0 1
43025: PUSH
43026: LD_INT 0
43028: PLUS
43029: ST_TO_ADDR
// end ;
43030: LD_VAR 0 2
43034: RET
// export function IsEmpty ( building ) ; begin
43035: LD_INT 0
43037: PPUSH
// if not building then
43038: LD_VAR 0 1
43042: NOT
43043: IFFALSE 43047
// exit ;
43045: GO 43090
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43047: LD_ADDR_VAR 0 2
43051: PUSH
43052: LD_VAR 0 1
43056: PUSH
43057: LD_INT 22
43059: PUSH
43060: LD_VAR 0 1
43064: PPUSH
43065: CALL_OW 255
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 58
43076: PUSH
43077: EMPTY
43078: LIST
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PPUSH
43084: CALL_OW 69
43088: IN
43089: ST_TO_ADDR
// end ;
43090: LD_VAR 0 2
43094: RET
// export function IsNotFull ( building ) ; var places ; begin
43095: LD_INT 0
43097: PPUSH
43098: PPUSH
// if not building then
43099: LD_VAR 0 1
43103: NOT
43104: IFFALSE 43108
// exit ;
43106: GO 43136
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
43108: LD_ADDR_VAR 0 2
43112: PUSH
43113: LD_VAR 0 1
43117: PPUSH
43118: LD_INT 3
43120: PUSH
43121: LD_INT 62
43123: PUSH
43124: EMPTY
43125: LIST
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PPUSH
43131: CALL_OW 72
43135: ST_TO_ADDR
// end ;
43136: LD_VAR 0 2
43140: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43141: LD_INT 0
43143: PPUSH
43144: PPUSH
43145: PPUSH
43146: PPUSH
// tmp := [ ] ;
43147: LD_ADDR_VAR 0 3
43151: PUSH
43152: EMPTY
43153: ST_TO_ADDR
// list := [ ] ;
43154: LD_ADDR_VAR 0 5
43158: PUSH
43159: EMPTY
43160: ST_TO_ADDR
// for i = 16 to 25 do
43161: LD_ADDR_VAR 0 4
43165: PUSH
43166: DOUBLE
43167: LD_INT 16
43169: DEC
43170: ST_TO_ADDR
43171: LD_INT 25
43173: PUSH
43174: FOR_TO
43175: IFFALSE 43248
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43177: LD_ADDR_VAR 0 3
43181: PUSH
43182: LD_VAR 0 3
43186: PUSH
43187: LD_INT 22
43189: PUSH
43190: LD_VAR 0 1
43194: PPUSH
43195: CALL_OW 255
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 91
43206: PUSH
43207: LD_VAR 0 1
43211: PUSH
43212: LD_INT 6
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 30
43222: PUSH
43223: LD_VAR 0 4
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: LIST
43236: PUSH
43237: EMPTY
43238: LIST
43239: PPUSH
43240: CALL_OW 69
43244: ADD
43245: ST_TO_ADDR
43246: GO 43174
43248: POP
43249: POP
// for i = 1 to tmp do
43250: LD_ADDR_VAR 0 4
43254: PUSH
43255: DOUBLE
43256: LD_INT 1
43258: DEC
43259: ST_TO_ADDR
43260: LD_VAR 0 3
43264: PUSH
43265: FOR_TO
43266: IFFALSE 43354
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43268: LD_ADDR_VAR 0 5
43272: PUSH
43273: LD_VAR 0 5
43277: PUSH
43278: LD_VAR 0 3
43282: PUSH
43283: LD_VAR 0 4
43287: ARRAY
43288: PPUSH
43289: CALL_OW 266
43293: PUSH
43294: LD_VAR 0 3
43298: PUSH
43299: LD_VAR 0 4
43303: ARRAY
43304: PPUSH
43305: CALL_OW 250
43309: PUSH
43310: LD_VAR 0 3
43314: PUSH
43315: LD_VAR 0 4
43319: ARRAY
43320: PPUSH
43321: CALL_OW 251
43325: PUSH
43326: LD_VAR 0 3
43330: PUSH
43331: LD_VAR 0 4
43335: ARRAY
43336: PPUSH
43337: CALL_OW 254
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: PUSH
43348: EMPTY
43349: LIST
43350: ADD
43351: ST_TO_ADDR
43352: GO 43265
43354: POP
43355: POP
// result := list ;
43356: LD_ADDR_VAR 0 2
43360: PUSH
43361: LD_VAR 0 5
43365: ST_TO_ADDR
// end ;
43366: LD_VAR 0 2
43370: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43371: LD_INT 0
43373: PPUSH
43374: PPUSH
43375: PPUSH
43376: PPUSH
43377: PPUSH
43378: PPUSH
43379: PPUSH
// if not factory then
43380: LD_VAR 0 1
43384: NOT
43385: IFFALSE 43389
// exit ;
43387: GO 43992
// if control = control_apeman then
43389: LD_VAR 0 4
43393: PUSH
43394: LD_INT 5
43396: EQUAL
43397: IFFALSE 43506
// begin tmp := UnitsInside ( factory ) ;
43399: LD_ADDR_VAR 0 8
43403: PUSH
43404: LD_VAR 0 1
43408: PPUSH
43409: CALL_OW 313
43413: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43414: LD_VAR 0 8
43418: PPUSH
43419: LD_INT 25
43421: PUSH
43422: LD_INT 12
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PPUSH
43429: CALL_OW 72
43433: NOT
43434: IFFALSE 43444
// control := control_manual ;
43436: LD_ADDR_VAR 0 4
43440: PUSH
43441: LD_INT 1
43443: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43444: LD_ADDR_VAR 0 8
43448: PUSH
43449: LD_VAR 0 1
43453: PPUSH
43454: CALL 43141 0 1
43458: ST_TO_ADDR
// if tmp then
43459: LD_VAR 0 8
43463: IFFALSE 43506
// begin for i in tmp do
43465: LD_ADDR_VAR 0 7
43469: PUSH
43470: LD_VAR 0 8
43474: PUSH
43475: FOR_IN
43476: IFFALSE 43504
// if i [ 1 ] = b_ext_radio then
43478: LD_VAR 0 7
43482: PUSH
43483: LD_INT 1
43485: ARRAY
43486: PUSH
43487: LD_INT 22
43489: EQUAL
43490: IFFALSE 43502
// begin control := control_remote ;
43492: LD_ADDR_VAR 0 4
43496: PUSH
43497: LD_INT 2
43499: ST_TO_ADDR
// break ;
43500: GO 43504
// end ;
43502: GO 43475
43504: POP
43505: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43506: LD_VAR 0 1
43510: PPUSH
43511: LD_VAR 0 2
43515: PPUSH
43516: LD_VAR 0 3
43520: PPUSH
43521: LD_VAR 0 4
43525: PPUSH
43526: LD_VAR 0 5
43530: PPUSH
43531: CALL_OW 448
43535: IFFALSE 43570
// begin result := [ chassis , engine , control , weapon ] ;
43537: LD_ADDR_VAR 0 6
43541: PUSH
43542: LD_VAR 0 2
43546: PUSH
43547: LD_VAR 0 3
43551: PUSH
43552: LD_VAR 0 4
43556: PUSH
43557: LD_VAR 0 5
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: ST_TO_ADDR
// exit ;
43568: GO 43992
// end ; _chassis := AvailableChassisList ( factory ) ;
43570: LD_ADDR_VAR 0 9
43574: PUSH
43575: LD_VAR 0 1
43579: PPUSH
43580: CALL_OW 475
43584: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43585: LD_ADDR_VAR 0 11
43589: PUSH
43590: LD_VAR 0 1
43594: PPUSH
43595: CALL_OW 476
43599: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43600: LD_ADDR_VAR 0 12
43604: PUSH
43605: LD_VAR 0 1
43609: PPUSH
43610: CALL_OW 477
43614: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43615: LD_ADDR_VAR 0 10
43619: PUSH
43620: LD_VAR 0 1
43624: PPUSH
43625: CALL_OW 478
43629: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43630: LD_VAR 0 9
43634: NOT
43635: IFTRUE 43644
43637: PUSH
43638: LD_VAR 0 11
43642: NOT
43643: OR
43644: IFTRUE 43653
43646: PUSH
43647: LD_VAR 0 12
43651: NOT
43652: OR
43653: IFTRUE 43662
43655: PUSH
43656: LD_VAR 0 10
43660: NOT
43661: OR
43662: IFFALSE 43697
// begin result := [ chassis , engine , control , weapon ] ;
43664: LD_ADDR_VAR 0 6
43668: PUSH
43669: LD_VAR 0 2
43673: PUSH
43674: LD_VAR 0 3
43678: PUSH
43679: LD_VAR 0 4
43683: PUSH
43684: LD_VAR 0 5
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: ST_TO_ADDR
// exit ;
43695: GO 43992
// end ; if not chassis in _chassis then
43697: LD_VAR 0 2
43701: PUSH
43702: LD_VAR 0 9
43706: IN
43707: NOT
43708: IFFALSE 43734
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43710: LD_ADDR_VAR 0 2
43714: PUSH
43715: LD_VAR 0 9
43719: PUSH
43720: LD_INT 1
43722: PPUSH
43723: LD_VAR 0 9
43727: PPUSH
43728: CALL_OW 12
43732: ARRAY
43733: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43734: LD_VAR 0 2
43738: PPUSH
43739: LD_VAR 0 3
43743: PPUSH
43744: CALL 43997 0 2
43748: NOT
43749: IFFALSE 43810
// repeat engine := _engine [ 1 ] ;
43751: LD_ADDR_VAR 0 3
43755: PUSH
43756: LD_VAR 0 11
43760: PUSH
43761: LD_INT 1
43763: ARRAY
43764: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43765: LD_ADDR_VAR 0 11
43769: PUSH
43770: LD_VAR 0 11
43774: PPUSH
43775: LD_INT 1
43777: PPUSH
43778: CALL_OW 3
43782: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43783: LD_VAR 0 2
43787: PPUSH
43788: LD_VAR 0 3
43792: PPUSH
43793: CALL 43997 0 2
43797: IFTRUE 43808
43799: PUSH
43800: LD_VAR 0 11
43804: PUSH
43805: EMPTY
43806: EQUAL
43807: OR
43808: IFFALSE 43751
// if not control in _control then
43810: LD_VAR 0 4
43814: PUSH
43815: LD_VAR 0 12
43819: IN
43820: NOT
43821: IFFALSE 43847
// control := _control [ rand ( 1 , _control ) ] ;
43823: LD_ADDR_VAR 0 4
43827: PUSH
43828: LD_VAR 0 12
43832: PUSH
43833: LD_INT 1
43835: PPUSH
43836: LD_VAR 0 12
43840: PPUSH
43841: CALL_OW 12
43845: ARRAY
43846: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43847: LD_VAR 0 2
43851: PPUSH
43852: LD_VAR 0 5
43856: PPUSH
43857: CALL 44219 0 2
43861: NOT
43862: IFFALSE 43923
// repeat weapon := _weapon [ 1 ] ;
43864: LD_ADDR_VAR 0 5
43868: PUSH
43869: LD_VAR 0 10
43873: PUSH
43874: LD_INT 1
43876: ARRAY
43877: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43878: LD_ADDR_VAR 0 10
43882: PUSH
43883: LD_VAR 0 10
43887: PPUSH
43888: LD_INT 1
43890: PPUSH
43891: CALL_OW 3
43895: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43896: LD_VAR 0 2
43900: PPUSH
43901: LD_VAR 0 5
43905: PPUSH
43906: CALL 44219 0 2
43910: IFTRUE 43921
43912: PUSH
43913: LD_VAR 0 10
43917: PUSH
43918: EMPTY
43919: EQUAL
43920: OR
43921: IFFALSE 43864
// result := [ ] ;
43923: LD_ADDR_VAR 0 6
43927: PUSH
43928: EMPTY
43929: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43930: LD_VAR 0 1
43934: PPUSH
43935: LD_VAR 0 2
43939: PPUSH
43940: LD_VAR 0 3
43944: PPUSH
43945: LD_VAR 0 4
43949: PPUSH
43950: LD_VAR 0 5
43954: PPUSH
43955: CALL_OW 448
43959: IFFALSE 43992
// result := [ chassis , engine , control , weapon ] ;
43961: LD_ADDR_VAR 0 6
43965: PUSH
43966: LD_VAR 0 2
43970: PUSH
43971: LD_VAR 0 3
43975: PUSH
43976: LD_VAR 0 4
43980: PUSH
43981: LD_VAR 0 5
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: ST_TO_ADDR
// end ;
43992: LD_VAR 0 6
43996: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43997: LD_INT 0
43999: PPUSH
// if not chassis or not engine then
44000: LD_VAR 0 1
44004: NOT
44005: IFTRUE 44014
44007: PUSH
44008: LD_VAR 0 2
44012: NOT
44013: OR
44014: IFFALSE 44018
// exit ;
44016: GO 44214
// case engine of engine_solar :
44018: LD_VAR 0 2
44022: PUSH
44023: LD_INT 2
44025: DOUBLE
44026: EQUAL
44027: IFTRUE 44031
44029: GO 44069
44031: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44032: LD_ADDR_VAR 0 3
44036: PUSH
44037: LD_INT 11
44039: PUSH
44040: LD_INT 12
44042: PUSH
44043: LD_INT 13
44045: PUSH
44046: LD_INT 14
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: LD_INT 2
44054: PUSH
44055: LD_INT 3
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: ST_TO_ADDR
44067: GO 44198
44069: LD_INT 1
44071: DOUBLE
44072: EQUAL
44073: IFTRUE 44077
44075: GO 44139
44077: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44078: LD_ADDR_VAR 0 3
44082: PUSH
44083: LD_INT 11
44085: PUSH
44086: LD_INT 12
44088: PUSH
44089: LD_INT 13
44091: PUSH
44092: LD_INT 14
44094: PUSH
44095: LD_INT 1
44097: PUSH
44098: LD_INT 2
44100: PUSH
44101: LD_INT 3
44103: PUSH
44104: LD_INT 4
44106: PUSH
44107: LD_INT 5
44109: PUSH
44110: LD_INT 21
44112: PUSH
44113: LD_INT 23
44115: PUSH
44116: LD_INT 22
44118: PUSH
44119: LD_INT 24
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: ST_TO_ADDR
44137: GO 44198
44139: LD_INT 3
44141: DOUBLE
44142: EQUAL
44143: IFTRUE 44147
44145: GO 44197
44147: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44148: LD_ADDR_VAR 0 3
44152: PUSH
44153: LD_INT 13
44155: PUSH
44156: LD_INT 14
44158: PUSH
44159: LD_INT 2
44161: PUSH
44162: LD_INT 3
44164: PUSH
44165: LD_INT 4
44167: PUSH
44168: LD_INT 5
44170: PUSH
44171: LD_INT 21
44173: PUSH
44174: LD_INT 22
44176: PUSH
44177: LD_INT 23
44179: PUSH
44180: LD_INT 24
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: ST_TO_ADDR
44195: GO 44198
44197: POP
// result := ( chassis in result ) ;
44198: LD_ADDR_VAR 0 3
44202: PUSH
44203: LD_VAR 0 1
44207: PUSH
44208: LD_VAR 0 3
44212: IN
44213: ST_TO_ADDR
// end ;
44214: LD_VAR 0 3
44218: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44219: LD_INT 0
44221: PPUSH
// if not chassis or not weapon then
44222: LD_VAR 0 1
44226: NOT
44227: IFTRUE 44236
44229: PUSH
44230: LD_VAR 0 2
44234: NOT
44235: OR
44236: IFFALSE 44240
// exit ;
44238: GO 45334
// case weapon of us_machine_gun :
44240: LD_VAR 0 2
44244: PUSH
44245: LD_INT 2
44247: DOUBLE
44248: EQUAL
44249: IFTRUE 44253
44251: GO 44283
44253: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44254: LD_ADDR_VAR 0 3
44258: PUSH
44259: LD_INT 1
44261: PUSH
44262: LD_INT 2
44264: PUSH
44265: LD_INT 3
44267: PUSH
44268: LD_INT 4
44270: PUSH
44271: LD_INT 5
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: ST_TO_ADDR
44281: GO 45318
44283: LD_INT 3
44285: DOUBLE
44286: EQUAL
44287: IFTRUE 44291
44289: GO 44321
44291: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44292: LD_ADDR_VAR 0 3
44296: PUSH
44297: LD_INT 1
44299: PUSH
44300: LD_INT 2
44302: PUSH
44303: LD_INT 3
44305: PUSH
44306: LD_INT 4
44308: PUSH
44309: LD_INT 5
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: ST_TO_ADDR
44319: GO 45318
44321: LD_INT 11
44323: DOUBLE
44324: EQUAL
44325: IFTRUE 44329
44327: GO 44359
44329: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44330: LD_ADDR_VAR 0 3
44334: PUSH
44335: LD_INT 1
44337: PUSH
44338: LD_INT 2
44340: PUSH
44341: LD_INT 3
44343: PUSH
44344: LD_INT 4
44346: PUSH
44347: LD_INT 5
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: ST_TO_ADDR
44357: GO 45318
44359: LD_INT 4
44361: DOUBLE
44362: EQUAL
44363: IFTRUE 44367
44365: GO 44393
44367: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44368: LD_ADDR_VAR 0 3
44372: PUSH
44373: LD_INT 2
44375: PUSH
44376: LD_INT 3
44378: PUSH
44379: LD_INT 4
44381: PUSH
44382: LD_INT 5
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: ST_TO_ADDR
44391: GO 45318
44393: LD_INT 5
44395: DOUBLE
44396: EQUAL
44397: IFTRUE 44401
44399: GO 44427
44401: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44402: LD_ADDR_VAR 0 3
44406: PUSH
44407: LD_INT 2
44409: PUSH
44410: LD_INT 3
44412: PUSH
44413: LD_INT 4
44415: PUSH
44416: LD_INT 5
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: ST_TO_ADDR
44425: GO 45318
44427: LD_INT 9
44429: DOUBLE
44430: EQUAL
44431: IFTRUE 44435
44433: GO 44461
44435: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44436: LD_ADDR_VAR 0 3
44440: PUSH
44441: LD_INT 2
44443: PUSH
44444: LD_INT 3
44446: PUSH
44447: LD_INT 4
44449: PUSH
44450: LD_INT 5
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: ST_TO_ADDR
44459: GO 45318
44461: LD_INT 7
44463: DOUBLE
44464: EQUAL
44465: IFTRUE 44469
44467: GO 44495
44469: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44470: LD_ADDR_VAR 0 3
44474: PUSH
44475: LD_INT 2
44477: PUSH
44478: LD_INT 3
44480: PUSH
44481: LD_INT 4
44483: PUSH
44484: LD_INT 5
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: ST_TO_ADDR
44493: GO 45318
44495: LD_INT 12
44497: DOUBLE
44498: EQUAL
44499: IFTRUE 44503
44501: GO 44529
44503: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44504: LD_ADDR_VAR 0 3
44508: PUSH
44509: LD_INT 2
44511: PUSH
44512: LD_INT 3
44514: PUSH
44515: LD_INT 4
44517: PUSH
44518: LD_INT 5
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: ST_TO_ADDR
44527: GO 45318
44529: LD_INT 13
44531: DOUBLE
44532: EQUAL
44533: IFTRUE 44537
44535: GO 44563
44537: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44538: LD_ADDR_VAR 0 3
44542: PUSH
44543: LD_INT 2
44545: PUSH
44546: LD_INT 3
44548: PUSH
44549: LD_INT 4
44551: PUSH
44552: LD_INT 5
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: ST_TO_ADDR
44561: GO 45318
44563: LD_INT 14
44565: DOUBLE
44566: EQUAL
44567: IFTRUE 44571
44569: GO 44589
44571: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44572: LD_ADDR_VAR 0 3
44576: PUSH
44577: LD_INT 4
44579: PUSH
44580: LD_INT 5
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: ST_TO_ADDR
44587: GO 45318
44589: LD_INT 6
44591: DOUBLE
44592: EQUAL
44593: IFTRUE 44597
44595: GO 44615
44597: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44598: LD_ADDR_VAR 0 3
44602: PUSH
44603: LD_INT 4
44605: PUSH
44606: LD_INT 5
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: ST_TO_ADDR
44613: GO 45318
44615: LD_INT 10
44617: DOUBLE
44618: EQUAL
44619: IFTRUE 44623
44621: GO 44641
44623: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44624: LD_ADDR_VAR 0 3
44628: PUSH
44629: LD_INT 4
44631: PUSH
44632: LD_INT 5
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: ST_TO_ADDR
44639: GO 45318
44641: LD_INT 22
44643: DOUBLE
44644: EQUAL
44645: IFTRUE 44649
44647: GO 44675
44649: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44650: LD_ADDR_VAR 0 3
44654: PUSH
44655: LD_INT 11
44657: PUSH
44658: LD_INT 12
44660: PUSH
44661: LD_INT 13
44663: PUSH
44664: LD_INT 14
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: ST_TO_ADDR
44673: GO 45318
44675: LD_INT 23
44677: DOUBLE
44678: EQUAL
44679: IFTRUE 44683
44681: GO 44709
44683: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44684: LD_ADDR_VAR 0 3
44688: PUSH
44689: LD_INT 11
44691: PUSH
44692: LD_INT 12
44694: PUSH
44695: LD_INT 13
44697: PUSH
44698: LD_INT 14
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: ST_TO_ADDR
44707: GO 45318
44709: LD_INT 24
44711: DOUBLE
44712: EQUAL
44713: IFTRUE 44717
44715: GO 44743
44717: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44718: LD_ADDR_VAR 0 3
44722: PUSH
44723: LD_INT 11
44725: PUSH
44726: LD_INT 12
44728: PUSH
44729: LD_INT 13
44731: PUSH
44732: LD_INT 14
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: ST_TO_ADDR
44741: GO 45318
44743: LD_INT 30
44745: DOUBLE
44746: EQUAL
44747: IFTRUE 44751
44749: GO 44777
44751: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44752: LD_ADDR_VAR 0 3
44756: PUSH
44757: LD_INT 11
44759: PUSH
44760: LD_INT 12
44762: PUSH
44763: LD_INT 13
44765: PUSH
44766: LD_INT 14
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: ST_TO_ADDR
44775: GO 45318
44777: LD_INT 25
44779: DOUBLE
44780: EQUAL
44781: IFTRUE 44785
44783: GO 44803
44785: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44786: LD_ADDR_VAR 0 3
44790: PUSH
44791: LD_INT 13
44793: PUSH
44794: LD_INT 14
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: ST_TO_ADDR
44801: GO 45318
44803: LD_INT 27
44805: DOUBLE
44806: EQUAL
44807: IFTRUE 44811
44809: GO 44829
44811: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44812: LD_ADDR_VAR 0 3
44816: PUSH
44817: LD_INT 13
44819: PUSH
44820: LD_INT 14
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: ST_TO_ADDR
44827: GO 45318
44829: LD_INT 92
44831: DOUBLE
44832: EQUAL
44833: IFTRUE 44837
44835: GO 44863
44837: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44838: LD_ADDR_VAR 0 3
44842: PUSH
44843: LD_INT 11
44845: PUSH
44846: LD_INT 12
44848: PUSH
44849: LD_INT 13
44851: PUSH
44852: LD_INT 14
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: ST_TO_ADDR
44861: GO 45318
44863: LD_INT 28
44865: DOUBLE
44866: EQUAL
44867: IFTRUE 44871
44869: GO 44889
44871: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44872: LD_ADDR_VAR 0 3
44876: PUSH
44877: LD_INT 13
44879: PUSH
44880: LD_INT 14
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: ST_TO_ADDR
44887: GO 45318
44889: LD_INT 29
44891: DOUBLE
44892: EQUAL
44893: IFTRUE 44897
44895: GO 44915
44897: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44898: LD_ADDR_VAR 0 3
44902: PUSH
44903: LD_INT 13
44905: PUSH
44906: LD_INT 14
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: ST_TO_ADDR
44913: GO 45318
44915: LD_INT 31
44917: DOUBLE
44918: EQUAL
44919: IFTRUE 44923
44921: GO 44941
44923: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44924: LD_ADDR_VAR 0 3
44928: PUSH
44929: LD_INT 13
44931: PUSH
44932: LD_INT 14
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: ST_TO_ADDR
44939: GO 45318
44941: LD_INT 26
44943: DOUBLE
44944: EQUAL
44945: IFTRUE 44949
44947: GO 44967
44949: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44950: LD_ADDR_VAR 0 3
44954: PUSH
44955: LD_INT 13
44957: PUSH
44958: LD_INT 14
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: ST_TO_ADDR
44965: GO 45318
44967: LD_INT 42
44969: DOUBLE
44970: EQUAL
44971: IFTRUE 44975
44973: GO 45001
44975: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44976: LD_ADDR_VAR 0 3
44980: PUSH
44981: LD_INT 21
44983: PUSH
44984: LD_INT 22
44986: PUSH
44987: LD_INT 23
44989: PUSH
44990: LD_INT 24
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: ST_TO_ADDR
44999: GO 45318
45001: LD_INT 43
45003: DOUBLE
45004: EQUAL
45005: IFTRUE 45009
45007: GO 45035
45009: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45010: LD_ADDR_VAR 0 3
45014: PUSH
45015: LD_INT 21
45017: PUSH
45018: LD_INT 22
45020: PUSH
45021: LD_INT 23
45023: PUSH
45024: LD_INT 24
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: ST_TO_ADDR
45033: GO 45318
45035: LD_INT 44
45037: DOUBLE
45038: EQUAL
45039: IFTRUE 45043
45041: GO 45069
45043: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45044: LD_ADDR_VAR 0 3
45048: PUSH
45049: LD_INT 21
45051: PUSH
45052: LD_INT 22
45054: PUSH
45055: LD_INT 23
45057: PUSH
45058: LD_INT 24
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: ST_TO_ADDR
45067: GO 45318
45069: LD_INT 45
45071: DOUBLE
45072: EQUAL
45073: IFTRUE 45077
45075: GO 45103
45077: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45078: LD_ADDR_VAR 0 3
45082: PUSH
45083: LD_INT 21
45085: PUSH
45086: LD_INT 22
45088: PUSH
45089: LD_INT 23
45091: PUSH
45092: LD_INT 24
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: ST_TO_ADDR
45101: GO 45318
45103: LD_INT 49
45105: DOUBLE
45106: EQUAL
45107: IFTRUE 45111
45109: GO 45137
45111: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45112: LD_ADDR_VAR 0 3
45116: PUSH
45117: LD_INT 21
45119: PUSH
45120: LD_INT 22
45122: PUSH
45123: LD_INT 23
45125: PUSH
45126: LD_INT 24
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: ST_TO_ADDR
45135: GO 45318
45137: LD_INT 51
45139: DOUBLE
45140: EQUAL
45141: IFTRUE 45145
45143: GO 45171
45145: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45146: LD_ADDR_VAR 0 3
45150: PUSH
45151: LD_INT 21
45153: PUSH
45154: LD_INT 22
45156: PUSH
45157: LD_INT 23
45159: PUSH
45160: LD_INT 24
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: ST_TO_ADDR
45169: GO 45318
45171: LD_INT 52
45173: DOUBLE
45174: EQUAL
45175: IFTRUE 45179
45177: GO 45205
45179: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45180: LD_ADDR_VAR 0 3
45184: PUSH
45185: LD_INT 21
45187: PUSH
45188: LD_INT 22
45190: PUSH
45191: LD_INT 23
45193: PUSH
45194: LD_INT 24
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: ST_TO_ADDR
45203: GO 45318
45205: LD_INT 53
45207: DOUBLE
45208: EQUAL
45209: IFTRUE 45213
45211: GO 45231
45213: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45214: LD_ADDR_VAR 0 3
45218: PUSH
45219: LD_INT 23
45221: PUSH
45222: LD_INT 24
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: ST_TO_ADDR
45229: GO 45318
45231: LD_INT 46
45233: DOUBLE
45234: EQUAL
45235: IFTRUE 45239
45237: GO 45257
45239: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45240: LD_ADDR_VAR 0 3
45244: PUSH
45245: LD_INT 23
45247: PUSH
45248: LD_INT 24
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: ST_TO_ADDR
45255: GO 45318
45257: LD_INT 47
45259: DOUBLE
45260: EQUAL
45261: IFTRUE 45265
45263: GO 45283
45265: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
45266: LD_ADDR_VAR 0 3
45270: PUSH
45271: LD_INT 23
45273: PUSH
45274: LD_INT 24
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: ST_TO_ADDR
45281: GO 45318
45283: LD_INT 98
45285: DOUBLE
45286: EQUAL
45287: IFTRUE 45291
45289: GO 45317
45291: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45292: LD_ADDR_VAR 0 3
45296: PUSH
45297: LD_INT 21
45299: PUSH
45300: LD_INT 22
45302: PUSH
45303: LD_INT 23
45305: PUSH
45306: LD_INT 24
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: ST_TO_ADDR
45315: GO 45318
45317: POP
// result := ( chassis in result ) ;
45318: LD_ADDR_VAR 0 3
45322: PUSH
45323: LD_VAR 0 1
45327: PUSH
45328: LD_VAR 0 3
45332: IN
45333: ST_TO_ADDR
// end ;
45334: LD_VAR 0 3
45338: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45339: LD_INT 0
45341: PPUSH
45342: PPUSH
45343: PPUSH
45344: PPUSH
45345: PPUSH
45346: PPUSH
45347: PPUSH
// result := array ;
45348: LD_ADDR_VAR 0 5
45352: PUSH
45353: LD_VAR 0 1
45357: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45358: LD_VAR 0 1
45362: NOT
45363: IFTRUE 45372
45365: PUSH
45366: LD_VAR 0 2
45370: NOT
45371: OR
45372: IFTRUE 45381
45374: PUSH
45375: LD_VAR 0 3
45379: NOT
45380: OR
45381: IFTRUE 45395
45383: PUSH
45384: LD_VAR 0 2
45388: PUSH
45389: LD_VAR 0 1
45393: GREATER
45394: OR
45395: IFTRUE 45409
45397: PUSH
45398: LD_VAR 0 3
45402: PUSH
45403: LD_VAR 0 1
45407: GREATER
45408: OR
45409: IFFALSE 45413
// exit ;
45411: GO 45709
// if direction then
45413: LD_VAR 0 4
45417: IFFALSE 45481
// begin d := 1 ;
45419: LD_ADDR_VAR 0 9
45423: PUSH
45424: LD_INT 1
45426: ST_TO_ADDR
// if i_from > i_to then
45427: LD_VAR 0 2
45431: PUSH
45432: LD_VAR 0 3
45436: GREATER
45437: IFFALSE 45463
// length := ( array - i_from ) + i_to else
45439: LD_ADDR_VAR 0 11
45443: PUSH
45444: LD_VAR 0 1
45448: PUSH
45449: LD_VAR 0 2
45453: MINUS
45454: PUSH
45455: LD_VAR 0 3
45459: PLUS
45460: ST_TO_ADDR
45461: GO 45479
// length := i_to - i_from ;
45463: LD_ADDR_VAR 0 11
45467: PUSH
45468: LD_VAR 0 3
45472: PUSH
45473: LD_VAR 0 2
45477: MINUS
45478: ST_TO_ADDR
// end else
45479: GO 45542
// begin d := - 1 ;
45481: LD_ADDR_VAR 0 9
45485: PUSH
45486: LD_INT 1
45488: NEG
45489: ST_TO_ADDR
// if i_from > i_to then
45490: LD_VAR 0 2
45494: PUSH
45495: LD_VAR 0 3
45499: GREATER
45500: IFFALSE 45520
// length := i_from - i_to else
45502: LD_ADDR_VAR 0 11
45506: PUSH
45507: LD_VAR 0 2
45511: PUSH
45512: LD_VAR 0 3
45516: MINUS
45517: ST_TO_ADDR
45518: GO 45542
// length := ( array - i_to ) + i_from ;
45520: LD_ADDR_VAR 0 11
45524: PUSH
45525: LD_VAR 0 1
45529: PUSH
45530: LD_VAR 0 3
45534: MINUS
45535: PUSH
45536: LD_VAR 0 2
45540: PLUS
45541: ST_TO_ADDR
// end ; if not length then
45542: LD_VAR 0 11
45546: NOT
45547: IFFALSE 45551
// exit ;
45549: GO 45709
// tmp := array ;
45551: LD_ADDR_VAR 0 10
45555: PUSH
45556: LD_VAR 0 1
45560: ST_TO_ADDR
// for i = 1 to length do
45561: LD_ADDR_VAR 0 6
45565: PUSH
45566: DOUBLE
45567: LD_INT 1
45569: DEC
45570: ST_TO_ADDR
45571: LD_VAR 0 11
45575: PUSH
45576: FOR_TO
45577: IFFALSE 45697
// begin for j = 1 to array do
45579: LD_ADDR_VAR 0 7
45583: PUSH
45584: DOUBLE
45585: LD_INT 1
45587: DEC
45588: ST_TO_ADDR
45589: LD_VAR 0 1
45593: PUSH
45594: FOR_TO
45595: IFFALSE 45683
// begin k := j + d ;
45597: LD_ADDR_VAR 0 8
45601: PUSH
45602: LD_VAR 0 7
45606: PUSH
45607: LD_VAR 0 9
45611: PLUS
45612: ST_TO_ADDR
// if k > array then
45613: LD_VAR 0 8
45617: PUSH
45618: LD_VAR 0 1
45622: GREATER
45623: IFFALSE 45633
// k := 1 ;
45625: LD_ADDR_VAR 0 8
45629: PUSH
45630: LD_INT 1
45632: ST_TO_ADDR
// if not k then
45633: LD_VAR 0 8
45637: NOT
45638: IFFALSE 45650
// k := array ;
45640: LD_ADDR_VAR 0 8
45644: PUSH
45645: LD_VAR 0 1
45649: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45650: LD_ADDR_VAR 0 10
45654: PUSH
45655: LD_VAR 0 10
45659: PPUSH
45660: LD_VAR 0 8
45664: PPUSH
45665: LD_VAR 0 1
45669: PUSH
45670: LD_VAR 0 7
45674: ARRAY
45675: PPUSH
45676: CALL_OW 1
45680: ST_TO_ADDR
// end ;
45681: GO 45594
45683: POP
45684: POP
// array := tmp ;
45685: LD_ADDR_VAR 0 1
45689: PUSH
45690: LD_VAR 0 10
45694: ST_TO_ADDR
// end ;
45695: GO 45576
45697: POP
45698: POP
// result := array ;
45699: LD_ADDR_VAR 0 5
45703: PUSH
45704: LD_VAR 0 1
45708: ST_TO_ADDR
// end ;
45709: LD_VAR 0 5
45713: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45714: LD_INT 0
45716: PPUSH
45717: PPUSH
// result := 0 ;
45718: LD_ADDR_VAR 0 3
45722: PUSH
45723: LD_INT 0
45725: ST_TO_ADDR
// if not array or not value in array then
45726: LD_VAR 0 1
45730: NOT
45731: IFTRUE 45746
45733: PUSH
45734: LD_VAR 0 2
45738: PUSH
45739: LD_VAR 0 1
45743: IN
45744: NOT
45745: OR
45746: IFFALSE 45750
// exit ;
45748: GO 45804
// for i = 1 to array do
45750: LD_ADDR_VAR 0 4
45754: PUSH
45755: DOUBLE
45756: LD_INT 1
45758: DEC
45759: ST_TO_ADDR
45760: LD_VAR 0 1
45764: PUSH
45765: FOR_TO
45766: IFFALSE 45802
// if value = array [ i ] then
45768: LD_VAR 0 2
45772: PUSH
45773: LD_VAR 0 1
45777: PUSH
45778: LD_VAR 0 4
45782: ARRAY
45783: EQUAL
45784: IFFALSE 45800
// begin result := i ;
45786: LD_ADDR_VAR 0 3
45790: PUSH
45791: LD_VAR 0 4
45795: ST_TO_ADDR
// exit ;
45796: POP
45797: POP
45798: GO 45804
// end ;
45800: GO 45765
45802: POP
45803: POP
// end ;
45804: LD_VAR 0 3
45808: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45809: LD_INT 0
45811: PPUSH
// vc_chassis := chassis ;
45812: LD_ADDR_OWVAR 37
45816: PUSH
45817: LD_VAR 0 1
45821: ST_TO_ADDR
// vc_engine := engine ;
45822: LD_ADDR_OWVAR 39
45826: PUSH
45827: LD_VAR 0 2
45831: ST_TO_ADDR
// vc_control := control ;
45832: LD_ADDR_OWVAR 38
45836: PUSH
45837: LD_VAR 0 3
45841: ST_TO_ADDR
// vc_weapon := weapon ;
45842: LD_ADDR_OWVAR 40
45846: PUSH
45847: LD_VAR 0 4
45851: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45852: LD_ADDR_OWVAR 41
45856: PUSH
45857: LD_VAR 0 5
45861: ST_TO_ADDR
// end ;
45862: LD_VAR 0 6
45866: RET
// export function WantPlant ( unit ) ; var task ; begin
45867: LD_INT 0
45869: PPUSH
45870: PPUSH
// result := false ;
45871: LD_ADDR_VAR 0 2
45875: PUSH
45876: LD_INT 0
45878: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45879: LD_ADDR_VAR 0 3
45883: PUSH
45884: LD_VAR 0 1
45888: PPUSH
45889: CALL_OW 437
45893: ST_TO_ADDR
// if task then
45894: LD_VAR 0 3
45898: IFFALSE 45926
// if task [ 1 ] [ 1 ] = p then
45900: LD_VAR 0 3
45904: PUSH
45905: LD_INT 1
45907: ARRAY
45908: PUSH
45909: LD_INT 1
45911: ARRAY
45912: PUSH
45913: LD_STRING p
45915: EQUAL
45916: IFFALSE 45926
// result := true ;
45918: LD_ADDR_VAR 0 2
45922: PUSH
45923: LD_INT 1
45925: ST_TO_ADDR
// end ;
45926: LD_VAR 0 2
45930: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45931: LD_INT 0
45933: PPUSH
45934: PPUSH
45935: PPUSH
45936: PPUSH
// if pos < 1 then
45937: LD_VAR 0 2
45941: PUSH
45942: LD_INT 1
45944: LESS
45945: IFFALSE 45949
// exit ;
45947: GO 46252
// if pos = 1 then
45949: LD_VAR 0 2
45953: PUSH
45954: LD_INT 1
45956: EQUAL
45957: IFFALSE 45990
// result := Replace ( arr , pos [ 1 ] , value ) else
45959: LD_ADDR_VAR 0 4
45963: PUSH
45964: LD_VAR 0 1
45968: PPUSH
45969: LD_VAR 0 2
45973: PUSH
45974: LD_INT 1
45976: ARRAY
45977: PPUSH
45978: LD_VAR 0 3
45982: PPUSH
45983: CALL_OW 1
45987: ST_TO_ADDR
45988: GO 46252
// begin tmp := arr ;
45990: LD_ADDR_VAR 0 6
45994: PUSH
45995: LD_VAR 0 1
45999: ST_TO_ADDR
// s_arr := [ tmp ] ;
46000: LD_ADDR_VAR 0 7
46004: PUSH
46005: LD_VAR 0 6
46009: PUSH
46010: EMPTY
46011: LIST
46012: ST_TO_ADDR
// for i = 1 to pos - 1 do
46013: LD_ADDR_VAR 0 5
46017: PUSH
46018: DOUBLE
46019: LD_INT 1
46021: DEC
46022: ST_TO_ADDR
46023: LD_VAR 0 2
46027: PUSH
46028: LD_INT 1
46030: MINUS
46031: PUSH
46032: FOR_TO
46033: IFFALSE 46078
// begin tmp := tmp [ pos [ i ] ] ;
46035: LD_ADDR_VAR 0 6
46039: PUSH
46040: LD_VAR 0 6
46044: PUSH
46045: LD_VAR 0 2
46049: PUSH
46050: LD_VAR 0 5
46054: ARRAY
46055: ARRAY
46056: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46057: LD_ADDR_VAR 0 7
46061: PUSH
46062: LD_VAR 0 7
46066: PUSH
46067: LD_VAR 0 6
46071: PUSH
46072: EMPTY
46073: LIST
46074: ADD
46075: ST_TO_ADDR
// end ;
46076: GO 46032
46078: POP
46079: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46080: LD_ADDR_VAR 0 6
46084: PUSH
46085: LD_VAR 0 6
46089: PPUSH
46090: LD_VAR 0 2
46094: PUSH
46095: LD_VAR 0 2
46099: ARRAY
46100: PPUSH
46101: LD_VAR 0 3
46105: PPUSH
46106: CALL_OW 1
46110: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46111: LD_ADDR_VAR 0 7
46115: PUSH
46116: LD_VAR 0 7
46120: PPUSH
46121: LD_VAR 0 7
46125: PPUSH
46126: LD_VAR 0 6
46130: PPUSH
46131: CALL_OW 1
46135: ST_TO_ADDR
// for i = s_arr downto 2 do
46136: LD_ADDR_VAR 0 5
46140: PUSH
46141: DOUBLE
46142: LD_VAR 0 7
46146: INC
46147: ST_TO_ADDR
46148: LD_INT 2
46150: PUSH
46151: FOR_DOWNTO
46152: IFFALSE 46236
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46154: LD_ADDR_VAR 0 6
46158: PUSH
46159: LD_VAR 0 7
46163: PUSH
46164: LD_VAR 0 5
46168: PUSH
46169: LD_INT 1
46171: MINUS
46172: ARRAY
46173: PPUSH
46174: LD_VAR 0 2
46178: PUSH
46179: LD_VAR 0 5
46183: PUSH
46184: LD_INT 1
46186: MINUS
46187: ARRAY
46188: PPUSH
46189: LD_VAR 0 7
46193: PUSH
46194: LD_VAR 0 5
46198: ARRAY
46199: PPUSH
46200: CALL_OW 1
46204: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46205: LD_ADDR_VAR 0 7
46209: PUSH
46210: LD_VAR 0 7
46214: PPUSH
46215: LD_VAR 0 5
46219: PUSH
46220: LD_INT 1
46222: MINUS
46223: PPUSH
46224: LD_VAR 0 6
46228: PPUSH
46229: CALL_OW 1
46233: ST_TO_ADDR
// end ;
46234: GO 46151
46236: POP
46237: POP
// result := s_arr [ 1 ] ;
46238: LD_ADDR_VAR 0 4
46242: PUSH
46243: LD_VAR 0 7
46247: PUSH
46248: LD_INT 1
46250: ARRAY
46251: ST_TO_ADDR
// end ; end ;
46252: LD_VAR 0 4
46256: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46257: LD_INT 0
46259: PPUSH
46260: PPUSH
// if not list then
46261: LD_VAR 0 1
46265: NOT
46266: IFFALSE 46270
// exit ;
46268: GO 46361
// i := list [ pos1 ] ;
46270: LD_ADDR_VAR 0 5
46274: PUSH
46275: LD_VAR 0 1
46279: PUSH
46280: LD_VAR 0 2
46284: ARRAY
46285: ST_TO_ADDR
// if not i then
46286: LD_VAR 0 5
46290: NOT
46291: IFFALSE 46295
// exit ;
46293: GO 46361
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46295: LD_ADDR_VAR 0 1
46299: PUSH
46300: LD_VAR 0 1
46304: PPUSH
46305: LD_VAR 0 2
46309: PPUSH
46310: LD_VAR 0 1
46314: PUSH
46315: LD_VAR 0 3
46319: ARRAY
46320: PPUSH
46321: CALL_OW 1
46325: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46326: LD_ADDR_VAR 0 1
46330: PUSH
46331: LD_VAR 0 1
46335: PPUSH
46336: LD_VAR 0 3
46340: PPUSH
46341: LD_VAR 0 5
46345: PPUSH
46346: CALL_OW 1
46350: ST_TO_ADDR
// result := list ;
46351: LD_ADDR_VAR 0 4
46355: PUSH
46356: LD_VAR 0 1
46360: ST_TO_ADDR
// end ;
46361: LD_VAR 0 4
46365: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46366: LD_INT 0
46368: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46369: LD_ADDR_VAR 0 5
46373: PUSH
46374: LD_VAR 0 1
46378: PPUSH
46379: CALL_OW 250
46383: PPUSH
46384: LD_VAR 0 1
46388: PPUSH
46389: CALL_OW 251
46393: PPUSH
46394: LD_VAR 0 2
46398: PPUSH
46399: LD_VAR 0 3
46403: PPUSH
46404: LD_VAR 0 4
46408: PPUSH
46409: CALL 46791 0 5
46413: ST_TO_ADDR
// end ;
46414: LD_VAR 0 5
46418: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
46419: LD_INT 0
46421: PPUSH
46422: PPUSH
46423: PPUSH
46424: PPUSH
// if not list or not unit then
46425: LD_VAR 0 2
46429: NOT
46430: IFTRUE 46439
46432: PUSH
46433: LD_VAR 0 1
46437: NOT
46438: OR
46439: IFFALSE 46443
// exit ;
46441: GO 46786
// result := [ ] ;
46443: LD_ADDR_VAR 0 5
46447: PUSH
46448: EMPTY
46449: ST_TO_ADDR
// for i in list do
46450: LD_ADDR_VAR 0 6
46454: PUSH
46455: LD_VAR 0 2
46459: PUSH
46460: FOR_IN
46461: IFFALSE 46679
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
46463: LD_ADDR_VAR 0 8
46467: PUSH
46468: LD_VAR 0 1
46472: PPUSH
46473: LD_VAR 0 6
46477: PUSH
46478: LD_INT 1
46480: ARRAY
46481: PPUSH
46482: LD_VAR 0 6
46486: PUSH
46487: LD_INT 2
46489: ARRAY
46490: PPUSH
46491: CALL_OW 297
46495: ST_TO_ADDR
// if not Count ( result ) then
46496: LD_VAR 0 5
46500: PPUSH
46501: CALL 43013 0 1
46505: NOT
46506: IFFALSE 46539
// begin result := Join ( result , [ i , tmp ] ) ;
46508: LD_ADDR_VAR 0 5
46512: PUSH
46513: LD_VAR 0 5
46517: PPUSH
46518: LD_VAR 0 6
46522: PUSH
46523: LD_VAR 0 8
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PPUSH
46532: CALL 78989 0 2
46536: ST_TO_ADDR
// continue ;
46537: GO 46460
// end ; if result [ result ] [ 2 ] <= tmp then
46539: LD_VAR 0 5
46543: PUSH
46544: LD_VAR 0 5
46548: ARRAY
46549: PUSH
46550: LD_INT 2
46552: ARRAY
46553: PUSH
46554: LD_VAR 0 8
46558: LESSEQUAL
46559: IFFALSE 46592
// result := Join ( result , [ i , tmp ] ) else
46561: LD_ADDR_VAR 0 5
46565: PUSH
46566: LD_VAR 0 5
46570: PPUSH
46571: LD_VAR 0 6
46575: PUSH
46576: LD_VAR 0 8
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PPUSH
46585: CALL 78989 0 2
46589: ST_TO_ADDR
46590: GO 46677
// begin for j := 1 to Count ( result ) do
46592: LD_ADDR_VAR 0 7
46596: PUSH
46597: DOUBLE
46598: LD_INT 1
46600: DEC
46601: ST_TO_ADDR
46602: LD_VAR 0 5
46606: PPUSH
46607: CALL 43013 0 1
46611: PUSH
46612: FOR_TO
46613: IFFALSE 46675
// begin if tmp < result [ j ] [ 2 ] then
46615: LD_VAR 0 8
46619: PUSH
46620: LD_VAR 0 5
46624: PUSH
46625: LD_VAR 0 7
46629: ARRAY
46630: PUSH
46631: LD_INT 2
46633: ARRAY
46634: LESS
46635: IFFALSE 46673
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46637: LD_ADDR_VAR 0 5
46641: PUSH
46642: LD_VAR 0 5
46646: PPUSH
46647: LD_VAR 0 7
46651: PPUSH
46652: LD_VAR 0 6
46656: PUSH
46657: LD_VAR 0 8
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PPUSH
46666: CALL_OW 2
46670: ST_TO_ADDR
// break ;
46671: GO 46675
// end ; end ;
46673: GO 46612
46675: POP
46676: POP
// end ; end ;
46677: GO 46460
46679: POP
46680: POP
// if result and not asc then
46681: LD_VAR 0 5
46685: IFFALSE 46694
46687: PUSH
46688: LD_VAR 0 3
46692: NOT
46693: AND
46694: IFFALSE 46711
// result := ReverseArray ( result ) ;
46696: LD_ADDR_VAR 0 5
46700: PUSH
46701: LD_VAR 0 5
46705: PPUSH
46706: CALL 74069 0 1
46710: ST_TO_ADDR
// tmp := [ ] ;
46711: LD_ADDR_VAR 0 8
46715: PUSH
46716: EMPTY
46717: ST_TO_ADDR
// if mode then
46718: LD_VAR 0 4
46722: IFFALSE 46786
// begin for i := 1 to result do
46724: LD_ADDR_VAR 0 6
46728: PUSH
46729: DOUBLE
46730: LD_INT 1
46732: DEC
46733: ST_TO_ADDR
46734: LD_VAR 0 5
46738: PUSH
46739: FOR_TO
46740: IFFALSE 46774
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
46742: LD_ADDR_VAR 0 8
46746: PUSH
46747: LD_VAR 0 8
46751: PPUSH
46752: LD_VAR 0 5
46756: PUSH
46757: LD_VAR 0 6
46761: ARRAY
46762: PUSH
46763: LD_INT 1
46765: ARRAY
46766: PPUSH
46767: CALL 78989 0 2
46771: ST_TO_ADDR
46772: GO 46739
46774: POP
46775: POP
// result := tmp ;
46776: LD_ADDR_VAR 0 5
46780: PUSH
46781: LD_VAR 0 8
46785: ST_TO_ADDR
// end ; end ;
46786: LD_VAR 0 5
46790: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46791: LD_INT 0
46793: PPUSH
46794: PPUSH
46795: PPUSH
46796: PPUSH
// if not list then
46797: LD_VAR 0 3
46801: NOT
46802: IFFALSE 46806
// exit ;
46804: GO 47196
// result := [ ] ;
46806: LD_ADDR_VAR 0 6
46810: PUSH
46811: EMPTY
46812: ST_TO_ADDR
// for i in list do
46813: LD_ADDR_VAR 0 7
46817: PUSH
46818: LD_VAR 0 3
46822: PUSH
46823: FOR_IN
46824: IFFALSE 47026
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46826: LD_ADDR_VAR 0 9
46830: PUSH
46831: LD_VAR 0 7
46835: PPUSH
46836: LD_VAR 0 1
46840: PPUSH
46841: LD_VAR 0 2
46845: PPUSH
46846: CALL_OW 297
46850: ST_TO_ADDR
// if not result then
46851: LD_VAR 0 6
46855: NOT
46856: IFFALSE 46882
// result := [ [ i , tmp ] ] else
46858: LD_ADDR_VAR 0 6
46862: PUSH
46863: LD_VAR 0 7
46867: PUSH
46868: LD_VAR 0 9
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: EMPTY
46878: LIST
46879: ST_TO_ADDR
46880: GO 47024
// begin if result [ result ] [ 2 ] <= tmp then
46882: LD_VAR 0 6
46886: PUSH
46887: LD_VAR 0 6
46891: ARRAY
46892: PUSH
46893: LD_INT 2
46895: ARRAY
46896: PUSH
46897: LD_VAR 0 9
46901: LESSEQUAL
46902: IFFALSE 46944
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46904: LD_ADDR_VAR 0 6
46908: PUSH
46909: LD_VAR 0 6
46913: PPUSH
46914: LD_VAR 0 6
46918: PUSH
46919: LD_INT 1
46921: PLUS
46922: PPUSH
46923: LD_VAR 0 7
46927: PUSH
46928: LD_VAR 0 9
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PPUSH
46937: CALL_OW 2
46941: ST_TO_ADDR
46942: GO 47024
// for j := 1 to result do
46944: LD_ADDR_VAR 0 8
46948: PUSH
46949: DOUBLE
46950: LD_INT 1
46952: DEC
46953: ST_TO_ADDR
46954: LD_VAR 0 6
46958: PUSH
46959: FOR_TO
46960: IFFALSE 47022
// begin if tmp < result [ j ] [ 2 ] then
46962: LD_VAR 0 9
46966: PUSH
46967: LD_VAR 0 6
46971: PUSH
46972: LD_VAR 0 8
46976: ARRAY
46977: PUSH
46978: LD_INT 2
46980: ARRAY
46981: LESS
46982: IFFALSE 47020
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46984: LD_ADDR_VAR 0 6
46988: PUSH
46989: LD_VAR 0 6
46993: PPUSH
46994: LD_VAR 0 8
46998: PPUSH
46999: LD_VAR 0 7
47003: PUSH
47004: LD_VAR 0 9
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PPUSH
47013: CALL_OW 2
47017: ST_TO_ADDR
// break ;
47018: GO 47022
// end ; end ;
47020: GO 46959
47022: POP
47023: POP
// end ; end ;
47024: GO 46823
47026: POP
47027: POP
// if result and not asc then
47028: LD_VAR 0 6
47032: IFFALSE 47041
47034: PUSH
47035: LD_VAR 0 4
47039: NOT
47040: AND
47041: IFFALSE 47116
// begin tmp := result ;
47043: LD_ADDR_VAR 0 9
47047: PUSH
47048: LD_VAR 0 6
47052: ST_TO_ADDR
// for i = tmp downto 1 do
47053: LD_ADDR_VAR 0 7
47057: PUSH
47058: DOUBLE
47059: LD_VAR 0 9
47063: INC
47064: ST_TO_ADDR
47065: LD_INT 1
47067: PUSH
47068: FOR_DOWNTO
47069: IFFALSE 47114
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47071: LD_ADDR_VAR 0 6
47075: PUSH
47076: LD_VAR 0 6
47080: PPUSH
47081: LD_VAR 0 9
47085: PUSH
47086: LD_VAR 0 7
47090: MINUS
47091: PUSH
47092: LD_INT 1
47094: PLUS
47095: PPUSH
47096: LD_VAR 0 9
47100: PUSH
47101: LD_VAR 0 7
47105: ARRAY
47106: PPUSH
47107: CALL_OW 1
47111: ST_TO_ADDR
47112: GO 47068
47114: POP
47115: POP
// end ; tmp := [ ] ;
47116: LD_ADDR_VAR 0 9
47120: PUSH
47121: EMPTY
47122: ST_TO_ADDR
// if mode then
47123: LD_VAR 0 5
47127: IFFALSE 47196
// begin for i = 1 to result do
47129: LD_ADDR_VAR 0 7
47133: PUSH
47134: DOUBLE
47135: LD_INT 1
47137: DEC
47138: ST_TO_ADDR
47139: LD_VAR 0 6
47143: PUSH
47144: FOR_TO
47145: IFFALSE 47184
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47147: LD_ADDR_VAR 0 9
47151: PUSH
47152: LD_VAR 0 9
47156: PPUSH
47157: LD_VAR 0 7
47161: PPUSH
47162: LD_VAR 0 6
47166: PUSH
47167: LD_VAR 0 7
47171: ARRAY
47172: PUSH
47173: LD_INT 1
47175: ARRAY
47176: PPUSH
47177: CALL_OW 1
47181: ST_TO_ADDR
47182: GO 47144
47184: POP
47185: POP
// result := tmp ;
47186: LD_ADDR_VAR 0 6
47190: PUSH
47191: LD_VAR 0 9
47195: ST_TO_ADDR
// end ; end ;
47196: LD_VAR 0 6
47200: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47201: LD_INT 0
47203: PPUSH
47204: PPUSH
47205: PPUSH
47206: PPUSH
47207: PPUSH
47208: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47209: LD_ADDR_VAR 0 5
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: LD_INT 0
47219: PUSH
47220: LD_INT 0
47222: PUSH
47223: EMPTY
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: ST_TO_ADDR
// if not x or not y then
47231: LD_VAR 0 2
47235: NOT
47236: IFTRUE 47245
47238: PUSH
47239: LD_VAR 0 3
47243: NOT
47244: OR
47245: IFFALSE 47249
// exit ;
47247: GO 48905
// if not range then
47249: LD_VAR 0 4
47253: NOT
47254: IFFALSE 47264
// range := 10 ;
47256: LD_ADDR_VAR 0 4
47260: PUSH
47261: LD_INT 10
47263: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47264: LD_ADDR_VAR 0 8
47268: PUSH
47269: LD_INT 81
47271: PUSH
47272: LD_VAR 0 1
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 92
47283: PUSH
47284: LD_VAR 0 2
47288: PUSH
47289: LD_VAR 0 3
47293: PUSH
47294: LD_VAR 0 4
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 3
47307: PUSH
47308: LD_INT 21
47310: PUSH
47311: LD_INT 3
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: LIST
47326: PPUSH
47327: CALL_OW 69
47331: ST_TO_ADDR
// if not tmp then
47332: LD_VAR 0 8
47336: NOT
47337: IFFALSE 47341
// exit ;
47339: GO 48905
// for i in tmp do
47341: LD_ADDR_VAR 0 6
47345: PUSH
47346: LD_VAR 0 8
47350: PUSH
47351: FOR_IN
47352: IFFALSE 48880
// begin points := [ 0 , 0 , 0 ] ;
47354: LD_ADDR_VAR 0 9
47358: PUSH
47359: LD_INT 0
47361: PUSH
47362: LD_INT 0
47364: PUSH
47365: LD_INT 0
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: LIST
47372: ST_TO_ADDR
// bpoints := 1 ;
47373: LD_ADDR_VAR 0 10
47377: PUSH
47378: LD_INT 1
47380: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47381: LD_VAR 0 6
47385: PPUSH
47386: CALL_OW 247
47390: PUSH
47391: LD_INT 1
47393: DOUBLE
47394: EQUAL
47395: IFTRUE 47399
47397: GO 47981
47399: POP
// begin if GetClass ( i ) = 1 then
47400: LD_VAR 0 6
47404: PPUSH
47405: CALL_OW 257
47409: PUSH
47410: LD_INT 1
47412: EQUAL
47413: IFFALSE 47434
// points := [ 10 , 5 , 3 ] ;
47415: LD_ADDR_VAR 0 9
47419: PUSH
47420: LD_INT 10
47422: PUSH
47423: LD_INT 5
47425: PUSH
47426: LD_INT 3
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: LIST
47433: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47434: LD_VAR 0 6
47438: PPUSH
47439: CALL_OW 257
47443: PUSH
47444: LD_INT 2
47446: PUSH
47447: LD_INT 3
47449: PUSH
47450: LD_INT 4
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: LIST
47457: IN
47458: IFFALSE 47479
// points := [ 3 , 2 , 1 ] ;
47460: LD_ADDR_VAR 0 9
47464: PUSH
47465: LD_INT 3
47467: PUSH
47468: LD_INT 2
47470: PUSH
47471: LD_INT 1
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: LIST
47478: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47479: LD_VAR 0 6
47483: PPUSH
47484: CALL_OW 257
47488: PUSH
47489: LD_INT 5
47491: EQUAL
47492: IFFALSE 47513
// points := [ 130 , 5 , 2 ] ;
47494: LD_ADDR_VAR 0 9
47498: PUSH
47499: LD_INT 130
47501: PUSH
47502: LD_INT 5
47504: PUSH
47505: LD_INT 2
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: LIST
47512: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47513: LD_VAR 0 6
47517: PPUSH
47518: CALL_OW 257
47522: PUSH
47523: LD_INT 8
47525: EQUAL
47526: IFFALSE 47547
// points := [ 35 , 35 , 30 ] ;
47528: LD_ADDR_VAR 0 9
47532: PUSH
47533: LD_INT 35
47535: PUSH
47536: LD_INT 35
47538: PUSH
47539: LD_INT 30
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: LIST
47546: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47547: LD_VAR 0 6
47551: PPUSH
47552: CALL_OW 257
47556: PUSH
47557: LD_INT 9
47559: EQUAL
47560: IFFALSE 47581
// points := [ 20 , 55 , 40 ] ;
47562: LD_ADDR_VAR 0 9
47566: PUSH
47567: LD_INT 20
47569: PUSH
47570: LD_INT 55
47572: PUSH
47573: LD_INT 40
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: LIST
47580: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47581: LD_VAR 0 6
47585: PPUSH
47586: CALL_OW 257
47590: PUSH
47591: LD_INT 12
47593: PUSH
47594: LD_INT 16
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: IN
47601: IFFALSE 47622
// points := [ 5 , 3 , 2 ] ;
47603: LD_ADDR_VAR 0 9
47607: PUSH
47608: LD_INT 5
47610: PUSH
47611: LD_INT 3
47613: PUSH
47614: LD_INT 2
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: LIST
47621: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47622: LD_VAR 0 6
47626: PPUSH
47627: CALL_OW 257
47631: PUSH
47632: LD_INT 17
47634: EQUAL
47635: IFFALSE 47656
// points := [ 100 , 50 , 75 ] ;
47637: LD_ADDR_VAR 0 9
47641: PUSH
47642: LD_INT 100
47644: PUSH
47645: LD_INT 50
47647: PUSH
47648: LD_INT 75
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: LIST
47655: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47656: LD_VAR 0 6
47660: PPUSH
47661: CALL_OW 257
47665: PUSH
47666: LD_INT 15
47668: EQUAL
47669: IFFALSE 47690
// points := [ 10 , 5 , 3 ] ;
47671: LD_ADDR_VAR 0 9
47675: PUSH
47676: LD_INT 10
47678: PUSH
47679: LD_INT 5
47681: PUSH
47682: LD_INT 3
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: LIST
47689: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47690: LD_VAR 0 6
47694: PPUSH
47695: CALL_OW 257
47699: PUSH
47700: LD_INT 14
47702: EQUAL
47703: IFFALSE 47724
// points := [ 10 , 0 , 0 ] ;
47705: LD_ADDR_VAR 0 9
47709: PUSH
47710: LD_INT 10
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: LD_INT 0
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: LIST
47723: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47724: LD_VAR 0 6
47728: PPUSH
47729: CALL_OW 257
47733: PUSH
47734: LD_INT 11
47736: EQUAL
47737: IFFALSE 47758
// points := [ 30 , 10 , 5 ] ;
47739: LD_ADDR_VAR 0 9
47743: PUSH
47744: LD_INT 30
47746: PUSH
47747: LD_INT 10
47749: PUSH
47750: LD_INT 5
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: LIST
47757: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47758: LD_VAR 0 1
47762: PPUSH
47763: LD_INT 5
47765: PPUSH
47766: CALL_OW 321
47770: PUSH
47771: LD_INT 2
47773: EQUAL
47774: IFFALSE 47791
// bpoints := bpoints * 1.8 ;
47776: LD_ADDR_VAR 0 10
47780: PUSH
47781: LD_VAR 0 10
47785: PUSH
47786: LD_REAL  1.80000000000000E+0000
47789: MUL
47790: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47791: LD_VAR 0 6
47795: PPUSH
47796: CALL_OW 257
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: LD_INT 2
47806: PUSH
47807: LD_INT 3
47809: PUSH
47810: LD_INT 4
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: IN
47819: IFFALSE 47839
47821: PUSH
47822: LD_VAR 0 1
47826: PPUSH
47827: LD_INT 51
47829: PPUSH
47830: CALL_OW 321
47834: PUSH
47835: LD_INT 2
47837: EQUAL
47838: AND
47839: IFFALSE 47856
// bpoints := bpoints * 1.2 ;
47841: LD_ADDR_VAR 0 10
47845: PUSH
47846: LD_VAR 0 10
47850: PUSH
47851: LD_REAL  1.20000000000000E+0000
47854: MUL
47855: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47856: LD_VAR 0 6
47860: PPUSH
47861: CALL_OW 257
47865: PUSH
47866: LD_INT 5
47868: PUSH
47869: LD_INT 7
47871: PUSH
47872: LD_INT 9
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: LIST
47879: IN
47880: IFFALSE 47900
47882: PUSH
47883: LD_VAR 0 1
47887: PPUSH
47888: LD_INT 52
47890: PPUSH
47891: CALL_OW 321
47895: PUSH
47896: LD_INT 2
47898: EQUAL
47899: AND
47900: IFFALSE 47917
// bpoints := bpoints * 1.5 ;
47902: LD_ADDR_VAR 0 10
47906: PUSH
47907: LD_VAR 0 10
47911: PUSH
47912: LD_REAL  1.50000000000000E+0000
47915: MUL
47916: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47917: LD_VAR 0 1
47921: PPUSH
47922: LD_INT 66
47924: PPUSH
47925: CALL_OW 321
47929: PUSH
47930: LD_INT 2
47932: EQUAL
47933: IFFALSE 47950
// bpoints := bpoints * 1.1 ;
47935: LD_ADDR_VAR 0 10
47939: PUSH
47940: LD_VAR 0 10
47944: PUSH
47945: LD_REAL  1.10000000000000E+0000
47948: MUL
47949: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47950: LD_ADDR_VAR 0 10
47954: PUSH
47955: LD_VAR 0 10
47959: PUSH
47960: LD_VAR 0 6
47964: PPUSH
47965: LD_INT 1
47967: PPUSH
47968: CALL_OW 259
47972: PUSH
47973: LD_REAL  1.15000000000000E+0000
47976: MUL
47977: MUL
47978: ST_TO_ADDR
// end ; unit_vehicle :
47979: GO 48809
47981: LD_INT 2
47983: DOUBLE
47984: EQUAL
47985: IFTRUE 47989
47987: GO 48797
47989: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47990: LD_VAR 0 6
47994: PPUSH
47995: CALL_OW 264
47999: PUSH
48000: LD_INT 2
48002: PUSH
48003: LD_INT 42
48005: PUSH
48006: LD_INT 24
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: LIST
48013: IN
48014: IFFALSE 48035
// points := [ 25 , 5 , 3 ] ;
48016: LD_ADDR_VAR 0 9
48020: PUSH
48021: LD_INT 25
48023: PUSH
48024: LD_INT 5
48026: PUSH
48027: LD_INT 3
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: LIST
48034: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48035: LD_VAR 0 6
48039: PPUSH
48040: CALL_OW 264
48044: PUSH
48045: LD_INT 4
48047: PUSH
48048: LD_INT 43
48050: PUSH
48051: LD_INT 25
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: LIST
48058: IN
48059: IFFALSE 48080
// points := [ 40 , 15 , 5 ] ;
48061: LD_ADDR_VAR 0 9
48065: PUSH
48066: LD_INT 40
48068: PUSH
48069: LD_INT 15
48071: PUSH
48072: LD_INT 5
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: LIST
48079: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48080: LD_VAR 0 6
48084: PPUSH
48085: CALL_OW 264
48089: PUSH
48090: LD_INT 3
48092: PUSH
48093: LD_INT 23
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: IN
48100: IFFALSE 48121
// points := [ 7 , 25 , 8 ] ;
48102: LD_ADDR_VAR 0 9
48106: PUSH
48107: LD_INT 7
48109: PUSH
48110: LD_INT 25
48112: PUSH
48113: LD_INT 8
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: LIST
48120: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48121: LD_VAR 0 6
48125: PPUSH
48126: CALL_OW 264
48130: PUSH
48131: LD_INT 5
48133: PUSH
48134: LD_INT 27
48136: PUSH
48137: LD_INT 44
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: LIST
48144: IN
48145: IFFALSE 48166
// points := [ 14 , 50 , 16 ] ;
48147: LD_ADDR_VAR 0 9
48151: PUSH
48152: LD_INT 14
48154: PUSH
48155: LD_INT 50
48157: PUSH
48158: LD_INT 16
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: LIST
48165: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48166: LD_VAR 0 6
48170: PPUSH
48171: CALL_OW 264
48175: PUSH
48176: LD_INT 6
48178: PUSH
48179: LD_INT 46
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: IN
48186: IFFALSE 48207
// points := [ 32 , 120 , 70 ] ;
48188: LD_ADDR_VAR 0 9
48192: PUSH
48193: LD_INT 32
48195: PUSH
48196: LD_INT 120
48198: PUSH
48199: LD_INT 70
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: LIST
48206: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48207: LD_VAR 0 6
48211: PPUSH
48212: CALL_OW 264
48216: PUSH
48217: LD_INT 7
48219: PUSH
48220: LD_INT 28
48222: PUSH
48223: LD_INT 45
48225: PUSH
48226: LD_INT 92
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: IN
48235: IFFALSE 48256
// points := [ 35 , 20 , 45 ] ;
48237: LD_ADDR_VAR 0 9
48241: PUSH
48242: LD_INT 35
48244: PUSH
48245: LD_INT 20
48247: PUSH
48248: LD_INT 45
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: LIST
48255: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48256: LD_VAR 0 6
48260: PPUSH
48261: CALL_OW 264
48265: PUSH
48266: LD_INT 47
48268: PUSH
48269: EMPTY
48270: LIST
48271: IN
48272: IFFALSE 48293
// points := [ 67 , 45 , 75 ] ;
48274: LD_ADDR_VAR 0 9
48278: PUSH
48279: LD_INT 67
48281: PUSH
48282: LD_INT 45
48284: PUSH
48285: LD_INT 75
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: LIST
48292: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48293: LD_VAR 0 6
48297: PPUSH
48298: CALL_OW 264
48302: PUSH
48303: LD_INT 26
48305: PUSH
48306: EMPTY
48307: LIST
48308: IN
48309: IFFALSE 48330
// points := [ 120 , 30 , 80 ] ;
48311: LD_ADDR_VAR 0 9
48315: PUSH
48316: LD_INT 120
48318: PUSH
48319: LD_INT 30
48321: PUSH
48322: LD_INT 80
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: LIST
48329: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48330: LD_VAR 0 6
48334: PPUSH
48335: CALL_OW 264
48339: PUSH
48340: LD_INT 22
48342: PUSH
48343: EMPTY
48344: LIST
48345: IN
48346: IFFALSE 48367
// points := [ 40 , 1 , 1 ] ;
48348: LD_ADDR_VAR 0 9
48352: PUSH
48353: LD_INT 40
48355: PUSH
48356: LD_INT 1
48358: PUSH
48359: LD_INT 1
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: LIST
48366: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48367: LD_VAR 0 6
48371: PPUSH
48372: CALL_OW 264
48376: PUSH
48377: LD_INT 29
48379: PUSH
48380: EMPTY
48381: LIST
48382: IN
48383: IFFALSE 48404
// points := [ 70 , 200 , 400 ] ;
48385: LD_ADDR_VAR 0 9
48389: PUSH
48390: LD_INT 70
48392: PUSH
48393: LD_INT 200
48395: PUSH
48396: LD_INT 400
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: LIST
48403: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48404: LD_VAR 0 6
48408: PPUSH
48409: CALL_OW 264
48413: PUSH
48414: LD_INT 14
48416: PUSH
48417: LD_INT 53
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: IN
48424: IFFALSE 48445
// points := [ 40 , 10 , 20 ] ;
48426: LD_ADDR_VAR 0 9
48430: PUSH
48431: LD_INT 40
48433: PUSH
48434: LD_INT 10
48436: PUSH
48437: LD_INT 20
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: LIST
48444: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48445: LD_VAR 0 6
48449: PPUSH
48450: CALL_OW 264
48454: PUSH
48455: LD_INT 9
48457: PUSH
48458: EMPTY
48459: LIST
48460: IN
48461: IFFALSE 48482
// points := [ 5 , 70 , 20 ] ;
48463: LD_ADDR_VAR 0 9
48467: PUSH
48468: LD_INT 5
48470: PUSH
48471: LD_INT 70
48473: PUSH
48474: LD_INT 20
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: LIST
48481: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48482: LD_VAR 0 6
48486: PPUSH
48487: CALL_OW 264
48491: PUSH
48492: LD_INT 10
48494: PUSH
48495: EMPTY
48496: LIST
48497: IN
48498: IFFALSE 48519
// points := [ 35 , 110 , 70 ] ;
48500: LD_ADDR_VAR 0 9
48504: PUSH
48505: LD_INT 35
48507: PUSH
48508: LD_INT 110
48510: PUSH
48511: LD_INT 70
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: LIST
48518: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48519: LD_VAR 0 6
48523: PPUSH
48524: CALL_OW 265
48528: PUSH
48529: LD_INT 25
48531: EQUAL
48532: IFFALSE 48553
// points := [ 80 , 65 , 100 ] ;
48534: LD_ADDR_VAR 0 9
48538: PUSH
48539: LD_INT 80
48541: PUSH
48542: LD_INT 65
48544: PUSH
48545: LD_INT 100
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: LIST
48552: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48553: LD_VAR 0 6
48557: PPUSH
48558: CALL_OW 263
48562: PUSH
48563: LD_INT 1
48565: EQUAL
48566: IFFALSE 48601
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48568: LD_ADDR_VAR 0 10
48572: PUSH
48573: LD_VAR 0 10
48577: PUSH
48578: LD_VAR 0 6
48582: PPUSH
48583: CALL_OW 311
48587: PPUSH
48588: LD_INT 3
48590: PPUSH
48591: CALL_OW 259
48595: PUSH
48596: LD_INT 4
48598: MUL
48599: MUL
48600: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48601: LD_VAR 0 6
48605: PPUSH
48606: CALL_OW 263
48610: PUSH
48611: LD_INT 2
48613: EQUAL
48614: IFFALSE 48665
// begin j := IsControledBy ( i ) ;
48616: LD_ADDR_VAR 0 7
48620: PUSH
48621: LD_VAR 0 6
48625: PPUSH
48626: CALL_OW 312
48630: ST_TO_ADDR
// if j then
48631: LD_VAR 0 7
48635: IFFALSE 48665
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48637: LD_ADDR_VAR 0 10
48641: PUSH
48642: LD_VAR 0 10
48646: PUSH
48647: LD_VAR 0 7
48651: PPUSH
48652: LD_INT 3
48654: PPUSH
48655: CALL_OW 259
48659: PUSH
48660: LD_INT 3
48662: MUL
48663: MUL
48664: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48665: LD_VAR 0 6
48669: PPUSH
48670: CALL_OW 264
48674: PUSH
48675: LD_INT 5
48677: PUSH
48678: LD_INT 6
48680: PUSH
48681: LD_INT 46
48683: PUSH
48684: LD_INT 44
48686: PUSH
48687: LD_INT 47
48689: PUSH
48690: LD_INT 45
48692: PUSH
48693: LD_INT 28
48695: PUSH
48696: LD_INT 7
48698: PUSH
48699: LD_INT 27
48701: PUSH
48702: LD_INT 29
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: IN
48717: IFFALSE 48737
48719: PUSH
48720: LD_VAR 0 1
48724: PPUSH
48725: LD_INT 52
48727: PPUSH
48728: CALL_OW 321
48732: PUSH
48733: LD_INT 2
48735: EQUAL
48736: AND
48737: IFFALSE 48754
// bpoints := bpoints * 1.2 ;
48739: LD_ADDR_VAR 0 10
48743: PUSH
48744: LD_VAR 0 10
48748: PUSH
48749: LD_REAL  1.20000000000000E+0000
48752: MUL
48753: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48754: LD_VAR 0 6
48758: PPUSH
48759: CALL_OW 264
48763: PUSH
48764: LD_INT 6
48766: PUSH
48767: LD_INT 46
48769: PUSH
48770: LD_INT 47
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: LIST
48777: IN
48778: IFFALSE 48795
// bpoints := bpoints * 1.2 ;
48780: LD_ADDR_VAR 0 10
48784: PUSH
48785: LD_VAR 0 10
48789: PUSH
48790: LD_REAL  1.20000000000000E+0000
48793: MUL
48794: ST_TO_ADDR
// end ; unit_building :
48795: GO 48809
48797: LD_INT 3
48799: DOUBLE
48800: EQUAL
48801: IFTRUE 48805
48803: GO 48808
48805: POP
// ; end ;
48806: GO 48809
48808: POP
// for j = 1 to 3 do
48809: LD_ADDR_VAR 0 7
48813: PUSH
48814: DOUBLE
48815: LD_INT 1
48817: DEC
48818: ST_TO_ADDR
48819: LD_INT 3
48821: PUSH
48822: FOR_TO
48823: IFFALSE 48876
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48825: LD_ADDR_VAR 0 5
48829: PUSH
48830: LD_VAR 0 5
48834: PPUSH
48835: LD_VAR 0 7
48839: PPUSH
48840: LD_VAR 0 5
48844: PUSH
48845: LD_VAR 0 7
48849: ARRAY
48850: PUSH
48851: LD_VAR 0 9
48855: PUSH
48856: LD_VAR 0 7
48860: ARRAY
48861: PUSH
48862: LD_VAR 0 10
48866: MUL
48867: PLUS
48868: PPUSH
48869: CALL_OW 1
48873: ST_TO_ADDR
48874: GO 48822
48876: POP
48877: POP
// end ;
48878: GO 47351
48880: POP
48881: POP
// result := Replace ( result , 4 , tmp ) ;
48882: LD_ADDR_VAR 0 5
48886: PUSH
48887: LD_VAR 0 5
48891: PPUSH
48892: LD_INT 4
48894: PPUSH
48895: LD_VAR 0 8
48899: PPUSH
48900: CALL_OW 1
48904: ST_TO_ADDR
// end ;
48905: LD_VAR 0 5
48909: RET
// export function DangerAtRange ( unit , range ) ; begin
48910: LD_INT 0
48912: PPUSH
// if not unit then
48913: LD_VAR 0 1
48917: NOT
48918: IFFALSE 48922
// exit ;
48920: GO 48967
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48922: LD_ADDR_VAR 0 3
48926: PUSH
48927: LD_VAR 0 1
48931: PPUSH
48932: CALL_OW 255
48936: PPUSH
48937: LD_VAR 0 1
48941: PPUSH
48942: CALL_OW 250
48946: PPUSH
48947: LD_VAR 0 1
48951: PPUSH
48952: CALL_OW 251
48956: PPUSH
48957: LD_VAR 0 2
48961: PPUSH
48962: CALL 47201 0 4
48966: ST_TO_ADDR
// end ;
48967: LD_VAR 0 3
48971: RET
// export function DangerInArea ( side , area ) ; begin
48972: LD_INT 0
48974: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48975: LD_ADDR_VAR 0 3
48979: PUSH
48980: LD_VAR 0 2
48984: PPUSH
48985: LD_INT 81
48987: PUSH
48988: LD_VAR 0 1
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PPUSH
48997: CALL_OW 70
49001: ST_TO_ADDR
// end ;
49002: LD_VAR 0 3
49006: RET
// export function IsExtension ( b ) ; begin
49007: LD_INT 0
49009: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49010: LD_ADDR_VAR 0 2
49014: PUSH
49015: LD_VAR 0 1
49019: PUSH
49020: LD_INT 23
49022: PUSH
49023: LD_INT 20
49025: PUSH
49026: LD_INT 22
49028: PUSH
49029: LD_INT 17
49031: PUSH
49032: LD_INT 24
49034: PUSH
49035: LD_INT 21
49037: PUSH
49038: LD_INT 19
49040: PUSH
49041: LD_INT 16
49043: PUSH
49044: LD_INT 25
49046: PUSH
49047: LD_INT 18
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: IN
49062: ST_TO_ADDR
// end ;
49063: LD_VAR 0 2
49067: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49068: LD_INT 0
49070: PPUSH
49071: PPUSH
49072: PPUSH
// result := [ ] ;
49073: LD_ADDR_VAR 0 4
49077: PUSH
49078: EMPTY
49079: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49080: LD_ADDR_VAR 0 5
49084: PUSH
49085: LD_VAR 0 2
49089: PPUSH
49090: LD_INT 21
49092: PUSH
49093: LD_INT 3
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PPUSH
49100: CALL_OW 70
49104: ST_TO_ADDR
// if not tmp then
49105: LD_VAR 0 5
49109: NOT
49110: IFFALSE 49114
// exit ;
49112: GO 49178
// if checkLink then
49114: LD_VAR 0 3
49118: IFFALSE 49168
// begin for i in tmp do
49120: LD_ADDR_VAR 0 6
49124: PUSH
49125: LD_VAR 0 5
49129: PUSH
49130: FOR_IN
49131: IFFALSE 49166
// if GetBase ( i ) <> base then
49133: LD_VAR 0 6
49137: PPUSH
49138: CALL_OW 274
49142: PUSH
49143: LD_VAR 0 1
49147: NONEQUAL
49148: IFFALSE 49164
// ComLinkToBase ( base , i ) ;
49150: LD_VAR 0 1
49154: PPUSH
49155: LD_VAR 0 6
49159: PPUSH
49160: CALL_OW 169
49164: GO 49130
49166: POP
49167: POP
// end ; result := tmp ;
49168: LD_ADDR_VAR 0 4
49172: PUSH
49173: LD_VAR 0 5
49177: ST_TO_ADDR
// end ;
49178: LD_VAR 0 4
49182: RET
// export function ComComplete ( units , b ) ; var i ; begin
49183: LD_INT 0
49185: PPUSH
49186: PPUSH
// if not units then
49187: LD_VAR 0 1
49191: NOT
49192: IFFALSE 49196
// exit ;
49194: GO 49286
// for i in units do
49196: LD_ADDR_VAR 0 4
49200: PUSH
49201: LD_VAR 0 1
49205: PUSH
49206: FOR_IN
49207: IFFALSE 49284
// if BuildingStatus ( b ) = bs_build then
49209: LD_VAR 0 2
49213: PPUSH
49214: CALL_OW 461
49218: PUSH
49219: LD_INT 1
49221: EQUAL
49222: IFFALSE 49282
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49224: LD_VAR 0 4
49228: PPUSH
49229: LD_STRING h
49231: PUSH
49232: LD_VAR 0 2
49236: PPUSH
49237: CALL_OW 250
49241: PUSH
49242: LD_VAR 0 2
49246: PPUSH
49247: CALL_OW 251
49251: PUSH
49252: LD_VAR 0 2
49256: PUSH
49257: LD_INT 0
49259: PUSH
49260: LD_INT 0
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: PUSH
49275: EMPTY
49276: LIST
49277: PPUSH
49278: CALL_OW 446
49282: GO 49206
49284: POP
49285: POP
// end ;
49286: LD_VAR 0 3
49290: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49291: LD_INT 0
49293: PPUSH
49294: PPUSH
49295: PPUSH
49296: PPUSH
49297: PPUSH
49298: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49299: LD_VAR 0 1
49303: NOT
49304: IFTRUE 49321
49306: PUSH
49307: LD_VAR 0 1
49311: PPUSH
49312: CALL_OW 263
49316: PUSH
49317: LD_INT 2
49319: NONEQUAL
49320: OR
49321: IFFALSE 49325
// exit ;
49323: GO 49641
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49325: LD_ADDR_VAR 0 6
49329: PUSH
49330: LD_INT 22
49332: PUSH
49333: LD_VAR 0 1
49337: PPUSH
49338: CALL_OW 255
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 2
49349: PUSH
49350: LD_INT 30
49352: PUSH
49353: LD_INT 36
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 34
49362: PUSH
49363: LD_INT 31
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: LIST
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PPUSH
49379: CALL_OW 69
49383: ST_TO_ADDR
// if not tmp then
49384: LD_VAR 0 6
49388: NOT
49389: IFFALSE 49393
// exit ;
49391: GO 49641
// result := [ ] ;
49393: LD_ADDR_VAR 0 2
49397: PUSH
49398: EMPTY
49399: ST_TO_ADDR
// for i in tmp do
49400: LD_ADDR_VAR 0 3
49404: PUSH
49405: LD_VAR 0 6
49409: PUSH
49410: FOR_IN
49411: IFFALSE 49482
// begin t := UnitsInside ( i ) ;
49413: LD_ADDR_VAR 0 4
49417: PUSH
49418: LD_VAR 0 3
49422: PPUSH
49423: CALL_OW 313
49427: ST_TO_ADDR
// if t then
49428: LD_VAR 0 4
49432: IFFALSE 49480
// for j in t do
49434: LD_ADDR_VAR 0 7
49438: PUSH
49439: LD_VAR 0 4
49443: PUSH
49444: FOR_IN
49445: IFFALSE 49478
// result := Replace ( result , result + 1 , j ) ;
49447: LD_ADDR_VAR 0 2
49451: PUSH
49452: LD_VAR 0 2
49456: PPUSH
49457: LD_VAR 0 2
49461: PUSH
49462: LD_INT 1
49464: PLUS
49465: PPUSH
49466: LD_VAR 0 7
49470: PPUSH
49471: CALL_OW 1
49475: ST_TO_ADDR
49476: GO 49444
49478: POP
49479: POP
// end ;
49480: GO 49410
49482: POP
49483: POP
// if not result then
49484: LD_VAR 0 2
49488: NOT
49489: IFFALSE 49493
// exit ;
49491: GO 49641
// mech := result [ 1 ] ;
49493: LD_ADDR_VAR 0 5
49497: PUSH
49498: LD_VAR 0 2
49502: PUSH
49503: LD_INT 1
49505: ARRAY
49506: ST_TO_ADDR
// if result > 1 then
49507: LD_VAR 0 2
49511: PUSH
49512: LD_INT 1
49514: GREATER
49515: IFFALSE 49627
// begin for i = 2 to result do
49517: LD_ADDR_VAR 0 3
49521: PUSH
49522: DOUBLE
49523: LD_INT 2
49525: DEC
49526: ST_TO_ADDR
49527: LD_VAR 0 2
49531: PUSH
49532: FOR_TO
49533: IFFALSE 49625
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49535: LD_ADDR_VAR 0 4
49539: PUSH
49540: LD_VAR 0 2
49544: PUSH
49545: LD_VAR 0 3
49549: ARRAY
49550: PPUSH
49551: LD_INT 3
49553: PPUSH
49554: CALL_OW 259
49558: PUSH
49559: LD_VAR 0 2
49563: PUSH
49564: LD_VAR 0 3
49568: ARRAY
49569: PPUSH
49570: CALL_OW 432
49574: MINUS
49575: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49576: LD_VAR 0 4
49580: PUSH
49581: LD_VAR 0 5
49585: PPUSH
49586: LD_INT 3
49588: PPUSH
49589: CALL_OW 259
49593: PUSH
49594: LD_VAR 0 5
49598: PPUSH
49599: CALL_OW 432
49603: MINUS
49604: GREATEREQUAL
49605: IFFALSE 49623
// mech := result [ i ] ;
49607: LD_ADDR_VAR 0 5
49611: PUSH
49612: LD_VAR 0 2
49616: PUSH
49617: LD_VAR 0 3
49621: ARRAY
49622: ST_TO_ADDR
// end ;
49623: GO 49532
49625: POP
49626: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49627: LD_VAR 0 1
49631: PPUSH
49632: LD_VAR 0 5
49636: PPUSH
49637: CALL_OW 135
// end ;
49641: LD_VAR 0 2
49645: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49646: LD_INT 0
49648: PPUSH
49649: PPUSH
49650: PPUSH
49651: PPUSH
49652: PPUSH
49653: PPUSH
49654: PPUSH
49655: PPUSH
49656: PPUSH
49657: PPUSH
49658: PPUSH
49659: PPUSH
49660: PPUSH
// result := [ ] ;
49661: LD_ADDR_VAR 0 7
49665: PUSH
49666: EMPTY
49667: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49668: LD_VAR 0 1
49672: PPUSH
49673: CALL_OW 266
49677: PUSH
49678: LD_INT 0
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: IN
49688: NOT
49689: IFFALSE 49693
// exit ;
49691: GO 51333
// if name then
49693: LD_VAR 0 3
49697: IFFALSE 49713
// SetBName ( base_dep , name ) ;
49699: LD_VAR 0 1
49703: PPUSH
49704: LD_VAR 0 3
49708: PPUSH
49709: CALL_OW 500
// base := GetBase ( base_dep ) ;
49713: LD_ADDR_VAR 0 15
49717: PUSH
49718: LD_VAR 0 1
49722: PPUSH
49723: CALL_OW 274
49727: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49728: LD_ADDR_VAR 0 16
49732: PUSH
49733: LD_VAR 0 1
49737: PPUSH
49738: CALL_OW 255
49742: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49743: LD_ADDR_VAR 0 17
49747: PUSH
49748: LD_VAR 0 1
49752: PPUSH
49753: CALL_OW 248
49757: ST_TO_ADDR
// if sources then
49758: LD_VAR 0 5
49762: IFFALSE 49809
// for i = 1 to 3 do
49764: LD_ADDR_VAR 0 8
49768: PUSH
49769: DOUBLE
49770: LD_INT 1
49772: DEC
49773: ST_TO_ADDR
49774: LD_INT 3
49776: PUSH
49777: FOR_TO
49778: IFFALSE 49807
// AddResourceType ( base , i , sources [ i ] ) ;
49780: LD_VAR 0 15
49784: PPUSH
49785: LD_VAR 0 8
49789: PPUSH
49790: LD_VAR 0 5
49794: PUSH
49795: LD_VAR 0 8
49799: ARRAY
49800: PPUSH
49801: CALL_OW 276
49805: GO 49777
49807: POP
49808: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49809: LD_ADDR_VAR 0 18
49813: PUSH
49814: LD_VAR 0 15
49818: PPUSH
49819: LD_VAR 0 2
49823: PPUSH
49824: LD_INT 1
49826: PPUSH
49827: CALL 49068 0 3
49831: ST_TO_ADDR
// InitHc ;
49832: CALL_OW 19
// InitUc ;
49836: CALL_OW 18
// uc_side := side ;
49840: LD_ADDR_OWVAR 20
49844: PUSH
49845: LD_VAR 0 16
49849: ST_TO_ADDR
// uc_nation := nation ;
49850: LD_ADDR_OWVAR 21
49854: PUSH
49855: LD_VAR 0 17
49859: ST_TO_ADDR
// if buildings then
49860: LD_VAR 0 18
49864: IFFALSE 51192
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49866: LD_ADDR_VAR 0 19
49870: PUSH
49871: LD_VAR 0 18
49875: PPUSH
49876: LD_INT 2
49878: PUSH
49879: LD_INT 30
49881: PUSH
49882: LD_INT 29
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 30
49891: PUSH
49892: LD_INT 30
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: LIST
49903: PPUSH
49904: CALL_OW 72
49908: ST_TO_ADDR
// if tmp then
49909: LD_VAR 0 19
49913: IFFALSE 49961
// for i in tmp do
49915: LD_ADDR_VAR 0 8
49919: PUSH
49920: LD_VAR 0 19
49924: PUSH
49925: FOR_IN
49926: IFFALSE 49959
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49928: LD_VAR 0 8
49932: PPUSH
49933: CALL_OW 250
49937: PPUSH
49938: LD_VAR 0 8
49942: PPUSH
49943: CALL_OW 251
49947: PPUSH
49948: LD_VAR 0 16
49952: PPUSH
49953: CALL_OW 441
49957: GO 49925
49959: POP
49960: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49961: LD_VAR 0 18
49965: PPUSH
49966: LD_INT 2
49968: PUSH
49969: LD_INT 30
49971: PUSH
49972: LD_INT 32
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 30
49981: PUSH
49982: LD_INT 33
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: LIST
49993: PPUSH
49994: CALL_OW 72
49998: IFFALSE 50086
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50000: LD_ADDR_VAR 0 8
50004: PUSH
50005: LD_VAR 0 18
50009: PPUSH
50010: LD_INT 2
50012: PUSH
50013: LD_INT 30
50015: PUSH
50016: LD_INT 32
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 30
50025: PUSH
50026: LD_INT 33
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: LIST
50037: PPUSH
50038: CALL_OW 72
50042: PUSH
50043: FOR_IN
50044: IFFALSE 50084
// begin if not GetBWeapon ( i ) then
50046: LD_VAR 0 8
50050: PPUSH
50051: CALL_OW 269
50055: NOT
50056: IFFALSE 50082
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50058: LD_VAR 0 8
50062: PPUSH
50063: LD_VAR 0 8
50067: PPUSH
50068: LD_VAR 0 2
50072: PPUSH
50073: CALL 51338 0 2
50077: PPUSH
50078: CALL_OW 431
// end ;
50082: GO 50043
50084: POP
50085: POP
// end ; for i = 1 to personel do
50086: LD_ADDR_VAR 0 8
50090: PUSH
50091: DOUBLE
50092: LD_INT 1
50094: DEC
50095: ST_TO_ADDR
50096: LD_VAR 0 6
50100: PUSH
50101: FOR_TO
50102: IFFALSE 51172
// begin if i > 4 then
50104: LD_VAR 0 8
50108: PUSH
50109: LD_INT 4
50111: GREATER
50112: IFFALSE 50116
// break ;
50114: GO 51172
// case i of 1 :
50116: LD_VAR 0 8
50120: PUSH
50121: LD_INT 1
50123: DOUBLE
50124: EQUAL
50125: IFTRUE 50129
50127: GO 50209
50129: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50130: LD_ADDR_VAR 0 12
50134: PUSH
50135: LD_VAR 0 18
50139: PPUSH
50140: LD_INT 22
50142: PUSH
50143: LD_VAR 0 16
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 58
50154: PUSH
50155: EMPTY
50156: LIST
50157: PUSH
50158: LD_INT 2
50160: PUSH
50161: LD_INT 30
50163: PUSH
50164: LD_INT 32
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 30
50173: PUSH
50174: LD_INT 4
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 30
50183: PUSH
50184: LD_INT 5
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: LIST
50201: PPUSH
50202: CALL_OW 72
50206: ST_TO_ADDR
50207: GO 50431
50209: LD_INT 2
50211: DOUBLE
50212: EQUAL
50213: IFTRUE 50217
50215: GO 50279
50217: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50218: LD_ADDR_VAR 0 12
50222: PUSH
50223: LD_VAR 0 18
50227: PPUSH
50228: LD_INT 22
50230: PUSH
50231: LD_VAR 0 16
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 2
50242: PUSH
50243: LD_INT 30
50245: PUSH
50246: LD_INT 0
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 30
50255: PUSH
50256: LD_INT 1
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: LIST
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PPUSH
50272: CALL_OW 72
50276: ST_TO_ADDR
50277: GO 50431
50279: LD_INT 3
50281: DOUBLE
50282: EQUAL
50283: IFTRUE 50287
50285: GO 50349
50287: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50288: LD_ADDR_VAR 0 12
50292: PUSH
50293: LD_VAR 0 18
50297: PPUSH
50298: LD_INT 22
50300: PUSH
50301: LD_VAR 0 16
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 2
50312: PUSH
50313: LD_INT 30
50315: PUSH
50316: LD_INT 2
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 30
50325: PUSH
50326: LD_INT 3
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: LIST
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PPUSH
50342: CALL_OW 72
50346: ST_TO_ADDR
50347: GO 50431
50349: LD_INT 4
50351: DOUBLE
50352: EQUAL
50353: IFTRUE 50357
50355: GO 50430
50357: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50358: LD_ADDR_VAR 0 12
50362: PUSH
50363: LD_VAR 0 18
50367: PPUSH
50368: LD_INT 22
50370: PUSH
50371: LD_VAR 0 16
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 2
50382: PUSH
50383: LD_INT 30
50385: PUSH
50386: LD_INT 6
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 30
50395: PUSH
50396: LD_INT 7
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 30
50405: PUSH
50406: LD_INT 8
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PPUSH
50423: CALL_OW 72
50427: ST_TO_ADDR
50428: GO 50431
50430: POP
// if i = 1 then
50431: LD_VAR 0 8
50435: PUSH
50436: LD_INT 1
50438: EQUAL
50439: IFFALSE 50550
// begin tmp := [ ] ;
50441: LD_ADDR_VAR 0 19
50445: PUSH
50446: EMPTY
50447: ST_TO_ADDR
// for j in f do
50448: LD_ADDR_VAR 0 9
50452: PUSH
50453: LD_VAR 0 12
50457: PUSH
50458: FOR_IN
50459: IFFALSE 50532
// if GetBType ( j ) = b_bunker then
50461: LD_VAR 0 9
50465: PPUSH
50466: CALL_OW 266
50470: PUSH
50471: LD_INT 32
50473: EQUAL
50474: IFFALSE 50501
// tmp := Insert ( tmp , 1 , j ) else
50476: LD_ADDR_VAR 0 19
50480: PUSH
50481: LD_VAR 0 19
50485: PPUSH
50486: LD_INT 1
50488: PPUSH
50489: LD_VAR 0 9
50493: PPUSH
50494: CALL_OW 2
50498: ST_TO_ADDR
50499: GO 50530
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50501: LD_ADDR_VAR 0 19
50505: PUSH
50506: LD_VAR 0 19
50510: PPUSH
50511: LD_VAR 0 19
50515: PUSH
50516: LD_INT 1
50518: PLUS
50519: PPUSH
50520: LD_VAR 0 9
50524: PPUSH
50525: CALL_OW 2
50529: ST_TO_ADDR
50530: GO 50458
50532: POP
50533: POP
// if tmp then
50534: LD_VAR 0 19
50538: IFFALSE 50550
// f := tmp ;
50540: LD_ADDR_VAR 0 12
50544: PUSH
50545: LD_VAR 0 19
50549: ST_TO_ADDR
// end ; x := personel [ i ] ;
50550: LD_ADDR_VAR 0 13
50554: PUSH
50555: LD_VAR 0 6
50559: PUSH
50560: LD_VAR 0 8
50564: ARRAY
50565: ST_TO_ADDR
// if x = - 1 then
50566: LD_VAR 0 13
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: EQUAL
50575: IFFALSE 50786
// begin for j in f do
50577: LD_ADDR_VAR 0 9
50581: PUSH
50582: LD_VAR 0 12
50586: PUSH
50587: FOR_IN
50588: IFFALSE 50782
// repeat InitHc ;
50590: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50594: LD_VAR 0 9
50598: PPUSH
50599: CALL_OW 266
50603: PUSH
50604: LD_INT 5
50606: EQUAL
50607: IFFALSE 50677
// begin if UnitsInside ( j ) < 3 then
50609: LD_VAR 0 9
50613: PPUSH
50614: CALL_OW 313
50618: PUSH
50619: LD_INT 3
50621: LESS
50622: IFFALSE 50658
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50624: LD_INT 0
50626: PPUSH
50627: LD_INT 5
50629: PUSH
50630: LD_INT 8
50632: PUSH
50633: LD_INT 9
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: LIST
50640: PUSH
50641: LD_VAR 0 17
50645: ARRAY
50646: PPUSH
50647: LD_VAR 0 4
50651: PPUSH
50652: CALL_OW 380
50656: GO 50675
// PrepareHuman ( false , i , skill ) ;
50658: LD_INT 0
50660: PPUSH
50661: LD_VAR 0 8
50665: PPUSH
50666: LD_VAR 0 4
50670: PPUSH
50671: CALL_OW 380
// end else
50675: GO 50694
// PrepareHuman ( false , i , skill ) ;
50677: LD_INT 0
50679: PPUSH
50680: LD_VAR 0 8
50684: PPUSH
50685: LD_VAR 0 4
50689: PPUSH
50690: CALL_OW 380
// un := CreateHuman ;
50694: LD_ADDR_VAR 0 14
50698: PUSH
50699: CALL_OW 44
50703: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50704: LD_ADDR_VAR 0 7
50708: PUSH
50709: LD_VAR 0 7
50713: PPUSH
50714: LD_INT 1
50716: PPUSH
50717: LD_VAR 0 14
50721: PPUSH
50722: CALL_OW 2
50726: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50727: LD_VAR 0 14
50731: PPUSH
50732: LD_VAR 0 9
50736: PPUSH
50737: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50741: LD_VAR 0 9
50745: PPUSH
50746: CALL_OW 313
50750: PUSH
50751: LD_INT 6
50753: EQUAL
50754: IFTRUE 50778
50756: PUSH
50757: LD_VAR 0 9
50761: PPUSH
50762: CALL_OW 266
50766: PUSH
50767: LD_INT 32
50769: PUSH
50770: LD_INT 31
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: IN
50777: OR
50778: IFFALSE 50590
50780: GO 50587
50782: POP
50783: POP
// end else
50784: GO 51170
// for j = 1 to x do
50786: LD_ADDR_VAR 0 9
50790: PUSH
50791: DOUBLE
50792: LD_INT 1
50794: DEC
50795: ST_TO_ADDR
50796: LD_VAR 0 13
50800: PUSH
50801: FOR_TO
50802: IFFALSE 51168
// begin InitHc ;
50804: CALL_OW 19
// if not f then
50808: LD_VAR 0 12
50812: NOT
50813: IFFALSE 50902
// begin PrepareHuman ( false , i , skill ) ;
50815: LD_INT 0
50817: PPUSH
50818: LD_VAR 0 8
50822: PPUSH
50823: LD_VAR 0 4
50827: PPUSH
50828: CALL_OW 380
// un := CreateHuman ;
50832: LD_ADDR_VAR 0 14
50836: PUSH
50837: CALL_OW 44
50841: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50842: LD_ADDR_VAR 0 7
50846: PUSH
50847: LD_VAR 0 7
50851: PPUSH
50852: LD_INT 1
50854: PPUSH
50855: LD_VAR 0 14
50859: PPUSH
50860: CALL_OW 2
50864: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50865: LD_VAR 0 14
50869: PPUSH
50870: LD_VAR 0 1
50874: PPUSH
50875: CALL_OW 250
50879: PPUSH
50880: LD_VAR 0 1
50884: PPUSH
50885: CALL_OW 251
50889: PPUSH
50890: LD_INT 10
50892: PPUSH
50893: LD_INT 0
50895: PPUSH
50896: CALL_OW 50
// continue ;
50900: GO 50801
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50902: LD_VAR 0 12
50906: PUSH
50907: LD_INT 1
50909: ARRAY
50910: PPUSH
50911: CALL_OW 313
50915: IFFALSE 50943
50917: PUSH
50918: LD_VAR 0 12
50922: PUSH
50923: LD_INT 1
50925: ARRAY
50926: PPUSH
50927: CALL_OW 266
50931: PUSH
50932: LD_INT 32
50934: PUSH
50935: LD_INT 31
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: IN
50942: AND
50943: IFTRUE 50964
50945: PUSH
50946: LD_VAR 0 12
50950: PUSH
50951: LD_INT 1
50953: ARRAY
50954: PPUSH
50955: CALL_OW 313
50959: PUSH
50960: LD_INT 6
50962: EQUAL
50963: OR
50964: IFFALSE 50984
// f := Delete ( f , 1 ) ;
50966: LD_ADDR_VAR 0 12
50970: PUSH
50971: LD_VAR 0 12
50975: PPUSH
50976: LD_INT 1
50978: PPUSH
50979: CALL_OW 3
50983: ST_TO_ADDR
// if not f then
50984: LD_VAR 0 12
50988: NOT
50989: IFFALSE 51007
// begin x := x + 2 ;
50991: LD_ADDR_VAR 0 13
50995: PUSH
50996: LD_VAR 0 13
51000: PUSH
51001: LD_INT 2
51003: PLUS
51004: ST_TO_ADDR
// continue ;
51005: GO 50801
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51007: LD_VAR 0 12
51011: PUSH
51012: LD_INT 1
51014: ARRAY
51015: PPUSH
51016: CALL_OW 266
51020: PUSH
51021: LD_INT 5
51023: EQUAL
51024: IFFALSE 51098
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51026: LD_VAR 0 12
51030: PUSH
51031: LD_INT 1
51033: ARRAY
51034: PPUSH
51035: CALL_OW 313
51039: PUSH
51040: LD_INT 3
51042: LESS
51043: IFFALSE 51079
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51045: LD_INT 0
51047: PPUSH
51048: LD_INT 5
51050: PUSH
51051: LD_INT 8
51053: PUSH
51054: LD_INT 9
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: LIST
51061: PUSH
51062: LD_VAR 0 17
51066: ARRAY
51067: PPUSH
51068: LD_VAR 0 4
51072: PPUSH
51073: CALL_OW 380
51077: GO 51096
// PrepareHuman ( false , i , skill ) ;
51079: LD_INT 0
51081: PPUSH
51082: LD_VAR 0 8
51086: PPUSH
51087: LD_VAR 0 4
51091: PPUSH
51092: CALL_OW 380
// end else
51096: GO 51115
// PrepareHuman ( false , i , skill ) ;
51098: LD_INT 0
51100: PPUSH
51101: LD_VAR 0 8
51105: PPUSH
51106: LD_VAR 0 4
51110: PPUSH
51111: CALL_OW 380
// un := CreateHuman ;
51115: LD_ADDR_VAR 0 14
51119: PUSH
51120: CALL_OW 44
51124: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51125: LD_ADDR_VAR 0 7
51129: PUSH
51130: LD_VAR 0 7
51134: PPUSH
51135: LD_INT 1
51137: PPUSH
51138: LD_VAR 0 14
51142: PPUSH
51143: CALL_OW 2
51147: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51148: LD_VAR 0 14
51152: PPUSH
51153: LD_VAR 0 12
51157: PUSH
51158: LD_INT 1
51160: ARRAY
51161: PPUSH
51162: CALL_OW 52
// end ;
51166: GO 50801
51168: POP
51169: POP
// end ;
51170: GO 50101
51172: POP
51173: POP
// result := result ^ buildings ;
51174: LD_ADDR_VAR 0 7
51178: PUSH
51179: LD_VAR 0 7
51183: PUSH
51184: LD_VAR 0 18
51188: ADD
51189: ST_TO_ADDR
// end else
51190: GO 51333
// begin for i = 1 to personel do
51192: LD_ADDR_VAR 0 8
51196: PUSH
51197: DOUBLE
51198: LD_INT 1
51200: DEC
51201: ST_TO_ADDR
51202: LD_VAR 0 6
51206: PUSH
51207: FOR_TO
51208: IFFALSE 51331
// begin if i > 4 then
51210: LD_VAR 0 8
51214: PUSH
51215: LD_INT 4
51217: GREATER
51218: IFFALSE 51222
// break ;
51220: GO 51331
// x := personel [ i ] ;
51222: LD_ADDR_VAR 0 13
51226: PUSH
51227: LD_VAR 0 6
51231: PUSH
51232: LD_VAR 0 8
51236: ARRAY
51237: ST_TO_ADDR
// if x = - 1 then
51238: LD_VAR 0 13
51242: PUSH
51243: LD_INT 1
51245: NEG
51246: EQUAL
51247: IFFALSE 51251
// continue ;
51249: GO 51207
// PrepareHuman ( false , i , skill ) ;
51251: LD_INT 0
51253: PPUSH
51254: LD_VAR 0 8
51258: PPUSH
51259: LD_VAR 0 4
51263: PPUSH
51264: CALL_OW 380
// un := CreateHuman ;
51268: LD_ADDR_VAR 0 14
51272: PUSH
51273: CALL_OW 44
51277: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51278: LD_VAR 0 14
51282: PPUSH
51283: LD_VAR 0 1
51287: PPUSH
51288: CALL_OW 250
51292: PPUSH
51293: LD_VAR 0 1
51297: PPUSH
51298: CALL_OW 251
51302: PPUSH
51303: LD_INT 10
51305: PPUSH
51306: LD_INT 0
51308: PPUSH
51309: CALL_OW 50
// result := result ^ un ;
51313: LD_ADDR_VAR 0 7
51317: PUSH
51318: LD_VAR 0 7
51322: PUSH
51323: LD_VAR 0 14
51327: ADD
51328: ST_TO_ADDR
// end ;
51329: GO 51207
51331: POP
51332: POP
// end ; end ;
51333: LD_VAR 0 7
51337: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51338: LD_INT 0
51340: PPUSH
51341: PPUSH
51342: PPUSH
51343: PPUSH
51344: PPUSH
51345: PPUSH
51346: PPUSH
51347: PPUSH
51348: PPUSH
51349: PPUSH
51350: PPUSH
51351: PPUSH
51352: PPUSH
51353: PPUSH
51354: PPUSH
51355: PPUSH
// result := false ;
51356: LD_ADDR_VAR 0 3
51360: PUSH
51361: LD_INT 0
51363: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51364: LD_VAR 0 1
51368: NOT
51369: IFTRUE 51394
51371: PUSH
51372: LD_VAR 0 1
51376: PPUSH
51377: CALL_OW 266
51381: PUSH
51382: LD_INT 32
51384: PUSH
51385: LD_INT 33
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: IN
51392: NOT
51393: OR
51394: IFFALSE 51398
// exit ;
51396: GO 52533
// nat := GetNation ( tower ) ;
51398: LD_ADDR_VAR 0 12
51402: PUSH
51403: LD_VAR 0 1
51407: PPUSH
51408: CALL_OW 248
51412: ST_TO_ADDR
// side := GetSide ( tower ) ;
51413: LD_ADDR_VAR 0 16
51417: PUSH
51418: LD_VAR 0 1
51422: PPUSH
51423: CALL_OW 255
51427: ST_TO_ADDR
// x := GetX ( tower ) ;
51428: LD_ADDR_VAR 0 10
51432: PUSH
51433: LD_VAR 0 1
51437: PPUSH
51438: CALL_OW 250
51442: ST_TO_ADDR
// y := GetY ( tower ) ;
51443: LD_ADDR_VAR 0 11
51447: PUSH
51448: LD_VAR 0 1
51452: PPUSH
51453: CALL_OW 251
51457: ST_TO_ADDR
// if not x or not y then
51458: LD_VAR 0 10
51462: NOT
51463: IFTRUE 51472
51465: PUSH
51466: LD_VAR 0 11
51470: NOT
51471: OR
51472: IFFALSE 51476
// exit ;
51474: GO 52533
// weapon := 0 ;
51476: LD_ADDR_VAR 0 18
51480: PUSH
51481: LD_INT 0
51483: ST_TO_ADDR
// fac_list := [ ] ;
51484: LD_ADDR_VAR 0 17
51488: PUSH
51489: EMPTY
51490: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51491: LD_ADDR_VAR 0 6
51495: PUSH
51496: LD_VAR 0 1
51500: PPUSH
51501: CALL_OW 274
51505: PPUSH
51506: LD_VAR 0 2
51510: PPUSH
51511: LD_INT 0
51513: PPUSH
51514: CALL 49068 0 3
51518: PPUSH
51519: LD_INT 30
51521: PUSH
51522: LD_INT 3
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PPUSH
51529: CALL_OW 72
51533: ST_TO_ADDR
// if not factories then
51534: LD_VAR 0 6
51538: NOT
51539: IFFALSE 51543
// exit ;
51541: GO 52533
// for i in factories do
51543: LD_ADDR_VAR 0 8
51547: PUSH
51548: LD_VAR 0 6
51552: PUSH
51553: FOR_IN
51554: IFFALSE 51579
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51556: LD_ADDR_VAR 0 17
51560: PUSH
51561: LD_VAR 0 17
51565: PUSH
51566: LD_VAR 0 8
51570: PPUSH
51571: CALL_OW 478
51575: UNION
51576: ST_TO_ADDR
51577: GO 51553
51579: POP
51580: POP
// if not fac_list then
51581: LD_VAR 0 17
51585: NOT
51586: IFFALSE 51590
// exit ;
51588: GO 52533
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51590: LD_ADDR_VAR 0 5
51594: PUSH
51595: LD_INT 4
51597: PUSH
51598: LD_INT 5
51600: PUSH
51601: LD_INT 9
51603: PUSH
51604: LD_INT 10
51606: PUSH
51607: LD_INT 6
51609: PUSH
51610: LD_INT 7
51612: PUSH
51613: LD_INT 11
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 27
51627: PUSH
51628: LD_INT 28
51630: PUSH
51631: LD_INT 26
51633: PUSH
51634: LD_INT 30
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 43
51645: PUSH
51646: LD_INT 44
51648: PUSH
51649: LD_INT 46
51651: PUSH
51652: LD_INT 45
51654: PUSH
51655: LD_INT 47
51657: PUSH
51658: LD_INT 49
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: LIST
51673: PUSH
51674: LD_VAR 0 12
51678: ARRAY
51679: ST_TO_ADDR
// list := list isect fac_list ;
51680: LD_ADDR_VAR 0 5
51684: PUSH
51685: LD_VAR 0 5
51689: PUSH
51690: LD_VAR 0 17
51694: ISECT
51695: ST_TO_ADDR
// if not list then
51696: LD_VAR 0 5
51700: NOT
51701: IFFALSE 51705
// exit ;
51703: GO 52533
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51705: LD_VAR 0 12
51709: PUSH
51710: LD_INT 3
51712: EQUAL
51713: IFFALSE 51725
51715: PUSH
51716: LD_INT 49
51718: PUSH
51719: LD_VAR 0 5
51723: IN
51724: AND
51725: IFFALSE 51745
51727: PUSH
51728: LD_INT 31
51730: PPUSH
51731: LD_VAR 0 16
51735: PPUSH
51736: CALL_OW 321
51740: PUSH
51741: LD_INT 2
51743: EQUAL
51744: AND
51745: IFFALSE 51805
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51747: LD_INT 22
51749: PUSH
51750: LD_VAR 0 16
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 35
51761: PUSH
51762: LD_INT 49
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 91
51771: PUSH
51772: LD_VAR 0 1
51776: PUSH
51777: LD_INT 10
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: LIST
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: LIST
51789: PPUSH
51790: CALL_OW 69
51794: NOT
51795: IFFALSE 51805
// weapon := ru_time_lapser ;
51797: LD_ADDR_VAR 0 18
51801: PUSH
51802: LD_INT 49
51804: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51805: LD_VAR 0 12
51809: PUSH
51810: LD_INT 1
51812: PUSH
51813: LD_INT 2
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: IN
51820: IFFALSE 51844
51822: PUSH
51823: LD_INT 11
51825: PUSH
51826: LD_VAR 0 5
51830: IN
51831: IFTRUE 51843
51833: PUSH
51834: LD_INT 30
51836: PUSH
51837: LD_VAR 0 5
51841: IN
51842: OR
51843: AND
51844: IFFALSE 51864
51846: PUSH
51847: LD_INT 6
51849: PPUSH
51850: LD_VAR 0 16
51854: PPUSH
51855: CALL_OW 321
51859: PUSH
51860: LD_INT 2
51862: EQUAL
51863: AND
51864: IFFALSE 52031
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51866: LD_INT 22
51868: PUSH
51869: LD_VAR 0 16
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 2
51880: PUSH
51881: LD_INT 35
51883: PUSH
51884: LD_INT 11
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 35
51893: PUSH
51894: LD_INT 30
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 91
51908: PUSH
51909: LD_VAR 0 1
51913: PUSH
51914: LD_INT 18
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: LIST
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: LIST
51926: PPUSH
51927: CALL_OW 69
51931: NOT
51932: IFFALSE 52008
51934: PUSH
51935: LD_INT 22
51937: PUSH
51938: LD_VAR 0 16
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 2
51949: PUSH
51950: LD_INT 30
51952: PUSH
51953: LD_INT 32
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 30
51962: PUSH
51963: LD_INT 33
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 91
51977: PUSH
51978: LD_VAR 0 1
51982: PUSH
51983: LD_INT 12
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: LIST
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: LIST
51995: PUSH
51996: EMPTY
51997: LIST
51998: PPUSH
51999: CALL_OW 69
52003: PUSH
52004: LD_INT 2
52006: GREATER
52007: AND
52008: IFFALSE 52031
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52010: LD_ADDR_VAR 0 18
52014: PUSH
52015: LD_INT 11
52017: PUSH
52018: LD_INT 30
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_VAR 0 12
52029: ARRAY
52030: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52031: LD_VAR 0 18
52035: NOT
52036: IFFALSE 52056
52038: PUSH
52039: LD_INT 40
52041: PPUSH
52042: LD_VAR 0 16
52046: PPUSH
52047: CALL_OW 321
52051: PUSH
52052: LD_INT 2
52054: EQUAL
52055: AND
52056: IFFALSE 52092
52058: PUSH
52059: LD_INT 7
52061: PUSH
52062: LD_VAR 0 5
52066: IN
52067: IFTRUE 52079
52069: PUSH
52070: LD_INT 28
52072: PUSH
52073: LD_VAR 0 5
52077: IN
52078: OR
52079: IFTRUE 52091
52081: PUSH
52082: LD_INT 45
52084: PUSH
52085: LD_VAR 0 5
52089: IN
52090: OR
52091: AND
52092: IFFALSE 52346
// begin hex := GetHexInfo ( x , y ) ;
52094: LD_ADDR_VAR 0 4
52098: PUSH
52099: LD_VAR 0 10
52103: PPUSH
52104: LD_VAR 0 11
52108: PPUSH
52109: CALL_OW 546
52113: ST_TO_ADDR
// if hex [ 1 ] then
52114: LD_VAR 0 4
52118: PUSH
52119: LD_INT 1
52121: ARRAY
52122: IFFALSE 52126
// exit ;
52124: GO 52533
// height := hex [ 2 ] ;
52126: LD_ADDR_VAR 0 15
52130: PUSH
52131: LD_VAR 0 4
52135: PUSH
52136: LD_INT 2
52138: ARRAY
52139: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52140: LD_ADDR_VAR 0 14
52144: PUSH
52145: LD_INT 0
52147: PUSH
52148: LD_INT 2
52150: PUSH
52151: LD_INT 3
52153: PUSH
52154: LD_INT 5
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: ST_TO_ADDR
// for i in tmp do
52163: LD_ADDR_VAR 0 8
52167: PUSH
52168: LD_VAR 0 14
52172: PUSH
52173: FOR_IN
52174: IFFALSE 52344
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52176: LD_ADDR_VAR 0 9
52180: PUSH
52181: LD_VAR 0 10
52185: PPUSH
52186: LD_VAR 0 8
52190: PPUSH
52191: LD_INT 5
52193: PPUSH
52194: CALL_OW 272
52198: PUSH
52199: LD_VAR 0 11
52203: PPUSH
52204: LD_VAR 0 8
52208: PPUSH
52209: LD_INT 5
52211: PPUSH
52212: CALL_OW 273
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52221: LD_VAR 0 9
52225: PUSH
52226: LD_INT 1
52228: ARRAY
52229: PPUSH
52230: LD_VAR 0 9
52234: PUSH
52235: LD_INT 2
52237: ARRAY
52238: PPUSH
52239: CALL_OW 488
52243: IFFALSE 52342
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52245: LD_ADDR_VAR 0 4
52249: PUSH
52250: LD_VAR 0 9
52254: PUSH
52255: LD_INT 1
52257: ARRAY
52258: PPUSH
52259: LD_VAR 0 9
52263: PUSH
52264: LD_INT 2
52266: ARRAY
52267: PPUSH
52268: CALL_OW 546
52272: ST_TO_ADDR
// if hex [ 1 ] then
52273: LD_VAR 0 4
52277: PUSH
52278: LD_INT 1
52280: ARRAY
52281: IFFALSE 52285
// continue ;
52283: GO 52173
// h := hex [ 2 ] ;
52285: LD_ADDR_VAR 0 13
52289: PUSH
52290: LD_VAR 0 4
52294: PUSH
52295: LD_INT 2
52297: ARRAY
52298: ST_TO_ADDR
// if h + 7 < height then
52299: LD_VAR 0 13
52303: PUSH
52304: LD_INT 7
52306: PLUS
52307: PUSH
52308: LD_VAR 0 15
52312: LESS
52313: IFFALSE 52342
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52315: LD_ADDR_VAR 0 18
52319: PUSH
52320: LD_INT 7
52322: PUSH
52323: LD_INT 28
52325: PUSH
52326: LD_INT 45
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: LIST
52333: PUSH
52334: LD_VAR 0 12
52338: ARRAY
52339: ST_TO_ADDR
// break ;
52340: GO 52344
// end ; end ; end ;
52342: GO 52173
52344: POP
52345: POP
// end ; if not weapon then
52346: LD_VAR 0 18
52350: NOT
52351: IFFALSE 52411
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52353: LD_ADDR_VAR 0 5
52357: PUSH
52358: LD_VAR 0 5
52362: PUSH
52363: LD_INT 11
52365: PUSH
52366: LD_INT 30
52368: PUSH
52369: LD_INT 49
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: LIST
52376: DIFF
52377: ST_TO_ADDR
// if not list then
52378: LD_VAR 0 5
52382: NOT
52383: IFFALSE 52387
// exit ;
52385: GO 52533
// weapon := list [ rand ( 1 , list ) ] ;
52387: LD_ADDR_VAR 0 18
52391: PUSH
52392: LD_VAR 0 5
52396: PUSH
52397: LD_INT 1
52399: PPUSH
52400: LD_VAR 0 5
52404: PPUSH
52405: CALL_OW 12
52409: ARRAY
52410: ST_TO_ADDR
// end ; if weapon then
52411: LD_VAR 0 18
52415: IFFALSE 52533
// begin tmp := CostOfWeapon ( weapon ) ;
52417: LD_ADDR_VAR 0 14
52421: PUSH
52422: LD_VAR 0 18
52426: PPUSH
52427: CALL_OW 451
52431: ST_TO_ADDR
// j := GetBase ( tower ) ;
52432: LD_ADDR_VAR 0 9
52436: PUSH
52437: LD_VAR 0 1
52441: PPUSH
52442: CALL_OW 274
52446: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52447: LD_VAR 0 9
52451: PPUSH
52452: LD_INT 1
52454: PPUSH
52455: CALL_OW 275
52459: PUSH
52460: LD_VAR 0 14
52464: PUSH
52465: LD_INT 1
52467: ARRAY
52468: GREATEREQUAL
52469: IFFALSE 52495
52471: PUSH
52472: LD_VAR 0 9
52476: PPUSH
52477: LD_INT 2
52479: PPUSH
52480: CALL_OW 275
52484: PUSH
52485: LD_VAR 0 14
52489: PUSH
52490: LD_INT 2
52492: ARRAY
52493: GREATEREQUAL
52494: AND
52495: IFFALSE 52521
52497: PUSH
52498: LD_VAR 0 9
52502: PPUSH
52503: LD_INT 3
52505: PPUSH
52506: CALL_OW 275
52510: PUSH
52511: LD_VAR 0 14
52515: PUSH
52516: LD_INT 3
52518: ARRAY
52519: GREATEREQUAL
52520: AND
52521: IFFALSE 52533
// result := weapon ;
52523: LD_ADDR_VAR 0 3
52527: PUSH
52528: LD_VAR 0 18
52532: ST_TO_ADDR
// end ; end ;
52533: LD_VAR 0 3
52537: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52538: LD_INT 0
52540: PPUSH
52541: PPUSH
// result := true ;
52542: LD_ADDR_VAR 0 3
52546: PUSH
52547: LD_INT 1
52549: ST_TO_ADDR
// if array1 = array2 then
52550: LD_VAR 0 1
52554: PUSH
52555: LD_VAR 0 2
52559: EQUAL
52560: IFFALSE 52620
// begin for i = 1 to array1 do
52562: LD_ADDR_VAR 0 4
52566: PUSH
52567: DOUBLE
52568: LD_INT 1
52570: DEC
52571: ST_TO_ADDR
52572: LD_VAR 0 1
52576: PUSH
52577: FOR_TO
52578: IFFALSE 52616
// if array1 [ i ] <> array2 [ i ] then
52580: LD_VAR 0 1
52584: PUSH
52585: LD_VAR 0 4
52589: ARRAY
52590: PUSH
52591: LD_VAR 0 2
52595: PUSH
52596: LD_VAR 0 4
52600: ARRAY
52601: NONEQUAL
52602: IFFALSE 52614
// begin result := false ;
52604: LD_ADDR_VAR 0 3
52608: PUSH
52609: LD_INT 0
52611: ST_TO_ADDR
// break ;
52612: GO 52616
// end ;
52614: GO 52577
52616: POP
52617: POP
// end else
52618: GO 52628
// result := false ;
52620: LD_ADDR_VAR 0 3
52624: PUSH
52625: LD_INT 0
52627: ST_TO_ADDR
// end ;
52628: LD_VAR 0 3
52632: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52633: LD_INT 0
52635: PPUSH
52636: PPUSH
// if not array1 or not array2 then
52637: LD_VAR 0 1
52641: NOT
52642: IFTRUE 52651
52644: PUSH
52645: LD_VAR 0 2
52649: NOT
52650: OR
52651: IFFALSE 52655
// exit ;
52653: GO 52719
// result := true ;
52655: LD_ADDR_VAR 0 3
52659: PUSH
52660: LD_INT 1
52662: ST_TO_ADDR
// for i = 1 to array1 do
52663: LD_ADDR_VAR 0 4
52667: PUSH
52668: DOUBLE
52669: LD_INT 1
52671: DEC
52672: ST_TO_ADDR
52673: LD_VAR 0 1
52677: PUSH
52678: FOR_TO
52679: IFFALSE 52717
// if array1 [ i ] <> array2 [ i ] then
52681: LD_VAR 0 1
52685: PUSH
52686: LD_VAR 0 4
52690: ARRAY
52691: PUSH
52692: LD_VAR 0 2
52696: PUSH
52697: LD_VAR 0 4
52701: ARRAY
52702: NONEQUAL
52703: IFFALSE 52715
// begin result := false ;
52705: LD_ADDR_VAR 0 3
52709: PUSH
52710: LD_INT 0
52712: ST_TO_ADDR
// break ;
52713: GO 52717
// end ;
52715: GO 52678
52717: POP
52718: POP
// end ;
52719: LD_VAR 0 3
52723: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52724: LD_INT 0
52726: PPUSH
52727: PPUSH
52728: PPUSH
// pom := GetBase ( fac ) ;
52729: LD_ADDR_VAR 0 5
52733: PUSH
52734: LD_VAR 0 1
52738: PPUSH
52739: CALL_OW 274
52743: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52744: LD_ADDR_VAR 0 4
52748: PUSH
52749: LD_VAR 0 2
52753: PUSH
52754: LD_INT 1
52756: ARRAY
52757: PPUSH
52758: LD_VAR 0 2
52762: PUSH
52763: LD_INT 2
52765: ARRAY
52766: PPUSH
52767: LD_VAR 0 2
52771: PUSH
52772: LD_INT 3
52774: ARRAY
52775: PPUSH
52776: LD_VAR 0 2
52780: PUSH
52781: LD_INT 4
52783: ARRAY
52784: PPUSH
52785: CALL_OW 449
52789: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52790: LD_ADDR_VAR 0 3
52794: PUSH
52795: LD_VAR 0 5
52799: PPUSH
52800: LD_INT 1
52802: PPUSH
52803: CALL_OW 275
52807: PUSH
52808: LD_VAR 0 4
52812: PUSH
52813: LD_INT 1
52815: ARRAY
52816: GREATEREQUAL
52817: IFFALSE 52843
52819: PUSH
52820: LD_VAR 0 5
52824: PPUSH
52825: LD_INT 2
52827: PPUSH
52828: CALL_OW 275
52832: PUSH
52833: LD_VAR 0 4
52837: PUSH
52838: LD_INT 2
52840: ARRAY
52841: GREATEREQUAL
52842: AND
52843: IFFALSE 52869
52845: PUSH
52846: LD_VAR 0 5
52850: PPUSH
52851: LD_INT 3
52853: PPUSH
52854: CALL_OW 275
52858: PUSH
52859: LD_VAR 0 4
52863: PUSH
52864: LD_INT 3
52866: ARRAY
52867: GREATEREQUAL
52868: AND
52869: ST_TO_ADDR
// end ;
52870: LD_VAR 0 3
52874: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52875: LD_INT 0
52877: PPUSH
52878: PPUSH
52879: PPUSH
52880: PPUSH
// pom := GetBase ( building ) ;
52881: LD_ADDR_VAR 0 3
52885: PUSH
52886: LD_VAR 0 1
52890: PPUSH
52891: CALL_OW 274
52895: ST_TO_ADDR
// if not pom then
52896: LD_VAR 0 3
52900: NOT
52901: IFFALSE 52905
// exit ;
52903: GO 53079
// btype := GetBType ( building ) ;
52905: LD_ADDR_VAR 0 5
52909: PUSH
52910: LD_VAR 0 1
52914: PPUSH
52915: CALL_OW 266
52919: ST_TO_ADDR
// if btype = b_armoury then
52920: LD_VAR 0 5
52924: PUSH
52925: LD_INT 4
52927: EQUAL
52928: IFFALSE 52938
// btype := b_barracks ;
52930: LD_ADDR_VAR 0 5
52934: PUSH
52935: LD_INT 5
52937: ST_TO_ADDR
// if btype = b_depot then
52938: LD_VAR 0 5
52942: PUSH
52943: LD_INT 0
52945: EQUAL
52946: IFFALSE 52956
// btype := b_warehouse ;
52948: LD_ADDR_VAR 0 5
52952: PUSH
52953: LD_INT 1
52955: ST_TO_ADDR
// if btype = b_workshop then
52956: LD_VAR 0 5
52960: PUSH
52961: LD_INT 2
52963: EQUAL
52964: IFFALSE 52974
// btype := b_factory ;
52966: LD_ADDR_VAR 0 5
52970: PUSH
52971: LD_INT 3
52973: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52974: LD_ADDR_VAR 0 4
52978: PUSH
52979: LD_VAR 0 5
52983: PPUSH
52984: LD_VAR 0 1
52988: PPUSH
52989: CALL_OW 248
52993: PPUSH
52994: CALL_OW 450
52998: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52999: LD_ADDR_VAR 0 2
53003: PUSH
53004: LD_VAR 0 3
53008: PPUSH
53009: LD_INT 1
53011: PPUSH
53012: CALL_OW 275
53016: PUSH
53017: LD_VAR 0 4
53021: PUSH
53022: LD_INT 1
53024: ARRAY
53025: GREATEREQUAL
53026: IFFALSE 53052
53028: PUSH
53029: LD_VAR 0 3
53033: PPUSH
53034: LD_INT 2
53036: PPUSH
53037: CALL_OW 275
53041: PUSH
53042: LD_VAR 0 4
53046: PUSH
53047: LD_INT 2
53049: ARRAY
53050: GREATEREQUAL
53051: AND
53052: IFFALSE 53078
53054: PUSH
53055: LD_VAR 0 3
53059: PPUSH
53060: LD_INT 3
53062: PPUSH
53063: CALL_OW 275
53067: PUSH
53068: LD_VAR 0 4
53072: PUSH
53073: LD_INT 3
53075: ARRAY
53076: GREATEREQUAL
53077: AND
53078: ST_TO_ADDR
// end ;
53079: LD_VAR 0 2
53083: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53084: LD_INT 0
53086: PPUSH
53087: PPUSH
53088: PPUSH
// pom := GetBase ( building ) ;
53089: LD_ADDR_VAR 0 4
53093: PUSH
53094: LD_VAR 0 1
53098: PPUSH
53099: CALL_OW 274
53103: ST_TO_ADDR
// if not pom then
53104: LD_VAR 0 4
53108: NOT
53109: IFFALSE 53113
// exit ;
53111: GO 53218
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53113: LD_ADDR_VAR 0 5
53117: PUSH
53118: LD_VAR 0 2
53122: PPUSH
53123: LD_VAR 0 1
53127: PPUSH
53128: CALL_OW 248
53132: PPUSH
53133: CALL_OW 450
53137: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53138: LD_ADDR_VAR 0 3
53142: PUSH
53143: LD_VAR 0 4
53147: PPUSH
53148: LD_INT 1
53150: PPUSH
53151: CALL_OW 275
53155: PUSH
53156: LD_VAR 0 5
53160: PUSH
53161: LD_INT 1
53163: ARRAY
53164: GREATEREQUAL
53165: IFFALSE 53191
53167: PUSH
53168: LD_VAR 0 4
53172: PPUSH
53173: LD_INT 2
53175: PPUSH
53176: CALL_OW 275
53180: PUSH
53181: LD_VAR 0 5
53185: PUSH
53186: LD_INT 2
53188: ARRAY
53189: GREATEREQUAL
53190: AND
53191: IFFALSE 53217
53193: PUSH
53194: LD_VAR 0 4
53198: PPUSH
53199: LD_INT 3
53201: PPUSH
53202: CALL_OW 275
53206: PUSH
53207: LD_VAR 0 5
53211: PUSH
53212: LD_INT 3
53214: ARRAY
53215: GREATEREQUAL
53216: AND
53217: ST_TO_ADDR
// end ;
53218: LD_VAR 0 3
53222: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53223: LD_INT 0
53225: PPUSH
53226: PPUSH
53227: PPUSH
53228: PPUSH
53229: PPUSH
53230: PPUSH
53231: PPUSH
53232: PPUSH
53233: PPUSH
53234: PPUSH
53235: PPUSH
// result := false ;
53236: LD_ADDR_VAR 0 8
53240: PUSH
53241: LD_INT 0
53243: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53244: LD_VAR 0 5
53248: NOT
53249: IFTRUE 53258
53251: PUSH
53252: LD_VAR 0 1
53256: NOT
53257: OR
53258: IFTRUE 53267
53260: PUSH
53261: LD_VAR 0 2
53265: NOT
53266: OR
53267: IFTRUE 53276
53269: PUSH
53270: LD_VAR 0 3
53274: NOT
53275: OR
53276: IFFALSE 53280
// exit ;
53278: GO 54106
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53280: LD_ADDR_VAR 0 14
53284: PUSH
53285: LD_VAR 0 1
53289: PPUSH
53290: LD_VAR 0 2
53294: PPUSH
53295: LD_VAR 0 3
53299: PPUSH
53300: LD_VAR 0 4
53304: PPUSH
53305: LD_VAR 0 5
53309: PUSH
53310: LD_INT 1
53312: ARRAY
53313: PPUSH
53314: CALL_OW 248
53318: PPUSH
53319: LD_INT 0
53321: PPUSH
53322: CALL 55387 0 6
53326: ST_TO_ADDR
// if not hexes then
53327: LD_VAR 0 14
53331: NOT
53332: IFFALSE 53336
// exit ;
53334: GO 54106
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53336: LD_ADDR_VAR 0 17
53340: PUSH
53341: LD_VAR 0 5
53345: PPUSH
53346: LD_INT 22
53348: PUSH
53349: LD_VAR 0 13
53353: PPUSH
53354: CALL_OW 255
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 2
53365: PUSH
53366: LD_INT 30
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 30
53378: PUSH
53379: LD_INT 1
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: LIST
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PPUSH
53395: CALL_OW 72
53399: ST_TO_ADDR
// for i = 1 to hexes do
53400: LD_ADDR_VAR 0 9
53404: PUSH
53405: DOUBLE
53406: LD_INT 1
53408: DEC
53409: ST_TO_ADDR
53410: LD_VAR 0 14
53414: PUSH
53415: FOR_TO
53416: IFFALSE 54104
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53418: LD_ADDR_VAR 0 13
53422: PUSH
53423: LD_VAR 0 14
53427: PUSH
53428: LD_VAR 0 9
53432: ARRAY
53433: PUSH
53434: LD_INT 1
53436: ARRAY
53437: PPUSH
53438: LD_VAR 0 14
53442: PUSH
53443: LD_VAR 0 9
53447: ARRAY
53448: PUSH
53449: LD_INT 2
53451: ARRAY
53452: PPUSH
53453: CALL_OW 428
53457: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53458: LD_VAR 0 14
53462: PUSH
53463: LD_VAR 0 9
53467: ARRAY
53468: PUSH
53469: LD_INT 1
53471: ARRAY
53472: PPUSH
53473: LD_VAR 0 14
53477: PUSH
53478: LD_VAR 0 9
53482: ARRAY
53483: PUSH
53484: LD_INT 2
53486: ARRAY
53487: PPUSH
53488: CALL_OW 351
53492: IFTRUE 53531
53494: PUSH
53495: LD_VAR 0 14
53499: PUSH
53500: LD_VAR 0 9
53504: ARRAY
53505: PUSH
53506: LD_INT 1
53508: ARRAY
53509: PPUSH
53510: LD_VAR 0 14
53514: PUSH
53515: LD_VAR 0 9
53519: ARRAY
53520: PUSH
53521: LD_INT 2
53523: ARRAY
53524: PPUSH
53525: CALL_OW 488
53529: NOT
53530: OR
53531: IFTRUE 53548
53533: PUSH
53534: LD_VAR 0 13
53538: PPUSH
53539: CALL_OW 247
53543: PUSH
53544: LD_INT 3
53546: EQUAL
53547: OR
53548: IFFALSE 53554
// exit ;
53550: POP
53551: POP
53552: GO 54106
// if not tmp then
53554: LD_VAR 0 13
53558: NOT
53559: IFFALSE 53563
// continue ;
53561: GO 53415
// result := true ;
53563: LD_ADDR_VAR 0 8
53567: PUSH
53568: LD_INT 1
53570: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53571: LD_VAR 0 6
53575: IFFALSE 53592
53577: PUSH
53578: LD_VAR 0 13
53582: PPUSH
53583: CALL_OW 247
53587: PUSH
53588: LD_INT 2
53590: EQUAL
53591: AND
53592: IFFALSE 53609
53594: PUSH
53595: LD_VAR 0 13
53599: PPUSH
53600: CALL_OW 263
53604: PUSH
53605: LD_INT 1
53607: EQUAL
53608: AND
53609: IFFALSE 53773
// begin if IsDrivenBy ( tmp ) then
53611: LD_VAR 0 13
53615: PPUSH
53616: CALL_OW 311
53620: IFFALSE 53624
// continue ;
53622: GO 53415
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53624: LD_VAR 0 6
53628: PPUSH
53629: LD_INT 3
53631: PUSH
53632: LD_INT 60
53634: PUSH
53635: EMPTY
53636: LIST
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 3
53644: PUSH
53645: LD_INT 55
53647: PUSH
53648: EMPTY
53649: LIST
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PPUSH
53659: CALL_OW 72
53663: IFFALSE 53771
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53665: LD_ADDR_VAR 0 18
53669: PUSH
53670: LD_VAR 0 6
53674: PPUSH
53675: LD_INT 3
53677: PUSH
53678: LD_INT 60
53680: PUSH
53681: EMPTY
53682: LIST
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 3
53690: PUSH
53691: LD_INT 55
53693: PUSH
53694: EMPTY
53695: LIST
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PPUSH
53705: CALL_OW 72
53709: PUSH
53710: LD_INT 1
53712: ARRAY
53713: ST_TO_ADDR
// if IsInUnit ( driver ) then
53714: LD_VAR 0 18
53718: PPUSH
53719: CALL_OW 310
53723: IFFALSE 53734
// ComExit ( driver ) ;
53725: LD_VAR 0 18
53729: PPUSH
53730: CALL 79387 0 1
// AddComEnterUnit ( driver , tmp ) ;
53734: LD_VAR 0 18
53738: PPUSH
53739: LD_VAR 0 13
53743: PPUSH
53744: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53748: LD_VAR 0 18
53752: PPUSH
53753: LD_VAR 0 7
53757: PPUSH
53758: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53762: LD_VAR 0 18
53766: PPUSH
53767: CALL_OW 181
// end ; continue ;
53771: GO 53415
// end ; if not cleaners or not tmp in cleaners then
53773: LD_VAR 0 6
53777: NOT
53778: IFTRUE 53793
53780: PUSH
53781: LD_VAR 0 13
53785: PUSH
53786: LD_VAR 0 6
53790: IN
53791: NOT
53792: OR
53793: IFFALSE 54102
// begin if dep then
53795: LD_VAR 0 17
53799: IFFALSE 53935
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53801: LD_ADDR_VAR 0 16
53805: PUSH
53806: LD_VAR 0 17
53810: PUSH
53811: LD_INT 1
53813: ARRAY
53814: PPUSH
53815: CALL_OW 250
53819: PPUSH
53820: LD_VAR 0 17
53824: PUSH
53825: LD_INT 1
53827: ARRAY
53828: PPUSH
53829: CALL_OW 254
53833: PPUSH
53834: LD_INT 5
53836: PPUSH
53837: CALL_OW 272
53841: PUSH
53842: LD_VAR 0 17
53846: PUSH
53847: LD_INT 1
53849: ARRAY
53850: PPUSH
53851: CALL_OW 251
53855: PPUSH
53856: LD_VAR 0 17
53860: PUSH
53861: LD_INT 1
53863: ARRAY
53864: PPUSH
53865: CALL_OW 254
53869: PPUSH
53870: LD_INT 5
53872: PPUSH
53873: CALL_OW 273
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53882: LD_VAR 0 16
53886: PUSH
53887: LD_INT 1
53889: ARRAY
53890: PPUSH
53891: LD_VAR 0 16
53895: PUSH
53896: LD_INT 2
53898: ARRAY
53899: PPUSH
53900: CALL_OW 488
53904: IFFALSE 53935
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53906: LD_VAR 0 13
53910: PPUSH
53911: LD_VAR 0 16
53915: PUSH
53916: LD_INT 1
53918: ARRAY
53919: PPUSH
53920: LD_VAR 0 16
53924: PUSH
53925: LD_INT 2
53927: ARRAY
53928: PPUSH
53929: CALL_OW 111
// continue ;
53933: GO 53415
// end ; end ; r := GetDir ( tmp ) ;
53935: LD_ADDR_VAR 0 15
53939: PUSH
53940: LD_VAR 0 13
53944: PPUSH
53945: CALL_OW 254
53949: ST_TO_ADDR
// if r = 5 then
53950: LD_VAR 0 15
53954: PUSH
53955: LD_INT 5
53957: EQUAL
53958: IFFALSE 53968
// r := 0 ;
53960: LD_ADDR_VAR 0 15
53964: PUSH
53965: LD_INT 0
53967: ST_TO_ADDR
// for j = r to 5 do
53968: LD_ADDR_VAR 0 10
53972: PUSH
53973: DOUBLE
53974: LD_VAR 0 15
53978: DEC
53979: ST_TO_ADDR
53980: LD_INT 5
53982: PUSH
53983: FOR_TO
53984: IFFALSE 54100
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53986: LD_ADDR_VAR 0 11
53990: PUSH
53991: LD_VAR 0 13
53995: PPUSH
53996: CALL_OW 250
54000: PPUSH
54001: LD_VAR 0 10
54005: PPUSH
54006: LD_INT 2
54008: PPUSH
54009: CALL_OW 272
54013: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54014: LD_ADDR_VAR 0 12
54018: PUSH
54019: LD_VAR 0 13
54023: PPUSH
54024: CALL_OW 251
54028: PPUSH
54029: LD_VAR 0 10
54033: PPUSH
54034: LD_INT 2
54036: PPUSH
54037: CALL_OW 273
54041: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54042: LD_VAR 0 11
54046: PPUSH
54047: LD_VAR 0 12
54051: PPUSH
54052: CALL_OW 488
54056: IFFALSE 54075
54058: PUSH
54059: LD_VAR 0 11
54063: PPUSH
54064: LD_VAR 0 12
54068: PPUSH
54069: CALL_OW 428
54073: NOT
54074: AND
54075: IFFALSE 54098
// begin ComMoveXY ( tmp , _x , _y ) ;
54077: LD_VAR 0 13
54081: PPUSH
54082: LD_VAR 0 11
54086: PPUSH
54087: LD_VAR 0 12
54091: PPUSH
54092: CALL_OW 111
// break ;
54096: GO 54100
// end ; end ;
54098: GO 53983
54100: POP
54101: POP
// end ; end ;
54102: GO 53415
54104: POP
54105: POP
// end ;
54106: LD_VAR 0 8
54110: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54111: LD_INT 0
54113: PPUSH
// result := true ;
54114: LD_ADDR_VAR 0 3
54118: PUSH
54119: LD_INT 1
54121: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54122: LD_VAR 0 2
54126: PUSH
54127: LD_INT 24
54129: DOUBLE
54130: EQUAL
54131: IFTRUE 54141
54133: LD_INT 33
54135: DOUBLE
54136: EQUAL
54137: IFTRUE 54141
54139: GO 54166
54141: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54142: LD_ADDR_VAR 0 3
54146: PUSH
54147: LD_INT 32
54149: PPUSH
54150: LD_VAR 0 1
54154: PPUSH
54155: CALL_OW 321
54159: PUSH
54160: LD_INT 2
54162: EQUAL
54163: ST_TO_ADDR
54164: GO 54482
54166: LD_INT 20
54168: DOUBLE
54169: EQUAL
54170: IFTRUE 54174
54172: GO 54199
54174: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54175: LD_ADDR_VAR 0 3
54179: PUSH
54180: LD_INT 6
54182: PPUSH
54183: LD_VAR 0 1
54187: PPUSH
54188: CALL_OW 321
54192: PUSH
54193: LD_INT 2
54195: EQUAL
54196: ST_TO_ADDR
54197: GO 54482
54199: LD_INT 22
54201: DOUBLE
54202: EQUAL
54203: IFTRUE 54213
54205: LD_INT 36
54207: DOUBLE
54208: EQUAL
54209: IFTRUE 54213
54211: GO 54238
54213: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54214: LD_ADDR_VAR 0 3
54218: PUSH
54219: LD_INT 15
54221: PPUSH
54222: LD_VAR 0 1
54226: PPUSH
54227: CALL_OW 321
54231: PUSH
54232: LD_INT 2
54234: EQUAL
54235: ST_TO_ADDR
54236: GO 54482
54238: LD_INT 30
54240: DOUBLE
54241: EQUAL
54242: IFTRUE 54246
54244: GO 54271
54246: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54247: LD_ADDR_VAR 0 3
54251: PUSH
54252: LD_INT 20
54254: PPUSH
54255: LD_VAR 0 1
54259: PPUSH
54260: CALL_OW 321
54264: PUSH
54265: LD_INT 2
54267: EQUAL
54268: ST_TO_ADDR
54269: GO 54482
54271: LD_INT 28
54273: DOUBLE
54274: EQUAL
54275: IFTRUE 54285
54277: LD_INT 21
54279: DOUBLE
54280: EQUAL
54281: IFTRUE 54285
54283: GO 54310
54285: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54286: LD_ADDR_VAR 0 3
54290: PUSH
54291: LD_INT 21
54293: PPUSH
54294: LD_VAR 0 1
54298: PPUSH
54299: CALL_OW 321
54303: PUSH
54304: LD_INT 2
54306: EQUAL
54307: ST_TO_ADDR
54308: GO 54482
54310: LD_INT 16
54312: DOUBLE
54313: EQUAL
54314: IFTRUE 54318
54316: GO 54343
54318: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54319: LD_ADDR_VAR 0 3
54323: PUSH
54324: LD_INT 84
54326: PPUSH
54327: LD_VAR 0 1
54331: PPUSH
54332: CALL_OW 321
54336: PUSH
54337: LD_INT 2
54339: EQUAL
54340: ST_TO_ADDR
54341: GO 54482
54343: LD_INT 19
54345: DOUBLE
54346: EQUAL
54347: IFTRUE 54357
54349: LD_INT 23
54351: DOUBLE
54352: EQUAL
54353: IFTRUE 54357
54355: GO 54382
54357: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54358: LD_ADDR_VAR 0 3
54362: PUSH
54363: LD_INT 83
54365: PPUSH
54366: LD_VAR 0 1
54370: PPUSH
54371: CALL_OW 321
54375: PUSH
54376: LD_INT 2
54378: EQUAL
54379: ST_TO_ADDR
54380: GO 54482
54382: LD_INT 17
54384: DOUBLE
54385: EQUAL
54386: IFTRUE 54390
54388: GO 54415
54390: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54391: LD_ADDR_VAR 0 3
54395: PUSH
54396: LD_INT 39
54398: PPUSH
54399: LD_VAR 0 1
54403: PPUSH
54404: CALL_OW 321
54408: PUSH
54409: LD_INT 2
54411: EQUAL
54412: ST_TO_ADDR
54413: GO 54482
54415: LD_INT 18
54417: DOUBLE
54418: EQUAL
54419: IFTRUE 54423
54421: GO 54448
54423: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54424: LD_ADDR_VAR 0 3
54428: PUSH
54429: LD_INT 40
54431: PPUSH
54432: LD_VAR 0 1
54436: PPUSH
54437: CALL_OW 321
54441: PUSH
54442: LD_INT 2
54444: EQUAL
54445: ST_TO_ADDR
54446: GO 54482
54448: LD_INT 27
54450: DOUBLE
54451: EQUAL
54452: IFTRUE 54456
54454: GO 54481
54456: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54457: LD_ADDR_VAR 0 3
54461: PUSH
54462: LD_INT 35
54464: PPUSH
54465: LD_VAR 0 1
54469: PPUSH
54470: CALL_OW 321
54474: PUSH
54475: LD_INT 2
54477: EQUAL
54478: ST_TO_ADDR
54479: GO 54482
54481: POP
// end ;
54482: LD_VAR 0 3
54486: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54487: LD_INT 0
54489: PPUSH
54490: PPUSH
54491: PPUSH
54492: PPUSH
54493: PPUSH
54494: PPUSH
54495: PPUSH
54496: PPUSH
54497: PPUSH
54498: PPUSH
54499: PPUSH
// result := false ;
54500: LD_ADDR_VAR 0 6
54504: PUSH
54505: LD_INT 0
54507: ST_TO_ADDR
// if btype = b_depot then
54508: LD_VAR 0 2
54512: PUSH
54513: LD_INT 0
54515: EQUAL
54516: IFFALSE 54528
// begin result := true ;
54518: LD_ADDR_VAR 0 6
54522: PUSH
54523: LD_INT 1
54525: ST_TO_ADDR
// exit ;
54526: GO 55382
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54528: LD_VAR 0 1
54532: NOT
54533: IFTRUE 54558
54535: PUSH
54536: LD_VAR 0 1
54540: PPUSH
54541: CALL_OW 266
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: IN
54556: NOT
54557: OR
54558: IFTRUE 54567
54560: PUSH
54561: LD_VAR 0 2
54565: NOT
54566: OR
54567: IFTRUE 54603
54569: PUSH
54570: LD_VAR 0 5
54574: PUSH
54575: LD_INT 0
54577: PUSH
54578: LD_INT 1
54580: PUSH
54581: LD_INT 2
54583: PUSH
54584: LD_INT 3
54586: PUSH
54587: LD_INT 4
54589: PUSH
54590: LD_INT 5
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: IN
54601: NOT
54602: OR
54603: IFTRUE 54622
54605: PUSH
54606: LD_VAR 0 3
54610: PPUSH
54611: LD_VAR 0 4
54615: PPUSH
54616: CALL_OW 488
54620: NOT
54621: OR
54622: IFFALSE 54626
// exit ;
54624: GO 55382
// side := GetSide ( depot ) ;
54626: LD_ADDR_VAR 0 9
54630: PUSH
54631: LD_VAR 0 1
54635: PPUSH
54636: CALL_OW 255
54640: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54641: LD_VAR 0 9
54645: PPUSH
54646: LD_VAR 0 2
54650: PPUSH
54651: CALL 54111 0 2
54655: NOT
54656: IFFALSE 54660
// exit ;
54658: GO 55382
// pom := GetBase ( depot ) ;
54660: LD_ADDR_VAR 0 10
54664: PUSH
54665: LD_VAR 0 1
54669: PPUSH
54670: CALL_OW 274
54674: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54675: LD_ADDR_VAR 0 11
54679: PUSH
54680: LD_VAR 0 2
54684: PPUSH
54685: LD_VAR 0 1
54689: PPUSH
54690: CALL_OW 248
54694: PPUSH
54695: CALL_OW 450
54699: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54700: LD_VAR 0 10
54704: PPUSH
54705: LD_INT 1
54707: PPUSH
54708: CALL_OW 275
54712: PUSH
54713: LD_VAR 0 11
54717: PUSH
54718: LD_INT 1
54720: ARRAY
54721: GREATEREQUAL
54722: IFFALSE 54748
54724: PUSH
54725: LD_VAR 0 10
54729: PPUSH
54730: LD_INT 2
54732: PPUSH
54733: CALL_OW 275
54737: PUSH
54738: LD_VAR 0 11
54742: PUSH
54743: LD_INT 2
54745: ARRAY
54746: GREATEREQUAL
54747: AND
54748: IFFALSE 54774
54750: PUSH
54751: LD_VAR 0 10
54755: PPUSH
54756: LD_INT 3
54758: PPUSH
54759: CALL_OW 275
54763: PUSH
54764: LD_VAR 0 11
54768: PUSH
54769: LD_INT 3
54771: ARRAY
54772: GREATEREQUAL
54773: AND
54774: NOT
54775: IFFALSE 54779
// exit ;
54777: GO 55382
// if GetBType ( depot ) = b_depot then
54779: LD_VAR 0 1
54783: PPUSH
54784: CALL_OW 266
54788: PUSH
54789: LD_INT 0
54791: EQUAL
54792: IFFALSE 54804
// dist := 28 else
54794: LD_ADDR_VAR 0 14
54798: PUSH
54799: LD_INT 28
54801: ST_TO_ADDR
54802: GO 54812
// dist := 36 ;
54804: LD_ADDR_VAR 0 14
54808: PUSH
54809: LD_INT 36
54811: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54812: LD_VAR 0 1
54816: PPUSH
54817: LD_VAR 0 3
54821: PPUSH
54822: LD_VAR 0 4
54826: PPUSH
54827: CALL_OW 297
54831: PUSH
54832: LD_VAR 0 14
54836: GREATER
54837: IFFALSE 54841
// exit ;
54839: GO 55382
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54841: LD_ADDR_VAR 0 12
54845: PUSH
54846: LD_VAR 0 2
54850: PPUSH
54851: LD_VAR 0 3
54855: PPUSH
54856: LD_VAR 0 4
54860: PPUSH
54861: LD_VAR 0 5
54865: PPUSH
54866: LD_VAR 0 1
54870: PPUSH
54871: CALL_OW 248
54875: PPUSH
54876: LD_INT 0
54878: PPUSH
54879: CALL 55387 0 6
54883: ST_TO_ADDR
// if not hexes then
54884: LD_VAR 0 12
54888: NOT
54889: IFFALSE 54893
// exit ;
54891: GO 55382
// hex := GetHexInfo ( x , y ) ;
54893: LD_ADDR_VAR 0 15
54897: PUSH
54898: LD_VAR 0 3
54902: PPUSH
54903: LD_VAR 0 4
54907: PPUSH
54908: CALL_OW 546
54912: ST_TO_ADDR
// if hex [ 1 ] then
54913: LD_VAR 0 15
54917: PUSH
54918: LD_INT 1
54920: ARRAY
54921: IFFALSE 54925
// exit ;
54923: GO 55382
// height := hex [ 2 ] ;
54925: LD_ADDR_VAR 0 13
54929: PUSH
54930: LD_VAR 0 15
54934: PUSH
54935: LD_INT 2
54937: ARRAY
54938: ST_TO_ADDR
// for i = 1 to hexes do
54939: LD_ADDR_VAR 0 7
54943: PUSH
54944: DOUBLE
54945: LD_INT 1
54947: DEC
54948: ST_TO_ADDR
54949: LD_VAR 0 12
54953: PUSH
54954: FOR_TO
54955: IFFALSE 55299
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54957: LD_VAR 0 12
54961: PUSH
54962: LD_VAR 0 7
54966: ARRAY
54967: PUSH
54968: LD_INT 1
54970: ARRAY
54971: PPUSH
54972: LD_VAR 0 12
54976: PUSH
54977: LD_VAR 0 7
54981: ARRAY
54982: PUSH
54983: LD_INT 2
54985: ARRAY
54986: PPUSH
54987: CALL_OW 488
54991: NOT
54992: IFTRUE 55034
54994: PUSH
54995: LD_VAR 0 12
54999: PUSH
55000: LD_VAR 0 7
55004: ARRAY
55005: PUSH
55006: LD_INT 1
55008: ARRAY
55009: PPUSH
55010: LD_VAR 0 12
55014: PUSH
55015: LD_VAR 0 7
55019: ARRAY
55020: PUSH
55021: LD_INT 2
55023: ARRAY
55024: PPUSH
55025: CALL_OW 428
55029: PUSH
55030: LD_INT 0
55032: GREATER
55033: OR
55034: IFTRUE 55072
55036: PUSH
55037: LD_VAR 0 12
55041: PUSH
55042: LD_VAR 0 7
55046: ARRAY
55047: PUSH
55048: LD_INT 1
55050: ARRAY
55051: PPUSH
55052: LD_VAR 0 12
55056: PUSH
55057: LD_VAR 0 7
55061: ARRAY
55062: PUSH
55063: LD_INT 2
55065: ARRAY
55066: PPUSH
55067: CALL_OW 351
55071: OR
55072: IFFALSE 55078
// exit ;
55074: POP
55075: POP
55076: GO 55382
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55078: LD_ADDR_VAR 0 8
55082: PUSH
55083: LD_VAR 0 12
55087: PUSH
55088: LD_VAR 0 7
55092: ARRAY
55093: PUSH
55094: LD_INT 1
55096: ARRAY
55097: PPUSH
55098: LD_VAR 0 12
55102: PUSH
55103: LD_VAR 0 7
55107: ARRAY
55108: PUSH
55109: LD_INT 2
55111: ARRAY
55112: PPUSH
55113: CALL_OW 546
55117: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55118: LD_VAR 0 8
55122: PUSH
55123: LD_INT 1
55125: ARRAY
55126: IFTRUE 55148
55128: PUSH
55129: LD_VAR 0 8
55133: PUSH
55134: LD_INT 2
55136: ARRAY
55137: PUSH
55138: LD_VAR 0 13
55142: PUSH
55143: LD_INT 2
55145: PLUS
55146: GREATER
55147: OR
55148: IFTRUE 55170
55150: PUSH
55151: LD_VAR 0 8
55155: PUSH
55156: LD_INT 2
55158: ARRAY
55159: PUSH
55160: LD_VAR 0 13
55164: PUSH
55165: LD_INT 2
55167: MINUS
55168: LESS
55169: OR
55170: IFTRUE 55238
55172: PUSH
55173: LD_VAR 0 8
55177: PUSH
55178: LD_INT 3
55180: ARRAY
55181: PUSH
55182: LD_INT 0
55184: PUSH
55185: LD_INT 8
55187: PUSH
55188: LD_INT 9
55190: PUSH
55191: LD_INT 10
55193: PUSH
55194: LD_INT 11
55196: PUSH
55197: LD_INT 12
55199: PUSH
55200: LD_INT 13
55202: PUSH
55203: LD_INT 16
55205: PUSH
55206: LD_INT 17
55208: PUSH
55209: LD_INT 18
55211: PUSH
55212: LD_INT 19
55214: PUSH
55215: LD_INT 20
55217: PUSH
55218: LD_INT 21
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: IN
55236: NOT
55237: OR
55238: IFTRUE 55251
55240: PUSH
55241: LD_VAR 0 8
55245: PUSH
55246: LD_INT 5
55248: ARRAY
55249: NOT
55250: OR
55251: IFTRUE 55291
55253: PUSH
55254: LD_VAR 0 8
55258: PUSH
55259: LD_INT 6
55261: ARRAY
55262: PUSH
55263: LD_INT 1
55265: PUSH
55266: LD_INT 2
55268: PUSH
55269: LD_INT 7
55271: PUSH
55272: LD_INT 9
55274: PUSH
55275: LD_INT 10
55277: PUSH
55278: LD_INT 11
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: IN
55289: NOT
55290: OR
55291: IFFALSE 55297
// exit ;
55293: POP
55294: POP
55295: GO 55382
// end ;
55297: GO 54954
55299: POP
55300: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55301: LD_VAR 0 9
55305: PPUSH
55306: LD_VAR 0 3
55310: PPUSH
55311: LD_VAR 0 4
55315: PPUSH
55316: LD_INT 20
55318: PPUSH
55319: CALL 47201 0 4
55323: PUSH
55324: LD_INT 4
55326: ARRAY
55327: IFFALSE 55331
// exit ;
55329: GO 55382
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55331: LD_VAR 0 2
55335: PUSH
55336: LD_INT 29
55338: PUSH
55339: LD_INT 30
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: IN
55346: IFFALSE 55370
55348: PUSH
55349: LD_VAR 0 3
55353: PPUSH
55354: LD_VAR 0 4
55358: PPUSH
55359: LD_VAR 0 9
55363: PPUSH
55364: CALL_OW 440
55368: NOT
55369: AND
55370: IFFALSE 55374
// exit ;
55372: GO 55382
// result := true ;
55374: LD_ADDR_VAR 0 6
55378: PUSH
55379: LD_INT 1
55381: ST_TO_ADDR
// end ;
55382: LD_VAR 0 6
55386: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55387: LD_INT 0
55389: PPUSH
55390: PPUSH
55391: PPUSH
55392: PPUSH
55393: PPUSH
55394: PPUSH
55395: PPUSH
55396: PPUSH
55397: PPUSH
55398: PPUSH
55399: PPUSH
55400: PPUSH
55401: PPUSH
55402: PPUSH
55403: PPUSH
55404: PPUSH
55405: PPUSH
55406: PPUSH
55407: PPUSH
55408: PPUSH
55409: PPUSH
55410: PPUSH
55411: PPUSH
55412: PPUSH
55413: PPUSH
55414: PPUSH
55415: PPUSH
55416: PPUSH
55417: PPUSH
55418: PPUSH
55419: PPUSH
55420: PPUSH
55421: PPUSH
55422: PPUSH
55423: PPUSH
55424: PPUSH
55425: PPUSH
55426: PPUSH
55427: PPUSH
55428: PPUSH
55429: PPUSH
55430: PPUSH
55431: PPUSH
55432: PPUSH
55433: PPUSH
55434: PPUSH
55435: PPUSH
55436: PPUSH
55437: PPUSH
55438: PPUSH
55439: PPUSH
55440: PPUSH
55441: PPUSH
55442: PPUSH
55443: PPUSH
55444: PPUSH
55445: PPUSH
55446: PPUSH
// result = [ ] ;
55447: LD_ADDR_VAR 0 7
55451: PUSH
55452: EMPTY
55453: ST_TO_ADDR
// temp_list = [ ] ;
55454: LD_ADDR_VAR 0 9
55458: PUSH
55459: EMPTY
55460: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55461: LD_VAR 0 4
55465: PUSH
55466: LD_INT 0
55468: PUSH
55469: LD_INT 1
55471: PUSH
55472: LD_INT 2
55474: PUSH
55475: LD_INT 3
55477: PUSH
55478: LD_INT 4
55480: PUSH
55481: LD_INT 5
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: IN
55492: NOT
55493: IFTRUE 55536
55495: PUSH
55496: LD_VAR 0 1
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: LD_INT 1
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: IN
55511: IFFALSE 55535
55513: PUSH
55514: LD_VAR 0 5
55518: PUSH
55519: LD_INT 1
55521: PUSH
55522: LD_INT 2
55524: PUSH
55525: LD_INT 3
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: LIST
55532: IN
55533: NOT
55534: AND
55535: OR
55536: IFFALSE 55540
// exit ;
55538: GO 73939
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55540: LD_VAR 0 1
55544: PUSH
55545: LD_INT 6
55547: PUSH
55548: LD_INT 7
55550: PUSH
55551: LD_INT 8
55553: PUSH
55554: LD_INT 13
55556: PUSH
55557: LD_INT 12
55559: PUSH
55560: LD_INT 15
55562: PUSH
55563: LD_INT 11
55565: PUSH
55566: LD_INT 14
55568: PUSH
55569: LD_INT 10
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: IN
55583: IFFALSE 55593
// btype = b_lab ;
55585: LD_ADDR_VAR 0 1
55589: PUSH
55590: LD_INT 6
55592: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55593: LD_VAR 0 6
55597: PUSH
55598: LD_INT 0
55600: PUSH
55601: LD_INT 1
55603: PUSH
55604: LD_INT 2
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: LIST
55611: IN
55612: NOT
55613: IFTRUE 55681
55615: PUSH
55616: LD_VAR 0 1
55620: PUSH
55621: LD_INT 0
55623: PUSH
55624: LD_INT 1
55626: PUSH
55627: LD_INT 2
55629: PUSH
55630: LD_INT 3
55632: PUSH
55633: LD_INT 6
55635: PUSH
55636: LD_INT 36
55638: PUSH
55639: LD_INT 4
55641: PUSH
55642: LD_INT 5
55644: PUSH
55645: LD_INT 31
55647: PUSH
55648: LD_INT 32
55650: PUSH
55651: LD_INT 33
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: IN
55667: NOT
55668: IFFALSE 55680
55670: PUSH
55671: LD_VAR 0 6
55675: PUSH
55676: LD_INT 1
55678: EQUAL
55679: AND
55680: OR
55681: IFTRUE 55713
55683: PUSH
55684: LD_VAR 0 1
55688: PUSH
55689: LD_INT 2
55691: PUSH
55692: LD_INT 3
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: IN
55699: NOT
55700: IFFALSE 55712
55702: PUSH
55703: LD_VAR 0 6
55707: PUSH
55708: LD_INT 2
55710: EQUAL
55711: AND
55712: OR
55713: IFFALSE 55723
// mode = 0 ;
55715: LD_ADDR_VAR 0 6
55719: PUSH
55720: LD_INT 0
55722: ST_TO_ADDR
// case mode of 0 :
55723: LD_VAR 0 6
55727: PUSH
55728: LD_INT 0
55730: DOUBLE
55731: EQUAL
55732: IFTRUE 55736
55734: GO 67189
55736: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55737: LD_ADDR_VAR 0 11
55741: PUSH
55742: LD_INT 0
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: LD_INT 1
55757: NEG
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 1
55765: PUSH
55766: LD_INT 0
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 1
55775: PUSH
55776: LD_INT 1
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 0
55785: PUSH
55786: LD_INT 1
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 1
55795: NEG
55796: PUSH
55797: LD_INT 0
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 1
55806: NEG
55807: PUSH
55808: LD_INT 1
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: LD_INT 2
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 0
55830: PUSH
55831: LD_INT 2
55833: NEG
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 1
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 1
55852: PUSH
55853: LD_INT 2
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 0
55862: PUSH
55863: LD_INT 2
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 1
55872: NEG
55873: PUSH
55874: LD_INT 1
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: LD_INT 3
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: LD_INT 3
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 1
55903: NEG
55904: PUSH
55905: LD_INT 2
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55930: LD_ADDR_VAR 0 12
55934: PUSH
55935: LD_INT 0
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: LD_INT 1
55950: NEG
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 1
55968: PUSH
55969: LD_INT 1
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: LD_INT 1
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 1
55988: NEG
55989: PUSH
55990: LD_INT 0
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 1
55999: NEG
56000: PUSH
56001: LD_INT 1
56003: NEG
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 1
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 2
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 2
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 1
56042: NEG
56043: PUSH
56044: LD_INT 1
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 2
56053: NEG
56054: PUSH
56055: LD_INT 0
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 2
56064: NEG
56065: PUSH
56066: LD_INT 1
56068: NEG
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 2
56076: NEG
56077: PUSH
56078: LD_INT 1
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 3
56087: NEG
56088: PUSH
56089: LD_INT 0
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 3
56098: NEG
56099: PUSH
56100: LD_INT 1
56102: NEG
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56126: LD_ADDR_VAR 0 13
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: LD_INT 0
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: LD_INT 1
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 1
56164: PUSH
56165: LD_INT 1
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: LD_INT 1
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 1
56184: NEG
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 1
56195: NEG
56196: PUSH
56197: LD_INT 1
56199: NEG
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 1
56207: NEG
56208: PUSH
56209: LD_INT 2
56211: NEG
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 2
56219: PUSH
56220: LD_INT 1
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 2
56229: PUSH
56230: LD_INT 2
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 1
56239: PUSH
56240: LD_INT 2
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 2
56249: NEG
56250: PUSH
56251: LD_INT 1
56253: NEG
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 2
56261: NEG
56262: PUSH
56263: LD_INT 2
56265: NEG
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 2
56273: NEG
56274: PUSH
56275: LD_INT 3
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 3
56285: NEG
56286: PUSH
56287: LD_INT 2
56289: NEG
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 3
56297: NEG
56298: PUSH
56299: LD_INT 3
56301: NEG
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56325: LD_ADDR_VAR 0 14
56329: PUSH
56330: LD_INT 0
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: LD_INT 1
56345: NEG
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 1
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: LD_INT 1
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 1
56383: NEG
56384: PUSH
56385: LD_INT 0
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 1
56394: NEG
56395: PUSH
56396: LD_INT 1
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 1
56406: NEG
56407: PUSH
56408: LD_INT 2
56410: NEG
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 0
56418: PUSH
56419: LD_INT 2
56421: NEG
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 1
56429: PUSH
56430: LD_INT 1
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 1
56440: PUSH
56441: LD_INT 2
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 0
56450: PUSH
56451: LD_INT 2
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 1
56460: NEG
56461: PUSH
56462: LD_INT 1
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: NEG
56472: PUSH
56473: LD_INT 3
56475: NEG
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 0
56483: PUSH
56484: LD_INT 3
56486: NEG
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 1
56494: PUSH
56495: LD_INT 2
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56521: LD_ADDR_VAR 0 15
56525: PUSH
56526: LD_INT 0
56528: PUSH
56529: LD_INT 0
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 0
56538: PUSH
56539: LD_INT 1
56541: NEG
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 1
56549: PUSH
56550: LD_INT 0
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 1
56559: PUSH
56560: LD_INT 1
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 0
56569: PUSH
56570: LD_INT 1
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 1
56579: NEG
56580: PUSH
56581: LD_INT 0
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 1
56590: NEG
56591: PUSH
56592: LD_INT 1
56594: NEG
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 1
56602: PUSH
56603: LD_INT 1
56605: NEG
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 2
56613: PUSH
56614: LD_INT 0
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 2
56623: PUSH
56624: LD_INT 1
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 1
56633: NEG
56634: PUSH
56635: LD_INT 1
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 2
56644: NEG
56645: PUSH
56646: LD_INT 0
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 2
56655: NEG
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 2
56667: PUSH
56668: LD_INT 1
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 3
56678: PUSH
56679: LD_INT 0
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 3
56688: PUSH
56689: LD_INT 1
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56714: LD_ADDR_VAR 0 16
56718: PUSH
56719: LD_INT 0
56721: PUSH
56722: LD_INT 0
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 0
56731: PUSH
56732: LD_INT 1
56734: NEG
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 1
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 1
56752: PUSH
56753: LD_INT 1
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: LD_INT 1
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 1
56772: NEG
56773: PUSH
56774: LD_INT 0
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 1
56783: NEG
56784: PUSH
56785: LD_INT 1
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 1
56795: NEG
56796: PUSH
56797: LD_INT 2
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 2
56807: PUSH
56808: LD_INT 1
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 2
56817: PUSH
56818: LD_INT 2
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 1
56827: PUSH
56828: LD_INT 2
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 2
56837: NEG
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 2
56849: NEG
56850: PUSH
56851: LD_INT 2
56853: NEG
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 3
56861: PUSH
56862: LD_INT 2
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 3
56871: PUSH
56872: LD_INT 3
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 2
56881: PUSH
56882: LD_INT 3
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56907: LD_ADDR_VAR 0 17
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: LD_INT 0
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: LD_INT 1
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 1
56935: PUSH
56936: LD_INT 0
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 1
56945: PUSH
56946: LD_INT 1
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 0
56955: PUSH
56956: LD_INT 1
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 1
56965: NEG
56966: PUSH
56967: LD_INT 0
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 1
56976: NEG
56977: PUSH
56978: LD_INT 1
56980: NEG
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 1
56988: NEG
56989: PUSH
56990: LD_INT 2
56992: NEG
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 0
57000: PUSH
57001: LD_INT 2
57003: NEG
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 1
57011: PUSH
57012: LD_INT 1
57014: NEG
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 2
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 2
57032: PUSH
57033: LD_INT 1
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 2
57042: PUSH
57043: LD_INT 2
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 1
57052: PUSH
57053: LD_INT 2
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 0
57062: PUSH
57063: LD_INT 2
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 1
57072: NEG
57073: PUSH
57074: LD_INT 1
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 2
57083: NEG
57084: PUSH
57085: LD_INT 0
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 2
57094: NEG
57095: PUSH
57096: LD_INT 1
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 2
57106: NEG
57107: PUSH
57108: LD_INT 2
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57137: LD_ADDR_VAR 0 18
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 0
57154: PUSH
57155: LD_INT 1
57157: NEG
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 1
57165: PUSH
57166: LD_INT 0
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 1
57175: PUSH
57176: LD_INT 1
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 0
57185: PUSH
57186: LD_INT 1
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 1
57195: NEG
57196: PUSH
57197: LD_INT 0
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 1
57206: NEG
57207: PUSH
57208: LD_INT 1
57210: NEG
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 1
57218: NEG
57219: PUSH
57220: LD_INT 2
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: LD_INT 2
57233: NEG
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 1
57241: PUSH
57242: LD_INT 1
57244: NEG
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 2
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 2
57262: PUSH
57263: LD_INT 1
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 2
57272: PUSH
57273: LD_INT 2
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 1
57282: PUSH
57283: LD_INT 2
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 0
57292: PUSH
57293: LD_INT 2
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 1
57302: NEG
57303: PUSH
57304: LD_INT 1
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 2
57313: NEG
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 2
57324: NEG
57325: PUSH
57326: LD_INT 1
57328: NEG
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 2
57336: NEG
57337: PUSH
57338: LD_INT 2
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57367: LD_ADDR_VAR 0 19
57371: PUSH
57372: LD_INT 0
57374: PUSH
57375: LD_INT 0
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 0
57384: PUSH
57385: LD_INT 1
57387: NEG
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 1
57395: PUSH
57396: LD_INT 0
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 1
57405: PUSH
57406: LD_INT 1
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 0
57415: PUSH
57416: LD_INT 1
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 1
57425: NEG
57426: PUSH
57427: LD_INT 0
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 1
57436: NEG
57437: PUSH
57438: LD_INT 1
57440: NEG
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 1
57448: NEG
57449: PUSH
57450: LD_INT 2
57452: NEG
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: LD_INT 2
57463: NEG
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 1
57471: PUSH
57472: LD_INT 1
57474: NEG
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 2
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 2
57492: PUSH
57493: LD_INT 1
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 2
57502: PUSH
57503: LD_INT 2
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 1
57512: PUSH
57513: LD_INT 2
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: LD_INT 2
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 1
57532: NEG
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 2
57543: NEG
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 2
57554: NEG
57555: PUSH
57556: LD_INT 1
57558: NEG
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 2
57566: NEG
57567: PUSH
57568: LD_INT 2
57570: NEG
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57597: LD_ADDR_VAR 0 20
57601: PUSH
57602: LD_INT 0
57604: PUSH
57605: LD_INT 0
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 0
57614: PUSH
57615: LD_INT 1
57617: NEG
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 1
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 1
57635: PUSH
57636: LD_INT 1
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 0
57645: PUSH
57646: LD_INT 1
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 1
57655: NEG
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 1
57666: NEG
57667: PUSH
57668: LD_INT 1
57670: NEG
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 1
57678: NEG
57679: PUSH
57680: LD_INT 2
57682: NEG
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 0
57690: PUSH
57691: LD_INT 2
57693: NEG
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 1
57701: PUSH
57702: LD_INT 1
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 2
57712: PUSH
57713: LD_INT 0
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 2
57722: PUSH
57723: LD_INT 1
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 2
57732: PUSH
57733: LD_INT 2
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 1
57742: PUSH
57743: LD_INT 2
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 0
57752: PUSH
57753: LD_INT 2
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 1
57762: NEG
57763: PUSH
57764: LD_INT 1
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 2
57773: NEG
57774: PUSH
57775: LD_INT 0
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 2
57784: NEG
57785: PUSH
57786: LD_INT 1
57788: NEG
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 2
57796: NEG
57797: PUSH
57798: LD_INT 2
57800: NEG
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57827: LD_ADDR_VAR 0 21
57831: PUSH
57832: LD_INT 0
57834: PUSH
57835: LD_INT 0
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: LD_INT 1
57847: NEG
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 1
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 1
57865: PUSH
57866: LD_INT 1
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 0
57875: PUSH
57876: LD_INT 1
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 1
57885: NEG
57886: PUSH
57887: LD_INT 0
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 1
57896: NEG
57897: PUSH
57898: LD_INT 1
57900: NEG
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 1
57908: NEG
57909: PUSH
57910: LD_INT 2
57912: NEG
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: LD_INT 2
57923: NEG
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 1
57931: PUSH
57932: LD_INT 1
57934: NEG
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 2
57942: PUSH
57943: LD_INT 0
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 2
57952: PUSH
57953: LD_INT 1
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 2
57962: PUSH
57963: LD_INT 2
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 1
57972: PUSH
57973: LD_INT 2
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 0
57982: PUSH
57983: LD_INT 2
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 1
57992: NEG
57993: PUSH
57994: LD_INT 1
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 2
58003: NEG
58004: PUSH
58005: LD_INT 0
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 2
58014: NEG
58015: PUSH
58016: LD_INT 1
58018: NEG
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 2
58026: NEG
58027: PUSH
58028: LD_INT 2
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58057: LD_ADDR_VAR 0 22
58061: PUSH
58062: LD_INT 0
58064: PUSH
58065: LD_INT 0
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 0
58074: PUSH
58075: LD_INT 1
58077: NEG
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 1
58085: PUSH
58086: LD_INT 0
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 1
58095: PUSH
58096: LD_INT 1
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 0
58105: PUSH
58106: LD_INT 1
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 1
58115: NEG
58116: PUSH
58117: LD_INT 0
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 1
58126: NEG
58127: PUSH
58128: LD_INT 1
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 1
58138: NEG
58139: PUSH
58140: LD_INT 2
58142: NEG
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: LD_INT 2
58153: NEG
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 1
58161: PUSH
58162: LD_INT 1
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 2
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 2
58182: PUSH
58183: LD_INT 1
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 2
58192: PUSH
58193: LD_INT 2
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 1
58202: PUSH
58203: LD_INT 2
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 0
58212: PUSH
58213: LD_INT 2
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 1
58222: NEG
58223: PUSH
58224: LD_INT 1
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 2
58233: NEG
58234: PUSH
58235: LD_INT 0
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 2
58244: NEG
58245: PUSH
58246: LD_INT 1
58248: NEG
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 2
58256: NEG
58257: PUSH
58258: LD_INT 2
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58287: LD_ADDR_VAR 0 23
58291: PUSH
58292: LD_INT 0
58294: PUSH
58295: LD_INT 0
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 0
58304: PUSH
58305: LD_INT 1
58307: NEG
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 1
58315: PUSH
58316: LD_INT 0
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 1
58325: PUSH
58326: LD_INT 1
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 0
58335: PUSH
58336: LD_INT 1
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 1
58345: NEG
58346: PUSH
58347: LD_INT 0
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 1
58356: NEG
58357: PUSH
58358: LD_INT 1
58360: NEG
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 1
58368: NEG
58369: PUSH
58370: LD_INT 2
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: LD_INT 2
58383: NEG
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: LD_INT 1
58394: NEG
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 2
58402: PUSH
58403: LD_INT 0
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 2
58412: PUSH
58413: LD_INT 1
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 2
58422: PUSH
58423: LD_INT 2
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 1
58432: PUSH
58433: LD_INT 2
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 0
58442: PUSH
58443: LD_INT 2
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 1
58452: NEG
58453: PUSH
58454: LD_INT 1
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 2
58463: NEG
58464: PUSH
58465: LD_INT 0
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 2
58474: NEG
58475: PUSH
58476: LD_INT 1
58478: NEG
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 2
58486: NEG
58487: PUSH
58488: LD_INT 2
58490: NEG
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 2
58498: NEG
58499: PUSH
58500: LD_INT 3
58502: NEG
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 1
58510: NEG
58511: PUSH
58512: LD_INT 3
58514: NEG
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 1
58522: PUSH
58523: LD_INT 2
58525: NEG
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 2
58533: PUSH
58534: LD_INT 1
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58567: LD_ADDR_VAR 0 24
58571: PUSH
58572: LD_INT 0
58574: PUSH
58575: LD_INT 0
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 0
58584: PUSH
58585: LD_INT 1
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 1
58595: PUSH
58596: LD_INT 0
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 1
58605: PUSH
58606: LD_INT 1
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 0
58615: PUSH
58616: LD_INT 1
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 1
58625: NEG
58626: PUSH
58627: LD_INT 0
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 1
58636: NEG
58637: PUSH
58638: LD_INT 1
58640: NEG
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 1
58648: NEG
58649: PUSH
58650: LD_INT 2
58652: NEG
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 0
58660: PUSH
58661: LD_INT 2
58663: NEG
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 1
58671: PUSH
58672: LD_INT 1
58674: NEG
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 2
58682: PUSH
58683: LD_INT 0
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 2
58692: PUSH
58693: LD_INT 1
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 2
58702: PUSH
58703: LD_INT 2
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 1
58712: PUSH
58713: LD_INT 2
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 0
58722: PUSH
58723: LD_INT 2
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 1
58732: NEG
58733: PUSH
58734: LD_INT 1
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 2
58743: NEG
58744: PUSH
58745: LD_INT 0
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 2
58754: NEG
58755: PUSH
58756: LD_INT 1
58758: NEG
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 2
58766: NEG
58767: PUSH
58768: LD_INT 2
58770: NEG
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 1
58778: PUSH
58779: LD_INT 2
58781: NEG
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 2
58789: PUSH
58790: LD_INT 1
58792: NEG
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 3
58800: PUSH
58801: LD_INT 1
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 3
58810: PUSH
58811: LD_INT 2
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58843: LD_ADDR_VAR 0 25
58847: PUSH
58848: LD_INT 0
58850: PUSH
58851: LD_INT 0
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 0
58860: PUSH
58861: LD_INT 1
58863: NEG
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 1
58871: PUSH
58872: LD_INT 0
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 1
58881: PUSH
58882: LD_INT 1
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 0
58891: PUSH
58892: LD_INT 1
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 1
58901: NEG
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 1
58912: NEG
58913: PUSH
58914: LD_INT 1
58916: NEG
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 1
58924: NEG
58925: PUSH
58926: LD_INT 2
58928: NEG
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 0
58936: PUSH
58937: LD_INT 2
58939: NEG
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 1
58947: PUSH
58948: LD_INT 1
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 2
58958: PUSH
58959: LD_INT 0
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 2
58968: PUSH
58969: LD_INT 1
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 2
58978: PUSH
58979: LD_INT 2
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 1
58988: PUSH
58989: LD_INT 2
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 0
58998: PUSH
58999: LD_INT 2
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 1
59008: NEG
59009: PUSH
59010: LD_INT 1
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 2
59019: NEG
59020: PUSH
59021: LD_INT 0
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 2
59030: NEG
59031: PUSH
59032: LD_INT 1
59034: NEG
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 2
59042: NEG
59043: PUSH
59044: LD_INT 2
59046: NEG
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 3
59054: PUSH
59055: LD_INT 1
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 3
59064: PUSH
59065: LD_INT 2
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 2
59074: PUSH
59075: LD_INT 3
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 1
59084: PUSH
59085: LD_INT 3
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59117: LD_ADDR_VAR 0 26
59121: PUSH
59122: LD_INT 0
59124: PUSH
59125: LD_INT 0
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 0
59134: PUSH
59135: LD_INT 1
59137: NEG
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 1
59145: PUSH
59146: LD_INT 0
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 1
59155: PUSH
59156: LD_INT 1
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 0
59165: PUSH
59166: LD_INT 1
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 1
59175: NEG
59176: PUSH
59177: LD_INT 0
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: PUSH
59188: LD_INT 1
59190: NEG
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 1
59198: NEG
59199: PUSH
59200: LD_INT 2
59202: NEG
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 0
59210: PUSH
59211: LD_INT 2
59213: NEG
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 1
59221: PUSH
59222: LD_INT 1
59224: NEG
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 2
59232: PUSH
59233: LD_INT 0
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 2
59242: PUSH
59243: LD_INT 1
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 2
59252: PUSH
59253: LD_INT 2
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 1
59262: PUSH
59263: LD_INT 2
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 0
59272: PUSH
59273: LD_INT 2
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 1
59282: NEG
59283: PUSH
59284: LD_INT 1
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 2
59293: NEG
59294: PUSH
59295: LD_INT 0
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 2
59304: NEG
59305: PUSH
59306: LD_INT 1
59308: NEG
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 2
59316: NEG
59317: PUSH
59318: LD_INT 2
59320: NEG
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 2
59328: PUSH
59329: LD_INT 3
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 1
59338: PUSH
59339: LD_INT 3
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 1
59348: NEG
59349: PUSH
59350: LD_INT 2
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 2
59359: NEG
59360: PUSH
59361: LD_INT 1
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59393: LD_ADDR_VAR 0 27
59397: PUSH
59398: LD_INT 0
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 0
59410: PUSH
59411: LD_INT 1
59413: NEG
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 1
59421: PUSH
59422: LD_INT 0
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 1
59431: PUSH
59432: LD_INT 1
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 0
59441: PUSH
59442: LD_INT 1
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 1
59451: NEG
59452: PUSH
59453: LD_INT 0
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 1
59462: NEG
59463: PUSH
59464: LD_INT 1
59466: NEG
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 1
59474: NEG
59475: PUSH
59476: LD_INT 2
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 0
59486: PUSH
59487: LD_INT 2
59489: NEG
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 1
59497: PUSH
59498: LD_INT 1
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 2
59508: PUSH
59509: LD_INT 0
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 2
59518: PUSH
59519: LD_INT 1
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 2
59528: PUSH
59529: LD_INT 2
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 1
59538: PUSH
59539: LD_INT 2
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 0
59548: PUSH
59549: LD_INT 2
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 1
59558: NEG
59559: PUSH
59560: LD_INT 1
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 2
59569: NEG
59570: PUSH
59571: LD_INT 0
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 2
59580: NEG
59581: PUSH
59582: LD_INT 1
59584: NEG
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 2
59592: NEG
59593: PUSH
59594: LD_INT 2
59596: NEG
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 1
59604: NEG
59605: PUSH
59606: LD_INT 2
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 2
59615: NEG
59616: PUSH
59617: LD_INT 1
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 3
59626: NEG
59627: PUSH
59628: LD_INT 1
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 3
59638: NEG
59639: PUSH
59640: LD_INT 2
59642: NEG
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59673: LD_ADDR_VAR 0 28
59677: PUSH
59678: LD_INT 0
59680: PUSH
59681: LD_INT 0
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 0
59690: PUSH
59691: LD_INT 1
59693: NEG
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 1
59701: PUSH
59702: LD_INT 0
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 1
59711: PUSH
59712: LD_INT 1
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 0
59721: PUSH
59722: LD_INT 1
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 1
59731: NEG
59732: PUSH
59733: LD_INT 0
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 1
59742: NEG
59743: PUSH
59744: LD_INT 1
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 1
59754: NEG
59755: PUSH
59756: LD_INT 2
59758: NEG
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 0
59766: PUSH
59767: LD_INT 2
59769: NEG
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 1
59777: PUSH
59778: LD_INT 1
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 2
59788: PUSH
59789: LD_INT 0
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 2
59798: PUSH
59799: LD_INT 1
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 2
59808: PUSH
59809: LD_INT 2
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 1
59818: PUSH
59819: LD_INT 2
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 0
59828: PUSH
59829: LD_INT 2
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 1
59838: NEG
59839: PUSH
59840: LD_INT 1
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 2
59849: NEG
59850: PUSH
59851: LD_INT 0
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 2
59860: NEG
59861: PUSH
59862: LD_INT 1
59864: NEG
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 2
59872: NEG
59873: PUSH
59874: LD_INT 2
59876: NEG
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 2
59884: NEG
59885: PUSH
59886: LD_INT 3
59888: NEG
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 1
59896: NEG
59897: PUSH
59898: LD_INT 3
59900: NEG
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 3
59908: NEG
59909: PUSH
59910: LD_INT 1
59912: NEG
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 3
59920: NEG
59921: PUSH
59922: LD_INT 2
59924: NEG
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59955: LD_ADDR_VAR 0 29
59959: PUSH
59960: LD_INT 0
59962: PUSH
59963: LD_INT 0
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 0
59972: PUSH
59973: LD_INT 1
59975: NEG
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 1
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 1
59993: PUSH
59994: LD_INT 1
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 0
60003: PUSH
60004: LD_INT 1
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 1
60013: NEG
60014: PUSH
60015: LD_INT 0
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 1
60024: NEG
60025: PUSH
60026: LD_INT 1
60028: NEG
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 1
60036: NEG
60037: PUSH
60038: LD_INT 2
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 0
60048: PUSH
60049: LD_INT 2
60051: NEG
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 1
60059: PUSH
60060: LD_INT 1
60062: NEG
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 2
60070: PUSH
60071: LD_INT 0
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 2
60080: PUSH
60081: LD_INT 1
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 1
60090: PUSH
60091: LD_INT 2
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 0
60100: PUSH
60101: LD_INT 2
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 1
60110: NEG
60111: PUSH
60112: LD_INT 1
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 2
60121: NEG
60122: PUSH
60123: LD_INT 1
60125: NEG
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 2
60133: NEG
60134: PUSH
60135: LD_INT 2
60137: NEG
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 2
60145: NEG
60146: PUSH
60147: LD_INT 3
60149: NEG
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 2
60157: PUSH
60158: LD_INT 1
60160: NEG
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 3
60168: PUSH
60169: LD_INT 1
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 1
60178: PUSH
60179: LD_INT 3
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 1
60188: NEG
60189: PUSH
60190: LD_INT 2
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 3
60199: NEG
60200: PUSH
60201: LD_INT 2
60203: NEG
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60234: LD_ADDR_VAR 0 30
60238: PUSH
60239: LD_INT 0
60241: PUSH
60242: LD_INT 0
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 0
60251: PUSH
60252: LD_INT 1
60254: NEG
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 1
60262: PUSH
60263: LD_INT 0
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 1
60272: PUSH
60273: LD_INT 1
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 0
60282: PUSH
60283: LD_INT 1
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 1
60292: NEG
60293: PUSH
60294: LD_INT 0
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 1
60303: NEG
60304: PUSH
60305: LD_INT 1
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 1
60315: NEG
60316: PUSH
60317: LD_INT 2
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: LD_INT 2
60330: NEG
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 1
60338: PUSH
60339: LD_INT 1
60341: NEG
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 2
60349: PUSH
60350: LD_INT 0
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 2
60359: PUSH
60360: LD_INT 1
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 2
60369: PUSH
60370: LD_INT 2
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 1
60379: PUSH
60380: LD_INT 2
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 1
60389: NEG
60390: PUSH
60391: LD_INT 1
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 2
60400: NEG
60401: PUSH
60402: LD_INT 0
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 2
60411: NEG
60412: PUSH
60413: LD_INT 1
60415: NEG
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 1
60423: NEG
60424: PUSH
60425: LD_INT 3
60427: NEG
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 1
60435: PUSH
60436: LD_INT 2
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 3
60446: PUSH
60447: LD_INT 2
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 2
60456: PUSH
60457: LD_INT 3
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 2
60466: NEG
60467: PUSH
60468: LD_INT 1
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 3
60477: NEG
60478: PUSH
60479: LD_INT 1
60481: NEG
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60512: LD_ADDR_VAR 0 31
60516: PUSH
60517: LD_INT 0
60519: PUSH
60520: LD_INT 0
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 0
60529: PUSH
60530: LD_INT 1
60532: NEG
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 1
60540: PUSH
60541: LD_INT 0
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 1
60550: PUSH
60551: LD_INT 1
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 0
60560: PUSH
60561: LD_INT 1
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 1
60570: NEG
60571: PUSH
60572: LD_INT 0
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 1
60581: NEG
60582: PUSH
60583: LD_INT 1
60585: NEG
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 1
60593: NEG
60594: PUSH
60595: LD_INT 2
60597: NEG
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 1
60605: PUSH
60606: LD_INT 1
60608: NEG
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 2
60616: PUSH
60617: LD_INT 0
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 2
60626: PUSH
60627: LD_INT 1
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 2
60636: PUSH
60637: LD_INT 2
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 1
60646: PUSH
60647: LD_INT 2
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 0
60656: PUSH
60657: LD_INT 2
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 1
60666: NEG
60667: PUSH
60668: LD_INT 1
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 2
60677: NEG
60678: PUSH
60679: LD_INT 1
60681: NEG
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 2
60689: NEG
60690: PUSH
60691: LD_INT 2
60693: NEG
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 2
60701: NEG
60702: PUSH
60703: LD_INT 3
60705: NEG
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 2
60713: PUSH
60714: LD_INT 1
60716: NEG
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 3
60724: PUSH
60725: LD_INT 1
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 1
60734: PUSH
60735: LD_INT 3
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 1
60744: NEG
60745: PUSH
60746: LD_INT 2
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 3
60755: NEG
60756: PUSH
60757: LD_INT 2
60759: NEG
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60790: LD_ADDR_VAR 0 32
60794: PUSH
60795: LD_INT 0
60797: PUSH
60798: LD_INT 0
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 0
60807: PUSH
60808: LD_INT 1
60810: NEG
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 1
60818: PUSH
60819: LD_INT 0
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 1
60828: PUSH
60829: LD_INT 1
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 0
60838: PUSH
60839: LD_INT 1
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 1
60848: NEG
60849: PUSH
60850: LD_INT 0
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 1
60859: NEG
60860: PUSH
60861: LD_INT 1
60863: NEG
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 1
60871: NEG
60872: PUSH
60873: LD_INT 2
60875: NEG
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 0
60883: PUSH
60884: LD_INT 2
60886: NEG
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 1
60894: PUSH
60895: LD_INT 1
60897: NEG
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 2
60905: PUSH
60906: LD_INT 1
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 2
60915: PUSH
60916: LD_INT 2
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 1
60925: PUSH
60926: LD_INT 2
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 0
60935: PUSH
60936: LD_INT 2
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 1
60945: NEG
60946: PUSH
60947: LD_INT 1
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 2
60956: NEG
60957: PUSH
60958: LD_INT 0
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 2
60967: NEG
60968: PUSH
60969: LD_INT 1
60971: NEG
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 1
60979: NEG
60980: PUSH
60981: LD_INT 3
60983: NEG
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 1
60991: PUSH
60992: LD_INT 2
60994: NEG
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 3
61002: PUSH
61003: LD_INT 2
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 2
61012: PUSH
61013: LD_INT 3
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 2
61022: NEG
61023: PUSH
61024: LD_INT 1
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 3
61033: NEG
61034: PUSH
61035: LD_INT 1
61037: NEG
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61068: LD_ADDR_VAR 0 33
61072: PUSH
61073: LD_INT 0
61075: PUSH
61076: LD_INT 0
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 0
61085: PUSH
61086: LD_INT 1
61088: NEG
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 1
61096: PUSH
61097: LD_INT 0
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 1
61106: PUSH
61107: LD_INT 1
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 0
61116: PUSH
61117: LD_INT 1
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 1
61126: NEG
61127: PUSH
61128: LD_INT 0
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 1
61137: NEG
61138: PUSH
61139: LD_INT 1
61141: NEG
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 1
61149: NEG
61150: PUSH
61151: LD_INT 2
61153: NEG
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 1
61161: PUSH
61162: LD_INT 1
61164: NEG
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 2
61172: PUSH
61173: LD_INT 0
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 2
61182: PUSH
61183: LD_INT 1
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 1
61192: PUSH
61193: LD_INT 2
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 0
61202: PUSH
61203: LD_INT 2
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 1
61212: NEG
61213: PUSH
61214: LD_INT 1
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 2
61223: NEG
61224: PUSH
61225: LD_INT 0
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 2
61234: NEG
61235: PUSH
61236: LD_INT 1
61238: NEG
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 2
61246: NEG
61247: PUSH
61248: LD_INT 2
61250: NEG
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 2
61258: NEG
61259: PUSH
61260: LD_INT 3
61262: NEG
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 2
61270: PUSH
61271: LD_INT 1
61273: NEG
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 3
61281: PUSH
61282: LD_INT 1
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 1
61291: PUSH
61292: LD_INT 3
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 1
61301: NEG
61302: PUSH
61303: LD_INT 2
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 3
61312: NEG
61313: PUSH
61314: LD_INT 2
61316: NEG
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61347: LD_ADDR_VAR 0 34
61351: PUSH
61352: LD_INT 0
61354: PUSH
61355: LD_INT 0
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 0
61364: PUSH
61365: LD_INT 1
61367: NEG
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 1
61375: PUSH
61376: LD_INT 0
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 1
61385: PUSH
61386: LD_INT 1
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 0
61395: PUSH
61396: LD_INT 1
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 1
61405: NEG
61406: PUSH
61407: LD_INT 0
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 1
61416: NEG
61417: PUSH
61418: LD_INT 1
61420: NEG
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 1
61428: NEG
61429: PUSH
61430: LD_INT 2
61432: NEG
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 0
61440: PUSH
61441: LD_INT 2
61443: NEG
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 1
61451: PUSH
61452: LD_INT 1
61454: NEG
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 2
61462: PUSH
61463: LD_INT 1
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 2
61472: PUSH
61473: LD_INT 2
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 1
61482: PUSH
61483: LD_INT 2
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 1
61492: NEG
61493: PUSH
61494: LD_INT 1
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 2
61503: NEG
61504: PUSH
61505: LD_INT 0
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 2
61514: NEG
61515: PUSH
61516: LD_INT 1
61518: NEG
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 2
61526: NEG
61527: PUSH
61528: LD_INT 2
61530: NEG
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 1
61538: NEG
61539: PUSH
61540: LD_INT 3
61542: NEG
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 1
61550: PUSH
61551: LD_INT 2
61553: NEG
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 3
61561: PUSH
61562: LD_INT 2
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 2
61571: PUSH
61572: LD_INT 3
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 2
61581: NEG
61582: PUSH
61583: LD_INT 1
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 3
61592: NEG
61593: PUSH
61594: LD_INT 1
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61627: LD_ADDR_VAR 0 35
61631: PUSH
61632: LD_INT 0
61634: PUSH
61635: LD_INT 0
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 0
61644: PUSH
61645: LD_INT 1
61647: NEG
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 1
61655: PUSH
61656: LD_INT 0
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 1
61665: PUSH
61666: LD_INT 1
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 0
61675: PUSH
61676: LD_INT 1
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 1
61685: NEG
61686: PUSH
61687: LD_INT 0
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 1
61696: NEG
61697: PUSH
61698: LD_INT 1
61700: NEG
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 2
61708: PUSH
61709: LD_INT 1
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 2
61718: NEG
61719: PUSH
61720: LD_INT 1
61722: NEG
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61739: LD_ADDR_VAR 0 36
61743: PUSH
61744: LD_INT 0
61746: PUSH
61747: LD_INT 0
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 0
61756: PUSH
61757: LD_INT 1
61759: NEG
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 1
61767: PUSH
61768: LD_INT 0
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 1
61777: PUSH
61778: LD_INT 1
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 0
61787: PUSH
61788: LD_INT 1
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 1
61797: NEG
61798: PUSH
61799: LD_INT 0
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 1
61808: NEG
61809: PUSH
61810: LD_INT 1
61812: NEG
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 1
61820: NEG
61821: PUSH
61822: LD_INT 2
61824: NEG
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 1
61832: PUSH
61833: LD_INT 2
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61851: LD_ADDR_VAR 0 37
61855: PUSH
61856: LD_INT 0
61858: PUSH
61859: LD_INT 0
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 0
61868: PUSH
61869: LD_INT 1
61871: NEG
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 1
61879: PUSH
61880: LD_INT 0
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 1
61889: PUSH
61890: LD_INT 1
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 0
61899: PUSH
61900: LD_INT 1
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 1
61909: NEG
61910: PUSH
61911: LD_INT 0
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PUSH
61918: LD_INT 1
61920: NEG
61921: PUSH
61922: LD_INT 1
61924: NEG
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 1
61932: PUSH
61933: LD_INT 1
61935: NEG
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 1
61943: NEG
61944: PUSH
61945: LD_INT 1
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61963: LD_ADDR_VAR 0 38
61967: PUSH
61968: LD_INT 0
61970: PUSH
61971: LD_INT 0
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 0
61980: PUSH
61981: LD_INT 1
61983: NEG
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 1
61991: PUSH
61992: LD_INT 0
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 1
62001: PUSH
62002: LD_INT 1
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 0
62011: PUSH
62012: LD_INT 1
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 1
62021: NEG
62022: PUSH
62023: LD_INT 0
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 1
62032: NEG
62033: PUSH
62034: LD_INT 1
62036: NEG
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 2
62044: PUSH
62045: LD_INT 1
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 2
62054: NEG
62055: PUSH
62056: LD_INT 1
62058: NEG
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62075: LD_ADDR_VAR 0 39
62079: PUSH
62080: LD_INT 0
62082: PUSH
62083: LD_INT 0
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 0
62092: PUSH
62093: LD_INT 1
62095: NEG
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 1
62103: PUSH
62104: LD_INT 0
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 1
62113: PUSH
62114: LD_INT 1
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 0
62123: PUSH
62124: LD_INT 1
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 1
62133: NEG
62134: PUSH
62135: LD_INT 0
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 1
62144: NEG
62145: PUSH
62146: LD_INT 1
62148: NEG
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 1
62156: NEG
62157: PUSH
62158: LD_INT 2
62160: NEG
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 1
62168: PUSH
62169: LD_INT 2
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62187: LD_ADDR_VAR 0 40
62191: PUSH
62192: LD_INT 0
62194: PUSH
62195: LD_INT 0
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 0
62204: PUSH
62205: LD_INT 1
62207: NEG
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 1
62215: PUSH
62216: LD_INT 0
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 1
62225: PUSH
62226: LD_INT 1
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 0
62235: PUSH
62236: LD_INT 1
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 1
62245: NEG
62246: PUSH
62247: LD_INT 0
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 1
62256: NEG
62257: PUSH
62258: LD_INT 1
62260: NEG
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 1
62268: PUSH
62269: LD_INT 1
62271: NEG
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 1
62279: NEG
62280: PUSH
62281: LD_INT 1
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62299: LD_ADDR_VAR 0 41
62303: PUSH
62304: LD_INT 0
62306: PUSH
62307: LD_INT 0
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 0
62316: PUSH
62317: LD_INT 1
62319: NEG
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 1
62327: PUSH
62328: LD_INT 0
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 1
62337: PUSH
62338: LD_INT 1
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 0
62347: PUSH
62348: LD_INT 1
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 1
62357: NEG
62358: PUSH
62359: LD_INT 0
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 1
62368: NEG
62369: PUSH
62370: LD_INT 1
62372: NEG
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 1
62380: NEG
62381: PUSH
62382: LD_INT 2
62384: NEG
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 1
62392: PUSH
62393: LD_INT 1
62395: NEG
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 2
62403: PUSH
62404: LD_INT 0
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 2
62413: PUSH
62414: LD_INT 1
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 2
62423: PUSH
62424: LD_INT 2
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 1
62433: PUSH
62434: LD_INT 2
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 1
62443: NEG
62444: PUSH
62445: LD_INT 1
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 2
62454: NEG
62455: PUSH
62456: LD_INT 0
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 2
62465: NEG
62466: PUSH
62467: LD_INT 1
62469: NEG
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 2
62477: NEG
62478: PUSH
62479: LD_INT 2
62481: NEG
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 2
62489: NEG
62490: PUSH
62491: LD_INT 3
62493: NEG
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 2
62501: PUSH
62502: LD_INT 1
62504: NEG
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 3
62512: PUSH
62513: LD_INT 0
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 3
62522: PUSH
62523: LD_INT 1
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: LD_INT 3
62532: PUSH
62533: LD_INT 2
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 3
62542: PUSH
62543: LD_INT 3
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 2
62552: PUSH
62553: LD_INT 3
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 2
62562: NEG
62563: PUSH
62564: LD_INT 1
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 3
62573: NEG
62574: PUSH
62575: LD_INT 0
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 3
62584: NEG
62585: PUSH
62586: LD_INT 1
62588: NEG
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 3
62596: NEG
62597: PUSH
62598: LD_INT 2
62600: NEG
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 3
62608: NEG
62609: PUSH
62610: LD_INT 3
62612: NEG
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62649: LD_ADDR_VAR 0 42
62653: PUSH
62654: LD_INT 0
62656: PUSH
62657: LD_INT 0
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 0
62666: PUSH
62667: LD_INT 1
62669: NEG
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 1
62677: PUSH
62678: LD_INT 0
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 1
62687: PUSH
62688: LD_INT 1
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 0
62697: PUSH
62698: LD_INT 1
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 1
62707: NEG
62708: PUSH
62709: LD_INT 0
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 1
62718: NEG
62719: PUSH
62720: LD_INT 1
62722: NEG
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 1
62730: NEG
62731: PUSH
62732: LD_INT 2
62734: NEG
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 0
62742: PUSH
62743: LD_INT 2
62745: NEG
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 1
62753: PUSH
62754: LD_INT 1
62756: NEG
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 2
62764: PUSH
62765: LD_INT 1
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 2
62774: PUSH
62775: LD_INT 2
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 1
62784: PUSH
62785: LD_INT 2
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 0
62794: PUSH
62795: LD_INT 2
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 1
62804: NEG
62805: PUSH
62806: LD_INT 1
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 2
62815: NEG
62816: PUSH
62817: LD_INT 1
62819: NEG
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 2
62827: NEG
62828: PUSH
62829: LD_INT 2
62831: NEG
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 2
62839: NEG
62840: PUSH
62841: LD_INT 3
62843: NEG
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 1
62851: NEG
62852: PUSH
62853: LD_INT 3
62855: NEG
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 0
62863: PUSH
62864: LD_INT 3
62866: NEG
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 1
62874: PUSH
62875: LD_INT 2
62877: NEG
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 3
62885: PUSH
62886: LD_INT 2
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 3
62895: PUSH
62896: LD_INT 3
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 2
62905: PUSH
62906: LD_INT 3
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 1
62915: PUSH
62916: LD_INT 3
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PUSH
62923: LD_INT 0
62925: PUSH
62926: LD_INT 3
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 1
62935: NEG
62936: PUSH
62937: LD_INT 2
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 3
62946: NEG
62947: PUSH
62948: LD_INT 2
62950: NEG
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 3
62958: NEG
62959: PUSH
62960: LD_INT 3
62962: NEG
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62999: LD_ADDR_VAR 0 43
63003: PUSH
63004: LD_INT 0
63006: PUSH
63007: LD_INT 0
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 0
63016: PUSH
63017: LD_INT 1
63019: NEG
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 1
63027: PUSH
63028: LD_INT 0
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 1
63037: PUSH
63038: LD_INT 1
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_INT 0
63047: PUSH
63048: LD_INT 1
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 1
63057: NEG
63058: PUSH
63059: LD_INT 0
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 1
63068: NEG
63069: PUSH
63070: LD_INT 1
63072: NEG
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 1
63080: NEG
63081: PUSH
63082: LD_INT 2
63084: NEG
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 0
63092: PUSH
63093: LD_INT 2
63095: NEG
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 1
63103: PUSH
63104: LD_INT 1
63106: NEG
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 2
63114: PUSH
63115: LD_INT 0
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 2
63124: PUSH
63125: LD_INT 1
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 1
63134: PUSH
63135: LD_INT 2
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 0
63144: PUSH
63145: LD_INT 2
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 1
63154: NEG
63155: PUSH
63156: LD_INT 1
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 2
63165: NEG
63166: PUSH
63167: LD_INT 0
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 2
63176: NEG
63177: PUSH
63178: LD_INT 1
63180: NEG
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: LD_INT 1
63188: NEG
63189: PUSH
63190: LD_INT 3
63192: NEG
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 0
63200: PUSH
63201: LD_INT 3
63203: NEG
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 1
63211: PUSH
63212: LD_INT 2
63214: NEG
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 2
63222: PUSH
63223: LD_INT 1
63225: NEG
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 3
63233: PUSH
63234: LD_INT 0
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 3
63243: PUSH
63244: LD_INT 1
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 1
63253: PUSH
63254: LD_INT 3
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 0
63263: PUSH
63264: LD_INT 3
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 1
63273: NEG
63274: PUSH
63275: LD_INT 2
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 2
63284: NEG
63285: PUSH
63286: LD_INT 1
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 3
63295: NEG
63296: PUSH
63297: LD_INT 0
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 3
63306: NEG
63307: PUSH
63308: LD_INT 1
63310: NEG
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63347: LD_ADDR_VAR 0 44
63351: PUSH
63352: LD_INT 0
63354: PUSH
63355: LD_INT 0
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 0
63364: PUSH
63365: LD_INT 1
63367: NEG
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: PUSH
63373: LD_INT 1
63375: PUSH
63376: LD_INT 0
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: LD_INT 1
63385: PUSH
63386: LD_INT 1
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 0
63395: PUSH
63396: LD_INT 1
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 1
63405: NEG
63406: PUSH
63407: LD_INT 0
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 1
63416: NEG
63417: PUSH
63418: LD_INT 1
63420: NEG
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 1
63428: NEG
63429: PUSH
63430: LD_INT 2
63432: NEG
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 1
63440: PUSH
63441: LD_INT 1
63443: NEG
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 2
63451: PUSH
63452: LD_INT 0
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 2
63461: PUSH
63462: LD_INT 1
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 2
63471: PUSH
63472: LD_INT 2
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 1
63481: PUSH
63482: LD_INT 2
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 1
63491: NEG
63492: PUSH
63493: LD_INT 1
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 2
63502: NEG
63503: PUSH
63504: LD_INT 0
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 2
63513: NEG
63514: PUSH
63515: LD_INT 1
63517: NEG
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 2
63525: NEG
63526: PUSH
63527: LD_INT 2
63529: NEG
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 2
63537: NEG
63538: PUSH
63539: LD_INT 3
63541: NEG
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 2
63549: PUSH
63550: LD_INT 1
63552: NEG
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 3
63560: PUSH
63561: LD_INT 0
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 3
63570: PUSH
63571: LD_INT 1
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 3
63580: PUSH
63581: LD_INT 2
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 3
63590: PUSH
63591: LD_INT 3
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 2
63600: PUSH
63601: LD_INT 3
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 2
63610: NEG
63611: PUSH
63612: LD_INT 1
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 3
63621: NEG
63622: PUSH
63623: LD_INT 0
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 3
63632: NEG
63633: PUSH
63634: LD_INT 1
63636: NEG
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 3
63644: NEG
63645: PUSH
63646: LD_INT 2
63648: NEG
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 3
63656: NEG
63657: PUSH
63658: LD_INT 3
63660: NEG
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: LIST
63696: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63697: LD_ADDR_VAR 0 45
63701: PUSH
63702: LD_INT 0
63704: PUSH
63705: LD_INT 0
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 0
63714: PUSH
63715: LD_INT 1
63717: NEG
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 1
63725: PUSH
63726: LD_INT 0
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 1
63735: PUSH
63736: LD_INT 1
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 0
63745: PUSH
63746: LD_INT 1
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 1
63755: NEG
63756: PUSH
63757: LD_INT 0
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 1
63766: NEG
63767: PUSH
63768: LD_INT 1
63770: NEG
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 1
63778: NEG
63779: PUSH
63780: LD_INT 2
63782: NEG
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 0
63790: PUSH
63791: LD_INT 2
63793: NEG
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 1
63801: PUSH
63802: LD_INT 1
63804: NEG
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 2
63812: PUSH
63813: LD_INT 1
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 2
63822: PUSH
63823: LD_INT 2
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 1
63832: PUSH
63833: LD_INT 2
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 0
63842: PUSH
63843: LD_INT 2
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 1
63852: NEG
63853: PUSH
63854: LD_INT 1
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 2
63863: NEG
63864: PUSH
63865: LD_INT 1
63867: NEG
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 2
63875: NEG
63876: PUSH
63877: LD_INT 2
63879: NEG
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 2
63887: NEG
63888: PUSH
63889: LD_INT 3
63891: NEG
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 1
63899: NEG
63900: PUSH
63901: LD_INT 3
63903: NEG
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 0
63911: PUSH
63912: LD_INT 3
63914: NEG
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 1
63922: PUSH
63923: LD_INT 2
63925: NEG
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 3
63933: PUSH
63934: LD_INT 2
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 3
63943: PUSH
63944: LD_INT 3
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 2
63953: PUSH
63954: LD_INT 3
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 1
63963: PUSH
63964: LD_INT 3
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 0
63973: PUSH
63974: LD_INT 3
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 1
63983: NEG
63984: PUSH
63985: LD_INT 2
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 3
63994: NEG
63995: PUSH
63996: LD_INT 2
63998: NEG
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 3
64006: NEG
64007: PUSH
64008: LD_INT 3
64010: NEG
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64047: LD_ADDR_VAR 0 46
64051: PUSH
64052: LD_INT 0
64054: PUSH
64055: LD_INT 0
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 0
64064: PUSH
64065: LD_INT 1
64067: NEG
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 1
64075: PUSH
64076: LD_INT 0
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 1
64085: PUSH
64086: LD_INT 1
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 0
64095: PUSH
64096: LD_INT 1
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 1
64105: NEG
64106: PUSH
64107: LD_INT 0
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: LD_INT 1
64116: NEG
64117: PUSH
64118: LD_INT 1
64120: NEG
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 1
64128: NEG
64129: PUSH
64130: LD_INT 2
64132: NEG
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 0
64140: PUSH
64141: LD_INT 2
64143: NEG
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 1
64151: PUSH
64152: LD_INT 1
64154: NEG
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 2
64162: PUSH
64163: LD_INT 0
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 2
64172: PUSH
64173: LD_INT 1
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 1
64182: PUSH
64183: LD_INT 2
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 0
64192: PUSH
64193: LD_INT 2
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 1
64202: NEG
64203: PUSH
64204: LD_INT 1
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 2
64213: NEG
64214: PUSH
64215: LD_INT 0
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 2
64224: NEG
64225: PUSH
64226: LD_INT 1
64228: NEG
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PUSH
64234: LD_INT 1
64236: NEG
64237: PUSH
64238: LD_INT 3
64240: NEG
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 0
64248: PUSH
64249: LD_INT 3
64251: NEG
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 1
64259: PUSH
64260: LD_INT 2
64262: NEG
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 2
64270: PUSH
64271: LD_INT 1
64273: NEG
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 3
64281: PUSH
64282: LD_INT 0
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 3
64291: PUSH
64292: LD_INT 1
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 1
64301: PUSH
64302: LD_INT 3
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 0
64311: PUSH
64312: LD_INT 3
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 1
64321: NEG
64322: PUSH
64323: LD_INT 2
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 2
64332: NEG
64333: PUSH
64334: LD_INT 1
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 3
64343: NEG
64344: PUSH
64345: LD_INT 0
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: LD_INT 3
64354: NEG
64355: PUSH
64356: LD_INT 1
64358: NEG
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64395: LD_ADDR_VAR 0 47
64399: PUSH
64400: LD_INT 0
64402: PUSH
64403: LD_INT 0
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 0
64412: PUSH
64413: LD_INT 1
64415: NEG
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 1
64423: PUSH
64424: LD_INT 0
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: LD_INT 1
64433: PUSH
64434: LD_INT 1
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 0
64443: PUSH
64444: LD_INT 1
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 1
64453: NEG
64454: PUSH
64455: LD_INT 0
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 1
64464: NEG
64465: PUSH
64466: LD_INT 1
64468: NEG
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 1
64476: NEG
64477: PUSH
64478: LD_INT 2
64480: NEG
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: PUSH
64486: LD_INT 0
64488: PUSH
64489: LD_INT 2
64491: NEG
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 1
64499: PUSH
64500: LD_INT 1
64502: NEG
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 2
64510: NEG
64511: PUSH
64512: LD_INT 1
64514: NEG
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: LD_INT 2
64522: NEG
64523: PUSH
64524: LD_INT 2
64526: NEG
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64546: LD_ADDR_VAR 0 48
64550: PUSH
64551: LD_INT 0
64553: PUSH
64554: LD_INT 0
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 0
64563: PUSH
64564: LD_INT 1
64566: NEG
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 1
64574: PUSH
64575: LD_INT 0
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 1
64584: PUSH
64585: LD_INT 1
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 0
64594: PUSH
64595: LD_INT 1
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 1
64604: NEG
64605: PUSH
64606: LD_INT 0
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 1
64615: NEG
64616: PUSH
64617: LD_INT 1
64619: NEG
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 1
64627: NEG
64628: PUSH
64629: LD_INT 2
64631: NEG
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: LD_INT 0
64639: PUSH
64640: LD_INT 2
64642: NEG
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 1
64650: PUSH
64651: LD_INT 1
64653: NEG
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 2
64661: PUSH
64662: LD_INT 0
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 2
64671: PUSH
64672: LD_INT 1
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64693: LD_ADDR_VAR 0 49
64697: PUSH
64698: LD_INT 0
64700: PUSH
64701: LD_INT 0
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 0
64710: PUSH
64711: LD_INT 1
64713: NEG
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 1
64721: PUSH
64722: LD_INT 0
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 1
64731: PUSH
64732: LD_INT 1
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 0
64741: PUSH
64742: LD_INT 1
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 1
64751: NEG
64752: PUSH
64753: LD_INT 0
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 1
64762: NEG
64763: PUSH
64764: LD_INT 1
64766: NEG
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 1
64774: PUSH
64775: LD_INT 1
64777: NEG
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 2
64785: PUSH
64786: LD_INT 0
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 2
64795: PUSH
64796: LD_INT 1
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 2
64805: PUSH
64806: LD_INT 2
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 1
64815: PUSH
64816: LD_INT 2
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: LIST
64835: LIST
64836: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64837: LD_ADDR_VAR 0 50
64841: PUSH
64842: LD_INT 0
64844: PUSH
64845: LD_INT 0
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 0
64854: PUSH
64855: LD_INT 1
64857: NEG
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 1
64865: PUSH
64866: LD_INT 0
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 1
64875: PUSH
64876: LD_INT 1
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 0
64885: PUSH
64886: LD_INT 1
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 1
64895: NEG
64896: PUSH
64897: LD_INT 0
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 1
64906: NEG
64907: PUSH
64908: LD_INT 1
64910: NEG
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 2
64918: PUSH
64919: LD_INT 1
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 2
64928: PUSH
64929: LD_INT 2
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 1
64938: PUSH
64939: LD_INT 2
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 0
64948: PUSH
64949: LD_INT 2
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 1
64958: NEG
64959: PUSH
64960: LD_INT 1
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64981: LD_ADDR_VAR 0 51
64985: PUSH
64986: LD_INT 0
64988: PUSH
64989: LD_INT 0
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: LD_INT 0
64998: PUSH
64999: LD_INT 1
65001: NEG
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: LD_INT 1
65009: PUSH
65010: LD_INT 0
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 1
65019: PUSH
65020: LD_INT 1
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 0
65029: PUSH
65030: LD_INT 1
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: LD_INT 1
65039: NEG
65040: PUSH
65041: LD_INT 0
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: LD_INT 1
65050: NEG
65051: PUSH
65052: LD_INT 1
65054: NEG
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 1
65062: PUSH
65063: LD_INT 2
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 0
65072: PUSH
65073: LD_INT 2
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 1
65082: NEG
65083: PUSH
65084: LD_INT 1
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 2
65093: NEG
65094: PUSH
65095: LD_INT 0
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 2
65104: NEG
65105: PUSH
65106: LD_INT 1
65108: NEG
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65128: LD_ADDR_VAR 0 52
65132: PUSH
65133: LD_INT 0
65135: PUSH
65136: LD_INT 0
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: LD_INT 0
65145: PUSH
65146: LD_INT 1
65148: NEG
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: PUSH
65154: LD_INT 1
65156: PUSH
65157: LD_INT 0
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: PUSH
65164: LD_INT 1
65166: PUSH
65167: LD_INT 1
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 0
65176: PUSH
65177: LD_INT 1
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 1
65186: NEG
65187: PUSH
65188: LD_INT 0
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 1
65197: NEG
65198: PUSH
65199: LD_INT 1
65201: NEG
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: LD_INT 1
65209: NEG
65210: PUSH
65211: LD_INT 2
65213: NEG
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 1
65221: NEG
65222: PUSH
65223: LD_INT 1
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: LD_INT 2
65232: NEG
65233: PUSH
65234: LD_INT 0
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 2
65243: NEG
65244: PUSH
65245: LD_INT 1
65247: NEG
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 2
65255: NEG
65256: PUSH
65257: LD_INT 2
65259: NEG
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65279: LD_ADDR_VAR 0 53
65283: PUSH
65284: LD_INT 0
65286: PUSH
65287: LD_INT 0
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 0
65296: PUSH
65297: LD_INT 1
65299: NEG
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: LD_INT 1
65307: PUSH
65308: LD_INT 0
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: LD_INT 1
65317: PUSH
65318: LD_INT 1
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: LD_INT 0
65327: PUSH
65328: LD_INT 1
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 1
65337: NEG
65338: PUSH
65339: LD_INT 0
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 1
65348: NEG
65349: PUSH
65350: LD_INT 1
65352: NEG
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 1
65360: NEG
65361: PUSH
65362: LD_INT 2
65364: NEG
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 0
65372: PUSH
65373: LD_INT 2
65375: NEG
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 1
65383: PUSH
65384: LD_INT 1
65386: NEG
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 2
65394: PUSH
65395: LD_INT 0
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 2
65404: PUSH
65405: LD_INT 1
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 2
65414: PUSH
65415: LD_INT 2
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: LD_INT 1
65424: PUSH
65425: LD_INT 2
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 0
65434: PUSH
65435: LD_INT 2
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 1
65444: NEG
65445: PUSH
65446: LD_INT 1
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 2
65455: NEG
65456: PUSH
65457: LD_INT 0
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 2
65466: NEG
65467: PUSH
65468: LD_INT 1
65470: NEG
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 2
65478: NEG
65479: PUSH
65480: LD_INT 2
65482: NEG
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65509: LD_ADDR_VAR 0 54
65513: PUSH
65514: LD_INT 0
65516: PUSH
65517: LD_INT 0
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 0
65526: PUSH
65527: LD_INT 1
65529: NEG
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 1
65537: PUSH
65538: LD_INT 0
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 1
65547: PUSH
65548: LD_INT 1
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: LD_INT 0
65557: PUSH
65558: LD_INT 1
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 1
65567: NEG
65568: PUSH
65569: LD_INT 0
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 1
65578: NEG
65579: PUSH
65580: LD_INT 1
65582: NEG
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 1
65590: NEG
65591: PUSH
65592: LD_INT 2
65594: NEG
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 0
65602: PUSH
65603: LD_INT 2
65605: NEG
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 1
65613: PUSH
65614: LD_INT 1
65616: NEG
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 2
65624: PUSH
65625: LD_INT 0
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 2
65634: PUSH
65635: LD_INT 1
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 2
65644: PUSH
65645: LD_INT 2
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: LD_INT 1
65654: PUSH
65655: LD_INT 2
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 0
65664: PUSH
65665: LD_INT 2
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 1
65674: NEG
65675: PUSH
65676: LD_INT 1
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 2
65685: NEG
65686: PUSH
65687: LD_INT 0
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: LD_INT 2
65696: NEG
65697: PUSH
65698: LD_INT 1
65700: NEG
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 2
65708: NEG
65709: PUSH
65710: LD_INT 2
65712: NEG
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: LIST
65728: LIST
65729: LIST
65730: LIST
65731: LIST
65732: LIST
65733: LIST
65734: LIST
65735: LIST
65736: LIST
65737: LIST
65738: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65739: LD_ADDR_VAR 0 55
65743: PUSH
65744: LD_INT 0
65746: PUSH
65747: LD_INT 0
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 0
65756: PUSH
65757: LD_INT 1
65759: NEG
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 1
65767: PUSH
65768: LD_INT 0
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 1
65777: PUSH
65778: LD_INT 1
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: LD_INT 0
65787: PUSH
65788: LD_INT 1
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: LD_INT 1
65797: NEG
65798: PUSH
65799: LD_INT 0
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: PUSH
65806: LD_INT 1
65808: NEG
65809: PUSH
65810: LD_INT 1
65812: NEG
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 1
65820: NEG
65821: PUSH
65822: LD_INT 2
65824: NEG
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 0
65832: PUSH
65833: LD_INT 2
65835: NEG
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 1
65843: PUSH
65844: LD_INT 1
65846: NEG
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 2
65854: PUSH
65855: LD_INT 0
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 2
65864: PUSH
65865: LD_INT 1
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 2
65874: PUSH
65875: LD_INT 2
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 1
65884: PUSH
65885: LD_INT 2
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 0
65894: PUSH
65895: LD_INT 2
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 1
65904: NEG
65905: PUSH
65906: LD_INT 1
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 2
65915: NEG
65916: PUSH
65917: LD_INT 0
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 2
65926: NEG
65927: PUSH
65928: LD_INT 1
65930: NEG
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 2
65938: NEG
65939: PUSH
65940: LD_INT 2
65942: NEG
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: LIST
65952: LIST
65953: LIST
65954: LIST
65955: LIST
65956: LIST
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65969: LD_ADDR_VAR 0 56
65973: PUSH
65974: LD_INT 0
65976: PUSH
65977: LD_INT 0
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 0
65986: PUSH
65987: LD_INT 1
65989: NEG
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 1
65997: PUSH
65998: LD_INT 0
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 1
66007: PUSH
66008: LD_INT 1
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: LD_INT 0
66017: PUSH
66018: LD_INT 1
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 1
66027: NEG
66028: PUSH
66029: LD_INT 0
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 1
66038: NEG
66039: PUSH
66040: LD_INT 1
66042: NEG
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PUSH
66048: LD_INT 1
66050: NEG
66051: PUSH
66052: LD_INT 2
66054: NEG
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 0
66062: PUSH
66063: LD_INT 2
66065: NEG
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 1
66073: PUSH
66074: LD_INT 1
66076: NEG
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 2
66084: PUSH
66085: LD_INT 0
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 2
66094: PUSH
66095: LD_INT 1
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 2
66104: PUSH
66105: LD_INT 2
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: PUSH
66112: LD_INT 1
66114: PUSH
66115: LD_INT 2
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PUSH
66122: LD_INT 0
66124: PUSH
66125: LD_INT 2
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: LD_INT 1
66134: NEG
66135: PUSH
66136: LD_INT 1
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: PUSH
66143: LD_INT 2
66145: NEG
66146: PUSH
66147: LD_INT 0
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: LD_INT 2
66156: NEG
66157: PUSH
66158: LD_INT 1
66160: NEG
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: PUSH
66166: LD_INT 2
66168: NEG
66169: PUSH
66170: LD_INT 2
66172: NEG
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66199: LD_ADDR_VAR 0 57
66203: PUSH
66204: LD_INT 0
66206: PUSH
66207: LD_INT 0
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: PUSH
66214: LD_INT 0
66216: PUSH
66217: LD_INT 1
66219: NEG
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 1
66227: PUSH
66228: LD_INT 0
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 1
66237: PUSH
66238: LD_INT 1
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: LD_INT 0
66247: PUSH
66248: LD_INT 1
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PUSH
66255: LD_INT 1
66257: NEG
66258: PUSH
66259: LD_INT 0
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: LD_INT 1
66268: NEG
66269: PUSH
66270: LD_INT 1
66272: NEG
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 1
66280: NEG
66281: PUSH
66282: LD_INT 2
66284: NEG
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: LD_INT 0
66292: PUSH
66293: LD_INT 2
66295: NEG
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 1
66303: PUSH
66304: LD_INT 1
66306: NEG
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 2
66314: PUSH
66315: LD_INT 0
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 2
66324: PUSH
66325: LD_INT 1
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: LD_INT 2
66334: PUSH
66335: LD_INT 2
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 1
66344: PUSH
66345: LD_INT 2
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 0
66354: PUSH
66355: LD_INT 2
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 1
66364: NEG
66365: PUSH
66366: LD_INT 1
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: LD_INT 2
66375: NEG
66376: PUSH
66377: LD_INT 0
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 2
66386: NEG
66387: PUSH
66388: LD_INT 1
66390: NEG
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 2
66398: NEG
66399: PUSH
66400: LD_INT 2
66402: NEG
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: LIST
66412: LIST
66413: LIST
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: LIST
66421: LIST
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: LIST
66428: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66429: LD_ADDR_VAR 0 58
66433: PUSH
66434: LD_INT 0
66436: PUSH
66437: LD_INT 0
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: LD_INT 0
66446: PUSH
66447: LD_INT 1
66449: NEG
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 1
66457: PUSH
66458: LD_INT 0
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 1
66467: PUSH
66468: LD_INT 1
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 0
66477: PUSH
66478: LD_INT 1
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 1
66487: NEG
66488: PUSH
66489: LD_INT 0
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: LD_INT 1
66498: NEG
66499: PUSH
66500: LD_INT 1
66502: NEG
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 1
66510: NEG
66511: PUSH
66512: LD_INT 2
66514: NEG
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 0
66522: PUSH
66523: LD_INT 2
66525: NEG
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PUSH
66531: LD_INT 1
66533: PUSH
66534: LD_INT 1
66536: NEG
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 2
66544: PUSH
66545: LD_INT 0
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 2
66554: PUSH
66555: LD_INT 1
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 2
66564: PUSH
66565: LD_INT 2
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PUSH
66572: LD_INT 1
66574: PUSH
66575: LD_INT 2
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 0
66584: PUSH
66585: LD_INT 2
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 1
66594: NEG
66595: PUSH
66596: LD_INT 1
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: LD_INT 2
66605: NEG
66606: PUSH
66607: LD_INT 0
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 2
66616: NEG
66617: PUSH
66618: LD_INT 1
66620: NEG
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: LD_INT 2
66628: NEG
66629: PUSH
66630: LD_INT 2
66632: NEG
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66659: LD_ADDR_VAR 0 59
66663: PUSH
66664: LD_INT 0
66666: PUSH
66667: LD_INT 0
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 0
66676: PUSH
66677: LD_INT 1
66679: NEG
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: PUSH
66685: LD_INT 1
66687: PUSH
66688: LD_INT 0
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 1
66697: PUSH
66698: LD_INT 1
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: PUSH
66705: LD_INT 0
66707: PUSH
66708: LD_INT 1
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: PUSH
66715: LD_INT 1
66717: NEG
66718: PUSH
66719: LD_INT 0
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: PUSH
66726: LD_INT 1
66728: NEG
66729: PUSH
66730: LD_INT 1
66732: NEG
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66747: LD_ADDR_VAR 0 60
66751: PUSH
66752: LD_INT 0
66754: PUSH
66755: LD_INT 0
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: LD_INT 0
66764: PUSH
66765: LD_INT 1
66767: NEG
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: LD_INT 1
66775: PUSH
66776: LD_INT 0
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: PUSH
66783: LD_INT 1
66785: PUSH
66786: LD_INT 1
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 0
66795: PUSH
66796: LD_INT 1
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: LD_INT 1
66805: NEG
66806: PUSH
66807: LD_INT 0
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: PUSH
66814: LD_INT 1
66816: NEG
66817: PUSH
66818: LD_INT 1
66820: NEG
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66835: LD_ADDR_VAR 0 61
66839: PUSH
66840: LD_INT 0
66842: PUSH
66843: LD_INT 0
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: LD_INT 0
66852: PUSH
66853: LD_INT 1
66855: NEG
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 1
66863: PUSH
66864: LD_INT 0
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: LD_INT 1
66873: PUSH
66874: LD_INT 1
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: PUSH
66881: LD_INT 0
66883: PUSH
66884: LD_INT 1
66886: PUSH
66887: EMPTY
66888: LIST
66889: LIST
66890: PUSH
66891: LD_INT 1
66893: NEG
66894: PUSH
66895: LD_INT 0
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: PUSH
66902: LD_INT 1
66904: NEG
66905: PUSH
66906: LD_INT 1
66908: NEG
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: LIST
66918: LIST
66919: LIST
66920: LIST
66921: LIST
66922: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66923: LD_ADDR_VAR 0 62
66927: PUSH
66928: LD_INT 0
66930: PUSH
66931: LD_INT 0
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 0
66940: PUSH
66941: LD_INT 1
66943: NEG
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 1
66951: PUSH
66952: LD_INT 0
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 1
66961: PUSH
66962: LD_INT 1
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 0
66971: PUSH
66972: LD_INT 1
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 1
66981: NEG
66982: PUSH
66983: LD_INT 0
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: LD_INT 1
66992: NEG
66993: PUSH
66994: LD_INT 1
66996: NEG
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: LIST
67006: LIST
67007: LIST
67008: LIST
67009: LIST
67010: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67011: LD_ADDR_VAR 0 63
67015: PUSH
67016: LD_INT 0
67018: PUSH
67019: LD_INT 0
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PUSH
67026: LD_INT 0
67028: PUSH
67029: LD_INT 1
67031: NEG
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: LD_INT 1
67039: PUSH
67040: LD_INT 0
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: LD_INT 1
67049: PUSH
67050: LD_INT 1
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PUSH
67057: LD_INT 0
67059: PUSH
67060: LD_INT 1
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PUSH
67067: LD_INT 1
67069: NEG
67070: PUSH
67071: LD_INT 0
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 1
67080: NEG
67081: PUSH
67082: LD_INT 1
67084: NEG
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67099: LD_ADDR_VAR 0 64
67103: PUSH
67104: LD_INT 0
67106: PUSH
67107: LD_INT 0
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: PUSH
67114: LD_INT 0
67116: PUSH
67117: LD_INT 1
67119: NEG
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: LD_INT 1
67127: PUSH
67128: LD_INT 0
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 1
67137: PUSH
67138: LD_INT 1
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 0
67147: PUSH
67148: LD_INT 1
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PUSH
67155: LD_INT 1
67157: NEG
67158: PUSH
67159: LD_INT 0
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 1
67168: NEG
67169: PUSH
67170: LD_INT 1
67172: NEG
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: ST_TO_ADDR
// end ; 1 :
67187: GO 73084
67189: LD_INT 1
67191: DOUBLE
67192: EQUAL
67193: IFTRUE 67197
67195: GO 69820
67197: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67198: LD_ADDR_VAR 0 11
67202: PUSH
67203: LD_INT 1
67205: NEG
67206: PUSH
67207: LD_INT 3
67209: NEG
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 0
67217: PUSH
67218: LD_INT 3
67220: NEG
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 1
67228: PUSH
67229: LD_INT 2
67231: NEG
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: LIST
67241: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67242: LD_ADDR_VAR 0 12
67246: PUSH
67247: LD_INT 2
67249: PUSH
67250: LD_INT 1
67252: NEG
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 3
67260: PUSH
67261: LD_INT 0
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 3
67270: PUSH
67271: LD_INT 1
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: LIST
67282: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67283: LD_ADDR_VAR 0 13
67287: PUSH
67288: LD_INT 3
67290: PUSH
67291: LD_INT 2
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 3
67300: PUSH
67301: LD_INT 3
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 2
67310: PUSH
67311: LD_INT 3
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: LIST
67322: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67323: LD_ADDR_VAR 0 14
67327: PUSH
67328: LD_INT 1
67330: PUSH
67331: LD_INT 3
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 0
67340: PUSH
67341: LD_INT 3
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PUSH
67348: LD_INT 1
67350: NEG
67351: PUSH
67352: LD_INT 2
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: LIST
67363: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67364: LD_ADDR_VAR 0 15
67368: PUSH
67369: LD_INT 2
67371: NEG
67372: PUSH
67373: LD_INT 1
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: LD_INT 3
67382: NEG
67383: PUSH
67384: LD_INT 0
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: PUSH
67391: LD_INT 3
67393: NEG
67394: PUSH
67395: LD_INT 1
67397: NEG
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: LIST
67407: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67408: LD_ADDR_VAR 0 16
67412: PUSH
67413: LD_INT 2
67415: NEG
67416: PUSH
67417: LD_INT 3
67419: NEG
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PUSH
67425: LD_INT 3
67427: NEG
67428: PUSH
67429: LD_INT 2
67431: NEG
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: LD_INT 3
67439: NEG
67440: PUSH
67441: LD_INT 3
67443: NEG
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: LIST
67453: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67454: LD_ADDR_VAR 0 17
67458: PUSH
67459: LD_INT 1
67461: NEG
67462: PUSH
67463: LD_INT 3
67465: NEG
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PUSH
67471: LD_INT 0
67473: PUSH
67474: LD_INT 3
67476: NEG
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: LD_INT 1
67484: PUSH
67485: LD_INT 2
67487: NEG
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: LIST
67497: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67498: LD_ADDR_VAR 0 18
67502: PUSH
67503: LD_INT 2
67505: PUSH
67506: LD_INT 1
67508: NEG
67509: PUSH
67510: EMPTY
67511: LIST
67512: LIST
67513: PUSH
67514: LD_INT 3
67516: PUSH
67517: LD_INT 0
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PUSH
67524: LD_INT 3
67526: PUSH
67527: LD_INT 1
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: LIST
67538: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67539: LD_ADDR_VAR 0 19
67543: PUSH
67544: LD_INT 3
67546: PUSH
67547: LD_INT 2
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: LD_INT 3
67556: PUSH
67557: LD_INT 3
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 2
67566: PUSH
67567: LD_INT 3
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: LIST
67578: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67579: LD_ADDR_VAR 0 20
67583: PUSH
67584: LD_INT 1
67586: PUSH
67587: LD_INT 3
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: PUSH
67594: LD_INT 0
67596: PUSH
67597: LD_INT 3
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 1
67606: NEG
67607: PUSH
67608: LD_INT 2
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: LIST
67619: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67620: LD_ADDR_VAR 0 21
67624: PUSH
67625: LD_INT 2
67627: NEG
67628: PUSH
67629: LD_INT 1
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: PUSH
67636: LD_INT 3
67638: NEG
67639: PUSH
67640: LD_INT 0
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: LD_INT 3
67649: NEG
67650: PUSH
67651: LD_INT 1
67653: NEG
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: LIST
67663: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67664: LD_ADDR_VAR 0 22
67668: PUSH
67669: LD_INT 2
67671: NEG
67672: PUSH
67673: LD_INT 3
67675: NEG
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: LD_INT 3
67683: NEG
67684: PUSH
67685: LD_INT 2
67687: NEG
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: LD_INT 3
67695: NEG
67696: PUSH
67697: LD_INT 3
67699: NEG
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: LIST
67709: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67710: LD_ADDR_VAR 0 23
67714: PUSH
67715: LD_INT 0
67717: PUSH
67718: LD_INT 3
67720: NEG
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: LD_INT 1
67728: NEG
67729: PUSH
67730: LD_INT 4
67732: NEG
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: PUSH
67738: LD_INT 1
67740: PUSH
67741: LD_INT 3
67743: NEG
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: LIST
67753: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67754: LD_ADDR_VAR 0 24
67758: PUSH
67759: LD_INT 3
67761: PUSH
67762: LD_INT 0
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: PUSH
67769: LD_INT 3
67771: PUSH
67772: LD_INT 1
67774: NEG
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PUSH
67780: LD_INT 4
67782: PUSH
67783: LD_INT 1
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: LIST
67794: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67795: LD_ADDR_VAR 0 25
67799: PUSH
67800: LD_INT 3
67802: PUSH
67803: LD_INT 3
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: PUSH
67810: LD_INT 4
67812: PUSH
67813: LD_INT 3
67815: PUSH
67816: EMPTY
67817: LIST
67818: LIST
67819: PUSH
67820: LD_INT 3
67822: PUSH
67823: LD_INT 4
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: LIST
67834: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67835: LD_ADDR_VAR 0 26
67839: PUSH
67840: LD_INT 0
67842: PUSH
67843: LD_INT 3
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: LD_INT 1
67852: PUSH
67853: LD_INT 4
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: LD_INT 1
67862: NEG
67863: PUSH
67864: LD_INT 3
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: PUSH
67871: EMPTY
67872: LIST
67873: LIST
67874: LIST
67875: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67876: LD_ADDR_VAR 0 27
67880: PUSH
67881: LD_INT 3
67883: NEG
67884: PUSH
67885: LD_INT 0
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: PUSH
67892: LD_INT 3
67894: NEG
67895: PUSH
67896: LD_INT 1
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: LD_INT 4
67905: NEG
67906: PUSH
67907: LD_INT 1
67909: NEG
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: PUSH
67915: EMPTY
67916: LIST
67917: LIST
67918: LIST
67919: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67920: LD_ADDR_VAR 0 28
67924: PUSH
67925: LD_INT 3
67927: NEG
67928: PUSH
67929: LD_INT 3
67931: NEG
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PUSH
67937: LD_INT 3
67939: NEG
67940: PUSH
67941: LD_INT 4
67943: NEG
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PUSH
67949: LD_INT 4
67951: NEG
67952: PUSH
67953: LD_INT 3
67955: NEG
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: LIST
67965: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67966: LD_ADDR_VAR 0 29
67970: PUSH
67971: LD_INT 1
67973: NEG
67974: PUSH
67975: LD_INT 3
67977: NEG
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: PUSH
67983: LD_INT 0
67985: PUSH
67986: LD_INT 3
67988: NEG
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: PUSH
67994: LD_INT 1
67996: PUSH
67997: LD_INT 2
67999: NEG
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: PUSH
68005: LD_INT 1
68007: NEG
68008: PUSH
68009: LD_INT 4
68011: NEG
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: LD_INT 0
68019: PUSH
68020: LD_INT 4
68022: NEG
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 1
68030: PUSH
68031: LD_INT 3
68033: NEG
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: LD_INT 1
68041: NEG
68042: PUSH
68043: LD_INT 5
68045: NEG
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: LD_INT 0
68053: PUSH
68054: LD_INT 5
68056: NEG
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: PUSH
68062: LD_INT 1
68064: PUSH
68065: LD_INT 4
68067: NEG
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: LD_INT 1
68075: NEG
68076: PUSH
68077: LD_INT 6
68079: NEG
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: LD_INT 0
68087: PUSH
68088: LD_INT 6
68090: NEG
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: LD_INT 1
68098: PUSH
68099: LD_INT 5
68101: NEG
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: LIST
68117: LIST
68118: LIST
68119: LIST
68120: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68121: LD_ADDR_VAR 0 30
68125: PUSH
68126: LD_INT 2
68128: PUSH
68129: LD_INT 1
68131: NEG
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: LD_INT 3
68139: PUSH
68140: LD_INT 0
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: PUSH
68147: LD_INT 3
68149: PUSH
68150: LD_INT 1
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: PUSH
68157: LD_INT 3
68159: PUSH
68160: LD_INT 1
68162: NEG
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PUSH
68168: LD_INT 4
68170: PUSH
68171: LD_INT 0
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: LD_INT 4
68180: PUSH
68181: LD_INT 1
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: LD_INT 4
68190: PUSH
68191: LD_INT 1
68193: NEG
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: LD_INT 5
68201: PUSH
68202: LD_INT 0
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 5
68211: PUSH
68212: LD_INT 1
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 5
68221: PUSH
68222: LD_INT 1
68224: NEG
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 6
68232: PUSH
68233: LD_INT 0
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 6
68242: PUSH
68243: LD_INT 1
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: LIST
68258: LIST
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68264: LD_ADDR_VAR 0 31
68268: PUSH
68269: LD_INT 3
68271: PUSH
68272: LD_INT 2
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: LD_INT 3
68281: PUSH
68282: LD_INT 3
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PUSH
68289: LD_INT 2
68291: PUSH
68292: LD_INT 3
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: PUSH
68299: LD_INT 4
68301: PUSH
68302: LD_INT 3
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: LD_INT 4
68311: PUSH
68312: LD_INT 4
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PUSH
68319: LD_INT 3
68321: PUSH
68322: LD_INT 4
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 5
68331: PUSH
68332: LD_INT 4
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: PUSH
68339: LD_INT 5
68341: PUSH
68342: LD_INT 5
68344: PUSH
68345: EMPTY
68346: LIST
68347: LIST
68348: PUSH
68349: LD_INT 4
68351: PUSH
68352: LD_INT 5
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PUSH
68359: LD_INT 6
68361: PUSH
68362: LD_INT 5
68364: PUSH
68365: EMPTY
68366: LIST
68367: LIST
68368: PUSH
68369: LD_INT 6
68371: PUSH
68372: LD_INT 6
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: PUSH
68379: LD_INT 5
68381: PUSH
68382: LD_INT 6
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: LIST
68399: LIST
68400: LIST
68401: LIST
68402: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68403: LD_ADDR_VAR 0 32
68407: PUSH
68408: LD_INT 1
68410: PUSH
68411: LD_INT 3
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: PUSH
68418: LD_INT 0
68420: PUSH
68421: LD_INT 3
68423: PUSH
68424: EMPTY
68425: LIST
68426: LIST
68427: PUSH
68428: LD_INT 1
68430: NEG
68431: PUSH
68432: LD_INT 2
68434: PUSH
68435: EMPTY
68436: LIST
68437: LIST
68438: PUSH
68439: LD_INT 1
68441: PUSH
68442: LD_INT 4
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PUSH
68449: LD_INT 0
68451: PUSH
68452: LD_INT 4
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: PUSH
68459: LD_INT 1
68461: NEG
68462: PUSH
68463: LD_INT 3
68465: PUSH
68466: EMPTY
68467: LIST
68468: LIST
68469: PUSH
68470: LD_INT 1
68472: PUSH
68473: LD_INT 5
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PUSH
68480: LD_INT 0
68482: PUSH
68483: LD_INT 5
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PUSH
68490: LD_INT 1
68492: NEG
68493: PUSH
68494: LD_INT 4
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: PUSH
68501: LD_INT 1
68503: PUSH
68504: LD_INT 6
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: LD_INT 0
68513: PUSH
68514: LD_INT 6
68516: PUSH
68517: EMPTY
68518: LIST
68519: LIST
68520: PUSH
68521: LD_INT 1
68523: NEG
68524: PUSH
68525: LD_INT 5
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: PUSH
68532: EMPTY
68533: LIST
68534: LIST
68535: LIST
68536: LIST
68537: LIST
68538: LIST
68539: LIST
68540: LIST
68541: LIST
68542: LIST
68543: LIST
68544: LIST
68545: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68546: LD_ADDR_VAR 0 33
68550: PUSH
68551: LD_INT 2
68553: NEG
68554: PUSH
68555: LD_INT 1
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: PUSH
68562: LD_INT 3
68564: NEG
68565: PUSH
68566: LD_INT 0
68568: PUSH
68569: EMPTY
68570: LIST
68571: LIST
68572: PUSH
68573: LD_INT 3
68575: NEG
68576: PUSH
68577: LD_INT 1
68579: NEG
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: PUSH
68585: LD_INT 3
68587: NEG
68588: PUSH
68589: LD_INT 1
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: PUSH
68596: LD_INT 4
68598: NEG
68599: PUSH
68600: LD_INT 0
68602: PUSH
68603: EMPTY
68604: LIST
68605: LIST
68606: PUSH
68607: LD_INT 4
68609: NEG
68610: PUSH
68611: LD_INT 1
68613: NEG
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: PUSH
68619: LD_INT 4
68621: NEG
68622: PUSH
68623: LD_INT 1
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: PUSH
68630: LD_INT 5
68632: NEG
68633: PUSH
68634: LD_INT 0
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 5
68643: NEG
68644: PUSH
68645: LD_INT 1
68647: NEG
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: PUSH
68653: LD_INT 5
68655: NEG
68656: PUSH
68657: LD_INT 1
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: LD_INT 6
68666: NEG
68667: PUSH
68668: LD_INT 0
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: LD_INT 6
68677: NEG
68678: PUSH
68679: LD_INT 1
68681: NEG
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: LIST
68700: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68701: LD_ADDR_VAR 0 34
68705: PUSH
68706: LD_INT 2
68708: NEG
68709: PUSH
68710: LD_INT 3
68712: NEG
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 3
68720: NEG
68721: PUSH
68722: LD_INT 2
68724: NEG
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: LD_INT 3
68732: NEG
68733: PUSH
68734: LD_INT 3
68736: NEG
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: LD_INT 3
68744: NEG
68745: PUSH
68746: LD_INT 4
68748: NEG
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: LD_INT 4
68756: NEG
68757: PUSH
68758: LD_INT 3
68760: NEG
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 4
68768: NEG
68769: PUSH
68770: LD_INT 4
68772: NEG
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: PUSH
68778: LD_INT 4
68780: NEG
68781: PUSH
68782: LD_INT 5
68784: NEG
68785: PUSH
68786: EMPTY
68787: LIST
68788: LIST
68789: PUSH
68790: LD_INT 5
68792: NEG
68793: PUSH
68794: LD_INT 4
68796: NEG
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: PUSH
68802: LD_INT 5
68804: NEG
68805: PUSH
68806: LD_INT 5
68808: NEG
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: PUSH
68814: LD_INT 5
68816: NEG
68817: PUSH
68818: LD_INT 6
68820: NEG
68821: PUSH
68822: EMPTY
68823: LIST
68824: LIST
68825: PUSH
68826: LD_INT 6
68828: NEG
68829: PUSH
68830: LD_INT 5
68832: NEG
68833: PUSH
68834: EMPTY
68835: LIST
68836: LIST
68837: PUSH
68838: LD_INT 6
68840: NEG
68841: PUSH
68842: LD_INT 6
68844: NEG
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: LIST
68854: LIST
68855: LIST
68856: LIST
68857: LIST
68858: LIST
68859: LIST
68860: LIST
68861: LIST
68862: LIST
68863: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68864: LD_ADDR_VAR 0 41
68868: PUSH
68869: LD_INT 0
68871: PUSH
68872: LD_INT 2
68874: NEG
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PUSH
68880: LD_INT 1
68882: NEG
68883: PUSH
68884: LD_INT 3
68886: NEG
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PUSH
68892: LD_INT 1
68894: PUSH
68895: LD_INT 2
68897: NEG
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: LIST
68907: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68908: LD_ADDR_VAR 0 42
68912: PUSH
68913: LD_INT 2
68915: PUSH
68916: LD_INT 0
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: PUSH
68923: LD_INT 2
68925: PUSH
68926: LD_INT 1
68928: NEG
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PUSH
68934: LD_INT 3
68936: PUSH
68937: LD_INT 1
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: PUSH
68944: EMPTY
68945: LIST
68946: LIST
68947: LIST
68948: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68949: LD_ADDR_VAR 0 43
68953: PUSH
68954: LD_INT 2
68956: PUSH
68957: LD_INT 2
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 3
68966: PUSH
68967: LD_INT 2
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: PUSH
68974: LD_INT 2
68976: PUSH
68977: LD_INT 3
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: LIST
68988: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68989: LD_ADDR_VAR 0 44
68993: PUSH
68994: LD_INT 0
68996: PUSH
68997: LD_INT 2
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: PUSH
69004: LD_INT 1
69006: PUSH
69007: LD_INT 3
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: LD_INT 1
69016: NEG
69017: PUSH
69018: LD_INT 2
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: LIST
69029: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69030: LD_ADDR_VAR 0 45
69034: PUSH
69035: LD_INT 2
69037: NEG
69038: PUSH
69039: LD_INT 0
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: PUSH
69046: LD_INT 2
69048: NEG
69049: PUSH
69050: LD_INT 1
69052: PUSH
69053: EMPTY
69054: LIST
69055: LIST
69056: PUSH
69057: LD_INT 3
69059: NEG
69060: PUSH
69061: LD_INT 1
69063: NEG
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: EMPTY
69070: LIST
69071: LIST
69072: LIST
69073: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69074: LD_ADDR_VAR 0 46
69078: PUSH
69079: LD_INT 2
69081: NEG
69082: PUSH
69083: LD_INT 2
69085: NEG
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: PUSH
69091: LD_INT 2
69093: NEG
69094: PUSH
69095: LD_INT 3
69097: NEG
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: PUSH
69103: LD_INT 3
69105: NEG
69106: PUSH
69107: LD_INT 2
69109: NEG
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: EMPTY
69116: LIST
69117: LIST
69118: LIST
69119: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69120: LD_ADDR_VAR 0 47
69124: PUSH
69125: LD_INT 2
69127: NEG
69128: PUSH
69129: LD_INT 3
69131: NEG
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: LD_INT 1
69139: NEG
69140: PUSH
69141: LD_INT 3
69143: NEG
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: PUSH
69149: EMPTY
69150: LIST
69151: LIST
69152: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69153: LD_ADDR_VAR 0 48
69157: PUSH
69158: LD_INT 1
69160: PUSH
69161: LD_INT 2
69163: NEG
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PUSH
69169: LD_INT 2
69171: PUSH
69172: LD_INT 1
69174: NEG
69175: PUSH
69176: EMPTY
69177: LIST
69178: LIST
69179: PUSH
69180: EMPTY
69181: LIST
69182: LIST
69183: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69184: LD_ADDR_VAR 0 49
69188: PUSH
69189: LD_INT 3
69191: PUSH
69192: LD_INT 1
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: LD_INT 3
69201: PUSH
69202: LD_INT 2
69204: PUSH
69205: EMPTY
69206: LIST
69207: LIST
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69213: LD_ADDR_VAR 0 50
69217: PUSH
69218: LD_INT 2
69220: PUSH
69221: LD_INT 3
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: LD_INT 1
69230: PUSH
69231: LD_INT 3
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69242: LD_ADDR_VAR 0 51
69246: PUSH
69247: LD_INT 1
69249: NEG
69250: PUSH
69251: LD_INT 2
69253: PUSH
69254: EMPTY
69255: LIST
69256: LIST
69257: PUSH
69258: LD_INT 2
69260: NEG
69261: PUSH
69262: LD_INT 1
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69273: LD_ADDR_VAR 0 52
69277: PUSH
69278: LD_INT 3
69280: NEG
69281: PUSH
69282: LD_INT 1
69284: NEG
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: LD_INT 3
69292: NEG
69293: PUSH
69294: LD_INT 2
69296: NEG
69297: PUSH
69298: EMPTY
69299: LIST
69300: LIST
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69306: LD_ADDR_VAR 0 53
69310: PUSH
69311: LD_INT 1
69313: NEG
69314: PUSH
69315: LD_INT 3
69317: NEG
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: PUSH
69323: LD_INT 0
69325: PUSH
69326: LD_INT 3
69328: NEG
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PUSH
69334: LD_INT 1
69336: PUSH
69337: LD_INT 2
69339: NEG
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: LIST
69349: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69350: LD_ADDR_VAR 0 54
69354: PUSH
69355: LD_INT 2
69357: PUSH
69358: LD_INT 1
69360: NEG
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: PUSH
69366: LD_INT 3
69368: PUSH
69369: LD_INT 0
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: PUSH
69376: LD_INT 3
69378: PUSH
69379: LD_INT 1
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: LIST
69390: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69391: LD_ADDR_VAR 0 55
69395: PUSH
69396: LD_INT 3
69398: PUSH
69399: LD_INT 2
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 3
69408: PUSH
69409: LD_INT 3
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: PUSH
69416: LD_INT 2
69418: PUSH
69419: LD_INT 3
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: LIST
69430: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69431: LD_ADDR_VAR 0 56
69435: PUSH
69436: LD_INT 1
69438: PUSH
69439: LD_INT 3
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 0
69448: PUSH
69449: LD_INT 3
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PUSH
69456: LD_INT 1
69458: NEG
69459: PUSH
69460: LD_INT 2
69462: PUSH
69463: EMPTY
69464: LIST
69465: LIST
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: LIST
69471: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69472: LD_ADDR_VAR 0 57
69476: PUSH
69477: LD_INT 2
69479: NEG
69480: PUSH
69481: LD_INT 1
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: PUSH
69488: LD_INT 3
69490: NEG
69491: PUSH
69492: LD_INT 0
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: PUSH
69499: LD_INT 3
69501: NEG
69502: PUSH
69503: LD_INT 1
69505: NEG
69506: PUSH
69507: EMPTY
69508: LIST
69509: LIST
69510: PUSH
69511: EMPTY
69512: LIST
69513: LIST
69514: LIST
69515: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69516: LD_ADDR_VAR 0 58
69520: PUSH
69521: LD_INT 2
69523: NEG
69524: PUSH
69525: LD_INT 3
69527: NEG
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: PUSH
69533: LD_INT 3
69535: NEG
69536: PUSH
69537: LD_INT 2
69539: NEG
69540: PUSH
69541: EMPTY
69542: LIST
69543: LIST
69544: PUSH
69545: LD_INT 3
69547: NEG
69548: PUSH
69549: LD_INT 3
69551: NEG
69552: PUSH
69553: EMPTY
69554: LIST
69555: LIST
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: LIST
69561: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69562: LD_ADDR_VAR 0 59
69566: PUSH
69567: LD_INT 1
69569: NEG
69570: PUSH
69571: LD_INT 2
69573: NEG
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: PUSH
69579: LD_INT 0
69581: PUSH
69582: LD_INT 2
69584: NEG
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: LD_INT 1
69592: PUSH
69593: LD_INT 1
69595: NEG
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: LIST
69605: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69606: LD_ADDR_VAR 0 60
69610: PUSH
69611: LD_INT 1
69613: PUSH
69614: LD_INT 1
69616: NEG
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: PUSH
69622: LD_INT 2
69624: PUSH
69625: LD_INT 0
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: LD_INT 2
69634: PUSH
69635: LD_INT 1
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: EMPTY
69643: LIST
69644: LIST
69645: LIST
69646: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69647: LD_ADDR_VAR 0 61
69651: PUSH
69652: LD_INT 2
69654: PUSH
69655: LD_INT 1
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 2
69664: PUSH
69665: LD_INT 2
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: PUSH
69672: LD_INT 1
69674: PUSH
69675: LD_INT 2
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: LIST
69686: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69687: LD_ADDR_VAR 0 62
69691: PUSH
69692: LD_INT 1
69694: PUSH
69695: LD_INT 2
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: PUSH
69702: LD_INT 0
69704: PUSH
69705: LD_INT 2
69707: PUSH
69708: EMPTY
69709: LIST
69710: LIST
69711: PUSH
69712: LD_INT 1
69714: NEG
69715: PUSH
69716: LD_INT 1
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: LIST
69727: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69728: LD_ADDR_VAR 0 63
69732: PUSH
69733: LD_INT 1
69735: NEG
69736: PUSH
69737: LD_INT 1
69739: PUSH
69740: EMPTY
69741: LIST
69742: LIST
69743: PUSH
69744: LD_INT 2
69746: NEG
69747: PUSH
69748: LD_INT 0
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: PUSH
69755: LD_INT 2
69757: NEG
69758: PUSH
69759: LD_INT 1
69761: NEG
69762: PUSH
69763: EMPTY
69764: LIST
69765: LIST
69766: PUSH
69767: EMPTY
69768: LIST
69769: LIST
69770: LIST
69771: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69772: LD_ADDR_VAR 0 64
69776: PUSH
69777: LD_INT 1
69779: NEG
69780: PUSH
69781: LD_INT 2
69783: NEG
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: LD_INT 2
69791: NEG
69792: PUSH
69793: LD_INT 1
69795: NEG
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 2
69803: NEG
69804: PUSH
69805: LD_INT 2
69807: NEG
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: LIST
69817: ST_TO_ADDR
// end ; 2 :
69818: GO 73084
69820: LD_INT 2
69822: DOUBLE
69823: EQUAL
69824: IFTRUE 69828
69826: GO 73083
69828: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69829: LD_ADDR_VAR 0 29
69833: PUSH
69834: LD_INT 4
69836: PUSH
69837: LD_INT 0
69839: PUSH
69840: EMPTY
69841: LIST
69842: LIST
69843: PUSH
69844: LD_INT 4
69846: PUSH
69847: LD_INT 1
69849: NEG
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: PUSH
69855: LD_INT 5
69857: PUSH
69858: LD_INT 0
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: LD_INT 5
69867: PUSH
69868: LD_INT 1
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: LD_INT 4
69877: PUSH
69878: LD_INT 1
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 3
69887: PUSH
69888: LD_INT 0
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: PUSH
69895: LD_INT 3
69897: PUSH
69898: LD_INT 1
69900: NEG
69901: PUSH
69902: EMPTY
69903: LIST
69904: LIST
69905: PUSH
69906: LD_INT 3
69908: PUSH
69909: LD_INT 2
69911: NEG
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: LD_INT 5
69919: PUSH
69920: LD_INT 2
69922: PUSH
69923: EMPTY
69924: LIST
69925: LIST
69926: PUSH
69927: LD_INT 3
69929: PUSH
69930: LD_INT 3
69932: PUSH
69933: EMPTY
69934: LIST
69935: LIST
69936: PUSH
69937: LD_INT 3
69939: PUSH
69940: LD_INT 2
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: PUSH
69947: LD_INT 4
69949: PUSH
69950: LD_INT 3
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: PUSH
69957: LD_INT 4
69959: PUSH
69960: LD_INT 4
69962: PUSH
69963: EMPTY
69964: LIST
69965: LIST
69966: PUSH
69967: LD_INT 3
69969: PUSH
69970: LD_INT 4
69972: PUSH
69973: EMPTY
69974: LIST
69975: LIST
69976: PUSH
69977: LD_INT 2
69979: PUSH
69980: LD_INT 3
69982: PUSH
69983: EMPTY
69984: LIST
69985: LIST
69986: PUSH
69987: LD_INT 2
69989: PUSH
69990: LD_INT 2
69992: PUSH
69993: EMPTY
69994: LIST
69995: LIST
69996: PUSH
69997: LD_INT 4
69999: PUSH
70000: LD_INT 2
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: PUSH
70007: LD_INT 2
70009: PUSH
70010: LD_INT 4
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: PUSH
70017: LD_INT 0
70019: PUSH
70020: LD_INT 4
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PUSH
70027: LD_INT 0
70029: PUSH
70030: LD_INT 3
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: PUSH
70037: LD_INT 1
70039: PUSH
70040: LD_INT 4
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: PUSH
70047: LD_INT 1
70049: PUSH
70050: LD_INT 5
70052: PUSH
70053: EMPTY
70054: LIST
70055: LIST
70056: PUSH
70057: LD_INT 0
70059: PUSH
70060: LD_INT 5
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: PUSH
70067: LD_INT 1
70069: NEG
70070: PUSH
70071: LD_INT 4
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PUSH
70078: LD_INT 1
70080: NEG
70081: PUSH
70082: LD_INT 3
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: PUSH
70089: LD_INT 2
70091: PUSH
70092: LD_INT 5
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: PUSH
70099: LD_INT 2
70101: NEG
70102: PUSH
70103: LD_INT 3
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 3
70112: NEG
70113: PUSH
70114: LD_INT 0
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: LD_INT 3
70123: NEG
70124: PUSH
70125: LD_INT 1
70127: NEG
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: PUSH
70133: LD_INT 2
70135: NEG
70136: PUSH
70137: LD_INT 0
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: PUSH
70144: LD_INT 2
70146: NEG
70147: PUSH
70148: LD_INT 1
70150: PUSH
70151: EMPTY
70152: LIST
70153: LIST
70154: PUSH
70155: LD_INT 3
70157: NEG
70158: PUSH
70159: LD_INT 1
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: LD_INT 4
70168: NEG
70169: PUSH
70170: LD_INT 0
70172: PUSH
70173: EMPTY
70174: LIST
70175: LIST
70176: PUSH
70177: LD_INT 4
70179: NEG
70180: PUSH
70181: LD_INT 1
70183: NEG
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PUSH
70189: LD_INT 4
70191: NEG
70192: PUSH
70193: LD_INT 2
70195: NEG
70196: PUSH
70197: EMPTY
70198: LIST
70199: LIST
70200: PUSH
70201: LD_INT 2
70203: NEG
70204: PUSH
70205: LD_INT 2
70207: PUSH
70208: EMPTY
70209: LIST
70210: LIST
70211: PUSH
70212: LD_INT 4
70214: NEG
70215: PUSH
70216: LD_INT 4
70218: NEG
70219: PUSH
70220: EMPTY
70221: LIST
70222: LIST
70223: PUSH
70224: LD_INT 4
70226: NEG
70227: PUSH
70228: LD_INT 5
70230: NEG
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: PUSH
70236: LD_INT 3
70238: NEG
70239: PUSH
70240: LD_INT 4
70242: NEG
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: PUSH
70248: LD_INT 3
70250: NEG
70251: PUSH
70252: LD_INT 3
70254: NEG
70255: PUSH
70256: EMPTY
70257: LIST
70258: LIST
70259: PUSH
70260: LD_INT 4
70262: NEG
70263: PUSH
70264: LD_INT 3
70266: NEG
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: LD_INT 5
70274: NEG
70275: PUSH
70276: LD_INT 4
70278: NEG
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: PUSH
70284: LD_INT 5
70286: NEG
70287: PUSH
70288: LD_INT 5
70290: NEG
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: PUSH
70296: LD_INT 3
70298: NEG
70299: PUSH
70300: LD_INT 5
70302: NEG
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PUSH
70308: LD_INT 5
70310: NEG
70311: PUSH
70312: LD_INT 3
70314: NEG
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PUSH
70320: EMPTY
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: LIST
70330: LIST
70331: LIST
70332: LIST
70333: LIST
70334: LIST
70335: LIST
70336: LIST
70337: LIST
70338: LIST
70339: LIST
70340: LIST
70341: LIST
70342: LIST
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: LIST
70352: LIST
70353: LIST
70354: LIST
70355: LIST
70356: LIST
70357: LIST
70358: LIST
70359: LIST
70360: LIST
70361: LIST
70362: LIST
70363: LIST
70364: LIST
70365: LIST
70366: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70367: LD_ADDR_VAR 0 30
70371: PUSH
70372: LD_INT 4
70374: PUSH
70375: LD_INT 4
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: PUSH
70382: LD_INT 4
70384: PUSH
70385: LD_INT 3
70387: PUSH
70388: EMPTY
70389: LIST
70390: LIST
70391: PUSH
70392: LD_INT 5
70394: PUSH
70395: LD_INT 4
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: PUSH
70402: LD_INT 5
70404: PUSH
70405: LD_INT 5
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: PUSH
70412: LD_INT 4
70414: PUSH
70415: LD_INT 5
70417: PUSH
70418: EMPTY
70419: LIST
70420: LIST
70421: PUSH
70422: LD_INT 3
70424: PUSH
70425: LD_INT 4
70427: PUSH
70428: EMPTY
70429: LIST
70430: LIST
70431: PUSH
70432: LD_INT 3
70434: PUSH
70435: LD_INT 3
70437: PUSH
70438: EMPTY
70439: LIST
70440: LIST
70441: PUSH
70442: LD_INT 5
70444: PUSH
70445: LD_INT 3
70447: PUSH
70448: EMPTY
70449: LIST
70450: LIST
70451: PUSH
70452: LD_INT 3
70454: PUSH
70455: LD_INT 5
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: PUSH
70462: LD_INT 0
70464: PUSH
70465: LD_INT 3
70467: PUSH
70468: EMPTY
70469: LIST
70470: LIST
70471: PUSH
70472: LD_INT 0
70474: PUSH
70475: LD_INT 2
70477: PUSH
70478: EMPTY
70479: LIST
70480: LIST
70481: PUSH
70482: LD_INT 1
70484: PUSH
70485: LD_INT 3
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: PUSH
70492: LD_INT 1
70494: PUSH
70495: LD_INT 4
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: PUSH
70502: LD_INT 0
70504: PUSH
70505: LD_INT 4
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: PUSH
70512: LD_INT 1
70514: NEG
70515: PUSH
70516: LD_INT 3
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: PUSH
70523: LD_INT 1
70525: NEG
70526: PUSH
70527: LD_INT 2
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: PUSH
70534: LD_INT 2
70536: PUSH
70537: LD_INT 4
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PUSH
70544: LD_INT 2
70546: NEG
70547: PUSH
70548: LD_INT 2
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: PUSH
70555: LD_INT 4
70557: NEG
70558: PUSH
70559: LD_INT 0
70561: PUSH
70562: EMPTY
70563: LIST
70564: LIST
70565: PUSH
70566: LD_INT 4
70568: NEG
70569: PUSH
70570: LD_INT 1
70572: NEG
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: PUSH
70578: LD_INT 3
70580: NEG
70581: PUSH
70582: LD_INT 0
70584: PUSH
70585: EMPTY
70586: LIST
70587: LIST
70588: PUSH
70589: LD_INT 3
70591: NEG
70592: PUSH
70593: LD_INT 1
70595: PUSH
70596: EMPTY
70597: LIST
70598: LIST
70599: PUSH
70600: LD_INT 4
70602: NEG
70603: PUSH
70604: LD_INT 1
70606: PUSH
70607: EMPTY
70608: LIST
70609: LIST
70610: PUSH
70611: LD_INT 5
70613: NEG
70614: PUSH
70615: LD_INT 0
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: PUSH
70622: LD_INT 5
70624: NEG
70625: PUSH
70626: LD_INT 1
70628: NEG
70629: PUSH
70630: EMPTY
70631: LIST
70632: LIST
70633: PUSH
70634: LD_INT 5
70636: NEG
70637: PUSH
70638: LD_INT 2
70640: NEG
70641: PUSH
70642: EMPTY
70643: LIST
70644: LIST
70645: PUSH
70646: LD_INT 3
70648: NEG
70649: PUSH
70650: LD_INT 2
70652: PUSH
70653: EMPTY
70654: LIST
70655: LIST
70656: PUSH
70657: LD_INT 3
70659: NEG
70660: PUSH
70661: LD_INT 3
70663: NEG
70664: PUSH
70665: EMPTY
70666: LIST
70667: LIST
70668: PUSH
70669: LD_INT 3
70671: NEG
70672: PUSH
70673: LD_INT 4
70675: NEG
70676: PUSH
70677: EMPTY
70678: LIST
70679: LIST
70680: PUSH
70681: LD_INT 2
70683: NEG
70684: PUSH
70685: LD_INT 3
70687: NEG
70688: PUSH
70689: EMPTY
70690: LIST
70691: LIST
70692: PUSH
70693: LD_INT 2
70695: NEG
70696: PUSH
70697: LD_INT 2
70699: NEG
70700: PUSH
70701: EMPTY
70702: LIST
70703: LIST
70704: PUSH
70705: LD_INT 3
70707: NEG
70708: PUSH
70709: LD_INT 2
70711: NEG
70712: PUSH
70713: EMPTY
70714: LIST
70715: LIST
70716: PUSH
70717: LD_INT 4
70719: NEG
70720: PUSH
70721: LD_INT 3
70723: NEG
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: PUSH
70729: LD_INT 4
70731: NEG
70732: PUSH
70733: LD_INT 4
70735: NEG
70736: PUSH
70737: EMPTY
70738: LIST
70739: LIST
70740: PUSH
70741: LD_INT 2
70743: NEG
70744: PUSH
70745: LD_INT 4
70747: NEG
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: PUSH
70753: LD_INT 4
70755: NEG
70756: PUSH
70757: LD_INT 2
70759: NEG
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: PUSH
70765: LD_INT 0
70767: PUSH
70768: LD_INT 4
70770: NEG
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: PUSH
70776: LD_INT 0
70778: PUSH
70779: LD_INT 5
70781: NEG
70782: PUSH
70783: EMPTY
70784: LIST
70785: LIST
70786: PUSH
70787: LD_INT 1
70789: PUSH
70790: LD_INT 4
70792: NEG
70793: PUSH
70794: EMPTY
70795: LIST
70796: LIST
70797: PUSH
70798: LD_INT 1
70800: PUSH
70801: LD_INT 3
70803: NEG
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: PUSH
70809: LD_INT 0
70811: PUSH
70812: LD_INT 3
70814: NEG
70815: PUSH
70816: EMPTY
70817: LIST
70818: LIST
70819: PUSH
70820: LD_INT 1
70822: NEG
70823: PUSH
70824: LD_INT 4
70826: NEG
70827: PUSH
70828: EMPTY
70829: LIST
70830: LIST
70831: PUSH
70832: LD_INT 1
70834: NEG
70835: PUSH
70836: LD_INT 5
70838: NEG
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: PUSH
70844: LD_INT 2
70846: PUSH
70847: LD_INT 3
70849: NEG
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: PUSH
70855: LD_INT 2
70857: NEG
70858: PUSH
70859: LD_INT 5
70861: NEG
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: PUSH
70867: EMPTY
70868: LIST
70869: LIST
70870: LIST
70871: LIST
70872: LIST
70873: LIST
70874: LIST
70875: LIST
70876: LIST
70877: LIST
70878: LIST
70879: LIST
70880: LIST
70881: LIST
70882: LIST
70883: LIST
70884: LIST
70885: LIST
70886: LIST
70887: LIST
70888: LIST
70889: LIST
70890: LIST
70891: LIST
70892: LIST
70893: LIST
70894: LIST
70895: LIST
70896: LIST
70897: LIST
70898: LIST
70899: LIST
70900: LIST
70901: LIST
70902: LIST
70903: LIST
70904: LIST
70905: LIST
70906: LIST
70907: LIST
70908: LIST
70909: LIST
70910: LIST
70911: LIST
70912: LIST
70913: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70914: LD_ADDR_VAR 0 31
70918: PUSH
70919: LD_INT 0
70921: PUSH
70922: LD_INT 4
70924: PUSH
70925: EMPTY
70926: LIST
70927: LIST
70928: PUSH
70929: LD_INT 0
70931: PUSH
70932: LD_INT 3
70934: PUSH
70935: EMPTY
70936: LIST
70937: LIST
70938: PUSH
70939: LD_INT 1
70941: PUSH
70942: LD_INT 4
70944: PUSH
70945: EMPTY
70946: LIST
70947: LIST
70948: PUSH
70949: LD_INT 1
70951: PUSH
70952: LD_INT 5
70954: PUSH
70955: EMPTY
70956: LIST
70957: LIST
70958: PUSH
70959: LD_INT 0
70961: PUSH
70962: LD_INT 5
70964: PUSH
70965: EMPTY
70966: LIST
70967: LIST
70968: PUSH
70969: LD_INT 1
70971: NEG
70972: PUSH
70973: LD_INT 4
70975: PUSH
70976: EMPTY
70977: LIST
70978: LIST
70979: PUSH
70980: LD_INT 1
70982: NEG
70983: PUSH
70984: LD_INT 3
70986: PUSH
70987: EMPTY
70988: LIST
70989: LIST
70990: PUSH
70991: LD_INT 2
70993: PUSH
70994: LD_INT 5
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: PUSH
71001: LD_INT 2
71003: NEG
71004: PUSH
71005: LD_INT 3
71007: PUSH
71008: EMPTY
71009: LIST
71010: LIST
71011: PUSH
71012: LD_INT 3
71014: NEG
71015: PUSH
71016: LD_INT 0
71018: PUSH
71019: EMPTY
71020: LIST
71021: LIST
71022: PUSH
71023: LD_INT 3
71025: NEG
71026: PUSH
71027: LD_INT 1
71029: NEG
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: PUSH
71035: LD_INT 2
71037: NEG
71038: PUSH
71039: LD_INT 0
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: PUSH
71046: LD_INT 2
71048: NEG
71049: PUSH
71050: LD_INT 1
71052: PUSH
71053: EMPTY
71054: LIST
71055: LIST
71056: PUSH
71057: LD_INT 3
71059: NEG
71060: PUSH
71061: LD_INT 1
71063: PUSH
71064: EMPTY
71065: LIST
71066: LIST
71067: PUSH
71068: LD_INT 4
71070: NEG
71071: PUSH
71072: LD_INT 0
71074: PUSH
71075: EMPTY
71076: LIST
71077: LIST
71078: PUSH
71079: LD_INT 4
71081: NEG
71082: PUSH
71083: LD_INT 1
71085: NEG
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: PUSH
71091: LD_INT 4
71093: NEG
71094: PUSH
71095: LD_INT 2
71097: NEG
71098: PUSH
71099: EMPTY
71100: LIST
71101: LIST
71102: PUSH
71103: LD_INT 2
71105: NEG
71106: PUSH
71107: LD_INT 2
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: PUSH
71114: LD_INT 4
71116: NEG
71117: PUSH
71118: LD_INT 4
71120: NEG
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: PUSH
71126: LD_INT 4
71128: NEG
71129: PUSH
71130: LD_INT 5
71132: NEG
71133: PUSH
71134: EMPTY
71135: LIST
71136: LIST
71137: PUSH
71138: LD_INT 3
71140: NEG
71141: PUSH
71142: LD_INT 4
71144: NEG
71145: PUSH
71146: EMPTY
71147: LIST
71148: LIST
71149: PUSH
71150: LD_INT 3
71152: NEG
71153: PUSH
71154: LD_INT 3
71156: NEG
71157: PUSH
71158: EMPTY
71159: LIST
71160: LIST
71161: PUSH
71162: LD_INT 4
71164: NEG
71165: PUSH
71166: LD_INT 3
71168: NEG
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: PUSH
71174: LD_INT 5
71176: NEG
71177: PUSH
71178: LD_INT 4
71180: NEG
71181: PUSH
71182: EMPTY
71183: LIST
71184: LIST
71185: PUSH
71186: LD_INT 5
71188: NEG
71189: PUSH
71190: LD_INT 5
71192: NEG
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: PUSH
71198: LD_INT 3
71200: NEG
71201: PUSH
71202: LD_INT 5
71204: NEG
71205: PUSH
71206: EMPTY
71207: LIST
71208: LIST
71209: PUSH
71210: LD_INT 5
71212: NEG
71213: PUSH
71214: LD_INT 3
71216: NEG
71217: PUSH
71218: EMPTY
71219: LIST
71220: LIST
71221: PUSH
71222: LD_INT 0
71224: PUSH
71225: LD_INT 3
71227: NEG
71228: PUSH
71229: EMPTY
71230: LIST
71231: LIST
71232: PUSH
71233: LD_INT 0
71235: PUSH
71236: LD_INT 4
71238: NEG
71239: PUSH
71240: EMPTY
71241: LIST
71242: LIST
71243: PUSH
71244: LD_INT 1
71246: PUSH
71247: LD_INT 3
71249: NEG
71250: PUSH
71251: EMPTY
71252: LIST
71253: LIST
71254: PUSH
71255: LD_INT 1
71257: PUSH
71258: LD_INT 2
71260: NEG
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: LD_INT 0
71268: PUSH
71269: LD_INT 2
71271: NEG
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: PUSH
71277: LD_INT 1
71279: NEG
71280: PUSH
71281: LD_INT 3
71283: NEG
71284: PUSH
71285: EMPTY
71286: LIST
71287: LIST
71288: PUSH
71289: LD_INT 1
71291: NEG
71292: PUSH
71293: LD_INT 4
71295: NEG
71296: PUSH
71297: EMPTY
71298: LIST
71299: LIST
71300: PUSH
71301: LD_INT 2
71303: PUSH
71304: LD_INT 2
71306: NEG
71307: PUSH
71308: EMPTY
71309: LIST
71310: LIST
71311: PUSH
71312: LD_INT 2
71314: NEG
71315: PUSH
71316: LD_INT 4
71318: NEG
71319: PUSH
71320: EMPTY
71321: LIST
71322: LIST
71323: PUSH
71324: LD_INT 4
71326: PUSH
71327: LD_INT 0
71329: PUSH
71330: EMPTY
71331: LIST
71332: LIST
71333: PUSH
71334: LD_INT 4
71336: PUSH
71337: LD_INT 1
71339: NEG
71340: PUSH
71341: EMPTY
71342: LIST
71343: LIST
71344: PUSH
71345: LD_INT 5
71347: PUSH
71348: LD_INT 0
71350: PUSH
71351: EMPTY
71352: LIST
71353: LIST
71354: PUSH
71355: LD_INT 5
71357: PUSH
71358: LD_INT 1
71360: PUSH
71361: EMPTY
71362: LIST
71363: LIST
71364: PUSH
71365: LD_INT 4
71367: PUSH
71368: LD_INT 1
71370: PUSH
71371: EMPTY
71372: LIST
71373: LIST
71374: PUSH
71375: LD_INT 3
71377: PUSH
71378: LD_INT 0
71380: PUSH
71381: EMPTY
71382: LIST
71383: LIST
71384: PUSH
71385: LD_INT 3
71387: PUSH
71388: LD_INT 1
71390: NEG
71391: PUSH
71392: EMPTY
71393: LIST
71394: LIST
71395: PUSH
71396: LD_INT 3
71398: PUSH
71399: LD_INT 2
71401: NEG
71402: PUSH
71403: EMPTY
71404: LIST
71405: LIST
71406: PUSH
71407: LD_INT 5
71409: PUSH
71410: LD_INT 2
71412: PUSH
71413: EMPTY
71414: LIST
71415: LIST
71416: PUSH
71417: EMPTY
71418: LIST
71419: LIST
71420: LIST
71421: LIST
71422: LIST
71423: LIST
71424: LIST
71425: LIST
71426: LIST
71427: LIST
71428: LIST
71429: LIST
71430: LIST
71431: LIST
71432: LIST
71433: LIST
71434: LIST
71435: LIST
71436: LIST
71437: LIST
71438: LIST
71439: LIST
71440: LIST
71441: LIST
71442: LIST
71443: LIST
71444: LIST
71445: LIST
71446: LIST
71447: LIST
71448: LIST
71449: LIST
71450: LIST
71451: LIST
71452: LIST
71453: LIST
71454: LIST
71455: LIST
71456: LIST
71457: LIST
71458: LIST
71459: LIST
71460: LIST
71461: LIST
71462: LIST
71463: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71464: LD_ADDR_VAR 0 32
71468: PUSH
71469: LD_INT 4
71471: NEG
71472: PUSH
71473: LD_INT 0
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: PUSH
71480: LD_INT 4
71482: NEG
71483: PUSH
71484: LD_INT 1
71486: NEG
71487: PUSH
71488: EMPTY
71489: LIST
71490: LIST
71491: PUSH
71492: LD_INT 3
71494: NEG
71495: PUSH
71496: LD_INT 0
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: PUSH
71503: LD_INT 3
71505: NEG
71506: PUSH
71507: LD_INT 1
71509: PUSH
71510: EMPTY
71511: LIST
71512: LIST
71513: PUSH
71514: LD_INT 4
71516: NEG
71517: PUSH
71518: LD_INT 1
71520: PUSH
71521: EMPTY
71522: LIST
71523: LIST
71524: PUSH
71525: LD_INT 5
71527: NEG
71528: PUSH
71529: LD_INT 0
71531: PUSH
71532: EMPTY
71533: LIST
71534: LIST
71535: PUSH
71536: LD_INT 5
71538: NEG
71539: PUSH
71540: LD_INT 1
71542: NEG
71543: PUSH
71544: EMPTY
71545: LIST
71546: LIST
71547: PUSH
71548: LD_INT 5
71550: NEG
71551: PUSH
71552: LD_INT 2
71554: NEG
71555: PUSH
71556: EMPTY
71557: LIST
71558: LIST
71559: PUSH
71560: LD_INT 3
71562: NEG
71563: PUSH
71564: LD_INT 2
71566: PUSH
71567: EMPTY
71568: LIST
71569: LIST
71570: PUSH
71571: LD_INT 3
71573: NEG
71574: PUSH
71575: LD_INT 3
71577: NEG
71578: PUSH
71579: EMPTY
71580: LIST
71581: LIST
71582: PUSH
71583: LD_INT 3
71585: NEG
71586: PUSH
71587: LD_INT 4
71589: NEG
71590: PUSH
71591: EMPTY
71592: LIST
71593: LIST
71594: PUSH
71595: LD_INT 2
71597: NEG
71598: PUSH
71599: LD_INT 3
71601: NEG
71602: PUSH
71603: EMPTY
71604: LIST
71605: LIST
71606: PUSH
71607: LD_INT 2
71609: NEG
71610: PUSH
71611: LD_INT 2
71613: NEG
71614: PUSH
71615: EMPTY
71616: LIST
71617: LIST
71618: PUSH
71619: LD_INT 3
71621: NEG
71622: PUSH
71623: LD_INT 2
71625: NEG
71626: PUSH
71627: EMPTY
71628: LIST
71629: LIST
71630: PUSH
71631: LD_INT 4
71633: NEG
71634: PUSH
71635: LD_INT 3
71637: NEG
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: PUSH
71643: LD_INT 4
71645: NEG
71646: PUSH
71647: LD_INT 4
71649: NEG
71650: PUSH
71651: EMPTY
71652: LIST
71653: LIST
71654: PUSH
71655: LD_INT 2
71657: NEG
71658: PUSH
71659: LD_INT 4
71661: NEG
71662: PUSH
71663: EMPTY
71664: LIST
71665: LIST
71666: PUSH
71667: LD_INT 4
71669: NEG
71670: PUSH
71671: LD_INT 2
71673: NEG
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: PUSH
71679: LD_INT 0
71681: PUSH
71682: LD_INT 4
71684: NEG
71685: PUSH
71686: EMPTY
71687: LIST
71688: LIST
71689: PUSH
71690: LD_INT 0
71692: PUSH
71693: LD_INT 5
71695: NEG
71696: PUSH
71697: EMPTY
71698: LIST
71699: LIST
71700: PUSH
71701: LD_INT 1
71703: PUSH
71704: LD_INT 4
71706: NEG
71707: PUSH
71708: EMPTY
71709: LIST
71710: LIST
71711: PUSH
71712: LD_INT 1
71714: PUSH
71715: LD_INT 3
71717: NEG
71718: PUSH
71719: EMPTY
71720: LIST
71721: LIST
71722: PUSH
71723: LD_INT 0
71725: PUSH
71726: LD_INT 3
71728: NEG
71729: PUSH
71730: EMPTY
71731: LIST
71732: LIST
71733: PUSH
71734: LD_INT 1
71736: NEG
71737: PUSH
71738: LD_INT 4
71740: NEG
71741: PUSH
71742: EMPTY
71743: LIST
71744: LIST
71745: PUSH
71746: LD_INT 1
71748: NEG
71749: PUSH
71750: LD_INT 5
71752: NEG
71753: PUSH
71754: EMPTY
71755: LIST
71756: LIST
71757: PUSH
71758: LD_INT 2
71760: PUSH
71761: LD_INT 3
71763: NEG
71764: PUSH
71765: EMPTY
71766: LIST
71767: LIST
71768: PUSH
71769: LD_INT 2
71771: NEG
71772: PUSH
71773: LD_INT 5
71775: NEG
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: PUSH
71781: LD_INT 3
71783: PUSH
71784: LD_INT 0
71786: PUSH
71787: EMPTY
71788: LIST
71789: LIST
71790: PUSH
71791: LD_INT 3
71793: PUSH
71794: LD_INT 1
71796: NEG
71797: PUSH
71798: EMPTY
71799: LIST
71800: LIST
71801: PUSH
71802: LD_INT 4
71804: PUSH
71805: LD_INT 0
71807: PUSH
71808: EMPTY
71809: LIST
71810: LIST
71811: PUSH
71812: LD_INT 4
71814: PUSH
71815: LD_INT 1
71817: PUSH
71818: EMPTY
71819: LIST
71820: LIST
71821: PUSH
71822: LD_INT 3
71824: PUSH
71825: LD_INT 1
71827: PUSH
71828: EMPTY
71829: LIST
71830: LIST
71831: PUSH
71832: LD_INT 2
71834: PUSH
71835: LD_INT 0
71837: PUSH
71838: EMPTY
71839: LIST
71840: LIST
71841: PUSH
71842: LD_INT 2
71844: PUSH
71845: LD_INT 1
71847: NEG
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: PUSH
71853: LD_INT 2
71855: PUSH
71856: LD_INT 2
71858: NEG
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: PUSH
71864: LD_INT 4
71866: PUSH
71867: LD_INT 2
71869: PUSH
71870: EMPTY
71871: LIST
71872: LIST
71873: PUSH
71874: LD_INT 4
71876: PUSH
71877: LD_INT 4
71879: PUSH
71880: EMPTY
71881: LIST
71882: LIST
71883: PUSH
71884: LD_INT 4
71886: PUSH
71887: LD_INT 3
71889: PUSH
71890: EMPTY
71891: LIST
71892: LIST
71893: PUSH
71894: LD_INT 5
71896: PUSH
71897: LD_INT 4
71899: PUSH
71900: EMPTY
71901: LIST
71902: LIST
71903: PUSH
71904: LD_INT 5
71906: PUSH
71907: LD_INT 5
71909: PUSH
71910: EMPTY
71911: LIST
71912: LIST
71913: PUSH
71914: LD_INT 4
71916: PUSH
71917: LD_INT 5
71919: PUSH
71920: EMPTY
71921: LIST
71922: LIST
71923: PUSH
71924: LD_INT 3
71926: PUSH
71927: LD_INT 4
71929: PUSH
71930: EMPTY
71931: LIST
71932: LIST
71933: PUSH
71934: LD_INT 3
71936: PUSH
71937: LD_INT 3
71939: PUSH
71940: EMPTY
71941: LIST
71942: LIST
71943: PUSH
71944: LD_INT 5
71946: PUSH
71947: LD_INT 3
71949: PUSH
71950: EMPTY
71951: LIST
71952: LIST
71953: PUSH
71954: LD_INT 3
71956: PUSH
71957: LD_INT 5
71959: PUSH
71960: EMPTY
71961: LIST
71962: LIST
71963: PUSH
71964: EMPTY
71965: LIST
71966: LIST
71967: LIST
71968: LIST
71969: LIST
71970: LIST
71971: LIST
71972: LIST
71973: LIST
71974: LIST
71975: LIST
71976: LIST
71977: LIST
71978: LIST
71979: LIST
71980: LIST
71981: LIST
71982: LIST
71983: LIST
71984: LIST
71985: LIST
71986: LIST
71987: LIST
71988: LIST
71989: LIST
71990: LIST
71991: LIST
71992: LIST
71993: LIST
71994: LIST
71995: LIST
71996: LIST
71997: LIST
71998: LIST
71999: LIST
72000: LIST
72001: LIST
72002: LIST
72003: LIST
72004: LIST
72005: LIST
72006: LIST
72007: LIST
72008: LIST
72009: LIST
72010: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
72011: LD_ADDR_VAR 0 33
72015: PUSH
72016: LD_INT 4
72018: NEG
72019: PUSH
72020: LD_INT 4
72022: NEG
72023: PUSH
72024: EMPTY
72025: LIST
72026: LIST
72027: PUSH
72028: LD_INT 4
72030: NEG
72031: PUSH
72032: LD_INT 5
72034: NEG
72035: PUSH
72036: EMPTY
72037: LIST
72038: LIST
72039: PUSH
72040: LD_INT 3
72042: NEG
72043: PUSH
72044: LD_INT 4
72046: NEG
72047: PUSH
72048: EMPTY
72049: LIST
72050: LIST
72051: PUSH
72052: LD_INT 3
72054: NEG
72055: PUSH
72056: LD_INT 3
72058: NEG
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: PUSH
72064: LD_INT 4
72066: NEG
72067: PUSH
72068: LD_INT 3
72070: NEG
72071: PUSH
72072: EMPTY
72073: LIST
72074: LIST
72075: PUSH
72076: LD_INT 5
72078: NEG
72079: PUSH
72080: LD_INT 4
72082: NEG
72083: PUSH
72084: EMPTY
72085: LIST
72086: LIST
72087: PUSH
72088: LD_INT 5
72090: NEG
72091: PUSH
72092: LD_INT 5
72094: NEG
72095: PUSH
72096: EMPTY
72097: LIST
72098: LIST
72099: PUSH
72100: LD_INT 3
72102: NEG
72103: PUSH
72104: LD_INT 5
72106: NEG
72107: PUSH
72108: EMPTY
72109: LIST
72110: LIST
72111: PUSH
72112: LD_INT 5
72114: NEG
72115: PUSH
72116: LD_INT 3
72118: NEG
72119: PUSH
72120: EMPTY
72121: LIST
72122: LIST
72123: PUSH
72124: LD_INT 0
72126: PUSH
72127: LD_INT 3
72129: NEG
72130: PUSH
72131: EMPTY
72132: LIST
72133: LIST
72134: PUSH
72135: LD_INT 0
72137: PUSH
72138: LD_INT 4
72140: NEG
72141: PUSH
72142: EMPTY
72143: LIST
72144: LIST
72145: PUSH
72146: LD_INT 1
72148: PUSH
72149: LD_INT 3
72151: NEG
72152: PUSH
72153: EMPTY
72154: LIST
72155: LIST
72156: PUSH
72157: LD_INT 1
72159: PUSH
72160: LD_INT 2
72162: NEG
72163: PUSH
72164: EMPTY
72165: LIST
72166: LIST
72167: PUSH
72168: LD_INT 0
72170: PUSH
72171: LD_INT 2
72173: NEG
72174: PUSH
72175: EMPTY
72176: LIST
72177: LIST
72178: PUSH
72179: LD_INT 1
72181: NEG
72182: PUSH
72183: LD_INT 3
72185: NEG
72186: PUSH
72187: EMPTY
72188: LIST
72189: LIST
72190: PUSH
72191: LD_INT 1
72193: NEG
72194: PUSH
72195: LD_INT 4
72197: NEG
72198: PUSH
72199: EMPTY
72200: LIST
72201: LIST
72202: PUSH
72203: LD_INT 2
72205: PUSH
72206: LD_INT 2
72208: NEG
72209: PUSH
72210: EMPTY
72211: LIST
72212: LIST
72213: PUSH
72214: LD_INT 2
72216: NEG
72217: PUSH
72218: LD_INT 4
72220: NEG
72221: PUSH
72222: EMPTY
72223: LIST
72224: LIST
72225: PUSH
72226: LD_INT 4
72228: PUSH
72229: LD_INT 0
72231: PUSH
72232: EMPTY
72233: LIST
72234: LIST
72235: PUSH
72236: LD_INT 4
72238: PUSH
72239: LD_INT 1
72241: NEG
72242: PUSH
72243: EMPTY
72244: LIST
72245: LIST
72246: PUSH
72247: LD_INT 5
72249: PUSH
72250: LD_INT 0
72252: PUSH
72253: EMPTY
72254: LIST
72255: LIST
72256: PUSH
72257: LD_INT 5
72259: PUSH
72260: LD_INT 1
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: PUSH
72267: LD_INT 4
72269: PUSH
72270: LD_INT 1
72272: PUSH
72273: EMPTY
72274: LIST
72275: LIST
72276: PUSH
72277: LD_INT 3
72279: PUSH
72280: LD_INT 0
72282: PUSH
72283: EMPTY
72284: LIST
72285: LIST
72286: PUSH
72287: LD_INT 3
72289: PUSH
72290: LD_INT 1
72292: NEG
72293: PUSH
72294: EMPTY
72295: LIST
72296: LIST
72297: PUSH
72298: LD_INT 3
72300: PUSH
72301: LD_INT 2
72303: NEG
72304: PUSH
72305: EMPTY
72306: LIST
72307: LIST
72308: PUSH
72309: LD_INT 5
72311: PUSH
72312: LD_INT 2
72314: PUSH
72315: EMPTY
72316: LIST
72317: LIST
72318: PUSH
72319: LD_INT 3
72321: PUSH
72322: LD_INT 3
72324: PUSH
72325: EMPTY
72326: LIST
72327: LIST
72328: PUSH
72329: LD_INT 3
72331: PUSH
72332: LD_INT 2
72334: PUSH
72335: EMPTY
72336: LIST
72337: LIST
72338: PUSH
72339: LD_INT 4
72341: PUSH
72342: LD_INT 3
72344: PUSH
72345: EMPTY
72346: LIST
72347: LIST
72348: PUSH
72349: LD_INT 4
72351: PUSH
72352: LD_INT 4
72354: PUSH
72355: EMPTY
72356: LIST
72357: LIST
72358: PUSH
72359: LD_INT 3
72361: PUSH
72362: LD_INT 4
72364: PUSH
72365: EMPTY
72366: LIST
72367: LIST
72368: PUSH
72369: LD_INT 2
72371: PUSH
72372: LD_INT 3
72374: PUSH
72375: EMPTY
72376: LIST
72377: LIST
72378: PUSH
72379: LD_INT 2
72381: PUSH
72382: LD_INT 2
72384: PUSH
72385: EMPTY
72386: LIST
72387: LIST
72388: PUSH
72389: LD_INT 4
72391: PUSH
72392: LD_INT 2
72394: PUSH
72395: EMPTY
72396: LIST
72397: LIST
72398: PUSH
72399: LD_INT 2
72401: PUSH
72402: LD_INT 4
72404: PUSH
72405: EMPTY
72406: LIST
72407: LIST
72408: PUSH
72409: LD_INT 0
72411: PUSH
72412: LD_INT 4
72414: PUSH
72415: EMPTY
72416: LIST
72417: LIST
72418: PUSH
72419: LD_INT 0
72421: PUSH
72422: LD_INT 3
72424: PUSH
72425: EMPTY
72426: LIST
72427: LIST
72428: PUSH
72429: LD_INT 1
72431: PUSH
72432: LD_INT 4
72434: PUSH
72435: EMPTY
72436: LIST
72437: LIST
72438: PUSH
72439: LD_INT 1
72441: PUSH
72442: LD_INT 5
72444: PUSH
72445: EMPTY
72446: LIST
72447: LIST
72448: PUSH
72449: LD_INT 0
72451: PUSH
72452: LD_INT 5
72454: PUSH
72455: EMPTY
72456: LIST
72457: LIST
72458: PUSH
72459: LD_INT 1
72461: NEG
72462: PUSH
72463: LD_INT 4
72465: PUSH
72466: EMPTY
72467: LIST
72468: LIST
72469: PUSH
72470: LD_INT 1
72472: NEG
72473: PUSH
72474: LD_INT 3
72476: PUSH
72477: EMPTY
72478: LIST
72479: LIST
72480: PUSH
72481: LD_INT 2
72483: PUSH
72484: LD_INT 5
72486: PUSH
72487: EMPTY
72488: LIST
72489: LIST
72490: PUSH
72491: LD_INT 2
72493: NEG
72494: PUSH
72495: LD_INT 3
72497: PUSH
72498: EMPTY
72499: LIST
72500: LIST
72501: PUSH
72502: EMPTY
72503: LIST
72504: LIST
72505: LIST
72506: LIST
72507: LIST
72508: LIST
72509: LIST
72510: LIST
72511: LIST
72512: LIST
72513: LIST
72514: LIST
72515: LIST
72516: LIST
72517: LIST
72518: LIST
72519: LIST
72520: LIST
72521: LIST
72522: LIST
72523: LIST
72524: LIST
72525: LIST
72526: LIST
72527: LIST
72528: LIST
72529: LIST
72530: LIST
72531: LIST
72532: LIST
72533: LIST
72534: LIST
72535: LIST
72536: LIST
72537: LIST
72538: LIST
72539: LIST
72540: LIST
72541: LIST
72542: LIST
72543: LIST
72544: LIST
72545: LIST
72546: LIST
72547: LIST
72548: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72549: LD_ADDR_VAR 0 34
72553: PUSH
72554: LD_INT 0
72556: PUSH
72557: LD_INT 4
72559: NEG
72560: PUSH
72561: EMPTY
72562: LIST
72563: LIST
72564: PUSH
72565: LD_INT 0
72567: PUSH
72568: LD_INT 5
72570: NEG
72571: PUSH
72572: EMPTY
72573: LIST
72574: LIST
72575: PUSH
72576: LD_INT 1
72578: PUSH
72579: LD_INT 4
72581: NEG
72582: PUSH
72583: EMPTY
72584: LIST
72585: LIST
72586: PUSH
72587: LD_INT 1
72589: PUSH
72590: LD_INT 3
72592: NEG
72593: PUSH
72594: EMPTY
72595: LIST
72596: LIST
72597: PUSH
72598: LD_INT 0
72600: PUSH
72601: LD_INT 3
72603: NEG
72604: PUSH
72605: EMPTY
72606: LIST
72607: LIST
72608: PUSH
72609: LD_INT 1
72611: NEG
72612: PUSH
72613: LD_INT 4
72615: NEG
72616: PUSH
72617: EMPTY
72618: LIST
72619: LIST
72620: PUSH
72621: LD_INT 1
72623: NEG
72624: PUSH
72625: LD_INT 5
72627: NEG
72628: PUSH
72629: EMPTY
72630: LIST
72631: LIST
72632: PUSH
72633: LD_INT 2
72635: PUSH
72636: LD_INT 3
72638: NEG
72639: PUSH
72640: EMPTY
72641: LIST
72642: LIST
72643: PUSH
72644: LD_INT 2
72646: NEG
72647: PUSH
72648: LD_INT 5
72650: NEG
72651: PUSH
72652: EMPTY
72653: LIST
72654: LIST
72655: PUSH
72656: LD_INT 3
72658: PUSH
72659: LD_INT 0
72661: PUSH
72662: EMPTY
72663: LIST
72664: LIST
72665: PUSH
72666: LD_INT 3
72668: PUSH
72669: LD_INT 1
72671: NEG
72672: PUSH
72673: EMPTY
72674: LIST
72675: LIST
72676: PUSH
72677: LD_INT 4
72679: PUSH
72680: LD_INT 0
72682: PUSH
72683: EMPTY
72684: LIST
72685: LIST
72686: PUSH
72687: LD_INT 4
72689: PUSH
72690: LD_INT 1
72692: PUSH
72693: EMPTY
72694: LIST
72695: LIST
72696: PUSH
72697: LD_INT 3
72699: PUSH
72700: LD_INT 1
72702: PUSH
72703: EMPTY
72704: LIST
72705: LIST
72706: PUSH
72707: LD_INT 2
72709: PUSH
72710: LD_INT 0
72712: PUSH
72713: EMPTY
72714: LIST
72715: LIST
72716: PUSH
72717: LD_INT 2
72719: PUSH
72720: LD_INT 1
72722: NEG
72723: PUSH
72724: EMPTY
72725: LIST
72726: LIST
72727: PUSH
72728: LD_INT 2
72730: PUSH
72731: LD_INT 2
72733: NEG
72734: PUSH
72735: EMPTY
72736: LIST
72737: LIST
72738: PUSH
72739: LD_INT 4
72741: PUSH
72742: LD_INT 2
72744: PUSH
72745: EMPTY
72746: LIST
72747: LIST
72748: PUSH
72749: LD_INT 4
72751: PUSH
72752: LD_INT 4
72754: PUSH
72755: EMPTY
72756: LIST
72757: LIST
72758: PUSH
72759: LD_INT 4
72761: PUSH
72762: LD_INT 3
72764: PUSH
72765: EMPTY
72766: LIST
72767: LIST
72768: PUSH
72769: LD_INT 5
72771: PUSH
72772: LD_INT 4
72774: PUSH
72775: EMPTY
72776: LIST
72777: LIST
72778: PUSH
72779: LD_INT 5
72781: PUSH
72782: LD_INT 5
72784: PUSH
72785: EMPTY
72786: LIST
72787: LIST
72788: PUSH
72789: LD_INT 4
72791: PUSH
72792: LD_INT 5
72794: PUSH
72795: EMPTY
72796: LIST
72797: LIST
72798: PUSH
72799: LD_INT 3
72801: PUSH
72802: LD_INT 4
72804: PUSH
72805: EMPTY
72806: LIST
72807: LIST
72808: PUSH
72809: LD_INT 3
72811: PUSH
72812: LD_INT 3
72814: PUSH
72815: EMPTY
72816: LIST
72817: LIST
72818: PUSH
72819: LD_INT 5
72821: PUSH
72822: LD_INT 3
72824: PUSH
72825: EMPTY
72826: LIST
72827: LIST
72828: PUSH
72829: LD_INT 3
72831: PUSH
72832: LD_INT 5
72834: PUSH
72835: EMPTY
72836: LIST
72837: LIST
72838: PUSH
72839: LD_INT 0
72841: PUSH
72842: LD_INT 3
72844: PUSH
72845: EMPTY
72846: LIST
72847: LIST
72848: PUSH
72849: LD_INT 0
72851: PUSH
72852: LD_INT 2
72854: PUSH
72855: EMPTY
72856: LIST
72857: LIST
72858: PUSH
72859: LD_INT 1
72861: PUSH
72862: LD_INT 3
72864: PUSH
72865: EMPTY
72866: LIST
72867: LIST
72868: PUSH
72869: LD_INT 1
72871: PUSH
72872: LD_INT 4
72874: PUSH
72875: EMPTY
72876: LIST
72877: LIST
72878: PUSH
72879: LD_INT 0
72881: PUSH
72882: LD_INT 4
72884: PUSH
72885: EMPTY
72886: LIST
72887: LIST
72888: PUSH
72889: LD_INT 1
72891: NEG
72892: PUSH
72893: LD_INT 3
72895: PUSH
72896: EMPTY
72897: LIST
72898: LIST
72899: PUSH
72900: LD_INT 1
72902: NEG
72903: PUSH
72904: LD_INT 2
72906: PUSH
72907: EMPTY
72908: LIST
72909: LIST
72910: PUSH
72911: LD_INT 2
72913: PUSH
72914: LD_INT 4
72916: PUSH
72917: EMPTY
72918: LIST
72919: LIST
72920: PUSH
72921: LD_INT 2
72923: NEG
72924: PUSH
72925: LD_INT 2
72927: PUSH
72928: EMPTY
72929: LIST
72930: LIST
72931: PUSH
72932: LD_INT 4
72934: NEG
72935: PUSH
72936: LD_INT 0
72938: PUSH
72939: EMPTY
72940: LIST
72941: LIST
72942: PUSH
72943: LD_INT 4
72945: NEG
72946: PUSH
72947: LD_INT 1
72949: NEG
72950: PUSH
72951: EMPTY
72952: LIST
72953: LIST
72954: PUSH
72955: LD_INT 3
72957: NEG
72958: PUSH
72959: LD_INT 0
72961: PUSH
72962: EMPTY
72963: LIST
72964: LIST
72965: PUSH
72966: LD_INT 3
72968: NEG
72969: PUSH
72970: LD_INT 1
72972: PUSH
72973: EMPTY
72974: LIST
72975: LIST
72976: PUSH
72977: LD_INT 4
72979: NEG
72980: PUSH
72981: LD_INT 1
72983: PUSH
72984: EMPTY
72985: LIST
72986: LIST
72987: PUSH
72988: LD_INT 5
72990: NEG
72991: PUSH
72992: LD_INT 0
72994: PUSH
72995: EMPTY
72996: LIST
72997: LIST
72998: PUSH
72999: LD_INT 5
73001: NEG
73002: PUSH
73003: LD_INT 1
73005: NEG
73006: PUSH
73007: EMPTY
73008: LIST
73009: LIST
73010: PUSH
73011: LD_INT 5
73013: NEG
73014: PUSH
73015: LD_INT 2
73017: NEG
73018: PUSH
73019: EMPTY
73020: LIST
73021: LIST
73022: PUSH
73023: LD_INT 3
73025: NEG
73026: PUSH
73027: LD_INT 2
73029: PUSH
73030: EMPTY
73031: LIST
73032: LIST
73033: PUSH
73034: EMPTY
73035: LIST
73036: LIST
73037: LIST
73038: LIST
73039: LIST
73040: LIST
73041: LIST
73042: LIST
73043: LIST
73044: LIST
73045: LIST
73046: LIST
73047: LIST
73048: LIST
73049: LIST
73050: LIST
73051: LIST
73052: LIST
73053: LIST
73054: LIST
73055: LIST
73056: LIST
73057: LIST
73058: LIST
73059: LIST
73060: LIST
73061: LIST
73062: LIST
73063: LIST
73064: LIST
73065: LIST
73066: LIST
73067: LIST
73068: LIST
73069: LIST
73070: LIST
73071: LIST
73072: LIST
73073: LIST
73074: LIST
73075: LIST
73076: LIST
73077: LIST
73078: LIST
73079: LIST
73080: ST_TO_ADDR
// end ; end ;
73081: GO 73084
73083: POP
// case btype of b_depot , b_warehouse :
73084: LD_VAR 0 1
73088: PUSH
73089: LD_INT 0
73091: DOUBLE
73092: EQUAL
73093: IFTRUE 73103
73095: LD_INT 1
73097: DOUBLE
73098: EQUAL
73099: IFTRUE 73103
73101: GO 73304
73103: POP
// case nation of nation_american :
73104: LD_VAR 0 5
73108: PUSH
73109: LD_INT 1
73111: DOUBLE
73112: EQUAL
73113: IFTRUE 73117
73115: GO 73173
73117: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73118: LD_ADDR_VAR 0 9
73122: PUSH
73123: LD_VAR 0 11
73127: PUSH
73128: LD_VAR 0 12
73132: PUSH
73133: LD_VAR 0 13
73137: PUSH
73138: LD_VAR 0 14
73142: PUSH
73143: LD_VAR 0 15
73147: PUSH
73148: LD_VAR 0 16
73152: PUSH
73153: EMPTY
73154: LIST
73155: LIST
73156: LIST
73157: LIST
73158: LIST
73159: LIST
73160: PUSH
73161: LD_VAR 0 4
73165: PUSH
73166: LD_INT 1
73168: PLUS
73169: ARRAY
73170: ST_TO_ADDR
73171: GO 73302
73173: LD_INT 2
73175: DOUBLE
73176: EQUAL
73177: IFTRUE 73181
73179: GO 73237
73181: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73182: LD_ADDR_VAR 0 9
73186: PUSH
73187: LD_VAR 0 17
73191: PUSH
73192: LD_VAR 0 18
73196: PUSH
73197: LD_VAR 0 19
73201: PUSH
73202: LD_VAR 0 20
73206: PUSH
73207: LD_VAR 0 21
73211: PUSH
73212: LD_VAR 0 22
73216: PUSH
73217: EMPTY
73218: LIST
73219: LIST
73220: LIST
73221: LIST
73222: LIST
73223: LIST
73224: PUSH
73225: LD_VAR 0 4
73229: PUSH
73230: LD_INT 1
73232: PLUS
73233: ARRAY
73234: ST_TO_ADDR
73235: GO 73302
73237: LD_INT 3
73239: DOUBLE
73240: EQUAL
73241: IFTRUE 73245
73243: GO 73301
73245: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73246: LD_ADDR_VAR 0 9
73250: PUSH
73251: LD_VAR 0 23
73255: PUSH
73256: LD_VAR 0 24
73260: PUSH
73261: LD_VAR 0 25
73265: PUSH
73266: LD_VAR 0 26
73270: PUSH
73271: LD_VAR 0 27
73275: PUSH
73276: LD_VAR 0 28
73280: PUSH
73281: EMPTY
73282: LIST
73283: LIST
73284: LIST
73285: LIST
73286: LIST
73287: LIST
73288: PUSH
73289: LD_VAR 0 4
73293: PUSH
73294: LD_INT 1
73296: PLUS
73297: ARRAY
73298: ST_TO_ADDR
73299: GO 73302
73301: POP
73302: GO 73857
73304: LD_INT 2
73306: DOUBLE
73307: EQUAL
73308: IFTRUE 73318
73310: LD_INT 3
73312: DOUBLE
73313: EQUAL
73314: IFTRUE 73318
73316: GO 73374
73318: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73319: LD_ADDR_VAR 0 9
73323: PUSH
73324: LD_VAR 0 29
73328: PUSH
73329: LD_VAR 0 30
73333: PUSH
73334: LD_VAR 0 31
73338: PUSH
73339: LD_VAR 0 32
73343: PUSH
73344: LD_VAR 0 33
73348: PUSH
73349: LD_VAR 0 34
73353: PUSH
73354: EMPTY
73355: LIST
73356: LIST
73357: LIST
73358: LIST
73359: LIST
73360: LIST
73361: PUSH
73362: LD_VAR 0 4
73366: PUSH
73367: LD_INT 1
73369: PLUS
73370: ARRAY
73371: ST_TO_ADDR
73372: GO 73857
73374: LD_INT 16
73376: DOUBLE
73377: EQUAL
73378: IFTRUE 73436
73380: LD_INT 17
73382: DOUBLE
73383: EQUAL
73384: IFTRUE 73436
73386: LD_INT 18
73388: DOUBLE
73389: EQUAL
73390: IFTRUE 73436
73392: LD_INT 19
73394: DOUBLE
73395: EQUAL
73396: IFTRUE 73436
73398: LD_INT 22
73400: DOUBLE
73401: EQUAL
73402: IFTRUE 73436
73404: LD_INT 20
73406: DOUBLE
73407: EQUAL
73408: IFTRUE 73436
73410: LD_INT 21
73412: DOUBLE
73413: EQUAL
73414: IFTRUE 73436
73416: LD_INT 23
73418: DOUBLE
73419: EQUAL
73420: IFTRUE 73436
73422: LD_INT 24
73424: DOUBLE
73425: EQUAL
73426: IFTRUE 73436
73428: LD_INT 25
73430: DOUBLE
73431: EQUAL
73432: IFTRUE 73436
73434: GO 73492
73436: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73437: LD_ADDR_VAR 0 9
73441: PUSH
73442: LD_VAR 0 35
73446: PUSH
73447: LD_VAR 0 36
73451: PUSH
73452: LD_VAR 0 37
73456: PUSH
73457: LD_VAR 0 38
73461: PUSH
73462: LD_VAR 0 39
73466: PUSH
73467: LD_VAR 0 40
73471: PUSH
73472: EMPTY
73473: LIST
73474: LIST
73475: LIST
73476: LIST
73477: LIST
73478: LIST
73479: PUSH
73480: LD_VAR 0 4
73484: PUSH
73485: LD_INT 1
73487: PLUS
73488: ARRAY
73489: ST_TO_ADDR
73490: GO 73857
73492: LD_INT 6
73494: DOUBLE
73495: EQUAL
73496: IFTRUE 73548
73498: LD_INT 7
73500: DOUBLE
73501: EQUAL
73502: IFTRUE 73548
73504: LD_INT 8
73506: DOUBLE
73507: EQUAL
73508: IFTRUE 73548
73510: LD_INT 13
73512: DOUBLE
73513: EQUAL
73514: IFTRUE 73548
73516: LD_INT 12
73518: DOUBLE
73519: EQUAL
73520: IFTRUE 73548
73522: LD_INT 15
73524: DOUBLE
73525: EQUAL
73526: IFTRUE 73548
73528: LD_INT 11
73530: DOUBLE
73531: EQUAL
73532: IFTRUE 73548
73534: LD_INT 14
73536: DOUBLE
73537: EQUAL
73538: IFTRUE 73548
73540: LD_INT 10
73542: DOUBLE
73543: EQUAL
73544: IFTRUE 73548
73546: GO 73604
73548: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73549: LD_ADDR_VAR 0 9
73553: PUSH
73554: LD_VAR 0 41
73558: PUSH
73559: LD_VAR 0 42
73563: PUSH
73564: LD_VAR 0 43
73568: PUSH
73569: LD_VAR 0 44
73573: PUSH
73574: LD_VAR 0 45
73578: PUSH
73579: LD_VAR 0 46
73583: PUSH
73584: EMPTY
73585: LIST
73586: LIST
73587: LIST
73588: LIST
73589: LIST
73590: LIST
73591: PUSH
73592: LD_VAR 0 4
73596: PUSH
73597: LD_INT 1
73599: PLUS
73600: ARRAY
73601: ST_TO_ADDR
73602: GO 73857
73604: LD_INT 36
73606: DOUBLE
73607: EQUAL
73608: IFTRUE 73612
73610: GO 73668
73612: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73613: LD_ADDR_VAR 0 9
73617: PUSH
73618: LD_VAR 0 47
73622: PUSH
73623: LD_VAR 0 48
73627: PUSH
73628: LD_VAR 0 49
73632: PUSH
73633: LD_VAR 0 50
73637: PUSH
73638: LD_VAR 0 51
73642: PUSH
73643: LD_VAR 0 52
73647: PUSH
73648: EMPTY
73649: LIST
73650: LIST
73651: LIST
73652: LIST
73653: LIST
73654: LIST
73655: PUSH
73656: LD_VAR 0 4
73660: PUSH
73661: LD_INT 1
73663: PLUS
73664: ARRAY
73665: ST_TO_ADDR
73666: GO 73857
73668: LD_INT 4
73670: DOUBLE
73671: EQUAL
73672: IFTRUE 73694
73674: LD_INT 5
73676: DOUBLE
73677: EQUAL
73678: IFTRUE 73694
73680: LD_INT 34
73682: DOUBLE
73683: EQUAL
73684: IFTRUE 73694
73686: LD_INT 37
73688: DOUBLE
73689: EQUAL
73690: IFTRUE 73694
73692: GO 73750
73694: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73695: LD_ADDR_VAR 0 9
73699: PUSH
73700: LD_VAR 0 53
73704: PUSH
73705: LD_VAR 0 54
73709: PUSH
73710: LD_VAR 0 55
73714: PUSH
73715: LD_VAR 0 56
73719: PUSH
73720: LD_VAR 0 57
73724: PUSH
73725: LD_VAR 0 58
73729: PUSH
73730: EMPTY
73731: LIST
73732: LIST
73733: LIST
73734: LIST
73735: LIST
73736: LIST
73737: PUSH
73738: LD_VAR 0 4
73742: PUSH
73743: LD_INT 1
73745: PLUS
73746: ARRAY
73747: ST_TO_ADDR
73748: GO 73857
73750: LD_INT 31
73752: DOUBLE
73753: EQUAL
73754: IFTRUE 73800
73756: LD_INT 32
73758: DOUBLE
73759: EQUAL
73760: IFTRUE 73800
73762: LD_INT 33
73764: DOUBLE
73765: EQUAL
73766: IFTRUE 73800
73768: LD_INT 27
73770: DOUBLE
73771: EQUAL
73772: IFTRUE 73800
73774: LD_INT 26
73776: DOUBLE
73777: EQUAL
73778: IFTRUE 73800
73780: LD_INT 28
73782: DOUBLE
73783: EQUAL
73784: IFTRUE 73800
73786: LD_INT 29
73788: DOUBLE
73789: EQUAL
73790: IFTRUE 73800
73792: LD_INT 30
73794: DOUBLE
73795: EQUAL
73796: IFTRUE 73800
73798: GO 73856
73800: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73801: LD_ADDR_VAR 0 9
73805: PUSH
73806: LD_VAR 0 59
73810: PUSH
73811: LD_VAR 0 60
73815: PUSH
73816: LD_VAR 0 61
73820: PUSH
73821: LD_VAR 0 62
73825: PUSH
73826: LD_VAR 0 63
73830: PUSH
73831: LD_VAR 0 64
73835: PUSH
73836: EMPTY
73837: LIST
73838: LIST
73839: LIST
73840: LIST
73841: LIST
73842: LIST
73843: PUSH
73844: LD_VAR 0 4
73848: PUSH
73849: LD_INT 1
73851: PLUS
73852: ARRAY
73853: ST_TO_ADDR
73854: GO 73857
73856: POP
// temp_list2 = [ ] ;
73857: LD_ADDR_VAR 0 10
73861: PUSH
73862: EMPTY
73863: ST_TO_ADDR
// for i in temp_list do
73864: LD_ADDR_VAR 0 8
73868: PUSH
73869: LD_VAR 0 9
73873: PUSH
73874: FOR_IN
73875: IFFALSE 73927
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73877: LD_ADDR_VAR 0 10
73881: PUSH
73882: LD_VAR 0 10
73886: PUSH
73887: LD_VAR 0 8
73891: PUSH
73892: LD_INT 1
73894: ARRAY
73895: PUSH
73896: LD_VAR 0 2
73900: PLUS
73901: PUSH
73902: LD_VAR 0 8
73906: PUSH
73907: LD_INT 2
73909: ARRAY
73910: PUSH
73911: LD_VAR 0 3
73915: PLUS
73916: PUSH
73917: EMPTY
73918: LIST
73919: LIST
73920: PUSH
73921: EMPTY
73922: LIST
73923: ADD
73924: ST_TO_ADDR
73925: GO 73874
73927: POP
73928: POP
// result = temp_list2 ;
73929: LD_ADDR_VAR 0 7
73933: PUSH
73934: LD_VAR 0 10
73938: ST_TO_ADDR
// end ;
73939: LD_VAR 0 7
73943: RET
// export function EnemyInRange ( unit , dist ) ; begin
73944: LD_INT 0
73946: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73947: LD_ADDR_VAR 0 3
73951: PUSH
73952: LD_VAR 0 1
73956: PPUSH
73957: CALL_OW 255
73961: PPUSH
73962: LD_VAR 0 1
73966: PPUSH
73967: CALL_OW 250
73971: PPUSH
73972: LD_VAR 0 1
73976: PPUSH
73977: CALL_OW 251
73981: PPUSH
73982: LD_VAR 0 2
73986: PPUSH
73987: CALL 47201 0 4
73991: PUSH
73992: LD_INT 4
73994: ARRAY
73995: ST_TO_ADDR
// end ;
73996: LD_VAR 0 3
74000: RET
// export function PlayerSeeMe ( unit ) ; begin
74001: LD_INT 0
74003: PPUSH
// result := See ( your_side , unit ) ;
74004: LD_ADDR_VAR 0 2
74008: PUSH
74009: LD_OWVAR 2
74013: PPUSH
74014: LD_VAR 0 1
74018: PPUSH
74019: CALL_OW 292
74023: ST_TO_ADDR
// end ;
74024: LD_VAR 0 2
74028: RET
// export function ReverseDir ( unit ) ; begin
74029: LD_INT 0
74031: PPUSH
// if not unit then
74032: LD_VAR 0 1
74036: NOT
74037: IFFALSE 74041
// exit ;
74039: GO 74064
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74041: LD_ADDR_VAR 0 2
74045: PUSH
74046: LD_VAR 0 1
74050: PPUSH
74051: CALL_OW 254
74055: PUSH
74056: LD_INT 3
74058: PLUS
74059: PUSH
74060: LD_INT 6
74062: MOD
74063: ST_TO_ADDR
// end ;
74064: LD_VAR 0 2
74068: RET
// export function ReverseArray ( array ) ; var i ; begin
74069: LD_INT 0
74071: PPUSH
74072: PPUSH
// if not array then
74073: LD_VAR 0 1
74077: NOT
74078: IFFALSE 74082
// exit ;
74080: GO 74137
// result := [ ] ;
74082: LD_ADDR_VAR 0 2
74086: PUSH
74087: EMPTY
74088: ST_TO_ADDR
// for i := array downto 1 do
74089: LD_ADDR_VAR 0 3
74093: PUSH
74094: DOUBLE
74095: LD_VAR 0 1
74099: INC
74100: ST_TO_ADDR
74101: LD_INT 1
74103: PUSH
74104: FOR_DOWNTO
74105: IFFALSE 74135
// result := Join ( result , array [ i ] ) ;
74107: LD_ADDR_VAR 0 2
74111: PUSH
74112: LD_VAR 0 2
74116: PPUSH
74117: LD_VAR 0 1
74121: PUSH
74122: LD_VAR 0 3
74126: ARRAY
74127: PPUSH
74128: CALL 78989 0 2
74132: ST_TO_ADDR
74133: GO 74104
74135: POP
74136: POP
// end ;
74137: LD_VAR 0 2
74141: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
74142: LD_INT 0
74144: PPUSH
74145: PPUSH
74146: PPUSH
74147: PPUSH
74148: PPUSH
74149: PPUSH
// if not unit or not hexes then
74150: LD_VAR 0 1
74154: NOT
74155: IFTRUE 74164
74157: PUSH
74158: LD_VAR 0 2
74162: NOT
74163: OR
74164: IFFALSE 74168
// exit ;
74166: GO 74291
// dist := 9999 ;
74168: LD_ADDR_VAR 0 5
74172: PUSH
74173: LD_INT 9999
74175: ST_TO_ADDR
// for i = 1 to hexes do
74176: LD_ADDR_VAR 0 4
74180: PUSH
74181: DOUBLE
74182: LD_INT 1
74184: DEC
74185: ST_TO_ADDR
74186: LD_VAR 0 2
74190: PUSH
74191: FOR_TO
74192: IFFALSE 74279
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74194: LD_ADDR_VAR 0 6
74198: PUSH
74199: LD_VAR 0 1
74203: PPUSH
74204: LD_VAR 0 2
74208: PUSH
74209: LD_VAR 0 4
74213: ARRAY
74214: PUSH
74215: LD_INT 1
74217: ARRAY
74218: PPUSH
74219: LD_VAR 0 2
74223: PUSH
74224: LD_VAR 0 4
74228: ARRAY
74229: PUSH
74230: LD_INT 2
74232: ARRAY
74233: PPUSH
74234: CALL_OW 297
74238: ST_TO_ADDR
// if tdist < dist then
74239: LD_VAR 0 6
74243: PUSH
74244: LD_VAR 0 5
74248: LESS
74249: IFFALSE 74277
// begin hex := hexes [ i ] ;
74251: LD_ADDR_VAR 0 8
74255: PUSH
74256: LD_VAR 0 2
74260: PUSH
74261: LD_VAR 0 4
74265: ARRAY
74266: ST_TO_ADDR
// dist := tdist ;
74267: LD_ADDR_VAR 0 5
74271: PUSH
74272: LD_VAR 0 6
74276: ST_TO_ADDR
// end ; end ;
74277: GO 74191
74279: POP
74280: POP
// result := hex ;
74281: LD_ADDR_VAR 0 3
74285: PUSH
74286: LD_VAR 0 8
74290: ST_TO_ADDR
// end ;
74291: LD_VAR 0 3
74295: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74296: LD_INT 0
74298: PPUSH
74299: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74300: LD_VAR 0 1
74304: NOT
74305: IFTRUE 74344
74307: PUSH
74308: LD_VAR 0 1
74312: PUSH
74313: LD_INT 21
74315: PUSH
74316: LD_INT 2
74318: PUSH
74319: EMPTY
74320: LIST
74321: LIST
74322: PUSH
74323: LD_INT 23
74325: PUSH
74326: LD_INT 2
74328: PUSH
74329: EMPTY
74330: LIST
74331: LIST
74332: PUSH
74333: EMPTY
74334: LIST
74335: LIST
74336: PPUSH
74337: CALL_OW 69
74341: IN
74342: NOT
74343: OR
74344: IFFALSE 74348
// exit ;
74346: GO 74395
// for i = 1 to 3 do
74348: LD_ADDR_VAR 0 3
74352: PUSH
74353: DOUBLE
74354: LD_INT 1
74356: DEC
74357: ST_TO_ADDR
74358: LD_INT 3
74360: PUSH
74361: FOR_TO
74362: IFFALSE 74393
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74364: LD_VAR 0 1
74368: PPUSH
74369: CALL_OW 250
74373: PPUSH
74374: LD_VAR 0 1
74378: PPUSH
74379: CALL_OW 251
74383: PPUSH
74384: LD_INT 1
74386: PPUSH
74387: CALL_OW 453
74391: GO 74361
74393: POP
74394: POP
// end ;
74395: LD_VAR 0 2
74399: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74400: LD_INT 0
74402: PPUSH
74403: PPUSH
74404: PPUSH
74405: PPUSH
74406: PPUSH
74407: PPUSH
// if not unit or not enemy_unit then
74408: LD_VAR 0 1
74412: NOT
74413: IFTRUE 74422
74415: PUSH
74416: LD_VAR 0 2
74420: NOT
74421: OR
74422: IFFALSE 74426
// exit ;
74424: GO 74907
// if GetLives ( i ) < 250 then
74426: LD_VAR 0 4
74430: PPUSH
74431: CALL_OW 256
74435: PUSH
74436: LD_INT 250
74438: LESS
74439: IFFALSE 74452
// begin ComAutodestruct ( i ) ;
74441: LD_VAR 0 4
74445: PPUSH
74446: CALL 74296 0 1
// exit ;
74450: GO 74907
// end ; x := GetX ( enemy_unit ) ;
74452: LD_ADDR_VAR 0 7
74456: PUSH
74457: LD_VAR 0 2
74461: PPUSH
74462: CALL_OW 250
74466: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74467: LD_ADDR_VAR 0 8
74471: PUSH
74472: LD_VAR 0 2
74476: PPUSH
74477: CALL_OW 251
74481: ST_TO_ADDR
// if not x or not y then
74482: LD_VAR 0 7
74486: NOT
74487: IFTRUE 74496
74489: PUSH
74490: LD_VAR 0 8
74494: NOT
74495: OR
74496: IFFALSE 74500
// exit ;
74498: GO 74907
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74500: LD_ADDR_VAR 0 6
74504: PUSH
74505: LD_VAR 0 7
74509: PPUSH
74510: LD_INT 0
74512: PPUSH
74513: LD_INT 4
74515: PPUSH
74516: CALL_OW 272
74520: PUSH
74521: LD_VAR 0 8
74525: PPUSH
74526: LD_INT 0
74528: PPUSH
74529: LD_INT 4
74531: PPUSH
74532: CALL_OW 273
74536: PUSH
74537: EMPTY
74538: LIST
74539: LIST
74540: PUSH
74541: LD_VAR 0 7
74545: PPUSH
74546: LD_INT 1
74548: PPUSH
74549: LD_INT 4
74551: PPUSH
74552: CALL_OW 272
74556: PUSH
74557: LD_VAR 0 8
74561: PPUSH
74562: LD_INT 1
74564: PPUSH
74565: LD_INT 4
74567: PPUSH
74568: CALL_OW 273
74572: PUSH
74573: EMPTY
74574: LIST
74575: LIST
74576: PUSH
74577: LD_VAR 0 7
74581: PPUSH
74582: LD_INT 2
74584: PPUSH
74585: LD_INT 4
74587: PPUSH
74588: CALL_OW 272
74592: PUSH
74593: LD_VAR 0 8
74597: PPUSH
74598: LD_INT 2
74600: PPUSH
74601: LD_INT 4
74603: PPUSH
74604: CALL_OW 273
74608: PUSH
74609: EMPTY
74610: LIST
74611: LIST
74612: PUSH
74613: LD_VAR 0 7
74617: PPUSH
74618: LD_INT 3
74620: PPUSH
74621: LD_INT 4
74623: PPUSH
74624: CALL_OW 272
74628: PUSH
74629: LD_VAR 0 8
74633: PPUSH
74634: LD_INT 3
74636: PPUSH
74637: LD_INT 4
74639: PPUSH
74640: CALL_OW 273
74644: PUSH
74645: EMPTY
74646: LIST
74647: LIST
74648: PUSH
74649: LD_VAR 0 7
74653: PPUSH
74654: LD_INT 4
74656: PPUSH
74657: LD_INT 4
74659: PPUSH
74660: CALL_OW 272
74664: PUSH
74665: LD_VAR 0 8
74669: PPUSH
74670: LD_INT 4
74672: PPUSH
74673: LD_INT 4
74675: PPUSH
74676: CALL_OW 273
74680: PUSH
74681: EMPTY
74682: LIST
74683: LIST
74684: PUSH
74685: LD_VAR 0 7
74689: PPUSH
74690: LD_INT 5
74692: PPUSH
74693: LD_INT 4
74695: PPUSH
74696: CALL_OW 272
74700: PUSH
74701: LD_VAR 0 8
74705: PPUSH
74706: LD_INT 5
74708: PPUSH
74709: LD_INT 4
74711: PPUSH
74712: CALL_OW 273
74716: PUSH
74717: EMPTY
74718: LIST
74719: LIST
74720: PUSH
74721: EMPTY
74722: LIST
74723: LIST
74724: LIST
74725: LIST
74726: LIST
74727: LIST
74728: ST_TO_ADDR
// for i = tmp downto 1 do
74729: LD_ADDR_VAR 0 4
74733: PUSH
74734: DOUBLE
74735: LD_VAR 0 6
74739: INC
74740: ST_TO_ADDR
74741: LD_INT 1
74743: PUSH
74744: FOR_DOWNTO
74745: IFFALSE 74848
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74747: LD_VAR 0 6
74751: PUSH
74752: LD_VAR 0 4
74756: ARRAY
74757: PUSH
74758: LD_INT 1
74760: ARRAY
74761: PPUSH
74762: LD_VAR 0 6
74766: PUSH
74767: LD_VAR 0 4
74771: ARRAY
74772: PUSH
74773: LD_INT 2
74775: ARRAY
74776: PPUSH
74777: CALL_OW 488
74781: NOT
74782: IFTRUE 74824
74784: PUSH
74785: LD_VAR 0 6
74789: PUSH
74790: LD_VAR 0 4
74794: ARRAY
74795: PUSH
74796: LD_INT 1
74798: ARRAY
74799: PPUSH
74800: LD_VAR 0 6
74804: PUSH
74805: LD_VAR 0 4
74809: ARRAY
74810: PUSH
74811: LD_INT 2
74813: ARRAY
74814: PPUSH
74815: CALL_OW 428
74819: PUSH
74820: LD_INT 0
74822: NONEQUAL
74823: OR
74824: IFFALSE 74846
// tmp := Delete ( tmp , i ) ;
74826: LD_ADDR_VAR 0 6
74830: PUSH
74831: LD_VAR 0 6
74835: PPUSH
74836: LD_VAR 0 4
74840: PPUSH
74841: CALL_OW 3
74845: ST_TO_ADDR
74846: GO 74744
74848: POP
74849: POP
// j := GetClosestHex ( unit , tmp ) ;
74850: LD_ADDR_VAR 0 5
74854: PUSH
74855: LD_VAR 0 1
74859: PPUSH
74860: LD_VAR 0 6
74864: PPUSH
74865: CALL 74142 0 2
74869: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74870: LD_VAR 0 1
74874: PPUSH
74875: LD_VAR 0 5
74879: PUSH
74880: LD_INT 1
74882: ARRAY
74883: PPUSH
74884: LD_VAR 0 5
74888: PUSH
74889: LD_INT 2
74891: ARRAY
74892: PPUSH
74893: CALL_OW 111
// result := j ;
74897: LD_ADDR_VAR 0 3
74901: PUSH
74902: LD_VAR 0 5
74906: ST_TO_ADDR
// end ;
74907: LD_VAR 0 3
74911: RET
// export function PrepareApemanSoldier ( ) ; begin
74912: LD_INT 0
74914: PPUSH
// uc_nation := 0 ;
74915: LD_ADDR_OWVAR 21
74919: PUSH
74920: LD_INT 0
74922: ST_TO_ADDR
// hc_sex := sex_male ;
74923: LD_ADDR_OWVAR 27
74927: PUSH
74928: LD_INT 1
74930: ST_TO_ADDR
// hc_name :=  ;
74931: LD_ADDR_OWVAR 26
74935: PUSH
74936: LD_STRING 
74938: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74939: LD_ADDR_OWVAR 28
74943: PUSH
74944: LD_INT 15
74946: ST_TO_ADDR
// hc_gallery :=  ;
74947: LD_ADDR_OWVAR 33
74951: PUSH
74952: LD_STRING 
74954: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74955: LD_ADDR_OWVAR 31
74959: PUSH
74960: LD_INT 0
74962: PPUSH
74963: LD_INT 3
74965: PPUSH
74966: CALL_OW 12
74970: PUSH
74971: LD_INT 0
74973: PPUSH
74974: LD_INT 3
74976: PPUSH
74977: CALL_OW 12
74981: PUSH
74982: LD_INT 0
74984: PUSH
74985: LD_INT 0
74987: PUSH
74988: EMPTY
74989: LIST
74990: LIST
74991: LIST
74992: LIST
74993: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
74994: LD_ADDR_OWVAR 29
74998: PUSH
74999: LD_INT 10
75001: PUSH
75002: LD_INT 12
75004: PUSH
75005: EMPTY
75006: LIST
75007: LIST
75008: ST_TO_ADDR
// end ;
75009: LD_VAR 0 1
75013: RET
// export function PrepareApemanEngineer ( ) ; begin
75014: LD_INT 0
75016: PPUSH
// uc_nation := 0 ;
75017: LD_ADDR_OWVAR 21
75021: PUSH
75022: LD_INT 0
75024: ST_TO_ADDR
// hc_sex := sex_male ;
75025: LD_ADDR_OWVAR 27
75029: PUSH
75030: LD_INT 1
75032: ST_TO_ADDR
// hc_name :=  ;
75033: LD_ADDR_OWVAR 26
75037: PUSH
75038: LD_STRING 
75040: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
75041: LD_ADDR_OWVAR 28
75045: PUSH
75046: LD_INT 16
75048: ST_TO_ADDR
// hc_gallery :=  ;
75049: LD_ADDR_OWVAR 33
75053: PUSH
75054: LD_STRING 
75056: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75057: LD_ADDR_OWVAR 31
75061: PUSH
75062: LD_INT 0
75064: PPUSH
75065: LD_INT 3
75067: PPUSH
75068: CALL_OW 12
75072: PUSH
75073: LD_INT 0
75075: PPUSH
75076: LD_INT 3
75078: PPUSH
75079: CALL_OW 12
75083: PUSH
75084: LD_INT 0
75086: PUSH
75087: LD_INT 0
75089: PUSH
75090: EMPTY
75091: LIST
75092: LIST
75093: LIST
75094: LIST
75095: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
75096: LD_ADDR_OWVAR 29
75100: PUSH
75101: LD_INT 10
75103: PUSH
75104: LD_INT 12
75106: PUSH
75107: EMPTY
75108: LIST
75109: LIST
75110: ST_TO_ADDR
// end ;
75111: LD_VAR 0 1
75115: RET
// export function PrepareApeman ( agressivity ) ; begin
75116: LD_INT 0
75118: PPUSH
// uc_side := 0 ;
75119: LD_ADDR_OWVAR 20
75123: PUSH
75124: LD_INT 0
75126: ST_TO_ADDR
// uc_nation := 0 ;
75127: LD_ADDR_OWVAR 21
75131: PUSH
75132: LD_INT 0
75134: ST_TO_ADDR
// hc_sex := sex_male ;
75135: LD_ADDR_OWVAR 27
75139: PUSH
75140: LD_INT 1
75142: ST_TO_ADDR
// hc_class := class_apeman ;
75143: LD_ADDR_OWVAR 28
75147: PUSH
75148: LD_INT 12
75150: ST_TO_ADDR
// hc_gallery :=  ;
75151: LD_ADDR_OWVAR 33
75155: PUSH
75156: LD_STRING 
75158: ST_TO_ADDR
// hc_name :=  ;
75159: LD_ADDR_OWVAR 26
75163: PUSH
75164: LD_STRING 
75166: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
75167: LD_ADDR_OWVAR 29
75171: PUSH
75172: LD_INT 10
75174: PUSH
75175: LD_INT 12
75177: PUSH
75178: EMPTY
75179: LIST
75180: LIST
75181: ST_TO_ADDR
// if agressivity = 0 then
75182: LD_VAR 0 1
75186: PUSH
75187: LD_INT 0
75189: EQUAL
75190: IFFALSE 75202
// hc_agressivity := 0 else
75192: LD_ADDR_OWVAR 35
75196: PUSH
75197: LD_INT 0
75199: ST_TO_ADDR
75200: GO 75223
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75202: LD_ADDR_OWVAR 35
75206: PUSH
75207: LD_VAR 0 1
75211: NEG
75212: PPUSH
75213: LD_VAR 0 1
75217: PPUSH
75218: CALL_OW 12
75222: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75223: LD_ADDR_OWVAR 31
75227: PUSH
75228: LD_INT 0
75230: PPUSH
75231: LD_INT 3
75233: PPUSH
75234: CALL_OW 12
75238: PUSH
75239: LD_INT 0
75241: PPUSH
75242: LD_INT 3
75244: PPUSH
75245: CALL_OW 12
75249: PUSH
75250: LD_INT 0
75252: PUSH
75253: LD_INT 0
75255: PUSH
75256: EMPTY
75257: LIST
75258: LIST
75259: LIST
75260: LIST
75261: ST_TO_ADDR
// end ;
75262: LD_VAR 0 2
75266: RET
// export function PrepareTiger ( agressivity ) ; begin
75267: LD_INT 0
75269: PPUSH
// uc_side := 0 ;
75270: LD_ADDR_OWVAR 20
75274: PUSH
75275: LD_INT 0
75277: ST_TO_ADDR
// uc_nation := 0 ;
75278: LD_ADDR_OWVAR 21
75282: PUSH
75283: LD_INT 0
75285: ST_TO_ADDR
// InitHc ;
75286: CALL_OW 19
// hc_class := class_tiger ;
75290: LD_ADDR_OWVAR 28
75294: PUSH
75295: LD_INT 14
75297: ST_TO_ADDR
// hc_gallery :=  ;
75298: LD_ADDR_OWVAR 33
75302: PUSH
75303: LD_STRING 
75305: ST_TO_ADDR
// hc_name :=  ;
75306: LD_ADDR_OWVAR 26
75310: PUSH
75311: LD_STRING 
75313: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75314: LD_ADDR_OWVAR 35
75318: PUSH
75319: LD_VAR 0 1
75323: NEG
75324: PPUSH
75325: LD_VAR 0 1
75329: PPUSH
75330: CALL_OW 12
75334: ST_TO_ADDR
// end ;
75335: LD_VAR 0 2
75339: RET
// export function PrepareEnchidna ( ) ; begin
75340: LD_INT 0
75342: PPUSH
// uc_side := 0 ;
75343: LD_ADDR_OWVAR 20
75347: PUSH
75348: LD_INT 0
75350: ST_TO_ADDR
// uc_nation := 0 ;
75351: LD_ADDR_OWVAR 21
75355: PUSH
75356: LD_INT 0
75358: ST_TO_ADDR
// InitHc ;
75359: CALL_OW 19
// hc_class := class_baggie ;
75363: LD_ADDR_OWVAR 28
75367: PUSH
75368: LD_INT 13
75370: ST_TO_ADDR
// hc_gallery :=  ;
75371: LD_ADDR_OWVAR 33
75375: PUSH
75376: LD_STRING 
75378: ST_TO_ADDR
// hc_name :=  ;
75379: LD_ADDR_OWVAR 26
75383: PUSH
75384: LD_STRING 
75386: ST_TO_ADDR
// end ;
75387: LD_VAR 0 1
75391: RET
// export function PrepareFrog ( ) ; begin
75392: LD_INT 0
75394: PPUSH
// uc_side := 0 ;
75395: LD_ADDR_OWVAR 20
75399: PUSH
75400: LD_INT 0
75402: ST_TO_ADDR
// uc_nation := 0 ;
75403: LD_ADDR_OWVAR 21
75407: PUSH
75408: LD_INT 0
75410: ST_TO_ADDR
// InitHc ;
75411: CALL_OW 19
// hc_class := class_frog ;
75415: LD_ADDR_OWVAR 28
75419: PUSH
75420: LD_INT 19
75422: ST_TO_ADDR
// hc_gallery :=  ;
75423: LD_ADDR_OWVAR 33
75427: PUSH
75428: LD_STRING 
75430: ST_TO_ADDR
// hc_name :=  ;
75431: LD_ADDR_OWVAR 26
75435: PUSH
75436: LD_STRING 
75438: ST_TO_ADDR
// end ;
75439: LD_VAR 0 1
75443: RET
// export function PrepareFish ( ) ; begin
75444: LD_INT 0
75446: PPUSH
// uc_side := 0 ;
75447: LD_ADDR_OWVAR 20
75451: PUSH
75452: LD_INT 0
75454: ST_TO_ADDR
// uc_nation := 0 ;
75455: LD_ADDR_OWVAR 21
75459: PUSH
75460: LD_INT 0
75462: ST_TO_ADDR
// InitHc ;
75463: CALL_OW 19
// hc_class := class_fish ;
75467: LD_ADDR_OWVAR 28
75471: PUSH
75472: LD_INT 20
75474: ST_TO_ADDR
// hc_gallery :=  ;
75475: LD_ADDR_OWVAR 33
75479: PUSH
75480: LD_STRING 
75482: ST_TO_ADDR
// hc_name :=  ;
75483: LD_ADDR_OWVAR 26
75487: PUSH
75488: LD_STRING 
75490: ST_TO_ADDR
// end ;
75491: LD_VAR 0 1
75495: RET
// export function PrepareBird ( ) ; begin
75496: LD_INT 0
75498: PPUSH
// uc_side := 0 ;
75499: LD_ADDR_OWVAR 20
75503: PUSH
75504: LD_INT 0
75506: ST_TO_ADDR
// uc_nation := 0 ;
75507: LD_ADDR_OWVAR 21
75511: PUSH
75512: LD_INT 0
75514: ST_TO_ADDR
// InitHc ;
75515: CALL_OW 19
// hc_class := class_phororhacos ;
75519: LD_ADDR_OWVAR 28
75523: PUSH
75524: LD_INT 18
75526: ST_TO_ADDR
// hc_gallery :=  ;
75527: LD_ADDR_OWVAR 33
75531: PUSH
75532: LD_STRING 
75534: ST_TO_ADDR
// hc_name :=  ;
75535: LD_ADDR_OWVAR 26
75539: PUSH
75540: LD_STRING 
75542: ST_TO_ADDR
// end ;
75543: LD_VAR 0 1
75547: RET
// export function PrepareHorse ( ) ; begin
75548: LD_INT 0
75550: PPUSH
// uc_side := 0 ;
75551: LD_ADDR_OWVAR 20
75555: PUSH
75556: LD_INT 0
75558: ST_TO_ADDR
// uc_nation := 0 ;
75559: LD_ADDR_OWVAR 21
75563: PUSH
75564: LD_INT 0
75566: ST_TO_ADDR
// InitHc ;
75567: CALL_OW 19
// hc_class := class_horse ;
75571: LD_ADDR_OWVAR 28
75575: PUSH
75576: LD_INT 21
75578: ST_TO_ADDR
// hc_gallery :=  ;
75579: LD_ADDR_OWVAR 33
75583: PUSH
75584: LD_STRING 
75586: ST_TO_ADDR
// hc_name :=  ;
75587: LD_ADDR_OWVAR 26
75591: PUSH
75592: LD_STRING 
75594: ST_TO_ADDR
// end ;
75595: LD_VAR 0 1
75599: RET
// export function PrepareMastodont ( ) ; begin
75600: LD_INT 0
75602: PPUSH
// uc_side := 0 ;
75603: LD_ADDR_OWVAR 20
75607: PUSH
75608: LD_INT 0
75610: ST_TO_ADDR
// uc_nation := 0 ;
75611: LD_ADDR_OWVAR 21
75615: PUSH
75616: LD_INT 0
75618: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75619: LD_ADDR_OWVAR 37
75623: PUSH
75624: LD_INT 31
75626: ST_TO_ADDR
// vc_control := control_rider ;
75627: LD_ADDR_OWVAR 38
75631: PUSH
75632: LD_INT 4
75634: ST_TO_ADDR
// end ;
75635: LD_VAR 0 1
75639: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75640: LD_INT 0
75642: PPUSH
75643: PPUSH
75644: PPUSH
// uc_side = 0 ;
75645: LD_ADDR_OWVAR 20
75649: PUSH
75650: LD_INT 0
75652: ST_TO_ADDR
// uc_nation = 0 ;
75653: LD_ADDR_OWVAR 21
75657: PUSH
75658: LD_INT 0
75660: ST_TO_ADDR
// InitHc_All ( ) ;
75661: CALL_OW 584
// InitVc ;
75665: CALL_OW 20
// if mastodonts then
75669: LD_VAR 0 6
75673: IFFALSE 75740
// for i = 1 to mastodonts do
75675: LD_ADDR_VAR 0 11
75679: PUSH
75680: DOUBLE
75681: LD_INT 1
75683: DEC
75684: ST_TO_ADDR
75685: LD_VAR 0 6
75689: PUSH
75690: FOR_TO
75691: IFFALSE 75738
// begin vc_chassis := 31 ;
75693: LD_ADDR_OWVAR 37
75697: PUSH
75698: LD_INT 31
75700: ST_TO_ADDR
// vc_control := control_rider ;
75701: LD_ADDR_OWVAR 38
75705: PUSH
75706: LD_INT 4
75708: ST_TO_ADDR
// animal := CreateVehicle ;
75709: LD_ADDR_VAR 0 12
75713: PUSH
75714: CALL_OW 45
75718: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75719: LD_VAR 0 12
75723: PPUSH
75724: LD_VAR 0 8
75728: PPUSH
75729: LD_INT 0
75731: PPUSH
75732: CALL 77882 0 3
// end ;
75736: GO 75690
75738: POP
75739: POP
// if horses then
75740: LD_VAR 0 5
75744: IFFALSE 75811
// for i = 1 to horses do
75746: LD_ADDR_VAR 0 11
75750: PUSH
75751: DOUBLE
75752: LD_INT 1
75754: DEC
75755: ST_TO_ADDR
75756: LD_VAR 0 5
75760: PUSH
75761: FOR_TO
75762: IFFALSE 75809
// begin hc_class := 21 ;
75764: LD_ADDR_OWVAR 28
75768: PUSH
75769: LD_INT 21
75771: ST_TO_ADDR
// hc_gallery :=  ;
75772: LD_ADDR_OWVAR 33
75776: PUSH
75777: LD_STRING 
75779: ST_TO_ADDR
// animal := CreateHuman ;
75780: LD_ADDR_VAR 0 12
75784: PUSH
75785: CALL_OW 44
75789: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75790: LD_VAR 0 12
75794: PPUSH
75795: LD_VAR 0 8
75799: PPUSH
75800: LD_INT 0
75802: PPUSH
75803: CALL 77882 0 3
// end ;
75807: GO 75761
75809: POP
75810: POP
// if birds then
75811: LD_VAR 0 1
75815: IFFALSE 75882
// for i = 1 to birds do
75817: LD_ADDR_VAR 0 11
75821: PUSH
75822: DOUBLE
75823: LD_INT 1
75825: DEC
75826: ST_TO_ADDR
75827: LD_VAR 0 1
75831: PUSH
75832: FOR_TO
75833: IFFALSE 75880
// begin hc_class := 18 ;
75835: LD_ADDR_OWVAR 28
75839: PUSH
75840: LD_INT 18
75842: ST_TO_ADDR
// hc_gallery =  ;
75843: LD_ADDR_OWVAR 33
75847: PUSH
75848: LD_STRING 
75850: ST_TO_ADDR
// animal := CreateHuman ;
75851: LD_ADDR_VAR 0 12
75855: PUSH
75856: CALL_OW 44
75860: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75861: LD_VAR 0 12
75865: PPUSH
75866: LD_VAR 0 8
75870: PPUSH
75871: LD_INT 0
75873: PPUSH
75874: CALL 77882 0 3
// end ;
75878: GO 75832
75880: POP
75881: POP
// if tigers then
75882: LD_VAR 0 2
75886: IFFALSE 75970
// for i = 1 to tigers do
75888: LD_ADDR_VAR 0 11
75892: PUSH
75893: DOUBLE
75894: LD_INT 1
75896: DEC
75897: ST_TO_ADDR
75898: LD_VAR 0 2
75902: PUSH
75903: FOR_TO
75904: IFFALSE 75968
// begin hc_class = class_tiger ;
75906: LD_ADDR_OWVAR 28
75910: PUSH
75911: LD_INT 14
75913: ST_TO_ADDR
// hc_gallery =  ;
75914: LD_ADDR_OWVAR 33
75918: PUSH
75919: LD_STRING 
75921: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75922: LD_ADDR_OWVAR 35
75926: PUSH
75927: LD_INT 7
75929: NEG
75930: PPUSH
75931: LD_INT 7
75933: PPUSH
75934: CALL_OW 12
75938: ST_TO_ADDR
// animal := CreateHuman ;
75939: LD_ADDR_VAR 0 12
75943: PUSH
75944: CALL_OW 44
75948: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75949: LD_VAR 0 12
75953: PPUSH
75954: LD_VAR 0 8
75958: PPUSH
75959: LD_INT 0
75961: PPUSH
75962: CALL 77882 0 3
// end ;
75966: GO 75903
75968: POP
75969: POP
// if apemans then
75970: LD_VAR 0 3
75974: IFFALSE 76097
// for i = 1 to apemans do
75976: LD_ADDR_VAR 0 11
75980: PUSH
75981: DOUBLE
75982: LD_INT 1
75984: DEC
75985: ST_TO_ADDR
75986: LD_VAR 0 3
75990: PUSH
75991: FOR_TO
75992: IFFALSE 76095
// begin hc_class = class_apeman ;
75994: LD_ADDR_OWVAR 28
75998: PUSH
75999: LD_INT 12
76001: ST_TO_ADDR
// hc_gallery =  ;
76002: LD_ADDR_OWVAR 33
76006: PUSH
76007: LD_STRING 
76009: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
76010: LD_ADDR_OWVAR 35
76014: PUSH
76015: LD_INT 2
76017: NEG
76018: PPUSH
76019: LD_INT 2
76021: PPUSH
76022: CALL_OW 12
76026: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
76027: LD_ADDR_OWVAR 31
76031: PUSH
76032: LD_INT 1
76034: PPUSH
76035: LD_INT 3
76037: PPUSH
76038: CALL_OW 12
76042: PUSH
76043: LD_INT 1
76045: PPUSH
76046: LD_INT 3
76048: PPUSH
76049: CALL_OW 12
76053: PUSH
76054: LD_INT 0
76056: PUSH
76057: LD_INT 0
76059: PUSH
76060: EMPTY
76061: LIST
76062: LIST
76063: LIST
76064: LIST
76065: ST_TO_ADDR
// animal := CreateHuman ;
76066: LD_ADDR_VAR 0 12
76070: PUSH
76071: CALL_OW 44
76075: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76076: LD_VAR 0 12
76080: PPUSH
76081: LD_VAR 0 8
76085: PPUSH
76086: LD_INT 0
76088: PPUSH
76089: CALL 77882 0 3
// end ;
76093: GO 75991
76095: POP
76096: POP
// if enchidnas then
76097: LD_VAR 0 4
76101: IFFALSE 76168
// for i = 1 to enchidnas do
76103: LD_ADDR_VAR 0 11
76107: PUSH
76108: DOUBLE
76109: LD_INT 1
76111: DEC
76112: ST_TO_ADDR
76113: LD_VAR 0 4
76117: PUSH
76118: FOR_TO
76119: IFFALSE 76166
// begin hc_class = 13 ;
76121: LD_ADDR_OWVAR 28
76125: PUSH
76126: LD_INT 13
76128: ST_TO_ADDR
// hc_gallery =  ;
76129: LD_ADDR_OWVAR 33
76133: PUSH
76134: LD_STRING 
76136: ST_TO_ADDR
// animal := CreateHuman ;
76137: LD_ADDR_VAR 0 12
76141: PUSH
76142: CALL_OW 44
76146: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76147: LD_VAR 0 12
76151: PPUSH
76152: LD_VAR 0 8
76156: PPUSH
76157: LD_INT 0
76159: PPUSH
76160: CALL 77882 0 3
// end ;
76164: GO 76118
76166: POP
76167: POP
// if fishes then
76168: LD_VAR 0 7
76172: IFFALSE 76239
// for i = 1 to fishes do
76174: LD_ADDR_VAR 0 11
76178: PUSH
76179: DOUBLE
76180: LD_INT 1
76182: DEC
76183: ST_TO_ADDR
76184: LD_VAR 0 7
76188: PUSH
76189: FOR_TO
76190: IFFALSE 76237
// begin hc_class = 20 ;
76192: LD_ADDR_OWVAR 28
76196: PUSH
76197: LD_INT 20
76199: ST_TO_ADDR
// hc_gallery =  ;
76200: LD_ADDR_OWVAR 33
76204: PUSH
76205: LD_STRING 
76207: ST_TO_ADDR
// animal := CreateHuman ;
76208: LD_ADDR_VAR 0 12
76212: PUSH
76213: CALL_OW 44
76217: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
76218: LD_VAR 0 12
76222: PPUSH
76223: LD_VAR 0 9
76227: PPUSH
76228: LD_INT 0
76230: PPUSH
76231: CALL 77882 0 3
// end ;
76235: GO 76189
76237: POP
76238: POP
// end ;
76239: LD_VAR 0 10
76243: RET
// export function WantHeal ( sci , unit ) ; begin
76244: LD_INT 0
76246: PPUSH
// if GetTaskList ( sci ) > 0 then
76247: LD_VAR 0 1
76251: PPUSH
76252: CALL_OW 437
76256: PUSH
76257: LD_INT 0
76259: GREATER
76260: IFFALSE 76332
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
76262: LD_VAR 0 1
76266: PPUSH
76267: CALL_OW 437
76271: PUSH
76272: LD_INT 1
76274: ARRAY
76275: PUSH
76276: LD_INT 1
76278: ARRAY
76279: PUSH
76280: LD_STRING l
76282: EQUAL
76283: IFFALSE 76310
76285: PUSH
76286: LD_VAR 0 1
76290: PPUSH
76291: CALL_OW 437
76295: PUSH
76296: LD_INT 1
76298: ARRAY
76299: PUSH
76300: LD_INT 4
76302: ARRAY
76303: PUSH
76304: LD_VAR 0 2
76308: EQUAL
76309: AND
76310: IFFALSE 76322
// result := true else
76312: LD_ADDR_VAR 0 3
76316: PUSH
76317: LD_INT 1
76319: ST_TO_ADDR
76320: GO 76330
// result := false ;
76322: LD_ADDR_VAR 0 3
76326: PUSH
76327: LD_INT 0
76329: ST_TO_ADDR
// end else
76330: GO 76340
// result := false ;
76332: LD_ADDR_VAR 0 3
76336: PUSH
76337: LD_INT 0
76339: ST_TO_ADDR
// end ;
76340: LD_VAR 0 3
76344: RET
// export function HealTarget ( sci ) ; begin
76345: LD_INT 0
76347: PPUSH
// if not sci then
76348: LD_VAR 0 1
76352: NOT
76353: IFFALSE 76357
// exit ;
76355: GO 76422
// result := 0 ;
76357: LD_ADDR_VAR 0 2
76361: PUSH
76362: LD_INT 0
76364: ST_TO_ADDR
// if GetTaskList ( sci ) then
76365: LD_VAR 0 1
76369: PPUSH
76370: CALL_OW 437
76374: IFFALSE 76422
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76376: LD_VAR 0 1
76380: PPUSH
76381: CALL_OW 437
76385: PUSH
76386: LD_INT 1
76388: ARRAY
76389: PUSH
76390: LD_INT 1
76392: ARRAY
76393: PUSH
76394: LD_STRING l
76396: EQUAL
76397: IFFALSE 76422
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
76399: LD_ADDR_VAR 0 2
76403: PUSH
76404: LD_VAR 0 1
76408: PPUSH
76409: CALL_OW 437
76413: PUSH
76414: LD_INT 1
76416: ARRAY
76417: PUSH
76418: LD_INT 4
76420: ARRAY
76421: ST_TO_ADDR
// end ;
76422: LD_VAR 0 2
76426: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
76427: LD_INT 0
76429: PPUSH
76430: PPUSH
76431: PPUSH
76432: PPUSH
// if not base_units then
76433: LD_VAR 0 1
76437: NOT
76438: IFFALSE 76442
// exit ;
76440: GO 76529
// result := false ;
76442: LD_ADDR_VAR 0 2
76446: PUSH
76447: LD_INT 0
76449: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76450: LD_ADDR_VAR 0 5
76454: PUSH
76455: LD_VAR 0 1
76459: PPUSH
76460: LD_INT 21
76462: PUSH
76463: LD_INT 3
76465: PUSH
76466: EMPTY
76467: LIST
76468: LIST
76469: PPUSH
76470: CALL_OW 72
76474: ST_TO_ADDR
// if not tmp then
76475: LD_VAR 0 5
76479: NOT
76480: IFFALSE 76484
// exit ;
76482: GO 76529
// for i in tmp do
76484: LD_ADDR_VAR 0 3
76488: PUSH
76489: LD_VAR 0 5
76493: PUSH
76494: FOR_IN
76495: IFFALSE 76527
// begin result := EnemyInRange ( i , 22 ) ;
76497: LD_ADDR_VAR 0 2
76501: PUSH
76502: LD_VAR 0 3
76506: PPUSH
76507: LD_INT 22
76509: PPUSH
76510: CALL 73944 0 2
76514: ST_TO_ADDR
// if result then
76515: LD_VAR 0 2
76519: IFFALSE 76525
// exit ;
76521: POP
76522: POP
76523: GO 76529
// end ;
76525: GO 76494
76527: POP
76528: POP
// end ;
76529: LD_VAR 0 2
76533: RET
// export function FilterByTag ( units , tag ) ; begin
76534: LD_INT 0
76536: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
76537: LD_ADDR_VAR 0 3
76541: PUSH
76542: LD_VAR 0 1
76546: PPUSH
76547: LD_INT 120
76549: PUSH
76550: LD_VAR 0 2
76554: PUSH
76555: EMPTY
76556: LIST
76557: LIST
76558: PPUSH
76559: CALL_OW 72
76563: ST_TO_ADDR
// end ;
76564: LD_VAR 0 3
76568: RET
// export function IsDriver ( un ) ; begin
76569: LD_INT 0
76571: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76572: LD_ADDR_VAR 0 2
76576: PUSH
76577: LD_VAR 0 1
76581: PUSH
76582: LD_INT 55
76584: PUSH
76585: EMPTY
76586: LIST
76587: PPUSH
76588: CALL_OW 69
76592: IN
76593: ST_TO_ADDR
// end ;
76594: LD_VAR 0 2
76598: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76599: LD_INT 0
76601: PPUSH
76602: PPUSH
// list := [ ] ;
76603: LD_ADDR_VAR 0 5
76607: PUSH
76608: EMPTY
76609: ST_TO_ADDR
// case d of 0 :
76610: LD_VAR 0 3
76614: PUSH
76615: LD_INT 0
76617: DOUBLE
76618: EQUAL
76619: IFTRUE 76623
76621: GO 76756
76623: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76624: LD_ADDR_VAR 0 5
76628: PUSH
76629: LD_VAR 0 1
76633: PUSH
76634: LD_INT 4
76636: MINUS
76637: PUSH
76638: LD_VAR 0 2
76642: PUSH
76643: LD_INT 4
76645: MINUS
76646: PUSH
76647: LD_INT 2
76649: PUSH
76650: EMPTY
76651: LIST
76652: LIST
76653: LIST
76654: PUSH
76655: LD_VAR 0 1
76659: PUSH
76660: LD_INT 3
76662: MINUS
76663: PUSH
76664: LD_VAR 0 2
76668: PUSH
76669: LD_INT 1
76671: PUSH
76672: EMPTY
76673: LIST
76674: LIST
76675: LIST
76676: PUSH
76677: LD_VAR 0 1
76681: PUSH
76682: LD_INT 4
76684: PLUS
76685: PUSH
76686: LD_VAR 0 2
76690: PUSH
76691: LD_INT 4
76693: PUSH
76694: EMPTY
76695: LIST
76696: LIST
76697: LIST
76698: PUSH
76699: LD_VAR 0 1
76703: PUSH
76704: LD_INT 3
76706: PLUS
76707: PUSH
76708: LD_VAR 0 2
76712: PUSH
76713: LD_INT 3
76715: PLUS
76716: PUSH
76717: LD_INT 5
76719: PUSH
76720: EMPTY
76721: LIST
76722: LIST
76723: LIST
76724: PUSH
76725: LD_VAR 0 1
76729: PUSH
76730: LD_VAR 0 2
76734: PUSH
76735: LD_INT 4
76737: PLUS
76738: PUSH
76739: LD_INT 0
76741: PUSH
76742: EMPTY
76743: LIST
76744: LIST
76745: LIST
76746: PUSH
76747: EMPTY
76748: LIST
76749: LIST
76750: LIST
76751: LIST
76752: LIST
76753: ST_TO_ADDR
// end ; 1 :
76754: GO 77454
76756: LD_INT 1
76758: DOUBLE
76759: EQUAL
76760: IFTRUE 76764
76762: GO 76897
76764: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76765: LD_ADDR_VAR 0 5
76769: PUSH
76770: LD_VAR 0 1
76774: PUSH
76775: LD_VAR 0 2
76779: PUSH
76780: LD_INT 4
76782: MINUS
76783: PUSH
76784: LD_INT 3
76786: PUSH
76787: EMPTY
76788: LIST
76789: LIST
76790: LIST
76791: PUSH
76792: LD_VAR 0 1
76796: PUSH
76797: LD_INT 3
76799: MINUS
76800: PUSH
76801: LD_VAR 0 2
76805: PUSH
76806: LD_INT 3
76808: MINUS
76809: PUSH
76810: LD_INT 2
76812: PUSH
76813: EMPTY
76814: LIST
76815: LIST
76816: LIST
76817: PUSH
76818: LD_VAR 0 1
76822: PUSH
76823: LD_INT 4
76825: MINUS
76826: PUSH
76827: LD_VAR 0 2
76831: PUSH
76832: LD_INT 1
76834: PUSH
76835: EMPTY
76836: LIST
76837: LIST
76838: LIST
76839: PUSH
76840: LD_VAR 0 1
76844: PUSH
76845: LD_VAR 0 2
76849: PUSH
76850: LD_INT 3
76852: PLUS
76853: PUSH
76854: LD_INT 0
76856: PUSH
76857: EMPTY
76858: LIST
76859: LIST
76860: LIST
76861: PUSH
76862: LD_VAR 0 1
76866: PUSH
76867: LD_INT 4
76869: PLUS
76870: PUSH
76871: LD_VAR 0 2
76875: PUSH
76876: LD_INT 4
76878: PLUS
76879: PUSH
76880: LD_INT 5
76882: PUSH
76883: EMPTY
76884: LIST
76885: LIST
76886: LIST
76887: PUSH
76888: EMPTY
76889: LIST
76890: LIST
76891: LIST
76892: LIST
76893: LIST
76894: ST_TO_ADDR
// end ; 2 :
76895: GO 77454
76897: LD_INT 2
76899: DOUBLE
76900: EQUAL
76901: IFTRUE 76905
76903: GO 77034
76905: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76906: LD_ADDR_VAR 0 5
76910: PUSH
76911: LD_VAR 0 1
76915: PUSH
76916: LD_VAR 0 2
76920: PUSH
76921: LD_INT 3
76923: MINUS
76924: PUSH
76925: LD_INT 3
76927: PUSH
76928: EMPTY
76929: LIST
76930: LIST
76931: LIST
76932: PUSH
76933: LD_VAR 0 1
76937: PUSH
76938: LD_INT 4
76940: PLUS
76941: PUSH
76942: LD_VAR 0 2
76946: PUSH
76947: LD_INT 4
76949: PUSH
76950: EMPTY
76951: LIST
76952: LIST
76953: LIST
76954: PUSH
76955: LD_VAR 0 1
76959: PUSH
76960: LD_VAR 0 2
76964: PUSH
76965: LD_INT 4
76967: PLUS
76968: PUSH
76969: LD_INT 0
76971: PUSH
76972: EMPTY
76973: LIST
76974: LIST
76975: LIST
76976: PUSH
76977: LD_VAR 0 1
76981: PUSH
76982: LD_INT 3
76984: MINUS
76985: PUSH
76986: LD_VAR 0 2
76990: PUSH
76991: LD_INT 1
76993: PUSH
76994: EMPTY
76995: LIST
76996: LIST
76997: LIST
76998: PUSH
76999: LD_VAR 0 1
77003: PUSH
77004: LD_INT 4
77006: MINUS
77007: PUSH
77008: LD_VAR 0 2
77012: PUSH
77013: LD_INT 4
77015: MINUS
77016: PUSH
77017: LD_INT 2
77019: PUSH
77020: EMPTY
77021: LIST
77022: LIST
77023: LIST
77024: PUSH
77025: EMPTY
77026: LIST
77027: LIST
77028: LIST
77029: LIST
77030: LIST
77031: ST_TO_ADDR
// end ; 3 :
77032: GO 77454
77034: LD_INT 3
77036: DOUBLE
77037: EQUAL
77038: IFTRUE 77042
77040: GO 77175
77042: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
77043: LD_ADDR_VAR 0 5
77047: PUSH
77048: LD_VAR 0 1
77052: PUSH
77053: LD_INT 3
77055: PLUS
77056: PUSH
77057: LD_VAR 0 2
77061: PUSH
77062: LD_INT 4
77064: PUSH
77065: EMPTY
77066: LIST
77067: LIST
77068: LIST
77069: PUSH
77070: LD_VAR 0 1
77074: PUSH
77075: LD_INT 4
77077: PLUS
77078: PUSH
77079: LD_VAR 0 2
77083: PUSH
77084: LD_INT 4
77086: PLUS
77087: PUSH
77088: LD_INT 5
77090: PUSH
77091: EMPTY
77092: LIST
77093: LIST
77094: LIST
77095: PUSH
77096: LD_VAR 0 1
77100: PUSH
77101: LD_INT 4
77103: MINUS
77104: PUSH
77105: LD_VAR 0 2
77109: PUSH
77110: LD_INT 1
77112: PUSH
77113: EMPTY
77114: LIST
77115: LIST
77116: LIST
77117: PUSH
77118: LD_VAR 0 1
77122: PUSH
77123: LD_VAR 0 2
77127: PUSH
77128: LD_INT 4
77130: MINUS
77131: PUSH
77132: LD_INT 3
77134: PUSH
77135: EMPTY
77136: LIST
77137: LIST
77138: LIST
77139: PUSH
77140: LD_VAR 0 1
77144: PUSH
77145: LD_INT 3
77147: MINUS
77148: PUSH
77149: LD_VAR 0 2
77153: PUSH
77154: LD_INT 3
77156: MINUS
77157: PUSH
77158: LD_INT 2
77160: PUSH
77161: EMPTY
77162: LIST
77163: LIST
77164: LIST
77165: PUSH
77166: EMPTY
77167: LIST
77168: LIST
77169: LIST
77170: LIST
77171: LIST
77172: ST_TO_ADDR
// end ; 4 :
77173: GO 77454
77175: LD_INT 4
77177: DOUBLE
77178: EQUAL
77179: IFTRUE 77183
77181: GO 77316
77183: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
77184: LD_ADDR_VAR 0 5
77188: PUSH
77189: LD_VAR 0 1
77193: PUSH
77194: LD_VAR 0 2
77198: PUSH
77199: LD_INT 4
77201: PLUS
77202: PUSH
77203: LD_INT 0
77205: PUSH
77206: EMPTY
77207: LIST
77208: LIST
77209: LIST
77210: PUSH
77211: LD_VAR 0 1
77215: PUSH
77216: LD_INT 3
77218: PLUS
77219: PUSH
77220: LD_VAR 0 2
77224: PUSH
77225: LD_INT 3
77227: PLUS
77228: PUSH
77229: LD_INT 5
77231: PUSH
77232: EMPTY
77233: LIST
77234: LIST
77235: LIST
77236: PUSH
77237: LD_VAR 0 1
77241: PUSH
77242: LD_INT 4
77244: PLUS
77245: PUSH
77246: LD_VAR 0 2
77250: PUSH
77251: LD_INT 4
77253: PUSH
77254: EMPTY
77255: LIST
77256: LIST
77257: LIST
77258: PUSH
77259: LD_VAR 0 1
77263: PUSH
77264: LD_VAR 0 2
77268: PUSH
77269: LD_INT 3
77271: MINUS
77272: PUSH
77273: LD_INT 3
77275: PUSH
77276: EMPTY
77277: LIST
77278: LIST
77279: LIST
77280: PUSH
77281: LD_VAR 0 1
77285: PUSH
77286: LD_INT 4
77288: MINUS
77289: PUSH
77290: LD_VAR 0 2
77294: PUSH
77295: LD_INT 4
77297: MINUS
77298: PUSH
77299: LD_INT 2
77301: PUSH
77302: EMPTY
77303: LIST
77304: LIST
77305: LIST
77306: PUSH
77307: EMPTY
77308: LIST
77309: LIST
77310: LIST
77311: LIST
77312: LIST
77313: ST_TO_ADDR
// end ; 5 :
77314: GO 77454
77316: LD_INT 5
77318: DOUBLE
77319: EQUAL
77320: IFTRUE 77324
77322: GO 77453
77324: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
77325: LD_ADDR_VAR 0 5
77329: PUSH
77330: LD_VAR 0 1
77334: PUSH
77335: LD_INT 4
77337: MINUS
77338: PUSH
77339: LD_VAR 0 2
77343: PUSH
77344: LD_INT 1
77346: PUSH
77347: EMPTY
77348: LIST
77349: LIST
77350: LIST
77351: PUSH
77352: LD_VAR 0 1
77356: PUSH
77357: LD_VAR 0 2
77361: PUSH
77362: LD_INT 4
77364: MINUS
77365: PUSH
77366: LD_INT 3
77368: PUSH
77369: EMPTY
77370: LIST
77371: LIST
77372: LIST
77373: PUSH
77374: LD_VAR 0 1
77378: PUSH
77379: LD_INT 4
77381: PLUS
77382: PUSH
77383: LD_VAR 0 2
77387: PUSH
77388: LD_INT 4
77390: PLUS
77391: PUSH
77392: LD_INT 5
77394: PUSH
77395: EMPTY
77396: LIST
77397: LIST
77398: LIST
77399: PUSH
77400: LD_VAR 0 1
77404: PUSH
77405: LD_INT 3
77407: PLUS
77408: PUSH
77409: LD_VAR 0 2
77413: PUSH
77414: LD_INT 4
77416: PUSH
77417: EMPTY
77418: LIST
77419: LIST
77420: LIST
77421: PUSH
77422: LD_VAR 0 1
77426: PUSH
77427: LD_VAR 0 2
77431: PUSH
77432: LD_INT 3
77434: PLUS
77435: PUSH
77436: LD_INT 0
77438: PUSH
77439: EMPTY
77440: LIST
77441: LIST
77442: LIST
77443: PUSH
77444: EMPTY
77445: LIST
77446: LIST
77447: LIST
77448: LIST
77449: LIST
77450: ST_TO_ADDR
// end ; end ;
77451: GO 77454
77453: POP
// result := list ;
77454: LD_ADDR_VAR 0 4
77458: PUSH
77459: LD_VAR 0 5
77463: ST_TO_ADDR
// end ;
77464: LD_VAR 0 4
77468: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77469: LD_INT 0
77471: PPUSH
77472: PPUSH
77473: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77474: LD_VAR 0 1
77478: NOT
77479: IFTRUE 77507
77481: PUSH
77482: LD_VAR 0 2
77486: PUSH
77487: LD_INT 1
77489: PUSH
77490: LD_INT 2
77492: PUSH
77493: LD_INT 3
77495: PUSH
77496: LD_INT 4
77498: PUSH
77499: EMPTY
77500: LIST
77501: LIST
77502: LIST
77503: LIST
77504: IN
77505: NOT
77506: OR
77507: IFFALSE 77511
// exit ;
77509: GO 77594
// tmp := [ ] ;
77511: LD_ADDR_VAR 0 5
77515: PUSH
77516: EMPTY
77517: ST_TO_ADDR
// for i in units do
77518: LD_ADDR_VAR 0 4
77522: PUSH
77523: LD_VAR 0 1
77527: PUSH
77528: FOR_IN
77529: IFFALSE 77563
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
77531: LD_ADDR_VAR 0 5
77535: PUSH
77536: LD_VAR 0 5
77540: PPUSH
77541: LD_VAR 0 4
77545: PPUSH
77546: LD_VAR 0 2
77550: PPUSH
77551: CALL_OW 259
77555: PPUSH
77556: CALL 78989 0 2
77560: ST_TO_ADDR
77561: GO 77528
77563: POP
77564: POP
// if not tmp then
77565: LD_VAR 0 5
77569: NOT
77570: IFFALSE 77574
// exit ;
77572: GO 77594
// result := SortListByListDesc ( units , tmp ) ;
77574: LD_ADDR_VAR 0 3
77578: PUSH
77579: LD_VAR 0 1
77583: PPUSH
77584: LD_VAR 0 5
77588: PPUSH
77589: CALL_OW 77
77593: ST_TO_ADDR
// end ;
77594: LD_VAR 0 3
77598: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77599: LD_INT 0
77601: PPUSH
77602: PPUSH
77603: PPUSH
// result := false ;
77604: LD_ADDR_VAR 0 3
77608: PUSH
77609: LD_INT 0
77611: ST_TO_ADDR
// if not building then
77612: LD_VAR 0 2
77616: NOT
77617: IFFALSE 77621
// exit ;
77619: GO 77765
// x := GetX ( building ) ;
77621: LD_ADDR_VAR 0 4
77625: PUSH
77626: LD_VAR 0 2
77630: PPUSH
77631: CALL_OW 250
77635: ST_TO_ADDR
// y := GetY ( building ) ;
77636: LD_ADDR_VAR 0 5
77640: PUSH
77641: LD_VAR 0 2
77645: PPUSH
77646: CALL_OW 251
77650: ST_TO_ADDR
// if not x or not y then
77651: LD_VAR 0 4
77655: NOT
77656: IFTRUE 77665
77658: PUSH
77659: LD_VAR 0 5
77663: NOT
77664: OR
77665: IFFALSE 77669
// exit ;
77667: GO 77765
// if GetTaskList ( unit ) then
77669: LD_VAR 0 1
77673: PPUSH
77674: CALL_OW 437
77678: IFFALSE 77765
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77680: LD_STRING e
77682: PUSH
77683: LD_VAR 0 1
77687: PPUSH
77688: CALL_OW 437
77692: PUSH
77693: LD_INT 1
77695: ARRAY
77696: PUSH
77697: LD_INT 1
77699: ARRAY
77700: EQUAL
77701: IFFALSE 77728
77703: PUSH
77704: LD_VAR 0 4
77708: PUSH
77709: LD_VAR 0 1
77713: PPUSH
77714: CALL_OW 437
77718: PUSH
77719: LD_INT 1
77721: ARRAY
77722: PUSH
77723: LD_INT 2
77725: ARRAY
77726: EQUAL
77727: AND
77728: IFFALSE 77755
77730: PUSH
77731: LD_VAR 0 5
77735: PUSH
77736: LD_VAR 0 1
77740: PPUSH
77741: CALL_OW 437
77745: PUSH
77746: LD_INT 1
77748: ARRAY
77749: PUSH
77750: LD_INT 3
77752: ARRAY
77753: EQUAL
77754: AND
77755: IFFALSE 77765
// result := true end ;
77757: LD_ADDR_VAR 0 3
77761: PUSH
77762: LD_INT 1
77764: ST_TO_ADDR
// end ;
77765: LD_VAR 0 3
77769: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77770: LD_INT 0
77772: PPUSH
// result := false ;
77773: LD_ADDR_VAR 0 4
77777: PUSH
77778: LD_INT 0
77780: ST_TO_ADDR
// if GetTaskList ( unit ) then
77781: LD_VAR 0 1
77785: PPUSH
77786: CALL_OW 437
77790: IFFALSE 77877
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77792: LD_STRING M
77794: PUSH
77795: LD_VAR 0 1
77799: PPUSH
77800: CALL_OW 437
77804: PUSH
77805: LD_INT 1
77807: ARRAY
77808: PUSH
77809: LD_INT 1
77811: ARRAY
77812: EQUAL
77813: IFFALSE 77840
77815: PUSH
77816: LD_VAR 0 2
77820: PUSH
77821: LD_VAR 0 1
77825: PPUSH
77826: CALL_OW 437
77830: PUSH
77831: LD_INT 1
77833: ARRAY
77834: PUSH
77835: LD_INT 2
77837: ARRAY
77838: EQUAL
77839: AND
77840: IFFALSE 77867
77842: PUSH
77843: LD_VAR 0 3
77847: PUSH
77848: LD_VAR 0 1
77852: PPUSH
77853: CALL_OW 437
77857: PUSH
77858: LD_INT 1
77860: ARRAY
77861: PUSH
77862: LD_INT 3
77864: ARRAY
77865: EQUAL
77866: AND
77867: IFFALSE 77877
// result := true ;
77869: LD_ADDR_VAR 0 4
77873: PUSH
77874: LD_INT 1
77876: ST_TO_ADDR
// end ; end ;
77877: LD_VAR 0 4
77881: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77882: LD_INT 0
77884: PPUSH
77885: PPUSH
77886: PPUSH
77887: PPUSH
// if not unit or not area then
77888: LD_VAR 0 1
77892: NOT
77893: IFTRUE 77902
77895: PUSH
77896: LD_VAR 0 2
77900: NOT
77901: OR
77902: IFFALSE 77906
// exit ;
77904: GO 78082
// tmp := AreaToList ( area , i ) ;
77906: LD_ADDR_VAR 0 6
77910: PUSH
77911: LD_VAR 0 2
77915: PPUSH
77916: LD_VAR 0 5
77920: PPUSH
77921: CALL_OW 517
77925: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77926: LD_ADDR_VAR 0 5
77930: PUSH
77931: DOUBLE
77932: LD_INT 1
77934: DEC
77935: ST_TO_ADDR
77936: LD_VAR 0 6
77940: PUSH
77941: LD_INT 1
77943: ARRAY
77944: PUSH
77945: FOR_TO
77946: IFFALSE 78080
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77948: LD_ADDR_VAR 0 7
77952: PUSH
77953: LD_VAR 0 6
77957: PUSH
77958: LD_INT 1
77960: ARRAY
77961: PUSH
77962: LD_VAR 0 5
77966: ARRAY
77967: PUSH
77968: LD_VAR 0 6
77972: PUSH
77973: LD_INT 2
77975: ARRAY
77976: PUSH
77977: LD_VAR 0 5
77981: ARRAY
77982: PUSH
77983: EMPTY
77984: LIST
77985: LIST
77986: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
77987: LD_INT 92
77989: PUSH
77990: LD_VAR 0 7
77994: PUSH
77995: LD_INT 1
77997: ARRAY
77998: PUSH
77999: LD_VAR 0 7
78003: PUSH
78004: LD_INT 2
78006: ARRAY
78007: PUSH
78008: LD_INT 2
78010: PUSH
78011: EMPTY
78012: LIST
78013: LIST
78014: LIST
78015: LIST
78016: PPUSH
78017: CALL_OW 69
78021: PUSH
78022: LD_INT 0
78024: EQUAL
78025: IFFALSE 78078
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
78027: LD_VAR 0 1
78031: PPUSH
78032: LD_VAR 0 7
78036: PUSH
78037: LD_INT 1
78039: ARRAY
78040: PPUSH
78041: LD_VAR 0 7
78045: PUSH
78046: LD_INT 2
78048: ARRAY
78049: PPUSH
78050: LD_VAR 0 3
78054: PPUSH
78055: CALL_OW 48
// result := IsPlaced ( unit ) ;
78059: LD_ADDR_VAR 0 4
78063: PUSH
78064: LD_VAR 0 1
78068: PPUSH
78069: CALL_OW 305
78073: ST_TO_ADDR
// exit ;
78074: POP
78075: POP
78076: GO 78082
// end ; end ;
78078: GO 77945
78080: POP
78081: POP
// end ;
78082: LD_VAR 0 4
78086: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
78087: LD_INT 0
78089: PPUSH
78090: PPUSH
78091: PPUSH
// if not side or side > 8 then
78092: LD_VAR 0 1
78096: NOT
78097: IFTRUE 78109
78099: PUSH
78100: LD_VAR 0 1
78104: PUSH
78105: LD_INT 8
78107: GREATER
78108: OR
78109: IFFALSE 78113
// exit ;
78111: GO 78300
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
78113: LD_ADDR_VAR 0 4
78117: PUSH
78118: LD_INT 22
78120: PUSH
78121: LD_VAR 0 1
78125: PUSH
78126: EMPTY
78127: LIST
78128: LIST
78129: PUSH
78130: LD_INT 21
78132: PUSH
78133: LD_INT 3
78135: PUSH
78136: EMPTY
78137: LIST
78138: LIST
78139: PUSH
78140: EMPTY
78141: LIST
78142: LIST
78143: PPUSH
78144: CALL_OW 69
78148: ST_TO_ADDR
// if not tmp then
78149: LD_VAR 0 4
78153: NOT
78154: IFFALSE 78158
// exit ;
78156: GO 78300
// enable_addtolog := true ;
78158: LD_ADDR_OWVAR 81
78162: PUSH
78163: LD_INT 1
78165: ST_TO_ADDR
// AddToLog ( [ ) ;
78166: LD_STRING [
78168: PPUSH
78169: CALL_OW 561
// for i in tmp do
78173: LD_ADDR_VAR 0 3
78177: PUSH
78178: LD_VAR 0 4
78182: PUSH
78183: FOR_IN
78184: IFFALSE 78291
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
78186: LD_STRING [
78188: PUSH
78189: LD_VAR 0 3
78193: PPUSH
78194: CALL_OW 266
78198: STR
78199: PUSH
78200: LD_STRING , 
78202: STR
78203: PUSH
78204: LD_VAR 0 3
78208: PPUSH
78209: CALL_OW 250
78213: STR
78214: PUSH
78215: LD_STRING , 
78217: STR
78218: PUSH
78219: LD_VAR 0 3
78223: PPUSH
78224: CALL_OW 251
78228: STR
78229: PUSH
78230: LD_STRING , 
78232: STR
78233: PUSH
78234: LD_VAR 0 3
78238: PPUSH
78239: CALL_OW 254
78243: STR
78244: PUSH
78245: LD_STRING , 
78247: STR
78248: PUSH
78249: LD_VAR 0 3
78253: PPUSH
78254: LD_INT 1
78256: PPUSH
78257: CALL_OW 268
78261: STR
78262: PUSH
78263: LD_STRING , 
78265: STR
78266: PUSH
78267: LD_VAR 0 3
78271: PPUSH
78272: LD_INT 2
78274: PPUSH
78275: CALL_OW 268
78279: STR
78280: PUSH
78281: LD_STRING ],
78283: STR
78284: PPUSH
78285: CALL_OW 561
// end ;
78289: GO 78183
78291: POP
78292: POP
// AddToLog ( ]; ) ;
78293: LD_STRING ];
78295: PPUSH
78296: CALL_OW 561
// end ;
78300: LD_VAR 0 2
78304: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
78305: LD_INT 0
78307: PPUSH
78308: PPUSH
78309: PPUSH
78310: PPUSH
78311: PPUSH
// if not area or not rate or not max then
78312: LD_VAR 0 1
78316: NOT
78317: IFTRUE 78326
78319: PUSH
78320: LD_VAR 0 2
78324: NOT
78325: OR
78326: IFTRUE 78335
78328: PUSH
78329: LD_VAR 0 4
78333: NOT
78334: OR
78335: IFFALSE 78339
// exit ;
78337: GO 78528
// while 1 do
78339: LD_INT 1
78341: IFFALSE 78528
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
78343: LD_ADDR_VAR 0 9
78347: PUSH
78348: LD_VAR 0 1
78352: PPUSH
78353: LD_INT 1
78355: PPUSH
78356: CALL_OW 287
78360: PUSH
78361: LD_INT 10
78363: MUL
78364: ST_TO_ADDR
// r := rate / 10 ;
78365: LD_ADDR_VAR 0 7
78369: PUSH
78370: LD_VAR 0 2
78374: PUSH
78375: LD_INT 10
78377: DIVREAL
78378: ST_TO_ADDR
// time := 1 1$00 ;
78379: LD_ADDR_VAR 0 8
78383: PUSH
78384: LD_INT 2100
78386: ST_TO_ADDR
// if amount < min then
78387: LD_VAR 0 9
78391: PUSH
78392: LD_VAR 0 3
78396: LESS
78397: IFFALSE 78415
// r := r * 2 else
78399: LD_ADDR_VAR 0 7
78403: PUSH
78404: LD_VAR 0 7
78408: PUSH
78409: LD_INT 2
78411: MUL
78412: ST_TO_ADDR
78413: GO 78441
// if amount > max then
78415: LD_VAR 0 9
78419: PUSH
78420: LD_VAR 0 4
78424: GREATER
78425: IFFALSE 78441
// r := r / 2 ;
78427: LD_ADDR_VAR 0 7
78431: PUSH
78432: LD_VAR 0 7
78436: PUSH
78437: LD_INT 2
78439: DIVREAL
78440: ST_TO_ADDR
// time := time / r ;
78441: LD_ADDR_VAR 0 8
78445: PUSH
78446: LD_VAR 0 8
78450: PUSH
78451: LD_VAR 0 7
78455: DIVREAL
78456: ST_TO_ADDR
// if time < 0 then
78457: LD_VAR 0 8
78461: PUSH
78462: LD_INT 0
78464: LESS
78465: IFFALSE 78482
// time := time * - 1 ;
78467: LD_ADDR_VAR 0 8
78471: PUSH
78472: LD_VAR 0 8
78476: PUSH
78477: LD_INT 1
78479: NEG
78480: MUL
78481: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78482: LD_VAR 0 8
78486: PUSH
78487: LD_INT 35
78489: PPUSH
78490: LD_INT 875
78492: PPUSH
78493: CALL_OW 12
78497: PLUS
78498: PPUSH
78499: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78503: LD_INT 1
78505: PPUSH
78506: LD_INT 5
78508: PPUSH
78509: CALL_OW 12
78513: PPUSH
78514: LD_VAR 0 1
78518: PPUSH
78519: LD_INT 1
78521: PPUSH
78522: CALL_OW 55
// end ;
78526: GO 78339
// end ;
78528: LD_VAR 0 5
78532: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78533: LD_INT 0
78535: PPUSH
78536: PPUSH
78537: PPUSH
78538: PPUSH
78539: PPUSH
78540: PPUSH
78541: PPUSH
78542: PPUSH
// if not turrets or not factories then
78543: LD_VAR 0 1
78547: NOT
78548: IFTRUE 78557
78550: PUSH
78551: LD_VAR 0 2
78555: NOT
78556: OR
78557: IFFALSE 78561
// exit ;
78559: GO 78868
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78561: LD_ADDR_VAR 0 10
78565: PUSH
78566: LD_INT 5
78568: PUSH
78569: LD_INT 6
78571: PUSH
78572: EMPTY
78573: LIST
78574: LIST
78575: PUSH
78576: LD_INT 2
78578: PUSH
78579: LD_INT 4
78581: PUSH
78582: EMPTY
78583: LIST
78584: LIST
78585: PUSH
78586: LD_INT 3
78588: PUSH
78589: LD_INT 5
78591: PUSH
78592: EMPTY
78593: LIST
78594: LIST
78595: PUSH
78596: EMPTY
78597: LIST
78598: LIST
78599: LIST
78600: PUSH
78601: LD_INT 24
78603: PUSH
78604: LD_INT 25
78606: PUSH
78607: EMPTY
78608: LIST
78609: LIST
78610: PUSH
78611: LD_INT 23
78613: PUSH
78614: LD_INT 27
78616: PUSH
78617: EMPTY
78618: LIST
78619: LIST
78620: PUSH
78621: EMPTY
78622: LIST
78623: LIST
78624: PUSH
78625: LD_INT 42
78627: PUSH
78628: LD_INT 43
78630: PUSH
78631: EMPTY
78632: LIST
78633: LIST
78634: PUSH
78635: LD_INT 44
78637: PUSH
78638: LD_INT 46
78640: PUSH
78641: EMPTY
78642: LIST
78643: LIST
78644: PUSH
78645: LD_INT 45
78647: PUSH
78648: LD_INT 47
78650: PUSH
78651: EMPTY
78652: LIST
78653: LIST
78654: PUSH
78655: EMPTY
78656: LIST
78657: LIST
78658: LIST
78659: PUSH
78660: EMPTY
78661: LIST
78662: LIST
78663: LIST
78664: ST_TO_ADDR
// result := [ ] ;
78665: LD_ADDR_VAR 0 3
78669: PUSH
78670: EMPTY
78671: ST_TO_ADDR
// for i in turrets do
78672: LD_ADDR_VAR 0 4
78676: PUSH
78677: LD_VAR 0 1
78681: PUSH
78682: FOR_IN
78683: IFFALSE 78866
// begin nat := GetNation ( i ) ;
78685: LD_ADDR_VAR 0 7
78689: PUSH
78690: LD_VAR 0 4
78694: PPUSH
78695: CALL_OW 248
78699: ST_TO_ADDR
// weapon := 0 ;
78700: LD_ADDR_VAR 0 8
78704: PUSH
78705: LD_INT 0
78707: ST_TO_ADDR
// if not nat then
78708: LD_VAR 0 7
78712: NOT
78713: IFFALSE 78717
// continue ;
78715: GO 78682
// for j in list [ nat ] do
78717: LD_ADDR_VAR 0 5
78721: PUSH
78722: LD_VAR 0 10
78726: PUSH
78727: LD_VAR 0 7
78731: ARRAY
78732: PUSH
78733: FOR_IN
78734: IFFALSE 78775
// if GetBWeapon ( i ) = j [ 1 ] then
78736: LD_VAR 0 4
78740: PPUSH
78741: CALL_OW 269
78745: PUSH
78746: LD_VAR 0 5
78750: PUSH
78751: LD_INT 1
78753: ARRAY
78754: EQUAL
78755: IFFALSE 78773
// begin weapon := j [ 2 ] ;
78757: LD_ADDR_VAR 0 8
78761: PUSH
78762: LD_VAR 0 5
78766: PUSH
78767: LD_INT 2
78769: ARRAY
78770: ST_TO_ADDR
// break ;
78771: GO 78775
// end ;
78773: GO 78733
78775: POP
78776: POP
// if not weapon then
78777: LD_VAR 0 8
78781: NOT
78782: IFFALSE 78786
// continue ;
78784: GO 78682
// for k in factories do
78786: LD_ADDR_VAR 0 6
78790: PUSH
78791: LD_VAR 0 2
78795: PUSH
78796: FOR_IN
78797: IFFALSE 78862
// begin weapons := AvailableWeaponList ( k ) ;
78799: LD_ADDR_VAR 0 9
78803: PUSH
78804: LD_VAR 0 6
78808: PPUSH
78809: CALL_OW 478
78813: ST_TO_ADDR
// if not weapons then
78814: LD_VAR 0 9
78818: NOT
78819: IFFALSE 78823
// continue ;
78821: GO 78796
// if weapon in weapons then
78823: LD_VAR 0 8
78827: PUSH
78828: LD_VAR 0 9
78832: IN
78833: IFFALSE 78860
// begin result := [ i , weapon ] ;
78835: LD_ADDR_VAR 0 3
78839: PUSH
78840: LD_VAR 0 4
78844: PUSH
78845: LD_VAR 0 8
78849: PUSH
78850: EMPTY
78851: LIST
78852: LIST
78853: ST_TO_ADDR
// exit ;
78854: POP
78855: POP
78856: POP
78857: POP
78858: GO 78868
// end ; end ;
78860: GO 78796
78862: POP
78863: POP
// end ;
78864: GO 78682
78866: POP
78867: POP
// end ;
78868: LD_VAR 0 3
78872: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78873: LD_INT 0
78875: PPUSH
// if not side or side > 8 then
78876: LD_VAR 0 3
78880: NOT
78881: IFTRUE 78893
78883: PUSH
78884: LD_VAR 0 3
78888: PUSH
78889: LD_INT 8
78891: GREATER
78892: OR
78893: IFFALSE 78897
// exit ;
78895: GO 78956
// if not range then
78897: LD_VAR 0 4
78901: NOT
78902: IFFALSE 78913
// range := - 12 ;
78904: LD_ADDR_VAR 0 4
78908: PUSH
78909: LD_INT 12
78911: NEG
78912: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78913: LD_VAR 0 1
78917: PPUSH
78918: LD_VAR 0 2
78922: PPUSH
78923: LD_VAR 0 3
78927: PPUSH
78928: LD_VAR 0 4
78932: PPUSH
78933: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78937: LD_VAR 0 1
78941: PPUSH
78942: LD_VAR 0 2
78946: PPUSH
78947: LD_VAR 0 3
78951: PPUSH
78952: CALL_OW 331
// end ;
78956: LD_VAR 0 5
78960: RET
// export function Video ( mode ) ; begin
78961: LD_INT 0
78963: PPUSH
// ingame_video = mode ;
78964: LD_ADDR_OWVAR 52
78968: PUSH
78969: LD_VAR 0 1
78973: ST_TO_ADDR
// interface_hidden = mode ;
78974: LD_ADDR_OWVAR 54
78978: PUSH
78979: LD_VAR 0 1
78983: ST_TO_ADDR
// end ;
78984: LD_VAR 0 2
78988: RET
// export function Join ( array , element ) ; begin
78989: LD_INT 0
78991: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78992: LD_ADDR_VAR 0 3
78996: PUSH
78997: LD_VAR 0 1
79001: PPUSH
79002: LD_VAR 0 1
79006: PUSH
79007: LD_INT 1
79009: PLUS
79010: PPUSH
79011: LD_VAR 0 2
79015: PPUSH
79016: CALL_OW 1
79020: ST_TO_ADDR
// end ;
79021: LD_VAR 0 3
79025: RET
// export function JoinUnion ( array , element ) ; begin
79026: LD_INT 0
79028: PPUSH
// result := array union element ;
79029: LD_ADDR_VAR 0 3
79033: PUSH
79034: LD_VAR 0 1
79038: PUSH
79039: LD_VAR 0 2
79043: UNION
79044: ST_TO_ADDR
// end ;
79045: LD_VAR 0 3
79049: RET
// export function GetBehemoths ( side ) ; begin
79050: LD_INT 0
79052: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
79053: LD_ADDR_VAR 0 2
79057: PUSH
79058: LD_INT 22
79060: PUSH
79061: LD_VAR 0 1
79065: PUSH
79066: EMPTY
79067: LIST
79068: LIST
79069: PUSH
79070: LD_INT 31
79072: PUSH
79073: LD_INT 25
79075: PUSH
79076: EMPTY
79077: LIST
79078: LIST
79079: PUSH
79080: EMPTY
79081: LIST
79082: LIST
79083: PPUSH
79084: CALL_OW 69
79088: ST_TO_ADDR
// end ;
79089: LD_VAR 0 2
79093: RET
// export function Shuffle ( array ) ; var i , index ; begin
79094: LD_INT 0
79096: PPUSH
79097: PPUSH
79098: PPUSH
// result := [ ] ;
79099: LD_ADDR_VAR 0 2
79103: PUSH
79104: EMPTY
79105: ST_TO_ADDR
// if not array then
79106: LD_VAR 0 1
79110: NOT
79111: IFFALSE 79115
// exit ;
79113: GO 79214
// Randomize ;
79115: CALL_OW 10
// for i = array downto 1 do
79119: LD_ADDR_VAR 0 3
79123: PUSH
79124: DOUBLE
79125: LD_VAR 0 1
79129: INC
79130: ST_TO_ADDR
79131: LD_INT 1
79133: PUSH
79134: FOR_DOWNTO
79135: IFFALSE 79212
// begin index := rand ( 1 , array ) ;
79137: LD_ADDR_VAR 0 4
79141: PUSH
79142: LD_INT 1
79144: PPUSH
79145: LD_VAR 0 1
79149: PPUSH
79150: CALL_OW 12
79154: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
79155: LD_ADDR_VAR 0 2
79159: PUSH
79160: LD_VAR 0 2
79164: PPUSH
79165: LD_VAR 0 2
79169: PUSH
79170: LD_INT 1
79172: PLUS
79173: PPUSH
79174: LD_VAR 0 1
79178: PUSH
79179: LD_VAR 0 4
79183: ARRAY
79184: PPUSH
79185: CALL_OW 2
79189: ST_TO_ADDR
// array := Delete ( array , index ) ;
79190: LD_ADDR_VAR 0 1
79194: PUSH
79195: LD_VAR 0 1
79199: PPUSH
79200: LD_VAR 0 4
79204: PPUSH
79205: CALL_OW 3
79209: ST_TO_ADDR
// end ;
79210: GO 79134
79212: POP
79213: POP
// end ;
79214: LD_VAR 0 2
79218: RET
// export function GetBaseMaterials ( base ) ; begin
79219: LD_INT 0
79221: PPUSH
// result := [ 0 , 0 , 0 ] ;
79222: LD_ADDR_VAR 0 2
79226: PUSH
79227: LD_INT 0
79229: PUSH
79230: LD_INT 0
79232: PUSH
79233: LD_INT 0
79235: PUSH
79236: EMPTY
79237: LIST
79238: LIST
79239: LIST
79240: ST_TO_ADDR
// if not base then
79241: LD_VAR 0 1
79245: NOT
79246: IFFALSE 79250
// exit ;
79248: GO 79299
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
79250: LD_ADDR_VAR 0 2
79254: PUSH
79255: LD_VAR 0 1
79259: PPUSH
79260: LD_INT 1
79262: PPUSH
79263: CALL_OW 275
79267: PUSH
79268: LD_VAR 0 1
79272: PPUSH
79273: LD_INT 2
79275: PPUSH
79276: CALL_OW 275
79280: PUSH
79281: LD_VAR 0 1
79285: PPUSH
79286: LD_INT 3
79288: PPUSH
79289: CALL_OW 275
79293: PUSH
79294: EMPTY
79295: LIST
79296: LIST
79297: LIST
79298: ST_TO_ADDR
// end ;
79299: LD_VAR 0 2
79303: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
79304: LD_INT 0
79306: PPUSH
79307: PPUSH
// result := array ;
79308: LD_ADDR_VAR 0 3
79312: PUSH
79313: LD_VAR 0 1
79317: ST_TO_ADDR
// if size >= result then
79318: LD_VAR 0 2
79322: PUSH
79323: LD_VAR 0 3
79327: GREATEREQUAL
79328: IFFALSE 79332
// exit ;
79330: GO 79382
// if size then
79332: LD_VAR 0 2
79336: IFFALSE 79382
// for i := array downto size do
79338: LD_ADDR_VAR 0 4
79342: PUSH
79343: DOUBLE
79344: LD_VAR 0 1
79348: INC
79349: ST_TO_ADDR
79350: LD_VAR 0 2
79354: PUSH
79355: FOR_DOWNTO
79356: IFFALSE 79380
// result := Delete ( result , result ) ;
79358: LD_ADDR_VAR 0 3
79362: PUSH
79363: LD_VAR 0 3
79367: PPUSH
79368: LD_VAR 0 3
79372: PPUSH
79373: CALL_OW 3
79377: ST_TO_ADDR
79378: GO 79355
79380: POP
79381: POP
// end ;
79382: LD_VAR 0 3
79386: RET
// export function ComExit ( unit ) ; var tmp ; begin
79387: LD_INT 0
79389: PPUSH
79390: PPUSH
// if not IsInUnit ( unit ) then
79391: LD_VAR 0 1
79395: PPUSH
79396: CALL_OW 310
79400: NOT
79401: IFFALSE 79405
// exit ;
79403: GO 79465
// tmp := IsInUnit ( unit ) ;
79405: LD_ADDR_VAR 0 3
79409: PUSH
79410: LD_VAR 0 1
79414: PPUSH
79415: CALL_OW 310
79419: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
79420: LD_VAR 0 3
79424: PPUSH
79425: CALL_OW 247
79429: PUSH
79430: LD_INT 2
79432: EQUAL
79433: IFFALSE 79446
// ComExitVehicle ( unit ) else
79435: LD_VAR 0 1
79439: PPUSH
79440: CALL_OW 121
79444: GO 79455
// ComExitBuilding ( unit ) ;
79446: LD_VAR 0 1
79450: PPUSH
79451: CALL_OW 122
// result := tmp ;
79455: LD_ADDR_VAR 0 2
79459: PUSH
79460: LD_VAR 0 3
79464: ST_TO_ADDR
// end ;
79465: LD_VAR 0 2
79469: RET
// export function ComExitAll ( units ) ; var i ; begin
79470: LD_INT 0
79472: PPUSH
79473: PPUSH
// if not units then
79474: LD_VAR 0 1
79478: NOT
79479: IFFALSE 79483
// exit ;
79481: GO 79509
// for i in units do
79483: LD_ADDR_VAR 0 3
79487: PUSH
79488: LD_VAR 0 1
79492: PUSH
79493: FOR_IN
79494: IFFALSE 79507
// ComExit ( i ) ;
79496: LD_VAR 0 3
79500: PPUSH
79501: CALL 79387 0 1
79505: GO 79493
79507: POP
79508: POP
// end ;
79509: LD_VAR 0 2
79513: RET
// export function ResetHc ; begin
79514: LD_INT 0
79516: PPUSH
// InitHc ;
79517: CALL_OW 19
// hc_importance := 0 ;
79521: LD_ADDR_OWVAR 32
79525: PUSH
79526: LD_INT 0
79528: ST_TO_ADDR
// end ;
79529: LD_VAR 0 1
79533: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79534: LD_INT 0
79536: PPUSH
79537: PPUSH
79538: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79539: LD_ADDR_VAR 0 6
79543: PUSH
79544: LD_VAR 0 1
79548: PUSH
79549: LD_VAR 0 3
79553: PLUS
79554: PUSH
79555: LD_INT 2
79557: DIV
79558: ST_TO_ADDR
// if _x < 0 then
79559: LD_VAR 0 6
79563: PUSH
79564: LD_INT 0
79566: LESS
79567: IFFALSE 79584
// _x := _x * - 1 ;
79569: LD_ADDR_VAR 0 6
79573: PUSH
79574: LD_VAR 0 6
79578: PUSH
79579: LD_INT 1
79581: NEG
79582: MUL
79583: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79584: LD_ADDR_VAR 0 7
79588: PUSH
79589: LD_VAR 0 2
79593: PUSH
79594: LD_VAR 0 4
79598: PLUS
79599: PUSH
79600: LD_INT 2
79602: DIV
79603: ST_TO_ADDR
// if _y < 0 then
79604: LD_VAR 0 7
79608: PUSH
79609: LD_INT 0
79611: LESS
79612: IFFALSE 79629
// _y := _y * - 1 ;
79614: LD_ADDR_VAR 0 7
79618: PUSH
79619: LD_VAR 0 7
79623: PUSH
79624: LD_INT 1
79626: NEG
79627: MUL
79628: ST_TO_ADDR
// result := [ _x , _y ] ;
79629: LD_ADDR_VAR 0 5
79633: PUSH
79634: LD_VAR 0 6
79638: PUSH
79639: LD_VAR 0 7
79643: PUSH
79644: EMPTY
79645: LIST
79646: LIST
79647: ST_TO_ADDR
// end ;
79648: LD_VAR 0 5
79652: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79653: LD_INT 0
79655: PPUSH
79656: PPUSH
79657: PPUSH
79658: PPUSH
// task := GetTaskList ( unit ) ;
79659: LD_ADDR_VAR 0 7
79663: PUSH
79664: LD_VAR 0 1
79668: PPUSH
79669: CALL_OW 437
79673: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79674: LD_VAR 0 7
79678: NOT
79679: IFFALSE 79698
79681: PUSH
79682: LD_VAR 0 1
79686: PPUSH
79687: LD_VAR 0 2
79691: PPUSH
79692: CALL_OW 308
79696: NOT
79697: AND
79698: IFFALSE 79702
// exit ;
79700: GO 79820
// if IsInArea ( unit , area ) then
79702: LD_VAR 0 1
79706: PPUSH
79707: LD_VAR 0 2
79711: PPUSH
79712: CALL_OW 308
79716: IFFALSE 79734
// begin ComMoveToArea ( unit , goAway ) ;
79718: LD_VAR 0 1
79722: PPUSH
79723: LD_VAR 0 3
79727: PPUSH
79728: CALL_OW 113
// exit ;
79732: GO 79820
// end ; if task [ 1 ] [ 1 ] <> M then
79734: LD_VAR 0 7
79738: PUSH
79739: LD_INT 1
79741: ARRAY
79742: PUSH
79743: LD_INT 1
79745: ARRAY
79746: PUSH
79747: LD_STRING M
79749: NONEQUAL
79750: IFFALSE 79754
// exit ;
79752: GO 79820
// x := task [ 1 ] [ 2 ] ;
79754: LD_ADDR_VAR 0 5
79758: PUSH
79759: LD_VAR 0 7
79763: PUSH
79764: LD_INT 1
79766: ARRAY
79767: PUSH
79768: LD_INT 2
79770: ARRAY
79771: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79772: LD_ADDR_VAR 0 6
79776: PUSH
79777: LD_VAR 0 7
79781: PUSH
79782: LD_INT 1
79784: ARRAY
79785: PUSH
79786: LD_INT 3
79788: ARRAY
79789: ST_TO_ADDR
// if InArea ( x , y , area ) then
79790: LD_VAR 0 5
79794: PPUSH
79795: LD_VAR 0 6
79799: PPUSH
79800: LD_VAR 0 2
79804: PPUSH
79805: CALL_OW 309
79809: IFFALSE 79820
// ComStop ( unit ) ;
79811: LD_VAR 0 1
79815: PPUSH
79816: CALL_OW 141
// end ;
79820: LD_VAR 0 4
79824: RET
// export function Abs ( value ) ; begin
79825: LD_INT 0
79827: PPUSH
// result := value ;
79828: LD_ADDR_VAR 0 2
79832: PUSH
79833: LD_VAR 0 1
79837: ST_TO_ADDR
// if value < 0 then
79838: LD_VAR 0 1
79842: PUSH
79843: LD_INT 0
79845: LESS
79846: IFFALSE 79863
// result := value * - 1 ;
79848: LD_ADDR_VAR 0 2
79852: PUSH
79853: LD_VAR 0 1
79857: PUSH
79858: LD_INT 1
79860: NEG
79861: MUL
79862: ST_TO_ADDR
// end ;
79863: LD_VAR 0 2
79867: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79868: LD_INT 0
79870: PPUSH
79871: PPUSH
79872: PPUSH
79873: PPUSH
79874: PPUSH
79875: PPUSH
79876: PPUSH
79877: PPUSH
// if not unit or not building then
79878: LD_VAR 0 1
79882: NOT
79883: IFTRUE 79892
79885: PUSH
79886: LD_VAR 0 2
79890: NOT
79891: OR
79892: IFFALSE 79896
// exit ;
79894: GO 80124
// x := GetX ( building ) ;
79896: LD_ADDR_VAR 0 4
79900: PUSH
79901: LD_VAR 0 2
79905: PPUSH
79906: CALL_OW 250
79910: ST_TO_ADDR
// y := GetY ( building ) ;
79911: LD_ADDR_VAR 0 6
79915: PUSH
79916: LD_VAR 0 2
79920: PPUSH
79921: CALL_OW 251
79925: ST_TO_ADDR
// d := GetDir ( building ) ;
79926: LD_ADDR_VAR 0 8
79930: PUSH
79931: LD_VAR 0 2
79935: PPUSH
79936: CALL_OW 254
79940: ST_TO_ADDR
// r := 4 ;
79941: LD_ADDR_VAR 0 9
79945: PUSH
79946: LD_INT 4
79948: ST_TO_ADDR
// for i := 1 to 5 do
79949: LD_ADDR_VAR 0 10
79953: PUSH
79954: DOUBLE
79955: LD_INT 1
79957: DEC
79958: ST_TO_ADDR
79959: LD_INT 5
79961: PUSH
79962: FOR_TO
79963: IFFALSE 80122
// begin _x := ShiftX ( x , d , r + i ) ;
79965: LD_ADDR_VAR 0 5
79969: PUSH
79970: LD_VAR 0 4
79974: PPUSH
79975: LD_VAR 0 8
79979: PPUSH
79980: LD_VAR 0 9
79984: PUSH
79985: LD_VAR 0 10
79989: PLUS
79990: PPUSH
79991: CALL_OW 272
79995: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79996: LD_ADDR_VAR 0 7
80000: PUSH
80001: LD_VAR 0 6
80005: PPUSH
80006: LD_VAR 0 8
80010: PPUSH
80011: LD_VAR 0 9
80015: PUSH
80016: LD_VAR 0 10
80020: PLUS
80021: PPUSH
80022: CALL_OW 273
80026: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
80027: LD_VAR 0 5
80031: PPUSH
80032: LD_VAR 0 7
80036: PPUSH
80037: CALL_OW 488
80041: IFFALSE 80076
80043: PUSH
80044: LD_VAR 0 5
80048: PPUSH
80049: LD_VAR 0 7
80053: PPUSH
80054: CALL_OW 428
80058: PPUSH
80059: CALL_OW 247
80063: PUSH
80064: LD_INT 3
80066: PUSH
80067: LD_INT 2
80069: PUSH
80070: EMPTY
80071: LIST
80072: LIST
80073: IN
80074: NOT
80075: AND
80076: IFFALSE 80120
// begin ComMoveXY ( unit , _x , _y ) ;
80078: LD_VAR 0 1
80082: PPUSH
80083: LD_VAR 0 5
80087: PPUSH
80088: LD_VAR 0 7
80092: PPUSH
80093: CALL_OW 111
// result := [ _x , _y ] ;
80097: LD_ADDR_VAR 0 3
80101: PUSH
80102: LD_VAR 0 5
80106: PUSH
80107: LD_VAR 0 7
80111: PUSH
80112: EMPTY
80113: LIST
80114: LIST
80115: ST_TO_ADDR
// exit ;
80116: POP
80117: POP
80118: GO 80124
// end ; end ;
80120: GO 79962
80122: POP
80123: POP
// end ;
80124: LD_VAR 0 3
80128: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
80129: LD_INT 0
80131: PPUSH
80132: PPUSH
80133: PPUSH
// result := 0 ;
80134: LD_ADDR_VAR 0 3
80138: PUSH
80139: LD_INT 0
80141: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
80142: LD_VAR 0 1
80146: PUSH
80147: LD_INT 0
80149: LESS
80150: IFTRUE 80162
80152: PUSH
80153: LD_VAR 0 1
80157: PUSH
80158: LD_INT 8
80160: GREATER
80161: OR
80162: IFTRUE 80174
80164: PUSH
80165: LD_VAR 0 2
80169: PUSH
80170: LD_INT 0
80172: LESS
80173: OR
80174: IFTRUE 80186
80176: PUSH
80177: LD_VAR 0 2
80181: PUSH
80182: LD_INT 8
80184: GREATER
80185: OR
80186: IFFALSE 80190
// exit ;
80188: GO 80265
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
80190: LD_ADDR_VAR 0 4
80194: PUSH
80195: LD_INT 22
80197: PUSH
80198: LD_VAR 0 2
80202: PUSH
80203: EMPTY
80204: LIST
80205: LIST
80206: PPUSH
80207: CALL_OW 69
80211: PUSH
80212: FOR_IN
80213: IFFALSE 80263
// begin un := UnitShoot ( i ) ;
80215: LD_ADDR_VAR 0 5
80219: PUSH
80220: LD_VAR 0 4
80224: PPUSH
80225: CALL_OW 504
80229: ST_TO_ADDR
// if GetSide ( un ) = side1 then
80230: LD_VAR 0 5
80234: PPUSH
80235: CALL_OW 255
80239: PUSH
80240: LD_VAR 0 1
80244: EQUAL
80245: IFFALSE 80261
// begin result := un ;
80247: LD_ADDR_VAR 0 3
80251: PUSH
80252: LD_VAR 0 5
80256: ST_TO_ADDR
// exit ;
80257: POP
80258: POP
80259: GO 80265
// end ; end ;
80261: GO 80212
80263: POP
80264: POP
// end ;
80265: LD_VAR 0 3
80269: RET
// export function GetCargoBay ( units ) ; begin
80270: LD_INT 0
80272: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
80273: LD_ADDR_VAR 0 2
80277: PUSH
80278: LD_VAR 0 1
80282: PPUSH
80283: LD_INT 2
80285: PUSH
80286: LD_INT 34
80288: PUSH
80289: LD_INT 12
80291: PUSH
80292: EMPTY
80293: LIST
80294: LIST
80295: PUSH
80296: LD_INT 34
80298: PUSH
80299: LD_INT 51
80301: PUSH
80302: EMPTY
80303: LIST
80304: LIST
80305: PUSH
80306: LD_INT 34
80308: PUSH
80309: LD_INT 32
80311: PUSH
80312: EMPTY
80313: LIST
80314: LIST
80315: PUSH
80316: LD_INT 34
80318: PUSH
80319: LD_INT 89
80321: PUSH
80322: EMPTY
80323: LIST
80324: LIST
80325: PUSH
80326: EMPTY
80327: LIST
80328: LIST
80329: LIST
80330: LIST
80331: LIST
80332: PPUSH
80333: CALL_OW 72
80337: ST_TO_ADDR
// end ;
80338: LD_VAR 0 2
80342: RET
// export function Negate ( value ) ; begin
80343: LD_INT 0
80345: PPUSH
// result := not value ;
80346: LD_ADDR_VAR 0 2
80350: PUSH
80351: LD_VAR 0 1
80355: NOT
80356: ST_TO_ADDR
// end ;
80357: LD_VAR 0 2
80361: RET
// export function Inc ( value ) ; begin
80362: LD_INT 0
80364: PPUSH
// result := value + 1 ;
80365: LD_ADDR_VAR 0 2
80369: PUSH
80370: LD_VAR 0 1
80374: PUSH
80375: LD_INT 1
80377: PLUS
80378: ST_TO_ADDR
// end ;
80379: LD_VAR 0 2
80383: RET
// export function Dec ( value ) ; begin
80384: LD_INT 0
80386: PPUSH
// result := value - 1 ;
80387: LD_ADDR_VAR 0 2
80391: PUSH
80392: LD_VAR 0 1
80396: PUSH
80397: LD_INT 1
80399: MINUS
80400: ST_TO_ADDR
// end ;
80401: LD_VAR 0 2
80405: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
80406: LD_INT 0
80408: PPUSH
80409: PPUSH
80410: PPUSH
80411: PPUSH
80412: PPUSH
80413: PPUSH
80414: PPUSH
80415: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
80416: LD_VAR 0 1
80420: PPUSH
80421: LD_VAR 0 2
80425: PPUSH
80426: CALL_OW 488
80430: NOT
80431: IFTRUE 80450
80433: PUSH
80434: LD_VAR 0 3
80438: PPUSH
80439: LD_VAR 0 4
80443: PPUSH
80444: CALL_OW 488
80448: NOT
80449: OR
80450: IFFALSE 80463
// begin result := - 1 ;
80452: LD_ADDR_VAR 0 5
80456: PUSH
80457: LD_INT 1
80459: NEG
80460: ST_TO_ADDR
// exit ;
80461: GO 80698
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
80463: LD_ADDR_VAR 0 12
80467: PUSH
80468: LD_VAR 0 1
80472: PPUSH
80473: LD_VAR 0 2
80477: PPUSH
80478: LD_VAR 0 3
80482: PPUSH
80483: LD_VAR 0 4
80487: PPUSH
80488: CALL 79534 0 4
80492: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80493: LD_ADDR_VAR 0 11
80497: PUSH
80498: LD_VAR 0 1
80502: PPUSH
80503: LD_VAR 0 2
80507: PPUSH
80508: LD_VAR 0 12
80512: PUSH
80513: LD_INT 1
80515: ARRAY
80516: PPUSH
80517: LD_VAR 0 12
80521: PUSH
80522: LD_INT 2
80524: ARRAY
80525: PPUSH
80526: CALL_OW 298
80530: ST_TO_ADDR
// distance := 9999 ;
80531: LD_ADDR_VAR 0 10
80535: PUSH
80536: LD_INT 9999
80538: ST_TO_ADDR
// for i := 0 to 5 do
80539: LD_ADDR_VAR 0 6
80543: PUSH
80544: DOUBLE
80545: LD_INT 0
80547: DEC
80548: ST_TO_ADDR
80549: LD_INT 5
80551: PUSH
80552: FOR_TO
80553: IFFALSE 80696
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80555: LD_ADDR_VAR 0 7
80559: PUSH
80560: LD_VAR 0 1
80564: PPUSH
80565: LD_VAR 0 6
80569: PPUSH
80570: LD_VAR 0 11
80574: PPUSH
80575: CALL_OW 272
80579: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80580: LD_ADDR_VAR 0 8
80584: PUSH
80585: LD_VAR 0 2
80589: PPUSH
80590: LD_VAR 0 6
80594: PPUSH
80595: LD_VAR 0 11
80599: PPUSH
80600: CALL_OW 273
80604: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80605: LD_VAR 0 7
80609: PPUSH
80610: LD_VAR 0 8
80614: PPUSH
80615: CALL_OW 488
80619: NOT
80620: IFFALSE 80624
// continue ;
80622: GO 80552
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80624: LD_ADDR_VAR 0 9
80628: PUSH
80629: LD_VAR 0 12
80633: PUSH
80634: LD_INT 1
80636: ARRAY
80637: PPUSH
80638: LD_VAR 0 12
80642: PUSH
80643: LD_INT 2
80645: ARRAY
80646: PPUSH
80647: LD_VAR 0 7
80651: PPUSH
80652: LD_VAR 0 8
80656: PPUSH
80657: CALL_OW 298
80661: ST_TO_ADDR
// if tmp < distance then
80662: LD_VAR 0 9
80666: PUSH
80667: LD_VAR 0 10
80671: LESS
80672: IFFALSE 80694
// begin result := i ;
80674: LD_ADDR_VAR 0 5
80678: PUSH
80679: LD_VAR 0 6
80683: ST_TO_ADDR
// distance := tmp ;
80684: LD_ADDR_VAR 0 10
80688: PUSH
80689: LD_VAR 0 9
80693: ST_TO_ADDR
// end ; end ;
80694: GO 80552
80696: POP
80697: POP
// end ;
80698: LD_VAR 0 5
80702: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80703: LD_INT 0
80705: PPUSH
80706: PPUSH
// if not driver or not IsInUnit ( driver ) then
80707: LD_VAR 0 1
80711: NOT
80712: IFTRUE 80726
80714: PUSH
80715: LD_VAR 0 1
80719: PPUSH
80720: CALL_OW 310
80724: NOT
80725: OR
80726: IFFALSE 80730
// exit ;
80728: GO 80820
// vehicle := IsInUnit ( driver ) ;
80730: LD_ADDR_VAR 0 3
80734: PUSH
80735: LD_VAR 0 1
80739: PPUSH
80740: CALL_OW 310
80744: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80745: LD_VAR 0 1
80749: PPUSH
80750: LD_STRING \
80752: PUSH
80753: LD_INT 0
80755: PUSH
80756: LD_INT 0
80758: PUSH
80759: LD_INT 0
80761: PUSH
80762: LD_INT 0
80764: PUSH
80765: LD_INT 0
80767: PUSH
80768: LD_INT 0
80770: PUSH
80771: EMPTY
80772: LIST
80773: LIST
80774: LIST
80775: LIST
80776: LIST
80777: LIST
80778: LIST
80779: PUSH
80780: LD_STRING E
80782: PUSH
80783: LD_INT 0
80785: PUSH
80786: LD_INT 0
80788: PUSH
80789: LD_VAR 0 3
80793: PUSH
80794: LD_INT 0
80796: PUSH
80797: LD_INT 0
80799: PUSH
80800: LD_INT 0
80802: PUSH
80803: EMPTY
80804: LIST
80805: LIST
80806: LIST
80807: LIST
80808: LIST
80809: LIST
80810: LIST
80811: PUSH
80812: EMPTY
80813: LIST
80814: LIST
80815: PPUSH
80816: CALL_OW 446
// end ;
80820: LD_VAR 0 2
80824: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80825: LD_INT 0
80827: PPUSH
80828: PPUSH
// if not driver or not IsInUnit ( driver ) then
80829: LD_VAR 0 1
80833: NOT
80834: IFTRUE 80848
80836: PUSH
80837: LD_VAR 0 1
80841: PPUSH
80842: CALL_OW 310
80846: NOT
80847: OR
80848: IFFALSE 80852
// exit ;
80850: GO 80942
// vehicle := IsInUnit ( driver ) ;
80852: LD_ADDR_VAR 0 3
80856: PUSH
80857: LD_VAR 0 1
80861: PPUSH
80862: CALL_OW 310
80866: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80867: LD_VAR 0 1
80871: PPUSH
80872: LD_STRING \
80874: PUSH
80875: LD_INT 0
80877: PUSH
80878: LD_INT 0
80880: PUSH
80881: LD_INT 0
80883: PUSH
80884: LD_INT 0
80886: PUSH
80887: LD_INT 0
80889: PUSH
80890: LD_INT 0
80892: PUSH
80893: EMPTY
80894: LIST
80895: LIST
80896: LIST
80897: LIST
80898: LIST
80899: LIST
80900: LIST
80901: PUSH
80902: LD_STRING E
80904: PUSH
80905: LD_INT 0
80907: PUSH
80908: LD_INT 0
80910: PUSH
80911: LD_VAR 0 3
80915: PUSH
80916: LD_INT 0
80918: PUSH
80919: LD_INT 0
80921: PUSH
80922: LD_INT 0
80924: PUSH
80925: EMPTY
80926: LIST
80927: LIST
80928: LIST
80929: LIST
80930: LIST
80931: LIST
80932: LIST
80933: PUSH
80934: EMPTY
80935: LIST
80936: LIST
80937: PPUSH
80938: CALL_OW 447
// end ;
80942: LD_VAR 0 2
80946: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80947: LD_INT 0
80949: PPUSH
80950: PPUSH
80951: PPUSH
// tmp := [ ] ;
80952: LD_ADDR_VAR 0 5
80956: PUSH
80957: EMPTY
80958: ST_TO_ADDR
// for i in units do
80959: LD_ADDR_VAR 0 4
80963: PUSH
80964: LD_VAR 0 1
80968: PUSH
80969: FOR_IN
80970: IFFALSE 81008
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80972: LD_ADDR_VAR 0 5
80976: PUSH
80977: LD_VAR 0 5
80981: PPUSH
80982: LD_VAR 0 5
80986: PUSH
80987: LD_INT 1
80989: PLUS
80990: PPUSH
80991: LD_VAR 0 4
80995: PPUSH
80996: CALL_OW 256
81000: PPUSH
81001: CALL_OW 2
81005: ST_TO_ADDR
81006: GO 80969
81008: POP
81009: POP
// if not tmp then
81010: LD_VAR 0 5
81014: NOT
81015: IFFALSE 81019
// exit ;
81017: GO 81067
// if asc then
81019: LD_VAR 0 2
81023: IFFALSE 81047
// result := SortListByListAsc ( units , tmp ) else
81025: LD_ADDR_VAR 0 3
81029: PUSH
81030: LD_VAR 0 1
81034: PPUSH
81035: LD_VAR 0 5
81039: PPUSH
81040: CALL_OW 76
81044: ST_TO_ADDR
81045: GO 81067
// result := SortListByListDesc ( units , tmp ) ;
81047: LD_ADDR_VAR 0 3
81051: PUSH
81052: LD_VAR 0 1
81056: PPUSH
81057: LD_VAR 0 5
81061: PPUSH
81062: CALL_OW 77
81066: ST_TO_ADDR
// end ;
81067: LD_VAR 0 3
81071: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
81072: LD_INT 0
81074: PPUSH
81075: PPUSH
// task := GetTaskList ( mech ) ;
81076: LD_ADDR_VAR 0 4
81080: PUSH
81081: LD_VAR 0 1
81085: PPUSH
81086: CALL_OW 437
81090: ST_TO_ADDR
// if not task then
81091: LD_VAR 0 4
81095: NOT
81096: IFFALSE 81100
// exit ;
81098: GO 81144
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
81100: LD_ADDR_VAR 0 3
81104: PUSH
81105: LD_VAR 0 4
81109: PUSH
81110: LD_INT 1
81112: ARRAY
81113: PUSH
81114: LD_INT 1
81116: ARRAY
81117: PUSH
81118: LD_STRING r
81120: EQUAL
81121: IFFALSE 81143
81123: PUSH
81124: LD_VAR 0 4
81128: PUSH
81129: LD_INT 1
81131: ARRAY
81132: PUSH
81133: LD_INT 4
81135: ARRAY
81136: PUSH
81137: LD_VAR 0 2
81141: EQUAL
81142: AND
81143: ST_TO_ADDR
// end ;
81144: LD_VAR 0 3
81148: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
81149: LD_INT 0
81151: PPUSH
// SetDir ( unit , d ) ;
81152: LD_VAR 0 1
81156: PPUSH
81157: LD_VAR 0 4
81161: PPUSH
81162: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
81166: LD_ADDR_VAR 0 6
81170: PUSH
81171: LD_VAR 0 1
81175: PPUSH
81176: LD_VAR 0 2
81180: PPUSH
81181: LD_VAR 0 3
81185: PPUSH
81186: LD_VAR 0 5
81190: PPUSH
81191: CALL_OW 48
81195: ST_TO_ADDR
// end ;
81196: LD_VAR 0 6
81200: RET
// export function ToNaturalNumber ( number ) ; begin
81201: LD_INT 0
81203: PPUSH
// result := number div 1 ;
81204: LD_ADDR_VAR 0 2
81208: PUSH
81209: LD_VAR 0 1
81213: PUSH
81214: LD_INT 1
81216: DIV
81217: ST_TO_ADDR
// if number < 0 then
81218: LD_VAR 0 1
81222: PUSH
81223: LD_INT 0
81225: LESS
81226: IFFALSE 81236
// result := 0 ;
81228: LD_ADDR_VAR 0 2
81232: PUSH
81233: LD_INT 0
81235: ST_TO_ADDR
// end ;
81236: LD_VAR 0 2
81240: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
81241: LD_INT 0
81243: PPUSH
81244: PPUSH
81245: PPUSH
// if not buildings then
81246: LD_VAR 0 1
81250: NOT
81251: IFFALSE 81255
// exit ;
81253: GO 81370
// tmp := [ ] ;
81255: LD_ADDR_VAR 0 5
81259: PUSH
81260: EMPTY
81261: ST_TO_ADDR
// for b in buildings do
81262: LD_ADDR_VAR 0 4
81266: PUSH
81267: LD_VAR 0 1
81271: PUSH
81272: FOR_IN
81273: IFFALSE 81311
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
81275: LD_ADDR_VAR 0 5
81279: PUSH
81280: LD_VAR 0 5
81284: PPUSH
81285: LD_VAR 0 5
81289: PUSH
81290: LD_INT 1
81292: PLUS
81293: PPUSH
81294: LD_VAR 0 4
81298: PPUSH
81299: CALL_OW 266
81303: PPUSH
81304: CALL_OW 1
81308: ST_TO_ADDR
81309: GO 81272
81311: POP
81312: POP
// if not tmp then
81313: LD_VAR 0 5
81317: NOT
81318: IFFALSE 81322
// exit ;
81320: GO 81370
// if asc then
81322: LD_VAR 0 2
81326: IFFALSE 81350
// result := SortListByListAsc ( buildings , tmp ) else
81328: LD_ADDR_VAR 0 3
81332: PUSH
81333: LD_VAR 0 1
81337: PPUSH
81338: LD_VAR 0 5
81342: PPUSH
81343: CALL_OW 76
81347: ST_TO_ADDR
81348: GO 81370
// result := SortListByListDesc ( buildings , tmp ) ;
81350: LD_ADDR_VAR 0 3
81354: PUSH
81355: LD_VAR 0 1
81359: PPUSH
81360: LD_VAR 0 5
81364: PPUSH
81365: CALL_OW 77
81369: ST_TO_ADDR
// end ;
81370: LD_VAR 0 3
81374: RET
// export function SortByClass ( units , class ) ; var un ; begin
81375: LD_INT 0
81377: PPUSH
81378: PPUSH
// if not units or not class then
81379: LD_VAR 0 1
81383: NOT
81384: IFTRUE 81393
81386: PUSH
81387: LD_VAR 0 2
81391: NOT
81392: OR
81393: IFFALSE 81397
// exit ;
81395: GO 81492
// result := [ ] ;
81397: LD_ADDR_VAR 0 3
81401: PUSH
81402: EMPTY
81403: ST_TO_ADDR
// for un in units do
81404: LD_ADDR_VAR 0 4
81408: PUSH
81409: LD_VAR 0 1
81413: PUSH
81414: FOR_IN
81415: IFFALSE 81490
// if GetClass ( un ) = class then
81417: LD_VAR 0 4
81421: PPUSH
81422: CALL_OW 257
81426: PUSH
81427: LD_VAR 0 2
81431: EQUAL
81432: IFFALSE 81459
// result := Insert ( result , 1 , un ) else
81434: LD_ADDR_VAR 0 3
81438: PUSH
81439: LD_VAR 0 3
81443: PPUSH
81444: LD_INT 1
81446: PPUSH
81447: LD_VAR 0 4
81451: PPUSH
81452: CALL_OW 2
81456: ST_TO_ADDR
81457: GO 81488
// result := Replace ( result , result + 1 , un ) ;
81459: LD_ADDR_VAR 0 3
81463: PUSH
81464: LD_VAR 0 3
81468: PPUSH
81469: LD_VAR 0 3
81473: PUSH
81474: LD_INT 1
81476: PLUS
81477: PPUSH
81478: LD_VAR 0 4
81482: PPUSH
81483: CALL_OW 1
81487: ST_TO_ADDR
81488: GO 81414
81490: POP
81491: POP
// end ;
81492: LD_VAR 0 3
81496: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
81497: LD_INT 0
81499: PPUSH
81500: PPUSH
81501: PPUSH
81502: PPUSH
81503: PPUSH
81504: PPUSH
81505: PPUSH
// result := [ ] ;
81506: LD_ADDR_VAR 0 4
81510: PUSH
81511: EMPTY
81512: ST_TO_ADDR
// if x - r < 0 then
81513: LD_VAR 0 1
81517: PUSH
81518: LD_VAR 0 3
81522: MINUS
81523: PUSH
81524: LD_INT 0
81526: LESS
81527: IFFALSE 81539
// min_x := 0 else
81529: LD_ADDR_VAR 0 8
81533: PUSH
81534: LD_INT 0
81536: ST_TO_ADDR
81537: GO 81555
// min_x := x - r ;
81539: LD_ADDR_VAR 0 8
81543: PUSH
81544: LD_VAR 0 1
81548: PUSH
81549: LD_VAR 0 3
81553: MINUS
81554: ST_TO_ADDR
// if y - r < 0 then
81555: LD_VAR 0 2
81559: PUSH
81560: LD_VAR 0 3
81564: MINUS
81565: PUSH
81566: LD_INT 0
81568: LESS
81569: IFFALSE 81581
// min_y := 0 else
81571: LD_ADDR_VAR 0 7
81575: PUSH
81576: LD_INT 0
81578: ST_TO_ADDR
81579: GO 81597
// min_y := y - r ;
81581: LD_ADDR_VAR 0 7
81585: PUSH
81586: LD_VAR 0 2
81590: PUSH
81591: LD_VAR 0 3
81595: MINUS
81596: ST_TO_ADDR
// max_x := x + r ;
81597: LD_ADDR_VAR 0 9
81601: PUSH
81602: LD_VAR 0 1
81606: PUSH
81607: LD_VAR 0 3
81611: PLUS
81612: ST_TO_ADDR
// max_y := y + r ;
81613: LD_ADDR_VAR 0 10
81617: PUSH
81618: LD_VAR 0 2
81622: PUSH
81623: LD_VAR 0 3
81627: PLUS
81628: ST_TO_ADDR
// for _x = min_x to max_x do
81629: LD_ADDR_VAR 0 5
81633: PUSH
81634: DOUBLE
81635: LD_VAR 0 8
81639: DEC
81640: ST_TO_ADDR
81641: LD_VAR 0 9
81645: PUSH
81646: FOR_TO
81647: IFFALSE 81748
// for _y = min_y to max_y do
81649: LD_ADDR_VAR 0 6
81653: PUSH
81654: DOUBLE
81655: LD_VAR 0 7
81659: DEC
81660: ST_TO_ADDR
81661: LD_VAR 0 10
81665: PUSH
81666: FOR_TO
81667: IFFALSE 81744
// begin if not ValidHex ( _x , _y ) then
81669: LD_VAR 0 5
81673: PPUSH
81674: LD_VAR 0 6
81678: PPUSH
81679: CALL_OW 488
81683: NOT
81684: IFFALSE 81688
// continue ;
81686: GO 81666
// if GetResourceTypeXY ( _x , _y ) then
81688: LD_VAR 0 5
81692: PPUSH
81693: LD_VAR 0 6
81697: PPUSH
81698: CALL_OW 283
81702: IFFALSE 81742
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81704: LD_ADDR_VAR 0 4
81708: PUSH
81709: LD_VAR 0 4
81713: PPUSH
81714: LD_VAR 0 4
81718: PUSH
81719: LD_INT 1
81721: PLUS
81722: PPUSH
81723: LD_VAR 0 5
81727: PUSH
81728: LD_VAR 0 6
81732: PUSH
81733: EMPTY
81734: LIST
81735: LIST
81736: PPUSH
81737: CALL_OW 1
81741: ST_TO_ADDR
// end ;
81742: GO 81666
81744: POP
81745: POP
81746: GO 81646
81748: POP
81749: POP
// end ;
81750: LD_VAR 0 4
81754: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81755: LD_INT 0
81757: PPUSH
81758: PPUSH
81759: PPUSH
81760: PPUSH
81761: PPUSH
81762: PPUSH
81763: PPUSH
81764: PPUSH
// if not units then
81765: LD_VAR 0 1
81769: NOT
81770: IFFALSE 81774
// exit ;
81772: GO 82306
// result := UnitFilter ( units , [ f_ok ] ) ;
81774: LD_ADDR_VAR 0 3
81778: PUSH
81779: LD_VAR 0 1
81783: PPUSH
81784: LD_INT 50
81786: PUSH
81787: EMPTY
81788: LIST
81789: PPUSH
81790: CALL_OW 72
81794: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81795: LD_ADDR_VAR 0 8
81799: PUSH
81800: LD_VAR 0 1
81804: PUSH
81805: LD_INT 1
81807: ARRAY
81808: PPUSH
81809: CALL_OW 255
81813: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81814: LD_ADDR_VAR 0 10
81818: PUSH
81819: LD_INT 29
81821: PUSH
81822: LD_INT 91
81824: PUSH
81825: LD_INT 49
81827: PUSH
81828: EMPTY
81829: LIST
81830: LIST
81831: LIST
81832: ST_TO_ADDR
// if not result then
81833: LD_VAR 0 3
81837: NOT
81838: IFFALSE 81842
// exit ;
81840: GO 82306
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81842: LD_ADDR_VAR 0 5
81846: PUSH
81847: LD_INT 81
81849: PUSH
81850: LD_VAR 0 8
81854: PUSH
81855: EMPTY
81856: LIST
81857: LIST
81858: PPUSH
81859: CALL_OW 69
81863: ST_TO_ADDR
// for i in result do
81864: LD_ADDR_VAR 0 4
81868: PUSH
81869: LD_VAR 0 3
81873: PUSH
81874: FOR_IN
81875: IFFALSE 82304
// begin tag := GetTag ( i ) + 1 ;
81877: LD_ADDR_VAR 0 9
81881: PUSH
81882: LD_VAR 0 4
81886: PPUSH
81887: CALL_OW 110
81891: PUSH
81892: LD_INT 1
81894: PLUS
81895: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
81896: LD_ADDR_VAR 0 7
81900: PUSH
81901: LD_VAR 0 4
81905: PPUSH
81906: CALL_OW 250
81910: PPUSH
81911: LD_VAR 0 4
81915: PPUSH
81916: CALL_OW 251
81920: PPUSH
81921: LD_INT 4
81923: PPUSH
81924: CALL 81497 0 3
81928: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
81929: LD_VAR 0 4
81933: PPUSH
81934: CALL_OW 247
81938: PUSH
81939: LD_INT 2
81941: EQUAL
81942: IFFALSE 81954
81944: PUSH
81945: LD_VAR 0 7
81949: PUSH
81950: LD_INT 2
81952: GREATER
81953: AND
81954: IFFALSE 81974
81956: PUSH
81957: LD_VAR 0 4
81961: PPUSH
81962: CALL_OW 264
81966: PUSH
81967: LD_VAR 0 10
81971: IN
81972: NOT
81973: AND
81974: IFFALSE 82013
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81976: LD_VAR 0 4
81980: PPUSH
81981: LD_VAR 0 7
81985: PUSH
81986: LD_INT 1
81988: ARRAY
81989: PUSH
81990: LD_INT 1
81992: ARRAY
81993: PPUSH
81994: LD_VAR 0 7
81998: PUSH
81999: LD_INT 1
82001: ARRAY
82002: PUSH
82003: LD_INT 2
82005: ARRAY
82006: PPUSH
82007: CALL_OW 116
82011: GO 82302
// if path > tag then
82013: LD_VAR 0 2
82017: PUSH
82018: LD_VAR 0 9
82022: GREATER
82023: IFFALSE 82231
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
82025: LD_ADDR_VAR 0 6
82029: PUSH
82030: LD_VAR 0 5
82034: PPUSH
82035: LD_INT 91
82037: PUSH
82038: LD_VAR 0 4
82042: PUSH
82043: LD_INT 8
82045: PUSH
82046: EMPTY
82047: LIST
82048: LIST
82049: LIST
82050: PPUSH
82051: CALL_OW 72
82055: ST_TO_ADDR
// if nearEnemy then
82056: LD_VAR 0 6
82060: IFFALSE 82129
// begin if GetWeapon ( i ) = ru_time_lapser then
82062: LD_VAR 0 4
82066: PPUSH
82067: CALL_OW 264
82071: PUSH
82072: LD_INT 49
82074: EQUAL
82075: IFFALSE 82103
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
82077: LD_VAR 0 4
82081: PPUSH
82082: LD_VAR 0 6
82086: PPUSH
82087: LD_VAR 0 4
82091: PPUSH
82092: CALL_OW 74
82096: PPUSH
82097: CALL_OW 112
82101: GO 82127
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
82103: LD_VAR 0 4
82107: PPUSH
82108: LD_VAR 0 6
82112: PPUSH
82113: LD_VAR 0 4
82117: PPUSH
82118: CALL_OW 74
82122: PPUSH
82123: CALL 83387 0 2
// end else
82127: GO 82229
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
82129: LD_VAR 0 4
82133: PPUSH
82134: LD_VAR 0 2
82138: PUSH
82139: LD_VAR 0 9
82143: ARRAY
82144: PUSH
82145: LD_INT 1
82147: ARRAY
82148: PPUSH
82149: LD_VAR 0 2
82153: PUSH
82154: LD_VAR 0 9
82158: ARRAY
82159: PUSH
82160: LD_INT 2
82162: ARRAY
82163: PPUSH
82164: CALL_OW 297
82168: PUSH
82169: LD_INT 6
82171: GREATER
82172: IFFALSE 82215
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
82174: LD_VAR 0 4
82178: PPUSH
82179: LD_VAR 0 2
82183: PUSH
82184: LD_VAR 0 9
82188: ARRAY
82189: PUSH
82190: LD_INT 1
82192: ARRAY
82193: PPUSH
82194: LD_VAR 0 2
82198: PUSH
82199: LD_VAR 0 9
82203: ARRAY
82204: PUSH
82205: LD_INT 2
82207: ARRAY
82208: PPUSH
82209: CALL_OW 114
82213: GO 82229
// SetTag ( i , tag ) ;
82215: LD_VAR 0 4
82219: PPUSH
82220: LD_VAR 0 9
82224: PPUSH
82225: CALL_OW 109
// end else
82229: GO 82302
// if enemy then
82231: LD_VAR 0 5
82235: IFFALSE 82302
// begin if GetWeapon ( i ) = ru_time_lapser then
82237: LD_VAR 0 4
82241: PPUSH
82242: CALL_OW 264
82246: PUSH
82247: LD_INT 49
82249: EQUAL
82250: IFFALSE 82278
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
82252: LD_VAR 0 4
82256: PPUSH
82257: LD_VAR 0 5
82261: PPUSH
82262: LD_VAR 0 4
82266: PPUSH
82267: CALL_OW 74
82271: PPUSH
82272: CALL_OW 112
82276: GO 82302
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
82278: LD_VAR 0 4
82282: PPUSH
82283: LD_VAR 0 5
82287: PPUSH
82288: LD_VAR 0 4
82292: PPUSH
82293: CALL_OW 74
82297: PPUSH
82298: CALL 83387 0 2
// end ; end ;
82302: GO 81874
82304: POP
82305: POP
// end ;
82306: LD_VAR 0 3
82310: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
82311: LD_INT 0
82313: PPUSH
82314: PPUSH
82315: PPUSH
// if not unit or IsInUnit ( unit ) then
82316: LD_VAR 0 1
82320: NOT
82321: IFTRUE 82334
82323: PUSH
82324: LD_VAR 0 1
82328: PPUSH
82329: CALL_OW 310
82333: OR
82334: IFFALSE 82338
// exit ;
82336: GO 82429
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
82338: LD_ADDR_VAR 0 4
82342: PUSH
82343: LD_VAR 0 1
82347: PPUSH
82348: CALL_OW 250
82352: PPUSH
82353: LD_VAR 0 2
82357: PPUSH
82358: LD_INT 1
82360: PPUSH
82361: CALL_OW 272
82365: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
82366: LD_ADDR_VAR 0 5
82370: PUSH
82371: LD_VAR 0 1
82375: PPUSH
82376: CALL_OW 251
82380: PPUSH
82381: LD_VAR 0 2
82385: PPUSH
82386: LD_INT 1
82388: PPUSH
82389: CALL_OW 273
82393: ST_TO_ADDR
// if ValidHex ( x , y ) then
82394: LD_VAR 0 4
82398: PPUSH
82399: LD_VAR 0 5
82403: PPUSH
82404: CALL_OW 488
82408: IFFALSE 82429
// ComTurnXY ( unit , x , y ) ;
82410: LD_VAR 0 1
82414: PPUSH
82415: LD_VAR 0 4
82419: PPUSH
82420: LD_VAR 0 5
82424: PPUSH
82425: CALL_OW 118
// end ;
82429: LD_VAR 0 3
82433: RET
// export function SeeUnits ( side , units ) ; var i ; begin
82434: LD_INT 0
82436: PPUSH
82437: PPUSH
// result := false ;
82438: LD_ADDR_VAR 0 3
82442: PUSH
82443: LD_INT 0
82445: ST_TO_ADDR
// if not units then
82446: LD_VAR 0 2
82450: NOT
82451: IFFALSE 82455
// exit ;
82453: GO 82500
// for i in units do
82455: LD_ADDR_VAR 0 4
82459: PUSH
82460: LD_VAR 0 2
82464: PUSH
82465: FOR_IN
82466: IFFALSE 82498
// if See ( side , i ) then
82468: LD_VAR 0 1
82472: PPUSH
82473: LD_VAR 0 4
82477: PPUSH
82478: CALL_OW 292
82482: IFFALSE 82496
// begin result := true ;
82484: LD_ADDR_VAR 0 3
82488: PUSH
82489: LD_INT 1
82491: ST_TO_ADDR
// exit ;
82492: POP
82493: POP
82494: GO 82500
// end ;
82496: GO 82465
82498: POP
82499: POP
// end ;
82500: LD_VAR 0 3
82504: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
82505: LD_INT 0
82507: PPUSH
82508: PPUSH
82509: PPUSH
82510: PPUSH
// if not unit or not points then
82511: LD_VAR 0 1
82515: NOT
82516: IFTRUE 82525
82518: PUSH
82519: LD_VAR 0 2
82523: NOT
82524: OR
82525: IFFALSE 82529
// exit ;
82527: GO 82619
// dist := 99999 ;
82529: LD_ADDR_VAR 0 5
82533: PUSH
82534: LD_INT 99999
82536: ST_TO_ADDR
// for i in points do
82537: LD_ADDR_VAR 0 4
82541: PUSH
82542: LD_VAR 0 2
82546: PUSH
82547: FOR_IN
82548: IFFALSE 82617
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
82550: LD_ADDR_VAR 0 6
82554: PUSH
82555: LD_VAR 0 1
82559: PPUSH
82560: LD_VAR 0 4
82564: PUSH
82565: LD_INT 1
82567: ARRAY
82568: PPUSH
82569: LD_VAR 0 4
82573: PUSH
82574: LD_INT 2
82576: ARRAY
82577: PPUSH
82578: CALL_OW 297
82582: ST_TO_ADDR
// if tmpDist < dist then
82583: LD_VAR 0 6
82587: PUSH
82588: LD_VAR 0 5
82592: LESS
82593: IFFALSE 82615
// begin result := i ;
82595: LD_ADDR_VAR 0 3
82599: PUSH
82600: LD_VAR 0 4
82604: ST_TO_ADDR
// dist := tmpDist ;
82605: LD_ADDR_VAR 0 5
82609: PUSH
82610: LD_VAR 0 6
82614: ST_TO_ADDR
// end ; end ;
82615: GO 82547
82617: POP
82618: POP
// end ;
82619: LD_VAR 0 3
82623: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
82624: LD_INT 0
82626: PPUSH
// uc_side := side ;
82627: LD_ADDR_OWVAR 20
82631: PUSH
82632: LD_VAR 0 1
82636: ST_TO_ADDR
// uc_nation := 3 ;
82637: LD_ADDR_OWVAR 21
82641: PUSH
82642: LD_INT 3
82644: ST_TO_ADDR
// vc_chassis := 25 ;
82645: LD_ADDR_OWVAR 37
82649: PUSH
82650: LD_INT 25
82652: ST_TO_ADDR
// vc_engine := engine_siberite ;
82653: LD_ADDR_OWVAR 39
82657: PUSH
82658: LD_INT 3
82660: ST_TO_ADDR
// vc_control := control_computer ;
82661: LD_ADDR_OWVAR 38
82665: PUSH
82666: LD_INT 3
82668: ST_TO_ADDR
// vc_weapon := 59 ;
82669: LD_ADDR_OWVAR 40
82673: PUSH
82674: LD_INT 59
82676: ST_TO_ADDR
// result := CreateVehicle ;
82677: LD_ADDR_VAR 0 5
82681: PUSH
82682: CALL_OW 45
82686: ST_TO_ADDR
// SetDir ( result , d ) ;
82687: LD_VAR 0 5
82691: PPUSH
82692: LD_VAR 0 4
82696: PPUSH
82697: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
82701: LD_VAR 0 5
82705: PPUSH
82706: LD_VAR 0 2
82710: PPUSH
82711: LD_VAR 0 3
82715: PPUSH
82716: LD_INT 0
82718: PPUSH
82719: CALL_OW 48
// end ;
82723: LD_VAR 0 5
82727: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
82728: LD_INT 0
82730: PPUSH
82731: PPUSH
82732: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
82733: LD_ADDR_VAR 0 2
82737: PUSH
82738: LD_INT 0
82740: PUSH
82741: LD_INT 0
82743: PUSH
82744: LD_INT 0
82746: PUSH
82747: LD_INT 0
82749: PUSH
82750: EMPTY
82751: LIST
82752: LIST
82753: LIST
82754: LIST
82755: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
82756: LD_VAR 0 1
82760: NOT
82761: IFTRUE 82794
82763: PUSH
82764: LD_VAR 0 1
82768: PPUSH
82769: CALL_OW 264
82773: PUSH
82774: LD_INT 12
82776: PUSH
82777: LD_INT 51
82779: PUSH
82780: LD_INT 32
82782: PUSH
82783: LD_INT 89
82785: PUSH
82786: EMPTY
82787: LIST
82788: LIST
82789: LIST
82790: LIST
82791: IN
82792: NOT
82793: OR
82794: IFFALSE 82798
// exit ;
82796: GO 82896
// for i := 1 to 3 do
82798: LD_ADDR_VAR 0 3
82802: PUSH
82803: DOUBLE
82804: LD_INT 1
82806: DEC
82807: ST_TO_ADDR
82808: LD_INT 3
82810: PUSH
82811: FOR_TO
82812: IFFALSE 82894
// begin tmp := GetCargo ( cargo , i ) ;
82814: LD_ADDR_VAR 0 4
82818: PUSH
82819: LD_VAR 0 1
82823: PPUSH
82824: LD_VAR 0 3
82828: PPUSH
82829: CALL_OW 289
82833: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82834: LD_ADDR_VAR 0 2
82838: PUSH
82839: LD_VAR 0 2
82843: PPUSH
82844: LD_VAR 0 3
82848: PPUSH
82849: LD_VAR 0 4
82853: PPUSH
82854: CALL_OW 1
82858: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82859: LD_ADDR_VAR 0 2
82863: PUSH
82864: LD_VAR 0 2
82868: PPUSH
82869: LD_INT 4
82871: PPUSH
82872: LD_VAR 0 2
82876: PUSH
82877: LD_INT 4
82879: ARRAY
82880: PUSH
82881: LD_VAR 0 4
82885: PLUS
82886: PPUSH
82887: CALL_OW 1
82891: ST_TO_ADDR
// end ;
82892: GO 82811
82894: POP
82895: POP
// end ;
82896: LD_VAR 0 2
82900: RET
// export function Length ( array ) ; begin
82901: LD_INT 0
82903: PPUSH
// result := array + 0 ;
82904: LD_ADDR_VAR 0 2
82908: PUSH
82909: LD_VAR 0 1
82913: PUSH
82914: LD_INT 0
82916: PLUS
82917: ST_TO_ADDR
// end ;
82918: LD_VAR 0 2
82922: RET
// export function PrepareArray ( array ) ; begin
82923: LD_INT 0
82925: PPUSH
// result := array diff 0 ;
82926: LD_ADDR_VAR 0 2
82930: PUSH
82931: LD_VAR 0 1
82935: PUSH
82936: LD_INT 0
82938: DIFF
82939: ST_TO_ADDR
// if not result [ 1 ] then
82940: LD_VAR 0 2
82944: PUSH
82945: LD_INT 1
82947: ARRAY
82948: NOT
82949: IFFALSE 82969
// result := Delete ( result , 1 ) ;
82951: LD_ADDR_VAR 0 2
82955: PUSH
82956: LD_VAR 0 2
82960: PPUSH
82961: LD_INT 1
82963: PPUSH
82964: CALL_OW 3
82968: ST_TO_ADDR
// end ;
82969: LD_VAR 0 2
82973: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82974: LD_INT 0
82976: PPUSH
82977: PPUSH
82978: PPUSH
82979: PPUSH
// sibRocketRange := 25 ;
82980: LD_ADDR_VAR 0 6
82984: PUSH
82985: LD_INT 25
82987: ST_TO_ADDR
// result := false ;
82988: LD_ADDR_VAR 0 4
82992: PUSH
82993: LD_INT 0
82995: ST_TO_ADDR
// for i := 0 to 5 do
82996: LD_ADDR_VAR 0 5
83000: PUSH
83001: DOUBLE
83002: LD_INT 0
83004: DEC
83005: ST_TO_ADDR
83006: LD_INT 5
83008: PUSH
83009: FOR_TO
83010: IFFALSE 83077
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
83012: LD_VAR 0 1
83016: PPUSH
83017: LD_VAR 0 5
83021: PPUSH
83022: LD_VAR 0 6
83026: PPUSH
83027: CALL_OW 272
83031: PPUSH
83032: LD_VAR 0 2
83036: PPUSH
83037: LD_VAR 0 5
83041: PPUSH
83042: LD_VAR 0 6
83046: PPUSH
83047: CALL_OW 273
83051: PPUSH
83052: LD_VAR 0 3
83056: PPUSH
83057: CALL_OW 309
83061: IFFALSE 83075
// begin result := true ;
83063: LD_ADDR_VAR 0 4
83067: PUSH
83068: LD_INT 1
83070: ST_TO_ADDR
// exit ;
83071: POP
83072: POP
83073: GO 83079
// end ;
83075: GO 83009
83077: POP
83078: POP
// end ;
83079: LD_VAR 0 4
83083: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
83084: LD_INT 0
83086: PPUSH
83087: PPUSH
83088: PPUSH
// if btype = b_depot then
83089: LD_VAR 0 2
83093: PUSH
83094: LD_INT 0
83096: EQUAL
83097: IFFALSE 83109
// begin result := true ;
83099: LD_ADDR_VAR 0 3
83103: PUSH
83104: LD_INT 1
83106: ST_TO_ADDR
// exit ;
83107: GO 83229
// end ; pom := GetBase ( depot ) ;
83109: LD_ADDR_VAR 0 4
83113: PUSH
83114: LD_VAR 0 1
83118: PPUSH
83119: CALL_OW 274
83123: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
83124: LD_ADDR_VAR 0 5
83128: PUSH
83129: LD_VAR 0 2
83133: PPUSH
83134: LD_VAR 0 1
83138: PPUSH
83139: CALL_OW 248
83143: PPUSH
83144: CALL_OW 450
83148: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
83149: LD_ADDR_VAR 0 3
83153: PUSH
83154: LD_VAR 0 4
83158: PPUSH
83159: LD_INT 1
83161: PPUSH
83162: CALL_OW 275
83166: PUSH
83167: LD_VAR 0 5
83171: PUSH
83172: LD_INT 1
83174: ARRAY
83175: GREATEREQUAL
83176: IFFALSE 83202
83178: PUSH
83179: LD_VAR 0 4
83183: PPUSH
83184: LD_INT 2
83186: PPUSH
83187: CALL_OW 275
83191: PUSH
83192: LD_VAR 0 5
83196: PUSH
83197: LD_INT 2
83199: ARRAY
83200: GREATEREQUAL
83201: AND
83202: IFFALSE 83228
83204: PUSH
83205: LD_VAR 0 4
83209: PPUSH
83210: LD_INT 3
83212: PPUSH
83213: CALL_OW 275
83217: PUSH
83218: LD_VAR 0 5
83222: PUSH
83223: LD_INT 3
83225: ARRAY
83226: GREATEREQUAL
83227: AND
83228: ST_TO_ADDR
// end ;
83229: LD_VAR 0 3
83233: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
83234: LD_INT 0
83236: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
83237: LD_VAR 0 1
83241: PPUSH
83242: LD_VAR 0 2
83246: PPUSH
83247: LD_INT 0
83249: PPUSH
83250: LD_INT 0
83252: PPUSH
83253: LD_INT 1
83255: PPUSH
83256: LD_INT 0
83258: PPUSH
83259: CALL_OW 587
// end ;
83263: LD_VAR 0 3
83267: RET
// export function CenterOnNow ( unit ) ; begin
83268: LD_INT 0
83270: PPUSH
// result := IsInUnit ( unit ) ;
83271: LD_ADDR_VAR 0 2
83275: PUSH
83276: LD_VAR 0 1
83280: PPUSH
83281: CALL_OW 310
83285: ST_TO_ADDR
// if not result then
83286: LD_VAR 0 2
83290: NOT
83291: IFFALSE 83303
// result := unit ;
83293: LD_ADDR_VAR 0 2
83297: PUSH
83298: LD_VAR 0 1
83302: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
83303: LD_VAR 0 1
83307: PPUSH
83308: CALL_OW 87
// end ;
83312: LD_VAR 0 2
83316: RET
// export function ComMoveHex ( unit , hex ) ; begin
83317: LD_INT 0
83319: PPUSH
// if not hex then
83320: LD_VAR 0 2
83324: NOT
83325: IFFALSE 83329
// exit ;
83327: GO 83382
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
83329: LD_VAR 0 2
83333: PUSH
83334: LD_INT 1
83336: ARRAY
83337: PPUSH
83338: LD_VAR 0 2
83342: PUSH
83343: LD_INT 2
83345: ARRAY
83346: PPUSH
83347: CALL_OW 428
83351: IFFALSE 83355
// exit ;
83353: GO 83382
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
83355: LD_VAR 0 1
83359: PPUSH
83360: LD_VAR 0 2
83364: PUSH
83365: LD_INT 1
83367: ARRAY
83368: PPUSH
83369: LD_VAR 0 2
83373: PUSH
83374: LD_INT 2
83376: ARRAY
83377: PPUSH
83378: CALL_OW 111
// end ;
83382: LD_VAR 0 3
83386: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
83387: LD_INT 0
83389: PPUSH
83390: PPUSH
83391: PPUSH
// if not unit or not enemy then
83392: LD_VAR 0 1
83396: NOT
83397: IFTRUE 83406
83399: PUSH
83400: LD_VAR 0 2
83404: NOT
83405: OR
83406: IFFALSE 83410
// exit ;
83408: GO 83536
// x := GetX ( enemy ) ;
83410: LD_ADDR_VAR 0 4
83414: PUSH
83415: LD_VAR 0 2
83419: PPUSH
83420: CALL_OW 250
83424: ST_TO_ADDR
// y := GetY ( enemy ) ;
83425: LD_ADDR_VAR 0 5
83429: PUSH
83430: LD_VAR 0 2
83434: PPUSH
83435: CALL_OW 251
83439: ST_TO_ADDR
// if ValidHex ( x , y ) then
83440: LD_VAR 0 4
83444: PPUSH
83445: LD_VAR 0 5
83449: PPUSH
83450: CALL_OW 488
83454: IFFALSE 83536
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
83456: LD_VAR 0 2
83460: PPUSH
83461: CALL_OW 247
83465: PUSH
83466: LD_INT 3
83468: PUSH
83469: LD_INT 2
83471: PUSH
83472: EMPTY
83473: LIST
83474: LIST
83475: IN
83476: IFTRUE 83499
83478: PUSH
83479: LD_VAR 0 1
83483: PPUSH
83484: CALL_OW 255
83488: PPUSH
83489: LD_VAR 0 2
83493: PPUSH
83494: CALL_OW 292
83498: OR
83499: IFFALSE 83517
// ComAttackUnit ( unit , enemy ) else
83501: LD_VAR 0 1
83505: PPUSH
83506: LD_VAR 0 2
83510: PPUSH
83511: CALL_OW 115
83515: GO 83536
// ComAgressiveMove ( unit , x , y ) ;
83517: LD_VAR 0 1
83521: PPUSH
83522: LD_VAR 0 4
83526: PPUSH
83527: LD_VAR 0 5
83531: PPUSH
83532: CALL_OW 114
// end ;
83536: LD_VAR 0 3
83540: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
83541: LD_INT 0
83543: PPUSH
83544: PPUSH
83545: PPUSH
// list := AreaToList ( area , 0 ) ;
83546: LD_ADDR_VAR 0 5
83550: PUSH
83551: LD_VAR 0 1
83555: PPUSH
83556: LD_INT 0
83558: PPUSH
83559: CALL_OW 517
83563: ST_TO_ADDR
// if not list then
83564: LD_VAR 0 5
83568: NOT
83569: IFFALSE 83573
// exit ;
83571: GO 83703
// if all then
83573: LD_VAR 0 2
83577: IFFALSE 83665
// begin for i := 1 to list [ 1 ] do
83579: LD_ADDR_VAR 0 4
83583: PUSH
83584: DOUBLE
83585: LD_INT 1
83587: DEC
83588: ST_TO_ADDR
83589: LD_VAR 0 5
83593: PUSH
83594: LD_INT 1
83596: ARRAY
83597: PUSH
83598: FOR_TO
83599: IFFALSE 83661
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
83601: LD_ADDR_VAR 0 3
83605: PUSH
83606: LD_VAR 0 3
83610: PPUSH
83611: LD_VAR 0 3
83615: PUSH
83616: LD_INT 1
83618: PLUS
83619: PPUSH
83620: LD_VAR 0 5
83624: PUSH
83625: LD_INT 1
83627: ARRAY
83628: PUSH
83629: LD_VAR 0 4
83633: ARRAY
83634: PUSH
83635: LD_VAR 0 5
83639: PUSH
83640: LD_INT 2
83642: ARRAY
83643: PUSH
83644: LD_VAR 0 4
83648: ARRAY
83649: PUSH
83650: EMPTY
83651: LIST
83652: LIST
83653: PPUSH
83654: CALL_OW 1
83658: ST_TO_ADDR
83659: GO 83598
83661: POP
83662: POP
// exit ;
83663: GO 83703
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
83665: LD_ADDR_VAR 0 3
83669: PUSH
83670: LD_VAR 0 5
83674: PUSH
83675: LD_INT 1
83677: ARRAY
83678: PUSH
83679: LD_INT 1
83681: ARRAY
83682: PUSH
83683: LD_VAR 0 5
83687: PUSH
83688: LD_INT 2
83690: ARRAY
83691: PUSH
83692: LD_INT 1
83694: ARRAY
83695: PUSH
83696: EMPTY
83697: LIST
83698: LIST
83699: PUSH
83700: EMPTY
83701: LIST
83702: ST_TO_ADDR
// end ;
83703: LD_VAR 0 3
83707: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
83708: LD_INT 0
83710: PPUSH
83711: PPUSH
// list := AreaToList ( area , 0 ) ;
83712: LD_ADDR_VAR 0 4
83716: PUSH
83717: LD_VAR 0 1
83721: PPUSH
83722: LD_INT 0
83724: PPUSH
83725: CALL_OW 517
83729: ST_TO_ADDR
// if not list then
83730: LD_VAR 0 4
83734: NOT
83735: IFFALSE 83739
// exit ;
83737: GO 83780
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
83739: LD_ADDR_VAR 0 3
83743: PUSH
83744: LD_VAR 0 4
83748: PUSH
83749: LD_INT 1
83751: ARRAY
83752: PUSH
83753: LD_INT 1
83755: ARRAY
83756: PUSH
83757: LD_VAR 0 4
83761: PUSH
83762: LD_INT 2
83764: ARRAY
83765: PUSH
83766: LD_INT 1
83768: ARRAY
83769: PUSH
83770: LD_VAR 0 2
83774: PUSH
83775: EMPTY
83776: LIST
83777: LIST
83778: LIST
83779: ST_TO_ADDR
// end ;
83780: LD_VAR 0 3
83784: RET
// export function First ( array ) ; begin
83785: LD_INT 0
83787: PPUSH
// if not array then
83788: LD_VAR 0 1
83792: NOT
83793: IFFALSE 83797
// exit ;
83795: GO 83811
// result := array [ 1 ] ;
83797: LD_ADDR_VAR 0 2
83801: PUSH
83802: LD_VAR 0 1
83806: PUSH
83807: LD_INT 1
83809: ARRAY
83810: ST_TO_ADDR
// end ;
83811: LD_VAR 0 2
83815: RET
// export function Last ( array ) ; begin
83816: LD_INT 0
83818: PPUSH
// if not array then
83819: LD_VAR 0 1
83823: NOT
83824: IFFALSE 83828
// exit ;
83826: GO 83844
// result := array [ array ] ;
83828: LD_ADDR_VAR 0 2
83832: PUSH
83833: LD_VAR 0 1
83837: PUSH
83838: LD_VAR 0 1
83842: ARRAY
83843: ST_TO_ADDR
// end ;
83844: LD_VAR 0 2
83848: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
83849: LD_INT 0
83851: PPUSH
83852: PPUSH
// result := [ ] ;
83853: LD_ADDR_VAR 0 5
83857: PUSH
83858: EMPTY
83859: ST_TO_ADDR
// if not array then
83860: LD_VAR 0 1
83864: NOT
83865: IFFALSE 83869
// exit ;
83867: GO 83981
// for i := 1 to array do
83869: LD_ADDR_VAR 0 6
83873: PUSH
83874: DOUBLE
83875: LD_INT 1
83877: DEC
83878: ST_TO_ADDR
83879: LD_VAR 0 1
83883: PUSH
83884: FOR_TO
83885: IFFALSE 83979
// if array [ i ] [ index ] = value then
83887: LD_VAR 0 1
83891: PUSH
83892: LD_VAR 0 6
83896: ARRAY
83897: PUSH
83898: LD_VAR 0 2
83902: ARRAY
83903: PUSH
83904: LD_VAR 0 3
83908: EQUAL
83909: IFFALSE 83977
// begin if indexColumn then
83911: LD_VAR 0 4
83915: IFFALSE 83951
// result := Join ( result , array [ i ] [ indexColumn ] ) else
83917: LD_ADDR_VAR 0 5
83921: PUSH
83922: LD_VAR 0 5
83926: PPUSH
83927: LD_VAR 0 1
83931: PUSH
83932: LD_VAR 0 6
83936: ARRAY
83937: PUSH
83938: LD_VAR 0 4
83942: ARRAY
83943: PPUSH
83944: CALL 78989 0 2
83948: ST_TO_ADDR
83949: GO 83977
// result := Join ( result , array [ i ] ) ;
83951: LD_ADDR_VAR 0 5
83955: PUSH
83956: LD_VAR 0 5
83960: PPUSH
83961: LD_VAR 0 1
83965: PUSH
83966: LD_VAR 0 6
83970: ARRAY
83971: PPUSH
83972: CALL 78989 0 2
83976: ST_TO_ADDR
// end ;
83977: GO 83884
83979: POP
83980: POP
// end ;
83981: LD_VAR 0 5
83985: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
83986: LD_INT 0
83988: PPUSH
// if not vehicles or not parkingPoint then
83989: LD_VAR 0 1
83993: NOT
83994: IFTRUE 84003
83996: PUSH
83997: LD_VAR 0 2
84001: NOT
84002: OR
84003: IFFALSE 84007
// exit ;
84005: GO 84105
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
84007: LD_ADDR_VAR 0 1
84011: PUSH
84012: LD_VAR 0 1
84016: PPUSH
84017: LD_INT 50
84019: PUSH
84020: EMPTY
84021: LIST
84022: PUSH
84023: LD_INT 3
84025: PUSH
84026: LD_INT 92
84028: PUSH
84029: LD_VAR 0 2
84033: PUSH
84034: LD_INT 1
84036: ARRAY
84037: PUSH
84038: LD_VAR 0 2
84042: PUSH
84043: LD_INT 2
84045: ARRAY
84046: PUSH
84047: LD_INT 8
84049: PUSH
84050: EMPTY
84051: LIST
84052: LIST
84053: LIST
84054: LIST
84055: PUSH
84056: EMPTY
84057: LIST
84058: LIST
84059: PUSH
84060: EMPTY
84061: LIST
84062: LIST
84063: PPUSH
84064: CALL_OW 72
84068: ST_TO_ADDR
// if not vehicles then
84069: LD_VAR 0 1
84073: NOT
84074: IFFALSE 84078
// exit ;
84076: GO 84105
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
84078: LD_VAR 0 1
84082: PPUSH
84083: LD_VAR 0 2
84087: PUSH
84088: LD_INT 1
84090: ARRAY
84091: PPUSH
84092: LD_VAR 0 2
84096: PUSH
84097: LD_INT 2
84099: ARRAY
84100: PPUSH
84101: CALL_OW 111
// end ;
84105: LD_VAR 0 3
84109: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
84110: LD_INT 0
84112: PPUSH
84113: PPUSH
84114: PPUSH
// if not side or not area then
84115: LD_VAR 0 1
84119: NOT
84120: IFTRUE 84129
84122: PUSH
84123: LD_VAR 0 2
84127: NOT
84128: OR
84129: IFFALSE 84133
// exit ;
84131: GO 84252
// tmp := AreaToList ( area , 0 ) ;
84133: LD_ADDR_VAR 0 5
84137: PUSH
84138: LD_VAR 0 2
84142: PPUSH
84143: LD_INT 0
84145: PPUSH
84146: CALL_OW 517
84150: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
84151: LD_ADDR_VAR 0 4
84155: PUSH
84156: DOUBLE
84157: LD_INT 1
84159: DEC
84160: ST_TO_ADDR
84161: LD_VAR 0 5
84165: PUSH
84166: LD_INT 1
84168: ARRAY
84169: PUSH
84170: FOR_TO
84171: IFFALSE 84250
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
84173: LD_VAR 0 5
84177: PUSH
84178: LD_INT 1
84180: ARRAY
84181: PUSH
84182: LD_VAR 0 4
84186: ARRAY
84187: PPUSH
84188: LD_VAR 0 5
84192: PUSH
84193: LD_INT 2
84195: ARRAY
84196: PUSH
84197: LD_VAR 0 4
84201: ARRAY
84202: PPUSH
84203: CALL_OW 351
84207: IFFALSE 84248
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
84209: LD_VAR 0 5
84213: PUSH
84214: LD_INT 1
84216: ARRAY
84217: PUSH
84218: LD_VAR 0 4
84222: ARRAY
84223: PPUSH
84224: LD_VAR 0 5
84228: PUSH
84229: LD_INT 2
84231: ARRAY
84232: PUSH
84233: LD_VAR 0 4
84237: ARRAY
84238: PPUSH
84239: LD_VAR 0 1
84243: PPUSH
84244: CALL_OW 244
// end ;
84248: GO 84170
84250: POP
84251: POP
// end ;
84252: LD_VAR 0 3
84256: RET
// export function UniqueArray ( array ) ; var i ; begin
84257: LD_INT 0
84259: PPUSH
84260: PPUSH
// result := [ ] ;
84261: LD_ADDR_VAR 0 2
84265: PUSH
84266: EMPTY
84267: ST_TO_ADDR
// if not array then
84268: LD_VAR 0 1
84272: NOT
84273: IFFALSE 84277
// exit ;
84275: GO 84338
// for i := 1 to array do
84277: LD_ADDR_VAR 0 3
84281: PUSH
84282: DOUBLE
84283: LD_INT 1
84285: DEC
84286: ST_TO_ADDR
84287: LD_VAR 0 1
84291: PUSH
84292: FOR_TO
84293: IFFALSE 84336
// if not array [ i ] in result then
84295: LD_VAR 0 1
84299: PUSH
84300: LD_VAR 0 3
84304: ARRAY
84305: PUSH
84306: LD_VAR 0 2
84310: IN
84311: NOT
84312: IFFALSE 84334
// result := Join ( result , i ) ;
84314: LD_ADDR_VAR 0 2
84318: PUSH
84319: LD_VAR 0 2
84323: PPUSH
84324: LD_VAR 0 3
84328: PPUSH
84329: CALL 78989 0 2
84333: ST_TO_ADDR
84334: GO 84292
84336: POP
84337: POP
// end ; end_of_file
84338: LD_VAR 0 2
84342: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
84343: LD_VAR 0 1
84347: PPUSH
84348: LD_VAR 0 2
84352: PPUSH
84353: LD_VAR 0 3
84357: PPUSH
84358: LD_VAR 0 4
84362: PPUSH
84363: LD_VAR 0 5
84367: PPUSH
84368: LD_VAR 0 6
84372: PPUSH
84373: CALL 18245 0 6
// end ;
84377: PPOPN 6
84379: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
84380: LD_INT 0
84382: PPUSH
// begin if not units then
84383: LD_VAR 0 1
84387: NOT
84388: IFFALSE 84392
// exit ;
84390: GO 84426
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
84392: LD_VAR 0 1
84396: PPUSH
84397: LD_VAR 0 2
84401: PPUSH
84402: LD_VAR 0 3
84406: PPUSH
84407: LD_VAR 0 4
84411: PPUSH
84412: LD_VAR 0 5
84416: PPUSH
84417: LD_VAR 0 6
84421: PPUSH
84422: CALL 40762 0 6
// end ;
84426: PPOPN 7
84428: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
84429: CALL 18125 0 0
// end ;
84433: PPOPN 1
84435: END
