// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// CreateNature ;
   8: CALL 837 0 0
// PrepareArabian ;
  12: CALL 1207 0 0
// PrepareAmerican ;
  16: CALL 6202 0 0
// PrepareRussian ;
  20: CALL 2163 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 7762 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 25 25$00 , 24 24$00 , 23 23$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 52500
 188: PUSH
 189: LD_INT 50400
 191: PUSH
 192: LD_INT 48300
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: PUSH
 200: LD_OWVAR 67
 204: ARRAY
 205: ST_TO_ADDR
// escapeCounter := 0 ;
 206: LD_ADDR_EXP 19
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// loseCounter := 0 ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// labCaptured := false ;
 222: LD_ADDR_EXP 21
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// hillBase := false ;
 230: LD_ADDR_EXP 15
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 238: LD_ADDR_EXP 8
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: LD_INT 4
 248: PUSH
 249: LD_INT 5
 251: PUSH
 252: LD_INT 6
 254: PUSH
 255: LD_INT 7
 257: PUSH
 258: LD_INT 8
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: LIST
 268: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 269: LD_ADDR_EXP 23
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// kaganCaptured := false ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// end ;
 285: LD_VAR 0 1
 289: RET
// every 0 0$1 trigger debug do var i ;
 290: LD_EXP 1
 294: IFFALSE 363
 296: GO 298
 298: DISABLE
 299: LD_INT 0
 301: PPUSH
// begin enable ;
 302: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 303: LD_ADDR_VAR 0 1
 307: PUSH
 308: LD_INT 22
 310: PUSH
 311: LD_INT 2
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: PUSH
 318: LD_INT 3
 320: PUSH
 321: LD_INT 21
 323: PUSH
 324: LD_INT 3
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: FOR_IN
 345: IFFALSE 361
// SetLives ( i , 1000 ) ;
 347: LD_VAR 0 1
 351: PPUSH
 352: LD_INT 1000
 354: PPUSH
 355: CALL_OW 234
 359: GO 344
 361: POP
 362: POP
// end ; end_of_file
 363: PPOPN 1
 365: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 366: LD_INT 0
 368: PPUSH
// uc_side := side ;
 369: LD_ADDR_OWVAR 20
 373: PUSH
 374: LD_VAR 0 1
 378: ST_TO_ADDR
// uc_nation := nation ;
 379: LD_ADDR_OWVAR 21
 383: PUSH
 384: LD_VAR 0 2
 388: ST_TO_ADDR
// vc_chassis := chassis ;
 389: LD_ADDR_OWVAR 37
 393: PUSH
 394: LD_VAR 0 3
 398: ST_TO_ADDR
// vc_engine := engine ;
 399: LD_ADDR_OWVAR 39
 403: PUSH
 404: LD_VAR 0 4
 408: ST_TO_ADDR
// vc_control := control ;
 409: LD_ADDR_OWVAR 38
 413: PUSH
 414: LD_VAR 0 5
 418: ST_TO_ADDR
// vc_weapon := weapon ;
 419: LD_ADDR_OWVAR 40
 423: PUSH
 424: LD_VAR 0 6
 428: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 429: LD_ADDR_OWVAR 41
 433: PUSH
 434: LD_VAR 0 7
 438: ST_TO_ADDR
// result := CreateVehicle ;
 439: LD_ADDR_VAR 0 8
 443: PUSH
 444: CALL_OW 45
 448: ST_TO_ADDR
// end ;
 449: LD_VAR 0 8
 453: RET
// export function SayX ( units , ident ) ; var i ; begin
 454: LD_INT 0
 456: PPUSH
 457: PPUSH
// result := false ;
 458: LD_ADDR_VAR 0 3
 462: PUSH
 463: LD_INT 0
 465: ST_TO_ADDR
// if not units then
 466: LD_VAR 0 1
 470: NOT
 471: IFFALSE 475
// exit ;
 473: GO 529
// for i in units do
 475: LD_ADDR_VAR 0 4
 479: PUSH
 480: LD_VAR 0 1
 484: PUSH
 485: FOR_IN
 486: IFFALSE 527
// if IsOk ( i ) then
 488: LD_VAR 0 4
 492: PPUSH
 493: CALL_OW 302
 497: IFFALSE 525
// begin Say ( i , ident ) ;
 499: LD_VAR 0 4
 503: PPUSH
 504: LD_VAR 0 2
 508: PPUSH
 509: CALL_OW 88
// result := i ;
 513: LD_ADDR_VAR 0 3
 517: PUSH
 518: LD_VAR 0 4
 522: ST_TO_ADDR
// break ;
 523: GO 527
// end ;
 525: GO 485
 527: POP
 528: POP
// end ;
 529: LD_VAR 0 3
 533: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 534: LD_INT 0
 536: PPUSH
 537: PPUSH
 538: PPUSH
// if not observer or not unit then
 539: LD_VAR 0 1
 543: NOT
 544: PUSH
 545: LD_VAR 0 2
 549: NOT
 550: OR
 551: IFFALSE 555
// exit ;
 553: GO 603
// if not See ( GetSide ( observer ) , unit ) then
 555: LD_VAR 0 1
 559: PPUSH
 560: CALL_OW 255
 564: PPUSH
 565: LD_VAR 0 2
 569: PPUSH
 570: CALL_OW 292
 574: NOT
 575: IFFALSE 579
// exit ;
 577: GO 603
// result := GetDistUnits ( observer , unit ) < 12 ;
 579: LD_ADDR_VAR 0 3
 583: PUSH
 584: LD_VAR 0 1
 588: PPUSH
 589: LD_VAR 0 2
 593: PPUSH
 594: CALL_OW 296
 598: PUSH
 599: LD_INT 12
 601: LESS
 602: ST_TO_ADDR
// end ;
 603: LD_VAR 0 3
 607: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 608: LD_INT 0
 610: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 611: LD_VAR 0 2
 615: PUSH
 616: LD_INT 1
 618: ARRAY
 619: PPUSH
 620: LD_VAR 0 2
 624: PUSH
 625: LD_INT 2
 627: ARRAY
 628: PPUSH
 629: CALL_OW 488
 633: PUSH
 634: LD_VAR 0 2
 638: PUSH
 639: LD_INT 1
 641: ARRAY
 642: PPUSH
 643: LD_VAR 0 2
 647: PUSH
 648: LD_INT 2
 650: ARRAY
 651: PPUSH
 652: CALL_OW 428
 656: PUSH
 657: LD_INT 0
 659: EQUAL
 660: AND
 661: IFFALSE 695
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 663: LD_VAR 0 1
 667: PPUSH
 668: LD_VAR 0 2
 672: PUSH
 673: LD_INT 1
 675: ARRAY
 676: PPUSH
 677: LD_VAR 0 2
 681: PUSH
 682: LD_INT 2
 684: ARRAY
 685: PPUSH
 686: LD_VAR 0 3
 690: PPUSH
 691: CALL_OW 48
// end ;
 695: LD_VAR 0 4
 699: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 700: LD_INT 0
 702: PPUSH
 703: PPUSH
// InitUc ;
 704: CALL_OW 18
// InitHc ;
 708: CALL_OW 19
// uc_side := 0 ;
 712: LD_ADDR_OWVAR 20
 716: PUSH
 717: LD_INT 0
 719: ST_TO_ADDR
// uc_nation := 0 ;
 720: LD_ADDR_OWVAR 21
 724: PUSH
 725: LD_INT 0
 727: ST_TO_ADDR
// for i = 1 to amount do
 728: LD_ADDR_VAR 0 4
 732: PUSH
 733: DOUBLE
 734: LD_INT 1
 736: DEC
 737: ST_TO_ADDR
 738: LD_VAR 0 2
 742: PUSH
 743: FOR_TO
 744: IFFALSE 826
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 746: LD_ADDR_OWVAR 29
 750: PUSH
 751: LD_INT 9
 753: PPUSH
 754: LD_INT 12
 756: PPUSH
 757: CALL_OW 12
 761: PUSH
 762: LD_INT 9
 764: PPUSH
 765: LD_INT 12
 767: PPUSH
 768: CALL_OW 12
 772: PUSH
 773: EMPTY
 774: LIST
 775: LIST
 776: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 777: LD_ADDR_OWVAR 35
 781: PUSH
 782: LD_INT 1
 784: NEG
 785: PPUSH
 786: LD_INT 1
 788: PPUSH
 789: CALL_OW 12
 793: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 794: LD_INT 0
 796: PPUSH
 797: LD_INT 12
 799: PPUSH
 800: LD_INT 1
 802: PPUSH
 803: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 807: CALL_OW 44
 811: PPUSH
 812: LD_VAR 0 1
 816: PPUSH
 817: LD_INT 0
 819: PPUSH
 820: CALL_OW 49
// end ;
 824: GO 743
 826: POP
 827: POP
// InitHc ;
 828: CALL_OW 19
// end ;
 832: LD_VAR 0 3
 836: RET
// export function CreateNature ; var i ; begin
 837: LD_INT 0
 839: PPUSH
 840: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
 841: LD_INT 18
 843: PPUSH
 844: LD_INT 5
 846: PUSH
 847: LD_INT 4
 849: PUSH
 850: LD_INT 3
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: LIST
 857: PUSH
 858: LD_OWVAR 67
 862: ARRAY
 863: PPUSH
 864: CALL 700 0 2
// for i := 1 to 3 do
 868: LD_ADDR_VAR 0 2
 872: PUSH
 873: DOUBLE
 874: LD_INT 1
 876: DEC
 877: ST_TO_ADDR
 878: LD_INT 3
 880: PUSH
 881: FOR_TO
 882: IFFALSE 917
// begin hc_class := 21 ;
 884: LD_ADDR_OWVAR 28
 888: PUSH
 889: LD_INT 21
 891: ST_TO_ADDR
// hc_gallery :=  ;
 892: LD_ADDR_OWVAR 33
 896: PUSH
 897: LD_STRING 
 899: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 900: CALL_OW 44
 904: PPUSH
 905: LD_INT 18
 907: PPUSH
 908: LD_INT 0
 910: PPUSH
 911: CALL_OW 49
// end ;
 915: GO 881
 917: POP
 918: POP
// for i := 1 to 2 do
 919: LD_ADDR_VAR 0 2
 923: PUSH
 924: DOUBLE
 925: LD_INT 1
 927: DEC
 928: ST_TO_ADDR
 929: LD_INT 2
 931: PUSH
 932: FOR_TO
 933: IFFALSE 968
// begin hc_class := 18 ;
 935: LD_ADDR_OWVAR 28
 939: PUSH
 940: LD_INT 18
 942: ST_TO_ADDR
// hc_gallery :=  ;
 943: LD_ADDR_OWVAR 33
 947: PUSH
 948: LD_STRING 
 950: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 951: CALL_OW 44
 955: PPUSH
 956: LD_INT 18
 958: PPUSH
 959: LD_INT 0
 961: PPUSH
 962: CALL_OW 49
// end ;
 966: GO 932
 968: POP
 969: POP
// for i := 1 to 2 do
 970: LD_ADDR_VAR 0 2
 974: PUSH
 975: DOUBLE
 976: LD_INT 1
 978: DEC
 979: ST_TO_ADDR
 980: LD_INT 2
 982: PUSH
 983: FOR_TO
 984: IFFALSE 1019
// begin hc_class := 13 ;
 986: LD_ADDR_OWVAR 28
 990: PUSH
 991: LD_INT 13
 993: ST_TO_ADDR
// hc_gallery :=  ;
 994: LD_ADDR_OWVAR 33
 998: PUSH
 999: LD_STRING 
1001: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1002: CALL_OW 44
1006: PPUSH
1007: LD_INT 18
1009: PPUSH
1010: LD_INT 0
1012: PPUSH
1013: CALL_OW 49
// end ;
1017: GO 983
1019: POP
1020: POP
// end ;
1021: LD_VAR 0 1
1025: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1026: LD_INT 0
1028: PPUSH
1029: PPUSH
1030: PPUSH
1031: PPUSH
1032: PPUSH
// result := false ;
1033: LD_ADDR_VAR 0 4
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// if not sideList or not enemySide then
1041: LD_VAR 0 1
1045: NOT
1046: PUSH
1047: LD_VAR 0 2
1051: NOT
1052: OR
1053: IFFALSE 1057
// exit ;
1055: GO 1202
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1057: LD_ADDR_VAR 0 7
1061: PUSH
1062: LD_INT 22
1064: PUSH
1065: LD_VAR 0 2
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: PPUSH
1074: CALL_OW 69
1078: ST_TO_ADDR
// if not tmp then
1079: LD_VAR 0 7
1083: NOT
1084: IFFALSE 1088
// exit ;
1086: GO 1202
// for s in sideList do
1088: LD_ADDR_VAR 0 6
1092: PUSH
1093: LD_VAR 0 1
1097: PUSH
1098: FOR_IN
1099: IFFALSE 1200
// for i in tmp do
1101: LD_ADDR_VAR 0 5
1105: PUSH
1106: LD_VAR 0 7
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1196
// if See ( s , i ) then
1114: LD_VAR 0 6
1118: PPUSH
1119: LD_VAR 0 5
1123: PPUSH
1124: CALL_OW 292
1128: IFFALSE 1194
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
1130: LD_ADDR_VAR 0 8
1134: PUSH
1135: LD_INT 22
1137: PUSH
1138: LD_VAR 0 6
1142: PUSH
1143: EMPTY
1144: LIST
1145: LIST
1146: PPUSH
1147: CALL_OW 69
1151: PPUSH
1152: LD_VAR 0 5
1156: PPUSH
1157: CALL_OW 74
1161: ST_TO_ADDR
// if tmp2 in exceptUnits then
1162: LD_VAR 0 8
1166: PUSH
1167: LD_VAR 0 3
1171: IN
1172: IFFALSE 1178
// continue else
1174: GO 1111
1176: GO 1194
// begin result := tmp2 ;
1178: LD_ADDR_VAR 0 4
1182: PUSH
1183: LD_VAR 0 8
1187: ST_TO_ADDR
// exit ;
1188: POP
1189: POP
1190: POP
1191: POP
1192: GO 1202
// end ; end ;
1194: GO 1111
1196: POP
1197: POP
1198: GO 1098
1200: POP
1201: POP
// end ; end_of_file
1202: LD_VAR 0 4
1206: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1207: LD_INT 0
1209: PPUSH
1210: PPUSH
// uc_side := 5 ;
1211: LD_ADDR_OWVAR 20
1215: PUSH
1216: LD_INT 5
1218: ST_TO_ADDR
// uc_nation := 2 ;
1219: LD_ADDR_OWVAR 21
1223: PUSH
1224: LD_INT 2
1226: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1227: LD_ADDR_EXP 36
1231: PUSH
1232: LD_STRING Abdul
1234: PPUSH
1235: LD_INT 0
1237: PPUSH
1238: LD_STRING 
1240: PPUSH
1241: CALL 34408 0 3
1245: ST_TO_ADDR
// uc_side := 2 ;
1246: LD_ADDR_OWVAR 20
1250: PUSH
1251: LD_INT 2
1253: ST_TO_ADDR
// uc_nation := 2 ;
1254: LD_ADDR_OWVAR 21
1258: PUSH
1259: LD_INT 2
1261: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1262: LD_ADDR_EXP 25
1266: PUSH
1267: LD_STRING Heike
1269: PPUSH
1270: LD_EXP 1
1274: NOT
1275: PPUSH
1276: LD_EXP 2
1280: PPUSH
1281: CALL 34408 0 3
1285: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1286: LD_ADDR_EXP 28
1290: PUSH
1291: LD_STRING Ibrahim
1293: PPUSH
1294: LD_EXP 1
1298: NOT
1299: PPUSH
1300: LD_EXP 2
1304: PPUSH
1305: CALL 34408 0 3
1309: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1310: LD_ADDR_EXP 26
1314: PUSH
1315: LD_STRING Givi
1317: PPUSH
1318: LD_EXP 1
1322: NOT
1323: PPUSH
1324: LD_EXP 2
1328: PPUSH
1329: CALL 34408 0 3
1333: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1334: LD_ADDR_EXP 29
1338: PUSH
1339: LD_STRING Kamil
1341: PPUSH
1342: LD_EXP 1
1346: NOT
1347: PPUSH
1348: LD_EXP 2
1352: PPUSH
1353: CALL 34408 0 3
1357: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1358: LD_ADDR_EXP 30
1362: PUSH
1363: LD_STRING Kaia
1365: PPUSH
1366: LD_EXP 1
1370: NOT
1371: PPUSH
1372: LD_EXP 2
1376: PPUSH
1377: CALL 34408 0 3
1381: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1382: LD_ADDR_EXP 31
1386: PUSH
1387: LD_STRING Sophia
1389: PPUSH
1390: LD_EXP 1
1394: NOT
1395: PPUSH
1396: LD_EXP 2
1400: PPUSH
1401: CALL 34408 0 3
1405: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1406: LD_ADDR_EXP 32
1410: PUSH
1411: LD_STRING Markov
1413: PPUSH
1414: LD_EXP 1
1418: NOT
1419: PPUSH
1420: LD_EXP 2
1424: PPUSH
1425: CALL 34408 0 3
1429: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1430: LD_ADDR_EXP 35
1434: PUSH
1435: LD_STRING Aviradze
1437: PPUSH
1438: LD_EXP 1
1442: NOT
1443: PPUSH
1444: LD_EXP 2
1448: PPUSH
1449: CALL 34408 0 3
1453: ST_TO_ADDR
// aviradzeSquad := [ ] ;
1454: LD_ADDR_EXP 39
1458: PUSH
1459: EMPTY
1460: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
1461: LD_ADDR_EXP 37
1465: PUSH
1466: LD_STRING 03_others
1468: PPUSH
1469: CALL_OW 31
1473: ST_TO_ADDR
// uc_side := 5 ;
1474: LD_ADDR_OWVAR 20
1478: PUSH
1479: LD_INT 5
1481: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
1482: LD_ADDR_EXP 34
1486: PUSH
1487: LD_STRING Kurt
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: LD_STRING 
1495: PPUSH
1496: CALL 34408 0 3
1500: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1501: LD_ADDR_EXP 27
1505: PUSH
1506: LD_STRING Mike
1508: PPUSH
1509: LD_EXP 1
1513: NOT
1514: PPUSH
1515: LD_EXP 2
1519: PPUSH
1520: CALL 34408 0 3
1524: ST_TO_ADDR
// if Mike then
1525: LD_EXP 27
1529: IFFALSE 1552
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
1531: LD_EXP 27
1535: PPUSH
1536: LD_INT 142
1538: PPUSH
1539: LD_INT 63
1541: PPUSH
1542: LD_INT 2
1544: PPUSH
1545: LD_INT 0
1547: PPUSH
1548: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
1552: LD_EXP 34
1556: PPUSH
1557: LD_INT 142
1559: PPUSH
1560: LD_INT 63
1562: PPUSH
1563: LD_INT 3
1565: PPUSH
1566: LD_INT 0
1568: PPUSH
1569: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
1573: LD_EXP 34
1577: PUSH
1578: LD_EXP 27
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: PPUSH
1587: CALL_OW 140
// end ;
1591: LD_VAR 0 1
1595: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
1596: LD_INT 0
1598: PPUSH
1599: PPUSH
1600: PPUSH
1601: PPUSH
// uc_side := 5 ;
1602: LD_ADDR_OWVAR 20
1606: PUSH
1607: LD_INT 5
1609: ST_TO_ADDR
// uc_nation := 2 ;
1610: LD_ADDR_OWVAR 21
1614: PUSH
1615: LD_INT 2
1617: ST_TO_ADDR
// InitHc ;
1618: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
1622: LD_ADDR_EXP 33
1626: PUSH
1627: LD_STRING Omar
1629: PPUSH
1630: LD_INT 0
1632: PPUSH
1633: LD_STRING 
1635: PPUSH
1636: CALL 34408 0 3
1640: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
1641: LD_EXP 33
1645: PPUSH
1646: LD_INT 284
1648: PPUSH
1649: LD_INT 163
1651: PPUSH
1652: LD_INT 0
1654: PPUSH
1655: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
1659: LD_EXP 33
1663: PPUSH
1664: LD_INT 256
1666: PPUSH
1667: LD_INT 129
1669: PPUSH
1670: CALL_OW 111
// wait ( 0 0$2 ) ;
1674: LD_INT 70
1676: PPUSH
1677: CALL_OW 67
// omarSquad := [ ] ;
1681: LD_ADDR_EXP 38
1685: PUSH
1686: EMPTY
1687: ST_TO_ADDR
// for i := 1 to 5 do
1688: LD_ADDR_VAR 0 2
1692: PUSH
1693: DOUBLE
1694: LD_INT 1
1696: DEC
1697: ST_TO_ADDR
1698: LD_INT 5
1700: PUSH
1701: FOR_TO
1702: IFFALSE 1908
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1704: LD_INT 5
1706: PPUSH
1707: LD_INT 2
1709: PPUSH
1710: LD_INT 13
1712: PUSH
1713: LD_INT 14
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: PUSH
1720: LD_VAR 0 2
1724: PUSH
1725: LD_INT 2
1727: MOD
1728: PUSH
1729: LD_INT 1
1731: PLUS
1732: ARRAY
1733: PPUSH
1734: LD_INT 1
1736: PPUSH
1737: LD_INT 1
1739: PPUSH
1740: LD_INT 25
1742: PUSH
1743: LD_INT 27
1745: PUSH
1746: LD_INT 26
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: LIST
1753: PUSH
1754: LD_VAR 0 2
1758: PUSH
1759: LD_INT 3
1761: MOD
1762: PUSH
1763: LD_INT 1
1765: PLUS
1766: ARRAY
1767: PPUSH
1768: LD_INT 100
1770: PPUSH
1771: CALL 366 0 7
// veh := CreateVehicle ;
1775: LD_ADDR_VAR 0 4
1779: PUSH
1780: CALL_OW 45
1784: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1785: LD_VAR 0 4
1789: PPUSH
1790: LD_INT 5
1792: PPUSH
1793: CALL_OW 233
// omarSquad := omarSquad union veh ;
1797: LD_ADDR_EXP 38
1801: PUSH
1802: LD_EXP 38
1806: PUSH
1807: LD_VAR 0 4
1811: UNION
1812: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
1813: LD_VAR 0 4
1817: PPUSH
1818: LD_INT 284
1820: PPUSH
1821: LD_INT 163
1823: PPUSH
1824: LD_INT 0
1826: PPUSH
1827: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
1831: LD_INT 0
1833: PPUSH
1834: LD_INT 3
1836: PPUSH
1837: LD_INT 2
1839: PPUSH
1840: CALL_OW 380
// un := CreateHuman ;
1844: LD_ADDR_VAR 0 3
1848: PUSH
1849: CALL_OW 44
1853: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1854: LD_ADDR_EXP 38
1858: PUSH
1859: LD_EXP 38
1863: PUSH
1864: LD_VAR 0 3
1868: UNION
1869: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1870: LD_VAR 0 3
1874: PPUSH
1875: LD_VAR 0 4
1879: PPUSH
1880: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
1884: LD_VAR 0 3
1888: PPUSH
1889: LD_INT 271
1891: PPUSH
1892: LD_INT 144
1894: PPUSH
1895: CALL_OW 111
// wait ( 0 0$2 ) ;
1899: LD_INT 70
1901: PPUSH
1902: CALL_OW 67
// end ;
1906: GO 1701
1908: POP
1909: POP
// for i := 1 to 3 do
1910: LD_ADDR_VAR 0 2
1914: PUSH
1915: DOUBLE
1916: LD_INT 1
1918: DEC
1919: ST_TO_ADDR
1920: LD_INT 3
1922: PUSH
1923: FOR_TO
1924: IFFALSE 2007
// begin PrepareHuman ( false , 1 , 2 ) ;
1926: LD_INT 0
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: LD_INT 2
1934: PPUSH
1935: CALL_OW 380
// un := CreateHuman ;
1939: LD_ADDR_VAR 0 3
1943: PUSH
1944: CALL_OW 44
1948: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1949: LD_ADDR_EXP 38
1953: PUSH
1954: LD_EXP 38
1958: PUSH
1959: LD_VAR 0 3
1963: UNION
1964: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
1965: LD_VAR 0 3
1969: PPUSH
1970: LD_INT 284
1972: PPUSH
1973: LD_INT 163
1975: PPUSH
1976: LD_INT 0
1978: PPUSH
1979: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
1983: LD_VAR 0 3
1987: PPUSH
1988: LD_INT 257
1990: PPUSH
1991: LD_INT 138
1993: PPUSH
1994: CALL_OW 111
// wait ( 0 0$1 ) ;
1998: LD_INT 35
2000: PPUSH
2001: CALL_OW 67
// end ;
2005: GO 1923
2007: POP
2008: POP
// for i := 1 to 6 do
2009: LD_ADDR_VAR 0 2
2013: PUSH
2014: DOUBLE
2015: LD_INT 1
2017: DEC
2018: ST_TO_ADDR
2019: LD_INT 6
2021: PUSH
2022: FOR_TO
2023: IFFALSE 2156
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 1
2030: PUSH
2031: LD_INT 1
2033: PUSH
2034: LD_INT 4
2036: PUSH
2037: EMPTY
2038: LIST
2039: LIST
2040: LIST
2041: PUSH
2042: LD_VAR 0 2
2046: PUSH
2047: LD_INT 3
2049: MOD
2050: PUSH
2051: LD_INT 1
2053: PLUS
2054: ARRAY
2055: PPUSH
2056: LD_INT 3
2058: PPUSH
2059: CALL_OW 380
// un := CreateHuman ;
2063: LD_ADDR_VAR 0 3
2067: PUSH
2068: CALL_OW 44
2072: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2073: LD_ADDR_EXP 38
2077: PUSH
2078: LD_EXP 38
2082: PUSH
2083: LD_VAR 0 3
2087: UNION
2088: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2089: LD_VAR 0 3
2093: PPUSH
2094: LD_INT 225
2096: PPUSH
2097: LD_INT 163
2099: PPUSH
2100: LD_INT 0
2102: PPUSH
2103: CALL_OW 48
// if i = 1 then
2107: LD_VAR 0 2
2111: PUSH
2112: LD_INT 1
2114: EQUAL
2115: IFFALSE 2132
// SetAttr ( un , attr_speed , 12 ) ;
2117: LD_VAR 0 3
2121: PPUSH
2122: LD_INT 2
2124: PPUSH
2125: LD_INT 12
2127: PPUSH
2128: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2132: LD_VAR 0 3
2136: PPUSH
2137: LD_INT 222
2139: PPUSH
2140: LD_INT 157
2142: PPUSH
2143: CALL_OW 111
// wait ( 0 0$1 ) ;
2147: LD_INT 35
2149: PPUSH
2150: CALL_OW 67
// end ;
2154: GO 2022
2156: POP
2157: POP
// end ; end_of_file
2158: LD_VAR 0 1
2162: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2163: LD_INT 0
2165: PPUSH
2166: PPUSH
2167: PPUSH
2168: PPUSH
2169: PPUSH
2170: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
2171: LD_INT 3
2173: PPUSH
2174: LD_INT 149
2176: PPUSH
2177: LD_INT 67
2179: PPUSH
2180: CALL_OW 428
2184: PPUSH
2185: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
2189: LD_ADDR_EXP 50
2193: PUSH
2194: LD_INT 111
2196: PPUSH
2197: LD_INT 89
2199: PPUSH
2200: CALL_OW 428
2204: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2205: LD_ADDR_VAR 0 2
2209: PUSH
2210: LD_INT 21
2212: PUSH
2213: LD_INT 3
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PUSH
2220: LD_INT 23
2222: PUSH
2223: LD_INT 3
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: PUSH
2230: EMPTY
2231: LIST
2232: LIST
2233: PPUSH
2234: CALL_OW 69
2238: PUSH
2239: FOR_IN
2240: IFFALSE 2256
// SetBLevel ( i , 5 ) ;
2242: LD_VAR 0 2
2246: PPUSH
2247: LD_INT 5
2249: PPUSH
2250: CALL_OW 241
2254: GO 2239
2256: POP
2257: POP
// SetBName ( kirov , kirov ) ;
2258: LD_INT 71
2260: PPUSH
2261: LD_STRING kirov
2263: PPUSH
2264: CALL_OW 500
// SetBName ( beria , beria ) ;
2268: LD_INT 106
2270: PPUSH
2271: LD_STRING beria
2273: PPUSH
2274: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2278: LD_INT 112
2280: PPUSH
2281: LD_STRING kagan
2283: PPUSH
2284: CALL_OW 500
// uc_side := 6 ;
2288: LD_ADDR_OWVAR 20
2292: PUSH
2293: LD_INT 6
2295: ST_TO_ADDR
// uc_nation := 3 ;
2296: LD_ADDR_OWVAR 21
2300: PUSH
2301: LD_INT 3
2303: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2304: LD_ADDR_VAR 0 5
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 6
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 30
2321: PUSH
2322: LD_INT 5
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PPUSH
2333: CALL_OW 69
2337: PUSH
2338: LD_INT 1
2340: ARRAY
2341: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
2342: LD_ADDR_VAR 0 4
2346: PUSH
2347: LD_INT 22
2349: PUSH
2350: LD_INT 6
2352: PUSH
2353: EMPTY
2354: LIST
2355: LIST
2356: PUSH
2357: LD_INT 30
2359: PUSH
2360: LD_INT 4
2362: PUSH
2363: EMPTY
2364: LIST
2365: LIST
2366: PUSH
2367: EMPTY
2368: LIST
2369: LIST
2370: PPUSH
2371: CALL_OW 69
2375: PUSH
2376: LD_INT 1
2378: ARRAY
2379: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
2380: LD_ADDR_EXP 44
2384: PUSH
2385: EMPTY
2386: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
2387: LD_ADDR_EXP 45
2391: PUSH
2392: EMPTY
2393: ST_TO_ADDR
// russianPatrol := [ ] ;
2394: LD_ADDR_EXP 47
2398: PUSH
2399: EMPTY
2400: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
2401: LD_ADDR_EXP 40
2405: PUSH
2406: LD_STRING Kurin
2408: PPUSH
2409: LD_INT 0
2411: PPUSH
2412: LD_STRING 
2414: PPUSH
2415: CALL 34408 0 3
2419: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
2420: LD_EXP 40
2424: PPUSH
2425: LD_INT 71
2427: PPUSH
2428: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
2432: LD_ADDR_EXP 42
2436: PUSH
2437: LD_STRING Popov
2439: PPUSH
2440: LD_INT 0
2442: PPUSH
2443: LD_STRING 
2445: PPUSH
2446: CALL 34408 0 3
2450: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
2451: LD_EXP 42
2455: PPUSH
2456: LD_INT 71
2458: PPUSH
2459: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
2463: LD_ADDR_EXP 41
2467: PUSH
2468: LD_STRING Grishko
2470: PPUSH
2471: LD_INT 0
2473: PPUSH
2474: LD_STRING 
2476: PPUSH
2477: CALL 34408 0 3
2481: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
2482: LD_EXP 41
2486: PPUSH
2487: LD_INT 207
2489: PPUSH
2490: LD_INT 106
2492: PPUSH
2493: LD_INT 0
2495: PPUSH
2496: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
2500: LD_EXP 41
2504: PPUSH
2505: LD_INT 209
2507: PPUSH
2508: LD_INT 106
2510: PPUSH
2511: CALL_OW 118
// for i := 1 to 2 do
2515: LD_ADDR_VAR 0 2
2519: PUSH
2520: DOUBLE
2521: LD_INT 1
2523: DEC
2524: ST_TO_ADDR
2525: LD_INT 2
2527: PUSH
2528: FOR_TO
2529: IFFALSE 2584
// begin PrepareHuman ( false , 2 , 2 ) ;
2531: LD_INT 0
2533: PPUSH
2534: LD_INT 2
2536: PPUSH
2537: LD_INT 2
2539: PPUSH
2540: CALL_OW 380
// un := CreateHuman ;
2544: LD_ADDR_VAR 0 3
2548: PUSH
2549: CALL_OW 44
2553: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2554: LD_VAR 0 3
2558: PPUSH
2559: LD_INT 71
2561: PPUSH
2562: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2566: LD_ADDR_EXP 44
2570: PUSH
2571: LD_EXP 44
2575: PUSH
2576: LD_VAR 0 3
2580: UNION
2581: ST_TO_ADDR
// end ;
2582: GO 2528
2584: POP
2585: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
2586: LD_ADDR_VAR 0 2
2590: PUSH
2591: DOUBLE
2592: LD_INT 1
2594: DEC
2595: ST_TO_ADDR
2596: LD_INT 5
2598: PUSH
2599: LD_INT 6
2601: PUSH
2602: LD_INT 6
2604: PUSH
2605: EMPTY
2606: LIST
2607: LIST
2608: LIST
2609: PUSH
2610: LD_OWVAR 67
2614: ARRAY
2615: PUSH
2616: FOR_TO
2617: IFFALSE 2691
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
2619: LD_INT 0
2621: PPUSH
2622: LD_INT 1
2624: PPUSH
2625: LD_INT 2
2627: PUSH
2628: LD_INT 3
2630: PUSH
2631: LD_INT 4
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: LIST
2638: PUSH
2639: LD_OWVAR 67
2643: ARRAY
2644: PPUSH
2645: CALL_OW 380
// un := CreateHuman ;
2649: LD_ADDR_VAR 0 3
2653: PUSH
2654: CALL_OW 44
2658: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
2659: LD_VAR 0 3
2663: PPUSH
2664: LD_VAR 0 5
2668: PPUSH
2669: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2673: LD_ADDR_EXP 44
2677: PUSH
2678: LD_EXP 44
2682: PUSH
2683: LD_VAR 0 3
2687: UNION
2688: ST_TO_ADDR
// end ;
2689: GO 2616
2691: POP
2692: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
2693: LD_ADDR_VAR 0 2
2697: PUSH
2698: LD_INT 22
2700: PUSH
2701: LD_INT 6
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PUSH
2708: LD_INT 30
2710: PUSH
2711: LD_INT 32
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PPUSH
2722: CALL_OW 69
2726: PUSH
2727: FOR_IN
2728: IFFALSE 2802
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 ] [ Difficulty ] ) ;
2730: LD_INT 0
2732: PPUSH
2733: LD_INT 1
2735: PPUSH
2736: LD_INT 3
2738: PUSH
2739: LD_INT 4
2741: PUSH
2742: LD_INT 4
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: LIST
2749: PUSH
2750: LD_OWVAR 67
2754: ARRAY
2755: PPUSH
2756: CALL_OW 380
// un := CreateHuman ;
2760: LD_ADDR_VAR 0 3
2764: PUSH
2765: CALL_OW 44
2769: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2770: LD_VAR 0 3
2774: PPUSH
2775: LD_VAR 0 2
2779: PPUSH
2780: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2784: LD_ADDR_EXP 44
2788: PUSH
2789: LD_EXP 44
2793: PUSH
2794: LD_VAR 0 3
2798: UNION
2799: ST_TO_ADDR
// end ;
2800: GO 2727
2802: POP
2803: POP
// for i := 1 to 3 do
2804: LD_ADDR_VAR 0 2
2808: PUSH
2809: DOUBLE
2810: LD_INT 1
2812: DEC
2813: ST_TO_ADDR
2814: LD_INT 3
2816: PUSH
2817: FOR_TO
2818: IFFALSE 2873
// begin PrepareHuman ( false , 3 , 3 ) ;
2820: LD_INT 0
2822: PPUSH
2823: LD_INT 3
2825: PPUSH
2826: LD_INT 3
2828: PPUSH
2829: CALL_OW 380
// un := CreateHuman ;
2833: LD_ADDR_VAR 0 3
2837: PUSH
2838: CALL_OW 44
2842: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
2843: LD_VAR 0 3
2847: PPUSH
2848: LD_INT 92
2850: PPUSH
2851: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2855: LD_ADDR_EXP 44
2859: PUSH
2860: LD_EXP 44
2864: PUSH
2865: LD_VAR 0 3
2869: UNION
2870: ST_TO_ADDR
// end ;
2871: GO 2817
2873: POP
2874: POP
// for i := 1 to 2 do
2875: LD_ADDR_VAR 0 2
2879: PUSH
2880: DOUBLE
2881: LD_INT 1
2883: DEC
2884: ST_TO_ADDR
2885: LD_INT 2
2887: PUSH
2888: FOR_TO
2889: IFFALSE 2944
// begin PrepareHuman ( false , 4 , 3 ) ;
2891: LD_INT 0
2893: PPUSH
2894: LD_INT 4
2896: PPUSH
2897: LD_INT 3
2899: PPUSH
2900: CALL_OW 380
// un := CreateHuman ;
2904: LD_ADDR_VAR 0 3
2908: PUSH
2909: CALL_OW 44
2913: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2914: LD_VAR 0 3
2918: PPUSH
2919: LD_INT 83
2921: PPUSH
2922: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2926: LD_ADDR_EXP 44
2930: PUSH
2931: LD_EXP 44
2935: PUSH
2936: LD_VAR 0 3
2940: UNION
2941: ST_TO_ADDR
// end ;
2942: GO 2888
2944: POP
2945: POP
// for i := 1 to 5 do
2946: LD_ADDR_VAR 0 2
2950: PUSH
2951: DOUBLE
2952: LD_INT 1
2954: DEC
2955: ST_TO_ADDR
2956: LD_INT 5
2958: PUSH
2959: FOR_TO
2960: IFFALSE 3017
// begin PrepareHuman ( false , 1 , 3 ) ;
2962: LD_INT 0
2964: PPUSH
2965: LD_INT 1
2967: PPUSH
2968: LD_INT 3
2970: PPUSH
2971: CALL_OW 380
// un := CreateHuman ;
2975: LD_ADDR_VAR 0 3
2979: PUSH
2980: CALL_OW 44
2984: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
2985: LD_VAR 0 3
2989: PPUSH
2990: LD_VAR 0 4
2994: PPUSH
2995: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
2999: LD_ADDR_EXP 46
3003: PUSH
3004: LD_EXP 46
3008: PUSH
3009: LD_VAR 0 3
3013: UNION
3014: ST_TO_ADDR
// end ;
3015: GO 2959
3017: POP
3018: POP
// russianCargo := [ ] ;
3019: LD_ADDR_EXP 49
3023: PUSH
3024: EMPTY
3025: ST_TO_ADDR
// for i := 1 to 2 do
3026: LD_ADDR_VAR 0 2
3030: PUSH
3031: DOUBLE
3032: LD_INT 1
3034: DEC
3035: ST_TO_ADDR
3036: LD_INT 2
3038: PUSH
3039: FOR_TO
3040: IFFALSE 3172
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3042: LD_INT 6
3044: PPUSH
3045: LD_INT 3
3047: PPUSH
3048: LD_INT 21
3050: PPUSH
3051: LD_INT 1
3053: PPUSH
3054: LD_INT 1
3056: PPUSH
3057: LD_INT 51
3059: PPUSH
3060: LD_INT 100
3062: PPUSH
3063: CALL 366 0 7
// un := CreateVehicle ;
3067: LD_ADDR_VAR 0 3
3071: PUSH
3072: CALL_OW 45
3076: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3077: LD_ADDR_EXP 49
3081: PUSH
3082: LD_EXP 49
3086: PUSH
3087: LD_VAR 0 3
3091: UNION
3092: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3093: LD_VAR 0 3
3097: PPUSH
3098: LD_INT 2
3100: PPUSH
3101: LD_INT 100
3103: PPUSH
3104: CALL_OW 290
// SetDir ( un , 4 ) ;
3108: LD_VAR 0 3
3112: PPUSH
3113: LD_INT 4
3115: PPUSH
3116: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3120: LD_VAR 0 3
3124: PPUSH
3125: LD_INT 147
3127: PPUSH
3128: LD_INT 103
3130: PPUSH
3131: LD_INT 4
3133: PPUSH
3134: LD_INT 0
3136: PPUSH
3137: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3141: LD_INT 0
3143: PPUSH
3144: LD_INT 1
3146: PPUSH
3147: LD_OWVAR 67
3151: PPUSH
3152: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3156: CALL_OW 44
3160: PPUSH
3161: LD_VAR 0 3
3165: PPUSH
3166: CALL_OW 52
// end ;
3170: GO 3039
3172: POP
3173: POP
// uc_side := 3 ;
3174: LD_ADDR_OWVAR 20
3178: PUSH
3179: LD_INT 3
3181: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3182: LD_ADDR_EXP 43
3186: PUSH
3187: LD_STRING Burlak
3189: PPUSH
3190: LD_INT 0
3192: PPUSH
3193: LD_STRING 
3195: PPUSH
3196: CALL 34408 0 3
3200: ST_TO_ADDR
// for i := 1 to 5 do
3201: LD_ADDR_VAR 0 2
3205: PUSH
3206: DOUBLE
3207: LD_INT 1
3209: DEC
3210: ST_TO_ADDR
3211: LD_INT 5
3213: PUSH
3214: FOR_TO
3215: IFFALSE 3308
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3217: LD_INT 0
3219: PPUSH
3220: LD_INT 1
3222: PPUSH
3223: LD_OWVAR 67
3227: PUSH
3228: LD_INT 1
3230: PLUS
3231: PPUSH
3232: CALL_OW 380
// un := CreateHuman ;
3236: LD_ADDR_VAR 0 3
3240: PUSH
3241: CALL_OW 44
3245: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3246: LD_VAR 0 3
3250: PPUSH
3251: LD_INT 22
3253: PUSH
3254: LD_INT 3
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 30
3263: PUSH
3264: LD_INT 32
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PPUSH
3275: CALL_OW 69
3279: PUSH
3280: LD_VAR 0 2
3284: ARRAY
3285: PPUSH
3286: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3290: LD_ADDR_EXP 45
3294: PUSH
3295: LD_EXP 45
3299: PUSH
3300: LD_VAR 0 3
3304: UNION
3305: ST_TO_ADDR
// end ;
3306: GO 3214
3308: POP
3309: POP
// for i := 1 to 2 do
3310: LD_ADDR_VAR 0 2
3314: PUSH
3315: DOUBLE
3316: LD_INT 1
3318: DEC
3319: ST_TO_ADDR
3320: LD_INT 2
3322: PUSH
3323: FOR_TO
3324: IFFALSE 3415
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3326: LD_INT 0
3328: PPUSH
3329: LD_INT 1
3331: PPUSH
3332: LD_OWVAR 67
3336: PUSH
3337: LD_INT 1
3339: PLUS
3340: PPUSH
3341: CALL_OW 380
// un := CreateHuman ;
3345: LD_ADDR_VAR 0 3
3349: PUSH
3350: CALL_OW 44
3354: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3355: LD_VAR 0 3
3359: PPUSH
3360: LD_INT 22
3362: PUSH
3363: LD_INT 3
3365: PUSH
3366: EMPTY
3367: LIST
3368: LIST
3369: PUSH
3370: LD_INT 30
3372: PUSH
3373: LD_INT 5
3375: PUSH
3376: EMPTY
3377: LIST
3378: LIST
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: PPUSH
3384: CALL_OW 69
3388: PUSH
3389: LD_INT 1
3391: ARRAY
3392: PPUSH
3393: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3397: LD_ADDR_EXP 45
3401: PUSH
3402: LD_EXP 45
3406: PUSH
3407: LD_VAR 0 3
3411: UNION
3412: ST_TO_ADDR
// end ;
3413: GO 3323
3415: POP
3416: POP
// for i := 1 to 2 do
3417: LD_ADDR_VAR 0 2
3421: PUSH
3422: DOUBLE
3423: LD_INT 1
3425: DEC
3426: ST_TO_ADDR
3427: LD_INT 2
3429: PUSH
3430: FOR_TO
3431: IFFALSE 3518
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3433: LD_INT 0
3435: PPUSH
3436: LD_INT 4
3438: PPUSH
3439: LD_OWVAR 67
3443: PPUSH
3444: CALL_OW 380
// un := CreateHuman ;
3448: LD_ADDR_VAR 0 3
3452: PUSH
3453: CALL_OW 44
3457: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
3458: LD_VAR 0 3
3462: PPUSH
3463: LD_INT 22
3465: PUSH
3466: LD_INT 3
3468: PUSH
3469: EMPTY
3470: LIST
3471: LIST
3472: PUSH
3473: LD_INT 30
3475: PUSH
3476: LD_INT 7
3478: PUSH
3479: EMPTY
3480: LIST
3481: LIST
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: PPUSH
3487: CALL_OW 69
3491: PUSH
3492: LD_INT 1
3494: ARRAY
3495: PPUSH
3496: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3500: LD_ADDR_EXP 45
3504: PUSH
3505: LD_EXP 45
3509: PUSH
3510: LD_VAR 0 3
3514: UNION
3515: ST_TO_ADDR
// end ;
3516: GO 3430
3518: POP
3519: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
3520: LD_INT 0
3522: PPUSH
3523: LD_INT 2
3525: PPUSH
3526: LD_OWVAR 67
3530: PPUSH
3531: CALL_OW 380
// un := CreateHuman ;
3535: LD_ADDR_VAR 0 3
3539: PUSH
3540: CALL_OW 44
3544: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
3545: LD_VAR 0 3
3549: PPUSH
3550: LD_INT 106
3552: PPUSH
3553: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3557: LD_ADDR_EXP 45
3561: PUSH
3562: LD_EXP 45
3566: PUSH
3567: LD_VAR 0 3
3571: UNION
3572: ST_TO_ADDR
// for i := 1 to 3 do
3573: LD_ADDR_VAR 0 2
3577: PUSH
3578: DOUBLE
3579: LD_INT 1
3581: DEC
3582: ST_TO_ADDR
3583: LD_INT 3
3585: PUSH
3586: FOR_TO
3587: IFFALSE 3709
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
3589: LD_ADDR_VAR 0 6
3593: PUSH
3594: LD_INT 22
3596: PUSH
3597: LD_INT 3
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PUSH
3604: LD_INT 30
3606: PUSH
3607: LD_INT 31
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: PUSH
3614: EMPTY
3615: LIST
3616: LIST
3617: PPUSH
3618: CALL_OW 69
3622: PUSH
3623: LD_VAR 0 2
3627: ARRAY
3628: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
3629: LD_INT 0
3631: PPUSH
3632: LD_INT 1
3634: PPUSH
3635: LD_OWVAR 67
3639: PPUSH
3640: CALL_OW 380
// un := CreateHuman ;
3644: LD_ADDR_VAR 0 3
3648: PUSH
3649: CALL_OW 44
3653: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
3654: LD_VAR 0 3
3658: PPUSH
3659: LD_VAR 0 6
3663: PPUSH
3664: CALL_OW 254
3668: PUSH
3669: LD_INT 3
3671: PLUS
3672: PPUSH
3673: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
3677: LD_VAR 0 3
3681: PPUSH
3682: LD_VAR 0 6
3686: PPUSH
3687: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3691: LD_ADDR_EXP 45
3695: PUSH
3696: LD_EXP 45
3700: PUSH
3701: LD_VAR 0 3
3705: UNION
3706: ST_TO_ADDR
// end ;
3707: GO 3586
3709: POP
3710: POP
// if Difficulty > 1 then
3711: LD_OWVAR 67
3715: PUSH
3716: LD_INT 1
3718: GREATER
3719: IFFALSE 3794
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
3721: LD_ADDR_VAR 0 3
3725: PUSH
3726: LD_INT 3
3728: PPUSH
3729: LD_INT 3
3731: PPUSH
3732: LD_INT 23
3734: PPUSH
3735: LD_INT 1
3737: PPUSH
3738: LD_INT 1
3740: PPUSH
3741: LD_INT 44
3743: PPUSH
3744: LD_INT 100
3746: PPUSH
3747: CALL 366 0 7
3751: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
3752: LD_VAR 0 3
3756: PPUSH
3757: LD_INT 73
3759: PPUSH
3760: LD_INT 110
3762: PPUSH
3763: LD_INT 0
3765: PPUSH
3766: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
3770: LD_INT 0
3772: PPUSH
3773: LD_INT 3
3775: PPUSH
3776: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
3780: CALL_OW 44
3784: PPUSH
3785: LD_VAR 0 3
3789: PPUSH
3790: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
3794: LD_ADDR_EXP 48
3798: PUSH
3799: EMPTY
3800: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 ] [ Difficulty ] do
3801: LD_ADDR_VAR 0 2
3805: PUSH
3806: DOUBLE
3807: LD_INT 1
3809: DEC
3810: ST_TO_ADDR
3811: LD_INT 6
3813: PUSH
3814: LD_INT 7
3816: PUSH
3817: LD_INT 8
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: LIST
3824: PUSH
3825: LD_OWVAR 67
3829: ARRAY
3830: PUSH
3831: FOR_TO
3832: IFFALSE 4056
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
3834: LD_INT 3
3836: PPUSH
3837: LD_INT 3
3839: PPUSH
3840: LD_INT 21
3842: PUSH
3843: LD_INT 23
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: PUSH
3850: LD_VAR 0 2
3854: PUSH
3855: LD_INT 2
3857: MOD
3858: PUSH
3859: LD_INT 1
3861: PLUS
3862: ARRAY
3863: PPUSH
3864: LD_INT 1
3866: PPUSH
3867: LD_INT 1
3869: PPUSH
3870: LD_INT 43
3872: PUSH
3873: LD_INT 44
3875: PUSH
3876: LD_INT 42
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: LIST
3883: PUSH
3884: LD_VAR 0 2
3888: PUSH
3889: LD_INT 3
3891: MOD
3892: PUSH
3893: LD_INT 1
3895: PLUS
3896: ARRAY
3897: PPUSH
3898: LD_INT 100
3900: PPUSH
3901: CALL 366 0 7
// un := CreateVehicle ;
3905: LD_ADDR_VAR 0 3
3909: PUSH
3910: CALL_OW 45
3914: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
3915: LD_VAR 0 3
3919: PPUSH
3920: LD_INT 0
3922: PUSH
3923: LD_INT 5
3925: PUSH
3926: EMPTY
3927: LIST
3928: LIST
3929: PUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_INT 2
3935: PPUSH
3936: CALL_OW 12
3940: ARRAY
3941: PPUSH
3942: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
3946: LD_ADDR_EXP 48
3950: PUSH
3951: LD_EXP 48
3955: PUSH
3956: LD_VAR 0 3
3960: UNION
3961: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
3962: LD_VAR 0 3
3966: PPUSH
3967: LD_INT 127
3969: PPUSH
3970: LD_INT 89
3972: PPUSH
3973: LD_INT 7
3975: PPUSH
3976: LD_INT 0
3978: PPUSH
3979: CALL_OW 50
// uc_side := 3 ;
3983: LD_ADDR_OWVAR 20
3987: PUSH
3988: LD_INT 3
3990: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
3991: LD_INT 0
3993: PPUSH
3994: LD_INT 3
3996: PPUSH
3997: LD_INT 3
3999: PPUSH
4000: CALL_OW 380
// un := CreateHuman ;
4004: LD_ADDR_VAR 0 3
4008: PUSH
4009: CALL_OW 44
4013: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4014: LD_ADDR_EXP 48
4018: PUSH
4019: LD_EXP 48
4023: PUSH
4024: LD_VAR 0 3
4028: UNION
4029: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4030: LD_VAR 0 3
4034: PPUSH
4035: LD_EXP 48
4039: PUSH
4040: LD_EXP 48
4044: PUSH
4045: LD_INT 1
4047: MINUS
4048: ARRAY
4049: PPUSH
4050: CALL_OW 52
// end ;
4054: GO 3831
4056: POP
4057: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
4058: LD_ADDR_VAR 0 2
4062: PUSH
4063: DOUBLE
4064: LD_INT 1
4066: DEC
4067: ST_TO_ADDR
4068: LD_INT 3
4070: PUSH
4071: LD_INT 4
4073: PUSH
4074: LD_INT 5
4076: PUSH
4077: EMPTY
4078: LIST
4079: LIST
4080: LIST
4081: PUSH
4082: LD_OWVAR 67
4086: ARRAY
4087: PUSH
4088: FOR_TO
4089: IFFALSE 4155
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4091: LD_INT 0
4093: PPUSH
4094: LD_INT 1
4096: PPUSH
4097: LD_OWVAR 67
4101: PPUSH
4102: CALL_OW 380
// un := CreateHuman ;
4106: LD_ADDR_VAR 0 3
4110: PUSH
4111: CALL_OW 44
4115: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4116: LD_ADDR_EXP 48
4120: PUSH
4121: LD_EXP 48
4125: PUSH
4126: LD_VAR 0 3
4130: UNION
4131: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4132: LD_VAR 0 3
4136: PPUSH
4137: LD_INT 91
4139: PPUSH
4140: LD_INT 60
4142: PPUSH
4143: LD_INT 3
4145: PPUSH
4146: LD_INT 0
4148: PPUSH
4149: CALL_OW 50
// end ;
4153: GO 4088
4155: POP
4156: POP
// end ;
4157: LD_VAR 0 1
4161: RET
// every 0 0$3 do var i ;
4162: GO 4164
4164: DISABLE
4165: LD_INT 0
4167: PPUSH
// begin for i := 1 to 4 do
4168: LD_ADDR_VAR 0 1
4172: PUSH
4173: DOUBLE
4174: LD_INT 1
4176: DEC
4177: ST_TO_ADDR
4178: LD_INT 4
4180: PUSH
4181: FOR_TO
4182: IFFALSE 4201
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4184: LD_EXP 46
4188: PUSH
4189: LD_VAR 0 1
4193: ARRAY
4194: PPUSH
4195: CALL_OW 122
4199: GO 4181
4201: POP
4202: POP
// wait ( 3 ) ;
4203: LD_INT 3
4205: PPUSH
4206: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4210: LD_EXP 46
4214: PUSH
4215: LD_INT 1
4217: ARRAY
4218: PPUSH
4219: LD_INT 22
4221: PUSH
4222: LD_INT 6
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: PUSH
4229: LD_INT 30
4231: PUSH
4232: LD_INT 31
4234: PUSH
4235: EMPTY
4236: LIST
4237: LIST
4238: PUSH
4239: EMPTY
4240: LIST
4241: LIST
4242: PPUSH
4243: CALL_OW 69
4247: PPUSH
4248: LD_EXP 46
4252: PUSH
4253: LD_INT 1
4255: ARRAY
4256: PPUSH
4257: CALL_OW 74
4261: PPUSH
4262: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4266: LD_EXP 46
4270: PUSH
4271: LD_INT 2
4273: ARRAY
4274: PPUSH
4275: LD_INT 211
4277: PPUSH
4278: LD_INT 107
4280: PPUSH
4281: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4285: LD_EXP 46
4289: PUSH
4290: LD_INT 2
4292: ARRAY
4293: PPUSH
4294: LD_INT 209
4296: PPUSH
4297: LD_INT 106
4299: PPUSH
4300: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4304: LD_EXP 46
4308: PUSH
4309: LD_INT 3
4311: ARRAY
4312: PPUSH
4313: LD_INT 209
4315: PPUSH
4316: LD_INT 103
4318: PPUSH
4319: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4323: LD_EXP 46
4327: PUSH
4328: LD_INT 3
4330: ARRAY
4331: PPUSH
4332: LD_INT 209
4334: PPUSH
4335: LD_INT 106
4337: PPUSH
4338: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4342: LD_EXP 46
4346: PUSH
4347: LD_INT 4
4349: ARRAY
4350: PPUSH
4351: LD_INT 227
4353: PPUSH
4354: LD_INT 117
4356: PPUSH
4357: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4361: LD_EXP 46
4365: PUSH
4366: LD_INT 4
4368: ARRAY
4369: PPUSH
4370: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4374: LD_INT 700
4376: PPUSH
4377: CALL_OW 67
// for i := 3 downto 2 do
4381: LD_ADDR_VAR 0 1
4385: PUSH
4386: DOUBLE
4387: LD_INT 3
4389: INC
4390: ST_TO_ADDR
4391: LD_INT 2
4393: PUSH
4394: FOR_DOWNTO
4395: IFFALSE 4562
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4397: LD_EXP 46
4401: PUSH
4402: LD_VAR 0 1
4406: ARRAY
4407: PPUSH
4408: LD_INT 200
4410: PPUSH
4411: LD_INT 91
4413: PPUSH
4414: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4418: LD_EXP 46
4422: PUSH
4423: LD_VAR 0 1
4427: ARRAY
4428: PPUSH
4429: LD_INT 210
4431: PPUSH
4432: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4436: LD_EXP 46
4440: PUSH
4441: LD_VAR 0 1
4445: ARRAY
4446: PPUSH
4447: LD_INT 224
4449: PPUSH
4450: LD_INT 93
4452: PPUSH
4453: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4457: LD_EXP 46
4461: PUSH
4462: LD_VAR 0 1
4466: ARRAY
4467: PPUSH
4468: LD_INT 210
4470: PPUSH
4471: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4475: LD_EXP 46
4479: PUSH
4480: LD_VAR 0 1
4484: ARRAY
4485: PPUSH
4486: LD_INT 239
4488: PPUSH
4489: LD_INT 123
4491: PPUSH
4492: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4496: LD_EXP 46
4500: PUSH
4501: LD_VAR 0 1
4505: ARRAY
4506: PPUSH
4507: LD_INT 210
4509: PPUSH
4510: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4514: LD_EXP 46
4518: PUSH
4519: LD_VAR 0 1
4523: ARRAY
4524: PPUSH
4525: LD_INT 212
4527: PPUSH
4528: LD_INT 105
4530: PPUSH
4531: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4535: LD_EXP 46
4539: PUSH
4540: LD_VAR 0 1
4544: ARRAY
4545: PPUSH
4546: LD_INT 700
4548: PPUSH
4549: CALL_OW 202
// wait ( 0 0$30 ) ;
4553: LD_INT 1050
4555: PPUSH
4556: CALL_OW 67
// end ;
4560: GO 4394
4562: POP
4563: POP
// until not activeGrishkoAI ;
4564: LD_EXP 10
4568: NOT
4569: IFFALSE 4374
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
4571: LD_EXP 46
4575: PPUSH
4576: LD_INT 221
4578: PPUSH
4579: LD_INT 110
4581: PPUSH
4582: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
4586: LD_EXP 46
4590: PPUSH
4591: LD_INT 228
4593: PPUSH
4594: LD_INT 115
4596: PPUSH
4597: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
4601: LD_EXP 46
4605: PPUSH
4606: CALL_OW 200
// end ;
4610: PPOPN 1
4612: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
4613: LD_EXP 12
4617: IFFALSE 5359
4619: GO 4621
4621: DISABLE
4622: LD_INT 0
4624: PPUSH
4625: PPUSH
4626: PPUSH
4627: PPUSH
// begin uc_side := 6 ;
4628: LD_ADDR_OWVAR 20
4632: PUSH
4633: LD_INT 6
4635: ST_TO_ADDR
// uc_nation := 3 ;
4636: LD_ADDR_OWVAR 21
4640: PUSH
4641: LD_INT 3
4643: ST_TO_ADDR
// for i := 1 to 3 do
4644: LD_ADDR_VAR 0 2
4648: PUSH
4649: DOUBLE
4650: LD_INT 1
4652: DEC
4653: ST_TO_ADDR
4654: LD_INT 3
4656: PUSH
4657: FOR_TO
4658: IFFALSE 4767
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
4660: LD_INT 0
4662: PPUSH
4663: LD_INT 1
4665: PPUSH
4666: LD_INT 2
4668: PUSH
4669: LD_INT 3
4671: PUSH
4672: LD_INT 4
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: LIST
4679: PUSH
4680: LD_OWVAR 67
4684: ARRAY
4685: PPUSH
4686: CALL_OW 380
// un := CreateHuman ;
4690: LD_ADDR_VAR 0 1
4694: PUSH
4695: CALL_OW 44
4699: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
4700: LD_ADDR_EXP 47
4704: PUSH
4705: LD_EXP 47
4709: PUSH
4710: LD_VAR 0 1
4714: UNION
4715: ST_TO_ADDR
// SetTag ( un , 1 ) ;
4716: LD_VAR 0 1
4720: PPUSH
4721: LD_INT 1
4723: PPUSH
4724: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
4728: LD_VAR 0 1
4732: PPUSH
4733: LD_INT 11
4735: PPUSH
4736: LD_INT 0
4738: PPUSH
4739: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
4743: LD_VAR 0 1
4747: PPUSH
4748: LD_INT 210
4750: PPUSH
4751: LD_INT 159
4753: PPUSH
4754: CALL_OW 111
// wait ( 0 0$2 ) ;
4758: LD_INT 70
4760: PPUSH
4761: CALL_OW 67
// end ;
4765: GO 4657
4767: POP
4768: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
4769: LD_ADDR_VAR 0 4
4773: PUSH
4774: LD_INT 172
4776: PUSH
4777: LD_INT 76
4779: PUSH
4780: EMPTY
4781: LIST
4782: LIST
4783: PUSH
4784: LD_INT 150
4786: PUSH
4787: LD_INT 38
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: PUSH
4794: LD_INT 148
4796: PUSH
4797: LD_INT 9
4799: PUSH
4800: EMPTY
4801: LIST
4802: LIST
4803: PUSH
4804: LD_INT 165
4806: PUSH
4807: LD_INT 38
4809: PUSH
4810: EMPTY
4811: LIST
4812: LIST
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: PUSH
4820: LD_INT 191
4822: PUSH
4823: LD_INT 77
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: PUSH
4830: LD_INT 168
4832: PUSH
4833: LD_INT 42
4835: PUSH
4836: EMPTY
4837: LIST
4838: LIST
4839: PUSH
4840: LD_INT 166
4842: PUSH
4843: LD_INT 11
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: PUSH
4850: LD_INT 151
4852: PUSH
4853: LD_INT 12
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: PUSH
4866: LD_INT 221
4868: PUSH
4869: LD_INT 88
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: PUSH
4876: LD_INT 217
4878: PUSH
4879: LD_INT 64
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: PUSH
4886: LD_INT 232
4888: PUSH
4889: LD_INT 66
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: PUSH
4896: LD_INT 200
4898: PUSH
4899: LD_INT 56
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: LIST
4916: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4917: LD_INT 35
4919: PPUSH
4920: CALL_OW 67
// for i := russianPatrol downto 1 do
4924: LD_ADDR_VAR 0 2
4928: PUSH
4929: DOUBLE
4930: LD_EXP 47
4934: INC
4935: ST_TO_ADDR
4936: LD_INT 1
4938: PUSH
4939: FOR_DOWNTO
4940: IFFALSE 5323
// begin if IsDead ( russianPatrol [ i ] ) then
4942: LD_EXP 47
4946: PUSH
4947: LD_VAR 0 2
4951: ARRAY
4952: PPUSH
4953: CALL_OW 301
4957: IFFALSE 4961
// continue ;
4959: GO 4939
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
4961: LD_EXP 47
4965: PUSH
4966: LD_VAR 0 2
4970: ARRAY
4971: PPUSH
4972: CALL_OW 256
4976: PUSH
4977: LD_INT 990
4979: LESS
4980: PUSH
4981: LD_EXP 47
4985: PUSH
4986: LD_VAR 0 2
4990: ARRAY
4991: PPUSH
4992: CALL_OW 110
4996: PUSH
4997: LD_INT 1
4999: EQUAL
5000: AND
5001: IFFALSE 5021
// SetTag ( russianPatrol [ i ] , 2 ) ;
5003: LD_EXP 47
5007: PUSH
5008: LD_VAR 0 2
5012: ARRAY
5013: PPUSH
5014: LD_INT 2
5016: PPUSH
5017: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5021: LD_EXP 47
5025: PUSH
5026: LD_VAR 0 2
5030: ARRAY
5031: PPUSH
5032: CALL_OW 110
5036: PUSH
5037: LD_INT 2
5039: EQUAL
5040: IFFALSE 5107
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5042: LD_EXP 47
5046: PUSH
5047: LD_VAR 0 2
5051: ARRAY
5052: PPUSH
5053: LD_INT 166
5055: PPUSH
5056: LD_INT 101
5058: PPUSH
5059: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5063: LD_EXP 47
5067: PUSH
5068: LD_VAR 0 2
5072: ARRAY
5073: PPUSH
5074: LD_INT 71
5076: PPUSH
5077: CALL_OW 296
5081: PUSH
5082: LD_INT 10
5084: LESS
5085: IFFALSE 5105
// SetTag ( russianPatrol [ i ] , 3 ) ;
5087: LD_EXP 47
5091: PUSH
5092: LD_VAR 0 2
5096: ARRAY
5097: PPUSH
5098: LD_INT 3
5100: PPUSH
5101: CALL_OW 109
// continue ;
5105: GO 4939
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5107: LD_EXP 47
5111: PUSH
5112: LD_VAR 0 2
5116: ARRAY
5117: PPUSH
5118: CALL_OW 110
5122: PUSH
5123: LD_INT 3
5125: EQUAL
5126: IFFALSE 5221
// begin spottedByPatrol := true ;
5128: LD_ADDR_EXP 7
5132: PUSH
5133: LD_INT 1
5135: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5136: LD_EXP 47
5140: PUSH
5141: LD_VAR 0 2
5145: ARRAY
5146: PPUSH
5147: CALL_OW 250
5151: PPUSH
5152: LD_EXP 47
5156: PUSH
5157: LD_VAR 0 2
5161: ARRAY
5162: PPUSH
5163: CALL_OW 251
5167: PPUSH
5168: LD_INT 2
5170: PPUSH
5171: LD_INT 6
5173: NEG
5174: PPUSH
5175: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
5179: LD_EXP 47
5183: PUSH
5184: LD_VAR 0 2
5188: ARRAY
5189: PPUSH
5190: CALL_OW 87
// DialogueOn ;
5194: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
5198: LD_EXP 25
5202: PPUSH
5203: LD_STRING DH-Spot-f-3
5205: PPUSH
5206: CALL_OW 88
// DialogueOff ;
5210: CALL_OW 7
// YouLost ( Spotted ) ;
5214: LD_STRING Spotted
5216: PPUSH
5217: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
5221: LD_EXP 47
5225: PUSH
5226: LD_VAR 0 2
5230: ARRAY
5231: PPUSH
5232: CALL_OW 314
5236: NOT
5237: IFFALSE 5321
// for j in patrol [ i ] do
5239: LD_ADDR_VAR 0 3
5243: PUSH
5244: LD_VAR 0 4
5248: PUSH
5249: LD_VAR 0 2
5253: ARRAY
5254: PUSH
5255: FOR_IN
5256: IFFALSE 5319
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5258: LD_EXP 47
5262: PUSH
5263: LD_VAR 0 2
5267: ARRAY
5268: PPUSH
5269: LD_INT 35
5271: PPUSH
5272: LD_INT 175
5274: PPUSH
5275: CALL_OW 12
5279: PPUSH
5280: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5284: LD_EXP 47
5288: PUSH
5289: LD_VAR 0 2
5293: ARRAY
5294: PPUSH
5295: LD_VAR 0 3
5299: PUSH
5300: LD_INT 1
5302: ARRAY
5303: PPUSH
5304: LD_VAR 0 3
5308: PUSH
5309: LD_INT 2
5311: ARRAY
5312: PPUSH
5313: CALL_OW 174
// end ;
5317: GO 5255
5319: POP
5320: POP
// end ;
5321: GO 4939
5323: POP
5324: POP
// until not russianPatrol or russianAlert ;
5325: LD_EXP 47
5329: NOT
5330: PUSH
5331: LD_EXP 9
5335: OR
5336: IFFALSE 4917
// if russianPatrol then
5338: LD_EXP 47
5342: IFFALSE 5359
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5344: LD_EXP 47
5348: PPUSH
5349: LD_INT 161
5351: PPUSH
5352: LD_INT 107
5354: PPUSH
5355: CALL_OW 114
// end ;
5359: PPOPN 4
5361: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5362: LD_EXP 6
5366: PUSH
5367: LD_EXP 13
5371: NOT
5372: AND
5373: IFFALSE 5859
5375: GO 5377
5377: DISABLE
5378: LD_INT 0
5380: PPUSH
5381: PPUSH
5382: PPUSH
5383: PPUSH
5384: PPUSH
// begin enable ;
5385: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5386: LD_ADDR_VAR 0 2
5390: PUSH
5391: LD_EXP 48
5395: PPUSH
5396: LD_INT 21
5398: PUSH
5399: LD_INT 2
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PPUSH
5406: CALL_OW 72
5410: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5411: LD_ADDR_VAR 0 4
5415: PUSH
5416: LD_INT 22
5418: PUSH
5419: LD_INT 4
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: PPUSH
5426: CALL_OW 69
5430: ST_TO_ADDR
// for i in filter do
5431: LD_ADDR_VAR 0 1
5435: PUSH
5436: LD_VAR 0 2
5440: PUSH
5441: FOR_IN
5442: IFFALSE 5857
// begin tmp := IsDrivenBy ( i ) ;
5444: LD_ADDR_VAR 0 3
5448: PUSH
5449: LD_VAR 0 1
5453: PPUSH
5454: CALL_OW 311
5458: ST_TO_ADDR
// if not tmp then
5459: LD_VAR 0 3
5463: NOT
5464: IFFALSE 5468
// continue ;
5466: GO 5441
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5468: LD_VAR 0 1
5472: PPUSH
5473: CALL_OW 261
5477: PUSH
5478: LD_INT 90
5480: GREATER
5481: PUSH
5482: LD_VAR 0 1
5486: PPUSH
5487: CALL_OW 110
5491: PUSH
5492: LD_INT 2
5494: EQUAL
5495: AND
5496: IFFALSE 5512
// SetTag ( i , 0 ) else
5498: LD_VAR 0 1
5502: PPUSH
5503: LD_INT 0
5505: PPUSH
5506: CALL_OW 109
5510: GO 5608
// if GetTag ( i ) = 2 then
5512: LD_VAR 0 1
5516: PPUSH
5517: CALL_OW 110
5521: PUSH
5522: LD_INT 2
5524: EQUAL
5525: IFFALSE 5608
// begin x := rand ( 1 , 2 ) ;
5527: LD_ADDR_VAR 0 5
5531: PUSH
5532: LD_INT 1
5534: PPUSH
5535: LD_INT 2
5537: PPUSH
5538: CALL_OW 12
5542: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5543: LD_VAR 0 1
5547: PPUSH
5548: LD_EXP 49
5552: PUSH
5553: LD_VAR 0 5
5557: ARRAY
5558: PPUSH
5559: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
5563: LD_EXP 49
5567: PUSH
5568: LD_VAR 0 5
5572: ARRAY
5573: PPUSH
5574: LD_INT 2
5576: PPUSH
5577: CALL_OW 289
5581: PUSH
5582: LD_INT 20
5584: LESS
5585: IFFALSE 5608
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
5587: LD_EXP 49
5591: PUSH
5592: LD_VAR 0 5
5596: ARRAY
5597: PPUSH
5598: LD_INT 2
5600: PPUSH
5601: LD_INT 100
5603: PPUSH
5604: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5608: LD_VAR 0 1
5612: PPUSH
5613: CALL_OW 256
5617: PUSH
5618: LD_INT 600
5620: GREATEREQUAL
5621: PUSH
5622: LD_VAR 0 1
5626: PPUSH
5627: CALL_OW 110
5631: NOT
5632: AND
5633: IFFALSE 5659
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5635: LD_VAR 0 1
5639: PPUSH
5640: LD_VAR 0 4
5644: PPUSH
5645: LD_VAR 0 1
5649: PPUSH
5650: CALL_OW 74
5654: PPUSH
5655: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5659: LD_VAR 0 1
5663: PPUSH
5664: CALL_OW 256
5668: PUSH
5669: LD_INT 600
5671: LESS
5672: PUSH
5673: LD_VAR 0 1
5677: PPUSH
5678: CALL_OW 110
5682: NOT
5683: AND
5684: IFFALSE 5713
// begin SetTag ( i , 1 ) ;
5686: LD_VAR 0 1
5690: PPUSH
5691: LD_INT 1
5693: PPUSH
5694: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5698: LD_VAR 0 1
5702: PPUSH
5703: LD_INT 62
5705: PPUSH
5706: LD_INT 22
5708: PPUSH
5709: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5713: LD_VAR 0 1
5717: PPUSH
5718: CALL_OW 110
5722: PUSH
5723: LD_INT 1
5725: EQUAL
5726: PUSH
5727: LD_VAR 0 1
5731: PPUSH
5732: LD_INT 62
5734: PPUSH
5735: LD_INT 22
5737: PPUSH
5738: CALL_OW 297
5742: PUSH
5743: LD_INT 6
5745: LESS
5746: AND
5747: PUSH
5748: LD_VAR 0 3
5752: AND
5753: IFFALSE 5855
// begin ComExitVehicle ( tmp ) ;
5755: LD_VAR 0 3
5759: PPUSH
5760: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
5764: LD_VAR 0 3
5768: PPUSH
5769: LD_VAR 0 1
5773: PPUSH
5774: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5778: LD_INT 35
5780: PPUSH
5781: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5785: LD_VAR 0 1
5789: PPUSH
5790: CALL_OW 256
5794: PUSH
5795: LD_INT 1000
5797: EQUAL
5798: IFFALSE 5778
// ComEnterUnit ( tmp , i ) ;
5800: LD_VAR 0 3
5804: PPUSH
5805: LD_VAR 0 1
5809: PPUSH
5810: CALL_OW 120
// if GetFuel ( i ) <= 90 then
5814: LD_VAR 0 1
5818: PPUSH
5819: CALL_OW 261
5823: PUSH
5824: LD_INT 90
5826: LESSEQUAL
5827: IFFALSE 5843
// SetTag ( i , 2 ) else
5829: LD_VAR 0 1
5833: PPUSH
5834: LD_INT 2
5836: PPUSH
5837: CALL_OW 109
5841: GO 5855
// SetTag ( i , 0 ) ;
5843: LD_VAR 0 1
5847: PPUSH
5848: LD_INT 0
5850: PPUSH
5851: CALL_OW 109
// end ; end ;
5855: GO 5441
5857: POP
5858: POP
// end ;
5859: PPOPN 5
5861: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
5862: LD_EXP 20
5866: IFFALSE 6089
5868: GO 5870
5870: DISABLE
5871: LD_INT 0
5873: PPUSH
5874: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
5875: LD_EXP 49
5879: PPUSH
5880: LD_INT 79
5882: PPUSH
5883: LD_INT 155
5885: PPUSH
5886: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
5890: LD_EXP 49
5894: PPUSH
5895: LD_INT 16
5897: PPUSH
5898: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5902: LD_ADDR_VAR 0 2
5906: PUSH
5907: LD_EXP 48
5911: PPUSH
5912: LD_INT 50
5914: PUSH
5915: EMPTY
5916: LIST
5917: PPUSH
5918: CALL_OW 72
5922: ST_TO_ADDR
// for i in tmp do
5923: LD_ADDR_VAR 0 1
5927: PUSH
5928: LD_VAR 0 2
5932: PUSH
5933: FOR_IN
5934: IFFALSE 5968
// begin ComAgressiveMove ( i , 123 , 60 ) ;
5936: LD_VAR 0 1
5940: PPUSH
5941: LD_INT 123
5943: PPUSH
5944: LD_INT 60
5946: PPUSH
5947: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
5951: LD_VAR 0 1
5955: PPUSH
5956: LD_INT 153
5958: PPUSH
5959: LD_INT 103
5961: PPUSH
5962: CALL_OW 174
// end ;
5966: GO 5933
5968: POP
5969: POP
// repeat wait ( 0 0$1 ) ;
5970: LD_INT 35
5972: PPUSH
5973: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5977: LD_ADDR_VAR 0 2
5981: PUSH
5982: LD_EXP 48
5986: PPUSH
5987: LD_INT 50
5989: PUSH
5990: EMPTY
5991: LIST
5992: PPUSH
5993: CALL_OW 72
5997: ST_TO_ADDR
// for i in tmp do
5998: LD_ADDR_VAR 0 1
6002: PUSH
6003: LD_VAR 0 2
6007: PUSH
6008: FOR_IN
6009: IFFALSE 6080
// if not HasTask ( i ) then
6011: LD_VAR 0 1
6015: PPUSH
6016: CALL_OW 314
6020: NOT
6021: IFFALSE 6078
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
6023: LD_VAR 0 1
6027: PPUSH
6028: LD_INT 81
6030: PUSH
6031: LD_INT 3
6033: PUSH
6034: EMPTY
6035: LIST
6036: LIST
6037: PUSH
6038: LD_INT 3
6040: PUSH
6041: LD_INT 21
6043: PUSH
6044: LD_INT 3
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: PUSH
6055: EMPTY
6056: LIST
6057: LIST
6058: PPUSH
6059: CALL_OW 69
6063: PPUSH
6064: LD_VAR 0 1
6068: PPUSH
6069: CALL_OW 74
6073: PPUSH
6074: CALL_OW 115
6078: GO 6008
6080: POP
6081: POP
6082: LD_VAR 0 2
6086: NOT
6087: IFFALSE 5970
// end ;
6089: PPOPN 2
6091: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6092: LD_INT 22
6094: PUSH
6095: LD_INT 3
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: PUSH
6102: LD_INT 32
6104: PUSH
6105: LD_INT 1
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: PPUSH
6116: CALL_OW 69
6120: IFFALSE 6199
6122: GO 6124
6124: DISABLE
6125: LD_INT 0
6127: PPUSH
// begin enable ;
6128: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6129: LD_ADDR_VAR 0 1
6133: PUSH
6134: LD_INT 22
6136: PUSH
6137: LD_INT 3
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: LD_INT 32
6146: PUSH
6147: LD_INT 1
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PPUSH
6158: CALL_OW 69
6162: PUSH
6163: FOR_IN
6164: IFFALSE 6197
// if GetFuel ( i ) < 1 then
6166: LD_VAR 0 1
6170: PPUSH
6171: CALL_OW 261
6175: PUSH
6176: LD_INT 1
6178: LESS
6179: IFFALSE 6195
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6181: LD_VAR 0 1
6185: PPUSH
6186: CALL_OW 311
6190: PPUSH
6191: CALL_OW 121
6195: GO 6163
6197: POP
6198: POP
// end ; end_of_file
6199: PPOPN 1
6201: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6202: LD_INT 0
6204: PPUSH
6205: PPUSH
6206: PPUSH
// SetBName ( omikron , omikron ) ;
6207: LD_INT 64
6209: PPUSH
6210: LD_STRING omikron
6212: PPUSH
6213: CALL_OW 500
// uc_side := 4 ;
6217: LD_ADDR_OWVAR 20
6221: PUSH
6222: LD_INT 4
6224: ST_TO_ADDR
// uc_nation := 1 ;
6225: LD_ADDR_OWVAR 21
6229: PUSH
6230: LD_INT 1
6232: ST_TO_ADDR
// omicronSquad := [ ] ;
6233: LD_ADDR_EXP 51
6237: PUSH
6238: EMPTY
6239: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6240: LD_ADDR_VAR 0 2
6244: PUSH
6245: LD_INT 22
6247: PUSH
6248: LD_INT 4
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 2
6257: PUSH
6258: LD_INT 30
6260: PUSH
6261: LD_INT 32
6263: PUSH
6264: EMPTY
6265: LIST
6266: LIST
6267: PUSH
6268: LD_INT 30
6270: PUSH
6271: LD_INT 31
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: LIST
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PPUSH
6287: CALL_OW 69
6291: PUSH
6292: FOR_IN
6293: IFFALSE 6350
// begin PrepareHuman ( false , 1 , 1 ) ;
6295: LD_INT 0
6297: PPUSH
6298: LD_INT 1
6300: PPUSH
6301: LD_INT 1
6303: PPUSH
6304: CALL_OW 380
// un := CreateHuman ;
6308: LD_ADDR_VAR 0 3
6312: PUSH
6313: CALL_OW 44
6317: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6318: LD_ADDR_EXP 51
6322: PUSH
6323: LD_EXP 51
6327: PUSH
6328: LD_VAR 0 3
6332: UNION
6333: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6334: LD_VAR 0 3
6338: PPUSH
6339: LD_VAR 0 2
6343: PPUSH
6344: CALL_OW 52
// end ;
6348: GO 6292
6350: POP
6351: POP
// for i := 1 to 3 do
6352: LD_ADDR_VAR 0 2
6356: PUSH
6357: DOUBLE
6358: LD_INT 1
6360: DEC
6361: ST_TO_ADDR
6362: LD_INT 3
6364: PUSH
6365: FOR_TO
6366: IFFALSE 6421
// begin PrepareHuman ( false , 2 , 2 ) ;
6368: LD_INT 0
6370: PPUSH
6371: LD_INT 2
6373: PPUSH
6374: LD_INT 2
6376: PPUSH
6377: CALL_OW 380
// un := CreateHuman ;
6381: LD_ADDR_VAR 0 3
6385: PUSH
6386: CALL_OW 44
6390: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6391: LD_ADDR_EXP 51
6395: PUSH
6396: LD_EXP 51
6400: PUSH
6401: LD_VAR 0 3
6405: UNION
6406: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6407: LD_VAR 0 3
6411: PPUSH
6412: LD_INT 64
6414: PPUSH
6415: CALL_OW 52
// end ;
6419: GO 6365
6421: POP
6422: POP
// for i := 1 to 2 do
6423: LD_ADDR_VAR 0 2
6427: PUSH
6428: DOUBLE
6429: LD_INT 1
6431: DEC
6432: ST_TO_ADDR
6433: LD_INT 2
6435: PUSH
6436: FOR_TO
6437: IFFALSE 6576
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6439: LD_INT 4
6441: PPUSH
6442: LD_INT 1
6444: PPUSH
6445: LD_INT 2
6447: PPUSH
6448: LD_INT 2
6450: PPUSH
6451: LD_INT 1
6453: PPUSH
6454: LD_INT 3
6456: PPUSH
6457: LD_INT 100
6459: PPUSH
6460: CALL 366 0 7
// un := CreateVehicle ;
6464: LD_ADDR_VAR 0 3
6468: PUSH
6469: CALL_OW 45
6473: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6474: LD_ADDR_EXP 51
6478: PUSH
6479: LD_EXP 51
6483: PUSH
6484: LD_VAR 0 3
6488: UNION
6489: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
6490: LD_VAR 0 3
6494: PPUSH
6495: LD_INT 28
6497: PPUSH
6498: LD_INT 37
6500: PPUSH
6501: LD_INT 6
6503: PPUSH
6504: LD_INT 0
6506: PPUSH
6507: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
6511: LD_INT 0
6513: PPUSH
6514: LD_INT 3
6516: PPUSH
6517: LD_INT 2
6519: PPUSH
6520: CALL_OW 380
// un := CreateHuman ;
6524: LD_ADDR_VAR 0 3
6528: PUSH
6529: CALL_OW 44
6533: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6534: LD_ADDR_EXP 51
6538: PUSH
6539: LD_EXP 51
6543: PUSH
6544: LD_VAR 0 3
6548: UNION
6549: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
6550: LD_VAR 0 3
6554: PPUSH
6555: LD_EXP 51
6559: PUSH
6560: LD_EXP 51
6564: PUSH
6565: LD_INT 1
6567: MINUS
6568: ARRAY
6569: PPUSH
6570: CALL_OW 52
// end ;
6574: GO 6436
6576: POP
6577: POP
// end ;
6578: LD_VAR 0 1
6582: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
6583: LD_INT 0
6585: PPUSH
6586: PPUSH
6587: PPUSH
6588: PPUSH
// uc_side := 4 ;
6589: LD_ADDR_OWVAR 20
6593: PUSH
6594: LD_INT 4
6596: ST_TO_ADDR
// uc_nation := 1 ;
6597: LD_ADDR_OWVAR 21
6601: PUSH
6602: LD_INT 1
6604: ST_TO_ADDR
// tmp := [ ] ;
6605: LD_ADDR_VAR 0 4
6609: PUSH
6610: EMPTY
6611: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
6612: LD_INT 4
6614: PPUSH
6615: LD_INT 1
6617: PPUSH
6618: LD_INT 2
6620: PPUSH
6621: LD_INT 1
6623: PPUSH
6624: LD_INT 1
6626: PPUSH
6627: LD_INT 4
6629: PPUSH
6630: LD_INT 77
6632: PPUSH
6633: CALL 366 0 7
// un := CreateVehicle ;
6637: LD_ADDR_VAR 0 3
6641: PUSH
6642: CALL_OW 45
6646: ST_TO_ADDR
// tmp := tmp union un ;
6647: LD_ADDR_VAR 0 4
6651: PUSH
6652: LD_VAR 0 4
6656: PUSH
6657: LD_VAR 0 3
6661: UNION
6662: ST_TO_ADDR
// SetDir ( un , 2 ) ;
6663: LD_VAR 0 3
6667: PPUSH
6668: LD_INT 2
6670: PPUSH
6671: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
6675: LD_VAR 0 3
6679: PPUSH
6680: LD_INT 106
6682: PPUSH
6683: LD_INT 3
6685: PPUSH
6686: LD_INT 0
6688: PPUSH
6689: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
6693: LD_INT 0
6695: PPUSH
6696: LD_INT 3
6698: PPUSH
6699: LD_INT 2
6701: PPUSH
6702: CALL_OW 380
// un := CreateHuman ;
6706: LD_ADDR_VAR 0 3
6710: PUSH
6711: CALL_OW 44
6715: ST_TO_ADDR
// tmp := tmp union un ;
6716: LD_ADDR_VAR 0 4
6720: PUSH
6721: LD_VAR 0 4
6725: PUSH
6726: LD_VAR 0 3
6730: UNION
6731: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
6732: LD_VAR 0 3
6736: PPUSH
6737: LD_VAR 0 4
6741: PUSH
6742: LD_VAR 0 4
6746: PUSH
6747: LD_INT 1
6749: MINUS
6750: ARRAY
6751: PPUSH
6752: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
6756: LD_VAR 0 3
6760: PPUSH
6761: LD_INT 109
6763: PPUSH
6764: LD_INT 9
6766: PPUSH
6767: CALL_OW 111
// wait ( 0 0$1 ) ;
6771: LD_INT 35
6773: PPUSH
6774: CALL_OW 67
// for i := 1 to 2 do
6778: LD_ADDR_VAR 0 2
6782: PUSH
6783: DOUBLE
6784: LD_INT 1
6786: DEC
6787: ST_TO_ADDR
6788: LD_INT 2
6790: PUSH
6791: FOR_TO
6792: IFFALSE 6856
// begin PrepareHuman ( false , 1 , 2 ) ;
6794: LD_INT 0
6796: PPUSH
6797: LD_INT 1
6799: PPUSH
6800: LD_INT 2
6802: PPUSH
6803: CALL_OW 380
// un := CreateHuman ;
6807: LD_ADDR_VAR 0 3
6811: PUSH
6812: CALL_OW 44
6816: ST_TO_ADDR
// tmp := tmp union un ;
6817: LD_ADDR_VAR 0 4
6821: PUSH
6822: LD_VAR 0 4
6826: PUSH
6827: LD_VAR 0 3
6831: UNION
6832: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
6833: LD_VAR 0 3
6837: PPUSH
6838: LD_INT 105
6840: PPUSH
6841: LD_INT 2
6843: PPUSH
6844: LD_INT 2
6846: PPUSH
6847: LD_INT 0
6849: PPUSH
6850: CALL_OW 50
// end ;
6854: GO 6791
6856: POP
6857: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
6858: LD_VAR 0 4
6862: PPUSH
6863: LD_INT 26
6865: PPUSH
6866: LD_INT 35
6868: PPUSH
6869: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
6873: LD_INT 35
6875: PPUSH
6876: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
6880: LD_VAR 0 4
6884: PPUSH
6885: LD_INT 50
6887: PUSH
6888: EMPTY
6889: LIST
6890: PPUSH
6891: CALL_OW 72
6895: NOT
6896: IFFALSE 6900
// exit ;
6898: GO 7027
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
6900: LD_VAR 0 4
6904: PPUSH
6905: LD_INT 91
6907: PUSH
6908: LD_INT 64
6910: PUSH
6911: LD_INT 12
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: LIST
6918: PPUSH
6919: CALL_OW 72
6923: PUSH
6924: LD_VAR 0 4
6928: EQUAL
6929: IFFALSE 6873
// omicronSquad := omicronSquad union tmp ;
6931: LD_ADDR_EXP 51
6935: PUSH
6936: LD_EXP 51
6940: PUSH
6941: LD_VAR 0 4
6945: UNION
6946: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
6947: LD_ADDR_VAR 0 2
6951: PUSH
6952: LD_VAR 0 4
6956: PPUSH
6957: LD_INT 25
6959: PUSH
6960: LD_INT 1
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: PPUSH
6967: CALL_OW 72
6971: PUSH
6972: FOR_IN
6973: IFFALSE 7025
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
6975: LD_VAR 0 2
6979: PPUSH
6980: LD_INT 22
6982: PUSH
6983: LD_INT 4
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: LD_INT 30
6992: PUSH
6993: LD_INT 4
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PPUSH
7004: CALL_OW 69
7008: PPUSH
7009: LD_VAR 0 2
7013: PPUSH
7014: CALL_OW 74
7018: PPUSH
7019: CALL_OW 120
7023: GO 6972
7025: POP
7026: POP
// end ;
7027: LD_VAR 0 1
7031: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7032: LD_EXP 13
7036: NOT
7037: IFFALSE 7608
7039: GO 7041
7041: DISABLE
7042: LD_INT 0
7044: PPUSH
7045: PPUSH
7046: PPUSH
7047: PPUSH
// begin enable ;
7048: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7049: LD_ADDR_VAR 0 2
7053: PUSH
7054: LD_INT 22
7056: PUSH
7057: LD_INT 4
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PUSH
7064: LD_INT 21
7066: PUSH
7067: LD_INT 3
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: PUSH
7074: LD_INT 3
7076: PUSH
7077: LD_INT 24
7079: PUSH
7080: LD_INT 1000
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: LIST
7095: PPUSH
7096: CALL_OW 69
7100: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7101: LD_ADDR_VAR 0 3
7105: PUSH
7106: LD_EXP 51
7110: PPUSH
7111: LD_INT 25
7113: PUSH
7114: LD_INT 2
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PPUSH
7121: CALL_OW 72
7125: ST_TO_ADDR
// if filter and tmp then
7126: LD_VAR 0 2
7130: PUSH
7131: LD_VAR 0 3
7135: AND
7136: IFFALSE 7209
// begin for i in tmp do
7138: LD_ADDR_VAR 0 1
7142: PUSH
7143: LD_VAR 0 3
7147: PUSH
7148: FOR_IN
7149: IFFALSE 7205
// if IsInUnit ( i ) then
7151: LD_VAR 0 1
7155: PPUSH
7156: CALL_OW 310
7160: IFFALSE 7173
// ComExitBuilding ( i ) else
7162: LD_VAR 0 1
7166: PPUSH
7167: CALL_OW 122
7171: GO 7203
// if not HasTask ( i ) then
7173: LD_VAR 0 1
7177: PPUSH
7178: CALL_OW 314
7182: NOT
7183: IFFALSE 7203
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7185: LD_VAR 0 1
7189: PPUSH
7190: LD_VAR 0 2
7194: PUSH
7195: LD_INT 1
7197: ARRAY
7198: PPUSH
7199: CALL_OW 130
7203: GO 7148
7205: POP
7206: POP
// end else
7207: GO 7280
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7209: LD_VAR 0 3
7213: PPUSH
7214: LD_INT 3
7216: PUSH
7217: LD_INT 54
7219: PUSH
7220: EMPTY
7221: LIST
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PPUSH
7227: CALL_OW 72
7231: IFFALSE 7280
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7233: LD_ADDR_VAR 0 1
7237: PUSH
7238: LD_VAR 0 3
7242: PPUSH
7243: LD_INT 3
7245: PUSH
7246: LD_INT 54
7248: PUSH
7249: EMPTY
7250: LIST
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PPUSH
7256: CALL_OW 72
7260: PUSH
7261: FOR_IN
7262: IFFALSE 7278
// ComEnterUnit ( i , omikron ) ;
7264: LD_VAR 0 1
7268: PPUSH
7269: LD_INT 64
7271: PPUSH
7272: CALL_OW 120
7276: GO 7261
7278: POP
7279: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7280: LD_ADDR_VAR 0 2
7284: PUSH
7285: LD_EXP 51
7289: PPUSH
7290: LD_INT 21
7292: PUSH
7293: LD_INT 2
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: PPUSH
7300: CALL_OW 72
7304: ST_TO_ADDR
// if not filter then
7305: LD_VAR 0 2
7309: NOT
7310: IFFALSE 7314
// exit ;
7312: GO 7608
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7314: LD_ADDR_VAR 0 4
7318: PUSH
7319: LD_INT 13
7321: PPUSH
7322: LD_INT 81
7324: PUSH
7325: LD_INT 4
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PPUSH
7332: CALL_OW 70
7336: ST_TO_ADDR
// if enemy then
7337: LD_VAR 0 4
7341: IFFALSE 7608
// begin for i in filter do
7343: LD_ADDR_VAR 0 1
7347: PUSH
7348: LD_VAR 0 2
7352: PUSH
7353: FOR_IN
7354: IFFALSE 7606
// begin tmp := IsDrivenBy ( i ) ;
7356: LD_ADDR_VAR 0 3
7360: PUSH
7361: LD_VAR 0 1
7365: PPUSH
7366: CALL_OW 311
7370: ST_TO_ADDR
// if not tmp then
7371: LD_VAR 0 3
7375: NOT
7376: IFFALSE 7380
// continue ;
7378: GO 7353
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7380: LD_VAR 0 1
7384: PPUSH
7385: CALL_OW 256
7389: PUSH
7390: LD_INT 600
7392: GREATEREQUAL
7393: PUSH
7394: LD_VAR 0 1
7398: PPUSH
7399: CALL_OW 110
7403: PUSH
7404: LD_INT 1
7406: NONEQUAL
7407: AND
7408: IFFALSE 7434
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7410: LD_VAR 0 1
7414: PPUSH
7415: LD_VAR 0 4
7419: PPUSH
7420: LD_VAR 0 1
7424: PPUSH
7425: CALL_OW 74
7429: PPUSH
7430: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7434: LD_VAR 0 1
7438: PPUSH
7439: CALL_OW 256
7443: PUSH
7444: LD_INT 600
7446: LESS
7447: PUSH
7448: LD_VAR 0 1
7452: PPUSH
7453: CALL_OW 110
7457: PUSH
7458: LD_INT 1
7460: NONEQUAL
7461: AND
7462: IFFALSE 7491
// begin SetTag ( i , 1 ) ;
7464: LD_VAR 0 1
7468: PPUSH
7469: LD_INT 1
7471: PPUSH
7472: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
7476: LD_VAR 0 1
7480: PPUSH
7481: LD_INT 27
7483: PPUSH
7484: LD_INT 35
7486: PPUSH
7487: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
7491: LD_VAR 0 1
7495: PPUSH
7496: CALL_OW 110
7500: PUSH
7501: LD_INT 1
7503: EQUAL
7504: PUSH
7505: LD_VAR 0 1
7509: PPUSH
7510: LD_INT 27
7512: PPUSH
7513: LD_INT 35
7515: PPUSH
7516: CALL_OW 297
7520: PUSH
7521: LD_INT 6
7523: LESS
7524: AND
7525: PUSH
7526: LD_VAR 0 3
7530: AND
7531: IFFALSE 7604
// begin ComExitVehicle ( tmp ) ;
7533: LD_VAR 0 3
7537: PPUSH
7538: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
7542: LD_VAR 0 3
7546: PPUSH
7547: LD_VAR 0 1
7551: PPUSH
7552: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
7556: LD_INT 35
7558: PPUSH
7559: CALL_OW 67
// until GetLives ( i ) = 1000 ;
7563: LD_VAR 0 1
7567: PPUSH
7568: CALL_OW 256
7572: PUSH
7573: LD_INT 1000
7575: EQUAL
7576: IFFALSE 7556
// ComEnterUnit ( tmp , i ) ;
7578: LD_VAR 0 3
7582: PPUSH
7583: LD_VAR 0 1
7587: PPUSH
7588: CALL_OW 120
// SetTag ( i , 0 ) ;
7592: LD_VAR 0 1
7596: PPUSH
7597: LD_INT 0
7599: PPUSH
7600: CALL_OW 109
// end ; end ;
7604: GO 7353
7606: POP
7607: POP
// end ; end ;
7608: PPOPN 4
7610: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
7611: LD_EXP 13
7615: IFFALSE 7759
7617: GO 7619
7619: DISABLE
7620: LD_INT 0
7622: PPUSH
7623: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
7624: LD_ADDR_VAR 0 2
7628: PUSH
7629: LD_EXP 51
7633: PPUSH
7634: LD_INT 21
7636: PUSH
7637: LD_INT 1
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: PUSH
7644: LD_INT 50
7646: PUSH
7647: EMPTY
7648: LIST
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: PPUSH
7654: CALL_OW 72
7658: ST_TO_ADDR
// if not tmp then
7659: LD_VAR 0 2
7663: NOT
7664: IFFALSE 7668
// exit ;
7666: GO 7759
// repeat wait ( 0 0$1 ) ;
7668: LD_INT 35
7670: PPUSH
7671: CALL_OW 67
// for i in tmp do
7675: LD_ADDR_VAR 0 1
7679: PUSH
7680: LD_VAR 0 2
7684: PUSH
7685: FOR_IN
7686: IFFALSE 7750
// begin ComExit ( i ) ;
7688: LD_VAR 0 1
7692: PPUSH
7693: CALL 71118 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
7697: LD_VAR 0 1
7701: PPUSH
7702: LD_INT 14
7704: PPUSH
7705: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
7709: LD_VAR 0 1
7713: PPUSH
7714: LD_INT 14
7716: PPUSH
7717: CALL_OW 308
7721: IFFALSE 7748
// begin tmp := tmp diff i ;
7723: LD_ADDR_VAR 0 2
7727: PUSH
7728: LD_VAR 0 2
7732: PUSH
7733: LD_VAR 0 1
7737: DIFF
7738: ST_TO_ADDR
// RemoveUnit ( i ) ;
7739: LD_VAR 0 1
7743: PPUSH
7744: CALL_OW 64
// end ; end ;
7748: GO 7685
7750: POP
7751: POP
// until not tmp ;
7752: LD_VAR 0 2
7756: NOT
7757: IFFALSE 7668
// end ; end_of_file
7759: PPOPN 2
7761: END
// export function Action ; var i , un , veh , tmp ; begin
7762: LD_INT 0
7764: PPUSH
7765: PPUSH
7766: PPUSH
7767: PPUSH
7768: PPUSH
// InGameOn ;
7769: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
7773: LD_INT 179
7775: PPUSH
7776: LD_INT 5
7778: PPUSH
7779: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
7783: LD_ADDR_VAR 0 4
7787: PUSH
7788: LD_INT 2
7790: PPUSH
7791: LD_INT 2
7793: PPUSH
7794: LD_INT 12
7796: PPUSH
7797: LD_INT 1
7799: PPUSH
7800: LD_INT 1
7802: PPUSH
7803: LD_INT 24
7805: PPUSH
7806: LD_INT 33
7808: PPUSH
7809: CALL 366 0 7
7813: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
7814: LD_VAR 0 4
7818: PPUSH
7819: LD_INT 2
7821: PPUSH
7822: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
7826: LD_VAR 0 4
7830: PPUSH
7831: LD_INT 178
7833: PPUSH
7834: LD_INT 2
7836: PPUSH
7837: LD_INT 0
7839: PPUSH
7840: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
7844: LD_EXP 25
7848: PPUSH
7849: LD_VAR 0 4
7853: PPUSH
7854: CALL_OW 52
// if Kamil then
7858: LD_EXP 29
7862: IFFALSE 7897
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
7864: LD_EXP 29
7868: PPUSH
7869: LD_INT 207
7871: PPUSH
7872: LD_INT 37
7874: PPUSH
7875: LD_INT 0
7877: PPUSH
7878: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
7882: LD_EXP 29
7886: PPUSH
7887: LD_INT 211
7889: PPUSH
7890: LD_INT 38
7892: PPUSH
7893: CALL_OW 118
// end ; if Sophia then
7897: LD_EXP 31
7901: IFFALSE 7936
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
7903: LD_EXP 31
7907: PPUSH
7908: LD_INT 209
7910: PPUSH
7911: LD_INT 40
7913: PPUSH
7914: LD_INT 0
7916: PPUSH
7917: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
7921: LD_EXP 31
7925: PPUSH
7926: LD_INT 211
7928: PPUSH
7929: LD_INT 38
7931: PPUSH
7932: CALL_OW 118
// end ; if Givi then
7936: LD_EXP 26
7940: IFFALSE 7975
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
7942: LD_EXP 26
7946: PPUSH
7947: LD_INT 201
7949: PPUSH
7950: LD_INT 34
7952: PPUSH
7953: LD_INT 0
7955: PPUSH
7956: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
7960: LD_EXP 26
7964: PPUSH
7965: LD_INT 206
7967: PPUSH
7968: LD_INT 36
7970: PPUSH
7971: CALL_OW 118
// end ; if Ibrahim then
7975: LD_EXP 28
7979: IFFALSE 8014
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
7981: LD_EXP 28
7985: PPUSH
7986: LD_INT 202
7988: PPUSH
7989: LD_INT 39
7991: PPUSH
7992: LD_INT 0
7994: PPUSH
7995: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
7999: LD_EXP 28
8003: PPUSH
8004: LD_INT 206
8006: PPUSH
8007: LD_INT 36
8009: PPUSH
8010: CALL_OW 118
// end ; if Markov then
8014: LD_EXP 32
8018: IFFALSE 8105
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8020: LD_ADDR_VAR 0 4
8024: PUSH
8025: LD_INT 2
8027: PPUSH
8028: LD_INT 2
8030: PPUSH
8031: LD_INT 13
8033: PPUSH
8034: LD_INT 1
8036: PPUSH
8037: LD_INT 1
8039: PPUSH
8040: LD_INT 25
8042: PPUSH
8043: LD_INT 80
8045: PUSH
8046: LD_INT 20
8048: PUSH
8049: LD_OWVAR 67
8053: MUL
8054: MINUS
8055: PPUSH
8056: CALL 366 0 7
8060: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8061: LD_VAR 0 4
8065: PPUSH
8066: LD_INT 2
8068: PPUSH
8069: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8073: LD_VAR 0 4
8077: PPUSH
8078: LD_INT 197
8080: PPUSH
8081: LD_INT 35
8083: PPUSH
8084: LD_INT 0
8086: PPUSH
8087: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8091: LD_EXP 32
8095: PPUSH
8096: LD_VAR 0 4
8100: PPUSH
8101: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8105: LD_ADDR_VAR 0 5
8109: PUSH
8110: LD_EXP 30
8114: PUSH
8115: LD_EXP 37
8119: UNION
8120: ST_TO_ADDR
// for i in tmp do
8121: LD_ADDR_VAR 0 2
8125: PUSH
8126: LD_VAR 0 5
8130: PUSH
8131: FOR_IN
8132: IFFALSE 8166
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8134: LD_VAR 0 2
8138: PPUSH
8139: LD_INT 203
8141: PPUSH
8142: LD_INT 41
8144: PPUSH
8145: LD_INT 6
8147: PPUSH
8148: LD_INT 0
8150: PPUSH
8151: CALL_OW 50
// ComHold ( i ) ;
8155: LD_VAR 0 2
8159: PPUSH
8160: CALL_OW 140
// end ;
8164: GO 8131
8166: POP
8167: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8168: LD_INT 22
8170: PUSH
8171: LD_INT 2
8173: PUSH
8174: EMPTY
8175: LIST
8176: LIST
8177: PUSH
8178: LD_INT 25
8180: PUSH
8181: LD_INT 2
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: PUSH
8188: EMPTY
8189: LIST
8190: LIST
8191: PPUSH
8192: CALL_OW 69
8196: NOT
8197: IFFALSE 8211
// SetClass ( Heike , 2 ) ;
8199: LD_EXP 25
8203: PPUSH
8204: LD_INT 2
8206: PPUSH
8207: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8211: LD_EXP 25
8215: PPUSH
8216: LD_INT 183
8218: PPUSH
8219: LD_INT 12
8221: PPUSH
8222: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8226: LD_EXP 25
8230: PPUSH
8231: LD_INT 188
8233: PPUSH
8234: LD_INT 20
8236: PPUSH
8237: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8241: LD_EXP 25
8245: PPUSH
8246: LD_INT 191
8248: PPUSH
8249: LD_INT 25
8251: PPUSH
8252: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8256: LD_EXP 25
8260: PPUSH
8261: LD_INT 203
8263: PPUSH
8264: LD_INT 29
8266: PPUSH
8267: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8271: LD_EXP 25
8275: PPUSH
8276: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8280: LD_INT 35
8282: PPUSH
8283: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8287: LD_EXP 25
8291: PPUSH
8292: CALL_OW 310
8296: NOT
8297: IFFALSE 8280
// CenterOnUnits ( Heike ) ;
8299: LD_EXP 25
8303: PPUSH
8304: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8308: LD_ADDR_VAR 0 5
8312: PUSH
8313: LD_INT 22
8315: PUSH
8316: LD_INT 2
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: PUSH
8323: LD_INT 21
8325: PUSH
8326: LD_INT 1
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: PPUSH
8337: CALL_OW 69
8341: PUSH
8342: LD_EXP 25
8346: PUSH
8347: LD_EXP 32
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: DIFF
8356: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8357: LD_VAR 0 5
8361: PPUSH
8362: LD_EXP 25
8366: PPUSH
8367: CALL_OW 119
// if Givi then
8371: LD_EXP 26
8375: IFFALSE 8393
// ComTurnUnit ( Heike , Givi ) else
8377: LD_EXP 25
8381: PPUSH
8382: LD_EXP 26
8386: PPUSH
8387: CALL_OW 119
8391: GO 8411
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8393: LD_EXP 25
8397: PPUSH
8398: LD_VAR 0 5
8402: PUSH
8403: LD_INT 1
8405: ARRAY
8406: PPUSH
8407: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8411: LD_EXP 25
8415: PPUSH
8416: LD_STRING DH-Start-1
8418: PPUSH
8419: CALL_OW 88
// if Givi then
8423: LD_EXP 26
8427: IFFALSE 8474
// begin Say ( Givi , DG-Start-2 ) ;
8429: LD_EXP 26
8433: PPUSH
8434: LD_STRING DG-Start-2
8436: PPUSH
8437: CALL_OW 88
// if not Mike then
8441: LD_EXP 27
8445: NOT
8446: IFFALSE 8472
// begin Say ( Givi , DG-Start-b-3 ) ;
8448: LD_EXP 26
8452: PPUSH
8453: LD_STRING DG-Start-b-3
8455: PPUSH
8456: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
8460: LD_EXP 25
8464: PPUSH
8465: LD_STRING DH-Start-b-4
8467: PPUSH
8468: CALL_OW 88
// end ; end else
8472: GO 8539
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
8474: LD_EXP 37
8478: PPUSH
8479: LD_INT 26
8481: PUSH
8482: LD_INT 1
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PPUSH
8489: CALL_OW 72
8493: PUSH
8494: LD_INT 1
8496: ARRAY
8497: PPUSH
8498: LD_STRING DArm-Start-a-2
8500: PPUSH
8501: CALL_OW 88
8505: NOT
8506: IFFALSE 8539
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
8508: LD_EXP 37
8512: PPUSH
8513: LD_INT 26
8515: PUSH
8516: LD_INT 2
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PPUSH
8523: CALL_OW 72
8527: PUSH
8528: LD_INT 1
8530: ARRAY
8531: PPUSH
8532: LD_STRING DArf-Start-a-2
8534: PPUSH
8535: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
8539: LD_EXP 25
8543: PPUSH
8544: LD_INT 211
8546: PPUSH
8547: LD_INT 38
8549: PPUSH
8550: CALL_OW 118
// wait ( 0 0$1 ) ;
8554: LD_INT 35
8556: PPUSH
8557: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
8561: LD_EXP 25
8565: PPUSH
8566: LD_STRING DH-Start-3
8568: PPUSH
8569: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8573: LD_EXP 25
8577: PPUSH
8578: LD_STRING DH-Start-4
8580: PPUSH
8581: CALL_OW 88
// InGameOff ;
8585: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
8589: LD_STRING Prepare
8591: PPUSH
8592: CALL_OW 337
// SaveForQuickRestart ;
8596: CALL_OW 22
// wait ( 0 0$10 ) ;
8600: LD_INT 350
8602: PPUSH
8603: CALL_OW 67
// if not Aviradze then
8607: LD_EXP 35
8611: NOT
8612: IFFALSE 8616
// exit ;
8614: GO 8856
// SetDir ( Aviradze , 4 ) ;
8616: LD_EXP 35
8620: PPUSH
8621: LD_INT 4
8623: PPUSH
8624: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
8628: LD_EXP 35
8632: PPUSH
8633: LD_INT 225
8635: PPUSH
8636: LD_INT 33
8638: PPUSH
8639: LD_INT 0
8641: PPUSH
8642: CALL_OW 48
// for i := 1 to 2 do
8646: LD_ADDR_VAR 0 2
8650: PUSH
8651: DOUBLE
8652: LD_INT 1
8654: DEC
8655: ST_TO_ADDR
8656: LD_INT 2
8658: PUSH
8659: FOR_TO
8660: IFFALSE 8791
// begin uc_side := 2 ;
8662: LD_ADDR_OWVAR 20
8666: PUSH
8667: LD_INT 2
8669: ST_TO_ADDR
// uc_nation := 0 ;
8670: LD_ADDR_OWVAR 21
8674: PUSH
8675: LD_INT 0
8677: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
8678: LD_INT 0
8680: PPUSH
8681: LD_INT 12
8683: PPUSH
8684: LD_INT 1
8686: PPUSH
8687: CALL_OW 380
// hc_gallery :=  ;
8691: LD_ADDR_OWVAR 33
8695: PUSH
8696: LD_STRING 
8698: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
8699: LD_ADDR_OWVAR 26
8703: PUSH
8704: LD_STRING Artudito
8706: PUSH
8707: LD_STRING Textur
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: PUSH
8714: LD_VAR 0 2
8718: ARRAY
8719: ST_TO_ADDR
// un := CreateHuman ;
8720: LD_ADDR_VAR 0 3
8724: PUSH
8725: CALL_OW 44
8729: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
8730: LD_VAR 0 3
8734: PPUSH
8735: LD_INT 224
8737: PUSH
8738: LD_INT 226
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PUSH
8745: LD_VAR 0 2
8749: ARRAY
8750: PPUSH
8751: LD_INT 31
8753: PUSH
8754: LD_INT 35
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: PUSH
8761: LD_VAR 0 2
8765: ARRAY
8766: PPUSH
8767: LD_INT 0
8769: PPUSH
8770: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
8774: LD_VAR 0 3
8778: PPUSH
8779: LD_INT 215
8781: PPUSH
8782: LD_INT 36
8784: PPUSH
8785: CALL_OW 111
// end ;
8789: GO 8659
8791: POP
8792: POP
// hc_name :=  ;
8793: LD_ADDR_OWVAR 26
8797: PUSH
8798: LD_STRING 
8800: ST_TO_ADDR
// InitHc ;
8801: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
8805: LD_EXP 35
8809: PPUSH
8810: LD_INT 215
8812: PPUSH
8813: LD_INT 36
8815: PPUSH
8816: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
8820: LD_EXP 35
8824: PPUSH
8825: LD_STRING DA-Arrive-1
8827: PPUSH
8828: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
8832: LD_EXP 25
8836: PPUSH
8837: LD_STRING DH-Arrive-2
8839: PPUSH
8840: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
8844: LD_EXP 35
8848: PPUSH
8849: LD_STRING DA-Arrive-3
8851: PPUSH
8852: CALL_OW 88
// end ;
8856: LD_VAR 0 1
8860: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
8861: LD_EXP 3
8865: IFFALSE 10254
8867: GO 8869
8869: DISABLE
8870: LD_INT 0
8872: PPUSH
8873: PPUSH
8874: PPUSH
// begin DialogueOn ;
8875: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
8879: LD_EXP 25
8883: PPUSH
8884: LD_STRING DH-base-1
8886: PPUSH
8887: CALL_OW 88
// if Markov then
8891: LD_EXP 32
8895: IFFALSE 8947
// begin Say ( Markov , DMar-base-2 ) ;
8897: LD_EXP 32
8901: PPUSH
8902: LD_STRING DMar-base-2
8904: PPUSH
8905: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
8909: LD_EXP 32
8913: PPUSH
8914: LD_STRING DMar-base-3
8916: PPUSH
8917: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
8921: LD_EXP 25
8925: PPUSH
8926: LD_STRING DH-base-4
8928: PPUSH
8929: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
8933: LD_EXP 32
8937: PPUSH
8938: LD_STRING DMar-base-5
8940: PPUSH
8941: CALL_OW 88
// end else
8945: GO 9024
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
8947: LD_EXP 37
8951: PPUSH
8952: LD_INT 26
8954: PUSH
8955: LD_INT 1
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: PPUSH
8962: CALL_OW 72
8966: PUSH
8967: LD_INT 1
8969: ARRAY
8970: PPUSH
8971: LD_STRING DArm-base-a-2
8973: PPUSH
8974: CALL_OW 88
8978: NOT
8979: IFFALSE 9012
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
8981: LD_EXP 37
8985: PPUSH
8986: LD_INT 26
8988: PUSH
8989: LD_INT 2
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: PPUSH
8996: CALL_OW 72
9000: PUSH
9001: LD_INT 1
9003: ARRAY
9004: PPUSH
9005: LD_STRING DArf-base-a-2
9007: PPUSH
9008: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9012: LD_EXP 25
9016: PPUSH
9017: LD_STRING DH-base-a-3
9019: PPUSH
9020: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9024: LD_EXP 35
9028: PPUSH
9029: LD_STRING DA-base-6
9031: PPUSH
9032: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9036: LD_EXP 35
9040: PPUSH
9041: LD_STRING DA-base-7
9043: PPUSH
9044: CALL_OW 88
// DialogueOff ;
9048: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9052: LD_STRING Flamethrower
9054: PPUSH
9055: CALL_OW 337
// wait ( 2 2$00 ) ;
9059: LD_INT 4200
9061: PPUSH
9062: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9066: LD_EXP 34
9070: PUSH
9071: LD_EXP 27
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: PPUSH
9080: LD_INT 203
9082: PPUSH
9083: LD_INT 37
9085: PPUSH
9086: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9090: LD_INT 22
9092: PUSH
9093: LD_INT 2
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PUSH
9100: LD_INT 92
9102: PUSH
9103: LD_INT 203
9105: PUSH
9106: LD_INT 37
9108: PUSH
9109: LD_INT 10
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: PUSH
9118: EMPTY
9119: LIST
9120: LIST
9121: PPUSH
9122: CALL_OW 69
9126: NOT
9127: IFFALSE 9167
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9129: LD_EXP 34
9133: PUSH
9134: LD_EXP 27
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PPUSH
9143: LD_EXP 25
9147: PPUSH
9148: CALL_OW 250
9152: PPUSH
9153: LD_EXP 25
9157: PPUSH
9158: CALL_OW 251
9162: PPUSH
9163: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9167: LD_INT 35
9169: PPUSH
9170: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9174: LD_INT 2
9176: PPUSH
9177: LD_EXP 34
9181: PPUSH
9182: CALL_OW 292
9186: PUSH
9187: LD_EXP 34
9191: PPUSH
9192: LD_EXP 25
9196: PPUSH
9197: CALL_OW 296
9201: PUSH
9202: LD_INT 8
9204: LESS
9205: PUSH
9206: LD_EXP 34
9210: PPUSH
9211: LD_INT 22
9213: PUSH
9214: LD_INT 2
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PUSH
9221: LD_INT 21
9223: PUSH
9224: LD_INT 3
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: PPUSH
9235: CALL_OW 69
9239: PPUSH
9240: LD_EXP 34
9244: PPUSH
9245: CALL_OW 74
9249: PPUSH
9250: CALL_OW 296
9254: PUSH
9255: LD_INT 7
9257: LESS
9258: OR
9259: AND
9260: PUSH
9261: LD_EXP 34
9265: PPUSH
9266: LD_INT 10
9268: PPUSH
9269: CALL_OW 308
9273: NOT
9274: AND
9275: IFFALSE 9167
// InGameOn ;
9277: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9281: LD_EXP 34
9285: PPUSH
9286: CALL_OW 87
// if IsInUnit ( Heike ) then
9290: LD_EXP 25
9294: PPUSH
9295: CALL_OW 310
9299: IFFALSE 9310
// ComExitBuilding ( Heike ) ;
9301: LD_EXP 25
9305: PPUSH
9306: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9310: LD_EXP 34
9314: PUSH
9315: LD_EXP 27
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PPUSH
9324: LD_EXP 25
9328: PPUSH
9329: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9333: LD_EXP 25
9337: PPUSH
9338: LD_EXP 34
9342: PPUSH
9343: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9347: LD_INT 22
9349: PUSH
9350: LD_INT 2
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: PUSH
9357: LD_INT 91
9359: PUSH
9360: LD_EXP 34
9364: PUSH
9365: LD_INT 10
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: LIST
9372: PUSH
9373: LD_INT 21
9375: PUSH
9376: LD_INT 3
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: LIST
9387: PPUSH
9388: CALL_OW 69
9392: IFFALSE 9418
// begin Say ( Kurt , DKs-scout-1 ) ;
9394: LD_EXP 34
9398: PPUSH
9399: LD_STRING DKs-scout-1
9401: PPUSH
9402: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9406: LD_EXP 25
9410: PPUSH
9411: LD_STRING DH-scout-2
9413: PPUSH
9414: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
9418: LD_EXP 25
9422: PPUSH
9423: CALL_OW 85
// if IsInUnit ( Heike ) then
9427: LD_EXP 25
9431: PPUSH
9432: CALL_OW 310
9436: IFFALSE 9447
// ComExit ( Heike ) ;
9438: LD_EXP 25
9442: PPUSH
9443: CALL 71118 0 1
// repeat wait ( 0 0$1 ) ;
9447: LD_INT 35
9449: PPUSH
9450: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
9454: LD_EXP 25
9458: PPUSH
9459: LD_EXP 34
9463: PPUSH
9464: CALL_OW 112
// until GetDistUnits ( Heike , Kurt ) < 6 ;
9468: LD_EXP 25
9472: PPUSH
9473: LD_EXP 34
9477: PPUSH
9478: CALL_OW 296
9482: PUSH
9483: LD_INT 6
9485: LESS
9486: IFFALSE 9447
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
9488: LD_EXP 34
9492: PUSH
9493: LD_EXP 27
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: PPUSH
9502: LD_EXP 25
9506: PPUSH
9507: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
9511: LD_EXP 34
9515: PPUSH
9516: LD_STRING DKs-scout-3
9518: PPUSH
9519: CALL_OW 88
// if Kaia and GetDistUnits ( Kaia , Kurt ) < 15 then
9523: LD_EXP 30
9527: PUSH
9528: LD_EXP 30
9532: PPUSH
9533: LD_EXP 34
9537: PPUSH
9538: CALL_OW 296
9542: PUSH
9543: LD_INT 15
9545: LESS
9546: AND
9547: IFFALSE 9737
// begin if IsInUnit ( Kaia ) then
9549: LD_EXP 30
9553: PPUSH
9554: CALL_OW 310
9558: IFFALSE 9569
// ComExitBuilding ( Kaia ) ;
9560: LD_EXP 30
9564: PPUSH
9565: CALL_OW 122
// wait ( 0 0$1 ) ;
9569: LD_INT 35
9571: PPUSH
9572: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
9576: LD_EXP 30
9580: PPUSH
9581: LD_EXP 34
9585: PPUSH
9586: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
9590: LD_INT 35
9592: PPUSH
9593: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
9597: LD_EXP 30
9601: PPUSH
9602: LD_EXP 34
9606: PPUSH
9607: CALL_OW 296
9611: PUSH
9612: LD_INT 6
9614: LESS
9615: IFFALSE 9590
// ComTurnUnit ( Kaia , Kurt ) ;
9617: LD_EXP 30
9621: PPUSH
9622: LD_EXP 34
9626: PPUSH
9627: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
9631: LD_EXP 30
9635: PPUSH
9636: LD_STRING DK-scout-4
9638: PPUSH
9639: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
9643: LD_EXP 34
9647: PPUSH
9648: LD_EXP 30
9652: PPUSH
9653: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
9657: LD_EXP 34
9661: PPUSH
9662: LD_STRING DKs-scout-5
9664: PPUSH
9665: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
9669: LD_EXP 30
9673: PPUSH
9674: LD_STRING DK-scout-6
9676: PPUSH
9677: CALL_OW 88
// if Mike then
9681: LD_EXP 27
9685: IFFALSE 9737
// begin Say ( Mike , DM-scout-7 ) ;
9687: LD_EXP 27
9691: PPUSH
9692: LD_STRING DM-scout-7
9694: PPUSH
9695: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
9699: LD_EXP 30
9703: PPUSH
9704: LD_EXP 27
9708: PPUSH
9709: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
9713: LD_EXP 30
9717: PPUSH
9718: LD_STRING DK-scout-8
9720: PPUSH
9721: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
9725: LD_EXP 27
9729: PPUSH
9730: LD_STRING DM-scout-9
9732: PPUSH
9733: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
9737: LD_INT 184
9739: PPUSH
9740: LD_INT 100
9742: PPUSH
9743: LD_INT 2
9745: PPUSH
9746: LD_INT 12
9748: NEG
9749: PPUSH
9750: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
9754: LD_INT 184
9756: PPUSH
9757: LD_INT 100
9759: PPUSH
9760: LD_INT 2
9762: PPUSH
9763: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
9767: LD_INT 184
9769: PPUSH
9770: LD_INT 100
9772: PPUSH
9773: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
9777: LD_EXP 34
9781: PPUSH
9782: LD_STRING DKs-scout-10
9784: PPUSH
9785: CALL_OW 88
// wait ( 0 0$1 ) ;
9789: LD_INT 35
9791: PPUSH
9792: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
9796: LD_INT 144
9798: PPUSH
9799: LD_INT 65
9801: PPUSH
9802: LD_INT 2
9804: PPUSH
9805: LD_INT 12
9807: NEG
9808: PPUSH
9809: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
9813: LD_INT 144
9815: PPUSH
9816: LD_INT 65
9818: PPUSH
9819: LD_INT 2
9821: PPUSH
9822: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
9826: LD_INT 144
9828: PPUSH
9829: LD_INT 65
9831: PPUSH
9832: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
9836: LD_EXP 34
9840: PPUSH
9841: LD_STRING DKs-scout-11
9843: PPUSH
9844: CALL_OW 88
// wait ( 0 0$1 ) ;
9848: LD_INT 35
9850: PPUSH
9851: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
9855: LD_EXP 34
9859: PPUSH
9860: CALL_OW 87
// if Mike and not Givi then
9864: LD_EXP 27
9868: PUSH
9869: LD_EXP 26
9873: NOT
9874: AND
9875: IFFALSE 9901
// begin Say ( Mike , DM-scout-a-1 ) ;
9877: LD_EXP 27
9881: PPUSH
9882: LD_STRING DM-scout-a-1
9884: PPUSH
9885: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
9889: LD_EXP 25
9893: PPUSH
9894: LD_STRING DH-scout-a-2
9896: PPUSH
9897: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
9901: LD_EXP 34
9905: PUSH
9906: LD_EXP 27
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: PPUSH
9915: LD_INT 2
9917: PPUSH
9918: CALL_OW 235
// InGameOff ;
9922: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
9926: LD_STRING Hill
9928: PPUSH
9929: CALL_OW 337
// SetAreaMapShow ( dontGoArea , 1 ) ;
9933: LD_INT 20
9935: PPUSH
9936: LD_INT 1
9938: PPUSH
9939: CALL_OW 424
// allowToPatrol := true ;
9943: LD_ADDR_EXP 12
9947: PUSH
9948: LD_INT 1
9950: ST_TO_ADDR
// wait ( 1 1$30 ) ;
9951: LD_INT 3150
9953: PPUSH
9954: CALL_OW 67
// InitHc ;
9958: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 ] [ Difficulty ] do
9962: LD_ADDR_VAR 0 1
9966: PUSH
9967: DOUBLE
9968: LD_INT 1
9970: DEC
9971: ST_TO_ADDR
9972: LD_INT 3
9974: PUSH
9975: LD_INT 3
9977: PUSH
9978: LD_INT 2
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: LIST
9985: PUSH
9986: LD_OWVAR 67
9990: ARRAY
9991: PUSH
9992: FOR_TO
9993: IFFALSE 10252
// begin uc_side := 2 ;
9995: LD_ADDR_OWVAR 20
9999: PUSH
10000: LD_INT 2
10002: ST_TO_ADDR
// uc_nation := 2 ;
10003: LD_ADDR_OWVAR 21
10007: PUSH
10008: LD_INT 2
10010: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 ] [ Difficulty ] ) ;
10011: LD_INT 0
10013: PPUSH
10014: LD_INT 1
10016: PUSH
10017: LD_INT 3
10019: PUSH
10020: LD_INT 1
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: LIST
10027: PUSH
10028: LD_VAR 0 1
10032: PUSH
10033: LD_INT 3
10035: MOD
10036: PUSH
10037: LD_INT 1
10039: PLUS
10040: ARRAY
10041: PPUSH
10042: LD_INT 3
10044: PUSH
10045: LD_INT 2
10047: PUSH
10048: LD_INT 2
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: LIST
10055: PUSH
10056: LD_OWVAR 67
10060: ARRAY
10061: PPUSH
10062: CALL_OW 380
// un := CreateHuman ;
10066: LD_ADDR_VAR 0 2
10070: PUSH
10071: CALL_OW 44
10075: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10076: LD_ADDR_EXP 37
10080: PUSH
10081: LD_EXP 37
10085: PUSH
10086: LD_VAR 0 2
10090: UNION
10091: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10092: LD_INT 2
10094: PPUSH
10095: LD_INT 2
10097: PPUSH
10098: LD_INT 13
10100: PPUSH
10101: LD_INT 2
10103: PUSH
10104: LD_INT 1
10106: PUSH
10107: EMPTY
10108: LIST
10109: LIST
10110: PUSH
10111: LD_VAR 0 1
10115: PUSH
10116: LD_INT 2
10118: MOD
10119: PUSH
10120: LD_INT 1
10122: PLUS
10123: ARRAY
10124: PPUSH
10125: LD_INT 1
10127: PPUSH
10128: LD_INT 27
10130: PUSH
10131: LD_INT 25
10133: PUSH
10134: LD_INT 27
10136: PUSH
10137: LD_INT 23
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: PUSH
10146: LD_OWVAR 67
10150: PUSH
10151: LD_INT 0
10153: PPUSH
10154: LD_INT 1
10156: PPUSH
10157: CALL_OW 12
10161: PLUS
10162: ARRAY
10163: PPUSH
10164: LD_INT 77
10166: PPUSH
10167: CALL 366 0 7
// veh := CreateVehicle ;
10171: LD_ADDR_VAR 0 3
10175: PUSH
10176: CALL_OW 45
10180: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10181: LD_VAR 0 3
10185: PPUSH
10186: LD_INT 2
10188: PPUSH
10189: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10193: LD_VAR 0 3
10197: PPUSH
10198: LD_INT 178
10200: PPUSH
10201: LD_INT 2
10203: PPUSH
10204: LD_INT 2
10206: PPUSH
10207: LD_INT 0
10209: PPUSH
10210: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10214: LD_VAR 0 2
10218: PPUSH
10219: LD_VAR 0 3
10223: PPUSH
10224: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10228: LD_VAR 0 2
10232: PPUSH
10233: LD_INT 183
10235: PPUSH
10236: LD_INT 11
10238: PPUSH
10239: CALL_OW 111
// wait ( 0 0$2 ) ;
10243: LD_INT 70
10245: PPUSH
10246: CALL_OW 67
// end ;
10250: GO 9992
10252: POP
10253: POP
// end ;
10254: PPOPN 3
10256: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10257: LD_EXP 4
10261: PUSH
10262: LD_EXP 35
10266: PPUSH
10267: CALL_OW 302
10271: AND
10272: IFFALSE 10321
10274: GO 10276
10276: DISABLE
// begin DialogueOn ;
10277: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10281: LD_EXP 35
10285: PPUSH
10286: LD_STRING DA-lab-1
10288: PPUSH
10289: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10293: LD_EXP 35
10297: PPUSH
10298: LD_STRING DA-lab-2
10300: PPUSH
10301: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10305: LD_EXP 25
10309: PPUSH
10310: LD_STRING DH-lab-3
10312: PPUSH
10313: CALL_OW 88
// DialogueOff ;
10317: CALL_OW 7
// end ;
10321: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10322: LD_INT 17
10324: PPUSH
10325: LD_INT 2
10327: PPUSH
10328: CALL_OW 321
10332: PUSH
10333: LD_INT 2
10335: EQUAL
10336: IFFALSE 10468
10338: GO 10340
10340: DISABLE
10341: LD_INT 0
10343: PPUSH
// begin DialogueOn ;
10344: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10348: LD_EXP 35
10352: PPUSH
10353: LD_STRING DA-Cam-1
10355: PPUSH
10356: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10360: LD_EXP 35
10364: PPUSH
10365: LD_STRING DA-Cam-2
10367: PPUSH
10368: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10372: LD_EXP 35
10376: PPUSH
10377: LD_STRING DA-Cam-3
10379: PPUSH
10380: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10384: LD_EXP 25
10388: PPUSH
10389: LD_STRING DH-Cam-4
10391: PPUSH
10392: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
10396: LD_EXP 30
10400: PPUSH
10401: LD_STRING DK-Cam-5
10403: PPUSH
10404: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
10408: LD_EXP 30
10412: PPUSH
10413: LD_STRING DK-Cam-6
10415: PPUSH
10416: CALL_OW 88
// DialogueOff ;
10420: CALL_OW 7
// Query ( Camera ) ;
10424: LD_STRING Camera
10426: PPUSH
10427: CALL_OW 97
// hiddenCameraAllowed := true ;
10431: LD_ADDR_EXP 5
10435: PUSH
10436: LD_INT 1
10438: ST_TO_ADDR
// for i in camAreas do
10439: LD_ADDR_VAR 0 1
10443: PUSH
10444: LD_EXP 8
10448: PUSH
10449: FOR_IN
10450: IFFALSE 10466
// SetAreaMapShow ( i , 1 ) ;
10452: LD_VAR 0 1
10456: PPUSH
10457: LD_INT 1
10459: PPUSH
10460: CALL_OW 424
10464: GO 10449
10466: POP
10467: POP
// end ;
10468: PPOPN 1
10470: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
10471: LD_EXP 8
10475: NOT
10476: PUSH
10477: LD_EXP 5
10481: AND
10482: IFFALSE 10580
10484: GO 10486
10486: DISABLE
10487: LD_INT 0
10489: PPUSH
// begin stop_talking := true ;
10490: LD_ADDR_OWVAR 56
10494: PUSH
10495: LD_INT 1
10497: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
10498: LD_ADDR_VAR 0 1
10502: PUSH
10503: LD_INT 22
10505: PUSH
10506: LD_INT 2
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 21
10515: PUSH
10516: LD_INT 1
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: LD_INT 23
10525: PUSH
10526: LD_INT 2
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: LIST
10537: PPUSH
10538: CALL_OW 69
10542: PUSH
10543: FOR_IN
10544: IFFALSE 10563
// AddExperience ( i , 2 , 450 ) ;
10546: LD_VAR 0 1
10550: PPUSH
10551: LD_INT 2
10553: PPUSH
10554: LD_INT 450
10556: PPUSH
10557: CALL_OW 492
10561: GO 10543
10563: POP
10564: POP
// stop_talking := false ;
10565: LD_ADDR_OWVAR 56
10569: PUSH
10570: LD_INT 0
10572: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
10573: LD_STRING ACH_CAMERA
10575: PPUSH
10576: CALL_OW 543
// end ;
10580: PPOPN 1
10582: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
10583: LD_EXP 9
10587: PUSH
10588: LD_EXP 11
10592: NOT
10593: AND
10594: IFFALSE 10653
10596: GO 10598
10598: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
10599: LD_EXP 9
10603: PPUSH
10604: CALL_OW 250
10608: PPUSH
10609: LD_EXP 9
10613: PPUSH
10614: CALL_OW 251
10618: PPUSH
10619: LD_INT 2
10621: PPUSH
10622: LD_INT 6
10624: NEG
10625: PPUSH
10626: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
10630: LD_EXP 9
10634: PPUSH
10635: CALL_OW 87
// wait ( 0 0$1 ) ;
10639: LD_INT 35
10641: PPUSH
10642: CALL_OW 67
// YouLost ( Spotted ) ;
10646: LD_STRING Spotted
10648: PPUSH
10649: CALL_OW 104
// end ;
10653: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
10654: LD_INT 3
10656: PUSH
10657: LD_INT 6
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PPUSH
10664: LD_INT 2
10666: PPUSH
10667: LD_EXP 47
10671: PPUSH
10672: CALL 1026 0 3
10676: IFFALSE 10709
10678: GO 10680
10680: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
10681: LD_ADDR_EXP 9
10685: PUSH
10686: LD_INT 3
10688: PUSH
10689: LD_INT 6
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PPUSH
10696: LD_INT 2
10698: PPUSH
10699: LD_EXP 47
10703: PPUSH
10704: CALL 1026 0 3
10708: ST_TO_ADDR
10709: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
10710: LD_INT 22
10712: PUSH
10713: LD_INT 6
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: LD_INT 30
10722: PUSH
10723: LD_INT 32
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: PUSH
10730: LD_INT 3
10732: PUSH
10733: LD_INT 24
10735: PUSH
10736: LD_INT 1000
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: LIST
10751: PPUSH
10752: CALL_OW 69
10756: IFFALSE 10817
10758: GO 10760
10760: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
10761: LD_ADDR_EXP 9
10765: PUSH
10766: LD_INT 22
10768: PUSH
10769: LD_INT 6
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: PUSH
10776: LD_INT 30
10778: PUSH
10779: LD_INT 32
10781: PUSH
10782: EMPTY
10783: LIST
10784: LIST
10785: PUSH
10786: LD_INT 3
10788: PUSH
10789: LD_INT 24
10791: PUSH
10792: LD_INT 1000
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: LIST
10807: PPUSH
10808: CALL_OW 69
10812: PUSH
10813: LD_INT 1
10815: ARRAY
10816: ST_TO_ADDR
10817: END
// every 0 0$1 trigger russianAlert do var i , tmp , towers , noncombat ;
10818: LD_EXP 9
10822: IFFALSE 11054
10824: GO 10826
10826: DISABLE
10827: LD_INT 0
10829: PPUSH
10830: PPUSH
10831: PPUSH
10832: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
10833: LD_ADDR_VAR 0 4
10837: PUSH
10838: LD_EXP 42
10842: PUSH
10843: LD_EXP 44
10847: PUSH
10848: LD_EXP 45
10852: UNION
10853: PPUSH
10854: LD_INT 3
10856: PUSH
10857: LD_INT 25
10859: PUSH
10860: LD_INT 1
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: PPUSH
10871: CALL_OW 72
10875: UNION
10876: ST_TO_ADDR
// for i in noncombat do
10877: LD_ADDR_VAR 0 1
10881: PUSH
10882: LD_VAR 0 4
10886: PUSH
10887: FOR_IN
10888: IFFALSE 10984
// begin if IsInUnit ( i ) then
10890: LD_VAR 0 1
10894: PPUSH
10895: CALL_OW 310
10899: IFFALSE 10910
// ComExitBuilding ( i ) ;
10901: LD_VAR 0 1
10905: PPUSH
10906: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
10910: LD_VAR 0 1
10914: PPUSH
10915: LD_INT 114
10917: PPUSH
10918: LD_INT 97
10920: PPUSH
10921: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
10925: LD_VAR 0 1
10929: PPUSH
10930: LD_INT 99
10932: PPUSH
10933: LD_INT 128
10935: PPUSH
10936: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
10940: LD_VAR 0 1
10944: PPUSH
10945: LD_INT 91
10947: PPUSH
10948: LD_INT 145
10950: PPUSH
10951: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
10955: LD_VAR 0 1
10959: PPUSH
10960: LD_INT 82
10962: PPUSH
10963: LD_INT 153
10965: PPUSH
10966: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
10970: LD_VAR 0 1
10974: PPUSH
10975: LD_INT 16
10977: PPUSH
10978: CALL_OW 173
// end ;
10982: GO 10887
10984: POP
10985: POP
// if not allowHeikeAttack then
10986: LD_EXP 11
10990: NOT
10991: IFFALSE 10995
// exit ;
10993: GO 11054
// SayRadio ( Kurin , D9a-Kur-1 ) ;
10995: LD_EXP 40
10999: PPUSH
11000: LD_STRING D9a-Kur-1
11002: PPUSH
11003: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11007: LD_EXP 43
11011: PPUSH
11012: LD_STRING D9a-Bur-1
11014: PPUSH
11015: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11019: LD_EXP 40
11023: PPUSH
11024: LD_STRING D9a-Kur-2
11026: PPUSH
11027: CALL_OW 94
// omicronFall := true ;
11031: LD_ADDR_EXP 13
11035: PUSH
11036: LD_INT 1
11038: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11039: LD_INT 105
11041: PPUSH
11042: CALL_OW 67
// retreatFromOmicron := true ;
11046: LD_ADDR_EXP 20
11050: PUSH
11051: LD_INT 1
11053: ST_TO_ADDR
// end ;
11054: PPOPN 4
11056: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11057: LD_INT 16
11059: PPUSH
11060: LD_INT 3
11062: PUSH
11063: LD_INT 22
11065: PUSH
11066: LD_INT 2
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PUSH
11077: LD_INT 23
11079: PUSH
11080: LD_INT 3
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PPUSH
11091: CALL_OW 70
11095: IFFALSE 11178
11097: GO 11099
11099: DISABLE
11100: LD_INT 0
11102: PPUSH
// begin enable ;
11103: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11104: LD_ADDR_VAR 0 1
11108: PUSH
11109: LD_INT 16
11111: PPUSH
11112: LD_INT 3
11114: PUSH
11115: LD_INT 22
11117: PUSH
11118: LD_INT 2
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PUSH
11129: LD_INT 23
11131: PUSH
11132: LD_INT 3
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: PPUSH
11143: CALL_OW 70
11147: PUSH
11148: FOR_IN
11149: IFFALSE 11176
// begin escapeCounter := escapeCounter + 1 ;
11151: LD_ADDR_EXP 19
11155: PUSH
11156: LD_EXP 19
11160: PUSH
11161: LD_INT 1
11163: PLUS
11164: ST_TO_ADDR
// RemoveUnit ( i ) ;
11165: LD_VAR 0 1
11169: PPUSH
11170: CALL_OW 64
// end ;
11174: GO 11148
11176: POP
11177: POP
// end ;
11178: PPOPN 1
11180: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11181: LD_OWVAR 1
11185: PUSH
11186: LD_INT 13650
11188: PUSH
11189: LD_INT 0
11191: PPUSH
11192: LD_INT 3150
11194: PPUSH
11195: CALL_OW 12
11199: PLUS
11200: GREATEREQUAL
11201: IFFALSE 11210
11203: GO 11205
11205: DISABLE
// SmallAmericanReinforcements ;
11206: CALL 6583 0 0
11210: END
// every 0 0$1 trigger tick >= 9 9$15 do
11211: LD_OWVAR 1
11215: PUSH
11216: LD_INT 19425
11218: GREATEREQUAL
11219: IFFALSE 11284
11221: GO 11223
11223: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11224: LD_EXP 48
11228: PPUSH
11229: LD_INT 21
11231: PUSH
11232: LD_INT 2
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: PPUSH
11239: CALL_OW 72
11243: PPUSH
11244: LD_INT 62
11246: PPUSH
11247: LD_INT 22
11249: PPUSH
11250: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11254: LD_EXP 49
11258: PPUSH
11259: LD_INT 69
11261: PPUSH
11262: LD_INT 27
11264: PPUSH
11265: CALL_OW 111
// wait ( 1 1$00 ) ;
11269: LD_INT 2100
11271: PPUSH
11272: CALL_OW 67
// startAttackOnOmicron := true ;
11276: LD_ADDR_EXP 6
11280: PUSH
11281: LD_INT 1
11283: ST_TO_ADDR
// end ;
11284: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11285: LD_EXP 22
11289: PUSH
11290: LD_INT 0
11292: EQUAL
11293: IFFALSE 13310
11295: GO 11297
11297: DISABLE
11298: LD_INT 0
11300: PPUSH
11301: PPUSH
11302: PPUSH
11303: PPUSH
11304: PPUSH
11305: PPUSH
11306: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11307: LD_INT 5
11309: PPUSH
11310: LD_INT 2
11312: PPUSH
11313: CALL_OW 343
// PrepareOmarForces ;
11317: CALL 1596 0 0
// wait ( 0 0$03 ) ;
11321: LD_INT 105
11323: PPUSH
11324: CALL_OW 67
// allowHeikeAttack := true ;
11328: LD_ADDR_EXP 11
11332: PUSH
11333: LD_INT 1
11335: ST_TO_ADDR
// activeGrishkoAI := false ;
11336: LD_ADDR_EXP 10
11340: PUSH
11341: LD_INT 0
11343: ST_TO_ADDR
// SetAreaMapShow ( dontGoArea , 0 ) ;
11344: LD_INT 20
11346: PPUSH
11347: LD_INT 0
11349: PPUSH
11350: CALL_OW 424
// if not hillBase then
11354: LD_EXP 15
11358: NOT
11359: IFFALSE 11368
// ChangeMissionObjectives ( HillDone ) ;
11361: LD_STRING HillDone
11363: PPUSH
11364: CALL_OW 337
// CenterOnUnits ( Omar ) ;
11368: LD_EXP 33
11372: PPUSH
11373: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
11377: LD_ADDR_VAR 0 1
11381: PUSH
11382: LD_INT 22
11384: PUSH
11385: LD_INT 2
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PUSH
11392: LD_INT 21
11394: PUSH
11395: LD_INT 1
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: PPUSH
11406: CALL_OW 69
11410: PUSH
11411: FOR_IN
11412: IFFALSE 11436
// if HasTask ( i ) then
11414: LD_VAR 0 1
11418: PPUSH
11419: CALL_OW 314
11423: IFFALSE 11434
// ComHold ( i ) ;
11425: LD_VAR 0 1
11429: PPUSH
11430: CALL_OW 140
11434: GO 11411
11436: POP
11437: POP
// DialogueOn ;
11438: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
11442: LD_EXP 33
11446: PPUSH
11447: LD_STRING DO-assault-1
11449: PPUSH
11450: CALL_OW 94
// DialogueOff ;
11454: CALL_OW 7
// game_speed := 4 ;
11458: LD_ADDR_OWVAR 65
11462: PUSH
11463: LD_INT 4
11465: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
11466: LD_ADDR_VAR 0 1
11470: PUSH
11471: LD_EXP 46
11475: PPUSH
11476: LD_INT 3
11478: PUSH
11479: LD_INT 54
11481: PUSH
11482: EMPTY
11483: LIST
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: PPUSH
11489: CALL_OW 72
11493: PUSH
11494: FOR_IN
11495: IFFALSE 11514
// ComMoveXY ( i , 226 , 114 ) ;
11497: LD_VAR 0 1
11501: PPUSH
11502: LD_INT 226
11504: PPUSH
11505: LD_INT 114
11507: PPUSH
11508: CALL_OW 111
11512: GO 11494
11514: POP
11515: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
11516: LD_EXP 41
11520: PPUSH
11521: LD_INT 22
11523: PUSH
11524: LD_INT 6
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: PUSH
11531: LD_INT 30
11533: PUSH
11534: LD_INT 4
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: PPUSH
11545: CALL_OW 69
11549: PPUSH
11550: LD_EXP 41
11554: PPUSH
11555: CALL_OW 74
11559: PPUSH
11560: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
11564: LD_STRING Attack
11566: PPUSH
11567: CALL_OW 337
// music_class := music_combat ;
11571: LD_ADDR_OWVAR 72
11575: PUSH
11576: LD_INT 1
11578: ST_TO_ADDR
// music_nat := 4 ;
11579: LD_ADDR_OWVAR 71
11583: PUSH
11584: LD_INT 4
11586: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
11587: LD_INT 5
11589: PPUSH
11590: LD_EXP 41
11594: PPUSH
11595: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
11599: LD_INT 6
11601: PPUSH
11602: LD_EXP 38
11606: PPUSH
11607: LD_INT 25
11609: PUSH
11610: LD_INT 1
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: PPUSH
11617: CALL_OW 72
11621: PUSH
11622: LD_INT 4
11624: ARRAY
11625: PPUSH
11626: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
11630: LD_ADDR_VAR 0 1
11634: PUSH
11635: LD_EXP 38
11639: PPUSH
11640: LD_INT 3
11642: PUSH
11643: LD_INT 25
11645: PUSH
11646: LD_INT 4
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PPUSH
11657: CALL_OW 72
11661: PUSH
11662: FOR_IN
11663: IFFALSE 11682
// ComAgressiveMove ( i , 221 , 110 ) ;
11665: LD_VAR 0 1
11669: PPUSH
11670: LD_INT 221
11672: PPUSH
11673: LD_INT 110
11675: PPUSH
11676: CALL_OW 114
11680: GO 11662
11682: POP
11683: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
11684: LD_EXP 38
11688: PPUSH
11689: LD_INT 25
11691: PUSH
11692: LD_INT 4
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: PPUSH
11699: CALL_OW 72
11703: PPUSH
11704: LD_INT 214
11706: PPUSH
11707: LD_INT 124
11709: PPUSH
11710: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
11714: LD_EXP 38
11718: PPUSH
11719: LD_INT 25
11721: PUSH
11722: LD_INT 1
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: PPUSH
11729: CALL_OW 72
11733: PUSH
11734: LD_INT 4
11736: ARRAY
11737: PPUSH
11738: LD_INT 214
11740: PPUSH
11741: LD_INT 114
11743: PPUSH
11744: LD_INT 0
11746: PPUSH
11747: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
11751: LD_EXP 41
11755: PPUSH
11756: LD_STRING D9-Gri-1
11758: PPUSH
11759: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
11763: LD_EXP 40
11767: PPUSH
11768: LD_STRING D9-Kur-1
11770: PPUSH
11771: CALL_OW 94
// wait ( 0 0$1 ) ;
11775: LD_INT 35
11777: PPUSH
11778: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
11782: LD_EXP 33
11786: PPUSH
11787: LD_INT 233
11789: PPUSH
11790: LD_INT 130
11792: PPUSH
11793: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
11797: LD_EXP 41
11801: PPUSH
11802: LD_STRING D9-Gri-2
11804: PPUSH
11805: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
11809: LD_EXP 40
11813: PPUSH
11814: LD_STRING D9-Kur-2
11816: PPUSH
11817: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
11821: LD_EXP 41
11825: PPUSH
11826: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
11830: LD_EXP 41
11834: PPUSH
11835: LD_INT 211
11837: PPUSH
11838: LD_INT 104
11840: PPUSH
11841: CALL_OW 171
// AddComHold ( Grishko ) ;
11845: LD_EXP 41
11849: PPUSH
11850: CALL_OW 200
// repeat wait ( 3 ) ;
11854: LD_INT 3
11856: PPUSH
11857: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
11861: LD_EXP 41
11865: PPUSH
11866: CALL_OW 310
11870: NOT
11871: IFFALSE 11854
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
11873: LD_EXP 38
11877: PPUSH
11878: LD_INT 34
11880: PUSH
11881: LD_INT 26
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: PPUSH
11888: CALL_OW 72
11892: PPUSH
11893: LD_EXP 41
11897: PPUSH
11898: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
11902: LD_EXP 38
11906: PPUSH
11907: LD_INT 34
11909: PUSH
11910: LD_INT 26
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PPUSH
11917: CALL_OW 72
11921: PPUSH
11922: LD_INT 215
11924: PPUSH
11925: LD_INT 106
11927: PPUSH
11928: CALL_OW 174
// repeat wait ( 3 ) ;
11932: LD_INT 3
11934: PPUSH
11935: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
11939: LD_EXP 41
11943: PPUSH
11944: CALL_OW 256
11948: PUSH
11949: LD_INT 1000
11951: LESS
11952: IFFALSE 11932
// NormalAttack ( 5 , Grishko ) ;
11954: LD_INT 5
11956: PPUSH
11957: LD_EXP 41
11961: PPUSH
11962: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
11966: LD_INT 6
11968: PPUSH
11969: LD_EXP 38
11973: PPUSH
11974: LD_INT 25
11976: PUSH
11977: LD_INT 1
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: PPUSH
11984: CALL_OW 72
11988: PUSH
11989: LD_INT 4
11991: ARRAY
11992: PPUSH
11993: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
11997: LD_EXP 41
12001: PPUSH
12002: LD_STRING D9-Gri-3
12004: PPUSH
12005: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12009: LD_EXP 40
12013: PPUSH
12014: LD_STRING D9-Kur-3
12016: PPUSH
12017: CALL_OW 94
// music_class := music_auto ;
12021: LD_ADDR_OWVAR 72
12025: PUSH
12026: LD_INT 0
12028: ST_TO_ADDR
// music_nat := music_auto ;
12029: LD_ADDR_OWVAR 71
12033: PUSH
12034: LD_INT 0
12036: ST_TO_ADDR
// for i in omarSquad do
12037: LD_ADDR_VAR 0 1
12041: PUSH
12042: LD_EXP 38
12046: PUSH
12047: FOR_IN
12048: IFFALSE 12190
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12050: LD_VAR 0 1
12054: PPUSH
12055: CALL_OW 247
12059: PUSH
12060: LD_INT 2
12062: EQUAL
12063: PUSH
12064: LD_VAR 0 1
12068: PPUSH
12069: CALL_OW 256
12073: PUSH
12074: LD_INT 1000
12076: LESS
12077: AND
12078: IFFALSE 12144
// begin driver := IsDrivenBy ( i ) ;
12080: LD_ADDR_VAR 0 2
12084: PUSH
12085: LD_VAR 0 1
12089: PPUSH
12090: CALL_OW 311
12094: ST_TO_ADDR
// veh := i ;
12095: LD_ADDR_VAR 0 3
12099: PUSH
12100: LD_VAR 0 1
12104: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12105: LD_VAR 0 2
12109: PPUSH
12110: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12114: LD_VAR 0 2
12118: PPUSH
12119: LD_VAR 0 3
12123: PPUSH
12124: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12128: LD_VAR 0 2
12132: PPUSH
12133: LD_VAR 0 3
12137: PPUSH
12138: CALL_OW 180
// end else
12142: GO 12188
// if GetLives ( i ) < 500 then
12144: LD_VAR 0 1
12148: PPUSH
12149: CALL_OW 256
12153: PUSH
12154: LD_INT 500
12156: LESS
12157: IFFALSE 12188
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12159: LD_EXP 38
12163: PPUSH
12164: LD_INT 25
12166: PUSH
12167: LD_INT 4
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: PPUSH
12174: CALL_OW 72
12178: PPUSH
12179: LD_VAR 0 1
12183: PPUSH
12184: CALL_OW 188
// end ; end ;
12188: GO 12047
12190: POP
12191: POP
// repeat wait ( 0 0$1 ) ;
12192: LD_INT 35
12194: PPUSH
12195: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12199: LD_EXP 38
12203: PPUSH
12204: LD_INT 3
12206: PUSH
12207: LD_INT 24
12209: PUSH
12210: LD_INT 1000
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: LD_INT 21
12223: PUSH
12224: LD_INT 2
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: PPUSH
12235: CALL_OW 72
12239: NOT
12240: PUSH
12241: LD_EXP 38
12245: PPUSH
12246: LD_INT 3
12248: PUSH
12249: LD_INT 24
12251: PUSH
12252: LD_INT 250
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: PPUSH
12263: CALL_OW 72
12267: NOT
12268: AND
12269: IFFALSE 12192
// wait ( 0 0$2 ) ;
12271: LD_INT 70
12273: PPUSH
12274: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12278: LD_ADDR_VAR 0 5
12282: PUSH
12283: LD_EXP 38
12287: PPUSH
12288: LD_INT 58
12290: PUSH
12291: EMPTY
12292: LIST
12293: PUSH
12294: LD_INT 21
12296: PUSH
12297: LD_INT 2
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: PPUSH
12308: CALL_OW 72
12312: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
12313: LD_ADDR_VAR 0 6
12317: PUSH
12318: LD_EXP 38
12322: PPUSH
12323: LD_INT 25
12325: PUSH
12326: LD_INT 3
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: LD_INT 3
12335: PUSH
12336: LD_INT 55
12338: PUSH
12339: EMPTY
12340: LIST
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PPUSH
12350: CALL_OW 72
12354: ST_TO_ADDR
// for i := 1 to tmp do
12355: LD_ADDR_VAR 0 1
12359: PUSH
12360: DOUBLE
12361: LD_INT 1
12363: DEC
12364: ST_TO_ADDR
12365: LD_VAR 0 5
12369: PUSH
12370: FOR_TO
12371: IFFALSE 12401
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
12373: LD_VAR 0 6
12377: PUSH
12378: LD_VAR 0 1
12382: ARRAY
12383: PPUSH
12384: LD_VAR 0 5
12388: PUSH
12389: LD_VAR 0 1
12393: ARRAY
12394: PPUSH
12395: CALL_OW 120
12399: GO 12370
12401: POP
12402: POP
// wait ( 0 0$5 ) ;
12403: LD_INT 175
12405: PPUSH
12406: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
12410: LD_EXP 38
12414: PPUSH
12415: LD_INT 199
12417: PPUSH
12418: LD_INT 141
12420: PPUSH
12421: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
12425: LD_EXP 33
12429: PPUSH
12430: LD_INT 190
12432: PPUSH
12433: LD_INT 143
12435: PPUSH
12436: CALL_OW 114
// AddComHold ( Omar ) ;
12440: LD_EXP 33
12444: PPUSH
12445: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
12449: LD_EXP 38
12453: PPUSH
12454: LD_INT 2
12456: PUSH
12457: LD_INT 25
12459: PUSH
12460: LD_INT 1
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: PUSH
12467: LD_INT 25
12469: PUSH
12470: LD_INT 4
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: LIST
12481: PPUSH
12482: CALL_OW 72
12486: PPUSH
12487: LD_INT 161
12489: PPUSH
12490: LD_INT 130
12492: PPUSH
12493: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
12497: LD_EXP 38
12501: PPUSH
12502: LD_INT 25
12504: PUSH
12505: LD_INT 1
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: PPUSH
12512: CALL_OW 72
12516: PPUSH
12517: LD_INT 163
12519: PPUSH
12520: LD_INT 122
12522: PPUSH
12523: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
12527: LD_EXP 38
12531: PPUSH
12532: LD_INT 25
12534: PUSH
12535: LD_INT 1
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: PPUSH
12542: CALL_OW 72
12546: PUSH
12547: LD_INT 4
12549: ARRAY
12550: PPUSH
12551: LD_INT 165
12553: PPUSH
12554: LD_INT 118
12556: PPUSH
12557: LD_INT 0
12559: PPUSH
12560: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
12564: LD_EXP 38
12568: PPUSH
12569: LD_INT 25
12571: PUSH
12572: LD_INT 1
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PPUSH
12579: CALL_OW 72
12583: PUSH
12584: LD_INT 4
12586: ARRAY
12587: PPUSH
12588: LD_INT 159
12590: PPUSH
12591: LD_INT 116
12593: PPUSH
12594: LD_INT 0
12596: PPUSH
12597: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
12601: LD_EXP 38
12605: PPUSH
12606: LD_INT 21
12608: PUSH
12609: LD_INT 2
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PPUSH
12616: CALL_OW 72
12620: PPUSH
12621: LD_INT 169
12623: PPUSH
12624: LD_INT 114
12626: PPUSH
12627: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
12631: LD_INT 35
12633: PPUSH
12634: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
12638: LD_ADDR_VAR 0 5
12642: PUSH
12643: LD_EXP 38
12647: PPUSH
12648: LD_INT 25
12650: PUSH
12651: LD_INT 1
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: PPUSH
12658: CALL_OW 72
12662: ST_TO_ADDR
// for i in tmp do
12663: LD_ADDR_VAR 0 1
12667: PUSH
12668: LD_VAR 0 5
12672: PUSH
12673: FOR_IN
12674: IFFALSE 12771
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
12676: LD_VAR 0 1
12680: PPUSH
12681: CALL_OW 256
12685: PUSH
12686: LD_INT 600
12688: LESS
12689: PUSH
12690: LD_VAR 0 1
12694: PPUSH
12695: LD_INT 161
12697: PPUSH
12698: LD_INT 130
12700: PPUSH
12701: CALL_OW 297
12705: PUSH
12706: LD_INT 6
12708: GREATER
12709: AND
12710: IFFALSE 12727
// ComMoveXY ( i , 161 , 130 ) ;
12712: LD_VAR 0 1
12716: PPUSH
12717: LD_INT 161
12719: PPUSH
12720: LD_INT 130
12722: PPUSH
12723: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
12727: LD_VAR 0 1
12731: PPUSH
12732: CALL_OW 256
12736: PUSH
12737: LD_INT 1000
12739: EQUAL
12740: PUSH
12741: LD_VAR 0 1
12745: PPUSH
12746: CALL_OW 314
12750: NOT
12751: AND
12752: IFFALSE 12769
// ComAgressiveMove ( i , 160 , 109 ) ;
12754: LD_VAR 0 1
12758: PPUSH
12759: LD_INT 160
12761: PPUSH
12762: LD_INT 109
12764: PPUSH
12765: CALL_OW 114
// end ;
12769: GO 12673
12771: POP
12772: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
12773: LD_ADDR_VAR 0 5
12777: PUSH
12778: LD_EXP 38
12782: PPUSH
12783: LD_INT 21
12785: PUSH
12786: LD_INT 2
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: PPUSH
12793: CALL_OW 72
12797: ST_TO_ADDR
// for i in tmp do
12798: LD_ADDR_VAR 0 1
12802: PUSH
12803: LD_VAR 0 5
12807: PUSH
12808: FOR_IN
12809: IFFALSE 13075
// begin tmp2 := IsDrivenBy ( i ) ;
12811: LD_ADDR_VAR 0 6
12815: PUSH
12816: LD_VAR 0 1
12820: PPUSH
12821: CALL_OW 311
12825: ST_TO_ADDR
// if not tmp2 then
12826: LD_VAR 0 6
12830: NOT
12831: IFFALSE 12835
// continue ;
12833: GO 12808
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
12835: LD_VAR 0 1
12839: PPUSH
12840: CALL_OW 256
12844: PUSH
12845: LD_INT 600
12847: GREATEREQUAL
12848: PUSH
12849: LD_VAR 0 1
12853: PPUSH
12854: CALL_OW 110
12858: PUSH
12859: LD_INT 1
12861: EQUAL
12862: AND
12863: IFFALSE 12877
// SetTag ( i , 0 ) ;
12865: LD_VAR 0 1
12869: PPUSH
12870: LD_INT 0
12872: PPUSH
12873: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
12877: LD_VAR 0 1
12881: PPUSH
12882: CALL_OW 256
12886: PUSH
12887: LD_INT 600
12889: GREATEREQUAL
12890: PUSH
12891: LD_VAR 0 1
12895: PPUSH
12896: CALL_OW 110
12900: NOT
12901: AND
12902: IFFALSE 12928
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
12904: LD_VAR 0 1
12908: PPUSH
12909: LD_VAR 0 7
12913: PPUSH
12914: LD_VAR 0 1
12918: PPUSH
12919: CALL_OW 74
12923: PPUSH
12924: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
12928: LD_VAR 0 1
12932: PPUSH
12933: CALL_OW 256
12937: PUSH
12938: LD_INT 600
12940: LESS
12941: PUSH
12942: LD_VAR 0 1
12946: PPUSH
12947: CALL_OW 110
12951: NOT
12952: AND
12953: IFFALSE 12982
// begin SetTag ( i , 1 ) ;
12955: LD_VAR 0 1
12959: PPUSH
12960: LD_INT 1
12962: PPUSH
12963: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
12967: LD_VAR 0 1
12971: PPUSH
12972: LD_INT 202
12974: PPUSH
12975: LD_INT 150
12977: PPUSH
12978: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
12982: LD_VAR 0 1
12986: PPUSH
12987: CALL_OW 110
12991: PUSH
12992: LD_INT 1
12994: EQUAL
12995: PUSH
12996: LD_VAR 0 1
13000: PPUSH
13001: LD_INT 202
13003: PPUSH
13004: LD_INT 150
13006: PPUSH
13007: CALL_OW 297
13011: PUSH
13012: LD_INT 6
13014: LESS
13015: AND
13016: PUSH
13017: LD_VAR 0 6
13021: AND
13022: IFFALSE 13073
// begin ComExitVehicle ( tmp2 ) ;
13024: LD_VAR 0 6
13028: PPUSH
13029: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13033: LD_VAR 0 6
13037: PPUSH
13038: LD_VAR 0 1
13042: PPUSH
13043: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13047: LD_VAR 0 6
13051: PPUSH
13052: LD_INT 700
13054: PPUSH
13055: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13059: LD_VAR 0 6
13063: PPUSH
13064: LD_VAR 0 1
13068: PPUSH
13069: CALL_OW 180
// end ; end ;
13073: GO 12808
13075: POP
13076: POP
// until kirovDestroyed ;
13077: LD_EXP 16
13081: IFFALSE 12631
// repeat wait ( 0 0$1 ) ;
13083: LD_INT 35
13085: PPUSH
13086: CALL_OW 67
// for i in omarSquad union Omar do
13090: LD_ADDR_VAR 0 1
13094: PUSH
13095: LD_EXP 38
13099: PUSH
13100: LD_EXP 33
13104: UNION
13105: PUSH
13106: FOR_IN
13107: IFFALSE 13277
// if IsInArea ( i , southRoadArea ) then
13109: LD_VAR 0 1
13113: PPUSH
13114: LD_INT 15
13116: PPUSH
13117: CALL_OW 308
13121: IFFALSE 13134
// RemoveUnit ( i ) else
13123: LD_VAR 0 1
13127: PPUSH
13128: CALL_OW 64
13132: GO 13275
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
13134: LD_VAR 0 1
13138: PPUSH
13139: CALL_OW 257
13143: PUSH
13144: LD_INT 3
13146: EQUAL
13147: PUSH
13148: LD_VAR 0 1
13152: PPUSH
13153: CALL_OW 310
13157: NOT
13158: AND
13159: PUSH
13160: LD_INT 22
13162: PUSH
13163: LD_INT 5
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: PUSH
13170: LD_INT 24
13172: PUSH
13173: LD_INT 251
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: PUSH
13180: LD_INT 21
13182: PUSH
13183: LD_INT 2
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: PUSH
13190: LD_INT 58
13192: PUSH
13193: EMPTY
13194: LIST
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: PPUSH
13202: CALL_OW 69
13206: AND
13207: IFFALSE 13260
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
13209: LD_VAR 0 1
13213: PPUSH
13214: LD_INT 22
13216: PUSH
13217: LD_INT 5
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PUSH
13224: LD_INT 21
13226: PUSH
13227: LD_INT 2
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: PUSH
13234: LD_INT 58
13236: PUSH
13237: EMPTY
13238: LIST
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: LIST
13244: PPUSH
13245: CALL_OW 69
13249: PUSH
13250: LD_INT 1
13252: ARRAY
13253: PPUSH
13254: CALL_OW 120
13258: GO 13275
// ComMoveXY ( i , 208 , 162 ) ;
13260: LD_VAR 0 1
13264: PPUSH
13265: LD_INT 208
13267: PPUSH
13268: LD_INT 162
13270: PPUSH
13271: CALL_OW 111
// end ;
13275: GO 13106
13277: POP
13278: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
13279: LD_INT 22
13281: PUSH
13282: LD_INT 5
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: PUSH
13289: LD_INT 21
13291: PUSH
13292: LD_INT 1
13294: PUSH
13295: EMPTY
13296: LIST
13297: LIST
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: PPUSH
13303: CALL_OW 69
13307: NOT
13308: IFFALSE 13083
// end ;
13310: PPOPN 7
13312: END
// every 0 0$1 trigger IsDead ( kirov ) do
13313: LD_INT 71
13315: PPUSH
13316: CALL_OW 301
13320: IFFALSE 13337
13322: GO 13324
13324: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
13325: LD_EXP 25
13329: PPUSH
13330: LD_STRING DH-1-Kirov
13332: PPUSH
13333: CALL_OW 88
13337: END
// every 0 0$1 trigger See ( 2 , beria ) do
13338: LD_INT 2
13340: PPUSH
13341: LD_INT 106
13343: PPUSH
13344: CALL_OW 292
13348: IFFALSE 13365
13350: GO 13352
13352: DISABLE
// Say ( Heike , DH-1-Beria ) ;
13353: LD_EXP 25
13357: PPUSH
13358: LD_STRING DH-1-Beria
13360: PPUSH
13361: CALL_OW 88
13365: END
// every 0 0$1 trigger See ( 2 , kagan ) do
13366: LD_INT 2
13368: PPUSH
13369: LD_INT 112
13371: PPUSH
13372: CALL_OW 292
13376: IFFALSE 13643
13378: GO 13380
13380: DISABLE
// begin DialogueOn ;
13381: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
13385: LD_INT 112
13387: PPUSH
13388: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
13392: LD_EXP 25
13396: PPUSH
13397: LD_STRING DH-1-Kagan
13399: PPUSH
13400: CALL_OW 88
// if Kamil then
13404: LD_EXP 29
13408: IFFALSE 13446
// begin Say ( Kamil , DKam-Kagan-2 ) ;
13410: LD_EXP 29
13414: PPUSH
13415: LD_STRING DKam-Kagan-2
13417: PPUSH
13418: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
13422: LD_EXP 26
13426: PPUSH
13427: LD_STRING DG-Kagan-3
13429: PPUSH
13430: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
13434: LD_EXP 26
13438: PPUSH
13439: LD_STRING DG-Kagan-4
13441: PPUSH
13442: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
13446: LD_STRING KaganBase
13448: PPUSH
13449: CALL_OW 97
13453: PUSH
13454: LD_INT 1
13456: DOUBLE
13457: EQUAL
13458: IFTRUE 13462
13460: GO 13557
13462: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
13463: LD_EXP 25
13467: PPUSH
13468: LD_STRING DH-Kagan-5
13470: PPUSH
13471: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
13475: LD_EXP 25
13479: PPUSH
13480: LD_STRING DH-Kagan-6
13482: PPUSH
13483: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
13487: LD_EXP 36
13491: PPUSH
13492: LD_STRING DShar-Kagan-7
13494: PPUSH
13495: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
13499: LD_EXP 25
13503: PPUSH
13504: LD_STRING DH-Kagan-8
13506: PPUSH
13507: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
13511: LD_EXP 25
13515: PPUSH
13516: LD_STRING DH-Kagan-9
13518: PPUSH
13519: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
13523: LD_EXP 36
13527: PPUSH
13528: LD_STRING DShar-Kagan-10
13530: PPUSH
13531: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
13535: LD_EXP 25
13539: PPUSH
13540: LD_STRING DH-Kagan-11
13542: PPUSH
13543: CALL_OW 88
// kaganCaptured := true ;
13547: LD_ADDR_EXP 24
13551: PUSH
13552: LD_INT 1
13554: ST_TO_ADDR
// end ; 2 :
13555: GO 13639
13557: LD_INT 2
13559: DOUBLE
13560: EQUAL
13561: IFTRUE 13565
13563: GO 13638
13565: POP
// begin if FilterAllUnits ( [ f_side , 8 ] ) and Aviradze then
13566: LD_INT 22
13568: PUSH
13569: LD_INT 8
13571: PUSH
13572: EMPTY
13573: LIST
13574: LIST
13575: PPUSH
13576: CALL_OW 69
13580: PUSH
13581: LD_EXP 35
13585: AND
13586: IFFALSE 13600
// Say ( Heike , DH-Kagan-a-5 ) ;
13588: LD_EXP 25
13592: PPUSH
13593: LD_STRING DH-Kagan-a-5
13595: PPUSH
13596: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
13600: LD_EXP 25
13604: PPUSH
13605: LD_STRING DH-Kagan-a-6
13607: PPUSH
13608: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
13612: LD_EXP 25
13616: PPUSH
13617: LD_STRING DH-Kagan-a-7
13619: PPUSH
13620: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
13624: LD_EXP 26
13628: PPUSH
13629: LD_STRING DG-Kagan-a-8
13631: PPUSH
13632: CALL_OW 88
// end ; end ;
13636: GO 13639
13638: POP
// DialogueOff ;
13639: CALL_OW 7
// end ;
13643: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
13644: LD_EXP 18
13648: PUSH
13649: LD_INT 112
13651: PPUSH
13652: CALL_OW 255
13656: PUSH
13657: LD_INT 2
13659: EQUAL
13660: OR
13661: IFFALSE 13673
13663: GO 13665
13665: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
13666: LD_STRING KaganDone
13668: PPUSH
13669: CALL_OW 337
13673: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
13674: LD_EXP 6
13678: PUSH
13679: LD_EXP 48
13683: PPUSH
13684: LD_INT 95
13686: PUSH
13687: LD_INT 19
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: PPUSH
13694: CALL_OW 72
13698: AND
13699: IFFALSE 13776
13701: GO 13703
13703: DISABLE
// begin DialogueOn ;
13704: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
13708: LD_INT 63
13710: PPUSH
13711: LD_INT 32
13713: PPUSH
13714: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
13718: LD_INT 63
13720: PPUSH
13721: LD_INT 32
13723: PPUSH
13724: LD_INT 2
13726: PPUSH
13727: LD_INT 12
13729: NEG
13730: PPUSH
13731: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
13735: LD_EXP 25
13739: PPUSH
13740: LD_STRING DH-Omicron-1
13742: PPUSH
13743: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
13747: LD_EXP 27
13751: PPUSH
13752: LD_STRING DM-Omicron-2
13754: PPUSH
13755: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
13759: LD_INT 63
13761: PPUSH
13762: LD_INT 32
13764: PPUSH
13765: LD_INT 2
13767: PPUSH
13768: CALL_OW 331
// DialogueOff ;
13772: CALL_OW 7
// end ;
13776: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
13777: LD_INT 2
13779: PPUSH
13780: LD_EXP 50
13784: PPUSH
13785: CALL_OW 292
13789: PUSH
13790: LD_EXP 50
13794: PPUSH
13795: CALL_OW 255
13799: PUSH
13800: LD_INT 2
13802: EQUAL
13803: OR
13804: PUSH
13805: LD_INT 106
13807: PPUSH
13808: CALL_OW 255
13812: PUSH
13813: LD_INT 2
13815: EQUAL
13816: OR
13817: PUSH
13818: LD_EXP 50
13822: PPUSH
13823: CALL_OW 302
13827: AND
13828: PUSH
13829: LD_EXP 25
13833: PPUSH
13834: CALL_OW 302
13838: AND
13839: PUSH
13840: LD_EXP 35
13844: PPUSH
13845: CALL_OW 302
13849: AND
13850: IFFALSE 14571
13852: GO 13854
13854: DISABLE
13855: LD_INT 0
13857: PPUSH
13858: PPUSH
13859: PPUSH
13860: PPUSH
13861: PPUSH
// begin DialogueOn ;
13862: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
13866: LD_INT 111
13868: PPUSH
13869: LD_INT 90
13871: PPUSH
13872: LD_INT 2
13874: PPUSH
13875: LD_INT 6
13877: NEG
13878: PPUSH
13879: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
13883: LD_INT 111
13885: PPUSH
13886: LD_INT 90
13888: PPUSH
13889: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
13893: LD_EXP 35
13897: PPUSH
13898: LD_STRING DA-Cap-1
13900: PPUSH
13901: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
13905: LD_EXP 25
13909: PPUSH
13910: LD_STRING DH-Cap-2
13912: PPUSH
13913: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
13917: LD_INT 111
13919: PPUSH
13920: LD_INT 90
13922: PPUSH
13923: LD_INT 2
13925: PPUSH
13926: CALL_OW 331
// DialogueOff ;
13930: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
13934: LD_INT 35
13936: PPUSH
13937: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 110 , 95 , 12 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_distxy , 110 , 95 , 12 ] ] ) ;
13941: LD_EXP 17
13945: PUSH
13946: LD_INT 106
13948: PPUSH
13949: CALL_OW 255
13953: PUSH
13954: LD_INT 2
13956: EQUAL
13957: OR
13958: PUSH
13959: LD_EXP 50
13963: PPUSH
13964: CALL_OW 255
13968: PUSH
13969: LD_INT 2
13971: EQUAL
13972: OR
13973: PUSH
13974: LD_EXP 50
13978: PPUSH
13979: CALL_OW 302
13983: AND
13984: PUSH
13985: LD_EXP 35
13989: PPUSH
13990: CALL_OW 302
13994: AND
13995: PUSH
13996: LD_INT 2
13998: PPUSH
13999: CALL_OW 463
14003: NOT
14004: AND
14005: PUSH
14006: LD_INT 22
14008: PUSH
14009: LD_INT 3
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: PUSH
14016: LD_INT 21
14018: PUSH
14019: LD_INT 1
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: PUSH
14026: LD_INT 92
14028: PUSH
14029: LD_INT 110
14031: PUSH
14032: LD_INT 95
14034: PUSH
14035: LD_INT 12
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: LIST
14048: PPUSH
14049: CALL_OW 69
14053: NOT
14054: AND
14055: PUSH
14056: LD_INT 22
14058: PUSH
14059: LD_INT 3
14061: PUSH
14062: EMPTY
14063: LIST
14064: LIST
14065: PUSH
14066: LD_INT 30
14068: PUSH
14069: LD_INT 5
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: PUSH
14076: LD_INT 92
14078: PUSH
14079: LD_INT 110
14081: PUSH
14082: LD_INT 95
14084: PUSH
14085: LD_INT 12
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: LIST
14098: PPUSH
14099: CALL_OW 69
14103: NOT
14104: AND
14105: IFFALSE 13934
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14107: LD_ADDR_VAR 0 2
14111: PUSH
14112: LD_EXP 37
14116: PUSH
14117: LD_EXP 28
14121: PUSH
14122: LD_EXP 29
14126: PUSH
14127: LD_EXP 31
14131: PUSH
14132: LD_EXP 30
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: UNION
14143: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14144: LD_ADDR_VAR 0 2
14148: PUSH
14149: LD_VAR 0 2
14153: PPUSH
14154: LD_INT 50
14156: PUSH
14157: EMPTY
14158: LIST
14159: PPUSH
14160: CALL_OW 72
14164: ST_TO_ADDR
// if tmp < 2 then
14165: LD_VAR 0 2
14169: PUSH
14170: LD_INT 2
14172: LESS
14173: IFFALSE 14185
// q := 2 else
14175: LD_ADDR_VAR 0 4
14179: PUSH
14180: LD_INT 2
14182: ST_TO_ADDR
14183: GO 14198
// q := Query ( LabCap ) ;
14185: LD_ADDR_VAR 0 4
14189: PUSH
14190: LD_STRING LabCap
14192: PPUSH
14193: CALL_OW 97
14197: ST_TO_ADDR
// case q of 1 :
14198: LD_VAR 0 4
14202: PUSH
14203: LD_INT 1
14205: DOUBLE
14206: EQUAL
14207: IFTRUE 14211
14209: GO 14535
14211: POP
// begin DoNotAttack ( 2 , ruLab ) ;
14212: LD_INT 2
14214: PPUSH
14215: LD_EXP 50
14219: PPUSH
14220: CALL_OW 471
// labCaptured := true ;
14224: LD_ADDR_EXP 21
14228: PUSH
14229: LD_INT 1
14231: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
14232: LD_EXP 25
14236: PPUSH
14237: LD_STRING DH-Cap-a-1
14239: PPUSH
14240: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
14244: LD_EXP 35
14248: PPUSH
14249: LD_STRING DA-Cap-a-2
14251: PPUSH
14252: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike ] ^ [ sel_changeable ] ^ tmp ;
14256: LD_ADDR_VAR 0 5
14260: PUSH
14261: LD_EXP 35
14265: PUSH
14266: LD_INT -3
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PUSH
14273: LD_INT -2
14275: PUSH
14276: LD_INT -4
14278: PUSH
14279: LD_EXP 25
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: LIST
14288: ADD
14289: PUSH
14290: LD_INT -3
14292: PUSH
14293: EMPTY
14294: LIST
14295: ADD
14296: PUSH
14297: LD_VAR 0 2
14301: ADD
14302: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
14303: LD_ADDR_VAR 0 3
14307: PUSH
14308: LD_STRING Select two characters to go with Aviradze
14310: PPUSH
14311: LD_INT 2
14313: PPUSH
14314: LD_INT 2
14316: PPUSH
14317: LD_VAR 0 5
14321: PPUSH
14322: EMPTY
14323: PPUSH
14324: CALL_OW 42
14328: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
14329: LD_EXP 50
14333: PPUSH
14334: LD_INT 8
14336: PPUSH
14337: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
14341: LD_EXP 35
14345: PPUSH
14346: LD_INT 8
14348: PPUSH
14349: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
14353: LD_ADDR_EXP 39
14357: PUSH
14358: LD_EXP 35
14362: PUSH
14363: EMPTY
14364: LIST
14365: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
14366: LD_EXP 35
14370: PPUSH
14371: CALL_OW 310
14375: IFFALSE 14386
// ComExit ( Aviradze ) ;
14377: LD_EXP 35
14381: PPUSH
14382: CALL 71118 0 1
// wait ( 3 ) ;
14386: LD_INT 3
14388: PPUSH
14389: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
14393: LD_EXP 35
14397: PPUSH
14398: LD_EXP 50
14402: PPUSH
14403: CALL_OW 120
// for i := 1 to 2 do
14407: LD_ADDR_VAR 0 1
14411: PUSH
14412: DOUBLE
14413: LD_INT 1
14415: DEC
14416: ST_TO_ADDR
14417: LD_INT 2
14419: PUSH
14420: FOR_TO
14421: IFFALSE 14524
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
14423: LD_ADDR_EXP 39
14427: PUSH
14428: LD_EXP 39
14432: PUSH
14433: LD_VAR 0 3
14437: PUSH
14438: LD_VAR 0 1
14442: ARRAY
14443: UNION
14444: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
14445: LD_VAR 0 3
14449: PUSH
14450: LD_VAR 0 1
14454: ARRAY
14455: PPUSH
14456: LD_INT 8
14458: PPUSH
14459: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
14463: LD_VAR 0 3
14467: PUSH
14468: LD_VAR 0 1
14472: ARRAY
14473: PPUSH
14474: CALL_OW 310
14478: IFFALSE 14495
// ComExit ( tmp2 [ i ] ) ;
14480: LD_VAR 0 3
14484: PUSH
14485: LD_VAR 0 1
14489: ARRAY
14490: PPUSH
14491: CALL 71118 0 1
// wait ( 3 ) ;
14495: LD_INT 3
14497: PPUSH
14498: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
14502: LD_VAR 0 3
14506: PUSH
14507: LD_VAR 0 1
14511: ARRAY
14512: PPUSH
14513: LD_EXP 50
14517: PPUSH
14518: CALL_OW 120
// end ;
14522: GO 14420
14524: POP
14525: POP
// SetAchievement ( ACH_LAB ) ;
14526: LD_STRING ACH_LAB
14528: PPUSH
14529: CALL_OW 543
// end ; 2 :
14533: GO 14571
14535: LD_INT 2
14537: DOUBLE
14538: EQUAL
14539: IFTRUE 14543
14541: GO 14570
14543: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
14544: LD_EXP 25
14548: PPUSH
14549: LD_STRING DH-Cap-b-1
14551: PPUSH
14552: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
14556: LD_EXP 35
14560: PPUSH
14561: LD_STRING DA-Cap-b-2
14563: PPUSH
14564: CALL_OW 88
// end ; end ;
14568: GO 14571
14570: POP
// end ;
14571: PPOPN 5
14573: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
14574: LD_INT 10
14576: PPUSH
14577: LD_INT 22
14579: PUSH
14580: LD_INT 2
14582: PUSH
14583: EMPTY
14584: LIST
14585: LIST
14586: PUSH
14587: LD_INT 30
14589: PUSH
14590: LD_INT 31
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: PUSH
14597: EMPTY
14598: LIST
14599: LIST
14600: PPUSH
14601: CALL_OW 70
14605: PUSH
14606: LD_INT 2
14608: GREATEREQUAL
14609: IFFALSE 14621
14611: GO 14613
14613: DISABLE
// SetAchievement ( ACH_KING ) ;
14614: LD_STRING ACH_KING
14616: PPUSH
14617: CALL_OW 543
14621: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
14622: LD_EXP 11
14626: NOT
14627: PUSH
14628: LD_INT 10
14630: PPUSH
14631: LD_INT 22
14633: PUSH
14634: LD_INT 2
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PUSH
14641: LD_INT 2
14643: PUSH
14644: LD_INT 30
14646: PUSH
14647: LD_INT 31
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PUSH
14654: LD_INT 30
14656: PUSH
14657: LD_INT 4
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: LIST
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: PPUSH
14673: CALL_OW 70
14677: AND
14678: IFFALSE 14698
14680: GO 14682
14682: DISABLE
// begin hillBase := true ;
14683: LD_ADDR_EXP 15
14687: PUSH
14688: LD_INT 1
14690: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
14691: LD_STRING HillDone
14693: PPUSH
14694: CALL_OW 337
// end ;
14698: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
14699: LD_EXP 30
14703: PUSH
14704: LD_EXP 30
14708: PPUSH
14709: CALL_OW 256
14713: PUSH
14714: LD_INT 3
14716: LESS
14717: AND
14718: IFFALSE 14764
14720: GO 14722
14722: DISABLE
// begin DialogueOn ;
14723: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
14727: LD_EXP 30
14731: PPUSH
14732: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
14736: LD_EXP 30
14740: PPUSH
14741: LD_STRING DK-Kkilled-1
14743: PPUSH
14744: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
14748: LD_EXP 25
14752: PPUSH
14753: LD_STRING DH-Kkilled-2
14755: PPUSH
14756: CALL_OW 88
// DialogueOff ;
14760: CALL_OW 7
// end ;
14764: END
// every 0 0$1 trigger kaiaKilledByRussian do
14765: LD_EXP 23
14769: IFFALSE 14786
14771: GO 14773
14773: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
14774: LD_EXP 25
14778: PPUSH
14779: LD_STRING DH-Kkilled-3
14781: PPUSH
14782: CALL_OW 88
14786: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo ;
14787: LD_EXP 16
14791: PUSH
14792: LD_INT 106
14794: PPUSH
14795: CALL_OW 255
14799: PUSH
14800: LD_INT 2
14802: EQUAL
14803: PUSH
14804: LD_EXP 17
14808: OR
14809: AND
14810: PUSH
14811: LD_EXP 18
14815: PUSH
14816: LD_EXP 24
14820: PUSH
14821: LD_INT 112
14823: PPUSH
14824: CALL_OW 255
14828: PUSH
14829: LD_INT 2
14831: EQUAL
14832: AND
14833: OR
14834: AND
14835: IFFALSE 16017
14837: GO 14839
14839: DISABLE
14840: LD_INT 0
14842: PPUSH
14843: PPUSH
14844: PPUSH
14845: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
14846: LD_STRING GoToWest
14848: PPUSH
14849: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
14853: LD_INT 17
14855: PPUSH
14856: LD_INT 1
14858: PPUSH
14859: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
14863: LD_INT 35
14865: PPUSH
14866: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
14870: LD_ADDR_VAR 0 2
14874: PUSH
14875: LD_INT 17
14877: PPUSH
14878: LD_INT 22
14880: PUSH
14881: LD_INT 2
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: LD_INT 2
14890: PUSH
14891: LD_INT 21
14893: PUSH
14894: LD_INT 1
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: PUSH
14901: LD_INT 21
14903: PUSH
14904: LD_INT 2
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: PUSH
14911: LD_INT 3
14913: PUSH
14914: LD_INT 58
14916: PUSH
14917: EMPTY
14918: LIST
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: LIST
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PPUSH
14937: CALL_OW 70
14941: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
14942: LD_ADDR_VAR 0 3
14946: PUSH
14947: LD_INT 22
14949: PUSH
14950: LD_INT 2
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: LD_INT 3
14959: PUSH
14960: LD_INT 55
14962: PUSH
14963: EMPTY
14964: LIST
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: PUSH
14970: LD_INT 2
14972: PUSH
14973: LD_INT 21
14975: PUSH
14976: LD_INT 1
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: PUSH
14983: LD_INT 21
14985: PUSH
14986: LD_INT 2
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: PUSH
14993: LD_INT 3
14995: PUSH
14996: LD_INT 58
14998: PUSH
14999: EMPTY
15000: LIST
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: LIST
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: LIST
15019: PPUSH
15020: CALL_OW 69
15024: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15025: LD_VAR 0 2
15029: PUSH
15030: LD_INT 0
15032: PLUS
15033: PUSH
15034: LD_VAR 0 3
15038: PUSH
15039: LD_INT 0
15041: PLUS
15042: EQUAL
15043: IFFALSE 14863
// SaveCharacters ( Heike , 04_1_Heike ) ;
15045: LD_EXP 25
15049: PPUSH
15050: LD_STRING 04_1_Heike
15052: PPUSH
15053: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15057: LD_EXP 35
15061: PUSH
15062: LD_EXP 35
15066: PUSH
15067: LD_EXP 39
15071: IN
15072: NOT
15073: AND
15074: IFFALSE 15090
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15076: LD_EXP 35
15080: PPUSH
15081: LD_STRING 04_1_Aviradze
15083: PPUSH
15084: CALL_OW 38
15088: GO 15108
// if Aviradze then
15090: LD_EXP 35
15094: IFFALSE 15108
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15096: LD_EXP 35
15100: PPUSH
15101: LD_STRING 04_1_Aviradze_L
15103: PPUSH
15104: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15108: LD_EXP 28
15112: PUSH
15113: LD_EXP 28
15117: PUSH
15118: LD_EXP 39
15122: IN
15123: NOT
15124: AND
15125: IFFALSE 15141
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15127: LD_EXP 28
15131: PPUSH
15132: LD_STRING 04_1_Ibrahim
15134: PPUSH
15135: CALL_OW 38
15139: GO 15159
// if Ibrahim then
15141: LD_EXP 28
15145: IFFALSE 15159
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
15147: LD_EXP 28
15151: PPUSH
15152: LD_STRING 04_1_Ibrahim_L
15154: PPUSH
15155: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
15159: LD_EXP 29
15163: PUSH
15164: LD_EXP 29
15168: PUSH
15169: LD_EXP 39
15173: IN
15174: NOT
15175: AND
15176: IFFALSE 15192
// SaveCharacters ( Kamil , 04_1_Kamil ) else
15178: LD_EXP 29
15182: PPUSH
15183: LD_STRING 04_1_Kamil
15185: PPUSH
15186: CALL_OW 38
15190: GO 15210
// if Kamil then
15192: LD_EXP 29
15196: IFFALSE 15210
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
15198: LD_EXP 29
15202: PPUSH
15203: LD_STRING 04_1_Kamil_L
15205: PPUSH
15206: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
15210: LD_EXP 31
15214: PUSH
15215: LD_EXP 31
15219: PUSH
15220: LD_EXP 39
15224: IN
15225: NOT
15226: AND
15227: IFFALSE 15243
// SaveCharacters ( Sophia , 04_1_Sophia ) else
15229: LD_EXP 31
15233: PPUSH
15234: LD_STRING 04_1_Sophia
15236: PPUSH
15237: CALL_OW 38
15241: GO 15261
// if Sophia then
15243: LD_EXP 31
15247: IFFALSE 15261
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
15249: LD_EXP 31
15253: PPUSH
15254: LD_STRING 04_1_Sophia_L
15256: PPUSH
15257: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
15261: LD_EXP 30
15265: PUSH
15266: LD_EXP 30
15270: PUSH
15271: LD_EXP 39
15275: IN
15276: NOT
15277: AND
15278: IFFALSE 15294
// SaveCharacters ( Kaia , 04_1_Kaia ) else
15280: LD_EXP 30
15284: PPUSH
15285: LD_STRING 04_1_Kaia
15287: PPUSH
15288: CALL_OW 38
15292: GO 15312
// if Kaia then
15294: LD_EXP 30
15298: IFFALSE 15312
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
15300: LD_EXP 30
15304: PPUSH
15305: LD_STRING 04_1_Kaia_L
15307: PPUSH
15308: CALL_OW 38
// if Givi then
15312: LD_EXP 26
15316: IFFALSE 15330
// SaveCharacters ( Givi , 04_1_Givi ) ;
15318: LD_EXP 26
15322: PPUSH
15323: LD_STRING 04_1_Givi
15325: PPUSH
15326: CALL_OW 38
// if Mike then
15330: LD_EXP 27
15334: IFFALSE 15348
// SaveCharacters ( Mike , 04_1_Mike ) ;
15336: LD_EXP 27
15340: PPUSH
15341: LD_STRING 04_1_Mike
15343: PPUSH
15344: CALL_OW 38
// if Markov then
15348: LD_EXP 32
15352: IFFALSE 15366
// SaveCharacters ( Markov , 04_1_Markov ) ;
15354: LD_EXP 32
15358: PPUSH
15359: LD_STRING 04_1_Markov
15361: PPUSH
15362: CALL_OW 38
// if Kurt then
15366: LD_EXP 34
15370: IFFALSE 15384
// SaveCharacters ( Kurt , 04_1_Kurt ) ;
15372: LD_EXP 34
15376: PPUSH
15377: LD_STRING 04_1_Kurt
15379: PPUSH
15380: CALL_OW 38
// if heikeSecondSquad diff aviradzeSquad then
15384: LD_EXP 37
15388: PUSH
15389: LD_EXP 39
15393: DIFF
15394: IFFALSE 15414
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
15396: LD_EXP 37
15400: PUSH
15401: LD_EXP 39
15405: DIFF
15406: PPUSH
15407: LD_STRING 04_1_others
15409: PPUSH
15410: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
15414: LD_EXP 39
15418: PUSH
15419: LD_EXP 37
15423: AND
15424: IFFALSE 15509
// begin tmp := [ ] ;
15426: LD_ADDR_VAR 0 2
15430: PUSH
15431: EMPTY
15432: ST_TO_ADDR
// for i in heikeSecondSquad do
15433: LD_ADDR_VAR 0 1
15437: PUSH
15438: LD_EXP 37
15442: PUSH
15443: FOR_IN
15444: IFFALSE 15489
// if i in aviradzeSquad then
15446: LD_VAR 0 1
15450: PUSH
15451: LD_EXP 39
15455: IN
15456: IFFALSE 15487
// tmp := Replace ( tmp , tmp + 1 , i ) ;
15458: LD_ADDR_VAR 0 2
15462: PUSH
15463: LD_VAR 0 2
15467: PPUSH
15468: LD_VAR 0 2
15472: PUSH
15473: LD_INT 1
15475: PLUS
15476: PPUSH
15477: LD_VAR 0 1
15481: PPUSH
15482: CALL_OW 1
15486: ST_TO_ADDR
15487: GO 15443
15489: POP
15490: POP
// if tmp then
15491: LD_VAR 0 2
15495: IFFALSE 15509
// SaveCharacters ( tmp , 04_1_others_L ) ;
15497: LD_VAR 0 2
15501: PPUSH
15502: LD_STRING 04_1_others_L
15504: PPUSH
15505: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
15509: LD_ADDR_VAR 0 2
15513: PUSH
15514: LD_INT 22
15516: PUSH
15517: LD_INT 2
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: PUSH
15524: LD_INT 23
15526: PUSH
15527: LD_INT 0
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: PPUSH
15538: CALL_OW 69
15542: ST_TO_ADDR
// if tmp then
15543: LD_VAR 0 2
15547: IFFALSE 15561
// SaveCharacters ( tmp , 04_1_apes ) ;
15549: LD_VAR 0 2
15553: PPUSH
15554: LD_STRING 04_1_apes
15556: PPUSH
15557: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
15561: LD_ADDR_VAR 0 2
15565: PUSH
15566: LD_INT 17
15568: PPUSH
15569: LD_INT 21
15571: PUSH
15572: LD_INT 2
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PPUSH
15579: CALL_OW 70
15583: ST_TO_ADDR
// if tmp then
15584: LD_VAR 0 2
15588: IFFALSE 15882
// begin tmp2 := [ ] ;
15590: LD_ADDR_VAR 0 3
15594: PUSH
15595: EMPTY
15596: ST_TO_ADDR
// for i in tmp do
15597: LD_ADDR_VAR 0 1
15601: PUSH
15602: LD_VAR 0 2
15606: PUSH
15607: FOR_IN
15608: IFFALSE 15868
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
15610: LD_VAR 0 1
15614: PPUSH
15615: CALL_OW 264
15619: PUSH
15620: LD_INT 32
15622: PUSH
15623: LD_INT 12
15625: PUSH
15626: LD_INT 51
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: LIST
15633: IN
15634: IFFALSE 15771
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
15636: LD_ADDR_VAR 0 4
15640: PUSH
15641: LD_VAR 0 1
15645: PPUSH
15646: LD_INT 1
15648: PPUSH
15649: CALL_OW 289
15653: PUSH
15654: LD_VAR 0 1
15658: PPUSH
15659: LD_INT 2
15661: PPUSH
15662: CALL_OW 289
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
15671: LD_ADDR_VAR 0 3
15675: PUSH
15676: LD_VAR 0 3
15680: PPUSH
15681: LD_VAR 0 3
15685: PUSH
15686: LD_INT 1
15688: PLUS
15689: PPUSH
15690: LD_VAR 0 1
15694: PPUSH
15695: CALL_OW 265
15699: PUSH
15700: LD_VAR 0 1
15704: PPUSH
15705: CALL_OW 262
15709: PUSH
15710: LD_VAR 0 1
15714: PPUSH
15715: CALL_OW 263
15719: PUSH
15720: LD_VAR 0 1
15724: PPUSH
15725: CALL_OW 264
15729: PUSH
15730: LD_VAR 0 1
15734: PPUSH
15735: CALL_OW 248
15739: PUSH
15740: LD_VAR 0 1
15744: PPUSH
15745: CALL_OW 256
15749: PUSH
15750: LD_VAR 0 4
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: PPUSH
15764: CALL_OW 1
15768: ST_TO_ADDR
// end else
15769: GO 15866
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
15771: LD_ADDR_VAR 0 3
15775: PUSH
15776: LD_VAR 0 3
15780: PPUSH
15781: LD_VAR 0 3
15785: PUSH
15786: LD_INT 1
15788: PLUS
15789: PPUSH
15790: LD_VAR 0 1
15794: PPUSH
15795: CALL_OW 265
15799: PUSH
15800: LD_VAR 0 1
15804: PPUSH
15805: CALL_OW 262
15809: PUSH
15810: LD_VAR 0 1
15814: PPUSH
15815: CALL_OW 263
15819: PUSH
15820: LD_VAR 0 1
15824: PPUSH
15825: CALL_OW 264
15829: PUSH
15830: LD_VAR 0 1
15834: PPUSH
15835: CALL_OW 248
15839: PUSH
15840: LD_VAR 0 1
15844: PPUSH
15845: CALL_OW 256
15849: PUSH
15850: EMPTY
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: PPUSH
15861: CALL_OW 1
15865: ST_TO_ADDR
15866: GO 15607
15868: POP
15869: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
15870: LD_VAR 0 3
15874: PPUSH
15875: LD_STRING 04_1_Vehicles
15877: PPUSH
15878: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
15882: LD_EXP 21
15886: PPUSH
15887: LD_STRING 04_1_RuLabCaptured
15889: PPUSH
15890: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
15894: LD_EXP 19
15898: PPUSH
15899: LD_STRING 04_1_EscapeCounter
15901: PPUSH
15902: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
15906: LD_EXP 15
15910: PPUSH
15911: LD_STRING 04_1_BaseHill
15913: PPUSH
15914: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
15918: LD_OWVAR 1
15922: PPUSH
15923: LD_STRING 04_1_Time
15925: PPUSH
15926: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
15930: LD_EXP 14
15934: PPUSH
15935: LD_STRING 04_1_DeadCounter
15937: PPUSH
15938: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
15942: LD_EXP 24
15946: PUSH
15947: LD_INT 112
15949: PPUSH
15950: CALL_OW 255
15954: MUL
15955: PUSH
15956: LD_INT 2
15958: EQUAL
15959: PPUSH
15960: LD_STRING 04_1_KaganCaptured
15962: PPUSH
15963: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
15967: LD_INT 22
15969: PUSH
15970: LD_INT 2
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: LD_INT 34
15979: PUSH
15980: LD_INT 26
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PPUSH
15991: CALL_OW 69
15995: PUSH
15996: LD_INT 0
15998: PLUS
15999: PPUSH
16000: LD_STRING 04_1_Flamethrower
16002: PPUSH
16003: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16007: LD_INT 1
16009: PPUSH
16010: LD_STRING __x1\04_cont2
16012: PPUSH
16013: CALL_OW 340
// end ; end_of_file
16017: PPOPN 4
16019: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16020: LD_VAR 0 1
16024: PPUSH
16025: CALL_OW 266
16029: PUSH
16030: LD_INT 0
16032: EQUAL
16033: PUSH
16034: LD_VAR 0 1
16038: PPUSH
16039: CALL_OW 255
16043: PUSH
16044: LD_INT 2
16046: EQUAL
16047: AND
16048: IFFALSE 16058
// baseConstructed := true ;
16050: LD_ADDR_EXP 3
16054: PUSH
16055: LD_INT 1
16057: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16058: LD_VAR 0 1
16062: PPUSH
16063: CALL_OW 266
16067: PUSH
16068: LD_INT 6
16070: EQUAL
16071: PUSH
16072: LD_VAR 0 1
16076: PPUSH
16077: CALL_OW 255
16081: PUSH
16082: LD_INT 2
16084: EQUAL
16085: AND
16086: IFFALSE 16096
// labConstructed := true ;
16088: LD_ADDR_EXP 4
16092: PUSH
16093: LD_INT 1
16095: ST_TO_ADDR
// end ;
16096: PPOPN 1
16098: END
// on UnitDestroyed ( un ) do begin if un = Heike then
16099: LD_VAR 0 1
16103: PUSH
16104: LD_EXP 25
16108: EQUAL
16109: IFFALSE 16118
// YouLost ( Heike ) ;
16111: LD_STRING Heike
16113: PPUSH
16114: CALL_OW 104
// if un = Omar then
16118: LD_VAR 0 1
16122: PUSH
16123: LD_EXP 33
16127: EQUAL
16128: IFFALSE 16137
// YouLost ( Omar ) ;
16130: LD_STRING Omar
16132: PPUSH
16133: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
16137: LD_VAR 0 1
16141: PUSH
16142: LD_INT 22
16144: PUSH
16145: LD_INT 2
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 23
16154: PUSH
16155: LD_INT 2
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: PUSH
16162: LD_INT 21
16164: PUSH
16165: LD_INT 1
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: PUSH
16172: EMPTY
16173: LIST
16174: LIST
16175: LIST
16176: PPUSH
16177: CALL_OW 69
16181: IN
16182: IFFALSE 16198
// loseCounter := loseCounter + 1 ;
16184: LD_ADDR_EXP 14
16188: PUSH
16189: LD_EXP 14
16193: PUSH
16194: LD_INT 1
16196: PLUS
16197: ST_TO_ADDR
// if un = omikron then
16198: LD_VAR 0 1
16202: PUSH
16203: LD_INT 64
16205: EQUAL
16206: IFFALSE 16216
// omicronFall := true ;
16208: LD_ADDR_EXP 13
16212: PUSH
16213: LD_INT 1
16215: ST_TO_ADDR
// if un = kirov then
16216: LD_VAR 0 1
16220: PUSH
16221: LD_INT 71
16223: EQUAL
16224: IFFALSE 16241
// begin ChangeMissionObjectives ( KirovDone ) ;
16226: LD_STRING KirovDone
16228: PPUSH
16229: CALL_OW 337
// kirovDestroyed := true ;
16233: LD_ADDR_EXP 16
16237: PUSH
16238: LD_INT 1
16240: ST_TO_ADDR
// end ; if un = beria then
16241: LD_VAR 0 1
16245: PUSH
16246: LD_INT 106
16248: EQUAL
16249: IFFALSE 16266
// begin ChangeMissionObjectives ( BeriaDone ) ;
16251: LD_STRING BeriaDone
16253: PPUSH
16254: CALL_OW 337
// beriaDestroyed := true ;
16258: LD_ADDR_EXP 17
16262: PUSH
16263: LD_INT 1
16265: ST_TO_ADDR
// end ; if un = kagan then
16266: LD_VAR 0 1
16270: PUSH
16271: LD_INT 112
16273: EQUAL
16274: IFFALSE 16284
// kaganDestroyed := true ;
16276: LD_ADDR_EXP 18
16280: PUSH
16281: LD_INT 1
16283: ST_TO_ADDR
// if un in russianPatrol then
16284: LD_VAR 0 1
16288: PUSH
16289: LD_EXP 47
16293: IN
16294: IFFALSE 16312
// russianPatrol := russianPatrol diff un ;
16296: LD_ADDR_EXP 47
16300: PUSH
16301: LD_EXP 47
16305: PUSH
16306: LD_VAR 0 1
16310: DIFF
16311: ST_TO_ADDR
// if un in russianOmicronAttackers then
16312: LD_VAR 0 1
16316: PUSH
16317: LD_EXP 48
16321: IN
16322: IFFALSE 16340
// russianOmicronAttackers := russianOmicronAttackers diff un ;
16324: LD_ADDR_EXP 48
16328: PUSH
16329: LD_EXP 48
16333: PUSH
16334: LD_VAR 0 1
16338: DIFF
16339: ST_TO_ADDR
// end ;
16340: PPOPN 1
16342: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
16343: LD_INT 0
16345: PPUSH
16346: PPUSH
16347: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
16348: LD_VAR 0 1
16352: PUSH
16353: LD_INT 2
16355: PUSH
16356: LD_INT 22
16358: PUSH
16359: LD_INT 3
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: PUSH
16366: LD_INT 22
16368: PUSH
16369: LD_INT 4
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PUSH
16376: LD_INT 22
16378: PUSH
16379: LD_INT 6
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: PUSH
16392: LD_INT 30
16394: PUSH
16395: LD_INT 32
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: PUSH
16402: EMPTY
16403: LIST
16404: LIST
16405: PPUSH
16406: CALL_OW 69
16410: IN
16411: IFFALSE 16584
// begin sol := UnitsInside ( un ) ;
16413: LD_ADDR_VAR 0 3
16417: PUSH
16418: LD_VAR 0 1
16422: PPUSH
16423: CALL_OW 313
16427: ST_TO_ADDR
// if not sol then
16428: LD_VAR 0 3
16432: NOT
16433: IFFALSE 16437
// exit ;
16435: GO 16584
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16437: LD_ADDR_VAR 0 4
16441: PUSH
16442: LD_INT 22
16444: PUSH
16445: LD_VAR 0 1
16449: PPUSH
16450: CALL_OW 255
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PUSH
16459: LD_INT 2
16461: PUSH
16462: LD_INT 30
16464: PUSH
16465: LD_INT 4
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: PUSH
16472: LD_INT 30
16474: PUSH
16475: LD_INT 5
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: LIST
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PPUSH
16491: CALL_OW 69
16495: ST_TO_ADDR
// if not nearestBarracks then
16496: LD_VAR 0 4
16500: NOT
16501: IFFALSE 16505
// exit ;
16503: GO 16584
// for i in nearestBarracks do
16505: LD_ADDR_VAR 0 2
16509: PUSH
16510: LD_VAR 0 4
16514: PUSH
16515: FOR_IN
16516: IFFALSE 16551
// if UnitsInside ( i ) = 6 then
16518: LD_VAR 0 2
16522: PPUSH
16523: CALL_OW 313
16527: PUSH
16528: LD_INT 6
16530: EQUAL
16531: IFFALSE 16549
// nearestBarracks := nearestBarracks diff i ;
16533: LD_ADDR_VAR 0 4
16537: PUSH
16538: LD_VAR 0 4
16542: PUSH
16543: LD_VAR 0 2
16547: DIFF
16548: ST_TO_ADDR
16549: GO 16515
16551: POP
16552: POP
// if not nearestBarracks then
16553: LD_VAR 0 4
16557: NOT
16558: IFFALSE 16562
// exit ;
16560: GO 16584
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
16562: LD_VAR 0 3
16566: PUSH
16567: LD_INT 1
16569: ARRAY
16570: PPUSH
16571: LD_VAR 0 4
16575: PUSH
16576: LD_INT 1
16578: ARRAY
16579: PPUSH
16580: CALL_OW 120
// end ; end ;
16584: PPOPN 4
16586: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
16587: LD_INT 0
16589: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
16590: LD_EXP 8
16594: NOT
16595: PUSH
16596: LD_EXP 5
16600: NOT
16601: OR
16602: IFFALSE 16606
// exit ;
16604: GO 16674
// for i in camAreas do
16606: LD_ADDR_VAR 0 5
16610: PUSH
16611: LD_EXP 8
16615: PUSH
16616: FOR_IN
16617: IFFALSE 16672
// if InArea ( x , y , i ) then
16619: LD_VAR 0 3
16623: PPUSH
16624: LD_VAR 0 4
16628: PPUSH
16629: LD_VAR 0 5
16633: PPUSH
16634: CALL_OW 309
16638: IFFALSE 16670
// begin SetAreaMapShow ( i , 0 ) ;
16640: LD_VAR 0 5
16644: PPUSH
16645: LD_INT 0
16647: PPUSH
16648: CALL_OW 424
// camAreas := camAreas diff i ;
16652: LD_ADDR_EXP 8
16656: PUSH
16657: LD_EXP 8
16661: PUSH
16662: LD_VAR 0 5
16666: DIFF
16667: ST_TO_ADDR
// break ;
16668: GO 16672
// end ;
16670: GO 16616
16672: POP
16673: POP
// end ;
16674: PPOPN 5
16676: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
16677: LD_VAR 0 1
16681: PUSH
16682: LD_INT 2
16684: EQUAL
16685: PUSH
16686: LD_VAR 0 2
16690: PUSH
16691: LD_INT 5
16693: PUSH
16694: LD_INT 8
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: IN
16701: AND
16702: IFFALSE 16711
// YouLost ( Ally ) ;
16704: LD_STRING Ally
16706: PPUSH
16707: CALL_OW 104
// end ;
16711: PPOPN 2
16713: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
16714: LD_VAR 0 1
16718: PUSH
16719: LD_EXP 30
16723: EQUAL
16724: PUSH
16725: LD_VAR 0 2
16729: PUSH
16730: LD_INT 3
16732: PUSH
16733: LD_INT 6
16735: PUSH
16736: EMPTY
16737: LIST
16738: LIST
16739: IN
16740: AND
16741: IFFALSE 16772
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
16743: LD_ADDR_EXP 23
16747: PUSH
16748: LD_VAR 0 1
16752: PPUSH
16753: CALL_OW 250
16757: PUSH
16758: LD_VAR 0 1
16762: PPUSH
16763: CALL_OW 251
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: ST_TO_ADDR
// end ; end_of_file
16772: PPOPN 3
16774: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 ] [ Difficulty ] do
16775: LD_EXP 11
16779: NOT
16780: PUSH
16781: LD_INT 12
16783: PPUSH
16784: LD_INT 1
16786: PPUSH
16787: CALL_OW 287
16791: PUSH
16792: LD_INT 20
16794: PUSH
16795: LD_INT 16
16797: PUSH
16798: LD_INT 12
16800: PUSH
16801: EMPTY
16802: LIST
16803: LIST
16804: LIST
16805: PUSH
16806: LD_OWVAR 67
16810: ARRAY
16811: LESS
16812: AND
16813: IFFALSE 16840
16815: GO 16817
16817: DISABLE
// begin enable ;
16818: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
16819: LD_INT 1
16821: PPUSH
16822: LD_INT 5
16824: PPUSH
16825: CALL_OW 12
16829: PPUSH
16830: LD_INT 12
16832: PPUSH
16833: LD_INT 1
16835: PPUSH
16836: CALL_OW 55
// end ; end_of_file
16840: END
// every 0 0$1 trigger omarCountdown do
16841: LD_EXP 22
16845: IFFALSE 16897
16847: GO 16849
16849: DISABLE
// begin enable ;
16850: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
16851: LD_ADDR_OWVAR 47
16855: PUSH
16856: LD_STRING #X104-1
16858: PUSH
16859: LD_EXP 22
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
16868: LD_ADDR_EXP 22
16872: PUSH
16873: LD_EXP 22
16877: PUSH
16878: LD_INT 35
16880: MINUS
16881: ST_TO_ADDR
// if not omarCountdown then
16882: LD_EXP 22
16886: NOT
16887: IFFALSE 16897
// display_strings :=  ;
16889: LD_ADDR_OWVAR 47
16893: PUSH
16894: LD_STRING 
16896: ST_TO_ADDR
// end ; end_of_file
16897: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16898: LD_INT 0
16900: PPUSH
// if p2 = 100 then
16901: LD_VAR 0 2
16905: PUSH
16906: LD_INT 100
16908: EQUAL
16909: IFFALSE 17858
// begin if not StreamModeActive then
16911: LD_EXP 52
16915: NOT
16916: IFFALSE 16926
// StreamModeActive := true ;
16918: LD_ADDR_EXP 52
16922: PUSH
16923: LD_INT 1
16925: ST_TO_ADDR
// if p3 = 0 then
16926: LD_VAR 0 3
16930: PUSH
16931: LD_INT 0
16933: EQUAL
16934: IFFALSE 16940
// InitStreamMode ;
16936: CALL 18018 0 0
// if p3 = 1 then
16940: LD_VAR 0 3
16944: PUSH
16945: LD_INT 1
16947: EQUAL
16948: IFFALSE 16958
// sRocket := true ;
16950: LD_ADDR_EXP 57
16954: PUSH
16955: LD_INT 1
16957: ST_TO_ADDR
// if p3 = 2 then
16958: LD_VAR 0 3
16962: PUSH
16963: LD_INT 2
16965: EQUAL
16966: IFFALSE 16976
// sSpeed := true ;
16968: LD_ADDR_EXP 56
16972: PUSH
16973: LD_INT 1
16975: ST_TO_ADDR
// if p3 = 3 then
16976: LD_VAR 0 3
16980: PUSH
16981: LD_INT 3
16983: EQUAL
16984: IFFALSE 16994
// sEngine := true ;
16986: LD_ADDR_EXP 58
16990: PUSH
16991: LD_INT 1
16993: ST_TO_ADDR
// if p3 = 4 then
16994: LD_VAR 0 3
16998: PUSH
16999: LD_INT 4
17001: EQUAL
17002: IFFALSE 17012
// sSpec := true ;
17004: LD_ADDR_EXP 55
17008: PUSH
17009: LD_INT 1
17011: ST_TO_ADDR
// if p3 = 5 then
17012: LD_VAR 0 3
17016: PUSH
17017: LD_INT 5
17019: EQUAL
17020: IFFALSE 17030
// sLevel := true ;
17022: LD_ADDR_EXP 59
17026: PUSH
17027: LD_INT 1
17029: ST_TO_ADDR
// if p3 = 6 then
17030: LD_VAR 0 3
17034: PUSH
17035: LD_INT 6
17037: EQUAL
17038: IFFALSE 17048
// sArmoury := true ;
17040: LD_ADDR_EXP 60
17044: PUSH
17045: LD_INT 1
17047: ST_TO_ADDR
// if p3 = 7 then
17048: LD_VAR 0 3
17052: PUSH
17053: LD_INT 7
17055: EQUAL
17056: IFFALSE 17066
// sRadar := true ;
17058: LD_ADDR_EXP 61
17062: PUSH
17063: LD_INT 1
17065: ST_TO_ADDR
// if p3 = 8 then
17066: LD_VAR 0 3
17070: PUSH
17071: LD_INT 8
17073: EQUAL
17074: IFFALSE 17084
// sBunker := true ;
17076: LD_ADDR_EXP 62
17080: PUSH
17081: LD_INT 1
17083: ST_TO_ADDR
// if p3 = 9 then
17084: LD_VAR 0 3
17088: PUSH
17089: LD_INT 9
17091: EQUAL
17092: IFFALSE 17102
// sHack := true ;
17094: LD_ADDR_EXP 63
17098: PUSH
17099: LD_INT 1
17101: ST_TO_ADDR
// if p3 = 10 then
17102: LD_VAR 0 3
17106: PUSH
17107: LD_INT 10
17109: EQUAL
17110: IFFALSE 17120
// sFire := true ;
17112: LD_ADDR_EXP 64
17116: PUSH
17117: LD_INT 1
17119: ST_TO_ADDR
// if p3 = 11 then
17120: LD_VAR 0 3
17124: PUSH
17125: LD_INT 11
17127: EQUAL
17128: IFFALSE 17138
// sRefresh := true ;
17130: LD_ADDR_EXP 65
17134: PUSH
17135: LD_INT 1
17137: ST_TO_ADDR
// if p3 = 12 then
17138: LD_VAR 0 3
17142: PUSH
17143: LD_INT 12
17145: EQUAL
17146: IFFALSE 17156
// sExp := true ;
17148: LD_ADDR_EXP 66
17152: PUSH
17153: LD_INT 1
17155: ST_TO_ADDR
// if p3 = 13 then
17156: LD_VAR 0 3
17160: PUSH
17161: LD_INT 13
17163: EQUAL
17164: IFFALSE 17174
// sDepot := true ;
17166: LD_ADDR_EXP 67
17170: PUSH
17171: LD_INT 1
17173: ST_TO_ADDR
// if p3 = 14 then
17174: LD_VAR 0 3
17178: PUSH
17179: LD_INT 14
17181: EQUAL
17182: IFFALSE 17192
// sFlag := true ;
17184: LD_ADDR_EXP 68
17188: PUSH
17189: LD_INT 1
17191: ST_TO_ADDR
// if p3 = 15 then
17192: LD_VAR 0 3
17196: PUSH
17197: LD_INT 15
17199: EQUAL
17200: IFFALSE 17210
// sKamikadze := true ;
17202: LD_ADDR_EXP 76
17206: PUSH
17207: LD_INT 1
17209: ST_TO_ADDR
// if p3 = 16 then
17210: LD_VAR 0 3
17214: PUSH
17215: LD_INT 16
17217: EQUAL
17218: IFFALSE 17228
// sTroll := true ;
17220: LD_ADDR_EXP 77
17224: PUSH
17225: LD_INT 1
17227: ST_TO_ADDR
// if p3 = 17 then
17228: LD_VAR 0 3
17232: PUSH
17233: LD_INT 17
17235: EQUAL
17236: IFFALSE 17246
// sSlow := true ;
17238: LD_ADDR_EXP 78
17242: PUSH
17243: LD_INT 1
17245: ST_TO_ADDR
// if p3 = 18 then
17246: LD_VAR 0 3
17250: PUSH
17251: LD_INT 18
17253: EQUAL
17254: IFFALSE 17264
// sLack := true ;
17256: LD_ADDR_EXP 79
17260: PUSH
17261: LD_INT 1
17263: ST_TO_ADDR
// if p3 = 19 then
17264: LD_VAR 0 3
17268: PUSH
17269: LD_INT 19
17271: EQUAL
17272: IFFALSE 17282
// sTank := true ;
17274: LD_ADDR_EXP 81
17278: PUSH
17279: LD_INT 1
17281: ST_TO_ADDR
// if p3 = 20 then
17282: LD_VAR 0 3
17286: PUSH
17287: LD_INT 20
17289: EQUAL
17290: IFFALSE 17300
// sRemote := true ;
17292: LD_ADDR_EXP 82
17296: PUSH
17297: LD_INT 1
17299: ST_TO_ADDR
// if p3 = 21 then
17300: LD_VAR 0 3
17304: PUSH
17305: LD_INT 21
17307: EQUAL
17308: IFFALSE 17318
// sPowell := true ;
17310: LD_ADDR_EXP 83
17314: PUSH
17315: LD_INT 1
17317: ST_TO_ADDR
// if p3 = 22 then
17318: LD_VAR 0 3
17322: PUSH
17323: LD_INT 22
17325: EQUAL
17326: IFFALSE 17336
// sTeleport := true ;
17328: LD_ADDR_EXP 86
17332: PUSH
17333: LD_INT 1
17335: ST_TO_ADDR
// if p3 = 23 then
17336: LD_VAR 0 3
17340: PUSH
17341: LD_INT 23
17343: EQUAL
17344: IFFALSE 17354
// sOilTower := true ;
17346: LD_ADDR_EXP 88
17350: PUSH
17351: LD_INT 1
17353: ST_TO_ADDR
// if p3 = 24 then
17354: LD_VAR 0 3
17358: PUSH
17359: LD_INT 24
17361: EQUAL
17362: IFFALSE 17372
// sShovel := true ;
17364: LD_ADDR_EXP 89
17368: PUSH
17369: LD_INT 1
17371: ST_TO_ADDR
// if p3 = 25 then
17372: LD_VAR 0 3
17376: PUSH
17377: LD_INT 25
17379: EQUAL
17380: IFFALSE 17390
// sSheik := true ;
17382: LD_ADDR_EXP 90
17386: PUSH
17387: LD_INT 1
17389: ST_TO_ADDR
// if p3 = 26 then
17390: LD_VAR 0 3
17394: PUSH
17395: LD_INT 26
17397: EQUAL
17398: IFFALSE 17408
// sEarthquake := true ;
17400: LD_ADDR_EXP 92
17404: PUSH
17405: LD_INT 1
17407: ST_TO_ADDR
// if p3 = 27 then
17408: LD_VAR 0 3
17412: PUSH
17413: LD_INT 27
17415: EQUAL
17416: IFFALSE 17426
// sAI := true ;
17418: LD_ADDR_EXP 93
17422: PUSH
17423: LD_INT 1
17425: ST_TO_ADDR
// if p3 = 28 then
17426: LD_VAR 0 3
17430: PUSH
17431: LD_INT 28
17433: EQUAL
17434: IFFALSE 17444
// sCargo := true ;
17436: LD_ADDR_EXP 96
17440: PUSH
17441: LD_INT 1
17443: ST_TO_ADDR
// if p3 = 29 then
17444: LD_VAR 0 3
17448: PUSH
17449: LD_INT 29
17451: EQUAL
17452: IFFALSE 17462
// sDLaser := true ;
17454: LD_ADDR_EXP 97
17458: PUSH
17459: LD_INT 1
17461: ST_TO_ADDR
// if p3 = 30 then
17462: LD_VAR 0 3
17466: PUSH
17467: LD_INT 30
17469: EQUAL
17470: IFFALSE 17480
// sExchange := true ;
17472: LD_ADDR_EXP 98
17476: PUSH
17477: LD_INT 1
17479: ST_TO_ADDR
// if p3 = 31 then
17480: LD_VAR 0 3
17484: PUSH
17485: LD_INT 31
17487: EQUAL
17488: IFFALSE 17498
// sFac := true ;
17490: LD_ADDR_EXP 99
17494: PUSH
17495: LD_INT 1
17497: ST_TO_ADDR
// if p3 = 32 then
17498: LD_VAR 0 3
17502: PUSH
17503: LD_INT 32
17505: EQUAL
17506: IFFALSE 17516
// sPower := true ;
17508: LD_ADDR_EXP 100
17512: PUSH
17513: LD_INT 1
17515: ST_TO_ADDR
// if p3 = 33 then
17516: LD_VAR 0 3
17520: PUSH
17521: LD_INT 33
17523: EQUAL
17524: IFFALSE 17534
// sRandom := true ;
17526: LD_ADDR_EXP 101
17530: PUSH
17531: LD_INT 1
17533: ST_TO_ADDR
// if p3 = 34 then
17534: LD_VAR 0 3
17538: PUSH
17539: LD_INT 34
17541: EQUAL
17542: IFFALSE 17552
// sShield := true ;
17544: LD_ADDR_EXP 102
17548: PUSH
17549: LD_INT 1
17551: ST_TO_ADDR
// if p3 = 35 then
17552: LD_VAR 0 3
17556: PUSH
17557: LD_INT 35
17559: EQUAL
17560: IFFALSE 17570
// sTime := true ;
17562: LD_ADDR_EXP 103
17566: PUSH
17567: LD_INT 1
17569: ST_TO_ADDR
// if p3 = 36 then
17570: LD_VAR 0 3
17574: PUSH
17575: LD_INT 36
17577: EQUAL
17578: IFFALSE 17588
// sTools := true ;
17580: LD_ADDR_EXP 104
17584: PUSH
17585: LD_INT 1
17587: ST_TO_ADDR
// if p3 = 101 then
17588: LD_VAR 0 3
17592: PUSH
17593: LD_INT 101
17595: EQUAL
17596: IFFALSE 17606
// sSold := true ;
17598: LD_ADDR_EXP 69
17602: PUSH
17603: LD_INT 1
17605: ST_TO_ADDR
// if p3 = 102 then
17606: LD_VAR 0 3
17610: PUSH
17611: LD_INT 102
17613: EQUAL
17614: IFFALSE 17624
// sDiff := true ;
17616: LD_ADDR_EXP 70
17620: PUSH
17621: LD_INT 1
17623: ST_TO_ADDR
// if p3 = 103 then
17624: LD_VAR 0 3
17628: PUSH
17629: LD_INT 103
17631: EQUAL
17632: IFFALSE 17642
// sFog := true ;
17634: LD_ADDR_EXP 73
17638: PUSH
17639: LD_INT 1
17641: ST_TO_ADDR
// if p3 = 104 then
17642: LD_VAR 0 3
17646: PUSH
17647: LD_INT 104
17649: EQUAL
17650: IFFALSE 17660
// sReset := true ;
17652: LD_ADDR_EXP 74
17656: PUSH
17657: LD_INT 1
17659: ST_TO_ADDR
// if p3 = 105 then
17660: LD_VAR 0 3
17664: PUSH
17665: LD_INT 105
17667: EQUAL
17668: IFFALSE 17678
// sSun := true ;
17670: LD_ADDR_EXP 75
17674: PUSH
17675: LD_INT 1
17677: ST_TO_ADDR
// if p3 = 106 then
17678: LD_VAR 0 3
17682: PUSH
17683: LD_INT 106
17685: EQUAL
17686: IFFALSE 17696
// sTiger := true ;
17688: LD_ADDR_EXP 71
17692: PUSH
17693: LD_INT 1
17695: ST_TO_ADDR
// if p3 = 107 then
17696: LD_VAR 0 3
17700: PUSH
17701: LD_INT 107
17703: EQUAL
17704: IFFALSE 17714
// sBomb := true ;
17706: LD_ADDR_EXP 72
17710: PUSH
17711: LD_INT 1
17713: ST_TO_ADDR
// if p3 = 108 then
17714: LD_VAR 0 3
17718: PUSH
17719: LD_INT 108
17721: EQUAL
17722: IFFALSE 17732
// sWound := true ;
17724: LD_ADDR_EXP 80
17728: PUSH
17729: LD_INT 1
17731: ST_TO_ADDR
// if p3 = 109 then
17732: LD_VAR 0 3
17736: PUSH
17737: LD_INT 109
17739: EQUAL
17740: IFFALSE 17750
// sBetray := true ;
17742: LD_ADDR_EXP 84
17746: PUSH
17747: LD_INT 1
17749: ST_TO_ADDR
// if p3 = 110 then
17750: LD_VAR 0 3
17754: PUSH
17755: LD_INT 110
17757: EQUAL
17758: IFFALSE 17768
// sContamin := true ;
17760: LD_ADDR_EXP 85
17764: PUSH
17765: LD_INT 1
17767: ST_TO_ADDR
// if p3 = 111 then
17768: LD_VAR 0 3
17772: PUSH
17773: LD_INT 111
17775: EQUAL
17776: IFFALSE 17786
// sOil := true ;
17778: LD_ADDR_EXP 87
17782: PUSH
17783: LD_INT 1
17785: ST_TO_ADDR
// if p3 = 112 then
17786: LD_VAR 0 3
17790: PUSH
17791: LD_INT 112
17793: EQUAL
17794: IFFALSE 17804
// sStu := true ;
17796: LD_ADDR_EXP 91
17800: PUSH
17801: LD_INT 1
17803: ST_TO_ADDR
// if p3 = 113 then
17804: LD_VAR 0 3
17808: PUSH
17809: LD_INT 113
17811: EQUAL
17812: IFFALSE 17822
// sBazooka := true ;
17814: LD_ADDR_EXP 94
17818: PUSH
17819: LD_INT 1
17821: ST_TO_ADDR
// if p3 = 114 then
17822: LD_VAR 0 3
17826: PUSH
17827: LD_INT 114
17829: EQUAL
17830: IFFALSE 17840
// sMortar := true ;
17832: LD_ADDR_EXP 95
17836: PUSH
17837: LD_INT 1
17839: ST_TO_ADDR
// if p3 = 115 then
17840: LD_VAR 0 3
17844: PUSH
17845: LD_INT 115
17847: EQUAL
17848: IFFALSE 17858
// sRanger := true ;
17850: LD_ADDR_EXP 105
17854: PUSH
17855: LD_INT 1
17857: ST_TO_ADDR
// end ; if p2 = 101 then
17858: LD_VAR 0 2
17862: PUSH
17863: LD_INT 101
17865: EQUAL
17866: IFFALSE 17994
// begin case p3 of 1 :
17868: LD_VAR 0 3
17872: PUSH
17873: LD_INT 1
17875: DOUBLE
17876: EQUAL
17877: IFTRUE 17881
17879: GO 17888
17881: POP
// hHackUnlimitedResources ; 2 :
17882: CALL 29031 0 0
17886: GO 17994
17888: LD_INT 2
17890: DOUBLE
17891: EQUAL
17892: IFTRUE 17896
17894: GO 17903
17896: POP
// hHackSetLevel10 ; 3 :
17897: CALL 29164 0 0
17901: GO 17994
17903: LD_INT 3
17905: DOUBLE
17906: EQUAL
17907: IFTRUE 17911
17909: GO 17918
17911: POP
// hHackSetLevel10YourUnits ; 4 :
17912: CALL 29249 0 0
17916: GO 17994
17918: LD_INT 4
17920: DOUBLE
17921: EQUAL
17922: IFTRUE 17926
17924: GO 17933
17926: POP
// hHackInvincible ; 5 :
17927: CALL 29697 0 0
17931: GO 17994
17933: LD_INT 5
17935: DOUBLE
17936: EQUAL
17937: IFTRUE 17941
17939: GO 17948
17941: POP
// hHackInvisible ; 6 :
17942: CALL 29808 0 0
17946: GO 17994
17948: LD_INT 6
17950: DOUBLE
17951: EQUAL
17952: IFTRUE 17956
17954: GO 17963
17956: POP
// hHackChangeYourSide ; 7 :
17957: CALL 29865 0 0
17961: GO 17994
17963: LD_INT 7
17965: DOUBLE
17966: EQUAL
17967: IFTRUE 17971
17969: GO 17978
17971: POP
// hHackChangeUnitSide ; 8 :
17972: CALL 29907 0 0
17976: GO 17994
17978: LD_INT 8
17980: DOUBLE
17981: EQUAL
17982: IFTRUE 17986
17984: GO 17993
17986: POP
// hHackFog ; end ;
17987: CALL 30008 0 0
17991: GO 17994
17993: POP
// end ; end ;
17994: LD_VAR 0 7
17998: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
17999: GO 18001
18001: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
18002: LD_STRING initStreamRollete();
18004: PPUSH
18005: CALL_OW 559
// InitStreamMode ;
18009: CALL 18018 0 0
// DefineStreamItems ( ) ;
18013: CALL 18458 0 0
// end ;
18017: END
// function InitStreamMode ; begin
18018: LD_INT 0
18020: PPUSH
// streamModeActive := false ;
18021: LD_ADDR_EXP 52
18025: PUSH
18026: LD_INT 0
18028: ST_TO_ADDR
// normalCounter := 36 ;
18029: LD_ADDR_EXP 53
18033: PUSH
18034: LD_INT 36
18036: ST_TO_ADDR
// hardcoreCounter := 16 ;
18037: LD_ADDR_EXP 54
18041: PUSH
18042: LD_INT 16
18044: ST_TO_ADDR
// sRocket := false ;
18045: LD_ADDR_EXP 57
18049: PUSH
18050: LD_INT 0
18052: ST_TO_ADDR
// sSpeed := false ;
18053: LD_ADDR_EXP 56
18057: PUSH
18058: LD_INT 0
18060: ST_TO_ADDR
// sEngine := false ;
18061: LD_ADDR_EXP 58
18065: PUSH
18066: LD_INT 0
18068: ST_TO_ADDR
// sSpec := false ;
18069: LD_ADDR_EXP 55
18073: PUSH
18074: LD_INT 0
18076: ST_TO_ADDR
// sLevel := false ;
18077: LD_ADDR_EXP 59
18081: PUSH
18082: LD_INT 0
18084: ST_TO_ADDR
// sArmoury := false ;
18085: LD_ADDR_EXP 60
18089: PUSH
18090: LD_INT 0
18092: ST_TO_ADDR
// sRadar := false ;
18093: LD_ADDR_EXP 61
18097: PUSH
18098: LD_INT 0
18100: ST_TO_ADDR
// sBunker := false ;
18101: LD_ADDR_EXP 62
18105: PUSH
18106: LD_INT 0
18108: ST_TO_ADDR
// sHack := false ;
18109: LD_ADDR_EXP 63
18113: PUSH
18114: LD_INT 0
18116: ST_TO_ADDR
// sFire := false ;
18117: LD_ADDR_EXP 64
18121: PUSH
18122: LD_INT 0
18124: ST_TO_ADDR
// sRefresh := false ;
18125: LD_ADDR_EXP 65
18129: PUSH
18130: LD_INT 0
18132: ST_TO_ADDR
// sExp := false ;
18133: LD_ADDR_EXP 66
18137: PUSH
18138: LD_INT 0
18140: ST_TO_ADDR
// sDepot := false ;
18141: LD_ADDR_EXP 67
18145: PUSH
18146: LD_INT 0
18148: ST_TO_ADDR
// sFlag := false ;
18149: LD_ADDR_EXP 68
18153: PUSH
18154: LD_INT 0
18156: ST_TO_ADDR
// sKamikadze := false ;
18157: LD_ADDR_EXP 76
18161: PUSH
18162: LD_INT 0
18164: ST_TO_ADDR
// sTroll := false ;
18165: LD_ADDR_EXP 77
18169: PUSH
18170: LD_INT 0
18172: ST_TO_ADDR
// sSlow := false ;
18173: LD_ADDR_EXP 78
18177: PUSH
18178: LD_INT 0
18180: ST_TO_ADDR
// sLack := false ;
18181: LD_ADDR_EXP 79
18185: PUSH
18186: LD_INT 0
18188: ST_TO_ADDR
// sTank := false ;
18189: LD_ADDR_EXP 81
18193: PUSH
18194: LD_INT 0
18196: ST_TO_ADDR
// sRemote := false ;
18197: LD_ADDR_EXP 82
18201: PUSH
18202: LD_INT 0
18204: ST_TO_ADDR
// sPowell := false ;
18205: LD_ADDR_EXP 83
18209: PUSH
18210: LD_INT 0
18212: ST_TO_ADDR
// sTeleport := false ;
18213: LD_ADDR_EXP 86
18217: PUSH
18218: LD_INT 0
18220: ST_TO_ADDR
// sOilTower := false ;
18221: LD_ADDR_EXP 88
18225: PUSH
18226: LD_INT 0
18228: ST_TO_ADDR
// sShovel := false ;
18229: LD_ADDR_EXP 89
18233: PUSH
18234: LD_INT 0
18236: ST_TO_ADDR
// sSheik := false ;
18237: LD_ADDR_EXP 90
18241: PUSH
18242: LD_INT 0
18244: ST_TO_ADDR
// sEarthquake := false ;
18245: LD_ADDR_EXP 92
18249: PUSH
18250: LD_INT 0
18252: ST_TO_ADDR
// sAI := false ;
18253: LD_ADDR_EXP 93
18257: PUSH
18258: LD_INT 0
18260: ST_TO_ADDR
// sCargo := false ;
18261: LD_ADDR_EXP 96
18265: PUSH
18266: LD_INT 0
18268: ST_TO_ADDR
// sDLaser := false ;
18269: LD_ADDR_EXP 97
18273: PUSH
18274: LD_INT 0
18276: ST_TO_ADDR
// sExchange := false ;
18277: LD_ADDR_EXP 98
18281: PUSH
18282: LD_INT 0
18284: ST_TO_ADDR
// sFac := false ;
18285: LD_ADDR_EXP 99
18289: PUSH
18290: LD_INT 0
18292: ST_TO_ADDR
// sPower := false ;
18293: LD_ADDR_EXP 100
18297: PUSH
18298: LD_INT 0
18300: ST_TO_ADDR
// sRandom := false ;
18301: LD_ADDR_EXP 101
18305: PUSH
18306: LD_INT 0
18308: ST_TO_ADDR
// sShield := false ;
18309: LD_ADDR_EXP 102
18313: PUSH
18314: LD_INT 0
18316: ST_TO_ADDR
// sTime := false ;
18317: LD_ADDR_EXP 103
18321: PUSH
18322: LD_INT 0
18324: ST_TO_ADDR
// sTools := false ;
18325: LD_ADDR_EXP 104
18329: PUSH
18330: LD_INT 0
18332: ST_TO_ADDR
// sSold := false ;
18333: LD_ADDR_EXP 69
18337: PUSH
18338: LD_INT 0
18340: ST_TO_ADDR
// sDiff := false ;
18341: LD_ADDR_EXP 70
18345: PUSH
18346: LD_INT 0
18348: ST_TO_ADDR
// sFog := false ;
18349: LD_ADDR_EXP 73
18353: PUSH
18354: LD_INT 0
18356: ST_TO_ADDR
// sReset := false ;
18357: LD_ADDR_EXP 74
18361: PUSH
18362: LD_INT 0
18364: ST_TO_ADDR
// sSun := false ;
18365: LD_ADDR_EXP 75
18369: PUSH
18370: LD_INT 0
18372: ST_TO_ADDR
// sTiger := false ;
18373: LD_ADDR_EXP 71
18377: PUSH
18378: LD_INT 0
18380: ST_TO_ADDR
// sBomb := false ;
18381: LD_ADDR_EXP 72
18385: PUSH
18386: LD_INT 0
18388: ST_TO_ADDR
// sWound := false ;
18389: LD_ADDR_EXP 80
18393: PUSH
18394: LD_INT 0
18396: ST_TO_ADDR
// sBetray := false ;
18397: LD_ADDR_EXP 84
18401: PUSH
18402: LD_INT 0
18404: ST_TO_ADDR
// sContamin := false ;
18405: LD_ADDR_EXP 85
18409: PUSH
18410: LD_INT 0
18412: ST_TO_ADDR
// sOil := false ;
18413: LD_ADDR_EXP 87
18417: PUSH
18418: LD_INT 0
18420: ST_TO_ADDR
// sStu := false ;
18421: LD_ADDR_EXP 91
18425: PUSH
18426: LD_INT 0
18428: ST_TO_ADDR
// sBazooka := false ;
18429: LD_ADDR_EXP 94
18433: PUSH
18434: LD_INT 0
18436: ST_TO_ADDR
// sMortar := false ;
18437: LD_ADDR_EXP 95
18441: PUSH
18442: LD_INT 0
18444: ST_TO_ADDR
// sRanger := false ;
18445: LD_ADDR_EXP 105
18449: PUSH
18450: LD_INT 0
18452: ST_TO_ADDR
// end ;
18453: LD_VAR 0 1
18457: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
18458: LD_INT 0
18460: PPUSH
18461: PPUSH
18462: PPUSH
18463: PPUSH
18464: PPUSH
// result := [ ] ;
18465: LD_ADDR_VAR 0 1
18469: PUSH
18470: EMPTY
18471: ST_TO_ADDR
// if campaign_id = 1 then
18472: LD_OWVAR 69
18476: PUSH
18477: LD_INT 1
18479: EQUAL
18480: IFFALSE 21418
// begin case mission_number of 1 :
18482: LD_OWVAR 70
18486: PUSH
18487: LD_INT 1
18489: DOUBLE
18490: EQUAL
18491: IFTRUE 18495
18493: GO 18559
18495: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
18496: LD_ADDR_VAR 0 1
18500: PUSH
18501: LD_INT 2
18503: PUSH
18504: LD_INT 4
18506: PUSH
18507: LD_INT 11
18509: PUSH
18510: LD_INT 12
18512: PUSH
18513: LD_INT 15
18515: PUSH
18516: LD_INT 16
18518: PUSH
18519: LD_INT 22
18521: PUSH
18522: LD_INT 23
18524: PUSH
18525: LD_INT 26
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: PUSH
18539: LD_INT 101
18541: PUSH
18542: LD_INT 102
18544: PUSH
18545: LD_INT 106
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: LIST
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: ST_TO_ADDR
18557: GO 21416
18559: LD_INT 2
18561: DOUBLE
18562: EQUAL
18563: IFTRUE 18567
18565: GO 18639
18567: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
18568: LD_ADDR_VAR 0 1
18572: PUSH
18573: LD_INT 2
18575: PUSH
18576: LD_INT 4
18578: PUSH
18579: LD_INT 11
18581: PUSH
18582: LD_INT 12
18584: PUSH
18585: LD_INT 15
18587: PUSH
18588: LD_INT 16
18590: PUSH
18591: LD_INT 22
18593: PUSH
18594: LD_INT 23
18596: PUSH
18597: LD_INT 26
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: PUSH
18611: LD_INT 101
18613: PUSH
18614: LD_INT 102
18616: PUSH
18617: LD_INT 105
18619: PUSH
18620: LD_INT 106
18622: PUSH
18623: LD_INT 108
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: ST_TO_ADDR
18637: GO 21416
18639: LD_INT 3
18641: DOUBLE
18642: EQUAL
18643: IFTRUE 18647
18645: GO 18723
18647: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
18648: LD_ADDR_VAR 0 1
18652: PUSH
18653: LD_INT 2
18655: PUSH
18656: LD_INT 4
18658: PUSH
18659: LD_INT 5
18661: PUSH
18662: LD_INT 11
18664: PUSH
18665: LD_INT 12
18667: PUSH
18668: LD_INT 15
18670: PUSH
18671: LD_INT 16
18673: PUSH
18674: LD_INT 22
18676: PUSH
18677: LD_INT 26
18679: PUSH
18680: LD_INT 36
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: PUSH
18695: LD_INT 101
18697: PUSH
18698: LD_INT 102
18700: PUSH
18701: LD_INT 105
18703: PUSH
18704: LD_INT 106
18706: PUSH
18707: LD_INT 108
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: ST_TO_ADDR
18721: GO 21416
18723: LD_INT 4
18725: DOUBLE
18726: EQUAL
18727: IFTRUE 18731
18729: GO 18815
18731: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
18732: LD_ADDR_VAR 0 1
18736: PUSH
18737: LD_INT 2
18739: PUSH
18740: LD_INT 4
18742: PUSH
18743: LD_INT 5
18745: PUSH
18746: LD_INT 8
18748: PUSH
18749: LD_INT 11
18751: PUSH
18752: LD_INT 12
18754: PUSH
18755: LD_INT 15
18757: PUSH
18758: LD_INT 16
18760: PUSH
18761: LD_INT 22
18763: PUSH
18764: LD_INT 23
18766: PUSH
18767: LD_INT 26
18769: PUSH
18770: LD_INT 36
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 101
18789: PUSH
18790: LD_INT 102
18792: PUSH
18793: LD_INT 105
18795: PUSH
18796: LD_INT 106
18798: PUSH
18799: LD_INT 108
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: ST_TO_ADDR
18813: GO 21416
18815: LD_INT 5
18817: DOUBLE
18818: EQUAL
18819: IFTRUE 18823
18821: GO 18923
18823: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
18824: LD_ADDR_VAR 0 1
18828: PUSH
18829: LD_INT 2
18831: PUSH
18832: LD_INT 4
18834: PUSH
18835: LD_INT 5
18837: PUSH
18838: LD_INT 6
18840: PUSH
18841: LD_INT 8
18843: PUSH
18844: LD_INT 11
18846: PUSH
18847: LD_INT 12
18849: PUSH
18850: LD_INT 15
18852: PUSH
18853: LD_INT 16
18855: PUSH
18856: LD_INT 22
18858: PUSH
18859: LD_INT 23
18861: PUSH
18862: LD_INT 25
18864: PUSH
18865: LD_INT 26
18867: PUSH
18868: LD_INT 36
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 101
18889: PUSH
18890: LD_INT 102
18892: PUSH
18893: LD_INT 105
18895: PUSH
18896: LD_INT 106
18898: PUSH
18899: LD_INT 108
18901: PUSH
18902: LD_INT 109
18904: PUSH
18905: LD_INT 112
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: ST_TO_ADDR
18921: GO 21416
18923: LD_INT 6
18925: DOUBLE
18926: EQUAL
18927: IFTRUE 18931
18929: GO 19051
18931: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
18932: LD_ADDR_VAR 0 1
18936: PUSH
18937: LD_INT 2
18939: PUSH
18940: LD_INT 4
18942: PUSH
18943: LD_INT 5
18945: PUSH
18946: LD_INT 6
18948: PUSH
18949: LD_INT 8
18951: PUSH
18952: LD_INT 11
18954: PUSH
18955: LD_INT 12
18957: PUSH
18958: LD_INT 15
18960: PUSH
18961: LD_INT 16
18963: PUSH
18964: LD_INT 20
18966: PUSH
18967: LD_INT 21
18969: PUSH
18970: LD_INT 22
18972: PUSH
18973: LD_INT 23
18975: PUSH
18976: LD_INT 25
18978: PUSH
18979: LD_INT 26
18981: PUSH
18982: LD_INT 30
18984: PUSH
18985: LD_INT 31
18987: PUSH
18988: LD_INT 32
18990: PUSH
18991: LD_INT 36
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 101
19017: PUSH
19018: LD_INT 102
19020: PUSH
19021: LD_INT 105
19023: PUSH
19024: LD_INT 106
19026: PUSH
19027: LD_INT 108
19029: PUSH
19030: LD_INT 109
19032: PUSH
19033: LD_INT 112
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: ST_TO_ADDR
19049: GO 21416
19051: LD_INT 7
19053: DOUBLE
19054: EQUAL
19055: IFTRUE 19059
19057: GO 19159
19059: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
19060: LD_ADDR_VAR 0 1
19064: PUSH
19065: LD_INT 2
19067: PUSH
19068: LD_INT 4
19070: PUSH
19071: LD_INT 5
19073: PUSH
19074: LD_INT 7
19076: PUSH
19077: LD_INT 11
19079: PUSH
19080: LD_INT 12
19082: PUSH
19083: LD_INT 15
19085: PUSH
19086: LD_INT 16
19088: PUSH
19089: LD_INT 20
19091: PUSH
19092: LD_INT 21
19094: PUSH
19095: LD_INT 22
19097: PUSH
19098: LD_INT 23
19100: PUSH
19101: LD_INT 25
19103: PUSH
19104: LD_INT 26
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 101
19125: PUSH
19126: LD_INT 102
19128: PUSH
19129: LD_INT 103
19131: PUSH
19132: LD_INT 105
19134: PUSH
19135: LD_INT 106
19137: PUSH
19138: LD_INT 108
19140: PUSH
19141: LD_INT 112
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: ST_TO_ADDR
19157: GO 21416
19159: LD_INT 8
19161: DOUBLE
19162: EQUAL
19163: IFTRUE 19167
19165: GO 19295
19167: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
19168: LD_ADDR_VAR 0 1
19172: PUSH
19173: LD_INT 2
19175: PUSH
19176: LD_INT 4
19178: PUSH
19179: LD_INT 5
19181: PUSH
19182: LD_INT 6
19184: PUSH
19185: LD_INT 7
19187: PUSH
19188: LD_INT 8
19190: PUSH
19191: LD_INT 11
19193: PUSH
19194: LD_INT 12
19196: PUSH
19197: LD_INT 15
19199: PUSH
19200: LD_INT 16
19202: PUSH
19203: LD_INT 20
19205: PUSH
19206: LD_INT 21
19208: PUSH
19209: LD_INT 22
19211: PUSH
19212: LD_INT 23
19214: PUSH
19215: LD_INT 25
19217: PUSH
19218: LD_INT 26
19220: PUSH
19221: LD_INT 30
19223: PUSH
19224: LD_INT 31
19226: PUSH
19227: LD_INT 32
19229: PUSH
19230: LD_INT 36
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 101
19257: PUSH
19258: LD_INT 102
19260: PUSH
19261: LD_INT 103
19263: PUSH
19264: LD_INT 105
19266: PUSH
19267: LD_INT 106
19269: PUSH
19270: LD_INT 108
19272: PUSH
19273: LD_INT 109
19275: PUSH
19276: LD_INT 112
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: ST_TO_ADDR
19293: GO 21416
19295: LD_INT 9
19297: DOUBLE
19298: EQUAL
19299: IFTRUE 19303
19301: GO 19439
19303: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
19304: LD_ADDR_VAR 0 1
19308: PUSH
19309: LD_INT 2
19311: PUSH
19312: LD_INT 4
19314: PUSH
19315: LD_INT 5
19317: PUSH
19318: LD_INT 6
19320: PUSH
19321: LD_INT 7
19323: PUSH
19324: LD_INT 8
19326: PUSH
19327: LD_INT 11
19329: PUSH
19330: LD_INT 12
19332: PUSH
19333: LD_INT 15
19335: PUSH
19336: LD_INT 16
19338: PUSH
19339: LD_INT 20
19341: PUSH
19342: LD_INT 21
19344: PUSH
19345: LD_INT 22
19347: PUSH
19348: LD_INT 23
19350: PUSH
19351: LD_INT 25
19353: PUSH
19354: LD_INT 26
19356: PUSH
19357: LD_INT 28
19359: PUSH
19360: LD_INT 30
19362: PUSH
19363: LD_INT 31
19365: PUSH
19366: LD_INT 32
19368: PUSH
19369: LD_INT 36
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: PUSH
19395: LD_INT 101
19397: PUSH
19398: LD_INT 102
19400: PUSH
19401: LD_INT 103
19403: PUSH
19404: LD_INT 105
19406: PUSH
19407: LD_INT 106
19409: PUSH
19410: LD_INT 108
19412: PUSH
19413: LD_INT 109
19415: PUSH
19416: LD_INT 112
19418: PUSH
19419: LD_INT 114
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: ST_TO_ADDR
19437: GO 21416
19439: LD_INT 10
19441: DOUBLE
19442: EQUAL
19443: IFTRUE 19447
19445: GO 19631
19447: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
19448: LD_ADDR_VAR 0 1
19452: PUSH
19453: LD_INT 2
19455: PUSH
19456: LD_INT 4
19458: PUSH
19459: LD_INT 5
19461: PUSH
19462: LD_INT 6
19464: PUSH
19465: LD_INT 7
19467: PUSH
19468: LD_INT 8
19470: PUSH
19471: LD_INT 9
19473: PUSH
19474: LD_INT 10
19476: PUSH
19477: LD_INT 11
19479: PUSH
19480: LD_INT 12
19482: PUSH
19483: LD_INT 13
19485: PUSH
19486: LD_INT 14
19488: PUSH
19489: LD_INT 15
19491: PUSH
19492: LD_INT 16
19494: PUSH
19495: LD_INT 17
19497: PUSH
19498: LD_INT 18
19500: PUSH
19501: LD_INT 19
19503: PUSH
19504: LD_INT 20
19506: PUSH
19507: LD_INT 21
19509: PUSH
19510: LD_INT 22
19512: PUSH
19513: LD_INT 23
19515: PUSH
19516: LD_INT 24
19518: PUSH
19519: LD_INT 25
19521: PUSH
19522: LD_INT 26
19524: PUSH
19525: LD_INT 28
19527: PUSH
19528: LD_INT 30
19530: PUSH
19531: LD_INT 31
19533: PUSH
19534: LD_INT 32
19536: PUSH
19537: LD_INT 36
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 101
19573: PUSH
19574: LD_INT 102
19576: PUSH
19577: LD_INT 103
19579: PUSH
19580: LD_INT 104
19582: PUSH
19583: LD_INT 105
19585: PUSH
19586: LD_INT 106
19588: PUSH
19589: LD_INT 107
19591: PUSH
19592: LD_INT 108
19594: PUSH
19595: LD_INT 109
19597: PUSH
19598: LD_INT 110
19600: PUSH
19601: LD_INT 111
19603: PUSH
19604: LD_INT 112
19606: PUSH
19607: LD_INT 114
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: ST_TO_ADDR
19629: GO 21416
19631: LD_INT 11
19633: DOUBLE
19634: EQUAL
19635: IFTRUE 19639
19637: GO 19831
19639: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
19640: LD_ADDR_VAR 0 1
19644: PUSH
19645: LD_INT 2
19647: PUSH
19648: LD_INT 3
19650: PUSH
19651: LD_INT 4
19653: PUSH
19654: LD_INT 5
19656: PUSH
19657: LD_INT 6
19659: PUSH
19660: LD_INT 7
19662: PUSH
19663: LD_INT 8
19665: PUSH
19666: LD_INT 9
19668: PUSH
19669: LD_INT 10
19671: PUSH
19672: LD_INT 11
19674: PUSH
19675: LD_INT 12
19677: PUSH
19678: LD_INT 13
19680: PUSH
19681: LD_INT 14
19683: PUSH
19684: LD_INT 15
19686: PUSH
19687: LD_INT 16
19689: PUSH
19690: LD_INT 17
19692: PUSH
19693: LD_INT 18
19695: PUSH
19696: LD_INT 19
19698: PUSH
19699: LD_INT 20
19701: PUSH
19702: LD_INT 21
19704: PUSH
19705: LD_INT 22
19707: PUSH
19708: LD_INT 23
19710: PUSH
19711: LD_INT 24
19713: PUSH
19714: LD_INT 25
19716: PUSH
19717: LD_INT 26
19719: PUSH
19720: LD_INT 28
19722: PUSH
19723: LD_INT 30
19725: PUSH
19726: LD_INT 31
19728: PUSH
19729: LD_INT 32
19731: PUSH
19732: LD_INT 34
19734: PUSH
19735: LD_INT 36
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 101
19773: PUSH
19774: LD_INT 102
19776: PUSH
19777: LD_INT 103
19779: PUSH
19780: LD_INT 104
19782: PUSH
19783: LD_INT 105
19785: PUSH
19786: LD_INT 106
19788: PUSH
19789: LD_INT 107
19791: PUSH
19792: LD_INT 108
19794: PUSH
19795: LD_INT 109
19797: PUSH
19798: LD_INT 110
19800: PUSH
19801: LD_INT 111
19803: PUSH
19804: LD_INT 112
19806: PUSH
19807: LD_INT 114
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: ST_TO_ADDR
19829: GO 21416
19831: LD_INT 12
19833: DOUBLE
19834: EQUAL
19835: IFTRUE 19839
19837: GO 20047
19839: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
19840: LD_ADDR_VAR 0 1
19844: PUSH
19845: LD_INT 1
19847: PUSH
19848: LD_INT 2
19850: PUSH
19851: LD_INT 3
19853: PUSH
19854: LD_INT 4
19856: PUSH
19857: LD_INT 5
19859: PUSH
19860: LD_INT 6
19862: PUSH
19863: LD_INT 7
19865: PUSH
19866: LD_INT 8
19868: PUSH
19869: LD_INT 9
19871: PUSH
19872: LD_INT 10
19874: PUSH
19875: LD_INT 11
19877: PUSH
19878: LD_INT 12
19880: PUSH
19881: LD_INT 13
19883: PUSH
19884: LD_INT 14
19886: PUSH
19887: LD_INT 15
19889: PUSH
19890: LD_INT 16
19892: PUSH
19893: LD_INT 17
19895: PUSH
19896: LD_INT 18
19898: PUSH
19899: LD_INT 19
19901: PUSH
19902: LD_INT 20
19904: PUSH
19905: LD_INT 21
19907: PUSH
19908: LD_INT 22
19910: PUSH
19911: LD_INT 23
19913: PUSH
19914: LD_INT 24
19916: PUSH
19917: LD_INT 25
19919: PUSH
19920: LD_INT 26
19922: PUSH
19923: LD_INT 27
19925: PUSH
19926: LD_INT 28
19928: PUSH
19929: LD_INT 30
19931: PUSH
19932: LD_INT 31
19934: PUSH
19935: LD_INT 32
19937: PUSH
19938: LD_INT 33
19940: PUSH
19941: LD_INT 34
19943: PUSH
19944: LD_INT 36
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 101
19985: PUSH
19986: LD_INT 102
19988: PUSH
19989: LD_INT 103
19991: PUSH
19992: LD_INT 104
19994: PUSH
19995: LD_INT 105
19997: PUSH
19998: LD_INT 106
20000: PUSH
20001: LD_INT 107
20003: PUSH
20004: LD_INT 108
20006: PUSH
20007: LD_INT 109
20009: PUSH
20010: LD_INT 110
20012: PUSH
20013: LD_INT 111
20015: PUSH
20016: LD_INT 112
20018: PUSH
20019: LD_INT 113
20021: PUSH
20022: LD_INT 114
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: ST_TO_ADDR
20045: GO 21416
20047: LD_INT 13
20049: DOUBLE
20050: EQUAL
20051: IFTRUE 20055
20053: GO 20251
20055: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
20056: LD_ADDR_VAR 0 1
20060: PUSH
20061: LD_INT 1
20063: PUSH
20064: LD_INT 2
20066: PUSH
20067: LD_INT 3
20069: PUSH
20070: LD_INT 4
20072: PUSH
20073: LD_INT 5
20075: PUSH
20076: LD_INT 8
20078: PUSH
20079: LD_INT 9
20081: PUSH
20082: LD_INT 10
20084: PUSH
20085: LD_INT 11
20087: PUSH
20088: LD_INT 12
20090: PUSH
20091: LD_INT 14
20093: PUSH
20094: LD_INT 15
20096: PUSH
20097: LD_INT 16
20099: PUSH
20100: LD_INT 17
20102: PUSH
20103: LD_INT 18
20105: PUSH
20106: LD_INT 19
20108: PUSH
20109: LD_INT 20
20111: PUSH
20112: LD_INT 21
20114: PUSH
20115: LD_INT 22
20117: PUSH
20118: LD_INT 23
20120: PUSH
20121: LD_INT 24
20123: PUSH
20124: LD_INT 25
20126: PUSH
20127: LD_INT 26
20129: PUSH
20130: LD_INT 27
20132: PUSH
20133: LD_INT 28
20135: PUSH
20136: LD_INT 30
20138: PUSH
20139: LD_INT 31
20141: PUSH
20142: LD_INT 32
20144: PUSH
20145: LD_INT 33
20147: PUSH
20148: LD_INT 34
20150: PUSH
20151: LD_INT 36
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: PUSH
20187: LD_INT 101
20189: PUSH
20190: LD_INT 102
20192: PUSH
20193: LD_INT 103
20195: PUSH
20196: LD_INT 104
20198: PUSH
20199: LD_INT 105
20201: PUSH
20202: LD_INT 106
20204: PUSH
20205: LD_INT 107
20207: PUSH
20208: LD_INT 108
20210: PUSH
20211: LD_INT 109
20213: PUSH
20214: LD_INT 110
20216: PUSH
20217: LD_INT 111
20219: PUSH
20220: LD_INT 112
20222: PUSH
20223: LD_INT 113
20225: PUSH
20226: LD_INT 114
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: ST_TO_ADDR
20249: GO 21416
20251: LD_INT 14
20253: DOUBLE
20254: EQUAL
20255: IFTRUE 20259
20257: GO 20471
20259: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
20260: LD_ADDR_VAR 0 1
20264: PUSH
20265: LD_INT 1
20267: PUSH
20268: LD_INT 2
20270: PUSH
20271: LD_INT 3
20273: PUSH
20274: LD_INT 4
20276: PUSH
20277: LD_INT 5
20279: PUSH
20280: LD_INT 6
20282: PUSH
20283: LD_INT 7
20285: PUSH
20286: LD_INT 8
20288: PUSH
20289: LD_INT 9
20291: PUSH
20292: LD_INT 10
20294: PUSH
20295: LD_INT 11
20297: PUSH
20298: LD_INT 12
20300: PUSH
20301: LD_INT 13
20303: PUSH
20304: LD_INT 14
20306: PUSH
20307: LD_INT 15
20309: PUSH
20310: LD_INT 16
20312: PUSH
20313: LD_INT 17
20315: PUSH
20316: LD_INT 18
20318: PUSH
20319: LD_INT 19
20321: PUSH
20322: LD_INT 20
20324: PUSH
20325: LD_INT 21
20327: PUSH
20328: LD_INT 22
20330: PUSH
20331: LD_INT 23
20333: PUSH
20334: LD_INT 24
20336: PUSH
20337: LD_INT 25
20339: PUSH
20340: LD_INT 26
20342: PUSH
20343: LD_INT 27
20345: PUSH
20346: LD_INT 28
20348: PUSH
20349: LD_INT 29
20351: PUSH
20352: LD_INT 30
20354: PUSH
20355: LD_INT 31
20357: PUSH
20358: LD_INT 32
20360: PUSH
20361: LD_INT 33
20363: PUSH
20364: LD_INT 34
20366: PUSH
20367: LD_INT 36
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: PUSH
20407: LD_INT 101
20409: PUSH
20410: LD_INT 102
20412: PUSH
20413: LD_INT 103
20415: PUSH
20416: LD_INT 104
20418: PUSH
20419: LD_INT 105
20421: PUSH
20422: LD_INT 106
20424: PUSH
20425: LD_INT 107
20427: PUSH
20428: LD_INT 108
20430: PUSH
20431: LD_INT 109
20433: PUSH
20434: LD_INT 110
20436: PUSH
20437: LD_INT 111
20439: PUSH
20440: LD_INT 112
20442: PUSH
20443: LD_INT 113
20445: PUSH
20446: LD_INT 114
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: ST_TO_ADDR
20469: GO 21416
20471: LD_INT 15
20473: DOUBLE
20474: EQUAL
20475: IFTRUE 20479
20477: GO 20691
20479: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
20480: LD_ADDR_VAR 0 1
20484: PUSH
20485: LD_INT 1
20487: PUSH
20488: LD_INT 2
20490: PUSH
20491: LD_INT 3
20493: PUSH
20494: LD_INT 4
20496: PUSH
20497: LD_INT 5
20499: PUSH
20500: LD_INT 6
20502: PUSH
20503: LD_INT 7
20505: PUSH
20506: LD_INT 8
20508: PUSH
20509: LD_INT 9
20511: PUSH
20512: LD_INT 10
20514: PUSH
20515: LD_INT 11
20517: PUSH
20518: LD_INT 12
20520: PUSH
20521: LD_INT 13
20523: PUSH
20524: LD_INT 14
20526: PUSH
20527: LD_INT 15
20529: PUSH
20530: LD_INT 16
20532: PUSH
20533: LD_INT 17
20535: PUSH
20536: LD_INT 18
20538: PUSH
20539: LD_INT 19
20541: PUSH
20542: LD_INT 20
20544: PUSH
20545: LD_INT 21
20547: PUSH
20548: LD_INT 22
20550: PUSH
20551: LD_INT 23
20553: PUSH
20554: LD_INT 24
20556: PUSH
20557: LD_INT 25
20559: PUSH
20560: LD_INT 26
20562: PUSH
20563: LD_INT 27
20565: PUSH
20566: LD_INT 28
20568: PUSH
20569: LD_INT 29
20571: PUSH
20572: LD_INT 30
20574: PUSH
20575: LD_INT 31
20577: PUSH
20578: LD_INT 32
20580: PUSH
20581: LD_INT 33
20583: PUSH
20584: LD_INT 34
20586: PUSH
20587: LD_INT 36
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: PUSH
20627: LD_INT 101
20629: PUSH
20630: LD_INT 102
20632: PUSH
20633: LD_INT 103
20635: PUSH
20636: LD_INT 104
20638: PUSH
20639: LD_INT 105
20641: PUSH
20642: LD_INT 106
20644: PUSH
20645: LD_INT 107
20647: PUSH
20648: LD_INT 108
20650: PUSH
20651: LD_INT 109
20653: PUSH
20654: LD_INT 110
20656: PUSH
20657: LD_INT 111
20659: PUSH
20660: LD_INT 112
20662: PUSH
20663: LD_INT 113
20665: PUSH
20666: LD_INT 114
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: ST_TO_ADDR
20689: GO 21416
20691: LD_INT 16
20693: DOUBLE
20694: EQUAL
20695: IFTRUE 20699
20697: GO 20823
20699: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
20700: LD_ADDR_VAR 0 1
20704: PUSH
20705: LD_INT 2
20707: PUSH
20708: LD_INT 4
20710: PUSH
20711: LD_INT 5
20713: PUSH
20714: LD_INT 7
20716: PUSH
20717: LD_INT 11
20719: PUSH
20720: LD_INT 12
20722: PUSH
20723: LD_INT 15
20725: PUSH
20726: LD_INT 16
20728: PUSH
20729: LD_INT 20
20731: PUSH
20732: LD_INT 21
20734: PUSH
20735: LD_INT 22
20737: PUSH
20738: LD_INT 23
20740: PUSH
20741: LD_INT 25
20743: PUSH
20744: LD_INT 26
20746: PUSH
20747: LD_INT 30
20749: PUSH
20750: LD_INT 31
20752: PUSH
20753: LD_INT 32
20755: PUSH
20756: LD_INT 33
20758: PUSH
20759: LD_INT 34
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: PUSH
20783: LD_INT 101
20785: PUSH
20786: LD_INT 102
20788: PUSH
20789: LD_INT 103
20791: PUSH
20792: LD_INT 106
20794: PUSH
20795: LD_INT 108
20797: PUSH
20798: LD_INT 112
20800: PUSH
20801: LD_INT 113
20803: PUSH
20804: LD_INT 114
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: ST_TO_ADDR
20821: GO 21416
20823: LD_INT 17
20825: DOUBLE
20826: EQUAL
20827: IFTRUE 20831
20829: GO 21043
20831: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
20832: LD_ADDR_VAR 0 1
20836: PUSH
20837: LD_INT 1
20839: PUSH
20840: LD_INT 2
20842: PUSH
20843: LD_INT 3
20845: PUSH
20846: LD_INT 4
20848: PUSH
20849: LD_INT 5
20851: PUSH
20852: LD_INT 6
20854: PUSH
20855: LD_INT 7
20857: PUSH
20858: LD_INT 8
20860: PUSH
20861: LD_INT 9
20863: PUSH
20864: LD_INT 10
20866: PUSH
20867: LD_INT 11
20869: PUSH
20870: LD_INT 12
20872: PUSH
20873: LD_INT 13
20875: PUSH
20876: LD_INT 14
20878: PUSH
20879: LD_INT 15
20881: PUSH
20882: LD_INT 16
20884: PUSH
20885: LD_INT 17
20887: PUSH
20888: LD_INT 18
20890: PUSH
20891: LD_INT 19
20893: PUSH
20894: LD_INT 20
20896: PUSH
20897: LD_INT 21
20899: PUSH
20900: LD_INT 22
20902: PUSH
20903: LD_INT 23
20905: PUSH
20906: LD_INT 24
20908: PUSH
20909: LD_INT 25
20911: PUSH
20912: LD_INT 26
20914: PUSH
20915: LD_INT 27
20917: PUSH
20918: LD_INT 28
20920: PUSH
20921: LD_INT 29
20923: PUSH
20924: LD_INT 30
20926: PUSH
20927: LD_INT 31
20929: PUSH
20930: LD_INT 32
20932: PUSH
20933: LD_INT 33
20935: PUSH
20936: LD_INT 34
20938: PUSH
20939: LD_INT 36
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: PUSH
20979: LD_INT 101
20981: PUSH
20982: LD_INT 102
20984: PUSH
20985: LD_INT 103
20987: PUSH
20988: LD_INT 104
20990: PUSH
20991: LD_INT 105
20993: PUSH
20994: LD_INT 106
20996: PUSH
20997: LD_INT 107
20999: PUSH
21000: LD_INT 108
21002: PUSH
21003: LD_INT 109
21005: PUSH
21006: LD_INT 110
21008: PUSH
21009: LD_INT 111
21011: PUSH
21012: LD_INT 112
21014: PUSH
21015: LD_INT 113
21017: PUSH
21018: LD_INT 114
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: ST_TO_ADDR
21041: GO 21416
21043: LD_INT 18
21045: DOUBLE
21046: EQUAL
21047: IFTRUE 21051
21049: GO 21187
21051: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
21052: LD_ADDR_VAR 0 1
21056: PUSH
21057: LD_INT 2
21059: PUSH
21060: LD_INT 4
21062: PUSH
21063: LD_INT 5
21065: PUSH
21066: LD_INT 7
21068: PUSH
21069: LD_INT 11
21071: PUSH
21072: LD_INT 12
21074: PUSH
21075: LD_INT 15
21077: PUSH
21078: LD_INT 16
21080: PUSH
21081: LD_INT 20
21083: PUSH
21084: LD_INT 21
21086: PUSH
21087: LD_INT 22
21089: PUSH
21090: LD_INT 23
21092: PUSH
21093: LD_INT 25
21095: PUSH
21096: LD_INT 26
21098: PUSH
21099: LD_INT 30
21101: PUSH
21102: LD_INT 31
21104: PUSH
21105: LD_INT 32
21107: PUSH
21108: LD_INT 33
21110: PUSH
21111: LD_INT 34
21113: PUSH
21114: LD_INT 35
21116: PUSH
21117: LD_INT 36
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 101
21145: PUSH
21146: LD_INT 102
21148: PUSH
21149: LD_INT 103
21151: PUSH
21152: LD_INT 106
21154: PUSH
21155: LD_INT 108
21157: PUSH
21158: LD_INT 112
21160: PUSH
21161: LD_INT 113
21163: PUSH
21164: LD_INT 114
21166: PUSH
21167: LD_INT 115
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: ST_TO_ADDR
21185: GO 21416
21187: LD_INT 19
21189: DOUBLE
21190: EQUAL
21191: IFTRUE 21195
21193: GO 21415
21195: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
21196: LD_ADDR_VAR 0 1
21200: PUSH
21201: LD_INT 1
21203: PUSH
21204: LD_INT 2
21206: PUSH
21207: LD_INT 3
21209: PUSH
21210: LD_INT 4
21212: PUSH
21213: LD_INT 5
21215: PUSH
21216: LD_INT 6
21218: PUSH
21219: LD_INT 7
21221: PUSH
21222: LD_INT 8
21224: PUSH
21225: LD_INT 9
21227: PUSH
21228: LD_INT 10
21230: PUSH
21231: LD_INT 11
21233: PUSH
21234: LD_INT 12
21236: PUSH
21237: LD_INT 13
21239: PUSH
21240: LD_INT 14
21242: PUSH
21243: LD_INT 15
21245: PUSH
21246: LD_INT 16
21248: PUSH
21249: LD_INT 17
21251: PUSH
21252: LD_INT 18
21254: PUSH
21255: LD_INT 19
21257: PUSH
21258: LD_INT 20
21260: PUSH
21261: LD_INT 21
21263: PUSH
21264: LD_INT 22
21266: PUSH
21267: LD_INT 23
21269: PUSH
21270: LD_INT 24
21272: PUSH
21273: LD_INT 25
21275: PUSH
21276: LD_INT 26
21278: PUSH
21279: LD_INT 27
21281: PUSH
21282: LD_INT 28
21284: PUSH
21285: LD_INT 29
21287: PUSH
21288: LD_INT 30
21290: PUSH
21291: LD_INT 31
21293: PUSH
21294: LD_INT 32
21296: PUSH
21297: LD_INT 33
21299: PUSH
21300: LD_INT 34
21302: PUSH
21303: LD_INT 35
21305: PUSH
21306: LD_INT 36
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: PUSH
21347: LD_INT 101
21349: PUSH
21350: LD_INT 102
21352: PUSH
21353: LD_INT 103
21355: PUSH
21356: LD_INT 104
21358: PUSH
21359: LD_INT 105
21361: PUSH
21362: LD_INT 106
21364: PUSH
21365: LD_INT 107
21367: PUSH
21368: LD_INT 108
21370: PUSH
21371: LD_INT 109
21373: PUSH
21374: LD_INT 110
21376: PUSH
21377: LD_INT 111
21379: PUSH
21380: LD_INT 112
21382: PUSH
21383: LD_INT 113
21385: PUSH
21386: LD_INT 114
21388: PUSH
21389: LD_INT 115
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: ST_TO_ADDR
21413: GO 21416
21415: POP
// end else
21416: GO 21635
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
21418: LD_ADDR_VAR 0 1
21422: PUSH
21423: LD_INT 1
21425: PUSH
21426: LD_INT 2
21428: PUSH
21429: LD_INT 3
21431: PUSH
21432: LD_INT 4
21434: PUSH
21435: LD_INT 5
21437: PUSH
21438: LD_INT 6
21440: PUSH
21441: LD_INT 7
21443: PUSH
21444: LD_INT 8
21446: PUSH
21447: LD_INT 9
21449: PUSH
21450: LD_INT 10
21452: PUSH
21453: LD_INT 11
21455: PUSH
21456: LD_INT 12
21458: PUSH
21459: LD_INT 13
21461: PUSH
21462: LD_INT 14
21464: PUSH
21465: LD_INT 15
21467: PUSH
21468: LD_INT 16
21470: PUSH
21471: LD_INT 17
21473: PUSH
21474: LD_INT 18
21476: PUSH
21477: LD_INT 19
21479: PUSH
21480: LD_INT 20
21482: PUSH
21483: LD_INT 21
21485: PUSH
21486: LD_INT 22
21488: PUSH
21489: LD_INT 23
21491: PUSH
21492: LD_INT 24
21494: PUSH
21495: LD_INT 25
21497: PUSH
21498: LD_INT 26
21500: PUSH
21501: LD_INT 27
21503: PUSH
21504: LD_INT 28
21506: PUSH
21507: LD_INT 29
21509: PUSH
21510: LD_INT 30
21512: PUSH
21513: LD_INT 31
21515: PUSH
21516: LD_INT 32
21518: PUSH
21519: LD_INT 33
21521: PUSH
21522: LD_INT 34
21524: PUSH
21525: LD_INT 35
21527: PUSH
21528: LD_INT 36
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: PUSH
21569: LD_INT 101
21571: PUSH
21572: LD_INT 102
21574: PUSH
21575: LD_INT 103
21577: PUSH
21578: LD_INT 104
21580: PUSH
21581: LD_INT 105
21583: PUSH
21584: LD_INT 106
21586: PUSH
21587: LD_INT 107
21589: PUSH
21590: LD_INT 108
21592: PUSH
21593: LD_INT 109
21595: PUSH
21596: LD_INT 110
21598: PUSH
21599: LD_INT 111
21601: PUSH
21602: LD_INT 112
21604: PUSH
21605: LD_INT 113
21607: PUSH
21608: LD_INT 114
21610: PUSH
21611: LD_INT 115
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: ST_TO_ADDR
// if result then
21635: LD_VAR 0 1
21639: IFFALSE 21928
// begin normal :=  ;
21641: LD_ADDR_VAR 0 3
21645: PUSH
21646: LD_STRING 
21648: ST_TO_ADDR
// hardcore :=  ;
21649: LD_ADDR_VAR 0 4
21653: PUSH
21654: LD_STRING 
21656: ST_TO_ADDR
// for i = 1 to normalCounter do
21657: LD_ADDR_VAR 0 5
21661: PUSH
21662: DOUBLE
21663: LD_INT 1
21665: DEC
21666: ST_TO_ADDR
21667: LD_EXP 53
21671: PUSH
21672: FOR_TO
21673: IFFALSE 21774
// begin tmp := 0 ;
21675: LD_ADDR_VAR 0 2
21679: PUSH
21680: LD_STRING 0
21682: ST_TO_ADDR
// if result [ 1 ] then
21683: LD_VAR 0 1
21687: PUSH
21688: LD_INT 1
21690: ARRAY
21691: IFFALSE 21756
// if result [ 1 ] [ 1 ] = i then
21693: LD_VAR 0 1
21697: PUSH
21698: LD_INT 1
21700: ARRAY
21701: PUSH
21702: LD_INT 1
21704: ARRAY
21705: PUSH
21706: LD_VAR 0 5
21710: EQUAL
21711: IFFALSE 21756
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
21713: LD_ADDR_VAR 0 1
21717: PUSH
21718: LD_VAR 0 1
21722: PPUSH
21723: LD_INT 1
21725: PPUSH
21726: LD_VAR 0 1
21730: PUSH
21731: LD_INT 1
21733: ARRAY
21734: PPUSH
21735: LD_INT 1
21737: PPUSH
21738: CALL_OW 3
21742: PPUSH
21743: CALL_OW 1
21747: ST_TO_ADDR
// tmp := 1 ;
21748: LD_ADDR_VAR 0 2
21752: PUSH
21753: LD_STRING 1
21755: ST_TO_ADDR
// end ; normal := normal & tmp ;
21756: LD_ADDR_VAR 0 3
21760: PUSH
21761: LD_VAR 0 3
21765: PUSH
21766: LD_VAR 0 2
21770: STR
21771: ST_TO_ADDR
// end ;
21772: GO 21672
21774: POP
21775: POP
// for i = 1 to hardcoreCounter do
21776: LD_ADDR_VAR 0 5
21780: PUSH
21781: DOUBLE
21782: LD_INT 1
21784: DEC
21785: ST_TO_ADDR
21786: LD_EXP 54
21790: PUSH
21791: FOR_TO
21792: IFFALSE 21897
// begin tmp := 0 ;
21794: LD_ADDR_VAR 0 2
21798: PUSH
21799: LD_STRING 0
21801: ST_TO_ADDR
// if result [ 2 ] then
21802: LD_VAR 0 1
21806: PUSH
21807: LD_INT 2
21809: ARRAY
21810: IFFALSE 21879
// if result [ 2 ] [ 1 ] = 100 + i then
21812: LD_VAR 0 1
21816: PUSH
21817: LD_INT 2
21819: ARRAY
21820: PUSH
21821: LD_INT 1
21823: ARRAY
21824: PUSH
21825: LD_INT 100
21827: PUSH
21828: LD_VAR 0 5
21832: PLUS
21833: EQUAL
21834: IFFALSE 21879
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
21836: LD_ADDR_VAR 0 1
21840: PUSH
21841: LD_VAR 0 1
21845: PPUSH
21846: LD_INT 2
21848: PPUSH
21849: LD_VAR 0 1
21853: PUSH
21854: LD_INT 2
21856: ARRAY
21857: PPUSH
21858: LD_INT 1
21860: PPUSH
21861: CALL_OW 3
21865: PPUSH
21866: CALL_OW 1
21870: ST_TO_ADDR
// tmp := 1 ;
21871: LD_ADDR_VAR 0 2
21875: PUSH
21876: LD_STRING 1
21878: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21879: LD_ADDR_VAR 0 4
21883: PUSH
21884: LD_VAR 0 4
21888: PUSH
21889: LD_VAR 0 2
21893: STR
21894: ST_TO_ADDR
// end ;
21895: GO 21791
21897: POP
21898: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
21899: LD_STRING getStreamItemsFromMission("
21901: PUSH
21902: LD_VAR 0 3
21906: STR
21907: PUSH
21908: LD_STRING ","
21910: STR
21911: PUSH
21912: LD_VAR 0 4
21916: STR
21917: PUSH
21918: LD_STRING ")
21920: STR
21921: PPUSH
21922: CALL_OW 559
// end else
21926: GO 21935
// ToLua ( getStreamItemsFromMission("","") ) ;
21928: LD_STRING getStreamItemsFromMission("","")
21930: PPUSH
21931: CALL_OW 559
// end ;
21935: LD_VAR 0 1
21939: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21940: LD_EXP 52
21944: PUSH
21945: LD_EXP 57
21949: AND
21950: IFFALSE 22074
21952: GO 21954
21954: DISABLE
21955: LD_INT 0
21957: PPUSH
21958: PPUSH
// begin enable ;
21959: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21960: LD_ADDR_VAR 0 2
21964: PUSH
21965: LD_INT 22
21967: PUSH
21968: LD_OWVAR 2
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 2
21979: PUSH
21980: LD_INT 34
21982: PUSH
21983: LD_INT 7
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 34
21992: PUSH
21993: LD_INT 45
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: LD_INT 34
22002: PUSH
22003: LD_INT 28
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: LD_INT 34
22012: PUSH
22013: LD_INT 47
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PPUSH
22031: CALL_OW 69
22035: ST_TO_ADDR
// if not tmp then
22036: LD_VAR 0 2
22040: NOT
22041: IFFALSE 22045
// exit ;
22043: GO 22074
// for i in tmp do
22045: LD_ADDR_VAR 0 1
22049: PUSH
22050: LD_VAR 0 2
22054: PUSH
22055: FOR_IN
22056: IFFALSE 22072
// begin SetLives ( i , 0 ) ;
22058: LD_VAR 0 1
22062: PPUSH
22063: LD_INT 0
22065: PPUSH
22066: CALL_OW 234
// end ;
22070: GO 22055
22072: POP
22073: POP
// end ;
22074: PPOPN 2
22076: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
22077: LD_EXP 52
22081: PUSH
22082: LD_EXP 58
22086: AND
22087: IFFALSE 22171
22089: GO 22091
22091: DISABLE
22092: LD_INT 0
22094: PPUSH
22095: PPUSH
// begin enable ;
22096: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
22097: LD_ADDR_VAR 0 2
22101: PUSH
22102: LD_INT 22
22104: PUSH
22105: LD_OWVAR 2
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 32
22116: PUSH
22117: LD_INT 3
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: PPUSH
22128: CALL_OW 69
22132: ST_TO_ADDR
// if not tmp then
22133: LD_VAR 0 2
22137: NOT
22138: IFFALSE 22142
// exit ;
22140: GO 22171
// for i in tmp do
22142: LD_ADDR_VAR 0 1
22146: PUSH
22147: LD_VAR 0 2
22151: PUSH
22152: FOR_IN
22153: IFFALSE 22169
// begin SetLives ( i , 0 ) ;
22155: LD_VAR 0 1
22159: PPUSH
22160: LD_INT 0
22162: PPUSH
22163: CALL_OW 234
// end ;
22167: GO 22152
22169: POP
22170: POP
// end ;
22171: PPOPN 2
22173: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
22174: LD_EXP 52
22178: PUSH
22179: LD_EXP 55
22183: AND
22184: IFFALSE 22277
22186: GO 22188
22188: DISABLE
22189: LD_INT 0
22191: PPUSH
// begin enable ;
22192: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22193: LD_ADDR_VAR 0 1
22197: PUSH
22198: LD_INT 22
22200: PUSH
22201: LD_OWVAR 2
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 2
22212: PUSH
22213: LD_INT 25
22215: PUSH
22216: LD_INT 5
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 25
22225: PUSH
22226: LD_INT 9
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 25
22235: PUSH
22236: LD_INT 8
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PPUSH
22253: CALL_OW 69
22257: PUSH
22258: FOR_IN
22259: IFFALSE 22275
// begin SetClass ( i , 1 ) ;
22261: LD_VAR 0 1
22265: PPUSH
22266: LD_INT 1
22268: PPUSH
22269: CALL_OW 336
// end ;
22273: GO 22258
22275: POP
22276: POP
// end ;
22277: PPOPN 1
22279: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22280: LD_EXP 52
22284: PUSH
22285: LD_EXP 56
22289: AND
22290: PUSH
22291: LD_OWVAR 65
22295: PUSH
22296: LD_INT 7
22298: LESS
22299: AND
22300: IFFALSE 22314
22302: GO 22304
22304: DISABLE
// begin enable ;
22305: ENABLE
// game_speed := 7 ;
22306: LD_ADDR_OWVAR 65
22310: PUSH
22311: LD_INT 7
22313: ST_TO_ADDR
// end ;
22314: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
22315: LD_EXP 52
22319: PUSH
22320: LD_EXP 59
22324: AND
22325: IFFALSE 22527
22327: GO 22329
22329: DISABLE
22330: LD_INT 0
22332: PPUSH
22333: PPUSH
22334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22335: LD_ADDR_VAR 0 3
22339: PUSH
22340: LD_INT 81
22342: PUSH
22343: LD_OWVAR 2
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 21
22354: PUSH
22355: LD_INT 1
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PPUSH
22366: CALL_OW 69
22370: ST_TO_ADDR
// if not tmp then
22371: LD_VAR 0 3
22375: NOT
22376: IFFALSE 22380
// exit ;
22378: GO 22527
// if tmp > 5 then
22380: LD_VAR 0 3
22384: PUSH
22385: LD_INT 5
22387: GREATER
22388: IFFALSE 22400
// k := 5 else
22390: LD_ADDR_VAR 0 2
22394: PUSH
22395: LD_INT 5
22397: ST_TO_ADDR
22398: GO 22410
// k := tmp ;
22400: LD_ADDR_VAR 0 2
22404: PUSH
22405: LD_VAR 0 3
22409: ST_TO_ADDR
// for i := 1 to k do
22410: LD_ADDR_VAR 0 1
22414: PUSH
22415: DOUBLE
22416: LD_INT 1
22418: DEC
22419: ST_TO_ADDR
22420: LD_VAR 0 2
22424: PUSH
22425: FOR_TO
22426: IFFALSE 22525
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22428: LD_VAR 0 3
22432: PUSH
22433: LD_VAR 0 1
22437: ARRAY
22438: PPUSH
22439: LD_VAR 0 1
22443: PUSH
22444: LD_INT 4
22446: MOD
22447: PUSH
22448: LD_INT 1
22450: PLUS
22451: PPUSH
22452: CALL_OW 259
22456: PUSH
22457: LD_INT 10
22459: LESS
22460: IFFALSE 22523
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22462: LD_VAR 0 3
22466: PUSH
22467: LD_VAR 0 1
22471: ARRAY
22472: PPUSH
22473: LD_VAR 0 1
22477: PUSH
22478: LD_INT 4
22480: MOD
22481: PUSH
22482: LD_INT 1
22484: PLUS
22485: PPUSH
22486: LD_VAR 0 3
22490: PUSH
22491: LD_VAR 0 1
22495: ARRAY
22496: PPUSH
22497: LD_VAR 0 1
22501: PUSH
22502: LD_INT 4
22504: MOD
22505: PUSH
22506: LD_INT 1
22508: PLUS
22509: PPUSH
22510: CALL_OW 259
22514: PUSH
22515: LD_INT 1
22517: PLUS
22518: PPUSH
22519: CALL_OW 237
22523: GO 22425
22525: POP
22526: POP
// end ;
22527: PPOPN 3
22529: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22530: LD_EXP 52
22534: PUSH
22535: LD_EXP 60
22539: AND
22540: IFFALSE 22560
22542: GO 22544
22544: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22545: LD_INT 4
22547: PPUSH
22548: LD_OWVAR 2
22552: PPUSH
22553: LD_INT 0
22555: PPUSH
22556: CALL_OW 324
22560: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22561: LD_EXP 52
22565: PUSH
22566: LD_EXP 89
22570: AND
22571: IFFALSE 22591
22573: GO 22575
22575: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22576: LD_INT 19
22578: PPUSH
22579: LD_OWVAR 2
22583: PPUSH
22584: LD_INT 0
22586: PPUSH
22587: CALL_OW 324
22591: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22592: LD_EXP 52
22596: PUSH
22597: LD_EXP 61
22601: AND
22602: IFFALSE 22704
22604: GO 22606
22606: DISABLE
22607: LD_INT 0
22609: PPUSH
22610: PPUSH
// begin enable ;
22611: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22612: LD_ADDR_VAR 0 2
22616: PUSH
22617: LD_INT 22
22619: PUSH
22620: LD_OWVAR 2
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 2
22631: PUSH
22632: LD_INT 34
22634: PUSH
22635: LD_INT 11
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PUSH
22642: LD_INT 34
22644: PUSH
22645: LD_INT 30
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: LIST
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PPUSH
22661: CALL_OW 69
22665: ST_TO_ADDR
// if not tmp then
22666: LD_VAR 0 2
22670: NOT
22671: IFFALSE 22675
// exit ;
22673: GO 22704
// for i in tmp do
22675: LD_ADDR_VAR 0 1
22679: PUSH
22680: LD_VAR 0 2
22684: PUSH
22685: FOR_IN
22686: IFFALSE 22702
// begin SetLives ( i , 0 ) ;
22688: LD_VAR 0 1
22692: PPUSH
22693: LD_INT 0
22695: PPUSH
22696: CALL_OW 234
// end ;
22700: GO 22685
22702: POP
22703: POP
// end ;
22704: PPOPN 2
22706: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22707: LD_EXP 52
22711: PUSH
22712: LD_EXP 62
22716: AND
22717: IFFALSE 22737
22719: GO 22721
22721: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22722: LD_INT 32
22724: PPUSH
22725: LD_OWVAR 2
22729: PPUSH
22730: LD_INT 0
22732: PPUSH
22733: CALL_OW 324
22737: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22738: LD_EXP 52
22742: PUSH
22743: LD_EXP 63
22747: AND
22748: IFFALSE 22929
22750: GO 22752
22752: DISABLE
22753: LD_INT 0
22755: PPUSH
22756: PPUSH
22757: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22758: LD_ADDR_VAR 0 2
22762: PUSH
22763: LD_INT 22
22765: PUSH
22766: LD_OWVAR 2
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: PUSH
22775: LD_INT 33
22777: PUSH
22778: LD_INT 3
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PPUSH
22789: CALL_OW 69
22793: ST_TO_ADDR
// if not tmp then
22794: LD_VAR 0 2
22798: NOT
22799: IFFALSE 22803
// exit ;
22801: GO 22929
// side := 0 ;
22803: LD_ADDR_VAR 0 3
22807: PUSH
22808: LD_INT 0
22810: ST_TO_ADDR
// for i := 1 to 8 do
22811: LD_ADDR_VAR 0 1
22815: PUSH
22816: DOUBLE
22817: LD_INT 1
22819: DEC
22820: ST_TO_ADDR
22821: LD_INT 8
22823: PUSH
22824: FOR_TO
22825: IFFALSE 22873
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22827: LD_OWVAR 2
22831: PUSH
22832: LD_VAR 0 1
22836: NONEQUAL
22837: PUSH
22838: LD_OWVAR 2
22842: PPUSH
22843: LD_VAR 0 1
22847: PPUSH
22848: CALL_OW 81
22852: PUSH
22853: LD_INT 2
22855: EQUAL
22856: AND
22857: IFFALSE 22871
// begin side := i ;
22859: LD_ADDR_VAR 0 3
22863: PUSH
22864: LD_VAR 0 1
22868: ST_TO_ADDR
// break ;
22869: GO 22873
// end ;
22871: GO 22824
22873: POP
22874: POP
// if not side then
22875: LD_VAR 0 3
22879: NOT
22880: IFFALSE 22884
// exit ;
22882: GO 22929
// for i := 1 to tmp do
22884: LD_ADDR_VAR 0 1
22888: PUSH
22889: DOUBLE
22890: LD_INT 1
22892: DEC
22893: ST_TO_ADDR
22894: LD_VAR 0 2
22898: PUSH
22899: FOR_TO
22900: IFFALSE 22927
// if Prob ( 60 ) then
22902: LD_INT 60
22904: PPUSH
22905: CALL_OW 13
22909: IFFALSE 22925
// SetSide ( i , side ) ;
22911: LD_VAR 0 1
22915: PPUSH
22916: LD_VAR 0 3
22920: PPUSH
22921: CALL_OW 235
22925: GO 22899
22927: POP
22928: POP
// end ;
22929: PPOPN 3
22931: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22932: LD_EXP 52
22936: PUSH
22937: LD_EXP 65
22941: AND
22942: IFFALSE 23061
22944: GO 22946
22946: DISABLE
22947: LD_INT 0
22949: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22950: LD_ADDR_VAR 0 1
22954: PUSH
22955: LD_INT 22
22957: PUSH
22958: LD_OWVAR 2
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PUSH
22967: LD_INT 21
22969: PUSH
22970: LD_INT 1
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: PUSH
22977: LD_INT 3
22979: PUSH
22980: LD_INT 23
22982: PUSH
22983: LD_INT 0
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: LIST
22998: PPUSH
22999: CALL_OW 69
23003: PUSH
23004: FOR_IN
23005: IFFALSE 23059
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
23007: LD_VAR 0 1
23011: PPUSH
23012: CALL_OW 257
23016: PUSH
23017: LD_INT 1
23019: PUSH
23020: LD_INT 2
23022: PUSH
23023: LD_INT 3
23025: PUSH
23026: LD_INT 4
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: IN
23035: IFFALSE 23057
// SetClass ( un , rand ( 1 , 4 ) ) ;
23037: LD_VAR 0 1
23041: PPUSH
23042: LD_INT 1
23044: PPUSH
23045: LD_INT 4
23047: PPUSH
23048: CALL_OW 12
23052: PPUSH
23053: CALL_OW 336
23057: GO 23004
23059: POP
23060: POP
// end ;
23061: PPOPN 1
23063: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
23064: LD_EXP 52
23068: PUSH
23069: LD_EXP 64
23073: AND
23074: IFFALSE 23153
23076: GO 23078
23078: DISABLE
23079: LD_INT 0
23081: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23082: LD_ADDR_VAR 0 1
23086: PUSH
23087: LD_INT 22
23089: PUSH
23090: LD_OWVAR 2
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 21
23101: PUSH
23102: LD_INT 3
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: PPUSH
23113: CALL_OW 69
23117: ST_TO_ADDR
// if not tmp then
23118: LD_VAR 0 1
23122: NOT
23123: IFFALSE 23127
// exit ;
23125: GO 23153
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
23127: LD_VAR 0 1
23131: PUSH
23132: LD_INT 1
23134: PPUSH
23135: LD_VAR 0 1
23139: PPUSH
23140: CALL_OW 12
23144: ARRAY
23145: PPUSH
23146: LD_INT 100
23148: PPUSH
23149: CALL_OW 234
// end ;
23153: PPOPN 1
23155: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
23156: LD_EXP 52
23160: PUSH
23161: LD_EXP 66
23165: AND
23166: IFFALSE 23264
23168: GO 23170
23170: DISABLE
23171: LD_INT 0
23173: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23174: LD_ADDR_VAR 0 1
23178: PUSH
23179: LD_INT 22
23181: PUSH
23182: LD_OWVAR 2
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 21
23193: PUSH
23194: LD_INT 1
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PPUSH
23205: CALL_OW 69
23209: ST_TO_ADDR
// if not tmp then
23210: LD_VAR 0 1
23214: NOT
23215: IFFALSE 23219
// exit ;
23217: GO 23264
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
23219: LD_VAR 0 1
23223: PUSH
23224: LD_INT 1
23226: PPUSH
23227: LD_VAR 0 1
23231: PPUSH
23232: CALL_OW 12
23236: ARRAY
23237: PPUSH
23238: LD_INT 1
23240: PPUSH
23241: LD_INT 4
23243: PPUSH
23244: CALL_OW 12
23248: PPUSH
23249: LD_INT 3000
23251: PPUSH
23252: LD_INT 9000
23254: PPUSH
23255: CALL_OW 12
23259: PPUSH
23260: CALL_OW 492
// end ;
23264: PPOPN 1
23266: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23267: LD_EXP 52
23271: PUSH
23272: LD_EXP 67
23276: AND
23277: IFFALSE 23297
23279: GO 23281
23281: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
23282: LD_INT 1
23284: PPUSH
23285: LD_OWVAR 2
23289: PPUSH
23290: LD_INT 0
23292: PPUSH
23293: CALL_OW 324
23297: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
23298: LD_EXP 52
23302: PUSH
23303: LD_EXP 68
23307: AND
23308: IFFALSE 23391
23310: GO 23312
23312: DISABLE
23313: LD_INT 0
23315: PPUSH
23316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23317: LD_ADDR_VAR 0 2
23321: PUSH
23322: LD_INT 22
23324: PUSH
23325: LD_OWVAR 2
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 21
23336: PUSH
23337: LD_INT 3
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PPUSH
23348: CALL_OW 69
23352: ST_TO_ADDR
// if not tmp then
23353: LD_VAR 0 2
23357: NOT
23358: IFFALSE 23362
// exit ;
23360: GO 23391
// for i in tmp do
23362: LD_ADDR_VAR 0 1
23366: PUSH
23367: LD_VAR 0 2
23371: PUSH
23372: FOR_IN
23373: IFFALSE 23389
// SetBLevel ( i , 10 ) ;
23375: LD_VAR 0 1
23379: PPUSH
23380: LD_INT 10
23382: PPUSH
23383: CALL_OW 241
23387: GO 23372
23389: POP
23390: POP
// end ;
23391: PPOPN 2
23393: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23394: LD_EXP 52
23398: PUSH
23399: LD_EXP 69
23403: AND
23404: IFFALSE 23515
23406: GO 23408
23408: DISABLE
23409: LD_INT 0
23411: PPUSH
23412: PPUSH
23413: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23414: LD_ADDR_VAR 0 3
23418: PUSH
23419: LD_INT 22
23421: PUSH
23422: LD_OWVAR 2
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 25
23433: PUSH
23434: LD_INT 1
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PPUSH
23445: CALL_OW 69
23449: ST_TO_ADDR
// if not tmp then
23450: LD_VAR 0 3
23454: NOT
23455: IFFALSE 23459
// exit ;
23457: GO 23515
// un := tmp [ rand ( 1 , tmp ) ] ;
23459: LD_ADDR_VAR 0 2
23463: PUSH
23464: LD_VAR 0 3
23468: PUSH
23469: LD_INT 1
23471: PPUSH
23472: LD_VAR 0 3
23476: PPUSH
23477: CALL_OW 12
23481: ARRAY
23482: ST_TO_ADDR
// if Crawls ( un ) then
23483: LD_VAR 0 2
23487: PPUSH
23488: CALL_OW 318
23492: IFFALSE 23503
// ComWalk ( un ) ;
23494: LD_VAR 0 2
23498: PPUSH
23499: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23503: LD_VAR 0 2
23507: PPUSH
23508: LD_INT 5
23510: PPUSH
23511: CALL_OW 336
// end ;
23515: PPOPN 3
23517: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
23518: LD_EXP 52
23522: PUSH
23523: LD_EXP 70
23527: AND
23528: PUSH
23529: LD_OWVAR 67
23533: PUSH
23534: LD_INT 3
23536: LESS
23537: AND
23538: IFFALSE 23557
23540: GO 23542
23542: DISABLE
// Difficulty := Difficulty + 1 ;
23543: LD_ADDR_OWVAR 67
23547: PUSH
23548: LD_OWVAR 67
23552: PUSH
23553: LD_INT 1
23555: PLUS
23556: ST_TO_ADDR
23557: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23558: LD_EXP 52
23562: PUSH
23563: LD_EXP 71
23567: AND
23568: IFFALSE 23671
23570: GO 23572
23572: DISABLE
23573: LD_INT 0
23575: PPUSH
// begin for i := 1 to 5 do
23576: LD_ADDR_VAR 0 1
23580: PUSH
23581: DOUBLE
23582: LD_INT 1
23584: DEC
23585: ST_TO_ADDR
23586: LD_INT 5
23588: PUSH
23589: FOR_TO
23590: IFFALSE 23669
// begin uc_nation := nation_nature ;
23592: LD_ADDR_OWVAR 21
23596: PUSH
23597: LD_INT 0
23599: ST_TO_ADDR
// uc_side := 0 ;
23600: LD_ADDR_OWVAR 20
23604: PUSH
23605: LD_INT 0
23607: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23608: LD_ADDR_OWVAR 29
23612: PUSH
23613: LD_INT 12
23615: PUSH
23616: LD_INT 12
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: ST_TO_ADDR
// hc_agressivity := 20 ;
23623: LD_ADDR_OWVAR 35
23627: PUSH
23628: LD_INT 20
23630: ST_TO_ADDR
// hc_class := class_tiger ;
23631: LD_ADDR_OWVAR 28
23635: PUSH
23636: LD_INT 14
23638: ST_TO_ADDR
// hc_gallery :=  ;
23639: LD_ADDR_OWVAR 33
23643: PUSH
23644: LD_STRING 
23646: ST_TO_ADDR
// hc_name :=  ;
23647: LD_ADDR_OWVAR 26
23651: PUSH
23652: LD_STRING 
23654: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23655: CALL_OW 44
23659: PPUSH
23660: LD_INT 0
23662: PPUSH
23663: CALL_OW 51
// end ;
23667: GO 23589
23669: POP
23670: POP
// end ;
23671: PPOPN 1
23673: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23674: LD_EXP 52
23678: PUSH
23679: LD_EXP 72
23683: AND
23684: IFFALSE 23693
23686: GO 23688
23688: DISABLE
// StreamSibBomb ;
23689: CALL 23694 0 0
23693: END
// export function StreamSibBomb ; var i , x , y ; begin
23694: LD_INT 0
23696: PPUSH
23697: PPUSH
23698: PPUSH
23699: PPUSH
// result := false ;
23700: LD_ADDR_VAR 0 1
23704: PUSH
23705: LD_INT 0
23707: ST_TO_ADDR
// for i := 1 to 16 do
23708: LD_ADDR_VAR 0 2
23712: PUSH
23713: DOUBLE
23714: LD_INT 1
23716: DEC
23717: ST_TO_ADDR
23718: LD_INT 16
23720: PUSH
23721: FOR_TO
23722: IFFALSE 23921
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23724: LD_ADDR_VAR 0 3
23728: PUSH
23729: LD_INT 10
23731: PUSH
23732: LD_INT 20
23734: PUSH
23735: LD_INT 30
23737: PUSH
23738: LD_INT 40
23740: PUSH
23741: LD_INT 50
23743: PUSH
23744: LD_INT 60
23746: PUSH
23747: LD_INT 70
23749: PUSH
23750: LD_INT 80
23752: PUSH
23753: LD_INT 90
23755: PUSH
23756: LD_INT 100
23758: PUSH
23759: LD_INT 110
23761: PUSH
23762: LD_INT 120
23764: PUSH
23765: LD_INT 130
23767: PUSH
23768: LD_INT 140
23770: PUSH
23771: LD_INT 150
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 1
23793: PPUSH
23794: LD_INT 15
23796: PPUSH
23797: CALL_OW 12
23801: ARRAY
23802: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23803: LD_ADDR_VAR 0 4
23807: PUSH
23808: LD_INT 10
23810: PUSH
23811: LD_INT 20
23813: PUSH
23814: LD_INT 30
23816: PUSH
23817: LD_INT 40
23819: PUSH
23820: LD_INT 50
23822: PUSH
23823: LD_INT 60
23825: PUSH
23826: LD_INT 70
23828: PUSH
23829: LD_INT 80
23831: PUSH
23832: LD_INT 90
23834: PUSH
23835: LD_INT 100
23837: PUSH
23838: LD_INT 110
23840: PUSH
23841: LD_INT 120
23843: PUSH
23844: LD_INT 130
23846: PUSH
23847: LD_INT 140
23849: PUSH
23850: LD_INT 150
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 1
23872: PPUSH
23873: LD_INT 15
23875: PPUSH
23876: CALL_OW 12
23880: ARRAY
23881: ST_TO_ADDR
// if ValidHex ( x , y ) then
23882: LD_VAR 0 3
23886: PPUSH
23887: LD_VAR 0 4
23891: PPUSH
23892: CALL_OW 488
23896: IFFALSE 23919
// begin result := [ x , y ] ;
23898: LD_ADDR_VAR 0 1
23902: PUSH
23903: LD_VAR 0 3
23907: PUSH
23908: LD_VAR 0 4
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: ST_TO_ADDR
// break ;
23917: GO 23921
// end ; end ;
23919: GO 23721
23921: POP
23922: POP
// if result then
23923: LD_VAR 0 1
23927: IFFALSE 23987
// begin ToLua ( playSibBomb() ) ;
23929: LD_STRING playSibBomb()
23931: PPUSH
23932: CALL_OW 559
// wait ( 0 0$14 ) ;
23936: LD_INT 490
23938: PPUSH
23939: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23943: LD_VAR 0 1
23947: PUSH
23948: LD_INT 1
23950: ARRAY
23951: PPUSH
23952: LD_VAR 0 1
23956: PUSH
23957: LD_INT 2
23959: ARRAY
23960: PPUSH
23961: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23965: LD_VAR 0 1
23969: PUSH
23970: LD_INT 1
23972: ARRAY
23973: PPUSH
23974: LD_VAR 0 1
23978: PUSH
23979: LD_INT 2
23981: ARRAY
23982: PPUSH
23983: CALL_OW 429
// end ; end ;
23987: LD_VAR 0 1
23991: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23992: LD_EXP 52
23996: PUSH
23997: LD_EXP 74
24001: AND
24002: IFFALSE 24014
24004: GO 24006
24006: DISABLE
// YouLost (  ) ;
24007: LD_STRING 
24009: PPUSH
24010: CALL_OW 104
24014: END
// every 0 0$1 trigger StreamModeActive and sFog do
24015: LD_EXP 52
24019: PUSH
24020: LD_EXP 73
24024: AND
24025: IFFALSE 24039
24027: GO 24029
24029: DISABLE
// FogOff ( your_side ) ;
24030: LD_OWVAR 2
24034: PPUSH
24035: CALL_OW 344
24039: END
// every 0 0$1 trigger StreamModeActive and sSun do
24040: LD_EXP 52
24044: PUSH
24045: LD_EXP 75
24049: AND
24050: IFFALSE 24078
24052: GO 24054
24054: DISABLE
// begin solar_recharge_percent := 0 ;
24055: LD_ADDR_OWVAR 79
24059: PUSH
24060: LD_INT 0
24062: ST_TO_ADDR
// wait ( 5 5$00 ) ;
24063: LD_INT 10500
24065: PPUSH
24066: CALL_OW 67
// solar_recharge_percent := 100 ;
24070: LD_ADDR_OWVAR 79
24074: PUSH
24075: LD_INT 100
24077: ST_TO_ADDR
// end ;
24078: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
24079: LD_EXP 52
24083: PUSH
24084: LD_EXP 76
24088: AND
24089: IFFALSE 24328
24091: GO 24093
24093: DISABLE
24094: LD_INT 0
24096: PPUSH
24097: PPUSH
24098: PPUSH
// begin tmp := [ ] ;
24099: LD_ADDR_VAR 0 3
24103: PUSH
24104: EMPTY
24105: ST_TO_ADDR
// for i := 1 to 6 do
24106: LD_ADDR_VAR 0 1
24110: PUSH
24111: DOUBLE
24112: LD_INT 1
24114: DEC
24115: ST_TO_ADDR
24116: LD_INT 6
24118: PUSH
24119: FOR_TO
24120: IFFALSE 24225
// begin uc_nation := nation_nature ;
24122: LD_ADDR_OWVAR 21
24126: PUSH
24127: LD_INT 0
24129: ST_TO_ADDR
// uc_side := 0 ;
24130: LD_ADDR_OWVAR 20
24134: PUSH
24135: LD_INT 0
24137: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24138: LD_ADDR_OWVAR 29
24142: PUSH
24143: LD_INT 12
24145: PUSH
24146: LD_INT 12
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: ST_TO_ADDR
// hc_agressivity := 20 ;
24153: LD_ADDR_OWVAR 35
24157: PUSH
24158: LD_INT 20
24160: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
24161: LD_ADDR_OWVAR 28
24165: PUSH
24166: LD_INT 17
24168: ST_TO_ADDR
// hc_gallery :=  ;
24169: LD_ADDR_OWVAR 33
24173: PUSH
24174: LD_STRING 
24176: ST_TO_ADDR
// hc_name :=  ;
24177: LD_ADDR_OWVAR 26
24181: PUSH
24182: LD_STRING 
24184: ST_TO_ADDR
// un := CreateHuman ;
24185: LD_ADDR_VAR 0 2
24189: PUSH
24190: CALL_OW 44
24194: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24195: LD_VAR 0 2
24199: PPUSH
24200: LD_INT 1
24202: PPUSH
24203: CALL_OW 51
// tmp := tmp ^ un ;
24207: LD_ADDR_VAR 0 3
24211: PUSH
24212: LD_VAR 0 3
24216: PUSH
24217: LD_VAR 0 2
24221: ADD
24222: ST_TO_ADDR
// end ;
24223: GO 24119
24225: POP
24226: POP
// repeat wait ( 0 0$1 ) ;
24227: LD_INT 35
24229: PPUSH
24230: CALL_OW 67
// for un in tmp do
24234: LD_ADDR_VAR 0 2
24238: PUSH
24239: LD_VAR 0 3
24243: PUSH
24244: FOR_IN
24245: IFFALSE 24319
// begin if IsDead ( un ) then
24247: LD_VAR 0 2
24251: PPUSH
24252: CALL_OW 301
24256: IFFALSE 24276
// begin tmp := tmp diff un ;
24258: LD_ADDR_VAR 0 3
24262: PUSH
24263: LD_VAR 0 3
24267: PUSH
24268: LD_VAR 0 2
24272: DIFF
24273: ST_TO_ADDR
// continue ;
24274: GO 24244
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24276: LD_VAR 0 2
24280: PPUSH
24281: LD_INT 3
24283: PUSH
24284: LD_INT 22
24286: PUSH
24287: LD_INT 0
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PPUSH
24298: CALL_OW 69
24302: PPUSH
24303: LD_VAR 0 2
24307: PPUSH
24308: CALL_OW 74
24312: PPUSH
24313: CALL_OW 115
// end ;
24317: GO 24244
24319: POP
24320: POP
// until not tmp ;
24321: LD_VAR 0 3
24325: NOT
24326: IFFALSE 24227
// end ;
24328: PPOPN 3
24330: END
// every 0 0$1 trigger StreamModeActive and sTroll do
24331: LD_EXP 52
24335: PUSH
24336: LD_EXP 77
24340: AND
24341: IFFALSE 24395
24343: GO 24345
24345: DISABLE
// begin ToLua ( displayTroll(); ) ;
24346: LD_STRING displayTroll();
24348: PPUSH
24349: CALL_OW 559
// wait ( 3 3$00 ) ;
24353: LD_INT 6300
24355: PPUSH
24356: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24360: LD_STRING hideTroll();
24362: PPUSH
24363: CALL_OW 559
// wait ( 1 1$00 ) ;
24367: LD_INT 2100
24369: PPUSH
24370: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24374: LD_STRING displayTroll();
24376: PPUSH
24377: CALL_OW 559
// wait ( 1 1$00 ) ;
24381: LD_INT 2100
24383: PPUSH
24384: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24388: LD_STRING hideTroll();
24390: PPUSH
24391: CALL_OW 559
// end ;
24395: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24396: LD_EXP 52
24400: PUSH
24401: LD_EXP 78
24405: AND
24406: IFFALSE 24469
24408: GO 24410
24410: DISABLE
24411: LD_INT 0
24413: PPUSH
// begin p := 0 ;
24414: LD_ADDR_VAR 0 1
24418: PUSH
24419: LD_INT 0
24421: ST_TO_ADDR
// repeat game_speed := 1 ;
24422: LD_ADDR_OWVAR 65
24426: PUSH
24427: LD_INT 1
24429: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24430: LD_INT 35
24432: PPUSH
24433: CALL_OW 67
// p := p + 1 ;
24437: LD_ADDR_VAR 0 1
24441: PUSH
24442: LD_VAR 0 1
24446: PUSH
24447: LD_INT 1
24449: PLUS
24450: ST_TO_ADDR
// until p >= 60 ;
24451: LD_VAR 0 1
24455: PUSH
24456: LD_INT 60
24458: GREATEREQUAL
24459: IFFALSE 24422
// game_speed := 4 ;
24461: LD_ADDR_OWVAR 65
24465: PUSH
24466: LD_INT 4
24468: ST_TO_ADDR
// end ;
24469: PPOPN 1
24471: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24472: LD_EXP 52
24476: PUSH
24477: LD_EXP 79
24481: AND
24482: IFFALSE 24628
24484: GO 24486
24486: DISABLE
24487: LD_INT 0
24489: PPUSH
24490: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24491: LD_ADDR_VAR 0 1
24495: PUSH
24496: LD_INT 22
24498: PUSH
24499: LD_OWVAR 2
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 2
24510: PUSH
24511: LD_INT 30
24513: PUSH
24514: LD_INT 0
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PUSH
24521: LD_INT 30
24523: PUSH
24524: LD_INT 1
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: LIST
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PPUSH
24540: CALL_OW 69
24544: ST_TO_ADDR
// if not depot then
24545: LD_VAR 0 1
24549: NOT
24550: IFFALSE 24554
// exit ;
24552: GO 24628
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24554: LD_ADDR_VAR 0 2
24558: PUSH
24559: LD_VAR 0 1
24563: PUSH
24564: LD_INT 1
24566: PPUSH
24567: LD_VAR 0 1
24571: PPUSH
24572: CALL_OW 12
24576: ARRAY
24577: PPUSH
24578: CALL_OW 274
24582: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24583: LD_VAR 0 2
24587: PPUSH
24588: LD_INT 1
24590: PPUSH
24591: LD_INT 0
24593: PPUSH
24594: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24598: LD_VAR 0 2
24602: PPUSH
24603: LD_INT 2
24605: PPUSH
24606: LD_INT 0
24608: PPUSH
24609: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24613: LD_VAR 0 2
24617: PPUSH
24618: LD_INT 3
24620: PPUSH
24621: LD_INT 0
24623: PPUSH
24624: CALL_OW 277
// end ;
24628: PPOPN 2
24630: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24631: LD_EXP 52
24635: PUSH
24636: LD_EXP 80
24640: AND
24641: IFFALSE 24738
24643: GO 24645
24645: DISABLE
24646: LD_INT 0
24648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24649: LD_ADDR_VAR 0 1
24653: PUSH
24654: LD_INT 22
24656: PUSH
24657: LD_OWVAR 2
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 21
24668: PUSH
24669: LD_INT 1
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 3
24678: PUSH
24679: LD_INT 23
24681: PUSH
24682: LD_INT 0
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: LIST
24697: PPUSH
24698: CALL_OW 69
24702: ST_TO_ADDR
// if not tmp then
24703: LD_VAR 0 1
24707: NOT
24708: IFFALSE 24712
// exit ;
24710: GO 24738
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24712: LD_VAR 0 1
24716: PUSH
24717: LD_INT 1
24719: PPUSH
24720: LD_VAR 0 1
24724: PPUSH
24725: CALL_OW 12
24729: ARRAY
24730: PPUSH
24731: LD_INT 200
24733: PPUSH
24734: CALL_OW 234
// end ;
24738: PPOPN 1
24740: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24741: LD_EXP 52
24745: PUSH
24746: LD_EXP 81
24750: AND
24751: IFFALSE 24830
24753: GO 24755
24755: DISABLE
24756: LD_INT 0
24758: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24759: LD_ADDR_VAR 0 1
24763: PUSH
24764: LD_INT 22
24766: PUSH
24767: LD_OWVAR 2
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: LD_INT 21
24778: PUSH
24779: LD_INT 2
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PPUSH
24790: CALL_OW 69
24794: ST_TO_ADDR
// if not tmp then
24795: LD_VAR 0 1
24799: NOT
24800: IFFALSE 24804
// exit ;
24802: GO 24830
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24804: LD_VAR 0 1
24808: PUSH
24809: LD_INT 1
24811: PPUSH
24812: LD_VAR 0 1
24816: PPUSH
24817: CALL_OW 12
24821: ARRAY
24822: PPUSH
24823: LD_INT 60
24825: PPUSH
24826: CALL_OW 234
// end ;
24830: PPOPN 1
24832: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24833: LD_EXP 52
24837: PUSH
24838: LD_EXP 82
24842: AND
24843: IFFALSE 24942
24845: GO 24847
24847: DISABLE
24848: LD_INT 0
24850: PPUSH
24851: PPUSH
// begin enable ;
24852: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24853: LD_ADDR_VAR 0 1
24857: PUSH
24858: LD_INT 22
24860: PUSH
24861: LD_OWVAR 2
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 61
24872: PUSH
24873: EMPTY
24874: LIST
24875: PUSH
24876: LD_INT 33
24878: PUSH
24879: LD_INT 2
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: LIST
24890: PPUSH
24891: CALL_OW 69
24895: ST_TO_ADDR
// if not tmp then
24896: LD_VAR 0 1
24900: NOT
24901: IFFALSE 24905
// exit ;
24903: GO 24942
// for i in tmp do
24905: LD_ADDR_VAR 0 2
24909: PUSH
24910: LD_VAR 0 1
24914: PUSH
24915: FOR_IN
24916: IFFALSE 24940
// if IsControledBy ( i ) then
24918: LD_VAR 0 2
24922: PPUSH
24923: CALL_OW 312
24927: IFFALSE 24938
// ComUnlink ( i ) ;
24929: LD_VAR 0 2
24933: PPUSH
24934: CALL_OW 136
24938: GO 24915
24940: POP
24941: POP
// end ;
24942: PPOPN 2
24944: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24945: LD_EXP 52
24949: PUSH
24950: LD_EXP 83
24954: AND
24955: IFFALSE 25095
24957: GO 24959
24959: DISABLE
24960: LD_INT 0
24962: PPUSH
24963: PPUSH
// begin ToLua ( displayPowell(); ) ;
24964: LD_STRING displayPowell();
24966: PPUSH
24967: CALL_OW 559
// uc_side := 0 ;
24971: LD_ADDR_OWVAR 20
24975: PUSH
24976: LD_INT 0
24978: ST_TO_ADDR
// uc_nation := 2 ;
24979: LD_ADDR_OWVAR 21
24983: PUSH
24984: LD_INT 2
24986: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24987: LD_ADDR_OWVAR 37
24991: PUSH
24992: LD_INT 14
24994: ST_TO_ADDR
// vc_engine := engine_siberite ;
24995: LD_ADDR_OWVAR 39
24999: PUSH
25000: LD_INT 3
25002: ST_TO_ADDR
// vc_control := control_apeman ;
25003: LD_ADDR_OWVAR 38
25007: PUSH
25008: LD_INT 5
25010: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25011: LD_ADDR_OWVAR 40
25015: PUSH
25016: LD_INT 29
25018: ST_TO_ADDR
// un := CreateVehicle ;
25019: LD_ADDR_VAR 0 2
25023: PUSH
25024: CALL_OW 45
25028: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25029: LD_VAR 0 2
25033: PPUSH
25034: LD_INT 1
25036: PPUSH
25037: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25041: LD_INT 35
25043: PPUSH
25044: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25048: LD_VAR 0 2
25052: PPUSH
25053: LD_INT 22
25055: PUSH
25056: LD_OWVAR 2
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PPUSH
25065: CALL_OW 69
25069: PPUSH
25070: LD_VAR 0 2
25074: PPUSH
25075: CALL_OW 74
25079: PPUSH
25080: CALL_OW 115
// until IsDead ( un ) ;
25084: LD_VAR 0 2
25088: PPUSH
25089: CALL_OW 301
25093: IFFALSE 25041
// end ;
25095: PPOPN 2
25097: END
// every 0 0$1 trigger StreamModeActive and sStu do
25098: LD_EXP 52
25102: PUSH
25103: LD_EXP 91
25107: AND
25108: IFFALSE 25124
25110: GO 25112
25112: DISABLE
// begin ToLua ( displayStucuk(); ) ;
25113: LD_STRING displayStucuk();
25115: PPUSH
25116: CALL_OW 559
// ResetFog ;
25120: CALL_OW 335
// end ;
25124: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
25125: LD_EXP 52
25129: PUSH
25130: LD_EXP 84
25134: AND
25135: IFFALSE 25276
25137: GO 25139
25139: DISABLE
25140: LD_INT 0
25142: PPUSH
25143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25144: LD_ADDR_VAR 0 2
25148: PUSH
25149: LD_INT 22
25151: PUSH
25152: LD_OWVAR 2
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 21
25163: PUSH
25164: LD_INT 1
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PPUSH
25175: CALL_OW 69
25179: ST_TO_ADDR
// if not tmp then
25180: LD_VAR 0 2
25184: NOT
25185: IFFALSE 25189
// exit ;
25187: GO 25276
// un := tmp [ rand ( 1 , tmp ) ] ;
25189: LD_ADDR_VAR 0 1
25193: PUSH
25194: LD_VAR 0 2
25198: PUSH
25199: LD_INT 1
25201: PPUSH
25202: LD_VAR 0 2
25206: PPUSH
25207: CALL_OW 12
25211: ARRAY
25212: ST_TO_ADDR
// SetSide ( un , 0 ) ;
25213: LD_VAR 0 1
25217: PPUSH
25218: LD_INT 0
25220: PPUSH
25221: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
25225: LD_VAR 0 1
25229: PPUSH
25230: LD_OWVAR 3
25234: PUSH
25235: LD_VAR 0 1
25239: DIFF
25240: PPUSH
25241: LD_VAR 0 1
25245: PPUSH
25246: CALL_OW 74
25250: PPUSH
25251: CALL_OW 115
// wait ( 0 0$20 ) ;
25255: LD_INT 700
25257: PPUSH
25258: CALL_OW 67
// SetSide ( un , your_side ) ;
25262: LD_VAR 0 1
25266: PPUSH
25267: LD_OWVAR 2
25271: PPUSH
25272: CALL_OW 235
// end ;
25276: PPOPN 2
25278: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25279: LD_EXP 52
25283: PUSH
25284: LD_EXP 85
25288: AND
25289: IFFALSE 25395
25291: GO 25293
25293: DISABLE
25294: LD_INT 0
25296: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25297: LD_ADDR_VAR 0 1
25301: PUSH
25302: LD_INT 22
25304: PUSH
25305: LD_OWVAR 2
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 2
25316: PUSH
25317: LD_INT 30
25319: PUSH
25320: LD_INT 0
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 30
25329: PUSH
25330: LD_INT 1
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: LIST
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PPUSH
25346: CALL_OW 69
25350: ST_TO_ADDR
// if not depot then
25351: LD_VAR 0 1
25355: NOT
25356: IFFALSE 25360
// exit ;
25358: GO 25395
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25360: LD_VAR 0 1
25364: PUSH
25365: LD_INT 1
25367: ARRAY
25368: PPUSH
25369: CALL_OW 250
25373: PPUSH
25374: LD_VAR 0 1
25378: PUSH
25379: LD_INT 1
25381: ARRAY
25382: PPUSH
25383: CALL_OW 251
25387: PPUSH
25388: LD_INT 70
25390: PPUSH
25391: CALL_OW 495
// end ;
25395: PPOPN 1
25397: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25398: LD_EXP 52
25402: PUSH
25403: LD_EXP 86
25407: AND
25408: IFFALSE 25619
25410: GO 25412
25412: DISABLE
25413: LD_INT 0
25415: PPUSH
25416: PPUSH
25417: PPUSH
25418: PPUSH
25419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25420: LD_ADDR_VAR 0 5
25424: PUSH
25425: LD_INT 22
25427: PUSH
25428: LD_OWVAR 2
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: LD_INT 21
25439: PUSH
25440: LD_INT 1
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PPUSH
25451: CALL_OW 69
25455: ST_TO_ADDR
// if not tmp then
25456: LD_VAR 0 5
25460: NOT
25461: IFFALSE 25465
// exit ;
25463: GO 25619
// for i in tmp do
25465: LD_ADDR_VAR 0 1
25469: PUSH
25470: LD_VAR 0 5
25474: PUSH
25475: FOR_IN
25476: IFFALSE 25617
// begin d := rand ( 0 , 5 ) ;
25478: LD_ADDR_VAR 0 4
25482: PUSH
25483: LD_INT 0
25485: PPUSH
25486: LD_INT 5
25488: PPUSH
25489: CALL_OW 12
25493: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25494: LD_ADDR_VAR 0 2
25498: PUSH
25499: LD_VAR 0 1
25503: PPUSH
25504: CALL_OW 250
25508: PPUSH
25509: LD_VAR 0 4
25513: PPUSH
25514: LD_INT 3
25516: PPUSH
25517: LD_INT 12
25519: PPUSH
25520: CALL_OW 12
25524: PPUSH
25525: CALL_OW 272
25529: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25530: LD_ADDR_VAR 0 3
25534: PUSH
25535: LD_VAR 0 1
25539: PPUSH
25540: CALL_OW 251
25544: PPUSH
25545: LD_VAR 0 4
25549: PPUSH
25550: LD_INT 3
25552: PPUSH
25553: LD_INT 12
25555: PPUSH
25556: CALL_OW 12
25560: PPUSH
25561: CALL_OW 273
25565: ST_TO_ADDR
// if ValidHex ( x , y ) then
25566: LD_VAR 0 2
25570: PPUSH
25571: LD_VAR 0 3
25575: PPUSH
25576: CALL_OW 488
25580: IFFALSE 25615
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25582: LD_VAR 0 1
25586: PPUSH
25587: LD_VAR 0 2
25591: PPUSH
25592: LD_VAR 0 3
25596: PPUSH
25597: LD_INT 3
25599: PPUSH
25600: LD_INT 6
25602: PPUSH
25603: CALL_OW 12
25607: PPUSH
25608: LD_INT 1
25610: PPUSH
25611: CALL_OW 483
// end ;
25615: GO 25475
25617: POP
25618: POP
// end ;
25619: PPOPN 5
25621: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25622: LD_EXP 52
25626: PUSH
25627: LD_EXP 87
25631: AND
25632: IFFALSE 25726
25634: GO 25636
25636: DISABLE
25637: LD_INT 0
25639: PPUSH
25640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25641: LD_ADDR_VAR 0 2
25645: PUSH
25646: LD_INT 22
25648: PUSH
25649: LD_OWVAR 2
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PUSH
25658: LD_INT 32
25660: PUSH
25661: LD_INT 1
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 21
25670: PUSH
25671: LD_INT 2
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: LIST
25682: PPUSH
25683: CALL_OW 69
25687: ST_TO_ADDR
// if not tmp then
25688: LD_VAR 0 2
25692: NOT
25693: IFFALSE 25697
// exit ;
25695: GO 25726
// for i in tmp do
25697: LD_ADDR_VAR 0 1
25701: PUSH
25702: LD_VAR 0 2
25706: PUSH
25707: FOR_IN
25708: IFFALSE 25724
// SetFuel ( i , 0 ) ;
25710: LD_VAR 0 1
25714: PPUSH
25715: LD_INT 0
25717: PPUSH
25718: CALL_OW 240
25722: GO 25707
25724: POP
25725: POP
// end ;
25726: PPOPN 2
25728: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25729: LD_EXP 52
25733: PUSH
25734: LD_EXP 88
25738: AND
25739: IFFALSE 25805
25741: GO 25743
25743: DISABLE
25744: LD_INT 0
25746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25747: LD_ADDR_VAR 0 1
25751: PUSH
25752: LD_INT 22
25754: PUSH
25755: LD_OWVAR 2
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 30
25766: PUSH
25767: LD_INT 29
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PPUSH
25778: CALL_OW 69
25782: ST_TO_ADDR
// if not tmp then
25783: LD_VAR 0 1
25787: NOT
25788: IFFALSE 25792
// exit ;
25790: GO 25805
// DestroyUnit ( tmp [ 1 ] ) ;
25792: LD_VAR 0 1
25796: PUSH
25797: LD_INT 1
25799: ARRAY
25800: PPUSH
25801: CALL_OW 65
// end ;
25805: PPOPN 1
25807: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25808: LD_EXP 52
25812: PUSH
25813: LD_EXP 90
25817: AND
25818: IFFALSE 25947
25820: GO 25822
25822: DISABLE
25823: LD_INT 0
25825: PPUSH
// begin uc_side := 0 ;
25826: LD_ADDR_OWVAR 20
25830: PUSH
25831: LD_INT 0
25833: ST_TO_ADDR
// uc_nation := nation_arabian ;
25834: LD_ADDR_OWVAR 21
25838: PUSH
25839: LD_INT 2
25841: ST_TO_ADDR
// hc_gallery :=  ;
25842: LD_ADDR_OWVAR 33
25846: PUSH
25847: LD_STRING 
25849: ST_TO_ADDR
// hc_name :=  ;
25850: LD_ADDR_OWVAR 26
25854: PUSH
25855: LD_STRING 
25857: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25858: LD_INT 1
25860: PPUSH
25861: LD_INT 11
25863: PPUSH
25864: LD_INT 10
25866: PPUSH
25867: CALL_OW 380
// un := CreateHuman ;
25871: LD_ADDR_VAR 0 1
25875: PUSH
25876: CALL_OW 44
25880: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25881: LD_VAR 0 1
25885: PPUSH
25886: LD_INT 1
25888: PPUSH
25889: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25893: LD_INT 35
25895: PPUSH
25896: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25900: LD_VAR 0 1
25904: PPUSH
25905: LD_INT 22
25907: PUSH
25908: LD_OWVAR 2
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PPUSH
25917: CALL_OW 69
25921: PPUSH
25922: LD_VAR 0 1
25926: PPUSH
25927: CALL_OW 74
25931: PPUSH
25932: CALL_OW 115
// until IsDead ( un ) ;
25936: LD_VAR 0 1
25940: PPUSH
25941: CALL_OW 301
25945: IFFALSE 25893
// end ;
25947: PPOPN 1
25949: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25950: LD_EXP 52
25954: PUSH
25955: LD_EXP 92
25959: AND
25960: IFFALSE 25972
25962: GO 25964
25964: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25965: LD_STRING earthquake(getX(game), 0, 32)
25967: PPUSH
25968: CALL_OW 559
25972: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25973: LD_EXP 52
25977: PUSH
25978: LD_EXP 93
25982: AND
25983: IFFALSE 26074
25985: GO 25987
25987: DISABLE
25988: LD_INT 0
25990: PPUSH
// begin enable ;
25991: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25992: LD_ADDR_VAR 0 1
25996: PUSH
25997: LD_INT 22
25999: PUSH
26000: LD_OWVAR 2
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 21
26011: PUSH
26012: LD_INT 2
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 33
26021: PUSH
26022: LD_INT 3
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: LIST
26033: PPUSH
26034: CALL_OW 69
26038: ST_TO_ADDR
// if not tmp then
26039: LD_VAR 0 1
26043: NOT
26044: IFFALSE 26048
// exit ;
26046: GO 26074
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26048: LD_VAR 0 1
26052: PUSH
26053: LD_INT 1
26055: PPUSH
26056: LD_VAR 0 1
26060: PPUSH
26061: CALL_OW 12
26065: ARRAY
26066: PPUSH
26067: LD_INT 1
26069: PPUSH
26070: CALL_OW 234
// end ;
26074: PPOPN 1
26076: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
26077: LD_EXP 52
26081: PUSH
26082: LD_EXP 94
26086: AND
26087: IFFALSE 26228
26089: GO 26091
26091: DISABLE
26092: LD_INT 0
26094: PPUSH
26095: PPUSH
26096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26097: LD_ADDR_VAR 0 3
26101: PUSH
26102: LD_INT 22
26104: PUSH
26105: LD_OWVAR 2
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 25
26116: PUSH
26117: LD_INT 1
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PPUSH
26128: CALL_OW 69
26132: ST_TO_ADDR
// if not tmp then
26133: LD_VAR 0 3
26137: NOT
26138: IFFALSE 26142
// exit ;
26140: GO 26228
// un := tmp [ rand ( 1 , tmp ) ] ;
26142: LD_ADDR_VAR 0 2
26146: PUSH
26147: LD_VAR 0 3
26151: PUSH
26152: LD_INT 1
26154: PPUSH
26155: LD_VAR 0 3
26159: PPUSH
26160: CALL_OW 12
26164: ARRAY
26165: ST_TO_ADDR
// if Crawls ( un ) then
26166: LD_VAR 0 2
26170: PPUSH
26171: CALL_OW 318
26175: IFFALSE 26186
// ComWalk ( un ) ;
26177: LD_VAR 0 2
26181: PPUSH
26182: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26186: LD_VAR 0 2
26190: PPUSH
26191: LD_INT 9
26193: PPUSH
26194: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
26198: LD_INT 28
26200: PPUSH
26201: LD_OWVAR 2
26205: PPUSH
26206: LD_INT 2
26208: PPUSH
26209: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
26213: LD_INT 29
26215: PPUSH
26216: LD_OWVAR 2
26220: PPUSH
26221: LD_INT 2
26223: PPUSH
26224: CALL_OW 322
// end ;
26228: PPOPN 3
26230: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
26231: LD_EXP 52
26235: PUSH
26236: LD_EXP 95
26240: AND
26241: IFFALSE 26352
26243: GO 26245
26245: DISABLE
26246: LD_INT 0
26248: PPUSH
26249: PPUSH
26250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26251: LD_ADDR_VAR 0 3
26255: PUSH
26256: LD_INT 22
26258: PUSH
26259: LD_OWVAR 2
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 25
26270: PUSH
26271: LD_INT 1
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PPUSH
26282: CALL_OW 69
26286: ST_TO_ADDR
// if not tmp then
26287: LD_VAR 0 3
26291: NOT
26292: IFFALSE 26296
// exit ;
26294: GO 26352
// un := tmp [ rand ( 1 , tmp ) ] ;
26296: LD_ADDR_VAR 0 2
26300: PUSH
26301: LD_VAR 0 3
26305: PUSH
26306: LD_INT 1
26308: PPUSH
26309: LD_VAR 0 3
26313: PPUSH
26314: CALL_OW 12
26318: ARRAY
26319: ST_TO_ADDR
// if Crawls ( un ) then
26320: LD_VAR 0 2
26324: PPUSH
26325: CALL_OW 318
26329: IFFALSE 26340
// ComWalk ( un ) ;
26331: LD_VAR 0 2
26335: PPUSH
26336: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26340: LD_VAR 0 2
26344: PPUSH
26345: LD_INT 8
26347: PPUSH
26348: CALL_OW 336
// end ;
26352: PPOPN 3
26354: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26355: LD_EXP 52
26359: PUSH
26360: LD_EXP 96
26364: AND
26365: IFFALSE 26509
26367: GO 26369
26369: DISABLE
26370: LD_INT 0
26372: PPUSH
26373: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26374: LD_ADDR_VAR 0 2
26378: PUSH
26379: LD_INT 22
26381: PUSH
26382: LD_OWVAR 2
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: LD_INT 21
26393: PUSH
26394: LD_INT 2
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: LD_INT 2
26403: PUSH
26404: LD_INT 34
26406: PUSH
26407: LD_INT 12
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 34
26416: PUSH
26417: LD_INT 51
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: LD_INT 34
26426: PUSH
26427: LD_INT 32
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: LIST
26444: PPUSH
26445: CALL_OW 69
26449: ST_TO_ADDR
// if not tmp then
26450: LD_VAR 0 2
26454: NOT
26455: IFFALSE 26459
// exit ;
26457: GO 26509
// for i in tmp do
26459: LD_ADDR_VAR 0 1
26463: PUSH
26464: LD_VAR 0 2
26468: PUSH
26469: FOR_IN
26470: IFFALSE 26507
// if GetCargo ( i , mat_artifact ) = 0 then
26472: LD_VAR 0 1
26476: PPUSH
26477: LD_INT 4
26479: PPUSH
26480: CALL_OW 289
26484: PUSH
26485: LD_INT 0
26487: EQUAL
26488: IFFALSE 26505
// SetCargo ( i , mat_siberit , 100 ) ;
26490: LD_VAR 0 1
26494: PPUSH
26495: LD_INT 3
26497: PPUSH
26498: LD_INT 100
26500: PPUSH
26501: CALL_OW 290
26505: GO 26469
26507: POP
26508: POP
// end ;
26509: PPOPN 2
26511: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26512: LD_EXP 52
26516: PUSH
26517: LD_EXP 97
26521: AND
26522: IFFALSE 26705
26524: GO 26526
26526: DISABLE
26527: LD_INT 0
26529: PPUSH
26530: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26531: LD_ADDR_VAR 0 2
26535: PUSH
26536: LD_INT 22
26538: PUSH
26539: LD_OWVAR 2
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PPUSH
26548: CALL_OW 69
26552: ST_TO_ADDR
// if not tmp then
26553: LD_VAR 0 2
26557: NOT
26558: IFFALSE 26562
// exit ;
26560: GO 26705
// for i := 1 to 2 do
26562: LD_ADDR_VAR 0 1
26566: PUSH
26567: DOUBLE
26568: LD_INT 1
26570: DEC
26571: ST_TO_ADDR
26572: LD_INT 2
26574: PUSH
26575: FOR_TO
26576: IFFALSE 26703
// begin uc_side := your_side ;
26578: LD_ADDR_OWVAR 20
26582: PUSH
26583: LD_OWVAR 2
26587: ST_TO_ADDR
// uc_nation := nation_american ;
26588: LD_ADDR_OWVAR 21
26592: PUSH
26593: LD_INT 1
26595: ST_TO_ADDR
// vc_chassis := us_morphling ;
26596: LD_ADDR_OWVAR 37
26600: PUSH
26601: LD_INT 5
26603: ST_TO_ADDR
// vc_engine := engine_siberite ;
26604: LD_ADDR_OWVAR 39
26608: PUSH
26609: LD_INT 3
26611: ST_TO_ADDR
// vc_control := control_computer ;
26612: LD_ADDR_OWVAR 38
26616: PUSH
26617: LD_INT 3
26619: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26620: LD_ADDR_OWVAR 40
26624: PUSH
26625: LD_INT 10
26627: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26628: LD_VAR 0 2
26632: PUSH
26633: LD_INT 1
26635: ARRAY
26636: PPUSH
26637: CALL_OW 310
26641: NOT
26642: IFFALSE 26689
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26644: CALL_OW 45
26648: PPUSH
26649: LD_VAR 0 2
26653: PUSH
26654: LD_INT 1
26656: ARRAY
26657: PPUSH
26658: CALL_OW 250
26662: PPUSH
26663: LD_VAR 0 2
26667: PUSH
26668: LD_INT 1
26670: ARRAY
26671: PPUSH
26672: CALL_OW 251
26676: PPUSH
26677: LD_INT 12
26679: PPUSH
26680: LD_INT 1
26682: PPUSH
26683: CALL_OW 50
26687: GO 26701
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26689: CALL_OW 45
26693: PPUSH
26694: LD_INT 1
26696: PPUSH
26697: CALL_OW 51
// end ;
26701: GO 26575
26703: POP
26704: POP
// end ;
26705: PPOPN 2
26707: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26708: LD_EXP 52
26712: PUSH
26713: LD_EXP 98
26717: AND
26718: IFFALSE 26940
26720: GO 26722
26722: DISABLE
26723: LD_INT 0
26725: PPUSH
26726: PPUSH
26727: PPUSH
26728: PPUSH
26729: PPUSH
26730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26731: LD_ADDR_VAR 0 6
26735: PUSH
26736: LD_INT 22
26738: PUSH
26739: LD_OWVAR 2
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: LD_INT 21
26750: PUSH
26751: LD_INT 1
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: LD_INT 3
26760: PUSH
26761: LD_INT 23
26763: PUSH
26764: LD_INT 0
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: LIST
26779: PPUSH
26780: CALL_OW 69
26784: ST_TO_ADDR
// if not tmp then
26785: LD_VAR 0 6
26789: NOT
26790: IFFALSE 26794
// exit ;
26792: GO 26940
// s1 := rand ( 1 , 4 ) ;
26794: LD_ADDR_VAR 0 2
26798: PUSH
26799: LD_INT 1
26801: PPUSH
26802: LD_INT 4
26804: PPUSH
26805: CALL_OW 12
26809: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26810: LD_ADDR_VAR 0 4
26814: PUSH
26815: LD_VAR 0 6
26819: PUSH
26820: LD_INT 1
26822: ARRAY
26823: PPUSH
26824: LD_VAR 0 2
26828: PPUSH
26829: CALL_OW 259
26833: ST_TO_ADDR
// if s1 = 1 then
26834: LD_VAR 0 2
26838: PUSH
26839: LD_INT 1
26841: EQUAL
26842: IFFALSE 26862
// s2 := rand ( 2 , 4 ) else
26844: LD_ADDR_VAR 0 3
26848: PUSH
26849: LD_INT 2
26851: PPUSH
26852: LD_INT 4
26854: PPUSH
26855: CALL_OW 12
26859: ST_TO_ADDR
26860: GO 26870
// s2 := 1 ;
26862: LD_ADDR_VAR 0 3
26866: PUSH
26867: LD_INT 1
26869: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26870: LD_ADDR_VAR 0 5
26874: PUSH
26875: LD_VAR 0 6
26879: PUSH
26880: LD_INT 1
26882: ARRAY
26883: PPUSH
26884: LD_VAR 0 3
26888: PPUSH
26889: CALL_OW 259
26893: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26894: LD_VAR 0 6
26898: PUSH
26899: LD_INT 1
26901: ARRAY
26902: PPUSH
26903: LD_VAR 0 2
26907: PPUSH
26908: LD_VAR 0 5
26912: PPUSH
26913: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26917: LD_VAR 0 6
26921: PUSH
26922: LD_INT 1
26924: ARRAY
26925: PPUSH
26926: LD_VAR 0 3
26930: PPUSH
26931: LD_VAR 0 4
26935: PPUSH
26936: CALL_OW 237
// end ;
26940: PPOPN 6
26942: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26943: LD_EXP 52
26947: PUSH
26948: LD_EXP 99
26952: AND
26953: IFFALSE 27032
26955: GO 26957
26957: DISABLE
26958: LD_INT 0
26960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26961: LD_ADDR_VAR 0 1
26965: PUSH
26966: LD_INT 22
26968: PUSH
26969: LD_OWVAR 2
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 30
26980: PUSH
26981: LD_INT 3
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PPUSH
26992: CALL_OW 69
26996: ST_TO_ADDR
// if not tmp then
26997: LD_VAR 0 1
27001: NOT
27002: IFFALSE 27006
// exit ;
27004: GO 27032
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27006: LD_VAR 0 1
27010: PUSH
27011: LD_INT 1
27013: PPUSH
27014: LD_VAR 0 1
27018: PPUSH
27019: CALL_OW 12
27023: ARRAY
27024: PPUSH
27025: LD_INT 1
27027: PPUSH
27028: CALL_OW 234
// end ;
27032: PPOPN 1
27034: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27035: LD_EXP 52
27039: PUSH
27040: LD_EXP 100
27044: AND
27045: IFFALSE 27157
27047: GO 27049
27049: DISABLE
27050: LD_INT 0
27052: PPUSH
27053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27054: LD_ADDR_VAR 0 2
27058: PUSH
27059: LD_INT 22
27061: PUSH
27062: LD_OWVAR 2
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 2
27073: PUSH
27074: LD_INT 30
27076: PUSH
27077: LD_INT 27
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 30
27086: PUSH
27087: LD_INT 26
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: LD_INT 30
27096: PUSH
27097: LD_INT 28
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PPUSH
27114: CALL_OW 69
27118: ST_TO_ADDR
// if not tmp then
27119: LD_VAR 0 2
27123: NOT
27124: IFFALSE 27128
// exit ;
27126: GO 27157
// for i in tmp do
27128: LD_ADDR_VAR 0 1
27132: PUSH
27133: LD_VAR 0 2
27137: PUSH
27138: FOR_IN
27139: IFFALSE 27155
// SetLives ( i , 1 ) ;
27141: LD_VAR 0 1
27145: PPUSH
27146: LD_INT 1
27148: PPUSH
27149: CALL_OW 234
27153: GO 27138
27155: POP
27156: POP
// end ;
27157: PPOPN 2
27159: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
27160: LD_EXP 52
27164: PUSH
27165: LD_EXP 101
27169: AND
27170: IFFALSE 27444
27172: GO 27174
27174: DISABLE
27175: LD_INT 0
27177: PPUSH
27178: PPUSH
27179: PPUSH
// begin i := rand ( 1 , 7 ) ;
27180: LD_ADDR_VAR 0 1
27184: PUSH
27185: LD_INT 1
27187: PPUSH
27188: LD_INT 7
27190: PPUSH
27191: CALL_OW 12
27195: ST_TO_ADDR
// case i of 1 :
27196: LD_VAR 0 1
27200: PUSH
27201: LD_INT 1
27203: DOUBLE
27204: EQUAL
27205: IFTRUE 27209
27207: GO 27219
27209: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
27210: LD_STRING earthquake(getX(game), 0, 32)
27212: PPUSH
27213: CALL_OW 559
27217: GO 27444
27219: LD_INT 2
27221: DOUBLE
27222: EQUAL
27223: IFTRUE 27227
27225: GO 27241
27227: POP
// begin ToLua ( displayStucuk(); ) ;
27228: LD_STRING displayStucuk();
27230: PPUSH
27231: CALL_OW 559
// ResetFog ;
27235: CALL_OW 335
// end ; 3 :
27239: GO 27444
27241: LD_INT 3
27243: DOUBLE
27244: EQUAL
27245: IFTRUE 27249
27247: GO 27353
27249: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27250: LD_ADDR_VAR 0 2
27254: PUSH
27255: LD_INT 22
27257: PUSH
27258: LD_OWVAR 2
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 25
27269: PUSH
27270: LD_INT 1
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PPUSH
27281: CALL_OW 69
27285: ST_TO_ADDR
// if not tmp then
27286: LD_VAR 0 2
27290: NOT
27291: IFFALSE 27295
// exit ;
27293: GO 27444
// un := tmp [ rand ( 1 , tmp ) ] ;
27295: LD_ADDR_VAR 0 3
27299: PUSH
27300: LD_VAR 0 2
27304: PUSH
27305: LD_INT 1
27307: PPUSH
27308: LD_VAR 0 2
27312: PPUSH
27313: CALL_OW 12
27317: ARRAY
27318: ST_TO_ADDR
// if Crawls ( un ) then
27319: LD_VAR 0 3
27323: PPUSH
27324: CALL_OW 318
27328: IFFALSE 27339
// ComWalk ( un ) ;
27330: LD_VAR 0 3
27334: PPUSH
27335: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27339: LD_VAR 0 3
27343: PPUSH
27344: LD_INT 8
27346: PPUSH
27347: CALL_OW 336
// end ; 4 :
27351: GO 27444
27353: LD_INT 4
27355: DOUBLE
27356: EQUAL
27357: IFTRUE 27361
27359: GO 27422
27361: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27362: LD_ADDR_VAR 0 2
27366: PUSH
27367: LD_INT 22
27369: PUSH
27370: LD_OWVAR 2
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: LD_INT 30
27381: PUSH
27382: LD_INT 29
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PPUSH
27393: CALL_OW 69
27397: ST_TO_ADDR
// if not tmp then
27398: LD_VAR 0 2
27402: NOT
27403: IFFALSE 27407
// exit ;
27405: GO 27444
// DestroyUnit ( tmp [ 1 ] ) ;
27407: LD_VAR 0 2
27411: PUSH
27412: LD_INT 1
27414: ARRAY
27415: PPUSH
27416: CALL_OW 65
// end ; 5 .. 7 :
27420: GO 27444
27422: LD_INT 5
27424: DOUBLE
27425: GREATEREQUAL
27426: IFFALSE 27434
27428: LD_INT 7
27430: DOUBLE
27431: LESSEQUAL
27432: IFTRUE 27436
27434: GO 27443
27436: POP
// StreamSibBomb ; end ;
27437: CALL 23694 0 0
27441: GO 27444
27443: POP
// end ;
27444: PPOPN 3
27446: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27447: LD_EXP 52
27451: PUSH
27452: LD_EXP 102
27456: AND
27457: IFFALSE 27613
27459: GO 27461
27461: DISABLE
27462: LD_INT 0
27464: PPUSH
27465: PPUSH
27466: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27467: LD_ADDR_VAR 0 2
27471: PUSH
27472: LD_INT 81
27474: PUSH
27475: LD_OWVAR 2
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 2
27486: PUSH
27487: LD_INT 21
27489: PUSH
27490: LD_INT 1
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 21
27499: PUSH
27500: LD_INT 2
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: LIST
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PPUSH
27516: CALL_OW 69
27520: ST_TO_ADDR
// if not tmp then
27521: LD_VAR 0 2
27525: NOT
27526: IFFALSE 27530
// exit ;
27528: GO 27613
// p := 0 ;
27530: LD_ADDR_VAR 0 3
27534: PUSH
27535: LD_INT 0
27537: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27538: LD_INT 35
27540: PPUSH
27541: CALL_OW 67
// p := p + 1 ;
27545: LD_ADDR_VAR 0 3
27549: PUSH
27550: LD_VAR 0 3
27554: PUSH
27555: LD_INT 1
27557: PLUS
27558: ST_TO_ADDR
// for i in tmp do
27559: LD_ADDR_VAR 0 1
27563: PUSH
27564: LD_VAR 0 2
27568: PUSH
27569: FOR_IN
27570: IFFALSE 27601
// if GetLives ( i ) < 1000 then
27572: LD_VAR 0 1
27576: PPUSH
27577: CALL_OW 256
27581: PUSH
27582: LD_INT 1000
27584: LESS
27585: IFFALSE 27599
// SetLives ( i , 1000 ) ;
27587: LD_VAR 0 1
27591: PPUSH
27592: LD_INT 1000
27594: PPUSH
27595: CALL_OW 234
27599: GO 27569
27601: POP
27602: POP
// until p > 20 ;
27603: LD_VAR 0 3
27607: PUSH
27608: LD_INT 20
27610: GREATER
27611: IFFALSE 27538
// end ;
27613: PPOPN 3
27615: END
// every 0 0$1 trigger StreamModeActive and sTime do
27616: LD_EXP 52
27620: PUSH
27621: LD_EXP 103
27625: AND
27626: IFFALSE 27661
27628: GO 27630
27630: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27631: LD_INT 28
27633: PPUSH
27634: LD_OWVAR 2
27638: PPUSH
27639: LD_INT 2
27641: PPUSH
27642: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27646: LD_INT 30
27648: PPUSH
27649: LD_OWVAR 2
27653: PPUSH
27654: LD_INT 2
27656: PPUSH
27657: CALL_OW 322
// end ;
27661: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27662: LD_EXP 52
27666: PUSH
27667: LD_EXP 104
27671: AND
27672: IFFALSE 27793
27674: GO 27676
27676: DISABLE
27677: LD_INT 0
27679: PPUSH
27680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27681: LD_ADDR_VAR 0 2
27685: PUSH
27686: LD_INT 22
27688: PUSH
27689: LD_OWVAR 2
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 21
27700: PUSH
27701: LD_INT 1
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 3
27710: PUSH
27711: LD_INT 23
27713: PUSH
27714: LD_INT 0
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: LIST
27729: PPUSH
27730: CALL_OW 69
27734: ST_TO_ADDR
// if not tmp then
27735: LD_VAR 0 2
27739: NOT
27740: IFFALSE 27744
// exit ;
27742: GO 27793
// for i in tmp do
27744: LD_ADDR_VAR 0 1
27748: PUSH
27749: LD_VAR 0 2
27753: PUSH
27754: FOR_IN
27755: IFFALSE 27791
// begin if Crawls ( i ) then
27757: LD_VAR 0 1
27761: PPUSH
27762: CALL_OW 318
27766: IFFALSE 27777
// ComWalk ( i ) ;
27768: LD_VAR 0 1
27772: PPUSH
27773: CALL_OW 138
// SetClass ( i , 2 ) ;
27777: LD_VAR 0 1
27781: PPUSH
27782: LD_INT 2
27784: PPUSH
27785: CALL_OW 336
// end ;
27789: GO 27754
27791: POP
27792: POP
// end ;
27793: PPOPN 2
27795: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27796: LD_EXP 52
27800: PUSH
27801: LD_EXP 105
27805: AND
27806: IFFALSE 28087
27808: GO 27810
27810: DISABLE
27811: LD_INT 0
27813: PPUSH
27814: PPUSH
27815: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27816: LD_OWVAR 2
27820: PPUSH
27821: LD_INT 9
27823: PPUSH
27824: LD_INT 1
27826: PPUSH
27827: LD_INT 1
27829: PPUSH
27830: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27834: LD_INT 9
27836: PPUSH
27837: LD_OWVAR 2
27841: PPUSH
27842: CALL_OW 343
// uc_side := 9 ;
27846: LD_ADDR_OWVAR 20
27850: PUSH
27851: LD_INT 9
27853: ST_TO_ADDR
// uc_nation := 2 ;
27854: LD_ADDR_OWVAR 21
27858: PUSH
27859: LD_INT 2
27861: ST_TO_ADDR
// hc_name := Dark Warrior ;
27862: LD_ADDR_OWVAR 26
27866: PUSH
27867: LD_STRING Dark Warrior
27869: ST_TO_ADDR
// hc_gallery :=  ;
27870: LD_ADDR_OWVAR 33
27874: PUSH
27875: LD_STRING 
27877: ST_TO_ADDR
// hc_noskilllimit := true ;
27878: LD_ADDR_OWVAR 76
27882: PUSH
27883: LD_INT 1
27885: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27886: LD_ADDR_OWVAR 31
27890: PUSH
27891: LD_INT 30
27893: PUSH
27894: LD_INT 30
27896: PUSH
27897: LD_INT 30
27899: PUSH
27900: LD_INT 30
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: ST_TO_ADDR
// un := CreateHuman ;
27909: LD_ADDR_VAR 0 3
27913: PUSH
27914: CALL_OW 44
27918: ST_TO_ADDR
// hc_noskilllimit := false ;
27919: LD_ADDR_OWVAR 76
27923: PUSH
27924: LD_INT 0
27926: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27927: LD_VAR 0 3
27931: PPUSH
27932: LD_INT 1
27934: PPUSH
27935: CALL_OW 51
// p := 0 ;
27939: LD_ADDR_VAR 0 2
27943: PUSH
27944: LD_INT 0
27946: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27947: LD_INT 35
27949: PPUSH
27950: CALL_OW 67
// p := p + 1 ;
27954: LD_ADDR_VAR 0 2
27958: PUSH
27959: LD_VAR 0 2
27963: PUSH
27964: LD_INT 1
27966: PLUS
27967: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27968: LD_VAR 0 3
27972: PPUSH
27973: CALL_OW 256
27977: PUSH
27978: LD_INT 1000
27980: LESS
27981: IFFALSE 27995
// SetLives ( un , 1000 ) ;
27983: LD_VAR 0 3
27987: PPUSH
27988: LD_INT 1000
27990: PPUSH
27991: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27995: LD_VAR 0 3
27999: PPUSH
28000: LD_INT 81
28002: PUSH
28003: LD_OWVAR 2
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 91
28014: PUSH
28015: LD_VAR 0 3
28019: PUSH
28020: LD_INT 30
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: LIST
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PPUSH
28032: CALL_OW 69
28036: PPUSH
28037: LD_VAR 0 3
28041: PPUSH
28042: CALL_OW 74
28046: PPUSH
28047: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
28051: LD_VAR 0 2
28055: PUSH
28056: LD_INT 60
28058: GREATER
28059: PUSH
28060: LD_VAR 0 3
28064: PPUSH
28065: CALL_OW 301
28069: OR
28070: IFFALSE 27947
// if un then
28072: LD_VAR 0 3
28076: IFFALSE 28087
// RemoveUnit ( un ) ;
28078: LD_VAR 0 3
28082: PPUSH
28083: CALL_OW 64
// end ;
28087: PPOPN 3
28089: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28090: LD_INT 0
28092: PPUSH
// case cmd of 301 :
28093: LD_VAR 0 1
28097: PUSH
28098: LD_INT 301
28100: DOUBLE
28101: EQUAL
28102: IFTRUE 28106
28104: GO 28138
28106: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28107: LD_VAR 0 6
28111: PPUSH
28112: LD_VAR 0 7
28116: PPUSH
28117: LD_VAR 0 8
28121: PPUSH
28122: LD_VAR 0 4
28126: PPUSH
28127: LD_VAR 0 5
28131: PPUSH
28132: CALL 29339 0 5
28136: GO 28259
28138: LD_INT 302
28140: DOUBLE
28141: EQUAL
28142: IFTRUE 28146
28144: GO 28183
28146: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28147: LD_VAR 0 6
28151: PPUSH
28152: LD_VAR 0 7
28156: PPUSH
28157: LD_VAR 0 8
28161: PPUSH
28162: LD_VAR 0 9
28166: PPUSH
28167: LD_VAR 0 4
28171: PPUSH
28172: LD_VAR 0 5
28176: PPUSH
28177: CALL 29430 0 6
28181: GO 28259
28183: LD_INT 303
28185: DOUBLE
28186: EQUAL
28187: IFTRUE 28191
28189: GO 28228
28191: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28192: LD_VAR 0 6
28196: PPUSH
28197: LD_VAR 0 7
28201: PPUSH
28202: LD_VAR 0 8
28206: PPUSH
28207: LD_VAR 0 9
28211: PPUSH
28212: LD_VAR 0 4
28216: PPUSH
28217: LD_VAR 0 5
28221: PPUSH
28222: CALL 28264 0 6
28226: GO 28259
28228: LD_INT 304
28230: DOUBLE
28231: EQUAL
28232: IFTRUE 28236
28234: GO 28258
28236: POP
// hHackTeleport ( unit , x , y ) ; end ;
28237: LD_VAR 0 2
28241: PPUSH
28242: LD_VAR 0 4
28246: PPUSH
28247: LD_VAR 0 5
28251: PPUSH
28252: CALL 30023 0 3
28256: GO 28259
28258: POP
// end ;
28259: LD_VAR 0 12
28263: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28264: LD_INT 0
28266: PPUSH
28267: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28268: LD_VAR 0 1
28272: PUSH
28273: LD_INT 1
28275: LESS
28276: PUSH
28277: LD_VAR 0 1
28281: PUSH
28282: LD_INT 3
28284: GREATER
28285: OR
28286: PUSH
28287: LD_VAR 0 5
28291: PPUSH
28292: LD_VAR 0 6
28296: PPUSH
28297: CALL_OW 428
28301: OR
28302: IFFALSE 28306
// exit ;
28304: GO 29026
// uc_side := your_side ;
28306: LD_ADDR_OWVAR 20
28310: PUSH
28311: LD_OWVAR 2
28315: ST_TO_ADDR
// uc_nation := nation ;
28316: LD_ADDR_OWVAR 21
28320: PUSH
28321: LD_VAR 0 1
28325: ST_TO_ADDR
// bc_level = 1 ;
28326: LD_ADDR_OWVAR 43
28330: PUSH
28331: LD_INT 1
28333: ST_TO_ADDR
// case btype of 1 :
28334: LD_VAR 0 2
28338: PUSH
28339: LD_INT 1
28341: DOUBLE
28342: EQUAL
28343: IFTRUE 28347
28345: GO 28358
28347: POP
// bc_type := b_depot ; 2 :
28348: LD_ADDR_OWVAR 42
28352: PUSH
28353: LD_INT 0
28355: ST_TO_ADDR
28356: GO 28970
28358: LD_INT 2
28360: DOUBLE
28361: EQUAL
28362: IFTRUE 28366
28364: GO 28377
28366: POP
// bc_type := b_warehouse ; 3 :
28367: LD_ADDR_OWVAR 42
28371: PUSH
28372: LD_INT 1
28374: ST_TO_ADDR
28375: GO 28970
28377: LD_INT 3
28379: DOUBLE
28380: EQUAL
28381: IFTRUE 28385
28383: GO 28396
28385: POP
// bc_type := b_lab ; 4 .. 9 :
28386: LD_ADDR_OWVAR 42
28390: PUSH
28391: LD_INT 6
28393: ST_TO_ADDR
28394: GO 28970
28396: LD_INT 4
28398: DOUBLE
28399: GREATEREQUAL
28400: IFFALSE 28408
28402: LD_INT 9
28404: DOUBLE
28405: LESSEQUAL
28406: IFTRUE 28410
28408: GO 28462
28410: POP
// begin bc_type := b_lab_half ;
28411: LD_ADDR_OWVAR 42
28415: PUSH
28416: LD_INT 7
28418: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28419: LD_ADDR_OWVAR 44
28423: PUSH
28424: LD_INT 10
28426: PUSH
28427: LD_INT 11
28429: PUSH
28430: LD_INT 12
28432: PUSH
28433: LD_INT 15
28435: PUSH
28436: LD_INT 14
28438: PUSH
28439: LD_INT 13
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: PUSH
28450: LD_VAR 0 2
28454: PUSH
28455: LD_INT 3
28457: MINUS
28458: ARRAY
28459: ST_TO_ADDR
// end ; 10 .. 13 :
28460: GO 28970
28462: LD_INT 10
28464: DOUBLE
28465: GREATEREQUAL
28466: IFFALSE 28474
28468: LD_INT 13
28470: DOUBLE
28471: LESSEQUAL
28472: IFTRUE 28476
28474: GO 28553
28476: POP
// begin bc_type := b_lab_full ;
28477: LD_ADDR_OWVAR 42
28481: PUSH
28482: LD_INT 8
28484: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28485: LD_ADDR_OWVAR 44
28489: PUSH
28490: LD_INT 10
28492: PUSH
28493: LD_INT 12
28495: PUSH
28496: LD_INT 14
28498: PUSH
28499: LD_INT 13
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: PUSH
28508: LD_VAR 0 2
28512: PUSH
28513: LD_INT 9
28515: MINUS
28516: ARRAY
28517: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28518: LD_ADDR_OWVAR 45
28522: PUSH
28523: LD_INT 11
28525: PUSH
28526: LD_INT 15
28528: PUSH
28529: LD_INT 12
28531: PUSH
28532: LD_INT 15
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: PUSH
28541: LD_VAR 0 2
28545: PUSH
28546: LD_INT 9
28548: MINUS
28549: ARRAY
28550: ST_TO_ADDR
// end ; 14 :
28551: GO 28970
28553: LD_INT 14
28555: DOUBLE
28556: EQUAL
28557: IFTRUE 28561
28559: GO 28572
28561: POP
// bc_type := b_workshop ; 15 :
28562: LD_ADDR_OWVAR 42
28566: PUSH
28567: LD_INT 2
28569: ST_TO_ADDR
28570: GO 28970
28572: LD_INT 15
28574: DOUBLE
28575: EQUAL
28576: IFTRUE 28580
28578: GO 28591
28580: POP
// bc_type := b_factory ; 16 :
28581: LD_ADDR_OWVAR 42
28585: PUSH
28586: LD_INT 3
28588: ST_TO_ADDR
28589: GO 28970
28591: LD_INT 16
28593: DOUBLE
28594: EQUAL
28595: IFTRUE 28599
28597: GO 28610
28599: POP
// bc_type := b_ext_gun ; 17 :
28600: LD_ADDR_OWVAR 42
28604: PUSH
28605: LD_INT 17
28607: ST_TO_ADDR
28608: GO 28970
28610: LD_INT 17
28612: DOUBLE
28613: EQUAL
28614: IFTRUE 28618
28616: GO 28646
28618: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28619: LD_ADDR_OWVAR 42
28623: PUSH
28624: LD_INT 19
28626: PUSH
28627: LD_INT 23
28629: PUSH
28630: LD_INT 19
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: LIST
28637: PUSH
28638: LD_VAR 0 1
28642: ARRAY
28643: ST_TO_ADDR
28644: GO 28970
28646: LD_INT 18
28648: DOUBLE
28649: EQUAL
28650: IFTRUE 28654
28652: GO 28665
28654: POP
// bc_type := b_ext_radar ; 19 :
28655: LD_ADDR_OWVAR 42
28659: PUSH
28660: LD_INT 20
28662: ST_TO_ADDR
28663: GO 28970
28665: LD_INT 19
28667: DOUBLE
28668: EQUAL
28669: IFTRUE 28673
28671: GO 28684
28673: POP
// bc_type := b_ext_radio ; 20 :
28674: LD_ADDR_OWVAR 42
28678: PUSH
28679: LD_INT 22
28681: ST_TO_ADDR
28682: GO 28970
28684: LD_INT 20
28686: DOUBLE
28687: EQUAL
28688: IFTRUE 28692
28690: GO 28703
28692: POP
// bc_type := b_ext_siberium ; 21 :
28693: LD_ADDR_OWVAR 42
28697: PUSH
28698: LD_INT 21
28700: ST_TO_ADDR
28701: GO 28970
28703: LD_INT 21
28705: DOUBLE
28706: EQUAL
28707: IFTRUE 28711
28709: GO 28722
28711: POP
// bc_type := b_ext_computer ; 22 :
28712: LD_ADDR_OWVAR 42
28716: PUSH
28717: LD_INT 24
28719: ST_TO_ADDR
28720: GO 28970
28722: LD_INT 22
28724: DOUBLE
28725: EQUAL
28726: IFTRUE 28730
28728: GO 28741
28730: POP
// bc_type := b_ext_track ; 23 :
28731: LD_ADDR_OWVAR 42
28735: PUSH
28736: LD_INT 16
28738: ST_TO_ADDR
28739: GO 28970
28741: LD_INT 23
28743: DOUBLE
28744: EQUAL
28745: IFTRUE 28749
28747: GO 28760
28749: POP
// bc_type := b_ext_laser ; 24 :
28750: LD_ADDR_OWVAR 42
28754: PUSH
28755: LD_INT 25
28757: ST_TO_ADDR
28758: GO 28970
28760: LD_INT 24
28762: DOUBLE
28763: EQUAL
28764: IFTRUE 28768
28766: GO 28779
28768: POP
// bc_type := b_control_tower ; 25 :
28769: LD_ADDR_OWVAR 42
28773: PUSH
28774: LD_INT 36
28776: ST_TO_ADDR
28777: GO 28970
28779: LD_INT 25
28781: DOUBLE
28782: EQUAL
28783: IFTRUE 28787
28785: GO 28798
28787: POP
// bc_type := b_breastwork ; 26 :
28788: LD_ADDR_OWVAR 42
28792: PUSH
28793: LD_INT 31
28795: ST_TO_ADDR
28796: GO 28970
28798: LD_INT 26
28800: DOUBLE
28801: EQUAL
28802: IFTRUE 28806
28804: GO 28817
28806: POP
// bc_type := b_bunker ; 27 :
28807: LD_ADDR_OWVAR 42
28811: PUSH
28812: LD_INT 32
28814: ST_TO_ADDR
28815: GO 28970
28817: LD_INT 27
28819: DOUBLE
28820: EQUAL
28821: IFTRUE 28825
28823: GO 28836
28825: POP
// bc_type := b_turret ; 28 :
28826: LD_ADDR_OWVAR 42
28830: PUSH
28831: LD_INT 33
28833: ST_TO_ADDR
28834: GO 28970
28836: LD_INT 28
28838: DOUBLE
28839: EQUAL
28840: IFTRUE 28844
28842: GO 28855
28844: POP
// bc_type := b_armoury ; 29 :
28845: LD_ADDR_OWVAR 42
28849: PUSH
28850: LD_INT 4
28852: ST_TO_ADDR
28853: GO 28970
28855: LD_INT 29
28857: DOUBLE
28858: EQUAL
28859: IFTRUE 28863
28861: GO 28874
28863: POP
// bc_type := b_barracks ; 30 :
28864: LD_ADDR_OWVAR 42
28868: PUSH
28869: LD_INT 5
28871: ST_TO_ADDR
28872: GO 28970
28874: LD_INT 30
28876: DOUBLE
28877: EQUAL
28878: IFTRUE 28882
28880: GO 28893
28882: POP
// bc_type := b_solar_power ; 31 :
28883: LD_ADDR_OWVAR 42
28887: PUSH
28888: LD_INT 27
28890: ST_TO_ADDR
28891: GO 28970
28893: LD_INT 31
28895: DOUBLE
28896: EQUAL
28897: IFTRUE 28901
28899: GO 28912
28901: POP
// bc_type := b_oil_power ; 32 :
28902: LD_ADDR_OWVAR 42
28906: PUSH
28907: LD_INT 26
28909: ST_TO_ADDR
28910: GO 28970
28912: LD_INT 32
28914: DOUBLE
28915: EQUAL
28916: IFTRUE 28920
28918: GO 28931
28920: POP
// bc_type := b_siberite_power ; 33 :
28921: LD_ADDR_OWVAR 42
28925: PUSH
28926: LD_INT 28
28928: ST_TO_ADDR
28929: GO 28970
28931: LD_INT 33
28933: DOUBLE
28934: EQUAL
28935: IFTRUE 28939
28937: GO 28950
28939: POP
// bc_type := b_oil_mine ; 34 :
28940: LD_ADDR_OWVAR 42
28944: PUSH
28945: LD_INT 29
28947: ST_TO_ADDR
28948: GO 28970
28950: LD_INT 34
28952: DOUBLE
28953: EQUAL
28954: IFTRUE 28958
28956: GO 28969
28958: POP
// bc_type := b_siberite_mine ; end ;
28959: LD_ADDR_OWVAR 42
28963: PUSH
28964: LD_INT 30
28966: ST_TO_ADDR
28967: GO 28970
28969: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28970: LD_ADDR_VAR 0 8
28974: PUSH
28975: LD_VAR 0 5
28979: PPUSH
28980: LD_VAR 0 6
28984: PPUSH
28985: LD_VAR 0 3
28989: PPUSH
28990: CALL_OW 47
28994: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28995: LD_OWVAR 42
28999: PUSH
29000: LD_INT 32
29002: PUSH
29003: LD_INT 33
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: IN
29010: IFFALSE 29026
// PlaceWeaponTurret ( b , weapon ) ;
29012: LD_VAR 0 8
29016: PPUSH
29017: LD_VAR 0 4
29021: PPUSH
29022: CALL_OW 431
// end ;
29026: LD_VAR 0 7
29030: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29031: LD_INT 0
29033: PPUSH
29034: PPUSH
29035: PPUSH
29036: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29037: LD_ADDR_VAR 0 4
29041: PUSH
29042: LD_INT 22
29044: PUSH
29045: LD_OWVAR 2
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 2
29056: PUSH
29057: LD_INT 30
29059: PUSH
29060: LD_INT 0
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 30
29069: PUSH
29070: LD_INT 1
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: LIST
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PPUSH
29086: CALL_OW 69
29090: ST_TO_ADDR
// if not tmp then
29091: LD_VAR 0 4
29095: NOT
29096: IFFALSE 29100
// exit ;
29098: GO 29159
// for i in tmp do
29100: LD_ADDR_VAR 0 2
29104: PUSH
29105: LD_VAR 0 4
29109: PUSH
29110: FOR_IN
29111: IFFALSE 29157
// for j = 1 to 3 do
29113: LD_ADDR_VAR 0 3
29117: PUSH
29118: DOUBLE
29119: LD_INT 1
29121: DEC
29122: ST_TO_ADDR
29123: LD_INT 3
29125: PUSH
29126: FOR_TO
29127: IFFALSE 29153
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29129: LD_VAR 0 2
29133: PPUSH
29134: CALL_OW 274
29138: PPUSH
29139: LD_VAR 0 3
29143: PPUSH
29144: LD_INT 99999
29146: PPUSH
29147: CALL_OW 277
29151: GO 29126
29153: POP
29154: POP
29155: GO 29110
29157: POP
29158: POP
// end ;
29159: LD_VAR 0 1
29163: RET
// export function hHackSetLevel10 ; var i , j ; begin
29164: LD_INT 0
29166: PPUSH
29167: PPUSH
29168: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29169: LD_ADDR_VAR 0 2
29173: PUSH
29174: LD_INT 21
29176: PUSH
29177: LD_INT 1
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PPUSH
29184: CALL_OW 69
29188: PUSH
29189: FOR_IN
29190: IFFALSE 29242
// if IsSelected ( i ) then
29192: LD_VAR 0 2
29196: PPUSH
29197: CALL_OW 306
29201: IFFALSE 29240
// begin for j := 1 to 4 do
29203: LD_ADDR_VAR 0 3
29207: PUSH
29208: DOUBLE
29209: LD_INT 1
29211: DEC
29212: ST_TO_ADDR
29213: LD_INT 4
29215: PUSH
29216: FOR_TO
29217: IFFALSE 29238
// SetSkill ( i , j , 10 ) ;
29219: LD_VAR 0 2
29223: PPUSH
29224: LD_VAR 0 3
29228: PPUSH
29229: LD_INT 10
29231: PPUSH
29232: CALL_OW 237
29236: GO 29216
29238: POP
29239: POP
// end ;
29240: GO 29189
29242: POP
29243: POP
// end ;
29244: LD_VAR 0 1
29248: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29249: LD_INT 0
29251: PPUSH
29252: PPUSH
29253: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29254: LD_ADDR_VAR 0 2
29258: PUSH
29259: LD_INT 22
29261: PUSH
29262: LD_OWVAR 2
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: LD_INT 21
29273: PUSH
29274: LD_INT 1
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PPUSH
29285: CALL_OW 69
29289: PUSH
29290: FOR_IN
29291: IFFALSE 29332
// begin for j := 1 to 4 do
29293: LD_ADDR_VAR 0 3
29297: PUSH
29298: DOUBLE
29299: LD_INT 1
29301: DEC
29302: ST_TO_ADDR
29303: LD_INT 4
29305: PUSH
29306: FOR_TO
29307: IFFALSE 29328
// SetSkill ( i , j , 10 ) ;
29309: LD_VAR 0 2
29313: PPUSH
29314: LD_VAR 0 3
29318: PPUSH
29319: LD_INT 10
29321: PPUSH
29322: CALL_OW 237
29326: GO 29306
29328: POP
29329: POP
// end ;
29330: GO 29290
29332: POP
29333: POP
// end ;
29334: LD_VAR 0 1
29338: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
29339: LD_INT 0
29341: PPUSH
// uc_side := your_side ;
29342: LD_ADDR_OWVAR 20
29346: PUSH
29347: LD_OWVAR 2
29351: ST_TO_ADDR
// uc_nation := nation ;
29352: LD_ADDR_OWVAR 21
29356: PUSH
29357: LD_VAR 0 1
29361: ST_TO_ADDR
// InitHc ;
29362: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29366: LD_INT 0
29368: PPUSH
29369: LD_VAR 0 2
29373: PPUSH
29374: LD_VAR 0 3
29378: PPUSH
29379: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29383: LD_VAR 0 4
29387: PPUSH
29388: LD_VAR 0 5
29392: PPUSH
29393: CALL_OW 428
29397: PUSH
29398: LD_INT 0
29400: EQUAL
29401: IFFALSE 29425
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29403: CALL_OW 44
29407: PPUSH
29408: LD_VAR 0 4
29412: PPUSH
29413: LD_VAR 0 5
29417: PPUSH
29418: LD_INT 1
29420: PPUSH
29421: CALL_OW 48
// end ;
29425: LD_VAR 0 6
29429: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29430: LD_INT 0
29432: PPUSH
29433: PPUSH
// uc_side := your_side ;
29434: LD_ADDR_OWVAR 20
29438: PUSH
29439: LD_OWVAR 2
29443: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29444: LD_VAR 0 1
29448: PUSH
29449: LD_INT 1
29451: PUSH
29452: LD_INT 2
29454: PUSH
29455: LD_INT 3
29457: PUSH
29458: LD_INT 4
29460: PUSH
29461: LD_INT 5
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: IN
29471: IFFALSE 29483
// uc_nation := nation_american else
29473: LD_ADDR_OWVAR 21
29477: PUSH
29478: LD_INT 1
29480: ST_TO_ADDR
29481: GO 29526
// if chassis in [ 11 , 12 , 13 , 14 ] then
29483: LD_VAR 0 1
29487: PUSH
29488: LD_INT 11
29490: PUSH
29491: LD_INT 12
29493: PUSH
29494: LD_INT 13
29496: PUSH
29497: LD_INT 14
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: IN
29506: IFFALSE 29518
// uc_nation := nation_arabian else
29508: LD_ADDR_OWVAR 21
29512: PUSH
29513: LD_INT 2
29515: ST_TO_ADDR
29516: GO 29526
// uc_nation := nation_russian ;
29518: LD_ADDR_OWVAR 21
29522: PUSH
29523: LD_INT 3
29525: ST_TO_ADDR
// vc_chassis := chassis ;
29526: LD_ADDR_OWVAR 37
29530: PUSH
29531: LD_VAR 0 1
29535: ST_TO_ADDR
// vc_engine := engine ;
29536: LD_ADDR_OWVAR 39
29540: PUSH
29541: LD_VAR 0 2
29545: ST_TO_ADDR
// vc_control := control ;
29546: LD_ADDR_OWVAR 38
29550: PUSH
29551: LD_VAR 0 3
29555: ST_TO_ADDR
// vc_weapon := weapon ;
29556: LD_ADDR_OWVAR 40
29560: PUSH
29561: LD_VAR 0 4
29565: ST_TO_ADDR
// un := CreateVehicle ;
29566: LD_ADDR_VAR 0 8
29570: PUSH
29571: CALL_OW 45
29575: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29576: LD_VAR 0 8
29580: PPUSH
29581: LD_INT 0
29583: PPUSH
29584: LD_INT 5
29586: PPUSH
29587: CALL_OW 12
29591: PPUSH
29592: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29596: LD_VAR 0 8
29600: PPUSH
29601: LD_VAR 0 5
29605: PPUSH
29606: LD_VAR 0 6
29610: PPUSH
29611: LD_INT 1
29613: PPUSH
29614: CALL_OW 48
// end ;
29618: LD_VAR 0 7
29622: RET
// export hInvincible ; every 1 do
29623: GO 29625
29625: DISABLE
// hInvincible := [ ] ;
29626: LD_ADDR_EXP 106
29630: PUSH
29631: EMPTY
29632: ST_TO_ADDR
29633: END
// every 10 do var i ;
29634: GO 29636
29636: DISABLE
29637: LD_INT 0
29639: PPUSH
// begin enable ;
29640: ENABLE
// if not hInvincible then
29641: LD_EXP 106
29645: NOT
29646: IFFALSE 29650
// exit ;
29648: GO 29694
// for i in hInvincible do
29650: LD_ADDR_VAR 0 1
29654: PUSH
29655: LD_EXP 106
29659: PUSH
29660: FOR_IN
29661: IFFALSE 29692
// if GetLives ( i ) < 1000 then
29663: LD_VAR 0 1
29667: PPUSH
29668: CALL_OW 256
29672: PUSH
29673: LD_INT 1000
29675: LESS
29676: IFFALSE 29690
// SetLives ( i , 1000 ) ;
29678: LD_VAR 0 1
29682: PPUSH
29683: LD_INT 1000
29685: PPUSH
29686: CALL_OW 234
29690: GO 29660
29692: POP
29693: POP
// end ;
29694: PPOPN 1
29696: END
// export function hHackInvincible ; var i ; begin
29697: LD_INT 0
29699: PPUSH
29700: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29701: LD_ADDR_VAR 0 2
29705: PUSH
29706: LD_INT 2
29708: PUSH
29709: LD_INT 21
29711: PUSH
29712: LD_INT 1
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 21
29721: PUSH
29722: LD_INT 2
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: LIST
29733: PPUSH
29734: CALL_OW 69
29738: PUSH
29739: FOR_IN
29740: IFFALSE 29801
// if IsSelected ( i ) then
29742: LD_VAR 0 2
29746: PPUSH
29747: CALL_OW 306
29751: IFFALSE 29799
// begin if i in hInvincible then
29753: LD_VAR 0 2
29757: PUSH
29758: LD_EXP 106
29762: IN
29763: IFFALSE 29783
// hInvincible := hInvincible diff i else
29765: LD_ADDR_EXP 106
29769: PUSH
29770: LD_EXP 106
29774: PUSH
29775: LD_VAR 0 2
29779: DIFF
29780: ST_TO_ADDR
29781: GO 29799
// hInvincible := hInvincible union i ;
29783: LD_ADDR_EXP 106
29787: PUSH
29788: LD_EXP 106
29792: PUSH
29793: LD_VAR 0 2
29797: UNION
29798: ST_TO_ADDR
// end ;
29799: GO 29739
29801: POP
29802: POP
// end ;
29803: LD_VAR 0 1
29807: RET
// export function hHackInvisible ; var i , j ; begin
29808: LD_INT 0
29810: PPUSH
29811: PPUSH
29812: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29813: LD_ADDR_VAR 0 2
29817: PUSH
29818: LD_INT 21
29820: PUSH
29821: LD_INT 1
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PPUSH
29828: CALL_OW 69
29832: PUSH
29833: FOR_IN
29834: IFFALSE 29858
// if IsSelected ( i ) then
29836: LD_VAR 0 2
29840: PPUSH
29841: CALL_OW 306
29845: IFFALSE 29856
// ComForceInvisible ( i ) ;
29847: LD_VAR 0 2
29851: PPUSH
29852: CALL_OW 496
29856: GO 29833
29858: POP
29859: POP
// end ;
29860: LD_VAR 0 1
29864: RET
// export function hHackChangeYourSide ; begin
29865: LD_INT 0
29867: PPUSH
// if your_side = 8 then
29868: LD_OWVAR 2
29872: PUSH
29873: LD_INT 8
29875: EQUAL
29876: IFFALSE 29888
// your_side := 0 else
29878: LD_ADDR_OWVAR 2
29882: PUSH
29883: LD_INT 0
29885: ST_TO_ADDR
29886: GO 29902
// your_side := your_side + 1 ;
29888: LD_ADDR_OWVAR 2
29892: PUSH
29893: LD_OWVAR 2
29897: PUSH
29898: LD_INT 1
29900: PLUS
29901: ST_TO_ADDR
// end ;
29902: LD_VAR 0 1
29906: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29907: LD_INT 0
29909: PPUSH
29910: PPUSH
29911: PPUSH
// for i in all_units do
29912: LD_ADDR_VAR 0 2
29916: PUSH
29917: LD_OWVAR 3
29921: PUSH
29922: FOR_IN
29923: IFFALSE 30001
// if IsSelected ( i ) then
29925: LD_VAR 0 2
29929: PPUSH
29930: CALL_OW 306
29934: IFFALSE 29999
// begin j := GetSide ( i ) ;
29936: LD_ADDR_VAR 0 3
29940: PUSH
29941: LD_VAR 0 2
29945: PPUSH
29946: CALL_OW 255
29950: ST_TO_ADDR
// if j = 8 then
29951: LD_VAR 0 3
29955: PUSH
29956: LD_INT 8
29958: EQUAL
29959: IFFALSE 29971
// j := 0 else
29961: LD_ADDR_VAR 0 3
29965: PUSH
29966: LD_INT 0
29968: ST_TO_ADDR
29969: GO 29985
// j := j + 1 ;
29971: LD_ADDR_VAR 0 3
29975: PUSH
29976: LD_VAR 0 3
29980: PUSH
29981: LD_INT 1
29983: PLUS
29984: ST_TO_ADDR
// SetSide ( i , j ) ;
29985: LD_VAR 0 2
29989: PPUSH
29990: LD_VAR 0 3
29994: PPUSH
29995: CALL_OW 235
// end ;
29999: GO 29922
30001: POP
30002: POP
// end ;
30003: LD_VAR 0 1
30007: RET
// export function hHackFog ; begin
30008: LD_INT 0
30010: PPUSH
// FogOff ( true ) ;
30011: LD_INT 1
30013: PPUSH
30014: CALL_OW 344
// end ;
30018: LD_VAR 0 1
30022: RET
// export function hHackTeleport ( unit , x , y ) ; begin
30023: LD_INT 0
30025: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
30026: LD_VAR 0 1
30030: PPUSH
30031: LD_VAR 0 2
30035: PPUSH
30036: LD_VAR 0 3
30040: PPUSH
30041: LD_INT 1
30043: PPUSH
30044: LD_INT 1
30046: PPUSH
30047: CALL_OW 483
// CenterOnXY ( x , y ) ;
30051: LD_VAR 0 2
30055: PPUSH
30056: LD_VAR 0 3
30060: PPUSH
30061: CALL_OW 84
// end ; end_of_file
30065: LD_VAR 0 4
30069: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
30070: LD_VAR 0 1
30074: PUSH
30075: LD_INT 200
30077: DOUBLE
30078: GREATEREQUAL
30079: IFFALSE 30087
30081: LD_INT 299
30083: DOUBLE
30084: LESSEQUAL
30085: IFTRUE 30089
30087: GO 30121
30089: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
30090: LD_VAR 0 1
30094: PPUSH
30095: LD_VAR 0 2
30099: PPUSH
30100: LD_VAR 0 3
30104: PPUSH
30105: LD_VAR 0 4
30109: PPUSH
30110: LD_VAR 0 5
30114: PPUSH
30115: CALL 30365 0 5
30119: GO 30198
30121: LD_INT 300
30123: DOUBLE
30124: GREATEREQUAL
30125: IFFALSE 30133
30127: LD_INT 399
30129: DOUBLE
30130: LESSEQUAL
30131: IFTRUE 30135
30133: GO 30197
30135: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
30136: LD_VAR 0 1
30140: PPUSH
30141: LD_VAR 0 2
30145: PPUSH
30146: LD_VAR 0 3
30150: PPUSH
30151: LD_VAR 0 4
30155: PPUSH
30156: LD_VAR 0 5
30160: PPUSH
30161: LD_VAR 0 6
30165: PPUSH
30166: LD_VAR 0 7
30170: PPUSH
30171: LD_VAR 0 8
30175: PPUSH
30176: LD_VAR 0 9
30180: PPUSH
30181: LD_VAR 0 10
30185: PPUSH
30186: LD_VAR 0 11
30190: PPUSH
30191: CALL 28090 0 11
30195: GO 30198
30197: POP
// end ;
30198: PPOPN 11
30200: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
30201: LD_VAR 0 1
30205: PPUSH
30206: LD_VAR 0 2
30210: PPUSH
30211: LD_VAR 0 3
30215: PPUSH
30216: LD_VAR 0 4
30220: PPUSH
30221: LD_VAR 0 5
30225: PPUSH
30226: CALL 30347 0 5
// end ; end_of_file
30230: PPOPN 5
30232: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
30233: LD_INT 0
30235: PPUSH
30236: PPUSH
30237: PPUSH
30238: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
30239: LD_VAR 0 1
30243: PPUSH
30244: CALL_OW 264
30248: PUSH
30249: LD_EXP 123
30253: EQUAL
30254: IFFALSE 30326
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
30256: LD_INT 68
30258: PPUSH
30259: LD_VAR 0 1
30263: PPUSH
30264: CALL_OW 255
30268: PPUSH
30269: CALL_OW 321
30273: PUSH
30274: LD_INT 2
30276: EQUAL
30277: IFFALSE 30289
// eff := 70 else
30279: LD_ADDR_VAR 0 4
30283: PUSH
30284: LD_INT 70
30286: ST_TO_ADDR
30287: GO 30297
// eff := 30 ;
30289: LD_ADDR_VAR 0 4
30293: PUSH
30294: LD_INT 30
30296: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
30297: LD_VAR 0 1
30301: PPUSH
30302: CALL_OW 250
30306: PPUSH
30307: LD_VAR 0 1
30311: PPUSH
30312: CALL_OW 251
30316: PPUSH
30317: LD_VAR 0 4
30321: PPUSH
30322: CALL_OW 495
// end ; end ;
30326: LD_VAR 0 2
30330: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
30331: LD_INT 0
30333: PPUSH
// end ;
30334: LD_VAR 0 4
30338: RET
// export function SOS_Command ( cmd ) ; begin
30339: LD_INT 0
30341: PPUSH
// end ;
30342: LD_VAR 0 2
30346: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
30347: LD_INT 0
30349: PPUSH
// if cmd = 121 then
30350: LD_VAR 0 1
30354: PUSH
30355: LD_INT 121
30357: EQUAL
30358: IFFALSE 30360
// end ;
30360: LD_VAR 0 6
30364: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
30365: LD_INT 0
30367: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
30368: LD_VAR 0 1
30372: PUSH
30373: LD_INT 250
30375: EQUAL
30376: PUSH
30377: LD_VAR 0 2
30381: PPUSH
30382: CALL_OW 264
30386: PUSH
30387: LD_EXP 126
30391: EQUAL
30392: AND
30393: IFFALSE 30414
// MinerPlaceMine ( unit , x , y ) ;
30395: LD_VAR 0 2
30399: PPUSH
30400: LD_VAR 0 4
30404: PPUSH
30405: LD_VAR 0 5
30409: PPUSH
30410: CALL 32763 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
30414: LD_VAR 0 1
30418: PUSH
30419: LD_INT 251
30421: EQUAL
30422: PUSH
30423: LD_VAR 0 2
30427: PPUSH
30428: CALL_OW 264
30432: PUSH
30433: LD_EXP 126
30437: EQUAL
30438: AND
30439: IFFALSE 30460
// MinerDetonateMine ( unit , x , y ) ;
30441: LD_VAR 0 2
30445: PPUSH
30446: LD_VAR 0 4
30450: PPUSH
30451: LD_VAR 0 5
30455: PPUSH
30456: CALL 33040 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
30460: LD_VAR 0 1
30464: PUSH
30465: LD_INT 252
30467: EQUAL
30468: PUSH
30469: LD_VAR 0 2
30473: PPUSH
30474: CALL_OW 264
30478: PUSH
30479: LD_EXP 126
30483: EQUAL
30484: AND
30485: IFFALSE 30506
// MinerCreateMinefield ( unit , x , y ) ;
30487: LD_VAR 0 2
30491: PPUSH
30492: LD_VAR 0 4
30496: PPUSH
30497: LD_VAR 0 5
30501: PPUSH
30502: CALL 33457 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
30506: LD_VAR 0 1
30510: PUSH
30511: LD_INT 253
30513: EQUAL
30514: PUSH
30515: LD_VAR 0 2
30519: PPUSH
30520: CALL_OW 257
30524: PUSH
30525: LD_INT 5
30527: EQUAL
30528: AND
30529: IFFALSE 30550
// ComBinocular ( unit , x , y ) ;
30531: LD_VAR 0 2
30535: PPUSH
30536: LD_VAR 0 4
30540: PPUSH
30541: LD_VAR 0 5
30545: PPUSH
30546: CALL 33828 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
30550: LD_VAR 0 1
30554: PUSH
30555: LD_INT 254
30557: EQUAL
30558: PUSH
30559: LD_VAR 0 2
30563: PPUSH
30564: CALL_OW 264
30568: PUSH
30569: LD_EXP 121
30573: EQUAL
30574: AND
30575: PUSH
30576: LD_VAR 0 3
30580: PPUSH
30581: CALL_OW 263
30585: PUSH
30586: LD_INT 3
30588: EQUAL
30589: AND
30590: IFFALSE 30606
// HackDestroyVehicle ( unit , selectedUnit ) ;
30592: LD_VAR 0 2
30596: PPUSH
30597: LD_VAR 0 3
30601: PPUSH
30602: CALL 32123 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
30606: LD_VAR 0 1
30610: PUSH
30611: LD_INT 255
30613: EQUAL
30614: PUSH
30615: LD_VAR 0 2
30619: PPUSH
30620: CALL_OW 264
30624: PUSH
30625: LD_INT 14
30627: PUSH
30628: LD_INT 53
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: IN
30635: AND
30636: PUSH
30637: LD_VAR 0 4
30641: PPUSH
30642: LD_VAR 0 5
30646: PPUSH
30647: CALL_OW 488
30651: AND
30652: IFFALSE 30676
// CutTreeXYR ( unit , x , y , 12 ) ;
30654: LD_VAR 0 2
30658: PPUSH
30659: LD_VAR 0 4
30663: PPUSH
30664: LD_VAR 0 5
30668: PPUSH
30669: LD_INT 12
30671: PPUSH
30672: CALL 30689 0 4
// end ;
30676: LD_VAR 0 6
30680: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
30681: LD_INT 0
30683: PPUSH
// end ;
30684: LD_VAR 0 4
30688: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
30689: LD_INT 0
30691: PPUSH
30692: PPUSH
30693: PPUSH
30694: PPUSH
30695: PPUSH
30696: PPUSH
30697: PPUSH
30698: PPUSH
30699: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
30700: LD_VAR 0 1
30704: NOT
30705: PUSH
30706: LD_VAR 0 2
30710: PPUSH
30711: LD_VAR 0 3
30715: PPUSH
30716: CALL_OW 488
30720: NOT
30721: OR
30722: PUSH
30723: LD_VAR 0 4
30727: NOT
30728: OR
30729: IFFALSE 30733
// exit ;
30731: GO 31073
// list := [ ] ;
30733: LD_ADDR_VAR 0 13
30737: PUSH
30738: EMPTY
30739: ST_TO_ADDR
// if x - r < 0 then
30740: LD_VAR 0 2
30744: PUSH
30745: LD_VAR 0 4
30749: MINUS
30750: PUSH
30751: LD_INT 0
30753: LESS
30754: IFFALSE 30766
// min_x := 0 else
30756: LD_ADDR_VAR 0 7
30760: PUSH
30761: LD_INT 0
30763: ST_TO_ADDR
30764: GO 30782
// min_x := x - r ;
30766: LD_ADDR_VAR 0 7
30770: PUSH
30771: LD_VAR 0 2
30775: PUSH
30776: LD_VAR 0 4
30780: MINUS
30781: ST_TO_ADDR
// if y - r < 0 then
30782: LD_VAR 0 3
30786: PUSH
30787: LD_VAR 0 4
30791: MINUS
30792: PUSH
30793: LD_INT 0
30795: LESS
30796: IFFALSE 30808
// min_y := 0 else
30798: LD_ADDR_VAR 0 8
30802: PUSH
30803: LD_INT 0
30805: ST_TO_ADDR
30806: GO 30824
// min_y := y - r ;
30808: LD_ADDR_VAR 0 8
30812: PUSH
30813: LD_VAR 0 3
30817: PUSH
30818: LD_VAR 0 4
30822: MINUS
30823: ST_TO_ADDR
// max_x := x + r ;
30824: LD_ADDR_VAR 0 9
30828: PUSH
30829: LD_VAR 0 2
30833: PUSH
30834: LD_VAR 0 4
30838: PLUS
30839: ST_TO_ADDR
// max_y := y + r ;
30840: LD_ADDR_VAR 0 10
30844: PUSH
30845: LD_VAR 0 3
30849: PUSH
30850: LD_VAR 0 4
30854: PLUS
30855: ST_TO_ADDR
// for _x = min_x to max_x do
30856: LD_ADDR_VAR 0 11
30860: PUSH
30861: DOUBLE
30862: LD_VAR 0 7
30866: DEC
30867: ST_TO_ADDR
30868: LD_VAR 0 9
30872: PUSH
30873: FOR_TO
30874: IFFALSE 30991
// for _y = min_y to max_y do
30876: LD_ADDR_VAR 0 12
30880: PUSH
30881: DOUBLE
30882: LD_VAR 0 8
30886: DEC
30887: ST_TO_ADDR
30888: LD_VAR 0 10
30892: PUSH
30893: FOR_TO
30894: IFFALSE 30987
// begin if not ValidHex ( _x , _y ) then
30896: LD_VAR 0 11
30900: PPUSH
30901: LD_VAR 0 12
30905: PPUSH
30906: CALL_OW 488
30910: NOT
30911: IFFALSE 30915
// continue ;
30913: GO 30893
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
30915: LD_VAR 0 11
30919: PPUSH
30920: LD_VAR 0 12
30924: PPUSH
30925: CALL_OW 351
30929: PUSH
30930: LD_VAR 0 11
30934: PPUSH
30935: LD_VAR 0 12
30939: PPUSH
30940: CALL_OW 554
30944: AND
30945: IFFALSE 30985
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
30947: LD_ADDR_VAR 0 13
30951: PUSH
30952: LD_VAR 0 13
30956: PPUSH
30957: LD_VAR 0 13
30961: PUSH
30962: LD_INT 1
30964: PLUS
30965: PPUSH
30966: LD_VAR 0 11
30970: PUSH
30971: LD_VAR 0 12
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PPUSH
30980: CALL_OW 2
30984: ST_TO_ADDR
// end ;
30985: GO 30893
30987: POP
30988: POP
30989: GO 30873
30991: POP
30992: POP
// if not list then
30993: LD_VAR 0 13
30997: NOT
30998: IFFALSE 31002
// exit ;
31000: GO 31073
// for i in list do
31002: LD_ADDR_VAR 0 6
31006: PUSH
31007: LD_VAR 0 13
31011: PUSH
31012: FOR_IN
31013: IFFALSE 31071
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
31015: LD_VAR 0 1
31019: PPUSH
31020: LD_STRING M
31022: PUSH
31023: LD_VAR 0 6
31027: PUSH
31028: LD_INT 1
31030: ARRAY
31031: PUSH
31032: LD_VAR 0 6
31036: PUSH
31037: LD_INT 2
31039: ARRAY
31040: PUSH
31041: LD_INT 0
31043: PUSH
31044: LD_INT 0
31046: PUSH
31047: LD_INT 0
31049: PUSH
31050: LD_INT 0
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: PUSH
31062: EMPTY
31063: LIST
31064: PPUSH
31065: CALL_OW 447
31069: GO 31012
31071: POP
31072: POP
// end ;
31073: LD_VAR 0 5
31077: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
31078: LD_EXP 109
31082: NOT
31083: IFFALSE 31133
31085: GO 31087
31087: DISABLE
// begin initHack := true ;
31088: LD_ADDR_EXP 109
31092: PUSH
31093: LD_INT 1
31095: ST_TO_ADDR
// hackTanks := [ ] ;
31096: LD_ADDR_EXP 110
31100: PUSH
31101: EMPTY
31102: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
31103: LD_ADDR_EXP 111
31107: PUSH
31108: EMPTY
31109: ST_TO_ADDR
// hackLimit := 3 ;
31110: LD_ADDR_EXP 112
31114: PUSH
31115: LD_INT 3
31117: ST_TO_ADDR
// hackDist := 12 ;
31118: LD_ADDR_EXP 113
31122: PUSH
31123: LD_INT 12
31125: ST_TO_ADDR
// hackCounter := [ ] ;
31126: LD_ADDR_EXP 114
31130: PUSH
31131: EMPTY
31132: ST_TO_ADDR
// end ;
31133: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
31134: LD_EXP 109
31138: PUSH
31139: LD_INT 34
31141: PUSH
31142: LD_EXP 121
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PPUSH
31151: CALL_OW 69
31155: AND
31156: IFFALSE 31411
31158: GO 31160
31160: DISABLE
31161: LD_INT 0
31163: PPUSH
31164: PPUSH
// begin enable ;
31165: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
31166: LD_ADDR_VAR 0 1
31170: PUSH
31171: LD_INT 34
31173: PUSH
31174: LD_EXP 121
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PPUSH
31183: CALL_OW 69
31187: PUSH
31188: FOR_IN
31189: IFFALSE 31409
// begin if not i in hackTanks then
31191: LD_VAR 0 1
31195: PUSH
31196: LD_EXP 110
31200: IN
31201: NOT
31202: IFFALSE 31285
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
31204: LD_ADDR_EXP 110
31208: PUSH
31209: LD_EXP 110
31213: PPUSH
31214: LD_EXP 110
31218: PUSH
31219: LD_INT 1
31221: PLUS
31222: PPUSH
31223: LD_VAR 0 1
31227: PPUSH
31228: CALL_OW 1
31232: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
31233: LD_ADDR_EXP 111
31237: PUSH
31238: LD_EXP 111
31242: PPUSH
31243: LD_EXP 111
31247: PUSH
31248: LD_INT 1
31250: PLUS
31251: PPUSH
31252: EMPTY
31253: PPUSH
31254: CALL_OW 1
31258: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
31259: LD_ADDR_EXP 114
31263: PUSH
31264: LD_EXP 114
31268: PPUSH
31269: LD_EXP 114
31273: PUSH
31274: LD_INT 1
31276: PLUS
31277: PPUSH
31278: EMPTY
31279: PPUSH
31280: CALL_OW 1
31284: ST_TO_ADDR
// end ; if not IsOk ( i ) then
31285: LD_VAR 0 1
31289: PPUSH
31290: CALL_OW 302
31294: NOT
31295: IFFALSE 31308
// begin HackUnlinkAll ( i ) ;
31297: LD_VAR 0 1
31301: PPUSH
31302: CALL 31414 0 1
// continue ;
31306: GO 31188
// end ; HackCheckCapturedStatus ( i ) ;
31308: LD_VAR 0 1
31312: PPUSH
31313: CALL 31857 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
31317: LD_ADDR_VAR 0 2
31321: PUSH
31322: LD_INT 81
31324: PUSH
31325: LD_VAR 0 1
31329: PPUSH
31330: CALL_OW 255
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 33
31341: PUSH
31342: LD_INT 3
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 91
31351: PUSH
31352: LD_VAR 0 1
31356: PUSH
31357: LD_EXP 113
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 50
31369: PUSH
31370: EMPTY
31371: LIST
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: PPUSH
31379: CALL_OW 69
31383: ST_TO_ADDR
// if not tmp then
31384: LD_VAR 0 2
31388: NOT
31389: IFFALSE 31393
// continue ;
31391: GO 31188
// HackLink ( i , tmp ) ;
31393: LD_VAR 0 1
31397: PPUSH
31398: LD_VAR 0 2
31402: PPUSH
31403: CALL 31550 0 2
// end ;
31407: GO 31188
31409: POP
31410: POP
// end ;
31411: PPOPN 2
31413: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
31414: LD_INT 0
31416: PPUSH
31417: PPUSH
31418: PPUSH
// if not hack in hackTanks then
31419: LD_VAR 0 1
31423: PUSH
31424: LD_EXP 110
31428: IN
31429: NOT
31430: IFFALSE 31434
// exit ;
31432: GO 31545
// index := GetElementIndex ( hackTanks , hack ) ;
31434: LD_ADDR_VAR 0 4
31438: PUSH
31439: LD_EXP 110
31443: PPUSH
31444: LD_VAR 0 1
31448: PPUSH
31449: CALL 39139 0 2
31453: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
31454: LD_EXP 111
31458: PUSH
31459: LD_VAR 0 4
31463: ARRAY
31464: IFFALSE 31545
// begin for i in hackTanksCaptured [ index ] do
31466: LD_ADDR_VAR 0 3
31470: PUSH
31471: LD_EXP 111
31475: PUSH
31476: LD_VAR 0 4
31480: ARRAY
31481: PUSH
31482: FOR_IN
31483: IFFALSE 31509
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
31485: LD_VAR 0 3
31489: PUSH
31490: LD_INT 1
31492: ARRAY
31493: PPUSH
31494: LD_VAR 0 3
31498: PUSH
31499: LD_INT 2
31501: ARRAY
31502: PPUSH
31503: CALL_OW 235
31507: GO 31482
31509: POP
31510: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
31511: LD_ADDR_EXP 111
31515: PUSH
31516: LD_EXP 111
31520: PPUSH
31521: LD_VAR 0 4
31525: PPUSH
31526: EMPTY
31527: PPUSH
31528: CALL_OW 1
31532: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
31533: LD_VAR 0 1
31537: PPUSH
31538: LD_INT 0
31540: PPUSH
31541: CALL_OW 505
// end ; end ;
31545: LD_VAR 0 2
31549: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
31550: LD_INT 0
31552: PPUSH
31553: PPUSH
31554: PPUSH
// if not hack in hackTanks or not vehicles then
31555: LD_VAR 0 1
31559: PUSH
31560: LD_EXP 110
31564: IN
31565: NOT
31566: PUSH
31567: LD_VAR 0 2
31571: NOT
31572: OR
31573: IFFALSE 31577
// exit ;
31575: GO 31852
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
31577: LD_ADDR_VAR 0 2
31581: PUSH
31582: LD_VAR 0 1
31586: PPUSH
31587: LD_VAR 0 2
31591: PPUSH
31592: LD_INT 1
31594: PPUSH
31595: LD_INT 1
31597: PPUSH
31598: CALL 39789 0 4
31602: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
31603: LD_ADDR_VAR 0 5
31607: PUSH
31608: LD_EXP 110
31612: PPUSH
31613: LD_VAR 0 1
31617: PPUSH
31618: CALL 39139 0 2
31622: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
31623: LD_EXP 111
31627: PUSH
31628: LD_VAR 0 5
31632: ARRAY
31633: PUSH
31634: LD_EXP 112
31638: LESS
31639: IFFALSE 31828
// begin for i := 1 to vehicles do
31641: LD_ADDR_VAR 0 4
31645: PUSH
31646: DOUBLE
31647: LD_INT 1
31649: DEC
31650: ST_TO_ADDR
31651: LD_VAR 0 2
31655: PUSH
31656: FOR_TO
31657: IFFALSE 31826
// begin if hackTanksCaptured [ index ] = hackLimit then
31659: LD_EXP 111
31663: PUSH
31664: LD_VAR 0 5
31668: ARRAY
31669: PUSH
31670: LD_EXP 112
31674: EQUAL
31675: IFFALSE 31679
// break ;
31677: GO 31826
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
31679: LD_ADDR_EXP 114
31683: PUSH
31684: LD_EXP 114
31688: PPUSH
31689: LD_VAR 0 5
31693: PPUSH
31694: LD_EXP 114
31698: PUSH
31699: LD_VAR 0 5
31703: ARRAY
31704: PUSH
31705: LD_INT 1
31707: PLUS
31708: PPUSH
31709: CALL_OW 1
31713: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
31714: LD_ADDR_EXP 111
31718: PUSH
31719: LD_EXP 111
31723: PPUSH
31724: LD_VAR 0 5
31728: PUSH
31729: LD_EXP 111
31733: PUSH
31734: LD_VAR 0 5
31738: ARRAY
31739: PUSH
31740: LD_INT 1
31742: PLUS
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PPUSH
31748: LD_VAR 0 2
31752: PUSH
31753: LD_VAR 0 4
31757: ARRAY
31758: PUSH
31759: LD_VAR 0 2
31763: PUSH
31764: LD_VAR 0 4
31768: ARRAY
31769: PPUSH
31770: CALL_OW 255
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PPUSH
31779: CALL 39354 0 3
31783: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
31784: LD_VAR 0 2
31788: PUSH
31789: LD_VAR 0 4
31793: ARRAY
31794: PPUSH
31795: LD_VAR 0 1
31799: PPUSH
31800: CALL_OW 255
31804: PPUSH
31805: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
31809: LD_VAR 0 2
31813: PUSH
31814: LD_VAR 0 4
31818: ARRAY
31819: PPUSH
31820: CALL_OW 141
// end ;
31824: GO 31656
31826: POP
31827: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31828: LD_VAR 0 1
31832: PPUSH
31833: LD_EXP 111
31837: PUSH
31838: LD_VAR 0 5
31842: ARRAY
31843: PUSH
31844: LD_INT 0
31846: PLUS
31847: PPUSH
31848: CALL_OW 505
// end ;
31852: LD_VAR 0 3
31856: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
31857: LD_INT 0
31859: PPUSH
31860: PPUSH
31861: PPUSH
31862: PPUSH
// if not hack in hackTanks then
31863: LD_VAR 0 1
31867: PUSH
31868: LD_EXP 110
31872: IN
31873: NOT
31874: IFFALSE 31878
// exit ;
31876: GO 32118
// index := GetElementIndex ( hackTanks , hack ) ;
31878: LD_ADDR_VAR 0 4
31882: PUSH
31883: LD_EXP 110
31887: PPUSH
31888: LD_VAR 0 1
31892: PPUSH
31893: CALL 39139 0 2
31897: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
31898: LD_ADDR_VAR 0 3
31902: PUSH
31903: DOUBLE
31904: LD_EXP 111
31908: PUSH
31909: LD_VAR 0 4
31913: ARRAY
31914: INC
31915: ST_TO_ADDR
31916: LD_INT 1
31918: PUSH
31919: FOR_DOWNTO
31920: IFFALSE 32092
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
31922: LD_ADDR_VAR 0 5
31926: PUSH
31927: LD_EXP 111
31931: PUSH
31932: LD_VAR 0 4
31936: ARRAY
31937: PUSH
31938: LD_VAR 0 3
31942: ARRAY
31943: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
31944: LD_VAR 0 5
31948: PUSH
31949: LD_INT 1
31951: ARRAY
31952: PPUSH
31953: CALL_OW 302
31957: NOT
31958: PUSH
31959: LD_VAR 0 5
31963: PUSH
31964: LD_INT 1
31966: ARRAY
31967: PPUSH
31968: CALL_OW 255
31972: PUSH
31973: LD_VAR 0 1
31977: PPUSH
31978: CALL_OW 255
31982: NONEQUAL
31983: OR
31984: IFFALSE 32090
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
31986: LD_VAR 0 5
31990: PUSH
31991: LD_INT 1
31993: ARRAY
31994: PPUSH
31995: CALL_OW 305
31999: PUSH
32000: LD_VAR 0 5
32004: PUSH
32005: LD_INT 1
32007: ARRAY
32008: PPUSH
32009: CALL_OW 255
32013: PUSH
32014: LD_VAR 0 1
32018: PPUSH
32019: CALL_OW 255
32023: EQUAL
32024: AND
32025: IFFALSE 32049
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
32027: LD_VAR 0 5
32031: PUSH
32032: LD_INT 1
32034: ARRAY
32035: PPUSH
32036: LD_VAR 0 5
32040: PUSH
32041: LD_INT 2
32043: ARRAY
32044: PPUSH
32045: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
32049: LD_ADDR_EXP 111
32053: PUSH
32054: LD_EXP 111
32058: PPUSH
32059: LD_VAR 0 4
32063: PPUSH
32064: LD_EXP 111
32068: PUSH
32069: LD_VAR 0 4
32073: ARRAY
32074: PPUSH
32075: LD_VAR 0 3
32079: PPUSH
32080: CALL_OW 3
32084: PPUSH
32085: CALL_OW 1
32089: ST_TO_ADDR
// end ; end ;
32090: GO 31919
32092: POP
32093: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32094: LD_VAR 0 1
32098: PPUSH
32099: LD_EXP 111
32103: PUSH
32104: LD_VAR 0 4
32108: ARRAY
32109: PUSH
32110: LD_INT 0
32112: PLUS
32113: PPUSH
32114: CALL_OW 505
// end ;
32118: LD_VAR 0 2
32122: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
32123: LD_INT 0
32125: PPUSH
32126: PPUSH
32127: PPUSH
32128: PPUSH
// if not hack in hackTanks then
32129: LD_VAR 0 1
32133: PUSH
32134: LD_EXP 110
32138: IN
32139: NOT
32140: IFFALSE 32144
// exit ;
32142: GO 32229
// index := GetElementIndex ( hackTanks , hack ) ;
32144: LD_ADDR_VAR 0 5
32148: PUSH
32149: LD_EXP 110
32153: PPUSH
32154: LD_VAR 0 1
32158: PPUSH
32159: CALL 39139 0 2
32163: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
32164: LD_ADDR_VAR 0 4
32168: PUSH
32169: DOUBLE
32170: LD_INT 1
32172: DEC
32173: ST_TO_ADDR
32174: LD_EXP 111
32178: PUSH
32179: LD_VAR 0 5
32183: ARRAY
32184: PUSH
32185: FOR_TO
32186: IFFALSE 32227
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
32188: LD_EXP 111
32192: PUSH
32193: LD_VAR 0 5
32197: ARRAY
32198: PUSH
32199: LD_VAR 0 4
32203: ARRAY
32204: PUSH
32205: LD_INT 1
32207: ARRAY
32208: PUSH
32209: LD_VAR 0 2
32213: EQUAL
32214: IFFALSE 32225
// KillUnit ( vehicle ) ;
32216: LD_VAR 0 2
32220: PPUSH
32221: CALL_OW 66
32225: GO 32185
32227: POP
32228: POP
// end ;
32229: LD_VAR 0 3
32233: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
32234: LD_EXP 115
32238: NOT
32239: IFFALSE 32274
32241: GO 32243
32243: DISABLE
// begin initMiner := true ;
32244: LD_ADDR_EXP 115
32248: PUSH
32249: LD_INT 1
32251: ST_TO_ADDR
// minersList := [ ] ;
32252: LD_ADDR_EXP 116
32256: PUSH
32257: EMPTY
32258: ST_TO_ADDR
// minerMinesList := [ ] ;
32259: LD_ADDR_EXP 117
32263: PUSH
32264: EMPTY
32265: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
32266: LD_ADDR_EXP 118
32270: PUSH
32271: LD_INT 5
32273: ST_TO_ADDR
// end ;
32274: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
32275: LD_EXP 115
32279: PUSH
32280: LD_INT 34
32282: PUSH
32283: LD_EXP 126
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PPUSH
32292: CALL_OW 69
32296: AND
32297: IFFALSE 32760
32299: GO 32301
32301: DISABLE
32302: LD_INT 0
32304: PPUSH
32305: PPUSH
32306: PPUSH
32307: PPUSH
// begin enable ;
32308: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
32309: LD_ADDR_VAR 0 1
32313: PUSH
32314: LD_INT 34
32316: PUSH
32317: LD_EXP 126
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PPUSH
32326: CALL_OW 69
32330: PUSH
32331: FOR_IN
32332: IFFALSE 32404
// begin if not i in minersList then
32334: LD_VAR 0 1
32338: PUSH
32339: LD_EXP 116
32343: IN
32344: NOT
32345: IFFALSE 32402
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
32347: LD_ADDR_EXP 116
32351: PUSH
32352: LD_EXP 116
32356: PPUSH
32357: LD_EXP 116
32361: PUSH
32362: LD_INT 1
32364: PLUS
32365: PPUSH
32366: LD_VAR 0 1
32370: PPUSH
32371: CALL_OW 1
32375: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
32376: LD_ADDR_EXP 117
32380: PUSH
32381: LD_EXP 117
32385: PPUSH
32386: LD_EXP 117
32390: PUSH
32391: LD_INT 1
32393: PLUS
32394: PPUSH
32395: EMPTY
32396: PPUSH
32397: CALL_OW 1
32401: ST_TO_ADDR
// end end ;
32402: GO 32331
32404: POP
32405: POP
// for i := minerMinesList downto 1 do
32406: LD_ADDR_VAR 0 1
32410: PUSH
32411: DOUBLE
32412: LD_EXP 117
32416: INC
32417: ST_TO_ADDR
32418: LD_INT 1
32420: PUSH
32421: FOR_DOWNTO
32422: IFFALSE 32758
// begin if IsLive ( minersList [ i ] ) then
32424: LD_EXP 116
32428: PUSH
32429: LD_VAR 0 1
32433: ARRAY
32434: PPUSH
32435: CALL_OW 300
32439: IFFALSE 32467
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
32441: LD_EXP 116
32445: PUSH
32446: LD_VAR 0 1
32450: ARRAY
32451: PPUSH
32452: LD_EXP 117
32456: PUSH
32457: LD_VAR 0 1
32461: ARRAY
32462: PPUSH
32463: CALL_OW 505
// if not minerMinesList [ i ] then
32467: LD_EXP 117
32471: PUSH
32472: LD_VAR 0 1
32476: ARRAY
32477: NOT
32478: IFFALSE 32482
// continue ;
32480: GO 32421
// for j := minerMinesList [ i ] downto 1 do
32482: LD_ADDR_VAR 0 2
32486: PUSH
32487: DOUBLE
32488: LD_EXP 117
32492: PUSH
32493: LD_VAR 0 1
32497: ARRAY
32498: INC
32499: ST_TO_ADDR
32500: LD_INT 1
32502: PUSH
32503: FOR_DOWNTO
32504: IFFALSE 32754
// begin side := GetSide ( minersList [ i ] ) ;
32506: LD_ADDR_VAR 0 3
32510: PUSH
32511: LD_EXP 116
32515: PUSH
32516: LD_VAR 0 1
32520: ARRAY
32521: PPUSH
32522: CALL_OW 255
32526: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
32527: LD_ADDR_VAR 0 4
32531: PUSH
32532: LD_EXP 117
32536: PUSH
32537: LD_VAR 0 1
32541: ARRAY
32542: PUSH
32543: LD_VAR 0 2
32547: ARRAY
32548: PUSH
32549: LD_INT 1
32551: ARRAY
32552: PPUSH
32553: LD_EXP 117
32557: PUSH
32558: LD_VAR 0 1
32562: ARRAY
32563: PUSH
32564: LD_VAR 0 2
32568: ARRAY
32569: PUSH
32570: LD_INT 2
32572: ARRAY
32573: PPUSH
32574: CALL_OW 428
32578: ST_TO_ADDR
// if not tmp then
32579: LD_VAR 0 4
32583: NOT
32584: IFFALSE 32588
// continue ;
32586: GO 32503
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
32588: LD_VAR 0 4
32592: PUSH
32593: LD_INT 81
32595: PUSH
32596: LD_VAR 0 3
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PPUSH
32605: CALL_OW 69
32609: IN
32610: PUSH
32611: LD_EXP 117
32615: PUSH
32616: LD_VAR 0 1
32620: ARRAY
32621: PUSH
32622: LD_VAR 0 2
32626: ARRAY
32627: PUSH
32628: LD_INT 1
32630: ARRAY
32631: PPUSH
32632: LD_EXP 117
32636: PUSH
32637: LD_VAR 0 1
32641: ARRAY
32642: PUSH
32643: LD_VAR 0 2
32647: ARRAY
32648: PUSH
32649: LD_INT 2
32651: ARRAY
32652: PPUSH
32653: CALL_OW 458
32657: AND
32658: IFFALSE 32752
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
32660: LD_EXP 117
32664: PUSH
32665: LD_VAR 0 1
32669: ARRAY
32670: PUSH
32671: LD_VAR 0 2
32675: ARRAY
32676: PUSH
32677: LD_INT 1
32679: ARRAY
32680: PPUSH
32681: LD_EXP 117
32685: PUSH
32686: LD_VAR 0 1
32690: ARRAY
32691: PUSH
32692: LD_VAR 0 2
32696: ARRAY
32697: PUSH
32698: LD_INT 2
32700: ARRAY
32701: PPUSH
32702: LD_VAR 0 3
32706: PPUSH
32707: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
32711: LD_ADDR_EXP 117
32715: PUSH
32716: LD_EXP 117
32720: PPUSH
32721: LD_VAR 0 1
32725: PPUSH
32726: LD_EXP 117
32730: PUSH
32731: LD_VAR 0 1
32735: ARRAY
32736: PPUSH
32737: LD_VAR 0 2
32741: PPUSH
32742: CALL_OW 3
32746: PPUSH
32747: CALL_OW 1
32751: ST_TO_ADDR
// end ; end ;
32752: GO 32503
32754: POP
32755: POP
// end ;
32756: GO 32421
32758: POP
32759: POP
// end ;
32760: PPOPN 4
32762: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
32763: LD_INT 0
32765: PPUSH
32766: PPUSH
// result := false ;
32767: LD_ADDR_VAR 0 4
32771: PUSH
32772: LD_INT 0
32774: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
32775: LD_VAR 0 1
32779: PPUSH
32780: CALL_OW 264
32784: PUSH
32785: LD_EXP 126
32789: EQUAL
32790: NOT
32791: IFFALSE 32795
// exit ;
32793: GO 33035
// index := GetElementIndex ( minersList , unit ) ;
32795: LD_ADDR_VAR 0 5
32799: PUSH
32800: LD_EXP 116
32804: PPUSH
32805: LD_VAR 0 1
32809: PPUSH
32810: CALL 39139 0 2
32814: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
32815: LD_EXP 117
32819: PUSH
32820: LD_VAR 0 5
32824: ARRAY
32825: PUSH
32826: LD_EXP 118
32830: GREATEREQUAL
32831: IFFALSE 32835
// exit ;
32833: GO 33035
// ComMoveXY ( unit , x , y ) ;
32835: LD_VAR 0 1
32839: PPUSH
32840: LD_VAR 0 2
32844: PPUSH
32845: LD_VAR 0 3
32849: PPUSH
32850: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32854: LD_INT 35
32856: PPUSH
32857: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
32861: LD_VAR 0 1
32865: PPUSH
32866: LD_VAR 0 2
32870: PPUSH
32871: LD_VAR 0 3
32875: PPUSH
32876: CALL 69536 0 3
32880: NOT
32881: PUSH
32882: LD_VAR 0 1
32886: PPUSH
32887: CALL_OW 314
32891: AND
32892: IFFALSE 32896
// exit ;
32894: GO 33035
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
32896: LD_VAR 0 2
32900: PPUSH
32901: LD_VAR 0 3
32905: PPUSH
32906: CALL_OW 428
32910: PUSH
32911: LD_VAR 0 1
32915: EQUAL
32916: PUSH
32917: LD_VAR 0 1
32921: PPUSH
32922: CALL_OW 314
32926: NOT
32927: AND
32928: IFFALSE 32854
// PlaySoundXY ( x , y , PlantMine ) ;
32930: LD_VAR 0 2
32934: PPUSH
32935: LD_VAR 0 3
32939: PPUSH
32940: LD_STRING PlantMine
32942: PPUSH
32943: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
32947: LD_VAR 0 2
32951: PPUSH
32952: LD_VAR 0 3
32956: PPUSH
32957: LD_VAR 0 1
32961: PPUSH
32962: CALL_OW 255
32966: PPUSH
32967: LD_INT 0
32969: PPUSH
32970: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
32974: LD_ADDR_EXP 117
32978: PUSH
32979: LD_EXP 117
32983: PPUSH
32984: LD_VAR 0 5
32988: PUSH
32989: LD_EXP 117
32993: PUSH
32994: LD_VAR 0 5
32998: ARRAY
32999: PUSH
33000: LD_INT 1
33002: PLUS
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PPUSH
33008: LD_VAR 0 2
33012: PUSH
33013: LD_VAR 0 3
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PPUSH
33022: CALL 39354 0 3
33026: ST_TO_ADDR
// result := true ;
33027: LD_ADDR_VAR 0 4
33031: PUSH
33032: LD_INT 1
33034: ST_TO_ADDR
// end ;
33035: LD_VAR 0 4
33039: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
33040: LD_INT 0
33042: PPUSH
33043: PPUSH
33044: PPUSH
// if not unit in minersList then
33045: LD_VAR 0 1
33049: PUSH
33050: LD_EXP 116
33054: IN
33055: NOT
33056: IFFALSE 33060
// exit ;
33058: GO 33452
// index := GetElementIndex ( minersList , unit ) ;
33060: LD_ADDR_VAR 0 6
33064: PUSH
33065: LD_EXP 116
33069: PPUSH
33070: LD_VAR 0 1
33074: PPUSH
33075: CALL 39139 0 2
33079: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
33080: LD_ADDR_VAR 0 5
33084: PUSH
33085: DOUBLE
33086: LD_EXP 117
33090: PUSH
33091: LD_VAR 0 6
33095: ARRAY
33096: INC
33097: ST_TO_ADDR
33098: LD_INT 1
33100: PUSH
33101: FOR_DOWNTO
33102: IFFALSE 33263
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
33104: LD_EXP 117
33108: PUSH
33109: LD_VAR 0 6
33113: ARRAY
33114: PUSH
33115: LD_VAR 0 5
33119: ARRAY
33120: PUSH
33121: LD_INT 1
33123: ARRAY
33124: PUSH
33125: LD_VAR 0 2
33129: EQUAL
33130: PUSH
33131: LD_EXP 117
33135: PUSH
33136: LD_VAR 0 6
33140: ARRAY
33141: PUSH
33142: LD_VAR 0 5
33146: ARRAY
33147: PUSH
33148: LD_INT 2
33150: ARRAY
33151: PUSH
33152: LD_VAR 0 3
33156: EQUAL
33157: AND
33158: IFFALSE 33261
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
33160: LD_EXP 117
33164: PUSH
33165: LD_VAR 0 6
33169: ARRAY
33170: PUSH
33171: LD_VAR 0 5
33175: ARRAY
33176: PUSH
33177: LD_INT 1
33179: ARRAY
33180: PPUSH
33181: LD_EXP 117
33185: PUSH
33186: LD_VAR 0 6
33190: ARRAY
33191: PUSH
33192: LD_VAR 0 5
33196: ARRAY
33197: PUSH
33198: LD_INT 2
33200: ARRAY
33201: PPUSH
33202: LD_VAR 0 1
33206: PPUSH
33207: CALL_OW 255
33211: PPUSH
33212: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
33216: LD_ADDR_EXP 117
33220: PUSH
33221: LD_EXP 117
33225: PPUSH
33226: LD_VAR 0 6
33230: PPUSH
33231: LD_EXP 117
33235: PUSH
33236: LD_VAR 0 6
33240: ARRAY
33241: PPUSH
33242: LD_VAR 0 5
33246: PPUSH
33247: CALL_OW 3
33251: PPUSH
33252: CALL_OW 1
33256: ST_TO_ADDR
// exit ;
33257: POP
33258: POP
33259: GO 33452
// end ; end ;
33261: GO 33101
33263: POP
33264: POP
// for i := minerMinesList [ index ] downto 1 do
33265: LD_ADDR_VAR 0 5
33269: PUSH
33270: DOUBLE
33271: LD_EXP 117
33275: PUSH
33276: LD_VAR 0 6
33280: ARRAY
33281: INC
33282: ST_TO_ADDR
33283: LD_INT 1
33285: PUSH
33286: FOR_DOWNTO
33287: IFFALSE 33450
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
33289: LD_EXP 117
33293: PUSH
33294: LD_VAR 0 6
33298: ARRAY
33299: PUSH
33300: LD_VAR 0 5
33304: ARRAY
33305: PUSH
33306: LD_INT 1
33308: ARRAY
33309: PPUSH
33310: LD_EXP 117
33314: PUSH
33315: LD_VAR 0 6
33319: ARRAY
33320: PUSH
33321: LD_VAR 0 5
33325: ARRAY
33326: PUSH
33327: LD_INT 2
33329: ARRAY
33330: PPUSH
33331: LD_VAR 0 2
33335: PPUSH
33336: LD_VAR 0 3
33340: PPUSH
33341: CALL_OW 298
33345: PUSH
33346: LD_INT 6
33348: LESS
33349: IFFALSE 33448
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
33351: LD_EXP 117
33355: PUSH
33356: LD_VAR 0 6
33360: ARRAY
33361: PUSH
33362: LD_VAR 0 5
33366: ARRAY
33367: PUSH
33368: LD_INT 1
33370: ARRAY
33371: PPUSH
33372: LD_EXP 117
33376: PUSH
33377: LD_VAR 0 6
33381: ARRAY
33382: PUSH
33383: LD_VAR 0 5
33387: ARRAY
33388: PUSH
33389: LD_INT 2
33391: ARRAY
33392: PPUSH
33393: LD_VAR 0 1
33397: PPUSH
33398: CALL_OW 255
33402: PPUSH
33403: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
33407: LD_ADDR_EXP 117
33411: PUSH
33412: LD_EXP 117
33416: PPUSH
33417: LD_VAR 0 6
33421: PPUSH
33422: LD_EXP 117
33426: PUSH
33427: LD_VAR 0 6
33431: ARRAY
33432: PPUSH
33433: LD_VAR 0 5
33437: PPUSH
33438: CALL_OW 3
33442: PPUSH
33443: CALL_OW 1
33447: ST_TO_ADDR
// end ; end ;
33448: GO 33286
33450: POP
33451: POP
// end ;
33452: LD_VAR 0 4
33456: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
33457: LD_INT 0
33459: PPUSH
33460: PPUSH
33461: PPUSH
33462: PPUSH
33463: PPUSH
33464: PPUSH
33465: PPUSH
33466: PPUSH
33467: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
33468: LD_VAR 0 1
33472: PPUSH
33473: CALL_OW 264
33477: PUSH
33478: LD_EXP 126
33482: EQUAL
33483: NOT
33484: PUSH
33485: LD_VAR 0 1
33489: PUSH
33490: LD_EXP 116
33494: IN
33495: NOT
33496: OR
33497: IFFALSE 33501
// exit ;
33499: GO 33823
// index := GetElementIndex ( minersList , unit ) ;
33501: LD_ADDR_VAR 0 6
33505: PUSH
33506: LD_EXP 116
33510: PPUSH
33511: LD_VAR 0 1
33515: PPUSH
33516: CALL 39139 0 2
33520: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
33521: LD_ADDR_VAR 0 8
33525: PUSH
33526: LD_EXP 118
33530: PUSH
33531: LD_EXP 117
33535: PUSH
33536: LD_VAR 0 6
33540: ARRAY
33541: MINUS
33542: ST_TO_ADDR
// if not minesFreeAmount then
33543: LD_VAR 0 8
33547: NOT
33548: IFFALSE 33552
// exit ;
33550: GO 33823
// tmp := [ ] ;
33552: LD_ADDR_VAR 0 7
33556: PUSH
33557: EMPTY
33558: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
33559: LD_ADDR_VAR 0 5
33563: PUSH
33564: DOUBLE
33565: LD_INT 1
33567: DEC
33568: ST_TO_ADDR
33569: LD_VAR 0 8
33573: PUSH
33574: FOR_TO
33575: IFFALSE 33770
// begin _d := rand ( 0 , 5 ) ;
33577: LD_ADDR_VAR 0 11
33581: PUSH
33582: LD_INT 0
33584: PPUSH
33585: LD_INT 5
33587: PPUSH
33588: CALL_OW 12
33592: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
33593: LD_ADDR_VAR 0 12
33597: PUSH
33598: LD_INT 2
33600: PPUSH
33601: LD_INT 6
33603: PPUSH
33604: CALL_OW 12
33608: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
33609: LD_ADDR_VAR 0 9
33613: PUSH
33614: LD_VAR 0 2
33618: PPUSH
33619: LD_VAR 0 11
33623: PPUSH
33624: LD_VAR 0 12
33628: PPUSH
33629: CALL_OW 272
33633: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
33634: LD_ADDR_VAR 0 10
33638: PUSH
33639: LD_VAR 0 3
33643: PPUSH
33644: LD_VAR 0 11
33648: PPUSH
33649: LD_VAR 0 12
33653: PPUSH
33654: CALL_OW 273
33658: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
33659: LD_VAR 0 9
33663: PPUSH
33664: LD_VAR 0 10
33668: PPUSH
33669: CALL_OW 488
33673: PUSH
33674: LD_VAR 0 9
33678: PUSH
33679: LD_VAR 0 10
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_VAR 0 7
33692: IN
33693: NOT
33694: AND
33695: PUSH
33696: LD_VAR 0 9
33700: PPUSH
33701: LD_VAR 0 10
33705: PPUSH
33706: CALL_OW 458
33710: NOT
33711: AND
33712: IFFALSE 33754
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
33714: LD_ADDR_VAR 0 7
33718: PUSH
33719: LD_VAR 0 7
33723: PPUSH
33724: LD_VAR 0 7
33728: PUSH
33729: LD_INT 1
33731: PLUS
33732: PPUSH
33733: LD_VAR 0 9
33737: PUSH
33738: LD_VAR 0 10
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PPUSH
33747: CALL_OW 1
33751: ST_TO_ADDR
33752: GO 33768
// i := i - 1 ;
33754: LD_ADDR_VAR 0 5
33758: PUSH
33759: LD_VAR 0 5
33763: PUSH
33764: LD_INT 1
33766: MINUS
33767: ST_TO_ADDR
// end ;
33768: GO 33574
33770: POP
33771: POP
// for i in tmp do
33772: LD_ADDR_VAR 0 5
33776: PUSH
33777: LD_VAR 0 7
33781: PUSH
33782: FOR_IN
33783: IFFALSE 33821
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
33785: LD_VAR 0 1
33789: PPUSH
33790: LD_VAR 0 5
33794: PUSH
33795: LD_INT 1
33797: ARRAY
33798: PPUSH
33799: LD_VAR 0 5
33803: PUSH
33804: LD_INT 2
33806: ARRAY
33807: PPUSH
33808: CALL 32763 0 3
33812: NOT
33813: IFFALSE 33819
// exit ;
33815: POP
33816: POP
33817: GO 33823
33819: GO 33782
33821: POP
33822: POP
// end ;
33823: LD_VAR 0 4
33827: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
33828: LD_INT 0
33830: PPUSH
33831: PPUSH
33832: PPUSH
33833: PPUSH
33834: PPUSH
33835: PPUSH
33836: PPUSH
// if not GetClass ( unit ) = class_sniper then
33837: LD_VAR 0 1
33841: PPUSH
33842: CALL_OW 257
33846: PUSH
33847: LD_INT 5
33849: EQUAL
33850: NOT
33851: IFFALSE 33855
// exit ;
33853: GO 34243
// dist := 8 ;
33855: LD_ADDR_VAR 0 5
33859: PUSH
33860: LD_INT 8
33862: ST_TO_ADDR
// viewRange := 12 ;
33863: LD_ADDR_VAR 0 7
33867: PUSH
33868: LD_INT 12
33870: ST_TO_ADDR
// side := GetSide ( unit ) ;
33871: LD_ADDR_VAR 0 6
33875: PUSH
33876: LD_VAR 0 1
33880: PPUSH
33881: CALL_OW 255
33885: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
33886: LD_INT 61
33888: PPUSH
33889: LD_VAR 0 6
33893: PPUSH
33894: CALL_OW 321
33898: PUSH
33899: LD_INT 2
33901: EQUAL
33902: IFFALSE 33912
// viewRange := 16 ;
33904: LD_ADDR_VAR 0 7
33908: PUSH
33909: LD_INT 16
33911: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
33912: LD_VAR 0 1
33916: PPUSH
33917: LD_VAR 0 2
33921: PPUSH
33922: LD_VAR 0 3
33926: PPUSH
33927: CALL_OW 297
33931: PUSH
33932: LD_VAR 0 5
33936: GREATER
33937: IFFALSE 34016
// begin ComMoveXY ( unit , x , y ) ;
33939: LD_VAR 0 1
33943: PPUSH
33944: LD_VAR 0 2
33948: PPUSH
33949: LD_VAR 0 3
33953: PPUSH
33954: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33958: LD_INT 35
33960: PPUSH
33961: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
33965: LD_VAR 0 1
33969: PPUSH
33970: LD_VAR 0 2
33974: PPUSH
33975: LD_VAR 0 3
33979: PPUSH
33980: CALL 69536 0 3
33984: NOT
33985: IFFALSE 33989
// exit ;
33987: GO 34243
// until GetDistUnitXY ( unit , x , y ) < dist ;
33989: LD_VAR 0 1
33993: PPUSH
33994: LD_VAR 0 2
33998: PPUSH
33999: LD_VAR 0 3
34003: PPUSH
34004: CALL_OW 297
34008: PUSH
34009: LD_VAR 0 5
34013: LESS
34014: IFFALSE 33958
// end ; ComTurnXY ( unit , x , y ) ;
34016: LD_VAR 0 1
34020: PPUSH
34021: LD_VAR 0 2
34025: PPUSH
34026: LD_VAR 0 3
34030: PPUSH
34031: CALL_OW 118
// wait ( 5 ) ;
34035: LD_INT 5
34037: PPUSH
34038: CALL_OW 67
// _d := GetDir ( unit ) ;
34042: LD_ADDR_VAR 0 10
34046: PUSH
34047: LD_VAR 0 1
34051: PPUSH
34052: CALL_OW 254
34056: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
34057: LD_ADDR_VAR 0 8
34061: PUSH
34062: LD_VAR 0 1
34066: PPUSH
34067: CALL_OW 250
34071: PPUSH
34072: LD_VAR 0 10
34076: PPUSH
34077: LD_VAR 0 5
34081: PPUSH
34082: CALL_OW 272
34086: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
34087: LD_ADDR_VAR 0 9
34091: PUSH
34092: LD_VAR 0 1
34096: PPUSH
34097: CALL_OW 251
34101: PPUSH
34102: LD_VAR 0 10
34106: PPUSH
34107: LD_VAR 0 5
34111: PPUSH
34112: CALL_OW 273
34116: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34117: LD_VAR 0 8
34121: PPUSH
34122: LD_VAR 0 9
34126: PPUSH
34127: CALL_OW 488
34131: NOT
34132: IFFALSE 34136
// exit ;
34134: GO 34243
// ComAnimCustom ( unit , 1 ) ;
34136: LD_VAR 0 1
34140: PPUSH
34141: LD_INT 1
34143: PPUSH
34144: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
34148: LD_VAR 0 8
34152: PPUSH
34153: LD_VAR 0 9
34157: PPUSH
34158: LD_VAR 0 6
34162: PPUSH
34163: LD_VAR 0 7
34167: PPUSH
34168: CALL_OW 330
// repeat wait ( 1 ) ;
34172: LD_INT 1
34174: PPUSH
34175: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
34179: LD_VAR 0 1
34183: PPUSH
34184: CALL_OW 316
34188: PUSH
34189: LD_VAR 0 1
34193: PPUSH
34194: CALL_OW 314
34198: OR
34199: PUSH
34200: LD_VAR 0 1
34204: PPUSH
34205: CALL_OW 302
34209: NOT
34210: OR
34211: PUSH
34212: LD_VAR 0 1
34216: PPUSH
34217: CALL_OW 301
34221: OR
34222: IFFALSE 34172
// RemoveSeeing ( _x , _y , side ) ;
34224: LD_VAR 0 8
34228: PPUSH
34229: LD_VAR 0 9
34233: PPUSH
34234: LD_VAR 0 6
34238: PPUSH
34239: CALL_OW 331
// end ; end_of_file
34243: LD_VAR 0 4
34247: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
34248: LD_INT 0
34250: PPUSH
// ar_miner := 81 ;
34251: LD_ADDR_EXP 126
34255: PUSH
34256: LD_INT 81
34258: ST_TO_ADDR
// ar_crane := 88 ;
34259: LD_ADDR_EXP 125
34263: PUSH
34264: LD_INT 88
34266: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
34267: LD_ADDR_EXP 120
34271: PUSH
34272: LD_INT 89
34274: ST_TO_ADDR
// us_hack := 99 ;
34275: LD_ADDR_EXP 121
34279: PUSH
34280: LD_INT 99
34282: ST_TO_ADDR
// us_artillery := 97 ;
34283: LD_ADDR_EXP 122
34287: PUSH
34288: LD_INT 97
34290: ST_TO_ADDR
// ar_bio_bomb := 91 ;
34291: LD_ADDR_EXP 123
34295: PUSH
34296: LD_INT 91
34298: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
34299: LD_ADDR_EXP 124
34303: PUSH
34304: LD_INT 92
34306: ST_TO_ADDR
// ru_radar := 98 ;
34307: LD_ADDR_EXP 119
34311: PUSH
34312: LD_INT 98
34314: ST_TO_ADDR
// tech_Artillery := 80 ;
34315: LD_ADDR_EXP 127
34319: PUSH
34320: LD_INT 80
34322: ST_TO_ADDR
// tech_RadMat := 81 ;
34323: LD_ADDR_EXP 128
34327: PUSH
34328: LD_INT 81
34330: ST_TO_ADDR
// tech_BasicTools := 82 ;
34331: LD_ADDR_EXP 129
34335: PUSH
34336: LD_INT 82
34338: ST_TO_ADDR
// tech_Cargo := 83 ;
34339: LD_ADDR_EXP 130
34343: PUSH
34344: LD_INT 83
34346: ST_TO_ADDR
// tech_Track := 84 ;
34347: LD_ADDR_EXP 131
34351: PUSH
34352: LD_INT 84
34354: ST_TO_ADDR
// tech_Crane := 85 ;
34355: LD_ADDR_EXP 132
34359: PUSH
34360: LD_INT 85
34362: ST_TO_ADDR
// tech_Bulldozer := 86 ;
34363: LD_ADDR_EXP 133
34367: PUSH
34368: LD_INT 86
34370: ST_TO_ADDR
// tech_Hovercraft := 87 ;
34371: LD_ADDR_EXP 134
34375: PUSH
34376: LD_INT 87
34378: ST_TO_ADDR
// class_mastodont := 31 ;
34379: LD_ADDR_EXP 135
34383: PUSH
34384: LD_INT 31
34386: ST_TO_ADDR
// class_horse := 21 ;
34387: LD_ADDR_EXP 136
34391: PUSH
34392: LD_INT 21
34394: ST_TO_ADDR
// end ;
34395: LD_VAR 0 1
34399: RET
// every 1 do
34400: GO 34402
34402: DISABLE
// InitGlobalVariables ; end_of_file
34403: CALL 34248 0 0
34407: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
34408: LD_INT 0
34410: PPUSH
34411: PPUSH
// if exist_mode then
34412: LD_VAR 0 2
34416: IFFALSE 34441
// unit := CreateCharacter ( prefix & ident ) else
34418: LD_ADDR_VAR 0 5
34422: PUSH
34423: LD_VAR 0 3
34427: PUSH
34428: LD_VAR 0 1
34432: STR
34433: PPUSH
34434: CALL_OW 34
34438: ST_TO_ADDR
34439: GO 34456
// unit := NewCharacter ( ident ) ;
34441: LD_ADDR_VAR 0 5
34445: PUSH
34446: LD_VAR 0 1
34450: PPUSH
34451: CALL_OW 25
34455: ST_TO_ADDR
// result := unit ;
34456: LD_ADDR_VAR 0 4
34460: PUSH
34461: LD_VAR 0 5
34465: ST_TO_ADDR
// end ;
34466: LD_VAR 0 4
34470: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
34471: LD_INT 0
34473: PPUSH
34474: PPUSH
// if not side or not nation then
34475: LD_VAR 0 1
34479: NOT
34480: PUSH
34481: LD_VAR 0 2
34485: NOT
34486: OR
34487: IFFALSE 34491
// exit ;
34489: GO 35255
// case nation of nation_american :
34491: LD_VAR 0 2
34495: PUSH
34496: LD_INT 1
34498: DOUBLE
34499: EQUAL
34500: IFTRUE 34504
34502: GO 34718
34504: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
34505: LD_ADDR_VAR 0 4
34509: PUSH
34510: LD_INT 35
34512: PUSH
34513: LD_INT 45
34515: PUSH
34516: LD_INT 46
34518: PUSH
34519: LD_INT 47
34521: PUSH
34522: LD_INT 82
34524: PUSH
34525: LD_INT 83
34527: PUSH
34528: LD_INT 84
34530: PUSH
34531: LD_INT 85
34533: PUSH
34534: LD_INT 86
34536: PUSH
34537: LD_INT 1
34539: PUSH
34540: LD_INT 2
34542: PUSH
34543: LD_INT 6
34545: PUSH
34546: LD_INT 15
34548: PUSH
34549: LD_INT 16
34551: PUSH
34552: LD_INT 7
34554: PUSH
34555: LD_INT 12
34557: PUSH
34558: LD_INT 13
34560: PUSH
34561: LD_INT 10
34563: PUSH
34564: LD_INT 14
34566: PUSH
34567: LD_INT 20
34569: PUSH
34570: LD_INT 21
34572: PUSH
34573: LD_INT 22
34575: PUSH
34576: LD_INT 25
34578: PUSH
34579: LD_INT 32
34581: PUSH
34582: LD_INT 27
34584: PUSH
34585: LD_INT 36
34587: PUSH
34588: LD_INT 69
34590: PUSH
34591: LD_INT 39
34593: PUSH
34594: LD_INT 34
34596: PUSH
34597: LD_INT 40
34599: PUSH
34600: LD_INT 48
34602: PUSH
34603: LD_INT 49
34605: PUSH
34606: LD_INT 50
34608: PUSH
34609: LD_INT 51
34611: PUSH
34612: LD_INT 52
34614: PUSH
34615: LD_INT 53
34617: PUSH
34618: LD_INT 54
34620: PUSH
34621: LD_INT 55
34623: PUSH
34624: LD_INT 56
34626: PUSH
34627: LD_INT 57
34629: PUSH
34630: LD_INT 58
34632: PUSH
34633: LD_INT 59
34635: PUSH
34636: LD_INT 60
34638: PUSH
34639: LD_INT 61
34641: PUSH
34642: LD_INT 62
34644: PUSH
34645: LD_INT 80
34647: PUSH
34648: LD_INT 82
34650: PUSH
34651: LD_INT 83
34653: PUSH
34654: LD_INT 84
34656: PUSH
34657: LD_INT 85
34659: PUSH
34660: LD_INT 86
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: ST_TO_ADDR
34716: GO 35179
34718: LD_INT 2
34720: DOUBLE
34721: EQUAL
34722: IFTRUE 34726
34724: GO 34948
34726: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
34727: LD_ADDR_VAR 0 4
34731: PUSH
34732: LD_INT 35
34734: PUSH
34735: LD_INT 45
34737: PUSH
34738: LD_INT 46
34740: PUSH
34741: LD_INT 47
34743: PUSH
34744: LD_INT 82
34746: PUSH
34747: LD_INT 83
34749: PUSH
34750: LD_INT 84
34752: PUSH
34753: LD_INT 85
34755: PUSH
34756: LD_INT 87
34758: PUSH
34759: LD_INT 70
34761: PUSH
34762: LD_INT 1
34764: PUSH
34765: LD_INT 11
34767: PUSH
34768: LD_INT 3
34770: PUSH
34771: LD_INT 4
34773: PUSH
34774: LD_INT 5
34776: PUSH
34777: LD_INT 6
34779: PUSH
34780: LD_INT 15
34782: PUSH
34783: LD_INT 18
34785: PUSH
34786: LD_INT 7
34788: PUSH
34789: LD_INT 17
34791: PUSH
34792: LD_INT 8
34794: PUSH
34795: LD_INT 20
34797: PUSH
34798: LD_INT 21
34800: PUSH
34801: LD_INT 22
34803: PUSH
34804: LD_INT 72
34806: PUSH
34807: LD_INT 26
34809: PUSH
34810: LD_INT 69
34812: PUSH
34813: LD_INT 39
34815: PUSH
34816: LD_INT 40
34818: PUSH
34819: LD_INT 41
34821: PUSH
34822: LD_INT 42
34824: PUSH
34825: LD_INT 43
34827: PUSH
34828: LD_INT 48
34830: PUSH
34831: LD_INT 49
34833: PUSH
34834: LD_INT 50
34836: PUSH
34837: LD_INT 51
34839: PUSH
34840: LD_INT 52
34842: PUSH
34843: LD_INT 53
34845: PUSH
34846: LD_INT 54
34848: PUSH
34849: LD_INT 55
34851: PUSH
34852: LD_INT 56
34854: PUSH
34855: LD_INT 60
34857: PUSH
34858: LD_INT 61
34860: PUSH
34861: LD_INT 62
34863: PUSH
34864: LD_INT 66
34866: PUSH
34867: LD_INT 67
34869: PUSH
34870: LD_INT 68
34872: PUSH
34873: LD_INT 81
34875: PUSH
34876: LD_INT 82
34878: PUSH
34879: LD_INT 83
34881: PUSH
34882: LD_INT 84
34884: PUSH
34885: LD_INT 85
34887: PUSH
34888: LD_INT 87
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: ST_TO_ADDR
34946: GO 35179
34948: LD_INT 3
34950: DOUBLE
34951: EQUAL
34952: IFTRUE 34956
34954: GO 35178
34956: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
34957: LD_ADDR_VAR 0 4
34961: PUSH
34962: LD_INT 46
34964: PUSH
34965: LD_INT 47
34967: PUSH
34968: LD_INT 1
34970: PUSH
34971: LD_INT 2
34973: PUSH
34974: LD_INT 82
34976: PUSH
34977: LD_INT 83
34979: PUSH
34980: LD_INT 84
34982: PUSH
34983: LD_INT 85
34985: PUSH
34986: LD_INT 86
34988: PUSH
34989: LD_INT 11
34991: PUSH
34992: LD_INT 9
34994: PUSH
34995: LD_INT 20
34997: PUSH
34998: LD_INT 19
35000: PUSH
35001: LD_INT 21
35003: PUSH
35004: LD_INT 24
35006: PUSH
35007: LD_INT 22
35009: PUSH
35010: LD_INT 25
35012: PUSH
35013: LD_INT 28
35015: PUSH
35016: LD_INT 29
35018: PUSH
35019: LD_INT 30
35021: PUSH
35022: LD_INT 31
35024: PUSH
35025: LD_INT 37
35027: PUSH
35028: LD_INT 38
35030: PUSH
35031: LD_INT 32
35033: PUSH
35034: LD_INT 27
35036: PUSH
35037: LD_INT 33
35039: PUSH
35040: LD_INT 69
35042: PUSH
35043: LD_INT 39
35045: PUSH
35046: LD_INT 34
35048: PUSH
35049: LD_INT 40
35051: PUSH
35052: LD_INT 71
35054: PUSH
35055: LD_INT 23
35057: PUSH
35058: LD_INT 44
35060: PUSH
35061: LD_INT 48
35063: PUSH
35064: LD_INT 49
35066: PUSH
35067: LD_INT 50
35069: PUSH
35070: LD_INT 51
35072: PUSH
35073: LD_INT 52
35075: PUSH
35076: LD_INT 53
35078: PUSH
35079: LD_INT 54
35081: PUSH
35082: LD_INT 55
35084: PUSH
35085: LD_INT 56
35087: PUSH
35088: LD_INT 57
35090: PUSH
35091: LD_INT 58
35093: PUSH
35094: LD_INT 59
35096: PUSH
35097: LD_INT 63
35099: PUSH
35100: LD_INT 64
35102: PUSH
35103: LD_INT 65
35105: PUSH
35106: LD_INT 82
35108: PUSH
35109: LD_INT 83
35111: PUSH
35112: LD_INT 84
35114: PUSH
35115: LD_INT 85
35117: PUSH
35118: LD_INT 86
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: ST_TO_ADDR
35176: GO 35179
35178: POP
// if state > - 1 and state < 3 then
35179: LD_VAR 0 3
35183: PUSH
35184: LD_INT 1
35186: NEG
35187: GREATER
35188: PUSH
35189: LD_VAR 0 3
35193: PUSH
35194: LD_INT 3
35196: LESS
35197: AND
35198: IFFALSE 35255
// for i in result do
35200: LD_ADDR_VAR 0 5
35204: PUSH
35205: LD_VAR 0 4
35209: PUSH
35210: FOR_IN
35211: IFFALSE 35253
// if GetTech ( i , side ) <> state then
35213: LD_VAR 0 5
35217: PPUSH
35218: LD_VAR 0 1
35222: PPUSH
35223: CALL_OW 321
35227: PUSH
35228: LD_VAR 0 3
35232: NONEQUAL
35233: IFFALSE 35251
// result := result diff i ;
35235: LD_ADDR_VAR 0 4
35239: PUSH
35240: LD_VAR 0 4
35244: PUSH
35245: LD_VAR 0 5
35249: DIFF
35250: ST_TO_ADDR
35251: GO 35210
35253: POP
35254: POP
// end ;
35255: LD_VAR 0 4
35259: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35260: LD_INT 0
35262: PPUSH
35263: PPUSH
35264: PPUSH
// result := true ;
35265: LD_ADDR_VAR 0 3
35269: PUSH
35270: LD_INT 1
35272: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35273: LD_ADDR_VAR 0 5
35277: PUSH
35278: LD_VAR 0 2
35282: PPUSH
35283: CALL_OW 480
35287: ST_TO_ADDR
// if not tmp then
35288: LD_VAR 0 5
35292: NOT
35293: IFFALSE 35297
// exit ;
35295: GO 35346
// for i in tmp do
35297: LD_ADDR_VAR 0 4
35301: PUSH
35302: LD_VAR 0 5
35306: PUSH
35307: FOR_IN
35308: IFFALSE 35344
// if GetTech ( i , side ) <> state_researched then
35310: LD_VAR 0 4
35314: PPUSH
35315: LD_VAR 0 1
35319: PPUSH
35320: CALL_OW 321
35324: PUSH
35325: LD_INT 2
35327: NONEQUAL
35328: IFFALSE 35342
// begin result := false ;
35330: LD_ADDR_VAR 0 3
35334: PUSH
35335: LD_INT 0
35337: ST_TO_ADDR
// exit ;
35338: POP
35339: POP
35340: GO 35346
// end ;
35342: GO 35307
35344: POP
35345: POP
// end ;
35346: LD_VAR 0 3
35350: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
35351: LD_INT 0
35353: PPUSH
35354: PPUSH
35355: PPUSH
35356: PPUSH
35357: PPUSH
35358: PPUSH
35359: PPUSH
35360: PPUSH
35361: PPUSH
35362: PPUSH
35363: PPUSH
35364: PPUSH
35365: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
35366: LD_VAR 0 1
35370: NOT
35371: PUSH
35372: LD_VAR 0 1
35376: PPUSH
35377: CALL_OW 257
35381: PUSH
35382: LD_INT 9
35384: NONEQUAL
35385: OR
35386: IFFALSE 35390
// exit ;
35388: GO 35963
// side := GetSide ( unit ) ;
35390: LD_ADDR_VAR 0 9
35394: PUSH
35395: LD_VAR 0 1
35399: PPUSH
35400: CALL_OW 255
35404: ST_TO_ADDR
// tech_space := tech_spacanom ;
35405: LD_ADDR_VAR 0 12
35409: PUSH
35410: LD_INT 29
35412: ST_TO_ADDR
// tech_time := tech_taurad ;
35413: LD_ADDR_VAR 0 13
35417: PUSH
35418: LD_INT 28
35420: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
35421: LD_ADDR_VAR 0 11
35425: PUSH
35426: LD_VAR 0 1
35430: PPUSH
35431: CALL_OW 310
35435: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
35436: LD_VAR 0 11
35440: PPUSH
35441: CALL_OW 247
35445: PUSH
35446: LD_INT 2
35448: EQUAL
35449: IFFALSE 35453
// exit ;
35451: GO 35963
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35453: LD_ADDR_VAR 0 8
35457: PUSH
35458: LD_INT 81
35460: PUSH
35461: LD_VAR 0 9
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 3
35472: PUSH
35473: LD_INT 21
35475: PUSH
35476: LD_INT 3
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PPUSH
35491: CALL_OW 69
35495: ST_TO_ADDR
// if not tmp then
35496: LD_VAR 0 8
35500: NOT
35501: IFFALSE 35505
// exit ;
35503: GO 35963
// if in_unit then
35505: LD_VAR 0 11
35509: IFFALSE 35533
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
35511: LD_ADDR_VAR 0 10
35515: PUSH
35516: LD_VAR 0 8
35520: PPUSH
35521: LD_VAR 0 11
35525: PPUSH
35526: CALL_OW 74
35530: ST_TO_ADDR
35531: GO 35553
// enemy := NearestUnitToUnit ( tmp , unit ) ;
35533: LD_ADDR_VAR 0 10
35537: PUSH
35538: LD_VAR 0 8
35542: PPUSH
35543: LD_VAR 0 1
35547: PPUSH
35548: CALL_OW 74
35552: ST_TO_ADDR
// if not enemy then
35553: LD_VAR 0 10
35557: NOT
35558: IFFALSE 35562
// exit ;
35560: GO 35963
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
35562: LD_VAR 0 11
35566: PUSH
35567: LD_VAR 0 11
35571: PPUSH
35572: LD_VAR 0 10
35576: PPUSH
35577: CALL_OW 296
35581: PUSH
35582: LD_INT 13
35584: GREATER
35585: AND
35586: PUSH
35587: LD_VAR 0 1
35591: PPUSH
35592: LD_VAR 0 10
35596: PPUSH
35597: CALL_OW 296
35601: PUSH
35602: LD_INT 12
35604: GREATER
35605: OR
35606: IFFALSE 35610
// exit ;
35608: GO 35963
// missile := [ 1 ] ;
35610: LD_ADDR_VAR 0 14
35614: PUSH
35615: LD_INT 1
35617: PUSH
35618: EMPTY
35619: LIST
35620: ST_TO_ADDR
// if Researched ( side , tech_space ) then
35621: LD_VAR 0 9
35625: PPUSH
35626: LD_VAR 0 12
35630: PPUSH
35631: CALL_OW 325
35635: IFFALSE 35664
// missile := Insert ( missile , missile + 1 , 2 ) ;
35637: LD_ADDR_VAR 0 14
35641: PUSH
35642: LD_VAR 0 14
35646: PPUSH
35647: LD_VAR 0 14
35651: PUSH
35652: LD_INT 1
35654: PLUS
35655: PPUSH
35656: LD_INT 2
35658: PPUSH
35659: CALL_OW 2
35663: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
35664: LD_VAR 0 9
35668: PPUSH
35669: LD_VAR 0 13
35673: PPUSH
35674: CALL_OW 325
35678: PUSH
35679: LD_VAR 0 10
35683: PPUSH
35684: CALL_OW 255
35688: PPUSH
35689: LD_VAR 0 13
35693: PPUSH
35694: CALL_OW 325
35698: NOT
35699: AND
35700: IFFALSE 35729
// missile := Insert ( missile , missile + 1 , 3 ) ;
35702: LD_ADDR_VAR 0 14
35706: PUSH
35707: LD_VAR 0 14
35711: PPUSH
35712: LD_VAR 0 14
35716: PUSH
35717: LD_INT 1
35719: PLUS
35720: PPUSH
35721: LD_INT 3
35723: PPUSH
35724: CALL_OW 2
35728: ST_TO_ADDR
// if missile < 2 then
35729: LD_VAR 0 14
35733: PUSH
35734: LD_INT 2
35736: LESS
35737: IFFALSE 35741
// exit ;
35739: GO 35963
// x := GetX ( enemy ) ;
35741: LD_ADDR_VAR 0 4
35745: PUSH
35746: LD_VAR 0 10
35750: PPUSH
35751: CALL_OW 250
35755: ST_TO_ADDR
// y := GetY ( enemy ) ;
35756: LD_ADDR_VAR 0 5
35760: PUSH
35761: LD_VAR 0 10
35765: PPUSH
35766: CALL_OW 251
35770: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35771: LD_ADDR_VAR 0 6
35775: PUSH
35776: LD_VAR 0 4
35780: PUSH
35781: LD_INT 1
35783: NEG
35784: PPUSH
35785: LD_INT 1
35787: PPUSH
35788: CALL_OW 12
35792: PLUS
35793: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35794: LD_ADDR_VAR 0 7
35798: PUSH
35799: LD_VAR 0 5
35803: PUSH
35804: LD_INT 1
35806: NEG
35807: PPUSH
35808: LD_INT 1
35810: PPUSH
35811: CALL_OW 12
35815: PLUS
35816: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35817: LD_VAR 0 6
35821: PPUSH
35822: LD_VAR 0 7
35826: PPUSH
35827: CALL_OW 488
35831: NOT
35832: IFFALSE 35854
// begin _x := x ;
35834: LD_ADDR_VAR 0 6
35838: PUSH
35839: LD_VAR 0 4
35843: ST_TO_ADDR
// _y := y ;
35844: LD_ADDR_VAR 0 7
35848: PUSH
35849: LD_VAR 0 5
35853: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35854: LD_ADDR_VAR 0 3
35858: PUSH
35859: LD_INT 1
35861: PPUSH
35862: LD_VAR 0 14
35866: PPUSH
35867: CALL_OW 12
35871: ST_TO_ADDR
// case i of 1 :
35872: LD_VAR 0 3
35876: PUSH
35877: LD_INT 1
35879: DOUBLE
35880: EQUAL
35881: IFTRUE 35885
35883: GO 35902
35885: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35886: LD_VAR 0 1
35890: PPUSH
35891: LD_VAR 0 10
35895: PPUSH
35896: CALL_OW 115
35900: GO 35963
35902: LD_INT 2
35904: DOUBLE
35905: EQUAL
35906: IFTRUE 35910
35908: GO 35932
35910: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35911: LD_VAR 0 1
35915: PPUSH
35916: LD_VAR 0 6
35920: PPUSH
35921: LD_VAR 0 7
35925: PPUSH
35926: CALL_OW 153
35930: GO 35963
35932: LD_INT 3
35934: DOUBLE
35935: EQUAL
35936: IFTRUE 35940
35938: GO 35962
35940: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35941: LD_VAR 0 1
35945: PPUSH
35946: LD_VAR 0 6
35950: PPUSH
35951: LD_VAR 0 7
35955: PPUSH
35956: CALL_OW 154
35960: GO 35963
35962: POP
// end ;
35963: LD_VAR 0 2
35967: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35968: LD_INT 0
35970: PPUSH
35971: PPUSH
35972: PPUSH
35973: PPUSH
35974: PPUSH
35975: PPUSH
// if not unit or not building then
35976: LD_VAR 0 1
35980: NOT
35981: PUSH
35982: LD_VAR 0 2
35986: NOT
35987: OR
35988: IFFALSE 35992
// exit ;
35990: GO 36150
// x := GetX ( building ) ;
35992: LD_ADDR_VAR 0 5
35996: PUSH
35997: LD_VAR 0 2
36001: PPUSH
36002: CALL_OW 250
36006: ST_TO_ADDR
// y := GetY ( building ) ;
36007: LD_ADDR_VAR 0 6
36011: PUSH
36012: LD_VAR 0 2
36016: PPUSH
36017: CALL_OW 251
36021: ST_TO_ADDR
// for i = 0 to 5 do
36022: LD_ADDR_VAR 0 4
36026: PUSH
36027: DOUBLE
36028: LD_INT 0
36030: DEC
36031: ST_TO_ADDR
36032: LD_INT 5
36034: PUSH
36035: FOR_TO
36036: IFFALSE 36148
// begin _x := ShiftX ( x , i , 3 ) ;
36038: LD_ADDR_VAR 0 7
36042: PUSH
36043: LD_VAR 0 5
36047: PPUSH
36048: LD_VAR 0 4
36052: PPUSH
36053: LD_INT 3
36055: PPUSH
36056: CALL_OW 272
36060: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
36061: LD_ADDR_VAR 0 8
36065: PUSH
36066: LD_VAR 0 6
36070: PPUSH
36071: LD_VAR 0 4
36075: PPUSH
36076: LD_INT 3
36078: PPUSH
36079: CALL_OW 273
36083: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36084: LD_VAR 0 7
36088: PPUSH
36089: LD_VAR 0 8
36093: PPUSH
36094: CALL_OW 488
36098: NOT
36099: IFFALSE 36103
// continue ;
36101: GO 36035
// if HexInfo ( _x , _y ) = 0 then
36103: LD_VAR 0 7
36107: PPUSH
36108: LD_VAR 0 8
36112: PPUSH
36113: CALL_OW 428
36117: PUSH
36118: LD_INT 0
36120: EQUAL
36121: IFFALSE 36146
// begin ComMoveXY ( unit , _x , _y ) ;
36123: LD_VAR 0 1
36127: PPUSH
36128: LD_VAR 0 7
36132: PPUSH
36133: LD_VAR 0 8
36137: PPUSH
36138: CALL_OW 111
// exit ;
36142: POP
36143: POP
36144: GO 36150
// end ; end ;
36146: GO 36035
36148: POP
36149: POP
// end ;
36150: LD_VAR 0 3
36154: RET
// export function ScanBase ( side , base_area ) ; begin
36155: LD_INT 0
36157: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
36158: LD_ADDR_VAR 0 3
36162: PUSH
36163: LD_VAR 0 2
36167: PPUSH
36168: LD_INT 81
36170: PUSH
36171: LD_VAR 0 1
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PPUSH
36180: CALL_OW 70
36184: ST_TO_ADDR
// end ;
36185: LD_VAR 0 3
36189: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
36190: LD_INT 0
36192: PPUSH
36193: PPUSH
36194: PPUSH
36195: PPUSH
// result := false ;
36196: LD_ADDR_VAR 0 2
36200: PUSH
36201: LD_INT 0
36203: ST_TO_ADDR
// side := GetSide ( unit ) ;
36204: LD_ADDR_VAR 0 3
36208: PUSH
36209: LD_VAR 0 1
36213: PPUSH
36214: CALL_OW 255
36218: ST_TO_ADDR
// nat := GetNation ( unit ) ;
36219: LD_ADDR_VAR 0 4
36223: PUSH
36224: LD_VAR 0 1
36228: PPUSH
36229: CALL_OW 248
36233: ST_TO_ADDR
// case nat of 1 :
36234: LD_VAR 0 4
36238: PUSH
36239: LD_INT 1
36241: DOUBLE
36242: EQUAL
36243: IFTRUE 36247
36245: GO 36258
36247: POP
// tech := tech_lassight ; 2 :
36248: LD_ADDR_VAR 0 5
36252: PUSH
36253: LD_INT 12
36255: ST_TO_ADDR
36256: GO 36297
36258: LD_INT 2
36260: DOUBLE
36261: EQUAL
36262: IFTRUE 36266
36264: GO 36277
36266: POP
// tech := tech_mortar ; 3 :
36267: LD_ADDR_VAR 0 5
36271: PUSH
36272: LD_INT 41
36274: ST_TO_ADDR
36275: GO 36297
36277: LD_INT 3
36279: DOUBLE
36280: EQUAL
36281: IFTRUE 36285
36283: GO 36296
36285: POP
// tech := tech_bazooka ; end ;
36286: LD_ADDR_VAR 0 5
36290: PUSH
36291: LD_INT 44
36293: ST_TO_ADDR
36294: GO 36297
36296: POP
// if Researched ( side , tech ) then
36297: LD_VAR 0 3
36301: PPUSH
36302: LD_VAR 0 5
36306: PPUSH
36307: CALL_OW 325
36311: IFFALSE 36338
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
36313: LD_ADDR_VAR 0 2
36317: PUSH
36318: LD_INT 5
36320: PUSH
36321: LD_INT 8
36323: PUSH
36324: LD_INT 9
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: LIST
36331: PUSH
36332: LD_VAR 0 4
36336: ARRAY
36337: ST_TO_ADDR
// end ;
36338: LD_VAR 0 2
36342: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
36343: LD_INT 0
36345: PPUSH
36346: PPUSH
36347: PPUSH
// if not mines then
36348: LD_VAR 0 2
36352: NOT
36353: IFFALSE 36357
// exit ;
36355: GO 36501
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36357: LD_ADDR_VAR 0 5
36361: PUSH
36362: LD_INT 81
36364: PUSH
36365: LD_VAR 0 1
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 3
36376: PUSH
36377: LD_INT 21
36379: PUSH
36380: LD_INT 3
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PPUSH
36395: CALL_OW 69
36399: ST_TO_ADDR
// for i in mines do
36400: LD_ADDR_VAR 0 4
36404: PUSH
36405: LD_VAR 0 2
36409: PUSH
36410: FOR_IN
36411: IFFALSE 36499
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
36413: LD_VAR 0 4
36417: PUSH
36418: LD_INT 1
36420: ARRAY
36421: PPUSH
36422: LD_VAR 0 4
36426: PUSH
36427: LD_INT 2
36429: ARRAY
36430: PPUSH
36431: CALL_OW 458
36435: NOT
36436: IFFALSE 36440
// continue ;
36438: GO 36410
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
36440: LD_VAR 0 4
36444: PUSH
36445: LD_INT 1
36447: ARRAY
36448: PPUSH
36449: LD_VAR 0 4
36453: PUSH
36454: LD_INT 2
36456: ARRAY
36457: PPUSH
36458: CALL_OW 428
36462: PUSH
36463: LD_VAR 0 5
36467: IN
36468: IFFALSE 36497
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
36470: LD_VAR 0 4
36474: PUSH
36475: LD_INT 1
36477: ARRAY
36478: PPUSH
36479: LD_VAR 0 4
36483: PUSH
36484: LD_INT 2
36486: ARRAY
36487: PPUSH
36488: LD_VAR 0 1
36492: PPUSH
36493: CALL_OW 456
// end ;
36497: GO 36410
36499: POP
36500: POP
// end ;
36501: LD_VAR 0 3
36505: RET
// export function Count ( array ) ; var i ; begin
36506: LD_INT 0
36508: PPUSH
36509: PPUSH
// result := 0 ;
36510: LD_ADDR_VAR 0 2
36514: PUSH
36515: LD_INT 0
36517: ST_TO_ADDR
// for i in array do
36518: LD_ADDR_VAR 0 3
36522: PUSH
36523: LD_VAR 0 1
36527: PUSH
36528: FOR_IN
36529: IFFALSE 36553
// if i then
36531: LD_VAR 0 3
36535: IFFALSE 36551
// result := result + 1 ;
36537: LD_ADDR_VAR 0 2
36541: PUSH
36542: LD_VAR 0 2
36546: PUSH
36547: LD_INT 1
36549: PLUS
36550: ST_TO_ADDR
36551: GO 36528
36553: POP
36554: POP
// end ;
36555: LD_VAR 0 2
36559: RET
// export function IsEmpty ( building ) ; begin
36560: LD_INT 0
36562: PPUSH
// if not building then
36563: LD_VAR 0 1
36567: NOT
36568: IFFALSE 36572
// exit ;
36570: GO 36615
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
36572: LD_ADDR_VAR 0 2
36576: PUSH
36577: LD_VAR 0 1
36581: PUSH
36582: LD_INT 22
36584: PUSH
36585: LD_VAR 0 1
36589: PPUSH
36590: CALL_OW 255
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 58
36601: PUSH
36602: EMPTY
36603: LIST
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PPUSH
36609: CALL_OW 69
36613: IN
36614: ST_TO_ADDR
// end ;
36615: LD_VAR 0 2
36619: RET
// export function IsNotFull ( building ) ; begin
36620: LD_INT 0
36622: PPUSH
// if not building then
36623: LD_VAR 0 1
36627: NOT
36628: IFFALSE 36632
// exit ;
36630: GO 36651
// result := UnitsInside ( building ) < 6 ;
36632: LD_ADDR_VAR 0 2
36636: PUSH
36637: LD_VAR 0 1
36641: PPUSH
36642: CALL_OW 313
36646: PUSH
36647: LD_INT 6
36649: LESS
36650: ST_TO_ADDR
// end ;
36651: LD_VAR 0 2
36655: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
36656: LD_INT 0
36658: PPUSH
36659: PPUSH
36660: PPUSH
36661: PPUSH
// tmp := [ ] ;
36662: LD_ADDR_VAR 0 3
36666: PUSH
36667: EMPTY
36668: ST_TO_ADDR
// list := [ ] ;
36669: LD_ADDR_VAR 0 5
36673: PUSH
36674: EMPTY
36675: ST_TO_ADDR
// for i = 16 to 25 do
36676: LD_ADDR_VAR 0 4
36680: PUSH
36681: DOUBLE
36682: LD_INT 16
36684: DEC
36685: ST_TO_ADDR
36686: LD_INT 25
36688: PUSH
36689: FOR_TO
36690: IFFALSE 36763
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
36692: LD_ADDR_VAR 0 3
36696: PUSH
36697: LD_VAR 0 3
36701: PUSH
36702: LD_INT 22
36704: PUSH
36705: LD_VAR 0 1
36709: PPUSH
36710: CALL_OW 255
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 91
36721: PUSH
36722: LD_VAR 0 1
36726: PUSH
36727: LD_INT 6
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 30
36737: PUSH
36738: LD_VAR 0 4
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: LIST
36751: PUSH
36752: EMPTY
36753: LIST
36754: PPUSH
36755: CALL_OW 69
36759: ADD
36760: ST_TO_ADDR
36761: GO 36689
36763: POP
36764: POP
// for i = 1 to tmp do
36765: LD_ADDR_VAR 0 4
36769: PUSH
36770: DOUBLE
36771: LD_INT 1
36773: DEC
36774: ST_TO_ADDR
36775: LD_VAR 0 3
36779: PUSH
36780: FOR_TO
36781: IFFALSE 36869
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
36783: LD_ADDR_VAR 0 5
36787: PUSH
36788: LD_VAR 0 5
36792: PUSH
36793: LD_VAR 0 3
36797: PUSH
36798: LD_VAR 0 4
36802: ARRAY
36803: PPUSH
36804: CALL_OW 266
36808: PUSH
36809: LD_VAR 0 3
36813: PUSH
36814: LD_VAR 0 4
36818: ARRAY
36819: PPUSH
36820: CALL_OW 250
36824: PUSH
36825: LD_VAR 0 3
36829: PUSH
36830: LD_VAR 0 4
36834: ARRAY
36835: PPUSH
36836: CALL_OW 251
36840: PUSH
36841: LD_VAR 0 3
36845: PUSH
36846: LD_VAR 0 4
36850: ARRAY
36851: PPUSH
36852: CALL_OW 254
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: PUSH
36863: EMPTY
36864: LIST
36865: ADD
36866: ST_TO_ADDR
36867: GO 36780
36869: POP
36870: POP
// result := list ;
36871: LD_ADDR_VAR 0 2
36875: PUSH
36876: LD_VAR 0 5
36880: ST_TO_ADDR
// end ;
36881: LD_VAR 0 2
36885: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36886: LD_INT 0
36888: PPUSH
36889: PPUSH
36890: PPUSH
36891: PPUSH
36892: PPUSH
36893: PPUSH
36894: PPUSH
// if not factory then
36895: LD_VAR 0 1
36899: NOT
36900: IFFALSE 36904
// exit ;
36902: GO 37497
// if control = control_apeman then
36904: LD_VAR 0 4
36908: PUSH
36909: LD_INT 5
36911: EQUAL
36912: IFFALSE 37021
// begin tmp := UnitsInside ( factory ) ;
36914: LD_ADDR_VAR 0 8
36918: PUSH
36919: LD_VAR 0 1
36923: PPUSH
36924: CALL_OW 313
36928: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36929: LD_VAR 0 8
36933: PPUSH
36934: LD_INT 25
36936: PUSH
36937: LD_INT 12
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PPUSH
36944: CALL_OW 72
36948: NOT
36949: IFFALSE 36959
// control := control_manual ;
36951: LD_ADDR_VAR 0 4
36955: PUSH
36956: LD_INT 1
36958: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36959: LD_ADDR_VAR 0 8
36963: PUSH
36964: LD_VAR 0 1
36968: PPUSH
36969: CALL 36656 0 1
36973: ST_TO_ADDR
// if tmp then
36974: LD_VAR 0 8
36978: IFFALSE 37021
// begin for i in tmp do
36980: LD_ADDR_VAR 0 7
36984: PUSH
36985: LD_VAR 0 8
36989: PUSH
36990: FOR_IN
36991: IFFALSE 37019
// if i [ 1 ] = b_ext_radio then
36993: LD_VAR 0 7
36997: PUSH
36998: LD_INT 1
37000: ARRAY
37001: PUSH
37002: LD_INT 22
37004: EQUAL
37005: IFFALSE 37017
// begin control := control_remote ;
37007: LD_ADDR_VAR 0 4
37011: PUSH
37012: LD_INT 2
37014: ST_TO_ADDR
// break ;
37015: GO 37019
// end ;
37017: GO 36990
37019: POP
37020: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37021: LD_VAR 0 1
37025: PPUSH
37026: LD_VAR 0 2
37030: PPUSH
37031: LD_VAR 0 3
37035: PPUSH
37036: LD_VAR 0 4
37040: PPUSH
37041: LD_VAR 0 5
37045: PPUSH
37046: CALL_OW 448
37050: IFFALSE 37085
// begin result := [ chassis , engine , control , weapon ] ;
37052: LD_ADDR_VAR 0 6
37056: PUSH
37057: LD_VAR 0 2
37061: PUSH
37062: LD_VAR 0 3
37066: PUSH
37067: LD_VAR 0 4
37071: PUSH
37072: LD_VAR 0 5
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: ST_TO_ADDR
// exit ;
37083: GO 37497
// end ; _chassis := AvailableChassisList ( factory ) ;
37085: LD_ADDR_VAR 0 9
37089: PUSH
37090: LD_VAR 0 1
37094: PPUSH
37095: CALL_OW 475
37099: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
37100: LD_ADDR_VAR 0 11
37104: PUSH
37105: LD_VAR 0 1
37109: PPUSH
37110: CALL_OW 476
37114: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
37115: LD_ADDR_VAR 0 12
37119: PUSH
37120: LD_VAR 0 1
37124: PPUSH
37125: CALL_OW 477
37129: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
37130: LD_ADDR_VAR 0 10
37134: PUSH
37135: LD_VAR 0 1
37139: PPUSH
37140: CALL_OW 478
37144: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
37145: LD_VAR 0 9
37149: NOT
37150: PUSH
37151: LD_VAR 0 11
37155: NOT
37156: OR
37157: PUSH
37158: LD_VAR 0 12
37162: NOT
37163: OR
37164: PUSH
37165: LD_VAR 0 10
37169: NOT
37170: OR
37171: IFFALSE 37206
// begin result := [ chassis , engine , control , weapon ] ;
37173: LD_ADDR_VAR 0 6
37177: PUSH
37178: LD_VAR 0 2
37182: PUSH
37183: LD_VAR 0 3
37187: PUSH
37188: LD_VAR 0 4
37192: PUSH
37193: LD_VAR 0 5
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: ST_TO_ADDR
// exit ;
37204: GO 37497
// end ; if not chassis in _chassis then
37206: LD_VAR 0 2
37210: PUSH
37211: LD_VAR 0 9
37215: IN
37216: NOT
37217: IFFALSE 37243
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
37219: LD_ADDR_VAR 0 2
37223: PUSH
37224: LD_VAR 0 9
37228: PUSH
37229: LD_INT 1
37231: PPUSH
37232: LD_VAR 0 9
37236: PPUSH
37237: CALL_OW 12
37241: ARRAY
37242: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
37243: LD_VAR 0 2
37247: PPUSH
37248: LD_VAR 0 3
37252: PPUSH
37253: CALL 37502 0 2
37257: NOT
37258: IFFALSE 37317
// repeat engine := _engine [ 1 ] ;
37260: LD_ADDR_VAR 0 3
37264: PUSH
37265: LD_VAR 0 11
37269: PUSH
37270: LD_INT 1
37272: ARRAY
37273: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
37274: LD_ADDR_VAR 0 11
37278: PUSH
37279: LD_VAR 0 11
37283: PPUSH
37284: LD_INT 1
37286: PPUSH
37287: CALL_OW 3
37291: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
37292: LD_VAR 0 2
37296: PPUSH
37297: LD_VAR 0 3
37301: PPUSH
37302: CALL 37502 0 2
37306: PUSH
37307: LD_VAR 0 11
37311: PUSH
37312: EMPTY
37313: EQUAL
37314: OR
37315: IFFALSE 37260
// if not control in _control then
37317: LD_VAR 0 4
37321: PUSH
37322: LD_VAR 0 12
37326: IN
37327: NOT
37328: IFFALSE 37354
// control := _control [ rand ( 1 , _control ) ] ;
37330: LD_ADDR_VAR 0 4
37334: PUSH
37335: LD_VAR 0 12
37339: PUSH
37340: LD_INT 1
37342: PPUSH
37343: LD_VAR 0 12
37347: PPUSH
37348: CALL_OW 12
37352: ARRAY
37353: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
37354: LD_VAR 0 2
37358: PPUSH
37359: LD_VAR 0 5
37363: PPUSH
37364: CALL 37722 0 2
37368: NOT
37369: IFFALSE 37428
// repeat weapon := _weapon [ 1 ] ;
37371: LD_ADDR_VAR 0 5
37375: PUSH
37376: LD_VAR 0 10
37380: PUSH
37381: LD_INT 1
37383: ARRAY
37384: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
37385: LD_ADDR_VAR 0 10
37389: PUSH
37390: LD_VAR 0 10
37394: PPUSH
37395: LD_INT 1
37397: PPUSH
37398: CALL_OW 3
37402: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
37403: LD_VAR 0 2
37407: PPUSH
37408: LD_VAR 0 5
37412: PPUSH
37413: CALL 37722 0 2
37417: PUSH
37418: LD_VAR 0 10
37422: PUSH
37423: EMPTY
37424: EQUAL
37425: OR
37426: IFFALSE 37371
// result := [ ] ;
37428: LD_ADDR_VAR 0 6
37432: PUSH
37433: EMPTY
37434: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37435: LD_VAR 0 1
37439: PPUSH
37440: LD_VAR 0 2
37444: PPUSH
37445: LD_VAR 0 3
37449: PPUSH
37450: LD_VAR 0 4
37454: PPUSH
37455: LD_VAR 0 5
37459: PPUSH
37460: CALL_OW 448
37464: IFFALSE 37497
// result := [ chassis , engine , control , weapon ] ;
37466: LD_ADDR_VAR 0 6
37470: PUSH
37471: LD_VAR 0 2
37475: PUSH
37476: LD_VAR 0 3
37480: PUSH
37481: LD_VAR 0 4
37485: PUSH
37486: LD_VAR 0 5
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: ST_TO_ADDR
// end ;
37497: LD_VAR 0 6
37501: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
37502: LD_INT 0
37504: PPUSH
// if not chassis or not engine then
37505: LD_VAR 0 1
37509: NOT
37510: PUSH
37511: LD_VAR 0 2
37515: NOT
37516: OR
37517: IFFALSE 37521
// exit ;
37519: GO 37717
// case engine of engine_solar :
37521: LD_VAR 0 2
37525: PUSH
37526: LD_INT 2
37528: DOUBLE
37529: EQUAL
37530: IFTRUE 37534
37532: GO 37572
37534: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
37535: LD_ADDR_VAR 0 3
37539: PUSH
37540: LD_INT 11
37542: PUSH
37543: LD_INT 12
37545: PUSH
37546: LD_INT 13
37548: PUSH
37549: LD_INT 14
37551: PUSH
37552: LD_INT 1
37554: PUSH
37555: LD_INT 2
37557: PUSH
37558: LD_INT 3
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: ST_TO_ADDR
37570: GO 37701
37572: LD_INT 1
37574: DOUBLE
37575: EQUAL
37576: IFTRUE 37580
37578: GO 37642
37580: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
37581: LD_ADDR_VAR 0 3
37585: PUSH
37586: LD_INT 11
37588: PUSH
37589: LD_INT 12
37591: PUSH
37592: LD_INT 13
37594: PUSH
37595: LD_INT 14
37597: PUSH
37598: LD_INT 1
37600: PUSH
37601: LD_INT 2
37603: PUSH
37604: LD_INT 3
37606: PUSH
37607: LD_INT 4
37609: PUSH
37610: LD_INT 5
37612: PUSH
37613: LD_INT 21
37615: PUSH
37616: LD_INT 23
37618: PUSH
37619: LD_INT 22
37621: PUSH
37622: LD_INT 24
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: ST_TO_ADDR
37640: GO 37701
37642: LD_INT 3
37644: DOUBLE
37645: EQUAL
37646: IFTRUE 37650
37648: GO 37700
37650: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37651: LD_ADDR_VAR 0 3
37655: PUSH
37656: LD_INT 13
37658: PUSH
37659: LD_INT 14
37661: PUSH
37662: LD_INT 2
37664: PUSH
37665: LD_INT 3
37667: PUSH
37668: LD_INT 4
37670: PUSH
37671: LD_INT 5
37673: PUSH
37674: LD_INT 21
37676: PUSH
37677: LD_INT 22
37679: PUSH
37680: LD_INT 23
37682: PUSH
37683: LD_INT 24
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: ST_TO_ADDR
37698: GO 37701
37700: POP
// result := ( chassis in result ) ;
37701: LD_ADDR_VAR 0 3
37705: PUSH
37706: LD_VAR 0 1
37710: PUSH
37711: LD_VAR 0 3
37715: IN
37716: ST_TO_ADDR
// end ;
37717: LD_VAR 0 3
37721: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
37722: LD_INT 0
37724: PPUSH
// if not chassis or not weapon then
37725: LD_VAR 0 1
37729: NOT
37730: PUSH
37731: LD_VAR 0 2
37735: NOT
37736: OR
37737: IFFALSE 37741
// exit ;
37739: GO 38767
// case weapon of us_machine_gun :
37741: LD_VAR 0 2
37745: PUSH
37746: LD_INT 2
37748: DOUBLE
37749: EQUAL
37750: IFTRUE 37754
37752: GO 37784
37754: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
37755: LD_ADDR_VAR 0 3
37759: PUSH
37760: LD_INT 1
37762: PUSH
37763: LD_INT 2
37765: PUSH
37766: LD_INT 3
37768: PUSH
37769: LD_INT 4
37771: PUSH
37772: LD_INT 5
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: ST_TO_ADDR
37782: GO 38751
37784: LD_INT 3
37786: DOUBLE
37787: EQUAL
37788: IFTRUE 37792
37790: GO 37822
37792: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
37793: LD_ADDR_VAR 0 3
37797: PUSH
37798: LD_INT 1
37800: PUSH
37801: LD_INT 2
37803: PUSH
37804: LD_INT 3
37806: PUSH
37807: LD_INT 4
37809: PUSH
37810: LD_INT 5
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: ST_TO_ADDR
37820: GO 38751
37822: LD_INT 11
37824: DOUBLE
37825: EQUAL
37826: IFTRUE 37830
37828: GO 37860
37830: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37831: LD_ADDR_VAR 0 3
37835: PUSH
37836: LD_INT 1
37838: PUSH
37839: LD_INT 2
37841: PUSH
37842: LD_INT 3
37844: PUSH
37845: LD_INT 4
37847: PUSH
37848: LD_INT 5
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: ST_TO_ADDR
37858: GO 38751
37860: LD_INT 4
37862: DOUBLE
37863: EQUAL
37864: IFTRUE 37868
37866: GO 37894
37868: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37869: LD_ADDR_VAR 0 3
37873: PUSH
37874: LD_INT 2
37876: PUSH
37877: LD_INT 3
37879: PUSH
37880: LD_INT 4
37882: PUSH
37883: LD_INT 5
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: ST_TO_ADDR
37892: GO 38751
37894: LD_INT 5
37896: DOUBLE
37897: EQUAL
37898: IFTRUE 37902
37900: GO 37928
37902: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37903: LD_ADDR_VAR 0 3
37907: PUSH
37908: LD_INT 2
37910: PUSH
37911: LD_INT 3
37913: PUSH
37914: LD_INT 4
37916: PUSH
37917: LD_INT 5
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: ST_TO_ADDR
37926: GO 38751
37928: LD_INT 9
37930: DOUBLE
37931: EQUAL
37932: IFTRUE 37936
37934: GO 37962
37936: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37937: LD_ADDR_VAR 0 3
37941: PUSH
37942: LD_INT 2
37944: PUSH
37945: LD_INT 3
37947: PUSH
37948: LD_INT 4
37950: PUSH
37951: LD_INT 5
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: ST_TO_ADDR
37960: GO 38751
37962: LD_INT 7
37964: DOUBLE
37965: EQUAL
37966: IFTRUE 37970
37968: GO 37996
37970: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37971: LD_ADDR_VAR 0 3
37975: PUSH
37976: LD_INT 2
37978: PUSH
37979: LD_INT 3
37981: PUSH
37982: LD_INT 4
37984: PUSH
37985: LD_INT 5
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: ST_TO_ADDR
37994: GO 38751
37996: LD_INT 12
37998: DOUBLE
37999: EQUAL
38000: IFTRUE 38004
38002: GO 38030
38004: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
38005: LD_ADDR_VAR 0 3
38009: PUSH
38010: LD_INT 2
38012: PUSH
38013: LD_INT 3
38015: PUSH
38016: LD_INT 4
38018: PUSH
38019: LD_INT 5
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: ST_TO_ADDR
38028: GO 38751
38030: LD_INT 13
38032: DOUBLE
38033: EQUAL
38034: IFTRUE 38038
38036: GO 38064
38038: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
38039: LD_ADDR_VAR 0 3
38043: PUSH
38044: LD_INT 2
38046: PUSH
38047: LD_INT 3
38049: PUSH
38050: LD_INT 4
38052: PUSH
38053: LD_INT 5
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: ST_TO_ADDR
38062: GO 38751
38064: LD_INT 14
38066: DOUBLE
38067: EQUAL
38068: IFTRUE 38072
38070: GO 38090
38072: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
38073: LD_ADDR_VAR 0 3
38077: PUSH
38078: LD_INT 4
38080: PUSH
38081: LD_INT 5
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: ST_TO_ADDR
38088: GO 38751
38090: LD_INT 6
38092: DOUBLE
38093: EQUAL
38094: IFTRUE 38098
38096: GO 38116
38098: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
38099: LD_ADDR_VAR 0 3
38103: PUSH
38104: LD_INT 4
38106: PUSH
38107: LD_INT 5
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: ST_TO_ADDR
38114: GO 38751
38116: LD_INT 10
38118: DOUBLE
38119: EQUAL
38120: IFTRUE 38124
38122: GO 38142
38124: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
38125: LD_ADDR_VAR 0 3
38129: PUSH
38130: LD_INT 4
38132: PUSH
38133: LD_INT 5
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: ST_TO_ADDR
38140: GO 38751
38142: LD_INT 22
38144: DOUBLE
38145: EQUAL
38146: IFTRUE 38150
38148: GO 38176
38150: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
38151: LD_ADDR_VAR 0 3
38155: PUSH
38156: LD_INT 11
38158: PUSH
38159: LD_INT 12
38161: PUSH
38162: LD_INT 13
38164: PUSH
38165: LD_INT 14
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: ST_TO_ADDR
38174: GO 38751
38176: LD_INT 23
38178: DOUBLE
38179: EQUAL
38180: IFTRUE 38184
38182: GO 38210
38184: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
38185: LD_ADDR_VAR 0 3
38189: PUSH
38190: LD_INT 11
38192: PUSH
38193: LD_INT 12
38195: PUSH
38196: LD_INT 13
38198: PUSH
38199: LD_INT 14
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: ST_TO_ADDR
38208: GO 38751
38210: LD_INT 24
38212: DOUBLE
38213: EQUAL
38214: IFTRUE 38218
38216: GO 38244
38218: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
38219: LD_ADDR_VAR 0 3
38223: PUSH
38224: LD_INT 11
38226: PUSH
38227: LD_INT 12
38229: PUSH
38230: LD_INT 13
38232: PUSH
38233: LD_INT 14
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: ST_TO_ADDR
38242: GO 38751
38244: LD_INT 30
38246: DOUBLE
38247: EQUAL
38248: IFTRUE 38252
38250: GO 38278
38252: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
38253: LD_ADDR_VAR 0 3
38257: PUSH
38258: LD_INT 11
38260: PUSH
38261: LD_INT 12
38263: PUSH
38264: LD_INT 13
38266: PUSH
38267: LD_INT 14
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: ST_TO_ADDR
38276: GO 38751
38278: LD_INT 25
38280: DOUBLE
38281: EQUAL
38282: IFTRUE 38286
38284: GO 38304
38286: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
38287: LD_ADDR_VAR 0 3
38291: PUSH
38292: LD_INT 13
38294: PUSH
38295: LD_INT 14
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: ST_TO_ADDR
38302: GO 38751
38304: LD_INT 27
38306: DOUBLE
38307: EQUAL
38308: IFTRUE 38312
38310: GO 38330
38312: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
38313: LD_ADDR_VAR 0 3
38317: PUSH
38318: LD_INT 13
38320: PUSH
38321: LD_INT 14
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: ST_TO_ADDR
38328: GO 38751
38330: LD_INT 28
38332: DOUBLE
38333: EQUAL
38334: IFTRUE 38338
38336: GO 38356
38338: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
38339: LD_ADDR_VAR 0 3
38343: PUSH
38344: LD_INT 13
38346: PUSH
38347: LD_INT 14
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: ST_TO_ADDR
38354: GO 38751
38356: LD_INT 29
38358: DOUBLE
38359: EQUAL
38360: IFTRUE 38364
38362: GO 38382
38364: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
38365: LD_ADDR_VAR 0 3
38369: PUSH
38370: LD_INT 13
38372: PUSH
38373: LD_INT 14
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: ST_TO_ADDR
38380: GO 38751
38382: LD_INT 31
38384: DOUBLE
38385: EQUAL
38386: IFTRUE 38390
38388: GO 38408
38390: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
38391: LD_ADDR_VAR 0 3
38395: PUSH
38396: LD_INT 13
38398: PUSH
38399: LD_INT 14
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: ST_TO_ADDR
38406: GO 38751
38408: LD_INT 26
38410: DOUBLE
38411: EQUAL
38412: IFTRUE 38416
38414: GO 38434
38416: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
38417: LD_ADDR_VAR 0 3
38421: PUSH
38422: LD_INT 13
38424: PUSH
38425: LD_INT 14
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: ST_TO_ADDR
38432: GO 38751
38434: LD_INT 42
38436: DOUBLE
38437: EQUAL
38438: IFTRUE 38442
38440: GO 38468
38442: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
38443: LD_ADDR_VAR 0 3
38447: PUSH
38448: LD_INT 21
38450: PUSH
38451: LD_INT 22
38453: PUSH
38454: LD_INT 23
38456: PUSH
38457: LD_INT 24
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: ST_TO_ADDR
38466: GO 38751
38468: LD_INT 43
38470: DOUBLE
38471: EQUAL
38472: IFTRUE 38476
38474: GO 38502
38476: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
38477: LD_ADDR_VAR 0 3
38481: PUSH
38482: LD_INT 21
38484: PUSH
38485: LD_INT 22
38487: PUSH
38488: LD_INT 23
38490: PUSH
38491: LD_INT 24
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: ST_TO_ADDR
38500: GO 38751
38502: LD_INT 44
38504: DOUBLE
38505: EQUAL
38506: IFTRUE 38510
38508: GO 38536
38510: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
38511: LD_ADDR_VAR 0 3
38515: PUSH
38516: LD_INT 21
38518: PUSH
38519: LD_INT 22
38521: PUSH
38522: LD_INT 23
38524: PUSH
38525: LD_INT 24
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: ST_TO_ADDR
38534: GO 38751
38536: LD_INT 45
38538: DOUBLE
38539: EQUAL
38540: IFTRUE 38544
38542: GO 38570
38544: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
38545: LD_ADDR_VAR 0 3
38549: PUSH
38550: LD_INT 21
38552: PUSH
38553: LD_INT 22
38555: PUSH
38556: LD_INT 23
38558: PUSH
38559: LD_INT 24
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: ST_TO_ADDR
38568: GO 38751
38570: LD_INT 49
38572: DOUBLE
38573: EQUAL
38574: IFTRUE 38578
38576: GO 38604
38578: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
38579: LD_ADDR_VAR 0 3
38583: PUSH
38584: LD_INT 21
38586: PUSH
38587: LD_INT 22
38589: PUSH
38590: LD_INT 23
38592: PUSH
38593: LD_INT 24
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: ST_TO_ADDR
38602: GO 38751
38604: LD_INT 51
38606: DOUBLE
38607: EQUAL
38608: IFTRUE 38612
38610: GO 38638
38612: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
38613: LD_ADDR_VAR 0 3
38617: PUSH
38618: LD_INT 21
38620: PUSH
38621: LD_INT 22
38623: PUSH
38624: LD_INT 23
38626: PUSH
38627: LD_INT 24
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: ST_TO_ADDR
38636: GO 38751
38638: LD_INT 52
38640: DOUBLE
38641: EQUAL
38642: IFTRUE 38646
38644: GO 38672
38646: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
38647: LD_ADDR_VAR 0 3
38651: PUSH
38652: LD_INT 21
38654: PUSH
38655: LD_INT 22
38657: PUSH
38658: LD_INT 23
38660: PUSH
38661: LD_INT 24
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: ST_TO_ADDR
38670: GO 38751
38672: LD_INT 53
38674: DOUBLE
38675: EQUAL
38676: IFTRUE 38680
38678: GO 38698
38680: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
38681: LD_ADDR_VAR 0 3
38685: PUSH
38686: LD_INT 23
38688: PUSH
38689: LD_INT 24
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: ST_TO_ADDR
38696: GO 38751
38698: LD_INT 46
38700: DOUBLE
38701: EQUAL
38702: IFTRUE 38706
38704: GO 38724
38706: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
38707: LD_ADDR_VAR 0 3
38711: PUSH
38712: LD_INT 23
38714: PUSH
38715: LD_INT 24
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: ST_TO_ADDR
38722: GO 38751
38724: LD_INT 47
38726: DOUBLE
38727: EQUAL
38728: IFTRUE 38732
38730: GO 38750
38732: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38733: LD_ADDR_VAR 0 3
38737: PUSH
38738: LD_INT 23
38740: PUSH
38741: LD_INT 24
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: ST_TO_ADDR
38748: GO 38751
38750: POP
// result := ( chassis in result ) ;
38751: LD_ADDR_VAR 0 3
38755: PUSH
38756: LD_VAR 0 1
38760: PUSH
38761: LD_VAR 0 3
38765: IN
38766: ST_TO_ADDR
// end ;
38767: LD_VAR 0 3
38771: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
38772: LD_INT 0
38774: PPUSH
38775: PPUSH
38776: PPUSH
38777: PPUSH
38778: PPUSH
38779: PPUSH
38780: PPUSH
// result := array ;
38781: LD_ADDR_VAR 0 5
38785: PUSH
38786: LD_VAR 0 1
38790: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38791: LD_VAR 0 1
38795: NOT
38796: PUSH
38797: LD_VAR 0 2
38801: NOT
38802: OR
38803: PUSH
38804: LD_VAR 0 3
38808: NOT
38809: OR
38810: PUSH
38811: LD_VAR 0 2
38815: PUSH
38816: LD_VAR 0 1
38820: GREATER
38821: OR
38822: PUSH
38823: LD_VAR 0 3
38827: PUSH
38828: LD_VAR 0 1
38832: GREATER
38833: OR
38834: IFFALSE 38838
// exit ;
38836: GO 39134
// if direction then
38838: LD_VAR 0 4
38842: IFFALSE 38906
// begin d := 1 ;
38844: LD_ADDR_VAR 0 9
38848: PUSH
38849: LD_INT 1
38851: ST_TO_ADDR
// if i_from > i_to then
38852: LD_VAR 0 2
38856: PUSH
38857: LD_VAR 0 3
38861: GREATER
38862: IFFALSE 38888
// length := ( array - i_from ) + i_to else
38864: LD_ADDR_VAR 0 11
38868: PUSH
38869: LD_VAR 0 1
38873: PUSH
38874: LD_VAR 0 2
38878: MINUS
38879: PUSH
38880: LD_VAR 0 3
38884: PLUS
38885: ST_TO_ADDR
38886: GO 38904
// length := i_to - i_from ;
38888: LD_ADDR_VAR 0 11
38892: PUSH
38893: LD_VAR 0 3
38897: PUSH
38898: LD_VAR 0 2
38902: MINUS
38903: ST_TO_ADDR
// end else
38904: GO 38967
// begin d := - 1 ;
38906: LD_ADDR_VAR 0 9
38910: PUSH
38911: LD_INT 1
38913: NEG
38914: ST_TO_ADDR
// if i_from > i_to then
38915: LD_VAR 0 2
38919: PUSH
38920: LD_VAR 0 3
38924: GREATER
38925: IFFALSE 38945
// length := i_from - i_to else
38927: LD_ADDR_VAR 0 11
38931: PUSH
38932: LD_VAR 0 2
38936: PUSH
38937: LD_VAR 0 3
38941: MINUS
38942: ST_TO_ADDR
38943: GO 38967
// length := ( array - i_to ) + i_from ;
38945: LD_ADDR_VAR 0 11
38949: PUSH
38950: LD_VAR 0 1
38954: PUSH
38955: LD_VAR 0 3
38959: MINUS
38960: PUSH
38961: LD_VAR 0 2
38965: PLUS
38966: ST_TO_ADDR
// end ; if not length then
38967: LD_VAR 0 11
38971: NOT
38972: IFFALSE 38976
// exit ;
38974: GO 39134
// tmp := array ;
38976: LD_ADDR_VAR 0 10
38980: PUSH
38981: LD_VAR 0 1
38985: ST_TO_ADDR
// for i = 1 to length do
38986: LD_ADDR_VAR 0 6
38990: PUSH
38991: DOUBLE
38992: LD_INT 1
38994: DEC
38995: ST_TO_ADDR
38996: LD_VAR 0 11
39000: PUSH
39001: FOR_TO
39002: IFFALSE 39122
// begin for j = 1 to array do
39004: LD_ADDR_VAR 0 7
39008: PUSH
39009: DOUBLE
39010: LD_INT 1
39012: DEC
39013: ST_TO_ADDR
39014: LD_VAR 0 1
39018: PUSH
39019: FOR_TO
39020: IFFALSE 39108
// begin k := j + d ;
39022: LD_ADDR_VAR 0 8
39026: PUSH
39027: LD_VAR 0 7
39031: PUSH
39032: LD_VAR 0 9
39036: PLUS
39037: ST_TO_ADDR
// if k > array then
39038: LD_VAR 0 8
39042: PUSH
39043: LD_VAR 0 1
39047: GREATER
39048: IFFALSE 39058
// k := 1 ;
39050: LD_ADDR_VAR 0 8
39054: PUSH
39055: LD_INT 1
39057: ST_TO_ADDR
// if not k then
39058: LD_VAR 0 8
39062: NOT
39063: IFFALSE 39075
// k := array ;
39065: LD_ADDR_VAR 0 8
39069: PUSH
39070: LD_VAR 0 1
39074: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
39075: LD_ADDR_VAR 0 10
39079: PUSH
39080: LD_VAR 0 10
39084: PPUSH
39085: LD_VAR 0 8
39089: PPUSH
39090: LD_VAR 0 1
39094: PUSH
39095: LD_VAR 0 7
39099: ARRAY
39100: PPUSH
39101: CALL_OW 1
39105: ST_TO_ADDR
// end ;
39106: GO 39019
39108: POP
39109: POP
// array := tmp ;
39110: LD_ADDR_VAR 0 1
39114: PUSH
39115: LD_VAR 0 10
39119: ST_TO_ADDR
// end ;
39120: GO 39001
39122: POP
39123: POP
// result := array ;
39124: LD_ADDR_VAR 0 5
39128: PUSH
39129: LD_VAR 0 1
39133: ST_TO_ADDR
// end ;
39134: LD_VAR 0 5
39138: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
39139: LD_INT 0
39141: PPUSH
39142: PPUSH
// result := 0 ;
39143: LD_ADDR_VAR 0 3
39147: PUSH
39148: LD_INT 0
39150: ST_TO_ADDR
// if not array or not value in array then
39151: LD_VAR 0 1
39155: NOT
39156: PUSH
39157: LD_VAR 0 2
39161: PUSH
39162: LD_VAR 0 1
39166: IN
39167: NOT
39168: OR
39169: IFFALSE 39173
// exit ;
39171: GO 39227
// for i = 1 to array do
39173: LD_ADDR_VAR 0 4
39177: PUSH
39178: DOUBLE
39179: LD_INT 1
39181: DEC
39182: ST_TO_ADDR
39183: LD_VAR 0 1
39187: PUSH
39188: FOR_TO
39189: IFFALSE 39225
// if value = array [ i ] then
39191: LD_VAR 0 2
39195: PUSH
39196: LD_VAR 0 1
39200: PUSH
39201: LD_VAR 0 4
39205: ARRAY
39206: EQUAL
39207: IFFALSE 39223
// begin result := i ;
39209: LD_ADDR_VAR 0 3
39213: PUSH
39214: LD_VAR 0 4
39218: ST_TO_ADDR
// exit ;
39219: POP
39220: POP
39221: GO 39227
// end ;
39223: GO 39188
39225: POP
39226: POP
// end ;
39227: LD_VAR 0 3
39231: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
39232: LD_INT 0
39234: PPUSH
// vc_chassis := chassis ;
39235: LD_ADDR_OWVAR 37
39239: PUSH
39240: LD_VAR 0 1
39244: ST_TO_ADDR
// vc_engine := engine ;
39245: LD_ADDR_OWVAR 39
39249: PUSH
39250: LD_VAR 0 2
39254: ST_TO_ADDR
// vc_control := control ;
39255: LD_ADDR_OWVAR 38
39259: PUSH
39260: LD_VAR 0 3
39264: ST_TO_ADDR
// vc_weapon := weapon ;
39265: LD_ADDR_OWVAR 40
39269: PUSH
39270: LD_VAR 0 4
39274: ST_TO_ADDR
// vc_fuel_battery := fuel ;
39275: LD_ADDR_OWVAR 41
39279: PUSH
39280: LD_VAR 0 5
39284: ST_TO_ADDR
// end ;
39285: LD_VAR 0 6
39289: RET
// export function WantPlant ( unit ) ; var task ; begin
39290: LD_INT 0
39292: PPUSH
39293: PPUSH
// result := false ;
39294: LD_ADDR_VAR 0 2
39298: PUSH
39299: LD_INT 0
39301: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
39302: LD_ADDR_VAR 0 3
39306: PUSH
39307: LD_VAR 0 1
39311: PPUSH
39312: CALL_OW 437
39316: ST_TO_ADDR
// if task then
39317: LD_VAR 0 3
39321: IFFALSE 39349
// if task [ 1 ] [ 1 ] = p then
39323: LD_VAR 0 3
39327: PUSH
39328: LD_INT 1
39330: ARRAY
39331: PUSH
39332: LD_INT 1
39334: ARRAY
39335: PUSH
39336: LD_STRING p
39338: EQUAL
39339: IFFALSE 39349
// result := true ;
39341: LD_ADDR_VAR 0 2
39345: PUSH
39346: LD_INT 1
39348: ST_TO_ADDR
// end ;
39349: LD_VAR 0 2
39353: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
39354: LD_INT 0
39356: PPUSH
39357: PPUSH
39358: PPUSH
39359: PPUSH
// if pos < 1 then
39360: LD_VAR 0 2
39364: PUSH
39365: LD_INT 1
39367: LESS
39368: IFFALSE 39372
// exit ;
39370: GO 39675
// if pos = 1 then
39372: LD_VAR 0 2
39376: PUSH
39377: LD_INT 1
39379: EQUAL
39380: IFFALSE 39413
// result := Replace ( arr , pos [ 1 ] , value ) else
39382: LD_ADDR_VAR 0 4
39386: PUSH
39387: LD_VAR 0 1
39391: PPUSH
39392: LD_VAR 0 2
39396: PUSH
39397: LD_INT 1
39399: ARRAY
39400: PPUSH
39401: LD_VAR 0 3
39405: PPUSH
39406: CALL_OW 1
39410: ST_TO_ADDR
39411: GO 39675
// begin tmp := arr ;
39413: LD_ADDR_VAR 0 6
39417: PUSH
39418: LD_VAR 0 1
39422: ST_TO_ADDR
// s_arr := [ tmp ] ;
39423: LD_ADDR_VAR 0 7
39427: PUSH
39428: LD_VAR 0 6
39432: PUSH
39433: EMPTY
39434: LIST
39435: ST_TO_ADDR
// for i = 1 to pos - 1 do
39436: LD_ADDR_VAR 0 5
39440: PUSH
39441: DOUBLE
39442: LD_INT 1
39444: DEC
39445: ST_TO_ADDR
39446: LD_VAR 0 2
39450: PUSH
39451: LD_INT 1
39453: MINUS
39454: PUSH
39455: FOR_TO
39456: IFFALSE 39501
// begin tmp := tmp [ pos [ i ] ] ;
39458: LD_ADDR_VAR 0 6
39462: PUSH
39463: LD_VAR 0 6
39467: PUSH
39468: LD_VAR 0 2
39472: PUSH
39473: LD_VAR 0 5
39477: ARRAY
39478: ARRAY
39479: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
39480: LD_ADDR_VAR 0 7
39484: PUSH
39485: LD_VAR 0 7
39489: PUSH
39490: LD_VAR 0 6
39494: PUSH
39495: EMPTY
39496: LIST
39497: ADD
39498: ST_TO_ADDR
// end ;
39499: GO 39455
39501: POP
39502: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
39503: LD_ADDR_VAR 0 6
39507: PUSH
39508: LD_VAR 0 6
39512: PPUSH
39513: LD_VAR 0 2
39517: PUSH
39518: LD_VAR 0 2
39522: ARRAY
39523: PPUSH
39524: LD_VAR 0 3
39528: PPUSH
39529: CALL_OW 1
39533: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
39534: LD_ADDR_VAR 0 7
39538: PUSH
39539: LD_VAR 0 7
39543: PPUSH
39544: LD_VAR 0 7
39548: PPUSH
39549: LD_VAR 0 6
39553: PPUSH
39554: CALL_OW 1
39558: ST_TO_ADDR
// for i = s_arr downto 2 do
39559: LD_ADDR_VAR 0 5
39563: PUSH
39564: DOUBLE
39565: LD_VAR 0 7
39569: INC
39570: ST_TO_ADDR
39571: LD_INT 2
39573: PUSH
39574: FOR_DOWNTO
39575: IFFALSE 39659
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
39577: LD_ADDR_VAR 0 6
39581: PUSH
39582: LD_VAR 0 7
39586: PUSH
39587: LD_VAR 0 5
39591: PUSH
39592: LD_INT 1
39594: MINUS
39595: ARRAY
39596: PPUSH
39597: LD_VAR 0 2
39601: PUSH
39602: LD_VAR 0 5
39606: PUSH
39607: LD_INT 1
39609: MINUS
39610: ARRAY
39611: PPUSH
39612: LD_VAR 0 7
39616: PUSH
39617: LD_VAR 0 5
39621: ARRAY
39622: PPUSH
39623: CALL_OW 1
39627: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
39628: LD_ADDR_VAR 0 7
39632: PUSH
39633: LD_VAR 0 7
39637: PPUSH
39638: LD_VAR 0 5
39642: PUSH
39643: LD_INT 1
39645: MINUS
39646: PPUSH
39647: LD_VAR 0 6
39651: PPUSH
39652: CALL_OW 1
39656: ST_TO_ADDR
// end ;
39657: GO 39574
39659: POP
39660: POP
// result := s_arr [ 1 ] ;
39661: LD_ADDR_VAR 0 4
39665: PUSH
39666: LD_VAR 0 7
39670: PUSH
39671: LD_INT 1
39673: ARRAY
39674: ST_TO_ADDR
// end ; end ;
39675: LD_VAR 0 4
39679: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
39680: LD_INT 0
39682: PPUSH
39683: PPUSH
// if not list then
39684: LD_VAR 0 1
39688: NOT
39689: IFFALSE 39693
// exit ;
39691: GO 39784
// i := list [ pos1 ] ;
39693: LD_ADDR_VAR 0 5
39697: PUSH
39698: LD_VAR 0 1
39702: PUSH
39703: LD_VAR 0 2
39707: ARRAY
39708: ST_TO_ADDR
// if not i then
39709: LD_VAR 0 5
39713: NOT
39714: IFFALSE 39718
// exit ;
39716: GO 39784
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
39718: LD_ADDR_VAR 0 1
39722: PUSH
39723: LD_VAR 0 1
39727: PPUSH
39728: LD_VAR 0 2
39732: PPUSH
39733: LD_VAR 0 1
39737: PUSH
39738: LD_VAR 0 3
39742: ARRAY
39743: PPUSH
39744: CALL_OW 1
39748: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
39749: LD_ADDR_VAR 0 1
39753: PUSH
39754: LD_VAR 0 1
39758: PPUSH
39759: LD_VAR 0 3
39763: PPUSH
39764: LD_VAR 0 5
39768: PPUSH
39769: CALL_OW 1
39773: ST_TO_ADDR
// result := list ;
39774: LD_ADDR_VAR 0 4
39778: PUSH
39779: LD_VAR 0 1
39783: ST_TO_ADDR
// end ;
39784: LD_VAR 0 4
39788: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39789: LD_INT 0
39791: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39792: LD_ADDR_VAR 0 5
39796: PUSH
39797: LD_VAR 0 1
39801: PPUSH
39802: CALL_OW 250
39806: PPUSH
39807: LD_VAR 0 1
39811: PPUSH
39812: CALL_OW 251
39816: PPUSH
39817: LD_VAR 0 2
39821: PPUSH
39822: LD_VAR 0 3
39826: PPUSH
39827: LD_VAR 0 4
39831: PPUSH
39832: CALL 39842 0 5
39836: ST_TO_ADDR
// end ;
39837: LD_VAR 0 5
39841: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39842: LD_INT 0
39844: PPUSH
39845: PPUSH
39846: PPUSH
39847: PPUSH
// if not list then
39848: LD_VAR 0 3
39852: NOT
39853: IFFALSE 39857
// exit ;
39855: GO 40245
// result := [ ] ;
39857: LD_ADDR_VAR 0 6
39861: PUSH
39862: EMPTY
39863: ST_TO_ADDR
// for i in list do
39864: LD_ADDR_VAR 0 7
39868: PUSH
39869: LD_VAR 0 3
39873: PUSH
39874: FOR_IN
39875: IFFALSE 40077
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39877: LD_ADDR_VAR 0 9
39881: PUSH
39882: LD_VAR 0 7
39886: PPUSH
39887: LD_VAR 0 1
39891: PPUSH
39892: LD_VAR 0 2
39896: PPUSH
39897: CALL_OW 297
39901: ST_TO_ADDR
// if not result then
39902: LD_VAR 0 6
39906: NOT
39907: IFFALSE 39933
// result := [ [ i , tmp ] ] else
39909: LD_ADDR_VAR 0 6
39913: PUSH
39914: LD_VAR 0 7
39918: PUSH
39919: LD_VAR 0 9
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: EMPTY
39929: LIST
39930: ST_TO_ADDR
39931: GO 40075
// begin if result [ result ] [ 2 ] < tmp then
39933: LD_VAR 0 6
39937: PUSH
39938: LD_VAR 0 6
39942: ARRAY
39943: PUSH
39944: LD_INT 2
39946: ARRAY
39947: PUSH
39948: LD_VAR 0 9
39952: LESS
39953: IFFALSE 39995
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39955: LD_ADDR_VAR 0 6
39959: PUSH
39960: LD_VAR 0 6
39964: PPUSH
39965: LD_VAR 0 6
39969: PUSH
39970: LD_INT 1
39972: PLUS
39973: PPUSH
39974: LD_VAR 0 7
39978: PUSH
39979: LD_VAR 0 9
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PPUSH
39988: CALL_OW 2
39992: ST_TO_ADDR
39993: GO 40075
// for j = 1 to result do
39995: LD_ADDR_VAR 0 8
39999: PUSH
40000: DOUBLE
40001: LD_INT 1
40003: DEC
40004: ST_TO_ADDR
40005: LD_VAR 0 6
40009: PUSH
40010: FOR_TO
40011: IFFALSE 40073
// begin if tmp < result [ j ] [ 2 ] then
40013: LD_VAR 0 9
40017: PUSH
40018: LD_VAR 0 6
40022: PUSH
40023: LD_VAR 0 8
40027: ARRAY
40028: PUSH
40029: LD_INT 2
40031: ARRAY
40032: LESS
40033: IFFALSE 40071
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40035: LD_ADDR_VAR 0 6
40039: PUSH
40040: LD_VAR 0 6
40044: PPUSH
40045: LD_VAR 0 8
40049: PPUSH
40050: LD_VAR 0 7
40054: PUSH
40055: LD_VAR 0 9
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PPUSH
40064: CALL_OW 2
40068: ST_TO_ADDR
// break ;
40069: GO 40073
// end ; end ;
40071: GO 40010
40073: POP
40074: POP
// end ; end ;
40075: GO 39874
40077: POP
40078: POP
// if result and not asc then
40079: LD_VAR 0 6
40083: PUSH
40084: LD_VAR 0 4
40088: NOT
40089: AND
40090: IFFALSE 40165
// begin tmp := result ;
40092: LD_ADDR_VAR 0 9
40096: PUSH
40097: LD_VAR 0 6
40101: ST_TO_ADDR
// for i = tmp downto 1 do
40102: LD_ADDR_VAR 0 7
40106: PUSH
40107: DOUBLE
40108: LD_VAR 0 9
40112: INC
40113: ST_TO_ADDR
40114: LD_INT 1
40116: PUSH
40117: FOR_DOWNTO
40118: IFFALSE 40163
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
40120: LD_ADDR_VAR 0 6
40124: PUSH
40125: LD_VAR 0 6
40129: PPUSH
40130: LD_VAR 0 9
40134: PUSH
40135: LD_VAR 0 7
40139: MINUS
40140: PUSH
40141: LD_INT 1
40143: PLUS
40144: PPUSH
40145: LD_VAR 0 9
40149: PUSH
40150: LD_VAR 0 7
40154: ARRAY
40155: PPUSH
40156: CALL_OW 1
40160: ST_TO_ADDR
40161: GO 40117
40163: POP
40164: POP
// end ; tmp := [ ] ;
40165: LD_ADDR_VAR 0 9
40169: PUSH
40170: EMPTY
40171: ST_TO_ADDR
// if mode then
40172: LD_VAR 0 5
40176: IFFALSE 40245
// begin for i = 1 to result do
40178: LD_ADDR_VAR 0 7
40182: PUSH
40183: DOUBLE
40184: LD_INT 1
40186: DEC
40187: ST_TO_ADDR
40188: LD_VAR 0 6
40192: PUSH
40193: FOR_TO
40194: IFFALSE 40233
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
40196: LD_ADDR_VAR 0 9
40200: PUSH
40201: LD_VAR 0 9
40205: PPUSH
40206: LD_VAR 0 7
40210: PPUSH
40211: LD_VAR 0 6
40215: PUSH
40216: LD_VAR 0 7
40220: ARRAY
40221: PUSH
40222: LD_INT 1
40224: ARRAY
40225: PPUSH
40226: CALL_OW 1
40230: ST_TO_ADDR
40231: GO 40193
40233: POP
40234: POP
// result := tmp ;
40235: LD_ADDR_VAR 0 6
40239: PUSH
40240: LD_VAR 0 9
40244: ST_TO_ADDR
// end ; end ;
40245: LD_VAR 0 6
40249: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
40250: LD_INT 0
40252: PPUSH
40253: PPUSH
40254: PPUSH
40255: PPUSH
40256: PPUSH
40257: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
40258: LD_ADDR_VAR 0 5
40262: PUSH
40263: LD_INT 0
40265: PUSH
40266: LD_INT 0
40268: PUSH
40269: LD_INT 0
40271: PUSH
40272: EMPTY
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: ST_TO_ADDR
// if not x or not y then
40280: LD_VAR 0 2
40284: NOT
40285: PUSH
40286: LD_VAR 0 3
40290: NOT
40291: OR
40292: IFFALSE 40296
// exit ;
40294: GO 41942
// if not range then
40296: LD_VAR 0 4
40300: NOT
40301: IFFALSE 40311
// range := 10 ;
40303: LD_ADDR_VAR 0 4
40307: PUSH
40308: LD_INT 10
40310: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40311: LD_ADDR_VAR 0 8
40315: PUSH
40316: LD_INT 81
40318: PUSH
40319: LD_VAR 0 1
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 92
40330: PUSH
40331: LD_VAR 0 2
40335: PUSH
40336: LD_VAR 0 3
40340: PUSH
40341: LD_VAR 0 4
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 3
40354: PUSH
40355: LD_INT 21
40357: PUSH
40358: LD_INT 3
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: LIST
40373: PPUSH
40374: CALL_OW 69
40378: ST_TO_ADDR
// if not tmp then
40379: LD_VAR 0 8
40383: NOT
40384: IFFALSE 40388
// exit ;
40386: GO 41942
// for i in tmp do
40388: LD_ADDR_VAR 0 6
40392: PUSH
40393: LD_VAR 0 8
40397: PUSH
40398: FOR_IN
40399: IFFALSE 41917
// begin points := [ 0 , 0 , 0 ] ;
40401: LD_ADDR_VAR 0 9
40405: PUSH
40406: LD_INT 0
40408: PUSH
40409: LD_INT 0
40411: PUSH
40412: LD_INT 0
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: LIST
40419: ST_TO_ADDR
// bpoints := 1 ;
40420: LD_ADDR_VAR 0 10
40424: PUSH
40425: LD_INT 1
40427: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40428: LD_VAR 0 6
40432: PPUSH
40433: CALL_OW 247
40437: PUSH
40438: LD_INT 1
40440: DOUBLE
40441: EQUAL
40442: IFTRUE 40446
40444: GO 41024
40446: POP
// begin if GetClass ( i ) = 1 then
40447: LD_VAR 0 6
40451: PPUSH
40452: CALL_OW 257
40456: PUSH
40457: LD_INT 1
40459: EQUAL
40460: IFFALSE 40481
// points := [ 10 , 5 , 3 ] ;
40462: LD_ADDR_VAR 0 9
40466: PUSH
40467: LD_INT 10
40469: PUSH
40470: LD_INT 5
40472: PUSH
40473: LD_INT 3
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: LIST
40480: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40481: LD_VAR 0 6
40485: PPUSH
40486: CALL_OW 257
40490: PUSH
40491: LD_INT 2
40493: PUSH
40494: LD_INT 3
40496: PUSH
40497: LD_INT 4
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: LIST
40504: IN
40505: IFFALSE 40526
// points := [ 3 , 2 , 1 ] ;
40507: LD_ADDR_VAR 0 9
40511: PUSH
40512: LD_INT 3
40514: PUSH
40515: LD_INT 2
40517: PUSH
40518: LD_INT 1
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: LIST
40525: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40526: LD_VAR 0 6
40530: PPUSH
40531: CALL_OW 257
40535: PUSH
40536: LD_INT 5
40538: EQUAL
40539: IFFALSE 40560
// points := [ 130 , 5 , 2 ] ;
40541: LD_ADDR_VAR 0 9
40545: PUSH
40546: LD_INT 130
40548: PUSH
40549: LD_INT 5
40551: PUSH
40552: LD_INT 2
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: LIST
40559: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40560: LD_VAR 0 6
40564: PPUSH
40565: CALL_OW 257
40569: PUSH
40570: LD_INT 8
40572: EQUAL
40573: IFFALSE 40594
// points := [ 35 , 35 , 30 ] ;
40575: LD_ADDR_VAR 0 9
40579: PUSH
40580: LD_INT 35
40582: PUSH
40583: LD_INT 35
40585: PUSH
40586: LD_INT 30
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: LIST
40593: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40594: LD_VAR 0 6
40598: PPUSH
40599: CALL_OW 257
40603: PUSH
40604: LD_INT 9
40606: EQUAL
40607: IFFALSE 40628
// points := [ 20 , 55 , 40 ] ;
40609: LD_ADDR_VAR 0 9
40613: PUSH
40614: LD_INT 20
40616: PUSH
40617: LD_INT 55
40619: PUSH
40620: LD_INT 40
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: LIST
40627: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40628: LD_VAR 0 6
40632: PPUSH
40633: CALL_OW 257
40637: PUSH
40638: LD_INT 12
40640: PUSH
40641: LD_INT 16
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: IN
40648: IFFALSE 40669
// points := [ 5 , 3 , 2 ] ;
40650: LD_ADDR_VAR 0 9
40654: PUSH
40655: LD_INT 5
40657: PUSH
40658: LD_INT 3
40660: PUSH
40661: LD_INT 2
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: LIST
40668: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40669: LD_VAR 0 6
40673: PPUSH
40674: CALL_OW 257
40678: PUSH
40679: LD_INT 17
40681: EQUAL
40682: IFFALSE 40703
// points := [ 100 , 50 , 75 ] ;
40684: LD_ADDR_VAR 0 9
40688: PUSH
40689: LD_INT 100
40691: PUSH
40692: LD_INT 50
40694: PUSH
40695: LD_INT 75
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: LIST
40702: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40703: LD_VAR 0 6
40707: PPUSH
40708: CALL_OW 257
40712: PUSH
40713: LD_INT 15
40715: EQUAL
40716: IFFALSE 40737
// points := [ 10 , 5 , 3 ] ;
40718: LD_ADDR_VAR 0 9
40722: PUSH
40723: LD_INT 10
40725: PUSH
40726: LD_INT 5
40728: PUSH
40729: LD_INT 3
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: LIST
40736: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40737: LD_VAR 0 6
40741: PPUSH
40742: CALL_OW 257
40746: PUSH
40747: LD_INT 14
40749: EQUAL
40750: IFFALSE 40771
// points := [ 10 , 0 , 0 ] ;
40752: LD_ADDR_VAR 0 9
40756: PUSH
40757: LD_INT 10
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: LD_INT 0
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: LIST
40770: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40771: LD_VAR 0 6
40775: PPUSH
40776: CALL_OW 257
40780: PUSH
40781: LD_INT 11
40783: EQUAL
40784: IFFALSE 40805
// points := [ 30 , 10 , 5 ] ;
40786: LD_ADDR_VAR 0 9
40790: PUSH
40791: LD_INT 30
40793: PUSH
40794: LD_INT 10
40796: PUSH
40797: LD_INT 5
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: LIST
40804: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40805: LD_VAR 0 1
40809: PPUSH
40810: LD_INT 5
40812: PPUSH
40813: CALL_OW 321
40817: PUSH
40818: LD_INT 2
40820: EQUAL
40821: IFFALSE 40838
// bpoints := bpoints * 1.8 ;
40823: LD_ADDR_VAR 0 10
40827: PUSH
40828: LD_VAR 0 10
40832: PUSH
40833: LD_REAL  1.80000000000000E+0000
40836: MUL
40837: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40838: LD_VAR 0 6
40842: PPUSH
40843: CALL_OW 257
40847: PUSH
40848: LD_INT 1
40850: PUSH
40851: LD_INT 2
40853: PUSH
40854: LD_INT 3
40856: PUSH
40857: LD_INT 4
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: IN
40866: PUSH
40867: LD_VAR 0 1
40871: PPUSH
40872: LD_INT 51
40874: PPUSH
40875: CALL_OW 321
40879: PUSH
40880: LD_INT 2
40882: EQUAL
40883: AND
40884: IFFALSE 40901
// bpoints := bpoints * 1.2 ;
40886: LD_ADDR_VAR 0 10
40890: PUSH
40891: LD_VAR 0 10
40895: PUSH
40896: LD_REAL  1.20000000000000E+0000
40899: MUL
40900: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40901: LD_VAR 0 6
40905: PPUSH
40906: CALL_OW 257
40910: PUSH
40911: LD_INT 5
40913: PUSH
40914: LD_INT 7
40916: PUSH
40917: LD_INT 9
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: LIST
40924: IN
40925: PUSH
40926: LD_VAR 0 1
40930: PPUSH
40931: LD_INT 52
40933: PPUSH
40934: CALL_OW 321
40938: PUSH
40939: LD_INT 2
40941: EQUAL
40942: AND
40943: IFFALSE 40960
// bpoints := bpoints * 1.5 ;
40945: LD_ADDR_VAR 0 10
40949: PUSH
40950: LD_VAR 0 10
40954: PUSH
40955: LD_REAL  1.50000000000000E+0000
40958: MUL
40959: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40960: LD_VAR 0 1
40964: PPUSH
40965: LD_INT 66
40967: PPUSH
40968: CALL_OW 321
40972: PUSH
40973: LD_INT 2
40975: EQUAL
40976: IFFALSE 40993
// bpoints := bpoints * 1.1 ;
40978: LD_ADDR_VAR 0 10
40982: PUSH
40983: LD_VAR 0 10
40987: PUSH
40988: LD_REAL  1.10000000000000E+0000
40991: MUL
40992: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40993: LD_ADDR_VAR 0 10
40997: PUSH
40998: LD_VAR 0 10
41002: PUSH
41003: LD_VAR 0 6
41007: PPUSH
41008: LD_INT 1
41010: PPUSH
41011: CALL_OW 259
41015: PUSH
41016: LD_REAL  1.15000000000000E+0000
41019: MUL
41020: MUL
41021: ST_TO_ADDR
// end ; unit_vehicle :
41022: GO 41846
41024: LD_INT 2
41026: DOUBLE
41027: EQUAL
41028: IFTRUE 41032
41030: GO 41834
41032: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
41033: LD_VAR 0 6
41037: PPUSH
41038: CALL_OW 264
41042: PUSH
41043: LD_INT 2
41045: PUSH
41046: LD_INT 42
41048: PUSH
41049: LD_INT 24
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: LIST
41056: IN
41057: IFFALSE 41078
// points := [ 25 , 5 , 3 ] ;
41059: LD_ADDR_VAR 0 9
41063: PUSH
41064: LD_INT 25
41066: PUSH
41067: LD_INT 5
41069: PUSH
41070: LD_INT 3
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: LIST
41077: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
41078: LD_VAR 0 6
41082: PPUSH
41083: CALL_OW 264
41087: PUSH
41088: LD_INT 4
41090: PUSH
41091: LD_INT 43
41093: PUSH
41094: LD_INT 25
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: LIST
41101: IN
41102: IFFALSE 41123
// points := [ 40 , 15 , 5 ] ;
41104: LD_ADDR_VAR 0 9
41108: PUSH
41109: LD_INT 40
41111: PUSH
41112: LD_INT 15
41114: PUSH
41115: LD_INT 5
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: LIST
41122: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
41123: LD_VAR 0 6
41127: PPUSH
41128: CALL_OW 264
41132: PUSH
41133: LD_INT 3
41135: PUSH
41136: LD_INT 23
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: IN
41143: IFFALSE 41164
// points := [ 7 , 25 , 8 ] ;
41145: LD_ADDR_VAR 0 9
41149: PUSH
41150: LD_INT 7
41152: PUSH
41153: LD_INT 25
41155: PUSH
41156: LD_INT 8
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: LIST
41163: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
41164: LD_VAR 0 6
41168: PPUSH
41169: CALL_OW 264
41173: PUSH
41174: LD_INT 5
41176: PUSH
41177: LD_INT 27
41179: PUSH
41180: LD_INT 44
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: LIST
41187: IN
41188: IFFALSE 41209
// points := [ 14 , 50 , 16 ] ;
41190: LD_ADDR_VAR 0 9
41194: PUSH
41195: LD_INT 14
41197: PUSH
41198: LD_INT 50
41200: PUSH
41201: LD_INT 16
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: LIST
41208: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
41209: LD_VAR 0 6
41213: PPUSH
41214: CALL_OW 264
41218: PUSH
41219: LD_INT 6
41221: PUSH
41222: LD_INT 46
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: IN
41229: IFFALSE 41250
// points := [ 32 , 120 , 70 ] ;
41231: LD_ADDR_VAR 0 9
41235: PUSH
41236: LD_INT 32
41238: PUSH
41239: LD_INT 120
41241: PUSH
41242: LD_INT 70
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: LIST
41249: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
41250: LD_VAR 0 6
41254: PPUSH
41255: CALL_OW 264
41259: PUSH
41260: LD_INT 7
41262: PUSH
41263: LD_INT 28
41265: PUSH
41266: LD_INT 45
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: LIST
41273: IN
41274: IFFALSE 41295
// points := [ 35 , 20 , 45 ] ;
41276: LD_ADDR_VAR 0 9
41280: PUSH
41281: LD_INT 35
41283: PUSH
41284: LD_INT 20
41286: PUSH
41287: LD_INT 45
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: LIST
41294: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
41295: LD_VAR 0 6
41299: PPUSH
41300: CALL_OW 264
41304: PUSH
41305: LD_INT 47
41307: PUSH
41308: EMPTY
41309: LIST
41310: IN
41311: IFFALSE 41332
// points := [ 67 , 45 , 75 ] ;
41313: LD_ADDR_VAR 0 9
41317: PUSH
41318: LD_INT 67
41320: PUSH
41321: LD_INT 45
41323: PUSH
41324: LD_INT 75
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: LIST
41331: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41332: LD_VAR 0 6
41336: PPUSH
41337: CALL_OW 264
41341: PUSH
41342: LD_INT 26
41344: PUSH
41345: EMPTY
41346: LIST
41347: IN
41348: IFFALSE 41369
// points := [ 120 , 30 , 80 ] ;
41350: LD_ADDR_VAR 0 9
41354: PUSH
41355: LD_INT 120
41357: PUSH
41358: LD_INT 30
41360: PUSH
41361: LD_INT 80
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: LIST
41368: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41369: LD_VAR 0 6
41373: PPUSH
41374: CALL_OW 264
41378: PUSH
41379: LD_INT 22
41381: PUSH
41382: EMPTY
41383: LIST
41384: IN
41385: IFFALSE 41406
// points := [ 40 , 1 , 1 ] ;
41387: LD_ADDR_VAR 0 9
41391: PUSH
41392: LD_INT 40
41394: PUSH
41395: LD_INT 1
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: LIST
41405: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41406: LD_VAR 0 6
41410: PPUSH
41411: CALL_OW 264
41415: PUSH
41416: LD_INT 29
41418: PUSH
41419: EMPTY
41420: LIST
41421: IN
41422: IFFALSE 41443
// points := [ 70 , 200 , 400 ] ;
41424: LD_ADDR_VAR 0 9
41428: PUSH
41429: LD_INT 70
41431: PUSH
41432: LD_INT 200
41434: PUSH
41435: LD_INT 400
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: LIST
41442: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41443: LD_VAR 0 6
41447: PPUSH
41448: CALL_OW 264
41452: PUSH
41453: LD_INT 14
41455: PUSH
41456: LD_INT 53
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: IN
41463: IFFALSE 41484
// points := [ 40 , 10 , 20 ] ;
41465: LD_ADDR_VAR 0 9
41469: PUSH
41470: LD_INT 40
41472: PUSH
41473: LD_INT 10
41475: PUSH
41476: LD_INT 20
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: LIST
41483: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41484: LD_VAR 0 6
41488: PPUSH
41489: CALL_OW 264
41493: PUSH
41494: LD_INT 9
41496: PUSH
41497: EMPTY
41498: LIST
41499: IN
41500: IFFALSE 41521
// points := [ 5 , 70 , 20 ] ;
41502: LD_ADDR_VAR 0 9
41506: PUSH
41507: LD_INT 5
41509: PUSH
41510: LD_INT 70
41512: PUSH
41513: LD_INT 20
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: LIST
41520: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41521: LD_VAR 0 6
41525: PPUSH
41526: CALL_OW 264
41530: PUSH
41531: LD_INT 10
41533: PUSH
41534: EMPTY
41535: LIST
41536: IN
41537: IFFALSE 41558
// points := [ 35 , 110 , 70 ] ;
41539: LD_ADDR_VAR 0 9
41543: PUSH
41544: LD_INT 35
41546: PUSH
41547: LD_INT 110
41549: PUSH
41550: LD_INT 70
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: LIST
41557: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41558: LD_VAR 0 6
41562: PPUSH
41563: CALL_OW 265
41567: PUSH
41568: LD_INT 25
41570: EQUAL
41571: IFFALSE 41592
// points := [ 80 , 65 , 100 ] ;
41573: LD_ADDR_VAR 0 9
41577: PUSH
41578: LD_INT 80
41580: PUSH
41581: LD_INT 65
41583: PUSH
41584: LD_INT 100
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: LIST
41591: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41592: LD_VAR 0 6
41596: PPUSH
41597: CALL_OW 263
41601: PUSH
41602: LD_INT 1
41604: EQUAL
41605: IFFALSE 41640
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41607: LD_ADDR_VAR 0 10
41611: PUSH
41612: LD_VAR 0 10
41616: PUSH
41617: LD_VAR 0 6
41621: PPUSH
41622: CALL_OW 311
41626: PPUSH
41627: LD_INT 3
41629: PPUSH
41630: CALL_OW 259
41634: PUSH
41635: LD_INT 4
41637: MUL
41638: MUL
41639: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41640: LD_VAR 0 6
41644: PPUSH
41645: CALL_OW 263
41649: PUSH
41650: LD_INT 2
41652: EQUAL
41653: IFFALSE 41704
// begin j := IsControledBy ( i ) ;
41655: LD_ADDR_VAR 0 7
41659: PUSH
41660: LD_VAR 0 6
41664: PPUSH
41665: CALL_OW 312
41669: ST_TO_ADDR
// if j then
41670: LD_VAR 0 7
41674: IFFALSE 41704
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41676: LD_ADDR_VAR 0 10
41680: PUSH
41681: LD_VAR 0 10
41685: PUSH
41686: LD_VAR 0 7
41690: PPUSH
41691: LD_INT 3
41693: PPUSH
41694: CALL_OW 259
41698: PUSH
41699: LD_INT 3
41701: MUL
41702: MUL
41703: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41704: LD_VAR 0 6
41708: PPUSH
41709: CALL_OW 264
41713: PUSH
41714: LD_INT 5
41716: PUSH
41717: LD_INT 6
41719: PUSH
41720: LD_INT 46
41722: PUSH
41723: LD_INT 44
41725: PUSH
41726: LD_INT 47
41728: PUSH
41729: LD_INT 45
41731: PUSH
41732: LD_INT 28
41734: PUSH
41735: LD_INT 7
41737: PUSH
41738: LD_INT 27
41740: PUSH
41741: LD_INT 29
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: IN
41756: PUSH
41757: LD_VAR 0 1
41761: PPUSH
41762: LD_INT 52
41764: PPUSH
41765: CALL_OW 321
41769: PUSH
41770: LD_INT 2
41772: EQUAL
41773: AND
41774: IFFALSE 41791
// bpoints := bpoints * 1.2 ;
41776: LD_ADDR_VAR 0 10
41780: PUSH
41781: LD_VAR 0 10
41785: PUSH
41786: LD_REAL  1.20000000000000E+0000
41789: MUL
41790: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41791: LD_VAR 0 6
41795: PPUSH
41796: CALL_OW 264
41800: PUSH
41801: LD_INT 6
41803: PUSH
41804: LD_INT 46
41806: PUSH
41807: LD_INT 47
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: LIST
41814: IN
41815: IFFALSE 41832
// bpoints := bpoints * 1.2 ;
41817: LD_ADDR_VAR 0 10
41821: PUSH
41822: LD_VAR 0 10
41826: PUSH
41827: LD_REAL  1.20000000000000E+0000
41830: MUL
41831: ST_TO_ADDR
// end ; unit_building :
41832: GO 41846
41834: LD_INT 3
41836: DOUBLE
41837: EQUAL
41838: IFTRUE 41842
41840: GO 41845
41842: POP
// ; end ;
41843: GO 41846
41845: POP
// for j = 1 to 3 do
41846: LD_ADDR_VAR 0 7
41850: PUSH
41851: DOUBLE
41852: LD_INT 1
41854: DEC
41855: ST_TO_ADDR
41856: LD_INT 3
41858: PUSH
41859: FOR_TO
41860: IFFALSE 41913
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41862: LD_ADDR_VAR 0 5
41866: PUSH
41867: LD_VAR 0 5
41871: PPUSH
41872: LD_VAR 0 7
41876: PPUSH
41877: LD_VAR 0 5
41881: PUSH
41882: LD_VAR 0 7
41886: ARRAY
41887: PUSH
41888: LD_VAR 0 9
41892: PUSH
41893: LD_VAR 0 7
41897: ARRAY
41898: PUSH
41899: LD_VAR 0 10
41903: MUL
41904: PLUS
41905: PPUSH
41906: CALL_OW 1
41910: ST_TO_ADDR
41911: GO 41859
41913: POP
41914: POP
// end ;
41915: GO 40398
41917: POP
41918: POP
// result := Replace ( result , 4 , tmp ) ;
41919: LD_ADDR_VAR 0 5
41923: PUSH
41924: LD_VAR 0 5
41928: PPUSH
41929: LD_INT 4
41931: PPUSH
41932: LD_VAR 0 8
41936: PPUSH
41937: CALL_OW 1
41941: ST_TO_ADDR
// end ;
41942: LD_VAR 0 5
41946: RET
// export function DangerAtRange ( unit , range ) ; begin
41947: LD_INT 0
41949: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41950: LD_ADDR_VAR 0 3
41954: PUSH
41955: LD_VAR 0 1
41959: PPUSH
41960: CALL_OW 255
41964: PPUSH
41965: LD_VAR 0 1
41969: PPUSH
41970: CALL_OW 250
41974: PPUSH
41975: LD_VAR 0 1
41979: PPUSH
41980: CALL_OW 251
41984: PPUSH
41985: LD_VAR 0 2
41989: PPUSH
41990: CALL 40250 0 4
41994: ST_TO_ADDR
// end ;
41995: LD_VAR 0 3
41999: RET
// export function DangerInArea ( side , area ) ; begin
42000: LD_INT 0
42002: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
42003: LD_ADDR_VAR 0 3
42007: PUSH
42008: LD_VAR 0 2
42012: PPUSH
42013: LD_INT 81
42015: PUSH
42016: LD_VAR 0 1
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PPUSH
42025: CALL_OW 70
42029: ST_TO_ADDR
// end ;
42030: LD_VAR 0 3
42034: RET
// export function IsExtension ( b ) ; begin
42035: LD_INT 0
42037: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
42038: LD_ADDR_VAR 0 2
42042: PUSH
42043: LD_VAR 0 1
42047: PUSH
42048: LD_INT 23
42050: PUSH
42051: LD_INT 20
42053: PUSH
42054: LD_INT 22
42056: PUSH
42057: LD_INT 17
42059: PUSH
42060: LD_INT 24
42062: PUSH
42063: LD_INT 21
42065: PUSH
42066: LD_INT 19
42068: PUSH
42069: LD_INT 16
42071: PUSH
42072: LD_INT 25
42074: PUSH
42075: LD_INT 18
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: IN
42090: ST_TO_ADDR
// end ;
42091: LD_VAR 0 2
42095: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
42096: LD_INT 0
42098: PPUSH
42099: PPUSH
42100: PPUSH
// result := [ ] ;
42101: LD_ADDR_VAR 0 4
42105: PUSH
42106: EMPTY
42107: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
42108: LD_ADDR_VAR 0 5
42112: PUSH
42113: LD_VAR 0 2
42117: PPUSH
42118: LD_INT 21
42120: PUSH
42121: LD_INT 3
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PPUSH
42128: CALL_OW 70
42132: ST_TO_ADDR
// if not tmp then
42133: LD_VAR 0 5
42137: NOT
42138: IFFALSE 42142
// exit ;
42140: GO 42206
// if checkLink then
42142: LD_VAR 0 3
42146: IFFALSE 42196
// begin for i in tmp do
42148: LD_ADDR_VAR 0 6
42152: PUSH
42153: LD_VAR 0 5
42157: PUSH
42158: FOR_IN
42159: IFFALSE 42194
// if GetBase ( i ) <> base then
42161: LD_VAR 0 6
42165: PPUSH
42166: CALL_OW 274
42170: PUSH
42171: LD_VAR 0 1
42175: NONEQUAL
42176: IFFALSE 42192
// ComLinkToBase ( base , i ) ;
42178: LD_VAR 0 1
42182: PPUSH
42183: LD_VAR 0 6
42187: PPUSH
42188: CALL_OW 169
42192: GO 42158
42194: POP
42195: POP
// end ; result := tmp ;
42196: LD_ADDR_VAR 0 4
42200: PUSH
42201: LD_VAR 0 5
42205: ST_TO_ADDR
// end ;
42206: LD_VAR 0 4
42210: RET
// export function ComComplete ( units , b ) ; var i ; begin
42211: LD_INT 0
42213: PPUSH
42214: PPUSH
// if not units then
42215: LD_VAR 0 1
42219: NOT
42220: IFFALSE 42224
// exit ;
42222: GO 42314
// for i in units do
42224: LD_ADDR_VAR 0 4
42228: PUSH
42229: LD_VAR 0 1
42233: PUSH
42234: FOR_IN
42235: IFFALSE 42312
// if BuildingStatus ( b ) = bs_build then
42237: LD_VAR 0 2
42241: PPUSH
42242: CALL_OW 461
42246: PUSH
42247: LD_INT 1
42249: EQUAL
42250: IFFALSE 42310
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
42252: LD_VAR 0 4
42256: PPUSH
42257: LD_STRING h
42259: PUSH
42260: LD_VAR 0 2
42264: PPUSH
42265: CALL_OW 250
42269: PUSH
42270: LD_VAR 0 2
42274: PPUSH
42275: CALL_OW 251
42279: PUSH
42280: LD_VAR 0 2
42284: PUSH
42285: LD_INT 0
42287: PUSH
42288: LD_INT 0
42290: PUSH
42291: LD_INT 0
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: PUSH
42303: EMPTY
42304: LIST
42305: PPUSH
42306: CALL_OW 446
42310: GO 42234
42312: POP
42313: POP
// end ;
42314: LD_VAR 0 3
42318: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42319: LD_INT 0
42321: PPUSH
42322: PPUSH
42323: PPUSH
42324: PPUSH
42325: PPUSH
42326: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
42327: LD_VAR 0 1
42331: NOT
42332: PUSH
42333: LD_VAR 0 1
42337: PPUSH
42338: CALL_OW 263
42342: PUSH
42343: LD_INT 2
42345: EQUAL
42346: NOT
42347: OR
42348: IFFALSE 42352
// exit ;
42350: GO 42668
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42352: LD_ADDR_VAR 0 6
42356: PUSH
42357: LD_INT 22
42359: PUSH
42360: LD_VAR 0 1
42364: PPUSH
42365: CALL_OW 255
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 2
42376: PUSH
42377: LD_INT 30
42379: PUSH
42380: LD_INT 36
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 34
42389: PUSH
42390: LD_INT 31
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: LIST
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PPUSH
42406: CALL_OW 69
42410: ST_TO_ADDR
// if not tmp then
42411: LD_VAR 0 6
42415: NOT
42416: IFFALSE 42420
// exit ;
42418: GO 42668
// result := [ ] ;
42420: LD_ADDR_VAR 0 2
42424: PUSH
42425: EMPTY
42426: ST_TO_ADDR
// for i in tmp do
42427: LD_ADDR_VAR 0 3
42431: PUSH
42432: LD_VAR 0 6
42436: PUSH
42437: FOR_IN
42438: IFFALSE 42509
// begin t := UnitsInside ( i ) ;
42440: LD_ADDR_VAR 0 4
42444: PUSH
42445: LD_VAR 0 3
42449: PPUSH
42450: CALL_OW 313
42454: ST_TO_ADDR
// if t then
42455: LD_VAR 0 4
42459: IFFALSE 42507
// for j in t do
42461: LD_ADDR_VAR 0 7
42465: PUSH
42466: LD_VAR 0 4
42470: PUSH
42471: FOR_IN
42472: IFFALSE 42505
// result := Insert ( result , result + 1 , j ) ;
42474: LD_ADDR_VAR 0 2
42478: PUSH
42479: LD_VAR 0 2
42483: PPUSH
42484: LD_VAR 0 2
42488: PUSH
42489: LD_INT 1
42491: PLUS
42492: PPUSH
42493: LD_VAR 0 7
42497: PPUSH
42498: CALL_OW 2
42502: ST_TO_ADDR
42503: GO 42471
42505: POP
42506: POP
// end ;
42507: GO 42437
42509: POP
42510: POP
// if not result then
42511: LD_VAR 0 2
42515: NOT
42516: IFFALSE 42520
// exit ;
42518: GO 42668
// mech := result [ 1 ] ;
42520: LD_ADDR_VAR 0 5
42524: PUSH
42525: LD_VAR 0 2
42529: PUSH
42530: LD_INT 1
42532: ARRAY
42533: ST_TO_ADDR
// if result > 1 then
42534: LD_VAR 0 2
42538: PUSH
42539: LD_INT 1
42541: GREATER
42542: IFFALSE 42654
// for i = 2 to result do
42544: LD_ADDR_VAR 0 3
42548: PUSH
42549: DOUBLE
42550: LD_INT 2
42552: DEC
42553: ST_TO_ADDR
42554: LD_VAR 0 2
42558: PUSH
42559: FOR_TO
42560: IFFALSE 42652
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42562: LD_ADDR_VAR 0 4
42566: PUSH
42567: LD_VAR 0 2
42571: PUSH
42572: LD_VAR 0 3
42576: ARRAY
42577: PPUSH
42578: LD_INT 3
42580: PPUSH
42581: CALL_OW 259
42585: PUSH
42586: LD_VAR 0 2
42590: PUSH
42591: LD_VAR 0 3
42595: ARRAY
42596: PPUSH
42597: CALL_OW 432
42601: MINUS
42602: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42603: LD_VAR 0 4
42607: PUSH
42608: LD_VAR 0 5
42612: PPUSH
42613: LD_INT 3
42615: PPUSH
42616: CALL_OW 259
42620: PUSH
42621: LD_VAR 0 5
42625: PPUSH
42626: CALL_OW 432
42630: MINUS
42631: GREATEREQUAL
42632: IFFALSE 42650
// mech := result [ i ] ;
42634: LD_ADDR_VAR 0 5
42638: PUSH
42639: LD_VAR 0 2
42643: PUSH
42644: LD_VAR 0 3
42648: ARRAY
42649: ST_TO_ADDR
// end ;
42650: GO 42559
42652: POP
42653: POP
// ComLinkTo ( vehicle , mech ) ;
42654: LD_VAR 0 1
42658: PPUSH
42659: LD_VAR 0 5
42663: PPUSH
42664: CALL_OW 135
// end ;
42668: LD_VAR 0 2
42672: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42673: LD_INT 0
42675: PPUSH
42676: PPUSH
42677: PPUSH
42678: PPUSH
42679: PPUSH
42680: PPUSH
42681: PPUSH
42682: PPUSH
42683: PPUSH
42684: PPUSH
42685: PPUSH
42686: PPUSH
42687: PPUSH
// result := [ ] ;
42688: LD_ADDR_VAR 0 7
42692: PUSH
42693: EMPTY
42694: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42695: LD_VAR 0 1
42699: PPUSH
42700: CALL_OW 266
42704: PUSH
42705: LD_INT 0
42707: PUSH
42708: LD_INT 1
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: IN
42715: NOT
42716: IFFALSE 42720
// exit ;
42718: GO 44354
// if name then
42720: LD_VAR 0 3
42724: IFFALSE 42740
// SetBName ( base_dep , name ) ;
42726: LD_VAR 0 1
42730: PPUSH
42731: LD_VAR 0 3
42735: PPUSH
42736: CALL_OW 500
// base := GetBase ( base_dep ) ;
42740: LD_ADDR_VAR 0 15
42744: PUSH
42745: LD_VAR 0 1
42749: PPUSH
42750: CALL_OW 274
42754: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42755: LD_ADDR_VAR 0 16
42759: PUSH
42760: LD_VAR 0 1
42764: PPUSH
42765: CALL_OW 255
42769: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42770: LD_ADDR_VAR 0 17
42774: PUSH
42775: LD_VAR 0 1
42779: PPUSH
42780: CALL_OW 248
42784: ST_TO_ADDR
// if sources then
42785: LD_VAR 0 5
42789: IFFALSE 42836
// for i = 1 to 3 do
42791: LD_ADDR_VAR 0 8
42795: PUSH
42796: DOUBLE
42797: LD_INT 1
42799: DEC
42800: ST_TO_ADDR
42801: LD_INT 3
42803: PUSH
42804: FOR_TO
42805: IFFALSE 42834
// AddResourceType ( base , i , sources [ i ] ) ;
42807: LD_VAR 0 15
42811: PPUSH
42812: LD_VAR 0 8
42816: PPUSH
42817: LD_VAR 0 5
42821: PUSH
42822: LD_VAR 0 8
42826: ARRAY
42827: PPUSH
42828: CALL_OW 276
42832: GO 42804
42834: POP
42835: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42836: LD_ADDR_VAR 0 18
42840: PUSH
42841: LD_VAR 0 15
42845: PPUSH
42846: LD_VAR 0 2
42850: PPUSH
42851: LD_INT 1
42853: PPUSH
42854: CALL 42096 0 3
42858: ST_TO_ADDR
// InitHc ;
42859: CALL_OW 19
// InitUc ;
42863: CALL_OW 18
// uc_side := side ;
42867: LD_ADDR_OWVAR 20
42871: PUSH
42872: LD_VAR 0 16
42876: ST_TO_ADDR
// uc_nation := nation ;
42877: LD_ADDR_OWVAR 21
42881: PUSH
42882: LD_VAR 0 17
42886: ST_TO_ADDR
// if buildings then
42887: LD_VAR 0 18
42891: IFFALSE 44213
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42893: LD_ADDR_VAR 0 19
42897: PUSH
42898: LD_VAR 0 18
42902: PPUSH
42903: LD_INT 2
42905: PUSH
42906: LD_INT 30
42908: PUSH
42909: LD_INT 29
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 30
42918: PUSH
42919: LD_INT 30
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: LIST
42930: PPUSH
42931: CALL_OW 72
42935: ST_TO_ADDR
// if tmp then
42936: LD_VAR 0 19
42940: IFFALSE 42988
// for i in tmp do
42942: LD_ADDR_VAR 0 8
42946: PUSH
42947: LD_VAR 0 19
42951: PUSH
42952: FOR_IN
42953: IFFALSE 42986
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42955: LD_VAR 0 8
42959: PPUSH
42960: CALL_OW 250
42964: PPUSH
42965: LD_VAR 0 8
42969: PPUSH
42970: CALL_OW 251
42974: PPUSH
42975: LD_VAR 0 16
42979: PPUSH
42980: CALL_OW 441
42984: GO 42952
42986: POP
42987: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42988: LD_VAR 0 18
42992: PPUSH
42993: LD_INT 2
42995: PUSH
42996: LD_INT 30
42998: PUSH
42999: LD_INT 32
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 30
43008: PUSH
43009: LD_INT 33
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: LIST
43020: PPUSH
43021: CALL_OW 72
43025: IFFALSE 43113
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
43027: LD_ADDR_VAR 0 8
43031: PUSH
43032: LD_VAR 0 18
43036: PPUSH
43037: LD_INT 2
43039: PUSH
43040: LD_INT 30
43042: PUSH
43043: LD_INT 32
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 30
43052: PUSH
43053: LD_INT 33
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: LIST
43064: PPUSH
43065: CALL_OW 72
43069: PUSH
43070: FOR_IN
43071: IFFALSE 43111
// begin if not GetBWeapon ( i ) then
43073: LD_VAR 0 8
43077: PPUSH
43078: CALL_OW 269
43082: NOT
43083: IFFALSE 43109
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
43085: LD_VAR 0 8
43089: PPUSH
43090: LD_VAR 0 8
43094: PPUSH
43095: LD_VAR 0 2
43099: PPUSH
43100: CALL 44359 0 2
43104: PPUSH
43105: CALL_OW 431
// end ;
43109: GO 43070
43111: POP
43112: POP
// end ; for i = 1 to personel do
43113: LD_ADDR_VAR 0 8
43117: PUSH
43118: DOUBLE
43119: LD_INT 1
43121: DEC
43122: ST_TO_ADDR
43123: LD_VAR 0 6
43127: PUSH
43128: FOR_TO
43129: IFFALSE 44193
// begin if i > 4 then
43131: LD_VAR 0 8
43135: PUSH
43136: LD_INT 4
43138: GREATER
43139: IFFALSE 43143
// break ;
43141: GO 44193
// case i of 1 :
43143: LD_VAR 0 8
43147: PUSH
43148: LD_INT 1
43150: DOUBLE
43151: EQUAL
43152: IFTRUE 43156
43154: GO 43236
43156: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
43157: LD_ADDR_VAR 0 12
43161: PUSH
43162: LD_VAR 0 18
43166: PPUSH
43167: LD_INT 22
43169: PUSH
43170: LD_VAR 0 16
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 58
43181: PUSH
43182: EMPTY
43183: LIST
43184: PUSH
43185: LD_INT 2
43187: PUSH
43188: LD_INT 30
43190: PUSH
43191: LD_INT 32
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 30
43200: PUSH
43201: LD_INT 4
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 30
43210: PUSH
43211: LD_INT 5
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: LIST
43228: PPUSH
43229: CALL_OW 72
43233: ST_TO_ADDR
43234: GO 43458
43236: LD_INT 2
43238: DOUBLE
43239: EQUAL
43240: IFTRUE 43244
43242: GO 43306
43244: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
43245: LD_ADDR_VAR 0 12
43249: PUSH
43250: LD_VAR 0 18
43254: PPUSH
43255: LD_INT 22
43257: PUSH
43258: LD_VAR 0 16
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 2
43269: PUSH
43270: LD_INT 30
43272: PUSH
43273: LD_INT 0
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 30
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: LIST
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PPUSH
43299: CALL_OW 72
43303: ST_TO_ADDR
43304: GO 43458
43306: LD_INT 3
43308: DOUBLE
43309: EQUAL
43310: IFTRUE 43314
43312: GO 43376
43314: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
43315: LD_ADDR_VAR 0 12
43319: PUSH
43320: LD_VAR 0 18
43324: PPUSH
43325: LD_INT 22
43327: PUSH
43328: LD_VAR 0 16
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 2
43339: PUSH
43340: LD_INT 30
43342: PUSH
43343: LD_INT 2
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 30
43352: PUSH
43353: LD_INT 3
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: LIST
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PPUSH
43369: CALL_OW 72
43373: ST_TO_ADDR
43374: GO 43458
43376: LD_INT 4
43378: DOUBLE
43379: EQUAL
43380: IFTRUE 43384
43382: GO 43457
43384: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43385: LD_ADDR_VAR 0 12
43389: PUSH
43390: LD_VAR 0 18
43394: PPUSH
43395: LD_INT 22
43397: PUSH
43398: LD_VAR 0 16
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 2
43409: PUSH
43410: LD_INT 30
43412: PUSH
43413: LD_INT 6
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 30
43422: PUSH
43423: LD_INT 7
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 30
43432: PUSH
43433: LD_INT 8
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PPUSH
43450: CALL_OW 72
43454: ST_TO_ADDR
43455: GO 43458
43457: POP
// if i = 1 then
43458: LD_VAR 0 8
43462: PUSH
43463: LD_INT 1
43465: EQUAL
43466: IFFALSE 43577
// begin tmp := [ ] ;
43468: LD_ADDR_VAR 0 19
43472: PUSH
43473: EMPTY
43474: ST_TO_ADDR
// for j in f do
43475: LD_ADDR_VAR 0 9
43479: PUSH
43480: LD_VAR 0 12
43484: PUSH
43485: FOR_IN
43486: IFFALSE 43559
// if GetBType ( j ) = b_bunker then
43488: LD_VAR 0 9
43492: PPUSH
43493: CALL_OW 266
43497: PUSH
43498: LD_INT 32
43500: EQUAL
43501: IFFALSE 43528
// tmp := Insert ( tmp , 1 , j ) else
43503: LD_ADDR_VAR 0 19
43507: PUSH
43508: LD_VAR 0 19
43512: PPUSH
43513: LD_INT 1
43515: PPUSH
43516: LD_VAR 0 9
43520: PPUSH
43521: CALL_OW 2
43525: ST_TO_ADDR
43526: GO 43557
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43528: LD_ADDR_VAR 0 19
43532: PUSH
43533: LD_VAR 0 19
43537: PPUSH
43538: LD_VAR 0 19
43542: PUSH
43543: LD_INT 1
43545: PLUS
43546: PPUSH
43547: LD_VAR 0 9
43551: PPUSH
43552: CALL_OW 2
43556: ST_TO_ADDR
43557: GO 43485
43559: POP
43560: POP
// if tmp then
43561: LD_VAR 0 19
43565: IFFALSE 43577
// f := tmp ;
43567: LD_ADDR_VAR 0 12
43571: PUSH
43572: LD_VAR 0 19
43576: ST_TO_ADDR
// end ; x := personel [ i ] ;
43577: LD_ADDR_VAR 0 13
43581: PUSH
43582: LD_VAR 0 6
43586: PUSH
43587: LD_VAR 0 8
43591: ARRAY
43592: ST_TO_ADDR
// if x = - 1 then
43593: LD_VAR 0 13
43597: PUSH
43598: LD_INT 1
43600: NEG
43601: EQUAL
43602: IFFALSE 43811
// begin for j in f do
43604: LD_ADDR_VAR 0 9
43608: PUSH
43609: LD_VAR 0 12
43613: PUSH
43614: FOR_IN
43615: IFFALSE 43807
// repeat InitHc ;
43617: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43621: LD_VAR 0 9
43625: PPUSH
43626: CALL_OW 266
43630: PUSH
43631: LD_INT 5
43633: EQUAL
43634: IFFALSE 43704
// begin if UnitsInside ( j ) < 3 then
43636: LD_VAR 0 9
43640: PPUSH
43641: CALL_OW 313
43645: PUSH
43646: LD_INT 3
43648: LESS
43649: IFFALSE 43685
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43651: LD_INT 0
43653: PPUSH
43654: LD_INT 5
43656: PUSH
43657: LD_INT 8
43659: PUSH
43660: LD_INT 9
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: LIST
43667: PUSH
43668: LD_VAR 0 17
43672: ARRAY
43673: PPUSH
43674: LD_VAR 0 4
43678: PPUSH
43679: CALL_OW 380
43683: GO 43702
// PrepareHuman ( false , i , skill ) ;
43685: LD_INT 0
43687: PPUSH
43688: LD_VAR 0 8
43692: PPUSH
43693: LD_VAR 0 4
43697: PPUSH
43698: CALL_OW 380
// end else
43702: GO 43721
// PrepareHuman ( false , i , skill ) ;
43704: LD_INT 0
43706: PPUSH
43707: LD_VAR 0 8
43711: PPUSH
43712: LD_VAR 0 4
43716: PPUSH
43717: CALL_OW 380
// un := CreateHuman ;
43721: LD_ADDR_VAR 0 14
43725: PUSH
43726: CALL_OW 44
43730: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43731: LD_ADDR_VAR 0 7
43735: PUSH
43736: LD_VAR 0 7
43740: PPUSH
43741: LD_INT 1
43743: PPUSH
43744: LD_VAR 0 14
43748: PPUSH
43749: CALL_OW 2
43753: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43754: LD_VAR 0 14
43758: PPUSH
43759: LD_VAR 0 9
43763: PPUSH
43764: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43768: LD_VAR 0 9
43772: PPUSH
43773: CALL_OW 313
43777: PUSH
43778: LD_INT 6
43780: EQUAL
43781: PUSH
43782: LD_VAR 0 9
43786: PPUSH
43787: CALL_OW 266
43791: PUSH
43792: LD_INT 32
43794: PUSH
43795: LD_INT 31
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: IN
43802: OR
43803: IFFALSE 43617
43805: GO 43614
43807: POP
43808: POP
// end else
43809: GO 44191
// for j = 1 to x do
43811: LD_ADDR_VAR 0 9
43815: PUSH
43816: DOUBLE
43817: LD_INT 1
43819: DEC
43820: ST_TO_ADDR
43821: LD_VAR 0 13
43825: PUSH
43826: FOR_TO
43827: IFFALSE 44189
// begin InitHc ;
43829: CALL_OW 19
// if not f then
43833: LD_VAR 0 12
43837: NOT
43838: IFFALSE 43927
// begin PrepareHuman ( false , i , skill ) ;
43840: LD_INT 0
43842: PPUSH
43843: LD_VAR 0 8
43847: PPUSH
43848: LD_VAR 0 4
43852: PPUSH
43853: CALL_OW 380
// un := CreateHuman ;
43857: LD_ADDR_VAR 0 14
43861: PUSH
43862: CALL_OW 44
43866: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43867: LD_ADDR_VAR 0 7
43871: PUSH
43872: LD_VAR 0 7
43876: PPUSH
43877: LD_INT 1
43879: PPUSH
43880: LD_VAR 0 14
43884: PPUSH
43885: CALL_OW 2
43889: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43890: LD_VAR 0 14
43894: PPUSH
43895: LD_VAR 0 1
43899: PPUSH
43900: CALL_OW 250
43904: PPUSH
43905: LD_VAR 0 1
43909: PPUSH
43910: CALL_OW 251
43914: PPUSH
43915: LD_INT 10
43917: PPUSH
43918: LD_INT 0
43920: PPUSH
43921: CALL_OW 50
// continue ;
43925: GO 43826
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43927: LD_VAR 0 12
43931: PUSH
43932: LD_INT 1
43934: ARRAY
43935: PPUSH
43936: CALL_OW 313
43940: PUSH
43941: LD_VAR 0 12
43945: PUSH
43946: LD_INT 1
43948: ARRAY
43949: PPUSH
43950: CALL_OW 266
43954: PUSH
43955: LD_INT 32
43957: PUSH
43958: LD_INT 31
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: IN
43965: AND
43966: PUSH
43967: LD_VAR 0 12
43971: PUSH
43972: LD_INT 1
43974: ARRAY
43975: PPUSH
43976: CALL_OW 313
43980: PUSH
43981: LD_INT 6
43983: EQUAL
43984: OR
43985: IFFALSE 44005
// f := Delete ( f , 1 ) ;
43987: LD_ADDR_VAR 0 12
43991: PUSH
43992: LD_VAR 0 12
43996: PPUSH
43997: LD_INT 1
43999: PPUSH
44000: CALL_OW 3
44004: ST_TO_ADDR
// if not f then
44005: LD_VAR 0 12
44009: NOT
44010: IFFALSE 44028
// begin x := x + 2 ;
44012: LD_ADDR_VAR 0 13
44016: PUSH
44017: LD_VAR 0 13
44021: PUSH
44022: LD_INT 2
44024: PLUS
44025: ST_TO_ADDR
// continue ;
44026: GO 43826
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
44028: LD_VAR 0 12
44032: PUSH
44033: LD_INT 1
44035: ARRAY
44036: PPUSH
44037: CALL_OW 266
44041: PUSH
44042: LD_INT 5
44044: EQUAL
44045: IFFALSE 44119
// begin if UnitsInside ( f [ 1 ] ) < 3 then
44047: LD_VAR 0 12
44051: PUSH
44052: LD_INT 1
44054: ARRAY
44055: PPUSH
44056: CALL_OW 313
44060: PUSH
44061: LD_INT 3
44063: LESS
44064: IFFALSE 44100
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44066: LD_INT 0
44068: PPUSH
44069: LD_INT 5
44071: PUSH
44072: LD_INT 8
44074: PUSH
44075: LD_INT 9
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: LIST
44082: PUSH
44083: LD_VAR 0 17
44087: ARRAY
44088: PPUSH
44089: LD_VAR 0 4
44093: PPUSH
44094: CALL_OW 380
44098: GO 44117
// PrepareHuman ( false , i , skill ) ;
44100: LD_INT 0
44102: PPUSH
44103: LD_VAR 0 8
44107: PPUSH
44108: LD_VAR 0 4
44112: PPUSH
44113: CALL_OW 380
// end else
44117: GO 44136
// PrepareHuman ( false , i , skill ) ;
44119: LD_INT 0
44121: PPUSH
44122: LD_VAR 0 8
44126: PPUSH
44127: LD_VAR 0 4
44131: PPUSH
44132: CALL_OW 380
// un := CreateHuman ;
44136: LD_ADDR_VAR 0 14
44140: PUSH
44141: CALL_OW 44
44145: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44146: LD_ADDR_VAR 0 7
44150: PUSH
44151: LD_VAR 0 7
44155: PPUSH
44156: LD_INT 1
44158: PPUSH
44159: LD_VAR 0 14
44163: PPUSH
44164: CALL_OW 2
44168: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
44169: LD_VAR 0 14
44173: PPUSH
44174: LD_VAR 0 12
44178: PUSH
44179: LD_INT 1
44181: ARRAY
44182: PPUSH
44183: CALL_OW 52
// end ;
44187: GO 43826
44189: POP
44190: POP
// end ;
44191: GO 43128
44193: POP
44194: POP
// result := result ^ buildings ;
44195: LD_ADDR_VAR 0 7
44199: PUSH
44200: LD_VAR 0 7
44204: PUSH
44205: LD_VAR 0 18
44209: ADD
44210: ST_TO_ADDR
// end else
44211: GO 44354
// begin for i = 1 to personel do
44213: LD_ADDR_VAR 0 8
44217: PUSH
44218: DOUBLE
44219: LD_INT 1
44221: DEC
44222: ST_TO_ADDR
44223: LD_VAR 0 6
44227: PUSH
44228: FOR_TO
44229: IFFALSE 44352
// begin if i > 4 then
44231: LD_VAR 0 8
44235: PUSH
44236: LD_INT 4
44238: GREATER
44239: IFFALSE 44243
// break ;
44241: GO 44352
// x := personel [ i ] ;
44243: LD_ADDR_VAR 0 13
44247: PUSH
44248: LD_VAR 0 6
44252: PUSH
44253: LD_VAR 0 8
44257: ARRAY
44258: ST_TO_ADDR
// if x = - 1 then
44259: LD_VAR 0 13
44263: PUSH
44264: LD_INT 1
44266: NEG
44267: EQUAL
44268: IFFALSE 44272
// continue ;
44270: GO 44228
// PrepareHuman ( false , i , skill ) ;
44272: LD_INT 0
44274: PPUSH
44275: LD_VAR 0 8
44279: PPUSH
44280: LD_VAR 0 4
44284: PPUSH
44285: CALL_OW 380
// un := CreateHuman ;
44289: LD_ADDR_VAR 0 14
44293: PUSH
44294: CALL_OW 44
44298: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44299: LD_VAR 0 14
44303: PPUSH
44304: LD_VAR 0 1
44308: PPUSH
44309: CALL_OW 250
44313: PPUSH
44314: LD_VAR 0 1
44318: PPUSH
44319: CALL_OW 251
44323: PPUSH
44324: LD_INT 10
44326: PPUSH
44327: LD_INT 0
44329: PPUSH
44330: CALL_OW 50
// result := result ^ un ;
44334: LD_ADDR_VAR 0 7
44338: PUSH
44339: LD_VAR 0 7
44343: PUSH
44344: LD_VAR 0 14
44348: ADD
44349: ST_TO_ADDR
// end ;
44350: GO 44228
44352: POP
44353: POP
// end ; end ;
44354: LD_VAR 0 7
44358: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44359: LD_INT 0
44361: PPUSH
44362: PPUSH
44363: PPUSH
44364: PPUSH
44365: PPUSH
44366: PPUSH
44367: PPUSH
44368: PPUSH
44369: PPUSH
44370: PPUSH
44371: PPUSH
44372: PPUSH
44373: PPUSH
44374: PPUSH
44375: PPUSH
44376: PPUSH
// result := false ;
44377: LD_ADDR_VAR 0 3
44381: PUSH
44382: LD_INT 0
44384: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44385: LD_VAR 0 1
44389: NOT
44390: PUSH
44391: LD_VAR 0 1
44395: PPUSH
44396: CALL_OW 266
44400: PUSH
44401: LD_INT 32
44403: PUSH
44404: LD_INT 33
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: IN
44411: NOT
44412: OR
44413: IFFALSE 44417
// exit ;
44415: GO 45556
// nat := GetNation ( tower ) ;
44417: LD_ADDR_VAR 0 12
44421: PUSH
44422: LD_VAR 0 1
44426: PPUSH
44427: CALL_OW 248
44431: ST_TO_ADDR
// side := GetSide ( tower ) ;
44432: LD_ADDR_VAR 0 16
44436: PUSH
44437: LD_VAR 0 1
44441: PPUSH
44442: CALL_OW 255
44446: ST_TO_ADDR
// x := GetX ( tower ) ;
44447: LD_ADDR_VAR 0 10
44451: PUSH
44452: LD_VAR 0 1
44456: PPUSH
44457: CALL_OW 250
44461: ST_TO_ADDR
// y := GetY ( tower ) ;
44462: LD_ADDR_VAR 0 11
44466: PUSH
44467: LD_VAR 0 1
44471: PPUSH
44472: CALL_OW 251
44476: ST_TO_ADDR
// if not x or not y then
44477: LD_VAR 0 10
44481: NOT
44482: PUSH
44483: LD_VAR 0 11
44487: NOT
44488: OR
44489: IFFALSE 44493
// exit ;
44491: GO 45556
// weapon := 0 ;
44493: LD_ADDR_VAR 0 18
44497: PUSH
44498: LD_INT 0
44500: ST_TO_ADDR
// fac_list := [ ] ;
44501: LD_ADDR_VAR 0 17
44505: PUSH
44506: EMPTY
44507: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44508: LD_ADDR_VAR 0 6
44512: PUSH
44513: LD_VAR 0 1
44517: PPUSH
44518: CALL_OW 274
44522: PPUSH
44523: LD_VAR 0 2
44527: PPUSH
44528: LD_INT 0
44530: PPUSH
44531: CALL 42096 0 3
44535: PPUSH
44536: LD_INT 30
44538: PUSH
44539: LD_INT 3
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PPUSH
44546: CALL_OW 72
44550: ST_TO_ADDR
// if not factories then
44551: LD_VAR 0 6
44555: NOT
44556: IFFALSE 44560
// exit ;
44558: GO 45556
// for i in factories do
44560: LD_ADDR_VAR 0 8
44564: PUSH
44565: LD_VAR 0 6
44569: PUSH
44570: FOR_IN
44571: IFFALSE 44596
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44573: LD_ADDR_VAR 0 17
44577: PUSH
44578: LD_VAR 0 17
44582: PUSH
44583: LD_VAR 0 8
44587: PPUSH
44588: CALL_OW 478
44592: UNION
44593: ST_TO_ADDR
44594: GO 44570
44596: POP
44597: POP
// if not fac_list then
44598: LD_VAR 0 17
44602: NOT
44603: IFFALSE 44607
// exit ;
44605: GO 45556
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44607: LD_ADDR_VAR 0 5
44611: PUSH
44612: LD_INT 4
44614: PUSH
44615: LD_INT 5
44617: PUSH
44618: LD_INT 9
44620: PUSH
44621: LD_INT 10
44623: PUSH
44624: LD_INT 6
44626: PUSH
44627: LD_INT 7
44629: PUSH
44630: LD_INT 11
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 27
44644: PUSH
44645: LD_INT 28
44647: PUSH
44648: LD_INT 26
44650: PUSH
44651: LD_INT 30
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 43
44662: PUSH
44663: LD_INT 44
44665: PUSH
44666: LD_INT 46
44668: PUSH
44669: LD_INT 45
44671: PUSH
44672: LD_INT 47
44674: PUSH
44675: LD_INT 49
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: LIST
44690: PUSH
44691: LD_VAR 0 12
44695: ARRAY
44696: ST_TO_ADDR
// for i in list do
44697: LD_ADDR_VAR 0 8
44701: PUSH
44702: LD_VAR 0 5
44706: PUSH
44707: FOR_IN
44708: IFFALSE 44741
// if not i in fac_list then
44710: LD_VAR 0 8
44714: PUSH
44715: LD_VAR 0 17
44719: IN
44720: NOT
44721: IFFALSE 44739
// list := list diff i ;
44723: LD_ADDR_VAR 0 5
44727: PUSH
44728: LD_VAR 0 5
44732: PUSH
44733: LD_VAR 0 8
44737: DIFF
44738: ST_TO_ADDR
44739: GO 44707
44741: POP
44742: POP
// if not list then
44743: LD_VAR 0 5
44747: NOT
44748: IFFALSE 44752
// exit ;
44750: GO 45556
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44752: LD_VAR 0 12
44756: PUSH
44757: LD_INT 3
44759: EQUAL
44760: PUSH
44761: LD_INT 49
44763: PUSH
44764: LD_VAR 0 5
44768: IN
44769: AND
44770: PUSH
44771: LD_INT 31
44773: PPUSH
44774: LD_VAR 0 16
44778: PPUSH
44779: CALL_OW 321
44783: PUSH
44784: LD_INT 2
44786: EQUAL
44787: AND
44788: IFFALSE 44848
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44790: LD_INT 22
44792: PUSH
44793: LD_VAR 0 16
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 35
44804: PUSH
44805: LD_INT 49
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 91
44814: PUSH
44815: LD_VAR 0 1
44819: PUSH
44820: LD_INT 10
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: LIST
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: LIST
44832: PPUSH
44833: CALL_OW 69
44837: NOT
44838: IFFALSE 44848
// weapon := ru_time_lapser ;
44840: LD_ADDR_VAR 0 18
44844: PUSH
44845: LD_INT 49
44847: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44848: LD_VAR 0 12
44852: PUSH
44853: LD_INT 1
44855: PUSH
44856: LD_INT 2
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: IN
44863: PUSH
44864: LD_INT 11
44866: PUSH
44867: LD_VAR 0 5
44871: IN
44872: PUSH
44873: LD_INT 30
44875: PUSH
44876: LD_VAR 0 5
44880: IN
44881: OR
44882: AND
44883: PUSH
44884: LD_INT 6
44886: PPUSH
44887: LD_VAR 0 16
44891: PPUSH
44892: CALL_OW 321
44896: PUSH
44897: LD_INT 2
44899: EQUAL
44900: AND
44901: IFFALSE 45066
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44903: LD_INT 22
44905: PUSH
44906: LD_VAR 0 16
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 2
44917: PUSH
44918: LD_INT 35
44920: PUSH
44921: LD_INT 11
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 35
44930: PUSH
44931: LD_INT 30
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 91
44945: PUSH
44946: LD_VAR 0 1
44950: PUSH
44951: LD_INT 18
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: LIST
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: LIST
44963: PPUSH
44964: CALL_OW 69
44968: NOT
44969: PUSH
44970: LD_INT 22
44972: PUSH
44973: LD_VAR 0 16
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 2
44984: PUSH
44985: LD_INT 30
44987: PUSH
44988: LD_INT 32
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 30
44997: PUSH
44998: LD_INT 33
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 91
45012: PUSH
45013: LD_VAR 0 1
45017: PUSH
45018: LD_INT 12
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: LIST
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: LIST
45030: PUSH
45031: EMPTY
45032: LIST
45033: PPUSH
45034: CALL_OW 69
45038: PUSH
45039: LD_INT 2
45041: GREATER
45042: AND
45043: IFFALSE 45066
// weapon := [ us_radar , ar_radar ] [ nat ] ;
45045: LD_ADDR_VAR 0 18
45049: PUSH
45050: LD_INT 11
45052: PUSH
45053: LD_INT 30
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_VAR 0 12
45064: ARRAY
45065: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
45066: LD_VAR 0 18
45070: NOT
45071: PUSH
45072: LD_INT 40
45074: PPUSH
45075: LD_VAR 0 16
45079: PPUSH
45080: CALL_OW 321
45084: PUSH
45085: LD_INT 2
45087: EQUAL
45088: AND
45089: PUSH
45090: LD_INT 7
45092: PUSH
45093: LD_VAR 0 5
45097: IN
45098: PUSH
45099: LD_INT 28
45101: PUSH
45102: LD_VAR 0 5
45106: IN
45107: OR
45108: PUSH
45109: LD_INT 45
45111: PUSH
45112: LD_VAR 0 5
45116: IN
45117: OR
45118: AND
45119: IFFALSE 45373
// begin hex := GetHexInfo ( x , y ) ;
45121: LD_ADDR_VAR 0 4
45125: PUSH
45126: LD_VAR 0 10
45130: PPUSH
45131: LD_VAR 0 11
45135: PPUSH
45136: CALL_OW 546
45140: ST_TO_ADDR
// if hex [ 1 ] then
45141: LD_VAR 0 4
45145: PUSH
45146: LD_INT 1
45148: ARRAY
45149: IFFALSE 45153
// exit ;
45151: GO 45556
// height := hex [ 2 ] ;
45153: LD_ADDR_VAR 0 15
45157: PUSH
45158: LD_VAR 0 4
45162: PUSH
45163: LD_INT 2
45165: ARRAY
45166: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
45167: LD_ADDR_VAR 0 14
45171: PUSH
45172: LD_INT 0
45174: PUSH
45175: LD_INT 2
45177: PUSH
45178: LD_INT 3
45180: PUSH
45181: LD_INT 5
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: ST_TO_ADDR
// for i in tmp do
45190: LD_ADDR_VAR 0 8
45194: PUSH
45195: LD_VAR 0 14
45199: PUSH
45200: FOR_IN
45201: IFFALSE 45371
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
45203: LD_ADDR_VAR 0 9
45207: PUSH
45208: LD_VAR 0 10
45212: PPUSH
45213: LD_VAR 0 8
45217: PPUSH
45218: LD_INT 5
45220: PPUSH
45221: CALL_OW 272
45225: PUSH
45226: LD_VAR 0 11
45230: PPUSH
45231: LD_VAR 0 8
45235: PPUSH
45236: LD_INT 5
45238: PPUSH
45239: CALL_OW 273
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
45248: LD_VAR 0 9
45252: PUSH
45253: LD_INT 1
45255: ARRAY
45256: PPUSH
45257: LD_VAR 0 9
45261: PUSH
45262: LD_INT 2
45264: ARRAY
45265: PPUSH
45266: CALL_OW 488
45270: IFFALSE 45369
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
45272: LD_ADDR_VAR 0 4
45276: PUSH
45277: LD_VAR 0 9
45281: PUSH
45282: LD_INT 1
45284: ARRAY
45285: PPUSH
45286: LD_VAR 0 9
45290: PUSH
45291: LD_INT 2
45293: ARRAY
45294: PPUSH
45295: CALL_OW 546
45299: ST_TO_ADDR
// if hex [ 1 ] then
45300: LD_VAR 0 4
45304: PUSH
45305: LD_INT 1
45307: ARRAY
45308: IFFALSE 45312
// continue ;
45310: GO 45200
// h := hex [ 2 ] ;
45312: LD_ADDR_VAR 0 13
45316: PUSH
45317: LD_VAR 0 4
45321: PUSH
45322: LD_INT 2
45324: ARRAY
45325: ST_TO_ADDR
// if h + 7 < height then
45326: LD_VAR 0 13
45330: PUSH
45331: LD_INT 7
45333: PLUS
45334: PUSH
45335: LD_VAR 0 15
45339: LESS
45340: IFFALSE 45369
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45342: LD_ADDR_VAR 0 18
45346: PUSH
45347: LD_INT 7
45349: PUSH
45350: LD_INT 28
45352: PUSH
45353: LD_INT 45
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: LIST
45360: PUSH
45361: LD_VAR 0 12
45365: ARRAY
45366: ST_TO_ADDR
// break ;
45367: GO 45371
// end ; end ; end ;
45369: GO 45200
45371: POP
45372: POP
// end ; if not weapon then
45373: LD_VAR 0 18
45377: NOT
45378: IFFALSE 45438
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45380: LD_ADDR_VAR 0 5
45384: PUSH
45385: LD_VAR 0 5
45389: PUSH
45390: LD_INT 11
45392: PUSH
45393: LD_INT 30
45395: PUSH
45396: LD_INT 49
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: LIST
45403: DIFF
45404: ST_TO_ADDR
// if not list then
45405: LD_VAR 0 5
45409: NOT
45410: IFFALSE 45414
// exit ;
45412: GO 45556
// weapon := list [ rand ( 1 , list ) ] ;
45414: LD_ADDR_VAR 0 18
45418: PUSH
45419: LD_VAR 0 5
45423: PUSH
45424: LD_INT 1
45426: PPUSH
45427: LD_VAR 0 5
45431: PPUSH
45432: CALL_OW 12
45436: ARRAY
45437: ST_TO_ADDR
// end ; if weapon then
45438: LD_VAR 0 18
45442: IFFALSE 45556
// begin tmp := CostOfWeapon ( weapon ) ;
45444: LD_ADDR_VAR 0 14
45448: PUSH
45449: LD_VAR 0 18
45453: PPUSH
45454: CALL_OW 451
45458: ST_TO_ADDR
// j := GetBase ( tower ) ;
45459: LD_ADDR_VAR 0 9
45463: PUSH
45464: LD_VAR 0 1
45468: PPUSH
45469: CALL_OW 274
45473: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45474: LD_VAR 0 9
45478: PPUSH
45479: LD_INT 1
45481: PPUSH
45482: CALL_OW 275
45486: PUSH
45487: LD_VAR 0 14
45491: PUSH
45492: LD_INT 1
45494: ARRAY
45495: GREATEREQUAL
45496: PUSH
45497: LD_VAR 0 9
45501: PPUSH
45502: LD_INT 2
45504: PPUSH
45505: CALL_OW 275
45509: PUSH
45510: LD_VAR 0 14
45514: PUSH
45515: LD_INT 2
45517: ARRAY
45518: GREATEREQUAL
45519: AND
45520: PUSH
45521: LD_VAR 0 9
45525: PPUSH
45526: LD_INT 3
45528: PPUSH
45529: CALL_OW 275
45533: PUSH
45534: LD_VAR 0 14
45538: PUSH
45539: LD_INT 3
45541: ARRAY
45542: GREATEREQUAL
45543: AND
45544: IFFALSE 45556
// result := weapon ;
45546: LD_ADDR_VAR 0 3
45550: PUSH
45551: LD_VAR 0 18
45555: ST_TO_ADDR
// end ; end ;
45556: LD_VAR 0 3
45560: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45561: LD_INT 0
45563: PPUSH
45564: PPUSH
// result := true ;
45565: LD_ADDR_VAR 0 3
45569: PUSH
45570: LD_INT 1
45572: ST_TO_ADDR
// if array1 = array2 then
45573: LD_VAR 0 1
45577: PUSH
45578: LD_VAR 0 2
45582: EQUAL
45583: IFFALSE 45643
// begin for i = 1 to array1 do
45585: LD_ADDR_VAR 0 4
45589: PUSH
45590: DOUBLE
45591: LD_INT 1
45593: DEC
45594: ST_TO_ADDR
45595: LD_VAR 0 1
45599: PUSH
45600: FOR_TO
45601: IFFALSE 45639
// if array1 [ i ] <> array2 [ i ] then
45603: LD_VAR 0 1
45607: PUSH
45608: LD_VAR 0 4
45612: ARRAY
45613: PUSH
45614: LD_VAR 0 2
45618: PUSH
45619: LD_VAR 0 4
45623: ARRAY
45624: NONEQUAL
45625: IFFALSE 45637
// begin result := false ;
45627: LD_ADDR_VAR 0 3
45631: PUSH
45632: LD_INT 0
45634: ST_TO_ADDR
// break ;
45635: GO 45639
// end ;
45637: GO 45600
45639: POP
45640: POP
// end else
45641: GO 45651
// result := false ;
45643: LD_ADDR_VAR 0 3
45647: PUSH
45648: LD_INT 0
45650: ST_TO_ADDR
// end ;
45651: LD_VAR 0 3
45655: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45656: LD_INT 0
45658: PPUSH
45659: PPUSH
// if not array1 or not array2 then
45660: LD_VAR 0 1
45664: NOT
45665: PUSH
45666: LD_VAR 0 2
45670: NOT
45671: OR
45672: IFFALSE 45676
// exit ;
45674: GO 45740
// result := true ;
45676: LD_ADDR_VAR 0 3
45680: PUSH
45681: LD_INT 1
45683: ST_TO_ADDR
// for i = 1 to array1 do
45684: LD_ADDR_VAR 0 4
45688: PUSH
45689: DOUBLE
45690: LD_INT 1
45692: DEC
45693: ST_TO_ADDR
45694: LD_VAR 0 1
45698: PUSH
45699: FOR_TO
45700: IFFALSE 45738
// if array1 [ i ] <> array2 [ i ] then
45702: LD_VAR 0 1
45706: PUSH
45707: LD_VAR 0 4
45711: ARRAY
45712: PUSH
45713: LD_VAR 0 2
45717: PUSH
45718: LD_VAR 0 4
45722: ARRAY
45723: NONEQUAL
45724: IFFALSE 45736
// begin result := false ;
45726: LD_ADDR_VAR 0 3
45730: PUSH
45731: LD_INT 0
45733: ST_TO_ADDR
// break ;
45734: GO 45738
// end ;
45736: GO 45699
45738: POP
45739: POP
// end ;
45740: LD_VAR 0 3
45744: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45745: LD_INT 0
45747: PPUSH
45748: PPUSH
45749: PPUSH
// pom := GetBase ( fac ) ;
45750: LD_ADDR_VAR 0 5
45754: PUSH
45755: LD_VAR 0 1
45759: PPUSH
45760: CALL_OW 274
45764: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45765: LD_ADDR_VAR 0 4
45769: PUSH
45770: LD_VAR 0 2
45774: PUSH
45775: LD_INT 1
45777: ARRAY
45778: PPUSH
45779: LD_VAR 0 2
45783: PUSH
45784: LD_INT 2
45786: ARRAY
45787: PPUSH
45788: LD_VAR 0 2
45792: PUSH
45793: LD_INT 3
45795: ARRAY
45796: PPUSH
45797: LD_VAR 0 2
45801: PUSH
45802: LD_INT 4
45804: ARRAY
45805: PPUSH
45806: CALL_OW 449
45810: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45811: LD_ADDR_VAR 0 3
45815: PUSH
45816: LD_VAR 0 5
45820: PPUSH
45821: LD_INT 1
45823: PPUSH
45824: CALL_OW 275
45828: PUSH
45829: LD_VAR 0 4
45833: PUSH
45834: LD_INT 1
45836: ARRAY
45837: GREATEREQUAL
45838: PUSH
45839: LD_VAR 0 5
45843: PPUSH
45844: LD_INT 2
45846: PPUSH
45847: CALL_OW 275
45851: PUSH
45852: LD_VAR 0 4
45856: PUSH
45857: LD_INT 2
45859: ARRAY
45860: GREATEREQUAL
45861: AND
45862: PUSH
45863: LD_VAR 0 5
45867: PPUSH
45868: LD_INT 3
45870: PPUSH
45871: CALL_OW 275
45875: PUSH
45876: LD_VAR 0 4
45880: PUSH
45881: LD_INT 3
45883: ARRAY
45884: GREATEREQUAL
45885: AND
45886: ST_TO_ADDR
// end ;
45887: LD_VAR 0 3
45891: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45892: LD_INT 0
45894: PPUSH
45895: PPUSH
45896: PPUSH
45897: PPUSH
// pom := GetBase ( building ) ;
45898: LD_ADDR_VAR 0 3
45902: PUSH
45903: LD_VAR 0 1
45907: PPUSH
45908: CALL_OW 274
45912: ST_TO_ADDR
// if not pom then
45913: LD_VAR 0 3
45917: NOT
45918: IFFALSE 45922
// exit ;
45920: GO 46092
// btype := GetBType ( building ) ;
45922: LD_ADDR_VAR 0 5
45926: PUSH
45927: LD_VAR 0 1
45931: PPUSH
45932: CALL_OW 266
45936: ST_TO_ADDR
// if btype = b_armoury then
45937: LD_VAR 0 5
45941: PUSH
45942: LD_INT 4
45944: EQUAL
45945: IFFALSE 45955
// btype := b_barracks ;
45947: LD_ADDR_VAR 0 5
45951: PUSH
45952: LD_INT 5
45954: ST_TO_ADDR
// if btype = b_depot then
45955: LD_VAR 0 5
45959: PUSH
45960: LD_INT 0
45962: EQUAL
45963: IFFALSE 45973
// btype := b_warehouse ;
45965: LD_ADDR_VAR 0 5
45969: PUSH
45970: LD_INT 1
45972: ST_TO_ADDR
// if btype = b_workshop then
45973: LD_VAR 0 5
45977: PUSH
45978: LD_INT 2
45980: EQUAL
45981: IFFALSE 45991
// btype := b_factory ;
45983: LD_ADDR_VAR 0 5
45987: PUSH
45988: LD_INT 3
45990: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45991: LD_ADDR_VAR 0 4
45995: PUSH
45996: LD_VAR 0 5
46000: PPUSH
46001: LD_VAR 0 1
46005: PPUSH
46006: CALL_OW 248
46010: PPUSH
46011: CALL_OW 450
46015: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46016: LD_ADDR_VAR 0 2
46020: PUSH
46021: LD_VAR 0 3
46025: PPUSH
46026: LD_INT 1
46028: PPUSH
46029: CALL_OW 275
46033: PUSH
46034: LD_VAR 0 4
46038: PUSH
46039: LD_INT 1
46041: ARRAY
46042: GREATEREQUAL
46043: PUSH
46044: LD_VAR 0 3
46048: PPUSH
46049: LD_INT 2
46051: PPUSH
46052: CALL_OW 275
46056: PUSH
46057: LD_VAR 0 4
46061: PUSH
46062: LD_INT 2
46064: ARRAY
46065: GREATEREQUAL
46066: AND
46067: PUSH
46068: LD_VAR 0 3
46072: PPUSH
46073: LD_INT 3
46075: PPUSH
46076: CALL_OW 275
46080: PUSH
46081: LD_VAR 0 4
46085: PUSH
46086: LD_INT 3
46088: ARRAY
46089: GREATEREQUAL
46090: AND
46091: ST_TO_ADDR
// end ;
46092: LD_VAR 0 2
46096: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
46097: LD_INT 0
46099: PPUSH
46100: PPUSH
46101: PPUSH
// pom := GetBase ( building ) ;
46102: LD_ADDR_VAR 0 4
46106: PUSH
46107: LD_VAR 0 1
46111: PPUSH
46112: CALL_OW 274
46116: ST_TO_ADDR
// if not pom then
46117: LD_VAR 0 4
46121: NOT
46122: IFFALSE 46126
// exit ;
46124: GO 46227
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46126: LD_ADDR_VAR 0 5
46130: PUSH
46131: LD_VAR 0 2
46135: PPUSH
46136: LD_VAR 0 1
46140: PPUSH
46141: CALL_OW 248
46145: PPUSH
46146: CALL_OW 450
46150: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46151: LD_ADDR_VAR 0 3
46155: PUSH
46156: LD_VAR 0 4
46160: PPUSH
46161: LD_INT 1
46163: PPUSH
46164: CALL_OW 275
46168: PUSH
46169: LD_VAR 0 5
46173: PUSH
46174: LD_INT 1
46176: ARRAY
46177: GREATEREQUAL
46178: PUSH
46179: LD_VAR 0 4
46183: PPUSH
46184: LD_INT 2
46186: PPUSH
46187: CALL_OW 275
46191: PUSH
46192: LD_VAR 0 5
46196: PUSH
46197: LD_INT 2
46199: ARRAY
46200: GREATEREQUAL
46201: AND
46202: PUSH
46203: LD_VAR 0 4
46207: PPUSH
46208: LD_INT 3
46210: PPUSH
46211: CALL_OW 275
46215: PUSH
46216: LD_VAR 0 5
46220: PUSH
46221: LD_INT 3
46223: ARRAY
46224: GREATEREQUAL
46225: AND
46226: ST_TO_ADDR
// end ;
46227: LD_VAR 0 3
46231: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
46232: LD_INT 0
46234: PPUSH
46235: PPUSH
46236: PPUSH
46237: PPUSH
46238: PPUSH
46239: PPUSH
46240: PPUSH
46241: PPUSH
46242: PPUSH
46243: PPUSH
46244: PPUSH
// result := false ;
46245: LD_ADDR_VAR 0 8
46249: PUSH
46250: LD_INT 0
46252: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
46253: LD_VAR 0 5
46257: NOT
46258: PUSH
46259: LD_VAR 0 1
46263: NOT
46264: OR
46265: PUSH
46266: LD_VAR 0 2
46270: NOT
46271: OR
46272: PUSH
46273: LD_VAR 0 3
46277: NOT
46278: OR
46279: IFFALSE 46283
// exit ;
46281: GO 47097
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46283: LD_ADDR_VAR 0 14
46287: PUSH
46288: LD_VAR 0 1
46292: PPUSH
46293: LD_VAR 0 2
46297: PPUSH
46298: LD_VAR 0 3
46302: PPUSH
46303: LD_VAR 0 4
46307: PPUSH
46308: LD_VAR 0 5
46312: PUSH
46313: LD_INT 1
46315: ARRAY
46316: PPUSH
46317: CALL_OW 248
46321: PPUSH
46322: LD_INT 0
46324: PPUSH
46325: CALL 47934 0 6
46329: ST_TO_ADDR
// if not hexes then
46330: LD_VAR 0 14
46334: NOT
46335: IFFALSE 46339
// exit ;
46337: GO 47097
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46339: LD_ADDR_VAR 0 17
46343: PUSH
46344: LD_VAR 0 5
46348: PPUSH
46349: LD_INT 22
46351: PUSH
46352: LD_VAR 0 13
46356: PPUSH
46357: CALL_OW 255
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 2
46368: PUSH
46369: LD_INT 30
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 30
46381: PUSH
46382: LD_INT 1
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: LIST
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PPUSH
46398: CALL_OW 72
46402: ST_TO_ADDR
// for i = 1 to hexes do
46403: LD_ADDR_VAR 0 9
46407: PUSH
46408: DOUBLE
46409: LD_INT 1
46411: DEC
46412: ST_TO_ADDR
46413: LD_VAR 0 14
46417: PUSH
46418: FOR_TO
46419: IFFALSE 47095
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46421: LD_ADDR_VAR 0 13
46425: PUSH
46426: LD_VAR 0 14
46430: PUSH
46431: LD_VAR 0 9
46435: ARRAY
46436: PUSH
46437: LD_INT 1
46439: ARRAY
46440: PPUSH
46441: LD_VAR 0 14
46445: PUSH
46446: LD_VAR 0 9
46450: ARRAY
46451: PUSH
46452: LD_INT 2
46454: ARRAY
46455: PPUSH
46456: CALL_OW 428
46460: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46461: LD_VAR 0 14
46465: PUSH
46466: LD_VAR 0 9
46470: ARRAY
46471: PUSH
46472: LD_INT 1
46474: ARRAY
46475: PPUSH
46476: LD_VAR 0 14
46480: PUSH
46481: LD_VAR 0 9
46485: ARRAY
46486: PUSH
46487: LD_INT 2
46489: ARRAY
46490: PPUSH
46491: CALL_OW 351
46495: PUSH
46496: LD_VAR 0 14
46500: PUSH
46501: LD_VAR 0 9
46505: ARRAY
46506: PUSH
46507: LD_INT 1
46509: ARRAY
46510: PPUSH
46511: LD_VAR 0 14
46515: PUSH
46516: LD_VAR 0 9
46520: ARRAY
46521: PUSH
46522: LD_INT 2
46524: ARRAY
46525: PPUSH
46526: CALL_OW 488
46530: NOT
46531: OR
46532: PUSH
46533: LD_VAR 0 13
46537: PPUSH
46538: CALL_OW 247
46542: PUSH
46543: LD_INT 3
46545: EQUAL
46546: OR
46547: IFFALSE 46553
// exit ;
46549: POP
46550: POP
46551: GO 47097
// if not tmp then
46553: LD_VAR 0 13
46557: NOT
46558: IFFALSE 46562
// continue ;
46560: GO 46418
// result := true ;
46562: LD_ADDR_VAR 0 8
46566: PUSH
46567: LD_INT 1
46569: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46570: LD_VAR 0 6
46574: PUSH
46575: LD_VAR 0 13
46579: PPUSH
46580: CALL_OW 247
46584: PUSH
46585: LD_INT 2
46587: EQUAL
46588: AND
46589: PUSH
46590: LD_VAR 0 13
46594: PPUSH
46595: CALL_OW 263
46599: PUSH
46600: LD_INT 1
46602: EQUAL
46603: AND
46604: IFFALSE 46768
// begin if IsDrivenBy ( tmp ) then
46606: LD_VAR 0 13
46610: PPUSH
46611: CALL_OW 311
46615: IFFALSE 46619
// continue ;
46617: GO 46418
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46619: LD_VAR 0 6
46623: PPUSH
46624: LD_INT 3
46626: PUSH
46627: LD_INT 60
46629: PUSH
46630: EMPTY
46631: LIST
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 3
46639: PUSH
46640: LD_INT 55
46642: PUSH
46643: EMPTY
46644: LIST
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PPUSH
46654: CALL_OW 72
46658: IFFALSE 46766
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46660: LD_ADDR_VAR 0 18
46664: PUSH
46665: LD_VAR 0 6
46669: PPUSH
46670: LD_INT 3
46672: PUSH
46673: LD_INT 60
46675: PUSH
46676: EMPTY
46677: LIST
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 3
46685: PUSH
46686: LD_INT 55
46688: PUSH
46689: EMPTY
46690: LIST
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PPUSH
46700: CALL_OW 72
46704: PUSH
46705: LD_INT 1
46707: ARRAY
46708: ST_TO_ADDR
// if IsInUnit ( driver ) then
46709: LD_VAR 0 18
46713: PPUSH
46714: CALL_OW 310
46718: IFFALSE 46729
// ComExit ( driver ) ;
46720: LD_VAR 0 18
46724: PPUSH
46725: CALL 71118 0 1
// AddComEnterUnit ( driver , tmp ) ;
46729: LD_VAR 0 18
46733: PPUSH
46734: LD_VAR 0 13
46738: PPUSH
46739: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46743: LD_VAR 0 18
46747: PPUSH
46748: LD_VAR 0 7
46752: PPUSH
46753: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46757: LD_VAR 0 18
46761: PPUSH
46762: CALL_OW 181
// end ; continue ;
46766: GO 46418
// end ; if not cleaners or not tmp in cleaners then
46768: LD_VAR 0 6
46772: NOT
46773: PUSH
46774: LD_VAR 0 13
46778: PUSH
46779: LD_VAR 0 6
46783: IN
46784: NOT
46785: OR
46786: IFFALSE 47093
// begin if dep then
46788: LD_VAR 0 17
46792: IFFALSE 46928
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46794: LD_ADDR_VAR 0 16
46798: PUSH
46799: LD_VAR 0 17
46803: PUSH
46804: LD_INT 1
46806: ARRAY
46807: PPUSH
46808: CALL_OW 250
46812: PPUSH
46813: LD_VAR 0 17
46817: PUSH
46818: LD_INT 1
46820: ARRAY
46821: PPUSH
46822: CALL_OW 254
46826: PPUSH
46827: LD_INT 5
46829: PPUSH
46830: CALL_OW 272
46834: PUSH
46835: LD_VAR 0 17
46839: PUSH
46840: LD_INT 1
46842: ARRAY
46843: PPUSH
46844: CALL_OW 251
46848: PPUSH
46849: LD_VAR 0 17
46853: PUSH
46854: LD_INT 1
46856: ARRAY
46857: PPUSH
46858: CALL_OW 254
46862: PPUSH
46863: LD_INT 5
46865: PPUSH
46866: CALL_OW 273
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46875: LD_VAR 0 16
46879: PUSH
46880: LD_INT 1
46882: ARRAY
46883: PPUSH
46884: LD_VAR 0 16
46888: PUSH
46889: LD_INT 2
46891: ARRAY
46892: PPUSH
46893: CALL_OW 488
46897: IFFALSE 46928
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46899: LD_VAR 0 13
46903: PPUSH
46904: LD_VAR 0 16
46908: PUSH
46909: LD_INT 1
46911: ARRAY
46912: PPUSH
46913: LD_VAR 0 16
46917: PUSH
46918: LD_INT 2
46920: ARRAY
46921: PPUSH
46922: CALL_OW 111
// continue ;
46926: GO 46418
// end ; end ; r := GetDir ( tmp ) ;
46928: LD_ADDR_VAR 0 15
46932: PUSH
46933: LD_VAR 0 13
46937: PPUSH
46938: CALL_OW 254
46942: ST_TO_ADDR
// if r = 5 then
46943: LD_VAR 0 15
46947: PUSH
46948: LD_INT 5
46950: EQUAL
46951: IFFALSE 46961
// r := 0 ;
46953: LD_ADDR_VAR 0 15
46957: PUSH
46958: LD_INT 0
46960: ST_TO_ADDR
// for j = r to 5 do
46961: LD_ADDR_VAR 0 10
46965: PUSH
46966: DOUBLE
46967: LD_VAR 0 15
46971: DEC
46972: ST_TO_ADDR
46973: LD_INT 5
46975: PUSH
46976: FOR_TO
46977: IFFALSE 47091
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46979: LD_ADDR_VAR 0 11
46983: PUSH
46984: LD_VAR 0 13
46988: PPUSH
46989: CALL_OW 250
46993: PPUSH
46994: LD_VAR 0 10
46998: PPUSH
46999: LD_INT 2
47001: PPUSH
47002: CALL_OW 272
47006: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
47007: LD_ADDR_VAR 0 12
47011: PUSH
47012: LD_VAR 0 13
47016: PPUSH
47017: CALL_OW 251
47021: PPUSH
47022: LD_VAR 0 10
47026: PPUSH
47027: LD_INT 2
47029: PPUSH
47030: CALL_OW 273
47034: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
47035: LD_VAR 0 11
47039: PPUSH
47040: LD_VAR 0 12
47044: PPUSH
47045: CALL_OW 488
47049: PUSH
47050: LD_VAR 0 11
47054: PPUSH
47055: LD_VAR 0 12
47059: PPUSH
47060: CALL_OW 428
47064: NOT
47065: AND
47066: IFFALSE 47089
// begin ComMoveXY ( tmp , _x , _y ) ;
47068: LD_VAR 0 13
47072: PPUSH
47073: LD_VAR 0 11
47077: PPUSH
47078: LD_VAR 0 12
47082: PPUSH
47083: CALL_OW 111
// break ;
47087: GO 47091
// end ; end ;
47089: GO 46976
47091: POP
47092: POP
// end ; end ;
47093: GO 46418
47095: POP
47096: POP
// end ;
47097: LD_VAR 0 8
47101: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
47102: LD_INT 0
47104: PPUSH
47105: PPUSH
47106: PPUSH
47107: PPUSH
47108: PPUSH
47109: PPUSH
47110: PPUSH
47111: PPUSH
47112: PPUSH
47113: PPUSH
// result := false ;
47114: LD_ADDR_VAR 0 6
47118: PUSH
47119: LD_INT 0
47121: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47122: LD_VAR 0 1
47126: NOT
47127: PUSH
47128: LD_VAR 0 1
47132: PPUSH
47133: CALL_OW 266
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: LD_INT 1
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: IN
47148: NOT
47149: OR
47150: PUSH
47151: LD_VAR 0 2
47155: NOT
47156: OR
47157: PUSH
47158: LD_VAR 0 5
47162: PUSH
47163: LD_INT 0
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: LD_INT 2
47171: PUSH
47172: LD_INT 3
47174: PUSH
47175: LD_INT 4
47177: PUSH
47178: LD_INT 5
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: IN
47189: NOT
47190: OR
47191: PUSH
47192: LD_VAR 0 3
47196: PPUSH
47197: LD_VAR 0 4
47201: PPUSH
47202: CALL_OW 488
47206: NOT
47207: OR
47208: IFFALSE 47212
// exit ;
47210: GO 47929
// pom := GetBase ( depot ) ;
47212: LD_ADDR_VAR 0 10
47216: PUSH
47217: LD_VAR 0 1
47221: PPUSH
47222: CALL_OW 274
47226: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47227: LD_ADDR_VAR 0 11
47231: PUSH
47232: LD_VAR 0 2
47236: PPUSH
47237: LD_VAR 0 1
47241: PPUSH
47242: CALL_OW 248
47246: PPUSH
47247: CALL_OW 450
47251: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47252: LD_VAR 0 10
47256: PPUSH
47257: LD_INT 1
47259: PPUSH
47260: CALL_OW 275
47264: PUSH
47265: LD_VAR 0 11
47269: PUSH
47270: LD_INT 1
47272: ARRAY
47273: GREATEREQUAL
47274: PUSH
47275: LD_VAR 0 10
47279: PPUSH
47280: LD_INT 2
47282: PPUSH
47283: CALL_OW 275
47287: PUSH
47288: LD_VAR 0 11
47292: PUSH
47293: LD_INT 2
47295: ARRAY
47296: GREATEREQUAL
47297: AND
47298: PUSH
47299: LD_VAR 0 10
47303: PPUSH
47304: LD_INT 3
47306: PPUSH
47307: CALL_OW 275
47311: PUSH
47312: LD_VAR 0 11
47316: PUSH
47317: LD_INT 3
47319: ARRAY
47320: GREATEREQUAL
47321: AND
47322: NOT
47323: IFFALSE 47327
// exit ;
47325: GO 47929
// if GetBType ( depot ) = b_depot then
47327: LD_VAR 0 1
47331: PPUSH
47332: CALL_OW 266
47336: PUSH
47337: LD_INT 0
47339: EQUAL
47340: IFFALSE 47352
// dist := 28 else
47342: LD_ADDR_VAR 0 14
47346: PUSH
47347: LD_INT 28
47349: ST_TO_ADDR
47350: GO 47360
// dist := 36 ;
47352: LD_ADDR_VAR 0 14
47356: PUSH
47357: LD_INT 36
47359: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47360: LD_VAR 0 1
47364: PPUSH
47365: LD_VAR 0 3
47369: PPUSH
47370: LD_VAR 0 4
47374: PPUSH
47375: CALL_OW 297
47379: PUSH
47380: LD_VAR 0 14
47384: GREATER
47385: IFFALSE 47389
// exit ;
47387: GO 47929
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47389: LD_ADDR_VAR 0 12
47393: PUSH
47394: LD_VAR 0 2
47398: PPUSH
47399: LD_VAR 0 3
47403: PPUSH
47404: LD_VAR 0 4
47408: PPUSH
47409: LD_VAR 0 5
47413: PPUSH
47414: LD_VAR 0 1
47418: PPUSH
47419: CALL_OW 248
47423: PPUSH
47424: LD_INT 0
47426: PPUSH
47427: CALL 47934 0 6
47431: ST_TO_ADDR
// if not hexes then
47432: LD_VAR 0 12
47436: NOT
47437: IFFALSE 47441
// exit ;
47439: GO 47929
// hex := GetHexInfo ( x , y ) ;
47441: LD_ADDR_VAR 0 15
47445: PUSH
47446: LD_VAR 0 3
47450: PPUSH
47451: LD_VAR 0 4
47455: PPUSH
47456: CALL_OW 546
47460: ST_TO_ADDR
// if hex [ 1 ] then
47461: LD_VAR 0 15
47465: PUSH
47466: LD_INT 1
47468: ARRAY
47469: IFFALSE 47473
// exit ;
47471: GO 47929
// height := hex [ 2 ] ;
47473: LD_ADDR_VAR 0 13
47477: PUSH
47478: LD_VAR 0 15
47482: PUSH
47483: LD_INT 2
47485: ARRAY
47486: ST_TO_ADDR
// for i = 1 to hexes do
47487: LD_ADDR_VAR 0 7
47491: PUSH
47492: DOUBLE
47493: LD_INT 1
47495: DEC
47496: ST_TO_ADDR
47497: LD_VAR 0 12
47501: PUSH
47502: FOR_TO
47503: IFFALSE 47833
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47505: LD_VAR 0 12
47509: PUSH
47510: LD_VAR 0 7
47514: ARRAY
47515: PUSH
47516: LD_INT 1
47518: ARRAY
47519: PPUSH
47520: LD_VAR 0 12
47524: PUSH
47525: LD_VAR 0 7
47529: ARRAY
47530: PUSH
47531: LD_INT 2
47533: ARRAY
47534: PPUSH
47535: CALL_OW 488
47539: NOT
47540: PUSH
47541: LD_VAR 0 12
47545: PUSH
47546: LD_VAR 0 7
47550: ARRAY
47551: PUSH
47552: LD_INT 1
47554: ARRAY
47555: PPUSH
47556: LD_VAR 0 12
47560: PUSH
47561: LD_VAR 0 7
47565: ARRAY
47566: PUSH
47567: LD_INT 2
47569: ARRAY
47570: PPUSH
47571: CALL_OW 428
47575: PUSH
47576: LD_INT 0
47578: GREATER
47579: OR
47580: PUSH
47581: LD_VAR 0 12
47585: PUSH
47586: LD_VAR 0 7
47590: ARRAY
47591: PUSH
47592: LD_INT 1
47594: ARRAY
47595: PPUSH
47596: LD_VAR 0 12
47600: PUSH
47601: LD_VAR 0 7
47605: ARRAY
47606: PUSH
47607: LD_INT 2
47609: ARRAY
47610: PPUSH
47611: CALL_OW 351
47615: OR
47616: IFFALSE 47622
// exit ;
47618: POP
47619: POP
47620: GO 47929
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47622: LD_ADDR_VAR 0 8
47626: PUSH
47627: LD_VAR 0 12
47631: PUSH
47632: LD_VAR 0 7
47636: ARRAY
47637: PUSH
47638: LD_INT 1
47640: ARRAY
47641: PPUSH
47642: LD_VAR 0 12
47646: PUSH
47647: LD_VAR 0 7
47651: ARRAY
47652: PUSH
47653: LD_INT 2
47655: ARRAY
47656: PPUSH
47657: CALL_OW 546
47661: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47662: LD_VAR 0 8
47666: PUSH
47667: LD_INT 1
47669: ARRAY
47670: PUSH
47671: LD_VAR 0 8
47675: PUSH
47676: LD_INT 2
47678: ARRAY
47679: PUSH
47680: LD_VAR 0 13
47684: PUSH
47685: LD_INT 2
47687: PLUS
47688: GREATER
47689: OR
47690: PUSH
47691: LD_VAR 0 8
47695: PUSH
47696: LD_INT 2
47698: ARRAY
47699: PUSH
47700: LD_VAR 0 13
47704: PUSH
47705: LD_INT 2
47707: MINUS
47708: LESS
47709: OR
47710: PUSH
47711: LD_VAR 0 8
47715: PUSH
47716: LD_INT 3
47718: ARRAY
47719: PUSH
47720: LD_INT 0
47722: PUSH
47723: LD_INT 8
47725: PUSH
47726: LD_INT 9
47728: PUSH
47729: LD_INT 10
47731: PUSH
47732: LD_INT 11
47734: PUSH
47735: LD_INT 12
47737: PUSH
47738: LD_INT 13
47740: PUSH
47741: LD_INT 16
47743: PUSH
47744: LD_INT 17
47746: PUSH
47747: LD_INT 18
47749: PUSH
47750: LD_INT 19
47752: PUSH
47753: LD_INT 20
47755: PUSH
47756: LD_INT 21
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: IN
47774: NOT
47775: OR
47776: PUSH
47777: LD_VAR 0 8
47781: PUSH
47782: LD_INT 5
47784: ARRAY
47785: NOT
47786: OR
47787: PUSH
47788: LD_VAR 0 8
47792: PUSH
47793: LD_INT 6
47795: ARRAY
47796: PUSH
47797: LD_INT 1
47799: PUSH
47800: LD_INT 2
47802: PUSH
47803: LD_INT 7
47805: PUSH
47806: LD_INT 9
47808: PUSH
47809: LD_INT 10
47811: PUSH
47812: LD_INT 11
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: IN
47823: NOT
47824: OR
47825: IFFALSE 47831
// exit ;
47827: POP
47828: POP
47829: GO 47929
// end ;
47831: GO 47502
47833: POP
47834: POP
// side := GetSide ( depot ) ;
47835: LD_ADDR_VAR 0 9
47839: PUSH
47840: LD_VAR 0 1
47844: PPUSH
47845: CALL_OW 255
47849: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47850: LD_VAR 0 9
47854: PPUSH
47855: LD_VAR 0 3
47859: PPUSH
47860: LD_VAR 0 4
47864: PPUSH
47865: LD_INT 20
47867: PPUSH
47868: CALL 40250 0 4
47872: PUSH
47873: LD_INT 4
47875: ARRAY
47876: IFFALSE 47880
// exit ;
47878: GO 47929
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
47880: LD_VAR 0 2
47884: PUSH
47885: LD_INT 29
47887: PUSH
47888: LD_INT 30
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: IN
47895: PUSH
47896: LD_VAR 0 3
47900: PPUSH
47901: LD_VAR 0 4
47905: PPUSH
47906: LD_VAR 0 9
47910: PPUSH
47911: CALL_OW 440
47915: NOT
47916: AND
47917: IFFALSE 47921
// exit ;
47919: GO 47929
// result := true ;
47921: LD_ADDR_VAR 0 6
47925: PUSH
47926: LD_INT 1
47928: ST_TO_ADDR
// end ;
47929: LD_VAR 0 6
47933: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
47934: LD_INT 0
47936: PPUSH
47937: PPUSH
47938: PPUSH
47939: PPUSH
47940: PPUSH
47941: PPUSH
47942: PPUSH
47943: PPUSH
47944: PPUSH
47945: PPUSH
47946: PPUSH
47947: PPUSH
47948: PPUSH
47949: PPUSH
47950: PPUSH
47951: PPUSH
47952: PPUSH
47953: PPUSH
47954: PPUSH
47955: PPUSH
47956: PPUSH
47957: PPUSH
47958: PPUSH
47959: PPUSH
47960: PPUSH
47961: PPUSH
47962: PPUSH
47963: PPUSH
47964: PPUSH
47965: PPUSH
47966: PPUSH
47967: PPUSH
47968: PPUSH
47969: PPUSH
47970: PPUSH
47971: PPUSH
47972: PPUSH
47973: PPUSH
47974: PPUSH
47975: PPUSH
47976: PPUSH
47977: PPUSH
47978: PPUSH
47979: PPUSH
47980: PPUSH
47981: PPUSH
47982: PPUSH
47983: PPUSH
47984: PPUSH
47985: PPUSH
47986: PPUSH
47987: PPUSH
47988: PPUSH
47989: PPUSH
47990: PPUSH
47991: PPUSH
47992: PPUSH
47993: PPUSH
// result = [ ] ;
47994: LD_ADDR_VAR 0 7
47998: PUSH
47999: EMPTY
48000: ST_TO_ADDR
// temp_list = [ ] ;
48001: LD_ADDR_VAR 0 9
48005: PUSH
48006: EMPTY
48007: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48008: LD_VAR 0 4
48012: PUSH
48013: LD_INT 0
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: LD_INT 2
48021: PUSH
48022: LD_INT 3
48024: PUSH
48025: LD_INT 4
48027: PUSH
48028: LD_INT 5
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: IN
48039: NOT
48040: PUSH
48041: LD_VAR 0 1
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: LD_INT 1
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: IN
48056: PUSH
48057: LD_VAR 0 5
48061: PUSH
48062: LD_INT 1
48064: PUSH
48065: LD_INT 2
48067: PUSH
48068: LD_INT 3
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: LIST
48075: IN
48076: NOT
48077: AND
48078: OR
48079: IFFALSE 48083
// exit ;
48081: GO 66474
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48083: LD_VAR 0 1
48087: PUSH
48088: LD_INT 6
48090: PUSH
48091: LD_INT 7
48093: PUSH
48094: LD_INT 8
48096: PUSH
48097: LD_INT 13
48099: PUSH
48100: LD_INT 12
48102: PUSH
48103: LD_INT 15
48105: PUSH
48106: LD_INT 11
48108: PUSH
48109: LD_INT 14
48111: PUSH
48112: LD_INT 10
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: IN
48126: IFFALSE 48136
// btype = b_lab ;
48128: LD_ADDR_VAR 0 1
48132: PUSH
48133: LD_INT 6
48135: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48136: LD_VAR 0 6
48140: PUSH
48141: LD_INT 0
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: LD_INT 2
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: LIST
48154: IN
48155: NOT
48156: PUSH
48157: LD_VAR 0 1
48161: PUSH
48162: LD_INT 0
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: LD_INT 2
48170: PUSH
48171: LD_INT 3
48173: PUSH
48174: LD_INT 6
48176: PUSH
48177: LD_INT 36
48179: PUSH
48180: LD_INT 4
48182: PUSH
48183: LD_INT 5
48185: PUSH
48186: LD_INT 31
48188: PUSH
48189: LD_INT 32
48191: PUSH
48192: LD_INT 33
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: IN
48208: NOT
48209: PUSH
48210: LD_VAR 0 6
48214: PUSH
48215: LD_INT 1
48217: EQUAL
48218: AND
48219: OR
48220: PUSH
48221: LD_VAR 0 1
48225: PUSH
48226: LD_INT 2
48228: PUSH
48229: LD_INT 3
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: IN
48236: NOT
48237: PUSH
48238: LD_VAR 0 6
48242: PUSH
48243: LD_INT 2
48245: EQUAL
48246: AND
48247: OR
48248: IFFALSE 48258
// mode = 0 ;
48250: LD_ADDR_VAR 0 6
48254: PUSH
48255: LD_INT 0
48257: ST_TO_ADDR
// case mode of 0 :
48258: LD_VAR 0 6
48262: PUSH
48263: LD_INT 0
48265: DOUBLE
48266: EQUAL
48267: IFTRUE 48271
48269: GO 59724
48271: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48272: LD_ADDR_VAR 0 11
48276: PUSH
48277: LD_INT 0
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 0
48289: PUSH
48290: LD_INT 1
48292: NEG
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 1
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 1
48310: PUSH
48311: LD_INT 1
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 0
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: NEG
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 1
48341: NEG
48342: PUSH
48343: LD_INT 1
48345: NEG
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 1
48353: NEG
48354: PUSH
48355: LD_INT 2
48357: NEG
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 0
48365: PUSH
48366: LD_INT 2
48368: NEG
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: LD_INT 1
48379: NEG
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 1
48387: PUSH
48388: LD_INT 2
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 0
48397: PUSH
48398: LD_INT 2
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: LD_INT 1
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 1
48418: PUSH
48419: LD_INT 3
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 0
48428: PUSH
48429: LD_INT 3
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 1
48438: NEG
48439: PUSH
48440: LD_INT 2
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48465: LD_ADDR_VAR 0 12
48469: PUSH
48470: LD_INT 0
48472: PUSH
48473: LD_INT 0
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 0
48482: PUSH
48483: LD_INT 1
48485: NEG
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: LD_INT 0
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 0
48513: PUSH
48514: LD_INT 1
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 1
48523: NEG
48524: PUSH
48525: LD_INT 0
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: LD_INT 1
48538: NEG
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 1
48546: PUSH
48547: LD_INT 1
48549: NEG
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 2
48557: PUSH
48558: LD_INT 0
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 2
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 1
48577: NEG
48578: PUSH
48579: LD_INT 1
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 2
48588: NEG
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 2
48599: NEG
48600: PUSH
48601: LD_INT 1
48603: NEG
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 2
48611: NEG
48612: PUSH
48613: LD_INT 1
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 3
48622: NEG
48623: PUSH
48624: LD_INT 0
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 3
48633: NEG
48634: PUSH
48635: LD_INT 1
48637: NEG
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48661: LD_ADDR_VAR 0 13
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: LD_INT 0
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: LD_INT 1
48681: NEG
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: LD_INT 0
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 1
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 0
48709: PUSH
48710: LD_INT 1
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: NEG
48731: PUSH
48732: LD_INT 1
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 1
48742: NEG
48743: PUSH
48744: LD_INT 2
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 2
48754: PUSH
48755: LD_INT 1
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 2
48764: PUSH
48765: LD_INT 2
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: LD_INT 2
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 2
48784: NEG
48785: PUSH
48786: LD_INT 1
48788: NEG
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 2
48796: NEG
48797: PUSH
48798: LD_INT 2
48800: NEG
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 2
48808: NEG
48809: PUSH
48810: LD_INT 3
48812: NEG
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 3
48820: NEG
48821: PUSH
48822: LD_INT 2
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 3
48832: NEG
48833: PUSH
48834: LD_INT 3
48836: NEG
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48860: LD_ADDR_VAR 0 14
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: LD_INT 0
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: LD_INT 1
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 1
48898: PUSH
48899: LD_INT 1
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 0
48908: PUSH
48909: LD_INT 1
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 1
48918: NEG
48919: PUSH
48920: LD_INT 0
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 1
48929: NEG
48930: PUSH
48931: LD_INT 1
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: LD_INT 2
48945: NEG
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 0
48953: PUSH
48954: LD_INT 2
48956: NEG
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 1
48975: PUSH
48976: LD_INT 2
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 0
48985: PUSH
48986: LD_INT 2
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 1
48995: NEG
48996: PUSH
48997: LD_INT 1
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 1
49006: NEG
49007: PUSH
49008: LD_INT 3
49010: NEG
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 0
49018: PUSH
49019: LD_INT 3
49021: NEG
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 1
49029: PUSH
49030: LD_INT 2
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49056: LD_ADDR_VAR 0 15
49060: PUSH
49061: LD_INT 0
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 0
49073: PUSH
49074: LD_INT 1
49076: NEG
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: LD_INT 0
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: LD_INT 1
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: LD_INT 1
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 1
49114: NEG
49115: PUSH
49116: LD_INT 0
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 1
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 2
49148: PUSH
49149: LD_INT 0
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 2
49158: PUSH
49159: LD_INT 1
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 1
49168: NEG
49169: PUSH
49170: LD_INT 1
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 2
49179: NEG
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 2
49190: NEG
49191: PUSH
49192: LD_INT 1
49194: NEG
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 2
49202: PUSH
49203: LD_INT 1
49205: NEG
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 3
49213: PUSH
49214: LD_INT 0
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 3
49223: PUSH
49224: LD_INT 1
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49249: LD_ADDR_VAR 0 16
49253: PUSH
49254: LD_INT 0
49256: PUSH
49257: LD_INT 0
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 0
49266: PUSH
49267: LD_INT 1
49269: NEG
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 1
49277: PUSH
49278: LD_INT 0
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 1
49287: PUSH
49288: LD_INT 1
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: LD_INT 1
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 1
49307: NEG
49308: PUSH
49309: LD_INT 0
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: NEG
49319: PUSH
49320: LD_INT 1
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 1
49330: NEG
49331: PUSH
49332: LD_INT 2
49334: NEG
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 2
49342: PUSH
49343: LD_INT 1
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 2
49352: PUSH
49353: LD_INT 2
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 1
49362: PUSH
49363: LD_INT 2
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 2
49372: NEG
49373: PUSH
49374: LD_INT 1
49376: NEG
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 2
49384: NEG
49385: PUSH
49386: LD_INT 2
49388: NEG
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 3
49396: PUSH
49397: LD_INT 2
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 3
49406: PUSH
49407: LD_INT 3
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 2
49416: PUSH
49417: LD_INT 3
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49442: LD_ADDR_VAR 0 17
49446: PUSH
49447: LD_INT 0
49449: PUSH
49450: LD_INT 0
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: LD_INT 1
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: PUSH
49471: LD_INT 0
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: LD_INT 1
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: LD_INT 1
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 1
49500: NEG
49501: PUSH
49502: LD_INT 0
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 1
49511: NEG
49512: PUSH
49513: LD_INT 1
49515: NEG
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: LD_INT 2
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 0
49535: PUSH
49536: LD_INT 2
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 2
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 2
49567: PUSH
49568: LD_INT 1
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 2
49577: PUSH
49578: LD_INT 2
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 1
49587: PUSH
49588: LD_INT 2
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 0
49597: PUSH
49598: LD_INT 2
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 1
49607: NEG
49608: PUSH
49609: LD_INT 1
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 2
49618: NEG
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 2
49629: NEG
49630: PUSH
49631: LD_INT 1
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 2
49641: NEG
49642: PUSH
49643: LD_INT 2
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49672: LD_ADDR_VAR 0 18
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: LD_INT 1
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: PUSH
49701: LD_INT 0
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 1
49710: PUSH
49711: LD_INT 1
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 1
49730: NEG
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 1
49741: NEG
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: LD_INT 2
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 0
49765: PUSH
49766: LD_INT 2
49768: NEG
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 1
49776: PUSH
49777: LD_INT 1
49779: NEG
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 2
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 2
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 2
49807: PUSH
49808: LD_INT 2
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: PUSH
49818: LD_INT 2
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 0
49827: PUSH
49828: LD_INT 2
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 1
49837: NEG
49838: PUSH
49839: LD_INT 1
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 2
49848: NEG
49849: PUSH
49850: LD_INT 0
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 2
49859: NEG
49860: PUSH
49861: LD_INT 1
49863: NEG
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 2
49871: NEG
49872: PUSH
49873: LD_INT 2
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49902: LD_ADDR_VAR 0 19
49906: PUSH
49907: LD_INT 0
49909: PUSH
49910: LD_INT 0
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 0
49919: PUSH
49920: LD_INT 1
49922: NEG
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 1
49930: PUSH
49931: LD_INT 0
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: LD_INT 1
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: LD_INT 1
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 1
49960: NEG
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 1
49971: NEG
49972: PUSH
49973: LD_INT 1
49975: NEG
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 1
49983: NEG
49984: PUSH
49985: LD_INT 2
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: LD_INT 2
49998: NEG
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 1
50006: PUSH
50007: LD_INT 1
50009: NEG
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 2
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 2
50027: PUSH
50028: LD_INT 1
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 2
50037: PUSH
50038: LD_INT 2
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 1
50047: PUSH
50048: LD_INT 2
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: LD_INT 2
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 1
50067: NEG
50068: PUSH
50069: LD_INT 1
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 2
50078: NEG
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 2
50089: NEG
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 2
50101: NEG
50102: PUSH
50103: LD_INT 2
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50132: LD_ADDR_VAR 0 20
50136: PUSH
50137: LD_INT 0
50139: PUSH
50140: LD_INT 0
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 0
50149: PUSH
50150: LD_INT 1
50152: NEG
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 1
50160: PUSH
50161: LD_INT 0
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 1
50170: PUSH
50171: LD_INT 1
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 0
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 1
50190: NEG
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: LD_INT 2
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 0
50225: PUSH
50226: LD_INT 2
50228: NEG
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 2
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 2
50257: PUSH
50258: LD_INT 1
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 2
50267: PUSH
50268: LD_INT 2
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 1
50277: PUSH
50278: LD_INT 2
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 0
50287: PUSH
50288: LD_INT 2
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: NEG
50298: PUSH
50299: LD_INT 1
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 2
50308: NEG
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 2
50319: NEG
50320: PUSH
50321: LD_INT 1
50323: NEG
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 2
50331: NEG
50332: PUSH
50333: LD_INT 2
50335: NEG
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50362: LD_ADDR_VAR 0 21
50366: PUSH
50367: LD_INT 0
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 0
50379: PUSH
50380: LD_INT 1
50382: NEG
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 1
50400: PUSH
50401: LD_INT 1
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: LD_INT 1
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 1
50420: NEG
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: LD_INT 1
50435: NEG
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: NEG
50444: PUSH
50445: LD_INT 2
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: LD_INT 2
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 1
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 2
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 2
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 2
50497: PUSH
50498: LD_INT 2
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: LD_INT 2
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 0
50517: PUSH
50518: LD_INT 2
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: NEG
50528: PUSH
50529: LD_INT 1
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 2
50538: NEG
50539: PUSH
50540: LD_INT 0
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 2
50549: NEG
50550: PUSH
50551: LD_INT 1
50553: NEG
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 2
50561: NEG
50562: PUSH
50563: LD_INT 2
50565: NEG
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50592: LD_ADDR_VAR 0 22
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: PUSH
50631: LD_INT 1
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: LD_INT 1
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 1
50650: NEG
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 1
50673: NEG
50674: PUSH
50675: LD_INT 2
50677: NEG
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: LD_INT 2
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: PUSH
50697: LD_INT 1
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 2
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 2
50717: PUSH
50718: LD_INT 1
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 2
50727: PUSH
50728: LD_INT 2
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 1
50737: PUSH
50738: LD_INT 2
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 0
50747: PUSH
50748: LD_INT 2
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: NEG
50758: PUSH
50759: LD_INT 1
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 2
50768: NEG
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 2
50779: NEG
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 2
50791: NEG
50792: PUSH
50793: LD_INT 2
50795: NEG
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50822: LD_ADDR_VAR 0 23
50826: PUSH
50827: LD_INT 0
50829: PUSH
50830: LD_INT 0
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 0
50839: PUSH
50840: LD_INT 1
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 1
50860: PUSH
50861: LD_INT 1
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: LD_INT 1
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 1
50880: NEG
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 1
50891: NEG
50892: PUSH
50893: LD_INT 1
50895: NEG
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 1
50903: NEG
50904: PUSH
50905: LD_INT 2
50907: NEG
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 0
50915: PUSH
50916: LD_INT 2
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 1
50926: PUSH
50927: LD_INT 1
50929: NEG
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 2
50937: PUSH
50938: LD_INT 0
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 2
50947: PUSH
50948: LD_INT 1
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 2
50957: PUSH
50958: LD_INT 2
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 1
50967: PUSH
50968: LD_INT 2
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: LD_INT 2
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 1
50987: NEG
50988: PUSH
50989: LD_INT 1
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 2
50998: NEG
50999: PUSH
51000: LD_INT 0
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 2
51009: NEG
51010: PUSH
51011: LD_INT 1
51013: NEG
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 2
51021: NEG
51022: PUSH
51023: LD_INT 2
51025: NEG
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 2
51033: NEG
51034: PUSH
51035: LD_INT 3
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 1
51045: NEG
51046: PUSH
51047: LD_INT 3
51049: NEG
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 1
51057: PUSH
51058: LD_INT 2
51060: NEG
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 2
51068: PUSH
51069: LD_INT 1
51071: NEG
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51102: LD_ADDR_VAR 0 24
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: LD_INT 0
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 0
51119: PUSH
51120: LD_INT 1
51122: NEG
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 1
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 1
51140: PUSH
51141: LD_INT 1
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: LD_INT 1
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 1
51160: NEG
51161: PUSH
51162: LD_INT 0
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 1
51171: NEG
51172: PUSH
51173: LD_INT 1
51175: NEG
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 1
51183: NEG
51184: PUSH
51185: LD_INT 2
51187: NEG
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: LD_INT 2
51198: NEG
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 2
51217: PUSH
51218: LD_INT 0
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 2
51227: PUSH
51228: LD_INT 1
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 2
51237: PUSH
51238: LD_INT 2
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 1
51247: PUSH
51248: LD_INT 2
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 0
51257: PUSH
51258: LD_INT 2
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 1
51267: NEG
51268: PUSH
51269: LD_INT 1
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 2
51278: NEG
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 2
51289: NEG
51290: PUSH
51291: LD_INT 1
51293: NEG
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 2
51301: NEG
51302: PUSH
51303: LD_INT 2
51305: NEG
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 1
51313: PUSH
51314: LD_INT 2
51316: NEG
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 2
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 3
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 3
51345: PUSH
51346: LD_INT 2
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51378: LD_ADDR_VAR 0 25
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: LD_INT 0
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 0
51395: PUSH
51396: LD_INT 1
51398: NEG
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 1
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 1
51416: PUSH
51417: LD_INT 1
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 0
51426: PUSH
51427: LD_INT 1
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 1
51436: NEG
51437: PUSH
51438: LD_INT 0
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: LD_INT 1
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 1
51459: NEG
51460: PUSH
51461: LD_INT 2
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: LD_INT 2
51474: NEG
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: LD_INT 1
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 2
51493: PUSH
51494: LD_INT 0
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 2
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 2
51513: PUSH
51514: LD_INT 2
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 1
51523: PUSH
51524: LD_INT 2
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 0
51533: PUSH
51534: LD_INT 2
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 1
51543: NEG
51544: PUSH
51545: LD_INT 1
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 2
51554: NEG
51555: PUSH
51556: LD_INT 0
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 2
51565: NEG
51566: PUSH
51567: LD_INT 1
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 2
51577: NEG
51578: PUSH
51579: LD_INT 2
51581: NEG
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 3
51589: PUSH
51590: LD_INT 1
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 3
51599: PUSH
51600: LD_INT 2
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 2
51609: PUSH
51610: LD_INT 3
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 1
51619: PUSH
51620: LD_INT 3
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51652: LD_ADDR_VAR 0 26
51656: PUSH
51657: LD_INT 0
51659: PUSH
51660: LD_INT 0
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: LD_INT 1
51672: NEG
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 1
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 1
51690: PUSH
51691: LD_INT 1
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: LD_INT 1
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 1
51710: NEG
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 1
51721: NEG
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 1
51733: NEG
51734: PUSH
51735: LD_INT 2
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: LD_INT 2
51748: NEG
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 1
51756: PUSH
51757: LD_INT 1
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 2
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 2
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 2
51787: PUSH
51788: LD_INT 2
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 1
51797: PUSH
51798: LD_INT 2
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 0
51807: PUSH
51808: LD_INT 2
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 1
51817: NEG
51818: PUSH
51819: LD_INT 1
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 2
51828: NEG
51829: PUSH
51830: LD_INT 0
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 2
51839: NEG
51840: PUSH
51841: LD_INT 1
51843: NEG
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 2
51851: NEG
51852: PUSH
51853: LD_INT 2
51855: NEG
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 2
51863: PUSH
51864: LD_INT 3
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 1
51873: PUSH
51874: LD_INT 3
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 1
51883: NEG
51884: PUSH
51885: LD_INT 2
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 2
51894: NEG
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51928: LD_ADDR_VAR 0 27
51932: PUSH
51933: LD_INT 0
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: LD_INT 1
51948: NEG
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: LD_INT 0
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: LD_INT 1
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 0
51976: PUSH
51977: LD_INT 1
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 1
51986: NEG
51987: PUSH
51988: LD_INT 0
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 1
51997: NEG
51998: PUSH
51999: LD_INT 1
52001: NEG
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 1
52009: NEG
52010: PUSH
52011: LD_INT 2
52013: NEG
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 0
52021: PUSH
52022: LD_INT 2
52024: NEG
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 1
52032: PUSH
52033: LD_INT 1
52035: NEG
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 2
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 2
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 2
52063: PUSH
52064: LD_INT 2
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 1
52073: PUSH
52074: LD_INT 2
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 0
52083: PUSH
52084: LD_INT 2
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 1
52093: NEG
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 2
52104: NEG
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 2
52115: NEG
52116: PUSH
52117: LD_INT 1
52119: NEG
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 2
52127: NEG
52128: PUSH
52129: LD_INT 2
52131: NEG
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: LD_INT 2
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 2
52150: NEG
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 3
52161: NEG
52162: PUSH
52163: LD_INT 1
52165: NEG
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 3
52173: NEG
52174: PUSH
52175: LD_INT 2
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52208: LD_ADDR_VAR 0 28
52212: PUSH
52213: LD_INT 0
52215: PUSH
52216: LD_INT 0
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: LD_INT 1
52228: NEG
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 1
52236: PUSH
52237: LD_INT 0
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: LD_INT 1
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 1
52266: NEG
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: NEG
52278: PUSH
52279: LD_INT 1
52281: NEG
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 1
52289: NEG
52290: PUSH
52291: LD_INT 2
52293: NEG
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 0
52301: PUSH
52302: LD_INT 2
52304: NEG
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: PUSH
52313: LD_INT 1
52315: NEG
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 2
52323: PUSH
52324: LD_INT 0
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 2
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 2
52343: PUSH
52344: LD_INT 2
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 1
52353: PUSH
52354: LD_INT 2
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 0
52363: PUSH
52364: LD_INT 2
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 1
52373: NEG
52374: PUSH
52375: LD_INT 1
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 2
52384: NEG
52385: PUSH
52386: LD_INT 0
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 2
52395: NEG
52396: PUSH
52397: LD_INT 1
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 2
52407: NEG
52408: PUSH
52409: LD_INT 2
52411: NEG
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 2
52419: NEG
52420: PUSH
52421: LD_INT 3
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: NEG
52432: PUSH
52433: LD_INT 3
52435: NEG
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 3
52443: NEG
52444: PUSH
52445: LD_INT 1
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 3
52455: NEG
52456: PUSH
52457: LD_INT 2
52459: NEG
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52490: LD_ADDR_VAR 0 29
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 0
52507: PUSH
52508: LD_INT 1
52510: NEG
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 1
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 1
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: LD_INT 1
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: LD_INT 0
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 1
52571: NEG
52572: PUSH
52573: LD_INT 2
52575: NEG
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 0
52583: PUSH
52584: LD_INT 2
52586: NEG
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 1
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 2
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 2
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 1
52625: PUSH
52626: LD_INT 2
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 0
52635: PUSH
52636: LD_INT 2
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 1
52645: NEG
52646: PUSH
52647: LD_INT 1
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 2
52656: NEG
52657: PUSH
52658: LD_INT 1
52660: NEG
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 2
52668: NEG
52669: PUSH
52670: LD_INT 2
52672: NEG
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 2
52680: NEG
52681: PUSH
52682: LD_INT 3
52684: NEG
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 2
52692: PUSH
52693: LD_INT 1
52695: NEG
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 3
52703: PUSH
52704: LD_INT 1
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 1
52713: PUSH
52714: LD_INT 3
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 1
52723: NEG
52724: PUSH
52725: LD_INT 2
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 3
52734: NEG
52735: PUSH
52736: LD_INT 2
52738: NEG
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52769: LD_ADDR_VAR 0 30
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: LD_INT 0
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: LD_INT 1
52789: NEG
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 1
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 1
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: LD_INT 1
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 1
52827: NEG
52828: PUSH
52829: LD_INT 0
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: LD_INT 1
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 1
52850: NEG
52851: PUSH
52852: LD_INT 2
52854: NEG
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 0
52862: PUSH
52863: LD_INT 2
52865: NEG
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 1
52873: PUSH
52874: LD_INT 1
52876: NEG
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 2
52884: PUSH
52885: LD_INT 0
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 2
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 2
52904: PUSH
52905: LD_INT 2
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 1
52914: PUSH
52915: LD_INT 2
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 1
52924: NEG
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 2
52935: NEG
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 2
52946: NEG
52947: PUSH
52948: LD_INT 1
52950: NEG
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 1
52958: NEG
52959: PUSH
52960: LD_INT 3
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: LD_INT 2
52973: NEG
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 3
52981: PUSH
52982: LD_INT 2
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 2
52991: PUSH
52992: LD_INT 3
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 2
53001: NEG
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 3
53012: NEG
53013: PUSH
53014: LD_INT 1
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53047: LD_ADDR_VAR 0 31
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: LD_INT 1
53067: NEG
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 1
53075: PUSH
53076: LD_INT 0
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 1
53085: PUSH
53086: LD_INT 1
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 0
53095: PUSH
53096: LD_INT 1
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 1
53105: NEG
53106: PUSH
53107: LD_INT 0
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 1
53116: NEG
53117: PUSH
53118: LD_INT 1
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 1
53128: NEG
53129: PUSH
53130: LD_INT 2
53132: NEG
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 1
53140: PUSH
53141: LD_INT 1
53143: NEG
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 2
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 2
53161: PUSH
53162: LD_INT 1
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 2
53171: PUSH
53172: LD_INT 2
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: PUSH
53182: LD_INT 2
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 0
53191: PUSH
53192: LD_INT 2
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 1
53201: NEG
53202: PUSH
53203: LD_INT 1
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 2
53212: NEG
53213: PUSH
53214: LD_INT 1
53216: NEG
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 2
53224: NEG
53225: PUSH
53226: LD_INT 2
53228: NEG
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 2
53236: NEG
53237: PUSH
53238: LD_INT 3
53240: NEG
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 2
53248: PUSH
53249: LD_INT 1
53251: NEG
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 3
53259: PUSH
53260: LD_INT 1
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 1
53269: PUSH
53270: LD_INT 3
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 1
53279: NEG
53280: PUSH
53281: LD_INT 2
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 3
53290: NEG
53291: PUSH
53292: LD_INT 2
53294: NEG
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53325: LD_ADDR_VAR 0 32
53329: PUSH
53330: LD_INT 0
53332: PUSH
53333: LD_INT 0
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 0
53342: PUSH
53343: LD_INT 1
53345: NEG
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 1
53353: PUSH
53354: LD_INT 0
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 1
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: LD_INT 1
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 1
53383: NEG
53384: PUSH
53385: LD_INT 0
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 1
53394: NEG
53395: PUSH
53396: LD_INT 1
53398: NEG
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 1
53406: NEG
53407: PUSH
53408: LD_INT 2
53410: NEG
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: LD_INT 2
53421: NEG
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 1
53429: PUSH
53430: LD_INT 1
53432: NEG
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 2
53440: PUSH
53441: LD_INT 1
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 2
53450: PUSH
53451: LD_INT 2
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 1
53460: PUSH
53461: LD_INT 2
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 0
53470: PUSH
53471: LD_INT 2
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: LD_INT 1
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 2
53491: NEG
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 2
53502: NEG
53503: PUSH
53504: LD_INT 1
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 1
53514: NEG
53515: PUSH
53516: LD_INT 3
53518: NEG
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 1
53526: PUSH
53527: LD_INT 2
53529: NEG
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 3
53537: PUSH
53538: LD_INT 2
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 2
53547: PUSH
53548: LD_INT 3
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 2
53557: NEG
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 3
53568: NEG
53569: PUSH
53570: LD_INT 1
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53603: LD_ADDR_VAR 0 33
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: LD_INT 0
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 1
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 1
53661: NEG
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: LD_INT 2
53688: NEG
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: LD_INT 1
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 2
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 2
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 1
53727: PUSH
53728: LD_INT 2
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 0
53737: PUSH
53738: LD_INT 2
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 1
53747: NEG
53748: PUSH
53749: LD_INT 1
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 2
53758: NEG
53759: PUSH
53760: LD_INT 0
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 2
53769: NEG
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 2
53781: NEG
53782: PUSH
53783: LD_INT 2
53785: NEG
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 2
53793: NEG
53794: PUSH
53795: LD_INT 3
53797: NEG
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 2
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 3
53816: PUSH
53817: LD_INT 1
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 1
53826: PUSH
53827: LD_INT 3
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 1
53836: NEG
53837: PUSH
53838: LD_INT 2
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 3
53847: NEG
53848: PUSH
53849: LD_INT 2
53851: NEG
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53882: LD_ADDR_VAR 0 34
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: LD_INT 0
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 1
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 0
53930: PUSH
53931: LD_INT 1
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 1
53940: NEG
53941: PUSH
53942: LD_INT 0
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 1
53951: NEG
53952: PUSH
53953: LD_INT 1
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 1
53963: NEG
53964: PUSH
53965: LD_INT 2
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: LD_INT 2
53978: NEG
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 1
53986: PUSH
53987: LD_INT 1
53989: NEG
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 2
53997: PUSH
53998: LD_INT 1
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 2
54007: PUSH
54008: LD_INT 2
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: LD_INT 2
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: LD_INT 1
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 2
54038: NEG
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 2
54049: NEG
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 2
54061: NEG
54062: PUSH
54063: LD_INT 2
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 1
54073: NEG
54074: PUSH
54075: LD_INT 3
54077: NEG
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 1
54085: PUSH
54086: LD_INT 2
54088: NEG
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 3
54096: PUSH
54097: LD_INT 2
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 2
54106: PUSH
54107: LD_INT 3
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 2
54116: NEG
54117: PUSH
54118: LD_INT 1
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 3
54127: NEG
54128: PUSH
54129: LD_INT 1
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54162: LD_ADDR_VAR 0 35
54166: PUSH
54167: LD_INT 0
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: LD_INT 1
54182: NEG
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 1
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 1
54200: PUSH
54201: LD_INT 1
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 0
54210: PUSH
54211: LD_INT 1
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 1
54220: NEG
54221: PUSH
54222: LD_INT 0
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: LD_INT 1
54235: NEG
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 2
54243: PUSH
54244: LD_INT 1
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 2
54253: NEG
54254: PUSH
54255: LD_INT 1
54257: NEG
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54274: LD_ADDR_VAR 0 36
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: LD_INT 0
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: LD_INT 1
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 1
54302: PUSH
54303: LD_INT 0
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 1
54312: PUSH
54313: LD_INT 1
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: LD_INT 1
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 1
54332: NEG
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 1
54343: NEG
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 1
54355: NEG
54356: PUSH
54357: LD_INT 2
54359: NEG
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 1
54367: PUSH
54368: LD_INT 2
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54386: LD_ADDR_VAR 0 37
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: LD_INT 0
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 0
54403: PUSH
54404: LD_INT 1
54406: NEG
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 1
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: LD_INT 1
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: LD_INT 1
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 1
54455: NEG
54456: PUSH
54457: LD_INT 1
54459: NEG
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 1
54467: PUSH
54468: LD_INT 1
54470: NEG
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 1
54478: NEG
54479: PUSH
54480: LD_INT 1
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54498: LD_ADDR_VAR 0 38
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: LD_INT 1
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 1
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 0
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: NEG
54557: PUSH
54558: LD_INT 0
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 1
54567: NEG
54568: PUSH
54569: LD_INT 1
54571: NEG
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 2
54579: PUSH
54580: LD_INT 1
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 2
54589: NEG
54590: PUSH
54591: LD_INT 1
54593: NEG
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54610: LD_ADDR_VAR 0 39
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: LD_INT 0
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: LD_INT 1
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: LD_INT 0
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 1
54648: PUSH
54649: LD_INT 1
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 0
54658: PUSH
54659: LD_INT 1
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 1
54668: NEG
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 1
54679: NEG
54680: PUSH
54681: LD_INT 1
54683: NEG
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: LD_INT 2
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 1
54703: PUSH
54704: LD_INT 2
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54722: LD_ADDR_VAR 0 40
54726: PUSH
54727: LD_INT 0
54729: PUSH
54730: LD_INT 0
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: LD_INT 1
54742: NEG
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 1
54750: PUSH
54751: LD_INT 0
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: LD_INT 1
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 0
54770: PUSH
54771: LD_INT 1
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 1
54780: NEG
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: LD_INT 1
54795: NEG
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 1
54803: PUSH
54804: LD_INT 1
54806: NEG
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: LD_INT 1
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54834: LD_ADDR_VAR 0 41
54838: PUSH
54839: LD_INT 0
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: LD_INT 1
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 1
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 1
54872: PUSH
54873: LD_INT 1
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: LD_INT 1
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 1
54892: NEG
54893: PUSH
54894: LD_INT 0
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 1
54903: NEG
54904: PUSH
54905: LD_INT 1
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 1
54915: NEG
54916: PUSH
54917: LD_INT 2
54919: NEG
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 1
54927: PUSH
54928: LD_INT 1
54930: NEG
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 2
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 2
54948: PUSH
54949: LD_INT 1
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 2
54958: PUSH
54959: LD_INT 2
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 1
54968: PUSH
54969: LD_INT 2
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 1
54978: NEG
54979: PUSH
54980: LD_INT 1
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 2
54989: NEG
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 2
55000: NEG
55001: PUSH
55002: LD_INT 1
55004: NEG
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 2
55012: NEG
55013: PUSH
55014: LD_INT 2
55016: NEG
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 2
55024: NEG
55025: PUSH
55026: LD_INT 3
55028: NEG
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 2
55036: PUSH
55037: LD_INT 1
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 3
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 3
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 3
55067: PUSH
55068: LD_INT 2
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 3
55077: PUSH
55078: LD_INT 3
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 2
55087: PUSH
55088: LD_INT 3
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 2
55097: NEG
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 3
55108: NEG
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 3
55119: NEG
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 3
55131: NEG
55132: PUSH
55133: LD_INT 2
55135: NEG
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 3
55143: NEG
55144: PUSH
55145: LD_INT 3
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55184: LD_ADDR_VAR 0 42
55188: PUSH
55189: LD_INT 0
55191: PUSH
55192: LD_INT 0
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: LD_INT 1
55204: NEG
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 1
55212: PUSH
55213: LD_INT 0
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 1
55222: PUSH
55223: LD_INT 1
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 1
55242: NEG
55243: PUSH
55244: LD_INT 0
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: NEG
55254: PUSH
55255: LD_INT 1
55257: NEG
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 1
55265: NEG
55266: PUSH
55267: LD_INT 2
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 0
55277: PUSH
55278: LD_INT 2
55280: NEG
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 1
55288: PUSH
55289: LD_INT 1
55291: NEG
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 2
55299: PUSH
55300: LD_INT 1
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 2
55309: PUSH
55310: LD_INT 2
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 1
55319: PUSH
55320: LD_INT 2
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 0
55329: PUSH
55330: LD_INT 2
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 1
55339: NEG
55340: PUSH
55341: LD_INT 1
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 2
55350: NEG
55351: PUSH
55352: LD_INT 1
55354: NEG
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 2
55362: NEG
55363: PUSH
55364: LD_INT 2
55366: NEG
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 2
55374: NEG
55375: PUSH
55376: LD_INT 3
55378: NEG
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 1
55386: NEG
55387: PUSH
55388: LD_INT 3
55390: NEG
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: LD_INT 3
55401: NEG
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: PUSH
55410: LD_INT 2
55412: NEG
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 3
55420: PUSH
55421: LD_INT 2
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 3
55430: PUSH
55431: LD_INT 3
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 2
55440: PUSH
55441: LD_INT 3
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: LD_INT 3
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: LD_INT 3
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: LD_INT 2
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 3
55481: NEG
55482: PUSH
55483: LD_INT 2
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 3
55493: NEG
55494: PUSH
55495: LD_INT 3
55497: NEG
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55534: LD_ADDR_VAR 0 43
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: LD_INT 1
55554: NEG
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: LD_INT 1
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: NEG
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: LD_INT 1
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 1
55615: NEG
55616: PUSH
55617: LD_INT 2
55619: NEG
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: LD_INT 2
55630: NEG
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 1
55638: PUSH
55639: LD_INT 1
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 2
55649: PUSH
55650: LD_INT 0
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 2
55659: PUSH
55660: LD_INT 1
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 1
55669: PUSH
55670: LD_INT 2
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 0
55679: PUSH
55680: LD_INT 2
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 1
55689: NEG
55690: PUSH
55691: LD_INT 1
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 2
55700: NEG
55701: PUSH
55702: LD_INT 0
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 2
55711: NEG
55712: PUSH
55713: LD_INT 1
55715: NEG
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 1
55723: NEG
55724: PUSH
55725: LD_INT 3
55727: NEG
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 0
55735: PUSH
55736: LD_INT 3
55738: NEG
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 1
55746: PUSH
55747: LD_INT 2
55749: NEG
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 2
55757: PUSH
55758: LD_INT 1
55760: NEG
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 3
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 3
55778: PUSH
55779: LD_INT 1
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 1
55788: PUSH
55789: LD_INT 3
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 0
55798: PUSH
55799: LD_INT 3
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 1
55808: NEG
55809: PUSH
55810: LD_INT 2
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 2
55819: NEG
55820: PUSH
55821: LD_INT 1
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 3
55830: NEG
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 3
55841: NEG
55842: PUSH
55843: LD_INT 1
55845: NEG
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55882: LD_ADDR_VAR 0 44
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: LD_INT 0
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: LD_INT 1
55902: NEG
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 1
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: LD_INT 1
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: LD_INT 1
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 1
55940: NEG
55941: PUSH
55942: LD_INT 0
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 1
55951: NEG
55952: PUSH
55953: LD_INT 1
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 1
55963: NEG
55964: PUSH
55965: LD_INT 2
55967: NEG
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: LD_INT 1
55978: NEG
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 2
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 2
55996: PUSH
55997: LD_INT 1
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 2
56006: PUSH
56007: LD_INT 2
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 1
56016: PUSH
56017: LD_INT 2
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: NEG
56027: PUSH
56028: LD_INT 1
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 2
56037: NEG
56038: PUSH
56039: LD_INT 0
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 2
56048: NEG
56049: PUSH
56050: LD_INT 1
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 2
56060: NEG
56061: PUSH
56062: LD_INT 2
56064: NEG
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 2
56072: NEG
56073: PUSH
56074: LD_INT 3
56076: NEG
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 2
56084: PUSH
56085: LD_INT 1
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 3
56095: PUSH
56096: LD_INT 0
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 3
56105: PUSH
56106: LD_INT 1
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 3
56115: PUSH
56116: LD_INT 2
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 3
56125: PUSH
56126: LD_INT 3
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 2
56135: PUSH
56136: LD_INT 3
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 2
56145: NEG
56146: PUSH
56147: LD_INT 1
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 3
56156: NEG
56157: PUSH
56158: LD_INT 0
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 3
56167: NEG
56168: PUSH
56169: LD_INT 1
56171: NEG
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 3
56179: NEG
56180: PUSH
56181: LD_INT 2
56183: NEG
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 3
56191: NEG
56192: PUSH
56193: LD_INT 3
56195: NEG
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56232: LD_ADDR_VAR 0 45
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: LD_INT 0
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 1
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 1
56270: PUSH
56271: LD_INT 1
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: LD_INT 1
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 1
56290: NEG
56291: PUSH
56292: LD_INT 0
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: NEG
56302: PUSH
56303: LD_INT 1
56305: NEG
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 1
56313: NEG
56314: PUSH
56315: LD_INT 2
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: LD_INT 2
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 1
56336: PUSH
56337: LD_INT 1
56339: NEG
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 2
56347: PUSH
56348: LD_INT 1
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 2
56357: PUSH
56358: LD_INT 2
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 1
56367: PUSH
56368: LD_INT 2
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 0
56377: PUSH
56378: LD_INT 2
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 1
56387: NEG
56388: PUSH
56389: LD_INT 1
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 2
56398: NEG
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 2
56410: NEG
56411: PUSH
56412: LD_INT 2
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 2
56422: NEG
56423: PUSH
56424: LD_INT 3
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 1
56434: NEG
56435: PUSH
56436: LD_INT 3
56438: NEG
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 0
56446: PUSH
56447: LD_INT 3
56449: NEG
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 1
56457: PUSH
56458: LD_INT 2
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 3
56468: PUSH
56469: LD_INT 2
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 3
56478: PUSH
56479: LD_INT 3
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 2
56488: PUSH
56489: LD_INT 3
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 1
56498: PUSH
56499: LD_INT 3
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 0
56508: PUSH
56509: LD_INT 3
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 1
56518: NEG
56519: PUSH
56520: LD_INT 2
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 3
56529: NEG
56530: PUSH
56531: LD_INT 2
56533: NEG
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 3
56541: NEG
56542: PUSH
56543: LD_INT 3
56545: NEG
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56582: LD_ADDR_VAR 0 46
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 0
56599: PUSH
56600: LD_INT 1
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 1
56620: PUSH
56621: LD_INT 1
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 0
56630: PUSH
56631: LD_INT 1
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 1
56640: NEG
56641: PUSH
56642: LD_INT 0
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 1
56651: NEG
56652: PUSH
56653: LD_INT 1
56655: NEG
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 1
56663: NEG
56664: PUSH
56665: LD_INT 2
56667: NEG
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 0
56675: PUSH
56676: LD_INT 2
56678: NEG
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 1
56686: PUSH
56687: LD_INT 1
56689: NEG
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 2
56697: PUSH
56698: LD_INT 0
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 2
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 1
56717: PUSH
56718: LD_INT 2
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 0
56727: PUSH
56728: LD_INT 2
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 1
56737: NEG
56738: PUSH
56739: LD_INT 1
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 2
56748: NEG
56749: PUSH
56750: LD_INT 0
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 2
56759: NEG
56760: PUSH
56761: LD_INT 1
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 1
56771: NEG
56772: PUSH
56773: LD_INT 3
56775: NEG
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 0
56783: PUSH
56784: LD_INT 3
56786: NEG
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 1
56794: PUSH
56795: LD_INT 2
56797: NEG
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 2
56805: PUSH
56806: LD_INT 1
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 3
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 3
56826: PUSH
56827: LD_INT 1
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 1
56836: PUSH
56837: LD_INT 3
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 0
56846: PUSH
56847: LD_INT 3
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 1
56856: NEG
56857: PUSH
56858: LD_INT 2
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 2
56867: NEG
56868: PUSH
56869: LD_INT 1
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 3
56878: NEG
56879: PUSH
56880: LD_INT 0
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 3
56889: NEG
56890: PUSH
56891: LD_INT 1
56893: NEG
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56930: LD_ADDR_VAR 0 47
56934: PUSH
56935: LD_INT 0
56937: PUSH
56938: LD_INT 0
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 0
56947: PUSH
56948: LD_INT 1
56950: NEG
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 1
56958: PUSH
56959: LD_INT 0
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 1
56968: PUSH
56969: LD_INT 1
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 0
56978: PUSH
56979: LD_INT 1
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 1
56988: NEG
56989: PUSH
56990: LD_INT 0
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 1
56999: NEG
57000: PUSH
57001: LD_INT 1
57003: NEG
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 1
57011: NEG
57012: PUSH
57013: LD_INT 2
57015: NEG
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 0
57023: PUSH
57024: LD_INT 2
57026: NEG
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 1
57034: PUSH
57035: LD_INT 1
57037: NEG
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 2
57045: NEG
57046: PUSH
57047: LD_INT 1
57049: NEG
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 2
57057: NEG
57058: PUSH
57059: LD_INT 2
57061: NEG
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57081: LD_ADDR_VAR 0 48
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 0
57098: PUSH
57099: LD_INT 1
57101: NEG
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: LD_INT 0
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 1
57119: PUSH
57120: LD_INT 1
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 0
57129: PUSH
57130: LD_INT 1
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 1
57139: NEG
57140: PUSH
57141: LD_INT 0
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 1
57150: NEG
57151: PUSH
57152: LD_INT 1
57154: NEG
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 1
57162: NEG
57163: PUSH
57164: LD_INT 2
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: LD_INT 2
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 1
57185: PUSH
57186: LD_INT 1
57188: NEG
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 2
57196: PUSH
57197: LD_INT 0
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 2
57206: PUSH
57207: LD_INT 1
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57228: LD_ADDR_VAR 0 49
57232: PUSH
57233: LD_INT 0
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 0
57245: PUSH
57246: LD_INT 1
57248: NEG
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 1
57256: PUSH
57257: LD_INT 0
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 1
57266: PUSH
57267: LD_INT 1
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: LD_INT 1
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: NEG
57287: PUSH
57288: LD_INT 0
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 1
57297: NEG
57298: PUSH
57299: LD_INT 1
57301: NEG
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 1
57309: PUSH
57310: LD_INT 1
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 2
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 2
57330: PUSH
57331: LD_INT 1
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 2
57340: PUSH
57341: LD_INT 2
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 1
57350: PUSH
57351: LD_INT 2
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57372: LD_ADDR_VAR 0 50
57376: PUSH
57377: LD_INT 0
57379: PUSH
57380: LD_INT 0
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 0
57389: PUSH
57390: LD_INT 1
57392: NEG
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 1
57400: PUSH
57401: LD_INT 0
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 1
57410: PUSH
57411: LD_INT 1
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 0
57420: PUSH
57421: LD_INT 1
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 1
57430: NEG
57431: PUSH
57432: LD_INT 0
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 1
57441: NEG
57442: PUSH
57443: LD_INT 1
57445: NEG
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 2
57453: PUSH
57454: LD_INT 1
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 2
57463: PUSH
57464: LD_INT 2
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 1
57473: PUSH
57474: LD_INT 2
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 0
57483: PUSH
57484: LD_INT 2
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 1
57493: NEG
57494: PUSH
57495: LD_INT 1
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57516: LD_ADDR_VAR 0 51
57520: PUSH
57521: LD_INT 0
57523: PUSH
57524: LD_INT 0
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 0
57533: PUSH
57534: LD_INT 1
57536: NEG
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 1
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 1
57554: PUSH
57555: LD_INT 1
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: LD_INT 1
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: NEG
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: NEG
57586: PUSH
57587: LD_INT 1
57589: NEG
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: PUSH
57598: LD_INT 2
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 0
57607: PUSH
57608: LD_INT 2
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 1
57617: NEG
57618: PUSH
57619: LD_INT 1
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 2
57628: NEG
57629: PUSH
57630: LD_INT 0
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 2
57639: NEG
57640: PUSH
57641: LD_INT 1
57643: NEG
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57663: LD_ADDR_VAR 0 52
57667: PUSH
57668: LD_INT 0
57670: PUSH
57671: LD_INT 0
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 0
57680: PUSH
57681: LD_INT 1
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: LD_INT 0
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 1
57701: PUSH
57702: LD_INT 1
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 0
57711: PUSH
57712: LD_INT 1
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 1
57732: NEG
57733: PUSH
57734: LD_INT 1
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 1
57744: NEG
57745: PUSH
57746: LD_INT 2
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 1
57756: NEG
57757: PUSH
57758: LD_INT 1
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 2
57767: NEG
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 2
57778: NEG
57779: PUSH
57780: LD_INT 1
57782: NEG
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 2
57790: NEG
57791: PUSH
57792: LD_INT 2
57794: NEG
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57814: LD_ADDR_VAR 0 53
57818: PUSH
57819: LD_INT 0
57821: PUSH
57822: LD_INT 0
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 0
57831: PUSH
57832: LD_INT 1
57834: NEG
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 1
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 1
57852: PUSH
57853: LD_INT 1
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 0
57862: PUSH
57863: LD_INT 1
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 1
57872: NEG
57873: PUSH
57874: LD_INT 0
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 1
57883: NEG
57884: PUSH
57885: LD_INT 1
57887: NEG
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 1
57895: NEG
57896: PUSH
57897: LD_INT 2
57899: NEG
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 0
57907: PUSH
57908: LD_INT 2
57910: NEG
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 1
57918: PUSH
57919: LD_INT 1
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 2
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 2
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 2
57949: PUSH
57950: LD_INT 2
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 1
57959: PUSH
57960: LD_INT 2
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 0
57969: PUSH
57970: LD_INT 2
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 1
57979: NEG
57980: PUSH
57981: LD_INT 1
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 2
57990: NEG
57991: PUSH
57992: LD_INT 0
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 2
58001: NEG
58002: PUSH
58003: LD_INT 1
58005: NEG
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 2
58013: NEG
58014: PUSH
58015: LD_INT 2
58017: NEG
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58044: LD_ADDR_VAR 0 54
58048: PUSH
58049: LD_INT 0
58051: PUSH
58052: LD_INT 0
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 0
58061: PUSH
58062: LD_INT 1
58064: NEG
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 1
58072: PUSH
58073: LD_INT 0
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 1
58082: PUSH
58083: LD_INT 1
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 0
58092: PUSH
58093: LD_INT 1
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 1
58102: NEG
58103: PUSH
58104: LD_INT 0
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 1
58113: NEG
58114: PUSH
58115: LD_INT 1
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 1
58125: NEG
58126: PUSH
58127: LD_INT 2
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 0
58137: PUSH
58138: LD_INT 2
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 1
58148: PUSH
58149: LD_INT 1
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 2
58159: PUSH
58160: LD_INT 0
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 2
58169: PUSH
58170: LD_INT 1
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 2
58179: PUSH
58180: LD_INT 2
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 1
58189: PUSH
58190: LD_INT 2
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 0
58199: PUSH
58200: LD_INT 2
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 1
58209: NEG
58210: PUSH
58211: LD_INT 1
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 2
58220: NEG
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 2
58231: NEG
58232: PUSH
58233: LD_INT 1
58235: NEG
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 2
58243: NEG
58244: PUSH
58245: LD_INT 2
58247: NEG
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58274: LD_ADDR_VAR 0 55
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: LD_INT 0
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 0
58291: PUSH
58292: LD_INT 1
58294: NEG
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 1
58302: PUSH
58303: LD_INT 0
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 1
58312: PUSH
58313: LD_INT 1
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: LD_INT 1
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 1
58332: NEG
58333: PUSH
58334: LD_INT 0
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 1
58343: NEG
58344: PUSH
58345: LD_INT 1
58347: NEG
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 1
58355: NEG
58356: PUSH
58357: LD_INT 2
58359: NEG
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 0
58367: PUSH
58368: LD_INT 2
58370: NEG
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 1
58378: PUSH
58379: LD_INT 1
58381: NEG
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 2
58389: PUSH
58390: LD_INT 0
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 2
58399: PUSH
58400: LD_INT 1
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 2
58409: PUSH
58410: LD_INT 2
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 1
58419: PUSH
58420: LD_INT 2
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 0
58429: PUSH
58430: LD_INT 2
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 1
58439: NEG
58440: PUSH
58441: LD_INT 1
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 2
58450: NEG
58451: PUSH
58452: LD_INT 0
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 2
58461: NEG
58462: PUSH
58463: LD_INT 1
58465: NEG
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 2
58473: NEG
58474: PUSH
58475: LD_INT 2
58477: NEG
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58504: LD_ADDR_VAR 0 56
58508: PUSH
58509: LD_INT 0
58511: PUSH
58512: LD_INT 0
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 0
58521: PUSH
58522: LD_INT 1
58524: NEG
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 1
58532: PUSH
58533: LD_INT 0
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 1
58542: PUSH
58543: LD_INT 1
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 0
58552: PUSH
58553: LD_INT 1
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 1
58562: NEG
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 1
58573: NEG
58574: PUSH
58575: LD_INT 1
58577: NEG
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 1
58585: NEG
58586: PUSH
58587: LD_INT 2
58589: NEG
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 0
58597: PUSH
58598: LD_INT 2
58600: NEG
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 1
58608: PUSH
58609: LD_INT 1
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 2
58619: PUSH
58620: LD_INT 0
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 2
58629: PUSH
58630: LD_INT 1
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 2
58639: PUSH
58640: LD_INT 2
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 1
58649: PUSH
58650: LD_INT 2
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 0
58659: PUSH
58660: LD_INT 2
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 1
58669: NEG
58670: PUSH
58671: LD_INT 1
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 2
58680: NEG
58681: PUSH
58682: LD_INT 0
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 2
58691: NEG
58692: PUSH
58693: LD_INT 1
58695: NEG
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 2
58703: NEG
58704: PUSH
58705: LD_INT 2
58707: NEG
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58734: LD_ADDR_VAR 0 57
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: LD_INT 0
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 0
58751: PUSH
58752: LD_INT 1
58754: NEG
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 1
58762: PUSH
58763: LD_INT 0
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 1
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 0
58782: PUSH
58783: LD_INT 1
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 1
58792: NEG
58793: PUSH
58794: LD_INT 0
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 1
58803: NEG
58804: PUSH
58805: LD_INT 1
58807: NEG
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 1
58815: NEG
58816: PUSH
58817: LD_INT 2
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 0
58827: PUSH
58828: LD_INT 2
58830: NEG
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 1
58838: PUSH
58839: LD_INT 1
58841: NEG
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 2
58849: PUSH
58850: LD_INT 0
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 2
58859: PUSH
58860: LD_INT 1
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 2
58869: PUSH
58870: LD_INT 2
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 1
58879: PUSH
58880: LD_INT 2
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 0
58889: PUSH
58890: LD_INT 2
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 1
58899: NEG
58900: PUSH
58901: LD_INT 1
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 2
58910: NEG
58911: PUSH
58912: LD_INT 0
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 2
58921: NEG
58922: PUSH
58923: LD_INT 1
58925: NEG
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 2
58933: NEG
58934: PUSH
58935: LD_INT 2
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58964: LD_ADDR_VAR 0 58
58968: PUSH
58969: LD_INT 0
58971: PUSH
58972: LD_INT 0
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 0
58981: PUSH
58982: LD_INT 1
58984: NEG
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 1
58992: PUSH
58993: LD_INT 0
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 1
59002: PUSH
59003: LD_INT 1
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 0
59012: PUSH
59013: LD_INT 1
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 1
59022: NEG
59023: PUSH
59024: LD_INT 0
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 1
59033: NEG
59034: PUSH
59035: LD_INT 1
59037: NEG
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 1
59045: NEG
59046: PUSH
59047: LD_INT 2
59049: NEG
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 0
59057: PUSH
59058: LD_INT 2
59060: NEG
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 1
59068: PUSH
59069: LD_INT 1
59071: NEG
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 2
59079: PUSH
59080: LD_INT 0
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 2
59089: PUSH
59090: LD_INT 1
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 2
59099: PUSH
59100: LD_INT 2
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 1
59109: PUSH
59110: LD_INT 2
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 0
59119: PUSH
59120: LD_INT 2
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 1
59129: NEG
59130: PUSH
59131: LD_INT 1
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 2
59140: NEG
59141: PUSH
59142: LD_INT 0
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 2
59151: NEG
59152: PUSH
59153: LD_INT 1
59155: NEG
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 2
59163: NEG
59164: PUSH
59165: LD_INT 2
59167: NEG
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59194: LD_ADDR_VAR 0 59
59198: PUSH
59199: LD_INT 0
59201: PUSH
59202: LD_INT 0
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 0
59211: PUSH
59212: LD_INT 1
59214: NEG
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 1
59222: PUSH
59223: LD_INT 0
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 1
59232: PUSH
59233: LD_INT 1
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 0
59242: PUSH
59243: LD_INT 1
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 1
59252: NEG
59253: PUSH
59254: LD_INT 0
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 1
59263: NEG
59264: PUSH
59265: LD_INT 1
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59282: LD_ADDR_VAR 0 60
59286: PUSH
59287: LD_INT 0
59289: PUSH
59290: LD_INT 0
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 0
59299: PUSH
59300: LD_INT 1
59302: NEG
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 1
59310: PUSH
59311: LD_INT 0
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 1
59320: PUSH
59321: LD_INT 1
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 0
59330: PUSH
59331: LD_INT 1
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 1
59340: NEG
59341: PUSH
59342: LD_INT 0
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 1
59351: NEG
59352: PUSH
59353: LD_INT 1
59355: NEG
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59370: LD_ADDR_VAR 0 61
59374: PUSH
59375: LD_INT 0
59377: PUSH
59378: LD_INT 0
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 0
59387: PUSH
59388: LD_INT 1
59390: NEG
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 1
59398: PUSH
59399: LD_INT 0
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 1
59408: PUSH
59409: LD_INT 1
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 0
59418: PUSH
59419: LD_INT 1
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 1
59428: NEG
59429: PUSH
59430: LD_INT 0
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 1
59439: NEG
59440: PUSH
59441: LD_INT 1
59443: NEG
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59458: LD_ADDR_VAR 0 62
59462: PUSH
59463: LD_INT 0
59465: PUSH
59466: LD_INT 0
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: LD_INT 1
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 1
59486: PUSH
59487: LD_INT 0
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 1
59496: PUSH
59497: LD_INT 1
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 0
59506: PUSH
59507: LD_INT 1
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 1
59516: NEG
59517: PUSH
59518: LD_INT 0
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 1
59527: NEG
59528: PUSH
59529: LD_INT 1
59531: NEG
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59546: LD_ADDR_VAR 0 63
59550: PUSH
59551: LD_INT 0
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 0
59563: PUSH
59564: LD_INT 1
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 1
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 1
59584: PUSH
59585: LD_INT 1
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 0
59594: PUSH
59595: LD_INT 1
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 1
59604: NEG
59605: PUSH
59606: LD_INT 0
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 1
59615: NEG
59616: PUSH
59617: LD_INT 1
59619: NEG
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59634: LD_ADDR_VAR 0 64
59638: PUSH
59639: LD_INT 0
59641: PUSH
59642: LD_INT 0
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 0
59651: PUSH
59652: LD_INT 1
59654: NEG
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 1
59662: PUSH
59663: LD_INT 0
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 1
59672: PUSH
59673: LD_INT 1
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 0
59682: PUSH
59683: LD_INT 1
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 1
59692: NEG
59693: PUSH
59694: LD_INT 0
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 1
59703: NEG
59704: PUSH
59705: LD_INT 1
59707: NEG
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: ST_TO_ADDR
// end ; 1 :
59722: GO 65619
59724: LD_INT 1
59726: DOUBLE
59727: EQUAL
59728: IFTRUE 59732
59730: GO 62355
59732: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59733: LD_ADDR_VAR 0 11
59737: PUSH
59738: LD_INT 1
59740: NEG
59741: PUSH
59742: LD_INT 3
59744: NEG
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 0
59752: PUSH
59753: LD_INT 3
59755: NEG
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 1
59763: PUSH
59764: LD_INT 2
59766: NEG
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: LIST
59776: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59777: LD_ADDR_VAR 0 12
59781: PUSH
59782: LD_INT 2
59784: PUSH
59785: LD_INT 1
59787: NEG
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 3
59795: PUSH
59796: LD_INT 0
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 3
59805: PUSH
59806: LD_INT 1
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: LIST
59817: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59818: LD_ADDR_VAR 0 13
59822: PUSH
59823: LD_INT 3
59825: PUSH
59826: LD_INT 2
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 3
59835: PUSH
59836: LD_INT 3
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 2
59845: PUSH
59846: LD_INT 3
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: LIST
59857: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59858: LD_ADDR_VAR 0 14
59862: PUSH
59863: LD_INT 1
59865: PUSH
59866: LD_INT 3
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 0
59875: PUSH
59876: LD_INT 3
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 1
59885: NEG
59886: PUSH
59887: LD_INT 2
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: LIST
59898: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59899: LD_ADDR_VAR 0 15
59903: PUSH
59904: LD_INT 2
59906: NEG
59907: PUSH
59908: LD_INT 1
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 3
59917: NEG
59918: PUSH
59919: LD_INT 0
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 3
59928: NEG
59929: PUSH
59930: LD_INT 1
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: LIST
59942: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59943: LD_ADDR_VAR 0 16
59947: PUSH
59948: LD_INT 2
59950: NEG
59951: PUSH
59952: LD_INT 3
59954: NEG
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 3
59962: NEG
59963: PUSH
59964: LD_INT 2
59966: NEG
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 3
59974: NEG
59975: PUSH
59976: LD_INT 3
59978: NEG
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: LIST
59988: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59989: LD_ADDR_VAR 0 17
59993: PUSH
59994: LD_INT 1
59996: NEG
59997: PUSH
59998: LD_INT 3
60000: NEG
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 0
60008: PUSH
60009: LD_INT 3
60011: NEG
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 1
60019: PUSH
60020: LD_INT 2
60022: NEG
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: LIST
60032: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60033: LD_ADDR_VAR 0 18
60037: PUSH
60038: LD_INT 2
60040: PUSH
60041: LD_INT 1
60043: NEG
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 3
60051: PUSH
60052: LD_INT 0
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 3
60061: PUSH
60062: LD_INT 1
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: LIST
60073: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60074: LD_ADDR_VAR 0 19
60078: PUSH
60079: LD_INT 3
60081: PUSH
60082: LD_INT 2
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 3
60091: PUSH
60092: LD_INT 3
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 2
60101: PUSH
60102: LD_INT 3
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: LIST
60113: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60114: LD_ADDR_VAR 0 20
60118: PUSH
60119: LD_INT 1
60121: PUSH
60122: LD_INT 3
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 0
60131: PUSH
60132: LD_INT 3
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 1
60141: NEG
60142: PUSH
60143: LD_INT 2
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: LIST
60154: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60155: LD_ADDR_VAR 0 21
60159: PUSH
60160: LD_INT 2
60162: NEG
60163: PUSH
60164: LD_INT 1
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 3
60173: NEG
60174: PUSH
60175: LD_INT 0
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 3
60184: NEG
60185: PUSH
60186: LD_INT 1
60188: NEG
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: LIST
60198: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60199: LD_ADDR_VAR 0 22
60203: PUSH
60204: LD_INT 2
60206: NEG
60207: PUSH
60208: LD_INT 3
60210: NEG
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 3
60218: NEG
60219: PUSH
60220: LD_INT 2
60222: NEG
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 3
60230: NEG
60231: PUSH
60232: LD_INT 3
60234: NEG
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: LIST
60244: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60245: LD_ADDR_VAR 0 23
60249: PUSH
60250: LD_INT 0
60252: PUSH
60253: LD_INT 3
60255: NEG
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 1
60263: NEG
60264: PUSH
60265: LD_INT 4
60267: NEG
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 1
60275: PUSH
60276: LD_INT 3
60278: NEG
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: LIST
60288: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60289: LD_ADDR_VAR 0 24
60293: PUSH
60294: LD_INT 3
60296: PUSH
60297: LD_INT 0
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 3
60306: PUSH
60307: LD_INT 1
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 4
60317: PUSH
60318: LD_INT 1
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: LIST
60329: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60330: LD_ADDR_VAR 0 25
60334: PUSH
60335: LD_INT 3
60337: PUSH
60338: LD_INT 3
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 4
60347: PUSH
60348: LD_INT 3
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 3
60357: PUSH
60358: LD_INT 4
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: LIST
60369: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60370: LD_ADDR_VAR 0 26
60374: PUSH
60375: LD_INT 0
60377: PUSH
60378: LD_INT 3
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 1
60387: PUSH
60388: LD_INT 4
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 1
60397: NEG
60398: PUSH
60399: LD_INT 3
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: LIST
60410: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60411: LD_ADDR_VAR 0 27
60415: PUSH
60416: LD_INT 3
60418: NEG
60419: PUSH
60420: LD_INT 0
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 3
60429: NEG
60430: PUSH
60431: LD_INT 1
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 4
60440: NEG
60441: PUSH
60442: LD_INT 1
60444: NEG
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: LIST
60454: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60455: LD_ADDR_VAR 0 28
60459: PUSH
60460: LD_INT 3
60462: NEG
60463: PUSH
60464: LD_INT 3
60466: NEG
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 3
60474: NEG
60475: PUSH
60476: LD_INT 4
60478: NEG
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 4
60486: NEG
60487: PUSH
60488: LD_INT 3
60490: NEG
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: LIST
60500: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60501: LD_ADDR_VAR 0 29
60505: PUSH
60506: LD_INT 1
60508: NEG
60509: PUSH
60510: LD_INT 3
60512: NEG
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 0
60520: PUSH
60521: LD_INT 3
60523: NEG
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 1
60531: PUSH
60532: LD_INT 2
60534: NEG
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 1
60542: NEG
60543: PUSH
60544: LD_INT 4
60546: NEG
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 0
60554: PUSH
60555: LD_INT 4
60557: NEG
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 1
60565: PUSH
60566: LD_INT 3
60568: NEG
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 1
60576: NEG
60577: PUSH
60578: LD_INT 5
60580: NEG
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 0
60588: PUSH
60589: LD_INT 5
60591: NEG
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 1
60599: PUSH
60600: LD_INT 4
60602: NEG
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 1
60610: NEG
60611: PUSH
60612: LD_INT 6
60614: NEG
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 0
60622: PUSH
60623: LD_INT 6
60625: NEG
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 1
60633: PUSH
60634: LD_INT 5
60636: NEG
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60656: LD_ADDR_VAR 0 30
60660: PUSH
60661: LD_INT 2
60663: PUSH
60664: LD_INT 1
60666: NEG
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 3
60674: PUSH
60675: LD_INT 0
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 3
60684: PUSH
60685: LD_INT 1
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 3
60694: PUSH
60695: LD_INT 1
60697: NEG
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 4
60705: PUSH
60706: LD_INT 0
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 4
60715: PUSH
60716: LD_INT 1
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 4
60725: PUSH
60726: LD_INT 1
60728: NEG
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 5
60736: PUSH
60737: LD_INT 0
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 5
60746: PUSH
60747: LD_INT 1
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 5
60756: PUSH
60757: LD_INT 1
60759: NEG
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 6
60767: PUSH
60768: LD_INT 0
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 6
60777: PUSH
60778: LD_INT 1
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60799: LD_ADDR_VAR 0 31
60803: PUSH
60804: LD_INT 3
60806: PUSH
60807: LD_INT 2
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 3
60816: PUSH
60817: LD_INT 3
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 2
60826: PUSH
60827: LD_INT 3
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 4
60836: PUSH
60837: LD_INT 3
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 4
60846: PUSH
60847: LD_INT 4
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 3
60856: PUSH
60857: LD_INT 4
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 5
60866: PUSH
60867: LD_INT 4
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 5
60876: PUSH
60877: LD_INT 5
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 4
60886: PUSH
60887: LD_INT 5
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 6
60896: PUSH
60897: LD_INT 5
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 6
60906: PUSH
60907: LD_INT 6
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 5
60916: PUSH
60917: LD_INT 6
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
60938: LD_ADDR_VAR 0 32
60942: PUSH
60943: LD_INT 1
60945: PUSH
60946: LD_INT 3
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 0
60955: PUSH
60956: LD_INT 3
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 1
60965: NEG
60966: PUSH
60967: LD_INT 2
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 1
60976: PUSH
60977: LD_INT 4
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 0
60986: PUSH
60987: LD_INT 4
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 1
60996: NEG
60997: PUSH
60998: LD_INT 3
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 1
61007: PUSH
61008: LD_INT 5
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 0
61017: PUSH
61018: LD_INT 5
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 1
61027: NEG
61028: PUSH
61029: LD_INT 4
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 1
61038: PUSH
61039: LD_INT 6
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 0
61048: PUSH
61049: LD_INT 6
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 1
61058: NEG
61059: PUSH
61060: LD_INT 5
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61081: LD_ADDR_VAR 0 33
61085: PUSH
61086: LD_INT 2
61088: NEG
61089: PUSH
61090: LD_INT 1
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 3
61099: NEG
61100: PUSH
61101: LD_INT 0
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 3
61110: NEG
61111: PUSH
61112: LD_INT 1
61114: NEG
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 3
61122: NEG
61123: PUSH
61124: LD_INT 1
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 4
61133: NEG
61134: PUSH
61135: LD_INT 0
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 4
61144: NEG
61145: PUSH
61146: LD_INT 1
61148: NEG
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 4
61156: NEG
61157: PUSH
61158: LD_INT 1
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 5
61167: NEG
61168: PUSH
61169: LD_INT 0
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 5
61178: NEG
61179: PUSH
61180: LD_INT 1
61182: NEG
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 5
61190: NEG
61191: PUSH
61192: LD_INT 1
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 6
61201: NEG
61202: PUSH
61203: LD_INT 0
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 6
61212: NEG
61213: PUSH
61214: LD_INT 1
61216: NEG
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61236: LD_ADDR_VAR 0 34
61240: PUSH
61241: LD_INT 2
61243: NEG
61244: PUSH
61245: LD_INT 3
61247: NEG
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 3
61255: NEG
61256: PUSH
61257: LD_INT 2
61259: NEG
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 3
61267: NEG
61268: PUSH
61269: LD_INT 3
61271: NEG
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 3
61279: NEG
61280: PUSH
61281: LD_INT 4
61283: NEG
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 4
61291: NEG
61292: PUSH
61293: LD_INT 3
61295: NEG
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 4
61303: NEG
61304: PUSH
61305: LD_INT 4
61307: NEG
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 4
61315: NEG
61316: PUSH
61317: LD_INT 5
61319: NEG
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 5
61327: NEG
61328: PUSH
61329: LD_INT 4
61331: NEG
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 5
61339: NEG
61340: PUSH
61341: LD_INT 5
61343: NEG
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 5
61351: NEG
61352: PUSH
61353: LD_INT 6
61355: NEG
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 6
61363: NEG
61364: PUSH
61365: LD_INT 5
61367: NEG
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 6
61375: NEG
61376: PUSH
61377: LD_INT 6
61379: NEG
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61399: LD_ADDR_VAR 0 41
61403: PUSH
61404: LD_INT 0
61406: PUSH
61407: LD_INT 2
61409: NEG
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 1
61417: NEG
61418: PUSH
61419: LD_INT 3
61421: NEG
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 1
61429: PUSH
61430: LD_INT 2
61432: NEG
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: LIST
61442: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61443: LD_ADDR_VAR 0 42
61447: PUSH
61448: LD_INT 2
61450: PUSH
61451: LD_INT 0
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 2
61460: PUSH
61461: LD_INT 1
61463: NEG
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 3
61471: PUSH
61472: LD_INT 1
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: LIST
61483: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61484: LD_ADDR_VAR 0 43
61488: PUSH
61489: LD_INT 2
61491: PUSH
61492: LD_INT 2
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 3
61501: PUSH
61502: LD_INT 2
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 2
61511: PUSH
61512: LD_INT 3
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: LIST
61523: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61524: LD_ADDR_VAR 0 44
61528: PUSH
61529: LD_INT 0
61531: PUSH
61532: LD_INT 2
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 1
61541: PUSH
61542: LD_INT 3
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 1
61551: NEG
61552: PUSH
61553: LD_INT 2
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: LIST
61564: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61565: LD_ADDR_VAR 0 45
61569: PUSH
61570: LD_INT 2
61572: NEG
61573: PUSH
61574: LD_INT 0
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 2
61583: NEG
61584: PUSH
61585: LD_INT 1
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 3
61594: NEG
61595: PUSH
61596: LD_INT 1
61598: NEG
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: LIST
61608: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61609: LD_ADDR_VAR 0 46
61613: PUSH
61614: LD_INT 2
61616: NEG
61617: PUSH
61618: LD_INT 2
61620: NEG
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 2
61628: NEG
61629: PUSH
61630: LD_INT 3
61632: NEG
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 3
61640: NEG
61641: PUSH
61642: LD_INT 2
61644: NEG
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: LIST
61654: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61655: LD_ADDR_VAR 0 47
61659: PUSH
61660: LD_INT 2
61662: NEG
61663: PUSH
61664: LD_INT 3
61666: NEG
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 1
61674: NEG
61675: PUSH
61676: LD_INT 3
61678: NEG
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61688: LD_ADDR_VAR 0 48
61692: PUSH
61693: LD_INT 1
61695: PUSH
61696: LD_INT 2
61698: NEG
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 2
61706: PUSH
61707: LD_INT 1
61709: NEG
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61719: LD_ADDR_VAR 0 49
61723: PUSH
61724: LD_INT 3
61726: PUSH
61727: LD_INT 1
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 3
61736: PUSH
61737: LD_INT 2
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61748: LD_ADDR_VAR 0 50
61752: PUSH
61753: LD_INT 2
61755: PUSH
61756: LD_INT 3
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 1
61765: PUSH
61766: LD_INT 3
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61777: LD_ADDR_VAR 0 51
61781: PUSH
61782: LD_INT 1
61784: NEG
61785: PUSH
61786: LD_INT 2
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 2
61795: NEG
61796: PUSH
61797: LD_INT 1
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61808: LD_ADDR_VAR 0 52
61812: PUSH
61813: LD_INT 3
61815: NEG
61816: PUSH
61817: LD_INT 1
61819: NEG
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 3
61827: NEG
61828: PUSH
61829: LD_INT 2
61831: NEG
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61841: LD_ADDR_VAR 0 53
61845: PUSH
61846: LD_INT 1
61848: NEG
61849: PUSH
61850: LD_INT 3
61852: NEG
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 0
61860: PUSH
61861: LD_INT 3
61863: NEG
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 1
61871: PUSH
61872: LD_INT 2
61874: NEG
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: LIST
61884: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61885: LD_ADDR_VAR 0 54
61889: PUSH
61890: LD_INT 2
61892: PUSH
61893: LD_INT 1
61895: NEG
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 3
61903: PUSH
61904: LD_INT 0
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 3
61913: PUSH
61914: LD_INT 1
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: LIST
61925: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61926: LD_ADDR_VAR 0 55
61930: PUSH
61931: LD_INT 3
61933: PUSH
61934: LD_INT 2
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 3
61943: PUSH
61944: LD_INT 3
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 2
61953: PUSH
61954: LD_INT 3
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: LIST
61965: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61966: LD_ADDR_VAR 0 56
61970: PUSH
61971: LD_INT 1
61973: PUSH
61974: LD_INT 3
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 0
61983: PUSH
61984: LD_INT 3
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 1
61993: NEG
61994: PUSH
61995: LD_INT 2
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: LIST
62006: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62007: LD_ADDR_VAR 0 57
62011: PUSH
62012: LD_INT 2
62014: NEG
62015: PUSH
62016: LD_INT 1
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 3
62025: NEG
62026: PUSH
62027: LD_INT 0
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 3
62036: NEG
62037: PUSH
62038: LD_INT 1
62040: NEG
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: LIST
62050: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62051: LD_ADDR_VAR 0 58
62055: PUSH
62056: LD_INT 2
62058: NEG
62059: PUSH
62060: LD_INT 3
62062: NEG
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 3
62070: NEG
62071: PUSH
62072: LD_INT 2
62074: NEG
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 3
62082: NEG
62083: PUSH
62084: LD_INT 3
62086: NEG
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: LIST
62096: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62097: LD_ADDR_VAR 0 59
62101: PUSH
62102: LD_INT 1
62104: NEG
62105: PUSH
62106: LD_INT 2
62108: NEG
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 0
62116: PUSH
62117: LD_INT 2
62119: NEG
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 1
62127: PUSH
62128: LD_INT 1
62130: NEG
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: LIST
62140: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62141: LD_ADDR_VAR 0 60
62145: PUSH
62146: LD_INT 1
62148: PUSH
62149: LD_INT 1
62151: NEG
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 2
62159: PUSH
62160: LD_INT 0
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 2
62169: PUSH
62170: LD_INT 1
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: LIST
62181: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62182: LD_ADDR_VAR 0 61
62186: PUSH
62187: LD_INT 2
62189: PUSH
62190: LD_INT 1
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 2
62199: PUSH
62200: LD_INT 2
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 1
62209: PUSH
62210: LD_INT 2
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: LIST
62221: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62222: LD_ADDR_VAR 0 62
62226: PUSH
62227: LD_INT 1
62229: PUSH
62230: LD_INT 2
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 0
62239: PUSH
62240: LD_INT 2
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 1
62249: NEG
62250: PUSH
62251: LD_INT 1
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: LIST
62262: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62263: LD_ADDR_VAR 0 63
62267: PUSH
62268: LD_INT 1
62270: NEG
62271: PUSH
62272: LD_INT 1
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 2
62281: NEG
62282: PUSH
62283: LD_INT 0
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 2
62292: NEG
62293: PUSH
62294: LD_INT 1
62296: NEG
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: LIST
62306: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62307: LD_ADDR_VAR 0 64
62311: PUSH
62312: LD_INT 1
62314: NEG
62315: PUSH
62316: LD_INT 2
62318: NEG
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 2
62326: NEG
62327: PUSH
62328: LD_INT 1
62330: NEG
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 2
62338: NEG
62339: PUSH
62340: LD_INT 2
62342: NEG
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: LIST
62352: ST_TO_ADDR
// end ; 2 :
62353: GO 65619
62355: LD_INT 2
62357: DOUBLE
62358: EQUAL
62359: IFTRUE 62363
62361: GO 65618
62363: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62364: LD_ADDR_VAR 0 29
62368: PUSH
62369: LD_INT 4
62371: PUSH
62372: LD_INT 0
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 4
62381: PUSH
62382: LD_INT 1
62384: NEG
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 5
62392: PUSH
62393: LD_INT 0
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 5
62402: PUSH
62403: LD_INT 1
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 4
62412: PUSH
62413: LD_INT 1
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 3
62422: PUSH
62423: LD_INT 0
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 3
62432: PUSH
62433: LD_INT 1
62435: NEG
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 3
62443: PUSH
62444: LD_INT 2
62446: NEG
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 5
62454: PUSH
62455: LD_INT 2
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 3
62464: PUSH
62465: LD_INT 3
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 3
62474: PUSH
62475: LD_INT 2
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 4
62484: PUSH
62485: LD_INT 3
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 4
62494: PUSH
62495: LD_INT 4
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 3
62504: PUSH
62505: LD_INT 4
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 2
62514: PUSH
62515: LD_INT 3
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 2
62524: PUSH
62525: LD_INT 2
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 4
62534: PUSH
62535: LD_INT 2
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 2
62544: PUSH
62545: LD_INT 4
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 0
62554: PUSH
62555: LD_INT 4
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 0
62564: PUSH
62565: LD_INT 3
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 1
62574: PUSH
62575: LD_INT 4
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 1
62584: PUSH
62585: LD_INT 5
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 0
62594: PUSH
62595: LD_INT 5
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 1
62604: NEG
62605: PUSH
62606: LD_INT 4
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 1
62615: NEG
62616: PUSH
62617: LD_INT 3
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 2
62626: PUSH
62627: LD_INT 5
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 2
62636: NEG
62637: PUSH
62638: LD_INT 3
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 3
62647: NEG
62648: PUSH
62649: LD_INT 0
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 3
62658: NEG
62659: PUSH
62660: LD_INT 1
62662: NEG
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 2
62670: NEG
62671: PUSH
62672: LD_INT 0
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 2
62681: NEG
62682: PUSH
62683: LD_INT 1
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 3
62692: NEG
62693: PUSH
62694: LD_INT 1
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 4
62703: NEG
62704: PUSH
62705: LD_INT 0
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: LD_INT 4
62714: NEG
62715: PUSH
62716: LD_INT 1
62718: NEG
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 4
62726: NEG
62727: PUSH
62728: LD_INT 2
62730: NEG
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 2
62738: NEG
62739: PUSH
62740: LD_INT 2
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 4
62749: NEG
62750: PUSH
62751: LD_INT 4
62753: NEG
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 4
62761: NEG
62762: PUSH
62763: LD_INT 5
62765: NEG
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 3
62773: NEG
62774: PUSH
62775: LD_INT 4
62777: NEG
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 3
62785: NEG
62786: PUSH
62787: LD_INT 3
62789: NEG
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 4
62797: NEG
62798: PUSH
62799: LD_INT 3
62801: NEG
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 5
62809: NEG
62810: PUSH
62811: LD_INT 4
62813: NEG
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 5
62821: NEG
62822: PUSH
62823: LD_INT 5
62825: NEG
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 3
62833: NEG
62834: PUSH
62835: LD_INT 5
62837: NEG
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 5
62845: NEG
62846: PUSH
62847: LD_INT 3
62849: NEG
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
62902: LD_ADDR_VAR 0 30
62906: PUSH
62907: LD_INT 4
62909: PUSH
62910: LD_INT 4
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 4
62919: PUSH
62920: LD_INT 3
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 5
62929: PUSH
62930: LD_INT 4
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 5
62939: PUSH
62940: LD_INT 5
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 4
62949: PUSH
62950: LD_INT 5
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 3
62959: PUSH
62960: LD_INT 4
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 3
62969: PUSH
62970: LD_INT 3
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 5
62979: PUSH
62980: LD_INT 3
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 3
62989: PUSH
62990: LD_INT 5
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 0
62999: PUSH
63000: LD_INT 3
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 0
63009: PUSH
63010: LD_INT 2
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 1
63019: PUSH
63020: LD_INT 3
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 1
63029: PUSH
63030: LD_INT 4
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 0
63039: PUSH
63040: LD_INT 4
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 1
63049: NEG
63050: PUSH
63051: LD_INT 3
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 1
63060: NEG
63061: PUSH
63062: LD_INT 2
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 2
63071: PUSH
63072: LD_INT 4
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 2
63081: NEG
63082: PUSH
63083: LD_INT 2
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 4
63092: NEG
63093: PUSH
63094: LD_INT 0
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 4
63103: NEG
63104: PUSH
63105: LD_INT 1
63107: NEG
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 3
63115: NEG
63116: PUSH
63117: LD_INT 0
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 3
63126: NEG
63127: PUSH
63128: LD_INT 1
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 4
63137: NEG
63138: PUSH
63139: LD_INT 1
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 5
63148: NEG
63149: PUSH
63150: LD_INT 0
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 5
63159: NEG
63160: PUSH
63161: LD_INT 1
63163: NEG
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 5
63171: NEG
63172: PUSH
63173: LD_INT 2
63175: NEG
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 3
63183: NEG
63184: PUSH
63185: LD_INT 2
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 3
63194: NEG
63195: PUSH
63196: LD_INT 3
63198: NEG
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 3
63206: NEG
63207: PUSH
63208: LD_INT 4
63210: NEG
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 2
63218: NEG
63219: PUSH
63220: LD_INT 3
63222: NEG
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 2
63230: NEG
63231: PUSH
63232: LD_INT 2
63234: NEG
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 3
63242: NEG
63243: PUSH
63244: LD_INT 2
63246: NEG
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 4
63254: NEG
63255: PUSH
63256: LD_INT 3
63258: NEG
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 4
63266: NEG
63267: PUSH
63268: LD_INT 4
63270: NEG
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 2
63278: NEG
63279: PUSH
63280: LD_INT 4
63282: NEG
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 4
63290: NEG
63291: PUSH
63292: LD_INT 2
63294: NEG
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 0
63302: PUSH
63303: LD_INT 4
63305: NEG
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 0
63313: PUSH
63314: LD_INT 5
63316: NEG
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 1
63324: PUSH
63325: LD_INT 4
63327: NEG
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 1
63335: PUSH
63336: LD_INT 3
63338: NEG
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 0
63346: PUSH
63347: LD_INT 3
63349: NEG
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 1
63357: NEG
63358: PUSH
63359: LD_INT 4
63361: NEG
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 1
63369: NEG
63370: PUSH
63371: LD_INT 5
63373: NEG
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 2
63381: PUSH
63382: LD_INT 3
63384: NEG
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 2
63392: NEG
63393: PUSH
63394: LD_INT 5
63396: NEG
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63449: LD_ADDR_VAR 0 31
63453: PUSH
63454: LD_INT 0
63456: PUSH
63457: LD_INT 4
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 0
63466: PUSH
63467: LD_INT 3
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 1
63476: PUSH
63477: LD_INT 4
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 1
63486: PUSH
63487: LD_INT 5
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 0
63496: PUSH
63497: LD_INT 5
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 1
63506: NEG
63507: PUSH
63508: LD_INT 4
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 1
63517: NEG
63518: PUSH
63519: LD_INT 3
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 2
63528: PUSH
63529: LD_INT 5
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 2
63538: NEG
63539: PUSH
63540: LD_INT 3
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 3
63549: NEG
63550: PUSH
63551: LD_INT 0
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 3
63560: NEG
63561: PUSH
63562: LD_INT 1
63564: NEG
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 2
63572: NEG
63573: PUSH
63574: LD_INT 0
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 2
63583: NEG
63584: PUSH
63585: LD_INT 1
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 3
63594: NEG
63595: PUSH
63596: LD_INT 1
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 4
63605: NEG
63606: PUSH
63607: LD_INT 0
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 4
63616: NEG
63617: PUSH
63618: LD_INT 1
63620: NEG
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 4
63628: NEG
63629: PUSH
63630: LD_INT 2
63632: NEG
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 2
63640: NEG
63641: PUSH
63642: LD_INT 2
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: LD_INT 4
63651: NEG
63652: PUSH
63653: LD_INT 4
63655: NEG
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 4
63663: NEG
63664: PUSH
63665: LD_INT 5
63667: NEG
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 3
63675: NEG
63676: PUSH
63677: LD_INT 4
63679: NEG
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 3
63687: NEG
63688: PUSH
63689: LD_INT 3
63691: NEG
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 4
63699: NEG
63700: PUSH
63701: LD_INT 3
63703: NEG
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 5
63711: NEG
63712: PUSH
63713: LD_INT 4
63715: NEG
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 5
63723: NEG
63724: PUSH
63725: LD_INT 5
63727: NEG
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 3
63735: NEG
63736: PUSH
63737: LD_INT 5
63739: NEG
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 5
63747: NEG
63748: PUSH
63749: LD_INT 3
63751: NEG
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 0
63759: PUSH
63760: LD_INT 3
63762: NEG
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 0
63770: PUSH
63771: LD_INT 4
63773: NEG
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 1
63781: PUSH
63782: LD_INT 3
63784: NEG
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: LD_INT 1
63792: PUSH
63793: LD_INT 2
63795: NEG
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 0
63803: PUSH
63804: LD_INT 2
63806: NEG
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 1
63814: NEG
63815: PUSH
63816: LD_INT 3
63818: NEG
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 1
63826: NEG
63827: PUSH
63828: LD_INT 4
63830: NEG
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 2
63838: PUSH
63839: LD_INT 2
63841: NEG
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 2
63849: NEG
63850: PUSH
63851: LD_INT 4
63853: NEG
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 4
63861: PUSH
63862: LD_INT 0
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 4
63871: PUSH
63872: LD_INT 1
63874: NEG
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 5
63882: PUSH
63883: LD_INT 0
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 5
63892: PUSH
63893: LD_INT 1
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 4
63902: PUSH
63903: LD_INT 1
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 3
63912: PUSH
63913: LD_INT 0
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 3
63922: PUSH
63923: LD_INT 1
63925: NEG
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 3
63933: PUSH
63934: LD_INT 2
63936: NEG
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 5
63944: PUSH
63945: LD_INT 2
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
63999: LD_ADDR_VAR 0 32
64003: PUSH
64004: LD_INT 4
64006: NEG
64007: PUSH
64008: LD_INT 0
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 4
64017: NEG
64018: PUSH
64019: LD_INT 1
64021: NEG
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 3
64029: NEG
64030: PUSH
64031: LD_INT 0
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 3
64040: NEG
64041: PUSH
64042: LD_INT 1
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 4
64051: NEG
64052: PUSH
64053: LD_INT 1
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 5
64062: NEG
64063: PUSH
64064: LD_INT 0
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 5
64073: NEG
64074: PUSH
64075: LD_INT 1
64077: NEG
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 5
64085: NEG
64086: PUSH
64087: LD_INT 2
64089: NEG
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 3
64097: NEG
64098: PUSH
64099: LD_INT 2
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 3
64108: NEG
64109: PUSH
64110: LD_INT 3
64112: NEG
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 3
64120: NEG
64121: PUSH
64122: LD_INT 4
64124: NEG
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 2
64132: NEG
64133: PUSH
64134: LD_INT 3
64136: NEG
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 2
64144: NEG
64145: PUSH
64146: LD_INT 2
64148: NEG
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: LD_INT 3
64156: NEG
64157: PUSH
64158: LD_INT 2
64160: NEG
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 4
64168: NEG
64169: PUSH
64170: LD_INT 3
64172: NEG
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 4
64180: NEG
64181: PUSH
64182: LD_INT 4
64184: NEG
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 2
64192: NEG
64193: PUSH
64194: LD_INT 4
64196: NEG
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 4
64204: NEG
64205: PUSH
64206: LD_INT 2
64208: NEG
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 0
64216: PUSH
64217: LD_INT 4
64219: NEG
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 0
64227: PUSH
64228: LD_INT 5
64230: NEG
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 1
64238: PUSH
64239: LD_INT 4
64241: NEG
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 1
64249: PUSH
64250: LD_INT 3
64252: NEG
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 0
64260: PUSH
64261: LD_INT 3
64263: NEG
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 1
64271: NEG
64272: PUSH
64273: LD_INT 4
64275: NEG
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 1
64283: NEG
64284: PUSH
64285: LD_INT 5
64287: NEG
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 2
64295: PUSH
64296: LD_INT 3
64298: NEG
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 2
64306: NEG
64307: PUSH
64308: LD_INT 5
64310: NEG
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 3
64318: PUSH
64319: LD_INT 0
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 3
64328: PUSH
64329: LD_INT 1
64331: NEG
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 4
64339: PUSH
64340: LD_INT 0
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 4
64349: PUSH
64350: LD_INT 1
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: LD_INT 3
64359: PUSH
64360: LD_INT 1
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 2
64369: PUSH
64370: LD_INT 0
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 2
64379: PUSH
64380: LD_INT 1
64382: NEG
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 2
64390: PUSH
64391: LD_INT 2
64393: NEG
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 4
64401: PUSH
64402: LD_INT 2
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 4
64411: PUSH
64412: LD_INT 4
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 4
64421: PUSH
64422: LD_INT 3
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: LD_INT 5
64431: PUSH
64432: LD_INT 4
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 5
64441: PUSH
64442: LD_INT 5
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 4
64451: PUSH
64452: LD_INT 5
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 3
64461: PUSH
64462: LD_INT 4
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: LD_INT 3
64471: PUSH
64472: LD_INT 3
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 5
64481: PUSH
64482: LD_INT 3
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 3
64491: PUSH
64492: LD_INT 5
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64546: LD_ADDR_VAR 0 33
64550: PUSH
64551: LD_INT 4
64553: NEG
64554: PUSH
64555: LD_INT 4
64557: NEG
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 4
64565: NEG
64566: PUSH
64567: LD_INT 5
64569: NEG
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 3
64577: NEG
64578: PUSH
64579: LD_INT 4
64581: NEG
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 3
64589: NEG
64590: PUSH
64591: LD_INT 3
64593: NEG
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 4
64601: NEG
64602: PUSH
64603: LD_INT 3
64605: NEG
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: PUSH
64611: LD_INT 5
64613: NEG
64614: PUSH
64615: LD_INT 4
64617: NEG
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 5
64625: NEG
64626: PUSH
64627: LD_INT 5
64629: NEG
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 3
64637: NEG
64638: PUSH
64639: LD_INT 5
64641: NEG
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 5
64649: NEG
64650: PUSH
64651: LD_INT 3
64653: NEG
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 0
64661: PUSH
64662: LD_INT 3
64664: NEG
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 0
64672: PUSH
64673: LD_INT 4
64675: NEG
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 1
64683: PUSH
64684: LD_INT 3
64686: NEG
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: LD_INT 1
64694: PUSH
64695: LD_INT 2
64697: NEG
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 0
64705: PUSH
64706: LD_INT 2
64708: NEG
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: LD_INT 1
64716: NEG
64717: PUSH
64718: LD_INT 3
64720: NEG
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: LD_INT 1
64728: NEG
64729: PUSH
64730: LD_INT 4
64732: NEG
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 2
64740: PUSH
64741: LD_INT 2
64743: NEG
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 2
64751: NEG
64752: PUSH
64753: LD_INT 4
64755: NEG
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 4
64763: PUSH
64764: LD_INT 0
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 4
64773: PUSH
64774: LD_INT 1
64776: NEG
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 5
64784: PUSH
64785: LD_INT 0
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 5
64794: PUSH
64795: LD_INT 1
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 4
64804: PUSH
64805: LD_INT 1
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 3
64814: PUSH
64815: LD_INT 0
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: LD_INT 3
64824: PUSH
64825: LD_INT 1
64827: NEG
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 3
64835: PUSH
64836: LD_INT 2
64838: NEG
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 5
64846: PUSH
64847: LD_INT 2
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 3
64856: PUSH
64857: LD_INT 3
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 3
64866: PUSH
64867: LD_INT 2
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 4
64876: PUSH
64877: LD_INT 3
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 4
64886: PUSH
64887: LD_INT 4
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 3
64896: PUSH
64897: LD_INT 4
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 2
64906: PUSH
64907: LD_INT 3
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: LD_INT 2
64916: PUSH
64917: LD_INT 2
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: PUSH
64924: LD_INT 4
64926: PUSH
64927: LD_INT 2
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: LD_INT 2
64936: PUSH
64937: LD_INT 4
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PUSH
64944: LD_INT 0
64946: PUSH
64947: LD_INT 4
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: LD_INT 0
64956: PUSH
64957: LD_INT 3
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: PUSH
64964: LD_INT 1
64966: PUSH
64967: LD_INT 4
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 1
64976: PUSH
64977: LD_INT 5
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 0
64986: PUSH
64987: LD_INT 5
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 1
64996: NEG
64997: PUSH
64998: LD_INT 4
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 1
65007: NEG
65008: PUSH
65009: LD_INT 3
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: LD_INT 2
65018: PUSH
65019: LD_INT 5
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: LD_INT 2
65028: NEG
65029: PUSH
65030: LD_INT 3
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65084: LD_ADDR_VAR 0 34
65088: PUSH
65089: LD_INT 0
65091: PUSH
65092: LD_INT 4
65094: NEG
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 0
65102: PUSH
65103: LD_INT 5
65105: NEG
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 1
65113: PUSH
65114: LD_INT 4
65116: NEG
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 1
65124: PUSH
65125: LD_INT 3
65127: NEG
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 0
65135: PUSH
65136: LD_INT 3
65138: NEG
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 1
65146: NEG
65147: PUSH
65148: LD_INT 4
65150: NEG
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 1
65158: NEG
65159: PUSH
65160: LD_INT 5
65162: NEG
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 2
65170: PUSH
65171: LD_INT 3
65173: NEG
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 2
65181: NEG
65182: PUSH
65183: LD_INT 5
65185: NEG
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 3
65193: PUSH
65194: LD_INT 0
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 3
65203: PUSH
65204: LD_INT 1
65206: NEG
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 4
65214: PUSH
65215: LD_INT 0
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 4
65224: PUSH
65225: LD_INT 1
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 3
65234: PUSH
65235: LD_INT 1
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: LD_INT 2
65244: PUSH
65245: LD_INT 0
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: LD_INT 2
65254: PUSH
65255: LD_INT 1
65257: NEG
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 2
65265: PUSH
65266: LD_INT 2
65268: NEG
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 4
65276: PUSH
65277: LD_INT 2
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 4
65286: PUSH
65287: LD_INT 4
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 4
65296: PUSH
65297: LD_INT 3
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 5
65306: PUSH
65307: LD_INT 4
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 5
65316: PUSH
65317: LD_INT 5
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 4
65326: PUSH
65327: LD_INT 5
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 3
65336: PUSH
65337: LD_INT 4
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 3
65346: PUSH
65347: LD_INT 3
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 5
65356: PUSH
65357: LD_INT 3
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 3
65366: PUSH
65367: LD_INT 5
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 0
65376: PUSH
65377: LD_INT 3
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: LD_INT 0
65386: PUSH
65387: LD_INT 2
65389: PUSH
65390: EMPTY
65391: LIST
65392: LIST
65393: PUSH
65394: LD_INT 1
65396: PUSH
65397: LD_INT 3
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PUSH
65404: LD_INT 1
65406: PUSH
65407: LD_INT 4
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 0
65416: PUSH
65417: LD_INT 4
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 1
65426: NEG
65427: PUSH
65428: LD_INT 3
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 1
65437: NEG
65438: PUSH
65439: LD_INT 2
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 2
65448: PUSH
65449: LD_INT 4
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 2
65458: NEG
65459: PUSH
65460: LD_INT 2
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 4
65469: NEG
65470: PUSH
65471: LD_INT 0
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 4
65480: NEG
65481: PUSH
65482: LD_INT 1
65484: NEG
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 3
65492: NEG
65493: PUSH
65494: LD_INT 0
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 3
65503: NEG
65504: PUSH
65505: LD_INT 1
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: PUSH
65512: LD_INT 4
65514: NEG
65515: PUSH
65516: LD_INT 1
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: LD_INT 5
65525: NEG
65526: PUSH
65527: LD_INT 0
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 5
65536: NEG
65537: PUSH
65538: LD_INT 1
65540: NEG
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: LD_INT 5
65548: NEG
65549: PUSH
65550: LD_INT 2
65552: NEG
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 3
65560: NEG
65561: PUSH
65562: LD_INT 2
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: ST_TO_ADDR
// end ; end ;
65616: GO 65619
65618: POP
// case btype of b_depot , b_warehouse :
65619: LD_VAR 0 1
65623: PUSH
65624: LD_INT 0
65626: DOUBLE
65627: EQUAL
65628: IFTRUE 65638
65630: LD_INT 1
65632: DOUBLE
65633: EQUAL
65634: IFTRUE 65638
65636: GO 65839
65638: POP
// case nation of nation_american :
65639: LD_VAR 0 5
65643: PUSH
65644: LD_INT 1
65646: DOUBLE
65647: EQUAL
65648: IFTRUE 65652
65650: GO 65708
65652: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65653: LD_ADDR_VAR 0 9
65657: PUSH
65658: LD_VAR 0 11
65662: PUSH
65663: LD_VAR 0 12
65667: PUSH
65668: LD_VAR 0 13
65672: PUSH
65673: LD_VAR 0 14
65677: PUSH
65678: LD_VAR 0 15
65682: PUSH
65683: LD_VAR 0 16
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: PUSH
65696: LD_VAR 0 4
65700: PUSH
65701: LD_INT 1
65703: PLUS
65704: ARRAY
65705: ST_TO_ADDR
65706: GO 65837
65708: LD_INT 2
65710: DOUBLE
65711: EQUAL
65712: IFTRUE 65716
65714: GO 65772
65716: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65717: LD_ADDR_VAR 0 9
65721: PUSH
65722: LD_VAR 0 17
65726: PUSH
65727: LD_VAR 0 18
65731: PUSH
65732: LD_VAR 0 19
65736: PUSH
65737: LD_VAR 0 20
65741: PUSH
65742: LD_VAR 0 21
65746: PUSH
65747: LD_VAR 0 22
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: PUSH
65760: LD_VAR 0 4
65764: PUSH
65765: LD_INT 1
65767: PLUS
65768: ARRAY
65769: ST_TO_ADDR
65770: GO 65837
65772: LD_INT 3
65774: DOUBLE
65775: EQUAL
65776: IFTRUE 65780
65778: GO 65836
65780: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65781: LD_ADDR_VAR 0 9
65785: PUSH
65786: LD_VAR 0 23
65790: PUSH
65791: LD_VAR 0 24
65795: PUSH
65796: LD_VAR 0 25
65800: PUSH
65801: LD_VAR 0 26
65805: PUSH
65806: LD_VAR 0 27
65810: PUSH
65811: LD_VAR 0 28
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: PUSH
65824: LD_VAR 0 4
65828: PUSH
65829: LD_INT 1
65831: PLUS
65832: ARRAY
65833: ST_TO_ADDR
65834: GO 65837
65836: POP
65837: GO 66392
65839: LD_INT 2
65841: DOUBLE
65842: EQUAL
65843: IFTRUE 65853
65845: LD_INT 3
65847: DOUBLE
65848: EQUAL
65849: IFTRUE 65853
65851: GO 65909
65853: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
65854: LD_ADDR_VAR 0 9
65858: PUSH
65859: LD_VAR 0 29
65863: PUSH
65864: LD_VAR 0 30
65868: PUSH
65869: LD_VAR 0 31
65873: PUSH
65874: LD_VAR 0 32
65878: PUSH
65879: LD_VAR 0 33
65883: PUSH
65884: LD_VAR 0 34
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: PUSH
65897: LD_VAR 0 4
65901: PUSH
65902: LD_INT 1
65904: PLUS
65905: ARRAY
65906: ST_TO_ADDR
65907: GO 66392
65909: LD_INT 16
65911: DOUBLE
65912: EQUAL
65913: IFTRUE 65971
65915: LD_INT 17
65917: DOUBLE
65918: EQUAL
65919: IFTRUE 65971
65921: LD_INT 18
65923: DOUBLE
65924: EQUAL
65925: IFTRUE 65971
65927: LD_INT 19
65929: DOUBLE
65930: EQUAL
65931: IFTRUE 65971
65933: LD_INT 22
65935: DOUBLE
65936: EQUAL
65937: IFTRUE 65971
65939: LD_INT 20
65941: DOUBLE
65942: EQUAL
65943: IFTRUE 65971
65945: LD_INT 21
65947: DOUBLE
65948: EQUAL
65949: IFTRUE 65971
65951: LD_INT 23
65953: DOUBLE
65954: EQUAL
65955: IFTRUE 65971
65957: LD_INT 24
65959: DOUBLE
65960: EQUAL
65961: IFTRUE 65971
65963: LD_INT 25
65965: DOUBLE
65966: EQUAL
65967: IFTRUE 65971
65969: GO 66027
65971: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
65972: LD_ADDR_VAR 0 9
65976: PUSH
65977: LD_VAR 0 35
65981: PUSH
65982: LD_VAR 0 36
65986: PUSH
65987: LD_VAR 0 37
65991: PUSH
65992: LD_VAR 0 38
65996: PUSH
65997: LD_VAR 0 39
66001: PUSH
66002: LD_VAR 0 40
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: PUSH
66015: LD_VAR 0 4
66019: PUSH
66020: LD_INT 1
66022: PLUS
66023: ARRAY
66024: ST_TO_ADDR
66025: GO 66392
66027: LD_INT 6
66029: DOUBLE
66030: EQUAL
66031: IFTRUE 66083
66033: LD_INT 7
66035: DOUBLE
66036: EQUAL
66037: IFTRUE 66083
66039: LD_INT 8
66041: DOUBLE
66042: EQUAL
66043: IFTRUE 66083
66045: LD_INT 13
66047: DOUBLE
66048: EQUAL
66049: IFTRUE 66083
66051: LD_INT 12
66053: DOUBLE
66054: EQUAL
66055: IFTRUE 66083
66057: LD_INT 15
66059: DOUBLE
66060: EQUAL
66061: IFTRUE 66083
66063: LD_INT 11
66065: DOUBLE
66066: EQUAL
66067: IFTRUE 66083
66069: LD_INT 14
66071: DOUBLE
66072: EQUAL
66073: IFTRUE 66083
66075: LD_INT 10
66077: DOUBLE
66078: EQUAL
66079: IFTRUE 66083
66081: GO 66139
66083: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66084: LD_ADDR_VAR 0 9
66088: PUSH
66089: LD_VAR 0 41
66093: PUSH
66094: LD_VAR 0 42
66098: PUSH
66099: LD_VAR 0 43
66103: PUSH
66104: LD_VAR 0 44
66108: PUSH
66109: LD_VAR 0 45
66113: PUSH
66114: LD_VAR 0 46
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: PUSH
66127: LD_VAR 0 4
66131: PUSH
66132: LD_INT 1
66134: PLUS
66135: ARRAY
66136: ST_TO_ADDR
66137: GO 66392
66139: LD_INT 36
66141: DOUBLE
66142: EQUAL
66143: IFTRUE 66147
66145: GO 66203
66147: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66148: LD_ADDR_VAR 0 9
66152: PUSH
66153: LD_VAR 0 47
66157: PUSH
66158: LD_VAR 0 48
66162: PUSH
66163: LD_VAR 0 49
66167: PUSH
66168: LD_VAR 0 50
66172: PUSH
66173: LD_VAR 0 51
66177: PUSH
66178: LD_VAR 0 52
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: PUSH
66191: LD_VAR 0 4
66195: PUSH
66196: LD_INT 1
66198: PLUS
66199: ARRAY
66200: ST_TO_ADDR
66201: GO 66392
66203: LD_INT 4
66205: DOUBLE
66206: EQUAL
66207: IFTRUE 66229
66209: LD_INT 5
66211: DOUBLE
66212: EQUAL
66213: IFTRUE 66229
66215: LD_INT 34
66217: DOUBLE
66218: EQUAL
66219: IFTRUE 66229
66221: LD_INT 37
66223: DOUBLE
66224: EQUAL
66225: IFTRUE 66229
66227: GO 66285
66229: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66230: LD_ADDR_VAR 0 9
66234: PUSH
66235: LD_VAR 0 53
66239: PUSH
66240: LD_VAR 0 54
66244: PUSH
66245: LD_VAR 0 55
66249: PUSH
66250: LD_VAR 0 56
66254: PUSH
66255: LD_VAR 0 57
66259: PUSH
66260: LD_VAR 0 58
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: PUSH
66273: LD_VAR 0 4
66277: PUSH
66278: LD_INT 1
66280: PLUS
66281: ARRAY
66282: ST_TO_ADDR
66283: GO 66392
66285: LD_INT 31
66287: DOUBLE
66288: EQUAL
66289: IFTRUE 66335
66291: LD_INT 32
66293: DOUBLE
66294: EQUAL
66295: IFTRUE 66335
66297: LD_INT 33
66299: DOUBLE
66300: EQUAL
66301: IFTRUE 66335
66303: LD_INT 27
66305: DOUBLE
66306: EQUAL
66307: IFTRUE 66335
66309: LD_INT 26
66311: DOUBLE
66312: EQUAL
66313: IFTRUE 66335
66315: LD_INT 28
66317: DOUBLE
66318: EQUAL
66319: IFTRUE 66335
66321: LD_INT 29
66323: DOUBLE
66324: EQUAL
66325: IFTRUE 66335
66327: LD_INT 30
66329: DOUBLE
66330: EQUAL
66331: IFTRUE 66335
66333: GO 66391
66335: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66336: LD_ADDR_VAR 0 9
66340: PUSH
66341: LD_VAR 0 59
66345: PUSH
66346: LD_VAR 0 60
66350: PUSH
66351: LD_VAR 0 61
66355: PUSH
66356: LD_VAR 0 62
66360: PUSH
66361: LD_VAR 0 63
66365: PUSH
66366: LD_VAR 0 64
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: PUSH
66379: LD_VAR 0 4
66383: PUSH
66384: LD_INT 1
66386: PLUS
66387: ARRAY
66388: ST_TO_ADDR
66389: GO 66392
66391: POP
// temp_list2 = [ ] ;
66392: LD_ADDR_VAR 0 10
66396: PUSH
66397: EMPTY
66398: ST_TO_ADDR
// for i in temp_list do
66399: LD_ADDR_VAR 0 8
66403: PUSH
66404: LD_VAR 0 9
66408: PUSH
66409: FOR_IN
66410: IFFALSE 66462
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66412: LD_ADDR_VAR 0 10
66416: PUSH
66417: LD_VAR 0 10
66421: PUSH
66422: LD_VAR 0 8
66426: PUSH
66427: LD_INT 1
66429: ARRAY
66430: PUSH
66431: LD_VAR 0 2
66435: PLUS
66436: PUSH
66437: LD_VAR 0 8
66441: PUSH
66442: LD_INT 2
66444: ARRAY
66445: PUSH
66446: LD_VAR 0 3
66450: PLUS
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: PUSH
66456: EMPTY
66457: LIST
66458: ADD
66459: ST_TO_ADDR
66460: GO 66409
66462: POP
66463: POP
// result = temp_list2 ;
66464: LD_ADDR_VAR 0 7
66468: PUSH
66469: LD_VAR 0 10
66473: ST_TO_ADDR
// end ;
66474: LD_VAR 0 7
66478: RET
// export function EnemyInRange ( unit , dist ) ; begin
66479: LD_INT 0
66481: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66482: LD_ADDR_VAR 0 3
66486: PUSH
66487: LD_VAR 0 1
66491: PPUSH
66492: CALL_OW 255
66496: PPUSH
66497: LD_VAR 0 1
66501: PPUSH
66502: CALL_OW 250
66506: PPUSH
66507: LD_VAR 0 1
66511: PPUSH
66512: CALL_OW 251
66516: PPUSH
66517: LD_VAR 0 2
66521: PPUSH
66522: CALL 40250 0 4
66526: PUSH
66527: LD_INT 4
66529: ARRAY
66530: ST_TO_ADDR
// end ;
66531: LD_VAR 0 3
66535: RET
// export function PlayerSeeMe ( unit ) ; begin
66536: LD_INT 0
66538: PPUSH
// result := See ( your_side , unit ) ;
66539: LD_ADDR_VAR 0 2
66543: PUSH
66544: LD_OWVAR 2
66548: PPUSH
66549: LD_VAR 0 1
66553: PPUSH
66554: CALL_OW 292
66558: ST_TO_ADDR
// end ;
66559: LD_VAR 0 2
66563: RET
// export function ReverseDir ( unit ) ; begin
66564: LD_INT 0
66566: PPUSH
// if not unit then
66567: LD_VAR 0 1
66571: NOT
66572: IFFALSE 66576
// exit ;
66574: GO 66599
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66576: LD_ADDR_VAR 0 2
66580: PUSH
66581: LD_VAR 0 1
66585: PPUSH
66586: CALL_OW 254
66590: PUSH
66591: LD_INT 3
66593: PLUS
66594: PUSH
66595: LD_INT 6
66597: MOD
66598: ST_TO_ADDR
// end ;
66599: LD_VAR 0 2
66603: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
66604: LD_INT 0
66606: PPUSH
66607: PPUSH
66608: PPUSH
66609: PPUSH
66610: PPUSH
// if not hexes then
66611: LD_VAR 0 2
66615: NOT
66616: IFFALSE 66620
// exit ;
66618: GO 66768
// dist := 9999 ;
66620: LD_ADDR_VAR 0 5
66624: PUSH
66625: LD_INT 9999
66627: ST_TO_ADDR
// for i = 1 to hexes do
66628: LD_ADDR_VAR 0 4
66632: PUSH
66633: DOUBLE
66634: LD_INT 1
66636: DEC
66637: ST_TO_ADDR
66638: LD_VAR 0 2
66642: PUSH
66643: FOR_TO
66644: IFFALSE 66756
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
66646: LD_VAR 0 1
66650: PPUSH
66651: LD_VAR 0 2
66655: PUSH
66656: LD_VAR 0 4
66660: ARRAY
66661: PUSH
66662: LD_INT 1
66664: ARRAY
66665: PPUSH
66666: LD_VAR 0 2
66670: PUSH
66671: LD_VAR 0 4
66675: ARRAY
66676: PUSH
66677: LD_INT 2
66679: ARRAY
66680: PPUSH
66681: CALL_OW 297
66685: PUSH
66686: LD_VAR 0 5
66690: LESS
66691: IFFALSE 66754
// begin hex := hexes [ i ] ;
66693: LD_ADDR_VAR 0 7
66697: PUSH
66698: LD_VAR 0 2
66702: PUSH
66703: LD_VAR 0 4
66707: ARRAY
66708: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66709: LD_ADDR_VAR 0 5
66713: PUSH
66714: LD_VAR 0 1
66718: PPUSH
66719: LD_VAR 0 2
66723: PUSH
66724: LD_VAR 0 4
66728: ARRAY
66729: PUSH
66730: LD_INT 1
66732: ARRAY
66733: PPUSH
66734: LD_VAR 0 2
66738: PUSH
66739: LD_VAR 0 4
66743: ARRAY
66744: PUSH
66745: LD_INT 2
66747: ARRAY
66748: PPUSH
66749: CALL_OW 297
66753: ST_TO_ADDR
// end ; end ;
66754: GO 66643
66756: POP
66757: POP
// result := hex ;
66758: LD_ADDR_VAR 0 3
66762: PUSH
66763: LD_VAR 0 7
66767: ST_TO_ADDR
// end ;
66768: LD_VAR 0 3
66772: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66773: LD_INT 0
66775: PPUSH
66776: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66777: LD_VAR 0 1
66781: NOT
66782: PUSH
66783: LD_VAR 0 1
66787: PUSH
66788: LD_INT 21
66790: PUSH
66791: LD_INT 2
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: LD_INT 23
66800: PUSH
66801: LD_INT 2
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: PPUSH
66812: CALL_OW 69
66816: IN
66817: NOT
66818: OR
66819: IFFALSE 66823
// exit ;
66821: GO 66870
// for i = 1 to 3 do
66823: LD_ADDR_VAR 0 3
66827: PUSH
66828: DOUBLE
66829: LD_INT 1
66831: DEC
66832: ST_TO_ADDR
66833: LD_INT 3
66835: PUSH
66836: FOR_TO
66837: IFFALSE 66868
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
66839: LD_VAR 0 1
66843: PPUSH
66844: CALL_OW 250
66848: PPUSH
66849: LD_VAR 0 1
66853: PPUSH
66854: CALL_OW 251
66858: PPUSH
66859: LD_INT 1
66861: PPUSH
66862: CALL_OW 453
66866: GO 66836
66868: POP
66869: POP
// end ;
66870: LD_VAR 0 2
66874: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
66875: LD_INT 0
66877: PPUSH
66878: PPUSH
66879: PPUSH
66880: PPUSH
66881: PPUSH
66882: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
66883: LD_VAR 0 1
66887: NOT
66888: PUSH
66889: LD_VAR 0 2
66893: NOT
66894: OR
66895: PUSH
66896: LD_VAR 0 1
66900: PPUSH
66901: CALL_OW 314
66905: OR
66906: IFFALSE 66910
// exit ;
66908: GO 67351
// x := GetX ( enemy_unit ) ;
66910: LD_ADDR_VAR 0 7
66914: PUSH
66915: LD_VAR 0 2
66919: PPUSH
66920: CALL_OW 250
66924: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
66925: LD_ADDR_VAR 0 8
66929: PUSH
66930: LD_VAR 0 2
66934: PPUSH
66935: CALL_OW 251
66939: ST_TO_ADDR
// if not x or not y then
66940: LD_VAR 0 7
66944: NOT
66945: PUSH
66946: LD_VAR 0 8
66950: NOT
66951: OR
66952: IFFALSE 66956
// exit ;
66954: GO 67351
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
66956: LD_ADDR_VAR 0 6
66960: PUSH
66961: LD_VAR 0 7
66965: PPUSH
66966: LD_INT 0
66968: PPUSH
66969: LD_INT 4
66971: PPUSH
66972: CALL_OW 272
66976: PUSH
66977: LD_VAR 0 8
66981: PPUSH
66982: LD_INT 0
66984: PPUSH
66985: LD_INT 4
66987: PPUSH
66988: CALL_OW 273
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_VAR 0 7
67001: PPUSH
67002: LD_INT 1
67004: PPUSH
67005: LD_INT 4
67007: PPUSH
67008: CALL_OW 272
67012: PUSH
67013: LD_VAR 0 8
67017: PPUSH
67018: LD_INT 1
67020: PPUSH
67021: LD_INT 4
67023: PPUSH
67024: CALL_OW 273
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: PUSH
67033: LD_VAR 0 7
67037: PPUSH
67038: LD_INT 2
67040: PPUSH
67041: LD_INT 4
67043: PPUSH
67044: CALL_OW 272
67048: PUSH
67049: LD_VAR 0 8
67053: PPUSH
67054: LD_INT 2
67056: PPUSH
67057: LD_INT 4
67059: PPUSH
67060: CALL_OW 273
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: LD_VAR 0 7
67073: PPUSH
67074: LD_INT 3
67076: PPUSH
67077: LD_INT 4
67079: PPUSH
67080: CALL_OW 272
67084: PUSH
67085: LD_VAR 0 8
67089: PPUSH
67090: LD_INT 3
67092: PPUSH
67093: LD_INT 4
67095: PPUSH
67096: CALL_OW 273
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_VAR 0 7
67109: PPUSH
67110: LD_INT 4
67112: PPUSH
67113: LD_INT 4
67115: PPUSH
67116: CALL_OW 272
67120: PUSH
67121: LD_VAR 0 8
67125: PPUSH
67126: LD_INT 4
67128: PPUSH
67129: LD_INT 4
67131: PPUSH
67132: CALL_OW 273
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_VAR 0 7
67145: PPUSH
67146: LD_INT 5
67148: PPUSH
67149: LD_INT 4
67151: PPUSH
67152: CALL_OW 272
67156: PUSH
67157: LD_VAR 0 8
67161: PPUSH
67162: LD_INT 5
67164: PPUSH
67165: LD_INT 4
67167: PPUSH
67168: CALL_OW 273
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: ST_TO_ADDR
// for i = tmp downto 1 do
67185: LD_ADDR_VAR 0 4
67189: PUSH
67190: DOUBLE
67191: LD_VAR 0 6
67195: INC
67196: ST_TO_ADDR
67197: LD_INT 1
67199: PUSH
67200: FOR_DOWNTO
67201: IFFALSE 67302
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67203: LD_VAR 0 6
67207: PUSH
67208: LD_VAR 0 4
67212: ARRAY
67213: PUSH
67214: LD_INT 1
67216: ARRAY
67217: PPUSH
67218: LD_VAR 0 6
67222: PUSH
67223: LD_VAR 0 4
67227: ARRAY
67228: PUSH
67229: LD_INT 2
67231: ARRAY
67232: PPUSH
67233: CALL_OW 488
67237: NOT
67238: PUSH
67239: LD_VAR 0 6
67243: PUSH
67244: LD_VAR 0 4
67248: ARRAY
67249: PUSH
67250: LD_INT 1
67252: ARRAY
67253: PPUSH
67254: LD_VAR 0 6
67258: PUSH
67259: LD_VAR 0 4
67263: ARRAY
67264: PUSH
67265: LD_INT 2
67267: ARRAY
67268: PPUSH
67269: CALL_OW 428
67273: PUSH
67274: LD_INT 0
67276: NONEQUAL
67277: OR
67278: IFFALSE 67300
// tmp := Delete ( tmp , i ) ;
67280: LD_ADDR_VAR 0 6
67284: PUSH
67285: LD_VAR 0 6
67289: PPUSH
67290: LD_VAR 0 4
67294: PPUSH
67295: CALL_OW 3
67299: ST_TO_ADDR
67300: GO 67200
67302: POP
67303: POP
// j := GetClosestHex ( unit , tmp ) ;
67304: LD_ADDR_VAR 0 5
67308: PUSH
67309: LD_VAR 0 1
67313: PPUSH
67314: LD_VAR 0 6
67318: PPUSH
67319: CALL 66604 0 2
67323: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67324: LD_VAR 0 1
67328: PPUSH
67329: LD_VAR 0 5
67333: PUSH
67334: LD_INT 1
67336: ARRAY
67337: PPUSH
67338: LD_VAR 0 5
67342: PUSH
67343: LD_INT 2
67345: ARRAY
67346: PPUSH
67347: CALL_OW 111
// end ;
67351: LD_VAR 0 3
67355: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67356: LD_INT 0
67358: PPUSH
67359: PPUSH
67360: PPUSH
// uc_side = 0 ;
67361: LD_ADDR_OWVAR 20
67365: PUSH
67366: LD_INT 0
67368: ST_TO_ADDR
// uc_nation = 0 ;
67369: LD_ADDR_OWVAR 21
67373: PUSH
67374: LD_INT 0
67376: ST_TO_ADDR
// InitHc_All ( ) ;
67377: CALL_OW 584
// InitVc ;
67381: CALL_OW 20
// if mastodonts then
67385: LD_VAR 0 6
67389: IFFALSE 67456
// for i = 1 to mastodonts do
67391: LD_ADDR_VAR 0 11
67395: PUSH
67396: DOUBLE
67397: LD_INT 1
67399: DEC
67400: ST_TO_ADDR
67401: LD_VAR 0 6
67405: PUSH
67406: FOR_TO
67407: IFFALSE 67454
// begin vc_chassis := 31 ;
67409: LD_ADDR_OWVAR 37
67413: PUSH
67414: LD_INT 31
67416: ST_TO_ADDR
// vc_control := control_rider ;
67417: LD_ADDR_OWVAR 38
67421: PUSH
67422: LD_INT 4
67424: ST_TO_ADDR
// animal := CreateVehicle ;
67425: LD_ADDR_VAR 0 12
67429: PUSH
67430: CALL_OW 45
67434: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67435: LD_VAR 0 12
67439: PPUSH
67440: LD_VAR 0 8
67444: PPUSH
67445: LD_INT 0
67447: PPUSH
67448: CALL 69644 0 3
// end ;
67452: GO 67406
67454: POP
67455: POP
// if horses then
67456: LD_VAR 0 5
67460: IFFALSE 67527
// for i = 1 to horses do
67462: LD_ADDR_VAR 0 11
67466: PUSH
67467: DOUBLE
67468: LD_INT 1
67470: DEC
67471: ST_TO_ADDR
67472: LD_VAR 0 5
67476: PUSH
67477: FOR_TO
67478: IFFALSE 67525
// begin hc_class := 21 ;
67480: LD_ADDR_OWVAR 28
67484: PUSH
67485: LD_INT 21
67487: ST_TO_ADDR
// hc_gallery :=  ;
67488: LD_ADDR_OWVAR 33
67492: PUSH
67493: LD_STRING 
67495: ST_TO_ADDR
// animal := CreateHuman ;
67496: LD_ADDR_VAR 0 12
67500: PUSH
67501: CALL_OW 44
67505: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67506: LD_VAR 0 12
67510: PPUSH
67511: LD_VAR 0 8
67515: PPUSH
67516: LD_INT 0
67518: PPUSH
67519: CALL 69644 0 3
// end ;
67523: GO 67477
67525: POP
67526: POP
// if birds then
67527: LD_VAR 0 1
67531: IFFALSE 67598
// for i = 1 to birds do
67533: LD_ADDR_VAR 0 11
67537: PUSH
67538: DOUBLE
67539: LD_INT 1
67541: DEC
67542: ST_TO_ADDR
67543: LD_VAR 0 1
67547: PUSH
67548: FOR_TO
67549: IFFALSE 67596
// begin hc_class = 18 ;
67551: LD_ADDR_OWVAR 28
67555: PUSH
67556: LD_INT 18
67558: ST_TO_ADDR
// hc_gallery =  ;
67559: LD_ADDR_OWVAR 33
67563: PUSH
67564: LD_STRING 
67566: ST_TO_ADDR
// animal := CreateHuman ;
67567: LD_ADDR_VAR 0 12
67571: PUSH
67572: CALL_OW 44
67576: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67577: LD_VAR 0 12
67581: PPUSH
67582: LD_VAR 0 8
67586: PPUSH
67587: LD_INT 0
67589: PPUSH
67590: CALL 69644 0 3
// end ;
67594: GO 67548
67596: POP
67597: POP
// if tigers then
67598: LD_VAR 0 2
67602: IFFALSE 67686
// for i = 1 to tigers do
67604: LD_ADDR_VAR 0 11
67608: PUSH
67609: DOUBLE
67610: LD_INT 1
67612: DEC
67613: ST_TO_ADDR
67614: LD_VAR 0 2
67618: PUSH
67619: FOR_TO
67620: IFFALSE 67684
// begin hc_class = class_tiger ;
67622: LD_ADDR_OWVAR 28
67626: PUSH
67627: LD_INT 14
67629: ST_TO_ADDR
// hc_gallery =  ;
67630: LD_ADDR_OWVAR 33
67634: PUSH
67635: LD_STRING 
67637: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67638: LD_ADDR_OWVAR 35
67642: PUSH
67643: LD_INT 7
67645: NEG
67646: PPUSH
67647: LD_INT 7
67649: PPUSH
67650: CALL_OW 12
67654: ST_TO_ADDR
// animal := CreateHuman ;
67655: LD_ADDR_VAR 0 12
67659: PUSH
67660: CALL_OW 44
67664: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67665: LD_VAR 0 12
67669: PPUSH
67670: LD_VAR 0 8
67674: PPUSH
67675: LD_INT 0
67677: PPUSH
67678: CALL 69644 0 3
// end ;
67682: GO 67619
67684: POP
67685: POP
// if apemans then
67686: LD_VAR 0 3
67690: IFFALSE 67813
// for i = 1 to apemans do
67692: LD_ADDR_VAR 0 11
67696: PUSH
67697: DOUBLE
67698: LD_INT 1
67700: DEC
67701: ST_TO_ADDR
67702: LD_VAR 0 3
67706: PUSH
67707: FOR_TO
67708: IFFALSE 67811
// begin hc_class = class_apeman ;
67710: LD_ADDR_OWVAR 28
67714: PUSH
67715: LD_INT 12
67717: ST_TO_ADDR
// hc_gallery =  ;
67718: LD_ADDR_OWVAR 33
67722: PUSH
67723: LD_STRING 
67725: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
67726: LD_ADDR_OWVAR 35
67730: PUSH
67731: LD_INT 5
67733: NEG
67734: PPUSH
67735: LD_INT 5
67737: PPUSH
67738: CALL_OW 12
67742: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67743: LD_ADDR_OWVAR 31
67747: PUSH
67748: LD_INT 1
67750: PPUSH
67751: LD_INT 3
67753: PPUSH
67754: CALL_OW 12
67758: PUSH
67759: LD_INT 1
67761: PPUSH
67762: LD_INT 3
67764: PPUSH
67765: CALL_OW 12
67769: PUSH
67770: LD_INT 0
67772: PUSH
67773: LD_INT 0
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: LIST
67780: LIST
67781: ST_TO_ADDR
// animal := CreateHuman ;
67782: LD_ADDR_VAR 0 12
67786: PUSH
67787: CALL_OW 44
67791: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67792: LD_VAR 0 12
67796: PPUSH
67797: LD_VAR 0 8
67801: PPUSH
67802: LD_INT 0
67804: PPUSH
67805: CALL 69644 0 3
// end ;
67809: GO 67707
67811: POP
67812: POP
// if enchidnas then
67813: LD_VAR 0 4
67817: IFFALSE 67884
// for i = 1 to enchidnas do
67819: LD_ADDR_VAR 0 11
67823: PUSH
67824: DOUBLE
67825: LD_INT 1
67827: DEC
67828: ST_TO_ADDR
67829: LD_VAR 0 4
67833: PUSH
67834: FOR_TO
67835: IFFALSE 67882
// begin hc_class = 13 ;
67837: LD_ADDR_OWVAR 28
67841: PUSH
67842: LD_INT 13
67844: ST_TO_ADDR
// hc_gallery =  ;
67845: LD_ADDR_OWVAR 33
67849: PUSH
67850: LD_STRING 
67852: ST_TO_ADDR
// animal := CreateHuman ;
67853: LD_ADDR_VAR 0 12
67857: PUSH
67858: CALL_OW 44
67862: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67863: LD_VAR 0 12
67867: PPUSH
67868: LD_VAR 0 8
67872: PPUSH
67873: LD_INT 0
67875: PPUSH
67876: CALL 69644 0 3
// end ;
67880: GO 67834
67882: POP
67883: POP
// if fishes then
67884: LD_VAR 0 7
67888: IFFALSE 67955
// for i = 1 to fishes do
67890: LD_ADDR_VAR 0 11
67894: PUSH
67895: DOUBLE
67896: LD_INT 1
67898: DEC
67899: ST_TO_ADDR
67900: LD_VAR 0 7
67904: PUSH
67905: FOR_TO
67906: IFFALSE 67953
// begin hc_class = 20 ;
67908: LD_ADDR_OWVAR 28
67912: PUSH
67913: LD_INT 20
67915: ST_TO_ADDR
// hc_gallery =  ;
67916: LD_ADDR_OWVAR 33
67920: PUSH
67921: LD_STRING 
67923: ST_TO_ADDR
// animal := CreateHuman ;
67924: LD_ADDR_VAR 0 12
67928: PUSH
67929: CALL_OW 44
67933: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67934: LD_VAR 0 12
67938: PPUSH
67939: LD_VAR 0 9
67943: PPUSH
67944: LD_INT 0
67946: PPUSH
67947: CALL 69644 0 3
// end ;
67951: GO 67905
67953: POP
67954: POP
// end ;
67955: LD_VAR 0 10
67959: RET
// export function WantHeal ( sci , unit ) ; begin
67960: LD_INT 0
67962: PPUSH
// if GetTaskList ( sci ) > 0 then
67963: LD_VAR 0 1
67967: PPUSH
67968: CALL_OW 437
67972: PUSH
67973: LD_INT 0
67975: GREATER
67976: IFFALSE 68046
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67978: LD_VAR 0 1
67982: PPUSH
67983: CALL_OW 437
67987: PUSH
67988: LD_INT 1
67990: ARRAY
67991: PUSH
67992: LD_INT 1
67994: ARRAY
67995: PUSH
67996: LD_STRING l
67998: EQUAL
67999: PUSH
68000: LD_VAR 0 1
68004: PPUSH
68005: CALL_OW 437
68009: PUSH
68010: LD_INT 1
68012: ARRAY
68013: PUSH
68014: LD_INT 4
68016: ARRAY
68017: PUSH
68018: LD_VAR 0 2
68022: EQUAL
68023: AND
68024: IFFALSE 68036
// result := true else
68026: LD_ADDR_VAR 0 3
68030: PUSH
68031: LD_INT 1
68033: ST_TO_ADDR
68034: GO 68044
// result := false ;
68036: LD_ADDR_VAR 0 3
68040: PUSH
68041: LD_INT 0
68043: ST_TO_ADDR
// end else
68044: GO 68054
// result := false ;
68046: LD_ADDR_VAR 0 3
68050: PUSH
68051: LD_INT 0
68053: ST_TO_ADDR
// end ;
68054: LD_VAR 0 3
68058: RET
// export function HealTarget ( sci ) ; begin
68059: LD_INT 0
68061: PPUSH
// if not sci then
68062: LD_VAR 0 1
68066: NOT
68067: IFFALSE 68071
// exit ;
68069: GO 68136
// result := 0 ;
68071: LD_ADDR_VAR 0 2
68075: PUSH
68076: LD_INT 0
68078: ST_TO_ADDR
// if GetTaskList ( sci ) then
68079: LD_VAR 0 1
68083: PPUSH
68084: CALL_OW 437
68088: IFFALSE 68136
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
68090: LD_VAR 0 1
68094: PPUSH
68095: CALL_OW 437
68099: PUSH
68100: LD_INT 1
68102: ARRAY
68103: PUSH
68104: LD_INT 1
68106: ARRAY
68107: PUSH
68108: LD_STRING l
68110: EQUAL
68111: IFFALSE 68136
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
68113: LD_ADDR_VAR 0 2
68117: PUSH
68118: LD_VAR 0 1
68122: PPUSH
68123: CALL_OW 437
68127: PUSH
68128: LD_INT 1
68130: ARRAY
68131: PUSH
68132: LD_INT 4
68134: ARRAY
68135: ST_TO_ADDR
// end ;
68136: LD_VAR 0 2
68140: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
68141: LD_INT 0
68143: PPUSH
68144: PPUSH
68145: PPUSH
68146: PPUSH
// if not base_units then
68147: LD_VAR 0 1
68151: NOT
68152: IFFALSE 68156
// exit ;
68154: GO 68243
// result := false ;
68156: LD_ADDR_VAR 0 2
68160: PUSH
68161: LD_INT 0
68163: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
68164: LD_ADDR_VAR 0 5
68168: PUSH
68169: LD_VAR 0 1
68173: PPUSH
68174: LD_INT 21
68176: PUSH
68177: LD_INT 3
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: PPUSH
68184: CALL_OW 72
68188: ST_TO_ADDR
// if not tmp then
68189: LD_VAR 0 5
68193: NOT
68194: IFFALSE 68198
// exit ;
68196: GO 68243
// for i in tmp do
68198: LD_ADDR_VAR 0 3
68202: PUSH
68203: LD_VAR 0 5
68207: PUSH
68208: FOR_IN
68209: IFFALSE 68241
// begin result := EnemyInRange ( i , 22 ) ;
68211: LD_ADDR_VAR 0 2
68215: PUSH
68216: LD_VAR 0 3
68220: PPUSH
68221: LD_INT 22
68223: PPUSH
68224: CALL 66479 0 2
68228: ST_TO_ADDR
// if result then
68229: LD_VAR 0 2
68233: IFFALSE 68239
// exit ;
68235: POP
68236: POP
68237: GO 68243
// end ;
68239: GO 68208
68241: POP
68242: POP
// end ;
68243: LD_VAR 0 2
68247: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
68248: LD_INT 0
68250: PPUSH
68251: PPUSH
// if not units then
68252: LD_VAR 0 1
68256: NOT
68257: IFFALSE 68261
// exit ;
68259: GO 68331
// result := [ ] ;
68261: LD_ADDR_VAR 0 3
68265: PUSH
68266: EMPTY
68267: ST_TO_ADDR
// for i in units do
68268: LD_ADDR_VAR 0 4
68272: PUSH
68273: LD_VAR 0 1
68277: PUSH
68278: FOR_IN
68279: IFFALSE 68329
// if GetTag ( i ) = tag then
68281: LD_VAR 0 4
68285: PPUSH
68286: CALL_OW 110
68290: PUSH
68291: LD_VAR 0 2
68295: EQUAL
68296: IFFALSE 68327
// result := Insert ( result , result + 1 , i ) ;
68298: LD_ADDR_VAR 0 3
68302: PUSH
68303: LD_VAR 0 3
68307: PPUSH
68308: LD_VAR 0 3
68312: PUSH
68313: LD_INT 1
68315: PLUS
68316: PPUSH
68317: LD_VAR 0 4
68321: PPUSH
68322: CALL_OW 2
68326: ST_TO_ADDR
68327: GO 68278
68329: POP
68330: POP
// end ;
68331: LD_VAR 0 3
68335: RET
// export function IsDriver ( un ) ; begin
68336: LD_INT 0
68338: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
68339: LD_ADDR_VAR 0 2
68343: PUSH
68344: LD_VAR 0 1
68348: PUSH
68349: LD_INT 55
68351: PUSH
68352: EMPTY
68353: LIST
68354: PPUSH
68355: CALL_OW 69
68359: IN
68360: ST_TO_ADDR
// end ;
68361: LD_VAR 0 2
68365: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
68366: LD_INT 0
68368: PPUSH
68369: PPUSH
// list := [ ] ;
68370: LD_ADDR_VAR 0 5
68374: PUSH
68375: EMPTY
68376: ST_TO_ADDR
// case d of 0 :
68377: LD_VAR 0 3
68381: PUSH
68382: LD_INT 0
68384: DOUBLE
68385: EQUAL
68386: IFTRUE 68390
68388: GO 68523
68390: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
68391: LD_ADDR_VAR 0 5
68395: PUSH
68396: LD_VAR 0 1
68400: PUSH
68401: LD_INT 4
68403: MINUS
68404: PUSH
68405: LD_VAR 0 2
68409: PUSH
68410: LD_INT 4
68412: MINUS
68413: PUSH
68414: LD_INT 2
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: LIST
68421: PUSH
68422: LD_VAR 0 1
68426: PUSH
68427: LD_INT 3
68429: MINUS
68430: PUSH
68431: LD_VAR 0 2
68435: PUSH
68436: LD_INT 1
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: LIST
68443: PUSH
68444: LD_VAR 0 1
68448: PUSH
68449: LD_INT 4
68451: PLUS
68452: PUSH
68453: LD_VAR 0 2
68457: PUSH
68458: LD_INT 4
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: LIST
68465: PUSH
68466: LD_VAR 0 1
68470: PUSH
68471: LD_INT 3
68473: PLUS
68474: PUSH
68475: LD_VAR 0 2
68479: PUSH
68480: LD_INT 3
68482: PLUS
68483: PUSH
68484: LD_INT 5
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: LIST
68491: PUSH
68492: LD_VAR 0 1
68496: PUSH
68497: LD_VAR 0 2
68501: PUSH
68502: LD_INT 4
68504: PLUS
68505: PUSH
68506: LD_INT 0
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: LIST
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: ST_TO_ADDR
// end ; 1 :
68521: GO 69221
68523: LD_INT 1
68525: DOUBLE
68526: EQUAL
68527: IFTRUE 68531
68529: GO 68664
68531: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68532: LD_ADDR_VAR 0 5
68536: PUSH
68537: LD_VAR 0 1
68541: PUSH
68542: LD_VAR 0 2
68546: PUSH
68547: LD_INT 4
68549: MINUS
68550: PUSH
68551: LD_INT 3
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: LIST
68558: PUSH
68559: LD_VAR 0 1
68563: PUSH
68564: LD_INT 3
68566: MINUS
68567: PUSH
68568: LD_VAR 0 2
68572: PUSH
68573: LD_INT 3
68575: MINUS
68576: PUSH
68577: LD_INT 2
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: LIST
68584: PUSH
68585: LD_VAR 0 1
68589: PUSH
68590: LD_INT 4
68592: MINUS
68593: PUSH
68594: LD_VAR 0 2
68598: PUSH
68599: LD_INT 1
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: LIST
68606: PUSH
68607: LD_VAR 0 1
68611: PUSH
68612: LD_VAR 0 2
68616: PUSH
68617: LD_INT 3
68619: PLUS
68620: PUSH
68621: LD_INT 0
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: LIST
68628: PUSH
68629: LD_VAR 0 1
68633: PUSH
68634: LD_INT 4
68636: PLUS
68637: PUSH
68638: LD_VAR 0 2
68642: PUSH
68643: LD_INT 4
68645: PLUS
68646: PUSH
68647: LD_INT 5
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: LIST
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: LIST
68659: LIST
68660: LIST
68661: ST_TO_ADDR
// end ; 2 :
68662: GO 69221
68664: LD_INT 2
68666: DOUBLE
68667: EQUAL
68668: IFTRUE 68672
68670: GO 68801
68672: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68673: LD_ADDR_VAR 0 5
68677: PUSH
68678: LD_VAR 0 1
68682: PUSH
68683: LD_VAR 0 2
68687: PUSH
68688: LD_INT 3
68690: MINUS
68691: PUSH
68692: LD_INT 3
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: LIST
68699: PUSH
68700: LD_VAR 0 1
68704: PUSH
68705: LD_INT 4
68707: PLUS
68708: PUSH
68709: LD_VAR 0 2
68713: PUSH
68714: LD_INT 4
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: LIST
68721: PUSH
68722: LD_VAR 0 1
68726: PUSH
68727: LD_VAR 0 2
68731: PUSH
68732: LD_INT 4
68734: PLUS
68735: PUSH
68736: LD_INT 0
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: LIST
68743: PUSH
68744: LD_VAR 0 1
68748: PUSH
68749: LD_INT 3
68751: MINUS
68752: PUSH
68753: LD_VAR 0 2
68757: PUSH
68758: LD_INT 1
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: LIST
68765: PUSH
68766: LD_VAR 0 1
68770: PUSH
68771: LD_INT 4
68773: MINUS
68774: PUSH
68775: LD_VAR 0 2
68779: PUSH
68780: LD_INT 4
68782: MINUS
68783: PUSH
68784: LD_INT 2
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: LIST
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: LIST
68798: ST_TO_ADDR
// end ; 3 :
68799: GO 69221
68801: LD_INT 3
68803: DOUBLE
68804: EQUAL
68805: IFTRUE 68809
68807: GO 68942
68809: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68810: LD_ADDR_VAR 0 5
68814: PUSH
68815: LD_VAR 0 1
68819: PUSH
68820: LD_INT 3
68822: PLUS
68823: PUSH
68824: LD_VAR 0 2
68828: PUSH
68829: LD_INT 4
68831: PUSH
68832: EMPTY
68833: LIST
68834: LIST
68835: LIST
68836: PUSH
68837: LD_VAR 0 1
68841: PUSH
68842: LD_INT 4
68844: PLUS
68845: PUSH
68846: LD_VAR 0 2
68850: PUSH
68851: LD_INT 4
68853: PLUS
68854: PUSH
68855: LD_INT 5
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: LIST
68862: PUSH
68863: LD_VAR 0 1
68867: PUSH
68868: LD_INT 4
68870: MINUS
68871: PUSH
68872: LD_VAR 0 2
68876: PUSH
68877: LD_INT 1
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: LIST
68884: PUSH
68885: LD_VAR 0 1
68889: PUSH
68890: LD_VAR 0 2
68894: PUSH
68895: LD_INT 4
68897: MINUS
68898: PUSH
68899: LD_INT 3
68901: PUSH
68902: EMPTY
68903: LIST
68904: LIST
68905: LIST
68906: PUSH
68907: LD_VAR 0 1
68911: PUSH
68912: LD_INT 3
68914: MINUS
68915: PUSH
68916: LD_VAR 0 2
68920: PUSH
68921: LD_INT 3
68923: MINUS
68924: PUSH
68925: LD_INT 2
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: LIST
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: LIST
68937: LIST
68938: LIST
68939: ST_TO_ADDR
// end ; 4 :
68940: GO 69221
68942: LD_INT 4
68944: DOUBLE
68945: EQUAL
68946: IFTRUE 68950
68948: GO 69083
68950: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68951: LD_ADDR_VAR 0 5
68955: PUSH
68956: LD_VAR 0 1
68960: PUSH
68961: LD_VAR 0 2
68965: PUSH
68966: LD_INT 4
68968: PLUS
68969: PUSH
68970: LD_INT 0
68972: PUSH
68973: EMPTY
68974: LIST
68975: LIST
68976: LIST
68977: PUSH
68978: LD_VAR 0 1
68982: PUSH
68983: LD_INT 3
68985: PLUS
68986: PUSH
68987: LD_VAR 0 2
68991: PUSH
68992: LD_INT 3
68994: PLUS
68995: PUSH
68996: LD_INT 5
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: LIST
69003: PUSH
69004: LD_VAR 0 1
69008: PUSH
69009: LD_INT 4
69011: PLUS
69012: PUSH
69013: LD_VAR 0 2
69017: PUSH
69018: LD_INT 4
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: LIST
69025: PUSH
69026: LD_VAR 0 1
69030: PUSH
69031: LD_VAR 0 2
69035: PUSH
69036: LD_INT 3
69038: MINUS
69039: PUSH
69040: LD_INT 3
69042: PUSH
69043: EMPTY
69044: LIST
69045: LIST
69046: LIST
69047: PUSH
69048: LD_VAR 0 1
69052: PUSH
69053: LD_INT 4
69055: MINUS
69056: PUSH
69057: LD_VAR 0 2
69061: PUSH
69062: LD_INT 4
69064: MINUS
69065: PUSH
69066: LD_INT 2
69068: PUSH
69069: EMPTY
69070: LIST
69071: LIST
69072: LIST
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: LIST
69078: LIST
69079: LIST
69080: ST_TO_ADDR
// end ; 5 :
69081: GO 69221
69083: LD_INT 5
69085: DOUBLE
69086: EQUAL
69087: IFTRUE 69091
69089: GO 69220
69091: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
69092: LD_ADDR_VAR 0 5
69096: PUSH
69097: LD_VAR 0 1
69101: PUSH
69102: LD_INT 4
69104: MINUS
69105: PUSH
69106: LD_VAR 0 2
69110: PUSH
69111: LD_INT 1
69113: PUSH
69114: EMPTY
69115: LIST
69116: LIST
69117: LIST
69118: PUSH
69119: LD_VAR 0 1
69123: PUSH
69124: LD_VAR 0 2
69128: PUSH
69129: LD_INT 4
69131: MINUS
69132: PUSH
69133: LD_INT 3
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: LIST
69140: PUSH
69141: LD_VAR 0 1
69145: PUSH
69146: LD_INT 4
69148: PLUS
69149: PUSH
69150: LD_VAR 0 2
69154: PUSH
69155: LD_INT 4
69157: PLUS
69158: PUSH
69159: LD_INT 5
69161: PUSH
69162: EMPTY
69163: LIST
69164: LIST
69165: LIST
69166: PUSH
69167: LD_VAR 0 1
69171: PUSH
69172: LD_INT 3
69174: PLUS
69175: PUSH
69176: LD_VAR 0 2
69180: PUSH
69181: LD_INT 4
69183: PUSH
69184: EMPTY
69185: LIST
69186: LIST
69187: LIST
69188: PUSH
69189: LD_VAR 0 1
69193: PUSH
69194: LD_VAR 0 2
69198: PUSH
69199: LD_INT 3
69201: PLUS
69202: PUSH
69203: LD_INT 0
69205: PUSH
69206: EMPTY
69207: LIST
69208: LIST
69209: LIST
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: LIST
69215: LIST
69216: LIST
69217: ST_TO_ADDR
// end ; end ;
69218: GO 69221
69220: POP
// result := list ;
69221: LD_ADDR_VAR 0 4
69225: PUSH
69226: LD_VAR 0 5
69230: ST_TO_ADDR
// end ;
69231: LD_VAR 0 4
69235: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
69236: LD_INT 0
69238: PPUSH
69239: PPUSH
69240: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
69241: LD_VAR 0 1
69245: NOT
69246: PUSH
69247: LD_VAR 0 2
69251: PUSH
69252: LD_INT 1
69254: PUSH
69255: LD_INT 2
69257: PUSH
69258: LD_INT 3
69260: PUSH
69261: LD_INT 4
69263: PUSH
69264: EMPTY
69265: LIST
69266: LIST
69267: LIST
69268: LIST
69269: IN
69270: NOT
69271: OR
69272: IFFALSE 69276
// exit ;
69274: GO 69368
// tmp := [ ] ;
69276: LD_ADDR_VAR 0 5
69280: PUSH
69281: EMPTY
69282: ST_TO_ADDR
// for i in units do
69283: LD_ADDR_VAR 0 4
69287: PUSH
69288: LD_VAR 0 1
69292: PUSH
69293: FOR_IN
69294: IFFALSE 69337
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
69296: LD_ADDR_VAR 0 5
69300: PUSH
69301: LD_VAR 0 5
69305: PPUSH
69306: LD_VAR 0 5
69310: PUSH
69311: LD_INT 1
69313: PLUS
69314: PPUSH
69315: LD_VAR 0 4
69319: PPUSH
69320: LD_VAR 0 2
69324: PPUSH
69325: CALL_OW 259
69329: PPUSH
69330: CALL_OW 2
69334: ST_TO_ADDR
69335: GO 69293
69337: POP
69338: POP
// if not tmp then
69339: LD_VAR 0 5
69343: NOT
69344: IFFALSE 69348
// exit ;
69346: GO 69368
// result := SortListByListDesc ( units , tmp ) ;
69348: LD_ADDR_VAR 0 3
69352: PUSH
69353: LD_VAR 0 1
69357: PPUSH
69358: LD_VAR 0 5
69362: PPUSH
69363: CALL_OW 77
69367: ST_TO_ADDR
// end ;
69368: LD_VAR 0 3
69372: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
69373: LD_INT 0
69375: PPUSH
69376: PPUSH
69377: PPUSH
// result := false ;
69378: LD_ADDR_VAR 0 3
69382: PUSH
69383: LD_INT 0
69385: ST_TO_ADDR
// x := GetX ( building ) ;
69386: LD_ADDR_VAR 0 4
69390: PUSH
69391: LD_VAR 0 2
69395: PPUSH
69396: CALL_OW 250
69400: ST_TO_ADDR
// y := GetY ( building ) ;
69401: LD_ADDR_VAR 0 5
69405: PUSH
69406: LD_VAR 0 2
69410: PPUSH
69411: CALL_OW 251
69415: ST_TO_ADDR
// if not building or not x or not y then
69416: LD_VAR 0 2
69420: NOT
69421: PUSH
69422: LD_VAR 0 4
69426: NOT
69427: OR
69428: PUSH
69429: LD_VAR 0 5
69433: NOT
69434: OR
69435: IFFALSE 69439
// exit ;
69437: GO 69531
// if GetTaskList ( unit ) then
69439: LD_VAR 0 1
69443: PPUSH
69444: CALL_OW 437
69448: IFFALSE 69531
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69450: LD_STRING e
69452: PUSH
69453: LD_VAR 0 1
69457: PPUSH
69458: CALL_OW 437
69462: PUSH
69463: LD_INT 1
69465: ARRAY
69466: PUSH
69467: LD_INT 1
69469: ARRAY
69470: EQUAL
69471: PUSH
69472: LD_VAR 0 4
69476: PUSH
69477: LD_VAR 0 1
69481: PPUSH
69482: CALL_OW 437
69486: PUSH
69487: LD_INT 1
69489: ARRAY
69490: PUSH
69491: LD_INT 2
69493: ARRAY
69494: EQUAL
69495: AND
69496: PUSH
69497: LD_VAR 0 5
69501: PUSH
69502: LD_VAR 0 1
69506: PPUSH
69507: CALL_OW 437
69511: PUSH
69512: LD_INT 1
69514: ARRAY
69515: PUSH
69516: LD_INT 3
69518: ARRAY
69519: EQUAL
69520: AND
69521: IFFALSE 69531
// result := true end ;
69523: LD_ADDR_VAR 0 3
69527: PUSH
69528: LD_INT 1
69530: ST_TO_ADDR
// end ;
69531: LD_VAR 0 3
69535: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69536: LD_INT 0
69538: PPUSH
// result := false ;
69539: LD_ADDR_VAR 0 4
69543: PUSH
69544: LD_INT 0
69546: ST_TO_ADDR
// if GetTaskList ( unit ) then
69547: LD_VAR 0 1
69551: PPUSH
69552: CALL_OW 437
69556: IFFALSE 69639
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69558: LD_STRING M
69560: PUSH
69561: LD_VAR 0 1
69565: PPUSH
69566: CALL_OW 437
69570: PUSH
69571: LD_INT 1
69573: ARRAY
69574: PUSH
69575: LD_INT 1
69577: ARRAY
69578: EQUAL
69579: PUSH
69580: LD_VAR 0 2
69584: PUSH
69585: LD_VAR 0 1
69589: PPUSH
69590: CALL_OW 437
69594: PUSH
69595: LD_INT 1
69597: ARRAY
69598: PUSH
69599: LD_INT 2
69601: ARRAY
69602: EQUAL
69603: AND
69604: PUSH
69605: LD_VAR 0 3
69609: PUSH
69610: LD_VAR 0 1
69614: PPUSH
69615: CALL_OW 437
69619: PUSH
69620: LD_INT 1
69622: ARRAY
69623: PUSH
69624: LD_INT 3
69626: ARRAY
69627: EQUAL
69628: AND
69629: IFFALSE 69639
// result := true ;
69631: LD_ADDR_VAR 0 4
69635: PUSH
69636: LD_INT 1
69638: ST_TO_ADDR
// end ; end ;
69639: LD_VAR 0 4
69643: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69644: LD_INT 0
69646: PPUSH
69647: PPUSH
69648: PPUSH
69649: PPUSH
// if not unit or not area then
69650: LD_VAR 0 1
69654: NOT
69655: PUSH
69656: LD_VAR 0 2
69660: NOT
69661: OR
69662: IFFALSE 69666
// exit ;
69664: GO 69830
// tmp := AreaToList ( area , i ) ;
69666: LD_ADDR_VAR 0 6
69670: PUSH
69671: LD_VAR 0 2
69675: PPUSH
69676: LD_VAR 0 5
69680: PPUSH
69681: CALL_OW 517
69685: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69686: LD_ADDR_VAR 0 5
69690: PUSH
69691: DOUBLE
69692: LD_INT 1
69694: DEC
69695: ST_TO_ADDR
69696: LD_VAR 0 6
69700: PUSH
69701: LD_INT 1
69703: ARRAY
69704: PUSH
69705: FOR_TO
69706: IFFALSE 69828
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69708: LD_ADDR_VAR 0 7
69712: PUSH
69713: LD_VAR 0 6
69717: PUSH
69718: LD_INT 1
69720: ARRAY
69721: PUSH
69722: LD_VAR 0 5
69726: ARRAY
69727: PUSH
69728: LD_VAR 0 6
69732: PUSH
69733: LD_INT 2
69735: ARRAY
69736: PUSH
69737: LD_VAR 0 5
69741: ARRAY
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
69747: LD_VAR 0 7
69751: PUSH
69752: LD_INT 1
69754: ARRAY
69755: PPUSH
69756: LD_VAR 0 7
69760: PUSH
69761: LD_INT 2
69763: ARRAY
69764: PPUSH
69765: CALL_OW 428
69769: PUSH
69770: LD_INT 0
69772: EQUAL
69773: IFFALSE 69826
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69775: LD_VAR 0 1
69779: PPUSH
69780: LD_VAR 0 7
69784: PUSH
69785: LD_INT 1
69787: ARRAY
69788: PPUSH
69789: LD_VAR 0 7
69793: PUSH
69794: LD_INT 2
69796: ARRAY
69797: PPUSH
69798: LD_VAR 0 3
69802: PPUSH
69803: CALL_OW 48
// result := IsPlaced ( unit ) ;
69807: LD_ADDR_VAR 0 4
69811: PUSH
69812: LD_VAR 0 1
69816: PPUSH
69817: CALL_OW 305
69821: ST_TO_ADDR
// exit ;
69822: POP
69823: POP
69824: GO 69830
// end ; end ;
69826: GO 69705
69828: POP
69829: POP
// end ;
69830: LD_VAR 0 4
69834: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69835: LD_INT 0
69837: PPUSH
69838: PPUSH
69839: PPUSH
// if not side or side > 8 then
69840: LD_VAR 0 1
69844: NOT
69845: PUSH
69846: LD_VAR 0 1
69850: PUSH
69851: LD_INT 8
69853: GREATER
69854: OR
69855: IFFALSE 69859
// exit ;
69857: GO 70046
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69859: LD_ADDR_VAR 0 4
69863: PUSH
69864: LD_INT 22
69866: PUSH
69867: LD_VAR 0 1
69871: PUSH
69872: EMPTY
69873: LIST
69874: LIST
69875: PUSH
69876: LD_INT 21
69878: PUSH
69879: LD_INT 3
69881: PUSH
69882: EMPTY
69883: LIST
69884: LIST
69885: PUSH
69886: EMPTY
69887: LIST
69888: LIST
69889: PPUSH
69890: CALL_OW 69
69894: ST_TO_ADDR
// if not tmp then
69895: LD_VAR 0 4
69899: NOT
69900: IFFALSE 69904
// exit ;
69902: GO 70046
// enable_addtolog := true ;
69904: LD_ADDR_OWVAR 81
69908: PUSH
69909: LD_INT 1
69911: ST_TO_ADDR
// AddToLog ( [ ) ;
69912: LD_STRING [
69914: PPUSH
69915: CALL_OW 561
// for i in tmp do
69919: LD_ADDR_VAR 0 3
69923: PUSH
69924: LD_VAR 0 4
69928: PUSH
69929: FOR_IN
69930: IFFALSE 70037
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69932: LD_STRING [
69934: PUSH
69935: LD_VAR 0 3
69939: PPUSH
69940: CALL_OW 266
69944: STR
69945: PUSH
69946: LD_STRING , 
69948: STR
69949: PUSH
69950: LD_VAR 0 3
69954: PPUSH
69955: CALL_OW 250
69959: STR
69960: PUSH
69961: LD_STRING , 
69963: STR
69964: PUSH
69965: LD_VAR 0 3
69969: PPUSH
69970: CALL_OW 251
69974: STR
69975: PUSH
69976: LD_STRING , 
69978: STR
69979: PUSH
69980: LD_VAR 0 3
69984: PPUSH
69985: CALL_OW 254
69989: STR
69990: PUSH
69991: LD_STRING , 
69993: STR
69994: PUSH
69995: LD_VAR 0 3
69999: PPUSH
70000: LD_INT 1
70002: PPUSH
70003: CALL_OW 268
70007: STR
70008: PUSH
70009: LD_STRING , 
70011: STR
70012: PUSH
70013: LD_VAR 0 3
70017: PPUSH
70018: LD_INT 2
70020: PPUSH
70021: CALL_OW 268
70025: STR
70026: PUSH
70027: LD_STRING ],
70029: STR
70030: PPUSH
70031: CALL_OW 561
// end ;
70035: GO 69929
70037: POP
70038: POP
// AddToLog ( ]; ) ;
70039: LD_STRING ];
70041: PPUSH
70042: CALL_OW 561
// end ;
70046: LD_VAR 0 2
70050: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70051: LD_INT 0
70053: PPUSH
70054: PPUSH
70055: PPUSH
70056: PPUSH
70057: PPUSH
// if not area or not rate or not max then
70058: LD_VAR 0 1
70062: NOT
70063: PUSH
70064: LD_VAR 0 2
70068: NOT
70069: OR
70070: PUSH
70071: LD_VAR 0 4
70075: NOT
70076: OR
70077: IFFALSE 70081
// exit ;
70079: GO 70273
// while 1 do
70081: LD_INT 1
70083: IFFALSE 70273
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
70085: LD_ADDR_VAR 0 9
70089: PUSH
70090: LD_VAR 0 1
70094: PPUSH
70095: LD_INT 1
70097: PPUSH
70098: CALL_OW 287
70102: PUSH
70103: LD_INT 10
70105: MUL
70106: ST_TO_ADDR
// r := rate / 10 ;
70107: LD_ADDR_VAR 0 7
70111: PUSH
70112: LD_VAR 0 2
70116: PUSH
70117: LD_INT 10
70119: DIVREAL
70120: ST_TO_ADDR
// time := 1 1$00 ;
70121: LD_ADDR_VAR 0 8
70125: PUSH
70126: LD_INT 2100
70128: ST_TO_ADDR
// if amount < min then
70129: LD_VAR 0 9
70133: PUSH
70134: LD_VAR 0 3
70138: LESS
70139: IFFALSE 70157
// r := r * 2 else
70141: LD_ADDR_VAR 0 7
70145: PUSH
70146: LD_VAR 0 7
70150: PUSH
70151: LD_INT 2
70153: MUL
70154: ST_TO_ADDR
70155: GO 70183
// if amount > max then
70157: LD_VAR 0 9
70161: PUSH
70162: LD_VAR 0 4
70166: GREATER
70167: IFFALSE 70183
// r := r / 2 ;
70169: LD_ADDR_VAR 0 7
70173: PUSH
70174: LD_VAR 0 7
70178: PUSH
70179: LD_INT 2
70181: DIVREAL
70182: ST_TO_ADDR
// time := time / r ;
70183: LD_ADDR_VAR 0 8
70187: PUSH
70188: LD_VAR 0 8
70192: PUSH
70193: LD_VAR 0 7
70197: DIVREAL
70198: ST_TO_ADDR
// if time < 0 then
70199: LD_VAR 0 8
70203: PUSH
70204: LD_INT 0
70206: LESS
70207: IFFALSE 70224
// time := time * - 1 ;
70209: LD_ADDR_VAR 0 8
70213: PUSH
70214: LD_VAR 0 8
70218: PUSH
70219: LD_INT 1
70221: NEG
70222: MUL
70223: ST_TO_ADDR
// wait ( time ) ;
70224: LD_VAR 0 8
70228: PPUSH
70229: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
70233: LD_INT 35
70235: PPUSH
70236: LD_INT 875
70238: PPUSH
70239: CALL_OW 12
70243: PPUSH
70244: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
70248: LD_INT 1
70250: PPUSH
70251: LD_INT 5
70253: PPUSH
70254: CALL_OW 12
70258: PPUSH
70259: LD_VAR 0 1
70263: PPUSH
70264: LD_INT 1
70266: PPUSH
70267: CALL_OW 55
// end ;
70271: GO 70081
// end ;
70273: LD_VAR 0 5
70277: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
70278: LD_INT 0
70280: PPUSH
70281: PPUSH
70282: PPUSH
70283: PPUSH
70284: PPUSH
70285: PPUSH
70286: PPUSH
70287: PPUSH
// if not turrets or not factories then
70288: LD_VAR 0 1
70292: NOT
70293: PUSH
70294: LD_VAR 0 2
70298: NOT
70299: OR
70300: IFFALSE 70304
// exit ;
70302: GO 70611
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
70304: LD_ADDR_VAR 0 10
70308: PUSH
70309: LD_INT 5
70311: PUSH
70312: LD_INT 6
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: PUSH
70319: LD_INT 2
70321: PUSH
70322: LD_INT 4
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: PUSH
70329: LD_INT 3
70331: PUSH
70332: LD_INT 5
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: LIST
70343: PUSH
70344: LD_INT 24
70346: PUSH
70347: LD_INT 25
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: PUSH
70354: LD_INT 23
70356: PUSH
70357: LD_INT 27
70359: PUSH
70360: EMPTY
70361: LIST
70362: LIST
70363: PUSH
70364: EMPTY
70365: LIST
70366: LIST
70367: PUSH
70368: LD_INT 42
70370: PUSH
70371: LD_INT 43
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: PUSH
70378: LD_INT 44
70380: PUSH
70381: LD_INT 46
70383: PUSH
70384: EMPTY
70385: LIST
70386: LIST
70387: PUSH
70388: LD_INT 45
70390: PUSH
70391: LD_INT 47
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: LIST
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: LIST
70407: ST_TO_ADDR
// result := [ ] ;
70408: LD_ADDR_VAR 0 3
70412: PUSH
70413: EMPTY
70414: ST_TO_ADDR
// for i in turrets do
70415: LD_ADDR_VAR 0 4
70419: PUSH
70420: LD_VAR 0 1
70424: PUSH
70425: FOR_IN
70426: IFFALSE 70609
// begin nat := GetNation ( i ) ;
70428: LD_ADDR_VAR 0 7
70432: PUSH
70433: LD_VAR 0 4
70437: PPUSH
70438: CALL_OW 248
70442: ST_TO_ADDR
// weapon := 0 ;
70443: LD_ADDR_VAR 0 8
70447: PUSH
70448: LD_INT 0
70450: ST_TO_ADDR
// if not nat then
70451: LD_VAR 0 7
70455: NOT
70456: IFFALSE 70460
// continue ;
70458: GO 70425
// for j in list [ nat ] do
70460: LD_ADDR_VAR 0 5
70464: PUSH
70465: LD_VAR 0 10
70469: PUSH
70470: LD_VAR 0 7
70474: ARRAY
70475: PUSH
70476: FOR_IN
70477: IFFALSE 70518
// if GetBWeapon ( i ) = j [ 1 ] then
70479: LD_VAR 0 4
70483: PPUSH
70484: CALL_OW 269
70488: PUSH
70489: LD_VAR 0 5
70493: PUSH
70494: LD_INT 1
70496: ARRAY
70497: EQUAL
70498: IFFALSE 70516
// begin weapon := j [ 2 ] ;
70500: LD_ADDR_VAR 0 8
70504: PUSH
70505: LD_VAR 0 5
70509: PUSH
70510: LD_INT 2
70512: ARRAY
70513: ST_TO_ADDR
// break ;
70514: GO 70518
// end ;
70516: GO 70476
70518: POP
70519: POP
// if not weapon then
70520: LD_VAR 0 8
70524: NOT
70525: IFFALSE 70529
// continue ;
70527: GO 70425
// for k in factories do
70529: LD_ADDR_VAR 0 6
70533: PUSH
70534: LD_VAR 0 2
70538: PUSH
70539: FOR_IN
70540: IFFALSE 70605
// begin weapons := AvailableWeaponList ( k ) ;
70542: LD_ADDR_VAR 0 9
70546: PUSH
70547: LD_VAR 0 6
70551: PPUSH
70552: CALL_OW 478
70556: ST_TO_ADDR
// if not weapons then
70557: LD_VAR 0 9
70561: NOT
70562: IFFALSE 70566
// continue ;
70564: GO 70539
// if weapon in weapons then
70566: LD_VAR 0 8
70570: PUSH
70571: LD_VAR 0 9
70575: IN
70576: IFFALSE 70603
// begin result := [ i , weapon ] ;
70578: LD_ADDR_VAR 0 3
70582: PUSH
70583: LD_VAR 0 4
70587: PUSH
70588: LD_VAR 0 8
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: ST_TO_ADDR
// exit ;
70597: POP
70598: POP
70599: POP
70600: POP
70601: GO 70611
// end ; end ;
70603: GO 70539
70605: POP
70606: POP
// end ;
70607: GO 70425
70609: POP
70610: POP
// end ;
70611: LD_VAR 0 3
70615: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70616: LD_INT 0
70618: PPUSH
// if not side or side > 8 then
70619: LD_VAR 0 3
70623: NOT
70624: PUSH
70625: LD_VAR 0 3
70629: PUSH
70630: LD_INT 8
70632: GREATER
70633: OR
70634: IFFALSE 70638
// exit ;
70636: GO 70697
// if not range then
70638: LD_VAR 0 4
70642: NOT
70643: IFFALSE 70654
// range := - 12 ;
70645: LD_ADDR_VAR 0 4
70649: PUSH
70650: LD_INT 12
70652: NEG
70653: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70654: LD_VAR 0 1
70658: PPUSH
70659: LD_VAR 0 2
70663: PPUSH
70664: LD_VAR 0 3
70668: PPUSH
70669: LD_VAR 0 4
70673: PPUSH
70674: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70678: LD_VAR 0 1
70682: PPUSH
70683: LD_VAR 0 2
70687: PPUSH
70688: LD_VAR 0 3
70692: PPUSH
70693: CALL_OW 331
// end ;
70697: LD_VAR 0 5
70701: RET
// export function Video ( mode ) ; begin
70702: LD_INT 0
70704: PPUSH
// ingame_video = mode ;
70705: LD_ADDR_OWVAR 52
70709: PUSH
70710: LD_VAR 0 1
70714: ST_TO_ADDR
// interface_hidden = mode ;
70715: LD_ADDR_OWVAR 54
70719: PUSH
70720: LD_VAR 0 1
70724: ST_TO_ADDR
// end ;
70725: LD_VAR 0 2
70729: RET
// export function Join ( array , element ) ; begin
70730: LD_INT 0
70732: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70733: LD_ADDR_VAR 0 3
70737: PUSH
70738: LD_VAR 0 1
70742: PPUSH
70743: LD_VAR 0 1
70747: PUSH
70748: LD_INT 1
70750: PLUS
70751: PPUSH
70752: LD_VAR 0 2
70756: PPUSH
70757: CALL_OW 1
70761: ST_TO_ADDR
// end ;
70762: LD_VAR 0 3
70766: RET
// export function JoinUnion ( array , element ) ; begin
70767: LD_INT 0
70769: PPUSH
// result := array union element ;
70770: LD_ADDR_VAR 0 3
70774: PUSH
70775: LD_VAR 0 1
70779: PUSH
70780: LD_VAR 0 2
70784: UNION
70785: ST_TO_ADDR
// end ;
70786: LD_VAR 0 3
70790: RET
// export function GetBehemoths ( side ) ; begin
70791: LD_INT 0
70793: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
70794: LD_ADDR_VAR 0 2
70798: PUSH
70799: LD_INT 22
70801: PUSH
70802: LD_VAR 0 1
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: PUSH
70811: LD_INT 31
70813: PUSH
70814: LD_INT 25
70816: PUSH
70817: EMPTY
70818: LIST
70819: LIST
70820: PUSH
70821: EMPTY
70822: LIST
70823: LIST
70824: PPUSH
70825: CALL_OW 69
70829: ST_TO_ADDR
// end ;
70830: LD_VAR 0 2
70834: RET
// export function Shuffle ( array ) ; var i , index ; begin
70835: LD_INT 0
70837: PPUSH
70838: PPUSH
70839: PPUSH
// result := [ ] ;
70840: LD_ADDR_VAR 0 2
70844: PUSH
70845: EMPTY
70846: ST_TO_ADDR
// if not array then
70847: LD_VAR 0 1
70851: NOT
70852: IFFALSE 70856
// exit ;
70854: GO 70955
// Randomize ;
70856: CALL_OW 10
// for i = array downto 1 do
70860: LD_ADDR_VAR 0 3
70864: PUSH
70865: DOUBLE
70866: LD_VAR 0 1
70870: INC
70871: ST_TO_ADDR
70872: LD_INT 1
70874: PUSH
70875: FOR_DOWNTO
70876: IFFALSE 70953
// begin index := rand ( 1 , array ) ;
70878: LD_ADDR_VAR 0 4
70882: PUSH
70883: LD_INT 1
70885: PPUSH
70886: LD_VAR 0 1
70890: PPUSH
70891: CALL_OW 12
70895: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70896: LD_ADDR_VAR 0 2
70900: PUSH
70901: LD_VAR 0 2
70905: PPUSH
70906: LD_VAR 0 2
70910: PUSH
70911: LD_INT 1
70913: PLUS
70914: PPUSH
70915: LD_VAR 0 1
70919: PUSH
70920: LD_VAR 0 4
70924: ARRAY
70925: PPUSH
70926: CALL_OW 2
70930: ST_TO_ADDR
// array := Delete ( array , index ) ;
70931: LD_ADDR_VAR 0 1
70935: PUSH
70936: LD_VAR 0 1
70940: PPUSH
70941: LD_VAR 0 4
70945: PPUSH
70946: CALL_OW 3
70950: ST_TO_ADDR
// end ;
70951: GO 70875
70953: POP
70954: POP
// end ;
70955: LD_VAR 0 2
70959: RET
// export function GetBaseMaterials ( base ) ; begin
70960: LD_INT 0
70962: PPUSH
// result := [ 0 , 0 , 0 ] ;
70963: LD_ADDR_VAR 0 2
70967: PUSH
70968: LD_INT 0
70970: PUSH
70971: LD_INT 0
70973: PUSH
70974: LD_INT 0
70976: PUSH
70977: EMPTY
70978: LIST
70979: LIST
70980: LIST
70981: ST_TO_ADDR
// if not base then
70982: LD_VAR 0 1
70986: NOT
70987: IFFALSE 70991
// exit ;
70989: GO 71040
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70991: LD_ADDR_VAR 0 2
70995: PUSH
70996: LD_VAR 0 1
71000: PPUSH
71001: LD_INT 1
71003: PPUSH
71004: CALL_OW 275
71008: PUSH
71009: LD_VAR 0 1
71013: PPUSH
71014: LD_INT 2
71016: PPUSH
71017: CALL_OW 275
71021: PUSH
71022: LD_VAR 0 1
71026: PPUSH
71027: LD_INT 3
71029: PPUSH
71030: CALL_OW 275
71034: PUSH
71035: EMPTY
71036: LIST
71037: LIST
71038: LIST
71039: ST_TO_ADDR
// end ;
71040: LD_VAR 0 2
71044: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
71045: LD_INT 0
71047: PPUSH
71048: PPUSH
// result := array ;
71049: LD_ADDR_VAR 0 3
71053: PUSH
71054: LD_VAR 0 1
71058: ST_TO_ADDR
// if size > 0 then
71059: LD_VAR 0 2
71063: PUSH
71064: LD_INT 0
71066: GREATER
71067: IFFALSE 71113
// for i := array downto size do
71069: LD_ADDR_VAR 0 4
71073: PUSH
71074: DOUBLE
71075: LD_VAR 0 1
71079: INC
71080: ST_TO_ADDR
71081: LD_VAR 0 2
71085: PUSH
71086: FOR_DOWNTO
71087: IFFALSE 71111
// result := Delete ( result , result ) ;
71089: LD_ADDR_VAR 0 3
71093: PUSH
71094: LD_VAR 0 3
71098: PPUSH
71099: LD_VAR 0 3
71103: PPUSH
71104: CALL_OW 3
71108: ST_TO_ADDR
71109: GO 71086
71111: POP
71112: POP
// end ;
71113: LD_VAR 0 3
71117: RET
// export function ComExit ( unit ) ; var tmp ; begin
71118: LD_INT 0
71120: PPUSH
71121: PPUSH
// if not IsInUnit ( unit ) then
71122: LD_VAR 0 1
71126: PPUSH
71127: CALL_OW 310
71131: NOT
71132: IFFALSE 71136
// exit ;
71134: GO 71196
// tmp := IsInUnit ( unit ) ;
71136: LD_ADDR_VAR 0 3
71140: PUSH
71141: LD_VAR 0 1
71145: PPUSH
71146: CALL_OW 310
71150: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
71151: LD_VAR 0 3
71155: PPUSH
71156: CALL_OW 247
71160: PUSH
71161: LD_INT 2
71163: EQUAL
71164: IFFALSE 71177
// ComExitVehicle ( unit ) else
71166: LD_VAR 0 1
71170: PPUSH
71171: CALL_OW 121
71175: GO 71186
// ComExitBuilding ( unit ) ;
71177: LD_VAR 0 1
71181: PPUSH
71182: CALL_OW 122
// result := tmp ;
71186: LD_ADDR_VAR 0 2
71190: PUSH
71191: LD_VAR 0 3
71195: ST_TO_ADDR
// end ;
71196: LD_VAR 0 2
71200: RET
// export function ComExitAll ( units ) ; var i ; begin
71201: LD_INT 0
71203: PPUSH
71204: PPUSH
// if not units then
71205: LD_VAR 0 1
71209: NOT
71210: IFFALSE 71214
// exit ;
71212: GO 71240
// for i in units do
71214: LD_ADDR_VAR 0 3
71218: PUSH
71219: LD_VAR 0 1
71223: PUSH
71224: FOR_IN
71225: IFFALSE 71238
// ComExit ( i ) ;
71227: LD_VAR 0 3
71231: PPUSH
71232: CALL 71118 0 1
71236: GO 71224
71238: POP
71239: POP
// end ;
71240: LD_VAR 0 2
71244: RET
// export function ResetHc ; begin
71245: LD_INT 0
71247: PPUSH
// InitHc ;
71248: CALL_OW 19
// hc_importance := 0 ;
71252: LD_ADDR_OWVAR 32
71256: PUSH
71257: LD_INT 0
71259: ST_TO_ADDR
// end ;
71260: LD_VAR 0 1
71264: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
71265: LD_INT 0
71267: PPUSH
71268: PPUSH
71269: PPUSH
// _x := ( x1 + x2 ) div 2 ;
71270: LD_ADDR_VAR 0 6
71274: PUSH
71275: LD_VAR 0 1
71279: PUSH
71280: LD_VAR 0 3
71284: PLUS
71285: PUSH
71286: LD_INT 2
71288: DIV
71289: ST_TO_ADDR
// if _x < 0 then
71290: LD_VAR 0 6
71294: PUSH
71295: LD_INT 0
71297: LESS
71298: IFFALSE 71315
// _x := _x * - 1 ;
71300: LD_ADDR_VAR 0 6
71304: PUSH
71305: LD_VAR 0 6
71309: PUSH
71310: LD_INT 1
71312: NEG
71313: MUL
71314: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
71315: LD_ADDR_VAR 0 7
71319: PUSH
71320: LD_VAR 0 2
71324: PUSH
71325: LD_VAR 0 4
71329: PLUS
71330: PUSH
71331: LD_INT 2
71333: DIV
71334: ST_TO_ADDR
// if _y < 0 then
71335: LD_VAR 0 7
71339: PUSH
71340: LD_INT 0
71342: LESS
71343: IFFALSE 71360
// _y := _y * - 1 ;
71345: LD_ADDR_VAR 0 7
71349: PUSH
71350: LD_VAR 0 7
71354: PUSH
71355: LD_INT 1
71357: NEG
71358: MUL
71359: ST_TO_ADDR
// result := [ _x , _y ] ;
71360: LD_ADDR_VAR 0 5
71364: PUSH
71365: LD_VAR 0 6
71369: PUSH
71370: LD_VAR 0 7
71374: PUSH
71375: EMPTY
71376: LIST
71377: LIST
71378: ST_TO_ADDR
// end ;
71379: LD_VAR 0 5
71383: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
71384: LD_INT 0
71386: PPUSH
71387: PPUSH
71388: PPUSH
71389: PPUSH
// task := GetTaskList ( unit ) ;
71390: LD_ADDR_VAR 0 7
71394: PUSH
71395: LD_VAR 0 1
71399: PPUSH
71400: CALL_OW 437
71404: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71405: LD_VAR 0 7
71409: NOT
71410: PUSH
71411: LD_VAR 0 1
71415: PPUSH
71416: LD_VAR 0 2
71420: PPUSH
71421: CALL_OW 308
71425: NOT
71426: AND
71427: IFFALSE 71431
// exit ;
71429: GO 71549
// if IsInArea ( unit , area ) then
71431: LD_VAR 0 1
71435: PPUSH
71436: LD_VAR 0 2
71440: PPUSH
71441: CALL_OW 308
71445: IFFALSE 71463
// begin ComMoveToArea ( unit , goAway ) ;
71447: LD_VAR 0 1
71451: PPUSH
71452: LD_VAR 0 3
71456: PPUSH
71457: CALL_OW 113
// exit ;
71461: GO 71549
// end ; if task [ 1 ] [ 1 ] <> M then
71463: LD_VAR 0 7
71467: PUSH
71468: LD_INT 1
71470: ARRAY
71471: PUSH
71472: LD_INT 1
71474: ARRAY
71475: PUSH
71476: LD_STRING M
71478: NONEQUAL
71479: IFFALSE 71483
// exit ;
71481: GO 71549
// x := task [ 1 ] [ 2 ] ;
71483: LD_ADDR_VAR 0 5
71487: PUSH
71488: LD_VAR 0 7
71492: PUSH
71493: LD_INT 1
71495: ARRAY
71496: PUSH
71497: LD_INT 2
71499: ARRAY
71500: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71501: LD_ADDR_VAR 0 6
71505: PUSH
71506: LD_VAR 0 7
71510: PUSH
71511: LD_INT 1
71513: ARRAY
71514: PUSH
71515: LD_INT 3
71517: ARRAY
71518: ST_TO_ADDR
// if InArea ( x , y , area ) then
71519: LD_VAR 0 5
71523: PPUSH
71524: LD_VAR 0 6
71528: PPUSH
71529: LD_VAR 0 2
71533: PPUSH
71534: CALL_OW 309
71538: IFFALSE 71549
// ComStop ( unit ) ;
71540: LD_VAR 0 1
71544: PPUSH
71545: CALL_OW 141
// end ;
71549: LD_VAR 0 4
71553: RET
// export function Abs ( value ) ; begin
71554: LD_INT 0
71556: PPUSH
// result := value ;
71557: LD_ADDR_VAR 0 2
71561: PUSH
71562: LD_VAR 0 1
71566: ST_TO_ADDR
// if value < 0 then
71567: LD_VAR 0 1
71571: PUSH
71572: LD_INT 0
71574: LESS
71575: IFFALSE 71592
// result := value * - 1 ;
71577: LD_ADDR_VAR 0 2
71581: PUSH
71582: LD_VAR 0 1
71586: PUSH
71587: LD_INT 1
71589: NEG
71590: MUL
71591: ST_TO_ADDR
// end ;
71592: LD_VAR 0 2
71596: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71597: LD_INT 0
71599: PPUSH
71600: PPUSH
71601: PPUSH
71602: PPUSH
71603: PPUSH
71604: PPUSH
71605: PPUSH
71606: PPUSH
// if not unit or not building then
71607: LD_VAR 0 1
71611: NOT
71612: PUSH
71613: LD_VAR 0 2
71617: NOT
71618: OR
71619: IFFALSE 71623
// exit ;
71621: GO 71849
// x := GetX ( building ) ;
71623: LD_ADDR_VAR 0 4
71627: PUSH
71628: LD_VAR 0 2
71632: PPUSH
71633: CALL_OW 250
71637: ST_TO_ADDR
// y := GetY ( building ) ;
71638: LD_ADDR_VAR 0 6
71642: PUSH
71643: LD_VAR 0 2
71647: PPUSH
71648: CALL_OW 251
71652: ST_TO_ADDR
// d := GetDir ( building ) ;
71653: LD_ADDR_VAR 0 8
71657: PUSH
71658: LD_VAR 0 2
71662: PPUSH
71663: CALL_OW 254
71667: ST_TO_ADDR
// r := 4 ;
71668: LD_ADDR_VAR 0 9
71672: PUSH
71673: LD_INT 4
71675: ST_TO_ADDR
// for i := 1 to 5 do
71676: LD_ADDR_VAR 0 10
71680: PUSH
71681: DOUBLE
71682: LD_INT 1
71684: DEC
71685: ST_TO_ADDR
71686: LD_INT 5
71688: PUSH
71689: FOR_TO
71690: IFFALSE 71847
// begin _x := ShiftX ( x , d , r + i ) ;
71692: LD_ADDR_VAR 0 5
71696: PUSH
71697: LD_VAR 0 4
71701: PPUSH
71702: LD_VAR 0 8
71706: PPUSH
71707: LD_VAR 0 9
71711: PUSH
71712: LD_VAR 0 10
71716: PLUS
71717: PPUSH
71718: CALL_OW 272
71722: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71723: LD_ADDR_VAR 0 7
71727: PUSH
71728: LD_VAR 0 6
71732: PPUSH
71733: LD_VAR 0 8
71737: PPUSH
71738: LD_VAR 0 9
71742: PUSH
71743: LD_VAR 0 10
71747: PLUS
71748: PPUSH
71749: CALL_OW 273
71753: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71754: LD_VAR 0 5
71758: PPUSH
71759: LD_VAR 0 7
71763: PPUSH
71764: CALL_OW 488
71768: PUSH
71769: LD_VAR 0 5
71773: PPUSH
71774: LD_VAR 0 7
71778: PPUSH
71779: CALL_OW 428
71783: PPUSH
71784: CALL_OW 247
71788: PUSH
71789: LD_INT 3
71791: PUSH
71792: LD_INT 2
71794: PUSH
71795: EMPTY
71796: LIST
71797: LIST
71798: IN
71799: NOT
71800: AND
71801: IFFALSE 71845
// begin ComMoveXY ( unit , _x , _y ) ;
71803: LD_VAR 0 1
71807: PPUSH
71808: LD_VAR 0 5
71812: PPUSH
71813: LD_VAR 0 7
71817: PPUSH
71818: CALL_OW 111
// result := [ _x , _y ] ;
71822: LD_ADDR_VAR 0 3
71826: PUSH
71827: LD_VAR 0 5
71831: PUSH
71832: LD_VAR 0 7
71836: PUSH
71837: EMPTY
71838: LIST
71839: LIST
71840: ST_TO_ADDR
// exit ;
71841: POP
71842: POP
71843: GO 71849
// end ; end ;
71845: GO 71689
71847: POP
71848: POP
// end ;
71849: LD_VAR 0 3
71853: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71854: LD_INT 0
71856: PPUSH
71857: PPUSH
71858: PPUSH
// result := 0 ;
71859: LD_ADDR_VAR 0 3
71863: PUSH
71864: LD_INT 0
71866: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71867: LD_VAR 0 1
71871: PUSH
71872: LD_INT 0
71874: LESS
71875: PUSH
71876: LD_VAR 0 1
71880: PUSH
71881: LD_INT 8
71883: GREATER
71884: OR
71885: PUSH
71886: LD_VAR 0 2
71890: PUSH
71891: LD_INT 0
71893: LESS
71894: OR
71895: PUSH
71896: LD_VAR 0 2
71900: PUSH
71901: LD_INT 8
71903: GREATER
71904: OR
71905: IFFALSE 71909
// exit ;
71907: GO 71984
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
71909: LD_ADDR_VAR 0 4
71913: PUSH
71914: LD_INT 22
71916: PUSH
71917: LD_VAR 0 2
71921: PUSH
71922: EMPTY
71923: LIST
71924: LIST
71925: PPUSH
71926: CALL_OW 69
71930: PUSH
71931: FOR_IN
71932: IFFALSE 71982
// begin un := UnitShoot ( i ) ;
71934: LD_ADDR_VAR 0 5
71938: PUSH
71939: LD_VAR 0 4
71943: PPUSH
71944: CALL_OW 504
71948: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71949: LD_VAR 0 5
71953: PPUSH
71954: CALL_OW 255
71958: PUSH
71959: LD_VAR 0 1
71963: EQUAL
71964: IFFALSE 71980
// begin result := un ;
71966: LD_ADDR_VAR 0 3
71970: PUSH
71971: LD_VAR 0 5
71975: ST_TO_ADDR
// exit ;
71976: POP
71977: POP
71978: GO 71984
// end ; end ;
71980: GO 71931
71982: POP
71983: POP
// end ;
71984: LD_VAR 0 3
71988: RET
// export function GetCargoBay ( units ) ; begin
71989: LD_INT 0
71991: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71992: LD_ADDR_VAR 0 2
71996: PUSH
71997: LD_VAR 0 1
72001: PPUSH
72002: LD_INT 2
72004: PUSH
72005: LD_INT 34
72007: PUSH
72008: LD_INT 12
72010: PUSH
72011: EMPTY
72012: LIST
72013: LIST
72014: PUSH
72015: LD_INT 34
72017: PUSH
72018: LD_INT 51
72020: PUSH
72021: EMPTY
72022: LIST
72023: LIST
72024: PUSH
72025: LD_INT 34
72027: PUSH
72028: LD_INT 32
72030: PUSH
72031: EMPTY
72032: LIST
72033: LIST
72034: PUSH
72035: LD_INT 34
72037: PUSH
72038: LD_EXP 120
72042: PUSH
72043: EMPTY
72044: LIST
72045: LIST
72046: PUSH
72047: EMPTY
72048: LIST
72049: LIST
72050: LIST
72051: LIST
72052: LIST
72053: PPUSH
72054: CALL_OW 72
72058: ST_TO_ADDR
// end ; end_of_file
72059: LD_VAR 0 2
72063: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72064: LD_VAR 0 1
72068: PPUSH
72069: LD_VAR 0 2
72073: PPUSH
72074: LD_VAR 0 3
72078: PPUSH
72079: LD_VAR 0 4
72083: PPUSH
72084: LD_VAR 0 5
72088: PPUSH
72089: LD_VAR 0 6
72093: PPUSH
72094: CALL 16898 0 6
// end ;
72098: PPOPN 6
72100: END
