// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 42 0 0
// PrepareNature ;
   8: CALL 1776 0 0
// PrepareArabian ;
  12: CALL 2146 0 0
// PrepareAmerican ;
  16: CALL 7024 0 0
// PrepareRussian ;
  20: CALL 3102 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 2 ) ;
  30: LD_INT 2
  32: PPUSH
  33: CALL_OW 344
// Action ;
  37: CALL 8584 0 0
// end ;
  41: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured ; function Init ; begin
  42: LD_INT 0
  44: PPUSH
// debug := false ;
  45: LD_ADDR_EXP 1
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// prefix := 03_ ;
  53: LD_ADDR_EXP 2
  57: PUSH
  58: LD_STRING 03_
  60: ST_TO_ADDR
// baseConstructed := false ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// labConstructed := false ;
  69: LD_ADDR_EXP 4
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  77: LD_ADDR_EXP 5
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// russianAlert := false ;
  85: LD_ADDR_EXP 9
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// activeGrishkoAI := true ;
  93: LD_ADDR_EXP 10
  97: PUSH
  98: LD_INT 1
 100: ST_TO_ADDR
// allowHeikeAttack := false ;
 101: LD_ADDR_EXP 11
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// allowToPatrol := false ;
 109: LD_ADDR_EXP 12
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// omicronFall := false ;
 117: LD_ADDR_EXP 13
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// startAttackOnOmicron := false ;
 125: LD_ADDR_EXP 6
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// kirovDestroyed := false ;
 133: LD_ADDR_EXP 16
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// beriaDestroyed := false ;
 141: LD_ADDR_EXP 17
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// kaganDestroyed := false ;
 149: LD_ADDR_EXP 18
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// retreatFromOmicron := false ;
 157: LD_ADDR_EXP 20
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// spottedByPatrol := false ;
 165: LD_ADDR_EXP 7
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// omarCountdown := [ 25 25$00 , 24 24$00 , 23 23$00 ] [ Difficulty ] ;
 173: LD_ADDR_EXP 22
 177: PUSH
 178: LD_INT 52500
 180: PUSH
 181: LD_INT 50400
 183: PUSH
 184: LD_INT 48300
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: PUSH
 192: LD_OWVAR 67
 196: ARRAY
 197: ST_TO_ADDR
// escapeCounter := 0 ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// loseCounter := 0 ;
 206: LD_ADDR_EXP 14
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// labCaptured := false ;
 214: LD_ADDR_EXP 21
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// hillBase := false ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 230: LD_ADDR_EXP 8
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 4
 240: PUSH
 241: LD_INT 5
 243: PUSH
 244: LD_INT 6
 246: PUSH
 247: LD_INT 7
 249: PUSH
 250: LD_INT 8
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: LIST
 260: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 261: LD_ADDR_EXP 23
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// kaganCaptured := false ;
 269: LD_ADDR_EXP 24
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// end ; end_of_file
 277: LD_VAR 0 1
 281: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 282: LD_INT 0
 284: PPUSH
 285: PPUSH
// if exist_mode then
 286: LD_VAR 0 2
 290: IFFALSE 315
// unit := CreateCharacter ( prefix & ident ) else
 292: LD_ADDR_VAR 0 5
 296: PUSH
 297: LD_VAR 0 3
 301: PUSH
 302: LD_VAR 0 1
 306: STR
 307: PPUSH
 308: CALL_OW 34
 312: ST_TO_ADDR
 313: GO 330
// unit := NewCharacter ( ident ) ;
 315: LD_ADDR_VAR 0 5
 319: PUSH
 320: LD_VAR 0 1
 324: PPUSH
 325: CALL_OW 25
 329: ST_TO_ADDR
// result := unit ;
 330: LD_ADDR_VAR 0 4
 334: PUSH
 335: LD_VAR 0 5
 339: ST_TO_ADDR
// end ;
 340: LD_VAR 0 4
 344: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 345: LD_INT 0
 347: PPUSH
// uc_side := side ;
 348: LD_ADDR_OWVAR 20
 352: PUSH
 353: LD_VAR 0 1
 357: ST_TO_ADDR
// uc_nation := nation ;
 358: LD_ADDR_OWVAR 21
 362: PUSH
 363: LD_VAR 0 2
 367: ST_TO_ADDR
// vc_chassis := chassis ;
 368: LD_ADDR_OWVAR 37
 372: PUSH
 373: LD_VAR 0 3
 377: ST_TO_ADDR
// vc_engine := engine ;
 378: LD_ADDR_OWVAR 39
 382: PUSH
 383: LD_VAR 0 4
 387: ST_TO_ADDR
// vc_control := control ;
 388: LD_ADDR_OWVAR 38
 392: PUSH
 393: LD_VAR 0 5
 397: ST_TO_ADDR
// vc_weapon := weapon ;
 398: LD_ADDR_OWVAR 40
 402: PUSH
 403: LD_VAR 0 6
 407: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 408: LD_ADDR_OWVAR 41
 412: PUSH
 413: LD_VAR 0 7
 417: ST_TO_ADDR
// result := CreateVehicle ;
 418: LD_ADDR_VAR 0 8
 422: PUSH
 423: CALL_OW 45
 427: ST_TO_ADDR
// end ;
 428: LD_VAR 0 8
 432: RET
// export function SayX ( units , ident ) ; var i ; begin
 433: LD_INT 0
 435: PPUSH
 436: PPUSH
// result := false ;
 437: LD_ADDR_VAR 0 3
 441: PUSH
 442: LD_INT 0
 444: ST_TO_ADDR
// if not units then
 445: LD_VAR 0 1
 449: NOT
 450: IFFALSE 454
// exit ;
 452: GO 508
// for i in units do
 454: LD_ADDR_VAR 0 4
 458: PUSH
 459: LD_VAR 0 1
 463: PUSH
 464: FOR_IN
 465: IFFALSE 506
// if IsOk ( i ) then
 467: LD_VAR 0 4
 471: PPUSH
 472: CALL_OW 302
 476: IFFALSE 504
// begin Say ( i , ident ) ;
 478: LD_VAR 0 4
 482: PPUSH
 483: LD_VAR 0 2
 487: PPUSH
 488: CALL_OW 88
// result := i ;
 492: LD_ADDR_VAR 0 3
 496: PUSH
 497: LD_VAR 0 4
 501: ST_TO_ADDR
// break ;
 502: GO 506
// end ;
 504: GO 464
 506: POP
 507: POP
// end ;
 508: LD_VAR 0 3
 512: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 513: LD_INT 0
 515: PPUSH
 516: PPUSH
 517: PPUSH
// if not observer or not unit then
 518: LD_VAR 0 1
 522: NOT
 523: PUSH
 524: LD_VAR 0 2
 528: NOT
 529: OR
 530: IFFALSE 534
// exit ;
 532: GO 582
// if not See ( GetSide ( observer ) , unit ) then
 534: LD_VAR 0 1
 538: PPUSH
 539: CALL_OW 255
 543: PPUSH
 544: LD_VAR 0 2
 548: PPUSH
 549: CALL_OW 292
 553: NOT
 554: IFFALSE 558
// exit ;
 556: GO 582
// result := GetDistUnits ( observer , unit ) < 12 ;
 558: LD_ADDR_VAR 0 3
 562: PUSH
 563: LD_VAR 0 1
 567: PPUSH
 568: LD_VAR 0 2
 572: PPUSH
 573: CALL_OW 296
 577: PUSH
 578: LD_INT 12
 580: LESS
 581: ST_TO_ADDR
// end ;
 582: LD_VAR 0 3
 586: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 587: LD_INT 0
 589: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 590: LD_VAR 0 2
 594: PUSH
 595: LD_INT 1
 597: ARRAY
 598: PPUSH
 599: LD_VAR 0 2
 603: PUSH
 604: LD_INT 2
 606: ARRAY
 607: PPUSH
 608: CALL_OW 488
 612: PUSH
 613: LD_VAR 0 2
 617: PUSH
 618: LD_INT 1
 620: ARRAY
 621: PPUSH
 622: LD_VAR 0 2
 626: PUSH
 627: LD_INT 2
 629: ARRAY
 630: PPUSH
 631: CALL_OW 428
 635: PUSH
 636: LD_INT 0
 638: EQUAL
 639: AND
 640: IFFALSE 674
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 642: LD_VAR 0 1
 646: PPUSH
 647: LD_VAR 0 2
 651: PUSH
 652: LD_INT 1
 654: ARRAY
 655: PPUSH
 656: LD_VAR 0 2
 660: PUSH
 661: LD_INT 2
 663: ARRAY
 664: PPUSH
 665: LD_VAR 0 3
 669: PPUSH
 670: CALL_OW 48
// end ;
 674: LD_VAR 0 4
 678: RET
// export function Video ( mode ) ; begin
 679: LD_INT 0
 681: PPUSH
// ingame_video = mode ;
 682: LD_ADDR_OWVAR 52
 686: PUSH
 687: LD_VAR 0 1
 691: ST_TO_ADDR
// interface_hidden = mode ;
 692: LD_ADDR_OWVAR 54
 696: PUSH
 697: LD_VAR 0 1
 701: ST_TO_ADDR
// end ;
 702: LD_VAR 0 2
 706: RET
// export function ReverseArray ( array ) ; var i ; begin
 707: LD_INT 0
 709: PPUSH
 710: PPUSH
// if not array then
 711: LD_VAR 0 1
 715: NOT
 716: IFFALSE 720
// exit ;
 718: GO 778
// result := [ ] ;
 720: LD_ADDR_VAR 0 2
 724: PUSH
 725: EMPTY
 726: ST_TO_ADDR
// for i := 1 to array do
 727: LD_ADDR_VAR 0 3
 731: PUSH
 732: DOUBLE
 733: LD_INT 1
 735: DEC
 736: ST_TO_ADDR
 737: LD_VAR 0 1
 741: PUSH
 742: FOR_TO
 743: IFFALSE 776
// result := Insert ( result , 1 , array [ i ] ) ;
 745: LD_ADDR_VAR 0 2
 749: PUSH
 750: LD_VAR 0 2
 754: PPUSH
 755: LD_INT 1
 757: PPUSH
 758: LD_VAR 0 1
 762: PUSH
 763: LD_VAR 0 3
 767: ARRAY
 768: PPUSH
 769: CALL_OW 2
 773: ST_TO_ADDR
 774: GO 742
 776: POP
 777: POP
// end ;
 778: LD_VAR 0 2
 782: RET
// export function ComExit ( unit ) ; begin
 783: LD_INT 0
 785: PPUSH
// result := IsInUnit ( unit ) ;
 786: LD_ADDR_VAR 0 2
 790: PUSH
 791: LD_VAR 0 1
 795: PPUSH
 796: CALL_OW 310
 800: ST_TO_ADDR
// if not result then
 801: LD_VAR 0 2
 805: NOT
 806: IFFALSE 810
// exit ;
 808: GO 845
// if GetType ( result ) = unit_vehicle then
 810: LD_VAR 0 2
 814: PPUSH
 815: CALL_OW 247
 819: PUSH
 820: LD_INT 2
 822: EQUAL
 823: IFFALSE 836
// ComExitVehicle ( unit ) else
 825: LD_VAR 0 1
 829: PPUSH
 830: CALL_OW 121
 834: GO 845
// ComExitBuilding ( unit ) ;
 836: LD_VAR 0 1
 840: PPUSH
 841: CALL_OW 122
// end ;
 845: LD_VAR 0 2
 849: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 850: LD_INT 0
 852: PPUSH
 853: PPUSH
// if not side or not nation then
 854: LD_VAR 0 1
 858: NOT
 859: PUSH
 860: LD_VAR 0 2
 864: NOT
 865: OR
 866: IFFALSE 870
// exit ;
 868: GO 1634
// case nation of nation_american :
 870: LD_VAR 0 2
 874: PUSH
 875: LD_INT 1
 877: DOUBLE
 878: EQUAL
 879: IFTRUE 883
 881: GO 1097
 883: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 884: LD_ADDR_VAR 0 4
 888: PUSH
 889: LD_INT 35
 891: PUSH
 892: LD_INT 45
 894: PUSH
 895: LD_INT 46
 897: PUSH
 898: LD_INT 47
 900: PUSH
 901: LD_INT 82
 903: PUSH
 904: LD_INT 83
 906: PUSH
 907: LD_INT 84
 909: PUSH
 910: LD_INT 85
 912: PUSH
 913: LD_INT 86
 915: PUSH
 916: LD_INT 1
 918: PUSH
 919: LD_INT 2
 921: PUSH
 922: LD_INT 6
 924: PUSH
 925: LD_INT 15
 927: PUSH
 928: LD_INT 16
 930: PUSH
 931: LD_INT 7
 933: PUSH
 934: LD_INT 12
 936: PUSH
 937: LD_INT 13
 939: PUSH
 940: LD_INT 10
 942: PUSH
 943: LD_INT 14
 945: PUSH
 946: LD_INT 20
 948: PUSH
 949: LD_INT 21
 951: PUSH
 952: LD_INT 22
 954: PUSH
 955: LD_INT 25
 957: PUSH
 958: LD_INT 32
 960: PUSH
 961: LD_INT 27
 963: PUSH
 964: LD_INT 36
 966: PUSH
 967: LD_INT 69
 969: PUSH
 970: LD_INT 39
 972: PUSH
 973: LD_INT 34
 975: PUSH
 976: LD_INT 40
 978: PUSH
 979: LD_INT 48
 981: PUSH
 982: LD_INT 49
 984: PUSH
 985: LD_INT 50
 987: PUSH
 988: LD_INT 51
 990: PUSH
 991: LD_INT 52
 993: PUSH
 994: LD_INT 53
 996: PUSH
 997: LD_INT 54
 999: PUSH
1000: LD_INT 55
1002: PUSH
1003: LD_INT 56
1005: PUSH
1006: LD_INT 57
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: LD_INT 59
1014: PUSH
1015: LD_INT 60
1017: PUSH
1018: LD_INT 61
1020: PUSH
1021: LD_INT 62
1023: PUSH
1024: LD_INT 80
1026: PUSH
1027: LD_INT 82
1029: PUSH
1030: LD_INT 83
1032: PUSH
1033: LD_INT 84
1035: PUSH
1036: LD_INT 85
1038: PUSH
1039: LD_INT 86
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: LIST
1064: LIST
1065: LIST
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: LIST
1075: LIST
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: ST_TO_ADDR
1095: GO 1558
1097: LD_INT 2
1099: DOUBLE
1100: EQUAL
1101: IFTRUE 1105
1103: GO 1327
1105: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1106: LD_ADDR_VAR 0 4
1110: PUSH
1111: LD_INT 35
1113: PUSH
1114: LD_INT 45
1116: PUSH
1117: LD_INT 46
1119: PUSH
1120: LD_INT 47
1122: PUSH
1123: LD_INT 82
1125: PUSH
1126: LD_INT 83
1128: PUSH
1129: LD_INT 84
1131: PUSH
1132: LD_INT 85
1134: PUSH
1135: LD_INT 87
1137: PUSH
1138: LD_INT 70
1140: PUSH
1141: LD_INT 1
1143: PUSH
1144: LD_INT 11
1146: PUSH
1147: LD_INT 3
1149: PUSH
1150: LD_INT 4
1152: PUSH
1153: LD_INT 5
1155: PUSH
1156: LD_INT 6
1158: PUSH
1159: LD_INT 15
1161: PUSH
1162: LD_INT 18
1164: PUSH
1165: LD_INT 7
1167: PUSH
1168: LD_INT 17
1170: PUSH
1171: LD_INT 8
1173: PUSH
1174: LD_INT 20
1176: PUSH
1177: LD_INT 21
1179: PUSH
1180: LD_INT 22
1182: PUSH
1183: LD_INT 72
1185: PUSH
1186: LD_INT 26
1188: PUSH
1189: LD_INT 69
1191: PUSH
1192: LD_INT 39
1194: PUSH
1195: LD_INT 40
1197: PUSH
1198: LD_INT 41
1200: PUSH
1201: LD_INT 42
1203: PUSH
1204: LD_INT 43
1206: PUSH
1207: LD_INT 48
1209: PUSH
1210: LD_INT 49
1212: PUSH
1213: LD_INT 50
1215: PUSH
1216: LD_INT 51
1218: PUSH
1219: LD_INT 52
1221: PUSH
1222: LD_INT 53
1224: PUSH
1225: LD_INT 54
1227: PUSH
1228: LD_INT 55
1230: PUSH
1231: LD_INT 56
1233: PUSH
1234: LD_INT 60
1236: PUSH
1237: LD_INT 61
1239: PUSH
1240: LD_INT 62
1242: PUSH
1243: LD_INT 66
1245: PUSH
1246: LD_INT 67
1248: PUSH
1249: LD_INT 68
1251: PUSH
1252: LD_INT 81
1254: PUSH
1255: LD_INT 82
1257: PUSH
1258: LD_INT 83
1260: PUSH
1261: LD_INT 84
1263: PUSH
1264: LD_INT 85
1266: PUSH
1267: LD_INT 87
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: LIST
1276: LIST
1277: LIST
1278: LIST
1279: LIST
1280: LIST
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: LIST
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: LIST
1324: ST_TO_ADDR
1325: GO 1558
1327: LD_INT 3
1329: DOUBLE
1330: EQUAL
1331: IFTRUE 1335
1333: GO 1557
1335: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1336: LD_ADDR_VAR 0 4
1340: PUSH
1341: LD_INT 46
1343: PUSH
1344: LD_INT 47
1346: PUSH
1347: LD_INT 1
1349: PUSH
1350: LD_INT 2
1352: PUSH
1353: LD_INT 82
1355: PUSH
1356: LD_INT 83
1358: PUSH
1359: LD_INT 84
1361: PUSH
1362: LD_INT 85
1364: PUSH
1365: LD_INT 86
1367: PUSH
1368: LD_INT 11
1370: PUSH
1371: LD_INT 9
1373: PUSH
1374: LD_INT 20
1376: PUSH
1377: LD_INT 19
1379: PUSH
1380: LD_INT 21
1382: PUSH
1383: LD_INT 24
1385: PUSH
1386: LD_INT 22
1388: PUSH
1389: LD_INT 25
1391: PUSH
1392: LD_INT 28
1394: PUSH
1395: LD_INT 29
1397: PUSH
1398: LD_INT 30
1400: PUSH
1401: LD_INT 31
1403: PUSH
1404: LD_INT 37
1406: PUSH
1407: LD_INT 38
1409: PUSH
1410: LD_INT 32
1412: PUSH
1413: LD_INT 27
1415: PUSH
1416: LD_INT 33
1418: PUSH
1419: LD_INT 69
1421: PUSH
1422: LD_INT 39
1424: PUSH
1425: LD_INT 34
1427: PUSH
1428: LD_INT 40
1430: PUSH
1431: LD_INT 71
1433: PUSH
1434: LD_INT 23
1436: PUSH
1437: LD_INT 44
1439: PUSH
1440: LD_INT 48
1442: PUSH
1443: LD_INT 49
1445: PUSH
1446: LD_INT 50
1448: PUSH
1449: LD_INT 51
1451: PUSH
1452: LD_INT 52
1454: PUSH
1455: LD_INT 53
1457: PUSH
1458: LD_INT 54
1460: PUSH
1461: LD_INT 55
1463: PUSH
1464: LD_INT 56
1466: PUSH
1467: LD_INT 57
1469: PUSH
1470: LD_INT 58
1472: PUSH
1473: LD_INT 59
1475: PUSH
1476: LD_INT 63
1478: PUSH
1479: LD_INT 64
1481: PUSH
1482: LD_INT 65
1484: PUSH
1485: LD_INT 82
1487: PUSH
1488: LD_INT 83
1490: PUSH
1491: LD_INT 84
1493: PUSH
1494: LD_INT 85
1496: PUSH
1497: LD_INT 86
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: LIST
1520: LIST
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: LIST
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: LIST
1538: LIST
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: LIST
1554: ST_TO_ADDR
1555: GO 1558
1557: POP
// if state > - 1 and state < 3 then
1558: LD_VAR 0 3
1562: PUSH
1563: LD_INT 1
1565: NEG
1566: GREATER
1567: PUSH
1568: LD_VAR 0 3
1572: PUSH
1573: LD_INT 3
1575: LESS
1576: AND
1577: IFFALSE 1634
// for i in result do
1579: LD_ADDR_VAR 0 5
1583: PUSH
1584: LD_VAR 0 4
1588: PUSH
1589: FOR_IN
1590: IFFALSE 1632
// if GetTech ( i , side ) <> state then
1592: LD_VAR 0 5
1596: PPUSH
1597: LD_VAR 0 1
1601: PPUSH
1602: CALL_OW 321
1606: PUSH
1607: LD_VAR 0 3
1611: NONEQUAL
1612: IFFALSE 1630
// result := result diff i ;
1614: LD_ADDR_VAR 0 4
1618: PUSH
1619: LD_VAR 0 4
1623: PUSH
1624: LD_VAR 0 5
1628: DIFF
1629: ST_TO_ADDR
1630: GO 1589
1632: POP
1633: POP
// end ;
1634: LD_VAR 0 4
1638: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
1639: LD_INT 0
1641: PPUSH
1642: PPUSH
// InitUc ;
1643: CALL_OW 18
// InitHc ;
1647: CALL_OW 19
// uc_side := 0 ;
1651: LD_ADDR_OWVAR 20
1655: PUSH
1656: LD_INT 0
1658: ST_TO_ADDR
// uc_nation := 0 ;
1659: LD_ADDR_OWVAR 21
1663: PUSH
1664: LD_INT 0
1666: ST_TO_ADDR
// for i = 1 to amount do
1667: LD_ADDR_VAR 0 4
1671: PUSH
1672: DOUBLE
1673: LD_INT 1
1675: DEC
1676: ST_TO_ADDR
1677: LD_VAR 0 2
1681: PUSH
1682: FOR_TO
1683: IFFALSE 1765
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
1685: LD_ADDR_OWVAR 29
1689: PUSH
1690: LD_INT 9
1692: PPUSH
1693: LD_INT 12
1695: PPUSH
1696: CALL_OW 12
1700: PUSH
1701: LD_INT 9
1703: PPUSH
1704: LD_INT 12
1706: PPUSH
1707: CALL_OW 12
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
1716: LD_ADDR_OWVAR 35
1720: PUSH
1721: LD_INT 1
1723: NEG
1724: PPUSH
1725: LD_INT 1
1727: PPUSH
1728: CALL_OW 12
1732: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
1733: LD_INT 0
1735: PPUSH
1736: LD_INT 12
1738: PPUSH
1739: LD_INT 1
1741: PPUSH
1742: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
1746: CALL_OW 44
1750: PPUSH
1751: LD_VAR 0 1
1755: PPUSH
1756: LD_INT 0
1758: PPUSH
1759: CALL_OW 49
// end ;
1763: GO 1682
1765: POP
1766: POP
// InitHc ;
1767: CALL_OW 19
// end ;
1771: LD_VAR 0 3
1775: RET
// export function PrepareNature ; var i ; begin
1776: LD_INT 0
1778: PPUSH
1779: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
1780: LD_INT 18
1782: PPUSH
1783: LD_INT 5
1785: PUSH
1786: LD_INT 4
1788: PUSH
1789: LD_INT 3
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: LIST
1796: PUSH
1797: LD_OWVAR 67
1801: ARRAY
1802: PPUSH
1803: CALL 1639 0 2
// for i := 1 to 3 do
1807: LD_ADDR_VAR 0 2
1811: PUSH
1812: DOUBLE
1813: LD_INT 1
1815: DEC
1816: ST_TO_ADDR
1817: LD_INT 3
1819: PUSH
1820: FOR_TO
1821: IFFALSE 1856
// begin hc_class := 21 ;
1823: LD_ADDR_OWVAR 28
1827: PUSH
1828: LD_INT 21
1830: ST_TO_ADDR
// hc_gallery :=  ;
1831: LD_ADDR_OWVAR 33
1835: PUSH
1836: LD_STRING 
1838: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1839: CALL_OW 44
1843: PPUSH
1844: LD_INT 18
1846: PPUSH
1847: LD_INT 0
1849: PPUSH
1850: CALL_OW 49
// end ;
1854: GO 1820
1856: POP
1857: POP
// for i := 1 to 2 do
1858: LD_ADDR_VAR 0 2
1862: PUSH
1863: DOUBLE
1864: LD_INT 1
1866: DEC
1867: ST_TO_ADDR
1868: LD_INT 2
1870: PUSH
1871: FOR_TO
1872: IFFALSE 1907
// begin hc_class := 18 ;
1874: LD_ADDR_OWVAR 28
1878: PUSH
1879: LD_INT 18
1881: ST_TO_ADDR
// hc_gallery :=  ;
1882: LD_ADDR_OWVAR 33
1886: PUSH
1887: LD_STRING 
1889: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1890: CALL_OW 44
1894: PPUSH
1895: LD_INT 18
1897: PPUSH
1898: LD_INT 0
1900: PPUSH
1901: CALL_OW 49
// end ;
1905: GO 1871
1907: POP
1908: POP
// for i := 1 to 2 do
1909: LD_ADDR_VAR 0 2
1913: PUSH
1914: DOUBLE
1915: LD_INT 1
1917: DEC
1918: ST_TO_ADDR
1919: LD_INT 2
1921: PUSH
1922: FOR_TO
1923: IFFALSE 1958
// begin hc_class := 13 ;
1925: LD_ADDR_OWVAR 28
1929: PUSH
1930: LD_INT 13
1932: ST_TO_ADDR
// hc_gallery :=  ;
1933: LD_ADDR_OWVAR 33
1937: PUSH
1938: LD_STRING 
1940: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1941: CALL_OW 44
1945: PPUSH
1946: LD_INT 18
1948: PPUSH
1949: LD_INT 0
1951: PPUSH
1952: CALL_OW 49
// end ;
1956: GO 1922
1958: POP
1959: POP
// end ;
1960: LD_VAR 0 1
1964: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1965: LD_INT 0
1967: PPUSH
1968: PPUSH
1969: PPUSH
1970: PPUSH
1971: PPUSH
// result := false ;
1972: LD_ADDR_VAR 0 4
1976: PUSH
1977: LD_INT 0
1979: ST_TO_ADDR
// if not sideList or not enemySide then
1980: LD_VAR 0 1
1984: NOT
1985: PUSH
1986: LD_VAR 0 2
1990: NOT
1991: OR
1992: IFFALSE 1996
// exit ;
1994: GO 2141
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1996: LD_ADDR_VAR 0 7
2000: PUSH
2001: LD_INT 22
2003: PUSH
2004: LD_VAR 0 2
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: PPUSH
2013: CALL_OW 69
2017: ST_TO_ADDR
// if not tmp then
2018: LD_VAR 0 7
2022: NOT
2023: IFFALSE 2027
// exit ;
2025: GO 2141
// for s in sideList do
2027: LD_ADDR_VAR 0 6
2031: PUSH
2032: LD_VAR 0 1
2036: PUSH
2037: FOR_IN
2038: IFFALSE 2139
// for i in tmp do
2040: LD_ADDR_VAR 0 5
2044: PUSH
2045: LD_VAR 0 7
2049: PUSH
2050: FOR_IN
2051: IFFALSE 2135
// if See ( s , i ) then
2053: LD_VAR 0 6
2057: PPUSH
2058: LD_VAR 0 5
2062: PPUSH
2063: CALL_OW 292
2067: IFFALSE 2133
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
2069: LD_ADDR_VAR 0 8
2073: PUSH
2074: LD_INT 22
2076: PUSH
2077: LD_VAR 0 6
2081: PUSH
2082: EMPTY
2083: LIST
2084: LIST
2085: PPUSH
2086: CALL_OW 69
2090: PPUSH
2091: LD_VAR 0 5
2095: PPUSH
2096: CALL_OW 74
2100: ST_TO_ADDR
// if tmp2 in exceptUnits then
2101: LD_VAR 0 8
2105: PUSH
2106: LD_VAR 0 3
2110: IN
2111: IFFALSE 2117
// continue else
2113: GO 2050
2115: GO 2133
// begin result := tmp2 ;
2117: LD_ADDR_VAR 0 4
2121: PUSH
2122: LD_VAR 0 8
2126: ST_TO_ADDR
// exit ;
2127: POP
2128: POP
2129: POP
2130: POP
2131: GO 2141
// end ; end ;
2133: GO 2050
2135: POP
2136: POP
2137: GO 2037
2139: POP
2140: POP
// end ; end_of_file
2141: LD_VAR 0 4
2145: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
2146: LD_INT 0
2148: PPUSH
2149: PPUSH
// uc_side := 5 ;
2150: LD_ADDR_OWVAR 20
2154: PUSH
2155: LD_INT 5
2157: ST_TO_ADDR
// uc_nation := 2 ;
2158: LD_ADDR_OWVAR 21
2162: PUSH
2163: LD_INT 2
2165: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2166: LD_ADDR_EXP 36
2170: PUSH
2171: LD_STRING Abdul
2173: PPUSH
2174: LD_INT 0
2176: PPUSH
2177: LD_STRING 
2179: PPUSH
2180: CALL 282 0 3
2184: ST_TO_ADDR
// uc_side := 2 ;
2185: LD_ADDR_OWVAR 20
2189: PUSH
2190: LD_INT 2
2192: ST_TO_ADDR
// uc_nation := 2 ;
2193: LD_ADDR_OWVAR 21
2197: PUSH
2198: LD_INT 2
2200: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
2201: LD_ADDR_EXP 25
2205: PUSH
2206: LD_STRING Heike
2208: PPUSH
2209: LD_EXP 1
2213: NOT
2214: PPUSH
2215: LD_EXP 2
2219: PPUSH
2220: CALL 282 0 3
2224: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
2225: LD_ADDR_EXP 28
2229: PUSH
2230: LD_STRING Ibrahim
2232: PPUSH
2233: LD_EXP 1
2237: NOT
2238: PPUSH
2239: LD_EXP 2
2243: PPUSH
2244: CALL 282 0 3
2248: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
2249: LD_ADDR_EXP 26
2253: PUSH
2254: LD_STRING Givi
2256: PPUSH
2257: LD_EXP 1
2261: NOT
2262: PPUSH
2263: LD_EXP 2
2267: PPUSH
2268: CALL 282 0 3
2272: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
2273: LD_ADDR_EXP 29
2277: PUSH
2278: LD_STRING Kamil
2280: PPUSH
2281: LD_EXP 1
2285: NOT
2286: PPUSH
2287: LD_EXP 2
2291: PPUSH
2292: CALL 282 0 3
2296: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
2297: LD_ADDR_EXP 30
2301: PUSH
2302: LD_STRING Kaia
2304: PPUSH
2305: LD_EXP 1
2309: NOT
2310: PPUSH
2311: LD_EXP 2
2315: PPUSH
2316: CALL 282 0 3
2320: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
2321: LD_ADDR_EXP 31
2325: PUSH
2326: LD_STRING Sophia
2328: PPUSH
2329: LD_EXP 1
2333: NOT
2334: PPUSH
2335: LD_EXP 2
2339: PPUSH
2340: CALL 282 0 3
2344: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2345: LD_ADDR_EXP 32
2349: PUSH
2350: LD_STRING Markov
2352: PPUSH
2353: LD_EXP 1
2357: NOT
2358: PPUSH
2359: LD_EXP 2
2363: PPUSH
2364: CALL 282 0 3
2368: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2369: LD_ADDR_EXP 35
2373: PUSH
2374: LD_STRING Aviradze
2376: PPUSH
2377: LD_EXP 1
2381: NOT
2382: PPUSH
2383: LD_EXP 2
2387: PPUSH
2388: CALL 282 0 3
2392: ST_TO_ADDR
// aviradzeSquad := [ ] ;
2393: LD_ADDR_EXP 39
2397: PUSH
2398: EMPTY
2399: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
2400: LD_ADDR_EXP 37
2404: PUSH
2405: LD_STRING 03_others
2407: PPUSH
2408: CALL_OW 31
2412: ST_TO_ADDR
// uc_side := 5 ;
2413: LD_ADDR_OWVAR 20
2417: PUSH
2418: LD_INT 5
2420: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
2421: LD_ADDR_EXP 34
2425: PUSH
2426: LD_STRING Kurt
2428: PPUSH
2429: LD_INT 0
2431: PPUSH
2432: LD_STRING 
2434: PPUSH
2435: CALL 282 0 3
2439: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2440: LD_ADDR_EXP 27
2444: PUSH
2445: LD_STRING Mike
2447: PPUSH
2448: LD_EXP 1
2452: NOT
2453: PPUSH
2454: LD_EXP 2
2458: PPUSH
2459: CALL 282 0 3
2463: ST_TO_ADDR
// if Mike then
2464: LD_EXP 27
2468: IFFALSE 2491
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
2470: LD_EXP 27
2474: PPUSH
2475: LD_INT 142
2477: PPUSH
2478: LD_INT 63
2480: PPUSH
2481: LD_INT 2
2483: PPUSH
2484: LD_INT 0
2486: PPUSH
2487: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
2491: LD_EXP 34
2495: PPUSH
2496: LD_INT 142
2498: PPUSH
2499: LD_INT 63
2501: PPUSH
2502: LD_INT 3
2504: PPUSH
2505: LD_INT 0
2507: PPUSH
2508: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
2512: LD_EXP 34
2516: PUSH
2517: LD_EXP 27
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: PPUSH
2526: CALL_OW 140
// end ;
2530: LD_VAR 0 1
2534: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
2535: LD_INT 0
2537: PPUSH
2538: PPUSH
2539: PPUSH
2540: PPUSH
// uc_side := 5 ;
2541: LD_ADDR_OWVAR 20
2545: PUSH
2546: LD_INT 5
2548: ST_TO_ADDR
// uc_nation := 2 ;
2549: LD_ADDR_OWVAR 21
2553: PUSH
2554: LD_INT 2
2556: ST_TO_ADDR
// InitHc ;
2557: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
2561: LD_ADDR_EXP 33
2565: PUSH
2566: LD_STRING Omar
2568: PPUSH
2569: LD_INT 0
2571: PPUSH
2572: LD_STRING 
2574: PPUSH
2575: CALL 282 0 3
2579: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
2580: LD_EXP 33
2584: PPUSH
2585: LD_INT 284
2587: PPUSH
2588: LD_INT 163
2590: PPUSH
2591: LD_INT 0
2593: PPUSH
2594: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
2598: LD_EXP 33
2602: PPUSH
2603: LD_INT 256
2605: PPUSH
2606: LD_INT 129
2608: PPUSH
2609: CALL_OW 111
// wait ( 0 0$2 ) ;
2613: LD_INT 70
2615: PPUSH
2616: CALL_OW 67
// omarSquad := [ ] ;
2620: LD_ADDR_EXP 38
2624: PUSH
2625: EMPTY
2626: ST_TO_ADDR
// for i := 1 to 5 do
2627: LD_ADDR_VAR 0 2
2631: PUSH
2632: DOUBLE
2633: LD_INT 1
2635: DEC
2636: ST_TO_ADDR
2637: LD_INT 5
2639: PUSH
2640: FOR_TO
2641: IFFALSE 2847
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
2643: LD_INT 5
2645: PPUSH
2646: LD_INT 2
2648: PPUSH
2649: LD_INT 13
2651: PUSH
2652: LD_INT 14
2654: PUSH
2655: EMPTY
2656: LIST
2657: LIST
2658: PUSH
2659: LD_VAR 0 2
2663: PUSH
2664: LD_INT 2
2666: MOD
2667: PUSH
2668: LD_INT 1
2670: PLUS
2671: ARRAY
2672: PPUSH
2673: LD_INT 1
2675: PPUSH
2676: LD_INT 1
2678: PPUSH
2679: LD_INT 25
2681: PUSH
2682: LD_INT 27
2684: PUSH
2685: LD_INT 26
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: LIST
2692: PUSH
2693: LD_VAR 0 2
2697: PUSH
2698: LD_INT 3
2700: MOD
2701: PUSH
2702: LD_INT 1
2704: PLUS
2705: ARRAY
2706: PPUSH
2707: LD_INT 100
2709: PPUSH
2710: CALL 345 0 7
// veh := CreateVehicle ;
2714: LD_ADDR_VAR 0 4
2718: PUSH
2719: CALL_OW 45
2723: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2724: LD_VAR 0 4
2728: PPUSH
2729: LD_INT 5
2731: PPUSH
2732: CALL_OW 233
// omarSquad := omarSquad union veh ;
2736: LD_ADDR_EXP 38
2740: PUSH
2741: LD_EXP 38
2745: PUSH
2746: LD_VAR 0 4
2750: UNION
2751: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
2752: LD_VAR 0 4
2756: PPUSH
2757: LD_INT 284
2759: PPUSH
2760: LD_INT 163
2762: PPUSH
2763: LD_INT 0
2765: PPUSH
2766: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
2770: LD_INT 0
2772: PPUSH
2773: LD_INT 3
2775: PPUSH
2776: LD_INT 2
2778: PPUSH
2779: CALL_OW 380
// un := CreateHuman ;
2783: LD_ADDR_VAR 0 3
2787: PUSH
2788: CALL_OW 44
2792: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2793: LD_ADDR_EXP 38
2797: PUSH
2798: LD_EXP 38
2802: PUSH
2803: LD_VAR 0 3
2807: UNION
2808: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2809: LD_VAR 0 3
2813: PPUSH
2814: LD_VAR 0 4
2818: PPUSH
2819: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
2823: LD_VAR 0 3
2827: PPUSH
2828: LD_INT 271
2830: PPUSH
2831: LD_INT 144
2833: PPUSH
2834: CALL_OW 111
// wait ( 0 0$2 ) ;
2838: LD_INT 70
2840: PPUSH
2841: CALL_OW 67
// end ;
2845: GO 2640
2847: POP
2848: POP
// for i := 1 to 3 do
2849: LD_ADDR_VAR 0 2
2853: PUSH
2854: DOUBLE
2855: LD_INT 1
2857: DEC
2858: ST_TO_ADDR
2859: LD_INT 3
2861: PUSH
2862: FOR_TO
2863: IFFALSE 2946
// begin PrepareHuman ( false , 1 , 2 ) ;
2865: LD_INT 0
2867: PPUSH
2868: LD_INT 1
2870: PPUSH
2871: LD_INT 2
2873: PPUSH
2874: CALL_OW 380
// un := CreateHuman ;
2878: LD_ADDR_VAR 0 3
2882: PUSH
2883: CALL_OW 44
2887: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2888: LD_ADDR_EXP 38
2892: PUSH
2893: LD_EXP 38
2897: PUSH
2898: LD_VAR 0 3
2902: UNION
2903: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
2904: LD_VAR 0 3
2908: PPUSH
2909: LD_INT 284
2911: PPUSH
2912: LD_INT 163
2914: PPUSH
2915: LD_INT 0
2917: PPUSH
2918: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
2922: LD_VAR 0 3
2926: PPUSH
2927: LD_INT 257
2929: PPUSH
2930: LD_INT 138
2932: PPUSH
2933: CALL_OW 111
// wait ( 0 0$1 ) ;
2937: LD_INT 35
2939: PPUSH
2940: CALL_OW 67
// end ;
2944: GO 2862
2946: POP
2947: POP
// for i := 1 to 6 do
2948: LD_ADDR_VAR 0 2
2952: PUSH
2953: DOUBLE
2954: LD_INT 1
2956: DEC
2957: ST_TO_ADDR
2958: LD_INT 6
2960: PUSH
2961: FOR_TO
2962: IFFALSE 3095
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2964: LD_INT 0
2966: PPUSH
2967: LD_INT 1
2969: PUSH
2970: LD_INT 1
2972: PUSH
2973: LD_INT 4
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: PUSH
2981: LD_VAR 0 2
2985: PUSH
2986: LD_INT 3
2988: MOD
2989: PUSH
2990: LD_INT 1
2992: PLUS
2993: ARRAY
2994: PPUSH
2995: LD_INT 3
2997: PPUSH
2998: CALL_OW 380
// un := CreateHuman ;
3002: LD_ADDR_VAR 0 3
3006: PUSH
3007: CALL_OW 44
3011: ST_TO_ADDR
// omarSquad := omarSquad union un ;
3012: LD_ADDR_EXP 38
3016: PUSH
3017: LD_EXP 38
3021: PUSH
3022: LD_VAR 0 3
3026: UNION
3027: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
3028: LD_VAR 0 3
3032: PPUSH
3033: LD_INT 225
3035: PPUSH
3036: LD_INT 163
3038: PPUSH
3039: LD_INT 0
3041: PPUSH
3042: CALL_OW 48
// if i = 1 then
3046: LD_VAR 0 2
3050: PUSH
3051: LD_INT 1
3053: EQUAL
3054: IFFALSE 3071
// SetAttr ( un , attr_speed , 12 ) ;
3056: LD_VAR 0 3
3060: PPUSH
3061: LD_INT 2
3063: PPUSH
3064: LD_INT 12
3066: PPUSH
3067: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
3071: LD_VAR 0 3
3075: PPUSH
3076: LD_INT 222
3078: PPUSH
3079: LD_INT 157
3081: PPUSH
3082: CALL_OW 111
// wait ( 0 0$1 ) ;
3086: LD_INT 35
3088: PPUSH
3089: CALL_OW 67
// end ;
3093: GO 2961
3095: POP
3096: POP
// end ; end_of_file
3097: LD_VAR 0 1
3101: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
3102: LD_INT 0
3104: PPUSH
3105: PPUSH
3106: PPUSH
3107: PPUSH
3108: PPUSH
3109: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
3110: LD_INT 3
3112: PPUSH
3113: LD_INT 149
3115: PPUSH
3116: LD_INT 67
3118: PPUSH
3119: CALL_OW 428
3123: PPUSH
3124: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
3128: LD_ADDR_EXP 50
3132: PUSH
3133: LD_INT 111
3135: PPUSH
3136: LD_INT 89
3138: PPUSH
3139: CALL_OW 428
3143: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
3144: LD_ADDR_VAR 0 2
3148: PUSH
3149: LD_INT 21
3151: PUSH
3152: LD_INT 3
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: PUSH
3159: LD_INT 23
3161: PUSH
3162: LD_INT 3
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: PUSH
3169: EMPTY
3170: LIST
3171: LIST
3172: PPUSH
3173: CALL_OW 69
3177: PUSH
3178: FOR_IN
3179: IFFALSE 3195
// SetBLevel ( i , 5 ) ;
3181: LD_VAR 0 2
3185: PPUSH
3186: LD_INT 5
3188: PPUSH
3189: CALL_OW 241
3193: GO 3178
3195: POP
3196: POP
// SetBName ( kirov , kirov ) ;
3197: LD_INT 71
3199: PPUSH
3200: LD_STRING kirov
3202: PPUSH
3203: CALL_OW 500
// SetBName ( beria , beria ) ;
3207: LD_INT 106
3209: PPUSH
3210: LD_STRING beria
3212: PPUSH
3213: CALL_OW 500
// SetBName ( kagan , kagan ) ;
3217: LD_INT 112
3219: PPUSH
3220: LD_STRING kagan
3222: PPUSH
3223: CALL_OW 500
// uc_side := 6 ;
3227: LD_ADDR_OWVAR 20
3231: PUSH
3232: LD_INT 6
3234: ST_TO_ADDR
// uc_nation := 3 ;
3235: LD_ADDR_OWVAR 21
3239: PUSH
3240: LD_INT 3
3242: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
3243: LD_ADDR_VAR 0 5
3247: PUSH
3248: LD_INT 22
3250: PUSH
3251: LD_INT 6
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: PUSH
3258: LD_INT 30
3260: PUSH
3261: LD_INT 5
3263: PUSH
3264: EMPTY
3265: LIST
3266: LIST
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PPUSH
3272: CALL_OW 69
3276: PUSH
3277: LD_INT 1
3279: ARRAY
3280: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
3281: LD_ADDR_VAR 0 4
3285: PUSH
3286: LD_INT 22
3288: PUSH
3289: LD_INT 6
3291: PUSH
3292: EMPTY
3293: LIST
3294: LIST
3295: PUSH
3296: LD_INT 30
3298: PUSH
3299: LD_INT 4
3301: PUSH
3302: EMPTY
3303: LIST
3304: LIST
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: PPUSH
3310: CALL_OW 69
3314: PUSH
3315: LD_INT 1
3317: ARRAY
3318: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
3319: LD_ADDR_EXP 44
3323: PUSH
3324: EMPTY
3325: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
3326: LD_ADDR_EXP 45
3330: PUSH
3331: EMPTY
3332: ST_TO_ADDR
// russianPatrol := [ ] ;
3333: LD_ADDR_EXP 47
3337: PUSH
3338: EMPTY
3339: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
3340: LD_ADDR_EXP 40
3344: PUSH
3345: LD_STRING Kurin
3347: PPUSH
3348: LD_INT 0
3350: PPUSH
3351: LD_STRING 
3353: PPUSH
3354: CALL 282 0 3
3358: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
3359: LD_EXP 40
3363: PPUSH
3364: LD_INT 71
3366: PPUSH
3367: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
3371: LD_ADDR_EXP 42
3375: PUSH
3376: LD_STRING Popov
3378: PPUSH
3379: LD_INT 0
3381: PPUSH
3382: LD_STRING 
3384: PPUSH
3385: CALL 282 0 3
3389: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
3390: LD_EXP 42
3394: PPUSH
3395: LD_INT 71
3397: PPUSH
3398: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
3402: LD_ADDR_EXP 41
3406: PUSH
3407: LD_STRING Grishko
3409: PPUSH
3410: LD_INT 0
3412: PPUSH
3413: LD_STRING 
3415: PPUSH
3416: CALL 282 0 3
3420: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
3421: LD_EXP 41
3425: PPUSH
3426: LD_INT 207
3428: PPUSH
3429: LD_INT 106
3431: PPUSH
3432: LD_INT 0
3434: PPUSH
3435: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
3439: LD_EXP 41
3443: PPUSH
3444: LD_INT 209
3446: PPUSH
3447: LD_INT 106
3449: PPUSH
3450: CALL_OW 118
// for i := 1 to 2 do
3454: LD_ADDR_VAR 0 2
3458: PUSH
3459: DOUBLE
3460: LD_INT 1
3462: DEC
3463: ST_TO_ADDR
3464: LD_INT 2
3466: PUSH
3467: FOR_TO
3468: IFFALSE 3523
// begin PrepareHuman ( false , 2 , 2 ) ;
3470: LD_INT 0
3472: PPUSH
3473: LD_INT 2
3475: PPUSH
3476: LD_INT 2
3478: PPUSH
3479: CALL_OW 380
// un := CreateHuman ;
3483: LD_ADDR_VAR 0 3
3487: PUSH
3488: CALL_OW 44
3492: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
3493: LD_VAR 0 3
3497: PPUSH
3498: LD_INT 71
3500: PPUSH
3501: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3505: LD_ADDR_EXP 44
3509: PUSH
3510: LD_EXP 44
3514: PUSH
3515: LD_VAR 0 3
3519: UNION
3520: ST_TO_ADDR
// end ;
3521: GO 3467
3523: POP
3524: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
3525: LD_ADDR_VAR 0 2
3529: PUSH
3530: DOUBLE
3531: LD_INT 1
3533: DEC
3534: ST_TO_ADDR
3535: LD_INT 5
3537: PUSH
3538: LD_INT 6
3540: PUSH
3541: LD_INT 6
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: LIST
3548: PUSH
3549: LD_OWVAR 67
3553: ARRAY
3554: PUSH
3555: FOR_TO
3556: IFFALSE 3630
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3558: LD_INT 0
3560: PPUSH
3561: LD_INT 1
3563: PPUSH
3564: LD_INT 2
3566: PUSH
3567: LD_INT 3
3569: PUSH
3570: LD_INT 4
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: LIST
3577: PUSH
3578: LD_OWVAR 67
3582: ARRAY
3583: PPUSH
3584: CALL_OW 380
// un := CreateHuman ;
3588: LD_ADDR_VAR 0 3
3592: PUSH
3593: CALL_OW 44
3597: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
3598: LD_VAR 0 3
3602: PPUSH
3603: LD_VAR 0 5
3607: PPUSH
3608: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3612: LD_ADDR_EXP 44
3616: PUSH
3617: LD_EXP 44
3621: PUSH
3622: LD_VAR 0 3
3626: UNION
3627: ST_TO_ADDR
// end ;
3628: GO 3555
3630: POP
3631: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
3632: LD_ADDR_VAR 0 2
3636: PUSH
3637: LD_INT 22
3639: PUSH
3640: LD_INT 6
3642: PUSH
3643: EMPTY
3644: LIST
3645: LIST
3646: PUSH
3647: LD_INT 30
3649: PUSH
3650: LD_INT 32
3652: PUSH
3653: EMPTY
3654: LIST
3655: LIST
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: PPUSH
3661: CALL_OW 69
3665: PUSH
3666: FOR_IN
3667: IFFALSE 3741
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 ] [ Difficulty ] ) ;
3669: LD_INT 0
3671: PPUSH
3672: LD_INT 1
3674: PPUSH
3675: LD_INT 3
3677: PUSH
3678: LD_INT 4
3680: PUSH
3681: LD_INT 4
3683: PUSH
3684: EMPTY
3685: LIST
3686: LIST
3687: LIST
3688: PUSH
3689: LD_OWVAR 67
3693: ARRAY
3694: PPUSH
3695: CALL_OW 380
// un := CreateHuman ;
3699: LD_ADDR_VAR 0 3
3703: PUSH
3704: CALL_OW 44
3708: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
3709: LD_VAR 0 3
3713: PPUSH
3714: LD_VAR 0 2
3718: PPUSH
3719: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3723: LD_ADDR_EXP 44
3727: PUSH
3728: LD_EXP 44
3732: PUSH
3733: LD_VAR 0 3
3737: UNION
3738: ST_TO_ADDR
// end ;
3739: GO 3666
3741: POP
3742: POP
// for i := 1 to 3 do
3743: LD_ADDR_VAR 0 2
3747: PUSH
3748: DOUBLE
3749: LD_INT 1
3751: DEC
3752: ST_TO_ADDR
3753: LD_INT 3
3755: PUSH
3756: FOR_TO
3757: IFFALSE 3812
// begin PrepareHuman ( false , 3 , 3 ) ;
3759: LD_INT 0
3761: PPUSH
3762: LD_INT 3
3764: PPUSH
3765: LD_INT 3
3767: PPUSH
3768: CALL_OW 380
// un := CreateHuman ;
3772: LD_ADDR_VAR 0 3
3776: PUSH
3777: CALL_OW 44
3781: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
3782: LD_VAR 0 3
3786: PPUSH
3787: LD_INT 92
3789: PPUSH
3790: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3794: LD_ADDR_EXP 44
3798: PUSH
3799: LD_EXP 44
3803: PUSH
3804: LD_VAR 0 3
3808: UNION
3809: ST_TO_ADDR
// end ;
3810: GO 3756
3812: POP
3813: POP
// for i := 1 to 2 do
3814: LD_ADDR_VAR 0 2
3818: PUSH
3819: DOUBLE
3820: LD_INT 1
3822: DEC
3823: ST_TO_ADDR
3824: LD_INT 2
3826: PUSH
3827: FOR_TO
3828: IFFALSE 3883
// begin PrepareHuman ( false , 4 , 3 ) ;
3830: LD_INT 0
3832: PPUSH
3833: LD_INT 4
3835: PPUSH
3836: LD_INT 3
3838: PPUSH
3839: CALL_OW 380
// un := CreateHuman ;
3843: LD_ADDR_VAR 0 3
3847: PUSH
3848: CALL_OW 44
3852: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
3853: LD_VAR 0 3
3857: PPUSH
3858: LD_INT 83
3860: PPUSH
3861: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3865: LD_ADDR_EXP 44
3869: PUSH
3870: LD_EXP 44
3874: PUSH
3875: LD_VAR 0 3
3879: UNION
3880: ST_TO_ADDR
// end ;
3881: GO 3827
3883: POP
3884: POP
// for i := 1 to 5 do
3885: LD_ADDR_VAR 0 2
3889: PUSH
3890: DOUBLE
3891: LD_INT 1
3893: DEC
3894: ST_TO_ADDR
3895: LD_INT 5
3897: PUSH
3898: FOR_TO
3899: IFFALSE 3956
// begin PrepareHuman ( false , 1 , 3 ) ;
3901: LD_INT 0
3903: PPUSH
3904: LD_INT 1
3906: PPUSH
3907: LD_INT 3
3909: PPUSH
3910: CALL_OW 380
// un := CreateHuman ;
3914: LD_ADDR_VAR 0 3
3918: PUSH
3919: CALL_OW 44
3923: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3924: LD_VAR 0 3
3928: PPUSH
3929: LD_VAR 0 4
3933: PPUSH
3934: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3938: LD_ADDR_EXP 46
3942: PUSH
3943: LD_EXP 46
3947: PUSH
3948: LD_VAR 0 3
3952: UNION
3953: ST_TO_ADDR
// end ;
3954: GO 3898
3956: POP
3957: POP
// russianCargo := [ ] ;
3958: LD_ADDR_EXP 49
3962: PUSH
3963: EMPTY
3964: ST_TO_ADDR
// for i := 1 to 2 do
3965: LD_ADDR_VAR 0 2
3969: PUSH
3970: DOUBLE
3971: LD_INT 1
3973: DEC
3974: ST_TO_ADDR
3975: LD_INT 2
3977: PUSH
3978: FOR_TO
3979: IFFALSE 4111
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3981: LD_INT 6
3983: PPUSH
3984: LD_INT 3
3986: PPUSH
3987: LD_INT 21
3989: PPUSH
3990: LD_INT 1
3992: PPUSH
3993: LD_INT 1
3995: PPUSH
3996: LD_INT 51
3998: PPUSH
3999: LD_INT 100
4001: PPUSH
4002: CALL 345 0 7
// un := CreateVehicle ;
4006: LD_ADDR_VAR 0 3
4010: PUSH
4011: CALL_OW 45
4015: ST_TO_ADDR
// russianCargo := russianCargo union un ;
4016: LD_ADDR_EXP 49
4020: PUSH
4021: LD_EXP 49
4025: PUSH
4026: LD_VAR 0 3
4030: UNION
4031: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
4032: LD_VAR 0 3
4036: PPUSH
4037: LD_INT 2
4039: PPUSH
4040: LD_INT 100
4042: PPUSH
4043: CALL_OW 290
// SetDir ( un , 4 ) ;
4047: LD_VAR 0 3
4051: PPUSH
4052: LD_INT 4
4054: PPUSH
4055: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
4059: LD_VAR 0 3
4063: PPUSH
4064: LD_INT 147
4066: PPUSH
4067: LD_INT 103
4069: PPUSH
4070: LD_INT 4
4072: PPUSH
4073: LD_INT 0
4075: PPUSH
4076: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
4080: LD_INT 0
4082: PPUSH
4083: LD_INT 1
4085: PPUSH
4086: LD_OWVAR 67
4090: PPUSH
4091: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
4095: CALL_OW 44
4099: PPUSH
4100: LD_VAR 0 3
4104: PPUSH
4105: CALL_OW 52
// end ;
4109: GO 3978
4111: POP
4112: POP
// uc_side := 3 ;
4113: LD_ADDR_OWVAR 20
4117: PUSH
4118: LD_INT 3
4120: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
4121: LD_ADDR_EXP 43
4125: PUSH
4126: LD_STRING Burlak
4128: PPUSH
4129: LD_INT 0
4131: PPUSH
4132: LD_STRING 
4134: PPUSH
4135: CALL 282 0 3
4139: ST_TO_ADDR
// for i := 1 to 5 do
4140: LD_ADDR_VAR 0 2
4144: PUSH
4145: DOUBLE
4146: LD_INT 1
4148: DEC
4149: ST_TO_ADDR
4150: LD_INT 5
4152: PUSH
4153: FOR_TO
4154: IFFALSE 4247
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
4156: LD_INT 0
4158: PPUSH
4159: LD_INT 1
4161: PPUSH
4162: LD_OWVAR 67
4166: PUSH
4167: LD_INT 1
4169: PLUS
4170: PPUSH
4171: CALL_OW 380
// un := CreateHuman ;
4175: LD_ADDR_VAR 0 3
4179: PUSH
4180: CALL_OW 44
4184: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
4185: LD_VAR 0 3
4189: PPUSH
4190: LD_INT 22
4192: PUSH
4193: LD_INT 3
4195: PUSH
4196: EMPTY
4197: LIST
4198: LIST
4199: PUSH
4200: LD_INT 30
4202: PUSH
4203: LD_INT 32
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PPUSH
4214: CALL_OW 69
4218: PUSH
4219: LD_VAR 0 2
4223: ARRAY
4224: PPUSH
4225: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4229: LD_ADDR_EXP 45
4233: PUSH
4234: LD_EXP 45
4238: PUSH
4239: LD_VAR 0 3
4243: UNION
4244: ST_TO_ADDR
// end ;
4245: GO 4153
4247: POP
4248: POP
// for i := 1 to 2 do
4249: LD_ADDR_VAR 0 2
4253: PUSH
4254: DOUBLE
4255: LD_INT 1
4257: DEC
4258: ST_TO_ADDR
4259: LD_INT 2
4261: PUSH
4262: FOR_TO
4263: IFFALSE 4354
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
4265: LD_INT 0
4267: PPUSH
4268: LD_INT 1
4270: PPUSH
4271: LD_OWVAR 67
4275: PUSH
4276: LD_INT 1
4278: PLUS
4279: PPUSH
4280: CALL_OW 380
// un := CreateHuman ;
4284: LD_ADDR_VAR 0 3
4288: PUSH
4289: CALL_OW 44
4293: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
4294: LD_VAR 0 3
4298: PPUSH
4299: LD_INT 22
4301: PUSH
4302: LD_INT 3
4304: PUSH
4305: EMPTY
4306: LIST
4307: LIST
4308: PUSH
4309: LD_INT 30
4311: PUSH
4312: LD_INT 5
4314: PUSH
4315: EMPTY
4316: LIST
4317: LIST
4318: PUSH
4319: EMPTY
4320: LIST
4321: LIST
4322: PPUSH
4323: CALL_OW 69
4327: PUSH
4328: LD_INT 1
4330: ARRAY
4331: PPUSH
4332: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4336: LD_ADDR_EXP 45
4340: PUSH
4341: LD_EXP 45
4345: PUSH
4346: LD_VAR 0 3
4350: UNION
4351: ST_TO_ADDR
// end ;
4352: GO 4262
4354: POP
4355: POP
// for i := 1 to 2 do
4356: LD_ADDR_VAR 0 2
4360: PUSH
4361: DOUBLE
4362: LD_INT 1
4364: DEC
4365: ST_TO_ADDR
4366: LD_INT 2
4368: PUSH
4369: FOR_TO
4370: IFFALSE 4457
// begin PrepareHuman ( false , 4 , Difficulty ) ;
4372: LD_INT 0
4374: PPUSH
4375: LD_INT 4
4377: PPUSH
4378: LD_OWVAR 67
4382: PPUSH
4383: CALL_OW 380
// un := CreateHuman ;
4387: LD_ADDR_VAR 0 3
4391: PUSH
4392: CALL_OW 44
4396: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
4397: LD_VAR 0 3
4401: PPUSH
4402: LD_INT 22
4404: PUSH
4405: LD_INT 3
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: PUSH
4412: LD_INT 30
4414: PUSH
4415: LD_INT 7
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PPUSH
4426: CALL_OW 69
4430: PUSH
4431: LD_INT 1
4433: ARRAY
4434: PPUSH
4435: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4439: LD_ADDR_EXP 45
4443: PUSH
4444: LD_EXP 45
4448: PUSH
4449: LD_VAR 0 3
4453: UNION
4454: ST_TO_ADDR
// end ;
4455: GO 4369
4457: POP
4458: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
4459: LD_INT 0
4461: PPUSH
4462: LD_INT 2
4464: PPUSH
4465: LD_OWVAR 67
4469: PPUSH
4470: CALL_OW 380
// un := CreateHuman ;
4474: LD_ADDR_VAR 0 3
4478: PUSH
4479: CALL_OW 44
4483: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
4484: LD_VAR 0 3
4488: PPUSH
4489: LD_INT 106
4491: PPUSH
4492: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4496: LD_ADDR_EXP 45
4500: PUSH
4501: LD_EXP 45
4505: PUSH
4506: LD_VAR 0 3
4510: UNION
4511: ST_TO_ADDR
// for i := 1 to 3 do
4512: LD_ADDR_VAR 0 2
4516: PUSH
4517: DOUBLE
4518: LD_INT 1
4520: DEC
4521: ST_TO_ADDR
4522: LD_INT 3
4524: PUSH
4525: FOR_TO
4526: IFFALSE 4648
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
4528: LD_ADDR_VAR 0 6
4532: PUSH
4533: LD_INT 22
4535: PUSH
4536: LD_INT 3
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: PUSH
4543: LD_INT 30
4545: PUSH
4546: LD_INT 31
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: PPUSH
4557: CALL_OW 69
4561: PUSH
4562: LD_VAR 0 2
4566: ARRAY
4567: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
4568: LD_INT 0
4570: PPUSH
4571: LD_INT 1
4573: PPUSH
4574: LD_OWVAR 67
4578: PPUSH
4579: CALL_OW 380
// un := CreateHuman ;
4583: LD_ADDR_VAR 0 3
4587: PUSH
4588: CALL_OW 44
4592: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
4593: LD_VAR 0 3
4597: PPUSH
4598: LD_VAR 0 6
4602: PPUSH
4603: CALL_OW 254
4607: PUSH
4608: LD_INT 3
4610: PLUS
4611: PPUSH
4612: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
4616: LD_VAR 0 3
4620: PPUSH
4621: LD_VAR 0 6
4625: PPUSH
4626: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4630: LD_ADDR_EXP 45
4634: PUSH
4635: LD_EXP 45
4639: PUSH
4640: LD_VAR 0 3
4644: UNION
4645: ST_TO_ADDR
// end ;
4646: GO 4525
4648: POP
4649: POP
// russianOmicronAttackers := [ ] ;
4650: LD_ADDR_EXP 48
4654: PUSH
4655: EMPTY
4656: ST_TO_ADDR
// for i := 1 to 6 do
4657: LD_ADDR_VAR 0 2
4661: PUSH
4662: DOUBLE
4663: LD_INT 1
4665: DEC
4666: ST_TO_ADDR
4667: LD_INT 6
4669: PUSH
4670: FOR_TO
4671: IFFALSE 4895
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
4673: LD_INT 3
4675: PPUSH
4676: LD_INT 3
4678: PPUSH
4679: LD_INT 21
4681: PUSH
4682: LD_INT 23
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PUSH
4689: LD_VAR 0 2
4693: PUSH
4694: LD_INT 2
4696: MOD
4697: PUSH
4698: LD_INT 1
4700: PLUS
4701: ARRAY
4702: PPUSH
4703: LD_INT 1
4705: PPUSH
4706: LD_INT 1
4708: PPUSH
4709: LD_INT 43
4711: PUSH
4712: LD_INT 44
4714: PUSH
4715: LD_INT 42
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: LIST
4722: PUSH
4723: LD_VAR 0 2
4727: PUSH
4728: LD_INT 3
4730: MOD
4731: PUSH
4732: LD_INT 1
4734: PLUS
4735: ARRAY
4736: PPUSH
4737: LD_INT 100
4739: PPUSH
4740: CALL 345 0 7
// un := CreateVehicle ;
4744: LD_ADDR_VAR 0 3
4748: PUSH
4749: CALL_OW 45
4753: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
4754: LD_VAR 0 3
4758: PPUSH
4759: LD_INT 0
4761: PUSH
4762: LD_INT 5
4764: PUSH
4765: EMPTY
4766: LIST
4767: LIST
4768: PUSH
4769: LD_INT 1
4771: PPUSH
4772: LD_INT 2
4774: PPUSH
4775: CALL_OW 12
4779: ARRAY
4780: PPUSH
4781: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
4785: LD_ADDR_EXP 48
4789: PUSH
4790: LD_EXP 48
4794: PUSH
4795: LD_VAR 0 3
4799: UNION
4800: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
4801: LD_VAR 0 3
4805: PPUSH
4806: LD_INT 127
4808: PPUSH
4809: LD_INT 89
4811: PPUSH
4812: LD_INT 7
4814: PPUSH
4815: LD_INT 0
4817: PPUSH
4818: CALL_OW 50
// uc_side := 3 ;
4822: LD_ADDR_OWVAR 20
4826: PUSH
4827: LD_INT 3
4829: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4830: LD_INT 0
4832: PPUSH
4833: LD_INT 3
4835: PPUSH
4836: LD_INT 3
4838: PPUSH
4839: CALL_OW 380
// un := CreateHuman ;
4843: LD_ADDR_VAR 0 3
4847: PUSH
4848: CALL_OW 44
4852: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4853: LD_ADDR_EXP 48
4857: PUSH
4858: LD_EXP 48
4862: PUSH
4863: LD_VAR 0 3
4867: UNION
4868: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4869: LD_VAR 0 3
4873: PPUSH
4874: LD_EXP 48
4878: PUSH
4879: LD_EXP 48
4883: PUSH
4884: LD_INT 1
4886: MINUS
4887: ARRAY
4888: PPUSH
4889: CALL_OW 52
// end ;
4893: GO 4670
4895: POP
4896: POP
// for i := 1 to 3 do
4897: LD_ADDR_VAR 0 2
4901: PUSH
4902: DOUBLE
4903: LD_INT 1
4905: DEC
4906: ST_TO_ADDR
4907: LD_INT 3
4909: PUSH
4910: FOR_TO
4911: IFFALSE 4977
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4913: LD_INT 0
4915: PPUSH
4916: LD_INT 1
4918: PPUSH
4919: LD_OWVAR 67
4923: PPUSH
4924: CALL_OW 380
// un := CreateHuman ;
4928: LD_ADDR_VAR 0 3
4932: PUSH
4933: CALL_OW 44
4937: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4938: LD_ADDR_EXP 48
4942: PUSH
4943: LD_EXP 48
4947: PUSH
4948: LD_VAR 0 3
4952: UNION
4953: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4954: LD_VAR 0 3
4958: PPUSH
4959: LD_INT 91
4961: PPUSH
4962: LD_INT 60
4964: PPUSH
4965: LD_INT 3
4967: PPUSH
4968: LD_INT 0
4970: PPUSH
4971: CALL_OW 50
// end ;
4975: GO 4910
4977: POP
4978: POP
// end ;
4979: LD_VAR 0 1
4983: RET
// every 0 0$3 do var i ;
4984: GO 4986
4986: DISABLE
4987: LD_INT 0
4989: PPUSH
// begin for i := 1 to 4 do
4990: LD_ADDR_VAR 0 1
4994: PUSH
4995: DOUBLE
4996: LD_INT 1
4998: DEC
4999: ST_TO_ADDR
5000: LD_INT 4
5002: PUSH
5003: FOR_TO
5004: IFFALSE 5023
// ComExitBuilding ( grishkoSquad [ i ] ) ;
5006: LD_EXP 46
5010: PUSH
5011: LD_VAR 0 1
5015: ARRAY
5016: PPUSH
5017: CALL_OW 122
5021: GO 5003
5023: POP
5024: POP
// wait ( 3 ) ;
5025: LD_INT 3
5027: PPUSH
5028: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
5032: LD_EXP 46
5036: PUSH
5037: LD_INT 1
5039: ARRAY
5040: PPUSH
5041: LD_INT 22
5043: PUSH
5044: LD_INT 6
5046: PUSH
5047: EMPTY
5048: LIST
5049: LIST
5050: PUSH
5051: LD_INT 30
5053: PUSH
5054: LD_INT 31
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: EMPTY
5062: LIST
5063: LIST
5064: PPUSH
5065: CALL_OW 69
5069: PPUSH
5070: LD_EXP 46
5074: PUSH
5075: LD_INT 1
5077: ARRAY
5078: PPUSH
5079: CALL_OW 74
5083: PPUSH
5084: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
5088: LD_EXP 46
5092: PUSH
5093: LD_INT 2
5095: ARRAY
5096: PPUSH
5097: LD_INT 211
5099: PPUSH
5100: LD_INT 107
5102: PPUSH
5103: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
5107: LD_EXP 46
5111: PUSH
5112: LD_INT 2
5114: ARRAY
5115: PPUSH
5116: LD_INT 209
5118: PPUSH
5119: LD_INT 106
5121: PPUSH
5122: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
5126: LD_EXP 46
5130: PUSH
5131: LD_INT 3
5133: ARRAY
5134: PPUSH
5135: LD_INT 209
5137: PPUSH
5138: LD_INT 103
5140: PPUSH
5141: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
5145: LD_EXP 46
5149: PUSH
5150: LD_INT 3
5152: ARRAY
5153: PPUSH
5154: LD_INT 209
5156: PPUSH
5157: LD_INT 106
5159: PPUSH
5160: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
5164: LD_EXP 46
5168: PUSH
5169: LD_INT 4
5171: ARRAY
5172: PPUSH
5173: LD_INT 227
5175: PPUSH
5176: LD_INT 117
5178: PPUSH
5179: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
5183: LD_EXP 46
5187: PUSH
5188: LD_INT 4
5190: ARRAY
5191: PPUSH
5192: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
5196: LD_INT 700
5198: PPUSH
5199: CALL_OW 67
// for i := 3 downto 2 do
5203: LD_ADDR_VAR 0 1
5207: PUSH
5208: DOUBLE
5209: LD_INT 3
5211: INC
5212: ST_TO_ADDR
5213: LD_INT 2
5215: PUSH
5216: FOR_DOWNTO
5217: IFFALSE 5384
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
5219: LD_EXP 46
5223: PUSH
5224: LD_VAR 0 1
5228: ARRAY
5229: PPUSH
5230: LD_INT 200
5232: PPUSH
5233: LD_INT 91
5235: PPUSH
5236: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5240: LD_EXP 46
5244: PUSH
5245: LD_VAR 0 1
5249: ARRAY
5250: PPUSH
5251: LD_INT 210
5253: PPUSH
5254: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
5258: LD_EXP 46
5262: PUSH
5263: LD_VAR 0 1
5267: ARRAY
5268: PPUSH
5269: LD_INT 224
5271: PPUSH
5272: LD_INT 93
5274: PPUSH
5275: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5279: LD_EXP 46
5283: PUSH
5284: LD_VAR 0 1
5288: ARRAY
5289: PPUSH
5290: LD_INT 210
5292: PPUSH
5293: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
5297: LD_EXP 46
5301: PUSH
5302: LD_VAR 0 1
5306: ARRAY
5307: PPUSH
5308: LD_INT 239
5310: PPUSH
5311: LD_INT 123
5313: PPUSH
5314: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5318: LD_EXP 46
5322: PUSH
5323: LD_VAR 0 1
5327: ARRAY
5328: PPUSH
5329: LD_INT 210
5331: PPUSH
5332: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
5336: LD_EXP 46
5340: PUSH
5341: LD_VAR 0 1
5345: ARRAY
5346: PPUSH
5347: LD_INT 212
5349: PPUSH
5350: LD_INT 105
5352: PPUSH
5353: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
5357: LD_EXP 46
5361: PUSH
5362: LD_VAR 0 1
5366: ARRAY
5367: PPUSH
5368: LD_INT 700
5370: PPUSH
5371: CALL_OW 202
// wait ( 0 0$30 ) ;
5375: LD_INT 1050
5377: PPUSH
5378: CALL_OW 67
// end ;
5382: GO 5216
5384: POP
5385: POP
// until not activeGrishkoAI ;
5386: LD_EXP 10
5390: NOT
5391: IFFALSE 5196
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
5393: LD_EXP 46
5397: PPUSH
5398: LD_INT 221
5400: PPUSH
5401: LD_INT 110
5403: PPUSH
5404: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
5408: LD_EXP 46
5412: PPUSH
5413: LD_INT 228
5415: PPUSH
5416: LD_INT 115
5418: PPUSH
5419: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
5423: LD_EXP 46
5427: PPUSH
5428: CALL_OW 200
// end ;
5432: PPOPN 1
5434: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
5435: LD_EXP 12
5439: IFFALSE 6181
5441: GO 5443
5443: DISABLE
5444: LD_INT 0
5446: PPUSH
5447: PPUSH
5448: PPUSH
5449: PPUSH
// begin uc_side := 6 ;
5450: LD_ADDR_OWVAR 20
5454: PUSH
5455: LD_INT 6
5457: ST_TO_ADDR
// uc_nation := 3 ;
5458: LD_ADDR_OWVAR 21
5462: PUSH
5463: LD_INT 3
5465: ST_TO_ADDR
// for i := 1 to 3 do
5466: LD_ADDR_VAR 0 2
5470: PUSH
5471: DOUBLE
5472: LD_INT 1
5474: DEC
5475: ST_TO_ADDR
5476: LD_INT 3
5478: PUSH
5479: FOR_TO
5480: IFFALSE 5589
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
5482: LD_INT 0
5484: PPUSH
5485: LD_INT 1
5487: PPUSH
5488: LD_INT 2
5490: PUSH
5491: LD_INT 3
5493: PUSH
5494: LD_INT 4
5496: PUSH
5497: EMPTY
5498: LIST
5499: LIST
5500: LIST
5501: PUSH
5502: LD_OWVAR 67
5506: ARRAY
5507: PPUSH
5508: CALL_OW 380
// un := CreateHuman ;
5512: LD_ADDR_VAR 0 1
5516: PUSH
5517: CALL_OW 44
5521: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
5522: LD_ADDR_EXP 47
5526: PUSH
5527: LD_EXP 47
5531: PUSH
5532: LD_VAR 0 1
5536: UNION
5537: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5538: LD_VAR 0 1
5542: PPUSH
5543: LD_INT 1
5545: PPUSH
5546: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
5550: LD_VAR 0 1
5554: PPUSH
5555: LD_INT 11
5557: PPUSH
5558: LD_INT 0
5560: PPUSH
5561: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
5565: LD_VAR 0 1
5569: PPUSH
5570: LD_INT 210
5572: PPUSH
5573: LD_INT 159
5575: PPUSH
5576: CALL_OW 111
// wait ( 0 0$2 ) ;
5580: LD_INT 70
5582: PPUSH
5583: CALL_OW 67
// end ;
5587: GO 5479
5589: POP
5590: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
5591: LD_ADDR_VAR 0 4
5595: PUSH
5596: LD_INT 172
5598: PUSH
5599: LD_INT 76
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: PUSH
5606: LD_INT 150
5608: PUSH
5609: LD_INT 38
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: PUSH
5616: LD_INT 148
5618: PUSH
5619: LD_INT 9
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: PUSH
5626: LD_INT 165
5628: PUSH
5629: LD_INT 38
5631: PUSH
5632: EMPTY
5633: LIST
5634: LIST
5635: PUSH
5636: EMPTY
5637: LIST
5638: LIST
5639: LIST
5640: LIST
5641: PUSH
5642: LD_INT 191
5644: PUSH
5645: LD_INT 77
5647: PUSH
5648: EMPTY
5649: LIST
5650: LIST
5651: PUSH
5652: LD_INT 168
5654: PUSH
5655: LD_INT 42
5657: PUSH
5658: EMPTY
5659: LIST
5660: LIST
5661: PUSH
5662: LD_INT 166
5664: PUSH
5665: LD_INT 11
5667: PUSH
5668: EMPTY
5669: LIST
5670: LIST
5671: PUSH
5672: LD_INT 151
5674: PUSH
5675: LD_INT 12
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: LIST
5686: LIST
5687: PUSH
5688: LD_INT 221
5690: PUSH
5691: LD_INT 88
5693: PUSH
5694: EMPTY
5695: LIST
5696: LIST
5697: PUSH
5698: LD_INT 217
5700: PUSH
5701: LD_INT 64
5703: PUSH
5704: EMPTY
5705: LIST
5706: LIST
5707: PUSH
5708: LD_INT 232
5710: PUSH
5711: LD_INT 66
5713: PUSH
5714: EMPTY
5715: LIST
5716: LIST
5717: PUSH
5718: LD_INT 200
5720: PUSH
5721: LD_INT 56
5723: PUSH
5724: EMPTY
5725: LIST
5726: LIST
5727: PUSH
5728: EMPTY
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: PUSH
5734: EMPTY
5735: LIST
5736: LIST
5737: LIST
5738: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5739: LD_INT 35
5741: PPUSH
5742: CALL_OW 67
// for i := russianPatrol downto 1 do
5746: LD_ADDR_VAR 0 2
5750: PUSH
5751: DOUBLE
5752: LD_EXP 47
5756: INC
5757: ST_TO_ADDR
5758: LD_INT 1
5760: PUSH
5761: FOR_DOWNTO
5762: IFFALSE 6145
// begin if IsDead ( russianPatrol [ i ] ) then
5764: LD_EXP 47
5768: PUSH
5769: LD_VAR 0 2
5773: ARRAY
5774: PPUSH
5775: CALL_OW 301
5779: IFFALSE 5783
// continue ;
5781: GO 5761
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
5783: LD_EXP 47
5787: PUSH
5788: LD_VAR 0 2
5792: ARRAY
5793: PPUSH
5794: CALL_OW 256
5798: PUSH
5799: LD_INT 990
5801: LESS
5802: PUSH
5803: LD_EXP 47
5807: PUSH
5808: LD_VAR 0 2
5812: ARRAY
5813: PPUSH
5814: CALL_OW 110
5818: PUSH
5819: LD_INT 1
5821: EQUAL
5822: AND
5823: IFFALSE 5843
// SetTag ( russianPatrol [ i ] , 2 ) ;
5825: LD_EXP 47
5829: PUSH
5830: LD_VAR 0 2
5834: ARRAY
5835: PPUSH
5836: LD_INT 2
5838: PPUSH
5839: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5843: LD_EXP 47
5847: PUSH
5848: LD_VAR 0 2
5852: ARRAY
5853: PPUSH
5854: CALL_OW 110
5858: PUSH
5859: LD_INT 2
5861: EQUAL
5862: IFFALSE 5929
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5864: LD_EXP 47
5868: PUSH
5869: LD_VAR 0 2
5873: ARRAY
5874: PPUSH
5875: LD_INT 166
5877: PPUSH
5878: LD_INT 101
5880: PPUSH
5881: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5885: LD_EXP 47
5889: PUSH
5890: LD_VAR 0 2
5894: ARRAY
5895: PPUSH
5896: LD_INT 71
5898: PPUSH
5899: CALL_OW 296
5903: PUSH
5904: LD_INT 10
5906: LESS
5907: IFFALSE 5927
// SetTag ( russianPatrol [ i ] , 3 ) ;
5909: LD_EXP 47
5913: PUSH
5914: LD_VAR 0 2
5918: ARRAY
5919: PPUSH
5920: LD_INT 3
5922: PPUSH
5923: CALL_OW 109
// continue ;
5927: GO 5761
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5929: LD_EXP 47
5933: PUSH
5934: LD_VAR 0 2
5938: ARRAY
5939: PPUSH
5940: CALL_OW 110
5944: PUSH
5945: LD_INT 3
5947: EQUAL
5948: IFFALSE 6043
// begin spottedByPatrol := true ;
5950: LD_ADDR_EXP 7
5954: PUSH
5955: LD_INT 1
5957: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5958: LD_EXP 47
5962: PUSH
5963: LD_VAR 0 2
5967: ARRAY
5968: PPUSH
5969: CALL_OW 250
5973: PPUSH
5974: LD_EXP 47
5978: PUSH
5979: LD_VAR 0 2
5983: ARRAY
5984: PPUSH
5985: CALL_OW 251
5989: PPUSH
5990: LD_INT 2
5992: PPUSH
5993: LD_INT 6
5995: NEG
5996: PPUSH
5997: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
6001: LD_EXP 47
6005: PUSH
6006: LD_VAR 0 2
6010: ARRAY
6011: PPUSH
6012: CALL_OW 87
// DialogueOn ;
6016: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
6020: LD_EXP 25
6024: PPUSH
6025: LD_STRING DH-Spot-f-3
6027: PPUSH
6028: CALL_OW 88
// DialogueOff ;
6032: CALL_OW 7
// YouLost ( Spotted ) ;
6036: LD_STRING Spotted
6038: PPUSH
6039: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
6043: LD_EXP 47
6047: PUSH
6048: LD_VAR 0 2
6052: ARRAY
6053: PPUSH
6054: CALL_OW 314
6058: NOT
6059: IFFALSE 6143
// for j in patrol [ i ] do
6061: LD_ADDR_VAR 0 3
6065: PUSH
6066: LD_VAR 0 4
6070: PUSH
6071: LD_VAR 0 2
6075: ARRAY
6076: PUSH
6077: FOR_IN
6078: IFFALSE 6141
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
6080: LD_EXP 47
6084: PUSH
6085: LD_VAR 0 2
6089: ARRAY
6090: PPUSH
6091: LD_INT 35
6093: PPUSH
6094: LD_INT 175
6096: PPUSH
6097: CALL_OW 12
6101: PPUSH
6102: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
6106: LD_EXP 47
6110: PUSH
6111: LD_VAR 0 2
6115: ARRAY
6116: PPUSH
6117: LD_VAR 0 3
6121: PUSH
6122: LD_INT 1
6124: ARRAY
6125: PPUSH
6126: LD_VAR 0 3
6130: PUSH
6131: LD_INT 2
6133: ARRAY
6134: PPUSH
6135: CALL_OW 174
// end ;
6139: GO 6077
6141: POP
6142: POP
// end ;
6143: GO 5761
6145: POP
6146: POP
// until not russianPatrol or russianAlert ;
6147: LD_EXP 47
6151: NOT
6152: PUSH
6153: LD_EXP 9
6157: OR
6158: IFFALSE 5739
// if russianPatrol then
6160: LD_EXP 47
6164: IFFALSE 6181
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
6166: LD_EXP 47
6170: PPUSH
6171: LD_INT 161
6173: PPUSH
6174: LD_INT 107
6176: PPUSH
6177: CALL_OW 114
// end ;
6181: PPOPN 4
6183: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
6184: LD_EXP 6
6188: PUSH
6189: LD_EXP 13
6193: NOT
6194: AND
6195: IFFALSE 6681
6197: GO 6199
6199: DISABLE
6200: LD_INT 0
6202: PPUSH
6203: PPUSH
6204: PPUSH
6205: PPUSH
6206: PPUSH
// begin enable ;
6207: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
6208: LD_ADDR_VAR 0 2
6212: PUSH
6213: LD_EXP 48
6217: PPUSH
6218: LD_INT 21
6220: PUSH
6221: LD_INT 2
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: PPUSH
6228: CALL_OW 72
6232: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
6233: LD_ADDR_VAR 0 4
6237: PUSH
6238: LD_INT 22
6240: PUSH
6241: LD_INT 4
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PPUSH
6248: CALL_OW 69
6252: ST_TO_ADDR
// for i in filter do
6253: LD_ADDR_VAR 0 1
6257: PUSH
6258: LD_VAR 0 2
6262: PUSH
6263: FOR_IN
6264: IFFALSE 6679
// begin tmp := IsDrivenBy ( i ) ;
6266: LD_ADDR_VAR 0 3
6270: PUSH
6271: LD_VAR 0 1
6275: PPUSH
6276: CALL_OW 311
6280: ST_TO_ADDR
// if not tmp then
6281: LD_VAR 0 3
6285: NOT
6286: IFFALSE 6290
// continue ;
6288: GO 6263
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
6290: LD_VAR 0 1
6294: PPUSH
6295: CALL_OW 261
6299: PUSH
6300: LD_INT 90
6302: GREATER
6303: PUSH
6304: LD_VAR 0 1
6308: PPUSH
6309: CALL_OW 110
6313: PUSH
6314: LD_INT 2
6316: EQUAL
6317: AND
6318: IFFALSE 6334
// SetTag ( i , 0 ) else
6320: LD_VAR 0 1
6324: PPUSH
6325: LD_INT 0
6327: PPUSH
6328: CALL_OW 109
6332: GO 6430
// if GetTag ( i ) = 2 then
6334: LD_VAR 0 1
6338: PPUSH
6339: CALL_OW 110
6343: PUSH
6344: LD_INT 2
6346: EQUAL
6347: IFFALSE 6430
// begin x := rand ( 1 , 2 ) ;
6349: LD_ADDR_VAR 0 5
6353: PUSH
6354: LD_INT 1
6356: PPUSH
6357: LD_INT 2
6359: PPUSH
6360: CALL_OW 12
6364: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
6365: LD_VAR 0 1
6369: PPUSH
6370: LD_EXP 49
6374: PUSH
6375: LD_VAR 0 5
6379: ARRAY
6380: PPUSH
6381: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
6385: LD_EXP 49
6389: PUSH
6390: LD_VAR 0 5
6394: ARRAY
6395: PPUSH
6396: LD_INT 2
6398: PPUSH
6399: CALL_OW 289
6403: PUSH
6404: LD_INT 20
6406: LESS
6407: IFFALSE 6430
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
6409: LD_EXP 49
6413: PUSH
6414: LD_VAR 0 5
6418: ARRAY
6419: PPUSH
6420: LD_INT 2
6422: PPUSH
6423: LD_INT 100
6425: PPUSH
6426: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
6430: LD_VAR 0 1
6434: PPUSH
6435: CALL_OW 256
6439: PUSH
6440: LD_INT 600
6442: GREATEREQUAL
6443: PUSH
6444: LD_VAR 0 1
6448: PPUSH
6449: CALL_OW 110
6453: NOT
6454: AND
6455: IFFALSE 6481
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6457: LD_VAR 0 1
6461: PPUSH
6462: LD_VAR 0 4
6466: PPUSH
6467: LD_VAR 0 1
6471: PPUSH
6472: CALL_OW 74
6476: PPUSH
6477: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
6481: LD_VAR 0 1
6485: PPUSH
6486: CALL_OW 256
6490: PUSH
6491: LD_INT 600
6493: LESS
6494: PUSH
6495: LD_VAR 0 1
6499: PPUSH
6500: CALL_OW 110
6504: NOT
6505: AND
6506: IFFALSE 6535
// begin SetTag ( i , 1 ) ;
6508: LD_VAR 0 1
6512: PPUSH
6513: LD_INT 1
6515: PPUSH
6516: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
6520: LD_VAR 0 1
6524: PPUSH
6525: LD_INT 62
6527: PPUSH
6528: LD_INT 22
6530: PPUSH
6531: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
6535: LD_VAR 0 1
6539: PPUSH
6540: CALL_OW 110
6544: PUSH
6545: LD_INT 1
6547: EQUAL
6548: PUSH
6549: LD_VAR 0 1
6553: PPUSH
6554: LD_INT 62
6556: PPUSH
6557: LD_INT 22
6559: PPUSH
6560: CALL_OW 297
6564: PUSH
6565: LD_INT 6
6567: LESS
6568: AND
6569: PUSH
6570: LD_VAR 0 3
6574: AND
6575: IFFALSE 6677
// begin ComExitVehicle ( tmp ) ;
6577: LD_VAR 0 3
6581: PPUSH
6582: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
6586: LD_VAR 0 3
6590: PPUSH
6591: LD_VAR 0 1
6595: PPUSH
6596: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
6600: LD_INT 35
6602: PPUSH
6603: CALL_OW 67
// until GetLives ( i ) = 1000 ;
6607: LD_VAR 0 1
6611: PPUSH
6612: CALL_OW 256
6616: PUSH
6617: LD_INT 1000
6619: EQUAL
6620: IFFALSE 6600
// ComEnterUnit ( tmp , i ) ;
6622: LD_VAR 0 3
6626: PPUSH
6627: LD_VAR 0 1
6631: PPUSH
6632: CALL_OW 120
// if GetFuel ( i ) <= 90 then
6636: LD_VAR 0 1
6640: PPUSH
6641: CALL_OW 261
6645: PUSH
6646: LD_INT 90
6648: LESSEQUAL
6649: IFFALSE 6665
// SetTag ( i , 2 ) else
6651: LD_VAR 0 1
6655: PPUSH
6656: LD_INT 2
6658: PPUSH
6659: CALL_OW 109
6663: GO 6677
// SetTag ( i , 0 ) ;
6665: LD_VAR 0 1
6669: PPUSH
6670: LD_INT 0
6672: PPUSH
6673: CALL_OW 109
// end ; end ;
6677: GO 6263
6679: POP
6680: POP
// end ;
6681: PPOPN 5
6683: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
6684: LD_EXP 20
6688: IFFALSE 6911
6690: GO 6692
6692: DISABLE
6693: LD_INT 0
6695: PPUSH
6696: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
6697: LD_EXP 49
6701: PPUSH
6702: LD_INT 79
6704: PPUSH
6705: LD_INT 155
6707: PPUSH
6708: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
6712: LD_EXP 49
6716: PPUSH
6717: LD_INT 16
6719: PPUSH
6720: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6724: LD_ADDR_VAR 0 2
6728: PUSH
6729: LD_EXP 48
6733: PPUSH
6734: LD_INT 50
6736: PUSH
6737: EMPTY
6738: LIST
6739: PPUSH
6740: CALL_OW 72
6744: ST_TO_ADDR
// for i in tmp do
6745: LD_ADDR_VAR 0 1
6749: PUSH
6750: LD_VAR 0 2
6754: PUSH
6755: FOR_IN
6756: IFFALSE 6790
// begin ComAgressiveMove ( i , 123 , 60 ) ;
6758: LD_VAR 0 1
6762: PPUSH
6763: LD_INT 123
6765: PPUSH
6766: LD_INT 60
6768: PPUSH
6769: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
6773: LD_VAR 0 1
6777: PPUSH
6778: LD_INT 153
6780: PPUSH
6781: LD_INT 103
6783: PPUSH
6784: CALL_OW 174
// end ;
6788: GO 6755
6790: POP
6791: POP
// repeat wait ( 0 0$1 ) ;
6792: LD_INT 35
6794: PPUSH
6795: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6799: LD_ADDR_VAR 0 2
6803: PUSH
6804: LD_EXP 48
6808: PPUSH
6809: LD_INT 50
6811: PUSH
6812: EMPTY
6813: LIST
6814: PPUSH
6815: CALL_OW 72
6819: ST_TO_ADDR
// for i in tmp do
6820: LD_ADDR_VAR 0 1
6824: PUSH
6825: LD_VAR 0 2
6829: PUSH
6830: FOR_IN
6831: IFFALSE 6902
// if not HasTask ( i ) then
6833: LD_VAR 0 1
6837: PPUSH
6838: CALL_OW 314
6842: NOT
6843: IFFALSE 6900
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
6845: LD_VAR 0 1
6849: PPUSH
6850: LD_INT 81
6852: PUSH
6853: LD_INT 3
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: PUSH
6860: LD_INT 3
6862: PUSH
6863: LD_INT 21
6865: PUSH
6866: LD_INT 3
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PPUSH
6881: CALL_OW 69
6885: PPUSH
6886: LD_VAR 0 1
6890: PPUSH
6891: CALL_OW 74
6895: PPUSH
6896: CALL_OW 115
6900: GO 6830
6902: POP
6903: POP
6904: LD_VAR 0 2
6908: NOT
6909: IFFALSE 6792
// end ;
6911: PPOPN 2
6913: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6914: LD_INT 22
6916: PUSH
6917: LD_INT 3
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PUSH
6924: LD_INT 32
6926: PUSH
6927: LD_INT 1
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: PUSH
6934: EMPTY
6935: LIST
6936: LIST
6937: PPUSH
6938: CALL_OW 69
6942: IFFALSE 7021
6944: GO 6946
6946: DISABLE
6947: LD_INT 0
6949: PPUSH
// begin enable ;
6950: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6951: LD_ADDR_VAR 0 1
6955: PUSH
6956: LD_INT 22
6958: PUSH
6959: LD_INT 3
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: PUSH
6966: LD_INT 32
6968: PUSH
6969: LD_INT 1
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PPUSH
6980: CALL_OW 69
6984: PUSH
6985: FOR_IN
6986: IFFALSE 7019
// if GetFuel ( i ) < 1 then
6988: LD_VAR 0 1
6992: PPUSH
6993: CALL_OW 261
6997: PUSH
6998: LD_INT 1
7000: LESS
7001: IFFALSE 7017
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
7003: LD_VAR 0 1
7007: PPUSH
7008: CALL_OW 311
7012: PPUSH
7013: CALL_OW 121
7017: GO 6985
7019: POP
7020: POP
// end ; end_of_file
7021: PPOPN 1
7023: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
7024: LD_INT 0
7026: PPUSH
7027: PPUSH
7028: PPUSH
// SetBName ( omikron , omikron ) ;
7029: LD_INT 64
7031: PPUSH
7032: LD_STRING omikron
7034: PPUSH
7035: CALL_OW 500
// uc_side := 4 ;
7039: LD_ADDR_OWVAR 20
7043: PUSH
7044: LD_INT 4
7046: ST_TO_ADDR
// uc_nation := 1 ;
7047: LD_ADDR_OWVAR 21
7051: PUSH
7052: LD_INT 1
7054: ST_TO_ADDR
// omicronSquad := [ ] ;
7055: LD_ADDR_EXP 51
7059: PUSH
7060: EMPTY
7061: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
7062: LD_ADDR_VAR 0 2
7066: PUSH
7067: LD_INT 22
7069: PUSH
7070: LD_INT 4
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: PUSH
7077: LD_INT 2
7079: PUSH
7080: LD_INT 30
7082: PUSH
7083: LD_INT 32
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PUSH
7090: LD_INT 30
7092: PUSH
7093: LD_INT 31
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: LIST
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: PPUSH
7109: CALL_OW 69
7113: PUSH
7114: FOR_IN
7115: IFFALSE 7172
// begin PrepareHuman ( false , 1 , 1 ) ;
7117: LD_INT 0
7119: PPUSH
7120: LD_INT 1
7122: PPUSH
7123: LD_INT 1
7125: PPUSH
7126: CALL_OW 380
// un := CreateHuman ;
7130: LD_ADDR_VAR 0 3
7134: PUSH
7135: CALL_OW 44
7139: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7140: LD_ADDR_EXP 51
7144: PUSH
7145: LD_EXP 51
7149: PUSH
7150: LD_VAR 0 3
7154: UNION
7155: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
7156: LD_VAR 0 3
7160: PPUSH
7161: LD_VAR 0 2
7165: PPUSH
7166: CALL_OW 52
// end ;
7170: GO 7114
7172: POP
7173: POP
// for i := 1 to 3 do
7174: LD_ADDR_VAR 0 2
7178: PUSH
7179: DOUBLE
7180: LD_INT 1
7182: DEC
7183: ST_TO_ADDR
7184: LD_INT 3
7186: PUSH
7187: FOR_TO
7188: IFFALSE 7243
// begin PrepareHuman ( false , 2 , 2 ) ;
7190: LD_INT 0
7192: PPUSH
7193: LD_INT 2
7195: PPUSH
7196: LD_INT 2
7198: PPUSH
7199: CALL_OW 380
// un := CreateHuman ;
7203: LD_ADDR_VAR 0 3
7207: PUSH
7208: CALL_OW 44
7212: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7213: LD_ADDR_EXP 51
7217: PUSH
7218: LD_EXP 51
7222: PUSH
7223: LD_VAR 0 3
7227: UNION
7228: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
7229: LD_VAR 0 3
7233: PPUSH
7234: LD_INT 64
7236: PPUSH
7237: CALL_OW 52
// end ;
7241: GO 7187
7243: POP
7244: POP
// for i := 1 to 2 do
7245: LD_ADDR_VAR 0 2
7249: PUSH
7250: DOUBLE
7251: LD_INT 1
7253: DEC
7254: ST_TO_ADDR
7255: LD_INT 2
7257: PUSH
7258: FOR_TO
7259: IFFALSE 7398
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
7261: LD_INT 4
7263: PPUSH
7264: LD_INT 1
7266: PPUSH
7267: LD_INT 2
7269: PPUSH
7270: LD_INT 2
7272: PPUSH
7273: LD_INT 1
7275: PPUSH
7276: LD_INT 3
7278: PPUSH
7279: LD_INT 100
7281: PPUSH
7282: CALL 345 0 7
// un := CreateVehicle ;
7286: LD_ADDR_VAR 0 3
7290: PUSH
7291: CALL_OW 45
7295: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7296: LD_ADDR_EXP 51
7300: PUSH
7301: LD_EXP 51
7305: PUSH
7306: LD_VAR 0 3
7310: UNION
7311: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
7312: LD_VAR 0 3
7316: PPUSH
7317: LD_INT 28
7319: PPUSH
7320: LD_INT 37
7322: PPUSH
7323: LD_INT 6
7325: PPUSH
7326: LD_INT 0
7328: PPUSH
7329: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
7333: LD_INT 0
7335: PPUSH
7336: LD_INT 3
7338: PPUSH
7339: LD_INT 2
7341: PPUSH
7342: CALL_OW 380
// un := CreateHuman ;
7346: LD_ADDR_VAR 0 3
7350: PUSH
7351: CALL_OW 44
7355: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7356: LD_ADDR_EXP 51
7360: PUSH
7361: LD_EXP 51
7365: PUSH
7366: LD_VAR 0 3
7370: UNION
7371: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
7372: LD_VAR 0 3
7376: PPUSH
7377: LD_EXP 51
7381: PUSH
7382: LD_EXP 51
7386: PUSH
7387: LD_INT 1
7389: MINUS
7390: ARRAY
7391: PPUSH
7392: CALL_OW 52
// end ;
7396: GO 7258
7398: POP
7399: POP
// end ;
7400: LD_VAR 0 1
7404: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
7405: LD_INT 0
7407: PPUSH
7408: PPUSH
7409: PPUSH
7410: PPUSH
// uc_side := 4 ;
7411: LD_ADDR_OWVAR 20
7415: PUSH
7416: LD_INT 4
7418: ST_TO_ADDR
// uc_nation := 1 ;
7419: LD_ADDR_OWVAR 21
7423: PUSH
7424: LD_INT 1
7426: ST_TO_ADDR
// tmp := [ ] ;
7427: LD_ADDR_VAR 0 4
7431: PUSH
7432: EMPTY
7433: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7434: LD_INT 4
7436: PPUSH
7437: LD_INT 1
7439: PPUSH
7440: LD_INT 2
7442: PPUSH
7443: LD_INT 1
7445: PPUSH
7446: LD_INT 1
7448: PPUSH
7449: LD_INT 4
7451: PPUSH
7452: LD_INT 77
7454: PPUSH
7455: CALL 345 0 7
// un := CreateVehicle ;
7459: LD_ADDR_VAR 0 3
7463: PUSH
7464: CALL_OW 45
7468: ST_TO_ADDR
// tmp := tmp union un ;
7469: LD_ADDR_VAR 0 4
7473: PUSH
7474: LD_VAR 0 4
7478: PUSH
7479: LD_VAR 0 3
7483: UNION
7484: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7485: LD_VAR 0 3
7489: PPUSH
7490: LD_INT 2
7492: PPUSH
7493: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
7497: LD_VAR 0 3
7501: PPUSH
7502: LD_INT 106
7504: PPUSH
7505: LD_INT 3
7507: PPUSH
7508: LD_INT 0
7510: PPUSH
7511: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
7515: LD_INT 0
7517: PPUSH
7518: LD_INT 3
7520: PPUSH
7521: LD_INT 2
7523: PPUSH
7524: CALL_OW 380
// un := CreateHuman ;
7528: LD_ADDR_VAR 0 3
7532: PUSH
7533: CALL_OW 44
7537: ST_TO_ADDR
// tmp := tmp union un ;
7538: LD_ADDR_VAR 0 4
7542: PUSH
7543: LD_VAR 0 4
7547: PUSH
7548: LD_VAR 0 3
7552: UNION
7553: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7554: LD_VAR 0 3
7558: PPUSH
7559: LD_VAR 0 4
7563: PUSH
7564: LD_VAR 0 4
7568: PUSH
7569: LD_INT 1
7571: MINUS
7572: ARRAY
7573: PPUSH
7574: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7578: LD_VAR 0 3
7582: PPUSH
7583: LD_INT 109
7585: PPUSH
7586: LD_INT 9
7588: PPUSH
7589: CALL_OW 111
// wait ( 0 0$1 ) ;
7593: LD_INT 35
7595: PPUSH
7596: CALL_OW 67
// for i := 1 to 2 do
7600: LD_ADDR_VAR 0 2
7604: PUSH
7605: DOUBLE
7606: LD_INT 1
7608: DEC
7609: ST_TO_ADDR
7610: LD_INT 2
7612: PUSH
7613: FOR_TO
7614: IFFALSE 7678
// begin PrepareHuman ( false , 1 , 2 ) ;
7616: LD_INT 0
7618: PPUSH
7619: LD_INT 1
7621: PPUSH
7622: LD_INT 2
7624: PPUSH
7625: CALL_OW 380
// un := CreateHuman ;
7629: LD_ADDR_VAR 0 3
7633: PUSH
7634: CALL_OW 44
7638: ST_TO_ADDR
// tmp := tmp union un ;
7639: LD_ADDR_VAR 0 4
7643: PUSH
7644: LD_VAR 0 4
7648: PUSH
7649: LD_VAR 0 3
7653: UNION
7654: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7655: LD_VAR 0 3
7659: PPUSH
7660: LD_INT 105
7662: PPUSH
7663: LD_INT 2
7665: PPUSH
7666: LD_INT 2
7668: PPUSH
7669: LD_INT 0
7671: PPUSH
7672: CALL_OW 50
// end ;
7676: GO 7613
7678: POP
7679: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7680: LD_VAR 0 4
7684: PPUSH
7685: LD_INT 26
7687: PPUSH
7688: LD_INT 35
7690: PPUSH
7691: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7695: LD_INT 35
7697: PPUSH
7698: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7702: LD_VAR 0 4
7706: PPUSH
7707: LD_INT 50
7709: PUSH
7710: EMPTY
7711: LIST
7712: PPUSH
7713: CALL_OW 72
7717: NOT
7718: IFFALSE 7722
// exit ;
7720: GO 7849
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7722: LD_VAR 0 4
7726: PPUSH
7727: LD_INT 91
7729: PUSH
7730: LD_INT 64
7732: PUSH
7733: LD_INT 12
7735: PUSH
7736: EMPTY
7737: LIST
7738: LIST
7739: LIST
7740: PPUSH
7741: CALL_OW 72
7745: PUSH
7746: LD_VAR 0 4
7750: EQUAL
7751: IFFALSE 7695
// omicronSquad := omicronSquad union tmp ;
7753: LD_ADDR_EXP 51
7757: PUSH
7758: LD_EXP 51
7762: PUSH
7763: LD_VAR 0 4
7767: UNION
7768: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7769: LD_ADDR_VAR 0 2
7773: PUSH
7774: LD_VAR 0 4
7778: PPUSH
7779: LD_INT 25
7781: PUSH
7782: LD_INT 1
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: PPUSH
7789: CALL_OW 72
7793: PUSH
7794: FOR_IN
7795: IFFALSE 7847
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7797: LD_VAR 0 2
7801: PPUSH
7802: LD_INT 22
7804: PUSH
7805: LD_INT 4
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: PUSH
7812: LD_INT 30
7814: PUSH
7815: LD_INT 4
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: PPUSH
7826: CALL_OW 69
7830: PPUSH
7831: LD_VAR 0 2
7835: PPUSH
7836: CALL_OW 74
7840: PPUSH
7841: CALL_OW 120
7845: GO 7794
7847: POP
7848: POP
// end ;
7849: LD_VAR 0 1
7853: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7854: LD_EXP 13
7858: NOT
7859: IFFALSE 8430
7861: GO 7863
7863: DISABLE
7864: LD_INT 0
7866: PPUSH
7867: PPUSH
7868: PPUSH
7869: PPUSH
// begin enable ;
7870: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7871: LD_ADDR_VAR 0 2
7875: PUSH
7876: LD_INT 22
7878: PUSH
7879: LD_INT 4
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: PUSH
7886: LD_INT 21
7888: PUSH
7889: LD_INT 3
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: PUSH
7896: LD_INT 3
7898: PUSH
7899: LD_INT 24
7901: PUSH
7902: LD_INT 1000
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: LIST
7917: PPUSH
7918: CALL_OW 69
7922: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7923: LD_ADDR_VAR 0 3
7927: PUSH
7928: LD_EXP 51
7932: PPUSH
7933: LD_INT 25
7935: PUSH
7936: LD_INT 2
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: PPUSH
7943: CALL_OW 72
7947: ST_TO_ADDR
// if filter and tmp then
7948: LD_VAR 0 2
7952: PUSH
7953: LD_VAR 0 3
7957: AND
7958: IFFALSE 8031
// begin for i in tmp do
7960: LD_ADDR_VAR 0 1
7964: PUSH
7965: LD_VAR 0 3
7969: PUSH
7970: FOR_IN
7971: IFFALSE 8027
// if IsInUnit ( i ) then
7973: LD_VAR 0 1
7977: PPUSH
7978: CALL_OW 310
7982: IFFALSE 7995
// ComExitBuilding ( i ) else
7984: LD_VAR 0 1
7988: PPUSH
7989: CALL_OW 122
7993: GO 8025
// if not HasTask ( i ) then
7995: LD_VAR 0 1
7999: PPUSH
8000: CALL_OW 314
8004: NOT
8005: IFFALSE 8025
// ComRepairBuilding ( i , filter [ 1 ] ) ;
8007: LD_VAR 0 1
8011: PPUSH
8012: LD_VAR 0 2
8016: PUSH
8017: LD_INT 1
8019: ARRAY
8020: PPUSH
8021: CALL_OW 130
8025: GO 7970
8027: POP
8028: POP
// end else
8029: GO 8102
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
8031: LD_VAR 0 3
8035: PPUSH
8036: LD_INT 3
8038: PUSH
8039: LD_INT 54
8041: PUSH
8042: EMPTY
8043: LIST
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: PPUSH
8049: CALL_OW 72
8053: IFFALSE 8102
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
8055: LD_ADDR_VAR 0 1
8059: PUSH
8060: LD_VAR 0 3
8064: PPUSH
8065: LD_INT 3
8067: PUSH
8068: LD_INT 54
8070: PUSH
8071: EMPTY
8072: LIST
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: PPUSH
8078: CALL_OW 72
8082: PUSH
8083: FOR_IN
8084: IFFALSE 8100
// ComEnterUnit ( i , omikron ) ;
8086: LD_VAR 0 1
8090: PPUSH
8091: LD_INT 64
8093: PPUSH
8094: CALL_OW 120
8098: GO 8083
8100: POP
8101: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
8102: LD_ADDR_VAR 0 2
8106: PUSH
8107: LD_EXP 51
8111: PPUSH
8112: LD_INT 21
8114: PUSH
8115: LD_INT 2
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: PPUSH
8122: CALL_OW 72
8126: ST_TO_ADDR
// if not filter then
8127: LD_VAR 0 2
8131: NOT
8132: IFFALSE 8136
// exit ;
8134: GO 8430
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
8136: LD_ADDR_VAR 0 4
8140: PUSH
8141: LD_INT 13
8143: PPUSH
8144: LD_INT 81
8146: PUSH
8147: LD_INT 4
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PPUSH
8154: CALL_OW 70
8158: ST_TO_ADDR
// if enemy then
8159: LD_VAR 0 4
8163: IFFALSE 8430
// begin for i in filter do
8165: LD_ADDR_VAR 0 1
8169: PUSH
8170: LD_VAR 0 2
8174: PUSH
8175: FOR_IN
8176: IFFALSE 8428
// begin tmp := IsDrivenBy ( i ) ;
8178: LD_ADDR_VAR 0 3
8182: PUSH
8183: LD_VAR 0 1
8187: PPUSH
8188: CALL_OW 311
8192: ST_TO_ADDR
// if not tmp then
8193: LD_VAR 0 3
8197: NOT
8198: IFFALSE 8202
// continue ;
8200: GO 8175
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
8202: LD_VAR 0 1
8206: PPUSH
8207: CALL_OW 256
8211: PUSH
8212: LD_INT 600
8214: GREATEREQUAL
8215: PUSH
8216: LD_VAR 0 1
8220: PPUSH
8221: CALL_OW 110
8225: PUSH
8226: LD_INT 1
8228: NONEQUAL
8229: AND
8230: IFFALSE 8256
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8232: LD_VAR 0 1
8236: PPUSH
8237: LD_VAR 0 4
8241: PPUSH
8242: LD_VAR 0 1
8246: PPUSH
8247: CALL_OW 74
8251: PPUSH
8252: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
8256: LD_VAR 0 1
8260: PPUSH
8261: CALL_OW 256
8265: PUSH
8266: LD_INT 600
8268: LESS
8269: PUSH
8270: LD_VAR 0 1
8274: PPUSH
8275: CALL_OW 110
8279: PUSH
8280: LD_INT 1
8282: NONEQUAL
8283: AND
8284: IFFALSE 8313
// begin SetTag ( i , 1 ) ;
8286: LD_VAR 0 1
8290: PPUSH
8291: LD_INT 1
8293: PPUSH
8294: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
8298: LD_VAR 0 1
8302: PPUSH
8303: LD_INT 27
8305: PPUSH
8306: LD_INT 35
8308: PPUSH
8309: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
8313: LD_VAR 0 1
8317: PPUSH
8318: CALL_OW 110
8322: PUSH
8323: LD_INT 1
8325: EQUAL
8326: PUSH
8327: LD_VAR 0 1
8331: PPUSH
8332: LD_INT 27
8334: PPUSH
8335: LD_INT 35
8337: PPUSH
8338: CALL_OW 297
8342: PUSH
8343: LD_INT 6
8345: LESS
8346: AND
8347: PUSH
8348: LD_VAR 0 3
8352: AND
8353: IFFALSE 8426
// begin ComExitVehicle ( tmp ) ;
8355: LD_VAR 0 3
8359: PPUSH
8360: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8364: LD_VAR 0 3
8368: PPUSH
8369: LD_VAR 0 1
8373: PPUSH
8374: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8378: LD_INT 35
8380: PPUSH
8381: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8385: LD_VAR 0 1
8389: PPUSH
8390: CALL_OW 256
8394: PUSH
8395: LD_INT 1000
8397: EQUAL
8398: IFFALSE 8378
// ComEnterUnit ( tmp , i ) ;
8400: LD_VAR 0 3
8404: PPUSH
8405: LD_VAR 0 1
8409: PPUSH
8410: CALL_OW 120
// SetTag ( i , 0 ) ;
8414: LD_VAR 0 1
8418: PPUSH
8419: LD_INT 0
8421: PPUSH
8422: CALL_OW 109
// end ; end ;
8426: GO 8175
8428: POP
8429: POP
// end ; end ;
8430: PPOPN 4
8432: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
8433: LD_EXP 13
8437: IFFALSE 8581
8439: GO 8441
8441: DISABLE
8442: LD_INT 0
8444: PPUSH
8445: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
8446: LD_ADDR_VAR 0 2
8450: PUSH
8451: LD_EXP 51
8455: PPUSH
8456: LD_INT 21
8458: PUSH
8459: LD_INT 1
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: PUSH
8466: LD_INT 50
8468: PUSH
8469: EMPTY
8470: LIST
8471: PUSH
8472: EMPTY
8473: LIST
8474: LIST
8475: PPUSH
8476: CALL_OW 72
8480: ST_TO_ADDR
// if not tmp then
8481: LD_VAR 0 2
8485: NOT
8486: IFFALSE 8490
// exit ;
8488: GO 8581
// repeat wait ( 0 0$1 ) ;
8490: LD_INT 35
8492: PPUSH
8493: CALL_OW 67
// for i in tmp do
8497: LD_ADDR_VAR 0 1
8501: PUSH
8502: LD_VAR 0 2
8506: PUSH
8507: FOR_IN
8508: IFFALSE 8572
// begin ComExit ( i ) ;
8510: LD_VAR 0 1
8514: PPUSH
8515: CALL 783 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
8519: LD_VAR 0 1
8523: PPUSH
8524: LD_INT 14
8526: PPUSH
8527: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
8531: LD_VAR 0 1
8535: PPUSH
8536: LD_INT 14
8538: PPUSH
8539: CALL_OW 308
8543: IFFALSE 8570
// begin tmp := tmp diff i ;
8545: LD_ADDR_VAR 0 2
8549: PUSH
8550: LD_VAR 0 2
8554: PUSH
8555: LD_VAR 0 1
8559: DIFF
8560: ST_TO_ADDR
// RemoveUnit ( i ) ;
8561: LD_VAR 0 1
8565: PPUSH
8566: CALL_OW 64
// end ; end ;
8570: GO 8507
8572: POP
8573: POP
// until not tmp ;
8574: LD_VAR 0 2
8578: NOT
8579: IFFALSE 8490
// end ; end_of_file
8581: PPOPN 2
8583: END
// export function Action ; var i , un , veh , tmp ; begin
8584: LD_INT 0
8586: PPUSH
8587: PPUSH
8588: PPUSH
8589: PPUSH
8590: PPUSH
// InGameOn ;
8591: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8595: LD_INT 179
8597: PPUSH
8598: LD_INT 5
8600: PPUSH
8601: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8605: LD_ADDR_VAR 0 4
8609: PUSH
8610: LD_INT 2
8612: PPUSH
8613: LD_INT 2
8615: PPUSH
8616: LD_INT 12
8618: PPUSH
8619: LD_INT 1
8621: PPUSH
8622: LD_INT 1
8624: PPUSH
8625: LD_INT 24
8627: PPUSH
8628: LD_INT 33
8630: PPUSH
8631: CALL 345 0 7
8635: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8636: LD_VAR 0 4
8640: PPUSH
8641: LD_INT 2
8643: PPUSH
8644: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8648: LD_VAR 0 4
8652: PPUSH
8653: LD_INT 178
8655: PPUSH
8656: LD_INT 2
8658: PPUSH
8659: LD_INT 0
8661: PPUSH
8662: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8666: LD_EXP 25
8670: PPUSH
8671: LD_VAR 0 4
8675: PPUSH
8676: CALL_OW 52
// if Kamil then
8680: LD_EXP 29
8684: IFFALSE 8719
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8686: LD_EXP 29
8690: PPUSH
8691: LD_INT 207
8693: PPUSH
8694: LD_INT 37
8696: PPUSH
8697: LD_INT 0
8699: PPUSH
8700: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8704: LD_EXP 29
8708: PPUSH
8709: LD_INT 211
8711: PPUSH
8712: LD_INT 38
8714: PPUSH
8715: CALL_OW 118
// end ; if Sophia then
8719: LD_EXP 31
8723: IFFALSE 8758
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8725: LD_EXP 31
8729: PPUSH
8730: LD_INT 209
8732: PPUSH
8733: LD_INT 40
8735: PPUSH
8736: LD_INT 0
8738: PPUSH
8739: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8743: LD_EXP 31
8747: PPUSH
8748: LD_INT 211
8750: PPUSH
8751: LD_INT 38
8753: PPUSH
8754: CALL_OW 118
// end ; if Givi then
8758: LD_EXP 26
8762: IFFALSE 8797
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8764: LD_EXP 26
8768: PPUSH
8769: LD_INT 201
8771: PPUSH
8772: LD_INT 34
8774: PPUSH
8775: LD_INT 0
8777: PPUSH
8778: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8782: LD_EXP 26
8786: PPUSH
8787: LD_INT 206
8789: PPUSH
8790: LD_INT 36
8792: PPUSH
8793: CALL_OW 118
// end ; if Ibrahim then
8797: LD_EXP 28
8801: IFFALSE 8836
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8803: LD_EXP 28
8807: PPUSH
8808: LD_INT 202
8810: PPUSH
8811: LD_INT 39
8813: PPUSH
8814: LD_INT 0
8816: PPUSH
8817: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8821: LD_EXP 28
8825: PPUSH
8826: LD_INT 206
8828: PPUSH
8829: LD_INT 36
8831: PPUSH
8832: CALL_OW 118
// end ; if Markov then
8836: LD_EXP 32
8840: IFFALSE 8927
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8842: LD_ADDR_VAR 0 4
8846: PUSH
8847: LD_INT 2
8849: PPUSH
8850: LD_INT 2
8852: PPUSH
8853: LD_INT 13
8855: PPUSH
8856: LD_INT 1
8858: PPUSH
8859: LD_INT 1
8861: PPUSH
8862: LD_INT 25
8864: PPUSH
8865: LD_INT 80
8867: PUSH
8868: LD_INT 20
8870: PUSH
8871: LD_OWVAR 67
8875: MUL
8876: MINUS
8877: PPUSH
8878: CALL 345 0 7
8882: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8883: LD_VAR 0 4
8887: PPUSH
8888: LD_INT 2
8890: PPUSH
8891: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8895: LD_VAR 0 4
8899: PPUSH
8900: LD_INT 197
8902: PPUSH
8903: LD_INT 35
8905: PPUSH
8906: LD_INT 0
8908: PPUSH
8909: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8913: LD_EXP 32
8917: PPUSH
8918: LD_VAR 0 4
8922: PPUSH
8923: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8927: LD_ADDR_VAR 0 5
8931: PUSH
8932: LD_EXP 30
8936: PUSH
8937: LD_EXP 37
8941: UNION
8942: ST_TO_ADDR
// for i in tmp do
8943: LD_ADDR_VAR 0 2
8947: PUSH
8948: LD_VAR 0 5
8952: PUSH
8953: FOR_IN
8954: IFFALSE 8988
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8956: LD_VAR 0 2
8960: PPUSH
8961: LD_INT 203
8963: PPUSH
8964: LD_INT 41
8966: PPUSH
8967: LD_INT 6
8969: PPUSH
8970: LD_INT 0
8972: PPUSH
8973: CALL_OW 50
// ComHold ( i ) ;
8977: LD_VAR 0 2
8981: PPUSH
8982: CALL_OW 140
// end ;
8986: GO 8953
8988: POP
8989: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8990: LD_INT 22
8992: PUSH
8993: LD_INT 2
8995: PUSH
8996: EMPTY
8997: LIST
8998: LIST
8999: PUSH
9000: LD_INT 25
9002: PUSH
9003: LD_INT 2
9005: PUSH
9006: EMPTY
9007: LIST
9008: LIST
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: PPUSH
9014: CALL_OW 69
9018: NOT
9019: IFFALSE 9033
// SetClass ( Heike , 2 ) ;
9021: LD_EXP 25
9025: PPUSH
9026: LD_INT 2
9028: PPUSH
9029: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
9033: LD_EXP 25
9037: PPUSH
9038: LD_INT 183
9040: PPUSH
9041: LD_INT 12
9043: PPUSH
9044: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
9048: LD_EXP 25
9052: PPUSH
9053: LD_INT 188
9055: PPUSH
9056: LD_INT 20
9058: PPUSH
9059: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
9063: LD_EXP 25
9067: PPUSH
9068: LD_INT 191
9070: PPUSH
9071: LD_INT 25
9073: PPUSH
9074: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
9078: LD_EXP 25
9082: PPUSH
9083: LD_INT 203
9085: PPUSH
9086: LD_INT 29
9088: PPUSH
9089: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
9093: LD_EXP 25
9097: PPUSH
9098: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
9102: LD_INT 35
9104: PPUSH
9105: CALL_OW 67
// until not IsInUnit ( Heike ) ;
9109: LD_EXP 25
9113: PPUSH
9114: CALL_OW 310
9118: NOT
9119: IFFALSE 9102
// CenterOnUnits ( Heike ) ;
9121: LD_EXP 25
9125: PPUSH
9126: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
9130: LD_ADDR_VAR 0 5
9134: PUSH
9135: LD_INT 22
9137: PUSH
9138: LD_INT 2
9140: PUSH
9141: EMPTY
9142: LIST
9143: LIST
9144: PUSH
9145: LD_INT 21
9147: PUSH
9148: LD_INT 1
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PPUSH
9159: CALL_OW 69
9163: PUSH
9164: LD_EXP 25
9168: PUSH
9169: LD_EXP 32
9173: PUSH
9174: EMPTY
9175: LIST
9176: LIST
9177: DIFF
9178: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
9179: LD_VAR 0 5
9183: PPUSH
9184: LD_EXP 25
9188: PPUSH
9189: CALL_OW 119
// if Givi then
9193: LD_EXP 26
9197: IFFALSE 9215
// ComTurnUnit ( Heike , Givi ) else
9199: LD_EXP 25
9203: PPUSH
9204: LD_EXP 26
9208: PPUSH
9209: CALL_OW 119
9213: GO 9233
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
9215: LD_EXP 25
9219: PPUSH
9220: LD_VAR 0 5
9224: PUSH
9225: LD_INT 1
9227: ARRAY
9228: PPUSH
9229: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
9233: LD_EXP 25
9237: PPUSH
9238: LD_STRING DH-Start-1
9240: PPUSH
9241: CALL_OW 88
// if Givi then
9245: LD_EXP 26
9249: IFFALSE 9296
// begin Say ( Givi , DG-Start-2 ) ;
9251: LD_EXP 26
9255: PPUSH
9256: LD_STRING DG-Start-2
9258: PPUSH
9259: CALL_OW 88
// if not Mike then
9263: LD_EXP 27
9267: NOT
9268: IFFALSE 9294
// begin Say ( Givi , DG-Start-b-3 ) ;
9270: LD_EXP 26
9274: PPUSH
9275: LD_STRING DG-Start-b-3
9277: PPUSH
9278: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
9282: LD_EXP 25
9286: PPUSH
9287: LD_STRING DH-Start-b-4
9289: PPUSH
9290: CALL_OW 88
// end ; end else
9294: GO 9361
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
9296: LD_EXP 37
9300: PPUSH
9301: LD_INT 26
9303: PUSH
9304: LD_INT 1
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: PPUSH
9311: CALL_OW 72
9315: PUSH
9316: LD_INT 1
9318: ARRAY
9319: PPUSH
9320: LD_STRING DArm-Start-a-2
9322: PPUSH
9323: CALL_OW 88
9327: NOT
9328: IFFALSE 9361
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
9330: LD_EXP 37
9334: PPUSH
9335: LD_INT 26
9337: PUSH
9338: LD_INT 2
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: PPUSH
9345: CALL_OW 72
9349: PUSH
9350: LD_INT 1
9352: ARRAY
9353: PPUSH
9354: LD_STRING DArf-Start-a-2
9356: PPUSH
9357: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
9361: LD_EXP 25
9365: PPUSH
9366: LD_INT 211
9368: PPUSH
9369: LD_INT 38
9371: PPUSH
9372: CALL_OW 118
// wait ( 0 0$1 ) ;
9376: LD_INT 35
9378: PPUSH
9379: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
9383: LD_EXP 25
9387: PPUSH
9388: LD_STRING DH-Start-3
9390: PPUSH
9391: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9395: LD_EXP 25
9399: PPUSH
9400: LD_STRING DH-Start-4
9402: PPUSH
9403: CALL_OW 88
// InGameOff ;
9407: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
9411: LD_STRING Prepare
9413: PPUSH
9414: CALL_OW 337
// SaveForQuickRestart ;
9418: CALL_OW 22
// wait ( 0 0$10 ) ;
9422: LD_INT 350
9424: PPUSH
9425: CALL_OW 67
// if not Aviradze then
9429: LD_EXP 35
9433: NOT
9434: IFFALSE 9438
// exit ;
9436: GO 9678
// SetDir ( Aviradze , 4 ) ;
9438: LD_EXP 35
9442: PPUSH
9443: LD_INT 4
9445: PPUSH
9446: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
9450: LD_EXP 35
9454: PPUSH
9455: LD_INT 225
9457: PPUSH
9458: LD_INT 33
9460: PPUSH
9461: LD_INT 0
9463: PPUSH
9464: CALL_OW 48
// for i := 1 to 2 do
9468: LD_ADDR_VAR 0 2
9472: PUSH
9473: DOUBLE
9474: LD_INT 1
9476: DEC
9477: ST_TO_ADDR
9478: LD_INT 2
9480: PUSH
9481: FOR_TO
9482: IFFALSE 9613
// begin uc_side := 2 ;
9484: LD_ADDR_OWVAR 20
9488: PUSH
9489: LD_INT 2
9491: ST_TO_ADDR
// uc_nation := 0 ;
9492: LD_ADDR_OWVAR 21
9496: PUSH
9497: LD_INT 0
9499: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9500: LD_INT 0
9502: PPUSH
9503: LD_INT 12
9505: PPUSH
9506: LD_INT 1
9508: PPUSH
9509: CALL_OW 380
// hc_gallery :=  ;
9513: LD_ADDR_OWVAR 33
9517: PUSH
9518: LD_STRING 
9520: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
9521: LD_ADDR_OWVAR 26
9525: PUSH
9526: LD_STRING Artudito
9528: PUSH
9529: LD_STRING Textur
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: PUSH
9536: LD_VAR 0 2
9540: ARRAY
9541: ST_TO_ADDR
// un := CreateHuman ;
9542: LD_ADDR_VAR 0 3
9546: PUSH
9547: CALL_OW 44
9551: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9552: LD_VAR 0 3
9556: PPUSH
9557: LD_INT 224
9559: PUSH
9560: LD_INT 226
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: PUSH
9567: LD_VAR 0 2
9571: ARRAY
9572: PPUSH
9573: LD_INT 31
9575: PUSH
9576: LD_INT 35
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: PUSH
9583: LD_VAR 0 2
9587: ARRAY
9588: PPUSH
9589: LD_INT 0
9591: PPUSH
9592: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9596: LD_VAR 0 3
9600: PPUSH
9601: LD_INT 215
9603: PPUSH
9604: LD_INT 36
9606: PPUSH
9607: CALL_OW 111
// end ;
9611: GO 9481
9613: POP
9614: POP
// hc_name :=  ;
9615: LD_ADDR_OWVAR 26
9619: PUSH
9620: LD_STRING 
9622: ST_TO_ADDR
// InitHc ;
9623: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9627: LD_EXP 35
9631: PPUSH
9632: LD_INT 215
9634: PPUSH
9635: LD_INT 36
9637: PPUSH
9638: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
9642: LD_EXP 35
9646: PPUSH
9647: LD_STRING DA-Arrive-1
9649: PPUSH
9650: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
9654: LD_EXP 25
9658: PPUSH
9659: LD_STRING DH-Arrive-2
9661: PPUSH
9662: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
9666: LD_EXP 35
9670: PPUSH
9671: LD_STRING DA-Arrive-3
9673: PPUSH
9674: CALL_OW 88
// end ;
9678: LD_VAR 0 1
9682: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
9683: LD_EXP 3
9687: IFFALSE 10996
9689: GO 9691
9691: DISABLE
9692: LD_INT 0
9694: PPUSH
9695: PPUSH
9696: PPUSH
// begin DialogueOn ;
9697: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9701: LD_EXP 25
9705: PPUSH
9706: LD_STRING DH-base-1
9708: PPUSH
9709: CALL_OW 88
// if Markov then
9713: LD_EXP 32
9717: IFFALSE 9769
// begin Say ( Markov , DMar-base-2 ) ;
9719: LD_EXP 32
9723: PPUSH
9724: LD_STRING DMar-base-2
9726: PPUSH
9727: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9731: LD_EXP 32
9735: PPUSH
9736: LD_STRING DMar-base-3
9738: PPUSH
9739: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9743: LD_EXP 25
9747: PPUSH
9748: LD_STRING DH-base-4
9750: PPUSH
9751: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9755: LD_EXP 32
9759: PPUSH
9760: LD_STRING DMar-base-5
9762: PPUSH
9763: CALL_OW 88
// end else
9767: GO 9846
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9769: LD_EXP 37
9773: PPUSH
9774: LD_INT 26
9776: PUSH
9777: LD_INT 1
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: PPUSH
9784: CALL_OW 72
9788: PUSH
9789: LD_INT 1
9791: ARRAY
9792: PPUSH
9793: LD_STRING DArm-base-a-2
9795: PPUSH
9796: CALL_OW 88
9800: NOT
9801: IFFALSE 9834
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9803: LD_EXP 37
9807: PPUSH
9808: LD_INT 26
9810: PUSH
9811: LD_INT 2
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: PPUSH
9818: CALL_OW 72
9822: PUSH
9823: LD_INT 1
9825: ARRAY
9826: PPUSH
9827: LD_STRING DArf-base-a-2
9829: PPUSH
9830: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9834: LD_EXP 25
9838: PPUSH
9839: LD_STRING DH-base-a-3
9841: PPUSH
9842: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9846: LD_EXP 35
9850: PPUSH
9851: LD_STRING DA-base-6
9853: PPUSH
9854: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9858: LD_EXP 35
9862: PPUSH
9863: LD_STRING DA-base-7
9865: PPUSH
9866: CALL_OW 88
// DialogueOff ;
9870: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9874: LD_STRING Flamethrower
9876: PPUSH
9877: CALL_OW 337
// wait ( 2 2$00 ) ;
9881: LD_INT 4200
9883: PPUSH
9884: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9888: LD_EXP 34
9892: PUSH
9893: LD_EXP 27
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: PPUSH
9902: LD_INT 203
9904: PPUSH
9905: LD_INT 37
9907: PPUSH
9908: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9912: LD_INT 22
9914: PUSH
9915: LD_INT 2
9917: PUSH
9918: EMPTY
9919: LIST
9920: LIST
9921: PUSH
9922: LD_INT 92
9924: PUSH
9925: LD_INT 203
9927: PUSH
9928: LD_INT 37
9930: PUSH
9931: LD_INT 10
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PPUSH
9944: CALL_OW 69
9948: NOT
9949: IFFALSE 9989
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9951: LD_EXP 34
9955: PUSH
9956: LD_EXP 27
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: PPUSH
9965: LD_EXP 25
9969: PPUSH
9970: CALL_OW 250
9974: PPUSH
9975: LD_EXP 25
9979: PPUSH
9980: CALL_OW 251
9984: PPUSH
9985: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9989: LD_INT 35
9991: PPUSH
9992: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9996: LD_INT 2
9998: PPUSH
9999: LD_EXP 34
10003: PPUSH
10004: CALL_OW 292
10008: PUSH
10009: LD_EXP 34
10013: PPUSH
10014: LD_EXP 25
10018: PPUSH
10019: CALL_OW 296
10023: PUSH
10024: LD_INT 8
10026: LESS
10027: PUSH
10028: LD_EXP 34
10032: PPUSH
10033: LD_INT 22
10035: PUSH
10036: LD_INT 2
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: PUSH
10043: LD_INT 21
10045: PUSH
10046: LD_INT 3
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PUSH
10053: EMPTY
10054: LIST
10055: LIST
10056: PPUSH
10057: CALL_OW 69
10061: PPUSH
10062: LD_EXP 34
10066: PPUSH
10067: CALL_OW 74
10071: PPUSH
10072: CALL_OW 296
10076: PUSH
10077: LD_INT 7
10079: LESS
10080: OR
10081: AND
10082: PUSH
10083: LD_EXP 34
10087: PPUSH
10088: LD_INT 10
10090: PPUSH
10091: CALL_OW 308
10095: NOT
10096: AND
10097: IFFALSE 9989
// InGameOn ;
10099: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
10103: LD_EXP 34
10107: PPUSH
10108: CALL_OW 87
// if IsInUnit ( Heike ) then
10112: LD_EXP 25
10116: PPUSH
10117: CALL_OW 310
10121: IFFALSE 10132
// ComExitBuilding ( Heike ) ;
10123: LD_EXP 25
10127: PPUSH
10128: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
10132: LD_EXP 34
10136: PUSH
10137: LD_EXP 27
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: PPUSH
10146: LD_EXP 25
10150: PPUSH
10151: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
10155: LD_EXP 25
10159: PPUSH
10160: LD_EXP 34
10164: PPUSH
10165: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
10169: LD_INT 22
10171: PUSH
10172: LD_INT 2
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: PUSH
10179: LD_INT 91
10181: PUSH
10182: LD_EXP 34
10186: PUSH
10187: LD_INT 10
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: LIST
10194: PUSH
10195: LD_INT 21
10197: PUSH
10198: LD_INT 3
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: LIST
10209: PPUSH
10210: CALL_OW 69
10214: IFFALSE 10240
// begin Say ( Kurt , DKs-scout-1 ) ;
10216: LD_EXP 34
10220: PPUSH
10221: LD_STRING DKs-scout-1
10223: PPUSH
10224: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
10228: LD_EXP 25
10232: PPUSH
10233: LD_STRING DH-scout-2
10235: PPUSH
10236: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
10240: LD_INT 35
10242: PPUSH
10243: CALL_OW 67
// until GetDistUnits ( Heike , Kurt ) < 6 ;
10247: LD_EXP 25
10251: PPUSH
10252: LD_EXP 34
10256: PPUSH
10257: CALL_OW 296
10261: PUSH
10262: LD_INT 6
10264: LESS
10265: IFFALSE 10240
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
10267: LD_EXP 34
10271: PUSH
10272: LD_EXP 27
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: PPUSH
10281: LD_EXP 25
10285: PPUSH
10286: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
10290: LD_EXP 34
10294: PPUSH
10295: LD_STRING DKs-scout-3
10297: PPUSH
10298: CALL_OW 88
// if Kaia then
10302: LD_EXP 30
10306: IFFALSE 10489
// begin if IsInUnit ( Kaia ) then
10308: LD_EXP 30
10312: PPUSH
10313: CALL_OW 310
10317: IFFALSE 10328
// ComExitBuilding ( Kaia ) ;
10319: LD_EXP 30
10323: PPUSH
10324: CALL_OW 122
// AddComMoveUnit ( Kaia , Kurt ) ;
10328: LD_EXP 30
10332: PPUSH
10333: LD_EXP 34
10337: PPUSH
10338: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
10342: LD_INT 35
10344: PPUSH
10345: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
10349: LD_EXP 30
10353: PPUSH
10354: LD_EXP 34
10358: PPUSH
10359: CALL_OW 296
10363: PUSH
10364: LD_INT 6
10366: LESS
10367: IFFALSE 10342
// ComTurnUnit ( Kaia , Kurt ) ;
10369: LD_EXP 30
10373: PPUSH
10374: LD_EXP 34
10378: PPUSH
10379: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
10383: LD_EXP 30
10387: PPUSH
10388: LD_STRING DK-scout-4
10390: PPUSH
10391: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
10395: LD_EXP 34
10399: PPUSH
10400: LD_EXP 30
10404: PPUSH
10405: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
10409: LD_EXP 34
10413: PPUSH
10414: LD_STRING DKs-scout-5
10416: PPUSH
10417: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
10421: LD_EXP 30
10425: PPUSH
10426: LD_STRING DK-scout-6
10428: PPUSH
10429: CALL_OW 88
// if Mike then
10433: LD_EXP 27
10437: IFFALSE 10489
// begin Say ( Mike , DM-scout-7 ) ;
10439: LD_EXP 27
10443: PPUSH
10444: LD_STRING DM-scout-7
10446: PPUSH
10447: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
10451: LD_EXP 30
10455: PPUSH
10456: LD_EXP 27
10460: PPUSH
10461: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
10465: LD_EXP 30
10469: PPUSH
10470: LD_STRING DK-scout-8
10472: PPUSH
10473: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
10477: LD_EXP 27
10481: PPUSH
10482: LD_STRING DM-scout-9
10484: PPUSH
10485: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
10489: LD_INT 184
10491: PPUSH
10492: LD_INT 100
10494: PPUSH
10495: LD_INT 2
10497: PPUSH
10498: LD_INT 12
10500: NEG
10501: PPUSH
10502: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
10506: LD_INT 184
10508: PPUSH
10509: LD_INT 100
10511: PPUSH
10512: LD_INT 2
10514: PPUSH
10515: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
10519: LD_INT 184
10521: PPUSH
10522: LD_INT 100
10524: PPUSH
10525: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
10529: LD_EXP 34
10533: PPUSH
10534: LD_STRING DKs-scout-10
10536: PPUSH
10537: CALL_OW 88
// wait ( 0 0$1 ) ;
10541: LD_INT 35
10543: PPUSH
10544: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
10548: LD_INT 144
10550: PPUSH
10551: LD_INT 65
10553: PPUSH
10554: LD_INT 2
10556: PPUSH
10557: LD_INT 12
10559: NEG
10560: PPUSH
10561: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
10565: LD_INT 144
10567: PPUSH
10568: LD_INT 65
10570: PPUSH
10571: LD_INT 2
10573: PPUSH
10574: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
10578: LD_INT 144
10580: PPUSH
10581: LD_INT 65
10583: PPUSH
10584: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
10588: LD_EXP 34
10592: PPUSH
10593: LD_STRING DKs-scout-11
10595: PPUSH
10596: CALL_OW 88
// wait ( 0 0$1 ) ;
10600: LD_INT 35
10602: PPUSH
10603: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
10607: LD_EXP 34
10611: PPUSH
10612: CALL_OW 87
// if Mike and not Givi then
10616: LD_EXP 27
10620: PUSH
10621: LD_EXP 26
10625: NOT
10626: AND
10627: IFFALSE 10653
// begin Say ( Mike , DM-scout-a-1 ) ;
10629: LD_EXP 27
10633: PPUSH
10634: LD_STRING DM-scout-a-1
10636: PPUSH
10637: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
10641: LD_EXP 25
10645: PPUSH
10646: LD_STRING DH-scout-a-2
10648: PPUSH
10649: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10653: LD_EXP 34
10657: PUSH
10658: LD_EXP 27
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: PPUSH
10667: LD_INT 2
10669: PPUSH
10670: CALL_OW 235
// InGameOff ;
10674: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
10678: LD_STRING Hill
10680: PPUSH
10681: CALL_OW 337
// allowToPatrol := true ;
10685: LD_ADDR_EXP 12
10689: PUSH
10690: LD_INT 1
10692: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10693: LD_INT 3150
10695: PPUSH
10696: CALL_OW 67
// InitHc ;
10700: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 ] [ Difficulty ] do
10704: LD_ADDR_VAR 0 1
10708: PUSH
10709: DOUBLE
10710: LD_INT 1
10712: DEC
10713: ST_TO_ADDR
10714: LD_INT 3
10716: PUSH
10717: LD_INT 3
10719: PUSH
10720: LD_INT 2
10722: PUSH
10723: EMPTY
10724: LIST
10725: LIST
10726: LIST
10727: PUSH
10728: LD_OWVAR 67
10732: ARRAY
10733: PUSH
10734: FOR_TO
10735: IFFALSE 10994
// begin uc_side := 2 ;
10737: LD_ADDR_OWVAR 20
10741: PUSH
10742: LD_INT 2
10744: ST_TO_ADDR
// uc_nation := 2 ;
10745: LD_ADDR_OWVAR 21
10749: PUSH
10750: LD_INT 2
10752: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 ] [ Difficulty ] ) ;
10753: LD_INT 0
10755: PPUSH
10756: LD_INT 1
10758: PUSH
10759: LD_INT 3
10761: PUSH
10762: LD_INT 1
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: LIST
10769: PUSH
10770: LD_VAR 0 1
10774: PUSH
10775: LD_INT 3
10777: MOD
10778: PUSH
10779: LD_INT 1
10781: PLUS
10782: ARRAY
10783: PPUSH
10784: LD_INT 3
10786: PUSH
10787: LD_INT 2
10789: PUSH
10790: LD_INT 2
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: LIST
10797: PUSH
10798: LD_OWVAR 67
10802: ARRAY
10803: PPUSH
10804: CALL_OW 380
// un := CreateHuman ;
10808: LD_ADDR_VAR 0 2
10812: PUSH
10813: CALL_OW 44
10817: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10818: LD_ADDR_EXP 37
10822: PUSH
10823: LD_EXP 37
10827: PUSH
10828: LD_VAR 0 2
10832: UNION
10833: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10834: LD_INT 2
10836: PPUSH
10837: LD_INT 2
10839: PPUSH
10840: LD_INT 13
10842: PPUSH
10843: LD_INT 2
10845: PUSH
10846: LD_INT 1
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PUSH
10853: LD_VAR 0 1
10857: PUSH
10858: LD_INT 2
10860: MOD
10861: PUSH
10862: LD_INT 1
10864: PLUS
10865: ARRAY
10866: PPUSH
10867: LD_INT 1
10869: PPUSH
10870: LD_INT 27
10872: PUSH
10873: LD_INT 25
10875: PUSH
10876: LD_INT 27
10878: PUSH
10879: LD_INT 23
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: PUSH
10888: LD_OWVAR 67
10892: PUSH
10893: LD_INT 0
10895: PPUSH
10896: LD_INT 1
10898: PPUSH
10899: CALL_OW 12
10903: PLUS
10904: ARRAY
10905: PPUSH
10906: LD_INT 77
10908: PPUSH
10909: CALL 345 0 7
// veh := CreateVehicle ;
10913: LD_ADDR_VAR 0 3
10917: PUSH
10918: CALL_OW 45
10922: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10923: LD_VAR 0 3
10927: PPUSH
10928: LD_INT 2
10930: PPUSH
10931: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10935: LD_VAR 0 3
10939: PPUSH
10940: LD_INT 178
10942: PPUSH
10943: LD_INT 2
10945: PPUSH
10946: LD_INT 2
10948: PPUSH
10949: LD_INT 0
10951: PPUSH
10952: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10956: LD_VAR 0 2
10960: PPUSH
10961: LD_VAR 0 3
10965: PPUSH
10966: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10970: LD_VAR 0 2
10974: PPUSH
10975: LD_INT 183
10977: PPUSH
10978: LD_INT 11
10980: PPUSH
10981: CALL_OW 111
// wait ( 0 0$2 ) ;
10985: LD_INT 70
10987: PPUSH
10988: CALL_OW 67
// end ;
10992: GO 10734
10994: POP
10995: POP
// end ;
10996: PPOPN 3
10998: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10999: LD_EXP 4
11003: PUSH
11004: LD_EXP 35
11008: PPUSH
11009: CALL_OW 302
11013: AND
11014: IFFALSE 11063
11016: GO 11018
11018: DISABLE
// begin DialogueOn ;
11019: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
11023: LD_EXP 35
11027: PPUSH
11028: LD_STRING DA-lab-1
11030: PPUSH
11031: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
11035: LD_EXP 35
11039: PPUSH
11040: LD_STRING DA-lab-2
11042: PPUSH
11043: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
11047: LD_EXP 25
11051: PPUSH
11052: LD_STRING DH-lab-3
11054: PPUSH
11055: CALL_OW 88
// DialogueOff ;
11059: CALL_OW 7
// end ;
11063: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
11064: LD_INT 17
11066: PPUSH
11067: LD_INT 2
11069: PPUSH
11070: CALL_OW 321
11074: PUSH
11075: LD_INT 2
11077: EQUAL
11078: IFFALSE 11210
11080: GO 11082
11082: DISABLE
11083: LD_INT 0
11085: PPUSH
// begin DialogueOn ;
11086: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
11090: LD_EXP 35
11094: PPUSH
11095: LD_STRING DA-Cam-1
11097: PPUSH
11098: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
11102: LD_EXP 35
11106: PPUSH
11107: LD_STRING DA-Cam-2
11109: PPUSH
11110: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
11114: LD_EXP 35
11118: PPUSH
11119: LD_STRING DA-Cam-3
11121: PPUSH
11122: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
11126: LD_EXP 25
11130: PPUSH
11131: LD_STRING DH-Cam-4
11133: PPUSH
11134: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
11138: LD_EXP 30
11142: PPUSH
11143: LD_STRING DK-Cam-5
11145: PPUSH
11146: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
11150: LD_EXP 30
11154: PPUSH
11155: LD_STRING DK-Cam-6
11157: PPUSH
11158: CALL_OW 88
// DialogueOff ;
11162: CALL_OW 7
// Query ( Camera ) ;
11166: LD_STRING Camera
11168: PPUSH
11169: CALL_OW 97
// hiddenCameraAllowed := true ;
11173: LD_ADDR_EXP 5
11177: PUSH
11178: LD_INT 1
11180: ST_TO_ADDR
// for i in camAreas do
11181: LD_ADDR_VAR 0 1
11185: PUSH
11186: LD_EXP 8
11190: PUSH
11191: FOR_IN
11192: IFFALSE 11208
// SetAreaMapShow ( i , 1 ) ;
11194: LD_VAR 0 1
11198: PPUSH
11199: LD_INT 1
11201: PPUSH
11202: CALL_OW 424
11206: GO 11191
11208: POP
11209: POP
// end ;
11210: PPOPN 1
11212: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
11213: LD_EXP 8
11217: NOT
11218: PUSH
11219: LD_EXP 5
11223: AND
11224: IFFALSE 11322
11226: GO 11228
11228: DISABLE
11229: LD_INT 0
11231: PPUSH
// begin stop_talking := true ;
11232: LD_ADDR_OWVAR 56
11236: PUSH
11237: LD_INT 1
11239: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
11240: LD_ADDR_VAR 0 1
11244: PUSH
11245: LD_INT 22
11247: PUSH
11248: LD_INT 2
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PUSH
11255: LD_INT 21
11257: PUSH
11258: LD_INT 1
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PUSH
11265: LD_INT 23
11267: PUSH
11268: LD_INT 2
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: PUSH
11275: EMPTY
11276: LIST
11277: LIST
11278: LIST
11279: PPUSH
11280: CALL_OW 69
11284: PUSH
11285: FOR_IN
11286: IFFALSE 11305
// AddExperience ( i , 2 , 450 ) ;
11288: LD_VAR 0 1
11292: PPUSH
11293: LD_INT 2
11295: PPUSH
11296: LD_INT 450
11298: PPUSH
11299: CALL_OW 492
11303: GO 11285
11305: POP
11306: POP
// stop_talking := false ;
11307: LD_ADDR_OWVAR 56
11311: PUSH
11312: LD_INT 0
11314: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
11315: LD_STRING ACH_CAMERA
11317: PPUSH
11318: CALL_OW 543
// end ;
11322: PPOPN 1
11324: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
11325: LD_EXP 9
11329: PUSH
11330: LD_EXP 11
11334: NOT
11335: AND
11336: IFFALSE 11395
11338: GO 11340
11340: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
11341: LD_EXP 9
11345: PPUSH
11346: CALL_OW 250
11350: PPUSH
11351: LD_EXP 9
11355: PPUSH
11356: CALL_OW 251
11360: PPUSH
11361: LD_INT 2
11363: PPUSH
11364: LD_INT 6
11366: NEG
11367: PPUSH
11368: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
11372: LD_EXP 9
11376: PPUSH
11377: CALL_OW 87
// wait ( 0 0$1 ) ;
11381: LD_INT 35
11383: PPUSH
11384: CALL_OW 67
// YouLost ( Spotted ) ;
11388: LD_STRING Spotted
11390: PPUSH
11391: CALL_OW 104
// end ;
11395: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
11396: LD_INT 3
11398: PUSH
11399: LD_INT 6
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: PPUSH
11406: LD_INT 2
11408: PPUSH
11409: LD_EXP 47
11413: PPUSH
11414: CALL 1965 0 3
11418: IFFALSE 11451
11420: GO 11422
11422: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
11423: LD_ADDR_EXP 9
11427: PUSH
11428: LD_INT 3
11430: PUSH
11431: LD_INT 6
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: PPUSH
11438: LD_INT 2
11440: PPUSH
11441: LD_EXP 47
11445: PPUSH
11446: CALL 1965 0 3
11450: ST_TO_ADDR
11451: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
11452: LD_INT 22
11454: PUSH
11455: LD_INT 6
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: PUSH
11462: LD_INT 30
11464: PUSH
11465: LD_INT 32
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PUSH
11472: LD_INT 3
11474: PUSH
11475: LD_INT 24
11477: PUSH
11478: LD_INT 1000
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: LIST
11493: PPUSH
11494: CALL_OW 69
11498: IFFALSE 11559
11500: GO 11502
11502: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
11503: LD_ADDR_EXP 9
11507: PUSH
11508: LD_INT 22
11510: PUSH
11511: LD_INT 6
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: PUSH
11518: LD_INT 30
11520: PUSH
11521: LD_INT 32
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PUSH
11528: LD_INT 3
11530: PUSH
11531: LD_INT 24
11533: PUSH
11534: LD_INT 1000
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: LIST
11549: PPUSH
11550: CALL_OW 69
11554: PUSH
11555: LD_INT 1
11557: ARRAY
11558: ST_TO_ADDR
11559: END
// every 0 0$1 trigger russianAlert do var i , tmp , towers , noncombat ;
11560: LD_EXP 9
11564: IFFALSE 11796
11566: GO 11568
11568: DISABLE
11569: LD_INT 0
11571: PPUSH
11572: PPUSH
11573: PPUSH
11574: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11575: LD_ADDR_VAR 0 4
11579: PUSH
11580: LD_EXP 42
11584: PUSH
11585: LD_EXP 44
11589: PUSH
11590: LD_EXP 45
11594: UNION
11595: PPUSH
11596: LD_INT 3
11598: PUSH
11599: LD_INT 25
11601: PUSH
11602: LD_INT 1
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: PPUSH
11613: CALL_OW 72
11617: UNION
11618: ST_TO_ADDR
// for i in noncombat do
11619: LD_ADDR_VAR 0 1
11623: PUSH
11624: LD_VAR 0 4
11628: PUSH
11629: FOR_IN
11630: IFFALSE 11726
// begin if IsInUnit ( i ) then
11632: LD_VAR 0 1
11636: PPUSH
11637: CALL_OW 310
11641: IFFALSE 11652
// ComExitBuilding ( i ) ;
11643: LD_VAR 0 1
11647: PPUSH
11648: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
11652: LD_VAR 0 1
11656: PPUSH
11657: LD_INT 114
11659: PPUSH
11660: LD_INT 97
11662: PPUSH
11663: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
11667: LD_VAR 0 1
11671: PPUSH
11672: LD_INT 99
11674: PPUSH
11675: LD_INT 128
11677: PPUSH
11678: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
11682: LD_VAR 0 1
11686: PPUSH
11687: LD_INT 91
11689: PPUSH
11690: LD_INT 145
11692: PPUSH
11693: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
11697: LD_VAR 0 1
11701: PPUSH
11702: LD_INT 82
11704: PPUSH
11705: LD_INT 153
11707: PPUSH
11708: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
11712: LD_VAR 0 1
11716: PPUSH
11717: LD_INT 16
11719: PPUSH
11720: CALL_OW 173
// end ;
11724: GO 11629
11726: POP
11727: POP
// if not allowHeikeAttack then
11728: LD_EXP 11
11732: NOT
11733: IFFALSE 11737
// exit ;
11735: GO 11796
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11737: LD_EXP 40
11741: PPUSH
11742: LD_STRING D9a-Kur-1
11744: PPUSH
11745: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11749: LD_EXP 43
11753: PPUSH
11754: LD_STRING D9a-Bur-1
11756: PPUSH
11757: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11761: LD_EXP 40
11765: PPUSH
11766: LD_STRING D9a-Kur-2
11768: PPUSH
11769: CALL_OW 94
// omicronFall := true ;
11773: LD_ADDR_EXP 13
11777: PUSH
11778: LD_INT 1
11780: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11781: LD_INT 105
11783: PPUSH
11784: CALL_OW 67
// retreatFromOmicron := true ;
11788: LD_ADDR_EXP 20
11792: PUSH
11793: LD_INT 1
11795: ST_TO_ADDR
// end ;
11796: PPOPN 4
11798: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11799: LD_INT 16
11801: PPUSH
11802: LD_INT 3
11804: PUSH
11805: LD_INT 22
11807: PUSH
11808: LD_INT 2
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: PUSH
11819: LD_INT 23
11821: PUSH
11822: LD_INT 3
11824: PUSH
11825: EMPTY
11826: LIST
11827: LIST
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: PPUSH
11833: CALL_OW 70
11837: IFFALSE 11920
11839: GO 11841
11841: DISABLE
11842: LD_INT 0
11844: PPUSH
// begin enable ;
11845: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11846: LD_ADDR_VAR 0 1
11850: PUSH
11851: LD_INT 16
11853: PPUSH
11854: LD_INT 3
11856: PUSH
11857: LD_INT 22
11859: PUSH
11860: LD_INT 2
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PUSH
11871: LD_INT 23
11873: PUSH
11874: LD_INT 3
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PPUSH
11885: CALL_OW 70
11889: PUSH
11890: FOR_IN
11891: IFFALSE 11918
// begin escapeCounter := escapeCounter + 1 ;
11893: LD_ADDR_EXP 19
11897: PUSH
11898: LD_EXP 19
11902: PUSH
11903: LD_INT 1
11905: PLUS
11906: ST_TO_ADDR
// RemoveUnit ( i ) ;
11907: LD_VAR 0 1
11911: PPUSH
11912: CALL_OW 64
// end ;
11916: GO 11890
11918: POP
11919: POP
// end ;
11920: PPOPN 1
11922: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11923: LD_OWVAR 1
11927: PUSH
11928: LD_INT 13650
11930: PUSH
11931: LD_INT 0
11933: PPUSH
11934: LD_INT 3150
11936: PPUSH
11937: CALL_OW 12
11941: PLUS
11942: GREATEREQUAL
11943: IFFALSE 11952
11945: GO 11947
11947: DISABLE
// SmallAmericanReinforcements ;
11948: CALL 7405 0 0
11952: END
// every 0 0$1 trigger tick >= 9 9$15 do
11953: LD_OWVAR 1
11957: PUSH
11958: LD_INT 19425
11960: GREATEREQUAL
11961: IFFALSE 12026
11963: GO 11965
11965: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11966: LD_EXP 48
11970: PPUSH
11971: LD_INT 21
11973: PUSH
11974: LD_INT 2
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: PPUSH
11981: CALL_OW 72
11985: PPUSH
11986: LD_INT 62
11988: PPUSH
11989: LD_INT 22
11991: PPUSH
11992: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11996: LD_EXP 49
12000: PPUSH
12001: LD_INT 69
12003: PPUSH
12004: LD_INT 27
12006: PPUSH
12007: CALL_OW 111
// wait ( 1 1$00 ) ;
12011: LD_INT 2100
12013: PPUSH
12014: CALL_OW 67
// startAttackOnOmicron := true ;
12018: LD_ADDR_EXP 6
12022: PUSH
12023: LD_INT 1
12025: ST_TO_ADDR
// end ;
12026: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
12027: LD_EXP 22
12031: PUSH
12032: LD_INT 0
12034: EQUAL
12035: IFFALSE 13908
12037: GO 12039
12039: DISABLE
12040: LD_INT 0
12042: PPUSH
12043: PPUSH
12044: PPUSH
12045: PPUSH
12046: PPUSH
12047: PPUSH
12048: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
12049: LD_INT 5
12051: PPUSH
12052: LD_INT 2
12054: PPUSH
12055: CALL_OW 343
// PrepareOmarForces ;
12059: CALL 2535 0 0
// wait ( 0 0$03 ) ;
12063: LD_INT 105
12065: PPUSH
12066: CALL_OW 67
// allowHeikeAttack := true ;
12070: LD_ADDR_EXP 11
12074: PUSH
12075: LD_INT 1
12077: ST_TO_ADDR
// activeGrishkoAI := false ;
12078: LD_ADDR_EXP 10
12082: PUSH
12083: LD_INT 0
12085: ST_TO_ADDR
// if not hillBase then
12086: LD_EXP 15
12090: NOT
12091: IFFALSE 12100
// ChangeMissionObjectives ( HillDone ) ;
12093: LD_STRING HillDone
12095: PPUSH
12096: CALL_OW 337
// CenterOnUnits ( Omar ) ;
12100: LD_EXP 33
12104: PPUSH
12105: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
12109: LD_ADDR_VAR 0 1
12113: PUSH
12114: LD_INT 22
12116: PUSH
12117: LD_INT 2
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: PUSH
12124: LD_INT 21
12126: PUSH
12127: LD_INT 1
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PPUSH
12138: CALL_OW 69
12142: PUSH
12143: FOR_IN
12144: IFFALSE 12168
// if HasTask ( i ) then
12146: LD_VAR 0 1
12150: PPUSH
12151: CALL_OW 314
12155: IFFALSE 12166
// ComHold ( i ) ;
12157: LD_VAR 0 1
12161: PPUSH
12162: CALL_OW 140
12166: GO 12143
12168: POP
12169: POP
// DialogueOn ;
12170: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
12174: LD_EXP 33
12178: PPUSH
12179: LD_STRING DO-assault-1
12181: PPUSH
12182: CALL_OW 94
// DialogueOff ;
12186: CALL_OW 7
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
12190: LD_ADDR_VAR 0 1
12194: PUSH
12195: LD_EXP 46
12199: PPUSH
12200: LD_INT 3
12202: PUSH
12203: LD_INT 54
12205: PUSH
12206: EMPTY
12207: LIST
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: PPUSH
12213: CALL_OW 72
12217: PUSH
12218: FOR_IN
12219: IFFALSE 12238
// ComMoveXY ( i , 226 , 114 ) ;
12221: LD_VAR 0 1
12225: PPUSH
12226: LD_INT 226
12228: PPUSH
12229: LD_INT 114
12231: PPUSH
12232: CALL_OW 111
12236: GO 12218
12238: POP
12239: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
12240: LD_EXP 41
12244: PPUSH
12245: LD_INT 22
12247: PUSH
12248: LD_INT 6
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PUSH
12255: LD_INT 30
12257: PUSH
12258: LD_INT 4
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: PPUSH
12269: CALL_OW 69
12273: PPUSH
12274: LD_EXP 41
12278: PPUSH
12279: CALL_OW 74
12283: PPUSH
12284: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
12288: LD_STRING Attack
12290: PPUSH
12291: CALL_OW 337
// music_class := music_combat ;
12295: LD_ADDR_OWVAR 72
12299: PUSH
12300: LD_INT 1
12302: ST_TO_ADDR
// music_nat := 4 ;
12303: LD_ADDR_OWVAR 71
12307: PUSH
12308: LD_INT 4
12310: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
12311: LD_INT 5
12313: PPUSH
12314: LD_EXP 41
12318: PPUSH
12319: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12323: LD_INT 6
12325: PPUSH
12326: LD_EXP 38
12330: PPUSH
12331: LD_INT 25
12333: PUSH
12334: LD_INT 1
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PPUSH
12341: CALL_OW 72
12345: PUSH
12346: LD_INT 4
12348: ARRAY
12349: PPUSH
12350: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
12354: LD_ADDR_VAR 0 1
12358: PUSH
12359: LD_EXP 38
12363: PPUSH
12364: LD_INT 3
12366: PUSH
12367: LD_INT 25
12369: PUSH
12370: LD_INT 4
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: PPUSH
12381: CALL_OW 72
12385: PUSH
12386: FOR_IN
12387: IFFALSE 12406
// ComAgressiveMove ( i , 221 , 110 ) ;
12389: LD_VAR 0 1
12393: PPUSH
12394: LD_INT 221
12396: PPUSH
12397: LD_INT 110
12399: PPUSH
12400: CALL_OW 114
12404: GO 12386
12406: POP
12407: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
12408: LD_EXP 38
12412: PPUSH
12413: LD_INT 25
12415: PUSH
12416: LD_INT 4
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PPUSH
12423: CALL_OW 72
12427: PPUSH
12428: LD_INT 214
12430: PPUSH
12431: LD_INT 124
12433: PPUSH
12434: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
12438: LD_EXP 38
12442: PPUSH
12443: LD_INT 25
12445: PUSH
12446: LD_INT 1
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: PPUSH
12453: CALL_OW 72
12457: PUSH
12458: LD_INT 4
12460: ARRAY
12461: PPUSH
12462: LD_INT 214
12464: PPUSH
12465: LD_INT 114
12467: PPUSH
12468: LD_INT 0
12470: PPUSH
12471: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
12475: LD_EXP 41
12479: PPUSH
12480: LD_STRING D9-Gri-1
12482: PPUSH
12483: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
12487: LD_EXP 40
12491: PPUSH
12492: LD_STRING D9-Kur-1
12494: PPUSH
12495: CALL_OW 94
// wait ( 0 0$1 ) ;
12499: LD_INT 35
12501: PPUSH
12502: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
12506: LD_EXP 33
12510: PPUSH
12511: LD_INT 233
12513: PPUSH
12514: LD_INT 130
12516: PPUSH
12517: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
12521: LD_EXP 41
12525: PPUSH
12526: LD_STRING D9-Gri-2
12528: PPUSH
12529: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12533: LD_EXP 40
12537: PPUSH
12538: LD_STRING D9-Kur-2
12540: PPUSH
12541: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
12545: LD_EXP 41
12549: PPUSH
12550: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
12554: LD_EXP 41
12558: PPUSH
12559: LD_INT 211
12561: PPUSH
12562: LD_INT 104
12564: PPUSH
12565: CALL_OW 171
// AddComHold ( Grishko ) ;
12569: LD_EXP 41
12573: PPUSH
12574: CALL_OW 200
// repeat wait ( 3 ) ;
12578: LD_INT 3
12580: PPUSH
12581: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
12585: LD_EXP 41
12589: PPUSH
12590: CALL_OW 310
12594: NOT
12595: IFFALSE 12578
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
12597: LD_EXP 38
12601: PPUSH
12602: LD_INT 34
12604: PUSH
12605: LD_INT 26
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: PPUSH
12612: CALL_OW 72
12616: PPUSH
12617: LD_EXP 41
12621: PPUSH
12622: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12626: LD_EXP 38
12630: PPUSH
12631: LD_INT 34
12633: PUSH
12634: LD_INT 26
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: PPUSH
12641: CALL_OW 72
12645: PPUSH
12646: LD_INT 215
12648: PPUSH
12649: LD_INT 106
12651: PPUSH
12652: CALL_OW 174
// repeat wait ( 3 ) ;
12656: LD_INT 3
12658: PPUSH
12659: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12663: LD_EXP 41
12667: PPUSH
12668: CALL_OW 256
12672: PUSH
12673: LD_INT 1000
12675: LESS
12676: IFFALSE 12656
// NormalAttack ( 5 , Grishko ) ;
12678: LD_INT 5
12680: PPUSH
12681: LD_EXP 41
12685: PPUSH
12686: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12690: LD_INT 6
12692: PPUSH
12693: LD_EXP 38
12697: PPUSH
12698: LD_INT 25
12700: PUSH
12701: LD_INT 1
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: PPUSH
12708: CALL_OW 72
12712: PUSH
12713: LD_INT 4
12715: ARRAY
12716: PPUSH
12717: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
12721: LD_EXP 41
12725: PPUSH
12726: LD_STRING D9-Gri-3
12728: PPUSH
12729: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12733: LD_EXP 40
12737: PPUSH
12738: LD_STRING D9-Kur-3
12740: PPUSH
12741: CALL_OW 94
// music_class := music_auto ;
12745: LD_ADDR_OWVAR 72
12749: PUSH
12750: LD_INT 0
12752: ST_TO_ADDR
// music_nat := music_auto ;
12753: LD_ADDR_OWVAR 71
12757: PUSH
12758: LD_INT 0
12760: ST_TO_ADDR
// for i in omarSquad do
12761: LD_ADDR_VAR 0 1
12765: PUSH
12766: LD_EXP 38
12770: PUSH
12771: FOR_IN
12772: IFFALSE 12914
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12774: LD_VAR 0 1
12778: PPUSH
12779: CALL_OW 247
12783: PUSH
12784: LD_INT 2
12786: EQUAL
12787: PUSH
12788: LD_VAR 0 1
12792: PPUSH
12793: CALL_OW 256
12797: PUSH
12798: LD_INT 1000
12800: LESS
12801: AND
12802: IFFALSE 12868
// begin driver := IsDrivenBy ( i ) ;
12804: LD_ADDR_VAR 0 2
12808: PUSH
12809: LD_VAR 0 1
12813: PPUSH
12814: CALL_OW 311
12818: ST_TO_ADDR
// veh := i ;
12819: LD_ADDR_VAR 0 3
12823: PUSH
12824: LD_VAR 0 1
12828: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12829: LD_VAR 0 2
12833: PPUSH
12834: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12838: LD_VAR 0 2
12842: PPUSH
12843: LD_VAR 0 3
12847: PPUSH
12848: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12852: LD_VAR 0 2
12856: PPUSH
12857: LD_VAR 0 3
12861: PPUSH
12862: CALL_OW 180
// end else
12866: GO 12912
// if GetLives ( i ) < 500 then
12868: LD_VAR 0 1
12872: PPUSH
12873: CALL_OW 256
12877: PUSH
12878: LD_INT 500
12880: LESS
12881: IFFALSE 12912
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12883: LD_EXP 38
12887: PPUSH
12888: LD_INT 25
12890: PUSH
12891: LD_INT 4
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: PPUSH
12898: CALL_OW 72
12902: PPUSH
12903: LD_VAR 0 1
12907: PPUSH
12908: CALL_OW 188
// end ; end ;
12912: GO 12771
12914: POP
12915: POP
// repeat wait ( 0 0$1 ) ;
12916: LD_INT 35
12918: PPUSH
12919: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12923: LD_EXP 38
12927: PPUSH
12928: LD_INT 3
12930: PUSH
12931: LD_INT 24
12933: PUSH
12934: LD_INT 1000
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: PUSH
12945: LD_INT 21
12947: PUSH
12948: LD_INT 2
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PPUSH
12959: CALL_OW 72
12963: NOT
12964: PUSH
12965: LD_EXP 38
12969: PPUSH
12970: LD_INT 3
12972: PUSH
12973: LD_INT 24
12975: PUSH
12976: LD_INT 250
12978: PUSH
12979: EMPTY
12980: LIST
12981: LIST
12982: PUSH
12983: EMPTY
12984: LIST
12985: LIST
12986: PPUSH
12987: CALL_OW 72
12991: NOT
12992: AND
12993: IFFALSE 12916
// wait ( 0 0$2 ) ;
12995: LD_INT 70
12997: PPUSH
12998: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
13002: LD_ADDR_VAR 0 5
13006: PUSH
13007: LD_EXP 38
13011: PPUSH
13012: LD_INT 58
13014: PUSH
13015: EMPTY
13016: LIST
13017: PUSH
13018: LD_INT 21
13020: PUSH
13021: LD_INT 2
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: PPUSH
13032: CALL_OW 72
13036: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
13037: LD_ADDR_VAR 0 6
13041: PUSH
13042: LD_EXP 38
13046: PPUSH
13047: LD_INT 25
13049: PUSH
13050: LD_INT 3
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PUSH
13057: LD_INT 3
13059: PUSH
13060: LD_INT 55
13062: PUSH
13063: EMPTY
13064: LIST
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: PPUSH
13074: CALL_OW 72
13078: ST_TO_ADDR
// for i := 1 to tmp do
13079: LD_ADDR_VAR 0 1
13083: PUSH
13084: DOUBLE
13085: LD_INT 1
13087: DEC
13088: ST_TO_ADDR
13089: LD_VAR 0 5
13093: PUSH
13094: FOR_TO
13095: IFFALSE 13125
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
13097: LD_VAR 0 6
13101: PUSH
13102: LD_VAR 0 1
13106: ARRAY
13107: PPUSH
13108: LD_VAR 0 5
13112: PUSH
13113: LD_VAR 0 1
13117: ARRAY
13118: PPUSH
13119: CALL_OW 120
13123: GO 13094
13125: POP
13126: POP
// wait ( 0 0$5 ) ;
13127: LD_INT 175
13129: PPUSH
13130: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
13134: LD_EXP 38
13138: PPUSH
13139: LD_INT 199
13141: PPUSH
13142: LD_INT 141
13144: PPUSH
13145: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
13149: LD_EXP 33
13153: PPUSH
13154: LD_INT 190
13156: PPUSH
13157: LD_INT 143
13159: PPUSH
13160: CALL_OW 114
// AddComHold ( Omar ) ;
13164: LD_EXP 33
13168: PPUSH
13169: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
13173: LD_EXP 38
13177: PPUSH
13178: LD_INT 2
13180: PUSH
13181: LD_INT 25
13183: PUSH
13184: LD_INT 1
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: PUSH
13191: LD_INT 25
13193: PUSH
13194: LD_INT 4
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: LIST
13205: PPUSH
13206: CALL_OW 72
13210: PPUSH
13211: LD_INT 161
13213: PPUSH
13214: LD_INT 130
13216: PPUSH
13217: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
13221: LD_EXP 38
13225: PPUSH
13226: LD_INT 25
13228: PUSH
13229: LD_INT 1
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: PPUSH
13236: CALL_OW 72
13240: PPUSH
13241: LD_INT 163
13243: PPUSH
13244: LD_INT 122
13246: PPUSH
13247: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
13251: LD_EXP 38
13255: PPUSH
13256: LD_INT 25
13258: PUSH
13259: LD_INT 1
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: PPUSH
13266: CALL_OW 72
13270: PUSH
13271: LD_INT 4
13273: ARRAY
13274: PPUSH
13275: LD_INT 165
13277: PPUSH
13278: LD_INT 118
13280: PPUSH
13281: LD_INT 0
13283: PPUSH
13284: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
13288: LD_EXP 38
13292: PPUSH
13293: LD_INT 25
13295: PUSH
13296: LD_INT 1
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: PPUSH
13303: CALL_OW 72
13307: PUSH
13308: LD_INT 4
13310: ARRAY
13311: PPUSH
13312: LD_INT 159
13314: PPUSH
13315: LD_INT 116
13317: PPUSH
13318: LD_INT 0
13320: PPUSH
13321: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
13325: LD_EXP 38
13329: PPUSH
13330: LD_INT 21
13332: PUSH
13333: LD_INT 2
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: PPUSH
13340: CALL_OW 72
13344: PPUSH
13345: LD_INT 169
13347: PPUSH
13348: LD_INT 114
13350: PPUSH
13351: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
13355: LD_INT 35
13357: PPUSH
13358: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
13362: LD_ADDR_VAR 0 5
13366: PUSH
13367: LD_EXP 38
13371: PPUSH
13372: LD_INT 25
13374: PUSH
13375: LD_INT 1
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: PPUSH
13382: CALL_OW 72
13386: ST_TO_ADDR
// for i in tmp do
13387: LD_ADDR_VAR 0 1
13391: PUSH
13392: LD_VAR 0 5
13396: PUSH
13397: FOR_IN
13398: IFFALSE 13495
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
13400: LD_VAR 0 1
13404: PPUSH
13405: CALL_OW 256
13409: PUSH
13410: LD_INT 600
13412: LESS
13413: PUSH
13414: LD_VAR 0 1
13418: PPUSH
13419: LD_INT 161
13421: PPUSH
13422: LD_INT 130
13424: PPUSH
13425: CALL_OW 297
13429: PUSH
13430: LD_INT 6
13432: GREATER
13433: AND
13434: IFFALSE 13451
// ComMoveXY ( i , 161 , 130 ) ;
13436: LD_VAR 0 1
13440: PPUSH
13441: LD_INT 161
13443: PPUSH
13444: LD_INT 130
13446: PPUSH
13447: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
13451: LD_VAR 0 1
13455: PPUSH
13456: CALL_OW 256
13460: PUSH
13461: LD_INT 1000
13463: EQUAL
13464: PUSH
13465: LD_VAR 0 1
13469: PPUSH
13470: CALL_OW 314
13474: NOT
13475: AND
13476: IFFALSE 13493
// ComAgressiveMove ( i , 160 , 109 ) ;
13478: LD_VAR 0 1
13482: PPUSH
13483: LD_INT 160
13485: PPUSH
13486: LD_INT 109
13488: PPUSH
13489: CALL_OW 114
// end ;
13493: GO 13397
13495: POP
13496: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
13497: LD_ADDR_VAR 0 5
13501: PUSH
13502: LD_EXP 38
13506: PPUSH
13507: LD_INT 21
13509: PUSH
13510: LD_INT 2
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: PPUSH
13517: CALL_OW 72
13521: ST_TO_ADDR
// for i in tmp do
13522: LD_ADDR_VAR 0 1
13526: PUSH
13527: LD_VAR 0 5
13531: PUSH
13532: FOR_IN
13533: IFFALSE 13799
// begin tmp2 := IsDrivenBy ( i ) ;
13535: LD_ADDR_VAR 0 6
13539: PUSH
13540: LD_VAR 0 1
13544: PPUSH
13545: CALL_OW 311
13549: ST_TO_ADDR
// if not tmp2 then
13550: LD_VAR 0 6
13554: NOT
13555: IFFALSE 13559
// continue ;
13557: GO 13532
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
13559: LD_VAR 0 1
13563: PPUSH
13564: CALL_OW 256
13568: PUSH
13569: LD_INT 600
13571: GREATEREQUAL
13572: PUSH
13573: LD_VAR 0 1
13577: PPUSH
13578: CALL_OW 110
13582: PUSH
13583: LD_INT 1
13585: EQUAL
13586: AND
13587: IFFALSE 13601
// SetTag ( i , 0 ) ;
13589: LD_VAR 0 1
13593: PPUSH
13594: LD_INT 0
13596: PPUSH
13597: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
13601: LD_VAR 0 1
13605: PPUSH
13606: CALL_OW 256
13610: PUSH
13611: LD_INT 600
13613: GREATEREQUAL
13614: PUSH
13615: LD_VAR 0 1
13619: PPUSH
13620: CALL_OW 110
13624: NOT
13625: AND
13626: IFFALSE 13652
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13628: LD_VAR 0 1
13632: PPUSH
13633: LD_VAR 0 7
13637: PPUSH
13638: LD_VAR 0 1
13642: PPUSH
13643: CALL_OW 74
13647: PPUSH
13648: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13652: LD_VAR 0 1
13656: PPUSH
13657: CALL_OW 256
13661: PUSH
13662: LD_INT 600
13664: LESS
13665: PUSH
13666: LD_VAR 0 1
13670: PPUSH
13671: CALL_OW 110
13675: NOT
13676: AND
13677: IFFALSE 13706
// begin SetTag ( i , 1 ) ;
13679: LD_VAR 0 1
13683: PPUSH
13684: LD_INT 1
13686: PPUSH
13687: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13691: LD_VAR 0 1
13695: PPUSH
13696: LD_INT 202
13698: PPUSH
13699: LD_INT 150
13701: PPUSH
13702: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13706: LD_VAR 0 1
13710: PPUSH
13711: CALL_OW 110
13715: PUSH
13716: LD_INT 1
13718: EQUAL
13719: PUSH
13720: LD_VAR 0 1
13724: PPUSH
13725: LD_INT 202
13727: PPUSH
13728: LD_INT 150
13730: PPUSH
13731: CALL_OW 297
13735: PUSH
13736: LD_INT 6
13738: LESS
13739: AND
13740: PUSH
13741: LD_VAR 0 6
13745: AND
13746: IFFALSE 13797
// begin ComExitVehicle ( tmp2 ) ;
13748: LD_VAR 0 6
13752: PPUSH
13753: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13757: LD_VAR 0 6
13761: PPUSH
13762: LD_VAR 0 1
13766: PPUSH
13767: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13771: LD_VAR 0 6
13775: PPUSH
13776: LD_INT 700
13778: PPUSH
13779: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13783: LD_VAR 0 6
13787: PPUSH
13788: LD_VAR 0 1
13792: PPUSH
13793: CALL_OW 180
// end ; end ;
13797: GO 13532
13799: POP
13800: POP
// until kirovDestroyed ;
13801: LD_EXP 16
13805: IFFALSE 13355
// repeat wait ( 0 0$1 ) ;
13807: LD_INT 35
13809: PPUSH
13810: CALL_OW 67
// for i in omarSquad union Omar do
13814: LD_ADDR_VAR 0 1
13818: PUSH
13819: LD_EXP 38
13823: PUSH
13824: LD_EXP 33
13828: UNION
13829: PUSH
13830: FOR_IN
13831: IFFALSE 13875
// if IsInArea ( i , southRoadArea ) then
13833: LD_VAR 0 1
13837: PPUSH
13838: LD_INT 15
13840: PPUSH
13841: CALL_OW 308
13845: IFFALSE 13858
// RemoveUnit ( i ) else
13847: LD_VAR 0 1
13851: PPUSH
13852: CALL_OW 64
13856: GO 13873
// ComMoveXY ( i , 208 , 162 ) ;
13858: LD_VAR 0 1
13862: PPUSH
13863: LD_INT 208
13865: PPUSH
13866: LD_INT 162
13868: PPUSH
13869: CALL_OW 111
13873: GO 13830
13875: POP
13876: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
13877: LD_INT 22
13879: PUSH
13880: LD_INT 5
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: PUSH
13887: LD_INT 21
13889: PUSH
13890: LD_INT 1
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PPUSH
13901: CALL_OW 69
13905: NOT
13906: IFFALSE 13807
// end ;
13908: PPOPN 7
13910: END
// every 0 0$1 trigger IsDead ( kirov ) do
13911: LD_INT 71
13913: PPUSH
13914: CALL_OW 301
13918: IFFALSE 13935
13920: GO 13922
13922: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
13923: LD_EXP 25
13927: PPUSH
13928: LD_STRING DH-1-Kirov
13930: PPUSH
13931: CALL_OW 88
13935: END
// every 0 0$1 trigger See ( 2 , beria ) do
13936: LD_INT 2
13938: PPUSH
13939: LD_INT 106
13941: PPUSH
13942: CALL_OW 292
13946: IFFALSE 13963
13948: GO 13950
13950: DISABLE
// Say ( Heike , DH-1-Beria ) ;
13951: LD_EXP 25
13955: PPUSH
13956: LD_STRING DH-1-Beria
13958: PPUSH
13959: CALL_OW 88
13963: END
// every 0 0$1 trigger See ( 2 , kagan ) do
13964: LD_INT 2
13966: PPUSH
13967: LD_INT 112
13969: PPUSH
13970: CALL_OW 292
13974: IFFALSE 14219
13976: GO 13978
13978: DISABLE
// begin DialogueOn ;
13979: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
13983: LD_INT 112
13985: PPUSH
13986: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
13990: LD_EXP 25
13994: PPUSH
13995: LD_STRING DH-1-Kagan
13997: PPUSH
13998: CALL_OW 88
// if Kamil then
14002: LD_EXP 29
14006: IFFALSE 14044
// begin Say ( Kamil , DKam-Kagan-2 ) ;
14008: LD_EXP 29
14012: PPUSH
14013: LD_STRING DKam-Kagan-2
14015: PPUSH
14016: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
14020: LD_EXP 26
14024: PPUSH
14025: LD_STRING DG-Kagan-3
14027: PPUSH
14028: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
14032: LD_EXP 26
14036: PPUSH
14037: LD_STRING DG-Kagan-4
14039: PPUSH
14040: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
14044: LD_STRING KaganBase
14046: PPUSH
14047: CALL_OW 97
14051: PUSH
14052: LD_INT 1
14054: DOUBLE
14055: EQUAL
14056: IFTRUE 14060
14058: GO 14155
14060: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
14061: LD_EXP 25
14065: PPUSH
14066: LD_STRING DH-Kagan-5
14068: PPUSH
14069: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
14073: LD_EXP 25
14077: PPUSH
14078: LD_STRING DH-Kagan-6
14080: PPUSH
14081: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
14085: LD_EXP 36
14089: PPUSH
14090: LD_STRING DShar-Kagan-7
14092: PPUSH
14093: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
14097: LD_EXP 25
14101: PPUSH
14102: LD_STRING DH-Kagan-8
14104: PPUSH
14105: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
14109: LD_EXP 25
14113: PPUSH
14114: LD_STRING DH-Kagan-9
14116: PPUSH
14117: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
14121: LD_EXP 36
14125: PPUSH
14126: LD_STRING DShar-Kagan-10
14128: PPUSH
14129: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
14133: LD_EXP 25
14137: PPUSH
14138: LD_STRING DH-Kagan-11
14140: PPUSH
14141: CALL_OW 88
// kaganCaptured := true ;
14145: LD_ADDR_EXP 24
14149: PUSH
14150: LD_INT 1
14152: ST_TO_ADDR
// end ; 2 :
14153: GO 14215
14155: LD_INT 2
14157: DOUBLE
14158: EQUAL
14159: IFTRUE 14163
14161: GO 14214
14163: POP
// begin Say ( Heike , DH-Kagan-a-5 ) ;
14164: LD_EXP 25
14168: PPUSH
14169: LD_STRING DH-Kagan-a-5
14171: PPUSH
14172: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
14176: LD_EXP 25
14180: PPUSH
14181: LD_STRING DH-Kagan-a-6
14183: PPUSH
14184: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
14188: LD_EXP 25
14192: PPUSH
14193: LD_STRING DH-Kagan-a-7
14195: PPUSH
14196: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
14200: LD_EXP 26
14204: PPUSH
14205: LD_STRING DG-Kagan-a-8
14207: PPUSH
14208: CALL_OW 88
// end ; end ;
14212: GO 14215
14214: POP
// DialogueOff ;
14215: CALL_OW 7
// end ;
14219: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
14220: LD_EXP 18
14224: PUSH
14225: LD_INT 112
14227: PPUSH
14228: CALL_OW 255
14232: PUSH
14233: LD_INT 2
14235: EQUAL
14236: OR
14237: IFFALSE 14249
14239: GO 14241
14241: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
14242: LD_STRING KaganDone
14244: PPUSH
14245: CALL_OW 337
14249: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
14250: LD_EXP 6
14254: PUSH
14255: LD_EXP 48
14259: PPUSH
14260: LD_INT 95
14262: PUSH
14263: LD_INT 19
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PPUSH
14270: CALL_OW 72
14274: AND
14275: IFFALSE 14352
14277: GO 14279
14279: DISABLE
// begin DialogueOn ;
14280: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
14284: LD_INT 63
14286: PPUSH
14287: LD_INT 32
14289: PPUSH
14290: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
14294: LD_INT 63
14296: PPUSH
14297: LD_INT 32
14299: PPUSH
14300: LD_INT 2
14302: PPUSH
14303: LD_INT 12
14305: NEG
14306: PPUSH
14307: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
14311: LD_EXP 25
14315: PPUSH
14316: LD_STRING DH-Omicron-1
14318: PPUSH
14319: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
14323: LD_EXP 27
14327: PPUSH
14328: LD_STRING DM-Omicron-2
14330: PPUSH
14331: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
14335: LD_INT 63
14337: PPUSH
14338: LD_INT 32
14340: PPUSH
14341: LD_INT 2
14343: PPUSH
14344: CALL_OW 331
// DialogueOff ;
14348: CALL_OW 7
// end ;
14352: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
14353: LD_INT 2
14355: PPUSH
14356: LD_EXP 50
14360: PPUSH
14361: CALL_OW 292
14365: PUSH
14366: LD_EXP 50
14370: PPUSH
14371: CALL_OW 255
14375: PUSH
14376: LD_INT 2
14378: EQUAL
14379: OR
14380: PUSH
14381: LD_INT 106
14383: PPUSH
14384: CALL_OW 255
14388: PUSH
14389: LD_INT 2
14391: EQUAL
14392: OR
14393: PUSH
14394: LD_EXP 50
14398: PPUSH
14399: CALL_OW 302
14403: AND
14404: PUSH
14405: LD_EXP 25
14409: PPUSH
14410: CALL_OW 302
14414: AND
14415: PUSH
14416: LD_EXP 35
14420: PPUSH
14421: CALL_OW 302
14425: AND
14426: IFFALSE 15030
14428: GO 14430
14430: DISABLE
14431: LD_INT 0
14433: PPUSH
14434: PPUSH
14435: PPUSH
14436: PPUSH
14437: PPUSH
// begin DialogueOn ;
14438: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
14442: LD_INT 111
14444: PPUSH
14445: LD_INT 90
14447: PPUSH
14448: LD_INT 2
14450: PPUSH
14451: LD_INT 6
14453: NEG
14454: PPUSH
14455: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
14459: LD_INT 111
14461: PPUSH
14462: LD_INT 90
14464: PPUSH
14465: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
14469: LD_EXP 35
14473: PPUSH
14474: LD_STRING DA-Cap-1
14476: PPUSH
14477: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
14481: LD_EXP 25
14485: PPUSH
14486: LD_STRING DH-Cap-2
14488: PPUSH
14489: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
14493: LD_INT 111
14495: PPUSH
14496: LD_INT 90
14498: PPUSH
14499: LD_INT 2
14501: PPUSH
14502: CALL_OW 331
// DialogueOff ;
14506: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
14510: LD_INT 35
14512: PPUSH
14513: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) ;
14517: LD_EXP 17
14521: PUSH
14522: LD_INT 106
14524: PPUSH
14525: CALL_OW 255
14529: PUSH
14530: LD_INT 2
14532: EQUAL
14533: OR
14534: PUSH
14535: LD_EXP 50
14539: PPUSH
14540: CALL_OW 255
14544: PUSH
14545: LD_INT 2
14547: EQUAL
14548: OR
14549: PUSH
14550: LD_EXP 50
14554: PPUSH
14555: CALL_OW 302
14559: AND
14560: PUSH
14561: LD_EXP 35
14565: PPUSH
14566: CALL_OW 302
14570: AND
14571: IFFALSE 14510
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14573: LD_ADDR_VAR 0 2
14577: PUSH
14578: LD_EXP 37
14582: PUSH
14583: LD_EXP 28
14587: PUSH
14588: LD_EXP 29
14592: PUSH
14593: LD_EXP 31
14597: PUSH
14598: LD_EXP 30
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: UNION
14609: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14610: LD_ADDR_VAR 0 2
14614: PUSH
14615: LD_VAR 0 2
14619: PPUSH
14620: LD_INT 50
14622: PUSH
14623: EMPTY
14624: LIST
14625: PPUSH
14626: CALL_OW 72
14630: ST_TO_ADDR
// if tmp < 2 then
14631: LD_VAR 0 2
14635: PUSH
14636: LD_INT 2
14638: LESS
14639: IFFALSE 14651
// q := 2 else
14641: LD_ADDR_VAR 0 4
14645: PUSH
14646: LD_INT 2
14648: ST_TO_ADDR
14649: GO 14664
// q := Query ( LabCap ) ;
14651: LD_ADDR_VAR 0 4
14655: PUSH
14656: LD_STRING LabCap
14658: PPUSH
14659: CALL_OW 97
14663: ST_TO_ADDR
// case q of 1 :
14664: LD_VAR 0 4
14668: PUSH
14669: LD_INT 1
14671: DOUBLE
14672: EQUAL
14673: IFTRUE 14677
14675: GO 14994
14677: POP
// begin DoNotAttack ( 2 , ruLab ) ;
14678: LD_INT 2
14680: PPUSH
14681: LD_EXP 50
14685: PPUSH
14686: CALL_OW 471
// labCaptured := true ;
14690: LD_ADDR_EXP 21
14694: PUSH
14695: LD_INT 1
14697: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
14698: LD_EXP 25
14702: PPUSH
14703: LD_STRING DH-Cap-a-1
14705: PPUSH
14706: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
14710: LD_EXP 35
14714: PPUSH
14715: LD_STRING DA-Cap-a-2
14717: PPUSH
14718: CALL_OW 88
// settings := [ Heike , sel_changeable ] ^ tmp ^ [ sel_not_hired , sel_not_changeable , Aviradze ] ;
14722: LD_ADDR_VAR 0 5
14726: PUSH
14727: LD_EXP 25
14731: PUSH
14732: LD_INT -3
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: LD_VAR 0 2
14743: ADD
14744: PUSH
14745: LD_INT -2
14747: PUSH
14748: LD_INT -4
14750: PUSH
14751: LD_EXP 35
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: LIST
14760: ADD
14761: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
14762: LD_ADDR_VAR 0 3
14766: PUSH
14767: LD_STRING Select two characters to go with Aviradze
14769: PPUSH
14770: LD_INT 2
14772: PPUSH
14773: LD_INT 2
14775: PPUSH
14776: LD_VAR 0 5
14780: PPUSH
14781: EMPTY
14782: PPUSH
14783: CALL_OW 42
14787: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
14788: LD_EXP 50
14792: PPUSH
14793: LD_INT 8
14795: PPUSH
14796: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
14800: LD_EXP 35
14804: PPUSH
14805: LD_INT 8
14807: PPUSH
14808: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
14812: LD_ADDR_EXP 39
14816: PUSH
14817: LD_EXP 35
14821: PUSH
14822: EMPTY
14823: LIST
14824: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
14825: LD_EXP 35
14829: PPUSH
14830: CALL_OW 310
14834: IFFALSE 14845
// ComExit ( Aviradze ) ;
14836: LD_EXP 35
14840: PPUSH
14841: CALL 783 0 1
// wait ( 3 ) ;
14845: LD_INT 3
14847: PPUSH
14848: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
14852: LD_EXP 35
14856: PPUSH
14857: LD_EXP 50
14861: PPUSH
14862: CALL_OW 120
// for i := 1 to 2 do
14866: LD_ADDR_VAR 0 1
14870: PUSH
14871: DOUBLE
14872: LD_INT 1
14874: DEC
14875: ST_TO_ADDR
14876: LD_INT 2
14878: PUSH
14879: FOR_TO
14880: IFFALSE 14983
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
14882: LD_ADDR_EXP 39
14886: PUSH
14887: LD_EXP 39
14891: PUSH
14892: LD_VAR 0 3
14896: PUSH
14897: LD_VAR 0 1
14901: ARRAY
14902: UNION
14903: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
14904: LD_VAR 0 3
14908: PUSH
14909: LD_VAR 0 1
14913: ARRAY
14914: PPUSH
14915: LD_INT 8
14917: PPUSH
14918: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
14922: LD_VAR 0 3
14926: PUSH
14927: LD_VAR 0 1
14931: ARRAY
14932: PPUSH
14933: CALL_OW 310
14937: IFFALSE 14954
// ComExit ( tmp2 [ i ] ) ;
14939: LD_VAR 0 3
14943: PUSH
14944: LD_VAR 0 1
14948: ARRAY
14949: PPUSH
14950: CALL 783 0 1
// wait ( 3 ) ;
14954: LD_INT 3
14956: PPUSH
14957: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
14961: LD_VAR 0 3
14965: PUSH
14966: LD_VAR 0 1
14970: ARRAY
14971: PPUSH
14972: LD_EXP 50
14976: PPUSH
14977: CALL_OW 120
// end ;
14981: GO 14879
14983: POP
14984: POP
// SetAchievement ( ACH_LAB ) ;
14985: LD_STRING ACH_LAB
14987: PPUSH
14988: CALL_OW 543
// end ; 2 :
14992: GO 15030
14994: LD_INT 2
14996: DOUBLE
14997: EQUAL
14998: IFTRUE 15002
15000: GO 15029
15002: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
15003: LD_EXP 25
15007: PPUSH
15008: LD_STRING DH-Cap-b-1
15010: PPUSH
15011: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
15015: LD_EXP 35
15019: PPUSH
15020: LD_STRING DA-Cap-b-2
15022: PPUSH
15023: CALL_OW 88
// end ; end ;
15027: GO 15030
15029: POP
// end ;
15030: PPOPN 5
15032: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
15033: LD_INT 10
15035: PPUSH
15036: LD_INT 22
15038: PUSH
15039: LD_INT 2
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: PUSH
15046: LD_INT 30
15048: PUSH
15049: LD_INT 31
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: PPUSH
15060: CALL_OW 70
15064: PUSH
15065: LD_INT 2
15067: GREATEREQUAL
15068: IFFALSE 15080
15070: GO 15072
15072: DISABLE
// SetAchievement ( ACH_KING ) ;
15073: LD_STRING ACH_KING
15075: PPUSH
15076: CALL_OW 543
15080: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
15081: LD_EXP 11
15085: NOT
15086: PUSH
15087: LD_INT 10
15089: PPUSH
15090: LD_INT 22
15092: PUSH
15093: LD_INT 2
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: LD_INT 2
15102: PUSH
15103: LD_INT 30
15105: PUSH
15106: LD_INT 31
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: PUSH
15113: LD_INT 30
15115: PUSH
15116: LD_INT 4
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: LIST
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: PPUSH
15132: CALL_OW 70
15136: AND
15137: IFFALSE 15157
15139: GO 15141
15141: DISABLE
// begin hillBase := true ;
15142: LD_ADDR_EXP 15
15146: PUSH
15147: LD_INT 1
15149: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
15150: LD_STRING HillDone
15152: PPUSH
15153: CALL_OW 337
// end ;
15157: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
15158: LD_EXP 30
15162: PUSH
15163: LD_EXP 30
15167: PPUSH
15168: CALL_OW 256
15172: PUSH
15173: LD_INT 3
15175: LESS
15176: AND
15177: IFFALSE 15223
15179: GO 15181
15181: DISABLE
// begin DialogueOn ;
15182: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
15186: LD_EXP 30
15190: PPUSH
15191: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
15195: LD_EXP 30
15199: PPUSH
15200: LD_STRING DK-Kkilled-1
15202: PPUSH
15203: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
15207: LD_EXP 25
15211: PPUSH
15212: LD_STRING DH-Kkilled-2
15214: PPUSH
15215: CALL_OW 88
// DialogueOff ;
15219: CALL_OW 7
// end ;
15223: END
// every 0 0$1 trigger kaiaKilledByRussian do
15224: LD_EXP 23
15228: IFFALSE 15245
15230: GO 15232
15232: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
15233: LD_EXP 25
15237: PPUSH
15238: LD_STRING DH-Kkilled-3
15240: PPUSH
15241: CALL_OW 88
15245: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo ;
15246: LD_EXP 16
15250: PUSH
15251: LD_INT 106
15253: PPUSH
15254: CALL_OW 255
15258: PUSH
15259: LD_INT 2
15261: EQUAL
15262: PUSH
15263: LD_EXP 17
15267: OR
15268: AND
15269: PUSH
15270: LD_EXP 18
15274: PUSH
15275: LD_EXP 24
15279: PUSH
15280: LD_INT 112
15282: PPUSH
15283: CALL_OW 255
15287: PUSH
15288: LD_INT 2
15290: EQUAL
15291: AND
15292: OR
15293: AND
15294: IFFALSE 16476
15296: GO 15298
15298: DISABLE
15299: LD_INT 0
15301: PPUSH
15302: PPUSH
15303: PPUSH
15304: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
15305: LD_STRING GoToWest
15307: PPUSH
15308: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
15312: LD_INT 17
15314: PPUSH
15315: LD_INT 1
15317: PPUSH
15318: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
15322: LD_INT 35
15324: PPUSH
15325: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15329: LD_ADDR_VAR 0 2
15333: PUSH
15334: LD_INT 17
15336: PPUSH
15337: LD_INT 22
15339: PUSH
15340: LD_INT 2
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: LD_INT 2
15349: PUSH
15350: LD_INT 21
15352: PUSH
15353: LD_INT 1
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: PUSH
15360: LD_INT 21
15362: PUSH
15363: LD_INT 2
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: PUSH
15370: LD_INT 3
15372: PUSH
15373: LD_INT 58
15375: PUSH
15376: EMPTY
15377: LIST
15378: PUSH
15379: EMPTY
15380: LIST
15381: LIST
15382: PUSH
15383: EMPTY
15384: LIST
15385: LIST
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: LIST
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: PPUSH
15396: CALL_OW 70
15400: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15401: LD_ADDR_VAR 0 3
15405: PUSH
15406: LD_INT 22
15408: PUSH
15409: LD_INT 2
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: PUSH
15416: LD_INT 3
15418: PUSH
15419: LD_INT 55
15421: PUSH
15422: EMPTY
15423: LIST
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: PUSH
15429: LD_INT 2
15431: PUSH
15432: LD_INT 21
15434: PUSH
15435: LD_INT 1
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: PUSH
15442: LD_INT 21
15444: PUSH
15445: LD_INT 2
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: PUSH
15452: LD_INT 3
15454: PUSH
15455: LD_INT 58
15457: PUSH
15458: EMPTY
15459: LIST
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: LIST
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: LIST
15478: PPUSH
15479: CALL_OW 69
15483: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15484: LD_VAR 0 2
15488: PUSH
15489: LD_INT 0
15491: PLUS
15492: PUSH
15493: LD_VAR 0 3
15497: PUSH
15498: LD_INT 0
15500: PLUS
15501: EQUAL
15502: IFFALSE 15322
// SaveCharacters ( Heike , 04_1_Heike ) ;
15504: LD_EXP 25
15508: PPUSH
15509: LD_STRING 04_1_Heike
15511: PPUSH
15512: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15516: LD_EXP 35
15520: PUSH
15521: LD_EXP 35
15525: PUSH
15526: LD_EXP 39
15530: IN
15531: NOT
15532: AND
15533: IFFALSE 15549
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15535: LD_EXP 35
15539: PPUSH
15540: LD_STRING 04_1_Aviradze
15542: PPUSH
15543: CALL_OW 38
15547: GO 15567
// if Aviradze then
15549: LD_EXP 35
15553: IFFALSE 15567
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15555: LD_EXP 35
15559: PPUSH
15560: LD_STRING 04_1_Aviradze_L
15562: PPUSH
15563: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15567: LD_EXP 28
15571: PUSH
15572: LD_EXP 28
15576: PUSH
15577: LD_EXP 39
15581: IN
15582: NOT
15583: AND
15584: IFFALSE 15600
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15586: LD_EXP 28
15590: PPUSH
15591: LD_STRING 04_1_Ibrahim
15593: PPUSH
15594: CALL_OW 38
15598: GO 15618
// if Ibrahim then
15600: LD_EXP 28
15604: IFFALSE 15618
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
15606: LD_EXP 28
15610: PPUSH
15611: LD_STRING 04_1_Ibrahim_L
15613: PPUSH
15614: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
15618: LD_EXP 29
15622: PUSH
15623: LD_EXP 29
15627: PUSH
15628: LD_EXP 39
15632: IN
15633: NOT
15634: AND
15635: IFFALSE 15651
// SaveCharacters ( Kamil , 04_1_Kamil ) else
15637: LD_EXP 29
15641: PPUSH
15642: LD_STRING 04_1_Kamil
15644: PPUSH
15645: CALL_OW 38
15649: GO 15669
// if Kamil then
15651: LD_EXP 29
15655: IFFALSE 15669
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
15657: LD_EXP 29
15661: PPUSH
15662: LD_STRING 04_1_Kamil_L
15664: PPUSH
15665: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
15669: LD_EXP 31
15673: PUSH
15674: LD_EXP 31
15678: PUSH
15679: LD_EXP 39
15683: IN
15684: NOT
15685: AND
15686: IFFALSE 15702
// SaveCharacters ( Sophia , 04_1_Sophia ) else
15688: LD_EXP 31
15692: PPUSH
15693: LD_STRING 04_1_Sophia
15695: PPUSH
15696: CALL_OW 38
15700: GO 15720
// if Sophia then
15702: LD_EXP 31
15706: IFFALSE 15720
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
15708: LD_EXP 31
15712: PPUSH
15713: LD_STRING 04_1_Sophia_L
15715: PPUSH
15716: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
15720: LD_EXP 30
15724: PUSH
15725: LD_EXP 30
15729: PUSH
15730: LD_EXP 39
15734: IN
15735: NOT
15736: AND
15737: IFFALSE 15753
// SaveCharacters ( Kaia , 04_1_Kaia ) else
15739: LD_EXP 30
15743: PPUSH
15744: LD_STRING 04_1_Kaia
15746: PPUSH
15747: CALL_OW 38
15751: GO 15771
// if Kaia then
15753: LD_EXP 30
15757: IFFALSE 15771
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
15759: LD_EXP 30
15763: PPUSH
15764: LD_STRING 04_1_Kaia_L
15766: PPUSH
15767: CALL_OW 38
// if Givi then
15771: LD_EXP 26
15775: IFFALSE 15789
// SaveCharacters ( Givi , 04_1_Givi ) ;
15777: LD_EXP 26
15781: PPUSH
15782: LD_STRING 04_1_Givi
15784: PPUSH
15785: CALL_OW 38
// if Mike then
15789: LD_EXP 27
15793: IFFALSE 15807
// SaveCharacters ( Mike , 04_1_Mike ) ;
15795: LD_EXP 27
15799: PPUSH
15800: LD_STRING 04_1_Mike
15802: PPUSH
15803: CALL_OW 38
// if Markov then
15807: LD_EXP 32
15811: IFFALSE 15825
// SaveCharacters ( Markov , 04_1_Markov ) ;
15813: LD_EXP 32
15817: PPUSH
15818: LD_STRING 04_1_Markov
15820: PPUSH
15821: CALL_OW 38
// if Kurt then
15825: LD_EXP 34
15829: IFFALSE 15843
// SaveCharacters ( Kurt , 04_1_Kurt ) ;
15831: LD_EXP 34
15835: PPUSH
15836: LD_STRING 04_1_Kurt
15838: PPUSH
15839: CALL_OW 38
// if heikeSecondSquad diff aviradzeSquad then
15843: LD_EXP 37
15847: PUSH
15848: LD_EXP 39
15852: DIFF
15853: IFFALSE 15873
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
15855: LD_EXP 37
15859: PUSH
15860: LD_EXP 39
15864: DIFF
15865: PPUSH
15866: LD_STRING 04_1_others
15868: PPUSH
15869: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
15873: LD_EXP 39
15877: PUSH
15878: LD_EXP 37
15882: AND
15883: IFFALSE 15968
// begin tmp := [ ] ;
15885: LD_ADDR_VAR 0 2
15889: PUSH
15890: EMPTY
15891: ST_TO_ADDR
// for i in heikeSecondSquad do
15892: LD_ADDR_VAR 0 1
15896: PUSH
15897: LD_EXP 37
15901: PUSH
15902: FOR_IN
15903: IFFALSE 15948
// if i in aviradzeSquad then
15905: LD_VAR 0 1
15909: PUSH
15910: LD_EXP 39
15914: IN
15915: IFFALSE 15946
// tmp := Replace ( tmp , tmp + 1 , i ) ;
15917: LD_ADDR_VAR 0 2
15921: PUSH
15922: LD_VAR 0 2
15926: PPUSH
15927: LD_VAR 0 2
15931: PUSH
15932: LD_INT 1
15934: PLUS
15935: PPUSH
15936: LD_VAR 0 1
15940: PPUSH
15941: CALL_OW 1
15945: ST_TO_ADDR
15946: GO 15902
15948: POP
15949: POP
// if tmp then
15950: LD_VAR 0 2
15954: IFFALSE 15968
// SaveCharacters ( tmp , 04_1_others_L ) ;
15956: LD_VAR 0 2
15960: PPUSH
15961: LD_STRING 04_1_others_L
15963: PPUSH
15964: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
15968: LD_ADDR_VAR 0 2
15972: PUSH
15973: LD_INT 22
15975: PUSH
15976: LD_INT 2
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: PUSH
15983: LD_INT 23
15985: PUSH
15986: LD_INT 0
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: PPUSH
15997: CALL_OW 69
16001: ST_TO_ADDR
// if tmp then
16002: LD_VAR 0 2
16006: IFFALSE 16020
// SaveCharacters ( tmp , 04_1_apes ) ;
16008: LD_VAR 0 2
16012: PPUSH
16013: LD_STRING 04_1_apes
16015: PPUSH
16016: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
16020: LD_ADDR_VAR 0 2
16024: PUSH
16025: LD_INT 17
16027: PPUSH
16028: LD_INT 21
16030: PUSH
16031: LD_INT 2
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: PPUSH
16038: CALL_OW 70
16042: ST_TO_ADDR
// if tmp then
16043: LD_VAR 0 2
16047: IFFALSE 16341
// begin tmp2 := [ ] ;
16049: LD_ADDR_VAR 0 3
16053: PUSH
16054: EMPTY
16055: ST_TO_ADDR
// for i in tmp do
16056: LD_ADDR_VAR 0 1
16060: PUSH
16061: LD_VAR 0 2
16065: PUSH
16066: FOR_IN
16067: IFFALSE 16327
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
16069: LD_VAR 0 1
16073: PPUSH
16074: CALL_OW 264
16078: PUSH
16079: LD_INT 32
16081: PUSH
16082: LD_INT 12
16084: PUSH
16085: LD_INT 51
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: LIST
16092: IN
16093: IFFALSE 16230
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
16095: LD_ADDR_VAR 0 4
16099: PUSH
16100: LD_VAR 0 1
16104: PPUSH
16105: LD_INT 1
16107: PPUSH
16108: CALL_OW 289
16112: PUSH
16113: LD_VAR 0 1
16117: PPUSH
16118: LD_INT 2
16120: PPUSH
16121: CALL_OW 289
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
16130: LD_ADDR_VAR 0 3
16134: PUSH
16135: LD_VAR 0 3
16139: PPUSH
16140: LD_VAR 0 3
16144: PUSH
16145: LD_INT 1
16147: PLUS
16148: PPUSH
16149: LD_VAR 0 1
16153: PPUSH
16154: CALL_OW 265
16158: PUSH
16159: LD_VAR 0 1
16163: PPUSH
16164: CALL_OW 262
16168: PUSH
16169: LD_VAR 0 1
16173: PPUSH
16174: CALL_OW 263
16178: PUSH
16179: LD_VAR 0 1
16183: PPUSH
16184: CALL_OW 264
16188: PUSH
16189: LD_VAR 0 1
16193: PPUSH
16194: CALL_OW 248
16198: PUSH
16199: LD_VAR 0 1
16203: PPUSH
16204: CALL_OW 256
16208: PUSH
16209: LD_VAR 0 4
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: PPUSH
16223: CALL_OW 1
16227: ST_TO_ADDR
// end else
16228: GO 16325
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
16230: LD_ADDR_VAR 0 3
16234: PUSH
16235: LD_VAR 0 3
16239: PPUSH
16240: LD_VAR 0 3
16244: PUSH
16245: LD_INT 1
16247: PLUS
16248: PPUSH
16249: LD_VAR 0 1
16253: PPUSH
16254: CALL_OW 265
16258: PUSH
16259: LD_VAR 0 1
16263: PPUSH
16264: CALL_OW 262
16268: PUSH
16269: LD_VAR 0 1
16273: PPUSH
16274: CALL_OW 263
16278: PUSH
16279: LD_VAR 0 1
16283: PPUSH
16284: CALL_OW 264
16288: PUSH
16289: LD_VAR 0 1
16293: PPUSH
16294: CALL_OW 248
16298: PUSH
16299: LD_VAR 0 1
16303: PPUSH
16304: CALL_OW 256
16308: PUSH
16309: EMPTY
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: PPUSH
16320: CALL_OW 1
16324: ST_TO_ADDR
16325: GO 16066
16327: POP
16328: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
16329: LD_VAR 0 3
16333: PPUSH
16334: LD_STRING 04_1_Vehicles
16336: PPUSH
16337: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
16341: LD_EXP 21
16345: PPUSH
16346: LD_STRING 04_1_RuLabCaptured
16348: PPUSH
16349: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
16353: LD_EXP 19
16357: PPUSH
16358: LD_STRING 04_1_EscapeCounter
16360: PPUSH
16361: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
16365: LD_EXP 15
16369: PPUSH
16370: LD_STRING 04_1_BaseHill
16372: PPUSH
16373: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
16377: LD_OWVAR 1
16381: PPUSH
16382: LD_STRING 04_1_Time
16384: PPUSH
16385: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
16389: LD_EXP 14
16393: PPUSH
16394: LD_STRING 04_1_DeadCounter
16396: PPUSH
16397: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
16401: LD_EXP 24
16405: PUSH
16406: LD_INT 112
16408: PPUSH
16409: CALL_OW 255
16413: MUL
16414: PUSH
16415: LD_INT 2
16417: EQUAL
16418: PPUSH
16419: LD_STRING 04_1_KaganCaptured
16421: PPUSH
16422: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
16426: LD_INT 22
16428: PUSH
16429: LD_INT 2
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PUSH
16436: LD_INT 34
16438: PUSH
16439: LD_INT 26
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: PPUSH
16450: CALL_OW 69
16454: PUSH
16455: LD_INT 0
16457: PLUS
16458: PPUSH
16459: LD_STRING 04_1_Flamethrower
16461: PPUSH
16462: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16466: LD_INT 1
16468: PPUSH
16469: LD_STRING __x1\04_cont2
16471: PPUSH
16472: CALL_OW 340
// end ; end_of_file
16476: PPOPN 4
16478: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16479: LD_VAR 0 1
16483: PPUSH
16484: CALL_OW 266
16488: PUSH
16489: LD_INT 0
16491: EQUAL
16492: PUSH
16493: LD_VAR 0 1
16497: PPUSH
16498: CALL_OW 255
16502: PUSH
16503: LD_INT 2
16505: EQUAL
16506: AND
16507: IFFALSE 16517
// baseConstructed := true ;
16509: LD_ADDR_EXP 3
16513: PUSH
16514: LD_INT 1
16516: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16517: LD_VAR 0 1
16521: PPUSH
16522: CALL_OW 266
16526: PUSH
16527: LD_INT 6
16529: EQUAL
16530: PUSH
16531: LD_VAR 0 1
16535: PPUSH
16536: CALL_OW 255
16540: PUSH
16541: LD_INT 2
16543: EQUAL
16544: AND
16545: IFFALSE 16555
// labConstructed := true ;
16547: LD_ADDR_EXP 4
16551: PUSH
16552: LD_INT 1
16554: ST_TO_ADDR
// end ;
16555: PPOPN 1
16557: END
// on UnitDestroyed ( un ) do begin if un = Heike then
16558: LD_VAR 0 1
16562: PUSH
16563: LD_EXP 25
16567: EQUAL
16568: IFFALSE 16577
// YouLost ( Heike ) ;
16570: LD_STRING Heike
16572: PPUSH
16573: CALL_OW 104
// if un = Omar then
16577: LD_VAR 0 1
16581: PUSH
16582: LD_EXP 33
16586: EQUAL
16587: IFFALSE 16596
// YouLost ( Omar ) ;
16589: LD_STRING Omar
16591: PPUSH
16592: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
16596: LD_VAR 0 1
16600: PUSH
16601: LD_INT 22
16603: PUSH
16604: LD_INT 2
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: PUSH
16611: LD_INT 23
16613: PUSH
16614: LD_INT 2
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: PUSH
16621: LD_INT 21
16623: PUSH
16624: LD_INT 1
16626: PUSH
16627: EMPTY
16628: LIST
16629: LIST
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: LIST
16635: PPUSH
16636: CALL_OW 69
16640: IN
16641: IFFALSE 16657
// loseCounter := loseCounter + 1 ;
16643: LD_ADDR_EXP 14
16647: PUSH
16648: LD_EXP 14
16652: PUSH
16653: LD_INT 1
16655: PLUS
16656: ST_TO_ADDR
// if un = omikron then
16657: LD_VAR 0 1
16661: PUSH
16662: LD_INT 64
16664: EQUAL
16665: IFFALSE 16675
// omicronFall := true ;
16667: LD_ADDR_EXP 13
16671: PUSH
16672: LD_INT 1
16674: ST_TO_ADDR
// if un = kirov then
16675: LD_VAR 0 1
16679: PUSH
16680: LD_INT 71
16682: EQUAL
16683: IFFALSE 16700
// begin ChangeMissionObjectives ( KirovDone ) ;
16685: LD_STRING KirovDone
16687: PPUSH
16688: CALL_OW 337
// kirovDestroyed := true ;
16692: LD_ADDR_EXP 16
16696: PUSH
16697: LD_INT 1
16699: ST_TO_ADDR
// end ; if un = beria then
16700: LD_VAR 0 1
16704: PUSH
16705: LD_INT 106
16707: EQUAL
16708: IFFALSE 16725
// begin ChangeMissionObjectives ( BeriaDone ) ;
16710: LD_STRING BeriaDone
16712: PPUSH
16713: CALL_OW 337
// beriaDestroyed := true ;
16717: LD_ADDR_EXP 17
16721: PUSH
16722: LD_INT 1
16724: ST_TO_ADDR
// end ; if un = kagan then
16725: LD_VAR 0 1
16729: PUSH
16730: LD_INT 112
16732: EQUAL
16733: IFFALSE 16743
// kaganDestroyed := true ;
16735: LD_ADDR_EXP 18
16739: PUSH
16740: LD_INT 1
16742: ST_TO_ADDR
// if un in russianPatrol then
16743: LD_VAR 0 1
16747: PUSH
16748: LD_EXP 47
16752: IN
16753: IFFALSE 16771
// russianPatrol := russianPatrol diff un ;
16755: LD_ADDR_EXP 47
16759: PUSH
16760: LD_EXP 47
16764: PUSH
16765: LD_VAR 0 1
16769: DIFF
16770: ST_TO_ADDR
// if un in russianOmicronAttackers then
16771: LD_VAR 0 1
16775: PUSH
16776: LD_EXP 48
16780: IN
16781: IFFALSE 16799
// russianOmicronAttackers := russianOmicronAttackers diff un ;
16783: LD_ADDR_EXP 48
16787: PUSH
16788: LD_EXP 48
16792: PUSH
16793: LD_VAR 0 1
16797: DIFF
16798: ST_TO_ADDR
// end ;
16799: PPOPN 1
16801: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
16802: LD_INT 0
16804: PPUSH
16805: PPUSH
16806: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
16807: LD_VAR 0 1
16811: PUSH
16812: LD_INT 2
16814: PUSH
16815: LD_INT 22
16817: PUSH
16818: LD_INT 3
16820: PUSH
16821: EMPTY
16822: LIST
16823: LIST
16824: PUSH
16825: LD_INT 22
16827: PUSH
16828: LD_INT 4
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: PUSH
16835: LD_INT 22
16837: PUSH
16838: LD_INT 6
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: PUSH
16851: LD_INT 30
16853: PUSH
16854: LD_INT 32
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: PPUSH
16865: CALL_OW 69
16869: IN
16870: IFFALSE 17043
// begin sol := UnitsInside ( un ) ;
16872: LD_ADDR_VAR 0 3
16876: PUSH
16877: LD_VAR 0 1
16881: PPUSH
16882: CALL_OW 313
16886: ST_TO_ADDR
// if not sol then
16887: LD_VAR 0 3
16891: NOT
16892: IFFALSE 16896
// exit ;
16894: GO 17043
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16896: LD_ADDR_VAR 0 4
16900: PUSH
16901: LD_INT 22
16903: PUSH
16904: LD_VAR 0 1
16908: PPUSH
16909: CALL_OW 255
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: PUSH
16918: LD_INT 2
16920: PUSH
16921: LD_INT 30
16923: PUSH
16924: LD_INT 4
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PUSH
16931: LD_INT 30
16933: PUSH
16934: LD_INT 5
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: LIST
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: PPUSH
16950: CALL_OW 69
16954: ST_TO_ADDR
// if not nearestBarracks then
16955: LD_VAR 0 4
16959: NOT
16960: IFFALSE 16964
// exit ;
16962: GO 17043
// for i in nearestBarracks do
16964: LD_ADDR_VAR 0 2
16968: PUSH
16969: LD_VAR 0 4
16973: PUSH
16974: FOR_IN
16975: IFFALSE 17010
// if UnitsInside ( i ) = 6 then
16977: LD_VAR 0 2
16981: PPUSH
16982: CALL_OW 313
16986: PUSH
16987: LD_INT 6
16989: EQUAL
16990: IFFALSE 17008
// nearestBarracks := nearestBarracks diff i ;
16992: LD_ADDR_VAR 0 4
16996: PUSH
16997: LD_VAR 0 4
17001: PUSH
17002: LD_VAR 0 2
17006: DIFF
17007: ST_TO_ADDR
17008: GO 16974
17010: POP
17011: POP
// if not nearestBarracks then
17012: LD_VAR 0 4
17016: NOT
17017: IFFALSE 17021
// exit ;
17019: GO 17043
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
17021: LD_VAR 0 3
17025: PUSH
17026: LD_INT 1
17028: ARRAY
17029: PPUSH
17030: LD_VAR 0 4
17034: PUSH
17035: LD_INT 1
17037: ARRAY
17038: PPUSH
17039: CALL_OW 120
// end ; end ;
17043: PPOPN 4
17045: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
17046: LD_INT 0
17048: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
17049: LD_EXP 8
17053: NOT
17054: PUSH
17055: LD_EXP 5
17059: NOT
17060: OR
17061: IFFALSE 17065
// exit ;
17063: GO 17133
// for i in camAreas do
17065: LD_ADDR_VAR 0 5
17069: PUSH
17070: LD_EXP 8
17074: PUSH
17075: FOR_IN
17076: IFFALSE 17131
// if InArea ( x , y , i ) then
17078: LD_VAR 0 3
17082: PPUSH
17083: LD_VAR 0 4
17087: PPUSH
17088: LD_VAR 0 5
17092: PPUSH
17093: CALL_OW 309
17097: IFFALSE 17129
// begin SetAreaMapShow ( i , 0 ) ;
17099: LD_VAR 0 5
17103: PPUSH
17104: LD_INT 0
17106: PPUSH
17107: CALL_OW 424
// camAreas := camAreas diff i ;
17111: LD_ADDR_EXP 8
17115: PUSH
17116: LD_EXP 8
17120: PUSH
17121: LD_VAR 0 5
17125: DIFF
17126: ST_TO_ADDR
// break ;
17127: GO 17131
// end ;
17129: GO 17075
17131: POP
17132: POP
// end ;
17133: PPOPN 5
17135: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
17136: LD_VAR 0 1
17140: PUSH
17141: LD_INT 2
17143: EQUAL
17144: PUSH
17145: LD_VAR 0 2
17149: PUSH
17150: LD_INT 5
17152: PUSH
17153: LD_INT 8
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: IN
17160: AND
17161: IFFALSE 17170
// YouLost ( Ally ) ;
17163: LD_STRING Ally
17165: PPUSH
17166: CALL_OW 104
// end ;
17170: PPOPN 2
17172: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
17173: LD_VAR 0 1
17177: PUSH
17178: LD_EXP 30
17182: EQUAL
17183: PUSH
17184: LD_VAR 0 2
17188: PUSH
17189: LD_INT 3
17191: PUSH
17192: LD_INT 6
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: IN
17199: AND
17200: IFFALSE 17231
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
17202: LD_ADDR_EXP 23
17206: PUSH
17207: LD_VAR 0 1
17211: PPUSH
17212: CALL_OW 250
17216: PUSH
17217: LD_VAR 0 1
17221: PPUSH
17222: CALL_OW 251
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: ST_TO_ADDR
// end ; end_of_file
17231: PPOPN 3
17233: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 ] [ Difficulty ] do
17234: LD_EXP 11
17238: NOT
17239: PUSH
17240: LD_INT 12
17242: PPUSH
17243: LD_INT 1
17245: PPUSH
17246: CALL_OW 287
17250: PUSH
17251: LD_INT 20
17253: PUSH
17254: LD_INT 16
17256: PUSH
17257: LD_INT 12
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: LIST
17264: PUSH
17265: LD_OWVAR 67
17269: ARRAY
17270: LESS
17271: AND
17272: IFFALSE 17299
17274: GO 17276
17276: DISABLE
// begin enable ;
17277: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
17278: LD_INT 1
17280: PPUSH
17281: LD_INT 5
17283: PPUSH
17284: CALL_OW 12
17288: PPUSH
17289: LD_INT 12
17291: PPUSH
17292: LD_INT 1
17294: PPUSH
17295: CALL_OW 55
// end ; end_of_file
17299: END
// every 0 0$1 trigger omarCountdown do
17300: LD_EXP 22
17304: IFFALSE 17356
17306: GO 17308
17308: DISABLE
// begin enable ;
17309: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
17310: LD_ADDR_OWVAR 47
17314: PUSH
17315: LD_STRING #X104-1
17317: PUSH
17318: LD_EXP 22
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
17327: LD_ADDR_EXP 22
17331: PUSH
17332: LD_EXP 22
17336: PUSH
17337: LD_INT 35
17339: MINUS
17340: ST_TO_ADDR
// if not omarCountdown then
17341: LD_EXP 22
17345: NOT
17346: IFFALSE 17356
// display_strings :=  ;
17348: LD_ADDR_OWVAR 47
17352: PUSH
17353: LD_STRING 
17355: ST_TO_ADDR
// end ;
17356: END
