// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 34 0 0
// PrepareArabian ;
   8: CALL 1852 0 0
// PrepareAmerican ;
  12: CALL 5401 0 0
// PrepareRussian ;
  16: CALL 2249 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// end ;
  33: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall ; function Init ; begin
  34: LD_INT 0
  36: PPUSH
// debug := true ;
  37: LD_ADDR_EXP 1
  41: PUSH
  42: LD_INT 1
  44: ST_TO_ADDR
// prefix := 03_ ;
  45: LD_ADDR_EXP 2
  49: PUSH
  50: LD_STRING 03_
  52: ST_TO_ADDR
// baseConstructed := false ;
  53: LD_ADDR_EXP 3
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// labConstructed := false ;
  61: LD_ADDR_EXP 4
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  69: LD_ADDR_EXP 5
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// russianAlert := false ;
  77: LD_ADDR_EXP 8
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// activeGrishkoAI := true ;
  85: LD_ADDR_EXP 9
  89: PUSH
  90: LD_INT 1
  92: ST_TO_ADDR
// allowHeikeAttack := false ;
  93: LD_ADDR_EXP 10
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// allowToPatrol := false ;
 101: LD_ADDR_EXP 11
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// omicronFall := false ;
 109: LD_ADDR_EXP 12
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// startAttackOnOmicron := false ;
 117: LD_ADDR_EXP 6
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 125: LD_ADDR_EXP 7
 129: PUSH
 130: LD_INT 3
 132: PUSH
 133: LD_INT 4
 135: PUSH
 136: LD_INT 5
 138: PUSH
 139: LD_INT 6
 141: PUSH
 142: LD_INT 7
 144: PUSH
 145: LD_INT 8
 147: PUSH
 148: EMPTY
 149: LIST
 150: LIST
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: ST_TO_ADDR
// end ; end_of_file
 156: LD_VAR 0 1
 160: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 161: LD_INT 0
 163: PPUSH
 164: PPUSH
// if exist_mode then
 165: LD_VAR 0 2
 169: IFFALSE 194
// unit := CreateCharacter ( prefix & ident ) else
 171: LD_ADDR_VAR 0 5
 175: PUSH
 176: LD_VAR 0 3
 180: PUSH
 181: LD_VAR 0 1
 185: STR
 186: PPUSH
 187: CALL_OW 34
 191: ST_TO_ADDR
 192: GO 209
// unit := NewCharacter ( ident ) ;
 194: LD_ADDR_VAR 0 5
 198: PUSH
 199: LD_VAR 0 1
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// result := unit ;
 209: LD_ADDR_VAR 0 4
 213: PUSH
 214: LD_VAR 0 5
 218: ST_TO_ADDR
// end ;
 219: LD_VAR 0 4
 223: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 224: LD_INT 0
 226: PPUSH
// uc_side := side ;
 227: LD_ADDR_OWVAR 20
 231: PUSH
 232: LD_VAR 0 1
 236: ST_TO_ADDR
// uc_nation := nation ;
 237: LD_ADDR_OWVAR 21
 241: PUSH
 242: LD_VAR 0 2
 246: ST_TO_ADDR
// vc_chassis := chassis ;
 247: LD_ADDR_OWVAR 37
 251: PUSH
 252: LD_VAR 0 3
 256: ST_TO_ADDR
// vc_engine := engine ;
 257: LD_ADDR_OWVAR 39
 261: PUSH
 262: LD_VAR 0 4
 266: ST_TO_ADDR
// vc_control := control ;
 267: LD_ADDR_OWVAR 38
 271: PUSH
 272: LD_VAR 0 5
 276: ST_TO_ADDR
// vc_weapon := weapon ;
 277: LD_ADDR_OWVAR 40
 281: PUSH
 282: LD_VAR 0 6
 286: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 287: LD_ADDR_OWVAR 41
 291: PUSH
 292: LD_VAR 0 7
 296: ST_TO_ADDR
// result := CreateVehicle ;
 297: LD_ADDR_VAR 0 8
 301: PUSH
 302: CALL_OW 45
 306: ST_TO_ADDR
// end ;
 307: LD_VAR 0 8
 311: RET
// export function SayX ( units , ident ) ; var i ; begin
 312: LD_INT 0
 314: PPUSH
 315: PPUSH
// result := false ;
 316: LD_ADDR_VAR 0 3
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// if not units then
 324: LD_VAR 0 1
 328: NOT
 329: IFFALSE 333
// exit ;
 331: GO 387
// for i in units do
 333: LD_ADDR_VAR 0 4
 337: PUSH
 338: LD_VAR 0 1
 342: PUSH
 343: FOR_IN
 344: IFFALSE 385
// if IsOk ( i ) then
 346: LD_VAR 0 4
 350: PPUSH
 351: CALL_OW 302
 355: IFFALSE 383
// begin Say ( i , ident ) ;
 357: LD_VAR 0 4
 361: PPUSH
 362: LD_VAR 0 2
 366: PPUSH
 367: CALL_OW 88
// result := i ;
 371: LD_ADDR_VAR 0 3
 375: PUSH
 376: LD_VAR 0 4
 380: ST_TO_ADDR
// break ;
 381: GO 385
// end ;
 383: GO 343
 385: POP
 386: POP
// end ;
 387: LD_VAR 0 3
 391: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 392: LD_INT 0
 394: PPUSH
 395: PPUSH
// InitUc ;
 396: CALL_OW 18
// InitHc ;
 400: CALL_OW 19
// uc_side := 0 ;
 404: LD_ADDR_OWVAR 20
 408: PUSH
 409: LD_INT 0
 411: ST_TO_ADDR
// uc_nation := 0 ;
 412: LD_ADDR_OWVAR 21
 416: PUSH
 417: LD_INT 0
 419: ST_TO_ADDR
// for i = 1 to amount do
 420: LD_ADDR_VAR 0 4
 424: PUSH
 425: DOUBLE
 426: LD_INT 1
 428: DEC
 429: ST_TO_ADDR
 430: LD_VAR 0 2
 434: PUSH
 435: FOR_TO
 436: IFFALSE 518
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 438: LD_ADDR_OWVAR 29
 442: PUSH
 443: LD_INT 9
 445: PPUSH
 446: LD_INT 12
 448: PPUSH
 449: CALL_OW 12
 453: PUSH
 454: LD_INT 9
 456: PPUSH
 457: LD_INT 12
 459: PPUSH
 460: CALL_OW 12
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 469: LD_ADDR_OWVAR 35
 473: PUSH
 474: LD_INT 1
 476: NEG
 477: PPUSH
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 12
 485: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 486: LD_INT 0
 488: PPUSH
 489: LD_INT 12
 491: PPUSH
 492: LD_INT 1
 494: PPUSH
 495: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 499: CALL_OW 44
 503: PPUSH
 504: LD_VAR 0 1
 508: PPUSH
 509: LD_INT 0
 511: PPUSH
 512: CALL_OW 49
// end ;
 516: GO 435
 518: POP
 519: POP
// InitHc ;
 520: CALL_OW 19
// end ;
 524: LD_VAR 0 3
 528: RET
// export function PrepareNature ( forest ) ; var i ; begin
 529: LD_INT 0
 531: PPUSH
 532: PPUSH
// SpawnApeman ( forest , [ 6 , 5 , 4 ] [ Difficulty ] ) ;
 533: LD_VAR 0 1
 537: PPUSH
 538: LD_INT 6
 540: PUSH
 541: LD_INT 5
 543: PUSH
 544: LD_INT 4
 546: PUSH
 547: EMPTY
 548: LIST
 549: LIST
 550: LIST
 551: PUSH
 552: LD_OWVAR 67
 556: ARRAY
 557: PPUSH
 558: CALL 392 0 2
// for i := 1 to 3 do
 562: LD_ADDR_VAR 0 3
 566: PUSH
 567: DOUBLE
 568: LD_INT 1
 570: DEC
 571: ST_TO_ADDR
 572: LD_INT 3
 574: PUSH
 575: FOR_TO
 576: IFFALSE 613
// begin hc_class := 21 ;
 578: LD_ADDR_OWVAR 28
 582: PUSH
 583: LD_INT 21
 585: ST_TO_ADDR
// hc_gallery :=  ;
 586: LD_ADDR_OWVAR 33
 590: PUSH
 591: LD_STRING 
 593: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 594: CALL_OW 44
 598: PPUSH
 599: LD_VAR 0 1
 603: PPUSH
 604: LD_INT 0
 606: PPUSH
 607: CALL_OW 49
// end ;
 611: GO 575
 613: POP
 614: POP
// for i := 1 to 2 do
 615: LD_ADDR_VAR 0 3
 619: PUSH
 620: DOUBLE
 621: LD_INT 1
 623: DEC
 624: ST_TO_ADDR
 625: LD_INT 2
 627: PUSH
 628: FOR_TO
 629: IFFALSE 666
// begin hc_class := 18 ;
 631: LD_ADDR_OWVAR 28
 635: PUSH
 636: LD_INT 18
 638: ST_TO_ADDR
// hc_gallery :=  ;
 639: LD_ADDR_OWVAR 33
 643: PUSH
 644: LD_STRING 
 646: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 647: CALL_OW 44
 651: PPUSH
 652: LD_VAR 0 1
 656: PPUSH
 657: LD_INT 0
 659: PPUSH
 660: CALL_OW 49
// end ;
 664: GO 628
 666: POP
 667: POP
// for i := 1 to 2 do
 668: LD_ADDR_VAR 0 3
 672: PUSH
 673: DOUBLE
 674: LD_INT 1
 676: DEC
 677: ST_TO_ADDR
 678: LD_INT 2
 680: PUSH
 681: FOR_TO
 682: IFFALSE 719
// begin hc_class := 13 ;
 684: LD_ADDR_OWVAR 28
 688: PUSH
 689: LD_INT 13
 691: ST_TO_ADDR
// hc_gallery :=  ;
 692: LD_ADDR_OWVAR 33
 696: PUSH
 697: LD_STRING 
 699: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 700: CALL_OW 44
 704: PPUSH
 705: LD_VAR 0 1
 709: PPUSH
 710: LD_INT 0
 712: PPUSH
 713: CALL_OW 49
// end ;
 717: GO 681
 719: POP
 720: POP
// end ;
 721: LD_VAR 0 2
 725: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 726: LD_INT 0
 728: PPUSH
 729: PPUSH
 730: PPUSH
// if not observer or not unit then
 731: LD_VAR 0 1
 735: NOT
 736: PUSH
 737: LD_VAR 0 2
 741: NOT
 742: OR
 743: IFFALSE 747
// exit ;
 745: GO 795
// if not See ( GetSide ( observer ) , unit ) then
 747: LD_VAR 0 1
 751: PPUSH
 752: CALL_OW 255
 756: PPUSH
 757: LD_VAR 0 2
 761: PPUSH
 762: CALL_OW 292
 766: NOT
 767: IFFALSE 771
// exit ;
 769: GO 795
// result := GetDistUnits ( observer , unit ) < 12 ;
 771: LD_ADDR_VAR 0 3
 775: PUSH
 776: LD_VAR 0 1
 780: PPUSH
 781: LD_VAR 0 2
 785: PPUSH
 786: CALL_OW 296
 790: PUSH
 791: LD_INT 12
 793: LESS
 794: ST_TO_ADDR
// end ;
 795: LD_VAR 0 3
 799: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 800: LD_INT 0
 802: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 803: LD_VAR 0 2
 807: PUSH
 808: LD_INT 1
 810: ARRAY
 811: PPUSH
 812: LD_VAR 0 2
 816: PUSH
 817: LD_INT 2
 819: ARRAY
 820: PPUSH
 821: CALL_OW 488
 825: PUSH
 826: LD_VAR 0 2
 830: PUSH
 831: LD_INT 1
 833: ARRAY
 834: PPUSH
 835: LD_VAR 0 2
 839: PUSH
 840: LD_INT 2
 842: ARRAY
 843: PPUSH
 844: CALL_OW 428
 848: PUSH
 849: LD_INT 0
 851: EQUAL
 852: AND
 853: IFFALSE 887
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 855: LD_VAR 0 1
 859: PPUSH
 860: LD_VAR 0 2
 864: PUSH
 865: LD_INT 1
 867: ARRAY
 868: PPUSH
 869: LD_VAR 0 2
 873: PUSH
 874: LD_INT 2
 876: ARRAY
 877: PPUSH
 878: LD_VAR 0 3
 882: PPUSH
 883: CALL_OW 48
// end ;
 887: LD_VAR 0 4
 891: RET
// export function Video ( mode ) ; begin
 892: LD_INT 0
 894: PPUSH
// ingame_video = mode ;
 895: LD_ADDR_OWVAR 52
 899: PUSH
 900: LD_VAR 0 1
 904: ST_TO_ADDR
// interface_hidden = mode ;
 905: LD_ADDR_OWVAR 54
 909: PUSH
 910: LD_VAR 0 1
 914: ST_TO_ADDR
// end ;
 915: LD_VAR 0 2
 919: RET
// export function ReverseArray ( array ) ; var i ; begin
 920: LD_INT 0
 922: PPUSH
 923: PPUSH
// if not array then
 924: LD_VAR 0 1
 928: NOT
 929: IFFALSE 933
// exit ;
 931: GO 991
// result := [ ] ;
 933: LD_ADDR_VAR 0 2
 937: PUSH
 938: EMPTY
 939: ST_TO_ADDR
// for i := 1 to array do
 940: LD_ADDR_VAR 0 3
 944: PUSH
 945: DOUBLE
 946: LD_INT 1
 948: DEC
 949: ST_TO_ADDR
 950: LD_VAR 0 1
 954: PUSH
 955: FOR_TO
 956: IFFALSE 989
// result := Insert ( result , 1 , array [ i ] ) ;
 958: LD_ADDR_VAR 0 2
 962: PUSH
 963: LD_VAR 0 2
 967: PPUSH
 968: LD_INT 1
 970: PPUSH
 971: LD_VAR 0 1
 975: PUSH
 976: LD_VAR 0 3
 980: ARRAY
 981: PPUSH
 982: CALL_OW 2
 986: ST_TO_ADDR
 987: GO 955
 989: POP
 990: POP
// end ;
 991: LD_VAR 0 2
 995: RET
// export function ComExit ( unit ) ; begin
 996: LD_INT 0
 998: PPUSH
// result := IsInUnit ( unit ) ;
 999: LD_ADDR_VAR 0 2
1003: PUSH
1004: LD_VAR 0 1
1008: PPUSH
1009: CALL_OW 310
1013: ST_TO_ADDR
// if not result then
1014: LD_VAR 0 2
1018: NOT
1019: IFFALSE 1023
// exit ;
1021: GO 1058
// if GetType ( result ) = unit_vehicle then
1023: LD_VAR 0 2
1027: PPUSH
1028: CALL_OW 247
1032: PUSH
1033: LD_INT 2
1035: EQUAL
1036: IFFALSE 1049
// ComExitVehicle ( unit ) else
1038: LD_VAR 0 1
1042: PPUSH
1043: CALL_OW 121
1047: GO 1058
// ComExitBuilding ( unit ) ;
1049: LD_VAR 0 1
1053: PPUSH
1054: CALL_OW 122
// end ;
1058: LD_VAR 0 2
1062: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1063: LD_INT 0
1065: PPUSH
1066: PPUSH
// if not side or not nation then
1067: LD_VAR 0 1
1071: NOT
1072: PUSH
1073: LD_VAR 0 2
1077: NOT
1078: OR
1079: IFFALSE 1083
// exit ;
1081: GO 1847
// case nation of nation_american :
1083: LD_VAR 0 2
1087: PUSH
1088: LD_INT 1
1090: DOUBLE
1091: EQUAL
1092: IFTRUE 1096
1094: GO 1310
1096: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1097: LD_ADDR_VAR 0 4
1101: PUSH
1102: LD_INT 35
1104: PUSH
1105: LD_INT 45
1107: PUSH
1108: LD_INT 46
1110: PUSH
1111: LD_INT 47
1113: PUSH
1114: LD_INT 82
1116: PUSH
1117: LD_INT 83
1119: PUSH
1120: LD_INT 84
1122: PUSH
1123: LD_INT 85
1125: PUSH
1126: LD_INT 86
1128: PUSH
1129: LD_INT 1
1131: PUSH
1132: LD_INT 2
1134: PUSH
1135: LD_INT 6
1137: PUSH
1138: LD_INT 15
1140: PUSH
1141: LD_INT 16
1143: PUSH
1144: LD_INT 7
1146: PUSH
1147: LD_INT 12
1149: PUSH
1150: LD_INT 13
1152: PUSH
1153: LD_INT 10
1155: PUSH
1156: LD_INT 14
1158: PUSH
1159: LD_INT 20
1161: PUSH
1162: LD_INT 21
1164: PUSH
1165: LD_INT 22
1167: PUSH
1168: LD_INT 25
1170: PUSH
1171: LD_INT 32
1173: PUSH
1174: LD_INT 27
1176: PUSH
1177: LD_INT 36
1179: PUSH
1180: LD_INT 69
1182: PUSH
1183: LD_INT 39
1185: PUSH
1186: LD_INT 34
1188: PUSH
1189: LD_INT 40
1191: PUSH
1192: LD_INT 48
1194: PUSH
1195: LD_INT 49
1197: PUSH
1198: LD_INT 50
1200: PUSH
1201: LD_INT 51
1203: PUSH
1204: LD_INT 52
1206: PUSH
1207: LD_INT 53
1209: PUSH
1210: LD_INT 54
1212: PUSH
1213: LD_INT 55
1215: PUSH
1216: LD_INT 56
1218: PUSH
1219: LD_INT 57
1221: PUSH
1222: LD_INT 58
1224: PUSH
1225: LD_INT 59
1227: PUSH
1228: LD_INT 60
1230: PUSH
1231: LD_INT 61
1233: PUSH
1234: LD_INT 62
1236: PUSH
1237: LD_INT 80
1239: PUSH
1240: LD_INT 82
1242: PUSH
1243: LD_INT 83
1245: PUSH
1246: LD_INT 84
1248: PUSH
1249: LD_INT 85
1251: PUSH
1252: LD_INT 86
1254: PUSH
1255: EMPTY
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: LIST
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: LIST
1276: LIST
1277: LIST
1278: LIST
1279: LIST
1280: LIST
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: LIST
1307: ST_TO_ADDR
1308: GO 1771
1310: LD_INT 2
1312: DOUBLE
1313: EQUAL
1314: IFTRUE 1318
1316: GO 1540
1318: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1319: LD_ADDR_VAR 0 4
1323: PUSH
1324: LD_INT 35
1326: PUSH
1327: LD_INT 45
1329: PUSH
1330: LD_INT 46
1332: PUSH
1333: LD_INT 47
1335: PUSH
1336: LD_INT 82
1338: PUSH
1339: LD_INT 83
1341: PUSH
1342: LD_INT 84
1344: PUSH
1345: LD_INT 85
1347: PUSH
1348: LD_INT 87
1350: PUSH
1351: LD_INT 70
1353: PUSH
1354: LD_INT 1
1356: PUSH
1357: LD_INT 11
1359: PUSH
1360: LD_INT 3
1362: PUSH
1363: LD_INT 4
1365: PUSH
1366: LD_INT 5
1368: PUSH
1369: LD_INT 6
1371: PUSH
1372: LD_INT 15
1374: PUSH
1375: LD_INT 18
1377: PUSH
1378: LD_INT 7
1380: PUSH
1381: LD_INT 17
1383: PUSH
1384: LD_INT 8
1386: PUSH
1387: LD_INT 20
1389: PUSH
1390: LD_INT 21
1392: PUSH
1393: LD_INT 22
1395: PUSH
1396: LD_INT 72
1398: PUSH
1399: LD_INT 26
1401: PUSH
1402: LD_INT 69
1404: PUSH
1405: LD_INT 39
1407: PUSH
1408: LD_INT 40
1410: PUSH
1411: LD_INT 41
1413: PUSH
1414: LD_INT 42
1416: PUSH
1417: LD_INT 43
1419: PUSH
1420: LD_INT 48
1422: PUSH
1423: LD_INT 49
1425: PUSH
1426: LD_INT 50
1428: PUSH
1429: LD_INT 51
1431: PUSH
1432: LD_INT 52
1434: PUSH
1435: LD_INT 53
1437: PUSH
1438: LD_INT 54
1440: PUSH
1441: LD_INT 55
1443: PUSH
1444: LD_INT 56
1446: PUSH
1447: LD_INT 60
1449: PUSH
1450: LD_INT 61
1452: PUSH
1453: LD_INT 62
1455: PUSH
1456: LD_INT 66
1458: PUSH
1459: LD_INT 67
1461: PUSH
1462: LD_INT 68
1464: PUSH
1465: LD_INT 81
1467: PUSH
1468: LD_INT 82
1470: PUSH
1471: LD_INT 83
1473: PUSH
1474: LD_INT 84
1476: PUSH
1477: LD_INT 85
1479: PUSH
1480: LD_INT 87
1482: PUSH
1483: EMPTY
1484: LIST
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: LIST
1520: LIST
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: LIST
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: ST_TO_ADDR
1538: GO 1771
1540: LD_INT 3
1542: DOUBLE
1543: EQUAL
1544: IFTRUE 1548
1546: GO 1770
1548: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1549: LD_ADDR_VAR 0 4
1553: PUSH
1554: LD_INT 46
1556: PUSH
1557: LD_INT 47
1559: PUSH
1560: LD_INT 1
1562: PUSH
1563: LD_INT 2
1565: PUSH
1566: LD_INT 82
1568: PUSH
1569: LD_INT 83
1571: PUSH
1572: LD_INT 84
1574: PUSH
1575: LD_INT 85
1577: PUSH
1578: LD_INT 86
1580: PUSH
1581: LD_INT 11
1583: PUSH
1584: LD_INT 9
1586: PUSH
1587: LD_INT 20
1589: PUSH
1590: LD_INT 19
1592: PUSH
1593: LD_INT 21
1595: PUSH
1596: LD_INT 24
1598: PUSH
1599: LD_INT 22
1601: PUSH
1602: LD_INT 25
1604: PUSH
1605: LD_INT 28
1607: PUSH
1608: LD_INT 29
1610: PUSH
1611: LD_INT 30
1613: PUSH
1614: LD_INT 31
1616: PUSH
1617: LD_INT 37
1619: PUSH
1620: LD_INT 38
1622: PUSH
1623: LD_INT 32
1625: PUSH
1626: LD_INT 27
1628: PUSH
1629: LD_INT 33
1631: PUSH
1632: LD_INT 69
1634: PUSH
1635: LD_INT 39
1637: PUSH
1638: LD_INT 34
1640: PUSH
1641: LD_INT 40
1643: PUSH
1644: LD_INT 71
1646: PUSH
1647: LD_INT 23
1649: PUSH
1650: LD_INT 44
1652: PUSH
1653: LD_INT 48
1655: PUSH
1656: LD_INT 49
1658: PUSH
1659: LD_INT 50
1661: PUSH
1662: LD_INT 51
1664: PUSH
1665: LD_INT 52
1667: PUSH
1668: LD_INT 53
1670: PUSH
1671: LD_INT 54
1673: PUSH
1674: LD_INT 55
1676: PUSH
1677: LD_INT 56
1679: PUSH
1680: LD_INT 57
1682: PUSH
1683: LD_INT 58
1685: PUSH
1686: LD_INT 59
1688: PUSH
1689: LD_INT 63
1691: PUSH
1692: LD_INT 64
1694: PUSH
1695: LD_INT 65
1697: PUSH
1698: LD_INT 82
1700: PUSH
1701: LD_INT 83
1703: PUSH
1704: LD_INT 84
1706: PUSH
1707: LD_INT 85
1709: PUSH
1710: LD_INT 86
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: LIST
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: LIST
1750: LIST
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: LIST
1758: LIST
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: LIST
1767: ST_TO_ADDR
1768: GO 1771
1770: POP
// if state > - 1 and state < 3 then
1771: LD_VAR 0 3
1775: PUSH
1776: LD_INT 1
1778: NEG
1779: GREATER
1780: PUSH
1781: LD_VAR 0 3
1785: PUSH
1786: LD_INT 3
1788: LESS
1789: AND
1790: IFFALSE 1847
// for i in result do
1792: LD_ADDR_VAR 0 5
1796: PUSH
1797: LD_VAR 0 4
1801: PUSH
1802: FOR_IN
1803: IFFALSE 1845
// if GetTech ( i , side ) <> state then
1805: LD_VAR 0 5
1809: PPUSH
1810: LD_VAR 0 1
1814: PPUSH
1815: CALL_OW 321
1819: PUSH
1820: LD_VAR 0 3
1824: NONEQUAL
1825: IFFALSE 1843
// result := result diff i ;
1827: LD_ADDR_VAR 0 4
1831: PUSH
1832: LD_VAR 0 4
1836: PUSH
1837: LD_VAR 0 5
1841: DIFF
1842: ST_TO_ADDR
1843: GO 1802
1845: POP
1846: POP
// end ; end_of_file
1847: LD_VAR 0 4
1851: RET
// export Heike , Givi , Mike , Kamil , Kaia , Sophia , Markov , Omar , Ibrahim , Kurt , Aviradze , heikeSecondSquad , omarSquad ; export function PrepareArabian ; var i ; begin
1852: LD_INT 0
1854: PPUSH
1855: PPUSH
// uc_side := 2 ;
1856: LD_ADDR_OWVAR 20
1860: PUSH
1861: LD_INT 2
1863: ST_TO_ADDR
// uc_nation := 2 ;
1864: LD_ADDR_OWVAR 21
1868: PUSH
1869: LD_INT 2
1871: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1872: LD_ADDR_EXP 13
1876: PUSH
1877: LD_STRING Heike
1879: PPUSH
1880: LD_EXP 1
1884: NOT
1885: PPUSH
1886: LD_EXP 2
1890: PPUSH
1891: CALL 161 0 3
1895: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1896: LD_ADDR_EXP 21
1900: PUSH
1901: LD_STRING Ibrahim
1903: PPUSH
1904: LD_EXP 1
1908: NOT
1909: PPUSH
1910: LD_EXP 2
1914: PPUSH
1915: CALL 161 0 3
1919: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1920: LD_ADDR_EXP 14
1924: PUSH
1925: LD_STRING Givi
1927: PPUSH
1928: LD_EXP 1
1932: NOT
1933: PPUSH
1934: LD_EXP 2
1938: PPUSH
1939: CALL 161 0 3
1943: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1944: LD_ADDR_EXP 16
1948: PUSH
1949: LD_STRING Kamil
1951: PPUSH
1952: LD_EXP 1
1956: NOT
1957: PPUSH
1958: LD_EXP 2
1962: PPUSH
1963: CALL 161 0 3
1967: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1968: LD_ADDR_EXP 17
1972: PUSH
1973: LD_STRING Kaia
1975: PPUSH
1976: LD_EXP 1
1980: NOT
1981: PPUSH
1982: LD_EXP 2
1986: PPUSH
1987: CALL 161 0 3
1991: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1992: LD_ADDR_EXP 18
1996: PUSH
1997: LD_STRING Sophia
1999: PPUSH
2000: LD_EXP 1
2004: NOT
2005: PPUSH
2006: LD_EXP 2
2010: PPUSH
2011: CALL 161 0 3
2015: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2016: LD_ADDR_EXP 19
2020: PUSH
2021: LD_STRING Markov
2023: PPUSH
2024: LD_EXP 1
2028: NOT
2029: PPUSH
2030: LD_EXP 2
2034: PPUSH
2035: CALL 161 0 3
2039: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2040: LD_ADDR_EXP 23
2044: PUSH
2045: LD_STRING Aviradze
2047: PPUSH
2048: LD_EXP 1
2052: NOT
2053: PPUSH
2054: LD_EXP 2
2058: PPUSH
2059: CALL 161 0 3
2063: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
2064: LD_ADDR_EXP 24
2068: PUSH
2069: LD_STRING 03_others
2071: PPUSH
2072: CALL_OW 31
2076: ST_TO_ADDR
// uc_side := 5 ;
2077: LD_ADDR_OWVAR 20
2081: PUSH
2082: LD_INT 5
2084: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
2085: LD_ADDR_EXP 22
2089: PUSH
2090: LD_STRING Kurt
2092: PPUSH
2093: LD_INT 0
2095: PPUSH
2096: LD_STRING 
2098: PPUSH
2099: CALL 161 0 3
2103: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2104: LD_ADDR_EXP 15
2108: PUSH
2109: LD_STRING Mike
2111: PPUSH
2112: LD_EXP 1
2116: NOT
2117: PPUSH
2118: LD_EXP 2
2122: PPUSH
2123: CALL 161 0 3
2127: ST_TO_ADDR
// if Mike then
2128: LD_EXP 15
2132: IFFALSE 2155
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
2134: LD_EXP 15
2138: PPUSH
2139: LD_INT 142
2141: PPUSH
2142: LD_INT 63
2144: PPUSH
2145: LD_INT 2
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
2155: LD_EXP 22
2159: PPUSH
2160: LD_INT 142
2162: PPUSH
2163: LD_INT 63
2165: PPUSH
2166: LD_INT 3
2168: PPUSH
2169: LD_INT 0
2171: PPUSH
2172: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
2176: LD_EXP 22
2180: PUSH
2181: LD_EXP 15
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: PPUSH
2190: CALL_OW 140
// end ;
2194: LD_VAR 0 1
2198: RET
// export function PrepareOmarForces ; begin
2199: LD_INT 0
2201: PPUSH
// uc_side := 5 ;
2202: LD_ADDR_OWVAR 20
2206: PUSH
2207: LD_INT 5
2209: ST_TO_ADDR
// uc_nation := 2 ;
2210: LD_ADDR_OWVAR 21
2214: PUSH
2215: LD_INT 2
2217: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2218: LD_ADDR_EXP 20
2222: PUSH
2223: LD_STRING Omar
2225: PPUSH
2226: LD_INT 0
2228: PPUSH
2229: LD_STRING 
2231: PPUSH
2232: CALL 161 0 3
2236: ST_TO_ADDR
// omarSquad := [ ] ;
2237: LD_ADDR_EXP 25
2241: PUSH
2242: EMPTY
2243: ST_TO_ADDR
// end ; end_of_file
2244: LD_VAR 0 1
2248: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2249: LD_INT 0
2251: PPUSH
2252: PPUSH
2253: PPUSH
2254: PPUSH
2255: PPUSH
2256: PPUSH
// SetBName ( kirov , kirov ) ;
2257: LD_INT 71
2259: PPUSH
2260: LD_STRING kirov
2262: PPUSH
2263: CALL_OW 500
// SetBName ( beria , beria ) ;
2267: LD_INT 106
2269: PPUSH
2270: LD_STRING beria
2272: PPUSH
2273: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2277: LD_INT 112
2279: PPUSH
2280: LD_STRING kagan
2282: PPUSH
2283: CALL_OW 500
// uc_side := 6 ;
2287: LD_ADDR_OWVAR 20
2291: PUSH
2292: LD_INT 6
2294: ST_TO_ADDR
// uc_nation := 3 ;
2295: LD_ADDR_OWVAR 21
2299: PUSH
2300: LD_INT 3
2302: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2303: LD_ADDR_VAR 0 5
2307: PUSH
2308: LD_INT 22
2310: PUSH
2311: LD_INT 6
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: PUSH
2318: LD_INT 30
2320: PUSH
2321: LD_INT 5
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: PPUSH
2332: CALL_OW 69
2336: PUSH
2337: LD_INT 1
2339: ARRAY
2340: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
2341: LD_ADDR_VAR 0 4
2345: PUSH
2346: LD_INT 22
2348: PUSH
2349: LD_INT 6
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PUSH
2356: LD_INT 30
2358: PUSH
2359: LD_INT 4
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: PPUSH
2370: CALL_OW 69
2374: PUSH
2375: LD_INT 1
2377: ARRAY
2378: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
2379: LD_ADDR_EXP 30
2383: PUSH
2384: EMPTY
2385: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
2386: LD_ADDR_EXP 31
2390: PUSH
2391: EMPTY
2392: ST_TO_ADDR
// russianPatrol := [ ] ;
2393: LD_ADDR_EXP 33
2397: PUSH
2398: EMPTY
2399: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
2400: LD_ADDR_EXP 26
2404: PUSH
2405: LD_STRING Kurin
2407: PPUSH
2408: LD_INT 0
2410: PPUSH
2411: LD_STRING 
2413: PPUSH
2414: CALL 161 0 3
2418: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
2419: LD_EXP 26
2423: PPUSH
2424: LD_INT 71
2426: PPUSH
2427: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
2431: LD_ADDR_EXP 28
2435: PUSH
2436: LD_STRING Popov
2438: PPUSH
2439: LD_INT 0
2441: PPUSH
2442: LD_STRING 
2444: PPUSH
2445: CALL 161 0 3
2449: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
2450: LD_EXP 28
2454: PPUSH
2455: LD_INT 71
2457: PPUSH
2458: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
2462: LD_ADDR_EXP 27
2466: PUSH
2467: LD_STRING Grishko
2469: PPUSH
2470: LD_INT 0
2472: PPUSH
2473: LD_STRING 
2475: PPUSH
2476: CALL 161 0 3
2480: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
2481: LD_EXP 27
2485: PPUSH
2486: LD_INT 207
2488: PPUSH
2489: LD_INT 106
2491: PPUSH
2492: LD_INT 0
2494: PPUSH
2495: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
2499: LD_EXP 27
2503: PPUSH
2504: LD_INT 209
2506: PPUSH
2507: LD_INT 106
2509: PPUSH
2510: CALL_OW 118
// for i := 1 to 2 do
2514: LD_ADDR_VAR 0 2
2518: PUSH
2519: DOUBLE
2520: LD_INT 1
2522: DEC
2523: ST_TO_ADDR
2524: LD_INT 2
2526: PUSH
2527: FOR_TO
2528: IFFALSE 2583
// begin PrepareHuman ( false , 2 , 2 ) ;
2530: LD_INT 0
2532: PPUSH
2533: LD_INT 2
2535: PPUSH
2536: LD_INT 2
2538: PPUSH
2539: CALL_OW 380
// un := CreateHuman ;
2543: LD_ADDR_VAR 0 3
2547: PUSH
2548: CALL_OW 44
2552: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2553: LD_VAR 0 3
2557: PPUSH
2558: LD_INT 71
2560: PPUSH
2561: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2565: LD_ADDR_EXP 30
2569: PUSH
2570: LD_EXP 30
2574: PUSH
2575: LD_VAR 0 3
2579: UNION
2580: ST_TO_ADDR
// end ;
2581: GO 2527
2583: POP
2584: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
2585: LD_ADDR_VAR 0 2
2589: PUSH
2590: DOUBLE
2591: LD_INT 1
2593: DEC
2594: ST_TO_ADDR
2595: LD_INT 5
2597: PUSH
2598: LD_INT 6
2600: PUSH
2601: LD_INT 6
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: PUSH
2609: LD_OWVAR 67
2613: ARRAY
2614: PUSH
2615: FOR_TO
2616: IFFALSE 2690
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
2618: LD_INT 0
2620: PPUSH
2621: LD_INT 1
2623: PPUSH
2624: LD_INT 2
2626: PUSH
2627: LD_INT 3
2629: PUSH
2630: LD_INT 4
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: LIST
2637: PUSH
2638: LD_OWVAR 67
2642: ARRAY
2643: PPUSH
2644: CALL_OW 380
// un := CreateHuman ;
2648: LD_ADDR_VAR 0 3
2652: PUSH
2653: CALL_OW 44
2657: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
2658: LD_VAR 0 3
2662: PPUSH
2663: LD_VAR 0 5
2667: PPUSH
2668: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2672: LD_ADDR_EXP 30
2676: PUSH
2677: LD_EXP 30
2681: PUSH
2682: LD_VAR 0 3
2686: UNION
2687: ST_TO_ADDR
// end ;
2688: GO 2615
2690: POP
2691: POP
// for i := 1 to 3 do
2692: LD_ADDR_VAR 0 2
2696: PUSH
2697: DOUBLE
2698: LD_INT 1
2700: DEC
2701: ST_TO_ADDR
2702: LD_INT 3
2704: PUSH
2705: FOR_TO
2706: IFFALSE 2761
// begin PrepareHuman ( false , 3 , 3 ) ;
2708: LD_INT 0
2710: PPUSH
2711: LD_INT 3
2713: PPUSH
2714: LD_INT 3
2716: PPUSH
2717: CALL_OW 380
// un := CreateHuman ;
2721: LD_ADDR_VAR 0 3
2725: PUSH
2726: CALL_OW 44
2730: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
2731: LD_VAR 0 3
2735: PPUSH
2736: LD_INT 92
2738: PPUSH
2739: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2743: LD_ADDR_EXP 30
2747: PUSH
2748: LD_EXP 30
2752: PUSH
2753: LD_VAR 0 3
2757: UNION
2758: ST_TO_ADDR
// end ;
2759: GO 2705
2761: POP
2762: POP
// for i := 1 to 2 do
2763: LD_ADDR_VAR 0 2
2767: PUSH
2768: DOUBLE
2769: LD_INT 1
2771: DEC
2772: ST_TO_ADDR
2773: LD_INT 2
2775: PUSH
2776: FOR_TO
2777: IFFALSE 2832
// begin PrepareHuman ( false , 4 , 3 ) ;
2779: LD_INT 0
2781: PPUSH
2782: LD_INT 4
2784: PPUSH
2785: LD_INT 3
2787: PPUSH
2788: CALL_OW 380
// un := CreateHuman ;
2792: LD_ADDR_VAR 0 3
2796: PUSH
2797: CALL_OW 44
2801: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2802: LD_VAR 0 3
2806: PPUSH
2807: LD_INT 83
2809: PPUSH
2810: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2814: LD_ADDR_EXP 30
2818: PUSH
2819: LD_EXP 30
2823: PUSH
2824: LD_VAR 0 3
2828: UNION
2829: ST_TO_ADDR
// end ;
2830: GO 2776
2832: POP
2833: POP
// for i := 1 to 3 do
2834: LD_ADDR_VAR 0 2
2838: PUSH
2839: DOUBLE
2840: LD_INT 1
2842: DEC
2843: ST_TO_ADDR
2844: LD_INT 3
2846: PUSH
2847: FOR_TO
2848: IFFALSE 2905
// begin PrepareHuman ( false , 1 , 2 ) ;
2850: LD_INT 0
2852: PPUSH
2853: LD_INT 1
2855: PPUSH
2856: LD_INT 2
2858: PPUSH
2859: CALL_OW 380
// un := CreateHuman ;
2863: LD_ADDR_VAR 0 3
2867: PUSH
2868: CALL_OW 44
2872: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
2873: LD_VAR 0 3
2877: PPUSH
2878: LD_VAR 0 4
2882: PPUSH
2883: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
2887: LD_ADDR_EXP 32
2891: PUSH
2892: LD_EXP 32
2896: PUSH
2897: LD_VAR 0 3
2901: UNION
2902: ST_TO_ADDR
// end ;
2903: GO 2847
2905: POP
2906: POP
// russianCargo := [ ] ;
2907: LD_ADDR_EXP 35
2911: PUSH
2912: EMPTY
2913: ST_TO_ADDR
// for i := 1 to 2 do
2914: LD_ADDR_VAR 0 2
2918: PUSH
2919: DOUBLE
2920: LD_INT 1
2922: DEC
2923: ST_TO_ADDR
2924: LD_INT 2
2926: PUSH
2927: FOR_TO
2928: IFFALSE 3060
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
2930: LD_INT 6
2932: PPUSH
2933: LD_INT 3
2935: PPUSH
2936: LD_INT 21
2938: PPUSH
2939: LD_INT 1
2941: PPUSH
2942: LD_INT 1
2944: PPUSH
2945: LD_INT 51
2947: PPUSH
2948: LD_INT 100
2950: PPUSH
2951: CALL 224 0 7
// un := CreateVehicle ;
2955: LD_ADDR_VAR 0 3
2959: PUSH
2960: CALL_OW 45
2964: ST_TO_ADDR
// russianCargo := russianCargo union un ;
2965: LD_ADDR_EXP 35
2969: PUSH
2970: LD_EXP 35
2974: PUSH
2975: LD_VAR 0 3
2979: UNION
2980: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
2981: LD_VAR 0 3
2985: PPUSH
2986: LD_INT 2
2988: PPUSH
2989: LD_INT 100
2991: PPUSH
2992: CALL_OW 290
// SetDir ( un , 4 ) ;
2996: LD_VAR 0 3
3000: PPUSH
3001: LD_INT 4
3003: PPUSH
3004: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3008: LD_VAR 0 3
3012: PPUSH
3013: LD_INT 147
3015: PPUSH
3016: LD_INT 103
3018: PPUSH
3019: LD_INT 4
3021: PPUSH
3022: LD_INT 0
3024: PPUSH
3025: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3029: LD_INT 0
3031: PPUSH
3032: LD_INT 1
3034: PPUSH
3035: LD_OWVAR 67
3039: PPUSH
3040: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3044: CALL_OW 44
3048: PPUSH
3049: LD_VAR 0 3
3053: PPUSH
3054: CALL_OW 52
// end ;
3058: GO 2927
3060: POP
3061: POP
// uc_side := 3 ;
3062: LD_ADDR_OWVAR 20
3066: PUSH
3067: LD_INT 3
3069: ST_TO_ADDR
// for i := 1 to 2 do
3070: LD_ADDR_VAR 0 2
3074: PUSH
3075: DOUBLE
3076: LD_INT 1
3078: DEC
3079: ST_TO_ADDR
3080: LD_INT 2
3082: PUSH
3083: FOR_TO
3084: IFFALSE 3177
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3086: LD_INT 0
3088: PPUSH
3089: LD_INT 1
3091: PPUSH
3092: LD_OWVAR 67
3096: PUSH
3097: LD_INT 1
3099: PLUS
3100: PPUSH
3101: CALL_OW 380
// un := CreateHuman ;
3105: LD_ADDR_VAR 0 3
3109: PUSH
3110: CALL_OW 44
3114: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3115: LD_VAR 0 3
3119: PPUSH
3120: LD_INT 22
3122: PUSH
3123: LD_INT 3
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PUSH
3130: LD_INT 30
3132: PUSH
3133: LD_INT 32
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PPUSH
3144: CALL_OW 69
3148: PUSH
3149: LD_VAR 0 2
3153: ARRAY
3154: PPUSH
3155: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3159: LD_ADDR_EXP 31
3163: PUSH
3164: LD_EXP 31
3168: PUSH
3169: LD_VAR 0 3
3173: UNION
3174: ST_TO_ADDR
// end ;
3175: GO 3083
3177: POP
3178: POP
// for i := 1 to 2 do
3179: LD_ADDR_VAR 0 2
3183: PUSH
3184: DOUBLE
3185: LD_INT 1
3187: DEC
3188: ST_TO_ADDR
3189: LD_INT 2
3191: PUSH
3192: FOR_TO
3193: IFFALSE 3284
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3195: LD_INT 0
3197: PPUSH
3198: LD_INT 1
3200: PPUSH
3201: LD_OWVAR 67
3205: PUSH
3206: LD_INT 1
3208: PLUS
3209: PPUSH
3210: CALL_OW 380
// un := CreateHuman ;
3214: LD_ADDR_VAR 0 3
3218: PUSH
3219: CALL_OW 44
3223: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3224: LD_VAR 0 3
3228: PPUSH
3229: LD_INT 22
3231: PUSH
3232: LD_INT 3
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: PUSH
3239: LD_INT 30
3241: PUSH
3242: LD_INT 5
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: PUSH
3249: EMPTY
3250: LIST
3251: LIST
3252: PPUSH
3253: CALL_OW 69
3257: PUSH
3258: LD_INT 1
3260: ARRAY
3261: PPUSH
3262: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3266: LD_ADDR_EXP 31
3270: PUSH
3271: LD_EXP 31
3275: PUSH
3276: LD_VAR 0 3
3280: UNION
3281: ST_TO_ADDR
// end ;
3282: GO 3192
3284: POP
3285: POP
// for i := 1 to 2 do
3286: LD_ADDR_VAR 0 2
3290: PUSH
3291: DOUBLE
3292: LD_INT 1
3294: DEC
3295: ST_TO_ADDR
3296: LD_INT 2
3298: PUSH
3299: FOR_TO
3300: IFFALSE 3387
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3302: LD_INT 0
3304: PPUSH
3305: LD_INT 4
3307: PPUSH
3308: LD_OWVAR 67
3312: PPUSH
3313: CALL_OW 380
// un := CreateHuman ;
3317: LD_ADDR_VAR 0 3
3321: PUSH
3322: CALL_OW 44
3326: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
3327: LD_VAR 0 3
3331: PPUSH
3332: LD_INT 22
3334: PUSH
3335: LD_INT 3
3337: PUSH
3338: EMPTY
3339: LIST
3340: LIST
3341: PUSH
3342: LD_INT 30
3344: PUSH
3345: LD_INT 7
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PPUSH
3356: CALL_OW 69
3360: PUSH
3361: LD_INT 1
3363: ARRAY
3364: PPUSH
3365: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3369: LD_ADDR_EXP 31
3373: PUSH
3374: LD_EXP 31
3378: PUSH
3379: LD_VAR 0 3
3383: UNION
3384: ST_TO_ADDR
// end ;
3385: GO 3299
3387: POP
3388: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
3389: LD_INT 0
3391: PPUSH
3392: LD_INT 2
3394: PPUSH
3395: LD_OWVAR 67
3399: PPUSH
3400: CALL_OW 380
// un := CreateHuman ;
3404: LD_ADDR_VAR 0 3
3408: PUSH
3409: CALL_OW 44
3413: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
3414: LD_VAR 0 3
3418: PPUSH
3419: LD_INT 106
3421: PPUSH
3422: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3426: LD_ADDR_EXP 31
3430: PUSH
3431: LD_EXP 31
3435: PUSH
3436: LD_VAR 0 3
3440: UNION
3441: ST_TO_ADDR
// for i := 1 to 3 do
3442: LD_ADDR_VAR 0 2
3446: PUSH
3447: DOUBLE
3448: LD_INT 1
3450: DEC
3451: ST_TO_ADDR
3452: LD_INT 3
3454: PUSH
3455: FOR_TO
3456: IFFALSE 3583
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
3458: LD_ADDR_VAR 0 6
3462: PUSH
3463: LD_INT 22
3465: PUSH
3466: LD_INT 3
3468: PUSH
3469: EMPTY
3470: LIST
3471: LIST
3472: PUSH
3473: LD_INT 30
3475: PUSH
3476: LD_INT 31
3478: PUSH
3479: EMPTY
3480: LIST
3481: LIST
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: PPUSH
3487: CALL_OW 69
3491: PUSH
3492: LD_VAR 0 2
3496: ARRAY
3497: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
3498: LD_INT 0
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: LD_OWVAR 67
3508: PPUSH
3509: CALL_OW 380
// un := CreateHuman ;
3513: LD_ADDR_VAR 0 3
3517: PUSH
3518: CALL_OW 44
3522: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) - 3 * - 1 ) ;
3523: LD_VAR 0 3
3527: PPUSH
3528: LD_VAR 0 6
3532: PPUSH
3533: CALL_OW 254
3537: PUSH
3538: LD_INT 3
3540: PUSH
3541: LD_INT 1
3543: NEG
3544: MUL
3545: MINUS
3546: PPUSH
3547: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
3551: LD_VAR 0 3
3555: PPUSH
3556: LD_VAR 0 6
3560: PPUSH
3561: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3565: LD_ADDR_EXP 31
3569: PUSH
3570: LD_EXP 31
3574: PUSH
3575: LD_VAR 0 3
3579: UNION
3580: ST_TO_ADDR
// end ;
3581: GO 3455
3583: POP
3584: POP
// russianOmicronAttackers := [ ] ;
3585: LD_ADDR_EXP 34
3589: PUSH
3590: EMPTY
3591: ST_TO_ADDR
// for i := 1 to 6 do
3592: LD_ADDR_VAR 0 2
3596: PUSH
3597: DOUBLE
3598: LD_INT 1
3600: DEC
3601: ST_TO_ADDR
3602: LD_INT 6
3604: PUSH
3605: FOR_TO
3606: IFFALSE 3830
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
3608: LD_INT 3
3610: PPUSH
3611: LD_INT 3
3613: PPUSH
3614: LD_INT 21
3616: PUSH
3617: LD_INT 23
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: PUSH
3624: LD_VAR 0 2
3628: PUSH
3629: LD_INT 2
3631: MOD
3632: PUSH
3633: LD_INT 1
3635: PLUS
3636: ARRAY
3637: PPUSH
3638: LD_INT 1
3640: PPUSH
3641: LD_INT 1
3643: PPUSH
3644: LD_INT 43
3646: PUSH
3647: LD_INT 44
3649: PUSH
3650: LD_INT 42
3652: PUSH
3653: EMPTY
3654: LIST
3655: LIST
3656: LIST
3657: PUSH
3658: LD_VAR 0 2
3662: PUSH
3663: LD_INT 3
3665: MOD
3666: PUSH
3667: LD_INT 1
3669: PLUS
3670: ARRAY
3671: PPUSH
3672: LD_INT 100
3674: PPUSH
3675: CALL 224 0 7
// un := CreateVehicle ;
3679: LD_ADDR_VAR 0 3
3683: PUSH
3684: CALL_OW 45
3688: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
3689: LD_VAR 0 3
3693: PPUSH
3694: LD_INT 0
3696: PUSH
3697: LD_INT 5
3699: PUSH
3700: EMPTY
3701: LIST
3702: LIST
3703: PUSH
3704: LD_INT 1
3706: PPUSH
3707: LD_INT 2
3709: PPUSH
3710: CALL_OW 12
3714: ARRAY
3715: PPUSH
3716: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
3720: LD_ADDR_EXP 34
3724: PUSH
3725: LD_EXP 34
3729: PUSH
3730: LD_VAR 0 3
3734: UNION
3735: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
3736: LD_VAR 0 3
3740: PPUSH
3741: LD_INT 127
3743: PPUSH
3744: LD_INT 89
3746: PPUSH
3747: LD_INT 7
3749: PPUSH
3750: LD_INT 0
3752: PPUSH
3753: CALL_OW 50
// uc_side := 3 ;
3757: LD_ADDR_OWVAR 20
3761: PUSH
3762: LD_INT 3
3764: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
3765: LD_INT 0
3767: PPUSH
3768: LD_INT 3
3770: PPUSH
3771: LD_INT 3
3773: PPUSH
3774: CALL_OW 380
// un := CreateHuman ;
3778: LD_ADDR_VAR 0 3
3782: PUSH
3783: CALL_OW 44
3787: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
3788: LD_ADDR_EXP 34
3792: PUSH
3793: LD_EXP 34
3797: PUSH
3798: LD_VAR 0 3
3802: UNION
3803: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
3804: LD_VAR 0 3
3808: PPUSH
3809: LD_EXP 34
3813: PUSH
3814: LD_EXP 34
3818: PUSH
3819: LD_INT 1
3821: MINUS
3822: ARRAY
3823: PPUSH
3824: CALL_OW 52
// end ;
3828: GO 3605
3830: POP
3831: POP
// for i := 1 to 3 do
3832: LD_ADDR_VAR 0 2
3836: PUSH
3837: DOUBLE
3838: LD_INT 1
3840: DEC
3841: ST_TO_ADDR
3842: LD_INT 3
3844: PUSH
3845: FOR_TO
3846: IFFALSE 3912
// begin PrepareHuman ( false , 1 , Difficulty ) ;
3848: LD_INT 0
3850: PPUSH
3851: LD_INT 1
3853: PPUSH
3854: LD_OWVAR 67
3858: PPUSH
3859: CALL_OW 380
// un := CreateHuman ;
3863: LD_ADDR_VAR 0 3
3867: PUSH
3868: CALL_OW 44
3872: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
3873: LD_ADDR_EXP 34
3877: PUSH
3878: LD_EXP 34
3882: PUSH
3883: LD_VAR 0 3
3887: UNION
3888: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
3889: LD_VAR 0 3
3893: PPUSH
3894: LD_INT 91
3896: PPUSH
3897: LD_INT 60
3899: PPUSH
3900: LD_INT 3
3902: PPUSH
3903: LD_INT 0
3905: PPUSH
3906: CALL_OW 50
// end ;
3910: GO 3845
3912: POP
3913: POP
// end ;
3914: LD_VAR 0 1
3918: RET
// every 0 0$3 do var i ;
3919: GO 3921
3921: DISABLE
3922: LD_INT 0
3924: PPUSH
// begin ComExitBuilding ( grishkoSquad ) ;
3925: LD_EXP 32
3929: PPUSH
3930: CALL_OW 122
// wait ( 3 ) ;
3934: LD_INT 3
3936: PPUSH
3937: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
3941: LD_EXP 32
3945: PUSH
3946: LD_INT 1
3948: ARRAY
3949: PPUSH
3950: LD_INT 22
3952: PUSH
3953: LD_INT 6
3955: PUSH
3956: EMPTY
3957: LIST
3958: LIST
3959: PUSH
3960: LD_INT 30
3962: PUSH
3963: LD_INT 31
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: PUSH
3970: EMPTY
3971: LIST
3972: LIST
3973: PPUSH
3974: CALL_OW 69
3978: PPUSH
3979: LD_EXP 32
3983: PUSH
3984: LD_INT 1
3986: ARRAY
3987: PPUSH
3988: CALL_OW 74
3992: PPUSH
3993: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
3997: LD_EXP 32
4001: PUSH
4002: LD_INT 2
4004: ARRAY
4005: PPUSH
4006: LD_INT 211
4008: PPUSH
4009: LD_INT 107
4011: PPUSH
4012: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4016: LD_EXP 32
4020: PUSH
4021: LD_INT 2
4023: ARRAY
4024: PPUSH
4025: LD_INT 209
4027: PPUSH
4028: LD_INT 106
4030: PPUSH
4031: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4035: LD_EXP 32
4039: PUSH
4040: LD_INT 3
4042: ARRAY
4043: PPUSH
4044: LD_INT 209
4046: PPUSH
4047: LD_INT 103
4049: PPUSH
4050: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4054: LD_EXP 32
4058: PUSH
4059: LD_INT 3
4061: ARRAY
4062: PPUSH
4063: LD_INT 209
4065: PPUSH
4066: LD_INT 106
4068: PPUSH
4069: CALL_OW 178
// repeat wait ( 0 0$20 ) ;
4073: LD_INT 700
4075: PPUSH
4076: CALL_OW 67
// for i := 3 downto 2 do
4080: LD_ADDR_VAR 0 1
4084: PUSH
4085: DOUBLE
4086: LD_INT 3
4088: INC
4089: ST_TO_ADDR
4090: LD_INT 2
4092: PUSH
4093: FOR_DOWNTO
4094: IFFALSE 4261
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4096: LD_EXP 32
4100: PUSH
4101: LD_VAR 0 1
4105: ARRAY
4106: PPUSH
4107: LD_INT 200
4109: PPUSH
4110: LD_INT 91
4112: PPUSH
4113: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4117: LD_EXP 32
4121: PUSH
4122: LD_VAR 0 1
4126: ARRAY
4127: PPUSH
4128: LD_INT 210
4130: PPUSH
4131: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4135: LD_EXP 32
4139: PUSH
4140: LD_VAR 0 1
4144: ARRAY
4145: PPUSH
4146: LD_INT 224
4148: PPUSH
4149: LD_INT 93
4151: PPUSH
4152: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4156: LD_EXP 32
4160: PUSH
4161: LD_VAR 0 1
4165: ARRAY
4166: PPUSH
4167: LD_INT 210
4169: PPUSH
4170: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4174: LD_EXP 32
4178: PUSH
4179: LD_VAR 0 1
4183: ARRAY
4184: PPUSH
4185: LD_INT 239
4187: PPUSH
4188: LD_INT 123
4190: PPUSH
4191: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4195: LD_EXP 32
4199: PUSH
4200: LD_VAR 0 1
4204: ARRAY
4205: PPUSH
4206: LD_INT 210
4208: PPUSH
4209: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4213: LD_EXP 32
4217: PUSH
4218: LD_VAR 0 1
4222: ARRAY
4223: PPUSH
4224: LD_INT 212
4226: PPUSH
4227: LD_INT 105
4229: PPUSH
4230: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4234: LD_EXP 32
4238: PUSH
4239: LD_VAR 0 1
4243: ARRAY
4244: PPUSH
4245: LD_INT 700
4247: PPUSH
4248: CALL_OW 202
// wait ( 0 0$30 ) ;
4252: LD_INT 1050
4254: PPUSH
4255: CALL_OW 67
// end ;
4259: GO 4093
4261: POP
4262: POP
// until not activeGrishkoAI ;
4263: LD_EXP 9
4267: NOT
4268: IFFALSE 4073
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
4270: LD_EXP 32
4274: PPUSH
4275: LD_INT 221
4277: PPUSH
4278: LD_INT 110
4280: PPUSH
4281: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
4285: LD_EXP 32
4289: PPUSH
4290: LD_INT 228
4292: PPUSH
4293: LD_INT 115
4295: PPUSH
4296: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
4300: LD_EXP 32
4304: PPUSH
4305: CALL_OW 200
// end ;
4309: PPOPN 1
4311: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
4312: LD_EXP 11
4316: IFFALSE 4877
4318: GO 4320
4320: DISABLE
4321: LD_INT 0
4323: PPUSH
4324: PPUSH
4325: PPUSH
4326: PPUSH
// begin uc_side := 6 ;
4327: LD_ADDR_OWVAR 20
4331: PUSH
4332: LD_INT 6
4334: ST_TO_ADDR
// uc_nation := 3 ;
4335: LD_ADDR_OWVAR 21
4339: PUSH
4340: LD_INT 3
4342: ST_TO_ADDR
// for i := 1 to 3 do
4343: LD_ADDR_VAR 0 2
4347: PUSH
4348: DOUBLE
4349: LD_INT 1
4351: DEC
4352: ST_TO_ADDR
4353: LD_INT 3
4355: PUSH
4356: FOR_TO
4357: IFFALSE 4466
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
4359: LD_INT 0
4361: PPUSH
4362: LD_INT 1
4364: PPUSH
4365: LD_INT 2
4367: PUSH
4368: LD_INT 3
4370: PUSH
4371: LD_INT 4
4373: PUSH
4374: EMPTY
4375: LIST
4376: LIST
4377: LIST
4378: PUSH
4379: LD_OWVAR 67
4383: ARRAY
4384: PPUSH
4385: CALL_OW 380
// un := CreateHuman ;
4389: LD_ADDR_VAR 0 1
4393: PUSH
4394: CALL_OW 44
4398: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
4399: LD_ADDR_EXP 33
4403: PUSH
4404: LD_EXP 33
4408: PUSH
4409: LD_VAR 0 1
4413: UNION
4414: ST_TO_ADDR
// SetTag ( un , 1 ) ;
4415: LD_VAR 0 1
4419: PPUSH
4420: LD_INT 1
4422: PPUSH
4423: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
4427: LD_VAR 0 1
4431: PPUSH
4432: LD_INT 11
4434: PPUSH
4435: LD_INT 0
4437: PPUSH
4438: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
4442: LD_VAR 0 1
4446: PPUSH
4447: LD_INT 210
4449: PPUSH
4450: LD_INT 159
4452: PPUSH
4453: CALL_OW 111
// wait ( 0 0$2 ) ;
4457: LD_INT 70
4459: PPUSH
4460: CALL_OW 67
// end ;
4464: GO 4356
4466: POP
4467: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 208 , 42 ] ] ] ;
4468: LD_ADDR_VAR 0 4
4472: PUSH
4473: LD_INT 172
4475: PUSH
4476: LD_INT 76
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: LD_INT 150
4485: PUSH
4486: LD_INT 38
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: LD_INT 148
4495: PUSH
4496: LD_INT 9
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 165
4505: PUSH
4506: LD_INT 38
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: PUSH
4519: LD_INT 191
4521: PUSH
4522: LD_INT 77
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: PUSH
4529: LD_INT 168
4531: PUSH
4532: LD_INT 42
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: PUSH
4539: LD_INT 166
4541: PUSH
4542: LD_INT 11
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: PUSH
4549: LD_INT 151
4551: PUSH
4552: LD_INT 12
4554: PUSH
4555: EMPTY
4556: LIST
4557: LIST
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: LIST
4563: LIST
4564: PUSH
4565: LD_INT 221
4567: PUSH
4568: LD_INT 88
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: PUSH
4575: LD_INT 217
4577: PUSH
4578: LD_INT 64
4580: PUSH
4581: EMPTY
4582: LIST
4583: LIST
4584: PUSH
4585: LD_INT 208
4587: PUSH
4588: LD_INT 42
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PUSH
4595: EMPTY
4596: LIST
4597: LIST
4598: LIST
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: LIST
4604: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4605: LD_INT 35
4607: PPUSH
4608: CALL_OW 67
// for i := 1 to patrol do
4612: LD_ADDR_VAR 0 2
4616: PUSH
4617: DOUBLE
4618: LD_INT 1
4620: DEC
4621: ST_TO_ADDR
4622: LD_VAR 0 4
4626: PUSH
4627: FOR_TO
4628: IFFALSE 4868
// begin if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
4630: LD_EXP 33
4634: PUSH
4635: LD_VAR 0 2
4639: ARRAY
4640: PPUSH
4641: CALL_OW 256
4645: PUSH
4646: LD_INT 990
4648: LESS
4649: PUSH
4650: LD_EXP 33
4654: PUSH
4655: LD_VAR 0 2
4659: ARRAY
4660: PPUSH
4661: CALL_OW 110
4665: PUSH
4666: LD_INT 1
4668: EQUAL
4669: AND
4670: IFFALSE 4690
// SetTag ( russianPatrol [ i ] , 2 ) ;
4672: LD_EXP 33
4676: PUSH
4677: LD_VAR 0 2
4681: ARRAY
4682: PPUSH
4683: LD_INT 2
4685: PPUSH
4686: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
4690: LD_EXP 33
4694: PUSH
4695: LD_VAR 0 2
4699: ARRAY
4700: PPUSH
4701: CALL_OW 110
4705: PUSH
4706: LD_INT 2
4708: EQUAL
4709: IFFALSE 4766
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
4711: LD_EXP 33
4715: PUSH
4716: LD_VAR 0 2
4720: ARRAY
4721: PPUSH
4722: LD_INT 166
4724: PPUSH
4725: LD_INT 101
4727: PPUSH
4728: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
4732: LD_EXP 33
4736: PUSH
4737: LD_VAR 0 2
4741: ARRAY
4742: PPUSH
4743: LD_INT 71
4745: PPUSH
4746: CALL_OW 296
4750: PUSH
4751: LD_INT 10
4753: LESS
4754: IFFALSE 4764
// russianAlert := true ;
4756: LD_ADDR_EXP 8
4760: PUSH
4761: LD_INT 1
4763: ST_TO_ADDR
// continue ;
4764: GO 4627
// end ; if not HasTask ( russianPatrol [ i ] ) then
4766: LD_EXP 33
4770: PUSH
4771: LD_VAR 0 2
4775: ARRAY
4776: PPUSH
4777: CALL_OW 314
4781: NOT
4782: IFFALSE 4866
// for j in patrol [ i ] do
4784: LD_ADDR_VAR 0 3
4788: PUSH
4789: LD_VAR 0 4
4793: PUSH
4794: LD_VAR 0 2
4798: ARRAY
4799: PUSH
4800: FOR_IN
4801: IFFALSE 4864
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
4803: LD_EXP 33
4807: PUSH
4808: LD_VAR 0 2
4812: ARRAY
4813: PPUSH
4814: LD_INT 35
4816: PPUSH
4817: LD_INT 175
4819: PPUSH
4820: CALL_OW 12
4824: PPUSH
4825: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
4829: LD_EXP 33
4833: PUSH
4834: LD_VAR 0 2
4838: ARRAY
4839: PPUSH
4840: LD_VAR 0 3
4844: PUSH
4845: LD_INT 1
4847: ARRAY
4848: PPUSH
4849: LD_VAR 0 3
4853: PUSH
4854: LD_INT 2
4856: ARRAY
4857: PPUSH
4858: CALL_OW 174
// end ;
4862: GO 4800
4864: POP
4865: POP
// end ;
4866: GO 4627
4868: POP
4869: POP
// until not russianPatrol ;
4870: LD_EXP 33
4874: NOT
4875: IFFALSE 4605
// end ;
4877: PPOPN 4
4879: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_see , 2 ] ] ) diff russianPatrol do
4880: LD_INT 2
4882: PUSH
4883: LD_INT 22
4885: PUSH
4886: LD_INT 3
4888: PUSH
4889: EMPTY
4890: LIST
4891: LIST
4892: PUSH
4893: LD_INT 22
4895: PUSH
4896: LD_INT 6
4898: PUSH
4899: EMPTY
4900: LIST
4901: LIST
4902: PUSH
4903: EMPTY
4904: LIST
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 101
4910: PUSH
4911: LD_INT 2
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: PPUSH
4922: CALL_OW 69
4926: PUSH
4927: LD_EXP 33
4931: DIFF
4932: IFFALSE 4945
4934: GO 4936
4936: DISABLE
// russianAlert := true ;
4937: LD_ADDR_EXP 8
4941: PUSH
4942: LD_INT 1
4944: ST_TO_ADDR
4945: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
4946: LD_EXP 6
4950: PUSH
4951: LD_EXP 12
4955: NOT
4956: AND
4957: IFFALSE 5398
4959: GO 4961
4961: DISABLE
4962: LD_INT 0
4964: PPUSH
4965: PPUSH
4966: PPUSH
4967: PPUSH
4968: PPUSH
// begin enable ;
4969: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
4970: LD_ADDR_VAR 0 2
4974: PUSH
4975: LD_EXP 34
4979: PPUSH
4980: LD_INT 21
4982: PUSH
4983: LD_INT 2
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: PPUSH
4990: CALL_OW 72
4994: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
4995: LD_ADDR_VAR 0 4
4999: PUSH
5000: LD_INT 22
5002: PUSH
5003: LD_INT 4
5005: PUSH
5006: EMPTY
5007: LIST
5008: LIST
5009: PPUSH
5010: CALL_OW 69
5014: ST_TO_ADDR
// for i in filter do
5015: LD_ADDR_VAR 0 1
5019: PUSH
5020: LD_VAR 0 2
5024: PUSH
5025: FOR_IN
5026: IFFALSE 5396
// begin tmp := IsDrivenBy ( i ) ;
5028: LD_ADDR_VAR 0 3
5032: PUSH
5033: LD_VAR 0 1
5037: PPUSH
5038: CALL_OW 311
5042: ST_TO_ADDR
// if not tmp then
5043: LD_VAR 0 3
5047: NOT
5048: IFFALSE 5052
// continue ;
5050: GO 5025
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5052: LD_VAR 0 1
5056: PPUSH
5057: CALL_OW 261
5061: PUSH
5062: LD_INT 90
5064: GREATER
5065: PUSH
5066: LD_VAR 0 1
5070: PPUSH
5071: CALL_OW 110
5075: PUSH
5076: LD_INT 2
5078: EQUAL
5079: AND
5080: IFFALSE 5096
// SetTag ( i , 0 ) else
5082: LD_VAR 0 1
5086: PPUSH
5087: LD_INT 0
5089: PPUSH
5090: CALL_OW 109
5094: GO 5147
// if GetTag ( i ) = 2 then
5096: LD_VAR 0 1
5100: PPUSH
5101: CALL_OW 110
5105: PUSH
5106: LD_INT 2
5108: EQUAL
5109: IFFALSE 5147
// begin x := rand ( 1 , 2 ) ;
5111: LD_ADDR_VAR 0 5
5115: PUSH
5116: LD_INT 1
5118: PPUSH
5119: LD_INT 2
5121: PPUSH
5122: CALL_OW 12
5126: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5127: LD_VAR 0 1
5131: PPUSH
5132: LD_EXP 35
5136: PUSH
5137: LD_VAR 0 5
5141: ARRAY
5142: PPUSH
5143: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5147: LD_VAR 0 1
5151: PPUSH
5152: CALL_OW 256
5156: PUSH
5157: LD_INT 600
5159: GREATEREQUAL
5160: PUSH
5161: LD_VAR 0 1
5165: PPUSH
5166: CALL_OW 110
5170: NOT
5171: AND
5172: IFFALSE 5198
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5174: LD_VAR 0 1
5178: PPUSH
5179: LD_VAR 0 4
5183: PPUSH
5184: LD_VAR 0 1
5188: PPUSH
5189: CALL_OW 74
5193: PPUSH
5194: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5198: LD_VAR 0 1
5202: PPUSH
5203: CALL_OW 256
5207: PUSH
5208: LD_INT 600
5210: LESS
5211: PUSH
5212: LD_VAR 0 1
5216: PPUSH
5217: CALL_OW 110
5221: NOT
5222: AND
5223: IFFALSE 5252
// begin SetTag ( i , 1 ) ;
5225: LD_VAR 0 1
5229: PPUSH
5230: LD_INT 1
5232: PPUSH
5233: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5237: LD_VAR 0 1
5241: PPUSH
5242: LD_INT 62
5244: PPUSH
5245: LD_INT 22
5247: PPUSH
5248: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5252: LD_VAR 0 1
5256: PPUSH
5257: CALL_OW 110
5261: PUSH
5262: LD_INT 1
5264: EQUAL
5265: PUSH
5266: LD_VAR 0 1
5270: PPUSH
5271: LD_INT 62
5273: PPUSH
5274: LD_INT 22
5276: PPUSH
5277: CALL_OW 297
5281: PUSH
5282: LD_INT 6
5284: LESS
5285: AND
5286: PUSH
5287: LD_VAR 0 3
5291: AND
5292: IFFALSE 5394
// begin ComExitVehicle ( tmp ) ;
5294: LD_VAR 0 3
5298: PPUSH
5299: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
5303: LD_VAR 0 3
5307: PPUSH
5308: LD_VAR 0 1
5312: PPUSH
5313: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5317: LD_INT 35
5319: PPUSH
5320: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5324: LD_VAR 0 1
5328: PPUSH
5329: CALL_OW 256
5333: PUSH
5334: LD_INT 1000
5336: EQUAL
5337: IFFALSE 5317
// ComEnterUnit ( tmp , i ) ;
5339: LD_VAR 0 3
5343: PPUSH
5344: LD_VAR 0 1
5348: PPUSH
5349: CALL_OW 120
// if GetFuel ( i ) <= 90 then
5353: LD_VAR 0 1
5357: PPUSH
5358: CALL_OW 261
5362: PUSH
5363: LD_INT 90
5365: LESSEQUAL
5366: IFFALSE 5382
// SetTag ( i , 2 ) else
5368: LD_VAR 0 1
5372: PPUSH
5373: LD_INT 2
5375: PPUSH
5376: CALL_OW 109
5380: GO 5394
// SetTag ( i , 0 ) ;
5382: LD_VAR 0 1
5386: PPUSH
5387: LD_INT 0
5389: PPUSH
5390: CALL_OW 109
// end ; end ;
5394: GO 5025
5396: POP
5397: POP
// end ; end_of_file
5398: PPOPN 5
5400: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
5401: LD_INT 0
5403: PPUSH
5404: PPUSH
5405: PPUSH
// SetBName ( omikron , omikron ) ;
5406: LD_INT 64
5408: PPUSH
5409: LD_STRING omikron
5411: PPUSH
5412: CALL_OW 500
// uc_side := 4 ;
5416: LD_ADDR_OWVAR 20
5420: PUSH
5421: LD_INT 4
5423: ST_TO_ADDR
// uc_nation := 1 ;
5424: LD_ADDR_OWVAR 21
5428: PUSH
5429: LD_INT 1
5431: ST_TO_ADDR
// omicronSquad := [ ] ;
5432: LD_ADDR_EXP 36
5436: PUSH
5437: EMPTY
5438: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
5439: LD_ADDR_VAR 0 2
5443: PUSH
5444: LD_INT 22
5446: PUSH
5447: LD_INT 4
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: PUSH
5454: LD_INT 2
5456: PUSH
5457: LD_INT 30
5459: PUSH
5460: LD_INT 32
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: PUSH
5467: LD_INT 30
5469: PUSH
5470: LD_INT 31
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: LIST
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PPUSH
5486: CALL_OW 69
5490: PUSH
5491: FOR_IN
5492: IFFALSE 5549
// begin PrepareHuman ( false , 1 , 1 ) ;
5494: LD_INT 0
5496: PPUSH
5497: LD_INT 1
5499: PPUSH
5500: LD_INT 1
5502: PPUSH
5503: CALL_OW 380
// un := CreateHuman ;
5507: LD_ADDR_VAR 0 3
5511: PUSH
5512: CALL_OW 44
5516: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
5517: LD_ADDR_EXP 36
5521: PUSH
5522: LD_EXP 36
5526: PUSH
5527: LD_VAR 0 3
5531: UNION
5532: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
5533: LD_VAR 0 3
5537: PPUSH
5538: LD_VAR 0 2
5542: PPUSH
5543: CALL_OW 52
// end ;
5547: GO 5491
5549: POP
5550: POP
// for i := 1 to 3 do
5551: LD_ADDR_VAR 0 2
5555: PUSH
5556: DOUBLE
5557: LD_INT 1
5559: DEC
5560: ST_TO_ADDR
5561: LD_INT 3
5563: PUSH
5564: FOR_TO
5565: IFFALSE 5620
// begin PrepareHuman ( false , 2 , 2 ) ;
5567: LD_INT 0
5569: PPUSH
5570: LD_INT 2
5572: PPUSH
5573: LD_INT 2
5575: PPUSH
5576: CALL_OW 380
// un := CreateHuman ;
5580: LD_ADDR_VAR 0 3
5584: PUSH
5585: CALL_OW 44
5589: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
5590: LD_ADDR_EXP 36
5594: PUSH
5595: LD_EXP 36
5599: PUSH
5600: LD_VAR 0 3
5604: UNION
5605: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
5606: LD_VAR 0 3
5610: PPUSH
5611: LD_INT 64
5613: PPUSH
5614: CALL_OW 52
// end ;
5618: GO 5564
5620: POP
5621: POP
// for i := 1 to 2 do
5622: LD_ADDR_VAR 0 2
5626: PUSH
5627: DOUBLE
5628: LD_INT 1
5630: DEC
5631: ST_TO_ADDR
5632: LD_INT 2
5634: PUSH
5635: FOR_TO
5636: IFFALSE 5775
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
5638: LD_INT 4
5640: PPUSH
5641: LD_INT 1
5643: PPUSH
5644: LD_INT 2
5646: PPUSH
5647: LD_INT 2
5649: PPUSH
5650: LD_INT 1
5652: PPUSH
5653: LD_INT 3
5655: PPUSH
5656: LD_INT 100
5658: PPUSH
5659: CALL 224 0 7
// un := CreateVehicle ;
5663: LD_ADDR_VAR 0 3
5667: PUSH
5668: CALL_OW 45
5672: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
5673: LD_ADDR_EXP 36
5677: PUSH
5678: LD_EXP 36
5682: PUSH
5683: LD_VAR 0 3
5687: UNION
5688: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
5689: LD_VAR 0 3
5693: PPUSH
5694: LD_INT 28
5696: PPUSH
5697: LD_INT 37
5699: PPUSH
5700: LD_INT 6
5702: PPUSH
5703: LD_INT 0
5705: PPUSH
5706: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
5710: LD_INT 0
5712: PPUSH
5713: LD_INT 3
5715: PPUSH
5716: LD_INT 2
5718: PPUSH
5719: CALL_OW 380
// un := CreateHuman ;
5723: LD_ADDR_VAR 0 3
5727: PUSH
5728: CALL_OW 44
5732: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
5733: LD_ADDR_EXP 36
5737: PUSH
5738: LD_EXP 36
5742: PUSH
5743: LD_VAR 0 3
5747: UNION
5748: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
5749: LD_VAR 0 3
5753: PPUSH
5754: LD_EXP 36
5758: PUSH
5759: LD_EXP 36
5763: PUSH
5764: LD_INT 1
5766: MINUS
5767: ARRAY
5768: PPUSH
5769: CALL_OW 52
// end ;
5773: GO 5635
5775: POP
5776: POP
// end ;
5777: LD_VAR 0 1
5781: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
5782: LD_INT 0
5784: PPUSH
5785: PPUSH
5786: PPUSH
5787: PPUSH
// uc_side := 4 ;
5788: LD_ADDR_OWVAR 20
5792: PUSH
5793: LD_INT 4
5795: ST_TO_ADDR
// uc_nation := 1 ;
5796: LD_ADDR_OWVAR 21
5800: PUSH
5801: LD_INT 1
5803: ST_TO_ADDR
// tmp := [ ] ;
5804: LD_ADDR_VAR 0 4
5808: PUSH
5809: EMPTY
5810: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
5811: LD_INT 4
5813: PPUSH
5814: LD_INT 1
5816: PPUSH
5817: LD_INT 2
5819: PPUSH
5820: LD_INT 1
5822: PPUSH
5823: LD_INT 1
5825: PPUSH
5826: LD_INT 4
5828: PPUSH
5829: LD_INT 77
5831: PPUSH
5832: CALL 224 0 7
// un := CreateVehicle ;
5836: LD_ADDR_VAR 0 3
5840: PUSH
5841: CALL_OW 45
5845: ST_TO_ADDR
// tmp := tmp union un ;
5846: LD_ADDR_VAR 0 4
5850: PUSH
5851: LD_VAR 0 4
5855: PUSH
5856: LD_VAR 0 3
5860: UNION
5861: ST_TO_ADDR
// SetDir ( un , 2 ) ;
5862: LD_VAR 0 3
5866: PPUSH
5867: LD_INT 2
5869: PPUSH
5870: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
5874: LD_VAR 0 3
5878: PPUSH
5879: LD_INT 106
5881: PPUSH
5882: LD_INT 3
5884: PPUSH
5885: LD_INT 0
5887: PPUSH
5888: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
5892: LD_INT 0
5894: PPUSH
5895: LD_INT 3
5897: PPUSH
5898: LD_INT 2
5900: PPUSH
5901: CALL_OW 380
// un := CreateHuman ;
5905: LD_ADDR_VAR 0 3
5909: PUSH
5910: CALL_OW 44
5914: ST_TO_ADDR
// tmp := tmp union un ;
5915: LD_ADDR_VAR 0 4
5919: PUSH
5920: LD_VAR 0 4
5924: PUSH
5925: LD_VAR 0 3
5929: UNION
5930: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
5931: LD_VAR 0 3
5935: PPUSH
5936: LD_VAR 0 4
5940: PUSH
5941: LD_VAR 0 4
5945: PUSH
5946: LD_INT 1
5948: MINUS
5949: ARRAY
5950: PPUSH
5951: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
5955: LD_VAR 0 3
5959: PPUSH
5960: LD_INT 109
5962: PPUSH
5963: LD_INT 9
5965: PPUSH
5966: CALL_OW 111
// wait ( 0 0$1 ) ;
5970: LD_INT 35
5972: PPUSH
5973: CALL_OW 67
// for i := 1 to 2 do
5977: LD_ADDR_VAR 0 2
5981: PUSH
5982: DOUBLE
5983: LD_INT 1
5985: DEC
5986: ST_TO_ADDR
5987: LD_INT 2
5989: PUSH
5990: FOR_TO
5991: IFFALSE 6055
// begin PrepareHuman ( false , 1 , 2 ) ;
5993: LD_INT 0
5995: PPUSH
5996: LD_INT 1
5998: PPUSH
5999: LD_INT 2
6001: PPUSH
6002: CALL_OW 380
// un := CreateHuman ;
6006: LD_ADDR_VAR 0 3
6010: PUSH
6011: CALL_OW 44
6015: ST_TO_ADDR
// tmp := tmp union un ;
6016: LD_ADDR_VAR 0 4
6020: PUSH
6021: LD_VAR 0 4
6025: PUSH
6026: LD_VAR 0 3
6030: UNION
6031: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
6032: LD_VAR 0 3
6036: PPUSH
6037: LD_INT 105
6039: PPUSH
6040: LD_INT 2
6042: PPUSH
6043: LD_INT 2
6045: PPUSH
6046: LD_INT 0
6048: PPUSH
6049: CALL_OW 50
// end ;
6053: GO 5990
6055: POP
6056: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
6057: LD_VAR 0 4
6061: PPUSH
6062: LD_INT 26
6064: PPUSH
6065: LD_INT 35
6067: PPUSH
6068: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
6072: LD_INT 35
6074: PPUSH
6075: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
6079: LD_VAR 0 4
6083: PPUSH
6084: LD_INT 50
6086: PUSH
6087: EMPTY
6088: LIST
6089: PPUSH
6090: CALL_OW 72
6094: NOT
6095: IFFALSE 6099
// exit ;
6097: GO 6226
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
6099: LD_VAR 0 4
6103: PPUSH
6104: LD_INT 91
6106: PUSH
6107: LD_INT 64
6109: PUSH
6110: LD_INT 12
6112: PUSH
6113: EMPTY
6114: LIST
6115: LIST
6116: LIST
6117: PPUSH
6118: CALL_OW 72
6122: PUSH
6123: LD_VAR 0 4
6127: EQUAL
6128: IFFALSE 6072
// omicronSquad := omicronSquad union tmp ;
6130: LD_ADDR_EXP 36
6134: PUSH
6135: LD_EXP 36
6139: PUSH
6140: LD_VAR 0 4
6144: UNION
6145: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
6146: LD_ADDR_VAR 0 2
6150: PUSH
6151: LD_VAR 0 4
6155: PPUSH
6156: LD_INT 25
6158: PUSH
6159: LD_INT 1
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: PPUSH
6166: CALL_OW 72
6170: PUSH
6171: FOR_IN
6172: IFFALSE 6224
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
6174: LD_VAR 0 2
6178: PPUSH
6179: LD_INT 22
6181: PUSH
6182: LD_INT 4
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: PUSH
6189: LD_INT 30
6191: PUSH
6192: LD_INT 4
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: PPUSH
6203: CALL_OW 69
6207: PPUSH
6208: LD_VAR 0 2
6212: PPUSH
6213: CALL_OW 74
6217: PPUSH
6218: CALL_OW 120
6222: GO 6171
6224: POP
6225: POP
// end ;
6226: LD_VAR 0 1
6230: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
6231: LD_EXP 12
6235: NOT
6236: IFFALSE 6807
6238: GO 6240
6240: DISABLE
6241: LD_INT 0
6243: PPUSH
6244: PPUSH
6245: PPUSH
6246: PPUSH
// begin enable ;
6247: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6248: LD_ADDR_VAR 0 2
6252: PUSH
6253: LD_INT 22
6255: PUSH
6256: LD_INT 4
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: PUSH
6263: LD_INT 21
6265: PUSH
6266: LD_INT 3
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PUSH
6273: LD_INT 3
6275: PUSH
6276: LD_INT 24
6278: PUSH
6279: LD_INT 1000
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: PUSH
6290: EMPTY
6291: LIST
6292: LIST
6293: LIST
6294: PPUSH
6295: CALL_OW 69
6299: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
6300: LD_ADDR_VAR 0 3
6304: PUSH
6305: LD_EXP 36
6309: PPUSH
6310: LD_INT 25
6312: PUSH
6313: LD_INT 2
6315: PUSH
6316: EMPTY
6317: LIST
6318: LIST
6319: PPUSH
6320: CALL_OW 72
6324: ST_TO_ADDR
// if filter and tmp then
6325: LD_VAR 0 2
6329: PUSH
6330: LD_VAR 0 3
6334: AND
6335: IFFALSE 6408
// begin for i in tmp do
6337: LD_ADDR_VAR 0 1
6341: PUSH
6342: LD_VAR 0 3
6346: PUSH
6347: FOR_IN
6348: IFFALSE 6404
// if IsInUnit ( i ) then
6350: LD_VAR 0 1
6354: PPUSH
6355: CALL_OW 310
6359: IFFALSE 6372
// ComExitBuilding ( i ) else
6361: LD_VAR 0 1
6365: PPUSH
6366: CALL_OW 122
6370: GO 6402
// if not HasTask ( i ) then
6372: LD_VAR 0 1
6376: PPUSH
6377: CALL_OW 314
6381: NOT
6382: IFFALSE 6402
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6384: LD_VAR 0 1
6388: PPUSH
6389: LD_VAR 0 2
6393: PUSH
6394: LD_INT 1
6396: ARRAY
6397: PPUSH
6398: CALL_OW 130
6402: GO 6347
6404: POP
6405: POP
// end else
6406: GO 6479
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
6408: LD_VAR 0 3
6412: PPUSH
6413: LD_INT 3
6415: PUSH
6416: LD_INT 54
6418: PUSH
6419: EMPTY
6420: LIST
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: PPUSH
6426: CALL_OW 72
6430: IFFALSE 6479
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
6432: LD_ADDR_VAR 0 1
6436: PUSH
6437: LD_VAR 0 3
6441: PPUSH
6442: LD_INT 3
6444: PUSH
6445: LD_INT 54
6447: PUSH
6448: EMPTY
6449: LIST
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: PPUSH
6455: CALL_OW 72
6459: PUSH
6460: FOR_IN
6461: IFFALSE 6477
// ComEnterUnit ( i , omikron ) ;
6463: LD_VAR 0 1
6467: PPUSH
6468: LD_INT 64
6470: PPUSH
6471: CALL_OW 120
6475: GO 6460
6477: POP
6478: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
6479: LD_ADDR_VAR 0 2
6483: PUSH
6484: LD_EXP 36
6488: PPUSH
6489: LD_INT 21
6491: PUSH
6492: LD_INT 2
6494: PUSH
6495: EMPTY
6496: LIST
6497: LIST
6498: PPUSH
6499: CALL_OW 72
6503: ST_TO_ADDR
// if not filter then
6504: LD_VAR 0 2
6508: NOT
6509: IFFALSE 6513
// exit ;
6511: GO 6807
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
6513: LD_ADDR_VAR 0 4
6517: PUSH
6518: LD_INT 13
6520: PPUSH
6521: LD_INT 81
6523: PUSH
6524: LD_INT 4
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PPUSH
6531: CALL_OW 70
6535: ST_TO_ADDR
// if enemy then
6536: LD_VAR 0 4
6540: IFFALSE 6807
// begin for i in filter do
6542: LD_ADDR_VAR 0 1
6546: PUSH
6547: LD_VAR 0 2
6551: PUSH
6552: FOR_IN
6553: IFFALSE 6805
// begin tmp := IsDrivenBy ( i ) ;
6555: LD_ADDR_VAR 0 3
6559: PUSH
6560: LD_VAR 0 1
6564: PPUSH
6565: CALL_OW 311
6569: ST_TO_ADDR
// if not tmp then
6570: LD_VAR 0 3
6574: NOT
6575: IFFALSE 6579
// continue ;
6577: GO 6552
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
6579: LD_VAR 0 1
6583: PPUSH
6584: CALL_OW 256
6588: PUSH
6589: LD_INT 600
6591: GREATEREQUAL
6592: PUSH
6593: LD_VAR 0 1
6597: PPUSH
6598: CALL_OW 110
6602: PUSH
6603: LD_INT 1
6605: NONEQUAL
6606: AND
6607: IFFALSE 6633
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6609: LD_VAR 0 1
6613: PPUSH
6614: LD_VAR 0 4
6618: PPUSH
6619: LD_VAR 0 1
6623: PPUSH
6624: CALL_OW 74
6628: PPUSH
6629: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
6633: LD_VAR 0 1
6637: PPUSH
6638: CALL_OW 256
6642: PUSH
6643: LD_INT 600
6645: LESS
6646: PUSH
6647: LD_VAR 0 1
6651: PPUSH
6652: CALL_OW 110
6656: PUSH
6657: LD_INT 1
6659: NONEQUAL
6660: AND
6661: IFFALSE 6690
// begin SetTag ( i , 1 ) ;
6663: LD_VAR 0 1
6667: PPUSH
6668: LD_INT 1
6670: PPUSH
6671: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
6675: LD_VAR 0 1
6679: PPUSH
6680: LD_INT 27
6682: PPUSH
6683: LD_INT 35
6685: PPUSH
6686: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
6690: LD_VAR 0 1
6694: PPUSH
6695: CALL_OW 110
6699: PUSH
6700: LD_INT 1
6702: EQUAL
6703: PUSH
6704: LD_VAR 0 1
6708: PPUSH
6709: LD_INT 27
6711: PPUSH
6712: LD_INT 35
6714: PPUSH
6715: CALL_OW 297
6719: PUSH
6720: LD_INT 6
6722: LESS
6723: AND
6724: PUSH
6725: LD_VAR 0 3
6729: AND
6730: IFFALSE 6803
// begin ComExitVehicle ( tmp ) ;
6732: LD_VAR 0 3
6736: PPUSH
6737: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
6741: LD_VAR 0 3
6745: PPUSH
6746: LD_VAR 0 1
6750: PPUSH
6751: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
6755: LD_INT 35
6757: PPUSH
6758: CALL_OW 67
// until GetLives ( i ) = 1000 ;
6762: LD_VAR 0 1
6766: PPUSH
6767: CALL_OW 256
6771: PUSH
6772: LD_INT 1000
6774: EQUAL
6775: IFFALSE 6755
// ComEnterUnit ( tmp , i ) ;
6777: LD_VAR 0 3
6781: PPUSH
6782: LD_VAR 0 1
6786: PPUSH
6787: CALL_OW 120
// SetTag ( i , 0 ) ;
6791: LD_VAR 0 1
6795: PPUSH
6796: LD_INT 0
6798: PPUSH
6799: CALL_OW 109
// end ; end ;
6803: GO 6552
6805: POP
6806: POP
// end ; end ;
6807: PPOPN 4
6809: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
6810: LD_EXP 12
6814: IFFALSE 6958
6816: GO 6818
6818: DISABLE
6819: LD_INT 0
6821: PPUSH
6822: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
6823: LD_ADDR_VAR 0 2
6827: PUSH
6828: LD_EXP 36
6832: PPUSH
6833: LD_INT 21
6835: PUSH
6836: LD_INT 1
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PUSH
6843: LD_INT 50
6845: PUSH
6846: EMPTY
6847: LIST
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: PPUSH
6853: CALL_OW 72
6857: ST_TO_ADDR
// if not tmp then
6858: LD_VAR 0 2
6862: NOT
6863: IFFALSE 6867
// exit ;
6865: GO 6958
// repeat wait ( 0 0$1 ) ;
6867: LD_INT 35
6869: PPUSH
6870: CALL_OW 67
// for i in tmp do
6874: LD_ADDR_VAR 0 1
6878: PUSH
6879: LD_VAR 0 2
6883: PUSH
6884: FOR_IN
6885: IFFALSE 6949
// begin ComExit ( i ) ;
6887: LD_VAR 0 1
6891: PPUSH
6892: CALL 996 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
6896: LD_VAR 0 1
6900: PPUSH
6901: LD_INT 14
6903: PPUSH
6904: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
6908: LD_VAR 0 1
6912: PPUSH
6913: LD_INT 14
6915: PPUSH
6916: CALL_OW 308
6920: IFFALSE 6947
// begin tmp := tmp diff i ;
6922: LD_ADDR_VAR 0 2
6926: PUSH
6927: LD_VAR 0 2
6931: PUSH
6932: LD_VAR 0 1
6936: DIFF
6937: ST_TO_ADDR
// RemoveUnit ( i ) ;
6938: LD_VAR 0 1
6942: PPUSH
6943: CALL_OW 64
// end ; end ;
6947: GO 6884
6949: POP
6950: POP
// until not tmp ;
6951: LD_VAR 0 2
6955: NOT
6956: IFFALSE 6867
// end ; end_of_file
6958: PPOPN 2
6960: END
// export function Action ; var i , un , veh , tmp ; begin
6961: LD_INT 0
6963: PPUSH
6964: PPUSH
6965: PPUSH
6966: PPUSH
6967: PPUSH
// InGameOn ;
6968: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
6972: LD_INT 179
6974: PPUSH
6975: LD_INT 5
6977: PPUSH
6978: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
6982: LD_ADDR_VAR 0 4
6986: PUSH
6987: LD_INT 2
6989: PPUSH
6990: LD_INT 2
6992: PPUSH
6993: LD_INT 12
6995: PPUSH
6996: LD_INT 1
6998: PPUSH
6999: LD_INT 1
7001: PPUSH
7002: LD_INT 24
7004: PPUSH
7005: LD_INT 33
7007: PPUSH
7008: CALL 224 0 7
7012: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
7013: LD_VAR 0 4
7017: PPUSH
7018: LD_INT 2
7020: PPUSH
7021: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
7025: LD_VAR 0 4
7029: PPUSH
7030: LD_INT 178
7032: PPUSH
7033: LD_INT 2
7035: PPUSH
7036: LD_INT 0
7038: PPUSH
7039: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
7043: LD_EXP 13
7047: PPUSH
7048: LD_VAR 0 4
7052: PPUSH
7053: CALL_OW 52
// if Kamil then
7057: LD_EXP 16
7061: IFFALSE 7096
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
7063: LD_EXP 16
7067: PPUSH
7068: LD_INT 207
7070: PPUSH
7071: LD_INT 37
7073: PPUSH
7074: LD_INT 0
7076: PPUSH
7077: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
7081: LD_EXP 16
7085: PPUSH
7086: LD_INT 211
7088: PPUSH
7089: LD_INT 38
7091: PPUSH
7092: CALL_OW 118
// end ; if Sophia then
7096: LD_EXP 18
7100: IFFALSE 7135
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
7102: LD_EXP 18
7106: PPUSH
7107: LD_INT 209
7109: PPUSH
7110: LD_INT 40
7112: PPUSH
7113: LD_INT 0
7115: PPUSH
7116: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
7120: LD_EXP 18
7124: PPUSH
7125: LD_INT 211
7127: PPUSH
7128: LD_INT 38
7130: PPUSH
7131: CALL_OW 118
// end ; if Givi then
7135: LD_EXP 14
7139: IFFALSE 7174
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
7141: LD_EXP 14
7145: PPUSH
7146: LD_INT 201
7148: PPUSH
7149: LD_INT 34
7151: PPUSH
7152: LD_INT 0
7154: PPUSH
7155: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
7159: LD_EXP 14
7163: PPUSH
7164: LD_INT 206
7166: PPUSH
7167: LD_INT 36
7169: PPUSH
7170: CALL_OW 118
// end ; if Markov then
7174: LD_EXP 19
7178: IFFALSE 7265
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
7180: LD_ADDR_VAR 0 4
7184: PUSH
7185: LD_INT 2
7187: PPUSH
7188: LD_INT 2
7190: PPUSH
7191: LD_INT 13
7193: PPUSH
7194: LD_INT 1
7196: PPUSH
7197: LD_INT 1
7199: PPUSH
7200: LD_INT 25
7202: PPUSH
7203: LD_INT 80
7205: PUSH
7206: LD_INT 20
7208: PUSH
7209: LD_OWVAR 67
7213: MUL
7214: MINUS
7215: PPUSH
7216: CALL 224 0 7
7220: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
7221: LD_VAR 0 4
7225: PPUSH
7226: LD_INT 2
7228: PPUSH
7229: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
7233: LD_VAR 0 4
7237: PPUSH
7238: LD_INT 197
7240: PPUSH
7241: LD_INT 35
7243: PPUSH
7244: LD_INT 0
7246: PPUSH
7247: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
7251: LD_EXP 19
7255: PPUSH
7256: LD_VAR 0 4
7260: PPUSH
7261: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
7265: LD_ADDR_VAR 0 5
7269: PUSH
7270: LD_EXP 17
7274: PUSH
7275: LD_EXP 24
7279: UNION
7280: ST_TO_ADDR
// for i in tmp do
7281: LD_ADDR_VAR 0 2
7285: PUSH
7286: LD_VAR 0 5
7290: PUSH
7291: FOR_IN
7292: IFFALSE 7326
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
7294: LD_VAR 0 2
7298: PPUSH
7299: LD_INT 203
7301: PPUSH
7302: LD_INT 41
7304: PPUSH
7305: LD_INT 6
7307: PPUSH
7308: LD_INT 0
7310: PPUSH
7311: CALL_OW 50
// ComHold ( i ) ;
7315: LD_VAR 0 2
7319: PPUSH
7320: CALL_OW 140
// end ;
7324: GO 7291
7326: POP
7327: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
7328: LD_INT 22
7330: PUSH
7331: LD_INT 2
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: PUSH
7338: LD_INT 25
7340: PUSH
7341: LD_INT 2
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: PPUSH
7352: CALL_OW 69
7356: NOT
7357: IFFALSE 7371
// SetClass ( Heike , 2 ) ;
7359: LD_EXP 13
7363: PPUSH
7364: LD_INT 2
7366: PPUSH
7367: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
7371: LD_EXP 13
7375: PPUSH
7376: LD_INT 183
7378: PPUSH
7379: LD_INT 12
7381: PPUSH
7382: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
7386: LD_EXP 13
7390: PPUSH
7391: LD_INT 188
7393: PPUSH
7394: LD_INT 20
7396: PPUSH
7397: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
7401: LD_EXP 13
7405: PPUSH
7406: LD_INT 191
7408: PPUSH
7409: LD_INT 25
7411: PPUSH
7412: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
7416: LD_EXP 13
7420: PPUSH
7421: LD_INT 203
7423: PPUSH
7424: LD_INT 29
7426: PPUSH
7427: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
7431: LD_EXP 13
7435: PPUSH
7436: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
7440: LD_INT 35
7442: PPUSH
7443: CALL_OW 67
// until not IsInUnit ( Heike ) ;
7447: LD_EXP 13
7451: PPUSH
7452: CALL_OW 310
7456: NOT
7457: IFFALSE 7440
// CenterOnUnits ( Heike ) ;
7459: LD_EXP 13
7463: PPUSH
7464: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
7468: LD_ADDR_VAR 0 5
7472: PUSH
7473: LD_INT 22
7475: PUSH
7476: LD_INT 2
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: PUSH
7483: LD_INT 21
7485: PUSH
7486: LD_INT 1
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PUSH
7493: EMPTY
7494: LIST
7495: LIST
7496: PPUSH
7497: CALL_OW 69
7501: PUSH
7502: LD_EXP 13
7506: PUSH
7507: LD_EXP 19
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: DIFF
7516: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
7517: LD_VAR 0 5
7521: PPUSH
7522: LD_EXP 13
7526: PPUSH
7527: CALL_OW 119
// if Givi then
7531: LD_EXP 14
7535: IFFALSE 7553
// ComTurnUnit ( Heike , Givi ) else
7537: LD_EXP 13
7541: PPUSH
7542: LD_EXP 14
7546: PPUSH
7547: CALL_OW 119
7551: GO 7571
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
7553: LD_EXP 13
7557: PPUSH
7558: LD_VAR 0 5
7562: PUSH
7563: LD_INT 1
7565: ARRAY
7566: PPUSH
7567: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
7571: LD_EXP 13
7575: PPUSH
7576: LD_STRING DH-Start-1
7578: PPUSH
7579: CALL_OW 88
// if Givi then
7583: LD_EXP 14
7587: IFFALSE 7634
// begin Say ( Givi , DG-Start-2 ) ;
7589: LD_EXP 14
7593: PPUSH
7594: LD_STRING DG-Start-2
7596: PPUSH
7597: CALL_OW 88
// if not Mike then
7601: LD_EXP 15
7605: NOT
7606: IFFALSE 7632
// begin Say ( Givi , DG-Start-b-3 ) ;
7608: LD_EXP 14
7612: PPUSH
7613: LD_STRING DG-Start-b-3
7615: PPUSH
7616: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
7620: LD_EXP 13
7624: PPUSH
7625: LD_STRING DH-Start-b-4
7627: PPUSH
7628: CALL_OW 88
// end ; end else
7632: GO 7699
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
7634: LD_EXP 24
7638: PPUSH
7639: LD_INT 26
7641: PUSH
7642: LD_INT 1
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: PPUSH
7649: CALL_OW 72
7653: PUSH
7654: LD_INT 1
7656: ARRAY
7657: PPUSH
7658: LD_STRING DArm-Start-a-2
7660: PPUSH
7661: CALL_OW 88
7665: NOT
7666: IFFALSE 7699
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
7668: LD_EXP 24
7672: PPUSH
7673: LD_INT 26
7675: PUSH
7676: LD_INT 2
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: PPUSH
7683: CALL_OW 72
7687: PUSH
7688: LD_INT 1
7690: ARRAY
7691: PPUSH
7692: LD_STRING DArf-Start-a-2
7694: PPUSH
7695: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
7699: LD_EXP 13
7703: PPUSH
7704: LD_INT 211
7706: PPUSH
7707: LD_INT 38
7709: PPUSH
7710: CALL_OW 118
// wait ( 0 0$1 ) ;
7714: LD_INT 35
7716: PPUSH
7717: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
7721: LD_EXP 13
7725: PPUSH
7726: LD_STRING DH-Start-3
7728: PPUSH
7729: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
7733: LD_EXP 13
7737: PPUSH
7738: LD_STRING DH-Start-4
7740: PPUSH
7741: CALL_OW 88
// InGameOff ;
7745: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
7749: LD_STRING Prepare
7751: PPUSH
7752: CALL_OW 337
// wait ( 0 0$10 ) ;
7756: LD_INT 350
7758: PPUSH
7759: CALL_OW 67
// if not Aviradze then
7763: LD_EXP 23
7767: NOT
7768: IFFALSE 7772
// exit ;
7770: GO 7964
// SetDir ( Aviradze , 4 ) ;
7772: LD_EXP 23
7776: PPUSH
7777: LD_INT 4
7779: PPUSH
7780: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
7784: LD_EXP 23
7788: PPUSH
7789: LD_INT 225
7791: PPUSH
7792: LD_INT 33
7794: PPUSH
7795: LD_INT 0
7797: PPUSH
7798: CALL_OW 48
// for i := 1 to 2 do
7802: LD_ADDR_VAR 0 2
7806: PUSH
7807: DOUBLE
7808: LD_INT 1
7810: DEC
7811: ST_TO_ADDR
7812: LD_INT 2
7814: PUSH
7815: FOR_TO
7816: IFFALSE 7947
// begin uc_side := 2 ;
7818: LD_ADDR_OWVAR 20
7822: PUSH
7823: LD_INT 2
7825: ST_TO_ADDR
// uc_nation := 0 ;
7826: LD_ADDR_OWVAR 21
7830: PUSH
7831: LD_INT 0
7833: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
7834: LD_INT 0
7836: PPUSH
7837: LD_INT 12
7839: PPUSH
7840: LD_INT 1
7842: PPUSH
7843: CALL_OW 380
// hc_gallery :=  ;
7847: LD_ADDR_OWVAR 33
7851: PUSH
7852: LD_STRING 
7854: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
7855: LD_ADDR_OWVAR 26
7859: PUSH
7860: LD_STRING Artudito
7862: PUSH
7863: LD_STRING Textur
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: PUSH
7870: LD_VAR 0 2
7874: ARRAY
7875: ST_TO_ADDR
// un := CreateHuman ;
7876: LD_ADDR_VAR 0 3
7880: PUSH
7881: CALL_OW 44
7885: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
7886: LD_VAR 0 3
7890: PPUSH
7891: LD_INT 224
7893: PUSH
7894: LD_INT 226
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: PUSH
7901: LD_VAR 0 2
7905: ARRAY
7906: PPUSH
7907: LD_INT 31
7909: PUSH
7910: LD_INT 35
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: PUSH
7917: LD_VAR 0 2
7921: ARRAY
7922: PPUSH
7923: LD_INT 0
7925: PPUSH
7926: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
7930: LD_VAR 0 3
7934: PPUSH
7935: LD_INT 215
7937: PPUSH
7938: LD_INT 36
7940: PPUSH
7941: CALL_OW 111
// end ;
7945: GO 7815
7947: POP
7948: POP
// ComMoveXY ( Aviradze , 215 , 36 ) ;
7949: LD_EXP 23
7953: PPUSH
7954: LD_INT 215
7956: PPUSH
7957: LD_INT 36
7959: PPUSH
7960: CALL_OW 111
// end ;
7964: LD_VAR 0 1
7968: RET
// every 0 0$2 trigger baseConstructed do
7969: LD_EXP 3
7973: IFFALSE 8858
7975: GO 7977
7977: DISABLE
// begin DialogueOn ;
7978: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
7982: LD_EXP 13
7986: PPUSH
7987: LD_STRING DH-base-1
7989: PPUSH
7990: CALL_OW 88
// if Markov then
7994: LD_EXP 19
7998: IFFALSE 8050
// begin Say ( Markov , DMar-base-2 ) ;
8000: LD_EXP 19
8004: PPUSH
8005: LD_STRING DMar-base-2
8007: PPUSH
8008: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
8012: LD_EXP 19
8016: PPUSH
8017: LD_STRING DMar-base-3
8019: PPUSH
8020: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
8024: LD_EXP 13
8028: PPUSH
8029: LD_STRING DH-base-4
8031: PPUSH
8032: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
8036: LD_EXP 19
8040: PPUSH
8041: LD_STRING DMar-base-5
8043: PPUSH
8044: CALL_OW 88
// end else
8048: GO 8127
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
8050: LD_EXP 24
8054: PPUSH
8055: LD_INT 26
8057: PUSH
8058: LD_INT 1
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: PPUSH
8065: CALL_OW 72
8069: PUSH
8070: LD_INT 1
8072: ARRAY
8073: PPUSH
8074: LD_STRING DArm-base-a-2
8076: PPUSH
8077: CALL_OW 88
8081: NOT
8082: IFFALSE 8115
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
8084: LD_EXP 24
8088: PPUSH
8089: LD_INT 26
8091: PUSH
8092: LD_INT 2
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: PPUSH
8099: CALL_OW 72
8103: PUSH
8104: LD_INT 1
8106: ARRAY
8107: PPUSH
8108: LD_STRING DArf-base-a-2
8110: PPUSH
8111: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
8115: LD_EXP 13
8119: PPUSH
8120: LD_STRING DH-base-a-3
8122: PPUSH
8123: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
8127: LD_EXP 23
8131: PPUSH
8132: LD_STRING DA-base-6
8134: PPUSH
8135: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
8139: LD_EXP 23
8143: PPUSH
8144: LD_STRING DA-base-7
8146: PPUSH
8147: CALL_OW 88
// DialogueOff ;
8151: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
8155: LD_STRING Flamethrower
8157: PPUSH
8158: CALL_OW 337
// wait ( 2 2$00 ) ;
8162: LD_INT 4200
8164: PPUSH
8165: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
8169: LD_EXP 22
8173: PUSH
8174: LD_EXP 15
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: PPUSH
8183: LD_INT 203
8185: PPUSH
8186: LD_INT 37
8188: PPUSH
8189: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
8193: LD_INT 22
8195: PUSH
8196: LD_INT 2
8198: PUSH
8199: EMPTY
8200: LIST
8201: LIST
8202: PUSH
8203: LD_INT 92
8205: PUSH
8206: LD_INT 203
8208: PUSH
8209: LD_INT 37
8211: PUSH
8212: LD_INT 10
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: PPUSH
8225: CALL_OW 69
8229: NOT
8230: IFFALSE 8270
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
8232: LD_EXP 22
8236: PUSH
8237: LD_EXP 15
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: PPUSH
8246: LD_EXP 13
8250: PPUSH
8251: CALL_OW 250
8255: PPUSH
8256: LD_EXP 13
8260: PPUSH
8261: CALL_OW 251
8265: PPUSH
8266: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8270: LD_INT 35
8272: PPUSH
8273: CALL_OW 67
// until See ( 2 , Kurt ) or GetDistUnits ( Kurt , Heike ) < 8 ;
8277: LD_INT 2
8279: PPUSH
8280: LD_EXP 22
8284: PPUSH
8285: CALL_OW 292
8289: PUSH
8290: LD_EXP 22
8294: PPUSH
8295: LD_EXP 13
8299: PPUSH
8300: CALL_OW 296
8304: PUSH
8305: LD_INT 8
8307: LESS
8308: OR
8309: IFFALSE 8270
// InGameOn ;
8311: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
8315: LD_EXP 22
8319: PPUSH
8320: CALL_OW 87
// if IsInUnit ( Heike ) then
8324: LD_EXP 13
8328: PPUSH
8329: CALL_OW 310
8333: IFFALSE 8344
// ComExitBuilding ( Heike ) ;
8335: LD_EXP 13
8339: PPUSH
8340: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
8344: LD_EXP 22
8348: PUSH
8349: LD_EXP 15
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: PPUSH
8358: LD_EXP 13
8362: PPUSH
8363: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
8367: LD_EXP 13
8371: PPUSH
8372: LD_EXP 22
8376: PPUSH
8377: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
8381: LD_INT 22
8383: PUSH
8384: LD_INT 2
8386: PUSH
8387: EMPTY
8388: LIST
8389: LIST
8390: PUSH
8391: LD_INT 91
8393: PUSH
8394: LD_EXP 22
8398: PUSH
8399: LD_INT 10
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: LIST
8406: PUSH
8407: LD_INT 21
8409: PUSH
8410: LD_INT 3
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: PUSH
8417: EMPTY
8418: LIST
8419: LIST
8420: LIST
8421: PPUSH
8422: CALL_OW 69
8426: IFFALSE 8452
// begin Say ( Kurt , DKs-scout-1 ) ;
8428: LD_EXP 22
8432: PPUSH
8433: LD_STRING DKs-scout-1
8435: PPUSH
8436: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
8440: LD_EXP 13
8444: PPUSH
8445: LD_STRING DH-scout-2
8447: PPUSH
8448: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
8452: LD_INT 35
8454: PPUSH
8455: CALL_OW 67
// until GetDistUnits ( Heike , Kurt ) < 6 ;
8459: LD_EXP 13
8463: PPUSH
8464: LD_EXP 22
8468: PPUSH
8469: CALL_OW 296
8473: PUSH
8474: LD_INT 6
8476: LESS
8477: IFFALSE 8452
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
8479: LD_EXP 22
8483: PUSH
8484: LD_EXP 15
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PPUSH
8493: LD_EXP 13
8497: PPUSH
8498: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
8502: LD_EXP 22
8506: PPUSH
8507: LD_STRING DKs-scout-3
8509: PPUSH
8510: CALL_OW 88
// if Kaia then
8514: LD_EXP 17
8518: IFFALSE 8701
// begin if IsInUnit ( Kaia ) then
8520: LD_EXP 17
8524: PPUSH
8525: CALL_OW 310
8529: IFFALSE 8540
// ComExitBuilding ( Kaia ) ;
8531: LD_EXP 17
8535: PPUSH
8536: CALL_OW 122
// AddComMoveUnit ( Kaia , Kurt ) ;
8540: LD_EXP 17
8544: PPUSH
8545: LD_EXP 22
8549: PPUSH
8550: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
8554: LD_INT 35
8556: PPUSH
8557: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
8561: LD_EXP 17
8565: PPUSH
8566: LD_EXP 22
8570: PPUSH
8571: CALL_OW 296
8575: PUSH
8576: LD_INT 6
8578: LESS
8579: IFFALSE 8554
// ComTurnUnit ( Kaia , Kurt ) ;
8581: LD_EXP 17
8585: PPUSH
8586: LD_EXP 22
8590: PPUSH
8591: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
8595: LD_EXP 17
8599: PPUSH
8600: LD_STRING DK-scout-4
8602: PPUSH
8603: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
8607: LD_EXP 22
8611: PPUSH
8612: LD_EXP 17
8616: PPUSH
8617: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
8621: LD_EXP 22
8625: PPUSH
8626: LD_STRING DKs-scout-5
8628: PPUSH
8629: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
8633: LD_EXP 17
8637: PPUSH
8638: LD_STRING DK-scout-6
8640: PPUSH
8641: CALL_OW 88
// if Mike then
8645: LD_EXP 15
8649: IFFALSE 8701
// begin Say ( Mike , DM-scout-7 ) ;
8651: LD_EXP 15
8655: PPUSH
8656: LD_STRING DM-scout-7
8658: PPUSH
8659: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
8663: LD_EXP 17
8667: PPUSH
8668: LD_EXP 15
8672: PPUSH
8673: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
8677: LD_EXP 17
8681: PPUSH
8682: LD_STRING DK-scout-8
8684: PPUSH
8685: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
8689: LD_EXP 15
8693: PPUSH
8694: LD_STRING DM-scout-9
8696: PPUSH
8697: CALL_OW 88
// end ; end ; ShowArea ( 2 , scoutArea ) ;
8701: LD_INT 2
8703: PPUSH
8704: LD_INT 9
8706: PPUSH
8707: CALL_OW 334
// CenterOnXY ( 184 , 100 ) ;
8711: LD_INT 184
8713: PPUSH
8714: LD_INT 100
8716: PPUSH
8717: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
8721: LD_EXP 22
8725: PPUSH
8726: LD_STRING DKs-scout-10
8728: PPUSH
8729: CALL_OW 88
// wait ( 0 0$1 ) ;
8733: LD_INT 35
8735: PPUSH
8736: CALL_OW 67
// ShowArea ( 2 , hillArea ) ;
8740: LD_INT 2
8742: PPUSH
8743: LD_INT 10
8745: PPUSH
8746: CALL_OW 334
// CenterOnXY ( 144 , 65 ) ;
8750: LD_INT 144
8752: PPUSH
8753: LD_INT 65
8755: PPUSH
8756: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
8760: LD_EXP 22
8764: PPUSH
8765: LD_STRING DKs-scout-11
8767: PPUSH
8768: CALL_OW 88
// wait ( 0 0$1 ) ;
8772: LD_INT 35
8774: PPUSH
8775: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
8779: LD_EXP 22
8783: PPUSH
8784: CALL_OW 87
// if Mike and not Givi then
8788: LD_EXP 15
8792: PUSH
8793: LD_EXP 14
8797: NOT
8798: AND
8799: IFFALSE 8825
// begin Say ( Mike , DM-scout-a-1 ) ;
8801: LD_EXP 15
8805: PPUSH
8806: LD_STRING DM-scout-a-1
8808: PPUSH
8809: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
8813: LD_EXP 13
8817: PPUSH
8818: LD_STRING DH-scout-a-2
8820: PPUSH
8821: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
8825: LD_EXP 22
8829: PUSH
8830: LD_EXP 15
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: PPUSH
8839: LD_INT 2
8841: PPUSH
8842: CALL_OW 235
// InGameOff ;
8846: CALL_OW 9
// allowToPatrol := true ;
8850: LD_ADDR_EXP 11
8854: PUSH
8855: LD_INT 1
8857: ST_TO_ADDR
// end ;
8858: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
8859: LD_EXP 4
8863: PUSH
8864: LD_EXP 23
8868: PPUSH
8869: CALL_OW 302
8873: AND
8874: IFFALSE 8923
8876: GO 8878
8878: DISABLE
// begin DialogueOn ;
8879: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
8883: LD_EXP 23
8887: PPUSH
8888: LD_STRING DA-lab-1
8890: PPUSH
8891: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
8895: LD_EXP 23
8899: PPUSH
8900: LD_STRING DA-lab-2
8902: PPUSH
8903: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
8907: LD_EXP 13
8911: PPUSH
8912: LD_STRING DH-lab-3
8914: PPUSH
8915: CALL_OW 88
// DialogueOff ;
8919: CALL_OW 7
// end ;
8923: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
8924: LD_INT 17
8926: PPUSH
8927: LD_INT 2
8929: PPUSH
8930: CALL_OW 321
8934: PUSH
8935: LD_INT 2
8937: EQUAL
8938: IFFALSE 9070
8940: GO 8942
8942: DISABLE
8943: LD_INT 0
8945: PPUSH
// begin DialogueOn ;
8946: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
8950: LD_EXP 23
8954: PPUSH
8955: LD_STRING DA-Cam-1
8957: PPUSH
8958: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
8962: LD_EXP 23
8966: PPUSH
8967: LD_STRING DA-Cam-2
8969: PPUSH
8970: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
8974: LD_EXP 23
8978: PPUSH
8979: LD_STRING DA-Cam-3
8981: PPUSH
8982: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
8986: LD_EXP 13
8990: PPUSH
8991: LD_STRING DH-Cam-4
8993: PPUSH
8994: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
8998: LD_EXP 17
9002: PPUSH
9003: LD_STRING DK-Cam-5
9005: PPUSH
9006: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
9010: LD_EXP 17
9014: PPUSH
9015: LD_STRING DK-Cam-6
9017: PPUSH
9018: CALL_OW 88
// DialogueOff ;
9022: CALL_OW 7
// Query ( Camera ) ;
9026: LD_STRING Camera
9028: PPUSH
9029: CALL_OW 97
// hiddenCameraAllowed := true ;
9033: LD_ADDR_EXP 5
9037: PUSH
9038: LD_INT 1
9040: ST_TO_ADDR
// for i in camAreas do
9041: LD_ADDR_VAR 0 1
9045: PUSH
9046: LD_EXP 7
9050: PUSH
9051: FOR_IN
9052: IFFALSE 9068
// SetAreaMapShow ( i , 1 ) ;
9054: LD_VAR 0 1
9058: PPUSH
9059: LD_INT 1
9061: PPUSH
9062: CALL_OW 424
9066: GO 9051
9068: POP
9069: POP
// end ;
9070: PPOPN 1
9072: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
9073: LD_EXP 7
9077: NOT
9078: PUSH
9079: LD_EXP 5
9083: AND
9084: IFFALSE 9175
9086: GO 9088
9088: DISABLE
9089: LD_INT 0
9091: PPUSH
// begin stop_talking := true ;
9092: LD_ADDR_OWVAR 56
9096: PUSH
9097: LD_INT 1
9099: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
9100: LD_ADDR_VAR 0 1
9104: PUSH
9105: LD_INT 22
9107: PUSH
9108: LD_INT 2
9110: PUSH
9111: EMPTY
9112: LIST
9113: LIST
9114: PUSH
9115: LD_INT 21
9117: PUSH
9118: LD_INT 1
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: PUSH
9125: LD_INT 23
9127: PUSH
9128: LD_INT 2
9130: PUSH
9131: EMPTY
9132: LIST
9133: LIST
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: LIST
9139: PPUSH
9140: CALL_OW 69
9144: PUSH
9145: FOR_IN
9146: IFFALSE 9165
// AddExperience ( i , 2 , 450 ) ;
9148: LD_VAR 0 1
9152: PPUSH
9153: LD_INT 2
9155: PPUSH
9156: LD_INT 450
9158: PPUSH
9159: CALL_OW 492
9163: GO 9145
9165: POP
9166: POP
// stop_talking := false ;
9167: LD_ADDR_OWVAR 56
9171: PUSH
9172: LD_INT 0
9174: ST_TO_ADDR
// end ;
9175: PPOPN 1
9177: END
// every 0 0$2 trigger russianAlert and not allowHeikeAttack do
9178: LD_EXP 8
9182: PUSH
9183: LD_EXP 10
9187: NOT
9188: AND
9189: IFFALSE 9201
9191: GO 9193
9193: DISABLE
// YouLost ( Spotted ) ;
9194: LD_STRING Spotted
9196: PPUSH
9197: CALL_OW 104
9201: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
9202: LD_OWVAR 1
9206: PUSH
9207: LD_INT 13650
9209: PUSH
9210: LD_INT 0
9212: PPUSH
9213: LD_INT 3150
9215: PPUSH
9216: CALL_OW 12
9220: PLUS
9221: GREATEREQUAL
9222: IFFALSE 9231
9224: GO 9226
9226: DISABLE
// SmallAmericanReinforcements ;
9227: CALL 5782 0 0
9231: END
// every 0 0$1 trigger tick >= 9 9$15 do
9232: LD_OWVAR 1
9236: PUSH
9237: LD_INT 19425
9239: GREATEREQUAL
9240: IFFALSE 9305
9242: GO 9244
9244: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
9245: LD_EXP 34
9249: PPUSH
9250: LD_INT 21
9252: PUSH
9253: LD_INT 2
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: PPUSH
9260: CALL_OW 72
9264: PPUSH
9265: LD_INT 62
9267: PPUSH
9268: LD_INT 22
9270: PPUSH
9271: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
9275: LD_EXP 35
9279: PPUSH
9280: LD_INT 69
9282: PPUSH
9283: LD_INT 27
9285: PPUSH
9286: CALL_OW 111
// wait ( 1 1$00 ) ;
9290: LD_INT 2100
9292: PPUSH
9293: CALL_OW 67
// startAttackOnOmicron := true ;
9297: LD_ADDR_EXP 6
9301: PUSH
9302: LD_INT 1
9304: ST_TO_ADDR
// end ;
9305: END
// every 0 0$2 trigger tick >= 20 20$00 do
9306: LD_OWVAR 1
9310: PUSH
9311: LD_INT 42000
9313: GREATEREQUAL
9314: IFFALSE 9340
9316: GO 9318
9318: DISABLE
// begin PrepareOmarForces ;
9319: CALL 2199 0 0
// CenterOnUnits ( Omar ) ;
9323: LD_EXP 20
9327: PPUSH
9328: CALL_OW 85
// allowHeikeAttack := true ;
9332: LD_ADDR_EXP 10
9336: PUSH
9337: LD_INT 1
9339: ST_TO_ADDR
// end ; end_of_file
9340: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
9341: LD_VAR 0 1
9345: PPUSH
9346: CALL_OW 266
9350: PUSH
9351: LD_INT 0
9353: EQUAL
9354: PUSH
9355: LD_VAR 0 1
9359: PPUSH
9360: CALL_OW 255
9364: PUSH
9365: LD_INT 2
9367: EQUAL
9368: AND
9369: IFFALSE 9379
// baseConstructed := true ;
9371: LD_ADDR_EXP 3
9375: PUSH
9376: LD_INT 1
9378: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
9379: LD_VAR 0 1
9383: PPUSH
9384: CALL_OW 266
9388: PUSH
9389: LD_INT 6
9391: EQUAL
9392: PUSH
9393: LD_VAR 0 1
9397: PPUSH
9398: CALL_OW 255
9402: PUSH
9403: LD_INT 2
9405: EQUAL
9406: AND
9407: IFFALSE 9417
// labConstructed := true ;
9409: LD_ADDR_EXP 4
9413: PUSH
9414: LD_INT 1
9416: ST_TO_ADDR
// end ;
9417: PPOPN 1
9419: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9420: LD_VAR 0 1
9424: PUSH
9425: LD_EXP 13
9429: EQUAL
9430: IFFALSE 9439
// YouLost ( Heike ) ;
9432: LD_STRING Heike
9434: PPUSH
9435: CALL_OW 104
// if un = omikron then
9439: LD_VAR 0 1
9443: PUSH
9444: LD_INT 64
9446: EQUAL
9447: IFFALSE 9457
// omicronFall := true ;
9449: LD_ADDR_EXP 12
9453: PUSH
9454: LD_INT 1
9456: ST_TO_ADDR
// if un in russianPatrol then
9457: LD_VAR 0 1
9461: PUSH
9462: LD_EXP 33
9466: IN
9467: IFFALSE 9485
// russianPatrol := russianPatrol diff un ;
9469: LD_ADDR_EXP 33
9473: PUSH
9474: LD_EXP 33
9478: PUSH
9479: LD_VAR 0 1
9483: DIFF
9484: ST_TO_ADDR
// end ;
9485: PPOPN 1
9487: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
9488: LD_INT 0
9490: PPUSH
9491: PPUSH
9492: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
9493: LD_VAR 0 1
9497: PUSH
9498: LD_INT 2
9500: PUSH
9501: LD_INT 22
9503: PUSH
9504: LD_INT 3
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PUSH
9511: LD_INT 22
9513: PUSH
9514: LD_INT 4
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 22
9523: PUSH
9524: LD_INT 6
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: PUSH
9537: LD_INT 30
9539: PUSH
9540: LD_INT 32
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: PPUSH
9551: CALL_OW 69
9555: IN
9556: IFFALSE 9729
// begin sol := UnitsInside ( un ) ;
9558: LD_ADDR_VAR 0 3
9562: PUSH
9563: LD_VAR 0 1
9567: PPUSH
9568: CALL_OW 313
9572: ST_TO_ADDR
// if not sol then
9573: LD_VAR 0 3
9577: NOT
9578: IFFALSE 9582
// exit ;
9580: GO 9729
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
9582: LD_ADDR_VAR 0 4
9586: PUSH
9587: LD_INT 22
9589: PUSH
9590: LD_VAR 0 1
9594: PPUSH
9595: CALL_OW 255
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: PUSH
9604: LD_INT 2
9606: PUSH
9607: LD_INT 30
9609: PUSH
9610: LD_INT 4
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: PUSH
9617: LD_INT 30
9619: PUSH
9620: LD_INT 5
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: PUSH
9627: EMPTY
9628: LIST
9629: LIST
9630: LIST
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: PPUSH
9636: CALL_OW 69
9640: ST_TO_ADDR
// if not nearestBarracks then
9641: LD_VAR 0 4
9645: NOT
9646: IFFALSE 9650
// exit ;
9648: GO 9729
// for i in nearestBarracks do
9650: LD_ADDR_VAR 0 2
9654: PUSH
9655: LD_VAR 0 4
9659: PUSH
9660: FOR_IN
9661: IFFALSE 9696
// if UnitsInside ( i ) = 6 then
9663: LD_VAR 0 2
9667: PPUSH
9668: CALL_OW 313
9672: PUSH
9673: LD_INT 6
9675: EQUAL
9676: IFFALSE 9694
// nearestBarracks := nearestBarracks diff i ;
9678: LD_ADDR_VAR 0 4
9682: PUSH
9683: LD_VAR 0 4
9687: PUSH
9688: LD_VAR 0 2
9692: DIFF
9693: ST_TO_ADDR
9694: GO 9660
9696: POP
9697: POP
// if not nearestBarracks then
9698: LD_VAR 0 4
9702: NOT
9703: IFFALSE 9707
// exit ;
9705: GO 9729
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
9707: LD_VAR 0 3
9711: PUSH
9712: LD_INT 1
9714: ARRAY
9715: PPUSH
9716: LD_VAR 0 4
9720: PUSH
9721: LD_INT 1
9723: ARRAY
9724: PPUSH
9725: CALL_OW 120
// end ; end ;
9729: PPOPN 4
9731: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
9732: LD_INT 0
9734: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
9735: LD_EXP 7
9739: NOT
9740: PUSH
9741: LD_EXP 5
9745: NOT
9746: OR
9747: IFFALSE 9751
// exit ;
9749: GO 9819
// for i in camAreas do
9751: LD_ADDR_VAR 0 5
9755: PUSH
9756: LD_EXP 7
9760: PUSH
9761: FOR_IN
9762: IFFALSE 9817
// if InArea ( x , y , i ) then
9764: LD_VAR 0 3
9768: PPUSH
9769: LD_VAR 0 4
9773: PPUSH
9774: LD_VAR 0 5
9778: PPUSH
9779: CALL_OW 309
9783: IFFALSE 9815
// begin SetAreaMapShow ( i , 0 ) ;
9785: LD_VAR 0 5
9789: PPUSH
9790: LD_INT 0
9792: PPUSH
9793: CALL_OW 424
// camAreas := camAreas diff i ;
9797: LD_ADDR_EXP 7
9801: PUSH
9802: LD_EXP 7
9806: PUSH
9807: LD_VAR 0 5
9811: DIFF
9812: ST_TO_ADDR
// break ;
9813: GO 9817
// end ;
9815: GO 9761
9817: POP
9818: POP
// end ; end_of_file
9819: PPOPN 5
9821: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 200 , 160 , 120 ] [ Difficulty ] do
9822: LD_EXP 10
9826: NOT
9827: PUSH
9828: LD_INT 12
9830: PPUSH
9831: LD_INT 1
9833: PPUSH
9834: CALL_OW 287
9838: PUSH
9839: LD_INT 200
9841: PUSH
9842: LD_INT 160
9844: PUSH
9845: LD_INT 120
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: LIST
9852: PUSH
9853: LD_OWVAR 67
9857: ARRAY
9858: LESS
9859: AND
9860: IFFALSE 9887
9862: GO 9864
9864: DISABLE
// begin enable ;
9865: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
9866: LD_INT 1
9868: PPUSH
9869: LD_INT 5
9871: PPUSH
9872: CALL_OW 12
9876: PPUSH
9877: LD_INT 12
9879: PPUSH
9880: LD_INT 1
9882: PPUSH
9883: CALL_OW 55
// end ;
9887: END
