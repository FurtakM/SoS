// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 42 0 0
// PrepareNature ;
   8: CALL 1727 0 0
// PrepareArabian ;
  12: CALL 1916 0 0
// PrepareAmerican ;
  16: CALL 6440 0 0
// PrepareRussian ;
  20: CALL 2837 0 0
// Action ;
  24: CALL 8000 0 0
// if debug then
  28: LD_EXP 1
  32: IFFALSE 41
// FogOff ( 2 ) ;
  34: LD_INT 2
  36: PPUSH
  37: CALL_OW 344
// end ;
  41: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured ; function Init ; begin
  42: LD_INT 0
  44: PPUSH
// debug := false ;
  45: LD_ADDR_EXP 1
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// prefix := 03_ ;
  53: LD_ADDR_EXP 2
  57: PUSH
  58: LD_STRING 03_
  60: ST_TO_ADDR
// baseConstructed := false ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// labConstructed := false ;
  69: LD_ADDR_EXP 4
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  77: LD_ADDR_EXP 5
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// russianAlert := false ;
  85: LD_ADDR_EXP 9
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// activeGrishkoAI := true ;
  93: LD_ADDR_EXP 10
  97: PUSH
  98: LD_INT 1
 100: ST_TO_ADDR
// allowHeikeAttack := false ;
 101: LD_ADDR_EXP 11
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// allowToPatrol := false ;
 109: LD_ADDR_EXP 12
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// omicronFall := false ;
 117: LD_ADDR_EXP 13
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// startAttackOnOmicron := false ;
 125: LD_ADDR_EXP 6
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// kirovDestroyed := false ;
 133: LD_ADDR_EXP 15
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// beriaDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// kaganDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// retreatFromOmicron := false ;
 157: LD_ADDR_EXP 19
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// spottedByPatrol := false ;
 165: LD_ADDR_EXP 7
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// escapeCounter := 0 ;
 173: LD_ADDR_EXP 18
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// loseCounter := 0 ;
 181: LD_ADDR_EXP 14
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// labCaptured := false ;
 189: LD_ADDR_EXP 20
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 197: LD_ADDR_EXP 8
 201: PUSH
 202: LD_INT 3
 204: PUSH
 205: LD_INT 4
 207: PUSH
 208: LD_INT 5
 210: PUSH
 211: LD_INT 6
 213: PUSH
 214: LD_INT 7
 216: PUSH
 217: LD_INT 8
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: ST_TO_ADDR
// end ; end_of_file
 228: LD_VAR 0 1
 232: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 233: LD_INT 0
 235: PPUSH
 236: PPUSH
// if exist_mode then
 237: LD_VAR 0 2
 241: IFFALSE 266
// unit := CreateCharacter ( prefix & ident ) else
 243: LD_ADDR_VAR 0 5
 247: PUSH
 248: LD_VAR 0 3
 252: PUSH
 253: LD_VAR 0 1
 257: STR
 258: PPUSH
 259: CALL_OW 34
 263: ST_TO_ADDR
 264: GO 281
// unit := NewCharacter ( ident ) ;
 266: LD_ADDR_VAR 0 5
 270: PUSH
 271: LD_VAR 0 1
 275: PPUSH
 276: CALL_OW 25
 280: ST_TO_ADDR
// result := unit ;
 281: LD_ADDR_VAR 0 4
 285: PUSH
 286: LD_VAR 0 5
 290: ST_TO_ADDR
// end ;
 291: LD_VAR 0 4
 295: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 296: LD_INT 0
 298: PPUSH
// uc_side := side ;
 299: LD_ADDR_OWVAR 20
 303: PUSH
 304: LD_VAR 0 1
 308: ST_TO_ADDR
// uc_nation := nation ;
 309: LD_ADDR_OWVAR 21
 313: PUSH
 314: LD_VAR 0 2
 318: ST_TO_ADDR
// vc_chassis := chassis ;
 319: LD_ADDR_OWVAR 37
 323: PUSH
 324: LD_VAR 0 3
 328: ST_TO_ADDR
// vc_engine := engine ;
 329: LD_ADDR_OWVAR 39
 333: PUSH
 334: LD_VAR 0 4
 338: ST_TO_ADDR
// vc_control := control ;
 339: LD_ADDR_OWVAR 38
 343: PUSH
 344: LD_VAR 0 5
 348: ST_TO_ADDR
// vc_weapon := weapon ;
 349: LD_ADDR_OWVAR 40
 353: PUSH
 354: LD_VAR 0 6
 358: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 359: LD_ADDR_OWVAR 41
 363: PUSH
 364: LD_VAR 0 7
 368: ST_TO_ADDR
// result := CreateVehicle ;
 369: LD_ADDR_VAR 0 8
 373: PUSH
 374: CALL_OW 45
 378: ST_TO_ADDR
// end ;
 379: LD_VAR 0 8
 383: RET
// export function SayX ( units , ident ) ; var i ; begin
 384: LD_INT 0
 386: PPUSH
 387: PPUSH
// result := false ;
 388: LD_ADDR_VAR 0 3
 392: PUSH
 393: LD_INT 0
 395: ST_TO_ADDR
// if not units then
 396: LD_VAR 0 1
 400: NOT
 401: IFFALSE 405
// exit ;
 403: GO 459
// for i in units do
 405: LD_ADDR_VAR 0 4
 409: PUSH
 410: LD_VAR 0 1
 414: PUSH
 415: FOR_IN
 416: IFFALSE 457
// if IsOk ( i ) then
 418: LD_VAR 0 4
 422: PPUSH
 423: CALL_OW 302
 427: IFFALSE 455
// begin Say ( i , ident ) ;
 429: LD_VAR 0 4
 433: PPUSH
 434: LD_VAR 0 2
 438: PPUSH
 439: CALL_OW 88
// result := i ;
 443: LD_ADDR_VAR 0 3
 447: PUSH
 448: LD_VAR 0 4
 452: ST_TO_ADDR
// break ;
 453: GO 457
// end ;
 455: GO 415
 457: POP
 458: POP
// end ;
 459: LD_VAR 0 3
 463: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 464: LD_INT 0
 466: PPUSH
 467: PPUSH
 468: PPUSH
// if not observer or not unit then
 469: LD_VAR 0 1
 473: NOT
 474: PUSH
 475: LD_VAR 0 2
 479: NOT
 480: OR
 481: IFFALSE 485
// exit ;
 483: GO 533
// if not See ( GetSide ( observer ) , unit ) then
 485: LD_VAR 0 1
 489: PPUSH
 490: CALL_OW 255
 494: PPUSH
 495: LD_VAR 0 2
 499: PPUSH
 500: CALL_OW 292
 504: NOT
 505: IFFALSE 509
// exit ;
 507: GO 533
// result := GetDistUnits ( observer , unit ) < 12 ;
 509: LD_ADDR_VAR 0 3
 513: PUSH
 514: LD_VAR 0 1
 518: PPUSH
 519: LD_VAR 0 2
 523: PPUSH
 524: CALL_OW 296
 528: PUSH
 529: LD_INT 12
 531: LESS
 532: ST_TO_ADDR
// end ;
 533: LD_VAR 0 3
 537: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 538: LD_INT 0
 540: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 541: LD_VAR 0 2
 545: PUSH
 546: LD_INT 1
 548: ARRAY
 549: PPUSH
 550: LD_VAR 0 2
 554: PUSH
 555: LD_INT 2
 557: ARRAY
 558: PPUSH
 559: CALL_OW 488
 563: PUSH
 564: LD_VAR 0 2
 568: PUSH
 569: LD_INT 1
 571: ARRAY
 572: PPUSH
 573: LD_VAR 0 2
 577: PUSH
 578: LD_INT 2
 580: ARRAY
 581: PPUSH
 582: CALL_OW 428
 586: PUSH
 587: LD_INT 0
 589: EQUAL
 590: AND
 591: IFFALSE 625
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 593: LD_VAR 0 1
 597: PPUSH
 598: LD_VAR 0 2
 602: PUSH
 603: LD_INT 1
 605: ARRAY
 606: PPUSH
 607: LD_VAR 0 2
 611: PUSH
 612: LD_INT 2
 614: ARRAY
 615: PPUSH
 616: LD_VAR 0 3
 620: PPUSH
 621: CALL_OW 48
// end ;
 625: LD_VAR 0 4
 629: RET
// export function Video ( mode ) ; begin
 630: LD_INT 0
 632: PPUSH
// ingame_video = mode ;
 633: LD_ADDR_OWVAR 52
 637: PUSH
 638: LD_VAR 0 1
 642: ST_TO_ADDR
// interface_hidden = mode ;
 643: LD_ADDR_OWVAR 54
 647: PUSH
 648: LD_VAR 0 1
 652: ST_TO_ADDR
// end ;
 653: LD_VAR 0 2
 657: RET
// export function ReverseArray ( array ) ; var i ; begin
 658: LD_INT 0
 660: PPUSH
 661: PPUSH
// if not array then
 662: LD_VAR 0 1
 666: NOT
 667: IFFALSE 671
// exit ;
 669: GO 729
// result := [ ] ;
 671: LD_ADDR_VAR 0 2
 675: PUSH
 676: EMPTY
 677: ST_TO_ADDR
// for i := 1 to array do
 678: LD_ADDR_VAR 0 3
 682: PUSH
 683: DOUBLE
 684: LD_INT 1
 686: DEC
 687: ST_TO_ADDR
 688: LD_VAR 0 1
 692: PUSH
 693: FOR_TO
 694: IFFALSE 727
// result := Insert ( result , 1 , array [ i ] ) ;
 696: LD_ADDR_VAR 0 2
 700: PUSH
 701: LD_VAR 0 2
 705: PPUSH
 706: LD_INT 1
 708: PPUSH
 709: LD_VAR 0 1
 713: PUSH
 714: LD_VAR 0 3
 718: ARRAY
 719: PPUSH
 720: CALL_OW 2
 724: ST_TO_ADDR
 725: GO 693
 727: POP
 728: POP
// end ;
 729: LD_VAR 0 2
 733: RET
// export function ComExit ( unit ) ; begin
 734: LD_INT 0
 736: PPUSH
// result := IsInUnit ( unit ) ;
 737: LD_ADDR_VAR 0 2
 741: PUSH
 742: LD_VAR 0 1
 746: PPUSH
 747: CALL_OW 310
 751: ST_TO_ADDR
// if not result then
 752: LD_VAR 0 2
 756: NOT
 757: IFFALSE 761
// exit ;
 759: GO 796
// if GetType ( result ) = unit_vehicle then
 761: LD_VAR 0 2
 765: PPUSH
 766: CALL_OW 247
 770: PUSH
 771: LD_INT 2
 773: EQUAL
 774: IFFALSE 787
// ComExitVehicle ( unit ) else
 776: LD_VAR 0 1
 780: PPUSH
 781: CALL_OW 121
 785: GO 796
// ComExitBuilding ( unit ) ;
 787: LD_VAR 0 1
 791: PPUSH
 792: CALL_OW 122
// end ;
 796: LD_VAR 0 2
 800: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 801: LD_INT 0
 803: PPUSH
 804: PPUSH
// if not side or not nation then
 805: LD_VAR 0 1
 809: NOT
 810: PUSH
 811: LD_VAR 0 2
 815: NOT
 816: OR
 817: IFFALSE 821
// exit ;
 819: GO 1585
// case nation of nation_american :
 821: LD_VAR 0 2
 825: PUSH
 826: LD_INT 1
 828: DOUBLE
 829: EQUAL
 830: IFTRUE 834
 832: GO 1048
 834: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 835: LD_ADDR_VAR 0 4
 839: PUSH
 840: LD_INT 35
 842: PUSH
 843: LD_INT 45
 845: PUSH
 846: LD_INT 46
 848: PUSH
 849: LD_INT 47
 851: PUSH
 852: LD_INT 82
 854: PUSH
 855: LD_INT 83
 857: PUSH
 858: LD_INT 84
 860: PUSH
 861: LD_INT 85
 863: PUSH
 864: LD_INT 86
 866: PUSH
 867: LD_INT 1
 869: PUSH
 870: LD_INT 2
 872: PUSH
 873: LD_INT 6
 875: PUSH
 876: LD_INT 15
 878: PUSH
 879: LD_INT 16
 881: PUSH
 882: LD_INT 7
 884: PUSH
 885: LD_INT 12
 887: PUSH
 888: LD_INT 13
 890: PUSH
 891: LD_INT 10
 893: PUSH
 894: LD_INT 14
 896: PUSH
 897: LD_INT 20
 899: PUSH
 900: LD_INT 21
 902: PUSH
 903: LD_INT 22
 905: PUSH
 906: LD_INT 25
 908: PUSH
 909: LD_INT 32
 911: PUSH
 912: LD_INT 27
 914: PUSH
 915: LD_INT 36
 917: PUSH
 918: LD_INT 69
 920: PUSH
 921: LD_INT 39
 923: PUSH
 924: LD_INT 34
 926: PUSH
 927: LD_INT 40
 929: PUSH
 930: LD_INT 48
 932: PUSH
 933: LD_INT 49
 935: PUSH
 936: LD_INT 50
 938: PUSH
 939: LD_INT 51
 941: PUSH
 942: LD_INT 52
 944: PUSH
 945: LD_INT 53
 947: PUSH
 948: LD_INT 54
 950: PUSH
 951: LD_INT 55
 953: PUSH
 954: LD_INT 56
 956: PUSH
 957: LD_INT 57
 959: PUSH
 960: LD_INT 58
 962: PUSH
 963: LD_INT 59
 965: PUSH
 966: LD_INT 60
 968: PUSH
 969: LD_INT 61
 971: PUSH
 972: LD_INT 62
 974: PUSH
 975: LD_INT 80
 977: PUSH
 978: LD_INT 82
 980: PUSH
 981: LD_INT 83
 983: PUSH
 984: LD_INT 84
 986: PUSH
 987: LD_INT 85
 989: PUSH
 990: LD_INT 86
 992: PUSH
 993: EMPTY
 994: LIST
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: LIST
1000: LIST
1001: LIST
1002: LIST
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: ST_TO_ADDR
1046: GO 1509
1048: LD_INT 2
1050: DOUBLE
1051: EQUAL
1052: IFTRUE 1056
1054: GO 1278
1056: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1057: LD_ADDR_VAR 0 4
1061: PUSH
1062: LD_INT 35
1064: PUSH
1065: LD_INT 45
1067: PUSH
1068: LD_INT 46
1070: PUSH
1071: LD_INT 47
1073: PUSH
1074: LD_INT 82
1076: PUSH
1077: LD_INT 83
1079: PUSH
1080: LD_INT 84
1082: PUSH
1083: LD_INT 85
1085: PUSH
1086: LD_INT 87
1088: PUSH
1089: LD_INT 70
1091: PUSH
1092: LD_INT 1
1094: PUSH
1095: LD_INT 11
1097: PUSH
1098: LD_INT 3
1100: PUSH
1101: LD_INT 4
1103: PUSH
1104: LD_INT 5
1106: PUSH
1107: LD_INT 6
1109: PUSH
1110: LD_INT 15
1112: PUSH
1113: LD_INT 18
1115: PUSH
1116: LD_INT 7
1118: PUSH
1119: LD_INT 17
1121: PUSH
1122: LD_INT 8
1124: PUSH
1125: LD_INT 20
1127: PUSH
1128: LD_INT 21
1130: PUSH
1131: LD_INT 22
1133: PUSH
1134: LD_INT 72
1136: PUSH
1137: LD_INT 26
1139: PUSH
1140: LD_INT 69
1142: PUSH
1143: LD_INT 39
1145: PUSH
1146: LD_INT 40
1148: PUSH
1149: LD_INT 41
1151: PUSH
1152: LD_INT 42
1154: PUSH
1155: LD_INT 43
1157: PUSH
1158: LD_INT 48
1160: PUSH
1161: LD_INT 49
1163: PUSH
1164: LD_INT 50
1166: PUSH
1167: LD_INT 51
1169: PUSH
1170: LD_INT 52
1172: PUSH
1173: LD_INT 53
1175: PUSH
1176: LD_INT 54
1178: PUSH
1179: LD_INT 55
1181: PUSH
1182: LD_INT 56
1184: PUSH
1185: LD_INT 60
1187: PUSH
1188: LD_INT 61
1190: PUSH
1191: LD_INT 62
1193: PUSH
1194: LD_INT 66
1196: PUSH
1197: LD_INT 67
1199: PUSH
1200: LD_INT 68
1202: PUSH
1203: LD_INT 81
1205: PUSH
1206: LD_INT 82
1208: PUSH
1209: LD_INT 83
1211: PUSH
1212: LD_INT 84
1214: PUSH
1215: LD_INT 85
1217: PUSH
1218: LD_INT 87
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: LIST
1232: LIST
1233: LIST
1234: LIST
1235: LIST
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: LIST
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: LIST
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: ST_TO_ADDR
1276: GO 1509
1278: LD_INT 3
1280: DOUBLE
1281: EQUAL
1282: IFTRUE 1286
1284: GO 1508
1286: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1287: LD_ADDR_VAR 0 4
1291: PUSH
1292: LD_INT 46
1294: PUSH
1295: LD_INT 47
1297: PUSH
1298: LD_INT 1
1300: PUSH
1301: LD_INT 2
1303: PUSH
1304: LD_INT 82
1306: PUSH
1307: LD_INT 83
1309: PUSH
1310: LD_INT 84
1312: PUSH
1313: LD_INT 85
1315: PUSH
1316: LD_INT 86
1318: PUSH
1319: LD_INT 11
1321: PUSH
1322: LD_INT 9
1324: PUSH
1325: LD_INT 20
1327: PUSH
1328: LD_INT 19
1330: PUSH
1331: LD_INT 21
1333: PUSH
1334: LD_INT 24
1336: PUSH
1337: LD_INT 22
1339: PUSH
1340: LD_INT 25
1342: PUSH
1343: LD_INT 28
1345: PUSH
1346: LD_INT 29
1348: PUSH
1349: LD_INT 30
1351: PUSH
1352: LD_INT 31
1354: PUSH
1355: LD_INT 37
1357: PUSH
1358: LD_INT 38
1360: PUSH
1361: LD_INT 32
1363: PUSH
1364: LD_INT 27
1366: PUSH
1367: LD_INT 33
1369: PUSH
1370: LD_INT 69
1372: PUSH
1373: LD_INT 39
1375: PUSH
1376: LD_INT 34
1378: PUSH
1379: LD_INT 40
1381: PUSH
1382: LD_INT 71
1384: PUSH
1385: LD_INT 23
1387: PUSH
1388: LD_INT 44
1390: PUSH
1391: LD_INT 48
1393: PUSH
1394: LD_INT 49
1396: PUSH
1397: LD_INT 50
1399: PUSH
1400: LD_INT 51
1402: PUSH
1403: LD_INT 52
1405: PUSH
1406: LD_INT 53
1408: PUSH
1409: LD_INT 54
1411: PUSH
1412: LD_INT 55
1414: PUSH
1415: LD_INT 56
1417: PUSH
1418: LD_INT 57
1420: PUSH
1421: LD_INT 58
1423: PUSH
1424: LD_INT 59
1426: PUSH
1427: LD_INT 63
1429: PUSH
1430: LD_INT 64
1432: PUSH
1433: LD_INT 65
1435: PUSH
1436: LD_INT 82
1438: PUSH
1439: LD_INT 83
1441: PUSH
1442: LD_INT 84
1444: PUSH
1445: LD_INT 85
1447: PUSH
1448: LD_INT 86
1450: PUSH
1451: EMPTY
1452: LIST
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: LIST
1460: LIST
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: LIST
1477: LIST
1478: LIST
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: ST_TO_ADDR
1506: GO 1509
1508: POP
// if state > - 1 and state < 3 then
1509: LD_VAR 0 3
1513: PUSH
1514: LD_INT 1
1516: NEG
1517: GREATER
1518: PUSH
1519: LD_VAR 0 3
1523: PUSH
1524: LD_INT 3
1526: LESS
1527: AND
1528: IFFALSE 1585
// for i in result do
1530: LD_ADDR_VAR 0 5
1534: PUSH
1535: LD_VAR 0 4
1539: PUSH
1540: FOR_IN
1541: IFFALSE 1583
// if GetTech ( i , side ) <> state then
1543: LD_VAR 0 5
1547: PPUSH
1548: LD_VAR 0 1
1552: PPUSH
1553: CALL_OW 321
1557: PUSH
1558: LD_VAR 0 3
1562: NONEQUAL
1563: IFFALSE 1581
// result := result diff i ;
1565: LD_ADDR_VAR 0 4
1569: PUSH
1570: LD_VAR 0 4
1574: PUSH
1575: LD_VAR 0 5
1579: DIFF
1580: ST_TO_ADDR
1581: GO 1540
1583: POP
1584: POP
// end ;
1585: LD_VAR 0 4
1589: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
1590: LD_INT 0
1592: PPUSH
1593: PPUSH
// InitUc ;
1594: CALL_OW 18
// InitHc ;
1598: CALL_OW 19
// uc_side := 0 ;
1602: LD_ADDR_OWVAR 20
1606: PUSH
1607: LD_INT 0
1609: ST_TO_ADDR
// uc_nation := 0 ;
1610: LD_ADDR_OWVAR 21
1614: PUSH
1615: LD_INT 0
1617: ST_TO_ADDR
// for i = 1 to amount do
1618: LD_ADDR_VAR 0 4
1622: PUSH
1623: DOUBLE
1624: LD_INT 1
1626: DEC
1627: ST_TO_ADDR
1628: LD_VAR 0 2
1632: PUSH
1633: FOR_TO
1634: IFFALSE 1716
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
1636: LD_ADDR_OWVAR 29
1640: PUSH
1641: LD_INT 9
1643: PPUSH
1644: LD_INT 12
1646: PPUSH
1647: CALL_OW 12
1651: PUSH
1652: LD_INT 9
1654: PPUSH
1655: LD_INT 12
1657: PPUSH
1658: CALL_OW 12
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
1667: LD_ADDR_OWVAR 35
1671: PUSH
1672: LD_INT 1
1674: NEG
1675: PPUSH
1676: LD_INT 1
1678: PPUSH
1679: CALL_OW 12
1683: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
1684: LD_INT 0
1686: PPUSH
1687: LD_INT 12
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
1697: CALL_OW 44
1701: PPUSH
1702: LD_VAR 0 1
1706: PPUSH
1707: LD_INT 0
1709: PPUSH
1710: CALL_OW 49
// end ;
1714: GO 1633
1716: POP
1717: POP
// InitHc ;
1718: CALL_OW 19
// end ;
1722: LD_VAR 0 3
1726: RET
// export function PrepareNature ; var i ; begin
1727: LD_INT 0
1729: PPUSH
1730: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
1731: LD_INT 18
1733: PPUSH
1734: LD_INT 5
1736: PUSH
1737: LD_INT 4
1739: PUSH
1740: LD_INT 3
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: LIST
1747: PUSH
1748: LD_OWVAR 67
1752: ARRAY
1753: PPUSH
1754: CALL 1590 0 2
// for i := 1 to 3 do
1758: LD_ADDR_VAR 0 2
1762: PUSH
1763: DOUBLE
1764: LD_INT 1
1766: DEC
1767: ST_TO_ADDR
1768: LD_INT 3
1770: PUSH
1771: FOR_TO
1772: IFFALSE 1807
// begin hc_class := 21 ;
1774: LD_ADDR_OWVAR 28
1778: PUSH
1779: LD_INT 21
1781: ST_TO_ADDR
// hc_gallery :=  ;
1782: LD_ADDR_OWVAR 33
1786: PUSH
1787: LD_STRING 
1789: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1790: CALL_OW 44
1794: PPUSH
1795: LD_INT 18
1797: PPUSH
1798: LD_INT 0
1800: PPUSH
1801: CALL_OW 49
// end ;
1805: GO 1771
1807: POP
1808: POP
// for i := 1 to 2 do
1809: LD_ADDR_VAR 0 2
1813: PUSH
1814: DOUBLE
1815: LD_INT 1
1817: DEC
1818: ST_TO_ADDR
1819: LD_INT 2
1821: PUSH
1822: FOR_TO
1823: IFFALSE 1858
// begin hc_class := 18 ;
1825: LD_ADDR_OWVAR 28
1829: PUSH
1830: LD_INT 18
1832: ST_TO_ADDR
// hc_gallery :=  ;
1833: LD_ADDR_OWVAR 33
1837: PUSH
1838: LD_STRING 
1840: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1841: CALL_OW 44
1845: PPUSH
1846: LD_INT 18
1848: PPUSH
1849: LD_INT 0
1851: PPUSH
1852: CALL_OW 49
// end ;
1856: GO 1822
1858: POP
1859: POP
// for i := 1 to 2 do
1860: LD_ADDR_VAR 0 2
1864: PUSH
1865: DOUBLE
1866: LD_INT 1
1868: DEC
1869: ST_TO_ADDR
1870: LD_INT 2
1872: PUSH
1873: FOR_TO
1874: IFFALSE 1909
// begin hc_class := 13 ;
1876: LD_ADDR_OWVAR 28
1880: PUSH
1881: LD_INT 13
1883: ST_TO_ADDR
// hc_gallery :=  ;
1884: LD_ADDR_OWVAR 33
1888: PUSH
1889: LD_STRING 
1891: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1892: CALL_OW 44
1896: PPUSH
1897: LD_INT 18
1899: PPUSH
1900: LD_INT 0
1902: PPUSH
1903: CALL_OW 49
// end ;
1907: GO 1873
1909: POP
1910: POP
// end ; end_of_file
1911: LD_VAR 0 1
1915: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1916: LD_INT 0
1918: PPUSH
1919: PPUSH
// uc_side := 2 ;
1920: LD_ADDR_OWVAR 20
1924: PUSH
1925: LD_INT 2
1927: ST_TO_ADDR
// uc_nation := 2 ;
1928: LD_ADDR_OWVAR 21
1932: PUSH
1933: LD_INT 2
1935: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1936: LD_ADDR_EXP 21
1940: PUSH
1941: LD_STRING Heike
1943: PPUSH
1944: LD_EXP 1
1948: NOT
1949: PPUSH
1950: LD_EXP 2
1954: PPUSH
1955: CALL 233 0 3
1959: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1960: LD_ADDR_EXP 24
1964: PUSH
1965: LD_STRING Ibrahim
1967: PPUSH
1968: LD_EXP 1
1972: NOT
1973: PPUSH
1974: LD_EXP 2
1978: PPUSH
1979: CALL 233 0 3
1983: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1984: LD_ADDR_EXP 22
1988: PUSH
1989: LD_STRING Givi
1991: PPUSH
1992: LD_EXP 1
1996: NOT
1997: PPUSH
1998: LD_EXP 2
2002: PPUSH
2003: CALL 233 0 3
2007: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
2008: LD_ADDR_EXP 25
2012: PUSH
2013: LD_STRING Kamil
2015: PPUSH
2016: LD_EXP 1
2020: NOT
2021: PPUSH
2022: LD_EXP 2
2026: PPUSH
2027: CALL 233 0 3
2031: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
2032: LD_ADDR_EXP 26
2036: PUSH
2037: LD_STRING Kaia
2039: PPUSH
2040: LD_EXP 1
2044: NOT
2045: PPUSH
2046: LD_EXP 2
2050: PPUSH
2051: CALL 233 0 3
2055: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
2056: LD_ADDR_EXP 27
2060: PUSH
2061: LD_STRING Sophia
2063: PPUSH
2064: LD_EXP 1
2068: NOT
2069: PPUSH
2070: LD_EXP 2
2074: PPUSH
2075: CALL 233 0 3
2079: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2080: LD_ADDR_EXP 28
2084: PUSH
2085: LD_STRING Markov
2087: PPUSH
2088: LD_EXP 1
2092: NOT
2093: PPUSH
2094: LD_EXP 2
2098: PPUSH
2099: CALL 233 0 3
2103: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2104: LD_ADDR_EXP 31
2108: PUSH
2109: LD_STRING Aviradze
2111: PPUSH
2112: LD_EXP 1
2116: NOT
2117: PPUSH
2118: LD_EXP 2
2122: PPUSH
2123: CALL 233 0 3
2127: ST_TO_ADDR
// aviradzeSquad := [ ] ;
2128: LD_ADDR_EXP 34
2132: PUSH
2133: EMPTY
2134: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
2135: LD_ADDR_EXP 32
2139: PUSH
2140: LD_STRING 03_others
2142: PPUSH
2143: CALL_OW 31
2147: ST_TO_ADDR
// uc_side := 5 ;
2148: LD_ADDR_OWVAR 20
2152: PUSH
2153: LD_INT 5
2155: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
2156: LD_ADDR_EXP 30
2160: PUSH
2161: LD_STRING Kurt
2163: PPUSH
2164: LD_INT 0
2166: PPUSH
2167: LD_STRING 
2169: PPUSH
2170: CALL 233 0 3
2174: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2175: LD_ADDR_EXP 23
2179: PUSH
2180: LD_STRING Mike
2182: PPUSH
2183: LD_EXP 1
2187: NOT
2188: PPUSH
2189: LD_EXP 2
2193: PPUSH
2194: CALL 233 0 3
2198: ST_TO_ADDR
// if Mike then
2199: LD_EXP 23
2203: IFFALSE 2226
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
2205: LD_EXP 23
2209: PPUSH
2210: LD_INT 142
2212: PPUSH
2213: LD_INT 63
2215: PPUSH
2216: LD_INT 2
2218: PPUSH
2219: LD_INT 0
2221: PPUSH
2222: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
2226: LD_EXP 30
2230: PPUSH
2231: LD_INT 142
2233: PPUSH
2234: LD_INT 63
2236: PPUSH
2237: LD_INT 3
2239: PPUSH
2240: LD_INT 0
2242: PPUSH
2243: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
2247: LD_EXP 30
2251: PUSH
2252: LD_EXP 23
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: PPUSH
2261: CALL_OW 140
// end ;
2265: LD_VAR 0 1
2269: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
2270: LD_INT 0
2272: PPUSH
2273: PPUSH
2274: PPUSH
2275: PPUSH
// uc_side := 5 ;
2276: LD_ADDR_OWVAR 20
2280: PUSH
2281: LD_INT 5
2283: ST_TO_ADDR
// uc_nation := 2 ;
2284: LD_ADDR_OWVAR 21
2288: PUSH
2289: LD_INT 2
2291: ST_TO_ADDR
// InitHc ;
2292: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
2296: LD_ADDR_EXP 29
2300: PUSH
2301: LD_STRING Omar
2303: PPUSH
2304: LD_INT 0
2306: PPUSH
2307: LD_STRING 
2309: PPUSH
2310: CALL 233 0 3
2314: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
2315: LD_EXP 29
2319: PPUSH
2320: LD_INT 284
2322: PPUSH
2323: LD_INT 163
2325: PPUSH
2326: LD_INT 0
2328: PPUSH
2329: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
2333: LD_EXP 29
2337: PPUSH
2338: LD_INT 256
2340: PPUSH
2341: LD_INT 129
2343: PPUSH
2344: CALL_OW 111
// wait ( 0 0$2 ) ;
2348: LD_INT 70
2350: PPUSH
2351: CALL_OW 67
// omarSquad := [ ] ;
2355: LD_ADDR_EXP 33
2359: PUSH
2360: EMPTY
2361: ST_TO_ADDR
// for i := 1 to 5 do
2362: LD_ADDR_VAR 0 2
2366: PUSH
2367: DOUBLE
2368: LD_INT 1
2370: DEC
2371: ST_TO_ADDR
2372: LD_INT 5
2374: PUSH
2375: FOR_TO
2376: IFFALSE 2582
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
2378: LD_INT 5
2380: PPUSH
2381: LD_INT 2
2383: PPUSH
2384: LD_INT 13
2386: PUSH
2387: LD_INT 14
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: PUSH
2394: LD_VAR 0 2
2398: PUSH
2399: LD_INT 2
2401: MOD
2402: PUSH
2403: LD_INT 1
2405: PLUS
2406: ARRAY
2407: PPUSH
2408: LD_INT 1
2410: PPUSH
2411: LD_INT 1
2413: PPUSH
2414: LD_INT 25
2416: PUSH
2417: LD_INT 27
2419: PUSH
2420: LD_INT 26
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: LIST
2427: PUSH
2428: LD_VAR 0 2
2432: PUSH
2433: LD_INT 3
2435: MOD
2436: PUSH
2437: LD_INT 1
2439: PLUS
2440: ARRAY
2441: PPUSH
2442: LD_INT 100
2444: PPUSH
2445: CALL 296 0 7
// veh := CreateVehicle ;
2449: LD_ADDR_VAR 0 4
2453: PUSH
2454: CALL_OW 45
2458: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2459: LD_VAR 0 4
2463: PPUSH
2464: LD_INT 5
2466: PPUSH
2467: CALL_OW 233
// omarSquad := omarSquad union veh ;
2471: LD_ADDR_EXP 33
2475: PUSH
2476: LD_EXP 33
2480: PUSH
2481: LD_VAR 0 4
2485: UNION
2486: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
2487: LD_VAR 0 4
2491: PPUSH
2492: LD_INT 284
2494: PPUSH
2495: LD_INT 163
2497: PPUSH
2498: LD_INT 0
2500: PPUSH
2501: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
2505: LD_INT 0
2507: PPUSH
2508: LD_INT 3
2510: PPUSH
2511: LD_INT 3
2513: PPUSH
2514: CALL_OW 380
// un := CreateHuman ;
2518: LD_ADDR_VAR 0 3
2522: PUSH
2523: CALL_OW 44
2527: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2528: LD_ADDR_EXP 33
2532: PUSH
2533: LD_EXP 33
2537: PUSH
2538: LD_VAR 0 3
2542: UNION
2543: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2544: LD_VAR 0 3
2548: PPUSH
2549: LD_VAR 0 4
2553: PPUSH
2554: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
2558: LD_VAR 0 3
2562: PPUSH
2563: LD_INT 271
2565: PPUSH
2566: LD_INT 144
2568: PPUSH
2569: CALL_OW 111
// wait ( 0 0$2 ) ;
2573: LD_INT 70
2575: PPUSH
2576: CALL_OW 67
// end ;
2580: GO 2375
2582: POP
2583: POP
// for i := 1 to 3 do
2584: LD_ADDR_VAR 0 2
2588: PUSH
2589: DOUBLE
2590: LD_INT 1
2592: DEC
2593: ST_TO_ADDR
2594: LD_INT 3
2596: PUSH
2597: FOR_TO
2598: IFFALSE 2681
// begin PrepareHuman ( false , 1 , 3 ) ;
2600: LD_INT 0
2602: PPUSH
2603: LD_INT 1
2605: PPUSH
2606: LD_INT 3
2608: PPUSH
2609: CALL_OW 380
// un := CreateHuman ;
2613: LD_ADDR_VAR 0 3
2617: PUSH
2618: CALL_OW 44
2622: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2623: LD_ADDR_EXP 33
2627: PUSH
2628: LD_EXP 33
2632: PUSH
2633: LD_VAR 0 3
2637: UNION
2638: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
2639: LD_VAR 0 3
2643: PPUSH
2644: LD_INT 284
2646: PPUSH
2647: LD_INT 163
2649: PPUSH
2650: LD_INT 0
2652: PPUSH
2653: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
2657: LD_VAR 0 3
2661: PPUSH
2662: LD_INT 257
2664: PPUSH
2665: LD_INT 138
2667: PPUSH
2668: CALL_OW 111
// wait ( 0 0$1 ) ;
2672: LD_INT 35
2674: PPUSH
2675: CALL_OW 67
// end ;
2679: GO 2597
2681: POP
2682: POP
// for i := 1 to 6 do
2683: LD_ADDR_VAR 0 2
2687: PUSH
2688: DOUBLE
2689: LD_INT 1
2691: DEC
2692: ST_TO_ADDR
2693: LD_INT 6
2695: PUSH
2696: FOR_TO
2697: IFFALSE 2830
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2699: LD_INT 0
2701: PPUSH
2702: LD_INT 1
2704: PUSH
2705: LD_INT 1
2707: PUSH
2708: LD_INT 4
2710: PUSH
2711: EMPTY
2712: LIST
2713: LIST
2714: LIST
2715: PUSH
2716: LD_VAR 0 2
2720: PUSH
2721: LD_INT 3
2723: MOD
2724: PUSH
2725: LD_INT 1
2727: PLUS
2728: ARRAY
2729: PPUSH
2730: LD_INT 3
2732: PPUSH
2733: CALL_OW 380
// un := CreateHuman ;
2737: LD_ADDR_VAR 0 3
2741: PUSH
2742: CALL_OW 44
2746: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2747: LD_ADDR_EXP 33
2751: PUSH
2752: LD_EXP 33
2756: PUSH
2757: LD_VAR 0 3
2761: UNION
2762: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2763: LD_VAR 0 3
2767: PPUSH
2768: LD_INT 225
2770: PPUSH
2771: LD_INT 163
2773: PPUSH
2774: LD_INT 0
2776: PPUSH
2777: CALL_OW 48
// if i = 1 then
2781: LD_VAR 0 2
2785: PUSH
2786: LD_INT 1
2788: EQUAL
2789: IFFALSE 2806
// SetAttr ( un , attr_speed , 12 ) ;
2791: LD_VAR 0 3
2795: PPUSH
2796: LD_INT 2
2798: PPUSH
2799: LD_INT 12
2801: PPUSH
2802: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2806: LD_VAR 0 3
2810: PPUSH
2811: LD_INT 222
2813: PPUSH
2814: LD_INT 157
2816: PPUSH
2817: CALL_OW 111
// wait ( 0 0$1 ) ;
2821: LD_INT 35
2823: PPUSH
2824: CALL_OW 67
// end ;
2828: GO 2696
2830: POP
2831: POP
// end ; end_of_file
2832: LD_VAR 0 1
2836: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2837: LD_INT 0
2839: PPUSH
2840: PPUSH
2841: PPUSH
2842: PPUSH
2843: PPUSH
2844: PPUSH
// ruLab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ;
2845: LD_ADDR_EXP 45
2849: PUSH
2850: LD_INT 22
2852: PUSH
2853: LD_INT 3
2855: PUSH
2856: EMPTY
2857: LIST
2858: LIST
2859: PUSH
2860: LD_INT 30
2862: PUSH
2863: LD_INT 7
2865: PUSH
2866: EMPTY
2867: LIST
2868: LIST
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PPUSH
2874: CALL_OW 69
2878: PUSH
2879: LD_INT 1
2881: ARRAY
2882: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2883: LD_ADDR_VAR 0 2
2887: PUSH
2888: LD_INT 21
2890: PUSH
2891: LD_INT 3
2893: PUSH
2894: EMPTY
2895: LIST
2896: LIST
2897: PUSH
2898: LD_INT 23
2900: PUSH
2901: LD_INT 3
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: PPUSH
2912: CALL_OW 69
2916: PUSH
2917: FOR_IN
2918: IFFALSE 2934
// SetBLevel ( i , 5 ) ;
2920: LD_VAR 0 2
2924: PPUSH
2925: LD_INT 5
2927: PPUSH
2928: CALL_OW 241
2932: GO 2917
2934: POP
2935: POP
// SetBName ( kirov , kirov ) ;
2936: LD_INT 71
2938: PPUSH
2939: LD_STRING kirov
2941: PPUSH
2942: CALL_OW 500
// SetBName ( beria , beria ) ;
2946: LD_INT 106
2948: PPUSH
2949: LD_STRING beria
2951: PPUSH
2952: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2956: LD_INT 112
2958: PPUSH
2959: LD_STRING kagan
2961: PPUSH
2962: CALL_OW 500
// uc_side := 6 ;
2966: LD_ADDR_OWVAR 20
2970: PUSH
2971: LD_INT 6
2973: ST_TO_ADDR
// uc_nation := 3 ;
2974: LD_ADDR_OWVAR 21
2978: PUSH
2979: LD_INT 3
2981: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2982: LD_ADDR_VAR 0 5
2986: PUSH
2987: LD_INT 22
2989: PUSH
2990: LD_INT 6
2992: PUSH
2993: EMPTY
2994: LIST
2995: LIST
2996: PUSH
2997: LD_INT 30
2999: PUSH
3000: LD_INT 5
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PUSH
3007: EMPTY
3008: LIST
3009: LIST
3010: PPUSH
3011: CALL_OW 69
3015: PUSH
3016: LD_INT 1
3018: ARRAY
3019: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
3020: LD_ADDR_VAR 0 4
3024: PUSH
3025: LD_INT 22
3027: PUSH
3028: LD_INT 6
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 30
3037: PUSH
3038: LD_INT 4
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 69
3053: PUSH
3054: LD_INT 1
3056: ARRAY
3057: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
3058: LD_ADDR_EXP 39
3062: PUSH
3063: EMPTY
3064: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
3065: LD_ADDR_EXP 40
3069: PUSH
3070: EMPTY
3071: ST_TO_ADDR
// russianPatrol := [ ] ;
3072: LD_ADDR_EXP 42
3076: PUSH
3077: EMPTY
3078: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
3079: LD_ADDR_EXP 35
3083: PUSH
3084: LD_STRING Kurin
3086: PPUSH
3087: LD_INT 0
3089: PPUSH
3090: LD_STRING 
3092: PPUSH
3093: CALL 233 0 3
3097: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
3098: LD_EXP 35
3102: PPUSH
3103: LD_INT 71
3105: PPUSH
3106: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
3110: LD_ADDR_EXP 37
3114: PUSH
3115: LD_STRING Popov
3117: PPUSH
3118: LD_INT 0
3120: PPUSH
3121: LD_STRING 
3123: PPUSH
3124: CALL 233 0 3
3128: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
3129: LD_EXP 37
3133: PPUSH
3134: LD_INT 71
3136: PPUSH
3137: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
3141: LD_ADDR_EXP 36
3145: PUSH
3146: LD_STRING Grishko
3148: PPUSH
3149: LD_INT 0
3151: PPUSH
3152: LD_STRING 
3154: PPUSH
3155: CALL 233 0 3
3159: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
3160: LD_EXP 36
3164: PPUSH
3165: LD_INT 207
3167: PPUSH
3168: LD_INT 106
3170: PPUSH
3171: LD_INT 0
3173: PPUSH
3174: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
3178: LD_EXP 36
3182: PPUSH
3183: LD_INT 209
3185: PPUSH
3186: LD_INT 106
3188: PPUSH
3189: CALL_OW 118
// for i := 1 to 2 do
3193: LD_ADDR_VAR 0 2
3197: PUSH
3198: DOUBLE
3199: LD_INT 1
3201: DEC
3202: ST_TO_ADDR
3203: LD_INT 2
3205: PUSH
3206: FOR_TO
3207: IFFALSE 3262
// begin PrepareHuman ( false , 2 , 2 ) ;
3209: LD_INT 0
3211: PPUSH
3212: LD_INT 2
3214: PPUSH
3215: LD_INT 2
3217: PPUSH
3218: CALL_OW 380
// un := CreateHuman ;
3222: LD_ADDR_VAR 0 3
3226: PUSH
3227: CALL_OW 44
3231: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
3232: LD_VAR 0 3
3236: PPUSH
3237: LD_INT 71
3239: PPUSH
3240: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3244: LD_ADDR_EXP 39
3248: PUSH
3249: LD_EXP 39
3253: PUSH
3254: LD_VAR 0 3
3258: UNION
3259: ST_TO_ADDR
// end ;
3260: GO 3206
3262: POP
3263: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
3264: LD_ADDR_VAR 0 2
3268: PUSH
3269: DOUBLE
3270: LD_INT 1
3272: DEC
3273: ST_TO_ADDR
3274: LD_INT 5
3276: PUSH
3277: LD_INT 6
3279: PUSH
3280: LD_INT 6
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: LIST
3287: PUSH
3288: LD_OWVAR 67
3292: ARRAY
3293: PUSH
3294: FOR_TO
3295: IFFALSE 3369
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3297: LD_INT 0
3299: PPUSH
3300: LD_INT 1
3302: PPUSH
3303: LD_INT 2
3305: PUSH
3306: LD_INT 3
3308: PUSH
3309: LD_INT 4
3311: PUSH
3312: EMPTY
3313: LIST
3314: LIST
3315: LIST
3316: PUSH
3317: LD_OWVAR 67
3321: ARRAY
3322: PPUSH
3323: CALL_OW 380
// un := CreateHuman ;
3327: LD_ADDR_VAR 0 3
3331: PUSH
3332: CALL_OW 44
3336: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
3337: LD_VAR 0 3
3341: PPUSH
3342: LD_VAR 0 5
3346: PPUSH
3347: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3351: LD_ADDR_EXP 39
3355: PUSH
3356: LD_EXP 39
3360: PUSH
3361: LD_VAR 0 3
3365: UNION
3366: ST_TO_ADDR
// end ;
3367: GO 3294
3369: POP
3370: POP
// for i := 1 to 3 do
3371: LD_ADDR_VAR 0 2
3375: PUSH
3376: DOUBLE
3377: LD_INT 1
3379: DEC
3380: ST_TO_ADDR
3381: LD_INT 3
3383: PUSH
3384: FOR_TO
3385: IFFALSE 3440
// begin PrepareHuman ( false , 3 , 3 ) ;
3387: LD_INT 0
3389: PPUSH
3390: LD_INT 3
3392: PPUSH
3393: LD_INT 3
3395: PPUSH
3396: CALL_OW 380
// un := CreateHuman ;
3400: LD_ADDR_VAR 0 3
3404: PUSH
3405: CALL_OW 44
3409: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
3410: LD_VAR 0 3
3414: PPUSH
3415: LD_INT 92
3417: PPUSH
3418: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3422: LD_ADDR_EXP 39
3426: PUSH
3427: LD_EXP 39
3431: PUSH
3432: LD_VAR 0 3
3436: UNION
3437: ST_TO_ADDR
// end ;
3438: GO 3384
3440: POP
3441: POP
// for i := 1 to 2 do
3442: LD_ADDR_VAR 0 2
3446: PUSH
3447: DOUBLE
3448: LD_INT 1
3450: DEC
3451: ST_TO_ADDR
3452: LD_INT 2
3454: PUSH
3455: FOR_TO
3456: IFFALSE 3511
// begin PrepareHuman ( false , 4 , 3 ) ;
3458: LD_INT 0
3460: PPUSH
3461: LD_INT 4
3463: PPUSH
3464: LD_INT 3
3466: PPUSH
3467: CALL_OW 380
// un := CreateHuman ;
3471: LD_ADDR_VAR 0 3
3475: PUSH
3476: CALL_OW 44
3480: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
3481: LD_VAR 0 3
3485: PPUSH
3486: LD_INT 83
3488: PPUSH
3489: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3493: LD_ADDR_EXP 39
3497: PUSH
3498: LD_EXP 39
3502: PUSH
3503: LD_VAR 0 3
3507: UNION
3508: ST_TO_ADDR
// end ;
3509: GO 3455
3511: POP
3512: POP
// for i := 1 to 5 do
3513: LD_ADDR_VAR 0 2
3517: PUSH
3518: DOUBLE
3519: LD_INT 1
3521: DEC
3522: ST_TO_ADDR
3523: LD_INT 5
3525: PUSH
3526: FOR_TO
3527: IFFALSE 3584
// begin PrepareHuman ( false , 1 , 3 ) ;
3529: LD_INT 0
3531: PPUSH
3532: LD_INT 1
3534: PPUSH
3535: LD_INT 3
3537: PPUSH
3538: CALL_OW 380
// un := CreateHuman ;
3542: LD_ADDR_VAR 0 3
3546: PUSH
3547: CALL_OW 44
3551: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3552: LD_VAR 0 3
3556: PPUSH
3557: LD_VAR 0 4
3561: PPUSH
3562: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3566: LD_ADDR_EXP 41
3570: PUSH
3571: LD_EXP 41
3575: PUSH
3576: LD_VAR 0 3
3580: UNION
3581: ST_TO_ADDR
// end ;
3582: GO 3526
3584: POP
3585: POP
// russianCargo := [ ] ;
3586: LD_ADDR_EXP 44
3590: PUSH
3591: EMPTY
3592: ST_TO_ADDR
// for i := 1 to 2 do
3593: LD_ADDR_VAR 0 2
3597: PUSH
3598: DOUBLE
3599: LD_INT 1
3601: DEC
3602: ST_TO_ADDR
3603: LD_INT 2
3605: PUSH
3606: FOR_TO
3607: IFFALSE 3739
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3609: LD_INT 6
3611: PPUSH
3612: LD_INT 3
3614: PPUSH
3615: LD_INT 21
3617: PPUSH
3618: LD_INT 1
3620: PPUSH
3621: LD_INT 1
3623: PPUSH
3624: LD_INT 51
3626: PPUSH
3627: LD_INT 100
3629: PPUSH
3630: CALL 296 0 7
// un := CreateVehicle ;
3634: LD_ADDR_VAR 0 3
3638: PUSH
3639: CALL_OW 45
3643: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3644: LD_ADDR_EXP 44
3648: PUSH
3649: LD_EXP 44
3653: PUSH
3654: LD_VAR 0 3
3658: UNION
3659: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3660: LD_VAR 0 3
3664: PPUSH
3665: LD_INT 2
3667: PPUSH
3668: LD_INT 100
3670: PPUSH
3671: CALL_OW 290
// SetDir ( un , 4 ) ;
3675: LD_VAR 0 3
3679: PPUSH
3680: LD_INT 4
3682: PPUSH
3683: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3687: LD_VAR 0 3
3691: PPUSH
3692: LD_INT 147
3694: PPUSH
3695: LD_INT 103
3697: PPUSH
3698: LD_INT 4
3700: PPUSH
3701: LD_INT 0
3703: PPUSH
3704: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3708: LD_INT 0
3710: PPUSH
3711: LD_INT 1
3713: PPUSH
3714: LD_OWVAR 67
3718: PPUSH
3719: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3723: CALL_OW 44
3727: PPUSH
3728: LD_VAR 0 3
3732: PPUSH
3733: CALL_OW 52
// end ;
3737: GO 3606
3739: POP
3740: POP
// uc_side := 3 ;
3741: LD_ADDR_OWVAR 20
3745: PUSH
3746: LD_INT 3
3748: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3749: LD_ADDR_EXP 38
3753: PUSH
3754: LD_STRING Burlak
3756: PPUSH
3757: LD_INT 0
3759: PPUSH
3760: LD_STRING 
3762: PPUSH
3763: CALL 233 0 3
3767: ST_TO_ADDR
// for i := 1 to 2 do
3768: LD_ADDR_VAR 0 2
3772: PUSH
3773: DOUBLE
3774: LD_INT 1
3776: DEC
3777: ST_TO_ADDR
3778: LD_INT 2
3780: PUSH
3781: FOR_TO
3782: IFFALSE 3875
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3784: LD_INT 0
3786: PPUSH
3787: LD_INT 1
3789: PPUSH
3790: LD_OWVAR 67
3794: PUSH
3795: LD_INT 1
3797: PLUS
3798: PPUSH
3799: CALL_OW 380
// un := CreateHuman ;
3803: LD_ADDR_VAR 0 3
3807: PUSH
3808: CALL_OW 44
3812: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3813: LD_VAR 0 3
3817: PPUSH
3818: LD_INT 22
3820: PUSH
3821: LD_INT 3
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: PUSH
3828: LD_INT 30
3830: PUSH
3831: LD_INT 32
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: PPUSH
3842: CALL_OW 69
3846: PUSH
3847: LD_VAR 0 2
3851: ARRAY
3852: PPUSH
3853: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3857: LD_ADDR_EXP 40
3861: PUSH
3862: LD_EXP 40
3866: PUSH
3867: LD_VAR 0 3
3871: UNION
3872: ST_TO_ADDR
// end ;
3873: GO 3781
3875: POP
3876: POP
// for i := 1 to 2 do
3877: LD_ADDR_VAR 0 2
3881: PUSH
3882: DOUBLE
3883: LD_INT 1
3885: DEC
3886: ST_TO_ADDR
3887: LD_INT 2
3889: PUSH
3890: FOR_TO
3891: IFFALSE 3982
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3893: LD_INT 0
3895: PPUSH
3896: LD_INT 1
3898: PPUSH
3899: LD_OWVAR 67
3903: PUSH
3904: LD_INT 1
3906: PLUS
3907: PPUSH
3908: CALL_OW 380
// un := CreateHuman ;
3912: LD_ADDR_VAR 0 3
3916: PUSH
3917: CALL_OW 44
3921: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3922: LD_VAR 0 3
3926: PPUSH
3927: LD_INT 22
3929: PUSH
3930: LD_INT 3
3932: PUSH
3933: EMPTY
3934: LIST
3935: LIST
3936: PUSH
3937: LD_INT 30
3939: PUSH
3940: LD_INT 5
3942: PUSH
3943: EMPTY
3944: LIST
3945: LIST
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PPUSH
3951: CALL_OW 69
3955: PUSH
3956: LD_INT 1
3958: ARRAY
3959: PPUSH
3960: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3964: LD_ADDR_EXP 40
3968: PUSH
3969: LD_EXP 40
3973: PUSH
3974: LD_VAR 0 3
3978: UNION
3979: ST_TO_ADDR
// end ;
3980: GO 3890
3982: POP
3983: POP
// for i := 1 to 2 do
3984: LD_ADDR_VAR 0 2
3988: PUSH
3989: DOUBLE
3990: LD_INT 1
3992: DEC
3993: ST_TO_ADDR
3994: LD_INT 2
3996: PUSH
3997: FOR_TO
3998: IFFALSE 4085
// begin PrepareHuman ( false , 4 , Difficulty ) ;
4000: LD_INT 0
4002: PPUSH
4003: LD_INT 4
4005: PPUSH
4006: LD_OWVAR 67
4010: PPUSH
4011: CALL_OW 380
// un := CreateHuman ;
4015: LD_ADDR_VAR 0 3
4019: PUSH
4020: CALL_OW 44
4024: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
4025: LD_VAR 0 3
4029: PPUSH
4030: LD_INT 22
4032: PUSH
4033: LD_INT 3
4035: PUSH
4036: EMPTY
4037: LIST
4038: LIST
4039: PUSH
4040: LD_INT 30
4042: PUSH
4043: LD_INT 7
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: PUSH
4050: EMPTY
4051: LIST
4052: LIST
4053: PPUSH
4054: CALL_OW 69
4058: PUSH
4059: LD_INT 1
4061: ARRAY
4062: PPUSH
4063: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4067: LD_ADDR_EXP 40
4071: PUSH
4072: LD_EXP 40
4076: PUSH
4077: LD_VAR 0 3
4081: UNION
4082: ST_TO_ADDR
// end ;
4083: GO 3997
4085: POP
4086: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
4087: LD_INT 0
4089: PPUSH
4090: LD_INT 2
4092: PPUSH
4093: LD_OWVAR 67
4097: PPUSH
4098: CALL_OW 380
// un := CreateHuman ;
4102: LD_ADDR_VAR 0 3
4106: PUSH
4107: CALL_OW 44
4111: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
4112: LD_VAR 0 3
4116: PPUSH
4117: LD_INT 106
4119: PPUSH
4120: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4124: LD_ADDR_EXP 40
4128: PUSH
4129: LD_EXP 40
4133: PUSH
4134: LD_VAR 0 3
4138: UNION
4139: ST_TO_ADDR
// for i := 1 to 3 do
4140: LD_ADDR_VAR 0 2
4144: PUSH
4145: DOUBLE
4146: LD_INT 1
4148: DEC
4149: ST_TO_ADDR
4150: LD_INT 3
4152: PUSH
4153: FOR_TO
4154: IFFALSE 4276
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
4156: LD_ADDR_VAR 0 6
4160: PUSH
4161: LD_INT 22
4163: PUSH
4164: LD_INT 3
4166: PUSH
4167: EMPTY
4168: LIST
4169: LIST
4170: PUSH
4171: LD_INT 30
4173: PUSH
4174: LD_INT 31
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: PPUSH
4185: CALL_OW 69
4189: PUSH
4190: LD_VAR 0 2
4194: ARRAY
4195: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
4196: LD_INT 0
4198: PPUSH
4199: LD_INT 1
4201: PPUSH
4202: LD_OWVAR 67
4206: PPUSH
4207: CALL_OW 380
// un := CreateHuman ;
4211: LD_ADDR_VAR 0 3
4215: PUSH
4216: CALL_OW 44
4220: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
4221: LD_VAR 0 3
4225: PPUSH
4226: LD_VAR 0 6
4230: PPUSH
4231: CALL_OW 254
4235: PUSH
4236: LD_INT 3
4238: PLUS
4239: PPUSH
4240: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
4244: LD_VAR 0 3
4248: PPUSH
4249: LD_VAR 0 6
4253: PPUSH
4254: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4258: LD_ADDR_EXP 40
4262: PUSH
4263: LD_EXP 40
4267: PUSH
4268: LD_VAR 0 3
4272: UNION
4273: ST_TO_ADDR
// end ;
4274: GO 4153
4276: POP
4277: POP
// russianOmicronAttackers := [ ] ;
4278: LD_ADDR_EXP 43
4282: PUSH
4283: EMPTY
4284: ST_TO_ADDR
// for i := 1 to 6 do
4285: LD_ADDR_VAR 0 2
4289: PUSH
4290: DOUBLE
4291: LD_INT 1
4293: DEC
4294: ST_TO_ADDR
4295: LD_INT 6
4297: PUSH
4298: FOR_TO
4299: IFFALSE 4523
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
4301: LD_INT 3
4303: PPUSH
4304: LD_INT 3
4306: PPUSH
4307: LD_INT 21
4309: PUSH
4310: LD_INT 23
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: PUSH
4317: LD_VAR 0 2
4321: PUSH
4322: LD_INT 2
4324: MOD
4325: PUSH
4326: LD_INT 1
4328: PLUS
4329: ARRAY
4330: PPUSH
4331: LD_INT 1
4333: PPUSH
4334: LD_INT 1
4336: PPUSH
4337: LD_INT 43
4339: PUSH
4340: LD_INT 44
4342: PUSH
4343: LD_INT 42
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: LIST
4350: PUSH
4351: LD_VAR 0 2
4355: PUSH
4356: LD_INT 3
4358: MOD
4359: PUSH
4360: LD_INT 1
4362: PLUS
4363: ARRAY
4364: PPUSH
4365: LD_INT 100
4367: PPUSH
4368: CALL 296 0 7
// un := CreateVehicle ;
4372: LD_ADDR_VAR 0 3
4376: PUSH
4377: CALL_OW 45
4381: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
4382: LD_VAR 0 3
4386: PPUSH
4387: LD_INT 0
4389: PUSH
4390: LD_INT 5
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: PUSH
4397: LD_INT 1
4399: PPUSH
4400: LD_INT 2
4402: PPUSH
4403: CALL_OW 12
4407: ARRAY
4408: PPUSH
4409: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
4413: LD_ADDR_EXP 43
4417: PUSH
4418: LD_EXP 43
4422: PUSH
4423: LD_VAR 0 3
4427: UNION
4428: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
4429: LD_VAR 0 3
4433: PPUSH
4434: LD_INT 127
4436: PPUSH
4437: LD_INT 89
4439: PPUSH
4440: LD_INT 7
4442: PPUSH
4443: LD_INT 0
4445: PPUSH
4446: CALL_OW 50
// uc_side := 3 ;
4450: LD_ADDR_OWVAR 20
4454: PUSH
4455: LD_INT 3
4457: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4458: LD_INT 0
4460: PPUSH
4461: LD_INT 3
4463: PPUSH
4464: LD_INT 3
4466: PPUSH
4467: CALL_OW 380
// un := CreateHuman ;
4471: LD_ADDR_VAR 0 3
4475: PUSH
4476: CALL_OW 44
4480: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4481: LD_ADDR_EXP 43
4485: PUSH
4486: LD_EXP 43
4490: PUSH
4491: LD_VAR 0 3
4495: UNION
4496: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4497: LD_VAR 0 3
4501: PPUSH
4502: LD_EXP 43
4506: PUSH
4507: LD_EXP 43
4511: PUSH
4512: LD_INT 1
4514: MINUS
4515: ARRAY
4516: PPUSH
4517: CALL_OW 52
// end ;
4521: GO 4298
4523: POP
4524: POP
// for i := 1 to 3 do
4525: LD_ADDR_VAR 0 2
4529: PUSH
4530: DOUBLE
4531: LD_INT 1
4533: DEC
4534: ST_TO_ADDR
4535: LD_INT 3
4537: PUSH
4538: FOR_TO
4539: IFFALSE 4605
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4541: LD_INT 0
4543: PPUSH
4544: LD_INT 1
4546: PPUSH
4547: LD_OWVAR 67
4551: PPUSH
4552: CALL_OW 380
// un := CreateHuman ;
4556: LD_ADDR_VAR 0 3
4560: PUSH
4561: CALL_OW 44
4565: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4566: LD_ADDR_EXP 43
4570: PUSH
4571: LD_EXP 43
4575: PUSH
4576: LD_VAR 0 3
4580: UNION
4581: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4582: LD_VAR 0 3
4586: PPUSH
4587: LD_INT 91
4589: PPUSH
4590: LD_INT 60
4592: PPUSH
4593: LD_INT 3
4595: PPUSH
4596: LD_INT 0
4598: PPUSH
4599: CALL_OW 50
// end ;
4603: GO 4538
4605: POP
4606: POP
// end ;
4607: LD_VAR 0 1
4611: RET
// every 0 0$3 do var i ;
4612: GO 4614
4614: DISABLE
4615: LD_INT 0
4617: PPUSH
// begin for i := 1 to 4 do
4618: LD_ADDR_VAR 0 1
4622: PUSH
4623: DOUBLE
4624: LD_INT 1
4626: DEC
4627: ST_TO_ADDR
4628: LD_INT 4
4630: PUSH
4631: FOR_TO
4632: IFFALSE 4651
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4634: LD_EXP 41
4638: PUSH
4639: LD_VAR 0 1
4643: ARRAY
4644: PPUSH
4645: CALL_OW 122
4649: GO 4631
4651: POP
4652: POP
// wait ( 3 ) ;
4653: LD_INT 3
4655: PPUSH
4656: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4660: LD_EXP 41
4664: PUSH
4665: LD_INT 1
4667: ARRAY
4668: PPUSH
4669: LD_INT 22
4671: PUSH
4672: LD_INT 6
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: PUSH
4679: LD_INT 30
4681: PUSH
4682: LD_INT 31
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PUSH
4689: EMPTY
4690: LIST
4691: LIST
4692: PPUSH
4693: CALL_OW 69
4697: PPUSH
4698: LD_EXP 41
4702: PUSH
4703: LD_INT 1
4705: ARRAY
4706: PPUSH
4707: CALL_OW 74
4711: PPUSH
4712: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4716: LD_EXP 41
4720: PUSH
4721: LD_INT 2
4723: ARRAY
4724: PPUSH
4725: LD_INT 211
4727: PPUSH
4728: LD_INT 107
4730: PPUSH
4731: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4735: LD_EXP 41
4739: PUSH
4740: LD_INT 2
4742: ARRAY
4743: PPUSH
4744: LD_INT 209
4746: PPUSH
4747: LD_INT 106
4749: PPUSH
4750: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4754: LD_EXP 41
4758: PUSH
4759: LD_INT 3
4761: ARRAY
4762: PPUSH
4763: LD_INT 209
4765: PPUSH
4766: LD_INT 103
4768: PPUSH
4769: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4773: LD_EXP 41
4777: PUSH
4778: LD_INT 3
4780: ARRAY
4781: PPUSH
4782: LD_INT 209
4784: PPUSH
4785: LD_INT 106
4787: PPUSH
4788: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4792: LD_EXP 41
4796: PUSH
4797: LD_INT 4
4799: ARRAY
4800: PPUSH
4801: LD_INT 227
4803: PPUSH
4804: LD_INT 117
4806: PPUSH
4807: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4811: LD_EXP 41
4815: PUSH
4816: LD_INT 4
4818: ARRAY
4819: PPUSH
4820: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4824: LD_INT 700
4826: PPUSH
4827: CALL_OW 67
// for i := 3 downto 2 do
4831: LD_ADDR_VAR 0 1
4835: PUSH
4836: DOUBLE
4837: LD_INT 3
4839: INC
4840: ST_TO_ADDR
4841: LD_INT 2
4843: PUSH
4844: FOR_DOWNTO
4845: IFFALSE 5012
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4847: LD_EXP 41
4851: PUSH
4852: LD_VAR 0 1
4856: ARRAY
4857: PPUSH
4858: LD_INT 200
4860: PPUSH
4861: LD_INT 91
4863: PPUSH
4864: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4868: LD_EXP 41
4872: PUSH
4873: LD_VAR 0 1
4877: ARRAY
4878: PPUSH
4879: LD_INT 210
4881: PPUSH
4882: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4886: LD_EXP 41
4890: PUSH
4891: LD_VAR 0 1
4895: ARRAY
4896: PPUSH
4897: LD_INT 224
4899: PPUSH
4900: LD_INT 93
4902: PPUSH
4903: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4907: LD_EXP 41
4911: PUSH
4912: LD_VAR 0 1
4916: ARRAY
4917: PPUSH
4918: LD_INT 210
4920: PPUSH
4921: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4925: LD_EXP 41
4929: PUSH
4930: LD_VAR 0 1
4934: ARRAY
4935: PPUSH
4936: LD_INT 239
4938: PPUSH
4939: LD_INT 123
4941: PPUSH
4942: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4946: LD_EXP 41
4950: PUSH
4951: LD_VAR 0 1
4955: ARRAY
4956: PPUSH
4957: LD_INT 210
4959: PPUSH
4960: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4964: LD_EXP 41
4968: PUSH
4969: LD_VAR 0 1
4973: ARRAY
4974: PPUSH
4975: LD_INT 212
4977: PPUSH
4978: LD_INT 105
4980: PPUSH
4981: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4985: LD_EXP 41
4989: PUSH
4990: LD_VAR 0 1
4994: ARRAY
4995: PPUSH
4996: LD_INT 700
4998: PPUSH
4999: CALL_OW 202
// wait ( 0 0$30 ) ;
5003: LD_INT 1050
5005: PPUSH
5006: CALL_OW 67
// end ;
5010: GO 4844
5012: POP
5013: POP
// until not activeGrishkoAI ;
5014: LD_EXP 10
5018: NOT
5019: IFFALSE 4824
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
5021: LD_EXP 41
5025: PPUSH
5026: LD_INT 221
5028: PPUSH
5029: LD_INT 110
5031: PPUSH
5032: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
5036: LD_EXP 41
5040: PPUSH
5041: LD_INT 228
5043: PPUSH
5044: LD_INT 115
5046: PPUSH
5047: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
5051: LD_EXP 41
5055: PPUSH
5056: CALL_OW 200
// end ;
5060: PPOPN 1
5062: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
5063: LD_EXP 12
5067: IFFALSE 5663
5069: GO 5071
5071: DISABLE
5072: LD_INT 0
5074: PPUSH
5075: PPUSH
5076: PPUSH
5077: PPUSH
// begin uc_side := 6 ;
5078: LD_ADDR_OWVAR 20
5082: PUSH
5083: LD_INT 6
5085: ST_TO_ADDR
// uc_nation := 3 ;
5086: LD_ADDR_OWVAR 21
5090: PUSH
5091: LD_INT 3
5093: ST_TO_ADDR
// for i := 1 to 3 do
5094: LD_ADDR_VAR 0 2
5098: PUSH
5099: DOUBLE
5100: LD_INT 1
5102: DEC
5103: ST_TO_ADDR
5104: LD_INT 3
5106: PUSH
5107: FOR_TO
5108: IFFALSE 5217
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
5110: LD_INT 0
5112: PPUSH
5113: LD_INT 1
5115: PPUSH
5116: LD_INT 2
5118: PUSH
5119: LD_INT 3
5121: PUSH
5122: LD_INT 4
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: LIST
5129: PUSH
5130: LD_OWVAR 67
5134: ARRAY
5135: PPUSH
5136: CALL_OW 380
// un := CreateHuman ;
5140: LD_ADDR_VAR 0 1
5144: PUSH
5145: CALL_OW 44
5149: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
5150: LD_ADDR_EXP 42
5154: PUSH
5155: LD_EXP 42
5159: PUSH
5160: LD_VAR 0 1
5164: UNION
5165: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5166: LD_VAR 0 1
5170: PPUSH
5171: LD_INT 1
5173: PPUSH
5174: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
5178: LD_VAR 0 1
5182: PPUSH
5183: LD_INT 11
5185: PPUSH
5186: LD_INT 0
5188: PPUSH
5189: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
5193: LD_VAR 0 1
5197: PPUSH
5198: LD_INT 210
5200: PPUSH
5201: LD_INT 159
5203: PPUSH
5204: CALL_OW 111
// wait ( 0 0$2 ) ;
5208: LD_INT 70
5210: PPUSH
5211: CALL_OW 67
// end ;
5215: GO 5107
5217: POP
5218: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 208 , 42 ] ] ] ;
5219: LD_ADDR_VAR 0 4
5223: PUSH
5224: LD_INT 172
5226: PUSH
5227: LD_INT 76
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: PUSH
5234: LD_INT 150
5236: PUSH
5237: LD_INT 38
5239: PUSH
5240: EMPTY
5241: LIST
5242: LIST
5243: PUSH
5244: LD_INT 148
5246: PUSH
5247: LD_INT 9
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: PUSH
5254: LD_INT 165
5256: PUSH
5257: LD_INT 38
5259: PUSH
5260: EMPTY
5261: LIST
5262: LIST
5263: PUSH
5264: EMPTY
5265: LIST
5266: LIST
5267: LIST
5268: LIST
5269: PUSH
5270: LD_INT 191
5272: PUSH
5273: LD_INT 77
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: PUSH
5280: LD_INT 168
5282: PUSH
5283: LD_INT 42
5285: PUSH
5286: EMPTY
5287: LIST
5288: LIST
5289: PUSH
5290: LD_INT 166
5292: PUSH
5293: LD_INT 11
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: PUSH
5300: LD_INT 151
5302: PUSH
5303: LD_INT 12
5305: PUSH
5306: EMPTY
5307: LIST
5308: LIST
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: PUSH
5316: LD_INT 221
5318: PUSH
5319: LD_INT 88
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: PUSH
5326: LD_INT 217
5328: PUSH
5329: LD_INT 64
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: PUSH
5336: LD_INT 208
5338: PUSH
5339: LD_INT 42
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: PUSH
5346: EMPTY
5347: LIST
5348: LIST
5349: LIST
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: LIST
5355: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5356: LD_INT 35
5358: PPUSH
5359: CALL_OW 67
// for i := 1 to patrol do
5363: LD_ADDR_VAR 0 2
5367: PUSH
5368: DOUBLE
5369: LD_INT 1
5371: DEC
5372: ST_TO_ADDR
5373: LD_VAR 0 4
5377: PUSH
5378: FOR_TO
5379: IFFALSE 5627
// begin if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
5381: LD_EXP 42
5385: PUSH
5386: LD_VAR 0 2
5390: ARRAY
5391: PPUSH
5392: CALL_OW 256
5396: PUSH
5397: LD_INT 990
5399: LESS
5400: PUSH
5401: LD_EXP 42
5405: PUSH
5406: LD_VAR 0 2
5410: ARRAY
5411: PPUSH
5412: CALL_OW 110
5416: PUSH
5417: LD_INT 1
5419: EQUAL
5420: AND
5421: IFFALSE 5449
// begin spottedByPatrol := true ;
5423: LD_ADDR_EXP 7
5427: PUSH
5428: LD_INT 1
5430: ST_TO_ADDR
// SetTag ( russianPatrol [ i ] , 2 ) ;
5431: LD_EXP 42
5435: PUSH
5436: LD_VAR 0 2
5440: ARRAY
5441: PPUSH
5442: LD_INT 2
5444: PPUSH
5445: CALL_OW 109
// end ; if GetTag ( russianPatrol [ i ] ) = 2 then
5449: LD_EXP 42
5453: PUSH
5454: LD_VAR 0 2
5458: ARRAY
5459: PPUSH
5460: CALL_OW 110
5464: PUSH
5465: LD_INT 2
5467: EQUAL
5468: IFFALSE 5525
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5470: LD_EXP 42
5474: PUSH
5475: LD_VAR 0 2
5479: ARRAY
5480: PPUSH
5481: LD_INT 166
5483: PPUSH
5484: LD_INT 101
5486: PPUSH
5487: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5491: LD_EXP 42
5495: PUSH
5496: LD_VAR 0 2
5500: ARRAY
5501: PPUSH
5502: LD_INT 71
5504: PPUSH
5505: CALL_OW 296
5509: PUSH
5510: LD_INT 10
5512: LESS
5513: IFFALSE 5523
// russianAlert := true ;
5515: LD_ADDR_EXP 9
5519: PUSH
5520: LD_INT 1
5522: ST_TO_ADDR
// continue ;
5523: GO 5378
// end ; if not HasTask ( russianPatrol [ i ] ) then
5525: LD_EXP 42
5529: PUSH
5530: LD_VAR 0 2
5534: ARRAY
5535: PPUSH
5536: CALL_OW 314
5540: NOT
5541: IFFALSE 5625
// for j in patrol [ i ] do
5543: LD_ADDR_VAR 0 3
5547: PUSH
5548: LD_VAR 0 4
5552: PUSH
5553: LD_VAR 0 2
5557: ARRAY
5558: PUSH
5559: FOR_IN
5560: IFFALSE 5623
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5562: LD_EXP 42
5566: PUSH
5567: LD_VAR 0 2
5571: ARRAY
5572: PPUSH
5573: LD_INT 35
5575: PPUSH
5576: LD_INT 175
5578: PPUSH
5579: CALL_OW 12
5583: PPUSH
5584: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5588: LD_EXP 42
5592: PUSH
5593: LD_VAR 0 2
5597: ARRAY
5598: PPUSH
5599: LD_VAR 0 3
5603: PUSH
5604: LD_INT 1
5606: ARRAY
5607: PPUSH
5608: LD_VAR 0 3
5612: PUSH
5613: LD_INT 2
5615: ARRAY
5616: PPUSH
5617: CALL_OW 174
// end ;
5621: GO 5559
5623: POP
5624: POP
// end ;
5625: GO 5378
5627: POP
5628: POP
// until not russianPatrol or russianAlert ;
5629: LD_EXP 42
5633: NOT
5634: PUSH
5635: LD_EXP 9
5639: OR
5640: IFFALSE 5356
// if russianPatrol then
5642: LD_EXP 42
5646: IFFALSE 5663
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5648: LD_EXP 42
5652: PPUSH
5653: LD_INT 161
5655: PPUSH
5656: LD_INT 107
5658: PPUSH
5659: CALL_OW 114
// end ;
5663: PPOPN 4
5665: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5666: LD_EXP 6
5670: PUSH
5671: LD_EXP 13
5675: NOT
5676: AND
5677: IFFALSE 6118
5679: GO 5681
5681: DISABLE
5682: LD_INT 0
5684: PPUSH
5685: PPUSH
5686: PPUSH
5687: PPUSH
5688: PPUSH
// begin enable ;
5689: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5690: LD_ADDR_VAR 0 2
5694: PUSH
5695: LD_EXP 43
5699: PPUSH
5700: LD_INT 21
5702: PUSH
5703: LD_INT 2
5705: PUSH
5706: EMPTY
5707: LIST
5708: LIST
5709: PPUSH
5710: CALL_OW 72
5714: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5715: LD_ADDR_VAR 0 4
5719: PUSH
5720: LD_INT 22
5722: PUSH
5723: LD_INT 4
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: PPUSH
5730: CALL_OW 69
5734: ST_TO_ADDR
// for i in filter do
5735: LD_ADDR_VAR 0 1
5739: PUSH
5740: LD_VAR 0 2
5744: PUSH
5745: FOR_IN
5746: IFFALSE 6116
// begin tmp := IsDrivenBy ( i ) ;
5748: LD_ADDR_VAR 0 3
5752: PUSH
5753: LD_VAR 0 1
5757: PPUSH
5758: CALL_OW 311
5762: ST_TO_ADDR
// if not tmp then
5763: LD_VAR 0 3
5767: NOT
5768: IFFALSE 5772
// continue ;
5770: GO 5745
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5772: LD_VAR 0 1
5776: PPUSH
5777: CALL_OW 261
5781: PUSH
5782: LD_INT 90
5784: GREATER
5785: PUSH
5786: LD_VAR 0 1
5790: PPUSH
5791: CALL_OW 110
5795: PUSH
5796: LD_INT 2
5798: EQUAL
5799: AND
5800: IFFALSE 5816
// SetTag ( i , 0 ) else
5802: LD_VAR 0 1
5806: PPUSH
5807: LD_INT 0
5809: PPUSH
5810: CALL_OW 109
5814: GO 5867
// if GetTag ( i ) = 2 then
5816: LD_VAR 0 1
5820: PPUSH
5821: CALL_OW 110
5825: PUSH
5826: LD_INT 2
5828: EQUAL
5829: IFFALSE 5867
// begin x := rand ( 1 , 2 ) ;
5831: LD_ADDR_VAR 0 5
5835: PUSH
5836: LD_INT 1
5838: PPUSH
5839: LD_INT 2
5841: PPUSH
5842: CALL_OW 12
5846: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5847: LD_VAR 0 1
5851: PPUSH
5852: LD_EXP 44
5856: PUSH
5857: LD_VAR 0 5
5861: ARRAY
5862: PPUSH
5863: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5867: LD_VAR 0 1
5871: PPUSH
5872: CALL_OW 256
5876: PUSH
5877: LD_INT 600
5879: GREATEREQUAL
5880: PUSH
5881: LD_VAR 0 1
5885: PPUSH
5886: CALL_OW 110
5890: NOT
5891: AND
5892: IFFALSE 5918
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5894: LD_VAR 0 1
5898: PPUSH
5899: LD_VAR 0 4
5903: PPUSH
5904: LD_VAR 0 1
5908: PPUSH
5909: CALL_OW 74
5913: PPUSH
5914: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5918: LD_VAR 0 1
5922: PPUSH
5923: CALL_OW 256
5927: PUSH
5928: LD_INT 600
5930: LESS
5931: PUSH
5932: LD_VAR 0 1
5936: PPUSH
5937: CALL_OW 110
5941: NOT
5942: AND
5943: IFFALSE 5972
// begin SetTag ( i , 1 ) ;
5945: LD_VAR 0 1
5949: PPUSH
5950: LD_INT 1
5952: PPUSH
5953: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5957: LD_VAR 0 1
5961: PPUSH
5962: LD_INT 62
5964: PPUSH
5965: LD_INT 22
5967: PPUSH
5968: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5972: LD_VAR 0 1
5976: PPUSH
5977: CALL_OW 110
5981: PUSH
5982: LD_INT 1
5984: EQUAL
5985: PUSH
5986: LD_VAR 0 1
5990: PPUSH
5991: LD_INT 62
5993: PPUSH
5994: LD_INT 22
5996: PPUSH
5997: CALL_OW 297
6001: PUSH
6002: LD_INT 6
6004: LESS
6005: AND
6006: PUSH
6007: LD_VAR 0 3
6011: AND
6012: IFFALSE 6114
// begin ComExitVehicle ( tmp ) ;
6014: LD_VAR 0 3
6018: PPUSH
6019: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
6023: LD_VAR 0 3
6027: PPUSH
6028: LD_VAR 0 1
6032: PPUSH
6033: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
6037: LD_INT 35
6039: PPUSH
6040: CALL_OW 67
// until GetLives ( i ) = 1000 ;
6044: LD_VAR 0 1
6048: PPUSH
6049: CALL_OW 256
6053: PUSH
6054: LD_INT 1000
6056: EQUAL
6057: IFFALSE 6037
// ComEnterUnit ( tmp , i ) ;
6059: LD_VAR 0 3
6063: PPUSH
6064: LD_VAR 0 1
6068: PPUSH
6069: CALL_OW 120
// if GetFuel ( i ) <= 90 then
6073: LD_VAR 0 1
6077: PPUSH
6078: CALL_OW 261
6082: PUSH
6083: LD_INT 90
6085: LESSEQUAL
6086: IFFALSE 6102
// SetTag ( i , 2 ) else
6088: LD_VAR 0 1
6092: PPUSH
6093: LD_INT 2
6095: PPUSH
6096: CALL_OW 109
6100: GO 6114
// SetTag ( i , 0 ) ;
6102: LD_VAR 0 1
6106: PPUSH
6107: LD_INT 0
6109: PPUSH
6110: CALL_OW 109
// end ; end ;
6114: GO 5745
6116: POP
6117: POP
// end ;
6118: PPOPN 5
6120: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
6121: LD_EXP 19
6125: IFFALSE 6327
6127: GO 6129
6129: DISABLE
6130: LD_INT 0
6132: PPUSH
6133: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
6134: LD_EXP 44
6138: PPUSH
6139: LD_INT 79
6141: PPUSH
6142: LD_INT 155
6144: PPUSH
6145: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
6149: LD_EXP 44
6153: PPUSH
6154: LD_INT 16
6156: PPUSH
6157: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6161: LD_ADDR_VAR 0 2
6165: PUSH
6166: LD_EXP 43
6170: PPUSH
6171: LD_INT 50
6173: PUSH
6174: EMPTY
6175: LIST
6176: PPUSH
6177: CALL_OW 72
6181: ST_TO_ADDR
// for i in tmp do
6182: LD_ADDR_VAR 0 1
6186: PUSH
6187: LD_VAR 0 2
6191: PUSH
6192: FOR_IN
6193: IFFALSE 6227
// begin ComAgressiveMove ( i , 123 , 60 ) ;
6195: LD_VAR 0 1
6199: PPUSH
6200: LD_INT 123
6202: PPUSH
6203: LD_INT 60
6205: PPUSH
6206: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
6210: LD_VAR 0 1
6214: PPUSH
6215: LD_INT 153
6217: PPUSH
6218: LD_INT 103
6220: PPUSH
6221: CALL_OW 174
// end ;
6225: GO 6192
6227: POP
6228: POP
// repeat wait ( 0 0$1 ) ;
6229: LD_INT 35
6231: PPUSH
6232: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6236: LD_ADDR_VAR 0 2
6240: PUSH
6241: LD_EXP 43
6245: PPUSH
6246: LD_INT 50
6248: PUSH
6249: EMPTY
6250: LIST
6251: PPUSH
6252: CALL_OW 72
6256: ST_TO_ADDR
// for i in tmp do
6257: LD_ADDR_VAR 0 1
6261: PUSH
6262: LD_VAR 0 2
6266: PUSH
6267: FOR_IN
6268: IFFALSE 6318
// if not HasTask ( i ) then
6270: LD_VAR 0 1
6274: PPUSH
6275: CALL_OW 314
6279: NOT
6280: IFFALSE 6316
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) until not tmp ;
6282: LD_VAR 0 1
6286: PPUSH
6287: LD_INT 81
6289: PUSH
6290: LD_INT 3
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PPUSH
6297: CALL_OW 69
6301: PPUSH
6302: LD_VAR 0 1
6306: PPUSH
6307: CALL_OW 74
6311: PPUSH
6312: CALL_OW 115
6316: GO 6267
6318: POP
6319: POP
6320: LD_VAR 0 2
6324: NOT
6325: IFFALSE 6229
// end ;
6327: PPOPN 2
6329: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6330: LD_INT 22
6332: PUSH
6333: LD_INT 3
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: PUSH
6340: LD_INT 32
6342: PUSH
6343: LD_INT 1
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: PUSH
6350: EMPTY
6351: LIST
6352: LIST
6353: PPUSH
6354: CALL_OW 69
6358: IFFALSE 6437
6360: GO 6362
6362: DISABLE
6363: LD_INT 0
6365: PPUSH
// begin enable ;
6366: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6367: LD_ADDR_VAR 0 1
6371: PUSH
6372: LD_INT 22
6374: PUSH
6375: LD_INT 3
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: LD_INT 32
6384: PUSH
6385: LD_INT 1
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 69
6400: PUSH
6401: FOR_IN
6402: IFFALSE 6435
// if GetFuel ( i ) < 1 then
6404: LD_VAR 0 1
6408: PPUSH
6409: CALL_OW 261
6413: PUSH
6414: LD_INT 1
6416: LESS
6417: IFFALSE 6433
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6419: LD_VAR 0 1
6423: PPUSH
6424: CALL_OW 311
6428: PPUSH
6429: CALL_OW 121
6433: GO 6401
6435: POP
6436: POP
// end ; end_of_file
6437: PPOPN 1
6439: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6440: LD_INT 0
6442: PPUSH
6443: PPUSH
6444: PPUSH
// SetBName ( omikron , omikron ) ;
6445: LD_INT 64
6447: PPUSH
6448: LD_STRING omikron
6450: PPUSH
6451: CALL_OW 500
// uc_side := 4 ;
6455: LD_ADDR_OWVAR 20
6459: PUSH
6460: LD_INT 4
6462: ST_TO_ADDR
// uc_nation := 1 ;
6463: LD_ADDR_OWVAR 21
6467: PUSH
6468: LD_INT 1
6470: ST_TO_ADDR
// omicronSquad := [ ] ;
6471: LD_ADDR_EXP 46
6475: PUSH
6476: EMPTY
6477: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6478: LD_ADDR_VAR 0 2
6482: PUSH
6483: LD_INT 22
6485: PUSH
6486: LD_INT 4
6488: PUSH
6489: EMPTY
6490: LIST
6491: LIST
6492: PUSH
6493: LD_INT 2
6495: PUSH
6496: LD_INT 30
6498: PUSH
6499: LD_INT 32
6501: PUSH
6502: EMPTY
6503: LIST
6504: LIST
6505: PUSH
6506: LD_INT 30
6508: PUSH
6509: LD_INT 31
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: PUSH
6516: EMPTY
6517: LIST
6518: LIST
6519: LIST
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: PPUSH
6525: CALL_OW 69
6529: PUSH
6530: FOR_IN
6531: IFFALSE 6588
// begin PrepareHuman ( false , 1 , 1 ) ;
6533: LD_INT 0
6535: PPUSH
6536: LD_INT 1
6538: PPUSH
6539: LD_INT 1
6541: PPUSH
6542: CALL_OW 380
// un := CreateHuman ;
6546: LD_ADDR_VAR 0 3
6550: PUSH
6551: CALL_OW 44
6555: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6556: LD_ADDR_EXP 46
6560: PUSH
6561: LD_EXP 46
6565: PUSH
6566: LD_VAR 0 3
6570: UNION
6571: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6572: LD_VAR 0 3
6576: PPUSH
6577: LD_VAR 0 2
6581: PPUSH
6582: CALL_OW 52
// end ;
6586: GO 6530
6588: POP
6589: POP
// for i := 1 to 3 do
6590: LD_ADDR_VAR 0 2
6594: PUSH
6595: DOUBLE
6596: LD_INT 1
6598: DEC
6599: ST_TO_ADDR
6600: LD_INT 3
6602: PUSH
6603: FOR_TO
6604: IFFALSE 6659
// begin PrepareHuman ( false , 2 , 2 ) ;
6606: LD_INT 0
6608: PPUSH
6609: LD_INT 2
6611: PPUSH
6612: LD_INT 2
6614: PPUSH
6615: CALL_OW 380
// un := CreateHuman ;
6619: LD_ADDR_VAR 0 3
6623: PUSH
6624: CALL_OW 44
6628: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6629: LD_ADDR_EXP 46
6633: PUSH
6634: LD_EXP 46
6638: PUSH
6639: LD_VAR 0 3
6643: UNION
6644: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6645: LD_VAR 0 3
6649: PPUSH
6650: LD_INT 64
6652: PPUSH
6653: CALL_OW 52
// end ;
6657: GO 6603
6659: POP
6660: POP
// for i := 1 to 2 do
6661: LD_ADDR_VAR 0 2
6665: PUSH
6666: DOUBLE
6667: LD_INT 1
6669: DEC
6670: ST_TO_ADDR
6671: LD_INT 2
6673: PUSH
6674: FOR_TO
6675: IFFALSE 6814
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6677: LD_INT 4
6679: PPUSH
6680: LD_INT 1
6682: PPUSH
6683: LD_INT 2
6685: PPUSH
6686: LD_INT 2
6688: PPUSH
6689: LD_INT 1
6691: PPUSH
6692: LD_INT 3
6694: PPUSH
6695: LD_INT 100
6697: PPUSH
6698: CALL 296 0 7
// un := CreateVehicle ;
6702: LD_ADDR_VAR 0 3
6706: PUSH
6707: CALL_OW 45
6711: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6712: LD_ADDR_EXP 46
6716: PUSH
6717: LD_EXP 46
6721: PUSH
6722: LD_VAR 0 3
6726: UNION
6727: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
6728: LD_VAR 0 3
6732: PPUSH
6733: LD_INT 28
6735: PPUSH
6736: LD_INT 37
6738: PPUSH
6739: LD_INT 6
6741: PPUSH
6742: LD_INT 0
6744: PPUSH
6745: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
6749: LD_INT 0
6751: PPUSH
6752: LD_INT 3
6754: PPUSH
6755: LD_INT 2
6757: PPUSH
6758: CALL_OW 380
// un := CreateHuman ;
6762: LD_ADDR_VAR 0 3
6766: PUSH
6767: CALL_OW 44
6771: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6772: LD_ADDR_EXP 46
6776: PUSH
6777: LD_EXP 46
6781: PUSH
6782: LD_VAR 0 3
6786: UNION
6787: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
6788: LD_VAR 0 3
6792: PPUSH
6793: LD_EXP 46
6797: PUSH
6798: LD_EXP 46
6802: PUSH
6803: LD_INT 1
6805: MINUS
6806: ARRAY
6807: PPUSH
6808: CALL_OW 52
// end ;
6812: GO 6674
6814: POP
6815: POP
// end ;
6816: LD_VAR 0 1
6820: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
6821: LD_INT 0
6823: PPUSH
6824: PPUSH
6825: PPUSH
6826: PPUSH
// uc_side := 4 ;
6827: LD_ADDR_OWVAR 20
6831: PUSH
6832: LD_INT 4
6834: ST_TO_ADDR
// uc_nation := 1 ;
6835: LD_ADDR_OWVAR 21
6839: PUSH
6840: LD_INT 1
6842: ST_TO_ADDR
// tmp := [ ] ;
6843: LD_ADDR_VAR 0 4
6847: PUSH
6848: EMPTY
6849: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
6850: LD_INT 4
6852: PPUSH
6853: LD_INT 1
6855: PPUSH
6856: LD_INT 2
6858: PPUSH
6859: LD_INT 1
6861: PPUSH
6862: LD_INT 1
6864: PPUSH
6865: LD_INT 4
6867: PPUSH
6868: LD_INT 77
6870: PPUSH
6871: CALL 296 0 7
// un := CreateVehicle ;
6875: LD_ADDR_VAR 0 3
6879: PUSH
6880: CALL_OW 45
6884: ST_TO_ADDR
// tmp := tmp union un ;
6885: LD_ADDR_VAR 0 4
6889: PUSH
6890: LD_VAR 0 4
6894: PUSH
6895: LD_VAR 0 3
6899: UNION
6900: ST_TO_ADDR
// SetDir ( un , 2 ) ;
6901: LD_VAR 0 3
6905: PPUSH
6906: LD_INT 2
6908: PPUSH
6909: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
6913: LD_VAR 0 3
6917: PPUSH
6918: LD_INT 106
6920: PPUSH
6921: LD_INT 3
6923: PPUSH
6924: LD_INT 0
6926: PPUSH
6927: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
6931: LD_INT 0
6933: PPUSH
6934: LD_INT 3
6936: PPUSH
6937: LD_INT 2
6939: PPUSH
6940: CALL_OW 380
// un := CreateHuman ;
6944: LD_ADDR_VAR 0 3
6948: PUSH
6949: CALL_OW 44
6953: ST_TO_ADDR
// tmp := tmp union un ;
6954: LD_ADDR_VAR 0 4
6958: PUSH
6959: LD_VAR 0 4
6963: PUSH
6964: LD_VAR 0 3
6968: UNION
6969: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
6970: LD_VAR 0 3
6974: PPUSH
6975: LD_VAR 0 4
6979: PUSH
6980: LD_VAR 0 4
6984: PUSH
6985: LD_INT 1
6987: MINUS
6988: ARRAY
6989: PPUSH
6990: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
6994: LD_VAR 0 3
6998: PPUSH
6999: LD_INT 109
7001: PPUSH
7002: LD_INT 9
7004: PPUSH
7005: CALL_OW 111
// wait ( 0 0$1 ) ;
7009: LD_INT 35
7011: PPUSH
7012: CALL_OW 67
// for i := 1 to 2 do
7016: LD_ADDR_VAR 0 2
7020: PUSH
7021: DOUBLE
7022: LD_INT 1
7024: DEC
7025: ST_TO_ADDR
7026: LD_INT 2
7028: PUSH
7029: FOR_TO
7030: IFFALSE 7094
// begin PrepareHuman ( false , 1 , 2 ) ;
7032: LD_INT 0
7034: PPUSH
7035: LD_INT 1
7037: PPUSH
7038: LD_INT 2
7040: PPUSH
7041: CALL_OW 380
// un := CreateHuman ;
7045: LD_ADDR_VAR 0 3
7049: PUSH
7050: CALL_OW 44
7054: ST_TO_ADDR
// tmp := tmp union un ;
7055: LD_ADDR_VAR 0 4
7059: PUSH
7060: LD_VAR 0 4
7064: PUSH
7065: LD_VAR 0 3
7069: UNION
7070: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7071: LD_VAR 0 3
7075: PPUSH
7076: LD_INT 105
7078: PPUSH
7079: LD_INT 2
7081: PPUSH
7082: LD_INT 2
7084: PPUSH
7085: LD_INT 0
7087: PPUSH
7088: CALL_OW 50
// end ;
7092: GO 7029
7094: POP
7095: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7096: LD_VAR 0 4
7100: PPUSH
7101: LD_INT 26
7103: PPUSH
7104: LD_INT 35
7106: PPUSH
7107: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7111: LD_INT 35
7113: PPUSH
7114: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7118: LD_VAR 0 4
7122: PPUSH
7123: LD_INT 50
7125: PUSH
7126: EMPTY
7127: LIST
7128: PPUSH
7129: CALL_OW 72
7133: NOT
7134: IFFALSE 7138
// exit ;
7136: GO 7265
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7138: LD_VAR 0 4
7142: PPUSH
7143: LD_INT 91
7145: PUSH
7146: LD_INT 64
7148: PUSH
7149: LD_INT 12
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: LIST
7156: PPUSH
7157: CALL_OW 72
7161: PUSH
7162: LD_VAR 0 4
7166: EQUAL
7167: IFFALSE 7111
// omicronSquad := omicronSquad union tmp ;
7169: LD_ADDR_EXP 46
7173: PUSH
7174: LD_EXP 46
7178: PUSH
7179: LD_VAR 0 4
7183: UNION
7184: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7185: LD_ADDR_VAR 0 2
7189: PUSH
7190: LD_VAR 0 4
7194: PPUSH
7195: LD_INT 25
7197: PUSH
7198: LD_INT 1
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PPUSH
7205: CALL_OW 72
7209: PUSH
7210: FOR_IN
7211: IFFALSE 7263
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7213: LD_VAR 0 2
7217: PPUSH
7218: LD_INT 22
7220: PUSH
7221: LD_INT 4
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: PUSH
7228: LD_INT 30
7230: PUSH
7231: LD_INT 4
7233: PUSH
7234: EMPTY
7235: LIST
7236: LIST
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PPUSH
7242: CALL_OW 69
7246: PPUSH
7247: LD_VAR 0 2
7251: PPUSH
7252: CALL_OW 74
7256: PPUSH
7257: CALL_OW 120
7261: GO 7210
7263: POP
7264: POP
// end ;
7265: LD_VAR 0 1
7269: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7270: LD_EXP 13
7274: NOT
7275: IFFALSE 7846
7277: GO 7279
7279: DISABLE
7280: LD_INT 0
7282: PPUSH
7283: PPUSH
7284: PPUSH
7285: PPUSH
// begin enable ;
7286: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7287: LD_ADDR_VAR 0 2
7291: PUSH
7292: LD_INT 22
7294: PUSH
7295: LD_INT 4
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: PUSH
7302: LD_INT 21
7304: PUSH
7305: LD_INT 3
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: PUSH
7312: LD_INT 3
7314: PUSH
7315: LD_INT 24
7317: PUSH
7318: LD_INT 1000
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: LIST
7333: PPUSH
7334: CALL_OW 69
7338: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7339: LD_ADDR_VAR 0 3
7343: PUSH
7344: LD_EXP 46
7348: PPUSH
7349: LD_INT 25
7351: PUSH
7352: LD_INT 2
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: PPUSH
7359: CALL_OW 72
7363: ST_TO_ADDR
// if filter and tmp then
7364: LD_VAR 0 2
7368: PUSH
7369: LD_VAR 0 3
7373: AND
7374: IFFALSE 7447
// begin for i in tmp do
7376: LD_ADDR_VAR 0 1
7380: PUSH
7381: LD_VAR 0 3
7385: PUSH
7386: FOR_IN
7387: IFFALSE 7443
// if IsInUnit ( i ) then
7389: LD_VAR 0 1
7393: PPUSH
7394: CALL_OW 310
7398: IFFALSE 7411
// ComExitBuilding ( i ) else
7400: LD_VAR 0 1
7404: PPUSH
7405: CALL_OW 122
7409: GO 7441
// if not HasTask ( i ) then
7411: LD_VAR 0 1
7415: PPUSH
7416: CALL_OW 314
7420: NOT
7421: IFFALSE 7441
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7423: LD_VAR 0 1
7427: PPUSH
7428: LD_VAR 0 2
7432: PUSH
7433: LD_INT 1
7435: ARRAY
7436: PPUSH
7437: CALL_OW 130
7441: GO 7386
7443: POP
7444: POP
// end else
7445: GO 7518
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7447: LD_VAR 0 3
7451: PPUSH
7452: LD_INT 3
7454: PUSH
7455: LD_INT 54
7457: PUSH
7458: EMPTY
7459: LIST
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: PPUSH
7465: CALL_OW 72
7469: IFFALSE 7518
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7471: LD_ADDR_VAR 0 1
7475: PUSH
7476: LD_VAR 0 3
7480: PPUSH
7481: LD_INT 3
7483: PUSH
7484: LD_INT 54
7486: PUSH
7487: EMPTY
7488: LIST
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: PPUSH
7494: CALL_OW 72
7498: PUSH
7499: FOR_IN
7500: IFFALSE 7516
// ComEnterUnit ( i , omikron ) ;
7502: LD_VAR 0 1
7506: PPUSH
7507: LD_INT 64
7509: PPUSH
7510: CALL_OW 120
7514: GO 7499
7516: POP
7517: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7518: LD_ADDR_VAR 0 2
7522: PUSH
7523: LD_EXP 46
7527: PPUSH
7528: LD_INT 21
7530: PUSH
7531: LD_INT 2
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: PPUSH
7538: CALL_OW 72
7542: ST_TO_ADDR
// if not filter then
7543: LD_VAR 0 2
7547: NOT
7548: IFFALSE 7552
// exit ;
7550: GO 7846
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7552: LD_ADDR_VAR 0 4
7556: PUSH
7557: LD_INT 13
7559: PPUSH
7560: LD_INT 81
7562: PUSH
7563: LD_INT 4
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: PPUSH
7570: CALL_OW 70
7574: ST_TO_ADDR
// if enemy then
7575: LD_VAR 0 4
7579: IFFALSE 7846
// begin for i in filter do
7581: LD_ADDR_VAR 0 1
7585: PUSH
7586: LD_VAR 0 2
7590: PUSH
7591: FOR_IN
7592: IFFALSE 7844
// begin tmp := IsDrivenBy ( i ) ;
7594: LD_ADDR_VAR 0 3
7598: PUSH
7599: LD_VAR 0 1
7603: PPUSH
7604: CALL_OW 311
7608: ST_TO_ADDR
// if not tmp then
7609: LD_VAR 0 3
7613: NOT
7614: IFFALSE 7618
// continue ;
7616: GO 7591
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7618: LD_VAR 0 1
7622: PPUSH
7623: CALL_OW 256
7627: PUSH
7628: LD_INT 600
7630: GREATEREQUAL
7631: PUSH
7632: LD_VAR 0 1
7636: PPUSH
7637: CALL_OW 110
7641: PUSH
7642: LD_INT 1
7644: NONEQUAL
7645: AND
7646: IFFALSE 7672
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7648: LD_VAR 0 1
7652: PPUSH
7653: LD_VAR 0 4
7657: PPUSH
7658: LD_VAR 0 1
7662: PPUSH
7663: CALL_OW 74
7667: PPUSH
7668: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7672: LD_VAR 0 1
7676: PPUSH
7677: CALL_OW 256
7681: PUSH
7682: LD_INT 600
7684: LESS
7685: PUSH
7686: LD_VAR 0 1
7690: PPUSH
7691: CALL_OW 110
7695: PUSH
7696: LD_INT 1
7698: NONEQUAL
7699: AND
7700: IFFALSE 7729
// begin SetTag ( i , 1 ) ;
7702: LD_VAR 0 1
7706: PPUSH
7707: LD_INT 1
7709: PPUSH
7710: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
7714: LD_VAR 0 1
7718: PPUSH
7719: LD_INT 27
7721: PPUSH
7722: LD_INT 35
7724: PPUSH
7725: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
7729: LD_VAR 0 1
7733: PPUSH
7734: CALL_OW 110
7738: PUSH
7739: LD_INT 1
7741: EQUAL
7742: PUSH
7743: LD_VAR 0 1
7747: PPUSH
7748: LD_INT 27
7750: PPUSH
7751: LD_INT 35
7753: PPUSH
7754: CALL_OW 297
7758: PUSH
7759: LD_INT 6
7761: LESS
7762: AND
7763: PUSH
7764: LD_VAR 0 3
7768: AND
7769: IFFALSE 7842
// begin ComExitVehicle ( tmp ) ;
7771: LD_VAR 0 3
7775: PPUSH
7776: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
7780: LD_VAR 0 3
7784: PPUSH
7785: LD_VAR 0 1
7789: PPUSH
7790: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
7794: LD_INT 35
7796: PPUSH
7797: CALL_OW 67
// until GetLives ( i ) = 1000 ;
7801: LD_VAR 0 1
7805: PPUSH
7806: CALL_OW 256
7810: PUSH
7811: LD_INT 1000
7813: EQUAL
7814: IFFALSE 7794
// ComEnterUnit ( tmp , i ) ;
7816: LD_VAR 0 3
7820: PPUSH
7821: LD_VAR 0 1
7825: PPUSH
7826: CALL_OW 120
// SetTag ( i , 0 ) ;
7830: LD_VAR 0 1
7834: PPUSH
7835: LD_INT 0
7837: PPUSH
7838: CALL_OW 109
// end ; end ;
7842: GO 7591
7844: POP
7845: POP
// end ; end ;
7846: PPOPN 4
7848: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
7849: LD_EXP 13
7853: IFFALSE 7997
7855: GO 7857
7857: DISABLE
7858: LD_INT 0
7860: PPUSH
7861: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
7862: LD_ADDR_VAR 0 2
7866: PUSH
7867: LD_EXP 46
7871: PPUSH
7872: LD_INT 21
7874: PUSH
7875: LD_INT 1
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: PUSH
7882: LD_INT 50
7884: PUSH
7885: EMPTY
7886: LIST
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: PPUSH
7892: CALL_OW 72
7896: ST_TO_ADDR
// if not tmp then
7897: LD_VAR 0 2
7901: NOT
7902: IFFALSE 7906
// exit ;
7904: GO 7997
// repeat wait ( 0 0$1 ) ;
7906: LD_INT 35
7908: PPUSH
7909: CALL_OW 67
// for i in tmp do
7913: LD_ADDR_VAR 0 1
7917: PUSH
7918: LD_VAR 0 2
7922: PUSH
7923: FOR_IN
7924: IFFALSE 7988
// begin ComExit ( i ) ;
7926: LD_VAR 0 1
7930: PPUSH
7931: CALL 734 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
7935: LD_VAR 0 1
7939: PPUSH
7940: LD_INT 14
7942: PPUSH
7943: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
7947: LD_VAR 0 1
7951: PPUSH
7952: LD_INT 14
7954: PPUSH
7955: CALL_OW 308
7959: IFFALSE 7986
// begin tmp := tmp diff i ;
7961: LD_ADDR_VAR 0 2
7965: PUSH
7966: LD_VAR 0 2
7970: PUSH
7971: LD_VAR 0 1
7975: DIFF
7976: ST_TO_ADDR
// RemoveUnit ( i ) ;
7977: LD_VAR 0 1
7981: PPUSH
7982: CALL_OW 64
// end ; end ;
7986: GO 7923
7988: POP
7989: POP
// until not tmp ;
7990: LD_VAR 0 2
7994: NOT
7995: IFFALSE 7906
// end ; end_of_file
7997: PPOPN 2
7999: END
// export function Action ; var i , un , veh , tmp ; begin
8000: LD_INT 0
8002: PPUSH
8003: PPUSH
8004: PPUSH
8005: PPUSH
8006: PPUSH
// InGameOn ;
8007: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8011: LD_INT 179
8013: PPUSH
8014: LD_INT 5
8016: PPUSH
8017: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8021: LD_ADDR_VAR 0 4
8025: PUSH
8026: LD_INT 2
8028: PPUSH
8029: LD_INT 2
8031: PPUSH
8032: LD_INT 12
8034: PPUSH
8035: LD_INT 1
8037: PPUSH
8038: LD_INT 1
8040: PPUSH
8041: LD_INT 24
8043: PPUSH
8044: LD_INT 33
8046: PPUSH
8047: CALL 296 0 7
8051: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8052: LD_VAR 0 4
8056: PPUSH
8057: LD_INT 2
8059: PPUSH
8060: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8064: LD_VAR 0 4
8068: PPUSH
8069: LD_INT 178
8071: PPUSH
8072: LD_INT 2
8074: PPUSH
8075: LD_INT 0
8077: PPUSH
8078: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8082: LD_EXP 21
8086: PPUSH
8087: LD_VAR 0 4
8091: PPUSH
8092: CALL_OW 52
// if Kamil then
8096: LD_EXP 25
8100: IFFALSE 8135
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8102: LD_EXP 25
8106: PPUSH
8107: LD_INT 207
8109: PPUSH
8110: LD_INT 37
8112: PPUSH
8113: LD_INT 0
8115: PPUSH
8116: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8120: LD_EXP 25
8124: PPUSH
8125: LD_INT 211
8127: PPUSH
8128: LD_INT 38
8130: PPUSH
8131: CALL_OW 118
// end ; if Sophia then
8135: LD_EXP 27
8139: IFFALSE 8174
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8141: LD_EXP 27
8145: PPUSH
8146: LD_INT 209
8148: PPUSH
8149: LD_INT 40
8151: PPUSH
8152: LD_INT 0
8154: PPUSH
8155: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8159: LD_EXP 27
8163: PPUSH
8164: LD_INT 211
8166: PPUSH
8167: LD_INT 38
8169: PPUSH
8170: CALL_OW 118
// end ; if Givi then
8174: LD_EXP 22
8178: IFFALSE 8213
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8180: LD_EXP 22
8184: PPUSH
8185: LD_INT 201
8187: PPUSH
8188: LD_INT 34
8190: PPUSH
8191: LD_INT 0
8193: PPUSH
8194: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8198: LD_EXP 22
8202: PPUSH
8203: LD_INT 206
8205: PPUSH
8206: LD_INT 36
8208: PPUSH
8209: CALL_OW 118
// end ; if Ibrahim then
8213: LD_EXP 24
8217: IFFALSE 8252
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8219: LD_EXP 24
8223: PPUSH
8224: LD_INT 202
8226: PPUSH
8227: LD_INT 39
8229: PPUSH
8230: LD_INT 0
8232: PPUSH
8233: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8237: LD_EXP 24
8241: PPUSH
8242: LD_INT 206
8244: PPUSH
8245: LD_INT 36
8247: PPUSH
8248: CALL_OW 118
// end ; if Markov then
8252: LD_EXP 28
8256: IFFALSE 8343
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8258: LD_ADDR_VAR 0 4
8262: PUSH
8263: LD_INT 2
8265: PPUSH
8266: LD_INT 2
8268: PPUSH
8269: LD_INT 13
8271: PPUSH
8272: LD_INT 1
8274: PPUSH
8275: LD_INT 1
8277: PPUSH
8278: LD_INT 25
8280: PPUSH
8281: LD_INT 80
8283: PUSH
8284: LD_INT 20
8286: PUSH
8287: LD_OWVAR 67
8291: MUL
8292: MINUS
8293: PPUSH
8294: CALL 296 0 7
8298: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8299: LD_VAR 0 4
8303: PPUSH
8304: LD_INT 2
8306: PPUSH
8307: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8311: LD_VAR 0 4
8315: PPUSH
8316: LD_INT 197
8318: PPUSH
8319: LD_INT 35
8321: PPUSH
8322: LD_INT 0
8324: PPUSH
8325: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8329: LD_EXP 28
8333: PPUSH
8334: LD_VAR 0 4
8338: PPUSH
8339: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8343: LD_ADDR_VAR 0 5
8347: PUSH
8348: LD_EXP 26
8352: PUSH
8353: LD_EXP 32
8357: UNION
8358: ST_TO_ADDR
// for i in tmp do
8359: LD_ADDR_VAR 0 2
8363: PUSH
8364: LD_VAR 0 5
8368: PUSH
8369: FOR_IN
8370: IFFALSE 8404
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8372: LD_VAR 0 2
8376: PPUSH
8377: LD_INT 203
8379: PPUSH
8380: LD_INT 41
8382: PPUSH
8383: LD_INT 6
8385: PPUSH
8386: LD_INT 0
8388: PPUSH
8389: CALL_OW 50
// ComHold ( i ) ;
8393: LD_VAR 0 2
8397: PPUSH
8398: CALL_OW 140
// end ;
8402: GO 8369
8404: POP
8405: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8406: LD_INT 22
8408: PUSH
8409: LD_INT 2
8411: PUSH
8412: EMPTY
8413: LIST
8414: LIST
8415: PUSH
8416: LD_INT 25
8418: PUSH
8419: LD_INT 2
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: PPUSH
8430: CALL_OW 69
8434: NOT
8435: IFFALSE 8449
// SetClass ( Heike , 2 ) ;
8437: LD_EXP 21
8441: PPUSH
8442: LD_INT 2
8444: PPUSH
8445: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8449: LD_EXP 21
8453: PPUSH
8454: LD_INT 183
8456: PPUSH
8457: LD_INT 12
8459: PPUSH
8460: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8464: LD_EXP 21
8468: PPUSH
8469: LD_INT 188
8471: PPUSH
8472: LD_INT 20
8474: PPUSH
8475: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8479: LD_EXP 21
8483: PPUSH
8484: LD_INT 191
8486: PPUSH
8487: LD_INT 25
8489: PPUSH
8490: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8494: LD_EXP 21
8498: PPUSH
8499: LD_INT 203
8501: PPUSH
8502: LD_INT 29
8504: PPUSH
8505: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8509: LD_EXP 21
8513: PPUSH
8514: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8518: LD_INT 35
8520: PPUSH
8521: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8525: LD_EXP 21
8529: PPUSH
8530: CALL_OW 310
8534: NOT
8535: IFFALSE 8518
// CenterOnUnits ( Heike ) ;
8537: LD_EXP 21
8541: PPUSH
8542: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8546: LD_ADDR_VAR 0 5
8550: PUSH
8551: LD_INT 22
8553: PUSH
8554: LD_INT 2
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PUSH
8561: LD_INT 21
8563: PUSH
8564: LD_INT 1
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: PPUSH
8575: CALL_OW 69
8579: PUSH
8580: LD_EXP 21
8584: PUSH
8585: LD_EXP 28
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: DIFF
8594: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8595: LD_VAR 0 5
8599: PPUSH
8600: LD_EXP 21
8604: PPUSH
8605: CALL_OW 119
// if Givi then
8609: LD_EXP 22
8613: IFFALSE 8631
// ComTurnUnit ( Heike , Givi ) else
8615: LD_EXP 21
8619: PPUSH
8620: LD_EXP 22
8624: PPUSH
8625: CALL_OW 119
8629: GO 8649
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8631: LD_EXP 21
8635: PPUSH
8636: LD_VAR 0 5
8640: PUSH
8641: LD_INT 1
8643: ARRAY
8644: PPUSH
8645: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8649: LD_EXP 21
8653: PPUSH
8654: LD_STRING DH-Start-1
8656: PPUSH
8657: CALL_OW 88
// if Givi then
8661: LD_EXP 22
8665: IFFALSE 8712
// begin Say ( Givi , DG-Start-2 ) ;
8667: LD_EXP 22
8671: PPUSH
8672: LD_STRING DG-Start-2
8674: PPUSH
8675: CALL_OW 88
// if not Mike then
8679: LD_EXP 23
8683: NOT
8684: IFFALSE 8710
// begin Say ( Givi , DG-Start-b-3 ) ;
8686: LD_EXP 22
8690: PPUSH
8691: LD_STRING DG-Start-b-3
8693: PPUSH
8694: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
8698: LD_EXP 21
8702: PPUSH
8703: LD_STRING DH-Start-b-4
8705: PPUSH
8706: CALL_OW 88
// end ; end else
8710: GO 8777
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
8712: LD_EXP 32
8716: PPUSH
8717: LD_INT 26
8719: PUSH
8720: LD_INT 1
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: PPUSH
8727: CALL_OW 72
8731: PUSH
8732: LD_INT 1
8734: ARRAY
8735: PPUSH
8736: LD_STRING DArm-Start-a-2
8738: PPUSH
8739: CALL_OW 88
8743: NOT
8744: IFFALSE 8777
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
8746: LD_EXP 32
8750: PPUSH
8751: LD_INT 26
8753: PUSH
8754: LD_INT 2
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: PPUSH
8761: CALL_OW 72
8765: PUSH
8766: LD_INT 1
8768: ARRAY
8769: PPUSH
8770: LD_STRING DArf-Start-a-2
8772: PPUSH
8773: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
8777: LD_EXP 21
8781: PPUSH
8782: LD_INT 211
8784: PPUSH
8785: LD_INT 38
8787: PPUSH
8788: CALL_OW 118
// wait ( 0 0$1 ) ;
8792: LD_INT 35
8794: PPUSH
8795: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
8799: LD_EXP 21
8803: PPUSH
8804: LD_STRING DH-Start-3
8806: PPUSH
8807: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8811: LD_EXP 21
8815: PPUSH
8816: LD_STRING DH-Start-4
8818: PPUSH
8819: CALL_OW 88
// InGameOff ;
8823: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
8827: LD_STRING Prepare
8829: PPUSH
8830: CALL_OW 337
// wait ( 0 0$10 ) ;
8834: LD_INT 350
8836: PPUSH
8837: CALL_OW 67
// if not Aviradze then
8841: LD_EXP 31
8845: NOT
8846: IFFALSE 8850
// exit ;
8848: GO 9054
// SetDir ( Aviradze , 4 ) ;
8850: LD_EXP 31
8854: PPUSH
8855: LD_INT 4
8857: PPUSH
8858: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
8862: LD_EXP 31
8866: PPUSH
8867: LD_INT 225
8869: PPUSH
8870: LD_INT 33
8872: PPUSH
8873: LD_INT 0
8875: PPUSH
8876: CALL_OW 48
// for i := 1 to 2 do
8880: LD_ADDR_VAR 0 2
8884: PUSH
8885: DOUBLE
8886: LD_INT 1
8888: DEC
8889: ST_TO_ADDR
8890: LD_INT 2
8892: PUSH
8893: FOR_TO
8894: IFFALSE 9025
// begin uc_side := 2 ;
8896: LD_ADDR_OWVAR 20
8900: PUSH
8901: LD_INT 2
8903: ST_TO_ADDR
// uc_nation := 0 ;
8904: LD_ADDR_OWVAR 21
8908: PUSH
8909: LD_INT 0
8911: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
8912: LD_INT 0
8914: PPUSH
8915: LD_INT 12
8917: PPUSH
8918: LD_INT 1
8920: PPUSH
8921: CALL_OW 380
// hc_gallery :=  ;
8925: LD_ADDR_OWVAR 33
8929: PUSH
8930: LD_STRING 
8932: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
8933: LD_ADDR_OWVAR 26
8937: PUSH
8938: LD_STRING Artudito
8940: PUSH
8941: LD_STRING Textur
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: PUSH
8948: LD_VAR 0 2
8952: ARRAY
8953: ST_TO_ADDR
// un := CreateHuman ;
8954: LD_ADDR_VAR 0 3
8958: PUSH
8959: CALL_OW 44
8963: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
8964: LD_VAR 0 3
8968: PPUSH
8969: LD_INT 224
8971: PUSH
8972: LD_INT 226
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: PUSH
8979: LD_VAR 0 2
8983: ARRAY
8984: PPUSH
8985: LD_INT 31
8987: PUSH
8988: LD_INT 35
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: PUSH
8995: LD_VAR 0 2
8999: ARRAY
9000: PPUSH
9001: LD_INT 0
9003: PPUSH
9004: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9008: LD_VAR 0 3
9012: PPUSH
9013: LD_INT 215
9015: PPUSH
9016: LD_INT 36
9018: PPUSH
9019: CALL_OW 111
// end ;
9023: GO 8893
9025: POP
9026: POP
// hc_name :=  ;
9027: LD_ADDR_OWVAR 26
9031: PUSH
9032: LD_STRING 
9034: ST_TO_ADDR
// InitHc ;
9035: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9039: LD_EXP 31
9043: PPUSH
9044: LD_INT 215
9046: PPUSH
9047: LD_INT 36
9049: PPUSH
9050: CALL_OW 111
// end ;
9054: LD_VAR 0 1
9058: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
9059: LD_EXP 3
9063: IFFALSE 10296
9065: GO 9067
9067: DISABLE
9068: LD_INT 0
9070: PPUSH
9071: PPUSH
9072: PPUSH
// begin DialogueOn ;
9073: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9077: LD_EXP 21
9081: PPUSH
9082: LD_STRING DH-base-1
9084: PPUSH
9085: CALL_OW 88
// if Markov then
9089: LD_EXP 28
9093: IFFALSE 9145
// begin Say ( Markov , DMar-base-2 ) ;
9095: LD_EXP 28
9099: PPUSH
9100: LD_STRING DMar-base-2
9102: PPUSH
9103: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9107: LD_EXP 28
9111: PPUSH
9112: LD_STRING DMar-base-3
9114: PPUSH
9115: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9119: LD_EXP 21
9123: PPUSH
9124: LD_STRING DH-base-4
9126: PPUSH
9127: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9131: LD_EXP 28
9135: PPUSH
9136: LD_STRING DMar-base-5
9138: PPUSH
9139: CALL_OW 88
// end else
9143: GO 9222
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9145: LD_EXP 32
9149: PPUSH
9150: LD_INT 26
9152: PUSH
9153: LD_INT 1
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: PPUSH
9160: CALL_OW 72
9164: PUSH
9165: LD_INT 1
9167: ARRAY
9168: PPUSH
9169: LD_STRING DArm-base-a-2
9171: PPUSH
9172: CALL_OW 88
9176: NOT
9177: IFFALSE 9210
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9179: LD_EXP 32
9183: PPUSH
9184: LD_INT 26
9186: PUSH
9187: LD_INT 2
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: PPUSH
9194: CALL_OW 72
9198: PUSH
9199: LD_INT 1
9201: ARRAY
9202: PPUSH
9203: LD_STRING DArf-base-a-2
9205: PPUSH
9206: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9210: LD_EXP 21
9214: PPUSH
9215: LD_STRING DH-base-a-3
9217: PPUSH
9218: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9222: LD_EXP 31
9226: PPUSH
9227: LD_STRING DA-base-6
9229: PPUSH
9230: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9234: LD_EXP 31
9238: PPUSH
9239: LD_STRING DA-base-7
9241: PPUSH
9242: CALL_OW 88
// DialogueOff ;
9246: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9250: LD_STRING Flamethrower
9252: PPUSH
9253: CALL_OW 337
// wait ( 2 2$00 ) ;
9257: LD_INT 4200
9259: PPUSH
9260: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9264: LD_EXP 30
9268: PUSH
9269: LD_EXP 23
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: PPUSH
9278: LD_INT 203
9280: PPUSH
9281: LD_INT 37
9283: PPUSH
9284: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9288: LD_INT 22
9290: PUSH
9291: LD_INT 2
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: PUSH
9298: LD_INT 92
9300: PUSH
9301: LD_INT 203
9303: PUSH
9304: LD_INT 37
9306: PUSH
9307: LD_INT 10
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: PPUSH
9320: CALL_OW 69
9324: NOT
9325: IFFALSE 9365
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9327: LD_EXP 30
9331: PUSH
9332: LD_EXP 23
9336: PUSH
9337: EMPTY
9338: LIST
9339: LIST
9340: PPUSH
9341: LD_EXP 21
9345: PPUSH
9346: CALL_OW 250
9350: PPUSH
9351: LD_EXP 21
9355: PPUSH
9356: CALL_OW 251
9360: PPUSH
9361: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9365: LD_INT 35
9367: PPUSH
9368: CALL_OW 67
// until See ( 2 , Kurt ) or GetDistUnits ( Kurt , Heike ) < 8 ;
9372: LD_INT 2
9374: PPUSH
9375: LD_EXP 30
9379: PPUSH
9380: CALL_OW 292
9384: PUSH
9385: LD_EXP 30
9389: PPUSH
9390: LD_EXP 21
9394: PPUSH
9395: CALL_OW 296
9399: PUSH
9400: LD_INT 8
9402: LESS
9403: OR
9404: IFFALSE 9365
// InGameOn ;
9406: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9410: LD_EXP 30
9414: PPUSH
9415: CALL_OW 87
// if IsInUnit ( Heike ) then
9419: LD_EXP 21
9423: PPUSH
9424: CALL_OW 310
9428: IFFALSE 9439
// ComExitBuilding ( Heike ) ;
9430: LD_EXP 21
9434: PPUSH
9435: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9439: LD_EXP 30
9443: PUSH
9444: LD_EXP 23
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: PPUSH
9453: LD_EXP 21
9457: PPUSH
9458: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9462: LD_EXP 21
9466: PPUSH
9467: LD_EXP 30
9471: PPUSH
9472: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9476: LD_INT 22
9478: PUSH
9479: LD_INT 2
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: PUSH
9486: LD_INT 91
9488: PUSH
9489: LD_EXP 30
9493: PUSH
9494: LD_INT 10
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: LIST
9501: PUSH
9502: LD_INT 21
9504: PUSH
9505: LD_INT 3
9507: PUSH
9508: EMPTY
9509: LIST
9510: LIST
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: LIST
9516: PPUSH
9517: CALL_OW 69
9521: IFFALSE 9547
// begin Say ( Kurt , DKs-scout-1 ) ;
9523: LD_EXP 30
9527: PPUSH
9528: LD_STRING DKs-scout-1
9530: PPUSH
9531: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9535: LD_EXP 21
9539: PPUSH
9540: LD_STRING DH-scout-2
9542: PPUSH
9543: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9547: LD_INT 35
9549: PPUSH
9550: CALL_OW 67
// until GetDistUnits ( Heike , Kurt ) < 6 ;
9554: LD_EXP 21
9558: PPUSH
9559: LD_EXP 30
9563: PPUSH
9564: CALL_OW 296
9568: PUSH
9569: LD_INT 6
9571: LESS
9572: IFFALSE 9547
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
9574: LD_EXP 30
9578: PUSH
9579: LD_EXP 23
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: PPUSH
9588: LD_EXP 21
9592: PPUSH
9593: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
9597: LD_EXP 30
9601: PPUSH
9602: LD_STRING DKs-scout-3
9604: PPUSH
9605: CALL_OW 88
// if Kaia then
9609: LD_EXP 26
9613: IFFALSE 9796
// begin if IsInUnit ( Kaia ) then
9615: LD_EXP 26
9619: PPUSH
9620: CALL_OW 310
9624: IFFALSE 9635
// ComExitBuilding ( Kaia ) ;
9626: LD_EXP 26
9630: PPUSH
9631: CALL_OW 122
// AddComMoveUnit ( Kaia , Kurt ) ;
9635: LD_EXP 26
9639: PPUSH
9640: LD_EXP 30
9644: PPUSH
9645: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
9649: LD_INT 35
9651: PPUSH
9652: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
9656: LD_EXP 26
9660: PPUSH
9661: LD_EXP 30
9665: PPUSH
9666: CALL_OW 296
9670: PUSH
9671: LD_INT 6
9673: LESS
9674: IFFALSE 9649
// ComTurnUnit ( Kaia , Kurt ) ;
9676: LD_EXP 26
9680: PPUSH
9681: LD_EXP 30
9685: PPUSH
9686: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
9690: LD_EXP 26
9694: PPUSH
9695: LD_STRING DK-scout-4
9697: PPUSH
9698: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
9702: LD_EXP 30
9706: PPUSH
9707: LD_EXP 26
9711: PPUSH
9712: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
9716: LD_EXP 30
9720: PPUSH
9721: LD_STRING DKs-scout-5
9723: PPUSH
9724: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
9728: LD_EXP 26
9732: PPUSH
9733: LD_STRING DK-scout-6
9735: PPUSH
9736: CALL_OW 88
// if Mike then
9740: LD_EXP 23
9744: IFFALSE 9796
// begin Say ( Mike , DM-scout-7 ) ;
9746: LD_EXP 23
9750: PPUSH
9751: LD_STRING DM-scout-7
9753: PPUSH
9754: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
9758: LD_EXP 26
9762: PPUSH
9763: LD_EXP 23
9767: PPUSH
9768: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
9772: LD_EXP 26
9776: PPUSH
9777: LD_STRING DK-scout-8
9779: PPUSH
9780: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
9784: LD_EXP 23
9788: PPUSH
9789: LD_STRING DM-scout-9
9791: PPUSH
9792: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
9796: LD_INT 184
9798: PPUSH
9799: LD_INT 100
9801: PPUSH
9802: LD_INT 2
9804: PPUSH
9805: LD_INT 12
9807: NEG
9808: PPUSH
9809: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
9813: LD_INT 184
9815: PPUSH
9816: LD_INT 100
9818: PPUSH
9819: LD_INT 2
9821: PPUSH
9822: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
9826: LD_INT 184
9828: PPUSH
9829: LD_INT 100
9831: PPUSH
9832: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
9836: LD_EXP 30
9840: PPUSH
9841: LD_STRING DKs-scout-10
9843: PPUSH
9844: CALL_OW 88
// wait ( 0 0$1 ) ;
9848: LD_INT 35
9850: PPUSH
9851: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
9855: LD_INT 144
9857: PPUSH
9858: LD_INT 65
9860: PPUSH
9861: LD_INT 2
9863: PPUSH
9864: LD_INT 12
9866: NEG
9867: PPUSH
9868: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
9872: LD_INT 144
9874: PPUSH
9875: LD_INT 65
9877: PPUSH
9878: LD_INT 2
9880: PPUSH
9881: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
9885: LD_INT 144
9887: PPUSH
9888: LD_INT 65
9890: PPUSH
9891: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
9895: LD_EXP 30
9899: PPUSH
9900: LD_STRING DKs-scout-11
9902: PPUSH
9903: CALL_OW 88
// wait ( 0 0$1 ) ;
9907: LD_INT 35
9909: PPUSH
9910: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
9914: LD_EXP 30
9918: PPUSH
9919: CALL_OW 87
// if Mike and not Givi then
9923: LD_EXP 23
9927: PUSH
9928: LD_EXP 22
9932: NOT
9933: AND
9934: IFFALSE 9960
// begin Say ( Mike , DM-scout-a-1 ) ;
9936: LD_EXP 23
9940: PPUSH
9941: LD_STRING DM-scout-a-1
9943: PPUSH
9944: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
9948: LD_EXP 21
9952: PPUSH
9953: LD_STRING DH-scout-a-2
9955: PPUSH
9956: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
9960: LD_EXP 30
9964: PUSH
9965: LD_EXP 23
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: PPUSH
9974: LD_INT 2
9976: PPUSH
9977: CALL_OW 235
// InGameOff ;
9981: CALL_OW 9
// allowToPatrol := true ;
9985: LD_ADDR_EXP 12
9989: PUSH
9990: LD_INT 1
9992: ST_TO_ADDR
// wait ( 1 1$30 ) ;
9993: LD_INT 3150
9995: PPUSH
9996: CALL_OW 67
// InitHc ;
10000: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 ] [ Difficulty ] do
10004: LD_ADDR_VAR 0 1
10008: PUSH
10009: DOUBLE
10010: LD_INT 1
10012: DEC
10013: ST_TO_ADDR
10014: LD_INT 3
10016: PUSH
10017: LD_INT 3
10019: PUSH
10020: LD_INT 2
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: LIST
10027: PUSH
10028: LD_OWVAR 67
10032: ARRAY
10033: PUSH
10034: FOR_TO
10035: IFFALSE 10294
// begin uc_side := 2 ;
10037: LD_ADDR_OWVAR 20
10041: PUSH
10042: LD_INT 2
10044: ST_TO_ADDR
// uc_nation := 2 ;
10045: LD_ADDR_OWVAR 21
10049: PUSH
10050: LD_INT 2
10052: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 ] [ Difficulty ] ) ;
10053: LD_INT 0
10055: PPUSH
10056: LD_INT 1
10058: PUSH
10059: LD_INT 3
10061: PUSH
10062: LD_INT 1
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: LIST
10069: PUSH
10070: LD_VAR 0 1
10074: PUSH
10075: LD_INT 3
10077: MOD
10078: PUSH
10079: LD_INT 1
10081: PLUS
10082: ARRAY
10083: PPUSH
10084: LD_INT 3
10086: PUSH
10087: LD_INT 2
10089: PUSH
10090: LD_INT 2
10092: PUSH
10093: EMPTY
10094: LIST
10095: LIST
10096: LIST
10097: PUSH
10098: LD_OWVAR 67
10102: ARRAY
10103: PPUSH
10104: CALL_OW 380
// un := CreateHuman ;
10108: LD_ADDR_VAR 0 2
10112: PUSH
10113: CALL_OW 44
10117: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10118: LD_ADDR_EXP 32
10122: PUSH
10123: LD_EXP 32
10127: PUSH
10128: LD_VAR 0 2
10132: UNION
10133: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10134: LD_INT 2
10136: PPUSH
10137: LD_INT 2
10139: PPUSH
10140: LD_INT 13
10142: PPUSH
10143: LD_INT 2
10145: PUSH
10146: LD_INT 1
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: PUSH
10153: LD_VAR 0 1
10157: PUSH
10158: LD_INT 2
10160: MOD
10161: PUSH
10162: LD_INT 1
10164: PLUS
10165: ARRAY
10166: PPUSH
10167: LD_INT 1
10169: PPUSH
10170: LD_INT 27
10172: PUSH
10173: LD_INT 25
10175: PUSH
10176: LD_INT 27
10178: PUSH
10179: LD_INT 23
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: PUSH
10188: LD_OWVAR 67
10192: PUSH
10193: LD_INT 0
10195: PPUSH
10196: LD_INT 1
10198: PPUSH
10199: CALL_OW 12
10203: PLUS
10204: ARRAY
10205: PPUSH
10206: LD_INT 77
10208: PPUSH
10209: CALL 296 0 7
// veh := CreateVehicle ;
10213: LD_ADDR_VAR 0 3
10217: PUSH
10218: CALL_OW 45
10222: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10223: LD_VAR 0 3
10227: PPUSH
10228: LD_INT 2
10230: PPUSH
10231: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10235: LD_VAR 0 3
10239: PPUSH
10240: LD_INT 178
10242: PPUSH
10243: LD_INT 2
10245: PPUSH
10246: LD_INT 2
10248: PPUSH
10249: LD_INT 0
10251: PPUSH
10252: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10256: LD_VAR 0 2
10260: PPUSH
10261: LD_VAR 0 3
10265: PPUSH
10266: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10270: LD_VAR 0 2
10274: PPUSH
10275: LD_INT 183
10277: PPUSH
10278: LD_INT 11
10280: PPUSH
10281: CALL_OW 111
// wait ( 0 0$2 ) ;
10285: LD_INT 70
10287: PPUSH
10288: CALL_OW 67
// end ;
10292: GO 10034
10294: POP
10295: POP
// end ;
10296: PPOPN 3
10298: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10299: LD_EXP 4
10303: PUSH
10304: LD_EXP 31
10308: PPUSH
10309: CALL_OW 302
10313: AND
10314: IFFALSE 10363
10316: GO 10318
10318: DISABLE
// begin DialogueOn ;
10319: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10323: LD_EXP 31
10327: PPUSH
10328: LD_STRING DA-lab-1
10330: PPUSH
10331: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10335: LD_EXP 31
10339: PPUSH
10340: LD_STRING DA-lab-2
10342: PPUSH
10343: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10347: LD_EXP 21
10351: PPUSH
10352: LD_STRING DH-lab-3
10354: PPUSH
10355: CALL_OW 88
// DialogueOff ;
10359: CALL_OW 7
// end ;
10363: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10364: LD_INT 17
10366: PPUSH
10367: LD_INT 2
10369: PPUSH
10370: CALL_OW 321
10374: PUSH
10375: LD_INT 2
10377: EQUAL
10378: IFFALSE 10510
10380: GO 10382
10382: DISABLE
10383: LD_INT 0
10385: PPUSH
// begin DialogueOn ;
10386: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10390: LD_EXP 31
10394: PPUSH
10395: LD_STRING DA-Cam-1
10397: PPUSH
10398: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10402: LD_EXP 31
10406: PPUSH
10407: LD_STRING DA-Cam-2
10409: PPUSH
10410: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10414: LD_EXP 31
10418: PPUSH
10419: LD_STRING DA-Cam-3
10421: PPUSH
10422: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10426: LD_EXP 21
10430: PPUSH
10431: LD_STRING DH-Cam-4
10433: PPUSH
10434: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
10438: LD_EXP 26
10442: PPUSH
10443: LD_STRING DK-Cam-5
10445: PPUSH
10446: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
10450: LD_EXP 26
10454: PPUSH
10455: LD_STRING DK-Cam-6
10457: PPUSH
10458: CALL_OW 88
// DialogueOff ;
10462: CALL_OW 7
// Query ( Camera ) ;
10466: LD_STRING Camera
10468: PPUSH
10469: CALL_OW 97
// hiddenCameraAllowed := true ;
10473: LD_ADDR_EXP 5
10477: PUSH
10478: LD_INT 1
10480: ST_TO_ADDR
// for i in camAreas do
10481: LD_ADDR_VAR 0 1
10485: PUSH
10486: LD_EXP 8
10490: PUSH
10491: FOR_IN
10492: IFFALSE 10508
// SetAreaMapShow ( i , 1 ) ;
10494: LD_VAR 0 1
10498: PPUSH
10499: LD_INT 1
10501: PPUSH
10502: CALL_OW 424
10506: GO 10491
10508: POP
10509: POP
// end ;
10510: PPOPN 1
10512: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
10513: LD_EXP 8
10517: NOT
10518: PUSH
10519: LD_EXP 5
10523: AND
10524: IFFALSE 10615
10526: GO 10528
10528: DISABLE
10529: LD_INT 0
10531: PPUSH
// begin stop_talking := true ;
10532: LD_ADDR_OWVAR 56
10536: PUSH
10537: LD_INT 1
10539: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
10540: LD_ADDR_VAR 0 1
10544: PUSH
10545: LD_INT 22
10547: PUSH
10548: LD_INT 2
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PUSH
10555: LD_INT 21
10557: PUSH
10558: LD_INT 1
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: PUSH
10565: LD_INT 23
10567: PUSH
10568: LD_INT 2
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: LIST
10579: PPUSH
10580: CALL_OW 69
10584: PUSH
10585: FOR_IN
10586: IFFALSE 10605
// AddExperience ( i , 2 , 450 ) ;
10588: LD_VAR 0 1
10592: PPUSH
10593: LD_INT 2
10595: PPUSH
10596: LD_INT 450
10598: PPUSH
10599: CALL_OW 492
10603: GO 10585
10605: POP
10606: POP
// stop_talking := false ;
10607: LD_ADDR_OWVAR 56
10611: PUSH
10612: LD_INT 0
10614: ST_TO_ADDR
// end ;
10615: PPOPN 1
10617: END
// every 0 0$2 trigger russianAlert and not allowHeikeAttack do
10618: LD_EXP 9
10622: PUSH
10623: LD_EXP 11
10627: NOT
10628: AND
10629: IFFALSE 10659
10631: GO 10633
10633: DISABLE
// begin if spottedByPatrol then
10634: LD_EXP 7
10638: IFFALSE 10652
// Say ( Heike , DH-Spot-f-3 ) ;
10640: LD_EXP 21
10644: PPUSH
10645: LD_STRING DH-Spot-f-3
10647: PPUSH
10648: CALL_OW 88
// YouLost ( Spotted ) ;
10652: LD_STRING Spotted
10654: PPUSH
10655: CALL_OW 104
// end ;
10659: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_see , 2 ] ] ) diff russianPatrol do
10660: LD_INT 2
10662: PUSH
10663: LD_INT 22
10665: PUSH
10666: LD_INT 3
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: PUSH
10673: LD_INT 22
10675: PUSH
10676: LD_INT 6
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: LIST
10687: PUSH
10688: LD_INT 101
10690: PUSH
10691: LD_INT 2
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: PPUSH
10702: CALL_OW 69
10706: PUSH
10707: LD_EXP 42
10711: DIFF
10712: IFFALSE 10725
10714: GO 10716
10716: DISABLE
// russianAlert := true ;
10717: LD_ADDR_EXP 9
10721: PUSH
10722: LD_INT 1
10724: ST_TO_ADDR
10725: END
// every 0 0$1 trigger russianAlert do var i , tmp , towers , noncombat ;
10726: LD_EXP 9
10730: IFFALSE 11027
10732: GO 10734
10734: DISABLE
10735: LD_INT 0
10737: PPUSH
10738: PPUSH
10739: PPUSH
10740: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_inside ] ] ) ;
10741: LD_ADDR_VAR 0 2
10745: PUSH
10746: LD_EXP 39
10750: PPUSH
10751: LD_INT 25
10753: PUSH
10754: LD_INT 1
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PUSH
10761: LD_INT 54
10763: PUSH
10764: EMPTY
10765: LIST
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PPUSH
10771: CALL_OW 72
10775: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
10776: LD_ADDR_VAR 0 3
10780: PUSH
10781: LD_INT 22
10783: PUSH
10784: LD_INT 6
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: LD_INT 30
10793: PUSH
10794: LD_INT 32
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: PPUSH
10805: CALL_OW 69
10809: ST_TO_ADDR
// for i := 1 to tmp do
10810: LD_ADDR_VAR 0 1
10814: PUSH
10815: DOUBLE
10816: LD_INT 1
10818: DEC
10819: ST_TO_ADDR
10820: LD_VAR 0 2
10824: PUSH
10825: FOR_TO
10826: IFFALSE 10871
// begin ComExitBuilding ( tmp [ i ] ) ;
10828: LD_VAR 0 2
10832: PUSH
10833: LD_VAR 0 1
10837: ARRAY
10838: PPUSH
10839: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , towers [ i ] ) ;
10843: LD_VAR 0 2
10847: PUSH
10848: LD_VAR 0 1
10852: ARRAY
10853: PPUSH
10854: LD_VAR 0 3
10858: PUSH
10859: LD_VAR 0 1
10863: ARRAY
10864: PPUSH
10865: CALL_OW 180
// end ;
10869: GO 10825
10871: POP
10872: POP
// noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
10873: LD_ADDR_VAR 0 4
10877: PUSH
10878: LD_EXP 37
10882: PUSH
10883: LD_EXP 39
10887: PUSH
10888: LD_EXP 40
10892: UNION
10893: PPUSH
10894: LD_INT 3
10896: PUSH
10897: LD_INT 25
10899: PUSH
10900: LD_INT 1
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: PPUSH
10911: CALL_OW 72
10915: UNION
10916: ST_TO_ADDR
// for i in noncombat do
10917: LD_ADDR_VAR 0 1
10921: PUSH
10922: LD_VAR 0 4
10926: PUSH
10927: FOR_IN
10928: IFFALSE 10964
// begin if IsInUnit ( i ) then
10930: LD_VAR 0 1
10934: PPUSH
10935: CALL_OW 310
10939: IFFALSE 10950
// ComExitBuilding ( i ) ;
10941: LD_VAR 0 1
10945: PPUSH
10946: CALL_OW 122
// AddComMoveToArea ( i , westEscapeArea ) ;
10950: LD_VAR 0 1
10954: PPUSH
10955: LD_INT 16
10957: PPUSH
10958: CALL_OW 173
// end ;
10962: GO 10927
10964: POP
10965: POP
// if not allowHeikeAttack then
10966: LD_EXP 11
10970: NOT
10971: IFFALSE 10975
// exit ;
10973: GO 11027
// SayRadio ( Kurin , D9a-Kur-1 ) ;
10975: LD_EXP 35
10979: PPUSH
10980: LD_STRING D9a-Kur-1
10982: PPUSH
10983: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
10987: LD_EXP 38
10991: PPUSH
10992: LD_STRING D9a-Bur-1
10994: PPUSH
10995: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
10999: LD_EXP 35
11003: PPUSH
11004: LD_STRING D9a-Kur-2
11006: PPUSH
11007: CALL_OW 94
// omicronFall := true ;
11011: LD_ADDR_EXP 13
11015: PUSH
11016: LD_INT 1
11018: ST_TO_ADDR
// retreatFromOmicron := true ;
11019: LD_ADDR_EXP 19
11023: PUSH
11024: LD_INT 1
11026: ST_TO_ADDR
// end ;
11027: PPOPN 4
11029: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11030: LD_INT 16
11032: PPUSH
11033: LD_INT 3
11035: PUSH
11036: LD_INT 22
11038: PUSH
11039: LD_INT 2
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PUSH
11050: LD_INT 23
11052: PUSH
11053: LD_INT 3
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PPUSH
11064: CALL_OW 70
11068: IFFALSE 11151
11070: GO 11072
11072: DISABLE
11073: LD_INT 0
11075: PPUSH
// begin enable ;
11076: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11077: LD_ADDR_VAR 0 1
11081: PUSH
11082: LD_INT 16
11084: PPUSH
11085: LD_INT 3
11087: PUSH
11088: LD_INT 22
11090: PUSH
11091: LD_INT 2
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PUSH
11102: LD_INT 23
11104: PUSH
11105: LD_INT 3
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PPUSH
11116: CALL_OW 70
11120: PUSH
11121: FOR_IN
11122: IFFALSE 11149
// begin escapeCounter := escapeCounter + 1 ;
11124: LD_ADDR_EXP 18
11128: PUSH
11129: LD_EXP 18
11133: PUSH
11134: LD_INT 1
11136: PLUS
11137: ST_TO_ADDR
// RemoveUnit ( i ) ;
11138: LD_VAR 0 1
11142: PPUSH
11143: CALL_OW 64
// end ;
11147: GO 11121
11149: POP
11150: POP
// end ;
11151: PPOPN 1
11153: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11154: LD_OWVAR 1
11158: PUSH
11159: LD_INT 13650
11161: PUSH
11162: LD_INT 0
11164: PPUSH
11165: LD_INT 3150
11167: PPUSH
11168: CALL_OW 12
11172: PLUS
11173: GREATEREQUAL
11174: IFFALSE 11183
11176: GO 11178
11178: DISABLE
// SmallAmericanReinforcements ;
11179: CALL 6821 0 0
11183: END
// every 0 0$1 trigger tick >= 9 9$15 do
11184: LD_OWVAR 1
11188: PUSH
11189: LD_INT 19425
11191: GREATEREQUAL
11192: IFFALSE 11257
11194: GO 11196
11196: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11197: LD_EXP 43
11201: PPUSH
11202: LD_INT 21
11204: PUSH
11205: LD_INT 2
11207: PUSH
11208: EMPTY
11209: LIST
11210: LIST
11211: PPUSH
11212: CALL_OW 72
11216: PPUSH
11217: LD_INT 62
11219: PPUSH
11220: LD_INT 22
11222: PPUSH
11223: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11227: LD_EXP 44
11231: PPUSH
11232: LD_INT 69
11234: PPUSH
11235: LD_INT 27
11237: PPUSH
11238: CALL_OW 111
// wait ( 1 1$00 ) ;
11242: LD_INT 2100
11244: PPUSH
11245: CALL_OW 67
// startAttackOnOmicron := true ;
11249: LD_ADDR_EXP 6
11253: PUSH
11254: LD_INT 1
11256: ST_TO_ADDR
// end ;
11257: END
// every 0 0$2 trigger tick >= 20 20$00 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11258: LD_OWVAR 1
11262: PUSH
11263: LD_INT 42000
11265: GREATEREQUAL
11266: IFFALSE 13125
11268: GO 11270
11270: DISABLE
11271: LD_INT 0
11273: PPUSH
11274: PPUSH
11275: PPUSH
11276: PPUSH
11277: PPUSH
11278: PPUSH
11279: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11280: LD_INT 5
11282: PPUSH
11283: LD_INT 2
11285: PPUSH
11286: CALL_OW 343
// PrepareOmarForces ;
11290: CALL 2270 0 0
// wait ( 0 0$03 ) ;
11294: LD_INT 105
11296: PPUSH
11297: CALL_OW 67
// allowHeikeAttack := true ;
11301: LD_ADDR_EXP 11
11305: PUSH
11306: LD_INT 1
11308: ST_TO_ADDR
// activeGrishkoAI := false ;
11309: LD_ADDR_EXP 10
11313: PUSH
11314: LD_INT 0
11316: ST_TO_ADDR
// CenterOnUnits ( Omar ) ;
11317: LD_EXP 29
11321: PPUSH
11322: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
11326: LD_ADDR_VAR 0 1
11330: PUSH
11331: LD_INT 22
11333: PUSH
11334: LD_INT 2
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PUSH
11341: LD_INT 21
11343: PUSH
11344: LD_INT 1
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: PPUSH
11355: CALL_OW 69
11359: PUSH
11360: FOR_IN
11361: IFFALSE 11385
// if HasTask ( i ) then
11363: LD_VAR 0 1
11367: PPUSH
11368: CALL_OW 314
11372: IFFALSE 11383
// ComHold ( i ) ;
11374: LD_VAR 0 1
11378: PPUSH
11379: CALL_OW 140
11383: GO 11360
11385: POP
11386: POP
// DialogueOn ;
11387: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
11391: LD_EXP 29
11395: PPUSH
11396: LD_STRING DO-assault-1
11398: PPUSH
11399: CALL_OW 94
// DialogueOff ;
11403: CALL_OW 7
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
11407: LD_ADDR_VAR 0 1
11411: PUSH
11412: LD_EXP 41
11416: PPUSH
11417: LD_INT 3
11419: PUSH
11420: LD_INT 54
11422: PUSH
11423: EMPTY
11424: LIST
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: PPUSH
11430: CALL_OW 72
11434: PUSH
11435: FOR_IN
11436: IFFALSE 11455
// ComMoveXY ( i , 226 , 114 ) ;
11438: LD_VAR 0 1
11442: PPUSH
11443: LD_INT 226
11445: PPUSH
11446: LD_INT 114
11448: PPUSH
11449: CALL_OW 111
11453: GO 11435
11455: POP
11456: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
11457: LD_EXP 36
11461: PPUSH
11462: LD_INT 22
11464: PUSH
11465: LD_INT 6
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PUSH
11472: LD_INT 30
11474: PUSH
11475: LD_INT 4
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: PPUSH
11486: CALL_OW 69
11490: PPUSH
11491: LD_EXP 36
11495: PPUSH
11496: CALL_OW 74
11500: PPUSH
11501: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
11505: LD_STRING Attack
11507: PPUSH
11508: CALL_OW 337
// music_class := music_combat ;
11512: LD_ADDR_OWVAR 72
11516: PUSH
11517: LD_INT 1
11519: ST_TO_ADDR
// music_nat := 4 ;
11520: LD_ADDR_OWVAR 71
11524: PUSH
11525: LD_INT 4
11527: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
11528: LD_INT 5
11530: PPUSH
11531: LD_EXP 36
11535: PPUSH
11536: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
11540: LD_INT 6
11542: PPUSH
11543: LD_EXP 33
11547: PPUSH
11548: LD_INT 25
11550: PUSH
11551: LD_INT 1
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: PPUSH
11558: CALL_OW 72
11562: PUSH
11563: LD_INT 4
11565: ARRAY
11566: PPUSH
11567: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
11571: LD_ADDR_VAR 0 1
11575: PUSH
11576: LD_EXP 33
11580: PPUSH
11581: LD_INT 3
11583: PUSH
11584: LD_INT 25
11586: PUSH
11587: LD_INT 4
11589: PUSH
11590: EMPTY
11591: LIST
11592: LIST
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: PPUSH
11598: CALL_OW 72
11602: PUSH
11603: FOR_IN
11604: IFFALSE 11623
// ComAgressiveMove ( i , 221 , 110 ) ;
11606: LD_VAR 0 1
11610: PPUSH
11611: LD_INT 221
11613: PPUSH
11614: LD_INT 110
11616: PPUSH
11617: CALL_OW 114
11621: GO 11603
11623: POP
11624: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
11625: LD_EXP 33
11629: PPUSH
11630: LD_INT 25
11632: PUSH
11633: LD_INT 4
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PPUSH
11640: CALL_OW 72
11644: PPUSH
11645: LD_INT 214
11647: PPUSH
11648: LD_INT 124
11650: PPUSH
11651: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
11655: LD_EXP 33
11659: PPUSH
11660: LD_INT 25
11662: PUSH
11663: LD_INT 1
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: PPUSH
11670: CALL_OW 72
11674: PUSH
11675: LD_INT 4
11677: ARRAY
11678: PPUSH
11679: LD_INT 214
11681: PPUSH
11682: LD_INT 114
11684: PPUSH
11685: LD_INT 0
11687: PPUSH
11688: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
11692: LD_EXP 36
11696: PPUSH
11697: LD_STRING D9-Gri-1
11699: PPUSH
11700: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
11704: LD_EXP 35
11708: PPUSH
11709: LD_STRING D9-Kur-1
11711: PPUSH
11712: CALL_OW 94
// wait ( 0 0$1 ) ;
11716: LD_INT 35
11718: PPUSH
11719: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
11723: LD_EXP 29
11727: PPUSH
11728: LD_INT 233
11730: PPUSH
11731: LD_INT 130
11733: PPUSH
11734: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
11738: LD_EXP 36
11742: PPUSH
11743: LD_STRING D9-Gri-2
11745: PPUSH
11746: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
11750: LD_EXP 35
11754: PPUSH
11755: LD_STRING D9-Kur-2
11757: PPUSH
11758: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
11762: LD_EXP 36
11766: PPUSH
11767: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
11771: LD_EXP 36
11775: PPUSH
11776: LD_INT 211
11778: PPUSH
11779: LD_INT 104
11781: PPUSH
11782: CALL_OW 171
// AddComHold ( Grishko ) ;
11786: LD_EXP 36
11790: PPUSH
11791: CALL_OW 200
// repeat wait ( 3 ) ;
11795: LD_INT 3
11797: PPUSH
11798: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
11802: LD_EXP 36
11806: PPUSH
11807: CALL_OW 310
11811: NOT
11812: IFFALSE 11795
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
11814: LD_EXP 33
11818: PPUSH
11819: LD_INT 34
11821: PUSH
11822: LD_INT 26
11824: PUSH
11825: EMPTY
11826: LIST
11827: LIST
11828: PPUSH
11829: CALL_OW 72
11833: PPUSH
11834: LD_EXP 36
11838: PPUSH
11839: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
11843: LD_EXP 33
11847: PPUSH
11848: LD_INT 34
11850: PUSH
11851: LD_INT 26
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PPUSH
11858: CALL_OW 72
11862: PPUSH
11863: LD_INT 215
11865: PPUSH
11866: LD_INT 106
11868: PPUSH
11869: CALL_OW 174
// repeat wait ( 3 ) ;
11873: LD_INT 3
11875: PPUSH
11876: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
11880: LD_EXP 36
11884: PPUSH
11885: CALL_OW 256
11889: PUSH
11890: LD_INT 1000
11892: LESS
11893: IFFALSE 11873
// NormalAttack ( 5 , Grishko ) ;
11895: LD_INT 5
11897: PPUSH
11898: LD_EXP 36
11902: PPUSH
11903: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
11907: LD_INT 6
11909: PPUSH
11910: LD_EXP 33
11914: PPUSH
11915: LD_INT 25
11917: PUSH
11918: LD_INT 1
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: PPUSH
11925: CALL_OW 72
11929: PUSH
11930: LD_INT 4
11932: ARRAY
11933: PPUSH
11934: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
11938: LD_EXP 36
11942: PPUSH
11943: LD_STRING D9-Gri-3
11945: PPUSH
11946: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
11950: LD_EXP 35
11954: PPUSH
11955: LD_STRING D9-Kur-3
11957: PPUSH
11958: CALL_OW 94
// music_class := music_auto ;
11962: LD_ADDR_OWVAR 72
11966: PUSH
11967: LD_INT 0
11969: ST_TO_ADDR
// music_nat := music_auto ;
11970: LD_ADDR_OWVAR 71
11974: PUSH
11975: LD_INT 0
11977: ST_TO_ADDR
// for i in omarSquad do
11978: LD_ADDR_VAR 0 1
11982: PUSH
11983: LD_EXP 33
11987: PUSH
11988: FOR_IN
11989: IFFALSE 12131
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
11991: LD_VAR 0 1
11995: PPUSH
11996: CALL_OW 247
12000: PUSH
12001: LD_INT 2
12003: EQUAL
12004: PUSH
12005: LD_VAR 0 1
12009: PPUSH
12010: CALL_OW 256
12014: PUSH
12015: LD_INT 1000
12017: LESS
12018: AND
12019: IFFALSE 12085
// begin driver := IsDrivenBy ( i ) ;
12021: LD_ADDR_VAR 0 2
12025: PUSH
12026: LD_VAR 0 1
12030: PPUSH
12031: CALL_OW 311
12035: ST_TO_ADDR
// veh := i ;
12036: LD_ADDR_VAR 0 3
12040: PUSH
12041: LD_VAR 0 1
12045: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12046: LD_VAR 0 2
12050: PPUSH
12051: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12055: LD_VAR 0 2
12059: PPUSH
12060: LD_VAR 0 3
12064: PPUSH
12065: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12069: LD_VAR 0 2
12073: PPUSH
12074: LD_VAR 0 3
12078: PPUSH
12079: CALL_OW 180
// end else
12083: GO 12129
// if GetLives ( i ) < 500 then
12085: LD_VAR 0 1
12089: PPUSH
12090: CALL_OW 256
12094: PUSH
12095: LD_INT 500
12097: LESS
12098: IFFALSE 12129
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12100: LD_EXP 33
12104: PPUSH
12105: LD_INT 25
12107: PUSH
12108: LD_INT 4
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: PPUSH
12115: CALL_OW 72
12119: PPUSH
12120: LD_VAR 0 1
12124: PPUSH
12125: CALL_OW 188
// end ; end ;
12129: GO 11988
12131: POP
12132: POP
// repeat wait ( 0 0$1 ) ;
12133: LD_INT 35
12135: PPUSH
12136: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12140: LD_EXP 33
12144: PPUSH
12145: LD_INT 3
12147: PUSH
12148: LD_INT 24
12150: PUSH
12151: LD_INT 1000
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: PUSH
12162: LD_INT 21
12164: PUSH
12165: LD_INT 2
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: PPUSH
12176: CALL_OW 72
12180: NOT
12181: PUSH
12182: LD_EXP 33
12186: PPUSH
12187: LD_INT 3
12189: PUSH
12190: LD_INT 24
12192: PUSH
12193: LD_INT 250
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: PPUSH
12204: CALL_OW 72
12208: NOT
12209: AND
12210: IFFALSE 12133
// wait ( 0 0$2 ) ;
12212: LD_INT 70
12214: PPUSH
12215: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12219: LD_ADDR_VAR 0 5
12223: PUSH
12224: LD_EXP 33
12228: PPUSH
12229: LD_INT 58
12231: PUSH
12232: EMPTY
12233: LIST
12234: PUSH
12235: LD_INT 21
12237: PUSH
12238: LD_INT 2
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PPUSH
12249: CALL_OW 72
12253: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
12254: LD_ADDR_VAR 0 6
12258: PUSH
12259: LD_EXP 33
12263: PPUSH
12264: LD_INT 25
12266: PUSH
12267: LD_INT 3
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: PUSH
12274: LD_INT 3
12276: PUSH
12277: LD_INT 55
12279: PUSH
12280: EMPTY
12281: LIST
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PPUSH
12291: CALL_OW 72
12295: ST_TO_ADDR
// for i := 1 to tmp do
12296: LD_ADDR_VAR 0 1
12300: PUSH
12301: DOUBLE
12302: LD_INT 1
12304: DEC
12305: ST_TO_ADDR
12306: LD_VAR 0 5
12310: PUSH
12311: FOR_TO
12312: IFFALSE 12342
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
12314: LD_VAR 0 6
12318: PUSH
12319: LD_VAR 0 1
12323: ARRAY
12324: PPUSH
12325: LD_VAR 0 5
12329: PUSH
12330: LD_VAR 0 1
12334: ARRAY
12335: PPUSH
12336: CALL_OW 120
12340: GO 12311
12342: POP
12343: POP
// wait ( 0 0$5 ) ;
12344: LD_INT 175
12346: PPUSH
12347: CALL_OW 67
// ComMoveXY ( omarSquad , 199 , 141 ) ;
12351: LD_EXP 33
12355: PPUSH
12356: LD_INT 199
12358: PPUSH
12359: LD_INT 141
12361: PPUSH
12362: CALL_OW 111
// ComMoveXY ( Omar , 190 , 143 ) ;
12366: LD_EXP 29
12370: PPUSH
12371: LD_INT 190
12373: PPUSH
12374: LD_INT 143
12376: PPUSH
12377: CALL_OW 111
// AddComHold ( Omar ) ;
12381: LD_EXP 29
12385: PPUSH
12386: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
12390: LD_EXP 33
12394: PPUSH
12395: LD_INT 2
12397: PUSH
12398: LD_INT 25
12400: PUSH
12401: LD_INT 1
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: PUSH
12408: LD_INT 25
12410: PUSH
12411: LD_INT 4
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: PUSH
12418: EMPTY
12419: LIST
12420: LIST
12421: LIST
12422: PPUSH
12423: CALL_OW 72
12427: PPUSH
12428: LD_INT 161
12430: PPUSH
12431: LD_INT 130
12433: PPUSH
12434: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
12438: LD_EXP 33
12442: PPUSH
12443: LD_INT 25
12445: PUSH
12446: LD_INT 1
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: PPUSH
12453: CALL_OW 72
12457: PPUSH
12458: LD_INT 163
12460: PPUSH
12461: LD_INT 122
12463: PPUSH
12464: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
12468: LD_EXP 33
12472: PPUSH
12473: LD_INT 25
12475: PUSH
12476: LD_INT 1
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: PPUSH
12483: CALL_OW 72
12487: PUSH
12488: LD_INT 4
12490: ARRAY
12491: PPUSH
12492: LD_INT 165
12494: PPUSH
12495: LD_INT 118
12497: PPUSH
12498: LD_INT 0
12500: PPUSH
12501: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
12505: LD_EXP 33
12509: PPUSH
12510: LD_INT 25
12512: PUSH
12513: LD_INT 1
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: PPUSH
12520: CALL_OW 72
12524: PUSH
12525: LD_INT 4
12527: ARRAY
12528: PPUSH
12529: LD_INT 159
12531: PPUSH
12532: LD_INT 116
12534: PPUSH
12535: LD_INT 0
12537: PPUSH
12538: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
12542: LD_EXP 33
12546: PPUSH
12547: LD_INT 21
12549: PUSH
12550: LD_INT 2
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: PPUSH
12557: CALL_OW 72
12561: PPUSH
12562: LD_INT 169
12564: PPUSH
12565: LD_INT 114
12567: PPUSH
12568: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
12572: LD_INT 35
12574: PPUSH
12575: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
12579: LD_ADDR_VAR 0 5
12583: PUSH
12584: LD_EXP 33
12588: PPUSH
12589: LD_INT 25
12591: PUSH
12592: LD_INT 1
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PPUSH
12599: CALL_OW 72
12603: ST_TO_ADDR
// for i in tmp do
12604: LD_ADDR_VAR 0 1
12608: PUSH
12609: LD_VAR 0 5
12613: PUSH
12614: FOR_IN
12615: IFFALSE 12712
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
12617: LD_VAR 0 1
12621: PPUSH
12622: CALL_OW 256
12626: PUSH
12627: LD_INT 600
12629: LESS
12630: PUSH
12631: LD_VAR 0 1
12635: PPUSH
12636: LD_INT 161
12638: PPUSH
12639: LD_INT 130
12641: PPUSH
12642: CALL_OW 297
12646: PUSH
12647: LD_INT 6
12649: GREATER
12650: AND
12651: IFFALSE 12668
// ComMoveXY ( i , 161 , 130 ) ;
12653: LD_VAR 0 1
12657: PPUSH
12658: LD_INT 161
12660: PPUSH
12661: LD_INT 130
12663: PPUSH
12664: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
12668: LD_VAR 0 1
12672: PPUSH
12673: CALL_OW 256
12677: PUSH
12678: LD_INT 1000
12680: EQUAL
12681: PUSH
12682: LD_VAR 0 1
12686: PPUSH
12687: CALL_OW 314
12691: NOT
12692: AND
12693: IFFALSE 12710
// ComAgressiveMove ( i , 160 , 109 ) ;
12695: LD_VAR 0 1
12699: PPUSH
12700: LD_INT 160
12702: PPUSH
12703: LD_INT 109
12705: PPUSH
12706: CALL_OW 114
// end ;
12710: GO 12614
12712: POP
12713: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
12714: LD_ADDR_VAR 0 5
12718: PUSH
12719: LD_EXP 33
12723: PPUSH
12724: LD_INT 21
12726: PUSH
12727: LD_INT 2
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: PPUSH
12734: CALL_OW 72
12738: ST_TO_ADDR
// for i in tmp do
12739: LD_ADDR_VAR 0 1
12743: PUSH
12744: LD_VAR 0 5
12748: PUSH
12749: FOR_IN
12750: IFFALSE 13016
// begin tmp2 := IsDrivenBy ( i ) ;
12752: LD_ADDR_VAR 0 6
12756: PUSH
12757: LD_VAR 0 1
12761: PPUSH
12762: CALL_OW 311
12766: ST_TO_ADDR
// if not tmp2 then
12767: LD_VAR 0 6
12771: NOT
12772: IFFALSE 12776
// continue ;
12774: GO 12749
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
12776: LD_VAR 0 1
12780: PPUSH
12781: CALL_OW 256
12785: PUSH
12786: LD_INT 600
12788: GREATEREQUAL
12789: PUSH
12790: LD_VAR 0 1
12794: PPUSH
12795: CALL_OW 110
12799: PUSH
12800: LD_INT 1
12802: EQUAL
12803: AND
12804: IFFALSE 12818
// SetTag ( i , 0 ) ;
12806: LD_VAR 0 1
12810: PPUSH
12811: LD_INT 0
12813: PPUSH
12814: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
12818: LD_VAR 0 1
12822: PPUSH
12823: CALL_OW 256
12827: PUSH
12828: LD_INT 600
12830: GREATEREQUAL
12831: PUSH
12832: LD_VAR 0 1
12836: PPUSH
12837: CALL_OW 110
12841: NOT
12842: AND
12843: IFFALSE 12869
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
12845: LD_VAR 0 1
12849: PPUSH
12850: LD_VAR 0 7
12854: PPUSH
12855: LD_VAR 0 1
12859: PPUSH
12860: CALL_OW 74
12864: PPUSH
12865: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
12869: LD_VAR 0 1
12873: PPUSH
12874: CALL_OW 256
12878: PUSH
12879: LD_INT 600
12881: LESS
12882: PUSH
12883: LD_VAR 0 1
12887: PPUSH
12888: CALL_OW 110
12892: NOT
12893: AND
12894: IFFALSE 12923
// begin SetTag ( i , 1 ) ;
12896: LD_VAR 0 1
12900: PPUSH
12901: LD_INT 1
12903: PPUSH
12904: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
12908: LD_VAR 0 1
12912: PPUSH
12913: LD_INT 202
12915: PPUSH
12916: LD_INT 150
12918: PPUSH
12919: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
12923: LD_VAR 0 1
12927: PPUSH
12928: CALL_OW 110
12932: PUSH
12933: LD_INT 1
12935: EQUAL
12936: PUSH
12937: LD_VAR 0 1
12941: PPUSH
12942: LD_INT 202
12944: PPUSH
12945: LD_INT 150
12947: PPUSH
12948: CALL_OW 297
12952: PUSH
12953: LD_INT 6
12955: LESS
12956: AND
12957: PUSH
12958: LD_VAR 0 6
12962: AND
12963: IFFALSE 13014
// begin ComExitVehicle ( tmp2 ) ;
12965: LD_VAR 0 6
12969: PPUSH
12970: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
12974: LD_VAR 0 6
12978: PPUSH
12979: LD_VAR 0 1
12983: PPUSH
12984: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
12988: LD_VAR 0 6
12992: PPUSH
12993: LD_INT 700
12995: PPUSH
12996: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13000: LD_VAR 0 6
13004: PPUSH
13005: LD_VAR 0 1
13009: PPUSH
13010: CALL_OW 180
// end ; end ;
13014: GO 12749
13016: POP
13017: POP
// until kirovDestroyed ;
13018: LD_EXP 15
13022: IFFALSE 12572
// repeat wait ( 0 0$1 ) ;
13024: LD_INT 35
13026: PPUSH
13027: CALL_OW 67
// for i in omarSquad union Omar do
13031: LD_ADDR_VAR 0 1
13035: PUSH
13036: LD_EXP 33
13040: PUSH
13041: LD_EXP 29
13045: UNION
13046: PUSH
13047: FOR_IN
13048: IFFALSE 13092
// if IsInArea ( i , southRoadArea ) then
13050: LD_VAR 0 1
13054: PPUSH
13055: LD_INT 15
13057: PPUSH
13058: CALL_OW 308
13062: IFFALSE 13075
// RemoveUnit ( i ) else
13064: LD_VAR 0 1
13068: PPUSH
13069: CALL_OW 64
13073: GO 13090
// ComMoveXY ( i , 208 , 162 ) ;
13075: LD_VAR 0 1
13079: PPUSH
13080: LD_INT 208
13082: PPUSH
13083: LD_INT 162
13085: PPUSH
13086: CALL_OW 111
13090: GO 13047
13092: POP
13093: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
13094: LD_INT 22
13096: PUSH
13097: LD_INT 5
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PUSH
13104: LD_INT 21
13106: PUSH
13107: LD_INT 1
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: PPUSH
13118: CALL_OW 69
13122: NOT
13123: IFFALSE 13024
// end ;
13125: PPOPN 7
13127: END
// every 0 0$1 trigger IsDead ( kirov ) do
13128: LD_INT 71
13130: PPUSH
13131: CALL_OW 301
13135: IFFALSE 13152
13137: GO 13139
13139: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
13140: LD_EXP 21
13144: PPUSH
13145: LD_STRING DH-1-Kirov
13147: PPUSH
13148: CALL_OW 88
13152: END
// every 0 0$1 trigger See ( 2 , beria ) do
13153: LD_INT 2
13155: PPUSH
13156: LD_INT 106
13158: PPUSH
13159: CALL_OW 292
13163: IFFALSE 13180
13165: GO 13167
13167: DISABLE
// Say ( Heike , DH-1-Beria ) ;
13168: LD_EXP 21
13172: PPUSH
13173: LD_STRING DH-1-Beria
13175: PPUSH
13176: CALL_OW 88
13180: END
// every 0 0$1 trigger See ( 2 , kagan ) do
13181: LD_INT 2
13183: PPUSH
13184: LD_INT 112
13186: PPUSH
13187: CALL_OW 292
13191: IFFALSE 13208
13193: GO 13195
13195: DISABLE
// Say ( Heike , DH-1-Kagan ) ;
13196: LD_EXP 21
13200: PPUSH
13201: LD_STRING DH-1-Kagan
13203: PPUSH
13204: CALL_OW 88
13208: END
// every 0 0$3 trigger See ( 2 , ruLab ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) and not InBattle ( 2 ) do var i , tmp , q ;
13209: LD_INT 2
13211: PPUSH
13212: LD_EXP 45
13216: PPUSH
13217: CALL_OW 292
13221: PUSH
13222: LD_EXP 45
13226: PPUSH
13227: CALL_OW 302
13231: AND
13232: PUSH
13233: LD_EXP 21
13237: PPUSH
13238: CALL_OW 302
13242: AND
13243: PUSH
13244: LD_EXP 31
13248: PPUSH
13249: CALL_OW 302
13253: AND
13254: PUSH
13255: LD_INT 2
13257: PPUSH
13258: CALL_OW 463
13262: NOT
13263: AND
13264: IFFALSE 13654
13266: GO 13268
13268: DISABLE
13269: LD_INT 0
13271: PPUSH
13272: PPUSH
13273: PPUSH
// begin DialogueOn ;
13274: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
13278: LD_INT 111
13280: PPUSH
13281: LD_INT 90
13283: PPUSH
13284: LD_INT 2
13286: PPUSH
13287: LD_INT 6
13289: NEG
13290: PPUSH
13291: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
13295: LD_INT 111
13297: PPUSH
13298: LD_INT 90
13300: PPUSH
13301: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
13305: LD_EXP 31
13309: PPUSH
13310: LD_STRING DA-Cap-1
13312: PPUSH
13313: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
13317: LD_EXP 21
13321: PPUSH
13322: LD_STRING DH-Cap-2
13324: PPUSH
13325: CALL_OW 88
// DialogueOff ;
13329: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
13333: LD_INT 35
13335: PPUSH
13336: CALL_OW 67
// until beriaDestroyed and IsOk ( ruLab ) ;
13340: LD_EXP 16
13344: PUSH
13345: LD_EXP 45
13349: PPUSH
13350: CALL_OW 302
13354: AND
13355: IFFALSE 13333
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
13357: LD_ADDR_VAR 0 2
13361: PUSH
13362: LD_EXP 32
13366: PUSH
13367: LD_EXP 24
13371: PUSH
13372: LD_EXP 25
13376: PUSH
13377: LD_EXP 27
13381: PUSH
13382: LD_EXP 26
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: UNION
13393: ST_TO_ADDR
// if tmp < 2 then
13394: LD_VAR 0 2
13398: PUSH
13399: LD_INT 2
13401: LESS
13402: IFFALSE 13414
// q := 2 else
13404: LD_ADDR_VAR 0 3
13408: PUSH
13409: LD_INT 2
13411: ST_TO_ADDR
13412: GO 13427
// q := Query ( LabCap ) ;
13414: LD_ADDR_VAR 0 3
13418: PUSH
13419: LD_STRING LabCap
13421: PPUSH
13422: CALL_OW 97
13426: ST_TO_ADDR
// case q of 1 :
13427: LD_VAR 0 3
13431: PUSH
13432: LD_INT 1
13434: DOUBLE
13435: EQUAL
13436: IFTRUE 13440
13438: GO 13618
13440: POP
// begin DoNotAttack ( 2 , ruLab ) ;
13441: LD_INT 2
13443: PPUSH
13444: LD_EXP 45
13448: PPUSH
13449: CALL_OW 471
// labCaptured := true ;
13453: LD_ADDR_EXP 20
13457: PUSH
13458: LD_INT 1
13460: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
13461: LD_EXP 21
13465: PPUSH
13466: LD_STRING DH-Cap-a-1
13468: PPUSH
13469: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
13473: LD_EXP 31
13477: PPUSH
13478: LD_STRING DA-Cap-a-2
13480: PPUSH
13481: CALL_OW 88
// SetSide ( ruLab , 8 ) ;
13485: LD_EXP 45
13489: PPUSH
13490: LD_INT 8
13492: PPUSH
13493: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
13497: LD_EXP 31
13501: PPUSH
13502: LD_INT 8
13504: PPUSH
13505: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
13509: LD_ADDR_EXP 34
13513: PUSH
13514: LD_EXP 31
13518: PUSH
13519: EMPTY
13520: LIST
13521: ST_TO_ADDR
// ComEnterUnit ( Aviradze , ruLab ) ;
13522: LD_EXP 31
13526: PPUSH
13527: LD_EXP 45
13531: PPUSH
13532: CALL_OW 120
// for i := 1 to 2 do
13536: LD_ADDR_VAR 0 1
13540: PUSH
13541: DOUBLE
13542: LD_INT 1
13544: DEC
13545: ST_TO_ADDR
13546: LD_INT 2
13548: PUSH
13549: FOR_TO
13550: IFFALSE 13614
// begin aviradzeSquad := aviradzeSquad union tmp [ i ] ;
13552: LD_ADDR_EXP 34
13556: PUSH
13557: LD_EXP 34
13561: PUSH
13562: LD_VAR 0 2
13566: PUSH
13567: LD_VAR 0 1
13571: ARRAY
13572: UNION
13573: ST_TO_ADDR
// SetSide ( tmp [ i ] , 8 ) ;
13574: LD_VAR 0 2
13578: PUSH
13579: LD_VAR 0 1
13583: ARRAY
13584: PPUSH
13585: LD_INT 8
13587: PPUSH
13588: CALL_OW 235
// ComEnterUnit ( tmp [ i ] , ruLab ) ;
13592: LD_VAR 0 2
13596: PUSH
13597: LD_VAR 0 1
13601: ARRAY
13602: PPUSH
13603: LD_EXP 45
13607: PPUSH
13608: CALL_OW 120
// end ;
13612: GO 13549
13614: POP
13615: POP
// end ; 2 :
13616: GO 13654
13618: LD_INT 2
13620: DOUBLE
13621: EQUAL
13622: IFTRUE 13626
13624: GO 13653
13626: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
13627: LD_EXP 21
13631: PPUSH
13632: LD_STRING DH-Cap-b-1
13634: PPUSH
13635: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
13639: LD_EXP 31
13643: PPUSH
13644: LD_STRING DA-Cap-b-2
13646: PPUSH
13647: CALL_OW 88
// end ; end ;
13651: GO 13654
13653: POP
// end ;
13654: PPOPN 3
13656: END
// every 0 0$1 trigger kirovDestroyed and beriaDestroyed and kaganDestroyed do var i , tmp , tmp2 , cargo ;
13657: LD_EXP 15
13661: PUSH
13662: LD_EXP 16
13666: AND
13667: PUSH
13668: LD_EXP 17
13672: AND
13673: IFFALSE 14837
13675: GO 13677
13677: DISABLE
13678: LD_INT 0
13680: PPUSH
13681: PPUSH
13682: PPUSH
13683: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
13684: LD_STRING GoToWest
13686: PPUSH
13687: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
13691: LD_INT 17
13693: PPUSH
13694: LD_INT 1
13696: PPUSH
13697: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
13701: LD_INT 35
13703: PPUSH
13704: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
13708: LD_ADDR_VAR 0 2
13712: PUSH
13713: LD_INT 17
13715: PPUSH
13716: LD_INT 22
13718: PUSH
13719: LD_INT 2
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PUSH
13726: LD_INT 2
13728: PUSH
13729: LD_INT 21
13731: PUSH
13732: LD_INT 1
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: PUSH
13739: LD_INT 21
13741: PUSH
13742: LD_INT 2
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: PUSH
13749: LD_INT 3
13751: PUSH
13752: LD_INT 58
13754: PUSH
13755: EMPTY
13756: LIST
13757: PUSH
13758: EMPTY
13759: LIST
13760: LIST
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: LIST
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: PPUSH
13775: CALL_OW 70
13779: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) + 0 = tmp + 0 ;
13780: LD_INT 22
13782: PUSH
13783: LD_INT 2
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: PUSH
13790: LD_INT 2
13792: PUSH
13793: LD_INT 21
13795: PUSH
13796: LD_INT 1
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: PUSH
13803: LD_INT 21
13805: PUSH
13806: LD_INT 2
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: PUSH
13813: LD_INT 3
13815: PUSH
13816: LD_INT 58
13818: PUSH
13819: EMPTY
13820: LIST
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: LIST
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: PPUSH
13839: CALL_OW 69
13843: PUSH
13844: LD_INT 0
13846: PLUS
13847: PUSH
13848: LD_VAR 0 2
13852: PUSH
13853: LD_INT 0
13855: PLUS
13856: EQUAL
13857: IFFALSE 13701
// SaveCharacters ( Heike , 04_1_Heike ) ;
13859: LD_EXP 21
13863: PPUSH
13864: LD_STRING 04_1_Heike
13866: PPUSH
13867: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
13871: LD_EXP 31
13875: PUSH
13876: LD_EXP 31
13880: PUSH
13881: LD_EXP 34
13885: IN
13886: NOT
13887: AND
13888: IFFALSE 13904
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
13890: LD_EXP 31
13894: PPUSH
13895: LD_STRING 04_1_Aviradze
13897: PPUSH
13898: CALL_OW 38
13902: GO 13922
// if Aviradze then
13904: LD_EXP 31
13908: IFFALSE 13922
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
13910: LD_EXP 31
13914: PPUSH
13915: LD_STRING 04_1_Aviradze_L
13917: PPUSH
13918: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
13922: LD_EXP 24
13926: PUSH
13927: LD_EXP 24
13931: PUSH
13932: LD_EXP 34
13936: IN
13937: NOT
13938: AND
13939: IFFALSE 13955
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
13941: LD_EXP 24
13945: PPUSH
13946: LD_STRING 04_1_Ibrahim
13948: PPUSH
13949: CALL_OW 38
13953: GO 13973
// if Ibrahim then
13955: LD_EXP 24
13959: IFFALSE 13973
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
13961: LD_EXP 24
13965: PPUSH
13966: LD_STRING 04_1_Ibrahim_L
13968: PPUSH
13969: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
13973: LD_EXP 25
13977: PUSH
13978: LD_EXP 25
13982: PUSH
13983: LD_EXP 34
13987: IN
13988: NOT
13989: AND
13990: IFFALSE 14006
// SaveCharacters ( Kamil , 04_1_Kamil ) else
13992: LD_EXP 25
13996: PPUSH
13997: LD_STRING 04_1_Kamil
13999: PPUSH
14000: CALL_OW 38
14004: GO 14024
// if Kamil then
14006: LD_EXP 25
14010: IFFALSE 14024
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
14012: LD_EXP 25
14016: PPUSH
14017: LD_STRING 04_1_Kamil_L
14019: PPUSH
14020: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
14024: LD_EXP 27
14028: PUSH
14029: LD_EXP 27
14033: PUSH
14034: LD_EXP 34
14038: IN
14039: NOT
14040: AND
14041: IFFALSE 14057
// SaveCharacters ( Sophia , 04_1_Sophia ) else
14043: LD_EXP 27
14047: PPUSH
14048: LD_STRING 04_1_Sophia
14050: PPUSH
14051: CALL_OW 38
14055: GO 14075
// if Sophia then
14057: LD_EXP 27
14061: IFFALSE 14075
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
14063: LD_EXP 27
14067: PPUSH
14068: LD_STRING 04_1_Sophia_L
14070: PPUSH
14071: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
14075: LD_EXP 26
14079: PUSH
14080: LD_EXP 26
14084: PUSH
14085: LD_EXP 34
14089: IN
14090: NOT
14091: AND
14092: IFFALSE 14108
// SaveCharacters ( Kaia , 04_1_Kaia ) else
14094: LD_EXP 26
14098: PPUSH
14099: LD_STRING 04_1_Kaia
14101: PPUSH
14102: CALL_OW 38
14106: GO 14126
// if Kaia then
14108: LD_EXP 26
14112: IFFALSE 14126
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
14114: LD_EXP 26
14118: PPUSH
14119: LD_STRING 04_1_Kaia_L
14121: PPUSH
14122: CALL_OW 38
// if Givi then
14126: LD_EXP 22
14130: IFFALSE 14144
// SaveCharacters ( Givi , 04_1_Givi ) ;
14132: LD_EXP 22
14136: PPUSH
14137: LD_STRING 04_1_Givi
14139: PPUSH
14140: CALL_OW 38
// if Mike then
14144: LD_EXP 23
14148: IFFALSE 14162
// SaveCharacters ( Mike , 04_1_Mike ) ;
14150: LD_EXP 23
14154: PPUSH
14155: LD_STRING 04_1_Mike
14157: PPUSH
14158: CALL_OW 38
// if Markov then
14162: LD_EXP 28
14166: IFFALSE 14180
// SaveCharacters ( Markov , 04_1_Markov ) ;
14168: LD_EXP 28
14172: PPUSH
14173: LD_STRING 04_1_Markov
14175: PPUSH
14176: CALL_OW 38
// if Kurt then
14180: LD_EXP 30
14184: IFFALSE 14198
// SaveCharacters ( Kurt , 04_1_Kurt ) ;
14186: LD_EXP 30
14190: PPUSH
14191: LD_STRING 04_1_Kurt
14193: PPUSH
14194: CALL_OW 38
// if heikeSecondSquad diff aviradzeSquad then
14198: LD_EXP 32
14202: PUSH
14203: LD_EXP 34
14207: DIFF
14208: IFFALSE 14228
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
14210: LD_EXP 32
14214: PUSH
14215: LD_EXP 34
14219: DIFF
14220: PPUSH
14221: LD_STRING 04_1_others
14223: PPUSH
14224: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
14228: LD_EXP 34
14232: PUSH
14233: LD_EXP 32
14237: AND
14238: IFFALSE 14323
// begin tmp := [ ] ;
14240: LD_ADDR_VAR 0 2
14244: PUSH
14245: EMPTY
14246: ST_TO_ADDR
// for i in heikeSecondSquad do
14247: LD_ADDR_VAR 0 1
14251: PUSH
14252: LD_EXP 32
14256: PUSH
14257: FOR_IN
14258: IFFALSE 14303
// if i in aviradzeSquad then
14260: LD_VAR 0 1
14264: PUSH
14265: LD_EXP 34
14269: IN
14270: IFFALSE 14301
// tmp := Replace ( tmp , tmp + 1 , i ) ;
14272: LD_ADDR_VAR 0 2
14276: PUSH
14277: LD_VAR 0 2
14281: PPUSH
14282: LD_VAR 0 2
14286: PUSH
14287: LD_INT 1
14289: PLUS
14290: PPUSH
14291: LD_VAR 0 1
14295: PPUSH
14296: CALL_OW 1
14300: ST_TO_ADDR
14301: GO 14257
14303: POP
14304: POP
// if tmp then
14305: LD_VAR 0 2
14309: IFFALSE 14323
// SaveCharacters ( tmp , 04_1_others_L ) ;
14311: LD_VAR 0 2
14315: PPUSH
14316: LD_STRING 04_1_others_L
14318: PPUSH
14319: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
14323: LD_ADDR_VAR 0 2
14327: PUSH
14328: LD_INT 22
14330: PUSH
14331: LD_INT 2
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: LD_INT 23
14340: PUSH
14341: LD_INT 0
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PPUSH
14352: CALL_OW 69
14356: ST_TO_ADDR
// if tmp then
14357: LD_VAR 0 2
14361: IFFALSE 14375
// SaveCharacters ( tmp , 04_1_apes ) ;
14363: LD_VAR 0 2
14367: PPUSH
14368: LD_STRING 04_1_apes
14370: PPUSH
14371: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
14375: LD_ADDR_VAR 0 2
14379: PUSH
14380: LD_INT 17
14382: PPUSH
14383: LD_INT 21
14385: PUSH
14386: LD_INT 2
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: PPUSH
14393: CALL_OW 70
14397: ST_TO_ADDR
// if tmp then
14398: LD_VAR 0 2
14402: IFFALSE 14696
// begin tmp2 := [ ] ;
14404: LD_ADDR_VAR 0 3
14408: PUSH
14409: EMPTY
14410: ST_TO_ADDR
// for i in tmp do
14411: LD_ADDR_VAR 0 1
14415: PUSH
14416: LD_VAR 0 2
14420: PUSH
14421: FOR_IN
14422: IFFALSE 14682
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
14424: LD_VAR 0 1
14428: PPUSH
14429: CALL_OW 264
14433: PUSH
14434: LD_INT 32
14436: PUSH
14437: LD_INT 12
14439: PUSH
14440: LD_INT 51
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: LIST
14447: IN
14448: IFFALSE 14585
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
14450: LD_ADDR_VAR 0 4
14454: PUSH
14455: LD_VAR 0 1
14459: PPUSH
14460: LD_INT 1
14462: PPUSH
14463: CALL_OW 289
14467: PUSH
14468: LD_VAR 0 1
14472: PPUSH
14473: LD_INT 2
14475: PPUSH
14476: CALL_OW 289
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
14485: LD_ADDR_VAR 0 3
14489: PUSH
14490: LD_VAR 0 3
14494: PPUSH
14495: LD_VAR 0 3
14499: PUSH
14500: LD_INT 1
14502: PLUS
14503: PPUSH
14504: LD_VAR 0 1
14508: PPUSH
14509: CALL_OW 265
14513: PUSH
14514: LD_VAR 0 1
14518: PPUSH
14519: CALL_OW 262
14523: PUSH
14524: LD_VAR 0 1
14528: PPUSH
14529: CALL_OW 263
14533: PUSH
14534: LD_VAR 0 1
14538: PPUSH
14539: CALL_OW 264
14543: PUSH
14544: LD_VAR 0 1
14548: PPUSH
14549: CALL_OW 248
14553: PUSH
14554: LD_VAR 0 1
14558: PPUSH
14559: CALL_OW 256
14563: PUSH
14564: LD_VAR 0 4
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: PPUSH
14578: CALL_OW 1
14582: ST_TO_ADDR
// end else
14583: GO 14680
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
14585: LD_ADDR_VAR 0 3
14589: PUSH
14590: LD_VAR 0 3
14594: PPUSH
14595: LD_VAR 0 3
14599: PUSH
14600: LD_INT 1
14602: PLUS
14603: PPUSH
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 265
14613: PUSH
14614: LD_VAR 0 1
14618: PPUSH
14619: CALL_OW 262
14623: PUSH
14624: LD_VAR 0 1
14628: PPUSH
14629: CALL_OW 263
14633: PUSH
14634: LD_VAR 0 1
14638: PPUSH
14639: CALL_OW 264
14643: PUSH
14644: LD_VAR 0 1
14648: PPUSH
14649: CALL_OW 248
14653: PUSH
14654: LD_VAR 0 1
14658: PPUSH
14659: CALL_OW 256
14663: PUSH
14664: EMPTY
14665: PUSH
14666: EMPTY
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: PPUSH
14675: CALL_OW 1
14679: ST_TO_ADDR
14680: GO 14421
14682: POP
14683: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
14684: LD_VAR 0 3
14688: PPUSH
14689: LD_STRING 04_1_Vehicles
14691: PPUSH
14692: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
14696: LD_EXP 20
14700: PPUSH
14701: LD_STRING 04_1_RuLabCaptured
14703: PPUSH
14704: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
14708: LD_EXP 18
14712: PPUSH
14713: LD_STRING 04_1_EscapeCounter
14715: PPUSH
14716: CALL_OW 39
// SaveVariable ( FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) > 0 , 04_1_BaseHill ) ;
14720: LD_INT 10
14722: PPUSH
14723: LD_INT 22
14725: PUSH
14726: LD_INT 2
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: PUSH
14733: LD_INT 21
14735: PUSH
14736: LD_INT 3
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: PPUSH
14747: CALL_OW 70
14751: PUSH
14752: LD_INT 0
14754: GREATER
14755: PPUSH
14756: LD_STRING 04_1_BaseHill
14758: PPUSH
14759: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
14763: LD_OWVAR 1
14767: PPUSH
14768: LD_STRING 04_1_Time
14770: PPUSH
14771: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
14775: LD_EXP 14
14779: PPUSH
14780: LD_STRING 04_1_DeadCounter
14782: PPUSH
14783: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
14787: LD_INT 22
14789: PUSH
14790: LD_INT 2
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: LD_INT 34
14799: PUSH
14800: LD_INT 26
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: PPUSH
14811: CALL_OW 69
14815: PUSH
14816: LD_INT 0
14818: PLUS
14819: PPUSH
14820: LD_STRING 04_1_Flamethrower
14822: PPUSH
14823: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
14827: LD_INT 1
14829: PPUSH
14830: LD_STRING __x1\04_cont2
14832: PPUSH
14833: CALL_OW 340
// end ; end_of_file
14837: PPOPN 4
14839: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
14840: LD_VAR 0 1
14844: PPUSH
14845: CALL_OW 266
14849: PUSH
14850: LD_INT 0
14852: EQUAL
14853: PUSH
14854: LD_VAR 0 1
14858: PPUSH
14859: CALL_OW 255
14863: PUSH
14864: LD_INT 2
14866: EQUAL
14867: AND
14868: IFFALSE 14878
// baseConstructed := true ;
14870: LD_ADDR_EXP 3
14874: PUSH
14875: LD_INT 1
14877: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
14878: LD_VAR 0 1
14882: PPUSH
14883: CALL_OW 266
14887: PUSH
14888: LD_INT 6
14890: EQUAL
14891: PUSH
14892: LD_VAR 0 1
14896: PPUSH
14897: CALL_OW 255
14901: PUSH
14902: LD_INT 2
14904: EQUAL
14905: AND
14906: IFFALSE 14916
// labConstructed := true ;
14908: LD_ADDR_EXP 4
14912: PUSH
14913: LD_INT 1
14915: ST_TO_ADDR
// end ;
14916: PPOPN 1
14918: END
// on UnitDestroyed ( un ) do begin if un = Heike then
14919: LD_VAR 0 1
14923: PUSH
14924: LD_EXP 21
14928: EQUAL
14929: IFFALSE 14938
// YouLost ( Heike ) ;
14931: LD_STRING Heike
14933: PPUSH
14934: CALL_OW 104
// if un = Omar then
14938: LD_VAR 0 1
14942: PUSH
14943: LD_EXP 29
14947: EQUAL
14948: IFFALSE 14957
// YouLost ( Omar ) ;
14950: LD_STRING Omar
14952: PPUSH
14953: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
14957: LD_VAR 0 1
14961: PUSH
14962: LD_INT 22
14964: PUSH
14965: LD_INT 2
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: PUSH
14972: LD_INT 23
14974: PUSH
14975: LD_INT 2
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PUSH
14982: LD_INT 21
14984: PUSH
14985: LD_INT 1
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: LIST
14996: PPUSH
14997: CALL_OW 69
15001: IN
15002: IFFALSE 15018
// loseCounter := loseCounter + 1 ;
15004: LD_ADDR_EXP 14
15008: PUSH
15009: LD_EXP 14
15013: PUSH
15014: LD_INT 1
15016: PLUS
15017: ST_TO_ADDR
// if un = omikron then
15018: LD_VAR 0 1
15022: PUSH
15023: LD_INT 64
15025: EQUAL
15026: IFFALSE 15036
// omicronFall := true ;
15028: LD_ADDR_EXP 13
15032: PUSH
15033: LD_INT 1
15035: ST_TO_ADDR
// if un = kirov then
15036: LD_VAR 0 1
15040: PUSH
15041: LD_INT 71
15043: EQUAL
15044: IFFALSE 15061
// begin ChangeMissionObjectives ( KirovDone ) ;
15046: LD_STRING KirovDone
15048: PPUSH
15049: CALL_OW 337
// kirovDestroyed := true ;
15053: LD_ADDR_EXP 15
15057: PUSH
15058: LD_INT 1
15060: ST_TO_ADDR
// end ; if un = beria then
15061: LD_VAR 0 1
15065: PUSH
15066: LD_INT 106
15068: EQUAL
15069: IFFALSE 15086
// begin ChangeMissionObjectives ( BeriaDone ) ;
15071: LD_STRING BeriaDone
15073: PPUSH
15074: CALL_OW 337
// beriaDestroyed := true ;
15078: LD_ADDR_EXP 16
15082: PUSH
15083: LD_INT 1
15085: ST_TO_ADDR
// end ; if un = kagan then
15086: LD_VAR 0 1
15090: PUSH
15091: LD_INT 112
15093: EQUAL
15094: IFFALSE 15111
// begin ChangeMissionObjectives ( KaganDone ) ;
15096: LD_STRING KaganDone
15098: PPUSH
15099: CALL_OW 337
// kaganDestroyed := true ;
15103: LD_ADDR_EXP 17
15107: PUSH
15108: LD_INT 1
15110: ST_TO_ADDR
// end ; if un in russianPatrol then
15111: LD_VAR 0 1
15115: PUSH
15116: LD_EXP 42
15120: IN
15121: IFFALSE 15162
// begin if GetTag ( un ) = 2 then
15123: LD_VAR 0 1
15127: PPUSH
15128: CALL_OW 110
15132: PUSH
15133: LD_INT 2
15135: EQUAL
15136: IFFALSE 15146
// spottedByPatrol := false ;
15138: LD_ADDR_EXP 7
15142: PUSH
15143: LD_INT 0
15145: ST_TO_ADDR
// russianPatrol := russianPatrol diff un ;
15146: LD_ADDR_EXP 42
15150: PUSH
15151: LD_EXP 42
15155: PUSH
15156: LD_VAR 0 1
15160: DIFF
15161: ST_TO_ADDR
// end ; if un in russianOmicronAttackers then
15162: LD_VAR 0 1
15166: PUSH
15167: LD_EXP 43
15171: IN
15172: IFFALSE 15190
// russianOmicronAttackers := russianOmicronAttackers diff un ;
15174: LD_ADDR_EXP 43
15178: PUSH
15179: LD_EXP 43
15183: PUSH
15184: LD_VAR 0 1
15188: DIFF
15189: ST_TO_ADDR
// end ;
15190: PPOPN 1
15192: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
15193: LD_INT 0
15195: PPUSH
15196: PPUSH
15197: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
15198: LD_VAR 0 1
15202: PUSH
15203: LD_INT 2
15205: PUSH
15206: LD_INT 22
15208: PUSH
15209: LD_INT 3
15211: PUSH
15212: EMPTY
15213: LIST
15214: LIST
15215: PUSH
15216: LD_INT 22
15218: PUSH
15219: LD_INT 4
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PUSH
15226: LD_INT 22
15228: PUSH
15229: LD_INT 6
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: PUSH
15242: LD_INT 30
15244: PUSH
15245: LD_INT 32
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: PUSH
15252: EMPTY
15253: LIST
15254: LIST
15255: PPUSH
15256: CALL_OW 69
15260: IN
15261: IFFALSE 15434
// begin sol := UnitsInside ( un ) ;
15263: LD_ADDR_VAR 0 3
15267: PUSH
15268: LD_VAR 0 1
15272: PPUSH
15273: CALL_OW 313
15277: ST_TO_ADDR
// if not sol then
15278: LD_VAR 0 3
15282: NOT
15283: IFFALSE 15287
// exit ;
15285: GO 15434
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
15287: LD_ADDR_VAR 0 4
15291: PUSH
15292: LD_INT 22
15294: PUSH
15295: LD_VAR 0 1
15299: PPUSH
15300: CALL_OW 255
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: PUSH
15309: LD_INT 2
15311: PUSH
15312: LD_INT 30
15314: PUSH
15315: LD_INT 4
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: PUSH
15322: LD_INT 30
15324: PUSH
15325: LD_INT 5
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: LIST
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PPUSH
15341: CALL_OW 69
15345: ST_TO_ADDR
// if not nearestBarracks then
15346: LD_VAR 0 4
15350: NOT
15351: IFFALSE 15355
// exit ;
15353: GO 15434
// for i in nearestBarracks do
15355: LD_ADDR_VAR 0 2
15359: PUSH
15360: LD_VAR 0 4
15364: PUSH
15365: FOR_IN
15366: IFFALSE 15401
// if UnitsInside ( i ) = 6 then
15368: LD_VAR 0 2
15372: PPUSH
15373: CALL_OW 313
15377: PUSH
15378: LD_INT 6
15380: EQUAL
15381: IFFALSE 15399
// nearestBarracks := nearestBarracks diff i ;
15383: LD_ADDR_VAR 0 4
15387: PUSH
15388: LD_VAR 0 4
15392: PUSH
15393: LD_VAR 0 2
15397: DIFF
15398: ST_TO_ADDR
15399: GO 15365
15401: POP
15402: POP
// if not nearestBarracks then
15403: LD_VAR 0 4
15407: NOT
15408: IFFALSE 15412
// exit ;
15410: GO 15434
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
15412: LD_VAR 0 3
15416: PUSH
15417: LD_INT 1
15419: ARRAY
15420: PPUSH
15421: LD_VAR 0 4
15425: PUSH
15426: LD_INT 1
15428: ARRAY
15429: PPUSH
15430: CALL_OW 120
// end ; end ;
15434: PPOPN 4
15436: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
15437: LD_INT 0
15439: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
15440: LD_EXP 8
15444: NOT
15445: PUSH
15446: LD_EXP 5
15450: NOT
15451: OR
15452: IFFALSE 15456
// exit ;
15454: GO 15524
// for i in camAreas do
15456: LD_ADDR_VAR 0 5
15460: PUSH
15461: LD_EXP 8
15465: PUSH
15466: FOR_IN
15467: IFFALSE 15522
// if InArea ( x , y , i ) then
15469: LD_VAR 0 3
15473: PPUSH
15474: LD_VAR 0 4
15478: PPUSH
15479: LD_VAR 0 5
15483: PPUSH
15484: CALL_OW 309
15488: IFFALSE 15520
// begin SetAreaMapShow ( i , 0 ) ;
15490: LD_VAR 0 5
15494: PPUSH
15495: LD_INT 0
15497: PPUSH
15498: CALL_OW 424
// camAreas := camAreas diff i ;
15502: LD_ADDR_EXP 8
15506: PUSH
15507: LD_EXP 8
15511: PUSH
15512: LD_VAR 0 5
15516: DIFF
15517: ST_TO_ADDR
// break ;
15518: GO 15522
// end ;
15520: GO 15466
15522: POP
15523: POP
// end ;
15524: PPOPN 5
15526: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
15527: LD_VAR 0 1
15531: PUSH
15532: LD_INT 2
15534: EQUAL
15535: PUSH
15536: LD_VAR 0 2
15540: PUSH
15541: LD_INT 5
15543: PUSH
15544: LD_INT 8
15546: PUSH
15547: EMPTY
15548: LIST
15549: LIST
15550: IN
15551: AND
15552: IFFALSE 15561
// YouLost ( Ally ) ;
15554: LD_STRING Ally
15556: PPUSH
15557: CALL_OW 104
// end ; end_of_file
15561: PPOPN 2
15563: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 200 , 160 , 120 ] [ Difficulty ] do
15564: LD_EXP 11
15568: NOT
15569: PUSH
15570: LD_INT 12
15572: PPUSH
15573: LD_INT 1
15575: PPUSH
15576: CALL_OW 287
15580: PUSH
15581: LD_INT 200
15583: PUSH
15584: LD_INT 160
15586: PUSH
15587: LD_INT 120
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: LIST
15594: PUSH
15595: LD_OWVAR 67
15599: ARRAY
15600: LESS
15601: AND
15602: IFFALSE 15629
15604: GO 15606
15606: DISABLE
// begin enable ;
15607: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
15608: LD_INT 1
15610: PPUSH
15611: LD_INT 5
15613: PPUSH
15614: CALL_OW 12
15618: PPUSH
15619: LD_INT 12
15621: PPUSH
15622: LD_INT 1
15624: PPUSH
15625: CALL_OW 55
// end ;
15629: END
