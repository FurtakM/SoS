// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 42 0 0
// PrepareNature ;
   8: CALL 1776 0 0
// PrepareArabian ;
  12: CALL 2144 0 0
// PrepareAmerican ;
  16: CALL 6848 0 0
// PrepareRussian ;
  20: CALL 3100 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 2 ) ;
  30: LD_INT 2
  32: PPUSH
  33: CALL_OW 344
// Action ;
  37: CALL 8408 0 0
// end ;
  41: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured ; function Init ; begin
  42: LD_INT 0
  44: PPUSH
// debug := false ;
  45: LD_ADDR_EXP 1
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// prefix := 03_ ;
  53: LD_ADDR_EXP 2
  57: PUSH
  58: LD_STRING 03_
  60: ST_TO_ADDR
// baseConstructed := false ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// labConstructed := false ;
  69: LD_ADDR_EXP 4
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  77: LD_ADDR_EXP 5
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// russianAlert := false ;
  85: LD_ADDR_EXP 9
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// activeGrishkoAI := true ;
  93: LD_ADDR_EXP 10
  97: PUSH
  98: LD_INT 1
 100: ST_TO_ADDR
// allowHeikeAttack := false ;
 101: LD_ADDR_EXP 11
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// allowToPatrol := false ;
 109: LD_ADDR_EXP 12
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// omicronFall := false ;
 117: LD_ADDR_EXP 13
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// startAttackOnOmicron := false ;
 125: LD_ADDR_EXP 6
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// kirovDestroyed := false ;
 133: LD_ADDR_EXP 16
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// beriaDestroyed := false ;
 141: LD_ADDR_EXP 17
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// kaganDestroyed := false ;
 149: LD_ADDR_EXP 18
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// retreatFromOmicron := false ;
 157: LD_ADDR_EXP 20
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// spottedByPatrol := false ;
 165: LD_ADDR_EXP 7
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// omarCountdown := [ 25 25$00 , 24 24$00 , 23 23$00 ] [ Difficulty ] ;
 173: LD_ADDR_EXP 22
 177: PUSH
 178: LD_INT 52500
 180: PUSH
 181: LD_INT 50400
 183: PUSH
 184: LD_INT 48300
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: PUSH
 192: LD_OWVAR 67
 196: ARRAY
 197: ST_TO_ADDR
// escapeCounter := 0 ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// loseCounter := 0 ;
 206: LD_ADDR_EXP 14
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// labCaptured := false ;
 214: LD_ADDR_EXP 21
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// hillBase := false ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 230: LD_ADDR_EXP 8
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 4
 240: PUSH
 241: LD_INT 5
 243: PUSH
 244: LD_INT 6
 246: PUSH
 247: LD_INT 7
 249: PUSH
 250: LD_INT 8
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: LIST
 260: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 261: LD_ADDR_EXP 23
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// kaganCaptured := false ;
 269: LD_ADDR_EXP 24
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// end ; end_of_file
 277: LD_VAR 0 1
 281: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 282: LD_INT 0
 284: PPUSH
 285: PPUSH
// if exist_mode then
 286: LD_VAR 0 2
 290: IFFALSE 315
// unit := CreateCharacter ( prefix & ident ) else
 292: LD_ADDR_VAR 0 5
 296: PUSH
 297: LD_VAR 0 3
 301: PUSH
 302: LD_VAR 0 1
 306: STR
 307: PPUSH
 308: CALL_OW 34
 312: ST_TO_ADDR
 313: GO 330
// unit := NewCharacter ( ident ) ;
 315: LD_ADDR_VAR 0 5
 319: PUSH
 320: LD_VAR 0 1
 324: PPUSH
 325: CALL_OW 25
 329: ST_TO_ADDR
// result := unit ;
 330: LD_ADDR_VAR 0 4
 334: PUSH
 335: LD_VAR 0 5
 339: ST_TO_ADDR
// end ;
 340: LD_VAR 0 4
 344: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 345: LD_INT 0
 347: PPUSH
// uc_side := side ;
 348: LD_ADDR_OWVAR 20
 352: PUSH
 353: LD_VAR 0 1
 357: ST_TO_ADDR
// uc_nation := nation ;
 358: LD_ADDR_OWVAR 21
 362: PUSH
 363: LD_VAR 0 2
 367: ST_TO_ADDR
// vc_chassis := chassis ;
 368: LD_ADDR_OWVAR 37
 372: PUSH
 373: LD_VAR 0 3
 377: ST_TO_ADDR
// vc_engine := engine ;
 378: LD_ADDR_OWVAR 39
 382: PUSH
 383: LD_VAR 0 4
 387: ST_TO_ADDR
// vc_control := control ;
 388: LD_ADDR_OWVAR 38
 392: PUSH
 393: LD_VAR 0 5
 397: ST_TO_ADDR
// vc_weapon := weapon ;
 398: LD_ADDR_OWVAR 40
 402: PUSH
 403: LD_VAR 0 6
 407: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 408: LD_ADDR_OWVAR 41
 412: PUSH
 413: LD_VAR 0 7
 417: ST_TO_ADDR
// result := CreateVehicle ;
 418: LD_ADDR_VAR 0 8
 422: PUSH
 423: CALL_OW 45
 427: ST_TO_ADDR
// end ;
 428: LD_VAR 0 8
 432: RET
// export function SayX ( units , ident ) ; var i ; begin
 433: LD_INT 0
 435: PPUSH
 436: PPUSH
// result := false ;
 437: LD_ADDR_VAR 0 3
 441: PUSH
 442: LD_INT 0
 444: ST_TO_ADDR
// if not units then
 445: LD_VAR 0 1
 449: NOT
 450: IFFALSE 454
// exit ;
 452: GO 508
// for i in units do
 454: LD_ADDR_VAR 0 4
 458: PUSH
 459: LD_VAR 0 1
 463: PUSH
 464: FOR_IN
 465: IFFALSE 506
// if IsOk ( i ) then
 467: LD_VAR 0 4
 471: PPUSH
 472: CALL_OW 302
 476: IFFALSE 504
// begin Say ( i , ident ) ;
 478: LD_VAR 0 4
 482: PPUSH
 483: LD_VAR 0 2
 487: PPUSH
 488: CALL_OW 88
// result := i ;
 492: LD_ADDR_VAR 0 3
 496: PUSH
 497: LD_VAR 0 4
 501: ST_TO_ADDR
// break ;
 502: GO 506
// end ;
 504: GO 464
 506: POP
 507: POP
// end ;
 508: LD_VAR 0 3
 512: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 513: LD_INT 0
 515: PPUSH
 516: PPUSH
 517: PPUSH
// if not observer or not unit then
 518: LD_VAR 0 1
 522: NOT
 523: PUSH
 524: LD_VAR 0 2
 528: NOT
 529: OR
 530: IFFALSE 534
// exit ;
 532: GO 582
// if not See ( GetSide ( observer ) , unit ) then
 534: LD_VAR 0 1
 538: PPUSH
 539: CALL_OW 255
 543: PPUSH
 544: LD_VAR 0 2
 548: PPUSH
 549: CALL_OW 292
 553: NOT
 554: IFFALSE 558
// exit ;
 556: GO 582
// result := GetDistUnits ( observer , unit ) < 12 ;
 558: LD_ADDR_VAR 0 3
 562: PUSH
 563: LD_VAR 0 1
 567: PPUSH
 568: LD_VAR 0 2
 572: PPUSH
 573: CALL_OW 296
 577: PUSH
 578: LD_INT 12
 580: LESS
 581: ST_TO_ADDR
// end ;
 582: LD_VAR 0 3
 586: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 587: LD_INT 0
 589: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 590: LD_VAR 0 2
 594: PUSH
 595: LD_INT 1
 597: ARRAY
 598: PPUSH
 599: LD_VAR 0 2
 603: PUSH
 604: LD_INT 2
 606: ARRAY
 607: PPUSH
 608: CALL_OW 488
 612: PUSH
 613: LD_VAR 0 2
 617: PUSH
 618: LD_INT 1
 620: ARRAY
 621: PPUSH
 622: LD_VAR 0 2
 626: PUSH
 627: LD_INT 2
 629: ARRAY
 630: PPUSH
 631: CALL_OW 428
 635: PUSH
 636: LD_INT 0
 638: EQUAL
 639: AND
 640: IFFALSE 674
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 642: LD_VAR 0 1
 646: PPUSH
 647: LD_VAR 0 2
 651: PUSH
 652: LD_INT 1
 654: ARRAY
 655: PPUSH
 656: LD_VAR 0 2
 660: PUSH
 661: LD_INT 2
 663: ARRAY
 664: PPUSH
 665: LD_VAR 0 3
 669: PPUSH
 670: CALL_OW 48
// end ;
 674: LD_VAR 0 4
 678: RET
// export function Video ( mode ) ; begin
 679: LD_INT 0
 681: PPUSH
// ingame_video = mode ;
 682: LD_ADDR_OWVAR 52
 686: PUSH
 687: LD_VAR 0 1
 691: ST_TO_ADDR
// interface_hidden = mode ;
 692: LD_ADDR_OWVAR 54
 696: PUSH
 697: LD_VAR 0 1
 701: ST_TO_ADDR
// end ;
 702: LD_VAR 0 2
 706: RET
// export function ReverseArray ( array ) ; var i ; begin
 707: LD_INT 0
 709: PPUSH
 710: PPUSH
// if not array then
 711: LD_VAR 0 1
 715: NOT
 716: IFFALSE 720
// exit ;
 718: GO 778
// result := [ ] ;
 720: LD_ADDR_VAR 0 2
 724: PUSH
 725: EMPTY
 726: ST_TO_ADDR
// for i := 1 to array do
 727: LD_ADDR_VAR 0 3
 731: PUSH
 732: DOUBLE
 733: LD_INT 1
 735: DEC
 736: ST_TO_ADDR
 737: LD_VAR 0 1
 741: PUSH
 742: FOR_TO
 743: IFFALSE 776
// result := Insert ( result , 1 , array [ i ] ) ;
 745: LD_ADDR_VAR 0 2
 749: PUSH
 750: LD_VAR 0 2
 754: PPUSH
 755: LD_INT 1
 757: PPUSH
 758: LD_VAR 0 1
 762: PUSH
 763: LD_VAR 0 3
 767: ARRAY
 768: PPUSH
 769: CALL_OW 2
 773: ST_TO_ADDR
 774: GO 742
 776: POP
 777: POP
// end ;
 778: LD_VAR 0 2
 782: RET
// export function ComExit ( unit ) ; begin
 783: LD_INT 0
 785: PPUSH
// result := IsInUnit ( unit ) ;
 786: LD_ADDR_VAR 0 2
 790: PUSH
 791: LD_VAR 0 1
 795: PPUSH
 796: CALL_OW 310
 800: ST_TO_ADDR
// if not result then
 801: LD_VAR 0 2
 805: NOT
 806: IFFALSE 810
// exit ;
 808: GO 845
// if GetType ( result ) = unit_vehicle then
 810: LD_VAR 0 2
 814: PPUSH
 815: CALL_OW 247
 819: PUSH
 820: LD_INT 2
 822: EQUAL
 823: IFFALSE 836
// ComExitVehicle ( unit ) else
 825: LD_VAR 0 1
 829: PPUSH
 830: CALL_OW 121
 834: GO 845
// ComExitBuilding ( unit ) ;
 836: LD_VAR 0 1
 840: PPUSH
 841: CALL_OW 122
// end ;
 845: LD_VAR 0 2
 849: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 850: LD_INT 0
 852: PPUSH
 853: PPUSH
// if not side or not nation then
 854: LD_VAR 0 1
 858: NOT
 859: PUSH
 860: LD_VAR 0 2
 864: NOT
 865: OR
 866: IFFALSE 870
// exit ;
 868: GO 1634
// case nation of nation_american :
 870: LD_VAR 0 2
 874: PUSH
 875: LD_INT 1
 877: DOUBLE
 878: EQUAL
 879: IFTRUE 883
 881: GO 1097
 883: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 884: LD_ADDR_VAR 0 4
 888: PUSH
 889: LD_INT 35
 891: PUSH
 892: LD_INT 45
 894: PUSH
 895: LD_INT 46
 897: PUSH
 898: LD_INT 47
 900: PUSH
 901: LD_INT 82
 903: PUSH
 904: LD_INT 83
 906: PUSH
 907: LD_INT 84
 909: PUSH
 910: LD_INT 85
 912: PUSH
 913: LD_INT 86
 915: PUSH
 916: LD_INT 1
 918: PUSH
 919: LD_INT 2
 921: PUSH
 922: LD_INT 6
 924: PUSH
 925: LD_INT 15
 927: PUSH
 928: LD_INT 16
 930: PUSH
 931: LD_INT 7
 933: PUSH
 934: LD_INT 12
 936: PUSH
 937: LD_INT 13
 939: PUSH
 940: LD_INT 10
 942: PUSH
 943: LD_INT 14
 945: PUSH
 946: LD_INT 20
 948: PUSH
 949: LD_INT 21
 951: PUSH
 952: LD_INT 22
 954: PUSH
 955: LD_INT 25
 957: PUSH
 958: LD_INT 32
 960: PUSH
 961: LD_INT 27
 963: PUSH
 964: LD_INT 36
 966: PUSH
 967: LD_INT 69
 969: PUSH
 970: LD_INT 39
 972: PUSH
 973: LD_INT 34
 975: PUSH
 976: LD_INT 40
 978: PUSH
 979: LD_INT 48
 981: PUSH
 982: LD_INT 49
 984: PUSH
 985: LD_INT 50
 987: PUSH
 988: LD_INT 51
 990: PUSH
 991: LD_INT 52
 993: PUSH
 994: LD_INT 53
 996: PUSH
 997: LD_INT 54
 999: PUSH
1000: LD_INT 55
1002: PUSH
1003: LD_INT 56
1005: PUSH
1006: LD_INT 57
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: LD_INT 59
1014: PUSH
1015: LD_INT 60
1017: PUSH
1018: LD_INT 61
1020: PUSH
1021: LD_INT 62
1023: PUSH
1024: LD_INT 80
1026: PUSH
1027: LD_INT 82
1029: PUSH
1030: LD_INT 83
1032: PUSH
1033: LD_INT 84
1035: PUSH
1036: LD_INT 85
1038: PUSH
1039: LD_INT 86
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: LIST
1064: LIST
1065: LIST
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: LIST
1075: LIST
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: ST_TO_ADDR
1095: GO 1558
1097: LD_INT 2
1099: DOUBLE
1100: EQUAL
1101: IFTRUE 1105
1103: GO 1327
1105: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1106: LD_ADDR_VAR 0 4
1110: PUSH
1111: LD_INT 35
1113: PUSH
1114: LD_INT 45
1116: PUSH
1117: LD_INT 46
1119: PUSH
1120: LD_INT 47
1122: PUSH
1123: LD_INT 82
1125: PUSH
1126: LD_INT 83
1128: PUSH
1129: LD_INT 84
1131: PUSH
1132: LD_INT 85
1134: PUSH
1135: LD_INT 87
1137: PUSH
1138: LD_INT 70
1140: PUSH
1141: LD_INT 1
1143: PUSH
1144: LD_INT 11
1146: PUSH
1147: LD_INT 3
1149: PUSH
1150: LD_INT 4
1152: PUSH
1153: LD_INT 5
1155: PUSH
1156: LD_INT 6
1158: PUSH
1159: LD_INT 15
1161: PUSH
1162: LD_INT 18
1164: PUSH
1165: LD_INT 7
1167: PUSH
1168: LD_INT 17
1170: PUSH
1171: LD_INT 8
1173: PUSH
1174: LD_INT 20
1176: PUSH
1177: LD_INT 21
1179: PUSH
1180: LD_INT 22
1182: PUSH
1183: LD_INT 72
1185: PUSH
1186: LD_INT 26
1188: PUSH
1189: LD_INT 69
1191: PUSH
1192: LD_INT 39
1194: PUSH
1195: LD_INT 40
1197: PUSH
1198: LD_INT 41
1200: PUSH
1201: LD_INT 42
1203: PUSH
1204: LD_INT 43
1206: PUSH
1207: LD_INT 48
1209: PUSH
1210: LD_INT 49
1212: PUSH
1213: LD_INT 50
1215: PUSH
1216: LD_INT 51
1218: PUSH
1219: LD_INT 52
1221: PUSH
1222: LD_INT 53
1224: PUSH
1225: LD_INT 54
1227: PUSH
1228: LD_INT 55
1230: PUSH
1231: LD_INT 56
1233: PUSH
1234: LD_INT 60
1236: PUSH
1237: LD_INT 61
1239: PUSH
1240: LD_INT 62
1242: PUSH
1243: LD_INT 66
1245: PUSH
1246: LD_INT 67
1248: PUSH
1249: LD_INT 68
1251: PUSH
1252: LD_INT 81
1254: PUSH
1255: LD_INT 82
1257: PUSH
1258: LD_INT 83
1260: PUSH
1261: LD_INT 84
1263: PUSH
1264: LD_INT 85
1266: PUSH
1267: LD_INT 87
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: LIST
1276: LIST
1277: LIST
1278: LIST
1279: LIST
1280: LIST
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: LIST
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: LIST
1324: ST_TO_ADDR
1325: GO 1558
1327: LD_INT 3
1329: DOUBLE
1330: EQUAL
1331: IFTRUE 1335
1333: GO 1557
1335: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1336: LD_ADDR_VAR 0 4
1340: PUSH
1341: LD_INT 46
1343: PUSH
1344: LD_INT 47
1346: PUSH
1347: LD_INT 1
1349: PUSH
1350: LD_INT 2
1352: PUSH
1353: LD_INT 82
1355: PUSH
1356: LD_INT 83
1358: PUSH
1359: LD_INT 84
1361: PUSH
1362: LD_INT 85
1364: PUSH
1365: LD_INT 86
1367: PUSH
1368: LD_INT 11
1370: PUSH
1371: LD_INT 9
1373: PUSH
1374: LD_INT 20
1376: PUSH
1377: LD_INT 19
1379: PUSH
1380: LD_INT 21
1382: PUSH
1383: LD_INT 24
1385: PUSH
1386: LD_INT 22
1388: PUSH
1389: LD_INT 25
1391: PUSH
1392: LD_INT 28
1394: PUSH
1395: LD_INT 29
1397: PUSH
1398: LD_INT 30
1400: PUSH
1401: LD_INT 31
1403: PUSH
1404: LD_INT 37
1406: PUSH
1407: LD_INT 38
1409: PUSH
1410: LD_INT 32
1412: PUSH
1413: LD_INT 27
1415: PUSH
1416: LD_INT 33
1418: PUSH
1419: LD_INT 69
1421: PUSH
1422: LD_INT 39
1424: PUSH
1425: LD_INT 34
1427: PUSH
1428: LD_INT 40
1430: PUSH
1431: LD_INT 71
1433: PUSH
1434: LD_INT 23
1436: PUSH
1437: LD_INT 44
1439: PUSH
1440: LD_INT 48
1442: PUSH
1443: LD_INT 49
1445: PUSH
1446: LD_INT 50
1448: PUSH
1449: LD_INT 51
1451: PUSH
1452: LD_INT 52
1454: PUSH
1455: LD_INT 53
1457: PUSH
1458: LD_INT 54
1460: PUSH
1461: LD_INT 55
1463: PUSH
1464: LD_INT 56
1466: PUSH
1467: LD_INT 57
1469: PUSH
1470: LD_INT 58
1472: PUSH
1473: LD_INT 59
1475: PUSH
1476: LD_INT 63
1478: PUSH
1479: LD_INT 64
1481: PUSH
1482: LD_INT 65
1484: PUSH
1485: LD_INT 82
1487: PUSH
1488: LD_INT 83
1490: PUSH
1491: LD_INT 84
1493: PUSH
1494: LD_INT 85
1496: PUSH
1497: LD_INT 86
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: LIST
1520: LIST
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: LIST
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: LIST
1538: LIST
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: LIST
1554: ST_TO_ADDR
1555: GO 1558
1557: POP
// if state > - 1 and state < 3 then
1558: LD_VAR 0 3
1562: PUSH
1563: LD_INT 1
1565: NEG
1566: GREATER
1567: PUSH
1568: LD_VAR 0 3
1572: PUSH
1573: LD_INT 3
1575: LESS
1576: AND
1577: IFFALSE 1634
// for i in result do
1579: LD_ADDR_VAR 0 5
1583: PUSH
1584: LD_VAR 0 4
1588: PUSH
1589: FOR_IN
1590: IFFALSE 1632
// if GetTech ( i , side ) <> state then
1592: LD_VAR 0 5
1596: PPUSH
1597: LD_VAR 0 1
1601: PPUSH
1602: CALL_OW 321
1606: PUSH
1607: LD_VAR 0 3
1611: NONEQUAL
1612: IFFALSE 1630
// result := result diff i ;
1614: LD_ADDR_VAR 0 4
1618: PUSH
1619: LD_VAR 0 4
1623: PUSH
1624: LD_VAR 0 5
1628: DIFF
1629: ST_TO_ADDR
1630: GO 1589
1632: POP
1633: POP
// end ;
1634: LD_VAR 0 4
1638: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
1639: LD_INT 0
1641: PPUSH
1642: PPUSH
// InitUc ;
1643: CALL_OW 18
// InitHc ;
1647: CALL_OW 19
// uc_side := 0 ;
1651: LD_ADDR_OWVAR 20
1655: PUSH
1656: LD_INT 0
1658: ST_TO_ADDR
// uc_nation := 0 ;
1659: LD_ADDR_OWVAR 21
1663: PUSH
1664: LD_INT 0
1666: ST_TO_ADDR
// for i = 1 to amount do
1667: LD_ADDR_VAR 0 4
1671: PUSH
1672: DOUBLE
1673: LD_INT 1
1675: DEC
1676: ST_TO_ADDR
1677: LD_VAR 0 2
1681: PUSH
1682: FOR_TO
1683: IFFALSE 1765
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
1685: LD_ADDR_OWVAR 29
1689: PUSH
1690: LD_INT 9
1692: PPUSH
1693: LD_INT 12
1695: PPUSH
1696: CALL_OW 12
1700: PUSH
1701: LD_INT 9
1703: PPUSH
1704: LD_INT 12
1706: PPUSH
1707: CALL_OW 12
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
1716: LD_ADDR_OWVAR 35
1720: PUSH
1721: LD_INT 1
1723: NEG
1724: PPUSH
1725: LD_INT 1
1727: PPUSH
1728: CALL_OW 12
1732: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
1733: LD_INT 0
1735: PPUSH
1736: LD_INT 12
1738: PPUSH
1739: LD_INT 1
1741: PPUSH
1742: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
1746: CALL_OW 44
1750: PPUSH
1751: LD_VAR 0 1
1755: PPUSH
1756: LD_INT 0
1758: PPUSH
1759: CALL_OW 49
// end ;
1763: GO 1682
1765: POP
1766: POP
// InitHc ;
1767: CALL_OW 19
// end ;
1771: LD_VAR 0 3
1775: RET
// export function PrepareNature ; var i ; begin
1776: LD_INT 0
1778: PPUSH
1779: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
1780: LD_INT 18
1782: PPUSH
1783: LD_INT 5
1785: PUSH
1786: LD_INT 4
1788: PUSH
1789: LD_INT 3
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: LIST
1796: PUSH
1797: LD_OWVAR 67
1801: ARRAY
1802: PPUSH
1803: CALL 1639 0 2
// for i := 1 to 3 do
1807: LD_ADDR_VAR 0 2
1811: PUSH
1812: DOUBLE
1813: LD_INT 1
1815: DEC
1816: ST_TO_ADDR
1817: LD_INT 3
1819: PUSH
1820: FOR_TO
1821: IFFALSE 1856
// begin hc_class := 21 ;
1823: LD_ADDR_OWVAR 28
1827: PUSH
1828: LD_INT 21
1830: ST_TO_ADDR
// hc_gallery :=  ;
1831: LD_ADDR_OWVAR 33
1835: PUSH
1836: LD_STRING 
1838: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1839: CALL_OW 44
1843: PPUSH
1844: LD_INT 18
1846: PPUSH
1847: LD_INT 0
1849: PPUSH
1850: CALL_OW 49
// end ;
1854: GO 1820
1856: POP
1857: POP
// for i := 1 to 2 do
1858: LD_ADDR_VAR 0 2
1862: PUSH
1863: DOUBLE
1864: LD_INT 1
1866: DEC
1867: ST_TO_ADDR
1868: LD_INT 2
1870: PUSH
1871: FOR_TO
1872: IFFALSE 1907
// begin hc_class := 18 ;
1874: LD_ADDR_OWVAR 28
1878: PUSH
1879: LD_INT 18
1881: ST_TO_ADDR
// hc_gallery :=  ;
1882: LD_ADDR_OWVAR 33
1886: PUSH
1887: LD_STRING 
1889: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1890: CALL_OW 44
1894: PPUSH
1895: LD_INT 18
1897: PPUSH
1898: LD_INT 0
1900: PPUSH
1901: CALL_OW 49
// end ;
1905: GO 1871
1907: POP
1908: POP
// for i := 1 to 2 do
1909: LD_ADDR_VAR 0 2
1913: PUSH
1914: DOUBLE
1915: LD_INT 1
1917: DEC
1918: ST_TO_ADDR
1919: LD_INT 2
1921: PUSH
1922: FOR_TO
1923: IFFALSE 1958
// begin hc_class := 13 ;
1925: LD_ADDR_OWVAR 28
1929: PUSH
1930: LD_INT 13
1932: ST_TO_ADDR
// hc_gallery :=  ;
1933: LD_ADDR_OWVAR 33
1937: PUSH
1938: LD_STRING 
1940: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1941: CALL_OW 44
1945: PPUSH
1946: LD_INT 18
1948: PPUSH
1949: LD_INT 0
1951: PPUSH
1952: CALL_OW 49
// end ;
1956: GO 1922
1958: POP
1959: POP
// end ;
1960: LD_VAR 0 1
1964: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1965: LD_INT 0
1967: PPUSH
1968: PPUSH
1969: PPUSH
1970: PPUSH
1971: PPUSH
// result := false ;
1972: LD_ADDR_VAR 0 4
1976: PUSH
1977: LD_INT 0
1979: ST_TO_ADDR
// if not sideList or not enemySide then
1980: LD_VAR 0 1
1984: NOT
1985: PUSH
1986: LD_VAR 0 2
1990: NOT
1991: OR
1992: IFFALSE 1996
// exit ;
1994: GO 2139
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1996: LD_ADDR_VAR 0 7
2000: PUSH
2001: LD_INT 22
2003: PUSH
2004: LD_VAR 0 2
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: PPUSH
2013: CALL_OW 69
2017: ST_TO_ADDR
// if not tmp then
2018: LD_VAR 0 7
2022: NOT
2023: IFFALSE 2027
// exit ;
2025: GO 2139
// for s in sideList do
2027: LD_ADDR_VAR 0 6
2031: PUSH
2032: LD_VAR 0 1
2036: PUSH
2037: FOR_IN
2038: IFFALSE 2137
// for i in tmp do
2040: LD_ADDR_VAR 0 5
2044: PUSH
2045: LD_VAR 0 7
2049: PUSH
2050: FOR_IN
2051: IFFALSE 2133
// if See ( s , i ) then
2053: LD_VAR 0 6
2057: PPUSH
2058: LD_VAR 0 5
2062: PPUSH
2063: CALL_OW 292
2067: IFFALSE 2131
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
2069: LD_ADDR_VAR 0 8
2073: PUSH
2074: LD_INT 22
2076: PUSH
2077: LD_VAR 0 6
2081: PUSH
2082: EMPTY
2083: LIST
2084: LIST
2085: PPUSH
2086: CALL_OW 69
2090: PPUSH
2091: LD_VAR 0 5
2095: PPUSH
2096: CALL_OW 74
2100: ST_TO_ADDR
// if tmp2 in exceptUnits then
2101: LD_VAR 0 8
2105: PUSH
2106: LD_VAR 0 3
2110: IN
2111: IFFALSE 2117
// continue else
2113: GO 2050
2115: GO 2131
// begin result := true ;
2117: LD_ADDR_VAR 0 4
2121: PUSH
2122: LD_INT 1
2124: ST_TO_ADDR
// exit ;
2125: POP
2126: POP
2127: POP
2128: POP
2129: GO 2139
// end ; end ;
2131: GO 2050
2133: POP
2134: POP
2135: GO 2037
2137: POP
2138: POP
// end ; end_of_file
2139: LD_VAR 0 4
2143: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
2144: LD_INT 0
2146: PPUSH
2147: PPUSH
// uc_side := 5 ;
2148: LD_ADDR_OWVAR 20
2152: PUSH
2153: LD_INT 5
2155: ST_TO_ADDR
// uc_nation := 2 ;
2156: LD_ADDR_OWVAR 21
2160: PUSH
2161: LD_INT 2
2163: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2164: LD_ADDR_EXP 36
2168: PUSH
2169: LD_STRING Abdul
2171: PPUSH
2172: LD_INT 0
2174: PPUSH
2175: LD_STRING 
2177: PPUSH
2178: CALL 282 0 3
2182: ST_TO_ADDR
// uc_side := 2 ;
2183: LD_ADDR_OWVAR 20
2187: PUSH
2188: LD_INT 2
2190: ST_TO_ADDR
// uc_nation := 2 ;
2191: LD_ADDR_OWVAR 21
2195: PUSH
2196: LD_INT 2
2198: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
2199: LD_ADDR_EXP 25
2203: PUSH
2204: LD_STRING Heike
2206: PPUSH
2207: LD_EXP 1
2211: NOT
2212: PPUSH
2213: LD_EXP 2
2217: PPUSH
2218: CALL 282 0 3
2222: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
2223: LD_ADDR_EXP 28
2227: PUSH
2228: LD_STRING Ibrahim
2230: PPUSH
2231: LD_EXP 1
2235: NOT
2236: PPUSH
2237: LD_EXP 2
2241: PPUSH
2242: CALL 282 0 3
2246: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
2247: LD_ADDR_EXP 26
2251: PUSH
2252: LD_STRING Givi
2254: PPUSH
2255: LD_EXP 1
2259: NOT
2260: PPUSH
2261: LD_EXP 2
2265: PPUSH
2266: CALL 282 0 3
2270: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
2271: LD_ADDR_EXP 29
2275: PUSH
2276: LD_STRING Kamil
2278: PPUSH
2279: LD_EXP 1
2283: NOT
2284: PPUSH
2285: LD_EXP 2
2289: PPUSH
2290: CALL 282 0 3
2294: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
2295: LD_ADDR_EXP 30
2299: PUSH
2300: LD_STRING Kaia
2302: PPUSH
2303: LD_EXP 1
2307: NOT
2308: PPUSH
2309: LD_EXP 2
2313: PPUSH
2314: CALL 282 0 3
2318: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
2319: LD_ADDR_EXP 31
2323: PUSH
2324: LD_STRING Sophia
2326: PPUSH
2327: LD_EXP 1
2331: NOT
2332: PPUSH
2333: LD_EXP 2
2337: PPUSH
2338: CALL 282 0 3
2342: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2343: LD_ADDR_EXP 32
2347: PUSH
2348: LD_STRING Markov
2350: PPUSH
2351: LD_EXP 1
2355: NOT
2356: PPUSH
2357: LD_EXP 2
2361: PPUSH
2362: CALL 282 0 3
2366: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2367: LD_ADDR_EXP 35
2371: PUSH
2372: LD_STRING Aviradze
2374: PPUSH
2375: LD_EXP 1
2379: NOT
2380: PPUSH
2381: LD_EXP 2
2385: PPUSH
2386: CALL 282 0 3
2390: ST_TO_ADDR
// aviradzeSquad := [ ] ;
2391: LD_ADDR_EXP 39
2395: PUSH
2396: EMPTY
2397: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
2398: LD_ADDR_EXP 37
2402: PUSH
2403: LD_STRING 03_others
2405: PPUSH
2406: CALL_OW 31
2410: ST_TO_ADDR
// uc_side := 5 ;
2411: LD_ADDR_OWVAR 20
2415: PUSH
2416: LD_INT 5
2418: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
2419: LD_ADDR_EXP 34
2423: PUSH
2424: LD_STRING Kurt
2426: PPUSH
2427: LD_INT 0
2429: PPUSH
2430: LD_STRING 
2432: PPUSH
2433: CALL 282 0 3
2437: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2438: LD_ADDR_EXP 27
2442: PUSH
2443: LD_STRING Mike
2445: PPUSH
2446: LD_EXP 1
2450: NOT
2451: PPUSH
2452: LD_EXP 2
2456: PPUSH
2457: CALL 282 0 3
2461: ST_TO_ADDR
// if Mike then
2462: LD_EXP 27
2466: IFFALSE 2489
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
2468: LD_EXP 27
2472: PPUSH
2473: LD_INT 142
2475: PPUSH
2476: LD_INT 63
2478: PPUSH
2479: LD_INT 2
2481: PPUSH
2482: LD_INT 0
2484: PPUSH
2485: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
2489: LD_EXP 34
2493: PPUSH
2494: LD_INT 142
2496: PPUSH
2497: LD_INT 63
2499: PPUSH
2500: LD_INT 3
2502: PPUSH
2503: LD_INT 0
2505: PPUSH
2506: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
2510: LD_EXP 34
2514: PUSH
2515: LD_EXP 27
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PPUSH
2524: CALL_OW 140
// end ;
2528: LD_VAR 0 1
2532: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
2533: LD_INT 0
2535: PPUSH
2536: PPUSH
2537: PPUSH
2538: PPUSH
// uc_side := 5 ;
2539: LD_ADDR_OWVAR 20
2543: PUSH
2544: LD_INT 5
2546: ST_TO_ADDR
// uc_nation := 2 ;
2547: LD_ADDR_OWVAR 21
2551: PUSH
2552: LD_INT 2
2554: ST_TO_ADDR
// InitHc ;
2555: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
2559: LD_ADDR_EXP 33
2563: PUSH
2564: LD_STRING Omar
2566: PPUSH
2567: LD_INT 0
2569: PPUSH
2570: LD_STRING 
2572: PPUSH
2573: CALL 282 0 3
2577: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
2578: LD_EXP 33
2582: PPUSH
2583: LD_INT 284
2585: PPUSH
2586: LD_INT 163
2588: PPUSH
2589: LD_INT 0
2591: PPUSH
2592: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
2596: LD_EXP 33
2600: PPUSH
2601: LD_INT 256
2603: PPUSH
2604: LD_INT 129
2606: PPUSH
2607: CALL_OW 111
// wait ( 0 0$2 ) ;
2611: LD_INT 70
2613: PPUSH
2614: CALL_OW 67
// omarSquad := [ ] ;
2618: LD_ADDR_EXP 38
2622: PUSH
2623: EMPTY
2624: ST_TO_ADDR
// for i := 1 to 5 do
2625: LD_ADDR_VAR 0 2
2629: PUSH
2630: DOUBLE
2631: LD_INT 1
2633: DEC
2634: ST_TO_ADDR
2635: LD_INT 5
2637: PUSH
2638: FOR_TO
2639: IFFALSE 2845
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
2641: LD_INT 5
2643: PPUSH
2644: LD_INT 2
2646: PPUSH
2647: LD_INT 13
2649: PUSH
2650: LD_INT 14
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: PUSH
2657: LD_VAR 0 2
2661: PUSH
2662: LD_INT 2
2664: MOD
2665: PUSH
2666: LD_INT 1
2668: PLUS
2669: ARRAY
2670: PPUSH
2671: LD_INT 1
2673: PPUSH
2674: LD_INT 1
2676: PPUSH
2677: LD_INT 25
2679: PUSH
2680: LD_INT 27
2682: PUSH
2683: LD_INT 26
2685: PUSH
2686: EMPTY
2687: LIST
2688: LIST
2689: LIST
2690: PUSH
2691: LD_VAR 0 2
2695: PUSH
2696: LD_INT 3
2698: MOD
2699: PUSH
2700: LD_INT 1
2702: PLUS
2703: ARRAY
2704: PPUSH
2705: LD_INT 100
2707: PPUSH
2708: CALL 345 0 7
// veh := CreateVehicle ;
2712: LD_ADDR_VAR 0 4
2716: PUSH
2717: CALL_OW 45
2721: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2722: LD_VAR 0 4
2726: PPUSH
2727: LD_INT 5
2729: PPUSH
2730: CALL_OW 233
// omarSquad := omarSquad union veh ;
2734: LD_ADDR_EXP 38
2738: PUSH
2739: LD_EXP 38
2743: PUSH
2744: LD_VAR 0 4
2748: UNION
2749: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
2750: LD_VAR 0 4
2754: PPUSH
2755: LD_INT 284
2757: PPUSH
2758: LD_INT 163
2760: PPUSH
2761: LD_INT 0
2763: PPUSH
2764: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
2768: LD_INT 0
2770: PPUSH
2771: LD_INT 3
2773: PPUSH
2774: LD_INT 3
2776: PPUSH
2777: CALL_OW 380
// un := CreateHuman ;
2781: LD_ADDR_VAR 0 3
2785: PUSH
2786: CALL_OW 44
2790: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2791: LD_ADDR_EXP 38
2795: PUSH
2796: LD_EXP 38
2800: PUSH
2801: LD_VAR 0 3
2805: UNION
2806: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2807: LD_VAR 0 3
2811: PPUSH
2812: LD_VAR 0 4
2816: PPUSH
2817: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
2821: LD_VAR 0 3
2825: PPUSH
2826: LD_INT 271
2828: PPUSH
2829: LD_INT 144
2831: PPUSH
2832: CALL_OW 111
// wait ( 0 0$2 ) ;
2836: LD_INT 70
2838: PPUSH
2839: CALL_OW 67
// end ;
2843: GO 2638
2845: POP
2846: POP
// for i := 1 to 3 do
2847: LD_ADDR_VAR 0 2
2851: PUSH
2852: DOUBLE
2853: LD_INT 1
2855: DEC
2856: ST_TO_ADDR
2857: LD_INT 3
2859: PUSH
2860: FOR_TO
2861: IFFALSE 2944
// begin PrepareHuman ( false , 1 , 3 ) ;
2863: LD_INT 0
2865: PPUSH
2866: LD_INT 1
2868: PPUSH
2869: LD_INT 3
2871: PPUSH
2872: CALL_OW 380
// un := CreateHuman ;
2876: LD_ADDR_VAR 0 3
2880: PUSH
2881: CALL_OW 44
2885: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2886: LD_ADDR_EXP 38
2890: PUSH
2891: LD_EXP 38
2895: PUSH
2896: LD_VAR 0 3
2900: UNION
2901: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
2902: LD_VAR 0 3
2906: PPUSH
2907: LD_INT 284
2909: PPUSH
2910: LD_INT 163
2912: PPUSH
2913: LD_INT 0
2915: PPUSH
2916: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
2920: LD_VAR 0 3
2924: PPUSH
2925: LD_INT 257
2927: PPUSH
2928: LD_INT 138
2930: PPUSH
2931: CALL_OW 111
// wait ( 0 0$1 ) ;
2935: LD_INT 35
2937: PPUSH
2938: CALL_OW 67
// end ;
2942: GO 2860
2944: POP
2945: POP
// for i := 1 to 6 do
2946: LD_ADDR_VAR 0 2
2950: PUSH
2951: DOUBLE
2952: LD_INT 1
2954: DEC
2955: ST_TO_ADDR
2956: LD_INT 6
2958: PUSH
2959: FOR_TO
2960: IFFALSE 3093
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2962: LD_INT 0
2964: PPUSH
2965: LD_INT 1
2967: PUSH
2968: LD_INT 1
2970: PUSH
2971: LD_INT 4
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: LIST
2978: PUSH
2979: LD_VAR 0 2
2983: PUSH
2984: LD_INT 3
2986: MOD
2987: PUSH
2988: LD_INT 1
2990: PLUS
2991: ARRAY
2992: PPUSH
2993: LD_INT 3
2995: PPUSH
2996: CALL_OW 380
// un := CreateHuman ;
3000: LD_ADDR_VAR 0 3
3004: PUSH
3005: CALL_OW 44
3009: ST_TO_ADDR
// omarSquad := omarSquad union un ;
3010: LD_ADDR_EXP 38
3014: PUSH
3015: LD_EXP 38
3019: PUSH
3020: LD_VAR 0 3
3024: UNION
3025: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
3026: LD_VAR 0 3
3030: PPUSH
3031: LD_INT 225
3033: PPUSH
3034: LD_INT 163
3036: PPUSH
3037: LD_INT 0
3039: PPUSH
3040: CALL_OW 48
// if i = 1 then
3044: LD_VAR 0 2
3048: PUSH
3049: LD_INT 1
3051: EQUAL
3052: IFFALSE 3069
// SetAttr ( un , attr_speed , 12 ) ;
3054: LD_VAR 0 3
3058: PPUSH
3059: LD_INT 2
3061: PPUSH
3062: LD_INT 12
3064: PPUSH
3065: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
3069: LD_VAR 0 3
3073: PPUSH
3074: LD_INT 222
3076: PPUSH
3077: LD_INT 157
3079: PPUSH
3080: CALL_OW 111
// wait ( 0 0$1 ) ;
3084: LD_INT 35
3086: PPUSH
3087: CALL_OW 67
// end ;
3091: GO 2959
3093: POP
3094: POP
// end ; end_of_file
3095: LD_VAR 0 1
3099: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
3100: LD_INT 0
3102: PPUSH
3103: PPUSH
3104: PPUSH
3105: PPUSH
3106: PPUSH
3107: PPUSH
// ruLab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ;
3108: LD_ADDR_EXP 50
3112: PUSH
3113: LD_INT 22
3115: PUSH
3116: LD_INT 3
3118: PUSH
3119: EMPTY
3120: LIST
3121: LIST
3122: PUSH
3123: LD_INT 30
3125: PUSH
3126: LD_INT 7
3128: PUSH
3129: EMPTY
3130: LIST
3131: LIST
3132: PUSH
3133: EMPTY
3134: LIST
3135: LIST
3136: PPUSH
3137: CALL_OW 69
3141: PUSH
3142: LD_INT 1
3144: ARRAY
3145: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
3146: LD_ADDR_VAR 0 2
3150: PUSH
3151: LD_INT 21
3153: PUSH
3154: LD_INT 3
3156: PUSH
3157: EMPTY
3158: LIST
3159: LIST
3160: PUSH
3161: LD_INT 23
3163: PUSH
3164: LD_INT 3
3166: PUSH
3167: EMPTY
3168: LIST
3169: LIST
3170: PUSH
3171: EMPTY
3172: LIST
3173: LIST
3174: PPUSH
3175: CALL_OW 69
3179: PUSH
3180: FOR_IN
3181: IFFALSE 3197
// SetBLevel ( i , 5 ) ;
3183: LD_VAR 0 2
3187: PPUSH
3188: LD_INT 5
3190: PPUSH
3191: CALL_OW 241
3195: GO 3180
3197: POP
3198: POP
// SetBName ( kirov , kirov ) ;
3199: LD_INT 71
3201: PPUSH
3202: LD_STRING kirov
3204: PPUSH
3205: CALL_OW 500
// SetBName ( beria , beria ) ;
3209: LD_INT 106
3211: PPUSH
3212: LD_STRING beria
3214: PPUSH
3215: CALL_OW 500
// SetBName ( kagan , kagan ) ;
3219: LD_INT 112
3221: PPUSH
3222: LD_STRING kagan
3224: PPUSH
3225: CALL_OW 500
// uc_side := 6 ;
3229: LD_ADDR_OWVAR 20
3233: PUSH
3234: LD_INT 6
3236: ST_TO_ADDR
// uc_nation := 3 ;
3237: LD_ADDR_OWVAR 21
3241: PUSH
3242: LD_INT 3
3244: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
3245: LD_ADDR_VAR 0 5
3249: PUSH
3250: LD_INT 22
3252: PUSH
3253: LD_INT 6
3255: PUSH
3256: EMPTY
3257: LIST
3258: LIST
3259: PUSH
3260: LD_INT 30
3262: PUSH
3263: LD_INT 5
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: PUSH
3270: EMPTY
3271: LIST
3272: LIST
3273: PPUSH
3274: CALL_OW 69
3278: PUSH
3279: LD_INT 1
3281: ARRAY
3282: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
3283: LD_ADDR_VAR 0 4
3287: PUSH
3288: LD_INT 22
3290: PUSH
3291: LD_INT 6
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PUSH
3298: LD_INT 30
3300: PUSH
3301: LD_INT 4
3303: PUSH
3304: EMPTY
3305: LIST
3306: LIST
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: PPUSH
3312: CALL_OW 69
3316: PUSH
3317: LD_INT 1
3319: ARRAY
3320: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
3321: LD_ADDR_EXP 44
3325: PUSH
3326: EMPTY
3327: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
3328: LD_ADDR_EXP 45
3332: PUSH
3333: EMPTY
3334: ST_TO_ADDR
// russianPatrol := [ ] ;
3335: LD_ADDR_EXP 47
3339: PUSH
3340: EMPTY
3341: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
3342: LD_ADDR_EXP 40
3346: PUSH
3347: LD_STRING Kurin
3349: PPUSH
3350: LD_INT 0
3352: PPUSH
3353: LD_STRING 
3355: PPUSH
3356: CALL 282 0 3
3360: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
3361: LD_EXP 40
3365: PPUSH
3366: LD_INT 71
3368: PPUSH
3369: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
3373: LD_ADDR_EXP 42
3377: PUSH
3378: LD_STRING Popov
3380: PPUSH
3381: LD_INT 0
3383: PPUSH
3384: LD_STRING 
3386: PPUSH
3387: CALL 282 0 3
3391: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
3392: LD_EXP 42
3396: PPUSH
3397: LD_INT 71
3399: PPUSH
3400: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
3404: LD_ADDR_EXP 41
3408: PUSH
3409: LD_STRING Grishko
3411: PPUSH
3412: LD_INT 0
3414: PPUSH
3415: LD_STRING 
3417: PPUSH
3418: CALL 282 0 3
3422: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
3423: LD_EXP 41
3427: PPUSH
3428: LD_INT 207
3430: PPUSH
3431: LD_INT 106
3433: PPUSH
3434: LD_INT 0
3436: PPUSH
3437: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
3441: LD_EXP 41
3445: PPUSH
3446: LD_INT 209
3448: PPUSH
3449: LD_INT 106
3451: PPUSH
3452: CALL_OW 118
// for i := 1 to 2 do
3456: LD_ADDR_VAR 0 2
3460: PUSH
3461: DOUBLE
3462: LD_INT 1
3464: DEC
3465: ST_TO_ADDR
3466: LD_INT 2
3468: PUSH
3469: FOR_TO
3470: IFFALSE 3525
// begin PrepareHuman ( false , 2 , 2 ) ;
3472: LD_INT 0
3474: PPUSH
3475: LD_INT 2
3477: PPUSH
3478: LD_INT 2
3480: PPUSH
3481: CALL_OW 380
// un := CreateHuman ;
3485: LD_ADDR_VAR 0 3
3489: PUSH
3490: CALL_OW 44
3494: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
3495: LD_VAR 0 3
3499: PPUSH
3500: LD_INT 71
3502: PPUSH
3503: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3507: LD_ADDR_EXP 44
3511: PUSH
3512: LD_EXP 44
3516: PUSH
3517: LD_VAR 0 3
3521: UNION
3522: ST_TO_ADDR
// end ;
3523: GO 3469
3525: POP
3526: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
3527: LD_ADDR_VAR 0 2
3531: PUSH
3532: DOUBLE
3533: LD_INT 1
3535: DEC
3536: ST_TO_ADDR
3537: LD_INT 5
3539: PUSH
3540: LD_INT 6
3542: PUSH
3543: LD_INT 6
3545: PUSH
3546: EMPTY
3547: LIST
3548: LIST
3549: LIST
3550: PUSH
3551: LD_OWVAR 67
3555: ARRAY
3556: PUSH
3557: FOR_TO
3558: IFFALSE 3632
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3560: LD_INT 0
3562: PPUSH
3563: LD_INT 1
3565: PPUSH
3566: LD_INT 2
3568: PUSH
3569: LD_INT 3
3571: PUSH
3572: LD_INT 4
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: LIST
3579: PUSH
3580: LD_OWVAR 67
3584: ARRAY
3585: PPUSH
3586: CALL_OW 380
// un := CreateHuman ;
3590: LD_ADDR_VAR 0 3
3594: PUSH
3595: CALL_OW 44
3599: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
3600: LD_VAR 0 3
3604: PPUSH
3605: LD_VAR 0 5
3609: PPUSH
3610: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3614: LD_ADDR_EXP 44
3618: PUSH
3619: LD_EXP 44
3623: PUSH
3624: LD_VAR 0 3
3628: UNION
3629: ST_TO_ADDR
// end ;
3630: GO 3557
3632: POP
3633: POP
// for i := 1 to 3 do
3634: LD_ADDR_VAR 0 2
3638: PUSH
3639: DOUBLE
3640: LD_INT 1
3642: DEC
3643: ST_TO_ADDR
3644: LD_INT 3
3646: PUSH
3647: FOR_TO
3648: IFFALSE 3703
// begin PrepareHuman ( false , 3 , 3 ) ;
3650: LD_INT 0
3652: PPUSH
3653: LD_INT 3
3655: PPUSH
3656: LD_INT 3
3658: PPUSH
3659: CALL_OW 380
// un := CreateHuman ;
3663: LD_ADDR_VAR 0 3
3667: PUSH
3668: CALL_OW 44
3672: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
3673: LD_VAR 0 3
3677: PPUSH
3678: LD_INT 92
3680: PPUSH
3681: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3685: LD_ADDR_EXP 44
3689: PUSH
3690: LD_EXP 44
3694: PUSH
3695: LD_VAR 0 3
3699: UNION
3700: ST_TO_ADDR
// end ;
3701: GO 3647
3703: POP
3704: POP
// for i := 1 to 2 do
3705: LD_ADDR_VAR 0 2
3709: PUSH
3710: DOUBLE
3711: LD_INT 1
3713: DEC
3714: ST_TO_ADDR
3715: LD_INT 2
3717: PUSH
3718: FOR_TO
3719: IFFALSE 3774
// begin PrepareHuman ( false , 4 , 3 ) ;
3721: LD_INT 0
3723: PPUSH
3724: LD_INT 4
3726: PPUSH
3727: LD_INT 3
3729: PPUSH
3730: CALL_OW 380
// un := CreateHuman ;
3734: LD_ADDR_VAR 0 3
3738: PUSH
3739: CALL_OW 44
3743: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
3744: LD_VAR 0 3
3748: PPUSH
3749: LD_INT 83
3751: PPUSH
3752: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3756: LD_ADDR_EXP 44
3760: PUSH
3761: LD_EXP 44
3765: PUSH
3766: LD_VAR 0 3
3770: UNION
3771: ST_TO_ADDR
// end ;
3772: GO 3718
3774: POP
3775: POP
// for i := 1 to 5 do
3776: LD_ADDR_VAR 0 2
3780: PUSH
3781: DOUBLE
3782: LD_INT 1
3784: DEC
3785: ST_TO_ADDR
3786: LD_INT 5
3788: PUSH
3789: FOR_TO
3790: IFFALSE 3847
// begin PrepareHuman ( false , 1 , 3 ) ;
3792: LD_INT 0
3794: PPUSH
3795: LD_INT 1
3797: PPUSH
3798: LD_INT 3
3800: PPUSH
3801: CALL_OW 380
// un := CreateHuman ;
3805: LD_ADDR_VAR 0 3
3809: PUSH
3810: CALL_OW 44
3814: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3815: LD_VAR 0 3
3819: PPUSH
3820: LD_VAR 0 4
3824: PPUSH
3825: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3829: LD_ADDR_EXP 46
3833: PUSH
3834: LD_EXP 46
3838: PUSH
3839: LD_VAR 0 3
3843: UNION
3844: ST_TO_ADDR
// end ;
3845: GO 3789
3847: POP
3848: POP
// russianCargo := [ ] ;
3849: LD_ADDR_EXP 49
3853: PUSH
3854: EMPTY
3855: ST_TO_ADDR
// for i := 1 to 2 do
3856: LD_ADDR_VAR 0 2
3860: PUSH
3861: DOUBLE
3862: LD_INT 1
3864: DEC
3865: ST_TO_ADDR
3866: LD_INT 2
3868: PUSH
3869: FOR_TO
3870: IFFALSE 4002
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3872: LD_INT 6
3874: PPUSH
3875: LD_INT 3
3877: PPUSH
3878: LD_INT 21
3880: PPUSH
3881: LD_INT 1
3883: PPUSH
3884: LD_INT 1
3886: PPUSH
3887: LD_INT 51
3889: PPUSH
3890: LD_INT 100
3892: PPUSH
3893: CALL 345 0 7
// un := CreateVehicle ;
3897: LD_ADDR_VAR 0 3
3901: PUSH
3902: CALL_OW 45
3906: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3907: LD_ADDR_EXP 49
3911: PUSH
3912: LD_EXP 49
3916: PUSH
3917: LD_VAR 0 3
3921: UNION
3922: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3923: LD_VAR 0 3
3927: PPUSH
3928: LD_INT 2
3930: PPUSH
3931: LD_INT 100
3933: PPUSH
3934: CALL_OW 290
// SetDir ( un , 4 ) ;
3938: LD_VAR 0 3
3942: PPUSH
3943: LD_INT 4
3945: PPUSH
3946: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3950: LD_VAR 0 3
3954: PPUSH
3955: LD_INT 147
3957: PPUSH
3958: LD_INT 103
3960: PPUSH
3961: LD_INT 4
3963: PPUSH
3964: LD_INT 0
3966: PPUSH
3967: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3971: LD_INT 0
3973: PPUSH
3974: LD_INT 1
3976: PPUSH
3977: LD_OWVAR 67
3981: PPUSH
3982: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3986: CALL_OW 44
3990: PPUSH
3991: LD_VAR 0 3
3995: PPUSH
3996: CALL_OW 52
// end ;
4000: GO 3869
4002: POP
4003: POP
// uc_side := 3 ;
4004: LD_ADDR_OWVAR 20
4008: PUSH
4009: LD_INT 3
4011: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
4012: LD_ADDR_EXP 43
4016: PUSH
4017: LD_STRING Burlak
4019: PPUSH
4020: LD_INT 0
4022: PPUSH
4023: LD_STRING 
4025: PPUSH
4026: CALL 282 0 3
4030: ST_TO_ADDR
// for i := 1 to 2 do
4031: LD_ADDR_VAR 0 2
4035: PUSH
4036: DOUBLE
4037: LD_INT 1
4039: DEC
4040: ST_TO_ADDR
4041: LD_INT 2
4043: PUSH
4044: FOR_TO
4045: IFFALSE 4138
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
4047: LD_INT 0
4049: PPUSH
4050: LD_INT 1
4052: PPUSH
4053: LD_OWVAR 67
4057: PUSH
4058: LD_INT 1
4060: PLUS
4061: PPUSH
4062: CALL_OW 380
// un := CreateHuman ;
4066: LD_ADDR_VAR 0 3
4070: PUSH
4071: CALL_OW 44
4075: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
4076: LD_VAR 0 3
4080: PPUSH
4081: LD_INT 22
4083: PUSH
4084: LD_INT 3
4086: PUSH
4087: EMPTY
4088: LIST
4089: LIST
4090: PUSH
4091: LD_INT 30
4093: PUSH
4094: LD_INT 32
4096: PUSH
4097: EMPTY
4098: LIST
4099: LIST
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: PPUSH
4105: CALL_OW 69
4109: PUSH
4110: LD_VAR 0 2
4114: ARRAY
4115: PPUSH
4116: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4120: LD_ADDR_EXP 45
4124: PUSH
4125: LD_EXP 45
4129: PUSH
4130: LD_VAR 0 3
4134: UNION
4135: ST_TO_ADDR
// end ;
4136: GO 4044
4138: POP
4139: POP
// for i := 1 to 2 do
4140: LD_ADDR_VAR 0 2
4144: PUSH
4145: DOUBLE
4146: LD_INT 1
4148: DEC
4149: ST_TO_ADDR
4150: LD_INT 2
4152: PUSH
4153: FOR_TO
4154: IFFALSE 4245
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
4156: LD_INT 0
4158: PPUSH
4159: LD_INT 1
4161: PPUSH
4162: LD_OWVAR 67
4166: PUSH
4167: LD_INT 1
4169: PLUS
4170: PPUSH
4171: CALL_OW 380
// un := CreateHuman ;
4175: LD_ADDR_VAR 0 3
4179: PUSH
4180: CALL_OW 44
4184: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
4185: LD_VAR 0 3
4189: PPUSH
4190: LD_INT 22
4192: PUSH
4193: LD_INT 3
4195: PUSH
4196: EMPTY
4197: LIST
4198: LIST
4199: PUSH
4200: LD_INT 30
4202: PUSH
4203: LD_INT 5
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PPUSH
4214: CALL_OW 69
4218: PUSH
4219: LD_INT 1
4221: ARRAY
4222: PPUSH
4223: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4227: LD_ADDR_EXP 45
4231: PUSH
4232: LD_EXP 45
4236: PUSH
4237: LD_VAR 0 3
4241: UNION
4242: ST_TO_ADDR
// end ;
4243: GO 4153
4245: POP
4246: POP
// for i := 1 to 2 do
4247: LD_ADDR_VAR 0 2
4251: PUSH
4252: DOUBLE
4253: LD_INT 1
4255: DEC
4256: ST_TO_ADDR
4257: LD_INT 2
4259: PUSH
4260: FOR_TO
4261: IFFALSE 4348
// begin PrepareHuman ( false , 4 , Difficulty ) ;
4263: LD_INT 0
4265: PPUSH
4266: LD_INT 4
4268: PPUSH
4269: LD_OWVAR 67
4273: PPUSH
4274: CALL_OW 380
// un := CreateHuman ;
4278: LD_ADDR_VAR 0 3
4282: PUSH
4283: CALL_OW 44
4287: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
4288: LD_VAR 0 3
4292: PPUSH
4293: LD_INT 22
4295: PUSH
4296: LD_INT 3
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: PUSH
4303: LD_INT 30
4305: PUSH
4306: LD_INT 7
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: PPUSH
4317: CALL_OW 69
4321: PUSH
4322: LD_INT 1
4324: ARRAY
4325: PPUSH
4326: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4330: LD_ADDR_EXP 45
4334: PUSH
4335: LD_EXP 45
4339: PUSH
4340: LD_VAR 0 3
4344: UNION
4345: ST_TO_ADDR
// end ;
4346: GO 4260
4348: POP
4349: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
4350: LD_INT 0
4352: PPUSH
4353: LD_INT 2
4355: PPUSH
4356: LD_OWVAR 67
4360: PPUSH
4361: CALL_OW 380
// un := CreateHuman ;
4365: LD_ADDR_VAR 0 3
4369: PUSH
4370: CALL_OW 44
4374: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
4375: LD_VAR 0 3
4379: PPUSH
4380: LD_INT 106
4382: PPUSH
4383: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4387: LD_ADDR_EXP 45
4391: PUSH
4392: LD_EXP 45
4396: PUSH
4397: LD_VAR 0 3
4401: UNION
4402: ST_TO_ADDR
// for i := 1 to 3 do
4403: LD_ADDR_VAR 0 2
4407: PUSH
4408: DOUBLE
4409: LD_INT 1
4411: DEC
4412: ST_TO_ADDR
4413: LD_INT 3
4415: PUSH
4416: FOR_TO
4417: IFFALSE 4539
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
4419: LD_ADDR_VAR 0 6
4423: PUSH
4424: LD_INT 22
4426: PUSH
4427: LD_INT 3
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: PUSH
4434: LD_INT 30
4436: PUSH
4437: LD_INT 31
4439: PUSH
4440: EMPTY
4441: LIST
4442: LIST
4443: PUSH
4444: EMPTY
4445: LIST
4446: LIST
4447: PPUSH
4448: CALL_OW 69
4452: PUSH
4453: LD_VAR 0 2
4457: ARRAY
4458: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
4459: LD_INT 0
4461: PPUSH
4462: LD_INT 1
4464: PPUSH
4465: LD_OWVAR 67
4469: PPUSH
4470: CALL_OW 380
// un := CreateHuman ;
4474: LD_ADDR_VAR 0 3
4478: PUSH
4479: CALL_OW 44
4483: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
4484: LD_VAR 0 3
4488: PPUSH
4489: LD_VAR 0 6
4493: PPUSH
4494: CALL_OW 254
4498: PUSH
4499: LD_INT 3
4501: PLUS
4502: PPUSH
4503: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
4507: LD_VAR 0 3
4511: PPUSH
4512: LD_VAR 0 6
4516: PPUSH
4517: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4521: LD_ADDR_EXP 45
4525: PUSH
4526: LD_EXP 45
4530: PUSH
4531: LD_VAR 0 3
4535: UNION
4536: ST_TO_ADDR
// end ;
4537: GO 4416
4539: POP
4540: POP
// russianOmicronAttackers := [ ] ;
4541: LD_ADDR_EXP 48
4545: PUSH
4546: EMPTY
4547: ST_TO_ADDR
// for i := 1 to 6 do
4548: LD_ADDR_VAR 0 2
4552: PUSH
4553: DOUBLE
4554: LD_INT 1
4556: DEC
4557: ST_TO_ADDR
4558: LD_INT 6
4560: PUSH
4561: FOR_TO
4562: IFFALSE 4786
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
4564: LD_INT 3
4566: PPUSH
4567: LD_INT 3
4569: PPUSH
4570: LD_INT 21
4572: PUSH
4573: LD_INT 23
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: PUSH
4580: LD_VAR 0 2
4584: PUSH
4585: LD_INT 2
4587: MOD
4588: PUSH
4589: LD_INT 1
4591: PLUS
4592: ARRAY
4593: PPUSH
4594: LD_INT 1
4596: PPUSH
4597: LD_INT 1
4599: PPUSH
4600: LD_INT 43
4602: PUSH
4603: LD_INT 44
4605: PUSH
4606: LD_INT 42
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: LIST
4613: PUSH
4614: LD_VAR 0 2
4618: PUSH
4619: LD_INT 3
4621: MOD
4622: PUSH
4623: LD_INT 1
4625: PLUS
4626: ARRAY
4627: PPUSH
4628: LD_INT 100
4630: PPUSH
4631: CALL 345 0 7
// un := CreateVehicle ;
4635: LD_ADDR_VAR 0 3
4639: PUSH
4640: CALL_OW 45
4644: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
4645: LD_VAR 0 3
4649: PPUSH
4650: LD_INT 0
4652: PUSH
4653: LD_INT 5
4655: PUSH
4656: EMPTY
4657: LIST
4658: LIST
4659: PUSH
4660: LD_INT 1
4662: PPUSH
4663: LD_INT 2
4665: PPUSH
4666: CALL_OW 12
4670: ARRAY
4671: PPUSH
4672: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
4676: LD_ADDR_EXP 48
4680: PUSH
4681: LD_EXP 48
4685: PUSH
4686: LD_VAR 0 3
4690: UNION
4691: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
4692: LD_VAR 0 3
4696: PPUSH
4697: LD_INT 127
4699: PPUSH
4700: LD_INT 89
4702: PPUSH
4703: LD_INT 7
4705: PPUSH
4706: LD_INT 0
4708: PPUSH
4709: CALL_OW 50
// uc_side := 3 ;
4713: LD_ADDR_OWVAR 20
4717: PUSH
4718: LD_INT 3
4720: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4721: LD_INT 0
4723: PPUSH
4724: LD_INT 3
4726: PPUSH
4727: LD_INT 3
4729: PPUSH
4730: CALL_OW 380
// un := CreateHuman ;
4734: LD_ADDR_VAR 0 3
4738: PUSH
4739: CALL_OW 44
4743: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4744: LD_ADDR_EXP 48
4748: PUSH
4749: LD_EXP 48
4753: PUSH
4754: LD_VAR 0 3
4758: UNION
4759: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4760: LD_VAR 0 3
4764: PPUSH
4765: LD_EXP 48
4769: PUSH
4770: LD_EXP 48
4774: PUSH
4775: LD_INT 1
4777: MINUS
4778: ARRAY
4779: PPUSH
4780: CALL_OW 52
// end ;
4784: GO 4561
4786: POP
4787: POP
// for i := 1 to 3 do
4788: LD_ADDR_VAR 0 2
4792: PUSH
4793: DOUBLE
4794: LD_INT 1
4796: DEC
4797: ST_TO_ADDR
4798: LD_INT 3
4800: PUSH
4801: FOR_TO
4802: IFFALSE 4868
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4804: LD_INT 0
4806: PPUSH
4807: LD_INT 1
4809: PPUSH
4810: LD_OWVAR 67
4814: PPUSH
4815: CALL_OW 380
// un := CreateHuman ;
4819: LD_ADDR_VAR 0 3
4823: PUSH
4824: CALL_OW 44
4828: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4829: LD_ADDR_EXP 48
4833: PUSH
4834: LD_EXP 48
4838: PUSH
4839: LD_VAR 0 3
4843: UNION
4844: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4845: LD_VAR 0 3
4849: PPUSH
4850: LD_INT 91
4852: PPUSH
4853: LD_INT 60
4855: PPUSH
4856: LD_INT 3
4858: PPUSH
4859: LD_INT 0
4861: PPUSH
4862: CALL_OW 50
// end ;
4866: GO 4801
4868: POP
4869: POP
// end ;
4870: LD_VAR 0 1
4874: RET
// every 0 0$3 do var i ;
4875: GO 4877
4877: DISABLE
4878: LD_INT 0
4880: PPUSH
// begin for i := 1 to 4 do
4881: LD_ADDR_VAR 0 1
4885: PUSH
4886: DOUBLE
4887: LD_INT 1
4889: DEC
4890: ST_TO_ADDR
4891: LD_INT 4
4893: PUSH
4894: FOR_TO
4895: IFFALSE 4914
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4897: LD_EXP 46
4901: PUSH
4902: LD_VAR 0 1
4906: ARRAY
4907: PPUSH
4908: CALL_OW 122
4912: GO 4894
4914: POP
4915: POP
// wait ( 3 ) ;
4916: LD_INT 3
4918: PPUSH
4919: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4923: LD_EXP 46
4927: PUSH
4928: LD_INT 1
4930: ARRAY
4931: PPUSH
4932: LD_INT 22
4934: PUSH
4935: LD_INT 6
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: PUSH
4942: LD_INT 30
4944: PUSH
4945: LD_INT 31
4947: PUSH
4948: EMPTY
4949: LIST
4950: LIST
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: PPUSH
4956: CALL_OW 69
4960: PPUSH
4961: LD_EXP 46
4965: PUSH
4966: LD_INT 1
4968: ARRAY
4969: PPUSH
4970: CALL_OW 74
4974: PPUSH
4975: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4979: LD_EXP 46
4983: PUSH
4984: LD_INT 2
4986: ARRAY
4987: PPUSH
4988: LD_INT 211
4990: PPUSH
4991: LD_INT 107
4993: PPUSH
4994: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4998: LD_EXP 46
5002: PUSH
5003: LD_INT 2
5005: ARRAY
5006: PPUSH
5007: LD_INT 209
5009: PPUSH
5010: LD_INT 106
5012: PPUSH
5013: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
5017: LD_EXP 46
5021: PUSH
5022: LD_INT 3
5024: ARRAY
5025: PPUSH
5026: LD_INT 209
5028: PPUSH
5029: LD_INT 103
5031: PPUSH
5032: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
5036: LD_EXP 46
5040: PUSH
5041: LD_INT 3
5043: ARRAY
5044: PPUSH
5045: LD_INT 209
5047: PPUSH
5048: LD_INT 106
5050: PPUSH
5051: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
5055: LD_EXP 46
5059: PUSH
5060: LD_INT 4
5062: ARRAY
5063: PPUSH
5064: LD_INT 227
5066: PPUSH
5067: LD_INT 117
5069: PPUSH
5070: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
5074: LD_EXP 46
5078: PUSH
5079: LD_INT 4
5081: ARRAY
5082: PPUSH
5083: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
5087: LD_INT 700
5089: PPUSH
5090: CALL_OW 67
// for i := 3 downto 2 do
5094: LD_ADDR_VAR 0 1
5098: PUSH
5099: DOUBLE
5100: LD_INT 3
5102: INC
5103: ST_TO_ADDR
5104: LD_INT 2
5106: PUSH
5107: FOR_DOWNTO
5108: IFFALSE 5275
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
5110: LD_EXP 46
5114: PUSH
5115: LD_VAR 0 1
5119: ARRAY
5120: PPUSH
5121: LD_INT 200
5123: PPUSH
5124: LD_INT 91
5126: PPUSH
5127: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5131: LD_EXP 46
5135: PUSH
5136: LD_VAR 0 1
5140: ARRAY
5141: PPUSH
5142: LD_INT 210
5144: PPUSH
5145: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
5149: LD_EXP 46
5153: PUSH
5154: LD_VAR 0 1
5158: ARRAY
5159: PPUSH
5160: LD_INT 224
5162: PPUSH
5163: LD_INT 93
5165: PPUSH
5166: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5170: LD_EXP 46
5174: PUSH
5175: LD_VAR 0 1
5179: ARRAY
5180: PPUSH
5181: LD_INT 210
5183: PPUSH
5184: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
5188: LD_EXP 46
5192: PUSH
5193: LD_VAR 0 1
5197: ARRAY
5198: PPUSH
5199: LD_INT 239
5201: PPUSH
5202: LD_INT 123
5204: PPUSH
5205: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5209: LD_EXP 46
5213: PUSH
5214: LD_VAR 0 1
5218: ARRAY
5219: PPUSH
5220: LD_INT 210
5222: PPUSH
5223: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
5227: LD_EXP 46
5231: PUSH
5232: LD_VAR 0 1
5236: ARRAY
5237: PPUSH
5238: LD_INT 212
5240: PPUSH
5241: LD_INT 105
5243: PPUSH
5244: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
5248: LD_EXP 46
5252: PUSH
5253: LD_VAR 0 1
5257: ARRAY
5258: PPUSH
5259: LD_INT 700
5261: PPUSH
5262: CALL_OW 202
// wait ( 0 0$30 ) ;
5266: LD_INT 1050
5268: PPUSH
5269: CALL_OW 67
// end ;
5273: GO 5107
5275: POP
5276: POP
// until not activeGrishkoAI ;
5277: LD_EXP 10
5281: NOT
5282: IFFALSE 5087
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
5284: LD_EXP 46
5288: PPUSH
5289: LD_INT 221
5291: PPUSH
5292: LD_INT 110
5294: PPUSH
5295: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
5299: LD_EXP 46
5303: PPUSH
5304: LD_INT 228
5306: PPUSH
5307: LD_INT 115
5309: PPUSH
5310: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
5314: LD_EXP 46
5318: PPUSH
5319: CALL_OW 200
// end ;
5323: PPOPN 1
5325: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
5326: LD_EXP 12
5330: IFFALSE 6026
5332: GO 5334
5334: DISABLE
5335: LD_INT 0
5337: PPUSH
5338: PPUSH
5339: PPUSH
5340: PPUSH
// begin uc_side := 6 ;
5341: LD_ADDR_OWVAR 20
5345: PUSH
5346: LD_INT 6
5348: ST_TO_ADDR
// uc_nation := 3 ;
5349: LD_ADDR_OWVAR 21
5353: PUSH
5354: LD_INT 3
5356: ST_TO_ADDR
// for i := 1 to 3 do
5357: LD_ADDR_VAR 0 2
5361: PUSH
5362: DOUBLE
5363: LD_INT 1
5365: DEC
5366: ST_TO_ADDR
5367: LD_INT 3
5369: PUSH
5370: FOR_TO
5371: IFFALSE 5480
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
5373: LD_INT 0
5375: PPUSH
5376: LD_INT 1
5378: PPUSH
5379: LD_INT 2
5381: PUSH
5382: LD_INT 3
5384: PUSH
5385: LD_INT 4
5387: PUSH
5388: EMPTY
5389: LIST
5390: LIST
5391: LIST
5392: PUSH
5393: LD_OWVAR 67
5397: ARRAY
5398: PPUSH
5399: CALL_OW 380
// un := CreateHuman ;
5403: LD_ADDR_VAR 0 1
5407: PUSH
5408: CALL_OW 44
5412: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
5413: LD_ADDR_EXP 47
5417: PUSH
5418: LD_EXP 47
5422: PUSH
5423: LD_VAR 0 1
5427: UNION
5428: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5429: LD_VAR 0 1
5433: PPUSH
5434: LD_INT 1
5436: PPUSH
5437: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
5441: LD_VAR 0 1
5445: PPUSH
5446: LD_INT 11
5448: PPUSH
5449: LD_INT 0
5451: PPUSH
5452: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
5456: LD_VAR 0 1
5460: PPUSH
5461: LD_INT 210
5463: PPUSH
5464: LD_INT 159
5466: PPUSH
5467: CALL_OW 111
// wait ( 0 0$2 ) ;
5471: LD_INT 70
5473: PPUSH
5474: CALL_OW 67
// end ;
5478: GO 5370
5480: POP
5481: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
5482: LD_ADDR_VAR 0 4
5486: PUSH
5487: LD_INT 172
5489: PUSH
5490: LD_INT 76
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: PUSH
5497: LD_INT 150
5499: PUSH
5500: LD_INT 38
5502: PUSH
5503: EMPTY
5504: LIST
5505: LIST
5506: PUSH
5507: LD_INT 148
5509: PUSH
5510: LD_INT 9
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: PUSH
5517: LD_INT 165
5519: PUSH
5520: LD_INT 38
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: PUSH
5533: LD_INT 191
5535: PUSH
5536: LD_INT 77
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: PUSH
5543: LD_INT 168
5545: PUSH
5546: LD_INT 42
5548: PUSH
5549: EMPTY
5550: LIST
5551: LIST
5552: PUSH
5553: LD_INT 166
5555: PUSH
5556: LD_INT 11
5558: PUSH
5559: EMPTY
5560: LIST
5561: LIST
5562: PUSH
5563: LD_INT 151
5565: PUSH
5566: LD_INT 12
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: PUSH
5579: LD_INT 221
5581: PUSH
5582: LD_INT 88
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: PUSH
5589: LD_INT 217
5591: PUSH
5592: LD_INT 64
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PUSH
5599: LD_INT 232
5601: PUSH
5602: LD_INT 66
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: PUSH
5609: LD_INT 200
5611: PUSH
5612: LD_INT 56
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: LIST
5629: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5630: LD_INT 35
5632: PPUSH
5633: CALL_OW 67
// for i := 1 to patrol do
5637: LD_ADDR_VAR 0 2
5641: PUSH
5642: DOUBLE
5643: LD_INT 1
5645: DEC
5646: ST_TO_ADDR
5647: LD_VAR 0 4
5651: PUSH
5652: FOR_TO
5653: IFFALSE 5990
// begin if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
5655: LD_EXP 47
5659: PUSH
5660: LD_VAR 0 2
5664: ARRAY
5665: PPUSH
5666: CALL_OW 256
5670: PUSH
5671: LD_INT 990
5673: LESS
5674: PUSH
5675: LD_EXP 47
5679: PUSH
5680: LD_VAR 0 2
5684: ARRAY
5685: PPUSH
5686: CALL_OW 110
5690: PUSH
5691: LD_INT 1
5693: EQUAL
5694: AND
5695: IFFALSE 5715
// SetTag ( russianPatrol [ i ] , 2 ) ;
5697: LD_EXP 47
5701: PUSH
5702: LD_VAR 0 2
5706: ARRAY
5707: PPUSH
5708: LD_INT 2
5710: PPUSH
5711: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5715: LD_EXP 47
5719: PUSH
5720: LD_VAR 0 2
5724: ARRAY
5725: PPUSH
5726: CALL_OW 110
5730: PUSH
5731: LD_INT 2
5733: EQUAL
5734: IFFALSE 5801
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5736: LD_EXP 47
5740: PUSH
5741: LD_VAR 0 2
5745: ARRAY
5746: PPUSH
5747: LD_INT 166
5749: PPUSH
5750: LD_INT 101
5752: PPUSH
5753: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5757: LD_EXP 47
5761: PUSH
5762: LD_VAR 0 2
5766: ARRAY
5767: PPUSH
5768: LD_INT 71
5770: PPUSH
5771: CALL_OW 296
5775: PUSH
5776: LD_INT 10
5778: LESS
5779: IFFALSE 5799
// SetTag ( russianPatrol [ i ] , 3 ) ;
5781: LD_EXP 47
5785: PUSH
5786: LD_VAR 0 2
5790: ARRAY
5791: PPUSH
5792: LD_INT 3
5794: PPUSH
5795: CALL_OW 109
// continue ;
5799: GO 5652
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5801: LD_EXP 47
5805: PUSH
5806: LD_VAR 0 2
5810: ARRAY
5811: PPUSH
5812: CALL_OW 110
5816: PUSH
5817: LD_INT 3
5819: EQUAL
5820: IFFALSE 5888
// begin spottedByPatrol := true ;
5822: LD_ADDR_EXP 7
5826: PUSH
5827: LD_INT 1
5829: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5830: LD_EXP 47
5834: PUSH
5835: LD_VAR 0 2
5839: ARRAY
5840: PPUSH
5841: CALL_OW 250
5845: PPUSH
5846: LD_EXP 47
5850: PUSH
5851: LD_VAR 0 2
5855: ARRAY
5856: PPUSH
5857: CALL_OW 251
5861: PPUSH
5862: LD_INT 2
5864: PPUSH
5865: LD_INT 6
5867: NEG
5868: PPUSH
5869: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
5873: LD_EXP 47
5877: PUSH
5878: LD_VAR 0 2
5882: ARRAY
5883: PPUSH
5884: CALL_OW 87
// end ; if not HasTask ( russianPatrol [ i ] ) then
5888: LD_EXP 47
5892: PUSH
5893: LD_VAR 0 2
5897: ARRAY
5898: PPUSH
5899: CALL_OW 314
5903: NOT
5904: IFFALSE 5988
// for j in patrol [ i ] do
5906: LD_ADDR_VAR 0 3
5910: PUSH
5911: LD_VAR 0 4
5915: PUSH
5916: LD_VAR 0 2
5920: ARRAY
5921: PUSH
5922: FOR_IN
5923: IFFALSE 5986
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5925: LD_EXP 47
5929: PUSH
5930: LD_VAR 0 2
5934: ARRAY
5935: PPUSH
5936: LD_INT 35
5938: PPUSH
5939: LD_INT 175
5941: PPUSH
5942: CALL_OW 12
5946: PPUSH
5947: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5951: LD_EXP 47
5955: PUSH
5956: LD_VAR 0 2
5960: ARRAY
5961: PPUSH
5962: LD_VAR 0 3
5966: PUSH
5967: LD_INT 1
5969: ARRAY
5970: PPUSH
5971: LD_VAR 0 3
5975: PUSH
5976: LD_INT 2
5978: ARRAY
5979: PPUSH
5980: CALL_OW 174
// end ;
5984: GO 5922
5986: POP
5987: POP
// end ;
5988: GO 5652
5990: POP
5991: POP
// until not russianPatrol or russianAlert ;
5992: LD_EXP 47
5996: NOT
5997: PUSH
5998: LD_EXP 9
6002: OR
6003: IFFALSE 5630
// if russianPatrol then
6005: LD_EXP 47
6009: IFFALSE 6026
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
6011: LD_EXP 47
6015: PPUSH
6016: LD_INT 161
6018: PPUSH
6019: LD_INT 107
6021: PPUSH
6022: CALL_OW 114
// end ;
6026: PPOPN 4
6028: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
6029: LD_EXP 6
6033: PUSH
6034: LD_EXP 13
6038: NOT
6039: AND
6040: IFFALSE 6526
6042: GO 6044
6044: DISABLE
6045: LD_INT 0
6047: PPUSH
6048: PPUSH
6049: PPUSH
6050: PPUSH
6051: PPUSH
// begin enable ;
6052: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
6053: LD_ADDR_VAR 0 2
6057: PUSH
6058: LD_EXP 48
6062: PPUSH
6063: LD_INT 21
6065: PUSH
6066: LD_INT 2
6068: PUSH
6069: EMPTY
6070: LIST
6071: LIST
6072: PPUSH
6073: CALL_OW 72
6077: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
6078: LD_ADDR_VAR 0 4
6082: PUSH
6083: LD_INT 22
6085: PUSH
6086: LD_INT 4
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PPUSH
6093: CALL_OW 69
6097: ST_TO_ADDR
// for i in filter do
6098: LD_ADDR_VAR 0 1
6102: PUSH
6103: LD_VAR 0 2
6107: PUSH
6108: FOR_IN
6109: IFFALSE 6524
// begin tmp := IsDrivenBy ( i ) ;
6111: LD_ADDR_VAR 0 3
6115: PUSH
6116: LD_VAR 0 1
6120: PPUSH
6121: CALL_OW 311
6125: ST_TO_ADDR
// if not tmp then
6126: LD_VAR 0 3
6130: NOT
6131: IFFALSE 6135
// continue ;
6133: GO 6108
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
6135: LD_VAR 0 1
6139: PPUSH
6140: CALL_OW 261
6144: PUSH
6145: LD_INT 90
6147: GREATER
6148: PUSH
6149: LD_VAR 0 1
6153: PPUSH
6154: CALL_OW 110
6158: PUSH
6159: LD_INT 2
6161: EQUAL
6162: AND
6163: IFFALSE 6179
// SetTag ( i , 0 ) else
6165: LD_VAR 0 1
6169: PPUSH
6170: LD_INT 0
6172: PPUSH
6173: CALL_OW 109
6177: GO 6275
// if GetTag ( i ) = 2 then
6179: LD_VAR 0 1
6183: PPUSH
6184: CALL_OW 110
6188: PUSH
6189: LD_INT 2
6191: EQUAL
6192: IFFALSE 6275
// begin x := rand ( 1 , 2 ) ;
6194: LD_ADDR_VAR 0 5
6198: PUSH
6199: LD_INT 1
6201: PPUSH
6202: LD_INT 2
6204: PPUSH
6205: CALL_OW 12
6209: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
6210: LD_VAR 0 1
6214: PPUSH
6215: LD_EXP 49
6219: PUSH
6220: LD_VAR 0 5
6224: ARRAY
6225: PPUSH
6226: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
6230: LD_EXP 49
6234: PUSH
6235: LD_VAR 0 5
6239: ARRAY
6240: PPUSH
6241: LD_INT 2
6243: PPUSH
6244: CALL_OW 289
6248: PUSH
6249: LD_INT 20
6251: LESS
6252: IFFALSE 6275
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
6254: LD_EXP 49
6258: PUSH
6259: LD_VAR 0 5
6263: ARRAY
6264: PPUSH
6265: LD_INT 2
6267: PPUSH
6268: LD_INT 100
6270: PPUSH
6271: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
6275: LD_VAR 0 1
6279: PPUSH
6280: CALL_OW 256
6284: PUSH
6285: LD_INT 600
6287: GREATEREQUAL
6288: PUSH
6289: LD_VAR 0 1
6293: PPUSH
6294: CALL_OW 110
6298: NOT
6299: AND
6300: IFFALSE 6326
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6302: LD_VAR 0 1
6306: PPUSH
6307: LD_VAR 0 4
6311: PPUSH
6312: LD_VAR 0 1
6316: PPUSH
6317: CALL_OW 74
6321: PPUSH
6322: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
6326: LD_VAR 0 1
6330: PPUSH
6331: CALL_OW 256
6335: PUSH
6336: LD_INT 600
6338: LESS
6339: PUSH
6340: LD_VAR 0 1
6344: PPUSH
6345: CALL_OW 110
6349: NOT
6350: AND
6351: IFFALSE 6380
// begin SetTag ( i , 1 ) ;
6353: LD_VAR 0 1
6357: PPUSH
6358: LD_INT 1
6360: PPUSH
6361: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
6365: LD_VAR 0 1
6369: PPUSH
6370: LD_INT 62
6372: PPUSH
6373: LD_INT 22
6375: PPUSH
6376: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
6380: LD_VAR 0 1
6384: PPUSH
6385: CALL_OW 110
6389: PUSH
6390: LD_INT 1
6392: EQUAL
6393: PUSH
6394: LD_VAR 0 1
6398: PPUSH
6399: LD_INT 62
6401: PPUSH
6402: LD_INT 22
6404: PPUSH
6405: CALL_OW 297
6409: PUSH
6410: LD_INT 6
6412: LESS
6413: AND
6414: PUSH
6415: LD_VAR 0 3
6419: AND
6420: IFFALSE 6522
// begin ComExitVehicle ( tmp ) ;
6422: LD_VAR 0 3
6426: PPUSH
6427: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
6431: LD_VAR 0 3
6435: PPUSH
6436: LD_VAR 0 1
6440: PPUSH
6441: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
6445: LD_INT 35
6447: PPUSH
6448: CALL_OW 67
// until GetLives ( i ) = 1000 ;
6452: LD_VAR 0 1
6456: PPUSH
6457: CALL_OW 256
6461: PUSH
6462: LD_INT 1000
6464: EQUAL
6465: IFFALSE 6445
// ComEnterUnit ( tmp , i ) ;
6467: LD_VAR 0 3
6471: PPUSH
6472: LD_VAR 0 1
6476: PPUSH
6477: CALL_OW 120
// if GetFuel ( i ) <= 90 then
6481: LD_VAR 0 1
6485: PPUSH
6486: CALL_OW 261
6490: PUSH
6491: LD_INT 90
6493: LESSEQUAL
6494: IFFALSE 6510
// SetTag ( i , 2 ) else
6496: LD_VAR 0 1
6500: PPUSH
6501: LD_INT 2
6503: PPUSH
6504: CALL_OW 109
6508: GO 6522
// SetTag ( i , 0 ) ;
6510: LD_VAR 0 1
6514: PPUSH
6515: LD_INT 0
6517: PPUSH
6518: CALL_OW 109
// end ; end ;
6522: GO 6108
6524: POP
6525: POP
// end ;
6526: PPOPN 5
6528: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
6529: LD_EXP 20
6533: IFFALSE 6735
6535: GO 6537
6537: DISABLE
6538: LD_INT 0
6540: PPUSH
6541: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
6542: LD_EXP 49
6546: PPUSH
6547: LD_INT 79
6549: PPUSH
6550: LD_INT 155
6552: PPUSH
6553: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
6557: LD_EXP 49
6561: PPUSH
6562: LD_INT 16
6564: PPUSH
6565: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6569: LD_ADDR_VAR 0 2
6573: PUSH
6574: LD_EXP 48
6578: PPUSH
6579: LD_INT 50
6581: PUSH
6582: EMPTY
6583: LIST
6584: PPUSH
6585: CALL_OW 72
6589: ST_TO_ADDR
// for i in tmp do
6590: LD_ADDR_VAR 0 1
6594: PUSH
6595: LD_VAR 0 2
6599: PUSH
6600: FOR_IN
6601: IFFALSE 6635
// begin ComAgressiveMove ( i , 123 , 60 ) ;
6603: LD_VAR 0 1
6607: PPUSH
6608: LD_INT 123
6610: PPUSH
6611: LD_INT 60
6613: PPUSH
6614: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
6618: LD_VAR 0 1
6622: PPUSH
6623: LD_INT 153
6625: PPUSH
6626: LD_INT 103
6628: PPUSH
6629: CALL_OW 174
// end ;
6633: GO 6600
6635: POP
6636: POP
// repeat wait ( 0 0$1 ) ;
6637: LD_INT 35
6639: PPUSH
6640: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6644: LD_ADDR_VAR 0 2
6648: PUSH
6649: LD_EXP 48
6653: PPUSH
6654: LD_INT 50
6656: PUSH
6657: EMPTY
6658: LIST
6659: PPUSH
6660: CALL_OW 72
6664: ST_TO_ADDR
// for i in tmp do
6665: LD_ADDR_VAR 0 1
6669: PUSH
6670: LD_VAR 0 2
6674: PUSH
6675: FOR_IN
6676: IFFALSE 6726
// if not HasTask ( i ) then
6678: LD_VAR 0 1
6682: PPUSH
6683: CALL_OW 314
6687: NOT
6688: IFFALSE 6724
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) until not tmp ;
6690: LD_VAR 0 1
6694: PPUSH
6695: LD_INT 81
6697: PUSH
6698: LD_INT 3
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: PPUSH
6705: CALL_OW 69
6709: PPUSH
6710: LD_VAR 0 1
6714: PPUSH
6715: CALL_OW 74
6719: PPUSH
6720: CALL_OW 115
6724: GO 6675
6726: POP
6727: POP
6728: LD_VAR 0 2
6732: NOT
6733: IFFALSE 6637
// end ;
6735: PPOPN 2
6737: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6738: LD_INT 22
6740: PUSH
6741: LD_INT 3
6743: PUSH
6744: EMPTY
6745: LIST
6746: LIST
6747: PUSH
6748: LD_INT 32
6750: PUSH
6751: LD_INT 1
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: PUSH
6758: EMPTY
6759: LIST
6760: LIST
6761: PPUSH
6762: CALL_OW 69
6766: IFFALSE 6845
6768: GO 6770
6770: DISABLE
6771: LD_INT 0
6773: PPUSH
// begin enable ;
6774: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6775: LD_ADDR_VAR 0 1
6779: PUSH
6780: LD_INT 22
6782: PUSH
6783: LD_INT 3
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: PUSH
6790: LD_INT 32
6792: PUSH
6793: LD_INT 1
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: PPUSH
6804: CALL_OW 69
6808: PUSH
6809: FOR_IN
6810: IFFALSE 6843
// if GetFuel ( i ) < 1 then
6812: LD_VAR 0 1
6816: PPUSH
6817: CALL_OW 261
6821: PUSH
6822: LD_INT 1
6824: LESS
6825: IFFALSE 6841
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6827: LD_VAR 0 1
6831: PPUSH
6832: CALL_OW 311
6836: PPUSH
6837: CALL_OW 121
6841: GO 6809
6843: POP
6844: POP
// end ; end_of_file
6845: PPOPN 1
6847: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6848: LD_INT 0
6850: PPUSH
6851: PPUSH
6852: PPUSH
// SetBName ( omikron , omikron ) ;
6853: LD_INT 64
6855: PPUSH
6856: LD_STRING omikron
6858: PPUSH
6859: CALL_OW 500
// uc_side := 4 ;
6863: LD_ADDR_OWVAR 20
6867: PUSH
6868: LD_INT 4
6870: ST_TO_ADDR
// uc_nation := 1 ;
6871: LD_ADDR_OWVAR 21
6875: PUSH
6876: LD_INT 1
6878: ST_TO_ADDR
// omicronSquad := [ ] ;
6879: LD_ADDR_EXP 51
6883: PUSH
6884: EMPTY
6885: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6886: LD_ADDR_VAR 0 2
6890: PUSH
6891: LD_INT 22
6893: PUSH
6894: LD_INT 4
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: PUSH
6901: LD_INT 2
6903: PUSH
6904: LD_INT 30
6906: PUSH
6907: LD_INT 32
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PUSH
6914: LD_INT 30
6916: PUSH
6917: LD_INT 31
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PUSH
6924: EMPTY
6925: LIST
6926: LIST
6927: LIST
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PPUSH
6933: CALL_OW 69
6937: PUSH
6938: FOR_IN
6939: IFFALSE 6996
// begin PrepareHuman ( false , 1 , 1 ) ;
6941: LD_INT 0
6943: PPUSH
6944: LD_INT 1
6946: PPUSH
6947: LD_INT 1
6949: PPUSH
6950: CALL_OW 380
// un := CreateHuman ;
6954: LD_ADDR_VAR 0 3
6958: PUSH
6959: CALL_OW 44
6963: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6964: LD_ADDR_EXP 51
6968: PUSH
6969: LD_EXP 51
6973: PUSH
6974: LD_VAR 0 3
6978: UNION
6979: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6980: LD_VAR 0 3
6984: PPUSH
6985: LD_VAR 0 2
6989: PPUSH
6990: CALL_OW 52
// end ;
6994: GO 6938
6996: POP
6997: POP
// for i := 1 to 3 do
6998: LD_ADDR_VAR 0 2
7002: PUSH
7003: DOUBLE
7004: LD_INT 1
7006: DEC
7007: ST_TO_ADDR
7008: LD_INT 3
7010: PUSH
7011: FOR_TO
7012: IFFALSE 7067
// begin PrepareHuman ( false , 2 , 2 ) ;
7014: LD_INT 0
7016: PPUSH
7017: LD_INT 2
7019: PPUSH
7020: LD_INT 2
7022: PPUSH
7023: CALL_OW 380
// un := CreateHuman ;
7027: LD_ADDR_VAR 0 3
7031: PUSH
7032: CALL_OW 44
7036: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7037: LD_ADDR_EXP 51
7041: PUSH
7042: LD_EXP 51
7046: PUSH
7047: LD_VAR 0 3
7051: UNION
7052: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
7053: LD_VAR 0 3
7057: PPUSH
7058: LD_INT 64
7060: PPUSH
7061: CALL_OW 52
// end ;
7065: GO 7011
7067: POP
7068: POP
// for i := 1 to 2 do
7069: LD_ADDR_VAR 0 2
7073: PUSH
7074: DOUBLE
7075: LD_INT 1
7077: DEC
7078: ST_TO_ADDR
7079: LD_INT 2
7081: PUSH
7082: FOR_TO
7083: IFFALSE 7222
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
7085: LD_INT 4
7087: PPUSH
7088: LD_INT 1
7090: PPUSH
7091: LD_INT 2
7093: PPUSH
7094: LD_INT 2
7096: PPUSH
7097: LD_INT 1
7099: PPUSH
7100: LD_INT 3
7102: PPUSH
7103: LD_INT 100
7105: PPUSH
7106: CALL 345 0 7
// un := CreateVehicle ;
7110: LD_ADDR_VAR 0 3
7114: PUSH
7115: CALL_OW 45
7119: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7120: LD_ADDR_EXP 51
7124: PUSH
7125: LD_EXP 51
7129: PUSH
7130: LD_VAR 0 3
7134: UNION
7135: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
7136: LD_VAR 0 3
7140: PPUSH
7141: LD_INT 28
7143: PPUSH
7144: LD_INT 37
7146: PPUSH
7147: LD_INT 6
7149: PPUSH
7150: LD_INT 0
7152: PPUSH
7153: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
7157: LD_INT 0
7159: PPUSH
7160: LD_INT 3
7162: PPUSH
7163: LD_INT 2
7165: PPUSH
7166: CALL_OW 380
// un := CreateHuman ;
7170: LD_ADDR_VAR 0 3
7174: PUSH
7175: CALL_OW 44
7179: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7180: LD_ADDR_EXP 51
7184: PUSH
7185: LD_EXP 51
7189: PUSH
7190: LD_VAR 0 3
7194: UNION
7195: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
7196: LD_VAR 0 3
7200: PPUSH
7201: LD_EXP 51
7205: PUSH
7206: LD_EXP 51
7210: PUSH
7211: LD_INT 1
7213: MINUS
7214: ARRAY
7215: PPUSH
7216: CALL_OW 52
// end ;
7220: GO 7082
7222: POP
7223: POP
// end ;
7224: LD_VAR 0 1
7228: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
7229: LD_INT 0
7231: PPUSH
7232: PPUSH
7233: PPUSH
7234: PPUSH
// uc_side := 4 ;
7235: LD_ADDR_OWVAR 20
7239: PUSH
7240: LD_INT 4
7242: ST_TO_ADDR
// uc_nation := 1 ;
7243: LD_ADDR_OWVAR 21
7247: PUSH
7248: LD_INT 1
7250: ST_TO_ADDR
// tmp := [ ] ;
7251: LD_ADDR_VAR 0 4
7255: PUSH
7256: EMPTY
7257: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7258: LD_INT 4
7260: PPUSH
7261: LD_INT 1
7263: PPUSH
7264: LD_INT 2
7266: PPUSH
7267: LD_INT 1
7269: PPUSH
7270: LD_INT 1
7272: PPUSH
7273: LD_INT 4
7275: PPUSH
7276: LD_INT 77
7278: PPUSH
7279: CALL 345 0 7
// un := CreateVehicle ;
7283: LD_ADDR_VAR 0 3
7287: PUSH
7288: CALL_OW 45
7292: ST_TO_ADDR
// tmp := tmp union un ;
7293: LD_ADDR_VAR 0 4
7297: PUSH
7298: LD_VAR 0 4
7302: PUSH
7303: LD_VAR 0 3
7307: UNION
7308: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7309: LD_VAR 0 3
7313: PPUSH
7314: LD_INT 2
7316: PPUSH
7317: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
7321: LD_VAR 0 3
7325: PPUSH
7326: LD_INT 106
7328: PPUSH
7329: LD_INT 3
7331: PPUSH
7332: LD_INT 0
7334: PPUSH
7335: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
7339: LD_INT 0
7341: PPUSH
7342: LD_INT 3
7344: PPUSH
7345: LD_INT 2
7347: PPUSH
7348: CALL_OW 380
// un := CreateHuman ;
7352: LD_ADDR_VAR 0 3
7356: PUSH
7357: CALL_OW 44
7361: ST_TO_ADDR
// tmp := tmp union un ;
7362: LD_ADDR_VAR 0 4
7366: PUSH
7367: LD_VAR 0 4
7371: PUSH
7372: LD_VAR 0 3
7376: UNION
7377: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7378: LD_VAR 0 3
7382: PPUSH
7383: LD_VAR 0 4
7387: PUSH
7388: LD_VAR 0 4
7392: PUSH
7393: LD_INT 1
7395: MINUS
7396: ARRAY
7397: PPUSH
7398: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7402: LD_VAR 0 3
7406: PPUSH
7407: LD_INT 109
7409: PPUSH
7410: LD_INT 9
7412: PPUSH
7413: CALL_OW 111
// wait ( 0 0$1 ) ;
7417: LD_INT 35
7419: PPUSH
7420: CALL_OW 67
// for i := 1 to 2 do
7424: LD_ADDR_VAR 0 2
7428: PUSH
7429: DOUBLE
7430: LD_INT 1
7432: DEC
7433: ST_TO_ADDR
7434: LD_INT 2
7436: PUSH
7437: FOR_TO
7438: IFFALSE 7502
// begin PrepareHuman ( false , 1 , 2 ) ;
7440: LD_INT 0
7442: PPUSH
7443: LD_INT 1
7445: PPUSH
7446: LD_INT 2
7448: PPUSH
7449: CALL_OW 380
// un := CreateHuman ;
7453: LD_ADDR_VAR 0 3
7457: PUSH
7458: CALL_OW 44
7462: ST_TO_ADDR
// tmp := tmp union un ;
7463: LD_ADDR_VAR 0 4
7467: PUSH
7468: LD_VAR 0 4
7472: PUSH
7473: LD_VAR 0 3
7477: UNION
7478: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7479: LD_VAR 0 3
7483: PPUSH
7484: LD_INT 105
7486: PPUSH
7487: LD_INT 2
7489: PPUSH
7490: LD_INT 2
7492: PPUSH
7493: LD_INT 0
7495: PPUSH
7496: CALL_OW 50
// end ;
7500: GO 7437
7502: POP
7503: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7504: LD_VAR 0 4
7508: PPUSH
7509: LD_INT 26
7511: PPUSH
7512: LD_INT 35
7514: PPUSH
7515: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7519: LD_INT 35
7521: PPUSH
7522: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7526: LD_VAR 0 4
7530: PPUSH
7531: LD_INT 50
7533: PUSH
7534: EMPTY
7535: LIST
7536: PPUSH
7537: CALL_OW 72
7541: NOT
7542: IFFALSE 7546
// exit ;
7544: GO 7673
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7546: LD_VAR 0 4
7550: PPUSH
7551: LD_INT 91
7553: PUSH
7554: LD_INT 64
7556: PUSH
7557: LD_INT 12
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: LIST
7564: PPUSH
7565: CALL_OW 72
7569: PUSH
7570: LD_VAR 0 4
7574: EQUAL
7575: IFFALSE 7519
// omicronSquad := omicronSquad union tmp ;
7577: LD_ADDR_EXP 51
7581: PUSH
7582: LD_EXP 51
7586: PUSH
7587: LD_VAR 0 4
7591: UNION
7592: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7593: LD_ADDR_VAR 0 2
7597: PUSH
7598: LD_VAR 0 4
7602: PPUSH
7603: LD_INT 25
7605: PUSH
7606: LD_INT 1
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: PPUSH
7613: CALL_OW 72
7617: PUSH
7618: FOR_IN
7619: IFFALSE 7671
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7621: LD_VAR 0 2
7625: PPUSH
7626: LD_INT 22
7628: PUSH
7629: LD_INT 4
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PUSH
7636: LD_INT 30
7638: PUSH
7639: LD_INT 4
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: PPUSH
7650: CALL_OW 69
7654: PPUSH
7655: LD_VAR 0 2
7659: PPUSH
7660: CALL_OW 74
7664: PPUSH
7665: CALL_OW 120
7669: GO 7618
7671: POP
7672: POP
// end ;
7673: LD_VAR 0 1
7677: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7678: LD_EXP 13
7682: NOT
7683: IFFALSE 8254
7685: GO 7687
7687: DISABLE
7688: LD_INT 0
7690: PPUSH
7691: PPUSH
7692: PPUSH
7693: PPUSH
// begin enable ;
7694: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7695: LD_ADDR_VAR 0 2
7699: PUSH
7700: LD_INT 22
7702: PUSH
7703: LD_INT 4
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: PUSH
7710: LD_INT 21
7712: PUSH
7713: LD_INT 3
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: PUSH
7720: LD_INT 3
7722: PUSH
7723: LD_INT 24
7725: PUSH
7726: LD_INT 1000
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: LIST
7741: PPUSH
7742: CALL_OW 69
7746: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7747: LD_ADDR_VAR 0 3
7751: PUSH
7752: LD_EXP 51
7756: PPUSH
7757: LD_INT 25
7759: PUSH
7760: LD_INT 2
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PPUSH
7767: CALL_OW 72
7771: ST_TO_ADDR
// if filter and tmp then
7772: LD_VAR 0 2
7776: PUSH
7777: LD_VAR 0 3
7781: AND
7782: IFFALSE 7855
// begin for i in tmp do
7784: LD_ADDR_VAR 0 1
7788: PUSH
7789: LD_VAR 0 3
7793: PUSH
7794: FOR_IN
7795: IFFALSE 7851
// if IsInUnit ( i ) then
7797: LD_VAR 0 1
7801: PPUSH
7802: CALL_OW 310
7806: IFFALSE 7819
// ComExitBuilding ( i ) else
7808: LD_VAR 0 1
7812: PPUSH
7813: CALL_OW 122
7817: GO 7849
// if not HasTask ( i ) then
7819: LD_VAR 0 1
7823: PPUSH
7824: CALL_OW 314
7828: NOT
7829: IFFALSE 7849
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7831: LD_VAR 0 1
7835: PPUSH
7836: LD_VAR 0 2
7840: PUSH
7841: LD_INT 1
7843: ARRAY
7844: PPUSH
7845: CALL_OW 130
7849: GO 7794
7851: POP
7852: POP
// end else
7853: GO 7926
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7855: LD_VAR 0 3
7859: PPUSH
7860: LD_INT 3
7862: PUSH
7863: LD_INT 54
7865: PUSH
7866: EMPTY
7867: LIST
7868: PUSH
7869: EMPTY
7870: LIST
7871: LIST
7872: PPUSH
7873: CALL_OW 72
7877: IFFALSE 7926
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7879: LD_ADDR_VAR 0 1
7883: PUSH
7884: LD_VAR 0 3
7888: PPUSH
7889: LD_INT 3
7891: PUSH
7892: LD_INT 54
7894: PUSH
7895: EMPTY
7896: LIST
7897: PUSH
7898: EMPTY
7899: LIST
7900: LIST
7901: PPUSH
7902: CALL_OW 72
7906: PUSH
7907: FOR_IN
7908: IFFALSE 7924
// ComEnterUnit ( i , omikron ) ;
7910: LD_VAR 0 1
7914: PPUSH
7915: LD_INT 64
7917: PPUSH
7918: CALL_OW 120
7922: GO 7907
7924: POP
7925: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7926: LD_ADDR_VAR 0 2
7930: PUSH
7931: LD_EXP 51
7935: PPUSH
7936: LD_INT 21
7938: PUSH
7939: LD_INT 2
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: PPUSH
7946: CALL_OW 72
7950: ST_TO_ADDR
// if not filter then
7951: LD_VAR 0 2
7955: NOT
7956: IFFALSE 7960
// exit ;
7958: GO 8254
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7960: LD_ADDR_VAR 0 4
7964: PUSH
7965: LD_INT 13
7967: PPUSH
7968: LD_INT 81
7970: PUSH
7971: LD_INT 4
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: PPUSH
7978: CALL_OW 70
7982: ST_TO_ADDR
// if enemy then
7983: LD_VAR 0 4
7987: IFFALSE 8254
// begin for i in filter do
7989: LD_ADDR_VAR 0 1
7993: PUSH
7994: LD_VAR 0 2
7998: PUSH
7999: FOR_IN
8000: IFFALSE 8252
// begin tmp := IsDrivenBy ( i ) ;
8002: LD_ADDR_VAR 0 3
8006: PUSH
8007: LD_VAR 0 1
8011: PPUSH
8012: CALL_OW 311
8016: ST_TO_ADDR
// if not tmp then
8017: LD_VAR 0 3
8021: NOT
8022: IFFALSE 8026
// continue ;
8024: GO 7999
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
8026: LD_VAR 0 1
8030: PPUSH
8031: CALL_OW 256
8035: PUSH
8036: LD_INT 600
8038: GREATEREQUAL
8039: PUSH
8040: LD_VAR 0 1
8044: PPUSH
8045: CALL_OW 110
8049: PUSH
8050: LD_INT 1
8052: NONEQUAL
8053: AND
8054: IFFALSE 8080
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8056: LD_VAR 0 1
8060: PPUSH
8061: LD_VAR 0 4
8065: PPUSH
8066: LD_VAR 0 1
8070: PPUSH
8071: CALL_OW 74
8075: PPUSH
8076: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
8080: LD_VAR 0 1
8084: PPUSH
8085: CALL_OW 256
8089: PUSH
8090: LD_INT 600
8092: LESS
8093: PUSH
8094: LD_VAR 0 1
8098: PPUSH
8099: CALL_OW 110
8103: PUSH
8104: LD_INT 1
8106: NONEQUAL
8107: AND
8108: IFFALSE 8137
// begin SetTag ( i , 1 ) ;
8110: LD_VAR 0 1
8114: PPUSH
8115: LD_INT 1
8117: PPUSH
8118: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
8122: LD_VAR 0 1
8126: PPUSH
8127: LD_INT 27
8129: PPUSH
8130: LD_INT 35
8132: PPUSH
8133: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
8137: LD_VAR 0 1
8141: PPUSH
8142: CALL_OW 110
8146: PUSH
8147: LD_INT 1
8149: EQUAL
8150: PUSH
8151: LD_VAR 0 1
8155: PPUSH
8156: LD_INT 27
8158: PPUSH
8159: LD_INT 35
8161: PPUSH
8162: CALL_OW 297
8166: PUSH
8167: LD_INT 6
8169: LESS
8170: AND
8171: PUSH
8172: LD_VAR 0 3
8176: AND
8177: IFFALSE 8250
// begin ComExitVehicle ( tmp ) ;
8179: LD_VAR 0 3
8183: PPUSH
8184: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8188: LD_VAR 0 3
8192: PPUSH
8193: LD_VAR 0 1
8197: PPUSH
8198: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8202: LD_INT 35
8204: PPUSH
8205: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8209: LD_VAR 0 1
8213: PPUSH
8214: CALL_OW 256
8218: PUSH
8219: LD_INT 1000
8221: EQUAL
8222: IFFALSE 8202
// ComEnterUnit ( tmp , i ) ;
8224: LD_VAR 0 3
8228: PPUSH
8229: LD_VAR 0 1
8233: PPUSH
8234: CALL_OW 120
// SetTag ( i , 0 ) ;
8238: LD_VAR 0 1
8242: PPUSH
8243: LD_INT 0
8245: PPUSH
8246: CALL_OW 109
// end ; end ;
8250: GO 7999
8252: POP
8253: POP
// end ; end ;
8254: PPOPN 4
8256: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
8257: LD_EXP 13
8261: IFFALSE 8405
8263: GO 8265
8265: DISABLE
8266: LD_INT 0
8268: PPUSH
8269: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
8270: LD_ADDR_VAR 0 2
8274: PUSH
8275: LD_EXP 51
8279: PPUSH
8280: LD_INT 21
8282: PUSH
8283: LD_INT 1
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PUSH
8290: LD_INT 50
8292: PUSH
8293: EMPTY
8294: LIST
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: PPUSH
8300: CALL_OW 72
8304: ST_TO_ADDR
// if not tmp then
8305: LD_VAR 0 2
8309: NOT
8310: IFFALSE 8314
// exit ;
8312: GO 8405
// repeat wait ( 0 0$1 ) ;
8314: LD_INT 35
8316: PPUSH
8317: CALL_OW 67
// for i in tmp do
8321: LD_ADDR_VAR 0 1
8325: PUSH
8326: LD_VAR 0 2
8330: PUSH
8331: FOR_IN
8332: IFFALSE 8396
// begin ComExit ( i ) ;
8334: LD_VAR 0 1
8338: PPUSH
8339: CALL 783 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
8343: LD_VAR 0 1
8347: PPUSH
8348: LD_INT 14
8350: PPUSH
8351: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
8355: LD_VAR 0 1
8359: PPUSH
8360: LD_INT 14
8362: PPUSH
8363: CALL_OW 308
8367: IFFALSE 8394
// begin tmp := tmp diff i ;
8369: LD_ADDR_VAR 0 2
8373: PUSH
8374: LD_VAR 0 2
8378: PUSH
8379: LD_VAR 0 1
8383: DIFF
8384: ST_TO_ADDR
// RemoveUnit ( i ) ;
8385: LD_VAR 0 1
8389: PPUSH
8390: CALL_OW 64
// end ; end ;
8394: GO 8331
8396: POP
8397: POP
// until not tmp ;
8398: LD_VAR 0 2
8402: NOT
8403: IFFALSE 8314
// end ; end_of_file
8405: PPOPN 2
8407: END
// export function Action ; var i , un , veh , tmp ; begin
8408: LD_INT 0
8410: PPUSH
8411: PPUSH
8412: PPUSH
8413: PPUSH
8414: PPUSH
// InGameOn ;
8415: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8419: LD_INT 179
8421: PPUSH
8422: LD_INT 5
8424: PPUSH
8425: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8429: LD_ADDR_VAR 0 4
8433: PUSH
8434: LD_INT 2
8436: PPUSH
8437: LD_INT 2
8439: PPUSH
8440: LD_INT 12
8442: PPUSH
8443: LD_INT 1
8445: PPUSH
8446: LD_INT 1
8448: PPUSH
8449: LD_INT 24
8451: PPUSH
8452: LD_INT 33
8454: PPUSH
8455: CALL 345 0 7
8459: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8460: LD_VAR 0 4
8464: PPUSH
8465: LD_INT 2
8467: PPUSH
8468: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8472: LD_VAR 0 4
8476: PPUSH
8477: LD_INT 178
8479: PPUSH
8480: LD_INT 2
8482: PPUSH
8483: LD_INT 0
8485: PPUSH
8486: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8490: LD_EXP 25
8494: PPUSH
8495: LD_VAR 0 4
8499: PPUSH
8500: CALL_OW 52
// if Kamil then
8504: LD_EXP 29
8508: IFFALSE 8543
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8510: LD_EXP 29
8514: PPUSH
8515: LD_INT 207
8517: PPUSH
8518: LD_INT 37
8520: PPUSH
8521: LD_INT 0
8523: PPUSH
8524: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8528: LD_EXP 29
8532: PPUSH
8533: LD_INT 211
8535: PPUSH
8536: LD_INT 38
8538: PPUSH
8539: CALL_OW 118
// end ; if Sophia then
8543: LD_EXP 31
8547: IFFALSE 8582
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8549: LD_EXP 31
8553: PPUSH
8554: LD_INT 209
8556: PPUSH
8557: LD_INT 40
8559: PPUSH
8560: LD_INT 0
8562: PPUSH
8563: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8567: LD_EXP 31
8571: PPUSH
8572: LD_INT 211
8574: PPUSH
8575: LD_INT 38
8577: PPUSH
8578: CALL_OW 118
// end ; if Givi then
8582: LD_EXP 26
8586: IFFALSE 8621
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8588: LD_EXP 26
8592: PPUSH
8593: LD_INT 201
8595: PPUSH
8596: LD_INT 34
8598: PPUSH
8599: LD_INT 0
8601: PPUSH
8602: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8606: LD_EXP 26
8610: PPUSH
8611: LD_INT 206
8613: PPUSH
8614: LD_INT 36
8616: PPUSH
8617: CALL_OW 118
// end ; if Ibrahim then
8621: LD_EXP 28
8625: IFFALSE 8660
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8627: LD_EXP 28
8631: PPUSH
8632: LD_INT 202
8634: PPUSH
8635: LD_INT 39
8637: PPUSH
8638: LD_INT 0
8640: PPUSH
8641: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8645: LD_EXP 28
8649: PPUSH
8650: LD_INT 206
8652: PPUSH
8653: LD_INT 36
8655: PPUSH
8656: CALL_OW 118
// end ; if Markov then
8660: LD_EXP 32
8664: IFFALSE 8751
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8666: LD_ADDR_VAR 0 4
8670: PUSH
8671: LD_INT 2
8673: PPUSH
8674: LD_INT 2
8676: PPUSH
8677: LD_INT 13
8679: PPUSH
8680: LD_INT 1
8682: PPUSH
8683: LD_INT 1
8685: PPUSH
8686: LD_INT 25
8688: PPUSH
8689: LD_INT 80
8691: PUSH
8692: LD_INT 20
8694: PUSH
8695: LD_OWVAR 67
8699: MUL
8700: MINUS
8701: PPUSH
8702: CALL 345 0 7
8706: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8707: LD_VAR 0 4
8711: PPUSH
8712: LD_INT 2
8714: PPUSH
8715: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8719: LD_VAR 0 4
8723: PPUSH
8724: LD_INT 197
8726: PPUSH
8727: LD_INT 35
8729: PPUSH
8730: LD_INT 0
8732: PPUSH
8733: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8737: LD_EXP 32
8741: PPUSH
8742: LD_VAR 0 4
8746: PPUSH
8747: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8751: LD_ADDR_VAR 0 5
8755: PUSH
8756: LD_EXP 30
8760: PUSH
8761: LD_EXP 37
8765: UNION
8766: ST_TO_ADDR
// for i in tmp do
8767: LD_ADDR_VAR 0 2
8771: PUSH
8772: LD_VAR 0 5
8776: PUSH
8777: FOR_IN
8778: IFFALSE 8812
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8780: LD_VAR 0 2
8784: PPUSH
8785: LD_INT 203
8787: PPUSH
8788: LD_INT 41
8790: PPUSH
8791: LD_INT 6
8793: PPUSH
8794: LD_INT 0
8796: PPUSH
8797: CALL_OW 50
// ComHold ( i ) ;
8801: LD_VAR 0 2
8805: PPUSH
8806: CALL_OW 140
// end ;
8810: GO 8777
8812: POP
8813: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8814: LD_INT 22
8816: PUSH
8817: LD_INT 2
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: PUSH
8824: LD_INT 25
8826: PUSH
8827: LD_INT 2
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: PUSH
8834: EMPTY
8835: LIST
8836: LIST
8837: PPUSH
8838: CALL_OW 69
8842: NOT
8843: IFFALSE 8857
// SetClass ( Heike , 2 ) ;
8845: LD_EXP 25
8849: PPUSH
8850: LD_INT 2
8852: PPUSH
8853: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8857: LD_EXP 25
8861: PPUSH
8862: LD_INT 183
8864: PPUSH
8865: LD_INT 12
8867: PPUSH
8868: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8872: LD_EXP 25
8876: PPUSH
8877: LD_INT 188
8879: PPUSH
8880: LD_INT 20
8882: PPUSH
8883: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8887: LD_EXP 25
8891: PPUSH
8892: LD_INT 191
8894: PPUSH
8895: LD_INT 25
8897: PPUSH
8898: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8902: LD_EXP 25
8906: PPUSH
8907: LD_INT 203
8909: PPUSH
8910: LD_INT 29
8912: PPUSH
8913: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8917: LD_EXP 25
8921: PPUSH
8922: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8926: LD_INT 35
8928: PPUSH
8929: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8933: LD_EXP 25
8937: PPUSH
8938: CALL_OW 310
8942: NOT
8943: IFFALSE 8926
// CenterOnUnits ( Heike ) ;
8945: LD_EXP 25
8949: PPUSH
8950: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8954: LD_ADDR_VAR 0 5
8958: PUSH
8959: LD_INT 22
8961: PUSH
8962: LD_INT 2
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: PUSH
8969: LD_INT 21
8971: PUSH
8972: LD_INT 1
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: PPUSH
8983: CALL_OW 69
8987: PUSH
8988: LD_EXP 25
8992: PUSH
8993: LD_EXP 32
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: DIFF
9002: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
9003: LD_VAR 0 5
9007: PPUSH
9008: LD_EXP 25
9012: PPUSH
9013: CALL_OW 119
// if Givi then
9017: LD_EXP 26
9021: IFFALSE 9039
// ComTurnUnit ( Heike , Givi ) else
9023: LD_EXP 25
9027: PPUSH
9028: LD_EXP 26
9032: PPUSH
9033: CALL_OW 119
9037: GO 9057
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
9039: LD_EXP 25
9043: PPUSH
9044: LD_VAR 0 5
9048: PUSH
9049: LD_INT 1
9051: ARRAY
9052: PPUSH
9053: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
9057: LD_EXP 25
9061: PPUSH
9062: LD_STRING DH-Start-1
9064: PPUSH
9065: CALL_OW 88
// if Givi then
9069: LD_EXP 26
9073: IFFALSE 9120
// begin Say ( Givi , DG-Start-2 ) ;
9075: LD_EXP 26
9079: PPUSH
9080: LD_STRING DG-Start-2
9082: PPUSH
9083: CALL_OW 88
// if not Mike then
9087: LD_EXP 27
9091: NOT
9092: IFFALSE 9118
// begin Say ( Givi , DG-Start-b-3 ) ;
9094: LD_EXP 26
9098: PPUSH
9099: LD_STRING DG-Start-b-3
9101: PPUSH
9102: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
9106: LD_EXP 25
9110: PPUSH
9111: LD_STRING DH-Start-b-4
9113: PPUSH
9114: CALL_OW 88
// end ; end else
9118: GO 9185
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
9120: LD_EXP 37
9124: PPUSH
9125: LD_INT 26
9127: PUSH
9128: LD_INT 1
9130: PUSH
9131: EMPTY
9132: LIST
9133: LIST
9134: PPUSH
9135: CALL_OW 72
9139: PUSH
9140: LD_INT 1
9142: ARRAY
9143: PPUSH
9144: LD_STRING DArm-Start-a-2
9146: PPUSH
9147: CALL_OW 88
9151: NOT
9152: IFFALSE 9185
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
9154: LD_EXP 37
9158: PPUSH
9159: LD_INT 26
9161: PUSH
9162: LD_INT 2
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: PPUSH
9169: CALL_OW 72
9173: PUSH
9174: LD_INT 1
9176: ARRAY
9177: PPUSH
9178: LD_STRING DArf-Start-a-2
9180: PPUSH
9181: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
9185: LD_EXP 25
9189: PPUSH
9190: LD_INT 211
9192: PPUSH
9193: LD_INT 38
9195: PPUSH
9196: CALL_OW 118
// wait ( 0 0$1 ) ;
9200: LD_INT 35
9202: PPUSH
9203: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
9207: LD_EXP 25
9211: PPUSH
9212: LD_STRING DH-Start-3
9214: PPUSH
9215: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9219: LD_EXP 25
9223: PPUSH
9224: LD_STRING DH-Start-4
9226: PPUSH
9227: CALL_OW 88
// InGameOff ;
9231: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
9235: LD_STRING Prepare
9237: PPUSH
9238: CALL_OW 337
// SaveForQuickRestart ;
9242: CALL_OW 22
// wait ( 0 0$30 ) ;
9246: LD_INT 1050
9248: PPUSH
9249: CALL_OW 67
// if not Aviradze then
9253: LD_EXP 35
9257: NOT
9258: IFFALSE 9262
// exit ;
9260: GO 9466
// SetDir ( Aviradze , 4 ) ;
9262: LD_EXP 35
9266: PPUSH
9267: LD_INT 4
9269: PPUSH
9270: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
9274: LD_EXP 35
9278: PPUSH
9279: LD_INT 225
9281: PPUSH
9282: LD_INT 33
9284: PPUSH
9285: LD_INT 0
9287: PPUSH
9288: CALL_OW 48
// for i := 1 to 2 do
9292: LD_ADDR_VAR 0 2
9296: PUSH
9297: DOUBLE
9298: LD_INT 1
9300: DEC
9301: ST_TO_ADDR
9302: LD_INT 2
9304: PUSH
9305: FOR_TO
9306: IFFALSE 9437
// begin uc_side := 2 ;
9308: LD_ADDR_OWVAR 20
9312: PUSH
9313: LD_INT 2
9315: ST_TO_ADDR
// uc_nation := 0 ;
9316: LD_ADDR_OWVAR 21
9320: PUSH
9321: LD_INT 0
9323: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9324: LD_INT 0
9326: PPUSH
9327: LD_INT 12
9329: PPUSH
9330: LD_INT 1
9332: PPUSH
9333: CALL_OW 380
// hc_gallery :=  ;
9337: LD_ADDR_OWVAR 33
9341: PUSH
9342: LD_STRING 
9344: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
9345: LD_ADDR_OWVAR 26
9349: PUSH
9350: LD_STRING Artudito
9352: PUSH
9353: LD_STRING Textur
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: PUSH
9360: LD_VAR 0 2
9364: ARRAY
9365: ST_TO_ADDR
// un := CreateHuman ;
9366: LD_ADDR_VAR 0 3
9370: PUSH
9371: CALL_OW 44
9375: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9376: LD_VAR 0 3
9380: PPUSH
9381: LD_INT 224
9383: PUSH
9384: LD_INT 226
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: PUSH
9391: LD_VAR 0 2
9395: ARRAY
9396: PPUSH
9397: LD_INT 31
9399: PUSH
9400: LD_INT 35
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: PUSH
9407: LD_VAR 0 2
9411: ARRAY
9412: PPUSH
9413: LD_INT 0
9415: PPUSH
9416: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9420: LD_VAR 0 3
9424: PPUSH
9425: LD_INT 215
9427: PPUSH
9428: LD_INT 36
9430: PPUSH
9431: CALL_OW 111
// end ;
9435: GO 9305
9437: POP
9438: POP
// hc_name :=  ;
9439: LD_ADDR_OWVAR 26
9443: PUSH
9444: LD_STRING 
9446: ST_TO_ADDR
// InitHc ;
9447: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9451: LD_EXP 35
9455: PPUSH
9456: LD_INT 215
9458: PPUSH
9459: LD_INT 36
9461: PPUSH
9462: CALL_OW 111
// end ;
9466: LD_VAR 0 1
9470: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
9471: LD_EXP 3
9475: IFFALSE 10784
9477: GO 9479
9479: DISABLE
9480: LD_INT 0
9482: PPUSH
9483: PPUSH
9484: PPUSH
// begin DialogueOn ;
9485: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9489: LD_EXP 25
9493: PPUSH
9494: LD_STRING DH-base-1
9496: PPUSH
9497: CALL_OW 88
// if Markov then
9501: LD_EXP 32
9505: IFFALSE 9557
// begin Say ( Markov , DMar-base-2 ) ;
9507: LD_EXP 32
9511: PPUSH
9512: LD_STRING DMar-base-2
9514: PPUSH
9515: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9519: LD_EXP 32
9523: PPUSH
9524: LD_STRING DMar-base-3
9526: PPUSH
9527: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9531: LD_EXP 25
9535: PPUSH
9536: LD_STRING DH-base-4
9538: PPUSH
9539: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9543: LD_EXP 32
9547: PPUSH
9548: LD_STRING DMar-base-5
9550: PPUSH
9551: CALL_OW 88
// end else
9555: GO 9634
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9557: LD_EXP 37
9561: PPUSH
9562: LD_INT 26
9564: PUSH
9565: LD_INT 1
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PPUSH
9572: CALL_OW 72
9576: PUSH
9577: LD_INT 1
9579: ARRAY
9580: PPUSH
9581: LD_STRING DArm-base-a-2
9583: PPUSH
9584: CALL_OW 88
9588: NOT
9589: IFFALSE 9622
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9591: LD_EXP 37
9595: PPUSH
9596: LD_INT 26
9598: PUSH
9599: LD_INT 2
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PPUSH
9606: CALL_OW 72
9610: PUSH
9611: LD_INT 1
9613: ARRAY
9614: PPUSH
9615: LD_STRING DArf-base-a-2
9617: PPUSH
9618: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9622: LD_EXP 25
9626: PPUSH
9627: LD_STRING DH-base-a-3
9629: PPUSH
9630: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9634: LD_EXP 35
9638: PPUSH
9639: LD_STRING DA-base-6
9641: PPUSH
9642: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9646: LD_EXP 35
9650: PPUSH
9651: LD_STRING DA-base-7
9653: PPUSH
9654: CALL_OW 88
// DialogueOff ;
9658: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9662: LD_STRING Flamethrower
9664: PPUSH
9665: CALL_OW 337
// wait ( 2 2$00 ) ;
9669: LD_INT 4200
9671: PPUSH
9672: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9676: LD_EXP 34
9680: PUSH
9681: LD_EXP 27
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: PPUSH
9690: LD_INT 203
9692: PPUSH
9693: LD_INT 37
9695: PPUSH
9696: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9700: LD_INT 22
9702: PUSH
9703: LD_INT 2
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: PUSH
9710: LD_INT 92
9712: PUSH
9713: LD_INT 203
9715: PUSH
9716: LD_INT 37
9718: PUSH
9719: LD_INT 10
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: PPUSH
9732: CALL_OW 69
9736: NOT
9737: IFFALSE 9777
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9739: LD_EXP 34
9743: PUSH
9744: LD_EXP 27
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: PPUSH
9753: LD_EXP 25
9757: PPUSH
9758: CALL_OW 250
9762: PPUSH
9763: LD_EXP 25
9767: PPUSH
9768: CALL_OW 251
9772: PPUSH
9773: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9777: LD_INT 35
9779: PPUSH
9780: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9784: LD_INT 2
9786: PPUSH
9787: LD_EXP 34
9791: PPUSH
9792: CALL_OW 292
9796: PUSH
9797: LD_EXP 34
9801: PPUSH
9802: LD_EXP 25
9806: PPUSH
9807: CALL_OW 296
9811: PUSH
9812: LD_INT 8
9814: LESS
9815: PUSH
9816: LD_EXP 34
9820: PPUSH
9821: LD_INT 22
9823: PUSH
9824: LD_INT 2
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PUSH
9831: LD_INT 21
9833: PUSH
9834: LD_INT 3
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: PUSH
9841: EMPTY
9842: LIST
9843: LIST
9844: PPUSH
9845: CALL_OW 69
9849: PPUSH
9850: LD_EXP 34
9854: PPUSH
9855: CALL_OW 74
9859: PPUSH
9860: CALL_OW 296
9864: PUSH
9865: LD_INT 7
9867: LESS
9868: OR
9869: AND
9870: PUSH
9871: LD_EXP 34
9875: PPUSH
9876: LD_INT 10
9878: PPUSH
9879: CALL_OW 308
9883: NOT
9884: AND
9885: IFFALSE 9777
// InGameOn ;
9887: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9891: LD_EXP 34
9895: PPUSH
9896: CALL_OW 87
// if IsInUnit ( Heike ) then
9900: LD_EXP 25
9904: PPUSH
9905: CALL_OW 310
9909: IFFALSE 9920
// ComExitBuilding ( Heike ) ;
9911: LD_EXP 25
9915: PPUSH
9916: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9920: LD_EXP 34
9924: PUSH
9925: LD_EXP 27
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: PPUSH
9934: LD_EXP 25
9938: PPUSH
9939: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9943: LD_EXP 25
9947: PPUSH
9948: LD_EXP 34
9952: PPUSH
9953: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9957: LD_INT 22
9959: PUSH
9960: LD_INT 2
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: PUSH
9967: LD_INT 91
9969: PUSH
9970: LD_EXP 34
9974: PUSH
9975: LD_INT 10
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: LIST
9982: PUSH
9983: LD_INT 21
9985: PUSH
9986: LD_INT 3
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: LIST
9997: PPUSH
9998: CALL_OW 69
10002: IFFALSE 10028
// begin Say ( Kurt , DKs-scout-1 ) ;
10004: LD_EXP 34
10008: PPUSH
10009: LD_STRING DKs-scout-1
10011: PPUSH
10012: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
10016: LD_EXP 25
10020: PPUSH
10021: LD_STRING DH-scout-2
10023: PPUSH
10024: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
10028: LD_INT 35
10030: PPUSH
10031: CALL_OW 67
// until GetDistUnits ( Heike , Kurt ) < 6 ;
10035: LD_EXP 25
10039: PPUSH
10040: LD_EXP 34
10044: PPUSH
10045: CALL_OW 296
10049: PUSH
10050: LD_INT 6
10052: LESS
10053: IFFALSE 10028
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
10055: LD_EXP 34
10059: PUSH
10060: LD_EXP 27
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: PPUSH
10069: LD_EXP 25
10073: PPUSH
10074: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
10078: LD_EXP 34
10082: PPUSH
10083: LD_STRING DKs-scout-3
10085: PPUSH
10086: CALL_OW 88
// if Kaia then
10090: LD_EXP 30
10094: IFFALSE 10277
// begin if IsInUnit ( Kaia ) then
10096: LD_EXP 30
10100: PPUSH
10101: CALL_OW 310
10105: IFFALSE 10116
// ComExitBuilding ( Kaia ) ;
10107: LD_EXP 30
10111: PPUSH
10112: CALL_OW 122
// AddComMoveUnit ( Kaia , Kurt ) ;
10116: LD_EXP 30
10120: PPUSH
10121: LD_EXP 34
10125: PPUSH
10126: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
10130: LD_INT 35
10132: PPUSH
10133: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
10137: LD_EXP 30
10141: PPUSH
10142: LD_EXP 34
10146: PPUSH
10147: CALL_OW 296
10151: PUSH
10152: LD_INT 6
10154: LESS
10155: IFFALSE 10130
// ComTurnUnit ( Kaia , Kurt ) ;
10157: LD_EXP 30
10161: PPUSH
10162: LD_EXP 34
10166: PPUSH
10167: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
10171: LD_EXP 30
10175: PPUSH
10176: LD_STRING DK-scout-4
10178: PPUSH
10179: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
10183: LD_EXP 34
10187: PPUSH
10188: LD_EXP 30
10192: PPUSH
10193: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
10197: LD_EXP 34
10201: PPUSH
10202: LD_STRING DKs-scout-5
10204: PPUSH
10205: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
10209: LD_EXP 30
10213: PPUSH
10214: LD_STRING DK-scout-6
10216: PPUSH
10217: CALL_OW 88
// if Mike then
10221: LD_EXP 27
10225: IFFALSE 10277
// begin Say ( Mike , DM-scout-7 ) ;
10227: LD_EXP 27
10231: PPUSH
10232: LD_STRING DM-scout-7
10234: PPUSH
10235: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
10239: LD_EXP 30
10243: PPUSH
10244: LD_EXP 27
10248: PPUSH
10249: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
10253: LD_EXP 30
10257: PPUSH
10258: LD_STRING DK-scout-8
10260: PPUSH
10261: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
10265: LD_EXP 27
10269: PPUSH
10270: LD_STRING DM-scout-9
10272: PPUSH
10273: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
10277: LD_INT 184
10279: PPUSH
10280: LD_INT 100
10282: PPUSH
10283: LD_INT 2
10285: PPUSH
10286: LD_INT 12
10288: NEG
10289: PPUSH
10290: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
10294: LD_INT 184
10296: PPUSH
10297: LD_INT 100
10299: PPUSH
10300: LD_INT 2
10302: PPUSH
10303: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
10307: LD_INT 184
10309: PPUSH
10310: LD_INT 100
10312: PPUSH
10313: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
10317: LD_EXP 34
10321: PPUSH
10322: LD_STRING DKs-scout-10
10324: PPUSH
10325: CALL_OW 88
// wait ( 0 0$1 ) ;
10329: LD_INT 35
10331: PPUSH
10332: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
10336: LD_INT 144
10338: PPUSH
10339: LD_INT 65
10341: PPUSH
10342: LD_INT 2
10344: PPUSH
10345: LD_INT 12
10347: NEG
10348: PPUSH
10349: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
10353: LD_INT 144
10355: PPUSH
10356: LD_INT 65
10358: PPUSH
10359: LD_INT 2
10361: PPUSH
10362: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
10366: LD_INT 144
10368: PPUSH
10369: LD_INT 65
10371: PPUSH
10372: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
10376: LD_EXP 34
10380: PPUSH
10381: LD_STRING DKs-scout-11
10383: PPUSH
10384: CALL_OW 88
// wait ( 0 0$1 ) ;
10388: LD_INT 35
10390: PPUSH
10391: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
10395: LD_EXP 34
10399: PPUSH
10400: CALL_OW 87
// if Mike and not Givi then
10404: LD_EXP 27
10408: PUSH
10409: LD_EXP 26
10413: NOT
10414: AND
10415: IFFALSE 10441
// begin Say ( Mike , DM-scout-a-1 ) ;
10417: LD_EXP 27
10421: PPUSH
10422: LD_STRING DM-scout-a-1
10424: PPUSH
10425: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
10429: LD_EXP 25
10433: PPUSH
10434: LD_STRING DH-scout-a-2
10436: PPUSH
10437: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10441: LD_EXP 34
10445: PUSH
10446: LD_EXP 27
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: PPUSH
10455: LD_INT 2
10457: PPUSH
10458: CALL_OW 235
// InGameOff ;
10462: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
10466: LD_STRING Hill
10468: PPUSH
10469: CALL_OW 337
// allowToPatrol := true ;
10473: LD_ADDR_EXP 12
10477: PUSH
10478: LD_INT 1
10480: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10481: LD_INT 3150
10483: PPUSH
10484: CALL_OW 67
// InitHc ;
10488: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 ] [ Difficulty ] do
10492: LD_ADDR_VAR 0 1
10496: PUSH
10497: DOUBLE
10498: LD_INT 1
10500: DEC
10501: ST_TO_ADDR
10502: LD_INT 3
10504: PUSH
10505: LD_INT 3
10507: PUSH
10508: LD_INT 2
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: LIST
10515: PUSH
10516: LD_OWVAR 67
10520: ARRAY
10521: PUSH
10522: FOR_TO
10523: IFFALSE 10782
// begin uc_side := 2 ;
10525: LD_ADDR_OWVAR 20
10529: PUSH
10530: LD_INT 2
10532: ST_TO_ADDR
// uc_nation := 2 ;
10533: LD_ADDR_OWVAR 21
10537: PUSH
10538: LD_INT 2
10540: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 ] [ Difficulty ] ) ;
10541: LD_INT 0
10543: PPUSH
10544: LD_INT 1
10546: PUSH
10547: LD_INT 3
10549: PUSH
10550: LD_INT 1
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: LIST
10557: PUSH
10558: LD_VAR 0 1
10562: PUSH
10563: LD_INT 3
10565: MOD
10566: PUSH
10567: LD_INT 1
10569: PLUS
10570: ARRAY
10571: PPUSH
10572: LD_INT 3
10574: PUSH
10575: LD_INT 2
10577: PUSH
10578: LD_INT 2
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: LIST
10585: PUSH
10586: LD_OWVAR 67
10590: ARRAY
10591: PPUSH
10592: CALL_OW 380
// un := CreateHuman ;
10596: LD_ADDR_VAR 0 2
10600: PUSH
10601: CALL_OW 44
10605: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10606: LD_ADDR_EXP 37
10610: PUSH
10611: LD_EXP 37
10615: PUSH
10616: LD_VAR 0 2
10620: UNION
10621: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10622: LD_INT 2
10624: PPUSH
10625: LD_INT 2
10627: PPUSH
10628: LD_INT 13
10630: PPUSH
10631: LD_INT 2
10633: PUSH
10634: LD_INT 1
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: PUSH
10641: LD_VAR 0 1
10645: PUSH
10646: LD_INT 2
10648: MOD
10649: PUSH
10650: LD_INT 1
10652: PLUS
10653: ARRAY
10654: PPUSH
10655: LD_INT 1
10657: PPUSH
10658: LD_INT 27
10660: PUSH
10661: LD_INT 25
10663: PUSH
10664: LD_INT 27
10666: PUSH
10667: LD_INT 23
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: PUSH
10676: LD_OWVAR 67
10680: PUSH
10681: LD_INT 0
10683: PPUSH
10684: LD_INT 1
10686: PPUSH
10687: CALL_OW 12
10691: PLUS
10692: ARRAY
10693: PPUSH
10694: LD_INT 77
10696: PPUSH
10697: CALL 345 0 7
// veh := CreateVehicle ;
10701: LD_ADDR_VAR 0 3
10705: PUSH
10706: CALL_OW 45
10710: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10711: LD_VAR 0 3
10715: PPUSH
10716: LD_INT 2
10718: PPUSH
10719: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10723: LD_VAR 0 3
10727: PPUSH
10728: LD_INT 178
10730: PPUSH
10731: LD_INT 2
10733: PPUSH
10734: LD_INT 2
10736: PPUSH
10737: LD_INT 0
10739: PPUSH
10740: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10744: LD_VAR 0 2
10748: PPUSH
10749: LD_VAR 0 3
10753: PPUSH
10754: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10758: LD_VAR 0 2
10762: PPUSH
10763: LD_INT 183
10765: PPUSH
10766: LD_INT 11
10768: PPUSH
10769: CALL_OW 111
// wait ( 0 0$2 ) ;
10773: LD_INT 70
10775: PPUSH
10776: CALL_OW 67
// end ;
10780: GO 10522
10782: POP
10783: POP
// end ;
10784: PPOPN 3
10786: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10787: LD_EXP 4
10791: PUSH
10792: LD_EXP 35
10796: PPUSH
10797: CALL_OW 302
10801: AND
10802: IFFALSE 10851
10804: GO 10806
10806: DISABLE
// begin DialogueOn ;
10807: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10811: LD_EXP 35
10815: PPUSH
10816: LD_STRING DA-lab-1
10818: PPUSH
10819: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10823: LD_EXP 35
10827: PPUSH
10828: LD_STRING DA-lab-2
10830: PPUSH
10831: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10835: LD_EXP 25
10839: PPUSH
10840: LD_STRING DH-lab-3
10842: PPUSH
10843: CALL_OW 88
// DialogueOff ;
10847: CALL_OW 7
// end ;
10851: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10852: LD_INT 17
10854: PPUSH
10855: LD_INT 2
10857: PPUSH
10858: CALL_OW 321
10862: PUSH
10863: LD_INT 2
10865: EQUAL
10866: IFFALSE 10998
10868: GO 10870
10870: DISABLE
10871: LD_INT 0
10873: PPUSH
// begin DialogueOn ;
10874: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10878: LD_EXP 35
10882: PPUSH
10883: LD_STRING DA-Cam-1
10885: PPUSH
10886: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10890: LD_EXP 35
10894: PPUSH
10895: LD_STRING DA-Cam-2
10897: PPUSH
10898: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10902: LD_EXP 35
10906: PPUSH
10907: LD_STRING DA-Cam-3
10909: PPUSH
10910: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10914: LD_EXP 25
10918: PPUSH
10919: LD_STRING DH-Cam-4
10921: PPUSH
10922: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
10926: LD_EXP 30
10930: PPUSH
10931: LD_STRING DK-Cam-5
10933: PPUSH
10934: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
10938: LD_EXP 30
10942: PPUSH
10943: LD_STRING DK-Cam-6
10945: PPUSH
10946: CALL_OW 88
// DialogueOff ;
10950: CALL_OW 7
// Query ( Camera ) ;
10954: LD_STRING Camera
10956: PPUSH
10957: CALL_OW 97
// hiddenCameraAllowed := true ;
10961: LD_ADDR_EXP 5
10965: PUSH
10966: LD_INT 1
10968: ST_TO_ADDR
// for i in camAreas do
10969: LD_ADDR_VAR 0 1
10973: PUSH
10974: LD_EXP 8
10978: PUSH
10979: FOR_IN
10980: IFFALSE 10996
// SetAreaMapShow ( i , 1 ) ;
10982: LD_VAR 0 1
10986: PPUSH
10987: LD_INT 1
10989: PPUSH
10990: CALL_OW 424
10994: GO 10979
10996: POP
10997: POP
// end ;
10998: PPOPN 1
11000: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
11001: LD_EXP 8
11005: NOT
11006: PUSH
11007: LD_EXP 5
11011: AND
11012: IFFALSE 11110
11014: GO 11016
11016: DISABLE
11017: LD_INT 0
11019: PPUSH
// begin stop_talking := true ;
11020: LD_ADDR_OWVAR 56
11024: PUSH
11025: LD_INT 1
11027: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
11028: LD_ADDR_VAR 0 1
11032: PUSH
11033: LD_INT 22
11035: PUSH
11036: LD_INT 2
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 21
11045: PUSH
11046: LD_INT 1
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PUSH
11053: LD_INT 23
11055: PUSH
11056: LD_INT 2
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: LIST
11067: PPUSH
11068: CALL_OW 69
11072: PUSH
11073: FOR_IN
11074: IFFALSE 11093
// AddExperience ( i , 2 , 450 ) ;
11076: LD_VAR 0 1
11080: PPUSH
11081: LD_INT 2
11083: PPUSH
11084: LD_INT 450
11086: PPUSH
11087: CALL_OW 492
11091: GO 11073
11093: POP
11094: POP
// stop_talking := false ;
11095: LD_ADDR_OWVAR 56
11099: PUSH
11100: LD_INT 0
11102: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
11103: LD_STRING ACH_CAMERA
11105: PPUSH
11106: CALL_OW 543
// end ;
11110: PPOPN 1
11112: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
11113: LD_EXP 9
11117: PUSH
11118: LD_EXP 11
11122: NOT
11123: AND
11124: IFFALSE 11217
11126: GO 11128
11128: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert [ 1 ] ) , GetY ( russianAlert [ 1 ] ) , 2 , - 6 ) ;
11129: LD_EXP 9
11133: PUSH
11134: LD_INT 1
11136: ARRAY
11137: PPUSH
11138: CALL_OW 250
11142: PPUSH
11143: LD_EXP 9
11147: PUSH
11148: LD_INT 1
11150: ARRAY
11151: PPUSH
11152: CALL_OW 251
11156: PPUSH
11157: LD_INT 2
11159: PPUSH
11160: LD_INT 6
11162: NEG
11163: PPUSH
11164: CALL_OW 330
// CenterNowOnUnits ( russianAlert [ 1 ] ) ;
11168: LD_EXP 9
11172: PUSH
11173: LD_INT 1
11175: ARRAY
11176: PPUSH
11177: CALL_OW 87
// DialogueOn ;
11181: CALL_OW 6
// if spottedByPatrol then
11185: LD_EXP 7
11189: IFFALSE 11203
// Say ( Heike , DH-Spot-f-3 ) ;
11191: LD_EXP 25
11195: PPUSH
11196: LD_STRING DH-Spot-f-3
11198: PPUSH
11199: CALL_OW 88
// dwait ( 0 0$2 ) ;
11203: LD_INT 70
11205: PPUSH
11206: CALL_OW 68
// YouLost ( Spotted ) ;
11210: LD_STRING Spotted
11212: PPUSH
11213: CALL_OW 104
// end ;
11217: END
// every 0 0$3 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
11218: LD_INT 3
11220: PUSH
11221: LD_INT 6
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PPUSH
11228: LD_INT 2
11230: PPUSH
11231: LD_EXP 47
11235: PPUSH
11236: CALL 1965 0 3
11240: IFFALSE 11277
11242: GO 11244
11244: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) [ 1 ] ;
11245: LD_ADDR_EXP 9
11249: PUSH
11250: LD_INT 3
11252: PUSH
11253: LD_INT 6
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: PPUSH
11260: LD_INT 2
11262: PPUSH
11263: LD_EXP 47
11267: PPUSH
11268: CALL 1965 0 3
11272: PUSH
11273: LD_INT 1
11275: ARRAY
11276: ST_TO_ADDR
11277: END
// every 0 0$1 trigger russianAlert do var i , tmp , towers , noncombat ;
11278: LD_EXP 9
11282: IFFALSE 11579
11284: GO 11286
11286: DISABLE
11287: LD_INT 0
11289: PPUSH
11290: PPUSH
11291: PPUSH
11292: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_inside ] ] ) ;
11293: LD_ADDR_VAR 0 2
11297: PUSH
11298: LD_EXP 44
11302: PPUSH
11303: LD_INT 25
11305: PUSH
11306: LD_INT 1
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: PUSH
11313: LD_INT 54
11315: PUSH
11316: EMPTY
11317: LIST
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: PPUSH
11323: CALL_OW 72
11327: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
11328: LD_ADDR_VAR 0 3
11332: PUSH
11333: LD_INT 22
11335: PUSH
11336: LD_INT 6
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: PUSH
11343: LD_INT 30
11345: PUSH
11346: LD_INT 32
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: PPUSH
11357: CALL_OW 69
11361: ST_TO_ADDR
// for i := 1 to tmp do
11362: LD_ADDR_VAR 0 1
11366: PUSH
11367: DOUBLE
11368: LD_INT 1
11370: DEC
11371: ST_TO_ADDR
11372: LD_VAR 0 2
11376: PUSH
11377: FOR_TO
11378: IFFALSE 11423
// begin ComExitBuilding ( tmp [ i ] ) ;
11380: LD_VAR 0 2
11384: PUSH
11385: LD_VAR 0 1
11389: ARRAY
11390: PPUSH
11391: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , towers [ i ] ) ;
11395: LD_VAR 0 2
11399: PUSH
11400: LD_VAR 0 1
11404: ARRAY
11405: PPUSH
11406: LD_VAR 0 3
11410: PUSH
11411: LD_VAR 0 1
11415: ARRAY
11416: PPUSH
11417: CALL_OW 180
// end ;
11421: GO 11377
11423: POP
11424: POP
// noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11425: LD_ADDR_VAR 0 4
11429: PUSH
11430: LD_EXP 42
11434: PUSH
11435: LD_EXP 44
11439: PUSH
11440: LD_EXP 45
11444: UNION
11445: PPUSH
11446: LD_INT 3
11448: PUSH
11449: LD_INT 25
11451: PUSH
11452: LD_INT 1
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: PUSH
11459: EMPTY
11460: LIST
11461: LIST
11462: PPUSH
11463: CALL_OW 72
11467: UNION
11468: ST_TO_ADDR
// for i in noncombat do
11469: LD_ADDR_VAR 0 1
11473: PUSH
11474: LD_VAR 0 4
11478: PUSH
11479: FOR_IN
11480: IFFALSE 11516
// begin if IsInUnit ( i ) then
11482: LD_VAR 0 1
11486: PPUSH
11487: CALL_OW 310
11491: IFFALSE 11502
// ComExitBuilding ( i ) ;
11493: LD_VAR 0 1
11497: PPUSH
11498: CALL_OW 122
// AddComMoveToArea ( i , westEscapeArea ) ;
11502: LD_VAR 0 1
11506: PPUSH
11507: LD_INT 16
11509: PPUSH
11510: CALL_OW 173
// end ;
11514: GO 11479
11516: POP
11517: POP
// if not allowHeikeAttack then
11518: LD_EXP 11
11522: NOT
11523: IFFALSE 11527
// exit ;
11525: GO 11579
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11527: LD_EXP 40
11531: PPUSH
11532: LD_STRING D9a-Kur-1
11534: PPUSH
11535: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11539: LD_EXP 43
11543: PPUSH
11544: LD_STRING D9a-Bur-1
11546: PPUSH
11547: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11551: LD_EXP 40
11555: PPUSH
11556: LD_STRING D9a-Kur-2
11558: PPUSH
11559: CALL_OW 94
// omicronFall := true ;
11563: LD_ADDR_EXP 13
11567: PUSH
11568: LD_INT 1
11570: ST_TO_ADDR
// retreatFromOmicron := true ;
11571: LD_ADDR_EXP 20
11575: PUSH
11576: LD_INT 1
11578: ST_TO_ADDR
// end ;
11579: PPOPN 4
11581: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11582: LD_INT 16
11584: PPUSH
11585: LD_INT 3
11587: PUSH
11588: LD_INT 22
11590: PUSH
11591: LD_INT 2
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: PUSH
11602: LD_INT 23
11604: PUSH
11605: LD_INT 3
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PPUSH
11616: CALL_OW 70
11620: IFFALSE 11703
11622: GO 11624
11624: DISABLE
11625: LD_INT 0
11627: PPUSH
// begin enable ;
11628: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11629: LD_ADDR_VAR 0 1
11633: PUSH
11634: LD_INT 16
11636: PPUSH
11637: LD_INT 3
11639: PUSH
11640: LD_INT 22
11642: PUSH
11643: LD_INT 2
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: LD_INT 23
11656: PUSH
11657: LD_INT 3
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PPUSH
11668: CALL_OW 70
11672: PUSH
11673: FOR_IN
11674: IFFALSE 11701
// begin escapeCounter := escapeCounter + 1 ;
11676: LD_ADDR_EXP 19
11680: PUSH
11681: LD_EXP 19
11685: PUSH
11686: LD_INT 1
11688: PLUS
11689: ST_TO_ADDR
// RemoveUnit ( i ) ;
11690: LD_VAR 0 1
11694: PPUSH
11695: CALL_OW 64
// end ;
11699: GO 11673
11701: POP
11702: POP
// end ;
11703: PPOPN 1
11705: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11706: LD_OWVAR 1
11710: PUSH
11711: LD_INT 13650
11713: PUSH
11714: LD_INT 0
11716: PPUSH
11717: LD_INT 3150
11719: PPUSH
11720: CALL_OW 12
11724: PLUS
11725: GREATEREQUAL
11726: IFFALSE 11735
11728: GO 11730
11730: DISABLE
// SmallAmericanReinforcements ;
11731: CALL 7229 0 0
11735: END
// every 0 0$1 trigger tick >= 9 9$15 do
11736: LD_OWVAR 1
11740: PUSH
11741: LD_INT 19425
11743: GREATEREQUAL
11744: IFFALSE 11809
11746: GO 11748
11748: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11749: LD_EXP 48
11753: PPUSH
11754: LD_INT 21
11756: PUSH
11757: LD_INT 2
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: PPUSH
11764: CALL_OW 72
11768: PPUSH
11769: LD_INT 62
11771: PPUSH
11772: LD_INT 22
11774: PPUSH
11775: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11779: LD_EXP 49
11783: PPUSH
11784: LD_INT 69
11786: PPUSH
11787: LD_INT 27
11789: PPUSH
11790: CALL_OW 111
// wait ( 1 1$00 ) ;
11794: LD_INT 2100
11796: PPUSH
11797: CALL_OW 67
// startAttackOnOmicron := true ;
11801: LD_ADDR_EXP 6
11805: PUSH
11806: LD_INT 1
11808: ST_TO_ADDR
// end ;
11809: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11810: LD_EXP 22
11814: PUSH
11815: LD_INT 0
11817: EQUAL
11818: IFFALSE 13691
11820: GO 11822
11822: DISABLE
11823: LD_INT 0
11825: PPUSH
11826: PPUSH
11827: PPUSH
11828: PPUSH
11829: PPUSH
11830: PPUSH
11831: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11832: LD_INT 5
11834: PPUSH
11835: LD_INT 2
11837: PPUSH
11838: CALL_OW 343
// PrepareOmarForces ;
11842: CALL 2533 0 0
// wait ( 0 0$03 ) ;
11846: LD_INT 105
11848: PPUSH
11849: CALL_OW 67
// allowHeikeAttack := true ;
11853: LD_ADDR_EXP 11
11857: PUSH
11858: LD_INT 1
11860: ST_TO_ADDR
// activeGrishkoAI := false ;
11861: LD_ADDR_EXP 10
11865: PUSH
11866: LD_INT 0
11868: ST_TO_ADDR
// if not hillBase then
11869: LD_EXP 15
11873: NOT
11874: IFFALSE 11883
// ChangeMissionObjectives ( HillDone ) ;
11876: LD_STRING HillDone
11878: PPUSH
11879: CALL_OW 337
// CenterOnUnits ( Omar ) ;
11883: LD_EXP 33
11887: PPUSH
11888: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
11892: LD_ADDR_VAR 0 1
11896: PUSH
11897: LD_INT 22
11899: PUSH
11900: LD_INT 2
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 21
11909: PUSH
11910: LD_INT 1
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: PPUSH
11921: CALL_OW 69
11925: PUSH
11926: FOR_IN
11927: IFFALSE 11951
// if HasTask ( i ) then
11929: LD_VAR 0 1
11933: PPUSH
11934: CALL_OW 314
11938: IFFALSE 11949
// ComHold ( i ) ;
11940: LD_VAR 0 1
11944: PPUSH
11945: CALL_OW 140
11949: GO 11926
11951: POP
11952: POP
// DialogueOn ;
11953: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
11957: LD_EXP 33
11961: PPUSH
11962: LD_STRING DO-assault-1
11964: PPUSH
11965: CALL_OW 94
// DialogueOff ;
11969: CALL_OW 7
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
11973: LD_ADDR_VAR 0 1
11977: PUSH
11978: LD_EXP 46
11982: PPUSH
11983: LD_INT 3
11985: PUSH
11986: LD_INT 54
11988: PUSH
11989: EMPTY
11990: LIST
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: PPUSH
11996: CALL_OW 72
12000: PUSH
12001: FOR_IN
12002: IFFALSE 12021
// ComMoveXY ( i , 226 , 114 ) ;
12004: LD_VAR 0 1
12008: PPUSH
12009: LD_INT 226
12011: PPUSH
12012: LD_INT 114
12014: PPUSH
12015: CALL_OW 111
12019: GO 12001
12021: POP
12022: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
12023: LD_EXP 41
12027: PPUSH
12028: LD_INT 22
12030: PUSH
12031: LD_INT 6
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PUSH
12038: LD_INT 30
12040: PUSH
12041: LD_INT 4
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PPUSH
12052: CALL_OW 69
12056: PPUSH
12057: LD_EXP 41
12061: PPUSH
12062: CALL_OW 74
12066: PPUSH
12067: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
12071: LD_STRING Attack
12073: PPUSH
12074: CALL_OW 337
// music_class := music_combat ;
12078: LD_ADDR_OWVAR 72
12082: PUSH
12083: LD_INT 1
12085: ST_TO_ADDR
// music_nat := 4 ;
12086: LD_ADDR_OWVAR 71
12090: PUSH
12091: LD_INT 4
12093: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
12094: LD_INT 5
12096: PPUSH
12097: LD_EXP 41
12101: PPUSH
12102: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12106: LD_INT 6
12108: PPUSH
12109: LD_EXP 38
12113: PPUSH
12114: LD_INT 25
12116: PUSH
12117: LD_INT 1
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: PPUSH
12124: CALL_OW 72
12128: PUSH
12129: LD_INT 4
12131: ARRAY
12132: PPUSH
12133: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
12137: LD_ADDR_VAR 0 1
12141: PUSH
12142: LD_EXP 38
12146: PPUSH
12147: LD_INT 3
12149: PUSH
12150: LD_INT 25
12152: PUSH
12153: LD_INT 4
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: PPUSH
12164: CALL_OW 72
12168: PUSH
12169: FOR_IN
12170: IFFALSE 12189
// ComAgressiveMove ( i , 221 , 110 ) ;
12172: LD_VAR 0 1
12176: PPUSH
12177: LD_INT 221
12179: PPUSH
12180: LD_INT 110
12182: PPUSH
12183: CALL_OW 114
12187: GO 12169
12189: POP
12190: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
12191: LD_EXP 38
12195: PPUSH
12196: LD_INT 25
12198: PUSH
12199: LD_INT 4
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: PPUSH
12206: CALL_OW 72
12210: PPUSH
12211: LD_INT 214
12213: PPUSH
12214: LD_INT 124
12216: PPUSH
12217: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
12221: LD_EXP 38
12225: PPUSH
12226: LD_INT 25
12228: PUSH
12229: LD_INT 1
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: PPUSH
12236: CALL_OW 72
12240: PUSH
12241: LD_INT 4
12243: ARRAY
12244: PPUSH
12245: LD_INT 214
12247: PPUSH
12248: LD_INT 114
12250: PPUSH
12251: LD_INT 0
12253: PPUSH
12254: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
12258: LD_EXP 41
12262: PPUSH
12263: LD_STRING D9-Gri-1
12265: PPUSH
12266: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
12270: LD_EXP 40
12274: PPUSH
12275: LD_STRING D9-Kur-1
12277: PPUSH
12278: CALL_OW 94
// wait ( 0 0$1 ) ;
12282: LD_INT 35
12284: PPUSH
12285: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
12289: LD_EXP 33
12293: PPUSH
12294: LD_INT 233
12296: PPUSH
12297: LD_INT 130
12299: PPUSH
12300: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
12304: LD_EXP 41
12308: PPUSH
12309: LD_STRING D9-Gri-2
12311: PPUSH
12312: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12316: LD_EXP 40
12320: PPUSH
12321: LD_STRING D9-Kur-2
12323: PPUSH
12324: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
12328: LD_EXP 41
12332: PPUSH
12333: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
12337: LD_EXP 41
12341: PPUSH
12342: LD_INT 211
12344: PPUSH
12345: LD_INT 104
12347: PPUSH
12348: CALL_OW 171
// AddComHold ( Grishko ) ;
12352: LD_EXP 41
12356: PPUSH
12357: CALL_OW 200
// repeat wait ( 3 ) ;
12361: LD_INT 3
12363: PPUSH
12364: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
12368: LD_EXP 41
12372: PPUSH
12373: CALL_OW 310
12377: NOT
12378: IFFALSE 12361
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
12380: LD_EXP 38
12384: PPUSH
12385: LD_INT 34
12387: PUSH
12388: LD_INT 26
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: PPUSH
12395: CALL_OW 72
12399: PPUSH
12400: LD_EXP 41
12404: PPUSH
12405: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12409: LD_EXP 38
12413: PPUSH
12414: LD_INT 34
12416: PUSH
12417: LD_INT 26
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: PPUSH
12424: CALL_OW 72
12428: PPUSH
12429: LD_INT 215
12431: PPUSH
12432: LD_INT 106
12434: PPUSH
12435: CALL_OW 174
// repeat wait ( 3 ) ;
12439: LD_INT 3
12441: PPUSH
12442: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12446: LD_EXP 41
12450: PPUSH
12451: CALL_OW 256
12455: PUSH
12456: LD_INT 1000
12458: LESS
12459: IFFALSE 12439
// NormalAttack ( 5 , Grishko ) ;
12461: LD_INT 5
12463: PPUSH
12464: LD_EXP 41
12468: PPUSH
12469: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12473: LD_INT 6
12475: PPUSH
12476: LD_EXP 38
12480: PPUSH
12481: LD_INT 25
12483: PUSH
12484: LD_INT 1
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PPUSH
12491: CALL_OW 72
12495: PUSH
12496: LD_INT 4
12498: ARRAY
12499: PPUSH
12500: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
12504: LD_EXP 41
12508: PPUSH
12509: LD_STRING D9-Gri-3
12511: PPUSH
12512: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12516: LD_EXP 40
12520: PPUSH
12521: LD_STRING D9-Kur-3
12523: PPUSH
12524: CALL_OW 94
// music_class := music_auto ;
12528: LD_ADDR_OWVAR 72
12532: PUSH
12533: LD_INT 0
12535: ST_TO_ADDR
// music_nat := music_auto ;
12536: LD_ADDR_OWVAR 71
12540: PUSH
12541: LD_INT 0
12543: ST_TO_ADDR
// for i in omarSquad do
12544: LD_ADDR_VAR 0 1
12548: PUSH
12549: LD_EXP 38
12553: PUSH
12554: FOR_IN
12555: IFFALSE 12697
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12557: LD_VAR 0 1
12561: PPUSH
12562: CALL_OW 247
12566: PUSH
12567: LD_INT 2
12569: EQUAL
12570: PUSH
12571: LD_VAR 0 1
12575: PPUSH
12576: CALL_OW 256
12580: PUSH
12581: LD_INT 1000
12583: LESS
12584: AND
12585: IFFALSE 12651
// begin driver := IsDrivenBy ( i ) ;
12587: LD_ADDR_VAR 0 2
12591: PUSH
12592: LD_VAR 0 1
12596: PPUSH
12597: CALL_OW 311
12601: ST_TO_ADDR
// veh := i ;
12602: LD_ADDR_VAR 0 3
12606: PUSH
12607: LD_VAR 0 1
12611: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12612: LD_VAR 0 2
12616: PPUSH
12617: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12621: LD_VAR 0 2
12625: PPUSH
12626: LD_VAR 0 3
12630: PPUSH
12631: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12635: LD_VAR 0 2
12639: PPUSH
12640: LD_VAR 0 3
12644: PPUSH
12645: CALL_OW 180
// end else
12649: GO 12695
// if GetLives ( i ) < 500 then
12651: LD_VAR 0 1
12655: PPUSH
12656: CALL_OW 256
12660: PUSH
12661: LD_INT 500
12663: LESS
12664: IFFALSE 12695
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12666: LD_EXP 38
12670: PPUSH
12671: LD_INT 25
12673: PUSH
12674: LD_INT 4
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: PPUSH
12681: CALL_OW 72
12685: PPUSH
12686: LD_VAR 0 1
12690: PPUSH
12691: CALL_OW 188
// end ; end ;
12695: GO 12554
12697: POP
12698: POP
// repeat wait ( 0 0$1 ) ;
12699: LD_INT 35
12701: PPUSH
12702: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12706: LD_EXP 38
12710: PPUSH
12711: LD_INT 3
12713: PUSH
12714: LD_INT 24
12716: PUSH
12717: LD_INT 1000
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: PUSH
12728: LD_INT 21
12730: PUSH
12731: LD_INT 2
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: PPUSH
12742: CALL_OW 72
12746: NOT
12747: PUSH
12748: LD_EXP 38
12752: PPUSH
12753: LD_INT 3
12755: PUSH
12756: LD_INT 24
12758: PUSH
12759: LD_INT 250
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: PPUSH
12770: CALL_OW 72
12774: NOT
12775: AND
12776: IFFALSE 12699
// wait ( 0 0$2 ) ;
12778: LD_INT 70
12780: PPUSH
12781: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12785: LD_ADDR_VAR 0 5
12789: PUSH
12790: LD_EXP 38
12794: PPUSH
12795: LD_INT 58
12797: PUSH
12798: EMPTY
12799: LIST
12800: PUSH
12801: LD_INT 21
12803: PUSH
12804: LD_INT 2
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PPUSH
12815: CALL_OW 72
12819: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
12820: LD_ADDR_VAR 0 6
12824: PUSH
12825: LD_EXP 38
12829: PPUSH
12830: LD_INT 25
12832: PUSH
12833: LD_INT 3
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: PUSH
12840: LD_INT 3
12842: PUSH
12843: LD_INT 55
12845: PUSH
12846: EMPTY
12847: LIST
12848: PUSH
12849: EMPTY
12850: LIST
12851: LIST
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: PPUSH
12857: CALL_OW 72
12861: ST_TO_ADDR
// for i := 1 to tmp do
12862: LD_ADDR_VAR 0 1
12866: PUSH
12867: DOUBLE
12868: LD_INT 1
12870: DEC
12871: ST_TO_ADDR
12872: LD_VAR 0 5
12876: PUSH
12877: FOR_TO
12878: IFFALSE 12908
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
12880: LD_VAR 0 6
12884: PUSH
12885: LD_VAR 0 1
12889: ARRAY
12890: PPUSH
12891: LD_VAR 0 5
12895: PUSH
12896: LD_VAR 0 1
12900: ARRAY
12901: PPUSH
12902: CALL_OW 120
12906: GO 12877
12908: POP
12909: POP
// wait ( 0 0$5 ) ;
12910: LD_INT 175
12912: PPUSH
12913: CALL_OW 67
// ComMoveXY ( omarSquad , 199 , 141 ) ;
12917: LD_EXP 38
12921: PPUSH
12922: LD_INT 199
12924: PPUSH
12925: LD_INT 141
12927: PPUSH
12928: CALL_OW 111
// ComMoveXY ( Omar , 190 , 143 ) ;
12932: LD_EXP 33
12936: PPUSH
12937: LD_INT 190
12939: PPUSH
12940: LD_INT 143
12942: PPUSH
12943: CALL_OW 111
// AddComHold ( Omar ) ;
12947: LD_EXP 33
12951: PPUSH
12952: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
12956: LD_EXP 38
12960: PPUSH
12961: LD_INT 2
12963: PUSH
12964: LD_INT 25
12966: PUSH
12967: LD_INT 1
12969: PUSH
12970: EMPTY
12971: LIST
12972: LIST
12973: PUSH
12974: LD_INT 25
12976: PUSH
12977: LD_INT 4
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: LIST
12988: PPUSH
12989: CALL_OW 72
12993: PPUSH
12994: LD_INT 161
12996: PPUSH
12997: LD_INT 130
12999: PPUSH
13000: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
13004: LD_EXP 38
13008: PPUSH
13009: LD_INT 25
13011: PUSH
13012: LD_INT 1
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: PPUSH
13019: CALL_OW 72
13023: PPUSH
13024: LD_INT 163
13026: PPUSH
13027: LD_INT 122
13029: PPUSH
13030: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
13034: LD_EXP 38
13038: PPUSH
13039: LD_INT 25
13041: PUSH
13042: LD_INT 1
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: PPUSH
13049: CALL_OW 72
13053: PUSH
13054: LD_INT 4
13056: ARRAY
13057: PPUSH
13058: LD_INT 165
13060: PPUSH
13061: LD_INT 118
13063: PPUSH
13064: LD_INT 0
13066: PPUSH
13067: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
13071: LD_EXP 38
13075: PPUSH
13076: LD_INT 25
13078: PUSH
13079: LD_INT 1
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: PPUSH
13086: CALL_OW 72
13090: PUSH
13091: LD_INT 4
13093: ARRAY
13094: PPUSH
13095: LD_INT 159
13097: PPUSH
13098: LD_INT 116
13100: PPUSH
13101: LD_INT 0
13103: PPUSH
13104: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
13108: LD_EXP 38
13112: PPUSH
13113: LD_INT 21
13115: PUSH
13116: LD_INT 2
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: PPUSH
13123: CALL_OW 72
13127: PPUSH
13128: LD_INT 169
13130: PPUSH
13131: LD_INT 114
13133: PPUSH
13134: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
13138: LD_INT 35
13140: PPUSH
13141: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
13145: LD_ADDR_VAR 0 5
13149: PUSH
13150: LD_EXP 38
13154: PPUSH
13155: LD_INT 25
13157: PUSH
13158: LD_INT 1
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PPUSH
13165: CALL_OW 72
13169: ST_TO_ADDR
// for i in tmp do
13170: LD_ADDR_VAR 0 1
13174: PUSH
13175: LD_VAR 0 5
13179: PUSH
13180: FOR_IN
13181: IFFALSE 13278
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
13183: LD_VAR 0 1
13187: PPUSH
13188: CALL_OW 256
13192: PUSH
13193: LD_INT 600
13195: LESS
13196: PUSH
13197: LD_VAR 0 1
13201: PPUSH
13202: LD_INT 161
13204: PPUSH
13205: LD_INT 130
13207: PPUSH
13208: CALL_OW 297
13212: PUSH
13213: LD_INT 6
13215: GREATER
13216: AND
13217: IFFALSE 13234
// ComMoveXY ( i , 161 , 130 ) ;
13219: LD_VAR 0 1
13223: PPUSH
13224: LD_INT 161
13226: PPUSH
13227: LD_INT 130
13229: PPUSH
13230: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
13234: LD_VAR 0 1
13238: PPUSH
13239: CALL_OW 256
13243: PUSH
13244: LD_INT 1000
13246: EQUAL
13247: PUSH
13248: LD_VAR 0 1
13252: PPUSH
13253: CALL_OW 314
13257: NOT
13258: AND
13259: IFFALSE 13276
// ComAgressiveMove ( i , 160 , 109 ) ;
13261: LD_VAR 0 1
13265: PPUSH
13266: LD_INT 160
13268: PPUSH
13269: LD_INT 109
13271: PPUSH
13272: CALL_OW 114
// end ;
13276: GO 13180
13278: POP
13279: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
13280: LD_ADDR_VAR 0 5
13284: PUSH
13285: LD_EXP 38
13289: PPUSH
13290: LD_INT 21
13292: PUSH
13293: LD_INT 2
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: PPUSH
13300: CALL_OW 72
13304: ST_TO_ADDR
// for i in tmp do
13305: LD_ADDR_VAR 0 1
13309: PUSH
13310: LD_VAR 0 5
13314: PUSH
13315: FOR_IN
13316: IFFALSE 13582
// begin tmp2 := IsDrivenBy ( i ) ;
13318: LD_ADDR_VAR 0 6
13322: PUSH
13323: LD_VAR 0 1
13327: PPUSH
13328: CALL_OW 311
13332: ST_TO_ADDR
// if not tmp2 then
13333: LD_VAR 0 6
13337: NOT
13338: IFFALSE 13342
// continue ;
13340: GO 13315
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
13342: LD_VAR 0 1
13346: PPUSH
13347: CALL_OW 256
13351: PUSH
13352: LD_INT 600
13354: GREATEREQUAL
13355: PUSH
13356: LD_VAR 0 1
13360: PPUSH
13361: CALL_OW 110
13365: PUSH
13366: LD_INT 1
13368: EQUAL
13369: AND
13370: IFFALSE 13384
// SetTag ( i , 0 ) ;
13372: LD_VAR 0 1
13376: PPUSH
13377: LD_INT 0
13379: PPUSH
13380: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
13384: LD_VAR 0 1
13388: PPUSH
13389: CALL_OW 256
13393: PUSH
13394: LD_INT 600
13396: GREATEREQUAL
13397: PUSH
13398: LD_VAR 0 1
13402: PPUSH
13403: CALL_OW 110
13407: NOT
13408: AND
13409: IFFALSE 13435
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13411: LD_VAR 0 1
13415: PPUSH
13416: LD_VAR 0 7
13420: PPUSH
13421: LD_VAR 0 1
13425: PPUSH
13426: CALL_OW 74
13430: PPUSH
13431: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13435: LD_VAR 0 1
13439: PPUSH
13440: CALL_OW 256
13444: PUSH
13445: LD_INT 600
13447: LESS
13448: PUSH
13449: LD_VAR 0 1
13453: PPUSH
13454: CALL_OW 110
13458: NOT
13459: AND
13460: IFFALSE 13489
// begin SetTag ( i , 1 ) ;
13462: LD_VAR 0 1
13466: PPUSH
13467: LD_INT 1
13469: PPUSH
13470: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13474: LD_VAR 0 1
13478: PPUSH
13479: LD_INT 202
13481: PPUSH
13482: LD_INT 150
13484: PPUSH
13485: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13489: LD_VAR 0 1
13493: PPUSH
13494: CALL_OW 110
13498: PUSH
13499: LD_INT 1
13501: EQUAL
13502: PUSH
13503: LD_VAR 0 1
13507: PPUSH
13508: LD_INT 202
13510: PPUSH
13511: LD_INT 150
13513: PPUSH
13514: CALL_OW 297
13518: PUSH
13519: LD_INT 6
13521: LESS
13522: AND
13523: PUSH
13524: LD_VAR 0 6
13528: AND
13529: IFFALSE 13580
// begin ComExitVehicle ( tmp2 ) ;
13531: LD_VAR 0 6
13535: PPUSH
13536: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13540: LD_VAR 0 6
13544: PPUSH
13545: LD_VAR 0 1
13549: PPUSH
13550: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13554: LD_VAR 0 6
13558: PPUSH
13559: LD_INT 700
13561: PPUSH
13562: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13566: LD_VAR 0 6
13570: PPUSH
13571: LD_VAR 0 1
13575: PPUSH
13576: CALL_OW 180
// end ; end ;
13580: GO 13315
13582: POP
13583: POP
// until kirovDestroyed ;
13584: LD_EXP 16
13588: IFFALSE 13138
// repeat wait ( 0 0$1 ) ;
13590: LD_INT 35
13592: PPUSH
13593: CALL_OW 67
// for i in omarSquad union Omar do
13597: LD_ADDR_VAR 0 1
13601: PUSH
13602: LD_EXP 38
13606: PUSH
13607: LD_EXP 33
13611: UNION
13612: PUSH
13613: FOR_IN
13614: IFFALSE 13658
// if IsInArea ( i , southRoadArea ) then
13616: LD_VAR 0 1
13620: PPUSH
13621: LD_INT 15
13623: PPUSH
13624: CALL_OW 308
13628: IFFALSE 13641
// RemoveUnit ( i ) else
13630: LD_VAR 0 1
13634: PPUSH
13635: CALL_OW 64
13639: GO 13656
// ComMoveXY ( i , 208 , 162 ) ;
13641: LD_VAR 0 1
13645: PPUSH
13646: LD_INT 208
13648: PPUSH
13649: LD_INT 162
13651: PPUSH
13652: CALL_OW 111
13656: GO 13613
13658: POP
13659: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
13660: LD_INT 22
13662: PUSH
13663: LD_INT 5
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: PUSH
13670: LD_INT 21
13672: PUSH
13673: LD_INT 1
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: PPUSH
13684: CALL_OW 69
13688: NOT
13689: IFFALSE 13590
// end ;
13691: PPOPN 7
13693: END
// every 0 0$1 trigger IsDead ( kirov ) do
13694: LD_INT 71
13696: PPUSH
13697: CALL_OW 301
13701: IFFALSE 13718
13703: GO 13705
13705: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
13706: LD_EXP 25
13710: PPUSH
13711: LD_STRING DH-1-Kirov
13713: PPUSH
13714: CALL_OW 88
13718: END
// every 0 0$1 trigger See ( 2 , beria ) do
13719: LD_INT 2
13721: PPUSH
13722: LD_INT 106
13724: PPUSH
13725: CALL_OW 292
13729: IFFALSE 13746
13731: GO 13733
13733: DISABLE
// Say ( Heike , DH-1-Beria ) ;
13734: LD_EXP 25
13738: PPUSH
13739: LD_STRING DH-1-Beria
13741: PPUSH
13742: CALL_OW 88
13746: END
// every 0 0$1 trigger See ( 2 , kagan ) do
13747: LD_INT 2
13749: PPUSH
13750: LD_INT 112
13752: PPUSH
13753: CALL_OW 292
13757: IFFALSE 14002
13759: GO 13761
13761: DISABLE
// begin DialogueOn ;
13762: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
13766: LD_INT 112
13768: PPUSH
13769: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
13773: LD_EXP 25
13777: PPUSH
13778: LD_STRING DH-1-Kagan
13780: PPUSH
13781: CALL_OW 88
// if Kamil then
13785: LD_EXP 29
13789: IFFALSE 13827
// begin Say ( Kamil , DKam-Kagan-2 ) ;
13791: LD_EXP 29
13795: PPUSH
13796: LD_STRING DKam-Kagan-2
13798: PPUSH
13799: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
13803: LD_EXP 26
13807: PPUSH
13808: LD_STRING DG-Kagan-3
13810: PPUSH
13811: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
13815: LD_EXP 26
13819: PPUSH
13820: LD_STRING DG-Kagan-4
13822: PPUSH
13823: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
13827: LD_STRING KaganBase
13829: PPUSH
13830: CALL_OW 97
13834: PUSH
13835: LD_INT 1
13837: DOUBLE
13838: EQUAL
13839: IFTRUE 13843
13841: GO 13938
13843: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
13844: LD_EXP 25
13848: PPUSH
13849: LD_STRING DH-Kagan-5
13851: PPUSH
13852: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
13856: LD_EXP 25
13860: PPUSH
13861: LD_STRING DH-Kagan-6
13863: PPUSH
13864: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
13868: LD_EXP 36
13872: PPUSH
13873: LD_STRING DShar-Kagan-7
13875: PPUSH
13876: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
13880: LD_EXP 25
13884: PPUSH
13885: LD_STRING DH-Kagan-8
13887: PPUSH
13888: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
13892: LD_EXP 25
13896: PPUSH
13897: LD_STRING DH-Kagan-9
13899: PPUSH
13900: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
13904: LD_EXP 36
13908: PPUSH
13909: LD_STRING DShar-Kagan-10
13911: PPUSH
13912: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
13916: LD_EXP 25
13920: PPUSH
13921: LD_STRING DH-Kagan-11
13923: PPUSH
13924: CALL_OW 88
// kaganCaptured := true ;
13928: LD_ADDR_EXP 24
13932: PUSH
13933: LD_INT 1
13935: ST_TO_ADDR
// end ; 2 :
13936: GO 13998
13938: LD_INT 2
13940: DOUBLE
13941: EQUAL
13942: IFTRUE 13946
13944: GO 13997
13946: POP
// begin Say ( Heike , DH-Kagan-a-5 ) ;
13947: LD_EXP 25
13951: PPUSH
13952: LD_STRING DH-Kagan-a-5
13954: PPUSH
13955: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
13959: LD_EXP 25
13963: PPUSH
13964: LD_STRING DH-Kagan-a-6
13966: PPUSH
13967: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
13971: LD_EXP 25
13975: PPUSH
13976: LD_STRING DH-Kagan-a-7
13978: PPUSH
13979: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
13983: LD_EXP 26
13987: PPUSH
13988: LD_STRING DG-Kagan-a-8
13990: PPUSH
13991: CALL_OW 88
// end ; end ;
13995: GO 13998
13997: POP
// DialogueOff ;
13998: CALL_OW 7
// end ;
14002: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
14003: LD_EXP 18
14007: PUSH
14008: LD_INT 112
14010: PPUSH
14011: CALL_OW 255
14015: PUSH
14016: LD_INT 2
14018: EQUAL
14019: OR
14020: IFFALSE 14032
14022: GO 14024
14024: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
14025: LD_STRING KaganDone
14027: PPUSH
14028: CALL_OW 337
14032: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
14033: LD_EXP 6
14037: PUSH
14038: LD_EXP 48
14042: PPUSH
14043: LD_INT 95
14045: PUSH
14046: LD_INT 19
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: PPUSH
14053: CALL_OW 72
14057: AND
14058: IFFALSE 14135
14060: GO 14062
14062: DISABLE
// begin DialogueOn ;
14063: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
14067: LD_INT 63
14069: PPUSH
14070: LD_INT 32
14072: PPUSH
14073: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
14077: LD_INT 63
14079: PPUSH
14080: LD_INT 32
14082: PPUSH
14083: LD_INT 2
14085: PPUSH
14086: LD_INT 12
14088: NEG
14089: PPUSH
14090: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
14094: LD_EXP 25
14098: PPUSH
14099: LD_STRING DH-Omicron-1
14101: PPUSH
14102: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
14106: LD_EXP 27
14110: PPUSH
14111: LD_STRING DM-Omicron-2
14113: PPUSH
14114: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
14118: LD_INT 63
14120: PPUSH
14121: LD_INT 32
14123: PPUSH
14124: LD_INT 2
14126: PPUSH
14127: CALL_OW 331
// DialogueOff ;
14131: CALL_OW 7
// end ;
14135: END
// every 0 0$3 trigger See ( 2 , ruLab ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) and not InBattle ( 2 ) do var i , tmp , tmp2 , q , settings ;
14136: LD_INT 2
14138: PPUSH
14139: LD_EXP 50
14143: PPUSH
14144: CALL_OW 292
14148: PUSH
14149: LD_EXP 50
14153: PPUSH
14154: CALL_OW 302
14158: AND
14159: PUSH
14160: LD_EXP 25
14164: PPUSH
14165: CALL_OW 302
14169: AND
14170: PUSH
14171: LD_EXP 35
14175: PPUSH
14176: CALL_OW 302
14180: AND
14181: PUSH
14182: LD_INT 2
14184: PPUSH
14185: CALL_OW 463
14189: NOT
14190: AND
14191: IFFALSE 14754
14193: GO 14195
14195: DISABLE
14196: LD_INT 0
14198: PPUSH
14199: PPUSH
14200: PPUSH
14201: PPUSH
14202: PPUSH
// begin DialogueOn ;
14203: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
14207: LD_INT 111
14209: PPUSH
14210: LD_INT 90
14212: PPUSH
14213: LD_INT 2
14215: PPUSH
14216: LD_INT 6
14218: NEG
14219: PPUSH
14220: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
14224: LD_INT 111
14226: PPUSH
14227: LD_INT 90
14229: PPUSH
14230: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
14234: LD_EXP 35
14238: PPUSH
14239: LD_STRING DA-Cap-1
14241: PPUSH
14242: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
14246: LD_EXP 25
14250: PPUSH
14251: LD_STRING DH-Cap-2
14253: PPUSH
14254: CALL_OW 88
// DialogueOff ;
14258: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
14262: LD_INT 35
14264: PPUSH
14265: CALL_OW 67
// until beriaDestroyed and IsOk ( ruLab ) and IsOk ( Aviradze ) ;
14269: LD_EXP 17
14273: PUSH
14274: LD_EXP 50
14278: PPUSH
14279: CALL_OW 302
14283: AND
14284: PUSH
14285: LD_EXP 35
14289: PPUSH
14290: CALL_OW 302
14294: AND
14295: IFFALSE 14262
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14297: LD_ADDR_VAR 0 2
14301: PUSH
14302: LD_EXP 37
14306: PUSH
14307: LD_EXP 28
14311: PUSH
14312: LD_EXP 29
14316: PUSH
14317: LD_EXP 31
14321: PUSH
14322: LD_EXP 30
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: UNION
14333: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14334: LD_ADDR_VAR 0 2
14338: PUSH
14339: LD_VAR 0 2
14343: PPUSH
14344: LD_INT 50
14346: PUSH
14347: EMPTY
14348: LIST
14349: PPUSH
14350: CALL_OW 72
14354: ST_TO_ADDR
// if tmp < 2 then
14355: LD_VAR 0 2
14359: PUSH
14360: LD_INT 2
14362: LESS
14363: IFFALSE 14375
// q := 2 else
14365: LD_ADDR_VAR 0 4
14369: PUSH
14370: LD_INT 2
14372: ST_TO_ADDR
14373: GO 14388
// q := Query ( LabCap ) ;
14375: LD_ADDR_VAR 0 4
14379: PUSH
14380: LD_STRING LabCap
14382: PPUSH
14383: CALL_OW 97
14387: ST_TO_ADDR
// case q of 1 :
14388: LD_VAR 0 4
14392: PUSH
14393: LD_INT 1
14395: DOUBLE
14396: EQUAL
14397: IFTRUE 14401
14399: GO 14718
14401: POP
// begin DoNotAttack ( 2 , ruLab ) ;
14402: LD_INT 2
14404: PPUSH
14405: LD_EXP 50
14409: PPUSH
14410: CALL_OW 471
// labCaptured := true ;
14414: LD_ADDR_EXP 21
14418: PUSH
14419: LD_INT 1
14421: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
14422: LD_EXP 25
14426: PPUSH
14427: LD_STRING DH-Cap-a-1
14429: PPUSH
14430: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
14434: LD_EXP 35
14438: PPUSH
14439: LD_STRING DA-Cap-a-2
14441: PPUSH
14442: CALL_OW 88
// settings := [ Heike , sel_changeable ] ^ tmp ^ [ sel_not_hired , sel_not_changeable , Aviradze ] ;
14446: LD_ADDR_VAR 0 5
14450: PUSH
14451: LD_EXP 25
14455: PUSH
14456: LD_INT -3
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: PUSH
14463: LD_VAR 0 2
14467: ADD
14468: PUSH
14469: LD_INT -2
14471: PUSH
14472: LD_INT -4
14474: PUSH
14475: LD_EXP 35
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: LIST
14484: ADD
14485: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
14486: LD_ADDR_VAR 0 3
14490: PUSH
14491: LD_STRING Select two characters to go with Aviradze
14493: PPUSH
14494: LD_INT 2
14496: PPUSH
14497: LD_INT 2
14499: PPUSH
14500: LD_VAR 0 5
14504: PPUSH
14505: EMPTY
14506: PPUSH
14507: CALL_OW 42
14511: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
14512: LD_EXP 50
14516: PPUSH
14517: LD_INT 8
14519: PPUSH
14520: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
14524: LD_EXP 35
14528: PPUSH
14529: LD_INT 8
14531: PPUSH
14532: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
14536: LD_ADDR_EXP 39
14540: PUSH
14541: LD_EXP 35
14545: PUSH
14546: EMPTY
14547: LIST
14548: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
14549: LD_EXP 35
14553: PPUSH
14554: CALL_OW 310
14558: IFFALSE 14569
// ComExit ( Aviradze ) ;
14560: LD_EXP 35
14564: PPUSH
14565: CALL 783 0 1
// wait ( 3 ) ;
14569: LD_INT 3
14571: PPUSH
14572: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
14576: LD_EXP 35
14580: PPUSH
14581: LD_EXP 50
14585: PPUSH
14586: CALL_OW 120
// for i := 1 to 2 do
14590: LD_ADDR_VAR 0 1
14594: PUSH
14595: DOUBLE
14596: LD_INT 1
14598: DEC
14599: ST_TO_ADDR
14600: LD_INT 2
14602: PUSH
14603: FOR_TO
14604: IFFALSE 14707
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
14606: LD_ADDR_EXP 39
14610: PUSH
14611: LD_EXP 39
14615: PUSH
14616: LD_VAR 0 3
14620: PUSH
14621: LD_VAR 0 1
14625: ARRAY
14626: UNION
14627: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
14628: LD_VAR 0 3
14632: PUSH
14633: LD_VAR 0 1
14637: ARRAY
14638: PPUSH
14639: LD_INT 8
14641: PPUSH
14642: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
14646: LD_VAR 0 3
14650: PUSH
14651: LD_VAR 0 1
14655: ARRAY
14656: PPUSH
14657: CALL_OW 310
14661: IFFALSE 14678
// ComExit ( tmp2 [ i ] ) ;
14663: LD_VAR 0 3
14667: PUSH
14668: LD_VAR 0 1
14672: ARRAY
14673: PPUSH
14674: CALL 783 0 1
// wait ( 3 ) ;
14678: LD_INT 3
14680: PPUSH
14681: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
14685: LD_VAR 0 3
14689: PUSH
14690: LD_VAR 0 1
14694: ARRAY
14695: PPUSH
14696: LD_EXP 50
14700: PPUSH
14701: CALL_OW 120
// end ;
14705: GO 14603
14707: POP
14708: POP
// SetAchievement ( ACH_LAB ) ;
14709: LD_STRING ACH_LAB
14711: PPUSH
14712: CALL_OW 543
// end ; 2 :
14716: GO 14754
14718: LD_INT 2
14720: DOUBLE
14721: EQUAL
14722: IFTRUE 14726
14724: GO 14753
14726: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
14727: LD_EXP 25
14731: PPUSH
14732: LD_STRING DH-Cap-b-1
14734: PPUSH
14735: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
14739: LD_EXP 35
14743: PPUSH
14744: LD_STRING DA-Cap-b-2
14746: PPUSH
14747: CALL_OW 88
// end ; end ;
14751: GO 14754
14753: POP
// end ;
14754: PPOPN 5
14756: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
14757: LD_INT 10
14759: PPUSH
14760: LD_INT 22
14762: PUSH
14763: LD_INT 2
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: PUSH
14770: LD_INT 30
14772: PUSH
14773: LD_INT 31
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PPUSH
14784: CALL_OW 70
14788: PUSH
14789: LD_INT 2
14791: GREATEREQUAL
14792: IFFALSE 14804
14794: GO 14796
14796: DISABLE
// SetAchievement ( ACH_KING ) ;
14797: LD_STRING ACH_KING
14799: PPUSH
14800: CALL_OW 543
14804: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
14805: LD_EXP 11
14809: NOT
14810: PUSH
14811: LD_INT 10
14813: PPUSH
14814: LD_INT 22
14816: PUSH
14817: LD_INT 2
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PUSH
14824: LD_INT 2
14826: PUSH
14827: LD_INT 30
14829: PUSH
14830: LD_INT 31
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: PUSH
14837: LD_INT 30
14839: PUSH
14840: LD_INT 4
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: LIST
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PPUSH
14856: CALL_OW 70
14860: AND
14861: IFFALSE 14881
14863: GO 14865
14865: DISABLE
// begin hillBase := true ;
14866: LD_ADDR_EXP 15
14870: PUSH
14871: LD_INT 1
14873: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
14874: LD_STRING HillDone
14876: PPUSH
14877: CALL_OW 337
// end ;
14881: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
14882: LD_EXP 30
14886: PUSH
14887: LD_EXP 30
14891: PPUSH
14892: CALL_OW 256
14896: PUSH
14897: LD_INT 3
14899: LESS
14900: AND
14901: IFFALSE 14947
14903: GO 14905
14905: DISABLE
// begin DialogueOn ;
14906: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
14910: LD_EXP 30
14914: PPUSH
14915: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
14919: LD_EXP 30
14923: PPUSH
14924: LD_STRING DK-Kkilled-1
14926: PPUSH
14927: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
14931: LD_EXP 25
14935: PPUSH
14936: LD_STRING DH-Kkilled-2
14938: PPUSH
14939: CALL_OW 88
// DialogueOff ;
14943: CALL_OW 7
// end ;
14947: END
// every 0 0$1 trigger kaiaKilledByRussian do
14948: LD_EXP 23
14952: IFFALSE 14969
14954: GO 14956
14956: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
14957: LD_EXP 25
14961: PPUSH
14962: LD_STRING DH-Kkilled-3
14964: PPUSH
14965: CALL_OW 88
14969: END
// every 0 0$1 trigger ( kirovDestroyed and beriaDestroyed and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo ;
14970: LD_EXP 16
14974: PUSH
14975: LD_EXP 17
14979: AND
14980: PUSH
14981: LD_EXP 18
14985: PUSH
14986: LD_EXP 24
14990: PUSH
14991: LD_INT 112
14993: PPUSH
14994: CALL_OW 255
14998: PUSH
14999: LD_INT 2
15001: EQUAL
15002: AND
15003: OR
15004: AND
15005: IFFALSE 16187
15007: GO 15009
15009: DISABLE
15010: LD_INT 0
15012: PPUSH
15013: PPUSH
15014: PPUSH
15015: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
15016: LD_STRING GoToWest
15018: PPUSH
15019: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
15023: LD_INT 17
15025: PPUSH
15026: LD_INT 1
15028: PPUSH
15029: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
15033: LD_INT 35
15035: PPUSH
15036: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15040: LD_ADDR_VAR 0 2
15044: PUSH
15045: LD_INT 17
15047: PPUSH
15048: LD_INT 22
15050: PUSH
15051: LD_INT 2
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: PUSH
15058: LD_INT 2
15060: PUSH
15061: LD_INT 21
15063: PUSH
15064: LD_INT 1
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: PUSH
15071: LD_INT 21
15073: PUSH
15074: LD_INT 2
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PUSH
15081: LD_INT 3
15083: PUSH
15084: LD_INT 58
15086: PUSH
15087: EMPTY
15088: LIST
15089: PUSH
15090: EMPTY
15091: LIST
15092: LIST
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: LIST
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: PPUSH
15107: CALL_OW 70
15111: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15112: LD_ADDR_VAR 0 3
15116: PUSH
15117: LD_INT 22
15119: PUSH
15120: LD_INT 2
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: PUSH
15127: LD_INT 3
15129: PUSH
15130: LD_INT 55
15132: PUSH
15133: EMPTY
15134: LIST
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: PUSH
15140: LD_INT 2
15142: PUSH
15143: LD_INT 21
15145: PUSH
15146: LD_INT 1
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PUSH
15153: LD_INT 21
15155: PUSH
15156: LD_INT 2
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: PUSH
15163: LD_INT 3
15165: PUSH
15166: LD_INT 58
15168: PUSH
15169: EMPTY
15170: LIST
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: LIST
15184: PUSH
15185: EMPTY
15186: LIST
15187: LIST
15188: LIST
15189: PPUSH
15190: CALL_OW 69
15194: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15195: LD_VAR 0 2
15199: PUSH
15200: LD_INT 0
15202: PLUS
15203: PUSH
15204: LD_VAR 0 3
15208: PUSH
15209: LD_INT 0
15211: PLUS
15212: EQUAL
15213: IFFALSE 15033
// SaveCharacters ( Heike , 04_1_Heike ) ;
15215: LD_EXP 25
15219: PPUSH
15220: LD_STRING 04_1_Heike
15222: PPUSH
15223: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15227: LD_EXP 35
15231: PUSH
15232: LD_EXP 35
15236: PUSH
15237: LD_EXP 39
15241: IN
15242: NOT
15243: AND
15244: IFFALSE 15260
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15246: LD_EXP 35
15250: PPUSH
15251: LD_STRING 04_1_Aviradze
15253: PPUSH
15254: CALL_OW 38
15258: GO 15278
// if Aviradze then
15260: LD_EXP 35
15264: IFFALSE 15278
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15266: LD_EXP 35
15270: PPUSH
15271: LD_STRING 04_1_Aviradze_L
15273: PPUSH
15274: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15278: LD_EXP 28
15282: PUSH
15283: LD_EXP 28
15287: PUSH
15288: LD_EXP 39
15292: IN
15293: NOT
15294: AND
15295: IFFALSE 15311
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15297: LD_EXP 28
15301: PPUSH
15302: LD_STRING 04_1_Ibrahim
15304: PPUSH
15305: CALL_OW 38
15309: GO 15329
// if Ibrahim then
15311: LD_EXP 28
15315: IFFALSE 15329
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
15317: LD_EXP 28
15321: PPUSH
15322: LD_STRING 04_1_Ibrahim_L
15324: PPUSH
15325: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
15329: LD_EXP 29
15333: PUSH
15334: LD_EXP 29
15338: PUSH
15339: LD_EXP 39
15343: IN
15344: NOT
15345: AND
15346: IFFALSE 15362
// SaveCharacters ( Kamil , 04_1_Kamil ) else
15348: LD_EXP 29
15352: PPUSH
15353: LD_STRING 04_1_Kamil
15355: PPUSH
15356: CALL_OW 38
15360: GO 15380
// if Kamil then
15362: LD_EXP 29
15366: IFFALSE 15380
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
15368: LD_EXP 29
15372: PPUSH
15373: LD_STRING 04_1_Kamil_L
15375: PPUSH
15376: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
15380: LD_EXP 31
15384: PUSH
15385: LD_EXP 31
15389: PUSH
15390: LD_EXP 39
15394: IN
15395: NOT
15396: AND
15397: IFFALSE 15413
// SaveCharacters ( Sophia , 04_1_Sophia ) else
15399: LD_EXP 31
15403: PPUSH
15404: LD_STRING 04_1_Sophia
15406: PPUSH
15407: CALL_OW 38
15411: GO 15431
// if Sophia then
15413: LD_EXP 31
15417: IFFALSE 15431
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
15419: LD_EXP 31
15423: PPUSH
15424: LD_STRING 04_1_Sophia_L
15426: PPUSH
15427: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
15431: LD_EXP 30
15435: PUSH
15436: LD_EXP 30
15440: PUSH
15441: LD_EXP 39
15445: IN
15446: NOT
15447: AND
15448: IFFALSE 15464
// SaveCharacters ( Kaia , 04_1_Kaia ) else
15450: LD_EXP 30
15454: PPUSH
15455: LD_STRING 04_1_Kaia
15457: PPUSH
15458: CALL_OW 38
15462: GO 15482
// if Kaia then
15464: LD_EXP 30
15468: IFFALSE 15482
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
15470: LD_EXP 30
15474: PPUSH
15475: LD_STRING 04_1_Kaia_L
15477: PPUSH
15478: CALL_OW 38
// if Givi then
15482: LD_EXP 26
15486: IFFALSE 15500
// SaveCharacters ( Givi , 04_1_Givi ) ;
15488: LD_EXP 26
15492: PPUSH
15493: LD_STRING 04_1_Givi
15495: PPUSH
15496: CALL_OW 38
// if Mike then
15500: LD_EXP 27
15504: IFFALSE 15518
// SaveCharacters ( Mike , 04_1_Mike ) ;
15506: LD_EXP 27
15510: PPUSH
15511: LD_STRING 04_1_Mike
15513: PPUSH
15514: CALL_OW 38
// if Markov then
15518: LD_EXP 32
15522: IFFALSE 15536
// SaveCharacters ( Markov , 04_1_Markov ) ;
15524: LD_EXP 32
15528: PPUSH
15529: LD_STRING 04_1_Markov
15531: PPUSH
15532: CALL_OW 38
// if Kurt then
15536: LD_EXP 34
15540: IFFALSE 15554
// SaveCharacters ( Kurt , 04_1_Kurt ) ;
15542: LD_EXP 34
15546: PPUSH
15547: LD_STRING 04_1_Kurt
15549: PPUSH
15550: CALL_OW 38
// if heikeSecondSquad diff aviradzeSquad then
15554: LD_EXP 37
15558: PUSH
15559: LD_EXP 39
15563: DIFF
15564: IFFALSE 15584
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
15566: LD_EXP 37
15570: PUSH
15571: LD_EXP 39
15575: DIFF
15576: PPUSH
15577: LD_STRING 04_1_others
15579: PPUSH
15580: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
15584: LD_EXP 39
15588: PUSH
15589: LD_EXP 37
15593: AND
15594: IFFALSE 15679
// begin tmp := [ ] ;
15596: LD_ADDR_VAR 0 2
15600: PUSH
15601: EMPTY
15602: ST_TO_ADDR
// for i in heikeSecondSquad do
15603: LD_ADDR_VAR 0 1
15607: PUSH
15608: LD_EXP 37
15612: PUSH
15613: FOR_IN
15614: IFFALSE 15659
// if i in aviradzeSquad then
15616: LD_VAR 0 1
15620: PUSH
15621: LD_EXP 39
15625: IN
15626: IFFALSE 15657
// tmp := Replace ( tmp , tmp + 1 , i ) ;
15628: LD_ADDR_VAR 0 2
15632: PUSH
15633: LD_VAR 0 2
15637: PPUSH
15638: LD_VAR 0 2
15642: PUSH
15643: LD_INT 1
15645: PLUS
15646: PPUSH
15647: LD_VAR 0 1
15651: PPUSH
15652: CALL_OW 1
15656: ST_TO_ADDR
15657: GO 15613
15659: POP
15660: POP
// if tmp then
15661: LD_VAR 0 2
15665: IFFALSE 15679
// SaveCharacters ( tmp , 04_1_others_L ) ;
15667: LD_VAR 0 2
15671: PPUSH
15672: LD_STRING 04_1_others_L
15674: PPUSH
15675: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
15679: LD_ADDR_VAR 0 2
15683: PUSH
15684: LD_INT 22
15686: PUSH
15687: LD_INT 2
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PUSH
15694: LD_INT 23
15696: PUSH
15697: LD_INT 0
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: PPUSH
15708: CALL_OW 69
15712: ST_TO_ADDR
// if tmp then
15713: LD_VAR 0 2
15717: IFFALSE 15731
// SaveCharacters ( tmp , 04_1_apes ) ;
15719: LD_VAR 0 2
15723: PPUSH
15724: LD_STRING 04_1_apes
15726: PPUSH
15727: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
15731: LD_ADDR_VAR 0 2
15735: PUSH
15736: LD_INT 17
15738: PPUSH
15739: LD_INT 21
15741: PUSH
15742: LD_INT 2
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PPUSH
15749: CALL_OW 70
15753: ST_TO_ADDR
// if tmp then
15754: LD_VAR 0 2
15758: IFFALSE 16052
// begin tmp2 := [ ] ;
15760: LD_ADDR_VAR 0 3
15764: PUSH
15765: EMPTY
15766: ST_TO_ADDR
// for i in tmp do
15767: LD_ADDR_VAR 0 1
15771: PUSH
15772: LD_VAR 0 2
15776: PUSH
15777: FOR_IN
15778: IFFALSE 16038
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
15780: LD_VAR 0 1
15784: PPUSH
15785: CALL_OW 264
15789: PUSH
15790: LD_INT 32
15792: PUSH
15793: LD_INT 12
15795: PUSH
15796: LD_INT 51
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: LIST
15803: IN
15804: IFFALSE 15941
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
15806: LD_ADDR_VAR 0 4
15810: PUSH
15811: LD_VAR 0 1
15815: PPUSH
15816: LD_INT 1
15818: PPUSH
15819: CALL_OW 289
15823: PUSH
15824: LD_VAR 0 1
15828: PPUSH
15829: LD_INT 2
15831: PPUSH
15832: CALL_OW 289
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
15841: LD_ADDR_VAR 0 3
15845: PUSH
15846: LD_VAR 0 3
15850: PPUSH
15851: LD_VAR 0 3
15855: PUSH
15856: LD_INT 1
15858: PLUS
15859: PPUSH
15860: LD_VAR 0 1
15864: PPUSH
15865: CALL_OW 265
15869: PUSH
15870: LD_VAR 0 1
15874: PPUSH
15875: CALL_OW 262
15879: PUSH
15880: LD_VAR 0 1
15884: PPUSH
15885: CALL_OW 263
15889: PUSH
15890: LD_VAR 0 1
15894: PPUSH
15895: CALL_OW 264
15899: PUSH
15900: LD_VAR 0 1
15904: PPUSH
15905: CALL_OW 248
15909: PUSH
15910: LD_VAR 0 1
15914: PPUSH
15915: CALL_OW 256
15919: PUSH
15920: LD_VAR 0 4
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: PPUSH
15934: CALL_OW 1
15938: ST_TO_ADDR
// end else
15939: GO 16036
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
15941: LD_ADDR_VAR 0 3
15945: PUSH
15946: LD_VAR 0 3
15950: PPUSH
15951: LD_VAR 0 3
15955: PUSH
15956: LD_INT 1
15958: PLUS
15959: PPUSH
15960: LD_VAR 0 1
15964: PPUSH
15965: CALL_OW 265
15969: PUSH
15970: LD_VAR 0 1
15974: PPUSH
15975: CALL_OW 262
15979: PUSH
15980: LD_VAR 0 1
15984: PPUSH
15985: CALL_OW 263
15989: PUSH
15990: LD_VAR 0 1
15994: PPUSH
15995: CALL_OW 264
15999: PUSH
16000: LD_VAR 0 1
16004: PPUSH
16005: CALL_OW 248
16009: PUSH
16010: LD_VAR 0 1
16014: PPUSH
16015: CALL_OW 256
16019: PUSH
16020: EMPTY
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: PPUSH
16031: CALL_OW 1
16035: ST_TO_ADDR
16036: GO 15777
16038: POP
16039: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
16040: LD_VAR 0 3
16044: PPUSH
16045: LD_STRING 04_1_Vehicles
16047: PPUSH
16048: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
16052: LD_EXP 21
16056: PPUSH
16057: LD_STRING 04_1_RuLabCaptured
16059: PPUSH
16060: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
16064: LD_EXP 19
16068: PPUSH
16069: LD_STRING 04_1_EscapeCounter
16071: PPUSH
16072: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
16076: LD_EXP 15
16080: PPUSH
16081: LD_STRING 04_1_BaseHill
16083: PPUSH
16084: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
16088: LD_OWVAR 1
16092: PPUSH
16093: LD_STRING 04_1_Time
16095: PPUSH
16096: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
16100: LD_EXP 14
16104: PPUSH
16105: LD_STRING 04_1_DeadCounter
16107: PPUSH
16108: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
16112: LD_EXP 24
16116: PUSH
16117: LD_INT 112
16119: PPUSH
16120: CALL_OW 255
16124: MUL
16125: PUSH
16126: LD_INT 2
16128: EQUAL
16129: PPUSH
16130: LD_STRING 04_1_KaganCaptured
16132: PPUSH
16133: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
16137: LD_INT 22
16139: PUSH
16140: LD_INT 2
16142: PUSH
16143: EMPTY
16144: LIST
16145: LIST
16146: PUSH
16147: LD_INT 34
16149: PUSH
16150: LD_INT 26
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: PPUSH
16161: CALL_OW 69
16165: PUSH
16166: LD_INT 0
16168: PLUS
16169: PPUSH
16170: LD_STRING 04_1_Flamethrower
16172: PPUSH
16173: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16177: LD_INT 1
16179: PPUSH
16180: LD_STRING __x1\04_cont2
16182: PPUSH
16183: CALL_OW 340
// end ; end_of_file
16187: PPOPN 4
16189: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16190: LD_VAR 0 1
16194: PPUSH
16195: CALL_OW 266
16199: PUSH
16200: LD_INT 0
16202: EQUAL
16203: PUSH
16204: LD_VAR 0 1
16208: PPUSH
16209: CALL_OW 255
16213: PUSH
16214: LD_INT 2
16216: EQUAL
16217: AND
16218: IFFALSE 16228
// baseConstructed := true ;
16220: LD_ADDR_EXP 3
16224: PUSH
16225: LD_INT 1
16227: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16228: LD_VAR 0 1
16232: PPUSH
16233: CALL_OW 266
16237: PUSH
16238: LD_INT 6
16240: EQUAL
16241: PUSH
16242: LD_VAR 0 1
16246: PPUSH
16247: CALL_OW 255
16251: PUSH
16252: LD_INT 2
16254: EQUAL
16255: AND
16256: IFFALSE 16266
// labConstructed := true ;
16258: LD_ADDR_EXP 4
16262: PUSH
16263: LD_INT 1
16265: ST_TO_ADDR
// end ;
16266: PPOPN 1
16268: END
// on UnitDestroyed ( un ) do begin if un = Heike then
16269: LD_VAR 0 1
16273: PUSH
16274: LD_EXP 25
16278: EQUAL
16279: IFFALSE 16288
// YouLost ( Heike ) ;
16281: LD_STRING Heike
16283: PPUSH
16284: CALL_OW 104
// if un = Omar then
16288: LD_VAR 0 1
16292: PUSH
16293: LD_EXP 33
16297: EQUAL
16298: IFFALSE 16307
// YouLost ( Omar ) ;
16300: LD_STRING Omar
16302: PPUSH
16303: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
16307: LD_VAR 0 1
16311: PUSH
16312: LD_INT 22
16314: PUSH
16315: LD_INT 2
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: PUSH
16322: LD_INT 23
16324: PUSH
16325: LD_INT 2
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: PUSH
16332: LD_INT 21
16334: PUSH
16335: LD_INT 1
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: LIST
16346: PPUSH
16347: CALL_OW 69
16351: IN
16352: IFFALSE 16368
// loseCounter := loseCounter + 1 ;
16354: LD_ADDR_EXP 14
16358: PUSH
16359: LD_EXP 14
16363: PUSH
16364: LD_INT 1
16366: PLUS
16367: ST_TO_ADDR
// if un = omikron then
16368: LD_VAR 0 1
16372: PUSH
16373: LD_INT 64
16375: EQUAL
16376: IFFALSE 16386
// omicronFall := true ;
16378: LD_ADDR_EXP 13
16382: PUSH
16383: LD_INT 1
16385: ST_TO_ADDR
// if un = kirov then
16386: LD_VAR 0 1
16390: PUSH
16391: LD_INT 71
16393: EQUAL
16394: IFFALSE 16411
// begin ChangeMissionObjectives ( KirovDone ) ;
16396: LD_STRING KirovDone
16398: PPUSH
16399: CALL_OW 337
// kirovDestroyed := true ;
16403: LD_ADDR_EXP 16
16407: PUSH
16408: LD_INT 1
16410: ST_TO_ADDR
// end ; if un = beria then
16411: LD_VAR 0 1
16415: PUSH
16416: LD_INT 106
16418: EQUAL
16419: IFFALSE 16436
// begin ChangeMissionObjectives ( BeriaDone ) ;
16421: LD_STRING BeriaDone
16423: PPUSH
16424: CALL_OW 337
// beriaDestroyed := true ;
16428: LD_ADDR_EXP 17
16432: PUSH
16433: LD_INT 1
16435: ST_TO_ADDR
// end ; if un = kagan then
16436: LD_VAR 0 1
16440: PUSH
16441: LD_INT 112
16443: EQUAL
16444: IFFALSE 16454
// kaganDestroyed := true ;
16446: LD_ADDR_EXP 18
16450: PUSH
16451: LD_INT 1
16453: ST_TO_ADDR
// if un in russianPatrol then
16454: LD_VAR 0 1
16458: PUSH
16459: LD_EXP 47
16463: IN
16464: IFFALSE 16505
// begin if GetTag ( un ) = 2 then
16466: LD_VAR 0 1
16470: PPUSH
16471: CALL_OW 110
16475: PUSH
16476: LD_INT 2
16478: EQUAL
16479: IFFALSE 16489
// spottedByPatrol := false ;
16481: LD_ADDR_EXP 7
16485: PUSH
16486: LD_INT 0
16488: ST_TO_ADDR
// russianPatrol := russianPatrol diff un ;
16489: LD_ADDR_EXP 47
16493: PUSH
16494: LD_EXP 47
16498: PUSH
16499: LD_VAR 0 1
16503: DIFF
16504: ST_TO_ADDR
// end ; if un in russianOmicronAttackers then
16505: LD_VAR 0 1
16509: PUSH
16510: LD_EXP 48
16514: IN
16515: IFFALSE 16533
// russianOmicronAttackers := russianOmicronAttackers diff un ;
16517: LD_ADDR_EXP 48
16521: PUSH
16522: LD_EXP 48
16526: PUSH
16527: LD_VAR 0 1
16531: DIFF
16532: ST_TO_ADDR
// end ;
16533: PPOPN 1
16535: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
16536: LD_INT 0
16538: PPUSH
16539: PPUSH
16540: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
16541: LD_VAR 0 1
16545: PUSH
16546: LD_INT 2
16548: PUSH
16549: LD_INT 22
16551: PUSH
16552: LD_INT 3
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: PUSH
16559: LD_INT 22
16561: PUSH
16562: LD_INT 4
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: PUSH
16569: LD_INT 22
16571: PUSH
16572: LD_INT 6
16574: PUSH
16575: EMPTY
16576: LIST
16577: LIST
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: PUSH
16585: LD_INT 30
16587: PUSH
16588: LD_INT 32
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: PPUSH
16599: CALL_OW 69
16603: IN
16604: IFFALSE 16777
// begin sol := UnitsInside ( un ) ;
16606: LD_ADDR_VAR 0 3
16610: PUSH
16611: LD_VAR 0 1
16615: PPUSH
16616: CALL_OW 313
16620: ST_TO_ADDR
// if not sol then
16621: LD_VAR 0 3
16625: NOT
16626: IFFALSE 16630
// exit ;
16628: GO 16777
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16630: LD_ADDR_VAR 0 4
16634: PUSH
16635: LD_INT 22
16637: PUSH
16638: LD_VAR 0 1
16642: PPUSH
16643: CALL_OW 255
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PUSH
16652: LD_INT 2
16654: PUSH
16655: LD_INT 30
16657: PUSH
16658: LD_INT 4
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: PUSH
16665: LD_INT 30
16667: PUSH
16668: LD_INT 5
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: LIST
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PPUSH
16684: CALL_OW 69
16688: ST_TO_ADDR
// if not nearestBarracks then
16689: LD_VAR 0 4
16693: NOT
16694: IFFALSE 16698
// exit ;
16696: GO 16777
// for i in nearestBarracks do
16698: LD_ADDR_VAR 0 2
16702: PUSH
16703: LD_VAR 0 4
16707: PUSH
16708: FOR_IN
16709: IFFALSE 16744
// if UnitsInside ( i ) = 6 then
16711: LD_VAR 0 2
16715: PPUSH
16716: CALL_OW 313
16720: PUSH
16721: LD_INT 6
16723: EQUAL
16724: IFFALSE 16742
// nearestBarracks := nearestBarracks diff i ;
16726: LD_ADDR_VAR 0 4
16730: PUSH
16731: LD_VAR 0 4
16735: PUSH
16736: LD_VAR 0 2
16740: DIFF
16741: ST_TO_ADDR
16742: GO 16708
16744: POP
16745: POP
// if not nearestBarracks then
16746: LD_VAR 0 4
16750: NOT
16751: IFFALSE 16755
// exit ;
16753: GO 16777
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
16755: LD_VAR 0 3
16759: PUSH
16760: LD_INT 1
16762: ARRAY
16763: PPUSH
16764: LD_VAR 0 4
16768: PUSH
16769: LD_INT 1
16771: ARRAY
16772: PPUSH
16773: CALL_OW 120
// end ; end ;
16777: PPOPN 4
16779: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
16780: LD_INT 0
16782: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
16783: LD_EXP 8
16787: NOT
16788: PUSH
16789: LD_EXP 5
16793: NOT
16794: OR
16795: IFFALSE 16799
// exit ;
16797: GO 16867
// for i in camAreas do
16799: LD_ADDR_VAR 0 5
16803: PUSH
16804: LD_EXP 8
16808: PUSH
16809: FOR_IN
16810: IFFALSE 16865
// if InArea ( x , y , i ) then
16812: LD_VAR 0 3
16816: PPUSH
16817: LD_VAR 0 4
16821: PPUSH
16822: LD_VAR 0 5
16826: PPUSH
16827: CALL_OW 309
16831: IFFALSE 16863
// begin SetAreaMapShow ( i , 0 ) ;
16833: LD_VAR 0 5
16837: PPUSH
16838: LD_INT 0
16840: PPUSH
16841: CALL_OW 424
// camAreas := camAreas diff i ;
16845: LD_ADDR_EXP 8
16849: PUSH
16850: LD_EXP 8
16854: PUSH
16855: LD_VAR 0 5
16859: DIFF
16860: ST_TO_ADDR
// break ;
16861: GO 16865
// end ;
16863: GO 16809
16865: POP
16866: POP
// end ;
16867: PPOPN 5
16869: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
16870: LD_VAR 0 1
16874: PUSH
16875: LD_INT 2
16877: EQUAL
16878: PUSH
16879: LD_VAR 0 2
16883: PUSH
16884: LD_INT 5
16886: PUSH
16887: LD_INT 8
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: IN
16894: AND
16895: IFFALSE 16904
// YouLost ( Ally ) ;
16897: LD_STRING Ally
16899: PPUSH
16900: CALL_OW 104
// end ;
16904: PPOPN 2
16906: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
16907: LD_VAR 0 1
16911: PUSH
16912: LD_EXP 30
16916: EQUAL
16917: PUSH
16918: LD_VAR 0 2
16922: PUSH
16923: LD_INT 3
16925: PUSH
16926: LD_INT 6
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: IN
16933: AND
16934: IFFALSE 16965
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
16936: LD_ADDR_EXP 23
16940: PUSH
16941: LD_VAR 0 1
16945: PPUSH
16946: CALL_OW 250
16950: PUSH
16951: LD_VAR 0 1
16955: PPUSH
16956: CALL_OW 251
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: ST_TO_ADDR
// end ; end_of_file
16965: PPOPN 3
16967: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 ] [ Difficulty ] do
16968: LD_EXP 11
16972: NOT
16973: PUSH
16974: LD_INT 12
16976: PPUSH
16977: LD_INT 1
16979: PPUSH
16980: CALL_OW 287
16984: PUSH
16985: LD_INT 20
16987: PUSH
16988: LD_INT 16
16990: PUSH
16991: LD_INT 12
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: LIST
16998: PUSH
16999: LD_OWVAR 67
17003: ARRAY
17004: LESS
17005: AND
17006: IFFALSE 17033
17008: GO 17010
17010: DISABLE
// begin enable ;
17011: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
17012: LD_INT 1
17014: PPUSH
17015: LD_INT 5
17017: PPUSH
17018: CALL_OW 12
17022: PPUSH
17023: LD_INT 12
17025: PPUSH
17026: LD_INT 1
17028: PPUSH
17029: CALL_OW 55
// end ; end_of_file
17033: END
// every 0 0$1 trigger omarCountdown do
17034: LD_EXP 22
17038: IFFALSE 17090
17040: GO 17042
17042: DISABLE
// begin enable ;
17043: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
17044: LD_ADDR_OWVAR 47
17048: PUSH
17049: LD_STRING #X104-1
17051: PUSH
17052: LD_EXP 22
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
17061: LD_ADDR_EXP 22
17065: PUSH
17066: LD_EXP 22
17070: PUSH
17071: LD_INT 35
17073: MINUS
17074: ST_TO_ADDR
// if not omarCountdown then
17075: LD_EXP 22
17079: NOT
17080: IFFALSE 17090
// display_strings :=  ;
17082: LD_ADDR_OWVAR 47
17086: PUSH
17087: LD_STRING 
17089: ST_TO_ADDR
// end ;
17090: END
