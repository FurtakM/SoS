// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// CreateNature ;
   8: CALL 857 0 0
// PrepareArabian ;
  12: CALL 1231 0 0
// PrepareAmerican ;
  16: CALL 6760 0 0
// PrepareRussian ;
  20: CALL 2219 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 8320 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured , cargoRecycled ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 30 30$00 , 27 27$00 , 25 25$00 , 23 23$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 63000
 188: PUSH
 189: LD_INT 56700
 191: PUSH
 192: LD_INT 52500
 194: PUSH
 195: LD_INT 48300
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// escapeCounter := 0 ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// loseCounter := 0 ;
 218: LD_ADDR_EXP 14
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// labCaptured := false ;
 226: LD_ADDR_EXP 21
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// hillBase := false ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 242: LD_ADDR_EXP 8
 246: PUSH
 247: LD_INT 3
 249: PUSH
 250: LD_INT 4
 252: PUSH
 253: LD_INT 5
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 7
 261: PUSH
 262: LD_INT 8
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 273: LD_ADDR_EXP 23
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// kaganCaptured := false ;
 281: LD_ADDR_EXP 24
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// cargoRecycled := LoadVariable ( 03_CargoRecycled , false ) ;
 289: LD_ADDR_EXP 25
 293: PUSH
 294: LD_STRING 03_CargoRecycled
 296: PPUSH
 297: LD_INT 0
 299: PPUSH
 300: CALL_OW 30
 304: ST_TO_ADDR
// end ;
 305: LD_VAR 0 1
 309: RET
// every 0 0$1 trigger debug do var i ;
 310: LD_EXP 1
 314: IFFALSE 383
 316: GO 318
 318: DISABLE
 319: LD_INT 0
 321: PPUSH
// begin enable ;
 322: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 323: LD_ADDR_VAR 0 1
 327: PUSH
 328: LD_INT 22
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 3
 340: PUSH
 341: LD_INT 21
 343: PUSH
 344: LD_INT 3
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: PPUSH
 359: CALL_OW 69
 363: PUSH
 364: FOR_IN
 365: IFFALSE 381
// SetLives ( i , 1000 ) ;
 367: LD_VAR 0 1
 371: PPUSH
 372: LD_INT 1000
 374: PPUSH
 375: CALL_OW 234
 379: GO 364
 381: POP
 382: POP
// end ; end_of_file
 383: PPOPN 1
 385: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 386: LD_INT 0
 388: PPUSH
// uc_side := side ;
 389: LD_ADDR_OWVAR 20
 393: PUSH
 394: LD_VAR 0 1
 398: ST_TO_ADDR
// uc_nation := nation ;
 399: LD_ADDR_OWVAR 21
 403: PUSH
 404: LD_VAR 0 2
 408: ST_TO_ADDR
// vc_chassis := chassis ;
 409: LD_ADDR_OWVAR 37
 413: PUSH
 414: LD_VAR 0 3
 418: ST_TO_ADDR
// vc_engine := engine ;
 419: LD_ADDR_OWVAR 39
 423: PUSH
 424: LD_VAR 0 4
 428: ST_TO_ADDR
// vc_control := control ;
 429: LD_ADDR_OWVAR 38
 433: PUSH
 434: LD_VAR 0 5
 438: ST_TO_ADDR
// vc_weapon := weapon ;
 439: LD_ADDR_OWVAR 40
 443: PUSH
 444: LD_VAR 0 6
 448: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 449: LD_ADDR_OWVAR 41
 453: PUSH
 454: LD_VAR 0 7
 458: ST_TO_ADDR
// result := CreateVehicle ;
 459: LD_ADDR_VAR 0 8
 463: PUSH
 464: CALL_OW 45
 468: ST_TO_ADDR
// end ;
 469: LD_VAR 0 8
 473: RET
// export function SayX ( units , ident ) ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// result := false ;
 478: LD_ADDR_VAR 0 3
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// if not units then
 486: LD_VAR 0 1
 490: NOT
 491: IFFALSE 495
// exit ;
 493: GO 549
// for i in units do
 495: LD_ADDR_VAR 0 4
 499: PUSH
 500: LD_VAR 0 1
 504: PUSH
 505: FOR_IN
 506: IFFALSE 547
// if IsOk ( i ) then
 508: LD_VAR 0 4
 512: PPUSH
 513: CALL_OW 302
 517: IFFALSE 545
// begin Say ( i , ident ) ;
 519: LD_VAR 0 4
 523: PPUSH
 524: LD_VAR 0 2
 528: PPUSH
 529: CALL_OW 88
// result := i ;
 533: LD_ADDR_VAR 0 3
 537: PUSH
 538: LD_VAR 0 4
 542: ST_TO_ADDR
// break ;
 543: GO 547
// end ;
 545: GO 505
 547: POP
 548: POP
// end ;
 549: LD_VAR 0 3
 553: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 554: LD_INT 0
 556: PPUSH
 557: PPUSH
 558: PPUSH
// if not observer or not unit then
 559: LD_VAR 0 1
 563: NOT
 564: PUSH
 565: LD_VAR 0 2
 569: NOT
 570: OR
 571: IFFALSE 575
// exit ;
 573: GO 623
// if not See ( GetSide ( observer ) , unit ) then
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 255
 584: PPUSH
 585: LD_VAR 0 2
 589: PPUSH
 590: CALL_OW 292
 594: NOT
 595: IFFALSE 599
// exit ;
 597: GO 623
// result := GetDistUnits ( observer , unit ) < 12 ;
 599: LD_ADDR_VAR 0 3
 603: PUSH
 604: LD_VAR 0 1
 608: PPUSH
 609: LD_VAR 0 2
 613: PPUSH
 614: CALL_OW 296
 618: PUSH
 619: LD_INT 12
 621: LESS
 622: ST_TO_ADDR
// end ;
 623: LD_VAR 0 3
 627: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 628: LD_INT 0
 630: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 631: LD_VAR 0 2
 635: PUSH
 636: LD_INT 1
 638: ARRAY
 639: PPUSH
 640: LD_VAR 0 2
 644: PUSH
 645: LD_INT 2
 647: ARRAY
 648: PPUSH
 649: CALL_OW 488
 653: PUSH
 654: LD_VAR 0 2
 658: PUSH
 659: LD_INT 1
 661: ARRAY
 662: PPUSH
 663: LD_VAR 0 2
 667: PUSH
 668: LD_INT 2
 670: ARRAY
 671: PPUSH
 672: CALL_OW 428
 676: PUSH
 677: LD_INT 0
 679: EQUAL
 680: AND
 681: IFFALSE 715
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 683: LD_VAR 0 1
 687: PPUSH
 688: LD_VAR 0 2
 692: PUSH
 693: LD_INT 1
 695: ARRAY
 696: PPUSH
 697: LD_VAR 0 2
 701: PUSH
 702: LD_INT 2
 704: ARRAY
 705: PPUSH
 706: LD_VAR 0 3
 710: PPUSH
 711: CALL_OW 48
// end ;
 715: LD_VAR 0 4
 719: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 720: LD_INT 0
 722: PPUSH
 723: PPUSH
// InitUc ;
 724: CALL_OW 18
// InitHc ;
 728: CALL_OW 19
// uc_side := 0 ;
 732: LD_ADDR_OWVAR 20
 736: PUSH
 737: LD_INT 0
 739: ST_TO_ADDR
// uc_nation := 0 ;
 740: LD_ADDR_OWVAR 21
 744: PUSH
 745: LD_INT 0
 747: ST_TO_ADDR
// for i = 1 to amount do
 748: LD_ADDR_VAR 0 4
 752: PUSH
 753: DOUBLE
 754: LD_INT 1
 756: DEC
 757: ST_TO_ADDR
 758: LD_VAR 0 2
 762: PUSH
 763: FOR_TO
 764: IFFALSE 846
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 766: LD_ADDR_OWVAR 29
 770: PUSH
 771: LD_INT 9
 773: PPUSH
 774: LD_INT 12
 776: PPUSH
 777: CALL_OW 12
 781: PUSH
 782: LD_INT 9
 784: PPUSH
 785: LD_INT 12
 787: PPUSH
 788: CALL_OW 12
 792: PUSH
 793: EMPTY
 794: LIST
 795: LIST
 796: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 797: LD_ADDR_OWVAR 35
 801: PUSH
 802: LD_INT 1
 804: NEG
 805: PPUSH
 806: LD_INT 1
 808: PPUSH
 809: CALL_OW 12
 813: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 814: LD_INT 0
 816: PPUSH
 817: LD_INT 12
 819: PPUSH
 820: LD_INT 1
 822: PPUSH
 823: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 827: CALL_OW 44
 831: PPUSH
 832: LD_VAR 0 1
 836: PPUSH
 837: LD_INT 0
 839: PPUSH
 840: CALL_OW 49
// end ;
 844: GO 763
 846: POP
 847: POP
// InitHc ;
 848: CALL_OW 19
// end ;
 852: LD_VAR 0 3
 856: RET
// export function CreateNature ; var i ; begin
 857: LD_INT 0
 859: PPUSH
 860: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 , 2 ] [ Difficulty ] ) ;
 861: LD_INT 18
 863: PPUSH
 864: LD_INT 5
 866: PUSH
 867: LD_INT 4
 869: PUSH
 870: LD_INT 3
 872: PUSH
 873: LD_INT 2
 875: PUSH
 876: EMPTY
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: PUSH
 882: LD_OWVAR 67
 886: ARRAY
 887: PPUSH
 888: CALL 720 0 2
// for i := 1 to 3 do
 892: LD_ADDR_VAR 0 2
 896: PUSH
 897: DOUBLE
 898: LD_INT 1
 900: DEC
 901: ST_TO_ADDR
 902: LD_INT 3
 904: PUSH
 905: FOR_TO
 906: IFFALSE 941
// begin hc_class := 21 ;
 908: LD_ADDR_OWVAR 28
 912: PUSH
 913: LD_INT 21
 915: ST_TO_ADDR
// hc_gallery :=  ;
 916: LD_ADDR_OWVAR 33
 920: PUSH
 921: LD_STRING 
 923: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 924: CALL_OW 44
 928: PPUSH
 929: LD_INT 18
 931: PPUSH
 932: LD_INT 0
 934: PPUSH
 935: CALL_OW 49
// end ;
 939: GO 905
 941: POP
 942: POP
// for i := 1 to 2 do
 943: LD_ADDR_VAR 0 2
 947: PUSH
 948: DOUBLE
 949: LD_INT 1
 951: DEC
 952: ST_TO_ADDR
 953: LD_INT 2
 955: PUSH
 956: FOR_TO
 957: IFFALSE 992
// begin hc_class := 18 ;
 959: LD_ADDR_OWVAR 28
 963: PUSH
 964: LD_INT 18
 966: ST_TO_ADDR
// hc_gallery :=  ;
 967: LD_ADDR_OWVAR 33
 971: PUSH
 972: LD_STRING 
 974: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 975: CALL_OW 44
 979: PPUSH
 980: LD_INT 18
 982: PPUSH
 983: LD_INT 0
 985: PPUSH
 986: CALL_OW 49
// end ;
 990: GO 956
 992: POP
 993: POP
// for i := 1 to 2 do
 994: LD_ADDR_VAR 0 2
 998: PUSH
 999: DOUBLE
1000: LD_INT 1
1002: DEC
1003: ST_TO_ADDR
1004: LD_INT 2
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1043
// begin hc_class := 13 ;
1010: LD_ADDR_OWVAR 28
1014: PUSH
1015: LD_INT 13
1017: ST_TO_ADDR
// hc_gallery :=  ;
1018: LD_ADDR_OWVAR 33
1022: PUSH
1023: LD_STRING 
1025: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1026: CALL_OW 44
1030: PPUSH
1031: LD_INT 18
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 49
// end ;
1041: GO 1007
1043: POP
1044: POP
// end ;
1045: LD_VAR 0 1
1049: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1050: LD_INT 0
1052: PPUSH
1053: PPUSH
1054: PPUSH
1055: PPUSH
1056: PPUSH
// result := false ;
1057: LD_ADDR_VAR 0 4
1061: PUSH
1062: LD_INT 0
1064: ST_TO_ADDR
// if not sideList or not enemySide then
1065: LD_VAR 0 1
1069: NOT
1070: PUSH
1071: LD_VAR 0 2
1075: NOT
1076: OR
1077: IFFALSE 1081
// exit ;
1079: GO 1226
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1081: LD_ADDR_VAR 0 7
1085: PUSH
1086: LD_INT 22
1088: PUSH
1089: LD_VAR 0 2
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: PPUSH
1098: CALL_OW 69
1102: ST_TO_ADDR
// if not tmp then
1103: LD_VAR 0 7
1107: NOT
1108: IFFALSE 1112
// exit ;
1110: GO 1226
// for s in sideList do
1112: LD_ADDR_VAR 0 6
1116: PUSH
1117: LD_VAR 0 1
1121: PUSH
1122: FOR_IN
1123: IFFALSE 1224
// for i in tmp do
1125: LD_ADDR_VAR 0 5
1129: PUSH
1130: LD_VAR 0 7
1134: PUSH
1135: FOR_IN
1136: IFFALSE 1220
// if See ( s , i ) then
1138: LD_VAR 0 6
1142: PPUSH
1143: LD_VAR 0 5
1147: PPUSH
1148: CALL_OW 292
1152: IFFALSE 1218
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
1154: LD_ADDR_VAR 0 8
1158: PUSH
1159: LD_INT 22
1161: PUSH
1162: LD_VAR 0 6
1166: PUSH
1167: EMPTY
1168: LIST
1169: LIST
1170: PPUSH
1171: CALL_OW 69
1175: PPUSH
1176: LD_VAR 0 5
1180: PPUSH
1181: CALL_OW 74
1185: ST_TO_ADDR
// if tmp2 in exceptUnits then
1186: LD_VAR 0 8
1190: PUSH
1191: LD_VAR 0 3
1195: IN
1196: IFFALSE 1202
// continue else
1198: GO 1135
1200: GO 1218
// begin result := tmp2 ;
1202: LD_ADDR_VAR 0 4
1206: PUSH
1207: LD_VAR 0 8
1211: ST_TO_ADDR
// exit ;
1212: POP
1213: POP
1214: POP
1215: POP
1216: GO 1226
// end ; end ;
1218: GO 1135
1220: POP
1221: POP
1222: GO 1122
1224: POP
1225: POP
// end ; end_of_file
1226: LD_VAR 0 4
1230: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1231: LD_INT 0
1233: PPUSH
1234: PPUSH
// if cargoRecycled then
1235: LD_EXP 25
1239: IFFALSE 1267
// begin SetTech ( tech_BasicTools , 2 , state_researched ) ;
1241: LD_INT 82
1243: PPUSH
1244: LD_INT 2
1246: PPUSH
1247: LD_INT 2
1249: PPUSH
1250: CALL_OW 322
// SetTech ( tech_Cargo , 2 , state_researched ) ;
1254: LD_INT 83
1256: PPUSH
1257: LD_INT 2
1259: PPUSH
1260: LD_INT 2
1262: PPUSH
1263: CALL_OW 322
// end ; uc_side := 5 ;
1267: LD_ADDR_OWVAR 20
1271: PUSH
1272: LD_INT 5
1274: ST_TO_ADDR
// uc_nation := 2 ;
1275: LD_ADDR_OWVAR 21
1279: PUSH
1280: LD_INT 2
1282: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1283: LD_ADDR_EXP 37
1287: PUSH
1288: LD_STRING Abdul
1290: PPUSH
1291: LD_INT 0
1293: PPUSH
1294: LD_STRING 
1296: PPUSH
1297: CALL 39192 0 3
1301: ST_TO_ADDR
// uc_side := 2 ;
1302: LD_ADDR_OWVAR 20
1306: PUSH
1307: LD_INT 2
1309: ST_TO_ADDR
// uc_nation := 2 ;
1310: LD_ADDR_OWVAR 21
1314: PUSH
1315: LD_INT 2
1317: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1318: LD_ADDR_EXP 26
1322: PUSH
1323: LD_STRING Heike
1325: PPUSH
1326: LD_EXP 1
1330: NOT
1331: PPUSH
1332: LD_EXP 2
1336: PPUSH
1337: CALL 39192 0 3
1341: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1342: LD_ADDR_EXP 29
1346: PUSH
1347: LD_STRING Ibrahim
1349: PPUSH
1350: LD_EXP 1
1354: NOT
1355: PPUSH
1356: LD_EXP 2
1360: PPUSH
1361: CALL 39192 0 3
1365: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1366: LD_ADDR_EXP 27
1370: PUSH
1371: LD_STRING Givi
1373: PPUSH
1374: LD_EXP 1
1378: NOT
1379: PPUSH
1380: LD_EXP 2
1384: PPUSH
1385: CALL 39192 0 3
1389: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1390: LD_ADDR_EXP 30
1394: PUSH
1395: LD_STRING Kamil
1397: PPUSH
1398: LD_EXP 1
1402: NOT
1403: PPUSH
1404: LD_EXP 2
1408: PPUSH
1409: CALL 39192 0 3
1413: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1414: LD_ADDR_EXP 31
1418: PUSH
1419: LD_STRING Kaia
1421: PPUSH
1422: LD_EXP 1
1426: NOT
1427: PPUSH
1428: LD_EXP 2
1432: PPUSH
1433: CALL 39192 0 3
1437: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1438: LD_ADDR_EXP 32
1442: PUSH
1443: LD_STRING Sophia
1445: PPUSH
1446: LD_EXP 1
1450: NOT
1451: PPUSH
1452: LD_EXP 2
1456: PPUSH
1457: CALL 39192 0 3
1461: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1462: LD_ADDR_EXP 33
1466: PUSH
1467: LD_STRING Markov
1469: PPUSH
1470: LD_EXP 1
1474: NOT
1475: PPUSH
1476: LD_EXP 2
1480: PPUSH
1481: CALL 39192 0 3
1485: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1486: LD_ADDR_EXP 36
1490: PUSH
1491: LD_STRING Aviradze
1493: PPUSH
1494: LD_EXP 1
1498: NOT
1499: PPUSH
1500: LD_EXP 2
1504: PPUSH
1505: CALL 39192 0 3
1509: ST_TO_ADDR
// aviradzeSquad := [ ] ;
1510: LD_ADDR_EXP 40
1514: PUSH
1515: EMPTY
1516: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
1517: LD_ADDR_EXP 38
1521: PUSH
1522: LD_STRING 03_others
1524: PPUSH
1525: CALL_OW 31
1529: ST_TO_ADDR
// uc_side := 5 ;
1530: LD_ADDR_OWVAR 20
1534: PUSH
1535: LD_INT 5
1537: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
1538: LD_ADDR_EXP 35
1542: PUSH
1543: LD_STRING Kurt
1545: PPUSH
1546: LD_INT 0
1548: PPUSH
1549: LD_STRING 
1551: PPUSH
1552: CALL 39192 0 3
1556: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1557: LD_ADDR_EXP 28
1561: PUSH
1562: LD_STRING Mike
1564: PPUSH
1565: LD_EXP 1
1569: NOT
1570: PPUSH
1571: LD_EXP 2
1575: PPUSH
1576: CALL 39192 0 3
1580: ST_TO_ADDR
// if Mike then
1581: LD_EXP 28
1585: IFFALSE 1608
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
1587: LD_EXP 28
1591: PPUSH
1592: LD_INT 142
1594: PPUSH
1595: LD_INT 63
1597: PPUSH
1598: LD_INT 2
1600: PPUSH
1601: LD_INT 0
1603: PPUSH
1604: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
1608: LD_EXP 35
1612: PPUSH
1613: LD_INT 142
1615: PPUSH
1616: LD_INT 63
1618: PPUSH
1619: LD_INT 3
1621: PPUSH
1622: LD_INT 0
1624: PPUSH
1625: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
1629: LD_EXP 35
1633: PUSH
1634: LD_EXP 28
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: PPUSH
1643: CALL_OW 140
// end ;
1647: LD_VAR 0 1
1651: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
1652: LD_INT 0
1654: PPUSH
1655: PPUSH
1656: PPUSH
1657: PPUSH
// uc_side := 5 ;
1658: LD_ADDR_OWVAR 20
1662: PUSH
1663: LD_INT 5
1665: ST_TO_ADDR
// uc_nation := 2 ;
1666: LD_ADDR_OWVAR 21
1670: PUSH
1671: LD_INT 2
1673: ST_TO_ADDR
// InitHc ;
1674: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
1678: LD_ADDR_EXP 34
1682: PUSH
1683: LD_STRING Omar
1685: PPUSH
1686: LD_INT 0
1688: PPUSH
1689: LD_STRING 
1691: PPUSH
1692: CALL 39192 0 3
1696: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
1697: LD_EXP 34
1701: PPUSH
1702: LD_INT 284
1704: PPUSH
1705: LD_INT 163
1707: PPUSH
1708: LD_INT 0
1710: PPUSH
1711: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
1715: LD_EXP 34
1719: PPUSH
1720: LD_INT 256
1722: PPUSH
1723: LD_INT 129
1725: PPUSH
1726: CALL_OW 111
// wait ( 0 0$2 ) ;
1730: LD_INT 70
1732: PPUSH
1733: CALL_OW 67
// omarSquad := [ ] ;
1737: LD_ADDR_EXP 39
1741: PUSH
1742: EMPTY
1743: ST_TO_ADDR
// for i := 1 to 5 do
1744: LD_ADDR_VAR 0 2
1748: PUSH
1749: DOUBLE
1750: LD_INT 1
1752: DEC
1753: ST_TO_ADDR
1754: LD_INT 5
1756: PUSH
1757: FOR_TO
1758: IFFALSE 1964
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1760: LD_INT 5
1762: PPUSH
1763: LD_INT 2
1765: PPUSH
1766: LD_INT 13
1768: PUSH
1769: LD_INT 14
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_VAR 0 2
1780: PUSH
1781: LD_INT 2
1783: MOD
1784: PUSH
1785: LD_INT 1
1787: PLUS
1788: ARRAY
1789: PPUSH
1790: LD_INT 1
1792: PPUSH
1793: LD_INT 1
1795: PPUSH
1796: LD_INT 25
1798: PUSH
1799: LD_INT 27
1801: PUSH
1802: LD_INT 26
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: PUSH
1810: LD_VAR 0 2
1814: PUSH
1815: LD_INT 3
1817: MOD
1818: PUSH
1819: LD_INT 1
1821: PLUS
1822: ARRAY
1823: PPUSH
1824: LD_INT 100
1826: PPUSH
1827: CALL 386 0 7
// veh := CreateVehicle ;
1831: LD_ADDR_VAR 0 4
1835: PUSH
1836: CALL_OW 45
1840: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1841: LD_VAR 0 4
1845: PPUSH
1846: LD_INT 5
1848: PPUSH
1849: CALL_OW 233
// omarSquad := omarSquad union veh ;
1853: LD_ADDR_EXP 39
1857: PUSH
1858: LD_EXP 39
1862: PUSH
1863: LD_VAR 0 4
1867: UNION
1868: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
1869: LD_VAR 0 4
1873: PPUSH
1874: LD_INT 284
1876: PPUSH
1877: LD_INT 163
1879: PPUSH
1880: LD_INT 0
1882: PPUSH
1883: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
1887: LD_INT 0
1889: PPUSH
1890: LD_INT 3
1892: PPUSH
1893: LD_INT 2
1895: PPUSH
1896: CALL_OW 380
// un := CreateHuman ;
1900: LD_ADDR_VAR 0 3
1904: PUSH
1905: CALL_OW 44
1909: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1910: LD_ADDR_EXP 39
1914: PUSH
1915: LD_EXP 39
1919: PUSH
1920: LD_VAR 0 3
1924: UNION
1925: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1926: LD_VAR 0 3
1930: PPUSH
1931: LD_VAR 0 4
1935: PPUSH
1936: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
1940: LD_VAR 0 3
1944: PPUSH
1945: LD_INT 271
1947: PPUSH
1948: LD_INT 144
1950: PPUSH
1951: CALL_OW 111
// wait ( 0 0$2 ) ;
1955: LD_INT 70
1957: PPUSH
1958: CALL_OW 67
// end ;
1962: GO 1757
1964: POP
1965: POP
// for i := 1 to 3 do
1966: LD_ADDR_VAR 0 2
1970: PUSH
1971: DOUBLE
1972: LD_INT 1
1974: DEC
1975: ST_TO_ADDR
1976: LD_INT 3
1978: PUSH
1979: FOR_TO
1980: IFFALSE 2063
// begin PrepareHuman ( false , 1 , 2 ) ;
1982: LD_INT 0
1984: PPUSH
1985: LD_INT 1
1987: PPUSH
1988: LD_INT 2
1990: PPUSH
1991: CALL_OW 380
// un := CreateHuman ;
1995: LD_ADDR_VAR 0 3
1999: PUSH
2000: CALL_OW 44
2004: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2005: LD_ADDR_EXP 39
2009: PUSH
2010: LD_EXP 39
2014: PUSH
2015: LD_VAR 0 3
2019: UNION
2020: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
2021: LD_VAR 0 3
2025: PPUSH
2026: LD_INT 284
2028: PPUSH
2029: LD_INT 163
2031: PPUSH
2032: LD_INT 0
2034: PPUSH
2035: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
2039: LD_VAR 0 3
2043: PPUSH
2044: LD_INT 257
2046: PPUSH
2047: LD_INT 138
2049: PPUSH
2050: CALL_OW 111
// wait ( 0 0$1 ) ;
2054: LD_INT 35
2056: PPUSH
2057: CALL_OW 67
// end ;
2061: GO 1979
2063: POP
2064: POP
// for i := 1 to 6 do
2065: LD_ADDR_VAR 0 2
2069: PUSH
2070: DOUBLE
2071: LD_INT 1
2073: DEC
2074: ST_TO_ADDR
2075: LD_INT 6
2077: PUSH
2078: FOR_TO
2079: IFFALSE 2212
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2081: LD_INT 0
2083: PPUSH
2084: LD_INT 1
2086: PUSH
2087: LD_INT 1
2089: PUSH
2090: LD_INT 4
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: LIST
2097: PUSH
2098: LD_VAR 0 2
2102: PUSH
2103: LD_INT 3
2105: MOD
2106: PUSH
2107: LD_INT 1
2109: PLUS
2110: ARRAY
2111: PPUSH
2112: LD_INT 3
2114: PPUSH
2115: CALL_OW 380
// un := CreateHuman ;
2119: LD_ADDR_VAR 0 3
2123: PUSH
2124: CALL_OW 44
2128: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2129: LD_ADDR_EXP 39
2133: PUSH
2134: LD_EXP 39
2138: PUSH
2139: LD_VAR 0 3
2143: UNION
2144: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2145: LD_VAR 0 3
2149: PPUSH
2150: LD_INT 225
2152: PPUSH
2153: LD_INT 163
2155: PPUSH
2156: LD_INT 0
2158: PPUSH
2159: CALL_OW 48
// if i = 1 then
2163: LD_VAR 0 2
2167: PUSH
2168: LD_INT 1
2170: EQUAL
2171: IFFALSE 2188
// SetAttr ( un , attr_speed , 12 ) ;
2173: LD_VAR 0 3
2177: PPUSH
2178: LD_INT 2
2180: PPUSH
2181: LD_INT 12
2183: PPUSH
2184: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2188: LD_VAR 0 3
2192: PPUSH
2193: LD_INT 222
2195: PPUSH
2196: LD_INT 157
2198: PPUSH
2199: CALL_OW 111
// wait ( 0 0$1 ) ;
2203: LD_INT 35
2205: PPUSH
2206: CALL_OW 67
// end ;
2210: GO 2078
2212: POP
2213: POP
// end ; end_of_file
2214: LD_VAR 0 1
2218: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2219: LD_INT 0
2221: PPUSH
2222: PPUSH
2223: PPUSH
2224: PPUSH
2225: PPUSH
2226: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
2227: LD_INT 3
2229: PPUSH
2230: LD_INT 149
2232: PPUSH
2233: LD_INT 67
2235: PPUSH
2236: CALL_OW 428
2240: PPUSH
2241: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
2245: LD_ADDR_EXP 51
2249: PUSH
2250: LD_INT 111
2252: PPUSH
2253: LD_INT 89
2255: PPUSH
2256: CALL_OW 428
2260: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2261: LD_ADDR_VAR 0 2
2265: PUSH
2266: LD_INT 21
2268: PUSH
2269: LD_INT 3
2271: PUSH
2272: EMPTY
2273: LIST
2274: LIST
2275: PUSH
2276: LD_INT 23
2278: PUSH
2279: LD_INT 3
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PPUSH
2290: CALL_OW 69
2294: PUSH
2295: FOR_IN
2296: IFFALSE 2312
// SetBLevel ( i , 5 ) ;
2298: LD_VAR 0 2
2302: PPUSH
2303: LD_INT 5
2305: PPUSH
2306: CALL_OW 241
2310: GO 2295
2312: POP
2313: POP
// SetBName ( kirov , kirov ) ;
2314: LD_INT 71
2316: PPUSH
2317: LD_STRING kirov
2319: PPUSH
2320: CALL_OW 500
// SetBName ( beria , beria ) ;
2324: LD_INT 106
2326: PPUSH
2327: LD_STRING beria
2329: PPUSH
2330: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2334: LD_INT 112
2336: PPUSH
2337: LD_STRING kagan
2339: PPUSH
2340: CALL_OW 500
// uc_side := 6 ;
2344: LD_ADDR_OWVAR 20
2348: PUSH
2349: LD_INT 6
2351: ST_TO_ADDR
// uc_nation := 3 ;
2352: LD_ADDR_OWVAR 21
2356: PUSH
2357: LD_INT 3
2359: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2360: LD_ADDR_VAR 0 5
2364: PUSH
2365: LD_INT 22
2367: PUSH
2368: LD_INT 6
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PUSH
2375: LD_INT 30
2377: PUSH
2378: LD_INT 5
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: PUSH
2385: EMPTY
2386: LIST
2387: LIST
2388: PPUSH
2389: CALL_OW 69
2393: PUSH
2394: LD_INT 1
2396: ARRAY
2397: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
2398: LD_ADDR_VAR 0 4
2402: PUSH
2403: LD_INT 22
2405: PUSH
2406: LD_INT 6
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: PUSH
2413: LD_INT 30
2415: PUSH
2416: LD_INT 4
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PPUSH
2427: CALL_OW 69
2431: PUSH
2432: LD_INT 1
2434: ARRAY
2435: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
2436: LD_ADDR_EXP 45
2440: PUSH
2441: EMPTY
2442: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
2443: LD_ADDR_EXP 46
2447: PUSH
2448: EMPTY
2449: ST_TO_ADDR
// russianPatrol := [ ] ;
2450: LD_ADDR_EXP 48
2454: PUSH
2455: EMPTY
2456: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
2457: LD_ADDR_EXP 41
2461: PUSH
2462: LD_STRING Kurin
2464: PPUSH
2465: LD_INT 0
2467: PPUSH
2468: LD_STRING 
2470: PPUSH
2471: CALL 39192 0 3
2475: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
2476: LD_EXP 41
2480: PPUSH
2481: LD_INT 71
2483: PPUSH
2484: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
2488: LD_ADDR_EXP 43
2492: PUSH
2493: LD_STRING Popov
2495: PPUSH
2496: LD_INT 0
2498: PPUSH
2499: LD_STRING 
2501: PPUSH
2502: CALL 39192 0 3
2506: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
2507: LD_EXP 43
2511: PPUSH
2512: LD_INT 71
2514: PPUSH
2515: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
2519: LD_ADDR_EXP 42
2523: PUSH
2524: LD_STRING Grishko
2526: PPUSH
2527: LD_INT 0
2529: PPUSH
2530: LD_STRING 
2532: PPUSH
2533: CALL 39192 0 3
2537: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
2538: LD_EXP 42
2542: PPUSH
2543: LD_INT 207
2545: PPUSH
2546: LD_INT 106
2548: PPUSH
2549: LD_INT 0
2551: PPUSH
2552: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
2556: LD_EXP 42
2560: PPUSH
2561: LD_INT 209
2563: PPUSH
2564: LD_INT 106
2566: PPUSH
2567: CALL_OW 118
// for i := 1 to 2 do
2571: LD_ADDR_VAR 0 2
2575: PUSH
2576: DOUBLE
2577: LD_INT 1
2579: DEC
2580: ST_TO_ADDR
2581: LD_INT 2
2583: PUSH
2584: FOR_TO
2585: IFFALSE 2640
// begin PrepareHuman ( false , 2 , 2 ) ;
2587: LD_INT 0
2589: PPUSH
2590: LD_INT 2
2592: PPUSH
2593: LD_INT 2
2595: PPUSH
2596: CALL_OW 380
// un := CreateHuman ;
2600: LD_ADDR_VAR 0 3
2604: PUSH
2605: CALL_OW 44
2609: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2610: LD_VAR 0 3
2614: PPUSH
2615: LD_INT 71
2617: PPUSH
2618: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2622: LD_ADDR_EXP 45
2626: PUSH
2627: LD_EXP 45
2631: PUSH
2632: LD_VAR 0 3
2636: UNION
2637: ST_TO_ADDR
// end ;
2638: GO 2584
2640: POP
2641: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2642: LD_ADDR_VAR 0 2
2646: PUSH
2647: DOUBLE
2648: LD_INT 1
2650: DEC
2651: ST_TO_ADDR
2652: LD_INT 5
2654: PUSH
2655: LD_INT 6
2657: PUSH
2658: LD_INT 6
2660: PUSH
2661: LD_INT 6
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: LIST
2668: LIST
2669: PUSH
2670: LD_OWVAR 67
2674: ARRAY
2675: PUSH
2676: FOR_TO
2677: IFFALSE 2755
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
2679: LD_INT 0
2681: PPUSH
2682: LD_INT 1
2684: PPUSH
2685: LD_INT 2
2687: PUSH
2688: LD_INT 3
2690: PUSH
2691: LD_INT 4
2693: PUSH
2694: LD_INT 4
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: LIST
2701: LIST
2702: PUSH
2703: LD_OWVAR 67
2707: ARRAY
2708: PPUSH
2709: CALL_OW 380
// un := CreateHuman ;
2713: LD_ADDR_VAR 0 3
2717: PUSH
2718: CALL_OW 44
2722: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
2723: LD_VAR 0 3
2727: PPUSH
2728: LD_VAR 0 5
2732: PPUSH
2733: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2737: LD_ADDR_EXP 45
2741: PUSH
2742: LD_EXP 45
2746: PUSH
2747: LD_VAR 0 3
2751: UNION
2752: ST_TO_ADDR
// end ;
2753: GO 2676
2755: POP
2756: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
2757: LD_ADDR_VAR 0 2
2761: PUSH
2762: LD_INT 22
2764: PUSH
2765: LD_INT 6
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: PUSH
2772: LD_INT 30
2774: PUSH
2775: LD_INT 32
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PUSH
2782: EMPTY
2783: LIST
2784: LIST
2785: PPUSH
2786: CALL_OW 69
2790: PUSH
2791: FOR_IN
2792: IFFALSE 2870
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
2794: LD_INT 0
2796: PPUSH
2797: LD_INT 1
2799: PPUSH
2800: LD_INT 3
2802: PUSH
2803: LD_INT 4
2805: PUSH
2806: LD_INT 4
2808: PUSH
2809: LD_INT 5
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: LIST
2816: LIST
2817: PUSH
2818: LD_OWVAR 67
2822: ARRAY
2823: PPUSH
2824: CALL_OW 380
// un := CreateHuman ;
2828: LD_ADDR_VAR 0 3
2832: PUSH
2833: CALL_OW 44
2837: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2838: LD_VAR 0 3
2842: PPUSH
2843: LD_VAR 0 2
2847: PPUSH
2848: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2852: LD_ADDR_EXP 45
2856: PUSH
2857: LD_EXP 45
2861: PUSH
2862: LD_VAR 0 3
2866: UNION
2867: ST_TO_ADDR
// end ;
2868: GO 2791
2870: POP
2871: POP
// for i := 1 to 3 do
2872: LD_ADDR_VAR 0 2
2876: PUSH
2877: DOUBLE
2878: LD_INT 1
2880: DEC
2881: ST_TO_ADDR
2882: LD_INT 3
2884: PUSH
2885: FOR_TO
2886: IFFALSE 2941
// begin PrepareHuman ( false , 3 , 3 ) ;
2888: LD_INT 0
2890: PPUSH
2891: LD_INT 3
2893: PPUSH
2894: LD_INT 3
2896: PPUSH
2897: CALL_OW 380
// un := CreateHuman ;
2901: LD_ADDR_VAR 0 3
2905: PUSH
2906: CALL_OW 44
2910: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
2911: LD_VAR 0 3
2915: PPUSH
2916: LD_INT 92
2918: PPUSH
2919: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2923: LD_ADDR_EXP 45
2927: PUSH
2928: LD_EXP 45
2932: PUSH
2933: LD_VAR 0 3
2937: UNION
2938: ST_TO_ADDR
// end ;
2939: GO 2885
2941: POP
2942: POP
// for i := 1 to 2 do
2943: LD_ADDR_VAR 0 2
2947: PUSH
2948: DOUBLE
2949: LD_INT 1
2951: DEC
2952: ST_TO_ADDR
2953: LD_INT 2
2955: PUSH
2956: FOR_TO
2957: IFFALSE 3012
// begin PrepareHuman ( false , 4 , 3 ) ;
2959: LD_INT 0
2961: PPUSH
2962: LD_INT 4
2964: PPUSH
2965: LD_INT 3
2967: PPUSH
2968: CALL_OW 380
// un := CreateHuman ;
2972: LD_ADDR_VAR 0 3
2976: PUSH
2977: CALL_OW 44
2981: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2982: LD_VAR 0 3
2986: PPUSH
2987: LD_INT 83
2989: PPUSH
2990: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2994: LD_ADDR_EXP 45
2998: PUSH
2999: LD_EXP 45
3003: PUSH
3004: LD_VAR 0 3
3008: UNION
3009: ST_TO_ADDR
// end ;
3010: GO 2956
3012: POP
3013: POP
// for i := 1 to 5 do
3014: LD_ADDR_VAR 0 2
3018: PUSH
3019: DOUBLE
3020: LD_INT 1
3022: DEC
3023: ST_TO_ADDR
3024: LD_INT 5
3026: PUSH
3027: FOR_TO
3028: IFFALSE 3085
// begin PrepareHuman ( false , 1 , 3 ) ;
3030: LD_INT 0
3032: PPUSH
3033: LD_INT 1
3035: PPUSH
3036: LD_INT 3
3038: PPUSH
3039: CALL_OW 380
// un := CreateHuman ;
3043: LD_ADDR_VAR 0 3
3047: PUSH
3048: CALL_OW 44
3052: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3053: LD_VAR 0 3
3057: PPUSH
3058: LD_VAR 0 4
3062: PPUSH
3063: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3067: LD_ADDR_EXP 47
3071: PUSH
3072: LD_EXP 47
3076: PUSH
3077: LD_VAR 0 3
3081: UNION
3082: ST_TO_ADDR
// end ;
3083: GO 3027
3085: POP
3086: POP
// russianCargo := [ ] ;
3087: LD_ADDR_EXP 50
3091: PUSH
3092: EMPTY
3093: ST_TO_ADDR
// for i := 1 to 2 do
3094: LD_ADDR_VAR 0 2
3098: PUSH
3099: DOUBLE
3100: LD_INT 1
3102: DEC
3103: ST_TO_ADDR
3104: LD_INT 2
3106: PUSH
3107: FOR_TO
3108: IFFALSE 3240
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3110: LD_INT 6
3112: PPUSH
3113: LD_INT 3
3115: PPUSH
3116: LD_INT 21
3118: PPUSH
3119: LD_INT 1
3121: PPUSH
3122: LD_INT 1
3124: PPUSH
3125: LD_INT 51
3127: PPUSH
3128: LD_INT 100
3130: PPUSH
3131: CALL 386 0 7
// un := CreateVehicle ;
3135: LD_ADDR_VAR 0 3
3139: PUSH
3140: CALL_OW 45
3144: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3145: LD_ADDR_EXP 50
3149: PUSH
3150: LD_EXP 50
3154: PUSH
3155: LD_VAR 0 3
3159: UNION
3160: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3161: LD_VAR 0 3
3165: PPUSH
3166: LD_INT 2
3168: PPUSH
3169: LD_INT 100
3171: PPUSH
3172: CALL_OW 290
// SetDir ( un , 4 ) ;
3176: LD_VAR 0 3
3180: PPUSH
3181: LD_INT 4
3183: PPUSH
3184: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3188: LD_VAR 0 3
3192: PPUSH
3193: LD_INT 147
3195: PPUSH
3196: LD_INT 103
3198: PPUSH
3199: LD_INT 4
3201: PPUSH
3202: LD_INT 0
3204: PPUSH
3205: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3209: LD_INT 0
3211: PPUSH
3212: LD_INT 1
3214: PPUSH
3215: LD_OWVAR 67
3219: PPUSH
3220: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3224: CALL_OW 44
3228: PPUSH
3229: LD_VAR 0 3
3233: PPUSH
3234: CALL_OW 52
// end ;
3238: GO 3107
3240: POP
3241: POP
// uc_side := 3 ;
3242: LD_ADDR_OWVAR 20
3246: PUSH
3247: LD_INT 3
3249: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3250: LD_ADDR_EXP 44
3254: PUSH
3255: LD_STRING Burlak
3257: PPUSH
3258: LD_INT 0
3260: PPUSH
3261: LD_STRING 
3263: PPUSH
3264: CALL 39192 0 3
3268: ST_TO_ADDR
// for i := 1 to 5 do
3269: LD_ADDR_VAR 0 2
3273: PUSH
3274: DOUBLE
3275: LD_INT 1
3277: DEC
3278: ST_TO_ADDR
3279: LD_INT 5
3281: PUSH
3282: FOR_TO
3283: IFFALSE 3376
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3285: LD_INT 0
3287: PPUSH
3288: LD_INT 1
3290: PPUSH
3291: LD_OWVAR 67
3295: PUSH
3296: LD_INT 1
3298: PLUS
3299: PPUSH
3300: CALL_OW 380
// un := CreateHuman ;
3304: LD_ADDR_VAR 0 3
3308: PUSH
3309: CALL_OW 44
3313: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3314: LD_VAR 0 3
3318: PPUSH
3319: LD_INT 22
3321: PUSH
3322: LD_INT 3
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PUSH
3329: LD_INT 30
3331: PUSH
3332: LD_INT 32
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PPUSH
3343: CALL_OW 69
3347: PUSH
3348: LD_VAR 0 2
3352: ARRAY
3353: PPUSH
3354: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3358: LD_ADDR_EXP 46
3362: PUSH
3363: LD_EXP 46
3367: PUSH
3368: LD_VAR 0 3
3372: UNION
3373: ST_TO_ADDR
// end ;
3374: GO 3282
3376: POP
3377: POP
// for i := 1 to 2 do
3378: LD_ADDR_VAR 0 2
3382: PUSH
3383: DOUBLE
3384: LD_INT 1
3386: DEC
3387: ST_TO_ADDR
3388: LD_INT 2
3390: PUSH
3391: FOR_TO
3392: IFFALSE 3483
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3394: LD_INT 0
3396: PPUSH
3397: LD_INT 1
3399: PPUSH
3400: LD_OWVAR 67
3404: PUSH
3405: LD_INT 1
3407: PLUS
3408: PPUSH
3409: CALL_OW 380
// un := CreateHuman ;
3413: LD_ADDR_VAR 0 3
3417: PUSH
3418: CALL_OW 44
3422: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3423: LD_VAR 0 3
3427: PPUSH
3428: LD_INT 22
3430: PUSH
3431: LD_INT 3
3433: PUSH
3434: EMPTY
3435: LIST
3436: LIST
3437: PUSH
3438: LD_INT 30
3440: PUSH
3441: LD_INT 5
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: EMPTY
3449: LIST
3450: LIST
3451: PPUSH
3452: CALL_OW 69
3456: PUSH
3457: LD_INT 1
3459: ARRAY
3460: PPUSH
3461: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3465: LD_ADDR_EXP 46
3469: PUSH
3470: LD_EXP 46
3474: PUSH
3475: LD_VAR 0 3
3479: UNION
3480: ST_TO_ADDR
// end ;
3481: GO 3391
3483: POP
3484: POP
// for i := 1 to 2 do
3485: LD_ADDR_VAR 0 2
3489: PUSH
3490: DOUBLE
3491: LD_INT 1
3493: DEC
3494: ST_TO_ADDR
3495: LD_INT 2
3497: PUSH
3498: FOR_TO
3499: IFFALSE 3586
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3501: LD_INT 0
3503: PPUSH
3504: LD_INT 4
3506: PPUSH
3507: LD_OWVAR 67
3511: PPUSH
3512: CALL_OW 380
// un := CreateHuman ;
3516: LD_ADDR_VAR 0 3
3520: PUSH
3521: CALL_OW 44
3525: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
3526: LD_VAR 0 3
3530: PPUSH
3531: LD_INT 22
3533: PUSH
3534: LD_INT 3
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: PUSH
3541: LD_INT 30
3543: PUSH
3544: LD_INT 7
3546: PUSH
3547: EMPTY
3548: LIST
3549: LIST
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: PPUSH
3555: CALL_OW 69
3559: PUSH
3560: LD_INT 1
3562: ARRAY
3563: PPUSH
3564: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3568: LD_ADDR_EXP 46
3572: PUSH
3573: LD_EXP 46
3577: PUSH
3578: LD_VAR 0 3
3582: UNION
3583: ST_TO_ADDR
// end ;
3584: GO 3498
3586: POP
3587: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
3588: LD_INT 0
3590: PPUSH
3591: LD_INT 2
3593: PPUSH
3594: LD_OWVAR 67
3598: PPUSH
3599: CALL_OW 380
// un := CreateHuman ;
3603: LD_ADDR_VAR 0 3
3607: PUSH
3608: CALL_OW 44
3612: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
3613: LD_VAR 0 3
3617: PPUSH
3618: LD_INT 106
3620: PPUSH
3621: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3625: LD_ADDR_EXP 46
3629: PUSH
3630: LD_EXP 46
3634: PUSH
3635: LD_VAR 0 3
3639: UNION
3640: ST_TO_ADDR
// for i := 1 to 3 do
3641: LD_ADDR_VAR 0 2
3645: PUSH
3646: DOUBLE
3647: LD_INT 1
3649: DEC
3650: ST_TO_ADDR
3651: LD_INT 3
3653: PUSH
3654: FOR_TO
3655: IFFALSE 3777
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
3657: LD_ADDR_VAR 0 6
3661: PUSH
3662: LD_INT 22
3664: PUSH
3665: LD_INT 3
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: PUSH
3672: LD_INT 30
3674: PUSH
3675: LD_INT 31
3677: PUSH
3678: EMPTY
3679: LIST
3680: LIST
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: PPUSH
3686: CALL_OW 69
3690: PUSH
3691: LD_VAR 0 2
3695: ARRAY
3696: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
3697: LD_INT 0
3699: PPUSH
3700: LD_INT 1
3702: PPUSH
3703: LD_OWVAR 67
3707: PPUSH
3708: CALL_OW 380
// un := CreateHuman ;
3712: LD_ADDR_VAR 0 3
3716: PUSH
3717: CALL_OW 44
3721: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
3722: LD_VAR 0 3
3726: PPUSH
3727: LD_VAR 0 6
3731: PPUSH
3732: CALL_OW 254
3736: PUSH
3737: LD_INT 3
3739: PLUS
3740: PPUSH
3741: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
3745: LD_VAR 0 3
3749: PPUSH
3750: LD_VAR 0 6
3754: PPUSH
3755: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3759: LD_ADDR_EXP 46
3763: PUSH
3764: LD_EXP 46
3768: PUSH
3769: LD_VAR 0 3
3773: UNION
3774: ST_TO_ADDR
// end ;
3775: GO 3654
3777: POP
3778: POP
// if Difficulty > 1 then
3779: LD_OWVAR 67
3783: PUSH
3784: LD_INT 1
3786: GREATER
3787: IFFALSE 3862
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
3789: LD_ADDR_VAR 0 3
3793: PUSH
3794: LD_INT 3
3796: PPUSH
3797: LD_INT 3
3799: PPUSH
3800: LD_INT 23
3802: PPUSH
3803: LD_INT 1
3805: PPUSH
3806: LD_INT 1
3808: PPUSH
3809: LD_INT 44
3811: PPUSH
3812: LD_INT 100
3814: PPUSH
3815: CALL 386 0 7
3819: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
3820: LD_VAR 0 3
3824: PPUSH
3825: LD_INT 73
3827: PPUSH
3828: LD_INT 110
3830: PPUSH
3831: LD_INT 0
3833: PPUSH
3834: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
3838: LD_INT 0
3840: PPUSH
3841: LD_INT 3
3843: PPUSH
3844: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
3848: CALL_OW 44
3852: PPUSH
3853: LD_VAR 0 3
3857: PPUSH
3858: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
3862: LD_ADDR_EXP 49
3866: PUSH
3867: EMPTY
3868: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 , 8 ] [ Difficulty ] do
3869: LD_ADDR_VAR 0 2
3873: PUSH
3874: DOUBLE
3875: LD_INT 1
3877: DEC
3878: ST_TO_ADDR
3879: LD_INT 6
3881: PUSH
3882: LD_INT 7
3884: PUSH
3885: LD_INT 8
3887: PUSH
3888: LD_INT 8
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: PUSH
3897: LD_OWVAR 67
3901: ARRAY
3902: PUSH
3903: FOR_TO
3904: IFFALSE 4128
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
3906: LD_INT 3
3908: PPUSH
3909: LD_INT 3
3911: PPUSH
3912: LD_INT 21
3914: PUSH
3915: LD_INT 23
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: PUSH
3922: LD_VAR 0 2
3926: PUSH
3927: LD_INT 2
3929: MOD
3930: PUSH
3931: LD_INT 1
3933: PLUS
3934: ARRAY
3935: PPUSH
3936: LD_INT 1
3938: PPUSH
3939: LD_INT 1
3941: PPUSH
3942: LD_INT 43
3944: PUSH
3945: LD_INT 44
3947: PUSH
3948: LD_INT 42
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: LIST
3955: PUSH
3956: LD_VAR 0 2
3960: PUSH
3961: LD_INT 3
3963: MOD
3964: PUSH
3965: LD_INT 1
3967: PLUS
3968: ARRAY
3969: PPUSH
3970: LD_INT 100
3972: PPUSH
3973: CALL 386 0 7
// un := CreateVehicle ;
3977: LD_ADDR_VAR 0 3
3981: PUSH
3982: CALL_OW 45
3986: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
3987: LD_VAR 0 3
3991: PPUSH
3992: LD_INT 0
3994: PUSH
3995: LD_INT 5
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: PUSH
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 2
4007: PPUSH
4008: CALL_OW 12
4012: ARRAY
4013: PPUSH
4014: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
4018: LD_ADDR_EXP 49
4022: PUSH
4023: LD_EXP 49
4027: PUSH
4028: LD_VAR 0 3
4032: UNION
4033: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
4034: LD_VAR 0 3
4038: PPUSH
4039: LD_INT 127
4041: PPUSH
4042: LD_INT 89
4044: PPUSH
4045: LD_INT 7
4047: PPUSH
4048: LD_INT 0
4050: PPUSH
4051: CALL_OW 50
// uc_side := 3 ;
4055: LD_ADDR_OWVAR 20
4059: PUSH
4060: LD_INT 3
4062: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4063: LD_INT 0
4065: PPUSH
4066: LD_INT 3
4068: PPUSH
4069: LD_INT 3
4071: PPUSH
4072: CALL_OW 380
// un := CreateHuman ;
4076: LD_ADDR_VAR 0 3
4080: PUSH
4081: CALL_OW 44
4085: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4086: LD_ADDR_EXP 49
4090: PUSH
4091: LD_EXP 49
4095: PUSH
4096: LD_VAR 0 3
4100: UNION
4101: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4102: LD_VAR 0 3
4106: PPUSH
4107: LD_EXP 49
4111: PUSH
4112: LD_EXP 49
4116: PUSH
4117: LD_INT 1
4119: MINUS
4120: ARRAY
4121: PPUSH
4122: CALL_OW 52
// end ;
4126: GO 3903
4128: POP
4129: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
4130: LD_ADDR_VAR 0 2
4134: PUSH
4135: DOUBLE
4136: LD_INT 1
4138: DEC
4139: ST_TO_ADDR
4140: LD_INT 3
4142: PUSH
4143: LD_INT 4
4145: PUSH
4146: LD_INT 5
4148: PUSH
4149: LD_INT 6
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: PUSH
4158: LD_OWVAR 67
4162: ARRAY
4163: PUSH
4164: FOR_TO
4165: IFFALSE 4231
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4167: LD_INT 0
4169: PPUSH
4170: LD_INT 1
4172: PPUSH
4173: LD_OWVAR 67
4177: PPUSH
4178: CALL_OW 380
// un := CreateHuman ;
4182: LD_ADDR_VAR 0 3
4186: PUSH
4187: CALL_OW 44
4191: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4192: LD_ADDR_EXP 49
4196: PUSH
4197: LD_EXP 49
4201: PUSH
4202: LD_VAR 0 3
4206: UNION
4207: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4208: LD_VAR 0 3
4212: PPUSH
4213: LD_INT 91
4215: PPUSH
4216: LD_INT 60
4218: PPUSH
4219: LD_INT 3
4221: PPUSH
4222: LD_INT 0
4224: PPUSH
4225: CALL_OW 50
// end ;
4229: GO 4164
4231: POP
4232: POP
// end ;
4233: LD_VAR 0 1
4237: RET
// every 0 0$3 do var i ;
4238: GO 4240
4240: DISABLE
4241: LD_INT 0
4243: PPUSH
// begin for i := 1 to 4 do
4244: LD_ADDR_VAR 0 1
4248: PUSH
4249: DOUBLE
4250: LD_INT 1
4252: DEC
4253: ST_TO_ADDR
4254: LD_INT 4
4256: PUSH
4257: FOR_TO
4258: IFFALSE 4277
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4260: LD_EXP 47
4264: PUSH
4265: LD_VAR 0 1
4269: ARRAY
4270: PPUSH
4271: CALL_OW 122
4275: GO 4257
4277: POP
4278: POP
// wait ( 3 ) ;
4279: LD_INT 3
4281: PPUSH
4282: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4286: LD_EXP 47
4290: PUSH
4291: LD_INT 1
4293: ARRAY
4294: PPUSH
4295: LD_INT 22
4297: PUSH
4298: LD_INT 6
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: PUSH
4305: LD_INT 30
4307: PUSH
4308: LD_INT 31
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PUSH
4315: EMPTY
4316: LIST
4317: LIST
4318: PPUSH
4319: CALL_OW 69
4323: PPUSH
4324: LD_EXP 47
4328: PUSH
4329: LD_INT 1
4331: ARRAY
4332: PPUSH
4333: CALL_OW 74
4337: PPUSH
4338: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4342: LD_EXP 47
4346: PUSH
4347: LD_INT 2
4349: ARRAY
4350: PPUSH
4351: LD_INT 211
4353: PPUSH
4354: LD_INT 107
4356: PPUSH
4357: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4361: LD_EXP 47
4365: PUSH
4366: LD_INT 2
4368: ARRAY
4369: PPUSH
4370: LD_INT 209
4372: PPUSH
4373: LD_INT 106
4375: PPUSH
4376: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4380: LD_EXP 47
4384: PUSH
4385: LD_INT 3
4387: ARRAY
4388: PPUSH
4389: LD_INT 209
4391: PPUSH
4392: LD_INT 103
4394: PPUSH
4395: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4399: LD_EXP 47
4403: PUSH
4404: LD_INT 3
4406: ARRAY
4407: PPUSH
4408: LD_INT 209
4410: PPUSH
4411: LD_INT 106
4413: PPUSH
4414: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4418: LD_EXP 47
4422: PUSH
4423: LD_INT 4
4425: ARRAY
4426: PPUSH
4427: LD_INT 227
4429: PPUSH
4430: LD_INT 117
4432: PPUSH
4433: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4437: LD_EXP 47
4441: PUSH
4442: LD_INT 4
4444: ARRAY
4445: PPUSH
4446: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4450: LD_INT 700
4452: PPUSH
4453: CALL_OW 67
// for i := 3 downto 2 do
4457: LD_ADDR_VAR 0 1
4461: PUSH
4462: DOUBLE
4463: LD_INT 3
4465: INC
4466: ST_TO_ADDR
4467: LD_INT 2
4469: PUSH
4470: FOR_DOWNTO
4471: IFFALSE 4638
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4473: LD_EXP 47
4477: PUSH
4478: LD_VAR 0 1
4482: ARRAY
4483: PPUSH
4484: LD_INT 200
4486: PPUSH
4487: LD_INT 91
4489: PPUSH
4490: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4494: LD_EXP 47
4498: PUSH
4499: LD_VAR 0 1
4503: ARRAY
4504: PPUSH
4505: LD_INT 210
4507: PPUSH
4508: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4512: LD_EXP 47
4516: PUSH
4517: LD_VAR 0 1
4521: ARRAY
4522: PPUSH
4523: LD_INT 224
4525: PPUSH
4526: LD_INT 93
4528: PPUSH
4529: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4533: LD_EXP 47
4537: PUSH
4538: LD_VAR 0 1
4542: ARRAY
4543: PPUSH
4544: LD_INT 210
4546: PPUSH
4547: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4551: LD_EXP 47
4555: PUSH
4556: LD_VAR 0 1
4560: ARRAY
4561: PPUSH
4562: LD_INT 239
4564: PPUSH
4565: LD_INT 123
4567: PPUSH
4568: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4572: LD_EXP 47
4576: PUSH
4577: LD_VAR 0 1
4581: ARRAY
4582: PPUSH
4583: LD_INT 210
4585: PPUSH
4586: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4590: LD_EXP 47
4594: PUSH
4595: LD_VAR 0 1
4599: ARRAY
4600: PPUSH
4601: LD_INT 212
4603: PPUSH
4604: LD_INT 105
4606: PPUSH
4607: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4611: LD_EXP 47
4615: PUSH
4616: LD_VAR 0 1
4620: ARRAY
4621: PPUSH
4622: LD_INT 700
4624: PPUSH
4625: CALL_OW 202
// wait ( 0 0$30 ) ;
4629: LD_INT 1050
4631: PPUSH
4632: CALL_OW 67
// end ;
4636: GO 4470
4638: POP
4639: POP
// until not activeGrishkoAI ;
4640: LD_EXP 10
4644: NOT
4645: IFFALSE 4450
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
4647: LD_EXP 47
4651: PPUSH
4652: LD_INT 221
4654: PPUSH
4655: LD_INT 110
4657: PPUSH
4658: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
4662: LD_EXP 47
4666: PPUSH
4667: LD_INT 228
4669: PPUSH
4670: LD_INT 115
4672: PPUSH
4673: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
4677: LD_EXP 47
4681: PPUSH
4682: CALL_OW 200
// end ;
4686: PPOPN 1
4688: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
4689: LD_EXP 12
4693: IFFALSE 5439
4695: GO 4697
4697: DISABLE
4698: LD_INT 0
4700: PPUSH
4701: PPUSH
4702: PPUSH
4703: PPUSH
// begin uc_side := 6 ;
4704: LD_ADDR_OWVAR 20
4708: PUSH
4709: LD_INT 6
4711: ST_TO_ADDR
// uc_nation := 3 ;
4712: LD_ADDR_OWVAR 21
4716: PUSH
4717: LD_INT 3
4719: ST_TO_ADDR
// for i := 1 to 3 do
4720: LD_ADDR_VAR 0 2
4724: PUSH
4725: DOUBLE
4726: LD_INT 1
4728: DEC
4729: ST_TO_ADDR
4730: LD_INT 3
4732: PUSH
4733: FOR_TO
4734: IFFALSE 4847
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
4736: LD_INT 0
4738: PPUSH
4739: LD_INT 1
4741: PPUSH
4742: LD_INT 2
4744: PUSH
4745: LD_INT 3
4747: PUSH
4748: LD_INT 4
4750: PUSH
4751: LD_INT 4
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: PUSH
4760: LD_OWVAR 67
4764: ARRAY
4765: PPUSH
4766: CALL_OW 380
// un := CreateHuman ;
4770: LD_ADDR_VAR 0 1
4774: PUSH
4775: CALL_OW 44
4779: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
4780: LD_ADDR_EXP 48
4784: PUSH
4785: LD_EXP 48
4789: PUSH
4790: LD_VAR 0 1
4794: UNION
4795: ST_TO_ADDR
// SetTag ( un , 1 ) ;
4796: LD_VAR 0 1
4800: PPUSH
4801: LD_INT 1
4803: PPUSH
4804: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
4808: LD_VAR 0 1
4812: PPUSH
4813: LD_INT 11
4815: PPUSH
4816: LD_INT 0
4818: PPUSH
4819: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
4823: LD_VAR 0 1
4827: PPUSH
4828: LD_INT 210
4830: PPUSH
4831: LD_INT 159
4833: PPUSH
4834: CALL_OW 111
// wait ( 0 0$2 ) ;
4838: LD_INT 70
4840: PPUSH
4841: CALL_OW 67
// end ;
4845: GO 4733
4847: POP
4848: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
4849: LD_ADDR_VAR 0 4
4853: PUSH
4854: LD_INT 172
4856: PUSH
4857: LD_INT 76
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: PUSH
4864: LD_INT 150
4866: PUSH
4867: LD_INT 38
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PUSH
4874: LD_INT 148
4876: PUSH
4877: LD_INT 9
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: LD_INT 165
4886: PUSH
4887: LD_INT 38
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: PUSH
4900: LD_INT 191
4902: PUSH
4903: LD_INT 77
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PUSH
4910: LD_INT 168
4912: PUSH
4913: LD_INT 42
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: PUSH
4920: LD_INT 166
4922: PUSH
4923: LD_INT 11
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: PUSH
4930: LD_INT 151
4932: PUSH
4933: LD_INT 12
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: PUSH
4946: LD_INT 221
4948: PUSH
4949: LD_INT 88
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: PUSH
4956: LD_INT 217
4958: PUSH
4959: LD_INT 64
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PUSH
4966: LD_INT 232
4968: PUSH
4969: LD_INT 66
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PUSH
4976: LD_INT 200
4978: PUSH
4979: LD_INT 56
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: LIST
4996: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4997: LD_INT 35
4999: PPUSH
5000: CALL_OW 67
// for i := russianPatrol downto 1 do
5004: LD_ADDR_VAR 0 2
5008: PUSH
5009: DOUBLE
5010: LD_EXP 48
5014: INC
5015: ST_TO_ADDR
5016: LD_INT 1
5018: PUSH
5019: FOR_DOWNTO
5020: IFFALSE 5403
// begin if IsDead ( russianPatrol [ i ] ) then
5022: LD_EXP 48
5026: PUSH
5027: LD_VAR 0 2
5031: ARRAY
5032: PPUSH
5033: CALL_OW 301
5037: IFFALSE 5041
// continue ;
5039: GO 5019
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
5041: LD_EXP 48
5045: PUSH
5046: LD_VAR 0 2
5050: ARRAY
5051: PPUSH
5052: CALL_OW 256
5056: PUSH
5057: LD_INT 990
5059: LESS
5060: PUSH
5061: LD_EXP 48
5065: PUSH
5066: LD_VAR 0 2
5070: ARRAY
5071: PPUSH
5072: CALL_OW 110
5076: PUSH
5077: LD_INT 1
5079: EQUAL
5080: AND
5081: IFFALSE 5101
// SetTag ( russianPatrol [ i ] , 2 ) ;
5083: LD_EXP 48
5087: PUSH
5088: LD_VAR 0 2
5092: ARRAY
5093: PPUSH
5094: LD_INT 2
5096: PPUSH
5097: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5101: LD_EXP 48
5105: PUSH
5106: LD_VAR 0 2
5110: ARRAY
5111: PPUSH
5112: CALL_OW 110
5116: PUSH
5117: LD_INT 2
5119: EQUAL
5120: IFFALSE 5187
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5122: LD_EXP 48
5126: PUSH
5127: LD_VAR 0 2
5131: ARRAY
5132: PPUSH
5133: LD_INT 166
5135: PPUSH
5136: LD_INT 101
5138: PPUSH
5139: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5143: LD_EXP 48
5147: PUSH
5148: LD_VAR 0 2
5152: ARRAY
5153: PPUSH
5154: LD_INT 71
5156: PPUSH
5157: CALL_OW 296
5161: PUSH
5162: LD_INT 10
5164: LESS
5165: IFFALSE 5185
// SetTag ( russianPatrol [ i ] , 3 ) ;
5167: LD_EXP 48
5171: PUSH
5172: LD_VAR 0 2
5176: ARRAY
5177: PPUSH
5178: LD_INT 3
5180: PPUSH
5181: CALL_OW 109
// continue ;
5185: GO 5019
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5187: LD_EXP 48
5191: PUSH
5192: LD_VAR 0 2
5196: ARRAY
5197: PPUSH
5198: CALL_OW 110
5202: PUSH
5203: LD_INT 3
5205: EQUAL
5206: IFFALSE 5301
// begin spottedByPatrol := true ;
5208: LD_ADDR_EXP 7
5212: PUSH
5213: LD_INT 1
5215: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5216: LD_EXP 48
5220: PUSH
5221: LD_VAR 0 2
5225: ARRAY
5226: PPUSH
5227: CALL_OW 250
5231: PPUSH
5232: LD_EXP 48
5236: PUSH
5237: LD_VAR 0 2
5241: ARRAY
5242: PPUSH
5243: CALL_OW 251
5247: PPUSH
5248: LD_INT 2
5250: PPUSH
5251: LD_INT 6
5253: NEG
5254: PPUSH
5255: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
5259: LD_EXP 48
5263: PUSH
5264: LD_VAR 0 2
5268: ARRAY
5269: PPUSH
5270: CALL_OW 87
// DialogueOn ;
5274: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
5278: LD_EXP 26
5282: PPUSH
5283: LD_STRING DH-Spot-f-3
5285: PPUSH
5286: CALL_OW 88
// DialogueOff ;
5290: CALL_OW 7
// YouLost ( Spotted ) ;
5294: LD_STRING Spotted
5296: PPUSH
5297: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
5301: LD_EXP 48
5305: PUSH
5306: LD_VAR 0 2
5310: ARRAY
5311: PPUSH
5312: CALL_OW 314
5316: NOT
5317: IFFALSE 5401
// for j in patrol [ i ] do
5319: LD_ADDR_VAR 0 3
5323: PUSH
5324: LD_VAR 0 4
5328: PUSH
5329: LD_VAR 0 2
5333: ARRAY
5334: PUSH
5335: FOR_IN
5336: IFFALSE 5399
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5338: LD_EXP 48
5342: PUSH
5343: LD_VAR 0 2
5347: ARRAY
5348: PPUSH
5349: LD_INT 35
5351: PPUSH
5352: LD_INT 175
5354: PPUSH
5355: CALL_OW 12
5359: PPUSH
5360: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5364: LD_EXP 48
5368: PUSH
5369: LD_VAR 0 2
5373: ARRAY
5374: PPUSH
5375: LD_VAR 0 3
5379: PUSH
5380: LD_INT 1
5382: ARRAY
5383: PPUSH
5384: LD_VAR 0 3
5388: PUSH
5389: LD_INT 2
5391: ARRAY
5392: PPUSH
5393: CALL_OW 174
// end ;
5397: GO 5335
5399: POP
5400: POP
// end ;
5401: GO 5019
5403: POP
5404: POP
// until not russianPatrol or russianAlert ;
5405: LD_EXP 48
5409: NOT
5410: PUSH
5411: LD_EXP 9
5415: OR
5416: IFFALSE 4997
// if russianPatrol then
5418: LD_EXP 48
5422: IFFALSE 5439
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5424: LD_EXP 48
5428: PPUSH
5429: LD_INT 161
5431: PPUSH
5432: LD_INT 107
5434: PPUSH
5435: CALL_OW 114
// end ;
5439: PPOPN 4
5441: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5442: LD_EXP 6
5446: PUSH
5447: LD_EXP 13
5451: NOT
5452: AND
5453: IFFALSE 5939
5455: GO 5457
5457: DISABLE
5458: LD_INT 0
5460: PPUSH
5461: PPUSH
5462: PPUSH
5463: PPUSH
5464: PPUSH
// begin enable ;
5465: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5466: LD_ADDR_VAR 0 2
5470: PUSH
5471: LD_EXP 49
5475: PPUSH
5476: LD_INT 21
5478: PUSH
5479: LD_INT 2
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PPUSH
5486: CALL_OW 72
5490: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5491: LD_ADDR_VAR 0 4
5495: PUSH
5496: LD_INT 22
5498: PUSH
5499: LD_INT 4
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: PPUSH
5506: CALL_OW 69
5510: ST_TO_ADDR
// for i in filter do
5511: LD_ADDR_VAR 0 1
5515: PUSH
5516: LD_VAR 0 2
5520: PUSH
5521: FOR_IN
5522: IFFALSE 5937
// begin tmp := IsDrivenBy ( i ) ;
5524: LD_ADDR_VAR 0 3
5528: PUSH
5529: LD_VAR 0 1
5533: PPUSH
5534: CALL_OW 311
5538: ST_TO_ADDR
// if not tmp then
5539: LD_VAR 0 3
5543: NOT
5544: IFFALSE 5548
// continue ;
5546: GO 5521
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5548: LD_VAR 0 1
5552: PPUSH
5553: CALL_OW 261
5557: PUSH
5558: LD_INT 90
5560: GREATER
5561: PUSH
5562: LD_VAR 0 1
5566: PPUSH
5567: CALL_OW 110
5571: PUSH
5572: LD_INT 2
5574: EQUAL
5575: AND
5576: IFFALSE 5592
// SetTag ( i , 0 ) else
5578: LD_VAR 0 1
5582: PPUSH
5583: LD_INT 0
5585: PPUSH
5586: CALL_OW 109
5590: GO 5688
// if GetTag ( i ) = 2 then
5592: LD_VAR 0 1
5596: PPUSH
5597: CALL_OW 110
5601: PUSH
5602: LD_INT 2
5604: EQUAL
5605: IFFALSE 5688
// begin x := rand ( 1 , 2 ) ;
5607: LD_ADDR_VAR 0 5
5611: PUSH
5612: LD_INT 1
5614: PPUSH
5615: LD_INT 2
5617: PPUSH
5618: CALL_OW 12
5622: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5623: LD_VAR 0 1
5627: PPUSH
5628: LD_EXP 50
5632: PUSH
5633: LD_VAR 0 5
5637: ARRAY
5638: PPUSH
5639: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
5643: LD_EXP 50
5647: PUSH
5648: LD_VAR 0 5
5652: ARRAY
5653: PPUSH
5654: LD_INT 2
5656: PPUSH
5657: CALL_OW 289
5661: PUSH
5662: LD_INT 20
5664: LESS
5665: IFFALSE 5688
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
5667: LD_EXP 50
5671: PUSH
5672: LD_VAR 0 5
5676: ARRAY
5677: PPUSH
5678: LD_INT 2
5680: PPUSH
5681: LD_INT 100
5683: PPUSH
5684: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5688: LD_VAR 0 1
5692: PPUSH
5693: CALL_OW 256
5697: PUSH
5698: LD_INT 600
5700: GREATEREQUAL
5701: PUSH
5702: LD_VAR 0 1
5706: PPUSH
5707: CALL_OW 110
5711: NOT
5712: AND
5713: IFFALSE 5739
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5715: LD_VAR 0 1
5719: PPUSH
5720: LD_VAR 0 4
5724: PPUSH
5725: LD_VAR 0 1
5729: PPUSH
5730: CALL_OW 74
5734: PPUSH
5735: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5739: LD_VAR 0 1
5743: PPUSH
5744: CALL_OW 256
5748: PUSH
5749: LD_INT 600
5751: LESS
5752: PUSH
5753: LD_VAR 0 1
5757: PPUSH
5758: CALL_OW 110
5762: NOT
5763: AND
5764: IFFALSE 5793
// begin SetTag ( i , 1 ) ;
5766: LD_VAR 0 1
5770: PPUSH
5771: LD_INT 1
5773: PPUSH
5774: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5778: LD_VAR 0 1
5782: PPUSH
5783: LD_INT 62
5785: PPUSH
5786: LD_INT 22
5788: PPUSH
5789: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5793: LD_VAR 0 1
5797: PPUSH
5798: CALL_OW 110
5802: PUSH
5803: LD_INT 1
5805: EQUAL
5806: PUSH
5807: LD_VAR 0 1
5811: PPUSH
5812: LD_INT 62
5814: PPUSH
5815: LD_INT 22
5817: PPUSH
5818: CALL_OW 297
5822: PUSH
5823: LD_INT 6
5825: LESS
5826: AND
5827: PUSH
5828: LD_VAR 0 3
5832: AND
5833: IFFALSE 5935
// begin ComExitVehicle ( tmp ) ;
5835: LD_VAR 0 3
5839: PPUSH
5840: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
5844: LD_VAR 0 3
5848: PPUSH
5849: LD_VAR 0 1
5853: PPUSH
5854: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5858: LD_INT 35
5860: PPUSH
5861: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5865: LD_VAR 0 1
5869: PPUSH
5870: CALL_OW 256
5874: PUSH
5875: LD_INT 1000
5877: EQUAL
5878: IFFALSE 5858
// ComEnterUnit ( tmp , i ) ;
5880: LD_VAR 0 3
5884: PPUSH
5885: LD_VAR 0 1
5889: PPUSH
5890: CALL_OW 120
// if GetFuel ( i ) <= 90 then
5894: LD_VAR 0 1
5898: PPUSH
5899: CALL_OW 261
5903: PUSH
5904: LD_INT 90
5906: LESSEQUAL
5907: IFFALSE 5923
// SetTag ( i , 2 ) else
5909: LD_VAR 0 1
5913: PPUSH
5914: LD_INT 2
5916: PPUSH
5917: CALL_OW 109
5921: GO 5935
// SetTag ( i , 0 ) ;
5923: LD_VAR 0 1
5927: PPUSH
5928: LD_INT 0
5930: PPUSH
5931: CALL_OW 109
// end ; end ;
5935: GO 5521
5937: POP
5938: POP
// end ;
5939: PPOPN 5
5941: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
5942: LD_EXP 20
5946: IFFALSE 6169
5948: GO 5950
5950: DISABLE
5951: LD_INT 0
5953: PPUSH
5954: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
5955: LD_EXP 50
5959: PPUSH
5960: LD_INT 79
5962: PPUSH
5963: LD_INT 155
5965: PPUSH
5966: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
5970: LD_EXP 50
5974: PPUSH
5975: LD_INT 16
5977: PPUSH
5978: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5982: LD_ADDR_VAR 0 2
5986: PUSH
5987: LD_EXP 49
5991: PPUSH
5992: LD_INT 50
5994: PUSH
5995: EMPTY
5996: LIST
5997: PPUSH
5998: CALL_OW 72
6002: ST_TO_ADDR
// for i in tmp do
6003: LD_ADDR_VAR 0 1
6007: PUSH
6008: LD_VAR 0 2
6012: PUSH
6013: FOR_IN
6014: IFFALSE 6048
// begin ComAgressiveMove ( i , 123 , 60 ) ;
6016: LD_VAR 0 1
6020: PPUSH
6021: LD_INT 123
6023: PPUSH
6024: LD_INT 60
6026: PPUSH
6027: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
6031: LD_VAR 0 1
6035: PPUSH
6036: LD_INT 153
6038: PPUSH
6039: LD_INT 103
6041: PPUSH
6042: CALL_OW 174
// end ;
6046: GO 6013
6048: POP
6049: POP
// repeat wait ( 0 0$1 ) ;
6050: LD_INT 35
6052: PPUSH
6053: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6057: LD_ADDR_VAR 0 2
6061: PUSH
6062: LD_EXP 49
6066: PPUSH
6067: LD_INT 50
6069: PUSH
6070: EMPTY
6071: LIST
6072: PPUSH
6073: CALL_OW 72
6077: ST_TO_ADDR
// for i in tmp do
6078: LD_ADDR_VAR 0 1
6082: PUSH
6083: LD_VAR 0 2
6087: PUSH
6088: FOR_IN
6089: IFFALSE 6160
// if not HasTask ( i ) then
6091: LD_VAR 0 1
6095: PPUSH
6096: CALL_OW 314
6100: NOT
6101: IFFALSE 6158
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
6103: LD_VAR 0 1
6107: PPUSH
6108: LD_INT 81
6110: PUSH
6111: LD_INT 3
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: PUSH
6118: LD_INT 3
6120: PUSH
6121: LD_INT 21
6123: PUSH
6124: LD_INT 3
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: PPUSH
6139: CALL_OW 69
6143: PPUSH
6144: LD_VAR 0 1
6148: PPUSH
6149: CALL_OW 74
6153: PPUSH
6154: CALL_OW 115
6158: GO 6088
6160: POP
6161: POP
6162: LD_VAR 0 2
6166: NOT
6167: IFFALSE 6050
// end ;
6169: PPOPN 2
6171: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6172: LD_INT 22
6174: PUSH
6175: LD_INT 3
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 32
6184: PUSH
6185: LD_INT 1
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PPUSH
6196: CALL_OW 69
6200: IFFALSE 6279
6202: GO 6204
6204: DISABLE
6205: LD_INT 0
6207: PPUSH
// begin enable ;
6208: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6209: LD_ADDR_VAR 0 1
6213: PUSH
6214: LD_INT 22
6216: PUSH
6217: LD_INT 3
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 32
6226: PUSH
6227: LD_INT 1
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PPUSH
6238: CALL_OW 69
6242: PUSH
6243: FOR_IN
6244: IFFALSE 6277
// if GetFuel ( i ) < 1 then
6246: LD_VAR 0 1
6250: PPUSH
6251: CALL_OW 261
6255: PUSH
6256: LD_INT 1
6258: LESS
6259: IFFALSE 6275
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6261: LD_VAR 0 1
6265: PPUSH
6266: CALL_OW 311
6270: PPUSH
6271: CALL_OW 121
6275: GO 6243
6277: POP
6278: POP
// end ;
6279: PPOPN 1
6281: END
// every 0 0$2 trigger IsDying ( Kurin ) or IsDead ( Kurin ) or IsDying ( Kirov ) or IsDead ( Kirov ) do var i , tmp , enemy , barracks ;
6282: LD_EXP 41
6286: PPUSH
6287: CALL_OW 303
6291: PUSH
6292: LD_EXP 41
6296: PPUSH
6297: CALL_OW 301
6301: OR
6302: PUSH
6303: LD_INT 71
6305: PPUSH
6306: CALL_OW 303
6310: OR
6311: PUSH
6312: LD_INT 71
6314: PPUSH
6315: CALL_OW 301
6319: OR
6320: IFFALSE 6643
6322: GO 6324
6324: DISABLE
6325: LD_INT 0
6327: PPUSH
6328: PPUSH
6329: PPUSH
6330: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 1 ] ) ;
6331: LD_ADDR_VAR 0 2
6335: PUSH
6336: LD_EXP 45
6340: PPUSH
6341: LD_INT 25
6343: PUSH
6344: LD_INT 1
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: PPUSH
6351: CALL_OW 72
6355: ST_TO_ADDR
// if not tmp then
6356: LD_VAR 0 2
6360: NOT
6361: IFFALSE 6365
// exit ;
6363: GO 6643
// barracks := HexInfo ( 166 , 116 ) ;
6365: LD_ADDR_VAR 0 4
6369: PUSH
6370: LD_INT 166
6372: PPUSH
6373: LD_INT 116
6375: PPUSH
6376: CALL_OW 428
6380: ST_TO_ADDR
// for i in tmp do
6381: LD_ADDR_VAR 0 1
6385: PUSH
6386: LD_VAR 0 2
6390: PUSH
6391: FOR_IN
6392: IFFALSE 6405
// ComExitBuilding ( i ) ;
6394: LD_VAR 0 1
6398: PPUSH
6399: CALL_OW 122
6403: GO 6391
6405: POP
6406: POP
// repeat wait ( 0 0$1 ) ;
6407: LD_INT 35
6409: PPUSH
6410: CALL_OW 67
// tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
6414: LD_ADDR_VAR 0 2
6418: PUSH
6419: LD_EXP 45
6423: PPUSH
6424: LD_INT 25
6426: PUSH
6427: LD_INT 1
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: LD_INT 50
6436: PUSH
6437: EMPTY
6438: LIST
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PPUSH
6444: CALL_OW 72
6448: ST_TO_ADDR
// enemy := FilterUnitsInArea ( kirovBaseArea , [ f_enemy , 6 ] ) ;
6449: LD_ADDR_VAR 0 3
6453: PUSH
6454: LD_INT 21
6456: PPUSH
6457: LD_INT 81
6459: PUSH
6460: LD_INT 6
6462: PUSH
6463: EMPTY
6464: LIST
6465: LIST
6466: PPUSH
6467: CALL_OW 70
6471: ST_TO_ADDR
// if enemy then
6472: LD_VAR 0 3
6476: IFFALSE 6521
// begin for i in tmp do
6478: LD_ADDR_VAR 0 1
6482: PUSH
6483: LD_VAR 0 2
6487: PUSH
6488: FOR_IN
6489: IFFALSE 6517
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6491: LD_VAR 0 1
6495: PPUSH
6496: LD_VAR 0 3
6500: PPUSH
6501: LD_VAR 0 1
6505: PPUSH
6506: CALL_OW 74
6510: PPUSH
6511: CALL_OW 115
6515: GO 6488
6517: POP
6518: POP
// end else
6519: GO 6636
// begin for i in tmp do
6521: LD_ADDR_VAR 0 1
6525: PUSH
6526: LD_VAR 0 2
6530: PUSH
6531: FOR_IN
6532: IFFALSE 6634
// if HasTask ( i ) or not IsInArea ( i , kirovBaseArea ) then
6534: LD_VAR 0 1
6538: PPUSH
6539: CALL_OW 314
6543: PUSH
6544: LD_VAR 0 1
6548: PPUSH
6549: LD_INT 21
6551: PPUSH
6552: CALL_OW 308
6556: NOT
6557: OR
6558: IFFALSE 6632
// if GetLives ( i ) < 600 and IsOk ( barracks ) and UnitsInside ( barracks ) < 6 then
6560: LD_VAR 0 1
6564: PPUSH
6565: CALL_OW 256
6569: PUSH
6570: LD_INT 600
6572: LESS
6573: PUSH
6574: LD_VAR 0 4
6578: PPUSH
6579: CALL_OW 302
6583: AND
6584: PUSH
6585: LD_VAR 0 4
6589: PPUSH
6590: CALL_OW 313
6594: PUSH
6595: LD_INT 6
6597: LESS
6598: AND
6599: IFFALSE 6617
// ComEnterUnit ( i , barracks ) else
6601: LD_VAR 0 1
6605: PPUSH
6606: LD_VAR 0 4
6610: PPUSH
6611: CALL_OW 120
6615: GO 6632
// ComMoveXY ( i , 162 , 109 ) ;
6617: LD_VAR 0 1
6621: PPUSH
6622: LD_INT 162
6624: PPUSH
6625: LD_INT 109
6627: PPUSH
6628: CALL_OW 111
6632: GO 6531
6634: POP
6635: POP
// end ; until not tmp ;
6636: LD_VAR 0 2
6640: NOT
6641: IFFALSE 6407
// end ;
6643: PPOPN 4
6645: END
// every 0 0$2 trigger IsDying ( Beria ) or IsDead ( Beria ) do var i , tmp ;
6646: LD_INT 106
6648: PPUSH
6649: CALL_OW 303
6653: PUSH
6654: LD_INT 106
6656: PPUSH
6657: CALL_OW 301
6661: OR
6662: IFFALSE 6757
6664: GO 6666
6666: DISABLE
6667: LD_INT 0
6669: PPUSH
6670: PPUSH
// begin tmp := UnitFilter ( beriaBaseSquad , [ f_class , 1 ] ) ;
6671: LD_ADDR_VAR 0 2
6675: PUSH
6676: LD_EXP 46
6680: PPUSH
6681: LD_INT 25
6683: PUSH
6684: LD_INT 1
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: PPUSH
6691: CALL_OW 72
6695: ST_TO_ADDR
// if not tmp then
6696: LD_VAR 0 2
6700: NOT
6701: IFFALSE 6705
// exit ;
6703: GO 6757
// for i in tmp do
6705: LD_ADDR_VAR 0 1
6709: PUSH
6710: LD_VAR 0 2
6714: PUSH
6715: FOR_IN
6716: IFFALSE 6755
// begin if IsInUnit ( i ) then
6718: LD_VAR 0 1
6722: PPUSH
6723: CALL_OW 310
6727: IFFALSE 6738
// ComExitBuilding ( i ) ;
6729: LD_VAR 0 1
6733: PPUSH
6734: CALL_OW 122
// AddComMoveXY ( i , 66 , 128 ) ;
6738: LD_VAR 0 1
6742: PPUSH
6743: LD_INT 66
6745: PPUSH
6746: LD_INT 128
6748: PPUSH
6749: CALL_OW 171
// end ;
6753: GO 6715
6755: POP
6756: POP
// end ; end_of_file
6757: PPOPN 2
6759: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6760: LD_INT 0
6762: PPUSH
6763: PPUSH
6764: PPUSH
// SetBName ( omikron , omikron ) ;
6765: LD_INT 64
6767: PPUSH
6768: LD_STRING omikron
6770: PPUSH
6771: CALL_OW 500
// uc_side := 4 ;
6775: LD_ADDR_OWVAR 20
6779: PUSH
6780: LD_INT 4
6782: ST_TO_ADDR
// uc_nation := 1 ;
6783: LD_ADDR_OWVAR 21
6787: PUSH
6788: LD_INT 1
6790: ST_TO_ADDR
// omicronSquad := [ ] ;
6791: LD_ADDR_EXP 52
6795: PUSH
6796: EMPTY
6797: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6798: LD_ADDR_VAR 0 2
6802: PUSH
6803: LD_INT 22
6805: PUSH
6806: LD_INT 4
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PUSH
6813: LD_INT 2
6815: PUSH
6816: LD_INT 30
6818: PUSH
6819: LD_INT 32
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 30
6828: PUSH
6829: LD_INT 31
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: LIST
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: PPUSH
6845: CALL_OW 69
6849: PUSH
6850: FOR_IN
6851: IFFALSE 6908
// begin PrepareHuman ( false , 1 , 1 ) ;
6853: LD_INT 0
6855: PPUSH
6856: LD_INT 1
6858: PPUSH
6859: LD_INT 1
6861: PPUSH
6862: CALL_OW 380
// un := CreateHuman ;
6866: LD_ADDR_VAR 0 3
6870: PUSH
6871: CALL_OW 44
6875: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6876: LD_ADDR_EXP 52
6880: PUSH
6881: LD_EXP 52
6885: PUSH
6886: LD_VAR 0 3
6890: UNION
6891: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6892: LD_VAR 0 3
6896: PPUSH
6897: LD_VAR 0 2
6901: PPUSH
6902: CALL_OW 52
// end ;
6906: GO 6850
6908: POP
6909: POP
// for i := 1 to 3 do
6910: LD_ADDR_VAR 0 2
6914: PUSH
6915: DOUBLE
6916: LD_INT 1
6918: DEC
6919: ST_TO_ADDR
6920: LD_INT 3
6922: PUSH
6923: FOR_TO
6924: IFFALSE 6979
// begin PrepareHuman ( false , 2 , 2 ) ;
6926: LD_INT 0
6928: PPUSH
6929: LD_INT 2
6931: PPUSH
6932: LD_INT 2
6934: PPUSH
6935: CALL_OW 380
// un := CreateHuman ;
6939: LD_ADDR_VAR 0 3
6943: PUSH
6944: CALL_OW 44
6948: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6949: LD_ADDR_EXP 52
6953: PUSH
6954: LD_EXP 52
6958: PUSH
6959: LD_VAR 0 3
6963: UNION
6964: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6965: LD_VAR 0 3
6969: PPUSH
6970: LD_INT 64
6972: PPUSH
6973: CALL_OW 52
// end ;
6977: GO 6923
6979: POP
6980: POP
// for i := 1 to 2 do
6981: LD_ADDR_VAR 0 2
6985: PUSH
6986: DOUBLE
6987: LD_INT 1
6989: DEC
6990: ST_TO_ADDR
6991: LD_INT 2
6993: PUSH
6994: FOR_TO
6995: IFFALSE 7134
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6997: LD_INT 4
6999: PPUSH
7000: LD_INT 1
7002: PPUSH
7003: LD_INT 2
7005: PPUSH
7006: LD_INT 2
7008: PPUSH
7009: LD_INT 1
7011: PPUSH
7012: LD_INT 3
7014: PPUSH
7015: LD_INT 100
7017: PPUSH
7018: CALL 386 0 7
// un := CreateVehicle ;
7022: LD_ADDR_VAR 0 3
7026: PUSH
7027: CALL_OW 45
7031: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7032: LD_ADDR_EXP 52
7036: PUSH
7037: LD_EXP 52
7041: PUSH
7042: LD_VAR 0 3
7046: UNION
7047: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
7048: LD_VAR 0 3
7052: PPUSH
7053: LD_INT 28
7055: PPUSH
7056: LD_INT 37
7058: PPUSH
7059: LD_INT 6
7061: PPUSH
7062: LD_INT 0
7064: PPUSH
7065: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
7069: LD_INT 0
7071: PPUSH
7072: LD_INT 3
7074: PPUSH
7075: LD_INT 2
7077: PPUSH
7078: CALL_OW 380
// un := CreateHuman ;
7082: LD_ADDR_VAR 0 3
7086: PUSH
7087: CALL_OW 44
7091: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7092: LD_ADDR_EXP 52
7096: PUSH
7097: LD_EXP 52
7101: PUSH
7102: LD_VAR 0 3
7106: UNION
7107: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
7108: LD_VAR 0 3
7112: PPUSH
7113: LD_EXP 52
7117: PUSH
7118: LD_EXP 52
7122: PUSH
7123: LD_INT 1
7125: MINUS
7126: ARRAY
7127: PPUSH
7128: CALL_OW 52
// end ;
7132: GO 6994
7134: POP
7135: POP
// end ;
7136: LD_VAR 0 1
7140: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
7141: LD_INT 0
7143: PPUSH
7144: PPUSH
7145: PPUSH
7146: PPUSH
// uc_side := 4 ;
7147: LD_ADDR_OWVAR 20
7151: PUSH
7152: LD_INT 4
7154: ST_TO_ADDR
// uc_nation := 1 ;
7155: LD_ADDR_OWVAR 21
7159: PUSH
7160: LD_INT 1
7162: ST_TO_ADDR
// tmp := [ ] ;
7163: LD_ADDR_VAR 0 4
7167: PUSH
7168: EMPTY
7169: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7170: LD_INT 4
7172: PPUSH
7173: LD_INT 1
7175: PPUSH
7176: LD_INT 2
7178: PPUSH
7179: LD_INT 1
7181: PPUSH
7182: LD_INT 1
7184: PPUSH
7185: LD_INT 4
7187: PPUSH
7188: LD_INT 77
7190: PPUSH
7191: CALL 386 0 7
// un := CreateVehicle ;
7195: LD_ADDR_VAR 0 3
7199: PUSH
7200: CALL_OW 45
7204: ST_TO_ADDR
// tmp := tmp union un ;
7205: LD_ADDR_VAR 0 4
7209: PUSH
7210: LD_VAR 0 4
7214: PUSH
7215: LD_VAR 0 3
7219: UNION
7220: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7221: LD_VAR 0 3
7225: PPUSH
7226: LD_INT 2
7228: PPUSH
7229: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
7233: LD_VAR 0 3
7237: PPUSH
7238: LD_INT 106
7240: PPUSH
7241: LD_INT 3
7243: PPUSH
7244: LD_INT 0
7246: PPUSH
7247: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
7251: LD_INT 0
7253: PPUSH
7254: LD_INT 3
7256: PPUSH
7257: LD_INT 2
7259: PPUSH
7260: CALL_OW 380
// un := CreateHuman ;
7264: LD_ADDR_VAR 0 3
7268: PUSH
7269: CALL_OW 44
7273: ST_TO_ADDR
// tmp := tmp union un ;
7274: LD_ADDR_VAR 0 4
7278: PUSH
7279: LD_VAR 0 4
7283: PUSH
7284: LD_VAR 0 3
7288: UNION
7289: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7290: LD_VAR 0 3
7294: PPUSH
7295: LD_VAR 0 4
7299: PUSH
7300: LD_VAR 0 4
7304: PUSH
7305: LD_INT 1
7307: MINUS
7308: ARRAY
7309: PPUSH
7310: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7314: LD_VAR 0 3
7318: PPUSH
7319: LD_INT 109
7321: PPUSH
7322: LD_INT 9
7324: PPUSH
7325: CALL_OW 111
// wait ( 0 0$1 ) ;
7329: LD_INT 35
7331: PPUSH
7332: CALL_OW 67
// for i := 1 to 2 do
7336: LD_ADDR_VAR 0 2
7340: PUSH
7341: DOUBLE
7342: LD_INT 1
7344: DEC
7345: ST_TO_ADDR
7346: LD_INT 2
7348: PUSH
7349: FOR_TO
7350: IFFALSE 7414
// begin PrepareHuman ( false , 1 , 2 ) ;
7352: LD_INT 0
7354: PPUSH
7355: LD_INT 1
7357: PPUSH
7358: LD_INT 2
7360: PPUSH
7361: CALL_OW 380
// un := CreateHuman ;
7365: LD_ADDR_VAR 0 3
7369: PUSH
7370: CALL_OW 44
7374: ST_TO_ADDR
// tmp := tmp union un ;
7375: LD_ADDR_VAR 0 4
7379: PUSH
7380: LD_VAR 0 4
7384: PUSH
7385: LD_VAR 0 3
7389: UNION
7390: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7391: LD_VAR 0 3
7395: PPUSH
7396: LD_INT 105
7398: PPUSH
7399: LD_INT 2
7401: PPUSH
7402: LD_INT 2
7404: PPUSH
7405: LD_INT 0
7407: PPUSH
7408: CALL_OW 50
// end ;
7412: GO 7349
7414: POP
7415: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7416: LD_VAR 0 4
7420: PPUSH
7421: LD_INT 26
7423: PPUSH
7424: LD_INT 35
7426: PPUSH
7427: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7431: LD_INT 35
7433: PPUSH
7434: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7438: LD_VAR 0 4
7442: PPUSH
7443: LD_INT 50
7445: PUSH
7446: EMPTY
7447: LIST
7448: PPUSH
7449: CALL_OW 72
7453: NOT
7454: IFFALSE 7458
// exit ;
7456: GO 7585
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7458: LD_VAR 0 4
7462: PPUSH
7463: LD_INT 91
7465: PUSH
7466: LD_INT 64
7468: PUSH
7469: LD_INT 12
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: PPUSH
7477: CALL_OW 72
7481: PUSH
7482: LD_VAR 0 4
7486: EQUAL
7487: IFFALSE 7431
// omicronSquad := omicronSquad union tmp ;
7489: LD_ADDR_EXP 52
7493: PUSH
7494: LD_EXP 52
7498: PUSH
7499: LD_VAR 0 4
7503: UNION
7504: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7505: LD_ADDR_VAR 0 2
7509: PUSH
7510: LD_VAR 0 4
7514: PPUSH
7515: LD_INT 25
7517: PUSH
7518: LD_INT 1
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: PPUSH
7525: CALL_OW 72
7529: PUSH
7530: FOR_IN
7531: IFFALSE 7583
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7533: LD_VAR 0 2
7537: PPUSH
7538: LD_INT 22
7540: PUSH
7541: LD_INT 4
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PUSH
7548: LD_INT 30
7550: PUSH
7551: LD_INT 4
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PPUSH
7562: CALL_OW 69
7566: PPUSH
7567: LD_VAR 0 2
7571: PPUSH
7572: CALL_OW 74
7576: PPUSH
7577: CALL_OW 120
7581: GO 7530
7583: POP
7584: POP
// end ;
7585: LD_VAR 0 1
7589: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7590: LD_EXP 13
7594: NOT
7595: IFFALSE 8166
7597: GO 7599
7599: DISABLE
7600: LD_INT 0
7602: PPUSH
7603: PPUSH
7604: PPUSH
7605: PPUSH
// begin enable ;
7606: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7607: LD_ADDR_VAR 0 2
7611: PUSH
7612: LD_INT 22
7614: PUSH
7615: LD_INT 4
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 21
7624: PUSH
7625: LD_INT 3
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: LD_INT 3
7634: PUSH
7635: LD_INT 24
7637: PUSH
7638: LD_INT 1000
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: LIST
7653: PPUSH
7654: CALL_OW 69
7658: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7659: LD_ADDR_VAR 0 3
7663: PUSH
7664: LD_EXP 52
7668: PPUSH
7669: LD_INT 25
7671: PUSH
7672: LD_INT 2
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: PPUSH
7679: CALL_OW 72
7683: ST_TO_ADDR
// if filter and tmp then
7684: LD_VAR 0 2
7688: PUSH
7689: LD_VAR 0 3
7693: AND
7694: IFFALSE 7767
// begin for i in tmp do
7696: LD_ADDR_VAR 0 1
7700: PUSH
7701: LD_VAR 0 3
7705: PUSH
7706: FOR_IN
7707: IFFALSE 7763
// if IsInUnit ( i ) then
7709: LD_VAR 0 1
7713: PPUSH
7714: CALL_OW 310
7718: IFFALSE 7731
// ComExitBuilding ( i ) else
7720: LD_VAR 0 1
7724: PPUSH
7725: CALL_OW 122
7729: GO 7761
// if not HasTask ( i ) then
7731: LD_VAR 0 1
7735: PPUSH
7736: CALL_OW 314
7740: NOT
7741: IFFALSE 7761
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7743: LD_VAR 0 1
7747: PPUSH
7748: LD_VAR 0 2
7752: PUSH
7753: LD_INT 1
7755: ARRAY
7756: PPUSH
7757: CALL_OW 130
7761: GO 7706
7763: POP
7764: POP
// end else
7765: GO 7838
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7767: LD_VAR 0 3
7771: PPUSH
7772: LD_INT 3
7774: PUSH
7775: LD_INT 54
7777: PUSH
7778: EMPTY
7779: LIST
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: PPUSH
7785: CALL_OW 72
7789: IFFALSE 7838
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7791: LD_ADDR_VAR 0 1
7795: PUSH
7796: LD_VAR 0 3
7800: PPUSH
7801: LD_INT 3
7803: PUSH
7804: LD_INT 54
7806: PUSH
7807: EMPTY
7808: LIST
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PPUSH
7814: CALL_OW 72
7818: PUSH
7819: FOR_IN
7820: IFFALSE 7836
// ComEnterUnit ( i , omikron ) ;
7822: LD_VAR 0 1
7826: PPUSH
7827: LD_INT 64
7829: PPUSH
7830: CALL_OW 120
7834: GO 7819
7836: POP
7837: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7838: LD_ADDR_VAR 0 2
7842: PUSH
7843: LD_EXP 52
7847: PPUSH
7848: LD_INT 21
7850: PUSH
7851: LD_INT 2
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PPUSH
7858: CALL_OW 72
7862: ST_TO_ADDR
// if not filter then
7863: LD_VAR 0 2
7867: NOT
7868: IFFALSE 7872
// exit ;
7870: GO 8166
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7872: LD_ADDR_VAR 0 4
7876: PUSH
7877: LD_INT 13
7879: PPUSH
7880: LD_INT 81
7882: PUSH
7883: LD_INT 4
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PPUSH
7890: CALL_OW 70
7894: ST_TO_ADDR
// if enemy then
7895: LD_VAR 0 4
7899: IFFALSE 8166
// begin for i in filter do
7901: LD_ADDR_VAR 0 1
7905: PUSH
7906: LD_VAR 0 2
7910: PUSH
7911: FOR_IN
7912: IFFALSE 8164
// begin tmp := IsDrivenBy ( i ) ;
7914: LD_ADDR_VAR 0 3
7918: PUSH
7919: LD_VAR 0 1
7923: PPUSH
7924: CALL_OW 311
7928: ST_TO_ADDR
// if not tmp then
7929: LD_VAR 0 3
7933: NOT
7934: IFFALSE 7938
// continue ;
7936: GO 7911
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7938: LD_VAR 0 1
7942: PPUSH
7943: CALL_OW 256
7947: PUSH
7948: LD_INT 600
7950: GREATEREQUAL
7951: PUSH
7952: LD_VAR 0 1
7956: PPUSH
7957: CALL_OW 110
7961: PUSH
7962: LD_INT 1
7964: NONEQUAL
7965: AND
7966: IFFALSE 7992
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7968: LD_VAR 0 1
7972: PPUSH
7973: LD_VAR 0 4
7977: PPUSH
7978: LD_VAR 0 1
7982: PPUSH
7983: CALL_OW 74
7987: PPUSH
7988: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7992: LD_VAR 0 1
7996: PPUSH
7997: CALL_OW 256
8001: PUSH
8002: LD_INT 600
8004: LESS
8005: PUSH
8006: LD_VAR 0 1
8010: PPUSH
8011: CALL_OW 110
8015: PUSH
8016: LD_INT 1
8018: NONEQUAL
8019: AND
8020: IFFALSE 8049
// begin SetTag ( i , 1 ) ;
8022: LD_VAR 0 1
8026: PPUSH
8027: LD_INT 1
8029: PPUSH
8030: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
8034: LD_VAR 0 1
8038: PPUSH
8039: LD_INT 27
8041: PPUSH
8042: LD_INT 35
8044: PPUSH
8045: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
8049: LD_VAR 0 1
8053: PPUSH
8054: CALL_OW 110
8058: PUSH
8059: LD_INT 1
8061: EQUAL
8062: PUSH
8063: LD_VAR 0 1
8067: PPUSH
8068: LD_INT 27
8070: PPUSH
8071: LD_INT 35
8073: PPUSH
8074: CALL_OW 297
8078: PUSH
8079: LD_INT 6
8081: LESS
8082: AND
8083: PUSH
8084: LD_VAR 0 3
8088: AND
8089: IFFALSE 8162
// begin ComExitVehicle ( tmp ) ;
8091: LD_VAR 0 3
8095: PPUSH
8096: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8100: LD_VAR 0 3
8104: PPUSH
8105: LD_VAR 0 1
8109: PPUSH
8110: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8114: LD_INT 35
8116: PPUSH
8117: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8121: LD_VAR 0 1
8125: PPUSH
8126: CALL_OW 256
8130: PUSH
8131: LD_INT 1000
8133: EQUAL
8134: IFFALSE 8114
// ComEnterUnit ( tmp , i ) ;
8136: LD_VAR 0 3
8140: PPUSH
8141: LD_VAR 0 1
8145: PPUSH
8146: CALL_OW 120
// SetTag ( i , 0 ) ;
8150: LD_VAR 0 1
8154: PPUSH
8155: LD_INT 0
8157: PPUSH
8158: CALL_OW 109
// end ; end ;
8162: GO 7911
8164: POP
8165: POP
// end ; end ;
8166: PPOPN 4
8168: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
8169: LD_EXP 13
8173: IFFALSE 8317
8175: GO 8177
8177: DISABLE
8178: LD_INT 0
8180: PPUSH
8181: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
8182: LD_ADDR_VAR 0 2
8186: PUSH
8187: LD_EXP 52
8191: PPUSH
8192: LD_INT 21
8194: PUSH
8195: LD_INT 1
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: PUSH
8202: LD_INT 50
8204: PUSH
8205: EMPTY
8206: LIST
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: PPUSH
8212: CALL_OW 72
8216: ST_TO_ADDR
// if not tmp then
8217: LD_VAR 0 2
8221: NOT
8222: IFFALSE 8226
// exit ;
8224: GO 8317
// repeat wait ( 0 0$1 ) ;
8226: LD_INT 35
8228: PPUSH
8229: CALL_OW 67
// for i in tmp do
8233: LD_ADDR_VAR 0 1
8237: PUSH
8238: LD_VAR 0 2
8242: PUSH
8243: FOR_IN
8244: IFFALSE 8308
// begin ComExit ( i ) ;
8246: LD_VAR 0 1
8250: PPUSH
8251: CALL 77322 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
8255: LD_VAR 0 1
8259: PPUSH
8260: LD_INT 14
8262: PPUSH
8263: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
8267: LD_VAR 0 1
8271: PPUSH
8272: LD_INT 14
8274: PPUSH
8275: CALL_OW 308
8279: IFFALSE 8306
// begin tmp := tmp diff i ;
8281: LD_ADDR_VAR 0 2
8285: PUSH
8286: LD_VAR 0 2
8290: PUSH
8291: LD_VAR 0 1
8295: DIFF
8296: ST_TO_ADDR
// RemoveUnit ( i ) ;
8297: LD_VAR 0 1
8301: PPUSH
8302: CALL_OW 64
// end ; end ;
8306: GO 8243
8308: POP
8309: POP
// until not tmp ;
8310: LD_VAR 0 2
8314: NOT
8315: IFFALSE 8226
// end ; end_of_file
8317: PPOPN 2
8319: END
// export function Action ; var i , un , veh , tmp ; begin
8320: LD_INT 0
8322: PPUSH
8323: PPUSH
8324: PPUSH
8325: PPUSH
8326: PPUSH
// InGameOn ;
8327: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8331: LD_INT 179
8333: PPUSH
8334: LD_INT 5
8336: PPUSH
8337: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8341: LD_ADDR_VAR 0 4
8345: PUSH
8346: LD_INT 2
8348: PPUSH
8349: LD_INT 2
8351: PPUSH
8352: LD_INT 12
8354: PPUSH
8355: LD_INT 1
8357: PPUSH
8358: LD_INT 1
8360: PPUSH
8361: LD_INT 24
8363: PPUSH
8364: LD_INT 33
8366: PPUSH
8367: CALL 386 0 7
8371: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8372: LD_VAR 0 4
8376: PPUSH
8377: LD_INT 2
8379: PPUSH
8380: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8384: LD_VAR 0 4
8388: PPUSH
8389: LD_INT 178
8391: PPUSH
8392: LD_INT 2
8394: PPUSH
8395: LD_INT 0
8397: PPUSH
8398: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8402: LD_EXP 26
8406: PPUSH
8407: LD_VAR 0 4
8411: PPUSH
8412: CALL_OW 52
// if Kamil then
8416: LD_EXP 30
8420: IFFALSE 8455
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8422: LD_EXP 30
8426: PPUSH
8427: LD_INT 207
8429: PPUSH
8430: LD_INT 37
8432: PPUSH
8433: LD_INT 0
8435: PPUSH
8436: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8440: LD_EXP 30
8444: PPUSH
8445: LD_INT 211
8447: PPUSH
8448: LD_INT 38
8450: PPUSH
8451: CALL_OW 118
// end ; if Sophia then
8455: LD_EXP 32
8459: IFFALSE 8494
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8461: LD_EXP 32
8465: PPUSH
8466: LD_INT 209
8468: PPUSH
8469: LD_INT 40
8471: PPUSH
8472: LD_INT 0
8474: PPUSH
8475: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8479: LD_EXP 32
8483: PPUSH
8484: LD_INT 211
8486: PPUSH
8487: LD_INT 38
8489: PPUSH
8490: CALL_OW 118
// end ; if Givi then
8494: LD_EXP 27
8498: IFFALSE 8533
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8500: LD_EXP 27
8504: PPUSH
8505: LD_INT 201
8507: PPUSH
8508: LD_INT 34
8510: PPUSH
8511: LD_INT 0
8513: PPUSH
8514: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8518: LD_EXP 27
8522: PPUSH
8523: LD_INT 206
8525: PPUSH
8526: LD_INT 36
8528: PPUSH
8529: CALL_OW 118
// end ; if Ibrahim then
8533: LD_EXP 29
8537: IFFALSE 8572
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8539: LD_EXP 29
8543: PPUSH
8544: LD_INT 202
8546: PPUSH
8547: LD_INT 39
8549: PPUSH
8550: LD_INT 0
8552: PPUSH
8553: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8557: LD_EXP 29
8561: PPUSH
8562: LD_INT 206
8564: PPUSH
8565: LD_INT 36
8567: PPUSH
8568: CALL_OW 118
// end ; if Markov then
8572: LD_EXP 33
8576: IFFALSE 8663
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8578: LD_ADDR_VAR 0 4
8582: PUSH
8583: LD_INT 2
8585: PPUSH
8586: LD_INT 2
8588: PPUSH
8589: LD_INT 13
8591: PPUSH
8592: LD_INT 1
8594: PPUSH
8595: LD_INT 1
8597: PPUSH
8598: LD_INT 25
8600: PPUSH
8601: LD_INT 80
8603: PUSH
8604: LD_INT 20
8606: PUSH
8607: LD_OWVAR 67
8611: MUL
8612: MINUS
8613: PPUSH
8614: CALL 386 0 7
8618: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8619: LD_VAR 0 4
8623: PPUSH
8624: LD_INT 2
8626: PPUSH
8627: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8631: LD_VAR 0 4
8635: PPUSH
8636: LD_INT 197
8638: PPUSH
8639: LD_INT 35
8641: PPUSH
8642: LD_INT 0
8644: PPUSH
8645: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8649: LD_EXP 33
8653: PPUSH
8654: LD_VAR 0 4
8658: PPUSH
8659: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8663: LD_ADDR_VAR 0 5
8667: PUSH
8668: LD_EXP 31
8672: PUSH
8673: LD_EXP 38
8677: UNION
8678: ST_TO_ADDR
// for i in tmp do
8679: LD_ADDR_VAR 0 2
8683: PUSH
8684: LD_VAR 0 5
8688: PUSH
8689: FOR_IN
8690: IFFALSE 8724
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8692: LD_VAR 0 2
8696: PPUSH
8697: LD_INT 203
8699: PPUSH
8700: LD_INT 41
8702: PPUSH
8703: LD_INT 6
8705: PPUSH
8706: LD_INT 0
8708: PPUSH
8709: CALL_OW 50
// ComHold ( i ) ;
8713: LD_VAR 0 2
8717: PPUSH
8718: CALL_OW 140
// end ;
8722: GO 8689
8724: POP
8725: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8726: LD_INT 22
8728: PUSH
8729: LD_INT 2
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: PUSH
8736: LD_INT 25
8738: PUSH
8739: LD_INT 2
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: PPUSH
8750: CALL_OW 69
8754: NOT
8755: IFFALSE 8769
// SetClass ( Heike , 2 ) ;
8757: LD_EXP 26
8761: PPUSH
8762: LD_INT 2
8764: PPUSH
8765: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8769: LD_EXP 26
8773: PPUSH
8774: LD_INT 183
8776: PPUSH
8777: LD_INT 12
8779: PPUSH
8780: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8784: LD_EXP 26
8788: PPUSH
8789: LD_INT 188
8791: PPUSH
8792: LD_INT 20
8794: PPUSH
8795: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8799: LD_EXP 26
8803: PPUSH
8804: LD_INT 191
8806: PPUSH
8807: LD_INT 25
8809: PPUSH
8810: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8814: LD_EXP 26
8818: PPUSH
8819: LD_INT 203
8821: PPUSH
8822: LD_INT 29
8824: PPUSH
8825: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8829: LD_EXP 26
8833: PPUSH
8834: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8838: LD_INT 35
8840: PPUSH
8841: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8845: LD_EXP 26
8849: PPUSH
8850: CALL_OW 310
8854: NOT
8855: IFFALSE 8838
// CenterOnUnits ( Heike ) ;
8857: LD_EXP 26
8861: PPUSH
8862: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8866: LD_ADDR_VAR 0 5
8870: PUSH
8871: LD_INT 22
8873: PUSH
8874: LD_INT 2
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: PUSH
8881: LD_INT 21
8883: PUSH
8884: LD_INT 1
8886: PUSH
8887: EMPTY
8888: LIST
8889: LIST
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: PPUSH
8895: CALL_OW 69
8899: PUSH
8900: LD_EXP 26
8904: PUSH
8905: LD_EXP 33
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: DIFF
8914: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8915: LD_VAR 0 5
8919: PPUSH
8920: LD_EXP 26
8924: PPUSH
8925: CALL_OW 119
// if Givi then
8929: LD_EXP 27
8933: IFFALSE 8951
// ComTurnUnit ( Heike , Givi ) else
8935: LD_EXP 26
8939: PPUSH
8940: LD_EXP 27
8944: PPUSH
8945: CALL_OW 119
8949: GO 8969
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8951: LD_EXP 26
8955: PPUSH
8956: LD_VAR 0 5
8960: PUSH
8961: LD_INT 1
8963: ARRAY
8964: PPUSH
8965: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8969: LD_EXP 26
8973: PPUSH
8974: LD_STRING DH-Start-1
8976: PPUSH
8977: CALL_OW 88
// if Givi then
8981: LD_EXP 27
8985: IFFALSE 9032
// begin Say ( Givi , DG-Start-2 ) ;
8987: LD_EXP 27
8991: PPUSH
8992: LD_STRING DG-Start-2
8994: PPUSH
8995: CALL_OW 88
// if not Mike then
8999: LD_EXP 28
9003: NOT
9004: IFFALSE 9030
// begin Say ( Givi , DG-Start-b-3 ) ;
9006: LD_EXP 27
9010: PPUSH
9011: LD_STRING DG-Start-b-3
9013: PPUSH
9014: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
9018: LD_EXP 26
9022: PPUSH
9023: LD_STRING DH-Start-b-4
9025: PPUSH
9026: CALL_OW 88
// end ; end else
9030: GO 9097
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
9032: LD_EXP 38
9036: PPUSH
9037: LD_INT 26
9039: PUSH
9040: LD_INT 1
9042: PUSH
9043: EMPTY
9044: LIST
9045: LIST
9046: PPUSH
9047: CALL_OW 72
9051: PUSH
9052: LD_INT 1
9054: ARRAY
9055: PPUSH
9056: LD_STRING DArm-Start-a-2
9058: PPUSH
9059: CALL_OW 88
9063: NOT
9064: IFFALSE 9097
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
9066: LD_EXP 38
9070: PPUSH
9071: LD_INT 26
9073: PUSH
9074: LD_INT 2
9076: PUSH
9077: EMPTY
9078: LIST
9079: LIST
9080: PPUSH
9081: CALL_OW 72
9085: PUSH
9086: LD_INT 1
9088: ARRAY
9089: PPUSH
9090: LD_STRING DArf-Start-a-2
9092: PPUSH
9093: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
9097: LD_EXP 26
9101: PPUSH
9102: LD_INT 211
9104: PPUSH
9105: LD_INT 38
9107: PPUSH
9108: CALL_OW 118
// wait ( 0 0$1 ) ;
9112: LD_INT 35
9114: PPUSH
9115: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
9119: LD_EXP 26
9123: PPUSH
9124: LD_STRING DH-Start-3
9126: PPUSH
9127: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9131: LD_EXP 26
9135: PPUSH
9136: LD_STRING DH-Start-4
9138: PPUSH
9139: CALL_OW 88
// InGameOff ;
9143: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
9147: LD_STRING Prepare
9149: PPUSH
9150: CALL_OW 337
// SaveForQuickRestart ;
9154: CALL_OW 22
// wait ( 0 0$10 ) ;
9158: LD_INT 350
9160: PPUSH
9161: CALL_OW 67
// if not Aviradze then
9165: LD_EXP 36
9169: NOT
9170: IFFALSE 9174
// exit ;
9172: GO 9414
// SetDir ( Aviradze , 4 ) ;
9174: LD_EXP 36
9178: PPUSH
9179: LD_INT 4
9181: PPUSH
9182: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
9186: LD_EXP 36
9190: PPUSH
9191: LD_INT 225
9193: PPUSH
9194: LD_INT 33
9196: PPUSH
9197: LD_INT 0
9199: PPUSH
9200: CALL_OW 48
// for i := 1 to 2 do
9204: LD_ADDR_VAR 0 2
9208: PUSH
9209: DOUBLE
9210: LD_INT 1
9212: DEC
9213: ST_TO_ADDR
9214: LD_INT 2
9216: PUSH
9217: FOR_TO
9218: IFFALSE 9349
// begin uc_side := 2 ;
9220: LD_ADDR_OWVAR 20
9224: PUSH
9225: LD_INT 2
9227: ST_TO_ADDR
// uc_nation := 0 ;
9228: LD_ADDR_OWVAR 21
9232: PUSH
9233: LD_INT 0
9235: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9236: LD_INT 0
9238: PPUSH
9239: LD_INT 12
9241: PPUSH
9242: LD_INT 1
9244: PPUSH
9245: CALL_OW 380
// hc_gallery :=  ;
9249: LD_ADDR_OWVAR 33
9253: PUSH
9254: LD_STRING 
9256: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
9257: LD_ADDR_OWVAR 26
9261: PUSH
9262: LD_STRING Artudito
9264: PUSH
9265: LD_STRING Textur
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: PUSH
9272: LD_VAR 0 2
9276: ARRAY
9277: ST_TO_ADDR
// un := CreateHuman ;
9278: LD_ADDR_VAR 0 3
9282: PUSH
9283: CALL_OW 44
9287: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9288: LD_VAR 0 3
9292: PPUSH
9293: LD_INT 224
9295: PUSH
9296: LD_INT 226
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: PUSH
9303: LD_VAR 0 2
9307: ARRAY
9308: PPUSH
9309: LD_INT 31
9311: PUSH
9312: LD_INT 35
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: LD_VAR 0 2
9323: ARRAY
9324: PPUSH
9325: LD_INT 0
9327: PPUSH
9328: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9332: LD_VAR 0 3
9336: PPUSH
9337: LD_INT 215
9339: PPUSH
9340: LD_INT 36
9342: PPUSH
9343: CALL_OW 111
// end ;
9347: GO 9217
9349: POP
9350: POP
// hc_name :=  ;
9351: LD_ADDR_OWVAR 26
9355: PUSH
9356: LD_STRING 
9358: ST_TO_ADDR
// InitHc ;
9359: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9363: LD_EXP 36
9367: PPUSH
9368: LD_INT 215
9370: PPUSH
9371: LD_INT 36
9373: PPUSH
9374: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
9378: LD_EXP 36
9382: PPUSH
9383: LD_STRING DA-Arrive-1
9385: PPUSH
9386: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
9390: LD_EXP 26
9394: PPUSH
9395: LD_STRING DH-Arrive-2
9397: PPUSH
9398: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
9402: LD_EXP 36
9406: PPUSH
9407: LD_STRING DA-Arrive-3
9409: PPUSH
9410: CALL_OW 88
// end ;
9414: LD_VAR 0 1
9418: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh , p , sex ;
9419: LD_EXP 3
9423: IFFALSE 10937
9425: GO 9427
9427: DISABLE
9428: LD_INT 0
9430: PPUSH
9431: PPUSH
9432: PPUSH
9433: PPUSH
9434: PPUSH
// begin DialogueOn ;
9435: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9439: LD_EXP 26
9443: PPUSH
9444: LD_STRING DH-base-1
9446: PPUSH
9447: CALL_OW 88
// if Markov then
9451: LD_EXP 33
9455: IFFALSE 9507
// begin Say ( Markov , DMar-base-2 ) ;
9457: LD_EXP 33
9461: PPUSH
9462: LD_STRING DMar-base-2
9464: PPUSH
9465: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9469: LD_EXP 33
9473: PPUSH
9474: LD_STRING DMar-base-3
9476: PPUSH
9477: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9481: LD_EXP 26
9485: PPUSH
9486: LD_STRING DH-base-4
9488: PPUSH
9489: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9493: LD_EXP 33
9497: PPUSH
9498: LD_STRING DMar-base-5
9500: PPUSH
9501: CALL_OW 88
// end else
9505: GO 9584
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9507: LD_EXP 38
9511: PPUSH
9512: LD_INT 26
9514: PUSH
9515: LD_INT 1
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PPUSH
9522: CALL_OW 72
9526: PUSH
9527: LD_INT 1
9529: ARRAY
9530: PPUSH
9531: LD_STRING DArm-base-a-2
9533: PPUSH
9534: CALL_OW 88
9538: NOT
9539: IFFALSE 9572
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9541: LD_EXP 38
9545: PPUSH
9546: LD_INT 26
9548: PUSH
9549: LD_INT 2
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: PPUSH
9556: CALL_OW 72
9560: PUSH
9561: LD_INT 1
9563: ARRAY
9564: PPUSH
9565: LD_STRING DArf-base-a-2
9567: PPUSH
9568: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9572: LD_EXP 26
9576: PPUSH
9577: LD_STRING DH-base-a-3
9579: PPUSH
9580: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9584: LD_EXP 36
9588: PPUSH
9589: LD_STRING DA-base-6
9591: PPUSH
9592: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9596: LD_EXP 36
9600: PPUSH
9601: LD_STRING DA-base-7
9603: PPUSH
9604: CALL_OW 88
// DialogueOff ;
9608: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9612: LD_STRING Flamethrower
9614: PPUSH
9615: CALL_OW 337
// wait ( 2 2$00 ) ;
9619: LD_INT 4200
9621: PPUSH
9622: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9626: LD_EXP 35
9630: PUSH
9631: LD_EXP 28
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PPUSH
9640: LD_INT 203
9642: PPUSH
9643: LD_INT 37
9645: PPUSH
9646: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9650: LD_INT 22
9652: PUSH
9653: LD_INT 2
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: PUSH
9660: LD_INT 92
9662: PUSH
9663: LD_INT 203
9665: PUSH
9666: LD_INT 37
9668: PUSH
9669: LD_INT 10
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: PPUSH
9682: CALL_OW 69
9686: NOT
9687: IFFALSE 9727
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9689: LD_EXP 35
9693: PUSH
9694: LD_EXP 28
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: PPUSH
9703: LD_EXP 26
9707: PPUSH
9708: CALL_OW 250
9712: PPUSH
9713: LD_EXP 26
9717: PPUSH
9718: CALL_OW 251
9722: PPUSH
9723: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9727: LD_INT 35
9729: PPUSH
9730: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9734: LD_INT 2
9736: PPUSH
9737: LD_EXP 35
9741: PPUSH
9742: CALL_OW 292
9746: PUSH
9747: LD_EXP 35
9751: PPUSH
9752: LD_EXP 26
9756: PPUSH
9757: CALL_OW 296
9761: PUSH
9762: LD_INT 8
9764: LESS
9765: PUSH
9766: LD_EXP 35
9770: PPUSH
9771: LD_INT 22
9773: PUSH
9774: LD_INT 2
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: PUSH
9781: LD_INT 21
9783: PUSH
9784: LD_INT 3
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PPUSH
9795: CALL_OW 69
9799: PPUSH
9800: LD_EXP 35
9804: PPUSH
9805: CALL_OW 74
9809: PPUSH
9810: CALL_OW 296
9814: PUSH
9815: LD_INT 7
9817: LESS
9818: OR
9819: AND
9820: PUSH
9821: LD_EXP 35
9825: PPUSH
9826: LD_INT 10
9828: PPUSH
9829: CALL_OW 308
9833: NOT
9834: AND
9835: IFFALSE 9727
// InGameOn ;
9837: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9841: LD_EXP 35
9845: PPUSH
9846: CALL_OW 87
// if IsInUnit ( Heike ) then
9850: LD_EXP 26
9854: PPUSH
9855: CALL_OW 310
9859: IFFALSE 9870
// ComExitBuilding ( Heike ) ;
9861: LD_EXP 26
9865: PPUSH
9866: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9870: LD_EXP 35
9874: PUSH
9875: LD_EXP 28
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PPUSH
9884: LD_EXP 26
9888: PPUSH
9889: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9893: LD_EXP 26
9897: PPUSH
9898: LD_EXP 35
9902: PPUSH
9903: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9907: LD_INT 22
9909: PUSH
9910: LD_INT 2
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: PUSH
9917: LD_INT 91
9919: PUSH
9920: LD_EXP 35
9924: PUSH
9925: LD_INT 10
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: LIST
9932: PUSH
9933: LD_INT 21
9935: PUSH
9936: LD_INT 3
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: LIST
9947: PPUSH
9948: CALL_OW 69
9952: IFFALSE 9978
// begin Say ( Kurt , DKs-scout-1 ) ;
9954: LD_EXP 35
9958: PPUSH
9959: LD_STRING DKs-scout-1
9961: PPUSH
9962: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9966: LD_EXP 26
9970: PPUSH
9971: LD_STRING DH-scout-2
9973: PPUSH
9974: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
9978: LD_EXP 26
9982: PPUSH
9983: CALL_OW 85
// if IsInUnit ( Heike ) then
9987: LD_EXP 26
9991: PPUSH
9992: CALL_OW 310
9996: IFFALSE 10007
// ComExit ( Heike ) ;
9998: LD_EXP 26
10002: PPUSH
10003: CALL 77322 0 1
// repeat wait ( 0 0$1 ) ;
10007: LD_INT 35
10009: PPUSH
10010: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
10014: LD_EXP 26
10018: PPUSH
10019: LD_EXP 35
10023: PPUSH
10024: CALL_OW 112
// until GetDistUnits ( Heike , Kurt ) < 6 ;
10028: LD_EXP 26
10032: PPUSH
10033: LD_EXP 35
10037: PPUSH
10038: CALL_OW 296
10042: PUSH
10043: LD_INT 6
10045: LESS
10046: IFFALSE 10007
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
10048: LD_EXP 35
10052: PUSH
10053: LD_EXP 28
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: PPUSH
10062: LD_EXP 26
10066: PPUSH
10067: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
10071: LD_EXP 35
10075: PPUSH
10076: LD_STRING DKs-scout-3
10078: PPUSH
10079: CALL_OW 88
// if Kaia and GetDistUnits ( Kaia , Kurt ) < 15 then
10083: LD_EXP 31
10087: PUSH
10088: LD_EXP 31
10092: PPUSH
10093: LD_EXP 35
10097: PPUSH
10098: CALL_OW 296
10102: PUSH
10103: LD_INT 15
10105: LESS
10106: AND
10107: IFFALSE 10330
// begin p := 1 ;
10109: LD_ADDR_VAR 0 4
10113: PUSH
10114: LD_INT 1
10116: ST_TO_ADDR
// if IsInUnit ( Kaia ) then
10117: LD_EXP 31
10121: PPUSH
10122: CALL_OW 310
10126: IFFALSE 10137
// ComExit ( Kaia ) ;
10128: LD_EXP 31
10132: PPUSH
10133: CALL 77322 0 1
// wait ( 0 0$1 ) ;
10137: LD_INT 35
10139: PPUSH
10140: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
10144: LD_EXP 31
10148: PPUSH
10149: LD_EXP 35
10153: PPUSH
10154: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
10158: LD_INT 35
10160: PPUSH
10161: CALL_OW 67
// p := Inc ( p ) ;
10165: LD_ADDR_VAR 0 4
10169: PUSH
10170: LD_VAR 0 4
10174: PPUSH
10175: CALL 78285 0 1
10179: ST_TO_ADDR
// until GetDistUnits ( Kaia , Kurt ) < 6 or p > 12 ;
10180: LD_EXP 31
10184: PPUSH
10185: LD_EXP 35
10189: PPUSH
10190: CALL_OW 296
10194: PUSH
10195: LD_INT 6
10197: LESS
10198: PUSH
10199: LD_VAR 0 4
10203: PUSH
10204: LD_INT 12
10206: GREATER
10207: OR
10208: IFFALSE 10158
// ComTurnUnit ( Kaia , Kurt ) ;
10210: LD_EXP 31
10214: PPUSH
10215: LD_EXP 35
10219: PPUSH
10220: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
10224: LD_EXP 31
10228: PPUSH
10229: LD_STRING DK-scout-4
10231: PPUSH
10232: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
10236: LD_EXP 35
10240: PPUSH
10241: LD_EXP 31
10245: PPUSH
10246: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
10250: LD_EXP 35
10254: PPUSH
10255: LD_STRING DKs-scout-5
10257: PPUSH
10258: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
10262: LD_EXP 31
10266: PPUSH
10267: LD_STRING DK-scout-6
10269: PPUSH
10270: CALL_OW 88
// if Mike then
10274: LD_EXP 28
10278: IFFALSE 10330
// begin Say ( Mike , DM-scout-7 ) ;
10280: LD_EXP 28
10284: PPUSH
10285: LD_STRING DM-scout-7
10287: PPUSH
10288: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
10292: LD_EXP 31
10296: PPUSH
10297: LD_EXP 28
10301: PPUSH
10302: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
10306: LD_EXP 31
10310: PPUSH
10311: LD_STRING DK-scout-8
10313: PPUSH
10314: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
10318: LD_EXP 28
10322: PPUSH
10323: LD_STRING DM-scout-9
10325: PPUSH
10326: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
10330: LD_INT 184
10332: PPUSH
10333: LD_INT 100
10335: PPUSH
10336: LD_INT 2
10338: PPUSH
10339: LD_INT 12
10341: NEG
10342: PPUSH
10343: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
10347: LD_INT 184
10349: PPUSH
10350: LD_INT 100
10352: PPUSH
10353: LD_INT 2
10355: PPUSH
10356: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
10360: LD_INT 184
10362: PPUSH
10363: LD_INT 100
10365: PPUSH
10366: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
10370: LD_EXP 35
10374: PPUSH
10375: LD_STRING DKs-scout-10
10377: PPUSH
10378: CALL_OW 88
// wait ( 0 0$1 ) ;
10382: LD_INT 35
10384: PPUSH
10385: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
10389: LD_INT 144
10391: PPUSH
10392: LD_INT 65
10394: PPUSH
10395: LD_INT 2
10397: PPUSH
10398: LD_INT 12
10400: NEG
10401: PPUSH
10402: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
10406: LD_INT 144
10408: PPUSH
10409: LD_INT 65
10411: PPUSH
10412: LD_INT 2
10414: PPUSH
10415: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
10419: LD_INT 144
10421: PPUSH
10422: LD_INT 65
10424: PPUSH
10425: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
10429: LD_EXP 35
10433: PPUSH
10434: LD_STRING DKs-scout-11
10436: PPUSH
10437: CALL_OW 88
// wait ( 0 0$1 ) ;
10441: LD_INT 35
10443: PPUSH
10444: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
10448: LD_EXP 35
10452: PPUSH
10453: CALL_OW 87
// if Mike and not Givi then
10457: LD_EXP 28
10461: PUSH
10462: LD_EXP 27
10466: NOT
10467: AND
10468: IFFALSE 10494
// begin Say ( Mike , DM-scout-a-1 ) ;
10470: LD_EXP 28
10474: PPUSH
10475: LD_STRING DM-scout-a-1
10477: PPUSH
10478: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
10482: LD_EXP 26
10486: PPUSH
10487: LD_STRING DH-scout-a-2
10489: PPUSH
10490: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10494: LD_EXP 35
10498: PUSH
10499: LD_EXP 28
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: PPUSH
10508: LD_INT 2
10510: PPUSH
10511: CALL_OW 235
// InGameOff ;
10515: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
10519: LD_STRING Hill
10521: PPUSH
10522: CALL_OW 337
// Hint ( BunkerHill ) ;
10526: LD_STRING BunkerHill
10528: PPUSH
10529: CALL_OW 339
// SetAreaMapShow ( bunkerHillArea , 1 ) ;
10533: LD_INT 22
10535: PPUSH
10536: LD_INT 1
10538: PPUSH
10539: CALL_OW 424
// SetAreaMapShow ( dontGoArea , 1 ) ;
10543: LD_INT 20
10545: PPUSH
10546: LD_INT 1
10548: PPUSH
10549: CALL_OW 424
// allowToPatrol := true ;
10553: LD_ADDR_EXP 12
10557: PUSH
10558: LD_INT 1
10560: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10561: LD_INT 3150
10563: PPUSH
10564: CALL_OW 67
// InitHc ;
10568: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
10572: LD_ADDR_VAR 0 1
10576: PUSH
10577: DOUBLE
10578: LD_INT 1
10580: DEC
10581: ST_TO_ADDR
10582: LD_INT 3
10584: PUSH
10585: LD_INT 3
10587: PUSH
10588: LD_INT 2
10590: PUSH
10591: LD_INT 2
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: PUSH
10600: LD_OWVAR 67
10604: ARRAY
10605: PUSH
10606: FOR_TO
10607: IFFALSE 10935
// begin uc_side := 2 ;
10609: LD_ADDR_OWVAR 20
10613: PUSH
10614: LD_INT 2
10616: ST_TO_ADDR
// uc_nation := 2 ;
10617: LD_ADDR_OWVAR 21
10621: PUSH
10622: LD_INT 2
10624: ST_TO_ADDR
// if i = 1 then
10625: LD_VAR 0 1
10629: PUSH
10630: LD_INT 1
10632: EQUAL
10633: IFFALSE 10645
// sex := sex_male else
10635: LD_ADDR_VAR 0 5
10639: PUSH
10640: LD_INT 1
10642: ST_TO_ADDR
10643: GO 10653
// sex := false ;
10645: LD_ADDR_VAR 0 5
10649: PUSH
10650: LD_INT 0
10652: ST_TO_ADDR
// PrepareHuman ( sex , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 , 2 ] [ Difficulty ] ) ;
10653: LD_VAR 0 5
10657: PPUSH
10658: LD_INT 1
10660: PUSH
10661: LD_INT 3
10663: PUSH
10664: LD_INT 1
10666: PUSH
10667: EMPTY
10668: LIST
10669: LIST
10670: LIST
10671: PUSH
10672: LD_VAR 0 1
10676: PUSH
10677: LD_INT 3
10679: MOD
10680: PUSH
10681: LD_INT 1
10683: PLUS
10684: ARRAY
10685: PPUSH
10686: LD_INT 3
10688: PUSH
10689: LD_INT 2
10691: PUSH
10692: LD_INT 2
10694: PUSH
10695: LD_INT 2
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: PUSH
10704: LD_OWVAR 67
10708: ARRAY
10709: PPUSH
10710: CALL_OW 380
// un := CreateHuman ;
10714: LD_ADDR_VAR 0 2
10718: PUSH
10719: CALL_OW 44
10723: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10724: LD_ADDR_EXP 38
10728: PUSH
10729: LD_EXP 38
10733: PUSH
10734: LD_VAR 0 2
10738: UNION
10739: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10740: LD_INT 2
10742: PPUSH
10743: LD_INT 2
10745: PPUSH
10746: LD_INT 13
10748: PPUSH
10749: LD_INT 2
10751: PUSH
10752: LD_INT 1
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: PUSH
10759: LD_VAR 0 1
10763: PUSH
10764: LD_INT 2
10766: MOD
10767: PUSH
10768: LD_INT 1
10770: PLUS
10771: ARRAY
10772: PPUSH
10773: LD_INT 1
10775: PPUSH
10776: LD_INT 27
10778: PUSH
10779: LD_INT 25
10781: PUSH
10782: LD_INT 27
10784: PUSH
10785: LD_INT 23
10787: PUSH
10788: LD_INT 23
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: PUSH
10798: LD_OWVAR 67
10802: PUSH
10803: LD_INT 0
10805: PPUSH
10806: LD_INT 1
10808: PPUSH
10809: CALL_OW 12
10813: PLUS
10814: ARRAY
10815: PPUSH
10816: LD_INT 77
10818: PPUSH
10819: CALL 386 0 7
// veh := CreateVehicle ;
10823: LD_ADDR_VAR 0 3
10827: PUSH
10828: CALL_OW 45
10832: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10833: LD_VAR 0 3
10837: PPUSH
10838: LD_INT 2
10840: PPUSH
10841: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10845: LD_VAR 0 3
10849: PPUSH
10850: LD_INT 178
10852: PPUSH
10853: LD_INT 2
10855: PPUSH
10856: LD_INT 2
10858: PPUSH
10859: LD_INT 0
10861: PPUSH
10862: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10866: LD_VAR 0 2
10870: PPUSH
10871: LD_VAR 0 3
10875: PPUSH
10876: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10880: LD_VAR 0 2
10884: PPUSH
10885: LD_INT 183
10887: PPUSH
10888: LD_INT 11
10890: PPUSH
10891: CALL_OW 111
// if i = 1 then
10895: LD_VAR 0 1
10899: PUSH
10900: LD_INT 1
10902: EQUAL
10903: IFFALSE 10926
// begin CenterOnUnits ( un ) ;
10905: LD_VAR 0 2
10909: PPUSH
10910: CALL_OW 85
// Say ( un , DArSol-Arrival-1 ) ;
10914: LD_VAR 0 2
10918: PPUSH
10919: LD_STRING DArSol-Arrival-1
10921: PPUSH
10922: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
10926: LD_INT 70
10928: PPUSH
10929: CALL_OW 67
// end ;
10933: GO 10606
10935: POP
10936: POP
// end ;
10937: PPOPN 5
10939: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10940: LD_EXP 4
10944: PUSH
10945: LD_EXP 36
10949: PPUSH
10950: CALL_OW 302
10954: AND
10955: IFFALSE 11004
10957: GO 10959
10959: DISABLE
// begin DialogueOn ;
10960: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10964: LD_EXP 36
10968: PPUSH
10969: LD_STRING DA-lab-1
10971: PPUSH
10972: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10976: LD_EXP 36
10980: PPUSH
10981: LD_STRING DA-lab-2
10983: PPUSH
10984: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10988: LD_EXP 26
10992: PPUSH
10993: LD_STRING DH-lab-3
10995: PPUSH
10996: CALL_OW 88
// DialogueOff ;
11000: CALL_OW 7
// end ;
11004: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
11005: LD_INT 17
11007: PPUSH
11008: LD_INT 2
11010: PPUSH
11011: CALL_OW 321
11015: PUSH
11016: LD_INT 2
11018: EQUAL
11019: IFFALSE 11151
11021: GO 11023
11023: DISABLE
11024: LD_INT 0
11026: PPUSH
// begin DialogueOn ;
11027: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
11031: LD_EXP 36
11035: PPUSH
11036: LD_STRING DA-Cam-1
11038: PPUSH
11039: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
11043: LD_EXP 36
11047: PPUSH
11048: LD_STRING DA-Cam-2
11050: PPUSH
11051: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
11055: LD_EXP 36
11059: PPUSH
11060: LD_STRING DA-Cam-3
11062: PPUSH
11063: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
11067: LD_EXP 26
11071: PPUSH
11072: LD_STRING DH-Cam-4
11074: PPUSH
11075: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
11079: LD_EXP 31
11083: PPUSH
11084: LD_STRING DK-Cam-5
11086: PPUSH
11087: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
11091: LD_EXP 31
11095: PPUSH
11096: LD_STRING DK-Cam-6
11098: PPUSH
11099: CALL_OW 88
// DialogueOff ;
11103: CALL_OW 7
// Query ( Camera ) ;
11107: LD_STRING Camera
11109: PPUSH
11110: CALL_OW 97
// hiddenCameraAllowed := true ;
11114: LD_ADDR_EXP 5
11118: PUSH
11119: LD_INT 1
11121: ST_TO_ADDR
// for i in camAreas do
11122: LD_ADDR_VAR 0 1
11126: PUSH
11127: LD_EXP 8
11131: PUSH
11132: FOR_IN
11133: IFFALSE 11149
// SetAreaMapShow ( i , 1 ) ;
11135: LD_VAR 0 1
11139: PPUSH
11140: LD_INT 1
11142: PPUSH
11143: CALL_OW 424
11147: GO 11132
11149: POP
11150: POP
// end ;
11151: PPOPN 1
11153: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
11154: LD_EXP 8
11158: NOT
11159: PUSH
11160: LD_EXP 5
11164: AND
11165: IFFALSE 11263
11167: GO 11169
11169: DISABLE
11170: LD_INT 0
11172: PPUSH
// begin stop_talking := true ;
11173: LD_ADDR_OWVAR 56
11177: PUSH
11178: LD_INT 1
11180: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
11181: LD_ADDR_VAR 0 1
11185: PUSH
11186: LD_INT 22
11188: PUSH
11189: LD_INT 2
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PUSH
11196: LD_INT 21
11198: PUSH
11199: LD_INT 1
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PUSH
11206: LD_INT 23
11208: PUSH
11209: LD_INT 2
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: LIST
11220: PPUSH
11221: CALL_OW 69
11225: PUSH
11226: FOR_IN
11227: IFFALSE 11246
// AddExperience ( i , 2 , 450 ) ;
11229: LD_VAR 0 1
11233: PPUSH
11234: LD_INT 2
11236: PPUSH
11237: LD_INT 450
11239: PPUSH
11240: CALL_OW 492
11244: GO 11226
11246: POP
11247: POP
// stop_talking := false ;
11248: LD_ADDR_OWVAR 56
11252: PUSH
11253: LD_INT 0
11255: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
11256: LD_STRING ACH_CAMERA
11258: PPUSH
11259: CALL_OW 543
// end ;
11263: PPOPN 1
11265: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
11266: LD_EXP 9
11270: PUSH
11271: LD_EXP 11
11275: NOT
11276: AND
11277: IFFALSE 11336
11279: GO 11281
11281: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
11282: LD_EXP 9
11286: PPUSH
11287: CALL_OW 250
11291: PPUSH
11292: LD_EXP 9
11296: PPUSH
11297: CALL_OW 251
11301: PPUSH
11302: LD_INT 2
11304: PPUSH
11305: LD_INT 6
11307: NEG
11308: PPUSH
11309: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
11313: LD_EXP 9
11317: PPUSH
11318: CALL_OW 87
// wait ( 0 0$1 ) ;
11322: LD_INT 35
11324: PPUSH
11325: CALL_OW 67
// YouLost ( Spotted ) ;
11329: LD_STRING Spotted
11331: PPUSH
11332: CALL_OW 104
// end ;
11336: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
11337: LD_INT 3
11339: PUSH
11340: LD_INT 6
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: PPUSH
11347: LD_INT 2
11349: PPUSH
11350: LD_EXP 48
11354: PPUSH
11355: CALL 1050 0 3
11359: IFFALSE 11392
11361: GO 11363
11363: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
11364: LD_ADDR_EXP 9
11368: PUSH
11369: LD_INT 3
11371: PUSH
11372: LD_INT 6
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: PPUSH
11379: LD_INT 2
11381: PPUSH
11382: LD_EXP 48
11386: PPUSH
11387: CALL 1050 0 3
11391: ST_TO_ADDR
11392: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
11393: LD_INT 22
11395: PUSH
11396: LD_INT 6
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: PUSH
11403: LD_INT 30
11405: PUSH
11406: LD_INT 32
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: PUSH
11413: LD_INT 3
11415: PUSH
11416: LD_INT 24
11418: PUSH
11419: LD_INT 1000
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: LIST
11434: PPUSH
11435: CALL_OW 69
11439: IFFALSE 11500
11441: GO 11443
11443: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
11444: LD_ADDR_EXP 9
11448: PUSH
11449: LD_INT 22
11451: PUSH
11452: LD_INT 6
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: PUSH
11459: LD_INT 30
11461: PUSH
11462: LD_INT 32
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: PUSH
11469: LD_INT 3
11471: PUSH
11472: LD_INT 24
11474: PUSH
11475: LD_INT 1000
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: LIST
11490: PPUSH
11491: CALL_OW 69
11495: PUSH
11496: LD_INT 1
11498: ARRAY
11499: ST_TO_ADDR
11500: END
// every 0 0$1 trigger russianAlert and FilterUnitsInArea ( kirovBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , towers , noncombat ;
11501: LD_EXP 9
11505: PUSH
11506: LD_INT 21
11508: PPUSH
11509: LD_INT 21
11511: PUSH
11512: LD_INT 3
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: PUSH
11519: LD_INT 3
11521: PUSH
11522: LD_INT 24
11524: PUSH
11525: LD_INT 1000
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: PPUSH
11540: CALL_OW 70
11544: AND
11545: IFFALSE 11784
11547: GO 11549
11549: DISABLE
11550: LD_INT 0
11552: PPUSH
11553: PPUSH
11554: PPUSH
11555: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11556: LD_ADDR_VAR 0 4
11560: PUSH
11561: LD_EXP 43
11565: PUSH
11566: LD_EXP 45
11570: PUSH
11571: LD_EXP 46
11575: UNION
11576: PPUSH
11577: LD_INT 3
11579: PUSH
11580: LD_INT 25
11582: PUSH
11583: LD_INT 1
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: PUSH
11590: EMPTY
11591: LIST
11592: LIST
11593: PPUSH
11594: CALL_OW 72
11598: UNION
11599: ST_TO_ADDR
// for i in noncombat do
11600: LD_ADDR_VAR 0 1
11604: PUSH
11605: LD_VAR 0 4
11609: PUSH
11610: FOR_IN
11611: IFFALSE 11707
// begin if IsInUnit ( i ) then
11613: LD_VAR 0 1
11617: PPUSH
11618: CALL_OW 310
11622: IFFALSE 11633
// ComExitBuilding ( i ) ;
11624: LD_VAR 0 1
11628: PPUSH
11629: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
11633: LD_VAR 0 1
11637: PPUSH
11638: LD_INT 114
11640: PPUSH
11641: LD_INT 97
11643: PPUSH
11644: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
11648: LD_VAR 0 1
11652: PPUSH
11653: LD_INT 99
11655: PPUSH
11656: LD_INT 128
11658: PPUSH
11659: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
11663: LD_VAR 0 1
11667: PPUSH
11668: LD_INT 91
11670: PPUSH
11671: LD_INT 145
11673: PPUSH
11674: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
11678: LD_VAR 0 1
11682: PPUSH
11683: LD_INT 82
11685: PPUSH
11686: LD_INT 153
11688: PPUSH
11689: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
11693: LD_VAR 0 1
11697: PPUSH
11698: LD_INT 16
11700: PPUSH
11701: CALL_OW 173
// end ;
11705: GO 11610
11707: POP
11708: POP
// if not allowHeikeAttack then
11709: LD_EXP 11
11713: NOT
11714: IFFALSE 11718
// exit ;
11716: GO 11784
// wait ( 0 0$05 ) ;
11718: LD_INT 175
11720: PPUSH
11721: CALL_OW 67
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11725: LD_EXP 41
11729: PPUSH
11730: LD_STRING D9a-Kur-1
11732: PPUSH
11733: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11737: LD_EXP 44
11741: PPUSH
11742: LD_STRING D9a-Bur-1
11744: PPUSH
11745: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11749: LD_EXP 41
11753: PPUSH
11754: LD_STRING D9a-Kur-2
11756: PPUSH
11757: CALL_OW 94
// omicronFall := true ;
11761: LD_ADDR_EXP 13
11765: PUSH
11766: LD_INT 1
11768: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11769: LD_INT 105
11771: PPUSH
11772: CALL_OW 67
// retreatFromOmicron := true ;
11776: LD_ADDR_EXP 20
11780: PUSH
11781: LD_INT 1
11783: ST_TO_ADDR
// end ;
11784: PPOPN 4
11786: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11787: LD_INT 16
11789: PPUSH
11790: LD_INT 3
11792: PUSH
11793: LD_INT 22
11795: PUSH
11796: LD_INT 2
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: PUSH
11807: LD_INT 23
11809: PUSH
11810: LD_INT 3
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PPUSH
11821: CALL_OW 70
11825: IFFALSE 11908
11827: GO 11829
11829: DISABLE
11830: LD_INT 0
11832: PPUSH
// begin enable ;
11833: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11834: LD_ADDR_VAR 0 1
11838: PUSH
11839: LD_INT 16
11841: PPUSH
11842: LD_INT 3
11844: PUSH
11845: LD_INT 22
11847: PUSH
11848: LD_INT 2
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: PUSH
11855: EMPTY
11856: LIST
11857: LIST
11858: PUSH
11859: LD_INT 23
11861: PUSH
11862: LD_INT 3
11864: PUSH
11865: EMPTY
11866: LIST
11867: LIST
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PPUSH
11873: CALL_OW 70
11877: PUSH
11878: FOR_IN
11879: IFFALSE 11906
// begin escapeCounter := escapeCounter + 1 ;
11881: LD_ADDR_EXP 19
11885: PUSH
11886: LD_EXP 19
11890: PUSH
11891: LD_INT 1
11893: PLUS
11894: ST_TO_ADDR
// RemoveUnit ( i ) ;
11895: LD_VAR 0 1
11899: PPUSH
11900: CALL_OW 64
// end ;
11904: GO 11878
11906: POP
11907: POP
// end ;
11908: PPOPN 1
11910: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11911: LD_OWVAR 1
11915: PUSH
11916: LD_INT 13650
11918: PUSH
11919: LD_INT 0
11921: PPUSH
11922: LD_INT 3150
11924: PPUSH
11925: CALL_OW 12
11929: PLUS
11930: GREATEREQUAL
11931: IFFALSE 11940
11933: GO 11935
11935: DISABLE
// SmallAmericanReinforcements ;
11936: CALL 7141 0 0
11940: END
// every 0 0$1 trigger tick >= [ 15 15$00 , 14 14$00 , 13 13$00 , 12 12$00 ] [ Difficulty ] do
11941: LD_OWVAR 1
11945: PUSH
11946: LD_INT 31500
11948: PUSH
11949: LD_INT 29400
11951: PUSH
11952: LD_INT 27300
11954: PUSH
11955: LD_INT 25200
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: PUSH
11964: LD_OWVAR 67
11968: ARRAY
11969: GREATEREQUAL
11970: IFFALSE 12035
11972: GO 11974
11974: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11975: LD_EXP 49
11979: PPUSH
11980: LD_INT 21
11982: PUSH
11983: LD_INT 2
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PPUSH
11990: CALL_OW 72
11994: PPUSH
11995: LD_INT 62
11997: PPUSH
11998: LD_INT 22
12000: PPUSH
12001: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
12005: LD_EXP 50
12009: PPUSH
12010: LD_INT 69
12012: PPUSH
12013: LD_INT 27
12015: PPUSH
12016: CALL_OW 111
// wait ( 1 1$00 ) ;
12020: LD_INT 2100
12022: PPUSH
12023: CALL_OW 67
// startAttackOnOmicron := true ;
12027: LD_ADDR_EXP 6
12031: PUSH
12032: LD_INT 1
12034: ST_TO_ADDR
// end ;
12035: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
12036: LD_EXP 22
12040: PUSH
12041: LD_INT 0
12043: EQUAL
12044: IFFALSE 14094
12046: GO 12048
12048: DISABLE
12049: LD_INT 0
12051: PPUSH
12052: PPUSH
12053: PPUSH
12054: PPUSH
12055: PPUSH
12056: PPUSH
12057: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
12058: LD_INT 5
12060: PPUSH
12061: LD_INT 2
12063: PPUSH
12064: CALL_OW 343
// PrepareOmarForces ;
12068: CALL 1652 0 0
// wait ( 0 0$03 ) ;
12072: LD_INT 105
12074: PPUSH
12075: CALL_OW 67
// allowHeikeAttack := true ;
12079: LD_ADDR_EXP 11
12083: PUSH
12084: LD_INT 1
12086: ST_TO_ADDR
// activeGrishkoAI := false ;
12087: LD_ADDR_EXP 10
12091: PUSH
12092: LD_INT 0
12094: ST_TO_ADDR
// SetAreaMapShow ( dontGoArea , 0 ) ;
12095: LD_INT 20
12097: PPUSH
12098: LD_INT 0
12100: PPUSH
12101: CALL_OW 424
// if not hillBase then
12105: LD_EXP 15
12109: NOT
12110: IFFALSE 12119
// ChangeMissionObjectives ( HillDone ) ;
12112: LD_STRING HillDone
12114: PPUSH
12115: CALL_OW 337
// CenterOnUnits ( Omar ) ;
12119: LD_EXP 34
12123: PPUSH
12124: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
12128: LD_ADDR_VAR 0 1
12132: PUSH
12133: LD_INT 22
12135: PUSH
12136: LD_INT 2
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PUSH
12143: LD_INT 21
12145: PUSH
12146: LD_INT 1
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: PPUSH
12157: CALL_OW 69
12161: PUSH
12162: FOR_IN
12163: IFFALSE 12187
// if HasTask ( i ) then
12165: LD_VAR 0 1
12169: PPUSH
12170: CALL_OW 314
12174: IFFALSE 12185
// ComHold ( i ) ;
12176: LD_VAR 0 1
12180: PPUSH
12181: CALL_OW 140
12185: GO 12162
12187: POP
12188: POP
// DialogueOn ;
12189: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
12193: LD_EXP 34
12197: PPUSH
12198: LD_STRING DO-assault-1
12200: PPUSH
12201: CALL_OW 94
// DialogueOff ;
12205: CALL_OW 7
// game_speed := 4 ;
12209: LD_ADDR_OWVAR 65
12213: PUSH
12214: LD_INT 4
12216: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
12217: LD_ADDR_VAR 0 1
12221: PUSH
12222: LD_EXP 47
12226: PPUSH
12227: LD_INT 3
12229: PUSH
12230: LD_INT 54
12232: PUSH
12233: EMPTY
12234: LIST
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: PPUSH
12240: CALL_OW 72
12244: PUSH
12245: FOR_IN
12246: IFFALSE 12265
// ComMoveXY ( i , 226 , 114 ) ;
12248: LD_VAR 0 1
12252: PPUSH
12253: LD_INT 226
12255: PPUSH
12256: LD_INT 114
12258: PPUSH
12259: CALL_OW 111
12263: GO 12245
12265: POP
12266: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
12267: LD_EXP 42
12271: PPUSH
12272: LD_INT 22
12274: PUSH
12275: LD_INT 6
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PUSH
12282: LD_INT 30
12284: PUSH
12285: LD_INT 4
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: PPUSH
12296: CALL_OW 69
12300: PPUSH
12301: LD_EXP 42
12305: PPUSH
12306: CALL_OW 74
12310: PPUSH
12311: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
12315: LD_STRING Attack
12317: PPUSH
12318: CALL_OW 337
// music_class := music_combat ;
12322: LD_ADDR_OWVAR 72
12326: PUSH
12327: LD_INT 1
12329: ST_TO_ADDR
// music_nat := 4 ;
12330: LD_ADDR_OWVAR 71
12334: PUSH
12335: LD_INT 4
12337: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
12338: LD_INT 5
12340: PPUSH
12341: LD_EXP 42
12345: PPUSH
12346: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12350: LD_INT 6
12352: PPUSH
12353: LD_EXP 39
12357: PPUSH
12358: LD_INT 25
12360: PUSH
12361: LD_INT 1
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: PPUSH
12368: CALL_OW 72
12372: PUSH
12373: LD_INT 4
12375: ARRAY
12376: PPUSH
12377: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
12381: LD_ADDR_VAR 0 1
12385: PUSH
12386: LD_EXP 39
12390: PPUSH
12391: LD_INT 3
12393: PUSH
12394: LD_INT 25
12396: PUSH
12397: LD_INT 4
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: PPUSH
12408: CALL_OW 72
12412: PUSH
12413: FOR_IN
12414: IFFALSE 12433
// ComAgressiveMove ( i , 221 , 110 ) ;
12416: LD_VAR 0 1
12420: PPUSH
12421: LD_INT 221
12423: PPUSH
12424: LD_INT 110
12426: PPUSH
12427: CALL_OW 114
12431: GO 12413
12433: POP
12434: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
12435: LD_EXP 39
12439: PPUSH
12440: LD_INT 25
12442: PUSH
12443: LD_INT 4
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PPUSH
12450: CALL_OW 72
12454: PPUSH
12455: LD_INT 214
12457: PPUSH
12458: LD_INT 124
12460: PPUSH
12461: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
12465: LD_EXP 39
12469: PPUSH
12470: LD_INT 25
12472: PUSH
12473: LD_INT 1
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PPUSH
12480: CALL_OW 72
12484: PUSH
12485: LD_INT 4
12487: ARRAY
12488: PPUSH
12489: LD_INT 214
12491: PPUSH
12492: LD_INT 114
12494: PPUSH
12495: LD_INT 0
12497: PPUSH
12498: CALL_OW 132
// if IsOk ( Grishko ) then
12502: LD_EXP 42
12506: PPUSH
12507: CALL_OW 302
12511: IFFALSE 12537
// begin SayRadio ( Grishko , D9-Gri-1 ) ;
12513: LD_EXP 42
12517: PPUSH
12518: LD_STRING D9-Gri-1
12520: PPUSH
12521: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
12525: LD_EXP 41
12529: PPUSH
12530: LD_STRING D9-Kur-1
12532: PPUSH
12533: CALL_OW 94
// end ; wait ( 0 0$1 ) ;
12537: LD_INT 35
12539: PPUSH
12540: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
12544: LD_EXP 34
12548: PPUSH
12549: LD_INT 233
12551: PPUSH
12552: LD_INT 130
12554: PPUSH
12555: CALL_OW 114
// if IsOk ( Grishko ) then
12559: LD_EXP 42
12563: PPUSH
12564: CALL_OW 302
12568: IFFALSE 12594
// begin SayRadio ( Grishko , D9-Gri-2 ) ;
12570: LD_EXP 42
12574: PPUSH
12575: LD_STRING D9-Gri-2
12577: PPUSH
12578: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12582: LD_EXP 41
12586: PPUSH
12587: LD_STRING D9-Kur-2
12589: PPUSH
12590: CALL_OW 94
// end ; ComExitBuilding ( Grishko ) ;
12594: LD_EXP 42
12598: PPUSH
12599: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
12603: LD_EXP 42
12607: PPUSH
12608: LD_INT 211
12610: PPUSH
12611: LD_INT 104
12613: PPUSH
12614: CALL_OW 171
// AddComHold ( Grishko ) ;
12618: LD_EXP 42
12622: PPUSH
12623: CALL_OW 200
// repeat wait ( 3 ) ;
12627: LD_INT 3
12629: PPUSH
12630: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
12634: LD_EXP 42
12638: PPUSH
12639: CALL_OW 310
12643: NOT
12644: IFFALSE 12627
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
12646: LD_EXP 39
12650: PPUSH
12651: LD_INT 34
12653: PUSH
12654: LD_INT 26
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: PPUSH
12661: CALL_OW 72
12665: PPUSH
12666: LD_EXP 42
12670: PPUSH
12671: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12675: LD_EXP 39
12679: PPUSH
12680: LD_INT 34
12682: PUSH
12683: LD_INT 26
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PPUSH
12690: CALL_OW 72
12694: PPUSH
12695: LD_INT 215
12697: PPUSH
12698: LD_INT 106
12700: PPUSH
12701: CALL_OW 174
// repeat wait ( 3 ) ;
12705: LD_INT 3
12707: PPUSH
12708: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12712: LD_EXP 42
12716: PPUSH
12717: CALL_OW 256
12721: PUSH
12722: LD_INT 1000
12724: LESS
12725: IFFALSE 12705
// NormalAttack ( 5 , Grishko ) ;
12727: LD_INT 5
12729: PPUSH
12730: LD_EXP 42
12734: PPUSH
12735: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12739: LD_INT 6
12741: PPUSH
12742: LD_EXP 39
12746: PPUSH
12747: LD_INT 25
12749: PUSH
12750: LD_INT 1
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: PPUSH
12757: CALL_OW 72
12761: PUSH
12762: LD_INT 4
12764: ARRAY
12765: PPUSH
12766: CALL_OW 472
// if IsOk ( Grishko ) then
12770: LD_EXP 42
12774: PPUSH
12775: CALL_OW 302
12779: IFFALSE 12805
// begin SayRadio ( Grishko , D9-Gri-3 ) ;
12781: LD_EXP 42
12785: PPUSH
12786: LD_STRING D9-Gri-3
12788: PPUSH
12789: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12793: LD_EXP 41
12797: PPUSH
12798: LD_STRING D9-Kur-3
12800: PPUSH
12801: CALL_OW 94
// end ; music_class := music_auto ;
12805: LD_ADDR_OWVAR 72
12809: PUSH
12810: LD_INT 0
12812: ST_TO_ADDR
// music_nat := music_auto ;
12813: LD_ADDR_OWVAR 71
12817: PUSH
12818: LD_INT 0
12820: ST_TO_ADDR
// for i in omarSquad do
12821: LD_ADDR_VAR 0 1
12825: PUSH
12826: LD_EXP 39
12830: PUSH
12831: FOR_IN
12832: IFFALSE 12974
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12834: LD_VAR 0 1
12838: PPUSH
12839: CALL_OW 247
12843: PUSH
12844: LD_INT 2
12846: EQUAL
12847: PUSH
12848: LD_VAR 0 1
12852: PPUSH
12853: CALL_OW 256
12857: PUSH
12858: LD_INT 1000
12860: LESS
12861: AND
12862: IFFALSE 12928
// begin driver := IsDrivenBy ( i ) ;
12864: LD_ADDR_VAR 0 2
12868: PUSH
12869: LD_VAR 0 1
12873: PPUSH
12874: CALL_OW 311
12878: ST_TO_ADDR
// veh := i ;
12879: LD_ADDR_VAR 0 3
12883: PUSH
12884: LD_VAR 0 1
12888: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12889: LD_VAR 0 2
12893: PPUSH
12894: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12898: LD_VAR 0 2
12902: PPUSH
12903: LD_VAR 0 3
12907: PPUSH
12908: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12912: LD_VAR 0 2
12916: PPUSH
12917: LD_VAR 0 3
12921: PPUSH
12922: CALL_OW 180
// end else
12926: GO 12972
// if GetLives ( i ) < 500 then
12928: LD_VAR 0 1
12932: PPUSH
12933: CALL_OW 256
12937: PUSH
12938: LD_INT 500
12940: LESS
12941: IFFALSE 12972
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12943: LD_EXP 39
12947: PPUSH
12948: LD_INT 25
12950: PUSH
12951: LD_INT 4
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: PPUSH
12958: CALL_OW 72
12962: PPUSH
12963: LD_VAR 0 1
12967: PPUSH
12968: CALL_OW 188
// end ; end ;
12972: GO 12831
12974: POP
12975: POP
// repeat wait ( 0 0$1 ) ;
12976: LD_INT 35
12978: PPUSH
12979: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12983: LD_EXP 39
12987: PPUSH
12988: LD_INT 3
12990: PUSH
12991: LD_INT 24
12993: PUSH
12994: LD_INT 1000
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PUSH
13005: LD_INT 21
13007: PUSH
13008: LD_INT 2
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: PPUSH
13019: CALL_OW 72
13023: NOT
13024: PUSH
13025: LD_EXP 39
13029: PPUSH
13030: LD_INT 3
13032: PUSH
13033: LD_INT 24
13035: PUSH
13036: LD_INT 250
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: PPUSH
13047: CALL_OW 72
13051: NOT
13052: AND
13053: IFFALSE 12976
// wait ( 0 0$2 ) ;
13055: LD_INT 70
13057: PPUSH
13058: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
13062: LD_ADDR_VAR 0 5
13066: PUSH
13067: LD_EXP 39
13071: PPUSH
13072: LD_INT 58
13074: PUSH
13075: EMPTY
13076: LIST
13077: PUSH
13078: LD_INT 21
13080: PUSH
13081: LD_INT 2
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PPUSH
13092: CALL_OW 72
13096: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
13097: LD_ADDR_VAR 0 6
13101: PUSH
13102: LD_EXP 39
13106: PPUSH
13107: LD_INT 25
13109: PUSH
13110: LD_INT 3
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PUSH
13117: LD_INT 3
13119: PUSH
13120: LD_INT 55
13122: PUSH
13123: EMPTY
13124: LIST
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: PUSH
13130: EMPTY
13131: LIST
13132: LIST
13133: PPUSH
13134: CALL_OW 72
13138: ST_TO_ADDR
// for i := 1 to tmp do
13139: LD_ADDR_VAR 0 1
13143: PUSH
13144: DOUBLE
13145: LD_INT 1
13147: DEC
13148: ST_TO_ADDR
13149: LD_VAR 0 5
13153: PUSH
13154: FOR_TO
13155: IFFALSE 13185
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
13157: LD_VAR 0 6
13161: PUSH
13162: LD_VAR 0 1
13166: ARRAY
13167: PPUSH
13168: LD_VAR 0 5
13172: PUSH
13173: LD_VAR 0 1
13177: ARRAY
13178: PPUSH
13179: CALL_OW 120
13183: GO 13154
13185: POP
13186: POP
// wait ( 0 0$5 ) ;
13187: LD_INT 175
13189: PPUSH
13190: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
13194: LD_EXP 39
13198: PPUSH
13199: LD_INT 199
13201: PPUSH
13202: LD_INT 141
13204: PPUSH
13205: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
13209: LD_EXP 34
13213: PPUSH
13214: LD_INT 190
13216: PPUSH
13217: LD_INT 143
13219: PPUSH
13220: CALL_OW 114
// AddComHold ( Omar ) ;
13224: LD_EXP 34
13228: PPUSH
13229: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
13233: LD_EXP 39
13237: PPUSH
13238: LD_INT 2
13240: PUSH
13241: LD_INT 25
13243: PUSH
13244: LD_INT 1
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: LD_INT 25
13253: PUSH
13254: LD_INT 4
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: LIST
13265: PPUSH
13266: CALL_OW 72
13270: PPUSH
13271: LD_INT 161
13273: PPUSH
13274: LD_INT 130
13276: PPUSH
13277: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
13281: LD_EXP 39
13285: PPUSH
13286: LD_INT 25
13288: PUSH
13289: LD_INT 1
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PPUSH
13296: CALL_OW 72
13300: PPUSH
13301: LD_INT 163
13303: PPUSH
13304: LD_INT 122
13306: PPUSH
13307: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
13311: LD_EXP 39
13315: PPUSH
13316: LD_INT 25
13318: PUSH
13319: LD_INT 1
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: PPUSH
13326: CALL_OW 72
13330: PUSH
13331: LD_INT 4
13333: ARRAY
13334: PPUSH
13335: LD_INT 165
13337: PPUSH
13338: LD_INT 118
13340: PPUSH
13341: LD_INT 0
13343: PPUSH
13344: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
13348: LD_EXP 39
13352: PPUSH
13353: LD_INT 25
13355: PUSH
13356: LD_INT 1
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: PPUSH
13363: CALL_OW 72
13367: PUSH
13368: LD_INT 4
13370: ARRAY
13371: PPUSH
13372: LD_INT 159
13374: PPUSH
13375: LD_INT 116
13377: PPUSH
13378: LD_INT 0
13380: PPUSH
13381: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
13385: LD_EXP 39
13389: PPUSH
13390: LD_INT 21
13392: PUSH
13393: LD_INT 2
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PPUSH
13400: CALL_OW 72
13404: PPUSH
13405: LD_INT 169
13407: PPUSH
13408: LD_INT 114
13410: PPUSH
13411: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
13415: LD_INT 35
13417: PPUSH
13418: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
13422: LD_ADDR_VAR 0 5
13426: PUSH
13427: LD_EXP 39
13431: PPUSH
13432: LD_INT 25
13434: PUSH
13435: LD_INT 1
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: PPUSH
13442: CALL_OW 72
13446: ST_TO_ADDR
// for i in tmp do
13447: LD_ADDR_VAR 0 1
13451: PUSH
13452: LD_VAR 0 5
13456: PUSH
13457: FOR_IN
13458: IFFALSE 13555
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
13460: LD_VAR 0 1
13464: PPUSH
13465: CALL_OW 256
13469: PUSH
13470: LD_INT 600
13472: LESS
13473: PUSH
13474: LD_VAR 0 1
13478: PPUSH
13479: LD_INT 161
13481: PPUSH
13482: LD_INT 130
13484: PPUSH
13485: CALL_OW 297
13489: PUSH
13490: LD_INT 6
13492: GREATER
13493: AND
13494: IFFALSE 13511
// ComMoveXY ( i , 161 , 130 ) ;
13496: LD_VAR 0 1
13500: PPUSH
13501: LD_INT 161
13503: PPUSH
13504: LD_INT 130
13506: PPUSH
13507: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
13511: LD_VAR 0 1
13515: PPUSH
13516: CALL_OW 256
13520: PUSH
13521: LD_INT 1000
13523: EQUAL
13524: PUSH
13525: LD_VAR 0 1
13529: PPUSH
13530: CALL_OW 314
13534: NOT
13535: AND
13536: IFFALSE 13553
// ComAgressiveMove ( i , 160 , 109 ) ;
13538: LD_VAR 0 1
13542: PPUSH
13543: LD_INT 160
13545: PPUSH
13546: LD_INT 109
13548: PPUSH
13549: CALL_OW 114
// end ;
13553: GO 13457
13555: POP
13556: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
13557: LD_ADDR_VAR 0 5
13561: PUSH
13562: LD_EXP 39
13566: PPUSH
13567: LD_INT 21
13569: PUSH
13570: LD_INT 2
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PPUSH
13577: CALL_OW 72
13581: ST_TO_ADDR
// for i in tmp do
13582: LD_ADDR_VAR 0 1
13586: PUSH
13587: LD_VAR 0 5
13591: PUSH
13592: FOR_IN
13593: IFFALSE 13859
// begin tmp2 := IsDrivenBy ( i ) ;
13595: LD_ADDR_VAR 0 6
13599: PUSH
13600: LD_VAR 0 1
13604: PPUSH
13605: CALL_OW 311
13609: ST_TO_ADDR
// if not tmp2 then
13610: LD_VAR 0 6
13614: NOT
13615: IFFALSE 13619
// continue ;
13617: GO 13592
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
13619: LD_VAR 0 1
13623: PPUSH
13624: CALL_OW 256
13628: PUSH
13629: LD_INT 600
13631: GREATEREQUAL
13632: PUSH
13633: LD_VAR 0 1
13637: PPUSH
13638: CALL_OW 110
13642: PUSH
13643: LD_INT 1
13645: EQUAL
13646: AND
13647: IFFALSE 13661
// SetTag ( i , 0 ) ;
13649: LD_VAR 0 1
13653: PPUSH
13654: LD_INT 0
13656: PPUSH
13657: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
13661: LD_VAR 0 1
13665: PPUSH
13666: CALL_OW 256
13670: PUSH
13671: LD_INT 600
13673: GREATEREQUAL
13674: PUSH
13675: LD_VAR 0 1
13679: PPUSH
13680: CALL_OW 110
13684: NOT
13685: AND
13686: IFFALSE 13712
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13688: LD_VAR 0 1
13692: PPUSH
13693: LD_VAR 0 7
13697: PPUSH
13698: LD_VAR 0 1
13702: PPUSH
13703: CALL_OW 74
13707: PPUSH
13708: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13712: LD_VAR 0 1
13716: PPUSH
13717: CALL_OW 256
13721: PUSH
13722: LD_INT 600
13724: LESS
13725: PUSH
13726: LD_VAR 0 1
13730: PPUSH
13731: CALL_OW 110
13735: NOT
13736: AND
13737: IFFALSE 13766
// begin SetTag ( i , 1 ) ;
13739: LD_VAR 0 1
13743: PPUSH
13744: LD_INT 1
13746: PPUSH
13747: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13751: LD_VAR 0 1
13755: PPUSH
13756: LD_INT 202
13758: PPUSH
13759: LD_INT 150
13761: PPUSH
13762: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13766: LD_VAR 0 1
13770: PPUSH
13771: CALL_OW 110
13775: PUSH
13776: LD_INT 1
13778: EQUAL
13779: PUSH
13780: LD_VAR 0 1
13784: PPUSH
13785: LD_INT 202
13787: PPUSH
13788: LD_INT 150
13790: PPUSH
13791: CALL_OW 297
13795: PUSH
13796: LD_INT 6
13798: LESS
13799: AND
13800: PUSH
13801: LD_VAR 0 6
13805: AND
13806: IFFALSE 13857
// begin ComExitVehicle ( tmp2 ) ;
13808: LD_VAR 0 6
13812: PPUSH
13813: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13817: LD_VAR 0 6
13821: PPUSH
13822: LD_VAR 0 1
13826: PPUSH
13827: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13831: LD_VAR 0 6
13835: PPUSH
13836: LD_INT 700
13838: PPUSH
13839: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13843: LD_VAR 0 6
13847: PPUSH
13848: LD_VAR 0 1
13852: PPUSH
13853: CALL_OW 180
// end ; end ;
13857: GO 13592
13859: POP
13860: POP
// until kirovDestroyed ;
13861: LD_EXP 16
13865: IFFALSE 13415
// repeat wait ( 0 0$1 ) ;
13867: LD_INT 35
13869: PPUSH
13870: CALL_OW 67
// for i in omarSquad union Omar do
13874: LD_ADDR_VAR 0 1
13878: PUSH
13879: LD_EXP 39
13883: PUSH
13884: LD_EXP 34
13888: UNION
13889: PUSH
13890: FOR_IN
13891: IFFALSE 14061
// if IsInArea ( i , southRoadArea ) then
13893: LD_VAR 0 1
13897: PPUSH
13898: LD_INT 15
13900: PPUSH
13901: CALL_OW 308
13905: IFFALSE 13918
// RemoveUnit ( i ) else
13907: LD_VAR 0 1
13911: PPUSH
13912: CALL_OW 64
13916: GO 14059
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
13918: LD_VAR 0 1
13922: PPUSH
13923: CALL_OW 257
13927: PUSH
13928: LD_INT 3
13930: EQUAL
13931: PUSH
13932: LD_VAR 0 1
13936: PPUSH
13937: CALL_OW 310
13941: NOT
13942: AND
13943: PUSH
13944: LD_INT 22
13946: PUSH
13947: LD_INT 5
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: PUSH
13954: LD_INT 24
13956: PUSH
13957: LD_INT 251
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: LD_INT 21
13966: PUSH
13967: LD_INT 2
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PUSH
13974: LD_INT 58
13976: PUSH
13977: EMPTY
13978: LIST
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: PPUSH
13986: CALL_OW 69
13990: AND
13991: IFFALSE 14044
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
13993: LD_VAR 0 1
13997: PPUSH
13998: LD_INT 22
14000: PUSH
14001: LD_INT 5
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: PUSH
14008: LD_INT 21
14010: PUSH
14011: LD_INT 2
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: PUSH
14018: LD_INT 58
14020: PUSH
14021: EMPTY
14022: LIST
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: LIST
14028: PPUSH
14029: CALL_OW 69
14033: PUSH
14034: LD_INT 1
14036: ARRAY
14037: PPUSH
14038: CALL_OW 120
14042: GO 14059
// ComMoveXY ( i , 208 , 162 ) ;
14044: LD_VAR 0 1
14048: PPUSH
14049: LD_INT 208
14051: PPUSH
14052: LD_INT 162
14054: PPUSH
14055: CALL_OW 111
// end ;
14059: GO 13890
14061: POP
14062: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
14063: LD_INT 22
14065: PUSH
14066: LD_INT 5
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: PUSH
14073: LD_INT 21
14075: PUSH
14076: LD_INT 1
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PUSH
14083: EMPTY
14084: LIST
14085: LIST
14086: PPUSH
14087: CALL_OW 69
14091: NOT
14092: IFFALSE 13867
// end ;
14094: PPOPN 7
14096: END
// every 0 0$1 trigger IsDead ( kirov ) do
14097: LD_INT 71
14099: PPUSH
14100: CALL_OW 301
14104: IFFALSE 14121
14106: GO 14108
14108: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
14109: LD_EXP 26
14113: PPUSH
14114: LD_STRING DH-1-Kirov
14116: PPUSH
14117: CALL_OW 88
14121: END
// every 0 0$1 trigger See ( 2 , beria ) do
14122: LD_INT 2
14124: PPUSH
14125: LD_INT 106
14127: PPUSH
14128: CALL_OW 292
14132: IFFALSE 14149
14134: GO 14136
14136: DISABLE
// Say ( Heike , DH-1-Beria ) ;
14137: LD_EXP 26
14141: PPUSH
14142: LD_STRING DH-1-Beria
14144: PPUSH
14145: CALL_OW 88
14149: END
// every 0 0$1 trigger See ( 2 , kagan ) do
14150: LD_INT 2
14152: PPUSH
14153: LD_INT 112
14155: PPUSH
14156: CALL_OW 292
14160: IFFALSE 14427
14162: GO 14164
14164: DISABLE
// begin DialogueOn ;
14165: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
14169: LD_INT 112
14171: PPUSH
14172: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
14176: LD_EXP 26
14180: PPUSH
14181: LD_STRING DH-1-Kagan
14183: PPUSH
14184: CALL_OW 88
// if Kamil then
14188: LD_EXP 30
14192: IFFALSE 14230
// begin Say ( Kamil , DKam-Kagan-2 ) ;
14194: LD_EXP 30
14198: PPUSH
14199: LD_STRING DKam-Kagan-2
14201: PPUSH
14202: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
14206: LD_EXP 27
14210: PPUSH
14211: LD_STRING DG-Kagan-3
14213: PPUSH
14214: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
14218: LD_EXP 27
14222: PPUSH
14223: LD_STRING DG-Kagan-4
14225: PPUSH
14226: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
14230: LD_STRING KaganBase
14232: PPUSH
14233: CALL_OW 97
14237: PUSH
14238: LD_INT 1
14240: DOUBLE
14241: EQUAL
14242: IFTRUE 14246
14244: GO 14341
14246: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
14247: LD_EXP 26
14251: PPUSH
14252: LD_STRING DH-Kagan-5
14254: PPUSH
14255: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
14259: LD_EXP 26
14263: PPUSH
14264: LD_STRING DH-Kagan-6
14266: PPUSH
14267: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
14271: LD_EXP 37
14275: PPUSH
14276: LD_STRING DShar-Kagan-7
14278: PPUSH
14279: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
14283: LD_EXP 26
14287: PPUSH
14288: LD_STRING DH-Kagan-8
14290: PPUSH
14291: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
14295: LD_EXP 26
14299: PPUSH
14300: LD_STRING DH-Kagan-9
14302: PPUSH
14303: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
14307: LD_EXP 37
14311: PPUSH
14312: LD_STRING DShar-Kagan-10
14314: PPUSH
14315: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
14319: LD_EXP 26
14323: PPUSH
14324: LD_STRING DH-Kagan-11
14326: PPUSH
14327: CALL_OW 88
// kaganCaptured := true ;
14331: LD_ADDR_EXP 24
14335: PUSH
14336: LD_INT 1
14338: ST_TO_ADDR
// end ; 2 :
14339: GO 14423
14341: LD_INT 2
14343: DOUBLE
14344: EQUAL
14345: IFTRUE 14349
14347: GO 14422
14349: POP
// begin if FilterAllUnits ( [ f_side , 8 ] ) and Aviradze then
14350: LD_INT 22
14352: PUSH
14353: LD_INT 8
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: PPUSH
14360: CALL_OW 69
14364: PUSH
14365: LD_EXP 36
14369: AND
14370: IFFALSE 14384
// Say ( Heike , DH-Kagan-a-5 ) ;
14372: LD_EXP 26
14376: PPUSH
14377: LD_STRING DH-Kagan-a-5
14379: PPUSH
14380: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
14384: LD_EXP 26
14388: PPUSH
14389: LD_STRING DH-Kagan-a-6
14391: PPUSH
14392: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
14396: LD_EXP 26
14400: PPUSH
14401: LD_STRING DH-Kagan-a-7
14403: PPUSH
14404: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
14408: LD_EXP 27
14412: PPUSH
14413: LD_STRING DG-Kagan-a-8
14415: PPUSH
14416: CALL_OW 88
// end ; end ;
14420: GO 14423
14422: POP
// DialogueOff ;
14423: CALL_OW 7
// end ;
14427: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
14428: LD_EXP 18
14432: PUSH
14433: LD_INT 112
14435: PPUSH
14436: CALL_OW 255
14440: PUSH
14441: LD_INT 2
14443: EQUAL
14444: OR
14445: IFFALSE 14457
14447: GO 14449
14449: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
14450: LD_STRING KaganDone
14452: PPUSH
14453: CALL_OW 337
14457: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
14458: LD_EXP 6
14462: PUSH
14463: LD_EXP 49
14467: PPUSH
14468: LD_INT 95
14470: PUSH
14471: LD_INT 19
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: PPUSH
14478: CALL_OW 72
14482: AND
14483: IFFALSE 14560
14485: GO 14487
14487: DISABLE
// begin DialogueOn ;
14488: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
14492: LD_INT 63
14494: PPUSH
14495: LD_INT 32
14497: PPUSH
14498: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
14502: LD_INT 63
14504: PPUSH
14505: LD_INT 32
14507: PPUSH
14508: LD_INT 2
14510: PPUSH
14511: LD_INT 12
14513: NEG
14514: PPUSH
14515: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
14519: LD_EXP 26
14523: PPUSH
14524: LD_STRING DH-Omicron-1
14526: PPUSH
14527: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
14531: LD_EXP 28
14535: PPUSH
14536: LD_STRING DM-Omicron-2
14538: PPUSH
14539: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
14543: LD_INT 63
14545: PPUSH
14546: LD_INT 32
14548: PPUSH
14549: LD_INT 2
14551: PPUSH
14552: CALL_OW 331
// DialogueOff ;
14556: CALL_OW 7
// end ;
14560: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
14561: LD_INT 2
14563: PPUSH
14564: LD_EXP 51
14568: PPUSH
14569: CALL_OW 292
14573: PUSH
14574: LD_EXP 51
14578: PPUSH
14579: CALL_OW 255
14583: PUSH
14584: LD_INT 2
14586: EQUAL
14587: OR
14588: PUSH
14589: LD_INT 106
14591: PPUSH
14592: CALL_OW 255
14596: PUSH
14597: LD_INT 2
14599: EQUAL
14600: OR
14601: PUSH
14602: LD_EXP 51
14606: PPUSH
14607: CALL_OW 302
14611: AND
14612: PUSH
14613: LD_EXP 26
14617: PPUSH
14618: CALL_OW 302
14622: AND
14623: PUSH
14624: LD_EXP 36
14628: PPUSH
14629: CALL_OW 302
14633: AND
14634: IFFALSE 15373
14636: GO 14638
14638: DISABLE
14639: LD_INT 0
14641: PPUSH
14642: PPUSH
14643: PPUSH
14644: PPUSH
14645: PPUSH
// begin DialogueOn ;
14646: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
14650: LD_INT 111
14652: PPUSH
14653: LD_INT 90
14655: PPUSH
14656: LD_INT 2
14658: PPUSH
14659: LD_INT 6
14661: NEG
14662: PPUSH
14663: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
14667: LD_INT 111
14669: PPUSH
14670: LD_INT 90
14672: PPUSH
14673: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
14677: LD_EXP 36
14681: PPUSH
14682: LD_STRING DA-Cap-1
14684: PPUSH
14685: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
14689: LD_EXP 26
14693: PPUSH
14694: LD_STRING DH-Cap-2
14696: PPUSH
14697: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
14701: LD_INT 111
14703: PPUSH
14704: LD_INT 90
14706: PPUSH
14707: LD_INT 2
14709: PPUSH
14710: CALL_OW 331
// DialogueOff ;
14714: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
14718: LD_INT 35
14720: PPUSH
14721: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 110 , 95 , 12 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_distxy , 110 , 95 , 12 ] ] ) ;
14725: LD_EXP 17
14729: PUSH
14730: LD_INT 106
14732: PPUSH
14733: CALL_OW 255
14737: PUSH
14738: LD_INT 2
14740: EQUAL
14741: OR
14742: PUSH
14743: LD_EXP 51
14747: PPUSH
14748: CALL_OW 255
14752: PUSH
14753: LD_INT 2
14755: EQUAL
14756: OR
14757: PUSH
14758: LD_EXP 51
14762: PPUSH
14763: CALL_OW 302
14767: AND
14768: PUSH
14769: LD_EXP 36
14773: PPUSH
14774: CALL_OW 302
14778: AND
14779: PUSH
14780: LD_INT 2
14782: PPUSH
14783: CALL_OW 463
14787: NOT
14788: AND
14789: PUSH
14790: LD_INT 22
14792: PUSH
14793: LD_INT 3
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: LD_INT 21
14802: PUSH
14803: LD_INT 1
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: LD_INT 92
14812: PUSH
14813: LD_INT 110
14815: PUSH
14816: LD_INT 95
14818: PUSH
14819: LD_INT 12
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: LIST
14832: PPUSH
14833: CALL_OW 69
14837: NOT
14838: AND
14839: PUSH
14840: LD_INT 22
14842: PUSH
14843: LD_INT 3
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: PUSH
14850: LD_INT 30
14852: PUSH
14853: LD_INT 5
14855: PUSH
14856: EMPTY
14857: LIST
14858: LIST
14859: PUSH
14860: LD_INT 92
14862: PUSH
14863: LD_INT 110
14865: PUSH
14866: LD_INT 95
14868: PUSH
14869: LD_INT 12
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: LIST
14882: PPUSH
14883: CALL_OW 69
14887: NOT
14888: AND
14889: IFFALSE 14718
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14891: LD_ADDR_VAR 0 2
14895: PUSH
14896: LD_EXP 38
14900: PUSH
14901: LD_EXP 29
14905: PUSH
14906: LD_EXP 30
14910: PUSH
14911: LD_EXP 32
14915: PUSH
14916: LD_EXP 31
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: UNION
14927: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14928: LD_ADDR_VAR 0 2
14932: PUSH
14933: LD_VAR 0 2
14937: PPUSH
14938: LD_INT 50
14940: PUSH
14941: EMPTY
14942: LIST
14943: PPUSH
14944: CALL_OW 72
14948: ST_TO_ADDR
// if tmp < 2 then
14949: LD_VAR 0 2
14953: PUSH
14954: LD_INT 2
14956: LESS
14957: IFFALSE 14969
// q := 2 else
14959: LD_ADDR_VAR 0 4
14963: PUSH
14964: LD_INT 2
14966: ST_TO_ADDR
14967: GO 14982
// q := Query ( LabCap ) ;
14969: LD_ADDR_VAR 0 4
14973: PUSH
14974: LD_STRING LabCap
14976: PPUSH
14977: CALL_OW 97
14981: ST_TO_ADDR
// case q of 1 :
14982: LD_VAR 0 4
14986: PUSH
14987: LD_INT 1
14989: DOUBLE
14990: EQUAL
14991: IFTRUE 14995
14993: GO 15337
14995: POP
// begin DoNotAttack ( 2 , ruLab ) ;
14996: LD_INT 2
14998: PPUSH
14999: LD_EXP 51
15003: PPUSH
15004: CALL_OW 471
// labCaptured := true ;
15008: LD_ADDR_EXP 21
15012: PUSH
15013: LD_INT 1
15015: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
15016: LD_EXP 26
15020: PPUSH
15021: LD_STRING DH-Cap-a-1
15023: PPUSH
15024: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
15028: LD_EXP 36
15032: PPUSH
15033: LD_STRING DA-Cap-a-2
15035: PPUSH
15036: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike , Givi , Kurt , Markov ] ^ [ sel_changeable ] ^ tmp ;
15040: LD_ADDR_VAR 0 5
15044: PUSH
15045: LD_EXP 36
15049: PUSH
15050: LD_INT -3
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: PUSH
15057: LD_INT -2
15059: PUSH
15060: LD_INT -4
15062: PUSH
15063: LD_EXP 26
15067: PUSH
15068: LD_EXP 27
15072: PUSH
15073: LD_EXP 35
15077: PUSH
15078: LD_EXP 33
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: ADD
15091: PUSH
15092: LD_INT -3
15094: PUSH
15095: EMPTY
15096: LIST
15097: ADD
15098: PUSH
15099: LD_VAR 0 2
15103: ADD
15104: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
15105: LD_ADDR_VAR 0 3
15109: PUSH
15110: LD_STRING Select two characters to go with Aviradze
15112: PPUSH
15113: LD_INT 2
15115: PPUSH
15116: LD_INT 2
15118: PPUSH
15119: LD_VAR 0 5
15123: PPUSH
15124: EMPTY
15125: PPUSH
15126: CALL_OW 42
15130: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
15131: LD_EXP 51
15135: PPUSH
15136: LD_INT 8
15138: PPUSH
15139: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
15143: LD_EXP 36
15147: PPUSH
15148: LD_INT 8
15150: PPUSH
15151: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
15155: LD_ADDR_EXP 40
15159: PUSH
15160: LD_EXP 36
15164: PUSH
15165: EMPTY
15166: LIST
15167: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
15168: LD_EXP 36
15172: PPUSH
15173: CALL_OW 310
15177: IFFALSE 15188
// ComExit ( Aviradze ) ;
15179: LD_EXP 36
15183: PPUSH
15184: CALL 77322 0 1
// wait ( 3 ) ;
15188: LD_INT 3
15190: PPUSH
15191: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
15195: LD_EXP 36
15199: PPUSH
15200: LD_EXP 51
15204: PPUSH
15205: CALL_OW 120
// for i := 1 to 2 do
15209: LD_ADDR_VAR 0 1
15213: PUSH
15214: DOUBLE
15215: LD_INT 1
15217: DEC
15218: ST_TO_ADDR
15219: LD_INT 2
15221: PUSH
15222: FOR_TO
15223: IFFALSE 15326
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
15225: LD_ADDR_EXP 40
15229: PUSH
15230: LD_EXP 40
15234: PUSH
15235: LD_VAR 0 3
15239: PUSH
15240: LD_VAR 0 1
15244: ARRAY
15245: UNION
15246: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
15247: LD_VAR 0 3
15251: PUSH
15252: LD_VAR 0 1
15256: ARRAY
15257: PPUSH
15258: LD_INT 8
15260: PPUSH
15261: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
15265: LD_VAR 0 3
15269: PUSH
15270: LD_VAR 0 1
15274: ARRAY
15275: PPUSH
15276: CALL_OW 310
15280: IFFALSE 15297
// ComExit ( tmp2 [ i ] ) ;
15282: LD_VAR 0 3
15286: PUSH
15287: LD_VAR 0 1
15291: ARRAY
15292: PPUSH
15293: CALL 77322 0 1
// wait ( 3 ) ;
15297: LD_INT 3
15299: PPUSH
15300: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
15304: LD_VAR 0 3
15308: PUSH
15309: LD_VAR 0 1
15313: ARRAY
15314: PPUSH
15315: LD_EXP 51
15319: PPUSH
15320: CALL_OW 120
// end ;
15324: GO 15222
15326: POP
15327: POP
// SetAchievement ( ACH_LAB ) ;
15328: LD_STRING ACH_LAB
15330: PPUSH
15331: CALL_OW 543
// end ; 2 :
15335: GO 15373
15337: LD_INT 2
15339: DOUBLE
15340: EQUAL
15341: IFTRUE 15345
15343: GO 15372
15345: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
15346: LD_EXP 26
15350: PPUSH
15351: LD_STRING DH-Cap-b-1
15353: PPUSH
15354: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
15358: LD_EXP 36
15362: PPUSH
15363: LD_STRING DA-Cap-b-2
15365: PPUSH
15366: CALL_OW 88
// end ; end ;
15370: GO 15373
15372: POP
// end ;
15373: PPOPN 5
15375: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
15376: LD_INT 10
15378: PPUSH
15379: LD_INT 22
15381: PUSH
15382: LD_INT 2
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: PUSH
15389: LD_INT 30
15391: PUSH
15392: LD_INT 31
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: PPUSH
15403: CALL_OW 70
15407: PUSH
15408: LD_INT 2
15410: GREATEREQUAL
15411: IFFALSE 15423
15413: GO 15415
15415: DISABLE
// SetAchievement ( ACH_KING ) ;
15416: LD_STRING ACH_KING
15418: PPUSH
15419: CALL_OW 543
15423: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
15424: LD_EXP 11
15428: NOT
15429: PUSH
15430: LD_INT 10
15432: PPUSH
15433: LD_INT 22
15435: PUSH
15436: LD_INT 2
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 2
15445: PUSH
15446: LD_INT 30
15448: PUSH
15449: LD_INT 31
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PUSH
15456: LD_INT 30
15458: PUSH
15459: LD_INT 4
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: LIST
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PPUSH
15475: CALL_OW 70
15479: AND
15480: IFFALSE 15510
15482: GO 15484
15484: DISABLE
// begin hillBase := true ;
15485: LD_ADDR_EXP 15
15489: PUSH
15490: LD_INT 1
15492: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
15493: LD_STRING HillDone
15495: PPUSH
15496: CALL_OW 337
// SetAreaMapShow ( bunkerHillArea , 0 ) ;
15500: LD_INT 22
15502: PPUSH
15503: LD_INT 0
15505: PPUSH
15506: CALL_OW 424
// end ;
15510: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
15511: LD_EXP 31
15515: PUSH
15516: LD_EXP 31
15520: PPUSH
15521: CALL_OW 256
15525: PUSH
15526: LD_INT 3
15528: LESS
15529: AND
15530: IFFALSE 15576
15532: GO 15534
15534: DISABLE
// begin DialogueOn ;
15535: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
15539: LD_EXP 31
15543: PPUSH
15544: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
15548: LD_EXP 31
15552: PPUSH
15553: LD_STRING DK-Kkilled-1
15555: PPUSH
15556: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
15560: LD_EXP 26
15564: PPUSH
15565: LD_STRING DH-Kkilled-2
15567: PPUSH
15568: CALL_OW 88
// DialogueOff ;
15572: CALL_OW 7
// end ;
15576: END
// every 0 0$1 trigger kaiaKilledByRussian do
15577: LD_EXP 23
15581: IFFALSE 15598
15583: GO 15585
15585: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
15586: LD_EXP 26
15590: PPUSH
15591: LD_STRING DH-Kkilled-3
15593: PPUSH
15594: CALL_OW 88
15598: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo , driver ;
15599: LD_EXP 16
15603: PUSH
15604: LD_INT 106
15606: PPUSH
15607: CALL_OW 255
15611: PUSH
15612: LD_INT 2
15614: EQUAL
15615: PUSH
15616: LD_EXP 17
15620: OR
15621: AND
15622: PUSH
15623: LD_EXP 18
15627: PUSH
15628: LD_EXP 24
15632: PUSH
15633: LD_INT 112
15635: PPUSH
15636: CALL_OW 255
15640: PUSH
15641: LD_INT 2
15643: EQUAL
15644: AND
15645: OR
15646: AND
15647: IFFALSE 16887
15649: GO 15651
15651: DISABLE
15652: LD_INT 0
15654: PPUSH
15655: PPUSH
15656: PPUSH
15657: PPUSH
15658: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
15659: LD_STRING GoToWest
15661: PPUSH
15662: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
15666: LD_INT 17
15668: PPUSH
15669: LD_INT 1
15671: PPUSH
15672: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
15676: LD_INT 35
15678: PPUSH
15679: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15683: LD_ADDR_VAR 0 2
15687: PUSH
15688: LD_INT 17
15690: PPUSH
15691: LD_INT 22
15693: PUSH
15694: LD_INT 2
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PUSH
15701: LD_INT 2
15703: PUSH
15704: LD_INT 21
15706: PUSH
15707: LD_INT 1
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: LD_INT 21
15716: PUSH
15717: LD_INT 2
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: LD_INT 3
15726: PUSH
15727: LD_INT 58
15729: PUSH
15730: EMPTY
15731: LIST
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: LIST
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: PPUSH
15750: CALL_OW 70
15754: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15755: LD_ADDR_VAR 0 3
15759: PUSH
15760: LD_INT 22
15762: PUSH
15763: LD_INT 2
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: PUSH
15770: LD_INT 3
15772: PUSH
15773: LD_INT 55
15775: PUSH
15776: EMPTY
15777: LIST
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PUSH
15783: LD_INT 2
15785: PUSH
15786: LD_INT 21
15788: PUSH
15789: LD_INT 1
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PUSH
15796: LD_INT 21
15798: PUSH
15799: LD_INT 2
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: LD_INT 3
15808: PUSH
15809: LD_INT 58
15811: PUSH
15812: EMPTY
15813: LIST
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: PUSH
15819: EMPTY
15820: LIST
15821: LIST
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: LIST
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: LIST
15832: PPUSH
15833: CALL_OW 69
15837: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15838: LD_VAR 0 2
15842: PUSH
15843: LD_INT 0
15845: PLUS
15846: PUSH
15847: LD_VAR 0 3
15851: PUSH
15852: LD_INT 0
15854: PLUS
15855: EQUAL
15856: IFFALSE 15676
// SaveCharacters ( Heike , 04_1_Heike ) ;
15858: LD_EXP 26
15862: PPUSH
15863: LD_STRING 04_1_Heike
15865: PPUSH
15866: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15870: LD_EXP 36
15874: PUSH
15875: LD_EXP 36
15879: PUSH
15880: LD_EXP 40
15884: IN
15885: NOT
15886: AND
15887: IFFALSE 15903
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15889: LD_EXP 36
15893: PPUSH
15894: LD_STRING 04_1_Aviradze
15896: PPUSH
15897: CALL_OW 38
15901: GO 15921
// if Aviradze then
15903: LD_EXP 36
15907: IFFALSE 15921
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15909: LD_EXP 36
15913: PPUSH
15914: LD_STRING 04_1_Aviradze_L
15916: PPUSH
15917: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15921: LD_EXP 29
15925: PUSH
15926: LD_EXP 29
15930: PUSH
15931: LD_EXP 40
15935: IN
15936: NOT
15937: AND
15938: IFFALSE 15954
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15940: LD_EXP 29
15944: PPUSH
15945: LD_STRING 04_1_Ibrahim
15947: PPUSH
15948: CALL_OW 38
15952: GO 15972
// if Ibrahim then
15954: LD_EXP 29
15958: IFFALSE 15972
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
15960: LD_EXP 29
15964: PPUSH
15965: LD_STRING 04_1_Ibrahim_L
15967: PPUSH
15968: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
15972: LD_EXP 30
15976: PUSH
15977: LD_EXP 30
15981: PUSH
15982: LD_EXP 40
15986: IN
15987: NOT
15988: AND
15989: IFFALSE 16005
// SaveCharacters ( Kamil , 04_1_Kamil ) else
15991: LD_EXP 30
15995: PPUSH
15996: LD_STRING 04_1_Kamil
15998: PPUSH
15999: CALL_OW 38
16003: GO 16023
// if Kamil then
16005: LD_EXP 30
16009: IFFALSE 16023
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
16011: LD_EXP 30
16015: PPUSH
16016: LD_STRING 04_1_Kamil_L
16018: PPUSH
16019: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
16023: LD_EXP 32
16027: PUSH
16028: LD_EXP 32
16032: PUSH
16033: LD_EXP 40
16037: IN
16038: NOT
16039: AND
16040: IFFALSE 16056
// SaveCharacters ( Sophia , 04_1_Sophia ) else
16042: LD_EXP 32
16046: PPUSH
16047: LD_STRING 04_1_Sophia
16049: PPUSH
16050: CALL_OW 38
16054: GO 16074
// if Sophia then
16056: LD_EXP 32
16060: IFFALSE 16074
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
16062: LD_EXP 32
16066: PPUSH
16067: LD_STRING 04_1_Sophia_L
16069: PPUSH
16070: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
16074: LD_EXP 31
16078: PUSH
16079: LD_EXP 31
16083: PUSH
16084: LD_EXP 40
16088: IN
16089: NOT
16090: AND
16091: IFFALSE 16107
// SaveCharacters ( Kaia , 04_1_Kaia ) else
16093: LD_EXP 31
16097: PPUSH
16098: LD_STRING 04_1_Kaia
16100: PPUSH
16101: CALL_OW 38
16105: GO 16125
// if Kaia then
16107: LD_EXP 31
16111: IFFALSE 16125
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
16113: LD_EXP 31
16117: PPUSH
16118: LD_STRING 04_1_Kaia_L
16120: PPUSH
16121: CALL_OW 38
// if Givi then
16125: LD_EXP 27
16129: IFFALSE 16143
// SaveCharacters ( Givi , 04_1_Givi ) ;
16131: LD_EXP 27
16135: PPUSH
16136: LD_STRING 04_1_Givi
16138: PPUSH
16139: CALL_OW 38
// if Mike then
16143: LD_EXP 28
16147: IFFALSE 16161
// SaveCharacters ( Mike , 04_1_Mike ) ;
16149: LD_EXP 28
16153: PPUSH
16154: LD_STRING 04_1_Mike
16156: PPUSH
16157: CALL_OW 38
// if Markov then
16161: LD_EXP 33
16165: IFFALSE 16179
// SaveCharacters ( Markov , 04_1_Markov ) ;
16167: LD_EXP 33
16171: PPUSH
16172: LD_STRING 04_1_Markov
16174: PPUSH
16175: CALL_OW 38
// if Kurt then
16179: LD_EXP 35
16183: IFFALSE 16204
// begin SaveCharacters ( Kurt , 04_1_Kurt ) ;
16185: LD_EXP 35
16189: PPUSH
16190: LD_STRING 04_1_Kurt
16192: PPUSH
16193: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KURT) ) ;
16197: LD_STRING enableBioCharacter(BIO_KURT)
16199: PPUSH
16200: CALL_OW 559
// end ; if heikeSecondSquad diff aviradzeSquad then
16204: LD_EXP 38
16208: PUSH
16209: LD_EXP 40
16213: DIFF
16214: IFFALSE 16234
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
16216: LD_EXP 38
16220: PUSH
16221: LD_EXP 40
16225: DIFF
16226: PPUSH
16227: LD_STRING 04_1_others
16229: PPUSH
16230: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
16234: LD_EXP 40
16238: PUSH
16239: LD_EXP 38
16243: AND
16244: IFFALSE 16329
// begin tmp := [ ] ;
16246: LD_ADDR_VAR 0 2
16250: PUSH
16251: EMPTY
16252: ST_TO_ADDR
// for i in heikeSecondSquad do
16253: LD_ADDR_VAR 0 1
16257: PUSH
16258: LD_EXP 38
16262: PUSH
16263: FOR_IN
16264: IFFALSE 16309
// if i in aviradzeSquad then
16266: LD_VAR 0 1
16270: PUSH
16271: LD_EXP 40
16275: IN
16276: IFFALSE 16307
// tmp := Replace ( tmp , tmp + 1 , i ) ;
16278: LD_ADDR_VAR 0 2
16282: PUSH
16283: LD_VAR 0 2
16287: PPUSH
16288: LD_VAR 0 2
16292: PUSH
16293: LD_INT 1
16295: PLUS
16296: PPUSH
16297: LD_VAR 0 1
16301: PPUSH
16302: CALL_OW 1
16306: ST_TO_ADDR
16307: GO 16263
16309: POP
16310: POP
// if tmp then
16311: LD_VAR 0 2
16315: IFFALSE 16329
// SaveCharacters ( tmp , 04_1_others_L ) ;
16317: LD_VAR 0 2
16321: PPUSH
16322: LD_STRING 04_1_others_L
16324: PPUSH
16325: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
16329: LD_ADDR_VAR 0 2
16333: PUSH
16334: LD_INT 22
16336: PUSH
16337: LD_INT 2
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PUSH
16344: LD_INT 23
16346: PUSH
16347: LD_INT 0
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: PPUSH
16358: CALL_OW 69
16362: ST_TO_ADDR
// if tmp then
16363: LD_VAR 0 2
16367: IFFALSE 16381
// SaveCharacters ( tmp , 04_1_apes ) ;
16369: LD_VAR 0 2
16373: PPUSH
16374: LD_STRING 04_1_apes
16376: PPUSH
16377: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
16381: LD_ADDR_VAR 0 2
16385: PUSH
16386: LD_INT 17
16388: PPUSH
16389: LD_INT 21
16391: PUSH
16392: LD_INT 2
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PPUSH
16399: CALL_OW 70
16403: ST_TO_ADDR
// if tmp then
16404: LD_VAR 0 2
16408: IFFALSE 16752
// begin tmp2 := [ ] ;
16410: LD_ADDR_VAR 0 3
16414: PUSH
16415: EMPTY
16416: ST_TO_ADDR
// for i in tmp do
16417: LD_ADDR_VAR 0 1
16421: PUSH
16422: LD_VAR 0 2
16426: PUSH
16427: FOR_IN
16428: IFFALSE 16738
// begin driver := IsDrivenBy ( i ) ;
16430: LD_ADDR_VAR 0 5
16434: PUSH
16435: LD_VAR 0 1
16439: PPUSH
16440: CALL_OW 311
16444: ST_TO_ADDR
// if not driver then
16445: LD_VAR 0 5
16449: NOT
16450: IFFALSE 16454
// continue ;
16452: GO 16427
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay ] then
16454: LD_VAR 0 1
16458: PPUSH
16459: CALL_OW 264
16463: PUSH
16464: LD_INT 32
16466: PUSH
16467: LD_INT 12
16469: PUSH
16470: LD_INT 51
16472: PUSH
16473: LD_INT 89
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: IN
16482: IFFALSE 16630
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
16484: LD_ADDR_VAR 0 4
16488: PUSH
16489: LD_VAR 0 1
16493: PPUSH
16494: LD_INT 1
16496: PPUSH
16497: CALL_OW 289
16501: PUSH
16502: LD_VAR 0 1
16506: PPUSH
16507: LD_INT 2
16509: PPUSH
16510: CALL_OW 289
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo , GetClass ( driver ) ] ) ;
16519: LD_ADDR_VAR 0 3
16523: PUSH
16524: LD_VAR 0 3
16528: PPUSH
16529: LD_VAR 0 3
16533: PUSH
16534: LD_INT 1
16536: PLUS
16537: PPUSH
16538: LD_VAR 0 1
16542: PPUSH
16543: CALL_OW 265
16547: PUSH
16548: LD_VAR 0 1
16552: PPUSH
16553: CALL_OW 262
16557: PUSH
16558: LD_VAR 0 1
16562: PPUSH
16563: CALL_OW 263
16567: PUSH
16568: LD_VAR 0 1
16572: PPUSH
16573: CALL_OW 264
16577: PUSH
16578: LD_VAR 0 1
16582: PPUSH
16583: CALL_OW 248
16587: PUSH
16588: LD_VAR 0 1
16592: PPUSH
16593: CALL_OW 256
16597: PUSH
16598: LD_VAR 0 4
16602: PUSH
16603: LD_VAR 0 5
16607: PPUSH
16608: CALL_OW 257
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: PPUSH
16623: CALL_OW 1
16627: ST_TO_ADDR
// end else
16628: GO 16736
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] , GetClass ( driver ) ] ) ;
16630: LD_ADDR_VAR 0 3
16634: PUSH
16635: LD_VAR 0 3
16639: PPUSH
16640: LD_VAR 0 3
16644: PUSH
16645: LD_INT 1
16647: PLUS
16648: PPUSH
16649: LD_VAR 0 1
16653: PPUSH
16654: CALL_OW 265
16658: PUSH
16659: LD_VAR 0 1
16663: PPUSH
16664: CALL_OW 262
16668: PUSH
16669: LD_VAR 0 1
16673: PPUSH
16674: CALL_OW 263
16678: PUSH
16679: LD_VAR 0 1
16683: PPUSH
16684: CALL_OW 264
16688: PUSH
16689: LD_VAR 0 1
16693: PPUSH
16694: CALL_OW 248
16698: PUSH
16699: LD_VAR 0 1
16703: PPUSH
16704: CALL_OW 256
16708: PUSH
16709: EMPTY
16710: PUSH
16711: LD_VAR 0 5
16715: PPUSH
16716: CALL_OW 257
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: PPUSH
16731: CALL_OW 1
16735: ST_TO_ADDR
// end ;
16736: GO 16427
16738: POP
16739: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
16740: LD_VAR 0 3
16744: PPUSH
16745: LD_STRING 04_1_Vehicles
16747: PPUSH
16748: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
16752: LD_EXP 21
16756: PPUSH
16757: LD_STRING 04_1_RuLabCaptured
16759: PPUSH
16760: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
16764: LD_EXP 19
16768: PPUSH
16769: LD_STRING 04_1_EscapeCounter
16771: PPUSH
16772: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
16776: LD_EXP 15
16780: PPUSH
16781: LD_STRING 04_1_BaseHill
16783: PPUSH
16784: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
16788: LD_OWVAR 1
16792: PPUSH
16793: LD_STRING 04_1_Time
16795: PPUSH
16796: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
16800: LD_EXP 14
16804: PPUSH
16805: LD_STRING 04_1_DeadCounter
16807: PPUSH
16808: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
16812: LD_EXP 24
16816: PUSH
16817: LD_INT 112
16819: PPUSH
16820: CALL_OW 255
16824: MUL
16825: PUSH
16826: LD_INT 2
16828: EQUAL
16829: PPUSH
16830: LD_STRING 04_1_KaganCaptured
16832: PPUSH
16833: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
16837: LD_INT 22
16839: PUSH
16840: LD_INT 2
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PUSH
16847: LD_INT 34
16849: PUSH
16850: LD_INT 26
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: PPUSH
16861: CALL_OW 69
16865: PUSH
16866: LD_INT 0
16868: PLUS
16869: PPUSH
16870: LD_STRING 04_1_Flamethrower
16872: PPUSH
16873: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16877: LD_INT 1
16879: PPUSH
16880: LD_STRING __x1\04_cont2
16882: PPUSH
16883: CALL_OW 340
// end ; end_of_file
16887: PPOPN 5
16889: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16890: LD_VAR 0 1
16894: PPUSH
16895: CALL_OW 266
16899: PUSH
16900: LD_INT 0
16902: EQUAL
16903: PUSH
16904: LD_VAR 0 1
16908: PPUSH
16909: CALL_OW 255
16913: PUSH
16914: LD_INT 2
16916: EQUAL
16917: AND
16918: IFFALSE 16928
// baseConstructed := true ;
16920: LD_ADDR_EXP 3
16924: PUSH
16925: LD_INT 1
16927: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16928: LD_VAR 0 1
16932: PPUSH
16933: CALL_OW 266
16937: PUSH
16938: LD_INT 6
16940: EQUAL
16941: PUSH
16942: LD_VAR 0 1
16946: PPUSH
16947: CALL_OW 255
16951: PUSH
16952: LD_INT 2
16954: EQUAL
16955: AND
16956: IFFALSE 16966
// labConstructed := true ;
16958: LD_ADDR_EXP 4
16962: PUSH
16963: LD_INT 1
16965: ST_TO_ADDR
// end ;
16966: PPOPN 1
16968: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
16969: LD_VAR 0 1
16973: PPUSH
16974: CALL 33908 0 1
// if un = Heike then
16978: LD_VAR 0 1
16982: PUSH
16983: LD_EXP 26
16987: EQUAL
16988: IFFALSE 16997
// YouLost ( Heike ) ;
16990: LD_STRING Heike
16992: PPUSH
16993: CALL_OW 104
// if un = Omar then
16997: LD_VAR 0 1
17001: PUSH
17002: LD_EXP 34
17006: EQUAL
17007: IFFALSE 17016
// YouLost ( Omar ) ;
17009: LD_STRING Omar
17011: PPUSH
17012: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
17016: LD_VAR 0 1
17020: PUSH
17021: LD_INT 22
17023: PUSH
17024: LD_INT 2
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 23
17033: PUSH
17034: LD_INT 2
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: LD_INT 21
17043: PUSH
17044: LD_INT 1
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: LIST
17055: PPUSH
17056: CALL_OW 69
17060: IN
17061: IFFALSE 17077
// loseCounter := loseCounter + 1 ;
17063: LD_ADDR_EXP 14
17067: PUSH
17068: LD_EXP 14
17072: PUSH
17073: LD_INT 1
17075: PLUS
17076: ST_TO_ADDR
// if un = omikron then
17077: LD_VAR 0 1
17081: PUSH
17082: LD_INT 64
17084: EQUAL
17085: IFFALSE 17095
// omicronFall := true ;
17087: LD_ADDR_EXP 13
17091: PUSH
17092: LD_INT 1
17094: ST_TO_ADDR
// if un = kirov then
17095: LD_VAR 0 1
17099: PUSH
17100: LD_INT 71
17102: EQUAL
17103: IFFALSE 17120
// begin ChangeMissionObjectives ( KirovDone ) ;
17105: LD_STRING KirovDone
17107: PPUSH
17108: CALL_OW 337
// kirovDestroyed := true ;
17112: LD_ADDR_EXP 16
17116: PUSH
17117: LD_INT 1
17119: ST_TO_ADDR
// end ; if un = beria then
17120: LD_VAR 0 1
17124: PUSH
17125: LD_INT 106
17127: EQUAL
17128: IFFALSE 17145
// begin ChangeMissionObjectives ( BeriaDone ) ;
17130: LD_STRING BeriaDone
17132: PPUSH
17133: CALL_OW 337
// beriaDestroyed := true ;
17137: LD_ADDR_EXP 17
17141: PUSH
17142: LD_INT 1
17144: ST_TO_ADDR
// end ; if un = kagan then
17145: LD_VAR 0 1
17149: PUSH
17150: LD_INT 112
17152: EQUAL
17153: IFFALSE 17163
// kaganDestroyed := true ;
17155: LD_ADDR_EXP 18
17159: PUSH
17160: LD_INT 1
17162: ST_TO_ADDR
// if un in russianPatrol then
17163: LD_VAR 0 1
17167: PUSH
17168: LD_EXP 48
17172: IN
17173: IFFALSE 17191
// russianPatrol := russianPatrol diff un ;
17175: LD_ADDR_EXP 48
17179: PUSH
17180: LD_EXP 48
17184: PUSH
17185: LD_VAR 0 1
17189: DIFF
17190: ST_TO_ADDR
// if un in russianOmicronAttackers then
17191: LD_VAR 0 1
17195: PUSH
17196: LD_EXP 49
17200: IN
17201: IFFALSE 17219
// russianOmicronAttackers := russianOmicronAttackers diff un ;
17203: LD_ADDR_EXP 49
17207: PUSH
17208: LD_EXP 49
17212: PUSH
17213: LD_VAR 0 1
17217: DIFF
17218: ST_TO_ADDR
// end ;
17219: PPOPN 1
17221: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
17222: LD_INT 0
17224: PPUSH
17225: PPUSH
17226: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
17227: LD_VAR 0 1
17231: PUSH
17232: LD_INT 2
17234: PUSH
17235: LD_INT 22
17237: PUSH
17238: LD_INT 3
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: LD_INT 22
17247: PUSH
17248: LD_INT 4
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: LD_INT 22
17257: PUSH
17258: LD_INT 6
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: PUSH
17271: LD_INT 30
17273: PUSH
17274: LD_INT 32
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PPUSH
17285: CALL_OW 69
17289: IN
17290: IFFALSE 17463
// begin sol := UnitsInside ( un ) ;
17292: LD_ADDR_VAR 0 3
17296: PUSH
17297: LD_VAR 0 1
17301: PPUSH
17302: CALL_OW 313
17306: ST_TO_ADDR
// if not sol then
17307: LD_VAR 0 3
17311: NOT
17312: IFFALSE 17316
// exit ;
17314: GO 17463
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17316: LD_ADDR_VAR 0 4
17320: PUSH
17321: LD_INT 22
17323: PUSH
17324: LD_VAR 0 1
17328: PPUSH
17329: CALL_OW 255
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: PUSH
17338: LD_INT 2
17340: PUSH
17341: LD_INT 30
17343: PUSH
17344: LD_INT 4
17346: PUSH
17347: EMPTY
17348: LIST
17349: LIST
17350: PUSH
17351: LD_INT 30
17353: PUSH
17354: LD_INT 5
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: LIST
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PPUSH
17370: CALL_OW 69
17374: ST_TO_ADDR
// if not nearestBarracks then
17375: LD_VAR 0 4
17379: NOT
17380: IFFALSE 17384
// exit ;
17382: GO 17463
// for i in nearestBarracks do
17384: LD_ADDR_VAR 0 2
17388: PUSH
17389: LD_VAR 0 4
17393: PUSH
17394: FOR_IN
17395: IFFALSE 17430
// if UnitsInside ( i ) = 6 then
17397: LD_VAR 0 2
17401: PPUSH
17402: CALL_OW 313
17406: PUSH
17407: LD_INT 6
17409: EQUAL
17410: IFFALSE 17428
// nearestBarracks := nearestBarracks diff i ;
17412: LD_ADDR_VAR 0 4
17416: PUSH
17417: LD_VAR 0 4
17421: PUSH
17422: LD_VAR 0 2
17426: DIFF
17427: ST_TO_ADDR
17428: GO 17394
17430: POP
17431: POP
// if not nearestBarracks then
17432: LD_VAR 0 4
17436: NOT
17437: IFFALSE 17441
// exit ;
17439: GO 17463
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
17441: LD_VAR 0 3
17445: PUSH
17446: LD_INT 1
17448: ARRAY
17449: PPUSH
17450: LD_VAR 0 4
17454: PUSH
17455: LD_INT 1
17457: ARRAY
17458: PPUSH
17459: CALL_OW 120
// end ; end ;
17463: PPOPN 4
17465: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
17466: LD_INT 0
17468: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
17469: LD_EXP 8
17473: NOT
17474: PUSH
17475: LD_EXP 5
17479: NOT
17480: OR
17481: IFFALSE 17485
// exit ;
17483: GO 17553
// for i in camAreas do
17485: LD_ADDR_VAR 0 5
17489: PUSH
17490: LD_EXP 8
17494: PUSH
17495: FOR_IN
17496: IFFALSE 17551
// if InArea ( x , y , i ) then
17498: LD_VAR 0 3
17502: PPUSH
17503: LD_VAR 0 4
17507: PPUSH
17508: LD_VAR 0 5
17512: PPUSH
17513: CALL_OW 309
17517: IFFALSE 17549
// begin SetAreaMapShow ( i , 0 ) ;
17519: LD_VAR 0 5
17523: PPUSH
17524: LD_INT 0
17526: PPUSH
17527: CALL_OW 424
// camAreas := camAreas diff i ;
17531: LD_ADDR_EXP 8
17535: PUSH
17536: LD_EXP 8
17540: PUSH
17541: LD_VAR 0 5
17545: DIFF
17546: ST_TO_ADDR
// break ;
17547: GO 17551
// end ;
17549: GO 17495
17551: POP
17552: POP
// end ;
17553: PPOPN 5
17555: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
17556: LD_VAR 0 1
17560: PUSH
17561: LD_INT 2
17563: EQUAL
17564: PUSH
17565: LD_VAR 0 2
17569: PUSH
17570: LD_INT 5
17572: PUSH
17573: LD_INT 8
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: IN
17580: AND
17581: IFFALSE 17590
// YouLost ( Ally ) ;
17583: LD_STRING Ally
17585: PPUSH
17586: CALL_OW 104
// end ;
17590: PPOPN 2
17592: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
17593: LD_VAR 0 1
17597: PUSH
17598: LD_EXP 31
17602: EQUAL
17603: PUSH
17604: LD_VAR 0 2
17608: PUSH
17609: LD_INT 3
17611: PUSH
17612: LD_INT 6
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: IN
17619: AND
17620: IFFALSE 17651
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
17622: LD_ADDR_EXP 23
17626: PUSH
17627: LD_VAR 0 1
17631: PPUSH
17632: CALL_OW 250
17636: PUSH
17637: LD_VAR 0 1
17641: PPUSH
17642: CALL_OW 251
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: ST_TO_ADDR
// end ;
17651: PPOPN 3
17653: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
17654: LD_VAR 0 1
17658: PPUSH
17659: LD_VAR 0 2
17663: PPUSH
17664: CALL 33966 0 2
// end ; end_of_file
17668: PPOPN 2
17670: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 , 10 ] [ Difficulty ] do
17671: LD_EXP 11
17675: NOT
17676: PUSH
17677: LD_INT 12
17679: PPUSH
17680: LD_INT 1
17682: PPUSH
17683: CALL_OW 287
17687: PUSH
17688: LD_INT 20
17690: PUSH
17691: LD_INT 16
17693: PUSH
17694: LD_INT 12
17696: PUSH
17697: LD_INT 10
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: PUSH
17706: LD_OWVAR 67
17710: ARRAY
17711: LESS
17712: AND
17713: IFFALSE 17740
17715: GO 17717
17717: DISABLE
// begin enable ;
17718: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
17719: LD_INT 1
17721: PPUSH
17722: LD_INT 5
17724: PPUSH
17725: CALL_OW 12
17729: PPUSH
17730: LD_INT 12
17732: PPUSH
17733: LD_INT 1
17735: PPUSH
17736: CALL_OW 55
// end ; end_of_file
17740: END
// every 0 0$1 trigger omarCountdown do
17741: LD_EXP 22
17745: IFFALSE 17797
17747: GO 17749
17749: DISABLE
// begin enable ;
17750: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
17751: LD_ADDR_OWVAR 47
17755: PUSH
17756: LD_STRING #X104-1
17758: PUSH
17759: LD_EXP 22
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
17768: LD_ADDR_EXP 22
17772: PUSH
17773: LD_EXP 22
17777: PUSH
17778: LD_INT 35
17780: MINUS
17781: ST_TO_ADDR
// if not omarCountdown then
17782: LD_EXP 22
17786: NOT
17787: IFFALSE 17797
// display_strings :=  ;
17789: LD_ADDR_OWVAR 47
17793: PUSH
17794: LD_STRING 
17796: ST_TO_ADDR
// end ; end_of_file
17797: END
// export globalGameSaveCounter ; every 0 0$1 do
17798: GO 17800
17800: DISABLE
// begin enable ;
17801: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
17802: LD_STRING updateTimer(
17804: PUSH
17805: LD_OWVAR 1
17809: STR
17810: PUSH
17811: LD_STRING );
17813: STR
17814: PPUSH
17815: CALL_OW 559
// end ;
17819: END
// every 0 0$1 do
17820: GO 17822
17822: DISABLE
// begin globalGameSaveCounter := 0 ;
17823: LD_ADDR_EXP 53
17827: PUSH
17828: LD_INT 0
17830: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
17831: LD_STRING setGameSaveCounter(0)
17833: PPUSH
17834: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
17838: LD_STRING initStreamRollete();
17840: PPUSH
17841: CALL_OW 559
// InitStreamMode ;
17845: CALL 19188 0 0
// DefineStreamItems ( false ) ;
17849: LD_INT 0
17851: PPUSH
17852: CALL 19652 0 1
// end ;
17856: END
// export function SOS_MapStart ( ) ; begin
17857: LD_INT 0
17859: PPUSH
// if streamModeActive then
17860: LD_EXP 54
17864: IFFALSE 17873
// DefineStreamItems ( true ) ;
17866: LD_INT 1
17868: PPUSH
17869: CALL 19652 0 1
// UpdateLuaVariables ( ) ;
17873: CALL 17890 0 0
// UpdateFactoryWaypoints ( ) ;
17877: CALL 32654 0 0
// UpdateWarehouseGatheringPoints ( ) ;
17881: CALL 32906 0 0
// end ;
17885: LD_VAR 0 1
17889: RET
// function UpdateLuaVariables ( ) ; begin
17890: LD_INT 0
17892: PPUSH
// if globalGameSaveCounter then
17893: LD_EXP 53
17897: IFFALSE 17931
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
17899: LD_ADDR_EXP 53
17903: PUSH
17904: LD_EXP 53
17908: PPUSH
17909: CALL 78285 0 1
17913: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17914: LD_STRING setGameSaveCounter(
17916: PUSH
17917: LD_EXP 53
17921: STR
17922: PUSH
17923: LD_STRING )
17925: STR
17926: PPUSH
17927: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
17931: LD_STRING setGameDifficulty(
17933: PUSH
17934: LD_OWVAR 67
17938: STR
17939: PUSH
17940: LD_STRING )
17942: STR
17943: PPUSH
17944: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
17948: LD_STRING displayDifficulty(
17950: PUSH
17951: LD_OWVAR 67
17955: STR
17956: PUSH
17957: LD_STRING )
17959: STR
17960: PPUSH
17961: CALL_OW 559
// end ;
17965: LD_VAR 0 1
17969: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17970: LD_INT 0
17972: PPUSH
// if p2 = stream_mode then
17973: LD_VAR 0 2
17977: PUSH
17978: LD_INT 100
17980: EQUAL
17981: IFFALSE 18984
// begin if not StreamModeActive then
17983: LD_EXP 54
17987: NOT
17988: IFFALSE 17998
// StreamModeActive := true ;
17990: LD_ADDR_EXP 54
17994: PUSH
17995: LD_INT 1
17997: ST_TO_ADDR
// if p3 = 0 then
17998: LD_VAR 0 3
18002: PUSH
18003: LD_INT 0
18005: EQUAL
18006: IFFALSE 18012
// InitStreamMode ;
18008: CALL 19188 0 0
// if p3 = 1 then
18012: LD_VAR 0 3
18016: PUSH
18017: LD_INT 1
18019: EQUAL
18020: IFFALSE 18030
// sRocket := true ;
18022: LD_ADDR_EXP 59
18026: PUSH
18027: LD_INT 1
18029: ST_TO_ADDR
// if p3 = 2 then
18030: LD_VAR 0 3
18034: PUSH
18035: LD_INT 2
18037: EQUAL
18038: IFFALSE 18048
// sSpeed := true ;
18040: LD_ADDR_EXP 58
18044: PUSH
18045: LD_INT 1
18047: ST_TO_ADDR
// if p3 = 3 then
18048: LD_VAR 0 3
18052: PUSH
18053: LD_INT 3
18055: EQUAL
18056: IFFALSE 18066
// sEngine := true ;
18058: LD_ADDR_EXP 60
18062: PUSH
18063: LD_INT 1
18065: ST_TO_ADDR
// if p3 = 4 then
18066: LD_VAR 0 3
18070: PUSH
18071: LD_INT 4
18073: EQUAL
18074: IFFALSE 18084
// sSpec := true ;
18076: LD_ADDR_EXP 57
18080: PUSH
18081: LD_INT 1
18083: ST_TO_ADDR
// if p3 = 5 then
18084: LD_VAR 0 3
18088: PUSH
18089: LD_INT 5
18091: EQUAL
18092: IFFALSE 18102
// sLevel := true ;
18094: LD_ADDR_EXP 61
18098: PUSH
18099: LD_INT 1
18101: ST_TO_ADDR
// if p3 = 6 then
18102: LD_VAR 0 3
18106: PUSH
18107: LD_INT 6
18109: EQUAL
18110: IFFALSE 18120
// sArmoury := true ;
18112: LD_ADDR_EXP 62
18116: PUSH
18117: LD_INT 1
18119: ST_TO_ADDR
// if p3 = 7 then
18120: LD_VAR 0 3
18124: PUSH
18125: LD_INT 7
18127: EQUAL
18128: IFFALSE 18138
// sRadar := true ;
18130: LD_ADDR_EXP 63
18134: PUSH
18135: LD_INT 1
18137: ST_TO_ADDR
// if p3 = 8 then
18138: LD_VAR 0 3
18142: PUSH
18143: LD_INT 8
18145: EQUAL
18146: IFFALSE 18156
// sBunker := true ;
18148: LD_ADDR_EXP 64
18152: PUSH
18153: LD_INT 1
18155: ST_TO_ADDR
// if p3 = 9 then
18156: LD_VAR 0 3
18160: PUSH
18161: LD_INT 9
18163: EQUAL
18164: IFFALSE 18174
// sHack := true ;
18166: LD_ADDR_EXP 65
18170: PUSH
18171: LD_INT 1
18173: ST_TO_ADDR
// if p3 = 10 then
18174: LD_VAR 0 3
18178: PUSH
18179: LD_INT 10
18181: EQUAL
18182: IFFALSE 18192
// sFire := true ;
18184: LD_ADDR_EXP 66
18188: PUSH
18189: LD_INT 1
18191: ST_TO_ADDR
// if p3 = 11 then
18192: LD_VAR 0 3
18196: PUSH
18197: LD_INT 11
18199: EQUAL
18200: IFFALSE 18210
// sRefresh := true ;
18202: LD_ADDR_EXP 67
18206: PUSH
18207: LD_INT 1
18209: ST_TO_ADDR
// if p3 = 12 then
18210: LD_VAR 0 3
18214: PUSH
18215: LD_INT 12
18217: EQUAL
18218: IFFALSE 18228
// sExp := true ;
18220: LD_ADDR_EXP 68
18224: PUSH
18225: LD_INT 1
18227: ST_TO_ADDR
// if p3 = 13 then
18228: LD_VAR 0 3
18232: PUSH
18233: LD_INT 13
18235: EQUAL
18236: IFFALSE 18246
// sDepot := true ;
18238: LD_ADDR_EXP 69
18242: PUSH
18243: LD_INT 1
18245: ST_TO_ADDR
// if p3 = 14 then
18246: LD_VAR 0 3
18250: PUSH
18251: LD_INT 14
18253: EQUAL
18254: IFFALSE 18264
// sFlag := true ;
18256: LD_ADDR_EXP 70
18260: PUSH
18261: LD_INT 1
18263: ST_TO_ADDR
// if p3 = 15 then
18264: LD_VAR 0 3
18268: PUSH
18269: LD_INT 15
18271: EQUAL
18272: IFFALSE 18282
// sKamikadze := true ;
18274: LD_ADDR_EXP 78
18278: PUSH
18279: LD_INT 1
18281: ST_TO_ADDR
// if p3 = 16 then
18282: LD_VAR 0 3
18286: PUSH
18287: LD_INT 16
18289: EQUAL
18290: IFFALSE 18300
// sTroll := true ;
18292: LD_ADDR_EXP 79
18296: PUSH
18297: LD_INT 1
18299: ST_TO_ADDR
// if p3 = 17 then
18300: LD_VAR 0 3
18304: PUSH
18305: LD_INT 17
18307: EQUAL
18308: IFFALSE 18318
// sSlow := true ;
18310: LD_ADDR_EXP 80
18314: PUSH
18315: LD_INT 1
18317: ST_TO_ADDR
// if p3 = 18 then
18318: LD_VAR 0 3
18322: PUSH
18323: LD_INT 18
18325: EQUAL
18326: IFFALSE 18336
// sLack := true ;
18328: LD_ADDR_EXP 81
18332: PUSH
18333: LD_INT 1
18335: ST_TO_ADDR
// if p3 = 19 then
18336: LD_VAR 0 3
18340: PUSH
18341: LD_INT 19
18343: EQUAL
18344: IFFALSE 18354
// sTank := true ;
18346: LD_ADDR_EXP 83
18350: PUSH
18351: LD_INT 1
18353: ST_TO_ADDR
// if p3 = 20 then
18354: LD_VAR 0 3
18358: PUSH
18359: LD_INT 20
18361: EQUAL
18362: IFFALSE 18372
// sRemote := true ;
18364: LD_ADDR_EXP 84
18368: PUSH
18369: LD_INT 1
18371: ST_TO_ADDR
// if p3 = 21 then
18372: LD_VAR 0 3
18376: PUSH
18377: LD_INT 21
18379: EQUAL
18380: IFFALSE 18390
// sPowell := true ;
18382: LD_ADDR_EXP 85
18386: PUSH
18387: LD_INT 1
18389: ST_TO_ADDR
// if p3 = 22 then
18390: LD_VAR 0 3
18394: PUSH
18395: LD_INT 22
18397: EQUAL
18398: IFFALSE 18408
// sTeleport := true ;
18400: LD_ADDR_EXP 88
18404: PUSH
18405: LD_INT 1
18407: ST_TO_ADDR
// if p3 = 23 then
18408: LD_VAR 0 3
18412: PUSH
18413: LD_INT 23
18415: EQUAL
18416: IFFALSE 18426
// sOilTower := true ;
18418: LD_ADDR_EXP 90
18422: PUSH
18423: LD_INT 1
18425: ST_TO_ADDR
// if p3 = 24 then
18426: LD_VAR 0 3
18430: PUSH
18431: LD_INT 24
18433: EQUAL
18434: IFFALSE 18444
// sShovel := true ;
18436: LD_ADDR_EXP 91
18440: PUSH
18441: LD_INT 1
18443: ST_TO_ADDR
// if p3 = 25 then
18444: LD_VAR 0 3
18448: PUSH
18449: LD_INT 25
18451: EQUAL
18452: IFFALSE 18462
// sSheik := true ;
18454: LD_ADDR_EXP 92
18458: PUSH
18459: LD_INT 1
18461: ST_TO_ADDR
// if p3 = 26 then
18462: LD_VAR 0 3
18466: PUSH
18467: LD_INT 26
18469: EQUAL
18470: IFFALSE 18480
// sEarthquake := true ;
18472: LD_ADDR_EXP 94
18476: PUSH
18477: LD_INT 1
18479: ST_TO_ADDR
// if p3 = 27 then
18480: LD_VAR 0 3
18484: PUSH
18485: LD_INT 27
18487: EQUAL
18488: IFFALSE 18498
// sAI := true ;
18490: LD_ADDR_EXP 95
18494: PUSH
18495: LD_INT 1
18497: ST_TO_ADDR
// if p3 = 28 then
18498: LD_VAR 0 3
18502: PUSH
18503: LD_INT 28
18505: EQUAL
18506: IFFALSE 18516
// sCargo := true ;
18508: LD_ADDR_EXP 98
18512: PUSH
18513: LD_INT 1
18515: ST_TO_ADDR
// if p3 = 29 then
18516: LD_VAR 0 3
18520: PUSH
18521: LD_INT 29
18523: EQUAL
18524: IFFALSE 18534
// sDLaser := true ;
18526: LD_ADDR_EXP 99
18530: PUSH
18531: LD_INT 1
18533: ST_TO_ADDR
// if p3 = 30 then
18534: LD_VAR 0 3
18538: PUSH
18539: LD_INT 30
18541: EQUAL
18542: IFFALSE 18552
// sExchange := true ;
18544: LD_ADDR_EXP 100
18548: PUSH
18549: LD_INT 1
18551: ST_TO_ADDR
// if p3 = 31 then
18552: LD_VAR 0 3
18556: PUSH
18557: LD_INT 31
18559: EQUAL
18560: IFFALSE 18570
// sFac := true ;
18562: LD_ADDR_EXP 101
18566: PUSH
18567: LD_INT 1
18569: ST_TO_ADDR
// if p3 = 32 then
18570: LD_VAR 0 3
18574: PUSH
18575: LD_INT 32
18577: EQUAL
18578: IFFALSE 18588
// sPower := true ;
18580: LD_ADDR_EXP 102
18584: PUSH
18585: LD_INT 1
18587: ST_TO_ADDR
// if p3 = 33 then
18588: LD_VAR 0 3
18592: PUSH
18593: LD_INT 33
18595: EQUAL
18596: IFFALSE 18606
// sRandom := true ;
18598: LD_ADDR_EXP 103
18602: PUSH
18603: LD_INT 1
18605: ST_TO_ADDR
// if p3 = 34 then
18606: LD_VAR 0 3
18610: PUSH
18611: LD_INT 34
18613: EQUAL
18614: IFFALSE 18624
// sShield := true ;
18616: LD_ADDR_EXP 104
18620: PUSH
18621: LD_INT 1
18623: ST_TO_ADDR
// if p3 = 35 then
18624: LD_VAR 0 3
18628: PUSH
18629: LD_INT 35
18631: EQUAL
18632: IFFALSE 18642
// sTime := true ;
18634: LD_ADDR_EXP 105
18638: PUSH
18639: LD_INT 1
18641: ST_TO_ADDR
// if p3 = 36 then
18642: LD_VAR 0 3
18646: PUSH
18647: LD_INT 36
18649: EQUAL
18650: IFFALSE 18660
// sTools := true ;
18652: LD_ADDR_EXP 106
18656: PUSH
18657: LD_INT 1
18659: ST_TO_ADDR
// if p3 = 101 then
18660: LD_VAR 0 3
18664: PUSH
18665: LD_INT 101
18667: EQUAL
18668: IFFALSE 18678
// sSold := true ;
18670: LD_ADDR_EXP 71
18674: PUSH
18675: LD_INT 1
18677: ST_TO_ADDR
// if p3 = 102 then
18678: LD_VAR 0 3
18682: PUSH
18683: LD_INT 102
18685: EQUAL
18686: IFFALSE 18696
// sDiff := true ;
18688: LD_ADDR_EXP 72
18692: PUSH
18693: LD_INT 1
18695: ST_TO_ADDR
// if p3 = 103 then
18696: LD_VAR 0 3
18700: PUSH
18701: LD_INT 103
18703: EQUAL
18704: IFFALSE 18714
// sFog := true ;
18706: LD_ADDR_EXP 75
18710: PUSH
18711: LD_INT 1
18713: ST_TO_ADDR
// if p3 = 104 then
18714: LD_VAR 0 3
18718: PUSH
18719: LD_INT 104
18721: EQUAL
18722: IFFALSE 18732
// sReset := true ;
18724: LD_ADDR_EXP 76
18728: PUSH
18729: LD_INT 1
18731: ST_TO_ADDR
// if p3 = 105 then
18732: LD_VAR 0 3
18736: PUSH
18737: LD_INT 105
18739: EQUAL
18740: IFFALSE 18750
// sSun := true ;
18742: LD_ADDR_EXP 77
18746: PUSH
18747: LD_INT 1
18749: ST_TO_ADDR
// if p3 = 106 then
18750: LD_VAR 0 3
18754: PUSH
18755: LD_INT 106
18757: EQUAL
18758: IFFALSE 18768
// sTiger := true ;
18760: LD_ADDR_EXP 73
18764: PUSH
18765: LD_INT 1
18767: ST_TO_ADDR
// if p3 = 107 then
18768: LD_VAR 0 3
18772: PUSH
18773: LD_INT 107
18775: EQUAL
18776: IFFALSE 18786
// sBomb := true ;
18778: LD_ADDR_EXP 74
18782: PUSH
18783: LD_INT 1
18785: ST_TO_ADDR
// if p3 = 108 then
18786: LD_VAR 0 3
18790: PUSH
18791: LD_INT 108
18793: EQUAL
18794: IFFALSE 18804
// sWound := true ;
18796: LD_ADDR_EXP 82
18800: PUSH
18801: LD_INT 1
18803: ST_TO_ADDR
// if p3 = 109 then
18804: LD_VAR 0 3
18808: PUSH
18809: LD_INT 109
18811: EQUAL
18812: IFFALSE 18822
// sBetray := true ;
18814: LD_ADDR_EXP 86
18818: PUSH
18819: LD_INT 1
18821: ST_TO_ADDR
// if p3 = 110 then
18822: LD_VAR 0 3
18826: PUSH
18827: LD_INT 110
18829: EQUAL
18830: IFFALSE 18840
// sContamin := true ;
18832: LD_ADDR_EXP 87
18836: PUSH
18837: LD_INT 1
18839: ST_TO_ADDR
// if p3 = 111 then
18840: LD_VAR 0 3
18844: PUSH
18845: LD_INT 111
18847: EQUAL
18848: IFFALSE 18858
// sOil := true ;
18850: LD_ADDR_EXP 89
18854: PUSH
18855: LD_INT 1
18857: ST_TO_ADDR
// if p3 = 112 then
18858: LD_VAR 0 3
18862: PUSH
18863: LD_INT 112
18865: EQUAL
18866: IFFALSE 18876
// sStu := true ;
18868: LD_ADDR_EXP 93
18872: PUSH
18873: LD_INT 1
18875: ST_TO_ADDR
// if p3 = 113 then
18876: LD_VAR 0 3
18880: PUSH
18881: LD_INT 113
18883: EQUAL
18884: IFFALSE 18894
// sBazooka := true ;
18886: LD_ADDR_EXP 96
18890: PUSH
18891: LD_INT 1
18893: ST_TO_ADDR
// if p3 = 114 then
18894: LD_VAR 0 3
18898: PUSH
18899: LD_INT 114
18901: EQUAL
18902: IFFALSE 18912
// sMortar := true ;
18904: LD_ADDR_EXP 97
18908: PUSH
18909: LD_INT 1
18911: ST_TO_ADDR
// if p3 = 115 then
18912: LD_VAR 0 3
18916: PUSH
18917: LD_INT 115
18919: EQUAL
18920: IFFALSE 18930
// sRanger := true ;
18922: LD_ADDR_EXP 107
18926: PUSH
18927: LD_INT 1
18929: ST_TO_ADDR
// if p3 = 116 then
18930: LD_VAR 0 3
18934: PUSH
18935: LD_INT 116
18937: EQUAL
18938: IFFALSE 18948
// sComputer := true ;
18940: LD_ADDR_EXP 108
18944: PUSH
18945: LD_INT 1
18947: ST_TO_ADDR
// if p3 = 117 then
18948: LD_VAR 0 3
18952: PUSH
18953: LD_INT 117
18955: EQUAL
18956: IFFALSE 18966
// s30 := true ;
18958: LD_ADDR_EXP 109
18962: PUSH
18963: LD_INT 1
18965: ST_TO_ADDR
// if p3 = 118 then
18966: LD_VAR 0 3
18970: PUSH
18971: LD_INT 118
18973: EQUAL
18974: IFFALSE 18984
// s60 := true ;
18976: LD_ADDR_EXP 110
18980: PUSH
18981: LD_INT 1
18983: ST_TO_ADDR
// end ; if p2 = hack_mode then
18984: LD_VAR 0 2
18988: PUSH
18989: LD_INT 101
18991: EQUAL
18992: IFFALSE 19120
// begin case p3 of 1 :
18994: LD_VAR 0 3
18998: PUSH
18999: LD_INT 1
19001: DOUBLE
19002: EQUAL
19003: IFTRUE 19007
19005: GO 19014
19007: POP
// hHackUnlimitedResources ; 2 :
19008: CALL 31267 0 0
19012: GO 19120
19014: LD_INT 2
19016: DOUBLE
19017: EQUAL
19018: IFTRUE 19022
19020: GO 19029
19022: POP
// hHackSetLevel10 ; 3 :
19023: CALL 31400 0 0
19027: GO 19120
19029: LD_INT 3
19031: DOUBLE
19032: EQUAL
19033: IFTRUE 19037
19035: GO 19044
19037: POP
// hHackSetLevel10YourUnits ; 4 :
19038: CALL 31485 0 0
19042: GO 19120
19044: LD_INT 4
19046: DOUBLE
19047: EQUAL
19048: IFTRUE 19052
19050: GO 19059
19052: POP
// hHackInvincible ; 5 :
19053: CALL 31933 0 0
19057: GO 19120
19059: LD_INT 5
19061: DOUBLE
19062: EQUAL
19063: IFTRUE 19067
19065: GO 19074
19067: POP
// hHackInvisible ; 6 :
19068: CALL 32044 0 0
19072: GO 19120
19074: LD_INT 6
19076: DOUBLE
19077: EQUAL
19078: IFTRUE 19082
19080: GO 19089
19082: POP
// hHackChangeYourSide ; 7 :
19083: CALL 32101 0 0
19087: GO 19120
19089: LD_INT 7
19091: DOUBLE
19092: EQUAL
19093: IFTRUE 19097
19095: GO 19104
19097: POP
// hHackChangeUnitSide ; 8 :
19098: CALL 32143 0 0
19102: GO 19120
19104: LD_INT 8
19106: DOUBLE
19107: EQUAL
19108: IFTRUE 19112
19110: GO 19119
19112: POP
// hHackFog ; end ;
19113: CALL 32244 0 0
19117: GO 19120
19119: POP
// end ; if p2 = game_save_mode then
19120: LD_VAR 0 2
19124: PUSH
19125: LD_INT 102
19127: EQUAL
19128: IFFALSE 19183
// begin if p3 = 1 then
19130: LD_VAR 0 3
19134: PUSH
19135: LD_INT 1
19137: EQUAL
19138: IFFALSE 19150
// globalGameSaveCounter := p4 ;
19140: LD_ADDR_EXP 53
19144: PUSH
19145: LD_VAR 0 4
19149: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
19150: LD_VAR 0 3
19154: PUSH
19155: LD_INT 2
19157: EQUAL
19158: PUSH
19159: LD_EXP 53
19163: AND
19164: IFFALSE 19183
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19166: LD_STRING setGameSaveCounter(
19168: PUSH
19169: LD_EXP 53
19173: STR
19174: PUSH
19175: LD_STRING )
19177: STR
19178: PPUSH
19179: CALL_OW 559
// end ; end ;
19183: LD_VAR 0 7
19187: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
19188: LD_INT 0
19190: PPUSH
// streamModeActive := false ;
19191: LD_ADDR_EXP 54
19195: PUSH
19196: LD_INT 0
19198: ST_TO_ADDR
// normalCounter := 36 ;
19199: LD_ADDR_EXP 55
19203: PUSH
19204: LD_INT 36
19206: ST_TO_ADDR
// hardcoreCounter := 18 ;
19207: LD_ADDR_EXP 56
19211: PUSH
19212: LD_INT 18
19214: ST_TO_ADDR
// sRocket := false ;
19215: LD_ADDR_EXP 59
19219: PUSH
19220: LD_INT 0
19222: ST_TO_ADDR
// sSpeed := false ;
19223: LD_ADDR_EXP 58
19227: PUSH
19228: LD_INT 0
19230: ST_TO_ADDR
// sEngine := false ;
19231: LD_ADDR_EXP 60
19235: PUSH
19236: LD_INT 0
19238: ST_TO_ADDR
// sSpec := false ;
19239: LD_ADDR_EXP 57
19243: PUSH
19244: LD_INT 0
19246: ST_TO_ADDR
// sLevel := false ;
19247: LD_ADDR_EXP 61
19251: PUSH
19252: LD_INT 0
19254: ST_TO_ADDR
// sArmoury := false ;
19255: LD_ADDR_EXP 62
19259: PUSH
19260: LD_INT 0
19262: ST_TO_ADDR
// sRadar := false ;
19263: LD_ADDR_EXP 63
19267: PUSH
19268: LD_INT 0
19270: ST_TO_ADDR
// sBunker := false ;
19271: LD_ADDR_EXP 64
19275: PUSH
19276: LD_INT 0
19278: ST_TO_ADDR
// sHack := false ;
19279: LD_ADDR_EXP 65
19283: PUSH
19284: LD_INT 0
19286: ST_TO_ADDR
// sFire := false ;
19287: LD_ADDR_EXP 66
19291: PUSH
19292: LD_INT 0
19294: ST_TO_ADDR
// sRefresh := false ;
19295: LD_ADDR_EXP 67
19299: PUSH
19300: LD_INT 0
19302: ST_TO_ADDR
// sExp := false ;
19303: LD_ADDR_EXP 68
19307: PUSH
19308: LD_INT 0
19310: ST_TO_ADDR
// sDepot := false ;
19311: LD_ADDR_EXP 69
19315: PUSH
19316: LD_INT 0
19318: ST_TO_ADDR
// sFlag := false ;
19319: LD_ADDR_EXP 70
19323: PUSH
19324: LD_INT 0
19326: ST_TO_ADDR
// sKamikadze := false ;
19327: LD_ADDR_EXP 78
19331: PUSH
19332: LD_INT 0
19334: ST_TO_ADDR
// sTroll := false ;
19335: LD_ADDR_EXP 79
19339: PUSH
19340: LD_INT 0
19342: ST_TO_ADDR
// sSlow := false ;
19343: LD_ADDR_EXP 80
19347: PUSH
19348: LD_INT 0
19350: ST_TO_ADDR
// sLack := false ;
19351: LD_ADDR_EXP 81
19355: PUSH
19356: LD_INT 0
19358: ST_TO_ADDR
// sTank := false ;
19359: LD_ADDR_EXP 83
19363: PUSH
19364: LD_INT 0
19366: ST_TO_ADDR
// sRemote := false ;
19367: LD_ADDR_EXP 84
19371: PUSH
19372: LD_INT 0
19374: ST_TO_ADDR
// sPowell := false ;
19375: LD_ADDR_EXP 85
19379: PUSH
19380: LD_INT 0
19382: ST_TO_ADDR
// sTeleport := false ;
19383: LD_ADDR_EXP 88
19387: PUSH
19388: LD_INT 0
19390: ST_TO_ADDR
// sOilTower := false ;
19391: LD_ADDR_EXP 90
19395: PUSH
19396: LD_INT 0
19398: ST_TO_ADDR
// sShovel := false ;
19399: LD_ADDR_EXP 91
19403: PUSH
19404: LD_INT 0
19406: ST_TO_ADDR
// sSheik := false ;
19407: LD_ADDR_EXP 92
19411: PUSH
19412: LD_INT 0
19414: ST_TO_ADDR
// sEarthquake := false ;
19415: LD_ADDR_EXP 94
19419: PUSH
19420: LD_INT 0
19422: ST_TO_ADDR
// sAI := false ;
19423: LD_ADDR_EXP 95
19427: PUSH
19428: LD_INT 0
19430: ST_TO_ADDR
// sCargo := false ;
19431: LD_ADDR_EXP 98
19435: PUSH
19436: LD_INT 0
19438: ST_TO_ADDR
// sDLaser := false ;
19439: LD_ADDR_EXP 99
19443: PUSH
19444: LD_INT 0
19446: ST_TO_ADDR
// sExchange := false ;
19447: LD_ADDR_EXP 100
19451: PUSH
19452: LD_INT 0
19454: ST_TO_ADDR
// sFac := false ;
19455: LD_ADDR_EXP 101
19459: PUSH
19460: LD_INT 0
19462: ST_TO_ADDR
// sPower := false ;
19463: LD_ADDR_EXP 102
19467: PUSH
19468: LD_INT 0
19470: ST_TO_ADDR
// sRandom := false ;
19471: LD_ADDR_EXP 103
19475: PUSH
19476: LD_INT 0
19478: ST_TO_ADDR
// sShield := false ;
19479: LD_ADDR_EXP 104
19483: PUSH
19484: LD_INT 0
19486: ST_TO_ADDR
// sTime := false ;
19487: LD_ADDR_EXP 105
19491: PUSH
19492: LD_INT 0
19494: ST_TO_ADDR
// sTools := false ;
19495: LD_ADDR_EXP 106
19499: PUSH
19500: LD_INT 0
19502: ST_TO_ADDR
// sSold := false ;
19503: LD_ADDR_EXP 71
19507: PUSH
19508: LD_INT 0
19510: ST_TO_ADDR
// sDiff := false ;
19511: LD_ADDR_EXP 72
19515: PUSH
19516: LD_INT 0
19518: ST_TO_ADDR
// sFog := false ;
19519: LD_ADDR_EXP 75
19523: PUSH
19524: LD_INT 0
19526: ST_TO_ADDR
// sReset := false ;
19527: LD_ADDR_EXP 76
19531: PUSH
19532: LD_INT 0
19534: ST_TO_ADDR
// sSun := false ;
19535: LD_ADDR_EXP 77
19539: PUSH
19540: LD_INT 0
19542: ST_TO_ADDR
// sTiger := false ;
19543: LD_ADDR_EXP 73
19547: PUSH
19548: LD_INT 0
19550: ST_TO_ADDR
// sBomb := false ;
19551: LD_ADDR_EXP 74
19555: PUSH
19556: LD_INT 0
19558: ST_TO_ADDR
// sWound := false ;
19559: LD_ADDR_EXP 82
19563: PUSH
19564: LD_INT 0
19566: ST_TO_ADDR
// sBetray := false ;
19567: LD_ADDR_EXP 86
19571: PUSH
19572: LD_INT 0
19574: ST_TO_ADDR
// sContamin := false ;
19575: LD_ADDR_EXP 87
19579: PUSH
19580: LD_INT 0
19582: ST_TO_ADDR
// sOil := false ;
19583: LD_ADDR_EXP 89
19587: PUSH
19588: LD_INT 0
19590: ST_TO_ADDR
// sStu := false ;
19591: LD_ADDR_EXP 93
19595: PUSH
19596: LD_INT 0
19598: ST_TO_ADDR
// sBazooka := false ;
19599: LD_ADDR_EXP 96
19603: PUSH
19604: LD_INT 0
19606: ST_TO_ADDR
// sMortar := false ;
19607: LD_ADDR_EXP 97
19611: PUSH
19612: LD_INT 0
19614: ST_TO_ADDR
// sRanger := false ;
19615: LD_ADDR_EXP 107
19619: PUSH
19620: LD_INT 0
19622: ST_TO_ADDR
// sComputer := false ;
19623: LD_ADDR_EXP 108
19627: PUSH
19628: LD_INT 0
19630: ST_TO_ADDR
// s30 := false ;
19631: LD_ADDR_EXP 109
19635: PUSH
19636: LD_INT 0
19638: ST_TO_ADDR
// s60 := false ;
19639: LD_ADDR_EXP 110
19643: PUSH
19644: LD_INT 0
19646: ST_TO_ADDR
// end ;
19647: LD_VAR 0 1
19651: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
19652: LD_INT 0
19654: PPUSH
19655: PPUSH
19656: PPUSH
19657: PPUSH
19658: PPUSH
19659: PPUSH
19660: PPUSH
// result := [ ] ;
19661: LD_ADDR_VAR 0 2
19665: PUSH
19666: EMPTY
19667: ST_TO_ADDR
// if campaign_id = 1 then
19668: LD_OWVAR 69
19672: PUSH
19673: LD_INT 1
19675: EQUAL
19676: IFFALSE 22842
// begin case mission_number of 1 :
19678: LD_OWVAR 70
19682: PUSH
19683: LD_INT 1
19685: DOUBLE
19686: EQUAL
19687: IFTRUE 19691
19689: GO 19767
19691: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
19692: LD_ADDR_VAR 0 2
19696: PUSH
19697: LD_INT 2
19699: PUSH
19700: LD_INT 4
19702: PUSH
19703: LD_INT 11
19705: PUSH
19706: LD_INT 12
19708: PUSH
19709: LD_INT 15
19711: PUSH
19712: LD_INT 16
19714: PUSH
19715: LD_INT 22
19717: PUSH
19718: LD_INT 23
19720: PUSH
19721: LD_INT 26
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: PUSH
19735: LD_INT 101
19737: PUSH
19738: LD_INT 102
19740: PUSH
19741: LD_INT 106
19743: PUSH
19744: LD_INT 116
19746: PUSH
19747: LD_INT 117
19749: PUSH
19750: LD_INT 118
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: ST_TO_ADDR
19765: GO 22840
19767: LD_INT 2
19769: DOUBLE
19770: EQUAL
19771: IFTRUE 19775
19773: GO 19859
19775: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
19776: LD_ADDR_VAR 0 2
19780: PUSH
19781: LD_INT 2
19783: PUSH
19784: LD_INT 4
19786: PUSH
19787: LD_INT 11
19789: PUSH
19790: LD_INT 12
19792: PUSH
19793: LD_INT 15
19795: PUSH
19796: LD_INT 16
19798: PUSH
19799: LD_INT 22
19801: PUSH
19802: LD_INT 23
19804: PUSH
19805: LD_INT 26
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: PUSH
19819: LD_INT 101
19821: PUSH
19822: LD_INT 102
19824: PUSH
19825: LD_INT 105
19827: PUSH
19828: LD_INT 106
19830: PUSH
19831: LD_INT 108
19833: PUSH
19834: LD_INT 116
19836: PUSH
19837: LD_INT 117
19839: PUSH
19840: LD_INT 118
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: ST_TO_ADDR
19857: GO 22840
19859: LD_INT 3
19861: DOUBLE
19862: EQUAL
19863: IFTRUE 19867
19865: GO 19955
19867: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
19868: LD_ADDR_VAR 0 2
19872: PUSH
19873: LD_INT 2
19875: PUSH
19876: LD_INT 4
19878: PUSH
19879: LD_INT 5
19881: PUSH
19882: LD_INT 11
19884: PUSH
19885: LD_INT 12
19887: PUSH
19888: LD_INT 15
19890: PUSH
19891: LD_INT 16
19893: PUSH
19894: LD_INT 22
19896: PUSH
19897: LD_INT 26
19899: PUSH
19900: LD_INT 36
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: PUSH
19915: LD_INT 101
19917: PUSH
19918: LD_INT 102
19920: PUSH
19921: LD_INT 105
19923: PUSH
19924: LD_INT 106
19926: PUSH
19927: LD_INT 108
19929: PUSH
19930: LD_INT 116
19932: PUSH
19933: LD_INT 117
19935: PUSH
19936: LD_INT 118
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: ST_TO_ADDR
19953: GO 22840
19955: LD_INT 4
19957: DOUBLE
19958: EQUAL
19959: IFTRUE 19963
19961: GO 20059
19963: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
19964: LD_ADDR_VAR 0 2
19968: PUSH
19969: LD_INT 2
19971: PUSH
19972: LD_INT 4
19974: PUSH
19975: LD_INT 5
19977: PUSH
19978: LD_INT 8
19980: PUSH
19981: LD_INT 11
19983: PUSH
19984: LD_INT 12
19986: PUSH
19987: LD_INT 15
19989: PUSH
19990: LD_INT 16
19992: PUSH
19993: LD_INT 22
19995: PUSH
19996: LD_INT 23
19998: PUSH
19999: LD_INT 26
20001: PUSH
20002: LD_INT 36
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: PUSH
20019: LD_INT 101
20021: PUSH
20022: LD_INT 102
20024: PUSH
20025: LD_INT 105
20027: PUSH
20028: LD_INT 106
20030: PUSH
20031: LD_INT 108
20033: PUSH
20034: LD_INT 116
20036: PUSH
20037: LD_INT 117
20039: PUSH
20040: LD_INT 118
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: ST_TO_ADDR
20057: GO 22840
20059: LD_INT 5
20061: DOUBLE
20062: EQUAL
20063: IFTRUE 20067
20065: GO 20179
20067: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20068: LD_ADDR_VAR 0 2
20072: PUSH
20073: LD_INT 2
20075: PUSH
20076: LD_INT 4
20078: PUSH
20079: LD_INT 5
20081: PUSH
20082: LD_INT 6
20084: PUSH
20085: LD_INT 8
20087: PUSH
20088: LD_INT 11
20090: PUSH
20091: LD_INT 12
20093: PUSH
20094: LD_INT 15
20096: PUSH
20097: LD_INT 16
20099: PUSH
20100: LD_INT 22
20102: PUSH
20103: LD_INT 23
20105: PUSH
20106: LD_INT 25
20108: PUSH
20109: LD_INT 26
20111: PUSH
20112: LD_INT 36
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 101
20133: PUSH
20134: LD_INT 102
20136: PUSH
20137: LD_INT 105
20139: PUSH
20140: LD_INT 106
20142: PUSH
20143: LD_INT 108
20145: PUSH
20146: LD_INT 109
20148: PUSH
20149: LD_INT 112
20151: PUSH
20152: LD_INT 116
20154: PUSH
20155: LD_INT 117
20157: PUSH
20158: LD_INT 118
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: ST_TO_ADDR
20177: GO 22840
20179: LD_INT 6
20181: DOUBLE
20182: EQUAL
20183: IFTRUE 20187
20185: GO 20319
20187: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20188: LD_ADDR_VAR 0 2
20192: PUSH
20193: LD_INT 2
20195: PUSH
20196: LD_INT 4
20198: PUSH
20199: LD_INT 5
20201: PUSH
20202: LD_INT 6
20204: PUSH
20205: LD_INT 8
20207: PUSH
20208: LD_INT 11
20210: PUSH
20211: LD_INT 12
20213: PUSH
20214: LD_INT 15
20216: PUSH
20217: LD_INT 16
20219: PUSH
20220: LD_INT 20
20222: PUSH
20223: LD_INT 21
20225: PUSH
20226: LD_INT 22
20228: PUSH
20229: LD_INT 23
20231: PUSH
20232: LD_INT 25
20234: PUSH
20235: LD_INT 26
20237: PUSH
20238: LD_INT 30
20240: PUSH
20241: LD_INT 31
20243: PUSH
20244: LD_INT 32
20246: PUSH
20247: LD_INT 36
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 101
20273: PUSH
20274: LD_INT 102
20276: PUSH
20277: LD_INT 105
20279: PUSH
20280: LD_INT 106
20282: PUSH
20283: LD_INT 108
20285: PUSH
20286: LD_INT 109
20288: PUSH
20289: LD_INT 112
20291: PUSH
20292: LD_INT 116
20294: PUSH
20295: LD_INT 117
20297: PUSH
20298: LD_INT 118
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: ST_TO_ADDR
20317: GO 22840
20319: LD_INT 7
20321: DOUBLE
20322: EQUAL
20323: IFTRUE 20327
20325: GO 20439
20327: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20328: LD_ADDR_VAR 0 2
20332: PUSH
20333: LD_INT 2
20335: PUSH
20336: LD_INT 4
20338: PUSH
20339: LD_INT 5
20341: PUSH
20342: LD_INT 7
20344: PUSH
20345: LD_INT 11
20347: PUSH
20348: LD_INT 12
20350: PUSH
20351: LD_INT 15
20353: PUSH
20354: LD_INT 16
20356: PUSH
20357: LD_INT 20
20359: PUSH
20360: LD_INT 21
20362: PUSH
20363: LD_INT 22
20365: PUSH
20366: LD_INT 23
20368: PUSH
20369: LD_INT 25
20371: PUSH
20372: LD_INT 26
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: PUSH
20391: LD_INT 101
20393: PUSH
20394: LD_INT 102
20396: PUSH
20397: LD_INT 103
20399: PUSH
20400: LD_INT 105
20402: PUSH
20403: LD_INT 106
20405: PUSH
20406: LD_INT 108
20408: PUSH
20409: LD_INT 112
20411: PUSH
20412: LD_INT 116
20414: PUSH
20415: LD_INT 117
20417: PUSH
20418: LD_INT 118
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: ST_TO_ADDR
20437: GO 22840
20439: LD_INT 8
20441: DOUBLE
20442: EQUAL
20443: IFTRUE 20447
20445: GO 20587
20447: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
20448: LD_ADDR_VAR 0 2
20452: PUSH
20453: LD_INT 2
20455: PUSH
20456: LD_INT 4
20458: PUSH
20459: LD_INT 5
20461: PUSH
20462: LD_INT 6
20464: PUSH
20465: LD_INT 7
20467: PUSH
20468: LD_INT 8
20470: PUSH
20471: LD_INT 11
20473: PUSH
20474: LD_INT 12
20476: PUSH
20477: LD_INT 15
20479: PUSH
20480: LD_INT 16
20482: PUSH
20483: LD_INT 20
20485: PUSH
20486: LD_INT 21
20488: PUSH
20489: LD_INT 22
20491: PUSH
20492: LD_INT 23
20494: PUSH
20495: LD_INT 25
20497: PUSH
20498: LD_INT 26
20500: PUSH
20501: LD_INT 30
20503: PUSH
20504: LD_INT 31
20506: PUSH
20507: LD_INT 32
20509: PUSH
20510: LD_INT 36
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 101
20537: PUSH
20538: LD_INT 102
20540: PUSH
20541: LD_INT 103
20543: PUSH
20544: LD_INT 105
20546: PUSH
20547: LD_INT 106
20549: PUSH
20550: LD_INT 108
20552: PUSH
20553: LD_INT 109
20555: PUSH
20556: LD_INT 112
20558: PUSH
20559: LD_INT 116
20561: PUSH
20562: LD_INT 117
20564: PUSH
20565: LD_INT 118
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: ST_TO_ADDR
20585: GO 22840
20587: LD_INT 9
20589: DOUBLE
20590: EQUAL
20591: IFTRUE 20595
20593: GO 20743
20595: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
20596: LD_ADDR_VAR 0 2
20600: PUSH
20601: LD_INT 2
20603: PUSH
20604: LD_INT 4
20606: PUSH
20607: LD_INT 5
20609: PUSH
20610: LD_INT 6
20612: PUSH
20613: LD_INT 7
20615: PUSH
20616: LD_INT 8
20618: PUSH
20619: LD_INT 11
20621: PUSH
20622: LD_INT 12
20624: PUSH
20625: LD_INT 15
20627: PUSH
20628: LD_INT 16
20630: PUSH
20631: LD_INT 20
20633: PUSH
20634: LD_INT 21
20636: PUSH
20637: LD_INT 22
20639: PUSH
20640: LD_INT 23
20642: PUSH
20643: LD_INT 25
20645: PUSH
20646: LD_INT 26
20648: PUSH
20649: LD_INT 28
20651: PUSH
20652: LD_INT 30
20654: PUSH
20655: LD_INT 31
20657: PUSH
20658: LD_INT 32
20660: PUSH
20661: LD_INT 36
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: PUSH
20687: LD_INT 101
20689: PUSH
20690: LD_INT 102
20692: PUSH
20693: LD_INT 103
20695: PUSH
20696: LD_INT 105
20698: PUSH
20699: LD_INT 106
20701: PUSH
20702: LD_INT 108
20704: PUSH
20705: LD_INT 109
20707: PUSH
20708: LD_INT 112
20710: PUSH
20711: LD_INT 114
20713: PUSH
20714: LD_INT 116
20716: PUSH
20717: LD_INT 117
20719: PUSH
20720: LD_INT 118
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: ST_TO_ADDR
20741: GO 22840
20743: LD_INT 10
20745: DOUBLE
20746: EQUAL
20747: IFTRUE 20751
20749: GO 20947
20751: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
20752: LD_ADDR_VAR 0 2
20756: PUSH
20757: LD_INT 2
20759: PUSH
20760: LD_INT 4
20762: PUSH
20763: LD_INT 5
20765: PUSH
20766: LD_INT 6
20768: PUSH
20769: LD_INT 7
20771: PUSH
20772: LD_INT 8
20774: PUSH
20775: LD_INT 9
20777: PUSH
20778: LD_INT 10
20780: PUSH
20781: LD_INT 11
20783: PUSH
20784: LD_INT 12
20786: PUSH
20787: LD_INT 13
20789: PUSH
20790: LD_INT 14
20792: PUSH
20793: LD_INT 15
20795: PUSH
20796: LD_INT 16
20798: PUSH
20799: LD_INT 17
20801: PUSH
20802: LD_INT 18
20804: PUSH
20805: LD_INT 19
20807: PUSH
20808: LD_INT 20
20810: PUSH
20811: LD_INT 21
20813: PUSH
20814: LD_INT 22
20816: PUSH
20817: LD_INT 23
20819: PUSH
20820: LD_INT 24
20822: PUSH
20823: LD_INT 25
20825: PUSH
20826: LD_INT 26
20828: PUSH
20829: LD_INT 28
20831: PUSH
20832: LD_INT 30
20834: PUSH
20835: LD_INT 31
20837: PUSH
20838: LD_INT 32
20840: PUSH
20841: LD_INT 36
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 101
20877: PUSH
20878: LD_INT 102
20880: PUSH
20881: LD_INT 103
20883: PUSH
20884: LD_INT 104
20886: PUSH
20887: LD_INT 105
20889: PUSH
20890: LD_INT 106
20892: PUSH
20893: LD_INT 107
20895: PUSH
20896: LD_INT 108
20898: PUSH
20899: LD_INT 109
20901: PUSH
20902: LD_INT 110
20904: PUSH
20905: LD_INT 111
20907: PUSH
20908: LD_INT 112
20910: PUSH
20911: LD_INT 114
20913: PUSH
20914: LD_INT 116
20916: PUSH
20917: LD_INT 117
20919: PUSH
20920: LD_INT 118
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: ST_TO_ADDR
20945: GO 22840
20947: LD_INT 11
20949: DOUBLE
20950: EQUAL
20951: IFTRUE 20955
20953: GO 21159
20955: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
20956: LD_ADDR_VAR 0 2
20960: PUSH
20961: LD_INT 2
20963: PUSH
20964: LD_INT 3
20966: PUSH
20967: LD_INT 4
20969: PUSH
20970: LD_INT 5
20972: PUSH
20973: LD_INT 6
20975: PUSH
20976: LD_INT 7
20978: PUSH
20979: LD_INT 8
20981: PUSH
20982: LD_INT 9
20984: PUSH
20985: LD_INT 10
20987: PUSH
20988: LD_INT 11
20990: PUSH
20991: LD_INT 12
20993: PUSH
20994: LD_INT 13
20996: PUSH
20997: LD_INT 14
20999: PUSH
21000: LD_INT 15
21002: PUSH
21003: LD_INT 16
21005: PUSH
21006: LD_INT 17
21008: PUSH
21009: LD_INT 18
21011: PUSH
21012: LD_INT 19
21014: PUSH
21015: LD_INT 20
21017: PUSH
21018: LD_INT 21
21020: PUSH
21021: LD_INT 22
21023: PUSH
21024: LD_INT 23
21026: PUSH
21027: LD_INT 24
21029: PUSH
21030: LD_INT 25
21032: PUSH
21033: LD_INT 26
21035: PUSH
21036: LD_INT 28
21038: PUSH
21039: LD_INT 30
21041: PUSH
21042: LD_INT 31
21044: PUSH
21045: LD_INT 32
21047: PUSH
21048: LD_INT 34
21050: PUSH
21051: LD_INT 36
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 101
21089: PUSH
21090: LD_INT 102
21092: PUSH
21093: LD_INT 103
21095: PUSH
21096: LD_INT 104
21098: PUSH
21099: LD_INT 105
21101: PUSH
21102: LD_INT 106
21104: PUSH
21105: LD_INT 107
21107: PUSH
21108: LD_INT 108
21110: PUSH
21111: LD_INT 109
21113: PUSH
21114: LD_INT 110
21116: PUSH
21117: LD_INT 111
21119: PUSH
21120: LD_INT 112
21122: PUSH
21123: LD_INT 114
21125: PUSH
21126: LD_INT 116
21128: PUSH
21129: LD_INT 117
21131: PUSH
21132: LD_INT 118
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: ST_TO_ADDR
21157: GO 22840
21159: LD_INT 12
21161: DOUBLE
21162: EQUAL
21163: IFTRUE 21167
21165: GO 21387
21167: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21168: LD_ADDR_VAR 0 2
21172: PUSH
21173: LD_INT 1
21175: PUSH
21176: LD_INT 2
21178: PUSH
21179: LD_INT 3
21181: PUSH
21182: LD_INT 4
21184: PUSH
21185: LD_INT 5
21187: PUSH
21188: LD_INT 6
21190: PUSH
21191: LD_INT 7
21193: PUSH
21194: LD_INT 8
21196: PUSH
21197: LD_INT 9
21199: PUSH
21200: LD_INT 10
21202: PUSH
21203: LD_INT 11
21205: PUSH
21206: LD_INT 12
21208: PUSH
21209: LD_INT 13
21211: PUSH
21212: LD_INT 14
21214: PUSH
21215: LD_INT 15
21217: PUSH
21218: LD_INT 16
21220: PUSH
21221: LD_INT 17
21223: PUSH
21224: LD_INT 18
21226: PUSH
21227: LD_INT 19
21229: PUSH
21230: LD_INT 20
21232: PUSH
21233: LD_INT 21
21235: PUSH
21236: LD_INT 22
21238: PUSH
21239: LD_INT 23
21241: PUSH
21242: LD_INT 24
21244: PUSH
21245: LD_INT 25
21247: PUSH
21248: LD_INT 26
21250: PUSH
21251: LD_INT 27
21253: PUSH
21254: LD_INT 28
21256: PUSH
21257: LD_INT 30
21259: PUSH
21260: LD_INT 31
21262: PUSH
21263: LD_INT 32
21265: PUSH
21266: LD_INT 33
21268: PUSH
21269: LD_INT 34
21271: PUSH
21272: LD_INT 36
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: PUSH
21311: LD_INT 101
21313: PUSH
21314: LD_INT 102
21316: PUSH
21317: LD_INT 103
21319: PUSH
21320: LD_INT 104
21322: PUSH
21323: LD_INT 105
21325: PUSH
21326: LD_INT 106
21328: PUSH
21329: LD_INT 107
21331: PUSH
21332: LD_INT 108
21334: PUSH
21335: LD_INT 109
21337: PUSH
21338: LD_INT 110
21340: PUSH
21341: LD_INT 111
21343: PUSH
21344: LD_INT 112
21346: PUSH
21347: LD_INT 113
21349: PUSH
21350: LD_INT 114
21352: PUSH
21353: LD_INT 116
21355: PUSH
21356: LD_INT 117
21358: PUSH
21359: LD_INT 118
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: ST_TO_ADDR
21385: GO 22840
21387: LD_INT 13
21389: DOUBLE
21390: EQUAL
21391: IFTRUE 21395
21393: GO 21603
21395: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
21396: LD_ADDR_VAR 0 2
21400: PUSH
21401: LD_INT 1
21403: PUSH
21404: LD_INT 2
21406: PUSH
21407: LD_INT 3
21409: PUSH
21410: LD_INT 4
21412: PUSH
21413: LD_INT 5
21415: PUSH
21416: LD_INT 8
21418: PUSH
21419: LD_INT 9
21421: PUSH
21422: LD_INT 10
21424: PUSH
21425: LD_INT 11
21427: PUSH
21428: LD_INT 12
21430: PUSH
21431: LD_INT 14
21433: PUSH
21434: LD_INT 15
21436: PUSH
21437: LD_INT 16
21439: PUSH
21440: LD_INT 17
21442: PUSH
21443: LD_INT 18
21445: PUSH
21446: LD_INT 19
21448: PUSH
21449: LD_INT 20
21451: PUSH
21452: LD_INT 21
21454: PUSH
21455: LD_INT 22
21457: PUSH
21458: LD_INT 23
21460: PUSH
21461: LD_INT 24
21463: PUSH
21464: LD_INT 25
21466: PUSH
21467: LD_INT 26
21469: PUSH
21470: LD_INT 27
21472: PUSH
21473: LD_INT 28
21475: PUSH
21476: LD_INT 30
21478: PUSH
21479: LD_INT 31
21481: PUSH
21482: LD_INT 32
21484: PUSH
21485: LD_INT 33
21487: PUSH
21488: LD_INT 34
21490: PUSH
21491: LD_INT 36
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: PUSH
21527: LD_INT 101
21529: PUSH
21530: LD_INT 102
21532: PUSH
21533: LD_INT 103
21535: PUSH
21536: LD_INT 104
21538: PUSH
21539: LD_INT 105
21541: PUSH
21542: LD_INT 106
21544: PUSH
21545: LD_INT 107
21547: PUSH
21548: LD_INT 108
21550: PUSH
21551: LD_INT 109
21553: PUSH
21554: LD_INT 110
21556: PUSH
21557: LD_INT 111
21559: PUSH
21560: LD_INT 112
21562: PUSH
21563: LD_INT 113
21565: PUSH
21566: LD_INT 114
21568: PUSH
21569: LD_INT 116
21571: PUSH
21572: LD_INT 117
21574: PUSH
21575: LD_INT 118
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: ST_TO_ADDR
21601: GO 22840
21603: LD_INT 14
21605: DOUBLE
21606: EQUAL
21607: IFTRUE 21611
21609: GO 21835
21611: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
21612: LD_ADDR_VAR 0 2
21616: PUSH
21617: LD_INT 1
21619: PUSH
21620: LD_INT 2
21622: PUSH
21623: LD_INT 3
21625: PUSH
21626: LD_INT 4
21628: PUSH
21629: LD_INT 5
21631: PUSH
21632: LD_INT 6
21634: PUSH
21635: LD_INT 7
21637: PUSH
21638: LD_INT 8
21640: PUSH
21641: LD_INT 9
21643: PUSH
21644: LD_INT 10
21646: PUSH
21647: LD_INT 11
21649: PUSH
21650: LD_INT 12
21652: PUSH
21653: LD_INT 13
21655: PUSH
21656: LD_INT 14
21658: PUSH
21659: LD_INT 15
21661: PUSH
21662: LD_INT 16
21664: PUSH
21665: LD_INT 17
21667: PUSH
21668: LD_INT 18
21670: PUSH
21671: LD_INT 19
21673: PUSH
21674: LD_INT 20
21676: PUSH
21677: LD_INT 21
21679: PUSH
21680: LD_INT 22
21682: PUSH
21683: LD_INT 23
21685: PUSH
21686: LD_INT 24
21688: PUSH
21689: LD_INT 25
21691: PUSH
21692: LD_INT 26
21694: PUSH
21695: LD_INT 27
21697: PUSH
21698: LD_INT 28
21700: PUSH
21701: LD_INT 29
21703: PUSH
21704: LD_INT 30
21706: PUSH
21707: LD_INT 31
21709: PUSH
21710: LD_INT 32
21712: PUSH
21713: LD_INT 33
21715: PUSH
21716: LD_INT 34
21718: PUSH
21719: LD_INT 36
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 101
21761: PUSH
21762: LD_INT 102
21764: PUSH
21765: LD_INT 103
21767: PUSH
21768: LD_INT 104
21770: PUSH
21771: LD_INT 105
21773: PUSH
21774: LD_INT 106
21776: PUSH
21777: LD_INT 107
21779: PUSH
21780: LD_INT 108
21782: PUSH
21783: LD_INT 109
21785: PUSH
21786: LD_INT 110
21788: PUSH
21789: LD_INT 111
21791: PUSH
21792: LD_INT 112
21794: PUSH
21795: LD_INT 113
21797: PUSH
21798: LD_INT 114
21800: PUSH
21801: LD_INT 116
21803: PUSH
21804: LD_INT 117
21806: PUSH
21807: LD_INT 118
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: ST_TO_ADDR
21833: GO 22840
21835: LD_INT 15
21837: DOUBLE
21838: EQUAL
21839: IFTRUE 21843
21841: GO 22067
21843: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
21844: LD_ADDR_VAR 0 2
21848: PUSH
21849: LD_INT 1
21851: PUSH
21852: LD_INT 2
21854: PUSH
21855: LD_INT 3
21857: PUSH
21858: LD_INT 4
21860: PUSH
21861: LD_INT 5
21863: PUSH
21864: LD_INT 6
21866: PUSH
21867: LD_INT 7
21869: PUSH
21870: LD_INT 8
21872: PUSH
21873: LD_INT 9
21875: PUSH
21876: LD_INT 10
21878: PUSH
21879: LD_INT 11
21881: PUSH
21882: LD_INT 12
21884: PUSH
21885: LD_INT 13
21887: PUSH
21888: LD_INT 14
21890: PUSH
21891: LD_INT 15
21893: PUSH
21894: LD_INT 16
21896: PUSH
21897: LD_INT 17
21899: PUSH
21900: LD_INT 18
21902: PUSH
21903: LD_INT 19
21905: PUSH
21906: LD_INT 20
21908: PUSH
21909: LD_INT 21
21911: PUSH
21912: LD_INT 22
21914: PUSH
21915: LD_INT 23
21917: PUSH
21918: LD_INT 24
21920: PUSH
21921: LD_INT 25
21923: PUSH
21924: LD_INT 26
21926: PUSH
21927: LD_INT 27
21929: PUSH
21930: LD_INT 28
21932: PUSH
21933: LD_INT 29
21935: PUSH
21936: LD_INT 30
21938: PUSH
21939: LD_INT 31
21941: PUSH
21942: LD_INT 32
21944: PUSH
21945: LD_INT 33
21947: PUSH
21948: LD_INT 34
21950: PUSH
21951: LD_INT 36
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: PUSH
21991: LD_INT 101
21993: PUSH
21994: LD_INT 102
21996: PUSH
21997: LD_INT 103
21999: PUSH
22000: LD_INT 104
22002: PUSH
22003: LD_INT 105
22005: PUSH
22006: LD_INT 106
22008: PUSH
22009: LD_INT 107
22011: PUSH
22012: LD_INT 108
22014: PUSH
22015: LD_INT 109
22017: PUSH
22018: LD_INT 110
22020: PUSH
22021: LD_INT 111
22023: PUSH
22024: LD_INT 112
22026: PUSH
22027: LD_INT 113
22029: PUSH
22030: LD_INT 114
22032: PUSH
22033: LD_INT 116
22035: PUSH
22036: LD_INT 117
22038: PUSH
22039: LD_INT 118
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: ST_TO_ADDR
22065: GO 22840
22067: LD_INT 16
22069: DOUBLE
22070: EQUAL
22071: IFTRUE 22075
22073: GO 22211
22075: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22076: LD_ADDR_VAR 0 2
22080: PUSH
22081: LD_INT 2
22083: PUSH
22084: LD_INT 4
22086: PUSH
22087: LD_INT 5
22089: PUSH
22090: LD_INT 7
22092: PUSH
22093: LD_INT 11
22095: PUSH
22096: LD_INT 12
22098: PUSH
22099: LD_INT 15
22101: PUSH
22102: LD_INT 16
22104: PUSH
22105: LD_INT 20
22107: PUSH
22108: LD_INT 21
22110: PUSH
22111: LD_INT 22
22113: PUSH
22114: LD_INT 23
22116: PUSH
22117: LD_INT 25
22119: PUSH
22120: LD_INT 26
22122: PUSH
22123: LD_INT 30
22125: PUSH
22126: LD_INT 31
22128: PUSH
22129: LD_INT 32
22131: PUSH
22132: LD_INT 33
22134: PUSH
22135: LD_INT 34
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 101
22161: PUSH
22162: LD_INT 102
22164: PUSH
22165: LD_INT 103
22167: PUSH
22168: LD_INT 106
22170: PUSH
22171: LD_INT 108
22173: PUSH
22174: LD_INT 112
22176: PUSH
22177: LD_INT 113
22179: PUSH
22180: LD_INT 114
22182: PUSH
22183: LD_INT 116
22185: PUSH
22186: LD_INT 117
22188: PUSH
22189: LD_INT 118
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: ST_TO_ADDR
22209: GO 22840
22211: LD_INT 17
22213: DOUBLE
22214: EQUAL
22215: IFTRUE 22219
22217: GO 22443
22219: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22220: LD_ADDR_VAR 0 2
22224: PUSH
22225: LD_INT 1
22227: PUSH
22228: LD_INT 2
22230: PUSH
22231: LD_INT 3
22233: PUSH
22234: LD_INT 4
22236: PUSH
22237: LD_INT 5
22239: PUSH
22240: LD_INT 6
22242: PUSH
22243: LD_INT 7
22245: PUSH
22246: LD_INT 8
22248: PUSH
22249: LD_INT 9
22251: PUSH
22252: LD_INT 10
22254: PUSH
22255: LD_INT 11
22257: PUSH
22258: LD_INT 12
22260: PUSH
22261: LD_INT 13
22263: PUSH
22264: LD_INT 14
22266: PUSH
22267: LD_INT 15
22269: PUSH
22270: LD_INT 16
22272: PUSH
22273: LD_INT 17
22275: PUSH
22276: LD_INT 18
22278: PUSH
22279: LD_INT 19
22281: PUSH
22282: LD_INT 20
22284: PUSH
22285: LD_INT 21
22287: PUSH
22288: LD_INT 22
22290: PUSH
22291: LD_INT 23
22293: PUSH
22294: LD_INT 24
22296: PUSH
22297: LD_INT 25
22299: PUSH
22300: LD_INT 26
22302: PUSH
22303: LD_INT 27
22305: PUSH
22306: LD_INT 28
22308: PUSH
22309: LD_INT 29
22311: PUSH
22312: LD_INT 30
22314: PUSH
22315: LD_INT 31
22317: PUSH
22318: LD_INT 32
22320: PUSH
22321: LD_INT 33
22323: PUSH
22324: LD_INT 34
22326: PUSH
22327: LD_INT 36
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: PUSH
22367: LD_INT 101
22369: PUSH
22370: LD_INT 102
22372: PUSH
22373: LD_INT 103
22375: PUSH
22376: LD_INT 104
22378: PUSH
22379: LD_INT 105
22381: PUSH
22382: LD_INT 106
22384: PUSH
22385: LD_INT 107
22387: PUSH
22388: LD_INT 108
22390: PUSH
22391: LD_INT 109
22393: PUSH
22394: LD_INT 110
22396: PUSH
22397: LD_INT 111
22399: PUSH
22400: LD_INT 112
22402: PUSH
22403: LD_INT 113
22405: PUSH
22406: LD_INT 114
22408: PUSH
22409: LD_INT 116
22411: PUSH
22412: LD_INT 117
22414: PUSH
22415: LD_INT 118
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: ST_TO_ADDR
22441: GO 22840
22443: LD_INT 18
22445: DOUBLE
22446: EQUAL
22447: IFTRUE 22451
22449: GO 22599
22451: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
22452: LD_ADDR_VAR 0 2
22456: PUSH
22457: LD_INT 2
22459: PUSH
22460: LD_INT 4
22462: PUSH
22463: LD_INT 5
22465: PUSH
22466: LD_INT 7
22468: PUSH
22469: LD_INT 11
22471: PUSH
22472: LD_INT 12
22474: PUSH
22475: LD_INT 15
22477: PUSH
22478: LD_INT 16
22480: PUSH
22481: LD_INT 20
22483: PUSH
22484: LD_INT 21
22486: PUSH
22487: LD_INT 22
22489: PUSH
22490: LD_INT 23
22492: PUSH
22493: LD_INT 25
22495: PUSH
22496: LD_INT 26
22498: PUSH
22499: LD_INT 30
22501: PUSH
22502: LD_INT 31
22504: PUSH
22505: LD_INT 32
22507: PUSH
22508: LD_INT 33
22510: PUSH
22511: LD_INT 34
22513: PUSH
22514: LD_INT 35
22516: PUSH
22517: LD_INT 36
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 101
22545: PUSH
22546: LD_INT 102
22548: PUSH
22549: LD_INT 103
22551: PUSH
22552: LD_INT 106
22554: PUSH
22555: LD_INT 108
22557: PUSH
22558: LD_INT 112
22560: PUSH
22561: LD_INT 113
22563: PUSH
22564: LD_INT 114
22566: PUSH
22567: LD_INT 115
22569: PUSH
22570: LD_INT 116
22572: PUSH
22573: LD_INT 117
22575: PUSH
22576: LD_INT 118
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: ST_TO_ADDR
22597: GO 22840
22599: LD_INT 19
22601: DOUBLE
22602: EQUAL
22603: IFTRUE 22607
22605: GO 22839
22607: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
22608: LD_ADDR_VAR 0 2
22612: PUSH
22613: LD_INT 1
22615: PUSH
22616: LD_INT 2
22618: PUSH
22619: LD_INT 3
22621: PUSH
22622: LD_INT 4
22624: PUSH
22625: LD_INT 5
22627: PUSH
22628: LD_INT 6
22630: PUSH
22631: LD_INT 7
22633: PUSH
22634: LD_INT 8
22636: PUSH
22637: LD_INT 9
22639: PUSH
22640: LD_INT 10
22642: PUSH
22643: LD_INT 11
22645: PUSH
22646: LD_INT 12
22648: PUSH
22649: LD_INT 13
22651: PUSH
22652: LD_INT 14
22654: PUSH
22655: LD_INT 15
22657: PUSH
22658: LD_INT 16
22660: PUSH
22661: LD_INT 17
22663: PUSH
22664: LD_INT 18
22666: PUSH
22667: LD_INT 19
22669: PUSH
22670: LD_INT 20
22672: PUSH
22673: LD_INT 21
22675: PUSH
22676: LD_INT 22
22678: PUSH
22679: LD_INT 23
22681: PUSH
22682: LD_INT 24
22684: PUSH
22685: LD_INT 25
22687: PUSH
22688: LD_INT 26
22690: PUSH
22691: LD_INT 27
22693: PUSH
22694: LD_INT 28
22696: PUSH
22697: LD_INT 29
22699: PUSH
22700: LD_INT 30
22702: PUSH
22703: LD_INT 31
22705: PUSH
22706: LD_INT 32
22708: PUSH
22709: LD_INT 33
22711: PUSH
22712: LD_INT 34
22714: PUSH
22715: LD_INT 35
22717: PUSH
22718: LD_INT 36
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 101
22761: PUSH
22762: LD_INT 102
22764: PUSH
22765: LD_INT 103
22767: PUSH
22768: LD_INT 104
22770: PUSH
22771: LD_INT 105
22773: PUSH
22774: LD_INT 106
22776: PUSH
22777: LD_INT 107
22779: PUSH
22780: LD_INT 108
22782: PUSH
22783: LD_INT 109
22785: PUSH
22786: LD_INT 110
22788: PUSH
22789: LD_INT 111
22791: PUSH
22792: LD_INT 112
22794: PUSH
22795: LD_INT 113
22797: PUSH
22798: LD_INT 114
22800: PUSH
22801: LD_INT 115
22803: PUSH
22804: LD_INT 116
22806: PUSH
22807: LD_INT 117
22809: PUSH
22810: LD_INT 118
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: ST_TO_ADDR
22837: GO 22840
22839: POP
// end else
22840: GO 23071
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
22842: LD_ADDR_VAR 0 2
22846: PUSH
22847: LD_INT 1
22849: PUSH
22850: LD_INT 2
22852: PUSH
22853: LD_INT 3
22855: PUSH
22856: LD_INT 4
22858: PUSH
22859: LD_INT 5
22861: PUSH
22862: LD_INT 6
22864: PUSH
22865: LD_INT 7
22867: PUSH
22868: LD_INT 8
22870: PUSH
22871: LD_INT 9
22873: PUSH
22874: LD_INT 10
22876: PUSH
22877: LD_INT 11
22879: PUSH
22880: LD_INT 12
22882: PUSH
22883: LD_INT 13
22885: PUSH
22886: LD_INT 14
22888: PUSH
22889: LD_INT 15
22891: PUSH
22892: LD_INT 16
22894: PUSH
22895: LD_INT 17
22897: PUSH
22898: LD_INT 18
22900: PUSH
22901: LD_INT 19
22903: PUSH
22904: LD_INT 20
22906: PUSH
22907: LD_INT 21
22909: PUSH
22910: LD_INT 22
22912: PUSH
22913: LD_INT 23
22915: PUSH
22916: LD_INT 24
22918: PUSH
22919: LD_INT 25
22921: PUSH
22922: LD_INT 26
22924: PUSH
22925: LD_INT 27
22927: PUSH
22928: LD_INT 28
22930: PUSH
22931: LD_INT 29
22933: PUSH
22934: LD_INT 30
22936: PUSH
22937: LD_INT 31
22939: PUSH
22940: LD_INT 32
22942: PUSH
22943: LD_INT 33
22945: PUSH
22946: LD_INT 34
22948: PUSH
22949: LD_INT 35
22951: PUSH
22952: LD_INT 36
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 101
22995: PUSH
22996: LD_INT 102
22998: PUSH
22999: LD_INT 103
23001: PUSH
23002: LD_INT 104
23004: PUSH
23005: LD_INT 105
23007: PUSH
23008: LD_INT 106
23010: PUSH
23011: LD_INT 107
23013: PUSH
23014: LD_INT 108
23016: PUSH
23017: LD_INT 109
23019: PUSH
23020: LD_INT 110
23022: PUSH
23023: LD_INT 111
23025: PUSH
23026: LD_INT 112
23028: PUSH
23029: LD_INT 113
23031: PUSH
23032: LD_INT 114
23034: PUSH
23035: LD_INT 115
23037: PUSH
23038: LD_INT 116
23040: PUSH
23041: LD_INT 117
23043: PUSH
23044: LD_INT 118
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: ST_TO_ADDR
// if result then
23071: LD_VAR 0 2
23075: IFFALSE 23861
// begin normal :=  ;
23077: LD_ADDR_VAR 0 5
23081: PUSH
23082: LD_STRING 
23084: ST_TO_ADDR
// hardcore :=  ;
23085: LD_ADDR_VAR 0 6
23089: PUSH
23090: LD_STRING 
23092: ST_TO_ADDR
// active :=  ;
23093: LD_ADDR_VAR 0 7
23097: PUSH
23098: LD_STRING 
23100: ST_TO_ADDR
// for i = 1 to normalCounter do
23101: LD_ADDR_VAR 0 8
23105: PUSH
23106: DOUBLE
23107: LD_INT 1
23109: DEC
23110: ST_TO_ADDR
23111: LD_EXP 55
23115: PUSH
23116: FOR_TO
23117: IFFALSE 23218
// begin tmp := 0 ;
23119: LD_ADDR_VAR 0 3
23123: PUSH
23124: LD_STRING 0
23126: ST_TO_ADDR
// if result [ 1 ] then
23127: LD_VAR 0 2
23131: PUSH
23132: LD_INT 1
23134: ARRAY
23135: IFFALSE 23200
// if result [ 1 ] [ 1 ] = i then
23137: LD_VAR 0 2
23141: PUSH
23142: LD_INT 1
23144: ARRAY
23145: PUSH
23146: LD_INT 1
23148: ARRAY
23149: PUSH
23150: LD_VAR 0 8
23154: EQUAL
23155: IFFALSE 23200
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23157: LD_ADDR_VAR 0 2
23161: PUSH
23162: LD_VAR 0 2
23166: PPUSH
23167: LD_INT 1
23169: PPUSH
23170: LD_VAR 0 2
23174: PUSH
23175: LD_INT 1
23177: ARRAY
23178: PPUSH
23179: LD_INT 1
23181: PPUSH
23182: CALL_OW 3
23186: PPUSH
23187: CALL_OW 1
23191: ST_TO_ADDR
// tmp := 1 ;
23192: LD_ADDR_VAR 0 3
23196: PUSH
23197: LD_STRING 1
23199: ST_TO_ADDR
// end ; normal := normal & tmp ;
23200: LD_ADDR_VAR 0 5
23204: PUSH
23205: LD_VAR 0 5
23209: PUSH
23210: LD_VAR 0 3
23214: STR
23215: ST_TO_ADDR
// end ;
23216: GO 23116
23218: POP
23219: POP
// for i = 1 to hardcoreCounter do
23220: LD_ADDR_VAR 0 8
23224: PUSH
23225: DOUBLE
23226: LD_INT 1
23228: DEC
23229: ST_TO_ADDR
23230: LD_EXP 56
23234: PUSH
23235: FOR_TO
23236: IFFALSE 23341
// begin tmp := 0 ;
23238: LD_ADDR_VAR 0 3
23242: PUSH
23243: LD_STRING 0
23245: ST_TO_ADDR
// if result [ 2 ] then
23246: LD_VAR 0 2
23250: PUSH
23251: LD_INT 2
23253: ARRAY
23254: IFFALSE 23323
// if result [ 2 ] [ 1 ] = 100 + i then
23256: LD_VAR 0 2
23260: PUSH
23261: LD_INT 2
23263: ARRAY
23264: PUSH
23265: LD_INT 1
23267: ARRAY
23268: PUSH
23269: LD_INT 100
23271: PUSH
23272: LD_VAR 0 8
23276: PLUS
23277: EQUAL
23278: IFFALSE 23323
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23280: LD_ADDR_VAR 0 2
23284: PUSH
23285: LD_VAR 0 2
23289: PPUSH
23290: LD_INT 2
23292: PPUSH
23293: LD_VAR 0 2
23297: PUSH
23298: LD_INT 2
23300: ARRAY
23301: PPUSH
23302: LD_INT 1
23304: PPUSH
23305: CALL_OW 3
23309: PPUSH
23310: CALL_OW 1
23314: ST_TO_ADDR
// tmp := 1 ;
23315: LD_ADDR_VAR 0 3
23319: PUSH
23320: LD_STRING 1
23322: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23323: LD_ADDR_VAR 0 6
23327: PUSH
23328: LD_VAR 0 6
23332: PUSH
23333: LD_VAR 0 3
23337: STR
23338: ST_TO_ADDR
// end ;
23339: GO 23235
23341: POP
23342: POP
// if isGameLoad then
23343: LD_VAR 0 1
23347: IFFALSE 23822
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
23349: LD_ADDR_VAR 0 4
23353: PUSH
23354: LD_EXP 59
23358: PUSH
23359: LD_EXP 58
23363: PUSH
23364: LD_EXP 60
23368: PUSH
23369: LD_EXP 57
23373: PUSH
23374: LD_EXP 61
23378: PUSH
23379: LD_EXP 62
23383: PUSH
23384: LD_EXP 63
23388: PUSH
23389: LD_EXP 64
23393: PUSH
23394: LD_EXP 65
23398: PUSH
23399: LD_EXP 66
23403: PUSH
23404: LD_EXP 67
23408: PUSH
23409: LD_EXP 68
23413: PUSH
23414: LD_EXP 69
23418: PUSH
23419: LD_EXP 70
23423: PUSH
23424: LD_EXP 78
23428: PUSH
23429: LD_EXP 79
23433: PUSH
23434: LD_EXP 80
23438: PUSH
23439: LD_EXP 81
23443: PUSH
23444: LD_EXP 83
23448: PUSH
23449: LD_EXP 84
23453: PUSH
23454: LD_EXP 85
23458: PUSH
23459: LD_EXP 88
23463: PUSH
23464: LD_EXP 90
23468: PUSH
23469: LD_EXP 91
23473: PUSH
23474: LD_EXP 92
23478: PUSH
23479: LD_EXP 94
23483: PUSH
23484: LD_EXP 95
23488: PUSH
23489: LD_EXP 98
23493: PUSH
23494: LD_EXP 99
23498: PUSH
23499: LD_EXP 100
23503: PUSH
23504: LD_EXP 101
23508: PUSH
23509: LD_EXP 102
23513: PUSH
23514: LD_EXP 103
23518: PUSH
23519: LD_EXP 104
23523: PUSH
23524: LD_EXP 105
23528: PUSH
23529: LD_EXP 106
23533: PUSH
23534: LD_EXP 71
23538: PUSH
23539: LD_EXP 72
23543: PUSH
23544: LD_EXP 75
23548: PUSH
23549: LD_EXP 76
23553: PUSH
23554: LD_EXP 77
23558: PUSH
23559: LD_EXP 73
23563: PUSH
23564: LD_EXP 74
23568: PUSH
23569: LD_EXP 82
23573: PUSH
23574: LD_EXP 86
23578: PUSH
23579: LD_EXP 87
23583: PUSH
23584: LD_EXP 89
23588: PUSH
23589: LD_EXP 93
23593: PUSH
23594: LD_EXP 96
23598: PUSH
23599: LD_EXP 97
23603: PUSH
23604: LD_EXP 107
23608: PUSH
23609: LD_EXP 108
23613: PUSH
23614: LD_EXP 109
23618: PUSH
23619: LD_EXP 110
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: ST_TO_ADDR
// tmp :=  ;
23680: LD_ADDR_VAR 0 3
23684: PUSH
23685: LD_STRING 
23687: ST_TO_ADDR
// for i = 1 to normalCounter do
23688: LD_ADDR_VAR 0 8
23692: PUSH
23693: DOUBLE
23694: LD_INT 1
23696: DEC
23697: ST_TO_ADDR
23698: LD_EXP 55
23702: PUSH
23703: FOR_TO
23704: IFFALSE 23740
// begin if flags [ i ] then
23706: LD_VAR 0 4
23710: PUSH
23711: LD_VAR 0 8
23715: ARRAY
23716: IFFALSE 23738
// tmp := tmp & i & ; ;
23718: LD_ADDR_VAR 0 3
23722: PUSH
23723: LD_VAR 0 3
23727: PUSH
23728: LD_VAR 0 8
23732: STR
23733: PUSH
23734: LD_STRING ;
23736: STR
23737: ST_TO_ADDR
// end ;
23738: GO 23703
23740: POP
23741: POP
// for i = 1 to hardcoreCounter do
23742: LD_ADDR_VAR 0 8
23746: PUSH
23747: DOUBLE
23748: LD_INT 1
23750: DEC
23751: ST_TO_ADDR
23752: LD_EXP 56
23756: PUSH
23757: FOR_TO
23758: IFFALSE 23804
// begin if flags [ normalCounter + i ] then
23760: LD_VAR 0 4
23764: PUSH
23765: LD_EXP 55
23769: PUSH
23770: LD_VAR 0 8
23774: PLUS
23775: ARRAY
23776: IFFALSE 23802
// tmp := tmp & ( 100 + i ) & ; ;
23778: LD_ADDR_VAR 0 3
23782: PUSH
23783: LD_VAR 0 3
23787: PUSH
23788: LD_INT 100
23790: PUSH
23791: LD_VAR 0 8
23795: PLUS
23796: STR
23797: PUSH
23798: LD_STRING ;
23800: STR
23801: ST_TO_ADDR
// end ;
23802: GO 23757
23804: POP
23805: POP
// if tmp then
23806: LD_VAR 0 3
23810: IFFALSE 23822
// active := tmp ;
23812: LD_ADDR_VAR 0 7
23816: PUSH
23817: LD_VAR 0 3
23821: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
23822: LD_STRING getStreamItemsFromMission("
23824: PUSH
23825: LD_VAR 0 5
23829: STR
23830: PUSH
23831: LD_STRING ","
23833: STR
23834: PUSH
23835: LD_VAR 0 6
23839: STR
23840: PUSH
23841: LD_STRING ","
23843: STR
23844: PUSH
23845: LD_VAR 0 7
23849: STR
23850: PUSH
23851: LD_STRING ")
23853: STR
23854: PPUSH
23855: CALL_OW 559
// end else
23859: GO 23868
// ToLua ( getStreamItemsFromMission("","","") ) ;
23861: LD_STRING getStreamItemsFromMission("","","")
23863: PPUSH
23864: CALL_OW 559
// end ;
23868: LD_VAR 0 2
23872: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23873: LD_EXP 54
23877: PUSH
23878: LD_EXP 59
23882: AND
23883: IFFALSE 24007
23885: GO 23887
23887: DISABLE
23888: LD_INT 0
23890: PPUSH
23891: PPUSH
// begin enable ;
23892: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23893: LD_ADDR_VAR 0 2
23897: PUSH
23898: LD_INT 22
23900: PUSH
23901: LD_OWVAR 2
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: LD_INT 2
23912: PUSH
23913: LD_INT 34
23915: PUSH
23916: LD_INT 7
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: PUSH
23923: LD_INT 34
23925: PUSH
23926: LD_INT 45
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 34
23935: PUSH
23936: LD_INT 28
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 34
23945: PUSH
23946: LD_INT 47
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PPUSH
23964: CALL_OW 69
23968: ST_TO_ADDR
// if not tmp then
23969: LD_VAR 0 2
23973: NOT
23974: IFFALSE 23978
// exit ;
23976: GO 24007
// for i in tmp do
23978: LD_ADDR_VAR 0 1
23982: PUSH
23983: LD_VAR 0 2
23987: PUSH
23988: FOR_IN
23989: IFFALSE 24005
// begin SetLives ( i , 0 ) ;
23991: LD_VAR 0 1
23995: PPUSH
23996: LD_INT 0
23998: PPUSH
23999: CALL_OW 234
// end ;
24003: GO 23988
24005: POP
24006: POP
// end ;
24007: PPOPN 2
24009: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24010: LD_EXP 54
24014: PUSH
24015: LD_EXP 60
24019: AND
24020: IFFALSE 24104
24022: GO 24024
24024: DISABLE
24025: LD_INT 0
24027: PPUSH
24028: PPUSH
// begin enable ;
24029: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24030: LD_ADDR_VAR 0 2
24034: PUSH
24035: LD_INT 22
24037: PUSH
24038: LD_OWVAR 2
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 32
24049: PUSH
24050: LD_INT 3
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: PPUSH
24061: CALL_OW 69
24065: ST_TO_ADDR
// if not tmp then
24066: LD_VAR 0 2
24070: NOT
24071: IFFALSE 24075
// exit ;
24073: GO 24104
// for i in tmp do
24075: LD_ADDR_VAR 0 1
24079: PUSH
24080: LD_VAR 0 2
24084: PUSH
24085: FOR_IN
24086: IFFALSE 24102
// begin SetLives ( i , 0 ) ;
24088: LD_VAR 0 1
24092: PPUSH
24093: LD_INT 0
24095: PPUSH
24096: CALL_OW 234
// end ;
24100: GO 24085
24102: POP
24103: POP
// end ;
24104: PPOPN 2
24106: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24107: LD_EXP 54
24111: PUSH
24112: LD_EXP 57
24116: AND
24117: IFFALSE 24210
24119: GO 24121
24121: DISABLE
24122: LD_INT 0
24124: PPUSH
// begin enable ;
24125: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24126: LD_ADDR_VAR 0 1
24130: PUSH
24131: LD_INT 22
24133: PUSH
24134: LD_OWVAR 2
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 2
24145: PUSH
24146: LD_INT 25
24148: PUSH
24149: LD_INT 5
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PUSH
24156: LD_INT 25
24158: PUSH
24159: LD_INT 9
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PUSH
24166: LD_INT 25
24168: PUSH
24169: LD_INT 8
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PPUSH
24186: CALL_OW 69
24190: PUSH
24191: FOR_IN
24192: IFFALSE 24208
// begin SetClass ( i , 1 ) ;
24194: LD_VAR 0 1
24198: PPUSH
24199: LD_INT 1
24201: PPUSH
24202: CALL_OW 336
// end ;
24206: GO 24191
24208: POP
24209: POP
// end ;
24210: PPOPN 1
24212: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24213: LD_EXP 54
24217: PUSH
24218: LD_EXP 58
24222: AND
24223: PUSH
24224: LD_OWVAR 65
24228: PUSH
24229: LD_INT 7
24231: LESS
24232: AND
24233: IFFALSE 24247
24235: GO 24237
24237: DISABLE
// begin enable ;
24238: ENABLE
// game_speed := 7 ;
24239: LD_ADDR_OWVAR 65
24243: PUSH
24244: LD_INT 7
24246: ST_TO_ADDR
// end ;
24247: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24248: LD_EXP 54
24252: PUSH
24253: LD_EXP 61
24257: AND
24258: IFFALSE 24460
24260: GO 24262
24262: DISABLE
24263: LD_INT 0
24265: PPUSH
24266: PPUSH
24267: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24268: LD_ADDR_VAR 0 3
24272: PUSH
24273: LD_INT 81
24275: PUSH
24276: LD_OWVAR 2
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: LD_INT 21
24287: PUSH
24288: LD_INT 1
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PPUSH
24299: CALL_OW 69
24303: ST_TO_ADDR
// if not tmp then
24304: LD_VAR 0 3
24308: NOT
24309: IFFALSE 24313
// exit ;
24311: GO 24460
// if tmp > 5 then
24313: LD_VAR 0 3
24317: PUSH
24318: LD_INT 5
24320: GREATER
24321: IFFALSE 24333
// k := 5 else
24323: LD_ADDR_VAR 0 2
24327: PUSH
24328: LD_INT 5
24330: ST_TO_ADDR
24331: GO 24343
// k := tmp ;
24333: LD_ADDR_VAR 0 2
24337: PUSH
24338: LD_VAR 0 3
24342: ST_TO_ADDR
// for i := 1 to k do
24343: LD_ADDR_VAR 0 1
24347: PUSH
24348: DOUBLE
24349: LD_INT 1
24351: DEC
24352: ST_TO_ADDR
24353: LD_VAR 0 2
24357: PUSH
24358: FOR_TO
24359: IFFALSE 24458
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24361: LD_VAR 0 3
24365: PUSH
24366: LD_VAR 0 1
24370: ARRAY
24371: PPUSH
24372: LD_VAR 0 1
24376: PUSH
24377: LD_INT 4
24379: MOD
24380: PUSH
24381: LD_INT 1
24383: PLUS
24384: PPUSH
24385: CALL_OW 259
24389: PUSH
24390: LD_INT 10
24392: LESS
24393: IFFALSE 24456
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24395: LD_VAR 0 3
24399: PUSH
24400: LD_VAR 0 1
24404: ARRAY
24405: PPUSH
24406: LD_VAR 0 1
24410: PUSH
24411: LD_INT 4
24413: MOD
24414: PUSH
24415: LD_INT 1
24417: PLUS
24418: PPUSH
24419: LD_VAR 0 3
24423: PUSH
24424: LD_VAR 0 1
24428: ARRAY
24429: PPUSH
24430: LD_VAR 0 1
24434: PUSH
24435: LD_INT 4
24437: MOD
24438: PUSH
24439: LD_INT 1
24441: PLUS
24442: PPUSH
24443: CALL_OW 259
24447: PUSH
24448: LD_INT 1
24450: PLUS
24451: PPUSH
24452: CALL_OW 237
24456: GO 24358
24458: POP
24459: POP
// end ;
24460: PPOPN 3
24462: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24463: LD_EXP 54
24467: PUSH
24468: LD_EXP 62
24472: AND
24473: IFFALSE 24493
24475: GO 24477
24477: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24478: LD_INT 4
24480: PPUSH
24481: LD_OWVAR 2
24485: PPUSH
24486: LD_INT 0
24488: PPUSH
24489: CALL_OW 324
24493: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24494: LD_EXP 54
24498: PUSH
24499: LD_EXP 91
24503: AND
24504: IFFALSE 24524
24506: GO 24508
24508: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24509: LD_INT 19
24511: PPUSH
24512: LD_OWVAR 2
24516: PPUSH
24517: LD_INT 0
24519: PPUSH
24520: CALL_OW 324
24524: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24525: LD_EXP 54
24529: PUSH
24530: LD_EXP 63
24534: AND
24535: IFFALSE 24637
24537: GO 24539
24539: DISABLE
24540: LD_INT 0
24542: PPUSH
24543: PPUSH
// begin enable ;
24544: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24545: LD_ADDR_VAR 0 2
24549: PUSH
24550: LD_INT 22
24552: PUSH
24553: LD_OWVAR 2
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PUSH
24562: LD_INT 2
24564: PUSH
24565: LD_INT 34
24567: PUSH
24568: LD_INT 11
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 34
24577: PUSH
24578: LD_INT 30
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: LIST
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PPUSH
24594: CALL_OW 69
24598: ST_TO_ADDR
// if not tmp then
24599: LD_VAR 0 2
24603: NOT
24604: IFFALSE 24608
// exit ;
24606: GO 24637
// for i in tmp do
24608: LD_ADDR_VAR 0 1
24612: PUSH
24613: LD_VAR 0 2
24617: PUSH
24618: FOR_IN
24619: IFFALSE 24635
// begin SetLives ( i , 0 ) ;
24621: LD_VAR 0 1
24625: PPUSH
24626: LD_INT 0
24628: PPUSH
24629: CALL_OW 234
// end ;
24633: GO 24618
24635: POP
24636: POP
// end ;
24637: PPOPN 2
24639: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24640: LD_EXP 54
24644: PUSH
24645: LD_EXP 64
24649: AND
24650: IFFALSE 24670
24652: GO 24654
24654: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24655: LD_INT 32
24657: PPUSH
24658: LD_OWVAR 2
24662: PPUSH
24663: LD_INT 0
24665: PPUSH
24666: CALL_OW 324
24670: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24671: LD_EXP 54
24675: PUSH
24676: LD_EXP 65
24680: AND
24681: IFFALSE 24862
24683: GO 24685
24685: DISABLE
24686: LD_INT 0
24688: PPUSH
24689: PPUSH
24690: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24691: LD_ADDR_VAR 0 2
24695: PUSH
24696: LD_INT 22
24698: PUSH
24699: LD_OWVAR 2
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 33
24710: PUSH
24711: LD_INT 3
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PPUSH
24722: CALL_OW 69
24726: ST_TO_ADDR
// if not tmp then
24727: LD_VAR 0 2
24731: NOT
24732: IFFALSE 24736
// exit ;
24734: GO 24862
// side := 0 ;
24736: LD_ADDR_VAR 0 3
24740: PUSH
24741: LD_INT 0
24743: ST_TO_ADDR
// for i := 1 to 8 do
24744: LD_ADDR_VAR 0 1
24748: PUSH
24749: DOUBLE
24750: LD_INT 1
24752: DEC
24753: ST_TO_ADDR
24754: LD_INT 8
24756: PUSH
24757: FOR_TO
24758: IFFALSE 24806
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24760: LD_OWVAR 2
24764: PUSH
24765: LD_VAR 0 1
24769: NONEQUAL
24770: PUSH
24771: LD_OWVAR 2
24775: PPUSH
24776: LD_VAR 0 1
24780: PPUSH
24781: CALL_OW 81
24785: PUSH
24786: LD_INT 2
24788: EQUAL
24789: AND
24790: IFFALSE 24804
// begin side := i ;
24792: LD_ADDR_VAR 0 3
24796: PUSH
24797: LD_VAR 0 1
24801: ST_TO_ADDR
// break ;
24802: GO 24806
// end ;
24804: GO 24757
24806: POP
24807: POP
// if not side then
24808: LD_VAR 0 3
24812: NOT
24813: IFFALSE 24817
// exit ;
24815: GO 24862
// for i := 1 to tmp do
24817: LD_ADDR_VAR 0 1
24821: PUSH
24822: DOUBLE
24823: LD_INT 1
24825: DEC
24826: ST_TO_ADDR
24827: LD_VAR 0 2
24831: PUSH
24832: FOR_TO
24833: IFFALSE 24860
// if Prob ( 60 ) then
24835: LD_INT 60
24837: PPUSH
24838: CALL_OW 13
24842: IFFALSE 24858
// SetSide ( i , side ) ;
24844: LD_VAR 0 1
24848: PPUSH
24849: LD_VAR 0 3
24853: PPUSH
24854: CALL_OW 235
24858: GO 24832
24860: POP
24861: POP
// end ;
24862: PPOPN 3
24864: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24865: LD_EXP 54
24869: PUSH
24870: LD_EXP 67
24874: AND
24875: IFFALSE 24994
24877: GO 24879
24879: DISABLE
24880: LD_INT 0
24882: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24883: LD_ADDR_VAR 0 1
24887: PUSH
24888: LD_INT 22
24890: PUSH
24891: LD_OWVAR 2
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PUSH
24900: LD_INT 21
24902: PUSH
24903: LD_INT 1
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: LD_INT 3
24912: PUSH
24913: LD_INT 23
24915: PUSH
24916: LD_INT 0
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: LIST
24931: PPUSH
24932: CALL_OW 69
24936: PUSH
24937: FOR_IN
24938: IFFALSE 24992
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24940: LD_VAR 0 1
24944: PPUSH
24945: CALL_OW 257
24949: PUSH
24950: LD_INT 1
24952: PUSH
24953: LD_INT 2
24955: PUSH
24956: LD_INT 3
24958: PUSH
24959: LD_INT 4
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: IN
24968: IFFALSE 24990
// SetClass ( un , rand ( 1 , 4 ) ) ;
24970: LD_VAR 0 1
24974: PPUSH
24975: LD_INT 1
24977: PPUSH
24978: LD_INT 4
24980: PPUSH
24981: CALL_OW 12
24985: PPUSH
24986: CALL_OW 336
24990: GO 24937
24992: POP
24993: POP
// end ;
24994: PPOPN 1
24996: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24997: LD_EXP 54
25001: PUSH
25002: LD_EXP 66
25006: AND
25007: IFFALSE 25086
25009: GO 25011
25011: DISABLE
25012: LD_INT 0
25014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25015: LD_ADDR_VAR 0 1
25019: PUSH
25020: LD_INT 22
25022: PUSH
25023: LD_OWVAR 2
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 21
25034: PUSH
25035: LD_INT 3
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PPUSH
25046: CALL_OW 69
25050: ST_TO_ADDR
// if not tmp then
25051: LD_VAR 0 1
25055: NOT
25056: IFFALSE 25060
// exit ;
25058: GO 25086
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25060: LD_VAR 0 1
25064: PUSH
25065: LD_INT 1
25067: PPUSH
25068: LD_VAR 0 1
25072: PPUSH
25073: CALL_OW 12
25077: ARRAY
25078: PPUSH
25079: LD_INT 100
25081: PPUSH
25082: CALL_OW 234
// end ;
25086: PPOPN 1
25088: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25089: LD_EXP 54
25093: PUSH
25094: LD_EXP 68
25098: AND
25099: IFFALSE 25197
25101: GO 25103
25103: DISABLE
25104: LD_INT 0
25106: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25107: LD_ADDR_VAR 0 1
25111: PUSH
25112: LD_INT 22
25114: PUSH
25115: LD_OWVAR 2
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 21
25126: PUSH
25127: LD_INT 1
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PPUSH
25138: CALL_OW 69
25142: ST_TO_ADDR
// if not tmp then
25143: LD_VAR 0 1
25147: NOT
25148: IFFALSE 25152
// exit ;
25150: GO 25197
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25152: LD_VAR 0 1
25156: PUSH
25157: LD_INT 1
25159: PPUSH
25160: LD_VAR 0 1
25164: PPUSH
25165: CALL_OW 12
25169: ARRAY
25170: PPUSH
25171: LD_INT 1
25173: PPUSH
25174: LD_INT 4
25176: PPUSH
25177: CALL_OW 12
25181: PPUSH
25182: LD_INT 3000
25184: PPUSH
25185: LD_INT 9000
25187: PPUSH
25188: CALL_OW 12
25192: PPUSH
25193: CALL_OW 492
// end ;
25197: PPOPN 1
25199: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25200: LD_EXP 54
25204: PUSH
25205: LD_EXP 69
25209: AND
25210: IFFALSE 25230
25212: GO 25214
25214: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25215: LD_INT 1
25217: PPUSH
25218: LD_OWVAR 2
25222: PPUSH
25223: LD_INT 0
25225: PPUSH
25226: CALL_OW 324
25230: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25231: LD_EXP 54
25235: PUSH
25236: LD_EXP 70
25240: AND
25241: IFFALSE 25324
25243: GO 25245
25245: DISABLE
25246: LD_INT 0
25248: PPUSH
25249: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25250: LD_ADDR_VAR 0 2
25254: PUSH
25255: LD_INT 22
25257: PUSH
25258: LD_OWVAR 2
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 21
25269: PUSH
25270: LD_INT 3
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PPUSH
25281: CALL_OW 69
25285: ST_TO_ADDR
// if not tmp then
25286: LD_VAR 0 2
25290: NOT
25291: IFFALSE 25295
// exit ;
25293: GO 25324
// for i in tmp do
25295: LD_ADDR_VAR 0 1
25299: PUSH
25300: LD_VAR 0 2
25304: PUSH
25305: FOR_IN
25306: IFFALSE 25322
// SetBLevel ( i , 10 ) ;
25308: LD_VAR 0 1
25312: PPUSH
25313: LD_INT 10
25315: PPUSH
25316: CALL_OW 241
25320: GO 25305
25322: POP
25323: POP
// end ;
25324: PPOPN 2
25326: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25327: LD_EXP 54
25331: PUSH
25332: LD_EXP 71
25336: AND
25337: IFFALSE 25448
25339: GO 25341
25341: DISABLE
25342: LD_INT 0
25344: PPUSH
25345: PPUSH
25346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25347: LD_ADDR_VAR 0 3
25351: PUSH
25352: LD_INT 22
25354: PUSH
25355: LD_OWVAR 2
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 25
25366: PUSH
25367: LD_INT 1
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PPUSH
25378: CALL_OW 69
25382: ST_TO_ADDR
// if not tmp then
25383: LD_VAR 0 3
25387: NOT
25388: IFFALSE 25392
// exit ;
25390: GO 25448
// un := tmp [ rand ( 1 , tmp ) ] ;
25392: LD_ADDR_VAR 0 2
25396: PUSH
25397: LD_VAR 0 3
25401: PUSH
25402: LD_INT 1
25404: PPUSH
25405: LD_VAR 0 3
25409: PPUSH
25410: CALL_OW 12
25414: ARRAY
25415: ST_TO_ADDR
// if Crawls ( un ) then
25416: LD_VAR 0 2
25420: PPUSH
25421: CALL_OW 318
25425: IFFALSE 25436
// ComWalk ( un ) ;
25427: LD_VAR 0 2
25431: PPUSH
25432: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25436: LD_VAR 0 2
25440: PPUSH
25441: LD_INT 5
25443: PPUSH
25444: CALL_OW 336
// end ;
25448: PPOPN 3
25450: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25451: LD_EXP 54
25455: PUSH
25456: LD_EXP 72
25460: AND
25461: PUSH
25462: LD_OWVAR 67
25466: PUSH
25467: LD_INT 4
25469: LESS
25470: AND
25471: IFFALSE 25490
25473: GO 25475
25475: DISABLE
// begin Difficulty := Difficulty + 1 ;
25476: LD_ADDR_OWVAR 67
25480: PUSH
25481: LD_OWVAR 67
25485: PUSH
25486: LD_INT 1
25488: PLUS
25489: ST_TO_ADDR
// end ;
25490: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25491: LD_EXP 54
25495: PUSH
25496: LD_EXP 73
25500: AND
25501: IFFALSE 25604
25503: GO 25505
25505: DISABLE
25506: LD_INT 0
25508: PPUSH
// begin for i := 1 to 5 do
25509: LD_ADDR_VAR 0 1
25513: PUSH
25514: DOUBLE
25515: LD_INT 1
25517: DEC
25518: ST_TO_ADDR
25519: LD_INT 5
25521: PUSH
25522: FOR_TO
25523: IFFALSE 25602
// begin uc_nation := nation_nature ;
25525: LD_ADDR_OWVAR 21
25529: PUSH
25530: LD_INT 0
25532: ST_TO_ADDR
// uc_side := 0 ;
25533: LD_ADDR_OWVAR 20
25537: PUSH
25538: LD_INT 0
25540: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25541: LD_ADDR_OWVAR 29
25545: PUSH
25546: LD_INT 12
25548: PUSH
25549: LD_INT 12
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: ST_TO_ADDR
// hc_agressivity := 20 ;
25556: LD_ADDR_OWVAR 35
25560: PUSH
25561: LD_INT 20
25563: ST_TO_ADDR
// hc_class := class_tiger ;
25564: LD_ADDR_OWVAR 28
25568: PUSH
25569: LD_INT 14
25571: ST_TO_ADDR
// hc_gallery :=  ;
25572: LD_ADDR_OWVAR 33
25576: PUSH
25577: LD_STRING 
25579: ST_TO_ADDR
// hc_name :=  ;
25580: LD_ADDR_OWVAR 26
25584: PUSH
25585: LD_STRING 
25587: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25588: CALL_OW 44
25592: PPUSH
25593: LD_INT 0
25595: PPUSH
25596: CALL_OW 51
// end ;
25600: GO 25522
25602: POP
25603: POP
// end ;
25604: PPOPN 1
25606: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25607: LD_EXP 54
25611: PUSH
25612: LD_EXP 74
25616: AND
25617: IFFALSE 25626
25619: GO 25621
25621: DISABLE
// StreamSibBomb ;
25622: CALL 25627 0 0
25626: END
// export function StreamSibBomb ; var i , x , y ; begin
25627: LD_INT 0
25629: PPUSH
25630: PPUSH
25631: PPUSH
25632: PPUSH
// result := false ;
25633: LD_ADDR_VAR 0 1
25637: PUSH
25638: LD_INT 0
25640: ST_TO_ADDR
// for i := 1 to 16 do
25641: LD_ADDR_VAR 0 2
25645: PUSH
25646: DOUBLE
25647: LD_INT 1
25649: DEC
25650: ST_TO_ADDR
25651: LD_INT 16
25653: PUSH
25654: FOR_TO
25655: IFFALSE 25854
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25657: LD_ADDR_VAR 0 3
25661: PUSH
25662: LD_INT 10
25664: PUSH
25665: LD_INT 20
25667: PUSH
25668: LD_INT 30
25670: PUSH
25671: LD_INT 40
25673: PUSH
25674: LD_INT 50
25676: PUSH
25677: LD_INT 60
25679: PUSH
25680: LD_INT 70
25682: PUSH
25683: LD_INT 80
25685: PUSH
25686: LD_INT 90
25688: PUSH
25689: LD_INT 100
25691: PUSH
25692: LD_INT 110
25694: PUSH
25695: LD_INT 120
25697: PUSH
25698: LD_INT 130
25700: PUSH
25701: LD_INT 140
25703: PUSH
25704: LD_INT 150
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: PUSH
25724: LD_INT 1
25726: PPUSH
25727: LD_INT 15
25729: PPUSH
25730: CALL_OW 12
25734: ARRAY
25735: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25736: LD_ADDR_VAR 0 4
25740: PUSH
25741: LD_INT 10
25743: PUSH
25744: LD_INT 20
25746: PUSH
25747: LD_INT 30
25749: PUSH
25750: LD_INT 40
25752: PUSH
25753: LD_INT 50
25755: PUSH
25756: LD_INT 60
25758: PUSH
25759: LD_INT 70
25761: PUSH
25762: LD_INT 80
25764: PUSH
25765: LD_INT 90
25767: PUSH
25768: LD_INT 100
25770: PUSH
25771: LD_INT 110
25773: PUSH
25774: LD_INT 120
25776: PUSH
25777: LD_INT 130
25779: PUSH
25780: LD_INT 140
25782: PUSH
25783: LD_INT 150
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: PUSH
25803: LD_INT 1
25805: PPUSH
25806: LD_INT 15
25808: PPUSH
25809: CALL_OW 12
25813: ARRAY
25814: ST_TO_ADDR
// if ValidHex ( x , y ) then
25815: LD_VAR 0 3
25819: PPUSH
25820: LD_VAR 0 4
25824: PPUSH
25825: CALL_OW 488
25829: IFFALSE 25852
// begin result := [ x , y ] ;
25831: LD_ADDR_VAR 0 1
25835: PUSH
25836: LD_VAR 0 3
25840: PUSH
25841: LD_VAR 0 4
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: ST_TO_ADDR
// break ;
25850: GO 25854
// end ; end ;
25852: GO 25654
25854: POP
25855: POP
// if result then
25856: LD_VAR 0 1
25860: IFFALSE 25920
// begin ToLua ( playSibBomb() ) ;
25862: LD_STRING playSibBomb()
25864: PPUSH
25865: CALL_OW 559
// wait ( 0 0$14 ) ;
25869: LD_INT 490
25871: PPUSH
25872: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25876: LD_VAR 0 1
25880: PUSH
25881: LD_INT 1
25883: ARRAY
25884: PPUSH
25885: LD_VAR 0 1
25889: PUSH
25890: LD_INT 2
25892: ARRAY
25893: PPUSH
25894: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25898: LD_VAR 0 1
25902: PUSH
25903: LD_INT 1
25905: ARRAY
25906: PPUSH
25907: LD_VAR 0 1
25911: PUSH
25912: LD_INT 2
25914: ARRAY
25915: PPUSH
25916: CALL_OW 429
// end ; end ;
25920: LD_VAR 0 1
25924: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25925: LD_EXP 54
25929: PUSH
25930: LD_EXP 76
25934: AND
25935: IFFALSE 25947
25937: GO 25939
25939: DISABLE
// YouLost (  ) ;
25940: LD_STRING 
25942: PPUSH
25943: CALL_OW 104
25947: END
// every 0 0$1 trigger StreamModeActive and sFog do
25948: LD_EXP 54
25952: PUSH
25953: LD_EXP 75
25957: AND
25958: IFFALSE 25972
25960: GO 25962
25962: DISABLE
// FogOff ( your_side ) ;
25963: LD_OWVAR 2
25967: PPUSH
25968: CALL_OW 344
25972: END
// every 0 0$1 trigger StreamModeActive and sSun do
25973: LD_EXP 54
25977: PUSH
25978: LD_EXP 77
25982: AND
25983: IFFALSE 26011
25985: GO 25987
25987: DISABLE
// begin solar_recharge_percent := 0 ;
25988: LD_ADDR_OWVAR 79
25992: PUSH
25993: LD_INT 0
25995: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25996: LD_INT 10500
25998: PPUSH
25999: CALL_OW 67
// solar_recharge_percent := 100 ;
26003: LD_ADDR_OWVAR 79
26007: PUSH
26008: LD_INT 100
26010: ST_TO_ADDR
// end ;
26011: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26012: LD_EXP 54
26016: PUSH
26017: LD_EXP 78
26021: AND
26022: IFFALSE 26261
26024: GO 26026
26026: DISABLE
26027: LD_INT 0
26029: PPUSH
26030: PPUSH
26031: PPUSH
// begin tmp := [ ] ;
26032: LD_ADDR_VAR 0 3
26036: PUSH
26037: EMPTY
26038: ST_TO_ADDR
// for i := 1 to 6 do
26039: LD_ADDR_VAR 0 1
26043: PUSH
26044: DOUBLE
26045: LD_INT 1
26047: DEC
26048: ST_TO_ADDR
26049: LD_INT 6
26051: PUSH
26052: FOR_TO
26053: IFFALSE 26158
// begin uc_nation := nation_nature ;
26055: LD_ADDR_OWVAR 21
26059: PUSH
26060: LD_INT 0
26062: ST_TO_ADDR
// uc_side := 0 ;
26063: LD_ADDR_OWVAR 20
26067: PUSH
26068: LD_INT 0
26070: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26071: LD_ADDR_OWVAR 29
26075: PUSH
26076: LD_INT 12
26078: PUSH
26079: LD_INT 12
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: ST_TO_ADDR
// hc_agressivity := 20 ;
26086: LD_ADDR_OWVAR 35
26090: PUSH
26091: LD_INT 20
26093: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26094: LD_ADDR_OWVAR 28
26098: PUSH
26099: LD_INT 17
26101: ST_TO_ADDR
// hc_gallery :=  ;
26102: LD_ADDR_OWVAR 33
26106: PUSH
26107: LD_STRING 
26109: ST_TO_ADDR
// hc_name :=  ;
26110: LD_ADDR_OWVAR 26
26114: PUSH
26115: LD_STRING 
26117: ST_TO_ADDR
// un := CreateHuman ;
26118: LD_ADDR_VAR 0 2
26122: PUSH
26123: CALL_OW 44
26127: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26128: LD_VAR 0 2
26132: PPUSH
26133: LD_INT 1
26135: PPUSH
26136: CALL_OW 51
// tmp := tmp ^ un ;
26140: LD_ADDR_VAR 0 3
26144: PUSH
26145: LD_VAR 0 3
26149: PUSH
26150: LD_VAR 0 2
26154: ADD
26155: ST_TO_ADDR
// end ;
26156: GO 26052
26158: POP
26159: POP
// repeat wait ( 0 0$1 ) ;
26160: LD_INT 35
26162: PPUSH
26163: CALL_OW 67
// for un in tmp do
26167: LD_ADDR_VAR 0 2
26171: PUSH
26172: LD_VAR 0 3
26176: PUSH
26177: FOR_IN
26178: IFFALSE 26252
// begin if IsDead ( un ) then
26180: LD_VAR 0 2
26184: PPUSH
26185: CALL_OW 301
26189: IFFALSE 26209
// begin tmp := tmp diff un ;
26191: LD_ADDR_VAR 0 3
26195: PUSH
26196: LD_VAR 0 3
26200: PUSH
26201: LD_VAR 0 2
26205: DIFF
26206: ST_TO_ADDR
// continue ;
26207: GO 26177
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26209: LD_VAR 0 2
26213: PPUSH
26214: LD_INT 3
26216: PUSH
26217: LD_INT 22
26219: PUSH
26220: LD_INT 0
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PPUSH
26231: CALL_OW 69
26235: PPUSH
26236: LD_VAR 0 2
26240: PPUSH
26241: CALL_OW 74
26245: PPUSH
26246: CALL_OW 115
// end ;
26250: GO 26177
26252: POP
26253: POP
// until not tmp ;
26254: LD_VAR 0 3
26258: NOT
26259: IFFALSE 26160
// end ;
26261: PPOPN 3
26263: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26264: LD_EXP 54
26268: PUSH
26269: LD_EXP 79
26273: AND
26274: IFFALSE 26328
26276: GO 26278
26278: DISABLE
// begin ToLua ( displayTroll(); ) ;
26279: LD_STRING displayTroll();
26281: PPUSH
26282: CALL_OW 559
// wait ( 3 3$00 ) ;
26286: LD_INT 6300
26288: PPUSH
26289: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26293: LD_STRING hideTroll();
26295: PPUSH
26296: CALL_OW 559
// wait ( 1 1$00 ) ;
26300: LD_INT 2100
26302: PPUSH
26303: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26307: LD_STRING displayTroll();
26309: PPUSH
26310: CALL_OW 559
// wait ( 1 1$00 ) ;
26314: LD_INT 2100
26316: PPUSH
26317: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26321: LD_STRING hideTroll();
26323: PPUSH
26324: CALL_OW 559
// end ;
26328: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26329: LD_EXP 54
26333: PUSH
26334: LD_EXP 80
26338: AND
26339: IFFALSE 26402
26341: GO 26343
26343: DISABLE
26344: LD_INT 0
26346: PPUSH
// begin p := 0 ;
26347: LD_ADDR_VAR 0 1
26351: PUSH
26352: LD_INT 0
26354: ST_TO_ADDR
// repeat game_speed := 1 ;
26355: LD_ADDR_OWVAR 65
26359: PUSH
26360: LD_INT 1
26362: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26363: LD_INT 35
26365: PPUSH
26366: CALL_OW 67
// p := p + 1 ;
26370: LD_ADDR_VAR 0 1
26374: PUSH
26375: LD_VAR 0 1
26379: PUSH
26380: LD_INT 1
26382: PLUS
26383: ST_TO_ADDR
// until p >= 60 ;
26384: LD_VAR 0 1
26388: PUSH
26389: LD_INT 60
26391: GREATEREQUAL
26392: IFFALSE 26355
// game_speed := 4 ;
26394: LD_ADDR_OWVAR 65
26398: PUSH
26399: LD_INT 4
26401: ST_TO_ADDR
// end ;
26402: PPOPN 1
26404: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26405: LD_EXP 54
26409: PUSH
26410: LD_EXP 81
26414: AND
26415: IFFALSE 26561
26417: GO 26419
26419: DISABLE
26420: LD_INT 0
26422: PPUSH
26423: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26424: LD_ADDR_VAR 0 1
26428: PUSH
26429: LD_INT 22
26431: PUSH
26432: LD_OWVAR 2
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 2
26443: PUSH
26444: LD_INT 30
26446: PUSH
26447: LD_INT 0
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 30
26456: PUSH
26457: LD_INT 1
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: LIST
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PPUSH
26473: CALL_OW 69
26477: ST_TO_ADDR
// if not depot then
26478: LD_VAR 0 1
26482: NOT
26483: IFFALSE 26487
// exit ;
26485: GO 26561
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26487: LD_ADDR_VAR 0 2
26491: PUSH
26492: LD_VAR 0 1
26496: PUSH
26497: LD_INT 1
26499: PPUSH
26500: LD_VAR 0 1
26504: PPUSH
26505: CALL_OW 12
26509: ARRAY
26510: PPUSH
26511: CALL_OW 274
26515: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26516: LD_VAR 0 2
26520: PPUSH
26521: LD_INT 1
26523: PPUSH
26524: LD_INT 0
26526: PPUSH
26527: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26531: LD_VAR 0 2
26535: PPUSH
26536: LD_INT 2
26538: PPUSH
26539: LD_INT 0
26541: PPUSH
26542: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26546: LD_VAR 0 2
26550: PPUSH
26551: LD_INT 3
26553: PPUSH
26554: LD_INT 0
26556: PPUSH
26557: CALL_OW 277
// end ;
26561: PPOPN 2
26563: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26564: LD_EXP 54
26568: PUSH
26569: LD_EXP 82
26573: AND
26574: IFFALSE 26671
26576: GO 26578
26578: DISABLE
26579: LD_INT 0
26581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26582: LD_ADDR_VAR 0 1
26586: PUSH
26587: LD_INT 22
26589: PUSH
26590: LD_OWVAR 2
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: LD_INT 21
26601: PUSH
26602: LD_INT 1
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 3
26611: PUSH
26612: LD_INT 23
26614: PUSH
26615: LD_INT 0
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: LIST
26630: PPUSH
26631: CALL_OW 69
26635: ST_TO_ADDR
// if not tmp then
26636: LD_VAR 0 1
26640: NOT
26641: IFFALSE 26645
// exit ;
26643: GO 26671
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26645: LD_VAR 0 1
26649: PUSH
26650: LD_INT 1
26652: PPUSH
26653: LD_VAR 0 1
26657: PPUSH
26658: CALL_OW 12
26662: ARRAY
26663: PPUSH
26664: LD_INT 200
26666: PPUSH
26667: CALL_OW 234
// end ;
26671: PPOPN 1
26673: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26674: LD_EXP 54
26678: PUSH
26679: LD_EXP 83
26683: AND
26684: IFFALSE 26763
26686: GO 26688
26688: DISABLE
26689: LD_INT 0
26691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26692: LD_ADDR_VAR 0 1
26696: PUSH
26697: LD_INT 22
26699: PUSH
26700: LD_OWVAR 2
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 21
26711: PUSH
26712: LD_INT 2
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PPUSH
26723: CALL_OW 69
26727: ST_TO_ADDR
// if not tmp then
26728: LD_VAR 0 1
26732: NOT
26733: IFFALSE 26737
// exit ;
26735: GO 26763
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26737: LD_VAR 0 1
26741: PUSH
26742: LD_INT 1
26744: PPUSH
26745: LD_VAR 0 1
26749: PPUSH
26750: CALL_OW 12
26754: ARRAY
26755: PPUSH
26756: LD_INT 60
26758: PPUSH
26759: CALL_OW 234
// end ;
26763: PPOPN 1
26765: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26766: LD_EXP 54
26770: PUSH
26771: LD_EXP 84
26775: AND
26776: IFFALSE 26875
26778: GO 26780
26780: DISABLE
26781: LD_INT 0
26783: PPUSH
26784: PPUSH
// begin enable ;
26785: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26786: LD_ADDR_VAR 0 1
26790: PUSH
26791: LD_INT 22
26793: PUSH
26794: LD_OWVAR 2
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 61
26805: PUSH
26806: EMPTY
26807: LIST
26808: PUSH
26809: LD_INT 33
26811: PUSH
26812: LD_INT 2
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: LIST
26823: PPUSH
26824: CALL_OW 69
26828: ST_TO_ADDR
// if not tmp then
26829: LD_VAR 0 1
26833: NOT
26834: IFFALSE 26838
// exit ;
26836: GO 26875
// for i in tmp do
26838: LD_ADDR_VAR 0 2
26842: PUSH
26843: LD_VAR 0 1
26847: PUSH
26848: FOR_IN
26849: IFFALSE 26873
// if IsControledBy ( i ) then
26851: LD_VAR 0 2
26855: PPUSH
26856: CALL_OW 312
26860: IFFALSE 26871
// ComUnlink ( i ) ;
26862: LD_VAR 0 2
26866: PPUSH
26867: CALL_OW 136
26871: GO 26848
26873: POP
26874: POP
// end ;
26875: PPOPN 2
26877: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26878: LD_EXP 54
26882: PUSH
26883: LD_EXP 85
26887: AND
26888: IFFALSE 27028
26890: GO 26892
26892: DISABLE
26893: LD_INT 0
26895: PPUSH
26896: PPUSH
// begin ToLua ( displayPowell(); ) ;
26897: LD_STRING displayPowell();
26899: PPUSH
26900: CALL_OW 559
// uc_side := 0 ;
26904: LD_ADDR_OWVAR 20
26908: PUSH
26909: LD_INT 0
26911: ST_TO_ADDR
// uc_nation := 2 ;
26912: LD_ADDR_OWVAR 21
26916: PUSH
26917: LD_INT 2
26919: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26920: LD_ADDR_OWVAR 37
26924: PUSH
26925: LD_INT 14
26927: ST_TO_ADDR
// vc_engine := engine_siberite ;
26928: LD_ADDR_OWVAR 39
26932: PUSH
26933: LD_INT 3
26935: ST_TO_ADDR
// vc_control := control_apeman ;
26936: LD_ADDR_OWVAR 38
26940: PUSH
26941: LD_INT 5
26943: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26944: LD_ADDR_OWVAR 40
26948: PUSH
26949: LD_INT 29
26951: ST_TO_ADDR
// un := CreateVehicle ;
26952: LD_ADDR_VAR 0 2
26956: PUSH
26957: CALL_OW 45
26961: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26962: LD_VAR 0 2
26966: PPUSH
26967: LD_INT 1
26969: PPUSH
26970: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26974: LD_INT 35
26976: PPUSH
26977: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26981: LD_VAR 0 2
26985: PPUSH
26986: LD_INT 22
26988: PUSH
26989: LD_OWVAR 2
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PPUSH
26998: CALL_OW 69
27002: PPUSH
27003: LD_VAR 0 2
27007: PPUSH
27008: CALL_OW 74
27012: PPUSH
27013: CALL_OW 115
// until IsDead ( un ) ;
27017: LD_VAR 0 2
27021: PPUSH
27022: CALL_OW 301
27026: IFFALSE 26974
// end ;
27028: PPOPN 2
27030: END
// every 0 0$1 trigger StreamModeActive and sStu do
27031: LD_EXP 54
27035: PUSH
27036: LD_EXP 93
27040: AND
27041: IFFALSE 27057
27043: GO 27045
27045: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27046: LD_STRING displayStucuk();
27048: PPUSH
27049: CALL_OW 559
// ResetFog ;
27053: CALL_OW 335
// end ;
27057: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27058: LD_EXP 54
27062: PUSH
27063: LD_EXP 86
27067: AND
27068: IFFALSE 27209
27070: GO 27072
27072: DISABLE
27073: LD_INT 0
27075: PPUSH
27076: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27077: LD_ADDR_VAR 0 2
27081: PUSH
27082: LD_INT 22
27084: PUSH
27085: LD_OWVAR 2
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: LD_INT 21
27096: PUSH
27097: LD_INT 1
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PPUSH
27108: CALL_OW 69
27112: ST_TO_ADDR
// if not tmp then
27113: LD_VAR 0 2
27117: NOT
27118: IFFALSE 27122
// exit ;
27120: GO 27209
// un := tmp [ rand ( 1 , tmp ) ] ;
27122: LD_ADDR_VAR 0 1
27126: PUSH
27127: LD_VAR 0 2
27131: PUSH
27132: LD_INT 1
27134: PPUSH
27135: LD_VAR 0 2
27139: PPUSH
27140: CALL_OW 12
27144: ARRAY
27145: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27146: LD_VAR 0 1
27150: PPUSH
27151: LD_INT 0
27153: PPUSH
27154: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27158: LD_VAR 0 1
27162: PPUSH
27163: LD_OWVAR 3
27167: PUSH
27168: LD_VAR 0 1
27172: DIFF
27173: PPUSH
27174: LD_VAR 0 1
27178: PPUSH
27179: CALL_OW 74
27183: PPUSH
27184: CALL_OW 115
// wait ( 0 0$20 ) ;
27188: LD_INT 700
27190: PPUSH
27191: CALL_OW 67
// SetSide ( un , your_side ) ;
27195: LD_VAR 0 1
27199: PPUSH
27200: LD_OWVAR 2
27204: PPUSH
27205: CALL_OW 235
// end ;
27209: PPOPN 2
27211: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27212: LD_EXP 54
27216: PUSH
27217: LD_EXP 87
27221: AND
27222: IFFALSE 27328
27224: GO 27226
27226: DISABLE
27227: LD_INT 0
27229: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27230: LD_ADDR_VAR 0 1
27234: PUSH
27235: LD_INT 22
27237: PUSH
27238: LD_OWVAR 2
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 2
27249: PUSH
27250: LD_INT 30
27252: PUSH
27253: LD_INT 0
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PUSH
27260: LD_INT 30
27262: PUSH
27263: LD_INT 1
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: LIST
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PPUSH
27279: CALL_OW 69
27283: ST_TO_ADDR
// if not depot then
27284: LD_VAR 0 1
27288: NOT
27289: IFFALSE 27293
// exit ;
27291: GO 27328
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27293: LD_VAR 0 1
27297: PUSH
27298: LD_INT 1
27300: ARRAY
27301: PPUSH
27302: CALL_OW 250
27306: PPUSH
27307: LD_VAR 0 1
27311: PUSH
27312: LD_INT 1
27314: ARRAY
27315: PPUSH
27316: CALL_OW 251
27320: PPUSH
27321: LD_INT 70
27323: PPUSH
27324: CALL_OW 495
// end ;
27328: PPOPN 1
27330: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27331: LD_EXP 54
27335: PUSH
27336: LD_EXP 88
27340: AND
27341: IFFALSE 27552
27343: GO 27345
27345: DISABLE
27346: LD_INT 0
27348: PPUSH
27349: PPUSH
27350: PPUSH
27351: PPUSH
27352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27353: LD_ADDR_VAR 0 5
27357: PUSH
27358: LD_INT 22
27360: PUSH
27361: LD_OWVAR 2
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 21
27372: PUSH
27373: LD_INT 1
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PPUSH
27384: CALL_OW 69
27388: ST_TO_ADDR
// if not tmp then
27389: LD_VAR 0 5
27393: NOT
27394: IFFALSE 27398
// exit ;
27396: GO 27552
// for i in tmp do
27398: LD_ADDR_VAR 0 1
27402: PUSH
27403: LD_VAR 0 5
27407: PUSH
27408: FOR_IN
27409: IFFALSE 27550
// begin d := rand ( 0 , 5 ) ;
27411: LD_ADDR_VAR 0 4
27415: PUSH
27416: LD_INT 0
27418: PPUSH
27419: LD_INT 5
27421: PPUSH
27422: CALL_OW 12
27426: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27427: LD_ADDR_VAR 0 2
27431: PUSH
27432: LD_VAR 0 1
27436: PPUSH
27437: CALL_OW 250
27441: PPUSH
27442: LD_VAR 0 4
27446: PPUSH
27447: LD_INT 3
27449: PPUSH
27450: LD_INT 12
27452: PPUSH
27453: CALL_OW 12
27457: PPUSH
27458: CALL_OW 272
27462: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27463: LD_ADDR_VAR 0 3
27467: PUSH
27468: LD_VAR 0 1
27472: PPUSH
27473: CALL_OW 251
27477: PPUSH
27478: LD_VAR 0 4
27482: PPUSH
27483: LD_INT 3
27485: PPUSH
27486: LD_INT 12
27488: PPUSH
27489: CALL_OW 12
27493: PPUSH
27494: CALL_OW 273
27498: ST_TO_ADDR
// if ValidHex ( x , y ) then
27499: LD_VAR 0 2
27503: PPUSH
27504: LD_VAR 0 3
27508: PPUSH
27509: CALL_OW 488
27513: IFFALSE 27548
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27515: LD_VAR 0 1
27519: PPUSH
27520: LD_VAR 0 2
27524: PPUSH
27525: LD_VAR 0 3
27529: PPUSH
27530: LD_INT 3
27532: PPUSH
27533: LD_INT 6
27535: PPUSH
27536: CALL_OW 12
27540: PPUSH
27541: LD_INT 1
27543: PPUSH
27544: CALL_OW 483
// end ;
27548: GO 27408
27550: POP
27551: POP
// end ;
27552: PPOPN 5
27554: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27555: LD_EXP 54
27559: PUSH
27560: LD_EXP 89
27564: AND
27565: IFFALSE 27659
27567: GO 27569
27569: DISABLE
27570: LD_INT 0
27572: PPUSH
27573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27574: LD_ADDR_VAR 0 2
27578: PUSH
27579: LD_INT 22
27581: PUSH
27582: LD_OWVAR 2
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 32
27593: PUSH
27594: LD_INT 1
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: LD_INT 21
27603: PUSH
27604: LD_INT 2
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: LIST
27615: PPUSH
27616: CALL_OW 69
27620: ST_TO_ADDR
// if not tmp then
27621: LD_VAR 0 2
27625: NOT
27626: IFFALSE 27630
// exit ;
27628: GO 27659
// for i in tmp do
27630: LD_ADDR_VAR 0 1
27634: PUSH
27635: LD_VAR 0 2
27639: PUSH
27640: FOR_IN
27641: IFFALSE 27657
// SetFuel ( i , 0 ) ;
27643: LD_VAR 0 1
27647: PPUSH
27648: LD_INT 0
27650: PPUSH
27651: CALL_OW 240
27655: GO 27640
27657: POP
27658: POP
// end ;
27659: PPOPN 2
27661: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27662: LD_EXP 54
27666: PUSH
27667: LD_EXP 90
27671: AND
27672: IFFALSE 27738
27674: GO 27676
27676: DISABLE
27677: LD_INT 0
27679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27680: LD_ADDR_VAR 0 1
27684: PUSH
27685: LD_INT 22
27687: PUSH
27688: LD_OWVAR 2
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 30
27699: PUSH
27700: LD_INT 29
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PPUSH
27711: CALL_OW 69
27715: ST_TO_ADDR
// if not tmp then
27716: LD_VAR 0 1
27720: NOT
27721: IFFALSE 27725
// exit ;
27723: GO 27738
// DestroyUnit ( tmp [ 1 ] ) ;
27725: LD_VAR 0 1
27729: PUSH
27730: LD_INT 1
27732: ARRAY
27733: PPUSH
27734: CALL_OW 65
// end ;
27738: PPOPN 1
27740: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27741: LD_EXP 54
27745: PUSH
27746: LD_EXP 92
27750: AND
27751: IFFALSE 27880
27753: GO 27755
27755: DISABLE
27756: LD_INT 0
27758: PPUSH
// begin uc_side := 0 ;
27759: LD_ADDR_OWVAR 20
27763: PUSH
27764: LD_INT 0
27766: ST_TO_ADDR
// uc_nation := nation_arabian ;
27767: LD_ADDR_OWVAR 21
27771: PUSH
27772: LD_INT 2
27774: ST_TO_ADDR
// hc_gallery :=  ;
27775: LD_ADDR_OWVAR 33
27779: PUSH
27780: LD_STRING 
27782: ST_TO_ADDR
// hc_name :=  ;
27783: LD_ADDR_OWVAR 26
27787: PUSH
27788: LD_STRING 
27790: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27791: LD_INT 1
27793: PPUSH
27794: LD_INT 11
27796: PPUSH
27797: LD_INT 10
27799: PPUSH
27800: CALL_OW 380
// un := CreateHuman ;
27804: LD_ADDR_VAR 0 1
27808: PUSH
27809: CALL_OW 44
27813: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27814: LD_VAR 0 1
27818: PPUSH
27819: LD_INT 1
27821: PPUSH
27822: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27826: LD_INT 35
27828: PPUSH
27829: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27833: LD_VAR 0 1
27837: PPUSH
27838: LD_INT 22
27840: PUSH
27841: LD_OWVAR 2
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PPUSH
27850: CALL_OW 69
27854: PPUSH
27855: LD_VAR 0 1
27859: PPUSH
27860: CALL_OW 74
27864: PPUSH
27865: CALL_OW 115
// until IsDead ( un ) ;
27869: LD_VAR 0 1
27873: PPUSH
27874: CALL_OW 301
27878: IFFALSE 27826
// end ;
27880: PPOPN 1
27882: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27883: LD_EXP 54
27887: PUSH
27888: LD_EXP 94
27892: AND
27893: IFFALSE 27905
27895: GO 27897
27897: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27898: LD_STRING earthquake(getX(game), 0, 32)
27900: PPUSH
27901: CALL_OW 559
27905: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27906: LD_EXP 54
27910: PUSH
27911: LD_EXP 95
27915: AND
27916: IFFALSE 28007
27918: GO 27920
27920: DISABLE
27921: LD_INT 0
27923: PPUSH
// begin enable ;
27924: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27925: LD_ADDR_VAR 0 1
27929: PUSH
27930: LD_INT 22
27932: PUSH
27933: LD_OWVAR 2
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: LD_INT 21
27944: PUSH
27945: LD_INT 2
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 33
27954: PUSH
27955: LD_INT 3
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: LIST
27966: PPUSH
27967: CALL_OW 69
27971: ST_TO_ADDR
// if not tmp then
27972: LD_VAR 0 1
27976: NOT
27977: IFFALSE 27981
// exit ;
27979: GO 28007
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27981: LD_VAR 0 1
27985: PUSH
27986: LD_INT 1
27988: PPUSH
27989: LD_VAR 0 1
27993: PPUSH
27994: CALL_OW 12
27998: ARRAY
27999: PPUSH
28000: LD_INT 1
28002: PPUSH
28003: CALL_OW 234
// end ;
28007: PPOPN 1
28009: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28010: LD_EXP 54
28014: PUSH
28015: LD_EXP 96
28019: AND
28020: IFFALSE 28161
28022: GO 28024
28024: DISABLE
28025: LD_INT 0
28027: PPUSH
28028: PPUSH
28029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28030: LD_ADDR_VAR 0 3
28034: PUSH
28035: LD_INT 22
28037: PUSH
28038: LD_OWVAR 2
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 25
28049: PUSH
28050: LD_INT 1
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PPUSH
28061: CALL_OW 69
28065: ST_TO_ADDR
// if not tmp then
28066: LD_VAR 0 3
28070: NOT
28071: IFFALSE 28075
// exit ;
28073: GO 28161
// un := tmp [ rand ( 1 , tmp ) ] ;
28075: LD_ADDR_VAR 0 2
28079: PUSH
28080: LD_VAR 0 3
28084: PUSH
28085: LD_INT 1
28087: PPUSH
28088: LD_VAR 0 3
28092: PPUSH
28093: CALL_OW 12
28097: ARRAY
28098: ST_TO_ADDR
// if Crawls ( un ) then
28099: LD_VAR 0 2
28103: PPUSH
28104: CALL_OW 318
28108: IFFALSE 28119
// ComWalk ( un ) ;
28110: LD_VAR 0 2
28114: PPUSH
28115: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28119: LD_VAR 0 2
28123: PPUSH
28124: LD_INT 9
28126: PPUSH
28127: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28131: LD_INT 28
28133: PPUSH
28134: LD_OWVAR 2
28138: PPUSH
28139: LD_INT 2
28141: PPUSH
28142: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28146: LD_INT 29
28148: PPUSH
28149: LD_OWVAR 2
28153: PPUSH
28154: LD_INT 2
28156: PPUSH
28157: CALL_OW 322
// end ;
28161: PPOPN 3
28163: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28164: LD_EXP 54
28168: PUSH
28169: LD_EXP 97
28173: AND
28174: IFFALSE 28285
28176: GO 28178
28178: DISABLE
28179: LD_INT 0
28181: PPUSH
28182: PPUSH
28183: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28184: LD_ADDR_VAR 0 3
28188: PUSH
28189: LD_INT 22
28191: PUSH
28192: LD_OWVAR 2
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 25
28203: PUSH
28204: LD_INT 1
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PPUSH
28215: CALL_OW 69
28219: ST_TO_ADDR
// if not tmp then
28220: LD_VAR 0 3
28224: NOT
28225: IFFALSE 28229
// exit ;
28227: GO 28285
// un := tmp [ rand ( 1 , tmp ) ] ;
28229: LD_ADDR_VAR 0 2
28233: PUSH
28234: LD_VAR 0 3
28238: PUSH
28239: LD_INT 1
28241: PPUSH
28242: LD_VAR 0 3
28246: PPUSH
28247: CALL_OW 12
28251: ARRAY
28252: ST_TO_ADDR
// if Crawls ( un ) then
28253: LD_VAR 0 2
28257: PPUSH
28258: CALL_OW 318
28262: IFFALSE 28273
// ComWalk ( un ) ;
28264: LD_VAR 0 2
28268: PPUSH
28269: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28273: LD_VAR 0 2
28277: PPUSH
28278: LD_INT 8
28280: PPUSH
28281: CALL_OW 336
// end ;
28285: PPOPN 3
28287: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28288: LD_EXP 54
28292: PUSH
28293: LD_EXP 98
28297: AND
28298: IFFALSE 28442
28300: GO 28302
28302: DISABLE
28303: LD_INT 0
28305: PPUSH
28306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28307: LD_ADDR_VAR 0 2
28311: PUSH
28312: LD_INT 22
28314: PUSH
28315: LD_OWVAR 2
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 21
28326: PUSH
28327: LD_INT 2
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 2
28336: PUSH
28337: LD_INT 34
28339: PUSH
28340: LD_INT 12
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 34
28349: PUSH
28350: LD_INT 51
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 34
28359: PUSH
28360: LD_INT 32
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: LIST
28377: PPUSH
28378: CALL_OW 69
28382: ST_TO_ADDR
// if not tmp then
28383: LD_VAR 0 2
28387: NOT
28388: IFFALSE 28392
// exit ;
28390: GO 28442
// for i in tmp do
28392: LD_ADDR_VAR 0 1
28396: PUSH
28397: LD_VAR 0 2
28401: PUSH
28402: FOR_IN
28403: IFFALSE 28440
// if GetCargo ( i , mat_artifact ) = 0 then
28405: LD_VAR 0 1
28409: PPUSH
28410: LD_INT 4
28412: PPUSH
28413: CALL_OW 289
28417: PUSH
28418: LD_INT 0
28420: EQUAL
28421: IFFALSE 28438
// SetCargo ( i , mat_siberit , 100 ) ;
28423: LD_VAR 0 1
28427: PPUSH
28428: LD_INT 3
28430: PPUSH
28431: LD_INT 100
28433: PPUSH
28434: CALL_OW 290
28438: GO 28402
28440: POP
28441: POP
// end ;
28442: PPOPN 2
28444: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28445: LD_EXP 54
28449: PUSH
28450: LD_EXP 99
28454: AND
28455: IFFALSE 28638
28457: GO 28459
28459: DISABLE
28460: LD_INT 0
28462: PPUSH
28463: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28464: LD_ADDR_VAR 0 2
28468: PUSH
28469: LD_INT 22
28471: PUSH
28472: LD_OWVAR 2
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PPUSH
28481: CALL_OW 69
28485: ST_TO_ADDR
// if not tmp then
28486: LD_VAR 0 2
28490: NOT
28491: IFFALSE 28495
// exit ;
28493: GO 28638
// for i := 1 to 2 do
28495: LD_ADDR_VAR 0 1
28499: PUSH
28500: DOUBLE
28501: LD_INT 1
28503: DEC
28504: ST_TO_ADDR
28505: LD_INT 2
28507: PUSH
28508: FOR_TO
28509: IFFALSE 28636
// begin uc_side := your_side ;
28511: LD_ADDR_OWVAR 20
28515: PUSH
28516: LD_OWVAR 2
28520: ST_TO_ADDR
// uc_nation := nation_american ;
28521: LD_ADDR_OWVAR 21
28525: PUSH
28526: LD_INT 1
28528: ST_TO_ADDR
// vc_chassis := us_morphling ;
28529: LD_ADDR_OWVAR 37
28533: PUSH
28534: LD_INT 5
28536: ST_TO_ADDR
// vc_engine := engine_siberite ;
28537: LD_ADDR_OWVAR 39
28541: PUSH
28542: LD_INT 3
28544: ST_TO_ADDR
// vc_control := control_computer ;
28545: LD_ADDR_OWVAR 38
28549: PUSH
28550: LD_INT 3
28552: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28553: LD_ADDR_OWVAR 40
28557: PUSH
28558: LD_INT 10
28560: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28561: LD_VAR 0 2
28565: PUSH
28566: LD_INT 1
28568: ARRAY
28569: PPUSH
28570: CALL_OW 310
28574: NOT
28575: IFFALSE 28622
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28577: CALL_OW 45
28581: PPUSH
28582: LD_VAR 0 2
28586: PUSH
28587: LD_INT 1
28589: ARRAY
28590: PPUSH
28591: CALL_OW 250
28595: PPUSH
28596: LD_VAR 0 2
28600: PUSH
28601: LD_INT 1
28603: ARRAY
28604: PPUSH
28605: CALL_OW 251
28609: PPUSH
28610: LD_INT 12
28612: PPUSH
28613: LD_INT 1
28615: PPUSH
28616: CALL_OW 50
28620: GO 28634
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28622: CALL_OW 45
28626: PPUSH
28627: LD_INT 1
28629: PPUSH
28630: CALL_OW 51
// end ;
28634: GO 28508
28636: POP
28637: POP
// end ;
28638: PPOPN 2
28640: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28641: LD_EXP 54
28645: PUSH
28646: LD_EXP 100
28650: AND
28651: IFFALSE 28873
28653: GO 28655
28655: DISABLE
28656: LD_INT 0
28658: PPUSH
28659: PPUSH
28660: PPUSH
28661: PPUSH
28662: PPUSH
28663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28664: LD_ADDR_VAR 0 6
28668: PUSH
28669: LD_INT 22
28671: PUSH
28672: LD_OWVAR 2
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 21
28683: PUSH
28684: LD_INT 1
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 3
28693: PUSH
28694: LD_INT 23
28696: PUSH
28697: LD_INT 0
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: LIST
28712: PPUSH
28713: CALL_OW 69
28717: ST_TO_ADDR
// if not tmp then
28718: LD_VAR 0 6
28722: NOT
28723: IFFALSE 28727
// exit ;
28725: GO 28873
// s1 := rand ( 1 , 4 ) ;
28727: LD_ADDR_VAR 0 2
28731: PUSH
28732: LD_INT 1
28734: PPUSH
28735: LD_INT 4
28737: PPUSH
28738: CALL_OW 12
28742: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28743: LD_ADDR_VAR 0 4
28747: PUSH
28748: LD_VAR 0 6
28752: PUSH
28753: LD_INT 1
28755: ARRAY
28756: PPUSH
28757: LD_VAR 0 2
28761: PPUSH
28762: CALL_OW 259
28766: ST_TO_ADDR
// if s1 = 1 then
28767: LD_VAR 0 2
28771: PUSH
28772: LD_INT 1
28774: EQUAL
28775: IFFALSE 28795
// s2 := rand ( 2 , 4 ) else
28777: LD_ADDR_VAR 0 3
28781: PUSH
28782: LD_INT 2
28784: PPUSH
28785: LD_INT 4
28787: PPUSH
28788: CALL_OW 12
28792: ST_TO_ADDR
28793: GO 28803
// s2 := 1 ;
28795: LD_ADDR_VAR 0 3
28799: PUSH
28800: LD_INT 1
28802: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28803: LD_ADDR_VAR 0 5
28807: PUSH
28808: LD_VAR 0 6
28812: PUSH
28813: LD_INT 1
28815: ARRAY
28816: PPUSH
28817: LD_VAR 0 3
28821: PPUSH
28822: CALL_OW 259
28826: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28827: LD_VAR 0 6
28831: PUSH
28832: LD_INT 1
28834: ARRAY
28835: PPUSH
28836: LD_VAR 0 2
28840: PPUSH
28841: LD_VAR 0 5
28845: PPUSH
28846: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28850: LD_VAR 0 6
28854: PUSH
28855: LD_INT 1
28857: ARRAY
28858: PPUSH
28859: LD_VAR 0 3
28863: PPUSH
28864: LD_VAR 0 4
28868: PPUSH
28869: CALL_OW 237
// end ;
28873: PPOPN 6
28875: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28876: LD_EXP 54
28880: PUSH
28881: LD_EXP 101
28885: AND
28886: IFFALSE 28965
28888: GO 28890
28890: DISABLE
28891: LD_INT 0
28893: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28894: LD_ADDR_VAR 0 1
28898: PUSH
28899: LD_INT 22
28901: PUSH
28902: LD_OWVAR 2
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 30
28913: PUSH
28914: LD_INT 3
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PPUSH
28925: CALL_OW 69
28929: ST_TO_ADDR
// if not tmp then
28930: LD_VAR 0 1
28934: NOT
28935: IFFALSE 28939
// exit ;
28937: GO 28965
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28939: LD_VAR 0 1
28943: PUSH
28944: LD_INT 1
28946: PPUSH
28947: LD_VAR 0 1
28951: PPUSH
28952: CALL_OW 12
28956: ARRAY
28957: PPUSH
28958: LD_INT 1
28960: PPUSH
28961: CALL_OW 234
// end ;
28965: PPOPN 1
28967: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28968: LD_EXP 54
28972: PUSH
28973: LD_EXP 102
28977: AND
28978: IFFALSE 29090
28980: GO 28982
28982: DISABLE
28983: LD_INT 0
28985: PPUSH
28986: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28987: LD_ADDR_VAR 0 2
28991: PUSH
28992: LD_INT 22
28994: PUSH
28995: LD_OWVAR 2
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 2
29006: PUSH
29007: LD_INT 30
29009: PUSH
29010: LD_INT 27
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 30
29019: PUSH
29020: LD_INT 26
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 30
29029: PUSH
29030: LD_INT 28
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PPUSH
29047: CALL_OW 69
29051: ST_TO_ADDR
// if not tmp then
29052: LD_VAR 0 2
29056: NOT
29057: IFFALSE 29061
// exit ;
29059: GO 29090
// for i in tmp do
29061: LD_ADDR_VAR 0 1
29065: PUSH
29066: LD_VAR 0 2
29070: PUSH
29071: FOR_IN
29072: IFFALSE 29088
// SetLives ( i , 1 ) ;
29074: LD_VAR 0 1
29078: PPUSH
29079: LD_INT 1
29081: PPUSH
29082: CALL_OW 234
29086: GO 29071
29088: POP
29089: POP
// end ;
29090: PPOPN 2
29092: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29093: LD_EXP 54
29097: PUSH
29098: LD_EXP 103
29102: AND
29103: IFFALSE 29390
29105: GO 29107
29107: DISABLE
29108: LD_INT 0
29110: PPUSH
29111: PPUSH
29112: PPUSH
// begin i := rand ( 1 , 7 ) ;
29113: LD_ADDR_VAR 0 1
29117: PUSH
29118: LD_INT 1
29120: PPUSH
29121: LD_INT 7
29123: PPUSH
29124: CALL_OW 12
29128: ST_TO_ADDR
// case i of 1 :
29129: LD_VAR 0 1
29133: PUSH
29134: LD_INT 1
29136: DOUBLE
29137: EQUAL
29138: IFTRUE 29142
29140: GO 29152
29142: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29143: LD_STRING earthquake(getX(game), 0, 32)
29145: PPUSH
29146: CALL_OW 559
29150: GO 29390
29152: LD_INT 2
29154: DOUBLE
29155: EQUAL
29156: IFTRUE 29160
29158: GO 29174
29160: POP
// begin ToLua ( displayStucuk(); ) ;
29161: LD_STRING displayStucuk();
29163: PPUSH
29164: CALL_OW 559
// ResetFog ;
29168: CALL_OW 335
// end ; 3 :
29172: GO 29390
29174: LD_INT 3
29176: DOUBLE
29177: EQUAL
29178: IFTRUE 29182
29180: GO 29286
29182: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29183: LD_ADDR_VAR 0 2
29187: PUSH
29188: LD_INT 22
29190: PUSH
29191: LD_OWVAR 2
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 25
29202: PUSH
29203: LD_INT 1
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PPUSH
29214: CALL_OW 69
29218: ST_TO_ADDR
// if not tmp then
29219: LD_VAR 0 2
29223: NOT
29224: IFFALSE 29228
// exit ;
29226: GO 29390
// un := tmp [ rand ( 1 , tmp ) ] ;
29228: LD_ADDR_VAR 0 3
29232: PUSH
29233: LD_VAR 0 2
29237: PUSH
29238: LD_INT 1
29240: PPUSH
29241: LD_VAR 0 2
29245: PPUSH
29246: CALL_OW 12
29250: ARRAY
29251: ST_TO_ADDR
// if Crawls ( un ) then
29252: LD_VAR 0 3
29256: PPUSH
29257: CALL_OW 318
29261: IFFALSE 29272
// ComWalk ( un ) ;
29263: LD_VAR 0 3
29267: PPUSH
29268: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29272: LD_VAR 0 3
29276: PPUSH
29277: LD_INT 8
29279: PPUSH
29280: CALL_OW 336
// end ; 4 :
29284: GO 29390
29286: LD_INT 4
29288: DOUBLE
29289: EQUAL
29290: IFTRUE 29294
29292: GO 29368
29294: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29295: LD_ADDR_VAR 0 2
29299: PUSH
29300: LD_INT 22
29302: PUSH
29303: LD_OWVAR 2
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: LD_INT 30
29314: PUSH
29315: LD_INT 29
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PPUSH
29326: CALL_OW 69
29330: ST_TO_ADDR
// if not tmp then
29331: LD_VAR 0 2
29335: NOT
29336: IFFALSE 29340
// exit ;
29338: GO 29390
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29340: LD_VAR 0 2
29344: PUSH
29345: LD_INT 1
29347: ARRAY
29348: PPUSH
29349: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29353: LD_VAR 0 2
29357: PUSH
29358: LD_INT 1
29360: ARRAY
29361: PPUSH
29362: CALL_OW 65
// end ; 5 .. 7 :
29366: GO 29390
29368: LD_INT 5
29370: DOUBLE
29371: GREATEREQUAL
29372: IFFALSE 29380
29374: LD_INT 7
29376: DOUBLE
29377: LESSEQUAL
29378: IFTRUE 29382
29380: GO 29389
29382: POP
// StreamSibBomb ; end ;
29383: CALL 25627 0 0
29387: GO 29390
29389: POP
// end ;
29390: PPOPN 3
29392: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29393: LD_EXP 54
29397: PUSH
29398: LD_EXP 104
29402: AND
29403: IFFALSE 29559
29405: GO 29407
29407: DISABLE
29408: LD_INT 0
29410: PPUSH
29411: PPUSH
29412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29413: LD_ADDR_VAR 0 2
29417: PUSH
29418: LD_INT 81
29420: PUSH
29421: LD_OWVAR 2
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 2
29432: PUSH
29433: LD_INT 21
29435: PUSH
29436: LD_INT 1
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 21
29445: PUSH
29446: LD_INT 2
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: LIST
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PPUSH
29462: CALL_OW 69
29466: ST_TO_ADDR
// if not tmp then
29467: LD_VAR 0 2
29471: NOT
29472: IFFALSE 29476
// exit ;
29474: GO 29559
// p := 0 ;
29476: LD_ADDR_VAR 0 3
29480: PUSH
29481: LD_INT 0
29483: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29484: LD_INT 35
29486: PPUSH
29487: CALL_OW 67
// p := p + 1 ;
29491: LD_ADDR_VAR 0 3
29495: PUSH
29496: LD_VAR 0 3
29500: PUSH
29501: LD_INT 1
29503: PLUS
29504: ST_TO_ADDR
// for i in tmp do
29505: LD_ADDR_VAR 0 1
29509: PUSH
29510: LD_VAR 0 2
29514: PUSH
29515: FOR_IN
29516: IFFALSE 29547
// if GetLives ( i ) < 1000 then
29518: LD_VAR 0 1
29522: PPUSH
29523: CALL_OW 256
29527: PUSH
29528: LD_INT 1000
29530: LESS
29531: IFFALSE 29545
// SetLives ( i , 1000 ) ;
29533: LD_VAR 0 1
29537: PPUSH
29538: LD_INT 1000
29540: PPUSH
29541: CALL_OW 234
29545: GO 29515
29547: POP
29548: POP
// until p > 20 ;
29549: LD_VAR 0 3
29553: PUSH
29554: LD_INT 20
29556: GREATER
29557: IFFALSE 29484
// end ;
29559: PPOPN 3
29561: END
// every 0 0$1 trigger StreamModeActive and sTime do
29562: LD_EXP 54
29566: PUSH
29567: LD_EXP 105
29571: AND
29572: IFFALSE 29607
29574: GO 29576
29576: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29577: LD_INT 28
29579: PPUSH
29580: LD_OWVAR 2
29584: PPUSH
29585: LD_INT 2
29587: PPUSH
29588: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29592: LD_INT 30
29594: PPUSH
29595: LD_OWVAR 2
29599: PPUSH
29600: LD_INT 2
29602: PPUSH
29603: CALL_OW 322
// end ;
29607: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29608: LD_EXP 54
29612: PUSH
29613: LD_EXP 106
29617: AND
29618: IFFALSE 29739
29620: GO 29622
29622: DISABLE
29623: LD_INT 0
29625: PPUSH
29626: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29627: LD_ADDR_VAR 0 2
29631: PUSH
29632: LD_INT 22
29634: PUSH
29635: LD_OWVAR 2
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: LD_INT 21
29646: PUSH
29647: LD_INT 1
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 3
29656: PUSH
29657: LD_INT 23
29659: PUSH
29660: LD_INT 0
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: LIST
29675: PPUSH
29676: CALL_OW 69
29680: ST_TO_ADDR
// if not tmp then
29681: LD_VAR 0 2
29685: NOT
29686: IFFALSE 29690
// exit ;
29688: GO 29739
// for i in tmp do
29690: LD_ADDR_VAR 0 1
29694: PUSH
29695: LD_VAR 0 2
29699: PUSH
29700: FOR_IN
29701: IFFALSE 29737
// begin if Crawls ( i ) then
29703: LD_VAR 0 1
29707: PPUSH
29708: CALL_OW 318
29712: IFFALSE 29723
// ComWalk ( i ) ;
29714: LD_VAR 0 1
29718: PPUSH
29719: CALL_OW 138
// SetClass ( i , 2 ) ;
29723: LD_VAR 0 1
29727: PPUSH
29728: LD_INT 2
29730: PPUSH
29731: CALL_OW 336
// end ;
29735: GO 29700
29737: POP
29738: POP
// end ;
29739: PPOPN 2
29741: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29742: LD_EXP 54
29746: PUSH
29747: LD_EXP 107
29751: AND
29752: IFFALSE 30040
29754: GO 29756
29756: DISABLE
29757: LD_INT 0
29759: PPUSH
29760: PPUSH
29761: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29762: LD_OWVAR 2
29766: PPUSH
29767: LD_INT 9
29769: PPUSH
29770: LD_INT 1
29772: PPUSH
29773: LD_INT 1
29775: PPUSH
29776: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29780: LD_INT 9
29782: PPUSH
29783: LD_OWVAR 2
29787: PPUSH
29788: CALL_OW 343
// uc_side := 9 ;
29792: LD_ADDR_OWVAR 20
29796: PUSH
29797: LD_INT 9
29799: ST_TO_ADDR
// uc_nation := 2 ;
29800: LD_ADDR_OWVAR 21
29804: PUSH
29805: LD_INT 2
29807: ST_TO_ADDR
// hc_name := Dark Warrior ;
29808: LD_ADDR_OWVAR 26
29812: PUSH
29813: LD_STRING Dark Warrior
29815: ST_TO_ADDR
// hc_gallery :=  ;
29816: LD_ADDR_OWVAR 33
29820: PUSH
29821: LD_STRING 
29823: ST_TO_ADDR
// hc_noskilllimit := true ;
29824: LD_ADDR_OWVAR 76
29828: PUSH
29829: LD_INT 1
29831: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29832: LD_ADDR_OWVAR 31
29836: PUSH
29837: LD_INT 30
29839: PUSH
29840: LD_INT 30
29842: PUSH
29843: LD_INT 30
29845: PUSH
29846: LD_INT 30
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: ST_TO_ADDR
// un := CreateHuman ;
29855: LD_ADDR_VAR 0 3
29859: PUSH
29860: CALL_OW 44
29864: ST_TO_ADDR
// hc_noskilllimit := false ;
29865: LD_ADDR_OWVAR 76
29869: PUSH
29870: LD_INT 0
29872: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29873: LD_VAR 0 3
29877: PPUSH
29878: LD_INT 1
29880: PPUSH
29881: CALL_OW 51
// ToLua ( playRanger() ) ;
29885: LD_STRING playRanger()
29887: PPUSH
29888: CALL_OW 559
// p := 0 ;
29892: LD_ADDR_VAR 0 2
29896: PUSH
29897: LD_INT 0
29899: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29900: LD_INT 35
29902: PPUSH
29903: CALL_OW 67
// p := p + 1 ;
29907: LD_ADDR_VAR 0 2
29911: PUSH
29912: LD_VAR 0 2
29916: PUSH
29917: LD_INT 1
29919: PLUS
29920: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29921: LD_VAR 0 3
29925: PPUSH
29926: CALL_OW 256
29930: PUSH
29931: LD_INT 1000
29933: LESS
29934: IFFALSE 29948
// SetLives ( un , 1000 ) ;
29936: LD_VAR 0 3
29940: PPUSH
29941: LD_INT 1000
29943: PPUSH
29944: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29948: LD_VAR 0 3
29952: PPUSH
29953: LD_INT 81
29955: PUSH
29956: LD_OWVAR 2
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 91
29967: PUSH
29968: LD_VAR 0 3
29972: PUSH
29973: LD_INT 30
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: LIST
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PPUSH
29985: CALL_OW 69
29989: PPUSH
29990: LD_VAR 0 3
29994: PPUSH
29995: CALL_OW 74
29999: PPUSH
30000: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30004: LD_VAR 0 2
30008: PUSH
30009: LD_INT 80
30011: GREATER
30012: PUSH
30013: LD_VAR 0 3
30017: PPUSH
30018: CALL_OW 301
30022: OR
30023: IFFALSE 29900
// if un then
30025: LD_VAR 0 3
30029: IFFALSE 30040
// RemoveUnit ( un ) ;
30031: LD_VAR 0 3
30035: PPUSH
30036: CALL_OW 64
// end ;
30040: PPOPN 3
30042: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30043: LD_EXP 108
30047: IFFALSE 30163
30049: GO 30051
30051: DISABLE
30052: LD_INT 0
30054: PPUSH
30055: PPUSH
30056: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30057: LD_ADDR_VAR 0 2
30061: PUSH
30062: LD_INT 81
30064: PUSH
30065: LD_OWVAR 2
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 21
30076: PUSH
30077: LD_INT 1
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PPUSH
30088: CALL_OW 69
30092: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30093: LD_STRING playComputer()
30095: PPUSH
30096: CALL_OW 559
// if not tmp then
30100: LD_VAR 0 2
30104: NOT
30105: IFFALSE 30109
// exit ;
30107: GO 30163
// for i in tmp do
30109: LD_ADDR_VAR 0 1
30113: PUSH
30114: LD_VAR 0 2
30118: PUSH
30119: FOR_IN
30120: IFFALSE 30161
// for j := 1 to 4 do
30122: LD_ADDR_VAR 0 3
30126: PUSH
30127: DOUBLE
30128: LD_INT 1
30130: DEC
30131: ST_TO_ADDR
30132: LD_INT 4
30134: PUSH
30135: FOR_TO
30136: IFFALSE 30157
// SetSkill ( i , j , 10 ) ;
30138: LD_VAR 0 1
30142: PPUSH
30143: LD_VAR 0 3
30147: PPUSH
30148: LD_INT 10
30150: PPUSH
30151: CALL_OW 237
30155: GO 30135
30157: POP
30158: POP
30159: GO 30119
30161: POP
30162: POP
// end ;
30163: PPOPN 3
30165: END
// every 0 0$1 trigger s30 do var i , tmp ;
30166: LD_EXP 109
30170: IFFALSE 30239
30172: GO 30174
30174: DISABLE
30175: LD_INT 0
30177: PPUSH
30178: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30179: LD_ADDR_VAR 0 2
30183: PUSH
30184: LD_INT 22
30186: PUSH
30187: LD_OWVAR 2
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PPUSH
30196: CALL_OW 69
30200: ST_TO_ADDR
// if not tmp then
30201: LD_VAR 0 2
30205: NOT
30206: IFFALSE 30210
// exit ;
30208: GO 30239
// for i in tmp do
30210: LD_ADDR_VAR 0 1
30214: PUSH
30215: LD_VAR 0 2
30219: PUSH
30220: FOR_IN
30221: IFFALSE 30237
// SetLives ( i , 300 ) ;
30223: LD_VAR 0 1
30227: PPUSH
30228: LD_INT 300
30230: PPUSH
30231: CALL_OW 234
30235: GO 30220
30237: POP
30238: POP
// end ;
30239: PPOPN 2
30241: END
// every 0 0$1 trigger s60 do var i , tmp ;
30242: LD_EXP 110
30246: IFFALSE 30315
30248: GO 30250
30250: DISABLE
30251: LD_INT 0
30253: PPUSH
30254: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30255: LD_ADDR_VAR 0 2
30259: PUSH
30260: LD_INT 22
30262: PUSH
30263: LD_OWVAR 2
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PPUSH
30272: CALL_OW 69
30276: ST_TO_ADDR
// if not tmp then
30277: LD_VAR 0 2
30281: NOT
30282: IFFALSE 30286
// exit ;
30284: GO 30315
// for i in tmp do
30286: LD_ADDR_VAR 0 1
30290: PUSH
30291: LD_VAR 0 2
30295: PUSH
30296: FOR_IN
30297: IFFALSE 30313
// SetLives ( i , 600 ) ;
30299: LD_VAR 0 1
30303: PPUSH
30304: LD_INT 600
30306: PPUSH
30307: CALL_OW 234
30311: GO 30296
30313: POP
30314: POP
// end ;
30315: PPOPN 2
30317: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30318: LD_INT 0
30320: PPUSH
// case cmd of 301 :
30321: LD_VAR 0 1
30325: PUSH
30326: LD_INT 301
30328: DOUBLE
30329: EQUAL
30330: IFTRUE 30334
30332: GO 30366
30334: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30335: LD_VAR 0 6
30339: PPUSH
30340: LD_VAR 0 7
30344: PPUSH
30345: LD_VAR 0 8
30349: PPUSH
30350: LD_VAR 0 4
30354: PPUSH
30355: LD_VAR 0 5
30359: PPUSH
30360: CALL 31575 0 5
30364: GO 30487
30366: LD_INT 302
30368: DOUBLE
30369: EQUAL
30370: IFTRUE 30374
30372: GO 30411
30374: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30375: LD_VAR 0 6
30379: PPUSH
30380: LD_VAR 0 7
30384: PPUSH
30385: LD_VAR 0 8
30389: PPUSH
30390: LD_VAR 0 9
30394: PPUSH
30395: LD_VAR 0 4
30399: PPUSH
30400: LD_VAR 0 5
30404: PPUSH
30405: CALL 31666 0 6
30409: GO 30487
30411: LD_INT 303
30413: DOUBLE
30414: EQUAL
30415: IFTRUE 30419
30417: GO 30456
30419: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30420: LD_VAR 0 6
30424: PPUSH
30425: LD_VAR 0 7
30429: PPUSH
30430: LD_VAR 0 8
30434: PPUSH
30435: LD_VAR 0 9
30439: PPUSH
30440: LD_VAR 0 4
30444: PPUSH
30445: LD_VAR 0 5
30449: PPUSH
30450: CALL 30492 0 6
30454: GO 30487
30456: LD_INT 304
30458: DOUBLE
30459: EQUAL
30460: IFTRUE 30464
30462: GO 30486
30464: POP
// hHackTeleport ( unit , x , y ) ; end ;
30465: LD_VAR 0 2
30469: PPUSH
30470: LD_VAR 0 4
30474: PPUSH
30475: LD_VAR 0 5
30479: PPUSH
30480: CALL 32259 0 3
30484: GO 30487
30486: POP
// end ;
30487: LD_VAR 0 12
30491: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30492: LD_INT 0
30494: PPUSH
30495: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30496: LD_VAR 0 1
30500: PUSH
30501: LD_INT 1
30503: LESS
30504: PUSH
30505: LD_VAR 0 1
30509: PUSH
30510: LD_INT 3
30512: GREATER
30513: OR
30514: PUSH
30515: LD_VAR 0 5
30519: PPUSH
30520: LD_VAR 0 6
30524: PPUSH
30525: CALL_OW 428
30529: OR
30530: IFFALSE 30534
// exit ;
30532: GO 31262
// uc_side := your_side ;
30534: LD_ADDR_OWVAR 20
30538: PUSH
30539: LD_OWVAR 2
30543: ST_TO_ADDR
// uc_nation := nation ;
30544: LD_ADDR_OWVAR 21
30548: PUSH
30549: LD_VAR 0 1
30553: ST_TO_ADDR
// bc_level = 1 ;
30554: LD_ADDR_OWVAR 43
30558: PUSH
30559: LD_INT 1
30561: ST_TO_ADDR
// case btype of 1 :
30562: LD_VAR 0 2
30566: PUSH
30567: LD_INT 1
30569: DOUBLE
30570: EQUAL
30571: IFTRUE 30575
30573: GO 30586
30575: POP
// bc_type := b_depot ; 2 :
30576: LD_ADDR_OWVAR 42
30580: PUSH
30581: LD_INT 0
30583: ST_TO_ADDR
30584: GO 31206
30586: LD_INT 2
30588: DOUBLE
30589: EQUAL
30590: IFTRUE 30594
30592: GO 30605
30594: POP
// bc_type := b_warehouse ; 3 :
30595: LD_ADDR_OWVAR 42
30599: PUSH
30600: LD_INT 1
30602: ST_TO_ADDR
30603: GO 31206
30605: LD_INT 3
30607: DOUBLE
30608: EQUAL
30609: IFTRUE 30613
30611: GO 30624
30613: POP
// bc_type := b_lab ; 4 .. 9 :
30614: LD_ADDR_OWVAR 42
30618: PUSH
30619: LD_INT 6
30621: ST_TO_ADDR
30622: GO 31206
30624: LD_INT 4
30626: DOUBLE
30627: GREATEREQUAL
30628: IFFALSE 30636
30630: LD_INT 9
30632: DOUBLE
30633: LESSEQUAL
30634: IFTRUE 30638
30636: GO 30698
30638: POP
// begin bc_type := b_lab_half ;
30639: LD_ADDR_OWVAR 42
30643: PUSH
30644: LD_INT 7
30646: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30647: LD_ADDR_OWVAR 44
30651: PUSH
30652: LD_INT 10
30654: PUSH
30655: LD_INT 11
30657: PUSH
30658: LD_INT 12
30660: PUSH
30661: LD_INT 15
30663: PUSH
30664: LD_INT 14
30666: PUSH
30667: LD_INT 13
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: PUSH
30678: LD_VAR 0 2
30682: PUSH
30683: LD_INT 3
30685: MINUS
30686: ARRAY
30687: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
30688: LD_ADDR_OWVAR 45
30692: PUSH
30693: LD_INT 9
30695: ST_TO_ADDR
// end ; 10 .. 13 :
30696: GO 31206
30698: LD_INT 10
30700: DOUBLE
30701: GREATEREQUAL
30702: IFFALSE 30710
30704: LD_INT 13
30706: DOUBLE
30707: LESSEQUAL
30708: IFTRUE 30712
30710: GO 30789
30712: POP
// begin bc_type := b_lab_full ;
30713: LD_ADDR_OWVAR 42
30717: PUSH
30718: LD_INT 8
30720: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30721: LD_ADDR_OWVAR 44
30725: PUSH
30726: LD_INT 10
30728: PUSH
30729: LD_INT 12
30731: PUSH
30732: LD_INT 14
30734: PUSH
30735: LD_INT 13
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: PUSH
30744: LD_VAR 0 2
30748: PUSH
30749: LD_INT 9
30751: MINUS
30752: ARRAY
30753: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30754: LD_ADDR_OWVAR 45
30758: PUSH
30759: LD_INT 11
30761: PUSH
30762: LD_INT 15
30764: PUSH
30765: LD_INT 12
30767: PUSH
30768: LD_INT 15
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: PUSH
30777: LD_VAR 0 2
30781: PUSH
30782: LD_INT 9
30784: MINUS
30785: ARRAY
30786: ST_TO_ADDR
// end ; 14 :
30787: GO 31206
30789: LD_INT 14
30791: DOUBLE
30792: EQUAL
30793: IFTRUE 30797
30795: GO 30808
30797: POP
// bc_type := b_workshop ; 15 :
30798: LD_ADDR_OWVAR 42
30802: PUSH
30803: LD_INT 2
30805: ST_TO_ADDR
30806: GO 31206
30808: LD_INT 15
30810: DOUBLE
30811: EQUAL
30812: IFTRUE 30816
30814: GO 30827
30816: POP
// bc_type := b_factory ; 16 :
30817: LD_ADDR_OWVAR 42
30821: PUSH
30822: LD_INT 3
30824: ST_TO_ADDR
30825: GO 31206
30827: LD_INT 16
30829: DOUBLE
30830: EQUAL
30831: IFTRUE 30835
30833: GO 30846
30835: POP
// bc_type := b_ext_gun ; 17 :
30836: LD_ADDR_OWVAR 42
30840: PUSH
30841: LD_INT 17
30843: ST_TO_ADDR
30844: GO 31206
30846: LD_INT 17
30848: DOUBLE
30849: EQUAL
30850: IFTRUE 30854
30852: GO 30882
30854: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30855: LD_ADDR_OWVAR 42
30859: PUSH
30860: LD_INT 19
30862: PUSH
30863: LD_INT 23
30865: PUSH
30866: LD_INT 19
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: LIST
30873: PUSH
30874: LD_VAR 0 1
30878: ARRAY
30879: ST_TO_ADDR
30880: GO 31206
30882: LD_INT 18
30884: DOUBLE
30885: EQUAL
30886: IFTRUE 30890
30888: GO 30901
30890: POP
// bc_type := b_ext_radar ; 19 :
30891: LD_ADDR_OWVAR 42
30895: PUSH
30896: LD_INT 20
30898: ST_TO_ADDR
30899: GO 31206
30901: LD_INT 19
30903: DOUBLE
30904: EQUAL
30905: IFTRUE 30909
30907: GO 30920
30909: POP
// bc_type := b_ext_radio ; 20 :
30910: LD_ADDR_OWVAR 42
30914: PUSH
30915: LD_INT 22
30917: ST_TO_ADDR
30918: GO 31206
30920: LD_INT 20
30922: DOUBLE
30923: EQUAL
30924: IFTRUE 30928
30926: GO 30939
30928: POP
// bc_type := b_ext_siberium ; 21 :
30929: LD_ADDR_OWVAR 42
30933: PUSH
30934: LD_INT 21
30936: ST_TO_ADDR
30937: GO 31206
30939: LD_INT 21
30941: DOUBLE
30942: EQUAL
30943: IFTRUE 30947
30945: GO 30958
30947: POP
// bc_type := b_ext_computer ; 22 :
30948: LD_ADDR_OWVAR 42
30952: PUSH
30953: LD_INT 24
30955: ST_TO_ADDR
30956: GO 31206
30958: LD_INT 22
30960: DOUBLE
30961: EQUAL
30962: IFTRUE 30966
30964: GO 30977
30966: POP
// bc_type := b_ext_track ; 23 :
30967: LD_ADDR_OWVAR 42
30971: PUSH
30972: LD_INT 16
30974: ST_TO_ADDR
30975: GO 31206
30977: LD_INT 23
30979: DOUBLE
30980: EQUAL
30981: IFTRUE 30985
30983: GO 30996
30985: POP
// bc_type := b_ext_laser ; 24 :
30986: LD_ADDR_OWVAR 42
30990: PUSH
30991: LD_INT 25
30993: ST_TO_ADDR
30994: GO 31206
30996: LD_INT 24
30998: DOUBLE
30999: EQUAL
31000: IFTRUE 31004
31002: GO 31015
31004: POP
// bc_type := b_control_tower ; 25 :
31005: LD_ADDR_OWVAR 42
31009: PUSH
31010: LD_INT 36
31012: ST_TO_ADDR
31013: GO 31206
31015: LD_INT 25
31017: DOUBLE
31018: EQUAL
31019: IFTRUE 31023
31021: GO 31034
31023: POP
// bc_type := b_breastwork ; 26 :
31024: LD_ADDR_OWVAR 42
31028: PUSH
31029: LD_INT 31
31031: ST_TO_ADDR
31032: GO 31206
31034: LD_INT 26
31036: DOUBLE
31037: EQUAL
31038: IFTRUE 31042
31040: GO 31053
31042: POP
// bc_type := b_bunker ; 27 :
31043: LD_ADDR_OWVAR 42
31047: PUSH
31048: LD_INT 32
31050: ST_TO_ADDR
31051: GO 31206
31053: LD_INT 27
31055: DOUBLE
31056: EQUAL
31057: IFTRUE 31061
31059: GO 31072
31061: POP
// bc_type := b_turret ; 28 :
31062: LD_ADDR_OWVAR 42
31066: PUSH
31067: LD_INT 33
31069: ST_TO_ADDR
31070: GO 31206
31072: LD_INT 28
31074: DOUBLE
31075: EQUAL
31076: IFTRUE 31080
31078: GO 31091
31080: POP
// bc_type := b_armoury ; 29 :
31081: LD_ADDR_OWVAR 42
31085: PUSH
31086: LD_INT 4
31088: ST_TO_ADDR
31089: GO 31206
31091: LD_INT 29
31093: DOUBLE
31094: EQUAL
31095: IFTRUE 31099
31097: GO 31110
31099: POP
// bc_type := b_barracks ; 30 :
31100: LD_ADDR_OWVAR 42
31104: PUSH
31105: LD_INT 5
31107: ST_TO_ADDR
31108: GO 31206
31110: LD_INT 30
31112: DOUBLE
31113: EQUAL
31114: IFTRUE 31118
31116: GO 31129
31118: POP
// bc_type := b_solar_power ; 31 :
31119: LD_ADDR_OWVAR 42
31123: PUSH
31124: LD_INT 27
31126: ST_TO_ADDR
31127: GO 31206
31129: LD_INT 31
31131: DOUBLE
31132: EQUAL
31133: IFTRUE 31137
31135: GO 31148
31137: POP
// bc_type := b_oil_power ; 32 :
31138: LD_ADDR_OWVAR 42
31142: PUSH
31143: LD_INT 26
31145: ST_TO_ADDR
31146: GO 31206
31148: LD_INT 32
31150: DOUBLE
31151: EQUAL
31152: IFTRUE 31156
31154: GO 31167
31156: POP
// bc_type := b_siberite_power ; 33 :
31157: LD_ADDR_OWVAR 42
31161: PUSH
31162: LD_INT 28
31164: ST_TO_ADDR
31165: GO 31206
31167: LD_INT 33
31169: DOUBLE
31170: EQUAL
31171: IFTRUE 31175
31173: GO 31186
31175: POP
// bc_type := b_oil_mine ; 34 :
31176: LD_ADDR_OWVAR 42
31180: PUSH
31181: LD_INT 29
31183: ST_TO_ADDR
31184: GO 31206
31186: LD_INT 34
31188: DOUBLE
31189: EQUAL
31190: IFTRUE 31194
31192: GO 31205
31194: POP
// bc_type := b_siberite_mine ; end ;
31195: LD_ADDR_OWVAR 42
31199: PUSH
31200: LD_INT 30
31202: ST_TO_ADDR
31203: GO 31206
31205: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31206: LD_ADDR_VAR 0 8
31210: PUSH
31211: LD_VAR 0 5
31215: PPUSH
31216: LD_VAR 0 6
31220: PPUSH
31221: LD_VAR 0 3
31225: PPUSH
31226: CALL_OW 47
31230: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31231: LD_OWVAR 42
31235: PUSH
31236: LD_INT 32
31238: PUSH
31239: LD_INT 33
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: IN
31246: IFFALSE 31262
// PlaceWeaponTurret ( b , weapon ) ;
31248: LD_VAR 0 8
31252: PPUSH
31253: LD_VAR 0 4
31257: PPUSH
31258: CALL_OW 431
// end ;
31262: LD_VAR 0 7
31266: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31267: LD_INT 0
31269: PPUSH
31270: PPUSH
31271: PPUSH
31272: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31273: LD_ADDR_VAR 0 4
31277: PUSH
31278: LD_INT 22
31280: PUSH
31281: LD_OWVAR 2
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 2
31292: PUSH
31293: LD_INT 30
31295: PUSH
31296: LD_INT 0
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: LD_INT 30
31305: PUSH
31306: LD_INT 1
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: LIST
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PPUSH
31322: CALL_OW 69
31326: ST_TO_ADDR
// if not tmp then
31327: LD_VAR 0 4
31331: NOT
31332: IFFALSE 31336
// exit ;
31334: GO 31395
// for i in tmp do
31336: LD_ADDR_VAR 0 2
31340: PUSH
31341: LD_VAR 0 4
31345: PUSH
31346: FOR_IN
31347: IFFALSE 31393
// for j = 1 to 3 do
31349: LD_ADDR_VAR 0 3
31353: PUSH
31354: DOUBLE
31355: LD_INT 1
31357: DEC
31358: ST_TO_ADDR
31359: LD_INT 3
31361: PUSH
31362: FOR_TO
31363: IFFALSE 31389
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31365: LD_VAR 0 2
31369: PPUSH
31370: CALL_OW 274
31374: PPUSH
31375: LD_VAR 0 3
31379: PPUSH
31380: LD_INT 99999
31382: PPUSH
31383: CALL_OW 277
31387: GO 31362
31389: POP
31390: POP
31391: GO 31346
31393: POP
31394: POP
// end ;
31395: LD_VAR 0 1
31399: RET
// export function hHackSetLevel10 ; var i , j ; begin
31400: LD_INT 0
31402: PPUSH
31403: PPUSH
31404: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31405: LD_ADDR_VAR 0 2
31409: PUSH
31410: LD_INT 21
31412: PUSH
31413: LD_INT 1
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PPUSH
31420: CALL_OW 69
31424: PUSH
31425: FOR_IN
31426: IFFALSE 31478
// if IsSelected ( i ) then
31428: LD_VAR 0 2
31432: PPUSH
31433: CALL_OW 306
31437: IFFALSE 31476
// begin for j := 1 to 4 do
31439: LD_ADDR_VAR 0 3
31443: PUSH
31444: DOUBLE
31445: LD_INT 1
31447: DEC
31448: ST_TO_ADDR
31449: LD_INT 4
31451: PUSH
31452: FOR_TO
31453: IFFALSE 31474
// SetSkill ( i , j , 10 ) ;
31455: LD_VAR 0 2
31459: PPUSH
31460: LD_VAR 0 3
31464: PPUSH
31465: LD_INT 10
31467: PPUSH
31468: CALL_OW 237
31472: GO 31452
31474: POP
31475: POP
// end ;
31476: GO 31425
31478: POP
31479: POP
// end ;
31480: LD_VAR 0 1
31484: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31485: LD_INT 0
31487: PPUSH
31488: PPUSH
31489: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31490: LD_ADDR_VAR 0 2
31494: PUSH
31495: LD_INT 22
31497: PUSH
31498: LD_OWVAR 2
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 21
31509: PUSH
31510: LD_INT 1
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PPUSH
31521: CALL_OW 69
31525: PUSH
31526: FOR_IN
31527: IFFALSE 31568
// begin for j := 1 to 4 do
31529: LD_ADDR_VAR 0 3
31533: PUSH
31534: DOUBLE
31535: LD_INT 1
31537: DEC
31538: ST_TO_ADDR
31539: LD_INT 4
31541: PUSH
31542: FOR_TO
31543: IFFALSE 31564
// SetSkill ( i , j , 10 ) ;
31545: LD_VAR 0 2
31549: PPUSH
31550: LD_VAR 0 3
31554: PPUSH
31555: LD_INT 10
31557: PPUSH
31558: CALL_OW 237
31562: GO 31542
31564: POP
31565: POP
// end ;
31566: GO 31526
31568: POP
31569: POP
// end ;
31570: LD_VAR 0 1
31574: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31575: LD_INT 0
31577: PPUSH
// uc_side := your_side ;
31578: LD_ADDR_OWVAR 20
31582: PUSH
31583: LD_OWVAR 2
31587: ST_TO_ADDR
// uc_nation := nation ;
31588: LD_ADDR_OWVAR 21
31592: PUSH
31593: LD_VAR 0 1
31597: ST_TO_ADDR
// InitHc ;
31598: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31602: LD_INT 0
31604: PPUSH
31605: LD_VAR 0 2
31609: PPUSH
31610: LD_VAR 0 3
31614: PPUSH
31615: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31619: LD_VAR 0 4
31623: PPUSH
31624: LD_VAR 0 5
31628: PPUSH
31629: CALL_OW 428
31633: PUSH
31634: LD_INT 0
31636: EQUAL
31637: IFFALSE 31661
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31639: CALL_OW 44
31643: PPUSH
31644: LD_VAR 0 4
31648: PPUSH
31649: LD_VAR 0 5
31653: PPUSH
31654: LD_INT 1
31656: PPUSH
31657: CALL_OW 48
// end ;
31661: LD_VAR 0 6
31665: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31666: LD_INT 0
31668: PPUSH
31669: PPUSH
// uc_side := your_side ;
31670: LD_ADDR_OWVAR 20
31674: PUSH
31675: LD_OWVAR 2
31679: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31680: LD_VAR 0 1
31684: PUSH
31685: LD_INT 1
31687: PUSH
31688: LD_INT 2
31690: PUSH
31691: LD_INT 3
31693: PUSH
31694: LD_INT 4
31696: PUSH
31697: LD_INT 5
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: IN
31707: IFFALSE 31719
// uc_nation := nation_american else
31709: LD_ADDR_OWVAR 21
31713: PUSH
31714: LD_INT 1
31716: ST_TO_ADDR
31717: GO 31762
// if chassis in [ 11 , 12 , 13 , 14 ] then
31719: LD_VAR 0 1
31723: PUSH
31724: LD_INT 11
31726: PUSH
31727: LD_INT 12
31729: PUSH
31730: LD_INT 13
31732: PUSH
31733: LD_INT 14
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: IN
31742: IFFALSE 31754
// uc_nation := nation_arabian else
31744: LD_ADDR_OWVAR 21
31748: PUSH
31749: LD_INT 2
31751: ST_TO_ADDR
31752: GO 31762
// uc_nation := nation_russian ;
31754: LD_ADDR_OWVAR 21
31758: PUSH
31759: LD_INT 3
31761: ST_TO_ADDR
// vc_chassis := chassis ;
31762: LD_ADDR_OWVAR 37
31766: PUSH
31767: LD_VAR 0 1
31771: ST_TO_ADDR
// vc_engine := engine ;
31772: LD_ADDR_OWVAR 39
31776: PUSH
31777: LD_VAR 0 2
31781: ST_TO_ADDR
// vc_control := control ;
31782: LD_ADDR_OWVAR 38
31786: PUSH
31787: LD_VAR 0 3
31791: ST_TO_ADDR
// vc_weapon := weapon ;
31792: LD_ADDR_OWVAR 40
31796: PUSH
31797: LD_VAR 0 4
31801: ST_TO_ADDR
// un := CreateVehicle ;
31802: LD_ADDR_VAR 0 8
31806: PUSH
31807: CALL_OW 45
31811: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31812: LD_VAR 0 8
31816: PPUSH
31817: LD_INT 0
31819: PPUSH
31820: LD_INT 5
31822: PPUSH
31823: CALL_OW 12
31827: PPUSH
31828: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31832: LD_VAR 0 8
31836: PPUSH
31837: LD_VAR 0 5
31841: PPUSH
31842: LD_VAR 0 6
31846: PPUSH
31847: LD_INT 1
31849: PPUSH
31850: CALL_OW 48
// end ;
31854: LD_VAR 0 7
31858: RET
// export hInvincible ; every 1 do
31859: GO 31861
31861: DISABLE
// hInvincible := [ ] ;
31862: LD_ADDR_EXP 111
31866: PUSH
31867: EMPTY
31868: ST_TO_ADDR
31869: END
// every 10 do var i ;
31870: GO 31872
31872: DISABLE
31873: LD_INT 0
31875: PPUSH
// begin enable ;
31876: ENABLE
// if not hInvincible then
31877: LD_EXP 111
31881: NOT
31882: IFFALSE 31886
// exit ;
31884: GO 31930
// for i in hInvincible do
31886: LD_ADDR_VAR 0 1
31890: PUSH
31891: LD_EXP 111
31895: PUSH
31896: FOR_IN
31897: IFFALSE 31928
// if GetLives ( i ) < 1000 then
31899: LD_VAR 0 1
31903: PPUSH
31904: CALL_OW 256
31908: PUSH
31909: LD_INT 1000
31911: LESS
31912: IFFALSE 31926
// SetLives ( i , 1000 ) ;
31914: LD_VAR 0 1
31918: PPUSH
31919: LD_INT 1000
31921: PPUSH
31922: CALL_OW 234
31926: GO 31896
31928: POP
31929: POP
// end ;
31930: PPOPN 1
31932: END
// export function hHackInvincible ; var i ; begin
31933: LD_INT 0
31935: PPUSH
31936: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31937: LD_ADDR_VAR 0 2
31941: PUSH
31942: LD_INT 2
31944: PUSH
31945: LD_INT 21
31947: PUSH
31948: LD_INT 1
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: LD_INT 21
31957: PUSH
31958: LD_INT 2
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: LIST
31969: PPUSH
31970: CALL_OW 69
31974: PUSH
31975: FOR_IN
31976: IFFALSE 32037
// if IsSelected ( i ) then
31978: LD_VAR 0 2
31982: PPUSH
31983: CALL_OW 306
31987: IFFALSE 32035
// begin if i in hInvincible then
31989: LD_VAR 0 2
31993: PUSH
31994: LD_EXP 111
31998: IN
31999: IFFALSE 32019
// hInvincible := hInvincible diff i else
32001: LD_ADDR_EXP 111
32005: PUSH
32006: LD_EXP 111
32010: PUSH
32011: LD_VAR 0 2
32015: DIFF
32016: ST_TO_ADDR
32017: GO 32035
// hInvincible := hInvincible union i ;
32019: LD_ADDR_EXP 111
32023: PUSH
32024: LD_EXP 111
32028: PUSH
32029: LD_VAR 0 2
32033: UNION
32034: ST_TO_ADDR
// end ;
32035: GO 31975
32037: POP
32038: POP
// end ;
32039: LD_VAR 0 1
32043: RET
// export function hHackInvisible ; var i , j ; begin
32044: LD_INT 0
32046: PPUSH
32047: PPUSH
32048: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32049: LD_ADDR_VAR 0 2
32053: PUSH
32054: LD_INT 21
32056: PUSH
32057: LD_INT 1
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PPUSH
32064: CALL_OW 69
32068: PUSH
32069: FOR_IN
32070: IFFALSE 32094
// if IsSelected ( i ) then
32072: LD_VAR 0 2
32076: PPUSH
32077: CALL_OW 306
32081: IFFALSE 32092
// ComForceInvisible ( i ) ;
32083: LD_VAR 0 2
32087: PPUSH
32088: CALL_OW 496
32092: GO 32069
32094: POP
32095: POP
// end ;
32096: LD_VAR 0 1
32100: RET
// export function hHackChangeYourSide ; begin
32101: LD_INT 0
32103: PPUSH
// if your_side = 8 then
32104: LD_OWVAR 2
32108: PUSH
32109: LD_INT 8
32111: EQUAL
32112: IFFALSE 32124
// your_side := 0 else
32114: LD_ADDR_OWVAR 2
32118: PUSH
32119: LD_INT 0
32121: ST_TO_ADDR
32122: GO 32138
// your_side := your_side + 1 ;
32124: LD_ADDR_OWVAR 2
32128: PUSH
32129: LD_OWVAR 2
32133: PUSH
32134: LD_INT 1
32136: PLUS
32137: ST_TO_ADDR
// end ;
32138: LD_VAR 0 1
32142: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32143: LD_INT 0
32145: PPUSH
32146: PPUSH
32147: PPUSH
// for i in all_units do
32148: LD_ADDR_VAR 0 2
32152: PUSH
32153: LD_OWVAR 3
32157: PUSH
32158: FOR_IN
32159: IFFALSE 32237
// if IsSelected ( i ) then
32161: LD_VAR 0 2
32165: PPUSH
32166: CALL_OW 306
32170: IFFALSE 32235
// begin j := GetSide ( i ) ;
32172: LD_ADDR_VAR 0 3
32176: PUSH
32177: LD_VAR 0 2
32181: PPUSH
32182: CALL_OW 255
32186: ST_TO_ADDR
// if j = 8 then
32187: LD_VAR 0 3
32191: PUSH
32192: LD_INT 8
32194: EQUAL
32195: IFFALSE 32207
// j := 0 else
32197: LD_ADDR_VAR 0 3
32201: PUSH
32202: LD_INT 0
32204: ST_TO_ADDR
32205: GO 32221
// j := j + 1 ;
32207: LD_ADDR_VAR 0 3
32211: PUSH
32212: LD_VAR 0 3
32216: PUSH
32217: LD_INT 1
32219: PLUS
32220: ST_TO_ADDR
// SetSide ( i , j ) ;
32221: LD_VAR 0 2
32225: PPUSH
32226: LD_VAR 0 3
32230: PPUSH
32231: CALL_OW 235
// end ;
32235: GO 32158
32237: POP
32238: POP
// end ;
32239: LD_VAR 0 1
32243: RET
// export function hHackFog ; begin
32244: LD_INT 0
32246: PPUSH
// FogOff ( true ) ;
32247: LD_INT 1
32249: PPUSH
32250: CALL_OW 344
// end ;
32254: LD_VAR 0 1
32258: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32259: LD_INT 0
32261: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32262: LD_VAR 0 1
32266: PPUSH
32267: LD_VAR 0 2
32271: PPUSH
32272: LD_VAR 0 3
32276: PPUSH
32277: LD_INT 1
32279: PPUSH
32280: LD_INT 1
32282: PPUSH
32283: CALL_OW 483
// CenterOnXY ( x , y ) ;
32287: LD_VAR 0 2
32291: PPUSH
32292: LD_VAR 0 3
32296: PPUSH
32297: CALL_OW 84
// end ;
32301: LD_VAR 0 4
32305: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
32306: LD_INT 0
32308: PPUSH
32309: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
32310: LD_VAR 0 1
32314: NOT
32315: PUSH
32316: LD_VAR 0 2
32320: PPUSH
32321: LD_VAR 0 3
32325: PPUSH
32326: CALL_OW 488
32330: NOT
32331: OR
32332: PUSH
32333: LD_VAR 0 1
32337: PPUSH
32338: CALL_OW 266
32342: PUSH
32343: LD_INT 3
32345: NONEQUAL
32346: PUSH
32347: LD_VAR 0 1
32351: PPUSH
32352: CALL_OW 247
32356: PUSH
32357: LD_INT 1
32359: EQUAL
32360: NOT
32361: AND
32362: OR
32363: IFFALSE 32367
// exit ;
32365: GO 32649
// if GetType ( factory ) = unit_human then
32367: LD_VAR 0 1
32371: PPUSH
32372: CALL_OW 247
32376: PUSH
32377: LD_INT 1
32379: EQUAL
32380: IFFALSE 32397
// factory := IsInUnit ( factory ) ;
32382: LD_ADDR_VAR 0 1
32386: PUSH
32387: LD_VAR 0 1
32391: PPUSH
32392: CALL_OW 310
32396: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
32397: LD_VAR 0 1
32401: PPUSH
32402: CALL_OW 266
32406: PUSH
32407: LD_INT 3
32409: NONEQUAL
32410: IFFALSE 32414
// exit ;
32412: GO 32649
// for i := 1 to Count ( factoryWaypoints ) do
32414: LD_ADDR_VAR 0 5
32418: PUSH
32419: DOUBLE
32420: LD_INT 1
32422: DEC
32423: ST_TO_ADDR
32424: LD_EXP 112
32428: PPUSH
32429: CALL 41315 0 1
32433: PUSH
32434: FOR_TO
32435: IFFALSE 32597
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
32437: LD_VAR 0 2
32441: PPUSH
32442: LD_VAR 0 3
32446: PPUSH
32447: CALL_OW 428
32451: PUSH
32452: LD_EXP 112
32456: PUSH
32457: LD_VAR 0 5
32461: ARRAY
32462: PUSH
32463: LD_INT 2
32465: ARRAY
32466: EQUAL
32467: IFFALSE 32499
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
32469: LD_ADDR_EXP 112
32473: PUSH
32474: LD_EXP 112
32478: PPUSH
32479: LD_VAR 0 5
32483: PPUSH
32484: CALL_OW 3
32488: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32489: CALL 32654 0 0
// exit ;
32493: POP
32494: POP
32495: GO 32649
// end else
32497: GO 32595
// if factory = factoryWaypoints [ i ] [ 2 ] then
32499: LD_VAR 0 1
32503: PUSH
32504: LD_EXP 112
32508: PUSH
32509: LD_VAR 0 5
32513: ARRAY
32514: PUSH
32515: LD_INT 2
32517: ARRAY
32518: EQUAL
32519: IFFALSE 32595
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
32521: LD_ADDR_EXP 112
32525: PUSH
32526: LD_EXP 112
32530: PPUSH
32531: LD_VAR 0 5
32535: PPUSH
32536: CALL_OW 3
32540: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
32541: LD_ADDR_EXP 112
32545: PUSH
32546: LD_EXP 112
32550: PPUSH
32551: LD_VAR 0 1
32555: PPUSH
32556: CALL_OW 255
32560: PUSH
32561: LD_VAR 0 1
32565: PUSH
32566: LD_VAR 0 2
32570: PUSH
32571: LD_VAR 0 3
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: PPUSH
32582: CALL 76924 0 2
32586: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32587: CALL 32654 0 0
// exit ;
32591: POP
32592: POP
32593: GO 32649
// end ; end ;
32595: GO 32434
32597: POP
32598: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
32599: LD_ADDR_EXP 112
32603: PUSH
32604: LD_EXP 112
32608: PPUSH
32609: LD_VAR 0 1
32613: PPUSH
32614: CALL_OW 255
32618: PUSH
32619: LD_VAR 0 1
32623: PUSH
32624: LD_VAR 0 2
32628: PUSH
32629: LD_VAR 0 3
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: PPUSH
32640: CALL 76924 0 2
32644: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32645: CALL 32654 0 0
// end ;
32649: LD_VAR 0 4
32653: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
32654: LD_INT 0
32656: PPUSH
32657: PPUSH
32658: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
32659: LD_STRING resetFactoryWaypoint();
32661: PPUSH
32662: CALL_OW 559
// if factoryWaypoints then
32666: LD_EXP 112
32670: IFFALSE 32791
// begin list := factoryWaypoints ;
32672: LD_ADDR_VAR 0 3
32676: PUSH
32677: LD_EXP 112
32681: ST_TO_ADDR
// for i := 1 to list do
32682: LD_ADDR_VAR 0 2
32686: PUSH
32687: DOUBLE
32688: LD_INT 1
32690: DEC
32691: ST_TO_ADDR
32692: LD_VAR 0 3
32696: PUSH
32697: FOR_TO
32698: IFFALSE 32789
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32700: LD_STRING setFactoryWaypointXY(
32702: PUSH
32703: LD_VAR 0 3
32707: PUSH
32708: LD_VAR 0 2
32712: ARRAY
32713: PUSH
32714: LD_INT 1
32716: ARRAY
32717: STR
32718: PUSH
32719: LD_STRING ,
32721: STR
32722: PUSH
32723: LD_VAR 0 3
32727: PUSH
32728: LD_VAR 0 2
32732: ARRAY
32733: PUSH
32734: LD_INT 2
32736: ARRAY
32737: STR
32738: PUSH
32739: LD_STRING ,
32741: STR
32742: PUSH
32743: LD_VAR 0 3
32747: PUSH
32748: LD_VAR 0 2
32752: ARRAY
32753: PUSH
32754: LD_INT 3
32756: ARRAY
32757: STR
32758: PUSH
32759: LD_STRING ,
32761: STR
32762: PUSH
32763: LD_VAR 0 3
32767: PUSH
32768: LD_VAR 0 2
32772: ARRAY
32773: PUSH
32774: LD_INT 4
32776: ARRAY
32777: STR
32778: PUSH
32779: LD_STRING )
32781: STR
32782: PPUSH
32783: CALL_OW 559
32787: GO 32697
32789: POP
32790: POP
// end ; end ;
32791: LD_VAR 0 1
32795: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
32796: LD_INT 0
32798: PPUSH
// if HexInfo ( x , y ) = warehouse then
32799: LD_VAR 0 2
32803: PPUSH
32804: LD_VAR 0 3
32808: PPUSH
32809: CALL_OW 428
32813: PUSH
32814: LD_VAR 0 1
32818: EQUAL
32819: IFFALSE 32846
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
32821: LD_ADDR_EXP 113
32825: PUSH
32826: LD_EXP 113
32830: PPUSH
32831: LD_VAR 0 1
32835: PPUSH
32836: LD_INT 0
32838: PPUSH
32839: CALL_OW 1
32843: ST_TO_ADDR
32844: GO 32897
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
32846: LD_ADDR_EXP 113
32850: PUSH
32851: LD_EXP 113
32855: PPUSH
32856: LD_VAR 0 1
32860: PPUSH
32861: LD_VAR 0 1
32865: PPUSH
32866: CALL_OW 255
32870: PUSH
32871: LD_VAR 0 1
32875: PUSH
32876: LD_VAR 0 2
32880: PUSH
32881: LD_VAR 0 3
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: PPUSH
32892: CALL_OW 1
32896: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
32897: CALL 32906 0 0
// end ;
32901: LD_VAR 0 4
32905: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
32906: LD_INT 0
32908: PPUSH
32909: PPUSH
32910: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
32911: LD_STRING resetWarehouseGatheringPoints();
32913: PPUSH
32914: CALL_OW 559
// if warehouseGatheringPoints then
32918: LD_EXP 113
32922: IFFALSE 33048
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
32924: LD_ADDR_VAR 0 3
32928: PUSH
32929: LD_EXP 113
32933: PPUSH
32934: CALL 80686 0 1
32938: ST_TO_ADDR
// for i := 1 to list do
32939: LD_ADDR_VAR 0 2
32943: PUSH
32944: DOUBLE
32945: LD_INT 1
32947: DEC
32948: ST_TO_ADDR
32949: LD_VAR 0 3
32953: PUSH
32954: FOR_TO
32955: IFFALSE 33046
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32957: LD_STRING setWarehouseGatheringPointXY(
32959: PUSH
32960: LD_VAR 0 3
32964: PUSH
32965: LD_VAR 0 2
32969: ARRAY
32970: PUSH
32971: LD_INT 1
32973: ARRAY
32974: STR
32975: PUSH
32976: LD_STRING ,
32978: STR
32979: PUSH
32980: LD_VAR 0 3
32984: PUSH
32985: LD_VAR 0 2
32989: ARRAY
32990: PUSH
32991: LD_INT 2
32993: ARRAY
32994: STR
32995: PUSH
32996: LD_STRING ,
32998: STR
32999: PUSH
33000: LD_VAR 0 3
33004: PUSH
33005: LD_VAR 0 2
33009: ARRAY
33010: PUSH
33011: LD_INT 3
33013: ARRAY
33014: STR
33015: PUSH
33016: LD_STRING ,
33018: STR
33019: PUSH
33020: LD_VAR 0 3
33024: PUSH
33025: LD_VAR 0 2
33029: ARRAY
33030: PUSH
33031: LD_INT 4
33033: ARRAY
33034: STR
33035: PUSH
33036: LD_STRING )
33038: STR
33039: PPUSH
33040: CALL_OW 559
33044: GO 32954
33046: POP
33047: POP
// end ; end ;
33048: LD_VAR 0 1
33052: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
33053: LD_EXP 113
33057: IFFALSE 33742
33059: GO 33061
33061: DISABLE
33062: LD_INT 0
33064: PPUSH
33065: PPUSH
33066: PPUSH
33067: PPUSH
33068: PPUSH
33069: PPUSH
33070: PPUSH
33071: PPUSH
33072: PPUSH
// begin enable ;
33073: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
33074: LD_ADDR_VAR 0 3
33078: PUSH
33079: LD_EXP 113
33083: PPUSH
33084: CALL 80686 0 1
33088: ST_TO_ADDR
// if not list then
33089: LD_VAR 0 3
33093: NOT
33094: IFFALSE 33098
// exit ;
33096: GO 33742
// for i := 1 to list do
33098: LD_ADDR_VAR 0 1
33102: PUSH
33103: DOUBLE
33104: LD_INT 1
33106: DEC
33107: ST_TO_ADDR
33108: LD_VAR 0 3
33112: PUSH
33113: FOR_TO
33114: IFFALSE 33740
// begin depot := list [ i ] [ 2 ] ;
33116: LD_ADDR_VAR 0 8
33120: PUSH
33121: LD_VAR 0 3
33125: PUSH
33126: LD_VAR 0 1
33130: ARRAY
33131: PUSH
33132: LD_INT 2
33134: ARRAY
33135: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33136: LD_ADDR_VAR 0 5
33140: PUSH
33141: LD_VAR 0 3
33145: PUSH
33146: LD_VAR 0 1
33150: ARRAY
33151: PUSH
33152: LD_INT 1
33154: ARRAY
33155: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33156: LD_VAR 0 8
33160: PPUSH
33161: CALL_OW 301
33165: PUSH
33166: LD_VAR 0 5
33170: PUSH
33171: LD_VAR 0 8
33175: PPUSH
33176: CALL_OW 255
33180: NONEQUAL
33181: OR
33182: IFFALSE 33211
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
33184: LD_ADDR_EXP 113
33188: PUSH
33189: LD_EXP 113
33193: PPUSH
33194: LD_VAR 0 8
33198: PPUSH
33199: LD_INT 0
33201: PPUSH
33202: CALL_OW 1
33206: ST_TO_ADDR
// exit ;
33207: POP
33208: POP
33209: GO 33742
// end ; x := list [ i ] [ 3 ] ;
33211: LD_ADDR_VAR 0 6
33215: PUSH
33216: LD_VAR 0 3
33220: PUSH
33221: LD_VAR 0 1
33225: ARRAY
33226: PUSH
33227: LD_INT 3
33229: ARRAY
33230: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
33231: LD_ADDR_VAR 0 7
33235: PUSH
33236: LD_VAR 0 3
33240: PUSH
33241: LD_VAR 0 1
33245: ARRAY
33246: PUSH
33247: LD_INT 4
33249: ARRAY
33250: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
33251: LD_ADDR_VAR 0 9
33255: PUSH
33256: LD_VAR 0 6
33260: PPUSH
33261: LD_VAR 0 7
33265: PPUSH
33266: LD_INT 16
33268: PPUSH
33269: CALL 79270 0 3
33273: ST_TO_ADDR
// if not cratesNearbyPoint then
33274: LD_VAR 0 9
33278: NOT
33279: IFFALSE 33285
// exit ;
33281: POP
33282: POP
33283: GO 33742
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
33285: LD_ADDR_VAR 0 4
33289: PUSH
33290: LD_INT 22
33292: PUSH
33293: LD_VAR 0 5
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 3
33304: PUSH
33305: LD_INT 60
33307: PUSH
33308: EMPTY
33309: LIST
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 91
33317: PUSH
33318: LD_VAR 0 8
33322: PUSH
33323: LD_INT 6
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 2
33333: PUSH
33334: LD_INT 25
33336: PUSH
33337: LD_INT 2
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 25
33346: PUSH
33347: LD_INT 16
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: LIST
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: PPUSH
33365: CALL_OW 69
33369: PUSH
33370: LD_VAR 0 8
33374: PPUSH
33375: CALL_OW 313
33379: PPUSH
33380: LD_INT 3
33382: PUSH
33383: LD_INT 60
33385: PUSH
33386: EMPTY
33387: LIST
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 2
33395: PUSH
33396: LD_INT 25
33398: PUSH
33399: LD_INT 2
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 25
33408: PUSH
33409: LD_INT 16
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: LIST
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PPUSH
33425: CALL_OW 72
33429: UNION
33430: ST_TO_ADDR
// if tmp then
33431: LD_VAR 0 4
33435: IFFALSE 33515
// begin tmp := ShrinkArray ( tmp , 3 ) ;
33437: LD_ADDR_VAR 0 4
33441: PUSH
33442: LD_VAR 0 4
33446: PPUSH
33447: LD_INT 3
33449: PPUSH
33450: CALL 77239 0 2
33454: ST_TO_ADDR
// for j in tmp do
33455: LD_ADDR_VAR 0 2
33459: PUSH
33460: LD_VAR 0 4
33464: PUSH
33465: FOR_IN
33466: IFFALSE 33509
// begin if IsInUnit ( j ) then
33468: LD_VAR 0 2
33472: PPUSH
33473: CALL_OW 310
33477: IFFALSE 33488
// ComExit ( j ) ;
33479: LD_VAR 0 2
33483: PPUSH
33484: CALL 77322 0 1
// AddComCollect ( j , x , y ) ;
33488: LD_VAR 0 2
33492: PPUSH
33493: LD_VAR 0 6
33497: PPUSH
33498: LD_VAR 0 7
33502: PPUSH
33503: CALL_OW 177
// end ;
33507: GO 33465
33509: POP
33510: POP
// exit ;
33511: POP
33512: POP
33513: GO 33742
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
33515: LD_ADDR_VAR 0 4
33519: PUSH
33520: LD_INT 22
33522: PUSH
33523: LD_VAR 0 5
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 91
33534: PUSH
33535: LD_VAR 0 8
33539: PUSH
33540: LD_INT 8
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 2
33550: PUSH
33551: LD_INT 34
33553: PUSH
33554: LD_INT 12
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PUSH
33561: LD_INT 34
33563: PUSH
33564: LD_INT 51
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 34
33573: PUSH
33574: LD_INT 32
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 34
33583: PUSH
33584: LD_INT 89
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: LIST
33602: PPUSH
33603: CALL_OW 69
33607: ST_TO_ADDR
// if tmp then
33608: LD_VAR 0 4
33612: IFFALSE 33738
// begin for j in tmp do
33614: LD_ADDR_VAR 0 2
33618: PUSH
33619: LD_VAR 0 4
33623: PUSH
33624: FOR_IN
33625: IFFALSE 33736
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
33627: LD_VAR 0 2
33631: PPUSH
33632: CALL_OW 262
33636: PUSH
33637: LD_INT 3
33639: EQUAL
33640: PUSH
33641: LD_VAR 0 2
33645: PPUSH
33646: CALL_OW 261
33650: PUSH
33651: LD_INT 20
33653: GREATER
33654: OR
33655: PUSH
33656: LD_VAR 0 2
33660: PPUSH
33661: CALL_OW 314
33665: NOT
33666: AND
33667: PUSH
33668: LD_VAR 0 2
33672: PPUSH
33673: CALL_OW 263
33677: PUSH
33678: LD_INT 1
33680: NONEQUAL
33681: PUSH
33682: LD_VAR 0 2
33686: PPUSH
33687: CALL_OW 311
33691: OR
33692: AND
33693: IFFALSE 33734
// begin ComCollect ( j , x , y ) ;
33695: LD_VAR 0 2
33699: PPUSH
33700: LD_VAR 0 6
33704: PPUSH
33705: LD_VAR 0 7
33709: PPUSH
33710: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
33714: LD_VAR 0 2
33718: PPUSH
33719: LD_VAR 0 8
33723: PPUSH
33724: CALL_OW 172
// exit ;
33728: POP
33729: POP
33730: POP
33731: POP
33732: GO 33742
// end ;
33734: GO 33624
33736: POP
33737: POP
// end ; end ;
33738: GO 33113
33740: POP
33741: POP
// end ; end_of_file
33742: PPOPN 9
33744: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
33745: LD_VAR 0 1
33749: PUSH
33750: LD_INT 200
33752: DOUBLE
33753: GREATEREQUAL
33754: IFFALSE 33762
33756: LD_INT 299
33758: DOUBLE
33759: LESSEQUAL
33760: IFTRUE 33764
33762: GO 33796
33764: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
33765: LD_VAR 0 1
33769: PPUSH
33770: LD_VAR 0 2
33774: PPUSH
33775: LD_VAR 0 3
33779: PPUSH
33780: LD_VAR 0 4
33784: PPUSH
33785: LD_VAR 0 5
33789: PPUSH
33790: CALL 34493 0 5
33794: GO 33873
33796: LD_INT 300
33798: DOUBLE
33799: GREATEREQUAL
33800: IFFALSE 33808
33802: LD_INT 399
33804: DOUBLE
33805: LESSEQUAL
33806: IFTRUE 33810
33808: GO 33872
33810: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
33811: LD_VAR 0 1
33815: PPUSH
33816: LD_VAR 0 2
33820: PPUSH
33821: LD_VAR 0 3
33825: PPUSH
33826: LD_VAR 0 4
33830: PPUSH
33831: LD_VAR 0 5
33835: PPUSH
33836: LD_VAR 0 6
33840: PPUSH
33841: LD_VAR 0 7
33845: PPUSH
33846: LD_VAR 0 8
33850: PPUSH
33851: LD_VAR 0 9
33855: PPUSH
33856: LD_VAR 0 10
33860: PPUSH
33861: LD_VAR 0 11
33865: PPUSH
33866: CALL 30318 0 11
33870: GO 33873
33872: POP
// end ;
33873: PPOPN 11
33875: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
33876: LD_VAR 0 1
33880: PPUSH
33881: LD_VAR 0 2
33885: PPUSH
33886: LD_VAR 0 3
33890: PPUSH
33891: LD_VAR 0 4
33895: PPUSH
33896: LD_VAR 0 5
33900: PPUSH
33901: CALL 33958 0 5
// end ; end_of_file
33905: PPOPN 5
33907: END
// export function SOS_UnitDestroyed ( un ) ; begin
33908: LD_INT 0
33910: PPUSH
// ComRadiation ( un ) ;
33911: LD_VAR 0 1
33915: PPUSH
33916: CALL 34897 0 1
// end ;
33920: LD_VAR 0 2
33924: RET
// export function SOS_UnitKamikazed ( un ) ; begin
33925: LD_INT 0
33927: PPUSH
// ComRadiation ( un ) ;
33928: LD_VAR 0 1
33932: PPUSH
33933: CALL 34897 0 1
// end ;
33937: LD_VAR 0 2
33941: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33942: LD_INT 0
33944: PPUSH
// end ;
33945: LD_VAR 0 4
33949: RET
// export function SOS_Command ( cmd ) ; begin
33950: LD_INT 0
33952: PPUSH
// end ;
33953: LD_VAR 0 2
33957: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33958: LD_INT 0
33960: PPUSH
// end ;
33961: LD_VAR 0 6
33965: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
33966: LD_INT 0
33968: PPUSH
33969: PPUSH
33970: PPUSH
33971: PPUSH
33972: PPUSH
// if not vehicle or not factory then
33973: LD_VAR 0 1
33977: NOT
33978: PUSH
33979: LD_VAR 0 2
33983: NOT
33984: OR
33985: IFFALSE 33989
// exit ;
33987: GO 34488
// if not factoryWaypoints then
33989: LD_EXP 112
33993: NOT
33994: IFFALSE 33998
// exit ;
33996: GO 34488
// for i := 1 to Count ( factoryWaypoints ) do
33998: LD_ADDR_VAR 0 4
34002: PUSH
34003: DOUBLE
34004: LD_INT 1
34006: DEC
34007: ST_TO_ADDR
34008: LD_EXP 112
34012: PPUSH
34013: CALL 41315 0 1
34017: PUSH
34018: FOR_TO
34019: IFFALSE 34486
// if factoryWaypoints [ i ] [ 2 ] = factory then
34021: LD_EXP 112
34025: PUSH
34026: LD_VAR 0 4
34030: ARRAY
34031: PUSH
34032: LD_INT 2
34034: ARRAY
34035: PUSH
34036: LD_VAR 0 2
34040: EQUAL
34041: IFFALSE 34484
// begin if GetControl ( vehicle ) = control_manual then
34043: LD_VAR 0 1
34047: PPUSH
34048: CALL_OW 263
34052: PUSH
34053: LD_INT 1
34055: EQUAL
34056: IFFALSE 34367
// begin driver := IsDrivenBy ( vehicle ) ;
34058: LD_ADDR_VAR 0 6
34062: PUSH
34063: LD_VAR 0 1
34067: PPUSH
34068: CALL_OW 311
34072: ST_TO_ADDR
// tag := GetTag ( driver ) ;
34073: LD_ADDR_VAR 0 5
34077: PUSH
34078: LD_VAR 0 6
34082: PPUSH
34083: CALL_OW 110
34087: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
34088: LD_VAR 0 5
34092: PUSH
34093: LD_INT 501
34095: EQUAL
34096: PUSH
34097: LD_VAR 0 1
34101: PPUSH
34102: CALL_OW 110
34106: PUSH
34107: LD_INT 501
34109: EQUAL
34110: OR
34111: IFFALSE 34117
// exit ;
34113: POP
34114: POP
34115: GO 34488
// if not HasTask ( driver ) then
34117: LD_VAR 0 6
34121: PPUSH
34122: CALL_OW 314
34126: NOT
34127: IFFALSE 34365
// begin SetTag ( driver , tDriver ) ;
34129: LD_VAR 0 6
34133: PPUSH
34134: LD_INT 501
34136: PPUSH
34137: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
34141: LD_VAR 0 1
34145: PPUSH
34146: LD_INT 501
34148: PPUSH
34149: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
34153: LD_ADDR_VAR 0 7
34157: PUSH
34158: LD_EXP 112
34162: PUSH
34163: LD_VAR 0 4
34167: ARRAY
34168: PUSH
34169: LD_INT 3
34171: ARRAY
34172: PPUSH
34173: LD_EXP 112
34177: PUSH
34178: LD_VAR 0 4
34182: ARRAY
34183: PUSH
34184: LD_INT 4
34186: ARRAY
34187: PPUSH
34188: CALL_OW 428
34192: ST_TO_ADDR
// if hex then
34193: LD_VAR 0 7
34197: IFFALSE 34215
// ComMoveUnit ( driver , hex ) else
34199: LD_VAR 0 6
34203: PPUSH
34204: LD_VAR 0 7
34208: PPUSH
34209: CALL_OW 112
34213: GO 34254
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
34215: LD_VAR 0 6
34219: PPUSH
34220: LD_EXP 112
34224: PUSH
34225: LD_VAR 0 4
34229: ARRAY
34230: PUSH
34231: LD_INT 3
34233: ARRAY
34234: PPUSH
34235: LD_EXP 112
34239: PUSH
34240: LD_VAR 0 4
34244: ARRAY
34245: PUSH
34246: LD_INT 4
34248: ARRAY
34249: PPUSH
34250: CALL_OW 111
// AddComExitVehicle ( driver ) ;
34254: LD_VAR 0 6
34258: PPUSH
34259: CALL_OW 181
// if Multiplayer then
34263: LD_OWVAR 4
34267: IFFALSE 34316
// begin repeat wait ( 10 ) ;
34269: LD_INT 10
34271: PPUSH
34272: CALL_OW 67
// until not IsInUnit ( driver ) ;
34276: LD_VAR 0 6
34280: PPUSH
34281: CALL_OW 310
34285: NOT
34286: IFFALSE 34269
// if not HasTask ( driver ) then
34288: LD_VAR 0 6
34292: PPUSH
34293: CALL_OW 314
34297: NOT
34298: IFFALSE 34314
// ComEnterUnit ( driver , factory ) ;
34300: LD_VAR 0 6
34304: PPUSH
34305: LD_VAR 0 2
34309: PPUSH
34310: CALL_OW 120
// end else
34314: GO 34330
// AddComEnterUnit ( driver , factory ) ;
34316: LD_VAR 0 6
34320: PPUSH
34321: LD_VAR 0 2
34325: PPUSH
34326: CALL_OW 180
// wait ( 0 0$1 ) ;
34330: LD_INT 35
34332: PPUSH
34333: CALL_OW 67
// SetTag ( driver , tag ) ;
34337: LD_VAR 0 6
34341: PPUSH
34342: LD_VAR 0 5
34346: PPUSH
34347: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
34351: LD_VAR 0 1
34355: PPUSH
34356: LD_INT 0
34358: PPUSH
34359: CALL_OW 109
// break ;
34363: GO 34486
// end ; end else
34365: GO 34484
// if GetControl ( vehicle ) = control_remote then
34367: LD_VAR 0 1
34371: PPUSH
34372: CALL_OW 263
34376: PUSH
34377: LD_INT 2
34379: EQUAL
34380: IFFALSE 34443
// begin wait ( 0 0$2 ) ;
34382: LD_INT 70
34384: PPUSH
34385: CALL_OW 67
// if Connect ( vehicle ) then
34389: LD_VAR 0 1
34393: PPUSH
34394: CALL 47521 0 1
34398: IFFALSE 34439
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
34400: LD_VAR 0 1
34404: PPUSH
34405: LD_EXP 112
34409: PUSH
34410: LD_VAR 0 4
34414: ARRAY
34415: PUSH
34416: LD_INT 3
34418: ARRAY
34419: PPUSH
34420: LD_EXP 112
34424: PUSH
34425: LD_VAR 0 4
34429: ARRAY
34430: PUSH
34431: LD_INT 4
34433: ARRAY
34434: PPUSH
34435: CALL_OW 171
// break ;
34439: GO 34486
// end else
34441: GO 34484
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
34443: LD_VAR 0 1
34447: PPUSH
34448: LD_EXP 112
34452: PUSH
34453: LD_VAR 0 4
34457: ARRAY
34458: PUSH
34459: LD_INT 3
34461: ARRAY
34462: PPUSH
34463: LD_EXP 112
34467: PUSH
34468: LD_VAR 0 4
34472: ARRAY
34473: PUSH
34474: LD_INT 4
34476: ARRAY
34477: PPUSH
34478: CALL_OW 171
// break ;
34482: GO 34486
// end ; end ;
34484: GO 34018
34486: POP
34487: POP
// end ;
34488: LD_VAR 0 3
34492: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34493: LD_INT 0
34495: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34496: LD_VAR 0 1
34500: PUSH
34501: LD_INT 250
34503: EQUAL
34504: PUSH
34505: LD_VAR 0 2
34509: PPUSH
34510: CALL_OW 264
34514: PUSH
34515: LD_INT 81
34517: EQUAL
34518: AND
34519: IFFALSE 34540
// MinerPlaceMine ( unit , x , y ) ;
34521: LD_VAR 0 2
34525: PPUSH
34526: LD_VAR 0 4
34530: PPUSH
34531: LD_VAR 0 5
34535: PPUSH
34536: CALL 37632 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34540: LD_VAR 0 1
34544: PUSH
34545: LD_INT 251
34547: EQUAL
34548: PUSH
34549: LD_VAR 0 2
34553: PPUSH
34554: CALL_OW 264
34558: PUSH
34559: LD_INT 81
34561: EQUAL
34562: AND
34563: IFFALSE 34584
// MinerDetonateMine ( unit , x , y ) ;
34565: LD_VAR 0 2
34569: PPUSH
34570: LD_VAR 0 4
34574: PPUSH
34575: LD_VAR 0 5
34579: PPUSH
34580: CALL 37907 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34584: LD_VAR 0 1
34588: PUSH
34589: LD_INT 252
34591: EQUAL
34592: PUSH
34593: LD_VAR 0 2
34597: PPUSH
34598: CALL_OW 264
34602: PUSH
34603: LD_INT 81
34605: EQUAL
34606: AND
34607: IFFALSE 34628
// MinerCreateMinefield ( unit , x , y ) ;
34609: LD_VAR 0 2
34613: PPUSH
34614: LD_VAR 0 4
34618: PPUSH
34619: LD_VAR 0 5
34623: PPUSH
34624: CALL 38324 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34628: LD_VAR 0 1
34632: PUSH
34633: LD_INT 253
34635: EQUAL
34636: PUSH
34637: LD_VAR 0 2
34641: PPUSH
34642: CALL_OW 257
34646: PUSH
34647: LD_INT 5
34649: EQUAL
34650: AND
34651: IFFALSE 34672
// ComBinocular ( unit , x , y ) ;
34653: LD_VAR 0 2
34657: PPUSH
34658: LD_VAR 0 4
34662: PPUSH
34663: LD_VAR 0 5
34667: PPUSH
34668: CALL 38693 0 3
// if selectedUnit then
34672: LD_VAR 0 3
34676: IFFALSE 34732
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34678: LD_VAR 0 1
34682: PUSH
34683: LD_INT 254
34685: EQUAL
34686: PUSH
34687: LD_VAR 0 2
34691: PPUSH
34692: CALL_OW 264
34696: PUSH
34697: LD_INT 99
34699: EQUAL
34700: AND
34701: PUSH
34702: LD_VAR 0 3
34706: PPUSH
34707: CALL_OW 263
34711: PUSH
34712: LD_INT 3
34714: EQUAL
34715: AND
34716: IFFALSE 34732
// HackDestroyVehicle ( unit , selectedUnit ) ;
34718: LD_VAR 0 2
34722: PPUSH
34723: LD_VAR 0 3
34727: PPUSH
34728: CALL 36996 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34732: LD_VAR 0 1
34736: PUSH
34737: LD_INT 255
34739: EQUAL
34740: PUSH
34741: LD_VAR 0 2
34745: PPUSH
34746: CALL_OW 264
34750: PUSH
34751: LD_INT 14
34753: PUSH
34754: LD_INT 53
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: IN
34761: AND
34762: PUSH
34763: LD_VAR 0 4
34767: PPUSH
34768: LD_VAR 0 5
34772: PPUSH
34773: CALL_OW 488
34777: AND
34778: IFFALSE 34802
// CutTreeXYR ( unit , x , y , 12 ) ;
34780: LD_VAR 0 2
34784: PPUSH
34785: LD_VAR 0 4
34789: PPUSH
34790: LD_VAR 0 5
34794: PPUSH
34795: LD_INT 12
34797: PPUSH
34798: CALL 34993 0 4
// if cmd = 256 then
34802: LD_VAR 0 1
34806: PUSH
34807: LD_INT 256
34809: EQUAL
34810: IFFALSE 34831
// SetFactoryWaypoint ( unit , x , y ) ;
34812: LD_VAR 0 2
34816: PPUSH
34817: LD_VAR 0 4
34821: PPUSH
34822: LD_VAR 0 5
34826: PPUSH
34827: CALL 32306 0 3
// if cmd = 257 then
34831: LD_VAR 0 1
34835: PUSH
34836: LD_INT 257
34838: EQUAL
34839: IFFALSE 34860
// SetWarehouseGatheringPoint ( unit , x , y ) ;
34841: LD_VAR 0 2
34845: PPUSH
34846: LD_VAR 0 4
34850: PPUSH
34851: LD_VAR 0 5
34855: PPUSH
34856: CALL 32796 0 3
// if cmd = 258 then
34860: LD_VAR 0 1
34864: PUSH
34865: LD_INT 258
34867: EQUAL
34868: IFFALSE 34892
// BurnTreeXYR ( unit , x , y , 8 ) ;
34870: LD_VAR 0 2
34874: PPUSH
34875: LD_VAR 0 4
34879: PPUSH
34880: LD_VAR 0 5
34884: PPUSH
34885: LD_INT 8
34887: PPUSH
34888: CALL 35387 0 4
// end ;
34892: LD_VAR 0 6
34896: RET
// export function ComRadiation ( un ) ; var eff ; begin
34897: LD_INT 0
34899: PPUSH
34900: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
34901: LD_VAR 0 1
34905: PPUSH
34906: CALL_OW 264
34910: PUSH
34911: LD_INT 91
34913: NONEQUAL
34914: IFFALSE 34918
// exit ;
34916: GO 34988
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34918: LD_INT 68
34920: PPUSH
34921: LD_VAR 0 1
34925: PPUSH
34926: CALL_OW 255
34930: PPUSH
34931: CALL_OW 321
34935: PUSH
34936: LD_INT 2
34938: EQUAL
34939: IFFALSE 34951
// eff := 70 else
34941: LD_ADDR_VAR 0 3
34945: PUSH
34946: LD_INT 70
34948: ST_TO_ADDR
34949: GO 34959
// eff := 30 ;
34951: LD_ADDR_VAR 0 3
34955: PUSH
34956: LD_INT 30
34958: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34959: LD_VAR 0 1
34963: PPUSH
34964: CALL_OW 250
34968: PPUSH
34969: LD_VAR 0 1
34973: PPUSH
34974: CALL_OW 251
34978: PPUSH
34979: LD_VAR 0 3
34983: PPUSH
34984: CALL_OW 495
// end ;
34988: LD_VAR 0 2
34992: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34993: LD_INT 0
34995: PPUSH
34996: PPUSH
34997: PPUSH
34998: PPUSH
34999: PPUSH
35000: PPUSH
35001: PPUSH
35002: PPUSH
35003: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
35004: LD_VAR 0 1
35008: PPUSH
35009: CALL_OW 302
35013: NOT
35014: PUSH
35015: LD_VAR 0 2
35019: PPUSH
35020: LD_VAR 0 3
35024: PPUSH
35025: CALL_OW 488
35029: NOT
35030: OR
35031: PUSH
35032: LD_VAR 0 4
35036: NOT
35037: OR
35038: IFFALSE 35042
// exit ;
35040: GO 35382
// list := [ ] ;
35042: LD_ADDR_VAR 0 13
35046: PUSH
35047: EMPTY
35048: ST_TO_ADDR
// if x - r < 0 then
35049: LD_VAR 0 2
35053: PUSH
35054: LD_VAR 0 4
35058: MINUS
35059: PUSH
35060: LD_INT 0
35062: LESS
35063: IFFALSE 35075
// min_x := 0 else
35065: LD_ADDR_VAR 0 7
35069: PUSH
35070: LD_INT 0
35072: ST_TO_ADDR
35073: GO 35091
// min_x := x - r ;
35075: LD_ADDR_VAR 0 7
35079: PUSH
35080: LD_VAR 0 2
35084: PUSH
35085: LD_VAR 0 4
35089: MINUS
35090: ST_TO_ADDR
// if y - r < 0 then
35091: LD_VAR 0 3
35095: PUSH
35096: LD_VAR 0 4
35100: MINUS
35101: PUSH
35102: LD_INT 0
35104: LESS
35105: IFFALSE 35117
// min_y := 0 else
35107: LD_ADDR_VAR 0 8
35111: PUSH
35112: LD_INT 0
35114: ST_TO_ADDR
35115: GO 35133
// min_y := y - r ;
35117: LD_ADDR_VAR 0 8
35121: PUSH
35122: LD_VAR 0 3
35126: PUSH
35127: LD_VAR 0 4
35131: MINUS
35132: ST_TO_ADDR
// max_x := x + r ;
35133: LD_ADDR_VAR 0 9
35137: PUSH
35138: LD_VAR 0 2
35142: PUSH
35143: LD_VAR 0 4
35147: PLUS
35148: ST_TO_ADDR
// max_y := y + r ;
35149: LD_ADDR_VAR 0 10
35153: PUSH
35154: LD_VAR 0 3
35158: PUSH
35159: LD_VAR 0 4
35163: PLUS
35164: ST_TO_ADDR
// for _x = min_x to max_x do
35165: LD_ADDR_VAR 0 11
35169: PUSH
35170: DOUBLE
35171: LD_VAR 0 7
35175: DEC
35176: ST_TO_ADDR
35177: LD_VAR 0 9
35181: PUSH
35182: FOR_TO
35183: IFFALSE 35300
// for _y = min_y to max_y do
35185: LD_ADDR_VAR 0 12
35189: PUSH
35190: DOUBLE
35191: LD_VAR 0 8
35195: DEC
35196: ST_TO_ADDR
35197: LD_VAR 0 10
35201: PUSH
35202: FOR_TO
35203: IFFALSE 35296
// begin if not ValidHex ( _x , _y ) then
35205: LD_VAR 0 11
35209: PPUSH
35210: LD_VAR 0 12
35214: PPUSH
35215: CALL_OW 488
35219: NOT
35220: IFFALSE 35224
// continue ;
35222: GO 35202
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35224: LD_VAR 0 11
35228: PPUSH
35229: LD_VAR 0 12
35233: PPUSH
35234: CALL_OW 351
35238: PUSH
35239: LD_VAR 0 11
35243: PPUSH
35244: LD_VAR 0 12
35248: PPUSH
35249: CALL_OW 554
35253: AND
35254: IFFALSE 35294
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35256: LD_ADDR_VAR 0 13
35260: PUSH
35261: LD_VAR 0 13
35265: PPUSH
35266: LD_VAR 0 13
35270: PUSH
35271: LD_INT 1
35273: PLUS
35274: PPUSH
35275: LD_VAR 0 11
35279: PUSH
35280: LD_VAR 0 12
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PPUSH
35289: CALL_OW 2
35293: ST_TO_ADDR
// end ;
35294: GO 35202
35296: POP
35297: POP
35298: GO 35182
35300: POP
35301: POP
// if not list then
35302: LD_VAR 0 13
35306: NOT
35307: IFFALSE 35311
// exit ;
35309: GO 35382
// for i in list do
35311: LD_ADDR_VAR 0 6
35315: PUSH
35316: LD_VAR 0 13
35320: PUSH
35321: FOR_IN
35322: IFFALSE 35380
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35324: LD_VAR 0 1
35328: PPUSH
35329: LD_STRING M
35331: PUSH
35332: LD_VAR 0 6
35336: PUSH
35337: LD_INT 1
35339: ARRAY
35340: PUSH
35341: LD_VAR 0 6
35345: PUSH
35346: LD_INT 2
35348: ARRAY
35349: PUSH
35350: LD_INT 0
35352: PUSH
35353: LD_INT 0
35355: PUSH
35356: LD_INT 0
35358: PUSH
35359: LD_INT 0
35361: PUSH
35362: EMPTY
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: PUSH
35371: EMPTY
35372: LIST
35373: PPUSH
35374: CALL_OW 447
35378: GO 35321
35380: POP
35381: POP
// end ;
35382: LD_VAR 0 5
35386: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
35387: LD_INT 0
35389: PPUSH
35390: PPUSH
35391: PPUSH
35392: PPUSH
35393: PPUSH
35394: PPUSH
35395: PPUSH
35396: PPUSH
35397: PPUSH
35398: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
35399: LD_VAR 0 1
35403: PPUSH
35404: CALL_OW 302
35408: NOT
35409: PUSH
35410: LD_VAR 0 2
35414: PPUSH
35415: LD_VAR 0 3
35419: PPUSH
35420: CALL_OW 488
35424: NOT
35425: OR
35426: PUSH
35427: LD_VAR 0 4
35431: NOT
35432: OR
35433: IFFALSE 35437
// exit ;
35435: GO 35950
// list := [ ] ;
35437: LD_ADDR_VAR 0 13
35441: PUSH
35442: EMPTY
35443: ST_TO_ADDR
// if x - r < 0 then
35444: LD_VAR 0 2
35448: PUSH
35449: LD_VAR 0 4
35453: MINUS
35454: PUSH
35455: LD_INT 0
35457: LESS
35458: IFFALSE 35470
// min_x := 0 else
35460: LD_ADDR_VAR 0 7
35464: PUSH
35465: LD_INT 0
35467: ST_TO_ADDR
35468: GO 35486
// min_x := x - r ;
35470: LD_ADDR_VAR 0 7
35474: PUSH
35475: LD_VAR 0 2
35479: PUSH
35480: LD_VAR 0 4
35484: MINUS
35485: ST_TO_ADDR
// if y - r < 0 then
35486: LD_VAR 0 3
35490: PUSH
35491: LD_VAR 0 4
35495: MINUS
35496: PUSH
35497: LD_INT 0
35499: LESS
35500: IFFALSE 35512
// min_y := 0 else
35502: LD_ADDR_VAR 0 8
35506: PUSH
35507: LD_INT 0
35509: ST_TO_ADDR
35510: GO 35528
// min_y := y - r ;
35512: LD_ADDR_VAR 0 8
35516: PUSH
35517: LD_VAR 0 3
35521: PUSH
35522: LD_VAR 0 4
35526: MINUS
35527: ST_TO_ADDR
// max_x := x + r ;
35528: LD_ADDR_VAR 0 9
35532: PUSH
35533: LD_VAR 0 2
35537: PUSH
35538: LD_VAR 0 4
35542: PLUS
35543: ST_TO_ADDR
// max_y := y + r ;
35544: LD_ADDR_VAR 0 10
35548: PUSH
35549: LD_VAR 0 3
35553: PUSH
35554: LD_VAR 0 4
35558: PLUS
35559: ST_TO_ADDR
// for _x = min_x to max_x do
35560: LD_ADDR_VAR 0 11
35564: PUSH
35565: DOUBLE
35566: LD_VAR 0 7
35570: DEC
35571: ST_TO_ADDR
35572: LD_VAR 0 9
35576: PUSH
35577: FOR_TO
35578: IFFALSE 35695
// for _y = min_y to max_y do
35580: LD_ADDR_VAR 0 12
35584: PUSH
35585: DOUBLE
35586: LD_VAR 0 8
35590: DEC
35591: ST_TO_ADDR
35592: LD_VAR 0 10
35596: PUSH
35597: FOR_TO
35598: IFFALSE 35691
// begin if not ValidHex ( _x , _y ) then
35600: LD_VAR 0 11
35604: PPUSH
35605: LD_VAR 0 12
35609: PPUSH
35610: CALL_OW 488
35614: NOT
35615: IFFALSE 35619
// continue ;
35617: GO 35597
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35619: LD_VAR 0 11
35623: PPUSH
35624: LD_VAR 0 12
35628: PPUSH
35629: CALL_OW 351
35633: PUSH
35634: LD_VAR 0 11
35638: PPUSH
35639: LD_VAR 0 12
35643: PPUSH
35644: CALL_OW 554
35648: AND
35649: IFFALSE 35689
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35651: LD_ADDR_VAR 0 13
35655: PUSH
35656: LD_VAR 0 13
35660: PPUSH
35661: LD_VAR 0 13
35665: PUSH
35666: LD_INT 1
35668: PLUS
35669: PPUSH
35670: LD_VAR 0 11
35674: PUSH
35675: LD_VAR 0 12
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PPUSH
35684: CALL_OW 2
35688: ST_TO_ADDR
// end ;
35689: GO 35597
35691: POP
35692: POP
35693: GO 35577
35695: POP
35696: POP
// if not list then
35697: LD_VAR 0 13
35701: NOT
35702: IFFALSE 35706
// exit ;
35704: GO 35950
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
35706: LD_ADDR_VAR 0 13
35710: PUSH
35711: LD_VAR 0 1
35715: PPUSH
35716: LD_VAR 0 13
35720: PPUSH
35721: LD_INT 1
35723: PPUSH
35724: LD_INT 1
35726: PPUSH
35727: CALL 44663 0 4
35731: ST_TO_ADDR
// ComStop ( flame ) ;
35732: LD_VAR 0 1
35736: PPUSH
35737: CALL_OW 141
// for i in list do
35741: LD_ADDR_VAR 0 6
35745: PUSH
35746: LD_VAR 0 13
35750: PUSH
35751: FOR_IN
35752: IFFALSE 35783
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
35754: LD_VAR 0 1
35758: PPUSH
35759: LD_VAR 0 6
35763: PUSH
35764: LD_INT 1
35766: ARRAY
35767: PPUSH
35768: LD_VAR 0 6
35772: PUSH
35773: LD_INT 2
35775: ARRAY
35776: PPUSH
35777: CALL_OW 176
35781: GO 35751
35783: POP
35784: POP
// repeat wait ( 0 0$1 ) ;
35785: LD_INT 35
35787: PPUSH
35788: CALL_OW 67
// task := GetTaskList ( flame ) ;
35792: LD_ADDR_VAR 0 14
35796: PUSH
35797: LD_VAR 0 1
35801: PPUSH
35802: CALL_OW 437
35806: ST_TO_ADDR
// if not task then
35807: LD_VAR 0 14
35811: NOT
35812: IFFALSE 35816
// exit ;
35814: GO 35950
// if task [ 1 ] [ 1 ] <> | then
35816: LD_VAR 0 14
35820: PUSH
35821: LD_INT 1
35823: ARRAY
35824: PUSH
35825: LD_INT 1
35827: ARRAY
35828: PUSH
35829: LD_STRING |
35831: NONEQUAL
35832: IFFALSE 35836
// exit ;
35834: GO 35950
// _x := task [ 1 ] [ 2 ] ;
35836: LD_ADDR_VAR 0 11
35840: PUSH
35841: LD_VAR 0 14
35845: PUSH
35846: LD_INT 1
35848: ARRAY
35849: PUSH
35850: LD_INT 2
35852: ARRAY
35853: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
35854: LD_ADDR_VAR 0 12
35858: PUSH
35859: LD_VAR 0 14
35863: PUSH
35864: LD_INT 1
35866: ARRAY
35867: PUSH
35868: LD_INT 3
35870: ARRAY
35871: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
35872: LD_VAR 0 11
35876: PPUSH
35877: LD_VAR 0 12
35881: PPUSH
35882: CALL_OW 351
35886: NOT
35887: PUSH
35888: LD_VAR 0 11
35892: PPUSH
35893: LD_VAR 0 12
35897: PPUSH
35898: CALL_OW 554
35902: NOT
35903: OR
35904: IFFALSE 35938
// begin task := Delete ( task , 1 ) ;
35906: LD_ADDR_VAR 0 14
35910: PUSH
35911: LD_VAR 0 14
35915: PPUSH
35916: LD_INT 1
35918: PPUSH
35919: CALL_OW 3
35923: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
35924: LD_VAR 0 1
35928: PPUSH
35929: LD_VAR 0 14
35933: PPUSH
35934: CALL_OW 446
// end ; until not HasTask ( flame ) ;
35938: LD_VAR 0 1
35942: PPUSH
35943: CALL_OW 314
35947: NOT
35948: IFFALSE 35785
// end ;
35950: LD_VAR 0 5
35954: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35955: LD_EXP 115
35959: NOT
35960: IFFALSE 36010
35962: GO 35964
35964: DISABLE
// begin initHack := true ;
35965: LD_ADDR_EXP 115
35969: PUSH
35970: LD_INT 1
35972: ST_TO_ADDR
// hackTanks := [ ] ;
35973: LD_ADDR_EXP 116
35977: PUSH
35978: EMPTY
35979: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35980: LD_ADDR_EXP 117
35984: PUSH
35985: EMPTY
35986: ST_TO_ADDR
// hackLimit := 3 ;
35987: LD_ADDR_EXP 118
35991: PUSH
35992: LD_INT 3
35994: ST_TO_ADDR
// hackDist := 12 ;
35995: LD_ADDR_EXP 119
35999: PUSH
36000: LD_INT 12
36002: ST_TO_ADDR
// hackCounter := [ ] ;
36003: LD_ADDR_EXP 120
36007: PUSH
36008: EMPTY
36009: ST_TO_ADDR
// end ;
36010: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36011: LD_EXP 115
36015: PUSH
36016: LD_INT 34
36018: PUSH
36019: LD_INT 99
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PPUSH
36026: CALL_OW 69
36030: AND
36031: IFFALSE 36284
36033: GO 36035
36035: DISABLE
36036: LD_INT 0
36038: PPUSH
36039: PPUSH
// begin enable ;
36040: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36041: LD_ADDR_VAR 0 1
36045: PUSH
36046: LD_INT 34
36048: PUSH
36049: LD_INT 99
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PPUSH
36056: CALL_OW 69
36060: PUSH
36061: FOR_IN
36062: IFFALSE 36282
// begin if not i in hackTanks then
36064: LD_VAR 0 1
36068: PUSH
36069: LD_EXP 116
36073: IN
36074: NOT
36075: IFFALSE 36158
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36077: LD_ADDR_EXP 116
36081: PUSH
36082: LD_EXP 116
36086: PPUSH
36087: LD_EXP 116
36091: PUSH
36092: LD_INT 1
36094: PLUS
36095: PPUSH
36096: LD_VAR 0 1
36100: PPUSH
36101: CALL_OW 1
36105: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36106: LD_ADDR_EXP 117
36110: PUSH
36111: LD_EXP 117
36115: PPUSH
36116: LD_EXP 117
36120: PUSH
36121: LD_INT 1
36123: PLUS
36124: PPUSH
36125: EMPTY
36126: PPUSH
36127: CALL_OW 1
36131: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36132: LD_ADDR_EXP 120
36136: PUSH
36137: LD_EXP 120
36141: PPUSH
36142: LD_EXP 120
36146: PUSH
36147: LD_INT 1
36149: PLUS
36150: PPUSH
36151: EMPTY
36152: PPUSH
36153: CALL_OW 1
36157: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36158: LD_VAR 0 1
36162: PPUSH
36163: CALL_OW 302
36167: NOT
36168: IFFALSE 36181
// begin HackUnlinkAll ( i ) ;
36170: LD_VAR 0 1
36174: PPUSH
36175: CALL 36287 0 1
// continue ;
36179: GO 36061
// end ; HackCheckCapturedStatus ( i ) ;
36181: LD_VAR 0 1
36185: PPUSH
36186: CALL 36730 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36190: LD_ADDR_VAR 0 2
36194: PUSH
36195: LD_INT 81
36197: PUSH
36198: LD_VAR 0 1
36202: PPUSH
36203: CALL_OW 255
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 33
36214: PUSH
36215: LD_INT 3
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 91
36224: PUSH
36225: LD_VAR 0 1
36229: PUSH
36230: LD_EXP 119
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: LIST
36239: PUSH
36240: LD_INT 50
36242: PUSH
36243: EMPTY
36244: LIST
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: PPUSH
36252: CALL_OW 69
36256: ST_TO_ADDR
// if not tmp then
36257: LD_VAR 0 2
36261: NOT
36262: IFFALSE 36266
// continue ;
36264: GO 36061
// HackLink ( i , tmp ) ;
36266: LD_VAR 0 1
36270: PPUSH
36271: LD_VAR 0 2
36275: PPUSH
36276: CALL 36423 0 2
// end ;
36280: GO 36061
36282: POP
36283: POP
// end ;
36284: PPOPN 2
36286: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36287: LD_INT 0
36289: PPUSH
36290: PPUSH
36291: PPUSH
// if not hack in hackTanks then
36292: LD_VAR 0 1
36296: PUSH
36297: LD_EXP 116
36301: IN
36302: NOT
36303: IFFALSE 36307
// exit ;
36305: GO 36418
// index := GetElementIndex ( hackTanks , hack ) ;
36307: LD_ADDR_VAR 0 4
36311: PUSH
36312: LD_EXP 116
36316: PPUSH
36317: LD_VAR 0 1
36321: PPUSH
36322: CALL 43960 0 2
36326: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36327: LD_EXP 117
36331: PUSH
36332: LD_VAR 0 4
36336: ARRAY
36337: IFFALSE 36418
// begin for i in hackTanksCaptured [ index ] do
36339: LD_ADDR_VAR 0 3
36343: PUSH
36344: LD_EXP 117
36348: PUSH
36349: LD_VAR 0 4
36353: ARRAY
36354: PUSH
36355: FOR_IN
36356: IFFALSE 36382
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36358: LD_VAR 0 3
36362: PUSH
36363: LD_INT 1
36365: ARRAY
36366: PPUSH
36367: LD_VAR 0 3
36371: PUSH
36372: LD_INT 2
36374: ARRAY
36375: PPUSH
36376: CALL_OW 235
36380: GO 36355
36382: POP
36383: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36384: LD_ADDR_EXP 117
36388: PUSH
36389: LD_EXP 117
36393: PPUSH
36394: LD_VAR 0 4
36398: PPUSH
36399: EMPTY
36400: PPUSH
36401: CALL_OW 1
36405: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36406: LD_VAR 0 1
36410: PPUSH
36411: LD_INT 0
36413: PPUSH
36414: CALL_OW 505
// end ; end ;
36418: LD_VAR 0 2
36422: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36423: LD_INT 0
36425: PPUSH
36426: PPUSH
36427: PPUSH
// if not hack in hackTanks or not vehicles then
36428: LD_VAR 0 1
36432: PUSH
36433: LD_EXP 116
36437: IN
36438: NOT
36439: PUSH
36440: LD_VAR 0 2
36444: NOT
36445: OR
36446: IFFALSE 36450
// exit ;
36448: GO 36725
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36450: LD_ADDR_VAR 0 2
36454: PUSH
36455: LD_VAR 0 1
36459: PPUSH
36460: LD_VAR 0 2
36464: PPUSH
36465: LD_INT 1
36467: PPUSH
36468: LD_INT 1
36470: PPUSH
36471: CALL 44610 0 4
36475: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36476: LD_ADDR_VAR 0 5
36480: PUSH
36481: LD_EXP 116
36485: PPUSH
36486: LD_VAR 0 1
36490: PPUSH
36491: CALL 43960 0 2
36495: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36496: LD_EXP 117
36500: PUSH
36501: LD_VAR 0 5
36505: ARRAY
36506: PUSH
36507: LD_EXP 118
36511: LESS
36512: IFFALSE 36701
// begin for i := 1 to vehicles do
36514: LD_ADDR_VAR 0 4
36518: PUSH
36519: DOUBLE
36520: LD_INT 1
36522: DEC
36523: ST_TO_ADDR
36524: LD_VAR 0 2
36528: PUSH
36529: FOR_TO
36530: IFFALSE 36699
// begin if hackTanksCaptured [ index ] = hackLimit then
36532: LD_EXP 117
36536: PUSH
36537: LD_VAR 0 5
36541: ARRAY
36542: PUSH
36543: LD_EXP 118
36547: EQUAL
36548: IFFALSE 36552
// break ;
36550: GO 36699
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36552: LD_ADDR_EXP 120
36556: PUSH
36557: LD_EXP 120
36561: PPUSH
36562: LD_VAR 0 5
36566: PPUSH
36567: LD_EXP 120
36571: PUSH
36572: LD_VAR 0 5
36576: ARRAY
36577: PUSH
36578: LD_INT 1
36580: PLUS
36581: PPUSH
36582: CALL_OW 1
36586: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36587: LD_ADDR_EXP 117
36591: PUSH
36592: LD_EXP 117
36596: PPUSH
36597: LD_VAR 0 5
36601: PUSH
36602: LD_EXP 117
36606: PUSH
36607: LD_VAR 0 5
36611: ARRAY
36612: PUSH
36613: LD_INT 1
36615: PLUS
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PPUSH
36621: LD_VAR 0 2
36625: PUSH
36626: LD_VAR 0 4
36630: ARRAY
36631: PUSH
36632: LD_VAR 0 2
36636: PUSH
36637: LD_VAR 0 4
36641: ARRAY
36642: PPUSH
36643: CALL_OW 255
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PPUSH
36652: CALL 44175 0 3
36656: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36657: LD_VAR 0 2
36661: PUSH
36662: LD_VAR 0 4
36666: ARRAY
36667: PPUSH
36668: LD_VAR 0 1
36672: PPUSH
36673: CALL_OW 255
36677: PPUSH
36678: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36682: LD_VAR 0 2
36686: PUSH
36687: LD_VAR 0 4
36691: ARRAY
36692: PPUSH
36693: CALL_OW 141
// end ;
36697: GO 36529
36699: POP
36700: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36701: LD_VAR 0 1
36705: PPUSH
36706: LD_EXP 117
36710: PUSH
36711: LD_VAR 0 5
36715: ARRAY
36716: PUSH
36717: LD_INT 0
36719: PLUS
36720: PPUSH
36721: CALL_OW 505
// end ;
36725: LD_VAR 0 3
36729: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36730: LD_INT 0
36732: PPUSH
36733: PPUSH
36734: PPUSH
36735: PPUSH
// if not hack in hackTanks then
36736: LD_VAR 0 1
36740: PUSH
36741: LD_EXP 116
36745: IN
36746: NOT
36747: IFFALSE 36751
// exit ;
36749: GO 36991
// index := GetElementIndex ( hackTanks , hack ) ;
36751: LD_ADDR_VAR 0 4
36755: PUSH
36756: LD_EXP 116
36760: PPUSH
36761: LD_VAR 0 1
36765: PPUSH
36766: CALL 43960 0 2
36770: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36771: LD_ADDR_VAR 0 3
36775: PUSH
36776: DOUBLE
36777: LD_EXP 117
36781: PUSH
36782: LD_VAR 0 4
36786: ARRAY
36787: INC
36788: ST_TO_ADDR
36789: LD_INT 1
36791: PUSH
36792: FOR_DOWNTO
36793: IFFALSE 36965
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36795: LD_ADDR_VAR 0 5
36799: PUSH
36800: LD_EXP 117
36804: PUSH
36805: LD_VAR 0 4
36809: ARRAY
36810: PUSH
36811: LD_VAR 0 3
36815: ARRAY
36816: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36817: LD_VAR 0 5
36821: PUSH
36822: LD_INT 1
36824: ARRAY
36825: PPUSH
36826: CALL_OW 302
36830: NOT
36831: PUSH
36832: LD_VAR 0 5
36836: PUSH
36837: LD_INT 1
36839: ARRAY
36840: PPUSH
36841: CALL_OW 255
36845: PUSH
36846: LD_VAR 0 1
36850: PPUSH
36851: CALL_OW 255
36855: NONEQUAL
36856: OR
36857: IFFALSE 36963
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36859: LD_VAR 0 5
36863: PUSH
36864: LD_INT 1
36866: ARRAY
36867: PPUSH
36868: CALL_OW 305
36872: PUSH
36873: LD_VAR 0 5
36877: PUSH
36878: LD_INT 1
36880: ARRAY
36881: PPUSH
36882: CALL_OW 255
36886: PUSH
36887: LD_VAR 0 1
36891: PPUSH
36892: CALL_OW 255
36896: EQUAL
36897: AND
36898: IFFALSE 36922
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36900: LD_VAR 0 5
36904: PUSH
36905: LD_INT 1
36907: ARRAY
36908: PPUSH
36909: LD_VAR 0 5
36913: PUSH
36914: LD_INT 2
36916: ARRAY
36917: PPUSH
36918: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36922: LD_ADDR_EXP 117
36926: PUSH
36927: LD_EXP 117
36931: PPUSH
36932: LD_VAR 0 4
36936: PPUSH
36937: LD_EXP 117
36941: PUSH
36942: LD_VAR 0 4
36946: ARRAY
36947: PPUSH
36948: LD_VAR 0 3
36952: PPUSH
36953: CALL_OW 3
36957: PPUSH
36958: CALL_OW 1
36962: ST_TO_ADDR
// end ; end ;
36963: GO 36792
36965: POP
36966: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36967: LD_VAR 0 1
36971: PPUSH
36972: LD_EXP 117
36976: PUSH
36977: LD_VAR 0 4
36981: ARRAY
36982: PUSH
36983: LD_INT 0
36985: PLUS
36986: PPUSH
36987: CALL_OW 505
// end ;
36991: LD_VAR 0 2
36995: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36996: LD_INT 0
36998: PPUSH
36999: PPUSH
37000: PPUSH
37001: PPUSH
// if not hack in hackTanks then
37002: LD_VAR 0 1
37006: PUSH
37007: LD_EXP 116
37011: IN
37012: NOT
37013: IFFALSE 37017
// exit ;
37015: GO 37102
// index := GetElementIndex ( hackTanks , hack ) ;
37017: LD_ADDR_VAR 0 5
37021: PUSH
37022: LD_EXP 116
37026: PPUSH
37027: LD_VAR 0 1
37031: PPUSH
37032: CALL 43960 0 2
37036: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37037: LD_ADDR_VAR 0 4
37041: PUSH
37042: DOUBLE
37043: LD_INT 1
37045: DEC
37046: ST_TO_ADDR
37047: LD_EXP 117
37051: PUSH
37052: LD_VAR 0 5
37056: ARRAY
37057: PUSH
37058: FOR_TO
37059: IFFALSE 37100
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37061: LD_EXP 117
37065: PUSH
37066: LD_VAR 0 5
37070: ARRAY
37071: PUSH
37072: LD_VAR 0 4
37076: ARRAY
37077: PUSH
37078: LD_INT 1
37080: ARRAY
37081: PUSH
37082: LD_VAR 0 2
37086: EQUAL
37087: IFFALSE 37098
// KillUnit ( vehicle ) ;
37089: LD_VAR 0 2
37093: PPUSH
37094: CALL_OW 66
37098: GO 37058
37100: POP
37101: POP
// end ;
37102: LD_VAR 0 3
37106: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37107: LD_EXP 121
37111: NOT
37112: IFFALSE 37147
37114: GO 37116
37116: DISABLE
// begin initMiner := true ;
37117: LD_ADDR_EXP 121
37121: PUSH
37122: LD_INT 1
37124: ST_TO_ADDR
// minersList := [ ] ;
37125: LD_ADDR_EXP 122
37129: PUSH
37130: EMPTY
37131: ST_TO_ADDR
// minerMinesList := [ ] ;
37132: LD_ADDR_EXP 123
37136: PUSH
37137: EMPTY
37138: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37139: LD_ADDR_EXP 124
37143: PUSH
37144: LD_INT 5
37146: ST_TO_ADDR
// end ;
37147: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37148: LD_EXP 121
37152: PUSH
37153: LD_INT 34
37155: PUSH
37156: LD_INT 81
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PPUSH
37163: CALL_OW 69
37167: AND
37168: IFFALSE 37629
37170: GO 37172
37172: DISABLE
37173: LD_INT 0
37175: PPUSH
37176: PPUSH
37177: PPUSH
37178: PPUSH
// begin enable ;
37179: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37180: LD_ADDR_VAR 0 1
37184: PUSH
37185: LD_INT 34
37187: PUSH
37188: LD_INT 81
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PPUSH
37195: CALL_OW 69
37199: PUSH
37200: FOR_IN
37201: IFFALSE 37273
// begin if not i in minersList then
37203: LD_VAR 0 1
37207: PUSH
37208: LD_EXP 122
37212: IN
37213: NOT
37214: IFFALSE 37271
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37216: LD_ADDR_EXP 122
37220: PUSH
37221: LD_EXP 122
37225: PPUSH
37226: LD_EXP 122
37230: PUSH
37231: LD_INT 1
37233: PLUS
37234: PPUSH
37235: LD_VAR 0 1
37239: PPUSH
37240: CALL_OW 1
37244: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37245: LD_ADDR_EXP 123
37249: PUSH
37250: LD_EXP 123
37254: PPUSH
37255: LD_EXP 123
37259: PUSH
37260: LD_INT 1
37262: PLUS
37263: PPUSH
37264: EMPTY
37265: PPUSH
37266: CALL_OW 1
37270: ST_TO_ADDR
// end end ;
37271: GO 37200
37273: POP
37274: POP
// for i := minerMinesList downto 1 do
37275: LD_ADDR_VAR 0 1
37279: PUSH
37280: DOUBLE
37281: LD_EXP 123
37285: INC
37286: ST_TO_ADDR
37287: LD_INT 1
37289: PUSH
37290: FOR_DOWNTO
37291: IFFALSE 37627
// begin if IsLive ( minersList [ i ] ) then
37293: LD_EXP 122
37297: PUSH
37298: LD_VAR 0 1
37302: ARRAY
37303: PPUSH
37304: CALL_OW 300
37308: IFFALSE 37336
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37310: LD_EXP 122
37314: PUSH
37315: LD_VAR 0 1
37319: ARRAY
37320: PPUSH
37321: LD_EXP 123
37325: PUSH
37326: LD_VAR 0 1
37330: ARRAY
37331: PPUSH
37332: CALL_OW 505
// if not minerMinesList [ i ] then
37336: LD_EXP 123
37340: PUSH
37341: LD_VAR 0 1
37345: ARRAY
37346: NOT
37347: IFFALSE 37351
// continue ;
37349: GO 37290
// for j := minerMinesList [ i ] downto 1 do
37351: LD_ADDR_VAR 0 2
37355: PUSH
37356: DOUBLE
37357: LD_EXP 123
37361: PUSH
37362: LD_VAR 0 1
37366: ARRAY
37367: INC
37368: ST_TO_ADDR
37369: LD_INT 1
37371: PUSH
37372: FOR_DOWNTO
37373: IFFALSE 37623
// begin side := GetSide ( minersList [ i ] ) ;
37375: LD_ADDR_VAR 0 3
37379: PUSH
37380: LD_EXP 122
37384: PUSH
37385: LD_VAR 0 1
37389: ARRAY
37390: PPUSH
37391: CALL_OW 255
37395: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37396: LD_ADDR_VAR 0 4
37400: PUSH
37401: LD_EXP 123
37405: PUSH
37406: LD_VAR 0 1
37410: ARRAY
37411: PUSH
37412: LD_VAR 0 2
37416: ARRAY
37417: PUSH
37418: LD_INT 1
37420: ARRAY
37421: PPUSH
37422: LD_EXP 123
37426: PUSH
37427: LD_VAR 0 1
37431: ARRAY
37432: PUSH
37433: LD_VAR 0 2
37437: ARRAY
37438: PUSH
37439: LD_INT 2
37441: ARRAY
37442: PPUSH
37443: CALL_OW 428
37447: ST_TO_ADDR
// if not tmp then
37448: LD_VAR 0 4
37452: NOT
37453: IFFALSE 37457
// continue ;
37455: GO 37372
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37457: LD_VAR 0 4
37461: PUSH
37462: LD_INT 81
37464: PUSH
37465: LD_VAR 0 3
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PPUSH
37474: CALL_OW 69
37478: IN
37479: PUSH
37480: LD_EXP 123
37484: PUSH
37485: LD_VAR 0 1
37489: ARRAY
37490: PUSH
37491: LD_VAR 0 2
37495: ARRAY
37496: PUSH
37497: LD_INT 1
37499: ARRAY
37500: PPUSH
37501: LD_EXP 123
37505: PUSH
37506: LD_VAR 0 1
37510: ARRAY
37511: PUSH
37512: LD_VAR 0 2
37516: ARRAY
37517: PUSH
37518: LD_INT 2
37520: ARRAY
37521: PPUSH
37522: CALL_OW 458
37526: AND
37527: IFFALSE 37621
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37529: LD_EXP 123
37533: PUSH
37534: LD_VAR 0 1
37538: ARRAY
37539: PUSH
37540: LD_VAR 0 2
37544: ARRAY
37545: PUSH
37546: LD_INT 1
37548: ARRAY
37549: PPUSH
37550: LD_EXP 123
37554: PUSH
37555: LD_VAR 0 1
37559: ARRAY
37560: PUSH
37561: LD_VAR 0 2
37565: ARRAY
37566: PUSH
37567: LD_INT 2
37569: ARRAY
37570: PPUSH
37571: LD_VAR 0 3
37575: PPUSH
37576: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37580: LD_ADDR_EXP 123
37584: PUSH
37585: LD_EXP 123
37589: PPUSH
37590: LD_VAR 0 1
37594: PPUSH
37595: LD_EXP 123
37599: PUSH
37600: LD_VAR 0 1
37604: ARRAY
37605: PPUSH
37606: LD_VAR 0 2
37610: PPUSH
37611: CALL_OW 3
37615: PPUSH
37616: CALL_OW 1
37620: ST_TO_ADDR
// end ; end ;
37621: GO 37372
37623: POP
37624: POP
// end ;
37625: GO 37290
37627: POP
37628: POP
// end ;
37629: PPOPN 4
37631: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37632: LD_INT 0
37634: PPUSH
37635: PPUSH
// result := false ;
37636: LD_ADDR_VAR 0 4
37640: PUSH
37641: LD_INT 0
37643: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37644: LD_VAR 0 1
37648: PPUSH
37649: CALL_OW 264
37653: PUSH
37654: LD_INT 81
37656: EQUAL
37657: NOT
37658: IFFALSE 37662
// exit ;
37660: GO 37902
// index := GetElementIndex ( minersList , unit ) ;
37662: LD_ADDR_VAR 0 5
37666: PUSH
37667: LD_EXP 122
37671: PPUSH
37672: LD_VAR 0 1
37676: PPUSH
37677: CALL 43960 0 2
37681: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37682: LD_EXP 123
37686: PUSH
37687: LD_VAR 0 5
37691: ARRAY
37692: PUSH
37693: LD_EXP 124
37697: GREATEREQUAL
37698: IFFALSE 37702
// exit ;
37700: GO 37902
// ComMoveXY ( unit , x , y ) ;
37702: LD_VAR 0 1
37706: PPUSH
37707: LD_VAR 0 2
37711: PPUSH
37712: LD_VAR 0 3
37716: PPUSH
37717: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37721: LD_INT 35
37723: PPUSH
37724: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37728: LD_VAR 0 1
37732: PPUSH
37733: LD_VAR 0 2
37737: PPUSH
37738: LD_VAR 0 3
37742: PPUSH
37743: CALL 75721 0 3
37747: NOT
37748: PUSH
37749: LD_VAR 0 1
37753: PPUSH
37754: CALL_OW 314
37758: AND
37759: IFFALSE 37763
// exit ;
37761: GO 37902
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37763: LD_VAR 0 2
37767: PPUSH
37768: LD_VAR 0 3
37772: PPUSH
37773: CALL_OW 428
37777: PUSH
37778: LD_VAR 0 1
37782: EQUAL
37783: PUSH
37784: LD_VAR 0 1
37788: PPUSH
37789: CALL_OW 314
37793: NOT
37794: AND
37795: IFFALSE 37721
// PlaySoundXY ( x , y , PlantMine ) ;
37797: LD_VAR 0 2
37801: PPUSH
37802: LD_VAR 0 3
37806: PPUSH
37807: LD_STRING PlantMine
37809: PPUSH
37810: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37814: LD_VAR 0 2
37818: PPUSH
37819: LD_VAR 0 3
37823: PPUSH
37824: LD_VAR 0 1
37828: PPUSH
37829: CALL_OW 255
37833: PPUSH
37834: LD_INT 0
37836: PPUSH
37837: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37841: LD_ADDR_EXP 123
37845: PUSH
37846: LD_EXP 123
37850: PPUSH
37851: LD_VAR 0 5
37855: PUSH
37856: LD_EXP 123
37860: PUSH
37861: LD_VAR 0 5
37865: ARRAY
37866: PUSH
37867: LD_INT 1
37869: PLUS
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PPUSH
37875: LD_VAR 0 2
37879: PUSH
37880: LD_VAR 0 3
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PPUSH
37889: CALL 44175 0 3
37893: ST_TO_ADDR
// result := true ;
37894: LD_ADDR_VAR 0 4
37898: PUSH
37899: LD_INT 1
37901: ST_TO_ADDR
// end ;
37902: LD_VAR 0 4
37906: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37907: LD_INT 0
37909: PPUSH
37910: PPUSH
37911: PPUSH
// if not unit in minersList then
37912: LD_VAR 0 1
37916: PUSH
37917: LD_EXP 122
37921: IN
37922: NOT
37923: IFFALSE 37927
// exit ;
37925: GO 38319
// index := GetElementIndex ( minersList , unit ) ;
37927: LD_ADDR_VAR 0 6
37931: PUSH
37932: LD_EXP 122
37936: PPUSH
37937: LD_VAR 0 1
37941: PPUSH
37942: CALL 43960 0 2
37946: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37947: LD_ADDR_VAR 0 5
37951: PUSH
37952: DOUBLE
37953: LD_EXP 123
37957: PUSH
37958: LD_VAR 0 6
37962: ARRAY
37963: INC
37964: ST_TO_ADDR
37965: LD_INT 1
37967: PUSH
37968: FOR_DOWNTO
37969: IFFALSE 38130
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37971: LD_EXP 123
37975: PUSH
37976: LD_VAR 0 6
37980: ARRAY
37981: PUSH
37982: LD_VAR 0 5
37986: ARRAY
37987: PUSH
37988: LD_INT 1
37990: ARRAY
37991: PUSH
37992: LD_VAR 0 2
37996: EQUAL
37997: PUSH
37998: LD_EXP 123
38002: PUSH
38003: LD_VAR 0 6
38007: ARRAY
38008: PUSH
38009: LD_VAR 0 5
38013: ARRAY
38014: PUSH
38015: LD_INT 2
38017: ARRAY
38018: PUSH
38019: LD_VAR 0 3
38023: EQUAL
38024: AND
38025: IFFALSE 38128
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38027: LD_EXP 123
38031: PUSH
38032: LD_VAR 0 6
38036: ARRAY
38037: PUSH
38038: LD_VAR 0 5
38042: ARRAY
38043: PUSH
38044: LD_INT 1
38046: ARRAY
38047: PPUSH
38048: LD_EXP 123
38052: PUSH
38053: LD_VAR 0 6
38057: ARRAY
38058: PUSH
38059: LD_VAR 0 5
38063: ARRAY
38064: PUSH
38065: LD_INT 2
38067: ARRAY
38068: PPUSH
38069: LD_VAR 0 1
38073: PPUSH
38074: CALL_OW 255
38078: PPUSH
38079: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38083: LD_ADDR_EXP 123
38087: PUSH
38088: LD_EXP 123
38092: PPUSH
38093: LD_VAR 0 6
38097: PPUSH
38098: LD_EXP 123
38102: PUSH
38103: LD_VAR 0 6
38107: ARRAY
38108: PPUSH
38109: LD_VAR 0 5
38113: PPUSH
38114: CALL_OW 3
38118: PPUSH
38119: CALL_OW 1
38123: ST_TO_ADDR
// exit ;
38124: POP
38125: POP
38126: GO 38319
// end ; end ;
38128: GO 37968
38130: POP
38131: POP
// for i := minerMinesList [ index ] downto 1 do
38132: LD_ADDR_VAR 0 5
38136: PUSH
38137: DOUBLE
38138: LD_EXP 123
38142: PUSH
38143: LD_VAR 0 6
38147: ARRAY
38148: INC
38149: ST_TO_ADDR
38150: LD_INT 1
38152: PUSH
38153: FOR_DOWNTO
38154: IFFALSE 38317
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38156: LD_EXP 123
38160: PUSH
38161: LD_VAR 0 6
38165: ARRAY
38166: PUSH
38167: LD_VAR 0 5
38171: ARRAY
38172: PUSH
38173: LD_INT 1
38175: ARRAY
38176: PPUSH
38177: LD_EXP 123
38181: PUSH
38182: LD_VAR 0 6
38186: ARRAY
38187: PUSH
38188: LD_VAR 0 5
38192: ARRAY
38193: PUSH
38194: LD_INT 2
38196: ARRAY
38197: PPUSH
38198: LD_VAR 0 2
38202: PPUSH
38203: LD_VAR 0 3
38207: PPUSH
38208: CALL_OW 298
38212: PUSH
38213: LD_INT 6
38215: LESS
38216: IFFALSE 38315
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38218: LD_EXP 123
38222: PUSH
38223: LD_VAR 0 6
38227: ARRAY
38228: PUSH
38229: LD_VAR 0 5
38233: ARRAY
38234: PUSH
38235: LD_INT 1
38237: ARRAY
38238: PPUSH
38239: LD_EXP 123
38243: PUSH
38244: LD_VAR 0 6
38248: ARRAY
38249: PUSH
38250: LD_VAR 0 5
38254: ARRAY
38255: PUSH
38256: LD_INT 2
38258: ARRAY
38259: PPUSH
38260: LD_VAR 0 1
38264: PPUSH
38265: CALL_OW 255
38269: PPUSH
38270: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38274: LD_ADDR_EXP 123
38278: PUSH
38279: LD_EXP 123
38283: PPUSH
38284: LD_VAR 0 6
38288: PPUSH
38289: LD_EXP 123
38293: PUSH
38294: LD_VAR 0 6
38298: ARRAY
38299: PPUSH
38300: LD_VAR 0 5
38304: PPUSH
38305: CALL_OW 3
38309: PPUSH
38310: CALL_OW 1
38314: ST_TO_ADDR
// end ; end ;
38315: GO 38153
38317: POP
38318: POP
// end ;
38319: LD_VAR 0 4
38323: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38324: LD_INT 0
38326: PPUSH
38327: PPUSH
38328: PPUSH
38329: PPUSH
38330: PPUSH
38331: PPUSH
38332: PPUSH
38333: PPUSH
38334: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38335: LD_VAR 0 1
38339: PPUSH
38340: CALL_OW 264
38344: PUSH
38345: LD_INT 81
38347: EQUAL
38348: NOT
38349: PUSH
38350: LD_VAR 0 1
38354: PUSH
38355: LD_EXP 122
38359: IN
38360: NOT
38361: OR
38362: IFFALSE 38366
// exit ;
38364: GO 38688
// index := GetElementIndex ( minersList , unit ) ;
38366: LD_ADDR_VAR 0 6
38370: PUSH
38371: LD_EXP 122
38375: PPUSH
38376: LD_VAR 0 1
38380: PPUSH
38381: CALL 43960 0 2
38385: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38386: LD_ADDR_VAR 0 8
38390: PUSH
38391: LD_EXP 124
38395: PUSH
38396: LD_EXP 123
38400: PUSH
38401: LD_VAR 0 6
38405: ARRAY
38406: MINUS
38407: ST_TO_ADDR
// if not minesFreeAmount then
38408: LD_VAR 0 8
38412: NOT
38413: IFFALSE 38417
// exit ;
38415: GO 38688
// tmp := [ ] ;
38417: LD_ADDR_VAR 0 7
38421: PUSH
38422: EMPTY
38423: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38424: LD_ADDR_VAR 0 5
38428: PUSH
38429: DOUBLE
38430: LD_INT 1
38432: DEC
38433: ST_TO_ADDR
38434: LD_VAR 0 8
38438: PUSH
38439: FOR_TO
38440: IFFALSE 38635
// begin _d := rand ( 0 , 5 ) ;
38442: LD_ADDR_VAR 0 11
38446: PUSH
38447: LD_INT 0
38449: PPUSH
38450: LD_INT 5
38452: PPUSH
38453: CALL_OW 12
38457: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38458: LD_ADDR_VAR 0 12
38462: PUSH
38463: LD_INT 2
38465: PPUSH
38466: LD_INT 6
38468: PPUSH
38469: CALL_OW 12
38473: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38474: LD_ADDR_VAR 0 9
38478: PUSH
38479: LD_VAR 0 2
38483: PPUSH
38484: LD_VAR 0 11
38488: PPUSH
38489: LD_VAR 0 12
38493: PPUSH
38494: CALL_OW 272
38498: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38499: LD_ADDR_VAR 0 10
38503: PUSH
38504: LD_VAR 0 3
38508: PPUSH
38509: LD_VAR 0 11
38513: PPUSH
38514: LD_VAR 0 12
38518: PPUSH
38519: CALL_OW 273
38523: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38524: LD_VAR 0 9
38528: PPUSH
38529: LD_VAR 0 10
38533: PPUSH
38534: CALL_OW 488
38538: PUSH
38539: LD_VAR 0 9
38543: PUSH
38544: LD_VAR 0 10
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_VAR 0 7
38557: IN
38558: NOT
38559: AND
38560: PUSH
38561: LD_VAR 0 9
38565: PPUSH
38566: LD_VAR 0 10
38570: PPUSH
38571: CALL_OW 458
38575: NOT
38576: AND
38577: IFFALSE 38619
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38579: LD_ADDR_VAR 0 7
38583: PUSH
38584: LD_VAR 0 7
38588: PPUSH
38589: LD_VAR 0 7
38593: PUSH
38594: LD_INT 1
38596: PLUS
38597: PPUSH
38598: LD_VAR 0 9
38602: PUSH
38603: LD_VAR 0 10
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PPUSH
38612: CALL_OW 1
38616: ST_TO_ADDR
38617: GO 38633
// i := i - 1 ;
38619: LD_ADDR_VAR 0 5
38623: PUSH
38624: LD_VAR 0 5
38628: PUSH
38629: LD_INT 1
38631: MINUS
38632: ST_TO_ADDR
// end ;
38633: GO 38439
38635: POP
38636: POP
// for i in tmp do
38637: LD_ADDR_VAR 0 5
38641: PUSH
38642: LD_VAR 0 7
38646: PUSH
38647: FOR_IN
38648: IFFALSE 38686
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38650: LD_VAR 0 1
38654: PPUSH
38655: LD_VAR 0 5
38659: PUSH
38660: LD_INT 1
38662: ARRAY
38663: PPUSH
38664: LD_VAR 0 5
38668: PUSH
38669: LD_INT 2
38671: ARRAY
38672: PPUSH
38673: CALL 37632 0 3
38677: NOT
38678: IFFALSE 38684
// exit ;
38680: POP
38681: POP
38682: GO 38688
38684: GO 38647
38686: POP
38687: POP
// end ;
38688: LD_VAR 0 4
38692: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
38693: LD_INT 0
38695: PPUSH
38696: PPUSH
38697: PPUSH
38698: PPUSH
38699: PPUSH
38700: PPUSH
38701: PPUSH
38702: PPUSH
38703: PPUSH
// if GetClass ( unit ) <> class_sniper then
38704: LD_VAR 0 1
38708: PPUSH
38709: CALL_OW 257
38713: PUSH
38714: LD_INT 5
38716: NONEQUAL
38717: IFFALSE 38721
// exit ;
38719: GO 39187
// dist := 8 ;
38721: LD_ADDR_VAR 0 5
38725: PUSH
38726: LD_INT 8
38728: ST_TO_ADDR
// viewRange := 12 ;
38729: LD_ADDR_VAR 0 8
38733: PUSH
38734: LD_INT 12
38736: ST_TO_ADDR
// side := GetSide ( unit ) ;
38737: LD_ADDR_VAR 0 6
38741: PUSH
38742: LD_VAR 0 1
38746: PPUSH
38747: CALL_OW 255
38751: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38752: LD_INT 61
38754: PPUSH
38755: LD_VAR 0 6
38759: PPUSH
38760: CALL_OW 321
38764: PUSH
38765: LD_INT 2
38767: EQUAL
38768: IFFALSE 38778
// viewRange := 16 ;
38770: LD_ADDR_VAR 0 8
38774: PUSH
38775: LD_INT 16
38777: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38778: LD_VAR 0 1
38782: PPUSH
38783: LD_VAR 0 2
38787: PPUSH
38788: LD_VAR 0 3
38792: PPUSH
38793: CALL_OW 297
38797: PUSH
38798: LD_VAR 0 5
38802: GREATER
38803: IFFALSE 38882
// begin ComMoveXY ( unit , x , y ) ;
38805: LD_VAR 0 1
38809: PPUSH
38810: LD_VAR 0 2
38814: PPUSH
38815: LD_VAR 0 3
38819: PPUSH
38820: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38824: LD_INT 35
38826: PPUSH
38827: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38831: LD_VAR 0 1
38835: PPUSH
38836: LD_VAR 0 2
38840: PPUSH
38841: LD_VAR 0 3
38845: PPUSH
38846: CALL 75721 0 3
38850: NOT
38851: IFFALSE 38855
// exit ;
38853: GO 39187
// until GetDistUnitXY ( unit , x , y ) < dist ;
38855: LD_VAR 0 1
38859: PPUSH
38860: LD_VAR 0 2
38864: PPUSH
38865: LD_VAR 0 3
38869: PPUSH
38870: CALL_OW 297
38874: PUSH
38875: LD_VAR 0 5
38879: LESS
38880: IFFALSE 38824
// end ; ComTurnXY ( unit , x , y ) ;
38882: LD_VAR 0 1
38886: PPUSH
38887: LD_VAR 0 2
38891: PPUSH
38892: LD_VAR 0 3
38896: PPUSH
38897: CALL_OW 118
// repeat if Multiplayer then
38901: LD_OWVAR 4
38905: IFFALSE 38916
// wait ( 35 ) else
38907: LD_INT 35
38909: PPUSH
38910: CALL_OW 67
38914: GO 38923
// wait ( 5 ) ;
38916: LD_INT 5
38918: PPUSH
38919: CALL_OW 67
// _d := GetDir ( unit ) ;
38923: LD_ADDR_VAR 0 11
38927: PUSH
38928: LD_VAR 0 1
38932: PPUSH
38933: CALL_OW 254
38937: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
38938: LD_ADDR_VAR 0 7
38942: PUSH
38943: LD_VAR 0 1
38947: PPUSH
38948: CALL_OW 250
38952: PPUSH
38953: LD_VAR 0 1
38957: PPUSH
38958: CALL_OW 251
38962: PPUSH
38963: LD_VAR 0 2
38967: PPUSH
38968: LD_VAR 0 3
38972: PPUSH
38973: CALL 78329 0 4
38977: ST_TO_ADDR
// until dir = _d ;
38978: LD_VAR 0 7
38982: PUSH
38983: LD_VAR 0 11
38987: EQUAL
38988: IFFALSE 38901
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
38990: LD_ADDR_VAR 0 9
38994: PUSH
38995: LD_VAR 0 1
38999: PPUSH
39000: CALL_OW 250
39004: PPUSH
39005: LD_VAR 0 7
39009: PPUSH
39010: LD_VAR 0 5
39014: PPUSH
39015: CALL_OW 272
39019: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
39020: LD_ADDR_VAR 0 10
39024: PUSH
39025: LD_VAR 0 1
39029: PPUSH
39030: CALL_OW 251
39034: PPUSH
39035: LD_VAR 0 7
39039: PPUSH
39040: LD_VAR 0 5
39044: PPUSH
39045: CALL_OW 273
39049: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39050: LD_VAR 0 9
39054: PPUSH
39055: LD_VAR 0 10
39059: PPUSH
39060: CALL_OW 488
39064: NOT
39065: IFFALSE 39069
// exit ;
39067: GO 39187
// ComAnimCustom ( unit , 1 ) ;
39069: LD_VAR 0 1
39073: PPUSH
39074: LD_INT 1
39076: PPUSH
39077: CALL_OW 592
// p := 0 ;
39081: LD_ADDR_VAR 0 12
39085: PUSH
39086: LD_INT 0
39088: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39089: LD_VAR 0 9
39093: PPUSH
39094: LD_VAR 0 10
39098: PPUSH
39099: LD_VAR 0 6
39103: PPUSH
39104: LD_VAR 0 8
39108: PPUSH
39109: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
39113: LD_INT 35
39115: PPUSH
39116: CALL_OW 67
// p := Inc ( p ) ;
39120: LD_ADDR_VAR 0 12
39124: PUSH
39125: LD_VAR 0 12
39129: PPUSH
39130: CALL 78285 0 1
39134: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
39135: LD_VAR 0 12
39139: PUSH
39140: LD_INT 3
39142: EQUAL
39143: PUSH
39144: LD_VAR 0 1
39148: PPUSH
39149: CALL_OW 302
39153: NOT
39154: OR
39155: PUSH
39156: LD_VAR 0 1
39160: PPUSH
39161: CALL_OW 301
39165: OR
39166: IFFALSE 39113
// RemoveSeeing ( _x , _y , side ) ;
39168: LD_VAR 0 9
39172: PPUSH
39173: LD_VAR 0 10
39177: PPUSH
39178: LD_VAR 0 6
39182: PPUSH
39183: CALL_OW 331
// end ; end_of_file
39187: LD_VAR 0 4
39191: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39192: LD_INT 0
39194: PPUSH
39195: PPUSH
// if exist_mode then
39196: LD_VAR 0 2
39200: IFFALSE 39246
// begin unit := CreateCharacter ( prefix & ident ) ;
39202: LD_ADDR_VAR 0 5
39206: PUSH
39207: LD_VAR 0 3
39211: PUSH
39212: LD_VAR 0 1
39216: STR
39217: PPUSH
39218: CALL_OW 34
39222: ST_TO_ADDR
// if unit then
39223: LD_VAR 0 5
39227: IFFALSE 39244
// DeleteCharacters ( prefix & ident ) ;
39229: LD_VAR 0 3
39233: PUSH
39234: LD_VAR 0 1
39238: STR
39239: PPUSH
39240: CALL_OW 40
// end else
39244: GO 39261
// unit := NewCharacter ( ident ) ;
39246: LD_ADDR_VAR 0 5
39250: PUSH
39251: LD_VAR 0 1
39255: PPUSH
39256: CALL_OW 25
39260: ST_TO_ADDR
// result := unit ;
39261: LD_ADDR_VAR 0 4
39265: PUSH
39266: LD_VAR 0 5
39270: ST_TO_ADDR
// end ;
39271: LD_VAR 0 4
39275: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39276: LD_INT 0
39278: PPUSH
39279: PPUSH
// if not side or not nation then
39280: LD_VAR 0 1
39284: NOT
39285: PUSH
39286: LD_VAR 0 2
39290: NOT
39291: OR
39292: IFFALSE 39296
// exit ;
39294: GO 40064
// case nation of nation_american :
39296: LD_VAR 0 2
39300: PUSH
39301: LD_INT 1
39303: DOUBLE
39304: EQUAL
39305: IFTRUE 39309
39307: GO 39523
39309: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39310: LD_ADDR_VAR 0 4
39314: PUSH
39315: LD_INT 35
39317: PUSH
39318: LD_INT 45
39320: PUSH
39321: LD_INT 46
39323: PUSH
39324: LD_INT 47
39326: PUSH
39327: LD_INT 82
39329: PUSH
39330: LD_INT 83
39332: PUSH
39333: LD_INT 84
39335: PUSH
39336: LD_INT 85
39338: PUSH
39339: LD_INT 86
39341: PUSH
39342: LD_INT 1
39344: PUSH
39345: LD_INT 2
39347: PUSH
39348: LD_INT 6
39350: PUSH
39351: LD_INT 15
39353: PUSH
39354: LD_INT 16
39356: PUSH
39357: LD_INT 7
39359: PUSH
39360: LD_INT 12
39362: PUSH
39363: LD_INT 13
39365: PUSH
39366: LD_INT 10
39368: PUSH
39369: LD_INT 14
39371: PUSH
39372: LD_INT 20
39374: PUSH
39375: LD_INT 21
39377: PUSH
39378: LD_INT 22
39380: PUSH
39381: LD_INT 25
39383: PUSH
39384: LD_INT 32
39386: PUSH
39387: LD_INT 27
39389: PUSH
39390: LD_INT 36
39392: PUSH
39393: LD_INT 69
39395: PUSH
39396: LD_INT 39
39398: PUSH
39399: LD_INT 34
39401: PUSH
39402: LD_INT 40
39404: PUSH
39405: LD_INT 48
39407: PUSH
39408: LD_INT 49
39410: PUSH
39411: LD_INT 50
39413: PUSH
39414: LD_INT 51
39416: PUSH
39417: LD_INT 52
39419: PUSH
39420: LD_INT 53
39422: PUSH
39423: LD_INT 54
39425: PUSH
39426: LD_INT 55
39428: PUSH
39429: LD_INT 56
39431: PUSH
39432: LD_INT 57
39434: PUSH
39435: LD_INT 58
39437: PUSH
39438: LD_INT 59
39440: PUSH
39441: LD_INT 60
39443: PUSH
39444: LD_INT 61
39446: PUSH
39447: LD_INT 62
39449: PUSH
39450: LD_INT 80
39452: PUSH
39453: LD_INT 82
39455: PUSH
39456: LD_INT 83
39458: PUSH
39459: LD_INT 84
39461: PUSH
39462: LD_INT 85
39464: PUSH
39465: LD_INT 86
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: ST_TO_ADDR
39521: GO 39988
39523: LD_INT 2
39525: DOUBLE
39526: EQUAL
39527: IFTRUE 39531
39529: GO 39757
39531: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39532: LD_ADDR_VAR 0 4
39536: PUSH
39537: LD_INT 35
39539: PUSH
39540: LD_INT 45
39542: PUSH
39543: LD_INT 46
39545: PUSH
39546: LD_INT 47
39548: PUSH
39549: LD_INT 82
39551: PUSH
39552: LD_INT 83
39554: PUSH
39555: LD_INT 84
39557: PUSH
39558: LD_INT 85
39560: PUSH
39561: LD_INT 87
39563: PUSH
39564: LD_INT 70
39566: PUSH
39567: LD_INT 1
39569: PUSH
39570: LD_INT 11
39572: PUSH
39573: LD_INT 3
39575: PUSH
39576: LD_INT 4
39578: PUSH
39579: LD_INT 5
39581: PUSH
39582: LD_INT 6
39584: PUSH
39585: LD_INT 15
39587: PUSH
39588: LD_INT 18
39590: PUSH
39591: LD_INT 7
39593: PUSH
39594: LD_INT 17
39596: PUSH
39597: LD_INT 8
39599: PUSH
39600: LD_INT 20
39602: PUSH
39603: LD_INT 21
39605: PUSH
39606: LD_INT 22
39608: PUSH
39609: LD_INT 72
39611: PUSH
39612: LD_INT 26
39614: PUSH
39615: LD_INT 69
39617: PUSH
39618: LD_INT 39
39620: PUSH
39621: LD_INT 40
39623: PUSH
39624: LD_INT 41
39626: PUSH
39627: LD_INT 42
39629: PUSH
39630: LD_INT 43
39632: PUSH
39633: LD_INT 48
39635: PUSH
39636: LD_INT 49
39638: PUSH
39639: LD_INT 50
39641: PUSH
39642: LD_INT 51
39644: PUSH
39645: LD_INT 52
39647: PUSH
39648: LD_INT 53
39650: PUSH
39651: LD_INT 54
39653: PUSH
39654: LD_INT 55
39656: PUSH
39657: LD_INT 56
39659: PUSH
39660: LD_INT 60
39662: PUSH
39663: LD_INT 61
39665: PUSH
39666: LD_INT 62
39668: PUSH
39669: LD_INT 66
39671: PUSH
39672: LD_INT 67
39674: PUSH
39675: LD_INT 68
39677: PUSH
39678: LD_INT 81
39680: PUSH
39681: LD_INT 82
39683: PUSH
39684: LD_INT 83
39686: PUSH
39687: LD_INT 84
39689: PUSH
39690: LD_INT 85
39692: PUSH
39693: LD_INT 87
39695: PUSH
39696: LD_INT 88
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: ST_TO_ADDR
39755: GO 39988
39757: LD_INT 3
39759: DOUBLE
39760: EQUAL
39761: IFTRUE 39765
39763: GO 39987
39765: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39766: LD_ADDR_VAR 0 4
39770: PUSH
39771: LD_INT 46
39773: PUSH
39774: LD_INT 47
39776: PUSH
39777: LD_INT 1
39779: PUSH
39780: LD_INT 2
39782: PUSH
39783: LD_INT 82
39785: PUSH
39786: LD_INT 83
39788: PUSH
39789: LD_INT 84
39791: PUSH
39792: LD_INT 85
39794: PUSH
39795: LD_INT 86
39797: PUSH
39798: LD_INT 11
39800: PUSH
39801: LD_INT 9
39803: PUSH
39804: LD_INT 20
39806: PUSH
39807: LD_INT 19
39809: PUSH
39810: LD_INT 21
39812: PUSH
39813: LD_INT 24
39815: PUSH
39816: LD_INT 22
39818: PUSH
39819: LD_INT 25
39821: PUSH
39822: LD_INT 28
39824: PUSH
39825: LD_INT 29
39827: PUSH
39828: LD_INT 30
39830: PUSH
39831: LD_INT 31
39833: PUSH
39834: LD_INT 37
39836: PUSH
39837: LD_INT 38
39839: PUSH
39840: LD_INT 32
39842: PUSH
39843: LD_INT 27
39845: PUSH
39846: LD_INT 33
39848: PUSH
39849: LD_INT 69
39851: PUSH
39852: LD_INT 39
39854: PUSH
39855: LD_INT 34
39857: PUSH
39858: LD_INT 40
39860: PUSH
39861: LD_INT 71
39863: PUSH
39864: LD_INT 23
39866: PUSH
39867: LD_INT 44
39869: PUSH
39870: LD_INT 48
39872: PUSH
39873: LD_INT 49
39875: PUSH
39876: LD_INT 50
39878: PUSH
39879: LD_INT 51
39881: PUSH
39882: LD_INT 52
39884: PUSH
39885: LD_INT 53
39887: PUSH
39888: LD_INT 54
39890: PUSH
39891: LD_INT 55
39893: PUSH
39894: LD_INT 56
39896: PUSH
39897: LD_INT 57
39899: PUSH
39900: LD_INT 58
39902: PUSH
39903: LD_INT 59
39905: PUSH
39906: LD_INT 63
39908: PUSH
39909: LD_INT 64
39911: PUSH
39912: LD_INT 65
39914: PUSH
39915: LD_INT 82
39917: PUSH
39918: LD_INT 83
39920: PUSH
39921: LD_INT 84
39923: PUSH
39924: LD_INT 85
39926: PUSH
39927: LD_INT 86
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: ST_TO_ADDR
39985: GO 39988
39987: POP
// if state > - 1 and state < 3 then
39988: LD_VAR 0 3
39992: PUSH
39993: LD_INT 1
39995: NEG
39996: GREATER
39997: PUSH
39998: LD_VAR 0 3
40002: PUSH
40003: LD_INT 3
40005: LESS
40006: AND
40007: IFFALSE 40064
// for i in result do
40009: LD_ADDR_VAR 0 5
40013: PUSH
40014: LD_VAR 0 4
40018: PUSH
40019: FOR_IN
40020: IFFALSE 40062
// if GetTech ( i , side ) <> state then
40022: LD_VAR 0 5
40026: PPUSH
40027: LD_VAR 0 1
40031: PPUSH
40032: CALL_OW 321
40036: PUSH
40037: LD_VAR 0 3
40041: NONEQUAL
40042: IFFALSE 40060
// result := result diff i ;
40044: LD_ADDR_VAR 0 4
40048: PUSH
40049: LD_VAR 0 4
40053: PUSH
40054: LD_VAR 0 5
40058: DIFF
40059: ST_TO_ADDR
40060: GO 40019
40062: POP
40063: POP
// end ;
40064: LD_VAR 0 4
40068: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40069: LD_INT 0
40071: PPUSH
40072: PPUSH
40073: PPUSH
// result := true ;
40074: LD_ADDR_VAR 0 3
40078: PUSH
40079: LD_INT 1
40081: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40082: LD_ADDR_VAR 0 5
40086: PUSH
40087: LD_VAR 0 2
40091: PPUSH
40092: CALL_OW 480
40096: ST_TO_ADDR
// if not tmp then
40097: LD_VAR 0 5
40101: NOT
40102: IFFALSE 40106
// exit ;
40104: GO 40155
// for i in tmp do
40106: LD_ADDR_VAR 0 4
40110: PUSH
40111: LD_VAR 0 5
40115: PUSH
40116: FOR_IN
40117: IFFALSE 40153
// if GetTech ( i , side ) <> state_researched then
40119: LD_VAR 0 4
40123: PPUSH
40124: LD_VAR 0 1
40128: PPUSH
40129: CALL_OW 321
40133: PUSH
40134: LD_INT 2
40136: NONEQUAL
40137: IFFALSE 40151
// begin result := false ;
40139: LD_ADDR_VAR 0 3
40143: PUSH
40144: LD_INT 0
40146: ST_TO_ADDR
// exit ;
40147: POP
40148: POP
40149: GO 40155
// end ;
40151: GO 40116
40153: POP
40154: POP
// end ;
40155: LD_VAR 0 3
40159: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40160: LD_INT 0
40162: PPUSH
40163: PPUSH
40164: PPUSH
40165: PPUSH
40166: PPUSH
40167: PPUSH
40168: PPUSH
40169: PPUSH
40170: PPUSH
40171: PPUSH
40172: PPUSH
40173: PPUSH
40174: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40175: LD_VAR 0 1
40179: NOT
40180: PUSH
40181: LD_VAR 0 1
40185: PPUSH
40186: CALL_OW 257
40190: PUSH
40191: LD_INT 9
40193: NONEQUAL
40194: OR
40195: IFFALSE 40199
// exit ;
40197: GO 40772
// side := GetSide ( unit ) ;
40199: LD_ADDR_VAR 0 9
40203: PUSH
40204: LD_VAR 0 1
40208: PPUSH
40209: CALL_OW 255
40213: ST_TO_ADDR
// tech_space := tech_spacanom ;
40214: LD_ADDR_VAR 0 12
40218: PUSH
40219: LD_INT 29
40221: ST_TO_ADDR
// tech_time := tech_taurad ;
40222: LD_ADDR_VAR 0 13
40226: PUSH
40227: LD_INT 28
40229: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40230: LD_ADDR_VAR 0 11
40234: PUSH
40235: LD_VAR 0 1
40239: PPUSH
40240: CALL_OW 310
40244: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40245: LD_VAR 0 11
40249: PPUSH
40250: CALL_OW 247
40254: PUSH
40255: LD_INT 2
40257: EQUAL
40258: IFFALSE 40262
// exit ;
40260: GO 40772
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40262: LD_ADDR_VAR 0 8
40266: PUSH
40267: LD_INT 81
40269: PUSH
40270: LD_VAR 0 9
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 3
40281: PUSH
40282: LD_INT 21
40284: PUSH
40285: LD_INT 3
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PPUSH
40300: CALL_OW 69
40304: ST_TO_ADDR
// if not tmp then
40305: LD_VAR 0 8
40309: NOT
40310: IFFALSE 40314
// exit ;
40312: GO 40772
// if in_unit then
40314: LD_VAR 0 11
40318: IFFALSE 40342
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40320: LD_ADDR_VAR 0 10
40324: PUSH
40325: LD_VAR 0 8
40329: PPUSH
40330: LD_VAR 0 11
40334: PPUSH
40335: CALL_OW 74
40339: ST_TO_ADDR
40340: GO 40362
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40342: LD_ADDR_VAR 0 10
40346: PUSH
40347: LD_VAR 0 8
40351: PPUSH
40352: LD_VAR 0 1
40356: PPUSH
40357: CALL_OW 74
40361: ST_TO_ADDR
// if not enemy then
40362: LD_VAR 0 10
40366: NOT
40367: IFFALSE 40371
// exit ;
40369: GO 40772
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40371: LD_VAR 0 11
40375: PUSH
40376: LD_VAR 0 11
40380: PPUSH
40381: LD_VAR 0 10
40385: PPUSH
40386: CALL_OW 296
40390: PUSH
40391: LD_INT 13
40393: GREATER
40394: AND
40395: PUSH
40396: LD_VAR 0 1
40400: PPUSH
40401: LD_VAR 0 10
40405: PPUSH
40406: CALL_OW 296
40410: PUSH
40411: LD_INT 12
40413: GREATER
40414: OR
40415: IFFALSE 40419
// exit ;
40417: GO 40772
// missile := [ 1 ] ;
40419: LD_ADDR_VAR 0 14
40423: PUSH
40424: LD_INT 1
40426: PUSH
40427: EMPTY
40428: LIST
40429: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40430: LD_VAR 0 9
40434: PPUSH
40435: LD_VAR 0 12
40439: PPUSH
40440: CALL_OW 325
40444: IFFALSE 40473
// missile := Replace ( missile , missile + 1 , 2 ) ;
40446: LD_ADDR_VAR 0 14
40450: PUSH
40451: LD_VAR 0 14
40455: PPUSH
40456: LD_VAR 0 14
40460: PUSH
40461: LD_INT 1
40463: PLUS
40464: PPUSH
40465: LD_INT 2
40467: PPUSH
40468: CALL_OW 1
40472: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40473: LD_VAR 0 9
40477: PPUSH
40478: LD_VAR 0 13
40482: PPUSH
40483: CALL_OW 325
40487: PUSH
40488: LD_VAR 0 10
40492: PPUSH
40493: CALL_OW 255
40497: PPUSH
40498: LD_VAR 0 13
40502: PPUSH
40503: CALL_OW 325
40507: NOT
40508: AND
40509: IFFALSE 40538
// missile := Replace ( missile , missile + 1 , 3 ) ;
40511: LD_ADDR_VAR 0 14
40515: PUSH
40516: LD_VAR 0 14
40520: PPUSH
40521: LD_VAR 0 14
40525: PUSH
40526: LD_INT 1
40528: PLUS
40529: PPUSH
40530: LD_INT 3
40532: PPUSH
40533: CALL_OW 1
40537: ST_TO_ADDR
// if missile < 2 then
40538: LD_VAR 0 14
40542: PUSH
40543: LD_INT 2
40545: LESS
40546: IFFALSE 40550
// exit ;
40548: GO 40772
// x := GetX ( enemy ) ;
40550: LD_ADDR_VAR 0 4
40554: PUSH
40555: LD_VAR 0 10
40559: PPUSH
40560: CALL_OW 250
40564: ST_TO_ADDR
// y := GetY ( enemy ) ;
40565: LD_ADDR_VAR 0 5
40569: PUSH
40570: LD_VAR 0 10
40574: PPUSH
40575: CALL_OW 251
40579: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40580: LD_ADDR_VAR 0 6
40584: PUSH
40585: LD_VAR 0 4
40589: PUSH
40590: LD_INT 1
40592: NEG
40593: PPUSH
40594: LD_INT 1
40596: PPUSH
40597: CALL_OW 12
40601: PLUS
40602: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40603: LD_ADDR_VAR 0 7
40607: PUSH
40608: LD_VAR 0 5
40612: PUSH
40613: LD_INT 1
40615: NEG
40616: PPUSH
40617: LD_INT 1
40619: PPUSH
40620: CALL_OW 12
40624: PLUS
40625: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40626: LD_VAR 0 6
40630: PPUSH
40631: LD_VAR 0 7
40635: PPUSH
40636: CALL_OW 488
40640: NOT
40641: IFFALSE 40663
// begin _x := x ;
40643: LD_ADDR_VAR 0 6
40647: PUSH
40648: LD_VAR 0 4
40652: ST_TO_ADDR
// _y := y ;
40653: LD_ADDR_VAR 0 7
40657: PUSH
40658: LD_VAR 0 5
40662: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40663: LD_ADDR_VAR 0 3
40667: PUSH
40668: LD_INT 1
40670: PPUSH
40671: LD_VAR 0 14
40675: PPUSH
40676: CALL_OW 12
40680: ST_TO_ADDR
// case i of 1 :
40681: LD_VAR 0 3
40685: PUSH
40686: LD_INT 1
40688: DOUBLE
40689: EQUAL
40690: IFTRUE 40694
40692: GO 40711
40694: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40695: LD_VAR 0 1
40699: PPUSH
40700: LD_VAR 0 10
40704: PPUSH
40705: CALL_OW 115
40709: GO 40772
40711: LD_INT 2
40713: DOUBLE
40714: EQUAL
40715: IFTRUE 40719
40717: GO 40741
40719: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40720: LD_VAR 0 1
40724: PPUSH
40725: LD_VAR 0 6
40729: PPUSH
40730: LD_VAR 0 7
40734: PPUSH
40735: CALL_OW 153
40739: GO 40772
40741: LD_INT 3
40743: DOUBLE
40744: EQUAL
40745: IFTRUE 40749
40747: GO 40771
40749: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40750: LD_VAR 0 1
40754: PPUSH
40755: LD_VAR 0 6
40759: PPUSH
40760: LD_VAR 0 7
40764: PPUSH
40765: CALL_OW 154
40769: GO 40772
40771: POP
// end ;
40772: LD_VAR 0 2
40776: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40777: LD_INT 0
40779: PPUSH
40780: PPUSH
40781: PPUSH
40782: PPUSH
40783: PPUSH
40784: PPUSH
// if not unit or not building then
40785: LD_VAR 0 1
40789: NOT
40790: PUSH
40791: LD_VAR 0 2
40795: NOT
40796: OR
40797: IFFALSE 40801
// exit ;
40799: GO 40959
// x := GetX ( building ) ;
40801: LD_ADDR_VAR 0 5
40805: PUSH
40806: LD_VAR 0 2
40810: PPUSH
40811: CALL_OW 250
40815: ST_TO_ADDR
// y := GetY ( building ) ;
40816: LD_ADDR_VAR 0 6
40820: PUSH
40821: LD_VAR 0 2
40825: PPUSH
40826: CALL_OW 251
40830: ST_TO_ADDR
// for i = 0 to 5 do
40831: LD_ADDR_VAR 0 4
40835: PUSH
40836: DOUBLE
40837: LD_INT 0
40839: DEC
40840: ST_TO_ADDR
40841: LD_INT 5
40843: PUSH
40844: FOR_TO
40845: IFFALSE 40957
// begin _x := ShiftX ( x , i , 3 ) ;
40847: LD_ADDR_VAR 0 7
40851: PUSH
40852: LD_VAR 0 5
40856: PPUSH
40857: LD_VAR 0 4
40861: PPUSH
40862: LD_INT 3
40864: PPUSH
40865: CALL_OW 272
40869: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40870: LD_ADDR_VAR 0 8
40874: PUSH
40875: LD_VAR 0 6
40879: PPUSH
40880: LD_VAR 0 4
40884: PPUSH
40885: LD_INT 3
40887: PPUSH
40888: CALL_OW 273
40892: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40893: LD_VAR 0 7
40897: PPUSH
40898: LD_VAR 0 8
40902: PPUSH
40903: CALL_OW 488
40907: NOT
40908: IFFALSE 40912
// continue ;
40910: GO 40844
// if HexInfo ( _x , _y ) = 0 then
40912: LD_VAR 0 7
40916: PPUSH
40917: LD_VAR 0 8
40921: PPUSH
40922: CALL_OW 428
40926: PUSH
40927: LD_INT 0
40929: EQUAL
40930: IFFALSE 40955
// begin ComMoveXY ( unit , _x , _y ) ;
40932: LD_VAR 0 1
40936: PPUSH
40937: LD_VAR 0 7
40941: PPUSH
40942: LD_VAR 0 8
40946: PPUSH
40947: CALL_OW 111
// exit ;
40951: POP
40952: POP
40953: GO 40959
// end ; end ;
40955: GO 40844
40957: POP
40958: POP
// end ;
40959: LD_VAR 0 3
40963: RET
// export function ScanBase ( side , base_area ) ; begin
40964: LD_INT 0
40966: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40967: LD_ADDR_VAR 0 3
40971: PUSH
40972: LD_VAR 0 2
40976: PPUSH
40977: LD_INT 81
40979: PUSH
40980: LD_VAR 0 1
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PPUSH
40989: CALL_OW 70
40993: ST_TO_ADDR
// end ;
40994: LD_VAR 0 3
40998: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40999: LD_INT 0
41001: PPUSH
41002: PPUSH
41003: PPUSH
41004: PPUSH
// result := false ;
41005: LD_ADDR_VAR 0 2
41009: PUSH
41010: LD_INT 0
41012: ST_TO_ADDR
// side := GetSide ( unit ) ;
41013: LD_ADDR_VAR 0 3
41017: PUSH
41018: LD_VAR 0 1
41022: PPUSH
41023: CALL_OW 255
41027: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41028: LD_ADDR_VAR 0 4
41032: PUSH
41033: LD_VAR 0 1
41037: PPUSH
41038: CALL_OW 248
41042: ST_TO_ADDR
// case nat of 1 :
41043: LD_VAR 0 4
41047: PUSH
41048: LD_INT 1
41050: DOUBLE
41051: EQUAL
41052: IFTRUE 41056
41054: GO 41067
41056: POP
// tech := tech_lassight ; 2 :
41057: LD_ADDR_VAR 0 5
41061: PUSH
41062: LD_INT 12
41064: ST_TO_ADDR
41065: GO 41106
41067: LD_INT 2
41069: DOUBLE
41070: EQUAL
41071: IFTRUE 41075
41073: GO 41086
41075: POP
// tech := tech_mortar ; 3 :
41076: LD_ADDR_VAR 0 5
41080: PUSH
41081: LD_INT 41
41083: ST_TO_ADDR
41084: GO 41106
41086: LD_INT 3
41088: DOUBLE
41089: EQUAL
41090: IFTRUE 41094
41092: GO 41105
41094: POP
// tech := tech_bazooka ; end ;
41095: LD_ADDR_VAR 0 5
41099: PUSH
41100: LD_INT 44
41102: ST_TO_ADDR
41103: GO 41106
41105: POP
// if Researched ( side , tech ) then
41106: LD_VAR 0 3
41110: PPUSH
41111: LD_VAR 0 5
41115: PPUSH
41116: CALL_OW 325
41120: IFFALSE 41147
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41122: LD_ADDR_VAR 0 2
41126: PUSH
41127: LD_INT 5
41129: PUSH
41130: LD_INT 8
41132: PUSH
41133: LD_INT 9
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: LIST
41140: PUSH
41141: LD_VAR 0 4
41145: ARRAY
41146: ST_TO_ADDR
// end ;
41147: LD_VAR 0 2
41151: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41152: LD_INT 0
41154: PPUSH
41155: PPUSH
41156: PPUSH
// if not mines then
41157: LD_VAR 0 2
41161: NOT
41162: IFFALSE 41166
// exit ;
41164: GO 41310
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41166: LD_ADDR_VAR 0 5
41170: PUSH
41171: LD_INT 81
41173: PUSH
41174: LD_VAR 0 1
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 3
41185: PUSH
41186: LD_INT 21
41188: PUSH
41189: LD_INT 3
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PPUSH
41204: CALL_OW 69
41208: ST_TO_ADDR
// for i in mines do
41209: LD_ADDR_VAR 0 4
41213: PUSH
41214: LD_VAR 0 2
41218: PUSH
41219: FOR_IN
41220: IFFALSE 41308
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41222: LD_VAR 0 4
41226: PUSH
41227: LD_INT 1
41229: ARRAY
41230: PPUSH
41231: LD_VAR 0 4
41235: PUSH
41236: LD_INT 2
41238: ARRAY
41239: PPUSH
41240: CALL_OW 458
41244: NOT
41245: IFFALSE 41249
// continue ;
41247: GO 41219
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41249: LD_VAR 0 4
41253: PUSH
41254: LD_INT 1
41256: ARRAY
41257: PPUSH
41258: LD_VAR 0 4
41262: PUSH
41263: LD_INT 2
41265: ARRAY
41266: PPUSH
41267: CALL_OW 428
41271: PUSH
41272: LD_VAR 0 5
41276: IN
41277: IFFALSE 41306
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41279: LD_VAR 0 4
41283: PUSH
41284: LD_INT 1
41286: ARRAY
41287: PPUSH
41288: LD_VAR 0 4
41292: PUSH
41293: LD_INT 2
41295: ARRAY
41296: PPUSH
41297: LD_VAR 0 1
41301: PPUSH
41302: CALL_OW 456
// end ;
41306: GO 41219
41308: POP
41309: POP
// end ;
41310: LD_VAR 0 3
41314: RET
// export function Count ( array ) ; begin
41315: LD_INT 0
41317: PPUSH
// result := array + 0 ;
41318: LD_ADDR_VAR 0 2
41322: PUSH
41323: LD_VAR 0 1
41327: PUSH
41328: LD_INT 0
41330: PLUS
41331: ST_TO_ADDR
// end ;
41332: LD_VAR 0 2
41336: RET
// export function IsEmpty ( building ) ; begin
41337: LD_INT 0
41339: PPUSH
// if not building then
41340: LD_VAR 0 1
41344: NOT
41345: IFFALSE 41349
// exit ;
41347: GO 41392
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41349: LD_ADDR_VAR 0 2
41353: PUSH
41354: LD_VAR 0 1
41358: PUSH
41359: LD_INT 22
41361: PUSH
41362: LD_VAR 0 1
41366: PPUSH
41367: CALL_OW 255
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 58
41378: PUSH
41379: EMPTY
41380: LIST
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PPUSH
41386: CALL_OW 69
41390: IN
41391: ST_TO_ADDR
// end ;
41392: LD_VAR 0 2
41396: RET
// export function IsNotFull ( building ) ; var places ; begin
41397: LD_INT 0
41399: PPUSH
41400: PPUSH
// if not building then
41401: LD_VAR 0 1
41405: NOT
41406: IFFALSE 41410
// exit ;
41408: GO 41438
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
41410: LD_ADDR_VAR 0 2
41414: PUSH
41415: LD_VAR 0 1
41419: PPUSH
41420: LD_INT 3
41422: PUSH
41423: LD_INT 62
41425: PUSH
41426: EMPTY
41427: LIST
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PPUSH
41433: CALL_OW 72
41437: ST_TO_ADDR
// end ;
41438: LD_VAR 0 2
41442: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41443: LD_INT 0
41445: PPUSH
41446: PPUSH
41447: PPUSH
41448: PPUSH
// tmp := [ ] ;
41449: LD_ADDR_VAR 0 3
41453: PUSH
41454: EMPTY
41455: ST_TO_ADDR
// list := [ ] ;
41456: LD_ADDR_VAR 0 5
41460: PUSH
41461: EMPTY
41462: ST_TO_ADDR
// for i = 16 to 25 do
41463: LD_ADDR_VAR 0 4
41467: PUSH
41468: DOUBLE
41469: LD_INT 16
41471: DEC
41472: ST_TO_ADDR
41473: LD_INT 25
41475: PUSH
41476: FOR_TO
41477: IFFALSE 41550
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41479: LD_ADDR_VAR 0 3
41483: PUSH
41484: LD_VAR 0 3
41488: PUSH
41489: LD_INT 22
41491: PUSH
41492: LD_VAR 0 1
41496: PPUSH
41497: CALL_OW 255
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 91
41508: PUSH
41509: LD_VAR 0 1
41513: PUSH
41514: LD_INT 6
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 30
41524: PUSH
41525: LD_VAR 0 4
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: LIST
41538: PUSH
41539: EMPTY
41540: LIST
41541: PPUSH
41542: CALL_OW 69
41546: ADD
41547: ST_TO_ADDR
41548: GO 41476
41550: POP
41551: POP
// for i = 1 to tmp do
41552: LD_ADDR_VAR 0 4
41556: PUSH
41557: DOUBLE
41558: LD_INT 1
41560: DEC
41561: ST_TO_ADDR
41562: LD_VAR 0 3
41566: PUSH
41567: FOR_TO
41568: IFFALSE 41656
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41570: LD_ADDR_VAR 0 5
41574: PUSH
41575: LD_VAR 0 5
41579: PUSH
41580: LD_VAR 0 3
41584: PUSH
41585: LD_VAR 0 4
41589: ARRAY
41590: PPUSH
41591: CALL_OW 266
41595: PUSH
41596: LD_VAR 0 3
41600: PUSH
41601: LD_VAR 0 4
41605: ARRAY
41606: PPUSH
41607: CALL_OW 250
41611: PUSH
41612: LD_VAR 0 3
41616: PUSH
41617: LD_VAR 0 4
41621: ARRAY
41622: PPUSH
41623: CALL_OW 251
41627: PUSH
41628: LD_VAR 0 3
41632: PUSH
41633: LD_VAR 0 4
41637: ARRAY
41638: PPUSH
41639: CALL_OW 254
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: PUSH
41650: EMPTY
41651: LIST
41652: ADD
41653: ST_TO_ADDR
41654: GO 41567
41656: POP
41657: POP
// result := list ;
41658: LD_ADDR_VAR 0 2
41662: PUSH
41663: LD_VAR 0 5
41667: ST_TO_ADDR
// end ;
41668: LD_VAR 0 2
41672: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41673: LD_INT 0
41675: PPUSH
41676: PPUSH
41677: PPUSH
41678: PPUSH
41679: PPUSH
41680: PPUSH
41681: PPUSH
// if not factory then
41682: LD_VAR 0 1
41686: NOT
41687: IFFALSE 41691
// exit ;
41689: GO 42284
// if control = control_apeman then
41691: LD_VAR 0 4
41695: PUSH
41696: LD_INT 5
41698: EQUAL
41699: IFFALSE 41808
// begin tmp := UnitsInside ( factory ) ;
41701: LD_ADDR_VAR 0 8
41705: PUSH
41706: LD_VAR 0 1
41710: PPUSH
41711: CALL_OW 313
41715: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41716: LD_VAR 0 8
41720: PPUSH
41721: LD_INT 25
41723: PUSH
41724: LD_INT 12
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PPUSH
41731: CALL_OW 72
41735: NOT
41736: IFFALSE 41746
// control := control_manual ;
41738: LD_ADDR_VAR 0 4
41742: PUSH
41743: LD_INT 1
41745: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41746: LD_ADDR_VAR 0 8
41750: PUSH
41751: LD_VAR 0 1
41755: PPUSH
41756: CALL 41443 0 1
41760: ST_TO_ADDR
// if tmp then
41761: LD_VAR 0 8
41765: IFFALSE 41808
// begin for i in tmp do
41767: LD_ADDR_VAR 0 7
41771: PUSH
41772: LD_VAR 0 8
41776: PUSH
41777: FOR_IN
41778: IFFALSE 41806
// if i [ 1 ] = b_ext_radio then
41780: LD_VAR 0 7
41784: PUSH
41785: LD_INT 1
41787: ARRAY
41788: PUSH
41789: LD_INT 22
41791: EQUAL
41792: IFFALSE 41804
// begin control := control_remote ;
41794: LD_ADDR_VAR 0 4
41798: PUSH
41799: LD_INT 2
41801: ST_TO_ADDR
// break ;
41802: GO 41806
// end ;
41804: GO 41777
41806: POP
41807: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41808: LD_VAR 0 1
41812: PPUSH
41813: LD_VAR 0 2
41817: PPUSH
41818: LD_VAR 0 3
41822: PPUSH
41823: LD_VAR 0 4
41827: PPUSH
41828: LD_VAR 0 5
41832: PPUSH
41833: CALL_OW 448
41837: IFFALSE 41872
// begin result := [ chassis , engine , control , weapon ] ;
41839: LD_ADDR_VAR 0 6
41843: PUSH
41844: LD_VAR 0 2
41848: PUSH
41849: LD_VAR 0 3
41853: PUSH
41854: LD_VAR 0 4
41858: PUSH
41859: LD_VAR 0 5
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: ST_TO_ADDR
// exit ;
41870: GO 42284
// end ; _chassis := AvailableChassisList ( factory ) ;
41872: LD_ADDR_VAR 0 9
41876: PUSH
41877: LD_VAR 0 1
41881: PPUSH
41882: CALL_OW 475
41886: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41887: LD_ADDR_VAR 0 11
41891: PUSH
41892: LD_VAR 0 1
41896: PPUSH
41897: CALL_OW 476
41901: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41902: LD_ADDR_VAR 0 12
41906: PUSH
41907: LD_VAR 0 1
41911: PPUSH
41912: CALL_OW 477
41916: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41917: LD_ADDR_VAR 0 10
41921: PUSH
41922: LD_VAR 0 1
41926: PPUSH
41927: CALL_OW 478
41931: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41932: LD_VAR 0 9
41936: NOT
41937: PUSH
41938: LD_VAR 0 11
41942: NOT
41943: OR
41944: PUSH
41945: LD_VAR 0 12
41949: NOT
41950: OR
41951: PUSH
41952: LD_VAR 0 10
41956: NOT
41957: OR
41958: IFFALSE 41993
// begin result := [ chassis , engine , control , weapon ] ;
41960: LD_ADDR_VAR 0 6
41964: PUSH
41965: LD_VAR 0 2
41969: PUSH
41970: LD_VAR 0 3
41974: PUSH
41975: LD_VAR 0 4
41979: PUSH
41980: LD_VAR 0 5
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: ST_TO_ADDR
// exit ;
41991: GO 42284
// end ; if not chassis in _chassis then
41993: LD_VAR 0 2
41997: PUSH
41998: LD_VAR 0 9
42002: IN
42003: NOT
42004: IFFALSE 42030
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42006: LD_ADDR_VAR 0 2
42010: PUSH
42011: LD_VAR 0 9
42015: PUSH
42016: LD_INT 1
42018: PPUSH
42019: LD_VAR 0 9
42023: PPUSH
42024: CALL_OW 12
42028: ARRAY
42029: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42030: LD_VAR 0 2
42034: PPUSH
42035: LD_VAR 0 3
42039: PPUSH
42040: CALL 42289 0 2
42044: NOT
42045: IFFALSE 42104
// repeat engine := _engine [ 1 ] ;
42047: LD_ADDR_VAR 0 3
42051: PUSH
42052: LD_VAR 0 11
42056: PUSH
42057: LD_INT 1
42059: ARRAY
42060: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42061: LD_ADDR_VAR 0 11
42065: PUSH
42066: LD_VAR 0 11
42070: PPUSH
42071: LD_INT 1
42073: PPUSH
42074: CALL_OW 3
42078: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42079: LD_VAR 0 2
42083: PPUSH
42084: LD_VAR 0 3
42088: PPUSH
42089: CALL 42289 0 2
42093: PUSH
42094: LD_VAR 0 11
42098: PUSH
42099: EMPTY
42100: EQUAL
42101: OR
42102: IFFALSE 42047
// if not control in _control then
42104: LD_VAR 0 4
42108: PUSH
42109: LD_VAR 0 12
42113: IN
42114: NOT
42115: IFFALSE 42141
// control := _control [ rand ( 1 , _control ) ] ;
42117: LD_ADDR_VAR 0 4
42121: PUSH
42122: LD_VAR 0 12
42126: PUSH
42127: LD_INT 1
42129: PPUSH
42130: LD_VAR 0 12
42134: PPUSH
42135: CALL_OW 12
42139: ARRAY
42140: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42141: LD_VAR 0 2
42145: PPUSH
42146: LD_VAR 0 5
42150: PPUSH
42151: CALL 42509 0 2
42155: NOT
42156: IFFALSE 42215
// repeat weapon := _weapon [ 1 ] ;
42158: LD_ADDR_VAR 0 5
42162: PUSH
42163: LD_VAR 0 10
42167: PUSH
42168: LD_INT 1
42170: ARRAY
42171: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42172: LD_ADDR_VAR 0 10
42176: PUSH
42177: LD_VAR 0 10
42181: PPUSH
42182: LD_INT 1
42184: PPUSH
42185: CALL_OW 3
42189: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42190: LD_VAR 0 2
42194: PPUSH
42195: LD_VAR 0 5
42199: PPUSH
42200: CALL 42509 0 2
42204: PUSH
42205: LD_VAR 0 10
42209: PUSH
42210: EMPTY
42211: EQUAL
42212: OR
42213: IFFALSE 42158
// result := [ ] ;
42215: LD_ADDR_VAR 0 6
42219: PUSH
42220: EMPTY
42221: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42222: LD_VAR 0 1
42226: PPUSH
42227: LD_VAR 0 2
42231: PPUSH
42232: LD_VAR 0 3
42236: PPUSH
42237: LD_VAR 0 4
42241: PPUSH
42242: LD_VAR 0 5
42246: PPUSH
42247: CALL_OW 448
42251: IFFALSE 42284
// result := [ chassis , engine , control , weapon ] ;
42253: LD_ADDR_VAR 0 6
42257: PUSH
42258: LD_VAR 0 2
42262: PUSH
42263: LD_VAR 0 3
42267: PUSH
42268: LD_VAR 0 4
42272: PUSH
42273: LD_VAR 0 5
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: ST_TO_ADDR
// end ;
42284: LD_VAR 0 6
42288: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42289: LD_INT 0
42291: PPUSH
// if not chassis or not engine then
42292: LD_VAR 0 1
42296: NOT
42297: PUSH
42298: LD_VAR 0 2
42302: NOT
42303: OR
42304: IFFALSE 42308
// exit ;
42306: GO 42504
// case engine of engine_solar :
42308: LD_VAR 0 2
42312: PUSH
42313: LD_INT 2
42315: DOUBLE
42316: EQUAL
42317: IFTRUE 42321
42319: GO 42359
42321: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42322: LD_ADDR_VAR 0 3
42326: PUSH
42327: LD_INT 11
42329: PUSH
42330: LD_INT 12
42332: PUSH
42333: LD_INT 13
42335: PUSH
42336: LD_INT 14
42338: PUSH
42339: LD_INT 1
42341: PUSH
42342: LD_INT 2
42344: PUSH
42345: LD_INT 3
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: ST_TO_ADDR
42357: GO 42488
42359: LD_INT 1
42361: DOUBLE
42362: EQUAL
42363: IFTRUE 42367
42365: GO 42429
42367: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42368: LD_ADDR_VAR 0 3
42372: PUSH
42373: LD_INT 11
42375: PUSH
42376: LD_INT 12
42378: PUSH
42379: LD_INT 13
42381: PUSH
42382: LD_INT 14
42384: PUSH
42385: LD_INT 1
42387: PUSH
42388: LD_INT 2
42390: PUSH
42391: LD_INT 3
42393: PUSH
42394: LD_INT 4
42396: PUSH
42397: LD_INT 5
42399: PUSH
42400: LD_INT 21
42402: PUSH
42403: LD_INT 23
42405: PUSH
42406: LD_INT 22
42408: PUSH
42409: LD_INT 24
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: ST_TO_ADDR
42427: GO 42488
42429: LD_INT 3
42431: DOUBLE
42432: EQUAL
42433: IFTRUE 42437
42435: GO 42487
42437: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42438: LD_ADDR_VAR 0 3
42442: PUSH
42443: LD_INT 13
42445: PUSH
42446: LD_INT 14
42448: PUSH
42449: LD_INT 2
42451: PUSH
42452: LD_INT 3
42454: PUSH
42455: LD_INT 4
42457: PUSH
42458: LD_INT 5
42460: PUSH
42461: LD_INT 21
42463: PUSH
42464: LD_INT 22
42466: PUSH
42467: LD_INT 23
42469: PUSH
42470: LD_INT 24
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: ST_TO_ADDR
42485: GO 42488
42487: POP
// result := ( chassis in result ) ;
42488: LD_ADDR_VAR 0 3
42492: PUSH
42493: LD_VAR 0 1
42497: PUSH
42498: LD_VAR 0 3
42502: IN
42503: ST_TO_ADDR
// end ;
42504: LD_VAR 0 3
42508: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42509: LD_INT 0
42511: PPUSH
// if not chassis or not weapon then
42512: LD_VAR 0 1
42516: NOT
42517: PUSH
42518: LD_VAR 0 2
42522: NOT
42523: OR
42524: IFFALSE 42528
// exit ;
42526: GO 43588
// case weapon of us_machine_gun :
42528: LD_VAR 0 2
42532: PUSH
42533: LD_INT 2
42535: DOUBLE
42536: EQUAL
42537: IFTRUE 42541
42539: GO 42571
42541: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42542: LD_ADDR_VAR 0 3
42546: PUSH
42547: LD_INT 1
42549: PUSH
42550: LD_INT 2
42552: PUSH
42553: LD_INT 3
42555: PUSH
42556: LD_INT 4
42558: PUSH
42559: LD_INT 5
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: ST_TO_ADDR
42569: GO 43572
42571: LD_INT 3
42573: DOUBLE
42574: EQUAL
42575: IFTRUE 42579
42577: GO 42609
42579: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42580: LD_ADDR_VAR 0 3
42584: PUSH
42585: LD_INT 1
42587: PUSH
42588: LD_INT 2
42590: PUSH
42591: LD_INT 3
42593: PUSH
42594: LD_INT 4
42596: PUSH
42597: LD_INT 5
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: ST_TO_ADDR
42607: GO 43572
42609: LD_INT 11
42611: DOUBLE
42612: EQUAL
42613: IFTRUE 42617
42615: GO 42647
42617: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42618: LD_ADDR_VAR 0 3
42622: PUSH
42623: LD_INT 1
42625: PUSH
42626: LD_INT 2
42628: PUSH
42629: LD_INT 3
42631: PUSH
42632: LD_INT 4
42634: PUSH
42635: LD_INT 5
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: ST_TO_ADDR
42645: GO 43572
42647: LD_INT 4
42649: DOUBLE
42650: EQUAL
42651: IFTRUE 42655
42653: GO 42681
42655: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42656: LD_ADDR_VAR 0 3
42660: PUSH
42661: LD_INT 2
42663: PUSH
42664: LD_INT 3
42666: PUSH
42667: LD_INT 4
42669: PUSH
42670: LD_INT 5
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: ST_TO_ADDR
42679: GO 43572
42681: LD_INT 5
42683: DOUBLE
42684: EQUAL
42685: IFTRUE 42689
42687: GO 42715
42689: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42690: LD_ADDR_VAR 0 3
42694: PUSH
42695: LD_INT 2
42697: PUSH
42698: LD_INT 3
42700: PUSH
42701: LD_INT 4
42703: PUSH
42704: LD_INT 5
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: ST_TO_ADDR
42713: GO 43572
42715: LD_INT 9
42717: DOUBLE
42718: EQUAL
42719: IFTRUE 42723
42721: GO 42749
42723: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42724: LD_ADDR_VAR 0 3
42728: PUSH
42729: LD_INT 2
42731: PUSH
42732: LD_INT 3
42734: PUSH
42735: LD_INT 4
42737: PUSH
42738: LD_INT 5
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: ST_TO_ADDR
42747: GO 43572
42749: LD_INT 7
42751: DOUBLE
42752: EQUAL
42753: IFTRUE 42757
42755: GO 42783
42757: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42758: LD_ADDR_VAR 0 3
42762: PUSH
42763: LD_INT 2
42765: PUSH
42766: LD_INT 3
42768: PUSH
42769: LD_INT 4
42771: PUSH
42772: LD_INT 5
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: ST_TO_ADDR
42781: GO 43572
42783: LD_INT 12
42785: DOUBLE
42786: EQUAL
42787: IFTRUE 42791
42789: GO 42817
42791: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42792: LD_ADDR_VAR 0 3
42796: PUSH
42797: LD_INT 2
42799: PUSH
42800: LD_INT 3
42802: PUSH
42803: LD_INT 4
42805: PUSH
42806: LD_INT 5
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: ST_TO_ADDR
42815: GO 43572
42817: LD_INT 13
42819: DOUBLE
42820: EQUAL
42821: IFTRUE 42825
42823: GO 42851
42825: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42826: LD_ADDR_VAR 0 3
42830: PUSH
42831: LD_INT 2
42833: PUSH
42834: LD_INT 3
42836: PUSH
42837: LD_INT 4
42839: PUSH
42840: LD_INT 5
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: ST_TO_ADDR
42849: GO 43572
42851: LD_INT 14
42853: DOUBLE
42854: EQUAL
42855: IFTRUE 42859
42857: GO 42877
42859: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42860: LD_ADDR_VAR 0 3
42864: PUSH
42865: LD_INT 4
42867: PUSH
42868: LD_INT 5
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: ST_TO_ADDR
42875: GO 43572
42877: LD_INT 6
42879: DOUBLE
42880: EQUAL
42881: IFTRUE 42885
42883: GO 42903
42885: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42886: LD_ADDR_VAR 0 3
42890: PUSH
42891: LD_INT 4
42893: PUSH
42894: LD_INT 5
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: ST_TO_ADDR
42901: GO 43572
42903: LD_INT 10
42905: DOUBLE
42906: EQUAL
42907: IFTRUE 42911
42909: GO 42929
42911: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42912: LD_ADDR_VAR 0 3
42916: PUSH
42917: LD_INT 4
42919: PUSH
42920: LD_INT 5
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: ST_TO_ADDR
42927: GO 43572
42929: LD_INT 22
42931: DOUBLE
42932: EQUAL
42933: IFTRUE 42937
42935: GO 42963
42937: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42938: LD_ADDR_VAR 0 3
42942: PUSH
42943: LD_INT 11
42945: PUSH
42946: LD_INT 12
42948: PUSH
42949: LD_INT 13
42951: PUSH
42952: LD_INT 14
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: ST_TO_ADDR
42961: GO 43572
42963: LD_INT 23
42965: DOUBLE
42966: EQUAL
42967: IFTRUE 42971
42969: GO 42997
42971: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42972: LD_ADDR_VAR 0 3
42976: PUSH
42977: LD_INT 11
42979: PUSH
42980: LD_INT 12
42982: PUSH
42983: LD_INT 13
42985: PUSH
42986: LD_INT 14
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: ST_TO_ADDR
42995: GO 43572
42997: LD_INT 24
42999: DOUBLE
43000: EQUAL
43001: IFTRUE 43005
43003: GO 43031
43005: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43006: LD_ADDR_VAR 0 3
43010: PUSH
43011: LD_INT 11
43013: PUSH
43014: LD_INT 12
43016: PUSH
43017: LD_INT 13
43019: PUSH
43020: LD_INT 14
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: ST_TO_ADDR
43029: GO 43572
43031: LD_INT 30
43033: DOUBLE
43034: EQUAL
43035: IFTRUE 43039
43037: GO 43065
43039: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43040: LD_ADDR_VAR 0 3
43044: PUSH
43045: LD_INT 11
43047: PUSH
43048: LD_INT 12
43050: PUSH
43051: LD_INT 13
43053: PUSH
43054: LD_INT 14
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: ST_TO_ADDR
43063: GO 43572
43065: LD_INT 25
43067: DOUBLE
43068: EQUAL
43069: IFTRUE 43073
43071: GO 43091
43073: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43074: LD_ADDR_VAR 0 3
43078: PUSH
43079: LD_INT 13
43081: PUSH
43082: LD_INT 14
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: ST_TO_ADDR
43089: GO 43572
43091: LD_INT 27
43093: DOUBLE
43094: EQUAL
43095: IFTRUE 43099
43097: GO 43117
43099: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43100: LD_ADDR_VAR 0 3
43104: PUSH
43105: LD_INT 13
43107: PUSH
43108: LD_INT 14
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: ST_TO_ADDR
43115: GO 43572
43117: LD_INT 92
43119: DOUBLE
43120: EQUAL
43121: IFTRUE 43125
43123: GO 43151
43125: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43126: LD_ADDR_VAR 0 3
43130: PUSH
43131: LD_INT 11
43133: PUSH
43134: LD_INT 12
43136: PUSH
43137: LD_INT 13
43139: PUSH
43140: LD_INT 14
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: ST_TO_ADDR
43149: GO 43572
43151: LD_INT 28
43153: DOUBLE
43154: EQUAL
43155: IFTRUE 43159
43157: GO 43177
43159: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43160: LD_ADDR_VAR 0 3
43164: PUSH
43165: LD_INT 13
43167: PUSH
43168: LD_INT 14
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: ST_TO_ADDR
43175: GO 43572
43177: LD_INT 29
43179: DOUBLE
43180: EQUAL
43181: IFTRUE 43185
43183: GO 43203
43185: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43186: LD_ADDR_VAR 0 3
43190: PUSH
43191: LD_INT 13
43193: PUSH
43194: LD_INT 14
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: ST_TO_ADDR
43201: GO 43572
43203: LD_INT 31
43205: DOUBLE
43206: EQUAL
43207: IFTRUE 43211
43209: GO 43229
43211: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43212: LD_ADDR_VAR 0 3
43216: PUSH
43217: LD_INT 13
43219: PUSH
43220: LD_INT 14
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: ST_TO_ADDR
43227: GO 43572
43229: LD_INT 26
43231: DOUBLE
43232: EQUAL
43233: IFTRUE 43237
43235: GO 43255
43237: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43238: LD_ADDR_VAR 0 3
43242: PUSH
43243: LD_INT 13
43245: PUSH
43246: LD_INT 14
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: ST_TO_ADDR
43253: GO 43572
43255: LD_INT 42
43257: DOUBLE
43258: EQUAL
43259: IFTRUE 43263
43261: GO 43289
43263: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43264: LD_ADDR_VAR 0 3
43268: PUSH
43269: LD_INT 21
43271: PUSH
43272: LD_INT 22
43274: PUSH
43275: LD_INT 23
43277: PUSH
43278: LD_INT 24
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: ST_TO_ADDR
43287: GO 43572
43289: LD_INT 43
43291: DOUBLE
43292: EQUAL
43293: IFTRUE 43297
43295: GO 43323
43297: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43298: LD_ADDR_VAR 0 3
43302: PUSH
43303: LD_INT 21
43305: PUSH
43306: LD_INT 22
43308: PUSH
43309: LD_INT 23
43311: PUSH
43312: LD_INT 24
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: ST_TO_ADDR
43321: GO 43572
43323: LD_INT 44
43325: DOUBLE
43326: EQUAL
43327: IFTRUE 43331
43329: GO 43357
43331: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43332: LD_ADDR_VAR 0 3
43336: PUSH
43337: LD_INT 21
43339: PUSH
43340: LD_INT 22
43342: PUSH
43343: LD_INT 23
43345: PUSH
43346: LD_INT 24
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: ST_TO_ADDR
43355: GO 43572
43357: LD_INT 45
43359: DOUBLE
43360: EQUAL
43361: IFTRUE 43365
43363: GO 43391
43365: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43366: LD_ADDR_VAR 0 3
43370: PUSH
43371: LD_INT 21
43373: PUSH
43374: LD_INT 22
43376: PUSH
43377: LD_INT 23
43379: PUSH
43380: LD_INT 24
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: ST_TO_ADDR
43389: GO 43572
43391: LD_INT 49
43393: DOUBLE
43394: EQUAL
43395: IFTRUE 43399
43397: GO 43425
43399: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43400: LD_ADDR_VAR 0 3
43404: PUSH
43405: LD_INT 21
43407: PUSH
43408: LD_INT 22
43410: PUSH
43411: LD_INT 23
43413: PUSH
43414: LD_INT 24
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: ST_TO_ADDR
43423: GO 43572
43425: LD_INT 51
43427: DOUBLE
43428: EQUAL
43429: IFTRUE 43433
43431: GO 43459
43433: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43434: LD_ADDR_VAR 0 3
43438: PUSH
43439: LD_INT 21
43441: PUSH
43442: LD_INT 22
43444: PUSH
43445: LD_INT 23
43447: PUSH
43448: LD_INT 24
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: ST_TO_ADDR
43457: GO 43572
43459: LD_INT 52
43461: DOUBLE
43462: EQUAL
43463: IFTRUE 43467
43465: GO 43493
43467: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43468: LD_ADDR_VAR 0 3
43472: PUSH
43473: LD_INT 21
43475: PUSH
43476: LD_INT 22
43478: PUSH
43479: LD_INT 23
43481: PUSH
43482: LD_INT 24
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: ST_TO_ADDR
43491: GO 43572
43493: LD_INT 53
43495: DOUBLE
43496: EQUAL
43497: IFTRUE 43501
43499: GO 43519
43501: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43502: LD_ADDR_VAR 0 3
43506: PUSH
43507: LD_INT 23
43509: PUSH
43510: LD_INT 24
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: ST_TO_ADDR
43517: GO 43572
43519: LD_INT 46
43521: DOUBLE
43522: EQUAL
43523: IFTRUE 43527
43525: GO 43545
43527: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43528: LD_ADDR_VAR 0 3
43532: PUSH
43533: LD_INT 23
43535: PUSH
43536: LD_INT 24
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: ST_TO_ADDR
43543: GO 43572
43545: LD_INT 47
43547: DOUBLE
43548: EQUAL
43549: IFTRUE 43553
43551: GO 43571
43553: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43554: LD_ADDR_VAR 0 3
43558: PUSH
43559: LD_INT 23
43561: PUSH
43562: LD_INT 24
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: ST_TO_ADDR
43569: GO 43572
43571: POP
// result := ( chassis in result ) ;
43572: LD_ADDR_VAR 0 3
43576: PUSH
43577: LD_VAR 0 1
43581: PUSH
43582: LD_VAR 0 3
43586: IN
43587: ST_TO_ADDR
// end ;
43588: LD_VAR 0 3
43592: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43593: LD_INT 0
43595: PPUSH
43596: PPUSH
43597: PPUSH
43598: PPUSH
43599: PPUSH
43600: PPUSH
43601: PPUSH
// result := array ;
43602: LD_ADDR_VAR 0 5
43606: PUSH
43607: LD_VAR 0 1
43611: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43612: LD_VAR 0 1
43616: NOT
43617: PUSH
43618: LD_VAR 0 2
43622: NOT
43623: OR
43624: PUSH
43625: LD_VAR 0 3
43629: NOT
43630: OR
43631: PUSH
43632: LD_VAR 0 2
43636: PUSH
43637: LD_VAR 0 1
43641: GREATER
43642: OR
43643: PUSH
43644: LD_VAR 0 3
43648: PUSH
43649: LD_VAR 0 1
43653: GREATER
43654: OR
43655: IFFALSE 43659
// exit ;
43657: GO 43955
// if direction then
43659: LD_VAR 0 4
43663: IFFALSE 43727
// begin d := 1 ;
43665: LD_ADDR_VAR 0 9
43669: PUSH
43670: LD_INT 1
43672: ST_TO_ADDR
// if i_from > i_to then
43673: LD_VAR 0 2
43677: PUSH
43678: LD_VAR 0 3
43682: GREATER
43683: IFFALSE 43709
// length := ( array - i_from ) + i_to else
43685: LD_ADDR_VAR 0 11
43689: PUSH
43690: LD_VAR 0 1
43694: PUSH
43695: LD_VAR 0 2
43699: MINUS
43700: PUSH
43701: LD_VAR 0 3
43705: PLUS
43706: ST_TO_ADDR
43707: GO 43725
// length := i_to - i_from ;
43709: LD_ADDR_VAR 0 11
43713: PUSH
43714: LD_VAR 0 3
43718: PUSH
43719: LD_VAR 0 2
43723: MINUS
43724: ST_TO_ADDR
// end else
43725: GO 43788
// begin d := - 1 ;
43727: LD_ADDR_VAR 0 9
43731: PUSH
43732: LD_INT 1
43734: NEG
43735: ST_TO_ADDR
// if i_from > i_to then
43736: LD_VAR 0 2
43740: PUSH
43741: LD_VAR 0 3
43745: GREATER
43746: IFFALSE 43766
// length := i_from - i_to else
43748: LD_ADDR_VAR 0 11
43752: PUSH
43753: LD_VAR 0 2
43757: PUSH
43758: LD_VAR 0 3
43762: MINUS
43763: ST_TO_ADDR
43764: GO 43788
// length := ( array - i_to ) + i_from ;
43766: LD_ADDR_VAR 0 11
43770: PUSH
43771: LD_VAR 0 1
43775: PUSH
43776: LD_VAR 0 3
43780: MINUS
43781: PUSH
43782: LD_VAR 0 2
43786: PLUS
43787: ST_TO_ADDR
// end ; if not length then
43788: LD_VAR 0 11
43792: NOT
43793: IFFALSE 43797
// exit ;
43795: GO 43955
// tmp := array ;
43797: LD_ADDR_VAR 0 10
43801: PUSH
43802: LD_VAR 0 1
43806: ST_TO_ADDR
// for i = 1 to length do
43807: LD_ADDR_VAR 0 6
43811: PUSH
43812: DOUBLE
43813: LD_INT 1
43815: DEC
43816: ST_TO_ADDR
43817: LD_VAR 0 11
43821: PUSH
43822: FOR_TO
43823: IFFALSE 43943
// begin for j = 1 to array do
43825: LD_ADDR_VAR 0 7
43829: PUSH
43830: DOUBLE
43831: LD_INT 1
43833: DEC
43834: ST_TO_ADDR
43835: LD_VAR 0 1
43839: PUSH
43840: FOR_TO
43841: IFFALSE 43929
// begin k := j + d ;
43843: LD_ADDR_VAR 0 8
43847: PUSH
43848: LD_VAR 0 7
43852: PUSH
43853: LD_VAR 0 9
43857: PLUS
43858: ST_TO_ADDR
// if k > array then
43859: LD_VAR 0 8
43863: PUSH
43864: LD_VAR 0 1
43868: GREATER
43869: IFFALSE 43879
// k := 1 ;
43871: LD_ADDR_VAR 0 8
43875: PUSH
43876: LD_INT 1
43878: ST_TO_ADDR
// if not k then
43879: LD_VAR 0 8
43883: NOT
43884: IFFALSE 43896
// k := array ;
43886: LD_ADDR_VAR 0 8
43890: PUSH
43891: LD_VAR 0 1
43895: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43896: LD_ADDR_VAR 0 10
43900: PUSH
43901: LD_VAR 0 10
43905: PPUSH
43906: LD_VAR 0 8
43910: PPUSH
43911: LD_VAR 0 1
43915: PUSH
43916: LD_VAR 0 7
43920: ARRAY
43921: PPUSH
43922: CALL_OW 1
43926: ST_TO_ADDR
// end ;
43927: GO 43840
43929: POP
43930: POP
// array := tmp ;
43931: LD_ADDR_VAR 0 1
43935: PUSH
43936: LD_VAR 0 10
43940: ST_TO_ADDR
// end ;
43941: GO 43822
43943: POP
43944: POP
// result := array ;
43945: LD_ADDR_VAR 0 5
43949: PUSH
43950: LD_VAR 0 1
43954: ST_TO_ADDR
// end ;
43955: LD_VAR 0 5
43959: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43960: LD_INT 0
43962: PPUSH
43963: PPUSH
// result := 0 ;
43964: LD_ADDR_VAR 0 3
43968: PUSH
43969: LD_INT 0
43971: ST_TO_ADDR
// if not array or not value in array then
43972: LD_VAR 0 1
43976: NOT
43977: PUSH
43978: LD_VAR 0 2
43982: PUSH
43983: LD_VAR 0 1
43987: IN
43988: NOT
43989: OR
43990: IFFALSE 43994
// exit ;
43992: GO 44048
// for i = 1 to array do
43994: LD_ADDR_VAR 0 4
43998: PUSH
43999: DOUBLE
44000: LD_INT 1
44002: DEC
44003: ST_TO_ADDR
44004: LD_VAR 0 1
44008: PUSH
44009: FOR_TO
44010: IFFALSE 44046
// if value = array [ i ] then
44012: LD_VAR 0 2
44016: PUSH
44017: LD_VAR 0 1
44021: PUSH
44022: LD_VAR 0 4
44026: ARRAY
44027: EQUAL
44028: IFFALSE 44044
// begin result := i ;
44030: LD_ADDR_VAR 0 3
44034: PUSH
44035: LD_VAR 0 4
44039: ST_TO_ADDR
// exit ;
44040: POP
44041: POP
44042: GO 44048
// end ;
44044: GO 44009
44046: POP
44047: POP
// end ;
44048: LD_VAR 0 3
44052: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44053: LD_INT 0
44055: PPUSH
// vc_chassis := chassis ;
44056: LD_ADDR_OWVAR 37
44060: PUSH
44061: LD_VAR 0 1
44065: ST_TO_ADDR
// vc_engine := engine ;
44066: LD_ADDR_OWVAR 39
44070: PUSH
44071: LD_VAR 0 2
44075: ST_TO_ADDR
// vc_control := control ;
44076: LD_ADDR_OWVAR 38
44080: PUSH
44081: LD_VAR 0 3
44085: ST_TO_ADDR
// vc_weapon := weapon ;
44086: LD_ADDR_OWVAR 40
44090: PUSH
44091: LD_VAR 0 4
44095: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44096: LD_ADDR_OWVAR 41
44100: PUSH
44101: LD_VAR 0 5
44105: ST_TO_ADDR
// end ;
44106: LD_VAR 0 6
44110: RET
// export function WantPlant ( unit ) ; var task ; begin
44111: LD_INT 0
44113: PPUSH
44114: PPUSH
// result := false ;
44115: LD_ADDR_VAR 0 2
44119: PUSH
44120: LD_INT 0
44122: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44123: LD_ADDR_VAR 0 3
44127: PUSH
44128: LD_VAR 0 1
44132: PPUSH
44133: CALL_OW 437
44137: ST_TO_ADDR
// if task then
44138: LD_VAR 0 3
44142: IFFALSE 44170
// if task [ 1 ] [ 1 ] = p then
44144: LD_VAR 0 3
44148: PUSH
44149: LD_INT 1
44151: ARRAY
44152: PUSH
44153: LD_INT 1
44155: ARRAY
44156: PUSH
44157: LD_STRING p
44159: EQUAL
44160: IFFALSE 44170
// result := true ;
44162: LD_ADDR_VAR 0 2
44166: PUSH
44167: LD_INT 1
44169: ST_TO_ADDR
// end ;
44170: LD_VAR 0 2
44174: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44175: LD_INT 0
44177: PPUSH
44178: PPUSH
44179: PPUSH
44180: PPUSH
// if pos < 1 then
44181: LD_VAR 0 2
44185: PUSH
44186: LD_INT 1
44188: LESS
44189: IFFALSE 44193
// exit ;
44191: GO 44496
// if pos = 1 then
44193: LD_VAR 0 2
44197: PUSH
44198: LD_INT 1
44200: EQUAL
44201: IFFALSE 44234
// result := Replace ( arr , pos [ 1 ] , value ) else
44203: LD_ADDR_VAR 0 4
44207: PUSH
44208: LD_VAR 0 1
44212: PPUSH
44213: LD_VAR 0 2
44217: PUSH
44218: LD_INT 1
44220: ARRAY
44221: PPUSH
44222: LD_VAR 0 3
44226: PPUSH
44227: CALL_OW 1
44231: ST_TO_ADDR
44232: GO 44496
// begin tmp := arr ;
44234: LD_ADDR_VAR 0 6
44238: PUSH
44239: LD_VAR 0 1
44243: ST_TO_ADDR
// s_arr := [ tmp ] ;
44244: LD_ADDR_VAR 0 7
44248: PUSH
44249: LD_VAR 0 6
44253: PUSH
44254: EMPTY
44255: LIST
44256: ST_TO_ADDR
// for i = 1 to pos - 1 do
44257: LD_ADDR_VAR 0 5
44261: PUSH
44262: DOUBLE
44263: LD_INT 1
44265: DEC
44266: ST_TO_ADDR
44267: LD_VAR 0 2
44271: PUSH
44272: LD_INT 1
44274: MINUS
44275: PUSH
44276: FOR_TO
44277: IFFALSE 44322
// begin tmp := tmp [ pos [ i ] ] ;
44279: LD_ADDR_VAR 0 6
44283: PUSH
44284: LD_VAR 0 6
44288: PUSH
44289: LD_VAR 0 2
44293: PUSH
44294: LD_VAR 0 5
44298: ARRAY
44299: ARRAY
44300: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44301: LD_ADDR_VAR 0 7
44305: PUSH
44306: LD_VAR 0 7
44310: PUSH
44311: LD_VAR 0 6
44315: PUSH
44316: EMPTY
44317: LIST
44318: ADD
44319: ST_TO_ADDR
// end ;
44320: GO 44276
44322: POP
44323: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44324: LD_ADDR_VAR 0 6
44328: PUSH
44329: LD_VAR 0 6
44333: PPUSH
44334: LD_VAR 0 2
44338: PUSH
44339: LD_VAR 0 2
44343: ARRAY
44344: PPUSH
44345: LD_VAR 0 3
44349: PPUSH
44350: CALL_OW 1
44354: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44355: LD_ADDR_VAR 0 7
44359: PUSH
44360: LD_VAR 0 7
44364: PPUSH
44365: LD_VAR 0 7
44369: PPUSH
44370: LD_VAR 0 6
44374: PPUSH
44375: CALL_OW 1
44379: ST_TO_ADDR
// for i = s_arr downto 2 do
44380: LD_ADDR_VAR 0 5
44384: PUSH
44385: DOUBLE
44386: LD_VAR 0 7
44390: INC
44391: ST_TO_ADDR
44392: LD_INT 2
44394: PUSH
44395: FOR_DOWNTO
44396: IFFALSE 44480
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44398: LD_ADDR_VAR 0 6
44402: PUSH
44403: LD_VAR 0 7
44407: PUSH
44408: LD_VAR 0 5
44412: PUSH
44413: LD_INT 1
44415: MINUS
44416: ARRAY
44417: PPUSH
44418: LD_VAR 0 2
44422: PUSH
44423: LD_VAR 0 5
44427: PUSH
44428: LD_INT 1
44430: MINUS
44431: ARRAY
44432: PPUSH
44433: LD_VAR 0 7
44437: PUSH
44438: LD_VAR 0 5
44442: ARRAY
44443: PPUSH
44444: CALL_OW 1
44448: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44449: LD_ADDR_VAR 0 7
44453: PUSH
44454: LD_VAR 0 7
44458: PPUSH
44459: LD_VAR 0 5
44463: PUSH
44464: LD_INT 1
44466: MINUS
44467: PPUSH
44468: LD_VAR 0 6
44472: PPUSH
44473: CALL_OW 1
44477: ST_TO_ADDR
// end ;
44478: GO 44395
44480: POP
44481: POP
// result := s_arr [ 1 ] ;
44482: LD_ADDR_VAR 0 4
44486: PUSH
44487: LD_VAR 0 7
44491: PUSH
44492: LD_INT 1
44494: ARRAY
44495: ST_TO_ADDR
// end ; end ;
44496: LD_VAR 0 4
44500: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44501: LD_INT 0
44503: PPUSH
44504: PPUSH
// if not list then
44505: LD_VAR 0 1
44509: NOT
44510: IFFALSE 44514
// exit ;
44512: GO 44605
// i := list [ pos1 ] ;
44514: LD_ADDR_VAR 0 5
44518: PUSH
44519: LD_VAR 0 1
44523: PUSH
44524: LD_VAR 0 2
44528: ARRAY
44529: ST_TO_ADDR
// if not i then
44530: LD_VAR 0 5
44534: NOT
44535: IFFALSE 44539
// exit ;
44537: GO 44605
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44539: LD_ADDR_VAR 0 1
44543: PUSH
44544: LD_VAR 0 1
44548: PPUSH
44549: LD_VAR 0 2
44553: PPUSH
44554: LD_VAR 0 1
44558: PUSH
44559: LD_VAR 0 3
44563: ARRAY
44564: PPUSH
44565: CALL_OW 1
44569: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44570: LD_ADDR_VAR 0 1
44574: PUSH
44575: LD_VAR 0 1
44579: PPUSH
44580: LD_VAR 0 3
44584: PPUSH
44585: LD_VAR 0 5
44589: PPUSH
44590: CALL_OW 1
44594: ST_TO_ADDR
// result := list ;
44595: LD_ADDR_VAR 0 4
44599: PUSH
44600: LD_VAR 0 1
44604: ST_TO_ADDR
// end ;
44605: LD_VAR 0 4
44609: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44610: LD_INT 0
44612: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44613: LD_ADDR_VAR 0 5
44617: PUSH
44618: LD_VAR 0 1
44622: PPUSH
44623: CALL_OW 250
44627: PPUSH
44628: LD_VAR 0 1
44632: PPUSH
44633: CALL_OW 251
44637: PPUSH
44638: LD_VAR 0 2
44642: PPUSH
44643: LD_VAR 0 3
44647: PPUSH
44648: LD_VAR 0 4
44652: PPUSH
44653: CALL 45031 0 5
44657: ST_TO_ADDR
// end ;
44658: LD_VAR 0 5
44662: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
44663: LD_INT 0
44665: PPUSH
44666: PPUSH
44667: PPUSH
44668: PPUSH
// if not list or not unit then
44669: LD_VAR 0 2
44673: NOT
44674: PUSH
44675: LD_VAR 0 1
44679: NOT
44680: OR
44681: IFFALSE 44685
// exit ;
44683: GO 45026
// result := [ ] ;
44685: LD_ADDR_VAR 0 5
44689: PUSH
44690: EMPTY
44691: ST_TO_ADDR
// for i in list do
44692: LD_ADDR_VAR 0 6
44696: PUSH
44697: LD_VAR 0 2
44701: PUSH
44702: FOR_IN
44703: IFFALSE 44921
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44705: LD_ADDR_VAR 0 8
44709: PUSH
44710: LD_VAR 0 1
44714: PPUSH
44715: LD_VAR 0 6
44719: PUSH
44720: LD_INT 1
44722: ARRAY
44723: PPUSH
44724: LD_VAR 0 6
44728: PUSH
44729: LD_INT 2
44731: ARRAY
44732: PPUSH
44733: CALL_OW 297
44737: ST_TO_ADDR
// if not Count ( result ) then
44738: LD_VAR 0 5
44742: PPUSH
44743: CALL 41315 0 1
44747: NOT
44748: IFFALSE 44781
// begin result := Join ( result , [ i , tmp ] ) ;
44750: LD_ADDR_VAR 0 5
44754: PUSH
44755: LD_VAR 0 5
44759: PPUSH
44760: LD_VAR 0 6
44764: PUSH
44765: LD_VAR 0 8
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PPUSH
44774: CALL 76924 0 2
44778: ST_TO_ADDR
// continue ;
44779: GO 44702
// end ; if result [ result ] [ 2 ] <= tmp then
44781: LD_VAR 0 5
44785: PUSH
44786: LD_VAR 0 5
44790: ARRAY
44791: PUSH
44792: LD_INT 2
44794: ARRAY
44795: PUSH
44796: LD_VAR 0 8
44800: LESSEQUAL
44801: IFFALSE 44834
// result := Join ( result , [ i , tmp ] ) else
44803: LD_ADDR_VAR 0 5
44807: PUSH
44808: LD_VAR 0 5
44812: PPUSH
44813: LD_VAR 0 6
44817: PUSH
44818: LD_VAR 0 8
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PPUSH
44827: CALL 76924 0 2
44831: ST_TO_ADDR
44832: GO 44919
// begin for j := 1 to Count ( result ) do
44834: LD_ADDR_VAR 0 7
44838: PUSH
44839: DOUBLE
44840: LD_INT 1
44842: DEC
44843: ST_TO_ADDR
44844: LD_VAR 0 5
44848: PPUSH
44849: CALL 41315 0 1
44853: PUSH
44854: FOR_TO
44855: IFFALSE 44917
// begin if tmp < result [ j ] [ 2 ] then
44857: LD_VAR 0 8
44861: PUSH
44862: LD_VAR 0 5
44866: PUSH
44867: LD_VAR 0 7
44871: ARRAY
44872: PUSH
44873: LD_INT 2
44875: ARRAY
44876: LESS
44877: IFFALSE 44915
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44879: LD_ADDR_VAR 0 5
44883: PUSH
44884: LD_VAR 0 5
44888: PPUSH
44889: LD_VAR 0 7
44893: PPUSH
44894: LD_VAR 0 6
44898: PUSH
44899: LD_VAR 0 8
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PPUSH
44908: CALL_OW 2
44912: ST_TO_ADDR
// break ;
44913: GO 44917
// end ; end ;
44915: GO 44854
44917: POP
44918: POP
// end ; end ;
44919: GO 44702
44921: POP
44922: POP
// if result and not asc then
44923: LD_VAR 0 5
44927: PUSH
44928: LD_VAR 0 3
44932: NOT
44933: AND
44934: IFFALSE 44951
// result := ReverseArray ( result ) ;
44936: LD_ADDR_VAR 0 5
44940: PUSH
44941: LD_VAR 0 5
44945: PPUSH
44946: CALL 72191 0 1
44950: ST_TO_ADDR
// tmp := [ ] ;
44951: LD_ADDR_VAR 0 8
44955: PUSH
44956: EMPTY
44957: ST_TO_ADDR
// if mode then
44958: LD_VAR 0 4
44962: IFFALSE 45026
// begin for i := 1 to result do
44964: LD_ADDR_VAR 0 6
44968: PUSH
44969: DOUBLE
44970: LD_INT 1
44972: DEC
44973: ST_TO_ADDR
44974: LD_VAR 0 5
44978: PUSH
44979: FOR_TO
44980: IFFALSE 45014
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
44982: LD_ADDR_VAR 0 8
44986: PUSH
44987: LD_VAR 0 8
44991: PPUSH
44992: LD_VAR 0 5
44996: PUSH
44997: LD_VAR 0 6
45001: ARRAY
45002: PUSH
45003: LD_INT 1
45005: ARRAY
45006: PPUSH
45007: CALL 76924 0 2
45011: ST_TO_ADDR
45012: GO 44979
45014: POP
45015: POP
// result := tmp ;
45016: LD_ADDR_VAR 0 5
45020: PUSH
45021: LD_VAR 0 8
45025: ST_TO_ADDR
// end ; end ;
45026: LD_VAR 0 5
45030: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45031: LD_INT 0
45033: PPUSH
45034: PPUSH
45035: PPUSH
45036: PPUSH
// if not list then
45037: LD_VAR 0 3
45041: NOT
45042: IFFALSE 45046
// exit ;
45044: GO 45434
// result := [ ] ;
45046: LD_ADDR_VAR 0 6
45050: PUSH
45051: EMPTY
45052: ST_TO_ADDR
// for i in list do
45053: LD_ADDR_VAR 0 7
45057: PUSH
45058: LD_VAR 0 3
45062: PUSH
45063: FOR_IN
45064: IFFALSE 45266
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45066: LD_ADDR_VAR 0 9
45070: PUSH
45071: LD_VAR 0 7
45075: PPUSH
45076: LD_VAR 0 1
45080: PPUSH
45081: LD_VAR 0 2
45085: PPUSH
45086: CALL_OW 297
45090: ST_TO_ADDR
// if not result then
45091: LD_VAR 0 6
45095: NOT
45096: IFFALSE 45122
// result := [ [ i , tmp ] ] else
45098: LD_ADDR_VAR 0 6
45102: PUSH
45103: LD_VAR 0 7
45107: PUSH
45108: LD_VAR 0 9
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: EMPTY
45118: LIST
45119: ST_TO_ADDR
45120: GO 45264
// begin if result [ result ] [ 2 ] <= tmp then
45122: LD_VAR 0 6
45126: PUSH
45127: LD_VAR 0 6
45131: ARRAY
45132: PUSH
45133: LD_INT 2
45135: ARRAY
45136: PUSH
45137: LD_VAR 0 9
45141: LESSEQUAL
45142: IFFALSE 45184
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45144: LD_ADDR_VAR 0 6
45148: PUSH
45149: LD_VAR 0 6
45153: PPUSH
45154: LD_VAR 0 6
45158: PUSH
45159: LD_INT 1
45161: PLUS
45162: PPUSH
45163: LD_VAR 0 7
45167: PUSH
45168: LD_VAR 0 9
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PPUSH
45177: CALL_OW 2
45181: ST_TO_ADDR
45182: GO 45264
// for j := 1 to result do
45184: LD_ADDR_VAR 0 8
45188: PUSH
45189: DOUBLE
45190: LD_INT 1
45192: DEC
45193: ST_TO_ADDR
45194: LD_VAR 0 6
45198: PUSH
45199: FOR_TO
45200: IFFALSE 45262
// begin if tmp < result [ j ] [ 2 ] then
45202: LD_VAR 0 9
45206: PUSH
45207: LD_VAR 0 6
45211: PUSH
45212: LD_VAR 0 8
45216: ARRAY
45217: PUSH
45218: LD_INT 2
45220: ARRAY
45221: LESS
45222: IFFALSE 45260
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45224: LD_ADDR_VAR 0 6
45228: PUSH
45229: LD_VAR 0 6
45233: PPUSH
45234: LD_VAR 0 8
45238: PPUSH
45239: LD_VAR 0 7
45243: PUSH
45244: LD_VAR 0 9
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PPUSH
45253: CALL_OW 2
45257: ST_TO_ADDR
// break ;
45258: GO 45262
// end ; end ;
45260: GO 45199
45262: POP
45263: POP
// end ; end ;
45264: GO 45063
45266: POP
45267: POP
// if result and not asc then
45268: LD_VAR 0 6
45272: PUSH
45273: LD_VAR 0 4
45277: NOT
45278: AND
45279: IFFALSE 45354
// begin tmp := result ;
45281: LD_ADDR_VAR 0 9
45285: PUSH
45286: LD_VAR 0 6
45290: ST_TO_ADDR
// for i = tmp downto 1 do
45291: LD_ADDR_VAR 0 7
45295: PUSH
45296: DOUBLE
45297: LD_VAR 0 9
45301: INC
45302: ST_TO_ADDR
45303: LD_INT 1
45305: PUSH
45306: FOR_DOWNTO
45307: IFFALSE 45352
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45309: LD_ADDR_VAR 0 6
45313: PUSH
45314: LD_VAR 0 6
45318: PPUSH
45319: LD_VAR 0 9
45323: PUSH
45324: LD_VAR 0 7
45328: MINUS
45329: PUSH
45330: LD_INT 1
45332: PLUS
45333: PPUSH
45334: LD_VAR 0 9
45338: PUSH
45339: LD_VAR 0 7
45343: ARRAY
45344: PPUSH
45345: CALL_OW 1
45349: ST_TO_ADDR
45350: GO 45306
45352: POP
45353: POP
// end ; tmp := [ ] ;
45354: LD_ADDR_VAR 0 9
45358: PUSH
45359: EMPTY
45360: ST_TO_ADDR
// if mode then
45361: LD_VAR 0 5
45365: IFFALSE 45434
// begin for i = 1 to result do
45367: LD_ADDR_VAR 0 7
45371: PUSH
45372: DOUBLE
45373: LD_INT 1
45375: DEC
45376: ST_TO_ADDR
45377: LD_VAR 0 6
45381: PUSH
45382: FOR_TO
45383: IFFALSE 45422
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45385: LD_ADDR_VAR 0 9
45389: PUSH
45390: LD_VAR 0 9
45394: PPUSH
45395: LD_VAR 0 7
45399: PPUSH
45400: LD_VAR 0 6
45404: PUSH
45405: LD_VAR 0 7
45409: ARRAY
45410: PUSH
45411: LD_INT 1
45413: ARRAY
45414: PPUSH
45415: CALL_OW 1
45419: ST_TO_ADDR
45420: GO 45382
45422: POP
45423: POP
// result := tmp ;
45424: LD_ADDR_VAR 0 6
45428: PUSH
45429: LD_VAR 0 9
45433: ST_TO_ADDR
// end ; end ;
45434: LD_VAR 0 6
45438: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45439: LD_INT 0
45441: PPUSH
45442: PPUSH
45443: PPUSH
45444: PPUSH
45445: PPUSH
45446: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45447: LD_ADDR_VAR 0 5
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: EMPTY
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: ST_TO_ADDR
// if not x or not y then
45469: LD_VAR 0 2
45473: NOT
45474: PUSH
45475: LD_VAR 0 3
45479: NOT
45480: OR
45481: IFFALSE 45485
// exit ;
45483: GO 47135
// if not range then
45485: LD_VAR 0 4
45489: NOT
45490: IFFALSE 45500
// range := 10 ;
45492: LD_ADDR_VAR 0 4
45496: PUSH
45497: LD_INT 10
45499: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45500: LD_ADDR_VAR 0 8
45504: PUSH
45505: LD_INT 81
45507: PUSH
45508: LD_VAR 0 1
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 92
45519: PUSH
45520: LD_VAR 0 2
45524: PUSH
45525: LD_VAR 0 3
45529: PUSH
45530: LD_VAR 0 4
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 3
45543: PUSH
45544: LD_INT 21
45546: PUSH
45547: LD_INT 3
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: LIST
45562: PPUSH
45563: CALL_OW 69
45567: ST_TO_ADDR
// if not tmp then
45568: LD_VAR 0 8
45572: NOT
45573: IFFALSE 45577
// exit ;
45575: GO 47135
// for i in tmp do
45577: LD_ADDR_VAR 0 6
45581: PUSH
45582: LD_VAR 0 8
45586: PUSH
45587: FOR_IN
45588: IFFALSE 47110
// begin points := [ 0 , 0 , 0 ] ;
45590: LD_ADDR_VAR 0 9
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: LIST
45608: ST_TO_ADDR
// bpoints := 1 ;
45609: LD_ADDR_VAR 0 10
45613: PUSH
45614: LD_INT 1
45616: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45617: LD_VAR 0 6
45621: PPUSH
45622: CALL_OW 247
45626: PUSH
45627: LD_INT 1
45629: DOUBLE
45630: EQUAL
45631: IFTRUE 45635
45633: GO 46213
45635: POP
// begin if GetClass ( i ) = 1 then
45636: LD_VAR 0 6
45640: PPUSH
45641: CALL_OW 257
45645: PUSH
45646: LD_INT 1
45648: EQUAL
45649: IFFALSE 45670
// points := [ 10 , 5 , 3 ] ;
45651: LD_ADDR_VAR 0 9
45655: PUSH
45656: LD_INT 10
45658: PUSH
45659: LD_INT 5
45661: PUSH
45662: LD_INT 3
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: LIST
45669: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45670: LD_VAR 0 6
45674: PPUSH
45675: CALL_OW 257
45679: PUSH
45680: LD_INT 2
45682: PUSH
45683: LD_INT 3
45685: PUSH
45686: LD_INT 4
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: LIST
45693: IN
45694: IFFALSE 45715
// points := [ 3 , 2 , 1 ] ;
45696: LD_ADDR_VAR 0 9
45700: PUSH
45701: LD_INT 3
45703: PUSH
45704: LD_INT 2
45706: PUSH
45707: LD_INT 1
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: LIST
45714: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45715: LD_VAR 0 6
45719: PPUSH
45720: CALL_OW 257
45724: PUSH
45725: LD_INT 5
45727: EQUAL
45728: IFFALSE 45749
// points := [ 130 , 5 , 2 ] ;
45730: LD_ADDR_VAR 0 9
45734: PUSH
45735: LD_INT 130
45737: PUSH
45738: LD_INT 5
45740: PUSH
45741: LD_INT 2
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: LIST
45748: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45749: LD_VAR 0 6
45753: PPUSH
45754: CALL_OW 257
45758: PUSH
45759: LD_INT 8
45761: EQUAL
45762: IFFALSE 45783
// points := [ 35 , 35 , 30 ] ;
45764: LD_ADDR_VAR 0 9
45768: PUSH
45769: LD_INT 35
45771: PUSH
45772: LD_INT 35
45774: PUSH
45775: LD_INT 30
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: LIST
45782: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45783: LD_VAR 0 6
45787: PPUSH
45788: CALL_OW 257
45792: PUSH
45793: LD_INT 9
45795: EQUAL
45796: IFFALSE 45817
// points := [ 20 , 55 , 40 ] ;
45798: LD_ADDR_VAR 0 9
45802: PUSH
45803: LD_INT 20
45805: PUSH
45806: LD_INT 55
45808: PUSH
45809: LD_INT 40
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: LIST
45816: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45817: LD_VAR 0 6
45821: PPUSH
45822: CALL_OW 257
45826: PUSH
45827: LD_INT 12
45829: PUSH
45830: LD_INT 16
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: IN
45837: IFFALSE 45858
// points := [ 5 , 3 , 2 ] ;
45839: LD_ADDR_VAR 0 9
45843: PUSH
45844: LD_INT 5
45846: PUSH
45847: LD_INT 3
45849: PUSH
45850: LD_INT 2
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: LIST
45857: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45858: LD_VAR 0 6
45862: PPUSH
45863: CALL_OW 257
45867: PUSH
45868: LD_INT 17
45870: EQUAL
45871: IFFALSE 45892
// points := [ 100 , 50 , 75 ] ;
45873: LD_ADDR_VAR 0 9
45877: PUSH
45878: LD_INT 100
45880: PUSH
45881: LD_INT 50
45883: PUSH
45884: LD_INT 75
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: LIST
45891: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45892: LD_VAR 0 6
45896: PPUSH
45897: CALL_OW 257
45901: PUSH
45902: LD_INT 15
45904: EQUAL
45905: IFFALSE 45926
// points := [ 10 , 5 , 3 ] ;
45907: LD_ADDR_VAR 0 9
45911: PUSH
45912: LD_INT 10
45914: PUSH
45915: LD_INT 5
45917: PUSH
45918: LD_INT 3
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: LIST
45925: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45926: LD_VAR 0 6
45930: PPUSH
45931: CALL_OW 257
45935: PUSH
45936: LD_INT 14
45938: EQUAL
45939: IFFALSE 45960
// points := [ 10 , 0 , 0 ] ;
45941: LD_ADDR_VAR 0 9
45945: PUSH
45946: LD_INT 10
45948: PUSH
45949: LD_INT 0
45951: PUSH
45952: LD_INT 0
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: LIST
45959: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45960: LD_VAR 0 6
45964: PPUSH
45965: CALL_OW 257
45969: PUSH
45970: LD_INT 11
45972: EQUAL
45973: IFFALSE 45994
// points := [ 30 , 10 , 5 ] ;
45975: LD_ADDR_VAR 0 9
45979: PUSH
45980: LD_INT 30
45982: PUSH
45983: LD_INT 10
45985: PUSH
45986: LD_INT 5
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: LIST
45993: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45994: LD_VAR 0 1
45998: PPUSH
45999: LD_INT 5
46001: PPUSH
46002: CALL_OW 321
46006: PUSH
46007: LD_INT 2
46009: EQUAL
46010: IFFALSE 46027
// bpoints := bpoints * 1.8 ;
46012: LD_ADDR_VAR 0 10
46016: PUSH
46017: LD_VAR 0 10
46021: PUSH
46022: LD_REAL  1.80000000000000E+0000
46025: MUL
46026: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46027: LD_VAR 0 6
46031: PPUSH
46032: CALL_OW 257
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: LD_INT 2
46042: PUSH
46043: LD_INT 3
46045: PUSH
46046: LD_INT 4
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: IN
46055: PUSH
46056: LD_VAR 0 1
46060: PPUSH
46061: LD_INT 51
46063: PPUSH
46064: CALL_OW 321
46068: PUSH
46069: LD_INT 2
46071: EQUAL
46072: AND
46073: IFFALSE 46090
// bpoints := bpoints * 1.2 ;
46075: LD_ADDR_VAR 0 10
46079: PUSH
46080: LD_VAR 0 10
46084: PUSH
46085: LD_REAL  1.20000000000000E+0000
46088: MUL
46089: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46090: LD_VAR 0 6
46094: PPUSH
46095: CALL_OW 257
46099: PUSH
46100: LD_INT 5
46102: PUSH
46103: LD_INT 7
46105: PUSH
46106: LD_INT 9
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: LIST
46113: IN
46114: PUSH
46115: LD_VAR 0 1
46119: PPUSH
46120: LD_INT 52
46122: PPUSH
46123: CALL_OW 321
46127: PUSH
46128: LD_INT 2
46130: EQUAL
46131: AND
46132: IFFALSE 46149
// bpoints := bpoints * 1.5 ;
46134: LD_ADDR_VAR 0 10
46138: PUSH
46139: LD_VAR 0 10
46143: PUSH
46144: LD_REAL  1.50000000000000E+0000
46147: MUL
46148: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46149: LD_VAR 0 1
46153: PPUSH
46154: LD_INT 66
46156: PPUSH
46157: CALL_OW 321
46161: PUSH
46162: LD_INT 2
46164: EQUAL
46165: IFFALSE 46182
// bpoints := bpoints * 1.1 ;
46167: LD_ADDR_VAR 0 10
46171: PUSH
46172: LD_VAR 0 10
46176: PUSH
46177: LD_REAL  1.10000000000000E+0000
46180: MUL
46181: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46182: LD_ADDR_VAR 0 10
46186: PUSH
46187: LD_VAR 0 10
46191: PUSH
46192: LD_VAR 0 6
46196: PPUSH
46197: LD_INT 1
46199: PPUSH
46200: CALL_OW 259
46204: PUSH
46205: LD_REAL  1.15000000000000E+0000
46208: MUL
46209: MUL
46210: ST_TO_ADDR
// end ; unit_vehicle :
46211: GO 47039
46213: LD_INT 2
46215: DOUBLE
46216: EQUAL
46217: IFTRUE 46221
46219: GO 47027
46221: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46222: LD_VAR 0 6
46226: PPUSH
46227: CALL_OW 264
46231: PUSH
46232: LD_INT 2
46234: PUSH
46235: LD_INT 42
46237: PUSH
46238: LD_INT 24
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: LIST
46245: IN
46246: IFFALSE 46267
// points := [ 25 , 5 , 3 ] ;
46248: LD_ADDR_VAR 0 9
46252: PUSH
46253: LD_INT 25
46255: PUSH
46256: LD_INT 5
46258: PUSH
46259: LD_INT 3
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: LIST
46266: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46267: LD_VAR 0 6
46271: PPUSH
46272: CALL_OW 264
46276: PUSH
46277: LD_INT 4
46279: PUSH
46280: LD_INT 43
46282: PUSH
46283: LD_INT 25
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: LIST
46290: IN
46291: IFFALSE 46312
// points := [ 40 , 15 , 5 ] ;
46293: LD_ADDR_VAR 0 9
46297: PUSH
46298: LD_INT 40
46300: PUSH
46301: LD_INT 15
46303: PUSH
46304: LD_INT 5
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: LIST
46311: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46312: LD_VAR 0 6
46316: PPUSH
46317: CALL_OW 264
46321: PUSH
46322: LD_INT 3
46324: PUSH
46325: LD_INT 23
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: IN
46332: IFFALSE 46353
// points := [ 7 , 25 , 8 ] ;
46334: LD_ADDR_VAR 0 9
46338: PUSH
46339: LD_INT 7
46341: PUSH
46342: LD_INT 25
46344: PUSH
46345: LD_INT 8
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: LIST
46352: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46353: LD_VAR 0 6
46357: PPUSH
46358: CALL_OW 264
46362: PUSH
46363: LD_INT 5
46365: PUSH
46366: LD_INT 27
46368: PUSH
46369: LD_INT 44
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: LIST
46376: IN
46377: IFFALSE 46398
// points := [ 14 , 50 , 16 ] ;
46379: LD_ADDR_VAR 0 9
46383: PUSH
46384: LD_INT 14
46386: PUSH
46387: LD_INT 50
46389: PUSH
46390: LD_INT 16
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: LIST
46397: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46398: LD_VAR 0 6
46402: PPUSH
46403: CALL_OW 264
46407: PUSH
46408: LD_INT 6
46410: PUSH
46411: LD_INT 46
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: IN
46418: IFFALSE 46439
// points := [ 32 , 120 , 70 ] ;
46420: LD_ADDR_VAR 0 9
46424: PUSH
46425: LD_INT 32
46427: PUSH
46428: LD_INT 120
46430: PUSH
46431: LD_INT 70
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: LIST
46438: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46439: LD_VAR 0 6
46443: PPUSH
46444: CALL_OW 264
46448: PUSH
46449: LD_INT 7
46451: PUSH
46452: LD_INT 28
46454: PUSH
46455: LD_INT 45
46457: PUSH
46458: LD_INT 92
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: IN
46467: IFFALSE 46488
// points := [ 35 , 20 , 45 ] ;
46469: LD_ADDR_VAR 0 9
46473: PUSH
46474: LD_INT 35
46476: PUSH
46477: LD_INT 20
46479: PUSH
46480: LD_INT 45
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: LIST
46487: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46488: LD_VAR 0 6
46492: PPUSH
46493: CALL_OW 264
46497: PUSH
46498: LD_INT 47
46500: PUSH
46501: EMPTY
46502: LIST
46503: IN
46504: IFFALSE 46525
// points := [ 67 , 45 , 75 ] ;
46506: LD_ADDR_VAR 0 9
46510: PUSH
46511: LD_INT 67
46513: PUSH
46514: LD_INT 45
46516: PUSH
46517: LD_INT 75
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: LIST
46524: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46525: LD_VAR 0 6
46529: PPUSH
46530: CALL_OW 264
46534: PUSH
46535: LD_INT 26
46537: PUSH
46538: EMPTY
46539: LIST
46540: IN
46541: IFFALSE 46562
// points := [ 120 , 30 , 80 ] ;
46543: LD_ADDR_VAR 0 9
46547: PUSH
46548: LD_INT 120
46550: PUSH
46551: LD_INT 30
46553: PUSH
46554: LD_INT 80
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: LIST
46561: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46562: LD_VAR 0 6
46566: PPUSH
46567: CALL_OW 264
46571: PUSH
46572: LD_INT 22
46574: PUSH
46575: EMPTY
46576: LIST
46577: IN
46578: IFFALSE 46599
// points := [ 40 , 1 , 1 ] ;
46580: LD_ADDR_VAR 0 9
46584: PUSH
46585: LD_INT 40
46587: PUSH
46588: LD_INT 1
46590: PUSH
46591: LD_INT 1
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: LIST
46598: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46599: LD_VAR 0 6
46603: PPUSH
46604: CALL_OW 264
46608: PUSH
46609: LD_INT 29
46611: PUSH
46612: EMPTY
46613: LIST
46614: IN
46615: IFFALSE 46636
// points := [ 70 , 200 , 400 ] ;
46617: LD_ADDR_VAR 0 9
46621: PUSH
46622: LD_INT 70
46624: PUSH
46625: LD_INT 200
46627: PUSH
46628: LD_INT 400
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: LIST
46635: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46636: LD_VAR 0 6
46640: PPUSH
46641: CALL_OW 264
46645: PUSH
46646: LD_INT 14
46648: PUSH
46649: LD_INT 53
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: IN
46656: IFFALSE 46677
// points := [ 40 , 10 , 20 ] ;
46658: LD_ADDR_VAR 0 9
46662: PUSH
46663: LD_INT 40
46665: PUSH
46666: LD_INT 10
46668: PUSH
46669: LD_INT 20
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: LIST
46676: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46677: LD_VAR 0 6
46681: PPUSH
46682: CALL_OW 264
46686: PUSH
46687: LD_INT 9
46689: PUSH
46690: EMPTY
46691: LIST
46692: IN
46693: IFFALSE 46714
// points := [ 5 , 70 , 20 ] ;
46695: LD_ADDR_VAR 0 9
46699: PUSH
46700: LD_INT 5
46702: PUSH
46703: LD_INT 70
46705: PUSH
46706: LD_INT 20
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: LIST
46713: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46714: LD_VAR 0 6
46718: PPUSH
46719: CALL_OW 264
46723: PUSH
46724: LD_INT 10
46726: PUSH
46727: EMPTY
46728: LIST
46729: IN
46730: IFFALSE 46751
// points := [ 35 , 110 , 70 ] ;
46732: LD_ADDR_VAR 0 9
46736: PUSH
46737: LD_INT 35
46739: PUSH
46740: LD_INT 110
46742: PUSH
46743: LD_INT 70
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: LIST
46750: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46751: LD_VAR 0 6
46755: PPUSH
46756: CALL_OW 265
46760: PUSH
46761: LD_INT 25
46763: EQUAL
46764: IFFALSE 46785
// points := [ 80 , 65 , 100 ] ;
46766: LD_ADDR_VAR 0 9
46770: PUSH
46771: LD_INT 80
46773: PUSH
46774: LD_INT 65
46776: PUSH
46777: LD_INT 100
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: LIST
46784: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46785: LD_VAR 0 6
46789: PPUSH
46790: CALL_OW 263
46794: PUSH
46795: LD_INT 1
46797: EQUAL
46798: IFFALSE 46833
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46800: LD_ADDR_VAR 0 10
46804: PUSH
46805: LD_VAR 0 10
46809: PUSH
46810: LD_VAR 0 6
46814: PPUSH
46815: CALL_OW 311
46819: PPUSH
46820: LD_INT 3
46822: PPUSH
46823: CALL_OW 259
46827: PUSH
46828: LD_INT 4
46830: MUL
46831: MUL
46832: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46833: LD_VAR 0 6
46837: PPUSH
46838: CALL_OW 263
46842: PUSH
46843: LD_INT 2
46845: EQUAL
46846: IFFALSE 46897
// begin j := IsControledBy ( i ) ;
46848: LD_ADDR_VAR 0 7
46852: PUSH
46853: LD_VAR 0 6
46857: PPUSH
46858: CALL_OW 312
46862: ST_TO_ADDR
// if j then
46863: LD_VAR 0 7
46867: IFFALSE 46897
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46869: LD_ADDR_VAR 0 10
46873: PUSH
46874: LD_VAR 0 10
46878: PUSH
46879: LD_VAR 0 7
46883: PPUSH
46884: LD_INT 3
46886: PPUSH
46887: CALL_OW 259
46891: PUSH
46892: LD_INT 3
46894: MUL
46895: MUL
46896: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46897: LD_VAR 0 6
46901: PPUSH
46902: CALL_OW 264
46906: PUSH
46907: LD_INT 5
46909: PUSH
46910: LD_INT 6
46912: PUSH
46913: LD_INT 46
46915: PUSH
46916: LD_INT 44
46918: PUSH
46919: LD_INT 47
46921: PUSH
46922: LD_INT 45
46924: PUSH
46925: LD_INT 28
46927: PUSH
46928: LD_INT 7
46930: PUSH
46931: LD_INT 27
46933: PUSH
46934: LD_INT 29
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: IN
46949: PUSH
46950: LD_VAR 0 1
46954: PPUSH
46955: LD_INT 52
46957: PPUSH
46958: CALL_OW 321
46962: PUSH
46963: LD_INT 2
46965: EQUAL
46966: AND
46967: IFFALSE 46984
// bpoints := bpoints * 1.2 ;
46969: LD_ADDR_VAR 0 10
46973: PUSH
46974: LD_VAR 0 10
46978: PUSH
46979: LD_REAL  1.20000000000000E+0000
46982: MUL
46983: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46984: LD_VAR 0 6
46988: PPUSH
46989: CALL_OW 264
46993: PUSH
46994: LD_INT 6
46996: PUSH
46997: LD_INT 46
46999: PUSH
47000: LD_INT 47
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: LIST
47007: IN
47008: IFFALSE 47025
// bpoints := bpoints * 1.2 ;
47010: LD_ADDR_VAR 0 10
47014: PUSH
47015: LD_VAR 0 10
47019: PUSH
47020: LD_REAL  1.20000000000000E+0000
47023: MUL
47024: ST_TO_ADDR
// end ; unit_building :
47025: GO 47039
47027: LD_INT 3
47029: DOUBLE
47030: EQUAL
47031: IFTRUE 47035
47033: GO 47038
47035: POP
// ; end ;
47036: GO 47039
47038: POP
// for j = 1 to 3 do
47039: LD_ADDR_VAR 0 7
47043: PUSH
47044: DOUBLE
47045: LD_INT 1
47047: DEC
47048: ST_TO_ADDR
47049: LD_INT 3
47051: PUSH
47052: FOR_TO
47053: IFFALSE 47106
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47055: LD_ADDR_VAR 0 5
47059: PUSH
47060: LD_VAR 0 5
47064: PPUSH
47065: LD_VAR 0 7
47069: PPUSH
47070: LD_VAR 0 5
47074: PUSH
47075: LD_VAR 0 7
47079: ARRAY
47080: PUSH
47081: LD_VAR 0 9
47085: PUSH
47086: LD_VAR 0 7
47090: ARRAY
47091: PUSH
47092: LD_VAR 0 10
47096: MUL
47097: PLUS
47098: PPUSH
47099: CALL_OW 1
47103: ST_TO_ADDR
47104: GO 47052
47106: POP
47107: POP
// end ;
47108: GO 45587
47110: POP
47111: POP
// result := Replace ( result , 4 , tmp ) ;
47112: LD_ADDR_VAR 0 5
47116: PUSH
47117: LD_VAR 0 5
47121: PPUSH
47122: LD_INT 4
47124: PPUSH
47125: LD_VAR 0 8
47129: PPUSH
47130: CALL_OW 1
47134: ST_TO_ADDR
// end ;
47135: LD_VAR 0 5
47139: RET
// export function DangerAtRange ( unit , range ) ; begin
47140: LD_INT 0
47142: PPUSH
// if not unit then
47143: LD_VAR 0 1
47147: NOT
47148: IFFALSE 47152
// exit ;
47150: GO 47197
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47152: LD_ADDR_VAR 0 3
47156: PUSH
47157: LD_VAR 0 1
47161: PPUSH
47162: CALL_OW 255
47166: PPUSH
47167: LD_VAR 0 1
47171: PPUSH
47172: CALL_OW 250
47176: PPUSH
47177: LD_VAR 0 1
47181: PPUSH
47182: CALL_OW 251
47186: PPUSH
47187: LD_VAR 0 2
47191: PPUSH
47192: CALL 45439 0 4
47196: ST_TO_ADDR
// end ;
47197: LD_VAR 0 3
47201: RET
// export function DangerInArea ( side , area ) ; begin
47202: LD_INT 0
47204: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47205: LD_ADDR_VAR 0 3
47209: PUSH
47210: LD_VAR 0 2
47214: PPUSH
47215: LD_INT 81
47217: PUSH
47218: LD_VAR 0 1
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PPUSH
47227: CALL_OW 70
47231: ST_TO_ADDR
// end ;
47232: LD_VAR 0 3
47236: RET
// export function IsExtension ( b ) ; begin
47237: LD_INT 0
47239: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47240: LD_ADDR_VAR 0 2
47244: PUSH
47245: LD_VAR 0 1
47249: PUSH
47250: LD_INT 23
47252: PUSH
47253: LD_INT 20
47255: PUSH
47256: LD_INT 22
47258: PUSH
47259: LD_INT 17
47261: PUSH
47262: LD_INT 24
47264: PUSH
47265: LD_INT 21
47267: PUSH
47268: LD_INT 19
47270: PUSH
47271: LD_INT 16
47273: PUSH
47274: LD_INT 25
47276: PUSH
47277: LD_INT 18
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: IN
47292: ST_TO_ADDR
// end ;
47293: LD_VAR 0 2
47297: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47298: LD_INT 0
47300: PPUSH
47301: PPUSH
47302: PPUSH
// result := [ ] ;
47303: LD_ADDR_VAR 0 4
47307: PUSH
47308: EMPTY
47309: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47310: LD_ADDR_VAR 0 5
47314: PUSH
47315: LD_VAR 0 2
47319: PPUSH
47320: LD_INT 21
47322: PUSH
47323: LD_INT 3
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PPUSH
47330: CALL_OW 70
47334: ST_TO_ADDR
// if not tmp then
47335: LD_VAR 0 5
47339: NOT
47340: IFFALSE 47344
// exit ;
47342: GO 47408
// if checkLink then
47344: LD_VAR 0 3
47348: IFFALSE 47398
// begin for i in tmp do
47350: LD_ADDR_VAR 0 6
47354: PUSH
47355: LD_VAR 0 5
47359: PUSH
47360: FOR_IN
47361: IFFALSE 47396
// if GetBase ( i ) <> base then
47363: LD_VAR 0 6
47367: PPUSH
47368: CALL_OW 274
47372: PUSH
47373: LD_VAR 0 1
47377: NONEQUAL
47378: IFFALSE 47394
// ComLinkToBase ( base , i ) ;
47380: LD_VAR 0 1
47384: PPUSH
47385: LD_VAR 0 6
47389: PPUSH
47390: CALL_OW 169
47394: GO 47360
47396: POP
47397: POP
// end ; result := tmp ;
47398: LD_ADDR_VAR 0 4
47402: PUSH
47403: LD_VAR 0 5
47407: ST_TO_ADDR
// end ;
47408: LD_VAR 0 4
47412: RET
// export function ComComplete ( units , b ) ; var i ; begin
47413: LD_INT 0
47415: PPUSH
47416: PPUSH
// if not units then
47417: LD_VAR 0 1
47421: NOT
47422: IFFALSE 47426
// exit ;
47424: GO 47516
// for i in units do
47426: LD_ADDR_VAR 0 4
47430: PUSH
47431: LD_VAR 0 1
47435: PUSH
47436: FOR_IN
47437: IFFALSE 47514
// if BuildingStatus ( b ) = bs_build then
47439: LD_VAR 0 2
47443: PPUSH
47444: CALL_OW 461
47448: PUSH
47449: LD_INT 1
47451: EQUAL
47452: IFFALSE 47512
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47454: LD_VAR 0 4
47458: PPUSH
47459: LD_STRING h
47461: PUSH
47462: LD_VAR 0 2
47466: PPUSH
47467: CALL_OW 250
47471: PUSH
47472: LD_VAR 0 2
47476: PPUSH
47477: CALL_OW 251
47481: PUSH
47482: LD_VAR 0 2
47486: PUSH
47487: LD_INT 0
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: LD_INT 0
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: PUSH
47505: EMPTY
47506: LIST
47507: PPUSH
47508: CALL_OW 446
47512: GO 47436
47514: POP
47515: POP
// end ;
47516: LD_VAR 0 3
47520: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47521: LD_INT 0
47523: PPUSH
47524: PPUSH
47525: PPUSH
47526: PPUSH
47527: PPUSH
47528: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47529: LD_VAR 0 1
47533: NOT
47534: PUSH
47535: LD_VAR 0 1
47539: PPUSH
47540: CALL_OW 263
47544: PUSH
47545: LD_INT 2
47547: NONEQUAL
47548: OR
47549: IFFALSE 47553
// exit ;
47551: GO 47869
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47553: LD_ADDR_VAR 0 6
47557: PUSH
47558: LD_INT 22
47560: PUSH
47561: LD_VAR 0 1
47565: PPUSH
47566: CALL_OW 255
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 2
47577: PUSH
47578: LD_INT 30
47580: PUSH
47581: LD_INT 36
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 34
47590: PUSH
47591: LD_INT 31
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: LIST
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PPUSH
47607: CALL_OW 69
47611: ST_TO_ADDR
// if not tmp then
47612: LD_VAR 0 6
47616: NOT
47617: IFFALSE 47621
// exit ;
47619: GO 47869
// result := [ ] ;
47621: LD_ADDR_VAR 0 2
47625: PUSH
47626: EMPTY
47627: ST_TO_ADDR
// for i in tmp do
47628: LD_ADDR_VAR 0 3
47632: PUSH
47633: LD_VAR 0 6
47637: PUSH
47638: FOR_IN
47639: IFFALSE 47710
// begin t := UnitsInside ( i ) ;
47641: LD_ADDR_VAR 0 4
47645: PUSH
47646: LD_VAR 0 3
47650: PPUSH
47651: CALL_OW 313
47655: ST_TO_ADDR
// if t then
47656: LD_VAR 0 4
47660: IFFALSE 47708
// for j in t do
47662: LD_ADDR_VAR 0 7
47666: PUSH
47667: LD_VAR 0 4
47671: PUSH
47672: FOR_IN
47673: IFFALSE 47706
// result := Replace ( result , result + 1 , j ) ;
47675: LD_ADDR_VAR 0 2
47679: PUSH
47680: LD_VAR 0 2
47684: PPUSH
47685: LD_VAR 0 2
47689: PUSH
47690: LD_INT 1
47692: PLUS
47693: PPUSH
47694: LD_VAR 0 7
47698: PPUSH
47699: CALL_OW 1
47703: ST_TO_ADDR
47704: GO 47672
47706: POP
47707: POP
// end ;
47708: GO 47638
47710: POP
47711: POP
// if not result then
47712: LD_VAR 0 2
47716: NOT
47717: IFFALSE 47721
// exit ;
47719: GO 47869
// mech := result [ 1 ] ;
47721: LD_ADDR_VAR 0 5
47725: PUSH
47726: LD_VAR 0 2
47730: PUSH
47731: LD_INT 1
47733: ARRAY
47734: ST_TO_ADDR
// if result > 1 then
47735: LD_VAR 0 2
47739: PUSH
47740: LD_INT 1
47742: GREATER
47743: IFFALSE 47855
// begin for i = 2 to result do
47745: LD_ADDR_VAR 0 3
47749: PUSH
47750: DOUBLE
47751: LD_INT 2
47753: DEC
47754: ST_TO_ADDR
47755: LD_VAR 0 2
47759: PUSH
47760: FOR_TO
47761: IFFALSE 47853
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47763: LD_ADDR_VAR 0 4
47767: PUSH
47768: LD_VAR 0 2
47772: PUSH
47773: LD_VAR 0 3
47777: ARRAY
47778: PPUSH
47779: LD_INT 3
47781: PPUSH
47782: CALL_OW 259
47786: PUSH
47787: LD_VAR 0 2
47791: PUSH
47792: LD_VAR 0 3
47796: ARRAY
47797: PPUSH
47798: CALL_OW 432
47802: MINUS
47803: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47804: LD_VAR 0 4
47808: PUSH
47809: LD_VAR 0 5
47813: PPUSH
47814: LD_INT 3
47816: PPUSH
47817: CALL_OW 259
47821: PUSH
47822: LD_VAR 0 5
47826: PPUSH
47827: CALL_OW 432
47831: MINUS
47832: GREATEREQUAL
47833: IFFALSE 47851
// mech := result [ i ] ;
47835: LD_ADDR_VAR 0 5
47839: PUSH
47840: LD_VAR 0 2
47844: PUSH
47845: LD_VAR 0 3
47849: ARRAY
47850: ST_TO_ADDR
// end ;
47851: GO 47760
47853: POP
47854: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47855: LD_VAR 0 1
47859: PPUSH
47860: LD_VAR 0 5
47864: PPUSH
47865: CALL_OW 135
// end ;
47869: LD_VAR 0 2
47873: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47874: LD_INT 0
47876: PPUSH
47877: PPUSH
47878: PPUSH
47879: PPUSH
47880: PPUSH
47881: PPUSH
47882: PPUSH
47883: PPUSH
47884: PPUSH
47885: PPUSH
47886: PPUSH
47887: PPUSH
47888: PPUSH
// result := [ ] ;
47889: LD_ADDR_VAR 0 7
47893: PUSH
47894: EMPTY
47895: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47896: LD_VAR 0 1
47900: PPUSH
47901: CALL_OW 266
47905: PUSH
47906: LD_INT 0
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: IN
47916: NOT
47917: IFFALSE 47921
// exit ;
47919: GO 49555
// if name then
47921: LD_VAR 0 3
47925: IFFALSE 47941
// SetBName ( base_dep , name ) ;
47927: LD_VAR 0 1
47931: PPUSH
47932: LD_VAR 0 3
47936: PPUSH
47937: CALL_OW 500
// base := GetBase ( base_dep ) ;
47941: LD_ADDR_VAR 0 15
47945: PUSH
47946: LD_VAR 0 1
47950: PPUSH
47951: CALL_OW 274
47955: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47956: LD_ADDR_VAR 0 16
47960: PUSH
47961: LD_VAR 0 1
47965: PPUSH
47966: CALL_OW 255
47970: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47971: LD_ADDR_VAR 0 17
47975: PUSH
47976: LD_VAR 0 1
47980: PPUSH
47981: CALL_OW 248
47985: ST_TO_ADDR
// if sources then
47986: LD_VAR 0 5
47990: IFFALSE 48037
// for i = 1 to 3 do
47992: LD_ADDR_VAR 0 8
47996: PUSH
47997: DOUBLE
47998: LD_INT 1
48000: DEC
48001: ST_TO_ADDR
48002: LD_INT 3
48004: PUSH
48005: FOR_TO
48006: IFFALSE 48035
// AddResourceType ( base , i , sources [ i ] ) ;
48008: LD_VAR 0 15
48012: PPUSH
48013: LD_VAR 0 8
48017: PPUSH
48018: LD_VAR 0 5
48022: PUSH
48023: LD_VAR 0 8
48027: ARRAY
48028: PPUSH
48029: CALL_OW 276
48033: GO 48005
48035: POP
48036: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48037: LD_ADDR_VAR 0 18
48041: PUSH
48042: LD_VAR 0 15
48046: PPUSH
48047: LD_VAR 0 2
48051: PPUSH
48052: LD_INT 1
48054: PPUSH
48055: CALL 47298 0 3
48059: ST_TO_ADDR
// InitHc ;
48060: CALL_OW 19
// InitUc ;
48064: CALL_OW 18
// uc_side := side ;
48068: LD_ADDR_OWVAR 20
48072: PUSH
48073: LD_VAR 0 16
48077: ST_TO_ADDR
// uc_nation := nation ;
48078: LD_ADDR_OWVAR 21
48082: PUSH
48083: LD_VAR 0 17
48087: ST_TO_ADDR
// if buildings then
48088: LD_VAR 0 18
48092: IFFALSE 49414
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48094: LD_ADDR_VAR 0 19
48098: PUSH
48099: LD_VAR 0 18
48103: PPUSH
48104: LD_INT 2
48106: PUSH
48107: LD_INT 30
48109: PUSH
48110: LD_INT 29
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 30
48119: PUSH
48120: LD_INT 30
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: LIST
48131: PPUSH
48132: CALL_OW 72
48136: ST_TO_ADDR
// if tmp then
48137: LD_VAR 0 19
48141: IFFALSE 48189
// for i in tmp do
48143: LD_ADDR_VAR 0 8
48147: PUSH
48148: LD_VAR 0 19
48152: PUSH
48153: FOR_IN
48154: IFFALSE 48187
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48156: LD_VAR 0 8
48160: PPUSH
48161: CALL_OW 250
48165: PPUSH
48166: LD_VAR 0 8
48170: PPUSH
48171: CALL_OW 251
48175: PPUSH
48176: LD_VAR 0 16
48180: PPUSH
48181: CALL_OW 441
48185: GO 48153
48187: POP
48188: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48189: LD_VAR 0 18
48193: PPUSH
48194: LD_INT 2
48196: PUSH
48197: LD_INT 30
48199: PUSH
48200: LD_INT 32
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 30
48209: PUSH
48210: LD_INT 33
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: LIST
48221: PPUSH
48222: CALL_OW 72
48226: IFFALSE 48314
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48228: LD_ADDR_VAR 0 8
48232: PUSH
48233: LD_VAR 0 18
48237: PPUSH
48238: LD_INT 2
48240: PUSH
48241: LD_INT 30
48243: PUSH
48244: LD_INT 32
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 30
48253: PUSH
48254: LD_INT 33
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: LIST
48265: PPUSH
48266: CALL_OW 72
48270: PUSH
48271: FOR_IN
48272: IFFALSE 48312
// begin if not GetBWeapon ( i ) then
48274: LD_VAR 0 8
48278: PPUSH
48279: CALL_OW 269
48283: NOT
48284: IFFALSE 48310
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48286: LD_VAR 0 8
48290: PPUSH
48291: LD_VAR 0 8
48295: PPUSH
48296: LD_VAR 0 2
48300: PPUSH
48301: CALL 49560 0 2
48305: PPUSH
48306: CALL_OW 431
// end ;
48310: GO 48271
48312: POP
48313: POP
// end ; for i = 1 to personel do
48314: LD_ADDR_VAR 0 8
48318: PUSH
48319: DOUBLE
48320: LD_INT 1
48322: DEC
48323: ST_TO_ADDR
48324: LD_VAR 0 6
48328: PUSH
48329: FOR_TO
48330: IFFALSE 49394
// begin if i > 4 then
48332: LD_VAR 0 8
48336: PUSH
48337: LD_INT 4
48339: GREATER
48340: IFFALSE 48344
// break ;
48342: GO 49394
// case i of 1 :
48344: LD_VAR 0 8
48348: PUSH
48349: LD_INT 1
48351: DOUBLE
48352: EQUAL
48353: IFTRUE 48357
48355: GO 48437
48357: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48358: LD_ADDR_VAR 0 12
48362: PUSH
48363: LD_VAR 0 18
48367: PPUSH
48368: LD_INT 22
48370: PUSH
48371: LD_VAR 0 16
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 58
48382: PUSH
48383: EMPTY
48384: LIST
48385: PUSH
48386: LD_INT 2
48388: PUSH
48389: LD_INT 30
48391: PUSH
48392: LD_INT 32
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 30
48401: PUSH
48402: LD_INT 4
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 30
48411: PUSH
48412: LD_INT 5
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: LIST
48429: PPUSH
48430: CALL_OW 72
48434: ST_TO_ADDR
48435: GO 48659
48437: LD_INT 2
48439: DOUBLE
48440: EQUAL
48441: IFTRUE 48445
48443: GO 48507
48445: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48446: LD_ADDR_VAR 0 12
48450: PUSH
48451: LD_VAR 0 18
48455: PPUSH
48456: LD_INT 22
48458: PUSH
48459: LD_VAR 0 16
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 2
48470: PUSH
48471: LD_INT 30
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 30
48483: PUSH
48484: LD_INT 1
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: LIST
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PPUSH
48500: CALL_OW 72
48504: ST_TO_ADDR
48505: GO 48659
48507: LD_INT 3
48509: DOUBLE
48510: EQUAL
48511: IFTRUE 48515
48513: GO 48577
48515: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48516: LD_ADDR_VAR 0 12
48520: PUSH
48521: LD_VAR 0 18
48525: PPUSH
48526: LD_INT 22
48528: PUSH
48529: LD_VAR 0 16
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 2
48540: PUSH
48541: LD_INT 30
48543: PUSH
48544: LD_INT 2
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 30
48553: PUSH
48554: LD_INT 3
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: LIST
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PPUSH
48570: CALL_OW 72
48574: ST_TO_ADDR
48575: GO 48659
48577: LD_INT 4
48579: DOUBLE
48580: EQUAL
48581: IFTRUE 48585
48583: GO 48658
48585: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48586: LD_ADDR_VAR 0 12
48590: PUSH
48591: LD_VAR 0 18
48595: PPUSH
48596: LD_INT 22
48598: PUSH
48599: LD_VAR 0 16
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 2
48610: PUSH
48611: LD_INT 30
48613: PUSH
48614: LD_INT 6
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 30
48623: PUSH
48624: LD_INT 7
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 30
48633: PUSH
48634: LD_INT 8
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PPUSH
48651: CALL_OW 72
48655: ST_TO_ADDR
48656: GO 48659
48658: POP
// if i = 1 then
48659: LD_VAR 0 8
48663: PUSH
48664: LD_INT 1
48666: EQUAL
48667: IFFALSE 48778
// begin tmp := [ ] ;
48669: LD_ADDR_VAR 0 19
48673: PUSH
48674: EMPTY
48675: ST_TO_ADDR
// for j in f do
48676: LD_ADDR_VAR 0 9
48680: PUSH
48681: LD_VAR 0 12
48685: PUSH
48686: FOR_IN
48687: IFFALSE 48760
// if GetBType ( j ) = b_bunker then
48689: LD_VAR 0 9
48693: PPUSH
48694: CALL_OW 266
48698: PUSH
48699: LD_INT 32
48701: EQUAL
48702: IFFALSE 48729
// tmp := Insert ( tmp , 1 , j ) else
48704: LD_ADDR_VAR 0 19
48708: PUSH
48709: LD_VAR 0 19
48713: PPUSH
48714: LD_INT 1
48716: PPUSH
48717: LD_VAR 0 9
48721: PPUSH
48722: CALL_OW 2
48726: ST_TO_ADDR
48727: GO 48758
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48729: LD_ADDR_VAR 0 19
48733: PUSH
48734: LD_VAR 0 19
48738: PPUSH
48739: LD_VAR 0 19
48743: PUSH
48744: LD_INT 1
48746: PLUS
48747: PPUSH
48748: LD_VAR 0 9
48752: PPUSH
48753: CALL_OW 2
48757: ST_TO_ADDR
48758: GO 48686
48760: POP
48761: POP
// if tmp then
48762: LD_VAR 0 19
48766: IFFALSE 48778
// f := tmp ;
48768: LD_ADDR_VAR 0 12
48772: PUSH
48773: LD_VAR 0 19
48777: ST_TO_ADDR
// end ; x := personel [ i ] ;
48778: LD_ADDR_VAR 0 13
48782: PUSH
48783: LD_VAR 0 6
48787: PUSH
48788: LD_VAR 0 8
48792: ARRAY
48793: ST_TO_ADDR
// if x = - 1 then
48794: LD_VAR 0 13
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: EQUAL
48803: IFFALSE 49012
// begin for j in f do
48805: LD_ADDR_VAR 0 9
48809: PUSH
48810: LD_VAR 0 12
48814: PUSH
48815: FOR_IN
48816: IFFALSE 49008
// repeat InitHc ;
48818: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48822: LD_VAR 0 9
48826: PPUSH
48827: CALL_OW 266
48831: PUSH
48832: LD_INT 5
48834: EQUAL
48835: IFFALSE 48905
// begin if UnitsInside ( j ) < 3 then
48837: LD_VAR 0 9
48841: PPUSH
48842: CALL_OW 313
48846: PUSH
48847: LD_INT 3
48849: LESS
48850: IFFALSE 48886
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48852: LD_INT 0
48854: PPUSH
48855: LD_INT 5
48857: PUSH
48858: LD_INT 8
48860: PUSH
48861: LD_INT 9
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: LIST
48868: PUSH
48869: LD_VAR 0 17
48873: ARRAY
48874: PPUSH
48875: LD_VAR 0 4
48879: PPUSH
48880: CALL_OW 380
48884: GO 48903
// PrepareHuman ( false , i , skill ) ;
48886: LD_INT 0
48888: PPUSH
48889: LD_VAR 0 8
48893: PPUSH
48894: LD_VAR 0 4
48898: PPUSH
48899: CALL_OW 380
// end else
48903: GO 48922
// PrepareHuman ( false , i , skill ) ;
48905: LD_INT 0
48907: PPUSH
48908: LD_VAR 0 8
48912: PPUSH
48913: LD_VAR 0 4
48917: PPUSH
48918: CALL_OW 380
// un := CreateHuman ;
48922: LD_ADDR_VAR 0 14
48926: PUSH
48927: CALL_OW 44
48931: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48932: LD_ADDR_VAR 0 7
48936: PUSH
48937: LD_VAR 0 7
48941: PPUSH
48942: LD_INT 1
48944: PPUSH
48945: LD_VAR 0 14
48949: PPUSH
48950: CALL_OW 2
48954: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48955: LD_VAR 0 14
48959: PPUSH
48960: LD_VAR 0 9
48964: PPUSH
48965: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48969: LD_VAR 0 9
48973: PPUSH
48974: CALL_OW 313
48978: PUSH
48979: LD_INT 6
48981: EQUAL
48982: PUSH
48983: LD_VAR 0 9
48987: PPUSH
48988: CALL_OW 266
48992: PUSH
48993: LD_INT 32
48995: PUSH
48996: LD_INT 31
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: IN
49003: OR
49004: IFFALSE 48818
49006: GO 48815
49008: POP
49009: POP
// end else
49010: GO 49392
// for j = 1 to x do
49012: LD_ADDR_VAR 0 9
49016: PUSH
49017: DOUBLE
49018: LD_INT 1
49020: DEC
49021: ST_TO_ADDR
49022: LD_VAR 0 13
49026: PUSH
49027: FOR_TO
49028: IFFALSE 49390
// begin InitHc ;
49030: CALL_OW 19
// if not f then
49034: LD_VAR 0 12
49038: NOT
49039: IFFALSE 49128
// begin PrepareHuman ( false , i , skill ) ;
49041: LD_INT 0
49043: PPUSH
49044: LD_VAR 0 8
49048: PPUSH
49049: LD_VAR 0 4
49053: PPUSH
49054: CALL_OW 380
// un := CreateHuman ;
49058: LD_ADDR_VAR 0 14
49062: PUSH
49063: CALL_OW 44
49067: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49068: LD_ADDR_VAR 0 7
49072: PUSH
49073: LD_VAR 0 7
49077: PPUSH
49078: LD_INT 1
49080: PPUSH
49081: LD_VAR 0 14
49085: PPUSH
49086: CALL_OW 2
49090: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49091: LD_VAR 0 14
49095: PPUSH
49096: LD_VAR 0 1
49100: PPUSH
49101: CALL_OW 250
49105: PPUSH
49106: LD_VAR 0 1
49110: PPUSH
49111: CALL_OW 251
49115: PPUSH
49116: LD_INT 10
49118: PPUSH
49119: LD_INT 0
49121: PPUSH
49122: CALL_OW 50
// continue ;
49126: GO 49027
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49128: LD_VAR 0 12
49132: PUSH
49133: LD_INT 1
49135: ARRAY
49136: PPUSH
49137: CALL_OW 313
49141: PUSH
49142: LD_VAR 0 12
49146: PUSH
49147: LD_INT 1
49149: ARRAY
49150: PPUSH
49151: CALL_OW 266
49155: PUSH
49156: LD_INT 32
49158: PUSH
49159: LD_INT 31
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: IN
49166: AND
49167: PUSH
49168: LD_VAR 0 12
49172: PUSH
49173: LD_INT 1
49175: ARRAY
49176: PPUSH
49177: CALL_OW 313
49181: PUSH
49182: LD_INT 6
49184: EQUAL
49185: OR
49186: IFFALSE 49206
// f := Delete ( f , 1 ) ;
49188: LD_ADDR_VAR 0 12
49192: PUSH
49193: LD_VAR 0 12
49197: PPUSH
49198: LD_INT 1
49200: PPUSH
49201: CALL_OW 3
49205: ST_TO_ADDR
// if not f then
49206: LD_VAR 0 12
49210: NOT
49211: IFFALSE 49229
// begin x := x + 2 ;
49213: LD_ADDR_VAR 0 13
49217: PUSH
49218: LD_VAR 0 13
49222: PUSH
49223: LD_INT 2
49225: PLUS
49226: ST_TO_ADDR
// continue ;
49227: GO 49027
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49229: LD_VAR 0 12
49233: PUSH
49234: LD_INT 1
49236: ARRAY
49237: PPUSH
49238: CALL_OW 266
49242: PUSH
49243: LD_INT 5
49245: EQUAL
49246: IFFALSE 49320
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49248: LD_VAR 0 12
49252: PUSH
49253: LD_INT 1
49255: ARRAY
49256: PPUSH
49257: CALL_OW 313
49261: PUSH
49262: LD_INT 3
49264: LESS
49265: IFFALSE 49301
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49267: LD_INT 0
49269: PPUSH
49270: LD_INT 5
49272: PUSH
49273: LD_INT 8
49275: PUSH
49276: LD_INT 9
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: LIST
49283: PUSH
49284: LD_VAR 0 17
49288: ARRAY
49289: PPUSH
49290: LD_VAR 0 4
49294: PPUSH
49295: CALL_OW 380
49299: GO 49318
// PrepareHuman ( false , i , skill ) ;
49301: LD_INT 0
49303: PPUSH
49304: LD_VAR 0 8
49308: PPUSH
49309: LD_VAR 0 4
49313: PPUSH
49314: CALL_OW 380
// end else
49318: GO 49337
// PrepareHuman ( false , i , skill ) ;
49320: LD_INT 0
49322: PPUSH
49323: LD_VAR 0 8
49327: PPUSH
49328: LD_VAR 0 4
49332: PPUSH
49333: CALL_OW 380
// un := CreateHuman ;
49337: LD_ADDR_VAR 0 14
49341: PUSH
49342: CALL_OW 44
49346: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49347: LD_ADDR_VAR 0 7
49351: PUSH
49352: LD_VAR 0 7
49356: PPUSH
49357: LD_INT 1
49359: PPUSH
49360: LD_VAR 0 14
49364: PPUSH
49365: CALL_OW 2
49369: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49370: LD_VAR 0 14
49374: PPUSH
49375: LD_VAR 0 12
49379: PUSH
49380: LD_INT 1
49382: ARRAY
49383: PPUSH
49384: CALL_OW 52
// end ;
49388: GO 49027
49390: POP
49391: POP
// end ;
49392: GO 48329
49394: POP
49395: POP
// result := result ^ buildings ;
49396: LD_ADDR_VAR 0 7
49400: PUSH
49401: LD_VAR 0 7
49405: PUSH
49406: LD_VAR 0 18
49410: ADD
49411: ST_TO_ADDR
// end else
49412: GO 49555
// begin for i = 1 to personel do
49414: LD_ADDR_VAR 0 8
49418: PUSH
49419: DOUBLE
49420: LD_INT 1
49422: DEC
49423: ST_TO_ADDR
49424: LD_VAR 0 6
49428: PUSH
49429: FOR_TO
49430: IFFALSE 49553
// begin if i > 4 then
49432: LD_VAR 0 8
49436: PUSH
49437: LD_INT 4
49439: GREATER
49440: IFFALSE 49444
// break ;
49442: GO 49553
// x := personel [ i ] ;
49444: LD_ADDR_VAR 0 13
49448: PUSH
49449: LD_VAR 0 6
49453: PUSH
49454: LD_VAR 0 8
49458: ARRAY
49459: ST_TO_ADDR
// if x = - 1 then
49460: LD_VAR 0 13
49464: PUSH
49465: LD_INT 1
49467: NEG
49468: EQUAL
49469: IFFALSE 49473
// continue ;
49471: GO 49429
// PrepareHuman ( false , i , skill ) ;
49473: LD_INT 0
49475: PPUSH
49476: LD_VAR 0 8
49480: PPUSH
49481: LD_VAR 0 4
49485: PPUSH
49486: CALL_OW 380
// un := CreateHuman ;
49490: LD_ADDR_VAR 0 14
49494: PUSH
49495: CALL_OW 44
49499: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49500: LD_VAR 0 14
49504: PPUSH
49505: LD_VAR 0 1
49509: PPUSH
49510: CALL_OW 250
49514: PPUSH
49515: LD_VAR 0 1
49519: PPUSH
49520: CALL_OW 251
49524: PPUSH
49525: LD_INT 10
49527: PPUSH
49528: LD_INT 0
49530: PPUSH
49531: CALL_OW 50
// result := result ^ un ;
49535: LD_ADDR_VAR 0 7
49539: PUSH
49540: LD_VAR 0 7
49544: PUSH
49545: LD_VAR 0 14
49549: ADD
49550: ST_TO_ADDR
// end ;
49551: GO 49429
49553: POP
49554: POP
// end ; end ;
49555: LD_VAR 0 7
49559: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49560: LD_INT 0
49562: PPUSH
49563: PPUSH
49564: PPUSH
49565: PPUSH
49566: PPUSH
49567: PPUSH
49568: PPUSH
49569: PPUSH
49570: PPUSH
49571: PPUSH
49572: PPUSH
49573: PPUSH
49574: PPUSH
49575: PPUSH
49576: PPUSH
49577: PPUSH
// result := false ;
49578: LD_ADDR_VAR 0 3
49582: PUSH
49583: LD_INT 0
49585: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49586: LD_VAR 0 1
49590: NOT
49591: PUSH
49592: LD_VAR 0 1
49596: PPUSH
49597: CALL_OW 266
49601: PUSH
49602: LD_INT 32
49604: PUSH
49605: LD_INT 33
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: IN
49612: NOT
49613: OR
49614: IFFALSE 49618
// exit ;
49616: GO 50727
// nat := GetNation ( tower ) ;
49618: LD_ADDR_VAR 0 12
49622: PUSH
49623: LD_VAR 0 1
49627: PPUSH
49628: CALL_OW 248
49632: ST_TO_ADDR
// side := GetSide ( tower ) ;
49633: LD_ADDR_VAR 0 16
49637: PUSH
49638: LD_VAR 0 1
49642: PPUSH
49643: CALL_OW 255
49647: ST_TO_ADDR
// x := GetX ( tower ) ;
49648: LD_ADDR_VAR 0 10
49652: PUSH
49653: LD_VAR 0 1
49657: PPUSH
49658: CALL_OW 250
49662: ST_TO_ADDR
// y := GetY ( tower ) ;
49663: LD_ADDR_VAR 0 11
49667: PUSH
49668: LD_VAR 0 1
49672: PPUSH
49673: CALL_OW 251
49677: ST_TO_ADDR
// if not x or not y then
49678: LD_VAR 0 10
49682: NOT
49683: PUSH
49684: LD_VAR 0 11
49688: NOT
49689: OR
49690: IFFALSE 49694
// exit ;
49692: GO 50727
// weapon := 0 ;
49694: LD_ADDR_VAR 0 18
49698: PUSH
49699: LD_INT 0
49701: ST_TO_ADDR
// fac_list := [ ] ;
49702: LD_ADDR_VAR 0 17
49706: PUSH
49707: EMPTY
49708: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49709: LD_ADDR_VAR 0 6
49713: PUSH
49714: LD_VAR 0 1
49718: PPUSH
49719: CALL_OW 274
49723: PPUSH
49724: LD_VAR 0 2
49728: PPUSH
49729: LD_INT 0
49731: PPUSH
49732: CALL 47298 0 3
49736: PPUSH
49737: LD_INT 30
49739: PUSH
49740: LD_INT 3
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PPUSH
49747: CALL_OW 72
49751: ST_TO_ADDR
// if not factories then
49752: LD_VAR 0 6
49756: NOT
49757: IFFALSE 49761
// exit ;
49759: GO 50727
// for i in factories do
49761: LD_ADDR_VAR 0 8
49765: PUSH
49766: LD_VAR 0 6
49770: PUSH
49771: FOR_IN
49772: IFFALSE 49797
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49774: LD_ADDR_VAR 0 17
49778: PUSH
49779: LD_VAR 0 17
49783: PUSH
49784: LD_VAR 0 8
49788: PPUSH
49789: CALL_OW 478
49793: UNION
49794: ST_TO_ADDR
49795: GO 49771
49797: POP
49798: POP
// if not fac_list then
49799: LD_VAR 0 17
49803: NOT
49804: IFFALSE 49808
// exit ;
49806: GO 50727
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49808: LD_ADDR_VAR 0 5
49812: PUSH
49813: LD_INT 4
49815: PUSH
49816: LD_INT 5
49818: PUSH
49819: LD_INT 9
49821: PUSH
49822: LD_INT 10
49824: PUSH
49825: LD_INT 6
49827: PUSH
49828: LD_INT 7
49830: PUSH
49831: LD_INT 11
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 27
49845: PUSH
49846: LD_INT 28
49848: PUSH
49849: LD_INT 26
49851: PUSH
49852: LD_INT 30
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 43
49863: PUSH
49864: LD_INT 44
49866: PUSH
49867: LD_INT 46
49869: PUSH
49870: LD_INT 45
49872: PUSH
49873: LD_INT 47
49875: PUSH
49876: LD_INT 49
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: LIST
49891: PUSH
49892: LD_VAR 0 12
49896: ARRAY
49897: ST_TO_ADDR
// list := list isect fac_list ;
49898: LD_ADDR_VAR 0 5
49902: PUSH
49903: LD_VAR 0 5
49907: PUSH
49908: LD_VAR 0 17
49912: ISECT
49913: ST_TO_ADDR
// if not list then
49914: LD_VAR 0 5
49918: NOT
49919: IFFALSE 49923
// exit ;
49921: GO 50727
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49923: LD_VAR 0 12
49927: PUSH
49928: LD_INT 3
49930: EQUAL
49931: PUSH
49932: LD_INT 49
49934: PUSH
49935: LD_VAR 0 5
49939: IN
49940: AND
49941: PUSH
49942: LD_INT 31
49944: PPUSH
49945: LD_VAR 0 16
49949: PPUSH
49950: CALL_OW 321
49954: PUSH
49955: LD_INT 2
49957: EQUAL
49958: AND
49959: IFFALSE 50019
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49961: LD_INT 22
49963: PUSH
49964: LD_VAR 0 16
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 35
49975: PUSH
49976: LD_INT 49
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 91
49985: PUSH
49986: LD_VAR 0 1
49990: PUSH
49991: LD_INT 10
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: LIST
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: LIST
50003: PPUSH
50004: CALL_OW 69
50008: NOT
50009: IFFALSE 50019
// weapon := ru_time_lapser ;
50011: LD_ADDR_VAR 0 18
50015: PUSH
50016: LD_INT 49
50018: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50019: LD_VAR 0 12
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: LD_INT 2
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: IN
50034: PUSH
50035: LD_INT 11
50037: PUSH
50038: LD_VAR 0 5
50042: IN
50043: PUSH
50044: LD_INT 30
50046: PUSH
50047: LD_VAR 0 5
50051: IN
50052: OR
50053: AND
50054: PUSH
50055: LD_INT 6
50057: PPUSH
50058: LD_VAR 0 16
50062: PPUSH
50063: CALL_OW 321
50067: PUSH
50068: LD_INT 2
50070: EQUAL
50071: AND
50072: IFFALSE 50237
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50074: LD_INT 22
50076: PUSH
50077: LD_VAR 0 16
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 2
50088: PUSH
50089: LD_INT 35
50091: PUSH
50092: LD_INT 11
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 35
50101: PUSH
50102: LD_INT 30
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 91
50116: PUSH
50117: LD_VAR 0 1
50121: PUSH
50122: LD_INT 18
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: LIST
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: LIST
50134: PPUSH
50135: CALL_OW 69
50139: NOT
50140: PUSH
50141: LD_INT 22
50143: PUSH
50144: LD_VAR 0 16
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 2
50155: PUSH
50156: LD_INT 30
50158: PUSH
50159: LD_INT 32
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 30
50168: PUSH
50169: LD_INT 33
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 91
50183: PUSH
50184: LD_VAR 0 1
50188: PUSH
50189: LD_INT 12
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: LIST
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: LIST
50201: PUSH
50202: EMPTY
50203: LIST
50204: PPUSH
50205: CALL_OW 69
50209: PUSH
50210: LD_INT 2
50212: GREATER
50213: AND
50214: IFFALSE 50237
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50216: LD_ADDR_VAR 0 18
50220: PUSH
50221: LD_INT 11
50223: PUSH
50224: LD_INT 30
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_VAR 0 12
50235: ARRAY
50236: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50237: LD_VAR 0 18
50241: NOT
50242: PUSH
50243: LD_INT 40
50245: PPUSH
50246: LD_VAR 0 16
50250: PPUSH
50251: CALL_OW 321
50255: PUSH
50256: LD_INT 2
50258: EQUAL
50259: AND
50260: PUSH
50261: LD_INT 7
50263: PUSH
50264: LD_VAR 0 5
50268: IN
50269: PUSH
50270: LD_INT 28
50272: PUSH
50273: LD_VAR 0 5
50277: IN
50278: OR
50279: PUSH
50280: LD_INT 45
50282: PUSH
50283: LD_VAR 0 5
50287: IN
50288: OR
50289: AND
50290: IFFALSE 50544
// begin hex := GetHexInfo ( x , y ) ;
50292: LD_ADDR_VAR 0 4
50296: PUSH
50297: LD_VAR 0 10
50301: PPUSH
50302: LD_VAR 0 11
50306: PPUSH
50307: CALL_OW 546
50311: ST_TO_ADDR
// if hex [ 1 ] then
50312: LD_VAR 0 4
50316: PUSH
50317: LD_INT 1
50319: ARRAY
50320: IFFALSE 50324
// exit ;
50322: GO 50727
// height := hex [ 2 ] ;
50324: LD_ADDR_VAR 0 15
50328: PUSH
50329: LD_VAR 0 4
50333: PUSH
50334: LD_INT 2
50336: ARRAY
50337: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50338: LD_ADDR_VAR 0 14
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: LD_INT 2
50348: PUSH
50349: LD_INT 3
50351: PUSH
50352: LD_INT 5
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: ST_TO_ADDR
// for i in tmp do
50361: LD_ADDR_VAR 0 8
50365: PUSH
50366: LD_VAR 0 14
50370: PUSH
50371: FOR_IN
50372: IFFALSE 50542
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50374: LD_ADDR_VAR 0 9
50378: PUSH
50379: LD_VAR 0 10
50383: PPUSH
50384: LD_VAR 0 8
50388: PPUSH
50389: LD_INT 5
50391: PPUSH
50392: CALL_OW 272
50396: PUSH
50397: LD_VAR 0 11
50401: PPUSH
50402: LD_VAR 0 8
50406: PPUSH
50407: LD_INT 5
50409: PPUSH
50410: CALL_OW 273
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50419: LD_VAR 0 9
50423: PUSH
50424: LD_INT 1
50426: ARRAY
50427: PPUSH
50428: LD_VAR 0 9
50432: PUSH
50433: LD_INT 2
50435: ARRAY
50436: PPUSH
50437: CALL_OW 488
50441: IFFALSE 50540
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50443: LD_ADDR_VAR 0 4
50447: PUSH
50448: LD_VAR 0 9
50452: PUSH
50453: LD_INT 1
50455: ARRAY
50456: PPUSH
50457: LD_VAR 0 9
50461: PUSH
50462: LD_INT 2
50464: ARRAY
50465: PPUSH
50466: CALL_OW 546
50470: ST_TO_ADDR
// if hex [ 1 ] then
50471: LD_VAR 0 4
50475: PUSH
50476: LD_INT 1
50478: ARRAY
50479: IFFALSE 50483
// continue ;
50481: GO 50371
// h := hex [ 2 ] ;
50483: LD_ADDR_VAR 0 13
50487: PUSH
50488: LD_VAR 0 4
50492: PUSH
50493: LD_INT 2
50495: ARRAY
50496: ST_TO_ADDR
// if h + 7 < height then
50497: LD_VAR 0 13
50501: PUSH
50502: LD_INT 7
50504: PLUS
50505: PUSH
50506: LD_VAR 0 15
50510: LESS
50511: IFFALSE 50540
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50513: LD_ADDR_VAR 0 18
50517: PUSH
50518: LD_INT 7
50520: PUSH
50521: LD_INT 28
50523: PUSH
50524: LD_INT 45
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: LIST
50531: PUSH
50532: LD_VAR 0 12
50536: ARRAY
50537: ST_TO_ADDR
// break ;
50538: GO 50542
// end ; end ; end ;
50540: GO 50371
50542: POP
50543: POP
// end ; if not weapon then
50544: LD_VAR 0 18
50548: NOT
50549: IFFALSE 50609
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50551: LD_ADDR_VAR 0 5
50555: PUSH
50556: LD_VAR 0 5
50560: PUSH
50561: LD_INT 11
50563: PUSH
50564: LD_INT 30
50566: PUSH
50567: LD_INT 49
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: LIST
50574: DIFF
50575: ST_TO_ADDR
// if not list then
50576: LD_VAR 0 5
50580: NOT
50581: IFFALSE 50585
// exit ;
50583: GO 50727
// weapon := list [ rand ( 1 , list ) ] ;
50585: LD_ADDR_VAR 0 18
50589: PUSH
50590: LD_VAR 0 5
50594: PUSH
50595: LD_INT 1
50597: PPUSH
50598: LD_VAR 0 5
50602: PPUSH
50603: CALL_OW 12
50607: ARRAY
50608: ST_TO_ADDR
// end ; if weapon then
50609: LD_VAR 0 18
50613: IFFALSE 50727
// begin tmp := CostOfWeapon ( weapon ) ;
50615: LD_ADDR_VAR 0 14
50619: PUSH
50620: LD_VAR 0 18
50624: PPUSH
50625: CALL_OW 451
50629: ST_TO_ADDR
// j := GetBase ( tower ) ;
50630: LD_ADDR_VAR 0 9
50634: PUSH
50635: LD_VAR 0 1
50639: PPUSH
50640: CALL_OW 274
50644: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50645: LD_VAR 0 9
50649: PPUSH
50650: LD_INT 1
50652: PPUSH
50653: CALL_OW 275
50657: PUSH
50658: LD_VAR 0 14
50662: PUSH
50663: LD_INT 1
50665: ARRAY
50666: GREATEREQUAL
50667: PUSH
50668: LD_VAR 0 9
50672: PPUSH
50673: LD_INT 2
50675: PPUSH
50676: CALL_OW 275
50680: PUSH
50681: LD_VAR 0 14
50685: PUSH
50686: LD_INT 2
50688: ARRAY
50689: GREATEREQUAL
50690: AND
50691: PUSH
50692: LD_VAR 0 9
50696: PPUSH
50697: LD_INT 3
50699: PPUSH
50700: CALL_OW 275
50704: PUSH
50705: LD_VAR 0 14
50709: PUSH
50710: LD_INT 3
50712: ARRAY
50713: GREATEREQUAL
50714: AND
50715: IFFALSE 50727
// result := weapon ;
50717: LD_ADDR_VAR 0 3
50721: PUSH
50722: LD_VAR 0 18
50726: ST_TO_ADDR
// end ; end ;
50727: LD_VAR 0 3
50731: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50732: LD_INT 0
50734: PPUSH
50735: PPUSH
// result := true ;
50736: LD_ADDR_VAR 0 3
50740: PUSH
50741: LD_INT 1
50743: ST_TO_ADDR
// if array1 = array2 then
50744: LD_VAR 0 1
50748: PUSH
50749: LD_VAR 0 2
50753: EQUAL
50754: IFFALSE 50814
// begin for i = 1 to array1 do
50756: LD_ADDR_VAR 0 4
50760: PUSH
50761: DOUBLE
50762: LD_INT 1
50764: DEC
50765: ST_TO_ADDR
50766: LD_VAR 0 1
50770: PUSH
50771: FOR_TO
50772: IFFALSE 50810
// if array1 [ i ] <> array2 [ i ] then
50774: LD_VAR 0 1
50778: PUSH
50779: LD_VAR 0 4
50783: ARRAY
50784: PUSH
50785: LD_VAR 0 2
50789: PUSH
50790: LD_VAR 0 4
50794: ARRAY
50795: NONEQUAL
50796: IFFALSE 50808
// begin result := false ;
50798: LD_ADDR_VAR 0 3
50802: PUSH
50803: LD_INT 0
50805: ST_TO_ADDR
// break ;
50806: GO 50810
// end ;
50808: GO 50771
50810: POP
50811: POP
// end else
50812: GO 50822
// result := false ;
50814: LD_ADDR_VAR 0 3
50818: PUSH
50819: LD_INT 0
50821: ST_TO_ADDR
// end ;
50822: LD_VAR 0 3
50826: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50827: LD_INT 0
50829: PPUSH
50830: PPUSH
// if not array1 or not array2 then
50831: LD_VAR 0 1
50835: NOT
50836: PUSH
50837: LD_VAR 0 2
50841: NOT
50842: OR
50843: IFFALSE 50847
// exit ;
50845: GO 50911
// result := true ;
50847: LD_ADDR_VAR 0 3
50851: PUSH
50852: LD_INT 1
50854: ST_TO_ADDR
// for i = 1 to array1 do
50855: LD_ADDR_VAR 0 4
50859: PUSH
50860: DOUBLE
50861: LD_INT 1
50863: DEC
50864: ST_TO_ADDR
50865: LD_VAR 0 1
50869: PUSH
50870: FOR_TO
50871: IFFALSE 50909
// if array1 [ i ] <> array2 [ i ] then
50873: LD_VAR 0 1
50877: PUSH
50878: LD_VAR 0 4
50882: ARRAY
50883: PUSH
50884: LD_VAR 0 2
50888: PUSH
50889: LD_VAR 0 4
50893: ARRAY
50894: NONEQUAL
50895: IFFALSE 50907
// begin result := false ;
50897: LD_ADDR_VAR 0 3
50901: PUSH
50902: LD_INT 0
50904: ST_TO_ADDR
// break ;
50905: GO 50909
// end ;
50907: GO 50870
50909: POP
50910: POP
// end ;
50911: LD_VAR 0 3
50915: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50916: LD_INT 0
50918: PPUSH
50919: PPUSH
50920: PPUSH
// pom := GetBase ( fac ) ;
50921: LD_ADDR_VAR 0 5
50925: PUSH
50926: LD_VAR 0 1
50930: PPUSH
50931: CALL_OW 274
50935: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50936: LD_ADDR_VAR 0 4
50940: PUSH
50941: LD_VAR 0 2
50945: PUSH
50946: LD_INT 1
50948: ARRAY
50949: PPUSH
50950: LD_VAR 0 2
50954: PUSH
50955: LD_INT 2
50957: ARRAY
50958: PPUSH
50959: LD_VAR 0 2
50963: PUSH
50964: LD_INT 3
50966: ARRAY
50967: PPUSH
50968: LD_VAR 0 2
50972: PUSH
50973: LD_INT 4
50975: ARRAY
50976: PPUSH
50977: CALL_OW 449
50981: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50982: LD_ADDR_VAR 0 3
50986: PUSH
50987: LD_VAR 0 5
50991: PPUSH
50992: LD_INT 1
50994: PPUSH
50995: CALL_OW 275
50999: PUSH
51000: LD_VAR 0 4
51004: PUSH
51005: LD_INT 1
51007: ARRAY
51008: GREATEREQUAL
51009: PUSH
51010: LD_VAR 0 5
51014: PPUSH
51015: LD_INT 2
51017: PPUSH
51018: CALL_OW 275
51022: PUSH
51023: LD_VAR 0 4
51027: PUSH
51028: LD_INT 2
51030: ARRAY
51031: GREATEREQUAL
51032: AND
51033: PUSH
51034: LD_VAR 0 5
51038: PPUSH
51039: LD_INT 3
51041: PPUSH
51042: CALL_OW 275
51046: PUSH
51047: LD_VAR 0 4
51051: PUSH
51052: LD_INT 3
51054: ARRAY
51055: GREATEREQUAL
51056: AND
51057: ST_TO_ADDR
// end ;
51058: LD_VAR 0 3
51062: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51063: LD_INT 0
51065: PPUSH
51066: PPUSH
51067: PPUSH
51068: PPUSH
// pom := GetBase ( building ) ;
51069: LD_ADDR_VAR 0 3
51073: PUSH
51074: LD_VAR 0 1
51078: PPUSH
51079: CALL_OW 274
51083: ST_TO_ADDR
// if not pom then
51084: LD_VAR 0 3
51088: NOT
51089: IFFALSE 51093
// exit ;
51091: GO 51263
// btype := GetBType ( building ) ;
51093: LD_ADDR_VAR 0 5
51097: PUSH
51098: LD_VAR 0 1
51102: PPUSH
51103: CALL_OW 266
51107: ST_TO_ADDR
// if btype = b_armoury then
51108: LD_VAR 0 5
51112: PUSH
51113: LD_INT 4
51115: EQUAL
51116: IFFALSE 51126
// btype := b_barracks ;
51118: LD_ADDR_VAR 0 5
51122: PUSH
51123: LD_INT 5
51125: ST_TO_ADDR
// if btype = b_depot then
51126: LD_VAR 0 5
51130: PUSH
51131: LD_INT 0
51133: EQUAL
51134: IFFALSE 51144
// btype := b_warehouse ;
51136: LD_ADDR_VAR 0 5
51140: PUSH
51141: LD_INT 1
51143: ST_TO_ADDR
// if btype = b_workshop then
51144: LD_VAR 0 5
51148: PUSH
51149: LD_INT 2
51151: EQUAL
51152: IFFALSE 51162
// btype := b_factory ;
51154: LD_ADDR_VAR 0 5
51158: PUSH
51159: LD_INT 3
51161: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51162: LD_ADDR_VAR 0 4
51166: PUSH
51167: LD_VAR 0 5
51171: PPUSH
51172: LD_VAR 0 1
51176: PPUSH
51177: CALL_OW 248
51181: PPUSH
51182: CALL_OW 450
51186: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51187: LD_ADDR_VAR 0 2
51191: PUSH
51192: LD_VAR 0 3
51196: PPUSH
51197: LD_INT 1
51199: PPUSH
51200: CALL_OW 275
51204: PUSH
51205: LD_VAR 0 4
51209: PUSH
51210: LD_INT 1
51212: ARRAY
51213: GREATEREQUAL
51214: PUSH
51215: LD_VAR 0 3
51219: PPUSH
51220: LD_INT 2
51222: PPUSH
51223: CALL_OW 275
51227: PUSH
51228: LD_VAR 0 4
51232: PUSH
51233: LD_INT 2
51235: ARRAY
51236: GREATEREQUAL
51237: AND
51238: PUSH
51239: LD_VAR 0 3
51243: PPUSH
51244: LD_INT 3
51246: PPUSH
51247: CALL_OW 275
51251: PUSH
51252: LD_VAR 0 4
51256: PUSH
51257: LD_INT 3
51259: ARRAY
51260: GREATEREQUAL
51261: AND
51262: ST_TO_ADDR
// end ;
51263: LD_VAR 0 2
51267: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51268: LD_INT 0
51270: PPUSH
51271: PPUSH
51272: PPUSH
// pom := GetBase ( building ) ;
51273: LD_ADDR_VAR 0 4
51277: PUSH
51278: LD_VAR 0 1
51282: PPUSH
51283: CALL_OW 274
51287: ST_TO_ADDR
// if not pom then
51288: LD_VAR 0 4
51292: NOT
51293: IFFALSE 51297
// exit ;
51295: GO 51398
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51297: LD_ADDR_VAR 0 5
51301: PUSH
51302: LD_VAR 0 2
51306: PPUSH
51307: LD_VAR 0 1
51311: PPUSH
51312: CALL_OW 248
51316: PPUSH
51317: CALL_OW 450
51321: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51322: LD_ADDR_VAR 0 3
51326: PUSH
51327: LD_VAR 0 4
51331: PPUSH
51332: LD_INT 1
51334: PPUSH
51335: CALL_OW 275
51339: PUSH
51340: LD_VAR 0 5
51344: PUSH
51345: LD_INT 1
51347: ARRAY
51348: GREATEREQUAL
51349: PUSH
51350: LD_VAR 0 4
51354: PPUSH
51355: LD_INT 2
51357: PPUSH
51358: CALL_OW 275
51362: PUSH
51363: LD_VAR 0 5
51367: PUSH
51368: LD_INT 2
51370: ARRAY
51371: GREATEREQUAL
51372: AND
51373: PUSH
51374: LD_VAR 0 4
51378: PPUSH
51379: LD_INT 3
51381: PPUSH
51382: CALL_OW 275
51386: PUSH
51387: LD_VAR 0 5
51391: PUSH
51392: LD_INT 3
51394: ARRAY
51395: GREATEREQUAL
51396: AND
51397: ST_TO_ADDR
// end ;
51398: LD_VAR 0 3
51402: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51403: LD_INT 0
51405: PPUSH
51406: PPUSH
51407: PPUSH
51408: PPUSH
51409: PPUSH
51410: PPUSH
51411: PPUSH
51412: PPUSH
51413: PPUSH
51414: PPUSH
51415: PPUSH
// result := false ;
51416: LD_ADDR_VAR 0 8
51420: PUSH
51421: LD_INT 0
51423: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51424: LD_VAR 0 5
51428: NOT
51429: PUSH
51430: LD_VAR 0 1
51434: NOT
51435: OR
51436: PUSH
51437: LD_VAR 0 2
51441: NOT
51442: OR
51443: PUSH
51444: LD_VAR 0 3
51448: NOT
51449: OR
51450: IFFALSE 51454
// exit ;
51452: GO 52268
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51454: LD_ADDR_VAR 0 14
51458: PUSH
51459: LD_VAR 0 1
51463: PPUSH
51464: LD_VAR 0 2
51468: PPUSH
51469: LD_VAR 0 3
51473: PPUSH
51474: LD_VAR 0 4
51478: PPUSH
51479: LD_VAR 0 5
51483: PUSH
51484: LD_INT 1
51486: ARRAY
51487: PPUSH
51488: CALL_OW 248
51492: PPUSH
51493: LD_INT 0
51495: PPUSH
51496: CALL 53521 0 6
51500: ST_TO_ADDR
// if not hexes then
51501: LD_VAR 0 14
51505: NOT
51506: IFFALSE 51510
// exit ;
51508: GO 52268
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51510: LD_ADDR_VAR 0 17
51514: PUSH
51515: LD_VAR 0 5
51519: PPUSH
51520: LD_INT 22
51522: PUSH
51523: LD_VAR 0 13
51527: PPUSH
51528: CALL_OW 255
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 2
51539: PUSH
51540: LD_INT 30
51542: PUSH
51543: LD_INT 0
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 30
51552: PUSH
51553: LD_INT 1
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: LIST
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PPUSH
51569: CALL_OW 72
51573: ST_TO_ADDR
// for i = 1 to hexes do
51574: LD_ADDR_VAR 0 9
51578: PUSH
51579: DOUBLE
51580: LD_INT 1
51582: DEC
51583: ST_TO_ADDR
51584: LD_VAR 0 14
51588: PUSH
51589: FOR_TO
51590: IFFALSE 52266
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51592: LD_ADDR_VAR 0 13
51596: PUSH
51597: LD_VAR 0 14
51601: PUSH
51602: LD_VAR 0 9
51606: ARRAY
51607: PUSH
51608: LD_INT 1
51610: ARRAY
51611: PPUSH
51612: LD_VAR 0 14
51616: PUSH
51617: LD_VAR 0 9
51621: ARRAY
51622: PUSH
51623: LD_INT 2
51625: ARRAY
51626: PPUSH
51627: CALL_OW 428
51631: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51632: LD_VAR 0 14
51636: PUSH
51637: LD_VAR 0 9
51641: ARRAY
51642: PUSH
51643: LD_INT 1
51645: ARRAY
51646: PPUSH
51647: LD_VAR 0 14
51651: PUSH
51652: LD_VAR 0 9
51656: ARRAY
51657: PUSH
51658: LD_INT 2
51660: ARRAY
51661: PPUSH
51662: CALL_OW 351
51666: PUSH
51667: LD_VAR 0 14
51671: PUSH
51672: LD_VAR 0 9
51676: ARRAY
51677: PUSH
51678: LD_INT 1
51680: ARRAY
51681: PPUSH
51682: LD_VAR 0 14
51686: PUSH
51687: LD_VAR 0 9
51691: ARRAY
51692: PUSH
51693: LD_INT 2
51695: ARRAY
51696: PPUSH
51697: CALL_OW 488
51701: NOT
51702: OR
51703: PUSH
51704: LD_VAR 0 13
51708: PPUSH
51709: CALL_OW 247
51713: PUSH
51714: LD_INT 3
51716: EQUAL
51717: OR
51718: IFFALSE 51724
// exit ;
51720: POP
51721: POP
51722: GO 52268
// if not tmp then
51724: LD_VAR 0 13
51728: NOT
51729: IFFALSE 51733
// continue ;
51731: GO 51589
// result := true ;
51733: LD_ADDR_VAR 0 8
51737: PUSH
51738: LD_INT 1
51740: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51741: LD_VAR 0 6
51745: PUSH
51746: LD_VAR 0 13
51750: PPUSH
51751: CALL_OW 247
51755: PUSH
51756: LD_INT 2
51758: EQUAL
51759: AND
51760: PUSH
51761: LD_VAR 0 13
51765: PPUSH
51766: CALL_OW 263
51770: PUSH
51771: LD_INT 1
51773: EQUAL
51774: AND
51775: IFFALSE 51939
// begin if IsDrivenBy ( tmp ) then
51777: LD_VAR 0 13
51781: PPUSH
51782: CALL_OW 311
51786: IFFALSE 51790
// continue ;
51788: GO 51589
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51790: LD_VAR 0 6
51794: PPUSH
51795: LD_INT 3
51797: PUSH
51798: LD_INT 60
51800: PUSH
51801: EMPTY
51802: LIST
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 3
51810: PUSH
51811: LD_INT 55
51813: PUSH
51814: EMPTY
51815: LIST
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PPUSH
51825: CALL_OW 72
51829: IFFALSE 51937
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51831: LD_ADDR_VAR 0 18
51835: PUSH
51836: LD_VAR 0 6
51840: PPUSH
51841: LD_INT 3
51843: PUSH
51844: LD_INT 60
51846: PUSH
51847: EMPTY
51848: LIST
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 3
51856: PUSH
51857: LD_INT 55
51859: PUSH
51860: EMPTY
51861: LIST
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PPUSH
51871: CALL_OW 72
51875: PUSH
51876: LD_INT 1
51878: ARRAY
51879: ST_TO_ADDR
// if IsInUnit ( driver ) then
51880: LD_VAR 0 18
51884: PPUSH
51885: CALL_OW 310
51889: IFFALSE 51900
// ComExit ( driver ) ;
51891: LD_VAR 0 18
51895: PPUSH
51896: CALL 77322 0 1
// AddComEnterUnit ( driver , tmp ) ;
51900: LD_VAR 0 18
51904: PPUSH
51905: LD_VAR 0 13
51909: PPUSH
51910: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51914: LD_VAR 0 18
51918: PPUSH
51919: LD_VAR 0 7
51923: PPUSH
51924: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51928: LD_VAR 0 18
51932: PPUSH
51933: CALL_OW 181
// end ; continue ;
51937: GO 51589
// end ; if not cleaners or not tmp in cleaners then
51939: LD_VAR 0 6
51943: NOT
51944: PUSH
51945: LD_VAR 0 13
51949: PUSH
51950: LD_VAR 0 6
51954: IN
51955: NOT
51956: OR
51957: IFFALSE 52264
// begin if dep then
51959: LD_VAR 0 17
51963: IFFALSE 52099
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51965: LD_ADDR_VAR 0 16
51969: PUSH
51970: LD_VAR 0 17
51974: PUSH
51975: LD_INT 1
51977: ARRAY
51978: PPUSH
51979: CALL_OW 250
51983: PPUSH
51984: LD_VAR 0 17
51988: PUSH
51989: LD_INT 1
51991: ARRAY
51992: PPUSH
51993: CALL_OW 254
51997: PPUSH
51998: LD_INT 5
52000: PPUSH
52001: CALL_OW 272
52005: PUSH
52006: LD_VAR 0 17
52010: PUSH
52011: LD_INT 1
52013: ARRAY
52014: PPUSH
52015: CALL_OW 251
52019: PPUSH
52020: LD_VAR 0 17
52024: PUSH
52025: LD_INT 1
52027: ARRAY
52028: PPUSH
52029: CALL_OW 254
52033: PPUSH
52034: LD_INT 5
52036: PPUSH
52037: CALL_OW 273
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52046: LD_VAR 0 16
52050: PUSH
52051: LD_INT 1
52053: ARRAY
52054: PPUSH
52055: LD_VAR 0 16
52059: PUSH
52060: LD_INT 2
52062: ARRAY
52063: PPUSH
52064: CALL_OW 488
52068: IFFALSE 52099
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52070: LD_VAR 0 13
52074: PPUSH
52075: LD_VAR 0 16
52079: PUSH
52080: LD_INT 1
52082: ARRAY
52083: PPUSH
52084: LD_VAR 0 16
52088: PUSH
52089: LD_INT 2
52091: ARRAY
52092: PPUSH
52093: CALL_OW 111
// continue ;
52097: GO 51589
// end ; end ; r := GetDir ( tmp ) ;
52099: LD_ADDR_VAR 0 15
52103: PUSH
52104: LD_VAR 0 13
52108: PPUSH
52109: CALL_OW 254
52113: ST_TO_ADDR
// if r = 5 then
52114: LD_VAR 0 15
52118: PUSH
52119: LD_INT 5
52121: EQUAL
52122: IFFALSE 52132
// r := 0 ;
52124: LD_ADDR_VAR 0 15
52128: PUSH
52129: LD_INT 0
52131: ST_TO_ADDR
// for j = r to 5 do
52132: LD_ADDR_VAR 0 10
52136: PUSH
52137: DOUBLE
52138: LD_VAR 0 15
52142: DEC
52143: ST_TO_ADDR
52144: LD_INT 5
52146: PUSH
52147: FOR_TO
52148: IFFALSE 52262
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52150: LD_ADDR_VAR 0 11
52154: PUSH
52155: LD_VAR 0 13
52159: PPUSH
52160: CALL_OW 250
52164: PPUSH
52165: LD_VAR 0 10
52169: PPUSH
52170: LD_INT 2
52172: PPUSH
52173: CALL_OW 272
52177: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52178: LD_ADDR_VAR 0 12
52182: PUSH
52183: LD_VAR 0 13
52187: PPUSH
52188: CALL_OW 251
52192: PPUSH
52193: LD_VAR 0 10
52197: PPUSH
52198: LD_INT 2
52200: PPUSH
52201: CALL_OW 273
52205: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52206: LD_VAR 0 11
52210: PPUSH
52211: LD_VAR 0 12
52215: PPUSH
52216: CALL_OW 488
52220: PUSH
52221: LD_VAR 0 11
52225: PPUSH
52226: LD_VAR 0 12
52230: PPUSH
52231: CALL_OW 428
52235: NOT
52236: AND
52237: IFFALSE 52260
// begin ComMoveXY ( tmp , _x , _y ) ;
52239: LD_VAR 0 13
52243: PPUSH
52244: LD_VAR 0 11
52248: PPUSH
52249: LD_VAR 0 12
52253: PPUSH
52254: CALL_OW 111
// break ;
52258: GO 52262
// end ; end ;
52260: GO 52147
52262: POP
52263: POP
// end ; end ;
52264: GO 51589
52266: POP
52267: POP
// end ;
52268: LD_VAR 0 8
52272: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52273: LD_INT 0
52275: PPUSH
// result := true ;
52276: LD_ADDR_VAR 0 3
52280: PUSH
52281: LD_INT 1
52283: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52284: LD_VAR 0 2
52288: PUSH
52289: LD_INT 24
52291: DOUBLE
52292: EQUAL
52293: IFTRUE 52303
52295: LD_INT 33
52297: DOUBLE
52298: EQUAL
52299: IFTRUE 52303
52301: GO 52328
52303: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52304: LD_ADDR_VAR 0 3
52308: PUSH
52309: LD_INT 32
52311: PPUSH
52312: LD_VAR 0 1
52316: PPUSH
52317: CALL_OW 321
52321: PUSH
52322: LD_INT 2
52324: EQUAL
52325: ST_TO_ADDR
52326: GO 52644
52328: LD_INT 20
52330: DOUBLE
52331: EQUAL
52332: IFTRUE 52336
52334: GO 52361
52336: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52337: LD_ADDR_VAR 0 3
52341: PUSH
52342: LD_INT 6
52344: PPUSH
52345: LD_VAR 0 1
52349: PPUSH
52350: CALL_OW 321
52354: PUSH
52355: LD_INT 2
52357: EQUAL
52358: ST_TO_ADDR
52359: GO 52644
52361: LD_INT 22
52363: DOUBLE
52364: EQUAL
52365: IFTRUE 52375
52367: LD_INT 36
52369: DOUBLE
52370: EQUAL
52371: IFTRUE 52375
52373: GO 52400
52375: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52376: LD_ADDR_VAR 0 3
52380: PUSH
52381: LD_INT 15
52383: PPUSH
52384: LD_VAR 0 1
52388: PPUSH
52389: CALL_OW 321
52393: PUSH
52394: LD_INT 2
52396: EQUAL
52397: ST_TO_ADDR
52398: GO 52644
52400: LD_INT 30
52402: DOUBLE
52403: EQUAL
52404: IFTRUE 52408
52406: GO 52433
52408: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52409: LD_ADDR_VAR 0 3
52413: PUSH
52414: LD_INT 20
52416: PPUSH
52417: LD_VAR 0 1
52421: PPUSH
52422: CALL_OW 321
52426: PUSH
52427: LD_INT 2
52429: EQUAL
52430: ST_TO_ADDR
52431: GO 52644
52433: LD_INT 28
52435: DOUBLE
52436: EQUAL
52437: IFTRUE 52447
52439: LD_INT 21
52441: DOUBLE
52442: EQUAL
52443: IFTRUE 52447
52445: GO 52472
52447: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52448: LD_ADDR_VAR 0 3
52452: PUSH
52453: LD_INT 21
52455: PPUSH
52456: LD_VAR 0 1
52460: PPUSH
52461: CALL_OW 321
52465: PUSH
52466: LD_INT 2
52468: EQUAL
52469: ST_TO_ADDR
52470: GO 52644
52472: LD_INT 16
52474: DOUBLE
52475: EQUAL
52476: IFTRUE 52480
52478: GO 52505
52480: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52481: LD_ADDR_VAR 0 3
52485: PUSH
52486: LD_INT 84
52488: PPUSH
52489: LD_VAR 0 1
52493: PPUSH
52494: CALL_OW 321
52498: PUSH
52499: LD_INT 2
52501: EQUAL
52502: ST_TO_ADDR
52503: GO 52644
52505: LD_INT 19
52507: DOUBLE
52508: EQUAL
52509: IFTRUE 52519
52511: LD_INT 23
52513: DOUBLE
52514: EQUAL
52515: IFTRUE 52519
52517: GO 52544
52519: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52520: LD_ADDR_VAR 0 3
52524: PUSH
52525: LD_INT 83
52527: PPUSH
52528: LD_VAR 0 1
52532: PPUSH
52533: CALL_OW 321
52537: PUSH
52538: LD_INT 2
52540: EQUAL
52541: ST_TO_ADDR
52542: GO 52644
52544: LD_INT 17
52546: DOUBLE
52547: EQUAL
52548: IFTRUE 52552
52550: GO 52577
52552: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52553: LD_ADDR_VAR 0 3
52557: PUSH
52558: LD_INT 39
52560: PPUSH
52561: LD_VAR 0 1
52565: PPUSH
52566: CALL_OW 321
52570: PUSH
52571: LD_INT 2
52573: EQUAL
52574: ST_TO_ADDR
52575: GO 52644
52577: LD_INT 18
52579: DOUBLE
52580: EQUAL
52581: IFTRUE 52585
52583: GO 52610
52585: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52586: LD_ADDR_VAR 0 3
52590: PUSH
52591: LD_INT 40
52593: PPUSH
52594: LD_VAR 0 1
52598: PPUSH
52599: CALL_OW 321
52603: PUSH
52604: LD_INT 2
52606: EQUAL
52607: ST_TO_ADDR
52608: GO 52644
52610: LD_INT 27
52612: DOUBLE
52613: EQUAL
52614: IFTRUE 52618
52616: GO 52643
52618: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52619: LD_ADDR_VAR 0 3
52623: PUSH
52624: LD_INT 35
52626: PPUSH
52627: LD_VAR 0 1
52631: PPUSH
52632: CALL_OW 321
52636: PUSH
52637: LD_INT 2
52639: EQUAL
52640: ST_TO_ADDR
52641: GO 52644
52643: POP
// end ;
52644: LD_VAR 0 3
52648: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52649: LD_INT 0
52651: PPUSH
52652: PPUSH
52653: PPUSH
52654: PPUSH
52655: PPUSH
52656: PPUSH
52657: PPUSH
52658: PPUSH
52659: PPUSH
52660: PPUSH
52661: PPUSH
// result := false ;
52662: LD_ADDR_VAR 0 6
52666: PUSH
52667: LD_INT 0
52669: ST_TO_ADDR
// if btype = b_depot then
52670: LD_VAR 0 2
52674: PUSH
52675: LD_INT 0
52677: EQUAL
52678: IFFALSE 52690
// begin result := true ;
52680: LD_ADDR_VAR 0 6
52684: PUSH
52685: LD_INT 1
52687: ST_TO_ADDR
// exit ;
52688: GO 53516
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52690: LD_VAR 0 1
52694: NOT
52695: PUSH
52696: LD_VAR 0 1
52700: PPUSH
52701: CALL_OW 266
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: LD_INT 1
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: IN
52716: NOT
52717: OR
52718: PUSH
52719: LD_VAR 0 2
52723: NOT
52724: OR
52725: PUSH
52726: LD_VAR 0 5
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: LD_INT 1
52736: PUSH
52737: LD_INT 2
52739: PUSH
52740: LD_INT 3
52742: PUSH
52743: LD_INT 4
52745: PUSH
52746: LD_INT 5
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: IN
52757: NOT
52758: OR
52759: PUSH
52760: LD_VAR 0 3
52764: PPUSH
52765: LD_VAR 0 4
52769: PPUSH
52770: CALL_OW 488
52774: NOT
52775: OR
52776: IFFALSE 52780
// exit ;
52778: GO 53516
// side := GetSide ( depot ) ;
52780: LD_ADDR_VAR 0 9
52784: PUSH
52785: LD_VAR 0 1
52789: PPUSH
52790: CALL_OW 255
52794: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52795: LD_VAR 0 9
52799: PPUSH
52800: LD_VAR 0 2
52804: PPUSH
52805: CALL 52273 0 2
52809: NOT
52810: IFFALSE 52814
// exit ;
52812: GO 53516
// pom := GetBase ( depot ) ;
52814: LD_ADDR_VAR 0 10
52818: PUSH
52819: LD_VAR 0 1
52823: PPUSH
52824: CALL_OW 274
52828: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52829: LD_ADDR_VAR 0 11
52833: PUSH
52834: LD_VAR 0 2
52838: PPUSH
52839: LD_VAR 0 1
52843: PPUSH
52844: CALL_OW 248
52848: PPUSH
52849: CALL_OW 450
52853: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52854: LD_VAR 0 10
52858: PPUSH
52859: LD_INT 1
52861: PPUSH
52862: CALL_OW 275
52866: PUSH
52867: LD_VAR 0 11
52871: PUSH
52872: LD_INT 1
52874: ARRAY
52875: GREATEREQUAL
52876: PUSH
52877: LD_VAR 0 10
52881: PPUSH
52882: LD_INT 2
52884: PPUSH
52885: CALL_OW 275
52889: PUSH
52890: LD_VAR 0 11
52894: PUSH
52895: LD_INT 2
52897: ARRAY
52898: GREATEREQUAL
52899: AND
52900: PUSH
52901: LD_VAR 0 10
52905: PPUSH
52906: LD_INT 3
52908: PPUSH
52909: CALL_OW 275
52913: PUSH
52914: LD_VAR 0 11
52918: PUSH
52919: LD_INT 3
52921: ARRAY
52922: GREATEREQUAL
52923: AND
52924: NOT
52925: IFFALSE 52929
// exit ;
52927: GO 53516
// if GetBType ( depot ) = b_depot then
52929: LD_VAR 0 1
52933: PPUSH
52934: CALL_OW 266
52938: PUSH
52939: LD_INT 0
52941: EQUAL
52942: IFFALSE 52954
// dist := 28 else
52944: LD_ADDR_VAR 0 14
52948: PUSH
52949: LD_INT 28
52951: ST_TO_ADDR
52952: GO 52962
// dist := 36 ;
52954: LD_ADDR_VAR 0 14
52958: PUSH
52959: LD_INT 36
52961: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52962: LD_VAR 0 1
52966: PPUSH
52967: LD_VAR 0 3
52971: PPUSH
52972: LD_VAR 0 4
52976: PPUSH
52977: CALL_OW 297
52981: PUSH
52982: LD_VAR 0 14
52986: GREATER
52987: IFFALSE 52991
// exit ;
52989: GO 53516
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52991: LD_ADDR_VAR 0 12
52995: PUSH
52996: LD_VAR 0 2
53000: PPUSH
53001: LD_VAR 0 3
53005: PPUSH
53006: LD_VAR 0 4
53010: PPUSH
53011: LD_VAR 0 5
53015: PPUSH
53016: LD_VAR 0 1
53020: PPUSH
53021: CALL_OW 248
53025: PPUSH
53026: LD_INT 0
53028: PPUSH
53029: CALL 53521 0 6
53033: ST_TO_ADDR
// if not hexes then
53034: LD_VAR 0 12
53038: NOT
53039: IFFALSE 53043
// exit ;
53041: GO 53516
// hex := GetHexInfo ( x , y ) ;
53043: LD_ADDR_VAR 0 15
53047: PUSH
53048: LD_VAR 0 3
53052: PPUSH
53053: LD_VAR 0 4
53057: PPUSH
53058: CALL_OW 546
53062: ST_TO_ADDR
// if hex [ 1 ] then
53063: LD_VAR 0 15
53067: PUSH
53068: LD_INT 1
53070: ARRAY
53071: IFFALSE 53075
// exit ;
53073: GO 53516
// height := hex [ 2 ] ;
53075: LD_ADDR_VAR 0 13
53079: PUSH
53080: LD_VAR 0 15
53084: PUSH
53085: LD_INT 2
53087: ARRAY
53088: ST_TO_ADDR
// for i = 1 to hexes do
53089: LD_ADDR_VAR 0 7
53093: PUSH
53094: DOUBLE
53095: LD_INT 1
53097: DEC
53098: ST_TO_ADDR
53099: LD_VAR 0 12
53103: PUSH
53104: FOR_TO
53105: IFFALSE 53435
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53107: LD_VAR 0 12
53111: PUSH
53112: LD_VAR 0 7
53116: ARRAY
53117: PUSH
53118: LD_INT 1
53120: ARRAY
53121: PPUSH
53122: LD_VAR 0 12
53126: PUSH
53127: LD_VAR 0 7
53131: ARRAY
53132: PUSH
53133: LD_INT 2
53135: ARRAY
53136: PPUSH
53137: CALL_OW 488
53141: NOT
53142: PUSH
53143: LD_VAR 0 12
53147: PUSH
53148: LD_VAR 0 7
53152: ARRAY
53153: PUSH
53154: LD_INT 1
53156: ARRAY
53157: PPUSH
53158: LD_VAR 0 12
53162: PUSH
53163: LD_VAR 0 7
53167: ARRAY
53168: PUSH
53169: LD_INT 2
53171: ARRAY
53172: PPUSH
53173: CALL_OW 428
53177: PUSH
53178: LD_INT 0
53180: GREATER
53181: OR
53182: PUSH
53183: LD_VAR 0 12
53187: PUSH
53188: LD_VAR 0 7
53192: ARRAY
53193: PUSH
53194: LD_INT 1
53196: ARRAY
53197: PPUSH
53198: LD_VAR 0 12
53202: PUSH
53203: LD_VAR 0 7
53207: ARRAY
53208: PUSH
53209: LD_INT 2
53211: ARRAY
53212: PPUSH
53213: CALL_OW 351
53217: OR
53218: IFFALSE 53224
// exit ;
53220: POP
53221: POP
53222: GO 53516
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53224: LD_ADDR_VAR 0 8
53228: PUSH
53229: LD_VAR 0 12
53233: PUSH
53234: LD_VAR 0 7
53238: ARRAY
53239: PUSH
53240: LD_INT 1
53242: ARRAY
53243: PPUSH
53244: LD_VAR 0 12
53248: PUSH
53249: LD_VAR 0 7
53253: ARRAY
53254: PUSH
53255: LD_INT 2
53257: ARRAY
53258: PPUSH
53259: CALL_OW 546
53263: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53264: LD_VAR 0 8
53268: PUSH
53269: LD_INT 1
53271: ARRAY
53272: PUSH
53273: LD_VAR 0 8
53277: PUSH
53278: LD_INT 2
53280: ARRAY
53281: PUSH
53282: LD_VAR 0 13
53286: PUSH
53287: LD_INT 2
53289: PLUS
53290: GREATER
53291: OR
53292: PUSH
53293: LD_VAR 0 8
53297: PUSH
53298: LD_INT 2
53300: ARRAY
53301: PUSH
53302: LD_VAR 0 13
53306: PUSH
53307: LD_INT 2
53309: MINUS
53310: LESS
53311: OR
53312: PUSH
53313: LD_VAR 0 8
53317: PUSH
53318: LD_INT 3
53320: ARRAY
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: LD_INT 8
53327: PUSH
53328: LD_INT 9
53330: PUSH
53331: LD_INT 10
53333: PUSH
53334: LD_INT 11
53336: PUSH
53337: LD_INT 12
53339: PUSH
53340: LD_INT 13
53342: PUSH
53343: LD_INT 16
53345: PUSH
53346: LD_INT 17
53348: PUSH
53349: LD_INT 18
53351: PUSH
53352: LD_INT 19
53354: PUSH
53355: LD_INT 20
53357: PUSH
53358: LD_INT 21
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: IN
53376: NOT
53377: OR
53378: PUSH
53379: LD_VAR 0 8
53383: PUSH
53384: LD_INT 5
53386: ARRAY
53387: NOT
53388: OR
53389: PUSH
53390: LD_VAR 0 8
53394: PUSH
53395: LD_INT 6
53397: ARRAY
53398: PUSH
53399: LD_INT 1
53401: PUSH
53402: LD_INT 2
53404: PUSH
53405: LD_INT 7
53407: PUSH
53408: LD_INT 9
53410: PUSH
53411: LD_INT 10
53413: PUSH
53414: LD_INT 11
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: IN
53425: NOT
53426: OR
53427: IFFALSE 53433
// exit ;
53429: POP
53430: POP
53431: GO 53516
// end ;
53433: GO 53104
53435: POP
53436: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53437: LD_VAR 0 9
53441: PPUSH
53442: LD_VAR 0 3
53446: PPUSH
53447: LD_VAR 0 4
53451: PPUSH
53452: LD_INT 20
53454: PPUSH
53455: CALL 45439 0 4
53459: PUSH
53460: LD_INT 4
53462: ARRAY
53463: IFFALSE 53467
// exit ;
53465: GO 53516
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53467: LD_VAR 0 2
53471: PUSH
53472: LD_INT 29
53474: PUSH
53475: LD_INT 30
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: IN
53482: PUSH
53483: LD_VAR 0 3
53487: PPUSH
53488: LD_VAR 0 4
53492: PPUSH
53493: LD_VAR 0 9
53497: PPUSH
53498: CALL_OW 440
53502: NOT
53503: AND
53504: IFFALSE 53508
// exit ;
53506: GO 53516
// result := true ;
53508: LD_ADDR_VAR 0 6
53512: PUSH
53513: LD_INT 1
53515: ST_TO_ADDR
// end ;
53516: LD_VAR 0 6
53520: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53521: LD_INT 0
53523: PPUSH
53524: PPUSH
53525: PPUSH
53526: PPUSH
53527: PPUSH
53528: PPUSH
53529: PPUSH
53530: PPUSH
53531: PPUSH
53532: PPUSH
53533: PPUSH
53534: PPUSH
53535: PPUSH
53536: PPUSH
53537: PPUSH
53538: PPUSH
53539: PPUSH
53540: PPUSH
53541: PPUSH
53542: PPUSH
53543: PPUSH
53544: PPUSH
53545: PPUSH
53546: PPUSH
53547: PPUSH
53548: PPUSH
53549: PPUSH
53550: PPUSH
53551: PPUSH
53552: PPUSH
53553: PPUSH
53554: PPUSH
53555: PPUSH
53556: PPUSH
53557: PPUSH
53558: PPUSH
53559: PPUSH
53560: PPUSH
53561: PPUSH
53562: PPUSH
53563: PPUSH
53564: PPUSH
53565: PPUSH
53566: PPUSH
53567: PPUSH
53568: PPUSH
53569: PPUSH
53570: PPUSH
53571: PPUSH
53572: PPUSH
53573: PPUSH
53574: PPUSH
53575: PPUSH
53576: PPUSH
53577: PPUSH
53578: PPUSH
53579: PPUSH
53580: PPUSH
// result = [ ] ;
53581: LD_ADDR_VAR 0 7
53585: PUSH
53586: EMPTY
53587: ST_TO_ADDR
// temp_list = [ ] ;
53588: LD_ADDR_VAR 0 9
53592: PUSH
53593: EMPTY
53594: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53595: LD_VAR 0 4
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: LD_INT 2
53608: PUSH
53609: LD_INT 3
53611: PUSH
53612: LD_INT 4
53614: PUSH
53615: LD_INT 5
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: IN
53626: NOT
53627: PUSH
53628: LD_VAR 0 1
53632: PUSH
53633: LD_INT 0
53635: PUSH
53636: LD_INT 1
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: IN
53643: PUSH
53644: LD_VAR 0 5
53648: PUSH
53649: LD_INT 1
53651: PUSH
53652: LD_INT 2
53654: PUSH
53655: LD_INT 3
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: LIST
53662: IN
53663: NOT
53664: AND
53665: OR
53666: IFFALSE 53670
// exit ;
53668: GO 72061
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53670: LD_VAR 0 1
53674: PUSH
53675: LD_INT 6
53677: PUSH
53678: LD_INT 7
53680: PUSH
53681: LD_INT 8
53683: PUSH
53684: LD_INT 13
53686: PUSH
53687: LD_INT 12
53689: PUSH
53690: LD_INT 15
53692: PUSH
53693: LD_INT 11
53695: PUSH
53696: LD_INT 14
53698: PUSH
53699: LD_INT 10
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: IN
53713: IFFALSE 53723
// btype = b_lab ;
53715: LD_ADDR_VAR 0 1
53719: PUSH
53720: LD_INT 6
53722: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53723: LD_VAR 0 6
53727: PUSH
53728: LD_INT 0
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: LD_INT 2
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: LIST
53741: IN
53742: NOT
53743: PUSH
53744: LD_VAR 0 1
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: LD_INT 1
53754: PUSH
53755: LD_INT 2
53757: PUSH
53758: LD_INT 3
53760: PUSH
53761: LD_INT 6
53763: PUSH
53764: LD_INT 36
53766: PUSH
53767: LD_INT 4
53769: PUSH
53770: LD_INT 5
53772: PUSH
53773: LD_INT 31
53775: PUSH
53776: LD_INT 32
53778: PUSH
53779: LD_INT 33
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: IN
53795: NOT
53796: PUSH
53797: LD_VAR 0 6
53801: PUSH
53802: LD_INT 1
53804: EQUAL
53805: AND
53806: OR
53807: PUSH
53808: LD_VAR 0 1
53812: PUSH
53813: LD_INT 2
53815: PUSH
53816: LD_INT 3
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: IN
53823: NOT
53824: PUSH
53825: LD_VAR 0 6
53829: PUSH
53830: LD_INT 2
53832: EQUAL
53833: AND
53834: OR
53835: IFFALSE 53845
// mode = 0 ;
53837: LD_ADDR_VAR 0 6
53841: PUSH
53842: LD_INT 0
53844: ST_TO_ADDR
// case mode of 0 :
53845: LD_VAR 0 6
53849: PUSH
53850: LD_INT 0
53852: DOUBLE
53853: EQUAL
53854: IFTRUE 53858
53856: GO 65311
53858: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53859: LD_ADDR_VAR 0 11
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: LD_INT 1
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 1
53887: PUSH
53888: LD_INT 0
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 1
53897: PUSH
53898: LD_INT 1
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 1
53917: NEG
53918: PUSH
53919: LD_INT 0
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: NEG
53929: PUSH
53930: LD_INT 1
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 1
53940: NEG
53941: PUSH
53942: LD_INT 2
53944: NEG
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: LD_INT 2
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 1
53963: PUSH
53964: LD_INT 1
53966: NEG
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 1
53974: PUSH
53975: LD_INT 2
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: LD_INT 2
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 1
53994: NEG
53995: PUSH
53996: LD_INT 1
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 1
54005: PUSH
54006: LD_INT 3
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 0
54015: PUSH
54016: LD_INT 3
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 1
54025: NEG
54026: PUSH
54027: LD_INT 2
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54052: LD_ADDR_VAR 0 12
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: LD_INT 1
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 1
54080: PUSH
54081: LD_INT 0
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 1
54090: PUSH
54091: LD_INT 1
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 0
54100: PUSH
54101: LD_INT 1
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 1
54110: NEG
54111: PUSH
54112: LD_INT 0
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 1
54121: NEG
54122: PUSH
54123: LD_INT 1
54125: NEG
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: LD_INT 1
54136: NEG
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 2
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 2
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 1
54164: NEG
54165: PUSH
54166: LD_INT 1
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 2
54175: NEG
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 2
54186: NEG
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 2
54198: NEG
54199: PUSH
54200: LD_INT 1
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 3
54209: NEG
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 3
54220: NEG
54221: PUSH
54222: LD_INT 1
54224: NEG
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54248: LD_ADDR_VAR 0 13
54252: PUSH
54253: LD_INT 0
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: LD_INT 1
54268: NEG
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 1
54276: PUSH
54277: LD_INT 0
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 1
54286: PUSH
54287: LD_INT 1
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 0
54296: PUSH
54297: LD_INT 1
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: PUSH
54308: LD_INT 0
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 1
54317: NEG
54318: PUSH
54319: LD_INT 1
54321: NEG
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 1
54329: NEG
54330: PUSH
54331: LD_INT 2
54333: NEG
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 2
54341: PUSH
54342: LD_INT 1
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 2
54351: PUSH
54352: LD_INT 2
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: LD_INT 2
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 2
54371: NEG
54372: PUSH
54373: LD_INT 1
54375: NEG
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 2
54383: NEG
54384: PUSH
54385: LD_INT 2
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 2
54395: NEG
54396: PUSH
54397: LD_INT 3
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 3
54407: NEG
54408: PUSH
54409: LD_INT 2
54411: NEG
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 3
54419: NEG
54420: PUSH
54421: LD_INT 3
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54447: LD_ADDR_VAR 0 14
54451: PUSH
54452: LD_INT 0
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 0
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 1
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 1
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: LD_INT 1
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: LD_INT 0
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 1
54516: NEG
54517: PUSH
54518: LD_INT 1
54520: NEG
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 1
54528: NEG
54529: PUSH
54530: LD_INT 2
54532: NEG
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 0
54540: PUSH
54541: LD_INT 2
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: LD_INT 2
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: LD_INT 2
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 1
54582: NEG
54583: PUSH
54584: LD_INT 1
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 1
54593: NEG
54594: PUSH
54595: LD_INT 3
54597: NEG
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 0
54605: PUSH
54606: LD_INT 3
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 1
54616: PUSH
54617: LD_INT 2
54619: NEG
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54643: LD_ADDR_VAR 0 15
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 0
54660: PUSH
54661: LD_INT 1
54663: NEG
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 1
54671: PUSH
54672: LD_INT 0
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: LD_INT 1
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: LD_INT 1
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 1
54701: NEG
54702: PUSH
54703: LD_INT 0
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 1
54712: NEG
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 1
54724: PUSH
54725: LD_INT 1
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 2
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 2
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: LD_INT 1
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 2
54766: NEG
54767: PUSH
54768: LD_INT 0
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 2
54777: NEG
54778: PUSH
54779: LD_INT 1
54781: NEG
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 2
54789: PUSH
54790: LD_INT 1
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 3
54800: PUSH
54801: LD_INT 0
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 3
54810: PUSH
54811: LD_INT 1
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54836: LD_ADDR_VAR 0 16
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 1
54864: PUSH
54865: LD_INT 0
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 1
54874: PUSH
54875: LD_INT 1
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 0
54884: PUSH
54885: LD_INT 1
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: LD_INT 0
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 1
54905: NEG
54906: PUSH
54907: LD_INT 1
54909: NEG
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 1
54917: NEG
54918: PUSH
54919: LD_INT 2
54921: NEG
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 2
54929: PUSH
54930: LD_INT 1
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 2
54939: PUSH
54940: LD_INT 2
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 1
54949: PUSH
54950: LD_INT 2
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 2
54959: NEG
54960: PUSH
54961: LD_INT 1
54963: NEG
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 2
54971: NEG
54972: PUSH
54973: LD_INT 2
54975: NEG
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 3
54983: PUSH
54984: LD_INT 2
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 3
54993: PUSH
54994: LD_INT 3
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 2
55003: PUSH
55004: LD_INT 3
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55029: LD_ADDR_VAR 0 17
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: LD_INT 0
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: LD_INT 1
55049: NEG
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: LD_INT 1
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 0
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 1
55087: NEG
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: NEG
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 1
55110: NEG
55111: PUSH
55112: LD_INT 2
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: LD_INT 2
55125: NEG
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: LD_INT 1
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 2
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 2
55154: PUSH
55155: LD_INT 1
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 2
55164: PUSH
55165: LD_INT 2
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: PUSH
55175: LD_INT 2
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 0
55184: PUSH
55185: LD_INT 2
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 1
55194: NEG
55195: PUSH
55196: LD_INT 1
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 2
55205: NEG
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 2
55216: NEG
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 2
55228: NEG
55229: PUSH
55230: LD_INT 2
55232: NEG
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55259: LD_ADDR_VAR 0 18
55263: PUSH
55264: LD_INT 0
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 0
55276: PUSH
55277: LD_INT 1
55279: NEG
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 1
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 1
55297: PUSH
55298: LD_INT 1
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 0
55307: PUSH
55308: LD_INT 1
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 1
55317: NEG
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 1
55328: NEG
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 1
55340: NEG
55341: PUSH
55342: LD_INT 2
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: LD_INT 2
55355: NEG
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 1
55363: PUSH
55364: LD_INT 1
55366: NEG
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 2
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 2
55384: PUSH
55385: LD_INT 1
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 2
55394: PUSH
55395: LD_INT 2
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: LD_INT 2
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 0
55414: PUSH
55415: LD_INT 2
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 1
55424: NEG
55425: PUSH
55426: LD_INT 1
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 2
55435: NEG
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 2
55446: NEG
55447: PUSH
55448: LD_INT 1
55450: NEG
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 2
55458: NEG
55459: PUSH
55460: LD_INT 2
55462: NEG
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55489: LD_ADDR_VAR 0 19
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: LD_INT 0
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 0
55506: PUSH
55507: LD_INT 1
55509: NEG
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 1
55527: PUSH
55528: LD_INT 1
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: LD_INT 1
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 1
55558: NEG
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 1
55570: NEG
55571: PUSH
55572: LD_INT 2
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: LD_INT 2
55585: NEG
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 1
55593: PUSH
55594: LD_INT 1
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 2
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 2
55614: PUSH
55615: LD_INT 1
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 2
55624: PUSH
55625: LD_INT 2
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 1
55634: PUSH
55635: LD_INT 2
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: LD_INT 2
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 1
55654: NEG
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 2
55665: NEG
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 2
55676: NEG
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 2
55688: NEG
55689: PUSH
55690: LD_INT 2
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55719: LD_ADDR_VAR 0 20
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: LD_INT 1
55739: NEG
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 0
55767: PUSH
55768: LD_INT 1
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 1
55788: NEG
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 1
55800: NEG
55801: PUSH
55802: LD_INT 2
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: LD_INT 2
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: PUSH
55824: LD_INT 1
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 2
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 2
55844: PUSH
55845: LD_INT 1
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 2
55854: PUSH
55855: LD_INT 2
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: LD_INT 2
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 0
55874: PUSH
55875: LD_INT 2
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 1
55884: NEG
55885: PUSH
55886: LD_INT 1
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 2
55895: NEG
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 2
55906: NEG
55907: PUSH
55908: LD_INT 1
55910: NEG
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 2
55918: NEG
55919: PUSH
55920: LD_INT 2
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55949: LD_ADDR_VAR 0 21
55953: PUSH
55954: LD_INT 0
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: LD_INT 1
55969: NEG
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 1
55977: PUSH
55978: LD_INT 0
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: LD_INT 1
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 1
56007: NEG
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 1
56018: NEG
56019: PUSH
56020: LD_INT 1
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 1
56030: NEG
56031: PUSH
56032: LD_INT 2
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: LD_INT 2
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: LD_INT 1
56056: NEG
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 2
56064: PUSH
56065: LD_INT 0
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 2
56074: PUSH
56075: LD_INT 1
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 2
56084: PUSH
56085: LD_INT 2
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 1
56094: PUSH
56095: LD_INT 2
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: LD_INT 2
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 1
56114: NEG
56115: PUSH
56116: LD_INT 1
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 2
56125: NEG
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 2
56136: NEG
56137: PUSH
56138: LD_INT 1
56140: NEG
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 2
56148: NEG
56149: PUSH
56150: LD_INT 2
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56179: LD_ADDR_VAR 0 22
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: LD_INT 1
56199: NEG
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: LD_INT 1
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: LD_INT 1
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 1
56237: NEG
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 1
56260: NEG
56261: PUSH
56262: LD_INT 2
56264: NEG
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: LD_INT 2
56275: NEG
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 1
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 2
56294: PUSH
56295: LD_INT 0
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 2
56304: PUSH
56305: LD_INT 1
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 2
56314: PUSH
56315: LD_INT 2
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 1
56324: PUSH
56325: LD_INT 2
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 0
56334: PUSH
56335: LD_INT 2
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: NEG
56345: PUSH
56346: LD_INT 1
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 2
56355: NEG
56356: PUSH
56357: LD_INT 0
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 2
56366: NEG
56367: PUSH
56368: LD_INT 1
56370: NEG
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 2
56378: NEG
56379: PUSH
56380: LD_INT 2
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56409: LD_ADDR_VAR 0 23
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: LD_INT 1
56429: NEG
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 1
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 1
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: LD_INT 1
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 1
56467: NEG
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 1
56478: NEG
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 1
56490: NEG
56491: PUSH
56492: LD_INT 2
56494: NEG
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: LD_INT 2
56505: NEG
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 1
56513: PUSH
56514: LD_INT 1
56516: NEG
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 2
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 2
56534: PUSH
56535: LD_INT 1
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 2
56544: PUSH
56545: LD_INT 2
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 1
56554: PUSH
56555: LD_INT 2
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 0
56564: PUSH
56565: LD_INT 2
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 1
56574: NEG
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 2
56585: NEG
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 2
56596: NEG
56597: PUSH
56598: LD_INT 1
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 2
56608: NEG
56609: PUSH
56610: LD_INT 2
56612: NEG
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 2
56620: NEG
56621: PUSH
56622: LD_INT 3
56624: NEG
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 1
56632: NEG
56633: PUSH
56634: LD_INT 3
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: LD_INT 2
56647: NEG
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 2
56655: PUSH
56656: LD_INT 1
56658: NEG
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56689: LD_ADDR_VAR 0 24
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 0
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 1
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: LD_INT 1
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: LD_INT 1
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 1
56747: NEG
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: LD_INT 1
56762: NEG
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: LD_INT 2
56774: NEG
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: LD_INT 2
56785: NEG
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 1
56793: PUSH
56794: LD_INT 1
56796: NEG
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 2
56804: PUSH
56805: LD_INT 0
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 2
56814: PUSH
56815: LD_INT 1
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 2
56824: PUSH
56825: LD_INT 2
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 1
56834: PUSH
56835: LD_INT 2
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 0
56844: PUSH
56845: LD_INT 2
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 1
56854: NEG
56855: PUSH
56856: LD_INT 1
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 2
56865: NEG
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 2
56876: NEG
56877: PUSH
56878: LD_INT 1
56880: NEG
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 2
56888: NEG
56889: PUSH
56890: LD_INT 2
56892: NEG
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 1
56900: PUSH
56901: LD_INT 2
56903: NEG
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 2
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 3
56922: PUSH
56923: LD_INT 1
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 3
56932: PUSH
56933: LD_INT 2
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56965: LD_ADDR_VAR 0 25
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 0
56982: PUSH
56983: LD_INT 1
56985: NEG
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 1
56993: PUSH
56994: LD_INT 0
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 1
57003: PUSH
57004: LD_INT 1
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 0
57013: PUSH
57014: LD_INT 1
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 1
57023: NEG
57024: PUSH
57025: LD_INT 0
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 1
57034: NEG
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 1
57046: NEG
57047: PUSH
57048: LD_INT 2
57050: NEG
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 0
57058: PUSH
57059: LD_INT 2
57061: NEG
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 1
57069: PUSH
57070: LD_INT 1
57072: NEG
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 2
57080: PUSH
57081: LD_INT 0
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 2
57090: PUSH
57091: LD_INT 1
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 2
57100: PUSH
57101: LD_INT 2
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 1
57110: PUSH
57111: LD_INT 2
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 0
57120: PUSH
57121: LD_INT 2
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 1
57130: NEG
57131: PUSH
57132: LD_INT 1
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 2
57141: NEG
57142: PUSH
57143: LD_INT 0
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 2
57152: NEG
57153: PUSH
57154: LD_INT 1
57156: NEG
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 2
57164: NEG
57165: PUSH
57166: LD_INT 2
57168: NEG
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 3
57176: PUSH
57177: LD_INT 1
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 3
57186: PUSH
57187: LD_INT 2
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 2
57196: PUSH
57197: LD_INT 3
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 1
57206: PUSH
57207: LD_INT 3
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57239: LD_ADDR_VAR 0 26
57243: PUSH
57244: LD_INT 0
57246: PUSH
57247: LD_INT 0
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 0
57256: PUSH
57257: LD_INT 1
57259: NEG
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 1
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 1
57277: PUSH
57278: LD_INT 1
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 0
57287: PUSH
57288: LD_INT 1
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 1
57297: NEG
57298: PUSH
57299: LD_INT 0
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 1
57308: NEG
57309: PUSH
57310: LD_INT 1
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 1
57320: NEG
57321: PUSH
57322: LD_INT 2
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: LD_INT 2
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: LD_INT 1
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 2
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 2
57364: PUSH
57365: LD_INT 1
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 2
57374: PUSH
57375: LD_INT 2
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 1
57384: PUSH
57385: LD_INT 2
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 0
57394: PUSH
57395: LD_INT 2
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 1
57404: NEG
57405: PUSH
57406: LD_INT 1
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 2
57415: NEG
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 2
57426: NEG
57427: PUSH
57428: LD_INT 1
57430: NEG
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 2
57438: NEG
57439: PUSH
57440: LD_INT 2
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 2
57450: PUSH
57451: LD_INT 3
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: LD_INT 3
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 1
57470: NEG
57471: PUSH
57472: LD_INT 2
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 2
57481: NEG
57482: PUSH
57483: LD_INT 1
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57515: LD_ADDR_VAR 0 27
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: LD_INT 0
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 0
57532: PUSH
57533: LD_INT 1
57535: NEG
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: LD_INT 0
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 1
57553: PUSH
57554: LD_INT 1
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: LD_INT 1
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 1
57573: NEG
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 1
57584: NEG
57585: PUSH
57586: LD_INT 1
57588: NEG
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 1
57596: NEG
57597: PUSH
57598: LD_INT 2
57600: NEG
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: LD_INT 2
57611: NEG
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 1
57619: PUSH
57620: LD_INT 1
57622: NEG
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 2
57630: PUSH
57631: LD_INT 0
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 2
57640: PUSH
57641: LD_INT 1
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 2
57650: PUSH
57651: LD_INT 2
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 1
57660: PUSH
57661: LD_INT 2
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 0
57670: PUSH
57671: LD_INT 2
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 1
57680: NEG
57681: PUSH
57682: LD_INT 1
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 2
57691: NEG
57692: PUSH
57693: LD_INT 0
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 2
57702: NEG
57703: PUSH
57704: LD_INT 1
57706: NEG
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 2
57714: NEG
57715: PUSH
57716: LD_INT 2
57718: NEG
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 1
57726: NEG
57727: PUSH
57728: LD_INT 2
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 2
57737: NEG
57738: PUSH
57739: LD_INT 1
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 3
57748: NEG
57749: PUSH
57750: LD_INT 1
57752: NEG
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 3
57760: NEG
57761: PUSH
57762: LD_INT 2
57764: NEG
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57795: LD_ADDR_VAR 0 28
57799: PUSH
57800: LD_INT 0
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: LD_INT 1
57815: NEG
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 1
57823: PUSH
57824: LD_INT 0
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 1
57833: PUSH
57834: LD_INT 1
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 0
57843: PUSH
57844: LD_INT 1
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 1
57853: NEG
57854: PUSH
57855: LD_INT 0
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 1
57864: NEG
57865: PUSH
57866: LD_INT 1
57868: NEG
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 1
57876: NEG
57877: PUSH
57878: LD_INT 2
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 0
57888: PUSH
57889: LD_INT 2
57891: NEG
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 1
57899: PUSH
57900: LD_INT 1
57902: NEG
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 2
57910: PUSH
57911: LD_INT 0
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 2
57920: PUSH
57921: LD_INT 1
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 2
57930: PUSH
57931: LD_INT 2
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 1
57940: PUSH
57941: LD_INT 2
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 0
57950: PUSH
57951: LD_INT 2
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 1
57960: NEG
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 2
57971: NEG
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 2
57982: NEG
57983: PUSH
57984: LD_INT 1
57986: NEG
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 2
57994: NEG
57995: PUSH
57996: LD_INT 2
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 2
58006: NEG
58007: PUSH
58008: LD_INT 3
58010: NEG
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 1
58018: NEG
58019: PUSH
58020: LD_INT 3
58022: NEG
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 3
58030: NEG
58031: PUSH
58032: LD_INT 1
58034: NEG
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 3
58042: NEG
58043: PUSH
58044: LD_INT 2
58046: NEG
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58077: LD_ADDR_VAR 0 29
58081: PUSH
58082: LD_INT 0
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: LD_INT 1
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 1
58105: PUSH
58106: LD_INT 0
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 1
58115: PUSH
58116: LD_INT 1
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 0
58125: PUSH
58126: LD_INT 1
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 1
58135: NEG
58136: PUSH
58137: LD_INT 0
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 1
58146: NEG
58147: PUSH
58148: LD_INT 1
58150: NEG
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 1
58158: NEG
58159: PUSH
58160: LD_INT 2
58162: NEG
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 0
58170: PUSH
58171: LD_INT 2
58173: NEG
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 1
58181: PUSH
58182: LD_INT 1
58184: NEG
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 2
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 2
58202: PUSH
58203: LD_INT 1
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 1
58212: PUSH
58213: LD_INT 2
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 0
58222: PUSH
58223: LD_INT 2
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 1
58232: NEG
58233: PUSH
58234: LD_INT 1
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 2
58243: NEG
58244: PUSH
58245: LD_INT 1
58247: NEG
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 2
58255: NEG
58256: PUSH
58257: LD_INT 2
58259: NEG
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 2
58267: NEG
58268: PUSH
58269: LD_INT 3
58271: NEG
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 2
58279: PUSH
58280: LD_INT 1
58282: NEG
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 3
58290: PUSH
58291: LD_INT 1
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 1
58300: PUSH
58301: LD_INT 3
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 1
58310: NEG
58311: PUSH
58312: LD_INT 2
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 3
58321: NEG
58322: PUSH
58323: LD_INT 2
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58356: LD_ADDR_VAR 0 30
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: LD_INT 0
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 0
58373: PUSH
58374: LD_INT 1
58376: NEG
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 1
58384: PUSH
58385: LD_INT 0
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 1
58394: PUSH
58395: LD_INT 1
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: LD_INT 1
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 1
58414: NEG
58415: PUSH
58416: LD_INT 0
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 1
58425: NEG
58426: PUSH
58427: LD_INT 1
58429: NEG
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 1
58437: NEG
58438: PUSH
58439: LD_INT 2
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 0
58449: PUSH
58450: LD_INT 2
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 1
58460: PUSH
58461: LD_INT 1
58463: NEG
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 2
58471: PUSH
58472: LD_INT 0
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 2
58481: PUSH
58482: LD_INT 1
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 2
58491: PUSH
58492: LD_INT 2
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 1
58501: PUSH
58502: LD_INT 2
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 1
58511: NEG
58512: PUSH
58513: LD_INT 1
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 2
58522: NEG
58523: PUSH
58524: LD_INT 0
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 2
58533: NEG
58534: PUSH
58535: LD_INT 1
58537: NEG
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 1
58545: NEG
58546: PUSH
58547: LD_INT 3
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 1
58557: PUSH
58558: LD_INT 2
58560: NEG
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 3
58568: PUSH
58569: LD_INT 2
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 2
58578: PUSH
58579: LD_INT 3
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 2
58588: NEG
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 3
58599: NEG
58600: PUSH
58601: LD_INT 1
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58634: LD_ADDR_VAR 0 31
58638: PUSH
58639: LD_INT 0
58641: PUSH
58642: LD_INT 0
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 0
58651: PUSH
58652: LD_INT 1
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 1
58662: PUSH
58663: LD_INT 0
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 1
58672: PUSH
58673: LD_INT 1
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 0
58682: PUSH
58683: LD_INT 1
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 1
58692: NEG
58693: PUSH
58694: LD_INT 0
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 1
58703: NEG
58704: PUSH
58705: LD_INT 1
58707: NEG
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 1
58715: NEG
58716: PUSH
58717: LD_INT 2
58719: NEG
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 1
58727: PUSH
58728: LD_INT 1
58730: NEG
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 2
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 2
58748: PUSH
58749: LD_INT 1
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 2
58758: PUSH
58759: LD_INT 2
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 1
58768: PUSH
58769: LD_INT 2
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 0
58778: PUSH
58779: LD_INT 2
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 1
58788: NEG
58789: PUSH
58790: LD_INT 1
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 2
58799: NEG
58800: PUSH
58801: LD_INT 1
58803: NEG
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 2
58811: NEG
58812: PUSH
58813: LD_INT 2
58815: NEG
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 2
58823: NEG
58824: PUSH
58825: LD_INT 3
58827: NEG
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 2
58835: PUSH
58836: LD_INT 1
58838: NEG
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 3
58846: PUSH
58847: LD_INT 1
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 1
58856: PUSH
58857: LD_INT 3
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 1
58866: NEG
58867: PUSH
58868: LD_INT 2
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 3
58877: NEG
58878: PUSH
58879: LD_INT 2
58881: NEG
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58912: LD_ADDR_VAR 0 32
58916: PUSH
58917: LD_INT 0
58919: PUSH
58920: LD_INT 0
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 0
58929: PUSH
58930: LD_INT 1
58932: NEG
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 1
58940: PUSH
58941: LD_INT 0
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 1
58950: PUSH
58951: LD_INT 1
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 0
58960: PUSH
58961: LD_INT 1
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 1
58970: NEG
58971: PUSH
58972: LD_INT 0
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 1
58981: NEG
58982: PUSH
58983: LD_INT 1
58985: NEG
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 1
58993: NEG
58994: PUSH
58995: LD_INT 2
58997: NEG
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 0
59005: PUSH
59006: LD_INT 2
59008: NEG
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 1
59016: PUSH
59017: LD_INT 1
59019: NEG
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 2
59027: PUSH
59028: LD_INT 1
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 2
59037: PUSH
59038: LD_INT 2
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 1
59047: PUSH
59048: LD_INT 2
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 0
59057: PUSH
59058: LD_INT 2
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 1
59067: NEG
59068: PUSH
59069: LD_INT 1
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 2
59078: NEG
59079: PUSH
59080: LD_INT 0
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 2
59089: NEG
59090: PUSH
59091: LD_INT 1
59093: NEG
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 1
59101: NEG
59102: PUSH
59103: LD_INT 3
59105: NEG
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 1
59113: PUSH
59114: LD_INT 2
59116: NEG
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 3
59124: PUSH
59125: LD_INT 2
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 2
59134: PUSH
59135: LD_INT 3
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 2
59144: NEG
59145: PUSH
59146: LD_INT 1
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 3
59155: NEG
59156: PUSH
59157: LD_INT 1
59159: NEG
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59190: LD_ADDR_VAR 0 33
59194: PUSH
59195: LD_INT 0
59197: PUSH
59198: LD_INT 0
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 0
59207: PUSH
59208: LD_INT 1
59210: NEG
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 1
59218: PUSH
59219: LD_INT 0
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 1
59228: PUSH
59229: LD_INT 1
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 0
59238: PUSH
59239: LD_INT 1
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 1
59248: NEG
59249: PUSH
59250: LD_INT 0
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 1
59259: NEG
59260: PUSH
59261: LD_INT 1
59263: NEG
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 1
59271: NEG
59272: PUSH
59273: LD_INT 2
59275: NEG
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 1
59283: PUSH
59284: LD_INT 1
59286: NEG
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 2
59294: PUSH
59295: LD_INT 0
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 2
59304: PUSH
59305: LD_INT 1
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 1
59314: PUSH
59315: LD_INT 2
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 0
59324: PUSH
59325: LD_INT 2
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 1
59334: NEG
59335: PUSH
59336: LD_INT 1
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 2
59345: NEG
59346: PUSH
59347: LD_INT 0
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 2
59356: NEG
59357: PUSH
59358: LD_INT 1
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 2
59368: NEG
59369: PUSH
59370: LD_INT 2
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 2
59380: NEG
59381: PUSH
59382: LD_INT 3
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 2
59392: PUSH
59393: LD_INT 1
59395: NEG
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 3
59403: PUSH
59404: LD_INT 1
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 1
59413: PUSH
59414: LD_INT 3
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 1
59423: NEG
59424: PUSH
59425: LD_INT 2
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 3
59434: NEG
59435: PUSH
59436: LD_INT 2
59438: NEG
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59469: LD_ADDR_VAR 0 34
59473: PUSH
59474: LD_INT 0
59476: PUSH
59477: LD_INT 0
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 0
59486: PUSH
59487: LD_INT 1
59489: NEG
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 1
59497: PUSH
59498: LD_INT 0
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 1
59507: PUSH
59508: LD_INT 1
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 0
59517: PUSH
59518: LD_INT 1
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 1
59527: NEG
59528: PUSH
59529: LD_INT 0
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 1
59538: NEG
59539: PUSH
59540: LD_INT 1
59542: NEG
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 1
59550: NEG
59551: PUSH
59552: LD_INT 2
59554: NEG
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 0
59562: PUSH
59563: LD_INT 2
59565: NEG
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 1
59573: PUSH
59574: LD_INT 1
59576: NEG
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 2
59584: PUSH
59585: LD_INT 1
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 2
59594: PUSH
59595: LD_INT 2
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 1
59604: PUSH
59605: LD_INT 2
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 1
59614: NEG
59615: PUSH
59616: LD_INT 1
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 2
59625: NEG
59626: PUSH
59627: LD_INT 0
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 2
59636: NEG
59637: PUSH
59638: LD_INT 1
59640: NEG
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 2
59648: NEG
59649: PUSH
59650: LD_INT 2
59652: NEG
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 1
59660: NEG
59661: PUSH
59662: LD_INT 3
59664: NEG
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 1
59672: PUSH
59673: LD_INT 2
59675: NEG
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 3
59683: PUSH
59684: LD_INT 2
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 2
59693: PUSH
59694: LD_INT 3
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 2
59703: NEG
59704: PUSH
59705: LD_INT 1
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 3
59714: NEG
59715: PUSH
59716: LD_INT 1
59718: NEG
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59749: LD_ADDR_VAR 0 35
59753: PUSH
59754: LD_INT 0
59756: PUSH
59757: LD_INT 0
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 0
59766: PUSH
59767: LD_INT 1
59769: NEG
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 1
59777: PUSH
59778: LD_INT 0
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 1
59787: PUSH
59788: LD_INT 1
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 0
59797: PUSH
59798: LD_INT 1
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 1
59807: NEG
59808: PUSH
59809: LD_INT 0
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 1
59818: NEG
59819: PUSH
59820: LD_INT 1
59822: NEG
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 2
59830: PUSH
59831: LD_INT 1
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 2
59840: NEG
59841: PUSH
59842: LD_INT 1
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59861: LD_ADDR_VAR 0 36
59865: PUSH
59866: LD_INT 0
59868: PUSH
59869: LD_INT 0
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 0
59878: PUSH
59879: LD_INT 1
59881: NEG
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 1
59889: PUSH
59890: LD_INT 0
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 1
59899: PUSH
59900: LD_INT 1
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 0
59909: PUSH
59910: LD_INT 1
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 1
59919: NEG
59920: PUSH
59921: LD_INT 0
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 1
59930: NEG
59931: PUSH
59932: LD_INT 1
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 1
59942: NEG
59943: PUSH
59944: LD_INT 2
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 1
59954: PUSH
59955: LD_INT 2
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59973: LD_ADDR_VAR 0 37
59977: PUSH
59978: LD_INT 0
59980: PUSH
59981: LD_INT 0
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 0
59990: PUSH
59991: LD_INT 1
59993: NEG
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 1
60001: PUSH
60002: LD_INT 0
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 1
60011: PUSH
60012: LD_INT 1
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 0
60021: PUSH
60022: LD_INT 1
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 1
60031: NEG
60032: PUSH
60033: LD_INT 0
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 1
60042: NEG
60043: PUSH
60044: LD_INT 1
60046: NEG
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 1
60054: PUSH
60055: LD_INT 1
60057: NEG
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 1
60065: NEG
60066: PUSH
60067: LD_INT 1
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60085: LD_ADDR_VAR 0 38
60089: PUSH
60090: LD_INT 0
60092: PUSH
60093: LD_INT 0
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 0
60102: PUSH
60103: LD_INT 1
60105: NEG
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 1
60113: PUSH
60114: LD_INT 0
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 1
60123: PUSH
60124: LD_INT 1
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: LD_INT 1
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 1
60143: NEG
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 1
60154: NEG
60155: PUSH
60156: LD_INT 1
60158: NEG
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 2
60166: PUSH
60167: LD_INT 1
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 2
60176: NEG
60177: PUSH
60178: LD_INT 1
60180: NEG
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60197: LD_ADDR_VAR 0 39
60201: PUSH
60202: LD_INT 0
60204: PUSH
60205: LD_INT 0
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 0
60214: PUSH
60215: LD_INT 1
60217: NEG
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 1
60225: PUSH
60226: LD_INT 0
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 1
60235: PUSH
60236: LD_INT 1
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 0
60245: PUSH
60246: LD_INT 1
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 1
60255: NEG
60256: PUSH
60257: LD_INT 0
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 1
60266: NEG
60267: PUSH
60268: LD_INT 1
60270: NEG
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 1
60278: NEG
60279: PUSH
60280: LD_INT 2
60282: NEG
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 1
60290: PUSH
60291: LD_INT 2
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60309: LD_ADDR_VAR 0 40
60313: PUSH
60314: LD_INT 0
60316: PUSH
60317: LD_INT 0
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 0
60326: PUSH
60327: LD_INT 1
60329: NEG
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 1
60337: PUSH
60338: LD_INT 0
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 1
60347: PUSH
60348: LD_INT 1
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 0
60357: PUSH
60358: LD_INT 1
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 1
60367: NEG
60368: PUSH
60369: LD_INT 0
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 1
60378: NEG
60379: PUSH
60380: LD_INT 1
60382: NEG
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 1
60390: PUSH
60391: LD_INT 1
60393: NEG
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 1
60401: NEG
60402: PUSH
60403: LD_INT 1
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60421: LD_ADDR_VAR 0 41
60425: PUSH
60426: LD_INT 0
60428: PUSH
60429: LD_INT 0
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 0
60438: PUSH
60439: LD_INT 1
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 1
60449: PUSH
60450: LD_INT 0
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 1
60459: PUSH
60460: LD_INT 1
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: LD_INT 1
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 1
60479: NEG
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 1
60490: NEG
60491: PUSH
60492: LD_INT 1
60494: NEG
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 1
60502: NEG
60503: PUSH
60504: LD_INT 2
60506: NEG
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 1
60514: PUSH
60515: LD_INT 1
60517: NEG
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 2
60525: PUSH
60526: LD_INT 0
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 2
60535: PUSH
60536: LD_INT 1
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 2
60545: PUSH
60546: LD_INT 2
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 1
60555: PUSH
60556: LD_INT 2
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 1
60565: NEG
60566: PUSH
60567: LD_INT 1
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 2
60576: NEG
60577: PUSH
60578: LD_INT 0
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 2
60587: NEG
60588: PUSH
60589: LD_INT 1
60591: NEG
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 2
60599: NEG
60600: PUSH
60601: LD_INT 2
60603: NEG
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 2
60611: NEG
60612: PUSH
60613: LD_INT 3
60615: NEG
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 2
60623: PUSH
60624: LD_INT 1
60626: NEG
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 3
60634: PUSH
60635: LD_INT 0
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 3
60644: PUSH
60645: LD_INT 1
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 3
60654: PUSH
60655: LD_INT 2
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 3
60664: PUSH
60665: LD_INT 3
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 2
60674: PUSH
60675: LD_INT 3
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 2
60684: NEG
60685: PUSH
60686: LD_INT 1
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 3
60695: NEG
60696: PUSH
60697: LD_INT 0
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 3
60706: NEG
60707: PUSH
60708: LD_INT 1
60710: NEG
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 3
60718: NEG
60719: PUSH
60720: LD_INT 2
60722: NEG
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 3
60730: NEG
60731: PUSH
60732: LD_INT 3
60734: NEG
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60771: LD_ADDR_VAR 0 42
60775: PUSH
60776: LD_INT 0
60778: PUSH
60779: LD_INT 0
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 0
60788: PUSH
60789: LD_INT 1
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 1
60799: PUSH
60800: LD_INT 0
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 1
60809: PUSH
60810: LD_INT 1
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 0
60819: PUSH
60820: LD_INT 1
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 1
60829: NEG
60830: PUSH
60831: LD_INT 0
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 1
60840: NEG
60841: PUSH
60842: LD_INT 1
60844: NEG
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 1
60852: NEG
60853: PUSH
60854: LD_INT 2
60856: NEG
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 0
60864: PUSH
60865: LD_INT 2
60867: NEG
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 1
60875: PUSH
60876: LD_INT 1
60878: NEG
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 2
60886: PUSH
60887: LD_INT 1
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 2
60896: PUSH
60897: LD_INT 2
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 1
60906: PUSH
60907: LD_INT 2
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: LD_INT 2
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 1
60926: NEG
60927: PUSH
60928: LD_INT 1
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 2
60937: NEG
60938: PUSH
60939: LD_INT 1
60941: NEG
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 2
60949: NEG
60950: PUSH
60951: LD_INT 2
60953: NEG
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 2
60961: NEG
60962: PUSH
60963: LD_INT 3
60965: NEG
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 1
60973: NEG
60974: PUSH
60975: LD_INT 3
60977: NEG
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 0
60985: PUSH
60986: LD_INT 3
60988: NEG
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 1
60996: PUSH
60997: LD_INT 2
60999: NEG
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 3
61007: PUSH
61008: LD_INT 2
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 3
61017: PUSH
61018: LD_INT 3
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 2
61027: PUSH
61028: LD_INT 3
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 1
61037: PUSH
61038: LD_INT 3
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 0
61047: PUSH
61048: LD_INT 3
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 1
61057: NEG
61058: PUSH
61059: LD_INT 2
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 3
61068: NEG
61069: PUSH
61070: LD_INT 2
61072: NEG
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 3
61080: NEG
61081: PUSH
61082: LD_INT 3
61084: NEG
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61121: LD_ADDR_VAR 0 43
61125: PUSH
61126: LD_INT 0
61128: PUSH
61129: LD_INT 0
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 0
61138: PUSH
61139: LD_INT 1
61141: NEG
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 1
61149: PUSH
61150: LD_INT 0
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 1
61159: PUSH
61160: LD_INT 1
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 0
61169: PUSH
61170: LD_INT 1
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 1
61179: NEG
61180: PUSH
61181: LD_INT 0
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 1
61190: NEG
61191: PUSH
61192: LD_INT 1
61194: NEG
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 1
61202: NEG
61203: PUSH
61204: LD_INT 2
61206: NEG
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 0
61214: PUSH
61215: LD_INT 2
61217: NEG
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 1
61225: PUSH
61226: LD_INT 1
61228: NEG
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 2
61236: PUSH
61237: LD_INT 0
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 2
61246: PUSH
61247: LD_INT 1
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 1
61256: PUSH
61257: LD_INT 2
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 0
61266: PUSH
61267: LD_INT 2
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 1
61276: NEG
61277: PUSH
61278: LD_INT 1
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 2
61287: NEG
61288: PUSH
61289: LD_INT 0
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 2
61298: NEG
61299: PUSH
61300: LD_INT 1
61302: NEG
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 1
61310: NEG
61311: PUSH
61312: LD_INT 3
61314: NEG
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 0
61322: PUSH
61323: LD_INT 3
61325: NEG
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 1
61333: PUSH
61334: LD_INT 2
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 2
61344: PUSH
61345: LD_INT 1
61347: NEG
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 3
61355: PUSH
61356: LD_INT 0
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 3
61365: PUSH
61366: LD_INT 1
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 1
61375: PUSH
61376: LD_INT 3
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 0
61385: PUSH
61386: LD_INT 3
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 1
61395: NEG
61396: PUSH
61397: LD_INT 2
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 2
61406: NEG
61407: PUSH
61408: LD_INT 1
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 3
61417: NEG
61418: PUSH
61419: LD_INT 0
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 3
61428: NEG
61429: PUSH
61430: LD_INT 1
61432: NEG
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61469: LD_ADDR_VAR 0 44
61473: PUSH
61474: LD_INT 0
61476: PUSH
61477: LD_INT 0
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 0
61486: PUSH
61487: LD_INT 1
61489: NEG
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 1
61497: PUSH
61498: LD_INT 0
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 1
61507: PUSH
61508: LD_INT 1
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 0
61517: PUSH
61518: LD_INT 1
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 1
61527: NEG
61528: PUSH
61529: LD_INT 0
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 1
61538: NEG
61539: PUSH
61540: LD_INT 1
61542: NEG
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 1
61550: NEG
61551: PUSH
61552: LD_INT 2
61554: NEG
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 1
61562: PUSH
61563: LD_INT 1
61565: NEG
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 2
61573: PUSH
61574: LD_INT 0
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 2
61583: PUSH
61584: LD_INT 1
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 2
61593: PUSH
61594: LD_INT 2
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 1
61603: PUSH
61604: LD_INT 2
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 1
61613: NEG
61614: PUSH
61615: LD_INT 1
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 2
61624: NEG
61625: PUSH
61626: LD_INT 0
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 2
61635: NEG
61636: PUSH
61637: LD_INT 1
61639: NEG
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 2
61647: NEG
61648: PUSH
61649: LD_INT 2
61651: NEG
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 2
61659: NEG
61660: PUSH
61661: LD_INT 3
61663: NEG
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 2
61671: PUSH
61672: LD_INT 1
61674: NEG
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 3
61682: PUSH
61683: LD_INT 0
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 3
61692: PUSH
61693: LD_INT 1
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 3
61702: PUSH
61703: LD_INT 2
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 3
61712: PUSH
61713: LD_INT 3
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 2
61722: PUSH
61723: LD_INT 3
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 2
61732: NEG
61733: PUSH
61734: LD_INT 1
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 3
61743: NEG
61744: PUSH
61745: LD_INT 0
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 3
61754: NEG
61755: PUSH
61756: LD_INT 1
61758: NEG
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 3
61766: NEG
61767: PUSH
61768: LD_INT 2
61770: NEG
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 3
61778: NEG
61779: PUSH
61780: LD_INT 3
61782: NEG
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61819: LD_ADDR_VAR 0 45
61823: PUSH
61824: LD_INT 0
61826: PUSH
61827: LD_INT 0
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 0
61836: PUSH
61837: LD_INT 1
61839: NEG
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 1
61847: PUSH
61848: LD_INT 0
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 1
61857: PUSH
61858: LD_INT 1
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 0
61867: PUSH
61868: LD_INT 1
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 1
61877: NEG
61878: PUSH
61879: LD_INT 0
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 1
61888: NEG
61889: PUSH
61890: LD_INT 1
61892: NEG
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 1
61900: NEG
61901: PUSH
61902: LD_INT 2
61904: NEG
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 0
61912: PUSH
61913: LD_INT 2
61915: NEG
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 1
61923: PUSH
61924: LD_INT 1
61926: NEG
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 2
61934: PUSH
61935: LD_INT 1
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 2
61944: PUSH
61945: LD_INT 2
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 1
61954: PUSH
61955: LD_INT 2
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 0
61964: PUSH
61965: LD_INT 2
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 1
61974: NEG
61975: PUSH
61976: LD_INT 1
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 2
61985: NEG
61986: PUSH
61987: LD_INT 1
61989: NEG
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 2
61997: NEG
61998: PUSH
61999: LD_INT 2
62001: NEG
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 2
62009: NEG
62010: PUSH
62011: LD_INT 3
62013: NEG
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 1
62021: NEG
62022: PUSH
62023: LD_INT 3
62025: NEG
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 0
62033: PUSH
62034: LD_INT 3
62036: NEG
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 1
62044: PUSH
62045: LD_INT 2
62047: NEG
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 3
62055: PUSH
62056: LD_INT 2
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 3
62065: PUSH
62066: LD_INT 3
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 2
62075: PUSH
62076: LD_INT 3
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: LD_INT 1
62085: PUSH
62086: LD_INT 3
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 0
62095: PUSH
62096: LD_INT 3
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 1
62105: NEG
62106: PUSH
62107: LD_INT 2
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 3
62116: NEG
62117: PUSH
62118: LD_INT 2
62120: NEG
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 3
62128: NEG
62129: PUSH
62130: LD_INT 3
62132: NEG
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62169: LD_ADDR_VAR 0 46
62173: PUSH
62174: LD_INT 0
62176: PUSH
62177: LD_INT 0
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 0
62186: PUSH
62187: LD_INT 1
62189: NEG
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 1
62197: PUSH
62198: LD_INT 0
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 1
62207: PUSH
62208: LD_INT 1
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 0
62217: PUSH
62218: LD_INT 1
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 1
62227: NEG
62228: PUSH
62229: LD_INT 0
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 1
62238: NEG
62239: PUSH
62240: LD_INT 1
62242: NEG
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 1
62250: NEG
62251: PUSH
62252: LD_INT 2
62254: NEG
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 0
62262: PUSH
62263: LD_INT 2
62265: NEG
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 1
62273: PUSH
62274: LD_INT 1
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 2
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 2
62294: PUSH
62295: LD_INT 1
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 1
62304: PUSH
62305: LD_INT 2
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 0
62314: PUSH
62315: LD_INT 2
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 1
62324: NEG
62325: PUSH
62326: LD_INT 1
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 2
62335: NEG
62336: PUSH
62337: LD_INT 0
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 2
62346: NEG
62347: PUSH
62348: LD_INT 1
62350: NEG
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 1
62358: NEG
62359: PUSH
62360: LD_INT 3
62362: NEG
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 0
62370: PUSH
62371: LD_INT 3
62373: NEG
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 1
62381: PUSH
62382: LD_INT 2
62384: NEG
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 2
62392: PUSH
62393: LD_INT 1
62395: NEG
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 3
62403: PUSH
62404: LD_INT 0
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 3
62413: PUSH
62414: LD_INT 1
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 1
62423: PUSH
62424: LD_INT 3
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 0
62433: PUSH
62434: LD_INT 3
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 1
62443: NEG
62444: PUSH
62445: LD_INT 2
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 2
62454: NEG
62455: PUSH
62456: LD_INT 1
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 3
62465: NEG
62466: PUSH
62467: LD_INT 0
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 3
62476: NEG
62477: PUSH
62478: LD_INT 1
62480: NEG
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62517: LD_ADDR_VAR 0 47
62521: PUSH
62522: LD_INT 0
62524: PUSH
62525: LD_INT 0
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 0
62534: PUSH
62535: LD_INT 1
62537: NEG
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 1
62545: PUSH
62546: LD_INT 0
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 1
62555: PUSH
62556: LD_INT 1
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 0
62565: PUSH
62566: LD_INT 1
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 1
62575: NEG
62576: PUSH
62577: LD_INT 0
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 1
62586: NEG
62587: PUSH
62588: LD_INT 1
62590: NEG
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 1
62598: NEG
62599: PUSH
62600: LD_INT 2
62602: NEG
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 0
62610: PUSH
62611: LD_INT 2
62613: NEG
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 1
62621: PUSH
62622: LD_INT 1
62624: NEG
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 2
62632: NEG
62633: PUSH
62634: LD_INT 1
62636: NEG
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 2
62644: NEG
62645: PUSH
62646: LD_INT 2
62648: NEG
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62668: LD_ADDR_VAR 0 48
62672: PUSH
62673: LD_INT 0
62675: PUSH
62676: LD_INT 0
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 0
62685: PUSH
62686: LD_INT 1
62688: NEG
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 1
62696: PUSH
62697: LD_INT 0
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 1
62706: PUSH
62707: LD_INT 1
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: LD_INT 1
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 1
62726: NEG
62727: PUSH
62728: LD_INT 0
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 1
62737: NEG
62738: PUSH
62739: LD_INT 1
62741: NEG
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 1
62749: NEG
62750: PUSH
62751: LD_INT 2
62753: NEG
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 0
62761: PUSH
62762: LD_INT 2
62764: NEG
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 1
62772: PUSH
62773: LD_INT 1
62775: NEG
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 2
62783: PUSH
62784: LD_INT 0
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 2
62793: PUSH
62794: LD_INT 1
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62815: LD_ADDR_VAR 0 49
62819: PUSH
62820: LD_INT 0
62822: PUSH
62823: LD_INT 0
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 0
62832: PUSH
62833: LD_INT 1
62835: NEG
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 1
62843: PUSH
62844: LD_INT 0
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 1
62853: PUSH
62854: LD_INT 1
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 0
62863: PUSH
62864: LD_INT 1
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 1
62873: NEG
62874: PUSH
62875: LD_INT 0
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 1
62884: NEG
62885: PUSH
62886: LD_INT 1
62888: NEG
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 1
62896: PUSH
62897: LD_INT 1
62899: NEG
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 2
62907: PUSH
62908: LD_INT 0
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 2
62917: PUSH
62918: LD_INT 1
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 2
62927: PUSH
62928: LD_INT 2
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 1
62937: PUSH
62938: LD_INT 2
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62959: LD_ADDR_VAR 0 50
62963: PUSH
62964: LD_INT 0
62966: PUSH
62967: LD_INT 0
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 0
62976: PUSH
62977: LD_INT 1
62979: NEG
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 1
62987: PUSH
62988: LD_INT 0
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 1
62997: PUSH
62998: LD_INT 1
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 0
63007: PUSH
63008: LD_INT 1
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 1
63017: NEG
63018: PUSH
63019: LD_INT 0
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 1
63028: NEG
63029: PUSH
63030: LD_INT 1
63032: NEG
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 2
63040: PUSH
63041: LD_INT 1
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 2
63050: PUSH
63051: LD_INT 2
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 1
63060: PUSH
63061: LD_INT 2
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 0
63070: PUSH
63071: LD_INT 2
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 1
63080: NEG
63081: PUSH
63082: LD_INT 1
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63103: LD_ADDR_VAR 0 51
63107: PUSH
63108: LD_INT 0
63110: PUSH
63111: LD_INT 0
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 0
63120: PUSH
63121: LD_INT 1
63123: NEG
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 1
63131: PUSH
63132: LD_INT 0
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 1
63141: PUSH
63142: LD_INT 1
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 0
63151: PUSH
63152: LD_INT 1
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 1
63161: NEG
63162: PUSH
63163: LD_INT 0
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 1
63172: NEG
63173: PUSH
63174: LD_INT 1
63176: NEG
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 1
63184: PUSH
63185: LD_INT 2
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 0
63194: PUSH
63195: LD_INT 2
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 1
63204: NEG
63205: PUSH
63206: LD_INT 1
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 2
63215: NEG
63216: PUSH
63217: LD_INT 0
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 2
63226: NEG
63227: PUSH
63228: LD_INT 1
63230: NEG
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63250: LD_ADDR_VAR 0 52
63254: PUSH
63255: LD_INT 0
63257: PUSH
63258: LD_INT 0
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 0
63267: PUSH
63268: LD_INT 1
63270: NEG
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 1
63278: PUSH
63279: LD_INT 0
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 1
63288: PUSH
63289: LD_INT 1
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 0
63298: PUSH
63299: LD_INT 1
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 1
63308: NEG
63309: PUSH
63310: LD_INT 0
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 1
63319: NEG
63320: PUSH
63321: LD_INT 1
63323: NEG
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 1
63331: NEG
63332: PUSH
63333: LD_INT 2
63335: NEG
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 1
63343: NEG
63344: PUSH
63345: LD_INT 1
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: LD_INT 2
63354: NEG
63355: PUSH
63356: LD_INT 0
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: LD_INT 2
63365: NEG
63366: PUSH
63367: LD_INT 1
63369: NEG
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 2
63377: NEG
63378: PUSH
63379: LD_INT 2
63381: NEG
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63401: LD_ADDR_VAR 0 53
63405: PUSH
63406: LD_INT 0
63408: PUSH
63409: LD_INT 0
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 0
63418: PUSH
63419: LD_INT 1
63421: NEG
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 1
63429: PUSH
63430: LD_INT 0
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 1
63439: PUSH
63440: LD_INT 1
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 0
63449: PUSH
63450: LD_INT 1
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 1
63459: NEG
63460: PUSH
63461: LD_INT 0
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 1
63470: NEG
63471: PUSH
63472: LD_INT 1
63474: NEG
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 1
63482: NEG
63483: PUSH
63484: LD_INT 2
63486: NEG
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 0
63494: PUSH
63495: LD_INT 2
63497: NEG
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 1
63505: PUSH
63506: LD_INT 1
63508: NEG
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 2
63516: PUSH
63517: LD_INT 0
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 2
63526: PUSH
63527: LD_INT 1
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 2
63536: PUSH
63537: LD_INT 2
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: LD_INT 1
63546: PUSH
63547: LD_INT 2
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 0
63556: PUSH
63557: LD_INT 2
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 1
63566: NEG
63567: PUSH
63568: LD_INT 1
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 2
63577: NEG
63578: PUSH
63579: LD_INT 0
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 2
63588: NEG
63589: PUSH
63590: LD_INT 1
63592: NEG
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 2
63600: NEG
63601: PUSH
63602: LD_INT 2
63604: NEG
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63631: LD_ADDR_VAR 0 54
63635: PUSH
63636: LD_INT 0
63638: PUSH
63639: LD_INT 0
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 0
63648: PUSH
63649: LD_INT 1
63651: NEG
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 1
63659: PUSH
63660: LD_INT 0
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 1
63669: PUSH
63670: LD_INT 1
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 0
63679: PUSH
63680: LD_INT 1
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 1
63689: NEG
63690: PUSH
63691: LD_INT 0
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 1
63700: NEG
63701: PUSH
63702: LD_INT 1
63704: NEG
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 1
63712: NEG
63713: PUSH
63714: LD_INT 2
63716: NEG
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 0
63724: PUSH
63725: LD_INT 2
63727: NEG
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 1
63735: PUSH
63736: LD_INT 1
63738: NEG
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 2
63746: PUSH
63747: LD_INT 0
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 2
63756: PUSH
63757: LD_INT 1
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 2
63766: PUSH
63767: LD_INT 2
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 1
63776: PUSH
63777: LD_INT 2
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 0
63786: PUSH
63787: LD_INT 2
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 1
63796: NEG
63797: PUSH
63798: LD_INT 1
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 2
63807: NEG
63808: PUSH
63809: LD_INT 0
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 2
63818: NEG
63819: PUSH
63820: LD_INT 1
63822: NEG
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 2
63830: NEG
63831: PUSH
63832: LD_INT 2
63834: NEG
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63861: LD_ADDR_VAR 0 55
63865: PUSH
63866: LD_INT 0
63868: PUSH
63869: LD_INT 0
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 0
63878: PUSH
63879: LD_INT 1
63881: NEG
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 1
63889: PUSH
63890: LD_INT 0
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 1
63899: PUSH
63900: LD_INT 1
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_INT 0
63909: PUSH
63910: LD_INT 1
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 1
63919: NEG
63920: PUSH
63921: LD_INT 0
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 1
63930: NEG
63931: PUSH
63932: LD_INT 1
63934: NEG
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 1
63942: NEG
63943: PUSH
63944: LD_INT 2
63946: NEG
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 0
63954: PUSH
63955: LD_INT 2
63957: NEG
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 1
63965: PUSH
63966: LD_INT 1
63968: NEG
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 2
63976: PUSH
63977: LD_INT 0
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 2
63986: PUSH
63987: LD_INT 1
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 2
63996: PUSH
63997: LD_INT 2
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 1
64006: PUSH
64007: LD_INT 2
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 0
64016: PUSH
64017: LD_INT 2
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: PUSH
64024: LD_INT 1
64026: NEG
64027: PUSH
64028: LD_INT 1
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 2
64037: NEG
64038: PUSH
64039: LD_INT 0
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 2
64048: NEG
64049: PUSH
64050: LD_INT 1
64052: NEG
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 2
64060: NEG
64061: PUSH
64062: LD_INT 2
64064: NEG
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64091: LD_ADDR_VAR 0 56
64095: PUSH
64096: LD_INT 0
64098: PUSH
64099: LD_INT 0
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 0
64108: PUSH
64109: LD_INT 1
64111: NEG
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 1
64119: PUSH
64120: LD_INT 0
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: LD_INT 1
64129: PUSH
64130: LD_INT 1
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 0
64139: PUSH
64140: LD_INT 1
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 1
64149: NEG
64150: PUSH
64151: LD_INT 0
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 1
64160: NEG
64161: PUSH
64162: LD_INT 1
64164: NEG
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 1
64172: NEG
64173: PUSH
64174: LD_INT 2
64176: NEG
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 0
64184: PUSH
64185: LD_INT 2
64187: NEG
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: PUSH
64193: LD_INT 1
64195: PUSH
64196: LD_INT 1
64198: NEG
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 2
64206: PUSH
64207: LD_INT 0
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 2
64216: PUSH
64217: LD_INT 1
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: LD_INT 2
64226: PUSH
64227: LD_INT 2
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PUSH
64234: LD_INT 1
64236: PUSH
64237: LD_INT 2
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 0
64246: PUSH
64247: LD_INT 2
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 1
64256: NEG
64257: PUSH
64258: LD_INT 1
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 2
64267: NEG
64268: PUSH
64269: LD_INT 0
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 2
64278: NEG
64279: PUSH
64280: LD_INT 1
64282: NEG
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 2
64290: NEG
64291: PUSH
64292: LD_INT 2
64294: NEG
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64321: LD_ADDR_VAR 0 57
64325: PUSH
64326: LD_INT 0
64328: PUSH
64329: LD_INT 0
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 0
64338: PUSH
64339: LD_INT 1
64341: NEG
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 1
64349: PUSH
64350: LD_INT 0
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: LD_INT 1
64359: PUSH
64360: LD_INT 1
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 0
64369: PUSH
64370: LD_INT 1
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 1
64379: NEG
64380: PUSH
64381: LD_INT 0
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 1
64390: NEG
64391: PUSH
64392: LD_INT 1
64394: NEG
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 1
64402: NEG
64403: PUSH
64404: LD_INT 2
64406: NEG
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 0
64414: PUSH
64415: LD_INT 2
64417: NEG
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_INT 1
64425: PUSH
64426: LD_INT 1
64428: NEG
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 2
64436: PUSH
64437: LD_INT 0
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 2
64446: PUSH
64447: LD_INT 1
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 2
64456: PUSH
64457: LD_INT 2
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 1
64466: PUSH
64467: LD_INT 2
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 0
64476: PUSH
64477: LD_INT 2
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 1
64486: NEG
64487: PUSH
64488: LD_INT 1
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 2
64497: NEG
64498: PUSH
64499: LD_INT 0
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 2
64508: NEG
64509: PUSH
64510: LD_INT 1
64512: NEG
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 2
64520: NEG
64521: PUSH
64522: LD_INT 2
64524: NEG
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64551: LD_ADDR_VAR 0 58
64555: PUSH
64556: LD_INT 0
64558: PUSH
64559: LD_INT 0
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 0
64568: PUSH
64569: LD_INT 1
64571: NEG
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 1
64579: PUSH
64580: LD_INT 0
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 1
64589: PUSH
64590: LD_INT 1
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 0
64599: PUSH
64600: LD_INT 1
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 1
64609: NEG
64610: PUSH
64611: LD_INT 0
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 1
64620: NEG
64621: PUSH
64622: LD_INT 1
64624: NEG
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 1
64632: NEG
64633: PUSH
64634: LD_INT 2
64636: NEG
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PUSH
64642: LD_INT 0
64644: PUSH
64645: LD_INT 2
64647: NEG
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 1
64655: PUSH
64656: LD_INT 1
64658: NEG
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 2
64666: PUSH
64667: LD_INT 0
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 2
64676: PUSH
64677: LD_INT 1
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 2
64686: PUSH
64687: LD_INT 2
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_INT 1
64696: PUSH
64697: LD_INT 2
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: LD_INT 0
64706: PUSH
64707: LD_INT 2
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: LD_INT 1
64716: NEG
64717: PUSH
64718: LD_INT 1
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 2
64727: NEG
64728: PUSH
64729: LD_INT 0
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 2
64738: NEG
64739: PUSH
64740: LD_INT 1
64742: NEG
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 2
64750: NEG
64751: PUSH
64752: LD_INT 2
64754: NEG
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: LIST
64777: LIST
64778: LIST
64779: LIST
64780: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64781: LD_ADDR_VAR 0 59
64785: PUSH
64786: LD_INT 0
64788: PUSH
64789: LD_INT 0
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 0
64798: PUSH
64799: LD_INT 1
64801: NEG
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: PUSH
64807: LD_INT 1
64809: PUSH
64810: LD_INT 0
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 1
64819: PUSH
64820: LD_INT 1
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 0
64829: PUSH
64830: LD_INT 1
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 1
64839: NEG
64840: PUSH
64841: LD_INT 0
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: LD_INT 1
64850: NEG
64851: PUSH
64852: LD_INT 1
64854: NEG
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: LIST
64864: LIST
64865: LIST
64866: LIST
64867: LIST
64868: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64869: LD_ADDR_VAR 0 60
64873: PUSH
64874: LD_INT 0
64876: PUSH
64877: LD_INT 0
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 0
64886: PUSH
64887: LD_INT 1
64889: NEG
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 1
64897: PUSH
64898: LD_INT 0
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: LD_INT 1
64907: PUSH
64908: LD_INT 1
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 0
64917: PUSH
64918: LD_INT 1
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 1
64927: NEG
64928: PUSH
64929: LD_INT 0
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 1
64938: NEG
64939: PUSH
64940: LD_INT 1
64942: NEG
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64957: LD_ADDR_VAR 0 61
64961: PUSH
64962: LD_INT 0
64964: PUSH
64965: LD_INT 0
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 0
64974: PUSH
64975: LD_INT 1
64977: NEG
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 1
64985: PUSH
64986: LD_INT 0
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: LD_INT 1
64995: PUSH
64996: LD_INT 1
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 0
65005: PUSH
65006: LD_INT 1
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 1
65015: NEG
65016: PUSH
65017: LD_INT 0
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 1
65026: NEG
65027: PUSH
65028: LD_INT 1
65030: NEG
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65045: LD_ADDR_VAR 0 62
65049: PUSH
65050: LD_INT 0
65052: PUSH
65053: LD_INT 0
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 0
65062: PUSH
65063: LD_INT 1
65065: NEG
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 1
65073: PUSH
65074: LD_INT 0
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 1
65083: PUSH
65084: LD_INT 1
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 0
65093: PUSH
65094: LD_INT 1
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 1
65103: NEG
65104: PUSH
65105: LD_INT 0
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 1
65114: NEG
65115: PUSH
65116: LD_INT 1
65118: NEG
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65133: LD_ADDR_VAR 0 63
65137: PUSH
65138: LD_INT 0
65140: PUSH
65141: LD_INT 0
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 0
65150: PUSH
65151: LD_INT 1
65153: NEG
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 1
65161: PUSH
65162: LD_INT 0
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 1
65171: PUSH
65172: LD_INT 1
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 0
65181: PUSH
65182: LD_INT 1
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 1
65191: NEG
65192: PUSH
65193: LD_INT 0
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 1
65202: NEG
65203: PUSH
65204: LD_INT 1
65206: NEG
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: LIST
65216: LIST
65217: LIST
65218: LIST
65219: LIST
65220: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65221: LD_ADDR_VAR 0 64
65225: PUSH
65226: LD_INT 0
65228: PUSH
65229: LD_INT 0
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 0
65238: PUSH
65239: LD_INT 1
65241: NEG
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 1
65249: PUSH
65250: LD_INT 0
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 1
65259: PUSH
65260: LD_INT 1
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 0
65269: PUSH
65270: LD_INT 1
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 1
65279: NEG
65280: PUSH
65281: LD_INT 0
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 1
65290: NEG
65291: PUSH
65292: LD_INT 1
65294: NEG
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: ST_TO_ADDR
// end ; 1 :
65309: GO 71206
65311: LD_INT 1
65313: DOUBLE
65314: EQUAL
65315: IFTRUE 65319
65317: GO 67942
65319: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65320: LD_ADDR_VAR 0 11
65324: PUSH
65325: LD_INT 1
65327: NEG
65328: PUSH
65329: LD_INT 3
65331: NEG
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 0
65339: PUSH
65340: LD_INT 3
65342: NEG
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 1
65350: PUSH
65351: LD_INT 2
65353: NEG
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: LIST
65363: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65364: LD_ADDR_VAR 0 12
65368: PUSH
65369: LD_INT 2
65371: PUSH
65372: LD_INT 1
65374: NEG
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 3
65382: PUSH
65383: LD_INT 0
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 3
65392: PUSH
65393: LD_INT 1
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: LIST
65404: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65405: LD_ADDR_VAR 0 13
65409: PUSH
65410: LD_INT 3
65412: PUSH
65413: LD_INT 2
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 3
65422: PUSH
65423: LD_INT 3
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 2
65432: PUSH
65433: LD_INT 3
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: LIST
65444: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65445: LD_ADDR_VAR 0 14
65449: PUSH
65450: LD_INT 1
65452: PUSH
65453: LD_INT 3
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 0
65462: PUSH
65463: LD_INT 3
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 1
65472: NEG
65473: PUSH
65474: LD_INT 2
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: LIST
65485: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65486: LD_ADDR_VAR 0 15
65490: PUSH
65491: LD_INT 2
65493: NEG
65494: PUSH
65495: LD_INT 1
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 3
65504: NEG
65505: PUSH
65506: LD_INT 0
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 3
65515: NEG
65516: PUSH
65517: LD_INT 1
65519: NEG
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: LIST
65529: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65530: LD_ADDR_VAR 0 16
65534: PUSH
65535: LD_INT 2
65537: NEG
65538: PUSH
65539: LD_INT 3
65541: NEG
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 3
65549: NEG
65550: PUSH
65551: LD_INT 2
65553: NEG
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: LD_INT 3
65561: NEG
65562: PUSH
65563: LD_INT 3
65565: NEG
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: LIST
65575: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65576: LD_ADDR_VAR 0 17
65580: PUSH
65581: LD_INT 1
65583: NEG
65584: PUSH
65585: LD_INT 3
65587: NEG
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_INT 0
65595: PUSH
65596: LD_INT 3
65598: NEG
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: LD_INT 1
65606: PUSH
65607: LD_INT 2
65609: NEG
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: EMPTY
65616: LIST
65617: LIST
65618: LIST
65619: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65620: LD_ADDR_VAR 0 18
65624: PUSH
65625: LD_INT 2
65627: PUSH
65628: LD_INT 1
65630: NEG
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 3
65638: PUSH
65639: LD_INT 0
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 3
65648: PUSH
65649: LD_INT 1
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: LIST
65660: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65661: LD_ADDR_VAR 0 19
65665: PUSH
65666: LD_INT 3
65668: PUSH
65669: LD_INT 2
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 3
65678: PUSH
65679: LD_INT 3
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 2
65688: PUSH
65689: LD_INT 3
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: LIST
65700: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65701: LD_ADDR_VAR 0 20
65705: PUSH
65706: LD_INT 1
65708: PUSH
65709: LD_INT 3
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 0
65718: PUSH
65719: LD_INT 3
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 1
65728: NEG
65729: PUSH
65730: LD_INT 2
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: LIST
65741: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65742: LD_ADDR_VAR 0 21
65746: PUSH
65747: LD_INT 2
65749: NEG
65750: PUSH
65751: LD_INT 1
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 3
65760: NEG
65761: PUSH
65762: LD_INT 0
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: LD_INT 3
65771: NEG
65772: PUSH
65773: LD_INT 1
65775: NEG
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: LIST
65785: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65786: LD_ADDR_VAR 0 22
65790: PUSH
65791: LD_INT 2
65793: NEG
65794: PUSH
65795: LD_INT 3
65797: NEG
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 3
65805: NEG
65806: PUSH
65807: LD_INT 2
65809: NEG
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 3
65817: NEG
65818: PUSH
65819: LD_INT 3
65821: NEG
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: LIST
65831: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65832: LD_ADDR_VAR 0 23
65836: PUSH
65837: LD_INT 0
65839: PUSH
65840: LD_INT 3
65842: NEG
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 1
65850: NEG
65851: PUSH
65852: LD_INT 4
65854: NEG
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 1
65862: PUSH
65863: LD_INT 3
65865: NEG
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: LIST
65875: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65876: LD_ADDR_VAR 0 24
65880: PUSH
65881: LD_INT 3
65883: PUSH
65884: LD_INT 0
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 3
65893: PUSH
65894: LD_INT 1
65896: NEG
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 4
65904: PUSH
65905: LD_INT 1
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: LIST
65916: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65917: LD_ADDR_VAR 0 25
65921: PUSH
65922: LD_INT 3
65924: PUSH
65925: LD_INT 3
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: LD_INT 4
65934: PUSH
65935: LD_INT 3
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: LD_INT 3
65944: PUSH
65945: LD_INT 4
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: LIST
65956: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65957: LD_ADDR_VAR 0 26
65961: PUSH
65962: LD_INT 0
65964: PUSH
65965: LD_INT 3
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 1
65974: PUSH
65975: LD_INT 4
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 1
65984: NEG
65985: PUSH
65986: LD_INT 3
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: LIST
65997: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65998: LD_ADDR_VAR 0 27
66002: PUSH
66003: LD_INT 3
66005: NEG
66006: PUSH
66007: LD_INT 0
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 3
66016: NEG
66017: PUSH
66018: LD_INT 1
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 4
66027: NEG
66028: PUSH
66029: LD_INT 1
66031: NEG
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: LIST
66041: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66042: LD_ADDR_VAR 0 28
66046: PUSH
66047: LD_INT 3
66049: NEG
66050: PUSH
66051: LD_INT 3
66053: NEG
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: LD_INT 3
66061: NEG
66062: PUSH
66063: LD_INT 4
66065: NEG
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 4
66073: NEG
66074: PUSH
66075: LD_INT 3
66077: NEG
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: LIST
66087: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66088: LD_ADDR_VAR 0 29
66092: PUSH
66093: LD_INT 1
66095: NEG
66096: PUSH
66097: LD_INT 3
66099: NEG
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: LD_INT 0
66107: PUSH
66108: LD_INT 3
66110: NEG
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: LD_INT 1
66118: PUSH
66119: LD_INT 2
66121: NEG
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 1
66129: NEG
66130: PUSH
66131: LD_INT 4
66133: NEG
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 0
66141: PUSH
66142: LD_INT 4
66144: NEG
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 1
66152: PUSH
66153: LD_INT 3
66155: NEG
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: PUSH
66161: LD_INT 1
66163: NEG
66164: PUSH
66165: LD_INT 5
66167: NEG
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 0
66175: PUSH
66176: LD_INT 5
66178: NEG
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 1
66186: PUSH
66187: LD_INT 4
66189: NEG
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: LD_INT 1
66197: NEG
66198: PUSH
66199: LD_INT 6
66201: NEG
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: LD_INT 0
66209: PUSH
66210: LD_INT 6
66212: NEG
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: LD_INT 1
66220: PUSH
66221: LD_INT 5
66223: NEG
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66243: LD_ADDR_VAR 0 30
66247: PUSH
66248: LD_INT 2
66250: PUSH
66251: LD_INT 1
66253: NEG
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: LD_INT 3
66261: PUSH
66262: LD_INT 0
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: PUSH
66269: LD_INT 3
66271: PUSH
66272: LD_INT 1
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: PUSH
66279: LD_INT 3
66281: PUSH
66282: LD_INT 1
66284: NEG
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: LD_INT 4
66292: PUSH
66293: LD_INT 0
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 4
66302: PUSH
66303: LD_INT 1
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 4
66312: PUSH
66313: LD_INT 1
66315: NEG
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 5
66323: PUSH
66324: LD_INT 0
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: LD_INT 5
66333: PUSH
66334: LD_INT 1
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 5
66343: PUSH
66344: LD_INT 1
66346: NEG
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 6
66354: PUSH
66355: LD_INT 0
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 6
66364: PUSH
66365: LD_INT 1
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66386: LD_ADDR_VAR 0 31
66390: PUSH
66391: LD_INT 3
66393: PUSH
66394: LD_INT 2
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: PUSH
66401: LD_INT 3
66403: PUSH
66404: LD_INT 3
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: PUSH
66411: LD_INT 2
66413: PUSH
66414: LD_INT 3
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: LD_INT 4
66423: PUSH
66424: LD_INT 3
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 4
66433: PUSH
66434: LD_INT 4
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 3
66443: PUSH
66444: LD_INT 4
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 5
66453: PUSH
66454: LD_INT 4
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_INT 5
66463: PUSH
66464: LD_INT 5
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: PUSH
66471: LD_INT 4
66473: PUSH
66474: LD_INT 5
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: LD_INT 6
66483: PUSH
66484: LD_INT 5
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 6
66493: PUSH
66494: LD_INT 6
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 5
66503: PUSH
66504: LD_INT 6
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: LIST
66515: LIST
66516: LIST
66517: LIST
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: LIST
66523: LIST
66524: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66525: LD_ADDR_VAR 0 32
66529: PUSH
66530: LD_INT 1
66532: PUSH
66533: LD_INT 3
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 0
66542: PUSH
66543: LD_INT 3
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 1
66552: NEG
66553: PUSH
66554: LD_INT 2
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: PUSH
66561: LD_INT 1
66563: PUSH
66564: LD_INT 4
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 0
66573: PUSH
66574: LD_INT 4
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 1
66583: NEG
66584: PUSH
66585: LD_INT 3
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 1
66594: PUSH
66595: LD_INT 5
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 0
66604: PUSH
66605: LD_INT 5
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 1
66614: NEG
66615: PUSH
66616: LD_INT 4
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 1
66625: PUSH
66626: LD_INT 6
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: LD_INT 0
66635: PUSH
66636: LD_INT 6
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 1
66645: NEG
66646: PUSH
66647: LD_INT 5
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66668: LD_ADDR_VAR 0 33
66672: PUSH
66673: LD_INT 2
66675: NEG
66676: PUSH
66677: LD_INT 1
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 3
66686: NEG
66687: PUSH
66688: LD_INT 0
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 3
66697: NEG
66698: PUSH
66699: LD_INT 1
66701: NEG
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 3
66709: NEG
66710: PUSH
66711: LD_INT 1
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 4
66720: NEG
66721: PUSH
66722: LD_INT 0
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 4
66731: NEG
66732: PUSH
66733: LD_INT 1
66735: NEG
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 4
66743: NEG
66744: PUSH
66745: LD_INT 1
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: LD_INT 5
66754: NEG
66755: PUSH
66756: LD_INT 0
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: LD_INT 5
66765: NEG
66766: PUSH
66767: LD_INT 1
66769: NEG
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 5
66777: NEG
66778: PUSH
66779: LD_INT 1
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 6
66788: NEG
66789: PUSH
66790: LD_INT 0
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 6
66799: NEG
66800: PUSH
66801: LD_INT 1
66803: NEG
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66823: LD_ADDR_VAR 0 34
66827: PUSH
66828: LD_INT 2
66830: NEG
66831: PUSH
66832: LD_INT 3
66834: NEG
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 3
66842: NEG
66843: PUSH
66844: LD_INT 2
66846: NEG
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 3
66854: NEG
66855: PUSH
66856: LD_INT 3
66858: NEG
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: LD_INT 3
66866: NEG
66867: PUSH
66868: LD_INT 4
66870: NEG
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 4
66878: NEG
66879: PUSH
66880: LD_INT 3
66882: NEG
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 4
66890: NEG
66891: PUSH
66892: LD_INT 4
66894: NEG
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 4
66902: NEG
66903: PUSH
66904: LD_INT 5
66906: NEG
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: LD_INT 5
66914: NEG
66915: PUSH
66916: LD_INT 4
66918: NEG
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 5
66926: NEG
66927: PUSH
66928: LD_INT 5
66930: NEG
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 5
66938: NEG
66939: PUSH
66940: LD_INT 6
66942: NEG
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: LD_INT 6
66950: NEG
66951: PUSH
66952: LD_INT 5
66954: NEG
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 6
66962: NEG
66963: PUSH
66964: LD_INT 6
66966: NEG
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: LIST
66976: LIST
66977: LIST
66978: LIST
66979: LIST
66980: LIST
66981: LIST
66982: LIST
66983: LIST
66984: LIST
66985: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66986: LD_ADDR_VAR 0 41
66990: PUSH
66991: LD_INT 0
66993: PUSH
66994: LD_INT 2
66996: NEG
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 1
67004: NEG
67005: PUSH
67006: LD_INT 3
67008: NEG
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: PUSH
67014: LD_INT 1
67016: PUSH
67017: LD_INT 2
67019: NEG
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: LIST
67029: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67030: LD_ADDR_VAR 0 42
67034: PUSH
67035: LD_INT 2
67037: PUSH
67038: LD_INT 0
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: PUSH
67045: LD_INT 2
67047: PUSH
67048: LD_INT 1
67050: NEG
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PUSH
67056: LD_INT 3
67058: PUSH
67059: LD_INT 1
67061: PUSH
67062: EMPTY
67063: LIST
67064: LIST
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: LIST
67070: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67071: LD_ADDR_VAR 0 43
67075: PUSH
67076: LD_INT 2
67078: PUSH
67079: LD_INT 2
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 3
67088: PUSH
67089: LD_INT 2
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 2
67098: PUSH
67099: LD_INT 3
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: LIST
67110: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67111: LD_ADDR_VAR 0 44
67115: PUSH
67116: LD_INT 0
67118: PUSH
67119: LD_INT 2
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: PUSH
67126: LD_INT 1
67128: PUSH
67129: LD_INT 3
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: PUSH
67136: LD_INT 1
67138: NEG
67139: PUSH
67140: LD_INT 2
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: LIST
67151: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67152: LD_ADDR_VAR 0 45
67156: PUSH
67157: LD_INT 2
67159: NEG
67160: PUSH
67161: LD_INT 0
67163: PUSH
67164: EMPTY
67165: LIST
67166: LIST
67167: PUSH
67168: LD_INT 2
67170: NEG
67171: PUSH
67172: LD_INT 1
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: PUSH
67179: LD_INT 3
67181: NEG
67182: PUSH
67183: LD_INT 1
67185: NEG
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: LIST
67195: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67196: LD_ADDR_VAR 0 46
67200: PUSH
67201: LD_INT 2
67203: NEG
67204: PUSH
67205: LD_INT 2
67207: NEG
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 2
67215: NEG
67216: PUSH
67217: LD_INT 3
67219: NEG
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 3
67227: NEG
67228: PUSH
67229: LD_INT 2
67231: NEG
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: LIST
67241: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67242: LD_ADDR_VAR 0 47
67246: PUSH
67247: LD_INT 2
67249: NEG
67250: PUSH
67251: LD_INT 3
67253: NEG
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: LD_INT 1
67261: NEG
67262: PUSH
67263: LD_INT 3
67265: NEG
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67275: LD_ADDR_VAR 0 48
67279: PUSH
67280: LD_INT 1
67282: PUSH
67283: LD_INT 2
67285: NEG
67286: PUSH
67287: EMPTY
67288: LIST
67289: LIST
67290: PUSH
67291: LD_INT 2
67293: PUSH
67294: LD_INT 1
67296: NEG
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67306: LD_ADDR_VAR 0 49
67310: PUSH
67311: LD_INT 3
67313: PUSH
67314: LD_INT 1
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 3
67323: PUSH
67324: LD_INT 2
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67335: LD_ADDR_VAR 0 50
67339: PUSH
67340: LD_INT 2
67342: PUSH
67343: LD_INT 3
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: PUSH
67350: LD_INT 1
67352: PUSH
67353: LD_INT 3
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67364: LD_ADDR_VAR 0 51
67368: PUSH
67369: LD_INT 1
67371: NEG
67372: PUSH
67373: LD_INT 2
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: LD_INT 2
67382: NEG
67383: PUSH
67384: LD_INT 1
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67395: LD_ADDR_VAR 0 52
67399: PUSH
67400: LD_INT 3
67402: NEG
67403: PUSH
67404: LD_INT 1
67406: NEG
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: LD_INT 3
67414: NEG
67415: PUSH
67416: LD_INT 2
67418: NEG
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67428: LD_ADDR_VAR 0 53
67432: PUSH
67433: LD_INT 1
67435: NEG
67436: PUSH
67437: LD_INT 3
67439: NEG
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: LD_INT 0
67447: PUSH
67448: LD_INT 3
67450: NEG
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: LD_INT 1
67458: PUSH
67459: LD_INT 2
67461: NEG
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: LIST
67471: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67472: LD_ADDR_VAR 0 54
67476: PUSH
67477: LD_INT 2
67479: PUSH
67480: LD_INT 1
67482: NEG
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: LD_INT 3
67490: PUSH
67491: LD_INT 0
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: PUSH
67498: LD_INT 3
67500: PUSH
67501: LD_INT 1
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: LIST
67512: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67513: LD_ADDR_VAR 0 55
67517: PUSH
67518: LD_INT 3
67520: PUSH
67521: LD_INT 2
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: LD_INT 3
67530: PUSH
67531: LD_INT 3
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: PUSH
67538: LD_INT 2
67540: PUSH
67541: LD_INT 3
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: LIST
67552: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67553: LD_ADDR_VAR 0 56
67557: PUSH
67558: LD_INT 1
67560: PUSH
67561: LD_INT 3
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: PUSH
67568: LD_INT 0
67570: PUSH
67571: LD_INT 3
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: PUSH
67578: LD_INT 1
67580: NEG
67581: PUSH
67582: LD_INT 2
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: LIST
67593: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67594: LD_ADDR_VAR 0 57
67598: PUSH
67599: LD_INT 2
67601: NEG
67602: PUSH
67603: LD_INT 1
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: LD_INT 3
67612: NEG
67613: PUSH
67614: LD_INT 0
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: PUSH
67621: LD_INT 3
67623: NEG
67624: PUSH
67625: LD_INT 1
67627: NEG
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: LIST
67637: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67638: LD_ADDR_VAR 0 58
67642: PUSH
67643: LD_INT 2
67645: NEG
67646: PUSH
67647: LD_INT 3
67649: NEG
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: LD_INT 3
67657: NEG
67658: PUSH
67659: LD_INT 2
67661: NEG
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: PUSH
67667: LD_INT 3
67669: NEG
67670: PUSH
67671: LD_INT 3
67673: NEG
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: LIST
67683: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67684: LD_ADDR_VAR 0 59
67688: PUSH
67689: LD_INT 1
67691: NEG
67692: PUSH
67693: LD_INT 2
67695: NEG
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 0
67703: PUSH
67704: LD_INT 2
67706: NEG
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: LD_INT 1
67714: PUSH
67715: LD_INT 1
67717: NEG
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: PUSH
67723: EMPTY
67724: LIST
67725: LIST
67726: LIST
67727: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67728: LD_ADDR_VAR 0 60
67732: PUSH
67733: LD_INT 1
67735: PUSH
67736: LD_INT 1
67738: NEG
67739: PUSH
67740: EMPTY
67741: LIST
67742: LIST
67743: PUSH
67744: LD_INT 2
67746: PUSH
67747: LD_INT 0
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: PUSH
67754: LD_INT 2
67756: PUSH
67757: LD_INT 1
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: LIST
67768: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67769: LD_ADDR_VAR 0 61
67773: PUSH
67774: LD_INT 2
67776: PUSH
67777: LD_INT 1
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: PUSH
67784: LD_INT 2
67786: PUSH
67787: LD_INT 2
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 1
67796: PUSH
67797: LD_INT 2
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: LIST
67808: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67809: LD_ADDR_VAR 0 62
67813: PUSH
67814: LD_INT 1
67816: PUSH
67817: LD_INT 2
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: LD_INT 0
67826: PUSH
67827: LD_INT 2
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: LD_INT 1
67836: NEG
67837: PUSH
67838: LD_INT 1
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: LIST
67849: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67850: LD_ADDR_VAR 0 63
67854: PUSH
67855: LD_INT 1
67857: NEG
67858: PUSH
67859: LD_INT 1
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: LD_INT 2
67868: NEG
67869: PUSH
67870: LD_INT 0
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: LD_INT 2
67879: NEG
67880: PUSH
67881: LD_INT 1
67883: NEG
67884: PUSH
67885: EMPTY
67886: LIST
67887: LIST
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: LIST
67893: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67894: LD_ADDR_VAR 0 64
67898: PUSH
67899: LD_INT 1
67901: NEG
67902: PUSH
67903: LD_INT 2
67905: NEG
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: LD_INT 2
67913: NEG
67914: PUSH
67915: LD_INT 1
67917: NEG
67918: PUSH
67919: EMPTY
67920: LIST
67921: LIST
67922: PUSH
67923: LD_INT 2
67925: NEG
67926: PUSH
67927: LD_INT 2
67929: NEG
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: LIST
67939: ST_TO_ADDR
// end ; 2 :
67940: GO 71206
67942: LD_INT 2
67944: DOUBLE
67945: EQUAL
67946: IFTRUE 67950
67948: GO 71205
67950: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67951: LD_ADDR_VAR 0 29
67955: PUSH
67956: LD_INT 4
67958: PUSH
67959: LD_INT 0
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 4
67968: PUSH
67969: LD_INT 1
67971: NEG
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 5
67979: PUSH
67980: LD_INT 0
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: LD_INT 5
67989: PUSH
67990: LD_INT 1
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: PUSH
67997: LD_INT 4
67999: PUSH
68000: LD_INT 1
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PUSH
68007: LD_INT 3
68009: PUSH
68010: LD_INT 0
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: LD_INT 3
68019: PUSH
68020: LD_INT 1
68022: NEG
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 3
68030: PUSH
68031: LD_INT 2
68033: NEG
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: LD_INT 5
68041: PUSH
68042: LD_INT 2
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: PUSH
68049: LD_INT 3
68051: PUSH
68052: LD_INT 3
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: LD_INT 3
68061: PUSH
68062: LD_INT 2
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PUSH
68069: LD_INT 4
68071: PUSH
68072: LD_INT 3
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: PUSH
68079: LD_INT 4
68081: PUSH
68082: LD_INT 4
68084: PUSH
68085: EMPTY
68086: LIST
68087: LIST
68088: PUSH
68089: LD_INT 3
68091: PUSH
68092: LD_INT 4
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: PUSH
68099: LD_INT 2
68101: PUSH
68102: LD_INT 3
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: LD_INT 2
68111: PUSH
68112: LD_INT 2
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: LD_INT 4
68121: PUSH
68122: LD_INT 2
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: PUSH
68129: LD_INT 2
68131: PUSH
68132: LD_INT 4
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PUSH
68139: LD_INT 0
68141: PUSH
68142: LD_INT 4
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: LD_INT 0
68151: PUSH
68152: LD_INT 3
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: PUSH
68159: LD_INT 1
68161: PUSH
68162: LD_INT 4
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PUSH
68169: LD_INT 1
68171: PUSH
68172: LD_INT 5
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 0
68181: PUSH
68182: LD_INT 5
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PUSH
68189: LD_INT 1
68191: NEG
68192: PUSH
68193: LD_INT 4
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: LD_INT 1
68202: NEG
68203: PUSH
68204: LD_INT 3
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: PUSH
68211: LD_INT 2
68213: PUSH
68214: LD_INT 5
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 2
68223: NEG
68224: PUSH
68225: LD_INT 3
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 3
68234: NEG
68235: PUSH
68236: LD_INT 0
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 3
68245: NEG
68246: PUSH
68247: LD_INT 1
68249: NEG
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 2
68257: NEG
68258: PUSH
68259: LD_INT 0
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: PUSH
68266: LD_INT 2
68268: NEG
68269: PUSH
68270: LD_INT 1
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: PUSH
68277: LD_INT 3
68279: NEG
68280: PUSH
68281: LD_INT 1
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: PUSH
68288: LD_INT 4
68290: NEG
68291: PUSH
68292: LD_INT 0
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: PUSH
68299: LD_INT 4
68301: NEG
68302: PUSH
68303: LD_INT 1
68305: NEG
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: PUSH
68311: LD_INT 4
68313: NEG
68314: PUSH
68315: LD_INT 2
68317: NEG
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: PUSH
68323: LD_INT 2
68325: NEG
68326: PUSH
68327: LD_INT 2
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: PUSH
68334: LD_INT 4
68336: NEG
68337: PUSH
68338: LD_INT 4
68340: NEG
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: PUSH
68346: LD_INT 4
68348: NEG
68349: PUSH
68350: LD_INT 5
68352: NEG
68353: PUSH
68354: EMPTY
68355: LIST
68356: LIST
68357: PUSH
68358: LD_INT 3
68360: NEG
68361: PUSH
68362: LD_INT 4
68364: NEG
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 3
68372: NEG
68373: PUSH
68374: LD_INT 3
68376: NEG
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 4
68384: NEG
68385: PUSH
68386: LD_INT 3
68388: NEG
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: LD_INT 5
68396: NEG
68397: PUSH
68398: LD_INT 4
68400: NEG
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PUSH
68406: LD_INT 5
68408: NEG
68409: PUSH
68410: LD_INT 5
68412: NEG
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: PUSH
68418: LD_INT 3
68420: NEG
68421: PUSH
68422: LD_INT 5
68424: NEG
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: PUSH
68430: LD_INT 5
68432: NEG
68433: PUSH
68434: LD_INT 3
68436: NEG
68437: PUSH
68438: EMPTY
68439: LIST
68440: LIST
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: LIST
68446: LIST
68447: LIST
68448: LIST
68449: LIST
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: LIST
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68489: LD_ADDR_VAR 0 30
68493: PUSH
68494: LD_INT 4
68496: PUSH
68497: LD_INT 4
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 4
68506: PUSH
68507: LD_INT 3
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: LD_INT 5
68516: PUSH
68517: LD_INT 4
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: LD_INT 5
68526: PUSH
68527: LD_INT 5
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PUSH
68534: LD_INT 4
68536: PUSH
68537: LD_INT 5
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 3
68546: PUSH
68547: LD_INT 4
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: PUSH
68554: LD_INT 3
68556: PUSH
68557: LD_INT 3
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: PUSH
68564: LD_INT 5
68566: PUSH
68567: LD_INT 3
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: PUSH
68574: LD_INT 3
68576: PUSH
68577: LD_INT 5
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: LD_INT 0
68586: PUSH
68587: LD_INT 3
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PUSH
68594: LD_INT 0
68596: PUSH
68597: LD_INT 2
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 1
68606: PUSH
68607: LD_INT 3
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: LD_INT 1
68616: PUSH
68617: LD_INT 4
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 0
68626: PUSH
68627: LD_INT 4
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: LD_INT 1
68636: NEG
68637: PUSH
68638: LD_INT 3
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: PUSH
68645: LD_INT 1
68647: NEG
68648: PUSH
68649: LD_INT 2
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: PUSH
68656: LD_INT 2
68658: PUSH
68659: LD_INT 4
68661: PUSH
68662: EMPTY
68663: LIST
68664: LIST
68665: PUSH
68666: LD_INT 2
68668: NEG
68669: PUSH
68670: LD_INT 2
68672: PUSH
68673: EMPTY
68674: LIST
68675: LIST
68676: PUSH
68677: LD_INT 4
68679: NEG
68680: PUSH
68681: LD_INT 0
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: LD_INT 4
68690: NEG
68691: PUSH
68692: LD_INT 1
68694: NEG
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: LD_INT 3
68702: NEG
68703: PUSH
68704: LD_INT 0
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: PUSH
68711: LD_INT 3
68713: NEG
68714: PUSH
68715: LD_INT 1
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 4
68724: NEG
68725: PUSH
68726: LD_INT 1
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: LD_INT 5
68735: NEG
68736: PUSH
68737: LD_INT 0
68739: PUSH
68740: EMPTY
68741: LIST
68742: LIST
68743: PUSH
68744: LD_INT 5
68746: NEG
68747: PUSH
68748: LD_INT 1
68750: NEG
68751: PUSH
68752: EMPTY
68753: LIST
68754: LIST
68755: PUSH
68756: LD_INT 5
68758: NEG
68759: PUSH
68760: LD_INT 2
68762: NEG
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PUSH
68768: LD_INT 3
68770: NEG
68771: PUSH
68772: LD_INT 2
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: PUSH
68779: LD_INT 3
68781: NEG
68782: PUSH
68783: LD_INT 3
68785: NEG
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PUSH
68791: LD_INT 3
68793: NEG
68794: PUSH
68795: LD_INT 4
68797: NEG
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: PUSH
68803: LD_INT 2
68805: NEG
68806: PUSH
68807: LD_INT 3
68809: NEG
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: LD_INT 2
68817: NEG
68818: PUSH
68819: LD_INT 2
68821: NEG
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: LD_INT 3
68829: NEG
68830: PUSH
68831: LD_INT 2
68833: NEG
68834: PUSH
68835: EMPTY
68836: LIST
68837: LIST
68838: PUSH
68839: LD_INT 4
68841: NEG
68842: PUSH
68843: LD_INT 3
68845: NEG
68846: PUSH
68847: EMPTY
68848: LIST
68849: LIST
68850: PUSH
68851: LD_INT 4
68853: NEG
68854: PUSH
68855: LD_INT 4
68857: NEG
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: PUSH
68863: LD_INT 2
68865: NEG
68866: PUSH
68867: LD_INT 4
68869: NEG
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PUSH
68875: LD_INT 4
68877: NEG
68878: PUSH
68879: LD_INT 2
68881: NEG
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: PUSH
68887: LD_INT 0
68889: PUSH
68890: LD_INT 4
68892: NEG
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: PUSH
68898: LD_INT 0
68900: PUSH
68901: LD_INT 5
68903: NEG
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: LD_INT 1
68911: PUSH
68912: LD_INT 4
68914: NEG
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: PUSH
68920: LD_INT 1
68922: PUSH
68923: LD_INT 3
68925: NEG
68926: PUSH
68927: EMPTY
68928: LIST
68929: LIST
68930: PUSH
68931: LD_INT 0
68933: PUSH
68934: LD_INT 3
68936: NEG
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: PUSH
68942: LD_INT 1
68944: NEG
68945: PUSH
68946: LD_INT 4
68948: NEG
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 1
68956: NEG
68957: PUSH
68958: LD_INT 5
68960: NEG
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: PUSH
68966: LD_INT 2
68968: PUSH
68969: LD_INT 3
68971: NEG
68972: PUSH
68973: EMPTY
68974: LIST
68975: LIST
68976: PUSH
68977: LD_INT 2
68979: NEG
68980: PUSH
68981: LD_INT 5
68983: NEG
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: LIST
69007: LIST
69008: LIST
69009: LIST
69010: LIST
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69036: LD_ADDR_VAR 0 31
69040: PUSH
69041: LD_INT 0
69043: PUSH
69044: LD_INT 4
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: LD_INT 0
69053: PUSH
69054: LD_INT 3
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: PUSH
69061: LD_INT 1
69063: PUSH
69064: LD_INT 4
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 1
69073: PUSH
69074: LD_INT 5
69076: PUSH
69077: EMPTY
69078: LIST
69079: LIST
69080: PUSH
69081: LD_INT 0
69083: PUSH
69084: LD_INT 5
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: PUSH
69091: LD_INT 1
69093: NEG
69094: PUSH
69095: LD_INT 4
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: PUSH
69102: LD_INT 1
69104: NEG
69105: PUSH
69106: LD_INT 3
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: PUSH
69113: LD_INT 2
69115: PUSH
69116: LD_INT 5
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: PUSH
69123: LD_INT 2
69125: NEG
69126: PUSH
69127: LD_INT 3
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: PUSH
69134: LD_INT 3
69136: NEG
69137: PUSH
69138: LD_INT 0
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PUSH
69145: LD_INT 3
69147: NEG
69148: PUSH
69149: LD_INT 1
69151: NEG
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: LD_INT 2
69159: NEG
69160: PUSH
69161: LD_INT 0
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: PUSH
69168: LD_INT 2
69170: NEG
69171: PUSH
69172: LD_INT 1
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: PUSH
69179: LD_INT 3
69181: NEG
69182: PUSH
69183: LD_INT 1
69185: PUSH
69186: EMPTY
69187: LIST
69188: LIST
69189: PUSH
69190: LD_INT 4
69192: NEG
69193: PUSH
69194: LD_INT 0
69196: PUSH
69197: EMPTY
69198: LIST
69199: LIST
69200: PUSH
69201: LD_INT 4
69203: NEG
69204: PUSH
69205: LD_INT 1
69207: NEG
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: PUSH
69213: LD_INT 4
69215: NEG
69216: PUSH
69217: LD_INT 2
69219: NEG
69220: PUSH
69221: EMPTY
69222: LIST
69223: LIST
69224: PUSH
69225: LD_INT 2
69227: NEG
69228: PUSH
69229: LD_INT 2
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: PUSH
69236: LD_INT 4
69238: NEG
69239: PUSH
69240: LD_INT 4
69242: NEG
69243: PUSH
69244: EMPTY
69245: LIST
69246: LIST
69247: PUSH
69248: LD_INT 4
69250: NEG
69251: PUSH
69252: LD_INT 5
69254: NEG
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: LD_INT 3
69262: NEG
69263: PUSH
69264: LD_INT 4
69266: NEG
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PUSH
69272: LD_INT 3
69274: NEG
69275: PUSH
69276: LD_INT 3
69278: NEG
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: PUSH
69284: LD_INT 4
69286: NEG
69287: PUSH
69288: LD_INT 3
69290: NEG
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_INT 5
69298: NEG
69299: PUSH
69300: LD_INT 4
69302: NEG
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: PUSH
69308: LD_INT 5
69310: NEG
69311: PUSH
69312: LD_INT 5
69314: NEG
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PUSH
69320: LD_INT 3
69322: NEG
69323: PUSH
69324: LD_INT 5
69326: NEG
69327: PUSH
69328: EMPTY
69329: LIST
69330: LIST
69331: PUSH
69332: LD_INT 5
69334: NEG
69335: PUSH
69336: LD_INT 3
69338: NEG
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: PUSH
69344: LD_INT 0
69346: PUSH
69347: LD_INT 3
69349: NEG
69350: PUSH
69351: EMPTY
69352: LIST
69353: LIST
69354: PUSH
69355: LD_INT 0
69357: PUSH
69358: LD_INT 4
69360: NEG
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: PUSH
69366: LD_INT 1
69368: PUSH
69369: LD_INT 3
69371: NEG
69372: PUSH
69373: EMPTY
69374: LIST
69375: LIST
69376: PUSH
69377: LD_INT 1
69379: PUSH
69380: LD_INT 2
69382: NEG
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PUSH
69388: LD_INT 0
69390: PUSH
69391: LD_INT 2
69393: NEG
69394: PUSH
69395: EMPTY
69396: LIST
69397: LIST
69398: PUSH
69399: LD_INT 1
69401: NEG
69402: PUSH
69403: LD_INT 3
69405: NEG
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: PUSH
69411: LD_INT 1
69413: NEG
69414: PUSH
69415: LD_INT 4
69417: NEG
69418: PUSH
69419: EMPTY
69420: LIST
69421: LIST
69422: PUSH
69423: LD_INT 2
69425: PUSH
69426: LD_INT 2
69428: NEG
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: PUSH
69434: LD_INT 2
69436: NEG
69437: PUSH
69438: LD_INT 4
69440: NEG
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 4
69448: PUSH
69449: LD_INT 0
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PUSH
69456: LD_INT 4
69458: PUSH
69459: LD_INT 1
69461: NEG
69462: PUSH
69463: EMPTY
69464: LIST
69465: LIST
69466: PUSH
69467: LD_INT 5
69469: PUSH
69470: LD_INT 0
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: PUSH
69477: LD_INT 5
69479: PUSH
69480: LD_INT 1
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: PUSH
69487: LD_INT 4
69489: PUSH
69490: LD_INT 1
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 3
69499: PUSH
69500: LD_INT 0
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: PUSH
69507: LD_INT 3
69509: PUSH
69510: LD_INT 1
69512: NEG
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: LD_INT 3
69520: PUSH
69521: LD_INT 2
69523: NEG
69524: PUSH
69525: EMPTY
69526: LIST
69527: LIST
69528: PUSH
69529: LD_INT 5
69531: PUSH
69532: LD_INT 2
69534: PUSH
69535: EMPTY
69536: LIST
69537: LIST
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: LIST
69559: LIST
69560: LIST
69561: LIST
69562: LIST
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: LIST
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: LIST
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69586: LD_ADDR_VAR 0 32
69590: PUSH
69591: LD_INT 4
69593: NEG
69594: PUSH
69595: LD_INT 0
69597: PUSH
69598: EMPTY
69599: LIST
69600: LIST
69601: PUSH
69602: LD_INT 4
69604: NEG
69605: PUSH
69606: LD_INT 1
69608: NEG
69609: PUSH
69610: EMPTY
69611: LIST
69612: LIST
69613: PUSH
69614: LD_INT 3
69616: NEG
69617: PUSH
69618: LD_INT 0
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PUSH
69625: LD_INT 3
69627: NEG
69628: PUSH
69629: LD_INT 1
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: PUSH
69636: LD_INT 4
69638: NEG
69639: PUSH
69640: LD_INT 1
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PUSH
69647: LD_INT 5
69649: NEG
69650: PUSH
69651: LD_INT 0
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: LD_INT 5
69660: NEG
69661: PUSH
69662: LD_INT 1
69664: NEG
69665: PUSH
69666: EMPTY
69667: LIST
69668: LIST
69669: PUSH
69670: LD_INT 5
69672: NEG
69673: PUSH
69674: LD_INT 2
69676: NEG
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: PUSH
69682: LD_INT 3
69684: NEG
69685: PUSH
69686: LD_INT 2
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: PUSH
69693: LD_INT 3
69695: NEG
69696: PUSH
69697: LD_INT 3
69699: NEG
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: PUSH
69705: LD_INT 3
69707: NEG
69708: PUSH
69709: LD_INT 4
69711: NEG
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: PUSH
69717: LD_INT 2
69719: NEG
69720: PUSH
69721: LD_INT 3
69723: NEG
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: PUSH
69729: LD_INT 2
69731: NEG
69732: PUSH
69733: LD_INT 2
69735: NEG
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: PUSH
69741: LD_INT 3
69743: NEG
69744: PUSH
69745: LD_INT 2
69747: NEG
69748: PUSH
69749: EMPTY
69750: LIST
69751: LIST
69752: PUSH
69753: LD_INT 4
69755: NEG
69756: PUSH
69757: LD_INT 3
69759: NEG
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PUSH
69765: LD_INT 4
69767: NEG
69768: PUSH
69769: LD_INT 4
69771: NEG
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: LD_INT 2
69779: NEG
69780: PUSH
69781: LD_INT 4
69783: NEG
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: LD_INT 4
69791: NEG
69792: PUSH
69793: LD_INT 2
69795: NEG
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 0
69803: PUSH
69804: LD_INT 4
69806: NEG
69807: PUSH
69808: EMPTY
69809: LIST
69810: LIST
69811: PUSH
69812: LD_INT 0
69814: PUSH
69815: LD_INT 5
69817: NEG
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: LD_INT 1
69825: PUSH
69826: LD_INT 4
69828: NEG
69829: PUSH
69830: EMPTY
69831: LIST
69832: LIST
69833: PUSH
69834: LD_INT 1
69836: PUSH
69837: LD_INT 3
69839: NEG
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: LD_INT 0
69847: PUSH
69848: LD_INT 3
69850: NEG
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: PUSH
69856: LD_INT 1
69858: NEG
69859: PUSH
69860: LD_INT 4
69862: NEG
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: PUSH
69868: LD_INT 1
69870: NEG
69871: PUSH
69872: LD_INT 5
69874: NEG
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: PUSH
69880: LD_INT 2
69882: PUSH
69883: LD_INT 3
69885: NEG
69886: PUSH
69887: EMPTY
69888: LIST
69889: LIST
69890: PUSH
69891: LD_INT 2
69893: NEG
69894: PUSH
69895: LD_INT 5
69897: NEG
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: PUSH
69903: LD_INT 3
69905: PUSH
69906: LD_INT 0
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: PUSH
69913: LD_INT 3
69915: PUSH
69916: LD_INT 1
69918: NEG
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: PUSH
69924: LD_INT 4
69926: PUSH
69927: LD_INT 0
69929: PUSH
69930: EMPTY
69931: LIST
69932: LIST
69933: PUSH
69934: LD_INT 4
69936: PUSH
69937: LD_INT 1
69939: PUSH
69940: EMPTY
69941: LIST
69942: LIST
69943: PUSH
69944: LD_INT 3
69946: PUSH
69947: LD_INT 1
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: PUSH
69954: LD_INT 2
69956: PUSH
69957: LD_INT 0
69959: PUSH
69960: EMPTY
69961: LIST
69962: LIST
69963: PUSH
69964: LD_INT 2
69966: PUSH
69967: LD_INT 1
69969: NEG
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_INT 2
69977: PUSH
69978: LD_INT 2
69980: NEG
69981: PUSH
69982: EMPTY
69983: LIST
69984: LIST
69985: PUSH
69986: LD_INT 4
69988: PUSH
69989: LD_INT 2
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: PUSH
69996: LD_INT 4
69998: PUSH
69999: LD_INT 4
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: LD_INT 4
70008: PUSH
70009: LD_INT 3
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PUSH
70016: LD_INT 5
70018: PUSH
70019: LD_INT 4
70021: PUSH
70022: EMPTY
70023: LIST
70024: LIST
70025: PUSH
70026: LD_INT 5
70028: PUSH
70029: LD_INT 5
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: PUSH
70036: LD_INT 4
70038: PUSH
70039: LD_INT 5
70041: PUSH
70042: EMPTY
70043: LIST
70044: LIST
70045: PUSH
70046: LD_INT 3
70048: PUSH
70049: LD_INT 4
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: PUSH
70056: LD_INT 3
70058: PUSH
70059: LD_INT 3
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: PUSH
70066: LD_INT 5
70068: PUSH
70069: LD_INT 3
70071: PUSH
70072: EMPTY
70073: LIST
70074: LIST
70075: PUSH
70076: LD_INT 3
70078: PUSH
70079: LD_INT 5
70081: PUSH
70082: EMPTY
70083: LIST
70084: LIST
70085: PUSH
70086: EMPTY
70087: LIST
70088: LIST
70089: LIST
70090: LIST
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: LIST
70097: LIST
70098: LIST
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: LIST
70104: LIST
70105: LIST
70106: LIST
70107: LIST
70108: LIST
70109: LIST
70110: LIST
70111: LIST
70112: LIST
70113: LIST
70114: LIST
70115: LIST
70116: LIST
70117: LIST
70118: LIST
70119: LIST
70120: LIST
70121: LIST
70122: LIST
70123: LIST
70124: LIST
70125: LIST
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: LIST
70131: LIST
70132: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70133: LD_ADDR_VAR 0 33
70137: PUSH
70138: LD_INT 4
70140: NEG
70141: PUSH
70142: LD_INT 4
70144: NEG
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: PUSH
70150: LD_INT 4
70152: NEG
70153: PUSH
70154: LD_INT 5
70156: NEG
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PUSH
70162: LD_INT 3
70164: NEG
70165: PUSH
70166: LD_INT 4
70168: NEG
70169: PUSH
70170: EMPTY
70171: LIST
70172: LIST
70173: PUSH
70174: LD_INT 3
70176: NEG
70177: PUSH
70178: LD_INT 3
70180: NEG
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: PUSH
70186: LD_INT 4
70188: NEG
70189: PUSH
70190: LD_INT 3
70192: NEG
70193: PUSH
70194: EMPTY
70195: LIST
70196: LIST
70197: PUSH
70198: LD_INT 5
70200: NEG
70201: PUSH
70202: LD_INT 4
70204: NEG
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: LD_INT 5
70212: NEG
70213: PUSH
70214: LD_INT 5
70216: NEG
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 3
70224: NEG
70225: PUSH
70226: LD_INT 5
70228: NEG
70229: PUSH
70230: EMPTY
70231: LIST
70232: LIST
70233: PUSH
70234: LD_INT 5
70236: NEG
70237: PUSH
70238: LD_INT 3
70240: NEG
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: LD_INT 0
70248: PUSH
70249: LD_INT 3
70251: NEG
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: PUSH
70257: LD_INT 0
70259: PUSH
70260: LD_INT 4
70262: NEG
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PUSH
70268: LD_INT 1
70270: PUSH
70271: LD_INT 3
70273: NEG
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: PUSH
70279: LD_INT 1
70281: PUSH
70282: LD_INT 2
70284: NEG
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PUSH
70290: LD_INT 0
70292: PUSH
70293: LD_INT 2
70295: NEG
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: PUSH
70301: LD_INT 1
70303: NEG
70304: PUSH
70305: LD_INT 3
70307: NEG
70308: PUSH
70309: EMPTY
70310: LIST
70311: LIST
70312: PUSH
70313: LD_INT 1
70315: NEG
70316: PUSH
70317: LD_INT 4
70319: NEG
70320: PUSH
70321: EMPTY
70322: LIST
70323: LIST
70324: PUSH
70325: LD_INT 2
70327: PUSH
70328: LD_INT 2
70330: NEG
70331: PUSH
70332: EMPTY
70333: LIST
70334: LIST
70335: PUSH
70336: LD_INT 2
70338: NEG
70339: PUSH
70340: LD_INT 4
70342: NEG
70343: PUSH
70344: EMPTY
70345: LIST
70346: LIST
70347: PUSH
70348: LD_INT 4
70350: PUSH
70351: LD_INT 0
70353: PUSH
70354: EMPTY
70355: LIST
70356: LIST
70357: PUSH
70358: LD_INT 4
70360: PUSH
70361: LD_INT 1
70363: NEG
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: PUSH
70369: LD_INT 5
70371: PUSH
70372: LD_INT 0
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: PUSH
70379: LD_INT 5
70381: PUSH
70382: LD_INT 1
70384: PUSH
70385: EMPTY
70386: LIST
70387: LIST
70388: PUSH
70389: LD_INT 4
70391: PUSH
70392: LD_INT 1
70394: PUSH
70395: EMPTY
70396: LIST
70397: LIST
70398: PUSH
70399: LD_INT 3
70401: PUSH
70402: LD_INT 0
70404: PUSH
70405: EMPTY
70406: LIST
70407: LIST
70408: PUSH
70409: LD_INT 3
70411: PUSH
70412: LD_INT 1
70414: NEG
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: PUSH
70420: LD_INT 3
70422: PUSH
70423: LD_INT 2
70425: NEG
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PUSH
70431: LD_INT 5
70433: PUSH
70434: LD_INT 2
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: PUSH
70441: LD_INT 3
70443: PUSH
70444: LD_INT 3
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: PUSH
70451: LD_INT 3
70453: PUSH
70454: LD_INT 2
70456: PUSH
70457: EMPTY
70458: LIST
70459: LIST
70460: PUSH
70461: LD_INT 4
70463: PUSH
70464: LD_INT 3
70466: PUSH
70467: EMPTY
70468: LIST
70469: LIST
70470: PUSH
70471: LD_INT 4
70473: PUSH
70474: LD_INT 4
70476: PUSH
70477: EMPTY
70478: LIST
70479: LIST
70480: PUSH
70481: LD_INT 3
70483: PUSH
70484: LD_INT 4
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: PUSH
70491: LD_INT 2
70493: PUSH
70494: LD_INT 3
70496: PUSH
70497: EMPTY
70498: LIST
70499: LIST
70500: PUSH
70501: LD_INT 2
70503: PUSH
70504: LD_INT 2
70506: PUSH
70507: EMPTY
70508: LIST
70509: LIST
70510: PUSH
70511: LD_INT 4
70513: PUSH
70514: LD_INT 2
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: LD_INT 2
70523: PUSH
70524: LD_INT 4
70526: PUSH
70527: EMPTY
70528: LIST
70529: LIST
70530: PUSH
70531: LD_INT 0
70533: PUSH
70534: LD_INT 4
70536: PUSH
70537: EMPTY
70538: LIST
70539: LIST
70540: PUSH
70541: LD_INT 0
70543: PUSH
70544: LD_INT 3
70546: PUSH
70547: EMPTY
70548: LIST
70549: LIST
70550: PUSH
70551: LD_INT 1
70553: PUSH
70554: LD_INT 4
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: PUSH
70561: LD_INT 1
70563: PUSH
70564: LD_INT 5
70566: PUSH
70567: EMPTY
70568: LIST
70569: LIST
70570: PUSH
70571: LD_INT 0
70573: PUSH
70574: LD_INT 5
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: PUSH
70581: LD_INT 1
70583: NEG
70584: PUSH
70585: LD_INT 4
70587: PUSH
70588: EMPTY
70589: LIST
70590: LIST
70591: PUSH
70592: LD_INT 1
70594: NEG
70595: PUSH
70596: LD_INT 3
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: PUSH
70603: LD_INT 2
70605: PUSH
70606: LD_INT 5
70608: PUSH
70609: EMPTY
70610: LIST
70611: LIST
70612: PUSH
70613: LD_INT 2
70615: NEG
70616: PUSH
70617: LD_INT 3
70619: PUSH
70620: EMPTY
70621: LIST
70622: LIST
70623: PUSH
70624: EMPTY
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: LIST
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: LIST
70652: LIST
70653: LIST
70654: LIST
70655: LIST
70656: LIST
70657: LIST
70658: LIST
70659: LIST
70660: LIST
70661: LIST
70662: LIST
70663: LIST
70664: LIST
70665: LIST
70666: LIST
70667: LIST
70668: LIST
70669: LIST
70670: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70671: LD_ADDR_VAR 0 34
70675: PUSH
70676: LD_INT 0
70678: PUSH
70679: LD_INT 4
70681: NEG
70682: PUSH
70683: EMPTY
70684: LIST
70685: LIST
70686: PUSH
70687: LD_INT 0
70689: PUSH
70690: LD_INT 5
70692: NEG
70693: PUSH
70694: EMPTY
70695: LIST
70696: LIST
70697: PUSH
70698: LD_INT 1
70700: PUSH
70701: LD_INT 4
70703: NEG
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: PUSH
70709: LD_INT 1
70711: PUSH
70712: LD_INT 3
70714: NEG
70715: PUSH
70716: EMPTY
70717: LIST
70718: LIST
70719: PUSH
70720: LD_INT 0
70722: PUSH
70723: LD_INT 3
70725: NEG
70726: PUSH
70727: EMPTY
70728: LIST
70729: LIST
70730: PUSH
70731: LD_INT 1
70733: NEG
70734: PUSH
70735: LD_INT 4
70737: NEG
70738: PUSH
70739: EMPTY
70740: LIST
70741: LIST
70742: PUSH
70743: LD_INT 1
70745: NEG
70746: PUSH
70747: LD_INT 5
70749: NEG
70750: PUSH
70751: EMPTY
70752: LIST
70753: LIST
70754: PUSH
70755: LD_INT 2
70757: PUSH
70758: LD_INT 3
70760: NEG
70761: PUSH
70762: EMPTY
70763: LIST
70764: LIST
70765: PUSH
70766: LD_INT 2
70768: NEG
70769: PUSH
70770: LD_INT 5
70772: NEG
70773: PUSH
70774: EMPTY
70775: LIST
70776: LIST
70777: PUSH
70778: LD_INT 3
70780: PUSH
70781: LD_INT 0
70783: PUSH
70784: EMPTY
70785: LIST
70786: LIST
70787: PUSH
70788: LD_INT 3
70790: PUSH
70791: LD_INT 1
70793: NEG
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 4
70801: PUSH
70802: LD_INT 0
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: PUSH
70809: LD_INT 4
70811: PUSH
70812: LD_INT 1
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: PUSH
70819: LD_INT 3
70821: PUSH
70822: LD_INT 1
70824: PUSH
70825: EMPTY
70826: LIST
70827: LIST
70828: PUSH
70829: LD_INT 2
70831: PUSH
70832: LD_INT 0
70834: PUSH
70835: EMPTY
70836: LIST
70837: LIST
70838: PUSH
70839: LD_INT 2
70841: PUSH
70842: LD_INT 1
70844: NEG
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: PUSH
70850: LD_INT 2
70852: PUSH
70853: LD_INT 2
70855: NEG
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: PUSH
70861: LD_INT 4
70863: PUSH
70864: LD_INT 2
70866: PUSH
70867: EMPTY
70868: LIST
70869: LIST
70870: PUSH
70871: LD_INT 4
70873: PUSH
70874: LD_INT 4
70876: PUSH
70877: EMPTY
70878: LIST
70879: LIST
70880: PUSH
70881: LD_INT 4
70883: PUSH
70884: LD_INT 3
70886: PUSH
70887: EMPTY
70888: LIST
70889: LIST
70890: PUSH
70891: LD_INT 5
70893: PUSH
70894: LD_INT 4
70896: PUSH
70897: EMPTY
70898: LIST
70899: LIST
70900: PUSH
70901: LD_INT 5
70903: PUSH
70904: LD_INT 5
70906: PUSH
70907: EMPTY
70908: LIST
70909: LIST
70910: PUSH
70911: LD_INT 4
70913: PUSH
70914: LD_INT 5
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: PUSH
70921: LD_INT 3
70923: PUSH
70924: LD_INT 4
70926: PUSH
70927: EMPTY
70928: LIST
70929: LIST
70930: PUSH
70931: LD_INT 3
70933: PUSH
70934: LD_INT 3
70936: PUSH
70937: EMPTY
70938: LIST
70939: LIST
70940: PUSH
70941: LD_INT 5
70943: PUSH
70944: LD_INT 3
70946: PUSH
70947: EMPTY
70948: LIST
70949: LIST
70950: PUSH
70951: LD_INT 3
70953: PUSH
70954: LD_INT 5
70956: PUSH
70957: EMPTY
70958: LIST
70959: LIST
70960: PUSH
70961: LD_INT 0
70963: PUSH
70964: LD_INT 3
70966: PUSH
70967: EMPTY
70968: LIST
70969: LIST
70970: PUSH
70971: LD_INT 0
70973: PUSH
70974: LD_INT 2
70976: PUSH
70977: EMPTY
70978: LIST
70979: LIST
70980: PUSH
70981: LD_INT 1
70983: PUSH
70984: LD_INT 3
70986: PUSH
70987: EMPTY
70988: LIST
70989: LIST
70990: PUSH
70991: LD_INT 1
70993: PUSH
70994: LD_INT 4
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: PUSH
71001: LD_INT 0
71003: PUSH
71004: LD_INT 4
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: LD_INT 1
71013: NEG
71014: PUSH
71015: LD_INT 3
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: PUSH
71022: LD_INT 1
71024: NEG
71025: PUSH
71026: LD_INT 2
71028: PUSH
71029: EMPTY
71030: LIST
71031: LIST
71032: PUSH
71033: LD_INT 2
71035: PUSH
71036: LD_INT 4
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: PUSH
71043: LD_INT 2
71045: NEG
71046: PUSH
71047: LD_INT 2
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: PUSH
71054: LD_INT 4
71056: NEG
71057: PUSH
71058: LD_INT 0
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: PUSH
71065: LD_INT 4
71067: NEG
71068: PUSH
71069: LD_INT 1
71071: NEG
71072: PUSH
71073: EMPTY
71074: LIST
71075: LIST
71076: PUSH
71077: LD_INT 3
71079: NEG
71080: PUSH
71081: LD_INT 0
71083: PUSH
71084: EMPTY
71085: LIST
71086: LIST
71087: PUSH
71088: LD_INT 3
71090: NEG
71091: PUSH
71092: LD_INT 1
71094: PUSH
71095: EMPTY
71096: LIST
71097: LIST
71098: PUSH
71099: LD_INT 4
71101: NEG
71102: PUSH
71103: LD_INT 1
71105: PUSH
71106: EMPTY
71107: LIST
71108: LIST
71109: PUSH
71110: LD_INT 5
71112: NEG
71113: PUSH
71114: LD_INT 0
71116: PUSH
71117: EMPTY
71118: LIST
71119: LIST
71120: PUSH
71121: LD_INT 5
71123: NEG
71124: PUSH
71125: LD_INT 1
71127: NEG
71128: PUSH
71129: EMPTY
71130: LIST
71131: LIST
71132: PUSH
71133: LD_INT 5
71135: NEG
71136: PUSH
71137: LD_INT 2
71139: NEG
71140: PUSH
71141: EMPTY
71142: LIST
71143: LIST
71144: PUSH
71145: LD_INT 3
71147: NEG
71148: PUSH
71149: LD_INT 2
71151: PUSH
71152: EMPTY
71153: LIST
71154: LIST
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: LIST
71160: LIST
71161: LIST
71162: LIST
71163: LIST
71164: LIST
71165: LIST
71166: LIST
71167: LIST
71168: LIST
71169: LIST
71170: LIST
71171: LIST
71172: LIST
71173: LIST
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: LIST
71183: LIST
71184: LIST
71185: LIST
71186: LIST
71187: LIST
71188: LIST
71189: LIST
71190: LIST
71191: LIST
71192: LIST
71193: LIST
71194: LIST
71195: LIST
71196: LIST
71197: LIST
71198: LIST
71199: LIST
71200: LIST
71201: LIST
71202: ST_TO_ADDR
// end ; end ;
71203: GO 71206
71205: POP
// case btype of b_depot , b_warehouse :
71206: LD_VAR 0 1
71210: PUSH
71211: LD_INT 0
71213: DOUBLE
71214: EQUAL
71215: IFTRUE 71225
71217: LD_INT 1
71219: DOUBLE
71220: EQUAL
71221: IFTRUE 71225
71223: GO 71426
71225: POP
// case nation of nation_american :
71226: LD_VAR 0 5
71230: PUSH
71231: LD_INT 1
71233: DOUBLE
71234: EQUAL
71235: IFTRUE 71239
71237: GO 71295
71239: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71240: LD_ADDR_VAR 0 9
71244: PUSH
71245: LD_VAR 0 11
71249: PUSH
71250: LD_VAR 0 12
71254: PUSH
71255: LD_VAR 0 13
71259: PUSH
71260: LD_VAR 0 14
71264: PUSH
71265: LD_VAR 0 15
71269: PUSH
71270: LD_VAR 0 16
71274: PUSH
71275: EMPTY
71276: LIST
71277: LIST
71278: LIST
71279: LIST
71280: LIST
71281: LIST
71282: PUSH
71283: LD_VAR 0 4
71287: PUSH
71288: LD_INT 1
71290: PLUS
71291: ARRAY
71292: ST_TO_ADDR
71293: GO 71424
71295: LD_INT 2
71297: DOUBLE
71298: EQUAL
71299: IFTRUE 71303
71301: GO 71359
71303: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71304: LD_ADDR_VAR 0 9
71308: PUSH
71309: LD_VAR 0 17
71313: PUSH
71314: LD_VAR 0 18
71318: PUSH
71319: LD_VAR 0 19
71323: PUSH
71324: LD_VAR 0 20
71328: PUSH
71329: LD_VAR 0 21
71333: PUSH
71334: LD_VAR 0 22
71338: PUSH
71339: EMPTY
71340: LIST
71341: LIST
71342: LIST
71343: LIST
71344: LIST
71345: LIST
71346: PUSH
71347: LD_VAR 0 4
71351: PUSH
71352: LD_INT 1
71354: PLUS
71355: ARRAY
71356: ST_TO_ADDR
71357: GO 71424
71359: LD_INT 3
71361: DOUBLE
71362: EQUAL
71363: IFTRUE 71367
71365: GO 71423
71367: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71368: LD_ADDR_VAR 0 9
71372: PUSH
71373: LD_VAR 0 23
71377: PUSH
71378: LD_VAR 0 24
71382: PUSH
71383: LD_VAR 0 25
71387: PUSH
71388: LD_VAR 0 26
71392: PUSH
71393: LD_VAR 0 27
71397: PUSH
71398: LD_VAR 0 28
71402: PUSH
71403: EMPTY
71404: LIST
71405: LIST
71406: LIST
71407: LIST
71408: LIST
71409: LIST
71410: PUSH
71411: LD_VAR 0 4
71415: PUSH
71416: LD_INT 1
71418: PLUS
71419: ARRAY
71420: ST_TO_ADDR
71421: GO 71424
71423: POP
71424: GO 71979
71426: LD_INT 2
71428: DOUBLE
71429: EQUAL
71430: IFTRUE 71440
71432: LD_INT 3
71434: DOUBLE
71435: EQUAL
71436: IFTRUE 71440
71438: GO 71496
71440: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71441: LD_ADDR_VAR 0 9
71445: PUSH
71446: LD_VAR 0 29
71450: PUSH
71451: LD_VAR 0 30
71455: PUSH
71456: LD_VAR 0 31
71460: PUSH
71461: LD_VAR 0 32
71465: PUSH
71466: LD_VAR 0 33
71470: PUSH
71471: LD_VAR 0 34
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: LIST
71480: LIST
71481: LIST
71482: LIST
71483: PUSH
71484: LD_VAR 0 4
71488: PUSH
71489: LD_INT 1
71491: PLUS
71492: ARRAY
71493: ST_TO_ADDR
71494: GO 71979
71496: LD_INT 16
71498: DOUBLE
71499: EQUAL
71500: IFTRUE 71558
71502: LD_INT 17
71504: DOUBLE
71505: EQUAL
71506: IFTRUE 71558
71508: LD_INT 18
71510: DOUBLE
71511: EQUAL
71512: IFTRUE 71558
71514: LD_INT 19
71516: DOUBLE
71517: EQUAL
71518: IFTRUE 71558
71520: LD_INT 22
71522: DOUBLE
71523: EQUAL
71524: IFTRUE 71558
71526: LD_INT 20
71528: DOUBLE
71529: EQUAL
71530: IFTRUE 71558
71532: LD_INT 21
71534: DOUBLE
71535: EQUAL
71536: IFTRUE 71558
71538: LD_INT 23
71540: DOUBLE
71541: EQUAL
71542: IFTRUE 71558
71544: LD_INT 24
71546: DOUBLE
71547: EQUAL
71548: IFTRUE 71558
71550: LD_INT 25
71552: DOUBLE
71553: EQUAL
71554: IFTRUE 71558
71556: GO 71614
71558: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71559: LD_ADDR_VAR 0 9
71563: PUSH
71564: LD_VAR 0 35
71568: PUSH
71569: LD_VAR 0 36
71573: PUSH
71574: LD_VAR 0 37
71578: PUSH
71579: LD_VAR 0 38
71583: PUSH
71584: LD_VAR 0 39
71588: PUSH
71589: LD_VAR 0 40
71593: PUSH
71594: EMPTY
71595: LIST
71596: LIST
71597: LIST
71598: LIST
71599: LIST
71600: LIST
71601: PUSH
71602: LD_VAR 0 4
71606: PUSH
71607: LD_INT 1
71609: PLUS
71610: ARRAY
71611: ST_TO_ADDR
71612: GO 71979
71614: LD_INT 6
71616: DOUBLE
71617: EQUAL
71618: IFTRUE 71670
71620: LD_INT 7
71622: DOUBLE
71623: EQUAL
71624: IFTRUE 71670
71626: LD_INT 8
71628: DOUBLE
71629: EQUAL
71630: IFTRUE 71670
71632: LD_INT 13
71634: DOUBLE
71635: EQUAL
71636: IFTRUE 71670
71638: LD_INT 12
71640: DOUBLE
71641: EQUAL
71642: IFTRUE 71670
71644: LD_INT 15
71646: DOUBLE
71647: EQUAL
71648: IFTRUE 71670
71650: LD_INT 11
71652: DOUBLE
71653: EQUAL
71654: IFTRUE 71670
71656: LD_INT 14
71658: DOUBLE
71659: EQUAL
71660: IFTRUE 71670
71662: LD_INT 10
71664: DOUBLE
71665: EQUAL
71666: IFTRUE 71670
71668: GO 71726
71670: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71671: LD_ADDR_VAR 0 9
71675: PUSH
71676: LD_VAR 0 41
71680: PUSH
71681: LD_VAR 0 42
71685: PUSH
71686: LD_VAR 0 43
71690: PUSH
71691: LD_VAR 0 44
71695: PUSH
71696: LD_VAR 0 45
71700: PUSH
71701: LD_VAR 0 46
71705: PUSH
71706: EMPTY
71707: LIST
71708: LIST
71709: LIST
71710: LIST
71711: LIST
71712: LIST
71713: PUSH
71714: LD_VAR 0 4
71718: PUSH
71719: LD_INT 1
71721: PLUS
71722: ARRAY
71723: ST_TO_ADDR
71724: GO 71979
71726: LD_INT 36
71728: DOUBLE
71729: EQUAL
71730: IFTRUE 71734
71732: GO 71790
71734: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71735: LD_ADDR_VAR 0 9
71739: PUSH
71740: LD_VAR 0 47
71744: PUSH
71745: LD_VAR 0 48
71749: PUSH
71750: LD_VAR 0 49
71754: PUSH
71755: LD_VAR 0 50
71759: PUSH
71760: LD_VAR 0 51
71764: PUSH
71765: LD_VAR 0 52
71769: PUSH
71770: EMPTY
71771: LIST
71772: LIST
71773: LIST
71774: LIST
71775: LIST
71776: LIST
71777: PUSH
71778: LD_VAR 0 4
71782: PUSH
71783: LD_INT 1
71785: PLUS
71786: ARRAY
71787: ST_TO_ADDR
71788: GO 71979
71790: LD_INT 4
71792: DOUBLE
71793: EQUAL
71794: IFTRUE 71816
71796: LD_INT 5
71798: DOUBLE
71799: EQUAL
71800: IFTRUE 71816
71802: LD_INT 34
71804: DOUBLE
71805: EQUAL
71806: IFTRUE 71816
71808: LD_INT 37
71810: DOUBLE
71811: EQUAL
71812: IFTRUE 71816
71814: GO 71872
71816: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71817: LD_ADDR_VAR 0 9
71821: PUSH
71822: LD_VAR 0 53
71826: PUSH
71827: LD_VAR 0 54
71831: PUSH
71832: LD_VAR 0 55
71836: PUSH
71837: LD_VAR 0 56
71841: PUSH
71842: LD_VAR 0 57
71846: PUSH
71847: LD_VAR 0 58
71851: PUSH
71852: EMPTY
71853: LIST
71854: LIST
71855: LIST
71856: LIST
71857: LIST
71858: LIST
71859: PUSH
71860: LD_VAR 0 4
71864: PUSH
71865: LD_INT 1
71867: PLUS
71868: ARRAY
71869: ST_TO_ADDR
71870: GO 71979
71872: LD_INT 31
71874: DOUBLE
71875: EQUAL
71876: IFTRUE 71922
71878: LD_INT 32
71880: DOUBLE
71881: EQUAL
71882: IFTRUE 71922
71884: LD_INT 33
71886: DOUBLE
71887: EQUAL
71888: IFTRUE 71922
71890: LD_INT 27
71892: DOUBLE
71893: EQUAL
71894: IFTRUE 71922
71896: LD_INT 26
71898: DOUBLE
71899: EQUAL
71900: IFTRUE 71922
71902: LD_INT 28
71904: DOUBLE
71905: EQUAL
71906: IFTRUE 71922
71908: LD_INT 29
71910: DOUBLE
71911: EQUAL
71912: IFTRUE 71922
71914: LD_INT 30
71916: DOUBLE
71917: EQUAL
71918: IFTRUE 71922
71920: GO 71978
71922: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71923: LD_ADDR_VAR 0 9
71927: PUSH
71928: LD_VAR 0 59
71932: PUSH
71933: LD_VAR 0 60
71937: PUSH
71938: LD_VAR 0 61
71942: PUSH
71943: LD_VAR 0 62
71947: PUSH
71948: LD_VAR 0 63
71952: PUSH
71953: LD_VAR 0 64
71957: PUSH
71958: EMPTY
71959: LIST
71960: LIST
71961: LIST
71962: LIST
71963: LIST
71964: LIST
71965: PUSH
71966: LD_VAR 0 4
71970: PUSH
71971: LD_INT 1
71973: PLUS
71974: ARRAY
71975: ST_TO_ADDR
71976: GO 71979
71978: POP
// temp_list2 = [ ] ;
71979: LD_ADDR_VAR 0 10
71983: PUSH
71984: EMPTY
71985: ST_TO_ADDR
// for i in temp_list do
71986: LD_ADDR_VAR 0 8
71990: PUSH
71991: LD_VAR 0 9
71995: PUSH
71996: FOR_IN
71997: IFFALSE 72049
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71999: LD_ADDR_VAR 0 10
72003: PUSH
72004: LD_VAR 0 10
72008: PUSH
72009: LD_VAR 0 8
72013: PUSH
72014: LD_INT 1
72016: ARRAY
72017: PUSH
72018: LD_VAR 0 2
72022: PLUS
72023: PUSH
72024: LD_VAR 0 8
72028: PUSH
72029: LD_INT 2
72031: ARRAY
72032: PUSH
72033: LD_VAR 0 3
72037: PLUS
72038: PUSH
72039: EMPTY
72040: LIST
72041: LIST
72042: PUSH
72043: EMPTY
72044: LIST
72045: ADD
72046: ST_TO_ADDR
72047: GO 71996
72049: POP
72050: POP
// result = temp_list2 ;
72051: LD_ADDR_VAR 0 7
72055: PUSH
72056: LD_VAR 0 10
72060: ST_TO_ADDR
// end ;
72061: LD_VAR 0 7
72065: RET
// export function EnemyInRange ( unit , dist ) ; begin
72066: LD_INT 0
72068: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72069: LD_ADDR_VAR 0 3
72073: PUSH
72074: LD_VAR 0 1
72078: PPUSH
72079: CALL_OW 255
72083: PPUSH
72084: LD_VAR 0 1
72088: PPUSH
72089: CALL_OW 250
72093: PPUSH
72094: LD_VAR 0 1
72098: PPUSH
72099: CALL_OW 251
72103: PPUSH
72104: LD_VAR 0 2
72108: PPUSH
72109: CALL 45439 0 4
72113: PUSH
72114: LD_INT 4
72116: ARRAY
72117: ST_TO_ADDR
// end ;
72118: LD_VAR 0 3
72122: RET
// export function PlayerSeeMe ( unit ) ; begin
72123: LD_INT 0
72125: PPUSH
// result := See ( your_side , unit ) ;
72126: LD_ADDR_VAR 0 2
72130: PUSH
72131: LD_OWVAR 2
72135: PPUSH
72136: LD_VAR 0 1
72140: PPUSH
72141: CALL_OW 292
72145: ST_TO_ADDR
// end ;
72146: LD_VAR 0 2
72150: RET
// export function ReverseDir ( unit ) ; begin
72151: LD_INT 0
72153: PPUSH
// if not unit then
72154: LD_VAR 0 1
72158: NOT
72159: IFFALSE 72163
// exit ;
72161: GO 72186
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72163: LD_ADDR_VAR 0 2
72167: PUSH
72168: LD_VAR 0 1
72172: PPUSH
72173: CALL_OW 254
72177: PUSH
72178: LD_INT 3
72180: PLUS
72181: PUSH
72182: LD_INT 6
72184: MOD
72185: ST_TO_ADDR
// end ;
72186: LD_VAR 0 2
72190: RET
// export function ReverseArray ( array ) ; var i ; begin
72191: LD_INT 0
72193: PPUSH
72194: PPUSH
// if not array then
72195: LD_VAR 0 1
72199: NOT
72200: IFFALSE 72204
// exit ;
72202: GO 72259
// result := [ ] ;
72204: LD_ADDR_VAR 0 2
72208: PUSH
72209: EMPTY
72210: ST_TO_ADDR
// for i := array downto 1 do
72211: LD_ADDR_VAR 0 3
72215: PUSH
72216: DOUBLE
72217: LD_VAR 0 1
72221: INC
72222: ST_TO_ADDR
72223: LD_INT 1
72225: PUSH
72226: FOR_DOWNTO
72227: IFFALSE 72257
// result := Join ( result , array [ i ] ) ;
72229: LD_ADDR_VAR 0 2
72233: PUSH
72234: LD_VAR 0 2
72238: PPUSH
72239: LD_VAR 0 1
72243: PUSH
72244: LD_VAR 0 3
72248: ARRAY
72249: PPUSH
72250: CALL 76924 0 2
72254: ST_TO_ADDR
72255: GO 72226
72257: POP
72258: POP
// end ;
72259: LD_VAR 0 2
72263: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72264: LD_INT 0
72266: PPUSH
72267: PPUSH
72268: PPUSH
72269: PPUSH
72270: PPUSH
72271: PPUSH
// if not unit or not hexes then
72272: LD_VAR 0 1
72276: NOT
72277: PUSH
72278: LD_VAR 0 2
72282: NOT
72283: OR
72284: IFFALSE 72288
// exit ;
72286: GO 72411
// dist := 9999 ;
72288: LD_ADDR_VAR 0 5
72292: PUSH
72293: LD_INT 9999
72295: ST_TO_ADDR
// for i = 1 to hexes do
72296: LD_ADDR_VAR 0 4
72300: PUSH
72301: DOUBLE
72302: LD_INT 1
72304: DEC
72305: ST_TO_ADDR
72306: LD_VAR 0 2
72310: PUSH
72311: FOR_TO
72312: IFFALSE 72399
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72314: LD_ADDR_VAR 0 6
72318: PUSH
72319: LD_VAR 0 1
72323: PPUSH
72324: LD_VAR 0 2
72328: PUSH
72329: LD_VAR 0 4
72333: ARRAY
72334: PUSH
72335: LD_INT 1
72337: ARRAY
72338: PPUSH
72339: LD_VAR 0 2
72343: PUSH
72344: LD_VAR 0 4
72348: ARRAY
72349: PUSH
72350: LD_INT 2
72352: ARRAY
72353: PPUSH
72354: CALL_OW 297
72358: ST_TO_ADDR
// if tdist < dist then
72359: LD_VAR 0 6
72363: PUSH
72364: LD_VAR 0 5
72368: LESS
72369: IFFALSE 72397
// begin hex := hexes [ i ] ;
72371: LD_ADDR_VAR 0 8
72375: PUSH
72376: LD_VAR 0 2
72380: PUSH
72381: LD_VAR 0 4
72385: ARRAY
72386: ST_TO_ADDR
// dist := tdist ;
72387: LD_ADDR_VAR 0 5
72391: PUSH
72392: LD_VAR 0 6
72396: ST_TO_ADDR
// end ; end ;
72397: GO 72311
72399: POP
72400: POP
// result := hex ;
72401: LD_ADDR_VAR 0 3
72405: PUSH
72406: LD_VAR 0 8
72410: ST_TO_ADDR
// end ;
72411: LD_VAR 0 3
72415: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72416: LD_INT 0
72418: PPUSH
72419: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72420: LD_VAR 0 1
72424: NOT
72425: PUSH
72426: LD_VAR 0 1
72430: PUSH
72431: LD_INT 21
72433: PUSH
72434: LD_INT 2
72436: PUSH
72437: EMPTY
72438: LIST
72439: LIST
72440: PUSH
72441: LD_INT 23
72443: PUSH
72444: LD_INT 2
72446: PUSH
72447: EMPTY
72448: LIST
72449: LIST
72450: PUSH
72451: EMPTY
72452: LIST
72453: LIST
72454: PPUSH
72455: CALL_OW 69
72459: IN
72460: NOT
72461: OR
72462: IFFALSE 72466
// exit ;
72464: GO 72513
// for i = 1 to 3 do
72466: LD_ADDR_VAR 0 3
72470: PUSH
72471: DOUBLE
72472: LD_INT 1
72474: DEC
72475: ST_TO_ADDR
72476: LD_INT 3
72478: PUSH
72479: FOR_TO
72480: IFFALSE 72511
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72482: LD_VAR 0 1
72486: PPUSH
72487: CALL_OW 250
72491: PPUSH
72492: LD_VAR 0 1
72496: PPUSH
72497: CALL_OW 251
72501: PPUSH
72502: LD_INT 1
72504: PPUSH
72505: CALL_OW 453
72509: GO 72479
72511: POP
72512: POP
// end ;
72513: LD_VAR 0 2
72517: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72518: LD_INT 0
72520: PPUSH
72521: PPUSH
72522: PPUSH
72523: PPUSH
72524: PPUSH
72525: PPUSH
// if not unit or not enemy_unit then
72526: LD_VAR 0 1
72530: NOT
72531: PUSH
72532: LD_VAR 0 2
72536: NOT
72537: OR
72538: IFFALSE 72542
// exit ;
72540: GO 73009
// if GetLives ( i ) < 250 then
72542: LD_VAR 0 4
72546: PPUSH
72547: CALL_OW 256
72551: PUSH
72552: LD_INT 250
72554: LESS
72555: IFFALSE 72568
// begin ComAutodestruct ( i ) ;
72557: LD_VAR 0 4
72561: PPUSH
72562: CALL 72416 0 1
// exit ;
72566: GO 73009
// end ; x := GetX ( enemy_unit ) ;
72568: LD_ADDR_VAR 0 7
72572: PUSH
72573: LD_VAR 0 2
72577: PPUSH
72578: CALL_OW 250
72582: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72583: LD_ADDR_VAR 0 8
72587: PUSH
72588: LD_VAR 0 2
72592: PPUSH
72593: CALL_OW 251
72597: ST_TO_ADDR
// if not x or not y then
72598: LD_VAR 0 7
72602: NOT
72603: PUSH
72604: LD_VAR 0 8
72608: NOT
72609: OR
72610: IFFALSE 72614
// exit ;
72612: GO 73009
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72614: LD_ADDR_VAR 0 6
72618: PUSH
72619: LD_VAR 0 7
72623: PPUSH
72624: LD_INT 0
72626: PPUSH
72627: LD_INT 4
72629: PPUSH
72630: CALL_OW 272
72634: PUSH
72635: LD_VAR 0 8
72639: PPUSH
72640: LD_INT 0
72642: PPUSH
72643: LD_INT 4
72645: PPUSH
72646: CALL_OW 273
72650: PUSH
72651: EMPTY
72652: LIST
72653: LIST
72654: PUSH
72655: LD_VAR 0 7
72659: PPUSH
72660: LD_INT 1
72662: PPUSH
72663: LD_INT 4
72665: PPUSH
72666: CALL_OW 272
72670: PUSH
72671: LD_VAR 0 8
72675: PPUSH
72676: LD_INT 1
72678: PPUSH
72679: LD_INT 4
72681: PPUSH
72682: CALL_OW 273
72686: PUSH
72687: EMPTY
72688: LIST
72689: LIST
72690: PUSH
72691: LD_VAR 0 7
72695: PPUSH
72696: LD_INT 2
72698: PPUSH
72699: LD_INT 4
72701: PPUSH
72702: CALL_OW 272
72706: PUSH
72707: LD_VAR 0 8
72711: PPUSH
72712: LD_INT 2
72714: PPUSH
72715: LD_INT 4
72717: PPUSH
72718: CALL_OW 273
72722: PUSH
72723: EMPTY
72724: LIST
72725: LIST
72726: PUSH
72727: LD_VAR 0 7
72731: PPUSH
72732: LD_INT 3
72734: PPUSH
72735: LD_INT 4
72737: PPUSH
72738: CALL_OW 272
72742: PUSH
72743: LD_VAR 0 8
72747: PPUSH
72748: LD_INT 3
72750: PPUSH
72751: LD_INT 4
72753: PPUSH
72754: CALL_OW 273
72758: PUSH
72759: EMPTY
72760: LIST
72761: LIST
72762: PUSH
72763: LD_VAR 0 7
72767: PPUSH
72768: LD_INT 4
72770: PPUSH
72771: LD_INT 4
72773: PPUSH
72774: CALL_OW 272
72778: PUSH
72779: LD_VAR 0 8
72783: PPUSH
72784: LD_INT 4
72786: PPUSH
72787: LD_INT 4
72789: PPUSH
72790: CALL_OW 273
72794: PUSH
72795: EMPTY
72796: LIST
72797: LIST
72798: PUSH
72799: LD_VAR 0 7
72803: PPUSH
72804: LD_INT 5
72806: PPUSH
72807: LD_INT 4
72809: PPUSH
72810: CALL_OW 272
72814: PUSH
72815: LD_VAR 0 8
72819: PPUSH
72820: LD_INT 5
72822: PPUSH
72823: LD_INT 4
72825: PPUSH
72826: CALL_OW 273
72830: PUSH
72831: EMPTY
72832: LIST
72833: LIST
72834: PUSH
72835: EMPTY
72836: LIST
72837: LIST
72838: LIST
72839: LIST
72840: LIST
72841: LIST
72842: ST_TO_ADDR
// for i = tmp downto 1 do
72843: LD_ADDR_VAR 0 4
72847: PUSH
72848: DOUBLE
72849: LD_VAR 0 6
72853: INC
72854: ST_TO_ADDR
72855: LD_INT 1
72857: PUSH
72858: FOR_DOWNTO
72859: IFFALSE 72960
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72861: LD_VAR 0 6
72865: PUSH
72866: LD_VAR 0 4
72870: ARRAY
72871: PUSH
72872: LD_INT 1
72874: ARRAY
72875: PPUSH
72876: LD_VAR 0 6
72880: PUSH
72881: LD_VAR 0 4
72885: ARRAY
72886: PUSH
72887: LD_INT 2
72889: ARRAY
72890: PPUSH
72891: CALL_OW 488
72895: NOT
72896: PUSH
72897: LD_VAR 0 6
72901: PUSH
72902: LD_VAR 0 4
72906: ARRAY
72907: PUSH
72908: LD_INT 1
72910: ARRAY
72911: PPUSH
72912: LD_VAR 0 6
72916: PUSH
72917: LD_VAR 0 4
72921: ARRAY
72922: PUSH
72923: LD_INT 2
72925: ARRAY
72926: PPUSH
72927: CALL_OW 428
72931: PUSH
72932: LD_INT 0
72934: NONEQUAL
72935: OR
72936: IFFALSE 72958
// tmp := Delete ( tmp , i ) ;
72938: LD_ADDR_VAR 0 6
72942: PUSH
72943: LD_VAR 0 6
72947: PPUSH
72948: LD_VAR 0 4
72952: PPUSH
72953: CALL_OW 3
72957: ST_TO_ADDR
72958: GO 72858
72960: POP
72961: POP
// j := GetClosestHex ( unit , tmp ) ;
72962: LD_ADDR_VAR 0 5
72966: PUSH
72967: LD_VAR 0 1
72971: PPUSH
72972: LD_VAR 0 6
72976: PPUSH
72977: CALL 72264 0 2
72981: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72982: LD_VAR 0 1
72986: PPUSH
72987: LD_VAR 0 5
72991: PUSH
72992: LD_INT 1
72994: ARRAY
72995: PPUSH
72996: LD_VAR 0 5
73000: PUSH
73001: LD_INT 2
73003: ARRAY
73004: PPUSH
73005: CALL_OW 111
// end ;
73009: LD_VAR 0 3
73013: RET
// export function PrepareApemanSoldier ( ) ; begin
73014: LD_INT 0
73016: PPUSH
// uc_nation := 0 ;
73017: LD_ADDR_OWVAR 21
73021: PUSH
73022: LD_INT 0
73024: ST_TO_ADDR
// hc_sex := sex_male ;
73025: LD_ADDR_OWVAR 27
73029: PUSH
73030: LD_INT 1
73032: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73033: LD_ADDR_OWVAR 28
73037: PUSH
73038: LD_INT 15
73040: ST_TO_ADDR
// hc_gallery :=  ;
73041: LD_ADDR_OWVAR 33
73045: PUSH
73046: LD_STRING 
73048: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73049: LD_ADDR_OWVAR 31
73053: PUSH
73054: LD_INT 0
73056: PPUSH
73057: LD_INT 3
73059: PPUSH
73060: CALL_OW 12
73064: PUSH
73065: LD_INT 0
73067: PPUSH
73068: LD_INT 3
73070: PPUSH
73071: CALL_OW 12
73075: PUSH
73076: LD_INT 0
73078: PUSH
73079: LD_INT 0
73081: PUSH
73082: EMPTY
73083: LIST
73084: LIST
73085: LIST
73086: LIST
73087: ST_TO_ADDR
// end ;
73088: LD_VAR 0 1
73092: RET
// export function PrepareApemanEngineer ( ) ; begin
73093: LD_INT 0
73095: PPUSH
// uc_nation := 0 ;
73096: LD_ADDR_OWVAR 21
73100: PUSH
73101: LD_INT 0
73103: ST_TO_ADDR
// hc_sex := sex_male ;
73104: LD_ADDR_OWVAR 27
73108: PUSH
73109: LD_INT 1
73111: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73112: LD_ADDR_OWVAR 28
73116: PUSH
73117: LD_INT 16
73119: ST_TO_ADDR
// hc_gallery :=  ;
73120: LD_ADDR_OWVAR 33
73124: PUSH
73125: LD_STRING 
73127: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73128: LD_ADDR_OWVAR 31
73132: PUSH
73133: LD_INT 0
73135: PPUSH
73136: LD_INT 3
73138: PPUSH
73139: CALL_OW 12
73143: PUSH
73144: LD_INT 0
73146: PPUSH
73147: LD_INT 3
73149: PPUSH
73150: CALL_OW 12
73154: PUSH
73155: LD_INT 0
73157: PUSH
73158: LD_INT 0
73160: PUSH
73161: EMPTY
73162: LIST
73163: LIST
73164: LIST
73165: LIST
73166: ST_TO_ADDR
// end ;
73167: LD_VAR 0 1
73171: RET
// export function PrepareApeman ( agressivity ) ; begin
73172: LD_INT 0
73174: PPUSH
// uc_side := 0 ;
73175: LD_ADDR_OWVAR 20
73179: PUSH
73180: LD_INT 0
73182: ST_TO_ADDR
// uc_nation := 0 ;
73183: LD_ADDR_OWVAR 21
73187: PUSH
73188: LD_INT 0
73190: ST_TO_ADDR
// hc_sex := sex_male ;
73191: LD_ADDR_OWVAR 27
73195: PUSH
73196: LD_INT 1
73198: ST_TO_ADDR
// hc_class := class_apeman ;
73199: LD_ADDR_OWVAR 28
73203: PUSH
73204: LD_INT 12
73206: ST_TO_ADDR
// hc_gallery :=  ;
73207: LD_ADDR_OWVAR 33
73211: PUSH
73212: LD_STRING 
73214: ST_TO_ADDR
// if agressivity = 0 then
73215: LD_VAR 0 1
73219: PUSH
73220: LD_INT 0
73222: EQUAL
73223: IFFALSE 73235
// hc_agressivity := 0 else
73225: LD_ADDR_OWVAR 35
73229: PUSH
73230: LD_INT 0
73232: ST_TO_ADDR
73233: GO 73256
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73235: LD_ADDR_OWVAR 35
73239: PUSH
73240: LD_VAR 0 1
73244: NEG
73245: PPUSH
73246: LD_VAR 0 1
73250: PPUSH
73251: CALL_OW 12
73255: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73256: LD_ADDR_OWVAR 31
73260: PUSH
73261: LD_INT 0
73263: PPUSH
73264: LD_INT 3
73266: PPUSH
73267: CALL_OW 12
73271: PUSH
73272: LD_INT 0
73274: PPUSH
73275: LD_INT 3
73277: PPUSH
73278: CALL_OW 12
73282: PUSH
73283: LD_INT 0
73285: PUSH
73286: LD_INT 0
73288: PUSH
73289: EMPTY
73290: LIST
73291: LIST
73292: LIST
73293: LIST
73294: ST_TO_ADDR
// end ;
73295: LD_VAR 0 2
73299: RET
// export function PrepareTiger ( agressivity ) ; begin
73300: LD_INT 0
73302: PPUSH
// uc_side := 0 ;
73303: LD_ADDR_OWVAR 20
73307: PUSH
73308: LD_INT 0
73310: ST_TO_ADDR
// uc_nation := 0 ;
73311: LD_ADDR_OWVAR 21
73315: PUSH
73316: LD_INT 0
73318: ST_TO_ADDR
// hc_class := class_tiger ;
73319: LD_ADDR_OWVAR 28
73323: PUSH
73324: LD_INT 14
73326: ST_TO_ADDR
// hc_gallery :=  ;
73327: LD_ADDR_OWVAR 33
73331: PUSH
73332: LD_STRING 
73334: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73335: LD_ADDR_OWVAR 35
73339: PUSH
73340: LD_VAR 0 1
73344: NEG
73345: PPUSH
73346: LD_VAR 0 1
73350: PPUSH
73351: CALL_OW 12
73355: ST_TO_ADDR
// end ;
73356: LD_VAR 0 2
73360: RET
// export function PrepareEnchidna ( ) ; begin
73361: LD_INT 0
73363: PPUSH
// uc_side := 0 ;
73364: LD_ADDR_OWVAR 20
73368: PUSH
73369: LD_INT 0
73371: ST_TO_ADDR
// uc_nation := 0 ;
73372: LD_ADDR_OWVAR 21
73376: PUSH
73377: LD_INT 0
73379: ST_TO_ADDR
// hc_class := class_baggie ;
73380: LD_ADDR_OWVAR 28
73384: PUSH
73385: LD_INT 13
73387: ST_TO_ADDR
// hc_gallery :=  ;
73388: LD_ADDR_OWVAR 33
73392: PUSH
73393: LD_STRING 
73395: ST_TO_ADDR
// end ;
73396: LD_VAR 0 1
73400: RET
// export function PrepareFrog ( ) ; begin
73401: LD_INT 0
73403: PPUSH
// uc_side := 0 ;
73404: LD_ADDR_OWVAR 20
73408: PUSH
73409: LD_INT 0
73411: ST_TO_ADDR
// uc_nation := 0 ;
73412: LD_ADDR_OWVAR 21
73416: PUSH
73417: LD_INT 0
73419: ST_TO_ADDR
// hc_class := class_frog ;
73420: LD_ADDR_OWVAR 28
73424: PUSH
73425: LD_INT 19
73427: ST_TO_ADDR
// hc_gallery :=  ;
73428: LD_ADDR_OWVAR 33
73432: PUSH
73433: LD_STRING 
73435: ST_TO_ADDR
// end ;
73436: LD_VAR 0 1
73440: RET
// export function PrepareFish ( ) ; begin
73441: LD_INT 0
73443: PPUSH
// uc_side := 0 ;
73444: LD_ADDR_OWVAR 20
73448: PUSH
73449: LD_INT 0
73451: ST_TO_ADDR
// uc_nation := 0 ;
73452: LD_ADDR_OWVAR 21
73456: PUSH
73457: LD_INT 0
73459: ST_TO_ADDR
// hc_class := class_fish ;
73460: LD_ADDR_OWVAR 28
73464: PUSH
73465: LD_INT 20
73467: ST_TO_ADDR
// hc_gallery :=  ;
73468: LD_ADDR_OWVAR 33
73472: PUSH
73473: LD_STRING 
73475: ST_TO_ADDR
// end ;
73476: LD_VAR 0 1
73480: RET
// export function PrepareBird ( ) ; begin
73481: LD_INT 0
73483: PPUSH
// uc_side := 0 ;
73484: LD_ADDR_OWVAR 20
73488: PUSH
73489: LD_INT 0
73491: ST_TO_ADDR
// uc_nation := 0 ;
73492: LD_ADDR_OWVAR 21
73496: PUSH
73497: LD_INT 0
73499: ST_TO_ADDR
// hc_class := class_phororhacos ;
73500: LD_ADDR_OWVAR 28
73504: PUSH
73505: LD_INT 18
73507: ST_TO_ADDR
// hc_gallery :=  ;
73508: LD_ADDR_OWVAR 33
73512: PUSH
73513: LD_STRING 
73515: ST_TO_ADDR
// end ;
73516: LD_VAR 0 1
73520: RET
// export function PrepareHorse ( ) ; begin
73521: LD_INT 0
73523: PPUSH
// uc_side := 0 ;
73524: LD_ADDR_OWVAR 20
73528: PUSH
73529: LD_INT 0
73531: ST_TO_ADDR
// uc_nation := 0 ;
73532: LD_ADDR_OWVAR 21
73536: PUSH
73537: LD_INT 0
73539: ST_TO_ADDR
// hc_class := class_horse ;
73540: LD_ADDR_OWVAR 28
73544: PUSH
73545: LD_INT 21
73547: ST_TO_ADDR
// hc_gallery :=  ;
73548: LD_ADDR_OWVAR 33
73552: PUSH
73553: LD_STRING 
73555: ST_TO_ADDR
// end ;
73556: LD_VAR 0 1
73560: RET
// export function PrepareMastodont ( ) ; begin
73561: LD_INT 0
73563: PPUSH
// uc_side := 0 ;
73564: LD_ADDR_OWVAR 20
73568: PUSH
73569: LD_INT 0
73571: ST_TO_ADDR
// uc_nation := 0 ;
73572: LD_ADDR_OWVAR 21
73576: PUSH
73577: LD_INT 0
73579: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73580: LD_ADDR_OWVAR 37
73584: PUSH
73585: LD_INT 31
73587: ST_TO_ADDR
// vc_control := control_rider ;
73588: LD_ADDR_OWVAR 38
73592: PUSH
73593: LD_INT 4
73595: ST_TO_ADDR
// end ;
73596: LD_VAR 0 1
73600: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73601: LD_INT 0
73603: PPUSH
73604: PPUSH
73605: PPUSH
// uc_side = 0 ;
73606: LD_ADDR_OWVAR 20
73610: PUSH
73611: LD_INT 0
73613: ST_TO_ADDR
// uc_nation = 0 ;
73614: LD_ADDR_OWVAR 21
73618: PUSH
73619: LD_INT 0
73621: ST_TO_ADDR
// InitHc_All ( ) ;
73622: CALL_OW 584
// InitVc ;
73626: CALL_OW 20
// if mastodonts then
73630: LD_VAR 0 6
73634: IFFALSE 73701
// for i = 1 to mastodonts do
73636: LD_ADDR_VAR 0 11
73640: PUSH
73641: DOUBLE
73642: LD_INT 1
73644: DEC
73645: ST_TO_ADDR
73646: LD_VAR 0 6
73650: PUSH
73651: FOR_TO
73652: IFFALSE 73699
// begin vc_chassis := 31 ;
73654: LD_ADDR_OWVAR 37
73658: PUSH
73659: LD_INT 31
73661: ST_TO_ADDR
// vc_control := control_rider ;
73662: LD_ADDR_OWVAR 38
73666: PUSH
73667: LD_INT 4
73669: ST_TO_ADDR
// animal := CreateVehicle ;
73670: LD_ADDR_VAR 0 12
73674: PUSH
73675: CALL_OW 45
73679: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73680: LD_VAR 0 12
73684: PPUSH
73685: LD_VAR 0 8
73689: PPUSH
73690: LD_INT 0
73692: PPUSH
73693: CALL 75829 0 3
// end ;
73697: GO 73651
73699: POP
73700: POP
// if horses then
73701: LD_VAR 0 5
73705: IFFALSE 73772
// for i = 1 to horses do
73707: LD_ADDR_VAR 0 11
73711: PUSH
73712: DOUBLE
73713: LD_INT 1
73715: DEC
73716: ST_TO_ADDR
73717: LD_VAR 0 5
73721: PUSH
73722: FOR_TO
73723: IFFALSE 73770
// begin hc_class := 21 ;
73725: LD_ADDR_OWVAR 28
73729: PUSH
73730: LD_INT 21
73732: ST_TO_ADDR
// hc_gallery :=  ;
73733: LD_ADDR_OWVAR 33
73737: PUSH
73738: LD_STRING 
73740: ST_TO_ADDR
// animal := CreateHuman ;
73741: LD_ADDR_VAR 0 12
73745: PUSH
73746: CALL_OW 44
73750: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73751: LD_VAR 0 12
73755: PPUSH
73756: LD_VAR 0 8
73760: PPUSH
73761: LD_INT 0
73763: PPUSH
73764: CALL 75829 0 3
// end ;
73768: GO 73722
73770: POP
73771: POP
// if birds then
73772: LD_VAR 0 1
73776: IFFALSE 73843
// for i = 1 to birds do
73778: LD_ADDR_VAR 0 11
73782: PUSH
73783: DOUBLE
73784: LD_INT 1
73786: DEC
73787: ST_TO_ADDR
73788: LD_VAR 0 1
73792: PUSH
73793: FOR_TO
73794: IFFALSE 73841
// begin hc_class := 18 ;
73796: LD_ADDR_OWVAR 28
73800: PUSH
73801: LD_INT 18
73803: ST_TO_ADDR
// hc_gallery =  ;
73804: LD_ADDR_OWVAR 33
73808: PUSH
73809: LD_STRING 
73811: ST_TO_ADDR
// animal := CreateHuman ;
73812: LD_ADDR_VAR 0 12
73816: PUSH
73817: CALL_OW 44
73821: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73822: LD_VAR 0 12
73826: PPUSH
73827: LD_VAR 0 8
73831: PPUSH
73832: LD_INT 0
73834: PPUSH
73835: CALL 75829 0 3
// end ;
73839: GO 73793
73841: POP
73842: POP
// if tigers then
73843: LD_VAR 0 2
73847: IFFALSE 73931
// for i = 1 to tigers do
73849: LD_ADDR_VAR 0 11
73853: PUSH
73854: DOUBLE
73855: LD_INT 1
73857: DEC
73858: ST_TO_ADDR
73859: LD_VAR 0 2
73863: PUSH
73864: FOR_TO
73865: IFFALSE 73929
// begin hc_class = class_tiger ;
73867: LD_ADDR_OWVAR 28
73871: PUSH
73872: LD_INT 14
73874: ST_TO_ADDR
// hc_gallery =  ;
73875: LD_ADDR_OWVAR 33
73879: PUSH
73880: LD_STRING 
73882: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73883: LD_ADDR_OWVAR 35
73887: PUSH
73888: LD_INT 7
73890: NEG
73891: PPUSH
73892: LD_INT 7
73894: PPUSH
73895: CALL_OW 12
73899: ST_TO_ADDR
// animal := CreateHuman ;
73900: LD_ADDR_VAR 0 12
73904: PUSH
73905: CALL_OW 44
73909: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73910: LD_VAR 0 12
73914: PPUSH
73915: LD_VAR 0 8
73919: PPUSH
73920: LD_INT 0
73922: PPUSH
73923: CALL 75829 0 3
// end ;
73927: GO 73864
73929: POP
73930: POP
// if apemans then
73931: LD_VAR 0 3
73935: IFFALSE 74058
// for i = 1 to apemans do
73937: LD_ADDR_VAR 0 11
73941: PUSH
73942: DOUBLE
73943: LD_INT 1
73945: DEC
73946: ST_TO_ADDR
73947: LD_VAR 0 3
73951: PUSH
73952: FOR_TO
73953: IFFALSE 74056
// begin hc_class = class_apeman ;
73955: LD_ADDR_OWVAR 28
73959: PUSH
73960: LD_INT 12
73962: ST_TO_ADDR
// hc_gallery =  ;
73963: LD_ADDR_OWVAR 33
73967: PUSH
73968: LD_STRING 
73970: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73971: LD_ADDR_OWVAR 35
73975: PUSH
73976: LD_INT 2
73978: NEG
73979: PPUSH
73980: LD_INT 2
73982: PPUSH
73983: CALL_OW 12
73987: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73988: LD_ADDR_OWVAR 31
73992: PUSH
73993: LD_INT 1
73995: PPUSH
73996: LD_INT 3
73998: PPUSH
73999: CALL_OW 12
74003: PUSH
74004: LD_INT 1
74006: PPUSH
74007: LD_INT 3
74009: PPUSH
74010: CALL_OW 12
74014: PUSH
74015: LD_INT 0
74017: PUSH
74018: LD_INT 0
74020: PUSH
74021: EMPTY
74022: LIST
74023: LIST
74024: LIST
74025: LIST
74026: ST_TO_ADDR
// animal := CreateHuman ;
74027: LD_ADDR_VAR 0 12
74031: PUSH
74032: CALL_OW 44
74036: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74037: LD_VAR 0 12
74041: PPUSH
74042: LD_VAR 0 8
74046: PPUSH
74047: LD_INT 0
74049: PPUSH
74050: CALL 75829 0 3
// end ;
74054: GO 73952
74056: POP
74057: POP
// if enchidnas then
74058: LD_VAR 0 4
74062: IFFALSE 74129
// for i = 1 to enchidnas do
74064: LD_ADDR_VAR 0 11
74068: PUSH
74069: DOUBLE
74070: LD_INT 1
74072: DEC
74073: ST_TO_ADDR
74074: LD_VAR 0 4
74078: PUSH
74079: FOR_TO
74080: IFFALSE 74127
// begin hc_class = 13 ;
74082: LD_ADDR_OWVAR 28
74086: PUSH
74087: LD_INT 13
74089: ST_TO_ADDR
// hc_gallery =  ;
74090: LD_ADDR_OWVAR 33
74094: PUSH
74095: LD_STRING 
74097: ST_TO_ADDR
// animal := CreateHuman ;
74098: LD_ADDR_VAR 0 12
74102: PUSH
74103: CALL_OW 44
74107: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74108: LD_VAR 0 12
74112: PPUSH
74113: LD_VAR 0 8
74117: PPUSH
74118: LD_INT 0
74120: PPUSH
74121: CALL 75829 0 3
// end ;
74125: GO 74079
74127: POP
74128: POP
// if fishes then
74129: LD_VAR 0 7
74133: IFFALSE 74200
// for i = 1 to fishes do
74135: LD_ADDR_VAR 0 11
74139: PUSH
74140: DOUBLE
74141: LD_INT 1
74143: DEC
74144: ST_TO_ADDR
74145: LD_VAR 0 7
74149: PUSH
74150: FOR_TO
74151: IFFALSE 74198
// begin hc_class = 20 ;
74153: LD_ADDR_OWVAR 28
74157: PUSH
74158: LD_INT 20
74160: ST_TO_ADDR
// hc_gallery =  ;
74161: LD_ADDR_OWVAR 33
74165: PUSH
74166: LD_STRING 
74168: ST_TO_ADDR
// animal := CreateHuman ;
74169: LD_ADDR_VAR 0 12
74173: PUSH
74174: CALL_OW 44
74178: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74179: LD_VAR 0 12
74183: PPUSH
74184: LD_VAR 0 9
74188: PPUSH
74189: LD_INT 0
74191: PPUSH
74192: CALL 75829 0 3
// end ;
74196: GO 74150
74198: POP
74199: POP
// end ;
74200: LD_VAR 0 10
74204: RET
// export function WantHeal ( sci , unit ) ; begin
74205: LD_INT 0
74207: PPUSH
// if GetTaskList ( sci ) > 0 then
74208: LD_VAR 0 1
74212: PPUSH
74213: CALL_OW 437
74217: PUSH
74218: LD_INT 0
74220: GREATER
74221: IFFALSE 74291
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74223: LD_VAR 0 1
74227: PPUSH
74228: CALL_OW 437
74232: PUSH
74233: LD_INT 1
74235: ARRAY
74236: PUSH
74237: LD_INT 1
74239: ARRAY
74240: PUSH
74241: LD_STRING l
74243: EQUAL
74244: PUSH
74245: LD_VAR 0 1
74249: PPUSH
74250: CALL_OW 437
74254: PUSH
74255: LD_INT 1
74257: ARRAY
74258: PUSH
74259: LD_INT 4
74261: ARRAY
74262: PUSH
74263: LD_VAR 0 2
74267: EQUAL
74268: AND
74269: IFFALSE 74281
// result := true else
74271: LD_ADDR_VAR 0 3
74275: PUSH
74276: LD_INT 1
74278: ST_TO_ADDR
74279: GO 74289
// result := false ;
74281: LD_ADDR_VAR 0 3
74285: PUSH
74286: LD_INT 0
74288: ST_TO_ADDR
// end else
74289: GO 74299
// result := false ;
74291: LD_ADDR_VAR 0 3
74295: PUSH
74296: LD_INT 0
74298: ST_TO_ADDR
// end ;
74299: LD_VAR 0 3
74303: RET
// export function HealTarget ( sci ) ; begin
74304: LD_INT 0
74306: PPUSH
// if not sci then
74307: LD_VAR 0 1
74311: NOT
74312: IFFALSE 74316
// exit ;
74314: GO 74381
// result := 0 ;
74316: LD_ADDR_VAR 0 2
74320: PUSH
74321: LD_INT 0
74323: ST_TO_ADDR
// if GetTaskList ( sci ) then
74324: LD_VAR 0 1
74328: PPUSH
74329: CALL_OW 437
74333: IFFALSE 74381
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74335: LD_VAR 0 1
74339: PPUSH
74340: CALL_OW 437
74344: PUSH
74345: LD_INT 1
74347: ARRAY
74348: PUSH
74349: LD_INT 1
74351: ARRAY
74352: PUSH
74353: LD_STRING l
74355: EQUAL
74356: IFFALSE 74381
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74358: LD_ADDR_VAR 0 2
74362: PUSH
74363: LD_VAR 0 1
74367: PPUSH
74368: CALL_OW 437
74372: PUSH
74373: LD_INT 1
74375: ARRAY
74376: PUSH
74377: LD_INT 4
74379: ARRAY
74380: ST_TO_ADDR
// end ;
74381: LD_VAR 0 2
74385: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74386: LD_INT 0
74388: PPUSH
74389: PPUSH
74390: PPUSH
74391: PPUSH
// if not base_units then
74392: LD_VAR 0 1
74396: NOT
74397: IFFALSE 74401
// exit ;
74399: GO 74488
// result := false ;
74401: LD_ADDR_VAR 0 2
74405: PUSH
74406: LD_INT 0
74408: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74409: LD_ADDR_VAR 0 5
74413: PUSH
74414: LD_VAR 0 1
74418: PPUSH
74419: LD_INT 21
74421: PUSH
74422: LD_INT 3
74424: PUSH
74425: EMPTY
74426: LIST
74427: LIST
74428: PPUSH
74429: CALL_OW 72
74433: ST_TO_ADDR
// if not tmp then
74434: LD_VAR 0 5
74438: NOT
74439: IFFALSE 74443
// exit ;
74441: GO 74488
// for i in tmp do
74443: LD_ADDR_VAR 0 3
74447: PUSH
74448: LD_VAR 0 5
74452: PUSH
74453: FOR_IN
74454: IFFALSE 74486
// begin result := EnemyInRange ( i , 22 ) ;
74456: LD_ADDR_VAR 0 2
74460: PUSH
74461: LD_VAR 0 3
74465: PPUSH
74466: LD_INT 22
74468: PPUSH
74469: CALL 72066 0 2
74473: ST_TO_ADDR
// if result then
74474: LD_VAR 0 2
74478: IFFALSE 74484
// exit ;
74480: POP
74481: POP
74482: GO 74488
// end ;
74484: GO 74453
74486: POP
74487: POP
// end ;
74488: LD_VAR 0 2
74492: RET
// export function FilterByTag ( units , tag ) ; begin
74493: LD_INT 0
74495: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74496: LD_ADDR_VAR 0 3
74500: PUSH
74501: LD_VAR 0 1
74505: PPUSH
74506: LD_INT 120
74508: PUSH
74509: LD_VAR 0 2
74513: PUSH
74514: EMPTY
74515: LIST
74516: LIST
74517: PPUSH
74518: CALL_OW 72
74522: ST_TO_ADDR
// end ;
74523: LD_VAR 0 3
74527: RET
// export function IsDriver ( un ) ; begin
74528: LD_INT 0
74530: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74531: LD_ADDR_VAR 0 2
74535: PUSH
74536: LD_VAR 0 1
74540: PUSH
74541: LD_INT 55
74543: PUSH
74544: EMPTY
74545: LIST
74546: PPUSH
74547: CALL_OW 69
74551: IN
74552: ST_TO_ADDR
// end ;
74553: LD_VAR 0 2
74557: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74558: LD_INT 0
74560: PPUSH
74561: PPUSH
// list := [ ] ;
74562: LD_ADDR_VAR 0 5
74566: PUSH
74567: EMPTY
74568: ST_TO_ADDR
// case d of 0 :
74569: LD_VAR 0 3
74573: PUSH
74574: LD_INT 0
74576: DOUBLE
74577: EQUAL
74578: IFTRUE 74582
74580: GO 74715
74582: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74583: LD_ADDR_VAR 0 5
74587: PUSH
74588: LD_VAR 0 1
74592: PUSH
74593: LD_INT 4
74595: MINUS
74596: PUSH
74597: LD_VAR 0 2
74601: PUSH
74602: LD_INT 4
74604: MINUS
74605: PUSH
74606: LD_INT 2
74608: PUSH
74609: EMPTY
74610: LIST
74611: LIST
74612: LIST
74613: PUSH
74614: LD_VAR 0 1
74618: PUSH
74619: LD_INT 3
74621: MINUS
74622: PUSH
74623: LD_VAR 0 2
74627: PUSH
74628: LD_INT 1
74630: PUSH
74631: EMPTY
74632: LIST
74633: LIST
74634: LIST
74635: PUSH
74636: LD_VAR 0 1
74640: PUSH
74641: LD_INT 4
74643: PLUS
74644: PUSH
74645: LD_VAR 0 2
74649: PUSH
74650: LD_INT 4
74652: PUSH
74653: EMPTY
74654: LIST
74655: LIST
74656: LIST
74657: PUSH
74658: LD_VAR 0 1
74662: PUSH
74663: LD_INT 3
74665: PLUS
74666: PUSH
74667: LD_VAR 0 2
74671: PUSH
74672: LD_INT 3
74674: PLUS
74675: PUSH
74676: LD_INT 5
74678: PUSH
74679: EMPTY
74680: LIST
74681: LIST
74682: LIST
74683: PUSH
74684: LD_VAR 0 1
74688: PUSH
74689: LD_VAR 0 2
74693: PUSH
74694: LD_INT 4
74696: PLUS
74697: PUSH
74698: LD_INT 0
74700: PUSH
74701: EMPTY
74702: LIST
74703: LIST
74704: LIST
74705: PUSH
74706: EMPTY
74707: LIST
74708: LIST
74709: LIST
74710: LIST
74711: LIST
74712: ST_TO_ADDR
// end ; 1 :
74713: GO 75413
74715: LD_INT 1
74717: DOUBLE
74718: EQUAL
74719: IFTRUE 74723
74721: GO 74856
74723: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74724: LD_ADDR_VAR 0 5
74728: PUSH
74729: LD_VAR 0 1
74733: PUSH
74734: LD_VAR 0 2
74738: PUSH
74739: LD_INT 4
74741: MINUS
74742: PUSH
74743: LD_INT 3
74745: PUSH
74746: EMPTY
74747: LIST
74748: LIST
74749: LIST
74750: PUSH
74751: LD_VAR 0 1
74755: PUSH
74756: LD_INT 3
74758: MINUS
74759: PUSH
74760: LD_VAR 0 2
74764: PUSH
74765: LD_INT 3
74767: MINUS
74768: PUSH
74769: LD_INT 2
74771: PUSH
74772: EMPTY
74773: LIST
74774: LIST
74775: LIST
74776: PUSH
74777: LD_VAR 0 1
74781: PUSH
74782: LD_INT 4
74784: MINUS
74785: PUSH
74786: LD_VAR 0 2
74790: PUSH
74791: LD_INT 1
74793: PUSH
74794: EMPTY
74795: LIST
74796: LIST
74797: LIST
74798: PUSH
74799: LD_VAR 0 1
74803: PUSH
74804: LD_VAR 0 2
74808: PUSH
74809: LD_INT 3
74811: PLUS
74812: PUSH
74813: LD_INT 0
74815: PUSH
74816: EMPTY
74817: LIST
74818: LIST
74819: LIST
74820: PUSH
74821: LD_VAR 0 1
74825: PUSH
74826: LD_INT 4
74828: PLUS
74829: PUSH
74830: LD_VAR 0 2
74834: PUSH
74835: LD_INT 4
74837: PLUS
74838: PUSH
74839: LD_INT 5
74841: PUSH
74842: EMPTY
74843: LIST
74844: LIST
74845: LIST
74846: PUSH
74847: EMPTY
74848: LIST
74849: LIST
74850: LIST
74851: LIST
74852: LIST
74853: ST_TO_ADDR
// end ; 2 :
74854: GO 75413
74856: LD_INT 2
74858: DOUBLE
74859: EQUAL
74860: IFTRUE 74864
74862: GO 74993
74864: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74865: LD_ADDR_VAR 0 5
74869: PUSH
74870: LD_VAR 0 1
74874: PUSH
74875: LD_VAR 0 2
74879: PUSH
74880: LD_INT 3
74882: MINUS
74883: PUSH
74884: LD_INT 3
74886: PUSH
74887: EMPTY
74888: LIST
74889: LIST
74890: LIST
74891: PUSH
74892: LD_VAR 0 1
74896: PUSH
74897: LD_INT 4
74899: PLUS
74900: PUSH
74901: LD_VAR 0 2
74905: PUSH
74906: LD_INT 4
74908: PUSH
74909: EMPTY
74910: LIST
74911: LIST
74912: LIST
74913: PUSH
74914: LD_VAR 0 1
74918: PUSH
74919: LD_VAR 0 2
74923: PUSH
74924: LD_INT 4
74926: PLUS
74927: PUSH
74928: LD_INT 0
74930: PUSH
74931: EMPTY
74932: LIST
74933: LIST
74934: LIST
74935: PUSH
74936: LD_VAR 0 1
74940: PUSH
74941: LD_INT 3
74943: MINUS
74944: PUSH
74945: LD_VAR 0 2
74949: PUSH
74950: LD_INT 1
74952: PUSH
74953: EMPTY
74954: LIST
74955: LIST
74956: LIST
74957: PUSH
74958: LD_VAR 0 1
74962: PUSH
74963: LD_INT 4
74965: MINUS
74966: PUSH
74967: LD_VAR 0 2
74971: PUSH
74972: LD_INT 4
74974: MINUS
74975: PUSH
74976: LD_INT 2
74978: PUSH
74979: EMPTY
74980: LIST
74981: LIST
74982: LIST
74983: PUSH
74984: EMPTY
74985: LIST
74986: LIST
74987: LIST
74988: LIST
74989: LIST
74990: ST_TO_ADDR
// end ; 3 :
74991: GO 75413
74993: LD_INT 3
74995: DOUBLE
74996: EQUAL
74997: IFTRUE 75001
74999: GO 75134
75001: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75002: LD_ADDR_VAR 0 5
75006: PUSH
75007: LD_VAR 0 1
75011: PUSH
75012: LD_INT 3
75014: PLUS
75015: PUSH
75016: LD_VAR 0 2
75020: PUSH
75021: LD_INT 4
75023: PUSH
75024: EMPTY
75025: LIST
75026: LIST
75027: LIST
75028: PUSH
75029: LD_VAR 0 1
75033: PUSH
75034: LD_INT 4
75036: PLUS
75037: PUSH
75038: LD_VAR 0 2
75042: PUSH
75043: LD_INT 4
75045: PLUS
75046: PUSH
75047: LD_INT 5
75049: PUSH
75050: EMPTY
75051: LIST
75052: LIST
75053: LIST
75054: PUSH
75055: LD_VAR 0 1
75059: PUSH
75060: LD_INT 4
75062: MINUS
75063: PUSH
75064: LD_VAR 0 2
75068: PUSH
75069: LD_INT 1
75071: PUSH
75072: EMPTY
75073: LIST
75074: LIST
75075: LIST
75076: PUSH
75077: LD_VAR 0 1
75081: PUSH
75082: LD_VAR 0 2
75086: PUSH
75087: LD_INT 4
75089: MINUS
75090: PUSH
75091: LD_INT 3
75093: PUSH
75094: EMPTY
75095: LIST
75096: LIST
75097: LIST
75098: PUSH
75099: LD_VAR 0 1
75103: PUSH
75104: LD_INT 3
75106: MINUS
75107: PUSH
75108: LD_VAR 0 2
75112: PUSH
75113: LD_INT 3
75115: MINUS
75116: PUSH
75117: LD_INT 2
75119: PUSH
75120: EMPTY
75121: LIST
75122: LIST
75123: LIST
75124: PUSH
75125: EMPTY
75126: LIST
75127: LIST
75128: LIST
75129: LIST
75130: LIST
75131: ST_TO_ADDR
// end ; 4 :
75132: GO 75413
75134: LD_INT 4
75136: DOUBLE
75137: EQUAL
75138: IFTRUE 75142
75140: GO 75275
75142: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75143: LD_ADDR_VAR 0 5
75147: PUSH
75148: LD_VAR 0 1
75152: PUSH
75153: LD_VAR 0 2
75157: PUSH
75158: LD_INT 4
75160: PLUS
75161: PUSH
75162: LD_INT 0
75164: PUSH
75165: EMPTY
75166: LIST
75167: LIST
75168: LIST
75169: PUSH
75170: LD_VAR 0 1
75174: PUSH
75175: LD_INT 3
75177: PLUS
75178: PUSH
75179: LD_VAR 0 2
75183: PUSH
75184: LD_INT 3
75186: PLUS
75187: PUSH
75188: LD_INT 5
75190: PUSH
75191: EMPTY
75192: LIST
75193: LIST
75194: LIST
75195: PUSH
75196: LD_VAR 0 1
75200: PUSH
75201: LD_INT 4
75203: PLUS
75204: PUSH
75205: LD_VAR 0 2
75209: PUSH
75210: LD_INT 4
75212: PUSH
75213: EMPTY
75214: LIST
75215: LIST
75216: LIST
75217: PUSH
75218: LD_VAR 0 1
75222: PUSH
75223: LD_VAR 0 2
75227: PUSH
75228: LD_INT 3
75230: MINUS
75231: PUSH
75232: LD_INT 3
75234: PUSH
75235: EMPTY
75236: LIST
75237: LIST
75238: LIST
75239: PUSH
75240: LD_VAR 0 1
75244: PUSH
75245: LD_INT 4
75247: MINUS
75248: PUSH
75249: LD_VAR 0 2
75253: PUSH
75254: LD_INT 4
75256: MINUS
75257: PUSH
75258: LD_INT 2
75260: PUSH
75261: EMPTY
75262: LIST
75263: LIST
75264: LIST
75265: PUSH
75266: EMPTY
75267: LIST
75268: LIST
75269: LIST
75270: LIST
75271: LIST
75272: ST_TO_ADDR
// end ; 5 :
75273: GO 75413
75275: LD_INT 5
75277: DOUBLE
75278: EQUAL
75279: IFTRUE 75283
75281: GO 75412
75283: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75284: LD_ADDR_VAR 0 5
75288: PUSH
75289: LD_VAR 0 1
75293: PUSH
75294: LD_INT 4
75296: MINUS
75297: PUSH
75298: LD_VAR 0 2
75302: PUSH
75303: LD_INT 1
75305: PUSH
75306: EMPTY
75307: LIST
75308: LIST
75309: LIST
75310: PUSH
75311: LD_VAR 0 1
75315: PUSH
75316: LD_VAR 0 2
75320: PUSH
75321: LD_INT 4
75323: MINUS
75324: PUSH
75325: LD_INT 3
75327: PUSH
75328: EMPTY
75329: LIST
75330: LIST
75331: LIST
75332: PUSH
75333: LD_VAR 0 1
75337: PUSH
75338: LD_INT 4
75340: PLUS
75341: PUSH
75342: LD_VAR 0 2
75346: PUSH
75347: LD_INT 4
75349: PLUS
75350: PUSH
75351: LD_INT 5
75353: PUSH
75354: EMPTY
75355: LIST
75356: LIST
75357: LIST
75358: PUSH
75359: LD_VAR 0 1
75363: PUSH
75364: LD_INT 3
75366: PLUS
75367: PUSH
75368: LD_VAR 0 2
75372: PUSH
75373: LD_INT 4
75375: PUSH
75376: EMPTY
75377: LIST
75378: LIST
75379: LIST
75380: PUSH
75381: LD_VAR 0 1
75385: PUSH
75386: LD_VAR 0 2
75390: PUSH
75391: LD_INT 3
75393: PLUS
75394: PUSH
75395: LD_INT 0
75397: PUSH
75398: EMPTY
75399: LIST
75400: LIST
75401: LIST
75402: PUSH
75403: EMPTY
75404: LIST
75405: LIST
75406: LIST
75407: LIST
75408: LIST
75409: ST_TO_ADDR
// end ; end ;
75410: GO 75413
75412: POP
// result := list ;
75413: LD_ADDR_VAR 0 4
75417: PUSH
75418: LD_VAR 0 5
75422: ST_TO_ADDR
// end ;
75423: LD_VAR 0 4
75427: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75428: LD_INT 0
75430: PPUSH
75431: PPUSH
75432: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75433: LD_VAR 0 1
75437: NOT
75438: PUSH
75439: LD_VAR 0 2
75443: PUSH
75444: LD_INT 1
75446: PUSH
75447: LD_INT 2
75449: PUSH
75450: LD_INT 3
75452: PUSH
75453: LD_INT 4
75455: PUSH
75456: EMPTY
75457: LIST
75458: LIST
75459: LIST
75460: LIST
75461: IN
75462: NOT
75463: OR
75464: IFFALSE 75468
// exit ;
75466: GO 75551
// tmp := [ ] ;
75468: LD_ADDR_VAR 0 5
75472: PUSH
75473: EMPTY
75474: ST_TO_ADDR
// for i in units do
75475: LD_ADDR_VAR 0 4
75479: PUSH
75480: LD_VAR 0 1
75484: PUSH
75485: FOR_IN
75486: IFFALSE 75520
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
75488: LD_ADDR_VAR 0 5
75492: PUSH
75493: LD_VAR 0 5
75497: PPUSH
75498: LD_VAR 0 4
75502: PPUSH
75503: LD_VAR 0 2
75507: PPUSH
75508: CALL_OW 259
75512: PPUSH
75513: CALL 76924 0 2
75517: ST_TO_ADDR
75518: GO 75485
75520: POP
75521: POP
// if not tmp then
75522: LD_VAR 0 5
75526: NOT
75527: IFFALSE 75531
// exit ;
75529: GO 75551
// result := SortListByListDesc ( units , tmp ) ;
75531: LD_ADDR_VAR 0 3
75535: PUSH
75536: LD_VAR 0 1
75540: PPUSH
75541: LD_VAR 0 5
75545: PPUSH
75546: CALL_OW 77
75550: ST_TO_ADDR
// end ;
75551: LD_VAR 0 3
75555: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75556: LD_INT 0
75558: PPUSH
75559: PPUSH
75560: PPUSH
// result := false ;
75561: LD_ADDR_VAR 0 3
75565: PUSH
75566: LD_INT 0
75568: ST_TO_ADDR
// if not building then
75569: LD_VAR 0 2
75573: NOT
75574: IFFALSE 75578
// exit ;
75576: GO 75716
// x := GetX ( building ) ;
75578: LD_ADDR_VAR 0 4
75582: PUSH
75583: LD_VAR 0 2
75587: PPUSH
75588: CALL_OW 250
75592: ST_TO_ADDR
// y := GetY ( building ) ;
75593: LD_ADDR_VAR 0 5
75597: PUSH
75598: LD_VAR 0 2
75602: PPUSH
75603: CALL_OW 251
75607: ST_TO_ADDR
// if not x or not y then
75608: LD_VAR 0 4
75612: NOT
75613: PUSH
75614: LD_VAR 0 5
75618: NOT
75619: OR
75620: IFFALSE 75624
// exit ;
75622: GO 75716
// if GetTaskList ( unit ) then
75624: LD_VAR 0 1
75628: PPUSH
75629: CALL_OW 437
75633: IFFALSE 75716
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75635: LD_STRING e
75637: PUSH
75638: LD_VAR 0 1
75642: PPUSH
75643: CALL_OW 437
75647: PUSH
75648: LD_INT 1
75650: ARRAY
75651: PUSH
75652: LD_INT 1
75654: ARRAY
75655: EQUAL
75656: PUSH
75657: LD_VAR 0 4
75661: PUSH
75662: LD_VAR 0 1
75666: PPUSH
75667: CALL_OW 437
75671: PUSH
75672: LD_INT 1
75674: ARRAY
75675: PUSH
75676: LD_INT 2
75678: ARRAY
75679: EQUAL
75680: AND
75681: PUSH
75682: LD_VAR 0 5
75686: PUSH
75687: LD_VAR 0 1
75691: PPUSH
75692: CALL_OW 437
75696: PUSH
75697: LD_INT 1
75699: ARRAY
75700: PUSH
75701: LD_INT 3
75703: ARRAY
75704: EQUAL
75705: AND
75706: IFFALSE 75716
// result := true end ;
75708: LD_ADDR_VAR 0 3
75712: PUSH
75713: LD_INT 1
75715: ST_TO_ADDR
// end ;
75716: LD_VAR 0 3
75720: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75721: LD_INT 0
75723: PPUSH
// result := false ;
75724: LD_ADDR_VAR 0 4
75728: PUSH
75729: LD_INT 0
75731: ST_TO_ADDR
// if GetTaskList ( unit ) then
75732: LD_VAR 0 1
75736: PPUSH
75737: CALL_OW 437
75741: IFFALSE 75824
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75743: LD_STRING M
75745: PUSH
75746: LD_VAR 0 1
75750: PPUSH
75751: CALL_OW 437
75755: PUSH
75756: LD_INT 1
75758: ARRAY
75759: PUSH
75760: LD_INT 1
75762: ARRAY
75763: EQUAL
75764: PUSH
75765: LD_VAR 0 2
75769: PUSH
75770: LD_VAR 0 1
75774: PPUSH
75775: CALL_OW 437
75779: PUSH
75780: LD_INT 1
75782: ARRAY
75783: PUSH
75784: LD_INT 2
75786: ARRAY
75787: EQUAL
75788: AND
75789: PUSH
75790: LD_VAR 0 3
75794: PUSH
75795: LD_VAR 0 1
75799: PPUSH
75800: CALL_OW 437
75804: PUSH
75805: LD_INT 1
75807: ARRAY
75808: PUSH
75809: LD_INT 3
75811: ARRAY
75812: EQUAL
75813: AND
75814: IFFALSE 75824
// result := true ;
75816: LD_ADDR_VAR 0 4
75820: PUSH
75821: LD_INT 1
75823: ST_TO_ADDR
// end ; end ;
75824: LD_VAR 0 4
75828: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75829: LD_INT 0
75831: PPUSH
75832: PPUSH
75833: PPUSH
75834: PPUSH
// if not unit or not area then
75835: LD_VAR 0 1
75839: NOT
75840: PUSH
75841: LD_VAR 0 2
75845: NOT
75846: OR
75847: IFFALSE 75851
// exit ;
75849: GO 76027
// tmp := AreaToList ( area , i ) ;
75851: LD_ADDR_VAR 0 6
75855: PUSH
75856: LD_VAR 0 2
75860: PPUSH
75861: LD_VAR 0 5
75865: PPUSH
75866: CALL_OW 517
75870: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75871: LD_ADDR_VAR 0 5
75875: PUSH
75876: DOUBLE
75877: LD_INT 1
75879: DEC
75880: ST_TO_ADDR
75881: LD_VAR 0 6
75885: PUSH
75886: LD_INT 1
75888: ARRAY
75889: PUSH
75890: FOR_TO
75891: IFFALSE 76025
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75893: LD_ADDR_VAR 0 7
75897: PUSH
75898: LD_VAR 0 6
75902: PUSH
75903: LD_INT 1
75905: ARRAY
75906: PUSH
75907: LD_VAR 0 5
75911: ARRAY
75912: PUSH
75913: LD_VAR 0 6
75917: PUSH
75918: LD_INT 2
75920: ARRAY
75921: PUSH
75922: LD_VAR 0 5
75926: ARRAY
75927: PUSH
75928: EMPTY
75929: LIST
75930: LIST
75931: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
75932: LD_INT 92
75934: PUSH
75935: LD_VAR 0 7
75939: PUSH
75940: LD_INT 1
75942: ARRAY
75943: PUSH
75944: LD_VAR 0 7
75948: PUSH
75949: LD_INT 2
75951: ARRAY
75952: PUSH
75953: LD_INT 2
75955: PUSH
75956: EMPTY
75957: LIST
75958: LIST
75959: LIST
75960: LIST
75961: PPUSH
75962: CALL_OW 69
75966: PUSH
75967: LD_INT 0
75969: EQUAL
75970: IFFALSE 76023
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75972: LD_VAR 0 1
75976: PPUSH
75977: LD_VAR 0 7
75981: PUSH
75982: LD_INT 1
75984: ARRAY
75985: PPUSH
75986: LD_VAR 0 7
75990: PUSH
75991: LD_INT 2
75993: ARRAY
75994: PPUSH
75995: LD_VAR 0 3
75999: PPUSH
76000: CALL_OW 48
// result := IsPlaced ( unit ) ;
76004: LD_ADDR_VAR 0 4
76008: PUSH
76009: LD_VAR 0 1
76013: PPUSH
76014: CALL_OW 305
76018: ST_TO_ADDR
// exit ;
76019: POP
76020: POP
76021: GO 76027
// end ; end ;
76023: GO 75890
76025: POP
76026: POP
// end ;
76027: LD_VAR 0 4
76031: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76032: LD_INT 0
76034: PPUSH
76035: PPUSH
76036: PPUSH
// if not side or side > 8 then
76037: LD_VAR 0 1
76041: NOT
76042: PUSH
76043: LD_VAR 0 1
76047: PUSH
76048: LD_INT 8
76050: GREATER
76051: OR
76052: IFFALSE 76056
// exit ;
76054: GO 76243
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76056: LD_ADDR_VAR 0 4
76060: PUSH
76061: LD_INT 22
76063: PUSH
76064: LD_VAR 0 1
76068: PUSH
76069: EMPTY
76070: LIST
76071: LIST
76072: PUSH
76073: LD_INT 21
76075: PUSH
76076: LD_INT 3
76078: PUSH
76079: EMPTY
76080: LIST
76081: LIST
76082: PUSH
76083: EMPTY
76084: LIST
76085: LIST
76086: PPUSH
76087: CALL_OW 69
76091: ST_TO_ADDR
// if not tmp then
76092: LD_VAR 0 4
76096: NOT
76097: IFFALSE 76101
// exit ;
76099: GO 76243
// enable_addtolog := true ;
76101: LD_ADDR_OWVAR 81
76105: PUSH
76106: LD_INT 1
76108: ST_TO_ADDR
// AddToLog ( [ ) ;
76109: LD_STRING [
76111: PPUSH
76112: CALL_OW 561
// for i in tmp do
76116: LD_ADDR_VAR 0 3
76120: PUSH
76121: LD_VAR 0 4
76125: PUSH
76126: FOR_IN
76127: IFFALSE 76234
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76129: LD_STRING [
76131: PUSH
76132: LD_VAR 0 3
76136: PPUSH
76137: CALL_OW 266
76141: STR
76142: PUSH
76143: LD_STRING , 
76145: STR
76146: PUSH
76147: LD_VAR 0 3
76151: PPUSH
76152: CALL_OW 250
76156: STR
76157: PUSH
76158: LD_STRING , 
76160: STR
76161: PUSH
76162: LD_VAR 0 3
76166: PPUSH
76167: CALL_OW 251
76171: STR
76172: PUSH
76173: LD_STRING , 
76175: STR
76176: PUSH
76177: LD_VAR 0 3
76181: PPUSH
76182: CALL_OW 254
76186: STR
76187: PUSH
76188: LD_STRING , 
76190: STR
76191: PUSH
76192: LD_VAR 0 3
76196: PPUSH
76197: LD_INT 1
76199: PPUSH
76200: CALL_OW 268
76204: STR
76205: PUSH
76206: LD_STRING , 
76208: STR
76209: PUSH
76210: LD_VAR 0 3
76214: PPUSH
76215: LD_INT 2
76217: PPUSH
76218: CALL_OW 268
76222: STR
76223: PUSH
76224: LD_STRING ],
76226: STR
76227: PPUSH
76228: CALL_OW 561
// end ;
76232: GO 76126
76234: POP
76235: POP
// AddToLog ( ]; ) ;
76236: LD_STRING ];
76238: PPUSH
76239: CALL_OW 561
// end ;
76243: LD_VAR 0 2
76247: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76248: LD_INT 0
76250: PPUSH
76251: PPUSH
76252: PPUSH
76253: PPUSH
76254: PPUSH
// if not area or not rate or not max then
76255: LD_VAR 0 1
76259: NOT
76260: PUSH
76261: LD_VAR 0 2
76265: NOT
76266: OR
76267: PUSH
76268: LD_VAR 0 4
76272: NOT
76273: OR
76274: IFFALSE 76278
// exit ;
76276: GO 76467
// while 1 do
76278: LD_INT 1
76280: IFFALSE 76467
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76282: LD_ADDR_VAR 0 9
76286: PUSH
76287: LD_VAR 0 1
76291: PPUSH
76292: LD_INT 1
76294: PPUSH
76295: CALL_OW 287
76299: PUSH
76300: LD_INT 10
76302: MUL
76303: ST_TO_ADDR
// r := rate / 10 ;
76304: LD_ADDR_VAR 0 7
76308: PUSH
76309: LD_VAR 0 2
76313: PUSH
76314: LD_INT 10
76316: DIVREAL
76317: ST_TO_ADDR
// time := 1 1$00 ;
76318: LD_ADDR_VAR 0 8
76322: PUSH
76323: LD_INT 2100
76325: ST_TO_ADDR
// if amount < min then
76326: LD_VAR 0 9
76330: PUSH
76331: LD_VAR 0 3
76335: LESS
76336: IFFALSE 76354
// r := r * 2 else
76338: LD_ADDR_VAR 0 7
76342: PUSH
76343: LD_VAR 0 7
76347: PUSH
76348: LD_INT 2
76350: MUL
76351: ST_TO_ADDR
76352: GO 76380
// if amount > max then
76354: LD_VAR 0 9
76358: PUSH
76359: LD_VAR 0 4
76363: GREATER
76364: IFFALSE 76380
// r := r / 2 ;
76366: LD_ADDR_VAR 0 7
76370: PUSH
76371: LD_VAR 0 7
76375: PUSH
76376: LD_INT 2
76378: DIVREAL
76379: ST_TO_ADDR
// time := time / r ;
76380: LD_ADDR_VAR 0 8
76384: PUSH
76385: LD_VAR 0 8
76389: PUSH
76390: LD_VAR 0 7
76394: DIVREAL
76395: ST_TO_ADDR
// if time < 0 then
76396: LD_VAR 0 8
76400: PUSH
76401: LD_INT 0
76403: LESS
76404: IFFALSE 76421
// time := time * - 1 ;
76406: LD_ADDR_VAR 0 8
76410: PUSH
76411: LD_VAR 0 8
76415: PUSH
76416: LD_INT 1
76418: NEG
76419: MUL
76420: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76421: LD_VAR 0 8
76425: PUSH
76426: LD_INT 35
76428: PPUSH
76429: LD_INT 875
76431: PPUSH
76432: CALL_OW 12
76436: PLUS
76437: PPUSH
76438: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76442: LD_INT 1
76444: PPUSH
76445: LD_INT 5
76447: PPUSH
76448: CALL_OW 12
76452: PPUSH
76453: LD_VAR 0 1
76457: PPUSH
76458: LD_INT 1
76460: PPUSH
76461: CALL_OW 55
// end ;
76465: GO 76278
// end ;
76467: LD_VAR 0 5
76471: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76472: LD_INT 0
76474: PPUSH
76475: PPUSH
76476: PPUSH
76477: PPUSH
76478: PPUSH
76479: PPUSH
76480: PPUSH
76481: PPUSH
// if not turrets or not factories then
76482: LD_VAR 0 1
76486: NOT
76487: PUSH
76488: LD_VAR 0 2
76492: NOT
76493: OR
76494: IFFALSE 76498
// exit ;
76496: GO 76805
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76498: LD_ADDR_VAR 0 10
76502: PUSH
76503: LD_INT 5
76505: PUSH
76506: LD_INT 6
76508: PUSH
76509: EMPTY
76510: LIST
76511: LIST
76512: PUSH
76513: LD_INT 2
76515: PUSH
76516: LD_INT 4
76518: PUSH
76519: EMPTY
76520: LIST
76521: LIST
76522: PUSH
76523: LD_INT 3
76525: PUSH
76526: LD_INT 5
76528: PUSH
76529: EMPTY
76530: LIST
76531: LIST
76532: PUSH
76533: EMPTY
76534: LIST
76535: LIST
76536: LIST
76537: PUSH
76538: LD_INT 24
76540: PUSH
76541: LD_INT 25
76543: PUSH
76544: EMPTY
76545: LIST
76546: LIST
76547: PUSH
76548: LD_INT 23
76550: PUSH
76551: LD_INT 27
76553: PUSH
76554: EMPTY
76555: LIST
76556: LIST
76557: PUSH
76558: EMPTY
76559: LIST
76560: LIST
76561: PUSH
76562: LD_INT 42
76564: PUSH
76565: LD_INT 43
76567: PUSH
76568: EMPTY
76569: LIST
76570: LIST
76571: PUSH
76572: LD_INT 44
76574: PUSH
76575: LD_INT 46
76577: PUSH
76578: EMPTY
76579: LIST
76580: LIST
76581: PUSH
76582: LD_INT 45
76584: PUSH
76585: LD_INT 47
76587: PUSH
76588: EMPTY
76589: LIST
76590: LIST
76591: PUSH
76592: EMPTY
76593: LIST
76594: LIST
76595: LIST
76596: PUSH
76597: EMPTY
76598: LIST
76599: LIST
76600: LIST
76601: ST_TO_ADDR
// result := [ ] ;
76602: LD_ADDR_VAR 0 3
76606: PUSH
76607: EMPTY
76608: ST_TO_ADDR
// for i in turrets do
76609: LD_ADDR_VAR 0 4
76613: PUSH
76614: LD_VAR 0 1
76618: PUSH
76619: FOR_IN
76620: IFFALSE 76803
// begin nat := GetNation ( i ) ;
76622: LD_ADDR_VAR 0 7
76626: PUSH
76627: LD_VAR 0 4
76631: PPUSH
76632: CALL_OW 248
76636: ST_TO_ADDR
// weapon := 0 ;
76637: LD_ADDR_VAR 0 8
76641: PUSH
76642: LD_INT 0
76644: ST_TO_ADDR
// if not nat then
76645: LD_VAR 0 7
76649: NOT
76650: IFFALSE 76654
// continue ;
76652: GO 76619
// for j in list [ nat ] do
76654: LD_ADDR_VAR 0 5
76658: PUSH
76659: LD_VAR 0 10
76663: PUSH
76664: LD_VAR 0 7
76668: ARRAY
76669: PUSH
76670: FOR_IN
76671: IFFALSE 76712
// if GetBWeapon ( i ) = j [ 1 ] then
76673: LD_VAR 0 4
76677: PPUSH
76678: CALL_OW 269
76682: PUSH
76683: LD_VAR 0 5
76687: PUSH
76688: LD_INT 1
76690: ARRAY
76691: EQUAL
76692: IFFALSE 76710
// begin weapon := j [ 2 ] ;
76694: LD_ADDR_VAR 0 8
76698: PUSH
76699: LD_VAR 0 5
76703: PUSH
76704: LD_INT 2
76706: ARRAY
76707: ST_TO_ADDR
// break ;
76708: GO 76712
// end ;
76710: GO 76670
76712: POP
76713: POP
// if not weapon then
76714: LD_VAR 0 8
76718: NOT
76719: IFFALSE 76723
// continue ;
76721: GO 76619
// for k in factories do
76723: LD_ADDR_VAR 0 6
76727: PUSH
76728: LD_VAR 0 2
76732: PUSH
76733: FOR_IN
76734: IFFALSE 76799
// begin weapons := AvailableWeaponList ( k ) ;
76736: LD_ADDR_VAR 0 9
76740: PUSH
76741: LD_VAR 0 6
76745: PPUSH
76746: CALL_OW 478
76750: ST_TO_ADDR
// if not weapons then
76751: LD_VAR 0 9
76755: NOT
76756: IFFALSE 76760
// continue ;
76758: GO 76733
// if weapon in weapons then
76760: LD_VAR 0 8
76764: PUSH
76765: LD_VAR 0 9
76769: IN
76770: IFFALSE 76797
// begin result := [ i , weapon ] ;
76772: LD_ADDR_VAR 0 3
76776: PUSH
76777: LD_VAR 0 4
76781: PUSH
76782: LD_VAR 0 8
76786: PUSH
76787: EMPTY
76788: LIST
76789: LIST
76790: ST_TO_ADDR
// exit ;
76791: POP
76792: POP
76793: POP
76794: POP
76795: GO 76805
// end ; end ;
76797: GO 76733
76799: POP
76800: POP
// end ;
76801: GO 76619
76803: POP
76804: POP
// end ;
76805: LD_VAR 0 3
76809: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76810: LD_INT 0
76812: PPUSH
// if not side or side > 8 then
76813: LD_VAR 0 3
76817: NOT
76818: PUSH
76819: LD_VAR 0 3
76823: PUSH
76824: LD_INT 8
76826: GREATER
76827: OR
76828: IFFALSE 76832
// exit ;
76830: GO 76891
// if not range then
76832: LD_VAR 0 4
76836: NOT
76837: IFFALSE 76848
// range := - 12 ;
76839: LD_ADDR_VAR 0 4
76843: PUSH
76844: LD_INT 12
76846: NEG
76847: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76848: LD_VAR 0 1
76852: PPUSH
76853: LD_VAR 0 2
76857: PPUSH
76858: LD_VAR 0 3
76862: PPUSH
76863: LD_VAR 0 4
76867: PPUSH
76868: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76872: LD_VAR 0 1
76876: PPUSH
76877: LD_VAR 0 2
76881: PPUSH
76882: LD_VAR 0 3
76886: PPUSH
76887: CALL_OW 331
// end ;
76891: LD_VAR 0 5
76895: RET
// export function Video ( mode ) ; begin
76896: LD_INT 0
76898: PPUSH
// ingame_video = mode ;
76899: LD_ADDR_OWVAR 52
76903: PUSH
76904: LD_VAR 0 1
76908: ST_TO_ADDR
// interface_hidden = mode ;
76909: LD_ADDR_OWVAR 54
76913: PUSH
76914: LD_VAR 0 1
76918: ST_TO_ADDR
// end ;
76919: LD_VAR 0 2
76923: RET
// export function Join ( array , element ) ; begin
76924: LD_INT 0
76926: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76927: LD_ADDR_VAR 0 3
76931: PUSH
76932: LD_VAR 0 1
76936: PPUSH
76937: LD_VAR 0 1
76941: PUSH
76942: LD_INT 1
76944: PLUS
76945: PPUSH
76946: LD_VAR 0 2
76950: PPUSH
76951: CALL_OW 1
76955: ST_TO_ADDR
// end ;
76956: LD_VAR 0 3
76960: RET
// export function JoinUnion ( array , element ) ; begin
76961: LD_INT 0
76963: PPUSH
// result := array union element ;
76964: LD_ADDR_VAR 0 3
76968: PUSH
76969: LD_VAR 0 1
76973: PUSH
76974: LD_VAR 0 2
76978: UNION
76979: ST_TO_ADDR
// end ;
76980: LD_VAR 0 3
76984: RET
// export function GetBehemoths ( side ) ; begin
76985: LD_INT 0
76987: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76988: LD_ADDR_VAR 0 2
76992: PUSH
76993: LD_INT 22
76995: PUSH
76996: LD_VAR 0 1
77000: PUSH
77001: EMPTY
77002: LIST
77003: LIST
77004: PUSH
77005: LD_INT 31
77007: PUSH
77008: LD_INT 25
77010: PUSH
77011: EMPTY
77012: LIST
77013: LIST
77014: PUSH
77015: EMPTY
77016: LIST
77017: LIST
77018: PPUSH
77019: CALL_OW 69
77023: ST_TO_ADDR
// end ;
77024: LD_VAR 0 2
77028: RET
// export function Shuffle ( array ) ; var i , index ; begin
77029: LD_INT 0
77031: PPUSH
77032: PPUSH
77033: PPUSH
// result := [ ] ;
77034: LD_ADDR_VAR 0 2
77038: PUSH
77039: EMPTY
77040: ST_TO_ADDR
// if not array then
77041: LD_VAR 0 1
77045: NOT
77046: IFFALSE 77050
// exit ;
77048: GO 77149
// Randomize ;
77050: CALL_OW 10
// for i = array downto 1 do
77054: LD_ADDR_VAR 0 3
77058: PUSH
77059: DOUBLE
77060: LD_VAR 0 1
77064: INC
77065: ST_TO_ADDR
77066: LD_INT 1
77068: PUSH
77069: FOR_DOWNTO
77070: IFFALSE 77147
// begin index := rand ( 1 , array ) ;
77072: LD_ADDR_VAR 0 4
77076: PUSH
77077: LD_INT 1
77079: PPUSH
77080: LD_VAR 0 1
77084: PPUSH
77085: CALL_OW 12
77089: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77090: LD_ADDR_VAR 0 2
77094: PUSH
77095: LD_VAR 0 2
77099: PPUSH
77100: LD_VAR 0 2
77104: PUSH
77105: LD_INT 1
77107: PLUS
77108: PPUSH
77109: LD_VAR 0 1
77113: PUSH
77114: LD_VAR 0 4
77118: ARRAY
77119: PPUSH
77120: CALL_OW 2
77124: ST_TO_ADDR
// array := Delete ( array , index ) ;
77125: LD_ADDR_VAR 0 1
77129: PUSH
77130: LD_VAR 0 1
77134: PPUSH
77135: LD_VAR 0 4
77139: PPUSH
77140: CALL_OW 3
77144: ST_TO_ADDR
// end ;
77145: GO 77069
77147: POP
77148: POP
// end ;
77149: LD_VAR 0 2
77153: RET
// export function GetBaseMaterials ( base ) ; begin
77154: LD_INT 0
77156: PPUSH
// result := [ 0 , 0 , 0 ] ;
77157: LD_ADDR_VAR 0 2
77161: PUSH
77162: LD_INT 0
77164: PUSH
77165: LD_INT 0
77167: PUSH
77168: LD_INT 0
77170: PUSH
77171: EMPTY
77172: LIST
77173: LIST
77174: LIST
77175: ST_TO_ADDR
// if not base then
77176: LD_VAR 0 1
77180: NOT
77181: IFFALSE 77185
// exit ;
77183: GO 77234
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77185: LD_ADDR_VAR 0 2
77189: PUSH
77190: LD_VAR 0 1
77194: PPUSH
77195: LD_INT 1
77197: PPUSH
77198: CALL_OW 275
77202: PUSH
77203: LD_VAR 0 1
77207: PPUSH
77208: LD_INT 2
77210: PPUSH
77211: CALL_OW 275
77215: PUSH
77216: LD_VAR 0 1
77220: PPUSH
77221: LD_INT 3
77223: PPUSH
77224: CALL_OW 275
77228: PUSH
77229: EMPTY
77230: LIST
77231: LIST
77232: LIST
77233: ST_TO_ADDR
// end ;
77234: LD_VAR 0 2
77238: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77239: LD_INT 0
77241: PPUSH
77242: PPUSH
// result := array ;
77243: LD_ADDR_VAR 0 3
77247: PUSH
77248: LD_VAR 0 1
77252: ST_TO_ADDR
// if size >= result then
77253: LD_VAR 0 2
77257: PUSH
77258: LD_VAR 0 3
77262: GREATEREQUAL
77263: IFFALSE 77267
// exit ;
77265: GO 77317
// if size then
77267: LD_VAR 0 2
77271: IFFALSE 77317
// for i := array downto size do
77273: LD_ADDR_VAR 0 4
77277: PUSH
77278: DOUBLE
77279: LD_VAR 0 1
77283: INC
77284: ST_TO_ADDR
77285: LD_VAR 0 2
77289: PUSH
77290: FOR_DOWNTO
77291: IFFALSE 77315
// result := Delete ( result , result ) ;
77293: LD_ADDR_VAR 0 3
77297: PUSH
77298: LD_VAR 0 3
77302: PPUSH
77303: LD_VAR 0 3
77307: PPUSH
77308: CALL_OW 3
77312: ST_TO_ADDR
77313: GO 77290
77315: POP
77316: POP
// end ;
77317: LD_VAR 0 3
77321: RET
// export function ComExit ( unit ) ; var tmp ; begin
77322: LD_INT 0
77324: PPUSH
77325: PPUSH
// if not IsInUnit ( unit ) then
77326: LD_VAR 0 1
77330: PPUSH
77331: CALL_OW 310
77335: NOT
77336: IFFALSE 77340
// exit ;
77338: GO 77400
// tmp := IsInUnit ( unit ) ;
77340: LD_ADDR_VAR 0 3
77344: PUSH
77345: LD_VAR 0 1
77349: PPUSH
77350: CALL_OW 310
77354: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77355: LD_VAR 0 3
77359: PPUSH
77360: CALL_OW 247
77364: PUSH
77365: LD_INT 2
77367: EQUAL
77368: IFFALSE 77381
// ComExitVehicle ( unit ) else
77370: LD_VAR 0 1
77374: PPUSH
77375: CALL_OW 121
77379: GO 77390
// ComExitBuilding ( unit ) ;
77381: LD_VAR 0 1
77385: PPUSH
77386: CALL_OW 122
// result := tmp ;
77390: LD_ADDR_VAR 0 2
77394: PUSH
77395: LD_VAR 0 3
77399: ST_TO_ADDR
// end ;
77400: LD_VAR 0 2
77404: RET
// export function ComExitAll ( units ) ; var i ; begin
77405: LD_INT 0
77407: PPUSH
77408: PPUSH
// if not units then
77409: LD_VAR 0 1
77413: NOT
77414: IFFALSE 77418
// exit ;
77416: GO 77444
// for i in units do
77418: LD_ADDR_VAR 0 3
77422: PUSH
77423: LD_VAR 0 1
77427: PUSH
77428: FOR_IN
77429: IFFALSE 77442
// ComExit ( i ) ;
77431: LD_VAR 0 3
77435: PPUSH
77436: CALL 77322 0 1
77440: GO 77428
77442: POP
77443: POP
// end ;
77444: LD_VAR 0 2
77448: RET
// export function ResetHc ; begin
77449: LD_INT 0
77451: PPUSH
// InitHc ;
77452: CALL_OW 19
// hc_importance := 0 ;
77456: LD_ADDR_OWVAR 32
77460: PUSH
77461: LD_INT 0
77463: ST_TO_ADDR
// end ;
77464: LD_VAR 0 1
77468: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77469: LD_INT 0
77471: PPUSH
77472: PPUSH
77473: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77474: LD_ADDR_VAR 0 6
77478: PUSH
77479: LD_VAR 0 1
77483: PUSH
77484: LD_VAR 0 3
77488: PLUS
77489: PUSH
77490: LD_INT 2
77492: DIV
77493: ST_TO_ADDR
// if _x < 0 then
77494: LD_VAR 0 6
77498: PUSH
77499: LD_INT 0
77501: LESS
77502: IFFALSE 77519
// _x := _x * - 1 ;
77504: LD_ADDR_VAR 0 6
77508: PUSH
77509: LD_VAR 0 6
77513: PUSH
77514: LD_INT 1
77516: NEG
77517: MUL
77518: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77519: LD_ADDR_VAR 0 7
77523: PUSH
77524: LD_VAR 0 2
77528: PUSH
77529: LD_VAR 0 4
77533: PLUS
77534: PUSH
77535: LD_INT 2
77537: DIV
77538: ST_TO_ADDR
// if _y < 0 then
77539: LD_VAR 0 7
77543: PUSH
77544: LD_INT 0
77546: LESS
77547: IFFALSE 77564
// _y := _y * - 1 ;
77549: LD_ADDR_VAR 0 7
77553: PUSH
77554: LD_VAR 0 7
77558: PUSH
77559: LD_INT 1
77561: NEG
77562: MUL
77563: ST_TO_ADDR
// result := [ _x , _y ] ;
77564: LD_ADDR_VAR 0 5
77568: PUSH
77569: LD_VAR 0 6
77573: PUSH
77574: LD_VAR 0 7
77578: PUSH
77579: EMPTY
77580: LIST
77581: LIST
77582: ST_TO_ADDR
// end ;
77583: LD_VAR 0 5
77587: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77588: LD_INT 0
77590: PPUSH
77591: PPUSH
77592: PPUSH
77593: PPUSH
// task := GetTaskList ( unit ) ;
77594: LD_ADDR_VAR 0 7
77598: PUSH
77599: LD_VAR 0 1
77603: PPUSH
77604: CALL_OW 437
77608: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77609: LD_VAR 0 7
77613: NOT
77614: PUSH
77615: LD_VAR 0 1
77619: PPUSH
77620: LD_VAR 0 2
77624: PPUSH
77625: CALL_OW 308
77629: NOT
77630: AND
77631: IFFALSE 77635
// exit ;
77633: GO 77753
// if IsInArea ( unit , area ) then
77635: LD_VAR 0 1
77639: PPUSH
77640: LD_VAR 0 2
77644: PPUSH
77645: CALL_OW 308
77649: IFFALSE 77667
// begin ComMoveToArea ( unit , goAway ) ;
77651: LD_VAR 0 1
77655: PPUSH
77656: LD_VAR 0 3
77660: PPUSH
77661: CALL_OW 113
// exit ;
77665: GO 77753
// end ; if task [ 1 ] [ 1 ] <> M then
77667: LD_VAR 0 7
77671: PUSH
77672: LD_INT 1
77674: ARRAY
77675: PUSH
77676: LD_INT 1
77678: ARRAY
77679: PUSH
77680: LD_STRING M
77682: NONEQUAL
77683: IFFALSE 77687
// exit ;
77685: GO 77753
// x := task [ 1 ] [ 2 ] ;
77687: LD_ADDR_VAR 0 5
77691: PUSH
77692: LD_VAR 0 7
77696: PUSH
77697: LD_INT 1
77699: ARRAY
77700: PUSH
77701: LD_INT 2
77703: ARRAY
77704: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77705: LD_ADDR_VAR 0 6
77709: PUSH
77710: LD_VAR 0 7
77714: PUSH
77715: LD_INT 1
77717: ARRAY
77718: PUSH
77719: LD_INT 3
77721: ARRAY
77722: ST_TO_ADDR
// if InArea ( x , y , area ) then
77723: LD_VAR 0 5
77727: PPUSH
77728: LD_VAR 0 6
77732: PPUSH
77733: LD_VAR 0 2
77737: PPUSH
77738: CALL_OW 309
77742: IFFALSE 77753
// ComStop ( unit ) ;
77744: LD_VAR 0 1
77748: PPUSH
77749: CALL_OW 141
// end ;
77753: LD_VAR 0 4
77757: RET
// export function Abs ( value ) ; begin
77758: LD_INT 0
77760: PPUSH
// result := value ;
77761: LD_ADDR_VAR 0 2
77765: PUSH
77766: LD_VAR 0 1
77770: ST_TO_ADDR
// if value < 0 then
77771: LD_VAR 0 1
77775: PUSH
77776: LD_INT 0
77778: LESS
77779: IFFALSE 77796
// result := value * - 1 ;
77781: LD_ADDR_VAR 0 2
77785: PUSH
77786: LD_VAR 0 1
77790: PUSH
77791: LD_INT 1
77793: NEG
77794: MUL
77795: ST_TO_ADDR
// end ;
77796: LD_VAR 0 2
77800: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77801: LD_INT 0
77803: PPUSH
77804: PPUSH
77805: PPUSH
77806: PPUSH
77807: PPUSH
77808: PPUSH
77809: PPUSH
77810: PPUSH
// if not unit or not building then
77811: LD_VAR 0 1
77815: NOT
77816: PUSH
77817: LD_VAR 0 2
77821: NOT
77822: OR
77823: IFFALSE 77827
// exit ;
77825: GO 78053
// x := GetX ( building ) ;
77827: LD_ADDR_VAR 0 4
77831: PUSH
77832: LD_VAR 0 2
77836: PPUSH
77837: CALL_OW 250
77841: ST_TO_ADDR
// y := GetY ( building ) ;
77842: LD_ADDR_VAR 0 6
77846: PUSH
77847: LD_VAR 0 2
77851: PPUSH
77852: CALL_OW 251
77856: ST_TO_ADDR
// d := GetDir ( building ) ;
77857: LD_ADDR_VAR 0 8
77861: PUSH
77862: LD_VAR 0 2
77866: PPUSH
77867: CALL_OW 254
77871: ST_TO_ADDR
// r := 4 ;
77872: LD_ADDR_VAR 0 9
77876: PUSH
77877: LD_INT 4
77879: ST_TO_ADDR
// for i := 1 to 5 do
77880: LD_ADDR_VAR 0 10
77884: PUSH
77885: DOUBLE
77886: LD_INT 1
77888: DEC
77889: ST_TO_ADDR
77890: LD_INT 5
77892: PUSH
77893: FOR_TO
77894: IFFALSE 78051
// begin _x := ShiftX ( x , d , r + i ) ;
77896: LD_ADDR_VAR 0 5
77900: PUSH
77901: LD_VAR 0 4
77905: PPUSH
77906: LD_VAR 0 8
77910: PPUSH
77911: LD_VAR 0 9
77915: PUSH
77916: LD_VAR 0 10
77920: PLUS
77921: PPUSH
77922: CALL_OW 272
77926: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77927: LD_ADDR_VAR 0 7
77931: PUSH
77932: LD_VAR 0 6
77936: PPUSH
77937: LD_VAR 0 8
77941: PPUSH
77942: LD_VAR 0 9
77946: PUSH
77947: LD_VAR 0 10
77951: PLUS
77952: PPUSH
77953: CALL_OW 273
77957: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77958: LD_VAR 0 5
77962: PPUSH
77963: LD_VAR 0 7
77967: PPUSH
77968: CALL_OW 488
77972: PUSH
77973: LD_VAR 0 5
77977: PPUSH
77978: LD_VAR 0 7
77982: PPUSH
77983: CALL_OW 428
77987: PPUSH
77988: CALL_OW 247
77992: PUSH
77993: LD_INT 3
77995: PUSH
77996: LD_INT 2
77998: PUSH
77999: EMPTY
78000: LIST
78001: LIST
78002: IN
78003: NOT
78004: AND
78005: IFFALSE 78049
// begin ComMoveXY ( unit , _x , _y ) ;
78007: LD_VAR 0 1
78011: PPUSH
78012: LD_VAR 0 5
78016: PPUSH
78017: LD_VAR 0 7
78021: PPUSH
78022: CALL_OW 111
// result := [ _x , _y ] ;
78026: LD_ADDR_VAR 0 3
78030: PUSH
78031: LD_VAR 0 5
78035: PUSH
78036: LD_VAR 0 7
78040: PUSH
78041: EMPTY
78042: LIST
78043: LIST
78044: ST_TO_ADDR
// exit ;
78045: POP
78046: POP
78047: GO 78053
// end ; end ;
78049: GO 77893
78051: POP
78052: POP
// end ;
78053: LD_VAR 0 3
78057: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78058: LD_INT 0
78060: PPUSH
78061: PPUSH
78062: PPUSH
// result := 0 ;
78063: LD_ADDR_VAR 0 3
78067: PUSH
78068: LD_INT 0
78070: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78071: LD_VAR 0 1
78075: PUSH
78076: LD_INT 0
78078: LESS
78079: PUSH
78080: LD_VAR 0 1
78084: PUSH
78085: LD_INT 8
78087: GREATER
78088: OR
78089: PUSH
78090: LD_VAR 0 2
78094: PUSH
78095: LD_INT 0
78097: LESS
78098: OR
78099: PUSH
78100: LD_VAR 0 2
78104: PUSH
78105: LD_INT 8
78107: GREATER
78108: OR
78109: IFFALSE 78113
// exit ;
78111: GO 78188
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78113: LD_ADDR_VAR 0 4
78117: PUSH
78118: LD_INT 22
78120: PUSH
78121: LD_VAR 0 2
78125: PUSH
78126: EMPTY
78127: LIST
78128: LIST
78129: PPUSH
78130: CALL_OW 69
78134: PUSH
78135: FOR_IN
78136: IFFALSE 78186
// begin un := UnitShoot ( i ) ;
78138: LD_ADDR_VAR 0 5
78142: PUSH
78143: LD_VAR 0 4
78147: PPUSH
78148: CALL_OW 504
78152: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78153: LD_VAR 0 5
78157: PPUSH
78158: CALL_OW 255
78162: PUSH
78163: LD_VAR 0 1
78167: EQUAL
78168: IFFALSE 78184
// begin result := un ;
78170: LD_ADDR_VAR 0 3
78174: PUSH
78175: LD_VAR 0 5
78179: ST_TO_ADDR
// exit ;
78180: POP
78181: POP
78182: GO 78188
// end ; end ;
78184: GO 78135
78186: POP
78187: POP
// end ;
78188: LD_VAR 0 3
78192: RET
// export function GetCargoBay ( units ) ; begin
78193: LD_INT 0
78195: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78196: LD_ADDR_VAR 0 2
78200: PUSH
78201: LD_VAR 0 1
78205: PPUSH
78206: LD_INT 2
78208: PUSH
78209: LD_INT 34
78211: PUSH
78212: LD_INT 12
78214: PUSH
78215: EMPTY
78216: LIST
78217: LIST
78218: PUSH
78219: LD_INT 34
78221: PUSH
78222: LD_INT 51
78224: PUSH
78225: EMPTY
78226: LIST
78227: LIST
78228: PUSH
78229: LD_INT 34
78231: PUSH
78232: LD_INT 32
78234: PUSH
78235: EMPTY
78236: LIST
78237: LIST
78238: PUSH
78239: LD_INT 34
78241: PUSH
78242: LD_INT 89
78244: PUSH
78245: EMPTY
78246: LIST
78247: LIST
78248: PUSH
78249: EMPTY
78250: LIST
78251: LIST
78252: LIST
78253: LIST
78254: LIST
78255: PPUSH
78256: CALL_OW 72
78260: ST_TO_ADDR
// end ;
78261: LD_VAR 0 2
78265: RET
// export function Negate ( value ) ; begin
78266: LD_INT 0
78268: PPUSH
// result := not value ;
78269: LD_ADDR_VAR 0 2
78273: PUSH
78274: LD_VAR 0 1
78278: NOT
78279: ST_TO_ADDR
// end ;
78280: LD_VAR 0 2
78284: RET
// export function Inc ( value ) ; begin
78285: LD_INT 0
78287: PPUSH
// result := value + 1 ;
78288: LD_ADDR_VAR 0 2
78292: PUSH
78293: LD_VAR 0 1
78297: PUSH
78298: LD_INT 1
78300: PLUS
78301: ST_TO_ADDR
// end ;
78302: LD_VAR 0 2
78306: RET
// export function Dec ( value ) ; begin
78307: LD_INT 0
78309: PPUSH
// result := value - 1 ;
78310: LD_ADDR_VAR 0 2
78314: PUSH
78315: LD_VAR 0 1
78319: PUSH
78320: LD_INT 1
78322: MINUS
78323: ST_TO_ADDR
// end ;
78324: LD_VAR 0 2
78328: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78329: LD_INT 0
78331: PPUSH
78332: PPUSH
78333: PPUSH
78334: PPUSH
78335: PPUSH
78336: PPUSH
78337: PPUSH
78338: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78339: LD_VAR 0 1
78343: PPUSH
78344: LD_VAR 0 2
78348: PPUSH
78349: CALL_OW 488
78353: NOT
78354: PUSH
78355: LD_VAR 0 3
78359: PPUSH
78360: LD_VAR 0 4
78364: PPUSH
78365: CALL_OW 488
78369: NOT
78370: OR
78371: IFFALSE 78384
// begin result := - 1 ;
78373: LD_ADDR_VAR 0 5
78377: PUSH
78378: LD_INT 1
78380: NEG
78381: ST_TO_ADDR
// exit ;
78382: GO 78619
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78384: LD_ADDR_VAR 0 12
78388: PUSH
78389: LD_VAR 0 1
78393: PPUSH
78394: LD_VAR 0 2
78398: PPUSH
78399: LD_VAR 0 3
78403: PPUSH
78404: LD_VAR 0 4
78408: PPUSH
78409: CALL 77469 0 4
78413: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78414: LD_ADDR_VAR 0 11
78418: PUSH
78419: LD_VAR 0 1
78423: PPUSH
78424: LD_VAR 0 2
78428: PPUSH
78429: LD_VAR 0 12
78433: PUSH
78434: LD_INT 1
78436: ARRAY
78437: PPUSH
78438: LD_VAR 0 12
78442: PUSH
78443: LD_INT 2
78445: ARRAY
78446: PPUSH
78447: CALL_OW 298
78451: ST_TO_ADDR
// distance := 9999 ;
78452: LD_ADDR_VAR 0 10
78456: PUSH
78457: LD_INT 9999
78459: ST_TO_ADDR
// for i := 0 to 5 do
78460: LD_ADDR_VAR 0 6
78464: PUSH
78465: DOUBLE
78466: LD_INT 0
78468: DEC
78469: ST_TO_ADDR
78470: LD_INT 5
78472: PUSH
78473: FOR_TO
78474: IFFALSE 78617
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78476: LD_ADDR_VAR 0 7
78480: PUSH
78481: LD_VAR 0 1
78485: PPUSH
78486: LD_VAR 0 6
78490: PPUSH
78491: LD_VAR 0 11
78495: PPUSH
78496: CALL_OW 272
78500: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78501: LD_ADDR_VAR 0 8
78505: PUSH
78506: LD_VAR 0 2
78510: PPUSH
78511: LD_VAR 0 6
78515: PPUSH
78516: LD_VAR 0 11
78520: PPUSH
78521: CALL_OW 273
78525: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78526: LD_VAR 0 7
78530: PPUSH
78531: LD_VAR 0 8
78535: PPUSH
78536: CALL_OW 488
78540: NOT
78541: IFFALSE 78545
// continue ;
78543: GO 78473
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78545: LD_ADDR_VAR 0 9
78549: PUSH
78550: LD_VAR 0 12
78554: PUSH
78555: LD_INT 1
78557: ARRAY
78558: PPUSH
78559: LD_VAR 0 12
78563: PUSH
78564: LD_INT 2
78566: ARRAY
78567: PPUSH
78568: LD_VAR 0 7
78572: PPUSH
78573: LD_VAR 0 8
78577: PPUSH
78578: CALL_OW 298
78582: ST_TO_ADDR
// if tmp < distance then
78583: LD_VAR 0 9
78587: PUSH
78588: LD_VAR 0 10
78592: LESS
78593: IFFALSE 78615
// begin result := i ;
78595: LD_ADDR_VAR 0 5
78599: PUSH
78600: LD_VAR 0 6
78604: ST_TO_ADDR
// distance := tmp ;
78605: LD_ADDR_VAR 0 10
78609: PUSH
78610: LD_VAR 0 9
78614: ST_TO_ADDR
// end ; end ;
78615: GO 78473
78617: POP
78618: POP
// end ;
78619: LD_VAR 0 5
78623: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78624: LD_INT 0
78626: PPUSH
78627: PPUSH
// if not driver or not IsInUnit ( driver ) then
78628: LD_VAR 0 1
78632: NOT
78633: PUSH
78634: LD_VAR 0 1
78638: PPUSH
78639: CALL_OW 310
78643: NOT
78644: OR
78645: IFFALSE 78649
// exit ;
78647: GO 78739
// vehicle := IsInUnit ( driver ) ;
78649: LD_ADDR_VAR 0 3
78653: PUSH
78654: LD_VAR 0 1
78658: PPUSH
78659: CALL_OW 310
78663: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78664: LD_VAR 0 1
78668: PPUSH
78669: LD_STRING \
78671: PUSH
78672: LD_INT 0
78674: PUSH
78675: LD_INT 0
78677: PUSH
78678: LD_INT 0
78680: PUSH
78681: LD_INT 0
78683: PUSH
78684: LD_INT 0
78686: PUSH
78687: LD_INT 0
78689: PUSH
78690: EMPTY
78691: LIST
78692: LIST
78693: LIST
78694: LIST
78695: LIST
78696: LIST
78697: LIST
78698: PUSH
78699: LD_STRING E
78701: PUSH
78702: LD_INT 0
78704: PUSH
78705: LD_INT 0
78707: PUSH
78708: LD_VAR 0 3
78712: PUSH
78713: LD_INT 0
78715: PUSH
78716: LD_INT 0
78718: PUSH
78719: LD_INT 0
78721: PUSH
78722: EMPTY
78723: LIST
78724: LIST
78725: LIST
78726: LIST
78727: LIST
78728: LIST
78729: LIST
78730: PUSH
78731: EMPTY
78732: LIST
78733: LIST
78734: PPUSH
78735: CALL_OW 446
// end ;
78739: LD_VAR 0 2
78743: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78744: LD_INT 0
78746: PPUSH
78747: PPUSH
// if not driver or not IsInUnit ( driver ) then
78748: LD_VAR 0 1
78752: NOT
78753: PUSH
78754: LD_VAR 0 1
78758: PPUSH
78759: CALL_OW 310
78763: NOT
78764: OR
78765: IFFALSE 78769
// exit ;
78767: GO 78859
// vehicle := IsInUnit ( driver ) ;
78769: LD_ADDR_VAR 0 3
78773: PUSH
78774: LD_VAR 0 1
78778: PPUSH
78779: CALL_OW 310
78783: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78784: LD_VAR 0 1
78788: PPUSH
78789: LD_STRING \
78791: PUSH
78792: LD_INT 0
78794: PUSH
78795: LD_INT 0
78797: PUSH
78798: LD_INT 0
78800: PUSH
78801: LD_INT 0
78803: PUSH
78804: LD_INT 0
78806: PUSH
78807: LD_INT 0
78809: PUSH
78810: EMPTY
78811: LIST
78812: LIST
78813: LIST
78814: LIST
78815: LIST
78816: LIST
78817: LIST
78818: PUSH
78819: LD_STRING E
78821: PUSH
78822: LD_INT 0
78824: PUSH
78825: LD_INT 0
78827: PUSH
78828: LD_VAR 0 3
78832: PUSH
78833: LD_INT 0
78835: PUSH
78836: LD_INT 0
78838: PUSH
78839: LD_INT 0
78841: PUSH
78842: EMPTY
78843: LIST
78844: LIST
78845: LIST
78846: LIST
78847: LIST
78848: LIST
78849: LIST
78850: PUSH
78851: EMPTY
78852: LIST
78853: LIST
78854: PPUSH
78855: CALL_OW 447
// end ;
78859: LD_VAR 0 2
78863: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78864: LD_INT 0
78866: PPUSH
78867: PPUSH
78868: PPUSH
// tmp := [ ] ;
78869: LD_ADDR_VAR 0 5
78873: PUSH
78874: EMPTY
78875: ST_TO_ADDR
// for i in units do
78876: LD_ADDR_VAR 0 4
78880: PUSH
78881: LD_VAR 0 1
78885: PUSH
78886: FOR_IN
78887: IFFALSE 78925
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78889: LD_ADDR_VAR 0 5
78893: PUSH
78894: LD_VAR 0 5
78898: PPUSH
78899: LD_VAR 0 5
78903: PUSH
78904: LD_INT 1
78906: PLUS
78907: PPUSH
78908: LD_VAR 0 4
78912: PPUSH
78913: CALL_OW 256
78917: PPUSH
78918: CALL_OW 2
78922: ST_TO_ADDR
78923: GO 78886
78925: POP
78926: POP
// if not tmp then
78927: LD_VAR 0 5
78931: NOT
78932: IFFALSE 78936
// exit ;
78934: GO 78984
// if asc then
78936: LD_VAR 0 2
78940: IFFALSE 78964
// result := SortListByListAsc ( units , tmp ) else
78942: LD_ADDR_VAR 0 3
78946: PUSH
78947: LD_VAR 0 1
78951: PPUSH
78952: LD_VAR 0 5
78956: PPUSH
78957: CALL_OW 76
78961: ST_TO_ADDR
78962: GO 78984
// result := SortListByListDesc ( units , tmp ) ;
78964: LD_ADDR_VAR 0 3
78968: PUSH
78969: LD_VAR 0 1
78973: PPUSH
78974: LD_VAR 0 5
78978: PPUSH
78979: CALL_OW 77
78983: ST_TO_ADDR
// end ;
78984: LD_VAR 0 3
78988: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78989: LD_INT 0
78991: PPUSH
78992: PPUSH
// task := GetTaskList ( mech ) ;
78993: LD_ADDR_VAR 0 4
78997: PUSH
78998: LD_VAR 0 1
79002: PPUSH
79003: CALL_OW 437
79007: ST_TO_ADDR
// if not task then
79008: LD_VAR 0 4
79012: NOT
79013: IFFALSE 79017
// exit ;
79015: GO 79059
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79017: LD_ADDR_VAR 0 3
79021: PUSH
79022: LD_VAR 0 4
79026: PUSH
79027: LD_INT 1
79029: ARRAY
79030: PUSH
79031: LD_INT 1
79033: ARRAY
79034: PUSH
79035: LD_STRING r
79037: EQUAL
79038: PUSH
79039: LD_VAR 0 4
79043: PUSH
79044: LD_INT 1
79046: ARRAY
79047: PUSH
79048: LD_INT 4
79050: ARRAY
79051: PUSH
79052: LD_VAR 0 2
79056: EQUAL
79057: AND
79058: ST_TO_ADDR
// end ;
79059: LD_VAR 0 3
79063: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79064: LD_INT 0
79066: PPUSH
// SetDir ( unit , d ) ;
79067: LD_VAR 0 1
79071: PPUSH
79072: LD_VAR 0 4
79076: PPUSH
79077: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79081: LD_VAR 0 1
79085: PPUSH
79086: LD_VAR 0 2
79090: PPUSH
79091: LD_VAR 0 3
79095: PPUSH
79096: LD_VAR 0 5
79100: PPUSH
79101: CALL_OW 48
// end ;
79105: LD_VAR 0 6
79109: RET
// export function ToNaturalNumber ( number ) ; begin
79110: LD_INT 0
79112: PPUSH
// result := number div 1 ;
79113: LD_ADDR_VAR 0 2
79117: PUSH
79118: LD_VAR 0 1
79122: PUSH
79123: LD_INT 1
79125: DIV
79126: ST_TO_ADDR
// if number < 0 then
79127: LD_VAR 0 1
79131: PUSH
79132: LD_INT 0
79134: LESS
79135: IFFALSE 79145
// result := 0 ;
79137: LD_ADDR_VAR 0 2
79141: PUSH
79142: LD_INT 0
79144: ST_TO_ADDR
// end ;
79145: LD_VAR 0 2
79149: RET
// export function SortByClass ( units , class ) ; var un ; begin
79150: LD_INT 0
79152: PPUSH
79153: PPUSH
// if not units or not class then
79154: LD_VAR 0 1
79158: NOT
79159: PUSH
79160: LD_VAR 0 2
79164: NOT
79165: OR
79166: IFFALSE 79170
// exit ;
79168: GO 79265
// result := [ ] ;
79170: LD_ADDR_VAR 0 3
79174: PUSH
79175: EMPTY
79176: ST_TO_ADDR
// for un in units do
79177: LD_ADDR_VAR 0 4
79181: PUSH
79182: LD_VAR 0 1
79186: PUSH
79187: FOR_IN
79188: IFFALSE 79263
// if GetClass ( un ) = class then
79190: LD_VAR 0 4
79194: PPUSH
79195: CALL_OW 257
79199: PUSH
79200: LD_VAR 0 2
79204: EQUAL
79205: IFFALSE 79232
// result := Insert ( result , 1 , un ) else
79207: LD_ADDR_VAR 0 3
79211: PUSH
79212: LD_VAR 0 3
79216: PPUSH
79217: LD_INT 1
79219: PPUSH
79220: LD_VAR 0 4
79224: PPUSH
79225: CALL_OW 2
79229: ST_TO_ADDR
79230: GO 79261
// result := Replace ( result , result + 1 , un ) ;
79232: LD_ADDR_VAR 0 3
79236: PUSH
79237: LD_VAR 0 3
79241: PPUSH
79242: LD_VAR 0 3
79246: PUSH
79247: LD_INT 1
79249: PLUS
79250: PPUSH
79251: LD_VAR 0 4
79255: PPUSH
79256: CALL_OW 1
79260: ST_TO_ADDR
79261: GO 79187
79263: POP
79264: POP
// end ;
79265: LD_VAR 0 3
79269: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79270: LD_INT 0
79272: PPUSH
79273: PPUSH
79274: PPUSH
79275: PPUSH
79276: PPUSH
79277: PPUSH
79278: PPUSH
// result := [ ] ;
79279: LD_ADDR_VAR 0 4
79283: PUSH
79284: EMPTY
79285: ST_TO_ADDR
// if x - r < 0 then
79286: LD_VAR 0 1
79290: PUSH
79291: LD_VAR 0 3
79295: MINUS
79296: PUSH
79297: LD_INT 0
79299: LESS
79300: IFFALSE 79312
// min_x := 0 else
79302: LD_ADDR_VAR 0 8
79306: PUSH
79307: LD_INT 0
79309: ST_TO_ADDR
79310: GO 79328
// min_x := x - r ;
79312: LD_ADDR_VAR 0 8
79316: PUSH
79317: LD_VAR 0 1
79321: PUSH
79322: LD_VAR 0 3
79326: MINUS
79327: ST_TO_ADDR
// if y - r < 0 then
79328: LD_VAR 0 2
79332: PUSH
79333: LD_VAR 0 3
79337: MINUS
79338: PUSH
79339: LD_INT 0
79341: LESS
79342: IFFALSE 79354
// min_y := 0 else
79344: LD_ADDR_VAR 0 7
79348: PUSH
79349: LD_INT 0
79351: ST_TO_ADDR
79352: GO 79370
// min_y := y - r ;
79354: LD_ADDR_VAR 0 7
79358: PUSH
79359: LD_VAR 0 2
79363: PUSH
79364: LD_VAR 0 3
79368: MINUS
79369: ST_TO_ADDR
// max_x := x + r ;
79370: LD_ADDR_VAR 0 9
79374: PUSH
79375: LD_VAR 0 1
79379: PUSH
79380: LD_VAR 0 3
79384: PLUS
79385: ST_TO_ADDR
// max_y := y + r ;
79386: LD_ADDR_VAR 0 10
79390: PUSH
79391: LD_VAR 0 2
79395: PUSH
79396: LD_VAR 0 3
79400: PLUS
79401: ST_TO_ADDR
// for _x = min_x to max_x do
79402: LD_ADDR_VAR 0 5
79406: PUSH
79407: DOUBLE
79408: LD_VAR 0 8
79412: DEC
79413: ST_TO_ADDR
79414: LD_VAR 0 9
79418: PUSH
79419: FOR_TO
79420: IFFALSE 79521
// for _y = min_y to max_y do
79422: LD_ADDR_VAR 0 6
79426: PUSH
79427: DOUBLE
79428: LD_VAR 0 7
79432: DEC
79433: ST_TO_ADDR
79434: LD_VAR 0 10
79438: PUSH
79439: FOR_TO
79440: IFFALSE 79517
// begin if not ValidHex ( _x , _y ) then
79442: LD_VAR 0 5
79446: PPUSH
79447: LD_VAR 0 6
79451: PPUSH
79452: CALL_OW 488
79456: NOT
79457: IFFALSE 79461
// continue ;
79459: GO 79439
// if GetResourceTypeXY ( _x , _y ) then
79461: LD_VAR 0 5
79465: PPUSH
79466: LD_VAR 0 6
79470: PPUSH
79471: CALL_OW 283
79475: IFFALSE 79515
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79477: LD_ADDR_VAR 0 4
79481: PUSH
79482: LD_VAR 0 4
79486: PPUSH
79487: LD_VAR 0 4
79491: PUSH
79492: LD_INT 1
79494: PLUS
79495: PPUSH
79496: LD_VAR 0 5
79500: PUSH
79501: LD_VAR 0 6
79505: PUSH
79506: EMPTY
79507: LIST
79508: LIST
79509: PPUSH
79510: CALL_OW 1
79514: ST_TO_ADDR
// end ;
79515: GO 79439
79517: POP
79518: POP
79519: GO 79419
79521: POP
79522: POP
// end ;
79523: LD_VAR 0 4
79527: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79528: LD_INT 0
79530: PPUSH
79531: PPUSH
79532: PPUSH
79533: PPUSH
79534: PPUSH
79535: PPUSH
79536: PPUSH
79537: PPUSH
// if not units then
79538: LD_VAR 0 1
79542: NOT
79543: IFFALSE 79547
// exit ;
79545: GO 80075
// result := UnitFilter ( units , [ f_ok ] ) ;
79547: LD_ADDR_VAR 0 3
79551: PUSH
79552: LD_VAR 0 1
79556: PPUSH
79557: LD_INT 50
79559: PUSH
79560: EMPTY
79561: LIST
79562: PPUSH
79563: CALL_OW 72
79567: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79568: LD_ADDR_VAR 0 8
79572: PUSH
79573: LD_VAR 0 1
79577: PUSH
79578: LD_INT 1
79580: ARRAY
79581: PPUSH
79582: CALL_OW 255
79586: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79587: LD_ADDR_VAR 0 10
79591: PUSH
79592: LD_INT 29
79594: PUSH
79595: LD_INT 91
79597: PUSH
79598: LD_INT 49
79600: PUSH
79601: EMPTY
79602: LIST
79603: LIST
79604: LIST
79605: ST_TO_ADDR
// if not result then
79606: LD_VAR 0 3
79610: NOT
79611: IFFALSE 79615
// exit ;
79613: GO 80075
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79615: LD_ADDR_VAR 0 5
79619: PUSH
79620: LD_INT 81
79622: PUSH
79623: LD_VAR 0 8
79627: PUSH
79628: EMPTY
79629: LIST
79630: LIST
79631: PPUSH
79632: CALL_OW 69
79636: ST_TO_ADDR
// for i in result do
79637: LD_ADDR_VAR 0 4
79641: PUSH
79642: LD_VAR 0 3
79646: PUSH
79647: FOR_IN
79648: IFFALSE 80073
// begin tag := GetTag ( i ) + 1 ;
79650: LD_ADDR_VAR 0 9
79654: PUSH
79655: LD_VAR 0 4
79659: PPUSH
79660: CALL_OW 110
79664: PUSH
79665: LD_INT 1
79667: PLUS
79668: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
79669: LD_ADDR_VAR 0 7
79673: PUSH
79674: LD_VAR 0 4
79678: PPUSH
79679: CALL_OW 250
79683: PPUSH
79684: LD_VAR 0 4
79688: PPUSH
79689: CALL_OW 251
79693: PPUSH
79694: LD_INT 4
79696: PPUSH
79697: CALL 79270 0 3
79701: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
79702: LD_VAR 0 4
79706: PPUSH
79707: CALL_OW 247
79711: PUSH
79712: LD_INT 2
79714: EQUAL
79715: PUSH
79716: LD_VAR 0 7
79720: PUSH
79721: LD_INT 2
79723: GREATER
79724: AND
79725: PUSH
79726: LD_VAR 0 4
79730: PPUSH
79731: CALL_OW 264
79735: PUSH
79736: LD_VAR 0 10
79740: IN
79741: NOT
79742: AND
79743: IFFALSE 79782
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79745: LD_VAR 0 4
79749: PPUSH
79750: LD_VAR 0 7
79754: PUSH
79755: LD_INT 1
79757: ARRAY
79758: PUSH
79759: LD_INT 1
79761: ARRAY
79762: PPUSH
79763: LD_VAR 0 7
79767: PUSH
79768: LD_INT 1
79770: ARRAY
79771: PUSH
79772: LD_INT 2
79774: ARRAY
79775: PPUSH
79776: CALL_OW 116
79780: GO 80071
// if path > tag then
79782: LD_VAR 0 2
79786: PUSH
79787: LD_VAR 0 9
79791: GREATER
79792: IFFALSE 80000
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79794: LD_ADDR_VAR 0 6
79798: PUSH
79799: LD_VAR 0 5
79803: PPUSH
79804: LD_INT 91
79806: PUSH
79807: LD_VAR 0 4
79811: PUSH
79812: LD_INT 8
79814: PUSH
79815: EMPTY
79816: LIST
79817: LIST
79818: LIST
79819: PPUSH
79820: CALL_OW 72
79824: ST_TO_ADDR
// if nearEnemy then
79825: LD_VAR 0 6
79829: IFFALSE 79898
// begin if GetWeapon ( i ) = ru_time_lapser then
79831: LD_VAR 0 4
79835: PPUSH
79836: CALL_OW 264
79840: PUSH
79841: LD_INT 49
79843: EQUAL
79844: IFFALSE 79872
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79846: LD_VAR 0 4
79850: PPUSH
79851: LD_VAR 0 6
79855: PPUSH
79856: LD_VAR 0 4
79860: PPUSH
79861: CALL_OW 74
79865: PPUSH
79866: CALL_OW 112
79870: GO 79896
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79872: LD_VAR 0 4
79876: PPUSH
79877: LD_VAR 0 6
79881: PPUSH
79882: LD_VAR 0 4
79886: PPUSH
79887: CALL_OW 74
79891: PPUSH
79892: CALL 81146 0 2
// end else
79896: GO 79998
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79898: LD_VAR 0 4
79902: PPUSH
79903: LD_VAR 0 2
79907: PUSH
79908: LD_VAR 0 9
79912: ARRAY
79913: PUSH
79914: LD_INT 1
79916: ARRAY
79917: PPUSH
79918: LD_VAR 0 2
79922: PUSH
79923: LD_VAR 0 9
79927: ARRAY
79928: PUSH
79929: LD_INT 2
79931: ARRAY
79932: PPUSH
79933: CALL_OW 297
79937: PUSH
79938: LD_INT 6
79940: GREATER
79941: IFFALSE 79984
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79943: LD_VAR 0 4
79947: PPUSH
79948: LD_VAR 0 2
79952: PUSH
79953: LD_VAR 0 9
79957: ARRAY
79958: PUSH
79959: LD_INT 1
79961: ARRAY
79962: PPUSH
79963: LD_VAR 0 2
79967: PUSH
79968: LD_VAR 0 9
79972: ARRAY
79973: PUSH
79974: LD_INT 2
79976: ARRAY
79977: PPUSH
79978: CALL_OW 114
79982: GO 79998
// SetTag ( i , tag ) ;
79984: LD_VAR 0 4
79988: PPUSH
79989: LD_VAR 0 9
79993: PPUSH
79994: CALL_OW 109
// end else
79998: GO 80071
// if enemy then
80000: LD_VAR 0 5
80004: IFFALSE 80071
// begin if GetWeapon ( i ) = ru_time_lapser then
80006: LD_VAR 0 4
80010: PPUSH
80011: CALL_OW 264
80015: PUSH
80016: LD_INT 49
80018: EQUAL
80019: IFFALSE 80047
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80021: LD_VAR 0 4
80025: PPUSH
80026: LD_VAR 0 5
80030: PPUSH
80031: LD_VAR 0 4
80035: PPUSH
80036: CALL_OW 74
80040: PPUSH
80041: CALL_OW 112
80045: GO 80071
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80047: LD_VAR 0 4
80051: PPUSH
80052: LD_VAR 0 5
80056: PPUSH
80057: LD_VAR 0 4
80061: PPUSH
80062: CALL_OW 74
80066: PPUSH
80067: CALL 81146 0 2
// end ; end ;
80071: GO 79647
80073: POP
80074: POP
// end ;
80075: LD_VAR 0 3
80079: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80080: LD_INT 0
80082: PPUSH
80083: PPUSH
80084: PPUSH
// if not unit or IsInUnit ( unit ) then
80085: LD_VAR 0 1
80089: NOT
80090: PUSH
80091: LD_VAR 0 1
80095: PPUSH
80096: CALL_OW 310
80100: OR
80101: IFFALSE 80105
// exit ;
80103: GO 80196
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80105: LD_ADDR_VAR 0 4
80109: PUSH
80110: LD_VAR 0 1
80114: PPUSH
80115: CALL_OW 250
80119: PPUSH
80120: LD_VAR 0 2
80124: PPUSH
80125: LD_INT 1
80127: PPUSH
80128: CALL_OW 272
80132: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80133: LD_ADDR_VAR 0 5
80137: PUSH
80138: LD_VAR 0 1
80142: PPUSH
80143: CALL_OW 251
80147: PPUSH
80148: LD_VAR 0 2
80152: PPUSH
80153: LD_INT 1
80155: PPUSH
80156: CALL_OW 273
80160: ST_TO_ADDR
// if ValidHex ( x , y ) then
80161: LD_VAR 0 4
80165: PPUSH
80166: LD_VAR 0 5
80170: PPUSH
80171: CALL_OW 488
80175: IFFALSE 80196
// ComTurnXY ( unit , x , y ) ;
80177: LD_VAR 0 1
80181: PPUSH
80182: LD_VAR 0 4
80186: PPUSH
80187: LD_VAR 0 5
80191: PPUSH
80192: CALL_OW 118
// end ;
80196: LD_VAR 0 3
80200: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80201: LD_INT 0
80203: PPUSH
80204: PPUSH
// result := false ;
80205: LD_ADDR_VAR 0 3
80209: PUSH
80210: LD_INT 0
80212: ST_TO_ADDR
// if not units then
80213: LD_VAR 0 2
80217: NOT
80218: IFFALSE 80222
// exit ;
80220: GO 80267
// for i in units do
80222: LD_ADDR_VAR 0 4
80226: PUSH
80227: LD_VAR 0 2
80231: PUSH
80232: FOR_IN
80233: IFFALSE 80265
// if See ( side , i ) then
80235: LD_VAR 0 1
80239: PPUSH
80240: LD_VAR 0 4
80244: PPUSH
80245: CALL_OW 292
80249: IFFALSE 80263
// begin result := true ;
80251: LD_ADDR_VAR 0 3
80255: PUSH
80256: LD_INT 1
80258: ST_TO_ADDR
// exit ;
80259: POP
80260: POP
80261: GO 80267
// end ;
80263: GO 80232
80265: POP
80266: POP
// end ;
80267: LD_VAR 0 3
80271: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80272: LD_INT 0
80274: PPUSH
80275: PPUSH
80276: PPUSH
80277: PPUSH
// if not unit or not points then
80278: LD_VAR 0 1
80282: NOT
80283: PUSH
80284: LD_VAR 0 2
80288: NOT
80289: OR
80290: IFFALSE 80294
// exit ;
80292: GO 80384
// dist := 99999 ;
80294: LD_ADDR_VAR 0 5
80298: PUSH
80299: LD_INT 99999
80301: ST_TO_ADDR
// for i in points do
80302: LD_ADDR_VAR 0 4
80306: PUSH
80307: LD_VAR 0 2
80311: PUSH
80312: FOR_IN
80313: IFFALSE 80382
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80315: LD_ADDR_VAR 0 6
80319: PUSH
80320: LD_VAR 0 1
80324: PPUSH
80325: LD_VAR 0 4
80329: PUSH
80330: LD_INT 1
80332: ARRAY
80333: PPUSH
80334: LD_VAR 0 4
80338: PUSH
80339: LD_INT 2
80341: ARRAY
80342: PPUSH
80343: CALL_OW 297
80347: ST_TO_ADDR
// if tmpDist < dist then
80348: LD_VAR 0 6
80352: PUSH
80353: LD_VAR 0 5
80357: LESS
80358: IFFALSE 80380
// begin result := i ;
80360: LD_ADDR_VAR 0 3
80364: PUSH
80365: LD_VAR 0 4
80369: ST_TO_ADDR
// dist := tmpDist ;
80370: LD_ADDR_VAR 0 5
80374: PUSH
80375: LD_VAR 0 6
80379: ST_TO_ADDR
// end ; end ;
80380: GO 80312
80382: POP
80383: POP
// end ;
80384: LD_VAR 0 3
80388: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80389: LD_INT 0
80391: PPUSH
// uc_side := side ;
80392: LD_ADDR_OWVAR 20
80396: PUSH
80397: LD_VAR 0 1
80401: ST_TO_ADDR
// uc_nation := 3 ;
80402: LD_ADDR_OWVAR 21
80406: PUSH
80407: LD_INT 3
80409: ST_TO_ADDR
// vc_chassis := 25 ;
80410: LD_ADDR_OWVAR 37
80414: PUSH
80415: LD_INT 25
80417: ST_TO_ADDR
// vc_engine := engine_siberite ;
80418: LD_ADDR_OWVAR 39
80422: PUSH
80423: LD_INT 3
80425: ST_TO_ADDR
// vc_control := control_computer ;
80426: LD_ADDR_OWVAR 38
80430: PUSH
80431: LD_INT 3
80433: ST_TO_ADDR
// vc_weapon := 59 ;
80434: LD_ADDR_OWVAR 40
80438: PUSH
80439: LD_INT 59
80441: ST_TO_ADDR
// result := CreateVehicle ;
80442: LD_ADDR_VAR 0 5
80446: PUSH
80447: CALL_OW 45
80451: ST_TO_ADDR
// SetDir ( result , d ) ;
80452: LD_VAR 0 5
80456: PPUSH
80457: LD_VAR 0 4
80461: PPUSH
80462: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80466: LD_VAR 0 5
80470: PPUSH
80471: LD_VAR 0 2
80475: PPUSH
80476: LD_VAR 0 3
80480: PPUSH
80481: LD_INT 0
80483: PPUSH
80484: CALL_OW 48
// end ;
80488: LD_VAR 0 5
80492: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80493: LD_INT 0
80495: PPUSH
80496: PPUSH
80497: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80498: LD_ADDR_VAR 0 2
80502: PUSH
80503: LD_INT 0
80505: PUSH
80506: LD_INT 0
80508: PUSH
80509: LD_INT 0
80511: PUSH
80512: LD_INT 0
80514: PUSH
80515: EMPTY
80516: LIST
80517: LIST
80518: LIST
80519: LIST
80520: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80521: LD_VAR 0 1
80525: NOT
80526: PUSH
80527: LD_VAR 0 1
80531: PPUSH
80532: CALL_OW 264
80536: PUSH
80537: LD_INT 12
80539: PUSH
80540: LD_INT 51
80542: PUSH
80543: LD_INT 32
80545: PUSH
80546: LD_INT 89
80548: PUSH
80549: EMPTY
80550: LIST
80551: LIST
80552: LIST
80553: LIST
80554: IN
80555: NOT
80556: OR
80557: IFFALSE 80561
// exit ;
80559: GO 80659
// for i := 1 to 3 do
80561: LD_ADDR_VAR 0 3
80565: PUSH
80566: DOUBLE
80567: LD_INT 1
80569: DEC
80570: ST_TO_ADDR
80571: LD_INT 3
80573: PUSH
80574: FOR_TO
80575: IFFALSE 80657
// begin tmp := GetCargo ( cargo , i ) ;
80577: LD_ADDR_VAR 0 4
80581: PUSH
80582: LD_VAR 0 1
80586: PPUSH
80587: LD_VAR 0 3
80591: PPUSH
80592: CALL_OW 289
80596: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80597: LD_ADDR_VAR 0 2
80601: PUSH
80602: LD_VAR 0 2
80606: PPUSH
80607: LD_VAR 0 3
80611: PPUSH
80612: LD_VAR 0 4
80616: PPUSH
80617: CALL_OW 1
80621: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80622: LD_ADDR_VAR 0 2
80626: PUSH
80627: LD_VAR 0 2
80631: PPUSH
80632: LD_INT 4
80634: PPUSH
80635: LD_VAR 0 2
80639: PUSH
80640: LD_INT 4
80642: ARRAY
80643: PUSH
80644: LD_VAR 0 4
80648: PLUS
80649: PPUSH
80650: CALL_OW 1
80654: ST_TO_ADDR
// end ;
80655: GO 80574
80657: POP
80658: POP
// end ;
80659: LD_VAR 0 2
80663: RET
// export function Length ( array ) ; begin
80664: LD_INT 0
80666: PPUSH
// result := array + 0 ;
80667: LD_ADDR_VAR 0 2
80671: PUSH
80672: LD_VAR 0 1
80676: PUSH
80677: LD_INT 0
80679: PLUS
80680: ST_TO_ADDR
// end ;
80681: LD_VAR 0 2
80685: RET
// export function PrepareArray ( array ) ; begin
80686: LD_INT 0
80688: PPUSH
// result := array diff 0 ;
80689: LD_ADDR_VAR 0 2
80693: PUSH
80694: LD_VAR 0 1
80698: PUSH
80699: LD_INT 0
80701: DIFF
80702: ST_TO_ADDR
// if not result [ 1 ] then
80703: LD_VAR 0 2
80707: PUSH
80708: LD_INT 1
80710: ARRAY
80711: NOT
80712: IFFALSE 80732
// result := Delete ( result , 1 ) ;
80714: LD_ADDR_VAR 0 2
80718: PUSH
80719: LD_VAR 0 2
80723: PPUSH
80724: LD_INT 1
80726: PPUSH
80727: CALL_OW 3
80731: ST_TO_ADDR
// end ;
80732: LD_VAR 0 2
80736: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80737: LD_INT 0
80739: PPUSH
80740: PPUSH
80741: PPUSH
80742: PPUSH
// sibRocketRange := 25 ;
80743: LD_ADDR_VAR 0 6
80747: PUSH
80748: LD_INT 25
80750: ST_TO_ADDR
// result := false ;
80751: LD_ADDR_VAR 0 4
80755: PUSH
80756: LD_INT 0
80758: ST_TO_ADDR
// for i := 0 to 5 do
80759: LD_ADDR_VAR 0 5
80763: PUSH
80764: DOUBLE
80765: LD_INT 0
80767: DEC
80768: ST_TO_ADDR
80769: LD_INT 5
80771: PUSH
80772: FOR_TO
80773: IFFALSE 80840
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80775: LD_VAR 0 1
80779: PPUSH
80780: LD_VAR 0 5
80784: PPUSH
80785: LD_VAR 0 6
80789: PPUSH
80790: CALL_OW 272
80794: PPUSH
80795: LD_VAR 0 2
80799: PPUSH
80800: LD_VAR 0 5
80804: PPUSH
80805: LD_VAR 0 6
80809: PPUSH
80810: CALL_OW 273
80814: PPUSH
80815: LD_VAR 0 3
80819: PPUSH
80820: CALL_OW 309
80824: IFFALSE 80838
// begin result := true ;
80826: LD_ADDR_VAR 0 4
80830: PUSH
80831: LD_INT 1
80833: ST_TO_ADDR
// exit ;
80834: POP
80835: POP
80836: GO 80842
// end ;
80838: GO 80772
80840: POP
80841: POP
// end ;
80842: LD_VAR 0 4
80846: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
80847: LD_INT 0
80849: PPUSH
80850: PPUSH
80851: PPUSH
// if btype = b_depot then
80852: LD_VAR 0 2
80856: PUSH
80857: LD_INT 0
80859: EQUAL
80860: IFFALSE 80872
// begin result := true ;
80862: LD_ADDR_VAR 0 3
80866: PUSH
80867: LD_INT 1
80869: ST_TO_ADDR
// exit ;
80870: GO 80988
// end ; pom := GetBase ( depot ) ;
80872: LD_ADDR_VAR 0 4
80876: PUSH
80877: LD_VAR 0 1
80881: PPUSH
80882: CALL_OW 274
80886: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
80887: LD_ADDR_VAR 0 5
80891: PUSH
80892: LD_VAR 0 2
80896: PPUSH
80897: LD_VAR 0 1
80901: PPUSH
80902: CALL_OW 248
80906: PPUSH
80907: CALL_OW 450
80911: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
80912: LD_ADDR_VAR 0 3
80916: PUSH
80917: LD_VAR 0 4
80921: PPUSH
80922: LD_INT 1
80924: PPUSH
80925: CALL_OW 275
80929: PUSH
80930: LD_VAR 0 5
80934: PUSH
80935: LD_INT 1
80937: ARRAY
80938: GREATEREQUAL
80939: PUSH
80940: LD_VAR 0 4
80944: PPUSH
80945: LD_INT 2
80947: PPUSH
80948: CALL_OW 275
80952: PUSH
80953: LD_VAR 0 5
80957: PUSH
80958: LD_INT 2
80960: ARRAY
80961: GREATEREQUAL
80962: AND
80963: PUSH
80964: LD_VAR 0 4
80968: PPUSH
80969: LD_INT 3
80971: PPUSH
80972: CALL_OW 275
80976: PUSH
80977: LD_VAR 0 5
80981: PUSH
80982: LD_INT 3
80984: ARRAY
80985: GREATEREQUAL
80986: AND
80987: ST_TO_ADDR
// end ;
80988: LD_VAR 0 3
80992: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80993: LD_INT 0
80995: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80996: LD_VAR 0 1
81000: PPUSH
81001: LD_VAR 0 2
81005: PPUSH
81006: LD_INT 0
81008: PPUSH
81009: LD_INT 0
81011: PPUSH
81012: LD_INT 1
81014: PPUSH
81015: LD_INT 0
81017: PPUSH
81018: CALL_OW 587
// end ;
81022: LD_VAR 0 3
81026: RET
// export function CenterOnNow ( unit ) ; begin
81027: LD_INT 0
81029: PPUSH
// result := IsInUnit ( unit ) ;
81030: LD_ADDR_VAR 0 2
81034: PUSH
81035: LD_VAR 0 1
81039: PPUSH
81040: CALL_OW 310
81044: ST_TO_ADDR
// if not result then
81045: LD_VAR 0 2
81049: NOT
81050: IFFALSE 81062
// result := unit ;
81052: LD_ADDR_VAR 0 2
81056: PUSH
81057: LD_VAR 0 1
81061: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
81062: LD_VAR 0 1
81066: PPUSH
81067: CALL_OW 87
// end ;
81071: LD_VAR 0 2
81075: RET
// export function ComMoveHex ( unit , hex ) ; begin
81076: LD_INT 0
81078: PPUSH
// if not hex then
81079: LD_VAR 0 2
81083: NOT
81084: IFFALSE 81088
// exit ;
81086: GO 81141
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
81088: LD_VAR 0 2
81092: PUSH
81093: LD_INT 1
81095: ARRAY
81096: PPUSH
81097: LD_VAR 0 2
81101: PUSH
81102: LD_INT 2
81104: ARRAY
81105: PPUSH
81106: CALL_OW 428
81110: IFFALSE 81114
// exit ;
81112: GO 81141
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
81114: LD_VAR 0 1
81118: PPUSH
81119: LD_VAR 0 2
81123: PUSH
81124: LD_INT 1
81126: ARRAY
81127: PPUSH
81128: LD_VAR 0 2
81132: PUSH
81133: LD_INT 2
81135: ARRAY
81136: PPUSH
81137: CALL_OW 111
// end ;
81141: LD_VAR 0 3
81145: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
81146: LD_INT 0
81148: PPUSH
81149: PPUSH
81150: PPUSH
// if not unit or not enemy then
81151: LD_VAR 0 1
81155: NOT
81156: PUSH
81157: LD_VAR 0 2
81161: NOT
81162: OR
81163: IFFALSE 81167
// exit ;
81165: GO 81291
// x := GetX ( enemy ) ;
81167: LD_ADDR_VAR 0 4
81171: PUSH
81172: LD_VAR 0 2
81176: PPUSH
81177: CALL_OW 250
81181: ST_TO_ADDR
// y := GetY ( enemy ) ;
81182: LD_ADDR_VAR 0 5
81186: PUSH
81187: LD_VAR 0 2
81191: PPUSH
81192: CALL_OW 251
81196: ST_TO_ADDR
// if ValidHex ( x , y ) then
81197: LD_VAR 0 4
81201: PPUSH
81202: LD_VAR 0 5
81206: PPUSH
81207: CALL_OW 488
81211: IFFALSE 81291
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
81213: LD_VAR 0 2
81217: PPUSH
81218: CALL_OW 247
81222: PUSH
81223: LD_INT 3
81225: PUSH
81226: LD_INT 2
81228: PUSH
81229: EMPTY
81230: LIST
81231: LIST
81232: IN
81233: PUSH
81234: LD_VAR 0 1
81238: PPUSH
81239: CALL_OW 255
81243: PPUSH
81244: LD_VAR 0 2
81248: PPUSH
81249: CALL_OW 292
81253: OR
81254: IFFALSE 81272
// ComAttackUnit ( unit , enemy ) else
81256: LD_VAR 0 1
81260: PPUSH
81261: LD_VAR 0 2
81265: PPUSH
81266: CALL_OW 115
81270: GO 81291
// ComAgressiveMove ( unit , x , y ) ;
81272: LD_VAR 0 1
81276: PPUSH
81277: LD_VAR 0 4
81281: PPUSH
81282: LD_VAR 0 5
81286: PPUSH
81287: CALL_OW 114
// end ;
81291: LD_VAR 0 3
81295: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
81296: LD_INT 0
81298: PPUSH
81299: PPUSH
81300: PPUSH
// list := AreaToList ( area , 0 ) ;
81301: LD_ADDR_VAR 0 5
81305: PUSH
81306: LD_VAR 0 1
81310: PPUSH
81311: LD_INT 0
81313: PPUSH
81314: CALL_OW 517
81318: ST_TO_ADDR
// if not list then
81319: LD_VAR 0 5
81323: NOT
81324: IFFALSE 81328
// exit ;
81326: GO 81458
// if all then
81328: LD_VAR 0 2
81332: IFFALSE 81420
// begin for i := 1 to list [ 1 ] do
81334: LD_ADDR_VAR 0 4
81338: PUSH
81339: DOUBLE
81340: LD_INT 1
81342: DEC
81343: ST_TO_ADDR
81344: LD_VAR 0 5
81348: PUSH
81349: LD_INT 1
81351: ARRAY
81352: PUSH
81353: FOR_TO
81354: IFFALSE 81416
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
81356: LD_ADDR_VAR 0 3
81360: PUSH
81361: LD_VAR 0 3
81365: PPUSH
81366: LD_VAR 0 3
81370: PUSH
81371: LD_INT 1
81373: PLUS
81374: PPUSH
81375: LD_VAR 0 5
81379: PUSH
81380: LD_INT 1
81382: ARRAY
81383: PUSH
81384: LD_VAR 0 4
81388: ARRAY
81389: PUSH
81390: LD_VAR 0 5
81394: PUSH
81395: LD_INT 2
81397: ARRAY
81398: PUSH
81399: LD_VAR 0 4
81403: ARRAY
81404: PUSH
81405: EMPTY
81406: LIST
81407: LIST
81408: PPUSH
81409: CALL_OW 1
81413: ST_TO_ADDR
81414: GO 81353
81416: POP
81417: POP
// exit ;
81418: GO 81458
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
81420: LD_ADDR_VAR 0 3
81424: PUSH
81425: LD_VAR 0 5
81429: PUSH
81430: LD_INT 1
81432: ARRAY
81433: PUSH
81434: LD_INT 1
81436: ARRAY
81437: PUSH
81438: LD_VAR 0 5
81442: PUSH
81443: LD_INT 2
81445: ARRAY
81446: PUSH
81447: LD_INT 1
81449: ARRAY
81450: PUSH
81451: EMPTY
81452: LIST
81453: LIST
81454: PUSH
81455: EMPTY
81456: LIST
81457: ST_TO_ADDR
// end ;
81458: LD_VAR 0 3
81462: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
81463: LD_INT 0
81465: PPUSH
81466: PPUSH
// list := AreaToList ( area , 0 ) ;
81467: LD_ADDR_VAR 0 4
81471: PUSH
81472: LD_VAR 0 1
81476: PPUSH
81477: LD_INT 0
81479: PPUSH
81480: CALL_OW 517
81484: ST_TO_ADDR
// if not list then
81485: LD_VAR 0 4
81489: NOT
81490: IFFALSE 81494
// exit ;
81492: GO 81535
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
81494: LD_ADDR_VAR 0 3
81498: PUSH
81499: LD_VAR 0 4
81503: PUSH
81504: LD_INT 1
81506: ARRAY
81507: PUSH
81508: LD_INT 1
81510: ARRAY
81511: PUSH
81512: LD_VAR 0 4
81516: PUSH
81517: LD_INT 2
81519: ARRAY
81520: PUSH
81521: LD_INT 1
81523: ARRAY
81524: PUSH
81525: LD_VAR 0 2
81529: PUSH
81530: EMPTY
81531: LIST
81532: LIST
81533: LIST
81534: ST_TO_ADDR
// end ;
81535: LD_VAR 0 3
81539: RET
// export function First ( array ) ; begin
81540: LD_INT 0
81542: PPUSH
// if not array then
81543: LD_VAR 0 1
81547: NOT
81548: IFFALSE 81552
// exit ;
81550: GO 81566
// result := array [ 1 ] ;
81552: LD_ADDR_VAR 0 2
81556: PUSH
81557: LD_VAR 0 1
81561: PUSH
81562: LD_INT 1
81564: ARRAY
81565: ST_TO_ADDR
// end ;
81566: LD_VAR 0 2
81570: RET
// export function Last ( array ) ; begin
81571: LD_INT 0
81573: PPUSH
// if not array then
81574: LD_VAR 0 1
81578: NOT
81579: IFFALSE 81583
// exit ;
81581: GO 81599
// result := array [ array ] ;
81583: LD_ADDR_VAR 0 2
81587: PUSH
81588: LD_VAR 0 1
81592: PUSH
81593: LD_VAR 0 1
81597: ARRAY
81598: ST_TO_ADDR
// end ;
81599: LD_VAR 0 2
81603: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
81604: LD_INT 0
81606: PPUSH
81607: PPUSH
// result := [ ] ;
81608: LD_ADDR_VAR 0 5
81612: PUSH
81613: EMPTY
81614: ST_TO_ADDR
// if not array then
81615: LD_VAR 0 1
81619: NOT
81620: IFFALSE 81624
// exit ;
81622: GO 81736
// for i := 1 to array do
81624: LD_ADDR_VAR 0 6
81628: PUSH
81629: DOUBLE
81630: LD_INT 1
81632: DEC
81633: ST_TO_ADDR
81634: LD_VAR 0 1
81638: PUSH
81639: FOR_TO
81640: IFFALSE 81734
// if array [ i ] [ index ] = value then
81642: LD_VAR 0 1
81646: PUSH
81647: LD_VAR 0 6
81651: ARRAY
81652: PUSH
81653: LD_VAR 0 2
81657: ARRAY
81658: PUSH
81659: LD_VAR 0 3
81663: EQUAL
81664: IFFALSE 81732
// begin if indexColumn then
81666: LD_VAR 0 4
81670: IFFALSE 81706
// result := Join ( result , array [ i ] [ indexColumn ] ) else
81672: LD_ADDR_VAR 0 5
81676: PUSH
81677: LD_VAR 0 5
81681: PPUSH
81682: LD_VAR 0 1
81686: PUSH
81687: LD_VAR 0 6
81691: ARRAY
81692: PUSH
81693: LD_VAR 0 4
81697: ARRAY
81698: PPUSH
81699: CALL 76924 0 2
81703: ST_TO_ADDR
81704: GO 81732
// result := Join ( result , array [ i ] ) ;
81706: LD_ADDR_VAR 0 5
81710: PUSH
81711: LD_VAR 0 5
81715: PPUSH
81716: LD_VAR 0 1
81720: PUSH
81721: LD_VAR 0 6
81725: ARRAY
81726: PPUSH
81727: CALL 76924 0 2
81731: ST_TO_ADDR
// end ;
81732: GO 81639
81734: POP
81735: POP
// end ;
81736: LD_VAR 0 5
81740: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
81741: LD_INT 0
81743: PPUSH
// if not vehicles or not parkingPoint then
81744: LD_VAR 0 1
81748: NOT
81749: PUSH
81750: LD_VAR 0 2
81754: NOT
81755: OR
81756: IFFALSE 81760
// exit ;
81758: GO 81858
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
81760: LD_ADDR_VAR 0 1
81764: PUSH
81765: LD_VAR 0 1
81769: PPUSH
81770: LD_INT 50
81772: PUSH
81773: EMPTY
81774: LIST
81775: PUSH
81776: LD_INT 3
81778: PUSH
81779: LD_INT 92
81781: PUSH
81782: LD_VAR 0 2
81786: PUSH
81787: LD_INT 1
81789: ARRAY
81790: PUSH
81791: LD_VAR 0 2
81795: PUSH
81796: LD_INT 2
81798: ARRAY
81799: PUSH
81800: LD_INT 8
81802: PUSH
81803: EMPTY
81804: LIST
81805: LIST
81806: LIST
81807: LIST
81808: PUSH
81809: EMPTY
81810: LIST
81811: LIST
81812: PUSH
81813: EMPTY
81814: LIST
81815: LIST
81816: PPUSH
81817: CALL_OW 72
81821: ST_TO_ADDR
// if not vehicles then
81822: LD_VAR 0 1
81826: NOT
81827: IFFALSE 81831
// exit ;
81829: GO 81858
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
81831: LD_VAR 0 1
81835: PPUSH
81836: LD_VAR 0 2
81840: PUSH
81841: LD_INT 1
81843: ARRAY
81844: PPUSH
81845: LD_VAR 0 2
81849: PUSH
81850: LD_INT 2
81852: ARRAY
81853: PPUSH
81854: CALL_OW 111
// end ;
81858: LD_VAR 0 3
81862: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
81863: LD_INT 0
81865: PPUSH
81866: PPUSH
81867: PPUSH
// if not side or not area then
81868: LD_VAR 0 1
81872: NOT
81873: PUSH
81874: LD_VAR 0 2
81878: NOT
81879: OR
81880: IFFALSE 81884
// exit ;
81882: GO 82003
// tmp := AreaToList ( area , 0 ) ;
81884: LD_ADDR_VAR 0 5
81888: PUSH
81889: LD_VAR 0 2
81893: PPUSH
81894: LD_INT 0
81896: PPUSH
81897: CALL_OW 517
81901: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
81902: LD_ADDR_VAR 0 4
81906: PUSH
81907: DOUBLE
81908: LD_INT 1
81910: DEC
81911: ST_TO_ADDR
81912: LD_VAR 0 5
81916: PUSH
81917: LD_INT 1
81919: ARRAY
81920: PUSH
81921: FOR_TO
81922: IFFALSE 82001
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
81924: LD_VAR 0 5
81928: PUSH
81929: LD_INT 1
81931: ARRAY
81932: PUSH
81933: LD_VAR 0 4
81937: ARRAY
81938: PPUSH
81939: LD_VAR 0 5
81943: PUSH
81944: LD_INT 2
81946: ARRAY
81947: PUSH
81948: LD_VAR 0 4
81952: ARRAY
81953: PPUSH
81954: CALL_OW 351
81958: IFFALSE 81999
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
81960: LD_VAR 0 5
81964: PUSH
81965: LD_INT 1
81967: ARRAY
81968: PUSH
81969: LD_VAR 0 4
81973: ARRAY
81974: PPUSH
81975: LD_VAR 0 5
81979: PUSH
81980: LD_INT 2
81982: ARRAY
81983: PUSH
81984: LD_VAR 0 4
81988: ARRAY
81989: PPUSH
81990: LD_VAR 0 1
81994: PPUSH
81995: CALL_OW 244
// end ;
81999: GO 81921
82001: POP
82002: POP
// end ; end_of_file
82003: LD_VAR 0 3
82007: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
82008: LD_VAR 0 1
82012: PPUSH
82013: LD_VAR 0 2
82017: PPUSH
82018: LD_VAR 0 3
82022: PPUSH
82023: LD_VAR 0 4
82027: PPUSH
82028: LD_VAR 0 5
82032: PPUSH
82033: LD_VAR 0 6
82037: PPUSH
82038: CALL 17970 0 6
// end ;
82042: PPOPN 6
82044: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
82045: LD_INT 0
82047: PPUSH
// begin if not units then
82048: LD_VAR 0 1
82052: NOT
82053: IFFALSE 82057
// exit ;
82055: GO 82057
// end ;
82057: PPOPN 7
82059: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
82060: CALL 17857 0 0
// end ;
82064: PPOPN 1
82066: END
