// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// CreateNature ;
   8: CALL 841 0 0
// PrepareArabian ;
  12: CALL 1215 0 0
// PrepareAmerican ;
  16: CALL 6712 0 0
// PrepareRussian ;
  20: CALL 2171 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 8272 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 30 30$00 , 27 27$00 , 25 25$00 , 23 23$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 63000
 188: PUSH
 189: LD_INT 56700
 191: PUSH
 192: LD_INT 52500
 194: PUSH
 195: LD_INT 48300
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// escapeCounter := 0 ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// loseCounter := 0 ;
 218: LD_ADDR_EXP 14
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// labCaptured := false ;
 226: LD_ADDR_EXP 21
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// hillBase := false ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 242: LD_ADDR_EXP 8
 246: PUSH
 247: LD_INT 3
 249: PUSH
 250: LD_INT 4
 252: PUSH
 253: LD_INT 5
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 7
 261: PUSH
 262: LD_INT 8
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 273: LD_ADDR_EXP 23
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// kaganCaptured := false ;
 281: LD_ADDR_EXP 24
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// end ;
 289: LD_VAR 0 1
 293: RET
// every 0 0$1 trigger debug do var i ;
 294: LD_EXP 1
 298: IFFALSE 367
 300: GO 302
 302: DISABLE
 303: LD_INT 0
 305: PPUSH
// begin enable ;
 306: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 307: LD_ADDR_VAR 0 1
 311: PUSH
 312: LD_INT 22
 314: PUSH
 315: LD_INT 2
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 3
 324: PUSH
 325: LD_INT 21
 327: PUSH
 328: LD_INT 3
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PPUSH
 343: CALL_OW 69
 347: PUSH
 348: FOR_IN
 349: IFFALSE 365
// SetLives ( i , 1000 ) ;
 351: LD_VAR 0 1
 355: PPUSH
 356: LD_INT 1000
 358: PPUSH
 359: CALL_OW 234
 363: GO 348
 365: POP
 366: POP
// end ; end_of_file
 367: PPOPN 1
 369: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 370: LD_INT 0
 372: PPUSH
// uc_side := side ;
 373: LD_ADDR_OWVAR 20
 377: PUSH
 378: LD_VAR 0 1
 382: ST_TO_ADDR
// uc_nation := nation ;
 383: LD_ADDR_OWVAR 21
 387: PUSH
 388: LD_VAR 0 2
 392: ST_TO_ADDR
// vc_chassis := chassis ;
 393: LD_ADDR_OWVAR 37
 397: PUSH
 398: LD_VAR 0 3
 402: ST_TO_ADDR
// vc_engine := engine ;
 403: LD_ADDR_OWVAR 39
 407: PUSH
 408: LD_VAR 0 4
 412: ST_TO_ADDR
// vc_control := control ;
 413: LD_ADDR_OWVAR 38
 417: PUSH
 418: LD_VAR 0 5
 422: ST_TO_ADDR
// vc_weapon := weapon ;
 423: LD_ADDR_OWVAR 40
 427: PUSH
 428: LD_VAR 0 6
 432: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 433: LD_ADDR_OWVAR 41
 437: PUSH
 438: LD_VAR 0 7
 442: ST_TO_ADDR
// result := CreateVehicle ;
 443: LD_ADDR_VAR 0 8
 447: PUSH
 448: CALL_OW 45
 452: ST_TO_ADDR
// end ;
 453: LD_VAR 0 8
 457: RET
// export function SayX ( units , ident ) ; var i ; begin
 458: LD_INT 0
 460: PPUSH
 461: PPUSH
// result := false ;
 462: LD_ADDR_VAR 0 3
 466: PUSH
 467: LD_INT 0
 469: ST_TO_ADDR
// if not units then
 470: LD_VAR 0 1
 474: NOT
 475: IFFALSE 479
// exit ;
 477: GO 533
// for i in units do
 479: LD_ADDR_VAR 0 4
 483: PUSH
 484: LD_VAR 0 1
 488: PUSH
 489: FOR_IN
 490: IFFALSE 531
// if IsOk ( i ) then
 492: LD_VAR 0 4
 496: PPUSH
 497: CALL_OW 302
 501: IFFALSE 529
// begin Say ( i , ident ) ;
 503: LD_VAR 0 4
 507: PPUSH
 508: LD_VAR 0 2
 512: PPUSH
 513: CALL_OW 88
// result := i ;
 517: LD_ADDR_VAR 0 3
 521: PUSH
 522: LD_VAR 0 4
 526: ST_TO_ADDR
// break ;
 527: GO 531
// end ;
 529: GO 489
 531: POP
 532: POP
// end ;
 533: LD_VAR 0 3
 537: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 538: LD_INT 0
 540: PPUSH
 541: PPUSH
 542: PPUSH
// if not observer or not unit then
 543: LD_VAR 0 1
 547: NOT
 548: PUSH
 549: LD_VAR 0 2
 553: NOT
 554: OR
 555: IFFALSE 559
// exit ;
 557: GO 607
// if not See ( GetSide ( observer ) , unit ) then
 559: LD_VAR 0 1
 563: PPUSH
 564: CALL_OW 255
 568: PPUSH
 569: LD_VAR 0 2
 573: PPUSH
 574: CALL_OW 292
 578: NOT
 579: IFFALSE 583
// exit ;
 581: GO 607
// result := GetDistUnits ( observer , unit ) < 12 ;
 583: LD_ADDR_VAR 0 3
 587: PUSH
 588: LD_VAR 0 1
 592: PPUSH
 593: LD_VAR 0 2
 597: PPUSH
 598: CALL_OW 296
 602: PUSH
 603: LD_INT 12
 605: LESS
 606: ST_TO_ADDR
// end ;
 607: LD_VAR 0 3
 611: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 612: LD_INT 0
 614: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 615: LD_VAR 0 2
 619: PUSH
 620: LD_INT 1
 622: ARRAY
 623: PPUSH
 624: LD_VAR 0 2
 628: PUSH
 629: LD_INT 2
 631: ARRAY
 632: PPUSH
 633: CALL_OW 488
 637: PUSH
 638: LD_VAR 0 2
 642: PUSH
 643: LD_INT 1
 645: ARRAY
 646: PPUSH
 647: LD_VAR 0 2
 651: PUSH
 652: LD_INT 2
 654: ARRAY
 655: PPUSH
 656: CALL_OW 428
 660: PUSH
 661: LD_INT 0
 663: EQUAL
 664: AND
 665: IFFALSE 699
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 667: LD_VAR 0 1
 671: PPUSH
 672: LD_VAR 0 2
 676: PUSH
 677: LD_INT 1
 679: ARRAY
 680: PPUSH
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 2
 688: ARRAY
 689: PPUSH
 690: LD_VAR 0 3
 694: PPUSH
 695: CALL_OW 48
// end ;
 699: LD_VAR 0 4
 703: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 704: LD_INT 0
 706: PPUSH
 707: PPUSH
// InitUc ;
 708: CALL_OW 18
// InitHc ;
 712: CALL_OW 19
// uc_side := 0 ;
 716: LD_ADDR_OWVAR 20
 720: PUSH
 721: LD_INT 0
 723: ST_TO_ADDR
// uc_nation := 0 ;
 724: LD_ADDR_OWVAR 21
 728: PUSH
 729: LD_INT 0
 731: ST_TO_ADDR
// for i = 1 to amount do
 732: LD_ADDR_VAR 0 4
 736: PUSH
 737: DOUBLE
 738: LD_INT 1
 740: DEC
 741: ST_TO_ADDR
 742: LD_VAR 0 2
 746: PUSH
 747: FOR_TO
 748: IFFALSE 830
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 750: LD_ADDR_OWVAR 29
 754: PUSH
 755: LD_INT 9
 757: PPUSH
 758: LD_INT 12
 760: PPUSH
 761: CALL_OW 12
 765: PUSH
 766: LD_INT 9
 768: PPUSH
 769: LD_INT 12
 771: PPUSH
 772: CALL_OW 12
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 781: LD_ADDR_OWVAR 35
 785: PUSH
 786: LD_INT 1
 788: NEG
 789: PPUSH
 790: LD_INT 1
 792: PPUSH
 793: CALL_OW 12
 797: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 798: LD_INT 0
 800: PPUSH
 801: LD_INT 12
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 811: CALL_OW 44
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: LD_INT 0
 823: PPUSH
 824: CALL_OW 49
// end ;
 828: GO 747
 830: POP
 831: POP
// InitHc ;
 832: CALL_OW 19
// end ;
 836: LD_VAR 0 3
 840: RET
// export function CreateNature ; var i ; begin
 841: LD_INT 0
 843: PPUSH
 844: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 , 2 ] [ Difficulty ] ) ;
 845: LD_INT 18
 847: PPUSH
 848: LD_INT 5
 850: PUSH
 851: LD_INT 4
 853: PUSH
 854: LD_INT 3
 856: PUSH
 857: LD_INT 2
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: PUSH
 866: LD_OWVAR 67
 870: ARRAY
 871: PPUSH
 872: CALL 704 0 2
// for i := 1 to 3 do
 876: LD_ADDR_VAR 0 2
 880: PUSH
 881: DOUBLE
 882: LD_INT 1
 884: DEC
 885: ST_TO_ADDR
 886: LD_INT 3
 888: PUSH
 889: FOR_TO
 890: IFFALSE 925
// begin hc_class := 21 ;
 892: LD_ADDR_OWVAR 28
 896: PUSH
 897: LD_INT 21
 899: ST_TO_ADDR
// hc_gallery :=  ;
 900: LD_ADDR_OWVAR 33
 904: PUSH
 905: LD_STRING 
 907: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 908: CALL_OW 44
 912: PPUSH
 913: LD_INT 18
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 49
// end ;
 923: GO 889
 925: POP
 926: POP
// for i := 1 to 2 do
 927: LD_ADDR_VAR 0 2
 931: PUSH
 932: DOUBLE
 933: LD_INT 1
 935: DEC
 936: ST_TO_ADDR
 937: LD_INT 2
 939: PUSH
 940: FOR_TO
 941: IFFALSE 976
// begin hc_class := 18 ;
 943: LD_ADDR_OWVAR 28
 947: PUSH
 948: LD_INT 18
 950: ST_TO_ADDR
// hc_gallery :=  ;
 951: LD_ADDR_OWVAR 33
 955: PUSH
 956: LD_STRING 
 958: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 959: CALL_OW 44
 963: PPUSH
 964: LD_INT 18
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 49
// end ;
 974: GO 940
 976: POP
 977: POP
// for i := 1 to 2 do
 978: LD_ADDR_VAR 0 2
 982: PUSH
 983: DOUBLE
 984: LD_INT 1
 986: DEC
 987: ST_TO_ADDR
 988: LD_INT 2
 990: PUSH
 991: FOR_TO
 992: IFFALSE 1027
// begin hc_class := 13 ;
 994: LD_ADDR_OWVAR 28
 998: PUSH
 999: LD_INT 13
1001: ST_TO_ADDR
// hc_gallery :=  ;
1002: LD_ADDR_OWVAR 33
1006: PUSH
1007: LD_STRING 
1009: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1010: CALL_OW 44
1014: PPUSH
1015: LD_INT 18
1017: PPUSH
1018: LD_INT 0
1020: PPUSH
1021: CALL_OW 49
// end ;
1025: GO 991
1027: POP
1028: POP
// end ;
1029: LD_VAR 0 1
1033: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1034: LD_INT 0
1036: PPUSH
1037: PPUSH
1038: PPUSH
1039: PPUSH
1040: PPUSH
// result := false ;
1041: LD_ADDR_VAR 0 4
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// if not sideList or not enemySide then
1049: LD_VAR 0 1
1053: NOT
1054: PUSH
1055: LD_VAR 0 2
1059: NOT
1060: OR
1061: IFFALSE 1065
// exit ;
1063: GO 1210
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1065: LD_ADDR_VAR 0 7
1069: PUSH
1070: LD_INT 22
1072: PUSH
1073: LD_VAR 0 2
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PPUSH
1082: CALL_OW 69
1086: ST_TO_ADDR
// if not tmp then
1087: LD_VAR 0 7
1091: NOT
1092: IFFALSE 1096
// exit ;
1094: GO 1210
// for s in sideList do
1096: LD_ADDR_VAR 0 6
1100: PUSH
1101: LD_VAR 0 1
1105: PUSH
1106: FOR_IN
1107: IFFALSE 1208
// for i in tmp do
1109: LD_ADDR_VAR 0 5
1113: PUSH
1114: LD_VAR 0 7
1118: PUSH
1119: FOR_IN
1120: IFFALSE 1204
// if See ( s , i ) then
1122: LD_VAR 0 6
1126: PPUSH
1127: LD_VAR 0 5
1131: PPUSH
1132: CALL_OW 292
1136: IFFALSE 1202
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
1138: LD_ADDR_VAR 0 8
1142: PUSH
1143: LD_INT 22
1145: PUSH
1146: LD_VAR 0 6
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: PPUSH
1155: CALL_OW 69
1159: PPUSH
1160: LD_VAR 0 5
1164: PPUSH
1165: CALL_OW 74
1169: ST_TO_ADDR
// if tmp2 in exceptUnits then
1170: LD_VAR 0 8
1174: PUSH
1175: LD_VAR 0 3
1179: IN
1180: IFFALSE 1186
// continue else
1182: GO 1119
1184: GO 1202
// begin result := tmp2 ;
1186: LD_ADDR_VAR 0 4
1190: PUSH
1191: LD_VAR 0 8
1195: ST_TO_ADDR
// exit ;
1196: POP
1197: POP
1198: POP
1199: POP
1200: GO 1210
// end ; end ;
1202: GO 1119
1204: POP
1205: POP
1206: GO 1106
1208: POP
1209: POP
// end ; end_of_file
1210: LD_VAR 0 4
1214: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1215: LD_INT 0
1217: PPUSH
1218: PPUSH
// uc_side := 5 ;
1219: LD_ADDR_OWVAR 20
1223: PUSH
1224: LD_INT 5
1226: ST_TO_ADDR
// uc_nation := 2 ;
1227: LD_ADDR_OWVAR 21
1231: PUSH
1232: LD_INT 2
1234: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1235: LD_ADDR_EXP 36
1239: PUSH
1240: LD_STRING Abdul
1242: PPUSH
1243: LD_INT 0
1245: PPUSH
1246: LD_STRING 
1248: PPUSH
1249: CALL 37910 0 3
1253: ST_TO_ADDR
// uc_side := 2 ;
1254: LD_ADDR_OWVAR 20
1258: PUSH
1259: LD_INT 2
1261: ST_TO_ADDR
// uc_nation := 2 ;
1262: LD_ADDR_OWVAR 21
1266: PUSH
1267: LD_INT 2
1269: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1270: LD_ADDR_EXP 25
1274: PUSH
1275: LD_STRING Heike
1277: PPUSH
1278: LD_EXP 1
1282: NOT
1283: PPUSH
1284: LD_EXP 2
1288: PPUSH
1289: CALL 37910 0 3
1293: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1294: LD_ADDR_EXP 28
1298: PUSH
1299: LD_STRING Ibrahim
1301: PPUSH
1302: LD_EXP 1
1306: NOT
1307: PPUSH
1308: LD_EXP 2
1312: PPUSH
1313: CALL 37910 0 3
1317: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1318: LD_ADDR_EXP 26
1322: PUSH
1323: LD_STRING Givi
1325: PPUSH
1326: LD_EXP 1
1330: NOT
1331: PPUSH
1332: LD_EXP 2
1336: PPUSH
1337: CALL 37910 0 3
1341: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1342: LD_ADDR_EXP 29
1346: PUSH
1347: LD_STRING Kamil
1349: PPUSH
1350: LD_EXP 1
1354: NOT
1355: PPUSH
1356: LD_EXP 2
1360: PPUSH
1361: CALL 37910 0 3
1365: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1366: LD_ADDR_EXP 30
1370: PUSH
1371: LD_STRING Kaia
1373: PPUSH
1374: LD_EXP 1
1378: NOT
1379: PPUSH
1380: LD_EXP 2
1384: PPUSH
1385: CALL 37910 0 3
1389: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1390: LD_ADDR_EXP 31
1394: PUSH
1395: LD_STRING Sophia
1397: PPUSH
1398: LD_EXP 1
1402: NOT
1403: PPUSH
1404: LD_EXP 2
1408: PPUSH
1409: CALL 37910 0 3
1413: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1414: LD_ADDR_EXP 32
1418: PUSH
1419: LD_STRING Markov
1421: PPUSH
1422: LD_EXP 1
1426: NOT
1427: PPUSH
1428: LD_EXP 2
1432: PPUSH
1433: CALL 37910 0 3
1437: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1438: LD_ADDR_EXP 35
1442: PUSH
1443: LD_STRING Aviradze
1445: PPUSH
1446: LD_EXP 1
1450: NOT
1451: PPUSH
1452: LD_EXP 2
1456: PPUSH
1457: CALL 37910 0 3
1461: ST_TO_ADDR
// aviradzeSquad := [ ] ;
1462: LD_ADDR_EXP 39
1466: PUSH
1467: EMPTY
1468: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
1469: LD_ADDR_EXP 37
1473: PUSH
1474: LD_STRING 03_others
1476: PPUSH
1477: CALL_OW 31
1481: ST_TO_ADDR
// uc_side := 5 ;
1482: LD_ADDR_OWVAR 20
1486: PUSH
1487: LD_INT 5
1489: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
1490: LD_ADDR_EXP 34
1494: PUSH
1495: LD_STRING Kurt
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: LD_STRING 
1503: PPUSH
1504: CALL 37910 0 3
1508: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1509: LD_ADDR_EXP 27
1513: PUSH
1514: LD_STRING Mike
1516: PPUSH
1517: LD_EXP 1
1521: NOT
1522: PPUSH
1523: LD_EXP 2
1527: PPUSH
1528: CALL 37910 0 3
1532: ST_TO_ADDR
// if Mike then
1533: LD_EXP 27
1537: IFFALSE 1560
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
1539: LD_EXP 27
1543: PPUSH
1544: LD_INT 142
1546: PPUSH
1547: LD_INT 63
1549: PPUSH
1550: LD_INT 2
1552: PPUSH
1553: LD_INT 0
1555: PPUSH
1556: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
1560: LD_EXP 34
1564: PPUSH
1565: LD_INT 142
1567: PPUSH
1568: LD_INT 63
1570: PPUSH
1571: LD_INT 3
1573: PPUSH
1574: LD_INT 0
1576: PPUSH
1577: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
1581: LD_EXP 34
1585: PUSH
1586: LD_EXP 27
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 140
// end ;
1599: LD_VAR 0 1
1603: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
1604: LD_INT 0
1606: PPUSH
1607: PPUSH
1608: PPUSH
1609: PPUSH
// uc_side := 5 ;
1610: LD_ADDR_OWVAR 20
1614: PUSH
1615: LD_INT 5
1617: ST_TO_ADDR
// uc_nation := 2 ;
1618: LD_ADDR_OWVAR 21
1622: PUSH
1623: LD_INT 2
1625: ST_TO_ADDR
// InitHc ;
1626: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
1630: LD_ADDR_EXP 33
1634: PUSH
1635: LD_STRING Omar
1637: PPUSH
1638: LD_INT 0
1640: PPUSH
1641: LD_STRING 
1643: PPUSH
1644: CALL 37910 0 3
1648: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
1649: LD_EXP 33
1653: PPUSH
1654: LD_INT 284
1656: PPUSH
1657: LD_INT 163
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
1667: LD_EXP 33
1671: PPUSH
1672: LD_INT 256
1674: PPUSH
1675: LD_INT 129
1677: PPUSH
1678: CALL_OW 111
// wait ( 0 0$2 ) ;
1682: LD_INT 70
1684: PPUSH
1685: CALL_OW 67
// omarSquad := [ ] ;
1689: LD_ADDR_EXP 38
1693: PUSH
1694: EMPTY
1695: ST_TO_ADDR
// for i := 1 to 5 do
1696: LD_ADDR_VAR 0 2
1700: PUSH
1701: DOUBLE
1702: LD_INT 1
1704: DEC
1705: ST_TO_ADDR
1706: LD_INT 5
1708: PUSH
1709: FOR_TO
1710: IFFALSE 1916
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1712: LD_INT 5
1714: PPUSH
1715: LD_INT 2
1717: PPUSH
1718: LD_INT 13
1720: PUSH
1721: LD_INT 14
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: LD_VAR 0 2
1732: PUSH
1733: LD_INT 2
1735: MOD
1736: PUSH
1737: LD_INT 1
1739: PLUS
1740: ARRAY
1741: PPUSH
1742: LD_INT 1
1744: PPUSH
1745: LD_INT 1
1747: PPUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 27
1753: PUSH
1754: LD_INT 26
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: LIST
1761: PUSH
1762: LD_VAR 0 2
1766: PUSH
1767: LD_INT 3
1769: MOD
1770: PUSH
1771: LD_INT 1
1773: PLUS
1774: ARRAY
1775: PPUSH
1776: LD_INT 100
1778: PPUSH
1779: CALL 370 0 7
// veh := CreateVehicle ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: CALL_OW 45
1792: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1793: LD_VAR 0 4
1797: PPUSH
1798: LD_INT 5
1800: PPUSH
1801: CALL_OW 233
// omarSquad := omarSquad union veh ;
1805: LD_ADDR_EXP 38
1809: PUSH
1810: LD_EXP 38
1814: PUSH
1815: LD_VAR 0 4
1819: UNION
1820: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
1821: LD_VAR 0 4
1825: PPUSH
1826: LD_INT 284
1828: PPUSH
1829: LD_INT 163
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
1839: LD_INT 0
1841: PPUSH
1842: LD_INT 3
1844: PPUSH
1845: LD_INT 2
1847: PPUSH
1848: CALL_OW 380
// un := CreateHuman ;
1852: LD_ADDR_VAR 0 3
1856: PUSH
1857: CALL_OW 44
1861: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1862: LD_ADDR_EXP 38
1866: PUSH
1867: LD_EXP 38
1871: PUSH
1872: LD_VAR 0 3
1876: UNION
1877: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1878: LD_VAR 0 3
1882: PPUSH
1883: LD_VAR 0 4
1887: PPUSH
1888: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
1892: LD_VAR 0 3
1896: PPUSH
1897: LD_INT 271
1899: PPUSH
1900: LD_INT 144
1902: PPUSH
1903: CALL_OW 111
// wait ( 0 0$2 ) ;
1907: LD_INT 70
1909: PPUSH
1910: CALL_OW 67
// end ;
1914: GO 1709
1916: POP
1917: POP
// for i := 1 to 3 do
1918: LD_ADDR_VAR 0 2
1922: PUSH
1923: DOUBLE
1924: LD_INT 1
1926: DEC
1927: ST_TO_ADDR
1928: LD_INT 3
1930: PUSH
1931: FOR_TO
1932: IFFALSE 2015
// begin PrepareHuman ( false , 1 , 2 ) ;
1934: LD_INT 0
1936: PPUSH
1937: LD_INT 1
1939: PPUSH
1940: LD_INT 2
1942: PPUSH
1943: CALL_OW 380
// un := CreateHuman ;
1947: LD_ADDR_VAR 0 3
1951: PUSH
1952: CALL_OW 44
1956: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1957: LD_ADDR_EXP 38
1961: PUSH
1962: LD_EXP 38
1966: PUSH
1967: LD_VAR 0 3
1971: UNION
1972: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
1973: LD_VAR 0 3
1977: PPUSH
1978: LD_INT 284
1980: PPUSH
1981: LD_INT 163
1983: PPUSH
1984: LD_INT 0
1986: PPUSH
1987: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
1991: LD_VAR 0 3
1995: PPUSH
1996: LD_INT 257
1998: PPUSH
1999: LD_INT 138
2001: PPUSH
2002: CALL_OW 111
// wait ( 0 0$1 ) ;
2006: LD_INT 35
2008: PPUSH
2009: CALL_OW 67
// end ;
2013: GO 1931
2015: POP
2016: POP
// for i := 1 to 6 do
2017: LD_ADDR_VAR 0 2
2021: PUSH
2022: DOUBLE
2023: LD_INT 1
2025: DEC
2026: ST_TO_ADDR
2027: LD_INT 6
2029: PUSH
2030: FOR_TO
2031: IFFALSE 2164
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2033: LD_INT 0
2035: PPUSH
2036: LD_INT 1
2038: PUSH
2039: LD_INT 1
2041: PUSH
2042: LD_INT 4
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: PUSH
2050: LD_VAR 0 2
2054: PUSH
2055: LD_INT 3
2057: MOD
2058: PUSH
2059: LD_INT 1
2061: PLUS
2062: ARRAY
2063: PPUSH
2064: LD_INT 3
2066: PPUSH
2067: CALL_OW 380
// un := CreateHuman ;
2071: LD_ADDR_VAR 0 3
2075: PUSH
2076: CALL_OW 44
2080: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2081: LD_ADDR_EXP 38
2085: PUSH
2086: LD_EXP 38
2090: PUSH
2091: LD_VAR 0 3
2095: UNION
2096: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2097: LD_VAR 0 3
2101: PPUSH
2102: LD_INT 225
2104: PPUSH
2105: LD_INT 163
2107: PPUSH
2108: LD_INT 0
2110: PPUSH
2111: CALL_OW 48
// if i = 1 then
2115: LD_VAR 0 2
2119: PUSH
2120: LD_INT 1
2122: EQUAL
2123: IFFALSE 2140
// SetAttr ( un , attr_speed , 12 ) ;
2125: LD_VAR 0 3
2129: PPUSH
2130: LD_INT 2
2132: PPUSH
2133: LD_INT 12
2135: PPUSH
2136: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2140: LD_VAR 0 3
2144: PPUSH
2145: LD_INT 222
2147: PPUSH
2148: LD_INT 157
2150: PPUSH
2151: CALL_OW 111
// wait ( 0 0$1 ) ;
2155: LD_INT 35
2157: PPUSH
2158: CALL_OW 67
// end ;
2162: GO 2030
2164: POP
2165: POP
// end ; end_of_file
2166: LD_VAR 0 1
2170: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2171: LD_INT 0
2173: PPUSH
2174: PPUSH
2175: PPUSH
2176: PPUSH
2177: PPUSH
2178: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
2179: LD_INT 3
2181: PPUSH
2182: LD_INT 149
2184: PPUSH
2185: LD_INT 67
2187: PPUSH
2188: CALL_OW 428
2192: PPUSH
2193: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
2197: LD_ADDR_EXP 50
2201: PUSH
2202: LD_INT 111
2204: PPUSH
2205: LD_INT 89
2207: PPUSH
2208: CALL_OW 428
2212: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2213: LD_ADDR_VAR 0 2
2217: PUSH
2218: LD_INT 21
2220: PUSH
2221: LD_INT 3
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: PUSH
2228: LD_INT 23
2230: PUSH
2231: LD_INT 3
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PPUSH
2242: CALL_OW 69
2246: PUSH
2247: FOR_IN
2248: IFFALSE 2264
// SetBLevel ( i , 5 ) ;
2250: LD_VAR 0 2
2254: PPUSH
2255: LD_INT 5
2257: PPUSH
2258: CALL_OW 241
2262: GO 2247
2264: POP
2265: POP
// SetBName ( kirov , kirov ) ;
2266: LD_INT 71
2268: PPUSH
2269: LD_STRING kirov
2271: PPUSH
2272: CALL_OW 500
// SetBName ( beria , beria ) ;
2276: LD_INT 106
2278: PPUSH
2279: LD_STRING beria
2281: PPUSH
2282: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2286: LD_INT 112
2288: PPUSH
2289: LD_STRING kagan
2291: PPUSH
2292: CALL_OW 500
// uc_side := 6 ;
2296: LD_ADDR_OWVAR 20
2300: PUSH
2301: LD_INT 6
2303: ST_TO_ADDR
// uc_nation := 3 ;
2304: LD_ADDR_OWVAR 21
2308: PUSH
2309: LD_INT 3
2311: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2312: LD_ADDR_VAR 0 5
2316: PUSH
2317: LD_INT 22
2319: PUSH
2320: LD_INT 6
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PUSH
2327: LD_INT 30
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: PPUSH
2341: CALL_OW 69
2345: PUSH
2346: LD_INT 1
2348: ARRAY
2349: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
2350: LD_ADDR_VAR 0 4
2354: PUSH
2355: LD_INT 22
2357: PUSH
2358: LD_INT 6
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: PUSH
2365: LD_INT 30
2367: PUSH
2368: LD_INT 4
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: PPUSH
2379: CALL_OW 69
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
2388: LD_ADDR_EXP 44
2392: PUSH
2393: EMPTY
2394: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
2395: LD_ADDR_EXP 45
2399: PUSH
2400: EMPTY
2401: ST_TO_ADDR
// russianPatrol := [ ] ;
2402: LD_ADDR_EXP 47
2406: PUSH
2407: EMPTY
2408: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
2409: LD_ADDR_EXP 40
2413: PUSH
2414: LD_STRING Kurin
2416: PPUSH
2417: LD_INT 0
2419: PPUSH
2420: LD_STRING 
2422: PPUSH
2423: CALL 37910 0 3
2427: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
2428: LD_EXP 40
2432: PPUSH
2433: LD_INT 71
2435: PPUSH
2436: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
2440: LD_ADDR_EXP 42
2444: PUSH
2445: LD_STRING Popov
2447: PPUSH
2448: LD_INT 0
2450: PPUSH
2451: LD_STRING 
2453: PPUSH
2454: CALL 37910 0 3
2458: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
2459: LD_EXP 42
2463: PPUSH
2464: LD_INT 71
2466: PPUSH
2467: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
2471: LD_ADDR_EXP 41
2475: PUSH
2476: LD_STRING Grishko
2478: PPUSH
2479: LD_INT 0
2481: PPUSH
2482: LD_STRING 
2484: PPUSH
2485: CALL 37910 0 3
2489: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
2490: LD_EXP 41
2494: PPUSH
2495: LD_INT 207
2497: PPUSH
2498: LD_INT 106
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
2508: LD_EXP 41
2512: PPUSH
2513: LD_INT 209
2515: PPUSH
2516: LD_INT 106
2518: PPUSH
2519: CALL_OW 118
// for i := 1 to 2 do
2523: LD_ADDR_VAR 0 2
2527: PUSH
2528: DOUBLE
2529: LD_INT 1
2531: DEC
2532: ST_TO_ADDR
2533: LD_INT 2
2535: PUSH
2536: FOR_TO
2537: IFFALSE 2592
// begin PrepareHuman ( false , 2 , 2 ) ;
2539: LD_INT 0
2541: PPUSH
2542: LD_INT 2
2544: PPUSH
2545: LD_INT 2
2547: PPUSH
2548: CALL_OW 380
// un := CreateHuman ;
2552: LD_ADDR_VAR 0 3
2556: PUSH
2557: CALL_OW 44
2561: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2562: LD_VAR 0 3
2566: PPUSH
2567: LD_INT 71
2569: PPUSH
2570: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2574: LD_ADDR_EXP 44
2578: PUSH
2579: LD_EXP 44
2583: PUSH
2584: LD_VAR 0 3
2588: UNION
2589: ST_TO_ADDR
// end ;
2590: GO 2536
2592: POP
2593: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2594: LD_ADDR_VAR 0 2
2598: PUSH
2599: DOUBLE
2600: LD_INT 1
2602: DEC
2603: ST_TO_ADDR
2604: LD_INT 5
2606: PUSH
2607: LD_INT 6
2609: PUSH
2610: LD_INT 6
2612: PUSH
2613: LD_INT 6
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: PUSH
2622: LD_OWVAR 67
2626: ARRAY
2627: PUSH
2628: FOR_TO
2629: IFFALSE 2707
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
2631: LD_INT 0
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_INT 2
2639: PUSH
2640: LD_INT 3
2642: PUSH
2643: LD_INT 4
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: LIST
2654: PUSH
2655: LD_OWVAR 67
2659: ARRAY
2660: PPUSH
2661: CALL_OW 380
// un := CreateHuman ;
2665: LD_ADDR_VAR 0 3
2669: PUSH
2670: CALL_OW 44
2674: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
2675: LD_VAR 0 3
2679: PPUSH
2680: LD_VAR 0 5
2684: PPUSH
2685: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2689: LD_ADDR_EXP 44
2693: PUSH
2694: LD_EXP 44
2698: PUSH
2699: LD_VAR 0 3
2703: UNION
2704: ST_TO_ADDR
// end ;
2705: GO 2628
2707: POP
2708: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
2709: LD_ADDR_VAR 0 2
2713: PUSH
2714: LD_INT 22
2716: PUSH
2717: LD_INT 6
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: PUSH
2724: LD_INT 30
2726: PUSH
2727: LD_INT 32
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: PPUSH
2738: CALL_OW 69
2742: PUSH
2743: FOR_IN
2744: IFFALSE 2822
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
2746: LD_INT 0
2748: PPUSH
2749: LD_INT 1
2751: PPUSH
2752: LD_INT 3
2754: PUSH
2755: LD_INT 4
2757: PUSH
2758: LD_INT 4
2760: PUSH
2761: LD_INT 5
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: LIST
2768: LIST
2769: PUSH
2770: LD_OWVAR 67
2774: ARRAY
2775: PPUSH
2776: CALL_OW 380
// un := CreateHuman ;
2780: LD_ADDR_VAR 0 3
2784: PUSH
2785: CALL_OW 44
2789: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2790: LD_VAR 0 3
2794: PPUSH
2795: LD_VAR 0 2
2799: PPUSH
2800: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2804: LD_ADDR_EXP 44
2808: PUSH
2809: LD_EXP 44
2813: PUSH
2814: LD_VAR 0 3
2818: UNION
2819: ST_TO_ADDR
// end ;
2820: GO 2743
2822: POP
2823: POP
// for i := 1 to 3 do
2824: LD_ADDR_VAR 0 2
2828: PUSH
2829: DOUBLE
2830: LD_INT 1
2832: DEC
2833: ST_TO_ADDR
2834: LD_INT 3
2836: PUSH
2837: FOR_TO
2838: IFFALSE 2893
// begin PrepareHuman ( false , 3 , 3 ) ;
2840: LD_INT 0
2842: PPUSH
2843: LD_INT 3
2845: PPUSH
2846: LD_INT 3
2848: PPUSH
2849: CALL_OW 380
// un := CreateHuman ;
2853: LD_ADDR_VAR 0 3
2857: PUSH
2858: CALL_OW 44
2862: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
2863: LD_VAR 0 3
2867: PPUSH
2868: LD_INT 92
2870: PPUSH
2871: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2875: LD_ADDR_EXP 44
2879: PUSH
2880: LD_EXP 44
2884: PUSH
2885: LD_VAR 0 3
2889: UNION
2890: ST_TO_ADDR
// end ;
2891: GO 2837
2893: POP
2894: POP
// for i := 1 to 2 do
2895: LD_ADDR_VAR 0 2
2899: PUSH
2900: DOUBLE
2901: LD_INT 1
2903: DEC
2904: ST_TO_ADDR
2905: LD_INT 2
2907: PUSH
2908: FOR_TO
2909: IFFALSE 2964
// begin PrepareHuman ( false , 4 , 3 ) ;
2911: LD_INT 0
2913: PPUSH
2914: LD_INT 4
2916: PPUSH
2917: LD_INT 3
2919: PPUSH
2920: CALL_OW 380
// un := CreateHuman ;
2924: LD_ADDR_VAR 0 3
2928: PUSH
2929: CALL_OW 44
2933: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2934: LD_VAR 0 3
2938: PPUSH
2939: LD_INT 83
2941: PPUSH
2942: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2946: LD_ADDR_EXP 44
2950: PUSH
2951: LD_EXP 44
2955: PUSH
2956: LD_VAR 0 3
2960: UNION
2961: ST_TO_ADDR
// end ;
2962: GO 2908
2964: POP
2965: POP
// for i := 1 to 5 do
2966: LD_ADDR_VAR 0 2
2970: PUSH
2971: DOUBLE
2972: LD_INT 1
2974: DEC
2975: ST_TO_ADDR
2976: LD_INT 5
2978: PUSH
2979: FOR_TO
2980: IFFALSE 3037
// begin PrepareHuman ( false , 1 , 3 ) ;
2982: LD_INT 0
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 3
2990: PPUSH
2991: CALL_OW 380
// un := CreateHuman ;
2995: LD_ADDR_VAR 0 3
2999: PUSH
3000: CALL_OW 44
3004: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3005: LD_VAR 0 3
3009: PPUSH
3010: LD_VAR 0 4
3014: PPUSH
3015: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3019: LD_ADDR_EXP 46
3023: PUSH
3024: LD_EXP 46
3028: PUSH
3029: LD_VAR 0 3
3033: UNION
3034: ST_TO_ADDR
// end ;
3035: GO 2979
3037: POP
3038: POP
// russianCargo := [ ] ;
3039: LD_ADDR_EXP 49
3043: PUSH
3044: EMPTY
3045: ST_TO_ADDR
// for i := 1 to 2 do
3046: LD_ADDR_VAR 0 2
3050: PUSH
3051: DOUBLE
3052: LD_INT 1
3054: DEC
3055: ST_TO_ADDR
3056: LD_INT 2
3058: PUSH
3059: FOR_TO
3060: IFFALSE 3192
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3062: LD_INT 6
3064: PPUSH
3065: LD_INT 3
3067: PPUSH
3068: LD_INT 21
3070: PPUSH
3071: LD_INT 1
3073: PPUSH
3074: LD_INT 1
3076: PPUSH
3077: LD_INT 51
3079: PPUSH
3080: LD_INT 100
3082: PPUSH
3083: CALL 370 0 7
// un := CreateVehicle ;
3087: LD_ADDR_VAR 0 3
3091: PUSH
3092: CALL_OW 45
3096: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3097: LD_ADDR_EXP 49
3101: PUSH
3102: LD_EXP 49
3106: PUSH
3107: LD_VAR 0 3
3111: UNION
3112: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3113: LD_VAR 0 3
3117: PPUSH
3118: LD_INT 2
3120: PPUSH
3121: LD_INT 100
3123: PPUSH
3124: CALL_OW 290
// SetDir ( un , 4 ) ;
3128: LD_VAR 0 3
3132: PPUSH
3133: LD_INT 4
3135: PPUSH
3136: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3140: LD_VAR 0 3
3144: PPUSH
3145: LD_INT 147
3147: PPUSH
3148: LD_INT 103
3150: PPUSH
3151: LD_INT 4
3153: PPUSH
3154: LD_INT 0
3156: PPUSH
3157: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3161: LD_INT 0
3163: PPUSH
3164: LD_INT 1
3166: PPUSH
3167: LD_OWVAR 67
3171: PPUSH
3172: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3176: CALL_OW 44
3180: PPUSH
3181: LD_VAR 0 3
3185: PPUSH
3186: CALL_OW 52
// end ;
3190: GO 3059
3192: POP
3193: POP
// uc_side := 3 ;
3194: LD_ADDR_OWVAR 20
3198: PUSH
3199: LD_INT 3
3201: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3202: LD_ADDR_EXP 43
3206: PUSH
3207: LD_STRING Burlak
3209: PPUSH
3210: LD_INT 0
3212: PPUSH
3213: LD_STRING 
3215: PPUSH
3216: CALL 37910 0 3
3220: ST_TO_ADDR
// for i := 1 to 5 do
3221: LD_ADDR_VAR 0 2
3225: PUSH
3226: DOUBLE
3227: LD_INT 1
3229: DEC
3230: ST_TO_ADDR
3231: LD_INT 5
3233: PUSH
3234: FOR_TO
3235: IFFALSE 3328
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3237: LD_INT 0
3239: PPUSH
3240: LD_INT 1
3242: PPUSH
3243: LD_OWVAR 67
3247: PUSH
3248: LD_INT 1
3250: PLUS
3251: PPUSH
3252: CALL_OW 380
// un := CreateHuman ;
3256: LD_ADDR_VAR 0 3
3260: PUSH
3261: CALL_OW 44
3265: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3266: LD_VAR 0 3
3270: PPUSH
3271: LD_INT 22
3273: PUSH
3274: LD_INT 3
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 30
3283: PUSH
3284: LD_INT 32
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PPUSH
3295: CALL_OW 69
3299: PUSH
3300: LD_VAR 0 2
3304: ARRAY
3305: PPUSH
3306: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3310: LD_ADDR_EXP 45
3314: PUSH
3315: LD_EXP 45
3319: PUSH
3320: LD_VAR 0 3
3324: UNION
3325: ST_TO_ADDR
// end ;
3326: GO 3234
3328: POP
3329: POP
// for i := 1 to 2 do
3330: LD_ADDR_VAR 0 2
3334: PUSH
3335: DOUBLE
3336: LD_INT 1
3338: DEC
3339: ST_TO_ADDR
3340: LD_INT 2
3342: PUSH
3343: FOR_TO
3344: IFFALSE 3435
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3346: LD_INT 0
3348: PPUSH
3349: LD_INT 1
3351: PPUSH
3352: LD_OWVAR 67
3356: PUSH
3357: LD_INT 1
3359: PLUS
3360: PPUSH
3361: CALL_OW 380
// un := CreateHuman ;
3365: LD_ADDR_VAR 0 3
3369: PUSH
3370: CALL_OW 44
3374: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3375: LD_VAR 0 3
3379: PPUSH
3380: LD_INT 22
3382: PUSH
3383: LD_INT 3
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: PUSH
3390: LD_INT 30
3392: PUSH
3393: LD_INT 5
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PPUSH
3404: CALL_OW 69
3408: PUSH
3409: LD_INT 1
3411: ARRAY
3412: PPUSH
3413: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3417: LD_ADDR_EXP 45
3421: PUSH
3422: LD_EXP 45
3426: PUSH
3427: LD_VAR 0 3
3431: UNION
3432: ST_TO_ADDR
// end ;
3433: GO 3343
3435: POP
3436: POP
// for i := 1 to 2 do
3437: LD_ADDR_VAR 0 2
3441: PUSH
3442: DOUBLE
3443: LD_INT 1
3445: DEC
3446: ST_TO_ADDR
3447: LD_INT 2
3449: PUSH
3450: FOR_TO
3451: IFFALSE 3538
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3453: LD_INT 0
3455: PPUSH
3456: LD_INT 4
3458: PPUSH
3459: LD_OWVAR 67
3463: PPUSH
3464: CALL_OW 380
// un := CreateHuman ;
3468: LD_ADDR_VAR 0 3
3472: PUSH
3473: CALL_OW 44
3477: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
3478: LD_VAR 0 3
3482: PPUSH
3483: LD_INT 22
3485: PUSH
3486: LD_INT 3
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 30
3495: PUSH
3496: LD_INT 7
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PPUSH
3507: CALL_OW 69
3511: PUSH
3512: LD_INT 1
3514: ARRAY
3515: PPUSH
3516: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3520: LD_ADDR_EXP 45
3524: PUSH
3525: LD_EXP 45
3529: PUSH
3530: LD_VAR 0 3
3534: UNION
3535: ST_TO_ADDR
// end ;
3536: GO 3450
3538: POP
3539: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
3540: LD_INT 0
3542: PPUSH
3543: LD_INT 2
3545: PPUSH
3546: LD_OWVAR 67
3550: PPUSH
3551: CALL_OW 380
// un := CreateHuman ;
3555: LD_ADDR_VAR 0 3
3559: PUSH
3560: CALL_OW 44
3564: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
3565: LD_VAR 0 3
3569: PPUSH
3570: LD_INT 106
3572: PPUSH
3573: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3577: LD_ADDR_EXP 45
3581: PUSH
3582: LD_EXP 45
3586: PUSH
3587: LD_VAR 0 3
3591: UNION
3592: ST_TO_ADDR
// for i := 1 to 3 do
3593: LD_ADDR_VAR 0 2
3597: PUSH
3598: DOUBLE
3599: LD_INT 1
3601: DEC
3602: ST_TO_ADDR
3603: LD_INT 3
3605: PUSH
3606: FOR_TO
3607: IFFALSE 3729
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
3609: LD_ADDR_VAR 0 6
3613: PUSH
3614: LD_INT 22
3616: PUSH
3617: LD_INT 3
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: PUSH
3624: LD_INT 30
3626: PUSH
3627: LD_INT 31
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: PUSH
3634: EMPTY
3635: LIST
3636: LIST
3637: PPUSH
3638: CALL_OW 69
3642: PUSH
3643: LD_VAR 0 2
3647: ARRAY
3648: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
3649: LD_INT 0
3651: PPUSH
3652: LD_INT 1
3654: PPUSH
3655: LD_OWVAR 67
3659: PPUSH
3660: CALL_OW 380
// un := CreateHuman ;
3664: LD_ADDR_VAR 0 3
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
3674: LD_VAR 0 3
3678: PPUSH
3679: LD_VAR 0 6
3683: PPUSH
3684: CALL_OW 254
3688: PUSH
3689: LD_INT 3
3691: PLUS
3692: PPUSH
3693: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
3697: LD_VAR 0 3
3701: PPUSH
3702: LD_VAR 0 6
3706: PPUSH
3707: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3711: LD_ADDR_EXP 45
3715: PUSH
3716: LD_EXP 45
3720: PUSH
3721: LD_VAR 0 3
3725: UNION
3726: ST_TO_ADDR
// end ;
3727: GO 3606
3729: POP
3730: POP
// if Difficulty > 1 then
3731: LD_OWVAR 67
3735: PUSH
3736: LD_INT 1
3738: GREATER
3739: IFFALSE 3814
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
3741: LD_ADDR_VAR 0 3
3745: PUSH
3746: LD_INT 3
3748: PPUSH
3749: LD_INT 3
3751: PPUSH
3752: LD_INT 23
3754: PPUSH
3755: LD_INT 1
3757: PPUSH
3758: LD_INT 1
3760: PPUSH
3761: LD_INT 44
3763: PPUSH
3764: LD_INT 100
3766: PPUSH
3767: CALL 370 0 7
3771: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
3772: LD_VAR 0 3
3776: PPUSH
3777: LD_INT 73
3779: PPUSH
3780: LD_INT 110
3782: PPUSH
3783: LD_INT 0
3785: PPUSH
3786: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
3790: LD_INT 0
3792: PPUSH
3793: LD_INT 3
3795: PPUSH
3796: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
3800: CALL_OW 44
3804: PPUSH
3805: LD_VAR 0 3
3809: PPUSH
3810: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
3814: LD_ADDR_EXP 48
3818: PUSH
3819: EMPTY
3820: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 , 8 ] [ Difficulty ] do
3821: LD_ADDR_VAR 0 2
3825: PUSH
3826: DOUBLE
3827: LD_INT 1
3829: DEC
3830: ST_TO_ADDR
3831: LD_INT 6
3833: PUSH
3834: LD_INT 7
3836: PUSH
3837: LD_INT 8
3839: PUSH
3840: LD_INT 8
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: LD_OWVAR 67
3853: ARRAY
3854: PUSH
3855: FOR_TO
3856: IFFALSE 4080
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
3858: LD_INT 3
3860: PPUSH
3861: LD_INT 3
3863: PPUSH
3864: LD_INT 21
3866: PUSH
3867: LD_INT 23
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: LD_VAR 0 2
3878: PUSH
3879: LD_INT 2
3881: MOD
3882: PUSH
3883: LD_INT 1
3885: PLUS
3886: ARRAY
3887: PPUSH
3888: LD_INT 1
3890: PPUSH
3891: LD_INT 1
3893: PPUSH
3894: LD_INT 43
3896: PUSH
3897: LD_INT 44
3899: PUSH
3900: LD_INT 42
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: LIST
3907: PUSH
3908: LD_VAR 0 2
3912: PUSH
3913: LD_INT 3
3915: MOD
3916: PUSH
3917: LD_INT 1
3919: PLUS
3920: ARRAY
3921: PPUSH
3922: LD_INT 100
3924: PPUSH
3925: CALL 370 0 7
// un := CreateVehicle ;
3929: LD_ADDR_VAR 0 3
3933: PUSH
3934: CALL_OW 45
3938: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
3939: LD_VAR 0 3
3943: PPUSH
3944: LD_INT 0
3946: PUSH
3947: LD_INT 5
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: PUSH
3954: LD_INT 1
3956: PPUSH
3957: LD_INT 2
3959: PPUSH
3960: CALL_OW 12
3964: ARRAY
3965: PPUSH
3966: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
3970: LD_ADDR_EXP 48
3974: PUSH
3975: LD_EXP 48
3979: PUSH
3980: LD_VAR 0 3
3984: UNION
3985: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
3986: LD_VAR 0 3
3990: PPUSH
3991: LD_INT 127
3993: PPUSH
3994: LD_INT 89
3996: PPUSH
3997: LD_INT 7
3999: PPUSH
4000: LD_INT 0
4002: PPUSH
4003: CALL_OW 50
// uc_side := 3 ;
4007: LD_ADDR_OWVAR 20
4011: PUSH
4012: LD_INT 3
4014: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4015: LD_INT 0
4017: PPUSH
4018: LD_INT 3
4020: PPUSH
4021: LD_INT 3
4023: PPUSH
4024: CALL_OW 380
// un := CreateHuman ;
4028: LD_ADDR_VAR 0 3
4032: PUSH
4033: CALL_OW 44
4037: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4038: LD_ADDR_EXP 48
4042: PUSH
4043: LD_EXP 48
4047: PUSH
4048: LD_VAR 0 3
4052: UNION
4053: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4054: LD_VAR 0 3
4058: PPUSH
4059: LD_EXP 48
4063: PUSH
4064: LD_EXP 48
4068: PUSH
4069: LD_INT 1
4071: MINUS
4072: ARRAY
4073: PPUSH
4074: CALL_OW 52
// end ;
4078: GO 3855
4080: POP
4081: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
4082: LD_ADDR_VAR 0 2
4086: PUSH
4087: DOUBLE
4088: LD_INT 1
4090: DEC
4091: ST_TO_ADDR
4092: LD_INT 3
4094: PUSH
4095: LD_INT 4
4097: PUSH
4098: LD_INT 5
4100: PUSH
4101: LD_INT 6
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: PUSH
4110: LD_OWVAR 67
4114: ARRAY
4115: PUSH
4116: FOR_TO
4117: IFFALSE 4183
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4119: LD_INT 0
4121: PPUSH
4122: LD_INT 1
4124: PPUSH
4125: LD_OWVAR 67
4129: PPUSH
4130: CALL_OW 380
// un := CreateHuman ;
4134: LD_ADDR_VAR 0 3
4138: PUSH
4139: CALL_OW 44
4143: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4144: LD_ADDR_EXP 48
4148: PUSH
4149: LD_EXP 48
4153: PUSH
4154: LD_VAR 0 3
4158: UNION
4159: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4160: LD_VAR 0 3
4164: PPUSH
4165: LD_INT 91
4167: PPUSH
4168: LD_INT 60
4170: PPUSH
4171: LD_INT 3
4173: PPUSH
4174: LD_INT 0
4176: PPUSH
4177: CALL_OW 50
// end ;
4181: GO 4116
4183: POP
4184: POP
// end ;
4185: LD_VAR 0 1
4189: RET
// every 0 0$3 do var i ;
4190: GO 4192
4192: DISABLE
4193: LD_INT 0
4195: PPUSH
// begin for i := 1 to 4 do
4196: LD_ADDR_VAR 0 1
4200: PUSH
4201: DOUBLE
4202: LD_INT 1
4204: DEC
4205: ST_TO_ADDR
4206: LD_INT 4
4208: PUSH
4209: FOR_TO
4210: IFFALSE 4229
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4212: LD_EXP 46
4216: PUSH
4217: LD_VAR 0 1
4221: ARRAY
4222: PPUSH
4223: CALL_OW 122
4227: GO 4209
4229: POP
4230: POP
// wait ( 3 ) ;
4231: LD_INT 3
4233: PPUSH
4234: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4238: LD_EXP 46
4242: PUSH
4243: LD_INT 1
4245: ARRAY
4246: PPUSH
4247: LD_INT 22
4249: PUSH
4250: LD_INT 6
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: LD_INT 30
4259: PUSH
4260: LD_INT 31
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: PPUSH
4271: CALL_OW 69
4275: PPUSH
4276: LD_EXP 46
4280: PUSH
4281: LD_INT 1
4283: ARRAY
4284: PPUSH
4285: CALL_OW 74
4289: PPUSH
4290: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4294: LD_EXP 46
4298: PUSH
4299: LD_INT 2
4301: ARRAY
4302: PPUSH
4303: LD_INT 211
4305: PPUSH
4306: LD_INT 107
4308: PPUSH
4309: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4313: LD_EXP 46
4317: PUSH
4318: LD_INT 2
4320: ARRAY
4321: PPUSH
4322: LD_INT 209
4324: PPUSH
4325: LD_INT 106
4327: PPUSH
4328: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4332: LD_EXP 46
4336: PUSH
4337: LD_INT 3
4339: ARRAY
4340: PPUSH
4341: LD_INT 209
4343: PPUSH
4344: LD_INT 103
4346: PPUSH
4347: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4351: LD_EXP 46
4355: PUSH
4356: LD_INT 3
4358: ARRAY
4359: PPUSH
4360: LD_INT 209
4362: PPUSH
4363: LD_INT 106
4365: PPUSH
4366: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4370: LD_EXP 46
4374: PUSH
4375: LD_INT 4
4377: ARRAY
4378: PPUSH
4379: LD_INT 227
4381: PPUSH
4382: LD_INT 117
4384: PPUSH
4385: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4389: LD_EXP 46
4393: PUSH
4394: LD_INT 4
4396: ARRAY
4397: PPUSH
4398: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4402: LD_INT 700
4404: PPUSH
4405: CALL_OW 67
// for i := 3 downto 2 do
4409: LD_ADDR_VAR 0 1
4413: PUSH
4414: DOUBLE
4415: LD_INT 3
4417: INC
4418: ST_TO_ADDR
4419: LD_INT 2
4421: PUSH
4422: FOR_DOWNTO
4423: IFFALSE 4590
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4425: LD_EXP 46
4429: PUSH
4430: LD_VAR 0 1
4434: ARRAY
4435: PPUSH
4436: LD_INT 200
4438: PPUSH
4439: LD_INT 91
4441: PPUSH
4442: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4446: LD_EXP 46
4450: PUSH
4451: LD_VAR 0 1
4455: ARRAY
4456: PPUSH
4457: LD_INT 210
4459: PPUSH
4460: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4464: LD_EXP 46
4468: PUSH
4469: LD_VAR 0 1
4473: ARRAY
4474: PPUSH
4475: LD_INT 224
4477: PPUSH
4478: LD_INT 93
4480: PPUSH
4481: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4485: LD_EXP 46
4489: PUSH
4490: LD_VAR 0 1
4494: ARRAY
4495: PPUSH
4496: LD_INT 210
4498: PPUSH
4499: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4503: LD_EXP 46
4507: PUSH
4508: LD_VAR 0 1
4512: ARRAY
4513: PPUSH
4514: LD_INT 239
4516: PPUSH
4517: LD_INT 123
4519: PPUSH
4520: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4524: LD_EXP 46
4528: PUSH
4529: LD_VAR 0 1
4533: ARRAY
4534: PPUSH
4535: LD_INT 210
4537: PPUSH
4538: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4542: LD_EXP 46
4546: PUSH
4547: LD_VAR 0 1
4551: ARRAY
4552: PPUSH
4553: LD_INT 212
4555: PPUSH
4556: LD_INT 105
4558: PPUSH
4559: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4563: LD_EXP 46
4567: PUSH
4568: LD_VAR 0 1
4572: ARRAY
4573: PPUSH
4574: LD_INT 700
4576: PPUSH
4577: CALL_OW 202
// wait ( 0 0$30 ) ;
4581: LD_INT 1050
4583: PPUSH
4584: CALL_OW 67
// end ;
4588: GO 4422
4590: POP
4591: POP
// until not activeGrishkoAI ;
4592: LD_EXP 10
4596: NOT
4597: IFFALSE 4402
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
4599: LD_EXP 46
4603: PPUSH
4604: LD_INT 221
4606: PPUSH
4607: LD_INT 110
4609: PPUSH
4610: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
4614: LD_EXP 46
4618: PPUSH
4619: LD_INT 228
4621: PPUSH
4622: LD_INT 115
4624: PPUSH
4625: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
4629: LD_EXP 46
4633: PPUSH
4634: CALL_OW 200
// end ;
4638: PPOPN 1
4640: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
4641: LD_EXP 12
4645: IFFALSE 5391
4647: GO 4649
4649: DISABLE
4650: LD_INT 0
4652: PPUSH
4653: PPUSH
4654: PPUSH
4655: PPUSH
// begin uc_side := 6 ;
4656: LD_ADDR_OWVAR 20
4660: PUSH
4661: LD_INT 6
4663: ST_TO_ADDR
// uc_nation := 3 ;
4664: LD_ADDR_OWVAR 21
4668: PUSH
4669: LD_INT 3
4671: ST_TO_ADDR
// for i := 1 to 3 do
4672: LD_ADDR_VAR 0 2
4676: PUSH
4677: DOUBLE
4678: LD_INT 1
4680: DEC
4681: ST_TO_ADDR
4682: LD_INT 3
4684: PUSH
4685: FOR_TO
4686: IFFALSE 4799
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
4688: LD_INT 0
4690: PPUSH
4691: LD_INT 1
4693: PPUSH
4694: LD_INT 2
4696: PUSH
4697: LD_INT 3
4699: PUSH
4700: LD_INT 4
4702: PUSH
4703: LD_INT 4
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: PUSH
4712: LD_OWVAR 67
4716: ARRAY
4717: PPUSH
4718: CALL_OW 380
// un := CreateHuman ;
4722: LD_ADDR_VAR 0 1
4726: PUSH
4727: CALL_OW 44
4731: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
4732: LD_ADDR_EXP 47
4736: PUSH
4737: LD_EXP 47
4741: PUSH
4742: LD_VAR 0 1
4746: UNION
4747: ST_TO_ADDR
// SetTag ( un , 1 ) ;
4748: LD_VAR 0 1
4752: PPUSH
4753: LD_INT 1
4755: PPUSH
4756: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
4760: LD_VAR 0 1
4764: PPUSH
4765: LD_INT 11
4767: PPUSH
4768: LD_INT 0
4770: PPUSH
4771: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
4775: LD_VAR 0 1
4779: PPUSH
4780: LD_INT 210
4782: PPUSH
4783: LD_INT 159
4785: PPUSH
4786: CALL_OW 111
// wait ( 0 0$2 ) ;
4790: LD_INT 70
4792: PPUSH
4793: CALL_OW 67
// end ;
4797: GO 4685
4799: POP
4800: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
4801: LD_ADDR_VAR 0 4
4805: PUSH
4806: LD_INT 172
4808: PUSH
4809: LD_INT 76
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 150
4818: PUSH
4819: LD_INT 38
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: LD_INT 148
4828: PUSH
4829: LD_INT 9
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 165
4838: PUSH
4839: LD_INT 38
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: PUSH
4852: LD_INT 191
4854: PUSH
4855: LD_INT 77
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 168
4864: PUSH
4865: LD_INT 42
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: PUSH
4872: LD_INT 166
4874: PUSH
4875: LD_INT 11
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PUSH
4882: LD_INT 151
4884: PUSH
4885: LD_INT 12
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: PUSH
4898: LD_INT 221
4900: PUSH
4901: LD_INT 88
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 217
4910: PUSH
4911: LD_INT 64
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 232
4920: PUSH
4921: LD_INT 66
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: LD_INT 200
4930: PUSH
4931: LD_INT 56
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: LIST
4948: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4949: LD_INT 35
4951: PPUSH
4952: CALL_OW 67
// for i := russianPatrol downto 1 do
4956: LD_ADDR_VAR 0 2
4960: PUSH
4961: DOUBLE
4962: LD_EXP 47
4966: INC
4967: ST_TO_ADDR
4968: LD_INT 1
4970: PUSH
4971: FOR_DOWNTO
4972: IFFALSE 5355
// begin if IsDead ( russianPatrol [ i ] ) then
4974: LD_EXP 47
4978: PUSH
4979: LD_VAR 0 2
4983: ARRAY
4984: PPUSH
4985: CALL_OW 301
4989: IFFALSE 4993
// continue ;
4991: GO 4971
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
4993: LD_EXP 47
4997: PUSH
4998: LD_VAR 0 2
5002: ARRAY
5003: PPUSH
5004: CALL_OW 256
5008: PUSH
5009: LD_INT 990
5011: LESS
5012: PUSH
5013: LD_EXP 47
5017: PUSH
5018: LD_VAR 0 2
5022: ARRAY
5023: PPUSH
5024: CALL_OW 110
5028: PUSH
5029: LD_INT 1
5031: EQUAL
5032: AND
5033: IFFALSE 5053
// SetTag ( russianPatrol [ i ] , 2 ) ;
5035: LD_EXP 47
5039: PUSH
5040: LD_VAR 0 2
5044: ARRAY
5045: PPUSH
5046: LD_INT 2
5048: PPUSH
5049: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5053: LD_EXP 47
5057: PUSH
5058: LD_VAR 0 2
5062: ARRAY
5063: PPUSH
5064: CALL_OW 110
5068: PUSH
5069: LD_INT 2
5071: EQUAL
5072: IFFALSE 5139
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5074: LD_EXP 47
5078: PUSH
5079: LD_VAR 0 2
5083: ARRAY
5084: PPUSH
5085: LD_INT 166
5087: PPUSH
5088: LD_INT 101
5090: PPUSH
5091: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5095: LD_EXP 47
5099: PUSH
5100: LD_VAR 0 2
5104: ARRAY
5105: PPUSH
5106: LD_INT 71
5108: PPUSH
5109: CALL_OW 296
5113: PUSH
5114: LD_INT 10
5116: LESS
5117: IFFALSE 5137
// SetTag ( russianPatrol [ i ] , 3 ) ;
5119: LD_EXP 47
5123: PUSH
5124: LD_VAR 0 2
5128: ARRAY
5129: PPUSH
5130: LD_INT 3
5132: PPUSH
5133: CALL_OW 109
// continue ;
5137: GO 4971
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5139: LD_EXP 47
5143: PUSH
5144: LD_VAR 0 2
5148: ARRAY
5149: PPUSH
5150: CALL_OW 110
5154: PUSH
5155: LD_INT 3
5157: EQUAL
5158: IFFALSE 5253
// begin spottedByPatrol := true ;
5160: LD_ADDR_EXP 7
5164: PUSH
5165: LD_INT 1
5167: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5168: LD_EXP 47
5172: PUSH
5173: LD_VAR 0 2
5177: ARRAY
5178: PPUSH
5179: CALL_OW 250
5183: PPUSH
5184: LD_EXP 47
5188: PUSH
5189: LD_VAR 0 2
5193: ARRAY
5194: PPUSH
5195: CALL_OW 251
5199: PPUSH
5200: LD_INT 2
5202: PPUSH
5203: LD_INT 6
5205: NEG
5206: PPUSH
5207: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
5211: LD_EXP 47
5215: PUSH
5216: LD_VAR 0 2
5220: ARRAY
5221: PPUSH
5222: CALL_OW 87
// DialogueOn ;
5226: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
5230: LD_EXP 25
5234: PPUSH
5235: LD_STRING DH-Spot-f-3
5237: PPUSH
5238: CALL_OW 88
// DialogueOff ;
5242: CALL_OW 7
// YouLost ( Spotted ) ;
5246: LD_STRING Spotted
5248: PPUSH
5249: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
5253: LD_EXP 47
5257: PUSH
5258: LD_VAR 0 2
5262: ARRAY
5263: PPUSH
5264: CALL_OW 314
5268: NOT
5269: IFFALSE 5353
// for j in patrol [ i ] do
5271: LD_ADDR_VAR 0 3
5275: PUSH
5276: LD_VAR 0 4
5280: PUSH
5281: LD_VAR 0 2
5285: ARRAY
5286: PUSH
5287: FOR_IN
5288: IFFALSE 5351
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5290: LD_EXP 47
5294: PUSH
5295: LD_VAR 0 2
5299: ARRAY
5300: PPUSH
5301: LD_INT 35
5303: PPUSH
5304: LD_INT 175
5306: PPUSH
5307: CALL_OW 12
5311: PPUSH
5312: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5316: LD_EXP 47
5320: PUSH
5321: LD_VAR 0 2
5325: ARRAY
5326: PPUSH
5327: LD_VAR 0 3
5331: PUSH
5332: LD_INT 1
5334: ARRAY
5335: PPUSH
5336: LD_VAR 0 3
5340: PUSH
5341: LD_INT 2
5343: ARRAY
5344: PPUSH
5345: CALL_OW 174
// end ;
5349: GO 5287
5351: POP
5352: POP
// end ;
5353: GO 4971
5355: POP
5356: POP
// until not russianPatrol or russianAlert ;
5357: LD_EXP 47
5361: NOT
5362: PUSH
5363: LD_EXP 9
5367: OR
5368: IFFALSE 4949
// if russianPatrol then
5370: LD_EXP 47
5374: IFFALSE 5391
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5376: LD_EXP 47
5380: PPUSH
5381: LD_INT 161
5383: PPUSH
5384: LD_INT 107
5386: PPUSH
5387: CALL_OW 114
// end ;
5391: PPOPN 4
5393: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5394: LD_EXP 6
5398: PUSH
5399: LD_EXP 13
5403: NOT
5404: AND
5405: IFFALSE 5891
5407: GO 5409
5409: DISABLE
5410: LD_INT 0
5412: PPUSH
5413: PPUSH
5414: PPUSH
5415: PPUSH
5416: PPUSH
// begin enable ;
5417: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5418: LD_ADDR_VAR 0 2
5422: PUSH
5423: LD_EXP 48
5427: PPUSH
5428: LD_INT 21
5430: PUSH
5431: LD_INT 2
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PPUSH
5438: CALL_OW 72
5442: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5443: LD_ADDR_VAR 0 4
5447: PUSH
5448: LD_INT 22
5450: PUSH
5451: LD_INT 4
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PPUSH
5458: CALL_OW 69
5462: ST_TO_ADDR
// for i in filter do
5463: LD_ADDR_VAR 0 1
5467: PUSH
5468: LD_VAR 0 2
5472: PUSH
5473: FOR_IN
5474: IFFALSE 5889
// begin tmp := IsDrivenBy ( i ) ;
5476: LD_ADDR_VAR 0 3
5480: PUSH
5481: LD_VAR 0 1
5485: PPUSH
5486: CALL_OW 311
5490: ST_TO_ADDR
// if not tmp then
5491: LD_VAR 0 3
5495: NOT
5496: IFFALSE 5500
// continue ;
5498: GO 5473
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5500: LD_VAR 0 1
5504: PPUSH
5505: CALL_OW 261
5509: PUSH
5510: LD_INT 90
5512: GREATER
5513: PUSH
5514: LD_VAR 0 1
5518: PPUSH
5519: CALL_OW 110
5523: PUSH
5524: LD_INT 2
5526: EQUAL
5527: AND
5528: IFFALSE 5544
// SetTag ( i , 0 ) else
5530: LD_VAR 0 1
5534: PPUSH
5535: LD_INT 0
5537: PPUSH
5538: CALL_OW 109
5542: GO 5640
// if GetTag ( i ) = 2 then
5544: LD_VAR 0 1
5548: PPUSH
5549: CALL_OW 110
5553: PUSH
5554: LD_INT 2
5556: EQUAL
5557: IFFALSE 5640
// begin x := rand ( 1 , 2 ) ;
5559: LD_ADDR_VAR 0 5
5563: PUSH
5564: LD_INT 1
5566: PPUSH
5567: LD_INT 2
5569: PPUSH
5570: CALL_OW 12
5574: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5575: LD_VAR 0 1
5579: PPUSH
5580: LD_EXP 49
5584: PUSH
5585: LD_VAR 0 5
5589: ARRAY
5590: PPUSH
5591: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
5595: LD_EXP 49
5599: PUSH
5600: LD_VAR 0 5
5604: ARRAY
5605: PPUSH
5606: LD_INT 2
5608: PPUSH
5609: CALL_OW 289
5613: PUSH
5614: LD_INT 20
5616: LESS
5617: IFFALSE 5640
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
5619: LD_EXP 49
5623: PUSH
5624: LD_VAR 0 5
5628: ARRAY
5629: PPUSH
5630: LD_INT 2
5632: PPUSH
5633: LD_INT 100
5635: PPUSH
5636: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5640: LD_VAR 0 1
5644: PPUSH
5645: CALL_OW 256
5649: PUSH
5650: LD_INT 600
5652: GREATEREQUAL
5653: PUSH
5654: LD_VAR 0 1
5658: PPUSH
5659: CALL_OW 110
5663: NOT
5664: AND
5665: IFFALSE 5691
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5667: LD_VAR 0 1
5671: PPUSH
5672: LD_VAR 0 4
5676: PPUSH
5677: LD_VAR 0 1
5681: PPUSH
5682: CALL_OW 74
5686: PPUSH
5687: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5691: LD_VAR 0 1
5695: PPUSH
5696: CALL_OW 256
5700: PUSH
5701: LD_INT 600
5703: LESS
5704: PUSH
5705: LD_VAR 0 1
5709: PPUSH
5710: CALL_OW 110
5714: NOT
5715: AND
5716: IFFALSE 5745
// begin SetTag ( i , 1 ) ;
5718: LD_VAR 0 1
5722: PPUSH
5723: LD_INT 1
5725: PPUSH
5726: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5730: LD_VAR 0 1
5734: PPUSH
5735: LD_INT 62
5737: PPUSH
5738: LD_INT 22
5740: PPUSH
5741: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5745: LD_VAR 0 1
5749: PPUSH
5750: CALL_OW 110
5754: PUSH
5755: LD_INT 1
5757: EQUAL
5758: PUSH
5759: LD_VAR 0 1
5763: PPUSH
5764: LD_INT 62
5766: PPUSH
5767: LD_INT 22
5769: PPUSH
5770: CALL_OW 297
5774: PUSH
5775: LD_INT 6
5777: LESS
5778: AND
5779: PUSH
5780: LD_VAR 0 3
5784: AND
5785: IFFALSE 5887
// begin ComExitVehicle ( tmp ) ;
5787: LD_VAR 0 3
5791: PPUSH
5792: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
5796: LD_VAR 0 3
5800: PPUSH
5801: LD_VAR 0 1
5805: PPUSH
5806: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5810: LD_INT 35
5812: PPUSH
5813: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5817: LD_VAR 0 1
5821: PPUSH
5822: CALL_OW 256
5826: PUSH
5827: LD_INT 1000
5829: EQUAL
5830: IFFALSE 5810
// ComEnterUnit ( tmp , i ) ;
5832: LD_VAR 0 3
5836: PPUSH
5837: LD_VAR 0 1
5841: PPUSH
5842: CALL_OW 120
// if GetFuel ( i ) <= 90 then
5846: LD_VAR 0 1
5850: PPUSH
5851: CALL_OW 261
5855: PUSH
5856: LD_INT 90
5858: LESSEQUAL
5859: IFFALSE 5875
// SetTag ( i , 2 ) else
5861: LD_VAR 0 1
5865: PPUSH
5866: LD_INT 2
5868: PPUSH
5869: CALL_OW 109
5873: GO 5887
// SetTag ( i , 0 ) ;
5875: LD_VAR 0 1
5879: PPUSH
5880: LD_INT 0
5882: PPUSH
5883: CALL_OW 109
// end ; end ;
5887: GO 5473
5889: POP
5890: POP
// end ;
5891: PPOPN 5
5893: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
5894: LD_EXP 20
5898: IFFALSE 6121
5900: GO 5902
5902: DISABLE
5903: LD_INT 0
5905: PPUSH
5906: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
5907: LD_EXP 49
5911: PPUSH
5912: LD_INT 79
5914: PPUSH
5915: LD_INT 155
5917: PPUSH
5918: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
5922: LD_EXP 49
5926: PPUSH
5927: LD_INT 16
5929: PPUSH
5930: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5934: LD_ADDR_VAR 0 2
5938: PUSH
5939: LD_EXP 48
5943: PPUSH
5944: LD_INT 50
5946: PUSH
5947: EMPTY
5948: LIST
5949: PPUSH
5950: CALL_OW 72
5954: ST_TO_ADDR
// for i in tmp do
5955: LD_ADDR_VAR 0 1
5959: PUSH
5960: LD_VAR 0 2
5964: PUSH
5965: FOR_IN
5966: IFFALSE 6000
// begin ComAgressiveMove ( i , 123 , 60 ) ;
5968: LD_VAR 0 1
5972: PPUSH
5973: LD_INT 123
5975: PPUSH
5976: LD_INT 60
5978: PPUSH
5979: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
5983: LD_VAR 0 1
5987: PPUSH
5988: LD_INT 153
5990: PPUSH
5991: LD_INT 103
5993: PPUSH
5994: CALL_OW 174
// end ;
5998: GO 5965
6000: POP
6001: POP
// repeat wait ( 0 0$1 ) ;
6002: LD_INT 35
6004: PPUSH
6005: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6009: LD_ADDR_VAR 0 2
6013: PUSH
6014: LD_EXP 48
6018: PPUSH
6019: LD_INT 50
6021: PUSH
6022: EMPTY
6023: LIST
6024: PPUSH
6025: CALL_OW 72
6029: ST_TO_ADDR
// for i in tmp do
6030: LD_ADDR_VAR 0 1
6034: PUSH
6035: LD_VAR 0 2
6039: PUSH
6040: FOR_IN
6041: IFFALSE 6112
// if not HasTask ( i ) then
6043: LD_VAR 0 1
6047: PPUSH
6048: CALL_OW 314
6052: NOT
6053: IFFALSE 6110
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
6055: LD_VAR 0 1
6059: PPUSH
6060: LD_INT 81
6062: PUSH
6063: LD_INT 3
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: PUSH
6070: LD_INT 3
6072: PUSH
6073: LD_INT 21
6075: PUSH
6076: LD_INT 3
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: PPUSH
6091: CALL_OW 69
6095: PPUSH
6096: LD_VAR 0 1
6100: PPUSH
6101: CALL_OW 74
6105: PPUSH
6106: CALL_OW 115
6110: GO 6040
6112: POP
6113: POP
6114: LD_VAR 0 2
6118: NOT
6119: IFFALSE 6002
// end ;
6121: PPOPN 2
6123: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6124: LD_INT 22
6126: PUSH
6127: LD_INT 3
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: PUSH
6134: LD_INT 32
6136: PUSH
6137: LD_INT 1
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PPUSH
6148: CALL_OW 69
6152: IFFALSE 6231
6154: GO 6156
6156: DISABLE
6157: LD_INT 0
6159: PPUSH
// begin enable ;
6160: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6161: LD_ADDR_VAR 0 1
6165: PUSH
6166: LD_INT 22
6168: PUSH
6169: LD_INT 3
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 32
6178: PUSH
6179: LD_INT 1
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PPUSH
6190: CALL_OW 69
6194: PUSH
6195: FOR_IN
6196: IFFALSE 6229
// if GetFuel ( i ) < 1 then
6198: LD_VAR 0 1
6202: PPUSH
6203: CALL_OW 261
6207: PUSH
6208: LD_INT 1
6210: LESS
6211: IFFALSE 6227
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6213: LD_VAR 0 1
6217: PPUSH
6218: CALL_OW 311
6222: PPUSH
6223: CALL_OW 121
6227: GO 6195
6229: POP
6230: POP
// end ;
6231: PPOPN 1
6233: END
// every 0 0$2 trigger IsDying ( Kurin ) or IsDead ( Kurin ) or IsDying ( Kirov ) or IsDead ( Kirov ) do var i , tmp , enemy , barracks ;
6234: LD_EXP 40
6238: PPUSH
6239: CALL_OW 303
6243: PUSH
6244: LD_EXP 40
6248: PPUSH
6249: CALL_OW 301
6253: OR
6254: PUSH
6255: LD_INT 71
6257: PPUSH
6258: CALL_OW 303
6262: OR
6263: PUSH
6264: LD_INT 71
6266: PPUSH
6267: CALL_OW 301
6271: OR
6272: IFFALSE 6595
6274: GO 6276
6276: DISABLE
6277: LD_INT 0
6279: PPUSH
6280: PPUSH
6281: PPUSH
6282: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 1 ] ) ;
6283: LD_ADDR_VAR 0 2
6287: PUSH
6288: LD_EXP 44
6292: PPUSH
6293: LD_INT 25
6295: PUSH
6296: LD_INT 1
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: PPUSH
6303: CALL_OW 72
6307: ST_TO_ADDR
// if not tmp then
6308: LD_VAR 0 2
6312: NOT
6313: IFFALSE 6317
// exit ;
6315: GO 6595
// barracks := HexInfo ( 166 , 116 ) ;
6317: LD_ADDR_VAR 0 4
6321: PUSH
6322: LD_INT 166
6324: PPUSH
6325: LD_INT 116
6327: PPUSH
6328: CALL_OW 428
6332: ST_TO_ADDR
// for i in tmp do
6333: LD_ADDR_VAR 0 1
6337: PUSH
6338: LD_VAR 0 2
6342: PUSH
6343: FOR_IN
6344: IFFALSE 6357
// ComExitBuilding ( i ) ;
6346: LD_VAR 0 1
6350: PPUSH
6351: CALL_OW 122
6355: GO 6343
6357: POP
6358: POP
// repeat wait ( 0 0$1 ) ;
6359: LD_INT 35
6361: PPUSH
6362: CALL_OW 67
// tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
6366: LD_ADDR_VAR 0 2
6370: PUSH
6371: LD_EXP 44
6375: PPUSH
6376: LD_INT 25
6378: PUSH
6379: LD_INT 1
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PUSH
6386: LD_INT 50
6388: PUSH
6389: EMPTY
6390: LIST
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 72
6400: ST_TO_ADDR
// enemy := FilterUnitsInArea ( kirovBaseArea , [ f_enemy , 6 ] ) ;
6401: LD_ADDR_VAR 0 3
6405: PUSH
6406: LD_INT 21
6408: PPUSH
6409: LD_INT 81
6411: PUSH
6412: LD_INT 6
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: PPUSH
6419: CALL_OW 70
6423: ST_TO_ADDR
// if enemy then
6424: LD_VAR 0 3
6428: IFFALSE 6473
// begin for i in tmp do
6430: LD_ADDR_VAR 0 1
6434: PUSH
6435: LD_VAR 0 2
6439: PUSH
6440: FOR_IN
6441: IFFALSE 6469
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6443: LD_VAR 0 1
6447: PPUSH
6448: LD_VAR 0 3
6452: PPUSH
6453: LD_VAR 0 1
6457: PPUSH
6458: CALL_OW 74
6462: PPUSH
6463: CALL_OW 115
6467: GO 6440
6469: POP
6470: POP
// end else
6471: GO 6588
// begin for i in tmp do
6473: LD_ADDR_VAR 0 1
6477: PUSH
6478: LD_VAR 0 2
6482: PUSH
6483: FOR_IN
6484: IFFALSE 6586
// if HasTask ( i ) or not IsInArea ( i , kirovBaseArea ) then
6486: LD_VAR 0 1
6490: PPUSH
6491: CALL_OW 314
6495: PUSH
6496: LD_VAR 0 1
6500: PPUSH
6501: LD_INT 21
6503: PPUSH
6504: CALL_OW 308
6508: NOT
6509: OR
6510: IFFALSE 6584
// if GetLives ( i ) < 600 and IsOk ( barracks ) and UnitsInside ( barracks ) < 6 then
6512: LD_VAR 0 1
6516: PPUSH
6517: CALL_OW 256
6521: PUSH
6522: LD_INT 600
6524: LESS
6525: PUSH
6526: LD_VAR 0 4
6530: PPUSH
6531: CALL_OW 302
6535: AND
6536: PUSH
6537: LD_VAR 0 4
6541: PPUSH
6542: CALL_OW 313
6546: PUSH
6547: LD_INT 6
6549: LESS
6550: AND
6551: IFFALSE 6569
// ComEnterUnit ( i , barracks ) else
6553: LD_VAR 0 1
6557: PPUSH
6558: LD_VAR 0 4
6562: PPUSH
6563: CALL_OW 120
6567: GO 6584
// ComMoveXY ( i , 162 , 109 ) ;
6569: LD_VAR 0 1
6573: PPUSH
6574: LD_INT 162
6576: PPUSH
6577: LD_INT 109
6579: PPUSH
6580: CALL_OW 111
6584: GO 6483
6586: POP
6587: POP
// end ; until not tmp ;
6588: LD_VAR 0 2
6592: NOT
6593: IFFALSE 6359
// end ;
6595: PPOPN 4
6597: END
// every 0 0$2 trigger IsDying ( Beria ) or IsDead ( Beria ) do var i , tmp ;
6598: LD_INT 106
6600: PPUSH
6601: CALL_OW 303
6605: PUSH
6606: LD_INT 106
6608: PPUSH
6609: CALL_OW 301
6613: OR
6614: IFFALSE 6709
6616: GO 6618
6618: DISABLE
6619: LD_INT 0
6621: PPUSH
6622: PPUSH
// begin tmp := UnitFilter ( beriaBaseSquad , [ f_class , 1 ] ) ;
6623: LD_ADDR_VAR 0 2
6627: PUSH
6628: LD_EXP 45
6632: PPUSH
6633: LD_INT 25
6635: PUSH
6636: LD_INT 1
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: PPUSH
6643: CALL_OW 72
6647: ST_TO_ADDR
// if not tmp then
6648: LD_VAR 0 2
6652: NOT
6653: IFFALSE 6657
// exit ;
6655: GO 6709
// for i in tmp do
6657: LD_ADDR_VAR 0 1
6661: PUSH
6662: LD_VAR 0 2
6666: PUSH
6667: FOR_IN
6668: IFFALSE 6707
// begin if IsInUnit ( i ) then
6670: LD_VAR 0 1
6674: PPUSH
6675: CALL_OW 310
6679: IFFALSE 6690
// ComExitBuilding ( i ) ;
6681: LD_VAR 0 1
6685: PPUSH
6686: CALL_OW 122
// AddComMoveXY ( i , 66 , 128 ) ;
6690: LD_VAR 0 1
6694: PPUSH
6695: LD_INT 66
6697: PPUSH
6698: LD_INT 128
6700: PPUSH
6701: CALL_OW 171
// end ;
6705: GO 6667
6707: POP
6708: POP
// end ; end_of_file
6709: PPOPN 2
6711: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6712: LD_INT 0
6714: PPUSH
6715: PPUSH
6716: PPUSH
// SetBName ( omikron , omikron ) ;
6717: LD_INT 64
6719: PPUSH
6720: LD_STRING omikron
6722: PPUSH
6723: CALL_OW 500
// uc_side := 4 ;
6727: LD_ADDR_OWVAR 20
6731: PUSH
6732: LD_INT 4
6734: ST_TO_ADDR
// uc_nation := 1 ;
6735: LD_ADDR_OWVAR 21
6739: PUSH
6740: LD_INT 1
6742: ST_TO_ADDR
// omicronSquad := [ ] ;
6743: LD_ADDR_EXP 51
6747: PUSH
6748: EMPTY
6749: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6750: LD_ADDR_VAR 0 2
6754: PUSH
6755: LD_INT 22
6757: PUSH
6758: LD_INT 4
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: PUSH
6765: LD_INT 2
6767: PUSH
6768: LD_INT 30
6770: PUSH
6771: LD_INT 32
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PUSH
6778: LD_INT 30
6780: PUSH
6781: LD_INT 31
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: LIST
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PPUSH
6797: CALL_OW 69
6801: PUSH
6802: FOR_IN
6803: IFFALSE 6860
// begin PrepareHuman ( false , 1 , 1 ) ;
6805: LD_INT 0
6807: PPUSH
6808: LD_INT 1
6810: PPUSH
6811: LD_INT 1
6813: PPUSH
6814: CALL_OW 380
// un := CreateHuman ;
6818: LD_ADDR_VAR 0 3
6822: PUSH
6823: CALL_OW 44
6827: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6828: LD_ADDR_EXP 51
6832: PUSH
6833: LD_EXP 51
6837: PUSH
6838: LD_VAR 0 3
6842: UNION
6843: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6844: LD_VAR 0 3
6848: PPUSH
6849: LD_VAR 0 2
6853: PPUSH
6854: CALL_OW 52
// end ;
6858: GO 6802
6860: POP
6861: POP
// for i := 1 to 3 do
6862: LD_ADDR_VAR 0 2
6866: PUSH
6867: DOUBLE
6868: LD_INT 1
6870: DEC
6871: ST_TO_ADDR
6872: LD_INT 3
6874: PUSH
6875: FOR_TO
6876: IFFALSE 6931
// begin PrepareHuman ( false , 2 , 2 ) ;
6878: LD_INT 0
6880: PPUSH
6881: LD_INT 2
6883: PPUSH
6884: LD_INT 2
6886: PPUSH
6887: CALL_OW 380
// un := CreateHuman ;
6891: LD_ADDR_VAR 0 3
6895: PUSH
6896: CALL_OW 44
6900: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6901: LD_ADDR_EXP 51
6905: PUSH
6906: LD_EXP 51
6910: PUSH
6911: LD_VAR 0 3
6915: UNION
6916: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6917: LD_VAR 0 3
6921: PPUSH
6922: LD_INT 64
6924: PPUSH
6925: CALL_OW 52
// end ;
6929: GO 6875
6931: POP
6932: POP
// for i := 1 to 2 do
6933: LD_ADDR_VAR 0 2
6937: PUSH
6938: DOUBLE
6939: LD_INT 1
6941: DEC
6942: ST_TO_ADDR
6943: LD_INT 2
6945: PUSH
6946: FOR_TO
6947: IFFALSE 7086
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6949: LD_INT 4
6951: PPUSH
6952: LD_INT 1
6954: PPUSH
6955: LD_INT 2
6957: PPUSH
6958: LD_INT 2
6960: PPUSH
6961: LD_INT 1
6963: PPUSH
6964: LD_INT 3
6966: PPUSH
6967: LD_INT 100
6969: PPUSH
6970: CALL 370 0 7
// un := CreateVehicle ;
6974: LD_ADDR_VAR 0 3
6978: PUSH
6979: CALL_OW 45
6983: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6984: LD_ADDR_EXP 51
6988: PUSH
6989: LD_EXP 51
6993: PUSH
6994: LD_VAR 0 3
6998: UNION
6999: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
7000: LD_VAR 0 3
7004: PPUSH
7005: LD_INT 28
7007: PPUSH
7008: LD_INT 37
7010: PPUSH
7011: LD_INT 6
7013: PPUSH
7014: LD_INT 0
7016: PPUSH
7017: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
7021: LD_INT 0
7023: PPUSH
7024: LD_INT 3
7026: PPUSH
7027: LD_INT 2
7029: PPUSH
7030: CALL_OW 380
// un := CreateHuman ;
7034: LD_ADDR_VAR 0 3
7038: PUSH
7039: CALL_OW 44
7043: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7044: LD_ADDR_EXP 51
7048: PUSH
7049: LD_EXP 51
7053: PUSH
7054: LD_VAR 0 3
7058: UNION
7059: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
7060: LD_VAR 0 3
7064: PPUSH
7065: LD_EXP 51
7069: PUSH
7070: LD_EXP 51
7074: PUSH
7075: LD_INT 1
7077: MINUS
7078: ARRAY
7079: PPUSH
7080: CALL_OW 52
// end ;
7084: GO 6946
7086: POP
7087: POP
// end ;
7088: LD_VAR 0 1
7092: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
7093: LD_INT 0
7095: PPUSH
7096: PPUSH
7097: PPUSH
7098: PPUSH
// uc_side := 4 ;
7099: LD_ADDR_OWVAR 20
7103: PUSH
7104: LD_INT 4
7106: ST_TO_ADDR
// uc_nation := 1 ;
7107: LD_ADDR_OWVAR 21
7111: PUSH
7112: LD_INT 1
7114: ST_TO_ADDR
// tmp := [ ] ;
7115: LD_ADDR_VAR 0 4
7119: PUSH
7120: EMPTY
7121: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7122: LD_INT 4
7124: PPUSH
7125: LD_INT 1
7127: PPUSH
7128: LD_INT 2
7130: PPUSH
7131: LD_INT 1
7133: PPUSH
7134: LD_INT 1
7136: PPUSH
7137: LD_INT 4
7139: PPUSH
7140: LD_INT 77
7142: PPUSH
7143: CALL 370 0 7
// un := CreateVehicle ;
7147: LD_ADDR_VAR 0 3
7151: PUSH
7152: CALL_OW 45
7156: ST_TO_ADDR
// tmp := tmp union un ;
7157: LD_ADDR_VAR 0 4
7161: PUSH
7162: LD_VAR 0 4
7166: PUSH
7167: LD_VAR 0 3
7171: UNION
7172: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7173: LD_VAR 0 3
7177: PPUSH
7178: LD_INT 2
7180: PPUSH
7181: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
7185: LD_VAR 0 3
7189: PPUSH
7190: LD_INT 106
7192: PPUSH
7193: LD_INT 3
7195: PPUSH
7196: LD_INT 0
7198: PPUSH
7199: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
7203: LD_INT 0
7205: PPUSH
7206: LD_INT 3
7208: PPUSH
7209: LD_INT 2
7211: PPUSH
7212: CALL_OW 380
// un := CreateHuman ;
7216: LD_ADDR_VAR 0 3
7220: PUSH
7221: CALL_OW 44
7225: ST_TO_ADDR
// tmp := tmp union un ;
7226: LD_ADDR_VAR 0 4
7230: PUSH
7231: LD_VAR 0 4
7235: PUSH
7236: LD_VAR 0 3
7240: UNION
7241: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7242: LD_VAR 0 3
7246: PPUSH
7247: LD_VAR 0 4
7251: PUSH
7252: LD_VAR 0 4
7256: PUSH
7257: LD_INT 1
7259: MINUS
7260: ARRAY
7261: PPUSH
7262: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7266: LD_VAR 0 3
7270: PPUSH
7271: LD_INT 109
7273: PPUSH
7274: LD_INT 9
7276: PPUSH
7277: CALL_OW 111
// wait ( 0 0$1 ) ;
7281: LD_INT 35
7283: PPUSH
7284: CALL_OW 67
// for i := 1 to 2 do
7288: LD_ADDR_VAR 0 2
7292: PUSH
7293: DOUBLE
7294: LD_INT 1
7296: DEC
7297: ST_TO_ADDR
7298: LD_INT 2
7300: PUSH
7301: FOR_TO
7302: IFFALSE 7366
// begin PrepareHuman ( false , 1 , 2 ) ;
7304: LD_INT 0
7306: PPUSH
7307: LD_INT 1
7309: PPUSH
7310: LD_INT 2
7312: PPUSH
7313: CALL_OW 380
// un := CreateHuman ;
7317: LD_ADDR_VAR 0 3
7321: PUSH
7322: CALL_OW 44
7326: ST_TO_ADDR
// tmp := tmp union un ;
7327: LD_ADDR_VAR 0 4
7331: PUSH
7332: LD_VAR 0 4
7336: PUSH
7337: LD_VAR 0 3
7341: UNION
7342: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7343: LD_VAR 0 3
7347: PPUSH
7348: LD_INT 105
7350: PPUSH
7351: LD_INT 2
7353: PPUSH
7354: LD_INT 2
7356: PPUSH
7357: LD_INT 0
7359: PPUSH
7360: CALL_OW 50
// end ;
7364: GO 7301
7366: POP
7367: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7368: LD_VAR 0 4
7372: PPUSH
7373: LD_INT 26
7375: PPUSH
7376: LD_INT 35
7378: PPUSH
7379: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7383: LD_INT 35
7385: PPUSH
7386: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7390: LD_VAR 0 4
7394: PPUSH
7395: LD_INT 50
7397: PUSH
7398: EMPTY
7399: LIST
7400: PPUSH
7401: CALL_OW 72
7405: NOT
7406: IFFALSE 7410
// exit ;
7408: GO 7537
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7410: LD_VAR 0 4
7414: PPUSH
7415: LD_INT 91
7417: PUSH
7418: LD_INT 64
7420: PUSH
7421: LD_INT 12
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: LIST
7428: PPUSH
7429: CALL_OW 72
7433: PUSH
7434: LD_VAR 0 4
7438: EQUAL
7439: IFFALSE 7383
// omicronSquad := omicronSquad union tmp ;
7441: LD_ADDR_EXP 51
7445: PUSH
7446: LD_EXP 51
7450: PUSH
7451: LD_VAR 0 4
7455: UNION
7456: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7457: LD_ADDR_VAR 0 2
7461: PUSH
7462: LD_VAR 0 4
7466: PPUSH
7467: LD_INT 25
7469: PUSH
7470: LD_INT 1
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: PPUSH
7477: CALL_OW 72
7481: PUSH
7482: FOR_IN
7483: IFFALSE 7535
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7485: LD_VAR 0 2
7489: PPUSH
7490: LD_INT 22
7492: PUSH
7493: LD_INT 4
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: PUSH
7500: LD_INT 30
7502: PUSH
7503: LD_INT 4
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: PPUSH
7514: CALL_OW 69
7518: PPUSH
7519: LD_VAR 0 2
7523: PPUSH
7524: CALL_OW 74
7528: PPUSH
7529: CALL_OW 120
7533: GO 7482
7535: POP
7536: POP
// end ;
7537: LD_VAR 0 1
7541: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7542: LD_EXP 13
7546: NOT
7547: IFFALSE 8118
7549: GO 7551
7551: DISABLE
7552: LD_INT 0
7554: PPUSH
7555: PPUSH
7556: PPUSH
7557: PPUSH
// begin enable ;
7558: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7559: LD_ADDR_VAR 0 2
7563: PUSH
7564: LD_INT 22
7566: PUSH
7567: LD_INT 4
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: PUSH
7574: LD_INT 21
7576: PUSH
7577: LD_INT 3
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PUSH
7584: LD_INT 3
7586: PUSH
7587: LD_INT 24
7589: PUSH
7590: LD_INT 1000
7592: PUSH
7593: EMPTY
7594: LIST
7595: LIST
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: LIST
7605: PPUSH
7606: CALL_OW 69
7610: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7611: LD_ADDR_VAR 0 3
7615: PUSH
7616: LD_EXP 51
7620: PPUSH
7621: LD_INT 25
7623: PUSH
7624: LD_INT 2
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PPUSH
7631: CALL_OW 72
7635: ST_TO_ADDR
// if filter and tmp then
7636: LD_VAR 0 2
7640: PUSH
7641: LD_VAR 0 3
7645: AND
7646: IFFALSE 7719
// begin for i in tmp do
7648: LD_ADDR_VAR 0 1
7652: PUSH
7653: LD_VAR 0 3
7657: PUSH
7658: FOR_IN
7659: IFFALSE 7715
// if IsInUnit ( i ) then
7661: LD_VAR 0 1
7665: PPUSH
7666: CALL_OW 310
7670: IFFALSE 7683
// ComExitBuilding ( i ) else
7672: LD_VAR 0 1
7676: PPUSH
7677: CALL_OW 122
7681: GO 7713
// if not HasTask ( i ) then
7683: LD_VAR 0 1
7687: PPUSH
7688: CALL_OW 314
7692: NOT
7693: IFFALSE 7713
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7695: LD_VAR 0 1
7699: PPUSH
7700: LD_VAR 0 2
7704: PUSH
7705: LD_INT 1
7707: ARRAY
7708: PPUSH
7709: CALL_OW 130
7713: GO 7658
7715: POP
7716: POP
// end else
7717: GO 7790
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7719: LD_VAR 0 3
7723: PPUSH
7724: LD_INT 3
7726: PUSH
7727: LD_INT 54
7729: PUSH
7730: EMPTY
7731: LIST
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PPUSH
7737: CALL_OW 72
7741: IFFALSE 7790
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7743: LD_ADDR_VAR 0 1
7747: PUSH
7748: LD_VAR 0 3
7752: PPUSH
7753: LD_INT 3
7755: PUSH
7756: LD_INT 54
7758: PUSH
7759: EMPTY
7760: LIST
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PPUSH
7766: CALL_OW 72
7770: PUSH
7771: FOR_IN
7772: IFFALSE 7788
// ComEnterUnit ( i , omikron ) ;
7774: LD_VAR 0 1
7778: PPUSH
7779: LD_INT 64
7781: PPUSH
7782: CALL_OW 120
7786: GO 7771
7788: POP
7789: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7790: LD_ADDR_VAR 0 2
7794: PUSH
7795: LD_EXP 51
7799: PPUSH
7800: LD_INT 21
7802: PUSH
7803: LD_INT 2
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: PPUSH
7810: CALL_OW 72
7814: ST_TO_ADDR
// if not filter then
7815: LD_VAR 0 2
7819: NOT
7820: IFFALSE 7824
// exit ;
7822: GO 8118
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7824: LD_ADDR_VAR 0 4
7828: PUSH
7829: LD_INT 13
7831: PPUSH
7832: LD_INT 81
7834: PUSH
7835: LD_INT 4
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PPUSH
7842: CALL_OW 70
7846: ST_TO_ADDR
// if enemy then
7847: LD_VAR 0 4
7851: IFFALSE 8118
// begin for i in filter do
7853: LD_ADDR_VAR 0 1
7857: PUSH
7858: LD_VAR 0 2
7862: PUSH
7863: FOR_IN
7864: IFFALSE 8116
// begin tmp := IsDrivenBy ( i ) ;
7866: LD_ADDR_VAR 0 3
7870: PUSH
7871: LD_VAR 0 1
7875: PPUSH
7876: CALL_OW 311
7880: ST_TO_ADDR
// if not tmp then
7881: LD_VAR 0 3
7885: NOT
7886: IFFALSE 7890
// continue ;
7888: GO 7863
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7890: LD_VAR 0 1
7894: PPUSH
7895: CALL_OW 256
7899: PUSH
7900: LD_INT 600
7902: GREATEREQUAL
7903: PUSH
7904: LD_VAR 0 1
7908: PPUSH
7909: CALL_OW 110
7913: PUSH
7914: LD_INT 1
7916: NONEQUAL
7917: AND
7918: IFFALSE 7944
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7920: LD_VAR 0 1
7924: PPUSH
7925: LD_VAR 0 4
7929: PPUSH
7930: LD_VAR 0 1
7934: PPUSH
7935: CALL_OW 74
7939: PPUSH
7940: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7944: LD_VAR 0 1
7948: PPUSH
7949: CALL_OW 256
7953: PUSH
7954: LD_INT 600
7956: LESS
7957: PUSH
7958: LD_VAR 0 1
7962: PPUSH
7963: CALL_OW 110
7967: PUSH
7968: LD_INT 1
7970: NONEQUAL
7971: AND
7972: IFFALSE 8001
// begin SetTag ( i , 1 ) ;
7974: LD_VAR 0 1
7978: PPUSH
7979: LD_INT 1
7981: PPUSH
7982: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
7986: LD_VAR 0 1
7990: PPUSH
7991: LD_INT 27
7993: PPUSH
7994: LD_INT 35
7996: PPUSH
7997: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
8001: LD_VAR 0 1
8005: PPUSH
8006: CALL_OW 110
8010: PUSH
8011: LD_INT 1
8013: EQUAL
8014: PUSH
8015: LD_VAR 0 1
8019: PPUSH
8020: LD_INT 27
8022: PPUSH
8023: LD_INT 35
8025: PPUSH
8026: CALL_OW 297
8030: PUSH
8031: LD_INT 6
8033: LESS
8034: AND
8035: PUSH
8036: LD_VAR 0 3
8040: AND
8041: IFFALSE 8114
// begin ComExitVehicle ( tmp ) ;
8043: LD_VAR 0 3
8047: PPUSH
8048: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8052: LD_VAR 0 3
8056: PPUSH
8057: LD_VAR 0 1
8061: PPUSH
8062: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8066: LD_INT 35
8068: PPUSH
8069: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8073: LD_VAR 0 1
8077: PPUSH
8078: CALL_OW 256
8082: PUSH
8083: LD_INT 1000
8085: EQUAL
8086: IFFALSE 8066
// ComEnterUnit ( tmp , i ) ;
8088: LD_VAR 0 3
8092: PPUSH
8093: LD_VAR 0 1
8097: PPUSH
8098: CALL_OW 120
// SetTag ( i , 0 ) ;
8102: LD_VAR 0 1
8106: PPUSH
8107: LD_INT 0
8109: PPUSH
8110: CALL_OW 109
// end ; end ;
8114: GO 7863
8116: POP
8117: POP
// end ; end ;
8118: PPOPN 4
8120: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
8121: LD_EXP 13
8125: IFFALSE 8269
8127: GO 8129
8129: DISABLE
8130: LD_INT 0
8132: PPUSH
8133: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
8134: LD_ADDR_VAR 0 2
8138: PUSH
8139: LD_EXP 51
8143: PPUSH
8144: LD_INT 21
8146: PUSH
8147: LD_INT 1
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: LD_INT 50
8156: PUSH
8157: EMPTY
8158: LIST
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PPUSH
8164: CALL_OW 72
8168: ST_TO_ADDR
// if not tmp then
8169: LD_VAR 0 2
8173: NOT
8174: IFFALSE 8178
// exit ;
8176: GO 8269
// repeat wait ( 0 0$1 ) ;
8178: LD_INT 35
8180: PPUSH
8181: CALL_OW 67
// for i in tmp do
8185: LD_ADDR_VAR 0 1
8189: PUSH
8190: LD_VAR 0 2
8194: PUSH
8195: FOR_IN
8196: IFFALSE 8260
// begin ComExit ( i ) ;
8198: LD_VAR 0 1
8202: PPUSH
8203: CALL 75776 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
8207: LD_VAR 0 1
8211: PPUSH
8212: LD_INT 14
8214: PPUSH
8215: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
8219: LD_VAR 0 1
8223: PPUSH
8224: LD_INT 14
8226: PPUSH
8227: CALL_OW 308
8231: IFFALSE 8258
// begin tmp := tmp diff i ;
8233: LD_ADDR_VAR 0 2
8237: PUSH
8238: LD_VAR 0 2
8242: PUSH
8243: LD_VAR 0 1
8247: DIFF
8248: ST_TO_ADDR
// RemoveUnit ( i ) ;
8249: LD_VAR 0 1
8253: PPUSH
8254: CALL_OW 64
// end ; end ;
8258: GO 8195
8260: POP
8261: POP
// until not tmp ;
8262: LD_VAR 0 2
8266: NOT
8267: IFFALSE 8178
// end ; end_of_file
8269: PPOPN 2
8271: END
// export function Action ; var i , un , veh , tmp ; begin
8272: LD_INT 0
8274: PPUSH
8275: PPUSH
8276: PPUSH
8277: PPUSH
8278: PPUSH
// InGameOn ;
8279: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8283: LD_INT 179
8285: PPUSH
8286: LD_INT 5
8288: PPUSH
8289: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8293: LD_ADDR_VAR 0 4
8297: PUSH
8298: LD_INT 2
8300: PPUSH
8301: LD_INT 2
8303: PPUSH
8304: LD_INT 12
8306: PPUSH
8307: LD_INT 1
8309: PPUSH
8310: LD_INT 1
8312: PPUSH
8313: LD_INT 24
8315: PPUSH
8316: LD_INT 33
8318: PPUSH
8319: CALL 370 0 7
8323: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8324: LD_VAR 0 4
8328: PPUSH
8329: LD_INT 2
8331: PPUSH
8332: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8336: LD_VAR 0 4
8340: PPUSH
8341: LD_INT 178
8343: PPUSH
8344: LD_INT 2
8346: PPUSH
8347: LD_INT 0
8349: PPUSH
8350: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8354: LD_EXP 25
8358: PPUSH
8359: LD_VAR 0 4
8363: PPUSH
8364: CALL_OW 52
// if Kamil then
8368: LD_EXP 29
8372: IFFALSE 8407
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8374: LD_EXP 29
8378: PPUSH
8379: LD_INT 207
8381: PPUSH
8382: LD_INT 37
8384: PPUSH
8385: LD_INT 0
8387: PPUSH
8388: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8392: LD_EXP 29
8396: PPUSH
8397: LD_INT 211
8399: PPUSH
8400: LD_INT 38
8402: PPUSH
8403: CALL_OW 118
// end ; if Sophia then
8407: LD_EXP 31
8411: IFFALSE 8446
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8413: LD_EXP 31
8417: PPUSH
8418: LD_INT 209
8420: PPUSH
8421: LD_INT 40
8423: PPUSH
8424: LD_INT 0
8426: PPUSH
8427: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8431: LD_EXP 31
8435: PPUSH
8436: LD_INT 211
8438: PPUSH
8439: LD_INT 38
8441: PPUSH
8442: CALL_OW 118
// end ; if Givi then
8446: LD_EXP 26
8450: IFFALSE 8485
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8452: LD_EXP 26
8456: PPUSH
8457: LD_INT 201
8459: PPUSH
8460: LD_INT 34
8462: PPUSH
8463: LD_INT 0
8465: PPUSH
8466: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8470: LD_EXP 26
8474: PPUSH
8475: LD_INT 206
8477: PPUSH
8478: LD_INT 36
8480: PPUSH
8481: CALL_OW 118
// end ; if Ibrahim then
8485: LD_EXP 28
8489: IFFALSE 8524
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8491: LD_EXP 28
8495: PPUSH
8496: LD_INT 202
8498: PPUSH
8499: LD_INT 39
8501: PPUSH
8502: LD_INT 0
8504: PPUSH
8505: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8509: LD_EXP 28
8513: PPUSH
8514: LD_INT 206
8516: PPUSH
8517: LD_INT 36
8519: PPUSH
8520: CALL_OW 118
// end ; if Markov then
8524: LD_EXP 32
8528: IFFALSE 8615
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8530: LD_ADDR_VAR 0 4
8534: PUSH
8535: LD_INT 2
8537: PPUSH
8538: LD_INT 2
8540: PPUSH
8541: LD_INT 13
8543: PPUSH
8544: LD_INT 1
8546: PPUSH
8547: LD_INT 1
8549: PPUSH
8550: LD_INT 25
8552: PPUSH
8553: LD_INT 80
8555: PUSH
8556: LD_INT 20
8558: PUSH
8559: LD_OWVAR 67
8563: MUL
8564: MINUS
8565: PPUSH
8566: CALL 370 0 7
8570: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8571: LD_VAR 0 4
8575: PPUSH
8576: LD_INT 2
8578: PPUSH
8579: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8583: LD_VAR 0 4
8587: PPUSH
8588: LD_INT 197
8590: PPUSH
8591: LD_INT 35
8593: PPUSH
8594: LD_INT 0
8596: PPUSH
8597: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8601: LD_EXP 32
8605: PPUSH
8606: LD_VAR 0 4
8610: PPUSH
8611: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8615: LD_ADDR_VAR 0 5
8619: PUSH
8620: LD_EXP 30
8624: PUSH
8625: LD_EXP 37
8629: UNION
8630: ST_TO_ADDR
// for i in tmp do
8631: LD_ADDR_VAR 0 2
8635: PUSH
8636: LD_VAR 0 5
8640: PUSH
8641: FOR_IN
8642: IFFALSE 8676
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8644: LD_VAR 0 2
8648: PPUSH
8649: LD_INT 203
8651: PPUSH
8652: LD_INT 41
8654: PPUSH
8655: LD_INT 6
8657: PPUSH
8658: LD_INT 0
8660: PPUSH
8661: CALL_OW 50
// ComHold ( i ) ;
8665: LD_VAR 0 2
8669: PPUSH
8670: CALL_OW 140
// end ;
8674: GO 8641
8676: POP
8677: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8678: LD_INT 22
8680: PUSH
8681: LD_INT 2
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PUSH
8688: LD_INT 25
8690: PUSH
8691: LD_INT 2
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: PPUSH
8702: CALL_OW 69
8706: NOT
8707: IFFALSE 8721
// SetClass ( Heike , 2 ) ;
8709: LD_EXP 25
8713: PPUSH
8714: LD_INT 2
8716: PPUSH
8717: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8721: LD_EXP 25
8725: PPUSH
8726: LD_INT 183
8728: PPUSH
8729: LD_INT 12
8731: PPUSH
8732: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8736: LD_EXP 25
8740: PPUSH
8741: LD_INT 188
8743: PPUSH
8744: LD_INT 20
8746: PPUSH
8747: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8751: LD_EXP 25
8755: PPUSH
8756: LD_INT 191
8758: PPUSH
8759: LD_INT 25
8761: PPUSH
8762: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8766: LD_EXP 25
8770: PPUSH
8771: LD_INT 203
8773: PPUSH
8774: LD_INT 29
8776: PPUSH
8777: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8781: LD_EXP 25
8785: PPUSH
8786: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8790: LD_INT 35
8792: PPUSH
8793: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8797: LD_EXP 25
8801: PPUSH
8802: CALL_OW 310
8806: NOT
8807: IFFALSE 8790
// CenterOnUnits ( Heike ) ;
8809: LD_EXP 25
8813: PPUSH
8814: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8818: LD_ADDR_VAR 0 5
8822: PUSH
8823: LD_INT 22
8825: PUSH
8826: LD_INT 2
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: PUSH
8833: LD_INT 21
8835: PUSH
8836: LD_INT 1
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: PPUSH
8847: CALL_OW 69
8851: PUSH
8852: LD_EXP 25
8856: PUSH
8857: LD_EXP 32
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: DIFF
8866: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8867: LD_VAR 0 5
8871: PPUSH
8872: LD_EXP 25
8876: PPUSH
8877: CALL_OW 119
// if Givi then
8881: LD_EXP 26
8885: IFFALSE 8903
// ComTurnUnit ( Heike , Givi ) else
8887: LD_EXP 25
8891: PPUSH
8892: LD_EXP 26
8896: PPUSH
8897: CALL_OW 119
8901: GO 8921
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8903: LD_EXP 25
8907: PPUSH
8908: LD_VAR 0 5
8912: PUSH
8913: LD_INT 1
8915: ARRAY
8916: PPUSH
8917: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8921: LD_EXP 25
8925: PPUSH
8926: LD_STRING DH-Start-1
8928: PPUSH
8929: CALL_OW 88
// if Givi then
8933: LD_EXP 26
8937: IFFALSE 8984
// begin Say ( Givi , DG-Start-2 ) ;
8939: LD_EXP 26
8943: PPUSH
8944: LD_STRING DG-Start-2
8946: PPUSH
8947: CALL_OW 88
// if not Mike then
8951: LD_EXP 27
8955: NOT
8956: IFFALSE 8982
// begin Say ( Givi , DG-Start-b-3 ) ;
8958: LD_EXP 26
8962: PPUSH
8963: LD_STRING DG-Start-b-3
8965: PPUSH
8966: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
8970: LD_EXP 25
8974: PPUSH
8975: LD_STRING DH-Start-b-4
8977: PPUSH
8978: CALL_OW 88
// end ; end else
8982: GO 9049
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
8984: LD_EXP 37
8988: PPUSH
8989: LD_INT 26
8991: PUSH
8992: LD_INT 1
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: PPUSH
8999: CALL_OW 72
9003: PUSH
9004: LD_INT 1
9006: ARRAY
9007: PPUSH
9008: LD_STRING DArm-Start-a-2
9010: PPUSH
9011: CALL_OW 88
9015: NOT
9016: IFFALSE 9049
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
9018: LD_EXP 37
9022: PPUSH
9023: LD_INT 26
9025: PUSH
9026: LD_INT 2
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: PPUSH
9033: CALL_OW 72
9037: PUSH
9038: LD_INT 1
9040: ARRAY
9041: PPUSH
9042: LD_STRING DArf-Start-a-2
9044: PPUSH
9045: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
9049: LD_EXP 25
9053: PPUSH
9054: LD_INT 211
9056: PPUSH
9057: LD_INT 38
9059: PPUSH
9060: CALL_OW 118
// wait ( 0 0$1 ) ;
9064: LD_INT 35
9066: PPUSH
9067: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
9071: LD_EXP 25
9075: PPUSH
9076: LD_STRING DH-Start-3
9078: PPUSH
9079: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9083: LD_EXP 25
9087: PPUSH
9088: LD_STRING DH-Start-4
9090: PPUSH
9091: CALL_OW 88
// InGameOff ;
9095: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
9099: LD_STRING Prepare
9101: PPUSH
9102: CALL_OW 337
// SaveForQuickRestart ;
9106: CALL_OW 22
// wait ( 0 0$10 ) ;
9110: LD_INT 350
9112: PPUSH
9113: CALL_OW 67
// if not Aviradze then
9117: LD_EXP 35
9121: NOT
9122: IFFALSE 9126
// exit ;
9124: GO 9366
// SetDir ( Aviradze , 4 ) ;
9126: LD_EXP 35
9130: PPUSH
9131: LD_INT 4
9133: PPUSH
9134: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
9138: LD_EXP 35
9142: PPUSH
9143: LD_INT 225
9145: PPUSH
9146: LD_INT 33
9148: PPUSH
9149: LD_INT 0
9151: PPUSH
9152: CALL_OW 48
// for i := 1 to 2 do
9156: LD_ADDR_VAR 0 2
9160: PUSH
9161: DOUBLE
9162: LD_INT 1
9164: DEC
9165: ST_TO_ADDR
9166: LD_INT 2
9168: PUSH
9169: FOR_TO
9170: IFFALSE 9301
// begin uc_side := 2 ;
9172: LD_ADDR_OWVAR 20
9176: PUSH
9177: LD_INT 2
9179: ST_TO_ADDR
// uc_nation := 0 ;
9180: LD_ADDR_OWVAR 21
9184: PUSH
9185: LD_INT 0
9187: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9188: LD_INT 0
9190: PPUSH
9191: LD_INT 12
9193: PPUSH
9194: LD_INT 1
9196: PPUSH
9197: CALL_OW 380
// hc_gallery :=  ;
9201: LD_ADDR_OWVAR 33
9205: PUSH
9206: LD_STRING 
9208: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
9209: LD_ADDR_OWVAR 26
9213: PUSH
9214: LD_STRING Artudito
9216: PUSH
9217: LD_STRING Textur
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: PUSH
9224: LD_VAR 0 2
9228: ARRAY
9229: ST_TO_ADDR
// un := CreateHuman ;
9230: LD_ADDR_VAR 0 3
9234: PUSH
9235: CALL_OW 44
9239: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9240: LD_VAR 0 3
9244: PPUSH
9245: LD_INT 224
9247: PUSH
9248: LD_INT 226
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: PUSH
9255: LD_VAR 0 2
9259: ARRAY
9260: PPUSH
9261: LD_INT 31
9263: PUSH
9264: LD_INT 35
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: PUSH
9271: LD_VAR 0 2
9275: ARRAY
9276: PPUSH
9277: LD_INT 0
9279: PPUSH
9280: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9284: LD_VAR 0 3
9288: PPUSH
9289: LD_INT 215
9291: PPUSH
9292: LD_INT 36
9294: PPUSH
9295: CALL_OW 111
// end ;
9299: GO 9169
9301: POP
9302: POP
// hc_name :=  ;
9303: LD_ADDR_OWVAR 26
9307: PUSH
9308: LD_STRING 
9310: ST_TO_ADDR
// InitHc ;
9311: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9315: LD_EXP 35
9319: PPUSH
9320: LD_INT 215
9322: PPUSH
9323: LD_INT 36
9325: PPUSH
9326: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
9330: LD_EXP 35
9334: PPUSH
9335: LD_STRING DA-Arrive-1
9337: PPUSH
9338: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
9342: LD_EXP 25
9346: PPUSH
9347: LD_STRING DH-Arrive-2
9349: PPUSH
9350: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
9354: LD_EXP 35
9358: PPUSH
9359: LD_STRING DA-Arrive-3
9361: PPUSH
9362: CALL_OW 88
// end ;
9366: LD_VAR 0 1
9370: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh , p ;
9371: LD_EXP 3
9375: IFFALSE 10817
9377: GO 9379
9379: DISABLE
9380: LD_INT 0
9382: PPUSH
9383: PPUSH
9384: PPUSH
9385: PPUSH
// begin DialogueOn ;
9386: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9390: LD_EXP 25
9394: PPUSH
9395: LD_STRING DH-base-1
9397: PPUSH
9398: CALL_OW 88
// if Markov then
9402: LD_EXP 32
9406: IFFALSE 9458
// begin Say ( Markov , DMar-base-2 ) ;
9408: LD_EXP 32
9412: PPUSH
9413: LD_STRING DMar-base-2
9415: PPUSH
9416: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9420: LD_EXP 32
9424: PPUSH
9425: LD_STRING DMar-base-3
9427: PPUSH
9428: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9432: LD_EXP 25
9436: PPUSH
9437: LD_STRING DH-base-4
9439: PPUSH
9440: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9444: LD_EXP 32
9448: PPUSH
9449: LD_STRING DMar-base-5
9451: PPUSH
9452: CALL_OW 88
// end else
9456: GO 9535
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9458: LD_EXP 37
9462: PPUSH
9463: LD_INT 26
9465: PUSH
9466: LD_INT 1
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: PPUSH
9473: CALL_OW 72
9477: PUSH
9478: LD_INT 1
9480: ARRAY
9481: PPUSH
9482: LD_STRING DArm-base-a-2
9484: PPUSH
9485: CALL_OW 88
9489: NOT
9490: IFFALSE 9523
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9492: LD_EXP 37
9496: PPUSH
9497: LD_INT 26
9499: PUSH
9500: LD_INT 2
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: PPUSH
9507: CALL_OW 72
9511: PUSH
9512: LD_INT 1
9514: ARRAY
9515: PPUSH
9516: LD_STRING DArf-base-a-2
9518: PPUSH
9519: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9523: LD_EXP 25
9527: PPUSH
9528: LD_STRING DH-base-a-3
9530: PPUSH
9531: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9535: LD_EXP 35
9539: PPUSH
9540: LD_STRING DA-base-6
9542: PPUSH
9543: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9547: LD_EXP 35
9551: PPUSH
9552: LD_STRING DA-base-7
9554: PPUSH
9555: CALL_OW 88
// DialogueOff ;
9559: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9563: LD_STRING Flamethrower
9565: PPUSH
9566: CALL_OW 337
// wait ( 2 2$00 ) ;
9570: LD_INT 4200
9572: PPUSH
9573: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9577: LD_EXP 34
9581: PUSH
9582: LD_EXP 27
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: PPUSH
9591: LD_INT 203
9593: PPUSH
9594: LD_INT 37
9596: PPUSH
9597: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9601: LD_INT 22
9603: PUSH
9604: LD_INT 2
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: PUSH
9611: LD_INT 92
9613: PUSH
9614: LD_INT 203
9616: PUSH
9617: LD_INT 37
9619: PUSH
9620: LD_INT 10
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: PPUSH
9633: CALL_OW 69
9637: NOT
9638: IFFALSE 9678
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9640: LD_EXP 34
9644: PUSH
9645: LD_EXP 27
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: PPUSH
9654: LD_EXP 25
9658: PPUSH
9659: CALL_OW 250
9663: PPUSH
9664: LD_EXP 25
9668: PPUSH
9669: CALL_OW 251
9673: PPUSH
9674: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9678: LD_INT 35
9680: PPUSH
9681: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9685: LD_INT 2
9687: PPUSH
9688: LD_EXP 34
9692: PPUSH
9693: CALL_OW 292
9697: PUSH
9698: LD_EXP 34
9702: PPUSH
9703: LD_EXP 25
9707: PPUSH
9708: CALL_OW 296
9712: PUSH
9713: LD_INT 8
9715: LESS
9716: PUSH
9717: LD_EXP 34
9721: PPUSH
9722: LD_INT 22
9724: PUSH
9725: LD_INT 2
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: PUSH
9732: LD_INT 21
9734: PUSH
9735: LD_INT 3
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PPUSH
9746: CALL_OW 69
9750: PPUSH
9751: LD_EXP 34
9755: PPUSH
9756: CALL_OW 74
9760: PPUSH
9761: CALL_OW 296
9765: PUSH
9766: LD_INT 7
9768: LESS
9769: OR
9770: AND
9771: PUSH
9772: LD_EXP 34
9776: PPUSH
9777: LD_INT 10
9779: PPUSH
9780: CALL_OW 308
9784: NOT
9785: AND
9786: IFFALSE 9678
// InGameOn ;
9788: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9792: LD_EXP 34
9796: PPUSH
9797: CALL_OW 87
// if IsInUnit ( Heike ) then
9801: LD_EXP 25
9805: PPUSH
9806: CALL_OW 310
9810: IFFALSE 9821
// ComExitBuilding ( Heike ) ;
9812: LD_EXP 25
9816: PPUSH
9817: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9821: LD_EXP 34
9825: PUSH
9826: LD_EXP 27
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: PPUSH
9835: LD_EXP 25
9839: PPUSH
9840: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9844: LD_EXP 25
9848: PPUSH
9849: LD_EXP 34
9853: PPUSH
9854: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9858: LD_INT 22
9860: PUSH
9861: LD_INT 2
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: PUSH
9868: LD_INT 91
9870: PUSH
9871: LD_EXP 34
9875: PUSH
9876: LD_INT 10
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: LIST
9883: PUSH
9884: LD_INT 21
9886: PUSH
9887: LD_INT 3
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: LIST
9898: PPUSH
9899: CALL_OW 69
9903: IFFALSE 9929
// begin Say ( Kurt , DKs-scout-1 ) ;
9905: LD_EXP 34
9909: PPUSH
9910: LD_STRING DKs-scout-1
9912: PPUSH
9913: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9917: LD_EXP 25
9921: PPUSH
9922: LD_STRING DH-scout-2
9924: PPUSH
9925: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
9929: LD_EXP 25
9933: PPUSH
9934: CALL_OW 85
// if IsInUnit ( Heike ) then
9938: LD_EXP 25
9942: PPUSH
9943: CALL_OW 310
9947: IFFALSE 9958
// ComExit ( Heike ) ;
9949: LD_EXP 25
9953: PPUSH
9954: CALL 75776 0 1
// repeat wait ( 0 0$1 ) ;
9958: LD_INT 35
9960: PPUSH
9961: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
9965: LD_EXP 25
9969: PPUSH
9970: LD_EXP 34
9974: PPUSH
9975: CALL_OW 112
// until GetDistUnits ( Heike , Kurt ) < 6 ;
9979: LD_EXP 25
9983: PPUSH
9984: LD_EXP 34
9988: PPUSH
9989: CALL_OW 296
9993: PUSH
9994: LD_INT 6
9996: LESS
9997: IFFALSE 9958
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
9999: LD_EXP 34
10003: PUSH
10004: LD_EXP 27
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PPUSH
10013: LD_EXP 25
10017: PPUSH
10018: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
10022: LD_EXP 34
10026: PPUSH
10027: LD_STRING DKs-scout-3
10029: PPUSH
10030: CALL_OW 88
// if Kaia and GetDistUnits ( Kaia , Kurt ) < 15 then
10034: LD_EXP 30
10038: PUSH
10039: LD_EXP 30
10043: PPUSH
10044: LD_EXP 34
10048: PPUSH
10049: CALL_OW 296
10053: PUSH
10054: LD_INT 15
10056: LESS
10057: AND
10058: IFFALSE 10281
// begin p := 1 ;
10060: LD_ADDR_VAR 0 4
10064: PUSH
10065: LD_INT 1
10067: ST_TO_ADDR
// if IsInUnit ( Kaia ) then
10068: LD_EXP 30
10072: PPUSH
10073: CALL_OW 310
10077: IFFALSE 10088
// ComExit ( Kaia ) ;
10079: LD_EXP 30
10083: PPUSH
10084: CALL 75776 0 1
// wait ( 0 0$1 ) ;
10088: LD_INT 35
10090: PPUSH
10091: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
10095: LD_EXP 30
10099: PPUSH
10100: LD_EXP 34
10104: PPUSH
10105: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
10109: LD_INT 35
10111: PPUSH
10112: CALL_OW 67
// p := Inc ( p ) ;
10116: LD_ADDR_VAR 0 4
10120: PUSH
10121: LD_VAR 0 4
10125: PPUSH
10126: CALL 76739 0 1
10130: ST_TO_ADDR
// until GetDistUnits ( Kaia , Kurt ) < 6 or p > 12 ;
10131: LD_EXP 30
10135: PPUSH
10136: LD_EXP 34
10140: PPUSH
10141: CALL_OW 296
10145: PUSH
10146: LD_INT 6
10148: LESS
10149: PUSH
10150: LD_VAR 0 4
10154: PUSH
10155: LD_INT 12
10157: GREATER
10158: OR
10159: IFFALSE 10109
// ComTurnUnit ( Kaia , Kurt ) ;
10161: LD_EXP 30
10165: PPUSH
10166: LD_EXP 34
10170: PPUSH
10171: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
10175: LD_EXP 30
10179: PPUSH
10180: LD_STRING DK-scout-4
10182: PPUSH
10183: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
10187: LD_EXP 34
10191: PPUSH
10192: LD_EXP 30
10196: PPUSH
10197: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
10201: LD_EXP 34
10205: PPUSH
10206: LD_STRING DKs-scout-5
10208: PPUSH
10209: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
10213: LD_EXP 30
10217: PPUSH
10218: LD_STRING DK-scout-6
10220: PPUSH
10221: CALL_OW 88
// if Mike then
10225: LD_EXP 27
10229: IFFALSE 10281
// begin Say ( Mike , DM-scout-7 ) ;
10231: LD_EXP 27
10235: PPUSH
10236: LD_STRING DM-scout-7
10238: PPUSH
10239: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
10243: LD_EXP 30
10247: PPUSH
10248: LD_EXP 27
10252: PPUSH
10253: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
10257: LD_EXP 30
10261: PPUSH
10262: LD_STRING DK-scout-8
10264: PPUSH
10265: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
10269: LD_EXP 27
10273: PPUSH
10274: LD_STRING DM-scout-9
10276: PPUSH
10277: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
10281: LD_INT 184
10283: PPUSH
10284: LD_INT 100
10286: PPUSH
10287: LD_INT 2
10289: PPUSH
10290: LD_INT 12
10292: NEG
10293: PPUSH
10294: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
10298: LD_INT 184
10300: PPUSH
10301: LD_INT 100
10303: PPUSH
10304: LD_INT 2
10306: PPUSH
10307: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
10311: LD_INT 184
10313: PPUSH
10314: LD_INT 100
10316: PPUSH
10317: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
10321: LD_EXP 34
10325: PPUSH
10326: LD_STRING DKs-scout-10
10328: PPUSH
10329: CALL_OW 88
// wait ( 0 0$1 ) ;
10333: LD_INT 35
10335: PPUSH
10336: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
10340: LD_INT 144
10342: PPUSH
10343: LD_INT 65
10345: PPUSH
10346: LD_INT 2
10348: PPUSH
10349: LD_INT 12
10351: NEG
10352: PPUSH
10353: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
10357: LD_INT 144
10359: PPUSH
10360: LD_INT 65
10362: PPUSH
10363: LD_INT 2
10365: PPUSH
10366: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
10370: LD_INT 144
10372: PPUSH
10373: LD_INT 65
10375: PPUSH
10376: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
10380: LD_EXP 34
10384: PPUSH
10385: LD_STRING DKs-scout-11
10387: PPUSH
10388: CALL_OW 88
// wait ( 0 0$1 ) ;
10392: LD_INT 35
10394: PPUSH
10395: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
10399: LD_EXP 34
10403: PPUSH
10404: CALL_OW 87
// if Mike and not Givi then
10408: LD_EXP 27
10412: PUSH
10413: LD_EXP 26
10417: NOT
10418: AND
10419: IFFALSE 10445
// begin Say ( Mike , DM-scout-a-1 ) ;
10421: LD_EXP 27
10425: PPUSH
10426: LD_STRING DM-scout-a-1
10428: PPUSH
10429: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
10433: LD_EXP 25
10437: PPUSH
10438: LD_STRING DH-scout-a-2
10440: PPUSH
10441: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10445: LD_EXP 34
10449: PUSH
10450: LD_EXP 27
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PPUSH
10459: LD_INT 2
10461: PPUSH
10462: CALL_OW 235
// InGameOff ;
10466: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
10470: LD_STRING Hill
10472: PPUSH
10473: CALL_OW 337
// Hint ( BunkerHill ) ;
10477: LD_STRING BunkerHill
10479: PPUSH
10480: CALL_OW 339
// SetAreaMapShow ( dontGoArea , 1 ) ;
10484: LD_INT 20
10486: PPUSH
10487: LD_INT 1
10489: PPUSH
10490: CALL_OW 424
// allowToPatrol := true ;
10494: LD_ADDR_EXP 12
10498: PUSH
10499: LD_INT 1
10501: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10502: LD_INT 3150
10504: PPUSH
10505: CALL_OW 67
// InitHc ;
10509: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
10513: LD_ADDR_VAR 0 1
10517: PUSH
10518: DOUBLE
10519: LD_INT 1
10521: DEC
10522: ST_TO_ADDR
10523: LD_INT 3
10525: PUSH
10526: LD_INT 3
10528: PUSH
10529: LD_INT 2
10531: PUSH
10532: LD_INT 2
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: PUSH
10541: LD_OWVAR 67
10545: ARRAY
10546: PUSH
10547: FOR_TO
10548: IFFALSE 10815
// begin uc_side := 2 ;
10550: LD_ADDR_OWVAR 20
10554: PUSH
10555: LD_INT 2
10557: ST_TO_ADDR
// uc_nation := 2 ;
10558: LD_ADDR_OWVAR 21
10562: PUSH
10563: LD_INT 2
10565: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 , 2 ] [ Difficulty ] ) ;
10566: LD_INT 0
10568: PPUSH
10569: LD_INT 1
10571: PUSH
10572: LD_INT 3
10574: PUSH
10575: LD_INT 1
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: LIST
10582: PUSH
10583: LD_VAR 0 1
10587: PUSH
10588: LD_INT 3
10590: MOD
10591: PUSH
10592: LD_INT 1
10594: PLUS
10595: ARRAY
10596: PPUSH
10597: LD_INT 3
10599: PUSH
10600: LD_INT 2
10602: PUSH
10603: LD_INT 2
10605: PUSH
10606: LD_INT 2
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: PUSH
10615: LD_OWVAR 67
10619: ARRAY
10620: PPUSH
10621: CALL_OW 380
// un := CreateHuman ;
10625: LD_ADDR_VAR 0 2
10629: PUSH
10630: CALL_OW 44
10634: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10635: LD_ADDR_EXP 37
10639: PUSH
10640: LD_EXP 37
10644: PUSH
10645: LD_VAR 0 2
10649: UNION
10650: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10651: LD_INT 2
10653: PPUSH
10654: LD_INT 2
10656: PPUSH
10657: LD_INT 13
10659: PPUSH
10660: LD_INT 2
10662: PUSH
10663: LD_INT 1
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PUSH
10670: LD_VAR 0 1
10674: PUSH
10675: LD_INT 2
10677: MOD
10678: PUSH
10679: LD_INT 1
10681: PLUS
10682: ARRAY
10683: PPUSH
10684: LD_INT 1
10686: PPUSH
10687: LD_INT 27
10689: PUSH
10690: LD_INT 25
10692: PUSH
10693: LD_INT 27
10695: PUSH
10696: LD_INT 23
10698: PUSH
10699: LD_INT 23
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: PUSH
10709: LD_OWVAR 67
10713: PUSH
10714: LD_INT 0
10716: PPUSH
10717: LD_INT 1
10719: PPUSH
10720: CALL_OW 12
10724: PLUS
10725: ARRAY
10726: PPUSH
10727: LD_INT 77
10729: PPUSH
10730: CALL 370 0 7
// veh := CreateVehicle ;
10734: LD_ADDR_VAR 0 3
10738: PUSH
10739: CALL_OW 45
10743: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10744: LD_VAR 0 3
10748: PPUSH
10749: LD_INT 2
10751: PPUSH
10752: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10756: LD_VAR 0 3
10760: PPUSH
10761: LD_INT 178
10763: PPUSH
10764: LD_INT 2
10766: PPUSH
10767: LD_INT 2
10769: PPUSH
10770: LD_INT 0
10772: PPUSH
10773: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10777: LD_VAR 0 2
10781: PPUSH
10782: LD_VAR 0 3
10786: PPUSH
10787: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10791: LD_VAR 0 2
10795: PPUSH
10796: LD_INT 183
10798: PPUSH
10799: LD_INT 11
10801: PPUSH
10802: CALL_OW 111
// wait ( 0 0$2 ) ;
10806: LD_INT 70
10808: PPUSH
10809: CALL_OW 67
// end ;
10813: GO 10547
10815: POP
10816: POP
// end ;
10817: PPOPN 4
10819: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10820: LD_EXP 4
10824: PUSH
10825: LD_EXP 35
10829: PPUSH
10830: CALL_OW 302
10834: AND
10835: IFFALSE 10884
10837: GO 10839
10839: DISABLE
// begin DialogueOn ;
10840: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10844: LD_EXP 35
10848: PPUSH
10849: LD_STRING DA-lab-1
10851: PPUSH
10852: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10856: LD_EXP 35
10860: PPUSH
10861: LD_STRING DA-lab-2
10863: PPUSH
10864: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10868: LD_EXP 25
10872: PPUSH
10873: LD_STRING DH-lab-3
10875: PPUSH
10876: CALL_OW 88
// DialogueOff ;
10880: CALL_OW 7
// end ;
10884: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10885: LD_INT 17
10887: PPUSH
10888: LD_INT 2
10890: PPUSH
10891: CALL_OW 321
10895: PUSH
10896: LD_INT 2
10898: EQUAL
10899: IFFALSE 11031
10901: GO 10903
10903: DISABLE
10904: LD_INT 0
10906: PPUSH
// begin DialogueOn ;
10907: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10911: LD_EXP 35
10915: PPUSH
10916: LD_STRING DA-Cam-1
10918: PPUSH
10919: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10923: LD_EXP 35
10927: PPUSH
10928: LD_STRING DA-Cam-2
10930: PPUSH
10931: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10935: LD_EXP 35
10939: PPUSH
10940: LD_STRING DA-Cam-3
10942: PPUSH
10943: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10947: LD_EXP 25
10951: PPUSH
10952: LD_STRING DH-Cam-4
10954: PPUSH
10955: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
10959: LD_EXP 30
10963: PPUSH
10964: LD_STRING DK-Cam-5
10966: PPUSH
10967: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
10971: LD_EXP 30
10975: PPUSH
10976: LD_STRING DK-Cam-6
10978: PPUSH
10979: CALL_OW 88
// DialogueOff ;
10983: CALL_OW 7
// Query ( Camera ) ;
10987: LD_STRING Camera
10989: PPUSH
10990: CALL_OW 97
// hiddenCameraAllowed := true ;
10994: LD_ADDR_EXP 5
10998: PUSH
10999: LD_INT 1
11001: ST_TO_ADDR
// for i in camAreas do
11002: LD_ADDR_VAR 0 1
11006: PUSH
11007: LD_EXP 8
11011: PUSH
11012: FOR_IN
11013: IFFALSE 11029
// SetAreaMapShow ( i , 1 ) ;
11015: LD_VAR 0 1
11019: PPUSH
11020: LD_INT 1
11022: PPUSH
11023: CALL_OW 424
11027: GO 11012
11029: POP
11030: POP
// end ;
11031: PPOPN 1
11033: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
11034: LD_EXP 8
11038: NOT
11039: PUSH
11040: LD_EXP 5
11044: AND
11045: IFFALSE 11143
11047: GO 11049
11049: DISABLE
11050: LD_INT 0
11052: PPUSH
// begin stop_talking := true ;
11053: LD_ADDR_OWVAR 56
11057: PUSH
11058: LD_INT 1
11060: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
11061: LD_ADDR_VAR 0 1
11065: PUSH
11066: LD_INT 22
11068: PUSH
11069: LD_INT 2
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: PUSH
11076: LD_INT 21
11078: PUSH
11079: LD_INT 1
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: PUSH
11086: LD_INT 23
11088: PUSH
11089: LD_INT 2
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: LIST
11100: PPUSH
11101: CALL_OW 69
11105: PUSH
11106: FOR_IN
11107: IFFALSE 11126
// AddExperience ( i , 2 , 450 ) ;
11109: LD_VAR 0 1
11113: PPUSH
11114: LD_INT 2
11116: PPUSH
11117: LD_INT 450
11119: PPUSH
11120: CALL_OW 492
11124: GO 11106
11126: POP
11127: POP
// stop_talking := false ;
11128: LD_ADDR_OWVAR 56
11132: PUSH
11133: LD_INT 0
11135: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
11136: LD_STRING ACH_CAMERA
11138: PPUSH
11139: CALL_OW 543
// end ;
11143: PPOPN 1
11145: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
11146: LD_EXP 9
11150: PUSH
11151: LD_EXP 11
11155: NOT
11156: AND
11157: IFFALSE 11216
11159: GO 11161
11161: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
11162: LD_EXP 9
11166: PPUSH
11167: CALL_OW 250
11171: PPUSH
11172: LD_EXP 9
11176: PPUSH
11177: CALL_OW 251
11181: PPUSH
11182: LD_INT 2
11184: PPUSH
11185: LD_INT 6
11187: NEG
11188: PPUSH
11189: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
11193: LD_EXP 9
11197: PPUSH
11198: CALL_OW 87
// wait ( 0 0$1 ) ;
11202: LD_INT 35
11204: PPUSH
11205: CALL_OW 67
// YouLost ( Spotted ) ;
11209: LD_STRING Spotted
11211: PPUSH
11212: CALL_OW 104
// end ;
11216: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
11217: LD_INT 3
11219: PUSH
11220: LD_INT 6
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PPUSH
11227: LD_INT 2
11229: PPUSH
11230: LD_EXP 47
11234: PPUSH
11235: CALL 1034 0 3
11239: IFFALSE 11272
11241: GO 11243
11243: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
11244: LD_ADDR_EXP 9
11248: PUSH
11249: LD_INT 3
11251: PUSH
11252: LD_INT 6
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: PPUSH
11259: LD_INT 2
11261: PPUSH
11262: LD_EXP 47
11266: PPUSH
11267: CALL 1034 0 3
11271: ST_TO_ADDR
11272: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
11273: LD_INT 22
11275: PUSH
11276: LD_INT 6
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: PUSH
11283: LD_INT 30
11285: PUSH
11286: LD_INT 32
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PUSH
11293: LD_INT 3
11295: PUSH
11296: LD_INT 24
11298: PUSH
11299: LD_INT 1000
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: LIST
11314: PPUSH
11315: CALL_OW 69
11319: IFFALSE 11380
11321: GO 11323
11323: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
11324: LD_ADDR_EXP 9
11328: PUSH
11329: LD_INT 22
11331: PUSH
11332: LD_INT 6
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: LD_INT 30
11341: PUSH
11342: LD_INT 32
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: LD_INT 3
11351: PUSH
11352: LD_INT 24
11354: PUSH
11355: LD_INT 1000
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: LIST
11370: PPUSH
11371: CALL_OW 69
11375: PUSH
11376: LD_INT 1
11378: ARRAY
11379: ST_TO_ADDR
11380: END
// every 0 0$1 trigger russianAlert and FilterUnitsInArea ( kirovBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , towers , noncombat ;
11381: LD_EXP 9
11385: PUSH
11386: LD_INT 21
11388: PPUSH
11389: LD_INT 21
11391: PUSH
11392: LD_INT 3
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: PUSH
11399: LD_INT 3
11401: PUSH
11402: LD_INT 24
11404: PUSH
11405: LD_INT 1000
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: PPUSH
11420: CALL_OW 70
11424: AND
11425: IFFALSE 11664
11427: GO 11429
11429: DISABLE
11430: LD_INT 0
11432: PPUSH
11433: PPUSH
11434: PPUSH
11435: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11436: LD_ADDR_VAR 0 4
11440: PUSH
11441: LD_EXP 42
11445: PUSH
11446: LD_EXP 44
11450: PUSH
11451: LD_EXP 45
11455: UNION
11456: PPUSH
11457: LD_INT 3
11459: PUSH
11460: LD_INT 25
11462: PUSH
11463: LD_INT 1
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PPUSH
11474: CALL_OW 72
11478: UNION
11479: ST_TO_ADDR
// for i in noncombat do
11480: LD_ADDR_VAR 0 1
11484: PUSH
11485: LD_VAR 0 4
11489: PUSH
11490: FOR_IN
11491: IFFALSE 11587
// begin if IsInUnit ( i ) then
11493: LD_VAR 0 1
11497: PPUSH
11498: CALL_OW 310
11502: IFFALSE 11513
// ComExitBuilding ( i ) ;
11504: LD_VAR 0 1
11508: PPUSH
11509: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
11513: LD_VAR 0 1
11517: PPUSH
11518: LD_INT 114
11520: PPUSH
11521: LD_INT 97
11523: PPUSH
11524: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
11528: LD_VAR 0 1
11532: PPUSH
11533: LD_INT 99
11535: PPUSH
11536: LD_INT 128
11538: PPUSH
11539: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
11543: LD_VAR 0 1
11547: PPUSH
11548: LD_INT 91
11550: PPUSH
11551: LD_INT 145
11553: PPUSH
11554: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
11558: LD_VAR 0 1
11562: PPUSH
11563: LD_INT 82
11565: PPUSH
11566: LD_INT 153
11568: PPUSH
11569: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
11573: LD_VAR 0 1
11577: PPUSH
11578: LD_INT 16
11580: PPUSH
11581: CALL_OW 173
// end ;
11585: GO 11490
11587: POP
11588: POP
// if not allowHeikeAttack then
11589: LD_EXP 11
11593: NOT
11594: IFFALSE 11598
// exit ;
11596: GO 11664
// wait ( 0 0$05 ) ;
11598: LD_INT 175
11600: PPUSH
11601: CALL_OW 67
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11605: LD_EXP 40
11609: PPUSH
11610: LD_STRING D9a-Kur-1
11612: PPUSH
11613: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11617: LD_EXP 43
11621: PPUSH
11622: LD_STRING D9a-Bur-1
11624: PPUSH
11625: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11629: LD_EXP 40
11633: PPUSH
11634: LD_STRING D9a-Kur-2
11636: PPUSH
11637: CALL_OW 94
// omicronFall := true ;
11641: LD_ADDR_EXP 13
11645: PUSH
11646: LD_INT 1
11648: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11649: LD_INT 105
11651: PPUSH
11652: CALL_OW 67
// retreatFromOmicron := true ;
11656: LD_ADDR_EXP 20
11660: PUSH
11661: LD_INT 1
11663: ST_TO_ADDR
// end ;
11664: PPOPN 4
11666: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11667: LD_INT 16
11669: PPUSH
11670: LD_INT 3
11672: PUSH
11673: LD_INT 22
11675: PUSH
11676: LD_INT 2
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 23
11689: PUSH
11690: LD_INT 3
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PPUSH
11701: CALL_OW 70
11705: IFFALSE 11788
11707: GO 11709
11709: DISABLE
11710: LD_INT 0
11712: PPUSH
// begin enable ;
11713: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11714: LD_ADDR_VAR 0 1
11718: PUSH
11719: LD_INT 16
11721: PPUSH
11722: LD_INT 3
11724: PUSH
11725: LD_INT 22
11727: PUSH
11728: LD_INT 2
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: PUSH
11739: LD_INT 23
11741: PUSH
11742: LD_INT 3
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: PPUSH
11753: CALL_OW 70
11757: PUSH
11758: FOR_IN
11759: IFFALSE 11786
// begin escapeCounter := escapeCounter + 1 ;
11761: LD_ADDR_EXP 19
11765: PUSH
11766: LD_EXP 19
11770: PUSH
11771: LD_INT 1
11773: PLUS
11774: ST_TO_ADDR
// RemoveUnit ( i ) ;
11775: LD_VAR 0 1
11779: PPUSH
11780: CALL_OW 64
// end ;
11784: GO 11758
11786: POP
11787: POP
// end ;
11788: PPOPN 1
11790: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11791: LD_OWVAR 1
11795: PUSH
11796: LD_INT 13650
11798: PUSH
11799: LD_INT 0
11801: PPUSH
11802: LD_INT 3150
11804: PPUSH
11805: CALL_OW 12
11809: PLUS
11810: GREATEREQUAL
11811: IFFALSE 11820
11813: GO 11815
11815: DISABLE
// SmallAmericanReinforcements ;
11816: CALL 7093 0 0
11820: END
// every 0 0$1 trigger tick >= [ 15 15$00 , 14 14$00 , 13 13$00 , 12 12$00 ] [ Difficulty ] do
11821: LD_OWVAR 1
11825: PUSH
11826: LD_INT 31500
11828: PUSH
11829: LD_INT 29400
11831: PUSH
11832: LD_INT 27300
11834: PUSH
11835: LD_INT 25200
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: PUSH
11844: LD_OWVAR 67
11848: ARRAY
11849: GREATEREQUAL
11850: IFFALSE 11915
11852: GO 11854
11854: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11855: LD_EXP 48
11859: PPUSH
11860: LD_INT 21
11862: PUSH
11863: LD_INT 2
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PPUSH
11870: CALL_OW 72
11874: PPUSH
11875: LD_INT 62
11877: PPUSH
11878: LD_INT 22
11880: PPUSH
11881: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11885: LD_EXP 49
11889: PPUSH
11890: LD_INT 69
11892: PPUSH
11893: LD_INT 27
11895: PPUSH
11896: CALL_OW 111
// wait ( 1 1$00 ) ;
11900: LD_INT 2100
11902: PPUSH
11903: CALL_OW 67
// startAttackOnOmicron := true ;
11907: LD_ADDR_EXP 6
11911: PUSH
11912: LD_INT 1
11914: ST_TO_ADDR
// end ;
11915: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11916: LD_EXP 22
11920: PUSH
11921: LD_INT 0
11923: EQUAL
11924: IFFALSE 13974
11926: GO 11928
11928: DISABLE
11929: LD_INT 0
11931: PPUSH
11932: PPUSH
11933: PPUSH
11934: PPUSH
11935: PPUSH
11936: PPUSH
11937: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11938: LD_INT 5
11940: PPUSH
11941: LD_INT 2
11943: PPUSH
11944: CALL_OW 343
// PrepareOmarForces ;
11948: CALL 1604 0 0
// wait ( 0 0$03 ) ;
11952: LD_INT 105
11954: PPUSH
11955: CALL_OW 67
// allowHeikeAttack := true ;
11959: LD_ADDR_EXP 11
11963: PUSH
11964: LD_INT 1
11966: ST_TO_ADDR
// activeGrishkoAI := false ;
11967: LD_ADDR_EXP 10
11971: PUSH
11972: LD_INT 0
11974: ST_TO_ADDR
// SetAreaMapShow ( dontGoArea , 0 ) ;
11975: LD_INT 20
11977: PPUSH
11978: LD_INT 0
11980: PPUSH
11981: CALL_OW 424
// if not hillBase then
11985: LD_EXP 15
11989: NOT
11990: IFFALSE 11999
// ChangeMissionObjectives ( HillDone ) ;
11992: LD_STRING HillDone
11994: PPUSH
11995: CALL_OW 337
// CenterOnUnits ( Omar ) ;
11999: LD_EXP 33
12003: PPUSH
12004: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
12008: LD_ADDR_VAR 0 1
12012: PUSH
12013: LD_INT 22
12015: PUSH
12016: LD_INT 2
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PUSH
12023: LD_INT 21
12025: PUSH
12026: LD_INT 1
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: PPUSH
12037: CALL_OW 69
12041: PUSH
12042: FOR_IN
12043: IFFALSE 12067
// if HasTask ( i ) then
12045: LD_VAR 0 1
12049: PPUSH
12050: CALL_OW 314
12054: IFFALSE 12065
// ComHold ( i ) ;
12056: LD_VAR 0 1
12060: PPUSH
12061: CALL_OW 140
12065: GO 12042
12067: POP
12068: POP
// DialogueOn ;
12069: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
12073: LD_EXP 33
12077: PPUSH
12078: LD_STRING DO-assault-1
12080: PPUSH
12081: CALL_OW 94
// DialogueOff ;
12085: CALL_OW 7
// game_speed := 4 ;
12089: LD_ADDR_OWVAR 65
12093: PUSH
12094: LD_INT 4
12096: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
12097: LD_ADDR_VAR 0 1
12101: PUSH
12102: LD_EXP 46
12106: PPUSH
12107: LD_INT 3
12109: PUSH
12110: LD_INT 54
12112: PUSH
12113: EMPTY
12114: LIST
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PPUSH
12120: CALL_OW 72
12124: PUSH
12125: FOR_IN
12126: IFFALSE 12145
// ComMoveXY ( i , 226 , 114 ) ;
12128: LD_VAR 0 1
12132: PPUSH
12133: LD_INT 226
12135: PPUSH
12136: LD_INT 114
12138: PPUSH
12139: CALL_OW 111
12143: GO 12125
12145: POP
12146: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
12147: LD_EXP 41
12151: PPUSH
12152: LD_INT 22
12154: PUSH
12155: LD_INT 6
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: PUSH
12162: LD_INT 30
12164: PUSH
12165: LD_INT 4
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: PPUSH
12176: CALL_OW 69
12180: PPUSH
12181: LD_EXP 41
12185: PPUSH
12186: CALL_OW 74
12190: PPUSH
12191: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
12195: LD_STRING Attack
12197: PPUSH
12198: CALL_OW 337
// music_class := music_combat ;
12202: LD_ADDR_OWVAR 72
12206: PUSH
12207: LD_INT 1
12209: ST_TO_ADDR
// music_nat := 4 ;
12210: LD_ADDR_OWVAR 71
12214: PUSH
12215: LD_INT 4
12217: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
12218: LD_INT 5
12220: PPUSH
12221: LD_EXP 41
12225: PPUSH
12226: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12230: LD_INT 6
12232: PPUSH
12233: LD_EXP 38
12237: PPUSH
12238: LD_INT 25
12240: PUSH
12241: LD_INT 1
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: PPUSH
12248: CALL_OW 72
12252: PUSH
12253: LD_INT 4
12255: ARRAY
12256: PPUSH
12257: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
12261: LD_ADDR_VAR 0 1
12265: PUSH
12266: LD_EXP 38
12270: PPUSH
12271: LD_INT 3
12273: PUSH
12274: LD_INT 25
12276: PUSH
12277: LD_INT 4
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: PPUSH
12288: CALL_OW 72
12292: PUSH
12293: FOR_IN
12294: IFFALSE 12313
// ComAgressiveMove ( i , 221 , 110 ) ;
12296: LD_VAR 0 1
12300: PPUSH
12301: LD_INT 221
12303: PPUSH
12304: LD_INT 110
12306: PPUSH
12307: CALL_OW 114
12311: GO 12293
12313: POP
12314: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
12315: LD_EXP 38
12319: PPUSH
12320: LD_INT 25
12322: PUSH
12323: LD_INT 4
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: PPUSH
12330: CALL_OW 72
12334: PPUSH
12335: LD_INT 214
12337: PPUSH
12338: LD_INT 124
12340: PPUSH
12341: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
12345: LD_EXP 38
12349: PPUSH
12350: LD_INT 25
12352: PUSH
12353: LD_INT 1
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: PPUSH
12360: CALL_OW 72
12364: PUSH
12365: LD_INT 4
12367: ARRAY
12368: PPUSH
12369: LD_INT 214
12371: PPUSH
12372: LD_INT 114
12374: PPUSH
12375: LD_INT 0
12377: PPUSH
12378: CALL_OW 132
// if IsOk ( Grishko ) then
12382: LD_EXP 41
12386: PPUSH
12387: CALL_OW 302
12391: IFFALSE 12417
// begin SayRadio ( Grishko , D9-Gri-1 ) ;
12393: LD_EXP 41
12397: PPUSH
12398: LD_STRING D9-Gri-1
12400: PPUSH
12401: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
12405: LD_EXP 40
12409: PPUSH
12410: LD_STRING D9-Kur-1
12412: PPUSH
12413: CALL_OW 94
// end ; wait ( 0 0$1 ) ;
12417: LD_INT 35
12419: PPUSH
12420: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
12424: LD_EXP 33
12428: PPUSH
12429: LD_INT 233
12431: PPUSH
12432: LD_INT 130
12434: PPUSH
12435: CALL_OW 114
// if IsOk ( Grishko ) then
12439: LD_EXP 41
12443: PPUSH
12444: CALL_OW 302
12448: IFFALSE 12474
// begin SayRadio ( Grishko , D9-Gri-2 ) ;
12450: LD_EXP 41
12454: PPUSH
12455: LD_STRING D9-Gri-2
12457: PPUSH
12458: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12462: LD_EXP 40
12466: PPUSH
12467: LD_STRING D9-Kur-2
12469: PPUSH
12470: CALL_OW 94
// end ; ComExitBuilding ( Grishko ) ;
12474: LD_EXP 41
12478: PPUSH
12479: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
12483: LD_EXP 41
12487: PPUSH
12488: LD_INT 211
12490: PPUSH
12491: LD_INT 104
12493: PPUSH
12494: CALL_OW 171
// AddComHold ( Grishko ) ;
12498: LD_EXP 41
12502: PPUSH
12503: CALL_OW 200
// repeat wait ( 3 ) ;
12507: LD_INT 3
12509: PPUSH
12510: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
12514: LD_EXP 41
12518: PPUSH
12519: CALL_OW 310
12523: NOT
12524: IFFALSE 12507
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
12526: LD_EXP 38
12530: PPUSH
12531: LD_INT 34
12533: PUSH
12534: LD_INT 26
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PPUSH
12541: CALL_OW 72
12545: PPUSH
12546: LD_EXP 41
12550: PPUSH
12551: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12555: LD_EXP 38
12559: PPUSH
12560: LD_INT 34
12562: PUSH
12563: LD_INT 26
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: PPUSH
12570: CALL_OW 72
12574: PPUSH
12575: LD_INT 215
12577: PPUSH
12578: LD_INT 106
12580: PPUSH
12581: CALL_OW 174
// repeat wait ( 3 ) ;
12585: LD_INT 3
12587: PPUSH
12588: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12592: LD_EXP 41
12596: PPUSH
12597: CALL_OW 256
12601: PUSH
12602: LD_INT 1000
12604: LESS
12605: IFFALSE 12585
// NormalAttack ( 5 , Grishko ) ;
12607: LD_INT 5
12609: PPUSH
12610: LD_EXP 41
12614: PPUSH
12615: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12619: LD_INT 6
12621: PPUSH
12622: LD_EXP 38
12626: PPUSH
12627: LD_INT 25
12629: PUSH
12630: LD_INT 1
12632: PUSH
12633: EMPTY
12634: LIST
12635: LIST
12636: PPUSH
12637: CALL_OW 72
12641: PUSH
12642: LD_INT 4
12644: ARRAY
12645: PPUSH
12646: CALL_OW 472
// if IsOk ( Grishko ) then
12650: LD_EXP 41
12654: PPUSH
12655: CALL_OW 302
12659: IFFALSE 12685
// begin SayRadio ( Grishko , D9-Gri-3 ) ;
12661: LD_EXP 41
12665: PPUSH
12666: LD_STRING D9-Gri-3
12668: PPUSH
12669: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12673: LD_EXP 40
12677: PPUSH
12678: LD_STRING D9-Kur-3
12680: PPUSH
12681: CALL_OW 94
// end ; music_class := music_auto ;
12685: LD_ADDR_OWVAR 72
12689: PUSH
12690: LD_INT 0
12692: ST_TO_ADDR
// music_nat := music_auto ;
12693: LD_ADDR_OWVAR 71
12697: PUSH
12698: LD_INT 0
12700: ST_TO_ADDR
// for i in omarSquad do
12701: LD_ADDR_VAR 0 1
12705: PUSH
12706: LD_EXP 38
12710: PUSH
12711: FOR_IN
12712: IFFALSE 12854
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12714: LD_VAR 0 1
12718: PPUSH
12719: CALL_OW 247
12723: PUSH
12724: LD_INT 2
12726: EQUAL
12727: PUSH
12728: LD_VAR 0 1
12732: PPUSH
12733: CALL_OW 256
12737: PUSH
12738: LD_INT 1000
12740: LESS
12741: AND
12742: IFFALSE 12808
// begin driver := IsDrivenBy ( i ) ;
12744: LD_ADDR_VAR 0 2
12748: PUSH
12749: LD_VAR 0 1
12753: PPUSH
12754: CALL_OW 311
12758: ST_TO_ADDR
// veh := i ;
12759: LD_ADDR_VAR 0 3
12763: PUSH
12764: LD_VAR 0 1
12768: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12769: LD_VAR 0 2
12773: PPUSH
12774: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12778: LD_VAR 0 2
12782: PPUSH
12783: LD_VAR 0 3
12787: PPUSH
12788: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12792: LD_VAR 0 2
12796: PPUSH
12797: LD_VAR 0 3
12801: PPUSH
12802: CALL_OW 180
// end else
12806: GO 12852
// if GetLives ( i ) < 500 then
12808: LD_VAR 0 1
12812: PPUSH
12813: CALL_OW 256
12817: PUSH
12818: LD_INT 500
12820: LESS
12821: IFFALSE 12852
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12823: LD_EXP 38
12827: PPUSH
12828: LD_INT 25
12830: PUSH
12831: LD_INT 4
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PPUSH
12838: CALL_OW 72
12842: PPUSH
12843: LD_VAR 0 1
12847: PPUSH
12848: CALL_OW 188
// end ; end ;
12852: GO 12711
12854: POP
12855: POP
// repeat wait ( 0 0$1 ) ;
12856: LD_INT 35
12858: PPUSH
12859: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12863: LD_EXP 38
12867: PPUSH
12868: LD_INT 3
12870: PUSH
12871: LD_INT 24
12873: PUSH
12874: LD_INT 1000
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PUSH
12885: LD_INT 21
12887: PUSH
12888: LD_INT 2
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: PPUSH
12899: CALL_OW 72
12903: NOT
12904: PUSH
12905: LD_EXP 38
12909: PPUSH
12910: LD_INT 3
12912: PUSH
12913: LD_INT 24
12915: PUSH
12916: LD_INT 250
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PPUSH
12927: CALL_OW 72
12931: NOT
12932: AND
12933: IFFALSE 12856
// wait ( 0 0$2 ) ;
12935: LD_INT 70
12937: PPUSH
12938: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12942: LD_ADDR_VAR 0 5
12946: PUSH
12947: LD_EXP 38
12951: PPUSH
12952: LD_INT 58
12954: PUSH
12955: EMPTY
12956: LIST
12957: PUSH
12958: LD_INT 21
12960: PUSH
12961: LD_INT 2
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PPUSH
12972: CALL_OW 72
12976: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
12977: LD_ADDR_VAR 0 6
12981: PUSH
12982: LD_EXP 38
12986: PPUSH
12987: LD_INT 25
12989: PUSH
12990: LD_INT 3
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: PUSH
12997: LD_INT 3
12999: PUSH
13000: LD_INT 55
13002: PUSH
13003: EMPTY
13004: LIST
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: PPUSH
13014: CALL_OW 72
13018: ST_TO_ADDR
// for i := 1 to tmp do
13019: LD_ADDR_VAR 0 1
13023: PUSH
13024: DOUBLE
13025: LD_INT 1
13027: DEC
13028: ST_TO_ADDR
13029: LD_VAR 0 5
13033: PUSH
13034: FOR_TO
13035: IFFALSE 13065
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
13037: LD_VAR 0 6
13041: PUSH
13042: LD_VAR 0 1
13046: ARRAY
13047: PPUSH
13048: LD_VAR 0 5
13052: PUSH
13053: LD_VAR 0 1
13057: ARRAY
13058: PPUSH
13059: CALL_OW 120
13063: GO 13034
13065: POP
13066: POP
// wait ( 0 0$5 ) ;
13067: LD_INT 175
13069: PPUSH
13070: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
13074: LD_EXP 38
13078: PPUSH
13079: LD_INT 199
13081: PPUSH
13082: LD_INT 141
13084: PPUSH
13085: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
13089: LD_EXP 33
13093: PPUSH
13094: LD_INT 190
13096: PPUSH
13097: LD_INT 143
13099: PPUSH
13100: CALL_OW 114
// AddComHold ( Omar ) ;
13104: LD_EXP 33
13108: PPUSH
13109: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
13113: LD_EXP 38
13117: PPUSH
13118: LD_INT 2
13120: PUSH
13121: LD_INT 25
13123: PUSH
13124: LD_INT 1
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PUSH
13131: LD_INT 25
13133: PUSH
13134: LD_INT 4
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: LIST
13145: PPUSH
13146: CALL_OW 72
13150: PPUSH
13151: LD_INT 161
13153: PPUSH
13154: LD_INT 130
13156: PPUSH
13157: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
13161: LD_EXP 38
13165: PPUSH
13166: LD_INT 25
13168: PUSH
13169: LD_INT 1
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PPUSH
13176: CALL_OW 72
13180: PPUSH
13181: LD_INT 163
13183: PPUSH
13184: LD_INT 122
13186: PPUSH
13187: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
13191: LD_EXP 38
13195: PPUSH
13196: LD_INT 25
13198: PUSH
13199: LD_INT 1
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PPUSH
13206: CALL_OW 72
13210: PUSH
13211: LD_INT 4
13213: ARRAY
13214: PPUSH
13215: LD_INT 165
13217: PPUSH
13218: LD_INT 118
13220: PPUSH
13221: LD_INT 0
13223: PPUSH
13224: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
13228: LD_EXP 38
13232: PPUSH
13233: LD_INT 25
13235: PUSH
13236: LD_INT 1
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: PPUSH
13243: CALL_OW 72
13247: PUSH
13248: LD_INT 4
13250: ARRAY
13251: PPUSH
13252: LD_INT 159
13254: PPUSH
13255: LD_INT 116
13257: PPUSH
13258: LD_INT 0
13260: PPUSH
13261: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
13265: LD_EXP 38
13269: PPUSH
13270: LD_INT 21
13272: PUSH
13273: LD_INT 2
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: PPUSH
13280: CALL_OW 72
13284: PPUSH
13285: LD_INT 169
13287: PPUSH
13288: LD_INT 114
13290: PPUSH
13291: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
13295: LD_INT 35
13297: PPUSH
13298: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
13302: LD_ADDR_VAR 0 5
13306: PUSH
13307: LD_EXP 38
13311: PPUSH
13312: LD_INT 25
13314: PUSH
13315: LD_INT 1
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PPUSH
13322: CALL_OW 72
13326: ST_TO_ADDR
// for i in tmp do
13327: LD_ADDR_VAR 0 1
13331: PUSH
13332: LD_VAR 0 5
13336: PUSH
13337: FOR_IN
13338: IFFALSE 13435
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
13340: LD_VAR 0 1
13344: PPUSH
13345: CALL_OW 256
13349: PUSH
13350: LD_INT 600
13352: LESS
13353: PUSH
13354: LD_VAR 0 1
13358: PPUSH
13359: LD_INT 161
13361: PPUSH
13362: LD_INT 130
13364: PPUSH
13365: CALL_OW 297
13369: PUSH
13370: LD_INT 6
13372: GREATER
13373: AND
13374: IFFALSE 13391
// ComMoveXY ( i , 161 , 130 ) ;
13376: LD_VAR 0 1
13380: PPUSH
13381: LD_INT 161
13383: PPUSH
13384: LD_INT 130
13386: PPUSH
13387: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
13391: LD_VAR 0 1
13395: PPUSH
13396: CALL_OW 256
13400: PUSH
13401: LD_INT 1000
13403: EQUAL
13404: PUSH
13405: LD_VAR 0 1
13409: PPUSH
13410: CALL_OW 314
13414: NOT
13415: AND
13416: IFFALSE 13433
// ComAgressiveMove ( i , 160 , 109 ) ;
13418: LD_VAR 0 1
13422: PPUSH
13423: LD_INT 160
13425: PPUSH
13426: LD_INT 109
13428: PPUSH
13429: CALL_OW 114
// end ;
13433: GO 13337
13435: POP
13436: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
13437: LD_ADDR_VAR 0 5
13441: PUSH
13442: LD_EXP 38
13446: PPUSH
13447: LD_INT 21
13449: PUSH
13450: LD_INT 2
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: PPUSH
13457: CALL_OW 72
13461: ST_TO_ADDR
// for i in tmp do
13462: LD_ADDR_VAR 0 1
13466: PUSH
13467: LD_VAR 0 5
13471: PUSH
13472: FOR_IN
13473: IFFALSE 13739
// begin tmp2 := IsDrivenBy ( i ) ;
13475: LD_ADDR_VAR 0 6
13479: PUSH
13480: LD_VAR 0 1
13484: PPUSH
13485: CALL_OW 311
13489: ST_TO_ADDR
// if not tmp2 then
13490: LD_VAR 0 6
13494: NOT
13495: IFFALSE 13499
// continue ;
13497: GO 13472
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
13499: LD_VAR 0 1
13503: PPUSH
13504: CALL_OW 256
13508: PUSH
13509: LD_INT 600
13511: GREATEREQUAL
13512: PUSH
13513: LD_VAR 0 1
13517: PPUSH
13518: CALL_OW 110
13522: PUSH
13523: LD_INT 1
13525: EQUAL
13526: AND
13527: IFFALSE 13541
// SetTag ( i , 0 ) ;
13529: LD_VAR 0 1
13533: PPUSH
13534: LD_INT 0
13536: PPUSH
13537: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
13541: LD_VAR 0 1
13545: PPUSH
13546: CALL_OW 256
13550: PUSH
13551: LD_INT 600
13553: GREATEREQUAL
13554: PUSH
13555: LD_VAR 0 1
13559: PPUSH
13560: CALL_OW 110
13564: NOT
13565: AND
13566: IFFALSE 13592
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13568: LD_VAR 0 1
13572: PPUSH
13573: LD_VAR 0 7
13577: PPUSH
13578: LD_VAR 0 1
13582: PPUSH
13583: CALL_OW 74
13587: PPUSH
13588: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13592: LD_VAR 0 1
13596: PPUSH
13597: CALL_OW 256
13601: PUSH
13602: LD_INT 600
13604: LESS
13605: PUSH
13606: LD_VAR 0 1
13610: PPUSH
13611: CALL_OW 110
13615: NOT
13616: AND
13617: IFFALSE 13646
// begin SetTag ( i , 1 ) ;
13619: LD_VAR 0 1
13623: PPUSH
13624: LD_INT 1
13626: PPUSH
13627: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13631: LD_VAR 0 1
13635: PPUSH
13636: LD_INT 202
13638: PPUSH
13639: LD_INT 150
13641: PPUSH
13642: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13646: LD_VAR 0 1
13650: PPUSH
13651: CALL_OW 110
13655: PUSH
13656: LD_INT 1
13658: EQUAL
13659: PUSH
13660: LD_VAR 0 1
13664: PPUSH
13665: LD_INT 202
13667: PPUSH
13668: LD_INT 150
13670: PPUSH
13671: CALL_OW 297
13675: PUSH
13676: LD_INT 6
13678: LESS
13679: AND
13680: PUSH
13681: LD_VAR 0 6
13685: AND
13686: IFFALSE 13737
// begin ComExitVehicle ( tmp2 ) ;
13688: LD_VAR 0 6
13692: PPUSH
13693: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13697: LD_VAR 0 6
13701: PPUSH
13702: LD_VAR 0 1
13706: PPUSH
13707: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13711: LD_VAR 0 6
13715: PPUSH
13716: LD_INT 700
13718: PPUSH
13719: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13723: LD_VAR 0 6
13727: PPUSH
13728: LD_VAR 0 1
13732: PPUSH
13733: CALL_OW 180
// end ; end ;
13737: GO 13472
13739: POP
13740: POP
// until kirovDestroyed ;
13741: LD_EXP 16
13745: IFFALSE 13295
// repeat wait ( 0 0$1 ) ;
13747: LD_INT 35
13749: PPUSH
13750: CALL_OW 67
// for i in omarSquad union Omar do
13754: LD_ADDR_VAR 0 1
13758: PUSH
13759: LD_EXP 38
13763: PUSH
13764: LD_EXP 33
13768: UNION
13769: PUSH
13770: FOR_IN
13771: IFFALSE 13941
// if IsInArea ( i , southRoadArea ) then
13773: LD_VAR 0 1
13777: PPUSH
13778: LD_INT 15
13780: PPUSH
13781: CALL_OW 308
13785: IFFALSE 13798
// RemoveUnit ( i ) else
13787: LD_VAR 0 1
13791: PPUSH
13792: CALL_OW 64
13796: GO 13939
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
13798: LD_VAR 0 1
13802: PPUSH
13803: CALL_OW 257
13807: PUSH
13808: LD_INT 3
13810: EQUAL
13811: PUSH
13812: LD_VAR 0 1
13816: PPUSH
13817: CALL_OW 310
13821: NOT
13822: AND
13823: PUSH
13824: LD_INT 22
13826: PUSH
13827: LD_INT 5
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: LD_INT 24
13836: PUSH
13837: LD_INT 251
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: LD_INT 21
13846: PUSH
13847: LD_INT 2
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: PUSH
13854: LD_INT 58
13856: PUSH
13857: EMPTY
13858: LIST
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: PPUSH
13866: CALL_OW 69
13870: AND
13871: IFFALSE 13924
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
13873: LD_VAR 0 1
13877: PPUSH
13878: LD_INT 22
13880: PUSH
13881: LD_INT 5
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: PUSH
13888: LD_INT 21
13890: PUSH
13891: LD_INT 2
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: PUSH
13898: LD_INT 58
13900: PUSH
13901: EMPTY
13902: LIST
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: LIST
13908: PPUSH
13909: CALL_OW 69
13913: PUSH
13914: LD_INT 1
13916: ARRAY
13917: PPUSH
13918: CALL_OW 120
13922: GO 13939
// ComMoveXY ( i , 208 , 162 ) ;
13924: LD_VAR 0 1
13928: PPUSH
13929: LD_INT 208
13931: PPUSH
13932: LD_INT 162
13934: PPUSH
13935: CALL_OW 111
// end ;
13939: GO 13770
13941: POP
13942: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
13943: LD_INT 22
13945: PUSH
13946: LD_INT 5
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: PUSH
13953: LD_INT 21
13955: PUSH
13956: LD_INT 1
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: PPUSH
13967: CALL_OW 69
13971: NOT
13972: IFFALSE 13747
// end ;
13974: PPOPN 7
13976: END
// every 0 0$1 trigger IsDead ( kirov ) do
13977: LD_INT 71
13979: PPUSH
13980: CALL_OW 301
13984: IFFALSE 14001
13986: GO 13988
13988: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
13989: LD_EXP 25
13993: PPUSH
13994: LD_STRING DH-1-Kirov
13996: PPUSH
13997: CALL_OW 88
14001: END
// every 0 0$1 trigger See ( 2 , beria ) do
14002: LD_INT 2
14004: PPUSH
14005: LD_INT 106
14007: PPUSH
14008: CALL_OW 292
14012: IFFALSE 14029
14014: GO 14016
14016: DISABLE
// Say ( Heike , DH-1-Beria ) ;
14017: LD_EXP 25
14021: PPUSH
14022: LD_STRING DH-1-Beria
14024: PPUSH
14025: CALL_OW 88
14029: END
// every 0 0$1 trigger See ( 2 , kagan ) do
14030: LD_INT 2
14032: PPUSH
14033: LD_INT 112
14035: PPUSH
14036: CALL_OW 292
14040: IFFALSE 14307
14042: GO 14044
14044: DISABLE
// begin DialogueOn ;
14045: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
14049: LD_INT 112
14051: PPUSH
14052: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
14056: LD_EXP 25
14060: PPUSH
14061: LD_STRING DH-1-Kagan
14063: PPUSH
14064: CALL_OW 88
// if Kamil then
14068: LD_EXP 29
14072: IFFALSE 14110
// begin Say ( Kamil , DKam-Kagan-2 ) ;
14074: LD_EXP 29
14078: PPUSH
14079: LD_STRING DKam-Kagan-2
14081: PPUSH
14082: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
14086: LD_EXP 26
14090: PPUSH
14091: LD_STRING DG-Kagan-3
14093: PPUSH
14094: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
14098: LD_EXP 26
14102: PPUSH
14103: LD_STRING DG-Kagan-4
14105: PPUSH
14106: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
14110: LD_STRING KaganBase
14112: PPUSH
14113: CALL_OW 97
14117: PUSH
14118: LD_INT 1
14120: DOUBLE
14121: EQUAL
14122: IFTRUE 14126
14124: GO 14221
14126: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
14127: LD_EXP 25
14131: PPUSH
14132: LD_STRING DH-Kagan-5
14134: PPUSH
14135: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
14139: LD_EXP 25
14143: PPUSH
14144: LD_STRING DH-Kagan-6
14146: PPUSH
14147: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
14151: LD_EXP 36
14155: PPUSH
14156: LD_STRING DShar-Kagan-7
14158: PPUSH
14159: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
14163: LD_EXP 25
14167: PPUSH
14168: LD_STRING DH-Kagan-8
14170: PPUSH
14171: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
14175: LD_EXP 25
14179: PPUSH
14180: LD_STRING DH-Kagan-9
14182: PPUSH
14183: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
14187: LD_EXP 36
14191: PPUSH
14192: LD_STRING DShar-Kagan-10
14194: PPUSH
14195: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
14199: LD_EXP 25
14203: PPUSH
14204: LD_STRING DH-Kagan-11
14206: PPUSH
14207: CALL_OW 88
// kaganCaptured := true ;
14211: LD_ADDR_EXP 24
14215: PUSH
14216: LD_INT 1
14218: ST_TO_ADDR
// end ; 2 :
14219: GO 14303
14221: LD_INT 2
14223: DOUBLE
14224: EQUAL
14225: IFTRUE 14229
14227: GO 14302
14229: POP
// begin if FilterAllUnits ( [ f_side , 8 ] ) and Aviradze then
14230: LD_INT 22
14232: PUSH
14233: LD_INT 8
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: PPUSH
14240: CALL_OW 69
14244: PUSH
14245: LD_EXP 35
14249: AND
14250: IFFALSE 14264
// Say ( Heike , DH-Kagan-a-5 ) ;
14252: LD_EXP 25
14256: PPUSH
14257: LD_STRING DH-Kagan-a-5
14259: PPUSH
14260: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
14264: LD_EXP 25
14268: PPUSH
14269: LD_STRING DH-Kagan-a-6
14271: PPUSH
14272: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
14276: LD_EXP 25
14280: PPUSH
14281: LD_STRING DH-Kagan-a-7
14283: PPUSH
14284: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
14288: LD_EXP 26
14292: PPUSH
14293: LD_STRING DG-Kagan-a-8
14295: PPUSH
14296: CALL_OW 88
// end ; end ;
14300: GO 14303
14302: POP
// DialogueOff ;
14303: CALL_OW 7
// end ;
14307: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
14308: LD_EXP 18
14312: PUSH
14313: LD_INT 112
14315: PPUSH
14316: CALL_OW 255
14320: PUSH
14321: LD_INT 2
14323: EQUAL
14324: OR
14325: IFFALSE 14337
14327: GO 14329
14329: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
14330: LD_STRING KaganDone
14332: PPUSH
14333: CALL_OW 337
14337: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
14338: LD_EXP 6
14342: PUSH
14343: LD_EXP 48
14347: PPUSH
14348: LD_INT 95
14350: PUSH
14351: LD_INT 19
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PPUSH
14358: CALL_OW 72
14362: AND
14363: IFFALSE 14440
14365: GO 14367
14367: DISABLE
// begin DialogueOn ;
14368: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
14372: LD_INT 63
14374: PPUSH
14375: LD_INT 32
14377: PPUSH
14378: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
14382: LD_INT 63
14384: PPUSH
14385: LD_INT 32
14387: PPUSH
14388: LD_INT 2
14390: PPUSH
14391: LD_INT 12
14393: NEG
14394: PPUSH
14395: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
14399: LD_EXP 25
14403: PPUSH
14404: LD_STRING DH-Omicron-1
14406: PPUSH
14407: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
14411: LD_EXP 27
14415: PPUSH
14416: LD_STRING DM-Omicron-2
14418: PPUSH
14419: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
14423: LD_INT 63
14425: PPUSH
14426: LD_INT 32
14428: PPUSH
14429: LD_INT 2
14431: PPUSH
14432: CALL_OW 331
// DialogueOff ;
14436: CALL_OW 7
// end ;
14440: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
14441: LD_INT 2
14443: PPUSH
14444: LD_EXP 50
14448: PPUSH
14449: CALL_OW 292
14453: PUSH
14454: LD_EXP 50
14458: PPUSH
14459: CALL_OW 255
14463: PUSH
14464: LD_INT 2
14466: EQUAL
14467: OR
14468: PUSH
14469: LD_INT 106
14471: PPUSH
14472: CALL_OW 255
14476: PUSH
14477: LD_INT 2
14479: EQUAL
14480: OR
14481: PUSH
14482: LD_EXP 50
14486: PPUSH
14487: CALL_OW 302
14491: AND
14492: PUSH
14493: LD_EXP 25
14497: PPUSH
14498: CALL_OW 302
14502: AND
14503: PUSH
14504: LD_EXP 35
14508: PPUSH
14509: CALL_OW 302
14513: AND
14514: IFFALSE 15253
14516: GO 14518
14518: DISABLE
14519: LD_INT 0
14521: PPUSH
14522: PPUSH
14523: PPUSH
14524: PPUSH
14525: PPUSH
// begin DialogueOn ;
14526: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
14530: LD_INT 111
14532: PPUSH
14533: LD_INT 90
14535: PPUSH
14536: LD_INT 2
14538: PPUSH
14539: LD_INT 6
14541: NEG
14542: PPUSH
14543: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
14547: LD_INT 111
14549: PPUSH
14550: LD_INT 90
14552: PPUSH
14553: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
14557: LD_EXP 35
14561: PPUSH
14562: LD_STRING DA-Cap-1
14564: PPUSH
14565: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
14569: LD_EXP 25
14573: PPUSH
14574: LD_STRING DH-Cap-2
14576: PPUSH
14577: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
14581: LD_INT 111
14583: PPUSH
14584: LD_INT 90
14586: PPUSH
14587: LD_INT 2
14589: PPUSH
14590: CALL_OW 331
// DialogueOff ;
14594: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
14598: LD_INT 35
14600: PPUSH
14601: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 110 , 95 , 12 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_distxy , 110 , 95 , 12 ] ] ) ;
14605: LD_EXP 17
14609: PUSH
14610: LD_INT 106
14612: PPUSH
14613: CALL_OW 255
14617: PUSH
14618: LD_INT 2
14620: EQUAL
14621: OR
14622: PUSH
14623: LD_EXP 50
14627: PPUSH
14628: CALL_OW 255
14632: PUSH
14633: LD_INT 2
14635: EQUAL
14636: OR
14637: PUSH
14638: LD_EXP 50
14642: PPUSH
14643: CALL_OW 302
14647: AND
14648: PUSH
14649: LD_EXP 35
14653: PPUSH
14654: CALL_OW 302
14658: AND
14659: PUSH
14660: LD_INT 2
14662: PPUSH
14663: CALL_OW 463
14667: NOT
14668: AND
14669: PUSH
14670: LD_INT 22
14672: PUSH
14673: LD_INT 3
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PUSH
14680: LD_INT 21
14682: PUSH
14683: LD_INT 1
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: LD_INT 92
14692: PUSH
14693: LD_INT 110
14695: PUSH
14696: LD_INT 95
14698: PUSH
14699: LD_INT 12
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: LIST
14712: PPUSH
14713: CALL_OW 69
14717: NOT
14718: AND
14719: PUSH
14720: LD_INT 22
14722: PUSH
14723: LD_INT 3
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: PUSH
14730: LD_INT 30
14732: PUSH
14733: LD_INT 5
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: PUSH
14740: LD_INT 92
14742: PUSH
14743: LD_INT 110
14745: PUSH
14746: LD_INT 95
14748: PUSH
14749: LD_INT 12
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: LIST
14762: PPUSH
14763: CALL_OW 69
14767: NOT
14768: AND
14769: IFFALSE 14598
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14771: LD_ADDR_VAR 0 2
14775: PUSH
14776: LD_EXP 37
14780: PUSH
14781: LD_EXP 28
14785: PUSH
14786: LD_EXP 29
14790: PUSH
14791: LD_EXP 31
14795: PUSH
14796: LD_EXP 30
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: UNION
14807: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14808: LD_ADDR_VAR 0 2
14812: PUSH
14813: LD_VAR 0 2
14817: PPUSH
14818: LD_INT 50
14820: PUSH
14821: EMPTY
14822: LIST
14823: PPUSH
14824: CALL_OW 72
14828: ST_TO_ADDR
// if tmp < 2 then
14829: LD_VAR 0 2
14833: PUSH
14834: LD_INT 2
14836: LESS
14837: IFFALSE 14849
// q := 2 else
14839: LD_ADDR_VAR 0 4
14843: PUSH
14844: LD_INT 2
14846: ST_TO_ADDR
14847: GO 14862
// q := Query ( LabCap ) ;
14849: LD_ADDR_VAR 0 4
14853: PUSH
14854: LD_STRING LabCap
14856: PPUSH
14857: CALL_OW 97
14861: ST_TO_ADDR
// case q of 1 :
14862: LD_VAR 0 4
14866: PUSH
14867: LD_INT 1
14869: DOUBLE
14870: EQUAL
14871: IFTRUE 14875
14873: GO 15217
14875: POP
// begin DoNotAttack ( 2 , ruLab ) ;
14876: LD_INT 2
14878: PPUSH
14879: LD_EXP 50
14883: PPUSH
14884: CALL_OW 471
// labCaptured := true ;
14888: LD_ADDR_EXP 21
14892: PUSH
14893: LD_INT 1
14895: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
14896: LD_EXP 25
14900: PPUSH
14901: LD_STRING DH-Cap-a-1
14903: PPUSH
14904: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
14908: LD_EXP 35
14912: PPUSH
14913: LD_STRING DA-Cap-a-2
14915: PPUSH
14916: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike , Givi , Kurt , Markov ] ^ [ sel_changeable ] ^ tmp ;
14920: LD_ADDR_VAR 0 5
14924: PUSH
14925: LD_EXP 35
14929: PUSH
14930: LD_INT -3
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PUSH
14937: LD_INT -2
14939: PUSH
14940: LD_INT -4
14942: PUSH
14943: LD_EXP 25
14947: PUSH
14948: LD_EXP 26
14952: PUSH
14953: LD_EXP 34
14957: PUSH
14958: LD_EXP 32
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: ADD
14971: PUSH
14972: LD_INT -3
14974: PUSH
14975: EMPTY
14976: LIST
14977: ADD
14978: PUSH
14979: LD_VAR 0 2
14983: ADD
14984: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
14985: LD_ADDR_VAR 0 3
14989: PUSH
14990: LD_STRING Select two characters to go with Aviradze
14992: PPUSH
14993: LD_INT 2
14995: PPUSH
14996: LD_INT 2
14998: PPUSH
14999: LD_VAR 0 5
15003: PPUSH
15004: EMPTY
15005: PPUSH
15006: CALL_OW 42
15010: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
15011: LD_EXP 50
15015: PPUSH
15016: LD_INT 8
15018: PPUSH
15019: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
15023: LD_EXP 35
15027: PPUSH
15028: LD_INT 8
15030: PPUSH
15031: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
15035: LD_ADDR_EXP 39
15039: PUSH
15040: LD_EXP 35
15044: PUSH
15045: EMPTY
15046: LIST
15047: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
15048: LD_EXP 35
15052: PPUSH
15053: CALL_OW 310
15057: IFFALSE 15068
// ComExit ( Aviradze ) ;
15059: LD_EXP 35
15063: PPUSH
15064: CALL 75776 0 1
// wait ( 3 ) ;
15068: LD_INT 3
15070: PPUSH
15071: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
15075: LD_EXP 35
15079: PPUSH
15080: LD_EXP 50
15084: PPUSH
15085: CALL_OW 120
// for i := 1 to 2 do
15089: LD_ADDR_VAR 0 1
15093: PUSH
15094: DOUBLE
15095: LD_INT 1
15097: DEC
15098: ST_TO_ADDR
15099: LD_INT 2
15101: PUSH
15102: FOR_TO
15103: IFFALSE 15206
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
15105: LD_ADDR_EXP 39
15109: PUSH
15110: LD_EXP 39
15114: PUSH
15115: LD_VAR 0 3
15119: PUSH
15120: LD_VAR 0 1
15124: ARRAY
15125: UNION
15126: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
15127: LD_VAR 0 3
15131: PUSH
15132: LD_VAR 0 1
15136: ARRAY
15137: PPUSH
15138: LD_INT 8
15140: PPUSH
15141: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
15145: LD_VAR 0 3
15149: PUSH
15150: LD_VAR 0 1
15154: ARRAY
15155: PPUSH
15156: CALL_OW 310
15160: IFFALSE 15177
// ComExit ( tmp2 [ i ] ) ;
15162: LD_VAR 0 3
15166: PUSH
15167: LD_VAR 0 1
15171: ARRAY
15172: PPUSH
15173: CALL 75776 0 1
// wait ( 3 ) ;
15177: LD_INT 3
15179: PPUSH
15180: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
15184: LD_VAR 0 3
15188: PUSH
15189: LD_VAR 0 1
15193: ARRAY
15194: PPUSH
15195: LD_EXP 50
15199: PPUSH
15200: CALL_OW 120
// end ;
15204: GO 15102
15206: POP
15207: POP
// SetAchievement ( ACH_LAB ) ;
15208: LD_STRING ACH_LAB
15210: PPUSH
15211: CALL_OW 543
// end ; 2 :
15215: GO 15253
15217: LD_INT 2
15219: DOUBLE
15220: EQUAL
15221: IFTRUE 15225
15223: GO 15252
15225: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
15226: LD_EXP 25
15230: PPUSH
15231: LD_STRING DH-Cap-b-1
15233: PPUSH
15234: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
15238: LD_EXP 35
15242: PPUSH
15243: LD_STRING DA-Cap-b-2
15245: PPUSH
15246: CALL_OW 88
// end ; end ;
15250: GO 15253
15252: POP
// end ;
15253: PPOPN 5
15255: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
15256: LD_INT 10
15258: PPUSH
15259: LD_INT 22
15261: PUSH
15262: LD_INT 2
15264: PUSH
15265: EMPTY
15266: LIST
15267: LIST
15268: PUSH
15269: LD_INT 30
15271: PUSH
15272: LD_INT 31
15274: PUSH
15275: EMPTY
15276: LIST
15277: LIST
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: PPUSH
15283: CALL_OW 70
15287: PUSH
15288: LD_INT 2
15290: GREATEREQUAL
15291: IFFALSE 15303
15293: GO 15295
15295: DISABLE
// SetAchievement ( ACH_KING ) ;
15296: LD_STRING ACH_KING
15298: PPUSH
15299: CALL_OW 543
15303: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
15304: LD_EXP 11
15308: NOT
15309: PUSH
15310: LD_INT 10
15312: PPUSH
15313: LD_INT 22
15315: PUSH
15316: LD_INT 2
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PUSH
15323: LD_INT 2
15325: PUSH
15326: LD_INT 30
15328: PUSH
15329: LD_INT 31
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: PUSH
15336: LD_INT 30
15338: PUSH
15339: LD_INT 4
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: LIST
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: PPUSH
15355: CALL_OW 70
15359: AND
15360: IFFALSE 15380
15362: GO 15364
15364: DISABLE
// begin hillBase := true ;
15365: LD_ADDR_EXP 15
15369: PUSH
15370: LD_INT 1
15372: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
15373: LD_STRING HillDone
15375: PPUSH
15376: CALL_OW 337
// end ;
15380: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
15381: LD_EXP 30
15385: PUSH
15386: LD_EXP 30
15390: PPUSH
15391: CALL_OW 256
15395: PUSH
15396: LD_INT 3
15398: LESS
15399: AND
15400: IFFALSE 15446
15402: GO 15404
15404: DISABLE
// begin DialogueOn ;
15405: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
15409: LD_EXP 30
15413: PPUSH
15414: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
15418: LD_EXP 30
15422: PPUSH
15423: LD_STRING DK-Kkilled-1
15425: PPUSH
15426: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
15430: LD_EXP 25
15434: PPUSH
15435: LD_STRING DH-Kkilled-2
15437: PPUSH
15438: CALL_OW 88
// DialogueOff ;
15442: CALL_OW 7
// end ;
15446: END
// every 0 0$1 trigger kaiaKilledByRussian do
15447: LD_EXP 23
15451: IFFALSE 15468
15453: GO 15455
15455: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
15456: LD_EXP 25
15460: PPUSH
15461: LD_STRING DH-Kkilled-3
15463: PPUSH
15464: CALL_OW 88
15468: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo , driver ;
15469: LD_EXP 16
15473: PUSH
15474: LD_INT 106
15476: PPUSH
15477: CALL_OW 255
15481: PUSH
15482: LD_INT 2
15484: EQUAL
15485: PUSH
15486: LD_EXP 17
15490: OR
15491: AND
15492: PUSH
15493: LD_EXP 18
15497: PUSH
15498: LD_EXP 24
15502: PUSH
15503: LD_INT 112
15505: PPUSH
15506: CALL_OW 255
15510: PUSH
15511: LD_INT 2
15513: EQUAL
15514: AND
15515: OR
15516: AND
15517: IFFALSE 16753
15519: GO 15521
15521: DISABLE
15522: LD_INT 0
15524: PPUSH
15525: PPUSH
15526: PPUSH
15527: PPUSH
15528: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
15529: LD_STRING GoToWest
15531: PPUSH
15532: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
15536: LD_INT 17
15538: PPUSH
15539: LD_INT 1
15541: PPUSH
15542: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
15546: LD_INT 35
15548: PPUSH
15549: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15553: LD_ADDR_VAR 0 2
15557: PUSH
15558: LD_INT 17
15560: PPUSH
15561: LD_INT 22
15563: PUSH
15564: LD_INT 2
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: PUSH
15571: LD_INT 2
15573: PUSH
15574: LD_INT 21
15576: PUSH
15577: LD_INT 1
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: PUSH
15584: LD_INT 21
15586: PUSH
15587: LD_INT 2
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: PUSH
15594: LD_INT 3
15596: PUSH
15597: LD_INT 58
15599: PUSH
15600: EMPTY
15601: LIST
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: PUSH
15611: EMPTY
15612: LIST
15613: LIST
15614: LIST
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: PPUSH
15620: CALL_OW 70
15624: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15625: LD_ADDR_VAR 0 3
15629: PUSH
15630: LD_INT 22
15632: PUSH
15633: LD_INT 2
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PUSH
15640: LD_INT 3
15642: PUSH
15643: LD_INT 55
15645: PUSH
15646: EMPTY
15647: LIST
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: PUSH
15653: LD_INT 2
15655: PUSH
15656: LD_INT 21
15658: PUSH
15659: LD_INT 1
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PUSH
15666: LD_INT 21
15668: PUSH
15669: LD_INT 2
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PUSH
15676: LD_INT 3
15678: PUSH
15679: LD_INT 58
15681: PUSH
15682: EMPTY
15683: LIST
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: LIST
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: LIST
15702: PPUSH
15703: CALL_OW 69
15707: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15708: LD_VAR 0 2
15712: PUSH
15713: LD_INT 0
15715: PLUS
15716: PUSH
15717: LD_VAR 0 3
15721: PUSH
15722: LD_INT 0
15724: PLUS
15725: EQUAL
15726: IFFALSE 15546
// SaveCharacters ( Heike , 04_1_Heike ) ;
15728: LD_EXP 25
15732: PPUSH
15733: LD_STRING 04_1_Heike
15735: PPUSH
15736: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15740: LD_EXP 35
15744: PUSH
15745: LD_EXP 35
15749: PUSH
15750: LD_EXP 39
15754: IN
15755: NOT
15756: AND
15757: IFFALSE 15773
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15759: LD_EXP 35
15763: PPUSH
15764: LD_STRING 04_1_Aviradze
15766: PPUSH
15767: CALL_OW 38
15771: GO 15791
// if Aviradze then
15773: LD_EXP 35
15777: IFFALSE 15791
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15779: LD_EXP 35
15783: PPUSH
15784: LD_STRING 04_1_Aviradze_L
15786: PPUSH
15787: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15791: LD_EXP 28
15795: PUSH
15796: LD_EXP 28
15800: PUSH
15801: LD_EXP 39
15805: IN
15806: NOT
15807: AND
15808: IFFALSE 15824
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15810: LD_EXP 28
15814: PPUSH
15815: LD_STRING 04_1_Ibrahim
15817: PPUSH
15818: CALL_OW 38
15822: GO 15842
// if Ibrahim then
15824: LD_EXP 28
15828: IFFALSE 15842
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
15830: LD_EXP 28
15834: PPUSH
15835: LD_STRING 04_1_Ibrahim_L
15837: PPUSH
15838: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
15842: LD_EXP 29
15846: PUSH
15847: LD_EXP 29
15851: PUSH
15852: LD_EXP 39
15856: IN
15857: NOT
15858: AND
15859: IFFALSE 15875
// SaveCharacters ( Kamil , 04_1_Kamil ) else
15861: LD_EXP 29
15865: PPUSH
15866: LD_STRING 04_1_Kamil
15868: PPUSH
15869: CALL_OW 38
15873: GO 15893
// if Kamil then
15875: LD_EXP 29
15879: IFFALSE 15893
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
15881: LD_EXP 29
15885: PPUSH
15886: LD_STRING 04_1_Kamil_L
15888: PPUSH
15889: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
15893: LD_EXP 31
15897: PUSH
15898: LD_EXP 31
15902: PUSH
15903: LD_EXP 39
15907: IN
15908: NOT
15909: AND
15910: IFFALSE 15926
// SaveCharacters ( Sophia , 04_1_Sophia ) else
15912: LD_EXP 31
15916: PPUSH
15917: LD_STRING 04_1_Sophia
15919: PPUSH
15920: CALL_OW 38
15924: GO 15944
// if Sophia then
15926: LD_EXP 31
15930: IFFALSE 15944
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
15932: LD_EXP 31
15936: PPUSH
15937: LD_STRING 04_1_Sophia_L
15939: PPUSH
15940: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
15944: LD_EXP 30
15948: PUSH
15949: LD_EXP 30
15953: PUSH
15954: LD_EXP 39
15958: IN
15959: NOT
15960: AND
15961: IFFALSE 15977
// SaveCharacters ( Kaia , 04_1_Kaia ) else
15963: LD_EXP 30
15967: PPUSH
15968: LD_STRING 04_1_Kaia
15970: PPUSH
15971: CALL_OW 38
15975: GO 15995
// if Kaia then
15977: LD_EXP 30
15981: IFFALSE 15995
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
15983: LD_EXP 30
15987: PPUSH
15988: LD_STRING 04_1_Kaia_L
15990: PPUSH
15991: CALL_OW 38
// if Givi then
15995: LD_EXP 26
15999: IFFALSE 16013
// SaveCharacters ( Givi , 04_1_Givi ) ;
16001: LD_EXP 26
16005: PPUSH
16006: LD_STRING 04_1_Givi
16008: PPUSH
16009: CALL_OW 38
// if Mike then
16013: LD_EXP 27
16017: IFFALSE 16031
// SaveCharacters ( Mike , 04_1_Mike ) ;
16019: LD_EXP 27
16023: PPUSH
16024: LD_STRING 04_1_Mike
16026: PPUSH
16027: CALL_OW 38
// if Markov then
16031: LD_EXP 32
16035: IFFALSE 16049
// SaveCharacters ( Markov , 04_1_Markov ) ;
16037: LD_EXP 32
16041: PPUSH
16042: LD_STRING 04_1_Markov
16044: PPUSH
16045: CALL_OW 38
// if Kurt then
16049: LD_EXP 34
16053: IFFALSE 16074
// begin SaveCharacters ( Kurt , 04_1_Kurt ) ;
16055: LD_EXP 34
16059: PPUSH
16060: LD_STRING 04_1_Kurt
16062: PPUSH
16063: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KURT) ) ;
16067: LD_STRING enableBioCharacter(BIO_KURT)
16069: PPUSH
16070: CALL_OW 559
// end ; if heikeSecondSquad diff aviradzeSquad then
16074: LD_EXP 37
16078: PUSH
16079: LD_EXP 39
16083: DIFF
16084: IFFALSE 16104
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
16086: LD_EXP 37
16090: PUSH
16091: LD_EXP 39
16095: DIFF
16096: PPUSH
16097: LD_STRING 04_1_others
16099: PPUSH
16100: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
16104: LD_EXP 39
16108: PUSH
16109: LD_EXP 37
16113: AND
16114: IFFALSE 16199
// begin tmp := [ ] ;
16116: LD_ADDR_VAR 0 2
16120: PUSH
16121: EMPTY
16122: ST_TO_ADDR
// for i in heikeSecondSquad do
16123: LD_ADDR_VAR 0 1
16127: PUSH
16128: LD_EXP 37
16132: PUSH
16133: FOR_IN
16134: IFFALSE 16179
// if i in aviradzeSquad then
16136: LD_VAR 0 1
16140: PUSH
16141: LD_EXP 39
16145: IN
16146: IFFALSE 16177
// tmp := Replace ( tmp , tmp + 1 , i ) ;
16148: LD_ADDR_VAR 0 2
16152: PUSH
16153: LD_VAR 0 2
16157: PPUSH
16158: LD_VAR 0 2
16162: PUSH
16163: LD_INT 1
16165: PLUS
16166: PPUSH
16167: LD_VAR 0 1
16171: PPUSH
16172: CALL_OW 1
16176: ST_TO_ADDR
16177: GO 16133
16179: POP
16180: POP
// if tmp then
16181: LD_VAR 0 2
16185: IFFALSE 16199
// SaveCharacters ( tmp , 04_1_others_L ) ;
16187: LD_VAR 0 2
16191: PPUSH
16192: LD_STRING 04_1_others_L
16194: PPUSH
16195: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
16199: LD_ADDR_VAR 0 2
16203: PUSH
16204: LD_INT 22
16206: PUSH
16207: LD_INT 2
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: PUSH
16214: LD_INT 23
16216: PUSH
16217: LD_INT 0
16219: PUSH
16220: EMPTY
16221: LIST
16222: LIST
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: PPUSH
16228: CALL_OW 69
16232: ST_TO_ADDR
// if tmp then
16233: LD_VAR 0 2
16237: IFFALSE 16251
// SaveCharacters ( tmp , 04_1_apes ) ;
16239: LD_VAR 0 2
16243: PPUSH
16244: LD_STRING 04_1_apes
16246: PPUSH
16247: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
16251: LD_ADDR_VAR 0 2
16255: PUSH
16256: LD_INT 17
16258: PPUSH
16259: LD_INT 21
16261: PUSH
16262: LD_INT 2
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PPUSH
16269: CALL_OW 70
16273: ST_TO_ADDR
// if tmp then
16274: LD_VAR 0 2
16278: IFFALSE 16618
// begin tmp2 := [ ] ;
16280: LD_ADDR_VAR 0 3
16284: PUSH
16285: EMPTY
16286: ST_TO_ADDR
// for i in tmp do
16287: LD_ADDR_VAR 0 1
16291: PUSH
16292: LD_VAR 0 2
16296: PUSH
16297: FOR_IN
16298: IFFALSE 16604
// begin driver := IsDrivenBy ( i ) ;
16300: LD_ADDR_VAR 0 5
16304: PUSH
16305: LD_VAR 0 1
16309: PPUSH
16310: CALL_OW 311
16314: ST_TO_ADDR
// if not driver then
16315: LD_VAR 0 5
16319: NOT
16320: IFFALSE 16324
// continue ;
16322: GO 16297
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
16324: LD_VAR 0 1
16328: PPUSH
16329: CALL_OW 264
16333: PUSH
16334: LD_INT 32
16336: PUSH
16337: LD_INT 12
16339: PUSH
16340: LD_INT 51
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: LIST
16347: IN
16348: IFFALSE 16496
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
16350: LD_ADDR_VAR 0 4
16354: PUSH
16355: LD_VAR 0 1
16359: PPUSH
16360: LD_INT 1
16362: PPUSH
16363: CALL_OW 289
16367: PUSH
16368: LD_VAR 0 1
16372: PPUSH
16373: LD_INT 2
16375: PPUSH
16376: CALL_OW 289
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo , GetClass ( driver ) ] ) ;
16385: LD_ADDR_VAR 0 3
16389: PUSH
16390: LD_VAR 0 3
16394: PPUSH
16395: LD_VAR 0 3
16399: PUSH
16400: LD_INT 1
16402: PLUS
16403: PPUSH
16404: LD_VAR 0 1
16408: PPUSH
16409: CALL_OW 265
16413: PUSH
16414: LD_VAR 0 1
16418: PPUSH
16419: CALL_OW 262
16423: PUSH
16424: LD_VAR 0 1
16428: PPUSH
16429: CALL_OW 263
16433: PUSH
16434: LD_VAR 0 1
16438: PPUSH
16439: CALL_OW 264
16443: PUSH
16444: LD_VAR 0 1
16448: PPUSH
16449: CALL_OW 248
16453: PUSH
16454: LD_VAR 0 1
16458: PPUSH
16459: CALL_OW 256
16463: PUSH
16464: LD_VAR 0 4
16468: PUSH
16469: LD_VAR 0 5
16473: PPUSH
16474: CALL_OW 257
16478: PUSH
16479: EMPTY
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: PPUSH
16489: CALL_OW 1
16493: ST_TO_ADDR
// end else
16494: GO 16602
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] , GetClass ( driver ) ] ) ;
16496: LD_ADDR_VAR 0 3
16500: PUSH
16501: LD_VAR 0 3
16505: PPUSH
16506: LD_VAR 0 3
16510: PUSH
16511: LD_INT 1
16513: PLUS
16514: PPUSH
16515: LD_VAR 0 1
16519: PPUSH
16520: CALL_OW 265
16524: PUSH
16525: LD_VAR 0 1
16529: PPUSH
16530: CALL_OW 262
16534: PUSH
16535: LD_VAR 0 1
16539: PPUSH
16540: CALL_OW 263
16544: PUSH
16545: LD_VAR 0 1
16549: PPUSH
16550: CALL_OW 264
16554: PUSH
16555: LD_VAR 0 1
16559: PPUSH
16560: CALL_OW 248
16564: PUSH
16565: LD_VAR 0 1
16569: PPUSH
16570: CALL_OW 256
16574: PUSH
16575: EMPTY
16576: PUSH
16577: LD_VAR 0 5
16581: PPUSH
16582: CALL_OW 257
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: PPUSH
16597: CALL_OW 1
16601: ST_TO_ADDR
// end ;
16602: GO 16297
16604: POP
16605: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
16606: LD_VAR 0 3
16610: PPUSH
16611: LD_STRING 04_1_Vehicles
16613: PPUSH
16614: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
16618: LD_EXP 21
16622: PPUSH
16623: LD_STRING 04_1_RuLabCaptured
16625: PPUSH
16626: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
16630: LD_EXP 19
16634: PPUSH
16635: LD_STRING 04_1_EscapeCounter
16637: PPUSH
16638: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
16642: LD_EXP 15
16646: PPUSH
16647: LD_STRING 04_1_BaseHill
16649: PPUSH
16650: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
16654: LD_OWVAR 1
16658: PPUSH
16659: LD_STRING 04_1_Time
16661: PPUSH
16662: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
16666: LD_EXP 14
16670: PPUSH
16671: LD_STRING 04_1_DeadCounter
16673: PPUSH
16674: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
16678: LD_EXP 24
16682: PUSH
16683: LD_INT 112
16685: PPUSH
16686: CALL_OW 255
16690: MUL
16691: PUSH
16692: LD_INT 2
16694: EQUAL
16695: PPUSH
16696: LD_STRING 04_1_KaganCaptured
16698: PPUSH
16699: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
16703: LD_INT 22
16705: PUSH
16706: LD_INT 2
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: PUSH
16713: LD_INT 34
16715: PUSH
16716: LD_INT 26
16718: PUSH
16719: EMPTY
16720: LIST
16721: LIST
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PPUSH
16727: CALL_OW 69
16731: PUSH
16732: LD_INT 0
16734: PLUS
16735: PPUSH
16736: LD_STRING 04_1_Flamethrower
16738: PPUSH
16739: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16743: LD_INT 1
16745: PPUSH
16746: LD_STRING __x1\04_cont2
16748: PPUSH
16749: CALL_OW 340
// end ; end_of_file
16753: PPOPN 5
16755: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16756: LD_VAR 0 1
16760: PPUSH
16761: CALL_OW 266
16765: PUSH
16766: LD_INT 0
16768: EQUAL
16769: PUSH
16770: LD_VAR 0 1
16774: PPUSH
16775: CALL_OW 255
16779: PUSH
16780: LD_INT 2
16782: EQUAL
16783: AND
16784: IFFALSE 16794
// baseConstructed := true ;
16786: LD_ADDR_EXP 3
16790: PUSH
16791: LD_INT 1
16793: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16794: LD_VAR 0 1
16798: PPUSH
16799: CALL_OW 266
16803: PUSH
16804: LD_INT 6
16806: EQUAL
16807: PUSH
16808: LD_VAR 0 1
16812: PPUSH
16813: CALL_OW 255
16817: PUSH
16818: LD_INT 2
16820: EQUAL
16821: AND
16822: IFFALSE 16832
// labConstructed := true ;
16824: LD_ADDR_EXP 4
16828: PUSH
16829: LD_INT 1
16831: ST_TO_ADDR
// end ;
16832: PPOPN 1
16834: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
16835: LD_VAR 0 1
16839: PPUSH
16840: CALL 33621 0 1
// if un = Heike then
16844: LD_VAR 0 1
16848: PUSH
16849: LD_EXP 25
16853: EQUAL
16854: IFFALSE 16863
// YouLost ( Heike ) ;
16856: LD_STRING Heike
16858: PPUSH
16859: CALL_OW 104
// if un = Omar then
16863: LD_VAR 0 1
16867: PUSH
16868: LD_EXP 33
16872: EQUAL
16873: IFFALSE 16882
// YouLost ( Omar ) ;
16875: LD_STRING Omar
16877: PPUSH
16878: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
16882: LD_VAR 0 1
16886: PUSH
16887: LD_INT 22
16889: PUSH
16890: LD_INT 2
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: PUSH
16897: LD_INT 23
16899: PUSH
16900: LD_INT 2
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: PUSH
16907: LD_INT 21
16909: PUSH
16910: LD_INT 1
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: LIST
16921: PPUSH
16922: CALL_OW 69
16926: IN
16927: IFFALSE 16943
// loseCounter := loseCounter + 1 ;
16929: LD_ADDR_EXP 14
16933: PUSH
16934: LD_EXP 14
16938: PUSH
16939: LD_INT 1
16941: PLUS
16942: ST_TO_ADDR
// if un = omikron then
16943: LD_VAR 0 1
16947: PUSH
16948: LD_INT 64
16950: EQUAL
16951: IFFALSE 16961
// omicronFall := true ;
16953: LD_ADDR_EXP 13
16957: PUSH
16958: LD_INT 1
16960: ST_TO_ADDR
// if un = kirov then
16961: LD_VAR 0 1
16965: PUSH
16966: LD_INT 71
16968: EQUAL
16969: IFFALSE 16986
// begin ChangeMissionObjectives ( KirovDone ) ;
16971: LD_STRING KirovDone
16973: PPUSH
16974: CALL_OW 337
// kirovDestroyed := true ;
16978: LD_ADDR_EXP 16
16982: PUSH
16983: LD_INT 1
16985: ST_TO_ADDR
// end ; if un = beria then
16986: LD_VAR 0 1
16990: PUSH
16991: LD_INT 106
16993: EQUAL
16994: IFFALSE 17011
// begin ChangeMissionObjectives ( BeriaDone ) ;
16996: LD_STRING BeriaDone
16998: PPUSH
16999: CALL_OW 337
// beriaDestroyed := true ;
17003: LD_ADDR_EXP 17
17007: PUSH
17008: LD_INT 1
17010: ST_TO_ADDR
// end ; if un = kagan then
17011: LD_VAR 0 1
17015: PUSH
17016: LD_INT 112
17018: EQUAL
17019: IFFALSE 17029
// kaganDestroyed := true ;
17021: LD_ADDR_EXP 18
17025: PUSH
17026: LD_INT 1
17028: ST_TO_ADDR
// if un in russianPatrol then
17029: LD_VAR 0 1
17033: PUSH
17034: LD_EXP 47
17038: IN
17039: IFFALSE 17057
// russianPatrol := russianPatrol diff un ;
17041: LD_ADDR_EXP 47
17045: PUSH
17046: LD_EXP 47
17050: PUSH
17051: LD_VAR 0 1
17055: DIFF
17056: ST_TO_ADDR
// if un in russianOmicronAttackers then
17057: LD_VAR 0 1
17061: PUSH
17062: LD_EXP 48
17066: IN
17067: IFFALSE 17085
// russianOmicronAttackers := russianOmicronAttackers diff un ;
17069: LD_ADDR_EXP 48
17073: PUSH
17074: LD_EXP 48
17078: PUSH
17079: LD_VAR 0 1
17083: DIFF
17084: ST_TO_ADDR
// end ;
17085: PPOPN 1
17087: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
17088: LD_INT 0
17090: PPUSH
17091: PPUSH
17092: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
17093: LD_VAR 0 1
17097: PUSH
17098: LD_INT 2
17100: PUSH
17101: LD_INT 22
17103: PUSH
17104: LD_INT 3
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: PUSH
17111: LD_INT 22
17113: PUSH
17114: LD_INT 4
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PUSH
17121: LD_INT 22
17123: PUSH
17124: LD_INT 6
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: PUSH
17137: LD_INT 30
17139: PUSH
17140: LD_INT 32
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PPUSH
17151: CALL_OW 69
17155: IN
17156: IFFALSE 17329
// begin sol := UnitsInside ( un ) ;
17158: LD_ADDR_VAR 0 3
17162: PUSH
17163: LD_VAR 0 1
17167: PPUSH
17168: CALL_OW 313
17172: ST_TO_ADDR
// if not sol then
17173: LD_VAR 0 3
17177: NOT
17178: IFFALSE 17182
// exit ;
17180: GO 17329
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17182: LD_ADDR_VAR 0 4
17186: PUSH
17187: LD_INT 22
17189: PUSH
17190: LD_VAR 0 1
17194: PPUSH
17195: CALL_OW 255
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 2
17206: PUSH
17207: LD_INT 30
17209: PUSH
17210: LD_INT 4
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 30
17219: PUSH
17220: LD_INT 5
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: LIST
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PPUSH
17236: CALL_OW 69
17240: ST_TO_ADDR
// if not nearestBarracks then
17241: LD_VAR 0 4
17245: NOT
17246: IFFALSE 17250
// exit ;
17248: GO 17329
// for i in nearestBarracks do
17250: LD_ADDR_VAR 0 2
17254: PUSH
17255: LD_VAR 0 4
17259: PUSH
17260: FOR_IN
17261: IFFALSE 17296
// if UnitsInside ( i ) = 6 then
17263: LD_VAR 0 2
17267: PPUSH
17268: CALL_OW 313
17272: PUSH
17273: LD_INT 6
17275: EQUAL
17276: IFFALSE 17294
// nearestBarracks := nearestBarracks diff i ;
17278: LD_ADDR_VAR 0 4
17282: PUSH
17283: LD_VAR 0 4
17287: PUSH
17288: LD_VAR 0 2
17292: DIFF
17293: ST_TO_ADDR
17294: GO 17260
17296: POP
17297: POP
// if not nearestBarracks then
17298: LD_VAR 0 4
17302: NOT
17303: IFFALSE 17307
// exit ;
17305: GO 17329
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
17307: LD_VAR 0 3
17311: PUSH
17312: LD_INT 1
17314: ARRAY
17315: PPUSH
17316: LD_VAR 0 4
17320: PUSH
17321: LD_INT 1
17323: ARRAY
17324: PPUSH
17325: CALL_OW 120
// end ; end ;
17329: PPOPN 4
17331: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
17332: LD_INT 0
17334: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
17335: LD_EXP 8
17339: NOT
17340: PUSH
17341: LD_EXP 5
17345: NOT
17346: OR
17347: IFFALSE 17351
// exit ;
17349: GO 17419
// for i in camAreas do
17351: LD_ADDR_VAR 0 5
17355: PUSH
17356: LD_EXP 8
17360: PUSH
17361: FOR_IN
17362: IFFALSE 17417
// if InArea ( x , y , i ) then
17364: LD_VAR 0 3
17368: PPUSH
17369: LD_VAR 0 4
17373: PPUSH
17374: LD_VAR 0 5
17378: PPUSH
17379: CALL_OW 309
17383: IFFALSE 17415
// begin SetAreaMapShow ( i , 0 ) ;
17385: LD_VAR 0 5
17389: PPUSH
17390: LD_INT 0
17392: PPUSH
17393: CALL_OW 424
// camAreas := camAreas diff i ;
17397: LD_ADDR_EXP 8
17401: PUSH
17402: LD_EXP 8
17406: PUSH
17407: LD_VAR 0 5
17411: DIFF
17412: ST_TO_ADDR
// break ;
17413: GO 17417
// end ;
17415: GO 17361
17417: POP
17418: POP
// end ;
17419: PPOPN 5
17421: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
17422: LD_VAR 0 1
17426: PUSH
17427: LD_INT 2
17429: EQUAL
17430: PUSH
17431: LD_VAR 0 2
17435: PUSH
17436: LD_INT 5
17438: PUSH
17439: LD_INT 8
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: IN
17446: AND
17447: IFFALSE 17456
// YouLost ( Ally ) ;
17449: LD_STRING Ally
17451: PPUSH
17452: CALL_OW 104
// end ;
17456: PPOPN 2
17458: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
17459: LD_VAR 0 1
17463: PUSH
17464: LD_EXP 30
17468: EQUAL
17469: PUSH
17470: LD_VAR 0 2
17474: PUSH
17475: LD_INT 3
17477: PUSH
17478: LD_INT 6
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: IN
17485: AND
17486: IFFALSE 17517
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
17488: LD_ADDR_EXP 23
17492: PUSH
17493: LD_VAR 0 1
17497: PPUSH
17498: CALL_OW 250
17502: PUSH
17503: LD_VAR 0 1
17507: PPUSH
17508: CALL_OW 251
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: ST_TO_ADDR
// end ;
17517: PPOPN 3
17519: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
17520: LD_VAR 0 1
17524: PPUSH
17525: LD_VAR 0 2
17529: PPUSH
17530: CALL 33741 0 2
// end ; end_of_file
17534: PPOPN 2
17536: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 , 10 ] [ Difficulty ] do
17537: LD_EXP 11
17541: NOT
17542: PUSH
17543: LD_INT 12
17545: PPUSH
17546: LD_INT 1
17548: PPUSH
17549: CALL_OW 287
17553: PUSH
17554: LD_INT 20
17556: PUSH
17557: LD_INT 16
17559: PUSH
17560: LD_INT 12
17562: PUSH
17563: LD_INT 10
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: PUSH
17572: LD_OWVAR 67
17576: ARRAY
17577: LESS
17578: AND
17579: IFFALSE 17606
17581: GO 17583
17583: DISABLE
// begin enable ;
17584: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
17585: LD_INT 1
17587: PPUSH
17588: LD_INT 5
17590: PPUSH
17591: CALL_OW 12
17595: PPUSH
17596: LD_INT 12
17598: PPUSH
17599: LD_INT 1
17601: PPUSH
17602: CALL_OW 55
// end ; end_of_file
17606: END
// every 0 0$1 trigger omarCountdown do
17607: LD_EXP 22
17611: IFFALSE 17663
17613: GO 17615
17615: DISABLE
// begin enable ;
17616: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
17617: LD_ADDR_OWVAR 47
17621: PUSH
17622: LD_STRING #X104-1
17624: PUSH
17625: LD_EXP 22
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
17634: LD_ADDR_EXP 22
17638: PUSH
17639: LD_EXP 22
17643: PUSH
17644: LD_INT 35
17646: MINUS
17647: ST_TO_ADDR
// if not omarCountdown then
17648: LD_EXP 22
17652: NOT
17653: IFFALSE 17663
// display_strings :=  ;
17655: LD_ADDR_OWVAR 47
17659: PUSH
17660: LD_STRING 
17662: ST_TO_ADDR
// end ; end_of_file
17663: END
// export globalGameSaveCounter ; every 0 0$1 do
17664: GO 17666
17666: DISABLE
// begin enable ;
17667: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
17668: LD_STRING updateTimer(
17670: PUSH
17671: LD_OWVAR 1
17675: STR
17676: PUSH
17677: LD_STRING );
17679: STR
17680: PPUSH
17681: CALL_OW 559
// end ;
17685: END
// every 0 0$1 do
17686: GO 17688
17688: DISABLE
// begin globalGameSaveCounter := 0 ;
17689: LD_ADDR_EXP 52
17693: PUSH
17694: LD_INT 0
17696: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
17697: LD_STRING setGameSaveCounter(0)
17699: PPUSH
17700: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
17704: LD_STRING initStreamRollete();
17706: PPUSH
17707: CALL_OW 559
// InitStreamMode ;
17711: CALL 19037 0 0
// DefineStreamItems ( false ) ;
17715: LD_INT 0
17717: PPUSH
17718: CALL 19501 0 1
// end ;
17722: END
// export function SOS_MapStart ( ) ; begin
17723: LD_INT 0
17725: PPUSH
// if streamModeActive then
17726: LD_EXP 53
17730: IFFALSE 17739
// DefineStreamItems ( true ) ;
17732: LD_INT 1
17734: PPUSH
17735: CALL 19501 0 1
// UpdateLuaVariables ( ) ;
17739: CALL 17756 0 0
// UpdateFactoryWaypoints ( ) ;
17743: CALL 32362 0 0
// UpdateWarehouseGatheringPoints ( ) ;
17747: CALL 32619 0 0
// end ;
17751: LD_VAR 0 1
17755: RET
// function UpdateLuaVariables ( ) ; begin
17756: LD_INT 0
17758: PPUSH
// if globalGameSaveCounter then
17759: LD_EXP 52
17763: IFFALSE 17797
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
17765: LD_ADDR_EXP 52
17769: PUSH
17770: LD_EXP 52
17774: PPUSH
17775: CALL 76739 0 1
17779: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17780: LD_STRING setGameSaveCounter(
17782: PUSH
17783: LD_EXP 52
17787: STR
17788: PUSH
17789: LD_STRING )
17791: STR
17792: PPUSH
17793: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
17797: LD_STRING setGameDifficulty(
17799: PUSH
17800: LD_OWVAR 67
17804: STR
17805: PUSH
17806: LD_STRING )
17808: STR
17809: PPUSH
17810: CALL_OW 559
// end ;
17814: LD_VAR 0 1
17818: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17819: LD_INT 0
17821: PPUSH
// if p2 = stream_mode then
17822: LD_VAR 0 2
17826: PUSH
17827: LD_INT 100
17829: EQUAL
17830: IFFALSE 18833
// begin if not StreamModeActive then
17832: LD_EXP 53
17836: NOT
17837: IFFALSE 17847
// StreamModeActive := true ;
17839: LD_ADDR_EXP 53
17843: PUSH
17844: LD_INT 1
17846: ST_TO_ADDR
// if p3 = 0 then
17847: LD_VAR 0 3
17851: PUSH
17852: LD_INT 0
17854: EQUAL
17855: IFFALSE 17861
// InitStreamMode ;
17857: CALL 19037 0 0
// if p3 = 1 then
17861: LD_VAR 0 3
17865: PUSH
17866: LD_INT 1
17868: EQUAL
17869: IFFALSE 17879
// sRocket := true ;
17871: LD_ADDR_EXP 58
17875: PUSH
17876: LD_INT 1
17878: ST_TO_ADDR
// if p3 = 2 then
17879: LD_VAR 0 3
17883: PUSH
17884: LD_INT 2
17886: EQUAL
17887: IFFALSE 17897
// sSpeed := true ;
17889: LD_ADDR_EXP 57
17893: PUSH
17894: LD_INT 1
17896: ST_TO_ADDR
// if p3 = 3 then
17897: LD_VAR 0 3
17901: PUSH
17902: LD_INT 3
17904: EQUAL
17905: IFFALSE 17915
// sEngine := true ;
17907: LD_ADDR_EXP 59
17911: PUSH
17912: LD_INT 1
17914: ST_TO_ADDR
// if p3 = 4 then
17915: LD_VAR 0 3
17919: PUSH
17920: LD_INT 4
17922: EQUAL
17923: IFFALSE 17933
// sSpec := true ;
17925: LD_ADDR_EXP 56
17929: PUSH
17930: LD_INT 1
17932: ST_TO_ADDR
// if p3 = 5 then
17933: LD_VAR 0 3
17937: PUSH
17938: LD_INT 5
17940: EQUAL
17941: IFFALSE 17951
// sLevel := true ;
17943: LD_ADDR_EXP 60
17947: PUSH
17948: LD_INT 1
17950: ST_TO_ADDR
// if p3 = 6 then
17951: LD_VAR 0 3
17955: PUSH
17956: LD_INT 6
17958: EQUAL
17959: IFFALSE 17969
// sArmoury := true ;
17961: LD_ADDR_EXP 61
17965: PUSH
17966: LD_INT 1
17968: ST_TO_ADDR
// if p3 = 7 then
17969: LD_VAR 0 3
17973: PUSH
17974: LD_INT 7
17976: EQUAL
17977: IFFALSE 17987
// sRadar := true ;
17979: LD_ADDR_EXP 62
17983: PUSH
17984: LD_INT 1
17986: ST_TO_ADDR
// if p3 = 8 then
17987: LD_VAR 0 3
17991: PUSH
17992: LD_INT 8
17994: EQUAL
17995: IFFALSE 18005
// sBunker := true ;
17997: LD_ADDR_EXP 63
18001: PUSH
18002: LD_INT 1
18004: ST_TO_ADDR
// if p3 = 9 then
18005: LD_VAR 0 3
18009: PUSH
18010: LD_INT 9
18012: EQUAL
18013: IFFALSE 18023
// sHack := true ;
18015: LD_ADDR_EXP 64
18019: PUSH
18020: LD_INT 1
18022: ST_TO_ADDR
// if p3 = 10 then
18023: LD_VAR 0 3
18027: PUSH
18028: LD_INT 10
18030: EQUAL
18031: IFFALSE 18041
// sFire := true ;
18033: LD_ADDR_EXP 65
18037: PUSH
18038: LD_INT 1
18040: ST_TO_ADDR
// if p3 = 11 then
18041: LD_VAR 0 3
18045: PUSH
18046: LD_INT 11
18048: EQUAL
18049: IFFALSE 18059
// sRefresh := true ;
18051: LD_ADDR_EXP 66
18055: PUSH
18056: LD_INT 1
18058: ST_TO_ADDR
// if p3 = 12 then
18059: LD_VAR 0 3
18063: PUSH
18064: LD_INT 12
18066: EQUAL
18067: IFFALSE 18077
// sExp := true ;
18069: LD_ADDR_EXP 67
18073: PUSH
18074: LD_INT 1
18076: ST_TO_ADDR
// if p3 = 13 then
18077: LD_VAR 0 3
18081: PUSH
18082: LD_INT 13
18084: EQUAL
18085: IFFALSE 18095
// sDepot := true ;
18087: LD_ADDR_EXP 68
18091: PUSH
18092: LD_INT 1
18094: ST_TO_ADDR
// if p3 = 14 then
18095: LD_VAR 0 3
18099: PUSH
18100: LD_INT 14
18102: EQUAL
18103: IFFALSE 18113
// sFlag := true ;
18105: LD_ADDR_EXP 69
18109: PUSH
18110: LD_INT 1
18112: ST_TO_ADDR
// if p3 = 15 then
18113: LD_VAR 0 3
18117: PUSH
18118: LD_INT 15
18120: EQUAL
18121: IFFALSE 18131
// sKamikadze := true ;
18123: LD_ADDR_EXP 77
18127: PUSH
18128: LD_INT 1
18130: ST_TO_ADDR
// if p3 = 16 then
18131: LD_VAR 0 3
18135: PUSH
18136: LD_INT 16
18138: EQUAL
18139: IFFALSE 18149
// sTroll := true ;
18141: LD_ADDR_EXP 78
18145: PUSH
18146: LD_INT 1
18148: ST_TO_ADDR
// if p3 = 17 then
18149: LD_VAR 0 3
18153: PUSH
18154: LD_INT 17
18156: EQUAL
18157: IFFALSE 18167
// sSlow := true ;
18159: LD_ADDR_EXP 79
18163: PUSH
18164: LD_INT 1
18166: ST_TO_ADDR
// if p3 = 18 then
18167: LD_VAR 0 3
18171: PUSH
18172: LD_INT 18
18174: EQUAL
18175: IFFALSE 18185
// sLack := true ;
18177: LD_ADDR_EXP 80
18181: PUSH
18182: LD_INT 1
18184: ST_TO_ADDR
// if p3 = 19 then
18185: LD_VAR 0 3
18189: PUSH
18190: LD_INT 19
18192: EQUAL
18193: IFFALSE 18203
// sTank := true ;
18195: LD_ADDR_EXP 82
18199: PUSH
18200: LD_INT 1
18202: ST_TO_ADDR
// if p3 = 20 then
18203: LD_VAR 0 3
18207: PUSH
18208: LD_INT 20
18210: EQUAL
18211: IFFALSE 18221
// sRemote := true ;
18213: LD_ADDR_EXP 83
18217: PUSH
18218: LD_INT 1
18220: ST_TO_ADDR
// if p3 = 21 then
18221: LD_VAR 0 3
18225: PUSH
18226: LD_INT 21
18228: EQUAL
18229: IFFALSE 18239
// sPowell := true ;
18231: LD_ADDR_EXP 84
18235: PUSH
18236: LD_INT 1
18238: ST_TO_ADDR
// if p3 = 22 then
18239: LD_VAR 0 3
18243: PUSH
18244: LD_INT 22
18246: EQUAL
18247: IFFALSE 18257
// sTeleport := true ;
18249: LD_ADDR_EXP 87
18253: PUSH
18254: LD_INT 1
18256: ST_TO_ADDR
// if p3 = 23 then
18257: LD_VAR 0 3
18261: PUSH
18262: LD_INT 23
18264: EQUAL
18265: IFFALSE 18275
// sOilTower := true ;
18267: LD_ADDR_EXP 89
18271: PUSH
18272: LD_INT 1
18274: ST_TO_ADDR
// if p3 = 24 then
18275: LD_VAR 0 3
18279: PUSH
18280: LD_INT 24
18282: EQUAL
18283: IFFALSE 18293
// sShovel := true ;
18285: LD_ADDR_EXP 90
18289: PUSH
18290: LD_INT 1
18292: ST_TO_ADDR
// if p3 = 25 then
18293: LD_VAR 0 3
18297: PUSH
18298: LD_INT 25
18300: EQUAL
18301: IFFALSE 18311
// sSheik := true ;
18303: LD_ADDR_EXP 91
18307: PUSH
18308: LD_INT 1
18310: ST_TO_ADDR
// if p3 = 26 then
18311: LD_VAR 0 3
18315: PUSH
18316: LD_INT 26
18318: EQUAL
18319: IFFALSE 18329
// sEarthquake := true ;
18321: LD_ADDR_EXP 93
18325: PUSH
18326: LD_INT 1
18328: ST_TO_ADDR
// if p3 = 27 then
18329: LD_VAR 0 3
18333: PUSH
18334: LD_INT 27
18336: EQUAL
18337: IFFALSE 18347
// sAI := true ;
18339: LD_ADDR_EXP 94
18343: PUSH
18344: LD_INT 1
18346: ST_TO_ADDR
// if p3 = 28 then
18347: LD_VAR 0 3
18351: PUSH
18352: LD_INT 28
18354: EQUAL
18355: IFFALSE 18365
// sCargo := true ;
18357: LD_ADDR_EXP 97
18361: PUSH
18362: LD_INT 1
18364: ST_TO_ADDR
// if p3 = 29 then
18365: LD_VAR 0 3
18369: PUSH
18370: LD_INT 29
18372: EQUAL
18373: IFFALSE 18383
// sDLaser := true ;
18375: LD_ADDR_EXP 98
18379: PUSH
18380: LD_INT 1
18382: ST_TO_ADDR
// if p3 = 30 then
18383: LD_VAR 0 3
18387: PUSH
18388: LD_INT 30
18390: EQUAL
18391: IFFALSE 18401
// sExchange := true ;
18393: LD_ADDR_EXP 99
18397: PUSH
18398: LD_INT 1
18400: ST_TO_ADDR
// if p3 = 31 then
18401: LD_VAR 0 3
18405: PUSH
18406: LD_INT 31
18408: EQUAL
18409: IFFALSE 18419
// sFac := true ;
18411: LD_ADDR_EXP 100
18415: PUSH
18416: LD_INT 1
18418: ST_TO_ADDR
// if p3 = 32 then
18419: LD_VAR 0 3
18423: PUSH
18424: LD_INT 32
18426: EQUAL
18427: IFFALSE 18437
// sPower := true ;
18429: LD_ADDR_EXP 101
18433: PUSH
18434: LD_INT 1
18436: ST_TO_ADDR
// if p3 = 33 then
18437: LD_VAR 0 3
18441: PUSH
18442: LD_INT 33
18444: EQUAL
18445: IFFALSE 18455
// sRandom := true ;
18447: LD_ADDR_EXP 102
18451: PUSH
18452: LD_INT 1
18454: ST_TO_ADDR
// if p3 = 34 then
18455: LD_VAR 0 3
18459: PUSH
18460: LD_INT 34
18462: EQUAL
18463: IFFALSE 18473
// sShield := true ;
18465: LD_ADDR_EXP 103
18469: PUSH
18470: LD_INT 1
18472: ST_TO_ADDR
// if p3 = 35 then
18473: LD_VAR 0 3
18477: PUSH
18478: LD_INT 35
18480: EQUAL
18481: IFFALSE 18491
// sTime := true ;
18483: LD_ADDR_EXP 104
18487: PUSH
18488: LD_INT 1
18490: ST_TO_ADDR
// if p3 = 36 then
18491: LD_VAR 0 3
18495: PUSH
18496: LD_INT 36
18498: EQUAL
18499: IFFALSE 18509
// sTools := true ;
18501: LD_ADDR_EXP 105
18505: PUSH
18506: LD_INT 1
18508: ST_TO_ADDR
// if p3 = 101 then
18509: LD_VAR 0 3
18513: PUSH
18514: LD_INT 101
18516: EQUAL
18517: IFFALSE 18527
// sSold := true ;
18519: LD_ADDR_EXP 70
18523: PUSH
18524: LD_INT 1
18526: ST_TO_ADDR
// if p3 = 102 then
18527: LD_VAR 0 3
18531: PUSH
18532: LD_INT 102
18534: EQUAL
18535: IFFALSE 18545
// sDiff := true ;
18537: LD_ADDR_EXP 71
18541: PUSH
18542: LD_INT 1
18544: ST_TO_ADDR
// if p3 = 103 then
18545: LD_VAR 0 3
18549: PUSH
18550: LD_INT 103
18552: EQUAL
18553: IFFALSE 18563
// sFog := true ;
18555: LD_ADDR_EXP 74
18559: PUSH
18560: LD_INT 1
18562: ST_TO_ADDR
// if p3 = 104 then
18563: LD_VAR 0 3
18567: PUSH
18568: LD_INT 104
18570: EQUAL
18571: IFFALSE 18581
// sReset := true ;
18573: LD_ADDR_EXP 75
18577: PUSH
18578: LD_INT 1
18580: ST_TO_ADDR
// if p3 = 105 then
18581: LD_VAR 0 3
18585: PUSH
18586: LD_INT 105
18588: EQUAL
18589: IFFALSE 18599
// sSun := true ;
18591: LD_ADDR_EXP 76
18595: PUSH
18596: LD_INT 1
18598: ST_TO_ADDR
// if p3 = 106 then
18599: LD_VAR 0 3
18603: PUSH
18604: LD_INT 106
18606: EQUAL
18607: IFFALSE 18617
// sTiger := true ;
18609: LD_ADDR_EXP 72
18613: PUSH
18614: LD_INT 1
18616: ST_TO_ADDR
// if p3 = 107 then
18617: LD_VAR 0 3
18621: PUSH
18622: LD_INT 107
18624: EQUAL
18625: IFFALSE 18635
// sBomb := true ;
18627: LD_ADDR_EXP 73
18631: PUSH
18632: LD_INT 1
18634: ST_TO_ADDR
// if p3 = 108 then
18635: LD_VAR 0 3
18639: PUSH
18640: LD_INT 108
18642: EQUAL
18643: IFFALSE 18653
// sWound := true ;
18645: LD_ADDR_EXP 81
18649: PUSH
18650: LD_INT 1
18652: ST_TO_ADDR
// if p3 = 109 then
18653: LD_VAR 0 3
18657: PUSH
18658: LD_INT 109
18660: EQUAL
18661: IFFALSE 18671
// sBetray := true ;
18663: LD_ADDR_EXP 85
18667: PUSH
18668: LD_INT 1
18670: ST_TO_ADDR
// if p3 = 110 then
18671: LD_VAR 0 3
18675: PUSH
18676: LD_INT 110
18678: EQUAL
18679: IFFALSE 18689
// sContamin := true ;
18681: LD_ADDR_EXP 86
18685: PUSH
18686: LD_INT 1
18688: ST_TO_ADDR
// if p3 = 111 then
18689: LD_VAR 0 3
18693: PUSH
18694: LD_INT 111
18696: EQUAL
18697: IFFALSE 18707
// sOil := true ;
18699: LD_ADDR_EXP 88
18703: PUSH
18704: LD_INT 1
18706: ST_TO_ADDR
// if p3 = 112 then
18707: LD_VAR 0 3
18711: PUSH
18712: LD_INT 112
18714: EQUAL
18715: IFFALSE 18725
// sStu := true ;
18717: LD_ADDR_EXP 92
18721: PUSH
18722: LD_INT 1
18724: ST_TO_ADDR
// if p3 = 113 then
18725: LD_VAR 0 3
18729: PUSH
18730: LD_INT 113
18732: EQUAL
18733: IFFALSE 18743
// sBazooka := true ;
18735: LD_ADDR_EXP 95
18739: PUSH
18740: LD_INT 1
18742: ST_TO_ADDR
// if p3 = 114 then
18743: LD_VAR 0 3
18747: PUSH
18748: LD_INT 114
18750: EQUAL
18751: IFFALSE 18761
// sMortar := true ;
18753: LD_ADDR_EXP 96
18757: PUSH
18758: LD_INT 1
18760: ST_TO_ADDR
// if p3 = 115 then
18761: LD_VAR 0 3
18765: PUSH
18766: LD_INT 115
18768: EQUAL
18769: IFFALSE 18779
// sRanger := true ;
18771: LD_ADDR_EXP 106
18775: PUSH
18776: LD_INT 1
18778: ST_TO_ADDR
// if p3 = 116 then
18779: LD_VAR 0 3
18783: PUSH
18784: LD_INT 116
18786: EQUAL
18787: IFFALSE 18797
// sComputer := true ;
18789: LD_ADDR_EXP 107
18793: PUSH
18794: LD_INT 1
18796: ST_TO_ADDR
// if p3 = 117 then
18797: LD_VAR 0 3
18801: PUSH
18802: LD_INT 117
18804: EQUAL
18805: IFFALSE 18815
// s30 := true ;
18807: LD_ADDR_EXP 108
18811: PUSH
18812: LD_INT 1
18814: ST_TO_ADDR
// if p3 = 118 then
18815: LD_VAR 0 3
18819: PUSH
18820: LD_INT 118
18822: EQUAL
18823: IFFALSE 18833
// s60 := true ;
18825: LD_ADDR_EXP 109
18829: PUSH
18830: LD_INT 1
18832: ST_TO_ADDR
// end ; if p2 = hack_mode then
18833: LD_VAR 0 2
18837: PUSH
18838: LD_INT 101
18840: EQUAL
18841: IFFALSE 18969
// begin case p3 of 1 :
18843: LD_VAR 0 3
18847: PUSH
18848: LD_INT 1
18850: DOUBLE
18851: EQUAL
18852: IFTRUE 18856
18854: GO 18863
18856: POP
// hHackUnlimitedResources ; 2 :
18857: CALL 31108 0 0
18861: GO 18969
18863: LD_INT 2
18865: DOUBLE
18866: EQUAL
18867: IFTRUE 18871
18869: GO 18878
18871: POP
// hHackSetLevel10 ; 3 :
18872: CALL 31241 0 0
18876: GO 18969
18878: LD_INT 3
18880: DOUBLE
18881: EQUAL
18882: IFTRUE 18886
18884: GO 18893
18886: POP
// hHackSetLevel10YourUnits ; 4 :
18887: CALL 31326 0 0
18891: GO 18969
18893: LD_INT 4
18895: DOUBLE
18896: EQUAL
18897: IFTRUE 18901
18899: GO 18908
18901: POP
// hHackInvincible ; 5 :
18902: CALL 31774 0 0
18906: GO 18969
18908: LD_INT 5
18910: DOUBLE
18911: EQUAL
18912: IFTRUE 18916
18914: GO 18923
18916: POP
// hHackInvisible ; 6 :
18917: CALL 31885 0 0
18921: GO 18969
18923: LD_INT 6
18925: DOUBLE
18926: EQUAL
18927: IFTRUE 18931
18929: GO 18938
18931: POP
// hHackChangeYourSide ; 7 :
18932: CALL 31942 0 0
18936: GO 18969
18938: LD_INT 7
18940: DOUBLE
18941: EQUAL
18942: IFTRUE 18946
18944: GO 18953
18946: POP
// hHackChangeUnitSide ; 8 :
18947: CALL 31984 0 0
18951: GO 18969
18953: LD_INT 8
18955: DOUBLE
18956: EQUAL
18957: IFTRUE 18961
18959: GO 18968
18961: POP
// hHackFog ; end ;
18962: CALL 32085 0 0
18966: GO 18969
18968: POP
// end ; if p2 = game_save_mode then
18969: LD_VAR 0 2
18973: PUSH
18974: LD_INT 102
18976: EQUAL
18977: IFFALSE 19032
// begin if p3 = 1 then
18979: LD_VAR 0 3
18983: PUSH
18984: LD_INT 1
18986: EQUAL
18987: IFFALSE 18999
// globalGameSaveCounter := p4 ;
18989: LD_ADDR_EXP 52
18993: PUSH
18994: LD_VAR 0 4
18998: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
18999: LD_VAR 0 3
19003: PUSH
19004: LD_INT 2
19006: EQUAL
19007: PUSH
19008: LD_EXP 52
19012: AND
19013: IFFALSE 19032
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19015: LD_STRING setGameSaveCounter(
19017: PUSH
19018: LD_EXP 52
19022: STR
19023: PUSH
19024: LD_STRING )
19026: STR
19027: PPUSH
19028: CALL_OW 559
// end ; end ;
19032: LD_VAR 0 7
19036: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
19037: LD_INT 0
19039: PPUSH
// streamModeActive := false ;
19040: LD_ADDR_EXP 53
19044: PUSH
19045: LD_INT 0
19047: ST_TO_ADDR
// normalCounter := 36 ;
19048: LD_ADDR_EXP 54
19052: PUSH
19053: LD_INT 36
19055: ST_TO_ADDR
// hardcoreCounter := 18 ;
19056: LD_ADDR_EXP 55
19060: PUSH
19061: LD_INT 18
19063: ST_TO_ADDR
// sRocket := false ;
19064: LD_ADDR_EXP 58
19068: PUSH
19069: LD_INT 0
19071: ST_TO_ADDR
// sSpeed := false ;
19072: LD_ADDR_EXP 57
19076: PUSH
19077: LD_INT 0
19079: ST_TO_ADDR
// sEngine := false ;
19080: LD_ADDR_EXP 59
19084: PUSH
19085: LD_INT 0
19087: ST_TO_ADDR
// sSpec := false ;
19088: LD_ADDR_EXP 56
19092: PUSH
19093: LD_INT 0
19095: ST_TO_ADDR
// sLevel := false ;
19096: LD_ADDR_EXP 60
19100: PUSH
19101: LD_INT 0
19103: ST_TO_ADDR
// sArmoury := false ;
19104: LD_ADDR_EXP 61
19108: PUSH
19109: LD_INT 0
19111: ST_TO_ADDR
// sRadar := false ;
19112: LD_ADDR_EXP 62
19116: PUSH
19117: LD_INT 0
19119: ST_TO_ADDR
// sBunker := false ;
19120: LD_ADDR_EXP 63
19124: PUSH
19125: LD_INT 0
19127: ST_TO_ADDR
// sHack := false ;
19128: LD_ADDR_EXP 64
19132: PUSH
19133: LD_INT 0
19135: ST_TO_ADDR
// sFire := false ;
19136: LD_ADDR_EXP 65
19140: PUSH
19141: LD_INT 0
19143: ST_TO_ADDR
// sRefresh := false ;
19144: LD_ADDR_EXP 66
19148: PUSH
19149: LD_INT 0
19151: ST_TO_ADDR
// sExp := false ;
19152: LD_ADDR_EXP 67
19156: PUSH
19157: LD_INT 0
19159: ST_TO_ADDR
// sDepot := false ;
19160: LD_ADDR_EXP 68
19164: PUSH
19165: LD_INT 0
19167: ST_TO_ADDR
// sFlag := false ;
19168: LD_ADDR_EXP 69
19172: PUSH
19173: LD_INT 0
19175: ST_TO_ADDR
// sKamikadze := false ;
19176: LD_ADDR_EXP 77
19180: PUSH
19181: LD_INT 0
19183: ST_TO_ADDR
// sTroll := false ;
19184: LD_ADDR_EXP 78
19188: PUSH
19189: LD_INT 0
19191: ST_TO_ADDR
// sSlow := false ;
19192: LD_ADDR_EXP 79
19196: PUSH
19197: LD_INT 0
19199: ST_TO_ADDR
// sLack := false ;
19200: LD_ADDR_EXP 80
19204: PUSH
19205: LD_INT 0
19207: ST_TO_ADDR
// sTank := false ;
19208: LD_ADDR_EXP 82
19212: PUSH
19213: LD_INT 0
19215: ST_TO_ADDR
// sRemote := false ;
19216: LD_ADDR_EXP 83
19220: PUSH
19221: LD_INT 0
19223: ST_TO_ADDR
// sPowell := false ;
19224: LD_ADDR_EXP 84
19228: PUSH
19229: LD_INT 0
19231: ST_TO_ADDR
// sTeleport := false ;
19232: LD_ADDR_EXP 87
19236: PUSH
19237: LD_INT 0
19239: ST_TO_ADDR
// sOilTower := false ;
19240: LD_ADDR_EXP 89
19244: PUSH
19245: LD_INT 0
19247: ST_TO_ADDR
// sShovel := false ;
19248: LD_ADDR_EXP 90
19252: PUSH
19253: LD_INT 0
19255: ST_TO_ADDR
// sSheik := false ;
19256: LD_ADDR_EXP 91
19260: PUSH
19261: LD_INT 0
19263: ST_TO_ADDR
// sEarthquake := false ;
19264: LD_ADDR_EXP 93
19268: PUSH
19269: LD_INT 0
19271: ST_TO_ADDR
// sAI := false ;
19272: LD_ADDR_EXP 94
19276: PUSH
19277: LD_INT 0
19279: ST_TO_ADDR
// sCargo := false ;
19280: LD_ADDR_EXP 97
19284: PUSH
19285: LD_INT 0
19287: ST_TO_ADDR
// sDLaser := false ;
19288: LD_ADDR_EXP 98
19292: PUSH
19293: LD_INT 0
19295: ST_TO_ADDR
// sExchange := false ;
19296: LD_ADDR_EXP 99
19300: PUSH
19301: LD_INT 0
19303: ST_TO_ADDR
// sFac := false ;
19304: LD_ADDR_EXP 100
19308: PUSH
19309: LD_INT 0
19311: ST_TO_ADDR
// sPower := false ;
19312: LD_ADDR_EXP 101
19316: PUSH
19317: LD_INT 0
19319: ST_TO_ADDR
// sRandom := false ;
19320: LD_ADDR_EXP 102
19324: PUSH
19325: LD_INT 0
19327: ST_TO_ADDR
// sShield := false ;
19328: LD_ADDR_EXP 103
19332: PUSH
19333: LD_INT 0
19335: ST_TO_ADDR
// sTime := false ;
19336: LD_ADDR_EXP 104
19340: PUSH
19341: LD_INT 0
19343: ST_TO_ADDR
// sTools := false ;
19344: LD_ADDR_EXP 105
19348: PUSH
19349: LD_INT 0
19351: ST_TO_ADDR
// sSold := false ;
19352: LD_ADDR_EXP 70
19356: PUSH
19357: LD_INT 0
19359: ST_TO_ADDR
// sDiff := false ;
19360: LD_ADDR_EXP 71
19364: PUSH
19365: LD_INT 0
19367: ST_TO_ADDR
// sFog := false ;
19368: LD_ADDR_EXP 74
19372: PUSH
19373: LD_INT 0
19375: ST_TO_ADDR
// sReset := false ;
19376: LD_ADDR_EXP 75
19380: PUSH
19381: LD_INT 0
19383: ST_TO_ADDR
// sSun := false ;
19384: LD_ADDR_EXP 76
19388: PUSH
19389: LD_INT 0
19391: ST_TO_ADDR
// sTiger := false ;
19392: LD_ADDR_EXP 72
19396: PUSH
19397: LD_INT 0
19399: ST_TO_ADDR
// sBomb := false ;
19400: LD_ADDR_EXP 73
19404: PUSH
19405: LD_INT 0
19407: ST_TO_ADDR
// sWound := false ;
19408: LD_ADDR_EXP 81
19412: PUSH
19413: LD_INT 0
19415: ST_TO_ADDR
// sBetray := false ;
19416: LD_ADDR_EXP 85
19420: PUSH
19421: LD_INT 0
19423: ST_TO_ADDR
// sContamin := false ;
19424: LD_ADDR_EXP 86
19428: PUSH
19429: LD_INT 0
19431: ST_TO_ADDR
// sOil := false ;
19432: LD_ADDR_EXP 88
19436: PUSH
19437: LD_INT 0
19439: ST_TO_ADDR
// sStu := false ;
19440: LD_ADDR_EXP 92
19444: PUSH
19445: LD_INT 0
19447: ST_TO_ADDR
// sBazooka := false ;
19448: LD_ADDR_EXP 95
19452: PUSH
19453: LD_INT 0
19455: ST_TO_ADDR
// sMortar := false ;
19456: LD_ADDR_EXP 96
19460: PUSH
19461: LD_INT 0
19463: ST_TO_ADDR
// sRanger := false ;
19464: LD_ADDR_EXP 106
19468: PUSH
19469: LD_INT 0
19471: ST_TO_ADDR
// sComputer := false ;
19472: LD_ADDR_EXP 107
19476: PUSH
19477: LD_INT 0
19479: ST_TO_ADDR
// s30 := false ;
19480: LD_ADDR_EXP 108
19484: PUSH
19485: LD_INT 0
19487: ST_TO_ADDR
// s60 := false ;
19488: LD_ADDR_EXP 109
19492: PUSH
19493: LD_INT 0
19495: ST_TO_ADDR
// end ;
19496: LD_VAR 0 1
19500: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
19501: LD_INT 0
19503: PPUSH
19504: PPUSH
19505: PPUSH
19506: PPUSH
19507: PPUSH
19508: PPUSH
19509: PPUSH
// result := [ ] ;
19510: LD_ADDR_VAR 0 2
19514: PUSH
19515: EMPTY
19516: ST_TO_ADDR
// if campaign_id = 1 then
19517: LD_OWVAR 69
19521: PUSH
19522: LD_INT 1
19524: EQUAL
19525: IFFALSE 22691
// begin case mission_number of 1 :
19527: LD_OWVAR 70
19531: PUSH
19532: LD_INT 1
19534: DOUBLE
19535: EQUAL
19536: IFTRUE 19540
19538: GO 19616
19540: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
19541: LD_ADDR_VAR 0 2
19545: PUSH
19546: LD_INT 2
19548: PUSH
19549: LD_INT 4
19551: PUSH
19552: LD_INT 11
19554: PUSH
19555: LD_INT 12
19557: PUSH
19558: LD_INT 15
19560: PUSH
19561: LD_INT 16
19563: PUSH
19564: LD_INT 22
19566: PUSH
19567: LD_INT 23
19569: PUSH
19570: LD_INT 26
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 101
19586: PUSH
19587: LD_INT 102
19589: PUSH
19590: LD_INT 106
19592: PUSH
19593: LD_INT 116
19595: PUSH
19596: LD_INT 117
19598: PUSH
19599: LD_INT 118
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: ST_TO_ADDR
19614: GO 22689
19616: LD_INT 2
19618: DOUBLE
19619: EQUAL
19620: IFTRUE 19624
19622: GO 19708
19624: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
19625: LD_ADDR_VAR 0 2
19629: PUSH
19630: LD_INT 2
19632: PUSH
19633: LD_INT 4
19635: PUSH
19636: LD_INT 11
19638: PUSH
19639: LD_INT 12
19641: PUSH
19642: LD_INT 15
19644: PUSH
19645: LD_INT 16
19647: PUSH
19648: LD_INT 22
19650: PUSH
19651: LD_INT 23
19653: PUSH
19654: LD_INT 26
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: PUSH
19668: LD_INT 101
19670: PUSH
19671: LD_INT 102
19673: PUSH
19674: LD_INT 105
19676: PUSH
19677: LD_INT 106
19679: PUSH
19680: LD_INT 108
19682: PUSH
19683: LD_INT 116
19685: PUSH
19686: LD_INT 117
19688: PUSH
19689: LD_INT 118
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: ST_TO_ADDR
19706: GO 22689
19708: LD_INT 3
19710: DOUBLE
19711: EQUAL
19712: IFTRUE 19716
19714: GO 19804
19716: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
19717: LD_ADDR_VAR 0 2
19721: PUSH
19722: LD_INT 2
19724: PUSH
19725: LD_INT 4
19727: PUSH
19728: LD_INT 5
19730: PUSH
19731: LD_INT 11
19733: PUSH
19734: LD_INT 12
19736: PUSH
19737: LD_INT 15
19739: PUSH
19740: LD_INT 16
19742: PUSH
19743: LD_INT 22
19745: PUSH
19746: LD_INT 26
19748: PUSH
19749: LD_INT 36
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 101
19766: PUSH
19767: LD_INT 102
19769: PUSH
19770: LD_INT 105
19772: PUSH
19773: LD_INT 106
19775: PUSH
19776: LD_INT 108
19778: PUSH
19779: LD_INT 116
19781: PUSH
19782: LD_INT 117
19784: PUSH
19785: LD_INT 118
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: ST_TO_ADDR
19802: GO 22689
19804: LD_INT 4
19806: DOUBLE
19807: EQUAL
19808: IFTRUE 19812
19810: GO 19908
19812: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
19813: LD_ADDR_VAR 0 2
19817: PUSH
19818: LD_INT 2
19820: PUSH
19821: LD_INT 4
19823: PUSH
19824: LD_INT 5
19826: PUSH
19827: LD_INT 8
19829: PUSH
19830: LD_INT 11
19832: PUSH
19833: LD_INT 12
19835: PUSH
19836: LD_INT 15
19838: PUSH
19839: LD_INT 16
19841: PUSH
19842: LD_INT 22
19844: PUSH
19845: LD_INT 23
19847: PUSH
19848: LD_INT 26
19850: PUSH
19851: LD_INT 36
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 101
19870: PUSH
19871: LD_INT 102
19873: PUSH
19874: LD_INT 105
19876: PUSH
19877: LD_INT 106
19879: PUSH
19880: LD_INT 108
19882: PUSH
19883: LD_INT 116
19885: PUSH
19886: LD_INT 117
19888: PUSH
19889: LD_INT 118
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: ST_TO_ADDR
19906: GO 22689
19908: LD_INT 5
19910: DOUBLE
19911: EQUAL
19912: IFTRUE 19916
19914: GO 20028
19916: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
19917: LD_ADDR_VAR 0 2
19921: PUSH
19922: LD_INT 2
19924: PUSH
19925: LD_INT 4
19927: PUSH
19928: LD_INT 5
19930: PUSH
19931: LD_INT 6
19933: PUSH
19934: LD_INT 8
19936: PUSH
19937: LD_INT 11
19939: PUSH
19940: LD_INT 12
19942: PUSH
19943: LD_INT 15
19945: PUSH
19946: LD_INT 16
19948: PUSH
19949: LD_INT 22
19951: PUSH
19952: LD_INT 23
19954: PUSH
19955: LD_INT 25
19957: PUSH
19958: LD_INT 26
19960: PUSH
19961: LD_INT 36
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: PUSH
19980: LD_INT 101
19982: PUSH
19983: LD_INT 102
19985: PUSH
19986: LD_INT 105
19988: PUSH
19989: LD_INT 106
19991: PUSH
19992: LD_INT 108
19994: PUSH
19995: LD_INT 109
19997: PUSH
19998: LD_INT 112
20000: PUSH
20001: LD_INT 116
20003: PUSH
20004: LD_INT 117
20006: PUSH
20007: LD_INT 118
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: ST_TO_ADDR
20026: GO 22689
20028: LD_INT 6
20030: DOUBLE
20031: EQUAL
20032: IFTRUE 20036
20034: GO 20168
20036: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20037: LD_ADDR_VAR 0 2
20041: PUSH
20042: LD_INT 2
20044: PUSH
20045: LD_INT 4
20047: PUSH
20048: LD_INT 5
20050: PUSH
20051: LD_INT 6
20053: PUSH
20054: LD_INT 8
20056: PUSH
20057: LD_INT 11
20059: PUSH
20060: LD_INT 12
20062: PUSH
20063: LD_INT 15
20065: PUSH
20066: LD_INT 16
20068: PUSH
20069: LD_INT 20
20071: PUSH
20072: LD_INT 21
20074: PUSH
20075: LD_INT 22
20077: PUSH
20078: LD_INT 23
20080: PUSH
20081: LD_INT 25
20083: PUSH
20084: LD_INT 26
20086: PUSH
20087: LD_INT 30
20089: PUSH
20090: LD_INT 31
20092: PUSH
20093: LD_INT 32
20095: PUSH
20096: LD_INT 36
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: PUSH
20120: LD_INT 101
20122: PUSH
20123: LD_INT 102
20125: PUSH
20126: LD_INT 105
20128: PUSH
20129: LD_INT 106
20131: PUSH
20132: LD_INT 108
20134: PUSH
20135: LD_INT 109
20137: PUSH
20138: LD_INT 112
20140: PUSH
20141: LD_INT 116
20143: PUSH
20144: LD_INT 117
20146: PUSH
20147: LD_INT 118
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: ST_TO_ADDR
20166: GO 22689
20168: LD_INT 7
20170: DOUBLE
20171: EQUAL
20172: IFTRUE 20176
20174: GO 20288
20176: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20177: LD_ADDR_VAR 0 2
20181: PUSH
20182: LD_INT 2
20184: PUSH
20185: LD_INT 4
20187: PUSH
20188: LD_INT 5
20190: PUSH
20191: LD_INT 7
20193: PUSH
20194: LD_INT 11
20196: PUSH
20197: LD_INT 12
20199: PUSH
20200: LD_INT 15
20202: PUSH
20203: LD_INT 16
20205: PUSH
20206: LD_INT 20
20208: PUSH
20209: LD_INT 21
20211: PUSH
20212: LD_INT 22
20214: PUSH
20215: LD_INT 23
20217: PUSH
20218: LD_INT 25
20220: PUSH
20221: LD_INT 26
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: PUSH
20240: LD_INT 101
20242: PUSH
20243: LD_INT 102
20245: PUSH
20246: LD_INT 103
20248: PUSH
20249: LD_INT 105
20251: PUSH
20252: LD_INT 106
20254: PUSH
20255: LD_INT 108
20257: PUSH
20258: LD_INT 112
20260: PUSH
20261: LD_INT 116
20263: PUSH
20264: LD_INT 117
20266: PUSH
20267: LD_INT 118
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: ST_TO_ADDR
20286: GO 22689
20288: LD_INT 8
20290: DOUBLE
20291: EQUAL
20292: IFTRUE 20296
20294: GO 20436
20296: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
20297: LD_ADDR_VAR 0 2
20301: PUSH
20302: LD_INT 2
20304: PUSH
20305: LD_INT 4
20307: PUSH
20308: LD_INT 5
20310: PUSH
20311: LD_INT 6
20313: PUSH
20314: LD_INT 7
20316: PUSH
20317: LD_INT 8
20319: PUSH
20320: LD_INT 11
20322: PUSH
20323: LD_INT 12
20325: PUSH
20326: LD_INT 15
20328: PUSH
20329: LD_INT 16
20331: PUSH
20332: LD_INT 20
20334: PUSH
20335: LD_INT 21
20337: PUSH
20338: LD_INT 22
20340: PUSH
20341: LD_INT 23
20343: PUSH
20344: LD_INT 25
20346: PUSH
20347: LD_INT 26
20349: PUSH
20350: LD_INT 30
20352: PUSH
20353: LD_INT 31
20355: PUSH
20356: LD_INT 32
20358: PUSH
20359: LD_INT 36
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: PUSH
20384: LD_INT 101
20386: PUSH
20387: LD_INT 102
20389: PUSH
20390: LD_INT 103
20392: PUSH
20393: LD_INT 105
20395: PUSH
20396: LD_INT 106
20398: PUSH
20399: LD_INT 108
20401: PUSH
20402: LD_INT 109
20404: PUSH
20405: LD_INT 112
20407: PUSH
20408: LD_INT 116
20410: PUSH
20411: LD_INT 117
20413: PUSH
20414: LD_INT 118
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: ST_TO_ADDR
20434: GO 22689
20436: LD_INT 9
20438: DOUBLE
20439: EQUAL
20440: IFTRUE 20444
20442: GO 20592
20444: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
20445: LD_ADDR_VAR 0 2
20449: PUSH
20450: LD_INT 2
20452: PUSH
20453: LD_INT 4
20455: PUSH
20456: LD_INT 5
20458: PUSH
20459: LD_INT 6
20461: PUSH
20462: LD_INT 7
20464: PUSH
20465: LD_INT 8
20467: PUSH
20468: LD_INT 11
20470: PUSH
20471: LD_INT 12
20473: PUSH
20474: LD_INT 15
20476: PUSH
20477: LD_INT 16
20479: PUSH
20480: LD_INT 20
20482: PUSH
20483: LD_INT 21
20485: PUSH
20486: LD_INT 22
20488: PUSH
20489: LD_INT 23
20491: PUSH
20492: LD_INT 25
20494: PUSH
20495: LD_INT 26
20497: PUSH
20498: LD_INT 28
20500: PUSH
20501: LD_INT 30
20503: PUSH
20504: LD_INT 31
20506: PUSH
20507: LD_INT 32
20509: PUSH
20510: LD_INT 36
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: PUSH
20536: LD_INT 101
20538: PUSH
20539: LD_INT 102
20541: PUSH
20542: LD_INT 103
20544: PUSH
20545: LD_INT 105
20547: PUSH
20548: LD_INT 106
20550: PUSH
20551: LD_INT 108
20553: PUSH
20554: LD_INT 109
20556: PUSH
20557: LD_INT 112
20559: PUSH
20560: LD_INT 114
20562: PUSH
20563: LD_INT 116
20565: PUSH
20566: LD_INT 117
20568: PUSH
20569: LD_INT 118
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: ST_TO_ADDR
20590: GO 22689
20592: LD_INT 10
20594: DOUBLE
20595: EQUAL
20596: IFTRUE 20600
20598: GO 20796
20600: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
20601: LD_ADDR_VAR 0 2
20605: PUSH
20606: LD_INT 2
20608: PUSH
20609: LD_INT 4
20611: PUSH
20612: LD_INT 5
20614: PUSH
20615: LD_INT 6
20617: PUSH
20618: LD_INT 7
20620: PUSH
20621: LD_INT 8
20623: PUSH
20624: LD_INT 9
20626: PUSH
20627: LD_INT 10
20629: PUSH
20630: LD_INT 11
20632: PUSH
20633: LD_INT 12
20635: PUSH
20636: LD_INT 13
20638: PUSH
20639: LD_INT 14
20641: PUSH
20642: LD_INT 15
20644: PUSH
20645: LD_INT 16
20647: PUSH
20648: LD_INT 17
20650: PUSH
20651: LD_INT 18
20653: PUSH
20654: LD_INT 19
20656: PUSH
20657: LD_INT 20
20659: PUSH
20660: LD_INT 21
20662: PUSH
20663: LD_INT 22
20665: PUSH
20666: LD_INT 23
20668: PUSH
20669: LD_INT 24
20671: PUSH
20672: LD_INT 25
20674: PUSH
20675: LD_INT 26
20677: PUSH
20678: LD_INT 28
20680: PUSH
20681: LD_INT 30
20683: PUSH
20684: LD_INT 31
20686: PUSH
20687: LD_INT 32
20689: PUSH
20690: LD_INT 36
20692: PUSH
20693: EMPTY
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 101
20726: PUSH
20727: LD_INT 102
20729: PUSH
20730: LD_INT 103
20732: PUSH
20733: LD_INT 104
20735: PUSH
20736: LD_INT 105
20738: PUSH
20739: LD_INT 106
20741: PUSH
20742: LD_INT 107
20744: PUSH
20745: LD_INT 108
20747: PUSH
20748: LD_INT 109
20750: PUSH
20751: LD_INT 110
20753: PUSH
20754: LD_INT 111
20756: PUSH
20757: LD_INT 112
20759: PUSH
20760: LD_INT 114
20762: PUSH
20763: LD_INT 116
20765: PUSH
20766: LD_INT 117
20768: PUSH
20769: LD_INT 118
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: ST_TO_ADDR
20794: GO 22689
20796: LD_INT 11
20798: DOUBLE
20799: EQUAL
20800: IFTRUE 20804
20802: GO 21008
20804: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
20805: LD_ADDR_VAR 0 2
20809: PUSH
20810: LD_INT 2
20812: PUSH
20813: LD_INT 3
20815: PUSH
20816: LD_INT 4
20818: PUSH
20819: LD_INT 5
20821: PUSH
20822: LD_INT 6
20824: PUSH
20825: LD_INT 7
20827: PUSH
20828: LD_INT 8
20830: PUSH
20831: LD_INT 9
20833: PUSH
20834: LD_INT 10
20836: PUSH
20837: LD_INT 11
20839: PUSH
20840: LD_INT 12
20842: PUSH
20843: LD_INT 13
20845: PUSH
20846: LD_INT 14
20848: PUSH
20849: LD_INT 15
20851: PUSH
20852: LD_INT 16
20854: PUSH
20855: LD_INT 17
20857: PUSH
20858: LD_INT 18
20860: PUSH
20861: LD_INT 19
20863: PUSH
20864: LD_INT 20
20866: PUSH
20867: LD_INT 21
20869: PUSH
20870: LD_INT 22
20872: PUSH
20873: LD_INT 23
20875: PUSH
20876: LD_INT 24
20878: PUSH
20879: LD_INT 25
20881: PUSH
20882: LD_INT 26
20884: PUSH
20885: LD_INT 28
20887: PUSH
20888: LD_INT 30
20890: PUSH
20891: LD_INT 31
20893: PUSH
20894: LD_INT 32
20896: PUSH
20897: LD_INT 34
20899: PUSH
20900: LD_INT 36
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 101
20938: PUSH
20939: LD_INT 102
20941: PUSH
20942: LD_INT 103
20944: PUSH
20945: LD_INT 104
20947: PUSH
20948: LD_INT 105
20950: PUSH
20951: LD_INT 106
20953: PUSH
20954: LD_INT 107
20956: PUSH
20957: LD_INT 108
20959: PUSH
20960: LD_INT 109
20962: PUSH
20963: LD_INT 110
20965: PUSH
20966: LD_INT 111
20968: PUSH
20969: LD_INT 112
20971: PUSH
20972: LD_INT 114
20974: PUSH
20975: LD_INT 116
20977: PUSH
20978: LD_INT 117
20980: PUSH
20981: LD_INT 118
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: ST_TO_ADDR
21006: GO 22689
21008: LD_INT 12
21010: DOUBLE
21011: EQUAL
21012: IFTRUE 21016
21014: GO 21236
21016: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21017: LD_ADDR_VAR 0 2
21021: PUSH
21022: LD_INT 1
21024: PUSH
21025: LD_INT 2
21027: PUSH
21028: LD_INT 3
21030: PUSH
21031: LD_INT 4
21033: PUSH
21034: LD_INT 5
21036: PUSH
21037: LD_INT 6
21039: PUSH
21040: LD_INT 7
21042: PUSH
21043: LD_INT 8
21045: PUSH
21046: LD_INT 9
21048: PUSH
21049: LD_INT 10
21051: PUSH
21052: LD_INT 11
21054: PUSH
21055: LD_INT 12
21057: PUSH
21058: LD_INT 13
21060: PUSH
21061: LD_INT 14
21063: PUSH
21064: LD_INT 15
21066: PUSH
21067: LD_INT 16
21069: PUSH
21070: LD_INT 17
21072: PUSH
21073: LD_INT 18
21075: PUSH
21076: LD_INT 19
21078: PUSH
21079: LD_INT 20
21081: PUSH
21082: LD_INT 21
21084: PUSH
21085: LD_INT 22
21087: PUSH
21088: LD_INT 23
21090: PUSH
21091: LD_INT 24
21093: PUSH
21094: LD_INT 25
21096: PUSH
21097: LD_INT 26
21099: PUSH
21100: LD_INT 27
21102: PUSH
21103: LD_INT 28
21105: PUSH
21106: LD_INT 30
21108: PUSH
21109: LD_INT 31
21111: PUSH
21112: LD_INT 32
21114: PUSH
21115: LD_INT 33
21117: PUSH
21118: LD_INT 34
21120: PUSH
21121: LD_INT 36
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: PUSH
21160: LD_INT 101
21162: PUSH
21163: LD_INT 102
21165: PUSH
21166: LD_INT 103
21168: PUSH
21169: LD_INT 104
21171: PUSH
21172: LD_INT 105
21174: PUSH
21175: LD_INT 106
21177: PUSH
21178: LD_INT 107
21180: PUSH
21181: LD_INT 108
21183: PUSH
21184: LD_INT 109
21186: PUSH
21187: LD_INT 110
21189: PUSH
21190: LD_INT 111
21192: PUSH
21193: LD_INT 112
21195: PUSH
21196: LD_INT 113
21198: PUSH
21199: LD_INT 114
21201: PUSH
21202: LD_INT 116
21204: PUSH
21205: LD_INT 117
21207: PUSH
21208: LD_INT 118
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: ST_TO_ADDR
21234: GO 22689
21236: LD_INT 13
21238: DOUBLE
21239: EQUAL
21240: IFTRUE 21244
21242: GO 21452
21244: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
21245: LD_ADDR_VAR 0 2
21249: PUSH
21250: LD_INT 1
21252: PUSH
21253: LD_INT 2
21255: PUSH
21256: LD_INT 3
21258: PUSH
21259: LD_INT 4
21261: PUSH
21262: LD_INT 5
21264: PUSH
21265: LD_INT 8
21267: PUSH
21268: LD_INT 9
21270: PUSH
21271: LD_INT 10
21273: PUSH
21274: LD_INT 11
21276: PUSH
21277: LD_INT 12
21279: PUSH
21280: LD_INT 14
21282: PUSH
21283: LD_INT 15
21285: PUSH
21286: LD_INT 16
21288: PUSH
21289: LD_INT 17
21291: PUSH
21292: LD_INT 18
21294: PUSH
21295: LD_INT 19
21297: PUSH
21298: LD_INT 20
21300: PUSH
21301: LD_INT 21
21303: PUSH
21304: LD_INT 22
21306: PUSH
21307: LD_INT 23
21309: PUSH
21310: LD_INT 24
21312: PUSH
21313: LD_INT 25
21315: PUSH
21316: LD_INT 26
21318: PUSH
21319: LD_INT 27
21321: PUSH
21322: LD_INT 28
21324: PUSH
21325: LD_INT 30
21327: PUSH
21328: LD_INT 31
21330: PUSH
21331: LD_INT 32
21333: PUSH
21334: LD_INT 33
21336: PUSH
21337: LD_INT 34
21339: PUSH
21340: LD_INT 36
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: PUSH
21376: LD_INT 101
21378: PUSH
21379: LD_INT 102
21381: PUSH
21382: LD_INT 103
21384: PUSH
21385: LD_INT 104
21387: PUSH
21388: LD_INT 105
21390: PUSH
21391: LD_INT 106
21393: PUSH
21394: LD_INT 107
21396: PUSH
21397: LD_INT 108
21399: PUSH
21400: LD_INT 109
21402: PUSH
21403: LD_INT 110
21405: PUSH
21406: LD_INT 111
21408: PUSH
21409: LD_INT 112
21411: PUSH
21412: LD_INT 113
21414: PUSH
21415: LD_INT 114
21417: PUSH
21418: LD_INT 116
21420: PUSH
21421: LD_INT 117
21423: PUSH
21424: LD_INT 118
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: ST_TO_ADDR
21450: GO 22689
21452: LD_INT 14
21454: DOUBLE
21455: EQUAL
21456: IFTRUE 21460
21458: GO 21684
21460: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
21461: LD_ADDR_VAR 0 2
21465: PUSH
21466: LD_INT 1
21468: PUSH
21469: LD_INT 2
21471: PUSH
21472: LD_INT 3
21474: PUSH
21475: LD_INT 4
21477: PUSH
21478: LD_INT 5
21480: PUSH
21481: LD_INT 6
21483: PUSH
21484: LD_INT 7
21486: PUSH
21487: LD_INT 8
21489: PUSH
21490: LD_INT 9
21492: PUSH
21493: LD_INT 10
21495: PUSH
21496: LD_INT 11
21498: PUSH
21499: LD_INT 12
21501: PUSH
21502: LD_INT 13
21504: PUSH
21505: LD_INT 14
21507: PUSH
21508: LD_INT 15
21510: PUSH
21511: LD_INT 16
21513: PUSH
21514: LD_INT 17
21516: PUSH
21517: LD_INT 18
21519: PUSH
21520: LD_INT 19
21522: PUSH
21523: LD_INT 20
21525: PUSH
21526: LD_INT 21
21528: PUSH
21529: LD_INT 22
21531: PUSH
21532: LD_INT 23
21534: PUSH
21535: LD_INT 24
21537: PUSH
21538: LD_INT 25
21540: PUSH
21541: LD_INT 26
21543: PUSH
21544: LD_INT 27
21546: PUSH
21547: LD_INT 28
21549: PUSH
21550: LD_INT 29
21552: PUSH
21553: LD_INT 30
21555: PUSH
21556: LD_INT 31
21558: PUSH
21559: LD_INT 32
21561: PUSH
21562: LD_INT 33
21564: PUSH
21565: LD_INT 34
21567: PUSH
21568: LD_INT 36
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 101
21610: PUSH
21611: LD_INT 102
21613: PUSH
21614: LD_INT 103
21616: PUSH
21617: LD_INT 104
21619: PUSH
21620: LD_INT 105
21622: PUSH
21623: LD_INT 106
21625: PUSH
21626: LD_INT 107
21628: PUSH
21629: LD_INT 108
21631: PUSH
21632: LD_INT 109
21634: PUSH
21635: LD_INT 110
21637: PUSH
21638: LD_INT 111
21640: PUSH
21641: LD_INT 112
21643: PUSH
21644: LD_INT 113
21646: PUSH
21647: LD_INT 114
21649: PUSH
21650: LD_INT 116
21652: PUSH
21653: LD_INT 117
21655: PUSH
21656: LD_INT 118
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: ST_TO_ADDR
21682: GO 22689
21684: LD_INT 15
21686: DOUBLE
21687: EQUAL
21688: IFTRUE 21692
21690: GO 21916
21692: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
21693: LD_ADDR_VAR 0 2
21697: PUSH
21698: LD_INT 1
21700: PUSH
21701: LD_INT 2
21703: PUSH
21704: LD_INT 3
21706: PUSH
21707: LD_INT 4
21709: PUSH
21710: LD_INT 5
21712: PUSH
21713: LD_INT 6
21715: PUSH
21716: LD_INT 7
21718: PUSH
21719: LD_INT 8
21721: PUSH
21722: LD_INT 9
21724: PUSH
21725: LD_INT 10
21727: PUSH
21728: LD_INT 11
21730: PUSH
21731: LD_INT 12
21733: PUSH
21734: LD_INT 13
21736: PUSH
21737: LD_INT 14
21739: PUSH
21740: LD_INT 15
21742: PUSH
21743: LD_INT 16
21745: PUSH
21746: LD_INT 17
21748: PUSH
21749: LD_INT 18
21751: PUSH
21752: LD_INT 19
21754: PUSH
21755: LD_INT 20
21757: PUSH
21758: LD_INT 21
21760: PUSH
21761: LD_INT 22
21763: PUSH
21764: LD_INT 23
21766: PUSH
21767: LD_INT 24
21769: PUSH
21770: LD_INT 25
21772: PUSH
21773: LD_INT 26
21775: PUSH
21776: LD_INT 27
21778: PUSH
21779: LD_INT 28
21781: PUSH
21782: LD_INT 29
21784: PUSH
21785: LD_INT 30
21787: PUSH
21788: LD_INT 31
21790: PUSH
21791: LD_INT 32
21793: PUSH
21794: LD_INT 33
21796: PUSH
21797: LD_INT 34
21799: PUSH
21800: LD_INT 36
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: PUSH
21840: LD_INT 101
21842: PUSH
21843: LD_INT 102
21845: PUSH
21846: LD_INT 103
21848: PUSH
21849: LD_INT 104
21851: PUSH
21852: LD_INT 105
21854: PUSH
21855: LD_INT 106
21857: PUSH
21858: LD_INT 107
21860: PUSH
21861: LD_INT 108
21863: PUSH
21864: LD_INT 109
21866: PUSH
21867: LD_INT 110
21869: PUSH
21870: LD_INT 111
21872: PUSH
21873: LD_INT 112
21875: PUSH
21876: LD_INT 113
21878: PUSH
21879: LD_INT 114
21881: PUSH
21882: LD_INT 116
21884: PUSH
21885: LD_INT 117
21887: PUSH
21888: LD_INT 118
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: ST_TO_ADDR
21914: GO 22689
21916: LD_INT 16
21918: DOUBLE
21919: EQUAL
21920: IFTRUE 21924
21922: GO 22060
21924: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
21925: LD_ADDR_VAR 0 2
21929: PUSH
21930: LD_INT 2
21932: PUSH
21933: LD_INT 4
21935: PUSH
21936: LD_INT 5
21938: PUSH
21939: LD_INT 7
21941: PUSH
21942: LD_INT 11
21944: PUSH
21945: LD_INT 12
21947: PUSH
21948: LD_INT 15
21950: PUSH
21951: LD_INT 16
21953: PUSH
21954: LD_INT 20
21956: PUSH
21957: LD_INT 21
21959: PUSH
21960: LD_INT 22
21962: PUSH
21963: LD_INT 23
21965: PUSH
21966: LD_INT 25
21968: PUSH
21969: LD_INT 26
21971: PUSH
21972: LD_INT 30
21974: PUSH
21975: LD_INT 31
21977: PUSH
21978: LD_INT 32
21980: PUSH
21981: LD_INT 33
21983: PUSH
21984: LD_INT 34
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 101
22010: PUSH
22011: LD_INT 102
22013: PUSH
22014: LD_INT 103
22016: PUSH
22017: LD_INT 106
22019: PUSH
22020: LD_INT 108
22022: PUSH
22023: LD_INT 112
22025: PUSH
22026: LD_INT 113
22028: PUSH
22029: LD_INT 114
22031: PUSH
22032: LD_INT 116
22034: PUSH
22035: LD_INT 117
22037: PUSH
22038: LD_INT 118
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: ST_TO_ADDR
22058: GO 22689
22060: LD_INT 17
22062: DOUBLE
22063: EQUAL
22064: IFTRUE 22068
22066: GO 22292
22068: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22069: LD_ADDR_VAR 0 2
22073: PUSH
22074: LD_INT 1
22076: PUSH
22077: LD_INT 2
22079: PUSH
22080: LD_INT 3
22082: PUSH
22083: LD_INT 4
22085: PUSH
22086: LD_INT 5
22088: PUSH
22089: LD_INT 6
22091: PUSH
22092: LD_INT 7
22094: PUSH
22095: LD_INT 8
22097: PUSH
22098: LD_INT 9
22100: PUSH
22101: LD_INT 10
22103: PUSH
22104: LD_INT 11
22106: PUSH
22107: LD_INT 12
22109: PUSH
22110: LD_INT 13
22112: PUSH
22113: LD_INT 14
22115: PUSH
22116: LD_INT 15
22118: PUSH
22119: LD_INT 16
22121: PUSH
22122: LD_INT 17
22124: PUSH
22125: LD_INT 18
22127: PUSH
22128: LD_INT 19
22130: PUSH
22131: LD_INT 20
22133: PUSH
22134: LD_INT 21
22136: PUSH
22137: LD_INT 22
22139: PUSH
22140: LD_INT 23
22142: PUSH
22143: LD_INT 24
22145: PUSH
22146: LD_INT 25
22148: PUSH
22149: LD_INT 26
22151: PUSH
22152: LD_INT 27
22154: PUSH
22155: LD_INT 28
22157: PUSH
22158: LD_INT 29
22160: PUSH
22161: LD_INT 30
22163: PUSH
22164: LD_INT 31
22166: PUSH
22167: LD_INT 32
22169: PUSH
22170: LD_INT 33
22172: PUSH
22173: LD_INT 34
22175: PUSH
22176: LD_INT 36
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: PUSH
22216: LD_INT 101
22218: PUSH
22219: LD_INT 102
22221: PUSH
22222: LD_INT 103
22224: PUSH
22225: LD_INT 104
22227: PUSH
22228: LD_INT 105
22230: PUSH
22231: LD_INT 106
22233: PUSH
22234: LD_INT 107
22236: PUSH
22237: LD_INT 108
22239: PUSH
22240: LD_INT 109
22242: PUSH
22243: LD_INT 110
22245: PUSH
22246: LD_INT 111
22248: PUSH
22249: LD_INT 112
22251: PUSH
22252: LD_INT 113
22254: PUSH
22255: LD_INT 114
22257: PUSH
22258: LD_INT 116
22260: PUSH
22261: LD_INT 117
22263: PUSH
22264: LD_INT 118
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: ST_TO_ADDR
22290: GO 22689
22292: LD_INT 18
22294: DOUBLE
22295: EQUAL
22296: IFTRUE 22300
22298: GO 22448
22300: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
22301: LD_ADDR_VAR 0 2
22305: PUSH
22306: LD_INT 2
22308: PUSH
22309: LD_INT 4
22311: PUSH
22312: LD_INT 5
22314: PUSH
22315: LD_INT 7
22317: PUSH
22318: LD_INT 11
22320: PUSH
22321: LD_INT 12
22323: PUSH
22324: LD_INT 15
22326: PUSH
22327: LD_INT 16
22329: PUSH
22330: LD_INT 20
22332: PUSH
22333: LD_INT 21
22335: PUSH
22336: LD_INT 22
22338: PUSH
22339: LD_INT 23
22341: PUSH
22342: LD_INT 25
22344: PUSH
22345: LD_INT 26
22347: PUSH
22348: LD_INT 30
22350: PUSH
22351: LD_INT 31
22353: PUSH
22354: LD_INT 32
22356: PUSH
22357: LD_INT 33
22359: PUSH
22360: LD_INT 34
22362: PUSH
22363: LD_INT 35
22365: PUSH
22366: LD_INT 36
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: PUSH
22392: LD_INT 101
22394: PUSH
22395: LD_INT 102
22397: PUSH
22398: LD_INT 103
22400: PUSH
22401: LD_INT 106
22403: PUSH
22404: LD_INT 108
22406: PUSH
22407: LD_INT 112
22409: PUSH
22410: LD_INT 113
22412: PUSH
22413: LD_INT 114
22415: PUSH
22416: LD_INT 115
22418: PUSH
22419: LD_INT 116
22421: PUSH
22422: LD_INT 117
22424: PUSH
22425: LD_INT 118
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: ST_TO_ADDR
22446: GO 22689
22448: LD_INT 19
22450: DOUBLE
22451: EQUAL
22452: IFTRUE 22456
22454: GO 22688
22456: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
22457: LD_ADDR_VAR 0 2
22461: PUSH
22462: LD_INT 1
22464: PUSH
22465: LD_INT 2
22467: PUSH
22468: LD_INT 3
22470: PUSH
22471: LD_INT 4
22473: PUSH
22474: LD_INT 5
22476: PUSH
22477: LD_INT 6
22479: PUSH
22480: LD_INT 7
22482: PUSH
22483: LD_INT 8
22485: PUSH
22486: LD_INT 9
22488: PUSH
22489: LD_INT 10
22491: PUSH
22492: LD_INT 11
22494: PUSH
22495: LD_INT 12
22497: PUSH
22498: LD_INT 13
22500: PUSH
22501: LD_INT 14
22503: PUSH
22504: LD_INT 15
22506: PUSH
22507: LD_INT 16
22509: PUSH
22510: LD_INT 17
22512: PUSH
22513: LD_INT 18
22515: PUSH
22516: LD_INT 19
22518: PUSH
22519: LD_INT 20
22521: PUSH
22522: LD_INT 21
22524: PUSH
22525: LD_INT 22
22527: PUSH
22528: LD_INT 23
22530: PUSH
22531: LD_INT 24
22533: PUSH
22534: LD_INT 25
22536: PUSH
22537: LD_INT 26
22539: PUSH
22540: LD_INT 27
22542: PUSH
22543: LD_INT 28
22545: PUSH
22546: LD_INT 29
22548: PUSH
22549: LD_INT 30
22551: PUSH
22552: LD_INT 31
22554: PUSH
22555: LD_INT 32
22557: PUSH
22558: LD_INT 33
22560: PUSH
22561: LD_INT 34
22563: PUSH
22564: LD_INT 35
22566: PUSH
22567: LD_INT 36
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 101
22610: PUSH
22611: LD_INT 102
22613: PUSH
22614: LD_INT 103
22616: PUSH
22617: LD_INT 104
22619: PUSH
22620: LD_INT 105
22622: PUSH
22623: LD_INT 106
22625: PUSH
22626: LD_INT 107
22628: PUSH
22629: LD_INT 108
22631: PUSH
22632: LD_INT 109
22634: PUSH
22635: LD_INT 110
22637: PUSH
22638: LD_INT 111
22640: PUSH
22641: LD_INT 112
22643: PUSH
22644: LD_INT 113
22646: PUSH
22647: LD_INT 114
22649: PUSH
22650: LD_INT 115
22652: PUSH
22653: LD_INT 116
22655: PUSH
22656: LD_INT 117
22658: PUSH
22659: LD_INT 118
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: ST_TO_ADDR
22686: GO 22689
22688: POP
// end else
22689: GO 22920
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
22691: LD_ADDR_VAR 0 2
22695: PUSH
22696: LD_INT 1
22698: PUSH
22699: LD_INT 2
22701: PUSH
22702: LD_INT 3
22704: PUSH
22705: LD_INT 4
22707: PUSH
22708: LD_INT 5
22710: PUSH
22711: LD_INT 6
22713: PUSH
22714: LD_INT 7
22716: PUSH
22717: LD_INT 8
22719: PUSH
22720: LD_INT 9
22722: PUSH
22723: LD_INT 10
22725: PUSH
22726: LD_INT 11
22728: PUSH
22729: LD_INT 12
22731: PUSH
22732: LD_INT 13
22734: PUSH
22735: LD_INT 14
22737: PUSH
22738: LD_INT 15
22740: PUSH
22741: LD_INT 16
22743: PUSH
22744: LD_INT 17
22746: PUSH
22747: LD_INT 18
22749: PUSH
22750: LD_INT 19
22752: PUSH
22753: LD_INT 20
22755: PUSH
22756: LD_INT 21
22758: PUSH
22759: LD_INT 22
22761: PUSH
22762: LD_INT 23
22764: PUSH
22765: LD_INT 24
22767: PUSH
22768: LD_INT 25
22770: PUSH
22771: LD_INT 26
22773: PUSH
22774: LD_INT 27
22776: PUSH
22777: LD_INT 28
22779: PUSH
22780: LD_INT 29
22782: PUSH
22783: LD_INT 30
22785: PUSH
22786: LD_INT 31
22788: PUSH
22789: LD_INT 32
22791: PUSH
22792: LD_INT 33
22794: PUSH
22795: LD_INT 34
22797: PUSH
22798: LD_INT 35
22800: PUSH
22801: LD_INT 36
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: PUSH
22842: LD_INT 101
22844: PUSH
22845: LD_INT 102
22847: PUSH
22848: LD_INT 103
22850: PUSH
22851: LD_INT 104
22853: PUSH
22854: LD_INT 105
22856: PUSH
22857: LD_INT 106
22859: PUSH
22860: LD_INT 107
22862: PUSH
22863: LD_INT 108
22865: PUSH
22866: LD_INT 109
22868: PUSH
22869: LD_INT 110
22871: PUSH
22872: LD_INT 111
22874: PUSH
22875: LD_INT 112
22877: PUSH
22878: LD_INT 113
22880: PUSH
22881: LD_INT 114
22883: PUSH
22884: LD_INT 115
22886: PUSH
22887: LD_INT 116
22889: PUSH
22890: LD_INT 117
22892: PUSH
22893: LD_INT 118
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: ST_TO_ADDR
// if result then
22920: LD_VAR 0 2
22924: IFFALSE 23710
// begin normal :=  ;
22926: LD_ADDR_VAR 0 5
22930: PUSH
22931: LD_STRING 
22933: ST_TO_ADDR
// hardcore :=  ;
22934: LD_ADDR_VAR 0 6
22938: PUSH
22939: LD_STRING 
22941: ST_TO_ADDR
// active :=  ;
22942: LD_ADDR_VAR 0 7
22946: PUSH
22947: LD_STRING 
22949: ST_TO_ADDR
// for i = 1 to normalCounter do
22950: LD_ADDR_VAR 0 8
22954: PUSH
22955: DOUBLE
22956: LD_INT 1
22958: DEC
22959: ST_TO_ADDR
22960: LD_EXP 54
22964: PUSH
22965: FOR_TO
22966: IFFALSE 23067
// begin tmp := 0 ;
22968: LD_ADDR_VAR 0 3
22972: PUSH
22973: LD_STRING 0
22975: ST_TO_ADDR
// if result [ 1 ] then
22976: LD_VAR 0 2
22980: PUSH
22981: LD_INT 1
22983: ARRAY
22984: IFFALSE 23049
// if result [ 1 ] [ 1 ] = i then
22986: LD_VAR 0 2
22990: PUSH
22991: LD_INT 1
22993: ARRAY
22994: PUSH
22995: LD_INT 1
22997: ARRAY
22998: PUSH
22999: LD_VAR 0 8
23003: EQUAL
23004: IFFALSE 23049
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23006: LD_ADDR_VAR 0 2
23010: PUSH
23011: LD_VAR 0 2
23015: PPUSH
23016: LD_INT 1
23018: PPUSH
23019: LD_VAR 0 2
23023: PUSH
23024: LD_INT 1
23026: ARRAY
23027: PPUSH
23028: LD_INT 1
23030: PPUSH
23031: CALL_OW 3
23035: PPUSH
23036: CALL_OW 1
23040: ST_TO_ADDR
// tmp := 1 ;
23041: LD_ADDR_VAR 0 3
23045: PUSH
23046: LD_STRING 1
23048: ST_TO_ADDR
// end ; normal := normal & tmp ;
23049: LD_ADDR_VAR 0 5
23053: PUSH
23054: LD_VAR 0 5
23058: PUSH
23059: LD_VAR 0 3
23063: STR
23064: ST_TO_ADDR
// end ;
23065: GO 22965
23067: POP
23068: POP
// for i = 1 to hardcoreCounter do
23069: LD_ADDR_VAR 0 8
23073: PUSH
23074: DOUBLE
23075: LD_INT 1
23077: DEC
23078: ST_TO_ADDR
23079: LD_EXP 55
23083: PUSH
23084: FOR_TO
23085: IFFALSE 23190
// begin tmp := 0 ;
23087: LD_ADDR_VAR 0 3
23091: PUSH
23092: LD_STRING 0
23094: ST_TO_ADDR
// if result [ 2 ] then
23095: LD_VAR 0 2
23099: PUSH
23100: LD_INT 2
23102: ARRAY
23103: IFFALSE 23172
// if result [ 2 ] [ 1 ] = 100 + i then
23105: LD_VAR 0 2
23109: PUSH
23110: LD_INT 2
23112: ARRAY
23113: PUSH
23114: LD_INT 1
23116: ARRAY
23117: PUSH
23118: LD_INT 100
23120: PUSH
23121: LD_VAR 0 8
23125: PLUS
23126: EQUAL
23127: IFFALSE 23172
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23129: LD_ADDR_VAR 0 2
23133: PUSH
23134: LD_VAR 0 2
23138: PPUSH
23139: LD_INT 2
23141: PPUSH
23142: LD_VAR 0 2
23146: PUSH
23147: LD_INT 2
23149: ARRAY
23150: PPUSH
23151: LD_INT 1
23153: PPUSH
23154: CALL_OW 3
23158: PPUSH
23159: CALL_OW 1
23163: ST_TO_ADDR
// tmp := 1 ;
23164: LD_ADDR_VAR 0 3
23168: PUSH
23169: LD_STRING 1
23171: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23172: LD_ADDR_VAR 0 6
23176: PUSH
23177: LD_VAR 0 6
23181: PUSH
23182: LD_VAR 0 3
23186: STR
23187: ST_TO_ADDR
// end ;
23188: GO 23084
23190: POP
23191: POP
// if isGameLoad then
23192: LD_VAR 0 1
23196: IFFALSE 23671
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
23198: LD_ADDR_VAR 0 4
23202: PUSH
23203: LD_EXP 58
23207: PUSH
23208: LD_EXP 57
23212: PUSH
23213: LD_EXP 59
23217: PUSH
23218: LD_EXP 56
23222: PUSH
23223: LD_EXP 60
23227: PUSH
23228: LD_EXP 61
23232: PUSH
23233: LD_EXP 62
23237: PUSH
23238: LD_EXP 63
23242: PUSH
23243: LD_EXP 64
23247: PUSH
23248: LD_EXP 65
23252: PUSH
23253: LD_EXP 66
23257: PUSH
23258: LD_EXP 67
23262: PUSH
23263: LD_EXP 68
23267: PUSH
23268: LD_EXP 69
23272: PUSH
23273: LD_EXP 77
23277: PUSH
23278: LD_EXP 78
23282: PUSH
23283: LD_EXP 79
23287: PUSH
23288: LD_EXP 80
23292: PUSH
23293: LD_EXP 82
23297: PUSH
23298: LD_EXP 83
23302: PUSH
23303: LD_EXP 84
23307: PUSH
23308: LD_EXP 87
23312: PUSH
23313: LD_EXP 89
23317: PUSH
23318: LD_EXP 90
23322: PUSH
23323: LD_EXP 91
23327: PUSH
23328: LD_EXP 93
23332: PUSH
23333: LD_EXP 94
23337: PUSH
23338: LD_EXP 97
23342: PUSH
23343: LD_EXP 98
23347: PUSH
23348: LD_EXP 99
23352: PUSH
23353: LD_EXP 100
23357: PUSH
23358: LD_EXP 101
23362: PUSH
23363: LD_EXP 102
23367: PUSH
23368: LD_EXP 103
23372: PUSH
23373: LD_EXP 104
23377: PUSH
23378: LD_EXP 105
23382: PUSH
23383: LD_EXP 70
23387: PUSH
23388: LD_EXP 71
23392: PUSH
23393: LD_EXP 74
23397: PUSH
23398: LD_EXP 75
23402: PUSH
23403: LD_EXP 76
23407: PUSH
23408: LD_EXP 72
23412: PUSH
23413: LD_EXP 73
23417: PUSH
23418: LD_EXP 81
23422: PUSH
23423: LD_EXP 85
23427: PUSH
23428: LD_EXP 86
23432: PUSH
23433: LD_EXP 88
23437: PUSH
23438: LD_EXP 92
23442: PUSH
23443: LD_EXP 95
23447: PUSH
23448: LD_EXP 96
23452: PUSH
23453: LD_EXP 106
23457: PUSH
23458: LD_EXP 107
23462: PUSH
23463: LD_EXP 108
23467: PUSH
23468: LD_EXP 109
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: ST_TO_ADDR
// tmp :=  ;
23529: LD_ADDR_VAR 0 3
23533: PUSH
23534: LD_STRING 
23536: ST_TO_ADDR
// for i = 1 to normalCounter do
23537: LD_ADDR_VAR 0 8
23541: PUSH
23542: DOUBLE
23543: LD_INT 1
23545: DEC
23546: ST_TO_ADDR
23547: LD_EXP 54
23551: PUSH
23552: FOR_TO
23553: IFFALSE 23589
// begin if flags [ i ] then
23555: LD_VAR 0 4
23559: PUSH
23560: LD_VAR 0 8
23564: ARRAY
23565: IFFALSE 23587
// tmp := tmp & i & ; ;
23567: LD_ADDR_VAR 0 3
23571: PUSH
23572: LD_VAR 0 3
23576: PUSH
23577: LD_VAR 0 8
23581: STR
23582: PUSH
23583: LD_STRING ;
23585: STR
23586: ST_TO_ADDR
// end ;
23587: GO 23552
23589: POP
23590: POP
// for i = 1 to hardcoreCounter do
23591: LD_ADDR_VAR 0 8
23595: PUSH
23596: DOUBLE
23597: LD_INT 1
23599: DEC
23600: ST_TO_ADDR
23601: LD_EXP 55
23605: PUSH
23606: FOR_TO
23607: IFFALSE 23653
// begin if flags [ normalCounter + i ] then
23609: LD_VAR 0 4
23613: PUSH
23614: LD_EXP 54
23618: PUSH
23619: LD_VAR 0 8
23623: PLUS
23624: ARRAY
23625: IFFALSE 23651
// tmp := tmp & ( 100 + i ) & ; ;
23627: LD_ADDR_VAR 0 3
23631: PUSH
23632: LD_VAR 0 3
23636: PUSH
23637: LD_INT 100
23639: PUSH
23640: LD_VAR 0 8
23644: PLUS
23645: STR
23646: PUSH
23647: LD_STRING ;
23649: STR
23650: ST_TO_ADDR
// end ;
23651: GO 23606
23653: POP
23654: POP
// if tmp then
23655: LD_VAR 0 3
23659: IFFALSE 23671
// active := tmp ;
23661: LD_ADDR_VAR 0 7
23665: PUSH
23666: LD_VAR 0 3
23670: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
23671: LD_STRING getStreamItemsFromMission("
23673: PUSH
23674: LD_VAR 0 5
23678: STR
23679: PUSH
23680: LD_STRING ","
23682: STR
23683: PUSH
23684: LD_VAR 0 6
23688: STR
23689: PUSH
23690: LD_STRING ","
23692: STR
23693: PUSH
23694: LD_VAR 0 7
23698: STR
23699: PUSH
23700: LD_STRING ")
23702: STR
23703: PPUSH
23704: CALL_OW 559
// end else
23708: GO 23717
// ToLua ( getStreamItemsFromMission("","","") ) ;
23710: LD_STRING getStreamItemsFromMission("","","")
23712: PPUSH
23713: CALL_OW 559
// end ;
23717: LD_VAR 0 2
23721: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23722: LD_EXP 53
23726: PUSH
23727: LD_EXP 58
23731: AND
23732: IFFALSE 23856
23734: GO 23736
23736: DISABLE
23737: LD_INT 0
23739: PPUSH
23740: PPUSH
// begin enable ;
23741: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23742: LD_ADDR_VAR 0 2
23746: PUSH
23747: LD_INT 22
23749: PUSH
23750: LD_OWVAR 2
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 2
23761: PUSH
23762: LD_INT 34
23764: PUSH
23765: LD_INT 7
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PUSH
23772: LD_INT 34
23774: PUSH
23775: LD_INT 45
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 34
23784: PUSH
23785: LD_INT 28
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 34
23794: PUSH
23795: LD_INT 47
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PPUSH
23813: CALL_OW 69
23817: ST_TO_ADDR
// if not tmp then
23818: LD_VAR 0 2
23822: NOT
23823: IFFALSE 23827
// exit ;
23825: GO 23856
// for i in tmp do
23827: LD_ADDR_VAR 0 1
23831: PUSH
23832: LD_VAR 0 2
23836: PUSH
23837: FOR_IN
23838: IFFALSE 23854
// begin SetLives ( i , 0 ) ;
23840: LD_VAR 0 1
23844: PPUSH
23845: LD_INT 0
23847: PPUSH
23848: CALL_OW 234
// end ;
23852: GO 23837
23854: POP
23855: POP
// end ;
23856: PPOPN 2
23858: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23859: LD_EXP 53
23863: PUSH
23864: LD_EXP 59
23868: AND
23869: IFFALSE 23953
23871: GO 23873
23873: DISABLE
23874: LD_INT 0
23876: PPUSH
23877: PPUSH
// begin enable ;
23878: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23879: LD_ADDR_VAR 0 2
23883: PUSH
23884: LD_INT 22
23886: PUSH
23887: LD_OWVAR 2
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: PUSH
23896: LD_INT 32
23898: PUSH
23899: LD_INT 3
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PPUSH
23910: CALL_OW 69
23914: ST_TO_ADDR
// if not tmp then
23915: LD_VAR 0 2
23919: NOT
23920: IFFALSE 23924
// exit ;
23922: GO 23953
// for i in tmp do
23924: LD_ADDR_VAR 0 1
23928: PUSH
23929: LD_VAR 0 2
23933: PUSH
23934: FOR_IN
23935: IFFALSE 23951
// begin SetLives ( i , 0 ) ;
23937: LD_VAR 0 1
23941: PPUSH
23942: LD_INT 0
23944: PPUSH
23945: CALL_OW 234
// end ;
23949: GO 23934
23951: POP
23952: POP
// end ;
23953: PPOPN 2
23955: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23956: LD_EXP 53
23960: PUSH
23961: LD_EXP 56
23965: AND
23966: IFFALSE 24059
23968: GO 23970
23970: DISABLE
23971: LD_INT 0
23973: PPUSH
// begin enable ;
23974: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23975: LD_ADDR_VAR 0 1
23979: PUSH
23980: LD_INT 22
23982: PUSH
23983: LD_OWVAR 2
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 2
23994: PUSH
23995: LD_INT 25
23997: PUSH
23998: LD_INT 5
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 25
24007: PUSH
24008: LD_INT 9
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 25
24017: PUSH
24018: LD_INT 8
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PPUSH
24035: CALL_OW 69
24039: PUSH
24040: FOR_IN
24041: IFFALSE 24057
// begin SetClass ( i , 1 ) ;
24043: LD_VAR 0 1
24047: PPUSH
24048: LD_INT 1
24050: PPUSH
24051: CALL_OW 336
// end ;
24055: GO 24040
24057: POP
24058: POP
// end ;
24059: PPOPN 1
24061: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24062: LD_EXP 53
24066: PUSH
24067: LD_EXP 57
24071: AND
24072: PUSH
24073: LD_OWVAR 65
24077: PUSH
24078: LD_INT 7
24080: LESS
24081: AND
24082: IFFALSE 24096
24084: GO 24086
24086: DISABLE
// begin enable ;
24087: ENABLE
// game_speed := 7 ;
24088: LD_ADDR_OWVAR 65
24092: PUSH
24093: LD_INT 7
24095: ST_TO_ADDR
// end ;
24096: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24097: LD_EXP 53
24101: PUSH
24102: LD_EXP 60
24106: AND
24107: IFFALSE 24309
24109: GO 24111
24111: DISABLE
24112: LD_INT 0
24114: PPUSH
24115: PPUSH
24116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24117: LD_ADDR_VAR 0 3
24121: PUSH
24122: LD_INT 81
24124: PUSH
24125: LD_OWVAR 2
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: LD_INT 21
24136: PUSH
24137: LD_INT 1
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PPUSH
24148: CALL_OW 69
24152: ST_TO_ADDR
// if not tmp then
24153: LD_VAR 0 3
24157: NOT
24158: IFFALSE 24162
// exit ;
24160: GO 24309
// if tmp > 5 then
24162: LD_VAR 0 3
24166: PUSH
24167: LD_INT 5
24169: GREATER
24170: IFFALSE 24182
// k := 5 else
24172: LD_ADDR_VAR 0 2
24176: PUSH
24177: LD_INT 5
24179: ST_TO_ADDR
24180: GO 24192
// k := tmp ;
24182: LD_ADDR_VAR 0 2
24186: PUSH
24187: LD_VAR 0 3
24191: ST_TO_ADDR
// for i := 1 to k do
24192: LD_ADDR_VAR 0 1
24196: PUSH
24197: DOUBLE
24198: LD_INT 1
24200: DEC
24201: ST_TO_ADDR
24202: LD_VAR 0 2
24206: PUSH
24207: FOR_TO
24208: IFFALSE 24307
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24210: LD_VAR 0 3
24214: PUSH
24215: LD_VAR 0 1
24219: ARRAY
24220: PPUSH
24221: LD_VAR 0 1
24225: PUSH
24226: LD_INT 4
24228: MOD
24229: PUSH
24230: LD_INT 1
24232: PLUS
24233: PPUSH
24234: CALL_OW 259
24238: PUSH
24239: LD_INT 10
24241: LESS
24242: IFFALSE 24305
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24244: LD_VAR 0 3
24248: PUSH
24249: LD_VAR 0 1
24253: ARRAY
24254: PPUSH
24255: LD_VAR 0 1
24259: PUSH
24260: LD_INT 4
24262: MOD
24263: PUSH
24264: LD_INT 1
24266: PLUS
24267: PPUSH
24268: LD_VAR 0 3
24272: PUSH
24273: LD_VAR 0 1
24277: ARRAY
24278: PPUSH
24279: LD_VAR 0 1
24283: PUSH
24284: LD_INT 4
24286: MOD
24287: PUSH
24288: LD_INT 1
24290: PLUS
24291: PPUSH
24292: CALL_OW 259
24296: PUSH
24297: LD_INT 1
24299: PLUS
24300: PPUSH
24301: CALL_OW 237
24305: GO 24207
24307: POP
24308: POP
// end ;
24309: PPOPN 3
24311: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24312: LD_EXP 53
24316: PUSH
24317: LD_EXP 61
24321: AND
24322: IFFALSE 24342
24324: GO 24326
24326: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24327: LD_INT 4
24329: PPUSH
24330: LD_OWVAR 2
24334: PPUSH
24335: LD_INT 0
24337: PPUSH
24338: CALL_OW 324
24342: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24343: LD_EXP 53
24347: PUSH
24348: LD_EXP 90
24352: AND
24353: IFFALSE 24373
24355: GO 24357
24357: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24358: LD_INT 19
24360: PPUSH
24361: LD_OWVAR 2
24365: PPUSH
24366: LD_INT 0
24368: PPUSH
24369: CALL_OW 324
24373: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24374: LD_EXP 53
24378: PUSH
24379: LD_EXP 62
24383: AND
24384: IFFALSE 24486
24386: GO 24388
24388: DISABLE
24389: LD_INT 0
24391: PPUSH
24392: PPUSH
// begin enable ;
24393: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24394: LD_ADDR_VAR 0 2
24398: PUSH
24399: LD_INT 22
24401: PUSH
24402: LD_OWVAR 2
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: PUSH
24411: LD_INT 2
24413: PUSH
24414: LD_INT 34
24416: PUSH
24417: LD_INT 11
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 34
24426: PUSH
24427: LD_INT 30
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: LIST
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PPUSH
24443: CALL_OW 69
24447: ST_TO_ADDR
// if not tmp then
24448: LD_VAR 0 2
24452: NOT
24453: IFFALSE 24457
// exit ;
24455: GO 24486
// for i in tmp do
24457: LD_ADDR_VAR 0 1
24461: PUSH
24462: LD_VAR 0 2
24466: PUSH
24467: FOR_IN
24468: IFFALSE 24484
// begin SetLives ( i , 0 ) ;
24470: LD_VAR 0 1
24474: PPUSH
24475: LD_INT 0
24477: PPUSH
24478: CALL_OW 234
// end ;
24482: GO 24467
24484: POP
24485: POP
// end ;
24486: PPOPN 2
24488: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24489: LD_EXP 53
24493: PUSH
24494: LD_EXP 63
24498: AND
24499: IFFALSE 24519
24501: GO 24503
24503: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24504: LD_INT 32
24506: PPUSH
24507: LD_OWVAR 2
24511: PPUSH
24512: LD_INT 0
24514: PPUSH
24515: CALL_OW 324
24519: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24520: LD_EXP 53
24524: PUSH
24525: LD_EXP 64
24529: AND
24530: IFFALSE 24711
24532: GO 24534
24534: DISABLE
24535: LD_INT 0
24537: PPUSH
24538: PPUSH
24539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24540: LD_ADDR_VAR 0 2
24544: PUSH
24545: LD_INT 22
24547: PUSH
24548: LD_OWVAR 2
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: PUSH
24557: LD_INT 33
24559: PUSH
24560: LD_INT 3
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PPUSH
24571: CALL_OW 69
24575: ST_TO_ADDR
// if not tmp then
24576: LD_VAR 0 2
24580: NOT
24581: IFFALSE 24585
// exit ;
24583: GO 24711
// side := 0 ;
24585: LD_ADDR_VAR 0 3
24589: PUSH
24590: LD_INT 0
24592: ST_TO_ADDR
// for i := 1 to 8 do
24593: LD_ADDR_VAR 0 1
24597: PUSH
24598: DOUBLE
24599: LD_INT 1
24601: DEC
24602: ST_TO_ADDR
24603: LD_INT 8
24605: PUSH
24606: FOR_TO
24607: IFFALSE 24655
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24609: LD_OWVAR 2
24613: PUSH
24614: LD_VAR 0 1
24618: NONEQUAL
24619: PUSH
24620: LD_OWVAR 2
24624: PPUSH
24625: LD_VAR 0 1
24629: PPUSH
24630: CALL_OW 81
24634: PUSH
24635: LD_INT 2
24637: EQUAL
24638: AND
24639: IFFALSE 24653
// begin side := i ;
24641: LD_ADDR_VAR 0 3
24645: PUSH
24646: LD_VAR 0 1
24650: ST_TO_ADDR
// break ;
24651: GO 24655
// end ;
24653: GO 24606
24655: POP
24656: POP
// if not side then
24657: LD_VAR 0 3
24661: NOT
24662: IFFALSE 24666
// exit ;
24664: GO 24711
// for i := 1 to tmp do
24666: LD_ADDR_VAR 0 1
24670: PUSH
24671: DOUBLE
24672: LD_INT 1
24674: DEC
24675: ST_TO_ADDR
24676: LD_VAR 0 2
24680: PUSH
24681: FOR_TO
24682: IFFALSE 24709
// if Prob ( 60 ) then
24684: LD_INT 60
24686: PPUSH
24687: CALL_OW 13
24691: IFFALSE 24707
// SetSide ( i , side ) ;
24693: LD_VAR 0 1
24697: PPUSH
24698: LD_VAR 0 3
24702: PPUSH
24703: CALL_OW 235
24707: GO 24681
24709: POP
24710: POP
// end ;
24711: PPOPN 3
24713: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24714: LD_EXP 53
24718: PUSH
24719: LD_EXP 66
24723: AND
24724: IFFALSE 24843
24726: GO 24728
24728: DISABLE
24729: LD_INT 0
24731: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24732: LD_ADDR_VAR 0 1
24736: PUSH
24737: LD_INT 22
24739: PUSH
24740: LD_OWVAR 2
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: LD_INT 21
24751: PUSH
24752: LD_INT 1
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 3
24761: PUSH
24762: LD_INT 23
24764: PUSH
24765: LD_INT 0
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: LIST
24780: PPUSH
24781: CALL_OW 69
24785: PUSH
24786: FOR_IN
24787: IFFALSE 24841
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24789: LD_VAR 0 1
24793: PPUSH
24794: CALL_OW 257
24798: PUSH
24799: LD_INT 1
24801: PUSH
24802: LD_INT 2
24804: PUSH
24805: LD_INT 3
24807: PUSH
24808: LD_INT 4
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: IN
24817: IFFALSE 24839
// SetClass ( un , rand ( 1 , 4 ) ) ;
24819: LD_VAR 0 1
24823: PPUSH
24824: LD_INT 1
24826: PPUSH
24827: LD_INT 4
24829: PPUSH
24830: CALL_OW 12
24834: PPUSH
24835: CALL_OW 336
24839: GO 24786
24841: POP
24842: POP
// end ;
24843: PPOPN 1
24845: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24846: LD_EXP 53
24850: PUSH
24851: LD_EXP 65
24855: AND
24856: IFFALSE 24935
24858: GO 24860
24860: DISABLE
24861: LD_INT 0
24863: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24864: LD_ADDR_VAR 0 1
24868: PUSH
24869: LD_INT 22
24871: PUSH
24872: LD_OWVAR 2
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 21
24883: PUSH
24884: LD_INT 3
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PPUSH
24895: CALL_OW 69
24899: ST_TO_ADDR
// if not tmp then
24900: LD_VAR 0 1
24904: NOT
24905: IFFALSE 24909
// exit ;
24907: GO 24935
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24909: LD_VAR 0 1
24913: PUSH
24914: LD_INT 1
24916: PPUSH
24917: LD_VAR 0 1
24921: PPUSH
24922: CALL_OW 12
24926: ARRAY
24927: PPUSH
24928: LD_INT 100
24930: PPUSH
24931: CALL_OW 234
// end ;
24935: PPOPN 1
24937: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24938: LD_EXP 53
24942: PUSH
24943: LD_EXP 67
24947: AND
24948: IFFALSE 25046
24950: GO 24952
24952: DISABLE
24953: LD_INT 0
24955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24956: LD_ADDR_VAR 0 1
24960: PUSH
24961: LD_INT 22
24963: PUSH
24964: LD_OWVAR 2
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 21
24975: PUSH
24976: LD_INT 1
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PPUSH
24987: CALL_OW 69
24991: ST_TO_ADDR
// if not tmp then
24992: LD_VAR 0 1
24996: NOT
24997: IFFALSE 25001
// exit ;
24999: GO 25046
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25001: LD_VAR 0 1
25005: PUSH
25006: LD_INT 1
25008: PPUSH
25009: LD_VAR 0 1
25013: PPUSH
25014: CALL_OW 12
25018: ARRAY
25019: PPUSH
25020: LD_INT 1
25022: PPUSH
25023: LD_INT 4
25025: PPUSH
25026: CALL_OW 12
25030: PPUSH
25031: LD_INT 3000
25033: PPUSH
25034: LD_INT 9000
25036: PPUSH
25037: CALL_OW 12
25041: PPUSH
25042: CALL_OW 492
// end ;
25046: PPOPN 1
25048: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25049: LD_EXP 53
25053: PUSH
25054: LD_EXP 68
25058: AND
25059: IFFALSE 25079
25061: GO 25063
25063: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25064: LD_INT 1
25066: PPUSH
25067: LD_OWVAR 2
25071: PPUSH
25072: LD_INT 0
25074: PPUSH
25075: CALL_OW 324
25079: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25080: LD_EXP 53
25084: PUSH
25085: LD_EXP 69
25089: AND
25090: IFFALSE 25173
25092: GO 25094
25094: DISABLE
25095: LD_INT 0
25097: PPUSH
25098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25099: LD_ADDR_VAR 0 2
25103: PUSH
25104: LD_INT 22
25106: PUSH
25107: LD_OWVAR 2
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 21
25118: PUSH
25119: LD_INT 3
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PPUSH
25130: CALL_OW 69
25134: ST_TO_ADDR
// if not tmp then
25135: LD_VAR 0 2
25139: NOT
25140: IFFALSE 25144
// exit ;
25142: GO 25173
// for i in tmp do
25144: LD_ADDR_VAR 0 1
25148: PUSH
25149: LD_VAR 0 2
25153: PUSH
25154: FOR_IN
25155: IFFALSE 25171
// SetBLevel ( i , 10 ) ;
25157: LD_VAR 0 1
25161: PPUSH
25162: LD_INT 10
25164: PPUSH
25165: CALL_OW 241
25169: GO 25154
25171: POP
25172: POP
// end ;
25173: PPOPN 2
25175: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25176: LD_EXP 53
25180: PUSH
25181: LD_EXP 70
25185: AND
25186: IFFALSE 25297
25188: GO 25190
25190: DISABLE
25191: LD_INT 0
25193: PPUSH
25194: PPUSH
25195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25196: LD_ADDR_VAR 0 3
25200: PUSH
25201: LD_INT 22
25203: PUSH
25204: LD_OWVAR 2
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: LD_INT 25
25215: PUSH
25216: LD_INT 1
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PPUSH
25227: CALL_OW 69
25231: ST_TO_ADDR
// if not tmp then
25232: LD_VAR 0 3
25236: NOT
25237: IFFALSE 25241
// exit ;
25239: GO 25297
// un := tmp [ rand ( 1 , tmp ) ] ;
25241: LD_ADDR_VAR 0 2
25245: PUSH
25246: LD_VAR 0 3
25250: PUSH
25251: LD_INT 1
25253: PPUSH
25254: LD_VAR 0 3
25258: PPUSH
25259: CALL_OW 12
25263: ARRAY
25264: ST_TO_ADDR
// if Crawls ( un ) then
25265: LD_VAR 0 2
25269: PPUSH
25270: CALL_OW 318
25274: IFFALSE 25285
// ComWalk ( un ) ;
25276: LD_VAR 0 2
25280: PPUSH
25281: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25285: LD_VAR 0 2
25289: PPUSH
25290: LD_INT 5
25292: PPUSH
25293: CALL_OW 336
// end ;
25297: PPOPN 3
25299: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25300: LD_EXP 53
25304: PUSH
25305: LD_EXP 71
25309: AND
25310: PUSH
25311: LD_OWVAR 67
25315: PUSH
25316: LD_INT 4
25318: LESS
25319: AND
25320: IFFALSE 25339
25322: GO 25324
25324: DISABLE
// begin Difficulty := Difficulty + 1 ;
25325: LD_ADDR_OWVAR 67
25329: PUSH
25330: LD_OWVAR 67
25334: PUSH
25335: LD_INT 1
25337: PLUS
25338: ST_TO_ADDR
// end ;
25339: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25340: LD_EXP 53
25344: PUSH
25345: LD_EXP 72
25349: AND
25350: IFFALSE 25453
25352: GO 25354
25354: DISABLE
25355: LD_INT 0
25357: PPUSH
// begin for i := 1 to 5 do
25358: LD_ADDR_VAR 0 1
25362: PUSH
25363: DOUBLE
25364: LD_INT 1
25366: DEC
25367: ST_TO_ADDR
25368: LD_INT 5
25370: PUSH
25371: FOR_TO
25372: IFFALSE 25451
// begin uc_nation := nation_nature ;
25374: LD_ADDR_OWVAR 21
25378: PUSH
25379: LD_INT 0
25381: ST_TO_ADDR
// uc_side := 0 ;
25382: LD_ADDR_OWVAR 20
25386: PUSH
25387: LD_INT 0
25389: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25390: LD_ADDR_OWVAR 29
25394: PUSH
25395: LD_INT 12
25397: PUSH
25398: LD_INT 12
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: ST_TO_ADDR
// hc_agressivity := 20 ;
25405: LD_ADDR_OWVAR 35
25409: PUSH
25410: LD_INT 20
25412: ST_TO_ADDR
// hc_class := class_tiger ;
25413: LD_ADDR_OWVAR 28
25417: PUSH
25418: LD_INT 14
25420: ST_TO_ADDR
// hc_gallery :=  ;
25421: LD_ADDR_OWVAR 33
25425: PUSH
25426: LD_STRING 
25428: ST_TO_ADDR
// hc_name :=  ;
25429: LD_ADDR_OWVAR 26
25433: PUSH
25434: LD_STRING 
25436: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25437: CALL_OW 44
25441: PPUSH
25442: LD_INT 0
25444: PPUSH
25445: CALL_OW 51
// end ;
25449: GO 25371
25451: POP
25452: POP
// end ;
25453: PPOPN 1
25455: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25456: LD_EXP 53
25460: PUSH
25461: LD_EXP 73
25465: AND
25466: IFFALSE 25475
25468: GO 25470
25470: DISABLE
// StreamSibBomb ;
25471: CALL 25476 0 0
25475: END
// export function StreamSibBomb ; var i , x , y ; begin
25476: LD_INT 0
25478: PPUSH
25479: PPUSH
25480: PPUSH
25481: PPUSH
// result := false ;
25482: LD_ADDR_VAR 0 1
25486: PUSH
25487: LD_INT 0
25489: ST_TO_ADDR
// for i := 1 to 16 do
25490: LD_ADDR_VAR 0 2
25494: PUSH
25495: DOUBLE
25496: LD_INT 1
25498: DEC
25499: ST_TO_ADDR
25500: LD_INT 16
25502: PUSH
25503: FOR_TO
25504: IFFALSE 25703
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25506: LD_ADDR_VAR 0 3
25510: PUSH
25511: LD_INT 10
25513: PUSH
25514: LD_INT 20
25516: PUSH
25517: LD_INT 30
25519: PUSH
25520: LD_INT 40
25522: PUSH
25523: LD_INT 50
25525: PUSH
25526: LD_INT 60
25528: PUSH
25529: LD_INT 70
25531: PUSH
25532: LD_INT 80
25534: PUSH
25535: LD_INT 90
25537: PUSH
25538: LD_INT 100
25540: PUSH
25541: LD_INT 110
25543: PUSH
25544: LD_INT 120
25546: PUSH
25547: LD_INT 130
25549: PUSH
25550: LD_INT 140
25552: PUSH
25553: LD_INT 150
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 1
25575: PPUSH
25576: LD_INT 15
25578: PPUSH
25579: CALL_OW 12
25583: ARRAY
25584: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25585: LD_ADDR_VAR 0 4
25589: PUSH
25590: LD_INT 10
25592: PUSH
25593: LD_INT 20
25595: PUSH
25596: LD_INT 30
25598: PUSH
25599: LD_INT 40
25601: PUSH
25602: LD_INT 50
25604: PUSH
25605: LD_INT 60
25607: PUSH
25608: LD_INT 70
25610: PUSH
25611: LD_INT 80
25613: PUSH
25614: LD_INT 90
25616: PUSH
25617: LD_INT 100
25619: PUSH
25620: LD_INT 110
25622: PUSH
25623: LD_INT 120
25625: PUSH
25626: LD_INT 130
25628: PUSH
25629: LD_INT 140
25631: PUSH
25632: LD_INT 150
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 1
25654: PPUSH
25655: LD_INT 15
25657: PPUSH
25658: CALL_OW 12
25662: ARRAY
25663: ST_TO_ADDR
// if ValidHex ( x , y ) then
25664: LD_VAR 0 3
25668: PPUSH
25669: LD_VAR 0 4
25673: PPUSH
25674: CALL_OW 488
25678: IFFALSE 25701
// begin result := [ x , y ] ;
25680: LD_ADDR_VAR 0 1
25684: PUSH
25685: LD_VAR 0 3
25689: PUSH
25690: LD_VAR 0 4
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: ST_TO_ADDR
// break ;
25699: GO 25703
// end ; end ;
25701: GO 25503
25703: POP
25704: POP
// if result then
25705: LD_VAR 0 1
25709: IFFALSE 25769
// begin ToLua ( playSibBomb() ) ;
25711: LD_STRING playSibBomb()
25713: PPUSH
25714: CALL_OW 559
// wait ( 0 0$14 ) ;
25718: LD_INT 490
25720: PPUSH
25721: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25725: LD_VAR 0 1
25729: PUSH
25730: LD_INT 1
25732: ARRAY
25733: PPUSH
25734: LD_VAR 0 1
25738: PUSH
25739: LD_INT 2
25741: ARRAY
25742: PPUSH
25743: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25747: LD_VAR 0 1
25751: PUSH
25752: LD_INT 1
25754: ARRAY
25755: PPUSH
25756: LD_VAR 0 1
25760: PUSH
25761: LD_INT 2
25763: ARRAY
25764: PPUSH
25765: CALL_OW 429
// end ; end ;
25769: LD_VAR 0 1
25773: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25774: LD_EXP 53
25778: PUSH
25779: LD_EXP 75
25783: AND
25784: IFFALSE 25796
25786: GO 25788
25788: DISABLE
// YouLost (  ) ;
25789: LD_STRING 
25791: PPUSH
25792: CALL_OW 104
25796: END
// every 0 0$1 trigger StreamModeActive and sFog do
25797: LD_EXP 53
25801: PUSH
25802: LD_EXP 74
25806: AND
25807: IFFALSE 25821
25809: GO 25811
25811: DISABLE
// FogOff ( your_side ) ;
25812: LD_OWVAR 2
25816: PPUSH
25817: CALL_OW 344
25821: END
// every 0 0$1 trigger StreamModeActive and sSun do
25822: LD_EXP 53
25826: PUSH
25827: LD_EXP 76
25831: AND
25832: IFFALSE 25860
25834: GO 25836
25836: DISABLE
// begin solar_recharge_percent := 0 ;
25837: LD_ADDR_OWVAR 79
25841: PUSH
25842: LD_INT 0
25844: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25845: LD_INT 10500
25847: PPUSH
25848: CALL_OW 67
// solar_recharge_percent := 100 ;
25852: LD_ADDR_OWVAR 79
25856: PUSH
25857: LD_INT 100
25859: ST_TO_ADDR
// end ;
25860: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25861: LD_EXP 53
25865: PUSH
25866: LD_EXP 77
25870: AND
25871: IFFALSE 26110
25873: GO 25875
25875: DISABLE
25876: LD_INT 0
25878: PPUSH
25879: PPUSH
25880: PPUSH
// begin tmp := [ ] ;
25881: LD_ADDR_VAR 0 3
25885: PUSH
25886: EMPTY
25887: ST_TO_ADDR
// for i := 1 to 6 do
25888: LD_ADDR_VAR 0 1
25892: PUSH
25893: DOUBLE
25894: LD_INT 1
25896: DEC
25897: ST_TO_ADDR
25898: LD_INT 6
25900: PUSH
25901: FOR_TO
25902: IFFALSE 26007
// begin uc_nation := nation_nature ;
25904: LD_ADDR_OWVAR 21
25908: PUSH
25909: LD_INT 0
25911: ST_TO_ADDR
// uc_side := 0 ;
25912: LD_ADDR_OWVAR 20
25916: PUSH
25917: LD_INT 0
25919: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25920: LD_ADDR_OWVAR 29
25924: PUSH
25925: LD_INT 12
25927: PUSH
25928: LD_INT 12
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: ST_TO_ADDR
// hc_agressivity := 20 ;
25935: LD_ADDR_OWVAR 35
25939: PUSH
25940: LD_INT 20
25942: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25943: LD_ADDR_OWVAR 28
25947: PUSH
25948: LD_INT 17
25950: ST_TO_ADDR
// hc_gallery :=  ;
25951: LD_ADDR_OWVAR 33
25955: PUSH
25956: LD_STRING 
25958: ST_TO_ADDR
// hc_name :=  ;
25959: LD_ADDR_OWVAR 26
25963: PUSH
25964: LD_STRING 
25966: ST_TO_ADDR
// un := CreateHuman ;
25967: LD_ADDR_VAR 0 2
25971: PUSH
25972: CALL_OW 44
25976: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25977: LD_VAR 0 2
25981: PPUSH
25982: LD_INT 1
25984: PPUSH
25985: CALL_OW 51
// tmp := tmp ^ un ;
25989: LD_ADDR_VAR 0 3
25993: PUSH
25994: LD_VAR 0 3
25998: PUSH
25999: LD_VAR 0 2
26003: ADD
26004: ST_TO_ADDR
// end ;
26005: GO 25901
26007: POP
26008: POP
// repeat wait ( 0 0$1 ) ;
26009: LD_INT 35
26011: PPUSH
26012: CALL_OW 67
// for un in tmp do
26016: LD_ADDR_VAR 0 2
26020: PUSH
26021: LD_VAR 0 3
26025: PUSH
26026: FOR_IN
26027: IFFALSE 26101
// begin if IsDead ( un ) then
26029: LD_VAR 0 2
26033: PPUSH
26034: CALL_OW 301
26038: IFFALSE 26058
// begin tmp := tmp diff un ;
26040: LD_ADDR_VAR 0 3
26044: PUSH
26045: LD_VAR 0 3
26049: PUSH
26050: LD_VAR 0 2
26054: DIFF
26055: ST_TO_ADDR
// continue ;
26056: GO 26026
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26058: LD_VAR 0 2
26062: PPUSH
26063: LD_INT 3
26065: PUSH
26066: LD_INT 22
26068: PUSH
26069: LD_INT 0
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PPUSH
26080: CALL_OW 69
26084: PPUSH
26085: LD_VAR 0 2
26089: PPUSH
26090: CALL_OW 74
26094: PPUSH
26095: CALL_OW 115
// end ;
26099: GO 26026
26101: POP
26102: POP
// until not tmp ;
26103: LD_VAR 0 3
26107: NOT
26108: IFFALSE 26009
// end ;
26110: PPOPN 3
26112: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26113: LD_EXP 53
26117: PUSH
26118: LD_EXP 78
26122: AND
26123: IFFALSE 26177
26125: GO 26127
26127: DISABLE
// begin ToLua ( displayTroll(); ) ;
26128: LD_STRING displayTroll();
26130: PPUSH
26131: CALL_OW 559
// wait ( 3 3$00 ) ;
26135: LD_INT 6300
26137: PPUSH
26138: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26142: LD_STRING hideTroll();
26144: PPUSH
26145: CALL_OW 559
// wait ( 1 1$00 ) ;
26149: LD_INT 2100
26151: PPUSH
26152: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26156: LD_STRING displayTroll();
26158: PPUSH
26159: CALL_OW 559
// wait ( 1 1$00 ) ;
26163: LD_INT 2100
26165: PPUSH
26166: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26170: LD_STRING hideTroll();
26172: PPUSH
26173: CALL_OW 559
// end ;
26177: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26178: LD_EXP 53
26182: PUSH
26183: LD_EXP 79
26187: AND
26188: IFFALSE 26251
26190: GO 26192
26192: DISABLE
26193: LD_INT 0
26195: PPUSH
// begin p := 0 ;
26196: LD_ADDR_VAR 0 1
26200: PUSH
26201: LD_INT 0
26203: ST_TO_ADDR
// repeat game_speed := 1 ;
26204: LD_ADDR_OWVAR 65
26208: PUSH
26209: LD_INT 1
26211: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26212: LD_INT 35
26214: PPUSH
26215: CALL_OW 67
// p := p + 1 ;
26219: LD_ADDR_VAR 0 1
26223: PUSH
26224: LD_VAR 0 1
26228: PUSH
26229: LD_INT 1
26231: PLUS
26232: ST_TO_ADDR
// until p >= 60 ;
26233: LD_VAR 0 1
26237: PUSH
26238: LD_INT 60
26240: GREATEREQUAL
26241: IFFALSE 26204
// game_speed := 4 ;
26243: LD_ADDR_OWVAR 65
26247: PUSH
26248: LD_INT 4
26250: ST_TO_ADDR
// end ;
26251: PPOPN 1
26253: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26254: LD_EXP 53
26258: PUSH
26259: LD_EXP 80
26263: AND
26264: IFFALSE 26410
26266: GO 26268
26268: DISABLE
26269: LD_INT 0
26271: PPUSH
26272: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26273: LD_ADDR_VAR 0 1
26277: PUSH
26278: LD_INT 22
26280: PUSH
26281: LD_OWVAR 2
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: LD_INT 2
26292: PUSH
26293: LD_INT 30
26295: PUSH
26296: LD_INT 0
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 30
26305: PUSH
26306: LD_INT 1
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: LIST
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PPUSH
26322: CALL_OW 69
26326: ST_TO_ADDR
// if not depot then
26327: LD_VAR 0 1
26331: NOT
26332: IFFALSE 26336
// exit ;
26334: GO 26410
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26336: LD_ADDR_VAR 0 2
26340: PUSH
26341: LD_VAR 0 1
26345: PUSH
26346: LD_INT 1
26348: PPUSH
26349: LD_VAR 0 1
26353: PPUSH
26354: CALL_OW 12
26358: ARRAY
26359: PPUSH
26360: CALL_OW 274
26364: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26365: LD_VAR 0 2
26369: PPUSH
26370: LD_INT 1
26372: PPUSH
26373: LD_INT 0
26375: PPUSH
26376: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26380: LD_VAR 0 2
26384: PPUSH
26385: LD_INT 2
26387: PPUSH
26388: LD_INT 0
26390: PPUSH
26391: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26395: LD_VAR 0 2
26399: PPUSH
26400: LD_INT 3
26402: PPUSH
26403: LD_INT 0
26405: PPUSH
26406: CALL_OW 277
// end ;
26410: PPOPN 2
26412: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26413: LD_EXP 53
26417: PUSH
26418: LD_EXP 81
26422: AND
26423: IFFALSE 26520
26425: GO 26427
26427: DISABLE
26428: LD_INT 0
26430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26431: LD_ADDR_VAR 0 1
26435: PUSH
26436: LD_INT 22
26438: PUSH
26439: LD_OWVAR 2
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 21
26450: PUSH
26451: LD_INT 1
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 3
26460: PUSH
26461: LD_INT 23
26463: PUSH
26464: LD_INT 0
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: LIST
26479: PPUSH
26480: CALL_OW 69
26484: ST_TO_ADDR
// if not tmp then
26485: LD_VAR 0 1
26489: NOT
26490: IFFALSE 26494
// exit ;
26492: GO 26520
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26494: LD_VAR 0 1
26498: PUSH
26499: LD_INT 1
26501: PPUSH
26502: LD_VAR 0 1
26506: PPUSH
26507: CALL_OW 12
26511: ARRAY
26512: PPUSH
26513: LD_INT 200
26515: PPUSH
26516: CALL_OW 234
// end ;
26520: PPOPN 1
26522: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26523: LD_EXP 53
26527: PUSH
26528: LD_EXP 82
26532: AND
26533: IFFALSE 26612
26535: GO 26537
26537: DISABLE
26538: LD_INT 0
26540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26541: LD_ADDR_VAR 0 1
26545: PUSH
26546: LD_INT 22
26548: PUSH
26549: LD_OWVAR 2
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: PUSH
26558: LD_INT 21
26560: PUSH
26561: LD_INT 2
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PPUSH
26572: CALL_OW 69
26576: ST_TO_ADDR
// if not tmp then
26577: LD_VAR 0 1
26581: NOT
26582: IFFALSE 26586
// exit ;
26584: GO 26612
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26586: LD_VAR 0 1
26590: PUSH
26591: LD_INT 1
26593: PPUSH
26594: LD_VAR 0 1
26598: PPUSH
26599: CALL_OW 12
26603: ARRAY
26604: PPUSH
26605: LD_INT 60
26607: PPUSH
26608: CALL_OW 234
// end ;
26612: PPOPN 1
26614: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26615: LD_EXP 53
26619: PUSH
26620: LD_EXP 83
26624: AND
26625: IFFALSE 26724
26627: GO 26629
26629: DISABLE
26630: LD_INT 0
26632: PPUSH
26633: PPUSH
// begin enable ;
26634: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26635: LD_ADDR_VAR 0 1
26639: PUSH
26640: LD_INT 22
26642: PUSH
26643: LD_OWVAR 2
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: LD_INT 61
26654: PUSH
26655: EMPTY
26656: LIST
26657: PUSH
26658: LD_INT 33
26660: PUSH
26661: LD_INT 2
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: LIST
26672: PPUSH
26673: CALL_OW 69
26677: ST_TO_ADDR
// if not tmp then
26678: LD_VAR 0 1
26682: NOT
26683: IFFALSE 26687
// exit ;
26685: GO 26724
// for i in tmp do
26687: LD_ADDR_VAR 0 2
26691: PUSH
26692: LD_VAR 0 1
26696: PUSH
26697: FOR_IN
26698: IFFALSE 26722
// if IsControledBy ( i ) then
26700: LD_VAR 0 2
26704: PPUSH
26705: CALL_OW 312
26709: IFFALSE 26720
// ComUnlink ( i ) ;
26711: LD_VAR 0 2
26715: PPUSH
26716: CALL_OW 136
26720: GO 26697
26722: POP
26723: POP
// end ;
26724: PPOPN 2
26726: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26727: LD_EXP 53
26731: PUSH
26732: LD_EXP 84
26736: AND
26737: IFFALSE 26877
26739: GO 26741
26741: DISABLE
26742: LD_INT 0
26744: PPUSH
26745: PPUSH
// begin ToLua ( displayPowell(); ) ;
26746: LD_STRING displayPowell();
26748: PPUSH
26749: CALL_OW 559
// uc_side := 0 ;
26753: LD_ADDR_OWVAR 20
26757: PUSH
26758: LD_INT 0
26760: ST_TO_ADDR
// uc_nation := 2 ;
26761: LD_ADDR_OWVAR 21
26765: PUSH
26766: LD_INT 2
26768: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26769: LD_ADDR_OWVAR 37
26773: PUSH
26774: LD_INT 14
26776: ST_TO_ADDR
// vc_engine := engine_siberite ;
26777: LD_ADDR_OWVAR 39
26781: PUSH
26782: LD_INT 3
26784: ST_TO_ADDR
// vc_control := control_apeman ;
26785: LD_ADDR_OWVAR 38
26789: PUSH
26790: LD_INT 5
26792: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26793: LD_ADDR_OWVAR 40
26797: PUSH
26798: LD_INT 29
26800: ST_TO_ADDR
// un := CreateVehicle ;
26801: LD_ADDR_VAR 0 2
26805: PUSH
26806: CALL_OW 45
26810: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26811: LD_VAR 0 2
26815: PPUSH
26816: LD_INT 1
26818: PPUSH
26819: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26823: LD_INT 35
26825: PPUSH
26826: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26830: LD_VAR 0 2
26834: PPUSH
26835: LD_INT 22
26837: PUSH
26838: LD_OWVAR 2
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PPUSH
26847: CALL_OW 69
26851: PPUSH
26852: LD_VAR 0 2
26856: PPUSH
26857: CALL_OW 74
26861: PPUSH
26862: CALL_OW 115
// until IsDead ( un ) ;
26866: LD_VAR 0 2
26870: PPUSH
26871: CALL_OW 301
26875: IFFALSE 26823
// end ;
26877: PPOPN 2
26879: END
// every 0 0$1 trigger StreamModeActive and sStu do
26880: LD_EXP 53
26884: PUSH
26885: LD_EXP 92
26889: AND
26890: IFFALSE 26906
26892: GO 26894
26894: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26895: LD_STRING displayStucuk();
26897: PPUSH
26898: CALL_OW 559
// ResetFog ;
26902: CALL_OW 335
// end ;
26906: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26907: LD_EXP 53
26911: PUSH
26912: LD_EXP 85
26916: AND
26917: IFFALSE 27058
26919: GO 26921
26921: DISABLE
26922: LD_INT 0
26924: PPUSH
26925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26926: LD_ADDR_VAR 0 2
26930: PUSH
26931: LD_INT 22
26933: PUSH
26934: LD_OWVAR 2
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 21
26945: PUSH
26946: LD_INT 1
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PPUSH
26957: CALL_OW 69
26961: ST_TO_ADDR
// if not tmp then
26962: LD_VAR 0 2
26966: NOT
26967: IFFALSE 26971
// exit ;
26969: GO 27058
// un := tmp [ rand ( 1 , tmp ) ] ;
26971: LD_ADDR_VAR 0 1
26975: PUSH
26976: LD_VAR 0 2
26980: PUSH
26981: LD_INT 1
26983: PPUSH
26984: LD_VAR 0 2
26988: PPUSH
26989: CALL_OW 12
26993: ARRAY
26994: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26995: LD_VAR 0 1
26999: PPUSH
27000: LD_INT 0
27002: PPUSH
27003: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27007: LD_VAR 0 1
27011: PPUSH
27012: LD_OWVAR 3
27016: PUSH
27017: LD_VAR 0 1
27021: DIFF
27022: PPUSH
27023: LD_VAR 0 1
27027: PPUSH
27028: CALL_OW 74
27032: PPUSH
27033: CALL_OW 115
// wait ( 0 0$20 ) ;
27037: LD_INT 700
27039: PPUSH
27040: CALL_OW 67
// SetSide ( un , your_side ) ;
27044: LD_VAR 0 1
27048: PPUSH
27049: LD_OWVAR 2
27053: PPUSH
27054: CALL_OW 235
// end ;
27058: PPOPN 2
27060: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27061: LD_EXP 53
27065: PUSH
27066: LD_EXP 86
27070: AND
27071: IFFALSE 27177
27073: GO 27075
27075: DISABLE
27076: LD_INT 0
27078: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27079: LD_ADDR_VAR 0 1
27083: PUSH
27084: LD_INT 22
27086: PUSH
27087: LD_OWVAR 2
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 2
27098: PUSH
27099: LD_INT 30
27101: PUSH
27102: LD_INT 0
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 30
27111: PUSH
27112: LD_INT 1
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: LIST
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PPUSH
27128: CALL_OW 69
27132: ST_TO_ADDR
// if not depot then
27133: LD_VAR 0 1
27137: NOT
27138: IFFALSE 27142
// exit ;
27140: GO 27177
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27142: LD_VAR 0 1
27146: PUSH
27147: LD_INT 1
27149: ARRAY
27150: PPUSH
27151: CALL_OW 250
27155: PPUSH
27156: LD_VAR 0 1
27160: PUSH
27161: LD_INT 1
27163: ARRAY
27164: PPUSH
27165: CALL_OW 251
27169: PPUSH
27170: LD_INT 70
27172: PPUSH
27173: CALL_OW 495
// end ;
27177: PPOPN 1
27179: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27180: LD_EXP 53
27184: PUSH
27185: LD_EXP 87
27189: AND
27190: IFFALSE 27401
27192: GO 27194
27194: DISABLE
27195: LD_INT 0
27197: PPUSH
27198: PPUSH
27199: PPUSH
27200: PPUSH
27201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27202: LD_ADDR_VAR 0 5
27206: PUSH
27207: LD_INT 22
27209: PUSH
27210: LD_OWVAR 2
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 21
27221: PUSH
27222: LD_INT 1
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PPUSH
27233: CALL_OW 69
27237: ST_TO_ADDR
// if not tmp then
27238: LD_VAR 0 5
27242: NOT
27243: IFFALSE 27247
// exit ;
27245: GO 27401
// for i in tmp do
27247: LD_ADDR_VAR 0 1
27251: PUSH
27252: LD_VAR 0 5
27256: PUSH
27257: FOR_IN
27258: IFFALSE 27399
// begin d := rand ( 0 , 5 ) ;
27260: LD_ADDR_VAR 0 4
27264: PUSH
27265: LD_INT 0
27267: PPUSH
27268: LD_INT 5
27270: PPUSH
27271: CALL_OW 12
27275: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27276: LD_ADDR_VAR 0 2
27280: PUSH
27281: LD_VAR 0 1
27285: PPUSH
27286: CALL_OW 250
27290: PPUSH
27291: LD_VAR 0 4
27295: PPUSH
27296: LD_INT 3
27298: PPUSH
27299: LD_INT 12
27301: PPUSH
27302: CALL_OW 12
27306: PPUSH
27307: CALL_OW 272
27311: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27312: LD_ADDR_VAR 0 3
27316: PUSH
27317: LD_VAR 0 1
27321: PPUSH
27322: CALL_OW 251
27326: PPUSH
27327: LD_VAR 0 4
27331: PPUSH
27332: LD_INT 3
27334: PPUSH
27335: LD_INT 12
27337: PPUSH
27338: CALL_OW 12
27342: PPUSH
27343: CALL_OW 273
27347: ST_TO_ADDR
// if ValidHex ( x , y ) then
27348: LD_VAR 0 2
27352: PPUSH
27353: LD_VAR 0 3
27357: PPUSH
27358: CALL_OW 488
27362: IFFALSE 27397
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27364: LD_VAR 0 1
27368: PPUSH
27369: LD_VAR 0 2
27373: PPUSH
27374: LD_VAR 0 3
27378: PPUSH
27379: LD_INT 3
27381: PPUSH
27382: LD_INT 6
27384: PPUSH
27385: CALL_OW 12
27389: PPUSH
27390: LD_INT 1
27392: PPUSH
27393: CALL_OW 483
// end ;
27397: GO 27257
27399: POP
27400: POP
// end ;
27401: PPOPN 5
27403: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27404: LD_EXP 53
27408: PUSH
27409: LD_EXP 88
27413: AND
27414: IFFALSE 27508
27416: GO 27418
27418: DISABLE
27419: LD_INT 0
27421: PPUSH
27422: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27423: LD_ADDR_VAR 0 2
27427: PUSH
27428: LD_INT 22
27430: PUSH
27431: LD_OWVAR 2
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 32
27442: PUSH
27443: LD_INT 1
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: LD_INT 21
27452: PUSH
27453: LD_INT 2
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: LIST
27464: PPUSH
27465: CALL_OW 69
27469: ST_TO_ADDR
// if not tmp then
27470: LD_VAR 0 2
27474: NOT
27475: IFFALSE 27479
// exit ;
27477: GO 27508
// for i in tmp do
27479: LD_ADDR_VAR 0 1
27483: PUSH
27484: LD_VAR 0 2
27488: PUSH
27489: FOR_IN
27490: IFFALSE 27506
// SetFuel ( i , 0 ) ;
27492: LD_VAR 0 1
27496: PPUSH
27497: LD_INT 0
27499: PPUSH
27500: CALL_OW 240
27504: GO 27489
27506: POP
27507: POP
// end ;
27508: PPOPN 2
27510: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27511: LD_EXP 53
27515: PUSH
27516: LD_EXP 89
27520: AND
27521: IFFALSE 27587
27523: GO 27525
27525: DISABLE
27526: LD_INT 0
27528: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27529: LD_ADDR_VAR 0 1
27533: PUSH
27534: LD_INT 22
27536: PUSH
27537: LD_OWVAR 2
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: PUSH
27546: LD_INT 30
27548: PUSH
27549: LD_INT 29
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PPUSH
27560: CALL_OW 69
27564: ST_TO_ADDR
// if not tmp then
27565: LD_VAR 0 1
27569: NOT
27570: IFFALSE 27574
// exit ;
27572: GO 27587
// DestroyUnit ( tmp [ 1 ] ) ;
27574: LD_VAR 0 1
27578: PUSH
27579: LD_INT 1
27581: ARRAY
27582: PPUSH
27583: CALL_OW 65
// end ;
27587: PPOPN 1
27589: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27590: LD_EXP 53
27594: PUSH
27595: LD_EXP 91
27599: AND
27600: IFFALSE 27729
27602: GO 27604
27604: DISABLE
27605: LD_INT 0
27607: PPUSH
// begin uc_side := 0 ;
27608: LD_ADDR_OWVAR 20
27612: PUSH
27613: LD_INT 0
27615: ST_TO_ADDR
// uc_nation := nation_arabian ;
27616: LD_ADDR_OWVAR 21
27620: PUSH
27621: LD_INT 2
27623: ST_TO_ADDR
// hc_gallery :=  ;
27624: LD_ADDR_OWVAR 33
27628: PUSH
27629: LD_STRING 
27631: ST_TO_ADDR
// hc_name :=  ;
27632: LD_ADDR_OWVAR 26
27636: PUSH
27637: LD_STRING 
27639: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27640: LD_INT 1
27642: PPUSH
27643: LD_INT 11
27645: PPUSH
27646: LD_INT 10
27648: PPUSH
27649: CALL_OW 380
// un := CreateHuman ;
27653: LD_ADDR_VAR 0 1
27657: PUSH
27658: CALL_OW 44
27662: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27663: LD_VAR 0 1
27667: PPUSH
27668: LD_INT 1
27670: PPUSH
27671: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27675: LD_INT 35
27677: PPUSH
27678: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27682: LD_VAR 0 1
27686: PPUSH
27687: LD_INT 22
27689: PUSH
27690: LD_OWVAR 2
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PPUSH
27699: CALL_OW 69
27703: PPUSH
27704: LD_VAR 0 1
27708: PPUSH
27709: CALL_OW 74
27713: PPUSH
27714: CALL_OW 115
// until IsDead ( un ) ;
27718: LD_VAR 0 1
27722: PPUSH
27723: CALL_OW 301
27727: IFFALSE 27675
// end ;
27729: PPOPN 1
27731: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27732: LD_EXP 53
27736: PUSH
27737: LD_EXP 93
27741: AND
27742: IFFALSE 27754
27744: GO 27746
27746: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27747: LD_STRING earthquake(getX(game), 0, 32)
27749: PPUSH
27750: CALL_OW 559
27754: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27755: LD_EXP 53
27759: PUSH
27760: LD_EXP 94
27764: AND
27765: IFFALSE 27856
27767: GO 27769
27769: DISABLE
27770: LD_INT 0
27772: PPUSH
// begin enable ;
27773: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27774: LD_ADDR_VAR 0 1
27778: PUSH
27779: LD_INT 22
27781: PUSH
27782: LD_OWVAR 2
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 21
27793: PUSH
27794: LD_INT 2
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 33
27803: PUSH
27804: LD_INT 3
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: LIST
27815: PPUSH
27816: CALL_OW 69
27820: ST_TO_ADDR
// if not tmp then
27821: LD_VAR 0 1
27825: NOT
27826: IFFALSE 27830
// exit ;
27828: GO 27856
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27830: LD_VAR 0 1
27834: PUSH
27835: LD_INT 1
27837: PPUSH
27838: LD_VAR 0 1
27842: PPUSH
27843: CALL_OW 12
27847: ARRAY
27848: PPUSH
27849: LD_INT 1
27851: PPUSH
27852: CALL_OW 234
// end ;
27856: PPOPN 1
27858: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27859: LD_EXP 53
27863: PUSH
27864: LD_EXP 95
27868: AND
27869: IFFALSE 28010
27871: GO 27873
27873: DISABLE
27874: LD_INT 0
27876: PPUSH
27877: PPUSH
27878: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27879: LD_ADDR_VAR 0 3
27883: PUSH
27884: LD_INT 22
27886: PUSH
27887: LD_OWVAR 2
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 25
27898: PUSH
27899: LD_INT 1
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PPUSH
27910: CALL_OW 69
27914: ST_TO_ADDR
// if not tmp then
27915: LD_VAR 0 3
27919: NOT
27920: IFFALSE 27924
// exit ;
27922: GO 28010
// un := tmp [ rand ( 1 , tmp ) ] ;
27924: LD_ADDR_VAR 0 2
27928: PUSH
27929: LD_VAR 0 3
27933: PUSH
27934: LD_INT 1
27936: PPUSH
27937: LD_VAR 0 3
27941: PPUSH
27942: CALL_OW 12
27946: ARRAY
27947: ST_TO_ADDR
// if Crawls ( un ) then
27948: LD_VAR 0 2
27952: PPUSH
27953: CALL_OW 318
27957: IFFALSE 27968
// ComWalk ( un ) ;
27959: LD_VAR 0 2
27963: PPUSH
27964: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27968: LD_VAR 0 2
27972: PPUSH
27973: LD_INT 9
27975: PPUSH
27976: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27980: LD_INT 28
27982: PPUSH
27983: LD_OWVAR 2
27987: PPUSH
27988: LD_INT 2
27990: PPUSH
27991: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27995: LD_INT 29
27997: PPUSH
27998: LD_OWVAR 2
28002: PPUSH
28003: LD_INT 2
28005: PPUSH
28006: CALL_OW 322
// end ;
28010: PPOPN 3
28012: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28013: LD_EXP 53
28017: PUSH
28018: LD_EXP 96
28022: AND
28023: IFFALSE 28134
28025: GO 28027
28027: DISABLE
28028: LD_INT 0
28030: PPUSH
28031: PPUSH
28032: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28033: LD_ADDR_VAR 0 3
28037: PUSH
28038: LD_INT 22
28040: PUSH
28041: LD_OWVAR 2
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 25
28052: PUSH
28053: LD_INT 1
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PPUSH
28064: CALL_OW 69
28068: ST_TO_ADDR
// if not tmp then
28069: LD_VAR 0 3
28073: NOT
28074: IFFALSE 28078
// exit ;
28076: GO 28134
// un := tmp [ rand ( 1 , tmp ) ] ;
28078: LD_ADDR_VAR 0 2
28082: PUSH
28083: LD_VAR 0 3
28087: PUSH
28088: LD_INT 1
28090: PPUSH
28091: LD_VAR 0 3
28095: PPUSH
28096: CALL_OW 12
28100: ARRAY
28101: ST_TO_ADDR
// if Crawls ( un ) then
28102: LD_VAR 0 2
28106: PPUSH
28107: CALL_OW 318
28111: IFFALSE 28122
// ComWalk ( un ) ;
28113: LD_VAR 0 2
28117: PPUSH
28118: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28122: LD_VAR 0 2
28126: PPUSH
28127: LD_INT 8
28129: PPUSH
28130: CALL_OW 336
// end ;
28134: PPOPN 3
28136: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28137: LD_EXP 53
28141: PUSH
28142: LD_EXP 97
28146: AND
28147: IFFALSE 28291
28149: GO 28151
28151: DISABLE
28152: LD_INT 0
28154: PPUSH
28155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28156: LD_ADDR_VAR 0 2
28160: PUSH
28161: LD_INT 22
28163: PUSH
28164: LD_OWVAR 2
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 21
28175: PUSH
28176: LD_INT 2
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: LD_INT 2
28185: PUSH
28186: LD_INT 34
28188: PUSH
28189: LD_INT 12
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 34
28198: PUSH
28199: LD_INT 51
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 34
28208: PUSH
28209: LD_INT 32
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: LIST
28226: PPUSH
28227: CALL_OW 69
28231: ST_TO_ADDR
// if not tmp then
28232: LD_VAR 0 2
28236: NOT
28237: IFFALSE 28241
// exit ;
28239: GO 28291
// for i in tmp do
28241: LD_ADDR_VAR 0 1
28245: PUSH
28246: LD_VAR 0 2
28250: PUSH
28251: FOR_IN
28252: IFFALSE 28289
// if GetCargo ( i , mat_artifact ) = 0 then
28254: LD_VAR 0 1
28258: PPUSH
28259: LD_INT 4
28261: PPUSH
28262: CALL_OW 289
28266: PUSH
28267: LD_INT 0
28269: EQUAL
28270: IFFALSE 28287
// SetCargo ( i , mat_siberit , 100 ) ;
28272: LD_VAR 0 1
28276: PPUSH
28277: LD_INT 3
28279: PPUSH
28280: LD_INT 100
28282: PPUSH
28283: CALL_OW 290
28287: GO 28251
28289: POP
28290: POP
// end ;
28291: PPOPN 2
28293: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28294: LD_EXP 53
28298: PUSH
28299: LD_EXP 98
28303: AND
28304: IFFALSE 28487
28306: GO 28308
28308: DISABLE
28309: LD_INT 0
28311: PPUSH
28312: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28313: LD_ADDR_VAR 0 2
28317: PUSH
28318: LD_INT 22
28320: PUSH
28321: LD_OWVAR 2
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PPUSH
28330: CALL_OW 69
28334: ST_TO_ADDR
// if not tmp then
28335: LD_VAR 0 2
28339: NOT
28340: IFFALSE 28344
// exit ;
28342: GO 28487
// for i := 1 to 2 do
28344: LD_ADDR_VAR 0 1
28348: PUSH
28349: DOUBLE
28350: LD_INT 1
28352: DEC
28353: ST_TO_ADDR
28354: LD_INT 2
28356: PUSH
28357: FOR_TO
28358: IFFALSE 28485
// begin uc_side := your_side ;
28360: LD_ADDR_OWVAR 20
28364: PUSH
28365: LD_OWVAR 2
28369: ST_TO_ADDR
// uc_nation := nation_american ;
28370: LD_ADDR_OWVAR 21
28374: PUSH
28375: LD_INT 1
28377: ST_TO_ADDR
// vc_chassis := us_morphling ;
28378: LD_ADDR_OWVAR 37
28382: PUSH
28383: LD_INT 5
28385: ST_TO_ADDR
// vc_engine := engine_siberite ;
28386: LD_ADDR_OWVAR 39
28390: PUSH
28391: LD_INT 3
28393: ST_TO_ADDR
// vc_control := control_computer ;
28394: LD_ADDR_OWVAR 38
28398: PUSH
28399: LD_INT 3
28401: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28402: LD_ADDR_OWVAR 40
28406: PUSH
28407: LD_INT 10
28409: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28410: LD_VAR 0 2
28414: PUSH
28415: LD_INT 1
28417: ARRAY
28418: PPUSH
28419: CALL_OW 310
28423: NOT
28424: IFFALSE 28471
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28426: CALL_OW 45
28430: PPUSH
28431: LD_VAR 0 2
28435: PUSH
28436: LD_INT 1
28438: ARRAY
28439: PPUSH
28440: CALL_OW 250
28444: PPUSH
28445: LD_VAR 0 2
28449: PUSH
28450: LD_INT 1
28452: ARRAY
28453: PPUSH
28454: CALL_OW 251
28458: PPUSH
28459: LD_INT 12
28461: PPUSH
28462: LD_INT 1
28464: PPUSH
28465: CALL_OW 50
28469: GO 28483
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28471: CALL_OW 45
28475: PPUSH
28476: LD_INT 1
28478: PPUSH
28479: CALL_OW 51
// end ;
28483: GO 28357
28485: POP
28486: POP
// end ;
28487: PPOPN 2
28489: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28490: LD_EXP 53
28494: PUSH
28495: LD_EXP 99
28499: AND
28500: IFFALSE 28722
28502: GO 28504
28504: DISABLE
28505: LD_INT 0
28507: PPUSH
28508: PPUSH
28509: PPUSH
28510: PPUSH
28511: PPUSH
28512: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28513: LD_ADDR_VAR 0 6
28517: PUSH
28518: LD_INT 22
28520: PUSH
28521: LD_OWVAR 2
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 21
28532: PUSH
28533: LD_INT 1
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 3
28542: PUSH
28543: LD_INT 23
28545: PUSH
28546: LD_INT 0
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: LIST
28561: PPUSH
28562: CALL_OW 69
28566: ST_TO_ADDR
// if not tmp then
28567: LD_VAR 0 6
28571: NOT
28572: IFFALSE 28576
// exit ;
28574: GO 28722
// s1 := rand ( 1 , 4 ) ;
28576: LD_ADDR_VAR 0 2
28580: PUSH
28581: LD_INT 1
28583: PPUSH
28584: LD_INT 4
28586: PPUSH
28587: CALL_OW 12
28591: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28592: LD_ADDR_VAR 0 4
28596: PUSH
28597: LD_VAR 0 6
28601: PUSH
28602: LD_INT 1
28604: ARRAY
28605: PPUSH
28606: LD_VAR 0 2
28610: PPUSH
28611: CALL_OW 259
28615: ST_TO_ADDR
// if s1 = 1 then
28616: LD_VAR 0 2
28620: PUSH
28621: LD_INT 1
28623: EQUAL
28624: IFFALSE 28644
// s2 := rand ( 2 , 4 ) else
28626: LD_ADDR_VAR 0 3
28630: PUSH
28631: LD_INT 2
28633: PPUSH
28634: LD_INT 4
28636: PPUSH
28637: CALL_OW 12
28641: ST_TO_ADDR
28642: GO 28652
// s2 := 1 ;
28644: LD_ADDR_VAR 0 3
28648: PUSH
28649: LD_INT 1
28651: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28652: LD_ADDR_VAR 0 5
28656: PUSH
28657: LD_VAR 0 6
28661: PUSH
28662: LD_INT 1
28664: ARRAY
28665: PPUSH
28666: LD_VAR 0 3
28670: PPUSH
28671: CALL_OW 259
28675: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28676: LD_VAR 0 6
28680: PUSH
28681: LD_INT 1
28683: ARRAY
28684: PPUSH
28685: LD_VAR 0 2
28689: PPUSH
28690: LD_VAR 0 5
28694: PPUSH
28695: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28699: LD_VAR 0 6
28703: PUSH
28704: LD_INT 1
28706: ARRAY
28707: PPUSH
28708: LD_VAR 0 3
28712: PPUSH
28713: LD_VAR 0 4
28717: PPUSH
28718: CALL_OW 237
// end ;
28722: PPOPN 6
28724: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28725: LD_EXP 53
28729: PUSH
28730: LD_EXP 100
28734: AND
28735: IFFALSE 28814
28737: GO 28739
28739: DISABLE
28740: LD_INT 0
28742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28743: LD_ADDR_VAR 0 1
28747: PUSH
28748: LD_INT 22
28750: PUSH
28751: LD_OWVAR 2
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 30
28762: PUSH
28763: LD_INT 3
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PPUSH
28774: CALL_OW 69
28778: ST_TO_ADDR
// if not tmp then
28779: LD_VAR 0 1
28783: NOT
28784: IFFALSE 28788
// exit ;
28786: GO 28814
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28788: LD_VAR 0 1
28792: PUSH
28793: LD_INT 1
28795: PPUSH
28796: LD_VAR 0 1
28800: PPUSH
28801: CALL_OW 12
28805: ARRAY
28806: PPUSH
28807: LD_INT 1
28809: PPUSH
28810: CALL_OW 234
// end ;
28814: PPOPN 1
28816: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28817: LD_EXP 53
28821: PUSH
28822: LD_EXP 101
28826: AND
28827: IFFALSE 28939
28829: GO 28831
28831: DISABLE
28832: LD_INT 0
28834: PPUSH
28835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28836: LD_ADDR_VAR 0 2
28840: PUSH
28841: LD_INT 22
28843: PUSH
28844: LD_OWVAR 2
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: LD_INT 2
28855: PUSH
28856: LD_INT 30
28858: PUSH
28859: LD_INT 27
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: LD_INT 30
28868: PUSH
28869: LD_INT 26
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: LD_INT 30
28878: PUSH
28879: LD_INT 28
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PPUSH
28896: CALL_OW 69
28900: ST_TO_ADDR
// if not tmp then
28901: LD_VAR 0 2
28905: NOT
28906: IFFALSE 28910
// exit ;
28908: GO 28939
// for i in tmp do
28910: LD_ADDR_VAR 0 1
28914: PUSH
28915: LD_VAR 0 2
28919: PUSH
28920: FOR_IN
28921: IFFALSE 28937
// SetLives ( i , 1 ) ;
28923: LD_VAR 0 1
28927: PPUSH
28928: LD_INT 1
28930: PPUSH
28931: CALL_OW 234
28935: GO 28920
28937: POP
28938: POP
// end ;
28939: PPOPN 2
28941: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28942: LD_EXP 53
28946: PUSH
28947: LD_EXP 102
28951: AND
28952: IFFALSE 29239
28954: GO 28956
28956: DISABLE
28957: LD_INT 0
28959: PPUSH
28960: PPUSH
28961: PPUSH
// begin i := rand ( 1 , 7 ) ;
28962: LD_ADDR_VAR 0 1
28966: PUSH
28967: LD_INT 1
28969: PPUSH
28970: LD_INT 7
28972: PPUSH
28973: CALL_OW 12
28977: ST_TO_ADDR
// case i of 1 :
28978: LD_VAR 0 1
28982: PUSH
28983: LD_INT 1
28985: DOUBLE
28986: EQUAL
28987: IFTRUE 28991
28989: GO 29001
28991: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28992: LD_STRING earthquake(getX(game), 0, 32)
28994: PPUSH
28995: CALL_OW 559
28999: GO 29239
29001: LD_INT 2
29003: DOUBLE
29004: EQUAL
29005: IFTRUE 29009
29007: GO 29023
29009: POP
// begin ToLua ( displayStucuk(); ) ;
29010: LD_STRING displayStucuk();
29012: PPUSH
29013: CALL_OW 559
// ResetFog ;
29017: CALL_OW 335
// end ; 3 :
29021: GO 29239
29023: LD_INT 3
29025: DOUBLE
29026: EQUAL
29027: IFTRUE 29031
29029: GO 29135
29031: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29032: LD_ADDR_VAR 0 2
29036: PUSH
29037: LD_INT 22
29039: PUSH
29040: LD_OWVAR 2
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 25
29051: PUSH
29052: LD_INT 1
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PPUSH
29063: CALL_OW 69
29067: ST_TO_ADDR
// if not tmp then
29068: LD_VAR 0 2
29072: NOT
29073: IFFALSE 29077
// exit ;
29075: GO 29239
// un := tmp [ rand ( 1 , tmp ) ] ;
29077: LD_ADDR_VAR 0 3
29081: PUSH
29082: LD_VAR 0 2
29086: PUSH
29087: LD_INT 1
29089: PPUSH
29090: LD_VAR 0 2
29094: PPUSH
29095: CALL_OW 12
29099: ARRAY
29100: ST_TO_ADDR
// if Crawls ( un ) then
29101: LD_VAR 0 3
29105: PPUSH
29106: CALL_OW 318
29110: IFFALSE 29121
// ComWalk ( un ) ;
29112: LD_VAR 0 3
29116: PPUSH
29117: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29121: LD_VAR 0 3
29125: PPUSH
29126: LD_INT 8
29128: PPUSH
29129: CALL_OW 336
// end ; 4 :
29133: GO 29239
29135: LD_INT 4
29137: DOUBLE
29138: EQUAL
29139: IFTRUE 29143
29141: GO 29217
29143: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29144: LD_ADDR_VAR 0 2
29148: PUSH
29149: LD_INT 22
29151: PUSH
29152: LD_OWVAR 2
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 30
29163: PUSH
29164: LD_INT 29
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PPUSH
29175: CALL_OW 69
29179: ST_TO_ADDR
// if not tmp then
29180: LD_VAR 0 2
29184: NOT
29185: IFFALSE 29189
// exit ;
29187: GO 29239
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29189: LD_VAR 0 2
29193: PUSH
29194: LD_INT 1
29196: ARRAY
29197: PPUSH
29198: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29202: LD_VAR 0 2
29206: PUSH
29207: LD_INT 1
29209: ARRAY
29210: PPUSH
29211: CALL_OW 65
// end ; 5 .. 7 :
29215: GO 29239
29217: LD_INT 5
29219: DOUBLE
29220: GREATEREQUAL
29221: IFFALSE 29229
29223: LD_INT 7
29225: DOUBLE
29226: LESSEQUAL
29227: IFTRUE 29231
29229: GO 29238
29231: POP
// StreamSibBomb ; end ;
29232: CALL 25476 0 0
29236: GO 29239
29238: POP
// end ;
29239: PPOPN 3
29241: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29242: LD_EXP 53
29246: PUSH
29247: LD_EXP 103
29251: AND
29252: IFFALSE 29408
29254: GO 29256
29256: DISABLE
29257: LD_INT 0
29259: PPUSH
29260: PPUSH
29261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29262: LD_ADDR_VAR 0 2
29266: PUSH
29267: LD_INT 81
29269: PUSH
29270: LD_OWVAR 2
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 2
29281: PUSH
29282: LD_INT 21
29284: PUSH
29285: LD_INT 1
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PUSH
29292: LD_INT 21
29294: PUSH
29295: LD_INT 2
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: LIST
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PPUSH
29311: CALL_OW 69
29315: ST_TO_ADDR
// if not tmp then
29316: LD_VAR 0 2
29320: NOT
29321: IFFALSE 29325
// exit ;
29323: GO 29408
// p := 0 ;
29325: LD_ADDR_VAR 0 3
29329: PUSH
29330: LD_INT 0
29332: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29333: LD_INT 35
29335: PPUSH
29336: CALL_OW 67
// p := p + 1 ;
29340: LD_ADDR_VAR 0 3
29344: PUSH
29345: LD_VAR 0 3
29349: PUSH
29350: LD_INT 1
29352: PLUS
29353: ST_TO_ADDR
// for i in tmp do
29354: LD_ADDR_VAR 0 1
29358: PUSH
29359: LD_VAR 0 2
29363: PUSH
29364: FOR_IN
29365: IFFALSE 29396
// if GetLives ( i ) < 1000 then
29367: LD_VAR 0 1
29371: PPUSH
29372: CALL_OW 256
29376: PUSH
29377: LD_INT 1000
29379: LESS
29380: IFFALSE 29394
// SetLives ( i , 1000 ) ;
29382: LD_VAR 0 1
29386: PPUSH
29387: LD_INT 1000
29389: PPUSH
29390: CALL_OW 234
29394: GO 29364
29396: POP
29397: POP
// until p > 20 ;
29398: LD_VAR 0 3
29402: PUSH
29403: LD_INT 20
29405: GREATER
29406: IFFALSE 29333
// end ;
29408: PPOPN 3
29410: END
// every 0 0$1 trigger StreamModeActive and sTime do
29411: LD_EXP 53
29415: PUSH
29416: LD_EXP 104
29420: AND
29421: IFFALSE 29456
29423: GO 29425
29425: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29426: LD_INT 28
29428: PPUSH
29429: LD_OWVAR 2
29433: PPUSH
29434: LD_INT 2
29436: PPUSH
29437: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29441: LD_INT 30
29443: PPUSH
29444: LD_OWVAR 2
29448: PPUSH
29449: LD_INT 2
29451: PPUSH
29452: CALL_OW 322
// end ;
29456: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29457: LD_EXP 53
29461: PUSH
29462: LD_EXP 105
29466: AND
29467: IFFALSE 29588
29469: GO 29471
29471: DISABLE
29472: LD_INT 0
29474: PPUSH
29475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29476: LD_ADDR_VAR 0 2
29480: PUSH
29481: LD_INT 22
29483: PUSH
29484: LD_OWVAR 2
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 21
29495: PUSH
29496: LD_INT 1
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 3
29505: PUSH
29506: LD_INT 23
29508: PUSH
29509: LD_INT 0
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: LIST
29524: PPUSH
29525: CALL_OW 69
29529: ST_TO_ADDR
// if not tmp then
29530: LD_VAR 0 2
29534: NOT
29535: IFFALSE 29539
// exit ;
29537: GO 29588
// for i in tmp do
29539: LD_ADDR_VAR 0 1
29543: PUSH
29544: LD_VAR 0 2
29548: PUSH
29549: FOR_IN
29550: IFFALSE 29586
// begin if Crawls ( i ) then
29552: LD_VAR 0 1
29556: PPUSH
29557: CALL_OW 318
29561: IFFALSE 29572
// ComWalk ( i ) ;
29563: LD_VAR 0 1
29567: PPUSH
29568: CALL_OW 138
// SetClass ( i , 2 ) ;
29572: LD_VAR 0 1
29576: PPUSH
29577: LD_INT 2
29579: PPUSH
29580: CALL_OW 336
// end ;
29584: GO 29549
29586: POP
29587: POP
// end ;
29588: PPOPN 2
29590: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29591: LD_EXP 53
29595: PUSH
29596: LD_EXP 106
29600: AND
29601: IFFALSE 29889
29603: GO 29605
29605: DISABLE
29606: LD_INT 0
29608: PPUSH
29609: PPUSH
29610: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29611: LD_OWVAR 2
29615: PPUSH
29616: LD_INT 9
29618: PPUSH
29619: LD_INT 1
29621: PPUSH
29622: LD_INT 1
29624: PPUSH
29625: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29629: LD_INT 9
29631: PPUSH
29632: LD_OWVAR 2
29636: PPUSH
29637: CALL_OW 343
// uc_side := 9 ;
29641: LD_ADDR_OWVAR 20
29645: PUSH
29646: LD_INT 9
29648: ST_TO_ADDR
// uc_nation := 2 ;
29649: LD_ADDR_OWVAR 21
29653: PUSH
29654: LD_INT 2
29656: ST_TO_ADDR
// hc_name := Dark Warrior ;
29657: LD_ADDR_OWVAR 26
29661: PUSH
29662: LD_STRING Dark Warrior
29664: ST_TO_ADDR
// hc_gallery :=  ;
29665: LD_ADDR_OWVAR 33
29669: PUSH
29670: LD_STRING 
29672: ST_TO_ADDR
// hc_noskilllimit := true ;
29673: LD_ADDR_OWVAR 76
29677: PUSH
29678: LD_INT 1
29680: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29681: LD_ADDR_OWVAR 31
29685: PUSH
29686: LD_INT 30
29688: PUSH
29689: LD_INT 30
29691: PUSH
29692: LD_INT 30
29694: PUSH
29695: LD_INT 30
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: ST_TO_ADDR
// un := CreateHuman ;
29704: LD_ADDR_VAR 0 3
29708: PUSH
29709: CALL_OW 44
29713: ST_TO_ADDR
// hc_noskilllimit := false ;
29714: LD_ADDR_OWVAR 76
29718: PUSH
29719: LD_INT 0
29721: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29722: LD_VAR 0 3
29726: PPUSH
29727: LD_INT 1
29729: PPUSH
29730: CALL_OW 51
// ToLua ( playRanger() ) ;
29734: LD_STRING playRanger()
29736: PPUSH
29737: CALL_OW 559
// p := 0 ;
29741: LD_ADDR_VAR 0 2
29745: PUSH
29746: LD_INT 0
29748: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29749: LD_INT 35
29751: PPUSH
29752: CALL_OW 67
// p := p + 1 ;
29756: LD_ADDR_VAR 0 2
29760: PUSH
29761: LD_VAR 0 2
29765: PUSH
29766: LD_INT 1
29768: PLUS
29769: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29770: LD_VAR 0 3
29774: PPUSH
29775: CALL_OW 256
29779: PUSH
29780: LD_INT 1000
29782: LESS
29783: IFFALSE 29797
// SetLives ( un , 1000 ) ;
29785: LD_VAR 0 3
29789: PPUSH
29790: LD_INT 1000
29792: PPUSH
29793: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29797: LD_VAR 0 3
29801: PPUSH
29802: LD_INT 81
29804: PUSH
29805: LD_OWVAR 2
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 91
29816: PUSH
29817: LD_VAR 0 3
29821: PUSH
29822: LD_INT 30
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: LIST
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PPUSH
29834: CALL_OW 69
29838: PPUSH
29839: LD_VAR 0 3
29843: PPUSH
29844: CALL_OW 74
29848: PPUSH
29849: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
29853: LD_VAR 0 2
29857: PUSH
29858: LD_INT 80
29860: GREATER
29861: PUSH
29862: LD_VAR 0 3
29866: PPUSH
29867: CALL_OW 301
29871: OR
29872: IFFALSE 29749
// if un then
29874: LD_VAR 0 3
29878: IFFALSE 29889
// RemoveUnit ( un ) ;
29880: LD_VAR 0 3
29884: PPUSH
29885: CALL_OW 64
// end ;
29889: PPOPN 3
29891: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
29892: LD_EXP 107
29896: IFFALSE 30012
29898: GO 29900
29900: DISABLE
29901: LD_INT 0
29903: PPUSH
29904: PPUSH
29905: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29906: LD_ADDR_VAR 0 2
29910: PUSH
29911: LD_INT 81
29913: PUSH
29914: LD_OWVAR 2
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: LD_INT 21
29925: PUSH
29926: LD_INT 1
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PPUSH
29937: CALL_OW 69
29941: ST_TO_ADDR
// ToLua ( playComputer() ) ;
29942: LD_STRING playComputer()
29944: PPUSH
29945: CALL_OW 559
// if not tmp then
29949: LD_VAR 0 2
29953: NOT
29954: IFFALSE 29958
// exit ;
29956: GO 30012
// for i in tmp do
29958: LD_ADDR_VAR 0 1
29962: PUSH
29963: LD_VAR 0 2
29967: PUSH
29968: FOR_IN
29969: IFFALSE 30010
// for j := 1 to 4 do
29971: LD_ADDR_VAR 0 3
29975: PUSH
29976: DOUBLE
29977: LD_INT 1
29979: DEC
29980: ST_TO_ADDR
29981: LD_INT 4
29983: PUSH
29984: FOR_TO
29985: IFFALSE 30006
// SetSkill ( i , j , 10 ) ;
29987: LD_VAR 0 1
29991: PPUSH
29992: LD_VAR 0 3
29996: PPUSH
29997: LD_INT 10
29999: PPUSH
30000: CALL_OW 237
30004: GO 29984
30006: POP
30007: POP
30008: GO 29968
30010: POP
30011: POP
// end ;
30012: PPOPN 3
30014: END
// every 0 0$1 trigger s30 do var i , tmp ;
30015: LD_EXP 108
30019: IFFALSE 30088
30021: GO 30023
30023: DISABLE
30024: LD_INT 0
30026: PPUSH
30027: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30028: LD_ADDR_VAR 0 2
30032: PUSH
30033: LD_INT 22
30035: PUSH
30036: LD_OWVAR 2
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PPUSH
30045: CALL_OW 69
30049: ST_TO_ADDR
// if not tmp then
30050: LD_VAR 0 2
30054: NOT
30055: IFFALSE 30059
// exit ;
30057: GO 30088
// for i in tmp do
30059: LD_ADDR_VAR 0 1
30063: PUSH
30064: LD_VAR 0 2
30068: PUSH
30069: FOR_IN
30070: IFFALSE 30086
// SetLives ( i , 300 ) ;
30072: LD_VAR 0 1
30076: PPUSH
30077: LD_INT 300
30079: PPUSH
30080: CALL_OW 234
30084: GO 30069
30086: POP
30087: POP
// end ;
30088: PPOPN 2
30090: END
// every 0 0$1 trigger s60 do var i , tmp ;
30091: LD_EXP 109
30095: IFFALSE 30164
30097: GO 30099
30099: DISABLE
30100: LD_INT 0
30102: PPUSH
30103: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30104: LD_ADDR_VAR 0 2
30108: PUSH
30109: LD_INT 22
30111: PUSH
30112: LD_OWVAR 2
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PPUSH
30121: CALL_OW 69
30125: ST_TO_ADDR
// if not tmp then
30126: LD_VAR 0 2
30130: NOT
30131: IFFALSE 30135
// exit ;
30133: GO 30164
// for i in tmp do
30135: LD_ADDR_VAR 0 1
30139: PUSH
30140: LD_VAR 0 2
30144: PUSH
30145: FOR_IN
30146: IFFALSE 30162
// SetLives ( i , 600 ) ;
30148: LD_VAR 0 1
30152: PPUSH
30153: LD_INT 600
30155: PPUSH
30156: CALL_OW 234
30160: GO 30145
30162: POP
30163: POP
// end ;
30164: PPOPN 2
30166: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30167: LD_INT 0
30169: PPUSH
// case cmd of 301 :
30170: LD_VAR 0 1
30174: PUSH
30175: LD_INT 301
30177: DOUBLE
30178: EQUAL
30179: IFTRUE 30183
30181: GO 30215
30183: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30184: LD_VAR 0 6
30188: PPUSH
30189: LD_VAR 0 7
30193: PPUSH
30194: LD_VAR 0 8
30198: PPUSH
30199: LD_VAR 0 4
30203: PPUSH
30204: LD_VAR 0 5
30208: PPUSH
30209: CALL 31416 0 5
30213: GO 30336
30215: LD_INT 302
30217: DOUBLE
30218: EQUAL
30219: IFTRUE 30223
30221: GO 30260
30223: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30224: LD_VAR 0 6
30228: PPUSH
30229: LD_VAR 0 7
30233: PPUSH
30234: LD_VAR 0 8
30238: PPUSH
30239: LD_VAR 0 9
30243: PPUSH
30244: LD_VAR 0 4
30248: PPUSH
30249: LD_VAR 0 5
30253: PPUSH
30254: CALL 31507 0 6
30258: GO 30336
30260: LD_INT 303
30262: DOUBLE
30263: EQUAL
30264: IFTRUE 30268
30266: GO 30305
30268: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30269: LD_VAR 0 6
30273: PPUSH
30274: LD_VAR 0 7
30278: PPUSH
30279: LD_VAR 0 8
30283: PPUSH
30284: LD_VAR 0 9
30288: PPUSH
30289: LD_VAR 0 4
30293: PPUSH
30294: LD_VAR 0 5
30298: PPUSH
30299: CALL 30341 0 6
30303: GO 30336
30305: LD_INT 304
30307: DOUBLE
30308: EQUAL
30309: IFTRUE 30313
30311: GO 30335
30313: POP
// hHackTeleport ( unit , x , y ) ; end ;
30314: LD_VAR 0 2
30318: PPUSH
30319: LD_VAR 0 4
30323: PPUSH
30324: LD_VAR 0 5
30328: PPUSH
30329: CALL 32100 0 3
30333: GO 30336
30335: POP
// end ;
30336: LD_VAR 0 12
30340: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30341: LD_INT 0
30343: PPUSH
30344: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30345: LD_VAR 0 1
30349: PUSH
30350: LD_INT 1
30352: LESS
30353: PUSH
30354: LD_VAR 0 1
30358: PUSH
30359: LD_INT 3
30361: GREATER
30362: OR
30363: PUSH
30364: LD_VAR 0 5
30368: PPUSH
30369: LD_VAR 0 6
30373: PPUSH
30374: CALL_OW 428
30378: OR
30379: IFFALSE 30383
// exit ;
30381: GO 31103
// uc_side := your_side ;
30383: LD_ADDR_OWVAR 20
30387: PUSH
30388: LD_OWVAR 2
30392: ST_TO_ADDR
// uc_nation := nation ;
30393: LD_ADDR_OWVAR 21
30397: PUSH
30398: LD_VAR 0 1
30402: ST_TO_ADDR
// bc_level = 1 ;
30403: LD_ADDR_OWVAR 43
30407: PUSH
30408: LD_INT 1
30410: ST_TO_ADDR
// case btype of 1 :
30411: LD_VAR 0 2
30415: PUSH
30416: LD_INT 1
30418: DOUBLE
30419: EQUAL
30420: IFTRUE 30424
30422: GO 30435
30424: POP
// bc_type := b_depot ; 2 :
30425: LD_ADDR_OWVAR 42
30429: PUSH
30430: LD_INT 0
30432: ST_TO_ADDR
30433: GO 31047
30435: LD_INT 2
30437: DOUBLE
30438: EQUAL
30439: IFTRUE 30443
30441: GO 30454
30443: POP
// bc_type := b_warehouse ; 3 :
30444: LD_ADDR_OWVAR 42
30448: PUSH
30449: LD_INT 1
30451: ST_TO_ADDR
30452: GO 31047
30454: LD_INT 3
30456: DOUBLE
30457: EQUAL
30458: IFTRUE 30462
30460: GO 30473
30462: POP
// bc_type := b_lab ; 4 .. 9 :
30463: LD_ADDR_OWVAR 42
30467: PUSH
30468: LD_INT 6
30470: ST_TO_ADDR
30471: GO 31047
30473: LD_INT 4
30475: DOUBLE
30476: GREATEREQUAL
30477: IFFALSE 30485
30479: LD_INT 9
30481: DOUBLE
30482: LESSEQUAL
30483: IFTRUE 30487
30485: GO 30539
30487: POP
// begin bc_type := b_lab_half ;
30488: LD_ADDR_OWVAR 42
30492: PUSH
30493: LD_INT 7
30495: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30496: LD_ADDR_OWVAR 44
30500: PUSH
30501: LD_INT 10
30503: PUSH
30504: LD_INT 11
30506: PUSH
30507: LD_INT 12
30509: PUSH
30510: LD_INT 15
30512: PUSH
30513: LD_INT 14
30515: PUSH
30516: LD_INT 13
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: PUSH
30527: LD_VAR 0 2
30531: PUSH
30532: LD_INT 3
30534: MINUS
30535: ARRAY
30536: ST_TO_ADDR
// end ; 10 .. 13 :
30537: GO 31047
30539: LD_INT 10
30541: DOUBLE
30542: GREATEREQUAL
30543: IFFALSE 30551
30545: LD_INT 13
30547: DOUBLE
30548: LESSEQUAL
30549: IFTRUE 30553
30551: GO 30630
30553: POP
// begin bc_type := b_lab_full ;
30554: LD_ADDR_OWVAR 42
30558: PUSH
30559: LD_INT 8
30561: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30562: LD_ADDR_OWVAR 44
30566: PUSH
30567: LD_INT 10
30569: PUSH
30570: LD_INT 12
30572: PUSH
30573: LD_INT 14
30575: PUSH
30576: LD_INT 13
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: PUSH
30585: LD_VAR 0 2
30589: PUSH
30590: LD_INT 9
30592: MINUS
30593: ARRAY
30594: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30595: LD_ADDR_OWVAR 45
30599: PUSH
30600: LD_INT 11
30602: PUSH
30603: LD_INT 15
30605: PUSH
30606: LD_INT 12
30608: PUSH
30609: LD_INT 15
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: PUSH
30618: LD_VAR 0 2
30622: PUSH
30623: LD_INT 9
30625: MINUS
30626: ARRAY
30627: ST_TO_ADDR
// end ; 14 :
30628: GO 31047
30630: LD_INT 14
30632: DOUBLE
30633: EQUAL
30634: IFTRUE 30638
30636: GO 30649
30638: POP
// bc_type := b_workshop ; 15 :
30639: LD_ADDR_OWVAR 42
30643: PUSH
30644: LD_INT 2
30646: ST_TO_ADDR
30647: GO 31047
30649: LD_INT 15
30651: DOUBLE
30652: EQUAL
30653: IFTRUE 30657
30655: GO 30668
30657: POP
// bc_type := b_factory ; 16 :
30658: LD_ADDR_OWVAR 42
30662: PUSH
30663: LD_INT 3
30665: ST_TO_ADDR
30666: GO 31047
30668: LD_INT 16
30670: DOUBLE
30671: EQUAL
30672: IFTRUE 30676
30674: GO 30687
30676: POP
// bc_type := b_ext_gun ; 17 :
30677: LD_ADDR_OWVAR 42
30681: PUSH
30682: LD_INT 17
30684: ST_TO_ADDR
30685: GO 31047
30687: LD_INT 17
30689: DOUBLE
30690: EQUAL
30691: IFTRUE 30695
30693: GO 30723
30695: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30696: LD_ADDR_OWVAR 42
30700: PUSH
30701: LD_INT 19
30703: PUSH
30704: LD_INT 23
30706: PUSH
30707: LD_INT 19
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: LIST
30714: PUSH
30715: LD_VAR 0 1
30719: ARRAY
30720: ST_TO_ADDR
30721: GO 31047
30723: LD_INT 18
30725: DOUBLE
30726: EQUAL
30727: IFTRUE 30731
30729: GO 30742
30731: POP
// bc_type := b_ext_radar ; 19 :
30732: LD_ADDR_OWVAR 42
30736: PUSH
30737: LD_INT 20
30739: ST_TO_ADDR
30740: GO 31047
30742: LD_INT 19
30744: DOUBLE
30745: EQUAL
30746: IFTRUE 30750
30748: GO 30761
30750: POP
// bc_type := b_ext_radio ; 20 :
30751: LD_ADDR_OWVAR 42
30755: PUSH
30756: LD_INT 22
30758: ST_TO_ADDR
30759: GO 31047
30761: LD_INT 20
30763: DOUBLE
30764: EQUAL
30765: IFTRUE 30769
30767: GO 30780
30769: POP
// bc_type := b_ext_siberium ; 21 :
30770: LD_ADDR_OWVAR 42
30774: PUSH
30775: LD_INT 21
30777: ST_TO_ADDR
30778: GO 31047
30780: LD_INT 21
30782: DOUBLE
30783: EQUAL
30784: IFTRUE 30788
30786: GO 30799
30788: POP
// bc_type := b_ext_computer ; 22 :
30789: LD_ADDR_OWVAR 42
30793: PUSH
30794: LD_INT 24
30796: ST_TO_ADDR
30797: GO 31047
30799: LD_INT 22
30801: DOUBLE
30802: EQUAL
30803: IFTRUE 30807
30805: GO 30818
30807: POP
// bc_type := b_ext_track ; 23 :
30808: LD_ADDR_OWVAR 42
30812: PUSH
30813: LD_INT 16
30815: ST_TO_ADDR
30816: GO 31047
30818: LD_INT 23
30820: DOUBLE
30821: EQUAL
30822: IFTRUE 30826
30824: GO 30837
30826: POP
// bc_type := b_ext_laser ; 24 :
30827: LD_ADDR_OWVAR 42
30831: PUSH
30832: LD_INT 25
30834: ST_TO_ADDR
30835: GO 31047
30837: LD_INT 24
30839: DOUBLE
30840: EQUAL
30841: IFTRUE 30845
30843: GO 30856
30845: POP
// bc_type := b_control_tower ; 25 :
30846: LD_ADDR_OWVAR 42
30850: PUSH
30851: LD_INT 36
30853: ST_TO_ADDR
30854: GO 31047
30856: LD_INT 25
30858: DOUBLE
30859: EQUAL
30860: IFTRUE 30864
30862: GO 30875
30864: POP
// bc_type := b_breastwork ; 26 :
30865: LD_ADDR_OWVAR 42
30869: PUSH
30870: LD_INT 31
30872: ST_TO_ADDR
30873: GO 31047
30875: LD_INT 26
30877: DOUBLE
30878: EQUAL
30879: IFTRUE 30883
30881: GO 30894
30883: POP
// bc_type := b_bunker ; 27 :
30884: LD_ADDR_OWVAR 42
30888: PUSH
30889: LD_INT 32
30891: ST_TO_ADDR
30892: GO 31047
30894: LD_INT 27
30896: DOUBLE
30897: EQUAL
30898: IFTRUE 30902
30900: GO 30913
30902: POP
// bc_type := b_turret ; 28 :
30903: LD_ADDR_OWVAR 42
30907: PUSH
30908: LD_INT 33
30910: ST_TO_ADDR
30911: GO 31047
30913: LD_INT 28
30915: DOUBLE
30916: EQUAL
30917: IFTRUE 30921
30919: GO 30932
30921: POP
// bc_type := b_armoury ; 29 :
30922: LD_ADDR_OWVAR 42
30926: PUSH
30927: LD_INT 4
30929: ST_TO_ADDR
30930: GO 31047
30932: LD_INT 29
30934: DOUBLE
30935: EQUAL
30936: IFTRUE 30940
30938: GO 30951
30940: POP
// bc_type := b_barracks ; 30 :
30941: LD_ADDR_OWVAR 42
30945: PUSH
30946: LD_INT 5
30948: ST_TO_ADDR
30949: GO 31047
30951: LD_INT 30
30953: DOUBLE
30954: EQUAL
30955: IFTRUE 30959
30957: GO 30970
30959: POP
// bc_type := b_solar_power ; 31 :
30960: LD_ADDR_OWVAR 42
30964: PUSH
30965: LD_INT 27
30967: ST_TO_ADDR
30968: GO 31047
30970: LD_INT 31
30972: DOUBLE
30973: EQUAL
30974: IFTRUE 30978
30976: GO 30989
30978: POP
// bc_type := b_oil_power ; 32 :
30979: LD_ADDR_OWVAR 42
30983: PUSH
30984: LD_INT 26
30986: ST_TO_ADDR
30987: GO 31047
30989: LD_INT 32
30991: DOUBLE
30992: EQUAL
30993: IFTRUE 30997
30995: GO 31008
30997: POP
// bc_type := b_siberite_power ; 33 :
30998: LD_ADDR_OWVAR 42
31002: PUSH
31003: LD_INT 28
31005: ST_TO_ADDR
31006: GO 31047
31008: LD_INT 33
31010: DOUBLE
31011: EQUAL
31012: IFTRUE 31016
31014: GO 31027
31016: POP
// bc_type := b_oil_mine ; 34 :
31017: LD_ADDR_OWVAR 42
31021: PUSH
31022: LD_INT 29
31024: ST_TO_ADDR
31025: GO 31047
31027: LD_INT 34
31029: DOUBLE
31030: EQUAL
31031: IFTRUE 31035
31033: GO 31046
31035: POP
// bc_type := b_siberite_mine ; end ;
31036: LD_ADDR_OWVAR 42
31040: PUSH
31041: LD_INT 30
31043: ST_TO_ADDR
31044: GO 31047
31046: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31047: LD_ADDR_VAR 0 8
31051: PUSH
31052: LD_VAR 0 5
31056: PPUSH
31057: LD_VAR 0 6
31061: PPUSH
31062: LD_VAR 0 3
31066: PPUSH
31067: CALL_OW 47
31071: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31072: LD_OWVAR 42
31076: PUSH
31077: LD_INT 32
31079: PUSH
31080: LD_INT 33
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: IN
31087: IFFALSE 31103
// PlaceWeaponTurret ( b , weapon ) ;
31089: LD_VAR 0 8
31093: PPUSH
31094: LD_VAR 0 4
31098: PPUSH
31099: CALL_OW 431
// end ;
31103: LD_VAR 0 7
31107: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31108: LD_INT 0
31110: PPUSH
31111: PPUSH
31112: PPUSH
31113: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31114: LD_ADDR_VAR 0 4
31118: PUSH
31119: LD_INT 22
31121: PUSH
31122: LD_OWVAR 2
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 2
31133: PUSH
31134: LD_INT 30
31136: PUSH
31137: LD_INT 0
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 30
31146: PUSH
31147: LD_INT 1
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: LIST
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PPUSH
31163: CALL_OW 69
31167: ST_TO_ADDR
// if not tmp then
31168: LD_VAR 0 4
31172: NOT
31173: IFFALSE 31177
// exit ;
31175: GO 31236
// for i in tmp do
31177: LD_ADDR_VAR 0 2
31181: PUSH
31182: LD_VAR 0 4
31186: PUSH
31187: FOR_IN
31188: IFFALSE 31234
// for j = 1 to 3 do
31190: LD_ADDR_VAR 0 3
31194: PUSH
31195: DOUBLE
31196: LD_INT 1
31198: DEC
31199: ST_TO_ADDR
31200: LD_INT 3
31202: PUSH
31203: FOR_TO
31204: IFFALSE 31230
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31206: LD_VAR 0 2
31210: PPUSH
31211: CALL_OW 274
31215: PPUSH
31216: LD_VAR 0 3
31220: PPUSH
31221: LD_INT 99999
31223: PPUSH
31224: CALL_OW 277
31228: GO 31203
31230: POP
31231: POP
31232: GO 31187
31234: POP
31235: POP
// end ;
31236: LD_VAR 0 1
31240: RET
// export function hHackSetLevel10 ; var i , j ; begin
31241: LD_INT 0
31243: PPUSH
31244: PPUSH
31245: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31246: LD_ADDR_VAR 0 2
31250: PUSH
31251: LD_INT 21
31253: PUSH
31254: LD_INT 1
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PPUSH
31261: CALL_OW 69
31265: PUSH
31266: FOR_IN
31267: IFFALSE 31319
// if IsSelected ( i ) then
31269: LD_VAR 0 2
31273: PPUSH
31274: CALL_OW 306
31278: IFFALSE 31317
// begin for j := 1 to 4 do
31280: LD_ADDR_VAR 0 3
31284: PUSH
31285: DOUBLE
31286: LD_INT 1
31288: DEC
31289: ST_TO_ADDR
31290: LD_INT 4
31292: PUSH
31293: FOR_TO
31294: IFFALSE 31315
// SetSkill ( i , j , 10 ) ;
31296: LD_VAR 0 2
31300: PPUSH
31301: LD_VAR 0 3
31305: PPUSH
31306: LD_INT 10
31308: PPUSH
31309: CALL_OW 237
31313: GO 31293
31315: POP
31316: POP
// end ;
31317: GO 31266
31319: POP
31320: POP
// end ;
31321: LD_VAR 0 1
31325: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31326: LD_INT 0
31328: PPUSH
31329: PPUSH
31330: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31331: LD_ADDR_VAR 0 2
31335: PUSH
31336: LD_INT 22
31338: PUSH
31339: LD_OWVAR 2
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 21
31350: PUSH
31351: LD_INT 1
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PPUSH
31362: CALL_OW 69
31366: PUSH
31367: FOR_IN
31368: IFFALSE 31409
// begin for j := 1 to 4 do
31370: LD_ADDR_VAR 0 3
31374: PUSH
31375: DOUBLE
31376: LD_INT 1
31378: DEC
31379: ST_TO_ADDR
31380: LD_INT 4
31382: PUSH
31383: FOR_TO
31384: IFFALSE 31405
// SetSkill ( i , j , 10 ) ;
31386: LD_VAR 0 2
31390: PPUSH
31391: LD_VAR 0 3
31395: PPUSH
31396: LD_INT 10
31398: PPUSH
31399: CALL_OW 237
31403: GO 31383
31405: POP
31406: POP
// end ;
31407: GO 31367
31409: POP
31410: POP
// end ;
31411: LD_VAR 0 1
31415: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31416: LD_INT 0
31418: PPUSH
// uc_side := your_side ;
31419: LD_ADDR_OWVAR 20
31423: PUSH
31424: LD_OWVAR 2
31428: ST_TO_ADDR
// uc_nation := nation ;
31429: LD_ADDR_OWVAR 21
31433: PUSH
31434: LD_VAR 0 1
31438: ST_TO_ADDR
// InitHc ;
31439: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31443: LD_INT 0
31445: PPUSH
31446: LD_VAR 0 2
31450: PPUSH
31451: LD_VAR 0 3
31455: PPUSH
31456: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31460: LD_VAR 0 4
31464: PPUSH
31465: LD_VAR 0 5
31469: PPUSH
31470: CALL_OW 428
31474: PUSH
31475: LD_INT 0
31477: EQUAL
31478: IFFALSE 31502
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31480: CALL_OW 44
31484: PPUSH
31485: LD_VAR 0 4
31489: PPUSH
31490: LD_VAR 0 5
31494: PPUSH
31495: LD_INT 1
31497: PPUSH
31498: CALL_OW 48
// end ;
31502: LD_VAR 0 6
31506: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31507: LD_INT 0
31509: PPUSH
31510: PPUSH
// uc_side := your_side ;
31511: LD_ADDR_OWVAR 20
31515: PUSH
31516: LD_OWVAR 2
31520: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31521: LD_VAR 0 1
31525: PUSH
31526: LD_INT 1
31528: PUSH
31529: LD_INT 2
31531: PUSH
31532: LD_INT 3
31534: PUSH
31535: LD_INT 4
31537: PUSH
31538: LD_INT 5
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: IN
31548: IFFALSE 31560
// uc_nation := nation_american else
31550: LD_ADDR_OWVAR 21
31554: PUSH
31555: LD_INT 1
31557: ST_TO_ADDR
31558: GO 31603
// if chassis in [ 11 , 12 , 13 , 14 ] then
31560: LD_VAR 0 1
31564: PUSH
31565: LD_INT 11
31567: PUSH
31568: LD_INT 12
31570: PUSH
31571: LD_INT 13
31573: PUSH
31574: LD_INT 14
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: IN
31583: IFFALSE 31595
// uc_nation := nation_arabian else
31585: LD_ADDR_OWVAR 21
31589: PUSH
31590: LD_INT 2
31592: ST_TO_ADDR
31593: GO 31603
// uc_nation := nation_russian ;
31595: LD_ADDR_OWVAR 21
31599: PUSH
31600: LD_INT 3
31602: ST_TO_ADDR
// vc_chassis := chassis ;
31603: LD_ADDR_OWVAR 37
31607: PUSH
31608: LD_VAR 0 1
31612: ST_TO_ADDR
// vc_engine := engine ;
31613: LD_ADDR_OWVAR 39
31617: PUSH
31618: LD_VAR 0 2
31622: ST_TO_ADDR
// vc_control := control ;
31623: LD_ADDR_OWVAR 38
31627: PUSH
31628: LD_VAR 0 3
31632: ST_TO_ADDR
// vc_weapon := weapon ;
31633: LD_ADDR_OWVAR 40
31637: PUSH
31638: LD_VAR 0 4
31642: ST_TO_ADDR
// un := CreateVehicle ;
31643: LD_ADDR_VAR 0 8
31647: PUSH
31648: CALL_OW 45
31652: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31653: LD_VAR 0 8
31657: PPUSH
31658: LD_INT 0
31660: PPUSH
31661: LD_INT 5
31663: PPUSH
31664: CALL_OW 12
31668: PPUSH
31669: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31673: LD_VAR 0 8
31677: PPUSH
31678: LD_VAR 0 5
31682: PPUSH
31683: LD_VAR 0 6
31687: PPUSH
31688: LD_INT 1
31690: PPUSH
31691: CALL_OW 48
// end ;
31695: LD_VAR 0 7
31699: RET
// export hInvincible ; every 1 do
31700: GO 31702
31702: DISABLE
// hInvincible := [ ] ;
31703: LD_ADDR_EXP 110
31707: PUSH
31708: EMPTY
31709: ST_TO_ADDR
31710: END
// every 10 do var i ;
31711: GO 31713
31713: DISABLE
31714: LD_INT 0
31716: PPUSH
// begin enable ;
31717: ENABLE
// if not hInvincible then
31718: LD_EXP 110
31722: NOT
31723: IFFALSE 31727
// exit ;
31725: GO 31771
// for i in hInvincible do
31727: LD_ADDR_VAR 0 1
31731: PUSH
31732: LD_EXP 110
31736: PUSH
31737: FOR_IN
31738: IFFALSE 31769
// if GetLives ( i ) < 1000 then
31740: LD_VAR 0 1
31744: PPUSH
31745: CALL_OW 256
31749: PUSH
31750: LD_INT 1000
31752: LESS
31753: IFFALSE 31767
// SetLives ( i , 1000 ) ;
31755: LD_VAR 0 1
31759: PPUSH
31760: LD_INT 1000
31762: PPUSH
31763: CALL_OW 234
31767: GO 31737
31769: POP
31770: POP
// end ;
31771: PPOPN 1
31773: END
// export function hHackInvincible ; var i ; begin
31774: LD_INT 0
31776: PPUSH
31777: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31778: LD_ADDR_VAR 0 2
31782: PUSH
31783: LD_INT 2
31785: PUSH
31786: LD_INT 21
31788: PUSH
31789: LD_INT 1
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PUSH
31796: LD_INT 21
31798: PUSH
31799: LD_INT 2
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: LIST
31810: PPUSH
31811: CALL_OW 69
31815: PUSH
31816: FOR_IN
31817: IFFALSE 31878
// if IsSelected ( i ) then
31819: LD_VAR 0 2
31823: PPUSH
31824: CALL_OW 306
31828: IFFALSE 31876
// begin if i in hInvincible then
31830: LD_VAR 0 2
31834: PUSH
31835: LD_EXP 110
31839: IN
31840: IFFALSE 31860
// hInvincible := hInvincible diff i else
31842: LD_ADDR_EXP 110
31846: PUSH
31847: LD_EXP 110
31851: PUSH
31852: LD_VAR 0 2
31856: DIFF
31857: ST_TO_ADDR
31858: GO 31876
// hInvincible := hInvincible union i ;
31860: LD_ADDR_EXP 110
31864: PUSH
31865: LD_EXP 110
31869: PUSH
31870: LD_VAR 0 2
31874: UNION
31875: ST_TO_ADDR
// end ;
31876: GO 31816
31878: POP
31879: POP
// end ;
31880: LD_VAR 0 1
31884: RET
// export function hHackInvisible ; var i , j ; begin
31885: LD_INT 0
31887: PPUSH
31888: PPUSH
31889: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31890: LD_ADDR_VAR 0 2
31894: PUSH
31895: LD_INT 21
31897: PUSH
31898: LD_INT 1
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PPUSH
31905: CALL_OW 69
31909: PUSH
31910: FOR_IN
31911: IFFALSE 31935
// if IsSelected ( i ) then
31913: LD_VAR 0 2
31917: PPUSH
31918: CALL_OW 306
31922: IFFALSE 31933
// ComForceInvisible ( i ) ;
31924: LD_VAR 0 2
31928: PPUSH
31929: CALL_OW 496
31933: GO 31910
31935: POP
31936: POP
// end ;
31937: LD_VAR 0 1
31941: RET
// export function hHackChangeYourSide ; begin
31942: LD_INT 0
31944: PPUSH
// if your_side = 8 then
31945: LD_OWVAR 2
31949: PUSH
31950: LD_INT 8
31952: EQUAL
31953: IFFALSE 31965
// your_side := 0 else
31955: LD_ADDR_OWVAR 2
31959: PUSH
31960: LD_INT 0
31962: ST_TO_ADDR
31963: GO 31979
// your_side := your_side + 1 ;
31965: LD_ADDR_OWVAR 2
31969: PUSH
31970: LD_OWVAR 2
31974: PUSH
31975: LD_INT 1
31977: PLUS
31978: ST_TO_ADDR
// end ;
31979: LD_VAR 0 1
31983: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31984: LD_INT 0
31986: PPUSH
31987: PPUSH
31988: PPUSH
// for i in all_units do
31989: LD_ADDR_VAR 0 2
31993: PUSH
31994: LD_OWVAR 3
31998: PUSH
31999: FOR_IN
32000: IFFALSE 32078
// if IsSelected ( i ) then
32002: LD_VAR 0 2
32006: PPUSH
32007: CALL_OW 306
32011: IFFALSE 32076
// begin j := GetSide ( i ) ;
32013: LD_ADDR_VAR 0 3
32017: PUSH
32018: LD_VAR 0 2
32022: PPUSH
32023: CALL_OW 255
32027: ST_TO_ADDR
// if j = 8 then
32028: LD_VAR 0 3
32032: PUSH
32033: LD_INT 8
32035: EQUAL
32036: IFFALSE 32048
// j := 0 else
32038: LD_ADDR_VAR 0 3
32042: PUSH
32043: LD_INT 0
32045: ST_TO_ADDR
32046: GO 32062
// j := j + 1 ;
32048: LD_ADDR_VAR 0 3
32052: PUSH
32053: LD_VAR 0 3
32057: PUSH
32058: LD_INT 1
32060: PLUS
32061: ST_TO_ADDR
// SetSide ( i , j ) ;
32062: LD_VAR 0 2
32066: PPUSH
32067: LD_VAR 0 3
32071: PPUSH
32072: CALL_OW 235
// end ;
32076: GO 31999
32078: POP
32079: POP
// end ;
32080: LD_VAR 0 1
32084: RET
// export function hHackFog ; begin
32085: LD_INT 0
32087: PPUSH
// FogOff ( true ) ;
32088: LD_INT 1
32090: PPUSH
32091: CALL_OW 344
// end ;
32095: LD_VAR 0 1
32099: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32100: LD_INT 0
32102: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32103: LD_VAR 0 1
32107: PPUSH
32108: LD_VAR 0 2
32112: PPUSH
32113: LD_VAR 0 3
32117: PPUSH
32118: LD_INT 1
32120: PPUSH
32121: LD_INT 1
32123: PPUSH
32124: CALL_OW 483
// CenterOnXY ( x , y ) ;
32128: LD_VAR 0 2
32132: PPUSH
32133: LD_VAR 0 3
32137: PPUSH
32138: CALL_OW 84
// end ;
32142: LD_VAR 0 4
32146: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
32147: LD_INT 0
32149: PPUSH
32150: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
32151: LD_VAR 0 1
32155: NOT
32156: PUSH
32157: LD_VAR 0 2
32161: PPUSH
32162: LD_VAR 0 3
32166: PPUSH
32167: CALL_OW 488
32171: NOT
32172: OR
32173: PUSH
32174: LD_VAR 0 1
32178: PPUSH
32179: CALL_OW 266
32183: PUSH
32184: LD_INT 3
32186: NONEQUAL
32187: PUSH
32188: LD_VAR 0 1
32192: PPUSH
32193: CALL_OW 247
32197: PUSH
32198: LD_INT 1
32200: EQUAL
32201: NOT
32202: AND
32203: OR
32204: IFFALSE 32208
// exit ;
32206: GO 32357
// if GetType ( factory ) = unit_human then
32208: LD_VAR 0 1
32212: PPUSH
32213: CALL_OW 247
32217: PUSH
32218: LD_INT 1
32220: EQUAL
32221: IFFALSE 32238
// factory := IsInUnit ( factory ) ;
32223: LD_ADDR_VAR 0 1
32227: PUSH
32228: LD_VAR 0 1
32232: PPUSH
32233: CALL_OW 310
32237: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
32238: LD_VAR 0 1
32242: PPUSH
32243: CALL_OW 266
32247: PUSH
32248: LD_INT 3
32250: NONEQUAL
32251: IFFALSE 32255
// exit ;
32253: GO 32357
// if HexInfo ( x , y ) = factory then
32255: LD_VAR 0 2
32259: PPUSH
32260: LD_VAR 0 3
32264: PPUSH
32265: CALL_OW 428
32269: PUSH
32270: LD_VAR 0 1
32274: EQUAL
32275: IFFALSE 32302
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
32277: LD_ADDR_EXP 111
32281: PUSH
32282: LD_EXP 111
32286: PPUSH
32287: LD_VAR 0 1
32291: PPUSH
32292: LD_INT 0
32294: PPUSH
32295: CALL_OW 1
32299: ST_TO_ADDR
32300: GO 32353
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
32302: LD_ADDR_EXP 111
32306: PUSH
32307: LD_EXP 111
32311: PPUSH
32312: LD_VAR 0 1
32316: PPUSH
32317: LD_VAR 0 1
32321: PPUSH
32322: CALL_OW 255
32326: PUSH
32327: LD_VAR 0 1
32331: PUSH
32332: LD_VAR 0 2
32336: PUSH
32337: LD_VAR 0 3
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: PPUSH
32348: CALL_OW 1
32352: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32353: CALL 32362 0 0
// end ;
32357: LD_VAR 0 4
32361: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
32362: LD_INT 0
32364: PPUSH
32365: PPUSH
32366: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
32367: LD_STRING resetFactoryWaypoint();
32369: PPUSH
32370: CALL_OW 559
// if factoryWaypoints then
32374: LD_EXP 111
32378: IFFALSE 32504
// begin list := PrepareArray ( factoryWaypoints ) ;
32380: LD_ADDR_VAR 0 3
32384: PUSH
32385: LD_EXP 111
32389: PPUSH
32390: CALL 79136 0 1
32394: ST_TO_ADDR
// for i := 1 to list do
32395: LD_ADDR_VAR 0 2
32399: PUSH
32400: DOUBLE
32401: LD_INT 1
32403: DEC
32404: ST_TO_ADDR
32405: LD_VAR 0 3
32409: PUSH
32410: FOR_TO
32411: IFFALSE 32502
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32413: LD_STRING setFactoryWaypointXY(
32415: PUSH
32416: LD_VAR 0 3
32420: PUSH
32421: LD_VAR 0 2
32425: ARRAY
32426: PUSH
32427: LD_INT 1
32429: ARRAY
32430: STR
32431: PUSH
32432: LD_STRING ,
32434: STR
32435: PUSH
32436: LD_VAR 0 3
32440: PUSH
32441: LD_VAR 0 2
32445: ARRAY
32446: PUSH
32447: LD_INT 2
32449: ARRAY
32450: STR
32451: PUSH
32452: LD_STRING ,
32454: STR
32455: PUSH
32456: LD_VAR 0 3
32460: PUSH
32461: LD_VAR 0 2
32465: ARRAY
32466: PUSH
32467: LD_INT 3
32469: ARRAY
32470: STR
32471: PUSH
32472: LD_STRING ,
32474: STR
32475: PUSH
32476: LD_VAR 0 3
32480: PUSH
32481: LD_VAR 0 2
32485: ARRAY
32486: PUSH
32487: LD_INT 4
32489: ARRAY
32490: STR
32491: PUSH
32492: LD_STRING )
32494: STR
32495: PPUSH
32496: CALL_OW 559
32500: GO 32410
32502: POP
32503: POP
// end ; end ;
32504: LD_VAR 0 1
32508: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
32509: LD_INT 0
32511: PPUSH
// if HexInfo ( x , y ) = warehouse then
32512: LD_VAR 0 2
32516: PPUSH
32517: LD_VAR 0 3
32521: PPUSH
32522: CALL_OW 428
32526: PUSH
32527: LD_VAR 0 1
32531: EQUAL
32532: IFFALSE 32559
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
32534: LD_ADDR_EXP 112
32538: PUSH
32539: LD_EXP 112
32543: PPUSH
32544: LD_VAR 0 1
32548: PPUSH
32549: LD_INT 0
32551: PPUSH
32552: CALL_OW 1
32556: ST_TO_ADDR
32557: GO 32610
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
32559: LD_ADDR_EXP 112
32563: PUSH
32564: LD_EXP 112
32568: PPUSH
32569: LD_VAR 0 1
32573: PPUSH
32574: LD_VAR 0 1
32578: PPUSH
32579: CALL_OW 255
32583: PUSH
32584: LD_VAR 0 1
32588: PUSH
32589: LD_VAR 0 2
32593: PUSH
32594: LD_VAR 0 3
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: PPUSH
32605: CALL_OW 1
32609: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
32610: CALL 32619 0 0
// end ;
32614: LD_VAR 0 4
32618: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
32619: LD_INT 0
32621: PPUSH
32622: PPUSH
32623: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
32624: LD_STRING resetWarehouseGatheringPoints();
32626: PPUSH
32627: CALL_OW 559
// if warehouseGatheringPoints then
32631: LD_EXP 112
32635: IFFALSE 32761
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
32637: LD_ADDR_VAR 0 3
32641: PUSH
32642: LD_EXP 112
32646: PPUSH
32647: CALL 79136 0 1
32651: ST_TO_ADDR
// for i := 1 to list do
32652: LD_ADDR_VAR 0 2
32656: PUSH
32657: DOUBLE
32658: LD_INT 1
32660: DEC
32661: ST_TO_ADDR
32662: LD_VAR 0 3
32666: PUSH
32667: FOR_TO
32668: IFFALSE 32759
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32670: LD_STRING setWarehouseGatheringPointXY(
32672: PUSH
32673: LD_VAR 0 3
32677: PUSH
32678: LD_VAR 0 2
32682: ARRAY
32683: PUSH
32684: LD_INT 1
32686: ARRAY
32687: STR
32688: PUSH
32689: LD_STRING ,
32691: STR
32692: PUSH
32693: LD_VAR 0 3
32697: PUSH
32698: LD_VAR 0 2
32702: ARRAY
32703: PUSH
32704: LD_INT 2
32706: ARRAY
32707: STR
32708: PUSH
32709: LD_STRING ,
32711: STR
32712: PUSH
32713: LD_VAR 0 3
32717: PUSH
32718: LD_VAR 0 2
32722: ARRAY
32723: PUSH
32724: LD_INT 3
32726: ARRAY
32727: STR
32728: PUSH
32729: LD_STRING ,
32731: STR
32732: PUSH
32733: LD_VAR 0 3
32737: PUSH
32738: LD_VAR 0 2
32742: ARRAY
32743: PUSH
32744: LD_INT 4
32746: ARRAY
32747: STR
32748: PUSH
32749: LD_STRING )
32751: STR
32752: PPUSH
32753: CALL_OW 559
32757: GO 32667
32759: POP
32760: POP
// end ; end ;
32761: LD_VAR 0 1
32765: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
32766: LD_EXP 112
32770: IFFALSE 33455
32772: GO 32774
32774: DISABLE
32775: LD_INT 0
32777: PPUSH
32778: PPUSH
32779: PPUSH
32780: PPUSH
32781: PPUSH
32782: PPUSH
32783: PPUSH
32784: PPUSH
32785: PPUSH
// begin enable ;
32786: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
32787: LD_ADDR_VAR 0 3
32791: PUSH
32792: LD_EXP 112
32796: PPUSH
32797: CALL 79136 0 1
32801: ST_TO_ADDR
// if not list then
32802: LD_VAR 0 3
32806: NOT
32807: IFFALSE 32811
// exit ;
32809: GO 33455
// for i := 1 to list do
32811: LD_ADDR_VAR 0 1
32815: PUSH
32816: DOUBLE
32817: LD_INT 1
32819: DEC
32820: ST_TO_ADDR
32821: LD_VAR 0 3
32825: PUSH
32826: FOR_TO
32827: IFFALSE 33453
// begin depot := list [ i ] [ 2 ] ;
32829: LD_ADDR_VAR 0 8
32833: PUSH
32834: LD_VAR 0 3
32838: PUSH
32839: LD_VAR 0 1
32843: ARRAY
32844: PUSH
32845: LD_INT 2
32847: ARRAY
32848: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
32849: LD_ADDR_VAR 0 5
32853: PUSH
32854: LD_VAR 0 3
32858: PUSH
32859: LD_VAR 0 1
32863: ARRAY
32864: PUSH
32865: LD_INT 1
32867: ARRAY
32868: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
32869: LD_VAR 0 8
32873: PPUSH
32874: CALL_OW 301
32878: PUSH
32879: LD_VAR 0 5
32883: PUSH
32884: LD_VAR 0 8
32888: PPUSH
32889: CALL_OW 255
32893: NONEQUAL
32894: OR
32895: IFFALSE 32924
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
32897: LD_ADDR_EXP 112
32901: PUSH
32902: LD_EXP 112
32906: PPUSH
32907: LD_VAR 0 8
32911: PPUSH
32912: LD_INT 0
32914: PPUSH
32915: CALL_OW 1
32919: ST_TO_ADDR
// exit ;
32920: POP
32921: POP
32922: GO 33455
// end ; x := list [ i ] [ 3 ] ;
32924: LD_ADDR_VAR 0 6
32928: PUSH
32929: LD_VAR 0 3
32933: PUSH
32934: LD_VAR 0 1
32938: ARRAY
32939: PUSH
32940: LD_INT 3
32942: ARRAY
32943: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
32944: LD_ADDR_VAR 0 7
32948: PUSH
32949: LD_VAR 0 3
32953: PUSH
32954: LD_VAR 0 1
32958: ARRAY
32959: PUSH
32960: LD_INT 4
32962: ARRAY
32963: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
32964: LD_ADDR_VAR 0 9
32968: PUSH
32969: LD_VAR 0 6
32973: PPUSH
32974: LD_VAR 0 7
32978: PPUSH
32979: LD_INT 16
32981: PPUSH
32982: CALL 77724 0 3
32986: ST_TO_ADDR
// if not cratesNearbyPoint then
32987: LD_VAR 0 9
32991: NOT
32992: IFFALSE 32998
// exit ;
32994: POP
32995: POP
32996: GO 33455
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
32998: LD_ADDR_VAR 0 4
33002: PUSH
33003: LD_INT 22
33005: PUSH
33006: LD_VAR 0 5
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 3
33017: PUSH
33018: LD_INT 60
33020: PUSH
33021: EMPTY
33022: LIST
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 91
33030: PUSH
33031: LD_VAR 0 8
33035: PUSH
33036: LD_INT 6
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 2
33046: PUSH
33047: LD_INT 25
33049: PUSH
33050: LD_INT 2
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 25
33059: PUSH
33060: LD_INT 16
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: LIST
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: PPUSH
33078: CALL_OW 69
33082: PUSH
33083: LD_VAR 0 8
33087: PPUSH
33088: CALL_OW 313
33092: PPUSH
33093: LD_INT 3
33095: PUSH
33096: LD_INT 60
33098: PUSH
33099: EMPTY
33100: LIST
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 2
33108: PUSH
33109: LD_INT 25
33111: PUSH
33112: LD_INT 2
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 25
33121: PUSH
33122: LD_INT 16
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: LIST
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PPUSH
33138: CALL_OW 72
33142: UNION
33143: ST_TO_ADDR
// if tmp then
33144: LD_VAR 0 4
33148: IFFALSE 33228
// begin tmp := ShrinkArray ( tmp , 3 ) ;
33150: LD_ADDR_VAR 0 4
33154: PUSH
33155: LD_VAR 0 4
33159: PPUSH
33160: LD_INT 3
33162: PPUSH
33163: CALL 75693 0 2
33167: ST_TO_ADDR
// for j in tmp do
33168: LD_ADDR_VAR 0 2
33172: PUSH
33173: LD_VAR 0 4
33177: PUSH
33178: FOR_IN
33179: IFFALSE 33222
// begin if IsInUnit ( j ) then
33181: LD_VAR 0 2
33185: PPUSH
33186: CALL_OW 310
33190: IFFALSE 33201
// ComExit ( j ) ;
33192: LD_VAR 0 2
33196: PPUSH
33197: CALL 75776 0 1
// AddComCollect ( j , x , y ) ;
33201: LD_VAR 0 2
33205: PPUSH
33206: LD_VAR 0 6
33210: PPUSH
33211: LD_VAR 0 7
33215: PPUSH
33216: CALL_OW 177
// end ;
33220: GO 33178
33222: POP
33223: POP
// exit ;
33224: POP
33225: POP
33226: GO 33455
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
33228: LD_ADDR_VAR 0 4
33232: PUSH
33233: LD_INT 22
33235: PUSH
33236: LD_VAR 0 5
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 91
33247: PUSH
33248: LD_VAR 0 8
33252: PUSH
33253: LD_INT 8
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 2
33263: PUSH
33264: LD_INT 34
33266: PUSH
33267: LD_INT 12
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 34
33276: PUSH
33277: LD_INT 51
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PUSH
33284: LD_INT 34
33286: PUSH
33287: LD_INT 32
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 34
33296: PUSH
33297: LD_INT 89
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: LIST
33315: PPUSH
33316: CALL_OW 69
33320: ST_TO_ADDR
// if tmp then
33321: LD_VAR 0 4
33325: IFFALSE 33451
// begin for j in tmp do
33327: LD_ADDR_VAR 0 2
33331: PUSH
33332: LD_VAR 0 4
33336: PUSH
33337: FOR_IN
33338: IFFALSE 33449
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
33340: LD_VAR 0 2
33344: PPUSH
33345: CALL_OW 262
33349: PUSH
33350: LD_INT 3
33352: EQUAL
33353: PUSH
33354: LD_VAR 0 2
33358: PPUSH
33359: CALL_OW 261
33363: PUSH
33364: LD_INT 20
33366: GREATER
33367: OR
33368: PUSH
33369: LD_VAR 0 2
33373: PPUSH
33374: CALL_OW 314
33378: NOT
33379: AND
33380: PUSH
33381: LD_VAR 0 2
33385: PPUSH
33386: CALL_OW 263
33390: PUSH
33391: LD_INT 1
33393: NONEQUAL
33394: PUSH
33395: LD_VAR 0 2
33399: PPUSH
33400: CALL_OW 311
33404: OR
33405: AND
33406: IFFALSE 33447
// begin ComCollect ( j , x , y ) ;
33408: LD_VAR 0 2
33412: PPUSH
33413: LD_VAR 0 6
33417: PPUSH
33418: LD_VAR 0 7
33422: PPUSH
33423: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
33427: LD_VAR 0 2
33431: PPUSH
33432: LD_VAR 0 8
33436: PPUSH
33437: CALL_OW 172
// exit ;
33441: POP
33442: POP
33443: POP
33444: POP
33445: GO 33455
// end ;
33447: GO 33337
33449: POP
33450: POP
// end ; end ;
33451: GO 32826
33453: POP
33454: POP
// end ; end_of_file
33455: PPOPN 9
33457: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
33458: LD_VAR 0 1
33462: PUSH
33463: LD_INT 200
33465: DOUBLE
33466: GREATEREQUAL
33467: IFFALSE 33475
33469: LD_INT 299
33471: DOUBLE
33472: LESSEQUAL
33473: IFTRUE 33477
33475: GO 33509
33477: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
33478: LD_VAR 0 1
33482: PPUSH
33483: LD_VAR 0 2
33487: PPUSH
33488: LD_VAR 0 3
33492: PPUSH
33493: LD_VAR 0 4
33497: PPUSH
33498: LD_VAR 0 5
33502: PPUSH
33503: CALL 33997 0 5
33507: GO 33586
33509: LD_INT 300
33511: DOUBLE
33512: GREATEREQUAL
33513: IFFALSE 33521
33515: LD_INT 399
33517: DOUBLE
33518: LESSEQUAL
33519: IFTRUE 33523
33521: GO 33585
33523: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
33524: LD_VAR 0 1
33528: PPUSH
33529: LD_VAR 0 2
33533: PPUSH
33534: LD_VAR 0 3
33538: PPUSH
33539: LD_VAR 0 4
33543: PPUSH
33544: LD_VAR 0 5
33548: PPUSH
33549: LD_VAR 0 6
33553: PPUSH
33554: LD_VAR 0 7
33558: PPUSH
33559: LD_VAR 0 8
33563: PPUSH
33564: LD_VAR 0 9
33568: PPUSH
33569: LD_VAR 0 10
33573: PPUSH
33574: LD_VAR 0 11
33578: PPUSH
33579: CALL 30167 0 11
33583: GO 33586
33585: POP
// end ;
33586: PPOPN 11
33588: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
33589: LD_VAR 0 1
33593: PPUSH
33594: LD_VAR 0 2
33598: PPUSH
33599: LD_VAR 0 3
33603: PPUSH
33604: LD_VAR 0 4
33608: PPUSH
33609: LD_VAR 0 5
33613: PPUSH
33614: CALL 33733 0 5
// end ; end_of_file
33618: PPOPN 5
33620: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33621: LD_INT 0
33623: PPUSH
33624: PPUSH
33625: PPUSH
33626: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33627: LD_VAR 0 1
33631: PPUSH
33632: CALL_OW 264
33636: PUSH
33637: LD_INT 91
33639: EQUAL
33640: IFFALSE 33712
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33642: LD_INT 68
33644: PPUSH
33645: LD_VAR 0 1
33649: PPUSH
33650: CALL_OW 255
33654: PPUSH
33655: CALL_OW 321
33659: PUSH
33660: LD_INT 2
33662: EQUAL
33663: IFFALSE 33675
// eff := 70 else
33665: LD_ADDR_VAR 0 4
33669: PUSH
33670: LD_INT 70
33672: ST_TO_ADDR
33673: GO 33683
// eff := 30 ;
33675: LD_ADDR_VAR 0 4
33679: PUSH
33680: LD_INT 30
33682: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33683: LD_VAR 0 1
33687: PPUSH
33688: CALL_OW 250
33692: PPUSH
33693: LD_VAR 0 1
33697: PPUSH
33698: CALL_OW 251
33702: PPUSH
33703: LD_VAR 0 4
33707: PPUSH
33708: CALL_OW 495
// end ; end ;
33712: LD_VAR 0 2
33716: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33717: LD_INT 0
33719: PPUSH
// end ;
33720: LD_VAR 0 4
33724: RET
// export function SOS_Command ( cmd ) ; begin
33725: LD_INT 0
33727: PPUSH
// end ;
33728: LD_VAR 0 2
33732: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33733: LD_INT 0
33735: PPUSH
// end ;
33736: LD_VAR 0 6
33740: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
33741: LD_INT 0
33743: PPUSH
33744: PPUSH
// if not vehicle or not factory then
33745: LD_VAR 0 1
33749: NOT
33750: PUSH
33751: LD_VAR 0 2
33755: NOT
33756: OR
33757: IFFALSE 33761
// exit ;
33759: GO 33992
// if factoryWaypoints >= factory then
33761: LD_EXP 111
33765: PUSH
33766: LD_VAR 0 2
33770: GREATEREQUAL
33771: IFFALSE 33992
// if factoryWaypoints [ factory ] then
33773: LD_EXP 111
33777: PUSH
33778: LD_VAR 0 2
33782: ARRAY
33783: IFFALSE 33992
// begin if GetControl ( vehicle ) = control_manual then
33785: LD_VAR 0 1
33789: PPUSH
33790: CALL_OW 263
33794: PUSH
33795: LD_INT 1
33797: EQUAL
33798: IFFALSE 33879
// begin driver := IsDrivenBy ( vehicle ) ;
33800: LD_ADDR_VAR 0 4
33804: PUSH
33805: LD_VAR 0 1
33809: PPUSH
33810: CALL_OW 311
33814: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33815: LD_VAR 0 4
33819: PPUSH
33820: LD_EXP 111
33824: PUSH
33825: LD_VAR 0 2
33829: ARRAY
33830: PUSH
33831: LD_INT 3
33833: ARRAY
33834: PPUSH
33835: LD_EXP 111
33839: PUSH
33840: LD_VAR 0 2
33844: ARRAY
33845: PUSH
33846: LD_INT 4
33848: ARRAY
33849: PPUSH
33850: CALL_OW 171
// AddComExitVehicle ( driver ) ;
33854: LD_VAR 0 4
33858: PPUSH
33859: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
33863: LD_VAR 0 4
33867: PPUSH
33868: LD_VAR 0 2
33872: PPUSH
33873: CALL_OW 180
// end else
33877: GO 33992
// if GetControl ( vehicle ) = control_remote then
33879: LD_VAR 0 1
33883: PPUSH
33884: CALL_OW 263
33888: PUSH
33889: LD_INT 2
33891: EQUAL
33892: IFFALSE 33953
// begin wait ( 0 0$2 ) ;
33894: LD_INT 70
33896: PPUSH
33897: CALL_OW 67
// if Connect ( vehicle ) then
33901: LD_VAR 0 1
33905: PPUSH
33906: CALL 46016 0 1
33910: IFFALSE 33951
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33912: LD_VAR 0 1
33916: PPUSH
33917: LD_EXP 111
33921: PUSH
33922: LD_VAR 0 2
33926: ARRAY
33927: PUSH
33928: LD_INT 3
33930: ARRAY
33931: PPUSH
33932: LD_EXP 111
33936: PUSH
33937: LD_VAR 0 2
33941: ARRAY
33942: PUSH
33943: LD_INT 4
33945: ARRAY
33946: PPUSH
33947: CALL_OW 171
// end else
33951: GO 33992
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33953: LD_VAR 0 1
33957: PPUSH
33958: LD_EXP 111
33962: PUSH
33963: LD_VAR 0 2
33967: ARRAY
33968: PUSH
33969: LD_INT 3
33971: ARRAY
33972: PPUSH
33973: LD_EXP 111
33977: PUSH
33978: LD_VAR 0 2
33982: ARRAY
33983: PUSH
33984: LD_INT 4
33986: ARRAY
33987: PPUSH
33988: CALL_OW 171
// end ; end ;
33992: LD_VAR 0 3
33996: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33997: LD_INT 0
33999: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34000: LD_VAR 0 1
34004: PUSH
34005: LD_INT 250
34007: EQUAL
34008: PUSH
34009: LD_VAR 0 2
34013: PPUSH
34014: CALL_OW 264
34018: PUSH
34019: LD_INT 81
34021: EQUAL
34022: AND
34023: IFFALSE 34044
// MinerPlaceMine ( unit , x , y ) ;
34025: LD_VAR 0 2
34029: PPUSH
34030: LD_VAR 0 4
34034: PPUSH
34035: LD_VAR 0 5
34039: PPUSH
34040: CALL 36429 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34044: LD_VAR 0 1
34048: PUSH
34049: LD_INT 251
34051: EQUAL
34052: PUSH
34053: LD_VAR 0 2
34057: PPUSH
34058: CALL_OW 264
34062: PUSH
34063: LD_INT 81
34065: EQUAL
34066: AND
34067: IFFALSE 34088
// MinerDetonateMine ( unit , x , y ) ;
34069: LD_VAR 0 2
34073: PPUSH
34074: LD_VAR 0 4
34078: PPUSH
34079: LD_VAR 0 5
34083: PPUSH
34084: CALL 36704 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34088: LD_VAR 0 1
34092: PUSH
34093: LD_INT 252
34095: EQUAL
34096: PUSH
34097: LD_VAR 0 2
34101: PPUSH
34102: CALL_OW 264
34106: PUSH
34107: LD_INT 81
34109: EQUAL
34110: AND
34111: IFFALSE 34132
// MinerCreateMinefield ( unit , x , y ) ;
34113: LD_VAR 0 2
34117: PPUSH
34118: LD_VAR 0 4
34122: PPUSH
34123: LD_VAR 0 5
34127: PPUSH
34128: CALL 37121 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34132: LD_VAR 0 1
34136: PUSH
34137: LD_INT 253
34139: EQUAL
34140: PUSH
34141: LD_VAR 0 2
34145: PPUSH
34146: CALL_OW 257
34150: PUSH
34151: LD_INT 5
34153: EQUAL
34154: AND
34155: IFFALSE 34176
// ComBinocular ( unit , x , y ) ;
34157: LD_VAR 0 2
34161: PPUSH
34162: LD_VAR 0 4
34166: PPUSH
34167: LD_VAR 0 5
34171: PPUSH
34172: CALL 37490 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34176: LD_VAR 0 1
34180: PUSH
34181: LD_INT 254
34183: EQUAL
34184: PUSH
34185: LD_VAR 0 2
34189: PPUSH
34190: CALL_OW 264
34194: PUSH
34195: LD_INT 99
34197: EQUAL
34198: AND
34199: PUSH
34200: LD_VAR 0 3
34204: PPUSH
34205: CALL_OW 263
34209: PUSH
34210: LD_INT 3
34212: EQUAL
34213: AND
34214: IFFALSE 34230
// HackDestroyVehicle ( unit , selectedUnit ) ;
34216: LD_VAR 0 2
34220: PPUSH
34221: LD_VAR 0 3
34225: PPUSH
34226: CALL 35793 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34230: LD_VAR 0 1
34234: PUSH
34235: LD_INT 255
34237: EQUAL
34238: PUSH
34239: LD_VAR 0 2
34243: PPUSH
34244: CALL_OW 264
34248: PUSH
34249: LD_INT 14
34251: PUSH
34252: LD_INT 53
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: IN
34259: AND
34260: PUSH
34261: LD_VAR 0 4
34265: PPUSH
34266: LD_VAR 0 5
34270: PPUSH
34271: CALL_OW 488
34275: AND
34276: IFFALSE 34300
// CutTreeXYR ( unit , x , y , 12 ) ;
34278: LD_VAR 0 2
34282: PPUSH
34283: LD_VAR 0 4
34287: PPUSH
34288: LD_VAR 0 5
34292: PPUSH
34293: LD_INT 12
34295: PPUSH
34296: CALL 34363 0 4
// if cmd = 256 then
34300: LD_VAR 0 1
34304: PUSH
34305: LD_INT 256
34307: EQUAL
34308: IFFALSE 34329
// SetFactoryWaypoint ( unit , x , y ) ;
34310: LD_VAR 0 2
34314: PPUSH
34315: LD_VAR 0 4
34319: PPUSH
34320: LD_VAR 0 5
34324: PPUSH
34325: CALL 32147 0 3
// if cmd = 257 then
34329: LD_VAR 0 1
34333: PUSH
34334: LD_INT 257
34336: EQUAL
34337: IFFALSE 34358
// SetWarehouseGatheringPoint ( unit , x , y ) ;
34339: LD_VAR 0 2
34343: PPUSH
34344: LD_VAR 0 4
34348: PPUSH
34349: LD_VAR 0 5
34353: PPUSH
34354: CALL 32509 0 3
// end ;
34358: LD_VAR 0 6
34362: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34363: LD_INT 0
34365: PPUSH
34366: PPUSH
34367: PPUSH
34368: PPUSH
34369: PPUSH
34370: PPUSH
34371: PPUSH
34372: PPUSH
34373: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
34374: LD_VAR 0 1
34378: NOT
34379: PUSH
34380: LD_VAR 0 2
34384: PPUSH
34385: LD_VAR 0 3
34389: PPUSH
34390: CALL_OW 488
34394: NOT
34395: OR
34396: PUSH
34397: LD_VAR 0 4
34401: NOT
34402: OR
34403: IFFALSE 34407
// exit ;
34405: GO 34747
// list := [ ] ;
34407: LD_ADDR_VAR 0 13
34411: PUSH
34412: EMPTY
34413: ST_TO_ADDR
// if x - r < 0 then
34414: LD_VAR 0 2
34418: PUSH
34419: LD_VAR 0 4
34423: MINUS
34424: PUSH
34425: LD_INT 0
34427: LESS
34428: IFFALSE 34440
// min_x := 0 else
34430: LD_ADDR_VAR 0 7
34434: PUSH
34435: LD_INT 0
34437: ST_TO_ADDR
34438: GO 34456
// min_x := x - r ;
34440: LD_ADDR_VAR 0 7
34444: PUSH
34445: LD_VAR 0 2
34449: PUSH
34450: LD_VAR 0 4
34454: MINUS
34455: ST_TO_ADDR
// if y - r < 0 then
34456: LD_VAR 0 3
34460: PUSH
34461: LD_VAR 0 4
34465: MINUS
34466: PUSH
34467: LD_INT 0
34469: LESS
34470: IFFALSE 34482
// min_y := 0 else
34472: LD_ADDR_VAR 0 8
34476: PUSH
34477: LD_INT 0
34479: ST_TO_ADDR
34480: GO 34498
// min_y := y - r ;
34482: LD_ADDR_VAR 0 8
34486: PUSH
34487: LD_VAR 0 3
34491: PUSH
34492: LD_VAR 0 4
34496: MINUS
34497: ST_TO_ADDR
// max_x := x + r ;
34498: LD_ADDR_VAR 0 9
34502: PUSH
34503: LD_VAR 0 2
34507: PUSH
34508: LD_VAR 0 4
34512: PLUS
34513: ST_TO_ADDR
// max_y := y + r ;
34514: LD_ADDR_VAR 0 10
34518: PUSH
34519: LD_VAR 0 3
34523: PUSH
34524: LD_VAR 0 4
34528: PLUS
34529: ST_TO_ADDR
// for _x = min_x to max_x do
34530: LD_ADDR_VAR 0 11
34534: PUSH
34535: DOUBLE
34536: LD_VAR 0 7
34540: DEC
34541: ST_TO_ADDR
34542: LD_VAR 0 9
34546: PUSH
34547: FOR_TO
34548: IFFALSE 34665
// for _y = min_y to max_y do
34550: LD_ADDR_VAR 0 12
34554: PUSH
34555: DOUBLE
34556: LD_VAR 0 8
34560: DEC
34561: ST_TO_ADDR
34562: LD_VAR 0 10
34566: PUSH
34567: FOR_TO
34568: IFFALSE 34661
// begin if not ValidHex ( _x , _y ) then
34570: LD_VAR 0 11
34574: PPUSH
34575: LD_VAR 0 12
34579: PPUSH
34580: CALL_OW 488
34584: NOT
34585: IFFALSE 34589
// continue ;
34587: GO 34567
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34589: LD_VAR 0 11
34593: PPUSH
34594: LD_VAR 0 12
34598: PPUSH
34599: CALL_OW 351
34603: PUSH
34604: LD_VAR 0 11
34608: PPUSH
34609: LD_VAR 0 12
34613: PPUSH
34614: CALL_OW 554
34618: AND
34619: IFFALSE 34659
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34621: LD_ADDR_VAR 0 13
34625: PUSH
34626: LD_VAR 0 13
34630: PPUSH
34631: LD_VAR 0 13
34635: PUSH
34636: LD_INT 1
34638: PLUS
34639: PPUSH
34640: LD_VAR 0 11
34644: PUSH
34645: LD_VAR 0 12
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PPUSH
34654: CALL_OW 2
34658: ST_TO_ADDR
// end ;
34659: GO 34567
34661: POP
34662: POP
34663: GO 34547
34665: POP
34666: POP
// if not list then
34667: LD_VAR 0 13
34671: NOT
34672: IFFALSE 34676
// exit ;
34674: GO 34747
// for i in list do
34676: LD_ADDR_VAR 0 6
34680: PUSH
34681: LD_VAR 0 13
34685: PUSH
34686: FOR_IN
34687: IFFALSE 34745
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34689: LD_VAR 0 1
34693: PPUSH
34694: LD_STRING M
34696: PUSH
34697: LD_VAR 0 6
34701: PUSH
34702: LD_INT 1
34704: ARRAY
34705: PUSH
34706: LD_VAR 0 6
34710: PUSH
34711: LD_INT 2
34713: ARRAY
34714: PUSH
34715: LD_INT 0
34717: PUSH
34718: LD_INT 0
34720: PUSH
34721: LD_INT 0
34723: PUSH
34724: LD_INT 0
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: PUSH
34736: EMPTY
34737: LIST
34738: PPUSH
34739: CALL_OW 447
34743: GO 34686
34745: POP
34746: POP
// end ;
34747: LD_VAR 0 5
34751: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34752: LD_EXP 114
34756: NOT
34757: IFFALSE 34807
34759: GO 34761
34761: DISABLE
// begin initHack := true ;
34762: LD_ADDR_EXP 114
34766: PUSH
34767: LD_INT 1
34769: ST_TO_ADDR
// hackTanks := [ ] ;
34770: LD_ADDR_EXP 115
34774: PUSH
34775: EMPTY
34776: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34777: LD_ADDR_EXP 116
34781: PUSH
34782: EMPTY
34783: ST_TO_ADDR
// hackLimit := 3 ;
34784: LD_ADDR_EXP 117
34788: PUSH
34789: LD_INT 3
34791: ST_TO_ADDR
// hackDist := 12 ;
34792: LD_ADDR_EXP 118
34796: PUSH
34797: LD_INT 12
34799: ST_TO_ADDR
// hackCounter := [ ] ;
34800: LD_ADDR_EXP 119
34804: PUSH
34805: EMPTY
34806: ST_TO_ADDR
// end ;
34807: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34808: LD_EXP 114
34812: PUSH
34813: LD_INT 34
34815: PUSH
34816: LD_INT 99
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PPUSH
34823: CALL_OW 69
34827: AND
34828: IFFALSE 35081
34830: GO 34832
34832: DISABLE
34833: LD_INT 0
34835: PPUSH
34836: PPUSH
// begin enable ;
34837: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34838: LD_ADDR_VAR 0 1
34842: PUSH
34843: LD_INT 34
34845: PUSH
34846: LD_INT 99
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PPUSH
34853: CALL_OW 69
34857: PUSH
34858: FOR_IN
34859: IFFALSE 35079
// begin if not i in hackTanks then
34861: LD_VAR 0 1
34865: PUSH
34866: LD_EXP 115
34870: IN
34871: NOT
34872: IFFALSE 34955
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34874: LD_ADDR_EXP 115
34878: PUSH
34879: LD_EXP 115
34883: PPUSH
34884: LD_EXP 115
34888: PUSH
34889: LD_INT 1
34891: PLUS
34892: PPUSH
34893: LD_VAR 0 1
34897: PPUSH
34898: CALL_OW 1
34902: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34903: LD_ADDR_EXP 116
34907: PUSH
34908: LD_EXP 116
34912: PPUSH
34913: LD_EXP 116
34917: PUSH
34918: LD_INT 1
34920: PLUS
34921: PPUSH
34922: EMPTY
34923: PPUSH
34924: CALL_OW 1
34928: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34929: LD_ADDR_EXP 119
34933: PUSH
34934: LD_EXP 119
34938: PPUSH
34939: LD_EXP 119
34943: PUSH
34944: LD_INT 1
34946: PLUS
34947: PPUSH
34948: EMPTY
34949: PPUSH
34950: CALL_OW 1
34954: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34955: LD_VAR 0 1
34959: PPUSH
34960: CALL_OW 302
34964: NOT
34965: IFFALSE 34978
// begin HackUnlinkAll ( i ) ;
34967: LD_VAR 0 1
34971: PPUSH
34972: CALL 35084 0 1
// continue ;
34976: GO 34858
// end ; HackCheckCapturedStatus ( i ) ;
34978: LD_VAR 0 1
34982: PPUSH
34983: CALL 35527 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34987: LD_ADDR_VAR 0 2
34991: PUSH
34992: LD_INT 81
34994: PUSH
34995: LD_VAR 0 1
34999: PPUSH
35000: CALL_OW 255
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 33
35011: PUSH
35012: LD_INT 3
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 91
35021: PUSH
35022: LD_VAR 0 1
35026: PUSH
35027: LD_EXP 118
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: LIST
35036: PUSH
35037: LD_INT 50
35039: PUSH
35040: EMPTY
35041: LIST
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: PPUSH
35049: CALL_OW 69
35053: ST_TO_ADDR
// if not tmp then
35054: LD_VAR 0 2
35058: NOT
35059: IFFALSE 35063
// continue ;
35061: GO 34858
// HackLink ( i , tmp ) ;
35063: LD_VAR 0 1
35067: PPUSH
35068: LD_VAR 0 2
35072: PPUSH
35073: CALL 35220 0 2
// end ;
35077: GO 34858
35079: POP
35080: POP
// end ;
35081: PPOPN 2
35083: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35084: LD_INT 0
35086: PPUSH
35087: PPUSH
35088: PPUSH
// if not hack in hackTanks then
35089: LD_VAR 0 1
35093: PUSH
35094: LD_EXP 115
35098: IN
35099: NOT
35100: IFFALSE 35104
// exit ;
35102: GO 35215
// index := GetElementIndex ( hackTanks , hack ) ;
35104: LD_ADDR_VAR 0 4
35108: PUSH
35109: LD_EXP 115
35113: PPUSH
35114: LD_VAR 0 1
35118: PPUSH
35119: CALL 42832 0 2
35123: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35124: LD_EXP 116
35128: PUSH
35129: LD_VAR 0 4
35133: ARRAY
35134: IFFALSE 35215
// begin for i in hackTanksCaptured [ index ] do
35136: LD_ADDR_VAR 0 3
35140: PUSH
35141: LD_EXP 116
35145: PUSH
35146: LD_VAR 0 4
35150: ARRAY
35151: PUSH
35152: FOR_IN
35153: IFFALSE 35179
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35155: LD_VAR 0 3
35159: PUSH
35160: LD_INT 1
35162: ARRAY
35163: PPUSH
35164: LD_VAR 0 3
35168: PUSH
35169: LD_INT 2
35171: ARRAY
35172: PPUSH
35173: CALL_OW 235
35177: GO 35152
35179: POP
35180: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35181: LD_ADDR_EXP 116
35185: PUSH
35186: LD_EXP 116
35190: PPUSH
35191: LD_VAR 0 4
35195: PPUSH
35196: EMPTY
35197: PPUSH
35198: CALL_OW 1
35202: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35203: LD_VAR 0 1
35207: PPUSH
35208: LD_INT 0
35210: PPUSH
35211: CALL_OW 505
// end ; end ;
35215: LD_VAR 0 2
35219: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35220: LD_INT 0
35222: PPUSH
35223: PPUSH
35224: PPUSH
// if not hack in hackTanks or not vehicles then
35225: LD_VAR 0 1
35229: PUSH
35230: LD_EXP 115
35234: IN
35235: NOT
35236: PUSH
35237: LD_VAR 0 2
35241: NOT
35242: OR
35243: IFFALSE 35247
// exit ;
35245: GO 35522
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35247: LD_ADDR_VAR 0 2
35251: PUSH
35252: LD_VAR 0 1
35256: PPUSH
35257: LD_VAR 0 2
35261: PPUSH
35262: LD_INT 1
35264: PPUSH
35265: LD_INT 1
35267: PPUSH
35268: CALL 43482 0 4
35272: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35273: LD_ADDR_VAR 0 5
35277: PUSH
35278: LD_EXP 115
35282: PPUSH
35283: LD_VAR 0 1
35287: PPUSH
35288: CALL 42832 0 2
35292: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35293: LD_EXP 116
35297: PUSH
35298: LD_VAR 0 5
35302: ARRAY
35303: PUSH
35304: LD_EXP 117
35308: LESS
35309: IFFALSE 35498
// begin for i := 1 to vehicles do
35311: LD_ADDR_VAR 0 4
35315: PUSH
35316: DOUBLE
35317: LD_INT 1
35319: DEC
35320: ST_TO_ADDR
35321: LD_VAR 0 2
35325: PUSH
35326: FOR_TO
35327: IFFALSE 35496
// begin if hackTanksCaptured [ index ] = hackLimit then
35329: LD_EXP 116
35333: PUSH
35334: LD_VAR 0 5
35338: ARRAY
35339: PUSH
35340: LD_EXP 117
35344: EQUAL
35345: IFFALSE 35349
// break ;
35347: GO 35496
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35349: LD_ADDR_EXP 119
35353: PUSH
35354: LD_EXP 119
35358: PPUSH
35359: LD_VAR 0 5
35363: PPUSH
35364: LD_EXP 119
35368: PUSH
35369: LD_VAR 0 5
35373: ARRAY
35374: PUSH
35375: LD_INT 1
35377: PLUS
35378: PPUSH
35379: CALL_OW 1
35383: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35384: LD_ADDR_EXP 116
35388: PUSH
35389: LD_EXP 116
35393: PPUSH
35394: LD_VAR 0 5
35398: PUSH
35399: LD_EXP 116
35403: PUSH
35404: LD_VAR 0 5
35408: ARRAY
35409: PUSH
35410: LD_INT 1
35412: PLUS
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PPUSH
35418: LD_VAR 0 2
35422: PUSH
35423: LD_VAR 0 4
35427: ARRAY
35428: PUSH
35429: LD_VAR 0 2
35433: PUSH
35434: LD_VAR 0 4
35438: ARRAY
35439: PPUSH
35440: CALL_OW 255
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PPUSH
35449: CALL 43047 0 3
35453: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35454: LD_VAR 0 2
35458: PUSH
35459: LD_VAR 0 4
35463: ARRAY
35464: PPUSH
35465: LD_VAR 0 1
35469: PPUSH
35470: CALL_OW 255
35474: PPUSH
35475: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35479: LD_VAR 0 2
35483: PUSH
35484: LD_VAR 0 4
35488: ARRAY
35489: PPUSH
35490: CALL_OW 141
// end ;
35494: GO 35326
35496: POP
35497: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35498: LD_VAR 0 1
35502: PPUSH
35503: LD_EXP 116
35507: PUSH
35508: LD_VAR 0 5
35512: ARRAY
35513: PUSH
35514: LD_INT 0
35516: PLUS
35517: PPUSH
35518: CALL_OW 505
// end ;
35522: LD_VAR 0 3
35526: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35527: LD_INT 0
35529: PPUSH
35530: PPUSH
35531: PPUSH
35532: PPUSH
// if not hack in hackTanks then
35533: LD_VAR 0 1
35537: PUSH
35538: LD_EXP 115
35542: IN
35543: NOT
35544: IFFALSE 35548
// exit ;
35546: GO 35788
// index := GetElementIndex ( hackTanks , hack ) ;
35548: LD_ADDR_VAR 0 4
35552: PUSH
35553: LD_EXP 115
35557: PPUSH
35558: LD_VAR 0 1
35562: PPUSH
35563: CALL 42832 0 2
35567: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35568: LD_ADDR_VAR 0 3
35572: PUSH
35573: DOUBLE
35574: LD_EXP 116
35578: PUSH
35579: LD_VAR 0 4
35583: ARRAY
35584: INC
35585: ST_TO_ADDR
35586: LD_INT 1
35588: PUSH
35589: FOR_DOWNTO
35590: IFFALSE 35762
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35592: LD_ADDR_VAR 0 5
35596: PUSH
35597: LD_EXP 116
35601: PUSH
35602: LD_VAR 0 4
35606: ARRAY
35607: PUSH
35608: LD_VAR 0 3
35612: ARRAY
35613: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35614: LD_VAR 0 5
35618: PUSH
35619: LD_INT 1
35621: ARRAY
35622: PPUSH
35623: CALL_OW 302
35627: NOT
35628: PUSH
35629: LD_VAR 0 5
35633: PUSH
35634: LD_INT 1
35636: ARRAY
35637: PPUSH
35638: CALL_OW 255
35642: PUSH
35643: LD_VAR 0 1
35647: PPUSH
35648: CALL_OW 255
35652: NONEQUAL
35653: OR
35654: IFFALSE 35760
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35656: LD_VAR 0 5
35660: PUSH
35661: LD_INT 1
35663: ARRAY
35664: PPUSH
35665: CALL_OW 305
35669: PUSH
35670: LD_VAR 0 5
35674: PUSH
35675: LD_INT 1
35677: ARRAY
35678: PPUSH
35679: CALL_OW 255
35683: PUSH
35684: LD_VAR 0 1
35688: PPUSH
35689: CALL_OW 255
35693: EQUAL
35694: AND
35695: IFFALSE 35719
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35697: LD_VAR 0 5
35701: PUSH
35702: LD_INT 1
35704: ARRAY
35705: PPUSH
35706: LD_VAR 0 5
35710: PUSH
35711: LD_INT 2
35713: ARRAY
35714: PPUSH
35715: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35719: LD_ADDR_EXP 116
35723: PUSH
35724: LD_EXP 116
35728: PPUSH
35729: LD_VAR 0 4
35733: PPUSH
35734: LD_EXP 116
35738: PUSH
35739: LD_VAR 0 4
35743: ARRAY
35744: PPUSH
35745: LD_VAR 0 3
35749: PPUSH
35750: CALL_OW 3
35754: PPUSH
35755: CALL_OW 1
35759: ST_TO_ADDR
// end ; end ;
35760: GO 35589
35762: POP
35763: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35764: LD_VAR 0 1
35768: PPUSH
35769: LD_EXP 116
35773: PUSH
35774: LD_VAR 0 4
35778: ARRAY
35779: PUSH
35780: LD_INT 0
35782: PLUS
35783: PPUSH
35784: CALL_OW 505
// end ;
35788: LD_VAR 0 2
35792: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35793: LD_INT 0
35795: PPUSH
35796: PPUSH
35797: PPUSH
35798: PPUSH
// if not hack in hackTanks then
35799: LD_VAR 0 1
35803: PUSH
35804: LD_EXP 115
35808: IN
35809: NOT
35810: IFFALSE 35814
// exit ;
35812: GO 35899
// index := GetElementIndex ( hackTanks , hack ) ;
35814: LD_ADDR_VAR 0 5
35818: PUSH
35819: LD_EXP 115
35823: PPUSH
35824: LD_VAR 0 1
35828: PPUSH
35829: CALL 42832 0 2
35833: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35834: LD_ADDR_VAR 0 4
35838: PUSH
35839: DOUBLE
35840: LD_INT 1
35842: DEC
35843: ST_TO_ADDR
35844: LD_EXP 116
35848: PUSH
35849: LD_VAR 0 5
35853: ARRAY
35854: PUSH
35855: FOR_TO
35856: IFFALSE 35897
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35858: LD_EXP 116
35862: PUSH
35863: LD_VAR 0 5
35867: ARRAY
35868: PUSH
35869: LD_VAR 0 4
35873: ARRAY
35874: PUSH
35875: LD_INT 1
35877: ARRAY
35878: PUSH
35879: LD_VAR 0 2
35883: EQUAL
35884: IFFALSE 35895
// KillUnit ( vehicle ) ;
35886: LD_VAR 0 2
35890: PPUSH
35891: CALL_OW 66
35895: GO 35855
35897: POP
35898: POP
// end ;
35899: LD_VAR 0 3
35903: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35904: LD_EXP 120
35908: NOT
35909: IFFALSE 35944
35911: GO 35913
35913: DISABLE
// begin initMiner := true ;
35914: LD_ADDR_EXP 120
35918: PUSH
35919: LD_INT 1
35921: ST_TO_ADDR
// minersList := [ ] ;
35922: LD_ADDR_EXP 121
35926: PUSH
35927: EMPTY
35928: ST_TO_ADDR
// minerMinesList := [ ] ;
35929: LD_ADDR_EXP 122
35933: PUSH
35934: EMPTY
35935: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35936: LD_ADDR_EXP 123
35940: PUSH
35941: LD_INT 5
35943: ST_TO_ADDR
// end ;
35944: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35945: LD_EXP 120
35949: PUSH
35950: LD_INT 34
35952: PUSH
35953: LD_INT 81
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PPUSH
35960: CALL_OW 69
35964: AND
35965: IFFALSE 36426
35967: GO 35969
35969: DISABLE
35970: LD_INT 0
35972: PPUSH
35973: PPUSH
35974: PPUSH
35975: PPUSH
// begin enable ;
35976: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35977: LD_ADDR_VAR 0 1
35981: PUSH
35982: LD_INT 34
35984: PUSH
35985: LD_INT 81
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PPUSH
35992: CALL_OW 69
35996: PUSH
35997: FOR_IN
35998: IFFALSE 36070
// begin if not i in minersList then
36000: LD_VAR 0 1
36004: PUSH
36005: LD_EXP 121
36009: IN
36010: NOT
36011: IFFALSE 36068
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36013: LD_ADDR_EXP 121
36017: PUSH
36018: LD_EXP 121
36022: PPUSH
36023: LD_EXP 121
36027: PUSH
36028: LD_INT 1
36030: PLUS
36031: PPUSH
36032: LD_VAR 0 1
36036: PPUSH
36037: CALL_OW 1
36041: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36042: LD_ADDR_EXP 122
36046: PUSH
36047: LD_EXP 122
36051: PPUSH
36052: LD_EXP 122
36056: PUSH
36057: LD_INT 1
36059: PLUS
36060: PPUSH
36061: EMPTY
36062: PPUSH
36063: CALL_OW 1
36067: ST_TO_ADDR
// end end ;
36068: GO 35997
36070: POP
36071: POP
// for i := minerMinesList downto 1 do
36072: LD_ADDR_VAR 0 1
36076: PUSH
36077: DOUBLE
36078: LD_EXP 122
36082: INC
36083: ST_TO_ADDR
36084: LD_INT 1
36086: PUSH
36087: FOR_DOWNTO
36088: IFFALSE 36424
// begin if IsLive ( minersList [ i ] ) then
36090: LD_EXP 121
36094: PUSH
36095: LD_VAR 0 1
36099: ARRAY
36100: PPUSH
36101: CALL_OW 300
36105: IFFALSE 36133
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36107: LD_EXP 121
36111: PUSH
36112: LD_VAR 0 1
36116: ARRAY
36117: PPUSH
36118: LD_EXP 122
36122: PUSH
36123: LD_VAR 0 1
36127: ARRAY
36128: PPUSH
36129: CALL_OW 505
// if not minerMinesList [ i ] then
36133: LD_EXP 122
36137: PUSH
36138: LD_VAR 0 1
36142: ARRAY
36143: NOT
36144: IFFALSE 36148
// continue ;
36146: GO 36087
// for j := minerMinesList [ i ] downto 1 do
36148: LD_ADDR_VAR 0 2
36152: PUSH
36153: DOUBLE
36154: LD_EXP 122
36158: PUSH
36159: LD_VAR 0 1
36163: ARRAY
36164: INC
36165: ST_TO_ADDR
36166: LD_INT 1
36168: PUSH
36169: FOR_DOWNTO
36170: IFFALSE 36420
// begin side := GetSide ( minersList [ i ] ) ;
36172: LD_ADDR_VAR 0 3
36176: PUSH
36177: LD_EXP 121
36181: PUSH
36182: LD_VAR 0 1
36186: ARRAY
36187: PPUSH
36188: CALL_OW 255
36192: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36193: LD_ADDR_VAR 0 4
36197: PUSH
36198: LD_EXP 122
36202: PUSH
36203: LD_VAR 0 1
36207: ARRAY
36208: PUSH
36209: LD_VAR 0 2
36213: ARRAY
36214: PUSH
36215: LD_INT 1
36217: ARRAY
36218: PPUSH
36219: LD_EXP 122
36223: PUSH
36224: LD_VAR 0 1
36228: ARRAY
36229: PUSH
36230: LD_VAR 0 2
36234: ARRAY
36235: PUSH
36236: LD_INT 2
36238: ARRAY
36239: PPUSH
36240: CALL_OW 428
36244: ST_TO_ADDR
// if not tmp then
36245: LD_VAR 0 4
36249: NOT
36250: IFFALSE 36254
// continue ;
36252: GO 36169
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36254: LD_VAR 0 4
36258: PUSH
36259: LD_INT 81
36261: PUSH
36262: LD_VAR 0 3
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PPUSH
36271: CALL_OW 69
36275: IN
36276: PUSH
36277: LD_EXP 122
36281: PUSH
36282: LD_VAR 0 1
36286: ARRAY
36287: PUSH
36288: LD_VAR 0 2
36292: ARRAY
36293: PUSH
36294: LD_INT 1
36296: ARRAY
36297: PPUSH
36298: LD_EXP 122
36302: PUSH
36303: LD_VAR 0 1
36307: ARRAY
36308: PUSH
36309: LD_VAR 0 2
36313: ARRAY
36314: PUSH
36315: LD_INT 2
36317: ARRAY
36318: PPUSH
36319: CALL_OW 458
36323: AND
36324: IFFALSE 36418
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36326: LD_EXP 122
36330: PUSH
36331: LD_VAR 0 1
36335: ARRAY
36336: PUSH
36337: LD_VAR 0 2
36341: ARRAY
36342: PUSH
36343: LD_INT 1
36345: ARRAY
36346: PPUSH
36347: LD_EXP 122
36351: PUSH
36352: LD_VAR 0 1
36356: ARRAY
36357: PUSH
36358: LD_VAR 0 2
36362: ARRAY
36363: PUSH
36364: LD_INT 2
36366: ARRAY
36367: PPUSH
36368: LD_VAR 0 3
36372: PPUSH
36373: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36377: LD_ADDR_EXP 122
36381: PUSH
36382: LD_EXP 122
36386: PPUSH
36387: LD_VAR 0 1
36391: PPUSH
36392: LD_EXP 122
36396: PUSH
36397: LD_VAR 0 1
36401: ARRAY
36402: PPUSH
36403: LD_VAR 0 2
36407: PPUSH
36408: CALL_OW 3
36412: PPUSH
36413: CALL_OW 1
36417: ST_TO_ADDR
// end ; end ;
36418: GO 36169
36420: POP
36421: POP
// end ;
36422: GO 36087
36424: POP
36425: POP
// end ;
36426: PPOPN 4
36428: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36429: LD_INT 0
36431: PPUSH
36432: PPUSH
// result := false ;
36433: LD_ADDR_VAR 0 4
36437: PUSH
36438: LD_INT 0
36440: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36441: LD_VAR 0 1
36445: PPUSH
36446: CALL_OW 264
36450: PUSH
36451: LD_INT 81
36453: EQUAL
36454: NOT
36455: IFFALSE 36459
// exit ;
36457: GO 36699
// index := GetElementIndex ( minersList , unit ) ;
36459: LD_ADDR_VAR 0 5
36463: PUSH
36464: LD_EXP 121
36468: PPUSH
36469: LD_VAR 0 1
36473: PPUSH
36474: CALL 42832 0 2
36478: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36479: LD_EXP 122
36483: PUSH
36484: LD_VAR 0 5
36488: ARRAY
36489: PUSH
36490: LD_EXP 123
36494: GREATEREQUAL
36495: IFFALSE 36499
// exit ;
36497: GO 36699
// ComMoveXY ( unit , x , y ) ;
36499: LD_VAR 0 1
36503: PPUSH
36504: LD_VAR 0 2
36508: PPUSH
36509: LD_VAR 0 3
36513: PPUSH
36514: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36518: LD_INT 35
36520: PPUSH
36521: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36525: LD_VAR 0 1
36529: PPUSH
36530: LD_VAR 0 2
36534: PPUSH
36535: LD_VAR 0 3
36539: PPUSH
36540: CALL 74187 0 3
36544: NOT
36545: PUSH
36546: LD_VAR 0 1
36550: PPUSH
36551: CALL_OW 314
36555: AND
36556: IFFALSE 36560
// exit ;
36558: GO 36699
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36560: LD_VAR 0 2
36564: PPUSH
36565: LD_VAR 0 3
36569: PPUSH
36570: CALL_OW 428
36574: PUSH
36575: LD_VAR 0 1
36579: EQUAL
36580: PUSH
36581: LD_VAR 0 1
36585: PPUSH
36586: CALL_OW 314
36590: NOT
36591: AND
36592: IFFALSE 36518
// PlaySoundXY ( x , y , PlantMine ) ;
36594: LD_VAR 0 2
36598: PPUSH
36599: LD_VAR 0 3
36603: PPUSH
36604: LD_STRING PlantMine
36606: PPUSH
36607: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36611: LD_VAR 0 2
36615: PPUSH
36616: LD_VAR 0 3
36620: PPUSH
36621: LD_VAR 0 1
36625: PPUSH
36626: CALL_OW 255
36630: PPUSH
36631: LD_INT 0
36633: PPUSH
36634: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36638: LD_ADDR_EXP 122
36642: PUSH
36643: LD_EXP 122
36647: PPUSH
36648: LD_VAR 0 5
36652: PUSH
36653: LD_EXP 122
36657: PUSH
36658: LD_VAR 0 5
36662: ARRAY
36663: PUSH
36664: LD_INT 1
36666: PLUS
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PPUSH
36672: LD_VAR 0 2
36676: PUSH
36677: LD_VAR 0 3
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PPUSH
36686: CALL 43047 0 3
36690: ST_TO_ADDR
// result := true ;
36691: LD_ADDR_VAR 0 4
36695: PUSH
36696: LD_INT 1
36698: ST_TO_ADDR
// end ;
36699: LD_VAR 0 4
36703: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36704: LD_INT 0
36706: PPUSH
36707: PPUSH
36708: PPUSH
// if not unit in minersList then
36709: LD_VAR 0 1
36713: PUSH
36714: LD_EXP 121
36718: IN
36719: NOT
36720: IFFALSE 36724
// exit ;
36722: GO 37116
// index := GetElementIndex ( minersList , unit ) ;
36724: LD_ADDR_VAR 0 6
36728: PUSH
36729: LD_EXP 121
36733: PPUSH
36734: LD_VAR 0 1
36738: PPUSH
36739: CALL 42832 0 2
36743: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36744: LD_ADDR_VAR 0 5
36748: PUSH
36749: DOUBLE
36750: LD_EXP 122
36754: PUSH
36755: LD_VAR 0 6
36759: ARRAY
36760: INC
36761: ST_TO_ADDR
36762: LD_INT 1
36764: PUSH
36765: FOR_DOWNTO
36766: IFFALSE 36927
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36768: LD_EXP 122
36772: PUSH
36773: LD_VAR 0 6
36777: ARRAY
36778: PUSH
36779: LD_VAR 0 5
36783: ARRAY
36784: PUSH
36785: LD_INT 1
36787: ARRAY
36788: PUSH
36789: LD_VAR 0 2
36793: EQUAL
36794: PUSH
36795: LD_EXP 122
36799: PUSH
36800: LD_VAR 0 6
36804: ARRAY
36805: PUSH
36806: LD_VAR 0 5
36810: ARRAY
36811: PUSH
36812: LD_INT 2
36814: ARRAY
36815: PUSH
36816: LD_VAR 0 3
36820: EQUAL
36821: AND
36822: IFFALSE 36925
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36824: LD_EXP 122
36828: PUSH
36829: LD_VAR 0 6
36833: ARRAY
36834: PUSH
36835: LD_VAR 0 5
36839: ARRAY
36840: PUSH
36841: LD_INT 1
36843: ARRAY
36844: PPUSH
36845: LD_EXP 122
36849: PUSH
36850: LD_VAR 0 6
36854: ARRAY
36855: PUSH
36856: LD_VAR 0 5
36860: ARRAY
36861: PUSH
36862: LD_INT 2
36864: ARRAY
36865: PPUSH
36866: LD_VAR 0 1
36870: PPUSH
36871: CALL_OW 255
36875: PPUSH
36876: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36880: LD_ADDR_EXP 122
36884: PUSH
36885: LD_EXP 122
36889: PPUSH
36890: LD_VAR 0 6
36894: PPUSH
36895: LD_EXP 122
36899: PUSH
36900: LD_VAR 0 6
36904: ARRAY
36905: PPUSH
36906: LD_VAR 0 5
36910: PPUSH
36911: CALL_OW 3
36915: PPUSH
36916: CALL_OW 1
36920: ST_TO_ADDR
// exit ;
36921: POP
36922: POP
36923: GO 37116
// end ; end ;
36925: GO 36765
36927: POP
36928: POP
// for i := minerMinesList [ index ] downto 1 do
36929: LD_ADDR_VAR 0 5
36933: PUSH
36934: DOUBLE
36935: LD_EXP 122
36939: PUSH
36940: LD_VAR 0 6
36944: ARRAY
36945: INC
36946: ST_TO_ADDR
36947: LD_INT 1
36949: PUSH
36950: FOR_DOWNTO
36951: IFFALSE 37114
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36953: LD_EXP 122
36957: PUSH
36958: LD_VAR 0 6
36962: ARRAY
36963: PUSH
36964: LD_VAR 0 5
36968: ARRAY
36969: PUSH
36970: LD_INT 1
36972: ARRAY
36973: PPUSH
36974: LD_EXP 122
36978: PUSH
36979: LD_VAR 0 6
36983: ARRAY
36984: PUSH
36985: LD_VAR 0 5
36989: ARRAY
36990: PUSH
36991: LD_INT 2
36993: ARRAY
36994: PPUSH
36995: LD_VAR 0 2
36999: PPUSH
37000: LD_VAR 0 3
37004: PPUSH
37005: CALL_OW 298
37009: PUSH
37010: LD_INT 6
37012: LESS
37013: IFFALSE 37112
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37015: LD_EXP 122
37019: PUSH
37020: LD_VAR 0 6
37024: ARRAY
37025: PUSH
37026: LD_VAR 0 5
37030: ARRAY
37031: PUSH
37032: LD_INT 1
37034: ARRAY
37035: PPUSH
37036: LD_EXP 122
37040: PUSH
37041: LD_VAR 0 6
37045: ARRAY
37046: PUSH
37047: LD_VAR 0 5
37051: ARRAY
37052: PUSH
37053: LD_INT 2
37055: ARRAY
37056: PPUSH
37057: LD_VAR 0 1
37061: PPUSH
37062: CALL_OW 255
37066: PPUSH
37067: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37071: LD_ADDR_EXP 122
37075: PUSH
37076: LD_EXP 122
37080: PPUSH
37081: LD_VAR 0 6
37085: PPUSH
37086: LD_EXP 122
37090: PUSH
37091: LD_VAR 0 6
37095: ARRAY
37096: PPUSH
37097: LD_VAR 0 5
37101: PPUSH
37102: CALL_OW 3
37106: PPUSH
37107: CALL_OW 1
37111: ST_TO_ADDR
// end ; end ;
37112: GO 36950
37114: POP
37115: POP
// end ;
37116: LD_VAR 0 4
37120: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37121: LD_INT 0
37123: PPUSH
37124: PPUSH
37125: PPUSH
37126: PPUSH
37127: PPUSH
37128: PPUSH
37129: PPUSH
37130: PPUSH
37131: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37132: LD_VAR 0 1
37136: PPUSH
37137: CALL_OW 264
37141: PUSH
37142: LD_INT 81
37144: EQUAL
37145: NOT
37146: PUSH
37147: LD_VAR 0 1
37151: PUSH
37152: LD_EXP 121
37156: IN
37157: NOT
37158: OR
37159: IFFALSE 37163
// exit ;
37161: GO 37485
// index := GetElementIndex ( minersList , unit ) ;
37163: LD_ADDR_VAR 0 6
37167: PUSH
37168: LD_EXP 121
37172: PPUSH
37173: LD_VAR 0 1
37177: PPUSH
37178: CALL 42832 0 2
37182: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37183: LD_ADDR_VAR 0 8
37187: PUSH
37188: LD_EXP 123
37192: PUSH
37193: LD_EXP 122
37197: PUSH
37198: LD_VAR 0 6
37202: ARRAY
37203: MINUS
37204: ST_TO_ADDR
// if not minesFreeAmount then
37205: LD_VAR 0 8
37209: NOT
37210: IFFALSE 37214
// exit ;
37212: GO 37485
// tmp := [ ] ;
37214: LD_ADDR_VAR 0 7
37218: PUSH
37219: EMPTY
37220: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37221: LD_ADDR_VAR 0 5
37225: PUSH
37226: DOUBLE
37227: LD_INT 1
37229: DEC
37230: ST_TO_ADDR
37231: LD_VAR 0 8
37235: PUSH
37236: FOR_TO
37237: IFFALSE 37432
// begin _d := rand ( 0 , 5 ) ;
37239: LD_ADDR_VAR 0 11
37243: PUSH
37244: LD_INT 0
37246: PPUSH
37247: LD_INT 5
37249: PPUSH
37250: CALL_OW 12
37254: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37255: LD_ADDR_VAR 0 12
37259: PUSH
37260: LD_INT 2
37262: PPUSH
37263: LD_INT 6
37265: PPUSH
37266: CALL_OW 12
37270: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37271: LD_ADDR_VAR 0 9
37275: PUSH
37276: LD_VAR 0 2
37280: PPUSH
37281: LD_VAR 0 11
37285: PPUSH
37286: LD_VAR 0 12
37290: PPUSH
37291: CALL_OW 272
37295: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37296: LD_ADDR_VAR 0 10
37300: PUSH
37301: LD_VAR 0 3
37305: PPUSH
37306: LD_VAR 0 11
37310: PPUSH
37311: LD_VAR 0 12
37315: PPUSH
37316: CALL_OW 273
37320: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37321: LD_VAR 0 9
37325: PPUSH
37326: LD_VAR 0 10
37330: PPUSH
37331: CALL_OW 488
37335: PUSH
37336: LD_VAR 0 9
37340: PUSH
37341: LD_VAR 0 10
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_VAR 0 7
37354: IN
37355: NOT
37356: AND
37357: PUSH
37358: LD_VAR 0 9
37362: PPUSH
37363: LD_VAR 0 10
37367: PPUSH
37368: CALL_OW 458
37372: NOT
37373: AND
37374: IFFALSE 37416
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37376: LD_ADDR_VAR 0 7
37380: PUSH
37381: LD_VAR 0 7
37385: PPUSH
37386: LD_VAR 0 7
37390: PUSH
37391: LD_INT 1
37393: PLUS
37394: PPUSH
37395: LD_VAR 0 9
37399: PUSH
37400: LD_VAR 0 10
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PPUSH
37409: CALL_OW 1
37413: ST_TO_ADDR
37414: GO 37430
// i := i - 1 ;
37416: LD_ADDR_VAR 0 5
37420: PUSH
37421: LD_VAR 0 5
37425: PUSH
37426: LD_INT 1
37428: MINUS
37429: ST_TO_ADDR
// end ;
37430: GO 37236
37432: POP
37433: POP
// for i in tmp do
37434: LD_ADDR_VAR 0 5
37438: PUSH
37439: LD_VAR 0 7
37443: PUSH
37444: FOR_IN
37445: IFFALSE 37483
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37447: LD_VAR 0 1
37451: PPUSH
37452: LD_VAR 0 5
37456: PUSH
37457: LD_INT 1
37459: ARRAY
37460: PPUSH
37461: LD_VAR 0 5
37465: PUSH
37466: LD_INT 2
37468: ARRAY
37469: PPUSH
37470: CALL 36429 0 3
37474: NOT
37475: IFFALSE 37481
// exit ;
37477: POP
37478: POP
37479: GO 37485
37481: GO 37444
37483: POP
37484: POP
// end ;
37485: LD_VAR 0 4
37489: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37490: LD_INT 0
37492: PPUSH
37493: PPUSH
37494: PPUSH
37495: PPUSH
37496: PPUSH
37497: PPUSH
37498: PPUSH
// if not GetClass ( unit ) = class_sniper then
37499: LD_VAR 0 1
37503: PPUSH
37504: CALL_OW 257
37508: PUSH
37509: LD_INT 5
37511: EQUAL
37512: NOT
37513: IFFALSE 37517
// exit ;
37515: GO 37905
// dist := 8 ;
37517: LD_ADDR_VAR 0 5
37521: PUSH
37522: LD_INT 8
37524: ST_TO_ADDR
// viewRange := 12 ;
37525: LD_ADDR_VAR 0 7
37529: PUSH
37530: LD_INT 12
37532: ST_TO_ADDR
// side := GetSide ( unit ) ;
37533: LD_ADDR_VAR 0 6
37537: PUSH
37538: LD_VAR 0 1
37542: PPUSH
37543: CALL_OW 255
37547: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37548: LD_INT 61
37550: PPUSH
37551: LD_VAR 0 6
37555: PPUSH
37556: CALL_OW 321
37560: PUSH
37561: LD_INT 2
37563: EQUAL
37564: IFFALSE 37574
// viewRange := 16 ;
37566: LD_ADDR_VAR 0 7
37570: PUSH
37571: LD_INT 16
37573: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37574: LD_VAR 0 1
37578: PPUSH
37579: LD_VAR 0 2
37583: PPUSH
37584: LD_VAR 0 3
37588: PPUSH
37589: CALL_OW 297
37593: PUSH
37594: LD_VAR 0 5
37598: GREATER
37599: IFFALSE 37678
// begin ComMoveXY ( unit , x , y ) ;
37601: LD_VAR 0 1
37605: PPUSH
37606: LD_VAR 0 2
37610: PPUSH
37611: LD_VAR 0 3
37615: PPUSH
37616: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37620: LD_INT 35
37622: PPUSH
37623: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37627: LD_VAR 0 1
37631: PPUSH
37632: LD_VAR 0 2
37636: PPUSH
37637: LD_VAR 0 3
37641: PPUSH
37642: CALL 74187 0 3
37646: NOT
37647: IFFALSE 37651
// exit ;
37649: GO 37905
// until GetDistUnitXY ( unit , x , y ) < dist ;
37651: LD_VAR 0 1
37655: PPUSH
37656: LD_VAR 0 2
37660: PPUSH
37661: LD_VAR 0 3
37665: PPUSH
37666: CALL_OW 297
37670: PUSH
37671: LD_VAR 0 5
37675: LESS
37676: IFFALSE 37620
// end ; ComTurnXY ( unit , x , y ) ;
37678: LD_VAR 0 1
37682: PPUSH
37683: LD_VAR 0 2
37687: PPUSH
37688: LD_VAR 0 3
37692: PPUSH
37693: CALL_OW 118
// wait ( 5 ) ;
37697: LD_INT 5
37699: PPUSH
37700: CALL_OW 67
// _d := GetDir ( unit ) ;
37704: LD_ADDR_VAR 0 10
37708: PUSH
37709: LD_VAR 0 1
37713: PPUSH
37714: CALL_OW 254
37718: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37719: LD_ADDR_VAR 0 8
37723: PUSH
37724: LD_VAR 0 1
37728: PPUSH
37729: CALL_OW 250
37733: PPUSH
37734: LD_VAR 0 10
37738: PPUSH
37739: LD_VAR 0 5
37743: PPUSH
37744: CALL_OW 272
37748: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37749: LD_ADDR_VAR 0 9
37753: PUSH
37754: LD_VAR 0 1
37758: PPUSH
37759: CALL_OW 251
37763: PPUSH
37764: LD_VAR 0 10
37768: PPUSH
37769: LD_VAR 0 5
37773: PPUSH
37774: CALL_OW 273
37778: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37779: LD_VAR 0 8
37783: PPUSH
37784: LD_VAR 0 9
37788: PPUSH
37789: CALL_OW 488
37793: NOT
37794: IFFALSE 37798
// exit ;
37796: GO 37905
// ComAnimCustom ( unit , 1 ) ;
37798: LD_VAR 0 1
37802: PPUSH
37803: LD_INT 1
37805: PPUSH
37806: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37810: LD_VAR 0 8
37814: PPUSH
37815: LD_VAR 0 9
37819: PPUSH
37820: LD_VAR 0 6
37824: PPUSH
37825: LD_VAR 0 7
37829: PPUSH
37830: CALL_OW 330
// repeat wait ( 1 ) ;
37834: LD_INT 1
37836: PPUSH
37837: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37841: LD_VAR 0 1
37845: PPUSH
37846: CALL_OW 316
37850: PUSH
37851: LD_VAR 0 1
37855: PPUSH
37856: CALL_OW 314
37860: OR
37861: PUSH
37862: LD_VAR 0 1
37866: PPUSH
37867: CALL_OW 302
37871: NOT
37872: OR
37873: PUSH
37874: LD_VAR 0 1
37878: PPUSH
37879: CALL_OW 301
37883: OR
37884: IFFALSE 37834
// RemoveSeeing ( _x , _y , side ) ;
37886: LD_VAR 0 8
37890: PPUSH
37891: LD_VAR 0 9
37895: PPUSH
37896: LD_VAR 0 6
37900: PPUSH
37901: CALL_OW 331
// end ; end_of_file
37905: LD_VAR 0 4
37909: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37910: LD_INT 0
37912: PPUSH
37913: PPUSH
// if exist_mode then
37914: LD_VAR 0 2
37918: IFFALSE 37943
// unit := CreateCharacter ( prefix & ident ) else
37920: LD_ADDR_VAR 0 5
37924: PUSH
37925: LD_VAR 0 3
37929: PUSH
37930: LD_VAR 0 1
37934: STR
37935: PPUSH
37936: CALL_OW 34
37940: ST_TO_ADDR
37941: GO 37958
// unit := NewCharacter ( ident ) ;
37943: LD_ADDR_VAR 0 5
37947: PUSH
37948: LD_VAR 0 1
37952: PPUSH
37953: CALL_OW 25
37957: ST_TO_ADDR
// result := unit ;
37958: LD_ADDR_VAR 0 4
37962: PUSH
37963: LD_VAR 0 5
37967: ST_TO_ADDR
// end ;
37968: LD_VAR 0 4
37972: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37973: LD_INT 0
37975: PPUSH
37976: PPUSH
// if not side or not nation then
37977: LD_VAR 0 1
37981: NOT
37982: PUSH
37983: LD_VAR 0 2
37987: NOT
37988: OR
37989: IFFALSE 37993
// exit ;
37991: GO 38761
// case nation of nation_american :
37993: LD_VAR 0 2
37997: PUSH
37998: LD_INT 1
38000: DOUBLE
38001: EQUAL
38002: IFTRUE 38006
38004: GO 38220
38006: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38007: LD_ADDR_VAR 0 4
38011: PUSH
38012: LD_INT 35
38014: PUSH
38015: LD_INT 45
38017: PUSH
38018: LD_INT 46
38020: PUSH
38021: LD_INT 47
38023: PUSH
38024: LD_INT 82
38026: PUSH
38027: LD_INT 83
38029: PUSH
38030: LD_INT 84
38032: PUSH
38033: LD_INT 85
38035: PUSH
38036: LD_INT 86
38038: PUSH
38039: LD_INT 1
38041: PUSH
38042: LD_INT 2
38044: PUSH
38045: LD_INT 6
38047: PUSH
38048: LD_INT 15
38050: PUSH
38051: LD_INT 16
38053: PUSH
38054: LD_INT 7
38056: PUSH
38057: LD_INT 12
38059: PUSH
38060: LD_INT 13
38062: PUSH
38063: LD_INT 10
38065: PUSH
38066: LD_INT 14
38068: PUSH
38069: LD_INT 20
38071: PUSH
38072: LD_INT 21
38074: PUSH
38075: LD_INT 22
38077: PUSH
38078: LD_INT 25
38080: PUSH
38081: LD_INT 32
38083: PUSH
38084: LD_INT 27
38086: PUSH
38087: LD_INT 36
38089: PUSH
38090: LD_INT 69
38092: PUSH
38093: LD_INT 39
38095: PUSH
38096: LD_INT 34
38098: PUSH
38099: LD_INT 40
38101: PUSH
38102: LD_INT 48
38104: PUSH
38105: LD_INT 49
38107: PUSH
38108: LD_INT 50
38110: PUSH
38111: LD_INT 51
38113: PUSH
38114: LD_INT 52
38116: PUSH
38117: LD_INT 53
38119: PUSH
38120: LD_INT 54
38122: PUSH
38123: LD_INT 55
38125: PUSH
38126: LD_INT 56
38128: PUSH
38129: LD_INT 57
38131: PUSH
38132: LD_INT 58
38134: PUSH
38135: LD_INT 59
38137: PUSH
38138: LD_INT 60
38140: PUSH
38141: LD_INT 61
38143: PUSH
38144: LD_INT 62
38146: PUSH
38147: LD_INT 80
38149: PUSH
38150: LD_INT 82
38152: PUSH
38153: LD_INT 83
38155: PUSH
38156: LD_INT 84
38158: PUSH
38159: LD_INT 85
38161: PUSH
38162: LD_INT 86
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: ST_TO_ADDR
38218: GO 38685
38220: LD_INT 2
38222: DOUBLE
38223: EQUAL
38224: IFTRUE 38228
38226: GO 38454
38228: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38229: LD_ADDR_VAR 0 4
38233: PUSH
38234: LD_INT 35
38236: PUSH
38237: LD_INT 45
38239: PUSH
38240: LD_INT 46
38242: PUSH
38243: LD_INT 47
38245: PUSH
38246: LD_INT 82
38248: PUSH
38249: LD_INT 83
38251: PUSH
38252: LD_INT 84
38254: PUSH
38255: LD_INT 85
38257: PUSH
38258: LD_INT 87
38260: PUSH
38261: LD_INT 70
38263: PUSH
38264: LD_INT 1
38266: PUSH
38267: LD_INT 11
38269: PUSH
38270: LD_INT 3
38272: PUSH
38273: LD_INT 4
38275: PUSH
38276: LD_INT 5
38278: PUSH
38279: LD_INT 6
38281: PUSH
38282: LD_INT 15
38284: PUSH
38285: LD_INT 18
38287: PUSH
38288: LD_INT 7
38290: PUSH
38291: LD_INT 17
38293: PUSH
38294: LD_INT 8
38296: PUSH
38297: LD_INT 20
38299: PUSH
38300: LD_INT 21
38302: PUSH
38303: LD_INT 22
38305: PUSH
38306: LD_INT 72
38308: PUSH
38309: LD_INT 26
38311: PUSH
38312: LD_INT 69
38314: PUSH
38315: LD_INT 39
38317: PUSH
38318: LD_INT 40
38320: PUSH
38321: LD_INT 41
38323: PUSH
38324: LD_INT 42
38326: PUSH
38327: LD_INT 43
38329: PUSH
38330: LD_INT 48
38332: PUSH
38333: LD_INT 49
38335: PUSH
38336: LD_INT 50
38338: PUSH
38339: LD_INT 51
38341: PUSH
38342: LD_INT 52
38344: PUSH
38345: LD_INT 53
38347: PUSH
38348: LD_INT 54
38350: PUSH
38351: LD_INT 55
38353: PUSH
38354: LD_INT 56
38356: PUSH
38357: LD_INT 60
38359: PUSH
38360: LD_INT 61
38362: PUSH
38363: LD_INT 62
38365: PUSH
38366: LD_INT 66
38368: PUSH
38369: LD_INT 67
38371: PUSH
38372: LD_INT 68
38374: PUSH
38375: LD_INT 81
38377: PUSH
38378: LD_INT 82
38380: PUSH
38381: LD_INT 83
38383: PUSH
38384: LD_INT 84
38386: PUSH
38387: LD_INT 85
38389: PUSH
38390: LD_INT 87
38392: PUSH
38393: LD_INT 88
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: ST_TO_ADDR
38452: GO 38685
38454: LD_INT 3
38456: DOUBLE
38457: EQUAL
38458: IFTRUE 38462
38460: GO 38684
38462: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38463: LD_ADDR_VAR 0 4
38467: PUSH
38468: LD_INT 46
38470: PUSH
38471: LD_INT 47
38473: PUSH
38474: LD_INT 1
38476: PUSH
38477: LD_INT 2
38479: PUSH
38480: LD_INT 82
38482: PUSH
38483: LD_INT 83
38485: PUSH
38486: LD_INT 84
38488: PUSH
38489: LD_INT 85
38491: PUSH
38492: LD_INT 86
38494: PUSH
38495: LD_INT 11
38497: PUSH
38498: LD_INT 9
38500: PUSH
38501: LD_INT 20
38503: PUSH
38504: LD_INT 19
38506: PUSH
38507: LD_INT 21
38509: PUSH
38510: LD_INT 24
38512: PUSH
38513: LD_INT 22
38515: PUSH
38516: LD_INT 25
38518: PUSH
38519: LD_INT 28
38521: PUSH
38522: LD_INT 29
38524: PUSH
38525: LD_INT 30
38527: PUSH
38528: LD_INT 31
38530: PUSH
38531: LD_INT 37
38533: PUSH
38534: LD_INT 38
38536: PUSH
38537: LD_INT 32
38539: PUSH
38540: LD_INT 27
38542: PUSH
38543: LD_INT 33
38545: PUSH
38546: LD_INT 69
38548: PUSH
38549: LD_INT 39
38551: PUSH
38552: LD_INT 34
38554: PUSH
38555: LD_INT 40
38557: PUSH
38558: LD_INT 71
38560: PUSH
38561: LD_INT 23
38563: PUSH
38564: LD_INT 44
38566: PUSH
38567: LD_INT 48
38569: PUSH
38570: LD_INT 49
38572: PUSH
38573: LD_INT 50
38575: PUSH
38576: LD_INT 51
38578: PUSH
38579: LD_INT 52
38581: PUSH
38582: LD_INT 53
38584: PUSH
38585: LD_INT 54
38587: PUSH
38588: LD_INT 55
38590: PUSH
38591: LD_INT 56
38593: PUSH
38594: LD_INT 57
38596: PUSH
38597: LD_INT 58
38599: PUSH
38600: LD_INT 59
38602: PUSH
38603: LD_INT 63
38605: PUSH
38606: LD_INT 64
38608: PUSH
38609: LD_INT 65
38611: PUSH
38612: LD_INT 82
38614: PUSH
38615: LD_INT 83
38617: PUSH
38618: LD_INT 84
38620: PUSH
38621: LD_INT 85
38623: PUSH
38624: LD_INT 86
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: ST_TO_ADDR
38682: GO 38685
38684: POP
// if state > - 1 and state < 3 then
38685: LD_VAR 0 3
38689: PUSH
38690: LD_INT 1
38692: NEG
38693: GREATER
38694: PUSH
38695: LD_VAR 0 3
38699: PUSH
38700: LD_INT 3
38702: LESS
38703: AND
38704: IFFALSE 38761
// for i in result do
38706: LD_ADDR_VAR 0 5
38710: PUSH
38711: LD_VAR 0 4
38715: PUSH
38716: FOR_IN
38717: IFFALSE 38759
// if GetTech ( i , side ) <> state then
38719: LD_VAR 0 5
38723: PPUSH
38724: LD_VAR 0 1
38728: PPUSH
38729: CALL_OW 321
38733: PUSH
38734: LD_VAR 0 3
38738: NONEQUAL
38739: IFFALSE 38757
// result := result diff i ;
38741: LD_ADDR_VAR 0 4
38745: PUSH
38746: LD_VAR 0 4
38750: PUSH
38751: LD_VAR 0 5
38755: DIFF
38756: ST_TO_ADDR
38757: GO 38716
38759: POP
38760: POP
// end ;
38761: LD_VAR 0 4
38765: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38766: LD_INT 0
38768: PPUSH
38769: PPUSH
38770: PPUSH
// result := true ;
38771: LD_ADDR_VAR 0 3
38775: PUSH
38776: LD_INT 1
38778: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38779: LD_ADDR_VAR 0 5
38783: PUSH
38784: LD_VAR 0 2
38788: PPUSH
38789: CALL_OW 480
38793: ST_TO_ADDR
// if not tmp then
38794: LD_VAR 0 5
38798: NOT
38799: IFFALSE 38803
// exit ;
38801: GO 38852
// for i in tmp do
38803: LD_ADDR_VAR 0 4
38807: PUSH
38808: LD_VAR 0 5
38812: PUSH
38813: FOR_IN
38814: IFFALSE 38850
// if GetTech ( i , side ) <> state_researched then
38816: LD_VAR 0 4
38820: PPUSH
38821: LD_VAR 0 1
38825: PPUSH
38826: CALL_OW 321
38830: PUSH
38831: LD_INT 2
38833: NONEQUAL
38834: IFFALSE 38848
// begin result := false ;
38836: LD_ADDR_VAR 0 3
38840: PUSH
38841: LD_INT 0
38843: ST_TO_ADDR
// exit ;
38844: POP
38845: POP
38846: GO 38852
// end ;
38848: GO 38813
38850: POP
38851: POP
// end ;
38852: LD_VAR 0 3
38856: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38857: LD_INT 0
38859: PPUSH
38860: PPUSH
38861: PPUSH
38862: PPUSH
38863: PPUSH
38864: PPUSH
38865: PPUSH
38866: PPUSH
38867: PPUSH
38868: PPUSH
38869: PPUSH
38870: PPUSH
38871: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38872: LD_VAR 0 1
38876: NOT
38877: PUSH
38878: LD_VAR 0 1
38882: PPUSH
38883: CALL_OW 257
38887: PUSH
38888: LD_INT 9
38890: NONEQUAL
38891: OR
38892: IFFALSE 38896
// exit ;
38894: GO 39469
// side := GetSide ( unit ) ;
38896: LD_ADDR_VAR 0 9
38900: PUSH
38901: LD_VAR 0 1
38905: PPUSH
38906: CALL_OW 255
38910: ST_TO_ADDR
// tech_space := tech_spacanom ;
38911: LD_ADDR_VAR 0 12
38915: PUSH
38916: LD_INT 29
38918: ST_TO_ADDR
// tech_time := tech_taurad ;
38919: LD_ADDR_VAR 0 13
38923: PUSH
38924: LD_INT 28
38926: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38927: LD_ADDR_VAR 0 11
38931: PUSH
38932: LD_VAR 0 1
38936: PPUSH
38937: CALL_OW 310
38941: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38942: LD_VAR 0 11
38946: PPUSH
38947: CALL_OW 247
38951: PUSH
38952: LD_INT 2
38954: EQUAL
38955: IFFALSE 38959
// exit ;
38957: GO 39469
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38959: LD_ADDR_VAR 0 8
38963: PUSH
38964: LD_INT 81
38966: PUSH
38967: LD_VAR 0 9
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 3
38978: PUSH
38979: LD_INT 21
38981: PUSH
38982: LD_INT 3
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PPUSH
38997: CALL_OW 69
39001: ST_TO_ADDR
// if not tmp then
39002: LD_VAR 0 8
39006: NOT
39007: IFFALSE 39011
// exit ;
39009: GO 39469
// if in_unit then
39011: LD_VAR 0 11
39015: IFFALSE 39039
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39017: LD_ADDR_VAR 0 10
39021: PUSH
39022: LD_VAR 0 8
39026: PPUSH
39027: LD_VAR 0 11
39031: PPUSH
39032: CALL_OW 74
39036: ST_TO_ADDR
39037: GO 39059
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39039: LD_ADDR_VAR 0 10
39043: PUSH
39044: LD_VAR 0 8
39048: PPUSH
39049: LD_VAR 0 1
39053: PPUSH
39054: CALL_OW 74
39058: ST_TO_ADDR
// if not enemy then
39059: LD_VAR 0 10
39063: NOT
39064: IFFALSE 39068
// exit ;
39066: GO 39469
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39068: LD_VAR 0 11
39072: PUSH
39073: LD_VAR 0 11
39077: PPUSH
39078: LD_VAR 0 10
39082: PPUSH
39083: CALL_OW 296
39087: PUSH
39088: LD_INT 13
39090: GREATER
39091: AND
39092: PUSH
39093: LD_VAR 0 1
39097: PPUSH
39098: LD_VAR 0 10
39102: PPUSH
39103: CALL_OW 296
39107: PUSH
39108: LD_INT 12
39110: GREATER
39111: OR
39112: IFFALSE 39116
// exit ;
39114: GO 39469
// missile := [ 1 ] ;
39116: LD_ADDR_VAR 0 14
39120: PUSH
39121: LD_INT 1
39123: PUSH
39124: EMPTY
39125: LIST
39126: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39127: LD_VAR 0 9
39131: PPUSH
39132: LD_VAR 0 12
39136: PPUSH
39137: CALL_OW 325
39141: IFFALSE 39170
// missile := Replace ( missile , missile + 1 , 2 ) ;
39143: LD_ADDR_VAR 0 14
39147: PUSH
39148: LD_VAR 0 14
39152: PPUSH
39153: LD_VAR 0 14
39157: PUSH
39158: LD_INT 1
39160: PLUS
39161: PPUSH
39162: LD_INT 2
39164: PPUSH
39165: CALL_OW 1
39169: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39170: LD_VAR 0 9
39174: PPUSH
39175: LD_VAR 0 13
39179: PPUSH
39180: CALL_OW 325
39184: PUSH
39185: LD_VAR 0 10
39189: PPUSH
39190: CALL_OW 255
39194: PPUSH
39195: LD_VAR 0 13
39199: PPUSH
39200: CALL_OW 325
39204: NOT
39205: AND
39206: IFFALSE 39235
// missile := Replace ( missile , missile + 1 , 3 ) ;
39208: LD_ADDR_VAR 0 14
39212: PUSH
39213: LD_VAR 0 14
39217: PPUSH
39218: LD_VAR 0 14
39222: PUSH
39223: LD_INT 1
39225: PLUS
39226: PPUSH
39227: LD_INT 3
39229: PPUSH
39230: CALL_OW 1
39234: ST_TO_ADDR
// if missile < 2 then
39235: LD_VAR 0 14
39239: PUSH
39240: LD_INT 2
39242: LESS
39243: IFFALSE 39247
// exit ;
39245: GO 39469
// x := GetX ( enemy ) ;
39247: LD_ADDR_VAR 0 4
39251: PUSH
39252: LD_VAR 0 10
39256: PPUSH
39257: CALL_OW 250
39261: ST_TO_ADDR
// y := GetY ( enemy ) ;
39262: LD_ADDR_VAR 0 5
39266: PUSH
39267: LD_VAR 0 10
39271: PPUSH
39272: CALL_OW 251
39276: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39277: LD_ADDR_VAR 0 6
39281: PUSH
39282: LD_VAR 0 4
39286: PUSH
39287: LD_INT 1
39289: NEG
39290: PPUSH
39291: LD_INT 1
39293: PPUSH
39294: CALL_OW 12
39298: PLUS
39299: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39300: LD_ADDR_VAR 0 7
39304: PUSH
39305: LD_VAR 0 5
39309: PUSH
39310: LD_INT 1
39312: NEG
39313: PPUSH
39314: LD_INT 1
39316: PPUSH
39317: CALL_OW 12
39321: PLUS
39322: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39323: LD_VAR 0 6
39327: PPUSH
39328: LD_VAR 0 7
39332: PPUSH
39333: CALL_OW 488
39337: NOT
39338: IFFALSE 39360
// begin _x := x ;
39340: LD_ADDR_VAR 0 6
39344: PUSH
39345: LD_VAR 0 4
39349: ST_TO_ADDR
// _y := y ;
39350: LD_ADDR_VAR 0 7
39354: PUSH
39355: LD_VAR 0 5
39359: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39360: LD_ADDR_VAR 0 3
39364: PUSH
39365: LD_INT 1
39367: PPUSH
39368: LD_VAR 0 14
39372: PPUSH
39373: CALL_OW 12
39377: ST_TO_ADDR
// case i of 1 :
39378: LD_VAR 0 3
39382: PUSH
39383: LD_INT 1
39385: DOUBLE
39386: EQUAL
39387: IFTRUE 39391
39389: GO 39408
39391: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39392: LD_VAR 0 1
39396: PPUSH
39397: LD_VAR 0 10
39401: PPUSH
39402: CALL_OW 115
39406: GO 39469
39408: LD_INT 2
39410: DOUBLE
39411: EQUAL
39412: IFTRUE 39416
39414: GO 39438
39416: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39417: LD_VAR 0 1
39421: PPUSH
39422: LD_VAR 0 6
39426: PPUSH
39427: LD_VAR 0 7
39431: PPUSH
39432: CALL_OW 153
39436: GO 39469
39438: LD_INT 3
39440: DOUBLE
39441: EQUAL
39442: IFTRUE 39446
39444: GO 39468
39446: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39447: LD_VAR 0 1
39451: PPUSH
39452: LD_VAR 0 6
39456: PPUSH
39457: LD_VAR 0 7
39461: PPUSH
39462: CALL_OW 154
39466: GO 39469
39468: POP
// end ;
39469: LD_VAR 0 2
39473: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39474: LD_INT 0
39476: PPUSH
39477: PPUSH
39478: PPUSH
39479: PPUSH
39480: PPUSH
39481: PPUSH
// if not unit or not building then
39482: LD_VAR 0 1
39486: NOT
39487: PUSH
39488: LD_VAR 0 2
39492: NOT
39493: OR
39494: IFFALSE 39498
// exit ;
39496: GO 39656
// x := GetX ( building ) ;
39498: LD_ADDR_VAR 0 5
39502: PUSH
39503: LD_VAR 0 2
39507: PPUSH
39508: CALL_OW 250
39512: ST_TO_ADDR
// y := GetY ( building ) ;
39513: LD_ADDR_VAR 0 6
39517: PUSH
39518: LD_VAR 0 2
39522: PPUSH
39523: CALL_OW 251
39527: ST_TO_ADDR
// for i = 0 to 5 do
39528: LD_ADDR_VAR 0 4
39532: PUSH
39533: DOUBLE
39534: LD_INT 0
39536: DEC
39537: ST_TO_ADDR
39538: LD_INT 5
39540: PUSH
39541: FOR_TO
39542: IFFALSE 39654
// begin _x := ShiftX ( x , i , 3 ) ;
39544: LD_ADDR_VAR 0 7
39548: PUSH
39549: LD_VAR 0 5
39553: PPUSH
39554: LD_VAR 0 4
39558: PPUSH
39559: LD_INT 3
39561: PPUSH
39562: CALL_OW 272
39566: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39567: LD_ADDR_VAR 0 8
39571: PUSH
39572: LD_VAR 0 6
39576: PPUSH
39577: LD_VAR 0 4
39581: PPUSH
39582: LD_INT 3
39584: PPUSH
39585: CALL_OW 273
39589: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39590: LD_VAR 0 7
39594: PPUSH
39595: LD_VAR 0 8
39599: PPUSH
39600: CALL_OW 488
39604: NOT
39605: IFFALSE 39609
// continue ;
39607: GO 39541
// if HexInfo ( _x , _y ) = 0 then
39609: LD_VAR 0 7
39613: PPUSH
39614: LD_VAR 0 8
39618: PPUSH
39619: CALL_OW 428
39623: PUSH
39624: LD_INT 0
39626: EQUAL
39627: IFFALSE 39652
// begin ComMoveXY ( unit , _x , _y ) ;
39629: LD_VAR 0 1
39633: PPUSH
39634: LD_VAR 0 7
39638: PPUSH
39639: LD_VAR 0 8
39643: PPUSH
39644: CALL_OW 111
// exit ;
39648: POP
39649: POP
39650: GO 39656
// end ; end ;
39652: GO 39541
39654: POP
39655: POP
// end ;
39656: LD_VAR 0 3
39660: RET
// export function ScanBase ( side , base_area ) ; begin
39661: LD_INT 0
39663: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39664: LD_ADDR_VAR 0 3
39668: PUSH
39669: LD_VAR 0 2
39673: PPUSH
39674: LD_INT 81
39676: PUSH
39677: LD_VAR 0 1
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PPUSH
39686: CALL_OW 70
39690: ST_TO_ADDR
// end ;
39691: LD_VAR 0 3
39695: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39696: LD_INT 0
39698: PPUSH
39699: PPUSH
39700: PPUSH
39701: PPUSH
// result := false ;
39702: LD_ADDR_VAR 0 2
39706: PUSH
39707: LD_INT 0
39709: ST_TO_ADDR
// side := GetSide ( unit ) ;
39710: LD_ADDR_VAR 0 3
39714: PUSH
39715: LD_VAR 0 1
39719: PPUSH
39720: CALL_OW 255
39724: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39725: LD_ADDR_VAR 0 4
39729: PUSH
39730: LD_VAR 0 1
39734: PPUSH
39735: CALL_OW 248
39739: ST_TO_ADDR
// case nat of 1 :
39740: LD_VAR 0 4
39744: PUSH
39745: LD_INT 1
39747: DOUBLE
39748: EQUAL
39749: IFTRUE 39753
39751: GO 39764
39753: POP
// tech := tech_lassight ; 2 :
39754: LD_ADDR_VAR 0 5
39758: PUSH
39759: LD_INT 12
39761: ST_TO_ADDR
39762: GO 39803
39764: LD_INT 2
39766: DOUBLE
39767: EQUAL
39768: IFTRUE 39772
39770: GO 39783
39772: POP
// tech := tech_mortar ; 3 :
39773: LD_ADDR_VAR 0 5
39777: PUSH
39778: LD_INT 41
39780: ST_TO_ADDR
39781: GO 39803
39783: LD_INT 3
39785: DOUBLE
39786: EQUAL
39787: IFTRUE 39791
39789: GO 39802
39791: POP
// tech := tech_bazooka ; end ;
39792: LD_ADDR_VAR 0 5
39796: PUSH
39797: LD_INT 44
39799: ST_TO_ADDR
39800: GO 39803
39802: POP
// if Researched ( side , tech ) then
39803: LD_VAR 0 3
39807: PPUSH
39808: LD_VAR 0 5
39812: PPUSH
39813: CALL_OW 325
39817: IFFALSE 39844
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39819: LD_ADDR_VAR 0 2
39823: PUSH
39824: LD_INT 5
39826: PUSH
39827: LD_INT 8
39829: PUSH
39830: LD_INT 9
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: LIST
39837: PUSH
39838: LD_VAR 0 4
39842: ARRAY
39843: ST_TO_ADDR
// end ;
39844: LD_VAR 0 2
39848: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39849: LD_INT 0
39851: PPUSH
39852: PPUSH
39853: PPUSH
// if not mines then
39854: LD_VAR 0 2
39858: NOT
39859: IFFALSE 39863
// exit ;
39861: GO 40007
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39863: LD_ADDR_VAR 0 5
39867: PUSH
39868: LD_INT 81
39870: PUSH
39871: LD_VAR 0 1
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 3
39882: PUSH
39883: LD_INT 21
39885: PUSH
39886: LD_INT 3
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PPUSH
39901: CALL_OW 69
39905: ST_TO_ADDR
// for i in mines do
39906: LD_ADDR_VAR 0 4
39910: PUSH
39911: LD_VAR 0 2
39915: PUSH
39916: FOR_IN
39917: IFFALSE 40005
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39919: LD_VAR 0 4
39923: PUSH
39924: LD_INT 1
39926: ARRAY
39927: PPUSH
39928: LD_VAR 0 4
39932: PUSH
39933: LD_INT 2
39935: ARRAY
39936: PPUSH
39937: CALL_OW 458
39941: NOT
39942: IFFALSE 39946
// continue ;
39944: GO 39916
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39946: LD_VAR 0 4
39950: PUSH
39951: LD_INT 1
39953: ARRAY
39954: PPUSH
39955: LD_VAR 0 4
39959: PUSH
39960: LD_INT 2
39962: ARRAY
39963: PPUSH
39964: CALL_OW 428
39968: PUSH
39969: LD_VAR 0 5
39973: IN
39974: IFFALSE 40003
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39976: LD_VAR 0 4
39980: PUSH
39981: LD_INT 1
39983: ARRAY
39984: PPUSH
39985: LD_VAR 0 4
39989: PUSH
39990: LD_INT 2
39992: ARRAY
39993: PPUSH
39994: LD_VAR 0 1
39998: PPUSH
39999: CALL_OW 456
// end ;
40003: GO 39916
40005: POP
40006: POP
// end ;
40007: LD_VAR 0 3
40011: RET
// export function Count ( array ) ; var i ; begin
40012: LD_INT 0
40014: PPUSH
40015: PPUSH
// result := 0 ;
40016: LD_ADDR_VAR 0 2
40020: PUSH
40021: LD_INT 0
40023: ST_TO_ADDR
// for i in array do
40024: LD_ADDR_VAR 0 3
40028: PUSH
40029: LD_VAR 0 1
40033: PUSH
40034: FOR_IN
40035: IFFALSE 40059
// if i then
40037: LD_VAR 0 3
40041: IFFALSE 40057
// result := result + 1 ;
40043: LD_ADDR_VAR 0 2
40047: PUSH
40048: LD_VAR 0 2
40052: PUSH
40053: LD_INT 1
40055: PLUS
40056: ST_TO_ADDR
40057: GO 40034
40059: POP
40060: POP
// end ;
40061: LD_VAR 0 2
40065: RET
// export function IsEmpty ( building ) ; begin
40066: LD_INT 0
40068: PPUSH
// if not building then
40069: LD_VAR 0 1
40073: NOT
40074: IFFALSE 40078
// exit ;
40076: GO 40121
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40078: LD_ADDR_VAR 0 2
40082: PUSH
40083: LD_VAR 0 1
40087: PUSH
40088: LD_INT 22
40090: PUSH
40091: LD_VAR 0 1
40095: PPUSH
40096: CALL_OW 255
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 58
40107: PUSH
40108: EMPTY
40109: LIST
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PPUSH
40115: CALL_OW 69
40119: IN
40120: ST_TO_ADDR
// end ;
40121: LD_VAR 0 2
40125: RET
// export function IsNotFull ( building ) ; var places ; begin
40126: LD_INT 0
40128: PPUSH
40129: PPUSH
// if not building then
40130: LD_VAR 0 1
40134: NOT
40135: IFFALSE 40139
// exit ;
40137: GO 40310
// result := false ;
40139: LD_ADDR_VAR 0 2
40143: PUSH
40144: LD_INT 0
40146: ST_TO_ADDR
// places := 0 ;
40147: LD_ADDR_VAR 0 3
40151: PUSH
40152: LD_INT 0
40154: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
40155: LD_VAR 0 1
40159: PPUSH
40160: CALL_OW 266
40164: PUSH
40165: LD_INT 0
40167: DOUBLE
40168: EQUAL
40169: IFTRUE 40227
40171: LD_INT 1
40173: DOUBLE
40174: EQUAL
40175: IFTRUE 40227
40177: LD_INT 6
40179: DOUBLE
40180: EQUAL
40181: IFTRUE 40227
40183: LD_INT 7
40185: DOUBLE
40186: EQUAL
40187: IFTRUE 40227
40189: LD_INT 8
40191: DOUBLE
40192: EQUAL
40193: IFTRUE 40227
40195: LD_INT 4
40197: DOUBLE
40198: EQUAL
40199: IFTRUE 40227
40201: LD_INT 5
40203: DOUBLE
40204: EQUAL
40205: IFTRUE 40227
40207: LD_INT 2
40209: DOUBLE
40210: EQUAL
40211: IFTRUE 40227
40213: LD_INT 3
40215: DOUBLE
40216: EQUAL
40217: IFTRUE 40227
40219: LD_INT 35
40221: DOUBLE
40222: EQUAL
40223: IFTRUE 40227
40225: GO 40238
40227: POP
// places := 6 ; b_bunker , b_breastwork :
40228: LD_ADDR_VAR 0 3
40232: PUSH
40233: LD_INT 6
40235: ST_TO_ADDR
40236: GO 40283
40238: LD_INT 32
40240: DOUBLE
40241: EQUAL
40242: IFTRUE 40252
40244: LD_INT 31
40246: DOUBLE
40247: EQUAL
40248: IFTRUE 40252
40250: GO 40263
40252: POP
// places := 1 ; b_control_tower :
40253: LD_ADDR_VAR 0 3
40257: PUSH
40258: LD_INT 1
40260: ST_TO_ADDR
40261: GO 40283
40263: LD_INT 36
40265: DOUBLE
40266: EQUAL
40267: IFTRUE 40271
40269: GO 40282
40271: POP
// places := 3 ; end ;
40272: LD_ADDR_VAR 0 3
40276: PUSH
40277: LD_INT 3
40279: ST_TO_ADDR
40280: GO 40283
40282: POP
// if places then
40283: LD_VAR 0 3
40287: IFFALSE 40310
// result := UnitsInside ( building ) < places ;
40289: LD_ADDR_VAR 0 2
40293: PUSH
40294: LD_VAR 0 1
40298: PPUSH
40299: CALL_OW 313
40303: PUSH
40304: LD_VAR 0 3
40308: LESS
40309: ST_TO_ADDR
// end ;
40310: LD_VAR 0 2
40314: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40315: LD_INT 0
40317: PPUSH
40318: PPUSH
40319: PPUSH
40320: PPUSH
// tmp := [ ] ;
40321: LD_ADDR_VAR 0 3
40325: PUSH
40326: EMPTY
40327: ST_TO_ADDR
// list := [ ] ;
40328: LD_ADDR_VAR 0 5
40332: PUSH
40333: EMPTY
40334: ST_TO_ADDR
// for i = 16 to 25 do
40335: LD_ADDR_VAR 0 4
40339: PUSH
40340: DOUBLE
40341: LD_INT 16
40343: DEC
40344: ST_TO_ADDR
40345: LD_INT 25
40347: PUSH
40348: FOR_TO
40349: IFFALSE 40422
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40351: LD_ADDR_VAR 0 3
40355: PUSH
40356: LD_VAR 0 3
40360: PUSH
40361: LD_INT 22
40363: PUSH
40364: LD_VAR 0 1
40368: PPUSH
40369: CALL_OW 255
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 91
40380: PUSH
40381: LD_VAR 0 1
40385: PUSH
40386: LD_INT 6
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 30
40396: PUSH
40397: LD_VAR 0 4
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: LIST
40410: PUSH
40411: EMPTY
40412: LIST
40413: PPUSH
40414: CALL_OW 69
40418: ADD
40419: ST_TO_ADDR
40420: GO 40348
40422: POP
40423: POP
// for i = 1 to tmp do
40424: LD_ADDR_VAR 0 4
40428: PUSH
40429: DOUBLE
40430: LD_INT 1
40432: DEC
40433: ST_TO_ADDR
40434: LD_VAR 0 3
40438: PUSH
40439: FOR_TO
40440: IFFALSE 40528
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40442: LD_ADDR_VAR 0 5
40446: PUSH
40447: LD_VAR 0 5
40451: PUSH
40452: LD_VAR 0 3
40456: PUSH
40457: LD_VAR 0 4
40461: ARRAY
40462: PPUSH
40463: CALL_OW 266
40467: PUSH
40468: LD_VAR 0 3
40472: PUSH
40473: LD_VAR 0 4
40477: ARRAY
40478: PPUSH
40479: CALL_OW 250
40483: PUSH
40484: LD_VAR 0 3
40488: PUSH
40489: LD_VAR 0 4
40493: ARRAY
40494: PPUSH
40495: CALL_OW 251
40499: PUSH
40500: LD_VAR 0 3
40504: PUSH
40505: LD_VAR 0 4
40509: ARRAY
40510: PPUSH
40511: CALL_OW 254
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: PUSH
40522: EMPTY
40523: LIST
40524: ADD
40525: ST_TO_ADDR
40526: GO 40439
40528: POP
40529: POP
// result := list ;
40530: LD_ADDR_VAR 0 2
40534: PUSH
40535: LD_VAR 0 5
40539: ST_TO_ADDR
// end ;
40540: LD_VAR 0 2
40544: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40545: LD_INT 0
40547: PPUSH
40548: PPUSH
40549: PPUSH
40550: PPUSH
40551: PPUSH
40552: PPUSH
40553: PPUSH
// if not factory then
40554: LD_VAR 0 1
40558: NOT
40559: IFFALSE 40563
// exit ;
40561: GO 41156
// if control = control_apeman then
40563: LD_VAR 0 4
40567: PUSH
40568: LD_INT 5
40570: EQUAL
40571: IFFALSE 40680
// begin tmp := UnitsInside ( factory ) ;
40573: LD_ADDR_VAR 0 8
40577: PUSH
40578: LD_VAR 0 1
40582: PPUSH
40583: CALL_OW 313
40587: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40588: LD_VAR 0 8
40592: PPUSH
40593: LD_INT 25
40595: PUSH
40596: LD_INT 12
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PPUSH
40603: CALL_OW 72
40607: NOT
40608: IFFALSE 40618
// control := control_manual ;
40610: LD_ADDR_VAR 0 4
40614: PUSH
40615: LD_INT 1
40617: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40618: LD_ADDR_VAR 0 8
40622: PUSH
40623: LD_VAR 0 1
40627: PPUSH
40628: CALL 40315 0 1
40632: ST_TO_ADDR
// if tmp then
40633: LD_VAR 0 8
40637: IFFALSE 40680
// begin for i in tmp do
40639: LD_ADDR_VAR 0 7
40643: PUSH
40644: LD_VAR 0 8
40648: PUSH
40649: FOR_IN
40650: IFFALSE 40678
// if i [ 1 ] = b_ext_radio then
40652: LD_VAR 0 7
40656: PUSH
40657: LD_INT 1
40659: ARRAY
40660: PUSH
40661: LD_INT 22
40663: EQUAL
40664: IFFALSE 40676
// begin control := control_remote ;
40666: LD_ADDR_VAR 0 4
40670: PUSH
40671: LD_INT 2
40673: ST_TO_ADDR
// break ;
40674: GO 40678
// end ;
40676: GO 40649
40678: POP
40679: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40680: LD_VAR 0 1
40684: PPUSH
40685: LD_VAR 0 2
40689: PPUSH
40690: LD_VAR 0 3
40694: PPUSH
40695: LD_VAR 0 4
40699: PPUSH
40700: LD_VAR 0 5
40704: PPUSH
40705: CALL_OW 448
40709: IFFALSE 40744
// begin result := [ chassis , engine , control , weapon ] ;
40711: LD_ADDR_VAR 0 6
40715: PUSH
40716: LD_VAR 0 2
40720: PUSH
40721: LD_VAR 0 3
40725: PUSH
40726: LD_VAR 0 4
40730: PUSH
40731: LD_VAR 0 5
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: ST_TO_ADDR
// exit ;
40742: GO 41156
// end ; _chassis := AvailableChassisList ( factory ) ;
40744: LD_ADDR_VAR 0 9
40748: PUSH
40749: LD_VAR 0 1
40753: PPUSH
40754: CALL_OW 475
40758: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40759: LD_ADDR_VAR 0 11
40763: PUSH
40764: LD_VAR 0 1
40768: PPUSH
40769: CALL_OW 476
40773: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40774: LD_ADDR_VAR 0 12
40778: PUSH
40779: LD_VAR 0 1
40783: PPUSH
40784: CALL_OW 477
40788: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40789: LD_ADDR_VAR 0 10
40793: PUSH
40794: LD_VAR 0 1
40798: PPUSH
40799: CALL_OW 478
40803: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40804: LD_VAR 0 9
40808: NOT
40809: PUSH
40810: LD_VAR 0 11
40814: NOT
40815: OR
40816: PUSH
40817: LD_VAR 0 12
40821: NOT
40822: OR
40823: PUSH
40824: LD_VAR 0 10
40828: NOT
40829: OR
40830: IFFALSE 40865
// begin result := [ chassis , engine , control , weapon ] ;
40832: LD_ADDR_VAR 0 6
40836: PUSH
40837: LD_VAR 0 2
40841: PUSH
40842: LD_VAR 0 3
40846: PUSH
40847: LD_VAR 0 4
40851: PUSH
40852: LD_VAR 0 5
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: ST_TO_ADDR
// exit ;
40863: GO 41156
// end ; if not chassis in _chassis then
40865: LD_VAR 0 2
40869: PUSH
40870: LD_VAR 0 9
40874: IN
40875: NOT
40876: IFFALSE 40902
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40878: LD_ADDR_VAR 0 2
40882: PUSH
40883: LD_VAR 0 9
40887: PUSH
40888: LD_INT 1
40890: PPUSH
40891: LD_VAR 0 9
40895: PPUSH
40896: CALL_OW 12
40900: ARRAY
40901: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40902: LD_VAR 0 2
40906: PPUSH
40907: LD_VAR 0 3
40911: PPUSH
40912: CALL 41161 0 2
40916: NOT
40917: IFFALSE 40976
// repeat engine := _engine [ 1 ] ;
40919: LD_ADDR_VAR 0 3
40923: PUSH
40924: LD_VAR 0 11
40928: PUSH
40929: LD_INT 1
40931: ARRAY
40932: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40933: LD_ADDR_VAR 0 11
40937: PUSH
40938: LD_VAR 0 11
40942: PPUSH
40943: LD_INT 1
40945: PPUSH
40946: CALL_OW 3
40950: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40951: LD_VAR 0 2
40955: PPUSH
40956: LD_VAR 0 3
40960: PPUSH
40961: CALL 41161 0 2
40965: PUSH
40966: LD_VAR 0 11
40970: PUSH
40971: EMPTY
40972: EQUAL
40973: OR
40974: IFFALSE 40919
// if not control in _control then
40976: LD_VAR 0 4
40980: PUSH
40981: LD_VAR 0 12
40985: IN
40986: NOT
40987: IFFALSE 41013
// control := _control [ rand ( 1 , _control ) ] ;
40989: LD_ADDR_VAR 0 4
40993: PUSH
40994: LD_VAR 0 12
40998: PUSH
40999: LD_INT 1
41001: PPUSH
41002: LD_VAR 0 12
41006: PPUSH
41007: CALL_OW 12
41011: ARRAY
41012: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41013: LD_VAR 0 2
41017: PPUSH
41018: LD_VAR 0 5
41022: PPUSH
41023: CALL 41381 0 2
41027: NOT
41028: IFFALSE 41087
// repeat weapon := _weapon [ 1 ] ;
41030: LD_ADDR_VAR 0 5
41034: PUSH
41035: LD_VAR 0 10
41039: PUSH
41040: LD_INT 1
41042: ARRAY
41043: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41044: LD_ADDR_VAR 0 10
41048: PUSH
41049: LD_VAR 0 10
41053: PPUSH
41054: LD_INT 1
41056: PPUSH
41057: CALL_OW 3
41061: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41062: LD_VAR 0 2
41066: PPUSH
41067: LD_VAR 0 5
41071: PPUSH
41072: CALL 41381 0 2
41076: PUSH
41077: LD_VAR 0 10
41081: PUSH
41082: EMPTY
41083: EQUAL
41084: OR
41085: IFFALSE 41030
// result := [ ] ;
41087: LD_ADDR_VAR 0 6
41091: PUSH
41092: EMPTY
41093: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41094: LD_VAR 0 1
41098: PPUSH
41099: LD_VAR 0 2
41103: PPUSH
41104: LD_VAR 0 3
41108: PPUSH
41109: LD_VAR 0 4
41113: PPUSH
41114: LD_VAR 0 5
41118: PPUSH
41119: CALL_OW 448
41123: IFFALSE 41156
// result := [ chassis , engine , control , weapon ] ;
41125: LD_ADDR_VAR 0 6
41129: PUSH
41130: LD_VAR 0 2
41134: PUSH
41135: LD_VAR 0 3
41139: PUSH
41140: LD_VAR 0 4
41144: PUSH
41145: LD_VAR 0 5
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: ST_TO_ADDR
// end ;
41156: LD_VAR 0 6
41160: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41161: LD_INT 0
41163: PPUSH
// if not chassis or not engine then
41164: LD_VAR 0 1
41168: NOT
41169: PUSH
41170: LD_VAR 0 2
41174: NOT
41175: OR
41176: IFFALSE 41180
// exit ;
41178: GO 41376
// case engine of engine_solar :
41180: LD_VAR 0 2
41184: PUSH
41185: LD_INT 2
41187: DOUBLE
41188: EQUAL
41189: IFTRUE 41193
41191: GO 41231
41193: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41194: LD_ADDR_VAR 0 3
41198: PUSH
41199: LD_INT 11
41201: PUSH
41202: LD_INT 12
41204: PUSH
41205: LD_INT 13
41207: PUSH
41208: LD_INT 14
41210: PUSH
41211: LD_INT 1
41213: PUSH
41214: LD_INT 2
41216: PUSH
41217: LD_INT 3
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: ST_TO_ADDR
41229: GO 41360
41231: LD_INT 1
41233: DOUBLE
41234: EQUAL
41235: IFTRUE 41239
41237: GO 41301
41239: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41240: LD_ADDR_VAR 0 3
41244: PUSH
41245: LD_INT 11
41247: PUSH
41248: LD_INT 12
41250: PUSH
41251: LD_INT 13
41253: PUSH
41254: LD_INT 14
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: LD_INT 2
41262: PUSH
41263: LD_INT 3
41265: PUSH
41266: LD_INT 4
41268: PUSH
41269: LD_INT 5
41271: PUSH
41272: LD_INT 21
41274: PUSH
41275: LD_INT 23
41277: PUSH
41278: LD_INT 22
41280: PUSH
41281: LD_INT 24
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: ST_TO_ADDR
41299: GO 41360
41301: LD_INT 3
41303: DOUBLE
41304: EQUAL
41305: IFTRUE 41309
41307: GO 41359
41309: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41310: LD_ADDR_VAR 0 3
41314: PUSH
41315: LD_INT 13
41317: PUSH
41318: LD_INT 14
41320: PUSH
41321: LD_INT 2
41323: PUSH
41324: LD_INT 3
41326: PUSH
41327: LD_INT 4
41329: PUSH
41330: LD_INT 5
41332: PUSH
41333: LD_INT 21
41335: PUSH
41336: LD_INT 22
41338: PUSH
41339: LD_INT 23
41341: PUSH
41342: LD_INT 24
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: ST_TO_ADDR
41357: GO 41360
41359: POP
// result := ( chassis in result ) ;
41360: LD_ADDR_VAR 0 3
41364: PUSH
41365: LD_VAR 0 1
41369: PUSH
41370: LD_VAR 0 3
41374: IN
41375: ST_TO_ADDR
// end ;
41376: LD_VAR 0 3
41380: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41381: LD_INT 0
41383: PPUSH
// if not chassis or not weapon then
41384: LD_VAR 0 1
41388: NOT
41389: PUSH
41390: LD_VAR 0 2
41394: NOT
41395: OR
41396: IFFALSE 41400
// exit ;
41398: GO 42460
// case weapon of us_machine_gun :
41400: LD_VAR 0 2
41404: PUSH
41405: LD_INT 2
41407: DOUBLE
41408: EQUAL
41409: IFTRUE 41413
41411: GO 41443
41413: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41414: LD_ADDR_VAR 0 3
41418: PUSH
41419: LD_INT 1
41421: PUSH
41422: LD_INT 2
41424: PUSH
41425: LD_INT 3
41427: PUSH
41428: LD_INT 4
41430: PUSH
41431: LD_INT 5
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: ST_TO_ADDR
41441: GO 42444
41443: LD_INT 3
41445: DOUBLE
41446: EQUAL
41447: IFTRUE 41451
41449: GO 41481
41451: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41452: LD_ADDR_VAR 0 3
41456: PUSH
41457: LD_INT 1
41459: PUSH
41460: LD_INT 2
41462: PUSH
41463: LD_INT 3
41465: PUSH
41466: LD_INT 4
41468: PUSH
41469: LD_INT 5
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: ST_TO_ADDR
41479: GO 42444
41481: LD_INT 11
41483: DOUBLE
41484: EQUAL
41485: IFTRUE 41489
41487: GO 41519
41489: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41490: LD_ADDR_VAR 0 3
41494: PUSH
41495: LD_INT 1
41497: PUSH
41498: LD_INT 2
41500: PUSH
41501: LD_INT 3
41503: PUSH
41504: LD_INT 4
41506: PUSH
41507: LD_INT 5
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: ST_TO_ADDR
41517: GO 42444
41519: LD_INT 4
41521: DOUBLE
41522: EQUAL
41523: IFTRUE 41527
41525: GO 41553
41527: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41528: LD_ADDR_VAR 0 3
41532: PUSH
41533: LD_INT 2
41535: PUSH
41536: LD_INT 3
41538: PUSH
41539: LD_INT 4
41541: PUSH
41542: LD_INT 5
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: ST_TO_ADDR
41551: GO 42444
41553: LD_INT 5
41555: DOUBLE
41556: EQUAL
41557: IFTRUE 41561
41559: GO 41587
41561: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41562: LD_ADDR_VAR 0 3
41566: PUSH
41567: LD_INT 2
41569: PUSH
41570: LD_INT 3
41572: PUSH
41573: LD_INT 4
41575: PUSH
41576: LD_INT 5
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: ST_TO_ADDR
41585: GO 42444
41587: LD_INT 9
41589: DOUBLE
41590: EQUAL
41591: IFTRUE 41595
41593: GO 41621
41595: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41596: LD_ADDR_VAR 0 3
41600: PUSH
41601: LD_INT 2
41603: PUSH
41604: LD_INT 3
41606: PUSH
41607: LD_INT 4
41609: PUSH
41610: LD_INT 5
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: ST_TO_ADDR
41619: GO 42444
41621: LD_INT 7
41623: DOUBLE
41624: EQUAL
41625: IFTRUE 41629
41627: GO 41655
41629: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41630: LD_ADDR_VAR 0 3
41634: PUSH
41635: LD_INT 2
41637: PUSH
41638: LD_INT 3
41640: PUSH
41641: LD_INT 4
41643: PUSH
41644: LD_INT 5
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: ST_TO_ADDR
41653: GO 42444
41655: LD_INT 12
41657: DOUBLE
41658: EQUAL
41659: IFTRUE 41663
41661: GO 41689
41663: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41664: LD_ADDR_VAR 0 3
41668: PUSH
41669: LD_INT 2
41671: PUSH
41672: LD_INT 3
41674: PUSH
41675: LD_INT 4
41677: PUSH
41678: LD_INT 5
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: ST_TO_ADDR
41687: GO 42444
41689: LD_INT 13
41691: DOUBLE
41692: EQUAL
41693: IFTRUE 41697
41695: GO 41723
41697: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41698: LD_ADDR_VAR 0 3
41702: PUSH
41703: LD_INT 2
41705: PUSH
41706: LD_INT 3
41708: PUSH
41709: LD_INT 4
41711: PUSH
41712: LD_INT 5
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: ST_TO_ADDR
41721: GO 42444
41723: LD_INT 14
41725: DOUBLE
41726: EQUAL
41727: IFTRUE 41731
41729: GO 41749
41731: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41732: LD_ADDR_VAR 0 3
41736: PUSH
41737: LD_INT 4
41739: PUSH
41740: LD_INT 5
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: ST_TO_ADDR
41747: GO 42444
41749: LD_INT 6
41751: DOUBLE
41752: EQUAL
41753: IFTRUE 41757
41755: GO 41775
41757: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41758: LD_ADDR_VAR 0 3
41762: PUSH
41763: LD_INT 4
41765: PUSH
41766: LD_INT 5
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: ST_TO_ADDR
41773: GO 42444
41775: LD_INT 10
41777: DOUBLE
41778: EQUAL
41779: IFTRUE 41783
41781: GO 41801
41783: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41784: LD_ADDR_VAR 0 3
41788: PUSH
41789: LD_INT 4
41791: PUSH
41792: LD_INT 5
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: ST_TO_ADDR
41799: GO 42444
41801: LD_INT 22
41803: DOUBLE
41804: EQUAL
41805: IFTRUE 41809
41807: GO 41835
41809: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41810: LD_ADDR_VAR 0 3
41814: PUSH
41815: LD_INT 11
41817: PUSH
41818: LD_INT 12
41820: PUSH
41821: LD_INT 13
41823: PUSH
41824: LD_INT 14
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: ST_TO_ADDR
41833: GO 42444
41835: LD_INT 23
41837: DOUBLE
41838: EQUAL
41839: IFTRUE 41843
41841: GO 41869
41843: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41844: LD_ADDR_VAR 0 3
41848: PUSH
41849: LD_INT 11
41851: PUSH
41852: LD_INT 12
41854: PUSH
41855: LD_INT 13
41857: PUSH
41858: LD_INT 14
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: ST_TO_ADDR
41867: GO 42444
41869: LD_INT 24
41871: DOUBLE
41872: EQUAL
41873: IFTRUE 41877
41875: GO 41903
41877: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41878: LD_ADDR_VAR 0 3
41882: PUSH
41883: LD_INT 11
41885: PUSH
41886: LD_INT 12
41888: PUSH
41889: LD_INT 13
41891: PUSH
41892: LD_INT 14
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: ST_TO_ADDR
41901: GO 42444
41903: LD_INT 30
41905: DOUBLE
41906: EQUAL
41907: IFTRUE 41911
41909: GO 41937
41911: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41912: LD_ADDR_VAR 0 3
41916: PUSH
41917: LD_INT 11
41919: PUSH
41920: LD_INT 12
41922: PUSH
41923: LD_INT 13
41925: PUSH
41926: LD_INT 14
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: ST_TO_ADDR
41935: GO 42444
41937: LD_INT 25
41939: DOUBLE
41940: EQUAL
41941: IFTRUE 41945
41943: GO 41963
41945: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41946: LD_ADDR_VAR 0 3
41950: PUSH
41951: LD_INT 13
41953: PUSH
41954: LD_INT 14
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: ST_TO_ADDR
41961: GO 42444
41963: LD_INT 27
41965: DOUBLE
41966: EQUAL
41967: IFTRUE 41971
41969: GO 41989
41971: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41972: LD_ADDR_VAR 0 3
41976: PUSH
41977: LD_INT 13
41979: PUSH
41980: LD_INT 14
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: ST_TO_ADDR
41987: GO 42444
41989: LD_INT 92
41991: DOUBLE
41992: EQUAL
41993: IFTRUE 41997
41995: GO 42023
41997: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41998: LD_ADDR_VAR 0 3
42002: PUSH
42003: LD_INT 11
42005: PUSH
42006: LD_INT 12
42008: PUSH
42009: LD_INT 13
42011: PUSH
42012: LD_INT 14
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: ST_TO_ADDR
42021: GO 42444
42023: LD_INT 28
42025: DOUBLE
42026: EQUAL
42027: IFTRUE 42031
42029: GO 42049
42031: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42032: LD_ADDR_VAR 0 3
42036: PUSH
42037: LD_INT 13
42039: PUSH
42040: LD_INT 14
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: ST_TO_ADDR
42047: GO 42444
42049: LD_INT 29
42051: DOUBLE
42052: EQUAL
42053: IFTRUE 42057
42055: GO 42075
42057: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42058: LD_ADDR_VAR 0 3
42062: PUSH
42063: LD_INT 13
42065: PUSH
42066: LD_INT 14
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: ST_TO_ADDR
42073: GO 42444
42075: LD_INT 31
42077: DOUBLE
42078: EQUAL
42079: IFTRUE 42083
42081: GO 42101
42083: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42084: LD_ADDR_VAR 0 3
42088: PUSH
42089: LD_INT 13
42091: PUSH
42092: LD_INT 14
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: ST_TO_ADDR
42099: GO 42444
42101: LD_INT 26
42103: DOUBLE
42104: EQUAL
42105: IFTRUE 42109
42107: GO 42127
42109: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42110: LD_ADDR_VAR 0 3
42114: PUSH
42115: LD_INT 13
42117: PUSH
42118: LD_INT 14
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: ST_TO_ADDR
42125: GO 42444
42127: LD_INT 42
42129: DOUBLE
42130: EQUAL
42131: IFTRUE 42135
42133: GO 42161
42135: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42136: LD_ADDR_VAR 0 3
42140: PUSH
42141: LD_INT 21
42143: PUSH
42144: LD_INT 22
42146: PUSH
42147: LD_INT 23
42149: PUSH
42150: LD_INT 24
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: ST_TO_ADDR
42159: GO 42444
42161: LD_INT 43
42163: DOUBLE
42164: EQUAL
42165: IFTRUE 42169
42167: GO 42195
42169: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42170: LD_ADDR_VAR 0 3
42174: PUSH
42175: LD_INT 21
42177: PUSH
42178: LD_INT 22
42180: PUSH
42181: LD_INT 23
42183: PUSH
42184: LD_INT 24
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: ST_TO_ADDR
42193: GO 42444
42195: LD_INT 44
42197: DOUBLE
42198: EQUAL
42199: IFTRUE 42203
42201: GO 42229
42203: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42204: LD_ADDR_VAR 0 3
42208: PUSH
42209: LD_INT 21
42211: PUSH
42212: LD_INT 22
42214: PUSH
42215: LD_INT 23
42217: PUSH
42218: LD_INT 24
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: ST_TO_ADDR
42227: GO 42444
42229: LD_INT 45
42231: DOUBLE
42232: EQUAL
42233: IFTRUE 42237
42235: GO 42263
42237: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42238: LD_ADDR_VAR 0 3
42242: PUSH
42243: LD_INT 21
42245: PUSH
42246: LD_INT 22
42248: PUSH
42249: LD_INT 23
42251: PUSH
42252: LD_INT 24
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: ST_TO_ADDR
42261: GO 42444
42263: LD_INT 49
42265: DOUBLE
42266: EQUAL
42267: IFTRUE 42271
42269: GO 42297
42271: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42272: LD_ADDR_VAR 0 3
42276: PUSH
42277: LD_INT 21
42279: PUSH
42280: LD_INT 22
42282: PUSH
42283: LD_INT 23
42285: PUSH
42286: LD_INT 24
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: ST_TO_ADDR
42295: GO 42444
42297: LD_INT 51
42299: DOUBLE
42300: EQUAL
42301: IFTRUE 42305
42303: GO 42331
42305: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42306: LD_ADDR_VAR 0 3
42310: PUSH
42311: LD_INT 21
42313: PUSH
42314: LD_INT 22
42316: PUSH
42317: LD_INT 23
42319: PUSH
42320: LD_INT 24
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: ST_TO_ADDR
42329: GO 42444
42331: LD_INT 52
42333: DOUBLE
42334: EQUAL
42335: IFTRUE 42339
42337: GO 42365
42339: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42340: LD_ADDR_VAR 0 3
42344: PUSH
42345: LD_INT 21
42347: PUSH
42348: LD_INT 22
42350: PUSH
42351: LD_INT 23
42353: PUSH
42354: LD_INT 24
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: ST_TO_ADDR
42363: GO 42444
42365: LD_INT 53
42367: DOUBLE
42368: EQUAL
42369: IFTRUE 42373
42371: GO 42391
42373: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42374: LD_ADDR_VAR 0 3
42378: PUSH
42379: LD_INT 23
42381: PUSH
42382: LD_INT 24
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: ST_TO_ADDR
42389: GO 42444
42391: LD_INT 46
42393: DOUBLE
42394: EQUAL
42395: IFTRUE 42399
42397: GO 42417
42399: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42400: LD_ADDR_VAR 0 3
42404: PUSH
42405: LD_INT 23
42407: PUSH
42408: LD_INT 24
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: ST_TO_ADDR
42415: GO 42444
42417: LD_INT 47
42419: DOUBLE
42420: EQUAL
42421: IFTRUE 42425
42423: GO 42443
42425: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42426: LD_ADDR_VAR 0 3
42430: PUSH
42431: LD_INT 23
42433: PUSH
42434: LD_INT 24
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: ST_TO_ADDR
42441: GO 42444
42443: POP
// result := ( chassis in result ) ;
42444: LD_ADDR_VAR 0 3
42448: PUSH
42449: LD_VAR 0 1
42453: PUSH
42454: LD_VAR 0 3
42458: IN
42459: ST_TO_ADDR
// end ;
42460: LD_VAR 0 3
42464: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42465: LD_INT 0
42467: PPUSH
42468: PPUSH
42469: PPUSH
42470: PPUSH
42471: PPUSH
42472: PPUSH
42473: PPUSH
// result := array ;
42474: LD_ADDR_VAR 0 5
42478: PUSH
42479: LD_VAR 0 1
42483: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42484: LD_VAR 0 1
42488: NOT
42489: PUSH
42490: LD_VAR 0 2
42494: NOT
42495: OR
42496: PUSH
42497: LD_VAR 0 3
42501: NOT
42502: OR
42503: PUSH
42504: LD_VAR 0 2
42508: PUSH
42509: LD_VAR 0 1
42513: GREATER
42514: OR
42515: PUSH
42516: LD_VAR 0 3
42520: PUSH
42521: LD_VAR 0 1
42525: GREATER
42526: OR
42527: IFFALSE 42531
// exit ;
42529: GO 42827
// if direction then
42531: LD_VAR 0 4
42535: IFFALSE 42599
// begin d := 1 ;
42537: LD_ADDR_VAR 0 9
42541: PUSH
42542: LD_INT 1
42544: ST_TO_ADDR
// if i_from > i_to then
42545: LD_VAR 0 2
42549: PUSH
42550: LD_VAR 0 3
42554: GREATER
42555: IFFALSE 42581
// length := ( array - i_from ) + i_to else
42557: LD_ADDR_VAR 0 11
42561: PUSH
42562: LD_VAR 0 1
42566: PUSH
42567: LD_VAR 0 2
42571: MINUS
42572: PUSH
42573: LD_VAR 0 3
42577: PLUS
42578: ST_TO_ADDR
42579: GO 42597
// length := i_to - i_from ;
42581: LD_ADDR_VAR 0 11
42585: PUSH
42586: LD_VAR 0 3
42590: PUSH
42591: LD_VAR 0 2
42595: MINUS
42596: ST_TO_ADDR
// end else
42597: GO 42660
// begin d := - 1 ;
42599: LD_ADDR_VAR 0 9
42603: PUSH
42604: LD_INT 1
42606: NEG
42607: ST_TO_ADDR
// if i_from > i_to then
42608: LD_VAR 0 2
42612: PUSH
42613: LD_VAR 0 3
42617: GREATER
42618: IFFALSE 42638
// length := i_from - i_to else
42620: LD_ADDR_VAR 0 11
42624: PUSH
42625: LD_VAR 0 2
42629: PUSH
42630: LD_VAR 0 3
42634: MINUS
42635: ST_TO_ADDR
42636: GO 42660
// length := ( array - i_to ) + i_from ;
42638: LD_ADDR_VAR 0 11
42642: PUSH
42643: LD_VAR 0 1
42647: PUSH
42648: LD_VAR 0 3
42652: MINUS
42653: PUSH
42654: LD_VAR 0 2
42658: PLUS
42659: ST_TO_ADDR
// end ; if not length then
42660: LD_VAR 0 11
42664: NOT
42665: IFFALSE 42669
// exit ;
42667: GO 42827
// tmp := array ;
42669: LD_ADDR_VAR 0 10
42673: PUSH
42674: LD_VAR 0 1
42678: ST_TO_ADDR
// for i = 1 to length do
42679: LD_ADDR_VAR 0 6
42683: PUSH
42684: DOUBLE
42685: LD_INT 1
42687: DEC
42688: ST_TO_ADDR
42689: LD_VAR 0 11
42693: PUSH
42694: FOR_TO
42695: IFFALSE 42815
// begin for j = 1 to array do
42697: LD_ADDR_VAR 0 7
42701: PUSH
42702: DOUBLE
42703: LD_INT 1
42705: DEC
42706: ST_TO_ADDR
42707: LD_VAR 0 1
42711: PUSH
42712: FOR_TO
42713: IFFALSE 42801
// begin k := j + d ;
42715: LD_ADDR_VAR 0 8
42719: PUSH
42720: LD_VAR 0 7
42724: PUSH
42725: LD_VAR 0 9
42729: PLUS
42730: ST_TO_ADDR
// if k > array then
42731: LD_VAR 0 8
42735: PUSH
42736: LD_VAR 0 1
42740: GREATER
42741: IFFALSE 42751
// k := 1 ;
42743: LD_ADDR_VAR 0 8
42747: PUSH
42748: LD_INT 1
42750: ST_TO_ADDR
// if not k then
42751: LD_VAR 0 8
42755: NOT
42756: IFFALSE 42768
// k := array ;
42758: LD_ADDR_VAR 0 8
42762: PUSH
42763: LD_VAR 0 1
42767: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42768: LD_ADDR_VAR 0 10
42772: PUSH
42773: LD_VAR 0 10
42777: PPUSH
42778: LD_VAR 0 8
42782: PPUSH
42783: LD_VAR 0 1
42787: PUSH
42788: LD_VAR 0 7
42792: ARRAY
42793: PPUSH
42794: CALL_OW 1
42798: ST_TO_ADDR
// end ;
42799: GO 42712
42801: POP
42802: POP
// array := tmp ;
42803: LD_ADDR_VAR 0 1
42807: PUSH
42808: LD_VAR 0 10
42812: ST_TO_ADDR
// end ;
42813: GO 42694
42815: POP
42816: POP
// result := array ;
42817: LD_ADDR_VAR 0 5
42821: PUSH
42822: LD_VAR 0 1
42826: ST_TO_ADDR
// end ;
42827: LD_VAR 0 5
42831: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42832: LD_INT 0
42834: PPUSH
42835: PPUSH
// result := 0 ;
42836: LD_ADDR_VAR 0 3
42840: PUSH
42841: LD_INT 0
42843: ST_TO_ADDR
// if not array or not value in array then
42844: LD_VAR 0 1
42848: NOT
42849: PUSH
42850: LD_VAR 0 2
42854: PUSH
42855: LD_VAR 0 1
42859: IN
42860: NOT
42861: OR
42862: IFFALSE 42866
// exit ;
42864: GO 42920
// for i = 1 to array do
42866: LD_ADDR_VAR 0 4
42870: PUSH
42871: DOUBLE
42872: LD_INT 1
42874: DEC
42875: ST_TO_ADDR
42876: LD_VAR 0 1
42880: PUSH
42881: FOR_TO
42882: IFFALSE 42918
// if value = array [ i ] then
42884: LD_VAR 0 2
42888: PUSH
42889: LD_VAR 0 1
42893: PUSH
42894: LD_VAR 0 4
42898: ARRAY
42899: EQUAL
42900: IFFALSE 42916
// begin result := i ;
42902: LD_ADDR_VAR 0 3
42906: PUSH
42907: LD_VAR 0 4
42911: ST_TO_ADDR
// exit ;
42912: POP
42913: POP
42914: GO 42920
// end ;
42916: GO 42881
42918: POP
42919: POP
// end ;
42920: LD_VAR 0 3
42924: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42925: LD_INT 0
42927: PPUSH
// vc_chassis := chassis ;
42928: LD_ADDR_OWVAR 37
42932: PUSH
42933: LD_VAR 0 1
42937: ST_TO_ADDR
// vc_engine := engine ;
42938: LD_ADDR_OWVAR 39
42942: PUSH
42943: LD_VAR 0 2
42947: ST_TO_ADDR
// vc_control := control ;
42948: LD_ADDR_OWVAR 38
42952: PUSH
42953: LD_VAR 0 3
42957: ST_TO_ADDR
// vc_weapon := weapon ;
42958: LD_ADDR_OWVAR 40
42962: PUSH
42963: LD_VAR 0 4
42967: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42968: LD_ADDR_OWVAR 41
42972: PUSH
42973: LD_VAR 0 5
42977: ST_TO_ADDR
// end ;
42978: LD_VAR 0 6
42982: RET
// export function WantPlant ( unit ) ; var task ; begin
42983: LD_INT 0
42985: PPUSH
42986: PPUSH
// result := false ;
42987: LD_ADDR_VAR 0 2
42991: PUSH
42992: LD_INT 0
42994: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42995: LD_ADDR_VAR 0 3
42999: PUSH
43000: LD_VAR 0 1
43004: PPUSH
43005: CALL_OW 437
43009: ST_TO_ADDR
// if task then
43010: LD_VAR 0 3
43014: IFFALSE 43042
// if task [ 1 ] [ 1 ] = p then
43016: LD_VAR 0 3
43020: PUSH
43021: LD_INT 1
43023: ARRAY
43024: PUSH
43025: LD_INT 1
43027: ARRAY
43028: PUSH
43029: LD_STRING p
43031: EQUAL
43032: IFFALSE 43042
// result := true ;
43034: LD_ADDR_VAR 0 2
43038: PUSH
43039: LD_INT 1
43041: ST_TO_ADDR
// end ;
43042: LD_VAR 0 2
43046: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43047: LD_INT 0
43049: PPUSH
43050: PPUSH
43051: PPUSH
43052: PPUSH
// if pos < 1 then
43053: LD_VAR 0 2
43057: PUSH
43058: LD_INT 1
43060: LESS
43061: IFFALSE 43065
// exit ;
43063: GO 43368
// if pos = 1 then
43065: LD_VAR 0 2
43069: PUSH
43070: LD_INT 1
43072: EQUAL
43073: IFFALSE 43106
// result := Replace ( arr , pos [ 1 ] , value ) else
43075: LD_ADDR_VAR 0 4
43079: PUSH
43080: LD_VAR 0 1
43084: PPUSH
43085: LD_VAR 0 2
43089: PUSH
43090: LD_INT 1
43092: ARRAY
43093: PPUSH
43094: LD_VAR 0 3
43098: PPUSH
43099: CALL_OW 1
43103: ST_TO_ADDR
43104: GO 43368
// begin tmp := arr ;
43106: LD_ADDR_VAR 0 6
43110: PUSH
43111: LD_VAR 0 1
43115: ST_TO_ADDR
// s_arr := [ tmp ] ;
43116: LD_ADDR_VAR 0 7
43120: PUSH
43121: LD_VAR 0 6
43125: PUSH
43126: EMPTY
43127: LIST
43128: ST_TO_ADDR
// for i = 1 to pos - 1 do
43129: LD_ADDR_VAR 0 5
43133: PUSH
43134: DOUBLE
43135: LD_INT 1
43137: DEC
43138: ST_TO_ADDR
43139: LD_VAR 0 2
43143: PUSH
43144: LD_INT 1
43146: MINUS
43147: PUSH
43148: FOR_TO
43149: IFFALSE 43194
// begin tmp := tmp [ pos [ i ] ] ;
43151: LD_ADDR_VAR 0 6
43155: PUSH
43156: LD_VAR 0 6
43160: PUSH
43161: LD_VAR 0 2
43165: PUSH
43166: LD_VAR 0 5
43170: ARRAY
43171: ARRAY
43172: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43173: LD_ADDR_VAR 0 7
43177: PUSH
43178: LD_VAR 0 7
43182: PUSH
43183: LD_VAR 0 6
43187: PUSH
43188: EMPTY
43189: LIST
43190: ADD
43191: ST_TO_ADDR
// end ;
43192: GO 43148
43194: POP
43195: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43196: LD_ADDR_VAR 0 6
43200: PUSH
43201: LD_VAR 0 6
43205: PPUSH
43206: LD_VAR 0 2
43210: PUSH
43211: LD_VAR 0 2
43215: ARRAY
43216: PPUSH
43217: LD_VAR 0 3
43221: PPUSH
43222: CALL_OW 1
43226: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43227: LD_ADDR_VAR 0 7
43231: PUSH
43232: LD_VAR 0 7
43236: PPUSH
43237: LD_VAR 0 7
43241: PPUSH
43242: LD_VAR 0 6
43246: PPUSH
43247: CALL_OW 1
43251: ST_TO_ADDR
// for i = s_arr downto 2 do
43252: LD_ADDR_VAR 0 5
43256: PUSH
43257: DOUBLE
43258: LD_VAR 0 7
43262: INC
43263: ST_TO_ADDR
43264: LD_INT 2
43266: PUSH
43267: FOR_DOWNTO
43268: IFFALSE 43352
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43270: LD_ADDR_VAR 0 6
43274: PUSH
43275: LD_VAR 0 7
43279: PUSH
43280: LD_VAR 0 5
43284: PUSH
43285: LD_INT 1
43287: MINUS
43288: ARRAY
43289: PPUSH
43290: LD_VAR 0 2
43294: PUSH
43295: LD_VAR 0 5
43299: PUSH
43300: LD_INT 1
43302: MINUS
43303: ARRAY
43304: PPUSH
43305: LD_VAR 0 7
43309: PUSH
43310: LD_VAR 0 5
43314: ARRAY
43315: PPUSH
43316: CALL_OW 1
43320: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43321: LD_ADDR_VAR 0 7
43325: PUSH
43326: LD_VAR 0 7
43330: PPUSH
43331: LD_VAR 0 5
43335: PUSH
43336: LD_INT 1
43338: MINUS
43339: PPUSH
43340: LD_VAR 0 6
43344: PPUSH
43345: CALL_OW 1
43349: ST_TO_ADDR
// end ;
43350: GO 43267
43352: POP
43353: POP
// result := s_arr [ 1 ] ;
43354: LD_ADDR_VAR 0 4
43358: PUSH
43359: LD_VAR 0 7
43363: PUSH
43364: LD_INT 1
43366: ARRAY
43367: ST_TO_ADDR
// end ; end ;
43368: LD_VAR 0 4
43372: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43373: LD_INT 0
43375: PPUSH
43376: PPUSH
// if not list then
43377: LD_VAR 0 1
43381: NOT
43382: IFFALSE 43386
// exit ;
43384: GO 43477
// i := list [ pos1 ] ;
43386: LD_ADDR_VAR 0 5
43390: PUSH
43391: LD_VAR 0 1
43395: PUSH
43396: LD_VAR 0 2
43400: ARRAY
43401: ST_TO_ADDR
// if not i then
43402: LD_VAR 0 5
43406: NOT
43407: IFFALSE 43411
// exit ;
43409: GO 43477
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43411: LD_ADDR_VAR 0 1
43415: PUSH
43416: LD_VAR 0 1
43420: PPUSH
43421: LD_VAR 0 2
43425: PPUSH
43426: LD_VAR 0 1
43430: PUSH
43431: LD_VAR 0 3
43435: ARRAY
43436: PPUSH
43437: CALL_OW 1
43441: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43442: LD_ADDR_VAR 0 1
43446: PUSH
43447: LD_VAR 0 1
43451: PPUSH
43452: LD_VAR 0 3
43456: PPUSH
43457: LD_VAR 0 5
43461: PPUSH
43462: CALL_OW 1
43466: ST_TO_ADDR
// result := list ;
43467: LD_ADDR_VAR 0 4
43471: PUSH
43472: LD_VAR 0 1
43476: ST_TO_ADDR
// end ;
43477: LD_VAR 0 4
43481: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43482: LD_INT 0
43484: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43485: LD_ADDR_VAR 0 5
43489: PUSH
43490: LD_VAR 0 1
43494: PPUSH
43495: CALL_OW 250
43499: PPUSH
43500: LD_VAR 0 1
43504: PPUSH
43505: CALL_OW 251
43509: PPUSH
43510: LD_VAR 0 2
43514: PPUSH
43515: LD_VAR 0 3
43519: PPUSH
43520: LD_VAR 0 4
43524: PPUSH
43525: CALL 43535 0 5
43529: ST_TO_ADDR
// end ;
43530: LD_VAR 0 5
43534: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43535: LD_INT 0
43537: PPUSH
43538: PPUSH
43539: PPUSH
43540: PPUSH
// if not list then
43541: LD_VAR 0 3
43545: NOT
43546: IFFALSE 43550
// exit ;
43548: GO 43938
// result := [ ] ;
43550: LD_ADDR_VAR 0 6
43554: PUSH
43555: EMPTY
43556: ST_TO_ADDR
// for i in list do
43557: LD_ADDR_VAR 0 7
43561: PUSH
43562: LD_VAR 0 3
43566: PUSH
43567: FOR_IN
43568: IFFALSE 43770
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43570: LD_ADDR_VAR 0 9
43574: PUSH
43575: LD_VAR 0 7
43579: PPUSH
43580: LD_VAR 0 1
43584: PPUSH
43585: LD_VAR 0 2
43589: PPUSH
43590: CALL_OW 297
43594: ST_TO_ADDR
// if not result then
43595: LD_VAR 0 6
43599: NOT
43600: IFFALSE 43626
// result := [ [ i , tmp ] ] else
43602: LD_ADDR_VAR 0 6
43606: PUSH
43607: LD_VAR 0 7
43611: PUSH
43612: LD_VAR 0 9
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: EMPTY
43622: LIST
43623: ST_TO_ADDR
43624: GO 43768
// begin if result [ result ] [ 2 ] < tmp then
43626: LD_VAR 0 6
43630: PUSH
43631: LD_VAR 0 6
43635: ARRAY
43636: PUSH
43637: LD_INT 2
43639: ARRAY
43640: PUSH
43641: LD_VAR 0 9
43645: LESS
43646: IFFALSE 43688
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43648: LD_ADDR_VAR 0 6
43652: PUSH
43653: LD_VAR 0 6
43657: PPUSH
43658: LD_VAR 0 6
43662: PUSH
43663: LD_INT 1
43665: PLUS
43666: PPUSH
43667: LD_VAR 0 7
43671: PUSH
43672: LD_VAR 0 9
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PPUSH
43681: CALL_OW 2
43685: ST_TO_ADDR
43686: GO 43768
// for j = 1 to result do
43688: LD_ADDR_VAR 0 8
43692: PUSH
43693: DOUBLE
43694: LD_INT 1
43696: DEC
43697: ST_TO_ADDR
43698: LD_VAR 0 6
43702: PUSH
43703: FOR_TO
43704: IFFALSE 43766
// begin if tmp < result [ j ] [ 2 ] then
43706: LD_VAR 0 9
43710: PUSH
43711: LD_VAR 0 6
43715: PUSH
43716: LD_VAR 0 8
43720: ARRAY
43721: PUSH
43722: LD_INT 2
43724: ARRAY
43725: LESS
43726: IFFALSE 43764
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43728: LD_ADDR_VAR 0 6
43732: PUSH
43733: LD_VAR 0 6
43737: PPUSH
43738: LD_VAR 0 8
43742: PPUSH
43743: LD_VAR 0 7
43747: PUSH
43748: LD_VAR 0 9
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PPUSH
43757: CALL_OW 2
43761: ST_TO_ADDR
// break ;
43762: GO 43766
// end ; end ;
43764: GO 43703
43766: POP
43767: POP
// end ; end ;
43768: GO 43567
43770: POP
43771: POP
// if result and not asc then
43772: LD_VAR 0 6
43776: PUSH
43777: LD_VAR 0 4
43781: NOT
43782: AND
43783: IFFALSE 43858
// begin tmp := result ;
43785: LD_ADDR_VAR 0 9
43789: PUSH
43790: LD_VAR 0 6
43794: ST_TO_ADDR
// for i = tmp downto 1 do
43795: LD_ADDR_VAR 0 7
43799: PUSH
43800: DOUBLE
43801: LD_VAR 0 9
43805: INC
43806: ST_TO_ADDR
43807: LD_INT 1
43809: PUSH
43810: FOR_DOWNTO
43811: IFFALSE 43856
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43813: LD_ADDR_VAR 0 6
43817: PUSH
43818: LD_VAR 0 6
43822: PPUSH
43823: LD_VAR 0 9
43827: PUSH
43828: LD_VAR 0 7
43832: MINUS
43833: PUSH
43834: LD_INT 1
43836: PLUS
43837: PPUSH
43838: LD_VAR 0 9
43842: PUSH
43843: LD_VAR 0 7
43847: ARRAY
43848: PPUSH
43849: CALL_OW 1
43853: ST_TO_ADDR
43854: GO 43810
43856: POP
43857: POP
// end ; tmp := [ ] ;
43858: LD_ADDR_VAR 0 9
43862: PUSH
43863: EMPTY
43864: ST_TO_ADDR
// if mode then
43865: LD_VAR 0 5
43869: IFFALSE 43938
// begin for i = 1 to result do
43871: LD_ADDR_VAR 0 7
43875: PUSH
43876: DOUBLE
43877: LD_INT 1
43879: DEC
43880: ST_TO_ADDR
43881: LD_VAR 0 6
43885: PUSH
43886: FOR_TO
43887: IFFALSE 43926
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43889: LD_ADDR_VAR 0 9
43893: PUSH
43894: LD_VAR 0 9
43898: PPUSH
43899: LD_VAR 0 7
43903: PPUSH
43904: LD_VAR 0 6
43908: PUSH
43909: LD_VAR 0 7
43913: ARRAY
43914: PUSH
43915: LD_INT 1
43917: ARRAY
43918: PPUSH
43919: CALL_OW 1
43923: ST_TO_ADDR
43924: GO 43886
43926: POP
43927: POP
// result := tmp ;
43928: LD_ADDR_VAR 0 6
43932: PUSH
43933: LD_VAR 0 9
43937: ST_TO_ADDR
// end ; end ;
43938: LD_VAR 0 6
43942: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43943: LD_INT 0
43945: PPUSH
43946: PPUSH
43947: PPUSH
43948: PPUSH
43949: PPUSH
43950: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43951: LD_ADDR_VAR 0 5
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: LD_INT 0
43961: PUSH
43962: LD_INT 0
43964: PUSH
43965: EMPTY
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: ST_TO_ADDR
// if not x or not y then
43973: LD_VAR 0 2
43977: NOT
43978: PUSH
43979: LD_VAR 0 3
43983: NOT
43984: OR
43985: IFFALSE 43989
// exit ;
43987: GO 45639
// if not range then
43989: LD_VAR 0 4
43993: NOT
43994: IFFALSE 44004
// range := 10 ;
43996: LD_ADDR_VAR 0 4
44000: PUSH
44001: LD_INT 10
44003: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44004: LD_ADDR_VAR 0 8
44008: PUSH
44009: LD_INT 81
44011: PUSH
44012: LD_VAR 0 1
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 92
44023: PUSH
44024: LD_VAR 0 2
44028: PUSH
44029: LD_VAR 0 3
44033: PUSH
44034: LD_VAR 0 4
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 3
44047: PUSH
44048: LD_INT 21
44050: PUSH
44051: LD_INT 3
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: LIST
44066: PPUSH
44067: CALL_OW 69
44071: ST_TO_ADDR
// if not tmp then
44072: LD_VAR 0 8
44076: NOT
44077: IFFALSE 44081
// exit ;
44079: GO 45639
// for i in tmp do
44081: LD_ADDR_VAR 0 6
44085: PUSH
44086: LD_VAR 0 8
44090: PUSH
44091: FOR_IN
44092: IFFALSE 45614
// begin points := [ 0 , 0 , 0 ] ;
44094: LD_ADDR_VAR 0 9
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: LD_INT 0
44104: PUSH
44105: LD_INT 0
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: LIST
44112: ST_TO_ADDR
// bpoints := 1 ;
44113: LD_ADDR_VAR 0 10
44117: PUSH
44118: LD_INT 1
44120: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44121: LD_VAR 0 6
44125: PPUSH
44126: CALL_OW 247
44130: PUSH
44131: LD_INT 1
44133: DOUBLE
44134: EQUAL
44135: IFTRUE 44139
44137: GO 44717
44139: POP
// begin if GetClass ( i ) = 1 then
44140: LD_VAR 0 6
44144: PPUSH
44145: CALL_OW 257
44149: PUSH
44150: LD_INT 1
44152: EQUAL
44153: IFFALSE 44174
// points := [ 10 , 5 , 3 ] ;
44155: LD_ADDR_VAR 0 9
44159: PUSH
44160: LD_INT 10
44162: PUSH
44163: LD_INT 5
44165: PUSH
44166: LD_INT 3
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: LIST
44173: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44174: LD_VAR 0 6
44178: PPUSH
44179: CALL_OW 257
44183: PUSH
44184: LD_INT 2
44186: PUSH
44187: LD_INT 3
44189: PUSH
44190: LD_INT 4
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: LIST
44197: IN
44198: IFFALSE 44219
// points := [ 3 , 2 , 1 ] ;
44200: LD_ADDR_VAR 0 9
44204: PUSH
44205: LD_INT 3
44207: PUSH
44208: LD_INT 2
44210: PUSH
44211: LD_INT 1
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: LIST
44218: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44219: LD_VAR 0 6
44223: PPUSH
44224: CALL_OW 257
44228: PUSH
44229: LD_INT 5
44231: EQUAL
44232: IFFALSE 44253
// points := [ 130 , 5 , 2 ] ;
44234: LD_ADDR_VAR 0 9
44238: PUSH
44239: LD_INT 130
44241: PUSH
44242: LD_INT 5
44244: PUSH
44245: LD_INT 2
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: LIST
44252: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44253: LD_VAR 0 6
44257: PPUSH
44258: CALL_OW 257
44262: PUSH
44263: LD_INT 8
44265: EQUAL
44266: IFFALSE 44287
// points := [ 35 , 35 , 30 ] ;
44268: LD_ADDR_VAR 0 9
44272: PUSH
44273: LD_INT 35
44275: PUSH
44276: LD_INT 35
44278: PUSH
44279: LD_INT 30
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: LIST
44286: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44287: LD_VAR 0 6
44291: PPUSH
44292: CALL_OW 257
44296: PUSH
44297: LD_INT 9
44299: EQUAL
44300: IFFALSE 44321
// points := [ 20 , 55 , 40 ] ;
44302: LD_ADDR_VAR 0 9
44306: PUSH
44307: LD_INT 20
44309: PUSH
44310: LD_INT 55
44312: PUSH
44313: LD_INT 40
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: LIST
44320: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44321: LD_VAR 0 6
44325: PPUSH
44326: CALL_OW 257
44330: PUSH
44331: LD_INT 12
44333: PUSH
44334: LD_INT 16
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: IN
44341: IFFALSE 44362
// points := [ 5 , 3 , 2 ] ;
44343: LD_ADDR_VAR 0 9
44347: PUSH
44348: LD_INT 5
44350: PUSH
44351: LD_INT 3
44353: PUSH
44354: LD_INT 2
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: LIST
44361: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44362: LD_VAR 0 6
44366: PPUSH
44367: CALL_OW 257
44371: PUSH
44372: LD_INT 17
44374: EQUAL
44375: IFFALSE 44396
// points := [ 100 , 50 , 75 ] ;
44377: LD_ADDR_VAR 0 9
44381: PUSH
44382: LD_INT 100
44384: PUSH
44385: LD_INT 50
44387: PUSH
44388: LD_INT 75
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: LIST
44395: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44396: LD_VAR 0 6
44400: PPUSH
44401: CALL_OW 257
44405: PUSH
44406: LD_INT 15
44408: EQUAL
44409: IFFALSE 44430
// points := [ 10 , 5 , 3 ] ;
44411: LD_ADDR_VAR 0 9
44415: PUSH
44416: LD_INT 10
44418: PUSH
44419: LD_INT 5
44421: PUSH
44422: LD_INT 3
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: LIST
44429: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44430: LD_VAR 0 6
44434: PPUSH
44435: CALL_OW 257
44439: PUSH
44440: LD_INT 14
44442: EQUAL
44443: IFFALSE 44464
// points := [ 10 , 0 , 0 ] ;
44445: LD_ADDR_VAR 0 9
44449: PUSH
44450: LD_INT 10
44452: PUSH
44453: LD_INT 0
44455: PUSH
44456: LD_INT 0
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: LIST
44463: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44464: LD_VAR 0 6
44468: PPUSH
44469: CALL_OW 257
44473: PUSH
44474: LD_INT 11
44476: EQUAL
44477: IFFALSE 44498
// points := [ 30 , 10 , 5 ] ;
44479: LD_ADDR_VAR 0 9
44483: PUSH
44484: LD_INT 30
44486: PUSH
44487: LD_INT 10
44489: PUSH
44490: LD_INT 5
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: LIST
44497: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44498: LD_VAR 0 1
44502: PPUSH
44503: LD_INT 5
44505: PPUSH
44506: CALL_OW 321
44510: PUSH
44511: LD_INT 2
44513: EQUAL
44514: IFFALSE 44531
// bpoints := bpoints * 1.8 ;
44516: LD_ADDR_VAR 0 10
44520: PUSH
44521: LD_VAR 0 10
44525: PUSH
44526: LD_REAL  1.80000000000000E+0000
44529: MUL
44530: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44531: LD_VAR 0 6
44535: PPUSH
44536: CALL_OW 257
44540: PUSH
44541: LD_INT 1
44543: PUSH
44544: LD_INT 2
44546: PUSH
44547: LD_INT 3
44549: PUSH
44550: LD_INT 4
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: IN
44559: PUSH
44560: LD_VAR 0 1
44564: PPUSH
44565: LD_INT 51
44567: PPUSH
44568: CALL_OW 321
44572: PUSH
44573: LD_INT 2
44575: EQUAL
44576: AND
44577: IFFALSE 44594
// bpoints := bpoints * 1.2 ;
44579: LD_ADDR_VAR 0 10
44583: PUSH
44584: LD_VAR 0 10
44588: PUSH
44589: LD_REAL  1.20000000000000E+0000
44592: MUL
44593: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44594: LD_VAR 0 6
44598: PPUSH
44599: CALL_OW 257
44603: PUSH
44604: LD_INT 5
44606: PUSH
44607: LD_INT 7
44609: PUSH
44610: LD_INT 9
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: LIST
44617: IN
44618: PUSH
44619: LD_VAR 0 1
44623: PPUSH
44624: LD_INT 52
44626: PPUSH
44627: CALL_OW 321
44631: PUSH
44632: LD_INT 2
44634: EQUAL
44635: AND
44636: IFFALSE 44653
// bpoints := bpoints * 1.5 ;
44638: LD_ADDR_VAR 0 10
44642: PUSH
44643: LD_VAR 0 10
44647: PUSH
44648: LD_REAL  1.50000000000000E+0000
44651: MUL
44652: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44653: LD_VAR 0 1
44657: PPUSH
44658: LD_INT 66
44660: PPUSH
44661: CALL_OW 321
44665: PUSH
44666: LD_INT 2
44668: EQUAL
44669: IFFALSE 44686
// bpoints := bpoints * 1.1 ;
44671: LD_ADDR_VAR 0 10
44675: PUSH
44676: LD_VAR 0 10
44680: PUSH
44681: LD_REAL  1.10000000000000E+0000
44684: MUL
44685: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44686: LD_ADDR_VAR 0 10
44690: PUSH
44691: LD_VAR 0 10
44695: PUSH
44696: LD_VAR 0 6
44700: PPUSH
44701: LD_INT 1
44703: PPUSH
44704: CALL_OW 259
44708: PUSH
44709: LD_REAL  1.15000000000000E+0000
44712: MUL
44713: MUL
44714: ST_TO_ADDR
// end ; unit_vehicle :
44715: GO 45543
44717: LD_INT 2
44719: DOUBLE
44720: EQUAL
44721: IFTRUE 44725
44723: GO 45531
44725: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44726: LD_VAR 0 6
44730: PPUSH
44731: CALL_OW 264
44735: PUSH
44736: LD_INT 2
44738: PUSH
44739: LD_INT 42
44741: PUSH
44742: LD_INT 24
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: LIST
44749: IN
44750: IFFALSE 44771
// points := [ 25 , 5 , 3 ] ;
44752: LD_ADDR_VAR 0 9
44756: PUSH
44757: LD_INT 25
44759: PUSH
44760: LD_INT 5
44762: PUSH
44763: LD_INT 3
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: LIST
44770: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44771: LD_VAR 0 6
44775: PPUSH
44776: CALL_OW 264
44780: PUSH
44781: LD_INT 4
44783: PUSH
44784: LD_INT 43
44786: PUSH
44787: LD_INT 25
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: LIST
44794: IN
44795: IFFALSE 44816
// points := [ 40 , 15 , 5 ] ;
44797: LD_ADDR_VAR 0 9
44801: PUSH
44802: LD_INT 40
44804: PUSH
44805: LD_INT 15
44807: PUSH
44808: LD_INT 5
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: LIST
44815: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44816: LD_VAR 0 6
44820: PPUSH
44821: CALL_OW 264
44825: PUSH
44826: LD_INT 3
44828: PUSH
44829: LD_INT 23
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: IN
44836: IFFALSE 44857
// points := [ 7 , 25 , 8 ] ;
44838: LD_ADDR_VAR 0 9
44842: PUSH
44843: LD_INT 7
44845: PUSH
44846: LD_INT 25
44848: PUSH
44849: LD_INT 8
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: LIST
44856: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44857: LD_VAR 0 6
44861: PPUSH
44862: CALL_OW 264
44866: PUSH
44867: LD_INT 5
44869: PUSH
44870: LD_INT 27
44872: PUSH
44873: LD_INT 44
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: LIST
44880: IN
44881: IFFALSE 44902
// points := [ 14 , 50 , 16 ] ;
44883: LD_ADDR_VAR 0 9
44887: PUSH
44888: LD_INT 14
44890: PUSH
44891: LD_INT 50
44893: PUSH
44894: LD_INT 16
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: LIST
44901: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44902: LD_VAR 0 6
44906: PPUSH
44907: CALL_OW 264
44911: PUSH
44912: LD_INT 6
44914: PUSH
44915: LD_INT 46
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: IN
44922: IFFALSE 44943
// points := [ 32 , 120 , 70 ] ;
44924: LD_ADDR_VAR 0 9
44928: PUSH
44929: LD_INT 32
44931: PUSH
44932: LD_INT 120
44934: PUSH
44935: LD_INT 70
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: LIST
44942: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44943: LD_VAR 0 6
44947: PPUSH
44948: CALL_OW 264
44952: PUSH
44953: LD_INT 7
44955: PUSH
44956: LD_INT 28
44958: PUSH
44959: LD_INT 45
44961: PUSH
44962: LD_INT 92
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: IN
44971: IFFALSE 44992
// points := [ 35 , 20 , 45 ] ;
44973: LD_ADDR_VAR 0 9
44977: PUSH
44978: LD_INT 35
44980: PUSH
44981: LD_INT 20
44983: PUSH
44984: LD_INT 45
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: LIST
44991: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44992: LD_VAR 0 6
44996: PPUSH
44997: CALL_OW 264
45001: PUSH
45002: LD_INT 47
45004: PUSH
45005: EMPTY
45006: LIST
45007: IN
45008: IFFALSE 45029
// points := [ 67 , 45 , 75 ] ;
45010: LD_ADDR_VAR 0 9
45014: PUSH
45015: LD_INT 67
45017: PUSH
45018: LD_INT 45
45020: PUSH
45021: LD_INT 75
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: LIST
45028: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45029: LD_VAR 0 6
45033: PPUSH
45034: CALL_OW 264
45038: PUSH
45039: LD_INT 26
45041: PUSH
45042: EMPTY
45043: LIST
45044: IN
45045: IFFALSE 45066
// points := [ 120 , 30 , 80 ] ;
45047: LD_ADDR_VAR 0 9
45051: PUSH
45052: LD_INT 120
45054: PUSH
45055: LD_INT 30
45057: PUSH
45058: LD_INT 80
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: LIST
45065: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45066: LD_VAR 0 6
45070: PPUSH
45071: CALL_OW 264
45075: PUSH
45076: LD_INT 22
45078: PUSH
45079: EMPTY
45080: LIST
45081: IN
45082: IFFALSE 45103
// points := [ 40 , 1 , 1 ] ;
45084: LD_ADDR_VAR 0 9
45088: PUSH
45089: LD_INT 40
45091: PUSH
45092: LD_INT 1
45094: PUSH
45095: LD_INT 1
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: LIST
45102: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45103: LD_VAR 0 6
45107: PPUSH
45108: CALL_OW 264
45112: PUSH
45113: LD_INT 29
45115: PUSH
45116: EMPTY
45117: LIST
45118: IN
45119: IFFALSE 45140
// points := [ 70 , 200 , 400 ] ;
45121: LD_ADDR_VAR 0 9
45125: PUSH
45126: LD_INT 70
45128: PUSH
45129: LD_INT 200
45131: PUSH
45132: LD_INT 400
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: LIST
45139: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45140: LD_VAR 0 6
45144: PPUSH
45145: CALL_OW 264
45149: PUSH
45150: LD_INT 14
45152: PUSH
45153: LD_INT 53
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: IN
45160: IFFALSE 45181
// points := [ 40 , 10 , 20 ] ;
45162: LD_ADDR_VAR 0 9
45166: PUSH
45167: LD_INT 40
45169: PUSH
45170: LD_INT 10
45172: PUSH
45173: LD_INT 20
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: LIST
45180: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45181: LD_VAR 0 6
45185: PPUSH
45186: CALL_OW 264
45190: PUSH
45191: LD_INT 9
45193: PUSH
45194: EMPTY
45195: LIST
45196: IN
45197: IFFALSE 45218
// points := [ 5 , 70 , 20 ] ;
45199: LD_ADDR_VAR 0 9
45203: PUSH
45204: LD_INT 5
45206: PUSH
45207: LD_INT 70
45209: PUSH
45210: LD_INT 20
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: LIST
45217: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45218: LD_VAR 0 6
45222: PPUSH
45223: CALL_OW 264
45227: PUSH
45228: LD_INT 10
45230: PUSH
45231: EMPTY
45232: LIST
45233: IN
45234: IFFALSE 45255
// points := [ 35 , 110 , 70 ] ;
45236: LD_ADDR_VAR 0 9
45240: PUSH
45241: LD_INT 35
45243: PUSH
45244: LD_INT 110
45246: PUSH
45247: LD_INT 70
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: LIST
45254: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45255: LD_VAR 0 6
45259: PPUSH
45260: CALL_OW 265
45264: PUSH
45265: LD_INT 25
45267: EQUAL
45268: IFFALSE 45289
// points := [ 80 , 65 , 100 ] ;
45270: LD_ADDR_VAR 0 9
45274: PUSH
45275: LD_INT 80
45277: PUSH
45278: LD_INT 65
45280: PUSH
45281: LD_INT 100
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: LIST
45288: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45289: LD_VAR 0 6
45293: PPUSH
45294: CALL_OW 263
45298: PUSH
45299: LD_INT 1
45301: EQUAL
45302: IFFALSE 45337
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45304: LD_ADDR_VAR 0 10
45308: PUSH
45309: LD_VAR 0 10
45313: PUSH
45314: LD_VAR 0 6
45318: PPUSH
45319: CALL_OW 311
45323: PPUSH
45324: LD_INT 3
45326: PPUSH
45327: CALL_OW 259
45331: PUSH
45332: LD_INT 4
45334: MUL
45335: MUL
45336: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45337: LD_VAR 0 6
45341: PPUSH
45342: CALL_OW 263
45346: PUSH
45347: LD_INT 2
45349: EQUAL
45350: IFFALSE 45401
// begin j := IsControledBy ( i ) ;
45352: LD_ADDR_VAR 0 7
45356: PUSH
45357: LD_VAR 0 6
45361: PPUSH
45362: CALL_OW 312
45366: ST_TO_ADDR
// if j then
45367: LD_VAR 0 7
45371: IFFALSE 45401
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45373: LD_ADDR_VAR 0 10
45377: PUSH
45378: LD_VAR 0 10
45382: PUSH
45383: LD_VAR 0 7
45387: PPUSH
45388: LD_INT 3
45390: PPUSH
45391: CALL_OW 259
45395: PUSH
45396: LD_INT 3
45398: MUL
45399: MUL
45400: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45401: LD_VAR 0 6
45405: PPUSH
45406: CALL_OW 264
45410: PUSH
45411: LD_INT 5
45413: PUSH
45414: LD_INT 6
45416: PUSH
45417: LD_INT 46
45419: PUSH
45420: LD_INT 44
45422: PUSH
45423: LD_INT 47
45425: PUSH
45426: LD_INT 45
45428: PUSH
45429: LD_INT 28
45431: PUSH
45432: LD_INT 7
45434: PUSH
45435: LD_INT 27
45437: PUSH
45438: LD_INT 29
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: IN
45453: PUSH
45454: LD_VAR 0 1
45458: PPUSH
45459: LD_INT 52
45461: PPUSH
45462: CALL_OW 321
45466: PUSH
45467: LD_INT 2
45469: EQUAL
45470: AND
45471: IFFALSE 45488
// bpoints := bpoints * 1.2 ;
45473: LD_ADDR_VAR 0 10
45477: PUSH
45478: LD_VAR 0 10
45482: PUSH
45483: LD_REAL  1.20000000000000E+0000
45486: MUL
45487: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45488: LD_VAR 0 6
45492: PPUSH
45493: CALL_OW 264
45497: PUSH
45498: LD_INT 6
45500: PUSH
45501: LD_INT 46
45503: PUSH
45504: LD_INT 47
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: LIST
45511: IN
45512: IFFALSE 45529
// bpoints := bpoints * 1.2 ;
45514: LD_ADDR_VAR 0 10
45518: PUSH
45519: LD_VAR 0 10
45523: PUSH
45524: LD_REAL  1.20000000000000E+0000
45527: MUL
45528: ST_TO_ADDR
// end ; unit_building :
45529: GO 45543
45531: LD_INT 3
45533: DOUBLE
45534: EQUAL
45535: IFTRUE 45539
45537: GO 45542
45539: POP
// ; end ;
45540: GO 45543
45542: POP
// for j = 1 to 3 do
45543: LD_ADDR_VAR 0 7
45547: PUSH
45548: DOUBLE
45549: LD_INT 1
45551: DEC
45552: ST_TO_ADDR
45553: LD_INT 3
45555: PUSH
45556: FOR_TO
45557: IFFALSE 45610
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45559: LD_ADDR_VAR 0 5
45563: PUSH
45564: LD_VAR 0 5
45568: PPUSH
45569: LD_VAR 0 7
45573: PPUSH
45574: LD_VAR 0 5
45578: PUSH
45579: LD_VAR 0 7
45583: ARRAY
45584: PUSH
45585: LD_VAR 0 9
45589: PUSH
45590: LD_VAR 0 7
45594: ARRAY
45595: PUSH
45596: LD_VAR 0 10
45600: MUL
45601: PLUS
45602: PPUSH
45603: CALL_OW 1
45607: ST_TO_ADDR
45608: GO 45556
45610: POP
45611: POP
// end ;
45612: GO 44091
45614: POP
45615: POP
// result := Replace ( result , 4 , tmp ) ;
45616: LD_ADDR_VAR 0 5
45620: PUSH
45621: LD_VAR 0 5
45625: PPUSH
45626: LD_INT 4
45628: PPUSH
45629: LD_VAR 0 8
45633: PPUSH
45634: CALL_OW 1
45638: ST_TO_ADDR
// end ;
45639: LD_VAR 0 5
45643: RET
// export function DangerAtRange ( unit , range ) ; begin
45644: LD_INT 0
45646: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45647: LD_ADDR_VAR 0 3
45651: PUSH
45652: LD_VAR 0 1
45656: PPUSH
45657: CALL_OW 255
45661: PPUSH
45662: LD_VAR 0 1
45666: PPUSH
45667: CALL_OW 250
45671: PPUSH
45672: LD_VAR 0 1
45676: PPUSH
45677: CALL_OW 251
45681: PPUSH
45682: LD_VAR 0 2
45686: PPUSH
45687: CALL 43943 0 4
45691: ST_TO_ADDR
// end ;
45692: LD_VAR 0 3
45696: RET
// export function DangerInArea ( side , area ) ; begin
45697: LD_INT 0
45699: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45700: LD_ADDR_VAR 0 3
45704: PUSH
45705: LD_VAR 0 2
45709: PPUSH
45710: LD_INT 81
45712: PUSH
45713: LD_VAR 0 1
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PPUSH
45722: CALL_OW 70
45726: ST_TO_ADDR
// end ;
45727: LD_VAR 0 3
45731: RET
// export function IsExtension ( b ) ; begin
45732: LD_INT 0
45734: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45735: LD_ADDR_VAR 0 2
45739: PUSH
45740: LD_VAR 0 1
45744: PUSH
45745: LD_INT 23
45747: PUSH
45748: LD_INT 20
45750: PUSH
45751: LD_INT 22
45753: PUSH
45754: LD_INT 17
45756: PUSH
45757: LD_INT 24
45759: PUSH
45760: LD_INT 21
45762: PUSH
45763: LD_INT 19
45765: PUSH
45766: LD_INT 16
45768: PUSH
45769: LD_INT 25
45771: PUSH
45772: LD_INT 18
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: IN
45787: ST_TO_ADDR
// end ;
45788: LD_VAR 0 2
45792: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45793: LD_INT 0
45795: PPUSH
45796: PPUSH
45797: PPUSH
// result := [ ] ;
45798: LD_ADDR_VAR 0 4
45802: PUSH
45803: EMPTY
45804: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45805: LD_ADDR_VAR 0 5
45809: PUSH
45810: LD_VAR 0 2
45814: PPUSH
45815: LD_INT 21
45817: PUSH
45818: LD_INT 3
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PPUSH
45825: CALL_OW 70
45829: ST_TO_ADDR
// if not tmp then
45830: LD_VAR 0 5
45834: NOT
45835: IFFALSE 45839
// exit ;
45837: GO 45903
// if checkLink then
45839: LD_VAR 0 3
45843: IFFALSE 45893
// begin for i in tmp do
45845: LD_ADDR_VAR 0 6
45849: PUSH
45850: LD_VAR 0 5
45854: PUSH
45855: FOR_IN
45856: IFFALSE 45891
// if GetBase ( i ) <> base then
45858: LD_VAR 0 6
45862: PPUSH
45863: CALL_OW 274
45867: PUSH
45868: LD_VAR 0 1
45872: NONEQUAL
45873: IFFALSE 45889
// ComLinkToBase ( base , i ) ;
45875: LD_VAR 0 1
45879: PPUSH
45880: LD_VAR 0 6
45884: PPUSH
45885: CALL_OW 169
45889: GO 45855
45891: POP
45892: POP
// end ; result := tmp ;
45893: LD_ADDR_VAR 0 4
45897: PUSH
45898: LD_VAR 0 5
45902: ST_TO_ADDR
// end ;
45903: LD_VAR 0 4
45907: RET
// export function ComComplete ( units , b ) ; var i ; begin
45908: LD_INT 0
45910: PPUSH
45911: PPUSH
// if not units then
45912: LD_VAR 0 1
45916: NOT
45917: IFFALSE 45921
// exit ;
45919: GO 46011
// for i in units do
45921: LD_ADDR_VAR 0 4
45925: PUSH
45926: LD_VAR 0 1
45930: PUSH
45931: FOR_IN
45932: IFFALSE 46009
// if BuildingStatus ( b ) = bs_build then
45934: LD_VAR 0 2
45938: PPUSH
45939: CALL_OW 461
45943: PUSH
45944: LD_INT 1
45946: EQUAL
45947: IFFALSE 46007
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45949: LD_VAR 0 4
45953: PPUSH
45954: LD_STRING h
45956: PUSH
45957: LD_VAR 0 2
45961: PPUSH
45962: CALL_OW 250
45966: PUSH
45967: LD_VAR 0 2
45971: PPUSH
45972: CALL_OW 251
45976: PUSH
45977: LD_VAR 0 2
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: LD_INT 0
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: PUSH
46000: EMPTY
46001: LIST
46002: PPUSH
46003: CALL_OW 446
46007: GO 45931
46009: POP
46010: POP
// end ;
46011: LD_VAR 0 3
46015: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46016: LD_INT 0
46018: PPUSH
46019: PPUSH
46020: PPUSH
46021: PPUSH
46022: PPUSH
46023: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46024: LD_VAR 0 1
46028: NOT
46029: PUSH
46030: LD_VAR 0 1
46034: PPUSH
46035: CALL_OW 263
46039: PUSH
46040: LD_INT 2
46042: NONEQUAL
46043: OR
46044: IFFALSE 46048
// exit ;
46046: GO 46364
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46048: LD_ADDR_VAR 0 6
46052: PUSH
46053: LD_INT 22
46055: PUSH
46056: LD_VAR 0 1
46060: PPUSH
46061: CALL_OW 255
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 2
46072: PUSH
46073: LD_INT 30
46075: PUSH
46076: LD_INT 36
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 34
46085: PUSH
46086: LD_INT 31
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: LIST
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PPUSH
46102: CALL_OW 69
46106: ST_TO_ADDR
// if not tmp then
46107: LD_VAR 0 6
46111: NOT
46112: IFFALSE 46116
// exit ;
46114: GO 46364
// result := [ ] ;
46116: LD_ADDR_VAR 0 2
46120: PUSH
46121: EMPTY
46122: ST_TO_ADDR
// for i in tmp do
46123: LD_ADDR_VAR 0 3
46127: PUSH
46128: LD_VAR 0 6
46132: PUSH
46133: FOR_IN
46134: IFFALSE 46205
// begin t := UnitsInside ( i ) ;
46136: LD_ADDR_VAR 0 4
46140: PUSH
46141: LD_VAR 0 3
46145: PPUSH
46146: CALL_OW 313
46150: ST_TO_ADDR
// if t then
46151: LD_VAR 0 4
46155: IFFALSE 46203
// for j in t do
46157: LD_ADDR_VAR 0 7
46161: PUSH
46162: LD_VAR 0 4
46166: PUSH
46167: FOR_IN
46168: IFFALSE 46201
// result := Replace ( result , result + 1 , j ) ;
46170: LD_ADDR_VAR 0 2
46174: PUSH
46175: LD_VAR 0 2
46179: PPUSH
46180: LD_VAR 0 2
46184: PUSH
46185: LD_INT 1
46187: PLUS
46188: PPUSH
46189: LD_VAR 0 7
46193: PPUSH
46194: CALL_OW 1
46198: ST_TO_ADDR
46199: GO 46167
46201: POP
46202: POP
// end ;
46203: GO 46133
46205: POP
46206: POP
// if not result then
46207: LD_VAR 0 2
46211: NOT
46212: IFFALSE 46216
// exit ;
46214: GO 46364
// mech := result [ 1 ] ;
46216: LD_ADDR_VAR 0 5
46220: PUSH
46221: LD_VAR 0 2
46225: PUSH
46226: LD_INT 1
46228: ARRAY
46229: ST_TO_ADDR
// if result > 1 then
46230: LD_VAR 0 2
46234: PUSH
46235: LD_INT 1
46237: GREATER
46238: IFFALSE 46350
// begin for i = 2 to result do
46240: LD_ADDR_VAR 0 3
46244: PUSH
46245: DOUBLE
46246: LD_INT 2
46248: DEC
46249: ST_TO_ADDR
46250: LD_VAR 0 2
46254: PUSH
46255: FOR_TO
46256: IFFALSE 46348
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46258: LD_ADDR_VAR 0 4
46262: PUSH
46263: LD_VAR 0 2
46267: PUSH
46268: LD_VAR 0 3
46272: ARRAY
46273: PPUSH
46274: LD_INT 3
46276: PPUSH
46277: CALL_OW 259
46281: PUSH
46282: LD_VAR 0 2
46286: PUSH
46287: LD_VAR 0 3
46291: ARRAY
46292: PPUSH
46293: CALL_OW 432
46297: MINUS
46298: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46299: LD_VAR 0 4
46303: PUSH
46304: LD_VAR 0 5
46308: PPUSH
46309: LD_INT 3
46311: PPUSH
46312: CALL_OW 259
46316: PUSH
46317: LD_VAR 0 5
46321: PPUSH
46322: CALL_OW 432
46326: MINUS
46327: GREATEREQUAL
46328: IFFALSE 46346
// mech := result [ i ] ;
46330: LD_ADDR_VAR 0 5
46334: PUSH
46335: LD_VAR 0 2
46339: PUSH
46340: LD_VAR 0 3
46344: ARRAY
46345: ST_TO_ADDR
// end ;
46346: GO 46255
46348: POP
46349: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46350: LD_VAR 0 1
46354: PPUSH
46355: LD_VAR 0 5
46359: PPUSH
46360: CALL_OW 135
// end ;
46364: LD_VAR 0 2
46368: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46369: LD_INT 0
46371: PPUSH
46372: PPUSH
46373: PPUSH
46374: PPUSH
46375: PPUSH
46376: PPUSH
46377: PPUSH
46378: PPUSH
46379: PPUSH
46380: PPUSH
46381: PPUSH
46382: PPUSH
46383: PPUSH
// result := [ ] ;
46384: LD_ADDR_VAR 0 7
46388: PUSH
46389: EMPTY
46390: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46391: LD_VAR 0 1
46395: PPUSH
46396: CALL_OW 266
46400: PUSH
46401: LD_INT 0
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: IN
46411: NOT
46412: IFFALSE 46416
// exit ;
46414: GO 48050
// if name then
46416: LD_VAR 0 3
46420: IFFALSE 46436
// SetBName ( base_dep , name ) ;
46422: LD_VAR 0 1
46426: PPUSH
46427: LD_VAR 0 3
46431: PPUSH
46432: CALL_OW 500
// base := GetBase ( base_dep ) ;
46436: LD_ADDR_VAR 0 15
46440: PUSH
46441: LD_VAR 0 1
46445: PPUSH
46446: CALL_OW 274
46450: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46451: LD_ADDR_VAR 0 16
46455: PUSH
46456: LD_VAR 0 1
46460: PPUSH
46461: CALL_OW 255
46465: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46466: LD_ADDR_VAR 0 17
46470: PUSH
46471: LD_VAR 0 1
46475: PPUSH
46476: CALL_OW 248
46480: ST_TO_ADDR
// if sources then
46481: LD_VAR 0 5
46485: IFFALSE 46532
// for i = 1 to 3 do
46487: LD_ADDR_VAR 0 8
46491: PUSH
46492: DOUBLE
46493: LD_INT 1
46495: DEC
46496: ST_TO_ADDR
46497: LD_INT 3
46499: PUSH
46500: FOR_TO
46501: IFFALSE 46530
// AddResourceType ( base , i , sources [ i ] ) ;
46503: LD_VAR 0 15
46507: PPUSH
46508: LD_VAR 0 8
46512: PPUSH
46513: LD_VAR 0 5
46517: PUSH
46518: LD_VAR 0 8
46522: ARRAY
46523: PPUSH
46524: CALL_OW 276
46528: GO 46500
46530: POP
46531: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46532: LD_ADDR_VAR 0 18
46536: PUSH
46537: LD_VAR 0 15
46541: PPUSH
46542: LD_VAR 0 2
46546: PPUSH
46547: LD_INT 1
46549: PPUSH
46550: CALL 45793 0 3
46554: ST_TO_ADDR
// InitHc ;
46555: CALL_OW 19
// InitUc ;
46559: CALL_OW 18
// uc_side := side ;
46563: LD_ADDR_OWVAR 20
46567: PUSH
46568: LD_VAR 0 16
46572: ST_TO_ADDR
// uc_nation := nation ;
46573: LD_ADDR_OWVAR 21
46577: PUSH
46578: LD_VAR 0 17
46582: ST_TO_ADDR
// if buildings then
46583: LD_VAR 0 18
46587: IFFALSE 47909
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46589: LD_ADDR_VAR 0 19
46593: PUSH
46594: LD_VAR 0 18
46598: PPUSH
46599: LD_INT 2
46601: PUSH
46602: LD_INT 30
46604: PUSH
46605: LD_INT 29
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 30
46614: PUSH
46615: LD_INT 30
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: LIST
46626: PPUSH
46627: CALL_OW 72
46631: ST_TO_ADDR
// if tmp then
46632: LD_VAR 0 19
46636: IFFALSE 46684
// for i in tmp do
46638: LD_ADDR_VAR 0 8
46642: PUSH
46643: LD_VAR 0 19
46647: PUSH
46648: FOR_IN
46649: IFFALSE 46682
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46651: LD_VAR 0 8
46655: PPUSH
46656: CALL_OW 250
46660: PPUSH
46661: LD_VAR 0 8
46665: PPUSH
46666: CALL_OW 251
46670: PPUSH
46671: LD_VAR 0 16
46675: PPUSH
46676: CALL_OW 441
46680: GO 46648
46682: POP
46683: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46684: LD_VAR 0 18
46688: PPUSH
46689: LD_INT 2
46691: PUSH
46692: LD_INT 30
46694: PUSH
46695: LD_INT 32
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 30
46704: PUSH
46705: LD_INT 33
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: LIST
46716: PPUSH
46717: CALL_OW 72
46721: IFFALSE 46809
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46723: LD_ADDR_VAR 0 8
46727: PUSH
46728: LD_VAR 0 18
46732: PPUSH
46733: LD_INT 2
46735: PUSH
46736: LD_INT 30
46738: PUSH
46739: LD_INT 32
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 30
46748: PUSH
46749: LD_INT 33
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: LIST
46760: PPUSH
46761: CALL_OW 72
46765: PUSH
46766: FOR_IN
46767: IFFALSE 46807
// begin if not GetBWeapon ( i ) then
46769: LD_VAR 0 8
46773: PPUSH
46774: CALL_OW 269
46778: NOT
46779: IFFALSE 46805
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46781: LD_VAR 0 8
46785: PPUSH
46786: LD_VAR 0 8
46790: PPUSH
46791: LD_VAR 0 2
46795: PPUSH
46796: CALL 48055 0 2
46800: PPUSH
46801: CALL_OW 431
// end ;
46805: GO 46766
46807: POP
46808: POP
// end ; for i = 1 to personel do
46809: LD_ADDR_VAR 0 8
46813: PUSH
46814: DOUBLE
46815: LD_INT 1
46817: DEC
46818: ST_TO_ADDR
46819: LD_VAR 0 6
46823: PUSH
46824: FOR_TO
46825: IFFALSE 47889
// begin if i > 4 then
46827: LD_VAR 0 8
46831: PUSH
46832: LD_INT 4
46834: GREATER
46835: IFFALSE 46839
// break ;
46837: GO 47889
// case i of 1 :
46839: LD_VAR 0 8
46843: PUSH
46844: LD_INT 1
46846: DOUBLE
46847: EQUAL
46848: IFTRUE 46852
46850: GO 46932
46852: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46853: LD_ADDR_VAR 0 12
46857: PUSH
46858: LD_VAR 0 18
46862: PPUSH
46863: LD_INT 22
46865: PUSH
46866: LD_VAR 0 16
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 58
46877: PUSH
46878: EMPTY
46879: LIST
46880: PUSH
46881: LD_INT 2
46883: PUSH
46884: LD_INT 30
46886: PUSH
46887: LD_INT 32
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 30
46896: PUSH
46897: LD_INT 4
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 30
46906: PUSH
46907: LD_INT 5
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: LIST
46924: PPUSH
46925: CALL_OW 72
46929: ST_TO_ADDR
46930: GO 47154
46932: LD_INT 2
46934: DOUBLE
46935: EQUAL
46936: IFTRUE 46940
46938: GO 47002
46940: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46941: LD_ADDR_VAR 0 12
46945: PUSH
46946: LD_VAR 0 18
46950: PPUSH
46951: LD_INT 22
46953: PUSH
46954: LD_VAR 0 16
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 2
46965: PUSH
46966: LD_INT 30
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 30
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: LIST
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PPUSH
46995: CALL_OW 72
46999: ST_TO_ADDR
47000: GO 47154
47002: LD_INT 3
47004: DOUBLE
47005: EQUAL
47006: IFTRUE 47010
47008: GO 47072
47010: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47011: LD_ADDR_VAR 0 12
47015: PUSH
47016: LD_VAR 0 18
47020: PPUSH
47021: LD_INT 22
47023: PUSH
47024: LD_VAR 0 16
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 2
47035: PUSH
47036: LD_INT 30
47038: PUSH
47039: LD_INT 2
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 30
47048: PUSH
47049: LD_INT 3
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: LIST
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PPUSH
47065: CALL_OW 72
47069: ST_TO_ADDR
47070: GO 47154
47072: LD_INT 4
47074: DOUBLE
47075: EQUAL
47076: IFTRUE 47080
47078: GO 47153
47080: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47081: LD_ADDR_VAR 0 12
47085: PUSH
47086: LD_VAR 0 18
47090: PPUSH
47091: LD_INT 22
47093: PUSH
47094: LD_VAR 0 16
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 2
47105: PUSH
47106: LD_INT 30
47108: PUSH
47109: LD_INT 6
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 30
47118: PUSH
47119: LD_INT 7
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 30
47128: PUSH
47129: LD_INT 8
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PPUSH
47146: CALL_OW 72
47150: ST_TO_ADDR
47151: GO 47154
47153: POP
// if i = 1 then
47154: LD_VAR 0 8
47158: PUSH
47159: LD_INT 1
47161: EQUAL
47162: IFFALSE 47273
// begin tmp := [ ] ;
47164: LD_ADDR_VAR 0 19
47168: PUSH
47169: EMPTY
47170: ST_TO_ADDR
// for j in f do
47171: LD_ADDR_VAR 0 9
47175: PUSH
47176: LD_VAR 0 12
47180: PUSH
47181: FOR_IN
47182: IFFALSE 47255
// if GetBType ( j ) = b_bunker then
47184: LD_VAR 0 9
47188: PPUSH
47189: CALL_OW 266
47193: PUSH
47194: LD_INT 32
47196: EQUAL
47197: IFFALSE 47224
// tmp := Insert ( tmp , 1 , j ) else
47199: LD_ADDR_VAR 0 19
47203: PUSH
47204: LD_VAR 0 19
47208: PPUSH
47209: LD_INT 1
47211: PPUSH
47212: LD_VAR 0 9
47216: PPUSH
47217: CALL_OW 2
47221: ST_TO_ADDR
47222: GO 47253
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47224: LD_ADDR_VAR 0 19
47228: PUSH
47229: LD_VAR 0 19
47233: PPUSH
47234: LD_VAR 0 19
47238: PUSH
47239: LD_INT 1
47241: PLUS
47242: PPUSH
47243: LD_VAR 0 9
47247: PPUSH
47248: CALL_OW 2
47252: ST_TO_ADDR
47253: GO 47181
47255: POP
47256: POP
// if tmp then
47257: LD_VAR 0 19
47261: IFFALSE 47273
// f := tmp ;
47263: LD_ADDR_VAR 0 12
47267: PUSH
47268: LD_VAR 0 19
47272: ST_TO_ADDR
// end ; x := personel [ i ] ;
47273: LD_ADDR_VAR 0 13
47277: PUSH
47278: LD_VAR 0 6
47282: PUSH
47283: LD_VAR 0 8
47287: ARRAY
47288: ST_TO_ADDR
// if x = - 1 then
47289: LD_VAR 0 13
47293: PUSH
47294: LD_INT 1
47296: NEG
47297: EQUAL
47298: IFFALSE 47507
// begin for j in f do
47300: LD_ADDR_VAR 0 9
47304: PUSH
47305: LD_VAR 0 12
47309: PUSH
47310: FOR_IN
47311: IFFALSE 47503
// repeat InitHc ;
47313: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47317: LD_VAR 0 9
47321: PPUSH
47322: CALL_OW 266
47326: PUSH
47327: LD_INT 5
47329: EQUAL
47330: IFFALSE 47400
// begin if UnitsInside ( j ) < 3 then
47332: LD_VAR 0 9
47336: PPUSH
47337: CALL_OW 313
47341: PUSH
47342: LD_INT 3
47344: LESS
47345: IFFALSE 47381
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47347: LD_INT 0
47349: PPUSH
47350: LD_INT 5
47352: PUSH
47353: LD_INT 8
47355: PUSH
47356: LD_INT 9
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: LIST
47363: PUSH
47364: LD_VAR 0 17
47368: ARRAY
47369: PPUSH
47370: LD_VAR 0 4
47374: PPUSH
47375: CALL_OW 380
47379: GO 47398
// PrepareHuman ( false , i , skill ) ;
47381: LD_INT 0
47383: PPUSH
47384: LD_VAR 0 8
47388: PPUSH
47389: LD_VAR 0 4
47393: PPUSH
47394: CALL_OW 380
// end else
47398: GO 47417
// PrepareHuman ( false , i , skill ) ;
47400: LD_INT 0
47402: PPUSH
47403: LD_VAR 0 8
47407: PPUSH
47408: LD_VAR 0 4
47412: PPUSH
47413: CALL_OW 380
// un := CreateHuman ;
47417: LD_ADDR_VAR 0 14
47421: PUSH
47422: CALL_OW 44
47426: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47427: LD_ADDR_VAR 0 7
47431: PUSH
47432: LD_VAR 0 7
47436: PPUSH
47437: LD_INT 1
47439: PPUSH
47440: LD_VAR 0 14
47444: PPUSH
47445: CALL_OW 2
47449: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47450: LD_VAR 0 14
47454: PPUSH
47455: LD_VAR 0 9
47459: PPUSH
47460: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47464: LD_VAR 0 9
47468: PPUSH
47469: CALL_OW 313
47473: PUSH
47474: LD_INT 6
47476: EQUAL
47477: PUSH
47478: LD_VAR 0 9
47482: PPUSH
47483: CALL_OW 266
47487: PUSH
47488: LD_INT 32
47490: PUSH
47491: LD_INT 31
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: IN
47498: OR
47499: IFFALSE 47313
47501: GO 47310
47503: POP
47504: POP
// end else
47505: GO 47887
// for j = 1 to x do
47507: LD_ADDR_VAR 0 9
47511: PUSH
47512: DOUBLE
47513: LD_INT 1
47515: DEC
47516: ST_TO_ADDR
47517: LD_VAR 0 13
47521: PUSH
47522: FOR_TO
47523: IFFALSE 47885
// begin InitHc ;
47525: CALL_OW 19
// if not f then
47529: LD_VAR 0 12
47533: NOT
47534: IFFALSE 47623
// begin PrepareHuman ( false , i , skill ) ;
47536: LD_INT 0
47538: PPUSH
47539: LD_VAR 0 8
47543: PPUSH
47544: LD_VAR 0 4
47548: PPUSH
47549: CALL_OW 380
// un := CreateHuman ;
47553: LD_ADDR_VAR 0 14
47557: PUSH
47558: CALL_OW 44
47562: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47563: LD_ADDR_VAR 0 7
47567: PUSH
47568: LD_VAR 0 7
47572: PPUSH
47573: LD_INT 1
47575: PPUSH
47576: LD_VAR 0 14
47580: PPUSH
47581: CALL_OW 2
47585: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47586: LD_VAR 0 14
47590: PPUSH
47591: LD_VAR 0 1
47595: PPUSH
47596: CALL_OW 250
47600: PPUSH
47601: LD_VAR 0 1
47605: PPUSH
47606: CALL_OW 251
47610: PPUSH
47611: LD_INT 10
47613: PPUSH
47614: LD_INT 0
47616: PPUSH
47617: CALL_OW 50
// continue ;
47621: GO 47522
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47623: LD_VAR 0 12
47627: PUSH
47628: LD_INT 1
47630: ARRAY
47631: PPUSH
47632: CALL_OW 313
47636: PUSH
47637: LD_VAR 0 12
47641: PUSH
47642: LD_INT 1
47644: ARRAY
47645: PPUSH
47646: CALL_OW 266
47650: PUSH
47651: LD_INT 32
47653: PUSH
47654: LD_INT 31
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: IN
47661: AND
47662: PUSH
47663: LD_VAR 0 12
47667: PUSH
47668: LD_INT 1
47670: ARRAY
47671: PPUSH
47672: CALL_OW 313
47676: PUSH
47677: LD_INT 6
47679: EQUAL
47680: OR
47681: IFFALSE 47701
// f := Delete ( f , 1 ) ;
47683: LD_ADDR_VAR 0 12
47687: PUSH
47688: LD_VAR 0 12
47692: PPUSH
47693: LD_INT 1
47695: PPUSH
47696: CALL_OW 3
47700: ST_TO_ADDR
// if not f then
47701: LD_VAR 0 12
47705: NOT
47706: IFFALSE 47724
// begin x := x + 2 ;
47708: LD_ADDR_VAR 0 13
47712: PUSH
47713: LD_VAR 0 13
47717: PUSH
47718: LD_INT 2
47720: PLUS
47721: ST_TO_ADDR
// continue ;
47722: GO 47522
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47724: LD_VAR 0 12
47728: PUSH
47729: LD_INT 1
47731: ARRAY
47732: PPUSH
47733: CALL_OW 266
47737: PUSH
47738: LD_INT 5
47740: EQUAL
47741: IFFALSE 47815
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47743: LD_VAR 0 12
47747: PUSH
47748: LD_INT 1
47750: ARRAY
47751: PPUSH
47752: CALL_OW 313
47756: PUSH
47757: LD_INT 3
47759: LESS
47760: IFFALSE 47796
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47762: LD_INT 0
47764: PPUSH
47765: LD_INT 5
47767: PUSH
47768: LD_INT 8
47770: PUSH
47771: LD_INT 9
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: LIST
47778: PUSH
47779: LD_VAR 0 17
47783: ARRAY
47784: PPUSH
47785: LD_VAR 0 4
47789: PPUSH
47790: CALL_OW 380
47794: GO 47813
// PrepareHuman ( false , i , skill ) ;
47796: LD_INT 0
47798: PPUSH
47799: LD_VAR 0 8
47803: PPUSH
47804: LD_VAR 0 4
47808: PPUSH
47809: CALL_OW 380
// end else
47813: GO 47832
// PrepareHuman ( false , i , skill ) ;
47815: LD_INT 0
47817: PPUSH
47818: LD_VAR 0 8
47822: PPUSH
47823: LD_VAR 0 4
47827: PPUSH
47828: CALL_OW 380
// un := CreateHuman ;
47832: LD_ADDR_VAR 0 14
47836: PUSH
47837: CALL_OW 44
47841: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47842: LD_ADDR_VAR 0 7
47846: PUSH
47847: LD_VAR 0 7
47851: PPUSH
47852: LD_INT 1
47854: PPUSH
47855: LD_VAR 0 14
47859: PPUSH
47860: CALL_OW 2
47864: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47865: LD_VAR 0 14
47869: PPUSH
47870: LD_VAR 0 12
47874: PUSH
47875: LD_INT 1
47877: ARRAY
47878: PPUSH
47879: CALL_OW 52
// end ;
47883: GO 47522
47885: POP
47886: POP
// end ;
47887: GO 46824
47889: POP
47890: POP
// result := result ^ buildings ;
47891: LD_ADDR_VAR 0 7
47895: PUSH
47896: LD_VAR 0 7
47900: PUSH
47901: LD_VAR 0 18
47905: ADD
47906: ST_TO_ADDR
// end else
47907: GO 48050
// begin for i = 1 to personel do
47909: LD_ADDR_VAR 0 8
47913: PUSH
47914: DOUBLE
47915: LD_INT 1
47917: DEC
47918: ST_TO_ADDR
47919: LD_VAR 0 6
47923: PUSH
47924: FOR_TO
47925: IFFALSE 48048
// begin if i > 4 then
47927: LD_VAR 0 8
47931: PUSH
47932: LD_INT 4
47934: GREATER
47935: IFFALSE 47939
// break ;
47937: GO 48048
// x := personel [ i ] ;
47939: LD_ADDR_VAR 0 13
47943: PUSH
47944: LD_VAR 0 6
47948: PUSH
47949: LD_VAR 0 8
47953: ARRAY
47954: ST_TO_ADDR
// if x = - 1 then
47955: LD_VAR 0 13
47959: PUSH
47960: LD_INT 1
47962: NEG
47963: EQUAL
47964: IFFALSE 47968
// continue ;
47966: GO 47924
// PrepareHuman ( false , i , skill ) ;
47968: LD_INT 0
47970: PPUSH
47971: LD_VAR 0 8
47975: PPUSH
47976: LD_VAR 0 4
47980: PPUSH
47981: CALL_OW 380
// un := CreateHuman ;
47985: LD_ADDR_VAR 0 14
47989: PUSH
47990: CALL_OW 44
47994: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47995: LD_VAR 0 14
47999: PPUSH
48000: LD_VAR 0 1
48004: PPUSH
48005: CALL_OW 250
48009: PPUSH
48010: LD_VAR 0 1
48014: PPUSH
48015: CALL_OW 251
48019: PPUSH
48020: LD_INT 10
48022: PPUSH
48023: LD_INT 0
48025: PPUSH
48026: CALL_OW 50
// result := result ^ un ;
48030: LD_ADDR_VAR 0 7
48034: PUSH
48035: LD_VAR 0 7
48039: PUSH
48040: LD_VAR 0 14
48044: ADD
48045: ST_TO_ADDR
// end ;
48046: GO 47924
48048: POP
48049: POP
// end ; end ;
48050: LD_VAR 0 7
48054: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48055: LD_INT 0
48057: PPUSH
48058: PPUSH
48059: PPUSH
48060: PPUSH
48061: PPUSH
48062: PPUSH
48063: PPUSH
48064: PPUSH
48065: PPUSH
48066: PPUSH
48067: PPUSH
48068: PPUSH
48069: PPUSH
48070: PPUSH
48071: PPUSH
48072: PPUSH
// result := false ;
48073: LD_ADDR_VAR 0 3
48077: PUSH
48078: LD_INT 0
48080: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48081: LD_VAR 0 1
48085: NOT
48086: PUSH
48087: LD_VAR 0 1
48091: PPUSH
48092: CALL_OW 266
48096: PUSH
48097: LD_INT 32
48099: PUSH
48100: LD_INT 33
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: IN
48107: NOT
48108: OR
48109: IFFALSE 48113
// exit ;
48111: GO 49222
// nat := GetNation ( tower ) ;
48113: LD_ADDR_VAR 0 12
48117: PUSH
48118: LD_VAR 0 1
48122: PPUSH
48123: CALL_OW 248
48127: ST_TO_ADDR
// side := GetSide ( tower ) ;
48128: LD_ADDR_VAR 0 16
48132: PUSH
48133: LD_VAR 0 1
48137: PPUSH
48138: CALL_OW 255
48142: ST_TO_ADDR
// x := GetX ( tower ) ;
48143: LD_ADDR_VAR 0 10
48147: PUSH
48148: LD_VAR 0 1
48152: PPUSH
48153: CALL_OW 250
48157: ST_TO_ADDR
// y := GetY ( tower ) ;
48158: LD_ADDR_VAR 0 11
48162: PUSH
48163: LD_VAR 0 1
48167: PPUSH
48168: CALL_OW 251
48172: ST_TO_ADDR
// if not x or not y then
48173: LD_VAR 0 10
48177: NOT
48178: PUSH
48179: LD_VAR 0 11
48183: NOT
48184: OR
48185: IFFALSE 48189
// exit ;
48187: GO 49222
// weapon := 0 ;
48189: LD_ADDR_VAR 0 18
48193: PUSH
48194: LD_INT 0
48196: ST_TO_ADDR
// fac_list := [ ] ;
48197: LD_ADDR_VAR 0 17
48201: PUSH
48202: EMPTY
48203: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48204: LD_ADDR_VAR 0 6
48208: PUSH
48209: LD_VAR 0 1
48213: PPUSH
48214: CALL_OW 274
48218: PPUSH
48219: LD_VAR 0 2
48223: PPUSH
48224: LD_INT 0
48226: PPUSH
48227: CALL 45793 0 3
48231: PPUSH
48232: LD_INT 30
48234: PUSH
48235: LD_INT 3
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PPUSH
48242: CALL_OW 72
48246: ST_TO_ADDR
// if not factories then
48247: LD_VAR 0 6
48251: NOT
48252: IFFALSE 48256
// exit ;
48254: GO 49222
// for i in factories do
48256: LD_ADDR_VAR 0 8
48260: PUSH
48261: LD_VAR 0 6
48265: PUSH
48266: FOR_IN
48267: IFFALSE 48292
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48269: LD_ADDR_VAR 0 17
48273: PUSH
48274: LD_VAR 0 17
48278: PUSH
48279: LD_VAR 0 8
48283: PPUSH
48284: CALL_OW 478
48288: UNION
48289: ST_TO_ADDR
48290: GO 48266
48292: POP
48293: POP
// if not fac_list then
48294: LD_VAR 0 17
48298: NOT
48299: IFFALSE 48303
// exit ;
48301: GO 49222
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48303: LD_ADDR_VAR 0 5
48307: PUSH
48308: LD_INT 4
48310: PUSH
48311: LD_INT 5
48313: PUSH
48314: LD_INT 9
48316: PUSH
48317: LD_INT 10
48319: PUSH
48320: LD_INT 6
48322: PUSH
48323: LD_INT 7
48325: PUSH
48326: LD_INT 11
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 27
48340: PUSH
48341: LD_INT 28
48343: PUSH
48344: LD_INT 26
48346: PUSH
48347: LD_INT 30
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 43
48358: PUSH
48359: LD_INT 44
48361: PUSH
48362: LD_INT 46
48364: PUSH
48365: LD_INT 45
48367: PUSH
48368: LD_INT 47
48370: PUSH
48371: LD_INT 49
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: LIST
48386: PUSH
48387: LD_VAR 0 12
48391: ARRAY
48392: ST_TO_ADDR
// list := list isect fac_list ;
48393: LD_ADDR_VAR 0 5
48397: PUSH
48398: LD_VAR 0 5
48402: PUSH
48403: LD_VAR 0 17
48407: ISECT
48408: ST_TO_ADDR
// if not list then
48409: LD_VAR 0 5
48413: NOT
48414: IFFALSE 48418
// exit ;
48416: GO 49222
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48418: LD_VAR 0 12
48422: PUSH
48423: LD_INT 3
48425: EQUAL
48426: PUSH
48427: LD_INT 49
48429: PUSH
48430: LD_VAR 0 5
48434: IN
48435: AND
48436: PUSH
48437: LD_INT 31
48439: PPUSH
48440: LD_VAR 0 16
48444: PPUSH
48445: CALL_OW 321
48449: PUSH
48450: LD_INT 2
48452: EQUAL
48453: AND
48454: IFFALSE 48514
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48456: LD_INT 22
48458: PUSH
48459: LD_VAR 0 16
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 35
48470: PUSH
48471: LD_INT 49
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 91
48480: PUSH
48481: LD_VAR 0 1
48485: PUSH
48486: LD_INT 10
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: LIST
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: LIST
48498: PPUSH
48499: CALL_OW 69
48503: NOT
48504: IFFALSE 48514
// weapon := ru_time_lapser ;
48506: LD_ADDR_VAR 0 18
48510: PUSH
48511: LD_INT 49
48513: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48514: LD_VAR 0 12
48518: PUSH
48519: LD_INT 1
48521: PUSH
48522: LD_INT 2
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: IN
48529: PUSH
48530: LD_INT 11
48532: PUSH
48533: LD_VAR 0 5
48537: IN
48538: PUSH
48539: LD_INT 30
48541: PUSH
48542: LD_VAR 0 5
48546: IN
48547: OR
48548: AND
48549: PUSH
48550: LD_INT 6
48552: PPUSH
48553: LD_VAR 0 16
48557: PPUSH
48558: CALL_OW 321
48562: PUSH
48563: LD_INT 2
48565: EQUAL
48566: AND
48567: IFFALSE 48732
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48569: LD_INT 22
48571: PUSH
48572: LD_VAR 0 16
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 2
48583: PUSH
48584: LD_INT 35
48586: PUSH
48587: LD_INT 11
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 35
48596: PUSH
48597: LD_INT 30
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 91
48611: PUSH
48612: LD_VAR 0 1
48616: PUSH
48617: LD_INT 18
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: LIST
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: LIST
48629: PPUSH
48630: CALL_OW 69
48634: NOT
48635: PUSH
48636: LD_INT 22
48638: PUSH
48639: LD_VAR 0 16
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 2
48650: PUSH
48651: LD_INT 30
48653: PUSH
48654: LD_INT 32
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 30
48663: PUSH
48664: LD_INT 33
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 91
48678: PUSH
48679: LD_VAR 0 1
48683: PUSH
48684: LD_INT 12
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: LIST
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: LIST
48696: PUSH
48697: EMPTY
48698: LIST
48699: PPUSH
48700: CALL_OW 69
48704: PUSH
48705: LD_INT 2
48707: GREATER
48708: AND
48709: IFFALSE 48732
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48711: LD_ADDR_VAR 0 18
48715: PUSH
48716: LD_INT 11
48718: PUSH
48719: LD_INT 30
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_VAR 0 12
48730: ARRAY
48731: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48732: LD_VAR 0 18
48736: NOT
48737: PUSH
48738: LD_INT 40
48740: PPUSH
48741: LD_VAR 0 16
48745: PPUSH
48746: CALL_OW 321
48750: PUSH
48751: LD_INT 2
48753: EQUAL
48754: AND
48755: PUSH
48756: LD_INT 7
48758: PUSH
48759: LD_VAR 0 5
48763: IN
48764: PUSH
48765: LD_INT 28
48767: PUSH
48768: LD_VAR 0 5
48772: IN
48773: OR
48774: PUSH
48775: LD_INT 45
48777: PUSH
48778: LD_VAR 0 5
48782: IN
48783: OR
48784: AND
48785: IFFALSE 49039
// begin hex := GetHexInfo ( x , y ) ;
48787: LD_ADDR_VAR 0 4
48791: PUSH
48792: LD_VAR 0 10
48796: PPUSH
48797: LD_VAR 0 11
48801: PPUSH
48802: CALL_OW 546
48806: ST_TO_ADDR
// if hex [ 1 ] then
48807: LD_VAR 0 4
48811: PUSH
48812: LD_INT 1
48814: ARRAY
48815: IFFALSE 48819
// exit ;
48817: GO 49222
// height := hex [ 2 ] ;
48819: LD_ADDR_VAR 0 15
48823: PUSH
48824: LD_VAR 0 4
48828: PUSH
48829: LD_INT 2
48831: ARRAY
48832: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48833: LD_ADDR_VAR 0 14
48837: PUSH
48838: LD_INT 0
48840: PUSH
48841: LD_INT 2
48843: PUSH
48844: LD_INT 3
48846: PUSH
48847: LD_INT 5
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: ST_TO_ADDR
// for i in tmp do
48856: LD_ADDR_VAR 0 8
48860: PUSH
48861: LD_VAR 0 14
48865: PUSH
48866: FOR_IN
48867: IFFALSE 49037
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48869: LD_ADDR_VAR 0 9
48873: PUSH
48874: LD_VAR 0 10
48878: PPUSH
48879: LD_VAR 0 8
48883: PPUSH
48884: LD_INT 5
48886: PPUSH
48887: CALL_OW 272
48891: PUSH
48892: LD_VAR 0 11
48896: PPUSH
48897: LD_VAR 0 8
48901: PPUSH
48902: LD_INT 5
48904: PPUSH
48905: CALL_OW 273
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48914: LD_VAR 0 9
48918: PUSH
48919: LD_INT 1
48921: ARRAY
48922: PPUSH
48923: LD_VAR 0 9
48927: PUSH
48928: LD_INT 2
48930: ARRAY
48931: PPUSH
48932: CALL_OW 488
48936: IFFALSE 49035
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48938: LD_ADDR_VAR 0 4
48942: PUSH
48943: LD_VAR 0 9
48947: PUSH
48948: LD_INT 1
48950: ARRAY
48951: PPUSH
48952: LD_VAR 0 9
48956: PUSH
48957: LD_INT 2
48959: ARRAY
48960: PPUSH
48961: CALL_OW 546
48965: ST_TO_ADDR
// if hex [ 1 ] then
48966: LD_VAR 0 4
48970: PUSH
48971: LD_INT 1
48973: ARRAY
48974: IFFALSE 48978
// continue ;
48976: GO 48866
// h := hex [ 2 ] ;
48978: LD_ADDR_VAR 0 13
48982: PUSH
48983: LD_VAR 0 4
48987: PUSH
48988: LD_INT 2
48990: ARRAY
48991: ST_TO_ADDR
// if h + 7 < height then
48992: LD_VAR 0 13
48996: PUSH
48997: LD_INT 7
48999: PLUS
49000: PUSH
49001: LD_VAR 0 15
49005: LESS
49006: IFFALSE 49035
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49008: LD_ADDR_VAR 0 18
49012: PUSH
49013: LD_INT 7
49015: PUSH
49016: LD_INT 28
49018: PUSH
49019: LD_INT 45
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: LIST
49026: PUSH
49027: LD_VAR 0 12
49031: ARRAY
49032: ST_TO_ADDR
// break ;
49033: GO 49037
// end ; end ; end ;
49035: GO 48866
49037: POP
49038: POP
// end ; if not weapon then
49039: LD_VAR 0 18
49043: NOT
49044: IFFALSE 49104
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49046: LD_ADDR_VAR 0 5
49050: PUSH
49051: LD_VAR 0 5
49055: PUSH
49056: LD_INT 11
49058: PUSH
49059: LD_INT 30
49061: PUSH
49062: LD_INT 49
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: LIST
49069: DIFF
49070: ST_TO_ADDR
// if not list then
49071: LD_VAR 0 5
49075: NOT
49076: IFFALSE 49080
// exit ;
49078: GO 49222
// weapon := list [ rand ( 1 , list ) ] ;
49080: LD_ADDR_VAR 0 18
49084: PUSH
49085: LD_VAR 0 5
49089: PUSH
49090: LD_INT 1
49092: PPUSH
49093: LD_VAR 0 5
49097: PPUSH
49098: CALL_OW 12
49102: ARRAY
49103: ST_TO_ADDR
// end ; if weapon then
49104: LD_VAR 0 18
49108: IFFALSE 49222
// begin tmp := CostOfWeapon ( weapon ) ;
49110: LD_ADDR_VAR 0 14
49114: PUSH
49115: LD_VAR 0 18
49119: PPUSH
49120: CALL_OW 451
49124: ST_TO_ADDR
// j := GetBase ( tower ) ;
49125: LD_ADDR_VAR 0 9
49129: PUSH
49130: LD_VAR 0 1
49134: PPUSH
49135: CALL_OW 274
49139: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49140: LD_VAR 0 9
49144: PPUSH
49145: LD_INT 1
49147: PPUSH
49148: CALL_OW 275
49152: PUSH
49153: LD_VAR 0 14
49157: PUSH
49158: LD_INT 1
49160: ARRAY
49161: GREATEREQUAL
49162: PUSH
49163: LD_VAR 0 9
49167: PPUSH
49168: LD_INT 2
49170: PPUSH
49171: CALL_OW 275
49175: PUSH
49176: LD_VAR 0 14
49180: PUSH
49181: LD_INT 2
49183: ARRAY
49184: GREATEREQUAL
49185: AND
49186: PUSH
49187: LD_VAR 0 9
49191: PPUSH
49192: LD_INT 3
49194: PPUSH
49195: CALL_OW 275
49199: PUSH
49200: LD_VAR 0 14
49204: PUSH
49205: LD_INT 3
49207: ARRAY
49208: GREATEREQUAL
49209: AND
49210: IFFALSE 49222
// result := weapon ;
49212: LD_ADDR_VAR 0 3
49216: PUSH
49217: LD_VAR 0 18
49221: ST_TO_ADDR
// end ; end ;
49222: LD_VAR 0 3
49226: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49227: LD_INT 0
49229: PPUSH
49230: PPUSH
// result := true ;
49231: LD_ADDR_VAR 0 3
49235: PUSH
49236: LD_INT 1
49238: ST_TO_ADDR
// if array1 = array2 then
49239: LD_VAR 0 1
49243: PUSH
49244: LD_VAR 0 2
49248: EQUAL
49249: IFFALSE 49309
// begin for i = 1 to array1 do
49251: LD_ADDR_VAR 0 4
49255: PUSH
49256: DOUBLE
49257: LD_INT 1
49259: DEC
49260: ST_TO_ADDR
49261: LD_VAR 0 1
49265: PUSH
49266: FOR_TO
49267: IFFALSE 49305
// if array1 [ i ] <> array2 [ i ] then
49269: LD_VAR 0 1
49273: PUSH
49274: LD_VAR 0 4
49278: ARRAY
49279: PUSH
49280: LD_VAR 0 2
49284: PUSH
49285: LD_VAR 0 4
49289: ARRAY
49290: NONEQUAL
49291: IFFALSE 49303
// begin result := false ;
49293: LD_ADDR_VAR 0 3
49297: PUSH
49298: LD_INT 0
49300: ST_TO_ADDR
// break ;
49301: GO 49305
// end ;
49303: GO 49266
49305: POP
49306: POP
// end else
49307: GO 49317
// result := false ;
49309: LD_ADDR_VAR 0 3
49313: PUSH
49314: LD_INT 0
49316: ST_TO_ADDR
// end ;
49317: LD_VAR 0 3
49321: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49322: LD_INT 0
49324: PPUSH
49325: PPUSH
// if not array1 or not array2 then
49326: LD_VAR 0 1
49330: NOT
49331: PUSH
49332: LD_VAR 0 2
49336: NOT
49337: OR
49338: IFFALSE 49342
// exit ;
49340: GO 49406
// result := true ;
49342: LD_ADDR_VAR 0 3
49346: PUSH
49347: LD_INT 1
49349: ST_TO_ADDR
// for i = 1 to array1 do
49350: LD_ADDR_VAR 0 4
49354: PUSH
49355: DOUBLE
49356: LD_INT 1
49358: DEC
49359: ST_TO_ADDR
49360: LD_VAR 0 1
49364: PUSH
49365: FOR_TO
49366: IFFALSE 49404
// if array1 [ i ] <> array2 [ i ] then
49368: LD_VAR 0 1
49372: PUSH
49373: LD_VAR 0 4
49377: ARRAY
49378: PUSH
49379: LD_VAR 0 2
49383: PUSH
49384: LD_VAR 0 4
49388: ARRAY
49389: NONEQUAL
49390: IFFALSE 49402
// begin result := false ;
49392: LD_ADDR_VAR 0 3
49396: PUSH
49397: LD_INT 0
49399: ST_TO_ADDR
// break ;
49400: GO 49404
// end ;
49402: GO 49365
49404: POP
49405: POP
// end ;
49406: LD_VAR 0 3
49410: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49411: LD_INT 0
49413: PPUSH
49414: PPUSH
49415: PPUSH
// pom := GetBase ( fac ) ;
49416: LD_ADDR_VAR 0 5
49420: PUSH
49421: LD_VAR 0 1
49425: PPUSH
49426: CALL_OW 274
49430: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49431: LD_ADDR_VAR 0 4
49435: PUSH
49436: LD_VAR 0 2
49440: PUSH
49441: LD_INT 1
49443: ARRAY
49444: PPUSH
49445: LD_VAR 0 2
49449: PUSH
49450: LD_INT 2
49452: ARRAY
49453: PPUSH
49454: LD_VAR 0 2
49458: PUSH
49459: LD_INT 3
49461: ARRAY
49462: PPUSH
49463: LD_VAR 0 2
49467: PUSH
49468: LD_INT 4
49470: ARRAY
49471: PPUSH
49472: CALL_OW 449
49476: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49477: LD_ADDR_VAR 0 3
49481: PUSH
49482: LD_VAR 0 5
49486: PPUSH
49487: LD_INT 1
49489: PPUSH
49490: CALL_OW 275
49494: PUSH
49495: LD_VAR 0 4
49499: PUSH
49500: LD_INT 1
49502: ARRAY
49503: GREATEREQUAL
49504: PUSH
49505: LD_VAR 0 5
49509: PPUSH
49510: LD_INT 2
49512: PPUSH
49513: CALL_OW 275
49517: PUSH
49518: LD_VAR 0 4
49522: PUSH
49523: LD_INT 2
49525: ARRAY
49526: GREATEREQUAL
49527: AND
49528: PUSH
49529: LD_VAR 0 5
49533: PPUSH
49534: LD_INT 3
49536: PPUSH
49537: CALL_OW 275
49541: PUSH
49542: LD_VAR 0 4
49546: PUSH
49547: LD_INT 3
49549: ARRAY
49550: GREATEREQUAL
49551: AND
49552: ST_TO_ADDR
// end ;
49553: LD_VAR 0 3
49557: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49558: LD_INT 0
49560: PPUSH
49561: PPUSH
49562: PPUSH
49563: PPUSH
// pom := GetBase ( building ) ;
49564: LD_ADDR_VAR 0 3
49568: PUSH
49569: LD_VAR 0 1
49573: PPUSH
49574: CALL_OW 274
49578: ST_TO_ADDR
// if not pom then
49579: LD_VAR 0 3
49583: NOT
49584: IFFALSE 49588
// exit ;
49586: GO 49758
// btype := GetBType ( building ) ;
49588: LD_ADDR_VAR 0 5
49592: PUSH
49593: LD_VAR 0 1
49597: PPUSH
49598: CALL_OW 266
49602: ST_TO_ADDR
// if btype = b_armoury then
49603: LD_VAR 0 5
49607: PUSH
49608: LD_INT 4
49610: EQUAL
49611: IFFALSE 49621
// btype := b_barracks ;
49613: LD_ADDR_VAR 0 5
49617: PUSH
49618: LD_INT 5
49620: ST_TO_ADDR
// if btype = b_depot then
49621: LD_VAR 0 5
49625: PUSH
49626: LD_INT 0
49628: EQUAL
49629: IFFALSE 49639
// btype := b_warehouse ;
49631: LD_ADDR_VAR 0 5
49635: PUSH
49636: LD_INT 1
49638: ST_TO_ADDR
// if btype = b_workshop then
49639: LD_VAR 0 5
49643: PUSH
49644: LD_INT 2
49646: EQUAL
49647: IFFALSE 49657
// btype := b_factory ;
49649: LD_ADDR_VAR 0 5
49653: PUSH
49654: LD_INT 3
49656: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49657: LD_ADDR_VAR 0 4
49661: PUSH
49662: LD_VAR 0 5
49666: PPUSH
49667: LD_VAR 0 1
49671: PPUSH
49672: CALL_OW 248
49676: PPUSH
49677: CALL_OW 450
49681: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49682: LD_ADDR_VAR 0 2
49686: PUSH
49687: LD_VAR 0 3
49691: PPUSH
49692: LD_INT 1
49694: PPUSH
49695: CALL_OW 275
49699: PUSH
49700: LD_VAR 0 4
49704: PUSH
49705: LD_INT 1
49707: ARRAY
49708: GREATEREQUAL
49709: PUSH
49710: LD_VAR 0 3
49714: PPUSH
49715: LD_INT 2
49717: PPUSH
49718: CALL_OW 275
49722: PUSH
49723: LD_VAR 0 4
49727: PUSH
49728: LD_INT 2
49730: ARRAY
49731: GREATEREQUAL
49732: AND
49733: PUSH
49734: LD_VAR 0 3
49738: PPUSH
49739: LD_INT 3
49741: PPUSH
49742: CALL_OW 275
49746: PUSH
49747: LD_VAR 0 4
49751: PUSH
49752: LD_INT 3
49754: ARRAY
49755: GREATEREQUAL
49756: AND
49757: ST_TO_ADDR
// end ;
49758: LD_VAR 0 2
49762: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49763: LD_INT 0
49765: PPUSH
49766: PPUSH
49767: PPUSH
// pom := GetBase ( building ) ;
49768: LD_ADDR_VAR 0 4
49772: PUSH
49773: LD_VAR 0 1
49777: PPUSH
49778: CALL_OW 274
49782: ST_TO_ADDR
// if not pom then
49783: LD_VAR 0 4
49787: NOT
49788: IFFALSE 49792
// exit ;
49790: GO 49893
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49792: LD_ADDR_VAR 0 5
49796: PUSH
49797: LD_VAR 0 2
49801: PPUSH
49802: LD_VAR 0 1
49806: PPUSH
49807: CALL_OW 248
49811: PPUSH
49812: CALL_OW 450
49816: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49817: LD_ADDR_VAR 0 3
49821: PUSH
49822: LD_VAR 0 4
49826: PPUSH
49827: LD_INT 1
49829: PPUSH
49830: CALL_OW 275
49834: PUSH
49835: LD_VAR 0 5
49839: PUSH
49840: LD_INT 1
49842: ARRAY
49843: GREATEREQUAL
49844: PUSH
49845: LD_VAR 0 4
49849: PPUSH
49850: LD_INT 2
49852: PPUSH
49853: CALL_OW 275
49857: PUSH
49858: LD_VAR 0 5
49862: PUSH
49863: LD_INT 2
49865: ARRAY
49866: GREATEREQUAL
49867: AND
49868: PUSH
49869: LD_VAR 0 4
49873: PPUSH
49874: LD_INT 3
49876: PPUSH
49877: CALL_OW 275
49881: PUSH
49882: LD_VAR 0 5
49886: PUSH
49887: LD_INT 3
49889: ARRAY
49890: GREATEREQUAL
49891: AND
49892: ST_TO_ADDR
// end ;
49893: LD_VAR 0 3
49897: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49898: LD_INT 0
49900: PPUSH
49901: PPUSH
49902: PPUSH
49903: PPUSH
49904: PPUSH
49905: PPUSH
49906: PPUSH
49907: PPUSH
49908: PPUSH
49909: PPUSH
49910: PPUSH
// result := false ;
49911: LD_ADDR_VAR 0 8
49915: PUSH
49916: LD_INT 0
49918: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49919: LD_VAR 0 5
49923: NOT
49924: PUSH
49925: LD_VAR 0 1
49929: NOT
49930: OR
49931: PUSH
49932: LD_VAR 0 2
49936: NOT
49937: OR
49938: PUSH
49939: LD_VAR 0 3
49943: NOT
49944: OR
49945: IFFALSE 49949
// exit ;
49947: GO 50763
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49949: LD_ADDR_VAR 0 14
49953: PUSH
49954: LD_VAR 0 1
49958: PPUSH
49959: LD_VAR 0 2
49963: PPUSH
49964: LD_VAR 0 3
49968: PPUSH
49969: LD_VAR 0 4
49973: PPUSH
49974: LD_VAR 0 5
49978: PUSH
49979: LD_INT 1
49981: ARRAY
49982: PPUSH
49983: CALL_OW 248
49987: PPUSH
49988: LD_INT 0
49990: PPUSH
49991: CALL 51996 0 6
49995: ST_TO_ADDR
// if not hexes then
49996: LD_VAR 0 14
50000: NOT
50001: IFFALSE 50005
// exit ;
50003: GO 50763
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50005: LD_ADDR_VAR 0 17
50009: PUSH
50010: LD_VAR 0 5
50014: PPUSH
50015: LD_INT 22
50017: PUSH
50018: LD_VAR 0 13
50022: PPUSH
50023: CALL_OW 255
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 2
50034: PUSH
50035: LD_INT 30
50037: PUSH
50038: LD_INT 0
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 30
50047: PUSH
50048: LD_INT 1
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: LIST
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PPUSH
50064: CALL_OW 72
50068: ST_TO_ADDR
// for i = 1 to hexes do
50069: LD_ADDR_VAR 0 9
50073: PUSH
50074: DOUBLE
50075: LD_INT 1
50077: DEC
50078: ST_TO_ADDR
50079: LD_VAR 0 14
50083: PUSH
50084: FOR_TO
50085: IFFALSE 50761
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50087: LD_ADDR_VAR 0 13
50091: PUSH
50092: LD_VAR 0 14
50096: PUSH
50097: LD_VAR 0 9
50101: ARRAY
50102: PUSH
50103: LD_INT 1
50105: ARRAY
50106: PPUSH
50107: LD_VAR 0 14
50111: PUSH
50112: LD_VAR 0 9
50116: ARRAY
50117: PUSH
50118: LD_INT 2
50120: ARRAY
50121: PPUSH
50122: CALL_OW 428
50126: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50127: LD_VAR 0 14
50131: PUSH
50132: LD_VAR 0 9
50136: ARRAY
50137: PUSH
50138: LD_INT 1
50140: ARRAY
50141: PPUSH
50142: LD_VAR 0 14
50146: PUSH
50147: LD_VAR 0 9
50151: ARRAY
50152: PUSH
50153: LD_INT 2
50155: ARRAY
50156: PPUSH
50157: CALL_OW 351
50161: PUSH
50162: LD_VAR 0 14
50166: PUSH
50167: LD_VAR 0 9
50171: ARRAY
50172: PUSH
50173: LD_INT 1
50175: ARRAY
50176: PPUSH
50177: LD_VAR 0 14
50181: PUSH
50182: LD_VAR 0 9
50186: ARRAY
50187: PUSH
50188: LD_INT 2
50190: ARRAY
50191: PPUSH
50192: CALL_OW 488
50196: NOT
50197: OR
50198: PUSH
50199: LD_VAR 0 13
50203: PPUSH
50204: CALL_OW 247
50208: PUSH
50209: LD_INT 3
50211: EQUAL
50212: OR
50213: IFFALSE 50219
// exit ;
50215: POP
50216: POP
50217: GO 50763
// if not tmp then
50219: LD_VAR 0 13
50223: NOT
50224: IFFALSE 50228
// continue ;
50226: GO 50084
// result := true ;
50228: LD_ADDR_VAR 0 8
50232: PUSH
50233: LD_INT 1
50235: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50236: LD_VAR 0 6
50240: PUSH
50241: LD_VAR 0 13
50245: PPUSH
50246: CALL_OW 247
50250: PUSH
50251: LD_INT 2
50253: EQUAL
50254: AND
50255: PUSH
50256: LD_VAR 0 13
50260: PPUSH
50261: CALL_OW 263
50265: PUSH
50266: LD_INT 1
50268: EQUAL
50269: AND
50270: IFFALSE 50434
// begin if IsDrivenBy ( tmp ) then
50272: LD_VAR 0 13
50276: PPUSH
50277: CALL_OW 311
50281: IFFALSE 50285
// continue ;
50283: GO 50084
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50285: LD_VAR 0 6
50289: PPUSH
50290: LD_INT 3
50292: PUSH
50293: LD_INT 60
50295: PUSH
50296: EMPTY
50297: LIST
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 3
50305: PUSH
50306: LD_INT 55
50308: PUSH
50309: EMPTY
50310: LIST
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PPUSH
50320: CALL_OW 72
50324: IFFALSE 50432
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50326: LD_ADDR_VAR 0 18
50330: PUSH
50331: LD_VAR 0 6
50335: PPUSH
50336: LD_INT 3
50338: PUSH
50339: LD_INT 60
50341: PUSH
50342: EMPTY
50343: LIST
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 3
50351: PUSH
50352: LD_INT 55
50354: PUSH
50355: EMPTY
50356: LIST
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PPUSH
50366: CALL_OW 72
50370: PUSH
50371: LD_INT 1
50373: ARRAY
50374: ST_TO_ADDR
// if IsInUnit ( driver ) then
50375: LD_VAR 0 18
50379: PPUSH
50380: CALL_OW 310
50384: IFFALSE 50395
// ComExit ( driver ) ;
50386: LD_VAR 0 18
50390: PPUSH
50391: CALL 75776 0 1
// AddComEnterUnit ( driver , tmp ) ;
50395: LD_VAR 0 18
50399: PPUSH
50400: LD_VAR 0 13
50404: PPUSH
50405: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50409: LD_VAR 0 18
50413: PPUSH
50414: LD_VAR 0 7
50418: PPUSH
50419: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50423: LD_VAR 0 18
50427: PPUSH
50428: CALL_OW 181
// end ; continue ;
50432: GO 50084
// end ; if not cleaners or not tmp in cleaners then
50434: LD_VAR 0 6
50438: NOT
50439: PUSH
50440: LD_VAR 0 13
50444: PUSH
50445: LD_VAR 0 6
50449: IN
50450: NOT
50451: OR
50452: IFFALSE 50759
// begin if dep then
50454: LD_VAR 0 17
50458: IFFALSE 50594
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50460: LD_ADDR_VAR 0 16
50464: PUSH
50465: LD_VAR 0 17
50469: PUSH
50470: LD_INT 1
50472: ARRAY
50473: PPUSH
50474: CALL_OW 250
50478: PPUSH
50479: LD_VAR 0 17
50483: PUSH
50484: LD_INT 1
50486: ARRAY
50487: PPUSH
50488: CALL_OW 254
50492: PPUSH
50493: LD_INT 5
50495: PPUSH
50496: CALL_OW 272
50500: PUSH
50501: LD_VAR 0 17
50505: PUSH
50506: LD_INT 1
50508: ARRAY
50509: PPUSH
50510: CALL_OW 251
50514: PPUSH
50515: LD_VAR 0 17
50519: PUSH
50520: LD_INT 1
50522: ARRAY
50523: PPUSH
50524: CALL_OW 254
50528: PPUSH
50529: LD_INT 5
50531: PPUSH
50532: CALL_OW 273
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50541: LD_VAR 0 16
50545: PUSH
50546: LD_INT 1
50548: ARRAY
50549: PPUSH
50550: LD_VAR 0 16
50554: PUSH
50555: LD_INT 2
50557: ARRAY
50558: PPUSH
50559: CALL_OW 488
50563: IFFALSE 50594
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50565: LD_VAR 0 13
50569: PPUSH
50570: LD_VAR 0 16
50574: PUSH
50575: LD_INT 1
50577: ARRAY
50578: PPUSH
50579: LD_VAR 0 16
50583: PUSH
50584: LD_INT 2
50586: ARRAY
50587: PPUSH
50588: CALL_OW 111
// continue ;
50592: GO 50084
// end ; end ; r := GetDir ( tmp ) ;
50594: LD_ADDR_VAR 0 15
50598: PUSH
50599: LD_VAR 0 13
50603: PPUSH
50604: CALL_OW 254
50608: ST_TO_ADDR
// if r = 5 then
50609: LD_VAR 0 15
50613: PUSH
50614: LD_INT 5
50616: EQUAL
50617: IFFALSE 50627
// r := 0 ;
50619: LD_ADDR_VAR 0 15
50623: PUSH
50624: LD_INT 0
50626: ST_TO_ADDR
// for j = r to 5 do
50627: LD_ADDR_VAR 0 10
50631: PUSH
50632: DOUBLE
50633: LD_VAR 0 15
50637: DEC
50638: ST_TO_ADDR
50639: LD_INT 5
50641: PUSH
50642: FOR_TO
50643: IFFALSE 50757
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50645: LD_ADDR_VAR 0 11
50649: PUSH
50650: LD_VAR 0 13
50654: PPUSH
50655: CALL_OW 250
50659: PPUSH
50660: LD_VAR 0 10
50664: PPUSH
50665: LD_INT 2
50667: PPUSH
50668: CALL_OW 272
50672: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50673: LD_ADDR_VAR 0 12
50677: PUSH
50678: LD_VAR 0 13
50682: PPUSH
50683: CALL_OW 251
50687: PPUSH
50688: LD_VAR 0 10
50692: PPUSH
50693: LD_INT 2
50695: PPUSH
50696: CALL_OW 273
50700: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50701: LD_VAR 0 11
50705: PPUSH
50706: LD_VAR 0 12
50710: PPUSH
50711: CALL_OW 488
50715: PUSH
50716: LD_VAR 0 11
50720: PPUSH
50721: LD_VAR 0 12
50725: PPUSH
50726: CALL_OW 428
50730: NOT
50731: AND
50732: IFFALSE 50755
// begin ComMoveXY ( tmp , _x , _y ) ;
50734: LD_VAR 0 13
50738: PPUSH
50739: LD_VAR 0 11
50743: PPUSH
50744: LD_VAR 0 12
50748: PPUSH
50749: CALL_OW 111
// break ;
50753: GO 50757
// end ; end ;
50755: GO 50642
50757: POP
50758: POP
// end ; end ;
50759: GO 50084
50761: POP
50762: POP
// end ;
50763: LD_VAR 0 8
50767: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50768: LD_INT 0
50770: PPUSH
// result := true ;
50771: LD_ADDR_VAR 0 3
50775: PUSH
50776: LD_INT 1
50778: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50779: LD_VAR 0 2
50783: PUSH
50784: LD_INT 24
50786: DOUBLE
50787: EQUAL
50788: IFTRUE 50798
50790: LD_INT 33
50792: DOUBLE
50793: EQUAL
50794: IFTRUE 50798
50796: GO 50823
50798: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50799: LD_ADDR_VAR 0 3
50803: PUSH
50804: LD_INT 32
50806: PPUSH
50807: LD_VAR 0 1
50811: PPUSH
50812: CALL_OW 321
50816: PUSH
50817: LD_INT 2
50819: EQUAL
50820: ST_TO_ADDR
50821: GO 51139
50823: LD_INT 20
50825: DOUBLE
50826: EQUAL
50827: IFTRUE 50831
50829: GO 50856
50831: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50832: LD_ADDR_VAR 0 3
50836: PUSH
50837: LD_INT 6
50839: PPUSH
50840: LD_VAR 0 1
50844: PPUSH
50845: CALL_OW 321
50849: PUSH
50850: LD_INT 2
50852: EQUAL
50853: ST_TO_ADDR
50854: GO 51139
50856: LD_INT 22
50858: DOUBLE
50859: EQUAL
50860: IFTRUE 50870
50862: LD_INT 36
50864: DOUBLE
50865: EQUAL
50866: IFTRUE 50870
50868: GO 50895
50870: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50871: LD_ADDR_VAR 0 3
50875: PUSH
50876: LD_INT 15
50878: PPUSH
50879: LD_VAR 0 1
50883: PPUSH
50884: CALL_OW 321
50888: PUSH
50889: LD_INT 2
50891: EQUAL
50892: ST_TO_ADDR
50893: GO 51139
50895: LD_INT 30
50897: DOUBLE
50898: EQUAL
50899: IFTRUE 50903
50901: GO 50928
50903: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50904: LD_ADDR_VAR 0 3
50908: PUSH
50909: LD_INT 20
50911: PPUSH
50912: LD_VAR 0 1
50916: PPUSH
50917: CALL_OW 321
50921: PUSH
50922: LD_INT 2
50924: EQUAL
50925: ST_TO_ADDR
50926: GO 51139
50928: LD_INT 28
50930: DOUBLE
50931: EQUAL
50932: IFTRUE 50942
50934: LD_INT 21
50936: DOUBLE
50937: EQUAL
50938: IFTRUE 50942
50940: GO 50967
50942: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50943: LD_ADDR_VAR 0 3
50947: PUSH
50948: LD_INT 21
50950: PPUSH
50951: LD_VAR 0 1
50955: PPUSH
50956: CALL_OW 321
50960: PUSH
50961: LD_INT 2
50963: EQUAL
50964: ST_TO_ADDR
50965: GO 51139
50967: LD_INT 16
50969: DOUBLE
50970: EQUAL
50971: IFTRUE 50975
50973: GO 51000
50975: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50976: LD_ADDR_VAR 0 3
50980: PUSH
50981: LD_INT 84
50983: PPUSH
50984: LD_VAR 0 1
50988: PPUSH
50989: CALL_OW 321
50993: PUSH
50994: LD_INT 2
50996: EQUAL
50997: ST_TO_ADDR
50998: GO 51139
51000: LD_INT 19
51002: DOUBLE
51003: EQUAL
51004: IFTRUE 51014
51006: LD_INT 23
51008: DOUBLE
51009: EQUAL
51010: IFTRUE 51014
51012: GO 51039
51014: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51015: LD_ADDR_VAR 0 3
51019: PUSH
51020: LD_INT 83
51022: PPUSH
51023: LD_VAR 0 1
51027: PPUSH
51028: CALL_OW 321
51032: PUSH
51033: LD_INT 2
51035: EQUAL
51036: ST_TO_ADDR
51037: GO 51139
51039: LD_INT 17
51041: DOUBLE
51042: EQUAL
51043: IFTRUE 51047
51045: GO 51072
51047: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51048: LD_ADDR_VAR 0 3
51052: PUSH
51053: LD_INT 39
51055: PPUSH
51056: LD_VAR 0 1
51060: PPUSH
51061: CALL_OW 321
51065: PUSH
51066: LD_INT 2
51068: EQUAL
51069: ST_TO_ADDR
51070: GO 51139
51072: LD_INT 18
51074: DOUBLE
51075: EQUAL
51076: IFTRUE 51080
51078: GO 51105
51080: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51081: LD_ADDR_VAR 0 3
51085: PUSH
51086: LD_INT 40
51088: PPUSH
51089: LD_VAR 0 1
51093: PPUSH
51094: CALL_OW 321
51098: PUSH
51099: LD_INT 2
51101: EQUAL
51102: ST_TO_ADDR
51103: GO 51139
51105: LD_INT 27
51107: DOUBLE
51108: EQUAL
51109: IFTRUE 51113
51111: GO 51138
51113: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51114: LD_ADDR_VAR 0 3
51118: PUSH
51119: LD_INT 35
51121: PPUSH
51122: LD_VAR 0 1
51126: PPUSH
51127: CALL_OW 321
51131: PUSH
51132: LD_INT 2
51134: EQUAL
51135: ST_TO_ADDR
51136: GO 51139
51138: POP
// end ;
51139: LD_VAR 0 3
51143: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51144: LD_INT 0
51146: PPUSH
51147: PPUSH
51148: PPUSH
51149: PPUSH
51150: PPUSH
51151: PPUSH
51152: PPUSH
51153: PPUSH
51154: PPUSH
51155: PPUSH
51156: PPUSH
// result := false ;
51157: LD_ADDR_VAR 0 6
51161: PUSH
51162: LD_INT 0
51164: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51165: LD_VAR 0 1
51169: NOT
51170: PUSH
51171: LD_VAR 0 1
51175: PPUSH
51176: CALL_OW 266
51180: PUSH
51181: LD_INT 0
51183: PUSH
51184: LD_INT 1
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: IN
51191: NOT
51192: OR
51193: PUSH
51194: LD_VAR 0 2
51198: NOT
51199: OR
51200: PUSH
51201: LD_VAR 0 5
51205: PUSH
51206: LD_INT 0
51208: PUSH
51209: LD_INT 1
51211: PUSH
51212: LD_INT 2
51214: PUSH
51215: LD_INT 3
51217: PUSH
51218: LD_INT 4
51220: PUSH
51221: LD_INT 5
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: IN
51232: NOT
51233: OR
51234: PUSH
51235: LD_VAR 0 3
51239: PPUSH
51240: LD_VAR 0 4
51244: PPUSH
51245: CALL_OW 488
51249: NOT
51250: OR
51251: IFFALSE 51255
// exit ;
51253: GO 51991
// side := GetSide ( depot ) ;
51255: LD_ADDR_VAR 0 9
51259: PUSH
51260: LD_VAR 0 1
51264: PPUSH
51265: CALL_OW 255
51269: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51270: LD_VAR 0 9
51274: PPUSH
51275: LD_VAR 0 2
51279: PPUSH
51280: CALL 50768 0 2
51284: NOT
51285: IFFALSE 51289
// exit ;
51287: GO 51991
// pom := GetBase ( depot ) ;
51289: LD_ADDR_VAR 0 10
51293: PUSH
51294: LD_VAR 0 1
51298: PPUSH
51299: CALL_OW 274
51303: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51304: LD_ADDR_VAR 0 11
51308: PUSH
51309: LD_VAR 0 2
51313: PPUSH
51314: LD_VAR 0 1
51318: PPUSH
51319: CALL_OW 248
51323: PPUSH
51324: CALL_OW 450
51328: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51329: LD_VAR 0 10
51333: PPUSH
51334: LD_INT 1
51336: PPUSH
51337: CALL_OW 275
51341: PUSH
51342: LD_VAR 0 11
51346: PUSH
51347: LD_INT 1
51349: ARRAY
51350: GREATEREQUAL
51351: PUSH
51352: LD_VAR 0 10
51356: PPUSH
51357: LD_INT 2
51359: PPUSH
51360: CALL_OW 275
51364: PUSH
51365: LD_VAR 0 11
51369: PUSH
51370: LD_INT 2
51372: ARRAY
51373: GREATEREQUAL
51374: AND
51375: PUSH
51376: LD_VAR 0 10
51380: PPUSH
51381: LD_INT 3
51383: PPUSH
51384: CALL_OW 275
51388: PUSH
51389: LD_VAR 0 11
51393: PUSH
51394: LD_INT 3
51396: ARRAY
51397: GREATEREQUAL
51398: AND
51399: NOT
51400: IFFALSE 51404
// exit ;
51402: GO 51991
// if GetBType ( depot ) = b_depot then
51404: LD_VAR 0 1
51408: PPUSH
51409: CALL_OW 266
51413: PUSH
51414: LD_INT 0
51416: EQUAL
51417: IFFALSE 51429
// dist := 28 else
51419: LD_ADDR_VAR 0 14
51423: PUSH
51424: LD_INT 28
51426: ST_TO_ADDR
51427: GO 51437
// dist := 36 ;
51429: LD_ADDR_VAR 0 14
51433: PUSH
51434: LD_INT 36
51436: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51437: LD_VAR 0 1
51441: PPUSH
51442: LD_VAR 0 3
51446: PPUSH
51447: LD_VAR 0 4
51451: PPUSH
51452: CALL_OW 297
51456: PUSH
51457: LD_VAR 0 14
51461: GREATER
51462: IFFALSE 51466
// exit ;
51464: GO 51991
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51466: LD_ADDR_VAR 0 12
51470: PUSH
51471: LD_VAR 0 2
51475: PPUSH
51476: LD_VAR 0 3
51480: PPUSH
51481: LD_VAR 0 4
51485: PPUSH
51486: LD_VAR 0 5
51490: PPUSH
51491: LD_VAR 0 1
51495: PPUSH
51496: CALL_OW 248
51500: PPUSH
51501: LD_INT 0
51503: PPUSH
51504: CALL 51996 0 6
51508: ST_TO_ADDR
// if not hexes then
51509: LD_VAR 0 12
51513: NOT
51514: IFFALSE 51518
// exit ;
51516: GO 51991
// hex := GetHexInfo ( x , y ) ;
51518: LD_ADDR_VAR 0 15
51522: PUSH
51523: LD_VAR 0 3
51527: PPUSH
51528: LD_VAR 0 4
51532: PPUSH
51533: CALL_OW 546
51537: ST_TO_ADDR
// if hex [ 1 ] then
51538: LD_VAR 0 15
51542: PUSH
51543: LD_INT 1
51545: ARRAY
51546: IFFALSE 51550
// exit ;
51548: GO 51991
// height := hex [ 2 ] ;
51550: LD_ADDR_VAR 0 13
51554: PUSH
51555: LD_VAR 0 15
51559: PUSH
51560: LD_INT 2
51562: ARRAY
51563: ST_TO_ADDR
// for i = 1 to hexes do
51564: LD_ADDR_VAR 0 7
51568: PUSH
51569: DOUBLE
51570: LD_INT 1
51572: DEC
51573: ST_TO_ADDR
51574: LD_VAR 0 12
51578: PUSH
51579: FOR_TO
51580: IFFALSE 51910
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51582: LD_VAR 0 12
51586: PUSH
51587: LD_VAR 0 7
51591: ARRAY
51592: PUSH
51593: LD_INT 1
51595: ARRAY
51596: PPUSH
51597: LD_VAR 0 12
51601: PUSH
51602: LD_VAR 0 7
51606: ARRAY
51607: PUSH
51608: LD_INT 2
51610: ARRAY
51611: PPUSH
51612: CALL_OW 488
51616: NOT
51617: PUSH
51618: LD_VAR 0 12
51622: PUSH
51623: LD_VAR 0 7
51627: ARRAY
51628: PUSH
51629: LD_INT 1
51631: ARRAY
51632: PPUSH
51633: LD_VAR 0 12
51637: PUSH
51638: LD_VAR 0 7
51642: ARRAY
51643: PUSH
51644: LD_INT 2
51646: ARRAY
51647: PPUSH
51648: CALL_OW 428
51652: PUSH
51653: LD_INT 0
51655: GREATER
51656: OR
51657: PUSH
51658: LD_VAR 0 12
51662: PUSH
51663: LD_VAR 0 7
51667: ARRAY
51668: PUSH
51669: LD_INT 1
51671: ARRAY
51672: PPUSH
51673: LD_VAR 0 12
51677: PUSH
51678: LD_VAR 0 7
51682: ARRAY
51683: PUSH
51684: LD_INT 2
51686: ARRAY
51687: PPUSH
51688: CALL_OW 351
51692: OR
51693: IFFALSE 51699
// exit ;
51695: POP
51696: POP
51697: GO 51991
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51699: LD_ADDR_VAR 0 8
51703: PUSH
51704: LD_VAR 0 12
51708: PUSH
51709: LD_VAR 0 7
51713: ARRAY
51714: PUSH
51715: LD_INT 1
51717: ARRAY
51718: PPUSH
51719: LD_VAR 0 12
51723: PUSH
51724: LD_VAR 0 7
51728: ARRAY
51729: PUSH
51730: LD_INT 2
51732: ARRAY
51733: PPUSH
51734: CALL_OW 546
51738: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51739: LD_VAR 0 8
51743: PUSH
51744: LD_INT 1
51746: ARRAY
51747: PUSH
51748: LD_VAR 0 8
51752: PUSH
51753: LD_INT 2
51755: ARRAY
51756: PUSH
51757: LD_VAR 0 13
51761: PUSH
51762: LD_INT 2
51764: PLUS
51765: GREATER
51766: OR
51767: PUSH
51768: LD_VAR 0 8
51772: PUSH
51773: LD_INT 2
51775: ARRAY
51776: PUSH
51777: LD_VAR 0 13
51781: PUSH
51782: LD_INT 2
51784: MINUS
51785: LESS
51786: OR
51787: PUSH
51788: LD_VAR 0 8
51792: PUSH
51793: LD_INT 3
51795: ARRAY
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: LD_INT 8
51802: PUSH
51803: LD_INT 9
51805: PUSH
51806: LD_INT 10
51808: PUSH
51809: LD_INT 11
51811: PUSH
51812: LD_INT 12
51814: PUSH
51815: LD_INT 13
51817: PUSH
51818: LD_INT 16
51820: PUSH
51821: LD_INT 17
51823: PUSH
51824: LD_INT 18
51826: PUSH
51827: LD_INT 19
51829: PUSH
51830: LD_INT 20
51832: PUSH
51833: LD_INT 21
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: IN
51851: NOT
51852: OR
51853: PUSH
51854: LD_VAR 0 8
51858: PUSH
51859: LD_INT 5
51861: ARRAY
51862: NOT
51863: OR
51864: PUSH
51865: LD_VAR 0 8
51869: PUSH
51870: LD_INT 6
51872: ARRAY
51873: PUSH
51874: LD_INT 1
51876: PUSH
51877: LD_INT 2
51879: PUSH
51880: LD_INT 7
51882: PUSH
51883: LD_INT 9
51885: PUSH
51886: LD_INT 10
51888: PUSH
51889: LD_INT 11
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: IN
51900: NOT
51901: OR
51902: IFFALSE 51908
// exit ;
51904: POP
51905: POP
51906: GO 51991
// end ;
51908: GO 51579
51910: POP
51911: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51912: LD_VAR 0 9
51916: PPUSH
51917: LD_VAR 0 3
51921: PPUSH
51922: LD_VAR 0 4
51926: PPUSH
51927: LD_INT 20
51929: PPUSH
51930: CALL 43943 0 4
51934: PUSH
51935: LD_INT 4
51937: ARRAY
51938: IFFALSE 51942
// exit ;
51940: GO 51991
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51942: LD_VAR 0 2
51946: PUSH
51947: LD_INT 29
51949: PUSH
51950: LD_INT 30
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: IN
51957: PUSH
51958: LD_VAR 0 3
51962: PPUSH
51963: LD_VAR 0 4
51967: PPUSH
51968: LD_VAR 0 9
51972: PPUSH
51973: CALL_OW 440
51977: NOT
51978: AND
51979: IFFALSE 51983
// exit ;
51981: GO 51991
// result := true ;
51983: LD_ADDR_VAR 0 6
51987: PUSH
51988: LD_INT 1
51990: ST_TO_ADDR
// end ;
51991: LD_VAR 0 6
51995: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51996: LD_INT 0
51998: PPUSH
51999: PPUSH
52000: PPUSH
52001: PPUSH
52002: PPUSH
52003: PPUSH
52004: PPUSH
52005: PPUSH
52006: PPUSH
52007: PPUSH
52008: PPUSH
52009: PPUSH
52010: PPUSH
52011: PPUSH
52012: PPUSH
52013: PPUSH
52014: PPUSH
52015: PPUSH
52016: PPUSH
52017: PPUSH
52018: PPUSH
52019: PPUSH
52020: PPUSH
52021: PPUSH
52022: PPUSH
52023: PPUSH
52024: PPUSH
52025: PPUSH
52026: PPUSH
52027: PPUSH
52028: PPUSH
52029: PPUSH
52030: PPUSH
52031: PPUSH
52032: PPUSH
52033: PPUSH
52034: PPUSH
52035: PPUSH
52036: PPUSH
52037: PPUSH
52038: PPUSH
52039: PPUSH
52040: PPUSH
52041: PPUSH
52042: PPUSH
52043: PPUSH
52044: PPUSH
52045: PPUSH
52046: PPUSH
52047: PPUSH
52048: PPUSH
52049: PPUSH
52050: PPUSH
52051: PPUSH
52052: PPUSH
52053: PPUSH
52054: PPUSH
52055: PPUSH
// result = [ ] ;
52056: LD_ADDR_VAR 0 7
52060: PUSH
52061: EMPTY
52062: ST_TO_ADDR
// temp_list = [ ] ;
52063: LD_ADDR_VAR 0 9
52067: PUSH
52068: EMPTY
52069: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52070: LD_VAR 0 4
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: LD_INT 1
52080: PUSH
52081: LD_INT 2
52083: PUSH
52084: LD_INT 3
52086: PUSH
52087: LD_INT 4
52089: PUSH
52090: LD_INT 5
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: IN
52101: NOT
52102: PUSH
52103: LD_VAR 0 1
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: LD_INT 1
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: IN
52118: PUSH
52119: LD_VAR 0 5
52123: PUSH
52124: LD_INT 1
52126: PUSH
52127: LD_INT 2
52129: PUSH
52130: LD_INT 3
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: LIST
52137: IN
52138: NOT
52139: AND
52140: OR
52141: IFFALSE 52145
// exit ;
52143: GO 70536
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52145: LD_VAR 0 1
52149: PUSH
52150: LD_INT 6
52152: PUSH
52153: LD_INT 7
52155: PUSH
52156: LD_INT 8
52158: PUSH
52159: LD_INT 13
52161: PUSH
52162: LD_INT 12
52164: PUSH
52165: LD_INT 15
52167: PUSH
52168: LD_INT 11
52170: PUSH
52171: LD_INT 14
52173: PUSH
52174: LD_INT 10
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: IN
52188: IFFALSE 52198
// btype = b_lab ;
52190: LD_ADDR_VAR 0 1
52194: PUSH
52195: LD_INT 6
52197: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52198: LD_VAR 0 6
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: LD_INT 1
52208: PUSH
52209: LD_INT 2
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: LIST
52216: IN
52217: NOT
52218: PUSH
52219: LD_VAR 0 1
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: LD_INT 1
52229: PUSH
52230: LD_INT 2
52232: PUSH
52233: LD_INT 3
52235: PUSH
52236: LD_INT 6
52238: PUSH
52239: LD_INT 36
52241: PUSH
52242: LD_INT 4
52244: PUSH
52245: LD_INT 5
52247: PUSH
52248: LD_INT 31
52250: PUSH
52251: LD_INT 32
52253: PUSH
52254: LD_INT 33
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: IN
52270: NOT
52271: PUSH
52272: LD_VAR 0 6
52276: PUSH
52277: LD_INT 1
52279: EQUAL
52280: AND
52281: OR
52282: PUSH
52283: LD_VAR 0 1
52287: PUSH
52288: LD_INT 2
52290: PUSH
52291: LD_INT 3
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: IN
52298: NOT
52299: PUSH
52300: LD_VAR 0 6
52304: PUSH
52305: LD_INT 2
52307: EQUAL
52308: AND
52309: OR
52310: IFFALSE 52320
// mode = 0 ;
52312: LD_ADDR_VAR 0 6
52316: PUSH
52317: LD_INT 0
52319: ST_TO_ADDR
// case mode of 0 :
52320: LD_VAR 0 6
52324: PUSH
52325: LD_INT 0
52327: DOUBLE
52328: EQUAL
52329: IFTRUE 52333
52331: GO 63786
52333: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52334: LD_ADDR_VAR 0 11
52338: PUSH
52339: LD_INT 0
52341: PUSH
52342: LD_INT 0
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 0
52351: PUSH
52352: LD_INT 1
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: LD_INT 0
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 1
52372: PUSH
52373: LD_INT 1
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 1
52403: NEG
52404: PUSH
52405: LD_INT 1
52407: NEG
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: LD_INT 2
52419: NEG
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: LD_INT 2
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 1
52438: PUSH
52439: LD_INT 1
52441: NEG
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 1
52449: PUSH
52450: LD_INT 2
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: LD_INT 2
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 1
52469: NEG
52470: PUSH
52471: LD_INT 1
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: LD_INT 3
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: LD_INT 3
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: LD_INT 2
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52527: LD_ADDR_VAR 0 12
52531: PUSH
52532: LD_INT 0
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: LD_INT 1
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 1
52555: PUSH
52556: LD_INT 0
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 1
52565: PUSH
52566: LD_INT 1
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: LD_INT 1
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 1
52585: NEG
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 1
52596: NEG
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 1
52608: PUSH
52609: LD_INT 1
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 2
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 2
52629: PUSH
52630: LD_INT 1
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 1
52639: NEG
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 2
52650: NEG
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 2
52661: NEG
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 2
52673: NEG
52674: PUSH
52675: LD_INT 1
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 3
52684: NEG
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 3
52695: NEG
52696: PUSH
52697: LD_INT 1
52699: NEG
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52723: LD_ADDR_VAR 0 13
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: LD_INT 1
52743: NEG
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 1
52761: PUSH
52762: LD_INT 1
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: LD_INT 1
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 1
52781: NEG
52782: PUSH
52783: LD_INT 0
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 1
52792: NEG
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 1
52804: NEG
52805: PUSH
52806: LD_INT 2
52808: NEG
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 2
52816: PUSH
52817: LD_INT 1
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 2
52826: PUSH
52827: LD_INT 2
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 1
52836: PUSH
52837: LD_INT 2
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 2
52846: NEG
52847: PUSH
52848: LD_INT 1
52850: NEG
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 2
52858: NEG
52859: PUSH
52860: LD_INT 2
52862: NEG
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 2
52870: NEG
52871: PUSH
52872: LD_INT 3
52874: NEG
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 3
52882: NEG
52883: PUSH
52884: LD_INT 2
52886: NEG
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 3
52894: NEG
52895: PUSH
52896: LD_INT 3
52898: NEG
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52922: LD_ADDR_VAR 0 14
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: LD_INT 0
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: LD_INT 1
52942: NEG
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: LD_INT 0
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: LD_INT 1
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 0
52970: PUSH
52971: LD_INT 1
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 1
52980: NEG
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 1
52991: NEG
52992: PUSH
52993: LD_INT 1
52995: NEG
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 1
53003: NEG
53004: PUSH
53005: LD_INT 2
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 0
53015: PUSH
53016: LD_INT 2
53018: NEG
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: PUSH
53027: LD_INT 1
53029: NEG
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 1
53037: PUSH
53038: LD_INT 2
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: LD_INT 2
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: LD_INT 1
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 1
53068: NEG
53069: PUSH
53070: LD_INT 3
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: LD_INT 3
53083: NEG
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: LD_INT 2
53094: NEG
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53118: LD_ADDR_VAR 0 15
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 0
53135: PUSH
53136: LD_INT 1
53138: NEG
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 1
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 1
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 0
53166: PUSH
53167: LD_INT 1
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: NEG
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 1
53187: NEG
53188: PUSH
53189: LD_INT 1
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: LD_INT 1
53202: NEG
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 2
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 2
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 1
53230: NEG
53231: PUSH
53232: LD_INT 1
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 2
53241: NEG
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 2
53252: NEG
53253: PUSH
53254: LD_INT 1
53256: NEG
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 2
53264: PUSH
53265: LD_INT 1
53267: NEG
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 3
53275: PUSH
53276: LD_INT 0
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 3
53285: PUSH
53286: LD_INT 1
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53311: LD_ADDR_VAR 0 16
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: LD_INT 0
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 0
53328: PUSH
53329: LD_INT 1
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 1
53339: PUSH
53340: LD_INT 0
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 1
53349: PUSH
53350: LD_INT 1
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 0
53359: PUSH
53360: LD_INT 1
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 1
53380: NEG
53381: PUSH
53382: LD_INT 1
53384: NEG
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 1
53392: NEG
53393: PUSH
53394: LD_INT 2
53396: NEG
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 2
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 2
53414: PUSH
53415: LD_INT 2
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: LD_INT 2
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 2
53434: NEG
53435: PUSH
53436: LD_INT 1
53438: NEG
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 2
53446: NEG
53447: PUSH
53448: LD_INT 2
53450: NEG
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 3
53458: PUSH
53459: LD_INT 2
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 3
53468: PUSH
53469: LD_INT 3
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 2
53478: PUSH
53479: LD_INT 3
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53504: LD_ADDR_VAR 0 17
53508: PUSH
53509: LD_INT 0
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: LD_INT 1
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 1
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 1
53542: PUSH
53543: LD_INT 1
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 1
53562: NEG
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: LD_INT 1
53577: NEG
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 1
53585: NEG
53586: PUSH
53587: LD_INT 2
53589: NEG
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 0
53597: PUSH
53598: LD_INT 2
53600: NEG
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: LD_INT 1
53611: NEG
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 2
53619: PUSH
53620: LD_INT 0
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 2
53629: PUSH
53630: LD_INT 1
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 2
53639: PUSH
53640: LD_INT 2
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 1
53649: PUSH
53650: LD_INT 2
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 0
53659: PUSH
53660: LD_INT 2
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 1
53669: NEG
53670: PUSH
53671: LD_INT 1
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 2
53680: NEG
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 2
53691: NEG
53692: PUSH
53693: LD_INT 1
53695: NEG
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 2
53703: NEG
53704: PUSH
53705: LD_INT 2
53707: NEG
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53734: LD_ADDR_VAR 0 18
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: LD_INT 1
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 1
53772: PUSH
53773: LD_INT 1
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: LD_INT 1
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 1
53792: NEG
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 1
53815: NEG
53816: PUSH
53817: LD_INT 2
53819: NEG
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: LD_INT 2
53830: NEG
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 2
53849: PUSH
53850: LD_INT 0
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 2
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 2
53869: PUSH
53870: LD_INT 2
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: PUSH
53880: LD_INT 2
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: LD_INT 2
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: NEG
53900: PUSH
53901: LD_INT 1
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 2
53910: NEG
53911: PUSH
53912: LD_INT 0
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 2
53921: NEG
53922: PUSH
53923: LD_INT 1
53925: NEG
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 2
53933: NEG
53934: PUSH
53935: LD_INT 2
53937: NEG
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53964: LD_ADDR_VAR 0 19
53968: PUSH
53969: LD_INT 0
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: LD_INT 1
53984: NEG
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 1
53992: PUSH
53993: LD_INT 0
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 1
54002: PUSH
54003: LD_INT 1
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 0
54012: PUSH
54013: LD_INT 1
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 1
54022: NEG
54023: PUSH
54024: LD_INT 0
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 1
54033: NEG
54034: PUSH
54035: LD_INT 1
54037: NEG
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 1
54045: NEG
54046: PUSH
54047: LD_INT 2
54049: NEG
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 0
54057: PUSH
54058: LD_INT 2
54060: NEG
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 1
54068: PUSH
54069: LD_INT 1
54071: NEG
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 2
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 2
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 2
54099: PUSH
54100: LD_INT 2
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 1
54109: PUSH
54110: LD_INT 2
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 0
54119: PUSH
54120: LD_INT 2
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 1
54129: NEG
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 2
54140: NEG
54141: PUSH
54142: LD_INT 0
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 2
54151: NEG
54152: PUSH
54153: LD_INT 1
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 2
54163: NEG
54164: PUSH
54165: LD_INT 2
54167: NEG
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54194: LD_ADDR_VAR 0 20
54198: PUSH
54199: LD_INT 0
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 0
54211: PUSH
54212: LD_INT 1
54214: NEG
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 1
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 1
54232: PUSH
54233: LD_INT 1
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: LD_INT 1
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 1
54252: NEG
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 1
54263: NEG
54264: PUSH
54265: LD_INT 1
54267: NEG
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 1
54275: NEG
54276: PUSH
54277: LD_INT 2
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 0
54287: PUSH
54288: LD_INT 2
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 1
54298: PUSH
54299: LD_INT 1
54301: NEG
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 2
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 2
54319: PUSH
54320: LD_INT 1
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 2
54329: PUSH
54330: LD_INT 2
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 1
54339: PUSH
54340: LD_INT 2
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 0
54349: PUSH
54350: LD_INT 2
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 1
54359: NEG
54360: PUSH
54361: LD_INT 1
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 2
54370: NEG
54371: PUSH
54372: LD_INT 0
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 2
54381: NEG
54382: PUSH
54383: LD_INT 1
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 2
54393: NEG
54394: PUSH
54395: LD_INT 2
54397: NEG
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54424: LD_ADDR_VAR 0 21
54428: PUSH
54429: LD_INT 0
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 1
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: LD_INT 1
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: LD_INT 1
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 1
54482: NEG
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 1
54493: NEG
54494: PUSH
54495: LD_INT 1
54497: NEG
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: LD_INT 2
54509: NEG
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 0
54517: PUSH
54518: LD_INT 2
54520: NEG
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 1
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 2
54539: PUSH
54540: LD_INT 0
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 2
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 2
54559: PUSH
54560: LD_INT 2
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: PUSH
54570: LD_INT 2
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: LD_INT 2
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 1
54589: NEG
54590: PUSH
54591: LD_INT 1
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 2
54600: NEG
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 2
54611: NEG
54612: PUSH
54613: LD_INT 1
54615: NEG
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 2
54623: NEG
54624: PUSH
54625: LD_INT 2
54627: NEG
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54654: LD_ADDR_VAR 0 22
54658: PUSH
54659: LD_INT 0
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: LD_INT 1
54674: NEG
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 1
54692: PUSH
54693: LD_INT 1
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: LD_INT 1
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 1
54712: NEG
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 1
54723: NEG
54724: PUSH
54725: LD_INT 1
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 1
54735: NEG
54736: PUSH
54737: LD_INT 2
54739: NEG
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: LD_INT 2
54750: NEG
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 1
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 2
54769: PUSH
54770: LD_INT 0
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 2
54779: PUSH
54780: LD_INT 1
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 2
54789: PUSH
54790: LD_INT 2
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 1
54799: PUSH
54800: LD_INT 2
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: LD_INT 2
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 1
54819: NEG
54820: PUSH
54821: LD_INT 1
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 2
54830: NEG
54831: PUSH
54832: LD_INT 0
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 2
54841: NEG
54842: PUSH
54843: LD_INT 1
54845: NEG
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 2
54853: NEG
54854: PUSH
54855: LD_INT 2
54857: NEG
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54884: LD_ADDR_VAR 0 23
54888: PUSH
54889: LD_INT 0
54891: PUSH
54892: LD_INT 0
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: LD_INT 1
54904: NEG
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 1
54912: PUSH
54913: LD_INT 0
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 1
54922: PUSH
54923: LD_INT 1
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 0
54932: PUSH
54933: LD_INT 1
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 1
54942: NEG
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 1
54953: NEG
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 1
54965: NEG
54966: PUSH
54967: LD_INT 2
54969: NEG
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: LD_INT 2
54980: NEG
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: LD_INT 1
54991: NEG
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 2
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 2
55009: PUSH
55010: LD_INT 1
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 2
55019: PUSH
55020: LD_INT 2
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: LD_INT 2
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 0
55039: PUSH
55040: LD_INT 2
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 1
55049: NEG
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 2
55060: NEG
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 2
55071: NEG
55072: PUSH
55073: LD_INT 1
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 2
55083: NEG
55084: PUSH
55085: LD_INT 2
55087: NEG
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 2
55095: NEG
55096: PUSH
55097: LD_INT 3
55099: NEG
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: LD_INT 3
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 1
55119: PUSH
55120: LD_INT 2
55122: NEG
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 2
55130: PUSH
55131: LD_INT 1
55133: NEG
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55164: LD_ADDR_VAR 0 24
55168: PUSH
55169: LD_INT 0
55171: PUSH
55172: LD_INT 0
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 0
55181: PUSH
55182: LD_INT 1
55184: NEG
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 1
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 1
55202: PUSH
55203: LD_INT 1
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 0
55212: PUSH
55213: LD_INT 1
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 1
55222: NEG
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 1
55233: NEG
55234: PUSH
55235: LD_INT 1
55237: NEG
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 1
55245: NEG
55246: PUSH
55247: LD_INT 2
55249: NEG
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: LD_INT 2
55260: NEG
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 1
55268: PUSH
55269: LD_INT 1
55271: NEG
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 2
55279: PUSH
55280: LD_INT 0
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 2
55289: PUSH
55290: LD_INT 1
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 2
55299: PUSH
55300: LD_INT 2
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 1
55309: PUSH
55310: LD_INT 2
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: LD_INT 2
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 1
55329: NEG
55330: PUSH
55331: LD_INT 1
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 2
55340: NEG
55341: PUSH
55342: LD_INT 0
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 2
55351: NEG
55352: PUSH
55353: LD_INT 1
55355: NEG
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 2
55363: NEG
55364: PUSH
55365: LD_INT 2
55367: NEG
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: LD_INT 2
55378: NEG
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 2
55386: PUSH
55387: LD_INT 1
55389: NEG
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 3
55397: PUSH
55398: LD_INT 1
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 3
55407: PUSH
55408: LD_INT 2
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55440: LD_ADDR_VAR 0 25
55444: PUSH
55445: LD_INT 0
55447: PUSH
55448: LD_INT 0
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 0
55457: PUSH
55458: LD_INT 1
55460: NEG
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 1
55468: PUSH
55469: LD_INT 0
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 1
55478: PUSH
55479: LD_INT 1
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 0
55488: PUSH
55489: LD_INT 1
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 1
55498: NEG
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 1
55509: NEG
55510: PUSH
55511: LD_INT 1
55513: NEG
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 1
55521: NEG
55522: PUSH
55523: LD_INT 2
55525: NEG
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: LD_INT 2
55536: NEG
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 1
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 2
55555: PUSH
55556: LD_INT 0
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 2
55565: PUSH
55566: LD_INT 1
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 2
55575: PUSH
55576: LD_INT 2
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 1
55585: PUSH
55586: LD_INT 2
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: LD_INT 2
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 1
55605: NEG
55606: PUSH
55607: LD_INT 1
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 2
55616: NEG
55617: PUSH
55618: LD_INT 0
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 2
55627: NEG
55628: PUSH
55629: LD_INT 1
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 2
55639: NEG
55640: PUSH
55641: LD_INT 2
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 3
55651: PUSH
55652: LD_INT 1
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 3
55661: PUSH
55662: LD_INT 2
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 2
55671: PUSH
55672: LD_INT 3
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: LD_INT 3
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55714: LD_ADDR_VAR 0 26
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: LD_INT 0
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 0
55731: PUSH
55732: LD_INT 1
55734: NEG
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 1
55742: PUSH
55743: LD_INT 0
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: LD_INT 1
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 0
55762: PUSH
55763: LD_INT 1
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: NEG
55773: PUSH
55774: LD_INT 0
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 1
55783: NEG
55784: PUSH
55785: LD_INT 1
55787: NEG
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 1
55795: NEG
55796: PUSH
55797: LD_INT 2
55799: NEG
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: LD_INT 2
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 1
55818: PUSH
55819: LD_INT 1
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 2
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 2
55839: PUSH
55840: LD_INT 1
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 2
55849: PUSH
55850: LD_INT 2
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: PUSH
55860: LD_INT 2
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: LD_INT 2
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 2
55890: NEG
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 2
55901: NEG
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 2
55913: NEG
55914: PUSH
55915: LD_INT 2
55917: NEG
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 2
55925: PUSH
55926: LD_INT 3
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 1
55935: PUSH
55936: LD_INT 3
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 1
55945: NEG
55946: PUSH
55947: LD_INT 2
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 2
55956: NEG
55957: PUSH
55958: LD_INT 1
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55990: LD_ADDR_VAR 0 27
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: LD_INT 1
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 1
56028: PUSH
56029: LD_INT 1
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: LD_INT 1
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 1
56048: NEG
56049: PUSH
56050: LD_INT 0
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 1
56071: NEG
56072: PUSH
56073: LD_INT 2
56075: NEG
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 0
56083: PUSH
56084: LD_INT 2
56086: NEG
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 1
56094: PUSH
56095: LD_INT 1
56097: NEG
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 2
56105: PUSH
56106: LD_INT 0
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 2
56115: PUSH
56116: LD_INT 1
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 2
56125: PUSH
56126: LD_INT 2
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: LD_INT 2
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: LD_INT 2
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: NEG
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 2
56166: NEG
56167: PUSH
56168: LD_INT 0
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 2
56177: NEG
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 2
56189: NEG
56190: PUSH
56191: LD_INT 2
56193: NEG
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: LD_INT 2
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 2
56212: NEG
56213: PUSH
56214: LD_INT 1
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 3
56223: NEG
56224: PUSH
56225: LD_INT 1
56227: NEG
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 3
56235: NEG
56236: PUSH
56237: LD_INT 2
56239: NEG
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56270: LD_ADDR_VAR 0 28
56274: PUSH
56275: LD_INT 0
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 0
56287: PUSH
56288: LD_INT 1
56290: NEG
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 1
56298: PUSH
56299: LD_INT 0
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 1
56308: PUSH
56309: LD_INT 1
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: LD_INT 1
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 1
56328: NEG
56329: PUSH
56330: LD_INT 0
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 1
56339: NEG
56340: PUSH
56341: LD_INT 1
56343: NEG
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 1
56351: NEG
56352: PUSH
56353: LD_INT 2
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 0
56363: PUSH
56364: LD_INT 2
56366: NEG
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 1
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 2
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 2
56395: PUSH
56396: LD_INT 1
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 2
56405: PUSH
56406: LD_INT 2
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 1
56415: PUSH
56416: LD_INT 2
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: LD_INT 2
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 1
56435: NEG
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 2
56446: NEG
56447: PUSH
56448: LD_INT 0
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 2
56457: NEG
56458: PUSH
56459: LD_INT 1
56461: NEG
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 2
56469: NEG
56470: PUSH
56471: LD_INT 2
56473: NEG
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 2
56481: NEG
56482: PUSH
56483: LD_INT 3
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 1
56493: NEG
56494: PUSH
56495: LD_INT 3
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 3
56505: NEG
56506: PUSH
56507: LD_INT 1
56509: NEG
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 3
56517: NEG
56518: PUSH
56519: LD_INT 2
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56552: LD_ADDR_VAR 0 29
56556: PUSH
56557: LD_INT 0
56559: PUSH
56560: LD_INT 0
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 0
56569: PUSH
56570: LD_INT 1
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 1
56580: PUSH
56581: LD_INT 0
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 1
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 0
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: NEG
56611: PUSH
56612: LD_INT 0
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 1
56621: NEG
56622: PUSH
56623: LD_INT 1
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 1
56633: NEG
56634: PUSH
56635: LD_INT 2
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 0
56645: PUSH
56646: LD_INT 2
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 1
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 2
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 2
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 1
56687: PUSH
56688: LD_INT 2
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 0
56697: PUSH
56698: LD_INT 2
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 1
56707: NEG
56708: PUSH
56709: LD_INT 1
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 2
56718: NEG
56719: PUSH
56720: LD_INT 1
56722: NEG
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 2
56730: NEG
56731: PUSH
56732: LD_INT 2
56734: NEG
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 2
56742: NEG
56743: PUSH
56744: LD_INT 3
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 2
56754: PUSH
56755: LD_INT 1
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 3
56765: PUSH
56766: LD_INT 1
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 1
56775: PUSH
56776: LD_INT 3
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 1
56785: NEG
56786: PUSH
56787: LD_INT 2
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 3
56796: NEG
56797: PUSH
56798: LD_INT 2
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56831: LD_ADDR_VAR 0 30
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: LD_INT 1
56851: NEG
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 1
56859: PUSH
56860: LD_INT 0
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 1
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: LD_INT 1
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 1
56889: NEG
56890: PUSH
56891: LD_INT 0
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 1
56900: NEG
56901: PUSH
56902: LD_INT 1
56904: NEG
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 1
56912: NEG
56913: PUSH
56914: LD_INT 2
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: LD_INT 2
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 1
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 2
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 2
56956: PUSH
56957: LD_INT 1
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 2
56966: PUSH
56967: LD_INT 2
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 1
56976: PUSH
56977: LD_INT 2
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 1
56986: NEG
56987: PUSH
56988: LD_INT 1
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 2
56997: NEG
56998: PUSH
56999: LD_INT 0
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 2
57008: NEG
57009: PUSH
57010: LD_INT 1
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 1
57020: NEG
57021: PUSH
57022: LD_INT 3
57024: NEG
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 1
57032: PUSH
57033: LD_INT 2
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 3
57043: PUSH
57044: LD_INT 2
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 2
57053: PUSH
57054: LD_INT 3
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 2
57063: NEG
57064: PUSH
57065: LD_INT 1
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 3
57074: NEG
57075: PUSH
57076: LD_INT 1
57078: NEG
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57109: LD_ADDR_VAR 0 31
57113: PUSH
57114: LD_INT 0
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 0
57126: PUSH
57127: LD_INT 1
57129: NEG
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: PUSH
57138: LD_INT 0
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 1
57147: PUSH
57148: LD_INT 1
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 0
57157: PUSH
57158: LD_INT 1
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 1
57167: NEG
57168: PUSH
57169: LD_INT 0
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 1
57178: NEG
57179: PUSH
57180: LD_INT 1
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 1
57190: NEG
57191: PUSH
57192: LD_INT 2
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 1
57202: PUSH
57203: LD_INT 1
57205: NEG
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 2
57213: PUSH
57214: LD_INT 0
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 2
57223: PUSH
57224: LD_INT 1
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 2
57233: PUSH
57234: LD_INT 2
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 1
57243: PUSH
57244: LD_INT 2
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 0
57253: PUSH
57254: LD_INT 2
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 1
57263: NEG
57264: PUSH
57265: LD_INT 1
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 2
57274: NEG
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 2
57286: NEG
57287: PUSH
57288: LD_INT 2
57290: NEG
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 2
57298: NEG
57299: PUSH
57300: LD_INT 3
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 2
57310: PUSH
57311: LD_INT 1
57313: NEG
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 3
57321: PUSH
57322: LD_INT 1
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 1
57331: PUSH
57332: LD_INT 3
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 1
57341: NEG
57342: PUSH
57343: LD_INT 2
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 3
57352: NEG
57353: PUSH
57354: LD_INT 2
57356: NEG
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57387: LD_ADDR_VAR 0 32
57391: PUSH
57392: LD_INT 0
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 0
57404: PUSH
57405: LD_INT 1
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 1
57415: PUSH
57416: LD_INT 0
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 1
57425: PUSH
57426: LD_INT 1
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 0
57435: PUSH
57436: LD_INT 1
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 1
57445: NEG
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 1
57456: NEG
57457: PUSH
57458: LD_INT 1
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 1
57468: NEG
57469: PUSH
57470: LD_INT 2
57472: NEG
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: LD_INT 2
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 1
57491: PUSH
57492: LD_INT 1
57494: NEG
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 2
57502: PUSH
57503: LD_INT 1
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 2
57512: PUSH
57513: LD_INT 2
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 1
57522: PUSH
57523: LD_INT 2
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 0
57532: PUSH
57533: LD_INT 2
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 1
57542: NEG
57543: PUSH
57544: LD_INT 1
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 2
57553: NEG
57554: PUSH
57555: LD_INT 0
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 2
57564: NEG
57565: PUSH
57566: LD_INT 1
57568: NEG
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 1
57576: NEG
57577: PUSH
57578: LD_INT 3
57580: NEG
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 1
57588: PUSH
57589: LD_INT 2
57591: NEG
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 3
57599: PUSH
57600: LD_INT 2
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 2
57609: PUSH
57610: LD_INT 3
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 2
57619: NEG
57620: PUSH
57621: LD_INT 1
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 3
57630: NEG
57631: PUSH
57632: LD_INT 1
57634: NEG
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57665: LD_ADDR_VAR 0 33
57669: PUSH
57670: LD_INT 0
57672: PUSH
57673: LD_INT 0
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 0
57682: PUSH
57683: LD_INT 1
57685: NEG
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 1
57693: PUSH
57694: LD_INT 0
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: LD_INT 1
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 0
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 1
57723: NEG
57724: PUSH
57725: LD_INT 0
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 1
57734: NEG
57735: PUSH
57736: LD_INT 1
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 1
57746: NEG
57747: PUSH
57748: LD_INT 2
57750: NEG
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 1
57758: PUSH
57759: LD_INT 1
57761: NEG
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 2
57769: PUSH
57770: LD_INT 0
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 2
57779: PUSH
57780: LD_INT 1
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 1
57789: PUSH
57790: LD_INT 2
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 0
57799: PUSH
57800: LD_INT 2
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 1
57809: NEG
57810: PUSH
57811: LD_INT 1
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 2
57820: NEG
57821: PUSH
57822: LD_INT 0
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 2
57831: NEG
57832: PUSH
57833: LD_INT 1
57835: NEG
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 2
57843: NEG
57844: PUSH
57845: LD_INT 2
57847: NEG
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 2
57855: NEG
57856: PUSH
57857: LD_INT 3
57859: NEG
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 2
57867: PUSH
57868: LD_INT 1
57870: NEG
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 3
57878: PUSH
57879: LD_INT 1
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 1
57888: PUSH
57889: LD_INT 3
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 1
57898: NEG
57899: PUSH
57900: LD_INT 2
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 3
57909: NEG
57910: PUSH
57911: LD_INT 2
57913: NEG
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57944: LD_ADDR_VAR 0 34
57948: PUSH
57949: LD_INT 0
57951: PUSH
57952: LD_INT 0
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 0
57961: PUSH
57962: LD_INT 1
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 1
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 1
57982: PUSH
57983: LD_INT 1
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 0
57992: PUSH
57993: LD_INT 1
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 1
58002: NEG
58003: PUSH
58004: LD_INT 0
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 1
58013: NEG
58014: PUSH
58015: LD_INT 1
58017: NEG
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 1
58025: NEG
58026: PUSH
58027: LD_INT 2
58029: NEG
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 0
58037: PUSH
58038: LD_INT 2
58040: NEG
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 1
58048: PUSH
58049: LD_INT 1
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 2
58059: PUSH
58060: LD_INT 1
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 2
58069: PUSH
58070: LD_INT 2
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 1
58079: PUSH
58080: LD_INT 2
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 1
58089: NEG
58090: PUSH
58091: LD_INT 1
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 2
58100: NEG
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 2
58111: NEG
58112: PUSH
58113: LD_INT 1
58115: NEG
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 2
58123: NEG
58124: PUSH
58125: LD_INT 2
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 1
58135: NEG
58136: PUSH
58137: LD_INT 3
58139: NEG
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 1
58147: PUSH
58148: LD_INT 2
58150: NEG
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 3
58158: PUSH
58159: LD_INT 2
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 2
58168: PUSH
58169: LD_INT 3
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 2
58178: NEG
58179: PUSH
58180: LD_INT 1
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 3
58189: NEG
58190: PUSH
58191: LD_INT 1
58193: NEG
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58224: LD_ADDR_VAR 0 35
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: LD_INT 0
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 0
58241: PUSH
58242: LD_INT 1
58244: NEG
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 1
58252: PUSH
58253: LD_INT 0
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 1
58262: PUSH
58263: LD_INT 1
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 0
58272: PUSH
58273: LD_INT 1
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 1
58282: NEG
58283: PUSH
58284: LD_INT 0
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 1
58293: NEG
58294: PUSH
58295: LD_INT 1
58297: NEG
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 2
58305: PUSH
58306: LD_INT 1
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 2
58315: NEG
58316: PUSH
58317: LD_INT 1
58319: NEG
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58336: LD_ADDR_VAR 0 36
58340: PUSH
58341: LD_INT 0
58343: PUSH
58344: LD_INT 0
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 0
58353: PUSH
58354: LD_INT 1
58356: NEG
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 1
58364: PUSH
58365: LD_INT 0
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 1
58374: PUSH
58375: LD_INT 1
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 0
58384: PUSH
58385: LD_INT 1
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 1
58394: NEG
58395: PUSH
58396: LD_INT 0
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 1
58405: NEG
58406: PUSH
58407: LD_INT 1
58409: NEG
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 1
58417: NEG
58418: PUSH
58419: LD_INT 2
58421: NEG
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 1
58429: PUSH
58430: LD_INT 2
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58448: LD_ADDR_VAR 0 37
58452: PUSH
58453: LD_INT 0
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 0
58465: PUSH
58466: LD_INT 1
58468: NEG
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 1
58476: PUSH
58477: LD_INT 0
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 1
58486: PUSH
58487: LD_INT 1
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 0
58496: PUSH
58497: LD_INT 1
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 1
58506: NEG
58507: PUSH
58508: LD_INT 0
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 1
58517: NEG
58518: PUSH
58519: LD_INT 1
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 1
58529: PUSH
58530: LD_INT 1
58532: NEG
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 1
58540: NEG
58541: PUSH
58542: LD_INT 1
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58560: LD_ADDR_VAR 0 38
58564: PUSH
58565: LD_INT 0
58567: PUSH
58568: LD_INT 0
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 0
58577: PUSH
58578: LD_INT 1
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 1
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 1
58598: PUSH
58599: LD_INT 1
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 0
58608: PUSH
58609: LD_INT 1
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 1
58618: NEG
58619: PUSH
58620: LD_INT 0
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 1
58629: NEG
58630: PUSH
58631: LD_INT 1
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 2
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 2
58651: NEG
58652: PUSH
58653: LD_INT 1
58655: NEG
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58672: LD_ADDR_VAR 0 39
58676: PUSH
58677: LD_INT 0
58679: PUSH
58680: LD_INT 0
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 0
58689: PUSH
58690: LD_INT 1
58692: NEG
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 1
58700: PUSH
58701: LD_INT 0
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 1
58710: PUSH
58711: LD_INT 1
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 0
58720: PUSH
58721: LD_INT 1
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 1
58730: NEG
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 1
58741: NEG
58742: PUSH
58743: LD_INT 1
58745: NEG
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 1
58753: NEG
58754: PUSH
58755: LD_INT 2
58757: NEG
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 1
58765: PUSH
58766: LD_INT 2
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58784: LD_ADDR_VAR 0 40
58788: PUSH
58789: LD_INT 0
58791: PUSH
58792: LD_INT 0
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 0
58801: PUSH
58802: LD_INT 1
58804: NEG
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 1
58812: PUSH
58813: LD_INT 0
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 1
58822: PUSH
58823: LD_INT 1
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 0
58832: PUSH
58833: LD_INT 1
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 1
58842: NEG
58843: PUSH
58844: LD_INT 0
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 1
58853: NEG
58854: PUSH
58855: LD_INT 1
58857: NEG
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 1
58865: PUSH
58866: LD_INT 1
58868: NEG
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 1
58876: NEG
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58896: LD_ADDR_VAR 0 41
58900: PUSH
58901: LD_INT 0
58903: PUSH
58904: LD_INT 0
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 0
58913: PUSH
58914: LD_INT 1
58916: NEG
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 1
58924: PUSH
58925: LD_INT 0
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 1
58934: PUSH
58935: LD_INT 1
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 0
58944: PUSH
58945: LD_INT 1
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 1
58954: NEG
58955: PUSH
58956: LD_INT 0
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 1
58965: NEG
58966: PUSH
58967: LD_INT 1
58969: NEG
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 1
58977: NEG
58978: PUSH
58979: LD_INT 2
58981: NEG
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 1
58989: PUSH
58990: LD_INT 1
58992: NEG
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 2
59000: PUSH
59001: LD_INT 0
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 2
59010: PUSH
59011: LD_INT 1
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 2
59020: PUSH
59021: LD_INT 2
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 1
59030: PUSH
59031: LD_INT 2
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 1
59040: NEG
59041: PUSH
59042: LD_INT 1
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 2
59051: NEG
59052: PUSH
59053: LD_INT 0
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 2
59062: NEG
59063: PUSH
59064: LD_INT 1
59066: NEG
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 2
59074: NEG
59075: PUSH
59076: LD_INT 2
59078: NEG
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 2
59086: NEG
59087: PUSH
59088: LD_INT 3
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 2
59098: PUSH
59099: LD_INT 1
59101: NEG
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 3
59109: PUSH
59110: LD_INT 0
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 3
59119: PUSH
59120: LD_INT 1
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 3
59129: PUSH
59130: LD_INT 2
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 3
59139: PUSH
59140: LD_INT 3
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 2
59149: PUSH
59150: LD_INT 3
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 2
59159: NEG
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 3
59170: NEG
59171: PUSH
59172: LD_INT 0
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 3
59181: NEG
59182: PUSH
59183: LD_INT 1
59185: NEG
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 3
59193: NEG
59194: PUSH
59195: LD_INT 2
59197: NEG
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 3
59205: NEG
59206: PUSH
59207: LD_INT 3
59209: NEG
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59246: LD_ADDR_VAR 0 42
59250: PUSH
59251: LD_INT 0
59253: PUSH
59254: LD_INT 0
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 0
59263: PUSH
59264: LD_INT 1
59266: NEG
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 1
59274: PUSH
59275: LD_INT 0
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 1
59284: PUSH
59285: LD_INT 1
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 0
59294: PUSH
59295: LD_INT 1
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 1
59304: NEG
59305: PUSH
59306: LD_INT 0
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 1
59315: NEG
59316: PUSH
59317: LD_INT 1
59319: NEG
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 1
59327: NEG
59328: PUSH
59329: LD_INT 2
59331: NEG
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 0
59339: PUSH
59340: LD_INT 2
59342: NEG
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 1
59350: PUSH
59351: LD_INT 1
59353: NEG
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 2
59361: PUSH
59362: LD_INT 1
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 2
59371: PUSH
59372: LD_INT 2
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 1
59381: PUSH
59382: LD_INT 2
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 0
59391: PUSH
59392: LD_INT 2
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 1
59401: NEG
59402: PUSH
59403: LD_INT 1
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 2
59412: NEG
59413: PUSH
59414: LD_INT 1
59416: NEG
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 2
59424: NEG
59425: PUSH
59426: LD_INT 2
59428: NEG
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 2
59436: NEG
59437: PUSH
59438: LD_INT 3
59440: NEG
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 1
59448: NEG
59449: PUSH
59450: LD_INT 3
59452: NEG
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 0
59460: PUSH
59461: LD_INT 3
59463: NEG
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 1
59471: PUSH
59472: LD_INT 2
59474: NEG
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 3
59482: PUSH
59483: LD_INT 2
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 3
59492: PUSH
59493: LD_INT 3
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 2
59502: PUSH
59503: LD_INT 3
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 1
59512: PUSH
59513: LD_INT 3
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 0
59522: PUSH
59523: LD_INT 3
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 1
59532: NEG
59533: PUSH
59534: LD_INT 2
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 3
59543: NEG
59544: PUSH
59545: LD_INT 2
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 3
59555: NEG
59556: PUSH
59557: LD_INT 3
59559: NEG
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59596: LD_ADDR_VAR 0 43
59600: PUSH
59601: LD_INT 0
59603: PUSH
59604: LD_INT 0
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 0
59613: PUSH
59614: LD_INT 1
59616: NEG
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 1
59624: PUSH
59625: LD_INT 0
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 1
59634: PUSH
59635: LD_INT 1
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 0
59644: PUSH
59645: LD_INT 1
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 1
59654: NEG
59655: PUSH
59656: LD_INT 0
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 1
59665: NEG
59666: PUSH
59667: LD_INT 1
59669: NEG
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 1
59677: NEG
59678: PUSH
59679: LD_INT 2
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 0
59689: PUSH
59690: LD_INT 2
59692: NEG
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 1
59700: PUSH
59701: LD_INT 1
59703: NEG
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 2
59711: PUSH
59712: LD_INT 0
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 2
59721: PUSH
59722: LD_INT 1
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 1
59731: PUSH
59732: LD_INT 2
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: LD_INT 2
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 1
59751: NEG
59752: PUSH
59753: LD_INT 1
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 2
59762: NEG
59763: PUSH
59764: LD_INT 0
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 2
59773: NEG
59774: PUSH
59775: LD_INT 1
59777: NEG
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 1
59785: NEG
59786: PUSH
59787: LD_INT 3
59789: NEG
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 0
59797: PUSH
59798: LD_INT 3
59800: NEG
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 1
59808: PUSH
59809: LD_INT 2
59811: NEG
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 2
59819: PUSH
59820: LD_INT 1
59822: NEG
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 3
59830: PUSH
59831: LD_INT 0
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 3
59840: PUSH
59841: LD_INT 1
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 1
59850: PUSH
59851: LD_INT 3
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 0
59860: PUSH
59861: LD_INT 3
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 1
59870: NEG
59871: PUSH
59872: LD_INT 2
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 2
59881: NEG
59882: PUSH
59883: LD_INT 1
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 3
59892: NEG
59893: PUSH
59894: LD_INT 0
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 3
59903: NEG
59904: PUSH
59905: LD_INT 1
59907: NEG
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59944: LD_ADDR_VAR 0 44
59948: PUSH
59949: LD_INT 0
59951: PUSH
59952: LD_INT 0
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 0
59961: PUSH
59962: LD_INT 1
59964: NEG
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 1
59972: PUSH
59973: LD_INT 0
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 1
59982: PUSH
59983: LD_INT 1
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 0
59992: PUSH
59993: LD_INT 1
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 1
60002: NEG
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 1
60013: NEG
60014: PUSH
60015: LD_INT 1
60017: NEG
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 1
60025: NEG
60026: PUSH
60027: LD_INT 2
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 1
60037: PUSH
60038: LD_INT 1
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 2
60048: PUSH
60049: LD_INT 0
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 2
60058: PUSH
60059: LD_INT 1
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 2
60068: PUSH
60069: LD_INT 2
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 1
60078: PUSH
60079: LD_INT 2
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 1
60088: NEG
60089: PUSH
60090: LD_INT 1
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 2
60099: NEG
60100: PUSH
60101: LD_INT 0
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 2
60110: NEG
60111: PUSH
60112: LD_INT 1
60114: NEG
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 2
60122: NEG
60123: PUSH
60124: LD_INT 2
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 2
60134: NEG
60135: PUSH
60136: LD_INT 3
60138: NEG
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 2
60146: PUSH
60147: LD_INT 1
60149: NEG
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 3
60157: PUSH
60158: LD_INT 0
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 3
60167: PUSH
60168: LD_INT 1
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 3
60177: PUSH
60178: LD_INT 2
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 3
60187: PUSH
60188: LD_INT 3
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 2
60197: PUSH
60198: LD_INT 3
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 2
60207: NEG
60208: PUSH
60209: LD_INT 1
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 3
60218: NEG
60219: PUSH
60220: LD_INT 0
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 3
60229: NEG
60230: PUSH
60231: LD_INT 1
60233: NEG
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 3
60241: NEG
60242: PUSH
60243: LD_INT 2
60245: NEG
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 3
60253: NEG
60254: PUSH
60255: LD_INT 3
60257: NEG
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60294: LD_ADDR_VAR 0 45
60298: PUSH
60299: LD_INT 0
60301: PUSH
60302: LD_INT 0
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 0
60311: PUSH
60312: LD_INT 1
60314: NEG
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 1
60322: PUSH
60323: LD_INT 0
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 1
60332: PUSH
60333: LD_INT 1
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 0
60342: PUSH
60343: LD_INT 1
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 1
60352: NEG
60353: PUSH
60354: LD_INT 0
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 1
60363: NEG
60364: PUSH
60365: LD_INT 1
60367: NEG
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 1
60375: NEG
60376: PUSH
60377: LD_INT 2
60379: NEG
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 0
60387: PUSH
60388: LD_INT 2
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 1
60398: PUSH
60399: LD_INT 1
60401: NEG
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 2
60409: PUSH
60410: LD_INT 1
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 2
60419: PUSH
60420: LD_INT 2
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 1
60429: PUSH
60430: LD_INT 2
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 0
60439: PUSH
60440: LD_INT 2
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 1
60449: NEG
60450: PUSH
60451: LD_INT 1
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 2
60460: NEG
60461: PUSH
60462: LD_INT 1
60464: NEG
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 2
60472: NEG
60473: PUSH
60474: LD_INT 2
60476: NEG
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 2
60484: NEG
60485: PUSH
60486: LD_INT 3
60488: NEG
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 1
60496: NEG
60497: PUSH
60498: LD_INT 3
60500: NEG
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 0
60508: PUSH
60509: LD_INT 3
60511: NEG
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 1
60519: PUSH
60520: LD_INT 2
60522: NEG
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 3
60530: PUSH
60531: LD_INT 2
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 3
60540: PUSH
60541: LD_INT 3
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 2
60550: PUSH
60551: LD_INT 3
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 1
60560: PUSH
60561: LD_INT 3
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 0
60570: PUSH
60571: LD_INT 3
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 1
60580: NEG
60581: PUSH
60582: LD_INT 2
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 3
60591: NEG
60592: PUSH
60593: LD_INT 2
60595: NEG
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 3
60603: NEG
60604: PUSH
60605: LD_INT 3
60607: NEG
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60644: LD_ADDR_VAR 0 46
60648: PUSH
60649: LD_INT 0
60651: PUSH
60652: LD_INT 0
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 0
60661: PUSH
60662: LD_INT 1
60664: NEG
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 1
60672: PUSH
60673: LD_INT 0
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 1
60682: PUSH
60683: LD_INT 1
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 0
60692: PUSH
60693: LD_INT 1
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 1
60702: NEG
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 1
60713: NEG
60714: PUSH
60715: LD_INT 1
60717: NEG
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 1
60725: NEG
60726: PUSH
60727: LD_INT 2
60729: NEG
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: LD_INT 2
60740: NEG
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 1
60748: PUSH
60749: LD_INT 1
60751: NEG
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 2
60759: PUSH
60760: LD_INT 0
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 2
60769: PUSH
60770: LD_INT 1
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 1
60779: PUSH
60780: LD_INT 2
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 0
60789: PUSH
60790: LD_INT 2
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 1
60799: NEG
60800: PUSH
60801: LD_INT 1
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 2
60810: NEG
60811: PUSH
60812: LD_INT 0
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 2
60821: NEG
60822: PUSH
60823: LD_INT 1
60825: NEG
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 1
60833: NEG
60834: PUSH
60835: LD_INT 3
60837: NEG
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 0
60845: PUSH
60846: LD_INT 3
60848: NEG
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 1
60856: PUSH
60857: LD_INT 2
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 2
60867: PUSH
60868: LD_INT 1
60870: NEG
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 3
60878: PUSH
60879: LD_INT 0
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 3
60888: PUSH
60889: LD_INT 1
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 1
60898: PUSH
60899: LD_INT 3
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 0
60908: PUSH
60909: LD_INT 3
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 1
60918: NEG
60919: PUSH
60920: LD_INT 2
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 2
60929: NEG
60930: PUSH
60931: LD_INT 1
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 3
60940: NEG
60941: PUSH
60942: LD_INT 0
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 3
60951: NEG
60952: PUSH
60953: LD_INT 1
60955: NEG
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60992: LD_ADDR_VAR 0 47
60996: PUSH
60997: LD_INT 0
60999: PUSH
61000: LD_INT 0
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 0
61009: PUSH
61010: LD_INT 1
61012: NEG
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 1
61020: PUSH
61021: LD_INT 0
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 1
61030: PUSH
61031: LD_INT 1
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 0
61040: PUSH
61041: LD_INT 1
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 1
61050: NEG
61051: PUSH
61052: LD_INT 0
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 1
61061: NEG
61062: PUSH
61063: LD_INT 1
61065: NEG
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 1
61073: NEG
61074: PUSH
61075: LD_INT 2
61077: NEG
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 0
61085: PUSH
61086: LD_INT 2
61088: NEG
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 1
61096: PUSH
61097: LD_INT 1
61099: NEG
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 2
61107: NEG
61108: PUSH
61109: LD_INT 1
61111: NEG
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 2
61119: NEG
61120: PUSH
61121: LD_INT 2
61123: NEG
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61143: LD_ADDR_VAR 0 48
61147: PUSH
61148: LD_INT 0
61150: PUSH
61151: LD_INT 0
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 0
61160: PUSH
61161: LD_INT 1
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 1
61171: PUSH
61172: LD_INT 0
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 1
61181: PUSH
61182: LD_INT 1
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 0
61191: PUSH
61192: LD_INT 1
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 1
61201: NEG
61202: PUSH
61203: LD_INT 0
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 1
61212: NEG
61213: PUSH
61214: LD_INT 1
61216: NEG
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 1
61224: NEG
61225: PUSH
61226: LD_INT 2
61228: NEG
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 0
61236: PUSH
61237: LD_INT 2
61239: NEG
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 1
61247: PUSH
61248: LD_INT 1
61250: NEG
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 2
61258: PUSH
61259: LD_INT 0
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 2
61268: PUSH
61269: LD_INT 1
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61290: LD_ADDR_VAR 0 49
61294: PUSH
61295: LD_INT 0
61297: PUSH
61298: LD_INT 0
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 0
61307: PUSH
61308: LD_INT 1
61310: NEG
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 1
61318: PUSH
61319: LD_INT 0
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 1
61328: PUSH
61329: LD_INT 1
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 0
61338: PUSH
61339: LD_INT 1
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 1
61348: NEG
61349: PUSH
61350: LD_INT 0
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 1
61359: NEG
61360: PUSH
61361: LD_INT 1
61363: NEG
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 1
61371: PUSH
61372: LD_INT 1
61374: NEG
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 2
61382: PUSH
61383: LD_INT 0
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 2
61392: PUSH
61393: LD_INT 1
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 2
61402: PUSH
61403: LD_INT 2
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 1
61412: PUSH
61413: LD_INT 2
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61434: LD_ADDR_VAR 0 50
61438: PUSH
61439: LD_INT 0
61441: PUSH
61442: LD_INT 0
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 0
61451: PUSH
61452: LD_INT 1
61454: NEG
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 1
61462: PUSH
61463: LD_INT 0
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 1
61472: PUSH
61473: LD_INT 1
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 0
61482: PUSH
61483: LD_INT 1
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 1
61492: NEG
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 1
61503: NEG
61504: PUSH
61505: LD_INT 1
61507: NEG
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 2
61515: PUSH
61516: LD_INT 1
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 2
61525: PUSH
61526: LD_INT 2
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 1
61535: PUSH
61536: LD_INT 2
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 0
61545: PUSH
61546: LD_INT 2
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 1
61555: NEG
61556: PUSH
61557: LD_INT 1
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61578: LD_ADDR_VAR 0 51
61582: PUSH
61583: LD_INT 0
61585: PUSH
61586: LD_INT 0
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 0
61595: PUSH
61596: LD_INT 1
61598: NEG
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 1
61606: PUSH
61607: LD_INT 0
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 1
61616: PUSH
61617: LD_INT 1
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 0
61626: PUSH
61627: LD_INT 1
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 1
61636: NEG
61637: PUSH
61638: LD_INT 0
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 1
61647: NEG
61648: PUSH
61649: LD_INT 1
61651: NEG
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 1
61659: PUSH
61660: LD_INT 2
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 0
61669: PUSH
61670: LD_INT 2
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 1
61679: NEG
61680: PUSH
61681: LD_INT 1
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 2
61690: NEG
61691: PUSH
61692: LD_INT 0
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 2
61701: NEG
61702: PUSH
61703: LD_INT 1
61705: NEG
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61725: LD_ADDR_VAR 0 52
61729: PUSH
61730: LD_INT 0
61732: PUSH
61733: LD_INT 0
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 0
61742: PUSH
61743: LD_INT 1
61745: NEG
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 1
61753: PUSH
61754: LD_INT 0
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 1
61763: PUSH
61764: LD_INT 1
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 0
61773: PUSH
61774: LD_INT 1
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 1
61783: NEG
61784: PUSH
61785: LD_INT 0
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 1
61794: NEG
61795: PUSH
61796: LD_INT 1
61798: NEG
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 1
61806: NEG
61807: PUSH
61808: LD_INT 2
61810: NEG
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 1
61818: NEG
61819: PUSH
61820: LD_INT 1
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 2
61829: NEG
61830: PUSH
61831: LD_INT 0
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 2
61840: NEG
61841: PUSH
61842: LD_INT 1
61844: NEG
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 2
61852: NEG
61853: PUSH
61854: LD_INT 2
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61876: LD_ADDR_VAR 0 53
61880: PUSH
61881: LD_INT 0
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 0
61893: PUSH
61894: LD_INT 1
61896: NEG
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 1
61904: PUSH
61905: LD_INT 0
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 1
61914: PUSH
61915: LD_INT 1
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 0
61924: PUSH
61925: LD_INT 1
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 1
61934: NEG
61935: PUSH
61936: LD_INT 0
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 1
61945: NEG
61946: PUSH
61947: LD_INT 1
61949: NEG
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 1
61957: NEG
61958: PUSH
61959: LD_INT 2
61961: NEG
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 0
61969: PUSH
61970: LD_INT 2
61972: NEG
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 1
61980: PUSH
61981: LD_INT 1
61983: NEG
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 2
61991: PUSH
61992: LD_INT 0
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 2
62001: PUSH
62002: LD_INT 1
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 2
62011: PUSH
62012: LD_INT 2
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 1
62021: PUSH
62022: LD_INT 2
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 0
62031: PUSH
62032: LD_INT 2
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 1
62041: NEG
62042: PUSH
62043: LD_INT 1
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 2
62052: NEG
62053: PUSH
62054: LD_INT 0
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 2
62063: NEG
62064: PUSH
62065: LD_INT 1
62067: NEG
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 2
62075: NEG
62076: PUSH
62077: LD_INT 2
62079: NEG
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62106: LD_ADDR_VAR 0 54
62110: PUSH
62111: LD_INT 0
62113: PUSH
62114: LD_INT 0
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 0
62123: PUSH
62124: LD_INT 1
62126: NEG
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 1
62134: PUSH
62135: LD_INT 0
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 1
62144: PUSH
62145: LD_INT 1
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 0
62154: PUSH
62155: LD_INT 1
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 1
62164: NEG
62165: PUSH
62166: LD_INT 0
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 1
62175: NEG
62176: PUSH
62177: LD_INT 1
62179: NEG
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 1
62187: NEG
62188: PUSH
62189: LD_INT 2
62191: NEG
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 0
62199: PUSH
62200: LD_INT 2
62202: NEG
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 1
62210: PUSH
62211: LD_INT 1
62213: NEG
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 2
62221: PUSH
62222: LD_INT 0
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 2
62231: PUSH
62232: LD_INT 1
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 2
62241: PUSH
62242: LD_INT 2
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 1
62251: PUSH
62252: LD_INT 2
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 0
62261: PUSH
62262: LD_INT 2
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 1
62271: NEG
62272: PUSH
62273: LD_INT 1
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 2
62282: NEG
62283: PUSH
62284: LD_INT 0
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 2
62293: NEG
62294: PUSH
62295: LD_INT 1
62297: NEG
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 2
62305: NEG
62306: PUSH
62307: LD_INT 2
62309: NEG
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62336: LD_ADDR_VAR 0 55
62340: PUSH
62341: LD_INT 0
62343: PUSH
62344: LD_INT 0
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 0
62353: PUSH
62354: LD_INT 1
62356: NEG
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 1
62364: PUSH
62365: LD_INT 0
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 1
62374: PUSH
62375: LD_INT 1
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 0
62384: PUSH
62385: LD_INT 1
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 1
62394: NEG
62395: PUSH
62396: LD_INT 0
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 1
62405: NEG
62406: PUSH
62407: LD_INT 1
62409: NEG
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 1
62417: NEG
62418: PUSH
62419: LD_INT 2
62421: NEG
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 0
62429: PUSH
62430: LD_INT 2
62432: NEG
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 1
62440: PUSH
62441: LD_INT 1
62443: NEG
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 2
62451: PUSH
62452: LD_INT 0
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 2
62461: PUSH
62462: LD_INT 1
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 2
62471: PUSH
62472: LD_INT 2
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 1
62481: PUSH
62482: LD_INT 2
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 0
62491: PUSH
62492: LD_INT 2
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 1
62501: NEG
62502: PUSH
62503: LD_INT 1
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 2
62512: NEG
62513: PUSH
62514: LD_INT 0
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 2
62523: NEG
62524: PUSH
62525: LD_INT 1
62527: NEG
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 2
62535: NEG
62536: PUSH
62537: LD_INT 2
62539: NEG
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62566: LD_ADDR_VAR 0 56
62570: PUSH
62571: LD_INT 0
62573: PUSH
62574: LD_INT 0
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 0
62583: PUSH
62584: LD_INT 1
62586: NEG
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 1
62594: PUSH
62595: LD_INT 0
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 1
62604: PUSH
62605: LD_INT 1
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 0
62614: PUSH
62615: LD_INT 1
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 1
62624: NEG
62625: PUSH
62626: LD_INT 0
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 1
62635: NEG
62636: PUSH
62637: LD_INT 1
62639: NEG
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 1
62647: NEG
62648: PUSH
62649: LD_INT 2
62651: NEG
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 0
62659: PUSH
62660: LD_INT 2
62662: NEG
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 1
62670: PUSH
62671: LD_INT 1
62673: NEG
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 2
62681: PUSH
62682: LD_INT 0
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 2
62691: PUSH
62692: LD_INT 1
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 2
62701: PUSH
62702: LD_INT 2
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 1
62711: PUSH
62712: LD_INT 2
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 0
62721: PUSH
62722: LD_INT 2
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 1
62731: NEG
62732: PUSH
62733: LD_INT 1
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 2
62742: NEG
62743: PUSH
62744: LD_INT 0
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 2
62753: NEG
62754: PUSH
62755: LD_INT 1
62757: NEG
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 2
62765: NEG
62766: PUSH
62767: LD_INT 2
62769: NEG
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62796: LD_ADDR_VAR 0 57
62800: PUSH
62801: LD_INT 0
62803: PUSH
62804: LD_INT 0
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 0
62813: PUSH
62814: LD_INT 1
62816: NEG
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 1
62824: PUSH
62825: LD_INT 0
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 1
62834: PUSH
62835: LD_INT 1
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 0
62844: PUSH
62845: LD_INT 1
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 1
62854: NEG
62855: PUSH
62856: LD_INT 0
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 1
62865: NEG
62866: PUSH
62867: LD_INT 1
62869: NEG
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 1
62877: NEG
62878: PUSH
62879: LD_INT 2
62881: NEG
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 0
62889: PUSH
62890: LD_INT 2
62892: NEG
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 1
62900: PUSH
62901: LD_INT 1
62903: NEG
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 2
62911: PUSH
62912: LD_INT 0
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 2
62921: PUSH
62922: LD_INT 1
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 2
62931: PUSH
62932: LD_INT 2
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 1
62941: PUSH
62942: LD_INT 2
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 0
62951: PUSH
62952: LD_INT 2
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 1
62961: NEG
62962: PUSH
62963: LD_INT 1
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 2
62972: NEG
62973: PUSH
62974: LD_INT 0
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 2
62983: NEG
62984: PUSH
62985: LD_INT 1
62987: NEG
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 2
62995: NEG
62996: PUSH
62997: LD_INT 2
62999: NEG
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63026: LD_ADDR_VAR 0 58
63030: PUSH
63031: LD_INT 0
63033: PUSH
63034: LD_INT 0
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 0
63043: PUSH
63044: LD_INT 1
63046: NEG
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 1
63054: PUSH
63055: LD_INT 0
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 1
63064: PUSH
63065: LD_INT 1
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 0
63074: PUSH
63075: LD_INT 1
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 1
63084: NEG
63085: PUSH
63086: LD_INT 0
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 1
63095: NEG
63096: PUSH
63097: LD_INT 1
63099: NEG
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 1
63107: NEG
63108: PUSH
63109: LD_INT 2
63111: NEG
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: LD_INT 0
63119: PUSH
63120: LD_INT 2
63122: NEG
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: LD_INT 1
63130: PUSH
63131: LD_INT 1
63133: NEG
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 2
63141: PUSH
63142: LD_INT 0
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 2
63151: PUSH
63152: LD_INT 1
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 2
63161: PUSH
63162: LD_INT 2
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 1
63171: PUSH
63172: LD_INT 2
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 0
63181: PUSH
63182: LD_INT 2
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: LD_INT 1
63191: NEG
63192: PUSH
63193: LD_INT 1
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 2
63202: NEG
63203: PUSH
63204: LD_INT 0
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 2
63213: NEG
63214: PUSH
63215: LD_INT 1
63217: NEG
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 2
63225: NEG
63226: PUSH
63227: LD_INT 2
63229: NEG
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63256: LD_ADDR_VAR 0 59
63260: PUSH
63261: LD_INT 0
63263: PUSH
63264: LD_INT 0
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 0
63273: PUSH
63274: LD_INT 1
63276: NEG
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 1
63284: PUSH
63285: LD_INT 0
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 1
63294: PUSH
63295: LD_INT 1
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 0
63304: PUSH
63305: LD_INT 1
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 1
63314: NEG
63315: PUSH
63316: LD_INT 0
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 1
63325: NEG
63326: PUSH
63327: LD_INT 1
63329: NEG
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63344: LD_ADDR_VAR 0 60
63348: PUSH
63349: LD_INT 0
63351: PUSH
63352: LD_INT 0
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 0
63361: PUSH
63362: LD_INT 1
63364: NEG
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 1
63372: PUSH
63373: LD_INT 0
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 1
63382: PUSH
63383: LD_INT 1
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 0
63392: PUSH
63393: LD_INT 1
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 1
63402: NEG
63403: PUSH
63404: LD_INT 0
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 1
63413: NEG
63414: PUSH
63415: LD_INT 1
63417: NEG
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63432: LD_ADDR_VAR 0 61
63436: PUSH
63437: LD_INT 0
63439: PUSH
63440: LD_INT 0
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 0
63449: PUSH
63450: LD_INT 1
63452: NEG
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 1
63460: PUSH
63461: LD_INT 0
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 1
63470: PUSH
63471: LD_INT 1
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 0
63480: PUSH
63481: LD_INT 1
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 1
63490: NEG
63491: PUSH
63492: LD_INT 0
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 1
63501: NEG
63502: PUSH
63503: LD_INT 1
63505: NEG
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63520: LD_ADDR_VAR 0 62
63524: PUSH
63525: LD_INT 0
63527: PUSH
63528: LD_INT 0
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 0
63537: PUSH
63538: LD_INT 1
63540: NEG
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 1
63548: PUSH
63549: LD_INT 0
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 1
63558: PUSH
63559: LD_INT 1
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 0
63568: PUSH
63569: LD_INT 1
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 1
63578: NEG
63579: PUSH
63580: LD_INT 0
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 1
63589: NEG
63590: PUSH
63591: LD_INT 1
63593: NEG
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63608: LD_ADDR_VAR 0 63
63612: PUSH
63613: LD_INT 0
63615: PUSH
63616: LD_INT 0
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 0
63625: PUSH
63626: LD_INT 1
63628: NEG
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 1
63636: PUSH
63637: LD_INT 0
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 1
63646: PUSH
63647: LD_INT 1
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 0
63656: PUSH
63657: LD_INT 1
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 1
63666: NEG
63667: PUSH
63668: LD_INT 0
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 1
63677: NEG
63678: PUSH
63679: LD_INT 1
63681: NEG
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63696: LD_ADDR_VAR 0 64
63700: PUSH
63701: LD_INT 0
63703: PUSH
63704: LD_INT 0
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 0
63713: PUSH
63714: LD_INT 1
63716: NEG
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 1
63724: PUSH
63725: LD_INT 0
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 1
63734: PUSH
63735: LD_INT 1
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 0
63744: PUSH
63745: LD_INT 1
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 1
63754: NEG
63755: PUSH
63756: LD_INT 0
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 1
63765: NEG
63766: PUSH
63767: LD_INT 1
63769: NEG
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: LIST
63782: LIST
63783: ST_TO_ADDR
// end ; 1 :
63784: GO 69681
63786: LD_INT 1
63788: DOUBLE
63789: EQUAL
63790: IFTRUE 63794
63792: GO 66417
63794: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63795: LD_ADDR_VAR 0 11
63799: PUSH
63800: LD_INT 1
63802: NEG
63803: PUSH
63804: LD_INT 3
63806: NEG
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 0
63814: PUSH
63815: LD_INT 3
63817: NEG
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 1
63825: PUSH
63826: LD_INT 2
63828: NEG
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: LIST
63838: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63839: LD_ADDR_VAR 0 12
63843: PUSH
63844: LD_INT 2
63846: PUSH
63847: LD_INT 1
63849: NEG
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 3
63857: PUSH
63858: LD_INT 0
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 3
63867: PUSH
63868: LD_INT 1
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: LIST
63879: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63880: LD_ADDR_VAR 0 13
63884: PUSH
63885: LD_INT 3
63887: PUSH
63888: LD_INT 2
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 3
63897: PUSH
63898: LD_INT 3
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 2
63907: PUSH
63908: LD_INT 3
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: LIST
63919: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63920: LD_ADDR_VAR 0 14
63924: PUSH
63925: LD_INT 1
63927: PUSH
63928: LD_INT 3
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 0
63937: PUSH
63938: LD_INT 3
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 1
63947: NEG
63948: PUSH
63949: LD_INT 2
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: LIST
63960: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63961: LD_ADDR_VAR 0 15
63965: PUSH
63966: LD_INT 2
63968: NEG
63969: PUSH
63970: LD_INT 1
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 3
63979: NEG
63980: PUSH
63981: LD_INT 0
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 3
63990: NEG
63991: PUSH
63992: LD_INT 1
63994: NEG
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: LIST
64004: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64005: LD_ADDR_VAR 0 16
64009: PUSH
64010: LD_INT 2
64012: NEG
64013: PUSH
64014: LD_INT 3
64016: NEG
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 3
64024: NEG
64025: PUSH
64026: LD_INT 2
64028: NEG
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 3
64036: NEG
64037: PUSH
64038: LD_INT 3
64040: NEG
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: LIST
64050: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64051: LD_ADDR_VAR 0 17
64055: PUSH
64056: LD_INT 1
64058: NEG
64059: PUSH
64060: LD_INT 3
64062: NEG
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 0
64070: PUSH
64071: LD_INT 3
64073: NEG
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 1
64081: PUSH
64082: LD_INT 2
64084: NEG
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: LIST
64094: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64095: LD_ADDR_VAR 0 18
64099: PUSH
64100: LD_INT 2
64102: PUSH
64103: LD_INT 1
64105: NEG
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 3
64113: PUSH
64114: LD_INT 0
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 3
64123: PUSH
64124: LD_INT 1
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: LIST
64135: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64136: LD_ADDR_VAR 0 19
64140: PUSH
64141: LD_INT 3
64143: PUSH
64144: LD_INT 2
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: LD_INT 3
64153: PUSH
64154: LD_INT 3
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: LD_INT 2
64163: PUSH
64164: LD_INT 3
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: LIST
64175: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64176: LD_ADDR_VAR 0 20
64180: PUSH
64181: LD_INT 1
64183: PUSH
64184: LD_INT 3
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: LD_INT 0
64193: PUSH
64194: LD_INT 3
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 1
64203: NEG
64204: PUSH
64205: LD_INT 2
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: LIST
64216: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64217: LD_ADDR_VAR 0 21
64221: PUSH
64222: LD_INT 2
64224: NEG
64225: PUSH
64226: LD_INT 1
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: LD_INT 3
64235: NEG
64236: PUSH
64237: LD_INT 0
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 3
64246: NEG
64247: PUSH
64248: LD_INT 1
64250: NEG
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: LIST
64260: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64261: LD_ADDR_VAR 0 22
64265: PUSH
64266: LD_INT 2
64268: NEG
64269: PUSH
64270: LD_INT 3
64272: NEG
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 3
64280: NEG
64281: PUSH
64282: LD_INT 2
64284: NEG
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 3
64292: NEG
64293: PUSH
64294: LD_INT 3
64296: NEG
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: LIST
64306: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64307: LD_ADDR_VAR 0 23
64311: PUSH
64312: LD_INT 0
64314: PUSH
64315: LD_INT 3
64317: NEG
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: LD_INT 1
64325: NEG
64326: PUSH
64327: LD_INT 4
64329: NEG
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 1
64337: PUSH
64338: LD_INT 3
64340: NEG
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: LIST
64350: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64351: LD_ADDR_VAR 0 24
64355: PUSH
64356: LD_INT 3
64358: PUSH
64359: LD_INT 0
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 3
64368: PUSH
64369: LD_INT 1
64371: NEG
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 4
64379: PUSH
64380: LD_INT 1
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: LIST
64391: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64392: LD_ADDR_VAR 0 25
64396: PUSH
64397: LD_INT 3
64399: PUSH
64400: LD_INT 3
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 4
64409: PUSH
64410: LD_INT 3
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 3
64419: PUSH
64420: LD_INT 4
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: LIST
64431: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64432: LD_ADDR_VAR 0 26
64436: PUSH
64437: LD_INT 0
64439: PUSH
64440: LD_INT 3
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 1
64449: PUSH
64450: LD_INT 4
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 1
64459: NEG
64460: PUSH
64461: LD_INT 3
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: LIST
64472: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64473: LD_ADDR_VAR 0 27
64477: PUSH
64478: LD_INT 3
64480: NEG
64481: PUSH
64482: LD_INT 0
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 3
64491: NEG
64492: PUSH
64493: LD_INT 1
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 4
64502: NEG
64503: PUSH
64504: LD_INT 1
64506: NEG
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: LIST
64516: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64517: LD_ADDR_VAR 0 28
64521: PUSH
64522: LD_INT 3
64524: NEG
64525: PUSH
64526: LD_INT 3
64528: NEG
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 3
64536: NEG
64537: PUSH
64538: LD_INT 4
64540: NEG
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 4
64548: NEG
64549: PUSH
64550: LD_INT 3
64552: NEG
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: LIST
64562: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64563: LD_ADDR_VAR 0 29
64567: PUSH
64568: LD_INT 1
64570: NEG
64571: PUSH
64572: LD_INT 3
64574: NEG
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 0
64582: PUSH
64583: LD_INT 3
64585: NEG
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_INT 1
64593: PUSH
64594: LD_INT 2
64596: NEG
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 1
64604: NEG
64605: PUSH
64606: LD_INT 4
64608: NEG
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 0
64616: PUSH
64617: LD_INT 4
64619: NEG
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 1
64627: PUSH
64628: LD_INT 3
64630: NEG
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 1
64638: NEG
64639: PUSH
64640: LD_INT 5
64642: NEG
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 0
64650: PUSH
64651: LD_INT 5
64653: NEG
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 1
64661: PUSH
64662: LD_INT 4
64664: NEG
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 1
64672: NEG
64673: PUSH
64674: LD_INT 6
64676: NEG
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 0
64684: PUSH
64685: LD_INT 6
64687: NEG
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 1
64695: PUSH
64696: LD_INT 5
64698: NEG
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64718: LD_ADDR_VAR 0 30
64722: PUSH
64723: LD_INT 2
64725: PUSH
64726: LD_INT 1
64728: NEG
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: LD_INT 3
64736: PUSH
64737: LD_INT 0
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 3
64746: PUSH
64747: LD_INT 1
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 3
64756: PUSH
64757: LD_INT 1
64759: NEG
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 4
64767: PUSH
64768: LD_INT 0
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 4
64777: PUSH
64778: LD_INT 1
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 4
64787: PUSH
64788: LD_INT 1
64790: NEG
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 5
64798: PUSH
64799: LD_INT 0
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 5
64808: PUSH
64809: LD_INT 1
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 5
64818: PUSH
64819: LD_INT 1
64821: NEG
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 6
64829: PUSH
64830: LD_INT 0
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 6
64839: PUSH
64840: LD_INT 1
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: LIST
64860: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64861: LD_ADDR_VAR 0 31
64865: PUSH
64866: LD_INT 3
64868: PUSH
64869: LD_INT 2
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 3
64878: PUSH
64879: LD_INT 3
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 2
64888: PUSH
64889: LD_INT 3
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 4
64898: PUSH
64899: LD_INT 3
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 4
64908: PUSH
64909: LD_INT 4
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 3
64918: PUSH
64919: LD_INT 4
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 5
64928: PUSH
64929: LD_INT 4
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 5
64938: PUSH
64939: LD_INT 5
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 4
64948: PUSH
64949: LD_INT 5
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 6
64958: PUSH
64959: LD_INT 5
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 6
64968: PUSH
64969: LD_INT 6
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: LD_INT 5
64978: PUSH
64979: LD_INT 6
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65000: LD_ADDR_VAR 0 32
65004: PUSH
65005: LD_INT 1
65007: PUSH
65008: LD_INT 3
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 0
65017: PUSH
65018: LD_INT 3
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 1
65027: NEG
65028: PUSH
65029: LD_INT 2
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 1
65038: PUSH
65039: LD_INT 4
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: LD_INT 0
65048: PUSH
65049: LD_INT 4
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 1
65058: NEG
65059: PUSH
65060: LD_INT 3
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 1
65069: PUSH
65070: LD_INT 5
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: LD_INT 0
65079: PUSH
65080: LD_INT 5
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 1
65089: NEG
65090: PUSH
65091: LD_INT 4
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 1
65100: PUSH
65101: LD_INT 6
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 0
65110: PUSH
65111: LD_INT 6
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 1
65120: NEG
65121: PUSH
65122: LD_INT 5
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65143: LD_ADDR_VAR 0 33
65147: PUSH
65148: LD_INT 2
65150: NEG
65151: PUSH
65152: LD_INT 1
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 3
65161: NEG
65162: PUSH
65163: LD_INT 0
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: LD_INT 3
65172: NEG
65173: PUSH
65174: LD_INT 1
65176: NEG
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 3
65184: NEG
65185: PUSH
65186: LD_INT 1
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 4
65195: NEG
65196: PUSH
65197: LD_INT 0
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 4
65206: NEG
65207: PUSH
65208: LD_INT 1
65210: NEG
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 4
65218: NEG
65219: PUSH
65220: LD_INT 1
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 5
65229: NEG
65230: PUSH
65231: LD_INT 0
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 5
65240: NEG
65241: PUSH
65242: LD_INT 1
65244: NEG
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PUSH
65250: LD_INT 5
65252: NEG
65253: PUSH
65254: LD_INT 1
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 6
65263: NEG
65264: PUSH
65265: LD_INT 0
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: LD_INT 6
65274: NEG
65275: PUSH
65276: LD_INT 1
65278: NEG
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65298: LD_ADDR_VAR 0 34
65302: PUSH
65303: LD_INT 2
65305: NEG
65306: PUSH
65307: LD_INT 3
65309: NEG
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: LD_INT 3
65317: NEG
65318: PUSH
65319: LD_INT 2
65321: NEG
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 3
65329: NEG
65330: PUSH
65331: LD_INT 3
65333: NEG
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 3
65341: NEG
65342: PUSH
65343: LD_INT 4
65345: NEG
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 4
65353: NEG
65354: PUSH
65355: LD_INT 3
65357: NEG
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: LD_INT 4
65365: NEG
65366: PUSH
65367: LD_INT 4
65369: NEG
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 4
65377: NEG
65378: PUSH
65379: LD_INT 5
65381: NEG
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 5
65389: NEG
65390: PUSH
65391: LD_INT 4
65393: NEG
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 5
65401: NEG
65402: PUSH
65403: LD_INT 5
65405: NEG
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 5
65413: NEG
65414: PUSH
65415: LD_INT 6
65417: NEG
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 6
65425: NEG
65426: PUSH
65427: LD_INT 5
65429: NEG
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 6
65437: NEG
65438: PUSH
65439: LD_INT 6
65441: NEG
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65461: LD_ADDR_VAR 0 41
65465: PUSH
65466: LD_INT 0
65468: PUSH
65469: LD_INT 2
65471: NEG
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 1
65479: NEG
65480: PUSH
65481: LD_INT 3
65483: NEG
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: LD_INT 1
65491: PUSH
65492: LD_INT 2
65494: NEG
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: LIST
65504: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65505: LD_ADDR_VAR 0 42
65509: PUSH
65510: LD_INT 2
65512: PUSH
65513: LD_INT 0
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 2
65522: PUSH
65523: LD_INT 1
65525: NEG
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: LD_INT 3
65533: PUSH
65534: LD_INT 1
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: LIST
65545: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65546: LD_ADDR_VAR 0 43
65550: PUSH
65551: LD_INT 2
65553: PUSH
65554: LD_INT 2
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 3
65563: PUSH
65564: LD_INT 2
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 2
65573: PUSH
65574: LD_INT 3
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: LIST
65585: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65586: LD_ADDR_VAR 0 44
65590: PUSH
65591: LD_INT 0
65593: PUSH
65594: LD_INT 2
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 1
65603: PUSH
65604: LD_INT 3
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 1
65613: NEG
65614: PUSH
65615: LD_INT 2
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: LIST
65626: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65627: LD_ADDR_VAR 0 45
65631: PUSH
65632: LD_INT 2
65634: NEG
65635: PUSH
65636: LD_INT 0
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 2
65645: NEG
65646: PUSH
65647: LD_INT 1
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 3
65656: NEG
65657: PUSH
65658: LD_INT 1
65660: NEG
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: LIST
65670: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65671: LD_ADDR_VAR 0 46
65675: PUSH
65676: LD_INT 2
65678: NEG
65679: PUSH
65680: LD_INT 2
65682: NEG
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: LD_INT 2
65690: NEG
65691: PUSH
65692: LD_INT 3
65694: NEG
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: LD_INT 3
65702: NEG
65703: PUSH
65704: LD_INT 2
65706: NEG
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: LIST
65716: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65717: LD_ADDR_VAR 0 47
65721: PUSH
65722: LD_INT 2
65724: NEG
65725: PUSH
65726: LD_INT 3
65728: NEG
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 1
65736: NEG
65737: PUSH
65738: LD_INT 3
65740: NEG
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65750: LD_ADDR_VAR 0 48
65754: PUSH
65755: LD_INT 1
65757: PUSH
65758: LD_INT 2
65760: NEG
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 2
65768: PUSH
65769: LD_INT 1
65771: NEG
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65781: LD_ADDR_VAR 0 49
65785: PUSH
65786: LD_INT 3
65788: PUSH
65789: LD_INT 1
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: LD_INT 3
65798: PUSH
65799: LD_INT 2
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65810: LD_ADDR_VAR 0 50
65814: PUSH
65815: LD_INT 2
65817: PUSH
65818: LD_INT 3
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 1
65827: PUSH
65828: LD_INT 3
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65839: LD_ADDR_VAR 0 51
65843: PUSH
65844: LD_INT 1
65846: NEG
65847: PUSH
65848: LD_INT 2
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 2
65857: NEG
65858: PUSH
65859: LD_INT 1
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65870: LD_ADDR_VAR 0 52
65874: PUSH
65875: LD_INT 3
65877: NEG
65878: PUSH
65879: LD_INT 1
65881: NEG
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 3
65889: NEG
65890: PUSH
65891: LD_INT 2
65893: NEG
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65903: LD_ADDR_VAR 0 53
65907: PUSH
65908: LD_INT 1
65910: NEG
65911: PUSH
65912: LD_INT 3
65914: NEG
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 0
65922: PUSH
65923: LD_INT 3
65925: NEG
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PUSH
65931: LD_INT 1
65933: PUSH
65934: LD_INT 2
65936: NEG
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: LIST
65946: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65947: LD_ADDR_VAR 0 54
65951: PUSH
65952: LD_INT 2
65954: PUSH
65955: LD_INT 1
65957: NEG
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 3
65965: PUSH
65966: LD_INT 0
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 3
65975: PUSH
65976: LD_INT 1
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: LIST
65987: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65988: LD_ADDR_VAR 0 55
65992: PUSH
65993: LD_INT 3
65995: PUSH
65996: LD_INT 2
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 3
66005: PUSH
66006: LD_INT 3
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 2
66015: PUSH
66016: LD_INT 3
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: LIST
66027: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66028: LD_ADDR_VAR 0 56
66032: PUSH
66033: LD_INT 1
66035: PUSH
66036: LD_INT 3
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: LD_INT 0
66045: PUSH
66046: LD_INT 3
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: LD_INT 1
66055: NEG
66056: PUSH
66057: LD_INT 2
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: LIST
66068: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66069: LD_ADDR_VAR 0 57
66073: PUSH
66074: LD_INT 2
66076: NEG
66077: PUSH
66078: LD_INT 1
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 3
66087: NEG
66088: PUSH
66089: LD_INT 0
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 3
66098: NEG
66099: PUSH
66100: LD_INT 1
66102: NEG
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: LIST
66112: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66113: LD_ADDR_VAR 0 58
66117: PUSH
66118: LD_INT 2
66120: NEG
66121: PUSH
66122: LD_INT 3
66124: NEG
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: LD_INT 3
66132: NEG
66133: PUSH
66134: LD_INT 2
66136: NEG
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 3
66144: NEG
66145: PUSH
66146: LD_INT 3
66148: NEG
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: LIST
66158: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66159: LD_ADDR_VAR 0 59
66163: PUSH
66164: LD_INT 1
66166: NEG
66167: PUSH
66168: LD_INT 2
66170: NEG
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: PUSH
66176: LD_INT 0
66178: PUSH
66179: LD_INT 2
66181: NEG
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: LD_INT 1
66189: PUSH
66190: LD_INT 1
66192: NEG
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: LIST
66202: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66203: LD_ADDR_VAR 0 60
66207: PUSH
66208: LD_INT 1
66210: PUSH
66211: LD_INT 1
66213: NEG
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 2
66221: PUSH
66222: LD_INT 0
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: LD_INT 2
66231: PUSH
66232: LD_INT 1
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: LIST
66243: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66244: LD_ADDR_VAR 0 61
66248: PUSH
66249: LD_INT 2
66251: PUSH
66252: LD_INT 1
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: LD_INT 2
66261: PUSH
66262: LD_INT 2
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: PUSH
66269: LD_INT 1
66271: PUSH
66272: LD_INT 2
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: LIST
66283: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66284: LD_ADDR_VAR 0 62
66288: PUSH
66289: LD_INT 1
66291: PUSH
66292: LD_INT 2
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: LD_INT 0
66301: PUSH
66302: LD_INT 2
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: LD_INT 1
66311: NEG
66312: PUSH
66313: LD_INT 1
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: LIST
66324: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66325: LD_ADDR_VAR 0 63
66329: PUSH
66330: LD_INT 1
66332: NEG
66333: PUSH
66334: LD_INT 1
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 2
66343: NEG
66344: PUSH
66345: LD_INT 0
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 2
66354: NEG
66355: PUSH
66356: LD_INT 1
66358: NEG
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: LIST
66368: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66369: LD_ADDR_VAR 0 64
66373: PUSH
66374: LD_INT 1
66376: NEG
66377: PUSH
66378: LD_INT 2
66380: NEG
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 2
66388: NEG
66389: PUSH
66390: LD_INT 1
66392: NEG
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: LD_INT 2
66400: NEG
66401: PUSH
66402: LD_INT 2
66404: NEG
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: LIST
66414: ST_TO_ADDR
// end ; 2 :
66415: GO 69681
66417: LD_INT 2
66419: DOUBLE
66420: EQUAL
66421: IFTRUE 66425
66423: GO 69680
66425: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66426: LD_ADDR_VAR 0 29
66430: PUSH
66431: LD_INT 4
66433: PUSH
66434: LD_INT 0
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 4
66443: PUSH
66444: LD_INT 1
66446: NEG
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 5
66454: PUSH
66455: LD_INT 0
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 5
66464: PUSH
66465: LD_INT 1
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 4
66474: PUSH
66475: LD_INT 1
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 3
66484: PUSH
66485: LD_INT 0
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 3
66494: PUSH
66495: LD_INT 1
66497: NEG
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 3
66505: PUSH
66506: LD_INT 2
66508: NEG
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: PUSH
66514: LD_INT 5
66516: PUSH
66517: LD_INT 2
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 3
66526: PUSH
66527: LD_INT 3
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 3
66536: PUSH
66537: LD_INT 2
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 4
66546: PUSH
66547: LD_INT 3
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 4
66556: PUSH
66557: LD_INT 4
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 3
66566: PUSH
66567: LD_INT 4
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PUSH
66574: LD_INT 2
66576: PUSH
66577: LD_INT 3
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: LD_INT 2
66586: PUSH
66587: LD_INT 2
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 4
66596: PUSH
66597: LD_INT 2
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: LD_INT 2
66606: PUSH
66607: LD_INT 4
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 0
66616: PUSH
66617: LD_INT 4
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 0
66626: PUSH
66627: LD_INT 3
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 1
66636: PUSH
66637: LD_INT 4
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: LD_INT 1
66646: PUSH
66647: LD_INT 5
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 0
66656: PUSH
66657: LD_INT 5
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PUSH
66664: LD_INT 1
66666: NEG
66667: PUSH
66668: LD_INT 4
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PUSH
66675: LD_INT 1
66677: NEG
66678: PUSH
66679: LD_INT 3
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: LD_INT 2
66688: PUSH
66689: LD_INT 5
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: PUSH
66696: LD_INT 2
66698: NEG
66699: PUSH
66700: LD_INT 3
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 3
66709: NEG
66710: PUSH
66711: LD_INT 0
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 3
66720: NEG
66721: PUSH
66722: LD_INT 1
66724: NEG
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: PUSH
66730: LD_INT 2
66732: NEG
66733: PUSH
66734: LD_INT 0
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 2
66743: NEG
66744: PUSH
66745: LD_INT 1
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: LD_INT 3
66754: NEG
66755: PUSH
66756: LD_INT 1
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: LD_INT 4
66765: NEG
66766: PUSH
66767: LD_INT 0
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 4
66776: NEG
66777: PUSH
66778: LD_INT 1
66780: NEG
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 4
66788: NEG
66789: PUSH
66790: LD_INT 2
66792: NEG
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: LD_INT 2
66800: NEG
66801: PUSH
66802: LD_INT 2
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 4
66811: NEG
66812: PUSH
66813: LD_INT 4
66815: NEG
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: PUSH
66821: LD_INT 4
66823: NEG
66824: PUSH
66825: LD_INT 5
66827: NEG
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: LD_INT 3
66835: NEG
66836: PUSH
66837: LD_INT 4
66839: NEG
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: PUSH
66845: LD_INT 3
66847: NEG
66848: PUSH
66849: LD_INT 3
66851: NEG
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: LD_INT 4
66859: NEG
66860: PUSH
66861: LD_INT 3
66863: NEG
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: LD_INT 5
66871: NEG
66872: PUSH
66873: LD_INT 4
66875: NEG
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: PUSH
66881: LD_INT 5
66883: NEG
66884: PUSH
66885: LD_INT 5
66887: NEG
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 3
66895: NEG
66896: PUSH
66897: LD_INT 5
66899: NEG
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: PUSH
66905: LD_INT 5
66907: NEG
66908: PUSH
66909: LD_INT 3
66911: NEG
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: LIST
66921: LIST
66922: LIST
66923: LIST
66924: LIST
66925: LIST
66926: LIST
66927: LIST
66928: LIST
66929: LIST
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66964: LD_ADDR_VAR 0 30
66968: PUSH
66969: LD_INT 4
66971: PUSH
66972: LD_INT 4
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 4
66981: PUSH
66982: LD_INT 3
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 5
66991: PUSH
66992: LD_INT 4
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 5
67001: PUSH
67002: LD_INT 5
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 4
67011: PUSH
67012: LD_INT 5
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 3
67021: PUSH
67022: LD_INT 4
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 3
67031: PUSH
67032: LD_INT 3
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 5
67041: PUSH
67042: LD_INT 3
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 3
67051: PUSH
67052: LD_INT 5
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 0
67061: PUSH
67062: LD_INT 3
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: LD_INT 0
67071: PUSH
67072: LD_INT 2
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: PUSH
67079: LD_INT 1
67081: PUSH
67082: LD_INT 3
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PUSH
67089: LD_INT 1
67091: PUSH
67092: LD_INT 4
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PUSH
67099: LD_INT 0
67101: PUSH
67102: LD_INT 4
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: PUSH
67109: LD_INT 1
67111: NEG
67112: PUSH
67113: LD_INT 3
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: LD_INT 1
67122: NEG
67123: PUSH
67124: LD_INT 2
67126: PUSH
67127: EMPTY
67128: LIST
67129: LIST
67130: PUSH
67131: LD_INT 2
67133: PUSH
67134: LD_INT 4
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 2
67143: NEG
67144: PUSH
67145: LD_INT 2
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: LD_INT 4
67154: NEG
67155: PUSH
67156: LD_INT 0
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 4
67165: NEG
67166: PUSH
67167: LD_INT 1
67169: NEG
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: LD_INT 3
67177: NEG
67178: PUSH
67179: LD_INT 0
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: LD_INT 3
67188: NEG
67189: PUSH
67190: LD_INT 1
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: PUSH
67197: LD_INT 4
67199: NEG
67200: PUSH
67201: LD_INT 1
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: PUSH
67208: LD_INT 5
67210: NEG
67211: PUSH
67212: LD_INT 0
67214: PUSH
67215: EMPTY
67216: LIST
67217: LIST
67218: PUSH
67219: LD_INT 5
67221: NEG
67222: PUSH
67223: LD_INT 1
67225: NEG
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: PUSH
67231: LD_INT 5
67233: NEG
67234: PUSH
67235: LD_INT 2
67237: NEG
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 3
67245: NEG
67246: PUSH
67247: LD_INT 2
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 3
67256: NEG
67257: PUSH
67258: LD_INT 3
67260: NEG
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: PUSH
67266: LD_INT 3
67268: NEG
67269: PUSH
67270: LD_INT 4
67272: NEG
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: LD_INT 2
67280: NEG
67281: PUSH
67282: LD_INT 3
67284: NEG
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: PUSH
67290: LD_INT 2
67292: NEG
67293: PUSH
67294: LD_INT 2
67296: NEG
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: PUSH
67302: LD_INT 3
67304: NEG
67305: PUSH
67306: LD_INT 2
67308: NEG
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: LD_INT 4
67316: NEG
67317: PUSH
67318: LD_INT 3
67320: NEG
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PUSH
67326: LD_INT 4
67328: NEG
67329: PUSH
67330: LD_INT 4
67332: NEG
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 2
67340: NEG
67341: PUSH
67342: LD_INT 4
67344: NEG
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: PUSH
67350: LD_INT 4
67352: NEG
67353: PUSH
67354: LD_INT 2
67356: NEG
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PUSH
67362: LD_INT 0
67364: PUSH
67365: LD_INT 4
67367: NEG
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: PUSH
67373: LD_INT 0
67375: PUSH
67376: LD_INT 5
67378: NEG
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PUSH
67384: LD_INT 1
67386: PUSH
67387: LD_INT 4
67389: NEG
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: LD_INT 1
67397: PUSH
67398: LD_INT 3
67400: NEG
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: PUSH
67406: LD_INT 0
67408: PUSH
67409: LD_INT 3
67411: NEG
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: LD_INT 1
67419: NEG
67420: PUSH
67421: LD_INT 4
67423: NEG
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: PUSH
67429: LD_INT 1
67431: NEG
67432: PUSH
67433: LD_INT 5
67435: NEG
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 2
67443: PUSH
67444: LD_INT 3
67446: NEG
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 2
67454: NEG
67455: PUSH
67456: LD_INT 5
67458: NEG
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: LIST
67486: LIST
67487: LIST
67488: LIST
67489: LIST
67490: LIST
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: LIST
67510: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67511: LD_ADDR_VAR 0 31
67515: PUSH
67516: LD_INT 0
67518: PUSH
67519: LD_INT 4
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: PUSH
67526: LD_INT 0
67528: PUSH
67529: LD_INT 3
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 1
67538: PUSH
67539: LD_INT 4
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: LD_INT 1
67548: PUSH
67549: LD_INT 5
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: PUSH
67556: LD_INT 0
67558: PUSH
67559: LD_INT 5
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: PUSH
67566: LD_INT 1
67568: NEG
67569: PUSH
67570: LD_INT 4
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: LD_INT 1
67579: NEG
67580: PUSH
67581: LD_INT 3
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: PUSH
67588: LD_INT 2
67590: PUSH
67591: LD_INT 5
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: PUSH
67598: LD_INT 2
67600: NEG
67601: PUSH
67602: LD_INT 3
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PUSH
67609: LD_INT 3
67611: NEG
67612: PUSH
67613: LD_INT 0
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 3
67622: NEG
67623: PUSH
67624: LD_INT 1
67626: NEG
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: LD_INT 2
67634: NEG
67635: PUSH
67636: LD_INT 0
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 2
67645: NEG
67646: PUSH
67647: LD_INT 1
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 3
67656: NEG
67657: PUSH
67658: LD_INT 1
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 4
67667: NEG
67668: PUSH
67669: LD_INT 0
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: LD_INT 4
67678: NEG
67679: PUSH
67680: LD_INT 1
67682: NEG
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: LD_INT 4
67690: NEG
67691: PUSH
67692: LD_INT 2
67694: NEG
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: LD_INT 2
67702: NEG
67703: PUSH
67704: LD_INT 2
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: LD_INT 4
67713: NEG
67714: PUSH
67715: LD_INT 4
67717: NEG
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: PUSH
67723: LD_INT 4
67725: NEG
67726: PUSH
67727: LD_INT 5
67729: NEG
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: PUSH
67735: LD_INT 3
67737: NEG
67738: PUSH
67739: LD_INT 4
67741: NEG
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: PUSH
67747: LD_INT 3
67749: NEG
67750: PUSH
67751: LD_INT 3
67753: NEG
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: PUSH
67759: LD_INT 4
67761: NEG
67762: PUSH
67763: LD_INT 3
67765: NEG
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 5
67773: NEG
67774: PUSH
67775: LD_INT 4
67777: NEG
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 5
67785: NEG
67786: PUSH
67787: LD_INT 5
67789: NEG
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: PUSH
67795: LD_INT 3
67797: NEG
67798: PUSH
67799: LD_INT 5
67801: NEG
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 5
67809: NEG
67810: PUSH
67811: LD_INT 3
67813: NEG
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: LD_INT 0
67821: PUSH
67822: LD_INT 3
67824: NEG
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PUSH
67830: LD_INT 0
67832: PUSH
67833: LD_INT 4
67835: NEG
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: LD_INT 1
67843: PUSH
67844: LD_INT 3
67846: NEG
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 1
67854: PUSH
67855: LD_INT 2
67857: NEG
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: LD_INT 0
67865: PUSH
67866: LD_INT 2
67868: NEG
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 1
67876: NEG
67877: PUSH
67878: LD_INT 3
67880: NEG
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: LD_INT 1
67888: NEG
67889: PUSH
67890: LD_INT 4
67892: NEG
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: LD_INT 2
67900: PUSH
67901: LD_INT 2
67903: NEG
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: PUSH
67909: LD_INT 2
67911: NEG
67912: PUSH
67913: LD_INT 4
67915: NEG
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: LD_INT 4
67923: PUSH
67924: LD_INT 0
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PUSH
67931: LD_INT 4
67933: PUSH
67934: LD_INT 1
67936: NEG
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 5
67944: PUSH
67945: LD_INT 0
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: PUSH
67952: LD_INT 5
67954: PUSH
67955: LD_INT 1
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: PUSH
67962: LD_INT 4
67964: PUSH
67965: LD_INT 1
67967: PUSH
67968: EMPTY
67969: LIST
67970: LIST
67971: PUSH
67972: LD_INT 3
67974: PUSH
67975: LD_INT 0
67977: PUSH
67978: EMPTY
67979: LIST
67980: LIST
67981: PUSH
67982: LD_INT 3
67984: PUSH
67985: LD_INT 1
67987: NEG
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: PUSH
67993: LD_INT 3
67995: PUSH
67996: LD_INT 2
67998: NEG
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: PUSH
68004: LD_INT 5
68006: PUSH
68007: LD_INT 2
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: LIST
68018: LIST
68019: LIST
68020: LIST
68021: LIST
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: LIST
68027: LIST
68028: LIST
68029: LIST
68030: LIST
68031: LIST
68032: LIST
68033: LIST
68034: LIST
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: LIST
68046: LIST
68047: LIST
68048: LIST
68049: LIST
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68061: LD_ADDR_VAR 0 32
68065: PUSH
68066: LD_INT 4
68068: NEG
68069: PUSH
68070: LD_INT 0
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 4
68079: NEG
68080: PUSH
68081: LD_INT 1
68083: NEG
68084: PUSH
68085: EMPTY
68086: LIST
68087: LIST
68088: PUSH
68089: LD_INT 3
68091: NEG
68092: PUSH
68093: LD_INT 0
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: PUSH
68100: LD_INT 3
68102: NEG
68103: PUSH
68104: LD_INT 1
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: PUSH
68111: LD_INT 4
68113: NEG
68114: PUSH
68115: LD_INT 1
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: PUSH
68122: LD_INT 5
68124: NEG
68125: PUSH
68126: LD_INT 0
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: PUSH
68133: LD_INT 5
68135: NEG
68136: PUSH
68137: LD_INT 1
68139: NEG
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: PUSH
68145: LD_INT 5
68147: NEG
68148: PUSH
68149: LD_INT 2
68151: NEG
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: PUSH
68157: LD_INT 3
68159: NEG
68160: PUSH
68161: LD_INT 2
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PUSH
68168: LD_INT 3
68170: NEG
68171: PUSH
68172: LD_INT 3
68174: NEG
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: PUSH
68180: LD_INT 3
68182: NEG
68183: PUSH
68184: LD_INT 4
68186: NEG
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: PUSH
68192: LD_INT 2
68194: NEG
68195: PUSH
68196: LD_INT 3
68198: NEG
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: PUSH
68204: LD_INT 2
68206: NEG
68207: PUSH
68208: LD_INT 2
68210: NEG
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: PUSH
68216: LD_INT 3
68218: NEG
68219: PUSH
68220: LD_INT 2
68222: NEG
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: PUSH
68228: LD_INT 4
68230: NEG
68231: PUSH
68232: LD_INT 3
68234: NEG
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 4
68242: NEG
68243: PUSH
68244: LD_INT 4
68246: NEG
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PUSH
68252: LD_INT 2
68254: NEG
68255: PUSH
68256: LD_INT 4
68258: NEG
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: PUSH
68264: LD_INT 4
68266: NEG
68267: PUSH
68268: LD_INT 2
68270: NEG
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: PUSH
68276: LD_INT 0
68278: PUSH
68279: LD_INT 4
68281: NEG
68282: PUSH
68283: EMPTY
68284: LIST
68285: LIST
68286: PUSH
68287: LD_INT 0
68289: PUSH
68290: LD_INT 5
68292: NEG
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: PUSH
68298: LD_INT 1
68300: PUSH
68301: LD_INT 4
68303: NEG
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: LD_INT 1
68311: PUSH
68312: LD_INT 3
68314: NEG
68315: PUSH
68316: EMPTY
68317: LIST
68318: LIST
68319: PUSH
68320: LD_INT 0
68322: PUSH
68323: LD_INT 3
68325: NEG
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: LD_INT 1
68333: NEG
68334: PUSH
68335: LD_INT 4
68337: NEG
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: PUSH
68343: LD_INT 1
68345: NEG
68346: PUSH
68347: LD_INT 5
68349: NEG
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: PUSH
68355: LD_INT 2
68357: PUSH
68358: LD_INT 3
68360: NEG
68361: PUSH
68362: EMPTY
68363: LIST
68364: LIST
68365: PUSH
68366: LD_INT 2
68368: NEG
68369: PUSH
68370: LD_INT 5
68372: NEG
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: PUSH
68378: LD_INT 3
68380: PUSH
68381: LD_INT 0
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PUSH
68388: LD_INT 3
68390: PUSH
68391: LD_INT 1
68393: NEG
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 4
68401: PUSH
68402: LD_INT 0
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: PUSH
68409: LD_INT 4
68411: PUSH
68412: LD_INT 1
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: PUSH
68419: LD_INT 3
68421: PUSH
68422: LD_INT 1
68424: PUSH
68425: EMPTY
68426: LIST
68427: LIST
68428: PUSH
68429: LD_INT 2
68431: PUSH
68432: LD_INT 0
68434: PUSH
68435: EMPTY
68436: LIST
68437: LIST
68438: PUSH
68439: LD_INT 2
68441: PUSH
68442: LD_INT 1
68444: NEG
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PUSH
68450: LD_INT 2
68452: PUSH
68453: LD_INT 2
68455: NEG
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: PUSH
68461: LD_INT 4
68463: PUSH
68464: LD_INT 2
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: PUSH
68471: LD_INT 4
68473: PUSH
68474: LD_INT 4
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: PUSH
68481: LD_INT 4
68483: PUSH
68484: LD_INT 3
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: PUSH
68491: LD_INT 5
68493: PUSH
68494: LD_INT 4
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: PUSH
68501: LD_INT 5
68503: PUSH
68504: LD_INT 5
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: LD_INT 4
68513: PUSH
68514: LD_INT 5
68516: PUSH
68517: EMPTY
68518: LIST
68519: LIST
68520: PUSH
68521: LD_INT 3
68523: PUSH
68524: LD_INT 4
68526: PUSH
68527: EMPTY
68528: LIST
68529: LIST
68530: PUSH
68531: LD_INT 3
68533: PUSH
68534: LD_INT 3
68536: PUSH
68537: EMPTY
68538: LIST
68539: LIST
68540: PUSH
68541: LD_INT 5
68543: PUSH
68544: LD_INT 3
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: LD_INT 3
68553: PUSH
68554: LD_INT 5
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: LIST
68574: LIST
68575: LIST
68576: LIST
68577: LIST
68578: LIST
68579: LIST
68580: LIST
68581: LIST
68582: LIST
68583: LIST
68584: LIST
68585: LIST
68586: LIST
68587: LIST
68588: LIST
68589: LIST
68590: LIST
68591: LIST
68592: LIST
68593: LIST
68594: LIST
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: LIST
68600: LIST
68601: LIST
68602: LIST
68603: LIST
68604: LIST
68605: LIST
68606: LIST
68607: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68608: LD_ADDR_VAR 0 33
68612: PUSH
68613: LD_INT 4
68615: NEG
68616: PUSH
68617: LD_INT 4
68619: NEG
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: PUSH
68625: LD_INT 4
68627: NEG
68628: PUSH
68629: LD_INT 5
68631: NEG
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: PUSH
68637: LD_INT 3
68639: NEG
68640: PUSH
68641: LD_INT 4
68643: NEG
68644: PUSH
68645: EMPTY
68646: LIST
68647: LIST
68648: PUSH
68649: LD_INT 3
68651: NEG
68652: PUSH
68653: LD_INT 3
68655: NEG
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: PUSH
68661: LD_INT 4
68663: NEG
68664: PUSH
68665: LD_INT 3
68667: NEG
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: PUSH
68673: LD_INT 5
68675: NEG
68676: PUSH
68677: LD_INT 4
68679: NEG
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: PUSH
68685: LD_INT 5
68687: NEG
68688: PUSH
68689: LD_INT 5
68691: NEG
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: PUSH
68697: LD_INT 3
68699: NEG
68700: PUSH
68701: LD_INT 5
68703: NEG
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: PUSH
68709: LD_INT 5
68711: NEG
68712: PUSH
68713: LD_INT 3
68715: NEG
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: PUSH
68721: LD_INT 0
68723: PUSH
68724: LD_INT 3
68726: NEG
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 0
68734: PUSH
68735: LD_INT 4
68737: NEG
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: LD_INT 1
68745: PUSH
68746: LD_INT 3
68748: NEG
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: LD_INT 1
68756: PUSH
68757: LD_INT 2
68759: NEG
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: PUSH
68765: LD_INT 0
68767: PUSH
68768: LD_INT 2
68770: NEG
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 1
68778: NEG
68779: PUSH
68780: LD_INT 3
68782: NEG
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: PUSH
68788: LD_INT 1
68790: NEG
68791: PUSH
68792: LD_INT 4
68794: NEG
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: PUSH
68800: LD_INT 2
68802: PUSH
68803: LD_INT 2
68805: NEG
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: PUSH
68811: LD_INT 2
68813: NEG
68814: PUSH
68815: LD_INT 4
68817: NEG
68818: PUSH
68819: EMPTY
68820: LIST
68821: LIST
68822: PUSH
68823: LD_INT 4
68825: PUSH
68826: LD_INT 0
68828: PUSH
68829: EMPTY
68830: LIST
68831: LIST
68832: PUSH
68833: LD_INT 4
68835: PUSH
68836: LD_INT 1
68838: NEG
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: LD_INT 5
68846: PUSH
68847: LD_INT 0
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: LD_INT 5
68856: PUSH
68857: LD_INT 1
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: LD_INT 4
68866: PUSH
68867: LD_INT 1
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: LD_INT 3
68876: PUSH
68877: LD_INT 0
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: PUSH
68884: LD_INT 3
68886: PUSH
68887: LD_INT 1
68889: NEG
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: PUSH
68895: LD_INT 3
68897: PUSH
68898: LD_INT 2
68900: NEG
68901: PUSH
68902: EMPTY
68903: LIST
68904: LIST
68905: PUSH
68906: LD_INT 5
68908: PUSH
68909: LD_INT 2
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: PUSH
68916: LD_INT 3
68918: PUSH
68919: LD_INT 3
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: PUSH
68926: LD_INT 3
68928: PUSH
68929: LD_INT 2
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: PUSH
68936: LD_INT 4
68938: PUSH
68939: LD_INT 3
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: PUSH
68946: LD_INT 4
68948: PUSH
68949: LD_INT 4
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: PUSH
68956: LD_INT 3
68958: PUSH
68959: LD_INT 4
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: PUSH
68966: LD_INT 2
68968: PUSH
68969: LD_INT 3
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: LD_INT 2
68978: PUSH
68979: LD_INT 2
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 4
68988: PUSH
68989: LD_INT 2
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: PUSH
68996: LD_INT 2
68998: PUSH
68999: LD_INT 4
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: PUSH
69006: LD_INT 0
69008: PUSH
69009: LD_INT 4
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PUSH
69016: LD_INT 0
69018: PUSH
69019: LD_INT 3
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: PUSH
69026: LD_INT 1
69028: PUSH
69029: LD_INT 4
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 1
69038: PUSH
69039: LD_INT 5
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: PUSH
69046: LD_INT 0
69048: PUSH
69049: LD_INT 5
69051: PUSH
69052: EMPTY
69053: LIST
69054: LIST
69055: PUSH
69056: LD_INT 1
69058: NEG
69059: PUSH
69060: LD_INT 4
69062: PUSH
69063: EMPTY
69064: LIST
69065: LIST
69066: PUSH
69067: LD_INT 1
69069: NEG
69070: PUSH
69071: LD_INT 3
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PUSH
69078: LD_INT 2
69080: PUSH
69081: LD_INT 5
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: PUSH
69088: LD_INT 2
69090: NEG
69091: PUSH
69092: LD_INT 3
69094: PUSH
69095: EMPTY
69096: LIST
69097: LIST
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: LIST
69106: LIST
69107: LIST
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: LIST
69127: LIST
69128: LIST
69129: LIST
69130: LIST
69131: LIST
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: LIST
69139: LIST
69140: LIST
69141: LIST
69142: LIST
69143: LIST
69144: LIST
69145: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69146: LD_ADDR_VAR 0 34
69150: PUSH
69151: LD_INT 0
69153: PUSH
69154: LD_INT 4
69156: NEG
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: PUSH
69162: LD_INT 0
69164: PUSH
69165: LD_INT 5
69167: NEG
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: PUSH
69173: LD_INT 1
69175: PUSH
69176: LD_INT 4
69178: NEG
69179: PUSH
69180: EMPTY
69181: LIST
69182: LIST
69183: PUSH
69184: LD_INT 1
69186: PUSH
69187: LD_INT 3
69189: NEG
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: PUSH
69195: LD_INT 0
69197: PUSH
69198: LD_INT 3
69200: NEG
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: PUSH
69206: LD_INT 1
69208: NEG
69209: PUSH
69210: LD_INT 4
69212: NEG
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: PUSH
69218: LD_INT 1
69220: NEG
69221: PUSH
69222: LD_INT 5
69224: NEG
69225: PUSH
69226: EMPTY
69227: LIST
69228: LIST
69229: PUSH
69230: LD_INT 2
69232: PUSH
69233: LD_INT 3
69235: NEG
69236: PUSH
69237: EMPTY
69238: LIST
69239: LIST
69240: PUSH
69241: LD_INT 2
69243: NEG
69244: PUSH
69245: LD_INT 5
69247: NEG
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PUSH
69253: LD_INT 3
69255: PUSH
69256: LD_INT 0
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: PUSH
69263: LD_INT 3
69265: PUSH
69266: LD_INT 1
69268: NEG
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: PUSH
69274: LD_INT 4
69276: PUSH
69277: LD_INT 0
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: PUSH
69284: LD_INT 4
69286: PUSH
69287: LD_INT 1
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: PUSH
69294: LD_INT 3
69296: PUSH
69297: LD_INT 1
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: PUSH
69304: LD_INT 2
69306: PUSH
69307: LD_INT 0
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: LD_INT 2
69316: PUSH
69317: LD_INT 1
69319: NEG
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: LD_INT 2
69327: PUSH
69328: LD_INT 2
69330: NEG
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: PUSH
69336: LD_INT 4
69338: PUSH
69339: LD_INT 2
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PUSH
69346: LD_INT 4
69348: PUSH
69349: LD_INT 4
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: LD_INT 4
69358: PUSH
69359: LD_INT 3
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: PUSH
69366: LD_INT 5
69368: PUSH
69369: LD_INT 4
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: PUSH
69376: LD_INT 5
69378: PUSH
69379: LD_INT 5
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: PUSH
69386: LD_INT 4
69388: PUSH
69389: LD_INT 5
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: PUSH
69396: LD_INT 3
69398: PUSH
69399: LD_INT 4
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 3
69408: PUSH
69409: LD_INT 3
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: PUSH
69416: LD_INT 5
69418: PUSH
69419: LD_INT 3
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: LD_INT 3
69428: PUSH
69429: LD_INT 5
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PUSH
69436: LD_INT 0
69438: PUSH
69439: LD_INT 3
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 0
69448: PUSH
69449: LD_INT 2
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PUSH
69456: LD_INT 1
69458: PUSH
69459: LD_INT 3
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: LD_INT 1
69468: PUSH
69469: LD_INT 4
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: LD_INT 0
69478: PUSH
69479: LD_INT 4
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 1
69488: NEG
69489: PUSH
69490: LD_INT 3
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 1
69499: NEG
69500: PUSH
69501: LD_INT 2
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: LD_INT 2
69510: PUSH
69511: LD_INT 4
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: LD_INT 2
69520: NEG
69521: PUSH
69522: LD_INT 2
69524: PUSH
69525: EMPTY
69526: LIST
69527: LIST
69528: PUSH
69529: LD_INT 4
69531: NEG
69532: PUSH
69533: LD_INT 0
69535: PUSH
69536: EMPTY
69537: LIST
69538: LIST
69539: PUSH
69540: LD_INT 4
69542: NEG
69543: PUSH
69544: LD_INT 1
69546: NEG
69547: PUSH
69548: EMPTY
69549: LIST
69550: LIST
69551: PUSH
69552: LD_INT 3
69554: NEG
69555: PUSH
69556: LD_INT 0
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: PUSH
69563: LD_INT 3
69565: NEG
69566: PUSH
69567: LD_INT 1
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: PUSH
69574: LD_INT 4
69576: NEG
69577: PUSH
69578: LD_INT 1
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: PUSH
69585: LD_INT 5
69587: NEG
69588: PUSH
69589: LD_INT 0
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: LD_INT 5
69598: NEG
69599: PUSH
69600: LD_INT 1
69602: NEG
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 5
69610: NEG
69611: PUSH
69612: LD_INT 2
69614: NEG
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 3
69622: NEG
69623: PUSH
69624: LD_INT 2
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: PUSH
69631: EMPTY
69632: LIST
69633: LIST
69634: LIST
69635: LIST
69636: LIST
69637: LIST
69638: LIST
69639: LIST
69640: LIST
69641: LIST
69642: LIST
69643: LIST
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: LIST
69649: LIST
69650: LIST
69651: LIST
69652: LIST
69653: LIST
69654: LIST
69655: LIST
69656: LIST
69657: LIST
69658: LIST
69659: LIST
69660: LIST
69661: LIST
69662: LIST
69663: LIST
69664: LIST
69665: LIST
69666: LIST
69667: LIST
69668: LIST
69669: LIST
69670: LIST
69671: LIST
69672: LIST
69673: LIST
69674: LIST
69675: LIST
69676: LIST
69677: ST_TO_ADDR
// end ; end ;
69678: GO 69681
69680: POP
// case btype of b_depot , b_warehouse :
69681: LD_VAR 0 1
69685: PUSH
69686: LD_INT 0
69688: DOUBLE
69689: EQUAL
69690: IFTRUE 69700
69692: LD_INT 1
69694: DOUBLE
69695: EQUAL
69696: IFTRUE 69700
69698: GO 69901
69700: POP
// case nation of nation_american :
69701: LD_VAR 0 5
69705: PUSH
69706: LD_INT 1
69708: DOUBLE
69709: EQUAL
69710: IFTRUE 69714
69712: GO 69770
69714: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69715: LD_ADDR_VAR 0 9
69719: PUSH
69720: LD_VAR 0 11
69724: PUSH
69725: LD_VAR 0 12
69729: PUSH
69730: LD_VAR 0 13
69734: PUSH
69735: LD_VAR 0 14
69739: PUSH
69740: LD_VAR 0 15
69744: PUSH
69745: LD_VAR 0 16
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: PUSH
69758: LD_VAR 0 4
69762: PUSH
69763: LD_INT 1
69765: PLUS
69766: ARRAY
69767: ST_TO_ADDR
69768: GO 69899
69770: LD_INT 2
69772: DOUBLE
69773: EQUAL
69774: IFTRUE 69778
69776: GO 69834
69778: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69779: LD_ADDR_VAR 0 9
69783: PUSH
69784: LD_VAR 0 17
69788: PUSH
69789: LD_VAR 0 18
69793: PUSH
69794: LD_VAR 0 19
69798: PUSH
69799: LD_VAR 0 20
69803: PUSH
69804: LD_VAR 0 21
69808: PUSH
69809: LD_VAR 0 22
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: LIST
69818: LIST
69819: LIST
69820: LIST
69821: PUSH
69822: LD_VAR 0 4
69826: PUSH
69827: LD_INT 1
69829: PLUS
69830: ARRAY
69831: ST_TO_ADDR
69832: GO 69899
69834: LD_INT 3
69836: DOUBLE
69837: EQUAL
69838: IFTRUE 69842
69840: GO 69898
69842: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69843: LD_ADDR_VAR 0 9
69847: PUSH
69848: LD_VAR 0 23
69852: PUSH
69853: LD_VAR 0 24
69857: PUSH
69858: LD_VAR 0 25
69862: PUSH
69863: LD_VAR 0 26
69867: PUSH
69868: LD_VAR 0 27
69872: PUSH
69873: LD_VAR 0 28
69877: PUSH
69878: EMPTY
69879: LIST
69880: LIST
69881: LIST
69882: LIST
69883: LIST
69884: LIST
69885: PUSH
69886: LD_VAR 0 4
69890: PUSH
69891: LD_INT 1
69893: PLUS
69894: ARRAY
69895: ST_TO_ADDR
69896: GO 69899
69898: POP
69899: GO 70454
69901: LD_INT 2
69903: DOUBLE
69904: EQUAL
69905: IFTRUE 69915
69907: LD_INT 3
69909: DOUBLE
69910: EQUAL
69911: IFTRUE 69915
69913: GO 69971
69915: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69916: LD_ADDR_VAR 0 9
69920: PUSH
69921: LD_VAR 0 29
69925: PUSH
69926: LD_VAR 0 30
69930: PUSH
69931: LD_VAR 0 31
69935: PUSH
69936: LD_VAR 0 32
69940: PUSH
69941: LD_VAR 0 33
69945: PUSH
69946: LD_VAR 0 34
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: LIST
69955: LIST
69956: LIST
69957: LIST
69958: PUSH
69959: LD_VAR 0 4
69963: PUSH
69964: LD_INT 1
69966: PLUS
69967: ARRAY
69968: ST_TO_ADDR
69969: GO 70454
69971: LD_INT 16
69973: DOUBLE
69974: EQUAL
69975: IFTRUE 70033
69977: LD_INT 17
69979: DOUBLE
69980: EQUAL
69981: IFTRUE 70033
69983: LD_INT 18
69985: DOUBLE
69986: EQUAL
69987: IFTRUE 70033
69989: LD_INT 19
69991: DOUBLE
69992: EQUAL
69993: IFTRUE 70033
69995: LD_INT 22
69997: DOUBLE
69998: EQUAL
69999: IFTRUE 70033
70001: LD_INT 20
70003: DOUBLE
70004: EQUAL
70005: IFTRUE 70033
70007: LD_INT 21
70009: DOUBLE
70010: EQUAL
70011: IFTRUE 70033
70013: LD_INT 23
70015: DOUBLE
70016: EQUAL
70017: IFTRUE 70033
70019: LD_INT 24
70021: DOUBLE
70022: EQUAL
70023: IFTRUE 70033
70025: LD_INT 25
70027: DOUBLE
70028: EQUAL
70029: IFTRUE 70033
70031: GO 70089
70033: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70034: LD_ADDR_VAR 0 9
70038: PUSH
70039: LD_VAR 0 35
70043: PUSH
70044: LD_VAR 0 36
70048: PUSH
70049: LD_VAR 0 37
70053: PUSH
70054: LD_VAR 0 38
70058: PUSH
70059: LD_VAR 0 39
70063: PUSH
70064: LD_VAR 0 40
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: PUSH
70077: LD_VAR 0 4
70081: PUSH
70082: LD_INT 1
70084: PLUS
70085: ARRAY
70086: ST_TO_ADDR
70087: GO 70454
70089: LD_INT 6
70091: DOUBLE
70092: EQUAL
70093: IFTRUE 70145
70095: LD_INT 7
70097: DOUBLE
70098: EQUAL
70099: IFTRUE 70145
70101: LD_INT 8
70103: DOUBLE
70104: EQUAL
70105: IFTRUE 70145
70107: LD_INT 13
70109: DOUBLE
70110: EQUAL
70111: IFTRUE 70145
70113: LD_INT 12
70115: DOUBLE
70116: EQUAL
70117: IFTRUE 70145
70119: LD_INT 15
70121: DOUBLE
70122: EQUAL
70123: IFTRUE 70145
70125: LD_INT 11
70127: DOUBLE
70128: EQUAL
70129: IFTRUE 70145
70131: LD_INT 14
70133: DOUBLE
70134: EQUAL
70135: IFTRUE 70145
70137: LD_INT 10
70139: DOUBLE
70140: EQUAL
70141: IFTRUE 70145
70143: GO 70201
70145: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70146: LD_ADDR_VAR 0 9
70150: PUSH
70151: LD_VAR 0 41
70155: PUSH
70156: LD_VAR 0 42
70160: PUSH
70161: LD_VAR 0 43
70165: PUSH
70166: LD_VAR 0 44
70170: PUSH
70171: LD_VAR 0 45
70175: PUSH
70176: LD_VAR 0 46
70180: PUSH
70181: EMPTY
70182: LIST
70183: LIST
70184: LIST
70185: LIST
70186: LIST
70187: LIST
70188: PUSH
70189: LD_VAR 0 4
70193: PUSH
70194: LD_INT 1
70196: PLUS
70197: ARRAY
70198: ST_TO_ADDR
70199: GO 70454
70201: LD_INT 36
70203: DOUBLE
70204: EQUAL
70205: IFTRUE 70209
70207: GO 70265
70209: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70210: LD_ADDR_VAR 0 9
70214: PUSH
70215: LD_VAR 0 47
70219: PUSH
70220: LD_VAR 0 48
70224: PUSH
70225: LD_VAR 0 49
70229: PUSH
70230: LD_VAR 0 50
70234: PUSH
70235: LD_VAR 0 51
70239: PUSH
70240: LD_VAR 0 52
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: LIST
70252: PUSH
70253: LD_VAR 0 4
70257: PUSH
70258: LD_INT 1
70260: PLUS
70261: ARRAY
70262: ST_TO_ADDR
70263: GO 70454
70265: LD_INT 4
70267: DOUBLE
70268: EQUAL
70269: IFTRUE 70291
70271: LD_INT 5
70273: DOUBLE
70274: EQUAL
70275: IFTRUE 70291
70277: LD_INT 34
70279: DOUBLE
70280: EQUAL
70281: IFTRUE 70291
70283: LD_INT 37
70285: DOUBLE
70286: EQUAL
70287: IFTRUE 70291
70289: GO 70347
70291: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70292: LD_ADDR_VAR 0 9
70296: PUSH
70297: LD_VAR 0 53
70301: PUSH
70302: LD_VAR 0 54
70306: PUSH
70307: LD_VAR 0 55
70311: PUSH
70312: LD_VAR 0 56
70316: PUSH
70317: LD_VAR 0 57
70321: PUSH
70322: LD_VAR 0 58
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: LIST
70331: LIST
70332: LIST
70333: LIST
70334: PUSH
70335: LD_VAR 0 4
70339: PUSH
70340: LD_INT 1
70342: PLUS
70343: ARRAY
70344: ST_TO_ADDR
70345: GO 70454
70347: LD_INT 31
70349: DOUBLE
70350: EQUAL
70351: IFTRUE 70397
70353: LD_INT 32
70355: DOUBLE
70356: EQUAL
70357: IFTRUE 70397
70359: LD_INT 33
70361: DOUBLE
70362: EQUAL
70363: IFTRUE 70397
70365: LD_INT 27
70367: DOUBLE
70368: EQUAL
70369: IFTRUE 70397
70371: LD_INT 26
70373: DOUBLE
70374: EQUAL
70375: IFTRUE 70397
70377: LD_INT 28
70379: DOUBLE
70380: EQUAL
70381: IFTRUE 70397
70383: LD_INT 29
70385: DOUBLE
70386: EQUAL
70387: IFTRUE 70397
70389: LD_INT 30
70391: DOUBLE
70392: EQUAL
70393: IFTRUE 70397
70395: GO 70453
70397: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70398: LD_ADDR_VAR 0 9
70402: PUSH
70403: LD_VAR 0 59
70407: PUSH
70408: LD_VAR 0 60
70412: PUSH
70413: LD_VAR 0 61
70417: PUSH
70418: LD_VAR 0 62
70422: PUSH
70423: LD_VAR 0 63
70427: PUSH
70428: LD_VAR 0 64
70432: PUSH
70433: EMPTY
70434: LIST
70435: LIST
70436: LIST
70437: LIST
70438: LIST
70439: LIST
70440: PUSH
70441: LD_VAR 0 4
70445: PUSH
70446: LD_INT 1
70448: PLUS
70449: ARRAY
70450: ST_TO_ADDR
70451: GO 70454
70453: POP
// temp_list2 = [ ] ;
70454: LD_ADDR_VAR 0 10
70458: PUSH
70459: EMPTY
70460: ST_TO_ADDR
// for i in temp_list do
70461: LD_ADDR_VAR 0 8
70465: PUSH
70466: LD_VAR 0 9
70470: PUSH
70471: FOR_IN
70472: IFFALSE 70524
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70474: LD_ADDR_VAR 0 10
70478: PUSH
70479: LD_VAR 0 10
70483: PUSH
70484: LD_VAR 0 8
70488: PUSH
70489: LD_INT 1
70491: ARRAY
70492: PUSH
70493: LD_VAR 0 2
70497: PLUS
70498: PUSH
70499: LD_VAR 0 8
70503: PUSH
70504: LD_INT 2
70506: ARRAY
70507: PUSH
70508: LD_VAR 0 3
70512: PLUS
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: PUSH
70518: EMPTY
70519: LIST
70520: ADD
70521: ST_TO_ADDR
70522: GO 70471
70524: POP
70525: POP
// result = temp_list2 ;
70526: LD_ADDR_VAR 0 7
70530: PUSH
70531: LD_VAR 0 10
70535: ST_TO_ADDR
// end ;
70536: LD_VAR 0 7
70540: RET
// export function EnemyInRange ( unit , dist ) ; begin
70541: LD_INT 0
70543: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70544: LD_ADDR_VAR 0 3
70548: PUSH
70549: LD_VAR 0 1
70553: PPUSH
70554: CALL_OW 255
70558: PPUSH
70559: LD_VAR 0 1
70563: PPUSH
70564: CALL_OW 250
70568: PPUSH
70569: LD_VAR 0 1
70573: PPUSH
70574: CALL_OW 251
70578: PPUSH
70579: LD_VAR 0 2
70583: PPUSH
70584: CALL 43943 0 4
70588: PUSH
70589: LD_INT 4
70591: ARRAY
70592: ST_TO_ADDR
// end ;
70593: LD_VAR 0 3
70597: RET
// export function PlayerSeeMe ( unit ) ; begin
70598: LD_INT 0
70600: PPUSH
// result := See ( your_side , unit ) ;
70601: LD_ADDR_VAR 0 2
70605: PUSH
70606: LD_OWVAR 2
70610: PPUSH
70611: LD_VAR 0 1
70615: PPUSH
70616: CALL_OW 292
70620: ST_TO_ADDR
// end ;
70621: LD_VAR 0 2
70625: RET
// export function ReverseDir ( unit ) ; begin
70626: LD_INT 0
70628: PPUSH
// if not unit then
70629: LD_VAR 0 1
70633: NOT
70634: IFFALSE 70638
// exit ;
70636: GO 70661
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70638: LD_ADDR_VAR 0 2
70642: PUSH
70643: LD_VAR 0 1
70647: PPUSH
70648: CALL_OW 254
70652: PUSH
70653: LD_INT 3
70655: PLUS
70656: PUSH
70657: LD_INT 6
70659: MOD
70660: ST_TO_ADDR
// end ;
70661: LD_VAR 0 2
70665: RET
// export function ReverseArray ( array ) ; var i ; begin
70666: LD_INT 0
70668: PPUSH
70669: PPUSH
// if not array then
70670: LD_VAR 0 1
70674: NOT
70675: IFFALSE 70679
// exit ;
70677: GO 70734
// result := [ ] ;
70679: LD_ADDR_VAR 0 2
70683: PUSH
70684: EMPTY
70685: ST_TO_ADDR
// for i := array downto 1 do
70686: LD_ADDR_VAR 0 3
70690: PUSH
70691: DOUBLE
70692: LD_VAR 0 1
70696: INC
70697: ST_TO_ADDR
70698: LD_INT 1
70700: PUSH
70701: FOR_DOWNTO
70702: IFFALSE 70732
// result := Join ( result , array [ i ] ) ;
70704: LD_ADDR_VAR 0 2
70708: PUSH
70709: LD_VAR 0 2
70713: PPUSH
70714: LD_VAR 0 1
70718: PUSH
70719: LD_VAR 0 3
70723: ARRAY
70724: PPUSH
70725: CALL 75378 0 2
70729: ST_TO_ADDR
70730: GO 70701
70732: POP
70733: POP
// end ;
70734: LD_VAR 0 2
70738: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
70739: LD_INT 0
70741: PPUSH
70742: PPUSH
70743: PPUSH
70744: PPUSH
70745: PPUSH
70746: PPUSH
// if not unit or not hexes then
70747: LD_VAR 0 1
70751: NOT
70752: PUSH
70753: LD_VAR 0 2
70757: NOT
70758: OR
70759: IFFALSE 70763
// exit ;
70761: GO 70886
// dist := 9999 ;
70763: LD_ADDR_VAR 0 5
70767: PUSH
70768: LD_INT 9999
70770: ST_TO_ADDR
// for i = 1 to hexes do
70771: LD_ADDR_VAR 0 4
70775: PUSH
70776: DOUBLE
70777: LD_INT 1
70779: DEC
70780: ST_TO_ADDR
70781: LD_VAR 0 2
70785: PUSH
70786: FOR_TO
70787: IFFALSE 70874
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70789: LD_ADDR_VAR 0 6
70793: PUSH
70794: LD_VAR 0 1
70798: PPUSH
70799: LD_VAR 0 2
70803: PUSH
70804: LD_VAR 0 4
70808: ARRAY
70809: PUSH
70810: LD_INT 1
70812: ARRAY
70813: PPUSH
70814: LD_VAR 0 2
70818: PUSH
70819: LD_VAR 0 4
70823: ARRAY
70824: PUSH
70825: LD_INT 2
70827: ARRAY
70828: PPUSH
70829: CALL_OW 297
70833: ST_TO_ADDR
// if tdist < dist then
70834: LD_VAR 0 6
70838: PUSH
70839: LD_VAR 0 5
70843: LESS
70844: IFFALSE 70872
// begin hex := hexes [ i ] ;
70846: LD_ADDR_VAR 0 8
70850: PUSH
70851: LD_VAR 0 2
70855: PUSH
70856: LD_VAR 0 4
70860: ARRAY
70861: ST_TO_ADDR
// dist := tdist ;
70862: LD_ADDR_VAR 0 5
70866: PUSH
70867: LD_VAR 0 6
70871: ST_TO_ADDR
// end ; end ;
70872: GO 70786
70874: POP
70875: POP
// result := hex ;
70876: LD_ADDR_VAR 0 3
70880: PUSH
70881: LD_VAR 0 8
70885: ST_TO_ADDR
// end ;
70886: LD_VAR 0 3
70890: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70891: LD_INT 0
70893: PPUSH
70894: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70895: LD_VAR 0 1
70899: NOT
70900: PUSH
70901: LD_VAR 0 1
70905: PUSH
70906: LD_INT 21
70908: PUSH
70909: LD_INT 2
70911: PUSH
70912: EMPTY
70913: LIST
70914: LIST
70915: PUSH
70916: LD_INT 23
70918: PUSH
70919: LD_INT 2
70921: PUSH
70922: EMPTY
70923: LIST
70924: LIST
70925: PUSH
70926: EMPTY
70927: LIST
70928: LIST
70929: PPUSH
70930: CALL_OW 69
70934: IN
70935: NOT
70936: OR
70937: IFFALSE 70941
// exit ;
70939: GO 70988
// for i = 1 to 3 do
70941: LD_ADDR_VAR 0 3
70945: PUSH
70946: DOUBLE
70947: LD_INT 1
70949: DEC
70950: ST_TO_ADDR
70951: LD_INT 3
70953: PUSH
70954: FOR_TO
70955: IFFALSE 70986
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70957: LD_VAR 0 1
70961: PPUSH
70962: CALL_OW 250
70966: PPUSH
70967: LD_VAR 0 1
70971: PPUSH
70972: CALL_OW 251
70976: PPUSH
70977: LD_INT 1
70979: PPUSH
70980: CALL_OW 453
70984: GO 70954
70986: POP
70987: POP
// end ;
70988: LD_VAR 0 2
70992: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70993: LD_INT 0
70995: PPUSH
70996: PPUSH
70997: PPUSH
70998: PPUSH
70999: PPUSH
71000: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71001: LD_VAR 0 1
71005: NOT
71006: PUSH
71007: LD_VAR 0 2
71011: NOT
71012: OR
71013: PUSH
71014: LD_VAR 0 1
71018: PPUSH
71019: CALL_OW 314
71023: OR
71024: IFFALSE 71028
// exit ;
71026: GO 71495
// if GetLives ( i ) < 250 then
71028: LD_VAR 0 4
71032: PPUSH
71033: CALL_OW 256
71037: PUSH
71038: LD_INT 250
71040: LESS
71041: IFFALSE 71054
// begin ComAutodestruct ( i ) ;
71043: LD_VAR 0 4
71047: PPUSH
71048: CALL 70891 0 1
// exit ;
71052: GO 71495
// end ; x := GetX ( enemy_unit ) ;
71054: LD_ADDR_VAR 0 7
71058: PUSH
71059: LD_VAR 0 2
71063: PPUSH
71064: CALL_OW 250
71068: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71069: LD_ADDR_VAR 0 8
71073: PUSH
71074: LD_VAR 0 2
71078: PPUSH
71079: CALL_OW 251
71083: ST_TO_ADDR
// if not x or not y then
71084: LD_VAR 0 7
71088: NOT
71089: PUSH
71090: LD_VAR 0 8
71094: NOT
71095: OR
71096: IFFALSE 71100
// exit ;
71098: GO 71495
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71100: LD_ADDR_VAR 0 6
71104: PUSH
71105: LD_VAR 0 7
71109: PPUSH
71110: LD_INT 0
71112: PPUSH
71113: LD_INT 4
71115: PPUSH
71116: CALL_OW 272
71120: PUSH
71121: LD_VAR 0 8
71125: PPUSH
71126: LD_INT 0
71128: PPUSH
71129: LD_INT 4
71131: PPUSH
71132: CALL_OW 273
71136: PUSH
71137: EMPTY
71138: LIST
71139: LIST
71140: PUSH
71141: LD_VAR 0 7
71145: PPUSH
71146: LD_INT 1
71148: PPUSH
71149: LD_INT 4
71151: PPUSH
71152: CALL_OW 272
71156: PUSH
71157: LD_VAR 0 8
71161: PPUSH
71162: LD_INT 1
71164: PPUSH
71165: LD_INT 4
71167: PPUSH
71168: CALL_OW 273
71172: PUSH
71173: EMPTY
71174: LIST
71175: LIST
71176: PUSH
71177: LD_VAR 0 7
71181: PPUSH
71182: LD_INT 2
71184: PPUSH
71185: LD_INT 4
71187: PPUSH
71188: CALL_OW 272
71192: PUSH
71193: LD_VAR 0 8
71197: PPUSH
71198: LD_INT 2
71200: PPUSH
71201: LD_INT 4
71203: PPUSH
71204: CALL_OW 273
71208: PUSH
71209: EMPTY
71210: LIST
71211: LIST
71212: PUSH
71213: LD_VAR 0 7
71217: PPUSH
71218: LD_INT 3
71220: PPUSH
71221: LD_INT 4
71223: PPUSH
71224: CALL_OW 272
71228: PUSH
71229: LD_VAR 0 8
71233: PPUSH
71234: LD_INT 3
71236: PPUSH
71237: LD_INT 4
71239: PPUSH
71240: CALL_OW 273
71244: PUSH
71245: EMPTY
71246: LIST
71247: LIST
71248: PUSH
71249: LD_VAR 0 7
71253: PPUSH
71254: LD_INT 4
71256: PPUSH
71257: LD_INT 4
71259: PPUSH
71260: CALL_OW 272
71264: PUSH
71265: LD_VAR 0 8
71269: PPUSH
71270: LD_INT 4
71272: PPUSH
71273: LD_INT 4
71275: PPUSH
71276: CALL_OW 273
71280: PUSH
71281: EMPTY
71282: LIST
71283: LIST
71284: PUSH
71285: LD_VAR 0 7
71289: PPUSH
71290: LD_INT 5
71292: PPUSH
71293: LD_INT 4
71295: PPUSH
71296: CALL_OW 272
71300: PUSH
71301: LD_VAR 0 8
71305: PPUSH
71306: LD_INT 5
71308: PPUSH
71309: LD_INT 4
71311: PPUSH
71312: CALL_OW 273
71316: PUSH
71317: EMPTY
71318: LIST
71319: LIST
71320: PUSH
71321: EMPTY
71322: LIST
71323: LIST
71324: LIST
71325: LIST
71326: LIST
71327: LIST
71328: ST_TO_ADDR
// for i = tmp downto 1 do
71329: LD_ADDR_VAR 0 4
71333: PUSH
71334: DOUBLE
71335: LD_VAR 0 6
71339: INC
71340: ST_TO_ADDR
71341: LD_INT 1
71343: PUSH
71344: FOR_DOWNTO
71345: IFFALSE 71446
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71347: LD_VAR 0 6
71351: PUSH
71352: LD_VAR 0 4
71356: ARRAY
71357: PUSH
71358: LD_INT 1
71360: ARRAY
71361: PPUSH
71362: LD_VAR 0 6
71366: PUSH
71367: LD_VAR 0 4
71371: ARRAY
71372: PUSH
71373: LD_INT 2
71375: ARRAY
71376: PPUSH
71377: CALL_OW 488
71381: NOT
71382: PUSH
71383: LD_VAR 0 6
71387: PUSH
71388: LD_VAR 0 4
71392: ARRAY
71393: PUSH
71394: LD_INT 1
71396: ARRAY
71397: PPUSH
71398: LD_VAR 0 6
71402: PUSH
71403: LD_VAR 0 4
71407: ARRAY
71408: PUSH
71409: LD_INT 2
71411: ARRAY
71412: PPUSH
71413: CALL_OW 428
71417: PUSH
71418: LD_INT 0
71420: NONEQUAL
71421: OR
71422: IFFALSE 71444
// tmp := Delete ( tmp , i ) ;
71424: LD_ADDR_VAR 0 6
71428: PUSH
71429: LD_VAR 0 6
71433: PPUSH
71434: LD_VAR 0 4
71438: PPUSH
71439: CALL_OW 3
71443: ST_TO_ADDR
71444: GO 71344
71446: POP
71447: POP
// j := GetClosestHex ( unit , tmp ) ;
71448: LD_ADDR_VAR 0 5
71452: PUSH
71453: LD_VAR 0 1
71457: PPUSH
71458: LD_VAR 0 6
71462: PPUSH
71463: CALL 70739 0 2
71467: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71468: LD_VAR 0 1
71472: PPUSH
71473: LD_VAR 0 5
71477: PUSH
71478: LD_INT 1
71480: ARRAY
71481: PPUSH
71482: LD_VAR 0 5
71486: PUSH
71487: LD_INT 2
71489: ARRAY
71490: PPUSH
71491: CALL_OW 111
// end ;
71495: LD_VAR 0 3
71499: RET
// export function PrepareApemanSoldier ( ) ; begin
71500: LD_INT 0
71502: PPUSH
// uc_nation := 0 ;
71503: LD_ADDR_OWVAR 21
71507: PUSH
71508: LD_INT 0
71510: ST_TO_ADDR
// hc_sex := sex_male ;
71511: LD_ADDR_OWVAR 27
71515: PUSH
71516: LD_INT 1
71518: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
71519: LD_ADDR_OWVAR 28
71523: PUSH
71524: LD_INT 15
71526: ST_TO_ADDR
// hc_gallery :=  ;
71527: LD_ADDR_OWVAR 33
71531: PUSH
71532: LD_STRING 
71534: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71535: LD_ADDR_OWVAR 31
71539: PUSH
71540: LD_INT 0
71542: PPUSH
71543: LD_INT 3
71545: PPUSH
71546: CALL_OW 12
71550: PUSH
71551: LD_INT 0
71553: PPUSH
71554: LD_INT 3
71556: PPUSH
71557: CALL_OW 12
71561: PUSH
71562: LD_INT 0
71564: PUSH
71565: LD_INT 0
71567: PUSH
71568: EMPTY
71569: LIST
71570: LIST
71571: LIST
71572: LIST
71573: ST_TO_ADDR
// end ;
71574: LD_VAR 0 1
71578: RET
// export function PrepareApemanEngineer ( ) ; begin
71579: LD_INT 0
71581: PPUSH
// uc_nation := 0 ;
71582: LD_ADDR_OWVAR 21
71586: PUSH
71587: LD_INT 0
71589: ST_TO_ADDR
// hc_sex := sex_male ;
71590: LD_ADDR_OWVAR 27
71594: PUSH
71595: LD_INT 1
71597: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
71598: LD_ADDR_OWVAR 28
71602: PUSH
71603: LD_INT 16
71605: ST_TO_ADDR
// hc_gallery :=  ;
71606: LD_ADDR_OWVAR 33
71610: PUSH
71611: LD_STRING 
71613: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71614: LD_ADDR_OWVAR 31
71618: PUSH
71619: LD_INT 0
71621: PPUSH
71622: LD_INT 3
71624: PPUSH
71625: CALL_OW 12
71629: PUSH
71630: LD_INT 0
71632: PPUSH
71633: LD_INT 3
71635: PPUSH
71636: CALL_OW 12
71640: PUSH
71641: LD_INT 0
71643: PUSH
71644: LD_INT 0
71646: PUSH
71647: EMPTY
71648: LIST
71649: LIST
71650: LIST
71651: LIST
71652: ST_TO_ADDR
// end ;
71653: LD_VAR 0 1
71657: RET
// export function PrepareApeman ( agressivity ) ; begin
71658: LD_INT 0
71660: PPUSH
// uc_side := 0 ;
71661: LD_ADDR_OWVAR 20
71665: PUSH
71666: LD_INT 0
71668: ST_TO_ADDR
// uc_nation := 0 ;
71669: LD_ADDR_OWVAR 21
71673: PUSH
71674: LD_INT 0
71676: ST_TO_ADDR
// hc_sex := sex_male ;
71677: LD_ADDR_OWVAR 27
71681: PUSH
71682: LD_INT 1
71684: ST_TO_ADDR
// hc_class := class_apeman ;
71685: LD_ADDR_OWVAR 28
71689: PUSH
71690: LD_INT 12
71692: ST_TO_ADDR
// hc_gallery :=  ;
71693: LD_ADDR_OWVAR 33
71697: PUSH
71698: LD_STRING 
71700: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71701: LD_ADDR_OWVAR 35
71705: PUSH
71706: LD_VAR 0 1
71710: NEG
71711: PPUSH
71712: LD_VAR 0 1
71716: PPUSH
71717: CALL_OW 12
71721: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71722: LD_ADDR_OWVAR 31
71726: PUSH
71727: LD_INT 0
71729: PPUSH
71730: LD_INT 3
71732: PPUSH
71733: CALL_OW 12
71737: PUSH
71738: LD_INT 0
71740: PPUSH
71741: LD_INT 3
71743: PPUSH
71744: CALL_OW 12
71748: PUSH
71749: LD_INT 0
71751: PUSH
71752: LD_INT 0
71754: PUSH
71755: EMPTY
71756: LIST
71757: LIST
71758: LIST
71759: LIST
71760: ST_TO_ADDR
// end ;
71761: LD_VAR 0 2
71765: RET
// export function PrepareTiger ( agressivity ) ; begin
71766: LD_INT 0
71768: PPUSH
// uc_side := 0 ;
71769: LD_ADDR_OWVAR 20
71773: PUSH
71774: LD_INT 0
71776: ST_TO_ADDR
// uc_nation := 0 ;
71777: LD_ADDR_OWVAR 21
71781: PUSH
71782: LD_INT 0
71784: ST_TO_ADDR
// hc_class := class_tiger ;
71785: LD_ADDR_OWVAR 28
71789: PUSH
71790: LD_INT 14
71792: ST_TO_ADDR
// hc_gallery :=  ;
71793: LD_ADDR_OWVAR 33
71797: PUSH
71798: LD_STRING 
71800: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71801: LD_ADDR_OWVAR 35
71805: PUSH
71806: LD_VAR 0 1
71810: NEG
71811: PPUSH
71812: LD_VAR 0 1
71816: PPUSH
71817: CALL_OW 12
71821: ST_TO_ADDR
// end ;
71822: LD_VAR 0 2
71826: RET
// export function PrepareEnchidna ( ) ; begin
71827: LD_INT 0
71829: PPUSH
// uc_side := 0 ;
71830: LD_ADDR_OWVAR 20
71834: PUSH
71835: LD_INT 0
71837: ST_TO_ADDR
// uc_nation := 0 ;
71838: LD_ADDR_OWVAR 21
71842: PUSH
71843: LD_INT 0
71845: ST_TO_ADDR
// hc_class := class_baggie ;
71846: LD_ADDR_OWVAR 28
71850: PUSH
71851: LD_INT 13
71853: ST_TO_ADDR
// hc_gallery :=  ;
71854: LD_ADDR_OWVAR 33
71858: PUSH
71859: LD_STRING 
71861: ST_TO_ADDR
// end ;
71862: LD_VAR 0 1
71866: RET
// export function PrepareFrog ( ) ; begin
71867: LD_INT 0
71869: PPUSH
// uc_side := 0 ;
71870: LD_ADDR_OWVAR 20
71874: PUSH
71875: LD_INT 0
71877: ST_TO_ADDR
// uc_nation := 0 ;
71878: LD_ADDR_OWVAR 21
71882: PUSH
71883: LD_INT 0
71885: ST_TO_ADDR
// hc_class := class_frog ;
71886: LD_ADDR_OWVAR 28
71890: PUSH
71891: LD_INT 19
71893: ST_TO_ADDR
// hc_gallery :=  ;
71894: LD_ADDR_OWVAR 33
71898: PUSH
71899: LD_STRING 
71901: ST_TO_ADDR
// end ;
71902: LD_VAR 0 1
71906: RET
// export function PrepareFish ( ) ; begin
71907: LD_INT 0
71909: PPUSH
// uc_side := 0 ;
71910: LD_ADDR_OWVAR 20
71914: PUSH
71915: LD_INT 0
71917: ST_TO_ADDR
// uc_nation := 0 ;
71918: LD_ADDR_OWVAR 21
71922: PUSH
71923: LD_INT 0
71925: ST_TO_ADDR
// hc_class := class_fish ;
71926: LD_ADDR_OWVAR 28
71930: PUSH
71931: LD_INT 20
71933: ST_TO_ADDR
// hc_gallery :=  ;
71934: LD_ADDR_OWVAR 33
71938: PUSH
71939: LD_STRING 
71941: ST_TO_ADDR
// end ;
71942: LD_VAR 0 1
71946: RET
// export function PrepareBird ( ) ; begin
71947: LD_INT 0
71949: PPUSH
// uc_side := 0 ;
71950: LD_ADDR_OWVAR 20
71954: PUSH
71955: LD_INT 0
71957: ST_TO_ADDR
// uc_nation := 0 ;
71958: LD_ADDR_OWVAR 21
71962: PUSH
71963: LD_INT 0
71965: ST_TO_ADDR
// hc_class := class_phororhacos ;
71966: LD_ADDR_OWVAR 28
71970: PUSH
71971: LD_INT 18
71973: ST_TO_ADDR
// hc_gallery :=  ;
71974: LD_ADDR_OWVAR 33
71978: PUSH
71979: LD_STRING 
71981: ST_TO_ADDR
// end ;
71982: LD_VAR 0 1
71986: RET
// export function PrepareHorse ( ) ; begin
71987: LD_INT 0
71989: PPUSH
// uc_side := 0 ;
71990: LD_ADDR_OWVAR 20
71994: PUSH
71995: LD_INT 0
71997: ST_TO_ADDR
// uc_nation := 0 ;
71998: LD_ADDR_OWVAR 21
72002: PUSH
72003: LD_INT 0
72005: ST_TO_ADDR
// hc_class := class_horse ;
72006: LD_ADDR_OWVAR 28
72010: PUSH
72011: LD_INT 21
72013: ST_TO_ADDR
// hc_gallery :=  ;
72014: LD_ADDR_OWVAR 33
72018: PUSH
72019: LD_STRING 
72021: ST_TO_ADDR
// end ;
72022: LD_VAR 0 1
72026: RET
// export function PrepareMastodont ( ) ; begin
72027: LD_INT 0
72029: PPUSH
// uc_side := 0 ;
72030: LD_ADDR_OWVAR 20
72034: PUSH
72035: LD_INT 0
72037: ST_TO_ADDR
// uc_nation := 0 ;
72038: LD_ADDR_OWVAR 21
72042: PUSH
72043: LD_INT 0
72045: ST_TO_ADDR
// vc_chassis := class_mastodont ;
72046: LD_ADDR_OWVAR 37
72050: PUSH
72051: LD_INT 31
72053: ST_TO_ADDR
// vc_control := control_rider ;
72054: LD_ADDR_OWVAR 38
72058: PUSH
72059: LD_INT 4
72061: ST_TO_ADDR
// end ;
72062: LD_VAR 0 1
72066: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72067: LD_INT 0
72069: PPUSH
72070: PPUSH
72071: PPUSH
// uc_side = 0 ;
72072: LD_ADDR_OWVAR 20
72076: PUSH
72077: LD_INT 0
72079: ST_TO_ADDR
// uc_nation = 0 ;
72080: LD_ADDR_OWVAR 21
72084: PUSH
72085: LD_INT 0
72087: ST_TO_ADDR
// InitHc_All ( ) ;
72088: CALL_OW 584
// InitVc ;
72092: CALL_OW 20
// if mastodonts then
72096: LD_VAR 0 6
72100: IFFALSE 72167
// for i = 1 to mastodonts do
72102: LD_ADDR_VAR 0 11
72106: PUSH
72107: DOUBLE
72108: LD_INT 1
72110: DEC
72111: ST_TO_ADDR
72112: LD_VAR 0 6
72116: PUSH
72117: FOR_TO
72118: IFFALSE 72165
// begin vc_chassis := 31 ;
72120: LD_ADDR_OWVAR 37
72124: PUSH
72125: LD_INT 31
72127: ST_TO_ADDR
// vc_control := control_rider ;
72128: LD_ADDR_OWVAR 38
72132: PUSH
72133: LD_INT 4
72135: ST_TO_ADDR
// animal := CreateVehicle ;
72136: LD_ADDR_VAR 0 12
72140: PUSH
72141: CALL_OW 45
72145: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72146: LD_VAR 0 12
72150: PPUSH
72151: LD_VAR 0 8
72155: PPUSH
72156: LD_INT 0
72158: PPUSH
72159: CALL 74295 0 3
// end ;
72163: GO 72117
72165: POP
72166: POP
// if horses then
72167: LD_VAR 0 5
72171: IFFALSE 72238
// for i = 1 to horses do
72173: LD_ADDR_VAR 0 11
72177: PUSH
72178: DOUBLE
72179: LD_INT 1
72181: DEC
72182: ST_TO_ADDR
72183: LD_VAR 0 5
72187: PUSH
72188: FOR_TO
72189: IFFALSE 72236
// begin hc_class := 21 ;
72191: LD_ADDR_OWVAR 28
72195: PUSH
72196: LD_INT 21
72198: ST_TO_ADDR
// hc_gallery :=  ;
72199: LD_ADDR_OWVAR 33
72203: PUSH
72204: LD_STRING 
72206: ST_TO_ADDR
// animal := CreateHuman ;
72207: LD_ADDR_VAR 0 12
72211: PUSH
72212: CALL_OW 44
72216: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72217: LD_VAR 0 12
72221: PPUSH
72222: LD_VAR 0 8
72226: PPUSH
72227: LD_INT 0
72229: PPUSH
72230: CALL 74295 0 3
// end ;
72234: GO 72188
72236: POP
72237: POP
// if birds then
72238: LD_VAR 0 1
72242: IFFALSE 72309
// for i = 1 to birds do
72244: LD_ADDR_VAR 0 11
72248: PUSH
72249: DOUBLE
72250: LD_INT 1
72252: DEC
72253: ST_TO_ADDR
72254: LD_VAR 0 1
72258: PUSH
72259: FOR_TO
72260: IFFALSE 72307
// begin hc_class = 18 ;
72262: LD_ADDR_OWVAR 28
72266: PUSH
72267: LD_INT 18
72269: ST_TO_ADDR
// hc_gallery =  ;
72270: LD_ADDR_OWVAR 33
72274: PUSH
72275: LD_STRING 
72277: ST_TO_ADDR
// animal := CreateHuman ;
72278: LD_ADDR_VAR 0 12
72282: PUSH
72283: CALL_OW 44
72287: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72288: LD_VAR 0 12
72292: PPUSH
72293: LD_VAR 0 8
72297: PPUSH
72298: LD_INT 0
72300: PPUSH
72301: CALL 74295 0 3
// end ;
72305: GO 72259
72307: POP
72308: POP
// if tigers then
72309: LD_VAR 0 2
72313: IFFALSE 72397
// for i = 1 to tigers do
72315: LD_ADDR_VAR 0 11
72319: PUSH
72320: DOUBLE
72321: LD_INT 1
72323: DEC
72324: ST_TO_ADDR
72325: LD_VAR 0 2
72329: PUSH
72330: FOR_TO
72331: IFFALSE 72395
// begin hc_class = class_tiger ;
72333: LD_ADDR_OWVAR 28
72337: PUSH
72338: LD_INT 14
72340: ST_TO_ADDR
// hc_gallery =  ;
72341: LD_ADDR_OWVAR 33
72345: PUSH
72346: LD_STRING 
72348: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72349: LD_ADDR_OWVAR 35
72353: PUSH
72354: LD_INT 7
72356: NEG
72357: PPUSH
72358: LD_INT 7
72360: PPUSH
72361: CALL_OW 12
72365: ST_TO_ADDR
// animal := CreateHuman ;
72366: LD_ADDR_VAR 0 12
72370: PUSH
72371: CALL_OW 44
72375: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72376: LD_VAR 0 12
72380: PPUSH
72381: LD_VAR 0 8
72385: PPUSH
72386: LD_INT 0
72388: PPUSH
72389: CALL 74295 0 3
// end ;
72393: GO 72330
72395: POP
72396: POP
// if apemans then
72397: LD_VAR 0 3
72401: IFFALSE 72524
// for i = 1 to apemans do
72403: LD_ADDR_VAR 0 11
72407: PUSH
72408: DOUBLE
72409: LD_INT 1
72411: DEC
72412: ST_TO_ADDR
72413: LD_VAR 0 3
72417: PUSH
72418: FOR_TO
72419: IFFALSE 72522
// begin hc_class = class_apeman ;
72421: LD_ADDR_OWVAR 28
72425: PUSH
72426: LD_INT 12
72428: ST_TO_ADDR
// hc_gallery =  ;
72429: LD_ADDR_OWVAR 33
72433: PUSH
72434: LD_STRING 
72436: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72437: LD_ADDR_OWVAR 35
72441: PUSH
72442: LD_INT 2
72444: NEG
72445: PPUSH
72446: LD_INT 2
72448: PPUSH
72449: CALL_OW 12
72453: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72454: LD_ADDR_OWVAR 31
72458: PUSH
72459: LD_INT 1
72461: PPUSH
72462: LD_INT 3
72464: PPUSH
72465: CALL_OW 12
72469: PUSH
72470: LD_INT 1
72472: PPUSH
72473: LD_INT 3
72475: PPUSH
72476: CALL_OW 12
72480: PUSH
72481: LD_INT 0
72483: PUSH
72484: LD_INT 0
72486: PUSH
72487: EMPTY
72488: LIST
72489: LIST
72490: LIST
72491: LIST
72492: ST_TO_ADDR
// animal := CreateHuman ;
72493: LD_ADDR_VAR 0 12
72497: PUSH
72498: CALL_OW 44
72502: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72503: LD_VAR 0 12
72507: PPUSH
72508: LD_VAR 0 8
72512: PPUSH
72513: LD_INT 0
72515: PPUSH
72516: CALL 74295 0 3
// end ;
72520: GO 72418
72522: POP
72523: POP
// if enchidnas then
72524: LD_VAR 0 4
72528: IFFALSE 72595
// for i = 1 to enchidnas do
72530: LD_ADDR_VAR 0 11
72534: PUSH
72535: DOUBLE
72536: LD_INT 1
72538: DEC
72539: ST_TO_ADDR
72540: LD_VAR 0 4
72544: PUSH
72545: FOR_TO
72546: IFFALSE 72593
// begin hc_class = 13 ;
72548: LD_ADDR_OWVAR 28
72552: PUSH
72553: LD_INT 13
72555: ST_TO_ADDR
// hc_gallery =  ;
72556: LD_ADDR_OWVAR 33
72560: PUSH
72561: LD_STRING 
72563: ST_TO_ADDR
// animal := CreateHuman ;
72564: LD_ADDR_VAR 0 12
72568: PUSH
72569: CALL_OW 44
72573: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72574: LD_VAR 0 12
72578: PPUSH
72579: LD_VAR 0 8
72583: PPUSH
72584: LD_INT 0
72586: PPUSH
72587: CALL 74295 0 3
// end ;
72591: GO 72545
72593: POP
72594: POP
// if fishes then
72595: LD_VAR 0 7
72599: IFFALSE 72666
// for i = 1 to fishes do
72601: LD_ADDR_VAR 0 11
72605: PUSH
72606: DOUBLE
72607: LD_INT 1
72609: DEC
72610: ST_TO_ADDR
72611: LD_VAR 0 7
72615: PUSH
72616: FOR_TO
72617: IFFALSE 72664
// begin hc_class = 20 ;
72619: LD_ADDR_OWVAR 28
72623: PUSH
72624: LD_INT 20
72626: ST_TO_ADDR
// hc_gallery =  ;
72627: LD_ADDR_OWVAR 33
72631: PUSH
72632: LD_STRING 
72634: ST_TO_ADDR
// animal := CreateHuman ;
72635: LD_ADDR_VAR 0 12
72639: PUSH
72640: CALL_OW 44
72644: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72645: LD_VAR 0 12
72649: PPUSH
72650: LD_VAR 0 9
72654: PPUSH
72655: LD_INT 0
72657: PPUSH
72658: CALL 74295 0 3
// end ;
72662: GO 72616
72664: POP
72665: POP
// end ;
72666: LD_VAR 0 10
72670: RET
// export function WantHeal ( sci , unit ) ; begin
72671: LD_INT 0
72673: PPUSH
// if GetTaskList ( sci ) > 0 then
72674: LD_VAR 0 1
72678: PPUSH
72679: CALL_OW 437
72683: PUSH
72684: LD_INT 0
72686: GREATER
72687: IFFALSE 72757
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72689: LD_VAR 0 1
72693: PPUSH
72694: CALL_OW 437
72698: PUSH
72699: LD_INT 1
72701: ARRAY
72702: PUSH
72703: LD_INT 1
72705: ARRAY
72706: PUSH
72707: LD_STRING l
72709: EQUAL
72710: PUSH
72711: LD_VAR 0 1
72715: PPUSH
72716: CALL_OW 437
72720: PUSH
72721: LD_INT 1
72723: ARRAY
72724: PUSH
72725: LD_INT 4
72727: ARRAY
72728: PUSH
72729: LD_VAR 0 2
72733: EQUAL
72734: AND
72735: IFFALSE 72747
// result := true else
72737: LD_ADDR_VAR 0 3
72741: PUSH
72742: LD_INT 1
72744: ST_TO_ADDR
72745: GO 72755
// result := false ;
72747: LD_ADDR_VAR 0 3
72751: PUSH
72752: LD_INT 0
72754: ST_TO_ADDR
// end else
72755: GO 72765
// result := false ;
72757: LD_ADDR_VAR 0 3
72761: PUSH
72762: LD_INT 0
72764: ST_TO_ADDR
// end ;
72765: LD_VAR 0 3
72769: RET
// export function HealTarget ( sci ) ; begin
72770: LD_INT 0
72772: PPUSH
// if not sci then
72773: LD_VAR 0 1
72777: NOT
72778: IFFALSE 72782
// exit ;
72780: GO 72847
// result := 0 ;
72782: LD_ADDR_VAR 0 2
72786: PUSH
72787: LD_INT 0
72789: ST_TO_ADDR
// if GetTaskList ( sci ) then
72790: LD_VAR 0 1
72794: PPUSH
72795: CALL_OW 437
72799: IFFALSE 72847
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72801: LD_VAR 0 1
72805: PPUSH
72806: CALL_OW 437
72810: PUSH
72811: LD_INT 1
72813: ARRAY
72814: PUSH
72815: LD_INT 1
72817: ARRAY
72818: PUSH
72819: LD_STRING l
72821: EQUAL
72822: IFFALSE 72847
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72824: LD_ADDR_VAR 0 2
72828: PUSH
72829: LD_VAR 0 1
72833: PPUSH
72834: CALL_OW 437
72838: PUSH
72839: LD_INT 1
72841: ARRAY
72842: PUSH
72843: LD_INT 4
72845: ARRAY
72846: ST_TO_ADDR
// end ;
72847: LD_VAR 0 2
72851: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72852: LD_INT 0
72854: PPUSH
72855: PPUSH
72856: PPUSH
72857: PPUSH
// if not base_units then
72858: LD_VAR 0 1
72862: NOT
72863: IFFALSE 72867
// exit ;
72865: GO 72954
// result := false ;
72867: LD_ADDR_VAR 0 2
72871: PUSH
72872: LD_INT 0
72874: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72875: LD_ADDR_VAR 0 5
72879: PUSH
72880: LD_VAR 0 1
72884: PPUSH
72885: LD_INT 21
72887: PUSH
72888: LD_INT 3
72890: PUSH
72891: EMPTY
72892: LIST
72893: LIST
72894: PPUSH
72895: CALL_OW 72
72899: ST_TO_ADDR
// if not tmp then
72900: LD_VAR 0 5
72904: NOT
72905: IFFALSE 72909
// exit ;
72907: GO 72954
// for i in tmp do
72909: LD_ADDR_VAR 0 3
72913: PUSH
72914: LD_VAR 0 5
72918: PUSH
72919: FOR_IN
72920: IFFALSE 72952
// begin result := EnemyInRange ( i , 22 ) ;
72922: LD_ADDR_VAR 0 2
72926: PUSH
72927: LD_VAR 0 3
72931: PPUSH
72932: LD_INT 22
72934: PPUSH
72935: CALL 70541 0 2
72939: ST_TO_ADDR
// if result then
72940: LD_VAR 0 2
72944: IFFALSE 72950
// exit ;
72946: POP
72947: POP
72948: GO 72954
// end ;
72950: GO 72919
72952: POP
72953: POP
// end ;
72954: LD_VAR 0 2
72958: RET
// export function FilterByTag ( units , tag ) ; begin
72959: LD_INT 0
72961: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
72962: LD_ADDR_VAR 0 3
72966: PUSH
72967: LD_VAR 0 1
72971: PPUSH
72972: LD_INT 120
72974: PUSH
72975: LD_VAR 0 2
72979: PUSH
72980: EMPTY
72981: LIST
72982: LIST
72983: PPUSH
72984: CALL_OW 72
72988: ST_TO_ADDR
// end ;
72989: LD_VAR 0 3
72993: RET
// export function IsDriver ( un ) ; begin
72994: LD_INT 0
72996: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72997: LD_ADDR_VAR 0 2
73001: PUSH
73002: LD_VAR 0 1
73006: PUSH
73007: LD_INT 55
73009: PUSH
73010: EMPTY
73011: LIST
73012: PPUSH
73013: CALL_OW 69
73017: IN
73018: ST_TO_ADDR
// end ;
73019: LD_VAR 0 2
73023: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73024: LD_INT 0
73026: PPUSH
73027: PPUSH
// list := [ ] ;
73028: LD_ADDR_VAR 0 5
73032: PUSH
73033: EMPTY
73034: ST_TO_ADDR
// case d of 0 :
73035: LD_VAR 0 3
73039: PUSH
73040: LD_INT 0
73042: DOUBLE
73043: EQUAL
73044: IFTRUE 73048
73046: GO 73181
73048: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73049: LD_ADDR_VAR 0 5
73053: PUSH
73054: LD_VAR 0 1
73058: PUSH
73059: LD_INT 4
73061: MINUS
73062: PUSH
73063: LD_VAR 0 2
73067: PUSH
73068: LD_INT 4
73070: MINUS
73071: PUSH
73072: LD_INT 2
73074: PUSH
73075: EMPTY
73076: LIST
73077: LIST
73078: LIST
73079: PUSH
73080: LD_VAR 0 1
73084: PUSH
73085: LD_INT 3
73087: MINUS
73088: PUSH
73089: LD_VAR 0 2
73093: PUSH
73094: LD_INT 1
73096: PUSH
73097: EMPTY
73098: LIST
73099: LIST
73100: LIST
73101: PUSH
73102: LD_VAR 0 1
73106: PUSH
73107: LD_INT 4
73109: PLUS
73110: PUSH
73111: LD_VAR 0 2
73115: PUSH
73116: LD_INT 4
73118: PUSH
73119: EMPTY
73120: LIST
73121: LIST
73122: LIST
73123: PUSH
73124: LD_VAR 0 1
73128: PUSH
73129: LD_INT 3
73131: PLUS
73132: PUSH
73133: LD_VAR 0 2
73137: PUSH
73138: LD_INT 3
73140: PLUS
73141: PUSH
73142: LD_INT 5
73144: PUSH
73145: EMPTY
73146: LIST
73147: LIST
73148: LIST
73149: PUSH
73150: LD_VAR 0 1
73154: PUSH
73155: LD_VAR 0 2
73159: PUSH
73160: LD_INT 4
73162: PLUS
73163: PUSH
73164: LD_INT 0
73166: PUSH
73167: EMPTY
73168: LIST
73169: LIST
73170: LIST
73171: PUSH
73172: EMPTY
73173: LIST
73174: LIST
73175: LIST
73176: LIST
73177: LIST
73178: ST_TO_ADDR
// end ; 1 :
73179: GO 73879
73181: LD_INT 1
73183: DOUBLE
73184: EQUAL
73185: IFTRUE 73189
73187: GO 73322
73189: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73190: LD_ADDR_VAR 0 5
73194: PUSH
73195: LD_VAR 0 1
73199: PUSH
73200: LD_VAR 0 2
73204: PUSH
73205: LD_INT 4
73207: MINUS
73208: PUSH
73209: LD_INT 3
73211: PUSH
73212: EMPTY
73213: LIST
73214: LIST
73215: LIST
73216: PUSH
73217: LD_VAR 0 1
73221: PUSH
73222: LD_INT 3
73224: MINUS
73225: PUSH
73226: LD_VAR 0 2
73230: PUSH
73231: LD_INT 3
73233: MINUS
73234: PUSH
73235: LD_INT 2
73237: PUSH
73238: EMPTY
73239: LIST
73240: LIST
73241: LIST
73242: PUSH
73243: LD_VAR 0 1
73247: PUSH
73248: LD_INT 4
73250: MINUS
73251: PUSH
73252: LD_VAR 0 2
73256: PUSH
73257: LD_INT 1
73259: PUSH
73260: EMPTY
73261: LIST
73262: LIST
73263: LIST
73264: PUSH
73265: LD_VAR 0 1
73269: PUSH
73270: LD_VAR 0 2
73274: PUSH
73275: LD_INT 3
73277: PLUS
73278: PUSH
73279: LD_INT 0
73281: PUSH
73282: EMPTY
73283: LIST
73284: LIST
73285: LIST
73286: PUSH
73287: LD_VAR 0 1
73291: PUSH
73292: LD_INT 4
73294: PLUS
73295: PUSH
73296: LD_VAR 0 2
73300: PUSH
73301: LD_INT 4
73303: PLUS
73304: PUSH
73305: LD_INT 5
73307: PUSH
73308: EMPTY
73309: LIST
73310: LIST
73311: LIST
73312: PUSH
73313: EMPTY
73314: LIST
73315: LIST
73316: LIST
73317: LIST
73318: LIST
73319: ST_TO_ADDR
// end ; 2 :
73320: GO 73879
73322: LD_INT 2
73324: DOUBLE
73325: EQUAL
73326: IFTRUE 73330
73328: GO 73459
73330: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73331: LD_ADDR_VAR 0 5
73335: PUSH
73336: LD_VAR 0 1
73340: PUSH
73341: LD_VAR 0 2
73345: PUSH
73346: LD_INT 3
73348: MINUS
73349: PUSH
73350: LD_INT 3
73352: PUSH
73353: EMPTY
73354: LIST
73355: LIST
73356: LIST
73357: PUSH
73358: LD_VAR 0 1
73362: PUSH
73363: LD_INT 4
73365: PLUS
73366: PUSH
73367: LD_VAR 0 2
73371: PUSH
73372: LD_INT 4
73374: PUSH
73375: EMPTY
73376: LIST
73377: LIST
73378: LIST
73379: PUSH
73380: LD_VAR 0 1
73384: PUSH
73385: LD_VAR 0 2
73389: PUSH
73390: LD_INT 4
73392: PLUS
73393: PUSH
73394: LD_INT 0
73396: PUSH
73397: EMPTY
73398: LIST
73399: LIST
73400: LIST
73401: PUSH
73402: LD_VAR 0 1
73406: PUSH
73407: LD_INT 3
73409: MINUS
73410: PUSH
73411: LD_VAR 0 2
73415: PUSH
73416: LD_INT 1
73418: PUSH
73419: EMPTY
73420: LIST
73421: LIST
73422: LIST
73423: PUSH
73424: LD_VAR 0 1
73428: PUSH
73429: LD_INT 4
73431: MINUS
73432: PUSH
73433: LD_VAR 0 2
73437: PUSH
73438: LD_INT 4
73440: MINUS
73441: PUSH
73442: LD_INT 2
73444: PUSH
73445: EMPTY
73446: LIST
73447: LIST
73448: LIST
73449: PUSH
73450: EMPTY
73451: LIST
73452: LIST
73453: LIST
73454: LIST
73455: LIST
73456: ST_TO_ADDR
// end ; 3 :
73457: GO 73879
73459: LD_INT 3
73461: DOUBLE
73462: EQUAL
73463: IFTRUE 73467
73465: GO 73600
73467: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73468: LD_ADDR_VAR 0 5
73472: PUSH
73473: LD_VAR 0 1
73477: PUSH
73478: LD_INT 3
73480: PLUS
73481: PUSH
73482: LD_VAR 0 2
73486: PUSH
73487: LD_INT 4
73489: PUSH
73490: EMPTY
73491: LIST
73492: LIST
73493: LIST
73494: PUSH
73495: LD_VAR 0 1
73499: PUSH
73500: LD_INT 4
73502: PLUS
73503: PUSH
73504: LD_VAR 0 2
73508: PUSH
73509: LD_INT 4
73511: PLUS
73512: PUSH
73513: LD_INT 5
73515: PUSH
73516: EMPTY
73517: LIST
73518: LIST
73519: LIST
73520: PUSH
73521: LD_VAR 0 1
73525: PUSH
73526: LD_INT 4
73528: MINUS
73529: PUSH
73530: LD_VAR 0 2
73534: PUSH
73535: LD_INT 1
73537: PUSH
73538: EMPTY
73539: LIST
73540: LIST
73541: LIST
73542: PUSH
73543: LD_VAR 0 1
73547: PUSH
73548: LD_VAR 0 2
73552: PUSH
73553: LD_INT 4
73555: MINUS
73556: PUSH
73557: LD_INT 3
73559: PUSH
73560: EMPTY
73561: LIST
73562: LIST
73563: LIST
73564: PUSH
73565: LD_VAR 0 1
73569: PUSH
73570: LD_INT 3
73572: MINUS
73573: PUSH
73574: LD_VAR 0 2
73578: PUSH
73579: LD_INT 3
73581: MINUS
73582: PUSH
73583: LD_INT 2
73585: PUSH
73586: EMPTY
73587: LIST
73588: LIST
73589: LIST
73590: PUSH
73591: EMPTY
73592: LIST
73593: LIST
73594: LIST
73595: LIST
73596: LIST
73597: ST_TO_ADDR
// end ; 4 :
73598: GO 73879
73600: LD_INT 4
73602: DOUBLE
73603: EQUAL
73604: IFTRUE 73608
73606: GO 73741
73608: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73609: LD_ADDR_VAR 0 5
73613: PUSH
73614: LD_VAR 0 1
73618: PUSH
73619: LD_VAR 0 2
73623: PUSH
73624: LD_INT 4
73626: PLUS
73627: PUSH
73628: LD_INT 0
73630: PUSH
73631: EMPTY
73632: LIST
73633: LIST
73634: LIST
73635: PUSH
73636: LD_VAR 0 1
73640: PUSH
73641: LD_INT 3
73643: PLUS
73644: PUSH
73645: LD_VAR 0 2
73649: PUSH
73650: LD_INT 3
73652: PLUS
73653: PUSH
73654: LD_INT 5
73656: PUSH
73657: EMPTY
73658: LIST
73659: LIST
73660: LIST
73661: PUSH
73662: LD_VAR 0 1
73666: PUSH
73667: LD_INT 4
73669: PLUS
73670: PUSH
73671: LD_VAR 0 2
73675: PUSH
73676: LD_INT 4
73678: PUSH
73679: EMPTY
73680: LIST
73681: LIST
73682: LIST
73683: PUSH
73684: LD_VAR 0 1
73688: PUSH
73689: LD_VAR 0 2
73693: PUSH
73694: LD_INT 3
73696: MINUS
73697: PUSH
73698: LD_INT 3
73700: PUSH
73701: EMPTY
73702: LIST
73703: LIST
73704: LIST
73705: PUSH
73706: LD_VAR 0 1
73710: PUSH
73711: LD_INT 4
73713: MINUS
73714: PUSH
73715: LD_VAR 0 2
73719: PUSH
73720: LD_INT 4
73722: MINUS
73723: PUSH
73724: LD_INT 2
73726: PUSH
73727: EMPTY
73728: LIST
73729: LIST
73730: LIST
73731: PUSH
73732: EMPTY
73733: LIST
73734: LIST
73735: LIST
73736: LIST
73737: LIST
73738: ST_TO_ADDR
// end ; 5 :
73739: GO 73879
73741: LD_INT 5
73743: DOUBLE
73744: EQUAL
73745: IFTRUE 73749
73747: GO 73878
73749: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73750: LD_ADDR_VAR 0 5
73754: PUSH
73755: LD_VAR 0 1
73759: PUSH
73760: LD_INT 4
73762: MINUS
73763: PUSH
73764: LD_VAR 0 2
73768: PUSH
73769: LD_INT 1
73771: PUSH
73772: EMPTY
73773: LIST
73774: LIST
73775: LIST
73776: PUSH
73777: LD_VAR 0 1
73781: PUSH
73782: LD_VAR 0 2
73786: PUSH
73787: LD_INT 4
73789: MINUS
73790: PUSH
73791: LD_INT 3
73793: PUSH
73794: EMPTY
73795: LIST
73796: LIST
73797: LIST
73798: PUSH
73799: LD_VAR 0 1
73803: PUSH
73804: LD_INT 4
73806: PLUS
73807: PUSH
73808: LD_VAR 0 2
73812: PUSH
73813: LD_INT 4
73815: PLUS
73816: PUSH
73817: LD_INT 5
73819: PUSH
73820: EMPTY
73821: LIST
73822: LIST
73823: LIST
73824: PUSH
73825: LD_VAR 0 1
73829: PUSH
73830: LD_INT 3
73832: PLUS
73833: PUSH
73834: LD_VAR 0 2
73838: PUSH
73839: LD_INT 4
73841: PUSH
73842: EMPTY
73843: LIST
73844: LIST
73845: LIST
73846: PUSH
73847: LD_VAR 0 1
73851: PUSH
73852: LD_VAR 0 2
73856: PUSH
73857: LD_INT 3
73859: PLUS
73860: PUSH
73861: LD_INT 0
73863: PUSH
73864: EMPTY
73865: LIST
73866: LIST
73867: LIST
73868: PUSH
73869: EMPTY
73870: LIST
73871: LIST
73872: LIST
73873: LIST
73874: LIST
73875: ST_TO_ADDR
// end ; end ;
73876: GO 73879
73878: POP
// result := list ;
73879: LD_ADDR_VAR 0 4
73883: PUSH
73884: LD_VAR 0 5
73888: ST_TO_ADDR
// end ;
73889: LD_VAR 0 4
73893: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73894: LD_INT 0
73896: PPUSH
73897: PPUSH
73898: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73899: LD_VAR 0 1
73903: NOT
73904: PUSH
73905: LD_VAR 0 2
73909: PUSH
73910: LD_INT 1
73912: PUSH
73913: LD_INT 2
73915: PUSH
73916: LD_INT 3
73918: PUSH
73919: LD_INT 4
73921: PUSH
73922: EMPTY
73923: LIST
73924: LIST
73925: LIST
73926: LIST
73927: IN
73928: NOT
73929: OR
73930: IFFALSE 73934
// exit ;
73932: GO 74017
// tmp := [ ] ;
73934: LD_ADDR_VAR 0 5
73938: PUSH
73939: EMPTY
73940: ST_TO_ADDR
// for i in units do
73941: LD_ADDR_VAR 0 4
73945: PUSH
73946: LD_VAR 0 1
73950: PUSH
73951: FOR_IN
73952: IFFALSE 73986
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
73954: LD_ADDR_VAR 0 5
73958: PUSH
73959: LD_VAR 0 5
73963: PPUSH
73964: LD_VAR 0 4
73968: PPUSH
73969: LD_VAR 0 2
73973: PPUSH
73974: CALL_OW 259
73978: PPUSH
73979: CALL 75378 0 2
73983: ST_TO_ADDR
73984: GO 73951
73986: POP
73987: POP
// if not tmp then
73988: LD_VAR 0 5
73992: NOT
73993: IFFALSE 73997
// exit ;
73995: GO 74017
// result := SortListByListDesc ( units , tmp ) ;
73997: LD_ADDR_VAR 0 3
74001: PUSH
74002: LD_VAR 0 1
74006: PPUSH
74007: LD_VAR 0 5
74011: PPUSH
74012: CALL_OW 77
74016: ST_TO_ADDR
// end ;
74017: LD_VAR 0 3
74021: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74022: LD_INT 0
74024: PPUSH
74025: PPUSH
74026: PPUSH
// result := false ;
74027: LD_ADDR_VAR 0 3
74031: PUSH
74032: LD_INT 0
74034: ST_TO_ADDR
// if not building then
74035: LD_VAR 0 2
74039: NOT
74040: IFFALSE 74044
// exit ;
74042: GO 74182
// x := GetX ( building ) ;
74044: LD_ADDR_VAR 0 4
74048: PUSH
74049: LD_VAR 0 2
74053: PPUSH
74054: CALL_OW 250
74058: ST_TO_ADDR
// y := GetY ( building ) ;
74059: LD_ADDR_VAR 0 5
74063: PUSH
74064: LD_VAR 0 2
74068: PPUSH
74069: CALL_OW 251
74073: ST_TO_ADDR
// if not x or not y then
74074: LD_VAR 0 4
74078: NOT
74079: PUSH
74080: LD_VAR 0 5
74084: NOT
74085: OR
74086: IFFALSE 74090
// exit ;
74088: GO 74182
// if GetTaskList ( unit ) then
74090: LD_VAR 0 1
74094: PPUSH
74095: CALL_OW 437
74099: IFFALSE 74182
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74101: LD_STRING e
74103: PUSH
74104: LD_VAR 0 1
74108: PPUSH
74109: CALL_OW 437
74113: PUSH
74114: LD_INT 1
74116: ARRAY
74117: PUSH
74118: LD_INT 1
74120: ARRAY
74121: EQUAL
74122: PUSH
74123: LD_VAR 0 4
74127: PUSH
74128: LD_VAR 0 1
74132: PPUSH
74133: CALL_OW 437
74137: PUSH
74138: LD_INT 1
74140: ARRAY
74141: PUSH
74142: LD_INT 2
74144: ARRAY
74145: EQUAL
74146: AND
74147: PUSH
74148: LD_VAR 0 5
74152: PUSH
74153: LD_VAR 0 1
74157: PPUSH
74158: CALL_OW 437
74162: PUSH
74163: LD_INT 1
74165: ARRAY
74166: PUSH
74167: LD_INT 3
74169: ARRAY
74170: EQUAL
74171: AND
74172: IFFALSE 74182
// result := true end ;
74174: LD_ADDR_VAR 0 3
74178: PUSH
74179: LD_INT 1
74181: ST_TO_ADDR
// end ;
74182: LD_VAR 0 3
74186: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74187: LD_INT 0
74189: PPUSH
// result := false ;
74190: LD_ADDR_VAR 0 4
74194: PUSH
74195: LD_INT 0
74197: ST_TO_ADDR
// if GetTaskList ( unit ) then
74198: LD_VAR 0 1
74202: PPUSH
74203: CALL_OW 437
74207: IFFALSE 74290
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74209: LD_STRING M
74211: PUSH
74212: LD_VAR 0 1
74216: PPUSH
74217: CALL_OW 437
74221: PUSH
74222: LD_INT 1
74224: ARRAY
74225: PUSH
74226: LD_INT 1
74228: ARRAY
74229: EQUAL
74230: PUSH
74231: LD_VAR 0 2
74235: PUSH
74236: LD_VAR 0 1
74240: PPUSH
74241: CALL_OW 437
74245: PUSH
74246: LD_INT 1
74248: ARRAY
74249: PUSH
74250: LD_INT 2
74252: ARRAY
74253: EQUAL
74254: AND
74255: PUSH
74256: LD_VAR 0 3
74260: PUSH
74261: LD_VAR 0 1
74265: PPUSH
74266: CALL_OW 437
74270: PUSH
74271: LD_INT 1
74273: ARRAY
74274: PUSH
74275: LD_INT 3
74277: ARRAY
74278: EQUAL
74279: AND
74280: IFFALSE 74290
// result := true ;
74282: LD_ADDR_VAR 0 4
74286: PUSH
74287: LD_INT 1
74289: ST_TO_ADDR
// end ; end ;
74290: LD_VAR 0 4
74294: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74295: LD_INT 0
74297: PPUSH
74298: PPUSH
74299: PPUSH
74300: PPUSH
// if not unit or not area then
74301: LD_VAR 0 1
74305: NOT
74306: PUSH
74307: LD_VAR 0 2
74311: NOT
74312: OR
74313: IFFALSE 74317
// exit ;
74315: GO 74481
// tmp := AreaToList ( area , i ) ;
74317: LD_ADDR_VAR 0 6
74321: PUSH
74322: LD_VAR 0 2
74326: PPUSH
74327: LD_VAR 0 5
74331: PPUSH
74332: CALL_OW 517
74336: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74337: LD_ADDR_VAR 0 5
74341: PUSH
74342: DOUBLE
74343: LD_INT 1
74345: DEC
74346: ST_TO_ADDR
74347: LD_VAR 0 6
74351: PUSH
74352: LD_INT 1
74354: ARRAY
74355: PUSH
74356: FOR_TO
74357: IFFALSE 74479
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74359: LD_ADDR_VAR 0 7
74363: PUSH
74364: LD_VAR 0 6
74368: PUSH
74369: LD_INT 1
74371: ARRAY
74372: PUSH
74373: LD_VAR 0 5
74377: ARRAY
74378: PUSH
74379: LD_VAR 0 6
74383: PUSH
74384: LD_INT 2
74386: ARRAY
74387: PUSH
74388: LD_VAR 0 5
74392: ARRAY
74393: PUSH
74394: EMPTY
74395: LIST
74396: LIST
74397: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
74398: LD_VAR 0 7
74402: PUSH
74403: LD_INT 1
74405: ARRAY
74406: PPUSH
74407: LD_VAR 0 7
74411: PUSH
74412: LD_INT 2
74414: ARRAY
74415: PPUSH
74416: CALL_OW 428
74420: PUSH
74421: LD_INT 0
74423: EQUAL
74424: IFFALSE 74477
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
74426: LD_VAR 0 1
74430: PPUSH
74431: LD_VAR 0 7
74435: PUSH
74436: LD_INT 1
74438: ARRAY
74439: PPUSH
74440: LD_VAR 0 7
74444: PUSH
74445: LD_INT 2
74447: ARRAY
74448: PPUSH
74449: LD_VAR 0 3
74453: PPUSH
74454: CALL_OW 48
// result := IsPlaced ( unit ) ;
74458: LD_ADDR_VAR 0 4
74462: PUSH
74463: LD_VAR 0 1
74467: PPUSH
74468: CALL_OW 305
74472: ST_TO_ADDR
// exit ;
74473: POP
74474: POP
74475: GO 74481
// end ; end ;
74477: GO 74356
74479: POP
74480: POP
// end ;
74481: LD_VAR 0 4
74485: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74486: LD_INT 0
74488: PPUSH
74489: PPUSH
74490: PPUSH
// if not side or side > 8 then
74491: LD_VAR 0 1
74495: NOT
74496: PUSH
74497: LD_VAR 0 1
74501: PUSH
74502: LD_INT 8
74504: GREATER
74505: OR
74506: IFFALSE 74510
// exit ;
74508: GO 74697
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74510: LD_ADDR_VAR 0 4
74514: PUSH
74515: LD_INT 22
74517: PUSH
74518: LD_VAR 0 1
74522: PUSH
74523: EMPTY
74524: LIST
74525: LIST
74526: PUSH
74527: LD_INT 21
74529: PUSH
74530: LD_INT 3
74532: PUSH
74533: EMPTY
74534: LIST
74535: LIST
74536: PUSH
74537: EMPTY
74538: LIST
74539: LIST
74540: PPUSH
74541: CALL_OW 69
74545: ST_TO_ADDR
// if not tmp then
74546: LD_VAR 0 4
74550: NOT
74551: IFFALSE 74555
// exit ;
74553: GO 74697
// enable_addtolog := true ;
74555: LD_ADDR_OWVAR 81
74559: PUSH
74560: LD_INT 1
74562: ST_TO_ADDR
// AddToLog ( [ ) ;
74563: LD_STRING [
74565: PPUSH
74566: CALL_OW 561
// for i in tmp do
74570: LD_ADDR_VAR 0 3
74574: PUSH
74575: LD_VAR 0 4
74579: PUSH
74580: FOR_IN
74581: IFFALSE 74688
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74583: LD_STRING [
74585: PUSH
74586: LD_VAR 0 3
74590: PPUSH
74591: CALL_OW 266
74595: STR
74596: PUSH
74597: LD_STRING , 
74599: STR
74600: PUSH
74601: LD_VAR 0 3
74605: PPUSH
74606: CALL_OW 250
74610: STR
74611: PUSH
74612: LD_STRING , 
74614: STR
74615: PUSH
74616: LD_VAR 0 3
74620: PPUSH
74621: CALL_OW 251
74625: STR
74626: PUSH
74627: LD_STRING , 
74629: STR
74630: PUSH
74631: LD_VAR 0 3
74635: PPUSH
74636: CALL_OW 254
74640: STR
74641: PUSH
74642: LD_STRING , 
74644: STR
74645: PUSH
74646: LD_VAR 0 3
74650: PPUSH
74651: LD_INT 1
74653: PPUSH
74654: CALL_OW 268
74658: STR
74659: PUSH
74660: LD_STRING , 
74662: STR
74663: PUSH
74664: LD_VAR 0 3
74668: PPUSH
74669: LD_INT 2
74671: PPUSH
74672: CALL_OW 268
74676: STR
74677: PUSH
74678: LD_STRING ],
74680: STR
74681: PPUSH
74682: CALL_OW 561
// end ;
74686: GO 74580
74688: POP
74689: POP
// AddToLog ( ]; ) ;
74690: LD_STRING ];
74692: PPUSH
74693: CALL_OW 561
// end ;
74697: LD_VAR 0 2
74701: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74702: LD_INT 0
74704: PPUSH
74705: PPUSH
74706: PPUSH
74707: PPUSH
74708: PPUSH
// if not area or not rate or not max then
74709: LD_VAR 0 1
74713: NOT
74714: PUSH
74715: LD_VAR 0 2
74719: NOT
74720: OR
74721: PUSH
74722: LD_VAR 0 4
74726: NOT
74727: OR
74728: IFFALSE 74732
// exit ;
74730: GO 74921
// while 1 do
74732: LD_INT 1
74734: IFFALSE 74921
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74736: LD_ADDR_VAR 0 9
74740: PUSH
74741: LD_VAR 0 1
74745: PPUSH
74746: LD_INT 1
74748: PPUSH
74749: CALL_OW 287
74753: PUSH
74754: LD_INT 10
74756: MUL
74757: ST_TO_ADDR
// r := rate / 10 ;
74758: LD_ADDR_VAR 0 7
74762: PUSH
74763: LD_VAR 0 2
74767: PUSH
74768: LD_INT 10
74770: DIVREAL
74771: ST_TO_ADDR
// time := 1 1$00 ;
74772: LD_ADDR_VAR 0 8
74776: PUSH
74777: LD_INT 2100
74779: ST_TO_ADDR
// if amount < min then
74780: LD_VAR 0 9
74784: PUSH
74785: LD_VAR 0 3
74789: LESS
74790: IFFALSE 74808
// r := r * 2 else
74792: LD_ADDR_VAR 0 7
74796: PUSH
74797: LD_VAR 0 7
74801: PUSH
74802: LD_INT 2
74804: MUL
74805: ST_TO_ADDR
74806: GO 74834
// if amount > max then
74808: LD_VAR 0 9
74812: PUSH
74813: LD_VAR 0 4
74817: GREATER
74818: IFFALSE 74834
// r := r / 2 ;
74820: LD_ADDR_VAR 0 7
74824: PUSH
74825: LD_VAR 0 7
74829: PUSH
74830: LD_INT 2
74832: DIVREAL
74833: ST_TO_ADDR
// time := time / r ;
74834: LD_ADDR_VAR 0 8
74838: PUSH
74839: LD_VAR 0 8
74843: PUSH
74844: LD_VAR 0 7
74848: DIVREAL
74849: ST_TO_ADDR
// if time < 0 then
74850: LD_VAR 0 8
74854: PUSH
74855: LD_INT 0
74857: LESS
74858: IFFALSE 74875
// time := time * - 1 ;
74860: LD_ADDR_VAR 0 8
74864: PUSH
74865: LD_VAR 0 8
74869: PUSH
74870: LD_INT 1
74872: NEG
74873: MUL
74874: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
74875: LD_VAR 0 8
74879: PUSH
74880: LD_INT 35
74882: PPUSH
74883: LD_INT 875
74885: PPUSH
74886: CALL_OW 12
74890: PLUS
74891: PPUSH
74892: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74896: LD_INT 1
74898: PPUSH
74899: LD_INT 5
74901: PPUSH
74902: CALL_OW 12
74906: PPUSH
74907: LD_VAR 0 1
74911: PPUSH
74912: LD_INT 1
74914: PPUSH
74915: CALL_OW 55
// end ;
74919: GO 74732
// end ;
74921: LD_VAR 0 5
74925: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74926: LD_INT 0
74928: PPUSH
74929: PPUSH
74930: PPUSH
74931: PPUSH
74932: PPUSH
74933: PPUSH
74934: PPUSH
74935: PPUSH
// if not turrets or not factories then
74936: LD_VAR 0 1
74940: NOT
74941: PUSH
74942: LD_VAR 0 2
74946: NOT
74947: OR
74948: IFFALSE 74952
// exit ;
74950: GO 75259
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74952: LD_ADDR_VAR 0 10
74956: PUSH
74957: LD_INT 5
74959: PUSH
74960: LD_INT 6
74962: PUSH
74963: EMPTY
74964: LIST
74965: LIST
74966: PUSH
74967: LD_INT 2
74969: PUSH
74970: LD_INT 4
74972: PUSH
74973: EMPTY
74974: LIST
74975: LIST
74976: PUSH
74977: LD_INT 3
74979: PUSH
74980: LD_INT 5
74982: PUSH
74983: EMPTY
74984: LIST
74985: LIST
74986: PUSH
74987: EMPTY
74988: LIST
74989: LIST
74990: LIST
74991: PUSH
74992: LD_INT 24
74994: PUSH
74995: LD_INT 25
74997: PUSH
74998: EMPTY
74999: LIST
75000: LIST
75001: PUSH
75002: LD_INT 23
75004: PUSH
75005: LD_INT 27
75007: PUSH
75008: EMPTY
75009: LIST
75010: LIST
75011: PUSH
75012: EMPTY
75013: LIST
75014: LIST
75015: PUSH
75016: LD_INT 42
75018: PUSH
75019: LD_INT 43
75021: PUSH
75022: EMPTY
75023: LIST
75024: LIST
75025: PUSH
75026: LD_INT 44
75028: PUSH
75029: LD_INT 46
75031: PUSH
75032: EMPTY
75033: LIST
75034: LIST
75035: PUSH
75036: LD_INT 45
75038: PUSH
75039: LD_INT 47
75041: PUSH
75042: EMPTY
75043: LIST
75044: LIST
75045: PUSH
75046: EMPTY
75047: LIST
75048: LIST
75049: LIST
75050: PUSH
75051: EMPTY
75052: LIST
75053: LIST
75054: LIST
75055: ST_TO_ADDR
// result := [ ] ;
75056: LD_ADDR_VAR 0 3
75060: PUSH
75061: EMPTY
75062: ST_TO_ADDR
// for i in turrets do
75063: LD_ADDR_VAR 0 4
75067: PUSH
75068: LD_VAR 0 1
75072: PUSH
75073: FOR_IN
75074: IFFALSE 75257
// begin nat := GetNation ( i ) ;
75076: LD_ADDR_VAR 0 7
75080: PUSH
75081: LD_VAR 0 4
75085: PPUSH
75086: CALL_OW 248
75090: ST_TO_ADDR
// weapon := 0 ;
75091: LD_ADDR_VAR 0 8
75095: PUSH
75096: LD_INT 0
75098: ST_TO_ADDR
// if not nat then
75099: LD_VAR 0 7
75103: NOT
75104: IFFALSE 75108
// continue ;
75106: GO 75073
// for j in list [ nat ] do
75108: LD_ADDR_VAR 0 5
75112: PUSH
75113: LD_VAR 0 10
75117: PUSH
75118: LD_VAR 0 7
75122: ARRAY
75123: PUSH
75124: FOR_IN
75125: IFFALSE 75166
// if GetBWeapon ( i ) = j [ 1 ] then
75127: LD_VAR 0 4
75131: PPUSH
75132: CALL_OW 269
75136: PUSH
75137: LD_VAR 0 5
75141: PUSH
75142: LD_INT 1
75144: ARRAY
75145: EQUAL
75146: IFFALSE 75164
// begin weapon := j [ 2 ] ;
75148: LD_ADDR_VAR 0 8
75152: PUSH
75153: LD_VAR 0 5
75157: PUSH
75158: LD_INT 2
75160: ARRAY
75161: ST_TO_ADDR
// break ;
75162: GO 75166
// end ;
75164: GO 75124
75166: POP
75167: POP
// if not weapon then
75168: LD_VAR 0 8
75172: NOT
75173: IFFALSE 75177
// continue ;
75175: GO 75073
// for k in factories do
75177: LD_ADDR_VAR 0 6
75181: PUSH
75182: LD_VAR 0 2
75186: PUSH
75187: FOR_IN
75188: IFFALSE 75253
// begin weapons := AvailableWeaponList ( k ) ;
75190: LD_ADDR_VAR 0 9
75194: PUSH
75195: LD_VAR 0 6
75199: PPUSH
75200: CALL_OW 478
75204: ST_TO_ADDR
// if not weapons then
75205: LD_VAR 0 9
75209: NOT
75210: IFFALSE 75214
// continue ;
75212: GO 75187
// if weapon in weapons then
75214: LD_VAR 0 8
75218: PUSH
75219: LD_VAR 0 9
75223: IN
75224: IFFALSE 75251
// begin result := [ i , weapon ] ;
75226: LD_ADDR_VAR 0 3
75230: PUSH
75231: LD_VAR 0 4
75235: PUSH
75236: LD_VAR 0 8
75240: PUSH
75241: EMPTY
75242: LIST
75243: LIST
75244: ST_TO_ADDR
// exit ;
75245: POP
75246: POP
75247: POP
75248: POP
75249: GO 75259
// end ; end ;
75251: GO 75187
75253: POP
75254: POP
// end ;
75255: GO 75073
75257: POP
75258: POP
// end ;
75259: LD_VAR 0 3
75263: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75264: LD_INT 0
75266: PPUSH
// if not side or side > 8 then
75267: LD_VAR 0 3
75271: NOT
75272: PUSH
75273: LD_VAR 0 3
75277: PUSH
75278: LD_INT 8
75280: GREATER
75281: OR
75282: IFFALSE 75286
// exit ;
75284: GO 75345
// if not range then
75286: LD_VAR 0 4
75290: NOT
75291: IFFALSE 75302
// range := - 12 ;
75293: LD_ADDR_VAR 0 4
75297: PUSH
75298: LD_INT 12
75300: NEG
75301: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75302: LD_VAR 0 1
75306: PPUSH
75307: LD_VAR 0 2
75311: PPUSH
75312: LD_VAR 0 3
75316: PPUSH
75317: LD_VAR 0 4
75321: PPUSH
75322: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75326: LD_VAR 0 1
75330: PPUSH
75331: LD_VAR 0 2
75335: PPUSH
75336: LD_VAR 0 3
75340: PPUSH
75341: CALL_OW 331
// end ;
75345: LD_VAR 0 5
75349: RET
// export function Video ( mode ) ; begin
75350: LD_INT 0
75352: PPUSH
// ingame_video = mode ;
75353: LD_ADDR_OWVAR 52
75357: PUSH
75358: LD_VAR 0 1
75362: ST_TO_ADDR
// interface_hidden = mode ;
75363: LD_ADDR_OWVAR 54
75367: PUSH
75368: LD_VAR 0 1
75372: ST_TO_ADDR
// end ;
75373: LD_VAR 0 2
75377: RET
// export function Join ( array , element ) ; begin
75378: LD_INT 0
75380: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75381: LD_ADDR_VAR 0 3
75385: PUSH
75386: LD_VAR 0 1
75390: PPUSH
75391: LD_VAR 0 1
75395: PUSH
75396: LD_INT 1
75398: PLUS
75399: PPUSH
75400: LD_VAR 0 2
75404: PPUSH
75405: CALL_OW 1
75409: ST_TO_ADDR
// end ;
75410: LD_VAR 0 3
75414: RET
// export function JoinUnion ( array , element ) ; begin
75415: LD_INT 0
75417: PPUSH
// result := array union element ;
75418: LD_ADDR_VAR 0 3
75422: PUSH
75423: LD_VAR 0 1
75427: PUSH
75428: LD_VAR 0 2
75432: UNION
75433: ST_TO_ADDR
// end ;
75434: LD_VAR 0 3
75438: RET
// export function GetBehemoths ( side ) ; begin
75439: LD_INT 0
75441: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
75442: LD_ADDR_VAR 0 2
75446: PUSH
75447: LD_INT 22
75449: PUSH
75450: LD_VAR 0 1
75454: PUSH
75455: EMPTY
75456: LIST
75457: LIST
75458: PUSH
75459: LD_INT 31
75461: PUSH
75462: LD_INT 25
75464: PUSH
75465: EMPTY
75466: LIST
75467: LIST
75468: PUSH
75469: EMPTY
75470: LIST
75471: LIST
75472: PPUSH
75473: CALL_OW 69
75477: ST_TO_ADDR
// end ;
75478: LD_VAR 0 2
75482: RET
// export function Shuffle ( array ) ; var i , index ; begin
75483: LD_INT 0
75485: PPUSH
75486: PPUSH
75487: PPUSH
// result := [ ] ;
75488: LD_ADDR_VAR 0 2
75492: PUSH
75493: EMPTY
75494: ST_TO_ADDR
// if not array then
75495: LD_VAR 0 1
75499: NOT
75500: IFFALSE 75504
// exit ;
75502: GO 75603
// Randomize ;
75504: CALL_OW 10
// for i = array downto 1 do
75508: LD_ADDR_VAR 0 3
75512: PUSH
75513: DOUBLE
75514: LD_VAR 0 1
75518: INC
75519: ST_TO_ADDR
75520: LD_INT 1
75522: PUSH
75523: FOR_DOWNTO
75524: IFFALSE 75601
// begin index := rand ( 1 , array ) ;
75526: LD_ADDR_VAR 0 4
75530: PUSH
75531: LD_INT 1
75533: PPUSH
75534: LD_VAR 0 1
75538: PPUSH
75539: CALL_OW 12
75543: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75544: LD_ADDR_VAR 0 2
75548: PUSH
75549: LD_VAR 0 2
75553: PPUSH
75554: LD_VAR 0 2
75558: PUSH
75559: LD_INT 1
75561: PLUS
75562: PPUSH
75563: LD_VAR 0 1
75567: PUSH
75568: LD_VAR 0 4
75572: ARRAY
75573: PPUSH
75574: CALL_OW 2
75578: ST_TO_ADDR
// array := Delete ( array , index ) ;
75579: LD_ADDR_VAR 0 1
75583: PUSH
75584: LD_VAR 0 1
75588: PPUSH
75589: LD_VAR 0 4
75593: PPUSH
75594: CALL_OW 3
75598: ST_TO_ADDR
// end ;
75599: GO 75523
75601: POP
75602: POP
// end ;
75603: LD_VAR 0 2
75607: RET
// export function GetBaseMaterials ( base ) ; begin
75608: LD_INT 0
75610: PPUSH
// result := [ 0 , 0 , 0 ] ;
75611: LD_ADDR_VAR 0 2
75615: PUSH
75616: LD_INT 0
75618: PUSH
75619: LD_INT 0
75621: PUSH
75622: LD_INT 0
75624: PUSH
75625: EMPTY
75626: LIST
75627: LIST
75628: LIST
75629: ST_TO_ADDR
// if not base then
75630: LD_VAR 0 1
75634: NOT
75635: IFFALSE 75639
// exit ;
75637: GO 75688
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75639: LD_ADDR_VAR 0 2
75643: PUSH
75644: LD_VAR 0 1
75648: PPUSH
75649: LD_INT 1
75651: PPUSH
75652: CALL_OW 275
75656: PUSH
75657: LD_VAR 0 1
75661: PPUSH
75662: LD_INT 2
75664: PPUSH
75665: CALL_OW 275
75669: PUSH
75670: LD_VAR 0 1
75674: PPUSH
75675: LD_INT 3
75677: PPUSH
75678: CALL_OW 275
75682: PUSH
75683: EMPTY
75684: LIST
75685: LIST
75686: LIST
75687: ST_TO_ADDR
// end ;
75688: LD_VAR 0 2
75692: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75693: LD_INT 0
75695: PPUSH
75696: PPUSH
// result := array ;
75697: LD_ADDR_VAR 0 3
75701: PUSH
75702: LD_VAR 0 1
75706: ST_TO_ADDR
// if size >= result then
75707: LD_VAR 0 2
75711: PUSH
75712: LD_VAR 0 3
75716: GREATEREQUAL
75717: IFFALSE 75721
// exit ;
75719: GO 75771
// if size then
75721: LD_VAR 0 2
75725: IFFALSE 75771
// for i := array downto size do
75727: LD_ADDR_VAR 0 4
75731: PUSH
75732: DOUBLE
75733: LD_VAR 0 1
75737: INC
75738: ST_TO_ADDR
75739: LD_VAR 0 2
75743: PUSH
75744: FOR_DOWNTO
75745: IFFALSE 75769
// result := Delete ( result , result ) ;
75747: LD_ADDR_VAR 0 3
75751: PUSH
75752: LD_VAR 0 3
75756: PPUSH
75757: LD_VAR 0 3
75761: PPUSH
75762: CALL_OW 3
75766: ST_TO_ADDR
75767: GO 75744
75769: POP
75770: POP
// end ;
75771: LD_VAR 0 3
75775: RET
// export function ComExit ( unit ) ; var tmp ; begin
75776: LD_INT 0
75778: PPUSH
75779: PPUSH
// if not IsInUnit ( unit ) then
75780: LD_VAR 0 1
75784: PPUSH
75785: CALL_OW 310
75789: NOT
75790: IFFALSE 75794
// exit ;
75792: GO 75854
// tmp := IsInUnit ( unit ) ;
75794: LD_ADDR_VAR 0 3
75798: PUSH
75799: LD_VAR 0 1
75803: PPUSH
75804: CALL_OW 310
75808: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75809: LD_VAR 0 3
75813: PPUSH
75814: CALL_OW 247
75818: PUSH
75819: LD_INT 2
75821: EQUAL
75822: IFFALSE 75835
// ComExitVehicle ( unit ) else
75824: LD_VAR 0 1
75828: PPUSH
75829: CALL_OW 121
75833: GO 75844
// ComExitBuilding ( unit ) ;
75835: LD_VAR 0 1
75839: PPUSH
75840: CALL_OW 122
// result := tmp ;
75844: LD_ADDR_VAR 0 2
75848: PUSH
75849: LD_VAR 0 3
75853: ST_TO_ADDR
// end ;
75854: LD_VAR 0 2
75858: RET
// export function ComExitAll ( units ) ; var i ; begin
75859: LD_INT 0
75861: PPUSH
75862: PPUSH
// if not units then
75863: LD_VAR 0 1
75867: NOT
75868: IFFALSE 75872
// exit ;
75870: GO 75898
// for i in units do
75872: LD_ADDR_VAR 0 3
75876: PUSH
75877: LD_VAR 0 1
75881: PUSH
75882: FOR_IN
75883: IFFALSE 75896
// ComExit ( i ) ;
75885: LD_VAR 0 3
75889: PPUSH
75890: CALL 75776 0 1
75894: GO 75882
75896: POP
75897: POP
// end ;
75898: LD_VAR 0 2
75902: RET
// export function ResetHc ; begin
75903: LD_INT 0
75905: PPUSH
// InitHc ;
75906: CALL_OW 19
// hc_importance := 0 ;
75910: LD_ADDR_OWVAR 32
75914: PUSH
75915: LD_INT 0
75917: ST_TO_ADDR
// end ;
75918: LD_VAR 0 1
75922: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
75923: LD_INT 0
75925: PPUSH
75926: PPUSH
75927: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75928: LD_ADDR_VAR 0 6
75932: PUSH
75933: LD_VAR 0 1
75937: PUSH
75938: LD_VAR 0 3
75942: PLUS
75943: PUSH
75944: LD_INT 2
75946: DIV
75947: ST_TO_ADDR
// if _x < 0 then
75948: LD_VAR 0 6
75952: PUSH
75953: LD_INT 0
75955: LESS
75956: IFFALSE 75973
// _x := _x * - 1 ;
75958: LD_ADDR_VAR 0 6
75962: PUSH
75963: LD_VAR 0 6
75967: PUSH
75968: LD_INT 1
75970: NEG
75971: MUL
75972: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75973: LD_ADDR_VAR 0 7
75977: PUSH
75978: LD_VAR 0 2
75982: PUSH
75983: LD_VAR 0 4
75987: PLUS
75988: PUSH
75989: LD_INT 2
75991: DIV
75992: ST_TO_ADDR
// if _y < 0 then
75993: LD_VAR 0 7
75997: PUSH
75998: LD_INT 0
76000: LESS
76001: IFFALSE 76018
// _y := _y * - 1 ;
76003: LD_ADDR_VAR 0 7
76007: PUSH
76008: LD_VAR 0 7
76012: PUSH
76013: LD_INT 1
76015: NEG
76016: MUL
76017: ST_TO_ADDR
// result := [ _x , _y ] ;
76018: LD_ADDR_VAR 0 5
76022: PUSH
76023: LD_VAR 0 6
76027: PUSH
76028: LD_VAR 0 7
76032: PUSH
76033: EMPTY
76034: LIST
76035: LIST
76036: ST_TO_ADDR
// end ;
76037: LD_VAR 0 5
76041: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76042: LD_INT 0
76044: PPUSH
76045: PPUSH
76046: PPUSH
76047: PPUSH
// task := GetTaskList ( unit ) ;
76048: LD_ADDR_VAR 0 7
76052: PUSH
76053: LD_VAR 0 1
76057: PPUSH
76058: CALL_OW 437
76062: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76063: LD_VAR 0 7
76067: NOT
76068: PUSH
76069: LD_VAR 0 1
76073: PPUSH
76074: LD_VAR 0 2
76078: PPUSH
76079: CALL_OW 308
76083: NOT
76084: AND
76085: IFFALSE 76089
// exit ;
76087: GO 76207
// if IsInArea ( unit , area ) then
76089: LD_VAR 0 1
76093: PPUSH
76094: LD_VAR 0 2
76098: PPUSH
76099: CALL_OW 308
76103: IFFALSE 76121
// begin ComMoveToArea ( unit , goAway ) ;
76105: LD_VAR 0 1
76109: PPUSH
76110: LD_VAR 0 3
76114: PPUSH
76115: CALL_OW 113
// exit ;
76119: GO 76207
// end ; if task [ 1 ] [ 1 ] <> M then
76121: LD_VAR 0 7
76125: PUSH
76126: LD_INT 1
76128: ARRAY
76129: PUSH
76130: LD_INT 1
76132: ARRAY
76133: PUSH
76134: LD_STRING M
76136: NONEQUAL
76137: IFFALSE 76141
// exit ;
76139: GO 76207
// x := task [ 1 ] [ 2 ] ;
76141: LD_ADDR_VAR 0 5
76145: PUSH
76146: LD_VAR 0 7
76150: PUSH
76151: LD_INT 1
76153: ARRAY
76154: PUSH
76155: LD_INT 2
76157: ARRAY
76158: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76159: LD_ADDR_VAR 0 6
76163: PUSH
76164: LD_VAR 0 7
76168: PUSH
76169: LD_INT 1
76171: ARRAY
76172: PUSH
76173: LD_INT 3
76175: ARRAY
76176: ST_TO_ADDR
// if InArea ( x , y , area ) then
76177: LD_VAR 0 5
76181: PPUSH
76182: LD_VAR 0 6
76186: PPUSH
76187: LD_VAR 0 2
76191: PPUSH
76192: CALL_OW 309
76196: IFFALSE 76207
// ComStop ( unit ) ;
76198: LD_VAR 0 1
76202: PPUSH
76203: CALL_OW 141
// end ;
76207: LD_VAR 0 4
76211: RET
// export function Abs ( value ) ; begin
76212: LD_INT 0
76214: PPUSH
// result := value ;
76215: LD_ADDR_VAR 0 2
76219: PUSH
76220: LD_VAR 0 1
76224: ST_TO_ADDR
// if value < 0 then
76225: LD_VAR 0 1
76229: PUSH
76230: LD_INT 0
76232: LESS
76233: IFFALSE 76250
// result := value * - 1 ;
76235: LD_ADDR_VAR 0 2
76239: PUSH
76240: LD_VAR 0 1
76244: PUSH
76245: LD_INT 1
76247: NEG
76248: MUL
76249: ST_TO_ADDR
// end ;
76250: LD_VAR 0 2
76254: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76255: LD_INT 0
76257: PPUSH
76258: PPUSH
76259: PPUSH
76260: PPUSH
76261: PPUSH
76262: PPUSH
76263: PPUSH
76264: PPUSH
// if not unit or not building then
76265: LD_VAR 0 1
76269: NOT
76270: PUSH
76271: LD_VAR 0 2
76275: NOT
76276: OR
76277: IFFALSE 76281
// exit ;
76279: GO 76507
// x := GetX ( building ) ;
76281: LD_ADDR_VAR 0 4
76285: PUSH
76286: LD_VAR 0 2
76290: PPUSH
76291: CALL_OW 250
76295: ST_TO_ADDR
// y := GetY ( building ) ;
76296: LD_ADDR_VAR 0 6
76300: PUSH
76301: LD_VAR 0 2
76305: PPUSH
76306: CALL_OW 251
76310: ST_TO_ADDR
// d := GetDir ( building ) ;
76311: LD_ADDR_VAR 0 8
76315: PUSH
76316: LD_VAR 0 2
76320: PPUSH
76321: CALL_OW 254
76325: ST_TO_ADDR
// r := 4 ;
76326: LD_ADDR_VAR 0 9
76330: PUSH
76331: LD_INT 4
76333: ST_TO_ADDR
// for i := 1 to 5 do
76334: LD_ADDR_VAR 0 10
76338: PUSH
76339: DOUBLE
76340: LD_INT 1
76342: DEC
76343: ST_TO_ADDR
76344: LD_INT 5
76346: PUSH
76347: FOR_TO
76348: IFFALSE 76505
// begin _x := ShiftX ( x , d , r + i ) ;
76350: LD_ADDR_VAR 0 5
76354: PUSH
76355: LD_VAR 0 4
76359: PPUSH
76360: LD_VAR 0 8
76364: PPUSH
76365: LD_VAR 0 9
76369: PUSH
76370: LD_VAR 0 10
76374: PLUS
76375: PPUSH
76376: CALL_OW 272
76380: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76381: LD_ADDR_VAR 0 7
76385: PUSH
76386: LD_VAR 0 6
76390: PPUSH
76391: LD_VAR 0 8
76395: PPUSH
76396: LD_VAR 0 9
76400: PUSH
76401: LD_VAR 0 10
76405: PLUS
76406: PPUSH
76407: CALL_OW 273
76411: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76412: LD_VAR 0 5
76416: PPUSH
76417: LD_VAR 0 7
76421: PPUSH
76422: CALL_OW 488
76426: PUSH
76427: LD_VAR 0 5
76431: PPUSH
76432: LD_VAR 0 7
76436: PPUSH
76437: CALL_OW 428
76441: PPUSH
76442: CALL_OW 247
76446: PUSH
76447: LD_INT 3
76449: PUSH
76450: LD_INT 2
76452: PUSH
76453: EMPTY
76454: LIST
76455: LIST
76456: IN
76457: NOT
76458: AND
76459: IFFALSE 76503
// begin ComMoveXY ( unit , _x , _y ) ;
76461: LD_VAR 0 1
76465: PPUSH
76466: LD_VAR 0 5
76470: PPUSH
76471: LD_VAR 0 7
76475: PPUSH
76476: CALL_OW 111
// result := [ _x , _y ] ;
76480: LD_ADDR_VAR 0 3
76484: PUSH
76485: LD_VAR 0 5
76489: PUSH
76490: LD_VAR 0 7
76494: PUSH
76495: EMPTY
76496: LIST
76497: LIST
76498: ST_TO_ADDR
// exit ;
76499: POP
76500: POP
76501: GO 76507
// end ; end ;
76503: GO 76347
76505: POP
76506: POP
// end ;
76507: LD_VAR 0 3
76511: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76512: LD_INT 0
76514: PPUSH
76515: PPUSH
76516: PPUSH
// result := 0 ;
76517: LD_ADDR_VAR 0 3
76521: PUSH
76522: LD_INT 0
76524: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76525: LD_VAR 0 1
76529: PUSH
76530: LD_INT 0
76532: LESS
76533: PUSH
76534: LD_VAR 0 1
76538: PUSH
76539: LD_INT 8
76541: GREATER
76542: OR
76543: PUSH
76544: LD_VAR 0 2
76548: PUSH
76549: LD_INT 0
76551: LESS
76552: OR
76553: PUSH
76554: LD_VAR 0 2
76558: PUSH
76559: LD_INT 8
76561: GREATER
76562: OR
76563: IFFALSE 76567
// exit ;
76565: GO 76642
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76567: LD_ADDR_VAR 0 4
76571: PUSH
76572: LD_INT 22
76574: PUSH
76575: LD_VAR 0 2
76579: PUSH
76580: EMPTY
76581: LIST
76582: LIST
76583: PPUSH
76584: CALL_OW 69
76588: PUSH
76589: FOR_IN
76590: IFFALSE 76640
// begin un := UnitShoot ( i ) ;
76592: LD_ADDR_VAR 0 5
76596: PUSH
76597: LD_VAR 0 4
76601: PPUSH
76602: CALL_OW 504
76606: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76607: LD_VAR 0 5
76611: PPUSH
76612: CALL_OW 255
76616: PUSH
76617: LD_VAR 0 1
76621: EQUAL
76622: IFFALSE 76638
// begin result := un ;
76624: LD_ADDR_VAR 0 3
76628: PUSH
76629: LD_VAR 0 5
76633: ST_TO_ADDR
// exit ;
76634: POP
76635: POP
76636: GO 76642
// end ; end ;
76638: GO 76589
76640: POP
76641: POP
// end ;
76642: LD_VAR 0 3
76646: RET
// export function GetCargoBay ( units ) ; begin
76647: LD_INT 0
76649: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76650: LD_ADDR_VAR 0 2
76654: PUSH
76655: LD_VAR 0 1
76659: PPUSH
76660: LD_INT 2
76662: PUSH
76663: LD_INT 34
76665: PUSH
76666: LD_INT 12
76668: PUSH
76669: EMPTY
76670: LIST
76671: LIST
76672: PUSH
76673: LD_INT 34
76675: PUSH
76676: LD_INT 51
76678: PUSH
76679: EMPTY
76680: LIST
76681: LIST
76682: PUSH
76683: LD_INT 34
76685: PUSH
76686: LD_INT 32
76688: PUSH
76689: EMPTY
76690: LIST
76691: LIST
76692: PUSH
76693: LD_INT 34
76695: PUSH
76696: LD_INT 89
76698: PUSH
76699: EMPTY
76700: LIST
76701: LIST
76702: PUSH
76703: EMPTY
76704: LIST
76705: LIST
76706: LIST
76707: LIST
76708: LIST
76709: PPUSH
76710: CALL_OW 72
76714: ST_TO_ADDR
// end ;
76715: LD_VAR 0 2
76719: RET
// export function Negate ( value ) ; begin
76720: LD_INT 0
76722: PPUSH
// result := not value ;
76723: LD_ADDR_VAR 0 2
76727: PUSH
76728: LD_VAR 0 1
76732: NOT
76733: ST_TO_ADDR
// end ;
76734: LD_VAR 0 2
76738: RET
// export function Inc ( value ) ; begin
76739: LD_INT 0
76741: PPUSH
// result := value + 1 ;
76742: LD_ADDR_VAR 0 2
76746: PUSH
76747: LD_VAR 0 1
76751: PUSH
76752: LD_INT 1
76754: PLUS
76755: ST_TO_ADDR
// end ;
76756: LD_VAR 0 2
76760: RET
// export function Dec ( value ) ; begin
76761: LD_INT 0
76763: PPUSH
// result := value - 1 ;
76764: LD_ADDR_VAR 0 2
76768: PUSH
76769: LD_VAR 0 1
76773: PUSH
76774: LD_INT 1
76776: MINUS
76777: ST_TO_ADDR
// end ;
76778: LD_VAR 0 2
76782: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76783: LD_INT 0
76785: PPUSH
76786: PPUSH
76787: PPUSH
76788: PPUSH
76789: PPUSH
76790: PPUSH
76791: PPUSH
76792: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76793: LD_VAR 0 1
76797: PPUSH
76798: LD_VAR 0 2
76802: PPUSH
76803: CALL_OW 488
76807: NOT
76808: PUSH
76809: LD_VAR 0 3
76813: PPUSH
76814: LD_VAR 0 4
76818: PPUSH
76819: CALL_OW 488
76823: NOT
76824: OR
76825: IFFALSE 76838
// begin result := - 1 ;
76827: LD_ADDR_VAR 0 5
76831: PUSH
76832: LD_INT 1
76834: NEG
76835: ST_TO_ADDR
// exit ;
76836: GO 77073
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76838: LD_ADDR_VAR 0 12
76842: PUSH
76843: LD_VAR 0 1
76847: PPUSH
76848: LD_VAR 0 2
76852: PPUSH
76853: LD_VAR 0 3
76857: PPUSH
76858: LD_VAR 0 4
76862: PPUSH
76863: CALL 75923 0 4
76867: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76868: LD_ADDR_VAR 0 11
76872: PUSH
76873: LD_VAR 0 1
76877: PPUSH
76878: LD_VAR 0 2
76882: PPUSH
76883: LD_VAR 0 12
76887: PUSH
76888: LD_INT 1
76890: ARRAY
76891: PPUSH
76892: LD_VAR 0 12
76896: PUSH
76897: LD_INT 2
76899: ARRAY
76900: PPUSH
76901: CALL_OW 298
76905: ST_TO_ADDR
// distance := 9999 ;
76906: LD_ADDR_VAR 0 10
76910: PUSH
76911: LD_INT 9999
76913: ST_TO_ADDR
// for i := 0 to 5 do
76914: LD_ADDR_VAR 0 6
76918: PUSH
76919: DOUBLE
76920: LD_INT 0
76922: DEC
76923: ST_TO_ADDR
76924: LD_INT 5
76926: PUSH
76927: FOR_TO
76928: IFFALSE 77071
// begin _x := ShiftX ( x1 , i , centerDist ) ;
76930: LD_ADDR_VAR 0 7
76934: PUSH
76935: LD_VAR 0 1
76939: PPUSH
76940: LD_VAR 0 6
76944: PPUSH
76945: LD_VAR 0 11
76949: PPUSH
76950: CALL_OW 272
76954: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76955: LD_ADDR_VAR 0 8
76959: PUSH
76960: LD_VAR 0 2
76964: PPUSH
76965: LD_VAR 0 6
76969: PPUSH
76970: LD_VAR 0 11
76974: PPUSH
76975: CALL_OW 273
76979: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76980: LD_VAR 0 7
76984: PPUSH
76985: LD_VAR 0 8
76989: PPUSH
76990: CALL_OW 488
76994: NOT
76995: IFFALSE 76999
// continue ;
76997: GO 76927
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
76999: LD_ADDR_VAR 0 9
77003: PUSH
77004: LD_VAR 0 12
77008: PUSH
77009: LD_INT 1
77011: ARRAY
77012: PPUSH
77013: LD_VAR 0 12
77017: PUSH
77018: LD_INT 2
77020: ARRAY
77021: PPUSH
77022: LD_VAR 0 7
77026: PPUSH
77027: LD_VAR 0 8
77031: PPUSH
77032: CALL_OW 298
77036: ST_TO_ADDR
// if tmp < distance then
77037: LD_VAR 0 9
77041: PUSH
77042: LD_VAR 0 10
77046: LESS
77047: IFFALSE 77069
// begin result := i ;
77049: LD_ADDR_VAR 0 5
77053: PUSH
77054: LD_VAR 0 6
77058: ST_TO_ADDR
// distance := tmp ;
77059: LD_ADDR_VAR 0 10
77063: PUSH
77064: LD_VAR 0 9
77068: ST_TO_ADDR
// end ; end ;
77069: GO 76927
77071: POP
77072: POP
// end ;
77073: LD_VAR 0 5
77077: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77078: LD_INT 0
77080: PPUSH
77081: PPUSH
// if not driver or not IsInUnit ( driver ) then
77082: LD_VAR 0 1
77086: NOT
77087: PUSH
77088: LD_VAR 0 1
77092: PPUSH
77093: CALL_OW 310
77097: NOT
77098: OR
77099: IFFALSE 77103
// exit ;
77101: GO 77193
// vehicle := IsInUnit ( driver ) ;
77103: LD_ADDR_VAR 0 3
77107: PUSH
77108: LD_VAR 0 1
77112: PPUSH
77113: CALL_OW 310
77117: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77118: LD_VAR 0 1
77122: PPUSH
77123: LD_STRING \
77125: PUSH
77126: LD_INT 0
77128: PUSH
77129: LD_INT 0
77131: PUSH
77132: LD_INT 0
77134: PUSH
77135: LD_INT 0
77137: PUSH
77138: LD_INT 0
77140: PUSH
77141: LD_INT 0
77143: PUSH
77144: EMPTY
77145: LIST
77146: LIST
77147: LIST
77148: LIST
77149: LIST
77150: LIST
77151: LIST
77152: PUSH
77153: LD_STRING E
77155: PUSH
77156: LD_INT 0
77158: PUSH
77159: LD_INT 0
77161: PUSH
77162: LD_VAR 0 3
77166: PUSH
77167: LD_INT 0
77169: PUSH
77170: LD_INT 0
77172: PUSH
77173: LD_INT 0
77175: PUSH
77176: EMPTY
77177: LIST
77178: LIST
77179: LIST
77180: LIST
77181: LIST
77182: LIST
77183: LIST
77184: PUSH
77185: EMPTY
77186: LIST
77187: LIST
77188: PPUSH
77189: CALL_OW 446
// end ;
77193: LD_VAR 0 2
77197: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77198: LD_INT 0
77200: PPUSH
77201: PPUSH
// if not driver or not IsInUnit ( driver ) then
77202: LD_VAR 0 1
77206: NOT
77207: PUSH
77208: LD_VAR 0 1
77212: PPUSH
77213: CALL_OW 310
77217: NOT
77218: OR
77219: IFFALSE 77223
// exit ;
77221: GO 77313
// vehicle := IsInUnit ( driver ) ;
77223: LD_ADDR_VAR 0 3
77227: PUSH
77228: LD_VAR 0 1
77232: PPUSH
77233: CALL_OW 310
77237: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77238: LD_VAR 0 1
77242: PPUSH
77243: LD_STRING \
77245: PUSH
77246: LD_INT 0
77248: PUSH
77249: LD_INT 0
77251: PUSH
77252: LD_INT 0
77254: PUSH
77255: LD_INT 0
77257: PUSH
77258: LD_INT 0
77260: PUSH
77261: LD_INT 0
77263: PUSH
77264: EMPTY
77265: LIST
77266: LIST
77267: LIST
77268: LIST
77269: LIST
77270: LIST
77271: LIST
77272: PUSH
77273: LD_STRING E
77275: PUSH
77276: LD_INT 0
77278: PUSH
77279: LD_INT 0
77281: PUSH
77282: LD_VAR 0 3
77286: PUSH
77287: LD_INT 0
77289: PUSH
77290: LD_INT 0
77292: PUSH
77293: LD_INT 0
77295: PUSH
77296: EMPTY
77297: LIST
77298: LIST
77299: LIST
77300: LIST
77301: LIST
77302: LIST
77303: LIST
77304: PUSH
77305: EMPTY
77306: LIST
77307: LIST
77308: PPUSH
77309: CALL_OW 447
// end ;
77313: LD_VAR 0 2
77317: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77318: LD_INT 0
77320: PPUSH
77321: PPUSH
77322: PPUSH
// tmp := [ ] ;
77323: LD_ADDR_VAR 0 5
77327: PUSH
77328: EMPTY
77329: ST_TO_ADDR
// for i in units do
77330: LD_ADDR_VAR 0 4
77334: PUSH
77335: LD_VAR 0 1
77339: PUSH
77340: FOR_IN
77341: IFFALSE 77379
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77343: LD_ADDR_VAR 0 5
77347: PUSH
77348: LD_VAR 0 5
77352: PPUSH
77353: LD_VAR 0 5
77357: PUSH
77358: LD_INT 1
77360: PLUS
77361: PPUSH
77362: LD_VAR 0 4
77366: PPUSH
77367: CALL_OW 256
77371: PPUSH
77372: CALL_OW 2
77376: ST_TO_ADDR
77377: GO 77340
77379: POP
77380: POP
// if not tmp then
77381: LD_VAR 0 5
77385: NOT
77386: IFFALSE 77390
// exit ;
77388: GO 77438
// if asc then
77390: LD_VAR 0 2
77394: IFFALSE 77418
// result := SortListByListAsc ( units , tmp ) else
77396: LD_ADDR_VAR 0 3
77400: PUSH
77401: LD_VAR 0 1
77405: PPUSH
77406: LD_VAR 0 5
77410: PPUSH
77411: CALL_OW 76
77415: ST_TO_ADDR
77416: GO 77438
// result := SortListByListDesc ( units , tmp ) ;
77418: LD_ADDR_VAR 0 3
77422: PUSH
77423: LD_VAR 0 1
77427: PPUSH
77428: LD_VAR 0 5
77432: PPUSH
77433: CALL_OW 77
77437: ST_TO_ADDR
// end ;
77438: LD_VAR 0 3
77442: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
77443: LD_INT 0
77445: PPUSH
77446: PPUSH
// task := GetTaskList ( mech ) ;
77447: LD_ADDR_VAR 0 4
77451: PUSH
77452: LD_VAR 0 1
77456: PPUSH
77457: CALL_OW 437
77461: ST_TO_ADDR
// if not task then
77462: LD_VAR 0 4
77466: NOT
77467: IFFALSE 77471
// exit ;
77469: GO 77513
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
77471: LD_ADDR_VAR 0 3
77475: PUSH
77476: LD_VAR 0 4
77480: PUSH
77481: LD_INT 1
77483: ARRAY
77484: PUSH
77485: LD_INT 1
77487: ARRAY
77488: PUSH
77489: LD_STRING r
77491: EQUAL
77492: PUSH
77493: LD_VAR 0 4
77497: PUSH
77498: LD_INT 1
77500: ARRAY
77501: PUSH
77502: LD_INT 4
77504: ARRAY
77505: PUSH
77506: LD_VAR 0 2
77510: EQUAL
77511: AND
77512: ST_TO_ADDR
// end ;
77513: LD_VAR 0 3
77517: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
77518: LD_INT 0
77520: PPUSH
// SetDir ( unit , d ) ;
77521: LD_VAR 0 1
77525: PPUSH
77526: LD_VAR 0 4
77530: PPUSH
77531: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
77535: LD_VAR 0 1
77539: PPUSH
77540: LD_VAR 0 2
77544: PPUSH
77545: LD_VAR 0 3
77549: PPUSH
77550: LD_VAR 0 5
77554: PPUSH
77555: CALL_OW 48
// end ;
77559: LD_VAR 0 6
77563: RET
// export function ToNaturalNumber ( number ) ; begin
77564: LD_INT 0
77566: PPUSH
// result := number div 1 ;
77567: LD_ADDR_VAR 0 2
77571: PUSH
77572: LD_VAR 0 1
77576: PUSH
77577: LD_INT 1
77579: DIV
77580: ST_TO_ADDR
// if number < 0 then
77581: LD_VAR 0 1
77585: PUSH
77586: LD_INT 0
77588: LESS
77589: IFFALSE 77599
// result := 0 ;
77591: LD_ADDR_VAR 0 2
77595: PUSH
77596: LD_INT 0
77598: ST_TO_ADDR
// end ;
77599: LD_VAR 0 2
77603: RET
// export function SortByClass ( units , class ) ; var un ; begin
77604: LD_INT 0
77606: PPUSH
77607: PPUSH
// if not units or not class then
77608: LD_VAR 0 1
77612: NOT
77613: PUSH
77614: LD_VAR 0 2
77618: NOT
77619: OR
77620: IFFALSE 77624
// exit ;
77622: GO 77719
// result := [ ] ;
77624: LD_ADDR_VAR 0 3
77628: PUSH
77629: EMPTY
77630: ST_TO_ADDR
// for un in units do
77631: LD_ADDR_VAR 0 4
77635: PUSH
77636: LD_VAR 0 1
77640: PUSH
77641: FOR_IN
77642: IFFALSE 77717
// if GetClass ( un ) = class then
77644: LD_VAR 0 4
77648: PPUSH
77649: CALL_OW 257
77653: PUSH
77654: LD_VAR 0 2
77658: EQUAL
77659: IFFALSE 77686
// result := Insert ( result , 1 , un ) else
77661: LD_ADDR_VAR 0 3
77665: PUSH
77666: LD_VAR 0 3
77670: PPUSH
77671: LD_INT 1
77673: PPUSH
77674: LD_VAR 0 4
77678: PPUSH
77679: CALL_OW 2
77683: ST_TO_ADDR
77684: GO 77715
// result := Replace ( result , result + 1 , un ) ;
77686: LD_ADDR_VAR 0 3
77690: PUSH
77691: LD_VAR 0 3
77695: PPUSH
77696: LD_VAR 0 3
77700: PUSH
77701: LD_INT 1
77703: PLUS
77704: PPUSH
77705: LD_VAR 0 4
77709: PPUSH
77710: CALL_OW 1
77714: ST_TO_ADDR
77715: GO 77641
77717: POP
77718: POP
// end ;
77719: LD_VAR 0 3
77723: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77724: LD_INT 0
77726: PPUSH
77727: PPUSH
77728: PPUSH
77729: PPUSH
77730: PPUSH
77731: PPUSH
77732: PPUSH
// result := [ ] ;
77733: LD_ADDR_VAR 0 4
77737: PUSH
77738: EMPTY
77739: ST_TO_ADDR
// if x - r < 0 then
77740: LD_VAR 0 1
77744: PUSH
77745: LD_VAR 0 3
77749: MINUS
77750: PUSH
77751: LD_INT 0
77753: LESS
77754: IFFALSE 77766
// min_x := 0 else
77756: LD_ADDR_VAR 0 8
77760: PUSH
77761: LD_INT 0
77763: ST_TO_ADDR
77764: GO 77782
// min_x := x - r ;
77766: LD_ADDR_VAR 0 8
77770: PUSH
77771: LD_VAR 0 1
77775: PUSH
77776: LD_VAR 0 3
77780: MINUS
77781: ST_TO_ADDR
// if y - r < 0 then
77782: LD_VAR 0 2
77786: PUSH
77787: LD_VAR 0 3
77791: MINUS
77792: PUSH
77793: LD_INT 0
77795: LESS
77796: IFFALSE 77808
// min_y := 0 else
77798: LD_ADDR_VAR 0 7
77802: PUSH
77803: LD_INT 0
77805: ST_TO_ADDR
77806: GO 77824
// min_y := y - r ;
77808: LD_ADDR_VAR 0 7
77812: PUSH
77813: LD_VAR 0 2
77817: PUSH
77818: LD_VAR 0 3
77822: MINUS
77823: ST_TO_ADDR
// max_x := x + r ;
77824: LD_ADDR_VAR 0 9
77828: PUSH
77829: LD_VAR 0 1
77833: PUSH
77834: LD_VAR 0 3
77838: PLUS
77839: ST_TO_ADDR
// max_y := y + r ;
77840: LD_ADDR_VAR 0 10
77844: PUSH
77845: LD_VAR 0 2
77849: PUSH
77850: LD_VAR 0 3
77854: PLUS
77855: ST_TO_ADDR
// for _x = min_x to max_x do
77856: LD_ADDR_VAR 0 5
77860: PUSH
77861: DOUBLE
77862: LD_VAR 0 8
77866: DEC
77867: ST_TO_ADDR
77868: LD_VAR 0 9
77872: PUSH
77873: FOR_TO
77874: IFFALSE 77975
// for _y = min_y to max_y do
77876: LD_ADDR_VAR 0 6
77880: PUSH
77881: DOUBLE
77882: LD_VAR 0 7
77886: DEC
77887: ST_TO_ADDR
77888: LD_VAR 0 10
77892: PUSH
77893: FOR_TO
77894: IFFALSE 77971
// begin if not ValidHex ( _x , _y ) then
77896: LD_VAR 0 5
77900: PPUSH
77901: LD_VAR 0 6
77905: PPUSH
77906: CALL_OW 488
77910: NOT
77911: IFFALSE 77915
// continue ;
77913: GO 77893
// if GetResourceTypeXY ( _x , _y ) then
77915: LD_VAR 0 5
77919: PPUSH
77920: LD_VAR 0 6
77924: PPUSH
77925: CALL_OW 283
77929: IFFALSE 77969
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77931: LD_ADDR_VAR 0 4
77935: PUSH
77936: LD_VAR 0 4
77940: PPUSH
77941: LD_VAR 0 4
77945: PUSH
77946: LD_INT 1
77948: PLUS
77949: PPUSH
77950: LD_VAR 0 5
77954: PUSH
77955: LD_VAR 0 6
77959: PUSH
77960: EMPTY
77961: LIST
77962: LIST
77963: PPUSH
77964: CALL_OW 1
77968: ST_TO_ADDR
// end ;
77969: GO 77893
77971: POP
77972: POP
77973: GO 77873
77975: POP
77976: POP
// end ;
77977: LD_VAR 0 4
77981: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
77982: LD_INT 0
77984: PPUSH
77985: PPUSH
77986: PPUSH
77987: PPUSH
77988: PPUSH
77989: PPUSH
77990: PPUSH
77991: PPUSH
// if not units then
77992: LD_VAR 0 1
77996: NOT
77997: IFFALSE 78001
// exit ;
77999: GO 78525
// result := UnitFilter ( units , [ f_ok ] ) ;
78001: LD_ADDR_VAR 0 3
78005: PUSH
78006: LD_VAR 0 1
78010: PPUSH
78011: LD_INT 50
78013: PUSH
78014: EMPTY
78015: LIST
78016: PPUSH
78017: CALL_OW 72
78021: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78022: LD_ADDR_VAR 0 8
78026: PUSH
78027: LD_VAR 0 1
78031: PUSH
78032: LD_INT 1
78034: ARRAY
78035: PPUSH
78036: CALL_OW 255
78040: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78041: LD_ADDR_VAR 0 10
78045: PUSH
78046: LD_INT 29
78048: PUSH
78049: LD_INT 91
78051: PUSH
78052: LD_INT 49
78054: PUSH
78055: EMPTY
78056: LIST
78057: LIST
78058: LIST
78059: ST_TO_ADDR
// if not result then
78060: LD_VAR 0 3
78064: NOT
78065: IFFALSE 78069
// exit ;
78067: GO 78525
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78069: LD_ADDR_VAR 0 5
78073: PUSH
78074: LD_INT 81
78076: PUSH
78077: LD_VAR 0 8
78081: PUSH
78082: EMPTY
78083: LIST
78084: LIST
78085: PPUSH
78086: CALL_OW 69
78090: ST_TO_ADDR
// for i in result do
78091: LD_ADDR_VAR 0 4
78095: PUSH
78096: LD_VAR 0 3
78100: PUSH
78101: FOR_IN
78102: IFFALSE 78523
// begin tag := GetTag ( i ) + 1 ;
78104: LD_ADDR_VAR 0 9
78108: PUSH
78109: LD_VAR 0 4
78113: PPUSH
78114: CALL_OW 110
78118: PUSH
78119: LD_INT 1
78121: PLUS
78122: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78123: LD_ADDR_VAR 0 7
78127: PUSH
78128: LD_VAR 0 4
78132: PPUSH
78133: CALL_OW 250
78137: PPUSH
78138: LD_VAR 0 4
78142: PPUSH
78143: CALL_OW 251
78147: PPUSH
78148: LD_INT 6
78150: PPUSH
78151: CALL 77724 0 3
78155: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78156: LD_VAR 0 4
78160: PPUSH
78161: CALL_OW 247
78165: PUSH
78166: LD_INT 2
78168: EQUAL
78169: PUSH
78170: LD_VAR 0 7
78174: AND
78175: PUSH
78176: LD_VAR 0 4
78180: PPUSH
78181: CALL_OW 264
78185: PUSH
78186: LD_VAR 0 10
78190: IN
78191: NOT
78192: AND
78193: IFFALSE 78232
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78195: LD_VAR 0 4
78199: PPUSH
78200: LD_VAR 0 7
78204: PUSH
78205: LD_INT 1
78207: ARRAY
78208: PUSH
78209: LD_INT 1
78211: ARRAY
78212: PPUSH
78213: LD_VAR 0 7
78217: PUSH
78218: LD_INT 1
78220: ARRAY
78221: PUSH
78222: LD_INT 2
78224: ARRAY
78225: PPUSH
78226: CALL_OW 116
78230: GO 78521
// if path > tag then
78232: LD_VAR 0 2
78236: PUSH
78237: LD_VAR 0 9
78241: GREATER
78242: IFFALSE 78450
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
78244: LD_ADDR_VAR 0 6
78248: PUSH
78249: LD_VAR 0 5
78253: PPUSH
78254: LD_INT 91
78256: PUSH
78257: LD_VAR 0 4
78261: PUSH
78262: LD_INT 8
78264: PUSH
78265: EMPTY
78266: LIST
78267: LIST
78268: LIST
78269: PPUSH
78270: CALL_OW 72
78274: ST_TO_ADDR
// if nearEnemy then
78275: LD_VAR 0 6
78279: IFFALSE 78348
// begin if GetWeapon ( i ) = ru_time_lapser then
78281: LD_VAR 0 4
78285: PPUSH
78286: CALL_OW 264
78290: PUSH
78291: LD_INT 49
78293: EQUAL
78294: IFFALSE 78322
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78296: LD_VAR 0 4
78300: PPUSH
78301: LD_VAR 0 6
78305: PPUSH
78306: LD_VAR 0 4
78310: PPUSH
78311: CALL_OW 74
78315: PPUSH
78316: CALL_OW 112
78320: GO 78346
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
78322: LD_VAR 0 4
78326: PPUSH
78327: LD_VAR 0 6
78331: PPUSH
78332: LD_VAR 0 4
78336: PPUSH
78337: CALL_OW 74
78341: PPUSH
78342: CALL_OW 115
// end else
78346: GO 78448
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78348: LD_VAR 0 4
78352: PPUSH
78353: LD_VAR 0 2
78357: PUSH
78358: LD_VAR 0 9
78362: ARRAY
78363: PUSH
78364: LD_INT 1
78366: ARRAY
78367: PPUSH
78368: LD_VAR 0 2
78372: PUSH
78373: LD_VAR 0 9
78377: ARRAY
78378: PUSH
78379: LD_INT 2
78381: ARRAY
78382: PPUSH
78383: CALL_OW 297
78387: PUSH
78388: LD_INT 6
78390: GREATER
78391: IFFALSE 78434
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78393: LD_VAR 0 4
78397: PPUSH
78398: LD_VAR 0 2
78402: PUSH
78403: LD_VAR 0 9
78407: ARRAY
78408: PUSH
78409: LD_INT 1
78411: ARRAY
78412: PPUSH
78413: LD_VAR 0 2
78417: PUSH
78418: LD_VAR 0 9
78422: ARRAY
78423: PUSH
78424: LD_INT 2
78426: ARRAY
78427: PPUSH
78428: CALL_OW 114
78432: GO 78448
// SetTag ( i , tag ) ;
78434: LD_VAR 0 4
78438: PPUSH
78439: LD_VAR 0 9
78443: PPUSH
78444: CALL_OW 109
// end else
78448: GO 78521
// if enemy then
78450: LD_VAR 0 5
78454: IFFALSE 78521
// begin if GetWeapon ( i ) = ru_time_lapser then
78456: LD_VAR 0 4
78460: PPUSH
78461: CALL_OW 264
78465: PUSH
78466: LD_INT 49
78468: EQUAL
78469: IFFALSE 78497
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
78471: LD_VAR 0 4
78475: PPUSH
78476: LD_VAR 0 5
78480: PPUSH
78481: LD_VAR 0 4
78485: PPUSH
78486: CALL_OW 74
78490: PPUSH
78491: CALL_OW 112
78495: GO 78521
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
78497: LD_VAR 0 4
78501: PPUSH
78502: LD_VAR 0 5
78506: PPUSH
78507: LD_VAR 0 4
78511: PPUSH
78512: CALL_OW 74
78516: PPUSH
78517: CALL_OW 115
// end ; end ;
78521: GO 78101
78523: POP
78524: POP
// end ;
78525: LD_VAR 0 3
78529: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
78530: LD_INT 0
78532: PPUSH
78533: PPUSH
78534: PPUSH
// if not unit or IsInUnit ( unit ) then
78535: LD_VAR 0 1
78539: NOT
78540: PUSH
78541: LD_VAR 0 1
78545: PPUSH
78546: CALL_OW 310
78550: OR
78551: IFFALSE 78555
// exit ;
78553: GO 78646
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
78555: LD_ADDR_VAR 0 4
78559: PUSH
78560: LD_VAR 0 1
78564: PPUSH
78565: CALL_OW 250
78569: PPUSH
78570: LD_VAR 0 2
78574: PPUSH
78575: LD_INT 1
78577: PPUSH
78578: CALL_OW 272
78582: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
78583: LD_ADDR_VAR 0 5
78587: PUSH
78588: LD_VAR 0 1
78592: PPUSH
78593: CALL_OW 251
78597: PPUSH
78598: LD_VAR 0 2
78602: PPUSH
78603: LD_INT 1
78605: PPUSH
78606: CALL_OW 273
78610: ST_TO_ADDR
// if ValidHex ( x , y ) then
78611: LD_VAR 0 4
78615: PPUSH
78616: LD_VAR 0 5
78620: PPUSH
78621: CALL_OW 488
78625: IFFALSE 78646
// ComTurnXY ( unit , x , y ) ;
78627: LD_VAR 0 1
78631: PPUSH
78632: LD_VAR 0 4
78636: PPUSH
78637: LD_VAR 0 5
78641: PPUSH
78642: CALL_OW 118
// end ;
78646: LD_VAR 0 3
78650: RET
// export function SeeUnits ( side , units ) ; var i ; begin
78651: LD_INT 0
78653: PPUSH
78654: PPUSH
// result := false ;
78655: LD_ADDR_VAR 0 3
78659: PUSH
78660: LD_INT 0
78662: ST_TO_ADDR
// if not units then
78663: LD_VAR 0 2
78667: NOT
78668: IFFALSE 78672
// exit ;
78670: GO 78717
// for i in units do
78672: LD_ADDR_VAR 0 4
78676: PUSH
78677: LD_VAR 0 2
78681: PUSH
78682: FOR_IN
78683: IFFALSE 78715
// if See ( side , i ) then
78685: LD_VAR 0 1
78689: PPUSH
78690: LD_VAR 0 4
78694: PPUSH
78695: CALL_OW 292
78699: IFFALSE 78713
// begin result := true ;
78701: LD_ADDR_VAR 0 3
78705: PUSH
78706: LD_INT 1
78708: ST_TO_ADDR
// exit ;
78709: POP
78710: POP
78711: GO 78717
// end ;
78713: GO 78682
78715: POP
78716: POP
// end ;
78717: LD_VAR 0 3
78721: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
78722: LD_INT 0
78724: PPUSH
78725: PPUSH
78726: PPUSH
78727: PPUSH
// if not unit or not points then
78728: LD_VAR 0 1
78732: NOT
78733: PUSH
78734: LD_VAR 0 2
78738: NOT
78739: OR
78740: IFFALSE 78744
// exit ;
78742: GO 78834
// dist := 99999 ;
78744: LD_ADDR_VAR 0 5
78748: PUSH
78749: LD_INT 99999
78751: ST_TO_ADDR
// for i in points do
78752: LD_ADDR_VAR 0 4
78756: PUSH
78757: LD_VAR 0 2
78761: PUSH
78762: FOR_IN
78763: IFFALSE 78832
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
78765: LD_ADDR_VAR 0 6
78769: PUSH
78770: LD_VAR 0 1
78774: PPUSH
78775: LD_VAR 0 4
78779: PUSH
78780: LD_INT 1
78782: ARRAY
78783: PPUSH
78784: LD_VAR 0 4
78788: PUSH
78789: LD_INT 2
78791: ARRAY
78792: PPUSH
78793: CALL_OW 297
78797: ST_TO_ADDR
// if tmpDist < dist then
78798: LD_VAR 0 6
78802: PUSH
78803: LD_VAR 0 5
78807: LESS
78808: IFFALSE 78830
// begin result := i ;
78810: LD_ADDR_VAR 0 3
78814: PUSH
78815: LD_VAR 0 4
78819: ST_TO_ADDR
// dist := tmpDist ;
78820: LD_ADDR_VAR 0 5
78824: PUSH
78825: LD_VAR 0 6
78829: ST_TO_ADDR
// end ; end ;
78830: GO 78762
78832: POP
78833: POP
// end ;
78834: LD_VAR 0 3
78838: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
78839: LD_INT 0
78841: PPUSH
// uc_side := side ;
78842: LD_ADDR_OWVAR 20
78846: PUSH
78847: LD_VAR 0 1
78851: ST_TO_ADDR
// uc_nation := 3 ;
78852: LD_ADDR_OWVAR 21
78856: PUSH
78857: LD_INT 3
78859: ST_TO_ADDR
// vc_chassis := 25 ;
78860: LD_ADDR_OWVAR 37
78864: PUSH
78865: LD_INT 25
78867: ST_TO_ADDR
// vc_engine := engine_siberite ;
78868: LD_ADDR_OWVAR 39
78872: PUSH
78873: LD_INT 3
78875: ST_TO_ADDR
// vc_control := control_computer ;
78876: LD_ADDR_OWVAR 38
78880: PUSH
78881: LD_INT 3
78883: ST_TO_ADDR
// vc_weapon := 59 ;
78884: LD_ADDR_OWVAR 40
78888: PUSH
78889: LD_INT 59
78891: ST_TO_ADDR
// result := CreateVehicle ;
78892: LD_ADDR_VAR 0 5
78896: PUSH
78897: CALL_OW 45
78901: ST_TO_ADDR
// SetDir ( result , d ) ;
78902: LD_VAR 0 5
78906: PPUSH
78907: LD_VAR 0 4
78911: PPUSH
78912: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
78916: LD_VAR 0 5
78920: PPUSH
78921: LD_VAR 0 2
78925: PPUSH
78926: LD_VAR 0 3
78930: PPUSH
78931: LD_INT 0
78933: PPUSH
78934: CALL_OW 48
// end ;
78938: LD_VAR 0 5
78942: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
78943: LD_INT 0
78945: PPUSH
78946: PPUSH
78947: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
78948: LD_ADDR_VAR 0 2
78952: PUSH
78953: LD_INT 0
78955: PUSH
78956: LD_INT 0
78958: PUSH
78959: LD_INT 0
78961: PUSH
78962: LD_INT 0
78964: PUSH
78965: EMPTY
78966: LIST
78967: LIST
78968: LIST
78969: LIST
78970: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
78971: LD_VAR 0 1
78975: NOT
78976: PUSH
78977: LD_VAR 0 1
78981: PPUSH
78982: CALL_OW 264
78986: PUSH
78987: LD_INT 12
78989: PUSH
78990: LD_INT 51
78992: PUSH
78993: LD_INT 32
78995: PUSH
78996: LD_INT 89
78998: PUSH
78999: EMPTY
79000: LIST
79001: LIST
79002: LIST
79003: LIST
79004: IN
79005: NOT
79006: OR
79007: IFFALSE 79011
// exit ;
79009: GO 79109
// for i := 1 to 3 do
79011: LD_ADDR_VAR 0 3
79015: PUSH
79016: DOUBLE
79017: LD_INT 1
79019: DEC
79020: ST_TO_ADDR
79021: LD_INT 3
79023: PUSH
79024: FOR_TO
79025: IFFALSE 79107
// begin tmp := GetCargo ( cargo , i ) ;
79027: LD_ADDR_VAR 0 4
79031: PUSH
79032: LD_VAR 0 1
79036: PPUSH
79037: LD_VAR 0 3
79041: PPUSH
79042: CALL_OW 289
79046: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79047: LD_ADDR_VAR 0 2
79051: PUSH
79052: LD_VAR 0 2
79056: PPUSH
79057: LD_VAR 0 3
79061: PPUSH
79062: LD_VAR 0 4
79066: PPUSH
79067: CALL_OW 1
79071: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79072: LD_ADDR_VAR 0 2
79076: PUSH
79077: LD_VAR 0 2
79081: PPUSH
79082: LD_INT 4
79084: PPUSH
79085: LD_VAR 0 2
79089: PUSH
79090: LD_INT 4
79092: ARRAY
79093: PUSH
79094: LD_VAR 0 4
79098: PLUS
79099: PPUSH
79100: CALL_OW 1
79104: ST_TO_ADDR
// end ;
79105: GO 79024
79107: POP
79108: POP
// end ;
79109: LD_VAR 0 2
79113: RET
// export function Length ( array ) ; begin
79114: LD_INT 0
79116: PPUSH
// result := array + 0 ;
79117: LD_ADDR_VAR 0 2
79121: PUSH
79122: LD_VAR 0 1
79126: PUSH
79127: LD_INT 0
79129: PLUS
79130: ST_TO_ADDR
// end ;
79131: LD_VAR 0 2
79135: RET
// export function PrepareArray ( array ) ; begin
79136: LD_INT 0
79138: PPUSH
// result := array diff 0 ;
79139: LD_ADDR_VAR 0 2
79143: PUSH
79144: LD_VAR 0 1
79148: PUSH
79149: LD_INT 0
79151: DIFF
79152: ST_TO_ADDR
// if not result [ 1 ] then
79153: LD_VAR 0 2
79157: PUSH
79158: LD_INT 1
79160: ARRAY
79161: NOT
79162: IFFALSE 79182
// result := Delete ( result , 1 ) ;
79164: LD_ADDR_VAR 0 2
79168: PUSH
79169: LD_VAR 0 2
79173: PPUSH
79174: LD_INT 1
79176: PPUSH
79177: CALL_OW 3
79181: ST_TO_ADDR
// end ;
79182: LD_VAR 0 2
79186: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
79187: LD_INT 0
79189: PPUSH
79190: PPUSH
79191: PPUSH
79192: PPUSH
// sibRocketRange := 25 ;
79193: LD_ADDR_VAR 0 6
79197: PUSH
79198: LD_INT 25
79200: ST_TO_ADDR
// result := false ;
79201: LD_ADDR_VAR 0 4
79205: PUSH
79206: LD_INT 0
79208: ST_TO_ADDR
// for i := 0 to 5 do
79209: LD_ADDR_VAR 0 5
79213: PUSH
79214: DOUBLE
79215: LD_INT 0
79217: DEC
79218: ST_TO_ADDR
79219: LD_INT 5
79221: PUSH
79222: FOR_TO
79223: IFFALSE 79290
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
79225: LD_VAR 0 1
79229: PPUSH
79230: LD_VAR 0 5
79234: PPUSH
79235: LD_VAR 0 6
79239: PPUSH
79240: CALL_OW 272
79244: PPUSH
79245: LD_VAR 0 2
79249: PPUSH
79250: LD_VAR 0 5
79254: PPUSH
79255: LD_VAR 0 6
79259: PPUSH
79260: CALL_OW 273
79264: PPUSH
79265: LD_VAR 0 3
79269: PPUSH
79270: CALL_OW 309
79274: IFFALSE 79288
// begin result := true ;
79276: LD_ADDR_VAR 0 4
79280: PUSH
79281: LD_INT 1
79283: ST_TO_ADDR
// exit ;
79284: POP
79285: POP
79286: GO 79292
// end ;
79288: GO 79222
79290: POP
79291: POP
// end ;
79292: LD_VAR 0 4
79296: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
79297: LD_INT 0
79299: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
79300: LD_VAR 0 1
79304: PPUSH
79305: LD_VAR 0 2
79309: PPUSH
79310: LD_INT 0
79312: PPUSH
79313: LD_INT 0
79315: PPUSH
79316: LD_INT 1
79318: PPUSH
79319: LD_INT 0
79321: PPUSH
79322: CALL_OW 587
// end ; end_of_file
79326: LD_VAR 0 3
79330: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79331: LD_VAR 0 1
79335: PPUSH
79336: LD_VAR 0 2
79340: PPUSH
79341: LD_VAR 0 3
79345: PPUSH
79346: LD_VAR 0 4
79350: PPUSH
79351: LD_VAR 0 5
79355: PPUSH
79356: LD_VAR 0 6
79360: PPUSH
79361: CALL 17819 0 6
// end ;
79365: PPOPN 6
79367: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
79368: LD_INT 0
79370: PPUSH
// begin if not units then
79371: LD_VAR 0 1
79375: NOT
79376: IFFALSE 79380
// exit ;
79378: GO 79380
// end ;
79380: PPOPN 7
79382: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79383: CALL 17723 0 0
// end ;
79387: PPOPN 1
79389: END
