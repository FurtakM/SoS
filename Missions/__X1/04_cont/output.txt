// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// PrepareArabian ;
   8: CALL 1920 0 0
// PrepareAmerican ;
  12: CALL 6335 0 0
// PrepareRussian ;
  16: CALL 2837 0 0
// Action ;
  20: CALL 7895 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 2 ) ;
  30: LD_INT 2
  32: PPUSH
  33: CALL_OW 344
// end ;
  37: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 03_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 03_
  56: ST_TO_ADDR
// baseConstructed := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// labConstructed := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// russianAlert := false ;
  81: LD_ADDR_EXP 9
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// activeGrishkoAI := true ;
  89: LD_ADDR_EXP 10
  93: PUSH
  94: LD_INT 1
  96: ST_TO_ADDR
// allowHeikeAttack := false ;
  97: LD_ADDR_EXP 11
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// allowToPatrol := false ;
 105: LD_ADDR_EXP 12
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// omicronFall := false ;
 113: LD_ADDR_EXP 13
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// startAttackOnOmicron := false ;
 121: LD_ADDR_EXP 6
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// kirovDestroyed := false ;
 129: LD_ADDR_EXP 15
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// beriaDestroyed := false ;
 137: LD_ADDR_EXP 16
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// kaganDestroyed := false ;
 145: LD_ADDR_EXP 17
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// retreatFromOmicron := false ;
 153: LD_ADDR_EXP 19
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// spottedByPatrol := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// escapeCounter := 0 ;
 169: LD_ADDR_EXP 18
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// loseCounter := 0 ;
 177: LD_ADDR_EXP 14
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// labCaptured := false ;
 185: LD_ADDR_EXP 20
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 193: LD_ADDR_EXP 8
 197: PUSH
 198: LD_INT 3
 200: PUSH
 201: LD_INT 4
 203: PUSH
 204: LD_INT 5
 206: PUSH
 207: LD_INT 6
 209: PUSH
 210: LD_INT 7
 212: PUSH
 213: LD_INT 8
 215: PUSH
 216: EMPTY
 217: LIST
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: ST_TO_ADDR
// end ; end_of_file
 224: LD_VAR 0 1
 228: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 229: LD_INT 0
 231: PPUSH
 232: PPUSH
// if exist_mode then
 233: LD_VAR 0 2
 237: IFFALSE 262
// unit := CreateCharacter ( prefix & ident ) else
 239: LD_ADDR_VAR 0 5
 243: PUSH
 244: LD_VAR 0 3
 248: PUSH
 249: LD_VAR 0 1
 253: STR
 254: PPUSH
 255: CALL_OW 34
 259: ST_TO_ADDR
 260: GO 277
// unit := NewCharacter ( ident ) ;
 262: LD_ADDR_VAR 0 5
 266: PUSH
 267: LD_VAR 0 1
 271: PPUSH
 272: CALL_OW 25
 276: ST_TO_ADDR
// result := unit ;
 277: LD_ADDR_VAR 0 4
 281: PUSH
 282: LD_VAR 0 5
 286: ST_TO_ADDR
// end ;
 287: LD_VAR 0 4
 291: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 292: LD_INT 0
 294: PPUSH
// uc_side := side ;
 295: LD_ADDR_OWVAR 20
 299: PUSH
 300: LD_VAR 0 1
 304: ST_TO_ADDR
// uc_nation := nation ;
 305: LD_ADDR_OWVAR 21
 309: PUSH
 310: LD_VAR 0 2
 314: ST_TO_ADDR
// vc_chassis := chassis ;
 315: LD_ADDR_OWVAR 37
 319: PUSH
 320: LD_VAR 0 3
 324: ST_TO_ADDR
// vc_engine := engine ;
 325: LD_ADDR_OWVAR 39
 329: PUSH
 330: LD_VAR 0 4
 334: ST_TO_ADDR
// vc_control := control ;
 335: LD_ADDR_OWVAR 38
 339: PUSH
 340: LD_VAR 0 5
 344: ST_TO_ADDR
// vc_weapon := weapon ;
 345: LD_ADDR_OWVAR 40
 349: PUSH
 350: LD_VAR 0 6
 354: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 355: LD_ADDR_OWVAR 41
 359: PUSH
 360: LD_VAR 0 7
 364: ST_TO_ADDR
// result := CreateVehicle ;
 365: LD_ADDR_VAR 0 8
 369: PUSH
 370: CALL_OW 45
 374: ST_TO_ADDR
// end ;
 375: LD_VAR 0 8
 379: RET
// export function SayX ( units , ident ) ; var i ; begin
 380: LD_INT 0
 382: PPUSH
 383: PPUSH
// result := false ;
 384: LD_ADDR_VAR 0 3
 388: PUSH
 389: LD_INT 0
 391: ST_TO_ADDR
// if not units then
 392: LD_VAR 0 1
 396: NOT
 397: IFFALSE 401
// exit ;
 399: GO 455
// for i in units do
 401: LD_ADDR_VAR 0 4
 405: PUSH
 406: LD_VAR 0 1
 410: PUSH
 411: FOR_IN
 412: IFFALSE 453
// if IsOk ( i ) then
 414: LD_VAR 0 4
 418: PPUSH
 419: CALL_OW 302
 423: IFFALSE 451
// begin Say ( i , ident ) ;
 425: LD_VAR 0 4
 429: PPUSH
 430: LD_VAR 0 2
 434: PPUSH
 435: CALL_OW 88
// result := i ;
 439: LD_ADDR_VAR 0 3
 443: PUSH
 444: LD_VAR 0 4
 448: ST_TO_ADDR
// break ;
 449: GO 453
// end ;
 451: GO 411
 453: POP
 454: POP
// end ;
 455: LD_VAR 0 3
 459: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 460: LD_INT 0
 462: PPUSH
 463: PPUSH
// InitUc ;
 464: CALL_OW 18
// InitHc ;
 468: CALL_OW 19
// uc_side := 0 ;
 472: LD_ADDR_OWVAR 20
 476: PUSH
 477: LD_INT 0
 479: ST_TO_ADDR
// uc_nation := 0 ;
 480: LD_ADDR_OWVAR 21
 484: PUSH
 485: LD_INT 0
 487: ST_TO_ADDR
// for i = 1 to amount do
 488: LD_ADDR_VAR 0 4
 492: PUSH
 493: DOUBLE
 494: LD_INT 1
 496: DEC
 497: ST_TO_ADDR
 498: LD_VAR 0 2
 502: PUSH
 503: FOR_TO
 504: IFFALSE 586
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 506: LD_ADDR_OWVAR 29
 510: PUSH
 511: LD_INT 9
 513: PPUSH
 514: LD_INT 12
 516: PPUSH
 517: CALL_OW 12
 521: PUSH
 522: LD_INT 9
 524: PPUSH
 525: LD_INT 12
 527: PPUSH
 528: CALL_OW 12
 532: PUSH
 533: EMPTY
 534: LIST
 535: LIST
 536: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 537: LD_ADDR_OWVAR 35
 541: PUSH
 542: LD_INT 1
 544: NEG
 545: PPUSH
 546: LD_INT 1
 548: PPUSH
 549: CALL_OW 12
 553: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 554: LD_INT 0
 556: PPUSH
 557: LD_INT 12
 559: PPUSH
 560: LD_INT 1
 562: PPUSH
 563: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 567: CALL_OW 44
 571: PPUSH
 572: LD_VAR 0 1
 576: PPUSH
 577: LD_INT 0
 579: PPUSH
 580: CALL_OW 49
// end ;
 584: GO 503
 586: POP
 587: POP
// InitHc ;
 588: CALL_OW 19
// end ;
 592: LD_VAR 0 3
 596: RET
// export function PrepareNature ( forest ) ; var i ; begin
 597: LD_INT 0
 599: PPUSH
 600: PPUSH
// SpawnApeman ( forest , [ 6 , 5 , 4 ] [ Difficulty ] ) ;
 601: LD_VAR 0 1
 605: PPUSH
 606: LD_INT 6
 608: PUSH
 609: LD_INT 5
 611: PUSH
 612: LD_INT 4
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: LIST
 619: PUSH
 620: LD_OWVAR 67
 624: ARRAY
 625: PPUSH
 626: CALL 460 0 2
// for i := 1 to 3 do
 630: LD_ADDR_VAR 0 3
 634: PUSH
 635: DOUBLE
 636: LD_INT 1
 638: DEC
 639: ST_TO_ADDR
 640: LD_INT 3
 642: PUSH
 643: FOR_TO
 644: IFFALSE 681
// begin hc_class := 21 ;
 646: LD_ADDR_OWVAR 28
 650: PUSH
 651: LD_INT 21
 653: ST_TO_ADDR
// hc_gallery :=  ;
 654: LD_ADDR_OWVAR 33
 658: PUSH
 659: LD_STRING 
 661: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 662: CALL_OW 44
 666: PPUSH
 667: LD_VAR 0 1
 671: PPUSH
 672: LD_INT 0
 674: PPUSH
 675: CALL_OW 49
// end ;
 679: GO 643
 681: POP
 682: POP
// for i := 1 to 2 do
 683: LD_ADDR_VAR 0 3
 687: PUSH
 688: DOUBLE
 689: LD_INT 1
 691: DEC
 692: ST_TO_ADDR
 693: LD_INT 2
 695: PUSH
 696: FOR_TO
 697: IFFALSE 734
// begin hc_class := 18 ;
 699: LD_ADDR_OWVAR 28
 703: PUSH
 704: LD_INT 18
 706: ST_TO_ADDR
// hc_gallery :=  ;
 707: LD_ADDR_OWVAR 33
 711: PUSH
 712: LD_STRING 
 714: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 715: CALL_OW 44
 719: PPUSH
 720: LD_VAR 0 1
 724: PPUSH
 725: LD_INT 0
 727: PPUSH
 728: CALL_OW 49
// end ;
 732: GO 696
 734: POP
 735: POP
// for i := 1 to 2 do
 736: LD_ADDR_VAR 0 3
 740: PUSH
 741: DOUBLE
 742: LD_INT 1
 744: DEC
 745: ST_TO_ADDR
 746: LD_INT 2
 748: PUSH
 749: FOR_TO
 750: IFFALSE 787
// begin hc_class := 13 ;
 752: LD_ADDR_OWVAR 28
 756: PUSH
 757: LD_INT 13
 759: ST_TO_ADDR
// hc_gallery :=  ;
 760: LD_ADDR_OWVAR 33
 764: PUSH
 765: LD_STRING 
 767: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 768: CALL_OW 44
 772: PPUSH
 773: LD_VAR 0 1
 777: PPUSH
 778: LD_INT 0
 780: PPUSH
 781: CALL_OW 49
// end ;
 785: GO 749
 787: POP
 788: POP
// end ;
 789: LD_VAR 0 2
 793: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 794: LD_INT 0
 796: PPUSH
 797: PPUSH
 798: PPUSH
// if not observer or not unit then
 799: LD_VAR 0 1
 803: NOT
 804: PUSH
 805: LD_VAR 0 2
 809: NOT
 810: OR
 811: IFFALSE 815
// exit ;
 813: GO 863
// if not See ( GetSide ( observer ) , unit ) then
 815: LD_VAR 0 1
 819: PPUSH
 820: CALL_OW 255
 824: PPUSH
 825: LD_VAR 0 2
 829: PPUSH
 830: CALL_OW 292
 834: NOT
 835: IFFALSE 839
// exit ;
 837: GO 863
// result := GetDistUnits ( observer , unit ) < 12 ;
 839: LD_ADDR_VAR 0 3
 843: PUSH
 844: LD_VAR 0 1
 848: PPUSH
 849: LD_VAR 0 2
 853: PPUSH
 854: CALL_OW 296
 858: PUSH
 859: LD_INT 12
 861: LESS
 862: ST_TO_ADDR
// end ;
 863: LD_VAR 0 3
 867: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 868: LD_INT 0
 870: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 871: LD_VAR 0 2
 875: PUSH
 876: LD_INT 1
 878: ARRAY
 879: PPUSH
 880: LD_VAR 0 2
 884: PUSH
 885: LD_INT 2
 887: ARRAY
 888: PPUSH
 889: CALL_OW 488
 893: PUSH
 894: LD_VAR 0 2
 898: PUSH
 899: LD_INT 1
 901: ARRAY
 902: PPUSH
 903: LD_VAR 0 2
 907: PUSH
 908: LD_INT 2
 910: ARRAY
 911: PPUSH
 912: CALL_OW 428
 916: PUSH
 917: LD_INT 0
 919: EQUAL
 920: AND
 921: IFFALSE 955
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 923: LD_VAR 0 1
 927: PPUSH
 928: LD_VAR 0 2
 932: PUSH
 933: LD_INT 1
 935: ARRAY
 936: PPUSH
 937: LD_VAR 0 2
 941: PUSH
 942: LD_INT 2
 944: ARRAY
 945: PPUSH
 946: LD_VAR 0 3
 950: PPUSH
 951: CALL_OW 48
// end ;
 955: LD_VAR 0 4
 959: RET
// export function Video ( mode ) ; begin
 960: LD_INT 0
 962: PPUSH
// ingame_video = mode ;
 963: LD_ADDR_OWVAR 52
 967: PUSH
 968: LD_VAR 0 1
 972: ST_TO_ADDR
// interface_hidden = mode ;
 973: LD_ADDR_OWVAR 54
 977: PUSH
 978: LD_VAR 0 1
 982: ST_TO_ADDR
// end ;
 983: LD_VAR 0 2
 987: RET
// export function ReverseArray ( array ) ; var i ; begin
 988: LD_INT 0
 990: PPUSH
 991: PPUSH
// if not array then
 992: LD_VAR 0 1
 996: NOT
 997: IFFALSE 1001
// exit ;
 999: GO 1059
// result := [ ] ;
1001: LD_ADDR_VAR 0 2
1005: PUSH
1006: EMPTY
1007: ST_TO_ADDR
// for i := 1 to array do
1008: LD_ADDR_VAR 0 3
1012: PUSH
1013: DOUBLE
1014: LD_INT 1
1016: DEC
1017: ST_TO_ADDR
1018: LD_VAR 0 1
1022: PUSH
1023: FOR_TO
1024: IFFALSE 1057
// result := Insert ( result , 1 , array [ i ] ) ;
1026: LD_ADDR_VAR 0 2
1030: PUSH
1031: LD_VAR 0 2
1035: PPUSH
1036: LD_INT 1
1038: PPUSH
1039: LD_VAR 0 1
1043: PUSH
1044: LD_VAR 0 3
1048: ARRAY
1049: PPUSH
1050: CALL_OW 2
1054: ST_TO_ADDR
1055: GO 1023
1057: POP
1058: POP
// end ;
1059: LD_VAR 0 2
1063: RET
// export function ComExit ( unit ) ; begin
1064: LD_INT 0
1066: PPUSH
// result := IsInUnit ( unit ) ;
1067: LD_ADDR_VAR 0 2
1071: PUSH
1072: LD_VAR 0 1
1076: PPUSH
1077: CALL_OW 310
1081: ST_TO_ADDR
// if not result then
1082: LD_VAR 0 2
1086: NOT
1087: IFFALSE 1091
// exit ;
1089: GO 1126
// if GetType ( result ) = unit_vehicle then
1091: LD_VAR 0 2
1095: PPUSH
1096: CALL_OW 247
1100: PUSH
1101: LD_INT 2
1103: EQUAL
1104: IFFALSE 1117
// ComExitVehicle ( unit ) else
1106: LD_VAR 0 1
1110: PPUSH
1111: CALL_OW 121
1115: GO 1126
// ComExitBuilding ( unit ) ;
1117: LD_VAR 0 1
1121: PPUSH
1122: CALL_OW 122
// end ;
1126: LD_VAR 0 2
1130: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1131: LD_INT 0
1133: PPUSH
1134: PPUSH
// if not side or not nation then
1135: LD_VAR 0 1
1139: NOT
1140: PUSH
1141: LD_VAR 0 2
1145: NOT
1146: OR
1147: IFFALSE 1151
// exit ;
1149: GO 1915
// case nation of nation_american :
1151: LD_VAR 0 2
1155: PUSH
1156: LD_INT 1
1158: DOUBLE
1159: EQUAL
1160: IFTRUE 1164
1162: GO 1378
1164: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1165: LD_ADDR_VAR 0 4
1169: PUSH
1170: LD_INT 35
1172: PUSH
1173: LD_INT 45
1175: PUSH
1176: LD_INT 46
1178: PUSH
1179: LD_INT 47
1181: PUSH
1182: LD_INT 82
1184: PUSH
1185: LD_INT 83
1187: PUSH
1188: LD_INT 84
1190: PUSH
1191: LD_INT 85
1193: PUSH
1194: LD_INT 86
1196: PUSH
1197: LD_INT 1
1199: PUSH
1200: LD_INT 2
1202: PUSH
1203: LD_INT 6
1205: PUSH
1206: LD_INT 15
1208: PUSH
1209: LD_INT 16
1211: PUSH
1212: LD_INT 7
1214: PUSH
1215: LD_INT 12
1217: PUSH
1218: LD_INT 13
1220: PUSH
1221: LD_INT 10
1223: PUSH
1224: LD_INT 14
1226: PUSH
1227: LD_INT 20
1229: PUSH
1230: LD_INT 21
1232: PUSH
1233: LD_INT 22
1235: PUSH
1236: LD_INT 25
1238: PUSH
1239: LD_INT 32
1241: PUSH
1242: LD_INT 27
1244: PUSH
1245: LD_INT 36
1247: PUSH
1248: LD_INT 69
1250: PUSH
1251: LD_INT 39
1253: PUSH
1254: LD_INT 34
1256: PUSH
1257: LD_INT 40
1259: PUSH
1260: LD_INT 48
1262: PUSH
1263: LD_INT 49
1265: PUSH
1266: LD_INT 50
1268: PUSH
1269: LD_INT 51
1271: PUSH
1272: LD_INT 52
1274: PUSH
1275: LD_INT 53
1277: PUSH
1278: LD_INT 54
1280: PUSH
1281: LD_INT 55
1283: PUSH
1284: LD_INT 56
1286: PUSH
1287: LD_INT 57
1289: PUSH
1290: LD_INT 58
1292: PUSH
1293: LD_INT 59
1295: PUSH
1296: LD_INT 60
1298: PUSH
1299: LD_INT 61
1301: PUSH
1302: LD_INT 62
1304: PUSH
1305: LD_INT 80
1307: PUSH
1308: LD_INT 82
1310: PUSH
1311: LD_INT 83
1313: PUSH
1314: LD_INT 84
1316: PUSH
1317: LD_INT 85
1319: PUSH
1320: LD_INT 86
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: LIST
1375: ST_TO_ADDR
1376: GO 1839
1378: LD_INT 2
1380: DOUBLE
1381: EQUAL
1382: IFTRUE 1386
1384: GO 1608
1386: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1387: LD_ADDR_VAR 0 4
1391: PUSH
1392: LD_INT 35
1394: PUSH
1395: LD_INT 45
1397: PUSH
1398: LD_INT 46
1400: PUSH
1401: LD_INT 47
1403: PUSH
1404: LD_INT 82
1406: PUSH
1407: LD_INT 83
1409: PUSH
1410: LD_INT 84
1412: PUSH
1413: LD_INT 85
1415: PUSH
1416: LD_INT 87
1418: PUSH
1419: LD_INT 70
1421: PUSH
1422: LD_INT 1
1424: PUSH
1425: LD_INT 11
1427: PUSH
1428: LD_INT 3
1430: PUSH
1431: LD_INT 4
1433: PUSH
1434: LD_INT 5
1436: PUSH
1437: LD_INT 6
1439: PUSH
1440: LD_INT 15
1442: PUSH
1443: LD_INT 18
1445: PUSH
1446: LD_INT 7
1448: PUSH
1449: LD_INT 17
1451: PUSH
1452: LD_INT 8
1454: PUSH
1455: LD_INT 20
1457: PUSH
1458: LD_INT 21
1460: PUSH
1461: LD_INT 22
1463: PUSH
1464: LD_INT 72
1466: PUSH
1467: LD_INT 26
1469: PUSH
1470: LD_INT 69
1472: PUSH
1473: LD_INT 39
1475: PUSH
1476: LD_INT 40
1478: PUSH
1479: LD_INT 41
1481: PUSH
1482: LD_INT 42
1484: PUSH
1485: LD_INT 43
1487: PUSH
1488: LD_INT 48
1490: PUSH
1491: LD_INT 49
1493: PUSH
1494: LD_INT 50
1496: PUSH
1497: LD_INT 51
1499: PUSH
1500: LD_INT 52
1502: PUSH
1503: LD_INT 53
1505: PUSH
1506: LD_INT 54
1508: PUSH
1509: LD_INT 55
1511: PUSH
1512: LD_INT 56
1514: PUSH
1515: LD_INT 60
1517: PUSH
1518: LD_INT 61
1520: PUSH
1521: LD_INT 62
1523: PUSH
1524: LD_INT 66
1526: PUSH
1527: LD_INT 67
1529: PUSH
1530: LD_INT 68
1532: PUSH
1533: LD_INT 81
1535: PUSH
1536: LD_INT 82
1538: PUSH
1539: LD_INT 83
1541: PUSH
1542: LD_INT 84
1544: PUSH
1545: LD_INT 85
1547: PUSH
1548: LD_INT 87
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: LIST
1555: LIST
1556: LIST
1557: LIST
1558: LIST
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: ST_TO_ADDR
1606: GO 1839
1608: LD_INT 3
1610: DOUBLE
1611: EQUAL
1612: IFTRUE 1616
1614: GO 1838
1616: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1617: LD_ADDR_VAR 0 4
1621: PUSH
1622: LD_INT 46
1624: PUSH
1625: LD_INT 47
1627: PUSH
1628: LD_INT 1
1630: PUSH
1631: LD_INT 2
1633: PUSH
1634: LD_INT 82
1636: PUSH
1637: LD_INT 83
1639: PUSH
1640: LD_INT 84
1642: PUSH
1643: LD_INT 85
1645: PUSH
1646: LD_INT 86
1648: PUSH
1649: LD_INT 11
1651: PUSH
1652: LD_INT 9
1654: PUSH
1655: LD_INT 20
1657: PUSH
1658: LD_INT 19
1660: PUSH
1661: LD_INT 21
1663: PUSH
1664: LD_INT 24
1666: PUSH
1667: LD_INT 22
1669: PUSH
1670: LD_INT 25
1672: PUSH
1673: LD_INT 28
1675: PUSH
1676: LD_INT 29
1678: PUSH
1679: LD_INT 30
1681: PUSH
1682: LD_INT 31
1684: PUSH
1685: LD_INT 37
1687: PUSH
1688: LD_INT 38
1690: PUSH
1691: LD_INT 32
1693: PUSH
1694: LD_INT 27
1696: PUSH
1697: LD_INT 33
1699: PUSH
1700: LD_INT 69
1702: PUSH
1703: LD_INT 39
1705: PUSH
1706: LD_INT 34
1708: PUSH
1709: LD_INT 40
1711: PUSH
1712: LD_INT 71
1714: PUSH
1715: LD_INT 23
1717: PUSH
1718: LD_INT 44
1720: PUSH
1721: LD_INT 48
1723: PUSH
1724: LD_INT 49
1726: PUSH
1727: LD_INT 50
1729: PUSH
1730: LD_INT 51
1732: PUSH
1733: LD_INT 52
1735: PUSH
1736: LD_INT 53
1738: PUSH
1739: LD_INT 54
1741: PUSH
1742: LD_INT 55
1744: PUSH
1745: LD_INT 56
1747: PUSH
1748: LD_INT 57
1750: PUSH
1751: LD_INT 58
1753: PUSH
1754: LD_INT 59
1756: PUSH
1757: LD_INT 63
1759: PUSH
1760: LD_INT 64
1762: PUSH
1763: LD_INT 65
1765: PUSH
1766: LD_INT 82
1768: PUSH
1769: LD_INT 83
1771: PUSH
1772: LD_INT 84
1774: PUSH
1775: LD_INT 85
1777: PUSH
1778: LD_INT 86
1780: PUSH
1781: EMPTY
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: ST_TO_ADDR
1836: GO 1839
1838: POP
// if state > - 1 and state < 3 then
1839: LD_VAR 0 3
1843: PUSH
1844: LD_INT 1
1846: NEG
1847: GREATER
1848: PUSH
1849: LD_VAR 0 3
1853: PUSH
1854: LD_INT 3
1856: LESS
1857: AND
1858: IFFALSE 1915
// for i in result do
1860: LD_ADDR_VAR 0 5
1864: PUSH
1865: LD_VAR 0 4
1869: PUSH
1870: FOR_IN
1871: IFFALSE 1913
// if GetTech ( i , side ) <> state then
1873: LD_VAR 0 5
1877: PPUSH
1878: LD_VAR 0 1
1882: PPUSH
1883: CALL_OW 321
1887: PUSH
1888: LD_VAR 0 3
1892: NONEQUAL
1893: IFFALSE 1911
// result := result diff i ;
1895: LD_ADDR_VAR 0 4
1899: PUSH
1900: LD_VAR 0 4
1904: PUSH
1905: LD_VAR 0 5
1909: DIFF
1910: ST_TO_ADDR
1911: GO 1870
1913: POP
1914: POP
// end ; end_of_file
1915: LD_VAR 0 4
1919: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1920: LD_INT 0
1922: PPUSH
1923: PPUSH
// uc_side := 2 ;
1924: LD_ADDR_OWVAR 20
1928: PUSH
1929: LD_INT 2
1931: ST_TO_ADDR
// uc_nation := 2 ;
1932: LD_ADDR_OWVAR 21
1936: PUSH
1937: LD_INT 2
1939: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1940: LD_ADDR_EXP 21
1944: PUSH
1945: LD_STRING Heike
1947: PPUSH
1948: LD_EXP 1
1952: NOT
1953: PPUSH
1954: LD_EXP 2
1958: PPUSH
1959: CALL 229 0 3
1963: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1964: LD_ADDR_EXP 24
1968: PUSH
1969: LD_STRING Ibrahim
1971: PPUSH
1972: LD_EXP 1
1976: NOT
1977: PPUSH
1978: LD_EXP 2
1982: PPUSH
1983: CALL 229 0 3
1987: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1988: LD_ADDR_EXP 22
1992: PUSH
1993: LD_STRING Givi
1995: PPUSH
1996: LD_EXP 1
2000: NOT
2001: PPUSH
2002: LD_EXP 2
2006: PPUSH
2007: CALL 229 0 3
2011: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
2012: LD_ADDR_EXP 25
2016: PUSH
2017: LD_STRING Kamil
2019: PPUSH
2020: LD_EXP 1
2024: NOT
2025: PPUSH
2026: LD_EXP 2
2030: PPUSH
2031: CALL 229 0 3
2035: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
2036: LD_ADDR_EXP 26
2040: PUSH
2041: LD_STRING Kaia
2043: PPUSH
2044: LD_EXP 1
2048: NOT
2049: PPUSH
2050: LD_EXP 2
2054: PPUSH
2055: CALL 229 0 3
2059: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
2060: LD_ADDR_EXP 27
2064: PUSH
2065: LD_STRING Sophia
2067: PPUSH
2068: LD_EXP 1
2072: NOT
2073: PPUSH
2074: LD_EXP 2
2078: PPUSH
2079: CALL 229 0 3
2083: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2084: LD_ADDR_EXP 28
2088: PUSH
2089: LD_STRING Markov
2091: PPUSH
2092: LD_EXP 1
2096: NOT
2097: PPUSH
2098: LD_EXP 2
2102: PPUSH
2103: CALL 229 0 3
2107: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2108: LD_ADDR_EXP 31
2112: PUSH
2113: LD_STRING Aviradze
2115: PPUSH
2116: LD_EXP 1
2120: NOT
2121: PPUSH
2122: LD_EXP 2
2126: PPUSH
2127: CALL 229 0 3
2131: ST_TO_ADDR
// aviradzeSquad := [ ] ;
2132: LD_ADDR_EXP 34
2136: PUSH
2137: EMPTY
2138: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
2139: LD_ADDR_EXP 32
2143: PUSH
2144: LD_STRING 03_others
2146: PPUSH
2147: CALL_OW 31
2151: ST_TO_ADDR
// uc_side := 5 ;
2152: LD_ADDR_OWVAR 20
2156: PUSH
2157: LD_INT 5
2159: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
2160: LD_ADDR_EXP 30
2164: PUSH
2165: LD_STRING Kurt
2167: PPUSH
2168: LD_INT 0
2170: PPUSH
2171: LD_STRING 
2173: PPUSH
2174: CALL 229 0 3
2178: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2179: LD_ADDR_EXP 23
2183: PUSH
2184: LD_STRING Mike
2186: PPUSH
2187: LD_EXP 1
2191: NOT
2192: PPUSH
2193: LD_EXP 2
2197: PPUSH
2198: CALL 229 0 3
2202: ST_TO_ADDR
// if Mike then
2203: LD_EXP 23
2207: IFFALSE 2230
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
2209: LD_EXP 23
2213: PPUSH
2214: LD_INT 142
2216: PPUSH
2217: LD_INT 63
2219: PPUSH
2220: LD_INT 2
2222: PPUSH
2223: LD_INT 0
2225: PPUSH
2226: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
2230: LD_EXP 30
2234: PPUSH
2235: LD_INT 142
2237: PPUSH
2238: LD_INT 63
2240: PPUSH
2241: LD_INT 3
2243: PPUSH
2244: LD_INT 0
2246: PPUSH
2247: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
2251: LD_EXP 30
2255: PUSH
2256: LD_EXP 23
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: PPUSH
2265: CALL_OW 140
// end ;
2269: LD_VAR 0 1
2273: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
2274: LD_INT 0
2276: PPUSH
2277: PPUSH
2278: PPUSH
2279: PPUSH
// uc_side := 5 ;
2280: LD_ADDR_OWVAR 20
2284: PUSH
2285: LD_INT 5
2287: ST_TO_ADDR
// uc_nation := 2 ;
2288: LD_ADDR_OWVAR 21
2292: PUSH
2293: LD_INT 2
2295: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2296: LD_ADDR_EXP 29
2300: PUSH
2301: LD_STRING Omar
2303: PPUSH
2304: LD_INT 0
2306: PPUSH
2307: LD_STRING 
2309: PPUSH
2310: CALL 229 0 3
2314: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
2315: LD_EXP 29
2319: PPUSH
2320: LD_INT 284
2322: PPUSH
2323: LD_INT 163
2325: PPUSH
2326: LD_INT 0
2328: PPUSH
2329: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
2333: LD_EXP 29
2337: PPUSH
2338: LD_INT 256
2340: PPUSH
2341: LD_INT 129
2343: PPUSH
2344: CALL_OW 111
// wait ( 0 0$2 ) ;
2348: LD_INT 70
2350: PPUSH
2351: CALL_OW 67
// omarSquad := [ ] ;
2355: LD_ADDR_EXP 33
2359: PUSH
2360: EMPTY
2361: ST_TO_ADDR
// for i := 1 to 5 do
2362: LD_ADDR_VAR 0 2
2366: PUSH
2367: DOUBLE
2368: LD_INT 1
2370: DEC
2371: ST_TO_ADDR
2372: LD_INT 5
2374: PUSH
2375: FOR_TO
2376: IFFALSE 2582
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
2378: LD_INT 5
2380: PPUSH
2381: LD_INT 2
2383: PPUSH
2384: LD_INT 13
2386: PUSH
2387: LD_INT 14
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: PUSH
2394: LD_VAR 0 2
2398: PUSH
2399: LD_INT 2
2401: MOD
2402: PUSH
2403: LD_INT 1
2405: PLUS
2406: ARRAY
2407: PPUSH
2408: LD_INT 1
2410: PPUSH
2411: LD_INT 1
2413: PPUSH
2414: LD_INT 25
2416: PUSH
2417: LD_INT 27
2419: PUSH
2420: LD_INT 26
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: LIST
2427: PUSH
2428: LD_VAR 0 2
2432: PUSH
2433: LD_INT 3
2435: MOD
2436: PUSH
2437: LD_INT 1
2439: PLUS
2440: ARRAY
2441: PPUSH
2442: LD_INT 100
2444: PPUSH
2445: CALL 292 0 7
// veh := CreateVehicle ;
2449: LD_ADDR_VAR 0 4
2453: PUSH
2454: CALL_OW 45
2458: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2459: LD_VAR 0 4
2463: PPUSH
2464: LD_INT 5
2466: PPUSH
2467: CALL_OW 233
// omarSquad := omarSquad union veh ;
2471: LD_ADDR_EXP 33
2475: PUSH
2476: LD_EXP 33
2480: PUSH
2481: LD_VAR 0 4
2485: UNION
2486: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
2487: LD_VAR 0 4
2491: PPUSH
2492: LD_INT 284
2494: PPUSH
2495: LD_INT 163
2497: PPUSH
2498: LD_INT 0
2500: PPUSH
2501: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
2505: LD_INT 0
2507: PPUSH
2508: LD_INT 3
2510: PPUSH
2511: LD_INT 3
2513: PPUSH
2514: CALL_OW 380
// un := CreateHuman ;
2518: LD_ADDR_VAR 0 3
2522: PUSH
2523: CALL_OW 44
2527: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2528: LD_ADDR_EXP 33
2532: PUSH
2533: LD_EXP 33
2537: PUSH
2538: LD_VAR 0 3
2542: UNION
2543: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2544: LD_VAR 0 3
2548: PPUSH
2549: LD_VAR 0 4
2553: PPUSH
2554: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
2558: LD_VAR 0 3
2562: PPUSH
2563: LD_INT 271
2565: PPUSH
2566: LD_INT 144
2568: PPUSH
2569: CALL_OW 111
// wait ( 0 0$2 ) ;
2573: LD_INT 70
2575: PPUSH
2576: CALL_OW 67
// end ;
2580: GO 2375
2582: POP
2583: POP
// for i := 1 to 3 do
2584: LD_ADDR_VAR 0 2
2588: PUSH
2589: DOUBLE
2590: LD_INT 1
2592: DEC
2593: ST_TO_ADDR
2594: LD_INT 3
2596: PUSH
2597: FOR_TO
2598: IFFALSE 2681
// begin PrepareHuman ( false , 1 , 3 ) ;
2600: LD_INT 0
2602: PPUSH
2603: LD_INT 1
2605: PPUSH
2606: LD_INT 3
2608: PPUSH
2609: CALL_OW 380
// un := CreateHuman ;
2613: LD_ADDR_VAR 0 3
2617: PUSH
2618: CALL_OW 44
2622: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2623: LD_ADDR_EXP 33
2627: PUSH
2628: LD_EXP 33
2632: PUSH
2633: LD_VAR 0 3
2637: UNION
2638: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
2639: LD_VAR 0 3
2643: PPUSH
2644: LD_INT 284
2646: PPUSH
2647: LD_INT 163
2649: PPUSH
2650: LD_INT 0
2652: PPUSH
2653: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
2657: LD_VAR 0 3
2661: PPUSH
2662: LD_INT 257
2664: PPUSH
2665: LD_INT 138
2667: PPUSH
2668: CALL_OW 111
// wait ( 0 0$1 ) ;
2672: LD_INT 35
2674: PPUSH
2675: CALL_OW 67
// end ;
2679: GO 2597
2681: POP
2682: POP
// for i := 1 to 6 do
2683: LD_ADDR_VAR 0 2
2687: PUSH
2688: DOUBLE
2689: LD_INT 1
2691: DEC
2692: ST_TO_ADDR
2693: LD_INT 6
2695: PUSH
2696: FOR_TO
2697: IFFALSE 2830
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2699: LD_INT 0
2701: PPUSH
2702: LD_INT 1
2704: PUSH
2705: LD_INT 1
2707: PUSH
2708: LD_INT 4
2710: PUSH
2711: EMPTY
2712: LIST
2713: LIST
2714: LIST
2715: PUSH
2716: LD_VAR 0 2
2720: PUSH
2721: LD_INT 3
2723: MOD
2724: PUSH
2725: LD_INT 1
2727: PLUS
2728: ARRAY
2729: PPUSH
2730: LD_INT 3
2732: PPUSH
2733: CALL_OW 380
// un := CreateHuman ;
2737: LD_ADDR_VAR 0 3
2741: PUSH
2742: CALL_OW 44
2746: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2747: LD_ADDR_EXP 33
2751: PUSH
2752: LD_EXP 33
2756: PUSH
2757: LD_VAR 0 3
2761: UNION
2762: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2763: LD_VAR 0 3
2767: PPUSH
2768: LD_INT 225
2770: PPUSH
2771: LD_INT 163
2773: PPUSH
2774: LD_INT 0
2776: PPUSH
2777: CALL_OW 48
// if i = 1 then
2781: LD_VAR 0 2
2785: PUSH
2786: LD_INT 1
2788: EQUAL
2789: IFFALSE 2806
// SetAttr ( un , attr_speed , 12 ) ;
2791: LD_VAR 0 3
2795: PPUSH
2796: LD_INT 2
2798: PPUSH
2799: LD_INT 12
2801: PPUSH
2802: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2806: LD_VAR 0 3
2810: PPUSH
2811: LD_INT 222
2813: PPUSH
2814: LD_INT 157
2816: PPUSH
2817: CALL_OW 111
// wait ( 0 0$1 ) ;
2821: LD_INT 35
2823: PPUSH
2824: CALL_OW 67
// end ;
2828: GO 2696
2830: POP
2831: POP
// end ; end_of_file
2832: LD_VAR 0 1
2836: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2837: LD_INT 0
2839: PPUSH
2840: PPUSH
2841: PPUSH
2842: PPUSH
2843: PPUSH
2844: PPUSH
// ruLab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ;
2845: LD_ADDR_EXP 45
2849: PUSH
2850: LD_INT 22
2852: PUSH
2853: LD_INT 3
2855: PUSH
2856: EMPTY
2857: LIST
2858: LIST
2859: PUSH
2860: LD_INT 30
2862: PUSH
2863: LD_INT 7
2865: PUSH
2866: EMPTY
2867: LIST
2868: LIST
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PPUSH
2874: CALL_OW 69
2878: PUSH
2879: LD_INT 1
2881: ARRAY
2882: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2883: LD_ADDR_VAR 0 2
2887: PUSH
2888: LD_INT 21
2890: PUSH
2891: LD_INT 3
2893: PUSH
2894: EMPTY
2895: LIST
2896: LIST
2897: PUSH
2898: LD_INT 23
2900: PUSH
2901: LD_INT 3
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: PPUSH
2912: CALL_OW 69
2916: PUSH
2917: FOR_IN
2918: IFFALSE 2934
// SetBLevel ( i , 5 ) ;
2920: LD_VAR 0 2
2924: PPUSH
2925: LD_INT 5
2927: PPUSH
2928: CALL_OW 241
2932: GO 2917
2934: POP
2935: POP
// SetBName ( kirov , kirov ) ;
2936: LD_INT 71
2938: PPUSH
2939: LD_STRING kirov
2941: PPUSH
2942: CALL_OW 500
// SetBName ( beria , beria ) ;
2946: LD_INT 106
2948: PPUSH
2949: LD_STRING beria
2951: PPUSH
2952: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2956: LD_INT 112
2958: PPUSH
2959: LD_STRING kagan
2961: PPUSH
2962: CALL_OW 500
// uc_side := 6 ;
2966: LD_ADDR_OWVAR 20
2970: PUSH
2971: LD_INT 6
2973: ST_TO_ADDR
// uc_nation := 3 ;
2974: LD_ADDR_OWVAR 21
2978: PUSH
2979: LD_INT 3
2981: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2982: LD_ADDR_VAR 0 5
2986: PUSH
2987: LD_INT 22
2989: PUSH
2990: LD_INT 6
2992: PUSH
2993: EMPTY
2994: LIST
2995: LIST
2996: PUSH
2997: LD_INT 30
2999: PUSH
3000: LD_INT 5
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PUSH
3007: EMPTY
3008: LIST
3009: LIST
3010: PPUSH
3011: CALL_OW 69
3015: PUSH
3016: LD_INT 1
3018: ARRAY
3019: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
3020: LD_ADDR_VAR 0 4
3024: PUSH
3025: LD_INT 22
3027: PUSH
3028: LD_INT 6
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 30
3037: PUSH
3038: LD_INT 4
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 69
3053: PUSH
3054: LD_INT 1
3056: ARRAY
3057: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
3058: LD_ADDR_EXP 39
3062: PUSH
3063: EMPTY
3064: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
3065: LD_ADDR_EXP 40
3069: PUSH
3070: EMPTY
3071: ST_TO_ADDR
// russianPatrol := [ ] ;
3072: LD_ADDR_EXP 42
3076: PUSH
3077: EMPTY
3078: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
3079: LD_ADDR_EXP 35
3083: PUSH
3084: LD_STRING Kurin
3086: PPUSH
3087: LD_INT 0
3089: PPUSH
3090: LD_STRING 
3092: PPUSH
3093: CALL 229 0 3
3097: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
3098: LD_EXP 35
3102: PPUSH
3103: LD_INT 71
3105: PPUSH
3106: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
3110: LD_ADDR_EXP 37
3114: PUSH
3115: LD_STRING Popov
3117: PPUSH
3118: LD_INT 0
3120: PPUSH
3121: LD_STRING 
3123: PPUSH
3124: CALL 229 0 3
3128: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
3129: LD_EXP 37
3133: PPUSH
3134: LD_INT 71
3136: PPUSH
3137: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
3141: LD_ADDR_EXP 36
3145: PUSH
3146: LD_STRING Grishko
3148: PPUSH
3149: LD_INT 0
3151: PPUSH
3152: LD_STRING 
3154: PPUSH
3155: CALL 229 0 3
3159: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
3160: LD_EXP 36
3164: PPUSH
3165: LD_INT 207
3167: PPUSH
3168: LD_INT 106
3170: PPUSH
3171: LD_INT 0
3173: PPUSH
3174: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
3178: LD_EXP 36
3182: PPUSH
3183: LD_INT 209
3185: PPUSH
3186: LD_INT 106
3188: PPUSH
3189: CALL_OW 118
// for i := 1 to 2 do
3193: LD_ADDR_VAR 0 2
3197: PUSH
3198: DOUBLE
3199: LD_INT 1
3201: DEC
3202: ST_TO_ADDR
3203: LD_INT 2
3205: PUSH
3206: FOR_TO
3207: IFFALSE 3262
// begin PrepareHuman ( false , 2 , 2 ) ;
3209: LD_INT 0
3211: PPUSH
3212: LD_INT 2
3214: PPUSH
3215: LD_INT 2
3217: PPUSH
3218: CALL_OW 380
// un := CreateHuman ;
3222: LD_ADDR_VAR 0 3
3226: PUSH
3227: CALL_OW 44
3231: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
3232: LD_VAR 0 3
3236: PPUSH
3237: LD_INT 71
3239: PPUSH
3240: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3244: LD_ADDR_EXP 39
3248: PUSH
3249: LD_EXP 39
3253: PUSH
3254: LD_VAR 0 3
3258: UNION
3259: ST_TO_ADDR
// end ;
3260: GO 3206
3262: POP
3263: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
3264: LD_ADDR_VAR 0 2
3268: PUSH
3269: DOUBLE
3270: LD_INT 1
3272: DEC
3273: ST_TO_ADDR
3274: LD_INT 5
3276: PUSH
3277: LD_INT 6
3279: PUSH
3280: LD_INT 6
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: LIST
3287: PUSH
3288: LD_OWVAR 67
3292: ARRAY
3293: PUSH
3294: FOR_TO
3295: IFFALSE 3369
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3297: LD_INT 0
3299: PPUSH
3300: LD_INT 1
3302: PPUSH
3303: LD_INT 2
3305: PUSH
3306: LD_INT 3
3308: PUSH
3309: LD_INT 4
3311: PUSH
3312: EMPTY
3313: LIST
3314: LIST
3315: LIST
3316: PUSH
3317: LD_OWVAR 67
3321: ARRAY
3322: PPUSH
3323: CALL_OW 380
// un := CreateHuman ;
3327: LD_ADDR_VAR 0 3
3331: PUSH
3332: CALL_OW 44
3336: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
3337: LD_VAR 0 3
3341: PPUSH
3342: LD_VAR 0 5
3346: PPUSH
3347: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3351: LD_ADDR_EXP 39
3355: PUSH
3356: LD_EXP 39
3360: PUSH
3361: LD_VAR 0 3
3365: UNION
3366: ST_TO_ADDR
// end ;
3367: GO 3294
3369: POP
3370: POP
// for i := 1 to 3 do
3371: LD_ADDR_VAR 0 2
3375: PUSH
3376: DOUBLE
3377: LD_INT 1
3379: DEC
3380: ST_TO_ADDR
3381: LD_INT 3
3383: PUSH
3384: FOR_TO
3385: IFFALSE 3440
// begin PrepareHuman ( false , 3 , 3 ) ;
3387: LD_INT 0
3389: PPUSH
3390: LD_INT 3
3392: PPUSH
3393: LD_INT 3
3395: PPUSH
3396: CALL_OW 380
// un := CreateHuman ;
3400: LD_ADDR_VAR 0 3
3404: PUSH
3405: CALL_OW 44
3409: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
3410: LD_VAR 0 3
3414: PPUSH
3415: LD_INT 92
3417: PPUSH
3418: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3422: LD_ADDR_EXP 39
3426: PUSH
3427: LD_EXP 39
3431: PUSH
3432: LD_VAR 0 3
3436: UNION
3437: ST_TO_ADDR
// end ;
3438: GO 3384
3440: POP
3441: POP
// for i := 1 to 2 do
3442: LD_ADDR_VAR 0 2
3446: PUSH
3447: DOUBLE
3448: LD_INT 1
3450: DEC
3451: ST_TO_ADDR
3452: LD_INT 2
3454: PUSH
3455: FOR_TO
3456: IFFALSE 3511
// begin PrepareHuman ( false , 4 , 3 ) ;
3458: LD_INT 0
3460: PPUSH
3461: LD_INT 4
3463: PPUSH
3464: LD_INT 3
3466: PPUSH
3467: CALL_OW 380
// un := CreateHuman ;
3471: LD_ADDR_VAR 0 3
3475: PUSH
3476: CALL_OW 44
3480: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
3481: LD_VAR 0 3
3485: PPUSH
3486: LD_INT 83
3488: PPUSH
3489: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3493: LD_ADDR_EXP 39
3497: PUSH
3498: LD_EXP 39
3502: PUSH
3503: LD_VAR 0 3
3507: UNION
3508: ST_TO_ADDR
// end ;
3509: GO 3455
3511: POP
3512: POP
// for i := 1 to 5 do
3513: LD_ADDR_VAR 0 2
3517: PUSH
3518: DOUBLE
3519: LD_INT 1
3521: DEC
3522: ST_TO_ADDR
3523: LD_INT 5
3525: PUSH
3526: FOR_TO
3527: IFFALSE 3584
// begin PrepareHuman ( false , 1 , 3 ) ;
3529: LD_INT 0
3531: PPUSH
3532: LD_INT 1
3534: PPUSH
3535: LD_INT 3
3537: PPUSH
3538: CALL_OW 380
// un := CreateHuman ;
3542: LD_ADDR_VAR 0 3
3546: PUSH
3547: CALL_OW 44
3551: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3552: LD_VAR 0 3
3556: PPUSH
3557: LD_VAR 0 4
3561: PPUSH
3562: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3566: LD_ADDR_EXP 41
3570: PUSH
3571: LD_EXP 41
3575: PUSH
3576: LD_VAR 0 3
3580: UNION
3581: ST_TO_ADDR
// end ;
3582: GO 3526
3584: POP
3585: POP
// russianCargo := [ ] ;
3586: LD_ADDR_EXP 44
3590: PUSH
3591: EMPTY
3592: ST_TO_ADDR
// for i := 1 to 2 do
3593: LD_ADDR_VAR 0 2
3597: PUSH
3598: DOUBLE
3599: LD_INT 1
3601: DEC
3602: ST_TO_ADDR
3603: LD_INT 2
3605: PUSH
3606: FOR_TO
3607: IFFALSE 3739
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3609: LD_INT 6
3611: PPUSH
3612: LD_INT 3
3614: PPUSH
3615: LD_INT 21
3617: PPUSH
3618: LD_INT 1
3620: PPUSH
3621: LD_INT 1
3623: PPUSH
3624: LD_INT 51
3626: PPUSH
3627: LD_INT 100
3629: PPUSH
3630: CALL 292 0 7
// un := CreateVehicle ;
3634: LD_ADDR_VAR 0 3
3638: PUSH
3639: CALL_OW 45
3643: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3644: LD_ADDR_EXP 44
3648: PUSH
3649: LD_EXP 44
3653: PUSH
3654: LD_VAR 0 3
3658: UNION
3659: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3660: LD_VAR 0 3
3664: PPUSH
3665: LD_INT 2
3667: PPUSH
3668: LD_INT 100
3670: PPUSH
3671: CALL_OW 290
// SetDir ( un , 4 ) ;
3675: LD_VAR 0 3
3679: PPUSH
3680: LD_INT 4
3682: PPUSH
3683: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3687: LD_VAR 0 3
3691: PPUSH
3692: LD_INT 147
3694: PPUSH
3695: LD_INT 103
3697: PPUSH
3698: LD_INT 4
3700: PPUSH
3701: LD_INT 0
3703: PPUSH
3704: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3708: LD_INT 0
3710: PPUSH
3711: LD_INT 1
3713: PPUSH
3714: LD_OWVAR 67
3718: PPUSH
3719: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3723: CALL_OW 44
3727: PPUSH
3728: LD_VAR 0 3
3732: PPUSH
3733: CALL_OW 52
// end ;
3737: GO 3606
3739: POP
3740: POP
// uc_side := 3 ;
3741: LD_ADDR_OWVAR 20
3745: PUSH
3746: LD_INT 3
3748: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3749: LD_ADDR_EXP 38
3753: PUSH
3754: LD_STRING Burlak
3756: PPUSH
3757: LD_INT 0
3759: PPUSH
3760: LD_STRING 
3762: PPUSH
3763: CALL 229 0 3
3767: ST_TO_ADDR
// for i := 1 to 2 do
3768: LD_ADDR_VAR 0 2
3772: PUSH
3773: DOUBLE
3774: LD_INT 1
3776: DEC
3777: ST_TO_ADDR
3778: LD_INT 2
3780: PUSH
3781: FOR_TO
3782: IFFALSE 3875
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3784: LD_INT 0
3786: PPUSH
3787: LD_INT 1
3789: PPUSH
3790: LD_OWVAR 67
3794: PUSH
3795: LD_INT 1
3797: PLUS
3798: PPUSH
3799: CALL_OW 380
// un := CreateHuman ;
3803: LD_ADDR_VAR 0 3
3807: PUSH
3808: CALL_OW 44
3812: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3813: LD_VAR 0 3
3817: PPUSH
3818: LD_INT 22
3820: PUSH
3821: LD_INT 3
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: PUSH
3828: LD_INT 30
3830: PUSH
3831: LD_INT 32
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: PPUSH
3842: CALL_OW 69
3846: PUSH
3847: LD_VAR 0 2
3851: ARRAY
3852: PPUSH
3853: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3857: LD_ADDR_EXP 40
3861: PUSH
3862: LD_EXP 40
3866: PUSH
3867: LD_VAR 0 3
3871: UNION
3872: ST_TO_ADDR
// end ;
3873: GO 3781
3875: POP
3876: POP
// for i := 1 to 2 do
3877: LD_ADDR_VAR 0 2
3881: PUSH
3882: DOUBLE
3883: LD_INT 1
3885: DEC
3886: ST_TO_ADDR
3887: LD_INT 2
3889: PUSH
3890: FOR_TO
3891: IFFALSE 3982
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3893: LD_INT 0
3895: PPUSH
3896: LD_INT 1
3898: PPUSH
3899: LD_OWVAR 67
3903: PUSH
3904: LD_INT 1
3906: PLUS
3907: PPUSH
3908: CALL_OW 380
// un := CreateHuman ;
3912: LD_ADDR_VAR 0 3
3916: PUSH
3917: CALL_OW 44
3921: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3922: LD_VAR 0 3
3926: PPUSH
3927: LD_INT 22
3929: PUSH
3930: LD_INT 3
3932: PUSH
3933: EMPTY
3934: LIST
3935: LIST
3936: PUSH
3937: LD_INT 30
3939: PUSH
3940: LD_INT 5
3942: PUSH
3943: EMPTY
3944: LIST
3945: LIST
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PPUSH
3951: CALL_OW 69
3955: PUSH
3956: LD_INT 1
3958: ARRAY
3959: PPUSH
3960: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3964: LD_ADDR_EXP 40
3968: PUSH
3969: LD_EXP 40
3973: PUSH
3974: LD_VAR 0 3
3978: UNION
3979: ST_TO_ADDR
// end ;
3980: GO 3890
3982: POP
3983: POP
// for i := 1 to 2 do
3984: LD_ADDR_VAR 0 2
3988: PUSH
3989: DOUBLE
3990: LD_INT 1
3992: DEC
3993: ST_TO_ADDR
3994: LD_INT 2
3996: PUSH
3997: FOR_TO
3998: IFFALSE 4085
// begin PrepareHuman ( false , 4 , Difficulty ) ;
4000: LD_INT 0
4002: PPUSH
4003: LD_INT 4
4005: PPUSH
4006: LD_OWVAR 67
4010: PPUSH
4011: CALL_OW 380
// un := CreateHuman ;
4015: LD_ADDR_VAR 0 3
4019: PUSH
4020: CALL_OW 44
4024: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
4025: LD_VAR 0 3
4029: PPUSH
4030: LD_INT 22
4032: PUSH
4033: LD_INT 3
4035: PUSH
4036: EMPTY
4037: LIST
4038: LIST
4039: PUSH
4040: LD_INT 30
4042: PUSH
4043: LD_INT 7
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: PUSH
4050: EMPTY
4051: LIST
4052: LIST
4053: PPUSH
4054: CALL_OW 69
4058: PUSH
4059: LD_INT 1
4061: ARRAY
4062: PPUSH
4063: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4067: LD_ADDR_EXP 40
4071: PUSH
4072: LD_EXP 40
4076: PUSH
4077: LD_VAR 0 3
4081: UNION
4082: ST_TO_ADDR
// end ;
4083: GO 3997
4085: POP
4086: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
4087: LD_INT 0
4089: PPUSH
4090: LD_INT 2
4092: PPUSH
4093: LD_OWVAR 67
4097: PPUSH
4098: CALL_OW 380
// un := CreateHuman ;
4102: LD_ADDR_VAR 0 3
4106: PUSH
4107: CALL_OW 44
4111: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
4112: LD_VAR 0 3
4116: PPUSH
4117: LD_INT 106
4119: PPUSH
4120: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4124: LD_ADDR_EXP 40
4128: PUSH
4129: LD_EXP 40
4133: PUSH
4134: LD_VAR 0 3
4138: UNION
4139: ST_TO_ADDR
// for i := 1 to 3 do
4140: LD_ADDR_VAR 0 2
4144: PUSH
4145: DOUBLE
4146: LD_INT 1
4148: DEC
4149: ST_TO_ADDR
4150: LD_INT 3
4152: PUSH
4153: FOR_TO
4154: IFFALSE 4281
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
4156: LD_ADDR_VAR 0 6
4160: PUSH
4161: LD_INT 22
4163: PUSH
4164: LD_INT 3
4166: PUSH
4167: EMPTY
4168: LIST
4169: LIST
4170: PUSH
4171: LD_INT 30
4173: PUSH
4174: LD_INT 31
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: PPUSH
4185: CALL_OW 69
4189: PUSH
4190: LD_VAR 0 2
4194: ARRAY
4195: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
4196: LD_INT 0
4198: PPUSH
4199: LD_INT 1
4201: PPUSH
4202: LD_OWVAR 67
4206: PPUSH
4207: CALL_OW 380
// un := CreateHuman ;
4211: LD_ADDR_VAR 0 3
4215: PUSH
4216: CALL_OW 44
4220: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) - 3 * - 1 ) ;
4221: LD_VAR 0 3
4225: PPUSH
4226: LD_VAR 0 6
4230: PPUSH
4231: CALL_OW 254
4235: PUSH
4236: LD_INT 3
4238: PUSH
4239: LD_INT 1
4241: NEG
4242: MUL
4243: MINUS
4244: PPUSH
4245: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
4249: LD_VAR 0 3
4253: PPUSH
4254: LD_VAR 0 6
4258: PPUSH
4259: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4263: LD_ADDR_EXP 40
4267: PUSH
4268: LD_EXP 40
4272: PUSH
4273: LD_VAR 0 3
4277: UNION
4278: ST_TO_ADDR
// end ;
4279: GO 4153
4281: POP
4282: POP
// russianOmicronAttackers := [ ] ;
4283: LD_ADDR_EXP 43
4287: PUSH
4288: EMPTY
4289: ST_TO_ADDR
// for i := 1 to 6 do
4290: LD_ADDR_VAR 0 2
4294: PUSH
4295: DOUBLE
4296: LD_INT 1
4298: DEC
4299: ST_TO_ADDR
4300: LD_INT 6
4302: PUSH
4303: FOR_TO
4304: IFFALSE 4528
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
4306: LD_INT 3
4308: PPUSH
4309: LD_INT 3
4311: PPUSH
4312: LD_INT 21
4314: PUSH
4315: LD_INT 23
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: PUSH
4322: LD_VAR 0 2
4326: PUSH
4327: LD_INT 2
4329: MOD
4330: PUSH
4331: LD_INT 1
4333: PLUS
4334: ARRAY
4335: PPUSH
4336: LD_INT 1
4338: PPUSH
4339: LD_INT 1
4341: PPUSH
4342: LD_INT 43
4344: PUSH
4345: LD_INT 44
4347: PUSH
4348: LD_INT 42
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: LIST
4355: PUSH
4356: LD_VAR 0 2
4360: PUSH
4361: LD_INT 3
4363: MOD
4364: PUSH
4365: LD_INT 1
4367: PLUS
4368: ARRAY
4369: PPUSH
4370: LD_INT 100
4372: PPUSH
4373: CALL 292 0 7
// un := CreateVehicle ;
4377: LD_ADDR_VAR 0 3
4381: PUSH
4382: CALL_OW 45
4386: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
4387: LD_VAR 0 3
4391: PPUSH
4392: LD_INT 0
4394: PUSH
4395: LD_INT 5
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: PUSH
4402: LD_INT 1
4404: PPUSH
4405: LD_INT 2
4407: PPUSH
4408: CALL_OW 12
4412: ARRAY
4413: PPUSH
4414: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
4418: LD_ADDR_EXP 43
4422: PUSH
4423: LD_EXP 43
4427: PUSH
4428: LD_VAR 0 3
4432: UNION
4433: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
4434: LD_VAR 0 3
4438: PPUSH
4439: LD_INT 127
4441: PPUSH
4442: LD_INT 89
4444: PPUSH
4445: LD_INT 7
4447: PPUSH
4448: LD_INT 0
4450: PPUSH
4451: CALL_OW 50
// uc_side := 3 ;
4455: LD_ADDR_OWVAR 20
4459: PUSH
4460: LD_INT 3
4462: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4463: LD_INT 0
4465: PPUSH
4466: LD_INT 3
4468: PPUSH
4469: LD_INT 3
4471: PPUSH
4472: CALL_OW 380
// un := CreateHuman ;
4476: LD_ADDR_VAR 0 3
4480: PUSH
4481: CALL_OW 44
4485: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4486: LD_ADDR_EXP 43
4490: PUSH
4491: LD_EXP 43
4495: PUSH
4496: LD_VAR 0 3
4500: UNION
4501: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4502: LD_VAR 0 3
4506: PPUSH
4507: LD_EXP 43
4511: PUSH
4512: LD_EXP 43
4516: PUSH
4517: LD_INT 1
4519: MINUS
4520: ARRAY
4521: PPUSH
4522: CALL_OW 52
// end ;
4526: GO 4303
4528: POP
4529: POP
// for i := 1 to 3 do
4530: LD_ADDR_VAR 0 2
4534: PUSH
4535: DOUBLE
4536: LD_INT 1
4538: DEC
4539: ST_TO_ADDR
4540: LD_INT 3
4542: PUSH
4543: FOR_TO
4544: IFFALSE 4610
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4546: LD_INT 0
4548: PPUSH
4549: LD_INT 1
4551: PPUSH
4552: LD_OWVAR 67
4556: PPUSH
4557: CALL_OW 380
// un := CreateHuman ;
4561: LD_ADDR_VAR 0 3
4565: PUSH
4566: CALL_OW 44
4570: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4571: LD_ADDR_EXP 43
4575: PUSH
4576: LD_EXP 43
4580: PUSH
4581: LD_VAR 0 3
4585: UNION
4586: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4587: LD_VAR 0 3
4591: PPUSH
4592: LD_INT 91
4594: PPUSH
4595: LD_INT 60
4597: PPUSH
4598: LD_INT 3
4600: PPUSH
4601: LD_INT 0
4603: PPUSH
4604: CALL_OW 50
// end ;
4608: GO 4543
4610: POP
4611: POP
// end ;
4612: LD_VAR 0 1
4616: RET
// every 0 0$3 do var i ;
4617: GO 4619
4619: DISABLE
4620: LD_INT 0
4622: PPUSH
// begin for i := 1 to 4 do
4623: LD_ADDR_VAR 0 1
4627: PUSH
4628: DOUBLE
4629: LD_INT 1
4631: DEC
4632: ST_TO_ADDR
4633: LD_INT 4
4635: PUSH
4636: FOR_TO
4637: IFFALSE 4656
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4639: LD_EXP 41
4643: PUSH
4644: LD_VAR 0 1
4648: ARRAY
4649: PPUSH
4650: CALL_OW 122
4654: GO 4636
4656: POP
4657: POP
// wait ( 3 ) ;
4658: LD_INT 3
4660: PPUSH
4661: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4665: LD_EXP 41
4669: PUSH
4670: LD_INT 1
4672: ARRAY
4673: PPUSH
4674: LD_INT 22
4676: PUSH
4677: LD_INT 6
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PUSH
4684: LD_INT 30
4686: PUSH
4687: LD_INT 31
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: PPUSH
4698: CALL_OW 69
4702: PPUSH
4703: LD_EXP 41
4707: PUSH
4708: LD_INT 1
4710: ARRAY
4711: PPUSH
4712: CALL_OW 74
4716: PPUSH
4717: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4721: LD_EXP 41
4725: PUSH
4726: LD_INT 2
4728: ARRAY
4729: PPUSH
4730: LD_INT 211
4732: PPUSH
4733: LD_INT 107
4735: PPUSH
4736: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4740: LD_EXP 41
4744: PUSH
4745: LD_INT 2
4747: ARRAY
4748: PPUSH
4749: LD_INT 209
4751: PPUSH
4752: LD_INT 106
4754: PPUSH
4755: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4759: LD_EXP 41
4763: PUSH
4764: LD_INT 3
4766: ARRAY
4767: PPUSH
4768: LD_INT 209
4770: PPUSH
4771: LD_INT 103
4773: PPUSH
4774: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4778: LD_EXP 41
4782: PUSH
4783: LD_INT 3
4785: ARRAY
4786: PPUSH
4787: LD_INT 209
4789: PPUSH
4790: LD_INT 106
4792: PPUSH
4793: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4797: LD_EXP 41
4801: PUSH
4802: LD_INT 4
4804: ARRAY
4805: PPUSH
4806: LD_INT 227
4808: PPUSH
4809: LD_INT 117
4811: PPUSH
4812: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4816: LD_EXP 41
4820: PUSH
4821: LD_INT 4
4823: ARRAY
4824: PPUSH
4825: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4829: LD_INT 700
4831: PPUSH
4832: CALL_OW 67
// for i := 3 downto 2 do
4836: LD_ADDR_VAR 0 1
4840: PUSH
4841: DOUBLE
4842: LD_INT 3
4844: INC
4845: ST_TO_ADDR
4846: LD_INT 2
4848: PUSH
4849: FOR_DOWNTO
4850: IFFALSE 5017
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4852: LD_EXP 41
4856: PUSH
4857: LD_VAR 0 1
4861: ARRAY
4862: PPUSH
4863: LD_INT 200
4865: PPUSH
4866: LD_INT 91
4868: PPUSH
4869: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4873: LD_EXP 41
4877: PUSH
4878: LD_VAR 0 1
4882: ARRAY
4883: PPUSH
4884: LD_INT 210
4886: PPUSH
4887: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4891: LD_EXP 41
4895: PUSH
4896: LD_VAR 0 1
4900: ARRAY
4901: PPUSH
4902: LD_INT 224
4904: PPUSH
4905: LD_INT 93
4907: PPUSH
4908: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4912: LD_EXP 41
4916: PUSH
4917: LD_VAR 0 1
4921: ARRAY
4922: PPUSH
4923: LD_INT 210
4925: PPUSH
4926: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4930: LD_EXP 41
4934: PUSH
4935: LD_VAR 0 1
4939: ARRAY
4940: PPUSH
4941: LD_INT 239
4943: PPUSH
4944: LD_INT 123
4946: PPUSH
4947: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4951: LD_EXP 41
4955: PUSH
4956: LD_VAR 0 1
4960: ARRAY
4961: PPUSH
4962: LD_INT 210
4964: PPUSH
4965: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4969: LD_EXP 41
4973: PUSH
4974: LD_VAR 0 1
4978: ARRAY
4979: PPUSH
4980: LD_INT 212
4982: PPUSH
4983: LD_INT 105
4985: PPUSH
4986: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4990: LD_EXP 41
4994: PUSH
4995: LD_VAR 0 1
4999: ARRAY
5000: PPUSH
5001: LD_INT 700
5003: PPUSH
5004: CALL_OW 202
// wait ( 0 0$30 ) ;
5008: LD_INT 1050
5010: PPUSH
5011: CALL_OW 67
// end ;
5015: GO 4849
5017: POP
5018: POP
// until not activeGrishkoAI ;
5019: LD_EXP 10
5023: NOT
5024: IFFALSE 4829
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
5026: LD_EXP 41
5030: PPUSH
5031: LD_INT 221
5033: PPUSH
5034: LD_INT 110
5036: PPUSH
5037: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
5041: LD_EXP 41
5045: PPUSH
5046: LD_INT 228
5048: PPUSH
5049: LD_INT 115
5051: PPUSH
5052: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
5056: LD_EXP 41
5060: PPUSH
5061: CALL_OW 200
// end ;
5065: PPOPN 1
5067: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
5068: LD_EXP 12
5072: IFFALSE 5668
5074: GO 5076
5076: DISABLE
5077: LD_INT 0
5079: PPUSH
5080: PPUSH
5081: PPUSH
5082: PPUSH
// begin uc_side := 6 ;
5083: LD_ADDR_OWVAR 20
5087: PUSH
5088: LD_INT 6
5090: ST_TO_ADDR
// uc_nation := 3 ;
5091: LD_ADDR_OWVAR 21
5095: PUSH
5096: LD_INT 3
5098: ST_TO_ADDR
// for i := 1 to 3 do
5099: LD_ADDR_VAR 0 2
5103: PUSH
5104: DOUBLE
5105: LD_INT 1
5107: DEC
5108: ST_TO_ADDR
5109: LD_INT 3
5111: PUSH
5112: FOR_TO
5113: IFFALSE 5222
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
5115: LD_INT 0
5117: PPUSH
5118: LD_INT 1
5120: PPUSH
5121: LD_INT 2
5123: PUSH
5124: LD_INT 3
5126: PUSH
5127: LD_INT 4
5129: PUSH
5130: EMPTY
5131: LIST
5132: LIST
5133: LIST
5134: PUSH
5135: LD_OWVAR 67
5139: ARRAY
5140: PPUSH
5141: CALL_OW 380
// un := CreateHuman ;
5145: LD_ADDR_VAR 0 1
5149: PUSH
5150: CALL_OW 44
5154: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
5155: LD_ADDR_EXP 42
5159: PUSH
5160: LD_EXP 42
5164: PUSH
5165: LD_VAR 0 1
5169: UNION
5170: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5171: LD_VAR 0 1
5175: PPUSH
5176: LD_INT 1
5178: PPUSH
5179: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
5183: LD_VAR 0 1
5187: PPUSH
5188: LD_INT 11
5190: PPUSH
5191: LD_INT 0
5193: PPUSH
5194: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
5198: LD_VAR 0 1
5202: PPUSH
5203: LD_INT 210
5205: PPUSH
5206: LD_INT 159
5208: PPUSH
5209: CALL_OW 111
// wait ( 0 0$2 ) ;
5213: LD_INT 70
5215: PPUSH
5216: CALL_OW 67
// end ;
5220: GO 5112
5222: POP
5223: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 208 , 42 ] ] ] ;
5224: LD_ADDR_VAR 0 4
5228: PUSH
5229: LD_INT 172
5231: PUSH
5232: LD_INT 76
5234: PUSH
5235: EMPTY
5236: LIST
5237: LIST
5238: PUSH
5239: LD_INT 150
5241: PUSH
5242: LD_INT 38
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: PUSH
5249: LD_INT 148
5251: PUSH
5252: LD_INT 9
5254: PUSH
5255: EMPTY
5256: LIST
5257: LIST
5258: PUSH
5259: LD_INT 165
5261: PUSH
5262: LD_INT 38
5264: PUSH
5265: EMPTY
5266: LIST
5267: LIST
5268: PUSH
5269: EMPTY
5270: LIST
5271: LIST
5272: LIST
5273: LIST
5274: PUSH
5275: LD_INT 191
5277: PUSH
5278: LD_INT 77
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: PUSH
5285: LD_INT 168
5287: PUSH
5288: LD_INT 42
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: PUSH
5295: LD_INT 166
5297: PUSH
5298: LD_INT 11
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: PUSH
5305: LD_INT 151
5307: PUSH
5308: LD_INT 12
5310: PUSH
5311: EMPTY
5312: LIST
5313: LIST
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: PUSH
5321: LD_INT 221
5323: PUSH
5324: LD_INT 88
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: PUSH
5331: LD_INT 217
5333: PUSH
5334: LD_INT 64
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: PUSH
5341: LD_INT 208
5343: PUSH
5344: LD_INT 42
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: LIST
5355: PUSH
5356: EMPTY
5357: LIST
5358: LIST
5359: LIST
5360: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5361: LD_INT 35
5363: PPUSH
5364: CALL_OW 67
// for i := 1 to patrol do
5368: LD_ADDR_VAR 0 2
5372: PUSH
5373: DOUBLE
5374: LD_INT 1
5376: DEC
5377: ST_TO_ADDR
5378: LD_VAR 0 4
5382: PUSH
5383: FOR_TO
5384: IFFALSE 5632
// begin if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
5386: LD_EXP 42
5390: PUSH
5391: LD_VAR 0 2
5395: ARRAY
5396: PPUSH
5397: CALL_OW 256
5401: PUSH
5402: LD_INT 990
5404: LESS
5405: PUSH
5406: LD_EXP 42
5410: PUSH
5411: LD_VAR 0 2
5415: ARRAY
5416: PPUSH
5417: CALL_OW 110
5421: PUSH
5422: LD_INT 1
5424: EQUAL
5425: AND
5426: IFFALSE 5454
// begin spottedByPatrol := true ;
5428: LD_ADDR_EXP 7
5432: PUSH
5433: LD_INT 1
5435: ST_TO_ADDR
// SetTag ( russianPatrol [ i ] , 2 ) ;
5436: LD_EXP 42
5440: PUSH
5441: LD_VAR 0 2
5445: ARRAY
5446: PPUSH
5447: LD_INT 2
5449: PPUSH
5450: CALL_OW 109
// end ; if GetTag ( russianPatrol [ i ] ) = 2 then
5454: LD_EXP 42
5458: PUSH
5459: LD_VAR 0 2
5463: ARRAY
5464: PPUSH
5465: CALL_OW 110
5469: PUSH
5470: LD_INT 2
5472: EQUAL
5473: IFFALSE 5530
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5475: LD_EXP 42
5479: PUSH
5480: LD_VAR 0 2
5484: ARRAY
5485: PPUSH
5486: LD_INT 166
5488: PPUSH
5489: LD_INT 101
5491: PPUSH
5492: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5496: LD_EXP 42
5500: PUSH
5501: LD_VAR 0 2
5505: ARRAY
5506: PPUSH
5507: LD_INT 71
5509: PPUSH
5510: CALL_OW 296
5514: PUSH
5515: LD_INT 10
5517: LESS
5518: IFFALSE 5528
// russianAlert := true ;
5520: LD_ADDR_EXP 9
5524: PUSH
5525: LD_INT 1
5527: ST_TO_ADDR
// continue ;
5528: GO 5383
// end ; if not HasTask ( russianPatrol [ i ] ) then
5530: LD_EXP 42
5534: PUSH
5535: LD_VAR 0 2
5539: ARRAY
5540: PPUSH
5541: CALL_OW 314
5545: NOT
5546: IFFALSE 5630
// for j in patrol [ i ] do
5548: LD_ADDR_VAR 0 3
5552: PUSH
5553: LD_VAR 0 4
5557: PUSH
5558: LD_VAR 0 2
5562: ARRAY
5563: PUSH
5564: FOR_IN
5565: IFFALSE 5628
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5567: LD_EXP 42
5571: PUSH
5572: LD_VAR 0 2
5576: ARRAY
5577: PPUSH
5578: LD_INT 35
5580: PPUSH
5581: LD_INT 175
5583: PPUSH
5584: CALL_OW 12
5588: PPUSH
5589: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5593: LD_EXP 42
5597: PUSH
5598: LD_VAR 0 2
5602: ARRAY
5603: PPUSH
5604: LD_VAR 0 3
5608: PUSH
5609: LD_INT 1
5611: ARRAY
5612: PPUSH
5613: LD_VAR 0 3
5617: PUSH
5618: LD_INT 2
5620: ARRAY
5621: PPUSH
5622: CALL_OW 174
// end ;
5626: GO 5564
5628: POP
5629: POP
// end ;
5630: GO 5383
5632: POP
5633: POP
// until not russianPatrol or russianAlert ;
5634: LD_EXP 42
5638: NOT
5639: PUSH
5640: LD_EXP 9
5644: OR
5645: IFFALSE 5361
// if russianPatrol then
5647: LD_EXP 42
5651: IFFALSE 5668
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5653: LD_EXP 42
5657: PPUSH
5658: LD_INT 161
5660: PPUSH
5661: LD_INT 107
5663: PPUSH
5664: CALL_OW 114
// end ;
5668: PPOPN 4
5670: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5671: LD_EXP 6
5675: PUSH
5676: LD_EXP 13
5680: NOT
5681: AND
5682: IFFALSE 6123
5684: GO 5686
5686: DISABLE
5687: LD_INT 0
5689: PPUSH
5690: PPUSH
5691: PPUSH
5692: PPUSH
5693: PPUSH
// begin enable ;
5694: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5695: LD_ADDR_VAR 0 2
5699: PUSH
5700: LD_EXP 43
5704: PPUSH
5705: LD_INT 21
5707: PUSH
5708: LD_INT 2
5710: PUSH
5711: EMPTY
5712: LIST
5713: LIST
5714: PPUSH
5715: CALL_OW 72
5719: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5720: LD_ADDR_VAR 0 4
5724: PUSH
5725: LD_INT 22
5727: PUSH
5728: LD_INT 4
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: PPUSH
5735: CALL_OW 69
5739: ST_TO_ADDR
// for i in filter do
5740: LD_ADDR_VAR 0 1
5744: PUSH
5745: LD_VAR 0 2
5749: PUSH
5750: FOR_IN
5751: IFFALSE 6121
// begin tmp := IsDrivenBy ( i ) ;
5753: LD_ADDR_VAR 0 3
5757: PUSH
5758: LD_VAR 0 1
5762: PPUSH
5763: CALL_OW 311
5767: ST_TO_ADDR
// if not tmp then
5768: LD_VAR 0 3
5772: NOT
5773: IFFALSE 5777
// continue ;
5775: GO 5750
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5777: LD_VAR 0 1
5781: PPUSH
5782: CALL_OW 261
5786: PUSH
5787: LD_INT 90
5789: GREATER
5790: PUSH
5791: LD_VAR 0 1
5795: PPUSH
5796: CALL_OW 110
5800: PUSH
5801: LD_INT 2
5803: EQUAL
5804: AND
5805: IFFALSE 5821
// SetTag ( i , 0 ) else
5807: LD_VAR 0 1
5811: PPUSH
5812: LD_INT 0
5814: PPUSH
5815: CALL_OW 109
5819: GO 5872
// if GetTag ( i ) = 2 then
5821: LD_VAR 0 1
5825: PPUSH
5826: CALL_OW 110
5830: PUSH
5831: LD_INT 2
5833: EQUAL
5834: IFFALSE 5872
// begin x := rand ( 1 , 2 ) ;
5836: LD_ADDR_VAR 0 5
5840: PUSH
5841: LD_INT 1
5843: PPUSH
5844: LD_INT 2
5846: PPUSH
5847: CALL_OW 12
5851: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5852: LD_VAR 0 1
5856: PPUSH
5857: LD_EXP 44
5861: PUSH
5862: LD_VAR 0 5
5866: ARRAY
5867: PPUSH
5868: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5872: LD_VAR 0 1
5876: PPUSH
5877: CALL_OW 256
5881: PUSH
5882: LD_INT 600
5884: GREATEREQUAL
5885: PUSH
5886: LD_VAR 0 1
5890: PPUSH
5891: CALL_OW 110
5895: NOT
5896: AND
5897: IFFALSE 5923
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5899: LD_VAR 0 1
5903: PPUSH
5904: LD_VAR 0 4
5908: PPUSH
5909: LD_VAR 0 1
5913: PPUSH
5914: CALL_OW 74
5918: PPUSH
5919: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5923: LD_VAR 0 1
5927: PPUSH
5928: CALL_OW 256
5932: PUSH
5933: LD_INT 600
5935: LESS
5936: PUSH
5937: LD_VAR 0 1
5941: PPUSH
5942: CALL_OW 110
5946: NOT
5947: AND
5948: IFFALSE 5977
// begin SetTag ( i , 1 ) ;
5950: LD_VAR 0 1
5954: PPUSH
5955: LD_INT 1
5957: PPUSH
5958: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5962: LD_VAR 0 1
5966: PPUSH
5967: LD_INT 62
5969: PPUSH
5970: LD_INT 22
5972: PPUSH
5973: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5977: LD_VAR 0 1
5981: PPUSH
5982: CALL_OW 110
5986: PUSH
5987: LD_INT 1
5989: EQUAL
5990: PUSH
5991: LD_VAR 0 1
5995: PPUSH
5996: LD_INT 62
5998: PPUSH
5999: LD_INT 22
6001: PPUSH
6002: CALL_OW 297
6006: PUSH
6007: LD_INT 6
6009: LESS
6010: AND
6011: PUSH
6012: LD_VAR 0 3
6016: AND
6017: IFFALSE 6119
// begin ComExitVehicle ( tmp ) ;
6019: LD_VAR 0 3
6023: PPUSH
6024: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
6028: LD_VAR 0 3
6032: PPUSH
6033: LD_VAR 0 1
6037: PPUSH
6038: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
6042: LD_INT 35
6044: PPUSH
6045: CALL_OW 67
// until GetLives ( i ) = 1000 ;
6049: LD_VAR 0 1
6053: PPUSH
6054: CALL_OW 256
6058: PUSH
6059: LD_INT 1000
6061: EQUAL
6062: IFFALSE 6042
// ComEnterUnit ( tmp , i ) ;
6064: LD_VAR 0 3
6068: PPUSH
6069: LD_VAR 0 1
6073: PPUSH
6074: CALL_OW 120
// if GetFuel ( i ) <= 90 then
6078: LD_VAR 0 1
6082: PPUSH
6083: CALL_OW 261
6087: PUSH
6088: LD_INT 90
6090: LESSEQUAL
6091: IFFALSE 6107
// SetTag ( i , 2 ) else
6093: LD_VAR 0 1
6097: PPUSH
6098: LD_INT 2
6100: PPUSH
6101: CALL_OW 109
6105: GO 6119
// SetTag ( i , 0 ) ;
6107: LD_VAR 0 1
6111: PPUSH
6112: LD_INT 0
6114: PPUSH
6115: CALL_OW 109
// end ; end ;
6119: GO 5750
6121: POP
6122: POP
// end ;
6123: PPOPN 5
6125: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
6126: LD_EXP 19
6130: IFFALSE 6332
6132: GO 6134
6134: DISABLE
6135: LD_INT 0
6137: PPUSH
6138: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
6139: LD_EXP 44
6143: PPUSH
6144: LD_INT 79
6146: PPUSH
6147: LD_INT 155
6149: PPUSH
6150: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
6154: LD_EXP 44
6158: PPUSH
6159: LD_INT 16
6161: PPUSH
6162: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6166: LD_ADDR_VAR 0 2
6170: PUSH
6171: LD_EXP 43
6175: PPUSH
6176: LD_INT 50
6178: PUSH
6179: EMPTY
6180: LIST
6181: PPUSH
6182: CALL_OW 72
6186: ST_TO_ADDR
// for i in tmp do
6187: LD_ADDR_VAR 0 1
6191: PUSH
6192: LD_VAR 0 2
6196: PUSH
6197: FOR_IN
6198: IFFALSE 6232
// begin ComAgressiveMove ( i , 123 , 60 ) ;
6200: LD_VAR 0 1
6204: PPUSH
6205: LD_INT 123
6207: PPUSH
6208: LD_INT 60
6210: PPUSH
6211: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
6215: LD_VAR 0 1
6219: PPUSH
6220: LD_INT 153
6222: PPUSH
6223: LD_INT 103
6225: PPUSH
6226: CALL_OW 174
// end ;
6230: GO 6197
6232: POP
6233: POP
// repeat wait ( 0 0$1 ) ;
6234: LD_INT 35
6236: PPUSH
6237: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6241: LD_ADDR_VAR 0 2
6245: PUSH
6246: LD_EXP 43
6250: PPUSH
6251: LD_INT 50
6253: PUSH
6254: EMPTY
6255: LIST
6256: PPUSH
6257: CALL_OW 72
6261: ST_TO_ADDR
// for i in tmp do
6262: LD_ADDR_VAR 0 1
6266: PUSH
6267: LD_VAR 0 2
6271: PUSH
6272: FOR_IN
6273: IFFALSE 6323
// if not HasTask ( i ) then
6275: LD_VAR 0 1
6279: PPUSH
6280: CALL_OW 314
6284: NOT
6285: IFFALSE 6321
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) until not tmp ;
6287: LD_VAR 0 1
6291: PPUSH
6292: LD_INT 81
6294: PUSH
6295: LD_INT 3
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: PPUSH
6302: CALL_OW 69
6306: PPUSH
6307: LD_VAR 0 1
6311: PPUSH
6312: CALL_OW 74
6316: PPUSH
6317: CALL_OW 115
6321: GO 6272
6323: POP
6324: POP
6325: LD_VAR 0 2
6329: NOT
6330: IFFALSE 6234
// end ; end_of_file
6332: PPOPN 2
6334: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6335: LD_INT 0
6337: PPUSH
6338: PPUSH
6339: PPUSH
// SetBName ( omikron , omikron ) ;
6340: LD_INT 64
6342: PPUSH
6343: LD_STRING omikron
6345: PPUSH
6346: CALL_OW 500
// uc_side := 4 ;
6350: LD_ADDR_OWVAR 20
6354: PUSH
6355: LD_INT 4
6357: ST_TO_ADDR
// uc_nation := 1 ;
6358: LD_ADDR_OWVAR 21
6362: PUSH
6363: LD_INT 1
6365: ST_TO_ADDR
// omicronSquad := [ ] ;
6366: LD_ADDR_EXP 46
6370: PUSH
6371: EMPTY
6372: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6373: LD_ADDR_VAR 0 2
6377: PUSH
6378: LD_INT 22
6380: PUSH
6381: LD_INT 4
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: PUSH
6388: LD_INT 2
6390: PUSH
6391: LD_INT 30
6393: PUSH
6394: LD_INT 32
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: PUSH
6401: LD_INT 30
6403: PUSH
6404: LD_INT 31
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: LIST
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: PPUSH
6420: CALL_OW 69
6424: PUSH
6425: FOR_IN
6426: IFFALSE 6483
// begin PrepareHuman ( false , 1 , 1 ) ;
6428: LD_INT 0
6430: PPUSH
6431: LD_INT 1
6433: PPUSH
6434: LD_INT 1
6436: PPUSH
6437: CALL_OW 380
// un := CreateHuman ;
6441: LD_ADDR_VAR 0 3
6445: PUSH
6446: CALL_OW 44
6450: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6451: LD_ADDR_EXP 46
6455: PUSH
6456: LD_EXP 46
6460: PUSH
6461: LD_VAR 0 3
6465: UNION
6466: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6467: LD_VAR 0 3
6471: PPUSH
6472: LD_VAR 0 2
6476: PPUSH
6477: CALL_OW 52
// end ;
6481: GO 6425
6483: POP
6484: POP
// for i := 1 to 3 do
6485: LD_ADDR_VAR 0 2
6489: PUSH
6490: DOUBLE
6491: LD_INT 1
6493: DEC
6494: ST_TO_ADDR
6495: LD_INT 3
6497: PUSH
6498: FOR_TO
6499: IFFALSE 6554
// begin PrepareHuman ( false , 2 , 2 ) ;
6501: LD_INT 0
6503: PPUSH
6504: LD_INT 2
6506: PPUSH
6507: LD_INT 2
6509: PPUSH
6510: CALL_OW 380
// un := CreateHuman ;
6514: LD_ADDR_VAR 0 3
6518: PUSH
6519: CALL_OW 44
6523: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6524: LD_ADDR_EXP 46
6528: PUSH
6529: LD_EXP 46
6533: PUSH
6534: LD_VAR 0 3
6538: UNION
6539: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6540: LD_VAR 0 3
6544: PPUSH
6545: LD_INT 64
6547: PPUSH
6548: CALL_OW 52
// end ;
6552: GO 6498
6554: POP
6555: POP
// for i := 1 to 2 do
6556: LD_ADDR_VAR 0 2
6560: PUSH
6561: DOUBLE
6562: LD_INT 1
6564: DEC
6565: ST_TO_ADDR
6566: LD_INT 2
6568: PUSH
6569: FOR_TO
6570: IFFALSE 6709
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6572: LD_INT 4
6574: PPUSH
6575: LD_INT 1
6577: PPUSH
6578: LD_INT 2
6580: PPUSH
6581: LD_INT 2
6583: PPUSH
6584: LD_INT 1
6586: PPUSH
6587: LD_INT 3
6589: PPUSH
6590: LD_INT 100
6592: PPUSH
6593: CALL 292 0 7
// un := CreateVehicle ;
6597: LD_ADDR_VAR 0 3
6601: PUSH
6602: CALL_OW 45
6606: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6607: LD_ADDR_EXP 46
6611: PUSH
6612: LD_EXP 46
6616: PUSH
6617: LD_VAR 0 3
6621: UNION
6622: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
6623: LD_VAR 0 3
6627: PPUSH
6628: LD_INT 28
6630: PPUSH
6631: LD_INT 37
6633: PPUSH
6634: LD_INT 6
6636: PPUSH
6637: LD_INT 0
6639: PPUSH
6640: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
6644: LD_INT 0
6646: PPUSH
6647: LD_INT 3
6649: PPUSH
6650: LD_INT 2
6652: PPUSH
6653: CALL_OW 380
// un := CreateHuman ;
6657: LD_ADDR_VAR 0 3
6661: PUSH
6662: CALL_OW 44
6666: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6667: LD_ADDR_EXP 46
6671: PUSH
6672: LD_EXP 46
6676: PUSH
6677: LD_VAR 0 3
6681: UNION
6682: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
6683: LD_VAR 0 3
6687: PPUSH
6688: LD_EXP 46
6692: PUSH
6693: LD_EXP 46
6697: PUSH
6698: LD_INT 1
6700: MINUS
6701: ARRAY
6702: PPUSH
6703: CALL_OW 52
// end ;
6707: GO 6569
6709: POP
6710: POP
// end ;
6711: LD_VAR 0 1
6715: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
6716: LD_INT 0
6718: PPUSH
6719: PPUSH
6720: PPUSH
6721: PPUSH
// uc_side := 4 ;
6722: LD_ADDR_OWVAR 20
6726: PUSH
6727: LD_INT 4
6729: ST_TO_ADDR
// uc_nation := 1 ;
6730: LD_ADDR_OWVAR 21
6734: PUSH
6735: LD_INT 1
6737: ST_TO_ADDR
// tmp := [ ] ;
6738: LD_ADDR_VAR 0 4
6742: PUSH
6743: EMPTY
6744: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
6745: LD_INT 4
6747: PPUSH
6748: LD_INT 1
6750: PPUSH
6751: LD_INT 2
6753: PPUSH
6754: LD_INT 1
6756: PPUSH
6757: LD_INT 1
6759: PPUSH
6760: LD_INT 4
6762: PPUSH
6763: LD_INT 77
6765: PPUSH
6766: CALL 292 0 7
// un := CreateVehicle ;
6770: LD_ADDR_VAR 0 3
6774: PUSH
6775: CALL_OW 45
6779: ST_TO_ADDR
// tmp := tmp union un ;
6780: LD_ADDR_VAR 0 4
6784: PUSH
6785: LD_VAR 0 4
6789: PUSH
6790: LD_VAR 0 3
6794: UNION
6795: ST_TO_ADDR
// SetDir ( un , 2 ) ;
6796: LD_VAR 0 3
6800: PPUSH
6801: LD_INT 2
6803: PPUSH
6804: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
6808: LD_VAR 0 3
6812: PPUSH
6813: LD_INT 106
6815: PPUSH
6816: LD_INT 3
6818: PPUSH
6819: LD_INT 0
6821: PPUSH
6822: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
6826: LD_INT 0
6828: PPUSH
6829: LD_INT 3
6831: PPUSH
6832: LD_INT 2
6834: PPUSH
6835: CALL_OW 380
// un := CreateHuman ;
6839: LD_ADDR_VAR 0 3
6843: PUSH
6844: CALL_OW 44
6848: ST_TO_ADDR
// tmp := tmp union un ;
6849: LD_ADDR_VAR 0 4
6853: PUSH
6854: LD_VAR 0 4
6858: PUSH
6859: LD_VAR 0 3
6863: UNION
6864: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
6865: LD_VAR 0 3
6869: PPUSH
6870: LD_VAR 0 4
6874: PUSH
6875: LD_VAR 0 4
6879: PUSH
6880: LD_INT 1
6882: MINUS
6883: ARRAY
6884: PPUSH
6885: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
6889: LD_VAR 0 3
6893: PPUSH
6894: LD_INT 109
6896: PPUSH
6897: LD_INT 9
6899: PPUSH
6900: CALL_OW 111
// wait ( 0 0$1 ) ;
6904: LD_INT 35
6906: PPUSH
6907: CALL_OW 67
// for i := 1 to 2 do
6911: LD_ADDR_VAR 0 2
6915: PUSH
6916: DOUBLE
6917: LD_INT 1
6919: DEC
6920: ST_TO_ADDR
6921: LD_INT 2
6923: PUSH
6924: FOR_TO
6925: IFFALSE 6989
// begin PrepareHuman ( false , 1 , 2 ) ;
6927: LD_INT 0
6929: PPUSH
6930: LD_INT 1
6932: PPUSH
6933: LD_INT 2
6935: PPUSH
6936: CALL_OW 380
// un := CreateHuman ;
6940: LD_ADDR_VAR 0 3
6944: PUSH
6945: CALL_OW 44
6949: ST_TO_ADDR
// tmp := tmp union un ;
6950: LD_ADDR_VAR 0 4
6954: PUSH
6955: LD_VAR 0 4
6959: PUSH
6960: LD_VAR 0 3
6964: UNION
6965: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
6966: LD_VAR 0 3
6970: PPUSH
6971: LD_INT 105
6973: PPUSH
6974: LD_INT 2
6976: PPUSH
6977: LD_INT 2
6979: PPUSH
6980: LD_INT 0
6982: PPUSH
6983: CALL_OW 50
// end ;
6987: GO 6924
6989: POP
6990: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
6991: LD_VAR 0 4
6995: PPUSH
6996: LD_INT 26
6998: PPUSH
6999: LD_INT 35
7001: PPUSH
7002: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7006: LD_INT 35
7008: PPUSH
7009: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7013: LD_VAR 0 4
7017: PPUSH
7018: LD_INT 50
7020: PUSH
7021: EMPTY
7022: LIST
7023: PPUSH
7024: CALL_OW 72
7028: NOT
7029: IFFALSE 7033
// exit ;
7031: GO 7160
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7033: LD_VAR 0 4
7037: PPUSH
7038: LD_INT 91
7040: PUSH
7041: LD_INT 64
7043: PUSH
7044: LD_INT 12
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: LIST
7051: PPUSH
7052: CALL_OW 72
7056: PUSH
7057: LD_VAR 0 4
7061: EQUAL
7062: IFFALSE 7006
// omicronSquad := omicronSquad union tmp ;
7064: LD_ADDR_EXP 46
7068: PUSH
7069: LD_EXP 46
7073: PUSH
7074: LD_VAR 0 4
7078: UNION
7079: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7080: LD_ADDR_VAR 0 2
7084: PUSH
7085: LD_VAR 0 4
7089: PPUSH
7090: LD_INT 25
7092: PUSH
7093: LD_INT 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PPUSH
7100: CALL_OW 72
7104: PUSH
7105: FOR_IN
7106: IFFALSE 7158
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7108: LD_VAR 0 2
7112: PPUSH
7113: LD_INT 22
7115: PUSH
7116: LD_INT 4
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: LD_INT 30
7125: PUSH
7126: LD_INT 4
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: PPUSH
7137: CALL_OW 69
7141: PPUSH
7142: LD_VAR 0 2
7146: PPUSH
7147: CALL_OW 74
7151: PPUSH
7152: CALL_OW 120
7156: GO 7105
7158: POP
7159: POP
// end ;
7160: LD_VAR 0 1
7164: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7165: LD_EXP 13
7169: NOT
7170: IFFALSE 7741
7172: GO 7174
7174: DISABLE
7175: LD_INT 0
7177: PPUSH
7178: PPUSH
7179: PPUSH
7180: PPUSH
// begin enable ;
7181: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7182: LD_ADDR_VAR 0 2
7186: PUSH
7187: LD_INT 22
7189: PUSH
7190: LD_INT 4
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: LD_INT 21
7199: PUSH
7200: LD_INT 3
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: LD_INT 3
7209: PUSH
7210: LD_INT 24
7212: PUSH
7213: LD_INT 1000
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: LIST
7228: PPUSH
7229: CALL_OW 69
7233: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7234: LD_ADDR_VAR 0 3
7238: PUSH
7239: LD_EXP 46
7243: PPUSH
7244: LD_INT 25
7246: PUSH
7247: LD_INT 2
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: PPUSH
7254: CALL_OW 72
7258: ST_TO_ADDR
// if filter and tmp then
7259: LD_VAR 0 2
7263: PUSH
7264: LD_VAR 0 3
7268: AND
7269: IFFALSE 7342
// begin for i in tmp do
7271: LD_ADDR_VAR 0 1
7275: PUSH
7276: LD_VAR 0 3
7280: PUSH
7281: FOR_IN
7282: IFFALSE 7338
// if IsInUnit ( i ) then
7284: LD_VAR 0 1
7288: PPUSH
7289: CALL_OW 310
7293: IFFALSE 7306
// ComExitBuilding ( i ) else
7295: LD_VAR 0 1
7299: PPUSH
7300: CALL_OW 122
7304: GO 7336
// if not HasTask ( i ) then
7306: LD_VAR 0 1
7310: PPUSH
7311: CALL_OW 314
7315: NOT
7316: IFFALSE 7336
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7318: LD_VAR 0 1
7322: PPUSH
7323: LD_VAR 0 2
7327: PUSH
7328: LD_INT 1
7330: ARRAY
7331: PPUSH
7332: CALL_OW 130
7336: GO 7281
7338: POP
7339: POP
// end else
7340: GO 7413
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7342: LD_VAR 0 3
7346: PPUSH
7347: LD_INT 3
7349: PUSH
7350: LD_INT 54
7352: PUSH
7353: EMPTY
7354: LIST
7355: PUSH
7356: EMPTY
7357: LIST
7358: LIST
7359: PPUSH
7360: CALL_OW 72
7364: IFFALSE 7413
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7366: LD_ADDR_VAR 0 1
7370: PUSH
7371: LD_VAR 0 3
7375: PPUSH
7376: LD_INT 3
7378: PUSH
7379: LD_INT 54
7381: PUSH
7382: EMPTY
7383: LIST
7384: PUSH
7385: EMPTY
7386: LIST
7387: LIST
7388: PPUSH
7389: CALL_OW 72
7393: PUSH
7394: FOR_IN
7395: IFFALSE 7411
// ComEnterUnit ( i , omikron ) ;
7397: LD_VAR 0 1
7401: PPUSH
7402: LD_INT 64
7404: PPUSH
7405: CALL_OW 120
7409: GO 7394
7411: POP
7412: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7413: LD_ADDR_VAR 0 2
7417: PUSH
7418: LD_EXP 46
7422: PPUSH
7423: LD_INT 21
7425: PUSH
7426: LD_INT 2
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: PPUSH
7433: CALL_OW 72
7437: ST_TO_ADDR
// if not filter then
7438: LD_VAR 0 2
7442: NOT
7443: IFFALSE 7447
// exit ;
7445: GO 7741
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7447: LD_ADDR_VAR 0 4
7451: PUSH
7452: LD_INT 13
7454: PPUSH
7455: LD_INT 81
7457: PUSH
7458: LD_INT 4
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: PPUSH
7465: CALL_OW 70
7469: ST_TO_ADDR
// if enemy then
7470: LD_VAR 0 4
7474: IFFALSE 7741
// begin for i in filter do
7476: LD_ADDR_VAR 0 1
7480: PUSH
7481: LD_VAR 0 2
7485: PUSH
7486: FOR_IN
7487: IFFALSE 7739
// begin tmp := IsDrivenBy ( i ) ;
7489: LD_ADDR_VAR 0 3
7493: PUSH
7494: LD_VAR 0 1
7498: PPUSH
7499: CALL_OW 311
7503: ST_TO_ADDR
// if not tmp then
7504: LD_VAR 0 3
7508: NOT
7509: IFFALSE 7513
// continue ;
7511: GO 7486
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7513: LD_VAR 0 1
7517: PPUSH
7518: CALL_OW 256
7522: PUSH
7523: LD_INT 600
7525: GREATEREQUAL
7526: PUSH
7527: LD_VAR 0 1
7531: PPUSH
7532: CALL_OW 110
7536: PUSH
7537: LD_INT 1
7539: NONEQUAL
7540: AND
7541: IFFALSE 7567
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7543: LD_VAR 0 1
7547: PPUSH
7548: LD_VAR 0 4
7552: PPUSH
7553: LD_VAR 0 1
7557: PPUSH
7558: CALL_OW 74
7562: PPUSH
7563: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7567: LD_VAR 0 1
7571: PPUSH
7572: CALL_OW 256
7576: PUSH
7577: LD_INT 600
7579: LESS
7580: PUSH
7581: LD_VAR 0 1
7585: PPUSH
7586: CALL_OW 110
7590: PUSH
7591: LD_INT 1
7593: NONEQUAL
7594: AND
7595: IFFALSE 7624
// begin SetTag ( i , 1 ) ;
7597: LD_VAR 0 1
7601: PPUSH
7602: LD_INT 1
7604: PPUSH
7605: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
7609: LD_VAR 0 1
7613: PPUSH
7614: LD_INT 27
7616: PPUSH
7617: LD_INT 35
7619: PPUSH
7620: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
7624: LD_VAR 0 1
7628: PPUSH
7629: CALL_OW 110
7633: PUSH
7634: LD_INT 1
7636: EQUAL
7637: PUSH
7638: LD_VAR 0 1
7642: PPUSH
7643: LD_INT 27
7645: PPUSH
7646: LD_INT 35
7648: PPUSH
7649: CALL_OW 297
7653: PUSH
7654: LD_INT 6
7656: LESS
7657: AND
7658: PUSH
7659: LD_VAR 0 3
7663: AND
7664: IFFALSE 7737
// begin ComExitVehicle ( tmp ) ;
7666: LD_VAR 0 3
7670: PPUSH
7671: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
7675: LD_VAR 0 3
7679: PPUSH
7680: LD_VAR 0 1
7684: PPUSH
7685: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
7689: LD_INT 35
7691: PPUSH
7692: CALL_OW 67
// until GetLives ( i ) = 1000 ;
7696: LD_VAR 0 1
7700: PPUSH
7701: CALL_OW 256
7705: PUSH
7706: LD_INT 1000
7708: EQUAL
7709: IFFALSE 7689
// ComEnterUnit ( tmp , i ) ;
7711: LD_VAR 0 3
7715: PPUSH
7716: LD_VAR 0 1
7720: PPUSH
7721: CALL_OW 120
// SetTag ( i , 0 ) ;
7725: LD_VAR 0 1
7729: PPUSH
7730: LD_INT 0
7732: PPUSH
7733: CALL_OW 109
// end ; end ;
7737: GO 7486
7739: POP
7740: POP
// end ; end ;
7741: PPOPN 4
7743: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
7744: LD_EXP 13
7748: IFFALSE 7892
7750: GO 7752
7752: DISABLE
7753: LD_INT 0
7755: PPUSH
7756: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
7757: LD_ADDR_VAR 0 2
7761: PUSH
7762: LD_EXP 46
7766: PPUSH
7767: LD_INT 21
7769: PUSH
7770: LD_INT 1
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: PUSH
7777: LD_INT 50
7779: PUSH
7780: EMPTY
7781: LIST
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: PPUSH
7787: CALL_OW 72
7791: ST_TO_ADDR
// if not tmp then
7792: LD_VAR 0 2
7796: NOT
7797: IFFALSE 7801
// exit ;
7799: GO 7892
// repeat wait ( 0 0$1 ) ;
7801: LD_INT 35
7803: PPUSH
7804: CALL_OW 67
// for i in tmp do
7808: LD_ADDR_VAR 0 1
7812: PUSH
7813: LD_VAR 0 2
7817: PUSH
7818: FOR_IN
7819: IFFALSE 7883
// begin ComExit ( i ) ;
7821: LD_VAR 0 1
7825: PPUSH
7826: CALL 1064 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
7830: LD_VAR 0 1
7834: PPUSH
7835: LD_INT 14
7837: PPUSH
7838: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
7842: LD_VAR 0 1
7846: PPUSH
7847: LD_INT 14
7849: PPUSH
7850: CALL_OW 308
7854: IFFALSE 7881
// begin tmp := tmp diff i ;
7856: LD_ADDR_VAR 0 2
7860: PUSH
7861: LD_VAR 0 2
7865: PUSH
7866: LD_VAR 0 1
7870: DIFF
7871: ST_TO_ADDR
// RemoveUnit ( i ) ;
7872: LD_VAR 0 1
7876: PPUSH
7877: CALL_OW 64
// end ; end ;
7881: GO 7818
7883: POP
7884: POP
// until not tmp ;
7885: LD_VAR 0 2
7889: NOT
7890: IFFALSE 7801
// end ; end_of_file
7892: PPOPN 2
7894: END
// export function Action ; var i , un , veh , tmp ; begin
7895: LD_INT 0
7897: PPUSH
7898: PPUSH
7899: PPUSH
7900: PPUSH
7901: PPUSH
// InGameOn ;
7902: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
7906: LD_INT 179
7908: PPUSH
7909: LD_INT 5
7911: PPUSH
7912: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
7916: LD_ADDR_VAR 0 4
7920: PUSH
7921: LD_INT 2
7923: PPUSH
7924: LD_INT 2
7926: PPUSH
7927: LD_INT 12
7929: PPUSH
7930: LD_INT 1
7932: PPUSH
7933: LD_INT 1
7935: PPUSH
7936: LD_INT 24
7938: PPUSH
7939: LD_INT 33
7941: PPUSH
7942: CALL 292 0 7
7946: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
7947: LD_VAR 0 4
7951: PPUSH
7952: LD_INT 2
7954: PPUSH
7955: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
7959: LD_VAR 0 4
7963: PPUSH
7964: LD_INT 178
7966: PPUSH
7967: LD_INT 2
7969: PPUSH
7970: LD_INT 0
7972: PPUSH
7973: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
7977: LD_EXP 21
7981: PPUSH
7982: LD_VAR 0 4
7986: PPUSH
7987: CALL_OW 52
// if Kamil then
7991: LD_EXP 25
7995: IFFALSE 8030
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
7997: LD_EXP 25
8001: PPUSH
8002: LD_INT 207
8004: PPUSH
8005: LD_INT 37
8007: PPUSH
8008: LD_INT 0
8010: PPUSH
8011: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8015: LD_EXP 25
8019: PPUSH
8020: LD_INT 211
8022: PPUSH
8023: LD_INT 38
8025: PPUSH
8026: CALL_OW 118
// end ; if Sophia then
8030: LD_EXP 27
8034: IFFALSE 8069
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8036: LD_EXP 27
8040: PPUSH
8041: LD_INT 209
8043: PPUSH
8044: LD_INT 40
8046: PPUSH
8047: LD_INT 0
8049: PPUSH
8050: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8054: LD_EXP 27
8058: PPUSH
8059: LD_INT 211
8061: PPUSH
8062: LD_INT 38
8064: PPUSH
8065: CALL_OW 118
// end ; if Givi then
8069: LD_EXP 22
8073: IFFALSE 8108
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8075: LD_EXP 22
8079: PPUSH
8080: LD_INT 201
8082: PPUSH
8083: LD_INT 34
8085: PPUSH
8086: LD_INT 0
8088: PPUSH
8089: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8093: LD_EXP 22
8097: PPUSH
8098: LD_INT 206
8100: PPUSH
8101: LD_INT 36
8103: PPUSH
8104: CALL_OW 118
// end ; if Markov then
8108: LD_EXP 28
8112: IFFALSE 8199
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8114: LD_ADDR_VAR 0 4
8118: PUSH
8119: LD_INT 2
8121: PPUSH
8122: LD_INT 2
8124: PPUSH
8125: LD_INT 13
8127: PPUSH
8128: LD_INT 1
8130: PPUSH
8131: LD_INT 1
8133: PPUSH
8134: LD_INT 25
8136: PPUSH
8137: LD_INT 80
8139: PUSH
8140: LD_INT 20
8142: PUSH
8143: LD_OWVAR 67
8147: MUL
8148: MINUS
8149: PPUSH
8150: CALL 292 0 7
8154: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8155: LD_VAR 0 4
8159: PPUSH
8160: LD_INT 2
8162: PPUSH
8163: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8167: LD_VAR 0 4
8171: PPUSH
8172: LD_INT 197
8174: PPUSH
8175: LD_INT 35
8177: PPUSH
8178: LD_INT 0
8180: PPUSH
8181: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8185: LD_EXP 28
8189: PPUSH
8190: LD_VAR 0 4
8194: PPUSH
8195: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8199: LD_ADDR_VAR 0 5
8203: PUSH
8204: LD_EXP 26
8208: PUSH
8209: LD_EXP 32
8213: UNION
8214: ST_TO_ADDR
// for i in tmp do
8215: LD_ADDR_VAR 0 2
8219: PUSH
8220: LD_VAR 0 5
8224: PUSH
8225: FOR_IN
8226: IFFALSE 8260
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8228: LD_VAR 0 2
8232: PPUSH
8233: LD_INT 203
8235: PPUSH
8236: LD_INT 41
8238: PPUSH
8239: LD_INT 6
8241: PPUSH
8242: LD_INT 0
8244: PPUSH
8245: CALL_OW 50
// ComHold ( i ) ;
8249: LD_VAR 0 2
8253: PPUSH
8254: CALL_OW 140
// end ;
8258: GO 8225
8260: POP
8261: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8262: LD_INT 22
8264: PUSH
8265: LD_INT 2
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: PUSH
8272: LD_INT 25
8274: PUSH
8275: LD_INT 2
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: PPUSH
8286: CALL_OW 69
8290: NOT
8291: IFFALSE 8305
// SetClass ( Heike , 2 ) ;
8293: LD_EXP 21
8297: PPUSH
8298: LD_INT 2
8300: PPUSH
8301: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8305: LD_EXP 21
8309: PPUSH
8310: LD_INT 183
8312: PPUSH
8313: LD_INT 12
8315: PPUSH
8316: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8320: LD_EXP 21
8324: PPUSH
8325: LD_INT 188
8327: PPUSH
8328: LD_INT 20
8330: PPUSH
8331: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8335: LD_EXP 21
8339: PPUSH
8340: LD_INT 191
8342: PPUSH
8343: LD_INT 25
8345: PPUSH
8346: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8350: LD_EXP 21
8354: PPUSH
8355: LD_INT 203
8357: PPUSH
8358: LD_INT 29
8360: PPUSH
8361: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8365: LD_EXP 21
8369: PPUSH
8370: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8374: LD_INT 35
8376: PPUSH
8377: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8381: LD_EXP 21
8385: PPUSH
8386: CALL_OW 310
8390: NOT
8391: IFFALSE 8374
// CenterOnUnits ( Heike ) ;
8393: LD_EXP 21
8397: PPUSH
8398: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8402: LD_ADDR_VAR 0 5
8406: PUSH
8407: LD_INT 22
8409: PUSH
8410: LD_INT 2
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: PUSH
8417: LD_INT 21
8419: PUSH
8420: LD_INT 1
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: PPUSH
8431: CALL_OW 69
8435: PUSH
8436: LD_EXP 21
8440: PUSH
8441: LD_EXP 28
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: DIFF
8450: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8451: LD_VAR 0 5
8455: PPUSH
8456: LD_EXP 21
8460: PPUSH
8461: CALL_OW 119
// if Givi then
8465: LD_EXP 22
8469: IFFALSE 8487
// ComTurnUnit ( Heike , Givi ) else
8471: LD_EXP 21
8475: PPUSH
8476: LD_EXP 22
8480: PPUSH
8481: CALL_OW 119
8485: GO 8505
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8487: LD_EXP 21
8491: PPUSH
8492: LD_VAR 0 5
8496: PUSH
8497: LD_INT 1
8499: ARRAY
8500: PPUSH
8501: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8505: LD_EXP 21
8509: PPUSH
8510: LD_STRING DH-Start-1
8512: PPUSH
8513: CALL_OW 88
// if Givi then
8517: LD_EXP 22
8521: IFFALSE 8568
// begin Say ( Givi , DG-Start-2 ) ;
8523: LD_EXP 22
8527: PPUSH
8528: LD_STRING DG-Start-2
8530: PPUSH
8531: CALL_OW 88
// if not Mike then
8535: LD_EXP 23
8539: NOT
8540: IFFALSE 8566
// begin Say ( Givi , DG-Start-b-3 ) ;
8542: LD_EXP 22
8546: PPUSH
8547: LD_STRING DG-Start-b-3
8549: PPUSH
8550: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
8554: LD_EXP 21
8558: PPUSH
8559: LD_STRING DH-Start-b-4
8561: PPUSH
8562: CALL_OW 88
// end ; end else
8566: GO 8633
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
8568: LD_EXP 32
8572: PPUSH
8573: LD_INT 26
8575: PUSH
8576: LD_INT 1
8578: PUSH
8579: EMPTY
8580: LIST
8581: LIST
8582: PPUSH
8583: CALL_OW 72
8587: PUSH
8588: LD_INT 1
8590: ARRAY
8591: PPUSH
8592: LD_STRING DArm-Start-a-2
8594: PPUSH
8595: CALL_OW 88
8599: NOT
8600: IFFALSE 8633
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
8602: LD_EXP 32
8606: PPUSH
8607: LD_INT 26
8609: PUSH
8610: LD_INT 2
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: PPUSH
8617: CALL_OW 72
8621: PUSH
8622: LD_INT 1
8624: ARRAY
8625: PPUSH
8626: LD_STRING DArf-Start-a-2
8628: PPUSH
8629: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
8633: LD_EXP 21
8637: PPUSH
8638: LD_INT 211
8640: PPUSH
8641: LD_INT 38
8643: PPUSH
8644: CALL_OW 118
// wait ( 0 0$1 ) ;
8648: LD_INT 35
8650: PPUSH
8651: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
8655: LD_EXP 21
8659: PPUSH
8660: LD_STRING DH-Start-3
8662: PPUSH
8663: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8667: LD_EXP 21
8671: PPUSH
8672: LD_STRING DH-Start-4
8674: PPUSH
8675: CALL_OW 88
// InGameOff ;
8679: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
8683: LD_STRING Prepare
8685: PPUSH
8686: CALL_OW 337
// wait ( 0 0$10 ) ;
8690: LD_INT 350
8692: PPUSH
8693: CALL_OW 67
// if not Aviradze then
8697: LD_EXP 31
8701: NOT
8702: IFFALSE 8706
// exit ;
8704: GO 8898
// SetDir ( Aviradze , 4 ) ;
8706: LD_EXP 31
8710: PPUSH
8711: LD_INT 4
8713: PPUSH
8714: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
8718: LD_EXP 31
8722: PPUSH
8723: LD_INT 225
8725: PPUSH
8726: LD_INT 33
8728: PPUSH
8729: LD_INT 0
8731: PPUSH
8732: CALL_OW 48
// for i := 1 to 2 do
8736: LD_ADDR_VAR 0 2
8740: PUSH
8741: DOUBLE
8742: LD_INT 1
8744: DEC
8745: ST_TO_ADDR
8746: LD_INT 2
8748: PUSH
8749: FOR_TO
8750: IFFALSE 8881
// begin uc_side := 2 ;
8752: LD_ADDR_OWVAR 20
8756: PUSH
8757: LD_INT 2
8759: ST_TO_ADDR
// uc_nation := 0 ;
8760: LD_ADDR_OWVAR 21
8764: PUSH
8765: LD_INT 0
8767: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
8768: LD_INT 0
8770: PPUSH
8771: LD_INT 12
8773: PPUSH
8774: LD_INT 1
8776: PPUSH
8777: CALL_OW 380
// hc_gallery :=  ;
8781: LD_ADDR_OWVAR 33
8785: PUSH
8786: LD_STRING 
8788: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
8789: LD_ADDR_OWVAR 26
8793: PUSH
8794: LD_STRING Artudito
8796: PUSH
8797: LD_STRING Textur
8799: PUSH
8800: EMPTY
8801: LIST
8802: LIST
8803: PUSH
8804: LD_VAR 0 2
8808: ARRAY
8809: ST_TO_ADDR
// un := CreateHuman ;
8810: LD_ADDR_VAR 0 3
8814: PUSH
8815: CALL_OW 44
8819: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
8820: LD_VAR 0 3
8824: PPUSH
8825: LD_INT 224
8827: PUSH
8828: LD_INT 226
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: PUSH
8835: LD_VAR 0 2
8839: ARRAY
8840: PPUSH
8841: LD_INT 31
8843: PUSH
8844: LD_INT 35
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: PUSH
8851: LD_VAR 0 2
8855: ARRAY
8856: PPUSH
8857: LD_INT 0
8859: PPUSH
8860: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
8864: LD_VAR 0 3
8868: PPUSH
8869: LD_INT 215
8871: PPUSH
8872: LD_INT 36
8874: PPUSH
8875: CALL_OW 111
// end ;
8879: GO 8749
8881: POP
8882: POP
// ComMoveXY ( Aviradze , 215 , 36 ) ;
8883: LD_EXP 31
8887: PPUSH
8888: LD_INT 215
8890: PPUSH
8891: LD_INT 36
8893: PPUSH
8894: CALL_OW 111
// end ;
8898: LD_VAR 0 1
8902: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
8903: LD_EXP 3
8907: IFFALSE 10096
8909: GO 8911
8911: DISABLE
8912: LD_INT 0
8914: PPUSH
8915: PPUSH
8916: PPUSH
// begin DialogueOn ;
8917: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
8921: LD_EXP 21
8925: PPUSH
8926: LD_STRING DH-base-1
8928: PPUSH
8929: CALL_OW 88
// if Markov then
8933: LD_EXP 28
8937: IFFALSE 8989
// begin Say ( Markov , DMar-base-2 ) ;
8939: LD_EXP 28
8943: PPUSH
8944: LD_STRING DMar-base-2
8946: PPUSH
8947: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
8951: LD_EXP 28
8955: PPUSH
8956: LD_STRING DMar-base-3
8958: PPUSH
8959: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
8963: LD_EXP 21
8967: PPUSH
8968: LD_STRING DH-base-4
8970: PPUSH
8971: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
8975: LD_EXP 28
8979: PPUSH
8980: LD_STRING DMar-base-5
8982: PPUSH
8983: CALL_OW 88
// end else
8987: GO 9066
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
8989: LD_EXP 32
8993: PPUSH
8994: LD_INT 26
8996: PUSH
8997: LD_INT 1
8999: PUSH
9000: EMPTY
9001: LIST
9002: LIST
9003: PPUSH
9004: CALL_OW 72
9008: PUSH
9009: LD_INT 1
9011: ARRAY
9012: PPUSH
9013: LD_STRING DArm-base-a-2
9015: PPUSH
9016: CALL_OW 88
9020: NOT
9021: IFFALSE 9054
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9023: LD_EXP 32
9027: PPUSH
9028: LD_INT 26
9030: PUSH
9031: LD_INT 2
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: PPUSH
9038: CALL_OW 72
9042: PUSH
9043: LD_INT 1
9045: ARRAY
9046: PPUSH
9047: LD_STRING DArf-base-a-2
9049: PPUSH
9050: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9054: LD_EXP 21
9058: PPUSH
9059: LD_STRING DH-base-a-3
9061: PPUSH
9062: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9066: LD_EXP 31
9070: PPUSH
9071: LD_STRING DA-base-6
9073: PPUSH
9074: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9078: LD_EXP 31
9082: PPUSH
9083: LD_STRING DA-base-7
9085: PPUSH
9086: CALL_OW 88
// DialogueOff ;
9090: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9094: LD_STRING Flamethrower
9096: PPUSH
9097: CALL_OW 337
// wait ( 2 2$00 ) ;
9101: LD_INT 4200
9103: PPUSH
9104: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9108: LD_EXP 30
9112: PUSH
9113: LD_EXP 23
9117: PUSH
9118: EMPTY
9119: LIST
9120: LIST
9121: PPUSH
9122: LD_INT 203
9124: PPUSH
9125: LD_INT 37
9127: PPUSH
9128: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9132: LD_INT 22
9134: PUSH
9135: LD_INT 2
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PUSH
9142: LD_INT 92
9144: PUSH
9145: LD_INT 203
9147: PUSH
9148: LD_INT 37
9150: PUSH
9151: LD_INT 10
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: PPUSH
9164: CALL_OW 69
9168: NOT
9169: IFFALSE 9209
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9171: LD_EXP 30
9175: PUSH
9176: LD_EXP 23
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: PPUSH
9185: LD_EXP 21
9189: PPUSH
9190: CALL_OW 250
9194: PPUSH
9195: LD_EXP 21
9199: PPUSH
9200: CALL_OW 251
9204: PPUSH
9205: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9209: LD_INT 35
9211: PPUSH
9212: CALL_OW 67
// until See ( 2 , Kurt ) or GetDistUnits ( Kurt , Heike ) < 8 ;
9216: LD_INT 2
9218: PPUSH
9219: LD_EXP 30
9223: PPUSH
9224: CALL_OW 292
9228: PUSH
9229: LD_EXP 30
9233: PPUSH
9234: LD_EXP 21
9238: PPUSH
9239: CALL_OW 296
9243: PUSH
9244: LD_INT 8
9246: LESS
9247: OR
9248: IFFALSE 9209
// InGameOn ;
9250: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9254: LD_EXP 30
9258: PPUSH
9259: CALL_OW 87
// if IsInUnit ( Heike ) then
9263: LD_EXP 21
9267: PPUSH
9268: CALL_OW 310
9272: IFFALSE 9283
// ComExitBuilding ( Heike ) ;
9274: LD_EXP 21
9278: PPUSH
9279: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9283: LD_EXP 30
9287: PUSH
9288: LD_EXP 23
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: PPUSH
9297: LD_EXP 21
9301: PPUSH
9302: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9306: LD_EXP 21
9310: PPUSH
9311: LD_EXP 30
9315: PPUSH
9316: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9320: LD_INT 22
9322: PUSH
9323: LD_INT 2
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: PUSH
9330: LD_INT 91
9332: PUSH
9333: LD_EXP 30
9337: PUSH
9338: LD_INT 10
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: LIST
9345: PUSH
9346: LD_INT 21
9348: PUSH
9349: LD_INT 3
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: LIST
9360: PPUSH
9361: CALL_OW 69
9365: IFFALSE 9391
// begin Say ( Kurt , DKs-scout-1 ) ;
9367: LD_EXP 30
9371: PPUSH
9372: LD_STRING DKs-scout-1
9374: PPUSH
9375: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9379: LD_EXP 21
9383: PPUSH
9384: LD_STRING DH-scout-2
9386: PPUSH
9387: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9391: LD_INT 35
9393: PPUSH
9394: CALL_OW 67
// until GetDistUnits ( Heike , Kurt ) < 6 ;
9398: LD_EXP 21
9402: PPUSH
9403: LD_EXP 30
9407: PPUSH
9408: CALL_OW 296
9412: PUSH
9413: LD_INT 6
9415: LESS
9416: IFFALSE 9391
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
9418: LD_EXP 30
9422: PUSH
9423: LD_EXP 23
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PPUSH
9432: LD_EXP 21
9436: PPUSH
9437: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
9441: LD_EXP 30
9445: PPUSH
9446: LD_STRING DKs-scout-3
9448: PPUSH
9449: CALL_OW 88
// if Kaia then
9453: LD_EXP 26
9457: IFFALSE 9640
// begin if IsInUnit ( Kaia ) then
9459: LD_EXP 26
9463: PPUSH
9464: CALL_OW 310
9468: IFFALSE 9479
// ComExitBuilding ( Kaia ) ;
9470: LD_EXP 26
9474: PPUSH
9475: CALL_OW 122
// AddComMoveUnit ( Kaia , Kurt ) ;
9479: LD_EXP 26
9483: PPUSH
9484: LD_EXP 30
9488: PPUSH
9489: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
9493: LD_INT 35
9495: PPUSH
9496: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
9500: LD_EXP 26
9504: PPUSH
9505: LD_EXP 30
9509: PPUSH
9510: CALL_OW 296
9514: PUSH
9515: LD_INT 6
9517: LESS
9518: IFFALSE 9493
// ComTurnUnit ( Kaia , Kurt ) ;
9520: LD_EXP 26
9524: PPUSH
9525: LD_EXP 30
9529: PPUSH
9530: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
9534: LD_EXP 26
9538: PPUSH
9539: LD_STRING DK-scout-4
9541: PPUSH
9542: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
9546: LD_EXP 30
9550: PPUSH
9551: LD_EXP 26
9555: PPUSH
9556: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
9560: LD_EXP 30
9564: PPUSH
9565: LD_STRING DKs-scout-5
9567: PPUSH
9568: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
9572: LD_EXP 26
9576: PPUSH
9577: LD_STRING DK-scout-6
9579: PPUSH
9580: CALL_OW 88
// if Mike then
9584: LD_EXP 23
9588: IFFALSE 9640
// begin Say ( Mike , DM-scout-7 ) ;
9590: LD_EXP 23
9594: PPUSH
9595: LD_STRING DM-scout-7
9597: PPUSH
9598: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
9602: LD_EXP 26
9606: PPUSH
9607: LD_EXP 23
9611: PPUSH
9612: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
9616: LD_EXP 26
9620: PPUSH
9621: LD_STRING DK-scout-8
9623: PPUSH
9624: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
9628: LD_EXP 23
9632: PPUSH
9633: LD_STRING DM-scout-9
9635: PPUSH
9636: CALL_OW 88
// end ; end ; ShowArea ( 2 , scoutArea ) ;
9640: LD_INT 2
9642: PPUSH
9643: LD_INT 9
9645: PPUSH
9646: CALL_OW 334
// CenterOnXY ( 184 , 100 ) ;
9650: LD_INT 184
9652: PPUSH
9653: LD_INT 100
9655: PPUSH
9656: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
9660: LD_EXP 30
9664: PPUSH
9665: LD_STRING DKs-scout-10
9667: PPUSH
9668: CALL_OW 88
// wait ( 0 0$1 ) ;
9672: LD_INT 35
9674: PPUSH
9675: CALL_OW 67
// ShowArea ( 2 , hillArea ) ;
9679: LD_INT 2
9681: PPUSH
9682: LD_INT 10
9684: PPUSH
9685: CALL_OW 334
// CenterOnXY ( 144 , 65 ) ;
9689: LD_INT 144
9691: PPUSH
9692: LD_INT 65
9694: PPUSH
9695: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
9699: LD_EXP 30
9703: PPUSH
9704: LD_STRING DKs-scout-11
9706: PPUSH
9707: CALL_OW 88
// wait ( 0 0$1 ) ;
9711: LD_INT 35
9713: PPUSH
9714: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
9718: LD_EXP 30
9722: PPUSH
9723: CALL_OW 87
// if Mike and not Givi then
9727: LD_EXP 23
9731: PUSH
9732: LD_EXP 22
9736: NOT
9737: AND
9738: IFFALSE 9764
// begin Say ( Mike , DM-scout-a-1 ) ;
9740: LD_EXP 23
9744: PPUSH
9745: LD_STRING DM-scout-a-1
9747: PPUSH
9748: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
9752: LD_EXP 21
9756: PPUSH
9757: LD_STRING DH-scout-a-2
9759: PPUSH
9760: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
9764: LD_EXP 30
9768: PUSH
9769: LD_EXP 23
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: PPUSH
9778: LD_INT 2
9780: PPUSH
9781: CALL_OW 235
// InGameOff ;
9785: CALL_OW 9
// allowToPatrol := true ;
9789: LD_ADDR_EXP 12
9793: PUSH
9794: LD_INT 1
9796: ST_TO_ADDR
// wait ( 1 1$30 ) ;
9797: LD_INT 3150
9799: PPUSH
9800: CALL_OW 67
// for i := 1 to [ 3 , 3 , 2 ] [ Difficulty ] do
9804: LD_ADDR_VAR 0 1
9808: PUSH
9809: DOUBLE
9810: LD_INT 1
9812: DEC
9813: ST_TO_ADDR
9814: LD_INT 3
9816: PUSH
9817: LD_INT 3
9819: PUSH
9820: LD_INT 2
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: LIST
9827: PUSH
9828: LD_OWVAR 67
9832: ARRAY
9833: PUSH
9834: FOR_TO
9835: IFFALSE 10094
// begin uc_side := 2 ;
9837: LD_ADDR_OWVAR 20
9841: PUSH
9842: LD_INT 2
9844: ST_TO_ADDR
// uc_nation := 2 ;
9845: LD_ADDR_OWVAR 21
9849: PUSH
9850: LD_INT 2
9852: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 ] [ Difficulty ] ) ;
9853: LD_INT 0
9855: PPUSH
9856: LD_INT 1
9858: PUSH
9859: LD_INT 3
9861: PUSH
9862: LD_INT 1
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: LIST
9869: PUSH
9870: LD_VAR 0 1
9874: PUSH
9875: LD_INT 3
9877: MOD
9878: PUSH
9879: LD_INT 1
9881: PLUS
9882: ARRAY
9883: PPUSH
9884: LD_INT 3
9886: PUSH
9887: LD_INT 2
9889: PUSH
9890: LD_INT 2
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: LIST
9897: PUSH
9898: LD_OWVAR 67
9902: ARRAY
9903: PPUSH
9904: CALL_OW 380
// un := CreateHuman ;
9908: LD_ADDR_VAR 0 2
9912: PUSH
9913: CALL_OW 44
9917: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
9918: LD_ADDR_EXP 32
9922: PUSH
9923: LD_EXP 32
9927: PUSH
9928: LD_VAR 0 2
9932: UNION
9933: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
9934: LD_INT 2
9936: PPUSH
9937: LD_INT 2
9939: PPUSH
9940: LD_INT 13
9942: PPUSH
9943: LD_INT 2
9945: PUSH
9946: LD_INT 1
9948: PUSH
9949: EMPTY
9950: LIST
9951: LIST
9952: PUSH
9953: LD_VAR 0 1
9957: PUSH
9958: LD_INT 2
9960: MOD
9961: PUSH
9962: LD_INT 1
9964: PLUS
9965: ARRAY
9966: PPUSH
9967: LD_INT 1
9969: PPUSH
9970: LD_INT 27
9972: PUSH
9973: LD_INT 25
9975: PUSH
9976: LD_INT 27
9978: PUSH
9979: LD_INT 23
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: PUSH
9988: LD_OWVAR 67
9992: PUSH
9993: LD_INT 0
9995: PPUSH
9996: LD_INT 1
9998: PPUSH
9999: CALL_OW 12
10003: PLUS
10004: ARRAY
10005: PPUSH
10006: LD_INT 77
10008: PPUSH
10009: CALL 292 0 7
// veh := CreateVehicle ;
10013: LD_ADDR_VAR 0 3
10017: PUSH
10018: CALL_OW 45
10022: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10023: LD_VAR 0 3
10027: PPUSH
10028: LD_INT 2
10030: PPUSH
10031: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10035: LD_VAR 0 3
10039: PPUSH
10040: LD_INT 178
10042: PPUSH
10043: LD_INT 2
10045: PPUSH
10046: LD_INT 2
10048: PPUSH
10049: LD_INT 0
10051: PPUSH
10052: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10056: LD_VAR 0 2
10060: PPUSH
10061: LD_VAR 0 3
10065: PPUSH
10066: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10070: LD_VAR 0 2
10074: PPUSH
10075: LD_INT 183
10077: PPUSH
10078: LD_INT 11
10080: PPUSH
10081: CALL_OW 111
// wait ( 0 0$2 ) ;
10085: LD_INT 70
10087: PPUSH
10088: CALL_OW 67
// end ;
10092: GO 9834
10094: POP
10095: POP
// end ;
10096: PPOPN 3
10098: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10099: LD_EXP 4
10103: PUSH
10104: LD_EXP 31
10108: PPUSH
10109: CALL_OW 302
10113: AND
10114: IFFALSE 10163
10116: GO 10118
10118: DISABLE
// begin DialogueOn ;
10119: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10123: LD_EXP 31
10127: PPUSH
10128: LD_STRING DA-lab-1
10130: PPUSH
10131: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10135: LD_EXP 31
10139: PPUSH
10140: LD_STRING DA-lab-2
10142: PPUSH
10143: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10147: LD_EXP 21
10151: PPUSH
10152: LD_STRING DH-lab-3
10154: PPUSH
10155: CALL_OW 88
// DialogueOff ;
10159: CALL_OW 7
// end ;
10163: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10164: LD_INT 17
10166: PPUSH
10167: LD_INT 2
10169: PPUSH
10170: CALL_OW 321
10174: PUSH
10175: LD_INT 2
10177: EQUAL
10178: IFFALSE 10310
10180: GO 10182
10182: DISABLE
10183: LD_INT 0
10185: PPUSH
// begin DialogueOn ;
10186: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10190: LD_EXP 31
10194: PPUSH
10195: LD_STRING DA-Cam-1
10197: PPUSH
10198: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10202: LD_EXP 31
10206: PPUSH
10207: LD_STRING DA-Cam-2
10209: PPUSH
10210: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10214: LD_EXP 31
10218: PPUSH
10219: LD_STRING DA-Cam-3
10221: PPUSH
10222: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10226: LD_EXP 21
10230: PPUSH
10231: LD_STRING DH-Cam-4
10233: PPUSH
10234: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
10238: LD_EXP 26
10242: PPUSH
10243: LD_STRING DK-Cam-5
10245: PPUSH
10246: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
10250: LD_EXP 26
10254: PPUSH
10255: LD_STRING DK-Cam-6
10257: PPUSH
10258: CALL_OW 88
// DialogueOff ;
10262: CALL_OW 7
// Query ( Camera ) ;
10266: LD_STRING Camera
10268: PPUSH
10269: CALL_OW 97
// hiddenCameraAllowed := true ;
10273: LD_ADDR_EXP 5
10277: PUSH
10278: LD_INT 1
10280: ST_TO_ADDR
// for i in camAreas do
10281: LD_ADDR_VAR 0 1
10285: PUSH
10286: LD_EXP 8
10290: PUSH
10291: FOR_IN
10292: IFFALSE 10308
// SetAreaMapShow ( i , 1 ) ;
10294: LD_VAR 0 1
10298: PPUSH
10299: LD_INT 1
10301: PPUSH
10302: CALL_OW 424
10306: GO 10291
10308: POP
10309: POP
// end ;
10310: PPOPN 1
10312: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
10313: LD_EXP 8
10317: NOT
10318: PUSH
10319: LD_EXP 5
10323: AND
10324: IFFALSE 10415
10326: GO 10328
10328: DISABLE
10329: LD_INT 0
10331: PPUSH
// begin stop_talking := true ;
10332: LD_ADDR_OWVAR 56
10336: PUSH
10337: LD_INT 1
10339: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
10340: LD_ADDR_VAR 0 1
10344: PUSH
10345: LD_INT 22
10347: PUSH
10348: LD_INT 2
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PUSH
10355: LD_INT 21
10357: PUSH
10358: LD_INT 1
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: LD_INT 23
10367: PUSH
10368: LD_INT 2
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: LIST
10379: PPUSH
10380: CALL_OW 69
10384: PUSH
10385: FOR_IN
10386: IFFALSE 10405
// AddExperience ( i , 2 , 450 ) ;
10388: LD_VAR 0 1
10392: PPUSH
10393: LD_INT 2
10395: PPUSH
10396: LD_INT 450
10398: PPUSH
10399: CALL_OW 492
10403: GO 10385
10405: POP
10406: POP
// stop_talking := false ;
10407: LD_ADDR_OWVAR 56
10411: PUSH
10412: LD_INT 0
10414: ST_TO_ADDR
// end ;
10415: PPOPN 1
10417: END
// every 0 0$2 trigger russianAlert and not allowHeikeAttack do
10418: LD_EXP 9
10422: PUSH
10423: LD_EXP 11
10427: NOT
10428: AND
10429: IFFALSE 10459
10431: GO 10433
10433: DISABLE
// begin if spottedByPatrol then
10434: LD_EXP 7
10438: IFFALSE 10452
// Say ( Heike , DH-Spot-f-3 ) ;
10440: LD_EXP 21
10444: PPUSH
10445: LD_STRING DH-Spot-f-3
10447: PPUSH
10448: CALL_OW 88
// YouLost ( Spotted ) ;
10452: LD_STRING Spotted
10454: PPUSH
10455: CALL_OW 104
// end ;
10459: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_see , 2 ] ] ) diff russianPatrol do
10460: LD_INT 2
10462: PUSH
10463: LD_INT 22
10465: PUSH
10466: LD_INT 3
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: PUSH
10473: LD_INT 22
10475: PUSH
10476: LD_INT 6
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: LIST
10487: PUSH
10488: LD_INT 101
10490: PUSH
10491: LD_INT 2
10493: PUSH
10494: EMPTY
10495: LIST
10496: LIST
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: PPUSH
10502: CALL_OW 69
10506: PUSH
10507: LD_EXP 42
10511: DIFF
10512: IFFALSE 10525
10514: GO 10516
10516: DISABLE
// russianAlert := true ;
10517: LD_ADDR_EXP 9
10521: PUSH
10522: LD_INT 1
10524: ST_TO_ADDR
10525: END
// every 0 0$1 trigger russianAlert do var i , tmp , towers , noncombat ;
10526: LD_EXP 9
10530: IFFALSE 10827
10532: GO 10534
10534: DISABLE
10535: LD_INT 0
10537: PPUSH
10538: PPUSH
10539: PPUSH
10540: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_inside ] ] ) ;
10541: LD_ADDR_VAR 0 2
10545: PUSH
10546: LD_EXP 39
10550: PPUSH
10551: LD_INT 25
10553: PUSH
10554: LD_INT 1
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: PUSH
10561: LD_INT 54
10563: PUSH
10564: EMPTY
10565: LIST
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PPUSH
10571: CALL_OW 72
10575: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
10576: LD_ADDR_VAR 0 3
10580: PUSH
10581: LD_INT 22
10583: PUSH
10584: LD_INT 6
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: PUSH
10591: LD_INT 30
10593: PUSH
10594: LD_INT 32
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PPUSH
10605: CALL_OW 69
10609: ST_TO_ADDR
// for i := 1 to tmp do
10610: LD_ADDR_VAR 0 1
10614: PUSH
10615: DOUBLE
10616: LD_INT 1
10618: DEC
10619: ST_TO_ADDR
10620: LD_VAR 0 2
10624: PUSH
10625: FOR_TO
10626: IFFALSE 10671
// begin ComExitBuilding ( tmp [ i ] ) ;
10628: LD_VAR 0 2
10632: PUSH
10633: LD_VAR 0 1
10637: ARRAY
10638: PPUSH
10639: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , towers [ i ] ) ;
10643: LD_VAR 0 2
10647: PUSH
10648: LD_VAR 0 1
10652: ARRAY
10653: PPUSH
10654: LD_VAR 0 3
10658: PUSH
10659: LD_VAR 0 1
10663: ARRAY
10664: PPUSH
10665: CALL_OW 180
// end ;
10669: GO 10625
10671: POP
10672: POP
// noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
10673: LD_ADDR_VAR 0 4
10677: PUSH
10678: LD_EXP 37
10682: PUSH
10683: LD_EXP 39
10687: PUSH
10688: LD_EXP 40
10692: UNION
10693: PPUSH
10694: LD_INT 3
10696: PUSH
10697: LD_INT 25
10699: PUSH
10700: LD_INT 1
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: PUSH
10707: EMPTY
10708: LIST
10709: LIST
10710: PPUSH
10711: CALL_OW 72
10715: UNION
10716: ST_TO_ADDR
// for i in noncombat do
10717: LD_ADDR_VAR 0 1
10721: PUSH
10722: LD_VAR 0 4
10726: PUSH
10727: FOR_IN
10728: IFFALSE 10764
// begin if IsInUnit ( i ) then
10730: LD_VAR 0 1
10734: PPUSH
10735: CALL_OW 310
10739: IFFALSE 10750
// ComExitBuilding ( i ) ;
10741: LD_VAR 0 1
10745: PPUSH
10746: CALL_OW 122
// AddComMoveToArea ( i , westEscapeArea ) ;
10750: LD_VAR 0 1
10754: PPUSH
10755: LD_INT 16
10757: PPUSH
10758: CALL_OW 173
// end ;
10762: GO 10727
10764: POP
10765: POP
// if not allowHeikeAttack then
10766: LD_EXP 11
10770: NOT
10771: IFFALSE 10775
// exit ;
10773: GO 10827
// SayRadio ( Kurin , D9a-Kur-1 ) ;
10775: LD_EXP 35
10779: PPUSH
10780: LD_STRING D9a-Kur-1
10782: PPUSH
10783: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
10787: LD_EXP 38
10791: PPUSH
10792: LD_STRING D9a-Bur-1
10794: PPUSH
10795: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
10799: LD_EXP 35
10803: PPUSH
10804: LD_STRING D9a-Kur-2
10806: PPUSH
10807: CALL_OW 94
// omicronFall := true ;
10811: LD_ADDR_EXP 13
10815: PUSH
10816: LD_INT 1
10818: ST_TO_ADDR
// retreatFromOmicron := true ;
10819: LD_ADDR_EXP 19
10823: PUSH
10824: LD_INT 1
10826: ST_TO_ADDR
// end ;
10827: PPOPN 4
10829: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
10830: LD_INT 16
10832: PPUSH
10833: LD_INT 3
10835: PUSH
10836: LD_INT 22
10838: PUSH
10839: LD_INT 2
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PUSH
10850: LD_INT 23
10852: PUSH
10853: LD_INT 3
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PPUSH
10864: CALL_OW 70
10868: IFFALSE 10951
10870: GO 10872
10872: DISABLE
10873: LD_INT 0
10875: PPUSH
// begin enable ;
10876: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
10877: LD_ADDR_VAR 0 1
10881: PUSH
10882: LD_INT 16
10884: PPUSH
10885: LD_INT 3
10887: PUSH
10888: LD_INT 22
10890: PUSH
10891: LD_INT 2
10893: PUSH
10894: EMPTY
10895: LIST
10896: LIST
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: PUSH
10902: LD_INT 23
10904: PUSH
10905: LD_INT 3
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: PUSH
10912: EMPTY
10913: LIST
10914: LIST
10915: PPUSH
10916: CALL_OW 70
10920: PUSH
10921: FOR_IN
10922: IFFALSE 10949
// begin escapeCounter := escapeCounter + 1 ;
10924: LD_ADDR_EXP 18
10928: PUSH
10929: LD_EXP 18
10933: PUSH
10934: LD_INT 1
10936: PLUS
10937: ST_TO_ADDR
// RemoveUnit ( i ) ;
10938: LD_VAR 0 1
10942: PPUSH
10943: CALL_OW 64
// end ;
10947: GO 10921
10949: POP
10950: POP
// end ;
10951: PPOPN 1
10953: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
10954: LD_OWVAR 1
10958: PUSH
10959: LD_INT 13650
10961: PUSH
10962: LD_INT 0
10964: PPUSH
10965: LD_INT 3150
10967: PPUSH
10968: CALL_OW 12
10972: PLUS
10973: GREATEREQUAL
10974: IFFALSE 10983
10976: GO 10978
10978: DISABLE
// SmallAmericanReinforcements ;
10979: CALL 6716 0 0
10983: END
// every 0 0$1 trigger tick >= 9 9$15 do
10984: LD_OWVAR 1
10988: PUSH
10989: LD_INT 19425
10991: GREATEREQUAL
10992: IFFALSE 11057
10994: GO 10996
10996: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
10997: LD_EXP 43
11001: PPUSH
11002: LD_INT 21
11004: PUSH
11005: LD_INT 2
11007: PUSH
11008: EMPTY
11009: LIST
11010: LIST
11011: PPUSH
11012: CALL_OW 72
11016: PPUSH
11017: LD_INT 62
11019: PPUSH
11020: LD_INT 22
11022: PPUSH
11023: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11027: LD_EXP 44
11031: PPUSH
11032: LD_INT 69
11034: PPUSH
11035: LD_INT 27
11037: PPUSH
11038: CALL_OW 111
// wait ( 1 1$00 ) ;
11042: LD_INT 2100
11044: PPUSH
11045: CALL_OW 67
// startAttackOnOmicron := true ;
11049: LD_ADDR_EXP 6
11053: PUSH
11054: LD_INT 1
11056: ST_TO_ADDR
// end ;
11057: END
// every 0 0$2 trigger tick >= 20 20$00 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11058: LD_OWVAR 1
11062: PUSH
11063: LD_INT 42000
11065: GREATEREQUAL
11066: IFFALSE 12925
11068: GO 11070
11070: DISABLE
11071: LD_INT 0
11073: PPUSH
11074: PPUSH
11075: PPUSH
11076: PPUSH
11077: PPUSH
11078: PPUSH
11079: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11080: LD_INT 5
11082: PPUSH
11083: LD_INT 2
11085: PPUSH
11086: CALL_OW 343
// PrepareOmarForces ;
11090: CALL 2274 0 0
// wait ( 0 0$03 ) ;
11094: LD_INT 105
11096: PPUSH
11097: CALL_OW 67
// allowHeikeAttack := true ;
11101: LD_ADDR_EXP 11
11105: PUSH
11106: LD_INT 1
11108: ST_TO_ADDR
// activeGrishkoAI := false ;
11109: LD_ADDR_EXP 10
11113: PUSH
11114: LD_INT 0
11116: ST_TO_ADDR
// CenterOnUnits ( Omar ) ;
11117: LD_EXP 29
11121: PPUSH
11122: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
11126: LD_ADDR_VAR 0 1
11130: PUSH
11131: LD_INT 22
11133: PUSH
11134: LD_INT 2
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: PUSH
11141: LD_INT 21
11143: PUSH
11144: LD_INT 1
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: PPUSH
11155: CALL_OW 69
11159: PUSH
11160: FOR_IN
11161: IFFALSE 11185
// if HasTask ( i ) then
11163: LD_VAR 0 1
11167: PPUSH
11168: CALL_OW 314
11172: IFFALSE 11183
// ComHold ( i ) ;
11174: LD_VAR 0 1
11178: PPUSH
11179: CALL_OW 140
11183: GO 11160
11185: POP
11186: POP
// DialogueOn ;
11187: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
11191: LD_EXP 29
11195: PPUSH
11196: LD_STRING DO-assault-1
11198: PPUSH
11199: CALL_OW 94
// DialogueOff ;
11203: CALL_OW 7
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
11207: LD_ADDR_VAR 0 1
11211: PUSH
11212: LD_EXP 41
11216: PPUSH
11217: LD_INT 3
11219: PUSH
11220: LD_INT 54
11222: PUSH
11223: EMPTY
11224: LIST
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: PPUSH
11230: CALL_OW 72
11234: PUSH
11235: FOR_IN
11236: IFFALSE 11255
// ComMoveXY ( i , 226 , 114 ) ;
11238: LD_VAR 0 1
11242: PPUSH
11243: LD_INT 226
11245: PPUSH
11246: LD_INT 114
11248: PPUSH
11249: CALL_OW 111
11253: GO 11235
11255: POP
11256: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
11257: LD_EXP 36
11261: PPUSH
11262: LD_INT 22
11264: PUSH
11265: LD_INT 6
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PUSH
11272: LD_INT 30
11274: PUSH
11275: LD_INT 4
11277: PUSH
11278: EMPTY
11279: LIST
11280: LIST
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: PPUSH
11286: CALL_OW 69
11290: PPUSH
11291: LD_EXP 36
11295: PPUSH
11296: CALL_OW 74
11300: PPUSH
11301: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
11305: LD_STRING Attack
11307: PPUSH
11308: CALL_OW 337
// music_class := music_combat ;
11312: LD_ADDR_OWVAR 72
11316: PUSH
11317: LD_INT 1
11319: ST_TO_ADDR
// music_nat := 4 ;
11320: LD_ADDR_OWVAR 71
11324: PUSH
11325: LD_INT 4
11327: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
11328: LD_INT 5
11330: PPUSH
11331: LD_EXP 36
11335: PPUSH
11336: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
11340: LD_INT 6
11342: PPUSH
11343: LD_EXP 33
11347: PPUSH
11348: LD_INT 25
11350: PUSH
11351: LD_INT 1
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: PPUSH
11358: CALL_OW 72
11362: PUSH
11363: LD_INT 4
11365: ARRAY
11366: PPUSH
11367: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
11371: LD_ADDR_VAR 0 1
11375: PUSH
11376: LD_EXP 33
11380: PPUSH
11381: LD_INT 3
11383: PUSH
11384: LD_INT 25
11386: PUSH
11387: LD_INT 4
11389: PUSH
11390: EMPTY
11391: LIST
11392: LIST
11393: PUSH
11394: EMPTY
11395: LIST
11396: LIST
11397: PPUSH
11398: CALL_OW 72
11402: PUSH
11403: FOR_IN
11404: IFFALSE 11423
// ComAgressiveMove ( i , 221 , 110 ) ;
11406: LD_VAR 0 1
11410: PPUSH
11411: LD_INT 221
11413: PPUSH
11414: LD_INT 110
11416: PPUSH
11417: CALL_OW 114
11421: GO 11403
11423: POP
11424: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
11425: LD_EXP 33
11429: PPUSH
11430: LD_INT 25
11432: PUSH
11433: LD_INT 4
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: PPUSH
11440: CALL_OW 72
11444: PPUSH
11445: LD_INT 214
11447: PPUSH
11448: LD_INT 124
11450: PPUSH
11451: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
11455: LD_EXP 33
11459: PPUSH
11460: LD_INT 25
11462: PUSH
11463: LD_INT 1
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: PPUSH
11470: CALL_OW 72
11474: PUSH
11475: LD_INT 4
11477: ARRAY
11478: PPUSH
11479: LD_INT 214
11481: PPUSH
11482: LD_INT 114
11484: PPUSH
11485: LD_INT 0
11487: PPUSH
11488: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
11492: LD_EXP 36
11496: PPUSH
11497: LD_STRING D9-Gri-1
11499: PPUSH
11500: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
11504: LD_EXP 35
11508: PPUSH
11509: LD_STRING D9-Kur-1
11511: PPUSH
11512: CALL_OW 94
// wait ( 0 0$1 ) ;
11516: LD_INT 35
11518: PPUSH
11519: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
11523: LD_EXP 29
11527: PPUSH
11528: LD_INT 233
11530: PPUSH
11531: LD_INT 130
11533: PPUSH
11534: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
11538: LD_EXP 36
11542: PPUSH
11543: LD_STRING D9-Gri-2
11545: PPUSH
11546: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
11550: LD_EXP 35
11554: PPUSH
11555: LD_STRING D9-Kur-2
11557: PPUSH
11558: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
11562: LD_EXP 36
11566: PPUSH
11567: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
11571: LD_EXP 36
11575: PPUSH
11576: LD_INT 211
11578: PPUSH
11579: LD_INT 104
11581: PPUSH
11582: CALL_OW 171
// AddComHold ( Grishko ) ;
11586: LD_EXP 36
11590: PPUSH
11591: CALL_OW 200
// repeat wait ( 3 ) ;
11595: LD_INT 3
11597: PPUSH
11598: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
11602: LD_EXP 36
11606: PPUSH
11607: CALL_OW 310
11611: NOT
11612: IFFALSE 11595
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
11614: LD_EXP 33
11618: PPUSH
11619: LD_INT 34
11621: PUSH
11622: LD_INT 26
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PPUSH
11629: CALL_OW 72
11633: PPUSH
11634: LD_EXP 36
11638: PPUSH
11639: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
11643: LD_EXP 33
11647: PPUSH
11648: LD_INT 34
11650: PUSH
11651: LD_INT 26
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PPUSH
11658: CALL_OW 72
11662: PPUSH
11663: LD_INT 215
11665: PPUSH
11666: LD_INT 106
11668: PPUSH
11669: CALL_OW 174
// repeat wait ( 3 ) ;
11673: LD_INT 3
11675: PPUSH
11676: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
11680: LD_EXP 36
11684: PPUSH
11685: CALL_OW 256
11689: PUSH
11690: LD_INT 1000
11692: LESS
11693: IFFALSE 11673
// NormalAttack ( 5 , Grishko ) ;
11695: LD_INT 5
11697: PPUSH
11698: LD_EXP 36
11702: PPUSH
11703: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
11707: LD_INT 6
11709: PPUSH
11710: LD_EXP 33
11714: PPUSH
11715: LD_INT 25
11717: PUSH
11718: LD_INT 1
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: PPUSH
11725: CALL_OW 72
11729: PUSH
11730: LD_INT 4
11732: ARRAY
11733: PPUSH
11734: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
11738: LD_EXP 36
11742: PPUSH
11743: LD_STRING D9-Gri-3
11745: PPUSH
11746: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
11750: LD_EXP 35
11754: PPUSH
11755: LD_STRING D9-Kur-3
11757: PPUSH
11758: CALL_OW 94
// music_class := music_auto ;
11762: LD_ADDR_OWVAR 72
11766: PUSH
11767: LD_INT 0
11769: ST_TO_ADDR
// music_nat := music_auto ;
11770: LD_ADDR_OWVAR 71
11774: PUSH
11775: LD_INT 0
11777: ST_TO_ADDR
// for i in omarSquad do
11778: LD_ADDR_VAR 0 1
11782: PUSH
11783: LD_EXP 33
11787: PUSH
11788: FOR_IN
11789: IFFALSE 11931
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
11791: LD_VAR 0 1
11795: PPUSH
11796: CALL_OW 247
11800: PUSH
11801: LD_INT 2
11803: EQUAL
11804: PUSH
11805: LD_VAR 0 1
11809: PPUSH
11810: CALL_OW 256
11814: PUSH
11815: LD_INT 1000
11817: LESS
11818: AND
11819: IFFALSE 11885
// begin driver := IsDrivenBy ( i ) ;
11821: LD_ADDR_VAR 0 2
11825: PUSH
11826: LD_VAR 0 1
11830: PPUSH
11831: CALL_OW 311
11835: ST_TO_ADDR
// veh := i ;
11836: LD_ADDR_VAR 0 3
11840: PUSH
11841: LD_VAR 0 1
11845: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
11846: LD_VAR 0 2
11850: PPUSH
11851: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
11855: LD_VAR 0 2
11859: PPUSH
11860: LD_VAR 0 3
11864: PPUSH
11865: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
11869: LD_VAR 0 2
11873: PPUSH
11874: LD_VAR 0 3
11878: PPUSH
11879: CALL_OW 180
// end else
11883: GO 11929
// if GetLives ( i ) < 500 then
11885: LD_VAR 0 1
11889: PPUSH
11890: CALL_OW 256
11894: PUSH
11895: LD_INT 500
11897: LESS
11898: IFFALSE 11929
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
11900: LD_EXP 33
11904: PPUSH
11905: LD_INT 25
11907: PUSH
11908: LD_INT 4
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: PPUSH
11915: CALL_OW 72
11919: PPUSH
11920: LD_VAR 0 1
11924: PPUSH
11925: CALL_OW 188
// end ; end ;
11929: GO 11788
11931: POP
11932: POP
// repeat wait ( 0 0$1 ) ;
11933: LD_INT 35
11935: PPUSH
11936: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
11940: LD_EXP 33
11944: PPUSH
11945: LD_INT 3
11947: PUSH
11948: LD_INT 24
11950: PUSH
11951: LD_INT 1000
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PUSH
11962: LD_INT 21
11964: PUSH
11965: LD_INT 2
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: PPUSH
11976: CALL_OW 72
11980: NOT
11981: PUSH
11982: LD_EXP 33
11986: PPUSH
11987: LD_INT 3
11989: PUSH
11990: LD_INT 24
11992: PUSH
11993: LD_INT 250
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: PPUSH
12004: CALL_OW 72
12008: NOT
12009: AND
12010: IFFALSE 11933
// wait ( 0 0$2 ) ;
12012: LD_INT 70
12014: PPUSH
12015: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12019: LD_ADDR_VAR 0 5
12023: PUSH
12024: LD_EXP 33
12028: PPUSH
12029: LD_INT 58
12031: PUSH
12032: EMPTY
12033: LIST
12034: PUSH
12035: LD_INT 21
12037: PUSH
12038: LD_INT 2
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PPUSH
12049: CALL_OW 72
12053: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
12054: LD_ADDR_VAR 0 6
12058: PUSH
12059: LD_EXP 33
12063: PPUSH
12064: LD_INT 25
12066: PUSH
12067: LD_INT 3
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: PUSH
12074: LD_INT 3
12076: PUSH
12077: LD_INT 55
12079: PUSH
12080: EMPTY
12081: LIST
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: PPUSH
12091: CALL_OW 72
12095: ST_TO_ADDR
// for i := 1 to tmp do
12096: LD_ADDR_VAR 0 1
12100: PUSH
12101: DOUBLE
12102: LD_INT 1
12104: DEC
12105: ST_TO_ADDR
12106: LD_VAR 0 5
12110: PUSH
12111: FOR_TO
12112: IFFALSE 12142
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
12114: LD_VAR 0 6
12118: PUSH
12119: LD_VAR 0 1
12123: ARRAY
12124: PPUSH
12125: LD_VAR 0 5
12129: PUSH
12130: LD_VAR 0 1
12134: ARRAY
12135: PPUSH
12136: CALL_OW 120
12140: GO 12111
12142: POP
12143: POP
// wait ( 0 0$5 ) ;
12144: LD_INT 175
12146: PPUSH
12147: CALL_OW 67
// ComMoveXY ( omarSquad , 199 , 141 ) ;
12151: LD_EXP 33
12155: PPUSH
12156: LD_INT 199
12158: PPUSH
12159: LD_INT 141
12161: PPUSH
12162: CALL_OW 111
// ComMoveXY ( Omar , 190 , 143 ) ;
12166: LD_EXP 29
12170: PPUSH
12171: LD_INT 190
12173: PPUSH
12174: LD_INT 143
12176: PPUSH
12177: CALL_OW 111
// AddComHold ( Omar ) ;
12181: LD_EXP 29
12185: PPUSH
12186: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
12190: LD_EXP 33
12194: PPUSH
12195: LD_INT 2
12197: PUSH
12198: LD_INT 25
12200: PUSH
12201: LD_INT 1
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PUSH
12208: LD_INT 25
12210: PUSH
12211: LD_INT 4
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: LIST
12222: PPUSH
12223: CALL_OW 72
12227: PPUSH
12228: LD_INT 161
12230: PPUSH
12231: LD_INT 130
12233: PPUSH
12234: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
12238: LD_EXP 33
12242: PPUSH
12243: LD_INT 25
12245: PUSH
12246: LD_INT 1
12248: PUSH
12249: EMPTY
12250: LIST
12251: LIST
12252: PPUSH
12253: CALL_OW 72
12257: PPUSH
12258: LD_INT 163
12260: PPUSH
12261: LD_INT 122
12263: PPUSH
12264: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
12268: LD_EXP 33
12272: PPUSH
12273: LD_INT 25
12275: PUSH
12276: LD_INT 1
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: PPUSH
12283: CALL_OW 72
12287: PUSH
12288: LD_INT 4
12290: ARRAY
12291: PPUSH
12292: LD_INT 165
12294: PPUSH
12295: LD_INT 118
12297: PPUSH
12298: LD_INT 0
12300: PPUSH
12301: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
12305: LD_EXP 33
12309: PPUSH
12310: LD_INT 25
12312: PUSH
12313: LD_INT 1
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: PPUSH
12320: CALL_OW 72
12324: PUSH
12325: LD_INT 4
12327: ARRAY
12328: PPUSH
12329: LD_INT 159
12331: PPUSH
12332: LD_INT 116
12334: PPUSH
12335: LD_INT 0
12337: PPUSH
12338: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
12342: LD_EXP 33
12346: PPUSH
12347: LD_INT 21
12349: PUSH
12350: LD_INT 2
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: PPUSH
12357: CALL_OW 72
12361: PPUSH
12362: LD_INT 169
12364: PPUSH
12365: LD_INT 114
12367: PPUSH
12368: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
12372: LD_INT 35
12374: PPUSH
12375: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
12379: LD_ADDR_VAR 0 5
12383: PUSH
12384: LD_EXP 33
12388: PPUSH
12389: LD_INT 25
12391: PUSH
12392: LD_INT 1
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: PPUSH
12399: CALL_OW 72
12403: ST_TO_ADDR
// for i in tmp do
12404: LD_ADDR_VAR 0 1
12408: PUSH
12409: LD_VAR 0 5
12413: PUSH
12414: FOR_IN
12415: IFFALSE 12512
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
12417: LD_VAR 0 1
12421: PPUSH
12422: CALL_OW 256
12426: PUSH
12427: LD_INT 600
12429: LESS
12430: PUSH
12431: LD_VAR 0 1
12435: PPUSH
12436: LD_INT 161
12438: PPUSH
12439: LD_INT 130
12441: PPUSH
12442: CALL_OW 297
12446: PUSH
12447: LD_INT 6
12449: GREATER
12450: AND
12451: IFFALSE 12468
// ComMoveXY ( i , 161 , 130 ) ;
12453: LD_VAR 0 1
12457: PPUSH
12458: LD_INT 161
12460: PPUSH
12461: LD_INT 130
12463: PPUSH
12464: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
12468: LD_VAR 0 1
12472: PPUSH
12473: CALL_OW 256
12477: PUSH
12478: LD_INT 1000
12480: EQUAL
12481: PUSH
12482: LD_VAR 0 1
12486: PPUSH
12487: CALL_OW 314
12491: NOT
12492: AND
12493: IFFALSE 12510
// ComAgressiveMove ( i , 160 , 109 ) ;
12495: LD_VAR 0 1
12499: PPUSH
12500: LD_INT 160
12502: PPUSH
12503: LD_INT 109
12505: PPUSH
12506: CALL_OW 114
// end ;
12510: GO 12414
12512: POP
12513: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
12514: LD_ADDR_VAR 0 5
12518: PUSH
12519: LD_EXP 33
12523: PPUSH
12524: LD_INT 21
12526: PUSH
12527: LD_INT 2
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: PPUSH
12534: CALL_OW 72
12538: ST_TO_ADDR
// for i in tmp do
12539: LD_ADDR_VAR 0 1
12543: PUSH
12544: LD_VAR 0 5
12548: PUSH
12549: FOR_IN
12550: IFFALSE 12816
// begin tmp2 := IsDrivenBy ( i ) ;
12552: LD_ADDR_VAR 0 6
12556: PUSH
12557: LD_VAR 0 1
12561: PPUSH
12562: CALL_OW 311
12566: ST_TO_ADDR
// if not tmp2 then
12567: LD_VAR 0 6
12571: NOT
12572: IFFALSE 12576
// continue ;
12574: GO 12549
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
12576: LD_VAR 0 1
12580: PPUSH
12581: CALL_OW 256
12585: PUSH
12586: LD_INT 600
12588: GREATEREQUAL
12589: PUSH
12590: LD_VAR 0 1
12594: PPUSH
12595: CALL_OW 110
12599: PUSH
12600: LD_INT 1
12602: EQUAL
12603: AND
12604: IFFALSE 12618
// SetTag ( i , 0 ) ;
12606: LD_VAR 0 1
12610: PPUSH
12611: LD_INT 0
12613: PPUSH
12614: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
12618: LD_VAR 0 1
12622: PPUSH
12623: CALL_OW 256
12627: PUSH
12628: LD_INT 600
12630: GREATEREQUAL
12631: PUSH
12632: LD_VAR 0 1
12636: PPUSH
12637: CALL_OW 110
12641: NOT
12642: AND
12643: IFFALSE 12669
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
12645: LD_VAR 0 1
12649: PPUSH
12650: LD_VAR 0 7
12654: PPUSH
12655: LD_VAR 0 1
12659: PPUSH
12660: CALL_OW 74
12664: PPUSH
12665: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
12669: LD_VAR 0 1
12673: PPUSH
12674: CALL_OW 256
12678: PUSH
12679: LD_INT 600
12681: LESS
12682: PUSH
12683: LD_VAR 0 1
12687: PPUSH
12688: CALL_OW 110
12692: NOT
12693: AND
12694: IFFALSE 12723
// begin SetTag ( i , 1 ) ;
12696: LD_VAR 0 1
12700: PPUSH
12701: LD_INT 1
12703: PPUSH
12704: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
12708: LD_VAR 0 1
12712: PPUSH
12713: LD_INT 202
12715: PPUSH
12716: LD_INT 150
12718: PPUSH
12719: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
12723: LD_VAR 0 1
12727: PPUSH
12728: CALL_OW 110
12732: PUSH
12733: LD_INT 1
12735: EQUAL
12736: PUSH
12737: LD_VAR 0 1
12741: PPUSH
12742: LD_INT 202
12744: PPUSH
12745: LD_INT 150
12747: PPUSH
12748: CALL_OW 297
12752: PUSH
12753: LD_INT 6
12755: LESS
12756: AND
12757: PUSH
12758: LD_VAR 0 6
12762: AND
12763: IFFALSE 12814
// begin ComExitVehicle ( tmp2 ) ;
12765: LD_VAR 0 6
12769: PPUSH
12770: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
12774: LD_VAR 0 6
12778: PPUSH
12779: LD_VAR 0 1
12783: PPUSH
12784: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
12788: LD_VAR 0 6
12792: PPUSH
12793: LD_INT 700
12795: PPUSH
12796: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
12800: LD_VAR 0 6
12804: PPUSH
12805: LD_VAR 0 1
12809: PPUSH
12810: CALL_OW 180
// end ; end ;
12814: GO 12549
12816: POP
12817: POP
// until kirovDestroyed ;
12818: LD_EXP 15
12822: IFFALSE 12372
// repeat wait ( 0 0$1 ) ;
12824: LD_INT 35
12826: PPUSH
12827: CALL_OW 67
// for i in omarSquad union Omar do
12831: LD_ADDR_VAR 0 1
12835: PUSH
12836: LD_EXP 33
12840: PUSH
12841: LD_EXP 29
12845: UNION
12846: PUSH
12847: FOR_IN
12848: IFFALSE 12892
// if IsInArea ( i , southRoadArea ) then
12850: LD_VAR 0 1
12854: PPUSH
12855: LD_INT 15
12857: PPUSH
12858: CALL_OW 308
12862: IFFALSE 12875
// RemoveUnit ( i ) else
12864: LD_VAR 0 1
12868: PPUSH
12869: CALL_OW 64
12873: GO 12890
// ComMoveXY ( i , 208 , 162 ) ;
12875: LD_VAR 0 1
12879: PPUSH
12880: LD_INT 208
12882: PPUSH
12883: LD_INT 162
12885: PPUSH
12886: CALL_OW 111
12890: GO 12847
12892: POP
12893: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
12894: LD_INT 22
12896: PUSH
12897: LD_INT 5
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: PUSH
12904: LD_INT 21
12906: PUSH
12907: LD_INT 1
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: PUSH
12914: EMPTY
12915: LIST
12916: LIST
12917: PPUSH
12918: CALL_OW 69
12922: NOT
12923: IFFALSE 12824
// end ;
12925: PPOPN 7
12927: END
// every 0 0$1 trigger IsDead ( kirov ) do
12928: LD_INT 71
12930: PPUSH
12931: CALL_OW 301
12935: IFFALSE 12952
12937: GO 12939
12939: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
12940: LD_EXP 21
12944: PPUSH
12945: LD_STRING DH-1-Kirov
12947: PPUSH
12948: CALL_OW 88
12952: END
// every 0 0$1 trigger See ( 2 , beria ) do
12953: LD_INT 2
12955: PPUSH
12956: LD_INT 106
12958: PPUSH
12959: CALL_OW 292
12963: IFFALSE 12980
12965: GO 12967
12967: DISABLE
// Say ( Heike , DH-1-Beria ) ;
12968: LD_EXP 21
12972: PPUSH
12973: LD_STRING DH-1-Beria
12975: PPUSH
12976: CALL_OW 88
12980: END
// every 0 0$1 trigger See ( 2 , kagan ) do
12981: LD_INT 2
12983: PPUSH
12984: LD_INT 112
12986: PPUSH
12987: CALL_OW 292
12991: IFFALSE 13008
12993: GO 12995
12995: DISABLE
// Say ( Heike , DH-1-Kagan ) ;
12996: LD_EXP 21
13000: PPUSH
13001: LD_STRING DH-1-Kagan
13003: PPUSH
13004: CALL_OW 88
13008: END
// every 0 0$3 trigger See ( 2 , ruLab ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) and not InBattle ( 2 ) do var i , tmp , q ;
13009: LD_INT 2
13011: PPUSH
13012: LD_EXP 45
13016: PPUSH
13017: CALL_OW 292
13021: PUSH
13022: LD_EXP 45
13026: PPUSH
13027: CALL_OW 302
13031: AND
13032: PUSH
13033: LD_EXP 21
13037: PPUSH
13038: CALL_OW 302
13042: AND
13043: PUSH
13044: LD_EXP 31
13048: PPUSH
13049: CALL_OW 302
13053: AND
13054: PUSH
13055: LD_INT 2
13057: PPUSH
13058: CALL_OW 463
13062: NOT
13063: AND
13064: IFFALSE 13430
13066: GO 13068
13068: DISABLE
13069: LD_INT 0
13071: PPUSH
13072: PPUSH
13073: PPUSH
// begin DialogueOn ;
13074: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
13078: LD_INT 111
13080: PPUSH
13081: LD_INT 90
13083: PPUSH
13084: LD_INT 2
13086: PPUSH
13087: LD_INT 6
13089: NEG
13090: PPUSH
13091: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
13095: LD_INT 111
13097: PPUSH
13098: LD_INT 90
13100: PPUSH
13101: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
13105: LD_EXP 31
13109: PPUSH
13110: LD_STRING DA-Cap-1
13112: PPUSH
13113: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
13117: LD_EXP 21
13121: PPUSH
13122: LD_STRING DH-Cap-2
13124: PPUSH
13125: CALL_OW 88
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
13129: LD_ADDR_VAR 0 2
13133: PUSH
13134: LD_EXP 32
13138: PUSH
13139: LD_EXP 24
13143: PUSH
13144: LD_EXP 25
13148: PUSH
13149: LD_EXP 27
13153: PUSH
13154: LD_EXP 26
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: UNION
13165: ST_TO_ADDR
// if tmp < 2 then
13166: LD_VAR 0 2
13170: PUSH
13171: LD_INT 2
13173: LESS
13174: IFFALSE 13186
// q := 2 else
13176: LD_ADDR_VAR 0 3
13180: PUSH
13181: LD_INT 2
13183: ST_TO_ADDR
13184: GO 13199
// q := Query ( LabCap ) ;
13186: LD_ADDR_VAR 0 3
13190: PUSH
13191: LD_STRING LabCap
13193: PPUSH
13194: CALL_OW 97
13198: ST_TO_ADDR
// case q of 1 :
13199: LD_VAR 0 3
13203: PUSH
13204: LD_INT 1
13206: DOUBLE
13207: EQUAL
13208: IFTRUE 13212
13210: GO 13390
13212: POP
// begin DoNotAttack ( 2 , ruLab ) ;
13213: LD_INT 2
13215: PPUSH
13216: LD_EXP 45
13220: PPUSH
13221: CALL_OW 471
// labCaptured := true ;
13225: LD_ADDR_EXP 20
13229: PUSH
13230: LD_INT 1
13232: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
13233: LD_EXP 21
13237: PPUSH
13238: LD_STRING DH-Cap-a-1
13240: PPUSH
13241: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
13245: LD_EXP 31
13249: PPUSH
13250: LD_STRING DA-Cap-a-2
13252: PPUSH
13253: CALL_OW 88
// SetSide ( ruLab , 5 ) ;
13257: LD_EXP 45
13261: PPUSH
13262: LD_INT 5
13264: PPUSH
13265: CALL_OW 235
// SetSide ( Aviradze , 5 ) ;
13269: LD_EXP 31
13273: PPUSH
13274: LD_INT 5
13276: PPUSH
13277: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
13281: LD_ADDR_EXP 34
13285: PUSH
13286: LD_EXP 31
13290: PUSH
13291: EMPTY
13292: LIST
13293: ST_TO_ADDR
// ComEnterUnit ( Aviradze , ruLab ) ;
13294: LD_EXP 31
13298: PPUSH
13299: LD_EXP 45
13303: PPUSH
13304: CALL_OW 120
// for i := 1 to 2 do
13308: LD_ADDR_VAR 0 1
13312: PUSH
13313: DOUBLE
13314: LD_INT 1
13316: DEC
13317: ST_TO_ADDR
13318: LD_INT 2
13320: PUSH
13321: FOR_TO
13322: IFFALSE 13386
// begin aviradzeSquad := aviradzeSquad union tmp [ i ] ;
13324: LD_ADDR_EXP 34
13328: PUSH
13329: LD_EXP 34
13333: PUSH
13334: LD_VAR 0 2
13338: PUSH
13339: LD_VAR 0 1
13343: ARRAY
13344: UNION
13345: ST_TO_ADDR
// SetSide ( tmp [ i ] , 5 ) ;
13346: LD_VAR 0 2
13350: PUSH
13351: LD_VAR 0 1
13355: ARRAY
13356: PPUSH
13357: LD_INT 5
13359: PPUSH
13360: CALL_OW 235
// ComEnterUnit ( tmp [ i ] , ruLab ) ;
13364: LD_VAR 0 2
13368: PUSH
13369: LD_VAR 0 1
13373: ARRAY
13374: PPUSH
13375: LD_EXP 45
13379: PPUSH
13380: CALL_OW 120
// end ;
13384: GO 13321
13386: POP
13387: POP
// end ; 2 :
13388: GO 13426
13390: LD_INT 2
13392: DOUBLE
13393: EQUAL
13394: IFTRUE 13398
13396: GO 13425
13398: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
13399: LD_EXP 21
13403: PPUSH
13404: LD_STRING DH-Cap-b-1
13406: PPUSH
13407: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
13411: LD_EXP 31
13415: PPUSH
13416: LD_STRING DA-Cap-b-2
13418: PPUSH
13419: CALL_OW 88
// end ; end ;
13423: GO 13426
13425: POP
// DialogueOff ;
13426: CALL_OW 7
// end ;
13430: PPOPN 3
13432: END
// every 0 0$1 trigger kirovDestroyed and beriaDestroyed and kaganDestroyed do var i , tmp , tmp2 , cargo ;
13433: LD_EXP 15
13437: PUSH
13438: LD_EXP 16
13442: AND
13443: PUSH
13444: LD_EXP 17
13448: AND
13449: IFFALSE 14595
13451: GO 13453
13453: DISABLE
13454: LD_INT 0
13456: PPUSH
13457: PPUSH
13458: PPUSH
13459: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
13460: LD_STRING GoToWest
13462: PPUSH
13463: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
13467: LD_INT 17
13469: PPUSH
13470: LD_INT 1
13472: PPUSH
13473: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
13477: LD_INT 35
13479: PPUSH
13480: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) = FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
13484: LD_INT 22
13486: PUSH
13487: LD_INT 2
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PUSH
13494: LD_INT 2
13496: PUSH
13497: LD_INT 21
13499: PUSH
13500: LD_INT 1
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PUSH
13507: LD_INT 21
13509: PUSH
13510: LD_INT 2
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: PUSH
13517: LD_INT 3
13519: PUSH
13520: LD_INT 58
13522: PUSH
13523: EMPTY
13524: LIST
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: LIST
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: PPUSH
13543: CALL_OW 69
13547: PUSH
13548: LD_INT 17
13550: PPUSH
13551: LD_INT 22
13553: PUSH
13554: LD_INT 2
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: PUSH
13561: LD_INT 2
13563: PUSH
13564: LD_INT 21
13566: PUSH
13567: LD_INT 1
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 21
13576: PUSH
13577: LD_INT 2
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: LD_INT 3
13586: PUSH
13587: LD_INT 58
13589: PUSH
13590: EMPTY
13591: LIST
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: LIST
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PPUSH
13610: CALL_OW 70
13614: EQUAL
13615: IFFALSE 13477
// SaveCharacters ( Heike , 04_1_Heike ) ;
13617: LD_EXP 21
13621: PPUSH
13622: LD_STRING 04_1_Heike
13624: PPUSH
13625: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
13629: LD_EXP 31
13633: PUSH
13634: LD_EXP 31
13638: PUSH
13639: LD_EXP 34
13643: IN
13644: NOT
13645: AND
13646: IFFALSE 13662
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
13648: LD_EXP 31
13652: PPUSH
13653: LD_STRING 04_1_Aviradze
13655: PPUSH
13656: CALL_OW 38
13660: GO 13680
// if Aviradze then
13662: LD_EXP 31
13666: IFFALSE 13680
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
13668: LD_EXP 31
13672: PPUSH
13673: LD_STRING 04_1_Aviradze_L
13675: PPUSH
13676: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
13680: LD_EXP 24
13684: PUSH
13685: LD_EXP 24
13689: PUSH
13690: LD_EXP 34
13694: IN
13695: NOT
13696: AND
13697: IFFALSE 13713
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
13699: LD_EXP 24
13703: PPUSH
13704: LD_STRING 04_1_Ibrahim
13706: PPUSH
13707: CALL_OW 38
13711: GO 13731
// if Ibrahim then
13713: LD_EXP 24
13717: IFFALSE 13731
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
13719: LD_EXP 24
13723: PPUSH
13724: LD_STRING 04_1_Ibrahim_L
13726: PPUSH
13727: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
13731: LD_EXP 25
13735: PUSH
13736: LD_EXP 25
13740: PUSH
13741: LD_EXP 34
13745: IN
13746: NOT
13747: AND
13748: IFFALSE 13764
// SaveCharacters ( Kamil , 04_1_Kamil ) else
13750: LD_EXP 25
13754: PPUSH
13755: LD_STRING 04_1_Kamil
13757: PPUSH
13758: CALL_OW 38
13762: GO 13782
// if Kamil then
13764: LD_EXP 25
13768: IFFALSE 13782
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
13770: LD_EXP 25
13774: PPUSH
13775: LD_STRING 04_1_Kamil_L
13777: PPUSH
13778: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
13782: LD_EXP 27
13786: PUSH
13787: LD_EXP 27
13791: PUSH
13792: LD_EXP 34
13796: IN
13797: NOT
13798: AND
13799: IFFALSE 13815
// SaveCharacters ( Sophia , 04_1_Sophia ) else
13801: LD_EXP 27
13805: PPUSH
13806: LD_STRING 04_1_Sophia
13808: PPUSH
13809: CALL_OW 38
13813: GO 13833
// if Sophia then
13815: LD_EXP 27
13819: IFFALSE 13833
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
13821: LD_EXP 27
13825: PPUSH
13826: LD_STRING 04_1_Sophia_L
13828: PPUSH
13829: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
13833: LD_EXP 26
13837: PUSH
13838: LD_EXP 26
13842: PUSH
13843: LD_EXP 34
13847: IN
13848: NOT
13849: AND
13850: IFFALSE 13866
// SaveCharacters ( Kaia , 04_1_Kaia ) else
13852: LD_EXP 26
13856: PPUSH
13857: LD_STRING 04_1_Kaia
13859: PPUSH
13860: CALL_OW 38
13864: GO 13884
// if Kaia then
13866: LD_EXP 26
13870: IFFALSE 13884
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
13872: LD_EXP 26
13876: PPUSH
13877: LD_STRING 04_1_Kaia_L
13879: PPUSH
13880: CALL_OW 38
// if Givi then
13884: LD_EXP 22
13888: IFFALSE 13902
// SaveCharacters ( Givi , 04_1_Givi ) ;
13890: LD_EXP 22
13894: PPUSH
13895: LD_STRING 04_1_Givi
13897: PPUSH
13898: CALL_OW 38
// if Mike then
13902: LD_EXP 23
13906: IFFALSE 13920
// SaveCharacters ( Mike , 04_1_Mike ) ;
13908: LD_EXP 23
13912: PPUSH
13913: LD_STRING 04_1_Mike
13915: PPUSH
13916: CALL_OW 38
// if Markov then
13920: LD_EXP 28
13924: IFFALSE 13938
// SaveCharacters ( Markov , 04_1_Markov ) ;
13926: LD_EXP 28
13930: PPUSH
13931: LD_STRING 04_1_Markov
13933: PPUSH
13934: CALL_OW 38
// if Kurt then
13938: LD_EXP 30
13942: IFFALSE 13956
// SaveCharacters ( Kurt , 04_1_Markov ) ;
13944: LD_EXP 30
13948: PPUSH
13949: LD_STRING 04_1_Markov
13951: PPUSH
13952: CALL_OW 38
// if heikeSecondSquad diff aviradzeSquad then
13956: LD_EXP 32
13960: PUSH
13961: LD_EXP 34
13965: DIFF
13966: IFFALSE 13986
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
13968: LD_EXP 32
13972: PUSH
13973: LD_EXP 34
13977: DIFF
13978: PPUSH
13979: LD_STRING 04_1_others
13981: PPUSH
13982: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
13986: LD_EXP 34
13990: PUSH
13991: LD_EXP 32
13995: AND
13996: IFFALSE 14081
// begin tmp := [ ] ;
13998: LD_ADDR_VAR 0 2
14002: PUSH
14003: EMPTY
14004: ST_TO_ADDR
// for i in heikeSecondSquad do
14005: LD_ADDR_VAR 0 1
14009: PUSH
14010: LD_EXP 32
14014: PUSH
14015: FOR_IN
14016: IFFALSE 14061
// if i in aviradzeSquad then
14018: LD_VAR 0 1
14022: PUSH
14023: LD_EXP 34
14027: IN
14028: IFFALSE 14059
// tmp := Replace ( tmp , tmp + 1 , i ) ;
14030: LD_ADDR_VAR 0 2
14034: PUSH
14035: LD_VAR 0 2
14039: PPUSH
14040: LD_VAR 0 2
14044: PUSH
14045: LD_INT 1
14047: PLUS
14048: PPUSH
14049: LD_VAR 0 1
14053: PPUSH
14054: CALL_OW 1
14058: ST_TO_ADDR
14059: GO 14015
14061: POP
14062: POP
// if tmp then
14063: LD_VAR 0 2
14067: IFFALSE 14081
// SaveCharacters ( tmp , 04_1_others_L ) ;
14069: LD_VAR 0 2
14073: PPUSH
14074: LD_STRING 04_1_others_L
14076: PPUSH
14077: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
14081: LD_ADDR_VAR 0 2
14085: PUSH
14086: LD_INT 22
14088: PUSH
14089: LD_INT 2
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: PUSH
14096: LD_INT 23
14098: PUSH
14099: LD_INT 0
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PPUSH
14110: CALL_OW 69
14114: ST_TO_ADDR
// if tmp then
14115: LD_VAR 0 2
14119: IFFALSE 14133
// SaveCharacters ( tmp , 04_1_apes ) ;
14121: LD_VAR 0 2
14125: PPUSH
14126: LD_STRING 04_1_apes
14128: PPUSH
14129: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
14133: LD_ADDR_VAR 0 2
14137: PUSH
14138: LD_INT 17
14140: PPUSH
14141: LD_INT 21
14143: PUSH
14144: LD_INT 2
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PPUSH
14151: CALL_OW 70
14155: ST_TO_ADDR
// if tmp then
14156: LD_VAR 0 2
14160: IFFALSE 14454
// begin tmp2 := [ ] ;
14162: LD_ADDR_VAR 0 3
14166: PUSH
14167: EMPTY
14168: ST_TO_ADDR
// for i in tmp do
14169: LD_ADDR_VAR 0 1
14173: PUSH
14174: LD_VAR 0 2
14178: PUSH
14179: FOR_IN
14180: IFFALSE 14440
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
14182: LD_VAR 0 1
14186: PPUSH
14187: CALL_OW 264
14191: PUSH
14192: LD_INT 32
14194: PUSH
14195: LD_INT 12
14197: PUSH
14198: LD_INT 51
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: LIST
14205: IN
14206: IFFALSE 14343
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
14208: LD_ADDR_VAR 0 4
14212: PUSH
14213: LD_VAR 0 1
14217: PPUSH
14218: LD_INT 1
14220: PPUSH
14221: CALL_OW 289
14225: PUSH
14226: LD_VAR 0 1
14230: PPUSH
14231: LD_INT 2
14233: PPUSH
14234: CALL_OW 289
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
14243: LD_ADDR_VAR 0 3
14247: PUSH
14248: LD_VAR 0 3
14252: PPUSH
14253: LD_VAR 0 3
14257: PUSH
14258: LD_INT 1
14260: PLUS
14261: PPUSH
14262: LD_VAR 0 1
14266: PPUSH
14267: CALL_OW 265
14271: PUSH
14272: LD_VAR 0 1
14276: PPUSH
14277: CALL_OW 262
14281: PUSH
14282: LD_VAR 0 1
14286: PPUSH
14287: CALL_OW 263
14291: PUSH
14292: LD_VAR 0 1
14296: PPUSH
14297: CALL_OW 264
14301: PUSH
14302: LD_VAR 0 1
14306: PPUSH
14307: CALL_OW 248
14311: PUSH
14312: LD_VAR 0 1
14316: PPUSH
14317: CALL_OW 256
14321: PUSH
14322: LD_VAR 0 4
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: PPUSH
14336: CALL_OW 1
14340: ST_TO_ADDR
// end else
14341: GO 14438
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
14343: LD_ADDR_VAR 0 3
14347: PUSH
14348: LD_VAR 0 3
14352: PPUSH
14353: LD_VAR 0 3
14357: PUSH
14358: LD_INT 1
14360: PLUS
14361: PPUSH
14362: LD_VAR 0 1
14366: PPUSH
14367: CALL_OW 265
14371: PUSH
14372: LD_VAR 0 1
14376: PPUSH
14377: CALL_OW 262
14381: PUSH
14382: LD_VAR 0 1
14386: PPUSH
14387: CALL_OW 263
14391: PUSH
14392: LD_VAR 0 1
14396: PPUSH
14397: CALL_OW 264
14401: PUSH
14402: LD_VAR 0 1
14406: PPUSH
14407: CALL_OW 248
14411: PUSH
14412: LD_VAR 0 1
14416: PPUSH
14417: CALL_OW 256
14421: PUSH
14422: EMPTY
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: PPUSH
14433: CALL_OW 1
14437: ST_TO_ADDR
14438: GO 14179
14440: POP
14441: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
14442: LD_VAR 0 3
14446: PPUSH
14447: LD_STRING 04_1_Vehicles
14449: PPUSH
14450: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
14454: LD_EXP 20
14458: PPUSH
14459: LD_STRING 04_1_RuLabCaptured
14461: PPUSH
14462: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
14466: LD_EXP 18
14470: PPUSH
14471: LD_STRING 04_1_EscapeCounter
14473: PPUSH
14474: CALL_OW 39
// SaveVariable ( FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) > 0 , 04_1_BaseHill ) ;
14478: LD_INT 10
14480: PPUSH
14481: LD_INT 22
14483: PUSH
14484: LD_INT 2
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: PUSH
14491: LD_INT 21
14493: PUSH
14494: LD_INT 3
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: PUSH
14501: EMPTY
14502: LIST
14503: LIST
14504: PPUSH
14505: CALL_OW 70
14509: PUSH
14510: LD_INT 0
14512: GREATER
14513: PPUSH
14514: LD_STRING 04_1_BaseHill
14516: PPUSH
14517: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
14521: LD_OWVAR 1
14525: PPUSH
14526: LD_STRING 04_1_Time
14528: PPUSH
14529: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
14533: LD_EXP 14
14537: PPUSH
14538: LD_STRING 04_1_DeadCounter
14540: PPUSH
14541: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
14545: LD_INT 22
14547: PUSH
14548: LD_INT 2
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: PUSH
14555: LD_INT 34
14557: PUSH
14558: LD_INT 26
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: PPUSH
14569: CALL_OW 69
14573: PUSH
14574: LD_INT 0
14576: PLUS
14577: PPUSH
14578: LD_STRING 04_1_Flamethrower
14580: PPUSH
14581: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
14585: LD_INT 1
14587: PPUSH
14588: LD_STRING __x1\04_cont2
14590: PPUSH
14591: CALL_OW 340
// end ; end_of_file
14595: PPOPN 4
14597: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
14598: LD_VAR 0 1
14602: PPUSH
14603: CALL_OW 266
14607: PUSH
14608: LD_INT 0
14610: EQUAL
14611: PUSH
14612: LD_VAR 0 1
14616: PPUSH
14617: CALL_OW 255
14621: PUSH
14622: LD_INT 2
14624: EQUAL
14625: AND
14626: IFFALSE 14636
// baseConstructed := true ;
14628: LD_ADDR_EXP 3
14632: PUSH
14633: LD_INT 1
14635: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
14636: LD_VAR 0 1
14640: PPUSH
14641: CALL_OW 266
14645: PUSH
14646: LD_INT 6
14648: EQUAL
14649: PUSH
14650: LD_VAR 0 1
14654: PPUSH
14655: CALL_OW 255
14659: PUSH
14660: LD_INT 2
14662: EQUAL
14663: AND
14664: IFFALSE 14674
// labConstructed := true ;
14666: LD_ADDR_EXP 4
14670: PUSH
14671: LD_INT 1
14673: ST_TO_ADDR
// end ;
14674: PPOPN 1
14676: END
// on UnitDestroyed ( un ) do begin if un = Heike then
14677: LD_VAR 0 1
14681: PUSH
14682: LD_EXP 21
14686: EQUAL
14687: IFFALSE 14696
// YouLost ( Heike ) ;
14689: LD_STRING Heike
14691: PPUSH
14692: CALL_OW 104
// if un = Omar then
14696: LD_VAR 0 1
14700: PUSH
14701: LD_EXP 29
14705: EQUAL
14706: IFFALSE 14715
// YouLost ( Omar ) ;
14708: LD_STRING Omar
14710: PPUSH
14711: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
14715: LD_VAR 0 1
14719: PUSH
14720: LD_INT 22
14722: PUSH
14723: LD_INT 2
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: PUSH
14730: LD_INT 23
14732: PUSH
14733: LD_INT 2
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: PUSH
14740: LD_INT 21
14742: PUSH
14743: LD_INT 1
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: LIST
14754: PPUSH
14755: CALL_OW 69
14759: IN
14760: IFFALSE 14776
// loseCounter := loseCounter + 1 ;
14762: LD_ADDR_EXP 14
14766: PUSH
14767: LD_EXP 14
14771: PUSH
14772: LD_INT 1
14774: PLUS
14775: ST_TO_ADDR
// if un = omikron then
14776: LD_VAR 0 1
14780: PUSH
14781: LD_INT 64
14783: EQUAL
14784: IFFALSE 14794
// omicronFall := true ;
14786: LD_ADDR_EXP 13
14790: PUSH
14791: LD_INT 1
14793: ST_TO_ADDR
// if un = kirov then
14794: LD_VAR 0 1
14798: PUSH
14799: LD_INT 71
14801: EQUAL
14802: IFFALSE 14819
// begin ChangeMissionObjectives ( KirovDone ) ;
14804: LD_STRING KirovDone
14806: PPUSH
14807: CALL_OW 337
// kirovDestroyed := true ;
14811: LD_ADDR_EXP 15
14815: PUSH
14816: LD_INT 1
14818: ST_TO_ADDR
// end ; if un = beria then
14819: LD_VAR 0 1
14823: PUSH
14824: LD_INT 106
14826: EQUAL
14827: IFFALSE 14844
// begin ChangeMissionObjectives ( BeriaDone ) ;
14829: LD_STRING BeriaDone
14831: PPUSH
14832: CALL_OW 337
// beriaDestroyed := true ;
14836: LD_ADDR_EXP 16
14840: PUSH
14841: LD_INT 1
14843: ST_TO_ADDR
// end ; if un = kagan then
14844: LD_VAR 0 1
14848: PUSH
14849: LD_INT 112
14851: EQUAL
14852: IFFALSE 14869
// begin ChangeMissionObjectives ( KaganDone ) ;
14854: LD_STRING KaganDone
14856: PPUSH
14857: CALL_OW 337
// kaganDestroyed := true ;
14861: LD_ADDR_EXP 17
14865: PUSH
14866: LD_INT 1
14868: ST_TO_ADDR
// end ; if un in russianPatrol then
14869: LD_VAR 0 1
14873: PUSH
14874: LD_EXP 42
14878: IN
14879: IFFALSE 14920
// begin if GetTag ( un ) = 2 then
14881: LD_VAR 0 1
14885: PPUSH
14886: CALL_OW 110
14890: PUSH
14891: LD_INT 2
14893: EQUAL
14894: IFFALSE 14904
// spottedByPatrol := false ;
14896: LD_ADDR_EXP 7
14900: PUSH
14901: LD_INT 0
14903: ST_TO_ADDR
// russianPatrol := russianPatrol diff un ;
14904: LD_ADDR_EXP 42
14908: PUSH
14909: LD_EXP 42
14913: PUSH
14914: LD_VAR 0 1
14918: DIFF
14919: ST_TO_ADDR
// end ; if un in russianOmicronAttackers then
14920: LD_VAR 0 1
14924: PUSH
14925: LD_EXP 43
14929: IN
14930: IFFALSE 14948
// russianOmicronAttackers := russianOmicronAttackers diff un ;
14932: LD_ADDR_EXP 43
14936: PUSH
14937: LD_EXP 43
14941: PUSH
14942: LD_VAR 0 1
14946: DIFF
14947: ST_TO_ADDR
// end ;
14948: PPOPN 1
14950: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
14951: LD_INT 0
14953: PPUSH
14954: PPUSH
14955: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
14956: LD_VAR 0 1
14960: PUSH
14961: LD_INT 2
14963: PUSH
14964: LD_INT 22
14966: PUSH
14967: LD_INT 3
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: PUSH
14974: LD_INT 22
14976: PUSH
14977: LD_INT 4
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: PUSH
14984: LD_INT 22
14986: PUSH
14987: LD_INT 6
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: PUSH
15000: LD_INT 30
15002: PUSH
15003: LD_INT 32
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PPUSH
15014: CALL_OW 69
15018: IN
15019: IFFALSE 15192
// begin sol := UnitsInside ( un ) ;
15021: LD_ADDR_VAR 0 3
15025: PUSH
15026: LD_VAR 0 1
15030: PPUSH
15031: CALL_OW 313
15035: ST_TO_ADDR
// if not sol then
15036: LD_VAR 0 3
15040: NOT
15041: IFFALSE 15045
// exit ;
15043: GO 15192
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
15045: LD_ADDR_VAR 0 4
15049: PUSH
15050: LD_INT 22
15052: PUSH
15053: LD_VAR 0 1
15057: PPUSH
15058: CALL_OW 255
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: PUSH
15067: LD_INT 2
15069: PUSH
15070: LD_INT 30
15072: PUSH
15073: LD_INT 4
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: PUSH
15080: LD_INT 30
15082: PUSH
15083: LD_INT 5
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PUSH
15090: EMPTY
15091: LIST
15092: LIST
15093: LIST
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: PPUSH
15099: CALL_OW 69
15103: ST_TO_ADDR
// if not nearestBarracks then
15104: LD_VAR 0 4
15108: NOT
15109: IFFALSE 15113
// exit ;
15111: GO 15192
// for i in nearestBarracks do
15113: LD_ADDR_VAR 0 2
15117: PUSH
15118: LD_VAR 0 4
15122: PUSH
15123: FOR_IN
15124: IFFALSE 15159
// if UnitsInside ( i ) = 6 then
15126: LD_VAR 0 2
15130: PPUSH
15131: CALL_OW 313
15135: PUSH
15136: LD_INT 6
15138: EQUAL
15139: IFFALSE 15157
// nearestBarracks := nearestBarracks diff i ;
15141: LD_ADDR_VAR 0 4
15145: PUSH
15146: LD_VAR 0 4
15150: PUSH
15151: LD_VAR 0 2
15155: DIFF
15156: ST_TO_ADDR
15157: GO 15123
15159: POP
15160: POP
// if not nearestBarracks then
15161: LD_VAR 0 4
15165: NOT
15166: IFFALSE 15170
// exit ;
15168: GO 15192
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
15170: LD_VAR 0 3
15174: PUSH
15175: LD_INT 1
15177: ARRAY
15178: PPUSH
15179: LD_VAR 0 4
15183: PUSH
15184: LD_INT 1
15186: ARRAY
15187: PPUSH
15188: CALL_OW 120
// end ; end ;
15192: PPOPN 4
15194: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
15195: LD_INT 0
15197: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
15198: LD_EXP 8
15202: NOT
15203: PUSH
15204: LD_EXP 5
15208: NOT
15209: OR
15210: IFFALSE 15214
// exit ;
15212: GO 15282
// for i in camAreas do
15214: LD_ADDR_VAR 0 5
15218: PUSH
15219: LD_EXP 8
15223: PUSH
15224: FOR_IN
15225: IFFALSE 15280
// if InArea ( x , y , i ) then
15227: LD_VAR 0 3
15231: PPUSH
15232: LD_VAR 0 4
15236: PPUSH
15237: LD_VAR 0 5
15241: PPUSH
15242: CALL_OW 309
15246: IFFALSE 15278
// begin SetAreaMapShow ( i , 0 ) ;
15248: LD_VAR 0 5
15252: PPUSH
15253: LD_INT 0
15255: PPUSH
15256: CALL_OW 424
// camAreas := camAreas diff i ;
15260: LD_ADDR_EXP 8
15264: PUSH
15265: LD_EXP 8
15269: PUSH
15270: LD_VAR 0 5
15274: DIFF
15275: ST_TO_ADDR
// break ;
15276: GO 15280
// end ;
15278: GO 15224
15280: POP
15281: POP
// end ;
15282: PPOPN 5
15284: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
15285: LD_VAR 0 1
15289: PUSH
15290: LD_INT 2
15292: EQUAL
15293: PUSH
15294: LD_VAR 0 2
15298: PUSH
15299: LD_INT 5
15301: EQUAL
15302: AND
15303: IFFALSE 15312
// YouLost ( Ally ) ;
15305: LD_STRING Ally
15307: PPUSH
15308: CALL_OW 104
// end ; end_of_file
15312: PPOPN 2
15314: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 200 , 160 , 120 ] [ Difficulty ] do
15315: LD_EXP 11
15319: NOT
15320: PUSH
15321: LD_INT 12
15323: PPUSH
15324: LD_INT 1
15326: PPUSH
15327: CALL_OW 287
15331: PUSH
15332: LD_INT 200
15334: PUSH
15335: LD_INT 160
15337: PUSH
15338: LD_INT 120
15340: PUSH
15341: EMPTY
15342: LIST
15343: LIST
15344: LIST
15345: PUSH
15346: LD_OWVAR 67
15350: ARRAY
15351: LESS
15352: AND
15353: IFFALSE 15380
15355: GO 15357
15357: DISABLE
// begin enable ;
15358: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
15359: LD_INT 1
15361: PPUSH
15362: LD_INT 5
15364: PPUSH
15365: CALL_OW 12
15369: PPUSH
15370: LD_INT 12
15372: PPUSH
15373: LD_INT 1
15375: PPUSH
15376: CALL_OW 55
// end ;
15380: END
