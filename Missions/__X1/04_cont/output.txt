// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// CreateNature ;
   8: CALL 841 0 0
// PrepareArabian ;
  12: CALL 1215 0 0
// PrepareAmerican ;
  16: CALL 6234 0 0
// PrepareRussian ;
  20: CALL 2171 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 7794 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 25 25$00 , 24 24$00 , 23 23$00 , 22 22$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 52500
 188: PUSH
 189: LD_INT 50400
 191: PUSH
 192: LD_INT 48300
 194: PUSH
 195: LD_INT 46200
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// escapeCounter := 0 ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// loseCounter := 0 ;
 218: LD_ADDR_EXP 14
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// labCaptured := false ;
 226: LD_ADDR_EXP 21
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// hillBase := false ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 242: LD_ADDR_EXP 8
 246: PUSH
 247: LD_INT 3
 249: PUSH
 250: LD_INT 4
 252: PUSH
 253: LD_INT 5
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 7
 261: PUSH
 262: LD_INT 8
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 273: LD_ADDR_EXP 23
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// kaganCaptured := false ;
 281: LD_ADDR_EXP 24
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// end ;
 289: LD_VAR 0 1
 293: RET
// every 0 0$1 trigger debug do var i ;
 294: LD_EXP 1
 298: IFFALSE 367
 300: GO 302
 302: DISABLE
 303: LD_INT 0
 305: PPUSH
// begin enable ;
 306: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 307: LD_ADDR_VAR 0 1
 311: PUSH
 312: LD_INT 22
 314: PUSH
 315: LD_INT 2
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 3
 324: PUSH
 325: LD_INT 21
 327: PUSH
 328: LD_INT 3
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PPUSH
 343: CALL_OW 69
 347: PUSH
 348: FOR_IN
 349: IFFALSE 365
// SetLives ( i , 1000 ) ;
 351: LD_VAR 0 1
 355: PPUSH
 356: LD_INT 1000
 358: PPUSH
 359: CALL_OW 234
 363: GO 348
 365: POP
 366: POP
// end ; end_of_file
 367: PPOPN 1
 369: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 370: LD_INT 0
 372: PPUSH
// uc_side := side ;
 373: LD_ADDR_OWVAR 20
 377: PUSH
 378: LD_VAR 0 1
 382: ST_TO_ADDR
// uc_nation := nation ;
 383: LD_ADDR_OWVAR 21
 387: PUSH
 388: LD_VAR 0 2
 392: ST_TO_ADDR
// vc_chassis := chassis ;
 393: LD_ADDR_OWVAR 37
 397: PUSH
 398: LD_VAR 0 3
 402: ST_TO_ADDR
// vc_engine := engine ;
 403: LD_ADDR_OWVAR 39
 407: PUSH
 408: LD_VAR 0 4
 412: ST_TO_ADDR
// vc_control := control ;
 413: LD_ADDR_OWVAR 38
 417: PUSH
 418: LD_VAR 0 5
 422: ST_TO_ADDR
// vc_weapon := weapon ;
 423: LD_ADDR_OWVAR 40
 427: PUSH
 428: LD_VAR 0 6
 432: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 433: LD_ADDR_OWVAR 41
 437: PUSH
 438: LD_VAR 0 7
 442: ST_TO_ADDR
// result := CreateVehicle ;
 443: LD_ADDR_VAR 0 8
 447: PUSH
 448: CALL_OW 45
 452: ST_TO_ADDR
// end ;
 453: LD_VAR 0 8
 457: RET
// export function SayX ( units , ident ) ; var i ; begin
 458: LD_INT 0
 460: PPUSH
 461: PPUSH
// result := false ;
 462: LD_ADDR_VAR 0 3
 466: PUSH
 467: LD_INT 0
 469: ST_TO_ADDR
// if not units then
 470: LD_VAR 0 1
 474: NOT
 475: IFFALSE 479
// exit ;
 477: GO 533
// for i in units do
 479: LD_ADDR_VAR 0 4
 483: PUSH
 484: LD_VAR 0 1
 488: PUSH
 489: FOR_IN
 490: IFFALSE 531
// if IsOk ( i ) then
 492: LD_VAR 0 4
 496: PPUSH
 497: CALL_OW 302
 501: IFFALSE 529
// begin Say ( i , ident ) ;
 503: LD_VAR 0 4
 507: PPUSH
 508: LD_VAR 0 2
 512: PPUSH
 513: CALL_OW 88
// result := i ;
 517: LD_ADDR_VAR 0 3
 521: PUSH
 522: LD_VAR 0 4
 526: ST_TO_ADDR
// break ;
 527: GO 531
// end ;
 529: GO 489
 531: POP
 532: POP
// end ;
 533: LD_VAR 0 3
 537: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 538: LD_INT 0
 540: PPUSH
 541: PPUSH
 542: PPUSH
// if not observer or not unit then
 543: LD_VAR 0 1
 547: NOT
 548: PUSH
 549: LD_VAR 0 2
 553: NOT
 554: OR
 555: IFFALSE 559
// exit ;
 557: GO 607
// if not See ( GetSide ( observer ) , unit ) then
 559: LD_VAR 0 1
 563: PPUSH
 564: CALL_OW 255
 568: PPUSH
 569: LD_VAR 0 2
 573: PPUSH
 574: CALL_OW 292
 578: NOT
 579: IFFALSE 583
// exit ;
 581: GO 607
// result := GetDistUnits ( observer , unit ) < 12 ;
 583: LD_ADDR_VAR 0 3
 587: PUSH
 588: LD_VAR 0 1
 592: PPUSH
 593: LD_VAR 0 2
 597: PPUSH
 598: CALL_OW 296
 602: PUSH
 603: LD_INT 12
 605: LESS
 606: ST_TO_ADDR
// end ;
 607: LD_VAR 0 3
 611: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 612: LD_INT 0
 614: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 615: LD_VAR 0 2
 619: PUSH
 620: LD_INT 1
 622: ARRAY
 623: PPUSH
 624: LD_VAR 0 2
 628: PUSH
 629: LD_INT 2
 631: ARRAY
 632: PPUSH
 633: CALL_OW 488
 637: PUSH
 638: LD_VAR 0 2
 642: PUSH
 643: LD_INT 1
 645: ARRAY
 646: PPUSH
 647: LD_VAR 0 2
 651: PUSH
 652: LD_INT 2
 654: ARRAY
 655: PPUSH
 656: CALL_OW 428
 660: PUSH
 661: LD_INT 0
 663: EQUAL
 664: AND
 665: IFFALSE 699
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 667: LD_VAR 0 1
 671: PPUSH
 672: LD_VAR 0 2
 676: PUSH
 677: LD_INT 1
 679: ARRAY
 680: PPUSH
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 2
 688: ARRAY
 689: PPUSH
 690: LD_VAR 0 3
 694: PPUSH
 695: CALL_OW 48
// end ;
 699: LD_VAR 0 4
 703: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 704: LD_INT 0
 706: PPUSH
 707: PPUSH
// InitUc ;
 708: CALL_OW 18
// InitHc ;
 712: CALL_OW 19
// uc_side := 0 ;
 716: LD_ADDR_OWVAR 20
 720: PUSH
 721: LD_INT 0
 723: ST_TO_ADDR
// uc_nation := 0 ;
 724: LD_ADDR_OWVAR 21
 728: PUSH
 729: LD_INT 0
 731: ST_TO_ADDR
// for i = 1 to amount do
 732: LD_ADDR_VAR 0 4
 736: PUSH
 737: DOUBLE
 738: LD_INT 1
 740: DEC
 741: ST_TO_ADDR
 742: LD_VAR 0 2
 746: PUSH
 747: FOR_TO
 748: IFFALSE 830
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 750: LD_ADDR_OWVAR 29
 754: PUSH
 755: LD_INT 9
 757: PPUSH
 758: LD_INT 12
 760: PPUSH
 761: CALL_OW 12
 765: PUSH
 766: LD_INT 9
 768: PPUSH
 769: LD_INT 12
 771: PPUSH
 772: CALL_OW 12
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 781: LD_ADDR_OWVAR 35
 785: PUSH
 786: LD_INT 1
 788: NEG
 789: PPUSH
 790: LD_INT 1
 792: PPUSH
 793: CALL_OW 12
 797: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 798: LD_INT 0
 800: PPUSH
 801: LD_INT 12
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 811: CALL_OW 44
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: LD_INT 0
 823: PPUSH
 824: CALL_OW 49
// end ;
 828: GO 747
 830: POP
 831: POP
// InitHc ;
 832: CALL_OW 19
// end ;
 836: LD_VAR 0 3
 840: RET
// export function CreateNature ; var i ; begin
 841: LD_INT 0
 843: PPUSH
 844: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 , 2 ] [ Difficulty ] ) ;
 845: LD_INT 18
 847: PPUSH
 848: LD_INT 5
 850: PUSH
 851: LD_INT 4
 853: PUSH
 854: LD_INT 3
 856: PUSH
 857: LD_INT 2
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: PUSH
 866: LD_OWVAR 67
 870: ARRAY
 871: PPUSH
 872: CALL 704 0 2
// for i := 1 to 3 do
 876: LD_ADDR_VAR 0 2
 880: PUSH
 881: DOUBLE
 882: LD_INT 1
 884: DEC
 885: ST_TO_ADDR
 886: LD_INT 3
 888: PUSH
 889: FOR_TO
 890: IFFALSE 925
// begin hc_class := 21 ;
 892: LD_ADDR_OWVAR 28
 896: PUSH
 897: LD_INT 21
 899: ST_TO_ADDR
// hc_gallery :=  ;
 900: LD_ADDR_OWVAR 33
 904: PUSH
 905: LD_STRING 
 907: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 908: CALL_OW 44
 912: PPUSH
 913: LD_INT 18
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 49
// end ;
 923: GO 889
 925: POP
 926: POP
// for i := 1 to 2 do
 927: LD_ADDR_VAR 0 2
 931: PUSH
 932: DOUBLE
 933: LD_INT 1
 935: DEC
 936: ST_TO_ADDR
 937: LD_INT 2
 939: PUSH
 940: FOR_TO
 941: IFFALSE 976
// begin hc_class := 18 ;
 943: LD_ADDR_OWVAR 28
 947: PUSH
 948: LD_INT 18
 950: ST_TO_ADDR
// hc_gallery :=  ;
 951: LD_ADDR_OWVAR 33
 955: PUSH
 956: LD_STRING 
 958: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 959: CALL_OW 44
 963: PPUSH
 964: LD_INT 18
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 49
// end ;
 974: GO 940
 976: POP
 977: POP
// for i := 1 to 2 do
 978: LD_ADDR_VAR 0 2
 982: PUSH
 983: DOUBLE
 984: LD_INT 1
 986: DEC
 987: ST_TO_ADDR
 988: LD_INT 2
 990: PUSH
 991: FOR_TO
 992: IFFALSE 1027
// begin hc_class := 13 ;
 994: LD_ADDR_OWVAR 28
 998: PUSH
 999: LD_INT 13
1001: ST_TO_ADDR
// hc_gallery :=  ;
1002: LD_ADDR_OWVAR 33
1006: PUSH
1007: LD_STRING 
1009: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1010: CALL_OW 44
1014: PPUSH
1015: LD_INT 18
1017: PPUSH
1018: LD_INT 0
1020: PPUSH
1021: CALL_OW 49
// end ;
1025: GO 991
1027: POP
1028: POP
// end ;
1029: LD_VAR 0 1
1033: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1034: LD_INT 0
1036: PPUSH
1037: PPUSH
1038: PPUSH
1039: PPUSH
1040: PPUSH
// result := false ;
1041: LD_ADDR_VAR 0 4
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// if not sideList or not enemySide then
1049: LD_VAR 0 1
1053: NOT
1054: PUSH
1055: LD_VAR 0 2
1059: NOT
1060: OR
1061: IFFALSE 1065
// exit ;
1063: GO 1210
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1065: LD_ADDR_VAR 0 7
1069: PUSH
1070: LD_INT 22
1072: PUSH
1073: LD_VAR 0 2
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PPUSH
1082: CALL_OW 69
1086: ST_TO_ADDR
// if not tmp then
1087: LD_VAR 0 7
1091: NOT
1092: IFFALSE 1096
// exit ;
1094: GO 1210
// for s in sideList do
1096: LD_ADDR_VAR 0 6
1100: PUSH
1101: LD_VAR 0 1
1105: PUSH
1106: FOR_IN
1107: IFFALSE 1208
// for i in tmp do
1109: LD_ADDR_VAR 0 5
1113: PUSH
1114: LD_VAR 0 7
1118: PUSH
1119: FOR_IN
1120: IFFALSE 1204
// if See ( s , i ) then
1122: LD_VAR 0 6
1126: PPUSH
1127: LD_VAR 0 5
1131: PPUSH
1132: CALL_OW 292
1136: IFFALSE 1202
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
1138: LD_ADDR_VAR 0 8
1142: PUSH
1143: LD_INT 22
1145: PUSH
1146: LD_VAR 0 6
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: PPUSH
1155: CALL_OW 69
1159: PPUSH
1160: LD_VAR 0 5
1164: PPUSH
1165: CALL_OW 74
1169: ST_TO_ADDR
// if tmp2 in exceptUnits then
1170: LD_VAR 0 8
1174: PUSH
1175: LD_VAR 0 3
1179: IN
1180: IFFALSE 1186
// continue else
1182: GO 1119
1184: GO 1202
// begin result := tmp2 ;
1186: LD_ADDR_VAR 0 4
1190: PUSH
1191: LD_VAR 0 8
1195: ST_TO_ADDR
// exit ;
1196: POP
1197: POP
1198: POP
1199: POP
1200: GO 1210
// end ; end ;
1202: GO 1119
1204: POP
1205: POP
1206: GO 1106
1208: POP
1209: POP
// end ; end_of_file
1210: LD_VAR 0 4
1214: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1215: LD_INT 0
1217: PPUSH
1218: PPUSH
// uc_side := 5 ;
1219: LD_ADDR_OWVAR 20
1223: PUSH
1224: LD_INT 5
1226: ST_TO_ADDR
// uc_nation := 2 ;
1227: LD_ADDR_OWVAR 21
1231: PUSH
1232: LD_INT 2
1234: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1235: LD_ADDR_EXP 36
1239: PUSH
1240: LD_STRING Abdul
1242: PPUSH
1243: LD_INT 0
1245: PPUSH
1246: LD_STRING 
1248: PPUSH
1249: CALL 36338 0 3
1253: ST_TO_ADDR
// uc_side := 2 ;
1254: LD_ADDR_OWVAR 20
1258: PUSH
1259: LD_INT 2
1261: ST_TO_ADDR
// uc_nation := 2 ;
1262: LD_ADDR_OWVAR 21
1266: PUSH
1267: LD_INT 2
1269: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1270: LD_ADDR_EXP 25
1274: PUSH
1275: LD_STRING Heike
1277: PPUSH
1278: LD_EXP 1
1282: NOT
1283: PPUSH
1284: LD_EXP 2
1288: PPUSH
1289: CALL 36338 0 3
1293: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1294: LD_ADDR_EXP 28
1298: PUSH
1299: LD_STRING Ibrahim
1301: PPUSH
1302: LD_EXP 1
1306: NOT
1307: PPUSH
1308: LD_EXP 2
1312: PPUSH
1313: CALL 36338 0 3
1317: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1318: LD_ADDR_EXP 26
1322: PUSH
1323: LD_STRING Givi
1325: PPUSH
1326: LD_EXP 1
1330: NOT
1331: PPUSH
1332: LD_EXP 2
1336: PPUSH
1337: CALL 36338 0 3
1341: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1342: LD_ADDR_EXP 29
1346: PUSH
1347: LD_STRING Kamil
1349: PPUSH
1350: LD_EXP 1
1354: NOT
1355: PPUSH
1356: LD_EXP 2
1360: PPUSH
1361: CALL 36338 0 3
1365: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1366: LD_ADDR_EXP 30
1370: PUSH
1371: LD_STRING Kaia
1373: PPUSH
1374: LD_EXP 1
1378: NOT
1379: PPUSH
1380: LD_EXP 2
1384: PPUSH
1385: CALL 36338 0 3
1389: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1390: LD_ADDR_EXP 31
1394: PUSH
1395: LD_STRING Sophia
1397: PPUSH
1398: LD_EXP 1
1402: NOT
1403: PPUSH
1404: LD_EXP 2
1408: PPUSH
1409: CALL 36338 0 3
1413: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1414: LD_ADDR_EXP 32
1418: PUSH
1419: LD_STRING Markov
1421: PPUSH
1422: LD_EXP 1
1426: NOT
1427: PPUSH
1428: LD_EXP 2
1432: PPUSH
1433: CALL 36338 0 3
1437: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1438: LD_ADDR_EXP 35
1442: PUSH
1443: LD_STRING Aviradze
1445: PPUSH
1446: LD_EXP 1
1450: NOT
1451: PPUSH
1452: LD_EXP 2
1456: PPUSH
1457: CALL 36338 0 3
1461: ST_TO_ADDR
// aviradzeSquad := [ ] ;
1462: LD_ADDR_EXP 39
1466: PUSH
1467: EMPTY
1468: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
1469: LD_ADDR_EXP 37
1473: PUSH
1474: LD_STRING 03_others
1476: PPUSH
1477: CALL_OW 31
1481: ST_TO_ADDR
// uc_side := 5 ;
1482: LD_ADDR_OWVAR 20
1486: PUSH
1487: LD_INT 5
1489: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
1490: LD_ADDR_EXP 34
1494: PUSH
1495: LD_STRING Kurt
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: LD_STRING 
1503: PPUSH
1504: CALL 36338 0 3
1508: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1509: LD_ADDR_EXP 27
1513: PUSH
1514: LD_STRING Mike
1516: PPUSH
1517: LD_EXP 1
1521: NOT
1522: PPUSH
1523: LD_EXP 2
1527: PPUSH
1528: CALL 36338 0 3
1532: ST_TO_ADDR
// if Mike then
1533: LD_EXP 27
1537: IFFALSE 1560
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
1539: LD_EXP 27
1543: PPUSH
1544: LD_INT 142
1546: PPUSH
1547: LD_INT 63
1549: PPUSH
1550: LD_INT 2
1552: PPUSH
1553: LD_INT 0
1555: PPUSH
1556: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
1560: LD_EXP 34
1564: PPUSH
1565: LD_INT 142
1567: PPUSH
1568: LD_INT 63
1570: PPUSH
1571: LD_INT 3
1573: PPUSH
1574: LD_INT 0
1576: PPUSH
1577: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
1581: LD_EXP 34
1585: PUSH
1586: LD_EXP 27
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 140
// end ;
1599: LD_VAR 0 1
1603: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
1604: LD_INT 0
1606: PPUSH
1607: PPUSH
1608: PPUSH
1609: PPUSH
// uc_side := 5 ;
1610: LD_ADDR_OWVAR 20
1614: PUSH
1615: LD_INT 5
1617: ST_TO_ADDR
// uc_nation := 2 ;
1618: LD_ADDR_OWVAR 21
1622: PUSH
1623: LD_INT 2
1625: ST_TO_ADDR
// InitHc ;
1626: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
1630: LD_ADDR_EXP 33
1634: PUSH
1635: LD_STRING Omar
1637: PPUSH
1638: LD_INT 0
1640: PPUSH
1641: LD_STRING 
1643: PPUSH
1644: CALL 36338 0 3
1648: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
1649: LD_EXP 33
1653: PPUSH
1654: LD_INT 284
1656: PPUSH
1657: LD_INT 163
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
1667: LD_EXP 33
1671: PPUSH
1672: LD_INT 256
1674: PPUSH
1675: LD_INT 129
1677: PPUSH
1678: CALL_OW 111
// wait ( 0 0$2 ) ;
1682: LD_INT 70
1684: PPUSH
1685: CALL_OW 67
// omarSquad := [ ] ;
1689: LD_ADDR_EXP 38
1693: PUSH
1694: EMPTY
1695: ST_TO_ADDR
// for i := 1 to 5 do
1696: LD_ADDR_VAR 0 2
1700: PUSH
1701: DOUBLE
1702: LD_INT 1
1704: DEC
1705: ST_TO_ADDR
1706: LD_INT 5
1708: PUSH
1709: FOR_TO
1710: IFFALSE 1916
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1712: LD_INT 5
1714: PPUSH
1715: LD_INT 2
1717: PPUSH
1718: LD_INT 13
1720: PUSH
1721: LD_INT 14
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: LD_VAR 0 2
1732: PUSH
1733: LD_INT 2
1735: MOD
1736: PUSH
1737: LD_INT 1
1739: PLUS
1740: ARRAY
1741: PPUSH
1742: LD_INT 1
1744: PPUSH
1745: LD_INT 1
1747: PPUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 27
1753: PUSH
1754: LD_INT 26
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: LIST
1761: PUSH
1762: LD_VAR 0 2
1766: PUSH
1767: LD_INT 3
1769: MOD
1770: PUSH
1771: LD_INT 1
1773: PLUS
1774: ARRAY
1775: PPUSH
1776: LD_INT 100
1778: PPUSH
1779: CALL 370 0 7
// veh := CreateVehicle ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: CALL_OW 45
1792: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1793: LD_VAR 0 4
1797: PPUSH
1798: LD_INT 5
1800: PPUSH
1801: CALL_OW 233
// omarSquad := omarSquad union veh ;
1805: LD_ADDR_EXP 38
1809: PUSH
1810: LD_EXP 38
1814: PUSH
1815: LD_VAR 0 4
1819: UNION
1820: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
1821: LD_VAR 0 4
1825: PPUSH
1826: LD_INT 284
1828: PPUSH
1829: LD_INT 163
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
1839: LD_INT 0
1841: PPUSH
1842: LD_INT 3
1844: PPUSH
1845: LD_INT 2
1847: PPUSH
1848: CALL_OW 380
// un := CreateHuman ;
1852: LD_ADDR_VAR 0 3
1856: PUSH
1857: CALL_OW 44
1861: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1862: LD_ADDR_EXP 38
1866: PUSH
1867: LD_EXP 38
1871: PUSH
1872: LD_VAR 0 3
1876: UNION
1877: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1878: LD_VAR 0 3
1882: PPUSH
1883: LD_VAR 0 4
1887: PPUSH
1888: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
1892: LD_VAR 0 3
1896: PPUSH
1897: LD_INT 271
1899: PPUSH
1900: LD_INT 144
1902: PPUSH
1903: CALL_OW 111
// wait ( 0 0$2 ) ;
1907: LD_INT 70
1909: PPUSH
1910: CALL_OW 67
// end ;
1914: GO 1709
1916: POP
1917: POP
// for i := 1 to 3 do
1918: LD_ADDR_VAR 0 2
1922: PUSH
1923: DOUBLE
1924: LD_INT 1
1926: DEC
1927: ST_TO_ADDR
1928: LD_INT 3
1930: PUSH
1931: FOR_TO
1932: IFFALSE 2015
// begin PrepareHuman ( false , 1 , 2 ) ;
1934: LD_INT 0
1936: PPUSH
1937: LD_INT 1
1939: PPUSH
1940: LD_INT 2
1942: PPUSH
1943: CALL_OW 380
// un := CreateHuman ;
1947: LD_ADDR_VAR 0 3
1951: PUSH
1952: CALL_OW 44
1956: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1957: LD_ADDR_EXP 38
1961: PUSH
1962: LD_EXP 38
1966: PUSH
1967: LD_VAR 0 3
1971: UNION
1972: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
1973: LD_VAR 0 3
1977: PPUSH
1978: LD_INT 284
1980: PPUSH
1981: LD_INT 163
1983: PPUSH
1984: LD_INT 0
1986: PPUSH
1987: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
1991: LD_VAR 0 3
1995: PPUSH
1996: LD_INT 257
1998: PPUSH
1999: LD_INT 138
2001: PPUSH
2002: CALL_OW 111
// wait ( 0 0$1 ) ;
2006: LD_INT 35
2008: PPUSH
2009: CALL_OW 67
// end ;
2013: GO 1931
2015: POP
2016: POP
// for i := 1 to 6 do
2017: LD_ADDR_VAR 0 2
2021: PUSH
2022: DOUBLE
2023: LD_INT 1
2025: DEC
2026: ST_TO_ADDR
2027: LD_INT 6
2029: PUSH
2030: FOR_TO
2031: IFFALSE 2164
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2033: LD_INT 0
2035: PPUSH
2036: LD_INT 1
2038: PUSH
2039: LD_INT 1
2041: PUSH
2042: LD_INT 4
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: PUSH
2050: LD_VAR 0 2
2054: PUSH
2055: LD_INT 3
2057: MOD
2058: PUSH
2059: LD_INT 1
2061: PLUS
2062: ARRAY
2063: PPUSH
2064: LD_INT 3
2066: PPUSH
2067: CALL_OW 380
// un := CreateHuman ;
2071: LD_ADDR_VAR 0 3
2075: PUSH
2076: CALL_OW 44
2080: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2081: LD_ADDR_EXP 38
2085: PUSH
2086: LD_EXP 38
2090: PUSH
2091: LD_VAR 0 3
2095: UNION
2096: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2097: LD_VAR 0 3
2101: PPUSH
2102: LD_INT 225
2104: PPUSH
2105: LD_INT 163
2107: PPUSH
2108: LD_INT 0
2110: PPUSH
2111: CALL_OW 48
// if i = 1 then
2115: LD_VAR 0 2
2119: PUSH
2120: LD_INT 1
2122: EQUAL
2123: IFFALSE 2140
// SetAttr ( un , attr_speed , 12 ) ;
2125: LD_VAR 0 3
2129: PPUSH
2130: LD_INT 2
2132: PPUSH
2133: LD_INT 12
2135: PPUSH
2136: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2140: LD_VAR 0 3
2144: PPUSH
2145: LD_INT 222
2147: PPUSH
2148: LD_INT 157
2150: PPUSH
2151: CALL_OW 111
// wait ( 0 0$1 ) ;
2155: LD_INT 35
2157: PPUSH
2158: CALL_OW 67
// end ;
2162: GO 2030
2164: POP
2165: POP
// end ; end_of_file
2166: LD_VAR 0 1
2170: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2171: LD_INT 0
2173: PPUSH
2174: PPUSH
2175: PPUSH
2176: PPUSH
2177: PPUSH
2178: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
2179: LD_INT 3
2181: PPUSH
2182: LD_INT 149
2184: PPUSH
2185: LD_INT 67
2187: PPUSH
2188: CALL_OW 428
2192: PPUSH
2193: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
2197: LD_ADDR_EXP 50
2201: PUSH
2202: LD_INT 111
2204: PPUSH
2205: LD_INT 89
2207: PPUSH
2208: CALL_OW 428
2212: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2213: LD_ADDR_VAR 0 2
2217: PUSH
2218: LD_INT 21
2220: PUSH
2221: LD_INT 3
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: PUSH
2228: LD_INT 23
2230: PUSH
2231: LD_INT 3
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PPUSH
2242: CALL_OW 69
2246: PUSH
2247: FOR_IN
2248: IFFALSE 2264
// SetBLevel ( i , 5 ) ;
2250: LD_VAR 0 2
2254: PPUSH
2255: LD_INT 5
2257: PPUSH
2258: CALL_OW 241
2262: GO 2247
2264: POP
2265: POP
// SetBName ( kirov , kirov ) ;
2266: LD_INT 71
2268: PPUSH
2269: LD_STRING kirov
2271: PPUSH
2272: CALL_OW 500
// SetBName ( beria , beria ) ;
2276: LD_INT 106
2278: PPUSH
2279: LD_STRING beria
2281: PPUSH
2282: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2286: LD_INT 112
2288: PPUSH
2289: LD_STRING kagan
2291: PPUSH
2292: CALL_OW 500
// uc_side := 6 ;
2296: LD_ADDR_OWVAR 20
2300: PUSH
2301: LD_INT 6
2303: ST_TO_ADDR
// uc_nation := 3 ;
2304: LD_ADDR_OWVAR 21
2308: PUSH
2309: LD_INT 3
2311: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2312: LD_ADDR_VAR 0 5
2316: PUSH
2317: LD_INT 22
2319: PUSH
2320: LD_INT 6
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PUSH
2327: LD_INT 30
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: PPUSH
2341: CALL_OW 69
2345: PUSH
2346: LD_INT 1
2348: ARRAY
2349: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
2350: LD_ADDR_VAR 0 4
2354: PUSH
2355: LD_INT 22
2357: PUSH
2358: LD_INT 6
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: PUSH
2365: LD_INT 30
2367: PUSH
2368: LD_INT 4
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: PPUSH
2379: CALL_OW 69
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
2388: LD_ADDR_EXP 44
2392: PUSH
2393: EMPTY
2394: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
2395: LD_ADDR_EXP 45
2399: PUSH
2400: EMPTY
2401: ST_TO_ADDR
// russianPatrol := [ ] ;
2402: LD_ADDR_EXP 47
2406: PUSH
2407: EMPTY
2408: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
2409: LD_ADDR_EXP 40
2413: PUSH
2414: LD_STRING Kurin
2416: PPUSH
2417: LD_INT 0
2419: PPUSH
2420: LD_STRING 
2422: PPUSH
2423: CALL 36338 0 3
2427: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
2428: LD_EXP 40
2432: PPUSH
2433: LD_INT 71
2435: PPUSH
2436: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
2440: LD_ADDR_EXP 42
2444: PUSH
2445: LD_STRING Popov
2447: PPUSH
2448: LD_INT 0
2450: PPUSH
2451: LD_STRING 
2453: PPUSH
2454: CALL 36338 0 3
2458: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
2459: LD_EXP 42
2463: PPUSH
2464: LD_INT 71
2466: PPUSH
2467: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
2471: LD_ADDR_EXP 41
2475: PUSH
2476: LD_STRING Grishko
2478: PPUSH
2479: LD_INT 0
2481: PPUSH
2482: LD_STRING 
2484: PPUSH
2485: CALL 36338 0 3
2489: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
2490: LD_EXP 41
2494: PPUSH
2495: LD_INT 207
2497: PPUSH
2498: LD_INT 106
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
2508: LD_EXP 41
2512: PPUSH
2513: LD_INT 209
2515: PPUSH
2516: LD_INT 106
2518: PPUSH
2519: CALL_OW 118
// for i := 1 to 2 do
2523: LD_ADDR_VAR 0 2
2527: PUSH
2528: DOUBLE
2529: LD_INT 1
2531: DEC
2532: ST_TO_ADDR
2533: LD_INT 2
2535: PUSH
2536: FOR_TO
2537: IFFALSE 2592
// begin PrepareHuman ( false , 2 , 2 ) ;
2539: LD_INT 0
2541: PPUSH
2542: LD_INT 2
2544: PPUSH
2545: LD_INT 2
2547: PPUSH
2548: CALL_OW 380
// un := CreateHuman ;
2552: LD_ADDR_VAR 0 3
2556: PUSH
2557: CALL_OW 44
2561: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2562: LD_VAR 0 3
2566: PPUSH
2567: LD_INT 71
2569: PPUSH
2570: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2574: LD_ADDR_EXP 44
2578: PUSH
2579: LD_EXP 44
2583: PUSH
2584: LD_VAR 0 3
2588: UNION
2589: ST_TO_ADDR
// end ;
2590: GO 2536
2592: POP
2593: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2594: LD_ADDR_VAR 0 2
2598: PUSH
2599: DOUBLE
2600: LD_INT 1
2602: DEC
2603: ST_TO_ADDR
2604: LD_INT 5
2606: PUSH
2607: LD_INT 6
2609: PUSH
2610: LD_INT 6
2612: PUSH
2613: LD_INT 6
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: PUSH
2622: LD_OWVAR 67
2626: ARRAY
2627: PUSH
2628: FOR_TO
2629: IFFALSE 2707
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
2631: LD_INT 0
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_INT 2
2639: PUSH
2640: LD_INT 3
2642: PUSH
2643: LD_INT 4
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: LIST
2654: PUSH
2655: LD_OWVAR 67
2659: ARRAY
2660: PPUSH
2661: CALL_OW 380
// un := CreateHuman ;
2665: LD_ADDR_VAR 0 3
2669: PUSH
2670: CALL_OW 44
2674: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
2675: LD_VAR 0 3
2679: PPUSH
2680: LD_VAR 0 5
2684: PPUSH
2685: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2689: LD_ADDR_EXP 44
2693: PUSH
2694: LD_EXP 44
2698: PUSH
2699: LD_VAR 0 3
2703: UNION
2704: ST_TO_ADDR
// end ;
2705: GO 2628
2707: POP
2708: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
2709: LD_ADDR_VAR 0 2
2713: PUSH
2714: LD_INT 22
2716: PUSH
2717: LD_INT 6
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: PUSH
2724: LD_INT 30
2726: PUSH
2727: LD_INT 32
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: PPUSH
2738: CALL_OW 69
2742: PUSH
2743: FOR_IN
2744: IFFALSE 2822
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
2746: LD_INT 0
2748: PPUSH
2749: LD_INT 1
2751: PPUSH
2752: LD_INT 3
2754: PUSH
2755: LD_INT 4
2757: PUSH
2758: LD_INT 4
2760: PUSH
2761: LD_INT 5
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: LIST
2768: LIST
2769: PUSH
2770: LD_OWVAR 67
2774: ARRAY
2775: PPUSH
2776: CALL_OW 380
// un := CreateHuman ;
2780: LD_ADDR_VAR 0 3
2784: PUSH
2785: CALL_OW 44
2789: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2790: LD_VAR 0 3
2794: PPUSH
2795: LD_VAR 0 2
2799: PPUSH
2800: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2804: LD_ADDR_EXP 44
2808: PUSH
2809: LD_EXP 44
2813: PUSH
2814: LD_VAR 0 3
2818: UNION
2819: ST_TO_ADDR
// end ;
2820: GO 2743
2822: POP
2823: POP
// for i := 1 to 3 do
2824: LD_ADDR_VAR 0 2
2828: PUSH
2829: DOUBLE
2830: LD_INT 1
2832: DEC
2833: ST_TO_ADDR
2834: LD_INT 3
2836: PUSH
2837: FOR_TO
2838: IFFALSE 2893
// begin PrepareHuman ( false , 3 , 3 ) ;
2840: LD_INT 0
2842: PPUSH
2843: LD_INT 3
2845: PPUSH
2846: LD_INT 3
2848: PPUSH
2849: CALL_OW 380
// un := CreateHuman ;
2853: LD_ADDR_VAR 0 3
2857: PUSH
2858: CALL_OW 44
2862: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
2863: LD_VAR 0 3
2867: PPUSH
2868: LD_INT 92
2870: PPUSH
2871: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2875: LD_ADDR_EXP 44
2879: PUSH
2880: LD_EXP 44
2884: PUSH
2885: LD_VAR 0 3
2889: UNION
2890: ST_TO_ADDR
// end ;
2891: GO 2837
2893: POP
2894: POP
// for i := 1 to 2 do
2895: LD_ADDR_VAR 0 2
2899: PUSH
2900: DOUBLE
2901: LD_INT 1
2903: DEC
2904: ST_TO_ADDR
2905: LD_INT 2
2907: PUSH
2908: FOR_TO
2909: IFFALSE 2964
// begin PrepareHuman ( false , 4 , 3 ) ;
2911: LD_INT 0
2913: PPUSH
2914: LD_INT 4
2916: PPUSH
2917: LD_INT 3
2919: PPUSH
2920: CALL_OW 380
// un := CreateHuman ;
2924: LD_ADDR_VAR 0 3
2928: PUSH
2929: CALL_OW 44
2933: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2934: LD_VAR 0 3
2938: PPUSH
2939: LD_INT 83
2941: PPUSH
2942: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2946: LD_ADDR_EXP 44
2950: PUSH
2951: LD_EXP 44
2955: PUSH
2956: LD_VAR 0 3
2960: UNION
2961: ST_TO_ADDR
// end ;
2962: GO 2908
2964: POP
2965: POP
// for i := 1 to 5 do
2966: LD_ADDR_VAR 0 2
2970: PUSH
2971: DOUBLE
2972: LD_INT 1
2974: DEC
2975: ST_TO_ADDR
2976: LD_INT 5
2978: PUSH
2979: FOR_TO
2980: IFFALSE 3037
// begin PrepareHuman ( false , 1 , 3 ) ;
2982: LD_INT 0
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 3
2990: PPUSH
2991: CALL_OW 380
// un := CreateHuman ;
2995: LD_ADDR_VAR 0 3
2999: PUSH
3000: CALL_OW 44
3004: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3005: LD_VAR 0 3
3009: PPUSH
3010: LD_VAR 0 4
3014: PPUSH
3015: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3019: LD_ADDR_EXP 46
3023: PUSH
3024: LD_EXP 46
3028: PUSH
3029: LD_VAR 0 3
3033: UNION
3034: ST_TO_ADDR
// end ;
3035: GO 2979
3037: POP
3038: POP
// russianCargo := [ ] ;
3039: LD_ADDR_EXP 49
3043: PUSH
3044: EMPTY
3045: ST_TO_ADDR
// for i := 1 to 2 do
3046: LD_ADDR_VAR 0 2
3050: PUSH
3051: DOUBLE
3052: LD_INT 1
3054: DEC
3055: ST_TO_ADDR
3056: LD_INT 2
3058: PUSH
3059: FOR_TO
3060: IFFALSE 3192
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3062: LD_INT 6
3064: PPUSH
3065: LD_INT 3
3067: PPUSH
3068: LD_INT 21
3070: PPUSH
3071: LD_INT 1
3073: PPUSH
3074: LD_INT 1
3076: PPUSH
3077: LD_INT 51
3079: PPUSH
3080: LD_INT 100
3082: PPUSH
3083: CALL 370 0 7
// un := CreateVehicle ;
3087: LD_ADDR_VAR 0 3
3091: PUSH
3092: CALL_OW 45
3096: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3097: LD_ADDR_EXP 49
3101: PUSH
3102: LD_EXP 49
3106: PUSH
3107: LD_VAR 0 3
3111: UNION
3112: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3113: LD_VAR 0 3
3117: PPUSH
3118: LD_INT 2
3120: PPUSH
3121: LD_INT 100
3123: PPUSH
3124: CALL_OW 290
// SetDir ( un , 4 ) ;
3128: LD_VAR 0 3
3132: PPUSH
3133: LD_INT 4
3135: PPUSH
3136: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3140: LD_VAR 0 3
3144: PPUSH
3145: LD_INT 147
3147: PPUSH
3148: LD_INT 103
3150: PPUSH
3151: LD_INT 4
3153: PPUSH
3154: LD_INT 0
3156: PPUSH
3157: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3161: LD_INT 0
3163: PPUSH
3164: LD_INT 1
3166: PPUSH
3167: LD_OWVAR 67
3171: PPUSH
3172: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3176: CALL_OW 44
3180: PPUSH
3181: LD_VAR 0 3
3185: PPUSH
3186: CALL_OW 52
// end ;
3190: GO 3059
3192: POP
3193: POP
// uc_side := 3 ;
3194: LD_ADDR_OWVAR 20
3198: PUSH
3199: LD_INT 3
3201: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3202: LD_ADDR_EXP 43
3206: PUSH
3207: LD_STRING Burlak
3209: PPUSH
3210: LD_INT 0
3212: PPUSH
3213: LD_STRING 
3215: PPUSH
3216: CALL 36338 0 3
3220: ST_TO_ADDR
// for i := 1 to 5 do
3221: LD_ADDR_VAR 0 2
3225: PUSH
3226: DOUBLE
3227: LD_INT 1
3229: DEC
3230: ST_TO_ADDR
3231: LD_INT 5
3233: PUSH
3234: FOR_TO
3235: IFFALSE 3328
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3237: LD_INT 0
3239: PPUSH
3240: LD_INT 1
3242: PPUSH
3243: LD_OWVAR 67
3247: PUSH
3248: LD_INT 1
3250: PLUS
3251: PPUSH
3252: CALL_OW 380
// un := CreateHuman ;
3256: LD_ADDR_VAR 0 3
3260: PUSH
3261: CALL_OW 44
3265: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3266: LD_VAR 0 3
3270: PPUSH
3271: LD_INT 22
3273: PUSH
3274: LD_INT 3
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 30
3283: PUSH
3284: LD_INT 32
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PPUSH
3295: CALL_OW 69
3299: PUSH
3300: LD_VAR 0 2
3304: ARRAY
3305: PPUSH
3306: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3310: LD_ADDR_EXP 45
3314: PUSH
3315: LD_EXP 45
3319: PUSH
3320: LD_VAR 0 3
3324: UNION
3325: ST_TO_ADDR
// end ;
3326: GO 3234
3328: POP
3329: POP
// for i := 1 to 2 do
3330: LD_ADDR_VAR 0 2
3334: PUSH
3335: DOUBLE
3336: LD_INT 1
3338: DEC
3339: ST_TO_ADDR
3340: LD_INT 2
3342: PUSH
3343: FOR_TO
3344: IFFALSE 3435
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3346: LD_INT 0
3348: PPUSH
3349: LD_INT 1
3351: PPUSH
3352: LD_OWVAR 67
3356: PUSH
3357: LD_INT 1
3359: PLUS
3360: PPUSH
3361: CALL_OW 380
// un := CreateHuman ;
3365: LD_ADDR_VAR 0 3
3369: PUSH
3370: CALL_OW 44
3374: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3375: LD_VAR 0 3
3379: PPUSH
3380: LD_INT 22
3382: PUSH
3383: LD_INT 3
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: PUSH
3390: LD_INT 30
3392: PUSH
3393: LD_INT 5
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PPUSH
3404: CALL_OW 69
3408: PUSH
3409: LD_INT 1
3411: ARRAY
3412: PPUSH
3413: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3417: LD_ADDR_EXP 45
3421: PUSH
3422: LD_EXP 45
3426: PUSH
3427: LD_VAR 0 3
3431: UNION
3432: ST_TO_ADDR
// end ;
3433: GO 3343
3435: POP
3436: POP
// for i := 1 to 2 do
3437: LD_ADDR_VAR 0 2
3441: PUSH
3442: DOUBLE
3443: LD_INT 1
3445: DEC
3446: ST_TO_ADDR
3447: LD_INT 2
3449: PUSH
3450: FOR_TO
3451: IFFALSE 3538
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3453: LD_INT 0
3455: PPUSH
3456: LD_INT 4
3458: PPUSH
3459: LD_OWVAR 67
3463: PPUSH
3464: CALL_OW 380
// un := CreateHuman ;
3468: LD_ADDR_VAR 0 3
3472: PUSH
3473: CALL_OW 44
3477: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
3478: LD_VAR 0 3
3482: PPUSH
3483: LD_INT 22
3485: PUSH
3486: LD_INT 3
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 30
3495: PUSH
3496: LD_INT 7
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PPUSH
3507: CALL_OW 69
3511: PUSH
3512: LD_INT 1
3514: ARRAY
3515: PPUSH
3516: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3520: LD_ADDR_EXP 45
3524: PUSH
3525: LD_EXP 45
3529: PUSH
3530: LD_VAR 0 3
3534: UNION
3535: ST_TO_ADDR
// end ;
3536: GO 3450
3538: POP
3539: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
3540: LD_INT 0
3542: PPUSH
3543: LD_INT 2
3545: PPUSH
3546: LD_OWVAR 67
3550: PPUSH
3551: CALL_OW 380
// un := CreateHuman ;
3555: LD_ADDR_VAR 0 3
3559: PUSH
3560: CALL_OW 44
3564: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
3565: LD_VAR 0 3
3569: PPUSH
3570: LD_INT 106
3572: PPUSH
3573: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3577: LD_ADDR_EXP 45
3581: PUSH
3582: LD_EXP 45
3586: PUSH
3587: LD_VAR 0 3
3591: UNION
3592: ST_TO_ADDR
// for i := 1 to 3 do
3593: LD_ADDR_VAR 0 2
3597: PUSH
3598: DOUBLE
3599: LD_INT 1
3601: DEC
3602: ST_TO_ADDR
3603: LD_INT 3
3605: PUSH
3606: FOR_TO
3607: IFFALSE 3729
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
3609: LD_ADDR_VAR 0 6
3613: PUSH
3614: LD_INT 22
3616: PUSH
3617: LD_INT 3
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: PUSH
3624: LD_INT 30
3626: PUSH
3627: LD_INT 31
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: PUSH
3634: EMPTY
3635: LIST
3636: LIST
3637: PPUSH
3638: CALL_OW 69
3642: PUSH
3643: LD_VAR 0 2
3647: ARRAY
3648: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
3649: LD_INT 0
3651: PPUSH
3652: LD_INT 1
3654: PPUSH
3655: LD_OWVAR 67
3659: PPUSH
3660: CALL_OW 380
// un := CreateHuman ;
3664: LD_ADDR_VAR 0 3
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
3674: LD_VAR 0 3
3678: PPUSH
3679: LD_VAR 0 6
3683: PPUSH
3684: CALL_OW 254
3688: PUSH
3689: LD_INT 3
3691: PLUS
3692: PPUSH
3693: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
3697: LD_VAR 0 3
3701: PPUSH
3702: LD_VAR 0 6
3706: PPUSH
3707: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3711: LD_ADDR_EXP 45
3715: PUSH
3716: LD_EXP 45
3720: PUSH
3721: LD_VAR 0 3
3725: UNION
3726: ST_TO_ADDR
// end ;
3727: GO 3606
3729: POP
3730: POP
// if Difficulty > 1 then
3731: LD_OWVAR 67
3735: PUSH
3736: LD_INT 1
3738: GREATER
3739: IFFALSE 3814
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
3741: LD_ADDR_VAR 0 3
3745: PUSH
3746: LD_INT 3
3748: PPUSH
3749: LD_INT 3
3751: PPUSH
3752: LD_INT 23
3754: PPUSH
3755: LD_INT 1
3757: PPUSH
3758: LD_INT 1
3760: PPUSH
3761: LD_INT 44
3763: PPUSH
3764: LD_INT 100
3766: PPUSH
3767: CALL 370 0 7
3771: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
3772: LD_VAR 0 3
3776: PPUSH
3777: LD_INT 73
3779: PPUSH
3780: LD_INT 110
3782: PPUSH
3783: LD_INT 0
3785: PPUSH
3786: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
3790: LD_INT 0
3792: PPUSH
3793: LD_INT 3
3795: PPUSH
3796: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
3800: CALL_OW 44
3804: PPUSH
3805: LD_VAR 0 3
3809: PPUSH
3810: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
3814: LD_ADDR_EXP 48
3818: PUSH
3819: EMPTY
3820: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 , 8 ] [ Difficulty ] do
3821: LD_ADDR_VAR 0 2
3825: PUSH
3826: DOUBLE
3827: LD_INT 1
3829: DEC
3830: ST_TO_ADDR
3831: LD_INT 6
3833: PUSH
3834: LD_INT 7
3836: PUSH
3837: LD_INT 8
3839: PUSH
3840: LD_INT 8
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: LD_OWVAR 67
3853: ARRAY
3854: PUSH
3855: FOR_TO
3856: IFFALSE 4080
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
3858: LD_INT 3
3860: PPUSH
3861: LD_INT 3
3863: PPUSH
3864: LD_INT 21
3866: PUSH
3867: LD_INT 23
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: LD_VAR 0 2
3878: PUSH
3879: LD_INT 2
3881: MOD
3882: PUSH
3883: LD_INT 1
3885: PLUS
3886: ARRAY
3887: PPUSH
3888: LD_INT 1
3890: PPUSH
3891: LD_INT 1
3893: PPUSH
3894: LD_INT 43
3896: PUSH
3897: LD_INT 44
3899: PUSH
3900: LD_INT 42
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: LIST
3907: PUSH
3908: LD_VAR 0 2
3912: PUSH
3913: LD_INT 3
3915: MOD
3916: PUSH
3917: LD_INT 1
3919: PLUS
3920: ARRAY
3921: PPUSH
3922: LD_INT 100
3924: PPUSH
3925: CALL 370 0 7
// un := CreateVehicle ;
3929: LD_ADDR_VAR 0 3
3933: PUSH
3934: CALL_OW 45
3938: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
3939: LD_VAR 0 3
3943: PPUSH
3944: LD_INT 0
3946: PUSH
3947: LD_INT 5
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: PUSH
3954: LD_INT 1
3956: PPUSH
3957: LD_INT 2
3959: PPUSH
3960: CALL_OW 12
3964: ARRAY
3965: PPUSH
3966: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
3970: LD_ADDR_EXP 48
3974: PUSH
3975: LD_EXP 48
3979: PUSH
3980: LD_VAR 0 3
3984: UNION
3985: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
3986: LD_VAR 0 3
3990: PPUSH
3991: LD_INT 127
3993: PPUSH
3994: LD_INT 89
3996: PPUSH
3997: LD_INT 7
3999: PPUSH
4000: LD_INT 0
4002: PPUSH
4003: CALL_OW 50
// uc_side := 3 ;
4007: LD_ADDR_OWVAR 20
4011: PUSH
4012: LD_INT 3
4014: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4015: LD_INT 0
4017: PPUSH
4018: LD_INT 3
4020: PPUSH
4021: LD_INT 3
4023: PPUSH
4024: CALL_OW 380
// un := CreateHuman ;
4028: LD_ADDR_VAR 0 3
4032: PUSH
4033: CALL_OW 44
4037: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4038: LD_ADDR_EXP 48
4042: PUSH
4043: LD_EXP 48
4047: PUSH
4048: LD_VAR 0 3
4052: UNION
4053: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4054: LD_VAR 0 3
4058: PPUSH
4059: LD_EXP 48
4063: PUSH
4064: LD_EXP 48
4068: PUSH
4069: LD_INT 1
4071: MINUS
4072: ARRAY
4073: PPUSH
4074: CALL_OW 52
// end ;
4078: GO 3855
4080: POP
4081: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
4082: LD_ADDR_VAR 0 2
4086: PUSH
4087: DOUBLE
4088: LD_INT 1
4090: DEC
4091: ST_TO_ADDR
4092: LD_INT 3
4094: PUSH
4095: LD_INT 4
4097: PUSH
4098: LD_INT 5
4100: PUSH
4101: LD_INT 6
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: PUSH
4110: LD_OWVAR 67
4114: ARRAY
4115: PUSH
4116: FOR_TO
4117: IFFALSE 4183
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4119: LD_INT 0
4121: PPUSH
4122: LD_INT 1
4124: PPUSH
4125: LD_OWVAR 67
4129: PPUSH
4130: CALL_OW 380
// un := CreateHuman ;
4134: LD_ADDR_VAR 0 3
4138: PUSH
4139: CALL_OW 44
4143: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4144: LD_ADDR_EXP 48
4148: PUSH
4149: LD_EXP 48
4153: PUSH
4154: LD_VAR 0 3
4158: UNION
4159: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4160: LD_VAR 0 3
4164: PPUSH
4165: LD_INT 91
4167: PPUSH
4168: LD_INT 60
4170: PPUSH
4171: LD_INT 3
4173: PPUSH
4174: LD_INT 0
4176: PPUSH
4177: CALL_OW 50
// end ;
4181: GO 4116
4183: POP
4184: POP
// end ;
4185: LD_VAR 0 1
4189: RET
// every 0 0$3 do var i ;
4190: GO 4192
4192: DISABLE
4193: LD_INT 0
4195: PPUSH
// begin for i := 1 to 4 do
4196: LD_ADDR_VAR 0 1
4200: PUSH
4201: DOUBLE
4202: LD_INT 1
4204: DEC
4205: ST_TO_ADDR
4206: LD_INT 4
4208: PUSH
4209: FOR_TO
4210: IFFALSE 4229
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4212: LD_EXP 46
4216: PUSH
4217: LD_VAR 0 1
4221: ARRAY
4222: PPUSH
4223: CALL_OW 122
4227: GO 4209
4229: POP
4230: POP
// wait ( 3 ) ;
4231: LD_INT 3
4233: PPUSH
4234: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4238: LD_EXP 46
4242: PUSH
4243: LD_INT 1
4245: ARRAY
4246: PPUSH
4247: LD_INT 22
4249: PUSH
4250: LD_INT 6
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: LD_INT 30
4259: PUSH
4260: LD_INT 31
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: PPUSH
4271: CALL_OW 69
4275: PPUSH
4276: LD_EXP 46
4280: PUSH
4281: LD_INT 1
4283: ARRAY
4284: PPUSH
4285: CALL_OW 74
4289: PPUSH
4290: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4294: LD_EXP 46
4298: PUSH
4299: LD_INT 2
4301: ARRAY
4302: PPUSH
4303: LD_INT 211
4305: PPUSH
4306: LD_INT 107
4308: PPUSH
4309: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4313: LD_EXP 46
4317: PUSH
4318: LD_INT 2
4320: ARRAY
4321: PPUSH
4322: LD_INT 209
4324: PPUSH
4325: LD_INT 106
4327: PPUSH
4328: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4332: LD_EXP 46
4336: PUSH
4337: LD_INT 3
4339: ARRAY
4340: PPUSH
4341: LD_INT 209
4343: PPUSH
4344: LD_INT 103
4346: PPUSH
4347: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4351: LD_EXP 46
4355: PUSH
4356: LD_INT 3
4358: ARRAY
4359: PPUSH
4360: LD_INT 209
4362: PPUSH
4363: LD_INT 106
4365: PPUSH
4366: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4370: LD_EXP 46
4374: PUSH
4375: LD_INT 4
4377: ARRAY
4378: PPUSH
4379: LD_INT 227
4381: PPUSH
4382: LD_INT 117
4384: PPUSH
4385: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4389: LD_EXP 46
4393: PUSH
4394: LD_INT 4
4396: ARRAY
4397: PPUSH
4398: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4402: LD_INT 700
4404: PPUSH
4405: CALL_OW 67
// for i := 3 downto 2 do
4409: LD_ADDR_VAR 0 1
4413: PUSH
4414: DOUBLE
4415: LD_INT 3
4417: INC
4418: ST_TO_ADDR
4419: LD_INT 2
4421: PUSH
4422: FOR_DOWNTO
4423: IFFALSE 4590
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4425: LD_EXP 46
4429: PUSH
4430: LD_VAR 0 1
4434: ARRAY
4435: PPUSH
4436: LD_INT 200
4438: PPUSH
4439: LD_INT 91
4441: PPUSH
4442: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4446: LD_EXP 46
4450: PUSH
4451: LD_VAR 0 1
4455: ARRAY
4456: PPUSH
4457: LD_INT 210
4459: PPUSH
4460: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4464: LD_EXP 46
4468: PUSH
4469: LD_VAR 0 1
4473: ARRAY
4474: PPUSH
4475: LD_INT 224
4477: PPUSH
4478: LD_INT 93
4480: PPUSH
4481: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4485: LD_EXP 46
4489: PUSH
4490: LD_VAR 0 1
4494: ARRAY
4495: PPUSH
4496: LD_INT 210
4498: PPUSH
4499: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4503: LD_EXP 46
4507: PUSH
4508: LD_VAR 0 1
4512: ARRAY
4513: PPUSH
4514: LD_INT 239
4516: PPUSH
4517: LD_INT 123
4519: PPUSH
4520: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4524: LD_EXP 46
4528: PUSH
4529: LD_VAR 0 1
4533: ARRAY
4534: PPUSH
4535: LD_INT 210
4537: PPUSH
4538: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4542: LD_EXP 46
4546: PUSH
4547: LD_VAR 0 1
4551: ARRAY
4552: PPUSH
4553: LD_INT 212
4555: PPUSH
4556: LD_INT 105
4558: PPUSH
4559: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4563: LD_EXP 46
4567: PUSH
4568: LD_VAR 0 1
4572: ARRAY
4573: PPUSH
4574: LD_INT 700
4576: PPUSH
4577: CALL_OW 202
// wait ( 0 0$30 ) ;
4581: LD_INT 1050
4583: PPUSH
4584: CALL_OW 67
// end ;
4588: GO 4422
4590: POP
4591: POP
// until not activeGrishkoAI ;
4592: LD_EXP 10
4596: NOT
4597: IFFALSE 4402
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
4599: LD_EXP 46
4603: PPUSH
4604: LD_INT 221
4606: PPUSH
4607: LD_INT 110
4609: PPUSH
4610: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
4614: LD_EXP 46
4618: PPUSH
4619: LD_INT 228
4621: PPUSH
4622: LD_INT 115
4624: PPUSH
4625: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
4629: LD_EXP 46
4633: PPUSH
4634: CALL_OW 200
// end ;
4638: PPOPN 1
4640: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
4641: LD_EXP 12
4645: IFFALSE 5391
4647: GO 4649
4649: DISABLE
4650: LD_INT 0
4652: PPUSH
4653: PPUSH
4654: PPUSH
4655: PPUSH
// begin uc_side := 6 ;
4656: LD_ADDR_OWVAR 20
4660: PUSH
4661: LD_INT 6
4663: ST_TO_ADDR
// uc_nation := 3 ;
4664: LD_ADDR_OWVAR 21
4668: PUSH
4669: LD_INT 3
4671: ST_TO_ADDR
// for i := 1 to 3 do
4672: LD_ADDR_VAR 0 2
4676: PUSH
4677: DOUBLE
4678: LD_INT 1
4680: DEC
4681: ST_TO_ADDR
4682: LD_INT 3
4684: PUSH
4685: FOR_TO
4686: IFFALSE 4799
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
4688: LD_INT 0
4690: PPUSH
4691: LD_INT 1
4693: PPUSH
4694: LD_INT 2
4696: PUSH
4697: LD_INT 3
4699: PUSH
4700: LD_INT 4
4702: PUSH
4703: LD_INT 4
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: PUSH
4712: LD_OWVAR 67
4716: ARRAY
4717: PPUSH
4718: CALL_OW 380
// un := CreateHuman ;
4722: LD_ADDR_VAR 0 1
4726: PUSH
4727: CALL_OW 44
4731: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
4732: LD_ADDR_EXP 47
4736: PUSH
4737: LD_EXP 47
4741: PUSH
4742: LD_VAR 0 1
4746: UNION
4747: ST_TO_ADDR
// SetTag ( un , 1 ) ;
4748: LD_VAR 0 1
4752: PPUSH
4753: LD_INT 1
4755: PPUSH
4756: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
4760: LD_VAR 0 1
4764: PPUSH
4765: LD_INT 11
4767: PPUSH
4768: LD_INT 0
4770: PPUSH
4771: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
4775: LD_VAR 0 1
4779: PPUSH
4780: LD_INT 210
4782: PPUSH
4783: LD_INT 159
4785: PPUSH
4786: CALL_OW 111
// wait ( 0 0$2 ) ;
4790: LD_INT 70
4792: PPUSH
4793: CALL_OW 67
// end ;
4797: GO 4685
4799: POP
4800: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
4801: LD_ADDR_VAR 0 4
4805: PUSH
4806: LD_INT 172
4808: PUSH
4809: LD_INT 76
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 150
4818: PUSH
4819: LD_INT 38
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: LD_INT 148
4828: PUSH
4829: LD_INT 9
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 165
4838: PUSH
4839: LD_INT 38
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: PUSH
4852: LD_INT 191
4854: PUSH
4855: LD_INT 77
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 168
4864: PUSH
4865: LD_INT 42
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: PUSH
4872: LD_INT 166
4874: PUSH
4875: LD_INT 11
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PUSH
4882: LD_INT 151
4884: PUSH
4885: LD_INT 12
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: PUSH
4898: LD_INT 221
4900: PUSH
4901: LD_INT 88
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 217
4910: PUSH
4911: LD_INT 64
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 232
4920: PUSH
4921: LD_INT 66
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: LD_INT 200
4930: PUSH
4931: LD_INT 56
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: LIST
4948: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4949: LD_INT 35
4951: PPUSH
4952: CALL_OW 67
// for i := russianPatrol downto 1 do
4956: LD_ADDR_VAR 0 2
4960: PUSH
4961: DOUBLE
4962: LD_EXP 47
4966: INC
4967: ST_TO_ADDR
4968: LD_INT 1
4970: PUSH
4971: FOR_DOWNTO
4972: IFFALSE 5355
// begin if IsDead ( russianPatrol [ i ] ) then
4974: LD_EXP 47
4978: PUSH
4979: LD_VAR 0 2
4983: ARRAY
4984: PPUSH
4985: CALL_OW 301
4989: IFFALSE 4993
// continue ;
4991: GO 4971
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
4993: LD_EXP 47
4997: PUSH
4998: LD_VAR 0 2
5002: ARRAY
5003: PPUSH
5004: CALL_OW 256
5008: PUSH
5009: LD_INT 990
5011: LESS
5012: PUSH
5013: LD_EXP 47
5017: PUSH
5018: LD_VAR 0 2
5022: ARRAY
5023: PPUSH
5024: CALL_OW 110
5028: PUSH
5029: LD_INT 1
5031: EQUAL
5032: AND
5033: IFFALSE 5053
// SetTag ( russianPatrol [ i ] , 2 ) ;
5035: LD_EXP 47
5039: PUSH
5040: LD_VAR 0 2
5044: ARRAY
5045: PPUSH
5046: LD_INT 2
5048: PPUSH
5049: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5053: LD_EXP 47
5057: PUSH
5058: LD_VAR 0 2
5062: ARRAY
5063: PPUSH
5064: CALL_OW 110
5068: PUSH
5069: LD_INT 2
5071: EQUAL
5072: IFFALSE 5139
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5074: LD_EXP 47
5078: PUSH
5079: LD_VAR 0 2
5083: ARRAY
5084: PPUSH
5085: LD_INT 166
5087: PPUSH
5088: LD_INT 101
5090: PPUSH
5091: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5095: LD_EXP 47
5099: PUSH
5100: LD_VAR 0 2
5104: ARRAY
5105: PPUSH
5106: LD_INT 71
5108: PPUSH
5109: CALL_OW 296
5113: PUSH
5114: LD_INT 10
5116: LESS
5117: IFFALSE 5137
// SetTag ( russianPatrol [ i ] , 3 ) ;
5119: LD_EXP 47
5123: PUSH
5124: LD_VAR 0 2
5128: ARRAY
5129: PPUSH
5130: LD_INT 3
5132: PPUSH
5133: CALL_OW 109
// continue ;
5137: GO 4971
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5139: LD_EXP 47
5143: PUSH
5144: LD_VAR 0 2
5148: ARRAY
5149: PPUSH
5150: CALL_OW 110
5154: PUSH
5155: LD_INT 3
5157: EQUAL
5158: IFFALSE 5253
// begin spottedByPatrol := true ;
5160: LD_ADDR_EXP 7
5164: PUSH
5165: LD_INT 1
5167: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5168: LD_EXP 47
5172: PUSH
5173: LD_VAR 0 2
5177: ARRAY
5178: PPUSH
5179: CALL_OW 250
5183: PPUSH
5184: LD_EXP 47
5188: PUSH
5189: LD_VAR 0 2
5193: ARRAY
5194: PPUSH
5195: CALL_OW 251
5199: PPUSH
5200: LD_INT 2
5202: PPUSH
5203: LD_INT 6
5205: NEG
5206: PPUSH
5207: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
5211: LD_EXP 47
5215: PUSH
5216: LD_VAR 0 2
5220: ARRAY
5221: PPUSH
5222: CALL_OW 87
// DialogueOn ;
5226: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
5230: LD_EXP 25
5234: PPUSH
5235: LD_STRING DH-Spot-f-3
5237: PPUSH
5238: CALL_OW 88
// DialogueOff ;
5242: CALL_OW 7
// YouLost ( Spotted ) ;
5246: LD_STRING Spotted
5248: PPUSH
5249: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
5253: LD_EXP 47
5257: PUSH
5258: LD_VAR 0 2
5262: ARRAY
5263: PPUSH
5264: CALL_OW 314
5268: NOT
5269: IFFALSE 5353
// for j in patrol [ i ] do
5271: LD_ADDR_VAR 0 3
5275: PUSH
5276: LD_VAR 0 4
5280: PUSH
5281: LD_VAR 0 2
5285: ARRAY
5286: PUSH
5287: FOR_IN
5288: IFFALSE 5351
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5290: LD_EXP 47
5294: PUSH
5295: LD_VAR 0 2
5299: ARRAY
5300: PPUSH
5301: LD_INT 35
5303: PPUSH
5304: LD_INT 175
5306: PPUSH
5307: CALL_OW 12
5311: PPUSH
5312: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5316: LD_EXP 47
5320: PUSH
5321: LD_VAR 0 2
5325: ARRAY
5326: PPUSH
5327: LD_VAR 0 3
5331: PUSH
5332: LD_INT 1
5334: ARRAY
5335: PPUSH
5336: LD_VAR 0 3
5340: PUSH
5341: LD_INT 2
5343: ARRAY
5344: PPUSH
5345: CALL_OW 174
// end ;
5349: GO 5287
5351: POP
5352: POP
// end ;
5353: GO 4971
5355: POP
5356: POP
// until not russianPatrol or russianAlert ;
5357: LD_EXP 47
5361: NOT
5362: PUSH
5363: LD_EXP 9
5367: OR
5368: IFFALSE 4949
// if russianPatrol then
5370: LD_EXP 47
5374: IFFALSE 5391
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5376: LD_EXP 47
5380: PPUSH
5381: LD_INT 161
5383: PPUSH
5384: LD_INT 107
5386: PPUSH
5387: CALL_OW 114
// end ;
5391: PPOPN 4
5393: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5394: LD_EXP 6
5398: PUSH
5399: LD_EXP 13
5403: NOT
5404: AND
5405: IFFALSE 5891
5407: GO 5409
5409: DISABLE
5410: LD_INT 0
5412: PPUSH
5413: PPUSH
5414: PPUSH
5415: PPUSH
5416: PPUSH
// begin enable ;
5417: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5418: LD_ADDR_VAR 0 2
5422: PUSH
5423: LD_EXP 48
5427: PPUSH
5428: LD_INT 21
5430: PUSH
5431: LD_INT 2
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PPUSH
5438: CALL_OW 72
5442: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5443: LD_ADDR_VAR 0 4
5447: PUSH
5448: LD_INT 22
5450: PUSH
5451: LD_INT 4
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PPUSH
5458: CALL_OW 69
5462: ST_TO_ADDR
// for i in filter do
5463: LD_ADDR_VAR 0 1
5467: PUSH
5468: LD_VAR 0 2
5472: PUSH
5473: FOR_IN
5474: IFFALSE 5889
// begin tmp := IsDrivenBy ( i ) ;
5476: LD_ADDR_VAR 0 3
5480: PUSH
5481: LD_VAR 0 1
5485: PPUSH
5486: CALL_OW 311
5490: ST_TO_ADDR
// if not tmp then
5491: LD_VAR 0 3
5495: NOT
5496: IFFALSE 5500
// continue ;
5498: GO 5473
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5500: LD_VAR 0 1
5504: PPUSH
5505: CALL_OW 261
5509: PUSH
5510: LD_INT 90
5512: GREATER
5513: PUSH
5514: LD_VAR 0 1
5518: PPUSH
5519: CALL_OW 110
5523: PUSH
5524: LD_INT 2
5526: EQUAL
5527: AND
5528: IFFALSE 5544
// SetTag ( i , 0 ) else
5530: LD_VAR 0 1
5534: PPUSH
5535: LD_INT 0
5537: PPUSH
5538: CALL_OW 109
5542: GO 5640
// if GetTag ( i ) = 2 then
5544: LD_VAR 0 1
5548: PPUSH
5549: CALL_OW 110
5553: PUSH
5554: LD_INT 2
5556: EQUAL
5557: IFFALSE 5640
// begin x := rand ( 1 , 2 ) ;
5559: LD_ADDR_VAR 0 5
5563: PUSH
5564: LD_INT 1
5566: PPUSH
5567: LD_INT 2
5569: PPUSH
5570: CALL_OW 12
5574: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5575: LD_VAR 0 1
5579: PPUSH
5580: LD_EXP 49
5584: PUSH
5585: LD_VAR 0 5
5589: ARRAY
5590: PPUSH
5591: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
5595: LD_EXP 49
5599: PUSH
5600: LD_VAR 0 5
5604: ARRAY
5605: PPUSH
5606: LD_INT 2
5608: PPUSH
5609: CALL_OW 289
5613: PUSH
5614: LD_INT 20
5616: LESS
5617: IFFALSE 5640
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
5619: LD_EXP 49
5623: PUSH
5624: LD_VAR 0 5
5628: ARRAY
5629: PPUSH
5630: LD_INT 2
5632: PPUSH
5633: LD_INT 100
5635: PPUSH
5636: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5640: LD_VAR 0 1
5644: PPUSH
5645: CALL_OW 256
5649: PUSH
5650: LD_INT 600
5652: GREATEREQUAL
5653: PUSH
5654: LD_VAR 0 1
5658: PPUSH
5659: CALL_OW 110
5663: NOT
5664: AND
5665: IFFALSE 5691
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5667: LD_VAR 0 1
5671: PPUSH
5672: LD_VAR 0 4
5676: PPUSH
5677: LD_VAR 0 1
5681: PPUSH
5682: CALL_OW 74
5686: PPUSH
5687: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5691: LD_VAR 0 1
5695: PPUSH
5696: CALL_OW 256
5700: PUSH
5701: LD_INT 600
5703: LESS
5704: PUSH
5705: LD_VAR 0 1
5709: PPUSH
5710: CALL_OW 110
5714: NOT
5715: AND
5716: IFFALSE 5745
// begin SetTag ( i , 1 ) ;
5718: LD_VAR 0 1
5722: PPUSH
5723: LD_INT 1
5725: PPUSH
5726: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5730: LD_VAR 0 1
5734: PPUSH
5735: LD_INT 62
5737: PPUSH
5738: LD_INT 22
5740: PPUSH
5741: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5745: LD_VAR 0 1
5749: PPUSH
5750: CALL_OW 110
5754: PUSH
5755: LD_INT 1
5757: EQUAL
5758: PUSH
5759: LD_VAR 0 1
5763: PPUSH
5764: LD_INT 62
5766: PPUSH
5767: LD_INT 22
5769: PPUSH
5770: CALL_OW 297
5774: PUSH
5775: LD_INT 6
5777: LESS
5778: AND
5779: PUSH
5780: LD_VAR 0 3
5784: AND
5785: IFFALSE 5887
// begin ComExitVehicle ( tmp ) ;
5787: LD_VAR 0 3
5791: PPUSH
5792: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
5796: LD_VAR 0 3
5800: PPUSH
5801: LD_VAR 0 1
5805: PPUSH
5806: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5810: LD_INT 35
5812: PPUSH
5813: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5817: LD_VAR 0 1
5821: PPUSH
5822: CALL_OW 256
5826: PUSH
5827: LD_INT 1000
5829: EQUAL
5830: IFFALSE 5810
// ComEnterUnit ( tmp , i ) ;
5832: LD_VAR 0 3
5836: PPUSH
5837: LD_VAR 0 1
5841: PPUSH
5842: CALL_OW 120
// if GetFuel ( i ) <= 90 then
5846: LD_VAR 0 1
5850: PPUSH
5851: CALL_OW 261
5855: PUSH
5856: LD_INT 90
5858: LESSEQUAL
5859: IFFALSE 5875
// SetTag ( i , 2 ) else
5861: LD_VAR 0 1
5865: PPUSH
5866: LD_INT 2
5868: PPUSH
5869: CALL_OW 109
5873: GO 5887
// SetTag ( i , 0 ) ;
5875: LD_VAR 0 1
5879: PPUSH
5880: LD_INT 0
5882: PPUSH
5883: CALL_OW 109
// end ; end ;
5887: GO 5473
5889: POP
5890: POP
// end ;
5891: PPOPN 5
5893: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
5894: LD_EXP 20
5898: IFFALSE 6121
5900: GO 5902
5902: DISABLE
5903: LD_INT 0
5905: PPUSH
5906: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
5907: LD_EXP 49
5911: PPUSH
5912: LD_INT 79
5914: PPUSH
5915: LD_INT 155
5917: PPUSH
5918: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
5922: LD_EXP 49
5926: PPUSH
5927: LD_INT 16
5929: PPUSH
5930: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5934: LD_ADDR_VAR 0 2
5938: PUSH
5939: LD_EXP 48
5943: PPUSH
5944: LD_INT 50
5946: PUSH
5947: EMPTY
5948: LIST
5949: PPUSH
5950: CALL_OW 72
5954: ST_TO_ADDR
// for i in tmp do
5955: LD_ADDR_VAR 0 1
5959: PUSH
5960: LD_VAR 0 2
5964: PUSH
5965: FOR_IN
5966: IFFALSE 6000
// begin ComAgressiveMove ( i , 123 , 60 ) ;
5968: LD_VAR 0 1
5972: PPUSH
5973: LD_INT 123
5975: PPUSH
5976: LD_INT 60
5978: PPUSH
5979: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
5983: LD_VAR 0 1
5987: PPUSH
5988: LD_INT 153
5990: PPUSH
5991: LD_INT 103
5993: PPUSH
5994: CALL_OW 174
// end ;
5998: GO 5965
6000: POP
6001: POP
// repeat wait ( 0 0$1 ) ;
6002: LD_INT 35
6004: PPUSH
6005: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6009: LD_ADDR_VAR 0 2
6013: PUSH
6014: LD_EXP 48
6018: PPUSH
6019: LD_INT 50
6021: PUSH
6022: EMPTY
6023: LIST
6024: PPUSH
6025: CALL_OW 72
6029: ST_TO_ADDR
// for i in tmp do
6030: LD_ADDR_VAR 0 1
6034: PUSH
6035: LD_VAR 0 2
6039: PUSH
6040: FOR_IN
6041: IFFALSE 6112
// if not HasTask ( i ) then
6043: LD_VAR 0 1
6047: PPUSH
6048: CALL_OW 314
6052: NOT
6053: IFFALSE 6110
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
6055: LD_VAR 0 1
6059: PPUSH
6060: LD_INT 81
6062: PUSH
6063: LD_INT 3
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: PUSH
6070: LD_INT 3
6072: PUSH
6073: LD_INT 21
6075: PUSH
6076: LD_INT 3
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: PPUSH
6091: CALL_OW 69
6095: PPUSH
6096: LD_VAR 0 1
6100: PPUSH
6101: CALL_OW 74
6105: PPUSH
6106: CALL_OW 115
6110: GO 6040
6112: POP
6113: POP
6114: LD_VAR 0 2
6118: NOT
6119: IFFALSE 6002
// end ;
6121: PPOPN 2
6123: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6124: LD_INT 22
6126: PUSH
6127: LD_INT 3
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: PUSH
6134: LD_INT 32
6136: PUSH
6137: LD_INT 1
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PPUSH
6148: CALL_OW 69
6152: IFFALSE 6231
6154: GO 6156
6156: DISABLE
6157: LD_INT 0
6159: PPUSH
// begin enable ;
6160: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6161: LD_ADDR_VAR 0 1
6165: PUSH
6166: LD_INT 22
6168: PUSH
6169: LD_INT 3
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 32
6178: PUSH
6179: LD_INT 1
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PPUSH
6190: CALL_OW 69
6194: PUSH
6195: FOR_IN
6196: IFFALSE 6229
// if GetFuel ( i ) < 1 then
6198: LD_VAR 0 1
6202: PPUSH
6203: CALL_OW 261
6207: PUSH
6208: LD_INT 1
6210: LESS
6211: IFFALSE 6227
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6213: LD_VAR 0 1
6217: PPUSH
6218: CALL_OW 311
6222: PPUSH
6223: CALL_OW 121
6227: GO 6195
6229: POP
6230: POP
// end ; end_of_file
6231: PPOPN 1
6233: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6234: LD_INT 0
6236: PPUSH
6237: PPUSH
6238: PPUSH
// SetBName ( omikron , omikron ) ;
6239: LD_INT 64
6241: PPUSH
6242: LD_STRING omikron
6244: PPUSH
6245: CALL_OW 500
// uc_side := 4 ;
6249: LD_ADDR_OWVAR 20
6253: PUSH
6254: LD_INT 4
6256: ST_TO_ADDR
// uc_nation := 1 ;
6257: LD_ADDR_OWVAR 21
6261: PUSH
6262: LD_INT 1
6264: ST_TO_ADDR
// omicronSquad := [ ] ;
6265: LD_ADDR_EXP 51
6269: PUSH
6270: EMPTY
6271: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6272: LD_ADDR_VAR 0 2
6276: PUSH
6277: LD_INT 22
6279: PUSH
6280: LD_INT 4
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 2
6289: PUSH
6290: LD_INT 30
6292: PUSH
6293: LD_INT 32
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: PUSH
6300: LD_INT 30
6302: PUSH
6303: LD_INT 31
6305: PUSH
6306: EMPTY
6307: LIST
6308: LIST
6309: PUSH
6310: EMPTY
6311: LIST
6312: LIST
6313: LIST
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: PPUSH
6319: CALL_OW 69
6323: PUSH
6324: FOR_IN
6325: IFFALSE 6382
// begin PrepareHuman ( false , 1 , 1 ) ;
6327: LD_INT 0
6329: PPUSH
6330: LD_INT 1
6332: PPUSH
6333: LD_INT 1
6335: PPUSH
6336: CALL_OW 380
// un := CreateHuman ;
6340: LD_ADDR_VAR 0 3
6344: PUSH
6345: CALL_OW 44
6349: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6350: LD_ADDR_EXP 51
6354: PUSH
6355: LD_EXP 51
6359: PUSH
6360: LD_VAR 0 3
6364: UNION
6365: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6366: LD_VAR 0 3
6370: PPUSH
6371: LD_VAR 0 2
6375: PPUSH
6376: CALL_OW 52
// end ;
6380: GO 6324
6382: POP
6383: POP
// for i := 1 to 3 do
6384: LD_ADDR_VAR 0 2
6388: PUSH
6389: DOUBLE
6390: LD_INT 1
6392: DEC
6393: ST_TO_ADDR
6394: LD_INT 3
6396: PUSH
6397: FOR_TO
6398: IFFALSE 6453
// begin PrepareHuman ( false , 2 , 2 ) ;
6400: LD_INT 0
6402: PPUSH
6403: LD_INT 2
6405: PPUSH
6406: LD_INT 2
6408: PPUSH
6409: CALL_OW 380
// un := CreateHuman ;
6413: LD_ADDR_VAR 0 3
6417: PUSH
6418: CALL_OW 44
6422: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6423: LD_ADDR_EXP 51
6427: PUSH
6428: LD_EXP 51
6432: PUSH
6433: LD_VAR 0 3
6437: UNION
6438: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6439: LD_VAR 0 3
6443: PPUSH
6444: LD_INT 64
6446: PPUSH
6447: CALL_OW 52
// end ;
6451: GO 6397
6453: POP
6454: POP
// for i := 1 to 2 do
6455: LD_ADDR_VAR 0 2
6459: PUSH
6460: DOUBLE
6461: LD_INT 1
6463: DEC
6464: ST_TO_ADDR
6465: LD_INT 2
6467: PUSH
6468: FOR_TO
6469: IFFALSE 6608
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6471: LD_INT 4
6473: PPUSH
6474: LD_INT 1
6476: PPUSH
6477: LD_INT 2
6479: PPUSH
6480: LD_INT 2
6482: PPUSH
6483: LD_INT 1
6485: PPUSH
6486: LD_INT 3
6488: PPUSH
6489: LD_INT 100
6491: PPUSH
6492: CALL 370 0 7
// un := CreateVehicle ;
6496: LD_ADDR_VAR 0 3
6500: PUSH
6501: CALL_OW 45
6505: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6506: LD_ADDR_EXP 51
6510: PUSH
6511: LD_EXP 51
6515: PUSH
6516: LD_VAR 0 3
6520: UNION
6521: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
6522: LD_VAR 0 3
6526: PPUSH
6527: LD_INT 28
6529: PPUSH
6530: LD_INT 37
6532: PPUSH
6533: LD_INT 6
6535: PPUSH
6536: LD_INT 0
6538: PPUSH
6539: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
6543: LD_INT 0
6545: PPUSH
6546: LD_INT 3
6548: PPUSH
6549: LD_INT 2
6551: PPUSH
6552: CALL_OW 380
// un := CreateHuman ;
6556: LD_ADDR_VAR 0 3
6560: PUSH
6561: CALL_OW 44
6565: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6566: LD_ADDR_EXP 51
6570: PUSH
6571: LD_EXP 51
6575: PUSH
6576: LD_VAR 0 3
6580: UNION
6581: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
6582: LD_VAR 0 3
6586: PPUSH
6587: LD_EXP 51
6591: PUSH
6592: LD_EXP 51
6596: PUSH
6597: LD_INT 1
6599: MINUS
6600: ARRAY
6601: PPUSH
6602: CALL_OW 52
// end ;
6606: GO 6468
6608: POP
6609: POP
// end ;
6610: LD_VAR 0 1
6614: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
6615: LD_INT 0
6617: PPUSH
6618: PPUSH
6619: PPUSH
6620: PPUSH
// uc_side := 4 ;
6621: LD_ADDR_OWVAR 20
6625: PUSH
6626: LD_INT 4
6628: ST_TO_ADDR
// uc_nation := 1 ;
6629: LD_ADDR_OWVAR 21
6633: PUSH
6634: LD_INT 1
6636: ST_TO_ADDR
// tmp := [ ] ;
6637: LD_ADDR_VAR 0 4
6641: PUSH
6642: EMPTY
6643: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
6644: LD_INT 4
6646: PPUSH
6647: LD_INT 1
6649: PPUSH
6650: LD_INT 2
6652: PPUSH
6653: LD_INT 1
6655: PPUSH
6656: LD_INT 1
6658: PPUSH
6659: LD_INT 4
6661: PPUSH
6662: LD_INT 77
6664: PPUSH
6665: CALL 370 0 7
// un := CreateVehicle ;
6669: LD_ADDR_VAR 0 3
6673: PUSH
6674: CALL_OW 45
6678: ST_TO_ADDR
// tmp := tmp union un ;
6679: LD_ADDR_VAR 0 4
6683: PUSH
6684: LD_VAR 0 4
6688: PUSH
6689: LD_VAR 0 3
6693: UNION
6694: ST_TO_ADDR
// SetDir ( un , 2 ) ;
6695: LD_VAR 0 3
6699: PPUSH
6700: LD_INT 2
6702: PPUSH
6703: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
6707: LD_VAR 0 3
6711: PPUSH
6712: LD_INT 106
6714: PPUSH
6715: LD_INT 3
6717: PPUSH
6718: LD_INT 0
6720: PPUSH
6721: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
6725: LD_INT 0
6727: PPUSH
6728: LD_INT 3
6730: PPUSH
6731: LD_INT 2
6733: PPUSH
6734: CALL_OW 380
// un := CreateHuman ;
6738: LD_ADDR_VAR 0 3
6742: PUSH
6743: CALL_OW 44
6747: ST_TO_ADDR
// tmp := tmp union un ;
6748: LD_ADDR_VAR 0 4
6752: PUSH
6753: LD_VAR 0 4
6757: PUSH
6758: LD_VAR 0 3
6762: UNION
6763: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
6764: LD_VAR 0 3
6768: PPUSH
6769: LD_VAR 0 4
6773: PUSH
6774: LD_VAR 0 4
6778: PUSH
6779: LD_INT 1
6781: MINUS
6782: ARRAY
6783: PPUSH
6784: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
6788: LD_VAR 0 3
6792: PPUSH
6793: LD_INT 109
6795: PPUSH
6796: LD_INT 9
6798: PPUSH
6799: CALL_OW 111
// wait ( 0 0$1 ) ;
6803: LD_INT 35
6805: PPUSH
6806: CALL_OW 67
// for i := 1 to 2 do
6810: LD_ADDR_VAR 0 2
6814: PUSH
6815: DOUBLE
6816: LD_INT 1
6818: DEC
6819: ST_TO_ADDR
6820: LD_INT 2
6822: PUSH
6823: FOR_TO
6824: IFFALSE 6888
// begin PrepareHuman ( false , 1 , 2 ) ;
6826: LD_INT 0
6828: PPUSH
6829: LD_INT 1
6831: PPUSH
6832: LD_INT 2
6834: PPUSH
6835: CALL_OW 380
// un := CreateHuman ;
6839: LD_ADDR_VAR 0 3
6843: PUSH
6844: CALL_OW 44
6848: ST_TO_ADDR
// tmp := tmp union un ;
6849: LD_ADDR_VAR 0 4
6853: PUSH
6854: LD_VAR 0 4
6858: PUSH
6859: LD_VAR 0 3
6863: UNION
6864: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
6865: LD_VAR 0 3
6869: PPUSH
6870: LD_INT 105
6872: PPUSH
6873: LD_INT 2
6875: PPUSH
6876: LD_INT 2
6878: PPUSH
6879: LD_INT 0
6881: PPUSH
6882: CALL_OW 50
// end ;
6886: GO 6823
6888: POP
6889: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
6890: LD_VAR 0 4
6894: PPUSH
6895: LD_INT 26
6897: PPUSH
6898: LD_INT 35
6900: PPUSH
6901: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
6905: LD_INT 35
6907: PPUSH
6908: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
6912: LD_VAR 0 4
6916: PPUSH
6917: LD_INT 50
6919: PUSH
6920: EMPTY
6921: LIST
6922: PPUSH
6923: CALL_OW 72
6927: NOT
6928: IFFALSE 6932
// exit ;
6930: GO 7059
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
6932: LD_VAR 0 4
6936: PPUSH
6937: LD_INT 91
6939: PUSH
6940: LD_INT 64
6942: PUSH
6943: LD_INT 12
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: LIST
6950: PPUSH
6951: CALL_OW 72
6955: PUSH
6956: LD_VAR 0 4
6960: EQUAL
6961: IFFALSE 6905
// omicronSquad := omicronSquad union tmp ;
6963: LD_ADDR_EXP 51
6967: PUSH
6968: LD_EXP 51
6972: PUSH
6973: LD_VAR 0 4
6977: UNION
6978: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
6979: LD_ADDR_VAR 0 2
6983: PUSH
6984: LD_VAR 0 4
6988: PPUSH
6989: LD_INT 25
6991: PUSH
6992: LD_INT 1
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: PPUSH
6999: CALL_OW 72
7003: PUSH
7004: FOR_IN
7005: IFFALSE 7057
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7007: LD_VAR 0 2
7011: PPUSH
7012: LD_INT 22
7014: PUSH
7015: LD_INT 4
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PUSH
7022: LD_INT 30
7024: PUSH
7025: LD_INT 4
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PPUSH
7036: CALL_OW 69
7040: PPUSH
7041: LD_VAR 0 2
7045: PPUSH
7046: CALL_OW 74
7050: PPUSH
7051: CALL_OW 120
7055: GO 7004
7057: POP
7058: POP
// end ;
7059: LD_VAR 0 1
7063: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7064: LD_EXP 13
7068: NOT
7069: IFFALSE 7640
7071: GO 7073
7073: DISABLE
7074: LD_INT 0
7076: PPUSH
7077: PPUSH
7078: PPUSH
7079: PPUSH
// begin enable ;
7080: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7081: LD_ADDR_VAR 0 2
7085: PUSH
7086: LD_INT 22
7088: PUSH
7089: LD_INT 4
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PUSH
7096: LD_INT 21
7098: PUSH
7099: LD_INT 3
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: PUSH
7106: LD_INT 3
7108: PUSH
7109: LD_INT 24
7111: PUSH
7112: LD_INT 1000
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: LIST
7127: PPUSH
7128: CALL_OW 69
7132: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7133: LD_ADDR_VAR 0 3
7137: PUSH
7138: LD_EXP 51
7142: PPUSH
7143: LD_INT 25
7145: PUSH
7146: LD_INT 2
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PPUSH
7153: CALL_OW 72
7157: ST_TO_ADDR
// if filter and tmp then
7158: LD_VAR 0 2
7162: PUSH
7163: LD_VAR 0 3
7167: AND
7168: IFFALSE 7241
// begin for i in tmp do
7170: LD_ADDR_VAR 0 1
7174: PUSH
7175: LD_VAR 0 3
7179: PUSH
7180: FOR_IN
7181: IFFALSE 7237
// if IsInUnit ( i ) then
7183: LD_VAR 0 1
7187: PPUSH
7188: CALL_OW 310
7192: IFFALSE 7205
// ComExitBuilding ( i ) else
7194: LD_VAR 0 1
7198: PPUSH
7199: CALL_OW 122
7203: GO 7235
// if not HasTask ( i ) then
7205: LD_VAR 0 1
7209: PPUSH
7210: CALL_OW 314
7214: NOT
7215: IFFALSE 7235
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7217: LD_VAR 0 1
7221: PPUSH
7222: LD_VAR 0 2
7226: PUSH
7227: LD_INT 1
7229: ARRAY
7230: PPUSH
7231: CALL_OW 130
7235: GO 7180
7237: POP
7238: POP
// end else
7239: GO 7312
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7241: LD_VAR 0 3
7245: PPUSH
7246: LD_INT 3
7248: PUSH
7249: LD_INT 54
7251: PUSH
7252: EMPTY
7253: LIST
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: PPUSH
7259: CALL_OW 72
7263: IFFALSE 7312
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7265: LD_ADDR_VAR 0 1
7269: PUSH
7270: LD_VAR 0 3
7274: PPUSH
7275: LD_INT 3
7277: PUSH
7278: LD_INT 54
7280: PUSH
7281: EMPTY
7282: LIST
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PPUSH
7288: CALL_OW 72
7292: PUSH
7293: FOR_IN
7294: IFFALSE 7310
// ComEnterUnit ( i , omikron ) ;
7296: LD_VAR 0 1
7300: PPUSH
7301: LD_INT 64
7303: PPUSH
7304: CALL_OW 120
7308: GO 7293
7310: POP
7311: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7312: LD_ADDR_VAR 0 2
7316: PUSH
7317: LD_EXP 51
7321: PPUSH
7322: LD_INT 21
7324: PUSH
7325: LD_INT 2
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PPUSH
7332: CALL_OW 72
7336: ST_TO_ADDR
// if not filter then
7337: LD_VAR 0 2
7341: NOT
7342: IFFALSE 7346
// exit ;
7344: GO 7640
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7346: LD_ADDR_VAR 0 4
7350: PUSH
7351: LD_INT 13
7353: PPUSH
7354: LD_INT 81
7356: PUSH
7357: LD_INT 4
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: PPUSH
7364: CALL_OW 70
7368: ST_TO_ADDR
// if enemy then
7369: LD_VAR 0 4
7373: IFFALSE 7640
// begin for i in filter do
7375: LD_ADDR_VAR 0 1
7379: PUSH
7380: LD_VAR 0 2
7384: PUSH
7385: FOR_IN
7386: IFFALSE 7638
// begin tmp := IsDrivenBy ( i ) ;
7388: LD_ADDR_VAR 0 3
7392: PUSH
7393: LD_VAR 0 1
7397: PPUSH
7398: CALL_OW 311
7402: ST_TO_ADDR
// if not tmp then
7403: LD_VAR 0 3
7407: NOT
7408: IFFALSE 7412
// continue ;
7410: GO 7385
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7412: LD_VAR 0 1
7416: PPUSH
7417: CALL_OW 256
7421: PUSH
7422: LD_INT 600
7424: GREATEREQUAL
7425: PUSH
7426: LD_VAR 0 1
7430: PPUSH
7431: CALL_OW 110
7435: PUSH
7436: LD_INT 1
7438: NONEQUAL
7439: AND
7440: IFFALSE 7466
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7442: LD_VAR 0 1
7446: PPUSH
7447: LD_VAR 0 4
7451: PPUSH
7452: LD_VAR 0 1
7456: PPUSH
7457: CALL_OW 74
7461: PPUSH
7462: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7466: LD_VAR 0 1
7470: PPUSH
7471: CALL_OW 256
7475: PUSH
7476: LD_INT 600
7478: LESS
7479: PUSH
7480: LD_VAR 0 1
7484: PPUSH
7485: CALL_OW 110
7489: PUSH
7490: LD_INT 1
7492: NONEQUAL
7493: AND
7494: IFFALSE 7523
// begin SetTag ( i , 1 ) ;
7496: LD_VAR 0 1
7500: PPUSH
7501: LD_INT 1
7503: PPUSH
7504: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
7508: LD_VAR 0 1
7512: PPUSH
7513: LD_INT 27
7515: PPUSH
7516: LD_INT 35
7518: PPUSH
7519: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
7523: LD_VAR 0 1
7527: PPUSH
7528: CALL_OW 110
7532: PUSH
7533: LD_INT 1
7535: EQUAL
7536: PUSH
7537: LD_VAR 0 1
7541: PPUSH
7542: LD_INT 27
7544: PPUSH
7545: LD_INT 35
7547: PPUSH
7548: CALL_OW 297
7552: PUSH
7553: LD_INT 6
7555: LESS
7556: AND
7557: PUSH
7558: LD_VAR 0 3
7562: AND
7563: IFFALSE 7636
// begin ComExitVehicle ( tmp ) ;
7565: LD_VAR 0 3
7569: PPUSH
7570: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
7574: LD_VAR 0 3
7578: PPUSH
7579: LD_VAR 0 1
7583: PPUSH
7584: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
7588: LD_INT 35
7590: PPUSH
7591: CALL_OW 67
// until GetLives ( i ) = 1000 ;
7595: LD_VAR 0 1
7599: PPUSH
7600: CALL_OW 256
7604: PUSH
7605: LD_INT 1000
7607: EQUAL
7608: IFFALSE 7588
// ComEnterUnit ( tmp , i ) ;
7610: LD_VAR 0 3
7614: PPUSH
7615: LD_VAR 0 1
7619: PPUSH
7620: CALL_OW 120
// SetTag ( i , 0 ) ;
7624: LD_VAR 0 1
7628: PPUSH
7629: LD_INT 0
7631: PPUSH
7632: CALL_OW 109
// end ; end ;
7636: GO 7385
7638: POP
7639: POP
// end ; end ;
7640: PPOPN 4
7642: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
7643: LD_EXP 13
7647: IFFALSE 7791
7649: GO 7651
7651: DISABLE
7652: LD_INT 0
7654: PPUSH
7655: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
7656: LD_ADDR_VAR 0 2
7660: PUSH
7661: LD_EXP 51
7665: PPUSH
7666: LD_INT 21
7668: PUSH
7669: LD_INT 1
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PUSH
7676: LD_INT 50
7678: PUSH
7679: EMPTY
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PPUSH
7686: CALL_OW 72
7690: ST_TO_ADDR
// if not tmp then
7691: LD_VAR 0 2
7695: NOT
7696: IFFALSE 7700
// exit ;
7698: GO 7791
// repeat wait ( 0 0$1 ) ;
7700: LD_INT 35
7702: PPUSH
7703: CALL_OW 67
// for i in tmp do
7707: LD_ADDR_VAR 0 1
7711: PUSH
7712: LD_VAR 0 2
7716: PUSH
7717: FOR_IN
7718: IFFALSE 7782
// begin ComExit ( i ) ;
7720: LD_VAR 0 1
7724: PPUSH
7725: CALL 73407 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
7729: LD_VAR 0 1
7733: PPUSH
7734: LD_INT 14
7736: PPUSH
7737: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
7741: LD_VAR 0 1
7745: PPUSH
7746: LD_INT 14
7748: PPUSH
7749: CALL_OW 308
7753: IFFALSE 7780
// begin tmp := tmp diff i ;
7755: LD_ADDR_VAR 0 2
7759: PUSH
7760: LD_VAR 0 2
7764: PUSH
7765: LD_VAR 0 1
7769: DIFF
7770: ST_TO_ADDR
// RemoveUnit ( i ) ;
7771: LD_VAR 0 1
7775: PPUSH
7776: CALL_OW 64
// end ; end ;
7780: GO 7717
7782: POP
7783: POP
// until not tmp ;
7784: LD_VAR 0 2
7788: NOT
7789: IFFALSE 7700
// end ; end_of_file
7791: PPOPN 2
7793: END
// export function Action ; var i , un , veh , tmp ; begin
7794: LD_INT 0
7796: PPUSH
7797: PPUSH
7798: PPUSH
7799: PPUSH
7800: PPUSH
// InGameOn ;
7801: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
7805: LD_INT 179
7807: PPUSH
7808: LD_INT 5
7810: PPUSH
7811: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
7815: LD_ADDR_VAR 0 4
7819: PUSH
7820: LD_INT 2
7822: PPUSH
7823: LD_INT 2
7825: PPUSH
7826: LD_INT 12
7828: PPUSH
7829: LD_INT 1
7831: PPUSH
7832: LD_INT 1
7834: PPUSH
7835: LD_INT 24
7837: PPUSH
7838: LD_INT 33
7840: PPUSH
7841: CALL 370 0 7
7845: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
7846: LD_VAR 0 4
7850: PPUSH
7851: LD_INT 2
7853: PPUSH
7854: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
7858: LD_VAR 0 4
7862: PPUSH
7863: LD_INT 178
7865: PPUSH
7866: LD_INT 2
7868: PPUSH
7869: LD_INT 0
7871: PPUSH
7872: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
7876: LD_EXP 25
7880: PPUSH
7881: LD_VAR 0 4
7885: PPUSH
7886: CALL_OW 52
// if Kamil then
7890: LD_EXP 29
7894: IFFALSE 7929
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
7896: LD_EXP 29
7900: PPUSH
7901: LD_INT 207
7903: PPUSH
7904: LD_INT 37
7906: PPUSH
7907: LD_INT 0
7909: PPUSH
7910: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
7914: LD_EXP 29
7918: PPUSH
7919: LD_INT 211
7921: PPUSH
7922: LD_INT 38
7924: PPUSH
7925: CALL_OW 118
// end ; if Sophia then
7929: LD_EXP 31
7933: IFFALSE 7968
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
7935: LD_EXP 31
7939: PPUSH
7940: LD_INT 209
7942: PPUSH
7943: LD_INT 40
7945: PPUSH
7946: LD_INT 0
7948: PPUSH
7949: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
7953: LD_EXP 31
7957: PPUSH
7958: LD_INT 211
7960: PPUSH
7961: LD_INT 38
7963: PPUSH
7964: CALL_OW 118
// end ; if Givi then
7968: LD_EXP 26
7972: IFFALSE 8007
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
7974: LD_EXP 26
7978: PPUSH
7979: LD_INT 201
7981: PPUSH
7982: LD_INT 34
7984: PPUSH
7985: LD_INT 0
7987: PPUSH
7988: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
7992: LD_EXP 26
7996: PPUSH
7997: LD_INT 206
7999: PPUSH
8000: LD_INT 36
8002: PPUSH
8003: CALL_OW 118
// end ; if Ibrahim then
8007: LD_EXP 28
8011: IFFALSE 8046
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8013: LD_EXP 28
8017: PPUSH
8018: LD_INT 202
8020: PPUSH
8021: LD_INT 39
8023: PPUSH
8024: LD_INT 0
8026: PPUSH
8027: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8031: LD_EXP 28
8035: PPUSH
8036: LD_INT 206
8038: PPUSH
8039: LD_INT 36
8041: PPUSH
8042: CALL_OW 118
// end ; if Markov then
8046: LD_EXP 32
8050: IFFALSE 8137
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8052: LD_ADDR_VAR 0 4
8056: PUSH
8057: LD_INT 2
8059: PPUSH
8060: LD_INT 2
8062: PPUSH
8063: LD_INT 13
8065: PPUSH
8066: LD_INT 1
8068: PPUSH
8069: LD_INT 1
8071: PPUSH
8072: LD_INT 25
8074: PPUSH
8075: LD_INT 80
8077: PUSH
8078: LD_INT 20
8080: PUSH
8081: LD_OWVAR 67
8085: MUL
8086: MINUS
8087: PPUSH
8088: CALL 370 0 7
8092: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8093: LD_VAR 0 4
8097: PPUSH
8098: LD_INT 2
8100: PPUSH
8101: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8105: LD_VAR 0 4
8109: PPUSH
8110: LD_INT 197
8112: PPUSH
8113: LD_INT 35
8115: PPUSH
8116: LD_INT 0
8118: PPUSH
8119: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8123: LD_EXP 32
8127: PPUSH
8128: LD_VAR 0 4
8132: PPUSH
8133: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8137: LD_ADDR_VAR 0 5
8141: PUSH
8142: LD_EXP 30
8146: PUSH
8147: LD_EXP 37
8151: UNION
8152: ST_TO_ADDR
// for i in tmp do
8153: LD_ADDR_VAR 0 2
8157: PUSH
8158: LD_VAR 0 5
8162: PUSH
8163: FOR_IN
8164: IFFALSE 8198
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8166: LD_VAR 0 2
8170: PPUSH
8171: LD_INT 203
8173: PPUSH
8174: LD_INT 41
8176: PPUSH
8177: LD_INT 6
8179: PPUSH
8180: LD_INT 0
8182: PPUSH
8183: CALL_OW 50
// ComHold ( i ) ;
8187: LD_VAR 0 2
8191: PPUSH
8192: CALL_OW 140
// end ;
8196: GO 8163
8198: POP
8199: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8200: LD_INT 22
8202: PUSH
8203: LD_INT 2
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: PUSH
8210: LD_INT 25
8212: PUSH
8213: LD_INT 2
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: PPUSH
8224: CALL_OW 69
8228: NOT
8229: IFFALSE 8243
// SetClass ( Heike , 2 ) ;
8231: LD_EXP 25
8235: PPUSH
8236: LD_INT 2
8238: PPUSH
8239: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8243: LD_EXP 25
8247: PPUSH
8248: LD_INT 183
8250: PPUSH
8251: LD_INT 12
8253: PPUSH
8254: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8258: LD_EXP 25
8262: PPUSH
8263: LD_INT 188
8265: PPUSH
8266: LD_INT 20
8268: PPUSH
8269: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8273: LD_EXP 25
8277: PPUSH
8278: LD_INT 191
8280: PPUSH
8281: LD_INT 25
8283: PPUSH
8284: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8288: LD_EXP 25
8292: PPUSH
8293: LD_INT 203
8295: PPUSH
8296: LD_INT 29
8298: PPUSH
8299: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8303: LD_EXP 25
8307: PPUSH
8308: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8312: LD_INT 35
8314: PPUSH
8315: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8319: LD_EXP 25
8323: PPUSH
8324: CALL_OW 310
8328: NOT
8329: IFFALSE 8312
// CenterOnUnits ( Heike ) ;
8331: LD_EXP 25
8335: PPUSH
8336: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8340: LD_ADDR_VAR 0 5
8344: PUSH
8345: LD_INT 22
8347: PUSH
8348: LD_INT 2
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: PUSH
8355: LD_INT 21
8357: PUSH
8358: LD_INT 1
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: PPUSH
8369: CALL_OW 69
8373: PUSH
8374: LD_EXP 25
8378: PUSH
8379: LD_EXP 32
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: DIFF
8388: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8389: LD_VAR 0 5
8393: PPUSH
8394: LD_EXP 25
8398: PPUSH
8399: CALL_OW 119
// if Givi then
8403: LD_EXP 26
8407: IFFALSE 8425
// ComTurnUnit ( Heike , Givi ) else
8409: LD_EXP 25
8413: PPUSH
8414: LD_EXP 26
8418: PPUSH
8419: CALL_OW 119
8423: GO 8443
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8425: LD_EXP 25
8429: PPUSH
8430: LD_VAR 0 5
8434: PUSH
8435: LD_INT 1
8437: ARRAY
8438: PPUSH
8439: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8443: LD_EXP 25
8447: PPUSH
8448: LD_STRING DH-Start-1
8450: PPUSH
8451: CALL_OW 88
// if Givi then
8455: LD_EXP 26
8459: IFFALSE 8506
// begin Say ( Givi , DG-Start-2 ) ;
8461: LD_EXP 26
8465: PPUSH
8466: LD_STRING DG-Start-2
8468: PPUSH
8469: CALL_OW 88
// if not Mike then
8473: LD_EXP 27
8477: NOT
8478: IFFALSE 8504
// begin Say ( Givi , DG-Start-b-3 ) ;
8480: LD_EXP 26
8484: PPUSH
8485: LD_STRING DG-Start-b-3
8487: PPUSH
8488: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
8492: LD_EXP 25
8496: PPUSH
8497: LD_STRING DH-Start-b-4
8499: PPUSH
8500: CALL_OW 88
// end ; end else
8504: GO 8571
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
8506: LD_EXP 37
8510: PPUSH
8511: LD_INT 26
8513: PUSH
8514: LD_INT 1
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: PPUSH
8521: CALL_OW 72
8525: PUSH
8526: LD_INT 1
8528: ARRAY
8529: PPUSH
8530: LD_STRING DArm-Start-a-2
8532: PPUSH
8533: CALL_OW 88
8537: NOT
8538: IFFALSE 8571
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
8540: LD_EXP 37
8544: PPUSH
8545: LD_INT 26
8547: PUSH
8548: LD_INT 2
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: PPUSH
8555: CALL_OW 72
8559: PUSH
8560: LD_INT 1
8562: ARRAY
8563: PPUSH
8564: LD_STRING DArf-Start-a-2
8566: PPUSH
8567: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
8571: LD_EXP 25
8575: PPUSH
8576: LD_INT 211
8578: PPUSH
8579: LD_INT 38
8581: PPUSH
8582: CALL_OW 118
// wait ( 0 0$1 ) ;
8586: LD_INT 35
8588: PPUSH
8589: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
8593: LD_EXP 25
8597: PPUSH
8598: LD_STRING DH-Start-3
8600: PPUSH
8601: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8605: LD_EXP 25
8609: PPUSH
8610: LD_STRING DH-Start-4
8612: PPUSH
8613: CALL_OW 88
// InGameOff ;
8617: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
8621: LD_STRING Prepare
8623: PPUSH
8624: CALL_OW 337
// SaveForQuickRestart ;
8628: CALL_OW 22
// wait ( 0 0$10 ) ;
8632: LD_INT 350
8634: PPUSH
8635: CALL_OW 67
// if not Aviradze then
8639: LD_EXP 35
8643: NOT
8644: IFFALSE 8648
// exit ;
8646: GO 8888
// SetDir ( Aviradze , 4 ) ;
8648: LD_EXP 35
8652: PPUSH
8653: LD_INT 4
8655: PPUSH
8656: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
8660: LD_EXP 35
8664: PPUSH
8665: LD_INT 225
8667: PPUSH
8668: LD_INT 33
8670: PPUSH
8671: LD_INT 0
8673: PPUSH
8674: CALL_OW 48
// for i := 1 to 2 do
8678: LD_ADDR_VAR 0 2
8682: PUSH
8683: DOUBLE
8684: LD_INT 1
8686: DEC
8687: ST_TO_ADDR
8688: LD_INT 2
8690: PUSH
8691: FOR_TO
8692: IFFALSE 8823
// begin uc_side := 2 ;
8694: LD_ADDR_OWVAR 20
8698: PUSH
8699: LD_INT 2
8701: ST_TO_ADDR
// uc_nation := 0 ;
8702: LD_ADDR_OWVAR 21
8706: PUSH
8707: LD_INT 0
8709: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
8710: LD_INT 0
8712: PPUSH
8713: LD_INT 12
8715: PPUSH
8716: LD_INT 1
8718: PPUSH
8719: CALL_OW 380
// hc_gallery :=  ;
8723: LD_ADDR_OWVAR 33
8727: PUSH
8728: LD_STRING 
8730: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
8731: LD_ADDR_OWVAR 26
8735: PUSH
8736: LD_STRING Artudito
8738: PUSH
8739: LD_STRING Textur
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: LD_VAR 0 2
8750: ARRAY
8751: ST_TO_ADDR
// un := CreateHuman ;
8752: LD_ADDR_VAR 0 3
8756: PUSH
8757: CALL_OW 44
8761: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
8762: LD_VAR 0 3
8766: PPUSH
8767: LD_INT 224
8769: PUSH
8770: LD_INT 226
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: PUSH
8777: LD_VAR 0 2
8781: ARRAY
8782: PPUSH
8783: LD_INT 31
8785: PUSH
8786: LD_INT 35
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: LD_VAR 0 2
8797: ARRAY
8798: PPUSH
8799: LD_INT 0
8801: PPUSH
8802: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
8806: LD_VAR 0 3
8810: PPUSH
8811: LD_INT 215
8813: PPUSH
8814: LD_INT 36
8816: PPUSH
8817: CALL_OW 111
// end ;
8821: GO 8691
8823: POP
8824: POP
// hc_name :=  ;
8825: LD_ADDR_OWVAR 26
8829: PUSH
8830: LD_STRING 
8832: ST_TO_ADDR
// InitHc ;
8833: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
8837: LD_EXP 35
8841: PPUSH
8842: LD_INT 215
8844: PPUSH
8845: LD_INT 36
8847: PPUSH
8848: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
8852: LD_EXP 35
8856: PPUSH
8857: LD_STRING DA-Arrive-1
8859: PPUSH
8860: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
8864: LD_EXP 25
8868: PPUSH
8869: LD_STRING DH-Arrive-2
8871: PPUSH
8872: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
8876: LD_EXP 35
8880: PPUSH
8881: LD_STRING DA-Arrive-3
8883: PPUSH
8884: CALL_OW 88
// end ;
8888: LD_VAR 0 1
8892: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
8893: LD_EXP 3
8897: IFFALSE 10305
8899: GO 8901
8901: DISABLE
8902: LD_INT 0
8904: PPUSH
8905: PPUSH
8906: PPUSH
// begin DialogueOn ;
8907: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
8911: LD_EXP 25
8915: PPUSH
8916: LD_STRING DH-base-1
8918: PPUSH
8919: CALL_OW 88
// if Markov then
8923: LD_EXP 32
8927: IFFALSE 8979
// begin Say ( Markov , DMar-base-2 ) ;
8929: LD_EXP 32
8933: PPUSH
8934: LD_STRING DMar-base-2
8936: PPUSH
8937: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
8941: LD_EXP 32
8945: PPUSH
8946: LD_STRING DMar-base-3
8948: PPUSH
8949: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
8953: LD_EXP 25
8957: PPUSH
8958: LD_STRING DH-base-4
8960: PPUSH
8961: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
8965: LD_EXP 32
8969: PPUSH
8970: LD_STRING DMar-base-5
8972: PPUSH
8973: CALL_OW 88
// end else
8977: GO 9056
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
8979: LD_EXP 37
8983: PPUSH
8984: LD_INT 26
8986: PUSH
8987: LD_INT 1
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: PPUSH
8994: CALL_OW 72
8998: PUSH
8999: LD_INT 1
9001: ARRAY
9002: PPUSH
9003: LD_STRING DArm-base-a-2
9005: PPUSH
9006: CALL_OW 88
9010: NOT
9011: IFFALSE 9044
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9013: LD_EXP 37
9017: PPUSH
9018: LD_INT 26
9020: PUSH
9021: LD_INT 2
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: PPUSH
9028: CALL_OW 72
9032: PUSH
9033: LD_INT 1
9035: ARRAY
9036: PPUSH
9037: LD_STRING DArf-base-a-2
9039: PPUSH
9040: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9044: LD_EXP 25
9048: PPUSH
9049: LD_STRING DH-base-a-3
9051: PPUSH
9052: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9056: LD_EXP 35
9060: PPUSH
9061: LD_STRING DA-base-6
9063: PPUSH
9064: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9068: LD_EXP 35
9072: PPUSH
9073: LD_STRING DA-base-7
9075: PPUSH
9076: CALL_OW 88
// DialogueOff ;
9080: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9084: LD_STRING Flamethrower
9086: PPUSH
9087: CALL_OW 337
// wait ( 2 2$00 ) ;
9091: LD_INT 4200
9093: PPUSH
9094: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9098: LD_EXP 34
9102: PUSH
9103: LD_EXP 27
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: PPUSH
9112: LD_INT 203
9114: PPUSH
9115: LD_INT 37
9117: PPUSH
9118: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9122: LD_INT 22
9124: PUSH
9125: LD_INT 2
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: PUSH
9132: LD_INT 92
9134: PUSH
9135: LD_INT 203
9137: PUSH
9138: LD_INT 37
9140: PUSH
9141: LD_INT 10
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: PPUSH
9154: CALL_OW 69
9158: NOT
9159: IFFALSE 9199
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9161: LD_EXP 34
9165: PUSH
9166: LD_EXP 27
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PPUSH
9175: LD_EXP 25
9179: PPUSH
9180: CALL_OW 250
9184: PPUSH
9185: LD_EXP 25
9189: PPUSH
9190: CALL_OW 251
9194: PPUSH
9195: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9199: LD_INT 35
9201: PPUSH
9202: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9206: LD_INT 2
9208: PPUSH
9209: LD_EXP 34
9213: PPUSH
9214: CALL_OW 292
9218: PUSH
9219: LD_EXP 34
9223: PPUSH
9224: LD_EXP 25
9228: PPUSH
9229: CALL_OW 296
9233: PUSH
9234: LD_INT 8
9236: LESS
9237: PUSH
9238: LD_EXP 34
9242: PPUSH
9243: LD_INT 22
9245: PUSH
9246: LD_INT 2
9248: PUSH
9249: EMPTY
9250: LIST
9251: LIST
9252: PUSH
9253: LD_INT 21
9255: PUSH
9256: LD_INT 3
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PPUSH
9267: CALL_OW 69
9271: PPUSH
9272: LD_EXP 34
9276: PPUSH
9277: CALL_OW 74
9281: PPUSH
9282: CALL_OW 296
9286: PUSH
9287: LD_INT 7
9289: LESS
9290: OR
9291: AND
9292: PUSH
9293: LD_EXP 34
9297: PPUSH
9298: LD_INT 10
9300: PPUSH
9301: CALL_OW 308
9305: NOT
9306: AND
9307: IFFALSE 9199
// InGameOn ;
9309: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9313: LD_EXP 34
9317: PPUSH
9318: CALL_OW 87
// if IsInUnit ( Heike ) then
9322: LD_EXP 25
9326: PPUSH
9327: CALL_OW 310
9331: IFFALSE 9342
// ComExitBuilding ( Heike ) ;
9333: LD_EXP 25
9337: PPUSH
9338: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9342: LD_EXP 34
9346: PUSH
9347: LD_EXP 27
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PPUSH
9356: LD_EXP 25
9360: PPUSH
9361: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9365: LD_EXP 25
9369: PPUSH
9370: LD_EXP 34
9374: PPUSH
9375: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9379: LD_INT 22
9381: PUSH
9382: LD_INT 2
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 91
9391: PUSH
9392: LD_EXP 34
9396: PUSH
9397: LD_INT 10
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: LIST
9404: PUSH
9405: LD_INT 21
9407: PUSH
9408: LD_INT 3
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: LIST
9419: PPUSH
9420: CALL_OW 69
9424: IFFALSE 9450
// begin Say ( Kurt , DKs-scout-1 ) ;
9426: LD_EXP 34
9430: PPUSH
9431: LD_STRING DKs-scout-1
9433: PPUSH
9434: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9438: LD_EXP 25
9442: PPUSH
9443: LD_STRING DH-scout-2
9445: PPUSH
9446: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
9450: LD_EXP 25
9454: PPUSH
9455: CALL_OW 85
// if IsInUnit ( Heike ) then
9459: LD_EXP 25
9463: PPUSH
9464: CALL_OW 310
9468: IFFALSE 9479
// ComExit ( Heike ) ;
9470: LD_EXP 25
9474: PPUSH
9475: CALL 73407 0 1
// repeat wait ( 0 0$1 ) ;
9479: LD_INT 35
9481: PPUSH
9482: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
9486: LD_EXP 25
9490: PPUSH
9491: LD_EXP 34
9495: PPUSH
9496: CALL_OW 112
// until GetDistUnits ( Heike , Kurt ) < 6 ;
9500: LD_EXP 25
9504: PPUSH
9505: LD_EXP 34
9509: PPUSH
9510: CALL_OW 296
9514: PUSH
9515: LD_INT 6
9517: LESS
9518: IFFALSE 9479
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
9520: LD_EXP 34
9524: PUSH
9525: LD_EXP 27
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PPUSH
9534: LD_EXP 25
9538: PPUSH
9539: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
9543: LD_EXP 34
9547: PPUSH
9548: LD_STRING DKs-scout-3
9550: PPUSH
9551: CALL_OW 88
// if Kaia and GetDistUnits ( Kaia , Kurt ) < 15 then
9555: LD_EXP 30
9559: PUSH
9560: LD_EXP 30
9564: PPUSH
9565: LD_EXP 34
9569: PPUSH
9570: CALL_OW 296
9574: PUSH
9575: LD_INT 15
9577: LESS
9578: AND
9579: IFFALSE 9769
// begin if IsInUnit ( Kaia ) then
9581: LD_EXP 30
9585: PPUSH
9586: CALL_OW 310
9590: IFFALSE 9601
// ComExitBuilding ( Kaia ) ;
9592: LD_EXP 30
9596: PPUSH
9597: CALL_OW 122
// wait ( 0 0$1 ) ;
9601: LD_INT 35
9603: PPUSH
9604: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
9608: LD_EXP 30
9612: PPUSH
9613: LD_EXP 34
9617: PPUSH
9618: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
9622: LD_INT 35
9624: PPUSH
9625: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
9629: LD_EXP 30
9633: PPUSH
9634: LD_EXP 34
9638: PPUSH
9639: CALL_OW 296
9643: PUSH
9644: LD_INT 6
9646: LESS
9647: IFFALSE 9622
// ComTurnUnit ( Kaia , Kurt ) ;
9649: LD_EXP 30
9653: PPUSH
9654: LD_EXP 34
9658: PPUSH
9659: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
9663: LD_EXP 30
9667: PPUSH
9668: LD_STRING DK-scout-4
9670: PPUSH
9671: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
9675: LD_EXP 34
9679: PPUSH
9680: LD_EXP 30
9684: PPUSH
9685: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
9689: LD_EXP 34
9693: PPUSH
9694: LD_STRING DKs-scout-5
9696: PPUSH
9697: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
9701: LD_EXP 30
9705: PPUSH
9706: LD_STRING DK-scout-6
9708: PPUSH
9709: CALL_OW 88
// if Mike then
9713: LD_EXP 27
9717: IFFALSE 9769
// begin Say ( Mike , DM-scout-7 ) ;
9719: LD_EXP 27
9723: PPUSH
9724: LD_STRING DM-scout-7
9726: PPUSH
9727: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
9731: LD_EXP 30
9735: PPUSH
9736: LD_EXP 27
9740: PPUSH
9741: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
9745: LD_EXP 30
9749: PPUSH
9750: LD_STRING DK-scout-8
9752: PPUSH
9753: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
9757: LD_EXP 27
9761: PPUSH
9762: LD_STRING DM-scout-9
9764: PPUSH
9765: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
9769: LD_INT 184
9771: PPUSH
9772: LD_INT 100
9774: PPUSH
9775: LD_INT 2
9777: PPUSH
9778: LD_INT 12
9780: NEG
9781: PPUSH
9782: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
9786: LD_INT 184
9788: PPUSH
9789: LD_INT 100
9791: PPUSH
9792: LD_INT 2
9794: PPUSH
9795: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
9799: LD_INT 184
9801: PPUSH
9802: LD_INT 100
9804: PPUSH
9805: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
9809: LD_EXP 34
9813: PPUSH
9814: LD_STRING DKs-scout-10
9816: PPUSH
9817: CALL_OW 88
// wait ( 0 0$1 ) ;
9821: LD_INT 35
9823: PPUSH
9824: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
9828: LD_INT 144
9830: PPUSH
9831: LD_INT 65
9833: PPUSH
9834: LD_INT 2
9836: PPUSH
9837: LD_INT 12
9839: NEG
9840: PPUSH
9841: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
9845: LD_INT 144
9847: PPUSH
9848: LD_INT 65
9850: PPUSH
9851: LD_INT 2
9853: PPUSH
9854: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
9858: LD_INT 144
9860: PPUSH
9861: LD_INT 65
9863: PPUSH
9864: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
9868: LD_EXP 34
9872: PPUSH
9873: LD_STRING DKs-scout-11
9875: PPUSH
9876: CALL_OW 88
// wait ( 0 0$1 ) ;
9880: LD_INT 35
9882: PPUSH
9883: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
9887: LD_EXP 34
9891: PPUSH
9892: CALL_OW 87
// if Mike and not Givi then
9896: LD_EXP 27
9900: PUSH
9901: LD_EXP 26
9905: NOT
9906: AND
9907: IFFALSE 9933
// begin Say ( Mike , DM-scout-a-1 ) ;
9909: LD_EXP 27
9913: PPUSH
9914: LD_STRING DM-scout-a-1
9916: PPUSH
9917: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
9921: LD_EXP 25
9925: PPUSH
9926: LD_STRING DH-scout-a-2
9928: PPUSH
9929: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
9933: LD_EXP 34
9937: PUSH
9938: LD_EXP 27
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PPUSH
9947: LD_INT 2
9949: PPUSH
9950: CALL_OW 235
// InGameOff ;
9954: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
9958: LD_STRING Hill
9960: PPUSH
9961: CALL_OW 337
// Hint ( BunkerHill ) ;
9965: LD_STRING BunkerHill
9967: PPUSH
9968: CALL_OW 339
// SetAreaMapShow ( dontGoArea , 1 ) ;
9972: LD_INT 20
9974: PPUSH
9975: LD_INT 1
9977: PPUSH
9978: CALL_OW 424
// allowToPatrol := true ;
9982: LD_ADDR_EXP 12
9986: PUSH
9987: LD_INT 1
9989: ST_TO_ADDR
// wait ( 1 1$30 ) ;
9990: LD_INT 3150
9992: PPUSH
9993: CALL_OW 67
// InitHc ;
9997: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
10001: LD_ADDR_VAR 0 1
10005: PUSH
10006: DOUBLE
10007: LD_INT 1
10009: DEC
10010: ST_TO_ADDR
10011: LD_INT 3
10013: PUSH
10014: LD_INT 3
10016: PUSH
10017: LD_INT 2
10019: PUSH
10020: LD_INT 2
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: PUSH
10029: LD_OWVAR 67
10033: ARRAY
10034: PUSH
10035: FOR_TO
10036: IFFALSE 10303
// begin uc_side := 2 ;
10038: LD_ADDR_OWVAR 20
10042: PUSH
10043: LD_INT 2
10045: ST_TO_ADDR
// uc_nation := 2 ;
10046: LD_ADDR_OWVAR 21
10050: PUSH
10051: LD_INT 2
10053: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 , 2 ] [ Difficulty ] ) ;
10054: LD_INT 0
10056: PPUSH
10057: LD_INT 1
10059: PUSH
10060: LD_INT 3
10062: PUSH
10063: LD_INT 1
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: LIST
10070: PUSH
10071: LD_VAR 0 1
10075: PUSH
10076: LD_INT 3
10078: MOD
10079: PUSH
10080: LD_INT 1
10082: PLUS
10083: ARRAY
10084: PPUSH
10085: LD_INT 3
10087: PUSH
10088: LD_INT 2
10090: PUSH
10091: LD_INT 2
10093: PUSH
10094: LD_INT 2
10096: PUSH
10097: EMPTY
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: PUSH
10103: LD_OWVAR 67
10107: ARRAY
10108: PPUSH
10109: CALL_OW 380
// un := CreateHuman ;
10113: LD_ADDR_VAR 0 2
10117: PUSH
10118: CALL_OW 44
10122: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10123: LD_ADDR_EXP 37
10127: PUSH
10128: LD_EXP 37
10132: PUSH
10133: LD_VAR 0 2
10137: UNION
10138: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10139: LD_INT 2
10141: PPUSH
10142: LD_INT 2
10144: PPUSH
10145: LD_INT 13
10147: PPUSH
10148: LD_INT 2
10150: PUSH
10151: LD_INT 1
10153: PUSH
10154: EMPTY
10155: LIST
10156: LIST
10157: PUSH
10158: LD_VAR 0 1
10162: PUSH
10163: LD_INT 2
10165: MOD
10166: PUSH
10167: LD_INT 1
10169: PLUS
10170: ARRAY
10171: PPUSH
10172: LD_INT 1
10174: PPUSH
10175: LD_INT 27
10177: PUSH
10178: LD_INT 25
10180: PUSH
10181: LD_INT 27
10183: PUSH
10184: LD_INT 23
10186: PUSH
10187: LD_INT 23
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: PUSH
10197: LD_OWVAR 67
10201: PUSH
10202: LD_INT 0
10204: PPUSH
10205: LD_INT 1
10207: PPUSH
10208: CALL_OW 12
10212: PLUS
10213: ARRAY
10214: PPUSH
10215: LD_INT 77
10217: PPUSH
10218: CALL 370 0 7
// veh := CreateVehicle ;
10222: LD_ADDR_VAR 0 3
10226: PUSH
10227: CALL_OW 45
10231: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10232: LD_VAR 0 3
10236: PPUSH
10237: LD_INT 2
10239: PPUSH
10240: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10244: LD_VAR 0 3
10248: PPUSH
10249: LD_INT 178
10251: PPUSH
10252: LD_INT 2
10254: PPUSH
10255: LD_INT 2
10257: PPUSH
10258: LD_INT 0
10260: PPUSH
10261: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10265: LD_VAR 0 2
10269: PPUSH
10270: LD_VAR 0 3
10274: PPUSH
10275: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10279: LD_VAR 0 2
10283: PPUSH
10284: LD_INT 183
10286: PPUSH
10287: LD_INT 11
10289: PPUSH
10290: CALL_OW 111
// wait ( 0 0$2 ) ;
10294: LD_INT 70
10296: PPUSH
10297: CALL_OW 67
// end ;
10301: GO 10035
10303: POP
10304: POP
// end ;
10305: PPOPN 3
10307: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10308: LD_EXP 4
10312: PUSH
10313: LD_EXP 35
10317: PPUSH
10318: CALL_OW 302
10322: AND
10323: IFFALSE 10372
10325: GO 10327
10327: DISABLE
// begin DialogueOn ;
10328: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10332: LD_EXP 35
10336: PPUSH
10337: LD_STRING DA-lab-1
10339: PPUSH
10340: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10344: LD_EXP 35
10348: PPUSH
10349: LD_STRING DA-lab-2
10351: PPUSH
10352: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10356: LD_EXP 25
10360: PPUSH
10361: LD_STRING DH-lab-3
10363: PPUSH
10364: CALL_OW 88
// DialogueOff ;
10368: CALL_OW 7
// end ;
10372: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10373: LD_INT 17
10375: PPUSH
10376: LD_INT 2
10378: PPUSH
10379: CALL_OW 321
10383: PUSH
10384: LD_INT 2
10386: EQUAL
10387: IFFALSE 10519
10389: GO 10391
10391: DISABLE
10392: LD_INT 0
10394: PPUSH
// begin DialogueOn ;
10395: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10399: LD_EXP 35
10403: PPUSH
10404: LD_STRING DA-Cam-1
10406: PPUSH
10407: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10411: LD_EXP 35
10415: PPUSH
10416: LD_STRING DA-Cam-2
10418: PPUSH
10419: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10423: LD_EXP 35
10427: PPUSH
10428: LD_STRING DA-Cam-3
10430: PPUSH
10431: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10435: LD_EXP 25
10439: PPUSH
10440: LD_STRING DH-Cam-4
10442: PPUSH
10443: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
10447: LD_EXP 30
10451: PPUSH
10452: LD_STRING DK-Cam-5
10454: PPUSH
10455: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
10459: LD_EXP 30
10463: PPUSH
10464: LD_STRING DK-Cam-6
10466: PPUSH
10467: CALL_OW 88
// DialogueOff ;
10471: CALL_OW 7
// Query ( Camera ) ;
10475: LD_STRING Camera
10477: PPUSH
10478: CALL_OW 97
// hiddenCameraAllowed := true ;
10482: LD_ADDR_EXP 5
10486: PUSH
10487: LD_INT 1
10489: ST_TO_ADDR
// for i in camAreas do
10490: LD_ADDR_VAR 0 1
10494: PUSH
10495: LD_EXP 8
10499: PUSH
10500: FOR_IN
10501: IFFALSE 10517
// SetAreaMapShow ( i , 1 ) ;
10503: LD_VAR 0 1
10507: PPUSH
10508: LD_INT 1
10510: PPUSH
10511: CALL_OW 424
10515: GO 10500
10517: POP
10518: POP
// end ;
10519: PPOPN 1
10521: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
10522: LD_EXP 8
10526: NOT
10527: PUSH
10528: LD_EXP 5
10532: AND
10533: IFFALSE 10631
10535: GO 10537
10537: DISABLE
10538: LD_INT 0
10540: PPUSH
// begin stop_talking := true ;
10541: LD_ADDR_OWVAR 56
10545: PUSH
10546: LD_INT 1
10548: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
10549: LD_ADDR_VAR 0 1
10553: PUSH
10554: LD_INT 22
10556: PUSH
10557: LD_INT 2
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: PUSH
10564: LD_INT 21
10566: PUSH
10567: LD_INT 1
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: PUSH
10574: LD_INT 23
10576: PUSH
10577: LD_INT 2
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: LIST
10588: PPUSH
10589: CALL_OW 69
10593: PUSH
10594: FOR_IN
10595: IFFALSE 10614
// AddExperience ( i , 2 , 450 ) ;
10597: LD_VAR 0 1
10601: PPUSH
10602: LD_INT 2
10604: PPUSH
10605: LD_INT 450
10607: PPUSH
10608: CALL_OW 492
10612: GO 10594
10614: POP
10615: POP
// stop_talking := false ;
10616: LD_ADDR_OWVAR 56
10620: PUSH
10621: LD_INT 0
10623: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
10624: LD_STRING ACH_CAMERA
10626: PPUSH
10627: CALL_OW 543
// end ;
10631: PPOPN 1
10633: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
10634: LD_EXP 9
10638: PUSH
10639: LD_EXP 11
10643: NOT
10644: AND
10645: IFFALSE 10704
10647: GO 10649
10649: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
10650: LD_EXP 9
10654: PPUSH
10655: CALL_OW 250
10659: PPUSH
10660: LD_EXP 9
10664: PPUSH
10665: CALL_OW 251
10669: PPUSH
10670: LD_INT 2
10672: PPUSH
10673: LD_INT 6
10675: NEG
10676: PPUSH
10677: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
10681: LD_EXP 9
10685: PPUSH
10686: CALL_OW 87
// wait ( 0 0$1 ) ;
10690: LD_INT 35
10692: PPUSH
10693: CALL_OW 67
// YouLost ( Spotted ) ;
10697: LD_STRING Spotted
10699: PPUSH
10700: CALL_OW 104
// end ;
10704: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
10705: LD_INT 3
10707: PUSH
10708: LD_INT 6
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: PPUSH
10715: LD_INT 2
10717: PPUSH
10718: LD_EXP 47
10722: PPUSH
10723: CALL 1034 0 3
10727: IFFALSE 10760
10729: GO 10731
10731: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
10732: LD_ADDR_EXP 9
10736: PUSH
10737: LD_INT 3
10739: PUSH
10740: LD_INT 6
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PPUSH
10747: LD_INT 2
10749: PPUSH
10750: LD_EXP 47
10754: PPUSH
10755: CALL 1034 0 3
10759: ST_TO_ADDR
10760: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
10761: LD_INT 22
10763: PUSH
10764: LD_INT 6
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PUSH
10771: LD_INT 30
10773: PUSH
10774: LD_INT 32
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 3
10783: PUSH
10784: LD_INT 24
10786: PUSH
10787: LD_INT 1000
10789: PUSH
10790: EMPTY
10791: LIST
10792: LIST
10793: PUSH
10794: EMPTY
10795: LIST
10796: LIST
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: LIST
10802: PPUSH
10803: CALL_OW 69
10807: IFFALSE 10868
10809: GO 10811
10811: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
10812: LD_ADDR_EXP 9
10816: PUSH
10817: LD_INT 22
10819: PUSH
10820: LD_INT 6
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: PUSH
10827: LD_INT 30
10829: PUSH
10830: LD_INT 32
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: PUSH
10837: LD_INT 3
10839: PUSH
10840: LD_INT 24
10842: PUSH
10843: LD_INT 1000
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: LIST
10858: PPUSH
10859: CALL_OW 69
10863: PUSH
10864: LD_INT 1
10866: ARRAY
10867: ST_TO_ADDR
10868: END
// every 0 0$1 trigger russianAlert and FilterUnitsInArea ( kirovBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , towers , noncombat ;
10869: LD_EXP 9
10873: PUSH
10874: LD_INT 21
10876: PPUSH
10877: LD_INT 21
10879: PUSH
10880: LD_INT 3
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: PUSH
10887: LD_INT 3
10889: PUSH
10890: LD_INT 24
10892: PUSH
10893: LD_INT 1000
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: PPUSH
10908: CALL_OW 70
10912: AND
10913: IFFALSE 11152
10915: GO 10917
10917: DISABLE
10918: LD_INT 0
10920: PPUSH
10921: PPUSH
10922: PPUSH
10923: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
10924: LD_ADDR_VAR 0 4
10928: PUSH
10929: LD_EXP 42
10933: PUSH
10934: LD_EXP 44
10938: PUSH
10939: LD_EXP 45
10943: UNION
10944: PPUSH
10945: LD_INT 3
10947: PUSH
10948: LD_INT 25
10950: PUSH
10951: LD_INT 1
10953: PUSH
10954: EMPTY
10955: LIST
10956: LIST
10957: PUSH
10958: EMPTY
10959: LIST
10960: LIST
10961: PPUSH
10962: CALL_OW 72
10966: UNION
10967: ST_TO_ADDR
// for i in noncombat do
10968: LD_ADDR_VAR 0 1
10972: PUSH
10973: LD_VAR 0 4
10977: PUSH
10978: FOR_IN
10979: IFFALSE 11075
// begin if IsInUnit ( i ) then
10981: LD_VAR 0 1
10985: PPUSH
10986: CALL_OW 310
10990: IFFALSE 11001
// ComExitBuilding ( i ) ;
10992: LD_VAR 0 1
10996: PPUSH
10997: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
11001: LD_VAR 0 1
11005: PPUSH
11006: LD_INT 114
11008: PPUSH
11009: LD_INT 97
11011: PPUSH
11012: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
11016: LD_VAR 0 1
11020: PPUSH
11021: LD_INT 99
11023: PPUSH
11024: LD_INT 128
11026: PPUSH
11027: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
11031: LD_VAR 0 1
11035: PPUSH
11036: LD_INT 91
11038: PPUSH
11039: LD_INT 145
11041: PPUSH
11042: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
11046: LD_VAR 0 1
11050: PPUSH
11051: LD_INT 82
11053: PPUSH
11054: LD_INT 153
11056: PPUSH
11057: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
11061: LD_VAR 0 1
11065: PPUSH
11066: LD_INT 16
11068: PPUSH
11069: CALL_OW 173
// end ;
11073: GO 10978
11075: POP
11076: POP
// if not allowHeikeAttack then
11077: LD_EXP 11
11081: NOT
11082: IFFALSE 11086
// exit ;
11084: GO 11152
// wait ( 0 0$05 ) ;
11086: LD_INT 175
11088: PPUSH
11089: CALL_OW 67
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11093: LD_EXP 40
11097: PPUSH
11098: LD_STRING D9a-Kur-1
11100: PPUSH
11101: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11105: LD_EXP 43
11109: PPUSH
11110: LD_STRING D9a-Bur-1
11112: PPUSH
11113: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11117: LD_EXP 40
11121: PPUSH
11122: LD_STRING D9a-Kur-2
11124: PPUSH
11125: CALL_OW 94
// omicronFall := true ;
11129: LD_ADDR_EXP 13
11133: PUSH
11134: LD_INT 1
11136: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11137: LD_INT 105
11139: PPUSH
11140: CALL_OW 67
// retreatFromOmicron := true ;
11144: LD_ADDR_EXP 20
11148: PUSH
11149: LD_INT 1
11151: ST_TO_ADDR
// end ;
11152: PPOPN 4
11154: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11155: LD_INT 16
11157: PPUSH
11158: LD_INT 3
11160: PUSH
11161: LD_INT 22
11163: PUSH
11164: LD_INT 2
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: PUSH
11175: LD_INT 23
11177: PUSH
11178: LD_INT 3
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PPUSH
11189: CALL_OW 70
11193: IFFALSE 11276
11195: GO 11197
11197: DISABLE
11198: LD_INT 0
11200: PPUSH
// begin enable ;
11201: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11202: LD_ADDR_VAR 0 1
11206: PUSH
11207: LD_INT 16
11209: PPUSH
11210: LD_INT 3
11212: PUSH
11213: LD_INT 22
11215: PUSH
11216: LD_INT 2
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PUSH
11227: LD_INT 23
11229: PUSH
11230: LD_INT 3
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: PPUSH
11241: CALL_OW 70
11245: PUSH
11246: FOR_IN
11247: IFFALSE 11274
// begin escapeCounter := escapeCounter + 1 ;
11249: LD_ADDR_EXP 19
11253: PUSH
11254: LD_EXP 19
11258: PUSH
11259: LD_INT 1
11261: PLUS
11262: ST_TO_ADDR
// RemoveUnit ( i ) ;
11263: LD_VAR 0 1
11267: PPUSH
11268: CALL_OW 64
// end ;
11272: GO 11246
11274: POP
11275: POP
// end ;
11276: PPOPN 1
11278: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11279: LD_OWVAR 1
11283: PUSH
11284: LD_INT 13650
11286: PUSH
11287: LD_INT 0
11289: PPUSH
11290: LD_INT 3150
11292: PPUSH
11293: CALL_OW 12
11297: PLUS
11298: GREATEREQUAL
11299: IFFALSE 11308
11301: GO 11303
11303: DISABLE
// SmallAmericanReinforcements ;
11304: CALL 6615 0 0
11308: END
// every 0 0$1 trigger tick >= 9 9$15 do
11309: LD_OWVAR 1
11313: PUSH
11314: LD_INT 19425
11316: GREATEREQUAL
11317: IFFALSE 11382
11319: GO 11321
11321: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11322: LD_EXP 48
11326: PPUSH
11327: LD_INT 21
11329: PUSH
11330: LD_INT 2
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: PPUSH
11337: CALL_OW 72
11341: PPUSH
11342: LD_INT 62
11344: PPUSH
11345: LD_INT 22
11347: PPUSH
11348: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11352: LD_EXP 49
11356: PPUSH
11357: LD_INT 69
11359: PPUSH
11360: LD_INT 27
11362: PPUSH
11363: CALL_OW 111
// wait ( 1 1$00 ) ;
11367: LD_INT 2100
11369: PPUSH
11370: CALL_OW 67
// startAttackOnOmicron := true ;
11374: LD_ADDR_EXP 6
11378: PUSH
11379: LD_INT 1
11381: ST_TO_ADDR
// end ;
11382: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11383: LD_EXP 22
11387: PUSH
11388: LD_INT 0
11390: EQUAL
11391: IFFALSE 13408
11393: GO 11395
11395: DISABLE
11396: LD_INT 0
11398: PPUSH
11399: PPUSH
11400: PPUSH
11401: PPUSH
11402: PPUSH
11403: PPUSH
11404: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11405: LD_INT 5
11407: PPUSH
11408: LD_INT 2
11410: PPUSH
11411: CALL_OW 343
// PrepareOmarForces ;
11415: CALL 1604 0 0
// wait ( 0 0$03 ) ;
11419: LD_INT 105
11421: PPUSH
11422: CALL_OW 67
// allowHeikeAttack := true ;
11426: LD_ADDR_EXP 11
11430: PUSH
11431: LD_INT 1
11433: ST_TO_ADDR
// activeGrishkoAI := false ;
11434: LD_ADDR_EXP 10
11438: PUSH
11439: LD_INT 0
11441: ST_TO_ADDR
// SetAreaMapShow ( dontGoArea , 0 ) ;
11442: LD_INT 20
11444: PPUSH
11445: LD_INT 0
11447: PPUSH
11448: CALL_OW 424
// if not hillBase then
11452: LD_EXP 15
11456: NOT
11457: IFFALSE 11466
// ChangeMissionObjectives ( HillDone ) ;
11459: LD_STRING HillDone
11461: PPUSH
11462: CALL_OW 337
// CenterOnUnits ( Omar ) ;
11466: LD_EXP 33
11470: PPUSH
11471: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
11475: LD_ADDR_VAR 0 1
11479: PUSH
11480: LD_INT 22
11482: PUSH
11483: LD_INT 2
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PUSH
11490: LD_INT 21
11492: PUSH
11493: LD_INT 1
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: PPUSH
11504: CALL_OW 69
11508: PUSH
11509: FOR_IN
11510: IFFALSE 11534
// if HasTask ( i ) then
11512: LD_VAR 0 1
11516: PPUSH
11517: CALL_OW 314
11521: IFFALSE 11532
// ComHold ( i ) ;
11523: LD_VAR 0 1
11527: PPUSH
11528: CALL_OW 140
11532: GO 11509
11534: POP
11535: POP
// DialogueOn ;
11536: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
11540: LD_EXP 33
11544: PPUSH
11545: LD_STRING DO-assault-1
11547: PPUSH
11548: CALL_OW 94
// DialogueOff ;
11552: CALL_OW 7
// game_speed := 4 ;
11556: LD_ADDR_OWVAR 65
11560: PUSH
11561: LD_INT 4
11563: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
11564: LD_ADDR_VAR 0 1
11568: PUSH
11569: LD_EXP 46
11573: PPUSH
11574: LD_INT 3
11576: PUSH
11577: LD_INT 54
11579: PUSH
11580: EMPTY
11581: LIST
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PPUSH
11587: CALL_OW 72
11591: PUSH
11592: FOR_IN
11593: IFFALSE 11612
// ComMoveXY ( i , 226 , 114 ) ;
11595: LD_VAR 0 1
11599: PPUSH
11600: LD_INT 226
11602: PPUSH
11603: LD_INT 114
11605: PPUSH
11606: CALL_OW 111
11610: GO 11592
11612: POP
11613: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
11614: LD_EXP 41
11618: PPUSH
11619: LD_INT 22
11621: PUSH
11622: LD_INT 6
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PUSH
11629: LD_INT 30
11631: PUSH
11632: LD_INT 4
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: PPUSH
11643: CALL_OW 69
11647: PPUSH
11648: LD_EXP 41
11652: PPUSH
11653: CALL_OW 74
11657: PPUSH
11658: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
11662: LD_STRING Attack
11664: PPUSH
11665: CALL_OW 337
// music_class := music_combat ;
11669: LD_ADDR_OWVAR 72
11673: PUSH
11674: LD_INT 1
11676: ST_TO_ADDR
// music_nat := 4 ;
11677: LD_ADDR_OWVAR 71
11681: PUSH
11682: LD_INT 4
11684: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
11685: LD_INT 5
11687: PPUSH
11688: LD_EXP 41
11692: PPUSH
11693: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
11697: LD_INT 6
11699: PPUSH
11700: LD_EXP 38
11704: PPUSH
11705: LD_INT 25
11707: PUSH
11708: LD_INT 1
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: PPUSH
11715: CALL_OW 72
11719: PUSH
11720: LD_INT 4
11722: ARRAY
11723: PPUSH
11724: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
11728: LD_ADDR_VAR 0 1
11732: PUSH
11733: LD_EXP 38
11737: PPUSH
11738: LD_INT 3
11740: PUSH
11741: LD_INT 25
11743: PUSH
11744: LD_INT 4
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: PPUSH
11755: CALL_OW 72
11759: PUSH
11760: FOR_IN
11761: IFFALSE 11780
// ComAgressiveMove ( i , 221 , 110 ) ;
11763: LD_VAR 0 1
11767: PPUSH
11768: LD_INT 221
11770: PPUSH
11771: LD_INT 110
11773: PPUSH
11774: CALL_OW 114
11778: GO 11760
11780: POP
11781: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
11782: LD_EXP 38
11786: PPUSH
11787: LD_INT 25
11789: PUSH
11790: LD_INT 4
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PPUSH
11797: CALL_OW 72
11801: PPUSH
11802: LD_INT 214
11804: PPUSH
11805: LD_INT 124
11807: PPUSH
11808: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
11812: LD_EXP 38
11816: PPUSH
11817: LD_INT 25
11819: PUSH
11820: LD_INT 1
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: PPUSH
11827: CALL_OW 72
11831: PUSH
11832: LD_INT 4
11834: ARRAY
11835: PPUSH
11836: LD_INT 214
11838: PPUSH
11839: LD_INT 114
11841: PPUSH
11842: LD_INT 0
11844: PPUSH
11845: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
11849: LD_EXP 41
11853: PPUSH
11854: LD_STRING D9-Gri-1
11856: PPUSH
11857: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
11861: LD_EXP 40
11865: PPUSH
11866: LD_STRING D9-Kur-1
11868: PPUSH
11869: CALL_OW 94
// wait ( 0 0$1 ) ;
11873: LD_INT 35
11875: PPUSH
11876: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
11880: LD_EXP 33
11884: PPUSH
11885: LD_INT 233
11887: PPUSH
11888: LD_INT 130
11890: PPUSH
11891: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
11895: LD_EXP 41
11899: PPUSH
11900: LD_STRING D9-Gri-2
11902: PPUSH
11903: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
11907: LD_EXP 40
11911: PPUSH
11912: LD_STRING D9-Kur-2
11914: PPUSH
11915: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
11919: LD_EXP 41
11923: PPUSH
11924: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
11928: LD_EXP 41
11932: PPUSH
11933: LD_INT 211
11935: PPUSH
11936: LD_INT 104
11938: PPUSH
11939: CALL_OW 171
// AddComHold ( Grishko ) ;
11943: LD_EXP 41
11947: PPUSH
11948: CALL_OW 200
// repeat wait ( 3 ) ;
11952: LD_INT 3
11954: PPUSH
11955: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
11959: LD_EXP 41
11963: PPUSH
11964: CALL_OW 310
11968: NOT
11969: IFFALSE 11952
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
11971: LD_EXP 38
11975: PPUSH
11976: LD_INT 34
11978: PUSH
11979: LD_INT 26
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: PPUSH
11986: CALL_OW 72
11990: PPUSH
11991: LD_EXP 41
11995: PPUSH
11996: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12000: LD_EXP 38
12004: PPUSH
12005: LD_INT 34
12007: PUSH
12008: LD_INT 26
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: PPUSH
12015: CALL_OW 72
12019: PPUSH
12020: LD_INT 215
12022: PPUSH
12023: LD_INT 106
12025: PPUSH
12026: CALL_OW 174
// repeat wait ( 3 ) ;
12030: LD_INT 3
12032: PPUSH
12033: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12037: LD_EXP 41
12041: PPUSH
12042: CALL_OW 256
12046: PUSH
12047: LD_INT 1000
12049: LESS
12050: IFFALSE 12030
// NormalAttack ( 5 , Grishko ) ;
12052: LD_INT 5
12054: PPUSH
12055: LD_EXP 41
12059: PPUSH
12060: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12064: LD_INT 6
12066: PPUSH
12067: LD_EXP 38
12071: PPUSH
12072: LD_INT 25
12074: PUSH
12075: LD_INT 1
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PPUSH
12082: CALL_OW 72
12086: PUSH
12087: LD_INT 4
12089: ARRAY
12090: PPUSH
12091: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
12095: LD_EXP 41
12099: PPUSH
12100: LD_STRING D9-Gri-3
12102: PPUSH
12103: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12107: LD_EXP 40
12111: PPUSH
12112: LD_STRING D9-Kur-3
12114: PPUSH
12115: CALL_OW 94
// music_class := music_auto ;
12119: LD_ADDR_OWVAR 72
12123: PUSH
12124: LD_INT 0
12126: ST_TO_ADDR
// music_nat := music_auto ;
12127: LD_ADDR_OWVAR 71
12131: PUSH
12132: LD_INT 0
12134: ST_TO_ADDR
// for i in omarSquad do
12135: LD_ADDR_VAR 0 1
12139: PUSH
12140: LD_EXP 38
12144: PUSH
12145: FOR_IN
12146: IFFALSE 12288
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12148: LD_VAR 0 1
12152: PPUSH
12153: CALL_OW 247
12157: PUSH
12158: LD_INT 2
12160: EQUAL
12161: PUSH
12162: LD_VAR 0 1
12166: PPUSH
12167: CALL_OW 256
12171: PUSH
12172: LD_INT 1000
12174: LESS
12175: AND
12176: IFFALSE 12242
// begin driver := IsDrivenBy ( i ) ;
12178: LD_ADDR_VAR 0 2
12182: PUSH
12183: LD_VAR 0 1
12187: PPUSH
12188: CALL_OW 311
12192: ST_TO_ADDR
// veh := i ;
12193: LD_ADDR_VAR 0 3
12197: PUSH
12198: LD_VAR 0 1
12202: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12203: LD_VAR 0 2
12207: PPUSH
12208: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12212: LD_VAR 0 2
12216: PPUSH
12217: LD_VAR 0 3
12221: PPUSH
12222: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12226: LD_VAR 0 2
12230: PPUSH
12231: LD_VAR 0 3
12235: PPUSH
12236: CALL_OW 180
// end else
12240: GO 12286
// if GetLives ( i ) < 500 then
12242: LD_VAR 0 1
12246: PPUSH
12247: CALL_OW 256
12251: PUSH
12252: LD_INT 500
12254: LESS
12255: IFFALSE 12286
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12257: LD_EXP 38
12261: PPUSH
12262: LD_INT 25
12264: PUSH
12265: LD_INT 4
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PPUSH
12272: CALL_OW 72
12276: PPUSH
12277: LD_VAR 0 1
12281: PPUSH
12282: CALL_OW 188
// end ; end ;
12286: GO 12145
12288: POP
12289: POP
// repeat wait ( 0 0$1 ) ;
12290: LD_INT 35
12292: PPUSH
12293: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12297: LD_EXP 38
12301: PPUSH
12302: LD_INT 3
12304: PUSH
12305: LD_INT 24
12307: PUSH
12308: LD_INT 1000
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: PUSH
12319: LD_INT 21
12321: PUSH
12322: LD_INT 2
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PPUSH
12333: CALL_OW 72
12337: NOT
12338: PUSH
12339: LD_EXP 38
12343: PPUSH
12344: LD_INT 3
12346: PUSH
12347: LD_INT 24
12349: PUSH
12350: LD_INT 250
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PPUSH
12361: CALL_OW 72
12365: NOT
12366: AND
12367: IFFALSE 12290
// wait ( 0 0$2 ) ;
12369: LD_INT 70
12371: PPUSH
12372: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12376: LD_ADDR_VAR 0 5
12380: PUSH
12381: LD_EXP 38
12385: PPUSH
12386: LD_INT 58
12388: PUSH
12389: EMPTY
12390: LIST
12391: PUSH
12392: LD_INT 21
12394: PUSH
12395: LD_INT 2
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: PPUSH
12406: CALL_OW 72
12410: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
12411: LD_ADDR_VAR 0 6
12415: PUSH
12416: LD_EXP 38
12420: PPUSH
12421: LD_INT 25
12423: PUSH
12424: LD_INT 3
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: PUSH
12431: LD_INT 3
12433: PUSH
12434: LD_INT 55
12436: PUSH
12437: EMPTY
12438: LIST
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PUSH
12444: EMPTY
12445: LIST
12446: LIST
12447: PPUSH
12448: CALL_OW 72
12452: ST_TO_ADDR
// for i := 1 to tmp do
12453: LD_ADDR_VAR 0 1
12457: PUSH
12458: DOUBLE
12459: LD_INT 1
12461: DEC
12462: ST_TO_ADDR
12463: LD_VAR 0 5
12467: PUSH
12468: FOR_TO
12469: IFFALSE 12499
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
12471: LD_VAR 0 6
12475: PUSH
12476: LD_VAR 0 1
12480: ARRAY
12481: PPUSH
12482: LD_VAR 0 5
12486: PUSH
12487: LD_VAR 0 1
12491: ARRAY
12492: PPUSH
12493: CALL_OW 120
12497: GO 12468
12499: POP
12500: POP
// wait ( 0 0$5 ) ;
12501: LD_INT 175
12503: PPUSH
12504: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
12508: LD_EXP 38
12512: PPUSH
12513: LD_INT 199
12515: PPUSH
12516: LD_INT 141
12518: PPUSH
12519: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
12523: LD_EXP 33
12527: PPUSH
12528: LD_INT 190
12530: PPUSH
12531: LD_INT 143
12533: PPUSH
12534: CALL_OW 114
// AddComHold ( Omar ) ;
12538: LD_EXP 33
12542: PPUSH
12543: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
12547: LD_EXP 38
12551: PPUSH
12552: LD_INT 2
12554: PUSH
12555: LD_INT 25
12557: PUSH
12558: LD_INT 1
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: PUSH
12565: LD_INT 25
12567: PUSH
12568: LD_INT 4
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: LIST
12579: PPUSH
12580: CALL_OW 72
12584: PPUSH
12585: LD_INT 161
12587: PPUSH
12588: LD_INT 130
12590: PPUSH
12591: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
12595: LD_EXP 38
12599: PPUSH
12600: LD_INT 25
12602: PUSH
12603: LD_INT 1
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: PPUSH
12610: CALL_OW 72
12614: PPUSH
12615: LD_INT 163
12617: PPUSH
12618: LD_INT 122
12620: PPUSH
12621: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
12625: LD_EXP 38
12629: PPUSH
12630: LD_INT 25
12632: PUSH
12633: LD_INT 1
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PPUSH
12640: CALL_OW 72
12644: PUSH
12645: LD_INT 4
12647: ARRAY
12648: PPUSH
12649: LD_INT 165
12651: PPUSH
12652: LD_INT 118
12654: PPUSH
12655: LD_INT 0
12657: PPUSH
12658: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
12662: LD_EXP 38
12666: PPUSH
12667: LD_INT 25
12669: PUSH
12670: LD_INT 1
12672: PUSH
12673: EMPTY
12674: LIST
12675: LIST
12676: PPUSH
12677: CALL_OW 72
12681: PUSH
12682: LD_INT 4
12684: ARRAY
12685: PPUSH
12686: LD_INT 159
12688: PPUSH
12689: LD_INT 116
12691: PPUSH
12692: LD_INT 0
12694: PPUSH
12695: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
12699: LD_EXP 38
12703: PPUSH
12704: LD_INT 21
12706: PUSH
12707: LD_INT 2
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PPUSH
12714: CALL_OW 72
12718: PPUSH
12719: LD_INT 169
12721: PPUSH
12722: LD_INT 114
12724: PPUSH
12725: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
12729: LD_INT 35
12731: PPUSH
12732: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
12736: LD_ADDR_VAR 0 5
12740: PUSH
12741: LD_EXP 38
12745: PPUSH
12746: LD_INT 25
12748: PUSH
12749: LD_INT 1
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: PPUSH
12756: CALL_OW 72
12760: ST_TO_ADDR
// for i in tmp do
12761: LD_ADDR_VAR 0 1
12765: PUSH
12766: LD_VAR 0 5
12770: PUSH
12771: FOR_IN
12772: IFFALSE 12869
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
12774: LD_VAR 0 1
12778: PPUSH
12779: CALL_OW 256
12783: PUSH
12784: LD_INT 600
12786: LESS
12787: PUSH
12788: LD_VAR 0 1
12792: PPUSH
12793: LD_INT 161
12795: PPUSH
12796: LD_INT 130
12798: PPUSH
12799: CALL_OW 297
12803: PUSH
12804: LD_INT 6
12806: GREATER
12807: AND
12808: IFFALSE 12825
// ComMoveXY ( i , 161 , 130 ) ;
12810: LD_VAR 0 1
12814: PPUSH
12815: LD_INT 161
12817: PPUSH
12818: LD_INT 130
12820: PPUSH
12821: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
12825: LD_VAR 0 1
12829: PPUSH
12830: CALL_OW 256
12834: PUSH
12835: LD_INT 1000
12837: EQUAL
12838: PUSH
12839: LD_VAR 0 1
12843: PPUSH
12844: CALL_OW 314
12848: NOT
12849: AND
12850: IFFALSE 12867
// ComAgressiveMove ( i , 160 , 109 ) ;
12852: LD_VAR 0 1
12856: PPUSH
12857: LD_INT 160
12859: PPUSH
12860: LD_INT 109
12862: PPUSH
12863: CALL_OW 114
// end ;
12867: GO 12771
12869: POP
12870: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
12871: LD_ADDR_VAR 0 5
12875: PUSH
12876: LD_EXP 38
12880: PPUSH
12881: LD_INT 21
12883: PUSH
12884: LD_INT 2
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PPUSH
12891: CALL_OW 72
12895: ST_TO_ADDR
// for i in tmp do
12896: LD_ADDR_VAR 0 1
12900: PUSH
12901: LD_VAR 0 5
12905: PUSH
12906: FOR_IN
12907: IFFALSE 13173
// begin tmp2 := IsDrivenBy ( i ) ;
12909: LD_ADDR_VAR 0 6
12913: PUSH
12914: LD_VAR 0 1
12918: PPUSH
12919: CALL_OW 311
12923: ST_TO_ADDR
// if not tmp2 then
12924: LD_VAR 0 6
12928: NOT
12929: IFFALSE 12933
// continue ;
12931: GO 12906
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
12933: LD_VAR 0 1
12937: PPUSH
12938: CALL_OW 256
12942: PUSH
12943: LD_INT 600
12945: GREATEREQUAL
12946: PUSH
12947: LD_VAR 0 1
12951: PPUSH
12952: CALL_OW 110
12956: PUSH
12957: LD_INT 1
12959: EQUAL
12960: AND
12961: IFFALSE 12975
// SetTag ( i , 0 ) ;
12963: LD_VAR 0 1
12967: PPUSH
12968: LD_INT 0
12970: PPUSH
12971: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
12975: LD_VAR 0 1
12979: PPUSH
12980: CALL_OW 256
12984: PUSH
12985: LD_INT 600
12987: GREATEREQUAL
12988: PUSH
12989: LD_VAR 0 1
12993: PPUSH
12994: CALL_OW 110
12998: NOT
12999: AND
13000: IFFALSE 13026
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13002: LD_VAR 0 1
13006: PPUSH
13007: LD_VAR 0 7
13011: PPUSH
13012: LD_VAR 0 1
13016: PPUSH
13017: CALL_OW 74
13021: PPUSH
13022: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13026: LD_VAR 0 1
13030: PPUSH
13031: CALL_OW 256
13035: PUSH
13036: LD_INT 600
13038: LESS
13039: PUSH
13040: LD_VAR 0 1
13044: PPUSH
13045: CALL_OW 110
13049: NOT
13050: AND
13051: IFFALSE 13080
// begin SetTag ( i , 1 ) ;
13053: LD_VAR 0 1
13057: PPUSH
13058: LD_INT 1
13060: PPUSH
13061: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13065: LD_VAR 0 1
13069: PPUSH
13070: LD_INT 202
13072: PPUSH
13073: LD_INT 150
13075: PPUSH
13076: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13080: LD_VAR 0 1
13084: PPUSH
13085: CALL_OW 110
13089: PUSH
13090: LD_INT 1
13092: EQUAL
13093: PUSH
13094: LD_VAR 0 1
13098: PPUSH
13099: LD_INT 202
13101: PPUSH
13102: LD_INT 150
13104: PPUSH
13105: CALL_OW 297
13109: PUSH
13110: LD_INT 6
13112: LESS
13113: AND
13114: PUSH
13115: LD_VAR 0 6
13119: AND
13120: IFFALSE 13171
// begin ComExitVehicle ( tmp2 ) ;
13122: LD_VAR 0 6
13126: PPUSH
13127: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13131: LD_VAR 0 6
13135: PPUSH
13136: LD_VAR 0 1
13140: PPUSH
13141: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13145: LD_VAR 0 6
13149: PPUSH
13150: LD_INT 700
13152: PPUSH
13153: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13157: LD_VAR 0 6
13161: PPUSH
13162: LD_VAR 0 1
13166: PPUSH
13167: CALL_OW 180
// end ; end ;
13171: GO 12906
13173: POP
13174: POP
// until kirovDestroyed ;
13175: LD_EXP 16
13179: IFFALSE 12729
// repeat wait ( 0 0$1 ) ;
13181: LD_INT 35
13183: PPUSH
13184: CALL_OW 67
// for i in omarSquad union Omar do
13188: LD_ADDR_VAR 0 1
13192: PUSH
13193: LD_EXP 38
13197: PUSH
13198: LD_EXP 33
13202: UNION
13203: PUSH
13204: FOR_IN
13205: IFFALSE 13375
// if IsInArea ( i , southRoadArea ) then
13207: LD_VAR 0 1
13211: PPUSH
13212: LD_INT 15
13214: PPUSH
13215: CALL_OW 308
13219: IFFALSE 13232
// RemoveUnit ( i ) else
13221: LD_VAR 0 1
13225: PPUSH
13226: CALL_OW 64
13230: GO 13373
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
13232: LD_VAR 0 1
13236: PPUSH
13237: CALL_OW 257
13241: PUSH
13242: LD_INT 3
13244: EQUAL
13245: PUSH
13246: LD_VAR 0 1
13250: PPUSH
13251: CALL_OW 310
13255: NOT
13256: AND
13257: PUSH
13258: LD_INT 22
13260: PUSH
13261: LD_INT 5
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 24
13270: PUSH
13271: LD_INT 251
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PUSH
13278: LD_INT 21
13280: PUSH
13281: LD_INT 2
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PUSH
13288: LD_INT 58
13290: PUSH
13291: EMPTY
13292: LIST
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: PPUSH
13300: CALL_OW 69
13304: AND
13305: IFFALSE 13358
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
13307: LD_VAR 0 1
13311: PPUSH
13312: LD_INT 22
13314: PUSH
13315: LD_INT 5
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PUSH
13322: LD_INT 21
13324: PUSH
13325: LD_INT 2
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: PUSH
13332: LD_INT 58
13334: PUSH
13335: EMPTY
13336: LIST
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: LIST
13342: PPUSH
13343: CALL_OW 69
13347: PUSH
13348: LD_INT 1
13350: ARRAY
13351: PPUSH
13352: CALL_OW 120
13356: GO 13373
// ComMoveXY ( i , 208 , 162 ) ;
13358: LD_VAR 0 1
13362: PPUSH
13363: LD_INT 208
13365: PPUSH
13366: LD_INT 162
13368: PPUSH
13369: CALL_OW 111
// end ;
13373: GO 13204
13375: POP
13376: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
13377: LD_INT 22
13379: PUSH
13380: LD_INT 5
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: PUSH
13387: LD_INT 21
13389: PUSH
13390: LD_INT 1
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: PPUSH
13401: CALL_OW 69
13405: NOT
13406: IFFALSE 13181
// end ;
13408: PPOPN 7
13410: END
// every 0 0$1 trigger IsDead ( kirov ) do
13411: LD_INT 71
13413: PPUSH
13414: CALL_OW 301
13418: IFFALSE 13435
13420: GO 13422
13422: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
13423: LD_EXP 25
13427: PPUSH
13428: LD_STRING DH-1-Kirov
13430: PPUSH
13431: CALL_OW 88
13435: END
// every 0 0$1 trigger See ( 2 , beria ) do
13436: LD_INT 2
13438: PPUSH
13439: LD_INT 106
13441: PPUSH
13442: CALL_OW 292
13446: IFFALSE 13463
13448: GO 13450
13450: DISABLE
// Say ( Heike , DH-1-Beria ) ;
13451: LD_EXP 25
13455: PPUSH
13456: LD_STRING DH-1-Beria
13458: PPUSH
13459: CALL_OW 88
13463: END
// every 0 0$1 trigger See ( 2 , kagan ) do
13464: LD_INT 2
13466: PPUSH
13467: LD_INT 112
13469: PPUSH
13470: CALL_OW 292
13474: IFFALSE 13741
13476: GO 13478
13478: DISABLE
// begin DialogueOn ;
13479: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
13483: LD_INT 112
13485: PPUSH
13486: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
13490: LD_EXP 25
13494: PPUSH
13495: LD_STRING DH-1-Kagan
13497: PPUSH
13498: CALL_OW 88
// if Kamil then
13502: LD_EXP 29
13506: IFFALSE 13544
// begin Say ( Kamil , DKam-Kagan-2 ) ;
13508: LD_EXP 29
13512: PPUSH
13513: LD_STRING DKam-Kagan-2
13515: PPUSH
13516: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
13520: LD_EXP 26
13524: PPUSH
13525: LD_STRING DG-Kagan-3
13527: PPUSH
13528: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
13532: LD_EXP 26
13536: PPUSH
13537: LD_STRING DG-Kagan-4
13539: PPUSH
13540: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
13544: LD_STRING KaganBase
13546: PPUSH
13547: CALL_OW 97
13551: PUSH
13552: LD_INT 1
13554: DOUBLE
13555: EQUAL
13556: IFTRUE 13560
13558: GO 13655
13560: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
13561: LD_EXP 25
13565: PPUSH
13566: LD_STRING DH-Kagan-5
13568: PPUSH
13569: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
13573: LD_EXP 25
13577: PPUSH
13578: LD_STRING DH-Kagan-6
13580: PPUSH
13581: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
13585: LD_EXP 36
13589: PPUSH
13590: LD_STRING DShar-Kagan-7
13592: PPUSH
13593: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
13597: LD_EXP 25
13601: PPUSH
13602: LD_STRING DH-Kagan-8
13604: PPUSH
13605: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
13609: LD_EXP 25
13613: PPUSH
13614: LD_STRING DH-Kagan-9
13616: PPUSH
13617: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
13621: LD_EXP 36
13625: PPUSH
13626: LD_STRING DShar-Kagan-10
13628: PPUSH
13629: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
13633: LD_EXP 25
13637: PPUSH
13638: LD_STRING DH-Kagan-11
13640: PPUSH
13641: CALL_OW 88
// kaganCaptured := true ;
13645: LD_ADDR_EXP 24
13649: PUSH
13650: LD_INT 1
13652: ST_TO_ADDR
// end ; 2 :
13653: GO 13737
13655: LD_INT 2
13657: DOUBLE
13658: EQUAL
13659: IFTRUE 13663
13661: GO 13736
13663: POP
// begin if FilterAllUnits ( [ f_side , 8 ] ) and Aviradze then
13664: LD_INT 22
13666: PUSH
13667: LD_INT 8
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: PPUSH
13674: CALL_OW 69
13678: PUSH
13679: LD_EXP 35
13683: AND
13684: IFFALSE 13698
// Say ( Heike , DH-Kagan-a-5 ) ;
13686: LD_EXP 25
13690: PPUSH
13691: LD_STRING DH-Kagan-a-5
13693: PPUSH
13694: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
13698: LD_EXP 25
13702: PPUSH
13703: LD_STRING DH-Kagan-a-6
13705: PPUSH
13706: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
13710: LD_EXP 25
13714: PPUSH
13715: LD_STRING DH-Kagan-a-7
13717: PPUSH
13718: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
13722: LD_EXP 26
13726: PPUSH
13727: LD_STRING DG-Kagan-a-8
13729: PPUSH
13730: CALL_OW 88
// end ; end ;
13734: GO 13737
13736: POP
// DialogueOff ;
13737: CALL_OW 7
// end ;
13741: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
13742: LD_EXP 18
13746: PUSH
13747: LD_INT 112
13749: PPUSH
13750: CALL_OW 255
13754: PUSH
13755: LD_INT 2
13757: EQUAL
13758: OR
13759: IFFALSE 13771
13761: GO 13763
13763: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
13764: LD_STRING KaganDone
13766: PPUSH
13767: CALL_OW 337
13771: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
13772: LD_EXP 6
13776: PUSH
13777: LD_EXP 48
13781: PPUSH
13782: LD_INT 95
13784: PUSH
13785: LD_INT 19
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: PPUSH
13792: CALL_OW 72
13796: AND
13797: IFFALSE 13874
13799: GO 13801
13801: DISABLE
// begin DialogueOn ;
13802: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
13806: LD_INT 63
13808: PPUSH
13809: LD_INT 32
13811: PPUSH
13812: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
13816: LD_INT 63
13818: PPUSH
13819: LD_INT 32
13821: PPUSH
13822: LD_INT 2
13824: PPUSH
13825: LD_INT 12
13827: NEG
13828: PPUSH
13829: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
13833: LD_EXP 25
13837: PPUSH
13838: LD_STRING DH-Omicron-1
13840: PPUSH
13841: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
13845: LD_EXP 27
13849: PPUSH
13850: LD_STRING DM-Omicron-2
13852: PPUSH
13853: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
13857: LD_INT 63
13859: PPUSH
13860: LD_INT 32
13862: PPUSH
13863: LD_INT 2
13865: PPUSH
13866: CALL_OW 331
// DialogueOff ;
13870: CALL_OW 7
// end ;
13874: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
13875: LD_INT 2
13877: PPUSH
13878: LD_EXP 50
13882: PPUSH
13883: CALL_OW 292
13887: PUSH
13888: LD_EXP 50
13892: PPUSH
13893: CALL_OW 255
13897: PUSH
13898: LD_INT 2
13900: EQUAL
13901: OR
13902: PUSH
13903: LD_INT 106
13905: PPUSH
13906: CALL_OW 255
13910: PUSH
13911: LD_INT 2
13913: EQUAL
13914: OR
13915: PUSH
13916: LD_EXP 50
13920: PPUSH
13921: CALL_OW 302
13925: AND
13926: PUSH
13927: LD_EXP 25
13931: PPUSH
13932: CALL_OW 302
13936: AND
13937: PUSH
13938: LD_EXP 35
13942: PPUSH
13943: CALL_OW 302
13947: AND
13948: IFFALSE 14669
13950: GO 13952
13952: DISABLE
13953: LD_INT 0
13955: PPUSH
13956: PPUSH
13957: PPUSH
13958: PPUSH
13959: PPUSH
// begin DialogueOn ;
13960: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
13964: LD_INT 111
13966: PPUSH
13967: LD_INT 90
13969: PPUSH
13970: LD_INT 2
13972: PPUSH
13973: LD_INT 6
13975: NEG
13976: PPUSH
13977: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
13981: LD_INT 111
13983: PPUSH
13984: LD_INT 90
13986: PPUSH
13987: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
13991: LD_EXP 35
13995: PPUSH
13996: LD_STRING DA-Cap-1
13998: PPUSH
13999: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
14003: LD_EXP 25
14007: PPUSH
14008: LD_STRING DH-Cap-2
14010: PPUSH
14011: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
14015: LD_INT 111
14017: PPUSH
14018: LD_INT 90
14020: PPUSH
14021: LD_INT 2
14023: PPUSH
14024: CALL_OW 331
// DialogueOff ;
14028: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
14032: LD_INT 35
14034: PPUSH
14035: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 110 , 95 , 12 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_distxy , 110 , 95 , 12 ] ] ) ;
14039: LD_EXP 17
14043: PUSH
14044: LD_INT 106
14046: PPUSH
14047: CALL_OW 255
14051: PUSH
14052: LD_INT 2
14054: EQUAL
14055: OR
14056: PUSH
14057: LD_EXP 50
14061: PPUSH
14062: CALL_OW 255
14066: PUSH
14067: LD_INT 2
14069: EQUAL
14070: OR
14071: PUSH
14072: LD_EXP 50
14076: PPUSH
14077: CALL_OW 302
14081: AND
14082: PUSH
14083: LD_EXP 35
14087: PPUSH
14088: CALL_OW 302
14092: AND
14093: PUSH
14094: LD_INT 2
14096: PPUSH
14097: CALL_OW 463
14101: NOT
14102: AND
14103: PUSH
14104: LD_INT 22
14106: PUSH
14107: LD_INT 3
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: PUSH
14114: LD_INT 21
14116: PUSH
14117: LD_INT 1
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PUSH
14124: LD_INT 92
14126: PUSH
14127: LD_INT 110
14129: PUSH
14130: LD_INT 95
14132: PUSH
14133: LD_INT 12
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: LIST
14146: PPUSH
14147: CALL_OW 69
14151: NOT
14152: AND
14153: PUSH
14154: LD_INT 22
14156: PUSH
14157: LD_INT 3
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PUSH
14164: LD_INT 30
14166: PUSH
14167: LD_INT 5
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: PUSH
14174: LD_INT 92
14176: PUSH
14177: LD_INT 110
14179: PUSH
14180: LD_INT 95
14182: PUSH
14183: LD_INT 12
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: LIST
14196: PPUSH
14197: CALL_OW 69
14201: NOT
14202: AND
14203: IFFALSE 14032
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14205: LD_ADDR_VAR 0 2
14209: PUSH
14210: LD_EXP 37
14214: PUSH
14215: LD_EXP 28
14219: PUSH
14220: LD_EXP 29
14224: PUSH
14225: LD_EXP 31
14229: PUSH
14230: LD_EXP 30
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: UNION
14241: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14242: LD_ADDR_VAR 0 2
14246: PUSH
14247: LD_VAR 0 2
14251: PPUSH
14252: LD_INT 50
14254: PUSH
14255: EMPTY
14256: LIST
14257: PPUSH
14258: CALL_OW 72
14262: ST_TO_ADDR
// if tmp < 2 then
14263: LD_VAR 0 2
14267: PUSH
14268: LD_INT 2
14270: LESS
14271: IFFALSE 14283
// q := 2 else
14273: LD_ADDR_VAR 0 4
14277: PUSH
14278: LD_INT 2
14280: ST_TO_ADDR
14281: GO 14296
// q := Query ( LabCap ) ;
14283: LD_ADDR_VAR 0 4
14287: PUSH
14288: LD_STRING LabCap
14290: PPUSH
14291: CALL_OW 97
14295: ST_TO_ADDR
// case q of 1 :
14296: LD_VAR 0 4
14300: PUSH
14301: LD_INT 1
14303: DOUBLE
14304: EQUAL
14305: IFTRUE 14309
14307: GO 14633
14309: POP
// begin DoNotAttack ( 2 , ruLab ) ;
14310: LD_INT 2
14312: PPUSH
14313: LD_EXP 50
14317: PPUSH
14318: CALL_OW 471
// labCaptured := true ;
14322: LD_ADDR_EXP 21
14326: PUSH
14327: LD_INT 1
14329: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
14330: LD_EXP 25
14334: PPUSH
14335: LD_STRING DH-Cap-a-1
14337: PPUSH
14338: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
14342: LD_EXP 35
14346: PPUSH
14347: LD_STRING DA-Cap-a-2
14349: PPUSH
14350: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike ] ^ [ sel_changeable ] ^ tmp ;
14354: LD_ADDR_VAR 0 5
14358: PUSH
14359: LD_EXP 35
14363: PUSH
14364: LD_INT -3
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PUSH
14371: LD_INT -2
14373: PUSH
14374: LD_INT -4
14376: PUSH
14377: LD_EXP 25
14381: PUSH
14382: EMPTY
14383: LIST
14384: LIST
14385: LIST
14386: ADD
14387: PUSH
14388: LD_INT -3
14390: PUSH
14391: EMPTY
14392: LIST
14393: ADD
14394: PUSH
14395: LD_VAR 0 2
14399: ADD
14400: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
14401: LD_ADDR_VAR 0 3
14405: PUSH
14406: LD_STRING Select two characters to go with Aviradze
14408: PPUSH
14409: LD_INT 2
14411: PPUSH
14412: LD_INT 2
14414: PPUSH
14415: LD_VAR 0 5
14419: PPUSH
14420: EMPTY
14421: PPUSH
14422: CALL_OW 42
14426: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
14427: LD_EXP 50
14431: PPUSH
14432: LD_INT 8
14434: PPUSH
14435: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
14439: LD_EXP 35
14443: PPUSH
14444: LD_INT 8
14446: PPUSH
14447: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
14451: LD_ADDR_EXP 39
14455: PUSH
14456: LD_EXP 35
14460: PUSH
14461: EMPTY
14462: LIST
14463: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
14464: LD_EXP 35
14468: PPUSH
14469: CALL_OW 310
14473: IFFALSE 14484
// ComExit ( Aviradze ) ;
14475: LD_EXP 35
14479: PPUSH
14480: CALL 73407 0 1
// wait ( 3 ) ;
14484: LD_INT 3
14486: PPUSH
14487: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
14491: LD_EXP 35
14495: PPUSH
14496: LD_EXP 50
14500: PPUSH
14501: CALL_OW 120
// for i := 1 to 2 do
14505: LD_ADDR_VAR 0 1
14509: PUSH
14510: DOUBLE
14511: LD_INT 1
14513: DEC
14514: ST_TO_ADDR
14515: LD_INT 2
14517: PUSH
14518: FOR_TO
14519: IFFALSE 14622
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
14521: LD_ADDR_EXP 39
14525: PUSH
14526: LD_EXP 39
14530: PUSH
14531: LD_VAR 0 3
14535: PUSH
14536: LD_VAR 0 1
14540: ARRAY
14541: UNION
14542: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
14543: LD_VAR 0 3
14547: PUSH
14548: LD_VAR 0 1
14552: ARRAY
14553: PPUSH
14554: LD_INT 8
14556: PPUSH
14557: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
14561: LD_VAR 0 3
14565: PUSH
14566: LD_VAR 0 1
14570: ARRAY
14571: PPUSH
14572: CALL_OW 310
14576: IFFALSE 14593
// ComExit ( tmp2 [ i ] ) ;
14578: LD_VAR 0 3
14582: PUSH
14583: LD_VAR 0 1
14587: ARRAY
14588: PPUSH
14589: CALL 73407 0 1
// wait ( 3 ) ;
14593: LD_INT 3
14595: PPUSH
14596: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
14600: LD_VAR 0 3
14604: PUSH
14605: LD_VAR 0 1
14609: ARRAY
14610: PPUSH
14611: LD_EXP 50
14615: PPUSH
14616: CALL_OW 120
// end ;
14620: GO 14518
14622: POP
14623: POP
// SetAchievement ( ACH_LAB ) ;
14624: LD_STRING ACH_LAB
14626: PPUSH
14627: CALL_OW 543
// end ; 2 :
14631: GO 14669
14633: LD_INT 2
14635: DOUBLE
14636: EQUAL
14637: IFTRUE 14641
14639: GO 14668
14641: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
14642: LD_EXP 25
14646: PPUSH
14647: LD_STRING DH-Cap-b-1
14649: PPUSH
14650: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
14654: LD_EXP 35
14658: PPUSH
14659: LD_STRING DA-Cap-b-2
14661: PPUSH
14662: CALL_OW 88
// end ; end ;
14666: GO 14669
14668: POP
// end ;
14669: PPOPN 5
14671: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
14672: LD_INT 10
14674: PPUSH
14675: LD_INT 22
14677: PUSH
14678: LD_INT 2
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: PUSH
14685: LD_INT 30
14687: PUSH
14688: LD_INT 31
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: PUSH
14695: EMPTY
14696: LIST
14697: LIST
14698: PPUSH
14699: CALL_OW 70
14703: PUSH
14704: LD_INT 2
14706: GREATEREQUAL
14707: IFFALSE 14719
14709: GO 14711
14711: DISABLE
// SetAchievement ( ACH_KING ) ;
14712: LD_STRING ACH_KING
14714: PPUSH
14715: CALL_OW 543
14719: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
14720: LD_EXP 11
14724: NOT
14725: PUSH
14726: LD_INT 10
14728: PPUSH
14729: LD_INT 22
14731: PUSH
14732: LD_INT 2
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: LD_INT 2
14741: PUSH
14742: LD_INT 30
14744: PUSH
14745: LD_INT 31
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PUSH
14752: LD_INT 30
14754: PUSH
14755: LD_INT 4
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: LIST
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: PPUSH
14771: CALL_OW 70
14775: AND
14776: IFFALSE 14796
14778: GO 14780
14780: DISABLE
// begin hillBase := true ;
14781: LD_ADDR_EXP 15
14785: PUSH
14786: LD_INT 1
14788: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
14789: LD_STRING HillDone
14791: PPUSH
14792: CALL_OW 337
// end ;
14796: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
14797: LD_EXP 30
14801: PUSH
14802: LD_EXP 30
14806: PPUSH
14807: CALL_OW 256
14811: PUSH
14812: LD_INT 3
14814: LESS
14815: AND
14816: IFFALSE 14862
14818: GO 14820
14820: DISABLE
// begin DialogueOn ;
14821: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
14825: LD_EXP 30
14829: PPUSH
14830: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
14834: LD_EXP 30
14838: PPUSH
14839: LD_STRING DK-Kkilled-1
14841: PPUSH
14842: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
14846: LD_EXP 25
14850: PPUSH
14851: LD_STRING DH-Kkilled-2
14853: PPUSH
14854: CALL_OW 88
// DialogueOff ;
14858: CALL_OW 7
// end ;
14862: END
// every 0 0$1 trigger kaiaKilledByRussian do
14863: LD_EXP 23
14867: IFFALSE 14884
14869: GO 14871
14871: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
14872: LD_EXP 25
14876: PPUSH
14877: LD_STRING DH-Kkilled-3
14879: PPUSH
14880: CALL_OW 88
14884: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo ;
14885: LD_EXP 16
14889: PUSH
14890: LD_INT 106
14892: PPUSH
14893: CALL_OW 255
14897: PUSH
14898: LD_INT 2
14900: EQUAL
14901: PUSH
14902: LD_EXP 17
14906: OR
14907: AND
14908: PUSH
14909: LD_EXP 18
14913: PUSH
14914: LD_EXP 24
14918: PUSH
14919: LD_INT 112
14921: PPUSH
14922: CALL_OW 255
14926: PUSH
14927: LD_INT 2
14929: EQUAL
14930: AND
14931: OR
14932: AND
14933: IFFALSE 16122
14935: GO 14937
14937: DISABLE
14938: LD_INT 0
14940: PPUSH
14941: PPUSH
14942: PPUSH
14943: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
14944: LD_STRING GoToWest
14946: PPUSH
14947: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
14951: LD_INT 17
14953: PPUSH
14954: LD_INT 1
14956: PPUSH
14957: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
14961: LD_INT 35
14963: PPUSH
14964: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
14968: LD_ADDR_VAR 0 2
14972: PUSH
14973: LD_INT 17
14975: PPUSH
14976: LD_INT 22
14978: PUSH
14979: LD_INT 2
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PUSH
14986: LD_INT 2
14988: PUSH
14989: LD_INT 21
14991: PUSH
14992: LD_INT 1
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PUSH
14999: LD_INT 21
15001: PUSH
15002: LD_INT 2
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PUSH
15009: LD_INT 3
15011: PUSH
15012: LD_INT 58
15014: PUSH
15015: EMPTY
15016: LIST
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: LIST
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PPUSH
15035: CALL_OW 70
15039: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15040: LD_ADDR_VAR 0 3
15044: PUSH
15045: LD_INT 22
15047: PUSH
15048: LD_INT 2
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: PUSH
15055: LD_INT 3
15057: PUSH
15058: LD_INT 55
15060: PUSH
15061: EMPTY
15062: LIST
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: PUSH
15068: LD_INT 2
15070: PUSH
15071: LD_INT 21
15073: PUSH
15074: LD_INT 1
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PUSH
15081: LD_INT 21
15083: PUSH
15084: LD_INT 2
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: LD_INT 3
15093: PUSH
15094: LD_INT 58
15096: PUSH
15097: EMPTY
15098: LIST
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: PUSH
15108: EMPTY
15109: LIST
15110: LIST
15111: LIST
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: LIST
15117: PPUSH
15118: CALL_OW 69
15122: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15123: LD_VAR 0 2
15127: PUSH
15128: LD_INT 0
15130: PLUS
15131: PUSH
15132: LD_VAR 0 3
15136: PUSH
15137: LD_INT 0
15139: PLUS
15140: EQUAL
15141: IFFALSE 14961
// SaveCharacters ( Heike , 04_1_Heike ) ;
15143: LD_EXP 25
15147: PPUSH
15148: LD_STRING 04_1_Heike
15150: PPUSH
15151: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15155: LD_EXP 35
15159: PUSH
15160: LD_EXP 35
15164: PUSH
15165: LD_EXP 39
15169: IN
15170: NOT
15171: AND
15172: IFFALSE 15188
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15174: LD_EXP 35
15178: PPUSH
15179: LD_STRING 04_1_Aviradze
15181: PPUSH
15182: CALL_OW 38
15186: GO 15206
// if Aviradze then
15188: LD_EXP 35
15192: IFFALSE 15206
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15194: LD_EXP 35
15198: PPUSH
15199: LD_STRING 04_1_Aviradze_L
15201: PPUSH
15202: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15206: LD_EXP 28
15210: PUSH
15211: LD_EXP 28
15215: PUSH
15216: LD_EXP 39
15220: IN
15221: NOT
15222: AND
15223: IFFALSE 15239
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15225: LD_EXP 28
15229: PPUSH
15230: LD_STRING 04_1_Ibrahim
15232: PPUSH
15233: CALL_OW 38
15237: GO 15257
// if Ibrahim then
15239: LD_EXP 28
15243: IFFALSE 15257
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
15245: LD_EXP 28
15249: PPUSH
15250: LD_STRING 04_1_Ibrahim_L
15252: PPUSH
15253: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
15257: LD_EXP 29
15261: PUSH
15262: LD_EXP 29
15266: PUSH
15267: LD_EXP 39
15271: IN
15272: NOT
15273: AND
15274: IFFALSE 15290
// SaveCharacters ( Kamil , 04_1_Kamil ) else
15276: LD_EXP 29
15280: PPUSH
15281: LD_STRING 04_1_Kamil
15283: PPUSH
15284: CALL_OW 38
15288: GO 15308
// if Kamil then
15290: LD_EXP 29
15294: IFFALSE 15308
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
15296: LD_EXP 29
15300: PPUSH
15301: LD_STRING 04_1_Kamil_L
15303: PPUSH
15304: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
15308: LD_EXP 31
15312: PUSH
15313: LD_EXP 31
15317: PUSH
15318: LD_EXP 39
15322: IN
15323: NOT
15324: AND
15325: IFFALSE 15341
// SaveCharacters ( Sophia , 04_1_Sophia ) else
15327: LD_EXP 31
15331: PPUSH
15332: LD_STRING 04_1_Sophia
15334: PPUSH
15335: CALL_OW 38
15339: GO 15359
// if Sophia then
15341: LD_EXP 31
15345: IFFALSE 15359
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
15347: LD_EXP 31
15351: PPUSH
15352: LD_STRING 04_1_Sophia_L
15354: PPUSH
15355: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
15359: LD_EXP 30
15363: PUSH
15364: LD_EXP 30
15368: PUSH
15369: LD_EXP 39
15373: IN
15374: NOT
15375: AND
15376: IFFALSE 15392
// SaveCharacters ( Kaia , 04_1_Kaia ) else
15378: LD_EXP 30
15382: PPUSH
15383: LD_STRING 04_1_Kaia
15385: PPUSH
15386: CALL_OW 38
15390: GO 15410
// if Kaia then
15392: LD_EXP 30
15396: IFFALSE 15410
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
15398: LD_EXP 30
15402: PPUSH
15403: LD_STRING 04_1_Kaia_L
15405: PPUSH
15406: CALL_OW 38
// if Givi then
15410: LD_EXP 26
15414: IFFALSE 15428
// SaveCharacters ( Givi , 04_1_Givi ) ;
15416: LD_EXP 26
15420: PPUSH
15421: LD_STRING 04_1_Givi
15423: PPUSH
15424: CALL_OW 38
// if Mike then
15428: LD_EXP 27
15432: IFFALSE 15446
// SaveCharacters ( Mike , 04_1_Mike ) ;
15434: LD_EXP 27
15438: PPUSH
15439: LD_STRING 04_1_Mike
15441: PPUSH
15442: CALL_OW 38
// if Markov then
15446: LD_EXP 32
15450: IFFALSE 15464
// SaveCharacters ( Markov , 04_1_Markov ) ;
15452: LD_EXP 32
15456: PPUSH
15457: LD_STRING 04_1_Markov
15459: PPUSH
15460: CALL_OW 38
// if Kurt then
15464: LD_EXP 34
15468: IFFALSE 15489
// begin SaveCharacters ( Kurt , 04_1_Kurt ) ;
15470: LD_EXP 34
15474: PPUSH
15475: LD_STRING 04_1_Kurt
15477: PPUSH
15478: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KURT) ) ;
15482: LD_STRING enableBioCharacter(BIO_KURT)
15484: PPUSH
15485: CALL_OW 559
// end ; if heikeSecondSquad diff aviradzeSquad then
15489: LD_EXP 37
15493: PUSH
15494: LD_EXP 39
15498: DIFF
15499: IFFALSE 15519
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
15501: LD_EXP 37
15505: PUSH
15506: LD_EXP 39
15510: DIFF
15511: PPUSH
15512: LD_STRING 04_1_others
15514: PPUSH
15515: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
15519: LD_EXP 39
15523: PUSH
15524: LD_EXP 37
15528: AND
15529: IFFALSE 15614
// begin tmp := [ ] ;
15531: LD_ADDR_VAR 0 2
15535: PUSH
15536: EMPTY
15537: ST_TO_ADDR
// for i in heikeSecondSquad do
15538: LD_ADDR_VAR 0 1
15542: PUSH
15543: LD_EXP 37
15547: PUSH
15548: FOR_IN
15549: IFFALSE 15594
// if i in aviradzeSquad then
15551: LD_VAR 0 1
15555: PUSH
15556: LD_EXP 39
15560: IN
15561: IFFALSE 15592
// tmp := Replace ( tmp , tmp + 1 , i ) ;
15563: LD_ADDR_VAR 0 2
15567: PUSH
15568: LD_VAR 0 2
15572: PPUSH
15573: LD_VAR 0 2
15577: PUSH
15578: LD_INT 1
15580: PLUS
15581: PPUSH
15582: LD_VAR 0 1
15586: PPUSH
15587: CALL_OW 1
15591: ST_TO_ADDR
15592: GO 15548
15594: POP
15595: POP
// if tmp then
15596: LD_VAR 0 2
15600: IFFALSE 15614
// SaveCharacters ( tmp , 04_1_others_L ) ;
15602: LD_VAR 0 2
15606: PPUSH
15607: LD_STRING 04_1_others_L
15609: PPUSH
15610: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
15614: LD_ADDR_VAR 0 2
15618: PUSH
15619: LD_INT 22
15621: PUSH
15622: LD_INT 2
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: PUSH
15629: LD_INT 23
15631: PUSH
15632: LD_INT 0
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PPUSH
15643: CALL_OW 69
15647: ST_TO_ADDR
// if tmp then
15648: LD_VAR 0 2
15652: IFFALSE 15666
// SaveCharacters ( tmp , 04_1_apes ) ;
15654: LD_VAR 0 2
15658: PPUSH
15659: LD_STRING 04_1_apes
15661: PPUSH
15662: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
15666: LD_ADDR_VAR 0 2
15670: PUSH
15671: LD_INT 17
15673: PPUSH
15674: LD_INT 21
15676: PUSH
15677: LD_INT 2
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PPUSH
15684: CALL_OW 70
15688: ST_TO_ADDR
// if tmp then
15689: LD_VAR 0 2
15693: IFFALSE 15987
// begin tmp2 := [ ] ;
15695: LD_ADDR_VAR 0 3
15699: PUSH
15700: EMPTY
15701: ST_TO_ADDR
// for i in tmp do
15702: LD_ADDR_VAR 0 1
15706: PUSH
15707: LD_VAR 0 2
15711: PUSH
15712: FOR_IN
15713: IFFALSE 15973
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
15715: LD_VAR 0 1
15719: PPUSH
15720: CALL_OW 264
15724: PUSH
15725: LD_INT 32
15727: PUSH
15728: LD_INT 12
15730: PUSH
15731: LD_INT 51
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: LIST
15738: IN
15739: IFFALSE 15876
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
15741: LD_ADDR_VAR 0 4
15745: PUSH
15746: LD_VAR 0 1
15750: PPUSH
15751: LD_INT 1
15753: PPUSH
15754: CALL_OW 289
15758: PUSH
15759: LD_VAR 0 1
15763: PPUSH
15764: LD_INT 2
15766: PPUSH
15767: CALL_OW 289
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
15776: LD_ADDR_VAR 0 3
15780: PUSH
15781: LD_VAR 0 3
15785: PPUSH
15786: LD_VAR 0 3
15790: PUSH
15791: LD_INT 1
15793: PLUS
15794: PPUSH
15795: LD_VAR 0 1
15799: PPUSH
15800: CALL_OW 265
15804: PUSH
15805: LD_VAR 0 1
15809: PPUSH
15810: CALL_OW 262
15814: PUSH
15815: LD_VAR 0 1
15819: PPUSH
15820: CALL_OW 263
15824: PUSH
15825: LD_VAR 0 1
15829: PPUSH
15830: CALL_OW 264
15834: PUSH
15835: LD_VAR 0 1
15839: PPUSH
15840: CALL_OW 248
15844: PUSH
15845: LD_VAR 0 1
15849: PPUSH
15850: CALL_OW 256
15854: PUSH
15855: LD_VAR 0 4
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: PPUSH
15869: CALL_OW 1
15873: ST_TO_ADDR
// end else
15874: GO 15971
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
15876: LD_ADDR_VAR 0 3
15880: PUSH
15881: LD_VAR 0 3
15885: PPUSH
15886: LD_VAR 0 3
15890: PUSH
15891: LD_INT 1
15893: PLUS
15894: PPUSH
15895: LD_VAR 0 1
15899: PPUSH
15900: CALL_OW 265
15904: PUSH
15905: LD_VAR 0 1
15909: PPUSH
15910: CALL_OW 262
15914: PUSH
15915: LD_VAR 0 1
15919: PPUSH
15920: CALL_OW 263
15924: PUSH
15925: LD_VAR 0 1
15929: PPUSH
15930: CALL_OW 264
15934: PUSH
15935: LD_VAR 0 1
15939: PPUSH
15940: CALL_OW 248
15944: PUSH
15945: LD_VAR 0 1
15949: PPUSH
15950: CALL_OW 256
15954: PUSH
15955: EMPTY
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: PPUSH
15966: CALL_OW 1
15970: ST_TO_ADDR
15971: GO 15712
15973: POP
15974: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
15975: LD_VAR 0 3
15979: PPUSH
15980: LD_STRING 04_1_Vehicles
15982: PPUSH
15983: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
15987: LD_EXP 21
15991: PPUSH
15992: LD_STRING 04_1_RuLabCaptured
15994: PPUSH
15995: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
15999: LD_EXP 19
16003: PPUSH
16004: LD_STRING 04_1_EscapeCounter
16006: PPUSH
16007: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
16011: LD_EXP 15
16015: PPUSH
16016: LD_STRING 04_1_BaseHill
16018: PPUSH
16019: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
16023: LD_OWVAR 1
16027: PPUSH
16028: LD_STRING 04_1_Time
16030: PPUSH
16031: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
16035: LD_EXP 14
16039: PPUSH
16040: LD_STRING 04_1_DeadCounter
16042: PPUSH
16043: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
16047: LD_EXP 24
16051: PUSH
16052: LD_INT 112
16054: PPUSH
16055: CALL_OW 255
16059: MUL
16060: PUSH
16061: LD_INT 2
16063: EQUAL
16064: PPUSH
16065: LD_STRING 04_1_KaganCaptured
16067: PPUSH
16068: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
16072: LD_INT 22
16074: PUSH
16075: LD_INT 2
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: PUSH
16082: LD_INT 34
16084: PUSH
16085: LD_INT 26
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: PPUSH
16096: CALL_OW 69
16100: PUSH
16101: LD_INT 0
16103: PLUS
16104: PPUSH
16105: LD_STRING 04_1_Flamethrower
16107: PPUSH
16108: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16112: LD_INT 1
16114: PPUSH
16115: LD_STRING __x1\04_cont2
16117: PPUSH
16118: CALL_OW 340
// end ; end_of_file
16122: PPOPN 4
16124: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16125: LD_VAR 0 1
16129: PPUSH
16130: CALL_OW 266
16134: PUSH
16135: LD_INT 0
16137: EQUAL
16138: PUSH
16139: LD_VAR 0 1
16143: PPUSH
16144: CALL_OW 255
16148: PUSH
16149: LD_INT 2
16151: EQUAL
16152: AND
16153: IFFALSE 16163
// baseConstructed := true ;
16155: LD_ADDR_EXP 3
16159: PUSH
16160: LD_INT 1
16162: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16163: LD_VAR 0 1
16167: PPUSH
16168: CALL_OW 266
16172: PUSH
16173: LD_INT 6
16175: EQUAL
16176: PUSH
16177: LD_VAR 0 1
16181: PPUSH
16182: CALL_OW 255
16186: PUSH
16187: LD_INT 2
16189: EQUAL
16190: AND
16191: IFFALSE 16201
// labConstructed := true ;
16193: LD_ADDR_EXP 4
16197: PUSH
16198: LD_INT 1
16200: ST_TO_ADDR
// end ;
16201: PPOPN 1
16203: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
16204: LD_VAR 0 1
16208: PPUSH
16209: CALL 31530 0 1
// if un = Heike then
16213: LD_VAR 0 1
16217: PUSH
16218: LD_EXP 25
16222: EQUAL
16223: IFFALSE 16232
// YouLost ( Heike ) ;
16225: LD_STRING Heike
16227: PPUSH
16228: CALL_OW 104
// if un = Omar then
16232: LD_VAR 0 1
16236: PUSH
16237: LD_EXP 33
16241: EQUAL
16242: IFFALSE 16251
// YouLost ( Omar ) ;
16244: LD_STRING Omar
16246: PPUSH
16247: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
16251: LD_VAR 0 1
16255: PUSH
16256: LD_INT 22
16258: PUSH
16259: LD_INT 2
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 23
16268: PUSH
16269: LD_INT 2
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PUSH
16276: LD_INT 21
16278: PUSH
16279: LD_INT 1
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: LIST
16290: PPUSH
16291: CALL_OW 69
16295: IN
16296: IFFALSE 16312
// loseCounter := loseCounter + 1 ;
16298: LD_ADDR_EXP 14
16302: PUSH
16303: LD_EXP 14
16307: PUSH
16308: LD_INT 1
16310: PLUS
16311: ST_TO_ADDR
// if un = omikron then
16312: LD_VAR 0 1
16316: PUSH
16317: LD_INT 64
16319: EQUAL
16320: IFFALSE 16330
// omicronFall := true ;
16322: LD_ADDR_EXP 13
16326: PUSH
16327: LD_INT 1
16329: ST_TO_ADDR
// if un = kirov then
16330: LD_VAR 0 1
16334: PUSH
16335: LD_INT 71
16337: EQUAL
16338: IFFALSE 16355
// begin ChangeMissionObjectives ( KirovDone ) ;
16340: LD_STRING KirovDone
16342: PPUSH
16343: CALL_OW 337
// kirovDestroyed := true ;
16347: LD_ADDR_EXP 16
16351: PUSH
16352: LD_INT 1
16354: ST_TO_ADDR
// end ; if un = beria then
16355: LD_VAR 0 1
16359: PUSH
16360: LD_INT 106
16362: EQUAL
16363: IFFALSE 16380
// begin ChangeMissionObjectives ( BeriaDone ) ;
16365: LD_STRING BeriaDone
16367: PPUSH
16368: CALL_OW 337
// beriaDestroyed := true ;
16372: LD_ADDR_EXP 17
16376: PUSH
16377: LD_INT 1
16379: ST_TO_ADDR
// end ; if un = kagan then
16380: LD_VAR 0 1
16384: PUSH
16385: LD_INT 112
16387: EQUAL
16388: IFFALSE 16398
// kaganDestroyed := true ;
16390: LD_ADDR_EXP 18
16394: PUSH
16395: LD_INT 1
16397: ST_TO_ADDR
// if un in russianPatrol then
16398: LD_VAR 0 1
16402: PUSH
16403: LD_EXP 47
16407: IN
16408: IFFALSE 16426
// russianPatrol := russianPatrol diff un ;
16410: LD_ADDR_EXP 47
16414: PUSH
16415: LD_EXP 47
16419: PUSH
16420: LD_VAR 0 1
16424: DIFF
16425: ST_TO_ADDR
// if un in russianOmicronAttackers then
16426: LD_VAR 0 1
16430: PUSH
16431: LD_EXP 48
16435: IN
16436: IFFALSE 16454
// russianOmicronAttackers := russianOmicronAttackers diff un ;
16438: LD_ADDR_EXP 48
16442: PUSH
16443: LD_EXP 48
16447: PUSH
16448: LD_VAR 0 1
16452: DIFF
16453: ST_TO_ADDR
// end ;
16454: PPOPN 1
16456: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
16457: LD_INT 0
16459: PPUSH
16460: PPUSH
16461: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
16462: LD_VAR 0 1
16466: PUSH
16467: LD_INT 2
16469: PUSH
16470: LD_INT 22
16472: PUSH
16473: LD_INT 3
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PUSH
16480: LD_INT 22
16482: PUSH
16483: LD_INT 4
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: PUSH
16490: LD_INT 22
16492: PUSH
16493: LD_INT 6
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: PUSH
16506: LD_INT 30
16508: PUSH
16509: LD_INT 32
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PPUSH
16520: CALL_OW 69
16524: IN
16525: IFFALSE 16698
// begin sol := UnitsInside ( un ) ;
16527: LD_ADDR_VAR 0 3
16531: PUSH
16532: LD_VAR 0 1
16536: PPUSH
16537: CALL_OW 313
16541: ST_TO_ADDR
// if not sol then
16542: LD_VAR 0 3
16546: NOT
16547: IFFALSE 16551
// exit ;
16549: GO 16698
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16551: LD_ADDR_VAR 0 4
16555: PUSH
16556: LD_INT 22
16558: PUSH
16559: LD_VAR 0 1
16563: PPUSH
16564: CALL_OW 255
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: LD_INT 2
16575: PUSH
16576: LD_INT 30
16578: PUSH
16579: LD_INT 4
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: PUSH
16586: LD_INT 30
16588: PUSH
16589: LD_INT 5
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: LIST
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PPUSH
16605: CALL_OW 69
16609: ST_TO_ADDR
// if not nearestBarracks then
16610: LD_VAR 0 4
16614: NOT
16615: IFFALSE 16619
// exit ;
16617: GO 16698
// for i in nearestBarracks do
16619: LD_ADDR_VAR 0 2
16623: PUSH
16624: LD_VAR 0 4
16628: PUSH
16629: FOR_IN
16630: IFFALSE 16665
// if UnitsInside ( i ) = 6 then
16632: LD_VAR 0 2
16636: PPUSH
16637: CALL_OW 313
16641: PUSH
16642: LD_INT 6
16644: EQUAL
16645: IFFALSE 16663
// nearestBarracks := nearestBarracks diff i ;
16647: LD_ADDR_VAR 0 4
16651: PUSH
16652: LD_VAR 0 4
16656: PUSH
16657: LD_VAR 0 2
16661: DIFF
16662: ST_TO_ADDR
16663: GO 16629
16665: POP
16666: POP
// if not nearestBarracks then
16667: LD_VAR 0 4
16671: NOT
16672: IFFALSE 16676
// exit ;
16674: GO 16698
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
16676: LD_VAR 0 3
16680: PUSH
16681: LD_INT 1
16683: ARRAY
16684: PPUSH
16685: LD_VAR 0 4
16689: PUSH
16690: LD_INT 1
16692: ARRAY
16693: PPUSH
16694: CALL_OW 120
// end ; end ;
16698: PPOPN 4
16700: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
16701: LD_INT 0
16703: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
16704: LD_EXP 8
16708: NOT
16709: PUSH
16710: LD_EXP 5
16714: NOT
16715: OR
16716: IFFALSE 16720
// exit ;
16718: GO 16788
// for i in camAreas do
16720: LD_ADDR_VAR 0 5
16724: PUSH
16725: LD_EXP 8
16729: PUSH
16730: FOR_IN
16731: IFFALSE 16786
// if InArea ( x , y , i ) then
16733: LD_VAR 0 3
16737: PPUSH
16738: LD_VAR 0 4
16742: PPUSH
16743: LD_VAR 0 5
16747: PPUSH
16748: CALL_OW 309
16752: IFFALSE 16784
// begin SetAreaMapShow ( i , 0 ) ;
16754: LD_VAR 0 5
16758: PPUSH
16759: LD_INT 0
16761: PPUSH
16762: CALL_OW 424
// camAreas := camAreas diff i ;
16766: LD_ADDR_EXP 8
16770: PUSH
16771: LD_EXP 8
16775: PUSH
16776: LD_VAR 0 5
16780: DIFF
16781: ST_TO_ADDR
// break ;
16782: GO 16786
// end ;
16784: GO 16730
16786: POP
16787: POP
// end ;
16788: PPOPN 5
16790: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
16791: LD_VAR 0 1
16795: PUSH
16796: LD_INT 2
16798: EQUAL
16799: PUSH
16800: LD_VAR 0 2
16804: PUSH
16805: LD_INT 5
16807: PUSH
16808: LD_INT 8
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: IN
16815: AND
16816: IFFALSE 16825
// YouLost ( Ally ) ;
16818: LD_STRING Ally
16820: PPUSH
16821: CALL_OW 104
// end ;
16825: PPOPN 2
16827: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
16828: LD_VAR 0 1
16832: PUSH
16833: LD_EXP 30
16837: EQUAL
16838: PUSH
16839: LD_VAR 0 2
16843: PUSH
16844: LD_INT 3
16846: PUSH
16847: LD_INT 6
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: IN
16854: AND
16855: IFFALSE 16886
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
16857: LD_ADDR_EXP 23
16861: PUSH
16862: LD_VAR 0 1
16866: PPUSH
16867: CALL_OW 250
16871: PUSH
16872: LD_VAR 0 1
16876: PPUSH
16877: CALL_OW 251
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: ST_TO_ADDR
// end ;
16886: PPOPN 3
16888: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
16889: LD_VAR 0 1
16893: PPUSH
16894: LD_VAR 0 2
16898: PPUSH
16899: CALL 31652 0 2
// end ; end_of_file
16903: PPOPN 2
16905: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 , 10 ] [ Difficulty ] do
16906: LD_EXP 11
16910: NOT
16911: PUSH
16912: LD_INT 12
16914: PPUSH
16915: LD_INT 1
16917: PPUSH
16918: CALL_OW 287
16922: PUSH
16923: LD_INT 20
16925: PUSH
16926: LD_INT 16
16928: PUSH
16929: LD_INT 12
16931: PUSH
16932: LD_INT 10
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: PUSH
16941: LD_OWVAR 67
16945: ARRAY
16946: LESS
16947: AND
16948: IFFALSE 16975
16950: GO 16952
16952: DISABLE
// begin enable ;
16953: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
16954: LD_INT 1
16956: PPUSH
16957: LD_INT 5
16959: PPUSH
16960: CALL_OW 12
16964: PPUSH
16965: LD_INT 12
16967: PPUSH
16968: LD_INT 1
16970: PPUSH
16971: CALL_OW 55
// end ; end_of_file
16975: END
// every 0 0$1 trigger omarCountdown do
16976: LD_EXP 22
16980: IFFALSE 17032
16982: GO 16984
16984: DISABLE
// begin enable ;
16985: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
16986: LD_ADDR_OWVAR 47
16990: PUSH
16991: LD_STRING #X104-1
16993: PUSH
16994: LD_EXP 22
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
17003: LD_ADDR_EXP 22
17007: PUSH
17008: LD_EXP 22
17012: PUSH
17013: LD_INT 35
17015: MINUS
17016: ST_TO_ADDR
// if not omarCountdown then
17017: LD_EXP 22
17021: NOT
17022: IFFALSE 17032
// display_strings :=  ;
17024: LD_ADDR_OWVAR 47
17028: PUSH
17029: LD_STRING 
17031: ST_TO_ADDR
// end ; end_of_file
17032: END
// every 0 0$1 do
17033: GO 17035
17035: DISABLE
// begin enable ;
17036: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
17037: LD_STRING updateTimer(
17039: PUSH
17040: LD_OWVAR 1
17044: STR
17045: PUSH
17046: LD_STRING );
17048: STR
17049: PPUSH
17050: CALL_OW 559
// end ;
17054: END
// export function SOS_MapStart ( ) ; begin
17055: LD_INT 0
17057: PPUSH
// if streamModeActive then
17058: LD_EXP 52
17062: IFFALSE 17071
// DefineStreamItems ( true ) ;
17064: LD_INT 1
17066: PPUSH
17067: CALL 18721 0 1
// UpdateFactoryWaypoints ( ) ;
17071: CALL 32468 0 0
// end ;
17075: LD_VAR 0 1
17079: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17080: LD_INT 0
17082: PPUSH
// if p2 = 100 then
17083: LD_VAR 0 2
17087: PUSH
17088: LD_INT 100
17090: EQUAL
17091: IFFALSE 18094
// begin if not StreamModeActive then
17093: LD_EXP 52
17097: NOT
17098: IFFALSE 17108
// StreamModeActive := true ;
17100: LD_ADDR_EXP 52
17104: PUSH
17105: LD_INT 1
17107: ST_TO_ADDR
// if p3 = 0 then
17108: LD_VAR 0 3
17112: PUSH
17113: LD_INT 0
17115: EQUAL
17116: IFFALSE 17122
// InitStreamMode ;
17118: CALL 18257 0 0
// if p3 = 1 then
17122: LD_VAR 0 3
17126: PUSH
17127: LD_INT 1
17129: EQUAL
17130: IFFALSE 17140
// sRocket := true ;
17132: LD_ADDR_EXP 57
17136: PUSH
17137: LD_INT 1
17139: ST_TO_ADDR
// if p3 = 2 then
17140: LD_VAR 0 3
17144: PUSH
17145: LD_INT 2
17147: EQUAL
17148: IFFALSE 17158
// sSpeed := true ;
17150: LD_ADDR_EXP 56
17154: PUSH
17155: LD_INT 1
17157: ST_TO_ADDR
// if p3 = 3 then
17158: LD_VAR 0 3
17162: PUSH
17163: LD_INT 3
17165: EQUAL
17166: IFFALSE 17176
// sEngine := true ;
17168: LD_ADDR_EXP 58
17172: PUSH
17173: LD_INT 1
17175: ST_TO_ADDR
// if p3 = 4 then
17176: LD_VAR 0 3
17180: PUSH
17181: LD_INT 4
17183: EQUAL
17184: IFFALSE 17194
// sSpec := true ;
17186: LD_ADDR_EXP 55
17190: PUSH
17191: LD_INT 1
17193: ST_TO_ADDR
// if p3 = 5 then
17194: LD_VAR 0 3
17198: PUSH
17199: LD_INT 5
17201: EQUAL
17202: IFFALSE 17212
// sLevel := true ;
17204: LD_ADDR_EXP 59
17208: PUSH
17209: LD_INT 1
17211: ST_TO_ADDR
// if p3 = 6 then
17212: LD_VAR 0 3
17216: PUSH
17217: LD_INT 6
17219: EQUAL
17220: IFFALSE 17230
// sArmoury := true ;
17222: LD_ADDR_EXP 60
17226: PUSH
17227: LD_INT 1
17229: ST_TO_ADDR
// if p3 = 7 then
17230: LD_VAR 0 3
17234: PUSH
17235: LD_INT 7
17237: EQUAL
17238: IFFALSE 17248
// sRadar := true ;
17240: LD_ADDR_EXP 61
17244: PUSH
17245: LD_INT 1
17247: ST_TO_ADDR
// if p3 = 8 then
17248: LD_VAR 0 3
17252: PUSH
17253: LD_INT 8
17255: EQUAL
17256: IFFALSE 17266
// sBunker := true ;
17258: LD_ADDR_EXP 62
17262: PUSH
17263: LD_INT 1
17265: ST_TO_ADDR
// if p3 = 9 then
17266: LD_VAR 0 3
17270: PUSH
17271: LD_INT 9
17273: EQUAL
17274: IFFALSE 17284
// sHack := true ;
17276: LD_ADDR_EXP 63
17280: PUSH
17281: LD_INT 1
17283: ST_TO_ADDR
// if p3 = 10 then
17284: LD_VAR 0 3
17288: PUSH
17289: LD_INT 10
17291: EQUAL
17292: IFFALSE 17302
// sFire := true ;
17294: LD_ADDR_EXP 64
17298: PUSH
17299: LD_INT 1
17301: ST_TO_ADDR
// if p3 = 11 then
17302: LD_VAR 0 3
17306: PUSH
17307: LD_INT 11
17309: EQUAL
17310: IFFALSE 17320
// sRefresh := true ;
17312: LD_ADDR_EXP 65
17316: PUSH
17317: LD_INT 1
17319: ST_TO_ADDR
// if p3 = 12 then
17320: LD_VAR 0 3
17324: PUSH
17325: LD_INT 12
17327: EQUAL
17328: IFFALSE 17338
// sExp := true ;
17330: LD_ADDR_EXP 66
17334: PUSH
17335: LD_INT 1
17337: ST_TO_ADDR
// if p3 = 13 then
17338: LD_VAR 0 3
17342: PUSH
17343: LD_INT 13
17345: EQUAL
17346: IFFALSE 17356
// sDepot := true ;
17348: LD_ADDR_EXP 67
17352: PUSH
17353: LD_INT 1
17355: ST_TO_ADDR
// if p3 = 14 then
17356: LD_VAR 0 3
17360: PUSH
17361: LD_INT 14
17363: EQUAL
17364: IFFALSE 17374
// sFlag := true ;
17366: LD_ADDR_EXP 68
17370: PUSH
17371: LD_INT 1
17373: ST_TO_ADDR
// if p3 = 15 then
17374: LD_VAR 0 3
17378: PUSH
17379: LD_INT 15
17381: EQUAL
17382: IFFALSE 17392
// sKamikadze := true ;
17384: LD_ADDR_EXP 76
17388: PUSH
17389: LD_INT 1
17391: ST_TO_ADDR
// if p3 = 16 then
17392: LD_VAR 0 3
17396: PUSH
17397: LD_INT 16
17399: EQUAL
17400: IFFALSE 17410
// sTroll := true ;
17402: LD_ADDR_EXP 77
17406: PUSH
17407: LD_INT 1
17409: ST_TO_ADDR
// if p3 = 17 then
17410: LD_VAR 0 3
17414: PUSH
17415: LD_INT 17
17417: EQUAL
17418: IFFALSE 17428
// sSlow := true ;
17420: LD_ADDR_EXP 78
17424: PUSH
17425: LD_INT 1
17427: ST_TO_ADDR
// if p3 = 18 then
17428: LD_VAR 0 3
17432: PUSH
17433: LD_INT 18
17435: EQUAL
17436: IFFALSE 17446
// sLack := true ;
17438: LD_ADDR_EXP 79
17442: PUSH
17443: LD_INT 1
17445: ST_TO_ADDR
// if p3 = 19 then
17446: LD_VAR 0 3
17450: PUSH
17451: LD_INT 19
17453: EQUAL
17454: IFFALSE 17464
// sTank := true ;
17456: LD_ADDR_EXP 81
17460: PUSH
17461: LD_INT 1
17463: ST_TO_ADDR
// if p3 = 20 then
17464: LD_VAR 0 3
17468: PUSH
17469: LD_INT 20
17471: EQUAL
17472: IFFALSE 17482
// sRemote := true ;
17474: LD_ADDR_EXP 82
17478: PUSH
17479: LD_INT 1
17481: ST_TO_ADDR
// if p3 = 21 then
17482: LD_VAR 0 3
17486: PUSH
17487: LD_INT 21
17489: EQUAL
17490: IFFALSE 17500
// sPowell := true ;
17492: LD_ADDR_EXP 83
17496: PUSH
17497: LD_INT 1
17499: ST_TO_ADDR
// if p3 = 22 then
17500: LD_VAR 0 3
17504: PUSH
17505: LD_INT 22
17507: EQUAL
17508: IFFALSE 17518
// sTeleport := true ;
17510: LD_ADDR_EXP 86
17514: PUSH
17515: LD_INT 1
17517: ST_TO_ADDR
// if p3 = 23 then
17518: LD_VAR 0 3
17522: PUSH
17523: LD_INT 23
17525: EQUAL
17526: IFFALSE 17536
// sOilTower := true ;
17528: LD_ADDR_EXP 88
17532: PUSH
17533: LD_INT 1
17535: ST_TO_ADDR
// if p3 = 24 then
17536: LD_VAR 0 3
17540: PUSH
17541: LD_INT 24
17543: EQUAL
17544: IFFALSE 17554
// sShovel := true ;
17546: LD_ADDR_EXP 89
17550: PUSH
17551: LD_INT 1
17553: ST_TO_ADDR
// if p3 = 25 then
17554: LD_VAR 0 3
17558: PUSH
17559: LD_INT 25
17561: EQUAL
17562: IFFALSE 17572
// sSheik := true ;
17564: LD_ADDR_EXP 90
17568: PUSH
17569: LD_INT 1
17571: ST_TO_ADDR
// if p3 = 26 then
17572: LD_VAR 0 3
17576: PUSH
17577: LD_INT 26
17579: EQUAL
17580: IFFALSE 17590
// sEarthquake := true ;
17582: LD_ADDR_EXP 92
17586: PUSH
17587: LD_INT 1
17589: ST_TO_ADDR
// if p3 = 27 then
17590: LD_VAR 0 3
17594: PUSH
17595: LD_INT 27
17597: EQUAL
17598: IFFALSE 17608
// sAI := true ;
17600: LD_ADDR_EXP 93
17604: PUSH
17605: LD_INT 1
17607: ST_TO_ADDR
// if p3 = 28 then
17608: LD_VAR 0 3
17612: PUSH
17613: LD_INT 28
17615: EQUAL
17616: IFFALSE 17626
// sCargo := true ;
17618: LD_ADDR_EXP 96
17622: PUSH
17623: LD_INT 1
17625: ST_TO_ADDR
// if p3 = 29 then
17626: LD_VAR 0 3
17630: PUSH
17631: LD_INT 29
17633: EQUAL
17634: IFFALSE 17644
// sDLaser := true ;
17636: LD_ADDR_EXP 97
17640: PUSH
17641: LD_INT 1
17643: ST_TO_ADDR
// if p3 = 30 then
17644: LD_VAR 0 3
17648: PUSH
17649: LD_INT 30
17651: EQUAL
17652: IFFALSE 17662
// sExchange := true ;
17654: LD_ADDR_EXP 98
17658: PUSH
17659: LD_INT 1
17661: ST_TO_ADDR
// if p3 = 31 then
17662: LD_VAR 0 3
17666: PUSH
17667: LD_INT 31
17669: EQUAL
17670: IFFALSE 17680
// sFac := true ;
17672: LD_ADDR_EXP 99
17676: PUSH
17677: LD_INT 1
17679: ST_TO_ADDR
// if p3 = 32 then
17680: LD_VAR 0 3
17684: PUSH
17685: LD_INT 32
17687: EQUAL
17688: IFFALSE 17698
// sPower := true ;
17690: LD_ADDR_EXP 100
17694: PUSH
17695: LD_INT 1
17697: ST_TO_ADDR
// if p3 = 33 then
17698: LD_VAR 0 3
17702: PUSH
17703: LD_INT 33
17705: EQUAL
17706: IFFALSE 17716
// sRandom := true ;
17708: LD_ADDR_EXP 101
17712: PUSH
17713: LD_INT 1
17715: ST_TO_ADDR
// if p3 = 34 then
17716: LD_VAR 0 3
17720: PUSH
17721: LD_INT 34
17723: EQUAL
17724: IFFALSE 17734
// sShield := true ;
17726: LD_ADDR_EXP 102
17730: PUSH
17731: LD_INT 1
17733: ST_TO_ADDR
// if p3 = 35 then
17734: LD_VAR 0 3
17738: PUSH
17739: LD_INT 35
17741: EQUAL
17742: IFFALSE 17752
// sTime := true ;
17744: LD_ADDR_EXP 103
17748: PUSH
17749: LD_INT 1
17751: ST_TO_ADDR
// if p3 = 36 then
17752: LD_VAR 0 3
17756: PUSH
17757: LD_INT 36
17759: EQUAL
17760: IFFALSE 17770
// sTools := true ;
17762: LD_ADDR_EXP 104
17766: PUSH
17767: LD_INT 1
17769: ST_TO_ADDR
// if p3 = 101 then
17770: LD_VAR 0 3
17774: PUSH
17775: LD_INT 101
17777: EQUAL
17778: IFFALSE 17788
// sSold := true ;
17780: LD_ADDR_EXP 69
17784: PUSH
17785: LD_INT 1
17787: ST_TO_ADDR
// if p3 = 102 then
17788: LD_VAR 0 3
17792: PUSH
17793: LD_INT 102
17795: EQUAL
17796: IFFALSE 17806
// sDiff := true ;
17798: LD_ADDR_EXP 70
17802: PUSH
17803: LD_INT 1
17805: ST_TO_ADDR
// if p3 = 103 then
17806: LD_VAR 0 3
17810: PUSH
17811: LD_INT 103
17813: EQUAL
17814: IFFALSE 17824
// sFog := true ;
17816: LD_ADDR_EXP 73
17820: PUSH
17821: LD_INT 1
17823: ST_TO_ADDR
// if p3 = 104 then
17824: LD_VAR 0 3
17828: PUSH
17829: LD_INT 104
17831: EQUAL
17832: IFFALSE 17842
// sReset := true ;
17834: LD_ADDR_EXP 74
17838: PUSH
17839: LD_INT 1
17841: ST_TO_ADDR
// if p3 = 105 then
17842: LD_VAR 0 3
17846: PUSH
17847: LD_INT 105
17849: EQUAL
17850: IFFALSE 17860
// sSun := true ;
17852: LD_ADDR_EXP 75
17856: PUSH
17857: LD_INT 1
17859: ST_TO_ADDR
// if p3 = 106 then
17860: LD_VAR 0 3
17864: PUSH
17865: LD_INT 106
17867: EQUAL
17868: IFFALSE 17878
// sTiger := true ;
17870: LD_ADDR_EXP 71
17874: PUSH
17875: LD_INT 1
17877: ST_TO_ADDR
// if p3 = 107 then
17878: LD_VAR 0 3
17882: PUSH
17883: LD_INT 107
17885: EQUAL
17886: IFFALSE 17896
// sBomb := true ;
17888: LD_ADDR_EXP 72
17892: PUSH
17893: LD_INT 1
17895: ST_TO_ADDR
// if p3 = 108 then
17896: LD_VAR 0 3
17900: PUSH
17901: LD_INT 108
17903: EQUAL
17904: IFFALSE 17914
// sWound := true ;
17906: LD_ADDR_EXP 80
17910: PUSH
17911: LD_INT 1
17913: ST_TO_ADDR
// if p3 = 109 then
17914: LD_VAR 0 3
17918: PUSH
17919: LD_INT 109
17921: EQUAL
17922: IFFALSE 17932
// sBetray := true ;
17924: LD_ADDR_EXP 84
17928: PUSH
17929: LD_INT 1
17931: ST_TO_ADDR
// if p3 = 110 then
17932: LD_VAR 0 3
17936: PUSH
17937: LD_INT 110
17939: EQUAL
17940: IFFALSE 17950
// sContamin := true ;
17942: LD_ADDR_EXP 85
17946: PUSH
17947: LD_INT 1
17949: ST_TO_ADDR
// if p3 = 111 then
17950: LD_VAR 0 3
17954: PUSH
17955: LD_INT 111
17957: EQUAL
17958: IFFALSE 17968
// sOil := true ;
17960: LD_ADDR_EXP 87
17964: PUSH
17965: LD_INT 1
17967: ST_TO_ADDR
// if p3 = 112 then
17968: LD_VAR 0 3
17972: PUSH
17973: LD_INT 112
17975: EQUAL
17976: IFFALSE 17986
// sStu := true ;
17978: LD_ADDR_EXP 91
17982: PUSH
17983: LD_INT 1
17985: ST_TO_ADDR
// if p3 = 113 then
17986: LD_VAR 0 3
17990: PUSH
17991: LD_INT 113
17993: EQUAL
17994: IFFALSE 18004
// sBazooka := true ;
17996: LD_ADDR_EXP 94
18000: PUSH
18001: LD_INT 1
18003: ST_TO_ADDR
// if p3 = 114 then
18004: LD_VAR 0 3
18008: PUSH
18009: LD_INT 114
18011: EQUAL
18012: IFFALSE 18022
// sMortar := true ;
18014: LD_ADDR_EXP 95
18018: PUSH
18019: LD_INT 1
18021: ST_TO_ADDR
// if p3 = 115 then
18022: LD_VAR 0 3
18026: PUSH
18027: LD_INT 115
18029: EQUAL
18030: IFFALSE 18040
// sRanger := true ;
18032: LD_ADDR_EXP 105
18036: PUSH
18037: LD_INT 1
18039: ST_TO_ADDR
// if p3 = 116 then
18040: LD_VAR 0 3
18044: PUSH
18045: LD_INT 116
18047: EQUAL
18048: IFFALSE 18058
// sComputer := true ;
18050: LD_ADDR_EXP 106
18054: PUSH
18055: LD_INT 1
18057: ST_TO_ADDR
// if p3 = 117 then
18058: LD_VAR 0 3
18062: PUSH
18063: LD_INT 117
18065: EQUAL
18066: IFFALSE 18076
// s30 := true ;
18068: LD_ADDR_EXP 107
18072: PUSH
18073: LD_INT 1
18075: ST_TO_ADDR
// if p3 = 118 then
18076: LD_VAR 0 3
18080: PUSH
18081: LD_INT 118
18083: EQUAL
18084: IFFALSE 18094
// s60 := true ;
18086: LD_ADDR_EXP 108
18090: PUSH
18091: LD_INT 1
18093: ST_TO_ADDR
// end ; if p2 = 101 then
18094: LD_VAR 0 2
18098: PUSH
18099: LD_INT 101
18101: EQUAL
18102: IFFALSE 18230
// begin case p3 of 1 :
18104: LD_VAR 0 3
18108: PUSH
18109: LD_INT 1
18111: DOUBLE
18112: EQUAL
18113: IFTRUE 18117
18115: GO 18124
18117: POP
// hHackUnlimitedResources ; 2 :
18118: CALL 30328 0 0
18122: GO 18230
18124: LD_INT 2
18126: DOUBLE
18127: EQUAL
18128: IFTRUE 18132
18130: GO 18139
18132: POP
// hHackSetLevel10 ; 3 :
18133: CALL 30461 0 0
18137: GO 18230
18139: LD_INT 3
18141: DOUBLE
18142: EQUAL
18143: IFTRUE 18147
18145: GO 18154
18147: POP
// hHackSetLevel10YourUnits ; 4 :
18148: CALL 30546 0 0
18152: GO 18230
18154: LD_INT 4
18156: DOUBLE
18157: EQUAL
18158: IFTRUE 18162
18160: GO 18169
18162: POP
// hHackInvincible ; 5 :
18163: CALL 30994 0 0
18167: GO 18230
18169: LD_INT 5
18171: DOUBLE
18172: EQUAL
18173: IFTRUE 18177
18175: GO 18184
18177: POP
// hHackInvisible ; 6 :
18178: CALL 31105 0 0
18182: GO 18230
18184: LD_INT 6
18186: DOUBLE
18187: EQUAL
18188: IFTRUE 18192
18190: GO 18199
18192: POP
// hHackChangeYourSide ; 7 :
18193: CALL 31162 0 0
18197: GO 18230
18199: LD_INT 7
18201: DOUBLE
18202: EQUAL
18203: IFTRUE 18207
18205: GO 18214
18207: POP
// hHackChangeUnitSide ; 8 :
18208: CALL 31204 0 0
18212: GO 18230
18214: LD_INT 8
18216: DOUBLE
18217: EQUAL
18218: IFTRUE 18222
18220: GO 18229
18222: POP
// hHackFog ; end ;
18223: CALL 31305 0 0
18227: GO 18230
18229: POP
// end ; end ;
18230: LD_VAR 0 7
18234: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
18235: GO 18237
18237: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
18238: LD_STRING initStreamRollete();
18240: PPUSH
18241: CALL_OW 559
// InitStreamMode ;
18245: CALL 18257 0 0
// DefineStreamItems ( false ) ;
18249: LD_INT 0
18251: PPUSH
18252: CALL 18721 0 1
// end ;
18256: END
// function InitStreamMode ; begin
18257: LD_INT 0
18259: PPUSH
// streamModeActive := false ;
18260: LD_ADDR_EXP 52
18264: PUSH
18265: LD_INT 0
18267: ST_TO_ADDR
// normalCounter := 36 ;
18268: LD_ADDR_EXP 53
18272: PUSH
18273: LD_INT 36
18275: ST_TO_ADDR
// hardcoreCounter := 18 ;
18276: LD_ADDR_EXP 54
18280: PUSH
18281: LD_INT 18
18283: ST_TO_ADDR
// sRocket := false ;
18284: LD_ADDR_EXP 57
18288: PUSH
18289: LD_INT 0
18291: ST_TO_ADDR
// sSpeed := false ;
18292: LD_ADDR_EXP 56
18296: PUSH
18297: LD_INT 0
18299: ST_TO_ADDR
// sEngine := false ;
18300: LD_ADDR_EXP 58
18304: PUSH
18305: LD_INT 0
18307: ST_TO_ADDR
// sSpec := false ;
18308: LD_ADDR_EXP 55
18312: PUSH
18313: LD_INT 0
18315: ST_TO_ADDR
// sLevel := false ;
18316: LD_ADDR_EXP 59
18320: PUSH
18321: LD_INT 0
18323: ST_TO_ADDR
// sArmoury := false ;
18324: LD_ADDR_EXP 60
18328: PUSH
18329: LD_INT 0
18331: ST_TO_ADDR
// sRadar := false ;
18332: LD_ADDR_EXP 61
18336: PUSH
18337: LD_INT 0
18339: ST_TO_ADDR
// sBunker := false ;
18340: LD_ADDR_EXP 62
18344: PUSH
18345: LD_INT 0
18347: ST_TO_ADDR
// sHack := false ;
18348: LD_ADDR_EXP 63
18352: PUSH
18353: LD_INT 0
18355: ST_TO_ADDR
// sFire := false ;
18356: LD_ADDR_EXP 64
18360: PUSH
18361: LD_INT 0
18363: ST_TO_ADDR
// sRefresh := false ;
18364: LD_ADDR_EXP 65
18368: PUSH
18369: LD_INT 0
18371: ST_TO_ADDR
// sExp := false ;
18372: LD_ADDR_EXP 66
18376: PUSH
18377: LD_INT 0
18379: ST_TO_ADDR
// sDepot := false ;
18380: LD_ADDR_EXP 67
18384: PUSH
18385: LD_INT 0
18387: ST_TO_ADDR
// sFlag := false ;
18388: LD_ADDR_EXP 68
18392: PUSH
18393: LD_INT 0
18395: ST_TO_ADDR
// sKamikadze := false ;
18396: LD_ADDR_EXP 76
18400: PUSH
18401: LD_INT 0
18403: ST_TO_ADDR
// sTroll := false ;
18404: LD_ADDR_EXP 77
18408: PUSH
18409: LD_INT 0
18411: ST_TO_ADDR
// sSlow := false ;
18412: LD_ADDR_EXP 78
18416: PUSH
18417: LD_INT 0
18419: ST_TO_ADDR
// sLack := false ;
18420: LD_ADDR_EXP 79
18424: PUSH
18425: LD_INT 0
18427: ST_TO_ADDR
// sTank := false ;
18428: LD_ADDR_EXP 81
18432: PUSH
18433: LD_INT 0
18435: ST_TO_ADDR
// sRemote := false ;
18436: LD_ADDR_EXP 82
18440: PUSH
18441: LD_INT 0
18443: ST_TO_ADDR
// sPowell := false ;
18444: LD_ADDR_EXP 83
18448: PUSH
18449: LD_INT 0
18451: ST_TO_ADDR
// sTeleport := false ;
18452: LD_ADDR_EXP 86
18456: PUSH
18457: LD_INT 0
18459: ST_TO_ADDR
// sOilTower := false ;
18460: LD_ADDR_EXP 88
18464: PUSH
18465: LD_INT 0
18467: ST_TO_ADDR
// sShovel := false ;
18468: LD_ADDR_EXP 89
18472: PUSH
18473: LD_INT 0
18475: ST_TO_ADDR
// sSheik := false ;
18476: LD_ADDR_EXP 90
18480: PUSH
18481: LD_INT 0
18483: ST_TO_ADDR
// sEarthquake := false ;
18484: LD_ADDR_EXP 92
18488: PUSH
18489: LD_INT 0
18491: ST_TO_ADDR
// sAI := false ;
18492: LD_ADDR_EXP 93
18496: PUSH
18497: LD_INT 0
18499: ST_TO_ADDR
// sCargo := false ;
18500: LD_ADDR_EXP 96
18504: PUSH
18505: LD_INT 0
18507: ST_TO_ADDR
// sDLaser := false ;
18508: LD_ADDR_EXP 97
18512: PUSH
18513: LD_INT 0
18515: ST_TO_ADDR
// sExchange := false ;
18516: LD_ADDR_EXP 98
18520: PUSH
18521: LD_INT 0
18523: ST_TO_ADDR
// sFac := false ;
18524: LD_ADDR_EXP 99
18528: PUSH
18529: LD_INT 0
18531: ST_TO_ADDR
// sPower := false ;
18532: LD_ADDR_EXP 100
18536: PUSH
18537: LD_INT 0
18539: ST_TO_ADDR
// sRandom := false ;
18540: LD_ADDR_EXP 101
18544: PUSH
18545: LD_INT 0
18547: ST_TO_ADDR
// sShield := false ;
18548: LD_ADDR_EXP 102
18552: PUSH
18553: LD_INT 0
18555: ST_TO_ADDR
// sTime := false ;
18556: LD_ADDR_EXP 103
18560: PUSH
18561: LD_INT 0
18563: ST_TO_ADDR
// sTools := false ;
18564: LD_ADDR_EXP 104
18568: PUSH
18569: LD_INT 0
18571: ST_TO_ADDR
// sSold := false ;
18572: LD_ADDR_EXP 69
18576: PUSH
18577: LD_INT 0
18579: ST_TO_ADDR
// sDiff := false ;
18580: LD_ADDR_EXP 70
18584: PUSH
18585: LD_INT 0
18587: ST_TO_ADDR
// sFog := false ;
18588: LD_ADDR_EXP 73
18592: PUSH
18593: LD_INT 0
18595: ST_TO_ADDR
// sReset := false ;
18596: LD_ADDR_EXP 74
18600: PUSH
18601: LD_INT 0
18603: ST_TO_ADDR
// sSun := false ;
18604: LD_ADDR_EXP 75
18608: PUSH
18609: LD_INT 0
18611: ST_TO_ADDR
// sTiger := false ;
18612: LD_ADDR_EXP 71
18616: PUSH
18617: LD_INT 0
18619: ST_TO_ADDR
// sBomb := false ;
18620: LD_ADDR_EXP 72
18624: PUSH
18625: LD_INT 0
18627: ST_TO_ADDR
// sWound := false ;
18628: LD_ADDR_EXP 80
18632: PUSH
18633: LD_INT 0
18635: ST_TO_ADDR
// sBetray := false ;
18636: LD_ADDR_EXP 84
18640: PUSH
18641: LD_INT 0
18643: ST_TO_ADDR
// sContamin := false ;
18644: LD_ADDR_EXP 85
18648: PUSH
18649: LD_INT 0
18651: ST_TO_ADDR
// sOil := false ;
18652: LD_ADDR_EXP 87
18656: PUSH
18657: LD_INT 0
18659: ST_TO_ADDR
// sStu := false ;
18660: LD_ADDR_EXP 91
18664: PUSH
18665: LD_INT 0
18667: ST_TO_ADDR
// sBazooka := false ;
18668: LD_ADDR_EXP 94
18672: PUSH
18673: LD_INT 0
18675: ST_TO_ADDR
// sMortar := false ;
18676: LD_ADDR_EXP 95
18680: PUSH
18681: LD_INT 0
18683: ST_TO_ADDR
// sRanger := false ;
18684: LD_ADDR_EXP 105
18688: PUSH
18689: LD_INT 0
18691: ST_TO_ADDR
// sComputer := false ;
18692: LD_ADDR_EXP 106
18696: PUSH
18697: LD_INT 0
18699: ST_TO_ADDR
// s30 := false ;
18700: LD_ADDR_EXP 107
18704: PUSH
18705: LD_INT 0
18707: ST_TO_ADDR
// s60 := false ;
18708: LD_ADDR_EXP 108
18712: PUSH
18713: LD_INT 0
18715: ST_TO_ADDR
// end ;
18716: LD_VAR 0 1
18720: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
18721: LD_INT 0
18723: PPUSH
18724: PPUSH
18725: PPUSH
18726: PPUSH
18727: PPUSH
18728: PPUSH
18729: PPUSH
// result := [ ] ;
18730: LD_ADDR_VAR 0 2
18734: PUSH
18735: EMPTY
18736: ST_TO_ADDR
// if campaign_id = 1 then
18737: LD_OWVAR 69
18741: PUSH
18742: LD_INT 1
18744: EQUAL
18745: IFFALSE 21911
// begin case mission_number of 1 :
18747: LD_OWVAR 70
18751: PUSH
18752: LD_INT 1
18754: DOUBLE
18755: EQUAL
18756: IFTRUE 18760
18758: GO 18836
18760: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
18761: LD_ADDR_VAR 0 2
18765: PUSH
18766: LD_INT 2
18768: PUSH
18769: LD_INT 4
18771: PUSH
18772: LD_INT 11
18774: PUSH
18775: LD_INT 12
18777: PUSH
18778: LD_INT 15
18780: PUSH
18781: LD_INT 16
18783: PUSH
18784: LD_INT 22
18786: PUSH
18787: LD_INT 23
18789: PUSH
18790: LD_INT 26
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 101
18806: PUSH
18807: LD_INT 102
18809: PUSH
18810: LD_INT 106
18812: PUSH
18813: LD_INT 116
18815: PUSH
18816: LD_INT 117
18818: PUSH
18819: LD_INT 118
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: ST_TO_ADDR
18834: GO 21909
18836: LD_INT 2
18838: DOUBLE
18839: EQUAL
18840: IFTRUE 18844
18842: GO 18928
18844: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
18845: LD_ADDR_VAR 0 2
18849: PUSH
18850: LD_INT 2
18852: PUSH
18853: LD_INT 4
18855: PUSH
18856: LD_INT 11
18858: PUSH
18859: LD_INT 12
18861: PUSH
18862: LD_INT 15
18864: PUSH
18865: LD_INT 16
18867: PUSH
18868: LD_INT 22
18870: PUSH
18871: LD_INT 23
18873: PUSH
18874: LD_INT 26
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: PUSH
18888: LD_INT 101
18890: PUSH
18891: LD_INT 102
18893: PUSH
18894: LD_INT 105
18896: PUSH
18897: LD_INT 106
18899: PUSH
18900: LD_INT 108
18902: PUSH
18903: LD_INT 116
18905: PUSH
18906: LD_INT 117
18908: PUSH
18909: LD_INT 118
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: ST_TO_ADDR
18926: GO 21909
18928: LD_INT 3
18930: DOUBLE
18931: EQUAL
18932: IFTRUE 18936
18934: GO 19024
18936: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
18937: LD_ADDR_VAR 0 2
18941: PUSH
18942: LD_INT 2
18944: PUSH
18945: LD_INT 4
18947: PUSH
18948: LD_INT 5
18950: PUSH
18951: LD_INT 11
18953: PUSH
18954: LD_INT 12
18956: PUSH
18957: LD_INT 15
18959: PUSH
18960: LD_INT 16
18962: PUSH
18963: LD_INT 22
18965: PUSH
18966: LD_INT 26
18968: PUSH
18969: LD_INT 36
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 101
18986: PUSH
18987: LD_INT 102
18989: PUSH
18990: LD_INT 105
18992: PUSH
18993: LD_INT 106
18995: PUSH
18996: LD_INT 108
18998: PUSH
18999: LD_INT 116
19001: PUSH
19002: LD_INT 117
19004: PUSH
19005: LD_INT 118
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: ST_TO_ADDR
19022: GO 21909
19024: LD_INT 4
19026: DOUBLE
19027: EQUAL
19028: IFTRUE 19032
19030: GO 19128
19032: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
19033: LD_ADDR_VAR 0 2
19037: PUSH
19038: LD_INT 2
19040: PUSH
19041: LD_INT 4
19043: PUSH
19044: LD_INT 5
19046: PUSH
19047: LD_INT 8
19049: PUSH
19050: LD_INT 11
19052: PUSH
19053: LD_INT 12
19055: PUSH
19056: LD_INT 15
19058: PUSH
19059: LD_INT 16
19061: PUSH
19062: LD_INT 22
19064: PUSH
19065: LD_INT 23
19067: PUSH
19068: LD_INT 26
19070: PUSH
19071: LD_INT 36
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: PUSH
19088: LD_INT 101
19090: PUSH
19091: LD_INT 102
19093: PUSH
19094: LD_INT 105
19096: PUSH
19097: LD_INT 106
19099: PUSH
19100: LD_INT 108
19102: PUSH
19103: LD_INT 116
19105: PUSH
19106: LD_INT 117
19108: PUSH
19109: LD_INT 118
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: ST_TO_ADDR
19126: GO 21909
19128: LD_INT 5
19130: DOUBLE
19131: EQUAL
19132: IFTRUE 19136
19134: GO 19248
19136: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
19137: LD_ADDR_VAR 0 2
19141: PUSH
19142: LD_INT 2
19144: PUSH
19145: LD_INT 4
19147: PUSH
19148: LD_INT 5
19150: PUSH
19151: LD_INT 6
19153: PUSH
19154: LD_INT 8
19156: PUSH
19157: LD_INT 11
19159: PUSH
19160: LD_INT 12
19162: PUSH
19163: LD_INT 15
19165: PUSH
19166: LD_INT 16
19168: PUSH
19169: LD_INT 22
19171: PUSH
19172: LD_INT 23
19174: PUSH
19175: LD_INT 25
19177: PUSH
19178: LD_INT 26
19180: PUSH
19181: LD_INT 36
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: PUSH
19200: LD_INT 101
19202: PUSH
19203: LD_INT 102
19205: PUSH
19206: LD_INT 105
19208: PUSH
19209: LD_INT 106
19211: PUSH
19212: LD_INT 108
19214: PUSH
19215: LD_INT 109
19217: PUSH
19218: LD_INT 112
19220: PUSH
19221: LD_INT 116
19223: PUSH
19224: LD_INT 117
19226: PUSH
19227: LD_INT 118
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: ST_TO_ADDR
19246: GO 21909
19248: LD_INT 6
19250: DOUBLE
19251: EQUAL
19252: IFTRUE 19256
19254: GO 19388
19256: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
19257: LD_ADDR_VAR 0 2
19261: PUSH
19262: LD_INT 2
19264: PUSH
19265: LD_INT 4
19267: PUSH
19268: LD_INT 5
19270: PUSH
19271: LD_INT 6
19273: PUSH
19274: LD_INT 8
19276: PUSH
19277: LD_INT 11
19279: PUSH
19280: LD_INT 12
19282: PUSH
19283: LD_INT 15
19285: PUSH
19286: LD_INT 16
19288: PUSH
19289: LD_INT 20
19291: PUSH
19292: LD_INT 21
19294: PUSH
19295: LD_INT 22
19297: PUSH
19298: LD_INT 23
19300: PUSH
19301: LD_INT 25
19303: PUSH
19304: LD_INT 26
19306: PUSH
19307: LD_INT 30
19309: PUSH
19310: LD_INT 31
19312: PUSH
19313: LD_INT 32
19315: PUSH
19316: LD_INT 36
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: PUSH
19340: LD_INT 101
19342: PUSH
19343: LD_INT 102
19345: PUSH
19346: LD_INT 105
19348: PUSH
19349: LD_INT 106
19351: PUSH
19352: LD_INT 108
19354: PUSH
19355: LD_INT 109
19357: PUSH
19358: LD_INT 112
19360: PUSH
19361: LD_INT 116
19363: PUSH
19364: LD_INT 117
19366: PUSH
19367: LD_INT 118
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: ST_TO_ADDR
19386: GO 21909
19388: LD_INT 7
19390: DOUBLE
19391: EQUAL
19392: IFTRUE 19396
19394: GO 19508
19396: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
19397: LD_ADDR_VAR 0 2
19401: PUSH
19402: LD_INT 2
19404: PUSH
19405: LD_INT 4
19407: PUSH
19408: LD_INT 5
19410: PUSH
19411: LD_INT 7
19413: PUSH
19414: LD_INT 11
19416: PUSH
19417: LD_INT 12
19419: PUSH
19420: LD_INT 15
19422: PUSH
19423: LD_INT 16
19425: PUSH
19426: LD_INT 20
19428: PUSH
19429: LD_INT 21
19431: PUSH
19432: LD_INT 22
19434: PUSH
19435: LD_INT 23
19437: PUSH
19438: LD_INT 25
19440: PUSH
19441: LD_INT 26
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: PUSH
19460: LD_INT 101
19462: PUSH
19463: LD_INT 102
19465: PUSH
19466: LD_INT 103
19468: PUSH
19469: LD_INT 105
19471: PUSH
19472: LD_INT 106
19474: PUSH
19475: LD_INT 108
19477: PUSH
19478: LD_INT 112
19480: PUSH
19481: LD_INT 116
19483: PUSH
19484: LD_INT 117
19486: PUSH
19487: LD_INT 118
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: ST_TO_ADDR
19506: GO 21909
19508: LD_INT 8
19510: DOUBLE
19511: EQUAL
19512: IFTRUE 19516
19514: GO 19656
19516: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
19517: LD_ADDR_VAR 0 2
19521: PUSH
19522: LD_INT 2
19524: PUSH
19525: LD_INT 4
19527: PUSH
19528: LD_INT 5
19530: PUSH
19531: LD_INT 6
19533: PUSH
19534: LD_INT 7
19536: PUSH
19537: LD_INT 8
19539: PUSH
19540: LD_INT 11
19542: PUSH
19543: LD_INT 12
19545: PUSH
19546: LD_INT 15
19548: PUSH
19549: LD_INT 16
19551: PUSH
19552: LD_INT 20
19554: PUSH
19555: LD_INT 21
19557: PUSH
19558: LD_INT 22
19560: PUSH
19561: LD_INT 23
19563: PUSH
19564: LD_INT 25
19566: PUSH
19567: LD_INT 26
19569: PUSH
19570: LD_INT 30
19572: PUSH
19573: LD_INT 31
19575: PUSH
19576: LD_INT 32
19578: PUSH
19579: LD_INT 36
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: PUSH
19604: LD_INT 101
19606: PUSH
19607: LD_INT 102
19609: PUSH
19610: LD_INT 103
19612: PUSH
19613: LD_INT 105
19615: PUSH
19616: LD_INT 106
19618: PUSH
19619: LD_INT 108
19621: PUSH
19622: LD_INT 109
19624: PUSH
19625: LD_INT 112
19627: PUSH
19628: LD_INT 116
19630: PUSH
19631: LD_INT 117
19633: PUSH
19634: LD_INT 118
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: ST_TO_ADDR
19654: GO 21909
19656: LD_INT 9
19658: DOUBLE
19659: EQUAL
19660: IFTRUE 19664
19662: GO 19812
19664: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
19665: LD_ADDR_VAR 0 2
19669: PUSH
19670: LD_INT 2
19672: PUSH
19673: LD_INT 4
19675: PUSH
19676: LD_INT 5
19678: PUSH
19679: LD_INT 6
19681: PUSH
19682: LD_INT 7
19684: PUSH
19685: LD_INT 8
19687: PUSH
19688: LD_INT 11
19690: PUSH
19691: LD_INT 12
19693: PUSH
19694: LD_INT 15
19696: PUSH
19697: LD_INT 16
19699: PUSH
19700: LD_INT 20
19702: PUSH
19703: LD_INT 21
19705: PUSH
19706: LD_INT 22
19708: PUSH
19709: LD_INT 23
19711: PUSH
19712: LD_INT 25
19714: PUSH
19715: LD_INT 26
19717: PUSH
19718: LD_INT 28
19720: PUSH
19721: LD_INT 30
19723: PUSH
19724: LD_INT 31
19726: PUSH
19727: LD_INT 32
19729: PUSH
19730: LD_INT 36
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: PUSH
19756: LD_INT 101
19758: PUSH
19759: LD_INT 102
19761: PUSH
19762: LD_INT 103
19764: PUSH
19765: LD_INT 105
19767: PUSH
19768: LD_INT 106
19770: PUSH
19771: LD_INT 108
19773: PUSH
19774: LD_INT 109
19776: PUSH
19777: LD_INT 112
19779: PUSH
19780: LD_INT 114
19782: PUSH
19783: LD_INT 116
19785: PUSH
19786: LD_INT 117
19788: PUSH
19789: LD_INT 118
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: ST_TO_ADDR
19810: GO 21909
19812: LD_INT 10
19814: DOUBLE
19815: EQUAL
19816: IFTRUE 19820
19818: GO 20016
19820: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
19821: LD_ADDR_VAR 0 2
19825: PUSH
19826: LD_INT 2
19828: PUSH
19829: LD_INT 4
19831: PUSH
19832: LD_INT 5
19834: PUSH
19835: LD_INT 6
19837: PUSH
19838: LD_INT 7
19840: PUSH
19841: LD_INT 8
19843: PUSH
19844: LD_INT 9
19846: PUSH
19847: LD_INT 10
19849: PUSH
19850: LD_INT 11
19852: PUSH
19853: LD_INT 12
19855: PUSH
19856: LD_INT 13
19858: PUSH
19859: LD_INT 14
19861: PUSH
19862: LD_INT 15
19864: PUSH
19865: LD_INT 16
19867: PUSH
19868: LD_INT 17
19870: PUSH
19871: LD_INT 18
19873: PUSH
19874: LD_INT 19
19876: PUSH
19877: LD_INT 20
19879: PUSH
19880: LD_INT 21
19882: PUSH
19883: LD_INT 22
19885: PUSH
19886: LD_INT 23
19888: PUSH
19889: LD_INT 24
19891: PUSH
19892: LD_INT 25
19894: PUSH
19895: LD_INT 26
19897: PUSH
19898: LD_INT 28
19900: PUSH
19901: LD_INT 30
19903: PUSH
19904: LD_INT 31
19906: PUSH
19907: LD_INT 32
19909: PUSH
19910: LD_INT 36
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 101
19946: PUSH
19947: LD_INT 102
19949: PUSH
19950: LD_INT 103
19952: PUSH
19953: LD_INT 104
19955: PUSH
19956: LD_INT 105
19958: PUSH
19959: LD_INT 106
19961: PUSH
19962: LD_INT 107
19964: PUSH
19965: LD_INT 108
19967: PUSH
19968: LD_INT 109
19970: PUSH
19971: LD_INT 110
19973: PUSH
19974: LD_INT 111
19976: PUSH
19977: LD_INT 112
19979: PUSH
19980: LD_INT 114
19982: PUSH
19983: LD_INT 116
19985: PUSH
19986: LD_INT 117
19988: PUSH
19989: LD_INT 118
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: ST_TO_ADDR
20014: GO 21909
20016: LD_INT 11
20018: DOUBLE
20019: EQUAL
20020: IFTRUE 20024
20022: GO 20228
20024: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
20025: LD_ADDR_VAR 0 2
20029: PUSH
20030: LD_INT 2
20032: PUSH
20033: LD_INT 3
20035: PUSH
20036: LD_INT 4
20038: PUSH
20039: LD_INT 5
20041: PUSH
20042: LD_INT 6
20044: PUSH
20045: LD_INT 7
20047: PUSH
20048: LD_INT 8
20050: PUSH
20051: LD_INT 9
20053: PUSH
20054: LD_INT 10
20056: PUSH
20057: LD_INT 11
20059: PUSH
20060: LD_INT 12
20062: PUSH
20063: LD_INT 13
20065: PUSH
20066: LD_INT 14
20068: PUSH
20069: LD_INT 15
20071: PUSH
20072: LD_INT 16
20074: PUSH
20075: LD_INT 17
20077: PUSH
20078: LD_INT 18
20080: PUSH
20081: LD_INT 19
20083: PUSH
20084: LD_INT 20
20086: PUSH
20087: LD_INT 21
20089: PUSH
20090: LD_INT 22
20092: PUSH
20093: LD_INT 23
20095: PUSH
20096: LD_INT 24
20098: PUSH
20099: LD_INT 25
20101: PUSH
20102: LD_INT 26
20104: PUSH
20105: LD_INT 28
20107: PUSH
20108: LD_INT 30
20110: PUSH
20111: LD_INT 31
20113: PUSH
20114: LD_INT 32
20116: PUSH
20117: LD_INT 34
20119: PUSH
20120: LD_INT 36
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: PUSH
20156: LD_INT 101
20158: PUSH
20159: LD_INT 102
20161: PUSH
20162: LD_INT 103
20164: PUSH
20165: LD_INT 104
20167: PUSH
20168: LD_INT 105
20170: PUSH
20171: LD_INT 106
20173: PUSH
20174: LD_INT 107
20176: PUSH
20177: LD_INT 108
20179: PUSH
20180: LD_INT 109
20182: PUSH
20183: LD_INT 110
20185: PUSH
20186: LD_INT 111
20188: PUSH
20189: LD_INT 112
20191: PUSH
20192: LD_INT 114
20194: PUSH
20195: LD_INT 116
20197: PUSH
20198: LD_INT 117
20200: PUSH
20201: LD_INT 118
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: ST_TO_ADDR
20226: GO 21909
20228: LD_INT 12
20230: DOUBLE
20231: EQUAL
20232: IFTRUE 20236
20234: GO 20456
20236: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
20237: LD_ADDR_VAR 0 2
20241: PUSH
20242: LD_INT 1
20244: PUSH
20245: LD_INT 2
20247: PUSH
20248: LD_INT 3
20250: PUSH
20251: LD_INT 4
20253: PUSH
20254: LD_INT 5
20256: PUSH
20257: LD_INT 6
20259: PUSH
20260: LD_INT 7
20262: PUSH
20263: LD_INT 8
20265: PUSH
20266: LD_INT 9
20268: PUSH
20269: LD_INT 10
20271: PUSH
20272: LD_INT 11
20274: PUSH
20275: LD_INT 12
20277: PUSH
20278: LD_INT 13
20280: PUSH
20281: LD_INT 14
20283: PUSH
20284: LD_INT 15
20286: PUSH
20287: LD_INT 16
20289: PUSH
20290: LD_INT 17
20292: PUSH
20293: LD_INT 18
20295: PUSH
20296: LD_INT 19
20298: PUSH
20299: LD_INT 20
20301: PUSH
20302: LD_INT 21
20304: PUSH
20305: LD_INT 22
20307: PUSH
20308: LD_INT 23
20310: PUSH
20311: LD_INT 24
20313: PUSH
20314: LD_INT 25
20316: PUSH
20317: LD_INT 26
20319: PUSH
20320: LD_INT 27
20322: PUSH
20323: LD_INT 28
20325: PUSH
20326: LD_INT 30
20328: PUSH
20329: LD_INT 31
20331: PUSH
20332: LD_INT 32
20334: PUSH
20335: LD_INT 33
20337: PUSH
20338: LD_INT 34
20340: PUSH
20341: LD_INT 36
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: PUSH
20380: LD_INT 101
20382: PUSH
20383: LD_INT 102
20385: PUSH
20386: LD_INT 103
20388: PUSH
20389: LD_INT 104
20391: PUSH
20392: LD_INT 105
20394: PUSH
20395: LD_INT 106
20397: PUSH
20398: LD_INT 107
20400: PUSH
20401: LD_INT 108
20403: PUSH
20404: LD_INT 109
20406: PUSH
20407: LD_INT 110
20409: PUSH
20410: LD_INT 111
20412: PUSH
20413: LD_INT 112
20415: PUSH
20416: LD_INT 113
20418: PUSH
20419: LD_INT 114
20421: PUSH
20422: LD_INT 116
20424: PUSH
20425: LD_INT 117
20427: PUSH
20428: LD_INT 118
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: ST_TO_ADDR
20454: GO 21909
20456: LD_INT 13
20458: DOUBLE
20459: EQUAL
20460: IFTRUE 20464
20462: GO 20672
20464: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
20465: LD_ADDR_VAR 0 2
20469: PUSH
20470: LD_INT 1
20472: PUSH
20473: LD_INT 2
20475: PUSH
20476: LD_INT 3
20478: PUSH
20479: LD_INT 4
20481: PUSH
20482: LD_INT 5
20484: PUSH
20485: LD_INT 8
20487: PUSH
20488: LD_INT 9
20490: PUSH
20491: LD_INT 10
20493: PUSH
20494: LD_INT 11
20496: PUSH
20497: LD_INT 12
20499: PUSH
20500: LD_INT 14
20502: PUSH
20503: LD_INT 15
20505: PUSH
20506: LD_INT 16
20508: PUSH
20509: LD_INT 17
20511: PUSH
20512: LD_INT 18
20514: PUSH
20515: LD_INT 19
20517: PUSH
20518: LD_INT 20
20520: PUSH
20521: LD_INT 21
20523: PUSH
20524: LD_INT 22
20526: PUSH
20527: LD_INT 23
20529: PUSH
20530: LD_INT 24
20532: PUSH
20533: LD_INT 25
20535: PUSH
20536: LD_INT 26
20538: PUSH
20539: LD_INT 27
20541: PUSH
20542: LD_INT 28
20544: PUSH
20545: LD_INT 30
20547: PUSH
20548: LD_INT 31
20550: PUSH
20551: LD_INT 32
20553: PUSH
20554: LD_INT 33
20556: PUSH
20557: LD_INT 34
20559: PUSH
20560: LD_INT 36
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: PUSH
20596: LD_INT 101
20598: PUSH
20599: LD_INT 102
20601: PUSH
20602: LD_INT 103
20604: PUSH
20605: LD_INT 104
20607: PUSH
20608: LD_INT 105
20610: PUSH
20611: LD_INT 106
20613: PUSH
20614: LD_INT 107
20616: PUSH
20617: LD_INT 108
20619: PUSH
20620: LD_INT 109
20622: PUSH
20623: LD_INT 110
20625: PUSH
20626: LD_INT 111
20628: PUSH
20629: LD_INT 112
20631: PUSH
20632: LD_INT 113
20634: PUSH
20635: LD_INT 114
20637: PUSH
20638: LD_INT 116
20640: PUSH
20641: LD_INT 117
20643: PUSH
20644: LD_INT 118
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: ST_TO_ADDR
20670: GO 21909
20672: LD_INT 14
20674: DOUBLE
20675: EQUAL
20676: IFTRUE 20680
20678: GO 20904
20680: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
20681: LD_ADDR_VAR 0 2
20685: PUSH
20686: LD_INT 1
20688: PUSH
20689: LD_INT 2
20691: PUSH
20692: LD_INT 3
20694: PUSH
20695: LD_INT 4
20697: PUSH
20698: LD_INT 5
20700: PUSH
20701: LD_INT 6
20703: PUSH
20704: LD_INT 7
20706: PUSH
20707: LD_INT 8
20709: PUSH
20710: LD_INT 9
20712: PUSH
20713: LD_INT 10
20715: PUSH
20716: LD_INT 11
20718: PUSH
20719: LD_INT 12
20721: PUSH
20722: LD_INT 13
20724: PUSH
20725: LD_INT 14
20727: PUSH
20728: LD_INT 15
20730: PUSH
20731: LD_INT 16
20733: PUSH
20734: LD_INT 17
20736: PUSH
20737: LD_INT 18
20739: PUSH
20740: LD_INT 19
20742: PUSH
20743: LD_INT 20
20745: PUSH
20746: LD_INT 21
20748: PUSH
20749: LD_INT 22
20751: PUSH
20752: LD_INT 23
20754: PUSH
20755: LD_INT 24
20757: PUSH
20758: LD_INT 25
20760: PUSH
20761: LD_INT 26
20763: PUSH
20764: LD_INT 27
20766: PUSH
20767: LD_INT 28
20769: PUSH
20770: LD_INT 29
20772: PUSH
20773: LD_INT 30
20775: PUSH
20776: LD_INT 31
20778: PUSH
20779: LD_INT 32
20781: PUSH
20782: LD_INT 33
20784: PUSH
20785: LD_INT 34
20787: PUSH
20788: LD_INT 36
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: PUSH
20828: LD_INT 101
20830: PUSH
20831: LD_INT 102
20833: PUSH
20834: LD_INT 103
20836: PUSH
20837: LD_INT 104
20839: PUSH
20840: LD_INT 105
20842: PUSH
20843: LD_INT 106
20845: PUSH
20846: LD_INT 107
20848: PUSH
20849: LD_INT 108
20851: PUSH
20852: LD_INT 109
20854: PUSH
20855: LD_INT 110
20857: PUSH
20858: LD_INT 111
20860: PUSH
20861: LD_INT 112
20863: PUSH
20864: LD_INT 113
20866: PUSH
20867: LD_INT 114
20869: PUSH
20870: LD_INT 116
20872: PUSH
20873: LD_INT 117
20875: PUSH
20876: LD_INT 118
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: ST_TO_ADDR
20902: GO 21909
20904: LD_INT 15
20906: DOUBLE
20907: EQUAL
20908: IFTRUE 20912
20910: GO 21136
20912: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
20913: LD_ADDR_VAR 0 2
20917: PUSH
20918: LD_INT 1
20920: PUSH
20921: LD_INT 2
20923: PUSH
20924: LD_INT 3
20926: PUSH
20927: LD_INT 4
20929: PUSH
20930: LD_INT 5
20932: PUSH
20933: LD_INT 6
20935: PUSH
20936: LD_INT 7
20938: PUSH
20939: LD_INT 8
20941: PUSH
20942: LD_INT 9
20944: PUSH
20945: LD_INT 10
20947: PUSH
20948: LD_INT 11
20950: PUSH
20951: LD_INT 12
20953: PUSH
20954: LD_INT 13
20956: PUSH
20957: LD_INT 14
20959: PUSH
20960: LD_INT 15
20962: PUSH
20963: LD_INT 16
20965: PUSH
20966: LD_INT 17
20968: PUSH
20969: LD_INT 18
20971: PUSH
20972: LD_INT 19
20974: PUSH
20975: LD_INT 20
20977: PUSH
20978: LD_INT 21
20980: PUSH
20981: LD_INT 22
20983: PUSH
20984: LD_INT 23
20986: PUSH
20987: LD_INT 24
20989: PUSH
20990: LD_INT 25
20992: PUSH
20993: LD_INT 26
20995: PUSH
20996: LD_INT 27
20998: PUSH
20999: LD_INT 28
21001: PUSH
21002: LD_INT 29
21004: PUSH
21005: LD_INT 30
21007: PUSH
21008: LD_INT 31
21010: PUSH
21011: LD_INT 32
21013: PUSH
21014: LD_INT 33
21016: PUSH
21017: LD_INT 34
21019: PUSH
21020: LD_INT 36
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: PUSH
21060: LD_INT 101
21062: PUSH
21063: LD_INT 102
21065: PUSH
21066: LD_INT 103
21068: PUSH
21069: LD_INT 104
21071: PUSH
21072: LD_INT 105
21074: PUSH
21075: LD_INT 106
21077: PUSH
21078: LD_INT 107
21080: PUSH
21081: LD_INT 108
21083: PUSH
21084: LD_INT 109
21086: PUSH
21087: LD_INT 110
21089: PUSH
21090: LD_INT 111
21092: PUSH
21093: LD_INT 112
21095: PUSH
21096: LD_INT 113
21098: PUSH
21099: LD_INT 114
21101: PUSH
21102: LD_INT 116
21104: PUSH
21105: LD_INT 117
21107: PUSH
21108: LD_INT 118
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: ST_TO_ADDR
21134: GO 21909
21136: LD_INT 16
21138: DOUBLE
21139: EQUAL
21140: IFTRUE 21144
21142: GO 21280
21144: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
21145: LD_ADDR_VAR 0 2
21149: PUSH
21150: LD_INT 2
21152: PUSH
21153: LD_INT 4
21155: PUSH
21156: LD_INT 5
21158: PUSH
21159: LD_INT 7
21161: PUSH
21162: LD_INT 11
21164: PUSH
21165: LD_INT 12
21167: PUSH
21168: LD_INT 15
21170: PUSH
21171: LD_INT 16
21173: PUSH
21174: LD_INT 20
21176: PUSH
21177: LD_INT 21
21179: PUSH
21180: LD_INT 22
21182: PUSH
21183: LD_INT 23
21185: PUSH
21186: LD_INT 25
21188: PUSH
21189: LD_INT 26
21191: PUSH
21192: LD_INT 30
21194: PUSH
21195: LD_INT 31
21197: PUSH
21198: LD_INT 32
21200: PUSH
21201: LD_INT 33
21203: PUSH
21204: LD_INT 34
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: PUSH
21228: LD_INT 101
21230: PUSH
21231: LD_INT 102
21233: PUSH
21234: LD_INT 103
21236: PUSH
21237: LD_INT 106
21239: PUSH
21240: LD_INT 108
21242: PUSH
21243: LD_INT 112
21245: PUSH
21246: LD_INT 113
21248: PUSH
21249: LD_INT 114
21251: PUSH
21252: LD_INT 116
21254: PUSH
21255: LD_INT 117
21257: PUSH
21258: LD_INT 118
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: ST_TO_ADDR
21278: GO 21909
21280: LD_INT 17
21282: DOUBLE
21283: EQUAL
21284: IFTRUE 21288
21286: GO 21512
21288: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
21289: LD_ADDR_VAR 0 2
21293: PUSH
21294: LD_INT 1
21296: PUSH
21297: LD_INT 2
21299: PUSH
21300: LD_INT 3
21302: PUSH
21303: LD_INT 4
21305: PUSH
21306: LD_INT 5
21308: PUSH
21309: LD_INT 6
21311: PUSH
21312: LD_INT 7
21314: PUSH
21315: LD_INT 8
21317: PUSH
21318: LD_INT 9
21320: PUSH
21321: LD_INT 10
21323: PUSH
21324: LD_INT 11
21326: PUSH
21327: LD_INT 12
21329: PUSH
21330: LD_INT 13
21332: PUSH
21333: LD_INT 14
21335: PUSH
21336: LD_INT 15
21338: PUSH
21339: LD_INT 16
21341: PUSH
21342: LD_INT 17
21344: PUSH
21345: LD_INT 18
21347: PUSH
21348: LD_INT 19
21350: PUSH
21351: LD_INT 20
21353: PUSH
21354: LD_INT 21
21356: PUSH
21357: LD_INT 22
21359: PUSH
21360: LD_INT 23
21362: PUSH
21363: LD_INT 24
21365: PUSH
21366: LD_INT 25
21368: PUSH
21369: LD_INT 26
21371: PUSH
21372: LD_INT 27
21374: PUSH
21375: LD_INT 28
21377: PUSH
21378: LD_INT 29
21380: PUSH
21381: LD_INT 30
21383: PUSH
21384: LD_INT 31
21386: PUSH
21387: LD_INT 32
21389: PUSH
21390: LD_INT 33
21392: PUSH
21393: LD_INT 34
21395: PUSH
21396: LD_INT 36
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: PUSH
21436: LD_INT 101
21438: PUSH
21439: LD_INT 102
21441: PUSH
21442: LD_INT 103
21444: PUSH
21445: LD_INT 104
21447: PUSH
21448: LD_INT 105
21450: PUSH
21451: LD_INT 106
21453: PUSH
21454: LD_INT 107
21456: PUSH
21457: LD_INT 108
21459: PUSH
21460: LD_INT 109
21462: PUSH
21463: LD_INT 110
21465: PUSH
21466: LD_INT 111
21468: PUSH
21469: LD_INT 112
21471: PUSH
21472: LD_INT 113
21474: PUSH
21475: LD_INT 114
21477: PUSH
21478: LD_INT 116
21480: PUSH
21481: LD_INT 117
21483: PUSH
21484: LD_INT 118
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: ST_TO_ADDR
21510: GO 21909
21512: LD_INT 18
21514: DOUBLE
21515: EQUAL
21516: IFTRUE 21520
21518: GO 21668
21520: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
21521: LD_ADDR_VAR 0 2
21525: PUSH
21526: LD_INT 2
21528: PUSH
21529: LD_INT 4
21531: PUSH
21532: LD_INT 5
21534: PUSH
21535: LD_INT 7
21537: PUSH
21538: LD_INT 11
21540: PUSH
21541: LD_INT 12
21543: PUSH
21544: LD_INT 15
21546: PUSH
21547: LD_INT 16
21549: PUSH
21550: LD_INT 20
21552: PUSH
21553: LD_INT 21
21555: PUSH
21556: LD_INT 22
21558: PUSH
21559: LD_INT 23
21561: PUSH
21562: LD_INT 25
21564: PUSH
21565: LD_INT 26
21567: PUSH
21568: LD_INT 30
21570: PUSH
21571: LD_INT 31
21573: PUSH
21574: LD_INT 32
21576: PUSH
21577: LD_INT 33
21579: PUSH
21580: LD_INT 34
21582: PUSH
21583: LD_INT 35
21585: PUSH
21586: LD_INT 36
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 101
21614: PUSH
21615: LD_INT 102
21617: PUSH
21618: LD_INT 103
21620: PUSH
21621: LD_INT 106
21623: PUSH
21624: LD_INT 108
21626: PUSH
21627: LD_INT 112
21629: PUSH
21630: LD_INT 113
21632: PUSH
21633: LD_INT 114
21635: PUSH
21636: LD_INT 115
21638: PUSH
21639: LD_INT 116
21641: PUSH
21642: LD_INT 117
21644: PUSH
21645: LD_INT 118
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: ST_TO_ADDR
21666: GO 21909
21668: LD_INT 19
21670: DOUBLE
21671: EQUAL
21672: IFTRUE 21676
21674: GO 21908
21676: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
21677: LD_ADDR_VAR 0 2
21681: PUSH
21682: LD_INT 1
21684: PUSH
21685: LD_INT 2
21687: PUSH
21688: LD_INT 3
21690: PUSH
21691: LD_INT 4
21693: PUSH
21694: LD_INT 5
21696: PUSH
21697: LD_INT 6
21699: PUSH
21700: LD_INT 7
21702: PUSH
21703: LD_INT 8
21705: PUSH
21706: LD_INT 9
21708: PUSH
21709: LD_INT 10
21711: PUSH
21712: LD_INT 11
21714: PUSH
21715: LD_INT 12
21717: PUSH
21718: LD_INT 13
21720: PUSH
21721: LD_INT 14
21723: PUSH
21724: LD_INT 15
21726: PUSH
21727: LD_INT 16
21729: PUSH
21730: LD_INT 17
21732: PUSH
21733: LD_INT 18
21735: PUSH
21736: LD_INT 19
21738: PUSH
21739: LD_INT 20
21741: PUSH
21742: LD_INT 21
21744: PUSH
21745: LD_INT 22
21747: PUSH
21748: LD_INT 23
21750: PUSH
21751: LD_INT 24
21753: PUSH
21754: LD_INT 25
21756: PUSH
21757: LD_INT 26
21759: PUSH
21760: LD_INT 27
21762: PUSH
21763: LD_INT 28
21765: PUSH
21766: LD_INT 29
21768: PUSH
21769: LD_INT 30
21771: PUSH
21772: LD_INT 31
21774: PUSH
21775: LD_INT 32
21777: PUSH
21778: LD_INT 33
21780: PUSH
21781: LD_INT 34
21783: PUSH
21784: LD_INT 35
21786: PUSH
21787: LD_INT 36
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: PUSH
21828: LD_INT 101
21830: PUSH
21831: LD_INT 102
21833: PUSH
21834: LD_INT 103
21836: PUSH
21837: LD_INT 104
21839: PUSH
21840: LD_INT 105
21842: PUSH
21843: LD_INT 106
21845: PUSH
21846: LD_INT 107
21848: PUSH
21849: LD_INT 108
21851: PUSH
21852: LD_INT 109
21854: PUSH
21855: LD_INT 110
21857: PUSH
21858: LD_INT 111
21860: PUSH
21861: LD_INT 112
21863: PUSH
21864: LD_INT 113
21866: PUSH
21867: LD_INT 114
21869: PUSH
21870: LD_INT 115
21872: PUSH
21873: LD_INT 116
21875: PUSH
21876: LD_INT 117
21878: PUSH
21879: LD_INT 118
21881: PUSH
21882: EMPTY
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: ST_TO_ADDR
21906: GO 21909
21908: POP
// end else
21909: GO 22140
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
21911: LD_ADDR_VAR 0 2
21915: PUSH
21916: LD_INT 1
21918: PUSH
21919: LD_INT 2
21921: PUSH
21922: LD_INT 3
21924: PUSH
21925: LD_INT 4
21927: PUSH
21928: LD_INT 5
21930: PUSH
21931: LD_INT 6
21933: PUSH
21934: LD_INT 7
21936: PUSH
21937: LD_INT 8
21939: PUSH
21940: LD_INT 9
21942: PUSH
21943: LD_INT 10
21945: PUSH
21946: LD_INT 11
21948: PUSH
21949: LD_INT 12
21951: PUSH
21952: LD_INT 13
21954: PUSH
21955: LD_INT 14
21957: PUSH
21958: LD_INT 15
21960: PUSH
21961: LD_INT 16
21963: PUSH
21964: LD_INT 17
21966: PUSH
21967: LD_INT 18
21969: PUSH
21970: LD_INT 19
21972: PUSH
21973: LD_INT 20
21975: PUSH
21976: LD_INT 21
21978: PUSH
21979: LD_INT 22
21981: PUSH
21982: LD_INT 23
21984: PUSH
21985: LD_INT 24
21987: PUSH
21988: LD_INT 25
21990: PUSH
21991: LD_INT 26
21993: PUSH
21994: LD_INT 27
21996: PUSH
21997: LD_INT 28
21999: PUSH
22000: LD_INT 29
22002: PUSH
22003: LD_INT 30
22005: PUSH
22006: LD_INT 31
22008: PUSH
22009: LD_INT 32
22011: PUSH
22012: LD_INT 33
22014: PUSH
22015: LD_INT 34
22017: PUSH
22018: LD_INT 35
22020: PUSH
22021: LD_INT 36
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: PUSH
22062: LD_INT 101
22064: PUSH
22065: LD_INT 102
22067: PUSH
22068: LD_INT 103
22070: PUSH
22071: LD_INT 104
22073: PUSH
22074: LD_INT 105
22076: PUSH
22077: LD_INT 106
22079: PUSH
22080: LD_INT 107
22082: PUSH
22083: LD_INT 108
22085: PUSH
22086: LD_INT 109
22088: PUSH
22089: LD_INT 110
22091: PUSH
22092: LD_INT 111
22094: PUSH
22095: LD_INT 112
22097: PUSH
22098: LD_INT 113
22100: PUSH
22101: LD_INT 114
22103: PUSH
22104: LD_INT 115
22106: PUSH
22107: LD_INT 116
22109: PUSH
22110: LD_INT 117
22112: PUSH
22113: LD_INT 118
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: ST_TO_ADDR
// if result then
22140: LD_VAR 0 2
22144: IFFALSE 22930
// begin normal :=  ;
22146: LD_ADDR_VAR 0 5
22150: PUSH
22151: LD_STRING 
22153: ST_TO_ADDR
// hardcore :=  ;
22154: LD_ADDR_VAR 0 6
22158: PUSH
22159: LD_STRING 
22161: ST_TO_ADDR
// active :=  ;
22162: LD_ADDR_VAR 0 7
22166: PUSH
22167: LD_STRING 
22169: ST_TO_ADDR
// for i = 1 to normalCounter do
22170: LD_ADDR_VAR 0 8
22174: PUSH
22175: DOUBLE
22176: LD_INT 1
22178: DEC
22179: ST_TO_ADDR
22180: LD_EXP 53
22184: PUSH
22185: FOR_TO
22186: IFFALSE 22287
// begin tmp := 0 ;
22188: LD_ADDR_VAR 0 3
22192: PUSH
22193: LD_STRING 0
22195: ST_TO_ADDR
// if result [ 1 ] then
22196: LD_VAR 0 2
22200: PUSH
22201: LD_INT 1
22203: ARRAY
22204: IFFALSE 22269
// if result [ 1 ] [ 1 ] = i then
22206: LD_VAR 0 2
22210: PUSH
22211: LD_INT 1
22213: ARRAY
22214: PUSH
22215: LD_INT 1
22217: ARRAY
22218: PUSH
22219: LD_VAR 0 8
22223: EQUAL
22224: IFFALSE 22269
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22226: LD_ADDR_VAR 0 2
22230: PUSH
22231: LD_VAR 0 2
22235: PPUSH
22236: LD_INT 1
22238: PPUSH
22239: LD_VAR 0 2
22243: PUSH
22244: LD_INT 1
22246: ARRAY
22247: PPUSH
22248: LD_INT 1
22250: PPUSH
22251: CALL_OW 3
22255: PPUSH
22256: CALL_OW 1
22260: ST_TO_ADDR
// tmp := 1 ;
22261: LD_ADDR_VAR 0 3
22265: PUSH
22266: LD_STRING 1
22268: ST_TO_ADDR
// end ; normal := normal & tmp ;
22269: LD_ADDR_VAR 0 5
22273: PUSH
22274: LD_VAR 0 5
22278: PUSH
22279: LD_VAR 0 3
22283: STR
22284: ST_TO_ADDR
// end ;
22285: GO 22185
22287: POP
22288: POP
// for i = 1 to hardcoreCounter do
22289: LD_ADDR_VAR 0 8
22293: PUSH
22294: DOUBLE
22295: LD_INT 1
22297: DEC
22298: ST_TO_ADDR
22299: LD_EXP 54
22303: PUSH
22304: FOR_TO
22305: IFFALSE 22410
// begin tmp := 0 ;
22307: LD_ADDR_VAR 0 3
22311: PUSH
22312: LD_STRING 0
22314: ST_TO_ADDR
// if result [ 2 ] then
22315: LD_VAR 0 2
22319: PUSH
22320: LD_INT 2
22322: ARRAY
22323: IFFALSE 22392
// if result [ 2 ] [ 1 ] = 100 + i then
22325: LD_VAR 0 2
22329: PUSH
22330: LD_INT 2
22332: ARRAY
22333: PUSH
22334: LD_INT 1
22336: ARRAY
22337: PUSH
22338: LD_INT 100
22340: PUSH
22341: LD_VAR 0 8
22345: PLUS
22346: EQUAL
22347: IFFALSE 22392
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22349: LD_ADDR_VAR 0 2
22353: PUSH
22354: LD_VAR 0 2
22358: PPUSH
22359: LD_INT 2
22361: PPUSH
22362: LD_VAR 0 2
22366: PUSH
22367: LD_INT 2
22369: ARRAY
22370: PPUSH
22371: LD_INT 1
22373: PPUSH
22374: CALL_OW 3
22378: PPUSH
22379: CALL_OW 1
22383: ST_TO_ADDR
// tmp := 1 ;
22384: LD_ADDR_VAR 0 3
22388: PUSH
22389: LD_STRING 1
22391: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22392: LD_ADDR_VAR 0 6
22396: PUSH
22397: LD_VAR 0 6
22401: PUSH
22402: LD_VAR 0 3
22406: STR
22407: ST_TO_ADDR
// end ;
22408: GO 22304
22410: POP
22411: POP
// if isGameLoad then
22412: LD_VAR 0 1
22416: IFFALSE 22891
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
22418: LD_ADDR_VAR 0 4
22422: PUSH
22423: LD_EXP 57
22427: PUSH
22428: LD_EXP 56
22432: PUSH
22433: LD_EXP 58
22437: PUSH
22438: LD_EXP 55
22442: PUSH
22443: LD_EXP 59
22447: PUSH
22448: LD_EXP 60
22452: PUSH
22453: LD_EXP 61
22457: PUSH
22458: LD_EXP 62
22462: PUSH
22463: LD_EXP 63
22467: PUSH
22468: LD_EXP 64
22472: PUSH
22473: LD_EXP 65
22477: PUSH
22478: LD_EXP 66
22482: PUSH
22483: LD_EXP 67
22487: PUSH
22488: LD_EXP 68
22492: PUSH
22493: LD_EXP 76
22497: PUSH
22498: LD_EXP 77
22502: PUSH
22503: LD_EXP 78
22507: PUSH
22508: LD_EXP 79
22512: PUSH
22513: LD_EXP 81
22517: PUSH
22518: LD_EXP 82
22522: PUSH
22523: LD_EXP 83
22527: PUSH
22528: LD_EXP 86
22532: PUSH
22533: LD_EXP 88
22537: PUSH
22538: LD_EXP 89
22542: PUSH
22543: LD_EXP 90
22547: PUSH
22548: LD_EXP 92
22552: PUSH
22553: LD_EXP 93
22557: PUSH
22558: LD_EXP 96
22562: PUSH
22563: LD_EXP 97
22567: PUSH
22568: LD_EXP 98
22572: PUSH
22573: LD_EXP 99
22577: PUSH
22578: LD_EXP 100
22582: PUSH
22583: LD_EXP 101
22587: PUSH
22588: LD_EXP 102
22592: PUSH
22593: LD_EXP 103
22597: PUSH
22598: LD_EXP 104
22602: PUSH
22603: LD_EXP 69
22607: PUSH
22608: LD_EXP 70
22612: PUSH
22613: LD_EXP 73
22617: PUSH
22618: LD_EXP 74
22622: PUSH
22623: LD_EXP 75
22627: PUSH
22628: LD_EXP 71
22632: PUSH
22633: LD_EXP 72
22637: PUSH
22638: LD_EXP 80
22642: PUSH
22643: LD_EXP 84
22647: PUSH
22648: LD_EXP 85
22652: PUSH
22653: LD_EXP 87
22657: PUSH
22658: LD_EXP 91
22662: PUSH
22663: LD_EXP 94
22667: PUSH
22668: LD_EXP 95
22672: PUSH
22673: LD_EXP 105
22677: PUSH
22678: LD_EXP 106
22682: PUSH
22683: LD_EXP 107
22687: PUSH
22688: LD_EXP 108
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: ST_TO_ADDR
// tmp :=  ;
22749: LD_ADDR_VAR 0 3
22753: PUSH
22754: LD_STRING 
22756: ST_TO_ADDR
// for i = 1 to normalCounter do
22757: LD_ADDR_VAR 0 8
22761: PUSH
22762: DOUBLE
22763: LD_INT 1
22765: DEC
22766: ST_TO_ADDR
22767: LD_EXP 53
22771: PUSH
22772: FOR_TO
22773: IFFALSE 22809
// begin if flags [ i ] then
22775: LD_VAR 0 4
22779: PUSH
22780: LD_VAR 0 8
22784: ARRAY
22785: IFFALSE 22807
// tmp := tmp & i & ; ;
22787: LD_ADDR_VAR 0 3
22791: PUSH
22792: LD_VAR 0 3
22796: PUSH
22797: LD_VAR 0 8
22801: STR
22802: PUSH
22803: LD_STRING ;
22805: STR
22806: ST_TO_ADDR
// end ;
22807: GO 22772
22809: POP
22810: POP
// for i = 1 to hardcoreCounter do
22811: LD_ADDR_VAR 0 8
22815: PUSH
22816: DOUBLE
22817: LD_INT 1
22819: DEC
22820: ST_TO_ADDR
22821: LD_EXP 54
22825: PUSH
22826: FOR_TO
22827: IFFALSE 22873
// begin if flags [ normalCounter + i ] then
22829: LD_VAR 0 4
22833: PUSH
22834: LD_EXP 53
22838: PUSH
22839: LD_VAR 0 8
22843: PLUS
22844: ARRAY
22845: IFFALSE 22871
// tmp := tmp & ( 100 + i ) & ; ;
22847: LD_ADDR_VAR 0 3
22851: PUSH
22852: LD_VAR 0 3
22856: PUSH
22857: LD_INT 100
22859: PUSH
22860: LD_VAR 0 8
22864: PLUS
22865: STR
22866: PUSH
22867: LD_STRING ;
22869: STR
22870: ST_TO_ADDR
// end ;
22871: GO 22826
22873: POP
22874: POP
// if tmp then
22875: LD_VAR 0 3
22879: IFFALSE 22891
// active := tmp ;
22881: LD_ADDR_VAR 0 7
22885: PUSH
22886: LD_VAR 0 3
22890: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
22891: LD_STRING getStreamItemsFromMission("
22893: PUSH
22894: LD_VAR 0 5
22898: STR
22899: PUSH
22900: LD_STRING ","
22902: STR
22903: PUSH
22904: LD_VAR 0 6
22908: STR
22909: PUSH
22910: LD_STRING ","
22912: STR
22913: PUSH
22914: LD_VAR 0 7
22918: STR
22919: PUSH
22920: LD_STRING ")
22922: STR
22923: PPUSH
22924: CALL_OW 559
// end else
22928: GO 22937
// ToLua ( getStreamItemsFromMission("","","") ) ;
22930: LD_STRING getStreamItemsFromMission("","","")
22932: PPUSH
22933: CALL_OW 559
// end ;
22937: LD_VAR 0 2
22941: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
22942: LD_EXP 52
22946: PUSH
22947: LD_EXP 57
22951: AND
22952: IFFALSE 23076
22954: GO 22956
22956: DISABLE
22957: LD_INT 0
22959: PPUSH
22960: PPUSH
// begin enable ;
22961: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
22962: LD_ADDR_VAR 0 2
22966: PUSH
22967: LD_INT 22
22969: PUSH
22970: LD_OWVAR 2
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 2
22981: PUSH
22982: LD_INT 34
22984: PUSH
22985: LD_INT 7
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 34
22994: PUSH
22995: LD_INT 45
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 34
23004: PUSH
23005: LD_INT 28
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PUSH
23012: LD_INT 34
23014: PUSH
23015: LD_INT 47
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PPUSH
23033: CALL_OW 69
23037: ST_TO_ADDR
// if not tmp then
23038: LD_VAR 0 2
23042: NOT
23043: IFFALSE 23047
// exit ;
23045: GO 23076
// for i in tmp do
23047: LD_ADDR_VAR 0 1
23051: PUSH
23052: LD_VAR 0 2
23056: PUSH
23057: FOR_IN
23058: IFFALSE 23074
// begin SetLives ( i , 0 ) ;
23060: LD_VAR 0 1
23064: PPUSH
23065: LD_INT 0
23067: PPUSH
23068: CALL_OW 234
// end ;
23072: GO 23057
23074: POP
23075: POP
// end ;
23076: PPOPN 2
23078: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23079: LD_EXP 52
23083: PUSH
23084: LD_EXP 58
23088: AND
23089: IFFALSE 23173
23091: GO 23093
23093: DISABLE
23094: LD_INT 0
23096: PPUSH
23097: PPUSH
// begin enable ;
23098: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23099: LD_ADDR_VAR 0 2
23103: PUSH
23104: LD_INT 22
23106: PUSH
23107: LD_OWVAR 2
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: LD_INT 32
23118: PUSH
23119: LD_INT 3
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PPUSH
23130: CALL_OW 69
23134: ST_TO_ADDR
// if not tmp then
23135: LD_VAR 0 2
23139: NOT
23140: IFFALSE 23144
// exit ;
23142: GO 23173
// for i in tmp do
23144: LD_ADDR_VAR 0 1
23148: PUSH
23149: LD_VAR 0 2
23153: PUSH
23154: FOR_IN
23155: IFFALSE 23171
// begin SetLives ( i , 0 ) ;
23157: LD_VAR 0 1
23161: PPUSH
23162: LD_INT 0
23164: PPUSH
23165: CALL_OW 234
// end ;
23169: GO 23154
23171: POP
23172: POP
// end ;
23173: PPOPN 2
23175: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23176: LD_EXP 52
23180: PUSH
23181: LD_EXP 55
23185: AND
23186: IFFALSE 23279
23188: GO 23190
23190: DISABLE
23191: LD_INT 0
23193: PPUSH
// begin enable ;
23194: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23195: LD_ADDR_VAR 0 1
23199: PUSH
23200: LD_INT 22
23202: PUSH
23203: LD_OWVAR 2
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 2
23214: PUSH
23215: LD_INT 25
23217: PUSH
23218: LD_INT 5
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: PUSH
23225: LD_INT 25
23227: PUSH
23228: LD_INT 9
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: LD_INT 25
23237: PUSH
23238: LD_INT 8
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: PPUSH
23255: CALL_OW 69
23259: PUSH
23260: FOR_IN
23261: IFFALSE 23277
// begin SetClass ( i , 1 ) ;
23263: LD_VAR 0 1
23267: PPUSH
23268: LD_INT 1
23270: PPUSH
23271: CALL_OW 336
// end ;
23275: GO 23260
23277: POP
23278: POP
// end ;
23279: PPOPN 1
23281: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23282: LD_EXP 52
23286: PUSH
23287: LD_EXP 56
23291: AND
23292: PUSH
23293: LD_OWVAR 65
23297: PUSH
23298: LD_INT 7
23300: LESS
23301: AND
23302: IFFALSE 23316
23304: GO 23306
23306: DISABLE
// begin enable ;
23307: ENABLE
// game_speed := 7 ;
23308: LD_ADDR_OWVAR 65
23312: PUSH
23313: LD_INT 7
23315: ST_TO_ADDR
// end ;
23316: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23317: LD_EXP 52
23321: PUSH
23322: LD_EXP 59
23326: AND
23327: IFFALSE 23529
23329: GO 23331
23331: DISABLE
23332: LD_INT 0
23334: PPUSH
23335: PPUSH
23336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23337: LD_ADDR_VAR 0 3
23341: PUSH
23342: LD_INT 81
23344: PUSH
23345: LD_OWVAR 2
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PUSH
23354: LD_INT 21
23356: PUSH
23357: LD_INT 1
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PPUSH
23368: CALL_OW 69
23372: ST_TO_ADDR
// if not tmp then
23373: LD_VAR 0 3
23377: NOT
23378: IFFALSE 23382
// exit ;
23380: GO 23529
// if tmp > 5 then
23382: LD_VAR 0 3
23386: PUSH
23387: LD_INT 5
23389: GREATER
23390: IFFALSE 23402
// k := 5 else
23392: LD_ADDR_VAR 0 2
23396: PUSH
23397: LD_INT 5
23399: ST_TO_ADDR
23400: GO 23412
// k := tmp ;
23402: LD_ADDR_VAR 0 2
23406: PUSH
23407: LD_VAR 0 3
23411: ST_TO_ADDR
// for i := 1 to k do
23412: LD_ADDR_VAR 0 1
23416: PUSH
23417: DOUBLE
23418: LD_INT 1
23420: DEC
23421: ST_TO_ADDR
23422: LD_VAR 0 2
23426: PUSH
23427: FOR_TO
23428: IFFALSE 23527
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23430: LD_VAR 0 3
23434: PUSH
23435: LD_VAR 0 1
23439: ARRAY
23440: PPUSH
23441: LD_VAR 0 1
23445: PUSH
23446: LD_INT 4
23448: MOD
23449: PUSH
23450: LD_INT 1
23452: PLUS
23453: PPUSH
23454: CALL_OW 259
23458: PUSH
23459: LD_INT 10
23461: LESS
23462: IFFALSE 23525
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23464: LD_VAR 0 3
23468: PUSH
23469: LD_VAR 0 1
23473: ARRAY
23474: PPUSH
23475: LD_VAR 0 1
23479: PUSH
23480: LD_INT 4
23482: MOD
23483: PUSH
23484: LD_INT 1
23486: PLUS
23487: PPUSH
23488: LD_VAR 0 3
23492: PUSH
23493: LD_VAR 0 1
23497: ARRAY
23498: PPUSH
23499: LD_VAR 0 1
23503: PUSH
23504: LD_INT 4
23506: MOD
23507: PUSH
23508: LD_INT 1
23510: PLUS
23511: PPUSH
23512: CALL_OW 259
23516: PUSH
23517: LD_INT 1
23519: PLUS
23520: PPUSH
23521: CALL_OW 237
23525: GO 23427
23527: POP
23528: POP
// end ;
23529: PPOPN 3
23531: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23532: LD_EXP 52
23536: PUSH
23537: LD_EXP 60
23541: AND
23542: IFFALSE 23562
23544: GO 23546
23546: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23547: LD_INT 4
23549: PPUSH
23550: LD_OWVAR 2
23554: PPUSH
23555: LD_INT 0
23557: PPUSH
23558: CALL_OW 324
23562: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23563: LD_EXP 52
23567: PUSH
23568: LD_EXP 89
23572: AND
23573: IFFALSE 23593
23575: GO 23577
23577: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23578: LD_INT 19
23580: PPUSH
23581: LD_OWVAR 2
23585: PPUSH
23586: LD_INT 0
23588: PPUSH
23589: CALL_OW 324
23593: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23594: LD_EXP 52
23598: PUSH
23599: LD_EXP 61
23603: AND
23604: IFFALSE 23706
23606: GO 23608
23608: DISABLE
23609: LD_INT 0
23611: PPUSH
23612: PPUSH
// begin enable ;
23613: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23614: LD_ADDR_VAR 0 2
23618: PUSH
23619: LD_INT 22
23621: PUSH
23622: LD_OWVAR 2
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PUSH
23631: LD_INT 2
23633: PUSH
23634: LD_INT 34
23636: PUSH
23637: LD_INT 11
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PUSH
23644: LD_INT 34
23646: PUSH
23647: LD_INT 30
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: LIST
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PPUSH
23663: CALL_OW 69
23667: ST_TO_ADDR
// if not tmp then
23668: LD_VAR 0 2
23672: NOT
23673: IFFALSE 23677
// exit ;
23675: GO 23706
// for i in tmp do
23677: LD_ADDR_VAR 0 1
23681: PUSH
23682: LD_VAR 0 2
23686: PUSH
23687: FOR_IN
23688: IFFALSE 23704
// begin SetLives ( i , 0 ) ;
23690: LD_VAR 0 1
23694: PPUSH
23695: LD_INT 0
23697: PPUSH
23698: CALL_OW 234
// end ;
23702: GO 23687
23704: POP
23705: POP
// end ;
23706: PPOPN 2
23708: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23709: LD_EXP 52
23713: PUSH
23714: LD_EXP 62
23718: AND
23719: IFFALSE 23739
23721: GO 23723
23723: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23724: LD_INT 32
23726: PPUSH
23727: LD_OWVAR 2
23731: PPUSH
23732: LD_INT 0
23734: PPUSH
23735: CALL_OW 324
23739: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23740: LD_EXP 52
23744: PUSH
23745: LD_EXP 63
23749: AND
23750: IFFALSE 23931
23752: GO 23754
23754: DISABLE
23755: LD_INT 0
23757: PPUSH
23758: PPUSH
23759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23760: LD_ADDR_VAR 0 2
23764: PUSH
23765: LD_INT 22
23767: PUSH
23768: LD_OWVAR 2
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: PUSH
23777: LD_INT 33
23779: PUSH
23780: LD_INT 3
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PPUSH
23791: CALL_OW 69
23795: ST_TO_ADDR
// if not tmp then
23796: LD_VAR 0 2
23800: NOT
23801: IFFALSE 23805
// exit ;
23803: GO 23931
// side := 0 ;
23805: LD_ADDR_VAR 0 3
23809: PUSH
23810: LD_INT 0
23812: ST_TO_ADDR
// for i := 1 to 8 do
23813: LD_ADDR_VAR 0 1
23817: PUSH
23818: DOUBLE
23819: LD_INT 1
23821: DEC
23822: ST_TO_ADDR
23823: LD_INT 8
23825: PUSH
23826: FOR_TO
23827: IFFALSE 23875
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23829: LD_OWVAR 2
23833: PUSH
23834: LD_VAR 0 1
23838: NONEQUAL
23839: PUSH
23840: LD_OWVAR 2
23844: PPUSH
23845: LD_VAR 0 1
23849: PPUSH
23850: CALL_OW 81
23854: PUSH
23855: LD_INT 2
23857: EQUAL
23858: AND
23859: IFFALSE 23873
// begin side := i ;
23861: LD_ADDR_VAR 0 3
23865: PUSH
23866: LD_VAR 0 1
23870: ST_TO_ADDR
// break ;
23871: GO 23875
// end ;
23873: GO 23826
23875: POP
23876: POP
// if not side then
23877: LD_VAR 0 3
23881: NOT
23882: IFFALSE 23886
// exit ;
23884: GO 23931
// for i := 1 to tmp do
23886: LD_ADDR_VAR 0 1
23890: PUSH
23891: DOUBLE
23892: LD_INT 1
23894: DEC
23895: ST_TO_ADDR
23896: LD_VAR 0 2
23900: PUSH
23901: FOR_TO
23902: IFFALSE 23929
// if Prob ( 60 ) then
23904: LD_INT 60
23906: PPUSH
23907: CALL_OW 13
23911: IFFALSE 23927
// SetSide ( i , side ) ;
23913: LD_VAR 0 1
23917: PPUSH
23918: LD_VAR 0 3
23922: PPUSH
23923: CALL_OW 235
23927: GO 23901
23929: POP
23930: POP
// end ;
23931: PPOPN 3
23933: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
23934: LD_EXP 52
23938: PUSH
23939: LD_EXP 65
23943: AND
23944: IFFALSE 24063
23946: GO 23948
23948: DISABLE
23949: LD_INT 0
23951: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
23952: LD_ADDR_VAR 0 1
23956: PUSH
23957: LD_INT 22
23959: PUSH
23960: LD_OWVAR 2
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: PUSH
23969: LD_INT 21
23971: PUSH
23972: LD_INT 1
23974: PUSH
23975: EMPTY
23976: LIST
23977: LIST
23978: PUSH
23979: LD_INT 3
23981: PUSH
23982: LD_INT 23
23984: PUSH
23985: LD_INT 0
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: LIST
24000: PPUSH
24001: CALL_OW 69
24005: PUSH
24006: FOR_IN
24007: IFFALSE 24061
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24009: LD_VAR 0 1
24013: PPUSH
24014: CALL_OW 257
24018: PUSH
24019: LD_INT 1
24021: PUSH
24022: LD_INT 2
24024: PUSH
24025: LD_INT 3
24027: PUSH
24028: LD_INT 4
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: IN
24037: IFFALSE 24059
// SetClass ( un , rand ( 1 , 4 ) ) ;
24039: LD_VAR 0 1
24043: PPUSH
24044: LD_INT 1
24046: PPUSH
24047: LD_INT 4
24049: PPUSH
24050: CALL_OW 12
24054: PPUSH
24055: CALL_OW 336
24059: GO 24006
24061: POP
24062: POP
// end ;
24063: PPOPN 1
24065: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24066: LD_EXP 52
24070: PUSH
24071: LD_EXP 64
24075: AND
24076: IFFALSE 24155
24078: GO 24080
24080: DISABLE
24081: LD_INT 0
24083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24084: LD_ADDR_VAR 0 1
24088: PUSH
24089: LD_INT 22
24091: PUSH
24092: LD_OWVAR 2
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PUSH
24101: LD_INT 21
24103: PUSH
24104: LD_INT 3
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PPUSH
24115: CALL_OW 69
24119: ST_TO_ADDR
// if not tmp then
24120: LD_VAR 0 1
24124: NOT
24125: IFFALSE 24129
// exit ;
24127: GO 24155
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24129: LD_VAR 0 1
24133: PUSH
24134: LD_INT 1
24136: PPUSH
24137: LD_VAR 0 1
24141: PPUSH
24142: CALL_OW 12
24146: ARRAY
24147: PPUSH
24148: LD_INT 100
24150: PPUSH
24151: CALL_OW 234
// end ;
24155: PPOPN 1
24157: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24158: LD_EXP 52
24162: PUSH
24163: LD_EXP 66
24167: AND
24168: IFFALSE 24266
24170: GO 24172
24172: DISABLE
24173: LD_INT 0
24175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24176: LD_ADDR_VAR 0 1
24180: PUSH
24181: LD_INT 22
24183: PUSH
24184: LD_OWVAR 2
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: PUSH
24193: LD_INT 21
24195: PUSH
24196: LD_INT 1
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PPUSH
24207: CALL_OW 69
24211: ST_TO_ADDR
// if not tmp then
24212: LD_VAR 0 1
24216: NOT
24217: IFFALSE 24221
// exit ;
24219: GO 24266
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24221: LD_VAR 0 1
24225: PUSH
24226: LD_INT 1
24228: PPUSH
24229: LD_VAR 0 1
24233: PPUSH
24234: CALL_OW 12
24238: ARRAY
24239: PPUSH
24240: LD_INT 1
24242: PPUSH
24243: LD_INT 4
24245: PPUSH
24246: CALL_OW 12
24250: PPUSH
24251: LD_INT 3000
24253: PPUSH
24254: LD_INT 9000
24256: PPUSH
24257: CALL_OW 12
24261: PPUSH
24262: CALL_OW 492
// end ;
24266: PPOPN 1
24268: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24269: LD_EXP 52
24273: PUSH
24274: LD_EXP 67
24278: AND
24279: IFFALSE 24299
24281: GO 24283
24283: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24284: LD_INT 1
24286: PPUSH
24287: LD_OWVAR 2
24291: PPUSH
24292: LD_INT 0
24294: PPUSH
24295: CALL_OW 324
24299: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24300: LD_EXP 52
24304: PUSH
24305: LD_EXP 68
24309: AND
24310: IFFALSE 24393
24312: GO 24314
24314: DISABLE
24315: LD_INT 0
24317: PPUSH
24318: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24319: LD_ADDR_VAR 0 2
24323: PUSH
24324: LD_INT 22
24326: PUSH
24327: LD_OWVAR 2
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 21
24338: PUSH
24339: LD_INT 3
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PPUSH
24350: CALL_OW 69
24354: ST_TO_ADDR
// if not tmp then
24355: LD_VAR 0 2
24359: NOT
24360: IFFALSE 24364
// exit ;
24362: GO 24393
// for i in tmp do
24364: LD_ADDR_VAR 0 1
24368: PUSH
24369: LD_VAR 0 2
24373: PUSH
24374: FOR_IN
24375: IFFALSE 24391
// SetBLevel ( i , 10 ) ;
24377: LD_VAR 0 1
24381: PPUSH
24382: LD_INT 10
24384: PPUSH
24385: CALL_OW 241
24389: GO 24374
24391: POP
24392: POP
// end ;
24393: PPOPN 2
24395: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24396: LD_EXP 52
24400: PUSH
24401: LD_EXP 69
24405: AND
24406: IFFALSE 24517
24408: GO 24410
24410: DISABLE
24411: LD_INT 0
24413: PPUSH
24414: PPUSH
24415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24416: LD_ADDR_VAR 0 3
24420: PUSH
24421: LD_INT 22
24423: PUSH
24424: LD_OWVAR 2
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 25
24435: PUSH
24436: LD_INT 1
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PPUSH
24447: CALL_OW 69
24451: ST_TO_ADDR
// if not tmp then
24452: LD_VAR 0 3
24456: NOT
24457: IFFALSE 24461
// exit ;
24459: GO 24517
// un := tmp [ rand ( 1 , tmp ) ] ;
24461: LD_ADDR_VAR 0 2
24465: PUSH
24466: LD_VAR 0 3
24470: PUSH
24471: LD_INT 1
24473: PPUSH
24474: LD_VAR 0 3
24478: PPUSH
24479: CALL_OW 12
24483: ARRAY
24484: ST_TO_ADDR
// if Crawls ( un ) then
24485: LD_VAR 0 2
24489: PPUSH
24490: CALL_OW 318
24494: IFFALSE 24505
// ComWalk ( un ) ;
24496: LD_VAR 0 2
24500: PPUSH
24501: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24505: LD_VAR 0 2
24509: PPUSH
24510: LD_INT 5
24512: PPUSH
24513: CALL_OW 336
// end ;
24517: PPOPN 3
24519: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
24520: LD_EXP 52
24524: PUSH
24525: LD_EXP 70
24529: AND
24530: PUSH
24531: LD_OWVAR 67
24535: PUSH
24536: LD_INT 4
24538: LESS
24539: AND
24540: IFFALSE 24559
24542: GO 24544
24544: DISABLE
// begin Difficulty := Difficulty + 1 ;
24545: LD_ADDR_OWVAR 67
24549: PUSH
24550: LD_OWVAR 67
24554: PUSH
24555: LD_INT 1
24557: PLUS
24558: ST_TO_ADDR
// end ;
24559: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24560: LD_EXP 52
24564: PUSH
24565: LD_EXP 71
24569: AND
24570: IFFALSE 24673
24572: GO 24574
24574: DISABLE
24575: LD_INT 0
24577: PPUSH
// begin for i := 1 to 5 do
24578: LD_ADDR_VAR 0 1
24582: PUSH
24583: DOUBLE
24584: LD_INT 1
24586: DEC
24587: ST_TO_ADDR
24588: LD_INT 5
24590: PUSH
24591: FOR_TO
24592: IFFALSE 24671
// begin uc_nation := nation_nature ;
24594: LD_ADDR_OWVAR 21
24598: PUSH
24599: LD_INT 0
24601: ST_TO_ADDR
// uc_side := 0 ;
24602: LD_ADDR_OWVAR 20
24606: PUSH
24607: LD_INT 0
24609: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24610: LD_ADDR_OWVAR 29
24614: PUSH
24615: LD_INT 12
24617: PUSH
24618: LD_INT 12
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: ST_TO_ADDR
// hc_agressivity := 20 ;
24625: LD_ADDR_OWVAR 35
24629: PUSH
24630: LD_INT 20
24632: ST_TO_ADDR
// hc_class := class_tiger ;
24633: LD_ADDR_OWVAR 28
24637: PUSH
24638: LD_INT 14
24640: ST_TO_ADDR
// hc_gallery :=  ;
24641: LD_ADDR_OWVAR 33
24645: PUSH
24646: LD_STRING 
24648: ST_TO_ADDR
// hc_name :=  ;
24649: LD_ADDR_OWVAR 26
24653: PUSH
24654: LD_STRING 
24656: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24657: CALL_OW 44
24661: PPUSH
24662: LD_INT 0
24664: PPUSH
24665: CALL_OW 51
// end ;
24669: GO 24591
24671: POP
24672: POP
// end ;
24673: PPOPN 1
24675: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24676: LD_EXP 52
24680: PUSH
24681: LD_EXP 72
24685: AND
24686: IFFALSE 24695
24688: GO 24690
24690: DISABLE
// StreamSibBomb ;
24691: CALL 24696 0 0
24695: END
// export function StreamSibBomb ; var i , x , y ; begin
24696: LD_INT 0
24698: PPUSH
24699: PPUSH
24700: PPUSH
24701: PPUSH
// result := false ;
24702: LD_ADDR_VAR 0 1
24706: PUSH
24707: LD_INT 0
24709: ST_TO_ADDR
// for i := 1 to 16 do
24710: LD_ADDR_VAR 0 2
24714: PUSH
24715: DOUBLE
24716: LD_INT 1
24718: DEC
24719: ST_TO_ADDR
24720: LD_INT 16
24722: PUSH
24723: FOR_TO
24724: IFFALSE 24923
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24726: LD_ADDR_VAR 0 3
24730: PUSH
24731: LD_INT 10
24733: PUSH
24734: LD_INT 20
24736: PUSH
24737: LD_INT 30
24739: PUSH
24740: LD_INT 40
24742: PUSH
24743: LD_INT 50
24745: PUSH
24746: LD_INT 60
24748: PUSH
24749: LD_INT 70
24751: PUSH
24752: LD_INT 80
24754: PUSH
24755: LD_INT 90
24757: PUSH
24758: LD_INT 100
24760: PUSH
24761: LD_INT 110
24763: PUSH
24764: LD_INT 120
24766: PUSH
24767: LD_INT 130
24769: PUSH
24770: LD_INT 140
24772: PUSH
24773: LD_INT 150
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: PUSH
24793: LD_INT 1
24795: PPUSH
24796: LD_INT 15
24798: PPUSH
24799: CALL_OW 12
24803: ARRAY
24804: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24805: LD_ADDR_VAR 0 4
24809: PUSH
24810: LD_INT 10
24812: PUSH
24813: LD_INT 20
24815: PUSH
24816: LD_INT 30
24818: PUSH
24819: LD_INT 40
24821: PUSH
24822: LD_INT 50
24824: PUSH
24825: LD_INT 60
24827: PUSH
24828: LD_INT 70
24830: PUSH
24831: LD_INT 80
24833: PUSH
24834: LD_INT 90
24836: PUSH
24837: LD_INT 100
24839: PUSH
24840: LD_INT 110
24842: PUSH
24843: LD_INT 120
24845: PUSH
24846: LD_INT 130
24848: PUSH
24849: LD_INT 140
24851: PUSH
24852: LD_INT 150
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: PUSH
24872: LD_INT 1
24874: PPUSH
24875: LD_INT 15
24877: PPUSH
24878: CALL_OW 12
24882: ARRAY
24883: ST_TO_ADDR
// if ValidHex ( x , y ) then
24884: LD_VAR 0 3
24888: PPUSH
24889: LD_VAR 0 4
24893: PPUSH
24894: CALL_OW 488
24898: IFFALSE 24921
// begin result := [ x , y ] ;
24900: LD_ADDR_VAR 0 1
24904: PUSH
24905: LD_VAR 0 3
24909: PUSH
24910: LD_VAR 0 4
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: ST_TO_ADDR
// break ;
24919: GO 24923
// end ; end ;
24921: GO 24723
24923: POP
24924: POP
// if result then
24925: LD_VAR 0 1
24929: IFFALSE 24989
// begin ToLua ( playSibBomb() ) ;
24931: LD_STRING playSibBomb()
24933: PPUSH
24934: CALL_OW 559
// wait ( 0 0$14 ) ;
24938: LD_INT 490
24940: PPUSH
24941: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
24945: LD_VAR 0 1
24949: PUSH
24950: LD_INT 1
24952: ARRAY
24953: PPUSH
24954: LD_VAR 0 1
24958: PUSH
24959: LD_INT 2
24961: ARRAY
24962: PPUSH
24963: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
24967: LD_VAR 0 1
24971: PUSH
24972: LD_INT 1
24974: ARRAY
24975: PPUSH
24976: LD_VAR 0 1
24980: PUSH
24981: LD_INT 2
24983: ARRAY
24984: PPUSH
24985: CALL_OW 429
// end ; end ;
24989: LD_VAR 0 1
24993: RET
// every 0 0$1 trigger StreamModeActive and sReset do
24994: LD_EXP 52
24998: PUSH
24999: LD_EXP 74
25003: AND
25004: IFFALSE 25016
25006: GO 25008
25008: DISABLE
// YouLost (  ) ;
25009: LD_STRING 
25011: PPUSH
25012: CALL_OW 104
25016: END
// every 0 0$1 trigger StreamModeActive and sFog do
25017: LD_EXP 52
25021: PUSH
25022: LD_EXP 73
25026: AND
25027: IFFALSE 25041
25029: GO 25031
25031: DISABLE
// FogOff ( your_side ) ;
25032: LD_OWVAR 2
25036: PPUSH
25037: CALL_OW 344
25041: END
// every 0 0$1 trigger StreamModeActive and sSun do
25042: LD_EXP 52
25046: PUSH
25047: LD_EXP 75
25051: AND
25052: IFFALSE 25080
25054: GO 25056
25056: DISABLE
// begin solar_recharge_percent := 0 ;
25057: LD_ADDR_OWVAR 79
25061: PUSH
25062: LD_INT 0
25064: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25065: LD_INT 10500
25067: PPUSH
25068: CALL_OW 67
// solar_recharge_percent := 100 ;
25072: LD_ADDR_OWVAR 79
25076: PUSH
25077: LD_INT 100
25079: ST_TO_ADDR
// end ;
25080: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25081: LD_EXP 52
25085: PUSH
25086: LD_EXP 76
25090: AND
25091: IFFALSE 25330
25093: GO 25095
25095: DISABLE
25096: LD_INT 0
25098: PPUSH
25099: PPUSH
25100: PPUSH
// begin tmp := [ ] ;
25101: LD_ADDR_VAR 0 3
25105: PUSH
25106: EMPTY
25107: ST_TO_ADDR
// for i := 1 to 6 do
25108: LD_ADDR_VAR 0 1
25112: PUSH
25113: DOUBLE
25114: LD_INT 1
25116: DEC
25117: ST_TO_ADDR
25118: LD_INT 6
25120: PUSH
25121: FOR_TO
25122: IFFALSE 25227
// begin uc_nation := nation_nature ;
25124: LD_ADDR_OWVAR 21
25128: PUSH
25129: LD_INT 0
25131: ST_TO_ADDR
// uc_side := 0 ;
25132: LD_ADDR_OWVAR 20
25136: PUSH
25137: LD_INT 0
25139: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25140: LD_ADDR_OWVAR 29
25144: PUSH
25145: LD_INT 12
25147: PUSH
25148: LD_INT 12
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: ST_TO_ADDR
// hc_agressivity := 20 ;
25155: LD_ADDR_OWVAR 35
25159: PUSH
25160: LD_INT 20
25162: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25163: LD_ADDR_OWVAR 28
25167: PUSH
25168: LD_INT 17
25170: ST_TO_ADDR
// hc_gallery :=  ;
25171: LD_ADDR_OWVAR 33
25175: PUSH
25176: LD_STRING 
25178: ST_TO_ADDR
// hc_name :=  ;
25179: LD_ADDR_OWVAR 26
25183: PUSH
25184: LD_STRING 
25186: ST_TO_ADDR
// un := CreateHuman ;
25187: LD_ADDR_VAR 0 2
25191: PUSH
25192: CALL_OW 44
25196: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25197: LD_VAR 0 2
25201: PPUSH
25202: LD_INT 1
25204: PPUSH
25205: CALL_OW 51
// tmp := tmp ^ un ;
25209: LD_ADDR_VAR 0 3
25213: PUSH
25214: LD_VAR 0 3
25218: PUSH
25219: LD_VAR 0 2
25223: ADD
25224: ST_TO_ADDR
// end ;
25225: GO 25121
25227: POP
25228: POP
// repeat wait ( 0 0$1 ) ;
25229: LD_INT 35
25231: PPUSH
25232: CALL_OW 67
// for un in tmp do
25236: LD_ADDR_VAR 0 2
25240: PUSH
25241: LD_VAR 0 3
25245: PUSH
25246: FOR_IN
25247: IFFALSE 25321
// begin if IsDead ( un ) then
25249: LD_VAR 0 2
25253: PPUSH
25254: CALL_OW 301
25258: IFFALSE 25278
// begin tmp := tmp diff un ;
25260: LD_ADDR_VAR 0 3
25264: PUSH
25265: LD_VAR 0 3
25269: PUSH
25270: LD_VAR 0 2
25274: DIFF
25275: ST_TO_ADDR
// continue ;
25276: GO 25246
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25278: LD_VAR 0 2
25282: PPUSH
25283: LD_INT 3
25285: PUSH
25286: LD_INT 22
25288: PUSH
25289: LD_INT 0
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PPUSH
25300: CALL_OW 69
25304: PPUSH
25305: LD_VAR 0 2
25309: PPUSH
25310: CALL_OW 74
25314: PPUSH
25315: CALL_OW 115
// end ;
25319: GO 25246
25321: POP
25322: POP
// until not tmp ;
25323: LD_VAR 0 3
25327: NOT
25328: IFFALSE 25229
// end ;
25330: PPOPN 3
25332: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25333: LD_EXP 52
25337: PUSH
25338: LD_EXP 77
25342: AND
25343: IFFALSE 25397
25345: GO 25347
25347: DISABLE
// begin ToLua ( displayTroll(); ) ;
25348: LD_STRING displayTroll();
25350: PPUSH
25351: CALL_OW 559
// wait ( 3 3$00 ) ;
25355: LD_INT 6300
25357: PPUSH
25358: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25362: LD_STRING hideTroll();
25364: PPUSH
25365: CALL_OW 559
// wait ( 1 1$00 ) ;
25369: LD_INT 2100
25371: PPUSH
25372: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25376: LD_STRING displayTroll();
25378: PPUSH
25379: CALL_OW 559
// wait ( 1 1$00 ) ;
25383: LD_INT 2100
25385: PPUSH
25386: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25390: LD_STRING hideTroll();
25392: PPUSH
25393: CALL_OW 559
// end ;
25397: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25398: LD_EXP 52
25402: PUSH
25403: LD_EXP 78
25407: AND
25408: IFFALSE 25471
25410: GO 25412
25412: DISABLE
25413: LD_INT 0
25415: PPUSH
// begin p := 0 ;
25416: LD_ADDR_VAR 0 1
25420: PUSH
25421: LD_INT 0
25423: ST_TO_ADDR
// repeat game_speed := 1 ;
25424: LD_ADDR_OWVAR 65
25428: PUSH
25429: LD_INT 1
25431: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25432: LD_INT 35
25434: PPUSH
25435: CALL_OW 67
// p := p + 1 ;
25439: LD_ADDR_VAR 0 1
25443: PUSH
25444: LD_VAR 0 1
25448: PUSH
25449: LD_INT 1
25451: PLUS
25452: ST_TO_ADDR
// until p >= 60 ;
25453: LD_VAR 0 1
25457: PUSH
25458: LD_INT 60
25460: GREATEREQUAL
25461: IFFALSE 25424
// game_speed := 4 ;
25463: LD_ADDR_OWVAR 65
25467: PUSH
25468: LD_INT 4
25470: ST_TO_ADDR
// end ;
25471: PPOPN 1
25473: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25474: LD_EXP 52
25478: PUSH
25479: LD_EXP 79
25483: AND
25484: IFFALSE 25630
25486: GO 25488
25488: DISABLE
25489: LD_INT 0
25491: PPUSH
25492: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25493: LD_ADDR_VAR 0 1
25497: PUSH
25498: LD_INT 22
25500: PUSH
25501: LD_OWVAR 2
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 2
25512: PUSH
25513: LD_INT 30
25515: PUSH
25516: LD_INT 0
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 30
25525: PUSH
25526: LD_INT 1
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: LIST
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PPUSH
25542: CALL_OW 69
25546: ST_TO_ADDR
// if not depot then
25547: LD_VAR 0 1
25551: NOT
25552: IFFALSE 25556
// exit ;
25554: GO 25630
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25556: LD_ADDR_VAR 0 2
25560: PUSH
25561: LD_VAR 0 1
25565: PUSH
25566: LD_INT 1
25568: PPUSH
25569: LD_VAR 0 1
25573: PPUSH
25574: CALL_OW 12
25578: ARRAY
25579: PPUSH
25580: CALL_OW 274
25584: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25585: LD_VAR 0 2
25589: PPUSH
25590: LD_INT 1
25592: PPUSH
25593: LD_INT 0
25595: PPUSH
25596: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25600: LD_VAR 0 2
25604: PPUSH
25605: LD_INT 2
25607: PPUSH
25608: LD_INT 0
25610: PPUSH
25611: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25615: LD_VAR 0 2
25619: PPUSH
25620: LD_INT 3
25622: PPUSH
25623: LD_INT 0
25625: PPUSH
25626: CALL_OW 277
// end ;
25630: PPOPN 2
25632: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25633: LD_EXP 52
25637: PUSH
25638: LD_EXP 80
25642: AND
25643: IFFALSE 25740
25645: GO 25647
25647: DISABLE
25648: LD_INT 0
25650: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25651: LD_ADDR_VAR 0 1
25655: PUSH
25656: LD_INT 22
25658: PUSH
25659: LD_OWVAR 2
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 21
25670: PUSH
25671: LD_INT 1
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: LD_INT 3
25680: PUSH
25681: LD_INT 23
25683: PUSH
25684: LD_INT 0
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: LIST
25699: PPUSH
25700: CALL_OW 69
25704: ST_TO_ADDR
// if not tmp then
25705: LD_VAR 0 1
25709: NOT
25710: IFFALSE 25714
// exit ;
25712: GO 25740
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25714: LD_VAR 0 1
25718: PUSH
25719: LD_INT 1
25721: PPUSH
25722: LD_VAR 0 1
25726: PPUSH
25727: CALL_OW 12
25731: ARRAY
25732: PPUSH
25733: LD_INT 200
25735: PPUSH
25736: CALL_OW 234
// end ;
25740: PPOPN 1
25742: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25743: LD_EXP 52
25747: PUSH
25748: LD_EXP 81
25752: AND
25753: IFFALSE 25832
25755: GO 25757
25757: DISABLE
25758: LD_INT 0
25760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25761: LD_ADDR_VAR 0 1
25765: PUSH
25766: LD_INT 22
25768: PUSH
25769: LD_OWVAR 2
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 21
25780: PUSH
25781: LD_INT 2
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PPUSH
25792: CALL_OW 69
25796: ST_TO_ADDR
// if not tmp then
25797: LD_VAR 0 1
25801: NOT
25802: IFFALSE 25806
// exit ;
25804: GO 25832
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25806: LD_VAR 0 1
25810: PUSH
25811: LD_INT 1
25813: PPUSH
25814: LD_VAR 0 1
25818: PPUSH
25819: CALL_OW 12
25823: ARRAY
25824: PPUSH
25825: LD_INT 60
25827: PPUSH
25828: CALL_OW 234
// end ;
25832: PPOPN 1
25834: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25835: LD_EXP 52
25839: PUSH
25840: LD_EXP 82
25844: AND
25845: IFFALSE 25944
25847: GO 25849
25849: DISABLE
25850: LD_INT 0
25852: PPUSH
25853: PPUSH
// begin enable ;
25854: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25855: LD_ADDR_VAR 0 1
25859: PUSH
25860: LD_INT 22
25862: PUSH
25863: LD_OWVAR 2
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 61
25874: PUSH
25875: EMPTY
25876: LIST
25877: PUSH
25878: LD_INT 33
25880: PUSH
25881: LD_INT 2
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: LIST
25892: PPUSH
25893: CALL_OW 69
25897: ST_TO_ADDR
// if not tmp then
25898: LD_VAR 0 1
25902: NOT
25903: IFFALSE 25907
// exit ;
25905: GO 25944
// for i in tmp do
25907: LD_ADDR_VAR 0 2
25911: PUSH
25912: LD_VAR 0 1
25916: PUSH
25917: FOR_IN
25918: IFFALSE 25942
// if IsControledBy ( i ) then
25920: LD_VAR 0 2
25924: PPUSH
25925: CALL_OW 312
25929: IFFALSE 25940
// ComUnlink ( i ) ;
25931: LD_VAR 0 2
25935: PPUSH
25936: CALL_OW 136
25940: GO 25917
25942: POP
25943: POP
// end ;
25944: PPOPN 2
25946: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
25947: LD_EXP 52
25951: PUSH
25952: LD_EXP 83
25956: AND
25957: IFFALSE 26097
25959: GO 25961
25961: DISABLE
25962: LD_INT 0
25964: PPUSH
25965: PPUSH
// begin ToLua ( displayPowell(); ) ;
25966: LD_STRING displayPowell();
25968: PPUSH
25969: CALL_OW 559
// uc_side := 0 ;
25973: LD_ADDR_OWVAR 20
25977: PUSH
25978: LD_INT 0
25980: ST_TO_ADDR
// uc_nation := 2 ;
25981: LD_ADDR_OWVAR 21
25985: PUSH
25986: LD_INT 2
25988: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
25989: LD_ADDR_OWVAR 37
25993: PUSH
25994: LD_INT 14
25996: ST_TO_ADDR
// vc_engine := engine_siberite ;
25997: LD_ADDR_OWVAR 39
26001: PUSH
26002: LD_INT 3
26004: ST_TO_ADDR
// vc_control := control_apeman ;
26005: LD_ADDR_OWVAR 38
26009: PUSH
26010: LD_INT 5
26012: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26013: LD_ADDR_OWVAR 40
26017: PUSH
26018: LD_INT 29
26020: ST_TO_ADDR
// un := CreateVehicle ;
26021: LD_ADDR_VAR 0 2
26025: PUSH
26026: CALL_OW 45
26030: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26031: LD_VAR 0 2
26035: PPUSH
26036: LD_INT 1
26038: PPUSH
26039: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26043: LD_INT 35
26045: PPUSH
26046: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26050: LD_VAR 0 2
26054: PPUSH
26055: LD_INT 22
26057: PUSH
26058: LD_OWVAR 2
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PPUSH
26067: CALL_OW 69
26071: PPUSH
26072: LD_VAR 0 2
26076: PPUSH
26077: CALL_OW 74
26081: PPUSH
26082: CALL_OW 115
// until IsDead ( un ) ;
26086: LD_VAR 0 2
26090: PPUSH
26091: CALL_OW 301
26095: IFFALSE 26043
// end ;
26097: PPOPN 2
26099: END
// every 0 0$1 trigger StreamModeActive and sStu do
26100: LD_EXP 52
26104: PUSH
26105: LD_EXP 91
26109: AND
26110: IFFALSE 26126
26112: GO 26114
26114: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26115: LD_STRING displayStucuk();
26117: PPUSH
26118: CALL_OW 559
// ResetFog ;
26122: CALL_OW 335
// end ;
26126: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26127: LD_EXP 52
26131: PUSH
26132: LD_EXP 84
26136: AND
26137: IFFALSE 26278
26139: GO 26141
26141: DISABLE
26142: LD_INT 0
26144: PPUSH
26145: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26146: LD_ADDR_VAR 0 2
26150: PUSH
26151: LD_INT 22
26153: PUSH
26154: LD_OWVAR 2
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: LD_INT 21
26165: PUSH
26166: LD_INT 1
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PPUSH
26177: CALL_OW 69
26181: ST_TO_ADDR
// if not tmp then
26182: LD_VAR 0 2
26186: NOT
26187: IFFALSE 26191
// exit ;
26189: GO 26278
// un := tmp [ rand ( 1 , tmp ) ] ;
26191: LD_ADDR_VAR 0 1
26195: PUSH
26196: LD_VAR 0 2
26200: PUSH
26201: LD_INT 1
26203: PPUSH
26204: LD_VAR 0 2
26208: PPUSH
26209: CALL_OW 12
26213: ARRAY
26214: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26215: LD_VAR 0 1
26219: PPUSH
26220: LD_INT 0
26222: PPUSH
26223: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26227: LD_VAR 0 1
26231: PPUSH
26232: LD_OWVAR 3
26236: PUSH
26237: LD_VAR 0 1
26241: DIFF
26242: PPUSH
26243: LD_VAR 0 1
26247: PPUSH
26248: CALL_OW 74
26252: PPUSH
26253: CALL_OW 115
// wait ( 0 0$20 ) ;
26257: LD_INT 700
26259: PPUSH
26260: CALL_OW 67
// SetSide ( un , your_side ) ;
26264: LD_VAR 0 1
26268: PPUSH
26269: LD_OWVAR 2
26273: PPUSH
26274: CALL_OW 235
// end ;
26278: PPOPN 2
26280: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26281: LD_EXP 52
26285: PUSH
26286: LD_EXP 85
26290: AND
26291: IFFALSE 26397
26293: GO 26295
26295: DISABLE
26296: LD_INT 0
26298: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26299: LD_ADDR_VAR 0 1
26303: PUSH
26304: LD_INT 22
26306: PUSH
26307: LD_OWVAR 2
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: LD_INT 2
26318: PUSH
26319: LD_INT 30
26321: PUSH
26322: LD_INT 0
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 30
26331: PUSH
26332: LD_INT 1
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: LIST
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PPUSH
26348: CALL_OW 69
26352: ST_TO_ADDR
// if not depot then
26353: LD_VAR 0 1
26357: NOT
26358: IFFALSE 26362
// exit ;
26360: GO 26397
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26362: LD_VAR 0 1
26366: PUSH
26367: LD_INT 1
26369: ARRAY
26370: PPUSH
26371: CALL_OW 250
26375: PPUSH
26376: LD_VAR 0 1
26380: PUSH
26381: LD_INT 1
26383: ARRAY
26384: PPUSH
26385: CALL_OW 251
26389: PPUSH
26390: LD_INT 70
26392: PPUSH
26393: CALL_OW 495
// end ;
26397: PPOPN 1
26399: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26400: LD_EXP 52
26404: PUSH
26405: LD_EXP 86
26409: AND
26410: IFFALSE 26621
26412: GO 26414
26414: DISABLE
26415: LD_INT 0
26417: PPUSH
26418: PPUSH
26419: PPUSH
26420: PPUSH
26421: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26422: LD_ADDR_VAR 0 5
26426: PUSH
26427: LD_INT 22
26429: PUSH
26430: LD_OWVAR 2
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 21
26441: PUSH
26442: LD_INT 1
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PPUSH
26453: CALL_OW 69
26457: ST_TO_ADDR
// if not tmp then
26458: LD_VAR 0 5
26462: NOT
26463: IFFALSE 26467
// exit ;
26465: GO 26621
// for i in tmp do
26467: LD_ADDR_VAR 0 1
26471: PUSH
26472: LD_VAR 0 5
26476: PUSH
26477: FOR_IN
26478: IFFALSE 26619
// begin d := rand ( 0 , 5 ) ;
26480: LD_ADDR_VAR 0 4
26484: PUSH
26485: LD_INT 0
26487: PPUSH
26488: LD_INT 5
26490: PPUSH
26491: CALL_OW 12
26495: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26496: LD_ADDR_VAR 0 2
26500: PUSH
26501: LD_VAR 0 1
26505: PPUSH
26506: CALL_OW 250
26510: PPUSH
26511: LD_VAR 0 4
26515: PPUSH
26516: LD_INT 3
26518: PPUSH
26519: LD_INT 12
26521: PPUSH
26522: CALL_OW 12
26526: PPUSH
26527: CALL_OW 272
26531: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26532: LD_ADDR_VAR 0 3
26536: PUSH
26537: LD_VAR 0 1
26541: PPUSH
26542: CALL_OW 251
26546: PPUSH
26547: LD_VAR 0 4
26551: PPUSH
26552: LD_INT 3
26554: PPUSH
26555: LD_INT 12
26557: PPUSH
26558: CALL_OW 12
26562: PPUSH
26563: CALL_OW 273
26567: ST_TO_ADDR
// if ValidHex ( x , y ) then
26568: LD_VAR 0 2
26572: PPUSH
26573: LD_VAR 0 3
26577: PPUSH
26578: CALL_OW 488
26582: IFFALSE 26617
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26584: LD_VAR 0 1
26588: PPUSH
26589: LD_VAR 0 2
26593: PPUSH
26594: LD_VAR 0 3
26598: PPUSH
26599: LD_INT 3
26601: PPUSH
26602: LD_INT 6
26604: PPUSH
26605: CALL_OW 12
26609: PPUSH
26610: LD_INT 1
26612: PPUSH
26613: CALL_OW 483
// end ;
26617: GO 26477
26619: POP
26620: POP
// end ;
26621: PPOPN 5
26623: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26624: LD_EXP 52
26628: PUSH
26629: LD_EXP 87
26633: AND
26634: IFFALSE 26728
26636: GO 26638
26638: DISABLE
26639: LD_INT 0
26641: PPUSH
26642: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26643: LD_ADDR_VAR 0 2
26647: PUSH
26648: LD_INT 22
26650: PUSH
26651: LD_OWVAR 2
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 32
26662: PUSH
26663: LD_INT 1
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 21
26672: PUSH
26673: LD_INT 2
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: LIST
26684: PPUSH
26685: CALL_OW 69
26689: ST_TO_ADDR
// if not tmp then
26690: LD_VAR 0 2
26694: NOT
26695: IFFALSE 26699
// exit ;
26697: GO 26728
// for i in tmp do
26699: LD_ADDR_VAR 0 1
26703: PUSH
26704: LD_VAR 0 2
26708: PUSH
26709: FOR_IN
26710: IFFALSE 26726
// SetFuel ( i , 0 ) ;
26712: LD_VAR 0 1
26716: PPUSH
26717: LD_INT 0
26719: PPUSH
26720: CALL_OW 240
26724: GO 26709
26726: POP
26727: POP
// end ;
26728: PPOPN 2
26730: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26731: LD_EXP 52
26735: PUSH
26736: LD_EXP 88
26740: AND
26741: IFFALSE 26807
26743: GO 26745
26745: DISABLE
26746: LD_INT 0
26748: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26749: LD_ADDR_VAR 0 1
26753: PUSH
26754: LD_INT 22
26756: PUSH
26757: LD_OWVAR 2
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: PUSH
26766: LD_INT 30
26768: PUSH
26769: LD_INT 29
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PPUSH
26780: CALL_OW 69
26784: ST_TO_ADDR
// if not tmp then
26785: LD_VAR 0 1
26789: NOT
26790: IFFALSE 26794
// exit ;
26792: GO 26807
// DestroyUnit ( tmp [ 1 ] ) ;
26794: LD_VAR 0 1
26798: PUSH
26799: LD_INT 1
26801: ARRAY
26802: PPUSH
26803: CALL_OW 65
// end ;
26807: PPOPN 1
26809: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26810: LD_EXP 52
26814: PUSH
26815: LD_EXP 90
26819: AND
26820: IFFALSE 26949
26822: GO 26824
26824: DISABLE
26825: LD_INT 0
26827: PPUSH
// begin uc_side := 0 ;
26828: LD_ADDR_OWVAR 20
26832: PUSH
26833: LD_INT 0
26835: ST_TO_ADDR
// uc_nation := nation_arabian ;
26836: LD_ADDR_OWVAR 21
26840: PUSH
26841: LD_INT 2
26843: ST_TO_ADDR
// hc_gallery :=  ;
26844: LD_ADDR_OWVAR 33
26848: PUSH
26849: LD_STRING 
26851: ST_TO_ADDR
// hc_name :=  ;
26852: LD_ADDR_OWVAR 26
26856: PUSH
26857: LD_STRING 
26859: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26860: LD_INT 1
26862: PPUSH
26863: LD_INT 11
26865: PPUSH
26866: LD_INT 10
26868: PPUSH
26869: CALL_OW 380
// un := CreateHuman ;
26873: LD_ADDR_VAR 0 1
26877: PUSH
26878: CALL_OW 44
26882: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26883: LD_VAR 0 1
26887: PPUSH
26888: LD_INT 1
26890: PPUSH
26891: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26895: LD_INT 35
26897: PPUSH
26898: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26902: LD_VAR 0 1
26906: PPUSH
26907: LD_INT 22
26909: PUSH
26910: LD_OWVAR 2
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: PPUSH
26919: CALL_OW 69
26923: PPUSH
26924: LD_VAR 0 1
26928: PPUSH
26929: CALL_OW 74
26933: PPUSH
26934: CALL_OW 115
// until IsDead ( un ) ;
26938: LD_VAR 0 1
26942: PPUSH
26943: CALL_OW 301
26947: IFFALSE 26895
// end ;
26949: PPOPN 1
26951: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26952: LD_EXP 52
26956: PUSH
26957: LD_EXP 92
26961: AND
26962: IFFALSE 26974
26964: GO 26966
26966: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
26967: LD_STRING earthquake(getX(game), 0, 32)
26969: PPUSH
26970: CALL_OW 559
26974: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
26975: LD_EXP 52
26979: PUSH
26980: LD_EXP 93
26984: AND
26985: IFFALSE 27076
26987: GO 26989
26989: DISABLE
26990: LD_INT 0
26992: PPUSH
// begin enable ;
26993: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26994: LD_ADDR_VAR 0 1
26998: PUSH
26999: LD_INT 22
27001: PUSH
27002: LD_OWVAR 2
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 21
27013: PUSH
27014: LD_INT 2
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 33
27023: PUSH
27024: LD_INT 3
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: LIST
27035: PPUSH
27036: CALL_OW 69
27040: ST_TO_ADDR
// if not tmp then
27041: LD_VAR 0 1
27045: NOT
27046: IFFALSE 27050
// exit ;
27048: GO 27076
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27050: LD_VAR 0 1
27054: PUSH
27055: LD_INT 1
27057: PPUSH
27058: LD_VAR 0 1
27062: PPUSH
27063: CALL_OW 12
27067: ARRAY
27068: PPUSH
27069: LD_INT 1
27071: PPUSH
27072: CALL_OW 234
// end ;
27076: PPOPN 1
27078: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27079: LD_EXP 52
27083: PUSH
27084: LD_EXP 94
27088: AND
27089: IFFALSE 27230
27091: GO 27093
27093: DISABLE
27094: LD_INT 0
27096: PPUSH
27097: PPUSH
27098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27099: LD_ADDR_VAR 0 3
27103: PUSH
27104: LD_INT 22
27106: PUSH
27107: LD_OWVAR 2
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 25
27118: PUSH
27119: LD_INT 1
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PPUSH
27130: CALL_OW 69
27134: ST_TO_ADDR
// if not tmp then
27135: LD_VAR 0 3
27139: NOT
27140: IFFALSE 27144
// exit ;
27142: GO 27230
// un := tmp [ rand ( 1 , tmp ) ] ;
27144: LD_ADDR_VAR 0 2
27148: PUSH
27149: LD_VAR 0 3
27153: PUSH
27154: LD_INT 1
27156: PPUSH
27157: LD_VAR 0 3
27161: PPUSH
27162: CALL_OW 12
27166: ARRAY
27167: ST_TO_ADDR
// if Crawls ( un ) then
27168: LD_VAR 0 2
27172: PPUSH
27173: CALL_OW 318
27177: IFFALSE 27188
// ComWalk ( un ) ;
27179: LD_VAR 0 2
27183: PPUSH
27184: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27188: LD_VAR 0 2
27192: PPUSH
27193: LD_INT 9
27195: PPUSH
27196: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27200: LD_INT 28
27202: PPUSH
27203: LD_OWVAR 2
27207: PPUSH
27208: LD_INT 2
27210: PPUSH
27211: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27215: LD_INT 29
27217: PPUSH
27218: LD_OWVAR 2
27222: PPUSH
27223: LD_INT 2
27225: PPUSH
27226: CALL_OW 322
// end ;
27230: PPOPN 3
27232: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27233: LD_EXP 52
27237: PUSH
27238: LD_EXP 95
27242: AND
27243: IFFALSE 27354
27245: GO 27247
27247: DISABLE
27248: LD_INT 0
27250: PPUSH
27251: PPUSH
27252: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27253: LD_ADDR_VAR 0 3
27257: PUSH
27258: LD_INT 22
27260: PUSH
27261: LD_OWVAR 2
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: LD_INT 25
27272: PUSH
27273: LD_INT 1
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PPUSH
27284: CALL_OW 69
27288: ST_TO_ADDR
// if not tmp then
27289: LD_VAR 0 3
27293: NOT
27294: IFFALSE 27298
// exit ;
27296: GO 27354
// un := tmp [ rand ( 1 , tmp ) ] ;
27298: LD_ADDR_VAR 0 2
27302: PUSH
27303: LD_VAR 0 3
27307: PUSH
27308: LD_INT 1
27310: PPUSH
27311: LD_VAR 0 3
27315: PPUSH
27316: CALL_OW 12
27320: ARRAY
27321: ST_TO_ADDR
// if Crawls ( un ) then
27322: LD_VAR 0 2
27326: PPUSH
27327: CALL_OW 318
27331: IFFALSE 27342
// ComWalk ( un ) ;
27333: LD_VAR 0 2
27337: PPUSH
27338: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27342: LD_VAR 0 2
27346: PPUSH
27347: LD_INT 8
27349: PPUSH
27350: CALL_OW 336
// end ;
27354: PPOPN 3
27356: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27357: LD_EXP 52
27361: PUSH
27362: LD_EXP 96
27366: AND
27367: IFFALSE 27511
27369: GO 27371
27371: DISABLE
27372: LD_INT 0
27374: PPUSH
27375: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27376: LD_ADDR_VAR 0 2
27380: PUSH
27381: LD_INT 22
27383: PUSH
27384: LD_OWVAR 2
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 21
27395: PUSH
27396: LD_INT 2
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 2
27405: PUSH
27406: LD_INT 34
27408: PUSH
27409: LD_INT 12
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 34
27418: PUSH
27419: LD_INT 51
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 34
27428: PUSH
27429: LD_INT 32
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: LIST
27446: PPUSH
27447: CALL_OW 69
27451: ST_TO_ADDR
// if not tmp then
27452: LD_VAR 0 2
27456: NOT
27457: IFFALSE 27461
// exit ;
27459: GO 27511
// for i in tmp do
27461: LD_ADDR_VAR 0 1
27465: PUSH
27466: LD_VAR 0 2
27470: PUSH
27471: FOR_IN
27472: IFFALSE 27509
// if GetCargo ( i , mat_artifact ) = 0 then
27474: LD_VAR 0 1
27478: PPUSH
27479: LD_INT 4
27481: PPUSH
27482: CALL_OW 289
27486: PUSH
27487: LD_INT 0
27489: EQUAL
27490: IFFALSE 27507
// SetCargo ( i , mat_siberit , 100 ) ;
27492: LD_VAR 0 1
27496: PPUSH
27497: LD_INT 3
27499: PPUSH
27500: LD_INT 100
27502: PPUSH
27503: CALL_OW 290
27507: GO 27471
27509: POP
27510: POP
// end ;
27511: PPOPN 2
27513: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27514: LD_EXP 52
27518: PUSH
27519: LD_EXP 97
27523: AND
27524: IFFALSE 27707
27526: GO 27528
27528: DISABLE
27529: LD_INT 0
27531: PPUSH
27532: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27533: LD_ADDR_VAR 0 2
27537: PUSH
27538: LD_INT 22
27540: PUSH
27541: LD_OWVAR 2
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PPUSH
27550: CALL_OW 69
27554: ST_TO_ADDR
// if not tmp then
27555: LD_VAR 0 2
27559: NOT
27560: IFFALSE 27564
// exit ;
27562: GO 27707
// for i := 1 to 2 do
27564: LD_ADDR_VAR 0 1
27568: PUSH
27569: DOUBLE
27570: LD_INT 1
27572: DEC
27573: ST_TO_ADDR
27574: LD_INT 2
27576: PUSH
27577: FOR_TO
27578: IFFALSE 27705
// begin uc_side := your_side ;
27580: LD_ADDR_OWVAR 20
27584: PUSH
27585: LD_OWVAR 2
27589: ST_TO_ADDR
// uc_nation := nation_american ;
27590: LD_ADDR_OWVAR 21
27594: PUSH
27595: LD_INT 1
27597: ST_TO_ADDR
// vc_chassis := us_morphling ;
27598: LD_ADDR_OWVAR 37
27602: PUSH
27603: LD_INT 5
27605: ST_TO_ADDR
// vc_engine := engine_siberite ;
27606: LD_ADDR_OWVAR 39
27610: PUSH
27611: LD_INT 3
27613: ST_TO_ADDR
// vc_control := control_computer ;
27614: LD_ADDR_OWVAR 38
27618: PUSH
27619: LD_INT 3
27621: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27622: LD_ADDR_OWVAR 40
27626: PUSH
27627: LD_INT 10
27629: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27630: LD_VAR 0 2
27634: PUSH
27635: LD_INT 1
27637: ARRAY
27638: PPUSH
27639: CALL_OW 310
27643: NOT
27644: IFFALSE 27691
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27646: CALL_OW 45
27650: PPUSH
27651: LD_VAR 0 2
27655: PUSH
27656: LD_INT 1
27658: ARRAY
27659: PPUSH
27660: CALL_OW 250
27664: PPUSH
27665: LD_VAR 0 2
27669: PUSH
27670: LD_INT 1
27672: ARRAY
27673: PPUSH
27674: CALL_OW 251
27678: PPUSH
27679: LD_INT 12
27681: PPUSH
27682: LD_INT 1
27684: PPUSH
27685: CALL_OW 50
27689: GO 27703
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27691: CALL_OW 45
27695: PPUSH
27696: LD_INT 1
27698: PPUSH
27699: CALL_OW 51
// end ;
27703: GO 27577
27705: POP
27706: POP
// end ;
27707: PPOPN 2
27709: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27710: LD_EXP 52
27714: PUSH
27715: LD_EXP 98
27719: AND
27720: IFFALSE 27942
27722: GO 27724
27724: DISABLE
27725: LD_INT 0
27727: PPUSH
27728: PPUSH
27729: PPUSH
27730: PPUSH
27731: PPUSH
27732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27733: LD_ADDR_VAR 0 6
27737: PUSH
27738: LD_INT 22
27740: PUSH
27741: LD_OWVAR 2
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: LD_INT 21
27752: PUSH
27753: LD_INT 1
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: PUSH
27760: LD_INT 3
27762: PUSH
27763: LD_INT 23
27765: PUSH
27766: LD_INT 0
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: LIST
27781: PPUSH
27782: CALL_OW 69
27786: ST_TO_ADDR
// if not tmp then
27787: LD_VAR 0 6
27791: NOT
27792: IFFALSE 27796
// exit ;
27794: GO 27942
// s1 := rand ( 1 , 4 ) ;
27796: LD_ADDR_VAR 0 2
27800: PUSH
27801: LD_INT 1
27803: PPUSH
27804: LD_INT 4
27806: PPUSH
27807: CALL_OW 12
27811: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27812: LD_ADDR_VAR 0 4
27816: PUSH
27817: LD_VAR 0 6
27821: PUSH
27822: LD_INT 1
27824: ARRAY
27825: PPUSH
27826: LD_VAR 0 2
27830: PPUSH
27831: CALL_OW 259
27835: ST_TO_ADDR
// if s1 = 1 then
27836: LD_VAR 0 2
27840: PUSH
27841: LD_INT 1
27843: EQUAL
27844: IFFALSE 27864
// s2 := rand ( 2 , 4 ) else
27846: LD_ADDR_VAR 0 3
27850: PUSH
27851: LD_INT 2
27853: PPUSH
27854: LD_INT 4
27856: PPUSH
27857: CALL_OW 12
27861: ST_TO_ADDR
27862: GO 27872
// s2 := 1 ;
27864: LD_ADDR_VAR 0 3
27868: PUSH
27869: LD_INT 1
27871: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27872: LD_ADDR_VAR 0 5
27876: PUSH
27877: LD_VAR 0 6
27881: PUSH
27882: LD_INT 1
27884: ARRAY
27885: PPUSH
27886: LD_VAR 0 3
27890: PPUSH
27891: CALL_OW 259
27895: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27896: LD_VAR 0 6
27900: PUSH
27901: LD_INT 1
27903: ARRAY
27904: PPUSH
27905: LD_VAR 0 2
27909: PPUSH
27910: LD_VAR 0 5
27914: PPUSH
27915: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27919: LD_VAR 0 6
27923: PUSH
27924: LD_INT 1
27926: ARRAY
27927: PPUSH
27928: LD_VAR 0 3
27932: PPUSH
27933: LD_VAR 0 4
27937: PPUSH
27938: CALL_OW 237
// end ;
27942: PPOPN 6
27944: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27945: LD_EXP 52
27949: PUSH
27950: LD_EXP 99
27954: AND
27955: IFFALSE 28034
27957: GO 27959
27959: DISABLE
27960: LD_INT 0
27962: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
27963: LD_ADDR_VAR 0 1
27967: PUSH
27968: LD_INT 22
27970: PUSH
27971: LD_OWVAR 2
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 30
27982: PUSH
27983: LD_INT 3
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PPUSH
27994: CALL_OW 69
27998: ST_TO_ADDR
// if not tmp then
27999: LD_VAR 0 1
28003: NOT
28004: IFFALSE 28008
// exit ;
28006: GO 28034
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28008: LD_VAR 0 1
28012: PUSH
28013: LD_INT 1
28015: PPUSH
28016: LD_VAR 0 1
28020: PPUSH
28021: CALL_OW 12
28025: ARRAY
28026: PPUSH
28027: LD_INT 1
28029: PPUSH
28030: CALL_OW 234
// end ;
28034: PPOPN 1
28036: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28037: LD_EXP 52
28041: PUSH
28042: LD_EXP 100
28046: AND
28047: IFFALSE 28159
28049: GO 28051
28051: DISABLE
28052: LD_INT 0
28054: PPUSH
28055: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28056: LD_ADDR_VAR 0 2
28060: PUSH
28061: LD_INT 22
28063: PUSH
28064: LD_OWVAR 2
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 2
28075: PUSH
28076: LD_INT 30
28078: PUSH
28079: LD_INT 27
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 30
28088: PUSH
28089: LD_INT 26
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 30
28098: PUSH
28099: LD_INT 28
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PPUSH
28116: CALL_OW 69
28120: ST_TO_ADDR
// if not tmp then
28121: LD_VAR 0 2
28125: NOT
28126: IFFALSE 28130
// exit ;
28128: GO 28159
// for i in tmp do
28130: LD_ADDR_VAR 0 1
28134: PUSH
28135: LD_VAR 0 2
28139: PUSH
28140: FOR_IN
28141: IFFALSE 28157
// SetLives ( i , 1 ) ;
28143: LD_VAR 0 1
28147: PPUSH
28148: LD_INT 1
28150: PPUSH
28151: CALL_OW 234
28155: GO 28140
28157: POP
28158: POP
// end ;
28159: PPOPN 2
28161: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28162: LD_EXP 52
28166: PUSH
28167: LD_EXP 101
28171: AND
28172: IFFALSE 28459
28174: GO 28176
28176: DISABLE
28177: LD_INT 0
28179: PPUSH
28180: PPUSH
28181: PPUSH
// begin i := rand ( 1 , 7 ) ;
28182: LD_ADDR_VAR 0 1
28186: PUSH
28187: LD_INT 1
28189: PPUSH
28190: LD_INT 7
28192: PPUSH
28193: CALL_OW 12
28197: ST_TO_ADDR
// case i of 1 :
28198: LD_VAR 0 1
28202: PUSH
28203: LD_INT 1
28205: DOUBLE
28206: EQUAL
28207: IFTRUE 28211
28209: GO 28221
28211: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28212: LD_STRING earthquake(getX(game), 0, 32)
28214: PPUSH
28215: CALL_OW 559
28219: GO 28459
28221: LD_INT 2
28223: DOUBLE
28224: EQUAL
28225: IFTRUE 28229
28227: GO 28243
28229: POP
// begin ToLua ( displayStucuk(); ) ;
28230: LD_STRING displayStucuk();
28232: PPUSH
28233: CALL_OW 559
// ResetFog ;
28237: CALL_OW 335
// end ; 3 :
28241: GO 28459
28243: LD_INT 3
28245: DOUBLE
28246: EQUAL
28247: IFTRUE 28251
28249: GO 28355
28251: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28252: LD_ADDR_VAR 0 2
28256: PUSH
28257: LD_INT 22
28259: PUSH
28260: LD_OWVAR 2
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 25
28271: PUSH
28272: LD_INT 1
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PPUSH
28283: CALL_OW 69
28287: ST_TO_ADDR
// if not tmp then
28288: LD_VAR 0 2
28292: NOT
28293: IFFALSE 28297
// exit ;
28295: GO 28459
// un := tmp [ rand ( 1 , tmp ) ] ;
28297: LD_ADDR_VAR 0 3
28301: PUSH
28302: LD_VAR 0 2
28306: PUSH
28307: LD_INT 1
28309: PPUSH
28310: LD_VAR 0 2
28314: PPUSH
28315: CALL_OW 12
28319: ARRAY
28320: ST_TO_ADDR
// if Crawls ( un ) then
28321: LD_VAR 0 3
28325: PPUSH
28326: CALL_OW 318
28330: IFFALSE 28341
// ComWalk ( un ) ;
28332: LD_VAR 0 3
28336: PPUSH
28337: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28341: LD_VAR 0 3
28345: PPUSH
28346: LD_INT 8
28348: PPUSH
28349: CALL_OW 336
// end ; 4 :
28353: GO 28459
28355: LD_INT 4
28357: DOUBLE
28358: EQUAL
28359: IFTRUE 28363
28361: GO 28437
28363: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28364: LD_ADDR_VAR 0 2
28368: PUSH
28369: LD_INT 22
28371: PUSH
28372: LD_OWVAR 2
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: LD_INT 30
28383: PUSH
28384: LD_INT 29
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PPUSH
28395: CALL_OW 69
28399: ST_TO_ADDR
// if not tmp then
28400: LD_VAR 0 2
28404: NOT
28405: IFFALSE 28409
// exit ;
28407: GO 28459
// CenterNowOnUnits ( tmp [ 1 ] ) ;
28409: LD_VAR 0 2
28413: PUSH
28414: LD_INT 1
28416: ARRAY
28417: PPUSH
28418: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
28422: LD_VAR 0 2
28426: PUSH
28427: LD_INT 1
28429: ARRAY
28430: PPUSH
28431: CALL_OW 65
// end ; 5 .. 7 :
28435: GO 28459
28437: LD_INT 5
28439: DOUBLE
28440: GREATEREQUAL
28441: IFFALSE 28449
28443: LD_INT 7
28445: DOUBLE
28446: LESSEQUAL
28447: IFTRUE 28451
28449: GO 28458
28451: POP
// StreamSibBomb ; end ;
28452: CALL 24696 0 0
28456: GO 28459
28458: POP
// end ;
28459: PPOPN 3
28461: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28462: LD_EXP 52
28466: PUSH
28467: LD_EXP 102
28471: AND
28472: IFFALSE 28628
28474: GO 28476
28476: DISABLE
28477: LD_INT 0
28479: PPUSH
28480: PPUSH
28481: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28482: LD_ADDR_VAR 0 2
28486: PUSH
28487: LD_INT 81
28489: PUSH
28490: LD_OWVAR 2
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 2
28501: PUSH
28502: LD_INT 21
28504: PUSH
28505: LD_INT 1
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: LD_INT 21
28514: PUSH
28515: LD_INT 2
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: LIST
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PPUSH
28531: CALL_OW 69
28535: ST_TO_ADDR
// if not tmp then
28536: LD_VAR 0 2
28540: NOT
28541: IFFALSE 28545
// exit ;
28543: GO 28628
// p := 0 ;
28545: LD_ADDR_VAR 0 3
28549: PUSH
28550: LD_INT 0
28552: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28553: LD_INT 35
28555: PPUSH
28556: CALL_OW 67
// p := p + 1 ;
28560: LD_ADDR_VAR 0 3
28564: PUSH
28565: LD_VAR 0 3
28569: PUSH
28570: LD_INT 1
28572: PLUS
28573: ST_TO_ADDR
// for i in tmp do
28574: LD_ADDR_VAR 0 1
28578: PUSH
28579: LD_VAR 0 2
28583: PUSH
28584: FOR_IN
28585: IFFALSE 28616
// if GetLives ( i ) < 1000 then
28587: LD_VAR 0 1
28591: PPUSH
28592: CALL_OW 256
28596: PUSH
28597: LD_INT 1000
28599: LESS
28600: IFFALSE 28614
// SetLives ( i , 1000 ) ;
28602: LD_VAR 0 1
28606: PPUSH
28607: LD_INT 1000
28609: PPUSH
28610: CALL_OW 234
28614: GO 28584
28616: POP
28617: POP
// until p > 20 ;
28618: LD_VAR 0 3
28622: PUSH
28623: LD_INT 20
28625: GREATER
28626: IFFALSE 28553
// end ;
28628: PPOPN 3
28630: END
// every 0 0$1 trigger StreamModeActive and sTime do
28631: LD_EXP 52
28635: PUSH
28636: LD_EXP 103
28640: AND
28641: IFFALSE 28676
28643: GO 28645
28645: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28646: LD_INT 28
28648: PPUSH
28649: LD_OWVAR 2
28653: PPUSH
28654: LD_INT 2
28656: PPUSH
28657: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28661: LD_INT 30
28663: PPUSH
28664: LD_OWVAR 2
28668: PPUSH
28669: LD_INT 2
28671: PPUSH
28672: CALL_OW 322
// end ;
28676: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28677: LD_EXP 52
28681: PUSH
28682: LD_EXP 104
28686: AND
28687: IFFALSE 28808
28689: GO 28691
28691: DISABLE
28692: LD_INT 0
28694: PPUSH
28695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28696: LD_ADDR_VAR 0 2
28700: PUSH
28701: LD_INT 22
28703: PUSH
28704: LD_OWVAR 2
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 21
28715: PUSH
28716: LD_INT 1
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 3
28725: PUSH
28726: LD_INT 23
28728: PUSH
28729: LD_INT 0
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: LIST
28744: PPUSH
28745: CALL_OW 69
28749: ST_TO_ADDR
// if not tmp then
28750: LD_VAR 0 2
28754: NOT
28755: IFFALSE 28759
// exit ;
28757: GO 28808
// for i in tmp do
28759: LD_ADDR_VAR 0 1
28763: PUSH
28764: LD_VAR 0 2
28768: PUSH
28769: FOR_IN
28770: IFFALSE 28806
// begin if Crawls ( i ) then
28772: LD_VAR 0 1
28776: PPUSH
28777: CALL_OW 318
28781: IFFALSE 28792
// ComWalk ( i ) ;
28783: LD_VAR 0 1
28787: PPUSH
28788: CALL_OW 138
// SetClass ( i , 2 ) ;
28792: LD_VAR 0 1
28796: PPUSH
28797: LD_INT 2
28799: PPUSH
28800: CALL_OW 336
// end ;
28804: GO 28769
28806: POP
28807: POP
// end ;
28808: PPOPN 2
28810: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28811: LD_EXP 52
28815: PUSH
28816: LD_EXP 105
28820: AND
28821: IFFALSE 29109
28823: GO 28825
28825: DISABLE
28826: LD_INT 0
28828: PPUSH
28829: PPUSH
28830: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28831: LD_OWVAR 2
28835: PPUSH
28836: LD_INT 9
28838: PPUSH
28839: LD_INT 1
28841: PPUSH
28842: LD_INT 1
28844: PPUSH
28845: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28849: LD_INT 9
28851: PPUSH
28852: LD_OWVAR 2
28856: PPUSH
28857: CALL_OW 343
// uc_side := 9 ;
28861: LD_ADDR_OWVAR 20
28865: PUSH
28866: LD_INT 9
28868: ST_TO_ADDR
// uc_nation := 2 ;
28869: LD_ADDR_OWVAR 21
28873: PUSH
28874: LD_INT 2
28876: ST_TO_ADDR
// hc_name := Dark Warrior ;
28877: LD_ADDR_OWVAR 26
28881: PUSH
28882: LD_STRING Dark Warrior
28884: ST_TO_ADDR
// hc_gallery :=  ;
28885: LD_ADDR_OWVAR 33
28889: PUSH
28890: LD_STRING 
28892: ST_TO_ADDR
// hc_noskilllimit := true ;
28893: LD_ADDR_OWVAR 76
28897: PUSH
28898: LD_INT 1
28900: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28901: LD_ADDR_OWVAR 31
28905: PUSH
28906: LD_INT 30
28908: PUSH
28909: LD_INT 30
28911: PUSH
28912: LD_INT 30
28914: PUSH
28915: LD_INT 30
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: ST_TO_ADDR
// un := CreateHuman ;
28924: LD_ADDR_VAR 0 3
28928: PUSH
28929: CALL_OW 44
28933: ST_TO_ADDR
// hc_noskilllimit := false ;
28934: LD_ADDR_OWVAR 76
28938: PUSH
28939: LD_INT 0
28941: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28942: LD_VAR 0 3
28946: PPUSH
28947: LD_INT 1
28949: PPUSH
28950: CALL_OW 51
// ToLua ( playRanger() ) ;
28954: LD_STRING playRanger()
28956: PPUSH
28957: CALL_OW 559
// p := 0 ;
28961: LD_ADDR_VAR 0 2
28965: PUSH
28966: LD_INT 0
28968: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28969: LD_INT 35
28971: PPUSH
28972: CALL_OW 67
// p := p + 1 ;
28976: LD_ADDR_VAR 0 2
28980: PUSH
28981: LD_VAR 0 2
28985: PUSH
28986: LD_INT 1
28988: PLUS
28989: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28990: LD_VAR 0 3
28994: PPUSH
28995: CALL_OW 256
28999: PUSH
29000: LD_INT 1000
29002: LESS
29003: IFFALSE 29017
// SetLives ( un , 1000 ) ;
29005: LD_VAR 0 3
29009: PPUSH
29010: LD_INT 1000
29012: PPUSH
29013: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29017: LD_VAR 0 3
29021: PPUSH
29022: LD_INT 81
29024: PUSH
29025: LD_OWVAR 2
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 91
29036: PUSH
29037: LD_VAR 0 3
29041: PUSH
29042: LD_INT 30
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: LIST
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PPUSH
29054: CALL_OW 69
29058: PPUSH
29059: LD_VAR 0 3
29063: PPUSH
29064: CALL_OW 74
29068: PPUSH
29069: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
29073: LD_VAR 0 2
29077: PUSH
29078: LD_INT 80
29080: GREATER
29081: PUSH
29082: LD_VAR 0 3
29086: PPUSH
29087: CALL_OW 301
29091: OR
29092: IFFALSE 28969
// if un then
29094: LD_VAR 0 3
29098: IFFALSE 29109
// RemoveUnit ( un ) ;
29100: LD_VAR 0 3
29104: PPUSH
29105: CALL_OW 64
// end ;
29109: PPOPN 3
29111: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
29112: LD_EXP 106
29116: IFFALSE 29232
29118: GO 29120
29120: DISABLE
29121: LD_INT 0
29123: PPUSH
29124: PPUSH
29125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29126: LD_ADDR_VAR 0 2
29130: PUSH
29131: LD_INT 81
29133: PUSH
29134: LD_OWVAR 2
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 21
29145: PUSH
29146: LD_INT 1
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: PPUSH
29157: CALL_OW 69
29161: ST_TO_ADDR
// ToLua ( playComputer() ) ;
29162: LD_STRING playComputer()
29164: PPUSH
29165: CALL_OW 559
// if not tmp then
29169: LD_VAR 0 2
29173: NOT
29174: IFFALSE 29178
// exit ;
29176: GO 29232
// for i in tmp do
29178: LD_ADDR_VAR 0 1
29182: PUSH
29183: LD_VAR 0 2
29187: PUSH
29188: FOR_IN
29189: IFFALSE 29230
// for j := 1 to 4 do
29191: LD_ADDR_VAR 0 3
29195: PUSH
29196: DOUBLE
29197: LD_INT 1
29199: DEC
29200: ST_TO_ADDR
29201: LD_INT 4
29203: PUSH
29204: FOR_TO
29205: IFFALSE 29226
// SetSkill ( i , j , 10 ) ;
29207: LD_VAR 0 1
29211: PPUSH
29212: LD_VAR 0 3
29216: PPUSH
29217: LD_INT 10
29219: PPUSH
29220: CALL_OW 237
29224: GO 29204
29226: POP
29227: POP
29228: GO 29188
29230: POP
29231: POP
// end ;
29232: PPOPN 3
29234: END
// every 0 0$1 trigger s30 do var i , tmp ;
29235: LD_EXP 107
29239: IFFALSE 29308
29241: GO 29243
29243: DISABLE
29244: LD_INT 0
29246: PPUSH
29247: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29248: LD_ADDR_VAR 0 2
29252: PUSH
29253: LD_INT 22
29255: PUSH
29256: LD_OWVAR 2
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PPUSH
29265: CALL_OW 69
29269: ST_TO_ADDR
// if not tmp then
29270: LD_VAR 0 2
29274: NOT
29275: IFFALSE 29279
// exit ;
29277: GO 29308
// for i in tmp do
29279: LD_ADDR_VAR 0 1
29283: PUSH
29284: LD_VAR 0 2
29288: PUSH
29289: FOR_IN
29290: IFFALSE 29306
// SetLives ( i , 300 ) ;
29292: LD_VAR 0 1
29296: PPUSH
29297: LD_INT 300
29299: PPUSH
29300: CALL_OW 234
29304: GO 29289
29306: POP
29307: POP
// end ;
29308: PPOPN 2
29310: END
// every 0 0$1 trigger s60 do var i , tmp ;
29311: LD_EXP 108
29315: IFFALSE 29384
29317: GO 29319
29319: DISABLE
29320: LD_INT 0
29322: PPUSH
29323: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29324: LD_ADDR_VAR 0 2
29328: PUSH
29329: LD_INT 22
29331: PUSH
29332: LD_OWVAR 2
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PPUSH
29341: CALL_OW 69
29345: ST_TO_ADDR
// if not tmp then
29346: LD_VAR 0 2
29350: NOT
29351: IFFALSE 29355
// exit ;
29353: GO 29384
// for i in tmp do
29355: LD_ADDR_VAR 0 1
29359: PUSH
29360: LD_VAR 0 2
29364: PUSH
29365: FOR_IN
29366: IFFALSE 29382
// SetLives ( i , 600 ) ;
29368: LD_VAR 0 1
29372: PPUSH
29373: LD_INT 600
29375: PPUSH
29376: CALL_OW 234
29380: GO 29365
29382: POP
29383: POP
// end ;
29384: PPOPN 2
29386: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29387: LD_INT 0
29389: PPUSH
// case cmd of 301 :
29390: LD_VAR 0 1
29394: PUSH
29395: LD_INT 301
29397: DOUBLE
29398: EQUAL
29399: IFTRUE 29403
29401: GO 29435
29403: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29404: LD_VAR 0 6
29408: PPUSH
29409: LD_VAR 0 7
29413: PPUSH
29414: LD_VAR 0 8
29418: PPUSH
29419: LD_VAR 0 4
29423: PPUSH
29424: LD_VAR 0 5
29428: PPUSH
29429: CALL 30636 0 5
29433: GO 29556
29435: LD_INT 302
29437: DOUBLE
29438: EQUAL
29439: IFTRUE 29443
29441: GO 29480
29443: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29444: LD_VAR 0 6
29448: PPUSH
29449: LD_VAR 0 7
29453: PPUSH
29454: LD_VAR 0 8
29458: PPUSH
29459: LD_VAR 0 9
29463: PPUSH
29464: LD_VAR 0 4
29468: PPUSH
29469: LD_VAR 0 5
29473: PPUSH
29474: CALL 30727 0 6
29478: GO 29556
29480: LD_INT 303
29482: DOUBLE
29483: EQUAL
29484: IFTRUE 29488
29486: GO 29525
29488: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29489: LD_VAR 0 6
29493: PPUSH
29494: LD_VAR 0 7
29498: PPUSH
29499: LD_VAR 0 8
29503: PPUSH
29504: LD_VAR 0 9
29508: PPUSH
29509: LD_VAR 0 4
29513: PPUSH
29514: LD_VAR 0 5
29518: PPUSH
29519: CALL 29561 0 6
29523: GO 29556
29525: LD_INT 304
29527: DOUBLE
29528: EQUAL
29529: IFTRUE 29533
29531: GO 29555
29533: POP
// hHackTeleport ( unit , x , y ) ; end ;
29534: LD_VAR 0 2
29538: PPUSH
29539: LD_VAR 0 4
29543: PPUSH
29544: LD_VAR 0 5
29548: PPUSH
29549: CALL 31320 0 3
29553: GO 29556
29555: POP
// end ;
29556: LD_VAR 0 12
29560: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29561: LD_INT 0
29563: PPUSH
29564: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29565: LD_VAR 0 1
29569: PUSH
29570: LD_INT 1
29572: LESS
29573: PUSH
29574: LD_VAR 0 1
29578: PUSH
29579: LD_INT 3
29581: GREATER
29582: OR
29583: PUSH
29584: LD_VAR 0 5
29588: PPUSH
29589: LD_VAR 0 6
29593: PPUSH
29594: CALL_OW 428
29598: OR
29599: IFFALSE 29603
// exit ;
29601: GO 30323
// uc_side := your_side ;
29603: LD_ADDR_OWVAR 20
29607: PUSH
29608: LD_OWVAR 2
29612: ST_TO_ADDR
// uc_nation := nation ;
29613: LD_ADDR_OWVAR 21
29617: PUSH
29618: LD_VAR 0 1
29622: ST_TO_ADDR
// bc_level = 1 ;
29623: LD_ADDR_OWVAR 43
29627: PUSH
29628: LD_INT 1
29630: ST_TO_ADDR
// case btype of 1 :
29631: LD_VAR 0 2
29635: PUSH
29636: LD_INT 1
29638: DOUBLE
29639: EQUAL
29640: IFTRUE 29644
29642: GO 29655
29644: POP
// bc_type := b_depot ; 2 :
29645: LD_ADDR_OWVAR 42
29649: PUSH
29650: LD_INT 0
29652: ST_TO_ADDR
29653: GO 30267
29655: LD_INT 2
29657: DOUBLE
29658: EQUAL
29659: IFTRUE 29663
29661: GO 29674
29663: POP
// bc_type := b_warehouse ; 3 :
29664: LD_ADDR_OWVAR 42
29668: PUSH
29669: LD_INT 1
29671: ST_TO_ADDR
29672: GO 30267
29674: LD_INT 3
29676: DOUBLE
29677: EQUAL
29678: IFTRUE 29682
29680: GO 29693
29682: POP
// bc_type := b_lab ; 4 .. 9 :
29683: LD_ADDR_OWVAR 42
29687: PUSH
29688: LD_INT 6
29690: ST_TO_ADDR
29691: GO 30267
29693: LD_INT 4
29695: DOUBLE
29696: GREATEREQUAL
29697: IFFALSE 29705
29699: LD_INT 9
29701: DOUBLE
29702: LESSEQUAL
29703: IFTRUE 29707
29705: GO 29759
29707: POP
// begin bc_type := b_lab_half ;
29708: LD_ADDR_OWVAR 42
29712: PUSH
29713: LD_INT 7
29715: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29716: LD_ADDR_OWVAR 44
29720: PUSH
29721: LD_INT 10
29723: PUSH
29724: LD_INT 11
29726: PUSH
29727: LD_INT 12
29729: PUSH
29730: LD_INT 15
29732: PUSH
29733: LD_INT 14
29735: PUSH
29736: LD_INT 13
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: PUSH
29747: LD_VAR 0 2
29751: PUSH
29752: LD_INT 3
29754: MINUS
29755: ARRAY
29756: ST_TO_ADDR
// end ; 10 .. 13 :
29757: GO 30267
29759: LD_INT 10
29761: DOUBLE
29762: GREATEREQUAL
29763: IFFALSE 29771
29765: LD_INT 13
29767: DOUBLE
29768: LESSEQUAL
29769: IFTRUE 29773
29771: GO 29850
29773: POP
// begin bc_type := b_lab_full ;
29774: LD_ADDR_OWVAR 42
29778: PUSH
29779: LD_INT 8
29781: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
29782: LD_ADDR_OWVAR 44
29786: PUSH
29787: LD_INT 10
29789: PUSH
29790: LD_INT 12
29792: PUSH
29793: LD_INT 14
29795: PUSH
29796: LD_INT 13
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: PUSH
29805: LD_VAR 0 2
29809: PUSH
29810: LD_INT 9
29812: MINUS
29813: ARRAY
29814: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
29815: LD_ADDR_OWVAR 45
29819: PUSH
29820: LD_INT 11
29822: PUSH
29823: LD_INT 15
29825: PUSH
29826: LD_INT 12
29828: PUSH
29829: LD_INT 15
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: PUSH
29838: LD_VAR 0 2
29842: PUSH
29843: LD_INT 9
29845: MINUS
29846: ARRAY
29847: ST_TO_ADDR
// end ; 14 :
29848: GO 30267
29850: LD_INT 14
29852: DOUBLE
29853: EQUAL
29854: IFTRUE 29858
29856: GO 29869
29858: POP
// bc_type := b_workshop ; 15 :
29859: LD_ADDR_OWVAR 42
29863: PUSH
29864: LD_INT 2
29866: ST_TO_ADDR
29867: GO 30267
29869: LD_INT 15
29871: DOUBLE
29872: EQUAL
29873: IFTRUE 29877
29875: GO 29888
29877: POP
// bc_type := b_factory ; 16 :
29878: LD_ADDR_OWVAR 42
29882: PUSH
29883: LD_INT 3
29885: ST_TO_ADDR
29886: GO 30267
29888: LD_INT 16
29890: DOUBLE
29891: EQUAL
29892: IFTRUE 29896
29894: GO 29907
29896: POP
// bc_type := b_ext_gun ; 17 :
29897: LD_ADDR_OWVAR 42
29901: PUSH
29902: LD_INT 17
29904: ST_TO_ADDR
29905: GO 30267
29907: LD_INT 17
29909: DOUBLE
29910: EQUAL
29911: IFTRUE 29915
29913: GO 29943
29915: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29916: LD_ADDR_OWVAR 42
29920: PUSH
29921: LD_INT 19
29923: PUSH
29924: LD_INT 23
29926: PUSH
29927: LD_INT 19
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: LIST
29934: PUSH
29935: LD_VAR 0 1
29939: ARRAY
29940: ST_TO_ADDR
29941: GO 30267
29943: LD_INT 18
29945: DOUBLE
29946: EQUAL
29947: IFTRUE 29951
29949: GO 29962
29951: POP
// bc_type := b_ext_radar ; 19 :
29952: LD_ADDR_OWVAR 42
29956: PUSH
29957: LD_INT 20
29959: ST_TO_ADDR
29960: GO 30267
29962: LD_INT 19
29964: DOUBLE
29965: EQUAL
29966: IFTRUE 29970
29968: GO 29981
29970: POP
// bc_type := b_ext_radio ; 20 :
29971: LD_ADDR_OWVAR 42
29975: PUSH
29976: LD_INT 22
29978: ST_TO_ADDR
29979: GO 30267
29981: LD_INT 20
29983: DOUBLE
29984: EQUAL
29985: IFTRUE 29989
29987: GO 30000
29989: POP
// bc_type := b_ext_siberium ; 21 :
29990: LD_ADDR_OWVAR 42
29994: PUSH
29995: LD_INT 21
29997: ST_TO_ADDR
29998: GO 30267
30000: LD_INT 21
30002: DOUBLE
30003: EQUAL
30004: IFTRUE 30008
30006: GO 30019
30008: POP
// bc_type := b_ext_computer ; 22 :
30009: LD_ADDR_OWVAR 42
30013: PUSH
30014: LD_INT 24
30016: ST_TO_ADDR
30017: GO 30267
30019: LD_INT 22
30021: DOUBLE
30022: EQUAL
30023: IFTRUE 30027
30025: GO 30038
30027: POP
// bc_type := b_ext_track ; 23 :
30028: LD_ADDR_OWVAR 42
30032: PUSH
30033: LD_INT 16
30035: ST_TO_ADDR
30036: GO 30267
30038: LD_INT 23
30040: DOUBLE
30041: EQUAL
30042: IFTRUE 30046
30044: GO 30057
30046: POP
// bc_type := b_ext_laser ; 24 :
30047: LD_ADDR_OWVAR 42
30051: PUSH
30052: LD_INT 25
30054: ST_TO_ADDR
30055: GO 30267
30057: LD_INT 24
30059: DOUBLE
30060: EQUAL
30061: IFTRUE 30065
30063: GO 30076
30065: POP
// bc_type := b_control_tower ; 25 :
30066: LD_ADDR_OWVAR 42
30070: PUSH
30071: LD_INT 36
30073: ST_TO_ADDR
30074: GO 30267
30076: LD_INT 25
30078: DOUBLE
30079: EQUAL
30080: IFTRUE 30084
30082: GO 30095
30084: POP
// bc_type := b_breastwork ; 26 :
30085: LD_ADDR_OWVAR 42
30089: PUSH
30090: LD_INT 31
30092: ST_TO_ADDR
30093: GO 30267
30095: LD_INT 26
30097: DOUBLE
30098: EQUAL
30099: IFTRUE 30103
30101: GO 30114
30103: POP
// bc_type := b_bunker ; 27 :
30104: LD_ADDR_OWVAR 42
30108: PUSH
30109: LD_INT 32
30111: ST_TO_ADDR
30112: GO 30267
30114: LD_INT 27
30116: DOUBLE
30117: EQUAL
30118: IFTRUE 30122
30120: GO 30133
30122: POP
// bc_type := b_turret ; 28 :
30123: LD_ADDR_OWVAR 42
30127: PUSH
30128: LD_INT 33
30130: ST_TO_ADDR
30131: GO 30267
30133: LD_INT 28
30135: DOUBLE
30136: EQUAL
30137: IFTRUE 30141
30139: GO 30152
30141: POP
// bc_type := b_armoury ; 29 :
30142: LD_ADDR_OWVAR 42
30146: PUSH
30147: LD_INT 4
30149: ST_TO_ADDR
30150: GO 30267
30152: LD_INT 29
30154: DOUBLE
30155: EQUAL
30156: IFTRUE 30160
30158: GO 30171
30160: POP
// bc_type := b_barracks ; 30 :
30161: LD_ADDR_OWVAR 42
30165: PUSH
30166: LD_INT 5
30168: ST_TO_ADDR
30169: GO 30267
30171: LD_INT 30
30173: DOUBLE
30174: EQUAL
30175: IFTRUE 30179
30177: GO 30190
30179: POP
// bc_type := b_solar_power ; 31 :
30180: LD_ADDR_OWVAR 42
30184: PUSH
30185: LD_INT 27
30187: ST_TO_ADDR
30188: GO 30267
30190: LD_INT 31
30192: DOUBLE
30193: EQUAL
30194: IFTRUE 30198
30196: GO 30209
30198: POP
// bc_type := b_oil_power ; 32 :
30199: LD_ADDR_OWVAR 42
30203: PUSH
30204: LD_INT 26
30206: ST_TO_ADDR
30207: GO 30267
30209: LD_INT 32
30211: DOUBLE
30212: EQUAL
30213: IFTRUE 30217
30215: GO 30228
30217: POP
// bc_type := b_siberite_power ; 33 :
30218: LD_ADDR_OWVAR 42
30222: PUSH
30223: LD_INT 28
30225: ST_TO_ADDR
30226: GO 30267
30228: LD_INT 33
30230: DOUBLE
30231: EQUAL
30232: IFTRUE 30236
30234: GO 30247
30236: POP
// bc_type := b_oil_mine ; 34 :
30237: LD_ADDR_OWVAR 42
30241: PUSH
30242: LD_INT 29
30244: ST_TO_ADDR
30245: GO 30267
30247: LD_INT 34
30249: DOUBLE
30250: EQUAL
30251: IFTRUE 30255
30253: GO 30266
30255: POP
// bc_type := b_siberite_mine ; end ;
30256: LD_ADDR_OWVAR 42
30260: PUSH
30261: LD_INT 30
30263: ST_TO_ADDR
30264: GO 30267
30266: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30267: LD_ADDR_VAR 0 8
30271: PUSH
30272: LD_VAR 0 5
30276: PPUSH
30277: LD_VAR 0 6
30281: PPUSH
30282: LD_VAR 0 3
30286: PPUSH
30287: CALL_OW 47
30291: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30292: LD_OWVAR 42
30296: PUSH
30297: LD_INT 32
30299: PUSH
30300: LD_INT 33
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: IN
30307: IFFALSE 30323
// PlaceWeaponTurret ( b , weapon ) ;
30309: LD_VAR 0 8
30313: PPUSH
30314: LD_VAR 0 4
30318: PPUSH
30319: CALL_OW 431
// end ;
30323: LD_VAR 0 7
30327: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30328: LD_INT 0
30330: PPUSH
30331: PPUSH
30332: PPUSH
30333: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30334: LD_ADDR_VAR 0 4
30338: PUSH
30339: LD_INT 22
30341: PUSH
30342: LD_OWVAR 2
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 2
30353: PUSH
30354: LD_INT 30
30356: PUSH
30357: LD_INT 0
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 30
30366: PUSH
30367: LD_INT 1
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: LIST
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PPUSH
30383: CALL_OW 69
30387: ST_TO_ADDR
// if not tmp then
30388: LD_VAR 0 4
30392: NOT
30393: IFFALSE 30397
// exit ;
30395: GO 30456
// for i in tmp do
30397: LD_ADDR_VAR 0 2
30401: PUSH
30402: LD_VAR 0 4
30406: PUSH
30407: FOR_IN
30408: IFFALSE 30454
// for j = 1 to 3 do
30410: LD_ADDR_VAR 0 3
30414: PUSH
30415: DOUBLE
30416: LD_INT 1
30418: DEC
30419: ST_TO_ADDR
30420: LD_INT 3
30422: PUSH
30423: FOR_TO
30424: IFFALSE 30450
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30426: LD_VAR 0 2
30430: PPUSH
30431: CALL_OW 274
30435: PPUSH
30436: LD_VAR 0 3
30440: PPUSH
30441: LD_INT 99999
30443: PPUSH
30444: CALL_OW 277
30448: GO 30423
30450: POP
30451: POP
30452: GO 30407
30454: POP
30455: POP
// end ;
30456: LD_VAR 0 1
30460: RET
// export function hHackSetLevel10 ; var i , j ; begin
30461: LD_INT 0
30463: PPUSH
30464: PPUSH
30465: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30466: LD_ADDR_VAR 0 2
30470: PUSH
30471: LD_INT 21
30473: PUSH
30474: LD_INT 1
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PPUSH
30481: CALL_OW 69
30485: PUSH
30486: FOR_IN
30487: IFFALSE 30539
// if IsSelected ( i ) then
30489: LD_VAR 0 2
30493: PPUSH
30494: CALL_OW 306
30498: IFFALSE 30537
// begin for j := 1 to 4 do
30500: LD_ADDR_VAR 0 3
30504: PUSH
30505: DOUBLE
30506: LD_INT 1
30508: DEC
30509: ST_TO_ADDR
30510: LD_INT 4
30512: PUSH
30513: FOR_TO
30514: IFFALSE 30535
// SetSkill ( i , j , 10 ) ;
30516: LD_VAR 0 2
30520: PPUSH
30521: LD_VAR 0 3
30525: PPUSH
30526: LD_INT 10
30528: PPUSH
30529: CALL_OW 237
30533: GO 30513
30535: POP
30536: POP
// end ;
30537: GO 30486
30539: POP
30540: POP
// end ;
30541: LD_VAR 0 1
30545: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30546: LD_INT 0
30548: PPUSH
30549: PPUSH
30550: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30551: LD_ADDR_VAR 0 2
30555: PUSH
30556: LD_INT 22
30558: PUSH
30559: LD_OWVAR 2
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 21
30570: PUSH
30571: LD_INT 1
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PPUSH
30582: CALL_OW 69
30586: PUSH
30587: FOR_IN
30588: IFFALSE 30629
// begin for j := 1 to 4 do
30590: LD_ADDR_VAR 0 3
30594: PUSH
30595: DOUBLE
30596: LD_INT 1
30598: DEC
30599: ST_TO_ADDR
30600: LD_INT 4
30602: PUSH
30603: FOR_TO
30604: IFFALSE 30625
// SetSkill ( i , j , 10 ) ;
30606: LD_VAR 0 2
30610: PPUSH
30611: LD_VAR 0 3
30615: PPUSH
30616: LD_INT 10
30618: PPUSH
30619: CALL_OW 237
30623: GO 30603
30625: POP
30626: POP
// end ;
30627: GO 30587
30629: POP
30630: POP
// end ;
30631: LD_VAR 0 1
30635: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30636: LD_INT 0
30638: PPUSH
// uc_side := your_side ;
30639: LD_ADDR_OWVAR 20
30643: PUSH
30644: LD_OWVAR 2
30648: ST_TO_ADDR
// uc_nation := nation ;
30649: LD_ADDR_OWVAR 21
30653: PUSH
30654: LD_VAR 0 1
30658: ST_TO_ADDR
// InitHc ;
30659: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30663: LD_INT 0
30665: PPUSH
30666: LD_VAR 0 2
30670: PPUSH
30671: LD_VAR 0 3
30675: PPUSH
30676: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30680: LD_VAR 0 4
30684: PPUSH
30685: LD_VAR 0 5
30689: PPUSH
30690: CALL_OW 428
30694: PUSH
30695: LD_INT 0
30697: EQUAL
30698: IFFALSE 30722
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
30700: CALL_OW 44
30704: PPUSH
30705: LD_VAR 0 4
30709: PPUSH
30710: LD_VAR 0 5
30714: PPUSH
30715: LD_INT 1
30717: PPUSH
30718: CALL_OW 48
// end ;
30722: LD_VAR 0 6
30726: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30727: LD_INT 0
30729: PPUSH
30730: PPUSH
// uc_side := your_side ;
30731: LD_ADDR_OWVAR 20
30735: PUSH
30736: LD_OWVAR 2
30740: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30741: LD_VAR 0 1
30745: PUSH
30746: LD_INT 1
30748: PUSH
30749: LD_INT 2
30751: PUSH
30752: LD_INT 3
30754: PUSH
30755: LD_INT 4
30757: PUSH
30758: LD_INT 5
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: IN
30768: IFFALSE 30780
// uc_nation := nation_american else
30770: LD_ADDR_OWVAR 21
30774: PUSH
30775: LD_INT 1
30777: ST_TO_ADDR
30778: GO 30823
// if chassis in [ 11 , 12 , 13 , 14 ] then
30780: LD_VAR 0 1
30784: PUSH
30785: LD_INT 11
30787: PUSH
30788: LD_INT 12
30790: PUSH
30791: LD_INT 13
30793: PUSH
30794: LD_INT 14
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: IN
30803: IFFALSE 30815
// uc_nation := nation_arabian else
30805: LD_ADDR_OWVAR 21
30809: PUSH
30810: LD_INT 2
30812: ST_TO_ADDR
30813: GO 30823
// uc_nation := nation_russian ;
30815: LD_ADDR_OWVAR 21
30819: PUSH
30820: LD_INT 3
30822: ST_TO_ADDR
// vc_chassis := chassis ;
30823: LD_ADDR_OWVAR 37
30827: PUSH
30828: LD_VAR 0 1
30832: ST_TO_ADDR
// vc_engine := engine ;
30833: LD_ADDR_OWVAR 39
30837: PUSH
30838: LD_VAR 0 2
30842: ST_TO_ADDR
// vc_control := control ;
30843: LD_ADDR_OWVAR 38
30847: PUSH
30848: LD_VAR 0 3
30852: ST_TO_ADDR
// vc_weapon := weapon ;
30853: LD_ADDR_OWVAR 40
30857: PUSH
30858: LD_VAR 0 4
30862: ST_TO_ADDR
// un := CreateVehicle ;
30863: LD_ADDR_VAR 0 8
30867: PUSH
30868: CALL_OW 45
30872: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30873: LD_VAR 0 8
30877: PPUSH
30878: LD_INT 0
30880: PPUSH
30881: LD_INT 5
30883: PPUSH
30884: CALL_OW 12
30888: PPUSH
30889: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30893: LD_VAR 0 8
30897: PPUSH
30898: LD_VAR 0 5
30902: PPUSH
30903: LD_VAR 0 6
30907: PPUSH
30908: LD_INT 1
30910: PPUSH
30911: CALL_OW 48
// end ;
30915: LD_VAR 0 7
30919: RET
// export hInvincible ; every 1 do
30920: GO 30922
30922: DISABLE
// hInvincible := [ ] ;
30923: LD_ADDR_EXP 109
30927: PUSH
30928: EMPTY
30929: ST_TO_ADDR
30930: END
// every 10 do var i ;
30931: GO 30933
30933: DISABLE
30934: LD_INT 0
30936: PPUSH
// begin enable ;
30937: ENABLE
// if not hInvincible then
30938: LD_EXP 109
30942: NOT
30943: IFFALSE 30947
// exit ;
30945: GO 30991
// for i in hInvincible do
30947: LD_ADDR_VAR 0 1
30951: PUSH
30952: LD_EXP 109
30956: PUSH
30957: FOR_IN
30958: IFFALSE 30989
// if GetLives ( i ) < 1000 then
30960: LD_VAR 0 1
30964: PPUSH
30965: CALL_OW 256
30969: PUSH
30970: LD_INT 1000
30972: LESS
30973: IFFALSE 30987
// SetLives ( i , 1000 ) ;
30975: LD_VAR 0 1
30979: PPUSH
30980: LD_INT 1000
30982: PPUSH
30983: CALL_OW 234
30987: GO 30957
30989: POP
30990: POP
// end ;
30991: PPOPN 1
30993: END
// export function hHackInvincible ; var i ; begin
30994: LD_INT 0
30996: PPUSH
30997: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30998: LD_ADDR_VAR 0 2
31002: PUSH
31003: LD_INT 2
31005: PUSH
31006: LD_INT 21
31008: PUSH
31009: LD_INT 1
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 21
31018: PUSH
31019: LD_INT 2
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: LIST
31030: PPUSH
31031: CALL_OW 69
31035: PUSH
31036: FOR_IN
31037: IFFALSE 31098
// if IsSelected ( i ) then
31039: LD_VAR 0 2
31043: PPUSH
31044: CALL_OW 306
31048: IFFALSE 31096
// begin if i in hInvincible then
31050: LD_VAR 0 2
31054: PUSH
31055: LD_EXP 109
31059: IN
31060: IFFALSE 31080
// hInvincible := hInvincible diff i else
31062: LD_ADDR_EXP 109
31066: PUSH
31067: LD_EXP 109
31071: PUSH
31072: LD_VAR 0 2
31076: DIFF
31077: ST_TO_ADDR
31078: GO 31096
// hInvincible := hInvincible union i ;
31080: LD_ADDR_EXP 109
31084: PUSH
31085: LD_EXP 109
31089: PUSH
31090: LD_VAR 0 2
31094: UNION
31095: ST_TO_ADDR
// end ;
31096: GO 31036
31098: POP
31099: POP
// end ;
31100: LD_VAR 0 1
31104: RET
// export function hHackInvisible ; var i , j ; begin
31105: LD_INT 0
31107: PPUSH
31108: PPUSH
31109: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31110: LD_ADDR_VAR 0 2
31114: PUSH
31115: LD_INT 21
31117: PUSH
31118: LD_INT 1
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PPUSH
31125: CALL_OW 69
31129: PUSH
31130: FOR_IN
31131: IFFALSE 31155
// if IsSelected ( i ) then
31133: LD_VAR 0 2
31137: PPUSH
31138: CALL_OW 306
31142: IFFALSE 31153
// ComForceInvisible ( i ) ;
31144: LD_VAR 0 2
31148: PPUSH
31149: CALL_OW 496
31153: GO 31130
31155: POP
31156: POP
// end ;
31157: LD_VAR 0 1
31161: RET
// export function hHackChangeYourSide ; begin
31162: LD_INT 0
31164: PPUSH
// if your_side = 8 then
31165: LD_OWVAR 2
31169: PUSH
31170: LD_INT 8
31172: EQUAL
31173: IFFALSE 31185
// your_side := 0 else
31175: LD_ADDR_OWVAR 2
31179: PUSH
31180: LD_INT 0
31182: ST_TO_ADDR
31183: GO 31199
// your_side := your_side + 1 ;
31185: LD_ADDR_OWVAR 2
31189: PUSH
31190: LD_OWVAR 2
31194: PUSH
31195: LD_INT 1
31197: PLUS
31198: ST_TO_ADDR
// end ;
31199: LD_VAR 0 1
31203: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31204: LD_INT 0
31206: PPUSH
31207: PPUSH
31208: PPUSH
// for i in all_units do
31209: LD_ADDR_VAR 0 2
31213: PUSH
31214: LD_OWVAR 3
31218: PUSH
31219: FOR_IN
31220: IFFALSE 31298
// if IsSelected ( i ) then
31222: LD_VAR 0 2
31226: PPUSH
31227: CALL_OW 306
31231: IFFALSE 31296
// begin j := GetSide ( i ) ;
31233: LD_ADDR_VAR 0 3
31237: PUSH
31238: LD_VAR 0 2
31242: PPUSH
31243: CALL_OW 255
31247: ST_TO_ADDR
// if j = 8 then
31248: LD_VAR 0 3
31252: PUSH
31253: LD_INT 8
31255: EQUAL
31256: IFFALSE 31268
// j := 0 else
31258: LD_ADDR_VAR 0 3
31262: PUSH
31263: LD_INT 0
31265: ST_TO_ADDR
31266: GO 31282
// j := j + 1 ;
31268: LD_ADDR_VAR 0 3
31272: PUSH
31273: LD_VAR 0 3
31277: PUSH
31278: LD_INT 1
31280: PLUS
31281: ST_TO_ADDR
// SetSide ( i , j ) ;
31282: LD_VAR 0 2
31286: PPUSH
31287: LD_VAR 0 3
31291: PPUSH
31292: CALL_OW 235
// end ;
31296: GO 31219
31298: POP
31299: POP
// end ;
31300: LD_VAR 0 1
31304: RET
// export function hHackFog ; begin
31305: LD_INT 0
31307: PPUSH
// FogOff ( true ) ;
31308: LD_INT 1
31310: PPUSH
31311: CALL_OW 344
// end ;
31315: LD_VAR 0 1
31319: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31320: LD_INT 0
31322: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31323: LD_VAR 0 1
31327: PPUSH
31328: LD_VAR 0 2
31332: PPUSH
31333: LD_VAR 0 3
31337: PPUSH
31338: LD_INT 1
31340: PPUSH
31341: LD_INT 1
31343: PPUSH
31344: CALL_OW 483
// CenterOnXY ( x , y ) ;
31348: LD_VAR 0 2
31352: PPUSH
31353: LD_VAR 0 3
31357: PPUSH
31358: CALL_OW 84
// end ; end_of_file
31362: LD_VAR 0 4
31366: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
31367: LD_VAR 0 1
31371: PUSH
31372: LD_INT 200
31374: DOUBLE
31375: GREATEREQUAL
31376: IFFALSE 31384
31378: LD_INT 299
31380: DOUBLE
31381: LESSEQUAL
31382: IFTRUE 31386
31384: GO 31418
31386: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
31387: LD_VAR 0 1
31391: PPUSH
31392: LD_VAR 0 2
31396: PPUSH
31397: LD_VAR 0 3
31401: PPUSH
31402: LD_VAR 0 4
31406: PPUSH
31407: LD_VAR 0 5
31411: PPUSH
31412: CALL 31908 0 5
31416: GO 31495
31418: LD_INT 300
31420: DOUBLE
31421: GREATEREQUAL
31422: IFFALSE 31430
31424: LD_INT 399
31426: DOUBLE
31427: LESSEQUAL
31428: IFTRUE 31432
31430: GO 31494
31432: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
31433: LD_VAR 0 1
31437: PPUSH
31438: LD_VAR 0 2
31442: PPUSH
31443: LD_VAR 0 3
31447: PPUSH
31448: LD_VAR 0 4
31452: PPUSH
31453: LD_VAR 0 5
31457: PPUSH
31458: LD_VAR 0 6
31462: PPUSH
31463: LD_VAR 0 7
31467: PPUSH
31468: LD_VAR 0 8
31472: PPUSH
31473: LD_VAR 0 9
31477: PPUSH
31478: LD_VAR 0 10
31482: PPUSH
31483: LD_VAR 0 11
31487: PPUSH
31488: CALL 29387 0 11
31492: GO 31495
31494: POP
// end ;
31495: PPOPN 11
31497: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
31498: LD_VAR 0 1
31502: PPUSH
31503: LD_VAR 0 2
31507: PPUSH
31508: LD_VAR 0 3
31512: PPUSH
31513: LD_VAR 0 4
31517: PPUSH
31518: LD_VAR 0 5
31522: PPUSH
31523: CALL 31644 0 5
// end ; end_of_file
31527: PPOPN 5
31529: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
31530: LD_INT 0
31532: PPUSH
31533: PPUSH
31534: PPUSH
31535: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
31536: LD_VAR 0 1
31540: PPUSH
31541: CALL_OW 264
31545: PUSH
31546: LD_EXP 125
31550: EQUAL
31551: IFFALSE 31623
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
31553: LD_INT 68
31555: PPUSH
31556: LD_VAR 0 1
31560: PPUSH
31561: CALL_OW 255
31565: PPUSH
31566: CALL_OW 321
31570: PUSH
31571: LD_INT 2
31573: EQUAL
31574: IFFALSE 31586
// eff := 70 else
31576: LD_ADDR_VAR 0 4
31580: PUSH
31581: LD_INT 70
31583: ST_TO_ADDR
31584: GO 31594
// eff := 30 ;
31586: LD_ADDR_VAR 0 4
31590: PUSH
31591: LD_INT 30
31593: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
31594: LD_VAR 0 1
31598: PPUSH
31599: CALL_OW 250
31603: PPUSH
31604: LD_VAR 0 1
31608: PPUSH
31609: CALL_OW 251
31613: PPUSH
31614: LD_VAR 0 4
31618: PPUSH
31619: CALL_OW 495
// end ; end ;
31623: LD_VAR 0 2
31627: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
31628: LD_INT 0
31630: PPUSH
// end ;
31631: LD_VAR 0 4
31635: RET
// export function SOS_Command ( cmd ) ; begin
31636: LD_INT 0
31638: PPUSH
// end ;
31639: LD_VAR 0 2
31643: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
31644: LD_INT 0
31646: PPUSH
// end ;
31647: LD_VAR 0 6
31651: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
31652: LD_INT 0
31654: PPUSH
31655: PPUSH
// if not vehicle or not factory then
31656: LD_VAR 0 1
31660: NOT
31661: PUSH
31662: LD_VAR 0 2
31666: NOT
31667: OR
31668: IFFALSE 31672
// exit ;
31670: GO 31903
// if factoryWaypoints >= factory then
31672: LD_EXP 110
31676: PUSH
31677: LD_VAR 0 2
31681: GREATEREQUAL
31682: IFFALSE 31903
// if factoryWaypoints [ factory ] then
31684: LD_EXP 110
31688: PUSH
31689: LD_VAR 0 2
31693: ARRAY
31694: IFFALSE 31903
// begin if GetControl ( vehicle ) = control_manual then
31696: LD_VAR 0 1
31700: PPUSH
31701: CALL_OW 263
31705: PUSH
31706: LD_INT 1
31708: EQUAL
31709: IFFALSE 31790
// begin driver := IsDrivenBy ( vehicle ) ;
31711: LD_ADDR_VAR 0 4
31715: PUSH
31716: LD_VAR 0 1
31720: PPUSH
31721: CALL_OW 311
31725: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31726: LD_VAR 0 4
31730: PPUSH
31731: LD_EXP 110
31735: PUSH
31736: LD_VAR 0 2
31740: ARRAY
31741: PUSH
31742: LD_INT 3
31744: ARRAY
31745: PPUSH
31746: LD_EXP 110
31750: PUSH
31751: LD_VAR 0 2
31755: ARRAY
31756: PUSH
31757: LD_INT 4
31759: ARRAY
31760: PPUSH
31761: CALL_OW 171
// AddComExitVehicle ( driver ) ;
31765: LD_VAR 0 4
31769: PPUSH
31770: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
31774: LD_VAR 0 4
31778: PPUSH
31779: LD_VAR 0 2
31783: PPUSH
31784: CALL_OW 180
// end else
31788: GO 31903
// if GetControl ( vehicle ) = control_remote then
31790: LD_VAR 0 1
31794: PPUSH
31795: CALL_OW 263
31799: PUSH
31800: LD_INT 2
31802: EQUAL
31803: IFFALSE 31864
// begin wait ( 0 0$2 ) ;
31805: LD_INT 70
31807: PPUSH
31808: CALL_OW 67
// if Connect ( vehicle ) then
31812: LD_VAR 0 1
31816: PPUSH
31817: CALL 44295 0 1
31821: IFFALSE 31862
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31823: LD_VAR 0 1
31827: PPUSH
31828: LD_EXP 110
31832: PUSH
31833: LD_VAR 0 2
31837: ARRAY
31838: PUSH
31839: LD_INT 3
31841: ARRAY
31842: PPUSH
31843: LD_EXP 110
31847: PUSH
31848: LD_VAR 0 2
31852: ARRAY
31853: PUSH
31854: LD_INT 4
31856: ARRAY
31857: PPUSH
31858: CALL_OW 171
// end else
31862: GO 31903
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31864: LD_VAR 0 1
31868: PPUSH
31869: LD_EXP 110
31873: PUSH
31874: LD_VAR 0 2
31878: ARRAY
31879: PUSH
31880: LD_INT 3
31882: ARRAY
31883: PPUSH
31884: LD_EXP 110
31888: PUSH
31889: LD_VAR 0 2
31893: ARRAY
31894: PUSH
31895: LD_INT 4
31897: ARRAY
31898: PPUSH
31899: CALL_OW 171
// end ; end ;
31903: LD_VAR 0 3
31907: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
31908: LD_INT 0
31910: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
31911: LD_VAR 0 1
31915: PUSH
31916: LD_INT 250
31918: EQUAL
31919: PUSH
31920: LD_VAR 0 2
31924: PPUSH
31925: CALL_OW 264
31929: PUSH
31930: LD_EXP 128
31934: EQUAL
31935: AND
31936: IFFALSE 31957
// MinerPlaceMine ( unit , x , y ) ;
31938: LD_VAR 0 2
31942: PPUSH
31943: LD_VAR 0 4
31947: PPUSH
31948: LD_VAR 0 5
31952: PPUSH
31953: CALL 34685 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
31957: LD_VAR 0 1
31961: PUSH
31962: LD_INT 251
31964: EQUAL
31965: PUSH
31966: LD_VAR 0 2
31970: PPUSH
31971: CALL_OW 264
31975: PUSH
31976: LD_EXP 128
31980: EQUAL
31981: AND
31982: IFFALSE 32003
// MinerDetonateMine ( unit , x , y ) ;
31984: LD_VAR 0 2
31988: PPUSH
31989: LD_VAR 0 4
31993: PPUSH
31994: LD_VAR 0 5
31998: PPUSH
31999: CALL 34962 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32003: LD_VAR 0 1
32007: PUSH
32008: LD_INT 252
32010: EQUAL
32011: PUSH
32012: LD_VAR 0 2
32016: PPUSH
32017: CALL_OW 264
32021: PUSH
32022: LD_EXP 128
32026: EQUAL
32027: AND
32028: IFFALSE 32049
// MinerCreateMinefield ( unit , x , y ) ;
32030: LD_VAR 0 2
32034: PPUSH
32035: LD_VAR 0 4
32039: PPUSH
32040: LD_VAR 0 5
32044: PPUSH
32045: CALL 35379 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32049: LD_VAR 0 1
32053: PUSH
32054: LD_INT 253
32056: EQUAL
32057: PUSH
32058: LD_VAR 0 2
32062: PPUSH
32063: CALL_OW 257
32067: PUSH
32068: LD_INT 5
32070: EQUAL
32071: AND
32072: IFFALSE 32093
// ComBinocular ( unit , x , y ) ;
32074: LD_VAR 0 2
32078: PPUSH
32079: LD_VAR 0 4
32083: PPUSH
32084: LD_VAR 0 5
32088: PPUSH
32089: CALL 35750 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32093: LD_VAR 0 1
32097: PUSH
32098: LD_INT 254
32100: EQUAL
32101: PUSH
32102: LD_VAR 0 2
32106: PPUSH
32107: CALL_OW 264
32111: PUSH
32112: LD_EXP 123
32116: EQUAL
32117: AND
32118: PUSH
32119: LD_VAR 0 3
32123: PPUSH
32124: CALL_OW 263
32128: PUSH
32129: LD_INT 3
32131: EQUAL
32132: AND
32133: IFFALSE 32149
// HackDestroyVehicle ( unit , selectedUnit ) ;
32135: LD_VAR 0 2
32139: PPUSH
32140: LD_VAR 0 3
32144: PPUSH
32145: CALL 34045 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32149: LD_VAR 0 1
32153: PUSH
32154: LD_INT 255
32156: EQUAL
32157: PUSH
32158: LD_VAR 0 2
32162: PPUSH
32163: CALL_OW 264
32167: PUSH
32168: LD_INT 14
32170: PUSH
32171: LD_INT 53
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: IN
32178: AND
32179: PUSH
32180: LD_VAR 0 4
32184: PPUSH
32185: LD_VAR 0 5
32189: PPUSH
32190: CALL_OW 488
32194: AND
32195: IFFALSE 32219
// CutTreeXYR ( unit , x , y , 12 ) ;
32197: LD_VAR 0 2
32201: PPUSH
32202: LD_VAR 0 4
32206: PPUSH
32207: LD_VAR 0 5
32211: PPUSH
32212: LD_INT 12
32214: PPUSH
32215: CALL 32611 0 4
// if cmd = 256 then
32219: LD_VAR 0 1
32223: PUSH
32224: LD_INT 256
32226: EQUAL
32227: IFFALSE 32248
// SetFactoryWaypoint ( unit , x , y ) ;
32229: LD_VAR 0 2
32233: PPUSH
32234: LD_VAR 0 4
32238: PPUSH
32239: LD_VAR 0 5
32243: PPUSH
32244: CALL 32253 0 3
// end ;
32248: LD_VAR 0 6
32252: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
32253: LD_INT 0
32255: PPUSH
32256: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
32257: LD_VAR 0 1
32261: NOT
32262: PUSH
32263: LD_VAR 0 2
32267: PPUSH
32268: LD_VAR 0 3
32272: PPUSH
32273: CALL_OW 488
32277: NOT
32278: OR
32279: PUSH
32280: LD_VAR 0 1
32284: PPUSH
32285: CALL_OW 266
32289: PUSH
32290: LD_INT 3
32292: NONEQUAL
32293: PUSH
32294: LD_VAR 0 1
32298: PPUSH
32299: CALL_OW 247
32303: PUSH
32304: LD_INT 1
32306: EQUAL
32307: NOT
32308: AND
32309: OR
32310: IFFALSE 32314
// exit ;
32312: GO 32463
// if GetType ( factory ) = unit_human then
32314: LD_VAR 0 1
32318: PPUSH
32319: CALL_OW 247
32323: PUSH
32324: LD_INT 1
32326: EQUAL
32327: IFFALSE 32344
// factory := IsInUnit ( factory ) ;
32329: LD_ADDR_VAR 0 1
32333: PUSH
32334: LD_VAR 0 1
32338: PPUSH
32339: CALL_OW 310
32343: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
32344: LD_VAR 0 1
32348: PPUSH
32349: CALL_OW 266
32353: PUSH
32354: LD_INT 3
32356: NONEQUAL
32357: IFFALSE 32361
// exit ;
32359: GO 32463
// if HexInfo ( x , y ) = factory then
32361: LD_VAR 0 2
32365: PPUSH
32366: LD_VAR 0 3
32370: PPUSH
32371: CALL_OW 428
32375: PUSH
32376: LD_VAR 0 1
32380: EQUAL
32381: IFFALSE 32408
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
32383: LD_ADDR_EXP 110
32387: PUSH
32388: LD_EXP 110
32392: PPUSH
32393: LD_VAR 0 1
32397: PPUSH
32398: LD_INT 0
32400: PPUSH
32401: CALL_OW 1
32405: ST_TO_ADDR
32406: GO 32459
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
32408: LD_ADDR_EXP 110
32412: PUSH
32413: LD_EXP 110
32417: PPUSH
32418: LD_VAR 0 1
32422: PPUSH
32423: LD_VAR 0 1
32427: PPUSH
32428: CALL_OW 255
32432: PUSH
32433: LD_VAR 0 1
32437: PUSH
32438: LD_VAR 0 2
32442: PUSH
32443: LD_VAR 0 3
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: PPUSH
32454: CALL_OW 1
32458: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32459: CALL 32468 0 0
// end ;
32463: LD_VAR 0 4
32467: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
32468: LD_INT 0
32470: PPUSH
32471: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
32472: LD_STRING resetFactoryWaypoint();
32474: PPUSH
32475: CALL_OW 559
// if factoryWaypoints then
32479: LD_EXP 110
32483: IFFALSE 32606
// begin for i := 1 to factoryWaypoints do
32485: LD_ADDR_VAR 0 2
32489: PUSH
32490: DOUBLE
32491: LD_INT 1
32493: DEC
32494: ST_TO_ADDR
32495: LD_EXP 110
32499: PUSH
32500: FOR_TO
32501: IFFALSE 32604
// if factoryWaypoints [ i ] then
32503: LD_EXP 110
32507: PUSH
32508: LD_VAR 0 2
32512: ARRAY
32513: IFFALSE 32602
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
32515: LD_STRING setFactoryWaypointXY(
32517: PUSH
32518: LD_EXP 110
32522: PUSH
32523: LD_VAR 0 2
32527: ARRAY
32528: PUSH
32529: LD_INT 1
32531: ARRAY
32532: STR
32533: PUSH
32534: LD_STRING ,
32536: STR
32537: PUSH
32538: LD_EXP 110
32542: PUSH
32543: LD_VAR 0 2
32547: ARRAY
32548: PUSH
32549: LD_INT 2
32551: ARRAY
32552: STR
32553: PUSH
32554: LD_STRING ,
32556: STR
32557: PUSH
32558: LD_EXP 110
32562: PUSH
32563: LD_VAR 0 2
32567: ARRAY
32568: PUSH
32569: LD_INT 3
32571: ARRAY
32572: STR
32573: PUSH
32574: LD_STRING ,
32576: STR
32577: PUSH
32578: LD_EXP 110
32582: PUSH
32583: LD_VAR 0 2
32587: ARRAY
32588: PUSH
32589: LD_INT 4
32591: ARRAY
32592: STR
32593: PUSH
32594: LD_STRING )
32596: STR
32597: PPUSH
32598: CALL_OW 559
32602: GO 32500
32604: POP
32605: POP
// end ; end ;
32606: LD_VAR 0 1
32610: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32611: LD_INT 0
32613: PPUSH
32614: PPUSH
32615: PPUSH
32616: PPUSH
32617: PPUSH
32618: PPUSH
32619: PPUSH
32620: PPUSH
32621: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32622: LD_VAR 0 1
32626: NOT
32627: PUSH
32628: LD_VAR 0 2
32632: PPUSH
32633: LD_VAR 0 3
32637: PPUSH
32638: CALL_OW 488
32642: NOT
32643: OR
32644: PUSH
32645: LD_VAR 0 4
32649: NOT
32650: OR
32651: IFFALSE 32655
// exit ;
32653: GO 32995
// list := [ ] ;
32655: LD_ADDR_VAR 0 13
32659: PUSH
32660: EMPTY
32661: ST_TO_ADDR
// if x - r < 0 then
32662: LD_VAR 0 2
32666: PUSH
32667: LD_VAR 0 4
32671: MINUS
32672: PUSH
32673: LD_INT 0
32675: LESS
32676: IFFALSE 32688
// min_x := 0 else
32678: LD_ADDR_VAR 0 7
32682: PUSH
32683: LD_INT 0
32685: ST_TO_ADDR
32686: GO 32704
// min_x := x - r ;
32688: LD_ADDR_VAR 0 7
32692: PUSH
32693: LD_VAR 0 2
32697: PUSH
32698: LD_VAR 0 4
32702: MINUS
32703: ST_TO_ADDR
// if y - r < 0 then
32704: LD_VAR 0 3
32708: PUSH
32709: LD_VAR 0 4
32713: MINUS
32714: PUSH
32715: LD_INT 0
32717: LESS
32718: IFFALSE 32730
// min_y := 0 else
32720: LD_ADDR_VAR 0 8
32724: PUSH
32725: LD_INT 0
32727: ST_TO_ADDR
32728: GO 32746
// min_y := y - r ;
32730: LD_ADDR_VAR 0 8
32734: PUSH
32735: LD_VAR 0 3
32739: PUSH
32740: LD_VAR 0 4
32744: MINUS
32745: ST_TO_ADDR
// max_x := x + r ;
32746: LD_ADDR_VAR 0 9
32750: PUSH
32751: LD_VAR 0 2
32755: PUSH
32756: LD_VAR 0 4
32760: PLUS
32761: ST_TO_ADDR
// max_y := y + r ;
32762: LD_ADDR_VAR 0 10
32766: PUSH
32767: LD_VAR 0 3
32771: PUSH
32772: LD_VAR 0 4
32776: PLUS
32777: ST_TO_ADDR
// for _x = min_x to max_x do
32778: LD_ADDR_VAR 0 11
32782: PUSH
32783: DOUBLE
32784: LD_VAR 0 7
32788: DEC
32789: ST_TO_ADDR
32790: LD_VAR 0 9
32794: PUSH
32795: FOR_TO
32796: IFFALSE 32913
// for _y = min_y to max_y do
32798: LD_ADDR_VAR 0 12
32802: PUSH
32803: DOUBLE
32804: LD_VAR 0 8
32808: DEC
32809: ST_TO_ADDR
32810: LD_VAR 0 10
32814: PUSH
32815: FOR_TO
32816: IFFALSE 32909
// begin if not ValidHex ( _x , _y ) then
32818: LD_VAR 0 11
32822: PPUSH
32823: LD_VAR 0 12
32827: PPUSH
32828: CALL_OW 488
32832: NOT
32833: IFFALSE 32837
// continue ;
32835: GO 32815
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32837: LD_VAR 0 11
32841: PPUSH
32842: LD_VAR 0 12
32846: PPUSH
32847: CALL_OW 351
32851: PUSH
32852: LD_VAR 0 11
32856: PPUSH
32857: LD_VAR 0 12
32861: PPUSH
32862: CALL_OW 554
32866: AND
32867: IFFALSE 32907
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32869: LD_ADDR_VAR 0 13
32873: PUSH
32874: LD_VAR 0 13
32878: PPUSH
32879: LD_VAR 0 13
32883: PUSH
32884: LD_INT 1
32886: PLUS
32887: PPUSH
32888: LD_VAR 0 11
32892: PUSH
32893: LD_VAR 0 12
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PPUSH
32902: CALL_OW 2
32906: ST_TO_ADDR
// end ;
32907: GO 32815
32909: POP
32910: POP
32911: GO 32795
32913: POP
32914: POP
// if not list then
32915: LD_VAR 0 13
32919: NOT
32920: IFFALSE 32924
// exit ;
32922: GO 32995
// for i in list do
32924: LD_ADDR_VAR 0 6
32928: PUSH
32929: LD_VAR 0 13
32933: PUSH
32934: FOR_IN
32935: IFFALSE 32993
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32937: LD_VAR 0 1
32941: PPUSH
32942: LD_STRING M
32944: PUSH
32945: LD_VAR 0 6
32949: PUSH
32950: LD_INT 1
32952: ARRAY
32953: PUSH
32954: LD_VAR 0 6
32958: PUSH
32959: LD_INT 2
32961: ARRAY
32962: PUSH
32963: LD_INT 0
32965: PUSH
32966: LD_INT 0
32968: PUSH
32969: LD_INT 0
32971: PUSH
32972: LD_INT 0
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: PUSH
32984: EMPTY
32985: LIST
32986: PPUSH
32987: CALL_OW 447
32991: GO 32934
32993: POP
32994: POP
// end ;
32995: LD_VAR 0 5
32999: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33000: LD_EXP 111
33004: NOT
33005: IFFALSE 33055
33007: GO 33009
33009: DISABLE
// begin initHack := true ;
33010: LD_ADDR_EXP 111
33014: PUSH
33015: LD_INT 1
33017: ST_TO_ADDR
// hackTanks := [ ] ;
33018: LD_ADDR_EXP 112
33022: PUSH
33023: EMPTY
33024: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33025: LD_ADDR_EXP 113
33029: PUSH
33030: EMPTY
33031: ST_TO_ADDR
// hackLimit := 3 ;
33032: LD_ADDR_EXP 114
33036: PUSH
33037: LD_INT 3
33039: ST_TO_ADDR
// hackDist := 12 ;
33040: LD_ADDR_EXP 115
33044: PUSH
33045: LD_INT 12
33047: ST_TO_ADDR
// hackCounter := [ ] ;
33048: LD_ADDR_EXP 116
33052: PUSH
33053: EMPTY
33054: ST_TO_ADDR
// end ;
33055: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33056: LD_EXP 111
33060: PUSH
33061: LD_INT 34
33063: PUSH
33064: LD_EXP 123
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PPUSH
33073: CALL_OW 69
33077: AND
33078: IFFALSE 33333
33080: GO 33082
33082: DISABLE
33083: LD_INT 0
33085: PPUSH
33086: PPUSH
// begin enable ;
33087: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33088: LD_ADDR_VAR 0 1
33092: PUSH
33093: LD_INT 34
33095: PUSH
33096: LD_EXP 123
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PPUSH
33105: CALL_OW 69
33109: PUSH
33110: FOR_IN
33111: IFFALSE 33331
// begin if not i in hackTanks then
33113: LD_VAR 0 1
33117: PUSH
33118: LD_EXP 112
33122: IN
33123: NOT
33124: IFFALSE 33207
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33126: LD_ADDR_EXP 112
33130: PUSH
33131: LD_EXP 112
33135: PPUSH
33136: LD_EXP 112
33140: PUSH
33141: LD_INT 1
33143: PLUS
33144: PPUSH
33145: LD_VAR 0 1
33149: PPUSH
33150: CALL_OW 1
33154: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33155: LD_ADDR_EXP 113
33159: PUSH
33160: LD_EXP 113
33164: PPUSH
33165: LD_EXP 113
33169: PUSH
33170: LD_INT 1
33172: PLUS
33173: PPUSH
33174: EMPTY
33175: PPUSH
33176: CALL_OW 1
33180: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33181: LD_ADDR_EXP 116
33185: PUSH
33186: LD_EXP 116
33190: PPUSH
33191: LD_EXP 116
33195: PUSH
33196: LD_INT 1
33198: PLUS
33199: PPUSH
33200: EMPTY
33201: PPUSH
33202: CALL_OW 1
33206: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33207: LD_VAR 0 1
33211: PPUSH
33212: CALL_OW 302
33216: NOT
33217: IFFALSE 33230
// begin HackUnlinkAll ( i ) ;
33219: LD_VAR 0 1
33223: PPUSH
33224: CALL 33336 0 1
// continue ;
33228: GO 33110
// end ; HackCheckCapturedStatus ( i ) ;
33230: LD_VAR 0 1
33234: PPUSH
33235: CALL 33779 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33239: LD_ADDR_VAR 0 2
33243: PUSH
33244: LD_INT 81
33246: PUSH
33247: LD_VAR 0 1
33251: PPUSH
33252: CALL_OW 255
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 33
33263: PUSH
33264: LD_INT 3
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 91
33273: PUSH
33274: LD_VAR 0 1
33278: PUSH
33279: LD_EXP 115
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 50
33291: PUSH
33292: EMPTY
33293: LIST
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: PPUSH
33301: CALL_OW 69
33305: ST_TO_ADDR
// if not tmp then
33306: LD_VAR 0 2
33310: NOT
33311: IFFALSE 33315
// continue ;
33313: GO 33110
// HackLink ( i , tmp ) ;
33315: LD_VAR 0 1
33319: PPUSH
33320: LD_VAR 0 2
33324: PPUSH
33325: CALL 33472 0 2
// end ;
33329: GO 33110
33331: POP
33332: POP
// end ;
33333: PPOPN 2
33335: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33336: LD_INT 0
33338: PPUSH
33339: PPUSH
33340: PPUSH
// if not hack in hackTanks then
33341: LD_VAR 0 1
33345: PUSH
33346: LD_EXP 112
33350: IN
33351: NOT
33352: IFFALSE 33356
// exit ;
33354: GO 33467
// index := GetElementIndex ( hackTanks , hack ) ;
33356: LD_ADDR_VAR 0 4
33360: PUSH
33361: LD_EXP 112
33365: PPUSH
33366: LD_VAR 0 1
33370: PPUSH
33371: CALL 41109 0 2
33375: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33376: LD_EXP 113
33380: PUSH
33381: LD_VAR 0 4
33385: ARRAY
33386: IFFALSE 33467
// begin for i in hackTanksCaptured [ index ] do
33388: LD_ADDR_VAR 0 3
33392: PUSH
33393: LD_EXP 113
33397: PUSH
33398: LD_VAR 0 4
33402: ARRAY
33403: PUSH
33404: FOR_IN
33405: IFFALSE 33431
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33407: LD_VAR 0 3
33411: PUSH
33412: LD_INT 1
33414: ARRAY
33415: PPUSH
33416: LD_VAR 0 3
33420: PUSH
33421: LD_INT 2
33423: ARRAY
33424: PPUSH
33425: CALL_OW 235
33429: GO 33404
33431: POP
33432: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33433: LD_ADDR_EXP 113
33437: PUSH
33438: LD_EXP 113
33442: PPUSH
33443: LD_VAR 0 4
33447: PPUSH
33448: EMPTY
33449: PPUSH
33450: CALL_OW 1
33454: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33455: LD_VAR 0 1
33459: PPUSH
33460: LD_INT 0
33462: PPUSH
33463: CALL_OW 505
// end ; end ;
33467: LD_VAR 0 2
33471: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33472: LD_INT 0
33474: PPUSH
33475: PPUSH
33476: PPUSH
// if not hack in hackTanks or not vehicles then
33477: LD_VAR 0 1
33481: PUSH
33482: LD_EXP 112
33486: IN
33487: NOT
33488: PUSH
33489: LD_VAR 0 2
33493: NOT
33494: OR
33495: IFFALSE 33499
// exit ;
33497: GO 33774
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33499: LD_ADDR_VAR 0 2
33503: PUSH
33504: LD_VAR 0 1
33508: PPUSH
33509: LD_VAR 0 2
33513: PPUSH
33514: LD_INT 1
33516: PPUSH
33517: LD_INT 1
33519: PPUSH
33520: CALL 41759 0 4
33524: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33525: LD_ADDR_VAR 0 5
33529: PUSH
33530: LD_EXP 112
33534: PPUSH
33535: LD_VAR 0 1
33539: PPUSH
33540: CALL 41109 0 2
33544: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33545: LD_EXP 113
33549: PUSH
33550: LD_VAR 0 5
33554: ARRAY
33555: PUSH
33556: LD_EXP 114
33560: LESS
33561: IFFALSE 33750
// begin for i := 1 to vehicles do
33563: LD_ADDR_VAR 0 4
33567: PUSH
33568: DOUBLE
33569: LD_INT 1
33571: DEC
33572: ST_TO_ADDR
33573: LD_VAR 0 2
33577: PUSH
33578: FOR_TO
33579: IFFALSE 33748
// begin if hackTanksCaptured [ index ] = hackLimit then
33581: LD_EXP 113
33585: PUSH
33586: LD_VAR 0 5
33590: ARRAY
33591: PUSH
33592: LD_EXP 114
33596: EQUAL
33597: IFFALSE 33601
// break ;
33599: GO 33748
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33601: LD_ADDR_EXP 116
33605: PUSH
33606: LD_EXP 116
33610: PPUSH
33611: LD_VAR 0 5
33615: PPUSH
33616: LD_EXP 116
33620: PUSH
33621: LD_VAR 0 5
33625: ARRAY
33626: PUSH
33627: LD_INT 1
33629: PLUS
33630: PPUSH
33631: CALL_OW 1
33635: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33636: LD_ADDR_EXP 113
33640: PUSH
33641: LD_EXP 113
33645: PPUSH
33646: LD_VAR 0 5
33650: PUSH
33651: LD_EXP 113
33655: PUSH
33656: LD_VAR 0 5
33660: ARRAY
33661: PUSH
33662: LD_INT 1
33664: PLUS
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PPUSH
33670: LD_VAR 0 2
33674: PUSH
33675: LD_VAR 0 4
33679: ARRAY
33680: PUSH
33681: LD_VAR 0 2
33685: PUSH
33686: LD_VAR 0 4
33690: ARRAY
33691: PPUSH
33692: CALL_OW 255
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PPUSH
33701: CALL 41324 0 3
33705: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33706: LD_VAR 0 2
33710: PUSH
33711: LD_VAR 0 4
33715: ARRAY
33716: PPUSH
33717: LD_VAR 0 1
33721: PPUSH
33722: CALL_OW 255
33726: PPUSH
33727: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33731: LD_VAR 0 2
33735: PUSH
33736: LD_VAR 0 4
33740: ARRAY
33741: PPUSH
33742: CALL_OW 141
// end ;
33746: GO 33578
33748: POP
33749: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33750: LD_VAR 0 1
33754: PPUSH
33755: LD_EXP 113
33759: PUSH
33760: LD_VAR 0 5
33764: ARRAY
33765: PUSH
33766: LD_INT 0
33768: PLUS
33769: PPUSH
33770: CALL_OW 505
// end ;
33774: LD_VAR 0 3
33778: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33779: LD_INT 0
33781: PPUSH
33782: PPUSH
33783: PPUSH
33784: PPUSH
// if not hack in hackTanks then
33785: LD_VAR 0 1
33789: PUSH
33790: LD_EXP 112
33794: IN
33795: NOT
33796: IFFALSE 33800
// exit ;
33798: GO 34040
// index := GetElementIndex ( hackTanks , hack ) ;
33800: LD_ADDR_VAR 0 4
33804: PUSH
33805: LD_EXP 112
33809: PPUSH
33810: LD_VAR 0 1
33814: PPUSH
33815: CALL 41109 0 2
33819: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33820: LD_ADDR_VAR 0 3
33824: PUSH
33825: DOUBLE
33826: LD_EXP 113
33830: PUSH
33831: LD_VAR 0 4
33835: ARRAY
33836: INC
33837: ST_TO_ADDR
33838: LD_INT 1
33840: PUSH
33841: FOR_DOWNTO
33842: IFFALSE 34014
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
33844: LD_ADDR_VAR 0 5
33848: PUSH
33849: LD_EXP 113
33853: PUSH
33854: LD_VAR 0 4
33858: ARRAY
33859: PUSH
33860: LD_VAR 0 3
33864: ARRAY
33865: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
33866: LD_VAR 0 5
33870: PUSH
33871: LD_INT 1
33873: ARRAY
33874: PPUSH
33875: CALL_OW 302
33879: NOT
33880: PUSH
33881: LD_VAR 0 5
33885: PUSH
33886: LD_INT 1
33888: ARRAY
33889: PPUSH
33890: CALL_OW 255
33894: PUSH
33895: LD_VAR 0 1
33899: PPUSH
33900: CALL_OW 255
33904: NONEQUAL
33905: OR
33906: IFFALSE 34012
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
33908: LD_VAR 0 5
33912: PUSH
33913: LD_INT 1
33915: ARRAY
33916: PPUSH
33917: CALL_OW 305
33921: PUSH
33922: LD_VAR 0 5
33926: PUSH
33927: LD_INT 1
33929: ARRAY
33930: PPUSH
33931: CALL_OW 255
33935: PUSH
33936: LD_VAR 0 1
33940: PPUSH
33941: CALL_OW 255
33945: EQUAL
33946: AND
33947: IFFALSE 33971
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
33949: LD_VAR 0 5
33953: PUSH
33954: LD_INT 1
33956: ARRAY
33957: PPUSH
33958: LD_VAR 0 5
33962: PUSH
33963: LD_INT 2
33965: ARRAY
33966: PPUSH
33967: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
33971: LD_ADDR_EXP 113
33975: PUSH
33976: LD_EXP 113
33980: PPUSH
33981: LD_VAR 0 4
33985: PPUSH
33986: LD_EXP 113
33990: PUSH
33991: LD_VAR 0 4
33995: ARRAY
33996: PPUSH
33997: LD_VAR 0 3
34001: PPUSH
34002: CALL_OW 3
34006: PPUSH
34007: CALL_OW 1
34011: ST_TO_ADDR
// end ; end ;
34012: GO 33841
34014: POP
34015: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34016: LD_VAR 0 1
34020: PPUSH
34021: LD_EXP 113
34025: PUSH
34026: LD_VAR 0 4
34030: ARRAY
34031: PUSH
34032: LD_INT 0
34034: PLUS
34035: PPUSH
34036: CALL_OW 505
// end ;
34040: LD_VAR 0 2
34044: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34045: LD_INT 0
34047: PPUSH
34048: PPUSH
34049: PPUSH
34050: PPUSH
// if not hack in hackTanks then
34051: LD_VAR 0 1
34055: PUSH
34056: LD_EXP 112
34060: IN
34061: NOT
34062: IFFALSE 34066
// exit ;
34064: GO 34151
// index := GetElementIndex ( hackTanks , hack ) ;
34066: LD_ADDR_VAR 0 5
34070: PUSH
34071: LD_EXP 112
34075: PPUSH
34076: LD_VAR 0 1
34080: PPUSH
34081: CALL 41109 0 2
34085: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34086: LD_ADDR_VAR 0 4
34090: PUSH
34091: DOUBLE
34092: LD_INT 1
34094: DEC
34095: ST_TO_ADDR
34096: LD_EXP 113
34100: PUSH
34101: LD_VAR 0 5
34105: ARRAY
34106: PUSH
34107: FOR_TO
34108: IFFALSE 34149
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34110: LD_EXP 113
34114: PUSH
34115: LD_VAR 0 5
34119: ARRAY
34120: PUSH
34121: LD_VAR 0 4
34125: ARRAY
34126: PUSH
34127: LD_INT 1
34129: ARRAY
34130: PUSH
34131: LD_VAR 0 2
34135: EQUAL
34136: IFFALSE 34147
// KillUnit ( vehicle ) ;
34138: LD_VAR 0 2
34142: PPUSH
34143: CALL_OW 66
34147: GO 34107
34149: POP
34150: POP
// end ;
34151: LD_VAR 0 3
34155: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34156: LD_EXP 117
34160: NOT
34161: IFFALSE 34196
34163: GO 34165
34165: DISABLE
// begin initMiner := true ;
34166: LD_ADDR_EXP 117
34170: PUSH
34171: LD_INT 1
34173: ST_TO_ADDR
// minersList := [ ] ;
34174: LD_ADDR_EXP 118
34178: PUSH
34179: EMPTY
34180: ST_TO_ADDR
// minerMinesList := [ ] ;
34181: LD_ADDR_EXP 119
34185: PUSH
34186: EMPTY
34187: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34188: LD_ADDR_EXP 120
34192: PUSH
34193: LD_INT 5
34195: ST_TO_ADDR
// end ;
34196: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34197: LD_EXP 117
34201: PUSH
34202: LD_INT 34
34204: PUSH
34205: LD_EXP 128
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PPUSH
34214: CALL_OW 69
34218: AND
34219: IFFALSE 34682
34221: GO 34223
34223: DISABLE
34224: LD_INT 0
34226: PPUSH
34227: PPUSH
34228: PPUSH
34229: PPUSH
// begin enable ;
34230: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34231: LD_ADDR_VAR 0 1
34235: PUSH
34236: LD_INT 34
34238: PUSH
34239: LD_EXP 128
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PPUSH
34248: CALL_OW 69
34252: PUSH
34253: FOR_IN
34254: IFFALSE 34326
// begin if not i in minersList then
34256: LD_VAR 0 1
34260: PUSH
34261: LD_EXP 118
34265: IN
34266: NOT
34267: IFFALSE 34324
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34269: LD_ADDR_EXP 118
34273: PUSH
34274: LD_EXP 118
34278: PPUSH
34279: LD_EXP 118
34283: PUSH
34284: LD_INT 1
34286: PLUS
34287: PPUSH
34288: LD_VAR 0 1
34292: PPUSH
34293: CALL_OW 1
34297: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34298: LD_ADDR_EXP 119
34302: PUSH
34303: LD_EXP 119
34307: PPUSH
34308: LD_EXP 119
34312: PUSH
34313: LD_INT 1
34315: PLUS
34316: PPUSH
34317: EMPTY
34318: PPUSH
34319: CALL_OW 1
34323: ST_TO_ADDR
// end end ;
34324: GO 34253
34326: POP
34327: POP
// for i := minerMinesList downto 1 do
34328: LD_ADDR_VAR 0 1
34332: PUSH
34333: DOUBLE
34334: LD_EXP 119
34338: INC
34339: ST_TO_ADDR
34340: LD_INT 1
34342: PUSH
34343: FOR_DOWNTO
34344: IFFALSE 34680
// begin if IsLive ( minersList [ i ] ) then
34346: LD_EXP 118
34350: PUSH
34351: LD_VAR 0 1
34355: ARRAY
34356: PPUSH
34357: CALL_OW 300
34361: IFFALSE 34389
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34363: LD_EXP 118
34367: PUSH
34368: LD_VAR 0 1
34372: ARRAY
34373: PPUSH
34374: LD_EXP 119
34378: PUSH
34379: LD_VAR 0 1
34383: ARRAY
34384: PPUSH
34385: CALL_OW 505
// if not minerMinesList [ i ] then
34389: LD_EXP 119
34393: PUSH
34394: LD_VAR 0 1
34398: ARRAY
34399: NOT
34400: IFFALSE 34404
// continue ;
34402: GO 34343
// for j := minerMinesList [ i ] downto 1 do
34404: LD_ADDR_VAR 0 2
34408: PUSH
34409: DOUBLE
34410: LD_EXP 119
34414: PUSH
34415: LD_VAR 0 1
34419: ARRAY
34420: INC
34421: ST_TO_ADDR
34422: LD_INT 1
34424: PUSH
34425: FOR_DOWNTO
34426: IFFALSE 34676
// begin side := GetSide ( minersList [ i ] ) ;
34428: LD_ADDR_VAR 0 3
34432: PUSH
34433: LD_EXP 118
34437: PUSH
34438: LD_VAR 0 1
34442: ARRAY
34443: PPUSH
34444: CALL_OW 255
34448: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34449: LD_ADDR_VAR 0 4
34453: PUSH
34454: LD_EXP 119
34458: PUSH
34459: LD_VAR 0 1
34463: ARRAY
34464: PUSH
34465: LD_VAR 0 2
34469: ARRAY
34470: PUSH
34471: LD_INT 1
34473: ARRAY
34474: PPUSH
34475: LD_EXP 119
34479: PUSH
34480: LD_VAR 0 1
34484: ARRAY
34485: PUSH
34486: LD_VAR 0 2
34490: ARRAY
34491: PUSH
34492: LD_INT 2
34494: ARRAY
34495: PPUSH
34496: CALL_OW 428
34500: ST_TO_ADDR
// if not tmp then
34501: LD_VAR 0 4
34505: NOT
34506: IFFALSE 34510
// continue ;
34508: GO 34425
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34510: LD_VAR 0 4
34514: PUSH
34515: LD_INT 81
34517: PUSH
34518: LD_VAR 0 3
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PPUSH
34527: CALL_OW 69
34531: IN
34532: PUSH
34533: LD_EXP 119
34537: PUSH
34538: LD_VAR 0 1
34542: ARRAY
34543: PUSH
34544: LD_VAR 0 2
34548: ARRAY
34549: PUSH
34550: LD_INT 1
34552: ARRAY
34553: PPUSH
34554: LD_EXP 119
34558: PUSH
34559: LD_VAR 0 1
34563: ARRAY
34564: PUSH
34565: LD_VAR 0 2
34569: ARRAY
34570: PUSH
34571: LD_INT 2
34573: ARRAY
34574: PPUSH
34575: CALL_OW 458
34579: AND
34580: IFFALSE 34674
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34582: LD_EXP 119
34586: PUSH
34587: LD_VAR 0 1
34591: ARRAY
34592: PUSH
34593: LD_VAR 0 2
34597: ARRAY
34598: PUSH
34599: LD_INT 1
34601: ARRAY
34602: PPUSH
34603: LD_EXP 119
34607: PUSH
34608: LD_VAR 0 1
34612: ARRAY
34613: PUSH
34614: LD_VAR 0 2
34618: ARRAY
34619: PUSH
34620: LD_INT 2
34622: ARRAY
34623: PPUSH
34624: LD_VAR 0 3
34628: PPUSH
34629: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34633: LD_ADDR_EXP 119
34637: PUSH
34638: LD_EXP 119
34642: PPUSH
34643: LD_VAR 0 1
34647: PPUSH
34648: LD_EXP 119
34652: PUSH
34653: LD_VAR 0 1
34657: ARRAY
34658: PPUSH
34659: LD_VAR 0 2
34663: PPUSH
34664: CALL_OW 3
34668: PPUSH
34669: CALL_OW 1
34673: ST_TO_ADDR
// end ; end ;
34674: GO 34425
34676: POP
34677: POP
// end ;
34678: GO 34343
34680: POP
34681: POP
// end ;
34682: PPOPN 4
34684: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34685: LD_INT 0
34687: PPUSH
34688: PPUSH
// result := false ;
34689: LD_ADDR_VAR 0 4
34693: PUSH
34694: LD_INT 0
34696: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34697: LD_VAR 0 1
34701: PPUSH
34702: CALL_OW 264
34706: PUSH
34707: LD_EXP 128
34711: EQUAL
34712: NOT
34713: IFFALSE 34717
// exit ;
34715: GO 34957
// index := GetElementIndex ( minersList , unit ) ;
34717: LD_ADDR_VAR 0 5
34721: PUSH
34722: LD_EXP 118
34726: PPUSH
34727: LD_VAR 0 1
34731: PPUSH
34732: CALL 41109 0 2
34736: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34737: LD_EXP 119
34741: PUSH
34742: LD_VAR 0 5
34746: ARRAY
34747: PUSH
34748: LD_EXP 120
34752: GREATEREQUAL
34753: IFFALSE 34757
// exit ;
34755: GO 34957
// ComMoveXY ( unit , x , y ) ;
34757: LD_VAR 0 1
34761: PPUSH
34762: LD_VAR 0 2
34766: PPUSH
34767: LD_VAR 0 3
34771: PPUSH
34772: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34776: LD_INT 35
34778: PPUSH
34779: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
34783: LD_VAR 0 1
34787: PPUSH
34788: LD_VAR 0 2
34792: PPUSH
34793: LD_VAR 0 3
34797: PPUSH
34798: CALL 71828 0 3
34802: NOT
34803: PUSH
34804: LD_VAR 0 1
34808: PPUSH
34809: CALL_OW 314
34813: AND
34814: IFFALSE 34818
// exit ;
34816: GO 34957
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
34818: LD_VAR 0 2
34822: PPUSH
34823: LD_VAR 0 3
34827: PPUSH
34828: CALL_OW 428
34832: PUSH
34833: LD_VAR 0 1
34837: EQUAL
34838: PUSH
34839: LD_VAR 0 1
34843: PPUSH
34844: CALL_OW 314
34848: NOT
34849: AND
34850: IFFALSE 34776
// PlaySoundXY ( x , y , PlantMine ) ;
34852: LD_VAR 0 2
34856: PPUSH
34857: LD_VAR 0 3
34861: PPUSH
34862: LD_STRING PlantMine
34864: PPUSH
34865: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
34869: LD_VAR 0 2
34873: PPUSH
34874: LD_VAR 0 3
34878: PPUSH
34879: LD_VAR 0 1
34883: PPUSH
34884: CALL_OW 255
34888: PPUSH
34889: LD_INT 0
34891: PPUSH
34892: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
34896: LD_ADDR_EXP 119
34900: PUSH
34901: LD_EXP 119
34905: PPUSH
34906: LD_VAR 0 5
34910: PUSH
34911: LD_EXP 119
34915: PUSH
34916: LD_VAR 0 5
34920: ARRAY
34921: PUSH
34922: LD_INT 1
34924: PLUS
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PPUSH
34930: LD_VAR 0 2
34934: PUSH
34935: LD_VAR 0 3
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PPUSH
34944: CALL 41324 0 3
34948: ST_TO_ADDR
// result := true ;
34949: LD_ADDR_VAR 0 4
34953: PUSH
34954: LD_INT 1
34956: ST_TO_ADDR
// end ;
34957: LD_VAR 0 4
34961: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
34962: LD_INT 0
34964: PPUSH
34965: PPUSH
34966: PPUSH
// if not unit in minersList then
34967: LD_VAR 0 1
34971: PUSH
34972: LD_EXP 118
34976: IN
34977: NOT
34978: IFFALSE 34982
// exit ;
34980: GO 35374
// index := GetElementIndex ( minersList , unit ) ;
34982: LD_ADDR_VAR 0 6
34986: PUSH
34987: LD_EXP 118
34991: PPUSH
34992: LD_VAR 0 1
34996: PPUSH
34997: CALL 41109 0 2
35001: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35002: LD_ADDR_VAR 0 5
35006: PUSH
35007: DOUBLE
35008: LD_EXP 119
35012: PUSH
35013: LD_VAR 0 6
35017: ARRAY
35018: INC
35019: ST_TO_ADDR
35020: LD_INT 1
35022: PUSH
35023: FOR_DOWNTO
35024: IFFALSE 35185
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35026: LD_EXP 119
35030: PUSH
35031: LD_VAR 0 6
35035: ARRAY
35036: PUSH
35037: LD_VAR 0 5
35041: ARRAY
35042: PUSH
35043: LD_INT 1
35045: ARRAY
35046: PUSH
35047: LD_VAR 0 2
35051: EQUAL
35052: PUSH
35053: LD_EXP 119
35057: PUSH
35058: LD_VAR 0 6
35062: ARRAY
35063: PUSH
35064: LD_VAR 0 5
35068: ARRAY
35069: PUSH
35070: LD_INT 2
35072: ARRAY
35073: PUSH
35074: LD_VAR 0 3
35078: EQUAL
35079: AND
35080: IFFALSE 35183
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35082: LD_EXP 119
35086: PUSH
35087: LD_VAR 0 6
35091: ARRAY
35092: PUSH
35093: LD_VAR 0 5
35097: ARRAY
35098: PUSH
35099: LD_INT 1
35101: ARRAY
35102: PPUSH
35103: LD_EXP 119
35107: PUSH
35108: LD_VAR 0 6
35112: ARRAY
35113: PUSH
35114: LD_VAR 0 5
35118: ARRAY
35119: PUSH
35120: LD_INT 2
35122: ARRAY
35123: PPUSH
35124: LD_VAR 0 1
35128: PPUSH
35129: CALL_OW 255
35133: PPUSH
35134: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35138: LD_ADDR_EXP 119
35142: PUSH
35143: LD_EXP 119
35147: PPUSH
35148: LD_VAR 0 6
35152: PPUSH
35153: LD_EXP 119
35157: PUSH
35158: LD_VAR 0 6
35162: ARRAY
35163: PPUSH
35164: LD_VAR 0 5
35168: PPUSH
35169: CALL_OW 3
35173: PPUSH
35174: CALL_OW 1
35178: ST_TO_ADDR
// exit ;
35179: POP
35180: POP
35181: GO 35374
// end ; end ;
35183: GO 35023
35185: POP
35186: POP
// for i := minerMinesList [ index ] downto 1 do
35187: LD_ADDR_VAR 0 5
35191: PUSH
35192: DOUBLE
35193: LD_EXP 119
35197: PUSH
35198: LD_VAR 0 6
35202: ARRAY
35203: INC
35204: ST_TO_ADDR
35205: LD_INT 1
35207: PUSH
35208: FOR_DOWNTO
35209: IFFALSE 35372
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35211: LD_EXP 119
35215: PUSH
35216: LD_VAR 0 6
35220: ARRAY
35221: PUSH
35222: LD_VAR 0 5
35226: ARRAY
35227: PUSH
35228: LD_INT 1
35230: ARRAY
35231: PPUSH
35232: LD_EXP 119
35236: PUSH
35237: LD_VAR 0 6
35241: ARRAY
35242: PUSH
35243: LD_VAR 0 5
35247: ARRAY
35248: PUSH
35249: LD_INT 2
35251: ARRAY
35252: PPUSH
35253: LD_VAR 0 2
35257: PPUSH
35258: LD_VAR 0 3
35262: PPUSH
35263: CALL_OW 298
35267: PUSH
35268: LD_INT 6
35270: LESS
35271: IFFALSE 35370
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35273: LD_EXP 119
35277: PUSH
35278: LD_VAR 0 6
35282: ARRAY
35283: PUSH
35284: LD_VAR 0 5
35288: ARRAY
35289: PUSH
35290: LD_INT 1
35292: ARRAY
35293: PPUSH
35294: LD_EXP 119
35298: PUSH
35299: LD_VAR 0 6
35303: ARRAY
35304: PUSH
35305: LD_VAR 0 5
35309: ARRAY
35310: PUSH
35311: LD_INT 2
35313: ARRAY
35314: PPUSH
35315: LD_VAR 0 1
35319: PPUSH
35320: CALL_OW 255
35324: PPUSH
35325: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35329: LD_ADDR_EXP 119
35333: PUSH
35334: LD_EXP 119
35338: PPUSH
35339: LD_VAR 0 6
35343: PPUSH
35344: LD_EXP 119
35348: PUSH
35349: LD_VAR 0 6
35353: ARRAY
35354: PPUSH
35355: LD_VAR 0 5
35359: PPUSH
35360: CALL_OW 3
35364: PPUSH
35365: CALL_OW 1
35369: ST_TO_ADDR
// end ; end ;
35370: GO 35208
35372: POP
35373: POP
// end ;
35374: LD_VAR 0 4
35378: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35379: LD_INT 0
35381: PPUSH
35382: PPUSH
35383: PPUSH
35384: PPUSH
35385: PPUSH
35386: PPUSH
35387: PPUSH
35388: PPUSH
35389: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35390: LD_VAR 0 1
35394: PPUSH
35395: CALL_OW 264
35399: PUSH
35400: LD_EXP 128
35404: EQUAL
35405: NOT
35406: PUSH
35407: LD_VAR 0 1
35411: PUSH
35412: LD_EXP 118
35416: IN
35417: NOT
35418: OR
35419: IFFALSE 35423
// exit ;
35421: GO 35745
// index := GetElementIndex ( minersList , unit ) ;
35423: LD_ADDR_VAR 0 6
35427: PUSH
35428: LD_EXP 118
35432: PPUSH
35433: LD_VAR 0 1
35437: PPUSH
35438: CALL 41109 0 2
35442: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35443: LD_ADDR_VAR 0 8
35447: PUSH
35448: LD_EXP 120
35452: PUSH
35453: LD_EXP 119
35457: PUSH
35458: LD_VAR 0 6
35462: ARRAY
35463: MINUS
35464: ST_TO_ADDR
// if not minesFreeAmount then
35465: LD_VAR 0 8
35469: NOT
35470: IFFALSE 35474
// exit ;
35472: GO 35745
// tmp := [ ] ;
35474: LD_ADDR_VAR 0 7
35478: PUSH
35479: EMPTY
35480: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35481: LD_ADDR_VAR 0 5
35485: PUSH
35486: DOUBLE
35487: LD_INT 1
35489: DEC
35490: ST_TO_ADDR
35491: LD_VAR 0 8
35495: PUSH
35496: FOR_TO
35497: IFFALSE 35692
// begin _d := rand ( 0 , 5 ) ;
35499: LD_ADDR_VAR 0 11
35503: PUSH
35504: LD_INT 0
35506: PPUSH
35507: LD_INT 5
35509: PPUSH
35510: CALL_OW 12
35514: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35515: LD_ADDR_VAR 0 12
35519: PUSH
35520: LD_INT 2
35522: PPUSH
35523: LD_INT 6
35525: PPUSH
35526: CALL_OW 12
35530: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35531: LD_ADDR_VAR 0 9
35535: PUSH
35536: LD_VAR 0 2
35540: PPUSH
35541: LD_VAR 0 11
35545: PPUSH
35546: LD_VAR 0 12
35550: PPUSH
35551: CALL_OW 272
35555: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35556: LD_ADDR_VAR 0 10
35560: PUSH
35561: LD_VAR 0 3
35565: PPUSH
35566: LD_VAR 0 11
35570: PPUSH
35571: LD_VAR 0 12
35575: PPUSH
35576: CALL_OW 273
35580: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35581: LD_VAR 0 9
35585: PPUSH
35586: LD_VAR 0 10
35590: PPUSH
35591: CALL_OW 488
35595: PUSH
35596: LD_VAR 0 9
35600: PUSH
35601: LD_VAR 0 10
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_VAR 0 7
35614: IN
35615: NOT
35616: AND
35617: PUSH
35618: LD_VAR 0 9
35622: PPUSH
35623: LD_VAR 0 10
35627: PPUSH
35628: CALL_OW 458
35632: NOT
35633: AND
35634: IFFALSE 35676
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35636: LD_ADDR_VAR 0 7
35640: PUSH
35641: LD_VAR 0 7
35645: PPUSH
35646: LD_VAR 0 7
35650: PUSH
35651: LD_INT 1
35653: PLUS
35654: PPUSH
35655: LD_VAR 0 9
35659: PUSH
35660: LD_VAR 0 10
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PPUSH
35669: CALL_OW 1
35673: ST_TO_ADDR
35674: GO 35690
// i := i - 1 ;
35676: LD_ADDR_VAR 0 5
35680: PUSH
35681: LD_VAR 0 5
35685: PUSH
35686: LD_INT 1
35688: MINUS
35689: ST_TO_ADDR
// end ;
35690: GO 35496
35692: POP
35693: POP
// for i in tmp do
35694: LD_ADDR_VAR 0 5
35698: PUSH
35699: LD_VAR 0 7
35703: PUSH
35704: FOR_IN
35705: IFFALSE 35743
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35707: LD_VAR 0 1
35711: PPUSH
35712: LD_VAR 0 5
35716: PUSH
35717: LD_INT 1
35719: ARRAY
35720: PPUSH
35721: LD_VAR 0 5
35725: PUSH
35726: LD_INT 2
35728: ARRAY
35729: PPUSH
35730: CALL 34685 0 3
35734: NOT
35735: IFFALSE 35741
// exit ;
35737: POP
35738: POP
35739: GO 35745
35741: GO 35704
35743: POP
35744: POP
// end ;
35745: LD_VAR 0 4
35749: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35750: LD_INT 0
35752: PPUSH
35753: PPUSH
35754: PPUSH
35755: PPUSH
35756: PPUSH
35757: PPUSH
35758: PPUSH
// if not GetClass ( unit ) = class_sniper then
35759: LD_VAR 0 1
35763: PPUSH
35764: CALL_OW 257
35768: PUSH
35769: LD_INT 5
35771: EQUAL
35772: NOT
35773: IFFALSE 35777
// exit ;
35775: GO 36165
// dist := 8 ;
35777: LD_ADDR_VAR 0 5
35781: PUSH
35782: LD_INT 8
35784: ST_TO_ADDR
// viewRange := 12 ;
35785: LD_ADDR_VAR 0 7
35789: PUSH
35790: LD_INT 12
35792: ST_TO_ADDR
// side := GetSide ( unit ) ;
35793: LD_ADDR_VAR 0 6
35797: PUSH
35798: LD_VAR 0 1
35802: PPUSH
35803: CALL_OW 255
35807: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
35808: LD_INT 61
35810: PPUSH
35811: LD_VAR 0 6
35815: PPUSH
35816: CALL_OW 321
35820: PUSH
35821: LD_INT 2
35823: EQUAL
35824: IFFALSE 35834
// viewRange := 16 ;
35826: LD_ADDR_VAR 0 7
35830: PUSH
35831: LD_INT 16
35833: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
35834: LD_VAR 0 1
35838: PPUSH
35839: LD_VAR 0 2
35843: PPUSH
35844: LD_VAR 0 3
35848: PPUSH
35849: CALL_OW 297
35853: PUSH
35854: LD_VAR 0 5
35858: GREATER
35859: IFFALSE 35938
// begin ComMoveXY ( unit , x , y ) ;
35861: LD_VAR 0 1
35865: PPUSH
35866: LD_VAR 0 2
35870: PPUSH
35871: LD_VAR 0 3
35875: PPUSH
35876: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35880: LD_INT 35
35882: PPUSH
35883: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
35887: LD_VAR 0 1
35891: PPUSH
35892: LD_VAR 0 2
35896: PPUSH
35897: LD_VAR 0 3
35901: PPUSH
35902: CALL 71828 0 3
35906: NOT
35907: IFFALSE 35911
// exit ;
35909: GO 36165
// until GetDistUnitXY ( unit , x , y ) < dist ;
35911: LD_VAR 0 1
35915: PPUSH
35916: LD_VAR 0 2
35920: PPUSH
35921: LD_VAR 0 3
35925: PPUSH
35926: CALL_OW 297
35930: PUSH
35931: LD_VAR 0 5
35935: LESS
35936: IFFALSE 35880
// end ; ComTurnXY ( unit , x , y ) ;
35938: LD_VAR 0 1
35942: PPUSH
35943: LD_VAR 0 2
35947: PPUSH
35948: LD_VAR 0 3
35952: PPUSH
35953: CALL_OW 118
// wait ( 5 ) ;
35957: LD_INT 5
35959: PPUSH
35960: CALL_OW 67
// _d := GetDir ( unit ) ;
35964: LD_ADDR_VAR 0 10
35968: PUSH
35969: LD_VAR 0 1
35973: PPUSH
35974: CALL_OW 254
35978: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
35979: LD_ADDR_VAR 0 8
35983: PUSH
35984: LD_VAR 0 1
35988: PPUSH
35989: CALL_OW 250
35993: PPUSH
35994: LD_VAR 0 10
35998: PPUSH
35999: LD_VAR 0 5
36003: PPUSH
36004: CALL_OW 272
36008: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36009: LD_ADDR_VAR 0 9
36013: PUSH
36014: LD_VAR 0 1
36018: PPUSH
36019: CALL_OW 251
36023: PPUSH
36024: LD_VAR 0 10
36028: PPUSH
36029: LD_VAR 0 5
36033: PPUSH
36034: CALL_OW 273
36038: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36039: LD_VAR 0 8
36043: PPUSH
36044: LD_VAR 0 9
36048: PPUSH
36049: CALL_OW 488
36053: NOT
36054: IFFALSE 36058
// exit ;
36056: GO 36165
// ComAnimCustom ( unit , 1 ) ;
36058: LD_VAR 0 1
36062: PPUSH
36063: LD_INT 1
36065: PPUSH
36066: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36070: LD_VAR 0 8
36074: PPUSH
36075: LD_VAR 0 9
36079: PPUSH
36080: LD_VAR 0 6
36084: PPUSH
36085: LD_VAR 0 7
36089: PPUSH
36090: CALL_OW 330
// repeat wait ( 1 ) ;
36094: LD_INT 1
36096: PPUSH
36097: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36101: LD_VAR 0 1
36105: PPUSH
36106: CALL_OW 316
36110: PUSH
36111: LD_VAR 0 1
36115: PPUSH
36116: CALL_OW 314
36120: OR
36121: PUSH
36122: LD_VAR 0 1
36126: PPUSH
36127: CALL_OW 302
36131: NOT
36132: OR
36133: PUSH
36134: LD_VAR 0 1
36138: PPUSH
36139: CALL_OW 301
36143: OR
36144: IFFALSE 36094
// RemoveSeeing ( _x , _y , side ) ;
36146: LD_VAR 0 8
36150: PPUSH
36151: LD_VAR 0 9
36155: PPUSH
36156: LD_VAR 0 6
36160: PPUSH
36161: CALL_OW 331
// end ; end_of_file
36165: LD_VAR 0 4
36169: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
36170: LD_INT 0
36172: PPUSH
// ar_miner := 81 ;
36173: LD_ADDR_EXP 128
36177: PUSH
36178: LD_INT 81
36180: ST_TO_ADDR
// ar_crane := 88 ;
36181: LD_ADDR_EXP 127
36185: PUSH
36186: LD_INT 88
36188: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
36189: LD_ADDR_EXP 122
36193: PUSH
36194: LD_INT 89
36196: ST_TO_ADDR
// us_hack := 99 ;
36197: LD_ADDR_EXP 123
36201: PUSH
36202: LD_INT 99
36204: ST_TO_ADDR
// us_artillery := 97 ;
36205: LD_ADDR_EXP 124
36209: PUSH
36210: LD_INT 97
36212: ST_TO_ADDR
// ar_bio_bomb := 91 ;
36213: LD_ADDR_EXP 125
36217: PUSH
36218: LD_INT 91
36220: ST_TO_ADDR
// ar_mortar := 92 ;
36221: LD_ADDR_EXP 126
36225: PUSH
36226: LD_INT 92
36228: ST_TO_ADDR
// ru_radar := 98 ;
36229: LD_ADDR_EXP 121
36233: PUSH
36234: LD_INT 98
36236: ST_TO_ADDR
// tech_Artillery := 80 ;
36237: LD_ADDR_EXP 129
36241: PUSH
36242: LD_INT 80
36244: ST_TO_ADDR
// tech_RadMat := 81 ;
36245: LD_ADDR_EXP 130
36249: PUSH
36250: LD_INT 81
36252: ST_TO_ADDR
// tech_BasicTools := 82 ;
36253: LD_ADDR_EXP 131
36257: PUSH
36258: LD_INT 82
36260: ST_TO_ADDR
// tech_Cargo := 83 ;
36261: LD_ADDR_EXP 132
36265: PUSH
36266: LD_INT 83
36268: ST_TO_ADDR
// tech_Track := 84 ;
36269: LD_ADDR_EXP 133
36273: PUSH
36274: LD_INT 84
36276: ST_TO_ADDR
// tech_Crane := 85 ;
36277: LD_ADDR_EXP 134
36281: PUSH
36282: LD_INT 85
36284: ST_TO_ADDR
// tech_Bulldozer := 86 ;
36285: LD_ADDR_EXP 135
36289: PUSH
36290: LD_INT 86
36292: ST_TO_ADDR
// tech_Hovercraft := 87 ;
36293: LD_ADDR_EXP 136
36297: PUSH
36298: LD_INT 87
36300: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
36301: LD_ADDR_EXP 137
36305: PUSH
36306: LD_INT 88
36308: ST_TO_ADDR
// class_mastodont := 31 ;
36309: LD_ADDR_EXP 138
36313: PUSH
36314: LD_INT 31
36316: ST_TO_ADDR
// class_horse := 21 ;
36317: LD_ADDR_EXP 139
36321: PUSH
36322: LD_INT 21
36324: ST_TO_ADDR
// end ;
36325: LD_VAR 0 1
36329: RET
// every 1 do
36330: GO 36332
36332: DISABLE
// InitGlobalVariables ; end_of_file
36333: CALL 36170 0 0
36337: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36338: LD_INT 0
36340: PPUSH
36341: PPUSH
// if exist_mode then
36342: LD_VAR 0 2
36346: IFFALSE 36371
// unit := CreateCharacter ( prefix & ident ) else
36348: LD_ADDR_VAR 0 5
36352: PUSH
36353: LD_VAR 0 3
36357: PUSH
36358: LD_VAR 0 1
36362: STR
36363: PPUSH
36364: CALL_OW 34
36368: ST_TO_ADDR
36369: GO 36386
// unit := NewCharacter ( ident ) ;
36371: LD_ADDR_VAR 0 5
36375: PUSH
36376: LD_VAR 0 1
36380: PPUSH
36381: CALL_OW 25
36385: ST_TO_ADDR
// result := unit ;
36386: LD_ADDR_VAR 0 4
36390: PUSH
36391: LD_VAR 0 5
36395: ST_TO_ADDR
// end ;
36396: LD_VAR 0 4
36400: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36401: LD_INT 0
36403: PPUSH
36404: PPUSH
// if not side or not nation then
36405: LD_VAR 0 1
36409: NOT
36410: PUSH
36411: LD_VAR 0 2
36415: NOT
36416: OR
36417: IFFALSE 36421
// exit ;
36419: GO 37189
// case nation of nation_american :
36421: LD_VAR 0 2
36425: PUSH
36426: LD_INT 1
36428: DOUBLE
36429: EQUAL
36430: IFTRUE 36434
36432: GO 36648
36434: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36435: LD_ADDR_VAR 0 4
36439: PUSH
36440: LD_INT 35
36442: PUSH
36443: LD_INT 45
36445: PUSH
36446: LD_INT 46
36448: PUSH
36449: LD_INT 47
36451: PUSH
36452: LD_INT 82
36454: PUSH
36455: LD_INT 83
36457: PUSH
36458: LD_INT 84
36460: PUSH
36461: LD_INT 85
36463: PUSH
36464: LD_INT 86
36466: PUSH
36467: LD_INT 1
36469: PUSH
36470: LD_INT 2
36472: PUSH
36473: LD_INT 6
36475: PUSH
36476: LD_INT 15
36478: PUSH
36479: LD_INT 16
36481: PUSH
36482: LD_INT 7
36484: PUSH
36485: LD_INT 12
36487: PUSH
36488: LD_INT 13
36490: PUSH
36491: LD_INT 10
36493: PUSH
36494: LD_INT 14
36496: PUSH
36497: LD_INT 20
36499: PUSH
36500: LD_INT 21
36502: PUSH
36503: LD_INT 22
36505: PUSH
36506: LD_INT 25
36508: PUSH
36509: LD_INT 32
36511: PUSH
36512: LD_INT 27
36514: PUSH
36515: LD_INT 36
36517: PUSH
36518: LD_INT 69
36520: PUSH
36521: LD_INT 39
36523: PUSH
36524: LD_INT 34
36526: PUSH
36527: LD_INT 40
36529: PUSH
36530: LD_INT 48
36532: PUSH
36533: LD_INT 49
36535: PUSH
36536: LD_INT 50
36538: PUSH
36539: LD_INT 51
36541: PUSH
36542: LD_INT 52
36544: PUSH
36545: LD_INT 53
36547: PUSH
36548: LD_INT 54
36550: PUSH
36551: LD_INT 55
36553: PUSH
36554: LD_INT 56
36556: PUSH
36557: LD_INT 57
36559: PUSH
36560: LD_INT 58
36562: PUSH
36563: LD_INT 59
36565: PUSH
36566: LD_INT 60
36568: PUSH
36569: LD_INT 61
36571: PUSH
36572: LD_INT 62
36574: PUSH
36575: LD_INT 80
36577: PUSH
36578: LD_INT 82
36580: PUSH
36581: LD_INT 83
36583: PUSH
36584: LD_INT 84
36586: PUSH
36587: LD_INT 85
36589: PUSH
36590: LD_INT 86
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: ST_TO_ADDR
36646: GO 37113
36648: LD_INT 2
36650: DOUBLE
36651: EQUAL
36652: IFTRUE 36656
36654: GO 36882
36656: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
36657: LD_ADDR_VAR 0 4
36661: PUSH
36662: LD_INT 35
36664: PUSH
36665: LD_INT 45
36667: PUSH
36668: LD_INT 46
36670: PUSH
36671: LD_INT 47
36673: PUSH
36674: LD_INT 82
36676: PUSH
36677: LD_INT 83
36679: PUSH
36680: LD_INT 84
36682: PUSH
36683: LD_INT 85
36685: PUSH
36686: LD_INT 87
36688: PUSH
36689: LD_INT 70
36691: PUSH
36692: LD_INT 1
36694: PUSH
36695: LD_INT 11
36697: PUSH
36698: LD_INT 3
36700: PUSH
36701: LD_INT 4
36703: PUSH
36704: LD_INT 5
36706: PUSH
36707: LD_INT 6
36709: PUSH
36710: LD_INT 15
36712: PUSH
36713: LD_INT 18
36715: PUSH
36716: LD_INT 7
36718: PUSH
36719: LD_INT 17
36721: PUSH
36722: LD_INT 8
36724: PUSH
36725: LD_INT 20
36727: PUSH
36728: LD_INT 21
36730: PUSH
36731: LD_INT 22
36733: PUSH
36734: LD_INT 72
36736: PUSH
36737: LD_INT 26
36739: PUSH
36740: LD_INT 69
36742: PUSH
36743: LD_INT 39
36745: PUSH
36746: LD_INT 40
36748: PUSH
36749: LD_INT 41
36751: PUSH
36752: LD_INT 42
36754: PUSH
36755: LD_INT 43
36757: PUSH
36758: LD_INT 48
36760: PUSH
36761: LD_INT 49
36763: PUSH
36764: LD_INT 50
36766: PUSH
36767: LD_INT 51
36769: PUSH
36770: LD_INT 52
36772: PUSH
36773: LD_INT 53
36775: PUSH
36776: LD_INT 54
36778: PUSH
36779: LD_INT 55
36781: PUSH
36782: LD_INT 56
36784: PUSH
36785: LD_INT 60
36787: PUSH
36788: LD_INT 61
36790: PUSH
36791: LD_INT 62
36793: PUSH
36794: LD_INT 66
36796: PUSH
36797: LD_INT 67
36799: PUSH
36800: LD_INT 68
36802: PUSH
36803: LD_INT 81
36805: PUSH
36806: LD_INT 82
36808: PUSH
36809: LD_INT 83
36811: PUSH
36812: LD_INT 84
36814: PUSH
36815: LD_INT 85
36817: PUSH
36818: LD_INT 87
36820: PUSH
36821: LD_INT 88
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: ST_TO_ADDR
36880: GO 37113
36882: LD_INT 3
36884: DOUBLE
36885: EQUAL
36886: IFTRUE 36890
36888: GO 37112
36890: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36891: LD_ADDR_VAR 0 4
36895: PUSH
36896: LD_INT 46
36898: PUSH
36899: LD_INT 47
36901: PUSH
36902: LD_INT 1
36904: PUSH
36905: LD_INT 2
36907: PUSH
36908: LD_INT 82
36910: PUSH
36911: LD_INT 83
36913: PUSH
36914: LD_INT 84
36916: PUSH
36917: LD_INT 85
36919: PUSH
36920: LD_INT 86
36922: PUSH
36923: LD_INT 11
36925: PUSH
36926: LD_INT 9
36928: PUSH
36929: LD_INT 20
36931: PUSH
36932: LD_INT 19
36934: PUSH
36935: LD_INT 21
36937: PUSH
36938: LD_INT 24
36940: PUSH
36941: LD_INT 22
36943: PUSH
36944: LD_INT 25
36946: PUSH
36947: LD_INT 28
36949: PUSH
36950: LD_INT 29
36952: PUSH
36953: LD_INT 30
36955: PUSH
36956: LD_INT 31
36958: PUSH
36959: LD_INT 37
36961: PUSH
36962: LD_INT 38
36964: PUSH
36965: LD_INT 32
36967: PUSH
36968: LD_INT 27
36970: PUSH
36971: LD_INT 33
36973: PUSH
36974: LD_INT 69
36976: PUSH
36977: LD_INT 39
36979: PUSH
36980: LD_INT 34
36982: PUSH
36983: LD_INT 40
36985: PUSH
36986: LD_INT 71
36988: PUSH
36989: LD_INT 23
36991: PUSH
36992: LD_INT 44
36994: PUSH
36995: LD_INT 48
36997: PUSH
36998: LD_INT 49
37000: PUSH
37001: LD_INT 50
37003: PUSH
37004: LD_INT 51
37006: PUSH
37007: LD_INT 52
37009: PUSH
37010: LD_INT 53
37012: PUSH
37013: LD_INT 54
37015: PUSH
37016: LD_INT 55
37018: PUSH
37019: LD_INT 56
37021: PUSH
37022: LD_INT 57
37024: PUSH
37025: LD_INT 58
37027: PUSH
37028: LD_INT 59
37030: PUSH
37031: LD_INT 63
37033: PUSH
37034: LD_INT 64
37036: PUSH
37037: LD_INT 65
37039: PUSH
37040: LD_INT 82
37042: PUSH
37043: LD_INT 83
37045: PUSH
37046: LD_INT 84
37048: PUSH
37049: LD_INT 85
37051: PUSH
37052: LD_INT 86
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: ST_TO_ADDR
37110: GO 37113
37112: POP
// if state > - 1 and state < 3 then
37113: LD_VAR 0 3
37117: PUSH
37118: LD_INT 1
37120: NEG
37121: GREATER
37122: PUSH
37123: LD_VAR 0 3
37127: PUSH
37128: LD_INT 3
37130: LESS
37131: AND
37132: IFFALSE 37189
// for i in result do
37134: LD_ADDR_VAR 0 5
37138: PUSH
37139: LD_VAR 0 4
37143: PUSH
37144: FOR_IN
37145: IFFALSE 37187
// if GetTech ( i , side ) <> state then
37147: LD_VAR 0 5
37151: PPUSH
37152: LD_VAR 0 1
37156: PPUSH
37157: CALL_OW 321
37161: PUSH
37162: LD_VAR 0 3
37166: NONEQUAL
37167: IFFALSE 37185
// result := result diff i ;
37169: LD_ADDR_VAR 0 4
37173: PUSH
37174: LD_VAR 0 4
37178: PUSH
37179: LD_VAR 0 5
37183: DIFF
37184: ST_TO_ADDR
37185: GO 37144
37187: POP
37188: POP
// end ;
37189: LD_VAR 0 4
37193: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37194: LD_INT 0
37196: PPUSH
37197: PPUSH
37198: PPUSH
// result := true ;
37199: LD_ADDR_VAR 0 3
37203: PUSH
37204: LD_INT 1
37206: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37207: LD_ADDR_VAR 0 5
37211: PUSH
37212: LD_VAR 0 2
37216: PPUSH
37217: CALL_OW 480
37221: ST_TO_ADDR
// if not tmp then
37222: LD_VAR 0 5
37226: NOT
37227: IFFALSE 37231
// exit ;
37229: GO 37280
// for i in tmp do
37231: LD_ADDR_VAR 0 4
37235: PUSH
37236: LD_VAR 0 5
37240: PUSH
37241: FOR_IN
37242: IFFALSE 37278
// if GetTech ( i , side ) <> state_researched then
37244: LD_VAR 0 4
37248: PPUSH
37249: LD_VAR 0 1
37253: PPUSH
37254: CALL_OW 321
37258: PUSH
37259: LD_INT 2
37261: NONEQUAL
37262: IFFALSE 37276
// begin result := false ;
37264: LD_ADDR_VAR 0 3
37268: PUSH
37269: LD_INT 0
37271: ST_TO_ADDR
// exit ;
37272: POP
37273: POP
37274: GO 37280
// end ;
37276: GO 37241
37278: POP
37279: POP
// end ;
37280: LD_VAR 0 3
37284: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37285: LD_INT 0
37287: PPUSH
37288: PPUSH
37289: PPUSH
37290: PPUSH
37291: PPUSH
37292: PPUSH
37293: PPUSH
37294: PPUSH
37295: PPUSH
37296: PPUSH
37297: PPUSH
37298: PPUSH
37299: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37300: LD_VAR 0 1
37304: NOT
37305: PUSH
37306: LD_VAR 0 1
37310: PPUSH
37311: CALL_OW 257
37315: PUSH
37316: LD_INT 9
37318: NONEQUAL
37319: OR
37320: IFFALSE 37324
// exit ;
37322: GO 37897
// side := GetSide ( unit ) ;
37324: LD_ADDR_VAR 0 9
37328: PUSH
37329: LD_VAR 0 1
37333: PPUSH
37334: CALL_OW 255
37338: ST_TO_ADDR
// tech_space := tech_spacanom ;
37339: LD_ADDR_VAR 0 12
37343: PUSH
37344: LD_INT 29
37346: ST_TO_ADDR
// tech_time := tech_taurad ;
37347: LD_ADDR_VAR 0 13
37351: PUSH
37352: LD_INT 28
37354: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37355: LD_ADDR_VAR 0 11
37359: PUSH
37360: LD_VAR 0 1
37364: PPUSH
37365: CALL_OW 310
37369: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37370: LD_VAR 0 11
37374: PPUSH
37375: CALL_OW 247
37379: PUSH
37380: LD_INT 2
37382: EQUAL
37383: IFFALSE 37387
// exit ;
37385: GO 37897
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37387: LD_ADDR_VAR 0 8
37391: PUSH
37392: LD_INT 81
37394: PUSH
37395: LD_VAR 0 9
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 3
37406: PUSH
37407: LD_INT 21
37409: PUSH
37410: LD_INT 3
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PPUSH
37425: CALL_OW 69
37429: ST_TO_ADDR
// if not tmp then
37430: LD_VAR 0 8
37434: NOT
37435: IFFALSE 37439
// exit ;
37437: GO 37897
// if in_unit then
37439: LD_VAR 0 11
37443: IFFALSE 37467
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37445: LD_ADDR_VAR 0 10
37449: PUSH
37450: LD_VAR 0 8
37454: PPUSH
37455: LD_VAR 0 11
37459: PPUSH
37460: CALL_OW 74
37464: ST_TO_ADDR
37465: GO 37487
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37467: LD_ADDR_VAR 0 10
37471: PUSH
37472: LD_VAR 0 8
37476: PPUSH
37477: LD_VAR 0 1
37481: PPUSH
37482: CALL_OW 74
37486: ST_TO_ADDR
// if not enemy then
37487: LD_VAR 0 10
37491: NOT
37492: IFFALSE 37496
// exit ;
37494: GO 37897
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37496: LD_VAR 0 11
37500: PUSH
37501: LD_VAR 0 11
37505: PPUSH
37506: LD_VAR 0 10
37510: PPUSH
37511: CALL_OW 296
37515: PUSH
37516: LD_INT 13
37518: GREATER
37519: AND
37520: PUSH
37521: LD_VAR 0 1
37525: PPUSH
37526: LD_VAR 0 10
37530: PPUSH
37531: CALL_OW 296
37535: PUSH
37536: LD_INT 12
37538: GREATER
37539: OR
37540: IFFALSE 37544
// exit ;
37542: GO 37897
// missile := [ 1 ] ;
37544: LD_ADDR_VAR 0 14
37548: PUSH
37549: LD_INT 1
37551: PUSH
37552: EMPTY
37553: LIST
37554: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37555: LD_VAR 0 9
37559: PPUSH
37560: LD_VAR 0 12
37564: PPUSH
37565: CALL_OW 325
37569: IFFALSE 37598
// missile := Replace ( missile , missile + 1 , 2 ) ;
37571: LD_ADDR_VAR 0 14
37575: PUSH
37576: LD_VAR 0 14
37580: PPUSH
37581: LD_VAR 0 14
37585: PUSH
37586: LD_INT 1
37588: PLUS
37589: PPUSH
37590: LD_INT 2
37592: PPUSH
37593: CALL_OW 1
37597: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37598: LD_VAR 0 9
37602: PPUSH
37603: LD_VAR 0 13
37607: PPUSH
37608: CALL_OW 325
37612: PUSH
37613: LD_VAR 0 10
37617: PPUSH
37618: CALL_OW 255
37622: PPUSH
37623: LD_VAR 0 13
37627: PPUSH
37628: CALL_OW 325
37632: NOT
37633: AND
37634: IFFALSE 37663
// missile := Replace ( missile , missile + 1 , 3 ) ;
37636: LD_ADDR_VAR 0 14
37640: PUSH
37641: LD_VAR 0 14
37645: PPUSH
37646: LD_VAR 0 14
37650: PUSH
37651: LD_INT 1
37653: PLUS
37654: PPUSH
37655: LD_INT 3
37657: PPUSH
37658: CALL_OW 1
37662: ST_TO_ADDR
// if missile < 2 then
37663: LD_VAR 0 14
37667: PUSH
37668: LD_INT 2
37670: LESS
37671: IFFALSE 37675
// exit ;
37673: GO 37897
// x := GetX ( enemy ) ;
37675: LD_ADDR_VAR 0 4
37679: PUSH
37680: LD_VAR 0 10
37684: PPUSH
37685: CALL_OW 250
37689: ST_TO_ADDR
// y := GetY ( enemy ) ;
37690: LD_ADDR_VAR 0 5
37694: PUSH
37695: LD_VAR 0 10
37699: PPUSH
37700: CALL_OW 251
37704: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37705: LD_ADDR_VAR 0 6
37709: PUSH
37710: LD_VAR 0 4
37714: PUSH
37715: LD_INT 1
37717: NEG
37718: PPUSH
37719: LD_INT 1
37721: PPUSH
37722: CALL_OW 12
37726: PLUS
37727: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37728: LD_ADDR_VAR 0 7
37732: PUSH
37733: LD_VAR 0 5
37737: PUSH
37738: LD_INT 1
37740: NEG
37741: PPUSH
37742: LD_INT 1
37744: PPUSH
37745: CALL_OW 12
37749: PLUS
37750: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37751: LD_VAR 0 6
37755: PPUSH
37756: LD_VAR 0 7
37760: PPUSH
37761: CALL_OW 488
37765: NOT
37766: IFFALSE 37788
// begin _x := x ;
37768: LD_ADDR_VAR 0 6
37772: PUSH
37773: LD_VAR 0 4
37777: ST_TO_ADDR
// _y := y ;
37778: LD_ADDR_VAR 0 7
37782: PUSH
37783: LD_VAR 0 5
37787: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37788: LD_ADDR_VAR 0 3
37792: PUSH
37793: LD_INT 1
37795: PPUSH
37796: LD_VAR 0 14
37800: PPUSH
37801: CALL_OW 12
37805: ST_TO_ADDR
// case i of 1 :
37806: LD_VAR 0 3
37810: PUSH
37811: LD_INT 1
37813: DOUBLE
37814: EQUAL
37815: IFTRUE 37819
37817: GO 37836
37819: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37820: LD_VAR 0 1
37824: PPUSH
37825: LD_VAR 0 10
37829: PPUSH
37830: CALL_OW 115
37834: GO 37897
37836: LD_INT 2
37838: DOUBLE
37839: EQUAL
37840: IFTRUE 37844
37842: GO 37866
37844: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37845: LD_VAR 0 1
37849: PPUSH
37850: LD_VAR 0 6
37854: PPUSH
37855: LD_VAR 0 7
37859: PPUSH
37860: CALL_OW 153
37864: GO 37897
37866: LD_INT 3
37868: DOUBLE
37869: EQUAL
37870: IFTRUE 37874
37872: GO 37896
37874: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37875: LD_VAR 0 1
37879: PPUSH
37880: LD_VAR 0 6
37884: PPUSH
37885: LD_VAR 0 7
37889: PPUSH
37890: CALL_OW 154
37894: GO 37897
37896: POP
// end ;
37897: LD_VAR 0 2
37901: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37902: LD_INT 0
37904: PPUSH
37905: PPUSH
37906: PPUSH
37907: PPUSH
37908: PPUSH
37909: PPUSH
// if not unit or not building then
37910: LD_VAR 0 1
37914: NOT
37915: PUSH
37916: LD_VAR 0 2
37920: NOT
37921: OR
37922: IFFALSE 37926
// exit ;
37924: GO 38084
// x := GetX ( building ) ;
37926: LD_ADDR_VAR 0 5
37930: PUSH
37931: LD_VAR 0 2
37935: PPUSH
37936: CALL_OW 250
37940: ST_TO_ADDR
// y := GetY ( building ) ;
37941: LD_ADDR_VAR 0 6
37945: PUSH
37946: LD_VAR 0 2
37950: PPUSH
37951: CALL_OW 251
37955: ST_TO_ADDR
// for i = 0 to 5 do
37956: LD_ADDR_VAR 0 4
37960: PUSH
37961: DOUBLE
37962: LD_INT 0
37964: DEC
37965: ST_TO_ADDR
37966: LD_INT 5
37968: PUSH
37969: FOR_TO
37970: IFFALSE 38082
// begin _x := ShiftX ( x , i , 3 ) ;
37972: LD_ADDR_VAR 0 7
37976: PUSH
37977: LD_VAR 0 5
37981: PPUSH
37982: LD_VAR 0 4
37986: PPUSH
37987: LD_INT 3
37989: PPUSH
37990: CALL_OW 272
37994: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37995: LD_ADDR_VAR 0 8
37999: PUSH
38000: LD_VAR 0 6
38004: PPUSH
38005: LD_VAR 0 4
38009: PPUSH
38010: LD_INT 3
38012: PPUSH
38013: CALL_OW 273
38017: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38018: LD_VAR 0 7
38022: PPUSH
38023: LD_VAR 0 8
38027: PPUSH
38028: CALL_OW 488
38032: NOT
38033: IFFALSE 38037
// continue ;
38035: GO 37969
// if HexInfo ( _x , _y ) = 0 then
38037: LD_VAR 0 7
38041: PPUSH
38042: LD_VAR 0 8
38046: PPUSH
38047: CALL_OW 428
38051: PUSH
38052: LD_INT 0
38054: EQUAL
38055: IFFALSE 38080
// begin ComMoveXY ( unit , _x , _y ) ;
38057: LD_VAR 0 1
38061: PPUSH
38062: LD_VAR 0 7
38066: PPUSH
38067: LD_VAR 0 8
38071: PPUSH
38072: CALL_OW 111
// exit ;
38076: POP
38077: POP
38078: GO 38084
// end ; end ;
38080: GO 37969
38082: POP
38083: POP
// end ;
38084: LD_VAR 0 3
38088: RET
// export function ScanBase ( side , base_area ) ; begin
38089: LD_INT 0
38091: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38092: LD_ADDR_VAR 0 3
38096: PUSH
38097: LD_VAR 0 2
38101: PPUSH
38102: LD_INT 81
38104: PUSH
38105: LD_VAR 0 1
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PPUSH
38114: CALL_OW 70
38118: ST_TO_ADDR
// end ;
38119: LD_VAR 0 3
38123: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38124: LD_INT 0
38126: PPUSH
38127: PPUSH
38128: PPUSH
38129: PPUSH
// result := false ;
38130: LD_ADDR_VAR 0 2
38134: PUSH
38135: LD_INT 0
38137: ST_TO_ADDR
// side := GetSide ( unit ) ;
38138: LD_ADDR_VAR 0 3
38142: PUSH
38143: LD_VAR 0 1
38147: PPUSH
38148: CALL_OW 255
38152: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38153: LD_ADDR_VAR 0 4
38157: PUSH
38158: LD_VAR 0 1
38162: PPUSH
38163: CALL_OW 248
38167: ST_TO_ADDR
// case nat of 1 :
38168: LD_VAR 0 4
38172: PUSH
38173: LD_INT 1
38175: DOUBLE
38176: EQUAL
38177: IFTRUE 38181
38179: GO 38192
38181: POP
// tech := tech_lassight ; 2 :
38182: LD_ADDR_VAR 0 5
38186: PUSH
38187: LD_INT 12
38189: ST_TO_ADDR
38190: GO 38231
38192: LD_INT 2
38194: DOUBLE
38195: EQUAL
38196: IFTRUE 38200
38198: GO 38211
38200: POP
// tech := tech_mortar ; 3 :
38201: LD_ADDR_VAR 0 5
38205: PUSH
38206: LD_INT 41
38208: ST_TO_ADDR
38209: GO 38231
38211: LD_INT 3
38213: DOUBLE
38214: EQUAL
38215: IFTRUE 38219
38217: GO 38230
38219: POP
// tech := tech_bazooka ; end ;
38220: LD_ADDR_VAR 0 5
38224: PUSH
38225: LD_INT 44
38227: ST_TO_ADDR
38228: GO 38231
38230: POP
// if Researched ( side , tech ) then
38231: LD_VAR 0 3
38235: PPUSH
38236: LD_VAR 0 5
38240: PPUSH
38241: CALL_OW 325
38245: IFFALSE 38272
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38247: LD_ADDR_VAR 0 2
38251: PUSH
38252: LD_INT 5
38254: PUSH
38255: LD_INT 8
38257: PUSH
38258: LD_INT 9
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: LIST
38265: PUSH
38266: LD_VAR 0 4
38270: ARRAY
38271: ST_TO_ADDR
// end ;
38272: LD_VAR 0 2
38276: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38277: LD_INT 0
38279: PPUSH
38280: PPUSH
38281: PPUSH
// if not mines then
38282: LD_VAR 0 2
38286: NOT
38287: IFFALSE 38291
// exit ;
38289: GO 38435
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38291: LD_ADDR_VAR 0 5
38295: PUSH
38296: LD_INT 81
38298: PUSH
38299: LD_VAR 0 1
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 3
38310: PUSH
38311: LD_INT 21
38313: PUSH
38314: LD_INT 3
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PPUSH
38329: CALL_OW 69
38333: ST_TO_ADDR
// for i in mines do
38334: LD_ADDR_VAR 0 4
38338: PUSH
38339: LD_VAR 0 2
38343: PUSH
38344: FOR_IN
38345: IFFALSE 38433
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38347: LD_VAR 0 4
38351: PUSH
38352: LD_INT 1
38354: ARRAY
38355: PPUSH
38356: LD_VAR 0 4
38360: PUSH
38361: LD_INT 2
38363: ARRAY
38364: PPUSH
38365: CALL_OW 458
38369: NOT
38370: IFFALSE 38374
// continue ;
38372: GO 38344
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38374: LD_VAR 0 4
38378: PUSH
38379: LD_INT 1
38381: ARRAY
38382: PPUSH
38383: LD_VAR 0 4
38387: PUSH
38388: LD_INT 2
38390: ARRAY
38391: PPUSH
38392: CALL_OW 428
38396: PUSH
38397: LD_VAR 0 5
38401: IN
38402: IFFALSE 38431
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38404: LD_VAR 0 4
38408: PUSH
38409: LD_INT 1
38411: ARRAY
38412: PPUSH
38413: LD_VAR 0 4
38417: PUSH
38418: LD_INT 2
38420: ARRAY
38421: PPUSH
38422: LD_VAR 0 1
38426: PPUSH
38427: CALL_OW 456
// end ;
38431: GO 38344
38433: POP
38434: POP
// end ;
38435: LD_VAR 0 3
38439: RET
// export function Count ( array ) ; var i ; begin
38440: LD_INT 0
38442: PPUSH
38443: PPUSH
// result := 0 ;
38444: LD_ADDR_VAR 0 2
38448: PUSH
38449: LD_INT 0
38451: ST_TO_ADDR
// for i in array do
38452: LD_ADDR_VAR 0 3
38456: PUSH
38457: LD_VAR 0 1
38461: PUSH
38462: FOR_IN
38463: IFFALSE 38487
// if i then
38465: LD_VAR 0 3
38469: IFFALSE 38485
// result := result + 1 ;
38471: LD_ADDR_VAR 0 2
38475: PUSH
38476: LD_VAR 0 2
38480: PUSH
38481: LD_INT 1
38483: PLUS
38484: ST_TO_ADDR
38485: GO 38462
38487: POP
38488: POP
// end ;
38489: LD_VAR 0 2
38493: RET
// export function IsEmpty ( building ) ; begin
38494: LD_INT 0
38496: PPUSH
// if not building then
38497: LD_VAR 0 1
38501: NOT
38502: IFFALSE 38506
// exit ;
38504: GO 38549
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38506: LD_ADDR_VAR 0 2
38510: PUSH
38511: LD_VAR 0 1
38515: PUSH
38516: LD_INT 22
38518: PUSH
38519: LD_VAR 0 1
38523: PPUSH
38524: CALL_OW 255
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 58
38535: PUSH
38536: EMPTY
38537: LIST
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PPUSH
38543: CALL_OW 69
38547: IN
38548: ST_TO_ADDR
// end ;
38549: LD_VAR 0 2
38553: RET
// export function IsNotFull ( building ) ; begin
38554: LD_INT 0
38556: PPUSH
// if not building then
38557: LD_VAR 0 1
38561: NOT
38562: IFFALSE 38566
// exit ;
38564: GO 38585
// result := UnitsInside ( building ) < 6 ;
38566: LD_ADDR_VAR 0 2
38570: PUSH
38571: LD_VAR 0 1
38575: PPUSH
38576: CALL_OW 313
38580: PUSH
38581: LD_INT 6
38583: LESS
38584: ST_TO_ADDR
// end ;
38585: LD_VAR 0 2
38589: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38590: LD_INT 0
38592: PPUSH
38593: PPUSH
38594: PPUSH
38595: PPUSH
// tmp := [ ] ;
38596: LD_ADDR_VAR 0 3
38600: PUSH
38601: EMPTY
38602: ST_TO_ADDR
// list := [ ] ;
38603: LD_ADDR_VAR 0 5
38607: PUSH
38608: EMPTY
38609: ST_TO_ADDR
// for i = 16 to 25 do
38610: LD_ADDR_VAR 0 4
38614: PUSH
38615: DOUBLE
38616: LD_INT 16
38618: DEC
38619: ST_TO_ADDR
38620: LD_INT 25
38622: PUSH
38623: FOR_TO
38624: IFFALSE 38697
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38626: LD_ADDR_VAR 0 3
38630: PUSH
38631: LD_VAR 0 3
38635: PUSH
38636: LD_INT 22
38638: PUSH
38639: LD_VAR 0 1
38643: PPUSH
38644: CALL_OW 255
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 91
38655: PUSH
38656: LD_VAR 0 1
38660: PUSH
38661: LD_INT 6
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 30
38671: PUSH
38672: LD_VAR 0 4
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: LIST
38685: PUSH
38686: EMPTY
38687: LIST
38688: PPUSH
38689: CALL_OW 69
38693: ADD
38694: ST_TO_ADDR
38695: GO 38623
38697: POP
38698: POP
// for i = 1 to tmp do
38699: LD_ADDR_VAR 0 4
38703: PUSH
38704: DOUBLE
38705: LD_INT 1
38707: DEC
38708: ST_TO_ADDR
38709: LD_VAR 0 3
38713: PUSH
38714: FOR_TO
38715: IFFALSE 38803
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38717: LD_ADDR_VAR 0 5
38721: PUSH
38722: LD_VAR 0 5
38726: PUSH
38727: LD_VAR 0 3
38731: PUSH
38732: LD_VAR 0 4
38736: ARRAY
38737: PPUSH
38738: CALL_OW 266
38742: PUSH
38743: LD_VAR 0 3
38747: PUSH
38748: LD_VAR 0 4
38752: ARRAY
38753: PPUSH
38754: CALL_OW 250
38758: PUSH
38759: LD_VAR 0 3
38763: PUSH
38764: LD_VAR 0 4
38768: ARRAY
38769: PPUSH
38770: CALL_OW 251
38774: PUSH
38775: LD_VAR 0 3
38779: PUSH
38780: LD_VAR 0 4
38784: ARRAY
38785: PPUSH
38786: CALL_OW 254
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: PUSH
38797: EMPTY
38798: LIST
38799: ADD
38800: ST_TO_ADDR
38801: GO 38714
38803: POP
38804: POP
// result := list ;
38805: LD_ADDR_VAR 0 2
38809: PUSH
38810: LD_VAR 0 5
38814: ST_TO_ADDR
// end ;
38815: LD_VAR 0 2
38819: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38820: LD_INT 0
38822: PPUSH
38823: PPUSH
38824: PPUSH
38825: PPUSH
38826: PPUSH
38827: PPUSH
38828: PPUSH
// if not factory then
38829: LD_VAR 0 1
38833: NOT
38834: IFFALSE 38838
// exit ;
38836: GO 39431
// if control = control_apeman then
38838: LD_VAR 0 4
38842: PUSH
38843: LD_INT 5
38845: EQUAL
38846: IFFALSE 38955
// begin tmp := UnitsInside ( factory ) ;
38848: LD_ADDR_VAR 0 8
38852: PUSH
38853: LD_VAR 0 1
38857: PPUSH
38858: CALL_OW 313
38862: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38863: LD_VAR 0 8
38867: PPUSH
38868: LD_INT 25
38870: PUSH
38871: LD_INT 12
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PPUSH
38878: CALL_OW 72
38882: NOT
38883: IFFALSE 38893
// control := control_manual ;
38885: LD_ADDR_VAR 0 4
38889: PUSH
38890: LD_INT 1
38892: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38893: LD_ADDR_VAR 0 8
38897: PUSH
38898: LD_VAR 0 1
38902: PPUSH
38903: CALL 38590 0 1
38907: ST_TO_ADDR
// if tmp then
38908: LD_VAR 0 8
38912: IFFALSE 38955
// begin for i in tmp do
38914: LD_ADDR_VAR 0 7
38918: PUSH
38919: LD_VAR 0 8
38923: PUSH
38924: FOR_IN
38925: IFFALSE 38953
// if i [ 1 ] = b_ext_radio then
38927: LD_VAR 0 7
38931: PUSH
38932: LD_INT 1
38934: ARRAY
38935: PUSH
38936: LD_INT 22
38938: EQUAL
38939: IFFALSE 38951
// begin control := control_remote ;
38941: LD_ADDR_VAR 0 4
38945: PUSH
38946: LD_INT 2
38948: ST_TO_ADDR
// break ;
38949: GO 38953
// end ;
38951: GO 38924
38953: POP
38954: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38955: LD_VAR 0 1
38959: PPUSH
38960: LD_VAR 0 2
38964: PPUSH
38965: LD_VAR 0 3
38969: PPUSH
38970: LD_VAR 0 4
38974: PPUSH
38975: LD_VAR 0 5
38979: PPUSH
38980: CALL_OW 448
38984: IFFALSE 39019
// begin result := [ chassis , engine , control , weapon ] ;
38986: LD_ADDR_VAR 0 6
38990: PUSH
38991: LD_VAR 0 2
38995: PUSH
38996: LD_VAR 0 3
39000: PUSH
39001: LD_VAR 0 4
39005: PUSH
39006: LD_VAR 0 5
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: ST_TO_ADDR
// exit ;
39017: GO 39431
// end ; _chassis := AvailableChassisList ( factory ) ;
39019: LD_ADDR_VAR 0 9
39023: PUSH
39024: LD_VAR 0 1
39028: PPUSH
39029: CALL_OW 475
39033: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39034: LD_ADDR_VAR 0 11
39038: PUSH
39039: LD_VAR 0 1
39043: PPUSH
39044: CALL_OW 476
39048: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39049: LD_ADDR_VAR 0 12
39053: PUSH
39054: LD_VAR 0 1
39058: PPUSH
39059: CALL_OW 477
39063: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39064: LD_ADDR_VAR 0 10
39068: PUSH
39069: LD_VAR 0 1
39073: PPUSH
39074: CALL_OW 478
39078: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39079: LD_VAR 0 9
39083: NOT
39084: PUSH
39085: LD_VAR 0 11
39089: NOT
39090: OR
39091: PUSH
39092: LD_VAR 0 12
39096: NOT
39097: OR
39098: PUSH
39099: LD_VAR 0 10
39103: NOT
39104: OR
39105: IFFALSE 39140
// begin result := [ chassis , engine , control , weapon ] ;
39107: LD_ADDR_VAR 0 6
39111: PUSH
39112: LD_VAR 0 2
39116: PUSH
39117: LD_VAR 0 3
39121: PUSH
39122: LD_VAR 0 4
39126: PUSH
39127: LD_VAR 0 5
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: ST_TO_ADDR
// exit ;
39138: GO 39431
// end ; if not chassis in _chassis then
39140: LD_VAR 0 2
39144: PUSH
39145: LD_VAR 0 9
39149: IN
39150: NOT
39151: IFFALSE 39177
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39153: LD_ADDR_VAR 0 2
39157: PUSH
39158: LD_VAR 0 9
39162: PUSH
39163: LD_INT 1
39165: PPUSH
39166: LD_VAR 0 9
39170: PPUSH
39171: CALL_OW 12
39175: ARRAY
39176: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39177: LD_VAR 0 2
39181: PPUSH
39182: LD_VAR 0 3
39186: PPUSH
39187: CALL 39436 0 2
39191: NOT
39192: IFFALSE 39251
// repeat engine := _engine [ 1 ] ;
39194: LD_ADDR_VAR 0 3
39198: PUSH
39199: LD_VAR 0 11
39203: PUSH
39204: LD_INT 1
39206: ARRAY
39207: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39208: LD_ADDR_VAR 0 11
39212: PUSH
39213: LD_VAR 0 11
39217: PPUSH
39218: LD_INT 1
39220: PPUSH
39221: CALL_OW 3
39225: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39226: LD_VAR 0 2
39230: PPUSH
39231: LD_VAR 0 3
39235: PPUSH
39236: CALL 39436 0 2
39240: PUSH
39241: LD_VAR 0 11
39245: PUSH
39246: EMPTY
39247: EQUAL
39248: OR
39249: IFFALSE 39194
// if not control in _control then
39251: LD_VAR 0 4
39255: PUSH
39256: LD_VAR 0 12
39260: IN
39261: NOT
39262: IFFALSE 39288
// control := _control [ rand ( 1 , _control ) ] ;
39264: LD_ADDR_VAR 0 4
39268: PUSH
39269: LD_VAR 0 12
39273: PUSH
39274: LD_INT 1
39276: PPUSH
39277: LD_VAR 0 12
39281: PPUSH
39282: CALL_OW 12
39286: ARRAY
39287: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39288: LD_VAR 0 2
39292: PPUSH
39293: LD_VAR 0 5
39297: PPUSH
39298: CALL 39656 0 2
39302: NOT
39303: IFFALSE 39362
// repeat weapon := _weapon [ 1 ] ;
39305: LD_ADDR_VAR 0 5
39309: PUSH
39310: LD_VAR 0 10
39314: PUSH
39315: LD_INT 1
39317: ARRAY
39318: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39319: LD_ADDR_VAR 0 10
39323: PUSH
39324: LD_VAR 0 10
39328: PPUSH
39329: LD_INT 1
39331: PPUSH
39332: CALL_OW 3
39336: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39337: LD_VAR 0 2
39341: PPUSH
39342: LD_VAR 0 5
39346: PPUSH
39347: CALL 39656 0 2
39351: PUSH
39352: LD_VAR 0 10
39356: PUSH
39357: EMPTY
39358: EQUAL
39359: OR
39360: IFFALSE 39305
// result := [ ] ;
39362: LD_ADDR_VAR 0 6
39366: PUSH
39367: EMPTY
39368: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39369: LD_VAR 0 1
39373: PPUSH
39374: LD_VAR 0 2
39378: PPUSH
39379: LD_VAR 0 3
39383: PPUSH
39384: LD_VAR 0 4
39388: PPUSH
39389: LD_VAR 0 5
39393: PPUSH
39394: CALL_OW 448
39398: IFFALSE 39431
// result := [ chassis , engine , control , weapon ] ;
39400: LD_ADDR_VAR 0 6
39404: PUSH
39405: LD_VAR 0 2
39409: PUSH
39410: LD_VAR 0 3
39414: PUSH
39415: LD_VAR 0 4
39419: PUSH
39420: LD_VAR 0 5
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: ST_TO_ADDR
// end ;
39431: LD_VAR 0 6
39435: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39436: LD_INT 0
39438: PPUSH
// if not chassis or not engine then
39439: LD_VAR 0 1
39443: NOT
39444: PUSH
39445: LD_VAR 0 2
39449: NOT
39450: OR
39451: IFFALSE 39455
// exit ;
39453: GO 39651
// case engine of engine_solar :
39455: LD_VAR 0 2
39459: PUSH
39460: LD_INT 2
39462: DOUBLE
39463: EQUAL
39464: IFTRUE 39468
39466: GO 39506
39468: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39469: LD_ADDR_VAR 0 3
39473: PUSH
39474: LD_INT 11
39476: PUSH
39477: LD_INT 12
39479: PUSH
39480: LD_INT 13
39482: PUSH
39483: LD_INT 14
39485: PUSH
39486: LD_INT 1
39488: PUSH
39489: LD_INT 2
39491: PUSH
39492: LD_INT 3
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: ST_TO_ADDR
39504: GO 39635
39506: LD_INT 1
39508: DOUBLE
39509: EQUAL
39510: IFTRUE 39514
39512: GO 39576
39514: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39515: LD_ADDR_VAR 0 3
39519: PUSH
39520: LD_INT 11
39522: PUSH
39523: LD_INT 12
39525: PUSH
39526: LD_INT 13
39528: PUSH
39529: LD_INT 14
39531: PUSH
39532: LD_INT 1
39534: PUSH
39535: LD_INT 2
39537: PUSH
39538: LD_INT 3
39540: PUSH
39541: LD_INT 4
39543: PUSH
39544: LD_INT 5
39546: PUSH
39547: LD_INT 21
39549: PUSH
39550: LD_INT 23
39552: PUSH
39553: LD_INT 22
39555: PUSH
39556: LD_INT 24
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: ST_TO_ADDR
39574: GO 39635
39576: LD_INT 3
39578: DOUBLE
39579: EQUAL
39580: IFTRUE 39584
39582: GO 39634
39584: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39585: LD_ADDR_VAR 0 3
39589: PUSH
39590: LD_INT 13
39592: PUSH
39593: LD_INT 14
39595: PUSH
39596: LD_INT 2
39598: PUSH
39599: LD_INT 3
39601: PUSH
39602: LD_INT 4
39604: PUSH
39605: LD_INT 5
39607: PUSH
39608: LD_INT 21
39610: PUSH
39611: LD_INT 22
39613: PUSH
39614: LD_INT 23
39616: PUSH
39617: LD_INT 24
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: ST_TO_ADDR
39632: GO 39635
39634: POP
// result := ( chassis in result ) ;
39635: LD_ADDR_VAR 0 3
39639: PUSH
39640: LD_VAR 0 1
39644: PUSH
39645: LD_VAR 0 3
39649: IN
39650: ST_TO_ADDR
// end ;
39651: LD_VAR 0 3
39655: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39656: LD_INT 0
39658: PPUSH
// if not chassis or not weapon then
39659: LD_VAR 0 1
39663: NOT
39664: PUSH
39665: LD_VAR 0 2
39669: NOT
39670: OR
39671: IFFALSE 39675
// exit ;
39673: GO 40737
// case weapon of us_machine_gun :
39675: LD_VAR 0 2
39679: PUSH
39680: LD_INT 2
39682: DOUBLE
39683: EQUAL
39684: IFTRUE 39688
39686: GO 39718
39688: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39689: LD_ADDR_VAR 0 3
39693: PUSH
39694: LD_INT 1
39696: PUSH
39697: LD_INT 2
39699: PUSH
39700: LD_INT 3
39702: PUSH
39703: LD_INT 4
39705: PUSH
39706: LD_INT 5
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: ST_TO_ADDR
39716: GO 40721
39718: LD_INT 3
39720: DOUBLE
39721: EQUAL
39722: IFTRUE 39726
39724: GO 39756
39726: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39727: LD_ADDR_VAR 0 3
39731: PUSH
39732: LD_INT 1
39734: PUSH
39735: LD_INT 2
39737: PUSH
39738: LD_INT 3
39740: PUSH
39741: LD_INT 4
39743: PUSH
39744: LD_INT 5
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: ST_TO_ADDR
39754: GO 40721
39756: LD_INT 11
39758: DOUBLE
39759: EQUAL
39760: IFTRUE 39764
39762: GO 39794
39764: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39765: LD_ADDR_VAR 0 3
39769: PUSH
39770: LD_INT 1
39772: PUSH
39773: LD_INT 2
39775: PUSH
39776: LD_INT 3
39778: PUSH
39779: LD_INT 4
39781: PUSH
39782: LD_INT 5
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: ST_TO_ADDR
39792: GO 40721
39794: LD_INT 4
39796: DOUBLE
39797: EQUAL
39798: IFTRUE 39802
39800: GO 39828
39802: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39803: LD_ADDR_VAR 0 3
39807: PUSH
39808: LD_INT 2
39810: PUSH
39811: LD_INT 3
39813: PUSH
39814: LD_INT 4
39816: PUSH
39817: LD_INT 5
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: ST_TO_ADDR
39826: GO 40721
39828: LD_INT 5
39830: DOUBLE
39831: EQUAL
39832: IFTRUE 39836
39834: GO 39862
39836: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39837: LD_ADDR_VAR 0 3
39841: PUSH
39842: LD_INT 2
39844: PUSH
39845: LD_INT 3
39847: PUSH
39848: LD_INT 4
39850: PUSH
39851: LD_INT 5
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: ST_TO_ADDR
39860: GO 40721
39862: LD_INT 9
39864: DOUBLE
39865: EQUAL
39866: IFTRUE 39870
39868: GO 39896
39870: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39871: LD_ADDR_VAR 0 3
39875: PUSH
39876: LD_INT 2
39878: PUSH
39879: LD_INT 3
39881: PUSH
39882: LD_INT 4
39884: PUSH
39885: LD_INT 5
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: ST_TO_ADDR
39894: GO 40721
39896: LD_INT 7
39898: DOUBLE
39899: EQUAL
39900: IFTRUE 39904
39902: GO 39930
39904: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39905: LD_ADDR_VAR 0 3
39909: PUSH
39910: LD_INT 2
39912: PUSH
39913: LD_INT 3
39915: PUSH
39916: LD_INT 4
39918: PUSH
39919: LD_INT 5
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: ST_TO_ADDR
39928: GO 40721
39930: LD_INT 12
39932: DOUBLE
39933: EQUAL
39934: IFTRUE 39938
39936: GO 39964
39938: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39939: LD_ADDR_VAR 0 3
39943: PUSH
39944: LD_INT 2
39946: PUSH
39947: LD_INT 3
39949: PUSH
39950: LD_INT 4
39952: PUSH
39953: LD_INT 5
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: ST_TO_ADDR
39962: GO 40721
39964: LD_INT 13
39966: DOUBLE
39967: EQUAL
39968: IFTRUE 39972
39970: GO 39998
39972: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39973: LD_ADDR_VAR 0 3
39977: PUSH
39978: LD_INT 2
39980: PUSH
39981: LD_INT 3
39983: PUSH
39984: LD_INT 4
39986: PUSH
39987: LD_INT 5
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: ST_TO_ADDR
39996: GO 40721
39998: LD_INT 14
40000: DOUBLE
40001: EQUAL
40002: IFTRUE 40006
40004: GO 40024
40006: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40007: LD_ADDR_VAR 0 3
40011: PUSH
40012: LD_INT 4
40014: PUSH
40015: LD_INT 5
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: ST_TO_ADDR
40022: GO 40721
40024: LD_INT 6
40026: DOUBLE
40027: EQUAL
40028: IFTRUE 40032
40030: GO 40050
40032: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40033: LD_ADDR_VAR 0 3
40037: PUSH
40038: LD_INT 4
40040: PUSH
40041: LD_INT 5
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: ST_TO_ADDR
40048: GO 40721
40050: LD_INT 10
40052: DOUBLE
40053: EQUAL
40054: IFTRUE 40058
40056: GO 40076
40058: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40059: LD_ADDR_VAR 0 3
40063: PUSH
40064: LD_INT 4
40066: PUSH
40067: LD_INT 5
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: ST_TO_ADDR
40074: GO 40721
40076: LD_INT 22
40078: DOUBLE
40079: EQUAL
40080: IFTRUE 40084
40082: GO 40110
40084: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40085: LD_ADDR_VAR 0 3
40089: PUSH
40090: LD_INT 11
40092: PUSH
40093: LD_INT 12
40095: PUSH
40096: LD_INT 13
40098: PUSH
40099: LD_INT 14
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: ST_TO_ADDR
40108: GO 40721
40110: LD_INT 23
40112: DOUBLE
40113: EQUAL
40114: IFTRUE 40118
40116: GO 40144
40118: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40119: LD_ADDR_VAR 0 3
40123: PUSH
40124: LD_INT 11
40126: PUSH
40127: LD_INT 12
40129: PUSH
40130: LD_INT 13
40132: PUSH
40133: LD_INT 14
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: ST_TO_ADDR
40142: GO 40721
40144: LD_INT 24
40146: DOUBLE
40147: EQUAL
40148: IFTRUE 40152
40150: GO 40178
40152: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40153: LD_ADDR_VAR 0 3
40157: PUSH
40158: LD_INT 11
40160: PUSH
40161: LD_INT 12
40163: PUSH
40164: LD_INT 13
40166: PUSH
40167: LD_INT 14
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: ST_TO_ADDR
40176: GO 40721
40178: LD_INT 30
40180: DOUBLE
40181: EQUAL
40182: IFTRUE 40186
40184: GO 40212
40186: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40187: LD_ADDR_VAR 0 3
40191: PUSH
40192: LD_INT 11
40194: PUSH
40195: LD_INT 12
40197: PUSH
40198: LD_INT 13
40200: PUSH
40201: LD_INT 14
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: ST_TO_ADDR
40210: GO 40721
40212: LD_INT 25
40214: DOUBLE
40215: EQUAL
40216: IFTRUE 40220
40218: GO 40238
40220: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40221: LD_ADDR_VAR 0 3
40225: PUSH
40226: LD_INT 13
40228: PUSH
40229: LD_INT 14
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: ST_TO_ADDR
40236: GO 40721
40238: LD_INT 27
40240: DOUBLE
40241: EQUAL
40242: IFTRUE 40246
40244: GO 40264
40246: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40247: LD_ADDR_VAR 0 3
40251: PUSH
40252: LD_INT 13
40254: PUSH
40255: LD_INT 14
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: ST_TO_ADDR
40262: GO 40721
40264: LD_EXP 126
40268: DOUBLE
40269: EQUAL
40270: IFTRUE 40274
40272: GO 40300
40274: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40275: LD_ADDR_VAR 0 3
40279: PUSH
40280: LD_INT 11
40282: PUSH
40283: LD_INT 12
40285: PUSH
40286: LD_INT 13
40288: PUSH
40289: LD_INT 14
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: ST_TO_ADDR
40298: GO 40721
40300: LD_INT 28
40302: DOUBLE
40303: EQUAL
40304: IFTRUE 40308
40306: GO 40326
40308: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40309: LD_ADDR_VAR 0 3
40313: PUSH
40314: LD_INT 13
40316: PUSH
40317: LD_INT 14
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: ST_TO_ADDR
40324: GO 40721
40326: LD_INT 29
40328: DOUBLE
40329: EQUAL
40330: IFTRUE 40334
40332: GO 40352
40334: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40335: LD_ADDR_VAR 0 3
40339: PUSH
40340: LD_INT 13
40342: PUSH
40343: LD_INT 14
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: ST_TO_ADDR
40350: GO 40721
40352: LD_INT 31
40354: DOUBLE
40355: EQUAL
40356: IFTRUE 40360
40358: GO 40378
40360: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40361: LD_ADDR_VAR 0 3
40365: PUSH
40366: LD_INT 13
40368: PUSH
40369: LD_INT 14
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: ST_TO_ADDR
40376: GO 40721
40378: LD_INT 26
40380: DOUBLE
40381: EQUAL
40382: IFTRUE 40386
40384: GO 40404
40386: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40387: LD_ADDR_VAR 0 3
40391: PUSH
40392: LD_INT 13
40394: PUSH
40395: LD_INT 14
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: ST_TO_ADDR
40402: GO 40721
40404: LD_INT 42
40406: DOUBLE
40407: EQUAL
40408: IFTRUE 40412
40410: GO 40438
40412: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40413: LD_ADDR_VAR 0 3
40417: PUSH
40418: LD_INT 21
40420: PUSH
40421: LD_INT 22
40423: PUSH
40424: LD_INT 23
40426: PUSH
40427: LD_INT 24
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: ST_TO_ADDR
40436: GO 40721
40438: LD_INT 43
40440: DOUBLE
40441: EQUAL
40442: IFTRUE 40446
40444: GO 40472
40446: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40447: LD_ADDR_VAR 0 3
40451: PUSH
40452: LD_INT 21
40454: PUSH
40455: LD_INT 22
40457: PUSH
40458: LD_INT 23
40460: PUSH
40461: LD_INT 24
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: ST_TO_ADDR
40470: GO 40721
40472: LD_INT 44
40474: DOUBLE
40475: EQUAL
40476: IFTRUE 40480
40478: GO 40506
40480: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40481: LD_ADDR_VAR 0 3
40485: PUSH
40486: LD_INT 21
40488: PUSH
40489: LD_INT 22
40491: PUSH
40492: LD_INT 23
40494: PUSH
40495: LD_INT 24
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: ST_TO_ADDR
40504: GO 40721
40506: LD_INT 45
40508: DOUBLE
40509: EQUAL
40510: IFTRUE 40514
40512: GO 40540
40514: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40515: LD_ADDR_VAR 0 3
40519: PUSH
40520: LD_INT 21
40522: PUSH
40523: LD_INT 22
40525: PUSH
40526: LD_INT 23
40528: PUSH
40529: LD_INT 24
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: ST_TO_ADDR
40538: GO 40721
40540: LD_INT 49
40542: DOUBLE
40543: EQUAL
40544: IFTRUE 40548
40546: GO 40574
40548: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40549: LD_ADDR_VAR 0 3
40553: PUSH
40554: LD_INT 21
40556: PUSH
40557: LD_INT 22
40559: PUSH
40560: LD_INT 23
40562: PUSH
40563: LD_INT 24
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: ST_TO_ADDR
40572: GO 40721
40574: LD_INT 51
40576: DOUBLE
40577: EQUAL
40578: IFTRUE 40582
40580: GO 40608
40582: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40583: LD_ADDR_VAR 0 3
40587: PUSH
40588: LD_INT 21
40590: PUSH
40591: LD_INT 22
40593: PUSH
40594: LD_INT 23
40596: PUSH
40597: LD_INT 24
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: ST_TO_ADDR
40606: GO 40721
40608: LD_INT 52
40610: DOUBLE
40611: EQUAL
40612: IFTRUE 40616
40614: GO 40642
40616: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40617: LD_ADDR_VAR 0 3
40621: PUSH
40622: LD_INT 21
40624: PUSH
40625: LD_INT 22
40627: PUSH
40628: LD_INT 23
40630: PUSH
40631: LD_INT 24
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: ST_TO_ADDR
40640: GO 40721
40642: LD_INT 53
40644: DOUBLE
40645: EQUAL
40646: IFTRUE 40650
40648: GO 40668
40650: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40651: LD_ADDR_VAR 0 3
40655: PUSH
40656: LD_INT 23
40658: PUSH
40659: LD_INT 24
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: ST_TO_ADDR
40666: GO 40721
40668: LD_INT 46
40670: DOUBLE
40671: EQUAL
40672: IFTRUE 40676
40674: GO 40694
40676: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40677: LD_ADDR_VAR 0 3
40681: PUSH
40682: LD_INT 23
40684: PUSH
40685: LD_INT 24
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: ST_TO_ADDR
40692: GO 40721
40694: LD_INT 47
40696: DOUBLE
40697: EQUAL
40698: IFTRUE 40702
40700: GO 40720
40702: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40703: LD_ADDR_VAR 0 3
40707: PUSH
40708: LD_INT 23
40710: PUSH
40711: LD_INT 24
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: ST_TO_ADDR
40718: GO 40721
40720: POP
// result := ( chassis in result ) ;
40721: LD_ADDR_VAR 0 3
40725: PUSH
40726: LD_VAR 0 1
40730: PUSH
40731: LD_VAR 0 3
40735: IN
40736: ST_TO_ADDR
// end ;
40737: LD_VAR 0 3
40741: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40742: LD_INT 0
40744: PPUSH
40745: PPUSH
40746: PPUSH
40747: PPUSH
40748: PPUSH
40749: PPUSH
40750: PPUSH
// result := array ;
40751: LD_ADDR_VAR 0 5
40755: PUSH
40756: LD_VAR 0 1
40760: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40761: LD_VAR 0 1
40765: NOT
40766: PUSH
40767: LD_VAR 0 2
40771: NOT
40772: OR
40773: PUSH
40774: LD_VAR 0 3
40778: NOT
40779: OR
40780: PUSH
40781: LD_VAR 0 2
40785: PUSH
40786: LD_VAR 0 1
40790: GREATER
40791: OR
40792: PUSH
40793: LD_VAR 0 3
40797: PUSH
40798: LD_VAR 0 1
40802: GREATER
40803: OR
40804: IFFALSE 40808
// exit ;
40806: GO 41104
// if direction then
40808: LD_VAR 0 4
40812: IFFALSE 40876
// begin d := 1 ;
40814: LD_ADDR_VAR 0 9
40818: PUSH
40819: LD_INT 1
40821: ST_TO_ADDR
// if i_from > i_to then
40822: LD_VAR 0 2
40826: PUSH
40827: LD_VAR 0 3
40831: GREATER
40832: IFFALSE 40858
// length := ( array - i_from ) + i_to else
40834: LD_ADDR_VAR 0 11
40838: PUSH
40839: LD_VAR 0 1
40843: PUSH
40844: LD_VAR 0 2
40848: MINUS
40849: PUSH
40850: LD_VAR 0 3
40854: PLUS
40855: ST_TO_ADDR
40856: GO 40874
// length := i_to - i_from ;
40858: LD_ADDR_VAR 0 11
40862: PUSH
40863: LD_VAR 0 3
40867: PUSH
40868: LD_VAR 0 2
40872: MINUS
40873: ST_TO_ADDR
// end else
40874: GO 40937
// begin d := - 1 ;
40876: LD_ADDR_VAR 0 9
40880: PUSH
40881: LD_INT 1
40883: NEG
40884: ST_TO_ADDR
// if i_from > i_to then
40885: LD_VAR 0 2
40889: PUSH
40890: LD_VAR 0 3
40894: GREATER
40895: IFFALSE 40915
// length := i_from - i_to else
40897: LD_ADDR_VAR 0 11
40901: PUSH
40902: LD_VAR 0 2
40906: PUSH
40907: LD_VAR 0 3
40911: MINUS
40912: ST_TO_ADDR
40913: GO 40937
// length := ( array - i_to ) + i_from ;
40915: LD_ADDR_VAR 0 11
40919: PUSH
40920: LD_VAR 0 1
40924: PUSH
40925: LD_VAR 0 3
40929: MINUS
40930: PUSH
40931: LD_VAR 0 2
40935: PLUS
40936: ST_TO_ADDR
// end ; if not length then
40937: LD_VAR 0 11
40941: NOT
40942: IFFALSE 40946
// exit ;
40944: GO 41104
// tmp := array ;
40946: LD_ADDR_VAR 0 10
40950: PUSH
40951: LD_VAR 0 1
40955: ST_TO_ADDR
// for i = 1 to length do
40956: LD_ADDR_VAR 0 6
40960: PUSH
40961: DOUBLE
40962: LD_INT 1
40964: DEC
40965: ST_TO_ADDR
40966: LD_VAR 0 11
40970: PUSH
40971: FOR_TO
40972: IFFALSE 41092
// begin for j = 1 to array do
40974: LD_ADDR_VAR 0 7
40978: PUSH
40979: DOUBLE
40980: LD_INT 1
40982: DEC
40983: ST_TO_ADDR
40984: LD_VAR 0 1
40988: PUSH
40989: FOR_TO
40990: IFFALSE 41078
// begin k := j + d ;
40992: LD_ADDR_VAR 0 8
40996: PUSH
40997: LD_VAR 0 7
41001: PUSH
41002: LD_VAR 0 9
41006: PLUS
41007: ST_TO_ADDR
// if k > array then
41008: LD_VAR 0 8
41012: PUSH
41013: LD_VAR 0 1
41017: GREATER
41018: IFFALSE 41028
// k := 1 ;
41020: LD_ADDR_VAR 0 8
41024: PUSH
41025: LD_INT 1
41027: ST_TO_ADDR
// if not k then
41028: LD_VAR 0 8
41032: NOT
41033: IFFALSE 41045
// k := array ;
41035: LD_ADDR_VAR 0 8
41039: PUSH
41040: LD_VAR 0 1
41044: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41045: LD_ADDR_VAR 0 10
41049: PUSH
41050: LD_VAR 0 10
41054: PPUSH
41055: LD_VAR 0 8
41059: PPUSH
41060: LD_VAR 0 1
41064: PUSH
41065: LD_VAR 0 7
41069: ARRAY
41070: PPUSH
41071: CALL_OW 1
41075: ST_TO_ADDR
// end ;
41076: GO 40989
41078: POP
41079: POP
// array := tmp ;
41080: LD_ADDR_VAR 0 1
41084: PUSH
41085: LD_VAR 0 10
41089: ST_TO_ADDR
// end ;
41090: GO 40971
41092: POP
41093: POP
// result := array ;
41094: LD_ADDR_VAR 0 5
41098: PUSH
41099: LD_VAR 0 1
41103: ST_TO_ADDR
// end ;
41104: LD_VAR 0 5
41108: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41109: LD_INT 0
41111: PPUSH
41112: PPUSH
// result := 0 ;
41113: LD_ADDR_VAR 0 3
41117: PUSH
41118: LD_INT 0
41120: ST_TO_ADDR
// if not array or not value in array then
41121: LD_VAR 0 1
41125: NOT
41126: PUSH
41127: LD_VAR 0 2
41131: PUSH
41132: LD_VAR 0 1
41136: IN
41137: NOT
41138: OR
41139: IFFALSE 41143
// exit ;
41141: GO 41197
// for i = 1 to array do
41143: LD_ADDR_VAR 0 4
41147: PUSH
41148: DOUBLE
41149: LD_INT 1
41151: DEC
41152: ST_TO_ADDR
41153: LD_VAR 0 1
41157: PUSH
41158: FOR_TO
41159: IFFALSE 41195
// if value = array [ i ] then
41161: LD_VAR 0 2
41165: PUSH
41166: LD_VAR 0 1
41170: PUSH
41171: LD_VAR 0 4
41175: ARRAY
41176: EQUAL
41177: IFFALSE 41193
// begin result := i ;
41179: LD_ADDR_VAR 0 3
41183: PUSH
41184: LD_VAR 0 4
41188: ST_TO_ADDR
// exit ;
41189: POP
41190: POP
41191: GO 41197
// end ;
41193: GO 41158
41195: POP
41196: POP
// end ;
41197: LD_VAR 0 3
41201: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41202: LD_INT 0
41204: PPUSH
// vc_chassis := chassis ;
41205: LD_ADDR_OWVAR 37
41209: PUSH
41210: LD_VAR 0 1
41214: ST_TO_ADDR
// vc_engine := engine ;
41215: LD_ADDR_OWVAR 39
41219: PUSH
41220: LD_VAR 0 2
41224: ST_TO_ADDR
// vc_control := control ;
41225: LD_ADDR_OWVAR 38
41229: PUSH
41230: LD_VAR 0 3
41234: ST_TO_ADDR
// vc_weapon := weapon ;
41235: LD_ADDR_OWVAR 40
41239: PUSH
41240: LD_VAR 0 4
41244: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41245: LD_ADDR_OWVAR 41
41249: PUSH
41250: LD_VAR 0 5
41254: ST_TO_ADDR
// end ;
41255: LD_VAR 0 6
41259: RET
// export function WantPlant ( unit ) ; var task ; begin
41260: LD_INT 0
41262: PPUSH
41263: PPUSH
// result := false ;
41264: LD_ADDR_VAR 0 2
41268: PUSH
41269: LD_INT 0
41271: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41272: LD_ADDR_VAR 0 3
41276: PUSH
41277: LD_VAR 0 1
41281: PPUSH
41282: CALL_OW 437
41286: ST_TO_ADDR
// if task then
41287: LD_VAR 0 3
41291: IFFALSE 41319
// if task [ 1 ] [ 1 ] = p then
41293: LD_VAR 0 3
41297: PUSH
41298: LD_INT 1
41300: ARRAY
41301: PUSH
41302: LD_INT 1
41304: ARRAY
41305: PUSH
41306: LD_STRING p
41308: EQUAL
41309: IFFALSE 41319
// result := true ;
41311: LD_ADDR_VAR 0 2
41315: PUSH
41316: LD_INT 1
41318: ST_TO_ADDR
// end ;
41319: LD_VAR 0 2
41323: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41324: LD_INT 0
41326: PPUSH
41327: PPUSH
41328: PPUSH
41329: PPUSH
// if pos < 1 then
41330: LD_VAR 0 2
41334: PUSH
41335: LD_INT 1
41337: LESS
41338: IFFALSE 41342
// exit ;
41340: GO 41645
// if pos = 1 then
41342: LD_VAR 0 2
41346: PUSH
41347: LD_INT 1
41349: EQUAL
41350: IFFALSE 41383
// result := Replace ( arr , pos [ 1 ] , value ) else
41352: LD_ADDR_VAR 0 4
41356: PUSH
41357: LD_VAR 0 1
41361: PPUSH
41362: LD_VAR 0 2
41366: PUSH
41367: LD_INT 1
41369: ARRAY
41370: PPUSH
41371: LD_VAR 0 3
41375: PPUSH
41376: CALL_OW 1
41380: ST_TO_ADDR
41381: GO 41645
// begin tmp := arr ;
41383: LD_ADDR_VAR 0 6
41387: PUSH
41388: LD_VAR 0 1
41392: ST_TO_ADDR
// s_arr := [ tmp ] ;
41393: LD_ADDR_VAR 0 7
41397: PUSH
41398: LD_VAR 0 6
41402: PUSH
41403: EMPTY
41404: LIST
41405: ST_TO_ADDR
// for i = 1 to pos - 1 do
41406: LD_ADDR_VAR 0 5
41410: PUSH
41411: DOUBLE
41412: LD_INT 1
41414: DEC
41415: ST_TO_ADDR
41416: LD_VAR 0 2
41420: PUSH
41421: LD_INT 1
41423: MINUS
41424: PUSH
41425: FOR_TO
41426: IFFALSE 41471
// begin tmp := tmp [ pos [ i ] ] ;
41428: LD_ADDR_VAR 0 6
41432: PUSH
41433: LD_VAR 0 6
41437: PUSH
41438: LD_VAR 0 2
41442: PUSH
41443: LD_VAR 0 5
41447: ARRAY
41448: ARRAY
41449: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41450: LD_ADDR_VAR 0 7
41454: PUSH
41455: LD_VAR 0 7
41459: PUSH
41460: LD_VAR 0 6
41464: PUSH
41465: EMPTY
41466: LIST
41467: ADD
41468: ST_TO_ADDR
// end ;
41469: GO 41425
41471: POP
41472: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41473: LD_ADDR_VAR 0 6
41477: PUSH
41478: LD_VAR 0 6
41482: PPUSH
41483: LD_VAR 0 2
41487: PUSH
41488: LD_VAR 0 2
41492: ARRAY
41493: PPUSH
41494: LD_VAR 0 3
41498: PPUSH
41499: CALL_OW 1
41503: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41504: LD_ADDR_VAR 0 7
41508: PUSH
41509: LD_VAR 0 7
41513: PPUSH
41514: LD_VAR 0 7
41518: PPUSH
41519: LD_VAR 0 6
41523: PPUSH
41524: CALL_OW 1
41528: ST_TO_ADDR
// for i = s_arr downto 2 do
41529: LD_ADDR_VAR 0 5
41533: PUSH
41534: DOUBLE
41535: LD_VAR 0 7
41539: INC
41540: ST_TO_ADDR
41541: LD_INT 2
41543: PUSH
41544: FOR_DOWNTO
41545: IFFALSE 41629
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41547: LD_ADDR_VAR 0 6
41551: PUSH
41552: LD_VAR 0 7
41556: PUSH
41557: LD_VAR 0 5
41561: PUSH
41562: LD_INT 1
41564: MINUS
41565: ARRAY
41566: PPUSH
41567: LD_VAR 0 2
41571: PUSH
41572: LD_VAR 0 5
41576: PUSH
41577: LD_INT 1
41579: MINUS
41580: ARRAY
41581: PPUSH
41582: LD_VAR 0 7
41586: PUSH
41587: LD_VAR 0 5
41591: ARRAY
41592: PPUSH
41593: CALL_OW 1
41597: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41598: LD_ADDR_VAR 0 7
41602: PUSH
41603: LD_VAR 0 7
41607: PPUSH
41608: LD_VAR 0 5
41612: PUSH
41613: LD_INT 1
41615: MINUS
41616: PPUSH
41617: LD_VAR 0 6
41621: PPUSH
41622: CALL_OW 1
41626: ST_TO_ADDR
// end ;
41627: GO 41544
41629: POP
41630: POP
// result := s_arr [ 1 ] ;
41631: LD_ADDR_VAR 0 4
41635: PUSH
41636: LD_VAR 0 7
41640: PUSH
41641: LD_INT 1
41643: ARRAY
41644: ST_TO_ADDR
// end ; end ;
41645: LD_VAR 0 4
41649: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41650: LD_INT 0
41652: PPUSH
41653: PPUSH
// if not list then
41654: LD_VAR 0 1
41658: NOT
41659: IFFALSE 41663
// exit ;
41661: GO 41754
// i := list [ pos1 ] ;
41663: LD_ADDR_VAR 0 5
41667: PUSH
41668: LD_VAR 0 1
41672: PUSH
41673: LD_VAR 0 2
41677: ARRAY
41678: ST_TO_ADDR
// if not i then
41679: LD_VAR 0 5
41683: NOT
41684: IFFALSE 41688
// exit ;
41686: GO 41754
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41688: LD_ADDR_VAR 0 1
41692: PUSH
41693: LD_VAR 0 1
41697: PPUSH
41698: LD_VAR 0 2
41702: PPUSH
41703: LD_VAR 0 1
41707: PUSH
41708: LD_VAR 0 3
41712: ARRAY
41713: PPUSH
41714: CALL_OW 1
41718: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41719: LD_ADDR_VAR 0 1
41723: PUSH
41724: LD_VAR 0 1
41728: PPUSH
41729: LD_VAR 0 3
41733: PPUSH
41734: LD_VAR 0 5
41738: PPUSH
41739: CALL_OW 1
41743: ST_TO_ADDR
// result := list ;
41744: LD_ADDR_VAR 0 4
41748: PUSH
41749: LD_VAR 0 1
41753: ST_TO_ADDR
// end ;
41754: LD_VAR 0 4
41758: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41759: LD_INT 0
41761: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41762: LD_ADDR_VAR 0 5
41766: PUSH
41767: LD_VAR 0 1
41771: PPUSH
41772: CALL_OW 250
41776: PPUSH
41777: LD_VAR 0 1
41781: PPUSH
41782: CALL_OW 251
41786: PPUSH
41787: LD_VAR 0 2
41791: PPUSH
41792: LD_VAR 0 3
41796: PPUSH
41797: LD_VAR 0 4
41801: PPUSH
41802: CALL 41812 0 5
41806: ST_TO_ADDR
// end ;
41807: LD_VAR 0 5
41811: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41812: LD_INT 0
41814: PPUSH
41815: PPUSH
41816: PPUSH
41817: PPUSH
// if not list then
41818: LD_VAR 0 3
41822: NOT
41823: IFFALSE 41827
// exit ;
41825: GO 42215
// result := [ ] ;
41827: LD_ADDR_VAR 0 6
41831: PUSH
41832: EMPTY
41833: ST_TO_ADDR
// for i in list do
41834: LD_ADDR_VAR 0 7
41838: PUSH
41839: LD_VAR 0 3
41843: PUSH
41844: FOR_IN
41845: IFFALSE 42047
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41847: LD_ADDR_VAR 0 9
41851: PUSH
41852: LD_VAR 0 7
41856: PPUSH
41857: LD_VAR 0 1
41861: PPUSH
41862: LD_VAR 0 2
41866: PPUSH
41867: CALL_OW 297
41871: ST_TO_ADDR
// if not result then
41872: LD_VAR 0 6
41876: NOT
41877: IFFALSE 41903
// result := [ [ i , tmp ] ] else
41879: LD_ADDR_VAR 0 6
41883: PUSH
41884: LD_VAR 0 7
41888: PUSH
41889: LD_VAR 0 9
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: EMPTY
41899: LIST
41900: ST_TO_ADDR
41901: GO 42045
// begin if result [ result ] [ 2 ] < tmp then
41903: LD_VAR 0 6
41907: PUSH
41908: LD_VAR 0 6
41912: ARRAY
41913: PUSH
41914: LD_INT 2
41916: ARRAY
41917: PUSH
41918: LD_VAR 0 9
41922: LESS
41923: IFFALSE 41965
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41925: LD_ADDR_VAR 0 6
41929: PUSH
41930: LD_VAR 0 6
41934: PPUSH
41935: LD_VAR 0 6
41939: PUSH
41940: LD_INT 1
41942: PLUS
41943: PPUSH
41944: LD_VAR 0 7
41948: PUSH
41949: LD_VAR 0 9
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PPUSH
41958: CALL_OW 2
41962: ST_TO_ADDR
41963: GO 42045
// for j = 1 to result do
41965: LD_ADDR_VAR 0 8
41969: PUSH
41970: DOUBLE
41971: LD_INT 1
41973: DEC
41974: ST_TO_ADDR
41975: LD_VAR 0 6
41979: PUSH
41980: FOR_TO
41981: IFFALSE 42043
// begin if tmp < result [ j ] [ 2 ] then
41983: LD_VAR 0 9
41987: PUSH
41988: LD_VAR 0 6
41992: PUSH
41993: LD_VAR 0 8
41997: ARRAY
41998: PUSH
41999: LD_INT 2
42001: ARRAY
42002: LESS
42003: IFFALSE 42041
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42005: LD_ADDR_VAR 0 6
42009: PUSH
42010: LD_VAR 0 6
42014: PPUSH
42015: LD_VAR 0 8
42019: PPUSH
42020: LD_VAR 0 7
42024: PUSH
42025: LD_VAR 0 9
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PPUSH
42034: CALL_OW 2
42038: ST_TO_ADDR
// break ;
42039: GO 42043
// end ; end ;
42041: GO 41980
42043: POP
42044: POP
// end ; end ;
42045: GO 41844
42047: POP
42048: POP
// if result and not asc then
42049: LD_VAR 0 6
42053: PUSH
42054: LD_VAR 0 4
42058: NOT
42059: AND
42060: IFFALSE 42135
// begin tmp := result ;
42062: LD_ADDR_VAR 0 9
42066: PUSH
42067: LD_VAR 0 6
42071: ST_TO_ADDR
// for i = tmp downto 1 do
42072: LD_ADDR_VAR 0 7
42076: PUSH
42077: DOUBLE
42078: LD_VAR 0 9
42082: INC
42083: ST_TO_ADDR
42084: LD_INT 1
42086: PUSH
42087: FOR_DOWNTO
42088: IFFALSE 42133
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42090: LD_ADDR_VAR 0 6
42094: PUSH
42095: LD_VAR 0 6
42099: PPUSH
42100: LD_VAR 0 9
42104: PUSH
42105: LD_VAR 0 7
42109: MINUS
42110: PUSH
42111: LD_INT 1
42113: PLUS
42114: PPUSH
42115: LD_VAR 0 9
42119: PUSH
42120: LD_VAR 0 7
42124: ARRAY
42125: PPUSH
42126: CALL_OW 1
42130: ST_TO_ADDR
42131: GO 42087
42133: POP
42134: POP
// end ; tmp := [ ] ;
42135: LD_ADDR_VAR 0 9
42139: PUSH
42140: EMPTY
42141: ST_TO_ADDR
// if mode then
42142: LD_VAR 0 5
42146: IFFALSE 42215
// begin for i = 1 to result do
42148: LD_ADDR_VAR 0 7
42152: PUSH
42153: DOUBLE
42154: LD_INT 1
42156: DEC
42157: ST_TO_ADDR
42158: LD_VAR 0 6
42162: PUSH
42163: FOR_TO
42164: IFFALSE 42203
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42166: LD_ADDR_VAR 0 9
42170: PUSH
42171: LD_VAR 0 9
42175: PPUSH
42176: LD_VAR 0 7
42180: PPUSH
42181: LD_VAR 0 6
42185: PUSH
42186: LD_VAR 0 7
42190: ARRAY
42191: PUSH
42192: LD_INT 1
42194: ARRAY
42195: PPUSH
42196: CALL_OW 1
42200: ST_TO_ADDR
42201: GO 42163
42203: POP
42204: POP
// result := tmp ;
42205: LD_ADDR_VAR 0 6
42209: PUSH
42210: LD_VAR 0 9
42214: ST_TO_ADDR
// end ; end ;
42215: LD_VAR 0 6
42219: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42220: LD_INT 0
42222: PPUSH
42223: PPUSH
42224: PPUSH
42225: PPUSH
42226: PPUSH
42227: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42228: LD_ADDR_VAR 0 5
42232: PUSH
42233: LD_INT 0
42235: PUSH
42236: LD_INT 0
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: EMPTY
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: ST_TO_ADDR
// if not x or not y then
42250: LD_VAR 0 2
42254: NOT
42255: PUSH
42256: LD_VAR 0 3
42260: NOT
42261: OR
42262: IFFALSE 42266
// exit ;
42264: GO 43918
// if not range then
42266: LD_VAR 0 4
42270: NOT
42271: IFFALSE 42281
// range := 10 ;
42273: LD_ADDR_VAR 0 4
42277: PUSH
42278: LD_INT 10
42280: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42281: LD_ADDR_VAR 0 8
42285: PUSH
42286: LD_INT 81
42288: PUSH
42289: LD_VAR 0 1
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 92
42300: PUSH
42301: LD_VAR 0 2
42305: PUSH
42306: LD_VAR 0 3
42310: PUSH
42311: LD_VAR 0 4
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 3
42324: PUSH
42325: LD_INT 21
42327: PUSH
42328: LD_INT 3
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: LIST
42343: PPUSH
42344: CALL_OW 69
42348: ST_TO_ADDR
// if not tmp then
42349: LD_VAR 0 8
42353: NOT
42354: IFFALSE 42358
// exit ;
42356: GO 43918
// for i in tmp do
42358: LD_ADDR_VAR 0 6
42362: PUSH
42363: LD_VAR 0 8
42367: PUSH
42368: FOR_IN
42369: IFFALSE 43893
// begin points := [ 0 , 0 , 0 ] ;
42371: LD_ADDR_VAR 0 9
42375: PUSH
42376: LD_INT 0
42378: PUSH
42379: LD_INT 0
42381: PUSH
42382: LD_INT 0
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: LIST
42389: ST_TO_ADDR
// bpoints := 1 ;
42390: LD_ADDR_VAR 0 10
42394: PUSH
42395: LD_INT 1
42397: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42398: LD_VAR 0 6
42402: PPUSH
42403: CALL_OW 247
42407: PUSH
42408: LD_INT 1
42410: DOUBLE
42411: EQUAL
42412: IFTRUE 42416
42414: GO 42994
42416: POP
// begin if GetClass ( i ) = 1 then
42417: LD_VAR 0 6
42421: PPUSH
42422: CALL_OW 257
42426: PUSH
42427: LD_INT 1
42429: EQUAL
42430: IFFALSE 42451
// points := [ 10 , 5 , 3 ] ;
42432: LD_ADDR_VAR 0 9
42436: PUSH
42437: LD_INT 10
42439: PUSH
42440: LD_INT 5
42442: PUSH
42443: LD_INT 3
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: LIST
42450: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42451: LD_VAR 0 6
42455: PPUSH
42456: CALL_OW 257
42460: PUSH
42461: LD_INT 2
42463: PUSH
42464: LD_INT 3
42466: PUSH
42467: LD_INT 4
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: LIST
42474: IN
42475: IFFALSE 42496
// points := [ 3 , 2 , 1 ] ;
42477: LD_ADDR_VAR 0 9
42481: PUSH
42482: LD_INT 3
42484: PUSH
42485: LD_INT 2
42487: PUSH
42488: LD_INT 1
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: LIST
42495: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42496: LD_VAR 0 6
42500: PPUSH
42501: CALL_OW 257
42505: PUSH
42506: LD_INT 5
42508: EQUAL
42509: IFFALSE 42530
// points := [ 130 , 5 , 2 ] ;
42511: LD_ADDR_VAR 0 9
42515: PUSH
42516: LD_INT 130
42518: PUSH
42519: LD_INT 5
42521: PUSH
42522: LD_INT 2
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: LIST
42529: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42530: LD_VAR 0 6
42534: PPUSH
42535: CALL_OW 257
42539: PUSH
42540: LD_INT 8
42542: EQUAL
42543: IFFALSE 42564
// points := [ 35 , 35 , 30 ] ;
42545: LD_ADDR_VAR 0 9
42549: PUSH
42550: LD_INT 35
42552: PUSH
42553: LD_INT 35
42555: PUSH
42556: LD_INT 30
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: LIST
42563: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42564: LD_VAR 0 6
42568: PPUSH
42569: CALL_OW 257
42573: PUSH
42574: LD_INT 9
42576: EQUAL
42577: IFFALSE 42598
// points := [ 20 , 55 , 40 ] ;
42579: LD_ADDR_VAR 0 9
42583: PUSH
42584: LD_INT 20
42586: PUSH
42587: LD_INT 55
42589: PUSH
42590: LD_INT 40
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: LIST
42597: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42598: LD_VAR 0 6
42602: PPUSH
42603: CALL_OW 257
42607: PUSH
42608: LD_INT 12
42610: PUSH
42611: LD_INT 16
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: IN
42618: IFFALSE 42639
// points := [ 5 , 3 , 2 ] ;
42620: LD_ADDR_VAR 0 9
42624: PUSH
42625: LD_INT 5
42627: PUSH
42628: LD_INT 3
42630: PUSH
42631: LD_INT 2
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: LIST
42638: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42639: LD_VAR 0 6
42643: PPUSH
42644: CALL_OW 257
42648: PUSH
42649: LD_INT 17
42651: EQUAL
42652: IFFALSE 42673
// points := [ 100 , 50 , 75 ] ;
42654: LD_ADDR_VAR 0 9
42658: PUSH
42659: LD_INT 100
42661: PUSH
42662: LD_INT 50
42664: PUSH
42665: LD_INT 75
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: LIST
42672: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42673: LD_VAR 0 6
42677: PPUSH
42678: CALL_OW 257
42682: PUSH
42683: LD_INT 15
42685: EQUAL
42686: IFFALSE 42707
// points := [ 10 , 5 , 3 ] ;
42688: LD_ADDR_VAR 0 9
42692: PUSH
42693: LD_INT 10
42695: PUSH
42696: LD_INT 5
42698: PUSH
42699: LD_INT 3
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: LIST
42706: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42707: LD_VAR 0 6
42711: PPUSH
42712: CALL_OW 257
42716: PUSH
42717: LD_INT 14
42719: EQUAL
42720: IFFALSE 42741
// points := [ 10 , 0 , 0 ] ;
42722: LD_ADDR_VAR 0 9
42726: PUSH
42727: LD_INT 10
42729: PUSH
42730: LD_INT 0
42732: PUSH
42733: LD_INT 0
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: LIST
42740: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42741: LD_VAR 0 6
42745: PPUSH
42746: CALL_OW 257
42750: PUSH
42751: LD_INT 11
42753: EQUAL
42754: IFFALSE 42775
// points := [ 30 , 10 , 5 ] ;
42756: LD_ADDR_VAR 0 9
42760: PUSH
42761: LD_INT 30
42763: PUSH
42764: LD_INT 10
42766: PUSH
42767: LD_INT 5
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: LIST
42774: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42775: LD_VAR 0 1
42779: PPUSH
42780: LD_INT 5
42782: PPUSH
42783: CALL_OW 321
42787: PUSH
42788: LD_INT 2
42790: EQUAL
42791: IFFALSE 42808
// bpoints := bpoints * 1.8 ;
42793: LD_ADDR_VAR 0 10
42797: PUSH
42798: LD_VAR 0 10
42802: PUSH
42803: LD_REAL  1.80000000000000E+0000
42806: MUL
42807: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42808: LD_VAR 0 6
42812: PPUSH
42813: CALL_OW 257
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: LD_INT 2
42823: PUSH
42824: LD_INT 3
42826: PUSH
42827: LD_INT 4
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: IN
42836: PUSH
42837: LD_VAR 0 1
42841: PPUSH
42842: LD_INT 51
42844: PPUSH
42845: CALL_OW 321
42849: PUSH
42850: LD_INT 2
42852: EQUAL
42853: AND
42854: IFFALSE 42871
// bpoints := bpoints * 1.2 ;
42856: LD_ADDR_VAR 0 10
42860: PUSH
42861: LD_VAR 0 10
42865: PUSH
42866: LD_REAL  1.20000000000000E+0000
42869: MUL
42870: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42871: LD_VAR 0 6
42875: PPUSH
42876: CALL_OW 257
42880: PUSH
42881: LD_INT 5
42883: PUSH
42884: LD_INT 7
42886: PUSH
42887: LD_INT 9
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: LIST
42894: IN
42895: PUSH
42896: LD_VAR 0 1
42900: PPUSH
42901: LD_INT 52
42903: PPUSH
42904: CALL_OW 321
42908: PUSH
42909: LD_INT 2
42911: EQUAL
42912: AND
42913: IFFALSE 42930
// bpoints := bpoints * 1.5 ;
42915: LD_ADDR_VAR 0 10
42919: PUSH
42920: LD_VAR 0 10
42924: PUSH
42925: LD_REAL  1.50000000000000E+0000
42928: MUL
42929: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42930: LD_VAR 0 1
42934: PPUSH
42935: LD_INT 66
42937: PPUSH
42938: CALL_OW 321
42942: PUSH
42943: LD_INT 2
42945: EQUAL
42946: IFFALSE 42963
// bpoints := bpoints * 1.1 ;
42948: LD_ADDR_VAR 0 10
42952: PUSH
42953: LD_VAR 0 10
42957: PUSH
42958: LD_REAL  1.10000000000000E+0000
42961: MUL
42962: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42963: LD_ADDR_VAR 0 10
42967: PUSH
42968: LD_VAR 0 10
42972: PUSH
42973: LD_VAR 0 6
42977: PPUSH
42978: LD_INT 1
42980: PPUSH
42981: CALL_OW 259
42985: PUSH
42986: LD_REAL  1.15000000000000E+0000
42989: MUL
42990: MUL
42991: ST_TO_ADDR
// end ; unit_vehicle :
42992: GO 43822
42994: LD_INT 2
42996: DOUBLE
42997: EQUAL
42998: IFTRUE 43002
43000: GO 43810
43002: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43003: LD_VAR 0 6
43007: PPUSH
43008: CALL_OW 264
43012: PUSH
43013: LD_INT 2
43015: PUSH
43016: LD_INT 42
43018: PUSH
43019: LD_INT 24
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: LIST
43026: IN
43027: IFFALSE 43048
// points := [ 25 , 5 , 3 ] ;
43029: LD_ADDR_VAR 0 9
43033: PUSH
43034: LD_INT 25
43036: PUSH
43037: LD_INT 5
43039: PUSH
43040: LD_INT 3
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: LIST
43047: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43048: LD_VAR 0 6
43052: PPUSH
43053: CALL_OW 264
43057: PUSH
43058: LD_INT 4
43060: PUSH
43061: LD_INT 43
43063: PUSH
43064: LD_INT 25
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: LIST
43071: IN
43072: IFFALSE 43093
// points := [ 40 , 15 , 5 ] ;
43074: LD_ADDR_VAR 0 9
43078: PUSH
43079: LD_INT 40
43081: PUSH
43082: LD_INT 15
43084: PUSH
43085: LD_INT 5
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: LIST
43092: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43093: LD_VAR 0 6
43097: PPUSH
43098: CALL_OW 264
43102: PUSH
43103: LD_INT 3
43105: PUSH
43106: LD_INT 23
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: IN
43113: IFFALSE 43134
// points := [ 7 , 25 , 8 ] ;
43115: LD_ADDR_VAR 0 9
43119: PUSH
43120: LD_INT 7
43122: PUSH
43123: LD_INT 25
43125: PUSH
43126: LD_INT 8
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: LIST
43133: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43134: LD_VAR 0 6
43138: PPUSH
43139: CALL_OW 264
43143: PUSH
43144: LD_INT 5
43146: PUSH
43147: LD_INT 27
43149: PUSH
43150: LD_INT 44
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: LIST
43157: IN
43158: IFFALSE 43179
// points := [ 14 , 50 , 16 ] ;
43160: LD_ADDR_VAR 0 9
43164: PUSH
43165: LD_INT 14
43167: PUSH
43168: LD_INT 50
43170: PUSH
43171: LD_INT 16
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: LIST
43178: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43179: LD_VAR 0 6
43183: PPUSH
43184: CALL_OW 264
43188: PUSH
43189: LD_INT 6
43191: PUSH
43192: LD_INT 46
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: IN
43199: IFFALSE 43220
// points := [ 32 , 120 , 70 ] ;
43201: LD_ADDR_VAR 0 9
43205: PUSH
43206: LD_INT 32
43208: PUSH
43209: LD_INT 120
43211: PUSH
43212: LD_INT 70
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: LIST
43219: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43220: LD_VAR 0 6
43224: PPUSH
43225: CALL_OW 264
43229: PUSH
43230: LD_INT 7
43232: PUSH
43233: LD_INT 28
43235: PUSH
43236: LD_INT 45
43238: PUSH
43239: LD_EXP 126
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: IN
43250: IFFALSE 43271
// points := [ 35 , 20 , 45 ] ;
43252: LD_ADDR_VAR 0 9
43256: PUSH
43257: LD_INT 35
43259: PUSH
43260: LD_INT 20
43262: PUSH
43263: LD_INT 45
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: LIST
43270: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43271: LD_VAR 0 6
43275: PPUSH
43276: CALL_OW 264
43280: PUSH
43281: LD_INT 47
43283: PUSH
43284: EMPTY
43285: LIST
43286: IN
43287: IFFALSE 43308
// points := [ 67 , 45 , 75 ] ;
43289: LD_ADDR_VAR 0 9
43293: PUSH
43294: LD_INT 67
43296: PUSH
43297: LD_INT 45
43299: PUSH
43300: LD_INT 75
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: LIST
43307: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43308: LD_VAR 0 6
43312: PPUSH
43313: CALL_OW 264
43317: PUSH
43318: LD_INT 26
43320: PUSH
43321: EMPTY
43322: LIST
43323: IN
43324: IFFALSE 43345
// points := [ 120 , 30 , 80 ] ;
43326: LD_ADDR_VAR 0 9
43330: PUSH
43331: LD_INT 120
43333: PUSH
43334: LD_INT 30
43336: PUSH
43337: LD_INT 80
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: LIST
43344: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43345: LD_VAR 0 6
43349: PPUSH
43350: CALL_OW 264
43354: PUSH
43355: LD_INT 22
43357: PUSH
43358: EMPTY
43359: LIST
43360: IN
43361: IFFALSE 43382
// points := [ 40 , 1 , 1 ] ;
43363: LD_ADDR_VAR 0 9
43367: PUSH
43368: LD_INT 40
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: LD_INT 1
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: LIST
43381: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43382: LD_VAR 0 6
43386: PPUSH
43387: CALL_OW 264
43391: PUSH
43392: LD_INT 29
43394: PUSH
43395: EMPTY
43396: LIST
43397: IN
43398: IFFALSE 43419
// points := [ 70 , 200 , 400 ] ;
43400: LD_ADDR_VAR 0 9
43404: PUSH
43405: LD_INT 70
43407: PUSH
43408: LD_INT 200
43410: PUSH
43411: LD_INT 400
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: LIST
43418: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43419: LD_VAR 0 6
43423: PPUSH
43424: CALL_OW 264
43428: PUSH
43429: LD_INT 14
43431: PUSH
43432: LD_INT 53
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: IN
43439: IFFALSE 43460
// points := [ 40 , 10 , 20 ] ;
43441: LD_ADDR_VAR 0 9
43445: PUSH
43446: LD_INT 40
43448: PUSH
43449: LD_INT 10
43451: PUSH
43452: LD_INT 20
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: LIST
43459: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43460: LD_VAR 0 6
43464: PPUSH
43465: CALL_OW 264
43469: PUSH
43470: LD_INT 9
43472: PUSH
43473: EMPTY
43474: LIST
43475: IN
43476: IFFALSE 43497
// points := [ 5 , 70 , 20 ] ;
43478: LD_ADDR_VAR 0 9
43482: PUSH
43483: LD_INT 5
43485: PUSH
43486: LD_INT 70
43488: PUSH
43489: LD_INT 20
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: LIST
43496: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43497: LD_VAR 0 6
43501: PPUSH
43502: CALL_OW 264
43506: PUSH
43507: LD_INT 10
43509: PUSH
43510: EMPTY
43511: LIST
43512: IN
43513: IFFALSE 43534
// points := [ 35 , 110 , 70 ] ;
43515: LD_ADDR_VAR 0 9
43519: PUSH
43520: LD_INT 35
43522: PUSH
43523: LD_INT 110
43525: PUSH
43526: LD_INT 70
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: LIST
43533: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43534: LD_VAR 0 6
43538: PPUSH
43539: CALL_OW 265
43543: PUSH
43544: LD_INT 25
43546: EQUAL
43547: IFFALSE 43568
// points := [ 80 , 65 , 100 ] ;
43549: LD_ADDR_VAR 0 9
43553: PUSH
43554: LD_INT 80
43556: PUSH
43557: LD_INT 65
43559: PUSH
43560: LD_INT 100
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: LIST
43567: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43568: LD_VAR 0 6
43572: PPUSH
43573: CALL_OW 263
43577: PUSH
43578: LD_INT 1
43580: EQUAL
43581: IFFALSE 43616
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43583: LD_ADDR_VAR 0 10
43587: PUSH
43588: LD_VAR 0 10
43592: PUSH
43593: LD_VAR 0 6
43597: PPUSH
43598: CALL_OW 311
43602: PPUSH
43603: LD_INT 3
43605: PPUSH
43606: CALL_OW 259
43610: PUSH
43611: LD_INT 4
43613: MUL
43614: MUL
43615: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43616: LD_VAR 0 6
43620: PPUSH
43621: CALL_OW 263
43625: PUSH
43626: LD_INT 2
43628: EQUAL
43629: IFFALSE 43680
// begin j := IsControledBy ( i ) ;
43631: LD_ADDR_VAR 0 7
43635: PUSH
43636: LD_VAR 0 6
43640: PPUSH
43641: CALL_OW 312
43645: ST_TO_ADDR
// if j then
43646: LD_VAR 0 7
43650: IFFALSE 43680
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43652: LD_ADDR_VAR 0 10
43656: PUSH
43657: LD_VAR 0 10
43661: PUSH
43662: LD_VAR 0 7
43666: PPUSH
43667: LD_INT 3
43669: PPUSH
43670: CALL_OW 259
43674: PUSH
43675: LD_INT 3
43677: MUL
43678: MUL
43679: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43680: LD_VAR 0 6
43684: PPUSH
43685: CALL_OW 264
43689: PUSH
43690: LD_INT 5
43692: PUSH
43693: LD_INT 6
43695: PUSH
43696: LD_INT 46
43698: PUSH
43699: LD_INT 44
43701: PUSH
43702: LD_INT 47
43704: PUSH
43705: LD_INT 45
43707: PUSH
43708: LD_INT 28
43710: PUSH
43711: LD_INT 7
43713: PUSH
43714: LD_INT 27
43716: PUSH
43717: LD_INT 29
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: IN
43732: PUSH
43733: LD_VAR 0 1
43737: PPUSH
43738: LD_INT 52
43740: PPUSH
43741: CALL_OW 321
43745: PUSH
43746: LD_INT 2
43748: EQUAL
43749: AND
43750: IFFALSE 43767
// bpoints := bpoints * 1.2 ;
43752: LD_ADDR_VAR 0 10
43756: PUSH
43757: LD_VAR 0 10
43761: PUSH
43762: LD_REAL  1.20000000000000E+0000
43765: MUL
43766: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43767: LD_VAR 0 6
43771: PPUSH
43772: CALL_OW 264
43776: PUSH
43777: LD_INT 6
43779: PUSH
43780: LD_INT 46
43782: PUSH
43783: LD_INT 47
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: LIST
43790: IN
43791: IFFALSE 43808
// bpoints := bpoints * 1.2 ;
43793: LD_ADDR_VAR 0 10
43797: PUSH
43798: LD_VAR 0 10
43802: PUSH
43803: LD_REAL  1.20000000000000E+0000
43806: MUL
43807: ST_TO_ADDR
// end ; unit_building :
43808: GO 43822
43810: LD_INT 3
43812: DOUBLE
43813: EQUAL
43814: IFTRUE 43818
43816: GO 43821
43818: POP
// ; end ;
43819: GO 43822
43821: POP
// for j = 1 to 3 do
43822: LD_ADDR_VAR 0 7
43826: PUSH
43827: DOUBLE
43828: LD_INT 1
43830: DEC
43831: ST_TO_ADDR
43832: LD_INT 3
43834: PUSH
43835: FOR_TO
43836: IFFALSE 43889
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43838: LD_ADDR_VAR 0 5
43842: PUSH
43843: LD_VAR 0 5
43847: PPUSH
43848: LD_VAR 0 7
43852: PPUSH
43853: LD_VAR 0 5
43857: PUSH
43858: LD_VAR 0 7
43862: ARRAY
43863: PUSH
43864: LD_VAR 0 9
43868: PUSH
43869: LD_VAR 0 7
43873: ARRAY
43874: PUSH
43875: LD_VAR 0 10
43879: MUL
43880: PLUS
43881: PPUSH
43882: CALL_OW 1
43886: ST_TO_ADDR
43887: GO 43835
43889: POP
43890: POP
// end ;
43891: GO 42368
43893: POP
43894: POP
// result := Replace ( result , 4 , tmp ) ;
43895: LD_ADDR_VAR 0 5
43899: PUSH
43900: LD_VAR 0 5
43904: PPUSH
43905: LD_INT 4
43907: PPUSH
43908: LD_VAR 0 8
43912: PPUSH
43913: CALL_OW 1
43917: ST_TO_ADDR
// end ;
43918: LD_VAR 0 5
43922: RET
// export function DangerAtRange ( unit , range ) ; begin
43923: LD_INT 0
43925: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43926: LD_ADDR_VAR 0 3
43930: PUSH
43931: LD_VAR 0 1
43935: PPUSH
43936: CALL_OW 255
43940: PPUSH
43941: LD_VAR 0 1
43945: PPUSH
43946: CALL_OW 250
43950: PPUSH
43951: LD_VAR 0 1
43955: PPUSH
43956: CALL_OW 251
43960: PPUSH
43961: LD_VAR 0 2
43965: PPUSH
43966: CALL 42220 0 4
43970: ST_TO_ADDR
// end ;
43971: LD_VAR 0 3
43975: RET
// export function DangerInArea ( side , area ) ; begin
43976: LD_INT 0
43978: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43979: LD_ADDR_VAR 0 3
43983: PUSH
43984: LD_VAR 0 2
43988: PPUSH
43989: LD_INT 81
43991: PUSH
43992: LD_VAR 0 1
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PPUSH
44001: CALL_OW 70
44005: ST_TO_ADDR
// end ;
44006: LD_VAR 0 3
44010: RET
// export function IsExtension ( b ) ; begin
44011: LD_INT 0
44013: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44014: LD_ADDR_VAR 0 2
44018: PUSH
44019: LD_VAR 0 1
44023: PUSH
44024: LD_INT 23
44026: PUSH
44027: LD_INT 20
44029: PUSH
44030: LD_INT 22
44032: PUSH
44033: LD_INT 17
44035: PUSH
44036: LD_INT 24
44038: PUSH
44039: LD_INT 21
44041: PUSH
44042: LD_INT 19
44044: PUSH
44045: LD_INT 16
44047: PUSH
44048: LD_INT 25
44050: PUSH
44051: LD_INT 18
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: IN
44066: ST_TO_ADDR
// end ;
44067: LD_VAR 0 2
44071: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44072: LD_INT 0
44074: PPUSH
44075: PPUSH
44076: PPUSH
// result := [ ] ;
44077: LD_ADDR_VAR 0 4
44081: PUSH
44082: EMPTY
44083: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44084: LD_ADDR_VAR 0 5
44088: PUSH
44089: LD_VAR 0 2
44093: PPUSH
44094: LD_INT 21
44096: PUSH
44097: LD_INT 3
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PPUSH
44104: CALL_OW 70
44108: ST_TO_ADDR
// if not tmp then
44109: LD_VAR 0 5
44113: NOT
44114: IFFALSE 44118
// exit ;
44116: GO 44182
// if checkLink then
44118: LD_VAR 0 3
44122: IFFALSE 44172
// begin for i in tmp do
44124: LD_ADDR_VAR 0 6
44128: PUSH
44129: LD_VAR 0 5
44133: PUSH
44134: FOR_IN
44135: IFFALSE 44170
// if GetBase ( i ) <> base then
44137: LD_VAR 0 6
44141: PPUSH
44142: CALL_OW 274
44146: PUSH
44147: LD_VAR 0 1
44151: NONEQUAL
44152: IFFALSE 44168
// ComLinkToBase ( base , i ) ;
44154: LD_VAR 0 1
44158: PPUSH
44159: LD_VAR 0 6
44163: PPUSH
44164: CALL_OW 169
44168: GO 44134
44170: POP
44171: POP
// end ; result := tmp ;
44172: LD_ADDR_VAR 0 4
44176: PUSH
44177: LD_VAR 0 5
44181: ST_TO_ADDR
// end ;
44182: LD_VAR 0 4
44186: RET
// export function ComComplete ( units , b ) ; var i ; begin
44187: LD_INT 0
44189: PPUSH
44190: PPUSH
// if not units then
44191: LD_VAR 0 1
44195: NOT
44196: IFFALSE 44200
// exit ;
44198: GO 44290
// for i in units do
44200: LD_ADDR_VAR 0 4
44204: PUSH
44205: LD_VAR 0 1
44209: PUSH
44210: FOR_IN
44211: IFFALSE 44288
// if BuildingStatus ( b ) = bs_build then
44213: LD_VAR 0 2
44217: PPUSH
44218: CALL_OW 461
44222: PUSH
44223: LD_INT 1
44225: EQUAL
44226: IFFALSE 44286
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44228: LD_VAR 0 4
44232: PPUSH
44233: LD_STRING h
44235: PUSH
44236: LD_VAR 0 2
44240: PPUSH
44241: CALL_OW 250
44245: PUSH
44246: LD_VAR 0 2
44250: PPUSH
44251: CALL_OW 251
44255: PUSH
44256: LD_VAR 0 2
44260: PUSH
44261: LD_INT 0
44263: PUSH
44264: LD_INT 0
44266: PUSH
44267: LD_INT 0
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: PUSH
44279: EMPTY
44280: LIST
44281: PPUSH
44282: CALL_OW 446
44286: GO 44210
44288: POP
44289: POP
// end ;
44290: LD_VAR 0 3
44294: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44295: LD_INT 0
44297: PPUSH
44298: PPUSH
44299: PPUSH
44300: PPUSH
44301: PPUSH
44302: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44303: LD_VAR 0 1
44307: NOT
44308: PUSH
44309: LD_VAR 0 1
44313: PPUSH
44314: CALL_OW 263
44318: PUSH
44319: LD_INT 2
44321: NONEQUAL
44322: OR
44323: IFFALSE 44327
// exit ;
44325: GO 44643
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44327: LD_ADDR_VAR 0 6
44331: PUSH
44332: LD_INT 22
44334: PUSH
44335: LD_VAR 0 1
44339: PPUSH
44340: CALL_OW 255
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 2
44351: PUSH
44352: LD_INT 30
44354: PUSH
44355: LD_INT 36
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 34
44364: PUSH
44365: LD_INT 31
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: LIST
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PPUSH
44381: CALL_OW 69
44385: ST_TO_ADDR
// if not tmp then
44386: LD_VAR 0 6
44390: NOT
44391: IFFALSE 44395
// exit ;
44393: GO 44643
// result := [ ] ;
44395: LD_ADDR_VAR 0 2
44399: PUSH
44400: EMPTY
44401: ST_TO_ADDR
// for i in tmp do
44402: LD_ADDR_VAR 0 3
44406: PUSH
44407: LD_VAR 0 6
44411: PUSH
44412: FOR_IN
44413: IFFALSE 44484
// begin t := UnitsInside ( i ) ;
44415: LD_ADDR_VAR 0 4
44419: PUSH
44420: LD_VAR 0 3
44424: PPUSH
44425: CALL_OW 313
44429: ST_TO_ADDR
// if t then
44430: LD_VAR 0 4
44434: IFFALSE 44482
// for j in t do
44436: LD_ADDR_VAR 0 7
44440: PUSH
44441: LD_VAR 0 4
44445: PUSH
44446: FOR_IN
44447: IFFALSE 44480
// result := Replace ( result , result + 1 , j ) ;
44449: LD_ADDR_VAR 0 2
44453: PUSH
44454: LD_VAR 0 2
44458: PPUSH
44459: LD_VAR 0 2
44463: PUSH
44464: LD_INT 1
44466: PLUS
44467: PPUSH
44468: LD_VAR 0 7
44472: PPUSH
44473: CALL_OW 1
44477: ST_TO_ADDR
44478: GO 44446
44480: POP
44481: POP
// end ;
44482: GO 44412
44484: POP
44485: POP
// if not result then
44486: LD_VAR 0 2
44490: NOT
44491: IFFALSE 44495
// exit ;
44493: GO 44643
// mech := result [ 1 ] ;
44495: LD_ADDR_VAR 0 5
44499: PUSH
44500: LD_VAR 0 2
44504: PUSH
44505: LD_INT 1
44507: ARRAY
44508: ST_TO_ADDR
// if result > 1 then
44509: LD_VAR 0 2
44513: PUSH
44514: LD_INT 1
44516: GREATER
44517: IFFALSE 44629
// begin for i = 2 to result do
44519: LD_ADDR_VAR 0 3
44523: PUSH
44524: DOUBLE
44525: LD_INT 2
44527: DEC
44528: ST_TO_ADDR
44529: LD_VAR 0 2
44533: PUSH
44534: FOR_TO
44535: IFFALSE 44627
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44537: LD_ADDR_VAR 0 4
44541: PUSH
44542: LD_VAR 0 2
44546: PUSH
44547: LD_VAR 0 3
44551: ARRAY
44552: PPUSH
44553: LD_INT 3
44555: PPUSH
44556: CALL_OW 259
44560: PUSH
44561: LD_VAR 0 2
44565: PUSH
44566: LD_VAR 0 3
44570: ARRAY
44571: PPUSH
44572: CALL_OW 432
44576: MINUS
44577: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44578: LD_VAR 0 4
44582: PUSH
44583: LD_VAR 0 5
44587: PPUSH
44588: LD_INT 3
44590: PPUSH
44591: CALL_OW 259
44595: PUSH
44596: LD_VAR 0 5
44600: PPUSH
44601: CALL_OW 432
44605: MINUS
44606: GREATEREQUAL
44607: IFFALSE 44625
// mech := result [ i ] ;
44609: LD_ADDR_VAR 0 5
44613: PUSH
44614: LD_VAR 0 2
44618: PUSH
44619: LD_VAR 0 3
44623: ARRAY
44624: ST_TO_ADDR
// end ;
44625: GO 44534
44627: POP
44628: POP
// end ; ComLinkTo ( vehicle , mech ) ;
44629: LD_VAR 0 1
44633: PPUSH
44634: LD_VAR 0 5
44638: PPUSH
44639: CALL_OW 135
// end ;
44643: LD_VAR 0 2
44647: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44648: LD_INT 0
44650: PPUSH
44651: PPUSH
44652: PPUSH
44653: PPUSH
44654: PPUSH
44655: PPUSH
44656: PPUSH
44657: PPUSH
44658: PPUSH
44659: PPUSH
44660: PPUSH
44661: PPUSH
44662: PPUSH
// result := [ ] ;
44663: LD_ADDR_VAR 0 7
44667: PUSH
44668: EMPTY
44669: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44670: LD_VAR 0 1
44674: PPUSH
44675: CALL_OW 266
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: LD_INT 1
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: IN
44690: NOT
44691: IFFALSE 44695
// exit ;
44693: GO 46329
// if name then
44695: LD_VAR 0 3
44699: IFFALSE 44715
// SetBName ( base_dep , name ) ;
44701: LD_VAR 0 1
44705: PPUSH
44706: LD_VAR 0 3
44710: PPUSH
44711: CALL_OW 500
// base := GetBase ( base_dep ) ;
44715: LD_ADDR_VAR 0 15
44719: PUSH
44720: LD_VAR 0 1
44724: PPUSH
44725: CALL_OW 274
44729: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44730: LD_ADDR_VAR 0 16
44734: PUSH
44735: LD_VAR 0 1
44739: PPUSH
44740: CALL_OW 255
44744: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44745: LD_ADDR_VAR 0 17
44749: PUSH
44750: LD_VAR 0 1
44754: PPUSH
44755: CALL_OW 248
44759: ST_TO_ADDR
// if sources then
44760: LD_VAR 0 5
44764: IFFALSE 44811
// for i = 1 to 3 do
44766: LD_ADDR_VAR 0 8
44770: PUSH
44771: DOUBLE
44772: LD_INT 1
44774: DEC
44775: ST_TO_ADDR
44776: LD_INT 3
44778: PUSH
44779: FOR_TO
44780: IFFALSE 44809
// AddResourceType ( base , i , sources [ i ] ) ;
44782: LD_VAR 0 15
44786: PPUSH
44787: LD_VAR 0 8
44791: PPUSH
44792: LD_VAR 0 5
44796: PUSH
44797: LD_VAR 0 8
44801: ARRAY
44802: PPUSH
44803: CALL_OW 276
44807: GO 44779
44809: POP
44810: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
44811: LD_ADDR_VAR 0 18
44815: PUSH
44816: LD_VAR 0 15
44820: PPUSH
44821: LD_VAR 0 2
44825: PPUSH
44826: LD_INT 1
44828: PPUSH
44829: CALL 44072 0 3
44833: ST_TO_ADDR
// InitHc ;
44834: CALL_OW 19
// InitUc ;
44838: CALL_OW 18
// uc_side := side ;
44842: LD_ADDR_OWVAR 20
44846: PUSH
44847: LD_VAR 0 16
44851: ST_TO_ADDR
// uc_nation := nation ;
44852: LD_ADDR_OWVAR 21
44856: PUSH
44857: LD_VAR 0 17
44861: ST_TO_ADDR
// if buildings then
44862: LD_VAR 0 18
44866: IFFALSE 46188
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44868: LD_ADDR_VAR 0 19
44872: PUSH
44873: LD_VAR 0 18
44877: PPUSH
44878: LD_INT 2
44880: PUSH
44881: LD_INT 30
44883: PUSH
44884: LD_INT 29
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 30
44893: PUSH
44894: LD_INT 30
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: LIST
44905: PPUSH
44906: CALL_OW 72
44910: ST_TO_ADDR
// if tmp then
44911: LD_VAR 0 19
44915: IFFALSE 44963
// for i in tmp do
44917: LD_ADDR_VAR 0 8
44921: PUSH
44922: LD_VAR 0 19
44926: PUSH
44927: FOR_IN
44928: IFFALSE 44961
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44930: LD_VAR 0 8
44934: PPUSH
44935: CALL_OW 250
44939: PPUSH
44940: LD_VAR 0 8
44944: PPUSH
44945: CALL_OW 251
44949: PPUSH
44950: LD_VAR 0 16
44954: PPUSH
44955: CALL_OW 441
44959: GO 44927
44961: POP
44962: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44963: LD_VAR 0 18
44967: PPUSH
44968: LD_INT 2
44970: PUSH
44971: LD_INT 30
44973: PUSH
44974: LD_INT 32
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 30
44983: PUSH
44984: LD_INT 33
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: LIST
44995: PPUSH
44996: CALL_OW 72
45000: IFFALSE 45088
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45002: LD_ADDR_VAR 0 8
45006: PUSH
45007: LD_VAR 0 18
45011: PPUSH
45012: LD_INT 2
45014: PUSH
45015: LD_INT 30
45017: PUSH
45018: LD_INT 32
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 30
45027: PUSH
45028: LD_INT 33
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: LIST
45039: PPUSH
45040: CALL_OW 72
45044: PUSH
45045: FOR_IN
45046: IFFALSE 45086
// begin if not GetBWeapon ( i ) then
45048: LD_VAR 0 8
45052: PPUSH
45053: CALL_OW 269
45057: NOT
45058: IFFALSE 45084
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45060: LD_VAR 0 8
45064: PPUSH
45065: LD_VAR 0 8
45069: PPUSH
45070: LD_VAR 0 2
45074: PPUSH
45075: CALL 46334 0 2
45079: PPUSH
45080: CALL_OW 431
// end ;
45084: GO 45045
45086: POP
45087: POP
// end ; for i = 1 to personel do
45088: LD_ADDR_VAR 0 8
45092: PUSH
45093: DOUBLE
45094: LD_INT 1
45096: DEC
45097: ST_TO_ADDR
45098: LD_VAR 0 6
45102: PUSH
45103: FOR_TO
45104: IFFALSE 46168
// begin if i > 4 then
45106: LD_VAR 0 8
45110: PUSH
45111: LD_INT 4
45113: GREATER
45114: IFFALSE 45118
// break ;
45116: GO 46168
// case i of 1 :
45118: LD_VAR 0 8
45122: PUSH
45123: LD_INT 1
45125: DOUBLE
45126: EQUAL
45127: IFTRUE 45131
45129: GO 45211
45131: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45132: LD_ADDR_VAR 0 12
45136: PUSH
45137: LD_VAR 0 18
45141: PPUSH
45142: LD_INT 22
45144: PUSH
45145: LD_VAR 0 16
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 58
45156: PUSH
45157: EMPTY
45158: LIST
45159: PUSH
45160: LD_INT 2
45162: PUSH
45163: LD_INT 30
45165: PUSH
45166: LD_INT 32
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 30
45175: PUSH
45176: LD_INT 4
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 30
45185: PUSH
45186: LD_INT 5
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: LIST
45203: PPUSH
45204: CALL_OW 72
45208: ST_TO_ADDR
45209: GO 45433
45211: LD_INT 2
45213: DOUBLE
45214: EQUAL
45215: IFTRUE 45219
45217: GO 45281
45219: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45220: LD_ADDR_VAR 0 12
45224: PUSH
45225: LD_VAR 0 18
45229: PPUSH
45230: LD_INT 22
45232: PUSH
45233: LD_VAR 0 16
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 2
45244: PUSH
45245: LD_INT 30
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 30
45257: PUSH
45258: LD_INT 1
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: LIST
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PPUSH
45274: CALL_OW 72
45278: ST_TO_ADDR
45279: GO 45433
45281: LD_INT 3
45283: DOUBLE
45284: EQUAL
45285: IFTRUE 45289
45287: GO 45351
45289: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45290: LD_ADDR_VAR 0 12
45294: PUSH
45295: LD_VAR 0 18
45299: PPUSH
45300: LD_INT 22
45302: PUSH
45303: LD_VAR 0 16
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 2
45314: PUSH
45315: LD_INT 30
45317: PUSH
45318: LD_INT 2
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 30
45327: PUSH
45328: LD_INT 3
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: LIST
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PPUSH
45344: CALL_OW 72
45348: ST_TO_ADDR
45349: GO 45433
45351: LD_INT 4
45353: DOUBLE
45354: EQUAL
45355: IFTRUE 45359
45357: GO 45432
45359: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45360: LD_ADDR_VAR 0 12
45364: PUSH
45365: LD_VAR 0 18
45369: PPUSH
45370: LD_INT 22
45372: PUSH
45373: LD_VAR 0 16
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 2
45384: PUSH
45385: LD_INT 30
45387: PUSH
45388: LD_INT 6
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 30
45397: PUSH
45398: LD_INT 7
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 30
45407: PUSH
45408: LD_INT 8
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PPUSH
45425: CALL_OW 72
45429: ST_TO_ADDR
45430: GO 45433
45432: POP
// if i = 1 then
45433: LD_VAR 0 8
45437: PUSH
45438: LD_INT 1
45440: EQUAL
45441: IFFALSE 45552
// begin tmp := [ ] ;
45443: LD_ADDR_VAR 0 19
45447: PUSH
45448: EMPTY
45449: ST_TO_ADDR
// for j in f do
45450: LD_ADDR_VAR 0 9
45454: PUSH
45455: LD_VAR 0 12
45459: PUSH
45460: FOR_IN
45461: IFFALSE 45534
// if GetBType ( j ) = b_bunker then
45463: LD_VAR 0 9
45467: PPUSH
45468: CALL_OW 266
45472: PUSH
45473: LD_INT 32
45475: EQUAL
45476: IFFALSE 45503
// tmp := Insert ( tmp , 1 , j ) else
45478: LD_ADDR_VAR 0 19
45482: PUSH
45483: LD_VAR 0 19
45487: PPUSH
45488: LD_INT 1
45490: PPUSH
45491: LD_VAR 0 9
45495: PPUSH
45496: CALL_OW 2
45500: ST_TO_ADDR
45501: GO 45532
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45503: LD_ADDR_VAR 0 19
45507: PUSH
45508: LD_VAR 0 19
45512: PPUSH
45513: LD_VAR 0 19
45517: PUSH
45518: LD_INT 1
45520: PLUS
45521: PPUSH
45522: LD_VAR 0 9
45526: PPUSH
45527: CALL_OW 2
45531: ST_TO_ADDR
45532: GO 45460
45534: POP
45535: POP
// if tmp then
45536: LD_VAR 0 19
45540: IFFALSE 45552
// f := tmp ;
45542: LD_ADDR_VAR 0 12
45546: PUSH
45547: LD_VAR 0 19
45551: ST_TO_ADDR
// end ; x := personel [ i ] ;
45552: LD_ADDR_VAR 0 13
45556: PUSH
45557: LD_VAR 0 6
45561: PUSH
45562: LD_VAR 0 8
45566: ARRAY
45567: ST_TO_ADDR
// if x = - 1 then
45568: LD_VAR 0 13
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: EQUAL
45577: IFFALSE 45786
// begin for j in f do
45579: LD_ADDR_VAR 0 9
45583: PUSH
45584: LD_VAR 0 12
45588: PUSH
45589: FOR_IN
45590: IFFALSE 45782
// repeat InitHc ;
45592: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45596: LD_VAR 0 9
45600: PPUSH
45601: CALL_OW 266
45605: PUSH
45606: LD_INT 5
45608: EQUAL
45609: IFFALSE 45679
// begin if UnitsInside ( j ) < 3 then
45611: LD_VAR 0 9
45615: PPUSH
45616: CALL_OW 313
45620: PUSH
45621: LD_INT 3
45623: LESS
45624: IFFALSE 45660
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45626: LD_INT 0
45628: PPUSH
45629: LD_INT 5
45631: PUSH
45632: LD_INT 8
45634: PUSH
45635: LD_INT 9
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: LIST
45642: PUSH
45643: LD_VAR 0 17
45647: ARRAY
45648: PPUSH
45649: LD_VAR 0 4
45653: PPUSH
45654: CALL_OW 380
45658: GO 45677
// PrepareHuman ( false , i , skill ) ;
45660: LD_INT 0
45662: PPUSH
45663: LD_VAR 0 8
45667: PPUSH
45668: LD_VAR 0 4
45672: PPUSH
45673: CALL_OW 380
// end else
45677: GO 45696
// PrepareHuman ( false , i , skill ) ;
45679: LD_INT 0
45681: PPUSH
45682: LD_VAR 0 8
45686: PPUSH
45687: LD_VAR 0 4
45691: PPUSH
45692: CALL_OW 380
// un := CreateHuman ;
45696: LD_ADDR_VAR 0 14
45700: PUSH
45701: CALL_OW 44
45705: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45706: LD_ADDR_VAR 0 7
45710: PUSH
45711: LD_VAR 0 7
45715: PPUSH
45716: LD_INT 1
45718: PPUSH
45719: LD_VAR 0 14
45723: PPUSH
45724: CALL_OW 2
45728: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45729: LD_VAR 0 14
45733: PPUSH
45734: LD_VAR 0 9
45738: PPUSH
45739: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45743: LD_VAR 0 9
45747: PPUSH
45748: CALL_OW 313
45752: PUSH
45753: LD_INT 6
45755: EQUAL
45756: PUSH
45757: LD_VAR 0 9
45761: PPUSH
45762: CALL_OW 266
45766: PUSH
45767: LD_INT 32
45769: PUSH
45770: LD_INT 31
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: IN
45777: OR
45778: IFFALSE 45592
45780: GO 45589
45782: POP
45783: POP
// end else
45784: GO 46166
// for j = 1 to x do
45786: LD_ADDR_VAR 0 9
45790: PUSH
45791: DOUBLE
45792: LD_INT 1
45794: DEC
45795: ST_TO_ADDR
45796: LD_VAR 0 13
45800: PUSH
45801: FOR_TO
45802: IFFALSE 46164
// begin InitHc ;
45804: CALL_OW 19
// if not f then
45808: LD_VAR 0 12
45812: NOT
45813: IFFALSE 45902
// begin PrepareHuman ( false , i , skill ) ;
45815: LD_INT 0
45817: PPUSH
45818: LD_VAR 0 8
45822: PPUSH
45823: LD_VAR 0 4
45827: PPUSH
45828: CALL_OW 380
// un := CreateHuman ;
45832: LD_ADDR_VAR 0 14
45836: PUSH
45837: CALL_OW 44
45841: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45842: LD_ADDR_VAR 0 7
45846: PUSH
45847: LD_VAR 0 7
45851: PPUSH
45852: LD_INT 1
45854: PPUSH
45855: LD_VAR 0 14
45859: PPUSH
45860: CALL_OW 2
45864: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45865: LD_VAR 0 14
45869: PPUSH
45870: LD_VAR 0 1
45874: PPUSH
45875: CALL_OW 250
45879: PPUSH
45880: LD_VAR 0 1
45884: PPUSH
45885: CALL_OW 251
45889: PPUSH
45890: LD_INT 10
45892: PPUSH
45893: LD_INT 0
45895: PPUSH
45896: CALL_OW 50
// continue ;
45900: GO 45801
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45902: LD_VAR 0 12
45906: PUSH
45907: LD_INT 1
45909: ARRAY
45910: PPUSH
45911: CALL_OW 313
45915: PUSH
45916: LD_VAR 0 12
45920: PUSH
45921: LD_INT 1
45923: ARRAY
45924: PPUSH
45925: CALL_OW 266
45929: PUSH
45930: LD_INT 32
45932: PUSH
45933: LD_INT 31
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: IN
45940: AND
45941: PUSH
45942: LD_VAR 0 12
45946: PUSH
45947: LD_INT 1
45949: ARRAY
45950: PPUSH
45951: CALL_OW 313
45955: PUSH
45956: LD_INT 6
45958: EQUAL
45959: OR
45960: IFFALSE 45980
// f := Delete ( f , 1 ) ;
45962: LD_ADDR_VAR 0 12
45966: PUSH
45967: LD_VAR 0 12
45971: PPUSH
45972: LD_INT 1
45974: PPUSH
45975: CALL_OW 3
45979: ST_TO_ADDR
// if not f then
45980: LD_VAR 0 12
45984: NOT
45985: IFFALSE 46003
// begin x := x + 2 ;
45987: LD_ADDR_VAR 0 13
45991: PUSH
45992: LD_VAR 0 13
45996: PUSH
45997: LD_INT 2
45999: PLUS
46000: ST_TO_ADDR
// continue ;
46001: GO 45801
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46003: LD_VAR 0 12
46007: PUSH
46008: LD_INT 1
46010: ARRAY
46011: PPUSH
46012: CALL_OW 266
46016: PUSH
46017: LD_INT 5
46019: EQUAL
46020: IFFALSE 46094
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46022: LD_VAR 0 12
46026: PUSH
46027: LD_INT 1
46029: ARRAY
46030: PPUSH
46031: CALL_OW 313
46035: PUSH
46036: LD_INT 3
46038: LESS
46039: IFFALSE 46075
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46041: LD_INT 0
46043: PPUSH
46044: LD_INT 5
46046: PUSH
46047: LD_INT 8
46049: PUSH
46050: LD_INT 9
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: LIST
46057: PUSH
46058: LD_VAR 0 17
46062: ARRAY
46063: PPUSH
46064: LD_VAR 0 4
46068: PPUSH
46069: CALL_OW 380
46073: GO 46092
// PrepareHuman ( false , i , skill ) ;
46075: LD_INT 0
46077: PPUSH
46078: LD_VAR 0 8
46082: PPUSH
46083: LD_VAR 0 4
46087: PPUSH
46088: CALL_OW 380
// end else
46092: GO 46111
// PrepareHuman ( false , i , skill ) ;
46094: LD_INT 0
46096: PPUSH
46097: LD_VAR 0 8
46101: PPUSH
46102: LD_VAR 0 4
46106: PPUSH
46107: CALL_OW 380
// un := CreateHuman ;
46111: LD_ADDR_VAR 0 14
46115: PUSH
46116: CALL_OW 44
46120: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46121: LD_ADDR_VAR 0 7
46125: PUSH
46126: LD_VAR 0 7
46130: PPUSH
46131: LD_INT 1
46133: PPUSH
46134: LD_VAR 0 14
46138: PPUSH
46139: CALL_OW 2
46143: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46144: LD_VAR 0 14
46148: PPUSH
46149: LD_VAR 0 12
46153: PUSH
46154: LD_INT 1
46156: ARRAY
46157: PPUSH
46158: CALL_OW 52
// end ;
46162: GO 45801
46164: POP
46165: POP
// end ;
46166: GO 45103
46168: POP
46169: POP
// result := result ^ buildings ;
46170: LD_ADDR_VAR 0 7
46174: PUSH
46175: LD_VAR 0 7
46179: PUSH
46180: LD_VAR 0 18
46184: ADD
46185: ST_TO_ADDR
// end else
46186: GO 46329
// begin for i = 1 to personel do
46188: LD_ADDR_VAR 0 8
46192: PUSH
46193: DOUBLE
46194: LD_INT 1
46196: DEC
46197: ST_TO_ADDR
46198: LD_VAR 0 6
46202: PUSH
46203: FOR_TO
46204: IFFALSE 46327
// begin if i > 4 then
46206: LD_VAR 0 8
46210: PUSH
46211: LD_INT 4
46213: GREATER
46214: IFFALSE 46218
// break ;
46216: GO 46327
// x := personel [ i ] ;
46218: LD_ADDR_VAR 0 13
46222: PUSH
46223: LD_VAR 0 6
46227: PUSH
46228: LD_VAR 0 8
46232: ARRAY
46233: ST_TO_ADDR
// if x = - 1 then
46234: LD_VAR 0 13
46238: PUSH
46239: LD_INT 1
46241: NEG
46242: EQUAL
46243: IFFALSE 46247
// continue ;
46245: GO 46203
// PrepareHuman ( false , i , skill ) ;
46247: LD_INT 0
46249: PPUSH
46250: LD_VAR 0 8
46254: PPUSH
46255: LD_VAR 0 4
46259: PPUSH
46260: CALL_OW 380
// un := CreateHuman ;
46264: LD_ADDR_VAR 0 14
46268: PUSH
46269: CALL_OW 44
46273: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46274: LD_VAR 0 14
46278: PPUSH
46279: LD_VAR 0 1
46283: PPUSH
46284: CALL_OW 250
46288: PPUSH
46289: LD_VAR 0 1
46293: PPUSH
46294: CALL_OW 251
46298: PPUSH
46299: LD_INT 10
46301: PPUSH
46302: LD_INT 0
46304: PPUSH
46305: CALL_OW 50
// result := result ^ un ;
46309: LD_ADDR_VAR 0 7
46313: PUSH
46314: LD_VAR 0 7
46318: PUSH
46319: LD_VAR 0 14
46323: ADD
46324: ST_TO_ADDR
// end ;
46325: GO 46203
46327: POP
46328: POP
// end ; end ;
46329: LD_VAR 0 7
46333: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46334: LD_INT 0
46336: PPUSH
46337: PPUSH
46338: PPUSH
46339: PPUSH
46340: PPUSH
46341: PPUSH
46342: PPUSH
46343: PPUSH
46344: PPUSH
46345: PPUSH
46346: PPUSH
46347: PPUSH
46348: PPUSH
46349: PPUSH
46350: PPUSH
46351: PPUSH
// result := false ;
46352: LD_ADDR_VAR 0 3
46356: PUSH
46357: LD_INT 0
46359: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46360: LD_VAR 0 1
46364: NOT
46365: PUSH
46366: LD_VAR 0 1
46370: PPUSH
46371: CALL_OW 266
46375: PUSH
46376: LD_INT 32
46378: PUSH
46379: LD_INT 33
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: IN
46386: NOT
46387: OR
46388: IFFALSE 46392
// exit ;
46390: GO 47501
// nat := GetNation ( tower ) ;
46392: LD_ADDR_VAR 0 12
46396: PUSH
46397: LD_VAR 0 1
46401: PPUSH
46402: CALL_OW 248
46406: ST_TO_ADDR
// side := GetSide ( tower ) ;
46407: LD_ADDR_VAR 0 16
46411: PUSH
46412: LD_VAR 0 1
46416: PPUSH
46417: CALL_OW 255
46421: ST_TO_ADDR
// x := GetX ( tower ) ;
46422: LD_ADDR_VAR 0 10
46426: PUSH
46427: LD_VAR 0 1
46431: PPUSH
46432: CALL_OW 250
46436: ST_TO_ADDR
// y := GetY ( tower ) ;
46437: LD_ADDR_VAR 0 11
46441: PUSH
46442: LD_VAR 0 1
46446: PPUSH
46447: CALL_OW 251
46451: ST_TO_ADDR
// if not x or not y then
46452: LD_VAR 0 10
46456: NOT
46457: PUSH
46458: LD_VAR 0 11
46462: NOT
46463: OR
46464: IFFALSE 46468
// exit ;
46466: GO 47501
// weapon := 0 ;
46468: LD_ADDR_VAR 0 18
46472: PUSH
46473: LD_INT 0
46475: ST_TO_ADDR
// fac_list := [ ] ;
46476: LD_ADDR_VAR 0 17
46480: PUSH
46481: EMPTY
46482: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46483: LD_ADDR_VAR 0 6
46487: PUSH
46488: LD_VAR 0 1
46492: PPUSH
46493: CALL_OW 274
46497: PPUSH
46498: LD_VAR 0 2
46502: PPUSH
46503: LD_INT 0
46505: PPUSH
46506: CALL 44072 0 3
46510: PPUSH
46511: LD_INT 30
46513: PUSH
46514: LD_INT 3
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PPUSH
46521: CALL_OW 72
46525: ST_TO_ADDR
// if not factories then
46526: LD_VAR 0 6
46530: NOT
46531: IFFALSE 46535
// exit ;
46533: GO 47501
// for i in factories do
46535: LD_ADDR_VAR 0 8
46539: PUSH
46540: LD_VAR 0 6
46544: PUSH
46545: FOR_IN
46546: IFFALSE 46571
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46548: LD_ADDR_VAR 0 17
46552: PUSH
46553: LD_VAR 0 17
46557: PUSH
46558: LD_VAR 0 8
46562: PPUSH
46563: CALL_OW 478
46567: UNION
46568: ST_TO_ADDR
46569: GO 46545
46571: POP
46572: POP
// if not fac_list then
46573: LD_VAR 0 17
46577: NOT
46578: IFFALSE 46582
// exit ;
46580: GO 47501
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46582: LD_ADDR_VAR 0 5
46586: PUSH
46587: LD_INT 4
46589: PUSH
46590: LD_INT 5
46592: PUSH
46593: LD_INT 9
46595: PUSH
46596: LD_INT 10
46598: PUSH
46599: LD_INT 6
46601: PUSH
46602: LD_INT 7
46604: PUSH
46605: LD_INT 11
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 27
46619: PUSH
46620: LD_INT 28
46622: PUSH
46623: LD_INT 26
46625: PUSH
46626: LD_INT 30
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 43
46637: PUSH
46638: LD_INT 44
46640: PUSH
46641: LD_INT 46
46643: PUSH
46644: LD_INT 45
46646: PUSH
46647: LD_INT 47
46649: PUSH
46650: LD_INT 49
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: LIST
46665: PUSH
46666: LD_VAR 0 12
46670: ARRAY
46671: ST_TO_ADDR
// list := list isect fac_list ;
46672: LD_ADDR_VAR 0 5
46676: PUSH
46677: LD_VAR 0 5
46681: PUSH
46682: LD_VAR 0 17
46686: ISECT
46687: ST_TO_ADDR
// if not list then
46688: LD_VAR 0 5
46692: NOT
46693: IFFALSE 46697
// exit ;
46695: GO 47501
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46697: LD_VAR 0 12
46701: PUSH
46702: LD_INT 3
46704: EQUAL
46705: PUSH
46706: LD_INT 49
46708: PUSH
46709: LD_VAR 0 5
46713: IN
46714: AND
46715: PUSH
46716: LD_INT 31
46718: PPUSH
46719: LD_VAR 0 16
46723: PPUSH
46724: CALL_OW 321
46728: PUSH
46729: LD_INT 2
46731: EQUAL
46732: AND
46733: IFFALSE 46793
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46735: LD_INT 22
46737: PUSH
46738: LD_VAR 0 16
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 35
46749: PUSH
46750: LD_INT 49
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 91
46759: PUSH
46760: LD_VAR 0 1
46764: PUSH
46765: LD_INT 10
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: LIST
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: LIST
46777: PPUSH
46778: CALL_OW 69
46782: NOT
46783: IFFALSE 46793
// weapon := ru_time_lapser ;
46785: LD_ADDR_VAR 0 18
46789: PUSH
46790: LD_INT 49
46792: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46793: LD_VAR 0 12
46797: PUSH
46798: LD_INT 1
46800: PUSH
46801: LD_INT 2
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: IN
46808: PUSH
46809: LD_INT 11
46811: PUSH
46812: LD_VAR 0 5
46816: IN
46817: PUSH
46818: LD_INT 30
46820: PUSH
46821: LD_VAR 0 5
46825: IN
46826: OR
46827: AND
46828: PUSH
46829: LD_INT 6
46831: PPUSH
46832: LD_VAR 0 16
46836: PPUSH
46837: CALL_OW 321
46841: PUSH
46842: LD_INT 2
46844: EQUAL
46845: AND
46846: IFFALSE 47011
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46848: LD_INT 22
46850: PUSH
46851: LD_VAR 0 16
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 2
46862: PUSH
46863: LD_INT 35
46865: PUSH
46866: LD_INT 11
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 35
46875: PUSH
46876: LD_INT 30
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 91
46890: PUSH
46891: LD_VAR 0 1
46895: PUSH
46896: LD_INT 18
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: LIST
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: LIST
46908: PPUSH
46909: CALL_OW 69
46913: NOT
46914: PUSH
46915: LD_INT 22
46917: PUSH
46918: LD_VAR 0 16
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 2
46929: PUSH
46930: LD_INT 30
46932: PUSH
46933: LD_INT 32
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 30
46942: PUSH
46943: LD_INT 33
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 91
46957: PUSH
46958: LD_VAR 0 1
46962: PUSH
46963: LD_INT 12
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: LIST
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: LIST
46975: PUSH
46976: EMPTY
46977: LIST
46978: PPUSH
46979: CALL_OW 69
46983: PUSH
46984: LD_INT 2
46986: GREATER
46987: AND
46988: IFFALSE 47011
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46990: LD_ADDR_VAR 0 18
46994: PUSH
46995: LD_INT 11
46997: PUSH
46998: LD_INT 30
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_VAR 0 12
47009: ARRAY
47010: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47011: LD_VAR 0 18
47015: NOT
47016: PUSH
47017: LD_INT 40
47019: PPUSH
47020: LD_VAR 0 16
47024: PPUSH
47025: CALL_OW 321
47029: PUSH
47030: LD_INT 2
47032: EQUAL
47033: AND
47034: PUSH
47035: LD_INT 7
47037: PUSH
47038: LD_VAR 0 5
47042: IN
47043: PUSH
47044: LD_INT 28
47046: PUSH
47047: LD_VAR 0 5
47051: IN
47052: OR
47053: PUSH
47054: LD_INT 45
47056: PUSH
47057: LD_VAR 0 5
47061: IN
47062: OR
47063: AND
47064: IFFALSE 47318
// begin hex := GetHexInfo ( x , y ) ;
47066: LD_ADDR_VAR 0 4
47070: PUSH
47071: LD_VAR 0 10
47075: PPUSH
47076: LD_VAR 0 11
47080: PPUSH
47081: CALL_OW 546
47085: ST_TO_ADDR
// if hex [ 1 ] then
47086: LD_VAR 0 4
47090: PUSH
47091: LD_INT 1
47093: ARRAY
47094: IFFALSE 47098
// exit ;
47096: GO 47501
// height := hex [ 2 ] ;
47098: LD_ADDR_VAR 0 15
47102: PUSH
47103: LD_VAR 0 4
47107: PUSH
47108: LD_INT 2
47110: ARRAY
47111: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47112: LD_ADDR_VAR 0 14
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: LD_INT 2
47122: PUSH
47123: LD_INT 3
47125: PUSH
47126: LD_INT 5
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: ST_TO_ADDR
// for i in tmp do
47135: LD_ADDR_VAR 0 8
47139: PUSH
47140: LD_VAR 0 14
47144: PUSH
47145: FOR_IN
47146: IFFALSE 47316
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47148: LD_ADDR_VAR 0 9
47152: PUSH
47153: LD_VAR 0 10
47157: PPUSH
47158: LD_VAR 0 8
47162: PPUSH
47163: LD_INT 5
47165: PPUSH
47166: CALL_OW 272
47170: PUSH
47171: LD_VAR 0 11
47175: PPUSH
47176: LD_VAR 0 8
47180: PPUSH
47181: LD_INT 5
47183: PPUSH
47184: CALL_OW 273
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47193: LD_VAR 0 9
47197: PUSH
47198: LD_INT 1
47200: ARRAY
47201: PPUSH
47202: LD_VAR 0 9
47206: PUSH
47207: LD_INT 2
47209: ARRAY
47210: PPUSH
47211: CALL_OW 488
47215: IFFALSE 47314
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47217: LD_ADDR_VAR 0 4
47221: PUSH
47222: LD_VAR 0 9
47226: PUSH
47227: LD_INT 1
47229: ARRAY
47230: PPUSH
47231: LD_VAR 0 9
47235: PUSH
47236: LD_INT 2
47238: ARRAY
47239: PPUSH
47240: CALL_OW 546
47244: ST_TO_ADDR
// if hex [ 1 ] then
47245: LD_VAR 0 4
47249: PUSH
47250: LD_INT 1
47252: ARRAY
47253: IFFALSE 47257
// continue ;
47255: GO 47145
// h := hex [ 2 ] ;
47257: LD_ADDR_VAR 0 13
47261: PUSH
47262: LD_VAR 0 4
47266: PUSH
47267: LD_INT 2
47269: ARRAY
47270: ST_TO_ADDR
// if h + 7 < height then
47271: LD_VAR 0 13
47275: PUSH
47276: LD_INT 7
47278: PLUS
47279: PUSH
47280: LD_VAR 0 15
47284: LESS
47285: IFFALSE 47314
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47287: LD_ADDR_VAR 0 18
47291: PUSH
47292: LD_INT 7
47294: PUSH
47295: LD_INT 28
47297: PUSH
47298: LD_INT 45
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: LIST
47305: PUSH
47306: LD_VAR 0 12
47310: ARRAY
47311: ST_TO_ADDR
// break ;
47312: GO 47316
// end ; end ; end ;
47314: GO 47145
47316: POP
47317: POP
// end ; if not weapon then
47318: LD_VAR 0 18
47322: NOT
47323: IFFALSE 47383
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47325: LD_ADDR_VAR 0 5
47329: PUSH
47330: LD_VAR 0 5
47334: PUSH
47335: LD_INT 11
47337: PUSH
47338: LD_INT 30
47340: PUSH
47341: LD_INT 49
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: LIST
47348: DIFF
47349: ST_TO_ADDR
// if not list then
47350: LD_VAR 0 5
47354: NOT
47355: IFFALSE 47359
// exit ;
47357: GO 47501
// weapon := list [ rand ( 1 , list ) ] ;
47359: LD_ADDR_VAR 0 18
47363: PUSH
47364: LD_VAR 0 5
47368: PUSH
47369: LD_INT 1
47371: PPUSH
47372: LD_VAR 0 5
47376: PPUSH
47377: CALL_OW 12
47381: ARRAY
47382: ST_TO_ADDR
// end ; if weapon then
47383: LD_VAR 0 18
47387: IFFALSE 47501
// begin tmp := CostOfWeapon ( weapon ) ;
47389: LD_ADDR_VAR 0 14
47393: PUSH
47394: LD_VAR 0 18
47398: PPUSH
47399: CALL_OW 451
47403: ST_TO_ADDR
// j := GetBase ( tower ) ;
47404: LD_ADDR_VAR 0 9
47408: PUSH
47409: LD_VAR 0 1
47413: PPUSH
47414: CALL_OW 274
47418: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47419: LD_VAR 0 9
47423: PPUSH
47424: LD_INT 1
47426: PPUSH
47427: CALL_OW 275
47431: PUSH
47432: LD_VAR 0 14
47436: PUSH
47437: LD_INT 1
47439: ARRAY
47440: GREATEREQUAL
47441: PUSH
47442: LD_VAR 0 9
47446: PPUSH
47447: LD_INT 2
47449: PPUSH
47450: CALL_OW 275
47454: PUSH
47455: LD_VAR 0 14
47459: PUSH
47460: LD_INT 2
47462: ARRAY
47463: GREATEREQUAL
47464: AND
47465: PUSH
47466: LD_VAR 0 9
47470: PPUSH
47471: LD_INT 3
47473: PPUSH
47474: CALL_OW 275
47478: PUSH
47479: LD_VAR 0 14
47483: PUSH
47484: LD_INT 3
47486: ARRAY
47487: GREATEREQUAL
47488: AND
47489: IFFALSE 47501
// result := weapon ;
47491: LD_ADDR_VAR 0 3
47495: PUSH
47496: LD_VAR 0 18
47500: ST_TO_ADDR
// end ; end ;
47501: LD_VAR 0 3
47505: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47506: LD_INT 0
47508: PPUSH
47509: PPUSH
// result := true ;
47510: LD_ADDR_VAR 0 3
47514: PUSH
47515: LD_INT 1
47517: ST_TO_ADDR
// if array1 = array2 then
47518: LD_VAR 0 1
47522: PUSH
47523: LD_VAR 0 2
47527: EQUAL
47528: IFFALSE 47588
// begin for i = 1 to array1 do
47530: LD_ADDR_VAR 0 4
47534: PUSH
47535: DOUBLE
47536: LD_INT 1
47538: DEC
47539: ST_TO_ADDR
47540: LD_VAR 0 1
47544: PUSH
47545: FOR_TO
47546: IFFALSE 47584
// if array1 [ i ] <> array2 [ i ] then
47548: LD_VAR 0 1
47552: PUSH
47553: LD_VAR 0 4
47557: ARRAY
47558: PUSH
47559: LD_VAR 0 2
47563: PUSH
47564: LD_VAR 0 4
47568: ARRAY
47569: NONEQUAL
47570: IFFALSE 47582
// begin result := false ;
47572: LD_ADDR_VAR 0 3
47576: PUSH
47577: LD_INT 0
47579: ST_TO_ADDR
// break ;
47580: GO 47584
// end ;
47582: GO 47545
47584: POP
47585: POP
// end else
47586: GO 47596
// result := false ;
47588: LD_ADDR_VAR 0 3
47592: PUSH
47593: LD_INT 0
47595: ST_TO_ADDR
// end ;
47596: LD_VAR 0 3
47600: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47601: LD_INT 0
47603: PPUSH
47604: PPUSH
// if not array1 or not array2 then
47605: LD_VAR 0 1
47609: NOT
47610: PUSH
47611: LD_VAR 0 2
47615: NOT
47616: OR
47617: IFFALSE 47621
// exit ;
47619: GO 47685
// result := true ;
47621: LD_ADDR_VAR 0 3
47625: PUSH
47626: LD_INT 1
47628: ST_TO_ADDR
// for i = 1 to array1 do
47629: LD_ADDR_VAR 0 4
47633: PUSH
47634: DOUBLE
47635: LD_INT 1
47637: DEC
47638: ST_TO_ADDR
47639: LD_VAR 0 1
47643: PUSH
47644: FOR_TO
47645: IFFALSE 47683
// if array1 [ i ] <> array2 [ i ] then
47647: LD_VAR 0 1
47651: PUSH
47652: LD_VAR 0 4
47656: ARRAY
47657: PUSH
47658: LD_VAR 0 2
47662: PUSH
47663: LD_VAR 0 4
47667: ARRAY
47668: NONEQUAL
47669: IFFALSE 47681
// begin result := false ;
47671: LD_ADDR_VAR 0 3
47675: PUSH
47676: LD_INT 0
47678: ST_TO_ADDR
// break ;
47679: GO 47683
// end ;
47681: GO 47644
47683: POP
47684: POP
// end ;
47685: LD_VAR 0 3
47689: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47690: LD_INT 0
47692: PPUSH
47693: PPUSH
47694: PPUSH
// pom := GetBase ( fac ) ;
47695: LD_ADDR_VAR 0 5
47699: PUSH
47700: LD_VAR 0 1
47704: PPUSH
47705: CALL_OW 274
47709: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47710: LD_ADDR_VAR 0 4
47714: PUSH
47715: LD_VAR 0 2
47719: PUSH
47720: LD_INT 1
47722: ARRAY
47723: PPUSH
47724: LD_VAR 0 2
47728: PUSH
47729: LD_INT 2
47731: ARRAY
47732: PPUSH
47733: LD_VAR 0 2
47737: PUSH
47738: LD_INT 3
47740: ARRAY
47741: PPUSH
47742: LD_VAR 0 2
47746: PUSH
47747: LD_INT 4
47749: ARRAY
47750: PPUSH
47751: CALL_OW 449
47755: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47756: LD_ADDR_VAR 0 3
47760: PUSH
47761: LD_VAR 0 5
47765: PPUSH
47766: LD_INT 1
47768: PPUSH
47769: CALL_OW 275
47773: PUSH
47774: LD_VAR 0 4
47778: PUSH
47779: LD_INT 1
47781: ARRAY
47782: GREATEREQUAL
47783: PUSH
47784: LD_VAR 0 5
47788: PPUSH
47789: LD_INT 2
47791: PPUSH
47792: CALL_OW 275
47796: PUSH
47797: LD_VAR 0 4
47801: PUSH
47802: LD_INT 2
47804: ARRAY
47805: GREATEREQUAL
47806: AND
47807: PUSH
47808: LD_VAR 0 5
47812: PPUSH
47813: LD_INT 3
47815: PPUSH
47816: CALL_OW 275
47820: PUSH
47821: LD_VAR 0 4
47825: PUSH
47826: LD_INT 3
47828: ARRAY
47829: GREATEREQUAL
47830: AND
47831: ST_TO_ADDR
// end ;
47832: LD_VAR 0 3
47836: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47837: LD_INT 0
47839: PPUSH
47840: PPUSH
47841: PPUSH
47842: PPUSH
// pom := GetBase ( building ) ;
47843: LD_ADDR_VAR 0 3
47847: PUSH
47848: LD_VAR 0 1
47852: PPUSH
47853: CALL_OW 274
47857: ST_TO_ADDR
// if not pom then
47858: LD_VAR 0 3
47862: NOT
47863: IFFALSE 47867
// exit ;
47865: GO 48037
// btype := GetBType ( building ) ;
47867: LD_ADDR_VAR 0 5
47871: PUSH
47872: LD_VAR 0 1
47876: PPUSH
47877: CALL_OW 266
47881: ST_TO_ADDR
// if btype = b_armoury then
47882: LD_VAR 0 5
47886: PUSH
47887: LD_INT 4
47889: EQUAL
47890: IFFALSE 47900
// btype := b_barracks ;
47892: LD_ADDR_VAR 0 5
47896: PUSH
47897: LD_INT 5
47899: ST_TO_ADDR
// if btype = b_depot then
47900: LD_VAR 0 5
47904: PUSH
47905: LD_INT 0
47907: EQUAL
47908: IFFALSE 47918
// btype := b_warehouse ;
47910: LD_ADDR_VAR 0 5
47914: PUSH
47915: LD_INT 1
47917: ST_TO_ADDR
// if btype = b_workshop then
47918: LD_VAR 0 5
47922: PUSH
47923: LD_INT 2
47925: EQUAL
47926: IFFALSE 47936
// btype := b_factory ;
47928: LD_ADDR_VAR 0 5
47932: PUSH
47933: LD_INT 3
47935: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47936: LD_ADDR_VAR 0 4
47940: PUSH
47941: LD_VAR 0 5
47945: PPUSH
47946: LD_VAR 0 1
47950: PPUSH
47951: CALL_OW 248
47955: PPUSH
47956: CALL_OW 450
47960: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47961: LD_ADDR_VAR 0 2
47965: PUSH
47966: LD_VAR 0 3
47970: PPUSH
47971: LD_INT 1
47973: PPUSH
47974: CALL_OW 275
47978: PUSH
47979: LD_VAR 0 4
47983: PUSH
47984: LD_INT 1
47986: ARRAY
47987: GREATEREQUAL
47988: PUSH
47989: LD_VAR 0 3
47993: PPUSH
47994: LD_INT 2
47996: PPUSH
47997: CALL_OW 275
48001: PUSH
48002: LD_VAR 0 4
48006: PUSH
48007: LD_INT 2
48009: ARRAY
48010: GREATEREQUAL
48011: AND
48012: PUSH
48013: LD_VAR 0 3
48017: PPUSH
48018: LD_INT 3
48020: PPUSH
48021: CALL_OW 275
48025: PUSH
48026: LD_VAR 0 4
48030: PUSH
48031: LD_INT 3
48033: ARRAY
48034: GREATEREQUAL
48035: AND
48036: ST_TO_ADDR
// end ;
48037: LD_VAR 0 2
48041: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48042: LD_INT 0
48044: PPUSH
48045: PPUSH
48046: PPUSH
// pom := GetBase ( building ) ;
48047: LD_ADDR_VAR 0 4
48051: PUSH
48052: LD_VAR 0 1
48056: PPUSH
48057: CALL_OW 274
48061: ST_TO_ADDR
// if not pom then
48062: LD_VAR 0 4
48066: NOT
48067: IFFALSE 48071
// exit ;
48069: GO 48172
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48071: LD_ADDR_VAR 0 5
48075: PUSH
48076: LD_VAR 0 2
48080: PPUSH
48081: LD_VAR 0 1
48085: PPUSH
48086: CALL_OW 248
48090: PPUSH
48091: CALL_OW 450
48095: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48096: LD_ADDR_VAR 0 3
48100: PUSH
48101: LD_VAR 0 4
48105: PPUSH
48106: LD_INT 1
48108: PPUSH
48109: CALL_OW 275
48113: PUSH
48114: LD_VAR 0 5
48118: PUSH
48119: LD_INT 1
48121: ARRAY
48122: GREATEREQUAL
48123: PUSH
48124: LD_VAR 0 4
48128: PPUSH
48129: LD_INT 2
48131: PPUSH
48132: CALL_OW 275
48136: PUSH
48137: LD_VAR 0 5
48141: PUSH
48142: LD_INT 2
48144: ARRAY
48145: GREATEREQUAL
48146: AND
48147: PUSH
48148: LD_VAR 0 4
48152: PPUSH
48153: LD_INT 3
48155: PPUSH
48156: CALL_OW 275
48160: PUSH
48161: LD_VAR 0 5
48165: PUSH
48166: LD_INT 3
48168: ARRAY
48169: GREATEREQUAL
48170: AND
48171: ST_TO_ADDR
// end ;
48172: LD_VAR 0 3
48176: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48177: LD_INT 0
48179: PPUSH
48180: PPUSH
48181: PPUSH
48182: PPUSH
48183: PPUSH
48184: PPUSH
48185: PPUSH
48186: PPUSH
48187: PPUSH
48188: PPUSH
48189: PPUSH
// result := false ;
48190: LD_ADDR_VAR 0 8
48194: PUSH
48195: LD_INT 0
48197: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48198: LD_VAR 0 5
48202: NOT
48203: PUSH
48204: LD_VAR 0 1
48208: NOT
48209: OR
48210: PUSH
48211: LD_VAR 0 2
48215: NOT
48216: OR
48217: PUSH
48218: LD_VAR 0 3
48222: NOT
48223: OR
48224: IFFALSE 48228
// exit ;
48226: GO 49042
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48228: LD_ADDR_VAR 0 14
48232: PUSH
48233: LD_VAR 0 1
48237: PPUSH
48238: LD_VAR 0 2
48242: PPUSH
48243: LD_VAR 0 3
48247: PPUSH
48248: LD_VAR 0 4
48252: PPUSH
48253: LD_VAR 0 5
48257: PUSH
48258: LD_INT 1
48260: ARRAY
48261: PPUSH
48262: CALL_OW 248
48266: PPUSH
48267: LD_INT 0
48269: PPUSH
48270: CALL 50279 0 6
48274: ST_TO_ADDR
// if not hexes then
48275: LD_VAR 0 14
48279: NOT
48280: IFFALSE 48284
// exit ;
48282: GO 49042
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48284: LD_ADDR_VAR 0 17
48288: PUSH
48289: LD_VAR 0 5
48293: PPUSH
48294: LD_INT 22
48296: PUSH
48297: LD_VAR 0 13
48301: PPUSH
48302: CALL_OW 255
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 2
48313: PUSH
48314: LD_INT 30
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 30
48326: PUSH
48327: LD_INT 1
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: LIST
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PPUSH
48343: CALL_OW 72
48347: ST_TO_ADDR
// for i = 1 to hexes do
48348: LD_ADDR_VAR 0 9
48352: PUSH
48353: DOUBLE
48354: LD_INT 1
48356: DEC
48357: ST_TO_ADDR
48358: LD_VAR 0 14
48362: PUSH
48363: FOR_TO
48364: IFFALSE 49040
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48366: LD_ADDR_VAR 0 13
48370: PUSH
48371: LD_VAR 0 14
48375: PUSH
48376: LD_VAR 0 9
48380: ARRAY
48381: PUSH
48382: LD_INT 1
48384: ARRAY
48385: PPUSH
48386: LD_VAR 0 14
48390: PUSH
48391: LD_VAR 0 9
48395: ARRAY
48396: PUSH
48397: LD_INT 2
48399: ARRAY
48400: PPUSH
48401: CALL_OW 428
48405: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48406: LD_VAR 0 14
48410: PUSH
48411: LD_VAR 0 9
48415: ARRAY
48416: PUSH
48417: LD_INT 1
48419: ARRAY
48420: PPUSH
48421: LD_VAR 0 14
48425: PUSH
48426: LD_VAR 0 9
48430: ARRAY
48431: PUSH
48432: LD_INT 2
48434: ARRAY
48435: PPUSH
48436: CALL_OW 351
48440: PUSH
48441: LD_VAR 0 14
48445: PUSH
48446: LD_VAR 0 9
48450: ARRAY
48451: PUSH
48452: LD_INT 1
48454: ARRAY
48455: PPUSH
48456: LD_VAR 0 14
48460: PUSH
48461: LD_VAR 0 9
48465: ARRAY
48466: PUSH
48467: LD_INT 2
48469: ARRAY
48470: PPUSH
48471: CALL_OW 488
48475: NOT
48476: OR
48477: PUSH
48478: LD_VAR 0 13
48482: PPUSH
48483: CALL_OW 247
48487: PUSH
48488: LD_INT 3
48490: EQUAL
48491: OR
48492: IFFALSE 48498
// exit ;
48494: POP
48495: POP
48496: GO 49042
// if not tmp then
48498: LD_VAR 0 13
48502: NOT
48503: IFFALSE 48507
// continue ;
48505: GO 48363
// result := true ;
48507: LD_ADDR_VAR 0 8
48511: PUSH
48512: LD_INT 1
48514: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48515: LD_VAR 0 6
48519: PUSH
48520: LD_VAR 0 13
48524: PPUSH
48525: CALL_OW 247
48529: PUSH
48530: LD_INT 2
48532: EQUAL
48533: AND
48534: PUSH
48535: LD_VAR 0 13
48539: PPUSH
48540: CALL_OW 263
48544: PUSH
48545: LD_INT 1
48547: EQUAL
48548: AND
48549: IFFALSE 48713
// begin if IsDrivenBy ( tmp ) then
48551: LD_VAR 0 13
48555: PPUSH
48556: CALL_OW 311
48560: IFFALSE 48564
// continue ;
48562: GO 48363
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48564: LD_VAR 0 6
48568: PPUSH
48569: LD_INT 3
48571: PUSH
48572: LD_INT 60
48574: PUSH
48575: EMPTY
48576: LIST
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 3
48584: PUSH
48585: LD_INT 55
48587: PUSH
48588: EMPTY
48589: LIST
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PPUSH
48599: CALL_OW 72
48603: IFFALSE 48711
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48605: LD_ADDR_VAR 0 18
48609: PUSH
48610: LD_VAR 0 6
48614: PPUSH
48615: LD_INT 3
48617: PUSH
48618: LD_INT 60
48620: PUSH
48621: EMPTY
48622: LIST
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 3
48630: PUSH
48631: LD_INT 55
48633: PUSH
48634: EMPTY
48635: LIST
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PPUSH
48645: CALL_OW 72
48649: PUSH
48650: LD_INT 1
48652: ARRAY
48653: ST_TO_ADDR
// if IsInUnit ( driver ) then
48654: LD_VAR 0 18
48658: PPUSH
48659: CALL_OW 310
48663: IFFALSE 48674
// ComExit ( driver ) ;
48665: LD_VAR 0 18
48669: PPUSH
48670: CALL 73407 0 1
// AddComEnterUnit ( driver , tmp ) ;
48674: LD_VAR 0 18
48678: PPUSH
48679: LD_VAR 0 13
48683: PPUSH
48684: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
48688: LD_VAR 0 18
48692: PPUSH
48693: LD_VAR 0 7
48697: PPUSH
48698: CALL_OW 173
// AddComExitVehicle ( driver ) ;
48702: LD_VAR 0 18
48706: PPUSH
48707: CALL_OW 181
// end ; continue ;
48711: GO 48363
// end ; if not cleaners or not tmp in cleaners then
48713: LD_VAR 0 6
48717: NOT
48718: PUSH
48719: LD_VAR 0 13
48723: PUSH
48724: LD_VAR 0 6
48728: IN
48729: NOT
48730: OR
48731: IFFALSE 49038
// begin if dep then
48733: LD_VAR 0 17
48737: IFFALSE 48873
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48739: LD_ADDR_VAR 0 16
48743: PUSH
48744: LD_VAR 0 17
48748: PUSH
48749: LD_INT 1
48751: ARRAY
48752: PPUSH
48753: CALL_OW 250
48757: PPUSH
48758: LD_VAR 0 17
48762: PUSH
48763: LD_INT 1
48765: ARRAY
48766: PPUSH
48767: CALL_OW 254
48771: PPUSH
48772: LD_INT 5
48774: PPUSH
48775: CALL_OW 272
48779: PUSH
48780: LD_VAR 0 17
48784: PUSH
48785: LD_INT 1
48787: ARRAY
48788: PPUSH
48789: CALL_OW 251
48793: PPUSH
48794: LD_VAR 0 17
48798: PUSH
48799: LD_INT 1
48801: ARRAY
48802: PPUSH
48803: CALL_OW 254
48807: PPUSH
48808: LD_INT 5
48810: PPUSH
48811: CALL_OW 273
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48820: LD_VAR 0 16
48824: PUSH
48825: LD_INT 1
48827: ARRAY
48828: PPUSH
48829: LD_VAR 0 16
48833: PUSH
48834: LD_INT 2
48836: ARRAY
48837: PPUSH
48838: CALL_OW 488
48842: IFFALSE 48873
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48844: LD_VAR 0 13
48848: PPUSH
48849: LD_VAR 0 16
48853: PUSH
48854: LD_INT 1
48856: ARRAY
48857: PPUSH
48858: LD_VAR 0 16
48862: PUSH
48863: LD_INT 2
48865: ARRAY
48866: PPUSH
48867: CALL_OW 111
// continue ;
48871: GO 48363
// end ; end ; r := GetDir ( tmp ) ;
48873: LD_ADDR_VAR 0 15
48877: PUSH
48878: LD_VAR 0 13
48882: PPUSH
48883: CALL_OW 254
48887: ST_TO_ADDR
// if r = 5 then
48888: LD_VAR 0 15
48892: PUSH
48893: LD_INT 5
48895: EQUAL
48896: IFFALSE 48906
// r := 0 ;
48898: LD_ADDR_VAR 0 15
48902: PUSH
48903: LD_INT 0
48905: ST_TO_ADDR
// for j = r to 5 do
48906: LD_ADDR_VAR 0 10
48910: PUSH
48911: DOUBLE
48912: LD_VAR 0 15
48916: DEC
48917: ST_TO_ADDR
48918: LD_INT 5
48920: PUSH
48921: FOR_TO
48922: IFFALSE 49036
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48924: LD_ADDR_VAR 0 11
48928: PUSH
48929: LD_VAR 0 13
48933: PPUSH
48934: CALL_OW 250
48938: PPUSH
48939: LD_VAR 0 10
48943: PPUSH
48944: LD_INT 2
48946: PPUSH
48947: CALL_OW 272
48951: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48952: LD_ADDR_VAR 0 12
48956: PUSH
48957: LD_VAR 0 13
48961: PPUSH
48962: CALL_OW 251
48966: PPUSH
48967: LD_VAR 0 10
48971: PPUSH
48972: LD_INT 2
48974: PPUSH
48975: CALL_OW 273
48979: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48980: LD_VAR 0 11
48984: PPUSH
48985: LD_VAR 0 12
48989: PPUSH
48990: CALL_OW 488
48994: PUSH
48995: LD_VAR 0 11
48999: PPUSH
49000: LD_VAR 0 12
49004: PPUSH
49005: CALL_OW 428
49009: NOT
49010: AND
49011: IFFALSE 49034
// begin ComMoveXY ( tmp , _x , _y ) ;
49013: LD_VAR 0 13
49017: PPUSH
49018: LD_VAR 0 11
49022: PPUSH
49023: LD_VAR 0 12
49027: PPUSH
49028: CALL_OW 111
// break ;
49032: GO 49036
// end ; end ;
49034: GO 48921
49036: POP
49037: POP
// end ; end ;
49038: GO 48363
49040: POP
49041: POP
// end ;
49042: LD_VAR 0 8
49046: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49047: LD_INT 0
49049: PPUSH
// result := true ;
49050: LD_ADDR_VAR 0 3
49054: PUSH
49055: LD_INT 1
49057: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49058: LD_VAR 0 2
49062: PUSH
49063: LD_INT 24
49065: DOUBLE
49066: EQUAL
49067: IFTRUE 49077
49069: LD_INT 33
49071: DOUBLE
49072: EQUAL
49073: IFTRUE 49077
49075: GO 49102
49077: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49078: LD_ADDR_VAR 0 3
49082: PUSH
49083: LD_INT 32
49085: PPUSH
49086: LD_VAR 0 1
49090: PPUSH
49091: CALL_OW 321
49095: PUSH
49096: LD_INT 2
49098: EQUAL
49099: ST_TO_ADDR
49100: GO 49422
49102: LD_INT 20
49104: DOUBLE
49105: EQUAL
49106: IFTRUE 49110
49108: GO 49135
49110: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49111: LD_ADDR_VAR 0 3
49115: PUSH
49116: LD_INT 6
49118: PPUSH
49119: LD_VAR 0 1
49123: PPUSH
49124: CALL_OW 321
49128: PUSH
49129: LD_INT 2
49131: EQUAL
49132: ST_TO_ADDR
49133: GO 49422
49135: LD_INT 22
49137: DOUBLE
49138: EQUAL
49139: IFTRUE 49149
49141: LD_INT 36
49143: DOUBLE
49144: EQUAL
49145: IFTRUE 49149
49147: GO 49174
49149: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49150: LD_ADDR_VAR 0 3
49154: PUSH
49155: LD_INT 15
49157: PPUSH
49158: LD_VAR 0 1
49162: PPUSH
49163: CALL_OW 321
49167: PUSH
49168: LD_INT 2
49170: EQUAL
49171: ST_TO_ADDR
49172: GO 49422
49174: LD_INT 30
49176: DOUBLE
49177: EQUAL
49178: IFTRUE 49182
49180: GO 49207
49182: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49183: LD_ADDR_VAR 0 3
49187: PUSH
49188: LD_INT 20
49190: PPUSH
49191: LD_VAR 0 1
49195: PPUSH
49196: CALL_OW 321
49200: PUSH
49201: LD_INT 2
49203: EQUAL
49204: ST_TO_ADDR
49205: GO 49422
49207: LD_INT 28
49209: DOUBLE
49210: EQUAL
49211: IFTRUE 49221
49213: LD_INT 21
49215: DOUBLE
49216: EQUAL
49217: IFTRUE 49221
49219: GO 49246
49221: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49222: LD_ADDR_VAR 0 3
49226: PUSH
49227: LD_INT 21
49229: PPUSH
49230: LD_VAR 0 1
49234: PPUSH
49235: CALL_OW 321
49239: PUSH
49240: LD_INT 2
49242: EQUAL
49243: ST_TO_ADDR
49244: GO 49422
49246: LD_INT 16
49248: DOUBLE
49249: EQUAL
49250: IFTRUE 49254
49252: GO 49281
49254: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49255: LD_ADDR_VAR 0 3
49259: PUSH
49260: LD_EXP 133
49264: PPUSH
49265: LD_VAR 0 1
49269: PPUSH
49270: CALL_OW 321
49274: PUSH
49275: LD_INT 2
49277: EQUAL
49278: ST_TO_ADDR
49279: GO 49422
49281: LD_INT 19
49283: DOUBLE
49284: EQUAL
49285: IFTRUE 49295
49287: LD_INT 23
49289: DOUBLE
49290: EQUAL
49291: IFTRUE 49295
49293: GO 49322
49295: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49296: LD_ADDR_VAR 0 3
49300: PUSH
49301: LD_EXP 132
49305: PPUSH
49306: LD_VAR 0 1
49310: PPUSH
49311: CALL_OW 321
49315: PUSH
49316: LD_INT 2
49318: EQUAL
49319: ST_TO_ADDR
49320: GO 49422
49322: LD_INT 17
49324: DOUBLE
49325: EQUAL
49326: IFTRUE 49330
49328: GO 49355
49330: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49331: LD_ADDR_VAR 0 3
49335: PUSH
49336: LD_INT 39
49338: PPUSH
49339: LD_VAR 0 1
49343: PPUSH
49344: CALL_OW 321
49348: PUSH
49349: LD_INT 2
49351: EQUAL
49352: ST_TO_ADDR
49353: GO 49422
49355: LD_INT 18
49357: DOUBLE
49358: EQUAL
49359: IFTRUE 49363
49361: GO 49388
49363: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49364: LD_ADDR_VAR 0 3
49368: PUSH
49369: LD_INT 40
49371: PPUSH
49372: LD_VAR 0 1
49376: PPUSH
49377: CALL_OW 321
49381: PUSH
49382: LD_INT 2
49384: EQUAL
49385: ST_TO_ADDR
49386: GO 49422
49388: LD_INT 27
49390: DOUBLE
49391: EQUAL
49392: IFTRUE 49396
49394: GO 49421
49396: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49397: LD_ADDR_VAR 0 3
49401: PUSH
49402: LD_INT 35
49404: PPUSH
49405: LD_VAR 0 1
49409: PPUSH
49410: CALL_OW 321
49414: PUSH
49415: LD_INT 2
49417: EQUAL
49418: ST_TO_ADDR
49419: GO 49422
49421: POP
// end ;
49422: LD_VAR 0 3
49426: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49427: LD_INT 0
49429: PPUSH
49430: PPUSH
49431: PPUSH
49432: PPUSH
49433: PPUSH
49434: PPUSH
49435: PPUSH
49436: PPUSH
49437: PPUSH
49438: PPUSH
49439: PPUSH
// result := false ;
49440: LD_ADDR_VAR 0 6
49444: PUSH
49445: LD_INT 0
49447: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49448: LD_VAR 0 1
49452: NOT
49453: PUSH
49454: LD_VAR 0 1
49458: PPUSH
49459: CALL_OW 266
49463: PUSH
49464: LD_INT 0
49466: PUSH
49467: LD_INT 1
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: IN
49474: NOT
49475: OR
49476: PUSH
49477: LD_VAR 0 2
49481: NOT
49482: OR
49483: PUSH
49484: LD_VAR 0 5
49488: PUSH
49489: LD_INT 0
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: LD_INT 2
49497: PUSH
49498: LD_INT 3
49500: PUSH
49501: LD_INT 4
49503: PUSH
49504: LD_INT 5
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: IN
49515: NOT
49516: OR
49517: PUSH
49518: LD_VAR 0 3
49522: PPUSH
49523: LD_VAR 0 4
49527: PPUSH
49528: CALL_OW 488
49532: NOT
49533: OR
49534: IFFALSE 49538
// exit ;
49536: GO 50274
// side := GetSide ( depot ) ;
49538: LD_ADDR_VAR 0 9
49542: PUSH
49543: LD_VAR 0 1
49547: PPUSH
49548: CALL_OW 255
49552: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49553: LD_VAR 0 9
49557: PPUSH
49558: LD_VAR 0 2
49562: PPUSH
49563: CALL 49047 0 2
49567: NOT
49568: IFFALSE 49572
// exit ;
49570: GO 50274
// pom := GetBase ( depot ) ;
49572: LD_ADDR_VAR 0 10
49576: PUSH
49577: LD_VAR 0 1
49581: PPUSH
49582: CALL_OW 274
49586: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49587: LD_ADDR_VAR 0 11
49591: PUSH
49592: LD_VAR 0 2
49596: PPUSH
49597: LD_VAR 0 1
49601: PPUSH
49602: CALL_OW 248
49606: PPUSH
49607: CALL_OW 450
49611: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49612: LD_VAR 0 10
49616: PPUSH
49617: LD_INT 1
49619: PPUSH
49620: CALL_OW 275
49624: PUSH
49625: LD_VAR 0 11
49629: PUSH
49630: LD_INT 1
49632: ARRAY
49633: GREATEREQUAL
49634: PUSH
49635: LD_VAR 0 10
49639: PPUSH
49640: LD_INT 2
49642: PPUSH
49643: CALL_OW 275
49647: PUSH
49648: LD_VAR 0 11
49652: PUSH
49653: LD_INT 2
49655: ARRAY
49656: GREATEREQUAL
49657: AND
49658: PUSH
49659: LD_VAR 0 10
49663: PPUSH
49664: LD_INT 3
49666: PPUSH
49667: CALL_OW 275
49671: PUSH
49672: LD_VAR 0 11
49676: PUSH
49677: LD_INT 3
49679: ARRAY
49680: GREATEREQUAL
49681: AND
49682: NOT
49683: IFFALSE 49687
// exit ;
49685: GO 50274
// if GetBType ( depot ) = b_depot then
49687: LD_VAR 0 1
49691: PPUSH
49692: CALL_OW 266
49696: PUSH
49697: LD_INT 0
49699: EQUAL
49700: IFFALSE 49712
// dist := 28 else
49702: LD_ADDR_VAR 0 14
49706: PUSH
49707: LD_INT 28
49709: ST_TO_ADDR
49710: GO 49720
// dist := 36 ;
49712: LD_ADDR_VAR 0 14
49716: PUSH
49717: LD_INT 36
49719: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
49720: LD_VAR 0 1
49724: PPUSH
49725: LD_VAR 0 3
49729: PPUSH
49730: LD_VAR 0 4
49734: PPUSH
49735: CALL_OW 297
49739: PUSH
49740: LD_VAR 0 14
49744: GREATER
49745: IFFALSE 49749
// exit ;
49747: GO 50274
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49749: LD_ADDR_VAR 0 12
49753: PUSH
49754: LD_VAR 0 2
49758: PPUSH
49759: LD_VAR 0 3
49763: PPUSH
49764: LD_VAR 0 4
49768: PPUSH
49769: LD_VAR 0 5
49773: PPUSH
49774: LD_VAR 0 1
49778: PPUSH
49779: CALL_OW 248
49783: PPUSH
49784: LD_INT 0
49786: PPUSH
49787: CALL 50279 0 6
49791: ST_TO_ADDR
// if not hexes then
49792: LD_VAR 0 12
49796: NOT
49797: IFFALSE 49801
// exit ;
49799: GO 50274
// hex := GetHexInfo ( x , y ) ;
49801: LD_ADDR_VAR 0 15
49805: PUSH
49806: LD_VAR 0 3
49810: PPUSH
49811: LD_VAR 0 4
49815: PPUSH
49816: CALL_OW 546
49820: ST_TO_ADDR
// if hex [ 1 ] then
49821: LD_VAR 0 15
49825: PUSH
49826: LD_INT 1
49828: ARRAY
49829: IFFALSE 49833
// exit ;
49831: GO 50274
// height := hex [ 2 ] ;
49833: LD_ADDR_VAR 0 13
49837: PUSH
49838: LD_VAR 0 15
49842: PUSH
49843: LD_INT 2
49845: ARRAY
49846: ST_TO_ADDR
// for i = 1 to hexes do
49847: LD_ADDR_VAR 0 7
49851: PUSH
49852: DOUBLE
49853: LD_INT 1
49855: DEC
49856: ST_TO_ADDR
49857: LD_VAR 0 12
49861: PUSH
49862: FOR_TO
49863: IFFALSE 50193
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49865: LD_VAR 0 12
49869: PUSH
49870: LD_VAR 0 7
49874: ARRAY
49875: PUSH
49876: LD_INT 1
49878: ARRAY
49879: PPUSH
49880: LD_VAR 0 12
49884: PUSH
49885: LD_VAR 0 7
49889: ARRAY
49890: PUSH
49891: LD_INT 2
49893: ARRAY
49894: PPUSH
49895: CALL_OW 488
49899: NOT
49900: PUSH
49901: LD_VAR 0 12
49905: PUSH
49906: LD_VAR 0 7
49910: ARRAY
49911: PUSH
49912: LD_INT 1
49914: ARRAY
49915: PPUSH
49916: LD_VAR 0 12
49920: PUSH
49921: LD_VAR 0 7
49925: ARRAY
49926: PUSH
49927: LD_INT 2
49929: ARRAY
49930: PPUSH
49931: CALL_OW 428
49935: PUSH
49936: LD_INT 0
49938: GREATER
49939: OR
49940: PUSH
49941: LD_VAR 0 12
49945: PUSH
49946: LD_VAR 0 7
49950: ARRAY
49951: PUSH
49952: LD_INT 1
49954: ARRAY
49955: PPUSH
49956: LD_VAR 0 12
49960: PUSH
49961: LD_VAR 0 7
49965: ARRAY
49966: PUSH
49967: LD_INT 2
49969: ARRAY
49970: PPUSH
49971: CALL_OW 351
49975: OR
49976: IFFALSE 49982
// exit ;
49978: POP
49979: POP
49980: GO 50274
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49982: LD_ADDR_VAR 0 8
49986: PUSH
49987: LD_VAR 0 12
49991: PUSH
49992: LD_VAR 0 7
49996: ARRAY
49997: PUSH
49998: LD_INT 1
50000: ARRAY
50001: PPUSH
50002: LD_VAR 0 12
50006: PUSH
50007: LD_VAR 0 7
50011: ARRAY
50012: PUSH
50013: LD_INT 2
50015: ARRAY
50016: PPUSH
50017: CALL_OW 546
50021: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50022: LD_VAR 0 8
50026: PUSH
50027: LD_INT 1
50029: ARRAY
50030: PUSH
50031: LD_VAR 0 8
50035: PUSH
50036: LD_INT 2
50038: ARRAY
50039: PUSH
50040: LD_VAR 0 13
50044: PUSH
50045: LD_INT 2
50047: PLUS
50048: GREATER
50049: OR
50050: PUSH
50051: LD_VAR 0 8
50055: PUSH
50056: LD_INT 2
50058: ARRAY
50059: PUSH
50060: LD_VAR 0 13
50064: PUSH
50065: LD_INT 2
50067: MINUS
50068: LESS
50069: OR
50070: PUSH
50071: LD_VAR 0 8
50075: PUSH
50076: LD_INT 3
50078: ARRAY
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: LD_INT 8
50085: PUSH
50086: LD_INT 9
50088: PUSH
50089: LD_INT 10
50091: PUSH
50092: LD_INT 11
50094: PUSH
50095: LD_INT 12
50097: PUSH
50098: LD_INT 13
50100: PUSH
50101: LD_INT 16
50103: PUSH
50104: LD_INT 17
50106: PUSH
50107: LD_INT 18
50109: PUSH
50110: LD_INT 19
50112: PUSH
50113: LD_INT 20
50115: PUSH
50116: LD_INT 21
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: IN
50134: NOT
50135: OR
50136: PUSH
50137: LD_VAR 0 8
50141: PUSH
50142: LD_INT 5
50144: ARRAY
50145: NOT
50146: OR
50147: PUSH
50148: LD_VAR 0 8
50152: PUSH
50153: LD_INT 6
50155: ARRAY
50156: PUSH
50157: LD_INT 1
50159: PUSH
50160: LD_INT 2
50162: PUSH
50163: LD_INT 7
50165: PUSH
50166: LD_INT 9
50168: PUSH
50169: LD_INT 10
50171: PUSH
50172: LD_INT 11
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: IN
50183: NOT
50184: OR
50185: IFFALSE 50191
// exit ;
50187: POP
50188: POP
50189: GO 50274
// end ;
50191: GO 49862
50193: POP
50194: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50195: LD_VAR 0 9
50199: PPUSH
50200: LD_VAR 0 3
50204: PPUSH
50205: LD_VAR 0 4
50209: PPUSH
50210: LD_INT 20
50212: PPUSH
50213: CALL 42220 0 4
50217: PUSH
50218: LD_INT 4
50220: ARRAY
50221: IFFALSE 50225
// exit ;
50223: GO 50274
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50225: LD_VAR 0 2
50229: PUSH
50230: LD_INT 29
50232: PUSH
50233: LD_INT 30
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: IN
50240: PUSH
50241: LD_VAR 0 3
50245: PPUSH
50246: LD_VAR 0 4
50250: PPUSH
50251: LD_VAR 0 9
50255: PPUSH
50256: CALL_OW 440
50260: NOT
50261: AND
50262: IFFALSE 50266
// exit ;
50264: GO 50274
// result := true ;
50266: LD_ADDR_VAR 0 6
50270: PUSH
50271: LD_INT 1
50273: ST_TO_ADDR
// end ;
50274: LD_VAR 0 6
50278: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50279: LD_INT 0
50281: PPUSH
50282: PPUSH
50283: PPUSH
50284: PPUSH
50285: PPUSH
50286: PPUSH
50287: PPUSH
50288: PPUSH
50289: PPUSH
50290: PPUSH
50291: PPUSH
50292: PPUSH
50293: PPUSH
50294: PPUSH
50295: PPUSH
50296: PPUSH
50297: PPUSH
50298: PPUSH
50299: PPUSH
50300: PPUSH
50301: PPUSH
50302: PPUSH
50303: PPUSH
50304: PPUSH
50305: PPUSH
50306: PPUSH
50307: PPUSH
50308: PPUSH
50309: PPUSH
50310: PPUSH
50311: PPUSH
50312: PPUSH
50313: PPUSH
50314: PPUSH
50315: PPUSH
50316: PPUSH
50317: PPUSH
50318: PPUSH
50319: PPUSH
50320: PPUSH
50321: PPUSH
50322: PPUSH
50323: PPUSH
50324: PPUSH
50325: PPUSH
50326: PPUSH
50327: PPUSH
50328: PPUSH
50329: PPUSH
50330: PPUSH
50331: PPUSH
50332: PPUSH
50333: PPUSH
50334: PPUSH
50335: PPUSH
50336: PPUSH
50337: PPUSH
50338: PPUSH
// result = [ ] ;
50339: LD_ADDR_VAR 0 7
50343: PUSH
50344: EMPTY
50345: ST_TO_ADDR
// temp_list = [ ] ;
50346: LD_ADDR_VAR 0 9
50350: PUSH
50351: EMPTY
50352: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50353: LD_VAR 0 4
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: LD_INT 1
50363: PUSH
50364: LD_INT 2
50366: PUSH
50367: LD_INT 3
50369: PUSH
50370: LD_INT 4
50372: PUSH
50373: LD_INT 5
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: IN
50384: NOT
50385: PUSH
50386: LD_VAR 0 1
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: LD_INT 1
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: IN
50401: PUSH
50402: LD_VAR 0 5
50406: PUSH
50407: LD_INT 1
50409: PUSH
50410: LD_INT 2
50412: PUSH
50413: LD_INT 3
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: LIST
50420: IN
50421: NOT
50422: AND
50423: OR
50424: IFFALSE 50428
// exit ;
50426: GO 68819
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50428: LD_VAR 0 1
50432: PUSH
50433: LD_INT 6
50435: PUSH
50436: LD_INT 7
50438: PUSH
50439: LD_INT 8
50441: PUSH
50442: LD_INT 13
50444: PUSH
50445: LD_INT 12
50447: PUSH
50448: LD_INT 15
50450: PUSH
50451: LD_INT 11
50453: PUSH
50454: LD_INT 14
50456: PUSH
50457: LD_INT 10
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: IN
50471: IFFALSE 50481
// btype = b_lab ;
50473: LD_ADDR_VAR 0 1
50477: PUSH
50478: LD_INT 6
50480: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50481: LD_VAR 0 6
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: LD_INT 1
50491: PUSH
50492: LD_INT 2
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: LIST
50499: IN
50500: NOT
50501: PUSH
50502: LD_VAR 0 1
50506: PUSH
50507: LD_INT 0
50509: PUSH
50510: LD_INT 1
50512: PUSH
50513: LD_INT 2
50515: PUSH
50516: LD_INT 3
50518: PUSH
50519: LD_INT 6
50521: PUSH
50522: LD_INT 36
50524: PUSH
50525: LD_INT 4
50527: PUSH
50528: LD_INT 5
50530: PUSH
50531: LD_INT 31
50533: PUSH
50534: LD_INT 32
50536: PUSH
50537: LD_INT 33
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: IN
50553: NOT
50554: PUSH
50555: LD_VAR 0 6
50559: PUSH
50560: LD_INT 1
50562: EQUAL
50563: AND
50564: OR
50565: PUSH
50566: LD_VAR 0 1
50570: PUSH
50571: LD_INT 2
50573: PUSH
50574: LD_INT 3
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: IN
50581: NOT
50582: PUSH
50583: LD_VAR 0 6
50587: PUSH
50588: LD_INT 2
50590: EQUAL
50591: AND
50592: OR
50593: IFFALSE 50603
// mode = 0 ;
50595: LD_ADDR_VAR 0 6
50599: PUSH
50600: LD_INT 0
50602: ST_TO_ADDR
// case mode of 0 :
50603: LD_VAR 0 6
50607: PUSH
50608: LD_INT 0
50610: DOUBLE
50611: EQUAL
50612: IFTRUE 50616
50614: GO 62069
50616: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50617: LD_ADDR_VAR 0 11
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 1
50655: PUSH
50656: LD_INT 1
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 0
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 1
50675: NEG
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 1
50686: NEG
50687: PUSH
50688: LD_INT 1
50690: NEG
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 1
50698: NEG
50699: PUSH
50700: LD_INT 2
50702: NEG
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: LD_INT 2
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: LD_INT 2
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 0
50742: PUSH
50743: LD_INT 2
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 1
50752: NEG
50753: PUSH
50754: LD_INT 1
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 1
50763: PUSH
50764: LD_INT 3
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 0
50773: PUSH
50774: LD_INT 3
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: LD_INT 2
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50810: LD_ADDR_VAR 0 12
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: LD_INT 1
50830: NEG
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 1
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: PUSH
50849: LD_INT 1
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: LD_INT 1
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 1
50868: NEG
50869: PUSH
50870: LD_INT 0
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: LD_INT 1
50883: NEG
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: LD_INT 1
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 2
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 2
50912: PUSH
50913: LD_INT 1
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 1
50922: NEG
50923: PUSH
50924: LD_INT 1
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 2
50933: NEG
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 2
50944: NEG
50945: PUSH
50946: LD_INT 1
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 2
50956: NEG
50957: PUSH
50958: LD_INT 1
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 3
50967: NEG
50968: PUSH
50969: LD_INT 0
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 3
50978: NEG
50979: PUSH
50980: LD_INT 1
50982: NEG
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51006: LD_ADDR_VAR 0 13
51010: PUSH
51011: LD_INT 0
51013: PUSH
51014: LD_INT 0
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: LD_INT 1
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 1
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: LD_INT 1
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 1
51064: NEG
51065: PUSH
51066: LD_INT 0
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 1
51075: NEG
51076: PUSH
51077: LD_INT 1
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 1
51087: NEG
51088: PUSH
51089: LD_INT 2
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 2
51099: PUSH
51100: LD_INT 1
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 2
51109: PUSH
51110: LD_INT 2
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: PUSH
51120: LD_INT 2
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 2
51129: NEG
51130: PUSH
51131: LD_INT 1
51133: NEG
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 2
51141: NEG
51142: PUSH
51143: LD_INT 2
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 2
51153: NEG
51154: PUSH
51155: LD_INT 3
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 3
51165: NEG
51166: PUSH
51167: LD_INT 2
51169: NEG
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 3
51177: NEG
51178: PUSH
51179: LD_INT 3
51181: NEG
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51205: LD_ADDR_VAR 0 14
51209: PUSH
51210: LD_INT 0
51212: PUSH
51213: LD_INT 0
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 0
51222: PUSH
51223: LD_INT 1
51225: NEG
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 1
51233: PUSH
51234: LD_INT 0
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 1
51243: PUSH
51244: LD_INT 1
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 0
51253: PUSH
51254: LD_INT 1
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 1
51263: NEG
51264: PUSH
51265: LD_INT 0
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 1
51274: NEG
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 1
51286: NEG
51287: PUSH
51288: LD_INT 2
51290: NEG
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 0
51298: PUSH
51299: LD_INT 2
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 1
51309: PUSH
51310: LD_INT 1
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: LD_INT 2
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: LD_INT 2
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 1
51340: NEG
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 1
51351: NEG
51352: PUSH
51353: LD_INT 3
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 0
51363: PUSH
51364: LD_INT 3
51366: NEG
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: LD_INT 2
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51401: LD_ADDR_VAR 0 15
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: LD_INT 0
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 1
51429: PUSH
51430: LD_INT 0
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: PUSH
51440: LD_INT 1
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: LD_INT 1
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 1
51459: NEG
51460: PUSH
51461: LD_INT 0
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 1
51470: NEG
51471: PUSH
51472: LD_INT 1
51474: NEG
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: LD_INT 1
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 2
51493: PUSH
51494: LD_INT 0
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 2
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 1
51513: NEG
51514: PUSH
51515: LD_INT 1
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 2
51524: NEG
51525: PUSH
51526: LD_INT 0
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 2
51535: NEG
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 2
51547: PUSH
51548: LD_INT 1
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 3
51558: PUSH
51559: LD_INT 0
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 3
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51594: LD_ADDR_VAR 0 16
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 0
51611: PUSH
51612: LD_INT 1
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: PUSH
51623: LD_INT 0
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: LD_INT 1
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 1
51652: NEG
51653: PUSH
51654: LD_INT 0
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: LD_INT 1
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 1
51675: NEG
51676: PUSH
51677: LD_INT 2
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 2
51687: PUSH
51688: LD_INT 1
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 2
51697: PUSH
51698: LD_INT 2
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: LD_INT 2
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 2
51717: NEG
51718: PUSH
51719: LD_INT 1
51721: NEG
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 2
51729: NEG
51730: PUSH
51731: LD_INT 2
51733: NEG
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 3
51741: PUSH
51742: LD_INT 2
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 3
51751: PUSH
51752: LD_INT 3
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 2
51761: PUSH
51762: LD_INT 3
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51787: LD_ADDR_VAR 0 17
51791: PUSH
51792: LD_INT 0
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 0
51804: PUSH
51805: LD_INT 1
51807: NEG
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 1
51815: PUSH
51816: LD_INT 0
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 1
51825: PUSH
51826: LD_INT 1
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: LD_INT 1
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 1
51845: NEG
51846: PUSH
51847: LD_INT 0
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 1
51856: NEG
51857: PUSH
51858: LD_INT 1
51860: NEG
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: LD_INT 2
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 0
51880: PUSH
51881: LD_INT 2
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 1
51891: PUSH
51892: LD_INT 1
51894: NEG
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 2
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 2
51912: PUSH
51913: LD_INT 1
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 2
51922: PUSH
51923: LD_INT 2
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 1
51932: PUSH
51933: LD_INT 2
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: LD_INT 2
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 2
51963: NEG
51964: PUSH
51965: LD_INT 0
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 2
51974: NEG
51975: PUSH
51976: LD_INT 1
51978: NEG
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 2
51986: NEG
51987: PUSH
51988: LD_INT 2
51990: NEG
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52017: LD_ADDR_VAR 0 18
52021: PUSH
52022: LD_INT 0
52024: PUSH
52025: LD_INT 0
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 0
52034: PUSH
52035: LD_INT 1
52037: NEG
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 1
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: LD_INT 1
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: LD_INT 1
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 1
52075: NEG
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 1
52086: NEG
52087: PUSH
52088: LD_INT 1
52090: NEG
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: LD_INT 2
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: LD_INT 2
52113: NEG
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 1
52121: PUSH
52122: LD_INT 1
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 2
52132: PUSH
52133: LD_INT 0
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 2
52142: PUSH
52143: LD_INT 1
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 2
52152: PUSH
52153: LD_INT 2
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 1
52162: PUSH
52163: LD_INT 2
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: LD_INT 2
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: LD_INT 1
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 2
52193: NEG
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 2
52204: NEG
52205: PUSH
52206: LD_INT 1
52208: NEG
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 2
52216: NEG
52217: PUSH
52218: LD_INT 2
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52247: LD_ADDR_VAR 0 19
52251: PUSH
52252: LD_INT 0
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: LD_INT 1
52267: NEG
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 1
52275: PUSH
52276: LD_INT 0
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 1
52285: PUSH
52286: LD_INT 1
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: LD_INT 1
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 1
52305: NEG
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 1
52316: NEG
52317: PUSH
52318: LD_INT 1
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: LD_INT 2
52332: NEG
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: LD_INT 2
52343: NEG
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 1
52351: PUSH
52352: LD_INT 1
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 2
52362: PUSH
52363: LD_INT 0
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 2
52372: PUSH
52373: LD_INT 1
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 2
52382: PUSH
52383: LD_INT 2
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: LD_INT 2
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: LD_INT 2
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 1
52412: NEG
52413: PUSH
52414: LD_INT 1
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 2
52423: NEG
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 2
52434: NEG
52435: PUSH
52436: LD_INT 1
52438: NEG
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 2
52446: NEG
52447: PUSH
52448: LD_INT 2
52450: NEG
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52477: LD_ADDR_VAR 0 20
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: LD_INT 0
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: LD_INT 1
52497: NEG
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 1
52505: PUSH
52506: LD_INT 0
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: PUSH
52516: LD_INT 1
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 0
52525: PUSH
52526: LD_INT 1
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 1
52535: NEG
52536: PUSH
52537: LD_INT 0
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 1
52546: NEG
52547: PUSH
52548: LD_INT 1
52550: NEG
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: LD_INT 2
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: LD_INT 2
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 1
52581: PUSH
52582: LD_INT 1
52584: NEG
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 2
52592: PUSH
52593: LD_INT 0
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 2
52602: PUSH
52603: LD_INT 1
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 2
52612: PUSH
52613: LD_INT 2
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 1
52622: PUSH
52623: LD_INT 2
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: LD_INT 2
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 1
52642: NEG
52643: PUSH
52644: LD_INT 1
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 2
52653: NEG
52654: PUSH
52655: LD_INT 0
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 2
52664: NEG
52665: PUSH
52666: LD_INT 1
52668: NEG
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 2
52676: NEG
52677: PUSH
52678: LD_INT 2
52680: NEG
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52707: LD_ADDR_VAR 0 21
52711: PUSH
52712: LD_INT 0
52714: PUSH
52715: LD_INT 0
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 0
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 1
52735: PUSH
52736: LD_INT 0
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 1
52745: PUSH
52746: LD_INT 1
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: LD_INT 1
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 1
52765: NEG
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 1
52776: NEG
52777: PUSH
52778: LD_INT 1
52780: NEG
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 1
52788: NEG
52789: PUSH
52790: LD_INT 2
52792: NEG
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: LD_INT 2
52803: NEG
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 1
52811: PUSH
52812: LD_INT 1
52814: NEG
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 2
52822: PUSH
52823: LD_INT 0
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 2
52832: PUSH
52833: LD_INT 1
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 2
52842: PUSH
52843: LD_INT 2
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 1
52852: PUSH
52853: LD_INT 2
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 0
52862: PUSH
52863: LD_INT 2
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 1
52872: NEG
52873: PUSH
52874: LD_INT 1
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 2
52883: NEG
52884: PUSH
52885: LD_INT 0
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 2
52894: NEG
52895: PUSH
52896: LD_INT 1
52898: NEG
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 2
52906: NEG
52907: PUSH
52908: LD_INT 2
52910: NEG
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52937: LD_ADDR_VAR 0 22
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: LD_INT 0
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: LD_INT 1
52957: NEG
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: LD_INT 1
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 0
52985: PUSH
52986: LD_INT 1
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: NEG
52996: PUSH
52997: LD_INT 0
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 1
53006: NEG
53007: PUSH
53008: LD_INT 1
53010: NEG
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 1
53018: NEG
53019: PUSH
53020: LD_INT 2
53022: NEG
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: LD_INT 2
53033: NEG
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 1
53041: PUSH
53042: LD_INT 1
53044: NEG
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 2
53052: PUSH
53053: LD_INT 0
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 2
53062: PUSH
53063: LD_INT 1
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 2
53072: PUSH
53073: LD_INT 2
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: LD_INT 2
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: LD_INT 2
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: LD_INT 1
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 2
53113: NEG
53114: PUSH
53115: LD_INT 0
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 2
53124: NEG
53125: PUSH
53126: LD_INT 1
53128: NEG
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 2
53136: NEG
53137: PUSH
53138: LD_INT 2
53140: NEG
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53167: LD_ADDR_VAR 0 23
53171: PUSH
53172: LD_INT 0
53174: PUSH
53175: LD_INT 0
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 0
53184: PUSH
53185: LD_INT 1
53187: NEG
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 1
53195: PUSH
53196: LD_INT 0
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 1
53205: PUSH
53206: LD_INT 1
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: LD_INT 1
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 1
53225: NEG
53226: PUSH
53227: LD_INT 0
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 1
53236: NEG
53237: PUSH
53238: LD_INT 1
53240: NEG
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 1
53248: NEG
53249: PUSH
53250: LD_INT 2
53252: NEG
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: LD_INT 2
53263: NEG
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 1
53271: PUSH
53272: LD_INT 1
53274: NEG
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 2
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 2
53292: PUSH
53293: LD_INT 1
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 2
53302: PUSH
53303: LD_INT 2
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 1
53312: PUSH
53313: LD_INT 2
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: LD_INT 2
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 1
53332: NEG
53333: PUSH
53334: LD_INT 1
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 2
53343: NEG
53344: PUSH
53345: LD_INT 0
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 2
53354: NEG
53355: PUSH
53356: LD_INT 1
53358: NEG
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 2
53366: NEG
53367: PUSH
53368: LD_INT 2
53370: NEG
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 2
53378: NEG
53379: PUSH
53380: LD_INT 3
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 1
53390: NEG
53391: PUSH
53392: LD_INT 3
53394: NEG
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 1
53402: PUSH
53403: LD_INT 2
53405: NEG
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 2
53413: PUSH
53414: LD_INT 1
53416: NEG
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53447: LD_ADDR_VAR 0 24
53451: PUSH
53452: LD_INT 0
53454: PUSH
53455: LD_INT 0
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 0
53464: PUSH
53465: LD_INT 1
53467: NEG
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 1
53475: PUSH
53476: LD_INT 0
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 1
53485: PUSH
53486: LD_INT 1
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: LD_INT 1
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 1
53505: NEG
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: NEG
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: LD_INT 2
53532: NEG
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: LD_INT 2
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 1
53551: PUSH
53552: LD_INT 1
53554: NEG
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 2
53562: PUSH
53563: LD_INT 0
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 2
53572: PUSH
53573: LD_INT 1
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 2
53582: PUSH
53583: LD_INT 2
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: LD_INT 2
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: LD_INT 2
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 1
53612: NEG
53613: PUSH
53614: LD_INT 1
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 2
53623: NEG
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 2
53634: NEG
53635: PUSH
53636: LD_INT 1
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 2
53646: NEG
53647: PUSH
53648: LD_INT 2
53650: NEG
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 1
53658: PUSH
53659: LD_INT 2
53661: NEG
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 2
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 3
53680: PUSH
53681: LD_INT 1
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 3
53690: PUSH
53691: LD_INT 2
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53723: LD_ADDR_VAR 0 25
53727: PUSH
53728: LD_INT 0
53730: PUSH
53731: LD_INT 0
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 0
53740: PUSH
53741: LD_INT 1
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 1
53751: PUSH
53752: LD_INT 0
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: LD_INT 1
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 0
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 1
53781: NEG
53782: PUSH
53783: LD_INT 0
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 1
53792: NEG
53793: PUSH
53794: LD_INT 1
53796: NEG
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 1
53804: NEG
53805: PUSH
53806: LD_INT 2
53808: NEG
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 0
53816: PUSH
53817: LD_INT 2
53819: NEG
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: PUSH
53828: LD_INT 1
53830: NEG
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 2
53838: PUSH
53839: LD_INT 0
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 2
53848: PUSH
53849: LD_INT 1
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 2
53858: PUSH
53859: LD_INT 2
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 1
53868: PUSH
53869: LD_INT 2
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: LD_INT 2
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 1
53888: NEG
53889: PUSH
53890: LD_INT 1
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 2
53899: NEG
53900: PUSH
53901: LD_INT 0
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 2
53910: NEG
53911: PUSH
53912: LD_INT 1
53914: NEG
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 2
53922: NEG
53923: PUSH
53924: LD_INT 2
53926: NEG
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 3
53934: PUSH
53935: LD_INT 1
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 3
53944: PUSH
53945: LD_INT 2
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 2
53954: PUSH
53955: LD_INT 3
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 1
53964: PUSH
53965: LD_INT 3
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53997: LD_ADDR_VAR 0 26
54001: PUSH
54002: LD_INT 0
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: LD_INT 1
54017: NEG
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 1
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 0
54045: PUSH
54046: LD_INT 1
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: NEG
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 1
54078: NEG
54079: PUSH
54080: LD_INT 2
54082: NEG
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 0
54090: PUSH
54091: LD_INT 2
54093: NEG
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 1
54101: PUSH
54102: LD_INT 1
54104: NEG
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 2
54112: PUSH
54113: LD_INT 0
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 2
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 2
54132: PUSH
54133: LD_INT 2
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 1
54142: PUSH
54143: LD_INT 2
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: LD_INT 2
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 1
54162: NEG
54163: PUSH
54164: LD_INT 1
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 2
54173: NEG
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 2
54184: NEG
54185: PUSH
54186: LD_INT 1
54188: NEG
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 2
54196: NEG
54197: PUSH
54198: LD_INT 2
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 2
54208: PUSH
54209: LD_INT 3
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 1
54218: PUSH
54219: LD_INT 3
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: LD_INT 2
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 2
54239: NEG
54240: PUSH
54241: LD_INT 1
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54273: LD_ADDR_VAR 0 27
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: LD_INT 0
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 0
54290: PUSH
54291: LD_INT 1
54293: NEG
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: LD_INT 0
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 1
54311: PUSH
54312: LD_INT 1
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 0
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 1
54331: NEG
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 1
54342: NEG
54343: PUSH
54344: LD_INT 1
54346: NEG
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: PUSH
54356: LD_INT 2
54358: NEG
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: LD_INT 2
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: LD_INT 1
54380: NEG
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 2
54388: PUSH
54389: LD_INT 0
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 2
54398: PUSH
54399: LD_INT 1
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 2
54408: PUSH
54409: LD_INT 2
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: PUSH
54419: LD_INT 2
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: LD_INT 2
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: LD_INT 1
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 2
54449: NEG
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 2
54460: NEG
54461: PUSH
54462: LD_INT 1
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 2
54472: NEG
54473: PUSH
54474: LD_INT 2
54476: NEG
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: LD_INT 2
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 2
54495: NEG
54496: PUSH
54497: LD_INT 1
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 3
54506: NEG
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 3
54518: NEG
54519: PUSH
54520: LD_INT 2
54522: NEG
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54553: LD_ADDR_VAR 0 28
54557: PUSH
54558: LD_INT 0
54560: PUSH
54561: LD_INT 0
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 0
54570: PUSH
54571: LD_INT 1
54573: NEG
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 1
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: LD_INT 1
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 0
54601: PUSH
54602: LD_INT 1
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 1
54611: NEG
54612: PUSH
54613: LD_INT 0
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 1
54622: NEG
54623: PUSH
54624: LD_INT 1
54626: NEG
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 1
54634: NEG
54635: PUSH
54636: LD_INT 2
54638: NEG
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 0
54646: PUSH
54647: LD_INT 2
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 1
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 2
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 2
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 2
54688: PUSH
54689: LD_INT 2
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 1
54698: PUSH
54699: LD_INT 2
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: LD_INT 2
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 1
54718: NEG
54719: PUSH
54720: LD_INT 1
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 2
54729: NEG
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 2
54740: NEG
54741: PUSH
54742: LD_INT 1
54744: NEG
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 2
54752: NEG
54753: PUSH
54754: LD_INT 2
54756: NEG
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 2
54764: NEG
54765: PUSH
54766: LD_INT 3
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 1
54776: NEG
54777: PUSH
54778: LD_INT 3
54780: NEG
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 3
54788: NEG
54789: PUSH
54790: LD_INT 1
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 3
54800: NEG
54801: PUSH
54802: LD_INT 2
54804: NEG
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54835: LD_ADDR_VAR 0 29
54839: PUSH
54840: LD_INT 0
54842: PUSH
54843: LD_INT 0
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 0
54852: PUSH
54853: LD_INT 1
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 1
54863: PUSH
54864: LD_INT 0
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 1
54873: PUSH
54874: LD_INT 1
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: LD_INT 1
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 1
54893: NEG
54894: PUSH
54895: LD_INT 0
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 1
54904: NEG
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 1
54916: NEG
54917: PUSH
54918: LD_INT 2
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 0
54928: PUSH
54929: LD_INT 2
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: LD_INT 1
54942: NEG
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 2
54950: PUSH
54951: LD_INT 0
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 2
54960: PUSH
54961: LD_INT 1
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 1
54970: PUSH
54971: LD_INT 2
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 0
54980: PUSH
54981: LD_INT 2
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 1
54990: NEG
54991: PUSH
54992: LD_INT 1
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 2
55001: NEG
55002: PUSH
55003: LD_INT 1
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 2
55013: NEG
55014: PUSH
55015: LD_INT 2
55017: NEG
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 2
55025: NEG
55026: PUSH
55027: LD_INT 3
55029: NEG
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 2
55037: PUSH
55038: LD_INT 1
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 3
55048: PUSH
55049: LD_INT 1
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 1
55058: PUSH
55059: LD_INT 3
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 1
55068: NEG
55069: PUSH
55070: LD_INT 2
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 3
55079: NEG
55080: PUSH
55081: LD_INT 2
55083: NEG
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55114: LD_ADDR_VAR 0 30
55118: PUSH
55119: LD_INT 0
55121: PUSH
55122: LD_INT 0
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 0
55131: PUSH
55132: LD_INT 1
55134: NEG
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 1
55142: PUSH
55143: LD_INT 0
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 1
55152: PUSH
55153: LD_INT 1
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 0
55162: PUSH
55163: LD_INT 1
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 1
55172: NEG
55173: PUSH
55174: LD_INT 0
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 1
55183: NEG
55184: PUSH
55185: LD_INT 1
55187: NEG
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 1
55195: NEG
55196: PUSH
55197: LD_INT 2
55199: NEG
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 0
55207: PUSH
55208: LD_INT 2
55210: NEG
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 1
55218: PUSH
55219: LD_INT 1
55221: NEG
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 2
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 2
55239: PUSH
55240: LD_INT 1
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 2
55249: PUSH
55250: LD_INT 2
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 1
55259: PUSH
55260: LD_INT 2
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 1
55269: NEG
55270: PUSH
55271: LD_INT 1
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 2
55280: NEG
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 2
55291: NEG
55292: PUSH
55293: LD_INT 1
55295: NEG
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: LD_INT 3
55307: NEG
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 1
55315: PUSH
55316: LD_INT 2
55318: NEG
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 3
55326: PUSH
55327: LD_INT 2
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 2
55336: PUSH
55337: LD_INT 3
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 2
55346: NEG
55347: PUSH
55348: LD_INT 1
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 3
55357: NEG
55358: PUSH
55359: LD_INT 1
55361: NEG
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55392: LD_ADDR_VAR 0 31
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 0
55409: PUSH
55410: LD_INT 1
55412: NEG
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 1
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 1
55430: PUSH
55431: LD_INT 1
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 0
55440: PUSH
55441: LD_INT 1
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 1
55450: NEG
55451: PUSH
55452: LD_INT 0
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 1
55461: NEG
55462: PUSH
55463: LD_INT 1
55465: NEG
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 1
55473: NEG
55474: PUSH
55475: LD_INT 2
55477: NEG
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 1
55485: PUSH
55486: LD_INT 1
55488: NEG
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 2
55496: PUSH
55497: LD_INT 0
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 2
55506: PUSH
55507: LD_INT 1
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 2
55516: PUSH
55517: LD_INT 2
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 1
55526: PUSH
55527: LD_INT 2
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: LD_INT 2
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 1
55546: NEG
55547: PUSH
55548: LD_INT 1
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 2
55557: NEG
55558: PUSH
55559: LD_INT 1
55561: NEG
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 2
55569: NEG
55570: PUSH
55571: LD_INT 2
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 2
55581: NEG
55582: PUSH
55583: LD_INT 3
55585: NEG
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 2
55593: PUSH
55594: LD_INT 1
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 3
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: LD_INT 3
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 1
55624: NEG
55625: PUSH
55626: LD_INT 2
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 3
55635: NEG
55636: PUSH
55637: LD_INT 2
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55670: LD_ADDR_VAR 0 32
55674: PUSH
55675: LD_INT 0
55677: PUSH
55678: LD_INT 0
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 0
55687: PUSH
55688: LD_INT 1
55690: NEG
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 1
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 1
55708: PUSH
55709: LD_INT 1
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: LD_INT 1
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: NEG
55729: PUSH
55730: LD_INT 0
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 1
55739: NEG
55740: PUSH
55741: LD_INT 1
55743: NEG
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 1
55751: NEG
55752: PUSH
55753: LD_INT 2
55755: NEG
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 0
55763: PUSH
55764: LD_INT 2
55766: NEG
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 1
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 2
55785: PUSH
55786: LD_INT 1
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 2
55795: PUSH
55796: LD_INT 2
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 1
55805: PUSH
55806: LD_INT 2
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: LD_INT 2
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: LD_INT 1
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 2
55836: NEG
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 2
55847: NEG
55848: PUSH
55849: LD_INT 1
55851: NEG
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: PUSH
55861: LD_INT 3
55863: NEG
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 1
55871: PUSH
55872: LD_INT 2
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 3
55882: PUSH
55883: LD_INT 2
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 2
55892: PUSH
55893: LD_INT 3
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 2
55902: NEG
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 3
55913: NEG
55914: PUSH
55915: LD_INT 1
55917: NEG
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55948: LD_ADDR_VAR 0 33
55952: PUSH
55953: LD_INT 0
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: LD_INT 1
55968: NEG
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 1
55976: PUSH
55977: LD_INT 0
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: LD_INT 1
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 0
55996: PUSH
55997: LD_INT 1
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 1
56006: NEG
56007: PUSH
56008: LD_INT 0
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 1
56017: NEG
56018: PUSH
56019: LD_INT 1
56021: NEG
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 1
56029: NEG
56030: PUSH
56031: LD_INT 2
56033: NEG
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 1
56041: PUSH
56042: LD_INT 1
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 2
56052: PUSH
56053: LD_INT 0
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 2
56062: PUSH
56063: LD_INT 1
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 1
56072: PUSH
56073: LD_INT 2
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 0
56082: PUSH
56083: LD_INT 2
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 1
56092: NEG
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 2
56103: NEG
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 2
56114: NEG
56115: PUSH
56116: LD_INT 1
56118: NEG
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 2
56126: NEG
56127: PUSH
56128: LD_INT 2
56130: NEG
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 2
56138: NEG
56139: PUSH
56140: LD_INT 3
56142: NEG
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 2
56150: PUSH
56151: LD_INT 1
56153: NEG
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 3
56161: PUSH
56162: LD_INT 1
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 1
56171: PUSH
56172: LD_INT 3
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: LD_INT 2
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 3
56192: NEG
56193: PUSH
56194: LD_INT 2
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56227: LD_ADDR_VAR 0 34
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: LD_INT 1
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 1
56255: PUSH
56256: LD_INT 0
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 1
56265: PUSH
56266: LD_INT 1
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 1
56285: NEG
56286: PUSH
56287: LD_INT 0
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 1
56296: NEG
56297: PUSH
56298: LD_INT 1
56300: NEG
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 1
56308: NEG
56309: PUSH
56310: LD_INT 2
56312: NEG
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: LD_INT 2
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: PUSH
56332: LD_INT 1
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 2
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 2
56352: PUSH
56353: LD_INT 2
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 1
56362: PUSH
56363: LD_INT 2
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 1
56372: NEG
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 2
56383: NEG
56384: PUSH
56385: LD_INT 0
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 2
56394: NEG
56395: PUSH
56396: LD_INT 1
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 2
56406: NEG
56407: PUSH
56408: LD_INT 2
56410: NEG
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 1
56418: NEG
56419: PUSH
56420: LD_INT 3
56422: NEG
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 1
56430: PUSH
56431: LD_INT 2
56433: NEG
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 3
56441: PUSH
56442: LD_INT 2
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 2
56451: PUSH
56452: LD_INT 3
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 2
56461: NEG
56462: PUSH
56463: LD_INT 1
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 3
56472: NEG
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56507: LD_ADDR_VAR 0 35
56511: PUSH
56512: LD_INT 0
56514: PUSH
56515: LD_INT 0
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 0
56524: PUSH
56525: LD_INT 1
56527: NEG
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 1
56535: PUSH
56536: LD_INT 0
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 1
56545: PUSH
56546: LD_INT 1
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 0
56555: PUSH
56556: LD_INT 1
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 1
56565: NEG
56566: PUSH
56567: LD_INT 0
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 1
56576: NEG
56577: PUSH
56578: LD_INT 1
56580: NEG
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 2
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 2
56598: NEG
56599: PUSH
56600: LD_INT 1
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56619: LD_ADDR_VAR 0 36
56623: PUSH
56624: LD_INT 0
56626: PUSH
56627: LD_INT 0
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: LD_INT 1
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 1
56657: PUSH
56658: LD_INT 1
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 0
56667: PUSH
56668: LD_INT 1
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 1
56677: NEG
56678: PUSH
56679: LD_INT 0
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: LD_INT 1
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 1
56700: NEG
56701: PUSH
56702: LD_INT 2
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 1
56712: PUSH
56713: LD_INT 2
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56731: LD_ADDR_VAR 0 37
56735: PUSH
56736: LD_INT 0
56738: PUSH
56739: LD_INT 0
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: LD_INT 1
56751: NEG
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 1
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 1
56769: PUSH
56770: LD_INT 1
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: LD_INT 1
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 1
56789: NEG
56790: PUSH
56791: LD_INT 0
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 1
56800: NEG
56801: PUSH
56802: LD_INT 1
56804: NEG
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 1
56812: PUSH
56813: LD_INT 1
56815: NEG
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 1
56823: NEG
56824: PUSH
56825: LD_INT 1
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56843: LD_ADDR_VAR 0 38
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: LD_INT 0
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: LD_INT 1
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 1
56871: PUSH
56872: LD_INT 0
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 1
56881: PUSH
56882: LD_INT 1
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 0
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 1
56901: NEG
56902: PUSH
56903: LD_INT 0
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 1
56912: NEG
56913: PUSH
56914: LD_INT 1
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 2
56924: PUSH
56925: LD_INT 1
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 2
56934: NEG
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56955: LD_ADDR_VAR 0 39
56959: PUSH
56960: LD_INT 0
56962: PUSH
56963: LD_INT 0
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: LD_INT 1
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 1
56993: PUSH
56994: LD_INT 1
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 0
57003: PUSH
57004: LD_INT 1
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 1
57013: NEG
57014: PUSH
57015: LD_INT 0
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 1
57024: NEG
57025: PUSH
57026: LD_INT 1
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: LD_INT 2
57040: NEG
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 1
57048: PUSH
57049: LD_INT 2
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57067: LD_ADDR_VAR 0 40
57071: PUSH
57072: LD_INT 0
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 0
57084: PUSH
57085: LD_INT 1
57087: NEG
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 1
57095: PUSH
57096: LD_INT 0
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 1
57105: PUSH
57106: LD_INT 1
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 0
57115: PUSH
57116: LD_INT 1
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 1
57125: NEG
57126: PUSH
57127: LD_INT 0
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 1
57136: NEG
57137: PUSH
57138: LD_INT 1
57140: NEG
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: LD_INT 1
57151: NEG
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 1
57159: NEG
57160: PUSH
57161: LD_INT 1
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57179: LD_ADDR_VAR 0 41
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: LD_INT 0
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 0
57196: PUSH
57197: LD_INT 1
57199: NEG
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 1
57207: PUSH
57208: LD_INT 0
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 1
57217: PUSH
57218: LD_INT 1
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 0
57227: PUSH
57228: LD_INT 1
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 1
57237: NEG
57238: PUSH
57239: LD_INT 0
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 1
57248: NEG
57249: PUSH
57250: LD_INT 1
57252: NEG
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 1
57260: NEG
57261: PUSH
57262: LD_INT 2
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 1
57272: PUSH
57273: LD_INT 1
57275: NEG
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 2
57283: PUSH
57284: LD_INT 0
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 2
57293: PUSH
57294: LD_INT 1
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 2
57303: PUSH
57304: LD_INT 2
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 1
57313: PUSH
57314: LD_INT 2
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 1
57323: NEG
57324: PUSH
57325: LD_INT 1
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 2
57334: NEG
57335: PUSH
57336: LD_INT 0
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 2
57345: NEG
57346: PUSH
57347: LD_INT 1
57349: NEG
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 2
57357: NEG
57358: PUSH
57359: LD_INT 2
57361: NEG
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 2
57369: NEG
57370: PUSH
57371: LD_INT 3
57373: NEG
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 2
57381: PUSH
57382: LD_INT 1
57384: NEG
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 3
57392: PUSH
57393: LD_INT 0
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 3
57402: PUSH
57403: LD_INT 1
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 3
57412: PUSH
57413: LD_INT 2
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 3
57422: PUSH
57423: LD_INT 3
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 2
57432: PUSH
57433: LD_INT 3
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 2
57442: NEG
57443: PUSH
57444: LD_INT 1
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 3
57453: NEG
57454: PUSH
57455: LD_INT 0
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 3
57464: NEG
57465: PUSH
57466: LD_INT 1
57468: NEG
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 3
57476: NEG
57477: PUSH
57478: LD_INT 2
57480: NEG
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 3
57488: NEG
57489: PUSH
57490: LD_INT 3
57492: NEG
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57529: LD_ADDR_VAR 0 42
57533: PUSH
57534: LD_INT 0
57536: PUSH
57537: LD_INT 0
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 0
57546: PUSH
57547: LD_INT 1
57549: NEG
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 1
57557: PUSH
57558: LD_INT 0
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 1
57567: PUSH
57568: LD_INT 1
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: LD_INT 1
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 1
57587: NEG
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 1
57598: NEG
57599: PUSH
57600: LD_INT 1
57602: NEG
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 1
57610: NEG
57611: PUSH
57612: LD_INT 2
57614: NEG
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 0
57622: PUSH
57623: LD_INT 2
57625: NEG
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 1
57633: PUSH
57634: LD_INT 1
57636: NEG
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 2
57644: PUSH
57645: LD_INT 1
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 2
57654: PUSH
57655: LD_INT 2
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 1
57664: PUSH
57665: LD_INT 2
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 0
57674: PUSH
57675: LD_INT 2
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 1
57684: NEG
57685: PUSH
57686: LD_INT 1
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 2
57695: NEG
57696: PUSH
57697: LD_INT 1
57699: NEG
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 2
57707: NEG
57708: PUSH
57709: LD_INT 2
57711: NEG
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 2
57719: NEG
57720: PUSH
57721: LD_INT 3
57723: NEG
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 1
57731: NEG
57732: PUSH
57733: LD_INT 3
57735: NEG
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 0
57743: PUSH
57744: LD_INT 3
57746: NEG
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 1
57754: PUSH
57755: LD_INT 2
57757: NEG
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 3
57765: PUSH
57766: LD_INT 2
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 3
57775: PUSH
57776: LD_INT 3
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 2
57785: PUSH
57786: LD_INT 3
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 1
57795: PUSH
57796: LD_INT 3
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: LD_INT 3
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 1
57815: NEG
57816: PUSH
57817: LD_INT 2
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 3
57826: NEG
57827: PUSH
57828: LD_INT 2
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 3
57838: NEG
57839: PUSH
57840: LD_INT 3
57842: NEG
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57879: LD_ADDR_VAR 0 43
57883: PUSH
57884: LD_INT 0
57886: PUSH
57887: LD_INT 0
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 0
57896: PUSH
57897: LD_INT 1
57899: NEG
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 1
57907: PUSH
57908: LD_INT 0
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 1
57917: PUSH
57918: LD_INT 1
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 0
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 1
57937: NEG
57938: PUSH
57939: LD_INT 0
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 1
57948: NEG
57949: PUSH
57950: LD_INT 1
57952: NEG
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 1
57960: NEG
57961: PUSH
57962: LD_INT 2
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 0
57972: PUSH
57973: LD_INT 2
57975: NEG
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 1
57983: PUSH
57984: LD_INT 1
57986: NEG
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 2
57994: PUSH
57995: LD_INT 0
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 2
58004: PUSH
58005: LD_INT 1
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 1
58014: PUSH
58015: LD_INT 2
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 0
58024: PUSH
58025: LD_INT 2
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 1
58034: NEG
58035: PUSH
58036: LD_INT 1
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 2
58045: NEG
58046: PUSH
58047: LD_INT 0
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 2
58056: NEG
58057: PUSH
58058: LD_INT 1
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 1
58068: NEG
58069: PUSH
58070: LD_INT 3
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 0
58080: PUSH
58081: LD_INT 3
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 1
58091: PUSH
58092: LD_INT 2
58094: NEG
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 2
58102: PUSH
58103: LD_INT 1
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 3
58113: PUSH
58114: LD_INT 0
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 3
58123: PUSH
58124: LD_INT 1
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 1
58133: PUSH
58134: LD_INT 3
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 0
58143: PUSH
58144: LD_INT 3
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 1
58153: NEG
58154: PUSH
58155: LD_INT 2
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 2
58164: NEG
58165: PUSH
58166: LD_INT 1
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 3
58175: NEG
58176: PUSH
58177: LD_INT 0
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 3
58186: NEG
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58227: LD_ADDR_VAR 0 44
58231: PUSH
58232: LD_INT 0
58234: PUSH
58235: LD_INT 0
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 0
58244: PUSH
58245: LD_INT 1
58247: NEG
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 1
58255: PUSH
58256: LD_INT 0
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 1
58265: PUSH
58266: LD_INT 1
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 0
58275: PUSH
58276: LD_INT 1
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 1
58285: NEG
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 1
58296: NEG
58297: PUSH
58298: LD_INT 1
58300: NEG
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 1
58308: NEG
58309: PUSH
58310: LD_INT 2
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 1
58320: PUSH
58321: LD_INT 1
58323: NEG
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 2
58331: PUSH
58332: LD_INT 0
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 2
58341: PUSH
58342: LD_INT 1
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 2
58351: PUSH
58352: LD_INT 2
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 1
58361: PUSH
58362: LD_INT 2
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 1
58371: NEG
58372: PUSH
58373: LD_INT 1
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 2
58382: NEG
58383: PUSH
58384: LD_INT 0
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 2
58393: NEG
58394: PUSH
58395: LD_INT 1
58397: NEG
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 2
58405: NEG
58406: PUSH
58407: LD_INT 2
58409: NEG
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 2
58417: NEG
58418: PUSH
58419: LD_INT 3
58421: NEG
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 2
58429: PUSH
58430: LD_INT 1
58432: NEG
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 3
58440: PUSH
58441: LD_INT 0
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 3
58450: PUSH
58451: LD_INT 1
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 3
58460: PUSH
58461: LD_INT 2
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 3
58470: PUSH
58471: LD_INT 3
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 2
58480: PUSH
58481: LD_INT 3
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 2
58490: NEG
58491: PUSH
58492: LD_INT 1
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 3
58501: NEG
58502: PUSH
58503: LD_INT 0
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 3
58512: NEG
58513: PUSH
58514: LD_INT 1
58516: NEG
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 3
58524: NEG
58525: PUSH
58526: LD_INT 2
58528: NEG
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 3
58536: NEG
58537: PUSH
58538: LD_INT 3
58540: NEG
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58577: LD_ADDR_VAR 0 45
58581: PUSH
58582: LD_INT 0
58584: PUSH
58585: LD_INT 0
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 0
58594: PUSH
58595: LD_INT 1
58597: NEG
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 1
58605: PUSH
58606: LD_INT 0
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 1
58615: PUSH
58616: LD_INT 1
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 0
58625: PUSH
58626: LD_INT 1
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 1
58635: NEG
58636: PUSH
58637: LD_INT 0
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 1
58646: NEG
58647: PUSH
58648: LD_INT 1
58650: NEG
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 1
58658: NEG
58659: PUSH
58660: LD_INT 2
58662: NEG
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 0
58670: PUSH
58671: LD_INT 2
58673: NEG
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 1
58681: PUSH
58682: LD_INT 1
58684: NEG
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 2
58692: PUSH
58693: LD_INT 1
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 2
58702: PUSH
58703: LD_INT 2
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 1
58712: PUSH
58713: LD_INT 2
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 0
58722: PUSH
58723: LD_INT 2
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 1
58732: NEG
58733: PUSH
58734: LD_INT 1
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 2
58743: NEG
58744: PUSH
58745: LD_INT 1
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 2
58755: NEG
58756: PUSH
58757: LD_INT 2
58759: NEG
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 2
58767: NEG
58768: PUSH
58769: LD_INT 3
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 1
58779: NEG
58780: PUSH
58781: LD_INT 3
58783: NEG
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 0
58791: PUSH
58792: LD_INT 3
58794: NEG
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 1
58802: PUSH
58803: LD_INT 2
58805: NEG
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 3
58813: PUSH
58814: LD_INT 2
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 3
58823: PUSH
58824: LD_INT 3
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 2
58833: PUSH
58834: LD_INT 3
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 1
58843: PUSH
58844: LD_INT 3
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 0
58853: PUSH
58854: LD_INT 3
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 1
58863: NEG
58864: PUSH
58865: LD_INT 2
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 3
58874: NEG
58875: PUSH
58876: LD_INT 2
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 3
58886: NEG
58887: PUSH
58888: LD_INT 3
58890: NEG
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58927: LD_ADDR_VAR 0 46
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: LD_INT 0
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 0
58944: PUSH
58945: LD_INT 1
58947: NEG
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 1
58955: PUSH
58956: LD_INT 0
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 1
58965: PUSH
58966: LD_INT 1
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 0
58975: PUSH
58976: LD_INT 1
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 1
58985: NEG
58986: PUSH
58987: LD_INT 0
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 1
58996: NEG
58997: PUSH
58998: LD_INT 1
59000: NEG
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 1
59008: NEG
59009: PUSH
59010: LD_INT 2
59012: NEG
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 0
59020: PUSH
59021: LD_INT 2
59023: NEG
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 1
59031: PUSH
59032: LD_INT 1
59034: NEG
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 2
59042: PUSH
59043: LD_INT 0
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 2
59052: PUSH
59053: LD_INT 1
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 1
59062: PUSH
59063: LD_INT 2
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 0
59072: PUSH
59073: LD_INT 2
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 1
59082: NEG
59083: PUSH
59084: LD_INT 1
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 2
59093: NEG
59094: PUSH
59095: LD_INT 0
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 2
59104: NEG
59105: PUSH
59106: LD_INT 1
59108: NEG
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 1
59116: NEG
59117: PUSH
59118: LD_INT 3
59120: NEG
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 0
59128: PUSH
59129: LD_INT 3
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 1
59139: PUSH
59140: LD_INT 2
59142: NEG
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 2
59150: PUSH
59151: LD_INT 1
59153: NEG
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 3
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 3
59171: PUSH
59172: LD_INT 1
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 1
59181: PUSH
59182: LD_INT 3
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 0
59191: PUSH
59192: LD_INT 3
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 1
59201: NEG
59202: PUSH
59203: LD_INT 2
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 2
59212: NEG
59213: PUSH
59214: LD_INT 1
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 3
59223: NEG
59224: PUSH
59225: LD_INT 0
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 3
59234: NEG
59235: PUSH
59236: LD_INT 1
59238: NEG
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59275: LD_ADDR_VAR 0 47
59279: PUSH
59280: LD_INT 0
59282: PUSH
59283: LD_INT 0
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 0
59292: PUSH
59293: LD_INT 1
59295: NEG
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 1
59303: PUSH
59304: LD_INT 0
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 1
59313: PUSH
59314: LD_INT 1
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 0
59323: PUSH
59324: LD_INT 1
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 1
59333: NEG
59334: PUSH
59335: LD_INT 0
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 1
59344: NEG
59345: PUSH
59346: LD_INT 1
59348: NEG
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 1
59356: NEG
59357: PUSH
59358: LD_INT 2
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 0
59368: PUSH
59369: LD_INT 2
59371: NEG
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 1
59379: PUSH
59380: LD_INT 1
59382: NEG
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 2
59390: NEG
59391: PUSH
59392: LD_INT 1
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 2
59402: NEG
59403: PUSH
59404: LD_INT 2
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59426: LD_ADDR_VAR 0 48
59430: PUSH
59431: LD_INT 0
59433: PUSH
59434: LD_INT 0
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 0
59443: PUSH
59444: LD_INT 1
59446: NEG
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 1
59454: PUSH
59455: LD_INT 0
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 1
59464: PUSH
59465: LD_INT 1
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 0
59474: PUSH
59475: LD_INT 1
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 1
59484: NEG
59485: PUSH
59486: LD_INT 0
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 1
59495: NEG
59496: PUSH
59497: LD_INT 1
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 1
59507: NEG
59508: PUSH
59509: LD_INT 2
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 0
59519: PUSH
59520: LD_INT 2
59522: NEG
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 1
59530: PUSH
59531: LD_INT 1
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 2
59541: PUSH
59542: LD_INT 0
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 2
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59573: LD_ADDR_VAR 0 49
59577: PUSH
59578: LD_INT 0
59580: PUSH
59581: LD_INT 0
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: LD_INT 1
59593: NEG
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 1
59601: PUSH
59602: LD_INT 0
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 1
59611: PUSH
59612: LD_INT 1
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 0
59621: PUSH
59622: LD_INT 1
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 1
59631: NEG
59632: PUSH
59633: LD_INT 0
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 1
59642: NEG
59643: PUSH
59644: LD_INT 1
59646: NEG
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 1
59654: PUSH
59655: LD_INT 1
59657: NEG
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 2
59665: PUSH
59666: LD_INT 0
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 2
59675: PUSH
59676: LD_INT 1
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 2
59685: PUSH
59686: LD_INT 2
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 1
59695: PUSH
59696: LD_INT 2
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59717: LD_ADDR_VAR 0 50
59721: PUSH
59722: LD_INT 0
59724: PUSH
59725: LD_INT 0
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 0
59734: PUSH
59735: LD_INT 1
59737: NEG
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 1
59745: PUSH
59746: LD_INT 0
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 1
59755: PUSH
59756: LD_INT 1
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 0
59765: PUSH
59766: LD_INT 1
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 1
59775: NEG
59776: PUSH
59777: LD_INT 0
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 1
59786: NEG
59787: PUSH
59788: LD_INT 1
59790: NEG
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 2
59798: PUSH
59799: LD_INT 1
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 2
59808: PUSH
59809: LD_INT 2
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 1
59818: PUSH
59819: LD_INT 2
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 0
59828: PUSH
59829: LD_INT 2
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 1
59838: NEG
59839: PUSH
59840: LD_INT 1
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59861: LD_ADDR_VAR 0 51
59865: PUSH
59866: LD_INT 0
59868: PUSH
59869: LD_INT 0
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 0
59878: PUSH
59879: LD_INT 1
59881: NEG
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 1
59889: PUSH
59890: LD_INT 0
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 1
59899: PUSH
59900: LD_INT 1
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 0
59909: PUSH
59910: LD_INT 1
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 1
59919: NEG
59920: PUSH
59921: LD_INT 0
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 1
59930: NEG
59931: PUSH
59932: LD_INT 1
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 1
59942: PUSH
59943: LD_INT 2
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: LD_INT 2
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 1
59962: NEG
59963: PUSH
59964: LD_INT 1
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 2
59973: NEG
59974: PUSH
59975: LD_INT 0
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 2
59984: NEG
59985: PUSH
59986: LD_INT 1
59988: NEG
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60008: LD_ADDR_VAR 0 52
60012: PUSH
60013: LD_INT 0
60015: PUSH
60016: LD_INT 0
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 0
60025: PUSH
60026: LD_INT 1
60028: NEG
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 1
60036: PUSH
60037: LD_INT 0
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 1
60046: PUSH
60047: LD_INT 1
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 0
60056: PUSH
60057: LD_INT 1
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 1
60066: NEG
60067: PUSH
60068: LD_INT 0
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 1
60077: NEG
60078: PUSH
60079: LD_INT 1
60081: NEG
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 1
60089: NEG
60090: PUSH
60091: LD_INT 2
60093: NEG
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 1
60101: NEG
60102: PUSH
60103: LD_INT 1
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 2
60112: NEG
60113: PUSH
60114: LD_INT 0
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 2
60123: NEG
60124: PUSH
60125: LD_INT 1
60127: NEG
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 2
60135: NEG
60136: PUSH
60137: LD_INT 2
60139: NEG
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60159: LD_ADDR_VAR 0 53
60163: PUSH
60164: LD_INT 0
60166: PUSH
60167: LD_INT 0
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 0
60176: PUSH
60177: LD_INT 1
60179: NEG
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 1
60187: PUSH
60188: LD_INT 0
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 1
60197: PUSH
60198: LD_INT 1
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 0
60207: PUSH
60208: LD_INT 1
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 1
60217: NEG
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 1
60228: NEG
60229: PUSH
60230: LD_INT 1
60232: NEG
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 1
60240: NEG
60241: PUSH
60242: LD_INT 2
60244: NEG
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 0
60252: PUSH
60253: LD_INT 2
60255: NEG
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 1
60263: PUSH
60264: LD_INT 1
60266: NEG
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 2
60274: PUSH
60275: LD_INT 0
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 2
60284: PUSH
60285: LD_INT 1
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 2
60294: PUSH
60295: LD_INT 2
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 1
60304: PUSH
60305: LD_INT 2
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 0
60314: PUSH
60315: LD_INT 2
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 1
60324: NEG
60325: PUSH
60326: LD_INT 1
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 2
60335: NEG
60336: PUSH
60337: LD_INT 0
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 2
60346: NEG
60347: PUSH
60348: LD_INT 1
60350: NEG
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 2
60358: NEG
60359: PUSH
60360: LD_INT 2
60362: NEG
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60389: LD_ADDR_VAR 0 54
60393: PUSH
60394: LD_INT 0
60396: PUSH
60397: LD_INT 0
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 0
60406: PUSH
60407: LD_INT 1
60409: NEG
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 1
60417: PUSH
60418: LD_INT 0
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 1
60427: PUSH
60428: LD_INT 1
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 0
60437: PUSH
60438: LD_INT 1
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 1
60447: NEG
60448: PUSH
60449: LD_INT 0
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 1
60458: NEG
60459: PUSH
60460: LD_INT 1
60462: NEG
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 1
60470: NEG
60471: PUSH
60472: LD_INT 2
60474: NEG
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 0
60482: PUSH
60483: LD_INT 2
60485: NEG
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 1
60493: PUSH
60494: LD_INT 1
60496: NEG
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 2
60504: PUSH
60505: LD_INT 0
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 2
60514: PUSH
60515: LD_INT 1
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 2
60524: PUSH
60525: LD_INT 2
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 1
60534: PUSH
60535: LD_INT 2
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 0
60544: PUSH
60545: LD_INT 2
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 1
60554: NEG
60555: PUSH
60556: LD_INT 1
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 2
60565: NEG
60566: PUSH
60567: LD_INT 0
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 2
60576: NEG
60577: PUSH
60578: LD_INT 1
60580: NEG
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 2
60588: NEG
60589: PUSH
60590: LD_INT 2
60592: NEG
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60619: LD_ADDR_VAR 0 55
60623: PUSH
60624: LD_INT 0
60626: PUSH
60627: LD_INT 0
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 0
60636: PUSH
60637: LD_INT 1
60639: NEG
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 1
60647: PUSH
60648: LD_INT 0
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 1
60657: PUSH
60658: LD_INT 1
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 0
60667: PUSH
60668: LD_INT 1
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 1
60677: NEG
60678: PUSH
60679: LD_INT 0
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 1
60688: NEG
60689: PUSH
60690: LD_INT 1
60692: NEG
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 1
60700: NEG
60701: PUSH
60702: LD_INT 2
60704: NEG
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 0
60712: PUSH
60713: LD_INT 2
60715: NEG
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 1
60723: PUSH
60724: LD_INT 1
60726: NEG
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 2
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 2
60744: PUSH
60745: LD_INT 1
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 2
60754: PUSH
60755: LD_INT 2
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 1
60764: PUSH
60765: LD_INT 2
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 0
60774: PUSH
60775: LD_INT 2
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 1
60784: NEG
60785: PUSH
60786: LD_INT 1
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 2
60795: NEG
60796: PUSH
60797: LD_INT 0
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 2
60806: NEG
60807: PUSH
60808: LD_INT 1
60810: NEG
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 2
60818: NEG
60819: PUSH
60820: LD_INT 2
60822: NEG
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60849: LD_ADDR_VAR 0 56
60853: PUSH
60854: LD_INT 0
60856: PUSH
60857: LD_INT 0
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 0
60866: PUSH
60867: LD_INT 1
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 1
60877: PUSH
60878: LD_INT 0
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 1
60887: PUSH
60888: LD_INT 1
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 0
60897: PUSH
60898: LD_INT 1
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 1
60907: NEG
60908: PUSH
60909: LD_INT 0
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 1
60918: NEG
60919: PUSH
60920: LD_INT 1
60922: NEG
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 1
60930: NEG
60931: PUSH
60932: LD_INT 2
60934: NEG
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 0
60942: PUSH
60943: LD_INT 2
60945: NEG
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 1
60953: PUSH
60954: LD_INT 1
60956: NEG
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 2
60964: PUSH
60965: LD_INT 0
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 2
60974: PUSH
60975: LD_INT 1
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 2
60984: PUSH
60985: LD_INT 2
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 1
60994: PUSH
60995: LD_INT 2
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 0
61004: PUSH
61005: LD_INT 2
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 1
61014: NEG
61015: PUSH
61016: LD_INT 1
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 2
61025: NEG
61026: PUSH
61027: LD_INT 0
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 2
61036: NEG
61037: PUSH
61038: LD_INT 1
61040: NEG
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 2
61048: NEG
61049: PUSH
61050: LD_INT 2
61052: NEG
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61079: LD_ADDR_VAR 0 57
61083: PUSH
61084: LD_INT 0
61086: PUSH
61087: LD_INT 0
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 0
61096: PUSH
61097: LD_INT 1
61099: NEG
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 1
61107: PUSH
61108: LD_INT 0
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 1
61117: PUSH
61118: LD_INT 1
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 0
61127: PUSH
61128: LD_INT 1
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 1
61137: NEG
61138: PUSH
61139: LD_INT 0
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 1
61148: NEG
61149: PUSH
61150: LD_INT 1
61152: NEG
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 1
61160: NEG
61161: PUSH
61162: LD_INT 2
61164: NEG
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 0
61172: PUSH
61173: LD_INT 2
61175: NEG
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 1
61183: PUSH
61184: LD_INT 1
61186: NEG
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 2
61194: PUSH
61195: LD_INT 0
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 2
61204: PUSH
61205: LD_INT 1
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 2
61214: PUSH
61215: LD_INT 2
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 1
61224: PUSH
61225: LD_INT 2
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 0
61234: PUSH
61235: LD_INT 2
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 1
61244: NEG
61245: PUSH
61246: LD_INT 1
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 2
61255: NEG
61256: PUSH
61257: LD_INT 0
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 2
61266: NEG
61267: PUSH
61268: LD_INT 1
61270: NEG
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 2
61278: NEG
61279: PUSH
61280: LD_INT 2
61282: NEG
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61309: LD_ADDR_VAR 0 58
61313: PUSH
61314: LD_INT 0
61316: PUSH
61317: LD_INT 0
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 0
61326: PUSH
61327: LD_INT 1
61329: NEG
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 1
61337: PUSH
61338: LD_INT 0
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 1
61347: PUSH
61348: LD_INT 1
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 0
61357: PUSH
61358: LD_INT 1
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 1
61367: NEG
61368: PUSH
61369: LD_INT 0
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 1
61378: NEG
61379: PUSH
61380: LD_INT 1
61382: NEG
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 1
61390: NEG
61391: PUSH
61392: LD_INT 2
61394: NEG
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 0
61402: PUSH
61403: LD_INT 2
61405: NEG
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 1
61413: PUSH
61414: LD_INT 1
61416: NEG
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 2
61424: PUSH
61425: LD_INT 0
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 2
61434: PUSH
61435: LD_INT 1
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 2
61444: PUSH
61445: LD_INT 2
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 1
61454: PUSH
61455: LD_INT 2
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 0
61464: PUSH
61465: LD_INT 2
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 1
61474: NEG
61475: PUSH
61476: LD_INT 1
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 2
61485: NEG
61486: PUSH
61487: LD_INT 0
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 2
61496: NEG
61497: PUSH
61498: LD_INT 1
61500: NEG
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 2
61508: NEG
61509: PUSH
61510: LD_INT 2
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61539: LD_ADDR_VAR 0 59
61543: PUSH
61544: LD_INT 0
61546: PUSH
61547: LD_INT 0
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 0
61556: PUSH
61557: LD_INT 1
61559: NEG
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 1
61567: PUSH
61568: LD_INT 0
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 1
61577: PUSH
61578: LD_INT 1
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 0
61587: PUSH
61588: LD_INT 1
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 1
61597: NEG
61598: PUSH
61599: LD_INT 0
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 1
61608: NEG
61609: PUSH
61610: LD_INT 1
61612: NEG
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61627: LD_ADDR_VAR 0 60
61631: PUSH
61632: LD_INT 0
61634: PUSH
61635: LD_INT 0
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 0
61644: PUSH
61645: LD_INT 1
61647: NEG
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 1
61655: PUSH
61656: LD_INT 0
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 1
61665: PUSH
61666: LD_INT 1
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 0
61675: PUSH
61676: LD_INT 1
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 1
61685: NEG
61686: PUSH
61687: LD_INT 0
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 1
61696: NEG
61697: PUSH
61698: LD_INT 1
61700: NEG
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61715: LD_ADDR_VAR 0 61
61719: PUSH
61720: LD_INT 0
61722: PUSH
61723: LD_INT 0
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 0
61732: PUSH
61733: LD_INT 1
61735: NEG
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 1
61743: PUSH
61744: LD_INT 0
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 1
61753: PUSH
61754: LD_INT 1
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 0
61763: PUSH
61764: LD_INT 1
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 1
61773: NEG
61774: PUSH
61775: LD_INT 0
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 1
61784: NEG
61785: PUSH
61786: LD_INT 1
61788: NEG
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61803: LD_ADDR_VAR 0 62
61807: PUSH
61808: LD_INT 0
61810: PUSH
61811: LD_INT 0
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 0
61820: PUSH
61821: LD_INT 1
61823: NEG
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 1
61831: PUSH
61832: LD_INT 0
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 1
61841: PUSH
61842: LD_INT 1
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 0
61851: PUSH
61852: LD_INT 1
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 1
61861: NEG
61862: PUSH
61863: LD_INT 0
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 1
61872: NEG
61873: PUSH
61874: LD_INT 1
61876: NEG
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61891: LD_ADDR_VAR 0 63
61895: PUSH
61896: LD_INT 0
61898: PUSH
61899: LD_INT 0
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 0
61908: PUSH
61909: LD_INT 1
61911: NEG
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 1
61919: PUSH
61920: LD_INT 0
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 1
61929: PUSH
61930: LD_INT 1
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 0
61939: PUSH
61940: LD_INT 1
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 1
61949: NEG
61950: PUSH
61951: LD_INT 0
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 1
61960: NEG
61961: PUSH
61962: LD_INT 1
61964: NEG
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61979: LD_ADDR_VAR 0 64
61983: PUSH
61984: LD_INT 0
61986: PUSH
61987: LD_INT 0
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 0
61996: PUSH
61997: LD_INT 1
61999: NEG
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 1
62007: PUSH
62008: LD_INT 0
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 1
62017: PUSH
62018: LD_INT 1
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 0
62027: PUSH
62028: LD_INT 1
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 1
62037: NEG
62038: PUSH
62039: LD_INT 0
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 1
62048: NEG
62049: PUSH
62050: LD_INT 1
62052: NEG
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: ST_TO_ADDR
// end ; 1 :
62067: GO 67964
62069: LD_INT 1
62071: DOUBLE
62072: EQUAL
62073: IFTRUE 62077
62075: GO 64700
62077: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62078: LD_ADDR_VAR 0 11
62082: PUSH
62083: LD_INT 1
62085: NEG
62086: PUSH
62087: LD_INT 3
62089: NEG
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 0
62097: PUSH
62098: LD_INT 3
62100: NEG
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 1
62108: PUSH
62109: LD_INT 2
62111: NEG
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: LIST
62121: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62122: LD_ADDR_VAR 0 12
62126: PUSH
62127: LD_INT 2
62129: PUSH
62130: LD_INT 1
62132: NEG
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 3
62140: PUSH
62141: LD_INT 0
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 3
62150: PUSH
62151: LD_INT 1
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: LIST
62162: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62163: LD_ADDR_VAR 0 13
62167: PUSH
62168: LD_INT 3
62170: PUSH
62171: LD_INT 2
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 3
62180: PUSH
62181: LD_INT 3
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 2
62190: PUSH
62191: LD_INT 3
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: LIST
62202: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62203: LD_ADDR_VAR 0 14
62207: PUSH
62208: LD_INT 1
62210: PUSH
62211: LD_INT 3
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 0
62220: PUSH
62221: LD_INT 3
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 1
62230: NEG
62231: PUSH
62232: LD_INT 2
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: LIST
62243: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62244: LD_ADDR_VAR 0 15
62248: PUSH
62249: LD_INT 2
62251: NEG
62252: PUSH
62253: LD_INT 1
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 3
62262: NEG
62263: PUSH
62264: LD_INT 0
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 3
62273: NEG
62274: PUSH
62275: LD_INT 1
62277: NEG
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: LIST
62287: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62288: LD_ADDR_VAR 0 16
62292: PUSH
62293: LD_INT 2
62295: NEG
62296: PUSH
62297: LD_INT 3
62299: NEG
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 3
62307: NEG
62308: PUSH
62309: LD_INT 2
62311: NEG
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 3
62319: NEG
62320: PUSH
62321: LD_INT 3
62323: NEG
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: LIST
62333: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62334: LD_ADDR_VAR 0 17
62338: PUSH
62339: LD_INT 1
62341: NEG
62342: PUSH
62343: LD_INT 3
62345: NEG
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 0
62353: PUSH
62354: LD_INT 3
62356: NEG
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 1
62364: PUSH
62365: LD_INT 2
62367: NEG
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: LIST
62377: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62378: LD_ADDR_VAR 0 18
62382: PUSH
62383: LD_INT 2
62385: PUSH
62386: LD_INT 1
62388: NEG
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 3
62396: PUSH
62397: LD_INT 0
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 3
62406: PUSH
62407: LD_INT 1
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: LIST
62418: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62419: LD_ADDR_VAR 0 19
62423: PUSH
62424: LD_INT 3
62426: PUSH
62427: LD_INT 2
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 3
62436: PUSH
62437: LD_INT 3
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 2
62446: PUSH
62447: LD_INT 3
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: LIST
62458: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62459: LD_ADDR_VAR 0 20
62463: PUSH
62464: LD_INT 1
62466: PUSH
62467: LD_INT 3
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 0
62476: PUSH
62477: LD_INT 3
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 1
62486: NEG
62487: PUSH
62488: LD_INT 2
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: LIST
62499: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62500: LD_ADDR_VAR 0 21
62504: PUSH
62505: LD_INT 2
62507: NEG
62508: PUSH
62509: LD_INT 1
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 3
62518: NEG
62519: PUSH
62520: LD_INT 0
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 3
62529: NEG
62530: PUSH
62531: LD_INT 1
62533: NEG
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: LIST
62543: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62544: LD_ADDR_VAR 0 22
62548: PUSH
62549: LD_INT 2
62551: NEG
62552: PUSH
62553: LD_INT 3
62555: NEG
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 3
62563: NEG
62564: PUSH
62565: LD_INT 2
62567: NEG
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 3
62575: NEG
62576: PUSH
62577: LD_INT 3
62579: NEG
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: LIST
62589: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62590: LD_ADDR_VAR 0 23
62594: PUSH
62595: LD_INT 0
62597: PUSH
62598: LD_INT 3
62600: NEG
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 1
62608: NEG
62609: PUSH
62610: LD_INT 4
62612: NEG
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 1
62620: PUSH
62621: LD_INT 3
62623: NEG
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: LIST
62633: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62634: LD_ADDR_VAR 0 24
62638: PUSH
62639: LD_INT 3
62641: PUSH
62642: LD_INT 0
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 3
62651: PUSH
62652: LD_INT 1
62654: NEG
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 4
62662: PUSH
62663: LD_INT 1
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: LIST
62674: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62675: LD_ADDR_VAR 0 25
62679: PUSH
62680: LD_INT 3
62682: PUSH
62683: LD_INT 3
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 4
62692: PUSH
62693: LD_INT 3
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 3
62702: PUSH
62703: LD_INT 4
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: LIST
62714: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62715: LD_ADDR_VAR 0 26
62719: PUSH
62720: LD_INT 0
62722: PUSH
62723: LD_INT 3
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 1
62732: PUSH
62733: LD_INT 4
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 1
62742: NEG
62743: PUSH
62744: LD_INT 3
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: LIST
62755: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62756: LD_ADDR_VAR 0 27
62760: PUSH
62761: LD_INT 3
62763: NEG
62764: PUSH
62765: LD_INT 0
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 3
62774: NEG
62775: PUSH
62776: LD_INT 1
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 4
62785: NEG
62786: PUSH
62787: LD_INT 1
62789: NEG
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: LIST
62799: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62800: LD_ADDR_VAR 0 28
62804: PUSH
62805: LD_INT 3
62807: NEG
62808: PUSH
62809: LD_INT 3
62811: NEG
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 3
62819: NEG
62820: PUSH
62821: LD_INT 4
62823: NEG
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 4
62831: NEG
62832: PUSH
62833: LD_INT 3
62835: NEG
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: LIST
62845: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62846: LD_ADDR_VAR 0 29
62850: PUSH
62851: LD_INT 1
62853: NEG
62854: PUSH
62855: LD_INT 3
62857: NEG
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 0
62865: PUSH
62866: LD_INT 3
62868: NEG
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 1
62876: PUSH
62877: LD_INT 2
62879: NEG
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 1
62887: NEG
62888: PUSH
62889: LD_INT 4
62891: NEG
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 0
62899: PUSH
62900: LD_INT 4
62902: NEG
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 1
62910: PUSH
62911: LD_INT 3
62913: NEG
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 1
62921: NEG
62922: PUSH
62923: LD_INT 5
62925: NEG
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 0
62933: PUSH
62934: LD_INT 5
62936: NEG
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 1
62944: PUSH
62945: LD_INT 4
62947: NEG
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 1
62955: NEG
62956: PUSH
62957: LD_INT 6
62959: NEG
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 0
62967: PUSH
62968: LD_INT 6
62970: NEG
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 1
62978: PUSH
62979: LD_INT 5
62981: NEG
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63001: LD_ADDR_VAR 0 30
63005: PUSH
63006: LD_INT 2
63008: PUSH
63009: LD_INT 1
63011: NEG
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 3
63019: PUSH
63020: LD_INT 0
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 3
63029: PUSH
63030: LD_INT 1
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 3
63039: PUSH
63040: LD_INT 1
63042: NEG
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 4
63050: PUSH
63051: LD_INT 0
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 4
63060: PUSH
63061: LD_INT 1
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 4
63070: PUSH
63071: LD_INT 1
63073: NEG
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 5
63081: PUSH
63082: LD_INT 0
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 5
63091: PUSH
63092: LD_INT 1
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 5
63101: PUSH
63102: LD_INT 1
63104: NEG
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 6
63112: PUSH
63113: LD_INT 0
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 6
63122: PUSH
63123: LD_INT 1
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63144: LD_ADDR_VAR 0 31
63148: PUSH
63149: LD_INT 3
63151: PUSH
63152: LD_INT 2
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 3
63161: PUSH
63162: LD_INT 3
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 2
63171: PUSH
63172: LD_INT 3
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 4
63181: PUSH
63182: LD_INT 3
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: LD_INT 4
63191: PUSH
63192: LD_INT 4
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 3
63201: PUSH
63202: LD_INT 4
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 5
63211: PUSH
63212: LD_INT 4
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 5
63221: PUSH
63222: LD_INT 5
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 4
63231: PUSH
63232: LD_INT 5
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 6
63241: PUSH
63242: LD_INT 5
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 6
63251: PUSH
63252: LD_INT 6
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 5
63261: PUSH
63262: LD_INT 6
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63283: LD_ADDR_VAR 0 32
63287: PUSH
63288: LD_INT 1
63290: PUSH
63291: LD_INT 3
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 0
63300: PUSH
63301: LD_INT 3
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 1
63310: NEG
63311: PUSH
63312: LD_INT 2
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 1
63321: PUSH
63322: LD_INT 4
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 0
63331: PUSH
63332: LD_INT 4
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 1
63341: NEG
63342: PUSH
63343: LD_INT 3
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 1
63352: PUSH
63353: LD_INT 5
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: LD_INT 0
63362: PUSH
63363: LD_INT 5
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 1
63372: NEG
63373: PUSH
63374: LD_INT 4
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 1
63383: PUSH
63384: LD_INT 6
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 0
63393: PUSH
63394: LD_INT 6
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 1
63403: NEG
63404: PUSH
63405: LD_INT 5
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63426: LD_ADDR_VAR 0 33
63430: PUSH
63431: LD_INT 2
63433: NEG
63434: PUSH
63435: LD_INT 1
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 3
63444: NEG
63445: PUSH
63446: LD_INT 0
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: LD_INT 3
63455: NEG
63456: PUSH
63457: LD_INT 1
63459: NEG
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 3
63467: NEG
63468: PUSH
63469: LD_INT 1
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 4
63478: NEG
63479: PUSH
63480: LD_INT 0
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 4
63489: NEG
63490: PUSH
63491: LD_INT 1
63493: NEG
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 4
63501: NEG
63502: PUSH
63503: LD_INT 1
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 5
63512: NEG
63513: PUSH
63514: LD_INT 0
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: LD_INT 5
63523: NEG
63524: PUSH
63525: LD_INT 1
63527: NEG
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 5
63535: NEG
63536: PUSH
63537: LD_INT 1
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: LD_INT 6
63546: NEG
63547: PUSH
63548: LD_INT 0
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 6
63557: NEG
63558: PUSH
63559: LD_INT 1
63561: NEG
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63581: LD_ADDR_VAR 0 34
63585: PUSH
63586: LD_INT 2
63588: NEG
63589: PUSH
63590: LD_INT 3
63592: NEG
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 3
63600: NEG
63601: PUSH
63602: LD_INT 2
63604: NEG
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 3
63612: NEG
63613: PUSH
63614: LD_INT 3
63616: NEG
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 3
63624: NEG
63625: PUSH
63626: LD_INT 4
63628: NEG
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 4
63636: NEG
63637: PUSH
63638: LD_INT 3
63640: NEG
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 4
63648: NEG
63649: PUSH
63650: LD_INT 4
63652: NEG
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 4
63660: NEG
63661: PUSH
63662: LD_INT 5
63664: NEG
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 5
63672: NEG
63673: PUSH
63674: LD_INT 4
63676: NEG
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 5
63684: NEG
63685: PUSH
63686: LD_INT 5
63688: NEG
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 5
63696: NEG
63697: PUSH
63698: LD_INT 6
63700: NEG
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 6
63708: NEG
63709: PUSH
63710: LD_INT 5
63712: NEG
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 6
63720: NEG
63721: PUSH
63722: LD_INT 6
63724: NEG
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63744: LD_ADDR_VAR 0 41
63748: PUSH
63749: LD_INT 0
63751: PUSH
63752: LD_INT 2
63754: NEG
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 1
63762: NEG
63763: PUSH
63764: LD_INT 3
63766: NEG
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 1
63774: PUSH
63775: LD_INT 2
63777: NEG
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: LIST
63787: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63788: LD_ADDR_VAR 0 42
63792: PUSH
63793: LD_INT 2
63795: PUSH
63796: LD_INT 0
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 2
63805: PUSH
63806: LD_INT 1
63808: NEG
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: LD_INT 3
63816: PUSH
63817: LD_INT 1
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: LIST
63828: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63829: LD_ADDR_VAR 0 43
63833: PUSH
63834: LD_INT 2
63836: PUSH
63837: LD_INT 2
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 3
63846: PUSH
63847: LD_INT 2
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 2
63856: PUSH
63857: LD_INT 3
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: LIST
63868: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63869: LD_ADDR_VAR 0 44
63873: PUSH
63874: LD_INT 0
63876: PUSH
63877: LD_INT 2
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 1
63886: PUSH
63887: LD_INT 3
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 1
63896: NEG
63897: PUSH
63898: LD_INT 2
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: LIST
63909: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63910: LD_ADDR_VAR 0 45
63914: PUSH
63915: LD_INT 2
63917: NEG
63918: PUSH
63919: LD_INT 0
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: LD_INT 2
63928: NEG
63929: PUSH
63930: LD_INT 1
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: LD_INT 3
63939: NEG
63940: PUSH
63941: LD_INT 1
63943: NEG
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: LIST
63953: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63954: LD_ADDR_VAR 0 46
63958: PUSH
63959: LD_INT 2
63961: NEG
63962: PUSH
63963: LD_INT 2
63965: NEG
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 2
63973: NEG
63974: PUSH
63975: LD_INT 3
63977: NEG
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 3
63985: NEG
63986: PUSH
63987: LD_INT 2
63989: NEG
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: LIST
63999: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64000: LD_ADDR_VAR 0 47
64004: PUSH
64005: LD_INT 2
64007: NEG
64008: PUSH
64009: LD_INT 3
64011: NEG
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 1
64019: NEG
64020: PUSH
64021: LD_INT 3
64023: NEG
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64033: LD_ADDR_VAR 0 48
64037: PUSH
64038: LD_INT 1
64040: PUSH
64041: LD_INT 2
64043: NEG
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 2
64051: PUSH
64052: LD_INT 1
64054: NEG
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64064: LD_ADDR_VAR 0 49
64068: PUSH
64069: LD_INT 3
64071: PUSH
64072: LD_INT 1
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 3
64081: PUSH
64082: LD_INT 2
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64093: LD_ADDR_VAR 0 50
64097: PUSH
64098: LD_INT 2
64100: PUSH
64101: LD_INT 3
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 1
64110: PUSH
64111: LD_INT 3
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64122: LD_ADDR_VAR 0 51
64126: PUSH
64127: LD_INT 1
64129: NEG
64130: PUSH
64131: LD_INT 2
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 2
64140: NEG
64141: PUSH
64142: LD_INT 1
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64153: LD_ADDR_VAR 0 52
64157: PUSH
64158: LD_INT 3
64160: NEG
64161: PUSH
64162: LD_INT 1
64164: NEG
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 3
64172: NEG
64173: PUSH
64174: LD_INT 2
64176: NEG
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64186: LD_ADDR_VAR 0 53
64190: PUSH
64191: LD_INT 1
64193: NEG
64194: PUSH
64195: LD_INT 3
64197: NEG
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: LD_INT 0
64205: PUSH
64206: LD_INT 3
64208: NEG
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 1
64216: PUSH
64217: LD_INT 2
64219: NEG
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: LIST
64229: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64230: LD_ADDR_VAR 0 54
64234: PUSH
64235: LD_INT 2
64237: PUSH
64238: LD_INT 1
64240: NEG
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 3
64248: PUSH
64249: LD_INT 0
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 3
64258: PUSH
64259: LD_INT 1
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: LIST
64270: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64271: LD_ADDR_VAR 0 55
64275: PUSH
64276: LD_INT 3
64278: PUSH
64279: LD_INT 2
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 3
64288: PUSH
64289: LD_INT 3
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PUSH
64296: LD_INT 2
64298: PUSH
64299: LD_INT 3
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: LIST
64310: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64311: LD_ADDR_VAR 0 56
64315: PUSH
64316: LD_INT 1
64318: PUSH
64319: LD_INT 3
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 0
64328: PUSH
64329: LD_INT 3
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 1
64338: NEG
64339: PUSH
64340: LD_INT 2
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: LIST
64351: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64352: LD_ADDR_VAR 0 57
64356: PUSH
64357: LD_INT 2
64359: NEG
64360: PUSH
64361: LD_INT 1
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: LD_INT 3
64370: NEG
64371: PUSH
64372: LD_INT 0
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 3
64381: NEG
64382: PUSH
64383: LD_INT 1
64385: NEG
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: LIST
64395: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64396: LD_ADDR_VAR 0 58
64400: PUSH
64401: LD_INT 2
64403: NEG
64404: PUSH
64405: LD_INT 3
64407: NEG
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 3
64415: NEG
64416: PUSH
64417: LD_INT 2
64419: NEG
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 3
64427: NEG
64428: PUSH
64429: LD_INT 3
64431: NEG
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: LIST
64441: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64442: LD_ADDR_VAR 0 59
64446: PUSH
64447: LD_INT 1
64449: NEG
64450: PUSH
64451: LD_INT 2
64453: NEG
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 0
64461: PUSH
64462: LD_INT 2
64464: NEG
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 1
64472: PUSH
64473: LD_INT 1
64475: NEG
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: LIST
64485: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64486: LD_ADDR_VAR 0 60
64490: PUSH
64491: LD_INT 1
64493: PUSH
64494: LD_INT 1
64496: NEG
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 2
64504: PUSH
64505: LD_INT 0
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 2
64514: PUSH
64515: LD_INT 1
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: LIST
64526: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64527: LD_ADDR_VAR 0 61
64531: PUSH
64532: LD_INT 2
64534: PUSH
64535: LD_INT 1
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 2
64544: PUSH
64545: LD_INT 2
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 1
64554: PUSH
64555: LD_INT 2
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: LIST
64566: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64567: LD_ADDR_VAR 0 62
64571: PUSH
64572: LD_INT 1
64574: PUSH
64575: LD_INT 2
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 0
64584: PUSH
64585: LD_INT 2
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 1
64594: NEG
64595: PUSH
64596: LD_INT 1
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: LIST
64607: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64608: LD_ADDR_VAR 0 63
64612: PUSH
64613: LD_INT 1
64615: NEG
64616: PUSH
64617: LD_INT 1
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 2
64626: NEG
64627: PUSH
64628: LD_INT 0
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 2
64637: NEG
64638: PUSH
64639: LD_INT 1
64641: NEG
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: LIST
64651: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64652: LD_ADDR_VAR 0 64
64656: PUSH
64657: LD_INT 1
64659: NEG
64660: PUSH
64661: LD_INT 2
64663: NEG
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 2
64671: NEG
64672: PUSH
64673: LD_INT 1
64675: NEG
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 2
64683: NEG
64684: PUSH
64685: LD_INT 2
64687: NEG
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: LIST
64697: ST_TO_ADDR
// end ; 2 :
64698: GO 67964
64700: LD_INT 2
64702: DOUBLE
64703: EQUAL
64704: IFTRUE 64708
64706: GO 67963
64708: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
64709: LD_ADDR_VAR 0 29
64713: PUSH
64714: LD_INT 4
64716: PUSH
64717: LD_INT 0
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: LD_INT 4
64726: PUSH
64727: LD_INT 1
64729: NEG
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: LD_INT 5
64737: PUSH
64738: LD_INT 0
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 5
64747: PUSH
64748: LD_INT 1
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 4
64757: PUSH
64758: LD_INT 1
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 3
64767: PUSH
64768: LD_INT 0
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 3
64777: PUSH
64778: LD_INT 1
64780: NEG
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 3
64788: PUSH
64789: LD_INT 2
64791: NEG
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: LD_INT 5
64799: PUSH
64800: LD_INT 2
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: PUSH
64807: LD_INT 3
64809: PUSH
64810: LD_INT 3
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 3
64819: PUSH
64820: LD_INT 2
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 4
64829: PUSH
64830: LD_INT 3
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 4
64839: PUSH
64840: LD_INT 4
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 3
64849: PUSH
64850: LD_INT 4
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: LD_INT 2
64859: PUSH
64860: LD_INT 3
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 2
64869: PUSH
64870: LD_INT 2
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 4
64879: PUSH
64880: LD_INT 2
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 2
64889: PUSH
64890: LD_INT 4
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 0
64899: PUSH
64900: LD_INT 4
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 0
64909: PUSH
64910: LD_INT 3
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 1
64919: PUSH
64920: LD_INT 4
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 1
64929: PUSH
64930: LD_INT 5
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 0
64939: PUSH
64940: LD_INT 5
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 1
64949: NEG
64950: PUSH
64951: LD_INT 4
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 1
64960: NEG
64961: PUSH
64962: LD_INT 3
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 2
64971: PUSH
64972: LD_INT 5
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 2
64981: NEG
64982: PUSH
64983: LD_INT 3
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 3
64992: NEG
64993: PUSH
64994: LD_INT 0
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: LD_INT 3
65003: NEG
65004: PUSH
65005: LD_INT 1
65007: NEG
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 2
65015: NEG
65016: PUSH
65017: LD_INT 0
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 2
65026: NEG
65027: PUSH
65028: LD_INT 1
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 3
65037: NEG
65038: PUSH
65039: LD_INT 1
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: LD_INT 4
65048: NEG
65049: PUSH
65050: LD_INT 0
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 4
65059: NEG
65060: PUSH
65061: LD_INT 1
65063: NEG
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 4
65071: NEG
65072: PUSH
65073: LD_INT 2
65075: NEG
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 2
65083: NEG
65084: PUSH
65085: LD_INT 2
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_INT 4
65094: NEG
65095: PUSH
65096: LD_INT 4
65098: NEG
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 4
65106: NEG
65107: PUSH
65108: LD_INT 5
65110: NEG
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 3
65118: NEG
65119: PUSH
65120: LD_INT 4
65122: NEG
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 3
65130: NEG
65131: PUSH
65132: LD_INT 3
65134: NEG
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 4
65142: NEG
65143: PUSH
65144: LD_INT 3
65146: NEG
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 5
65154: NEG
65155: PUSH
65156: LD_INT 4
65158: NEG
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: PUSH
65164: LD_INT 5
65166: NEG
65167: PUSH
65168: LD_INT 5
65170: NEG
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 3
65178: NEG
65179: PUSH
65180: LD_INT 5
65182: NEG
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 5
65190: NEG
65191: PUSH
65192: LD_INT 3
65194: NEG
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: LIST
65212: LIST
65213: LIST
65214: LIST
65215: LIST
65216: LIST
65217: LIST
65218: LIST
65219: LIST
65220: LIST
65221: LIST
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65247: LD_ADDR_VAR 0 30
65251: PUSH
65252: LD_INT 4
65254: PUSH
65255: LD_INT 4
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: PUSH
65262: LD_INT 4
65264: PUSH
65265: LD_INT 3
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: LD_INT 5
65274: PUSH
65275: LD_INT 4
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: LD_INT 5
65284: PUSH
65285: LD_INT 5
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: PUSH
65292: LD_INT 4
65294: PUSH
65295: LD_INT 5
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: PUSH
65302: LD_INT 3
65304: PUSH
65305: LD_INT 4
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 3
65314: PUSH
65315: LD_INT 3
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_INT 5
65324: PUSH
65325: LD_INT 3
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: LD_INT 3
65334: PUSH
65335: LD_INT 5
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: PUSH
65342: LD_INT 0
65344: PUSH
65345: LD_INT 3
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 0
65354: PUSH
65355: LD_INT 2
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 1
65364: PUSH
65365: LD_INT 3
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 1
65374: PUSH
65375: LD_INT 4
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 0
65384: PUSH
65385: LD_INT 4
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 1
65394: NEG
65395: PUSH
65396: LD_INT 3
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 1
65405: NEG
65406: PUSH
65407: LD_INT 2
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 2
65416: PUSH
65417: LD_INT 4
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 2
65426: NEG
65427: PUSH
65428: LD_INT 2
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 4
65437: NEG
65438: PUSH
65439: LD_INT 0
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 4
65448: NEG
65449: PUSH
65450: LD_INT 1
65452: NEG
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 3
65460: NEG
65461: PUSH
65462: LD_INT 0
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 3
65471: NEG
65472: PUSH
65473: LD_INT 1
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 4
65482: NEG
65483: PUSH
65484: LD_INT 1
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 5
65493: NEG
65494: PUSH
65495: LD_INT 0
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 5
65504: NEG
65505: PUSH
65506: LD_INT 1
65508: NEG
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 5
65516: NEG
65517: PUSH
65518: LD_INT 2
65520: NEG
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 3
65528: NEG
65529: PUSH
65530: LD_INT 2
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 3
65539: NEG
65540: PUSH
65541: LD_INT 3
65543: NEG
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 3
65551: NEG
65552: PUSH
65553: LD_INT 4
65555: NEG
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 2
65563: NEG
65564: PUSH
65565: LD_INT 3
65567: NEG
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 2
65575: NEG
65576: PUSH
65577: LD_INT 2
65579: NEG
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 3
65587: NEG
65588: PUSH
65589: LD_INT 2
65591: NEG
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_INT 4
65599: NEG
65600: PUSH
65601: LD_INT 3
65603: NEG
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: PUSH
65609: LD_INT 4
65611: NEG
65612: PUSH
65613: LD_INT 4
65615: NEG
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 2
65623: NEG
65624: PUSH
65625: LD_INT 4
65627: NEG
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_INT 4
65635: NEG
65636: PUSH
65637: LD_INT 2
65639: NEG
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 0
65647: PUSH
65648: LD_INT 4
65650: NEG
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 0
65658: PUSH
65659: LD_INT 5
65661: NEG
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: LD_INT 1
65669: PUSH
65670: LD_INT 4
65672: NEG
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: LD_INT 1
65680: PUSH
65681: LD_INT 3
65683: NEG
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: LD_INT 0
65691: PUSH
65692: LD_INT 3
65694: NEG
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: LD_INT 1
65702: NEG
65703: PUSH
65704: LD_INT 4
65706: NEG
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 1
65714: NEG
65715: PUSH
65716: LD_INT 5
65718: NEG
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 2
65726: PUSH
65727: LD_INT 3
65729: NEG
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 2
65737: NEG
65738: PUSH
65739: LD_INT 5
65741: NEG
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: LIST
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: LIST
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65794: LD_ADDR_VAR 0 31
65798: PUSH
65799: LD_INT 0
65801: PUSH
65802: LD_INT 4
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: LD_INT 0
65811: PUSH
65812: LD_INT 3
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 1
65821: PUSH
65822: LD_INT 4
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 1
65831: PUSH
65832: LD_INT 5
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 0
65841: PUSH
65842: LD_INT 5
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 1
65851: NEG
65852: PUSH
65853: LD_INT 4
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 1
65862: NEG
65863: PUSH
65864: LD_INT 3
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: LD_INT 2
65873: PUSH
65874: LD_INT 5
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: LD_INT 2
65883: NEG
65884: PUSH
65885: LD_INT 3
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 3
65894: NEG
65895: PUSH
65896: LD_INT 0
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 3
65905: NEG
65906: PUSH
65907: LD_INT 1
65909: NEG
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 2
65917: NEG
65918: PUSH
65919: LD_INT 0
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: LD_INT 2
65928: NEG
65929: PUSH
65930: LD_INT 1
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 3
65939: NEG
65940: PUSH
65941: LD_INT 1
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 4
65950: NEG
65951: PUSH
65952: LD_INT 0
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 4
65961: NEG
65962: PUSH
65963: LD_INT 1
65965: NEG
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: LD_INT 4
65973: NEG
65974: PUSH
65975: LD_INT 2
65977: NEG
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 2
65985: NEG
65986: PUSH
65987: LD_INT 2
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 4
65996: NEG
65997: PUSH
65998: LD_INT 4
66000: NEG
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PUSH
66006: LD_INT 4
66008: NEG
66009: PUSH
66010: LD_INT 5
66012: NEG
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 3
66020: NEG
66021: PUSH
66022: LD_INT 4
66024: NEG
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 3
66032: NEG
66033: PUSH
66034: LD_INT 3
66036: NEG
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 4
66044: NEG
66045: PUSH
66046: LD_INT 3
66048: NEG
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: PUSH
66054: LD_INT 5
66056: NEG
66057: PUSH
66058: LD_INT 4
66060: NEG
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: LD_INT 5
66068: NEG
66069: PUSH
66070: LD_INT 5
66072: NEG
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 3
66080: NEG
66081: PUSH
66082: LD_INT 5
66084: NEG
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: LD_INT 5
66092: NEG
66093: PUSH
66094: LD_INT 3
66096: NEG
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 0
66104: PUSH
66105: LD_INT 3
66107: NEG
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 0
66115: PUSH
66116: LD_INT 4
66118: NEG
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: LD_INT 1
66126: PUSH
66127: LD_INT 3
66129: NEG
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: PUSH
66135: LD_INT 1
66137: PUSH
66138: LD_INT 2
66140: NEG
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PUSH
66146: LD_INT 0
66148: PUSH
66149: LD_INT 2
66151: NEG
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 1
66159: NEG
66160: PUSH
66161: LD_INT 3
66163: NEG
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 1
66171: NEG
66172: PUSH
66173: LD_INT 4
66175: NEG
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 2
66183: PUSH
66184: LD_INT 2
66186: NEG
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 2
66194: NEG
66195: PUSH
66196: LD_INT 4
66198: NEG
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: LD_INT 4
66206: PUSH
66207: LD_INT 0
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: PUSH
66214: LD_INT 4
66216: PUSH
66217: LD_INT 1
66219: NEG
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 5
66227: PUSH
66228: LD_INT 0
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 5
66237: PUSH
66238: LD_INT 1
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: LD_INT 4
66247: PUSH
66248: LD_INT 1
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PUSH
66255: LD_INT 3
66257: PUSH
66258: LD_INT 0
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: PUSH
66265: LD_INT 3
66267: PUSH
66268: LD_INT 1
66270: NEG
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: LD_INT 3
66278: PUSH
66279: LD_INT 2
66281: NEG
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: PUSH
66287: LD_INT 5
66289: PUSH
66290: LD_INT 2
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: LIST
66301: LIST
66302: LIST
66303: LIST
66304: LIST
66305: LIST
66306: LIST
66307: LIST
66308: LIST
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66344: LD_ADDR_VAR 0 32
66348: PUSH
66349: LD_INT 4
66351: NEG
66352: PUSH
66353: LD_INT 0
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: LD_INT 4
66362: NEG
66363: PUSH
66364: LD_INT 1
66366: NEG
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 3
66374: NEG
66375: PUSH
66376: LD_INT 0
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 3
66385: NEG
66386: PUSH
66387: LD_INT 1
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 4
66396: NEG
66397: PUSH
66398: LD_INT 1
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 5
66407: NEG
66408: PUSH
66409: LD_INT 0
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 5
66418: NEG
66419: PUSH
66420: LD_INT 1
66422: NEG
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: LD_INT 5
66430: NEG
66431: PUSH
66432: LD_INT 2
66434: NEG
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 3
66442: NEG
66443: PUSH
66444: LD_INT 2
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 3
66453: NEG
66454: PUSH
66455: LD_INT 3
66457: NEG
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 3
66465: NEG
66466: PUSH
66467: LD_INT 4
66469: NEG
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 2
66477: NEG
66478: PUSH
66479: LD_INT 3
66481: NEG
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 2
66489: NEG
66490: PUSH
66491: LD_INT 2
66493: NEG
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 3
66501: NEG
66502: PUSH
66503: LD_INT 2
66505: NEG
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: LD_INT 4
66513: NEG
66514: PUSH
66515: LD_INT 3
66517: NEG
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 4
66525: NEG
66526: PUSH
66527: LD_INT 4
66529: NEG
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 2
66537: NEG
66538: PUSH
66539: LD_INT 4
66541: NEG
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 4
66549: NEG
66550: PUSH
66551: LD_INT 2
66553: NEG
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: LD_INT 0
66561: PUSH
66562: LD_INT 4
66564: NEG
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 0
66572: PUSH
66573: LD_INT 5
66575: NEG
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 1
66583: PUSH
66584: LD_INT 4
66586: NEG
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 1
66594: PUSH
66595: LD_INT 3
66597: NEG
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: LD_INT 0
66605: PUSH
66606: LD_INT 3
66608: NEG
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 1
66616: NEG
66617: PUSH
66618: LD_INT 4
66620: NEG
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: LD_INT 1
66628: NEG
66629: PUSH
66630: LD_INT 5
66632: NEG
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 2
66640: PUSH
66641: LD_INT 3
66643: NEG
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: PUSH
66649: LD_INT 2
66651: NEG
66652: PUSH
66653: LD_INT 5
66655: NEG
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 3
66663: PUSH
66664: LD_INT 0
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: PUSH
66671: LD_INT 3
66673: PUSH
66674: LD_INT 1
66676: NEG
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: PUSH
66682: LD_INT 4
66684: PUSH
66685: LD_INT 0
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: PUSH
66692: LD_INT 4
66694: PUSH
66695: LD_INT 1
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: LD_INT 3
66704: PUSH
66705: LD_INT 1
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 2
66714: PUSH
66715: LD_INT 0
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 2
66724: PUSH
66725: LD_INT 1
66727: NEG
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 2
66735: PUSH
66736: LD_INT 2
66738: NEG
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: PUSH
66744: LD_INT 4
66746: PUSH
66747: LD_INT 2
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 4
66756: PUSH
66757: LD_INT 4
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 4
66766: PUSH
66767: LD_INT 3
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 5
66776: PUSH
66777: LD_INT 4
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: PUSH
66784: LD_INT 5
66786: PUSH
66787: LD_INT 5
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: PUSH
66794: LD_INT 4
66796: PUSH
66797: LD_INT 5
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: LD_INT 3
66806: PUSH
66807: LD_INT 4
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: PUSH
66814: LD_INT 3
66816: PUSH
66817: LD_INT 3
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: LD_INT 5
66826: PUSH
66827: LD_INT 3
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: PUSH
66834: LD_INT 3
66836: PUSH
66837: LD_INT 5
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: LIST
66859: LIST
66860: LIST
66861: LIST
66862: LIST
66863: LIST
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66891: LD_ADDR_VAR 0 33
66895: PUSH
66896: LD_INT 4
66898: NEG
66899: PUSH
66900: LD_INT 4
66902: NEG
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: LD_INT 4
66910: NEG
66911: PUSH
66912: LD_INT 5
66914: NEG
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: LD_INT 3
66922: NEG
66923: PUSH
66924: LD_INT 4
66926: NEG
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: PUSH
66932: LD_INT 3
66934: NEG
66935: PUSH
66936: LD_INT 3
66938: NEG
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: LD_INT 4
66946: NEG
66947: PUSH
66948: LD_INT 3
66950: NEG
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: PUSH
66956: LD_INT 5
66958: NEG
66959: PUSH
66960: LD_INT 4
66962: NEG
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PUSH
66968: LD_INT 5
66970: NEG
66971: PUSH
66972: LD_INT 5
66974: NEG
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PUSH
66980: LD_INT 3
66982: NEG
66983: PUSH
66984: LD_INT 5
66986: NEG
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 5
66994: NEG
66995: PUSH
66996: LD_INT 3
66998: NEG
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: PUSH
67004: LD_INT 0
67006: PUSH
67007: LD_INT 3
67009: NEG
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: PUSH
67015: LD_INT 0
67017: PUSH
67018: LD_INT 4
67020: NEG
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PUSH
67026: LD_INT 1
67028: PUSH
67029: LD_INT 3
67031: NEG
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: LD_INT 1
67039: PUSH
67040: LD_INT 2
67042: NEG
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 0
67050: PUSH
67051: LD_INT 2
67053: NEG
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 1
67061: NEG
67062: PUSH
67063: LD_INT 3
67065: NEG
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: PUSH
67071: LD_INT 1
67073: NEG
67074: PUSH
67075: LD_INT 4
67077: NEG
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 2
67085: PUSH
67086: LD_INT 2
67088: NEG
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 2
67096: NEG
67097: PUSH
67098: LD_INT 4
67100: NEG
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 4
67108: PUSH
67109: LD_INT 0
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: LD_INT 4
67118: PUSH
67119: LD_INT 1
67121: NEG
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: PUSH
67127: LD_INT 5
67129: PUSH
67130: LD_INT 0
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 5
67139: PUSH
67140: LD_INT 1
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: LD_INT 4
67149: PUSH
67150: LD_INT 1
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 3
67159: PUSH
67160: LD_INT 0
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: LD_INT 3
67169: PUSH
67170: LD_INT 1
67172: NEG
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: PUSH
67178: LD_INT 3
67180: PUSH
67181: LD_INT 2
67183: NEG
67184: PUSH
67185: EMPTY
67186: LIST
67187: LIST
67188: PUSH
67189: LD_INT 5
67191: PUSH
67192: LD_INT 2
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: PUSH
67199: LD_INT 3
67201: PUSH
67202: LD_INT 3
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: PUSH
67209: LD_INT 3
67211: PUSH
67212: LD_INT 2
67214: PUSH
67215: EMPTY
67216: LIST
67217: LIST
67218: PUSH
67219: LD_INT 4
67221: PUSH
67222: LD_INT 3
67224: PUSH
67225: EMPTY
67226: LIST
67227: LIST
67228: PUSH
67229: LD_INT 4
67231: PUSH
67232: LD_INT 4
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: PUSH
67239: LD_INT 3
67241: PUSH
67242: LD_INT 4
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: PUSH
67249: LD_INT 2
67251: PUSH
67252: LD_INT 3
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: LD_INT 2
67261: PUSH
67262: LD_INT 2
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: PUSH
67269: LD_INT 4
67271: PUSH
67272: LD_INT 2
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PUSH
67279: LD_INT 2
67281: PUSH
67282: LD_INT 4
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 0
67291: PUSH
67292: LD_INT 4
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 0
67301: PUSH
67302: LD_INT 3
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: LD_INT 1
67311: PUSH
67312: LD_INT 4
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: LD_INT 1
67321: PUSH
67322: LD_INT 5
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 0
67331: PUSH
67332: LD_INT 5
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: PUSH
67339: LD_INT 1
67341: NEG
67342: PUSH
67343: LD_INT 4
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: PUSH
67350: LD_INT 1
67352: NEG
67353: PUSH
67354: LD_INT 3
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: PUSH
67361: LD_INT 2
67363: PUSH
67364: LD_INT 5
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_INT 2
67373: NEG
67374: PUSH
67375: LD_INT 3
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: LIST
67401: LIST
67402: LIST
67403: LIST
67404: LIST
67405: LIST
67406: LIST
67407: LIST
67408: LIST
67409: LIST
67410: LIST
67411: LIST
67412: LIST
67413: LIST
67414: LIST
67415: LIST
67416: LIST
67417: LIST
67418: LIST
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: LIST
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67429: LD_ADDR_VAR 0 34
67433: PUSH
67434: LD_INT 0
67436: PUSH
67437: LD_INT 4
67439: NEG
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: LD_INT 0
67447: PUSH
67448: LD_INT 5
67450: NEG
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: LD_INT 1
67458: PUSH
67459: LD_INT 4
67461: NEG
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 1
67469: PUSH
67470: LD_INT 3
67472: NEG
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 0
67480: PUSH
67481: LD_INT 3
67483: NEG
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: LD_INT 1
67491: NEG
67492: PUSH
67493: LD_INT 4
67495: NEG
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 1
67503: NEG
67504: PUSH
67505: LD_INT 5
67507: NEG
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 2
67515: PUSH
67516: LD_INT 3
67518: NEG
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PUSH
67524: LD_INT 2
67526: NEG
67527: PUSH
67528: LD_INT 5
67530: NEG
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 3
67538: PUSH
67539: LD_INT 0
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: LD_INT 3
67548: PUSH
67549: LD_INT 1
67551: NEG
67552: PUSH
67553: EMPTY
67554: LIST
67555: LIST
67556: PUSH
67557: LD_INT 4
67559: PUSH
67560: LD_INT 0
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 4
67569: PUSH
67570: LD_INT 1
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: LD_INT 3
67579: PUSH
67580: LD_INT 1
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: PUSH
67587: LD_INT 2
67589: PUSH
67590: LD_INT 0
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: PUSH
67597: LD_INT 2
67599: PUSH
67600: LD_INT 1
67602: NEG
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: PUSH
67608: LD_INT 2
67610: PUSH
67611: LD_INT 2
67613: NEG
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: LD_INT 4
67621: PUSH
67622: LD_INT 2
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: PUSH
67629: LD_INT 4
67631: PUSH
67632: LD_INT 4
67634: PUSH
67635: EMPTY
67636: LIST
67637: LIST
67638: PUSH
67639: LD_INT 4
67641: PUSH
67642: LD_INT 3
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 5
67651: PUSH
67652: LD_INT 4
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: LD_INT 5
67661: PUSH
67662: LD_INT 5
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 4
67671: PUSH
67672: LD_INT 5
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: LD_INT 3
67681: PUSH
67682: LD_INT 4
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 3
67691: PUSH
67692: LD_INT 3
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 5
67701: PUSH
67702: LD_INT 3
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: PUSH
67709: LD_INT 3
67711: PUSH
67712: LD_INT 5
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: PUSH
67719: LD_INT 0
67721: PUSH
67722: LD_INT 3
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: LD_INT 0
67731: PUSH
67732: LD_INT 2
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 1
67741: PUSH
67742: LD_INT 3
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: LD_INT 1
67751: PUSH
67752: LD_INT 4
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: PUSH
67759: LD_INT 0
67761: PUSH
67762: LD_INT 4
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: PUSH
67769: LD_INT 1
67771: NEG
67772: PUSH
67773: LD_INT 3
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PUSH
67780: LD_INT 1
67782: NEG
67783: PUSH
67784: LD_INT 2
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_INT 2
67793: PUSH
67794: LD_INT 4
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: PUSH
67801: LD_INT 2
67803: NEG
67804: PUSH
67805: LD_INT 2
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 4
67814: NEG
67815: PUSH
67816: LD_INT 0
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 4
67825: NEG
67826: PUSH
67827: LD_INT 1
67829: NEG
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 3
67837: NEG
67838: PUSH
67839: LD_INT 0
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: PUSH
67846: LD_INT 3
67848: NEG
67849: PUSH
67850: LD_INT 1
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: LD_INT 4
67859: NEG
67860: PUSH
67861: LD_INT 1
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: LD_INT 5
67870: NEG
67871: PUSH
67872: LD_INT 0
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: LD_INT 5
67881: NEG
67882: PUSH
67883: LD_INT 1
67885: NEG
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 5
67893: NEG
67894: PUSH
67895: LD_INT 2
67897: NEG
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: LD_INT 3
67905: NEG
67906: PUSH
67907: LD_INT 2
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: LIST
67922: LIST
67923: LIST
67924: LIST
67925: LIST
67926: LIST
67927: LIST
67928: LIST
67929: LIST
67930: LIST
67931: LIST
67932: LIST
67933: LIST
67934: LIST
67935: LIST
67936: LIST
67937: LIST
67938: LIST
67939: LIST
67940: LIST
67941: LIST
67942: LIST
67943: LIST
67944: LIST
67945: LIST
67946: LIST
67947: LIST
67948: LIST
67949: LIST
67950: LIST
67951: LIST
67952: LIST
67953: LIST
67954: LIST
67955: LIST
67956: LIST
67957: LIST
67958: LIST
67959: LIST
67960: ST_TO_ADDR
// end ; end ;
67961: GO 67964
67963: POP
// case btype of b_depot , b_warehouse :
67964: LD_VAR 0 1
67968: PUSH
67969: LD_INT 0
67971: DOUBLE
67972: EQUAL
67973: IFTRUE 67983
67975: LD_INT 1
67977: DOUBLE
67978: EQUAL
67979: IFTRUE 67983
67981: GO 68184
67983: POP
// case nation of nation_american :
67984: LD_VAR 0 5
67988: PUSH
67989: LD_INT 1
67991: DOUBLE
67992: EQUAL
67993: IFTRUE 67997
67995: GO 68053
67997: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67998: LD_ADDR_VAR 0 9
68002: PUSH
68003: LD_VAR 0 11
68007: PUSH
68008: LD_VAR 0 12
68012: PUSH
68013: LD_VAR 0 13
68017: PUSH
68018: LD_VAR 0 14
68022: PUSH
68023: LD_VAR 0 15
68027: PUSH
68028: LD_VAR 0 16
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: PUSH
68041: LD_VAR 0 4
68045: PUSH
68046: LD_INT 1
68048: PLUS
68049: ARRAY
68050: ST_TO_ADDR
68051: GO 68182
68053: LD_INT 2
68055: DOUBLE
68056: EQUAL
68057: IFTRUE 68061
68059: GO 68117
68061: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68062: LD_ADDR_VAR 0 9
68066: PUSH
68067: LD_VAR 0 17
68071: PUSH
68072: LD_VAR 0 18
68076: PUSH
68077: LD_VAR 0 19
68081: PUSH
68082: LD_VAR 0 20
68086: PUSH
68087: LD_VAR 0 21
68091: PUSH
68092: LD_VAR 0 22
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: PUSH
68105: LD_VAR 0 4
68109: PUSH
68110: LD_INT 1
68112: PLUS
68113: ARRAY
68114: ST_TO_ADDR
68115: GO 68182
68117: LD_INT 3
68119: DOUBLE
68120: EQUAL
68121: IFTRUE 68125
68123: GO 68181
68125: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68126: LD_ADDR_VAR 0 9
68130: PUSH
68131: LD_VAR 0 23
68135: PUSH
68136: LD_VAR 0 24
68140: PUSH
68141: LD_VAR 0 25
68145: PUSH
68146: LD_VAR 0 26
68150: PUSH
68151: LD_VAR 0 27
68155: PUSH
68156: LD_VAR 0 28
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: LIST
68165: LIST
68166: LIST
68167: LIST
68168: PUSH
68169: LD_VAR 0 4
68173: PUSH
68174: LD_INT 1
68176: PLUS
68177: ARRAY
68178: ST_TO_ADDR
68179: GO 68182
68181: POP
68182: GO 68737
68184: LD_INT 2
68186: DOUBLE
68187: EQUAL
68188: IFTRUE 68198
68190: LD_INT 3
68192: DOUBLE
68193: EQUAL
68194: IFTRUE 68198
68196: GO 68254
68198: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68199: LD_ADDR_VAR 0 9
68203: PUSH
68204: LD_VAR 0 29
68208: PUSH
68209: LD_VAR 0 30
68213: PUSH
68214: LD_VAR 0 31
68218: PUSH
68219: LD_VAR 0 32
68223: PUSH
68224: LD_VAR 0 33
68228: PUSH
68229: LD_VAR 0 34
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: LIST
68238: LIST
68239: LIST
68240: LIST
68241: PUSH
68242: LD_VAR 0 4
68246: PUSH
68247: LD_INT 1
68249: PLUS
68250: ARRAY
68251: ST_TO_ADDR
68252: GO 68737
68254: LD_INT 16
68256: DOUBLE
68257: EQUAL
68258: IFTRUE 68316
68260: LD_INT 17
68262: DOUBLE
68263: EQUAL
68264: IFTRUE 68316
68266: LD_INT 18
68268: DOUBLE
68269: EQUAL
68270: IFTRUE 68316
68272: LD_INT 19
68274: DOUBLE
68275: EQUAL
68276: IFTRUE 68316
68278: LD_INT 22
68280: DOUBLE
68281: EQUAL
68282: IFTRUE 68316
68284: LD_INT 20
68286: DOUBLE
68287: EQUAL
68288: IFTRUE 68316
68290: LD_INT 21
68292: DOUBLE
68293: EQUAL
68294: IFTRUE 68316
68296: LD_INT 23
68298: DOUBLE
68299: EQUAL
68300: IFTRUE 68316
68302: LD_INT 24
68304: DOUBLE
68305: EQUAL
68306: IFTRUE 68316
68308: LD_INT 25
68310: DOUBLE
68311: EQUAL
68312: IFTRUE 68316
68314: GO 68372
68316: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68317: LD_ADDR_VAR 0 9
68321: PUSH
68322: LD_VAR 0 35
68326: PUSH
68327: LD_VAR 0 36
68331: PUSH
68332: LD_VAR 0 37
68336: PUSH
68337: LD_VAR 0 38
68341: PUSH
68342: LD_VAR 0 39
68346: PUSH
68347: LD_VAR 0 40
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: PUSH
68360: LD_VAR 0 4
68364: PUSH
68365: LD_INT 1
68367: PLUS
68368: ARRAY
68369: ST_TO_ADDR
68370: GO 68737
68372: LD_INT 6
68374: DOUBLE
68375: EQUAL
68376: IFTRUE 68428
68378: LD_INT 7
68380: DOUBLE
68381: EQUAL
68382: IFTRUE 68428
68384: LD_INT 8
68386: DOUBLE
68387: EQUAL
68388: IFTRUE 68428
68390: LD_INT 13
68392: DOUBLE
68393: EQUAL
68394: IFTRUE 68428
68396: LD_INT 12
68398: DOUBLE
68399: EQUAL
68400: IFTRUE 68428
68402: LD_INT 15
68404: DOUBLE
68405: EQUAL
68406: IFTRUE 68428
68408: LD_INT 11
68410: DOUBLE
68411: EQUAL
68412: IFTRUE 68428
68414: LD_INT 14
68416: DOUBLE
68417: EQUAL
68418: IFTRUE 68428
68420: LD_INT 10
68422: DOUBLE
68423: EQUAL
68424: IFTRUE 68428
68426: GO 68484
68428: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68429: LD_ADDR_VAR 0 9
68433: PUSH
68434: LD_VAR 0 41
68438: PUSH
68439: LD_VAR 0 42
68443: PUSH
68444: LD_VAR 0 43
68448: PUSH
68449: LD_VAR 0 44
68453: PUSH
68454: LD_VAR 0 45
68458: PUSH
68459: LD_VAR 0 46
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: PUSH
68472: LD_VAR 0 4
68476: PUSH
68477: LD_INT 1
68479: PLUS
68480: ARRAY
68481: ST_TO_ADDR
68482: GO 68737
68484: LD_INT 36
68486: DOUBLE
68487: EQUAL
68488: IFTRUE 68492
68490: GO 68548
68492: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68493: LD_ADDR_VAR 0 9
68497: PUSH
68498: LD_VAR 0 47
68502: PUSH
68503: LD_VAR 0 48
68507: PUSH
68508: LD_VAR 0 49
68512: PUSH
68513: LD_VAR 0 50
68517: PUSH
68518: LD_VAR 0 51
68522: PUSH
68523: LD_VAR 0 52
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: LIST
68535: PUSH
68536: LD_VAR 0 4
68540: PUSH
68541: LD_INT 1
68543: PLUS
68544: ARRAY
68545: ST_TO_ADDR
68546: GO 68737
68548: LD_INT 4
68550: DOUBLE
68551: EQUAL
68552: IFTRUE 68574
68554: LD_INT 5
68556: DOUBLE
68557: EQUAL
68558: IFTRUE 68574
68560: LD_INT 34
68562: DOUBLE
68563: EQUAL
68564: IFTRUE 68574
68566: LD_INT 37
68568: DOUBLE
68569: EQUAL
68570: IFTRUE 68574
68572: GO 68630
68574: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68575: LD_ADDR_VAR 0 9
68579: PUSH
68580: LD_VAR 0 53
68584: PUSH
68585: LD_VAR 0 54
68589: PUSH
68590: LD_VAR 0 55
68594: PUSH
68595: LD_VAR 0 56
68599: PUSH
68600: LD_VAR 0 57
68604: PUSH
68605: LD_VAR 0 58
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: LIST
68614: LIST
68615: LIST
68616: LIST
68617: PUSH
68618: LD_VAR 0 4
68622: PUSH
68623: LD_INT 1
68625: PLUS
68626: ARRAY
68627: ST_TO_ADDR
68628: GO 68737
68630: LD_INT 31
68632: DOUBLE
68633: EQUAL
68634: IFTRUE 68680
68636: LD_INT 32
68638: DOUBLE
68639: EQUAL
68640: IFTRUE 68680
68642: LD_INT 33
68644: DOUBLE
68645: EQUAL
68646: IFTRUE 68680
68648: LD_INT 27
68650: DOUBLE
68651: EQUAL
68652: IFTRUE 68680
68654: LD_INT 26
68656: DOUBLE
68657: EQUAL
68658: IFTRUE 68680
68660: LD_INT 28
68662: DOUBLE
68663: EQUAL
68664: IFTRUE 68680
68666: LD_INT 29
68668: DOUBLE
68669: EQUAL
68670: IFTRUE 68680
68672: LD_INT 30
68674: DOUBLE
68675: EQUAL
68676: IFTRUE 68680
68678: GO 68736
68680: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
68681: LD_ADDR_VAR 0 9
68685: PUSH
68686: LD_VAR 0 59
68690: PUSH
68691: LD_VAR 0 60
68695: PUSH
68696: LD_VAR 0 61
68700: PUSH
68701: LD_VAR 0 62
68705: PUSH
68706: LD_VAR 0 63
68710: PUSH
68711: LD_VAR 0 64
68715: PUSH
68716: EMPTY
68717: LIST
68718: LIST
68719: LIST
68720: LIST
68721: LIST
68722: LIST
68723: PUSH
68724: LD_VAR 0 4
68728: PUSH
68729: LD_INT 1
68731: PLUS
68732: ARRAY
68733: ST_TO_ADDR
68734: GO 68737
68736: POP
// temp_list2 = [ ] ;
68737: LD_ADDR_VAR 0 10
68741: PUSH
68742: EMPTY
68743: ST_TO_ADDR
// for i in temp_list do
68744: LD_ADDR_VAR 0 8
68748: PUSH
68749: LD_VAR 0 9
68753: PUSH
68754: FOR_IN
68755: IFFALSE 68807
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68757: LD_ADDR_VAR 0 10
68761: PUSH
68762: LD_VAR 0 10
68766: PUSH
68767: LD_VAR 0 8
68771: PUSH
68772: LD_INT 1
68774: ARRAY
68775: PUSH
68776: LD_VAR 0 2
68780: PLUS
68781: PUSH
68782: LD_VAR 0 8
68786: PUSH
68787: LD_INT 2
68789: ARRAY
68790: PUSH
68791: LD_VAR 0 3
68795: PLUS
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: PUSH
68801: EMPTY
68802: LIST
68803: ADD
68804: ST_TO_ADDR
68805: GO 68754
68807: POP
68808: POP
// result = temp_list2 ;
68809: LD_ADDR_VAR 0 7
68813: PUSH
68814: LD_VAR 0 10
68818: ST_TO_ADDR
// end ;
68819: LD_VAR 0 7
68823: RET
// export function EnemyInRange ( unit , dist ) ; begin
68824: LD_INT 0
68826: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68827: LD_ADDR_VAR 0 3
68831: PUSH
68832: LD_VAR 0 1
68836: PPUSH
68837: CALL_OW 255
68841: PPUSH
68842: LD_VAR 0 1
68846: PPUSH
68847: CALL_OW 250
68851: PPUSH
68852: LD_VAR 0 1
68856: PPUSH
68857: CALL_OW 251
68861: PPUSH
68862: LD_VAR 0 2
68866: PPUSH
68867: CALL 42220 0 4
68871: PUSH
68872: LD_INT 4
68874: ARRAY
68875: ST_TO_ADDR
// end ;
68876: LD_VAR 0 3
68880: RET
// export function PlayerSeeMe ( unit ) ; begin
68881: LD_INT 0
68883: PPUSH
// result := See ( your_side , unit ) ;
68884: LD_ADDR_VAR 0 2
68888: PUSH
68889: LD_OWVAR 2
68893: PPUSH
68894: LD_VAR 0 1
68898: PPUSH
68899: CALL_OW 292
68903: ST_TO_ADDR
// end ;
68904: LD_VAR 0 2
68908: RET
// export function ReverseDir ( unit ) ; begin
68909: LD_INT 0
68911: PPUSH
// if not unit then
68912: LD_VAR 0 1
68916: NOT
68917: IFFALSE 68921
// exit ;
68919: GO 68944
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68921: LD_ADDR_VAR 0 2
68925: PUSH
68926: LD_VAR 0 1
68930: PPUSH
68931: CALL_OW 254
68935: PUSH
68936: LD_INT 3
68938: PLUS
68939: PUSH
68940: LD_INT 6
68942: MOD
68943: ST_TO_ADDR
// end ;
68944: LD_VAR 0 2
68948: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
68949: LD_INT 0
68951: PPUSH
68952: PPUSH
68953: PPUSH
68954: PPUSH
68955: PPUSH
// if not hexes then
68956: LD_VAR 0 2
68960: NOT
68961: IFFALSE 68965
// exit ;
68963: GO 69113
// dist := 9999 ;
68965: LD_ADDR_VAR 0 5
68969: PUSH
68970: LD_INT 9999
68972: ST_TO_ADDR
// for i = 1 to hexes do
68973: LD_ADDR_VAR 0 4
68977: PUSH
68978: DOUBLE
68979: LD_INT 1
68981: DEC
68982: ST_TO_ADDR
68983: LD_VAR 0 2
68987: PUSH
68988: FOR_TO
68989: IFFALSE 69101
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
68991: LD_VAR 0 1
68995: PPUSH
68996: LD_VAR 0 2
69000: PUSH
69001: LD_VAR 0 4
69005: ARRAY
69006: PUSH
69007: LD_INT 1
69009: ARRAY
69010: PPUSH
69011: LD_VAR 0 2
69015: PUSH
69016: LD_VAR 0 4
69020: ARRAY
69021: PUSH
69022: LD_INT 2
69024: ARRAY
69025: PPUSH
69026: CALL_OW 297
69030: PUSH
69031: LD_VAR 0 5
69035: LESS
69036: IFFALSE 69099
// begin hex := hexes [ i ] ;
69038: LD_ADDR_VAR 0 7
69042: PUSH
69043: LD_VAR 0 2
69047: PUSH
69048: LD_VAR 0 4
69052: ARRAY
69053: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69054: LD_ADDR_VAR 0 5
69058: PUSH
69059: LD_VAR 0 1
69063: PPUSH
69064: LD_VAR 0 2
69068: PUSH
69069: LD_VAR 0 4
69073: ARRAY
69074: PUSH
69075: LD_INT 1
69077: ARRAY
69078: PPUSH
69079: LD_VAR 0 2
69083: PUSH
69084: LD_VAR 0 4
69088: ARRAY
69089: PUSH
69090: LD_INT 2
69092: ARRAY
69093: PPUSH
69094: CALL_OW 297
69098: ST_TO_ADDR
// end ; end ;
69099: GO 68988
69101: POP
69102: POP
// result := hex ;
69103: LD_ADDR_VAR 0 3
69107: PUSH
69108: LD_VAR 0 7
69112: ST_TO_ADDR
// end ;
69113: LD_VAR 0 3
69117: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69118: LD_INT 0
69120: PPUSH
69121: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69122: LD_VAR 0 1
69126: NOT
69127: PUSH
69128: LD_VAR 0 1
69132: PUSH
69133: LD_INT 21
69135: PUSH
69136: LD_INT 2
69138: PUSH
69139: EMPTY
69140: LIST
69141: LIST
69142: PUSH
69143: LD_INT 23
69145: PUSH
69146: LD_INT 2
69148: PUSH
69149: EMPTY
69150: LIST
69151: LIST
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PPUSH
69157: CALL_OW 69
69161: IN
69162: NOT
69163: OR
69164: IFFALSE 69168
// exit ;
69166: GO 69215
// for i = 1 to 3 do
69168: LD_ADDR_VAR 0 3
69172: PUSH
69173: DOUBLE
69174: LD_INT 1
69176: DEC
69177: ST_TO_ADDR
69178: LD_INT 3
69180: PUSH
69181: FOR_TO
69182: IFFALSE 69213
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69184: LD_VAR 0 1
69188: PPUSH
69189: CALL_OW 250
69193: PPUSH
69194: LD_VAR 0 1
69198: PPUSH
69199: CALL_OW 251
69203: PPUSH
69204: LD_INT 1
69206: PPUSH
69207: CALL_OW 453
69211: GO 69181
69213: POP
69214: POP
// end ;
69215: LD_VAR 0 2
69219: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69220: LD_INT 0
69222: PPUSH
69223: PPUSH
69224: PPUSH
69225: PPUSH
69226: PPUSH
69227: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69228: LD_VAR 0 1
69232: NOT
69233: PUSH
69234: LD_VAR 0 2
69238: NOT
69239: OR
69240: PUSH
69241: LD_VAR 0 1
69245: PPUSH
69246: CALL_OW 314
69250: OR
69251: IFFALSE 69255
// exit ;
69253: GO 69696
// x := GetX ( enemy_unit ) ;
69255: LD_ADDR_VAR 0 7
69259: PUSH
69260: LD_VAR 0 2
69264: PPUSH
69265: CALL_OW 250
69269: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69270: LD_ADDR_VAR 0 8
69274: PUSH
69275: LD_VAR 0 2
69279: PPUSH
69280: CALL_OW 251
69284: ST_TO_ADDR
// if not x or not y then
69285: LD_VAR 0 7
69289: NOT
69290: PUSH
69291: LD_VAR 0 8
69295: NOT
69296: OR
69297: IFFALSE 69301
// exit ;
69299: GO 69696
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69301: LD_ADDR_VAR 0 6
69305: PUSH
69306: LD_VAR 0 7
69310: PPUSH
69311: LD_INT 0
69313: PPUSH
69314: LD_INT 4
69316: PPUSH
69317: CALL_OW 272
69321: PUSH
69322: LD_VAR 0 8
69326: PPUSH
69327: LD_INT 0
69329: PPUSH
69330: LD_INT 4
69332: PPUSH
69333: CALL_OW 273
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: LD_VAR 0 7
69346: PPUSH
69347: LD_INT 1
69349: PPUSH
69350: LD_INT 4
69352: PPUSH
69353: CALL_OW 272
69357: PUSH
69358: LD_VAR 0 8
69362: PPUSH
69363: LD_INT 1
69365: PPUSH
69366: LD_INT 4
69368: PPUSH
69369: CALL_OW 273
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_VAR 0 7
69382: PPUSH
69383: LD_INT 2
69385: PPUSH
69386: LD_INT 4
69388: PPUSH
69389: CALL_OW 272
69393: PUSH
69394: LD_VAR 0 8
69398: PPUSH
69399: LD_INT 2
69401: PPUSH
69402: LD_INT 4
69404: PPUSH
69405: CALL_OW 273
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: PUSH
69414: LD_VAR 0 7
69418: PPUSH
69419: LD_INT 3
69421: PPUSH
69422: LD_INT 4
69424: PPUSH
69425: CALL_OW 272
69429: PUSH
69430: LD_VAR 0 8
69434: PPUSH
69435: LD_INT 3
69437: PPUSH
69438: LD_INT 4
69440: PPUSH
69441: CALL_OW 273
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_VAR 0 7
69454: PPUSH
69455: LD_INT 4
69457: PPUSH
69458: LD_INT 4
69460: PPUSH
69461: CALL_OW 272
69465: PUSH
69466: LD_VAR 0 8
69470: PPUSH
69471: LD_INT 4
69473: PPUSH
69474: LD_INT 4
69476: PPUSH
69477: CALL_OW 273
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_VAR 0 7
69490: PPUSH
69491: LD_INT 5
69493: PPUSH
69494: LD_INT 4
69496: PPUSH
69497: CALL_OW 272
69501: PUSH
69502: LD_VAR 0 8
69506: PPUSH
69507: LD_INT 5
69509: PPUSH
69510: LD_INT 4
69512: PPUSH
69513: CALL_OW 273
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: PUSH
69522: EMPTY
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: ST_TO_ADDR
// for i = tmp downto 1 do
69530: LD_ADDR_VAR 0 4
69534: PUSH
69535: DOUBLE
69536: LD_VAR 0 6
69540: INC
69541: ST_TO_ADDR
69542: LD_INT 1
69544: PUSH
69545: FOR_DOWNTO
69546: IFFALSE 69647
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69548: LD_VAR 0 6
69552: PUSH
69553: LD_VAR 0 4
69557: ARRAY
69558: PUSH
69559: LD_INT 1
69561: ARRAY
69562: PPUSH
69563: LD_VAR 0 6
69567: PUSH
69568: LD_VAR 0 4
69572: ARRAY
69573: PUSH
69574: LD_INT 2
69576: ARRAY
69577: PPUSH
69578: CALL_OW 488
69582: NOT
69583: PUSH
69584: LD_VAR 0 6
69588: PUSH
69589: LD_VAR 0 4
69593: ARRAY
69594: PUSH
69595: LD_INT 1
69597: ARRAY
69598: PPUSH
69599: LD_VAR 0 6
69603: PUSH
69604: LD_VAR 0 4
69608: ARRAY
69609: PUSH
69610: LD_INT 2
69612: ARRAY
69613: PPUSH
69614: CALL_OW 428
69618: PUSH
69619: LD_INT 0
69621: NONEQUAL
69622: OR
69623: IFFALSE 69645
// tmp := Delete ( tmp , i ) ;
69625: LD_ADDR_VAR 0 6
69629: PUSH
69630: LD_VAR 0 6
69634: PPUSH
69635: LD_VAR 0 4
69639: PPUSH
69640: CALL_OW 3
69644: ST_TO_ADDR
69645: GO 69545
69647: POP
69648: POP
// j := GetClosestHex ( unit , tmp ) ;
69649: LD_ADDR_VAR 0 5
69653: PUSH
69654: LD_VAR 0 1
69658: PPUSH
69659: LD_VAR 0 6
69663: PPUSH
69664: CALL 68949 0 2
69668: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69669: LD_VAR 0 1
69673: PPUSH
69674: LD_VAR 0 5
69678: PUSH
69679: LD_INT 1
69681: ARRAY
69682: PPUSH
69683: LD_VAR 0 5
69687: PUSH
69688: LD_INT 2
69690: ARRAY
69691: PPUSH
69692: CALL_OW 111
// end ;
69696: LD_VAR 0 3
69700: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69701: LD_INT 0
69703: PPUSH
69704: PPUSH
69705: PPUSH
// uc_side = 0 ;
69706: LD_ADDR_OWVAR 20
69710: PUSH
69711: LD_INT 0
69713: ST_TO_ADDR
// uc_nation = 0 ;
69714: LD_ADDR_OWVAR 21
69718: PUSH
69719: LD_INT 0
69721: ST_TO_ADDR
// InitHc_All ( ) ;
69722: CALL_OW 584
// InitVc ;
69726: CALL_OW 20
// if mastodonts then
69730: LD_VAR 0 6
69734: IFFALSE 69801
// for i = 1 to mastodonts do
69736: LD_ADDR_VAR 0 11
69740: PUSH
69741: DOUBLE
69742: LD_INT 1
69744: DEC
69745: ST_TO_ADDR
69746: LD_VAR 0 6
69750: PUSH
69751: FOR_TO
69752: IFFALSE 69799
// begin vc_chassis := 31 ;
69754: LD_ADDR_OWVAR 37
69758: PUSH
69759: LD_INT 31
69761: ST_TO_ADDR
// vc_control := control_rider ;
69762: LD_ADDR_OWVAR 38
69766: PUSH
69767: LD_INT 4
69769: ST_TO_ADDR
// animal := CreateVehicle ;
69770: LD_ADDR_VAR 0 12
69774: PUSH
69775: CALL_OW 45
69779: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69780: LD_VAR 0 12
69784: PPUSH
69785: LD_VAR 0 8
69789: PPUSH
69790: LD_INT 0
69792: PPUSH
69793: CALL 71936 0 3
// end ;
69797: GO 69751
69799: POP
69800: POP
// if horses then
69801: LD_VAR 0 5
69805: IFFALSE 69872
// for i = 1 to horses do
69807: LD_ADDR_VAR 0 11
69811: PUSH
69812: DOUBLE
69813: LD_INT 1
69815: DEC
69816: ST_TO_ADDR
69817: LD_VAR 0 5
69821: PUSH
69822: FOR_TO
69823: IFFALSE 69870
// begin hc_class := 21 ;
69825: LD_ADDR_OWVAR 28
69829: PUSH
69830: LD_INT 21
69832: ST_TO_ADDR
// hc_gallery :=  ;
69833: LD_ADDR_OWVAR 33
69837: PUSH
69838: LD_STRING 
69840: ST_TO_ADDR
// animal := CreateHuman ;
69841: LD_ADDR_VAR 0 12
69845: PUSH
69846: CALL_OW 44
69850: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69851: LD_VAR 0 12
69855: PPUSH
69856: LD_VAR 0 8
69860: PPUSH
69861: LD_INT 0
69863: PPUSH
69864: CALL 71936 0 3
// end ;
69868: GO 69822
69870: POP
69871: POP
// if birds then
69872: LD_VAR 0 1
69876: IFFALSE 69943
// for i = 1 to birds do
69878: LD_ADDR_VAR 0 11
69882: PUSH
69883: DOUBLE
69884: LD_INT 1
69886: DEC
69887: ST_TO_ADDR
69888: LD_VAR 0 1
69892: PUSH
69893: FOR_TO
69894: IFFALSE 69941
// begin hc_class = 18 ;
69896: LD_ADDR_OWVAR 28
69900: PUSH
69901: LD_INT 18
69903: ST_TO_ADDR
// hc_gallery =  ;
69904: LD_ADDR_OWVAR 33
69908: PUSH
69909: LD_STRING 
69911: ST_TO_ADDR
// animal := CreateHuman ;
69912: LD_ADDR_VAR 0 12
69916: PUSH
69917: CALL_OW 44
69921: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69922: LD_VAR 0 12
69926: PPUSH
69927: LD_VAR 0 8
69931: PPUSH
69932: LD_INT 0
69934: PPUSH
69935: CALL 71936 0 3
// end ;
69939: GO 69893
69941: POP
69942: POP
// if tigers then
69943: LD_VAR 0 2
69947: IFFALSE 70031
// for i = 1 to tigers do
69949: LD_ADDR_VAR 0 11
69953: PUSH
69954: DOUBLE
69955: LD_INT 1
69957: DEC
69958: ST_TO_ADDR
69959: LD_VAR 0 2
69963: PUSH
69964: FOR_TO
69965: IFFALSE 70029
// begin hc_class = class_tiger ;
69967: LD_ADDR_OWVAR 28
69971: PUSH
69972: LD_INT 14
69974: ST_TO_ADDR
// hc_gallery =  ;
69975: LD_ADDR_OWVAR 33
69979: PUSH
69980: LD_STRING 
69982: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69983: LD_ADDR_OWVAR 35
69987: PUSH
69988: LD_INT 7
69990: NEG
69991: PPUSH
69992: LD_INT 7
69994: PPUSH
69995: CALL_OW 12
69999: ST_TO_ADDR
// animal := CreateHuman ;
70000: LD_ADDR_VAR 0 12
70004: PUSH
70005: CALL_OW 44
70009: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70010: LD_VAR 0 12
70014: PPUSH
70015: LD_VAR 0 8
70019: PPUSH
70020: LD_INT 0
70022: PPUSH
70023: CALL 71936 0 3
// end ;
70027: GO 69964
70029: POP
70030: POP
// if apemans then
70031: LD_VAR 0 3
70035: IFFALSE 70158
// for i = 1 to apemans do
70037: LD_ADDR_VAR 0 11
70041: PUSH
70042: DOUBLE
70043: LD_INT 1
70045: DEC
70046: ST_TO_ADDR
70047: LD_VAR 0 3
70051: PUSH
70052: FOR_TO
70053: IFFALSE 70156
// begin hc_class = class_apeman ;
70055: LD_ADDR_OWVAR 28
70059: PUSH
70060: LD_INT 12
70062: ST_TO_ADDR
// hc_gallery =  ;
70063: LD_ADDR_OWVAR 33
70067: PUSH
70068: LD_STRING 
70070: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
70071: LD_ADDR_OWVAR 35
70075: PUSH
70076: LD_INT 2
70078: NEG
70079: PPUSH
70080: LD_INT 2
70082: PPUSH
70083: CALL_OW 12
70087: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70088: LD_ADDR_OWVAR 31
70092: PUSH
70093: LD_INT 1
70095: PPUSH
70096: LD_INT 3
70098: PPUSH
70099: CALL_OW 12
70103: PUSH
70104: LD_INT 1
70106: PPUSH
70107: LD_INT 3
70109: PPUSH
70110: CALL_OW 12
70114: PUSH
70115: LD_INT 0
70117: PUSH
70118: LD_INT 0
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: LIST
70125: LIST
70126: ST_TO_ADDR
// animal := CreateHuman ;
70127: LD_ADDR_VAR 0 12
70131: PUSH
70132: CALL_OW 44
70136: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70137: LD_VAR 0 12
70141: PPUSH
70142: LD_VAR 0 8
70146: PPUSH
70147: LD_INT 0
70149: PPUSH
70150: CALL 71936 0 3
// end ;
70154: GO 70052
70156: POP
70157: POP
// if enchidnas then
70158: LD_VAR 0 4
70162: IFFALSE 70229
// for i = 1 to enchidnas do
70164: LD_ADDR_VAR 0 11
70168: PUSH
70169: DOUBLE
70170: LD_INT 1
70172: DEC
70173: ST_TO_ADDR
70174: LD_VAR 0 4
70178: PUSH
70179: FOR_TO
70180: IFFALSE 70227
// begin hc_class = 13 ;
70182: LD_ADDR_OWVAR 28
70186: PUSH
70187: LD_INT 13
70189: ST_TO_ADDR
// hc_gallery =  ;
70190: LD_ADDR_OWVAR 33
70194: PUSH
70195: LD_STRING 
70197: ST_TO_ADDR
// animal := CreateHuman ;
70198: LD_ADDR_VAR 0 12
70202: PUSH
70203: CALL_OW 44
70207: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70208: LD_VAR 0 12
70212: PPUSH
70213: LD_VAR 0 8
70217: PPUSH
70218: LD_INT 0
70220: PPUSH
70221: CALL 71936 0 3
// end ;
70225: GO 70179
70227: POP
70228: POP
// if fishes then
70229: LD_VAR 0 7
70233: IFFALSE 70300
// for i = 1 to fishes do
70235: LD_ADDR_VAR 0 11
70239: PUSH
70240: DOUBLE
70241: LD_INT 1
70243: DEC
70244: ST_TO_ADDR
70245: LD_VAR 0 7
70249: PUSH
70250: FOR_TO
70251: IFFALSE 70298
// begin hc_class = 20 ;
70253: LD_ADDR_OWVAR 28
70257: PUSH
70258: LD_INT 20
70260: ST_TO_ADDR
// hc_gallery =  ;
70261: LD_ADDR_OWVAR 33
70265: PUSH
70266: LD_STRING 
70268: ST_TO_ADDR
// animal := CreateHuman ;
70269: LD_ADDR_VAR 0 12
70273: PUSH
70274: CALL_OW 44
70278: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70279: LD_VAR 0 12
70283: PPUSH
70284: LD_VAR 0 9
70288: PPUSH
70289: LD_INT 0
70291: PPUSH
70292: CALL 71936 0 3
// end ;
70296: GO 70250
70298: POP
70299: POP
// end ;
70300: LD_VAR 0 10
70304: RET
// export function WantHeal ( sci , unit ) ; begin
70305: LD_INT 0
70307: PPUSH
// if GetTaskList ( sci ) > 0 then
70308: LD_VAR 0 1
70312: PPUSH
70313: CALL_OW 437
70317: PUSH
70318: LD_INT 0
70320: GREATER
70321: IFFALSE 70391
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70323: LD_VAR 0 1
70327: PPUSH
70328: CALL_OW 437
70332: PUSH
70333: LD_INT 1
70335: ARRAY
70336: PUSH
70337: LD_INT 1
70339: ARRAY
70340: PUSH
70341: LD_STRING l
70343: EQUAL
70344: PUSH
70345: LD_VAR 0 1
70349: PPUSH
70350: CALL_OW 437
70354: PUSH
70355: LD_INT 1
70357: ARRAY
70358: PUSH
70359: LD_INT 4
70361: ARRAY
70362: PUSH
70363: LD_VAR 0 2
70367: EQUAL
70368: AND
70369: IFFALSE 70381
// result := true else
70371: LD_ADDR_VAR 0 3
70375: PUSH
70376: LD_INT 1
70378: ST_TO_ADDR
70379: GO 70389
// result := false ;
70381: LD_ADDR_VAR 0 3
70385: PUSH
70386: LD_INT 0
70388: ST_TO_ADDR
// end else
70389: GO 70399
// result := false ;
70391: LD_ADDR_VAR 0 3
70395: PUSH
70396: LD_INT 0
70398: ST_TO_ADDR
// end ;
70399: LD_VAR 0 3
70403: RET
// export function HealTarget ( sci ) ; begin
70404: LD_INT 0
70406: PPUSH
// if not sci then
70407: LD_VAR 0 1
70411: NOT
70412: IFFALSE 70416
// exit ;
70414: GO 70481
// result := 0 ;
70416: LD_ADDR_VAR 0 2
70420: PUSH
70421: LD_INT 0
70423: ST_TO_ADDR
// if GetTaskList ( sci ) then
70424: LD_VAR 0 1
70428: PPUSH
70429: CALL_OW 437
70433: IFFALSE 70481
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70435: LD_VAR 0 1
70439: PPUSH
70440: CALL_OW 437
70444: PUSH
70445: LD_INT 1
70447: ARRAY
70448: PUSH
70449: LD_INT 1
70451: ARRAY
70452: PUSH
70453: LD_STRING l
70455: EQUAL
70456: IFFALSE 70481
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70458: LD_ADDR_VAR 0 2
70462: PUSH
70463: LD_VAR 0 1
70467: PPUSH
70468: CALL_OW 437
70472: PUSH
70473: LD_INT 1
70475: ARRAY
70476: PUSH
70477: LD_INT 4
70479: ARRAY
70480: ST_TO_ADDR
// end ;
70481: LD_VAR 0 2
70485: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70486: LD_INT 0
70488: PPUSH
70489: PPUSH
70490: PPUSH
70491: PPUSH
// if not base_units then
70492: LD_VAR 0 1
70496: NOT
70497: IFFALSE 70501
// exit ;
70499: GO 70588
// result := false ;
70501: LD_ADDR_VAR 0 2
70505: PUSH
70506: LD_INT 0
70508: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70509: LD_ADDR_VAR 0 5
70513: PUSH
70514: LD_VAR 0 1
70518: PPUSH
70519: LD_INT 21
70521: PUSH
70522: LD_INT 3
70524: PUSH
70525: EMPTY
70526: LIST
70527: LIST
70528: PPUSH
70529: CALL_OW 72
70533: ST_TO_ADDR
// if not tmp then
70534: LD_VAR 0 5
70538: NOT
70539: IFFALSE 70543
// exit ;
70541: GO 70588
// for i in tmp do
70543: LD_ADDR_VAR 0 3
70547: PUSH
70548: LD_VAR 0 5
70552: PUSH
70553: FOR_IN
70554: IFFALSE 70586
// begin result := EnemyInRange ( i , 22 ) ;
70556: LD_ADDR_VAR 0 2
70560: PUSH
70561: LD_VAR 0 3
70565: PPUSH
70566: LD_INT 22
70568: PPUSH
70569: CALL 68824 0 2
70573: ST_TO_ADDR
// if result then
70574: LD_VAR 0 2
70578: IFFALSE 70584
// exit ;
70580: POP
70581: POP
70582: GO 70588
// end ;
70584: GO 70553
70586: POP
70587: POP
// end ;
70588: LD_VAR 0 2
70592: RET
// export function FilterByTag ( units , tag ) ; begin
70593: LD_INT 0
70595: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
70596: LD_ADDR_VAR 0 3
70600: PUSH
70601: LD_VAR 0 1
70605: PPUSH
70606: LD_INT 120
70608: PUSH
70609: LD_VAR 0 2
70613: PUSH
70614: EMPTY
70615: LIST
70616: LIST
70617: PPUSH
70618: CALL_OW 72
70622: ST_TO_ADDR
// end ;
70623: LD_VAR 0 3
70627: RET
// export function IsDriver ( un ) ; begin
70628: LD_INT 0
70630: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70631: LD_ADDR_VAR 0 2
70635: PUSH
70636: LD_VAR 0 1
70640: PUSH
70641: LD_INT 55
70643: PUSH
70644: EMPTY
70645: LIST
70646: PPUSH
70647: CALL_OW 69
70651: IN
70652: ST_TO_ADDR
// end ;
70653: LD_VAR 0 2
70657: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70658: LD_INT 0
70660: PPUSH
70661: PPUSH
// list := [ ] ;
70662: LD_ADDR_VAR 0 5
70666: PUSH
70667: EMPTY
70668: ST_TO_ADDR
// case d of 0 :
70669: LD_VAR 0 3
70673: PUSH
70674: LD_INT 0
70676: DOUBLE
70677: EQUAL
70678: IFTRUE 70682
70680: GO 70815
70682: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70683: LD_ADDR_VAR 0 5
70687: PUSH
70688: LD_VAR 0 1
70692: PUSH
70693: LD_INT 4
70695: MINUS
70696: PUSH
70697: LD_VAR 0 2
70701: PUSH
70702: LD_INT 4
70704: MINUS
70705: PUSH
70706: LD_INT 2
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: LIST
70713: PUSH
70714: LD_VAR 0 1
70718: PUSH
70719: LD_INT 3
70721: MINUS
70722: PUSH
70723: LD_VAR 0 2
70727: PUSH
70728: LD_INT 1
70730: PUSH
70731: EMPTY
70732: LIST
70733: LIST
70734: LIST
70735: PUSH
70736: LD_VAR 0 1
70740: PUSH
70741: LD_INT 4
70743: PLUS
70744: PUSH
70745: LD_VAR 0 2
70749: PUSH
70750: LD_INT 4
70752: PUSH
70753: EMPTY
70754: LIST
70755: LIST
70756: LIST
70757: PUSH
70758: LD_VAR 0 1
70762: PUSH
70763: LD_INT 3
70765: PLUS
70766: PUSH
70767: LD_VAR 0 2
70771: PUSH
70772: LD_INT 3
70774: PLUS
70775: PUSH
70776: LD_INT 5
70778: PUSH
70779: EMPTY
70780: LIST
70781: LIST
70782: LIST
70783: PUSH
70784: LD_VAR 0 1
70788: PUSH
70789: LD_VAR 0 2
70793: PUSH
70794: LD_INT 4
70796: PLUS
70797: PUSH
70798: LD_INT 0
70800: PUSH
70801: EMPTY
70802: LIST
70803: LIST
70804: LIST
70805: PUSH
70806: EMPTY
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: ST_TO_ADDR
// end ; 1 :
70813: GO 71513
70815: LD_INT 1
70817: DOUBLE
70818: EQUAL
70819: IFTRUE 70823
70821: GO 70956
70823: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70824: LD_ADDR_VAR 0 5
70828: PUSH
70829: LD_VAR 0 1
70833: PUSH
70834: LD_VAR 0 2
70838: PUSH
70839: LD_INT 4
70841: MINUS
70842: PUSH
70843: LD_INT 3
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: LIST
70850: PUSH
70851: LD_VAR 0 1
70855: PUSH
70856: LD_INT 3
70858: MINUS
70859: PUSH
70860: LD_VAR 0 2
70864: PUSH
70865: LD_INT 3
70867: MINUS
70868: PUSH
70869: LD_INT 2
70871: PUSH
70872: EMPTY
70873: LIST
70874: LIST
70875: LIST
70876: PUSH
70877: LD_VAR 0 1
70881: PUSH
70882: LD_INT 4
70884: MINUS
70885: PUSH
70886: LD_VAR 0 2
70890: PUSH
70891: LD_INT 1
70893: PUSH
70894: EMPTY
70895: LIST
70896: LIST
70897: LIST
70898: PUSH
70899: LD_VAR 0 1
70903: PUSH
70904: LD_VAR 0 2
70908: PUSH
70909: LD_INT 3
70911: PLUS
70912: PUSH
70913: LD_INT 0
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: LIST
70920: PUSH
70921: LD_VAR 0 1
70925: PUSH
70926: LD_INT 4
70928: PLUS
70929: PUSH
70930: LD_VAR 0 2
70934: PUSH
70935: LD_INT 4
70937: PLUS
70938: PUSH
70939: LD_INT 5
70941: PUSH
70942: EMPTY
70943: LIST
70944: LIST
70945: LIST
70946: PUSH
70947: EMPTY
70948: LIST
70949: LIST
70950: LIST
70951: LIST
70952: LIST
70953: ST_TO_ADDR
// end ; 2 :
70954: GO 71513
70956: LD_INT 2
70958: DOUBLE
70959: EQUAL
70960: IFTRUE 70964
70962: GO 71093
70964: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70965: LD_ADDR_VAR 0 5
70969: PUSH
70970: LD_VAR 0 1
70974: PUSH
70975: LD_VAR 0 2
70979: PUSH
70980: LD_INT 3
70982: MINUS
70983: PUSH
70984: LD_INT 3
70986: PUSH
70987: EMPTY
70988: LIST
70989: LIST
70990: LIST
70991: PUSH
70992: LD_VAR 0 1
70996: PUSH
70997: LD_INT 4
70999: PLUS
71000: PUSH
71001: LD_VAR 0 2
71005: PUSH
71006: LD_INT 4
71008: PUSH
71009: EMPTY
71010: LIST
71011: LIST
71012: LIST
71013: PUSH
71014: LD_VAR 0 1
71018: PUSH
71019: LD_VAR 0 2
71023: PUSH
71024: LD_INT 4
71026: PLUS
71027: PUSH
71028: LD_INT 0
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: LIST
71035: PUSH
71036: LD_VAR 0 1
71040: PUSH
71041: LD_INT 3
71043: MINUS
71044: PUSH
71045: LD_VAR 0 2
71049: PUSH
71050: LD_INT 1
71052: PUSH
71053: EMPTY
71054: LIST
71055: LIST
71056: LIST
71057: PUSH
71058: LD_VAR 0 1
71062: PUSH
71063: LD_INT 4
71065: MINUS
71066: PUSH
71067: LD_VAR 0 2
71071: PUSH
71072: LD_INT 4
71074: MINUS
71075: PUSH
71076: LD_INT 2
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: LIST
71083: PUSH
71084: EMPTY
71085: LIST
71086: LIST
71087: LIST
71088: LIST
71089: LIST
71090: ST_TO_ADDR
// end ; 3 :
71091: GO 71513
71093: LD_INT 3
71095: DOUBLE
71096: EQUAL
71097: IFTRUE 71101
71099: GO 71234
71101: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71102: LD_ADDR_VAR 0 5
71106: PUSH
71107: LD_VAR 0 1
71111: PUSH
71112: LD_INT 3
71114: PLUS
71115: PUSH
71116: LD_VAR 0 2
71120: PUSH
71121: LD_INT 4
71123: PUSH
71124: EMPTY
71125: LIST
71126: LIST
71127: LIST
71128: PUSH
71129: LD_VAR 0 1
71133: PUSH
71134: LD_INT 4
71136: PLUS
71137: PUSH
71138: LD_VAR 0 2
71142: PUSH
71143: LD_INT 4
71145: PLUS
71146: PUSH
71147: LD_INT 5
71149: PUSH
71150: EMPTY
71151: LIST
71152: LIST
71153: LIST
71154: PUSH
71155: LD_VAR 0 1
71159: PUSH
71160: LD_INT 4
71162: MINUS
71163: PUSH
71164: LD_VAR 0 2
71168: PUSH
71169: LD_INT 1
71171: PUSH
71172: EMPTY
71173: LIST
71174: LIST
71175: LIST
71176: PUSH
71177: LD_VAR 0 1
71181: PUSH
71182: LD_VAR 0 2
71186: PUSH
71187: LD_INT 4
71189: MINUS
71190: PUSH
71191: LD_INT 3
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: LIST
71198: PUSH
71199: LD_VAR 0 1
71203: PUSH
71204: LD_INT 3
71206: MINUS
71207: PUSH
71208: LD_VAR 0 2
71212: PUSH
71213: LD_INT 3
71215: MINUS
71216: PUSH
71217: LD_INT 2
71219: PUSH
71220: EMPTY
71221: LIST
71222: LIST
71223: LIST
71224: PUSH
71225: EMPTY
71226: LIST
71227: LIST
71228: LIST
71229: LIST
71230: LIST
71231: ST_TO_ADDR
// end ; 4 :
71232: GO 71513
71234: LD_INT 4
71236: DOUBLE
71237: EQUAL
71238: IFTRUE 71242
71240: GO 71375
71242: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71243: LD_ADDR_VAR 0 5
71247: PUSH
71248: LD_VAR 0 1
71252: PUSH
71253: LD_VAR 0 2
71257: PUSH
71258: LD_INT 4
71260: PLUS
71261: PUSH
71262: LD_INT 0
71264: PUSH
71265: EMPTY
71266: LIST
71267: LIST
71268: LIST
71269: PUSH
71270: LD_VAR 0 1
71274: PUSH
71275: LD_INT 3
71277: PLUS
71278: PUSH
71279: LD_VAR 0 2
71283: PUSH
71284: LD_INT 3
71286: PLUS
71287: PUSH
71288: LD_INT 5
71290: PUSH
71291: EMPTY
71292: LIST
71293: LIST
71294: LIST
71295: PUSH
71296: LD_VAR 0 1
71300: PUSH
71301: LD_INT 4
71303: PLUS
71304: PUSH
71305: LD_VAR 0 2
71309: PUSH
71310: LD_INT 4
71312: PUSH
71313: EMPTY
71314: LIST
71315: LIST
71316: LIST
71317: PUSH
71318: LD_VAR 0 1
71322: PUSH
71323: LD_VAR 0 2
71327: PUSH
71328: LD_INT 3
71330: MINUS
71331: PUSH
71332: LD_INT 3
71334: PUSH
71335: EMPTY
71336: LIST
71337: LIST
71338: LIST
71339: PUSH
71340: LD_VAR 0 1
71344: PUSH
71345: LD_INT 4
71347: MINUS
71348: PUSH
71349: LD_VAR 0 2
71353: PUSH
71354: LD_INT 4
71356: MINUS
71357: PUSH
71358: LD_INT 2
71360: PUSH
71361: EMPTY
71362: LIST
71363: LIST
71364: LIST
71365: PUSH
71366: EMPTY
71367: LIST
71368: LIST
71369: LIST
71370: LIST
71371: LIST
71372: ST_TO_ADDR
// end ; 5 :
71373: GO 71513
71375: LD_INT 5
71377: DOUBLE
71378: EQUAL
71379: IFTRUE 71383
71381: GO 71512
71383: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71384: LD_ADDR_VAR 0 5
71388: PUSH
71389: LD_VAR 0 1
71393: PUSH
71394: LD_INT 4
71396: MINUS
71397: PUSH
71398: LD_VAR 0 2
71402: PUSH
71403: LD_INT 1
71405: PUSH
71406: EMPTY
71407: LIST
71408: LIST
71409: LIST
71410: PUSH
71411: LD_VAR 0 1
71415: PUSH
71416: LD_VAR 0 2
71420: PUSH
71421: LD_INT 4
71423: MINUS
71424: PUSH
71425: LD_INT 3
71427: PUSH
71428: EMPTY
71429: LIST
71430: LIST
71431: LIST
71432: PUSH
71433: LD_VAR 0 1
71437: PUSH
71438: LD_INT 4
71440: PLUS
71441: PUSH
71442: LD_VAR 0 2
71446: PUSH
71447: LD_INT 4
71449: PLUS
71450: PUSH
71451: LD_INT 5
71453: PUSH
71454: EMPTY
71455: LIST
71456: LIST
71457: LIST
71458: PUSH
71459: LD_VAR 0 1
71463: PUSH
71464: LD_INT 3
71466: PLUS
71467: PUSH
71468: LD_VAR 0 2
71472: PUSH
71473: LD_INT 4
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: LIST
71480: PUSH
71481: LD_VAR 0 1
71485: PUSH
71486: LD_VAR 0 2
71490: PUSH
71491: LD_INT 3
71493: PLUS
71494: PUSH
71495: LD_INT 0
71497: PUSH
71498: EMPTY
71499: LIST
71500: LIST
71501: LIST
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: ST_TO_ADDR
// end ; end ;
71510: GO 71513
71512: POP
// result := list ;
71513: LD_ADDR_VAR 0 4
71517: PUSH
71518: LD_VAR 0 5
71522: ST_TO_ADDR
// end ;
71523: LD_VAR 0 4
71527: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71528: LD_INT 0
71530: PPUSH
71531: PPUSH
71532: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71533: LD_VAR 0 1
71537: NOT
71538: PUSH
71539: LD_VAR 0 2
71543: PUSH
71544: LD_INT 1
71546: PUSH
71547: LD_INT 2
71549: PUSH
71550: LD_INT 3
71552: PUSH
71553: LD_INT 4
71555: PUSH
71556: EMPTY
71557: LIST
71558: LIST
71559: LIST
71560: LIST
71561: IN
71562: NOT
71563: OR
71564: IFFALSE 71568
// exit ;
71566: GO 71660
// tmp := [ ] ;
71568: LD_ADDR_VAR 0 5
71572: PUSH
71573: EMPTY
71574: ST_TO_ADDR
// for i in units do
71575: LD_ADDR_VAR 0 4
71579: PUSH
71580: LD_VAR 0 1
71584: PUSH
71585: FOR_IN
71586: IFFALSE 71629
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
71588: LD_ADDR_VAR 0 5
71592: PUSH
71593: LD_VAR 0 5
71597: PPUSH
71598: LD_VAR 0 5
71602: PUSH
71603: LD_INT 1
71605: PLUS
71606: PPUSH
71607: LD_VAR 0 4
71611: PPUSH
71612: LD_VAR 0 2
71616: PPUSH
71617: CALL_OW 259
71621: PPUSH
71622: CALL_OW 2
71626: ST_TO_ADDR
71627: GO 71585
71629: POP
71630: POP
// if not tmp then
71631: LD_VAR 0 5
71635: NOT
71636: IFFALSE 71640
// exit ;
71638: GO 71660
// result := SortListByListDesc ( units , tmp ) ;
71640: LD_ADDR_VAR 0 3
71644: PUSH
71645: LD_VAR 0 1
71649: PPUSH
71650: LD_VAR 0 5
71654: PPUSH
71655: CALL_OW 77
71659: ST_TO_ADDR
// end ;
71660: LD_VAR 0 3
71664: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71665: LD_INT 0
71667: PPUSH
71668: PPUSH
71669: PPUSH
// result := false ;
71670: LD_ADDR_VAR 0 3
71674: PUSH
71675: LD_INT 0
71677: ST_TO_ADDR
// x := GetX ( building ) ;
71678: LD_ADDR_VAR 0 4
71682: PUSH
71683: LD_VAR 0 2
71687: PPUSH
71688: CALL_OW 250
71692: ST_TO_ADDR
// y := GetY ( building ) ;
71693: LD_ADDR_VAR 0 5
71697: PUSH
71698: LD_VAR 0 2
71702: PPUSH
71703: CALL_OW 251
71707: ST_TO_ADDR
// if not building or not x or not y then
71708: LD_VAR 0 2
71712: NOT
71713: PUSH
71714: LD_VAR 0 4
71718: NOT
71719: OR
71720: PUSH
71721: LD_VAR 0 5
71725: NOT
71726: OR
71727: IFFALSE 71731
// exit ;
71729: GO 71823
// if GetTaskList ( unit ) then
71731: LD_VAR 0 1
71735: PPUSH
71736: CALL_OW 437
71740: IFFALSE 71823
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71742: LD_STRING e
71744: PUSH
71745: LD_VAR 0 1
71749: PPUSH
71750: CALL_OW 437
71754: PUSH
71755: LD_INT 1
71757: ARRAY
71758: PUSH
71759: LD_INT 1
71761: ARRAY
71762: EQUAL
71763: PUSH
71764: LD_VAR 0 4
71768: PUSH
71769: LD_VAR 0 1
71773: PPUSH
71774: CALL_OW 437
71778: PUSH
71779: LD_INT 1
71781: ARRAY
71782: PUSH
71783: LD_INT 2
71785: ARRAY
71786: EQUAL
71787: AND
71788: PUSH
71789: LD_VAR 0 5
71793: PUSH
71794: LD_VAR 0 1
71798: PPUSH
71799: CALL_OW 437
71803: PUSH
71804: LD_INT 1
71806: ARRAY
71807: PUSH
71808: LD_INT 3
71810: ARRAY
71811: EQUAL
71812: AND
71813: IFFALSE 71823
// result := true end ;
71815: LD_ADDR_VAR 0 3
71819: PUSH
71820: LD_INT 1
71822: ST_TO_ADDR
// end ;
71823: LD_VAR 0 3
71827: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71828: LD_INT 0
71830: PPUSH
// result := false ;
71831: LD_ADDR_VAR 0 4
71835: PUSH
71836: LD_INT 0
71838: ST_TO_ADDR
// if GetTaskList ( unit ) then
71839: LD_VAR 0 1
71843: PPUSH
71844: CALL_OW 437
71848: IFFALSE 71931
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71850: LD_STRING M
71852: PUSH
71853: LD_VAR 0 1
71857: PPUSH
71858: CALL_OW 437
71862: PUSH
71863: LD_INT 1
71865: ARRAY
71866: PUSH
71867: LD_INT 1
71869: ARRAY
71870: EQUAL
71871: PUSH
71872: LD_VAR 0 2
71876: PUSH
71877: LD_VAR 0 1
71881: PPUSH
71882: CALL_OW 437
71886: PUSH
71887: LD_INT 1
71889: ARRAY
71890: PUSH
71891: LD_INT 2
71893: ARRAY
71894: EQUAL
71895: AND
71896: PUSH
71897: LD_VAR 0 3
71901: PUSH
71902: LD_VAR 0 1
71906: PPUSH
71907: CALL_OW 437
71911: PUSH
71912: LD_INT 1
71914: ARRAY
71915: PUSH
71916: LD_INT 3
71918: ARRAY
71919: EQUAL
71920: AND
71921: IFFALSE 71931
// result := true ;
71923: LD_ADDR_VAR 0 4
71927: PUSH
71928: LD_INT 1
71930: ST_TO_ADDR
// end ; end ;
71931: LD_VAR 0 4
71935: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71936: LD_INT 0
71938: PPUSH
71939: PPUSH
71940: PPUSH
71941: PPUSH
// if not unit or not area then
71942: LD_VAR 0 1
71946: NOT
71947: PUSH
71948: LD_VAR 0 2
71952: NOT
71953: OR
71954: IFFALSE 71958
// exit ;
71956: GO 72122
// tmp := AreaToList ( area , i ) ;
71958: LD_ADDR_VAR 0 6
71962: PUSH
71963: LD_VAR 0 2
71967: PPUSH
71968: LD_VAR 0 5
71972: PPUSH
71973: CALL_OW 517
71977: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71978: LD_ADDR_VAR 0 5
71982: PUSH
71983: DOUBLE
71984: LD_INT 1
71986: DEC
71987: ST_TO_ADDR
71988: LD_VAR 0 6
71992: PUSH
71993: LD_INT 1
71995: ARRAY
71996: PUSH
71997: FOR_TO
71998: IFFALSE 72120
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72000: LD_ADDR_VAR 0 7
72004: PUSH
72005: LD_VAR 0 6
72009: PUSH
72010: LD_INT 1
72012: ARRAY
72013: PUSH
72014: LD_VAR 0 5
72018: ARRAY
72019: PUSH
72020: LD_VAR 0 6
72024: PUSH
72025: LD_INT 2
72027: ARRAY
72028: PUSH
72029: LD_VAR 0 5
72033: ARRAY
72034: PUSH
72035: EMPTY
72036: LIST
72037: LIST
72038: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
72039: LD_VAR 0 7
72043: PUSH
72044: LD_INT 1
72046: ARRAY
72047: PPUSH
72048: LD_VAR 0 7
72052: PUSH
72053: LD_INT 2
72055: ARRAY
72056: PPUSH
72057: CALL_OW 428
72061: PUSH
72062: LD_INT 0
72064: EQUAL
72065: IFFALSE 72118
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72067: LD_VAR 0 1
72071: PPUSH
72072: LD_VAR 0 7
72076: PUSH
72077: LD_INT 1
72079: ARRAY
72080: PPUSH
72081: LD_VAR 0 7
72085: PUSH
72086: LD_INT 2
72088: ARRAY
72089: PPUSH
72090: LD_VAR 0 3
72094: PPUSH
72095: CALL_OW 48
// result := IsPlaced ( unit ) ;
72099: LD_ADDR_VAR 0 4
72103: PUSH
72104: LD_VAR 0 1
72108: PPUSH
72109: CALL_OW 305
72113: ST_TO_ADDR
// exit ;
72114: POP
72115: POP
72116: GO 72122
// end ; end ;
72118: GO 71997
72120: POP
72121: POP
// end ;
72122: LD_VAR 0 4
72126: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72127: LD_INT 0
72129: PPUSH
72130: PPUSH
72131: PPUSH
// if not side or side > 8 then
72132: LD_VAR 0 1
72136: NOT
72137: PUSH
72138: LD_VAR 0 1
72142: PUSH
72143: LD_INT 8
72145: GREATER
72146: OR
72147: IFFALSE 72151
// exit ;
72149: GO 72338
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72151: LD_ADDR_VAR 0 4
72155: PUSH
72156: LD_INT 22
72158: PUSH
72159: LD_VAR 0 1
72163: PUSH
72164: EMPTY
72165: LIST
72166: LIST
72167: PUSH
72168: LD_INT 21
72170: PUSH
72171: LD_INT 3
72173: PUSH
72174: EMPTY
72175: LIST
72176: LIST
72177: PUSH
72178: EMPTY
72179: LIST
72180: LIST
72181: PPUSH
72182: CALL_OW 69
72186: ST_TO_ADDR
// if not tmp then
72187: LD_VAR 0 4
72191: NOT
72192: IFFALSE 72196
// exit ;
72194: GO 72338
// enable_addtolog := true ;
72196: LD_ADDR_OWVAR 81
72200: PUSH
72201: LD_INT 1
72203: ST_TO_ADDR
// AddToLog ( [ ) ;
72204: LD_STRING [
72206: PPUSH
72207: CALL_OW 561
// for i in tmp do
72211: LD_ADDR_VAR 0 3
72215: PUSH
72216: LD_VAR 0 4
72220: PUSH
72221: FOR_IN
72222: IFFALSE 72329
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72224: LD_STRING [
72226: PUSH
72227: LD_VAR 0 3
72231: PPUSH
72232: CALL_OW 266
72236: STR
72237: PUSH
72238: LD_STRING , 
72240: STR
72241: PUSH
72242: LD_VAR 0 3
72246: PPUSH
72247: CALL_OW 250
72251: STR
72252: PUSH
72253: LD_STRING , 
72255: STR
72256: PUSH
72257: LD_VAR 0 3
72261: PPUSH
72262: CALL_OW 251
72266: STR
72267: PUSH
72268: LD_STRING , 
72270: STR
72271: PUSH
72272: LD_VAR 0 3
72276: PPUSH
72277: CALL_OW 254
72281: STR
72282: PUSH
72283: LD_STRING , 
72285: STR
72286: PUSH
72287: LD_VAR 0 3
72291: PPUSH
72292: LD_INT 1
72294: PPUSH
72295: CALL_OW 268
72299: STR
72300: PUSH
72301: LD_STRING , 
72303: STR
72304: PUSH
72305: LD_VAR 0 3
72309: PPUSH
72310: LD_INT 2
72312: PPUSH
72313: CALL_OW 268
72317: STR
72318: PUSH
72319: LD_STRING ],
72321: STR
72322: PPUSH
72323: CALL_OW 561
// end ;
72327: GO 72221
72329: POP
72330: POP
// AddToLog ( ]; ) ;
72331: LD_STRING ];
72333: PPUSH
72334: CALL_OW 561
// end ;
72338: LD_VAR 0 2
72342: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72343: LD_INT 0
72345: PPUSH
72346: PPUSH
72347: PPUSH
72348: PPUSH
72349: PPUSH
// if not area or not rate or not max then
72350: LD_VAR 0 1
72354: NOT
72355: PUSH
72356: LD_VAR 0 2
72360: NOT
72361: OR
72362: PUSH
72363: LD_VAR 0 4
72367: NOT
72368: OR
72369: IFFALSE 72373
// exit ;
72371: GO 72562
// while 1 do
72373: LD_INT 1
72375: IFFALSE 72562
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72377: LD_ADDR_VAR 0 9
72381: PUSH
72382: LD_VAR 0 1
72386: PPUSH
72387: LD_INT 1
72389: PPUSH
72390: CALL_OW 287
72394: PUSH
72395: LD_INT 10
72397: MUL
72398: ST_TO_ADDR
// r := rate / 10 ;
72399: LD_ADDR_VAR 0 7
72403: PUSH
72404: LD_VAR 0 2
72408: PUSH
72409: LD_INT 10
72411: DIVREAL
72412: ST_TO_ADDR
// time := 1 1$00 ;
72413: LD_ADDR_VAR 0 8
72417: PUSH
72418: LD_INT 2100
72420: ST_TO_ADDR
// if amount < min then
72421: LD_VAR 0 9
72425: PUSH
72426: LD_VAR 0 3
72430: LESS
72431: IFFALSE 72449
// r := r * 2 else
72433: LD_ADDR_VAR 0 7
72437: PUSH
72438: LD_VAR 0 7
72442: PUSH
72443: LD_INT 2
72445: MUL
72446: ST_TO_ADDR
72447: GO 72475
// if amount > max then
72449: LD_VAR 0 9
72453: PUSH
72454: LD_VAR 0 4
72458: GREATER
72459: IFFALSE 72475
// r := r / 2 ;
72461: LD_ADDR_VAR 0 7
72465: PUSH
72466: LD_VAR 0 7
72470: PUSH
72471: LD_INT 2
72473: DIVREAL
72474: ST_TO_ADDR
// time := time / r ;
72475: LD_ADDR_VAR 0 8
72479: PUSH
72480: LD_VAR 0 8
72484: PUSH
72485: LD_VAR 0 7
72489: DIVREAL
72490: ST_TO_ADDR
// if time < 0 then
72491: LD_VAR 0 8
72495: PUSH
72496: LD_INT 0
72498: LESS
72499: IFFALSE 72516
// time := time * - 1 ;
72501: LD_ADDR_VAR 0 8
72505: PUSH
72506: LD_VAR 0 8
72510: PUSH
72511: LD_INT 1
72513: NEG
72514: MUL
72515: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
72516: LD_VAR 0 8
72520: PUSH
72521: LD_INT 35
72523: PPUSH
72524: LD_INT 875
72526: PPUSH
72527: CALL_OW 12
72531: PLUS
72532: PPUSH
72533: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72537: LD_INT 1
72539: PPUSH
72540: LD_INT 5
72542: PPUSH
72543: CALL_OW 12
72547: PPUSH
72548: LD_VAR 0 1
72552: PPUSH
72553: LD_INT 1
72555: PPUSH
72556: CALL_OW 55
// end ;
72560: GO 72373
// end ;
72562: LD_VAR 0 5
72566: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72567: LD_INT 0
72569: PPUSH
72570: PPUSH
72571: PPUSH
72572: PPUSH
72573: PPUSH
72574: PPUSH
72575: PPUSH
72576: PPUSH
// if not turrets or not factories then
72577: LD_VAR 0 1
72581: NOT
72582: PUSH
72583: LD_VAR 0 2
72587: NOT
72588: OR
72589: IFFALSE 72593
// exit ;
72591: GO 72900
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72593: LD_ADDR_VAR 0 10
72597: PUSH
72598: LD_INT 5
72600: PUSH
72601: LD_INT 6
72603: PUSH
72604: EMPTY
72605: LIST
72606: LIST
72607: PUSH
72608: LD_INT 2
72610: PUSH
72611: LD_INT 4
72613: PUSH
72614: EMPTY
72615: LIST
72616: LIST
72617: PUSH
72618: LD_INT 3
72620: PUSH
72621: LD_INT 5
72623: PUSH
72624: EMPTY
72625: LIST
72626: LIST
72627: PUSH
72628: EMPTY
72629: LIST
72630: LIST
72631: LIST
72632: PUSH
72633: LD_INT 24
72635: PUSH
72636: LD_INT 25
72638: PUSH
72639: EMPTY
72640: LIST
72641: LIST
72642: PUSH
72643: LD_INT 23
72645: PUSH
72646: LD_INT 27
72648: PUSH
72649: EMPTY
72650: LIST
72651: LIST
72652: PUSH
72653: EMPTY
72654: LIST
72655: LIST
72656: PUSH
72657: LD_INT 42
72659: PUSH
72660: LD_INT 43
72662: PUSH
72663: EMPTY
72664: LIST
72665: LIST
72666: PUSH
72667: LD_INT 44
72669: PUSH
72670: LD_INT 46
72672: PUSH
72673: EMPTY
72674: LIST
72675: LIST
72676: PUSH
72677: LD_INT 45
72679: PUSH
72680: LD_INT 47
72682: PUSH
72683: EMPTY
72684: LIST
72685: LIST
72686: PUSH
72687: EMPTY
72688: LIST
72689: LIST
72690: LIST
72691: PUSH
72692: EMPTY
72693: LIST
72694: LIST
72695: LIST
72696: ST_TO_ADDR
// result := [ ] ;
72697: LD_ADDR_VAR 0 3
72701: PUSH
72702: EMPTY
72703: ST_TO_ADDR
// for i in turrets do
72704: LD_ADDR_VAR 0 4
72708: PUSH
72709: LD_VAR 0 1
72713: PUSH
72714: FOR_IN
72715: IFFALSE 72898
// begin nat := GetNation ( i ) ;
72717: LD_ADDR_VAR 0 7
72721: PUSH
72722: LD_VAR 0 4
72726: PPUSH
72727: CALL_OW 248
72731: ST_TO_ADDR
// weapon := 0 ;
72732: LD_ADDR_VAR 0 8
72736: PUSH
72737: LD_INT 0
72739: ST_TO_ADDR
// if not nat then
72740: LD_VAR 0 7
72744: NOT
72745: IFFALSE 72749
// continue ;
72747: GO 72714
// for j in list [ nat ] do
72749: LD_ADDR_VAR 0 5
72753: PUSH
72754: LD_VAR 0 10
72758: PUSH
72759: LD_VAR 0 7
72763: ARRAY
72764: PUSH
72765: FOR_IN
72766: IFFALSE 72807
// if GetBWeapon ( i ) = j [ 1 ] then
72768: LD_VAR 0 4
72772: PPUSH
72773: CALL_OW 269
72777: PUSH
72778: LD_VAR 0 5
72782: PUSH
72783: LD_INT 1
72785: ARRAY
72786: EQUAL
72787: IFFALSE 72805
// begin weapon := j [ 2 ] ;
72789: LD_ADDR_VAR 0 8
72793: PUSH
72794: LD_VAR 0 5
72798: PUSH
72799: LD_INT 2
72801: ARRAY
72802: ST_TO_ADDR
// break ;
72803: GO 72807
// end ;
72805: GO 72765
72807: POP
72808: POP
// if not weapon then
72809: LD_VAR 0 8
72813: NOT
72814: IFFALSE 72818
// continue ;
72816: GO 72714
// for k in factories do
72818: LD_ADDR_VAR 0 6
72822: PUSH
72823: LD_VAR 0 2
72827: PUSH
72828: FOR_IN
72829: IFFALSE 72894
// begin weapons := AvailableWeaponList ( k ) ;
72831: LD_ADDR_VAR 0 9
72835: PUSH
72836: LD_VAR 0 6
72840: PPUSH
72841: CALL_OW 478
72845: ST_TO_ADDR
// if not weapons then
72846: LD_VAR 0 9
72850: NOT
72851: IFFALSE 72855
// continue ;
72853: GO 72828
// if weapon in weapons then
72855: LD_VAR 0 8
72859: PUSH
72860: LD_VAR 0 9
72864: IN
72865: IFFALSE 72892
// begin result := [ i , weapon ] ;
72867: LD_ADDR_VAR 0 3
72871: PUSH
72872: LD_VAR 0 4
72876: PUSH
72877: LD_VAR 0 8
72881: PUSH
72882: EMPTY
72883: LIST
72884: LIST
72885: ST_TO_ADDR
// exit ;
72886: POP
72887: POP
72888: POP
72889: POP
72890: GO 72900
// end ; end ;
72892: GO 72828
72894: POP
72895: POP
// end ;
72896: GO 72714
72898: POP
72899: POP
// end ;
72900: LD_VAR 0 3
72904: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72905: LD_INT 0
72907: PPUSH
// if not side or side > 8 then
72908: LD_VAR 0 3
72912: NOT
72913: PUSH
72914: LD_VAR 0 3
72918: PUSH
72919: LD_INT 8
72921: GREATER
72922: OR
72923: IFFALSE 72927
// exit ;
72925: GO 72986
// if not range then
72927: LD_VAR 0 4
72931: NOT
72932: IFFALSE 72943
// range := - 12 ;
72934: LD_ADDR_VAR 0 4
72938: PUSH
72939: LD_INT 12
72941: NEG
72942: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72943: LD_VAR 0 1
72947: PPUSH
72948: LD_VAR 0 2
72952: PPUSH
72953: LD_VAR 0 3
72957: PPUSH
72958: LD_VAR 0 4
72962: PPUSH
72963: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72967: LD_VAR 0 1
72971: PPUSH
72972: LD_VAR 0 2
72976: PPUSH
72977: LD_VAR 0 3
72981: PPUSH
72982: CALL_OW 331
// end ;
72986: LD_VAR 0 5
72990: RET
// export function Video ( mode ) ; begin
72991: LD_INT 0
72993: PPUSH
// ingame_video = mode ;
72994: LD_ADDR_OWVAR 52
72998: PUSH
72999: LD_VAR 0 1
73003: ST_TO_ADDR
// interface_hidden = mode ;
73004: LD_ADDR_OWVAR 54
73008: PUSH
73009: LD_VAR 0 1
73013: ST_TO_ADDR
// end ;
73014: LD_VAR 0 2
73018: RET
// export function Join ( array , element ) ; begin
73019: LD_INT 0
73021: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73022: LD_ADDR_VAR 0 3
73026: PUSH
73027: LD_VAR 0 1
73031: PPUSH
73032: LD_VAR 0 1
73036: PUSH
73037: LD_INT 1
73039: PLUS
73040: PPUSH
73041: LD_VAR 0 2
73045: PPUSH
73046: CALL_OW 1
73050: ST_TO_ADDR
// end ;
73051: LD_VAR 0 3
73055: RET
// export function JoinUnion ( array , element ) ; begin
73056: LD_INT 0
73058: PPUSH
// result := array union element ;
73059: LD_ADDR_VAR 0 3
73063: PUSH
73064: LD_VAR 0 1
73068: PUSH
73069: LD_VAR 0 2
73073: UNION
73074: ST_TO_ADDR
// end ;
73075: LD_VAR 0 3
73079: RET
// export function GetBehemoths ( side ) ; begin
73080: LD_INT 0
73082: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
73083: LD_ADDR_VAR 0 2
73087: PUSH
73088: LD_INT 22
73090: PUSH
73091: LD_VAR 0 1
73095: PUSH
73096: EMPTY
73097: LIST
73098: LIST
73099: PUSH
73100: LD_INT 31
73102: PUSH
73103: LD_INT 25
73105: PUSH
73106: EMPTY
73107: LIST
73108: LIST
73109: PUSH
73110: EMPTY
73111: LIST
73112: LIST
73113: PPUSH
73114: CALL_OW 69
73118: ST_TO_ADDR
// end ;
73119: LD_VAR 0 2
73123: RET
// export function Shuffle ( array ) ; var i , index ; begin
73124: LD_INT 0
73126: PPUSH
73127: PPUSH
73128: PPUSH
// result := [ ] ;
73129: LD_ADDR_VAR 0 2
73133: PUSH
73134: EMPTY
73135: ST_TO_ADDR
// if not array then
73136: LD_VAR 0 1
73140: NOT
73141: IFFALSE 73145
// exit ;
73143: GO 73244
// Randomize ;
73145: CALL_OW 10
// for i = array downto 1 do
73149: LD_ADDR_VAR 0 3
73153: PUSH
73154: DOUBLE
73155: LD_VAR 0 1
73159: INC
73160: ST_TO_ADDR
73161: LD_INT 1
73163: PUSH
73164: FOR_DOWNTO
73165: IFFALSE 73242
// begin index := rand ( 1 , array ) ;
73167: LD_ADDR_VAR 0 4
73171: PUSH
73172: LD_INT 1
73174: PPUSH
73175: LD_VAR 0 1
73179: PPUSH
73180: CALL_OW 12
73184: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73185: LD_ADDR_VAR 0 2
73189: PUSH
73190: LD_VAR 0 2
73194: PPUSH
73195: LD_VAR 0 2
73199: PUSH
73200: LD_INT 1
73202: PLUS
73203: PPUSH
73204: LD_VAR 0 1
73208: PUSH
73209: LD_VAR 0 4
73213: ARRAY
73214: PPUSH
73215: CALL_OW 2
73219: ST_TO_ADDR
// array := Delete ( array , index ) ;
73220: LD_ADDR_VAR 0 1
73224: PUSH
73225: LD_VAR 0 1
73229: PPUSH
73230: LD_VAR 0 4
73234: PPUSH
73235: CALL_OW 3
73239: ST_TO_ADDR
// end ;
73240: GO 73164
73242: POP
73243: POP
// end ;
73244: LD_VAR 0 2
73248: RET
// export function GetBaseMaterials ( base ) ; begin
73249: LD_INT 0
73251: PPUSH
// result := [ 0 , 0 , 0 ] ;
73252: LD_ADDR_VAR 0 2
73256: PUSH
73257: LD_INT 0
73259: PUSH
73260: LD_INT 0
73262: PUSH
73263: LD_INT 0
73265: PUSH
73266: EMPTY
73267: LIST
73268: LIST
73269: LIST
73270: ST_TO_ADDR
// if not base then
73271: LD_VAR 0 1
73275: NOT
73276: IFFALSE 73280
// exit ;
73278: GO 73329
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73280: LD_ADDR_VAR 0 2
73284: PUSH
73285: LD_VAR 0 1
73289: PPUSH
73290: LD_INT 1
73292: PPUSH
73293: CALL_OW 275
73297: PUSH
73298: LD_VAR 0 1
73302: PPUSH
73303: LD_INT 2
73305: PPUSH
73306: CALL_OW 275
73310: PUSH
73311: LD_VAR 0 1
73315: PPUSH
73316: LD_INT 3
73318: PPUSH
73319: CALL_OW 275
73323: PUSH
73324: EMPTY
73325: LIST
73326: LIST
73327: LIST
73328: ST_TO_ADDR
// end ;
73329: LD_VAR 0 2
73333: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73334: LD_INT 0
73336: PPUSH
73337: PPUSH
// result := array ;
73338: LD_ADDR_VAR 0 3
73342: PUSH
73343: LD_VAR 0 1
73347: ST_TO_ADDR
// if size > 0 then
73348: LD_VAR 0 2
73352: PUSH
73353: LD_INT 0
73355: GREATER
73356: IFFALSE 73402
// for i := array downto size do
73358: LD_ADDR_VAR 0 4
73362: PUSH
73363: DOUBLE
73364: LD_VAR 0 1
73368: INC
73369: ST_TO_ADDR
73370: LD_VAR 0 2
73374: PUSH
73375: FOR_DOWNTO
73376: IFFALSE 73400
// result := Delete ( result , result ) ;
73378: LD_ADDR_VAR 0 3
73382: PUSH
73383: LD_VAR 0 3
73387: PPUSH
73388: LD_VAR 0 3
73392: PPUSH
73393: CALL_OW 3
73397: ST_TO_ADDR
73398: GO 73375
73400: POP
73401: POP
// end ;
73402: LD_VAR 0 3
73406: RET
// export function ComExit ( unit ) ; var tmp ; begin
73407: LD_INT 0
73409: PPUSH
73410: PPUSH
// if not IsInUnit ( unit ) then
73411: LD_VAR 0 1
73415: PPUSH
73416: CALL_OW 310
73420: NOT
73421: IFFALSE 73425
// exit ;
73423: GO 73485
// tmp := IsInUnit ( unit ) ;
73425: LD_ADDR_VAR 0 3
73429: PUSH
73430: LD_VAR 0 1
73434: PPUSH
73435: CALL_OW 310
73439: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73440: LD_VAR 0 3
73444: PPUSH
73445: CALL_OW 247
73449: PUSH
73450: LD_INT 2
73452: EQUAL
73453: IFFALSE 73466
// ComExitVehicle ( unit ) else
73455: LD_VAR 0 1
73459: PPUSH
73460: CALL_OW 121
73464: GO 73475
// ComExitBuilding ( unit ) ;
73466: LD_VAR 0 1
73470: PPUSH
73471: CALL_OW 122
// result := tmp ;
73475: LD_ADDR_VAR 0 2
73479: PUSH
73480: LD_VAR 0 3
73484: ST_TO_ADDR
// end ;
73485: LD_VAR 0 2
73489: RET
// export function ComExitAll ( units ) ; var i ; begin
73490: LD_INT 0
73492: PPUSH
73493: PPUSH
// if not units then
73494: LD_VAR 0 1
73498: NOT
73499: IFFALSE 73503
// exit ;
73501: GO 73529
// for i in units do
73503: LD_ADDR_VAR 0 3
73507: PUSH
73508: LD_VAR 0 1
73512: PUSH
73513: FOR_IN
73514: IFFALSE 73527
// ComExit ( i ) ;
73516: LD_VAR 0 3
73520: PPUSH
73521: CALL 73407 0 1
73525: GO 73513
73527: POP
73528: POP
// end ;
73529: LD_VAR 0 2
73533: RET
// export function ResetHc ; begin
73534: LD_INT 0
73536: PPUSH
// InitHc ;
73537: CALL_OW 19
// hc_importance := 0 ;
73541: LD_ADDR_OWVAR 32
73545: PUSH
73546: LD_INT 0
73548: ST_TO_ADDR
// end ;
73549: LD_VAR 0 1
73553: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73554: LD_INT 0
73556: PPUSH
73557: PPUSH
73558: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73559: LD_ADDR_VAR 0 6
73563: PUSH
73564: LD_VAR 0 1
73568: PUSH
73569: LD_VAR 0 3
73573: PLUS
73574: PUSH
73575: LD_INT 2
73577: DIV
73578: ST_TO_ADDR
// if _x < 0 then
73579: LD_VAR 0 6
73583: PUSH
73584: LD_INT 0
73586: LESS
73587: IFFALSE 73604
// _x := _x * - 1 ;
73589: LD_ADDR_VAR 0 6
73593: PUSH
73594: LD_VAR 0 6
73598: PUSH
73599: LD_INT 1
73601: NEG
73602: MUL
73603: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73604: LD_ADDR_VAR 0 7
73608: PUSH
73609: LD_VAR 0 2
73613: PUSH
73614: LD_VAR 0 4
73618: PLUS
73619: PUSH
73620: LD_INT 2
73622: DIV
73623: ST_TO_ADDR
// if _y < 0 then
73624: LD_VAR 0 7
73628: PUSH
73629: LD_INT 0
73631: LESS
73632: IFFALSE 73649
// _y := _y * - 1 ;
73634: LD_ADDR_VAR 0 7
73638: PUSH
73639: LD_VAR 0 7
73643: PUSH
73644: LD_INT 1
73646: NEG
73647: MUL
73648: ST_TO_ADDR
// result := [ _x , _y ] ;
73649: LD_ADDR_VAR 0 5
73653: PUSH
73654: LD_VAR 0 6
73658: PUSH
73659: LD_VAR 0 7
73663: PUSH
73664: EMPTY
73665: LIST
73666: LIST
73667: ST_TO_ADDR
// end ;
73668: LD_VAR 0 5
73672: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73673: LD_INT 0
73675: PPUSH
73676: PPUSH
73677: PPUSH
73678: PPUSH
// task := GetTaskList ( unit ) ;
73679: LD_ADDR_VAR 0 7
73683: PUSH
73684: LD_VAR 0 1
73688: PPUSH
73689: CALL_OW 437
73693: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73694: LD_VAR 0 7
73698: NOT
73699: PUSH
73700: LD_VAR 0 1
73704: PPUSH
73705: LD_VAR 0 2
73709: PPUSH
73710: CALL_OW 308
73714: NOT
73715: AND
73716: IFFALSE 73720
// exit ;
73718: GO 73838
// if IsInArea ( unit , area ) then
73720: LD_VAR 0 1
73724: PPUSH
73725: LD_VAR 0 2
73729: PPUSH
73730: CALL_OW 308
73734: IFFALSE 73752
// begin ComMoveToArea ( unit , goAway ) ;
73736: LD_VAR 0 1
73740: PPUSH
73741: LD_VAR 0 3
73745: PPUSH
73746: CALL_OW 113
// exit ;
73750: GO 73838
// end ; if task [ 1 ] [ 1 ] <> M then
73752: LD_VAR 0 7
73756: PUSH
73757: LD_INT 1
73759: ARRAY
73760: PUSH
73761: LD_INT 1
73763: ARRAY
73764: PUSH
73765: LD_STRING M
73767: NONEQUAL
73768: IFFALSE 73772
// exit ;
73770: GO 73838
// x := task [ 1 ] [ 2 ] ;
73772: LD_ADDR_VAR 0 5
73776: PUSH
73777: LD_VAR 0 7
73781: PUSH
73782: LD_INT 1
73784: ARRAY
73785: PUSH
73786: LD_INT 2
73788: ARRAY
73789: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73790: LD_ADDR_VAR 0 6
73794: PUSH
73795: LD_VAR 0 7
73799: PUSH
73800: LD_INT 1
73802: ARRAY
73803: PUSH
73804: LD_INT 3
73806: ARRAY
73807: ST_TO_ADDR
// if InArea ( x , y , area ) then
73808: LD_VAR 0 5
73812: PPUSH
73813: LD_VAR 0 6
73817: PPUSH
73818: LD_VAR 0 2
73822: PPUSH
73823: CALL_OW 309
73827: IFFALSE 73838
// ComStop ( unit ) ;
73829: LD_VAR 0 1
73833: PPUSH
73834: CALL_OW 141
// end ;
73838: LD_VAR 0 4
73842: RET
// export function Abs ( value ) ; begin
73843: LD_INT 0
73845: PPUSH
// result := value ;
73846: LD_ADDR_VAR 0 2
73850: PUSH
73851: LD_VAR 0 1
73855: ST_TO_ADDR
// if value < 0 then
73856: LD_VAR 0 1
73860: PUSH
73861: LD_INT 0
73863: LESS
73864: IFFALSE 73881
// result := value * - 1 ;
73866: LD_ADDR_VAR 0 2
73870: PUSH
73871: LD_VAR 0 1
73875: PUSH
73876: LD_INT 1
73878: NEG
73879: MUL
73880: ST_TO_ADDR
// end ;
73881: LD_VAR 0 2
73885: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73886: LD_INT 0
73888: PPUSH
73889: PPUSH
73890: PPUSH
73891: PPUSH
73892: PPUSH
73893: PPUSH
73894: PPUSH
73895: PPUSH
// if not unit or not building then
73896: LD_VAR 0 1
73900: NOT
73901: PUSH
73902: LD_VAR 0 2
73906: NOT
73907: OR
73908: IFFALSE 73912
// exit ;
73910: GO 74138
// x := GetX ( building ) ;
73912: LD_ADDR_VAR 0 4
73916: PUSH
73917: LD_VAR 0 2
73921: PPUSH
73922: CALL_OW 250
73926: ST_TO_ADDR
// y := GetY ( building ) ;
73927: LD_ADDR_VAR 0 6
73931: PUSH
73932: LD_VAR 0 2
73936: PPUSH
73937: CALL_OW 251
73941: ST_TO_ADDR
// d := GetDir ( building ) ;
73942: LD_ADDR_VAR 0 8
73946: PUSH
73947: LD_VAR 0 2
73951: PPUSH
73952: CALL_OW 254
73956: ST_TO_ADDR
// r := 4 ;
73957: LD_ADDR_VAR 0 9
73961: PUSH
73962: LD_INT 4
73964: ST_TO_ADDR
// for i := 1 to 5 do
73965: LD_ADDR_VAR 0 10
73969: PUSH
73970: DOUBLE
73971: LD_INT 1
73973: DEC
73974: ST_TO_ADDR
73975: LD_INT 5
73977: PUSH
73978: FOR_TO
73979: IFFALSE 74136
// begin _x := ShiftX ( x , d , r + i ) ;
73981: LD_ADDR_VAR 0 5
73985: PUSH
73986: LD_VAR 0 4
73990: PPUSH
73991: LD_VAR 0 8
73995: PPUSH
73996: LD_VAR 0 9
74000: PUSH
74001: LD_VAR 0 10
74005: PLUS
74006: PPUSH
74007: CALL_OW 272
74011: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74012: LD_ADDR_VAR 0 7
74016: PUSH
74017: LD_VAR 0 6
74021: PPUSH
74022: LD_VAR 0 8
74026: PPUSH
74027: LD_VAR 0 9
74031: PUSH
74032: LD_VAR 0 10
74036: PLUS
74037: PPUSH
74038: CALL_OW 273
74042: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74043: LD_VAR 0 5
74047: PPUSH
74048: LD_VAR 0 7
74052: PPUSH
74053: CALL_OW 488
74057: PUSH
74058: LD_VAR 0 5
74062: PPUSH
74063: LD_VAR 0 7
74067: PPUSH
74068: CALL_OW 428
74072: PPUSH
74073: CALL_OW 247
74077: PUSH
74078: LD_INT 3
74080: PUSH
74081: LD_INT 2
74083: PUSH
74084: EMPTY
74085: LIST
74086: LIST
74087: IN
74088: NOT
74089: AND
74090: IFFALSE 74134
// begin ComMoveXY ( unit , _x , _y ) ;
74092: LD_VAR 0 1
74096: PPUSH
74097: LD_VAR 0 5
74101: PPUSH
74102: LD_VAR 0 7
74106: PPUSH
74107: CALL_OW 111
// result := [ _x , _y ] ;
74111: LD_ADDR_VAR 0 3
74115: PUSH
74116: LD_VAR 0 5
74120: PUSH
74121: LD_VAR 0 7
74125: PUSH
74126: EMPTY
74127: LIST
74128: LIST
74129: ST_TO_ADDR
// exit ;
74130: POP
74131: POP
74132: GO 74138
// end ; end ;
74134: GO 73978
74136: POP
74137: POP
// end ;
74138: LD_VAR 0 3
74142: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74143: LD_INT 0
74145: PPUSH
74146: PPUSH
74147: PPUSH
// result := 0 ;
74148: LD_ADDR_VAR 0 3
74152: PUSH
74153: LD_INT 0
74155: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74156: LD_VAR 0 1
74160: PUSH
74161: LD_INT 0
74163: LESS
74164: PUSH
74165: LD_VAR 0 1
74169: PUSH
74170: LD_INT 8
74172: GREATER
74173: OR
74174: PUSH
74175: LD_VAR 0 2
74179: PUSH
74180: LD_INT 0
74182: LESS
74183: OR
74184: PUSH
74185: LD_VAR 0 2
74189: PUSH
74190: LD_INT 8
74192: GREATER
74193: OR
74194: IFFALSE 74198
// exit ;
74196: GO 74273
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74198: LD_ADDR_VAR 0 4
74202: PUSH
74203: LD_INT 22
74205: PUSH
74206: LD_VAR 0 2
74210: PUSH
74211: EMPTY
74212: LIST
74213: LIST
74214: PPUSH
74215: CALL_OW 69
74219: PUSH
74220: FOR_IN
74221: IFFALSE 74271
// begin un := UnitShoot ( i ) ;
74223: LD_ADDR_VAR 0 5
74227: PUSH
74228: LD_VAR 0 4
74232: PPUSH
74233: CALL_OW 504
74237: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74238: LD_VAR 0 5
74242: PPUSH
74243: CALL_OW 255
74247: PUSH
74248: LD_VAR 0 1
74252: EQUAL
74253: IFFALSE 74269
// begin result := un ;
74255: LD_ADDR_VAR 0 3
74259: PUSH
74260: LD_VAR 0 5
74264: ST_TO_ADDR
// exit ;
74265: POP
74266: POP
74267: GO 74273
// end ; end ;
74269: GO 74220
74271: POP
74272: POP
// end ;
74273: LD_VAR 0 3
74277: RET
// export function GetCargoBay ( units ) ; begin
74278: LD_INT 0
74280: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74281: LD_ADDR_VAR 0 2
74285: PUSH
74286: LD_VAR 0 1
74290: PPUSH
74291: LD_INT 2
74293: PUSH
74294: LD_INT 34
74296: PUSH
74297: LD_INT 12
74299: PUSH
74300: EMPTY
74301: LIST
74302: LIST
74303: PUSH
74304: LD_INT 34
74306: PUSH
74307: LD_INT 51
74309: PUSH
74310: EMPTY
74311: LIST
74312: LIST
74313: PUSH
74314: LD_INT 34
74316: PUSH
74317: LD_INT 32
74319: PUSH
74320: EMPTY
74321: LIST
74322: LIST
74323: PUSH
74324: LD_INT 34
74326: PUSH
74327: LD_EXP 122
74331: PUSH
74332: EMPTY
74333: LIST
74334: LIST
74335: PUSH
74336: EMPTY
74337: LIST
74338: LIST
74339: LIST
74340: LIST
74341: LIST
74342: PPUSH
74343: CALL_OW 72
74347: ST_TO_ADDR
// end ;
74348: LD_VAR 0 2
74352: RET
// export function Negate ( value ) ; begin
74353: LD_INT 0
74355: PPUSH
// result := not value ;
74356: LD_ADDR_VAR 0 2
74360: PUSH
74361: LD_VAR 0 1
74365: NOT
74366: ST_TO_ADDR
// end ;
74367: LD_VAR 0 2
74371: RET
// export function Inc ( value ) ; begin
74372: LD_INT 0
74374: PPUSH
// result := value + 1 ;
74375: LD_ADDR_VAR 0 2
74379: PUSH
74380: LD_VAR 0 1
74384: PUSH
74385: LD_INT 1
74387: PLUS
74388: ST_TO_ADDR
// end ;
74389: LD_VAR 0 2
74393: RET
// export function Dec ( value ) ; begin
74394: LD_INT 0
74396: PPUSH
// result := value - 1 ;
74397: LD_ADDR_VAR 0 2
74401: PUSH
74402: LD_VAR 0 1
74406: PUSH
74407: LD_INT 1
74409: MINUS
74410: ST_TO_ADDR
// end ;
74411: LD_VAR 0 2
74415: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
74416: LD_INT 0
74418: PPUSH
74419: PPUSH
74420: PPUSH
74421: PPUSH
74422: PPUSH
74423: PPUSH
74424: PPUSH
74425: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
74426: LD_VAR 0 1
74430: PPUSH
74431: LD_VAR 0 2
74435: PPUSH
74436: CALL_OW 488
74440: NOT
74441: PUSH
74442: LD_VAR 0 3
74446: PPUSH
74447: LD_VAR 0 4
74451: PPUSH
74452: CALL_OW 488
74456: NOT
74457: OR
74458: IFFALSE 74471
// begin result := - 1 ;
74460: LD_ADDR_VAR 0 5
74464: PUSH
74465: LD_INT 1
74467: NEG
74468: ST_TO_ADDR
// exit ;
74469: GO 74706
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
74471: LD_ADDR_VAR 0 12
74475: PUSH
74476: LD_VAR 0 1
74480: PPUSH
74481: LD_VAR 0 2
74485: PPUSH
74486: LD_VAR 0 3
74490: PPUSH
74491: LD_VAR 0 4
74495: PPUSH
74496: CALL 73554 0 4
74500: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
74501: LD_ADDR_VAR 0 11
74505: PUSH
74506: LD_VAR 0 1
74510: PPUSH
74511: LD_VAR 0 2
74515: PPUSH
74516: LD_VAR 0 12
74520: PUSH
74521: LD_INT 1
74523: ARRAY
74524: PPUSH
74525: LD_VAR 0 12
74529: PUSH
74530: LD_INT 2
74532: ARRAY
74533: PPUSH
74534: CALL_OW 298
74538: ST_TO_ADDR
// distance := 9999 ;
74539: LD_ADDR_VAR 0 10
74543: PUSH
74544: LD_INT 9999
74546: ST_TO_ADDR
// for i := 0 to 5 do
74547: LD_ADDR_VAR 0 6
74551: PUSH
74552: DOUBLE
74553: LD_INT 0
74555: DEC
74556: ST_TO_ADDR
74557: LD_INT 5
74559: PUSH
74560: FOR_TO
74561: IFFALSE 74704
// begin _x := ShiftX ( x1 , i , centerDist ) ;
74563: LD_ADDR_VAR 0 7
74567: PUSH
74568: LD_VAR 0 1
74572: PPUSH
74573: LD_VAR 0 6
74577: PPUSH
74578: LD_VAR 0 11
74582: PPUSH
74583: CALL_OW 272
74587: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
74588: LD_ADDR_VAR 0 8
74592: PUSH
74593: LD_VAR 0 2
74597: PPUSH
74598: LD_VAR 0 6
74602: PPUSH
74603: LD_VAR 0 11
74607: PPUSH
74608: CALL_OW 273
74612: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74613: LD_VAR 0 7
74617: PPUSH
74618: LD_VAR 0 8
74622: PPUSH
74623: CALL_OW 488
74627: NOT
74628: IFFALSE 74632
// continue ;
74630: GO 74560
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
74632: LD_ADDR_VAR 0 9
74636: PUSH
74637: LD_VAR 0 12
74641: PUSH
74642: LD_INT 1
74644: ARRAY
74645: PPUSH
74646: LD_VAR 0 12
74650: PUSH
74651: LD_INT 2
74653: ARRAY
74654: PPUSH
74655: LD_VAR 0 7
74659: PPUSH
74660: LD_VAR 0 8
74664: PPUSH
74665: CALL_OW 298
74669: ST_TO_ADDR
// if tmp < distance then
74670: LD_VAR 0 9
74674: PUSH
74675: LD_VAR 0 10
74679: LESS
74680: IFFALSE 74702
// begin result := i ;
74682: LD_ADDR_VAR 0 5
74686: PUSH
74687: LD_VAR 0 6
74691: ST_TO_ADDR
// distance := tmp ;
74692: LD_ADDR_VAR 0 10
74696: PUSH
74697: LD_VAR 0 9
74701: ST_TO_ADDR
// end ; end ;
74702: GO 74560
74704: POP
74705: POP
// end ;
74706: LD_VAR 0 5
74710: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74711: LD_INT 0
74713: PPUSH
74714: PPUSH
// if not driver or not IsInUnit ( driver ) then
74715: LD_VAR 0 1
74719: NOT
74720: PUSH
74721: LD_VAR 0 1
74725: PPUSH
74726: CALL_OW 310
74730: NOT
74731: OR
74732: IFFALSE 74736
// exit ;
74734: GO 74826
// vehicle := IsInUnit ( driver ) ;
74736: LD_ADDR_VAR 0 3
74740: PUSH
74741: LD_VAR 0 1
74745: PPUSH
74746: CALL_OW 310
74750: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74751: LD_VAR 0 1
74755: PPUSH
74756: LD_STRING \
74758: PUSH
74759: LD_INT 0
74761: PUSH
74762: LD_INT 0
74764: PUSH
74765: LD_INT 0
74767: PUSH
74768: LD_INT 0
74770: PUSH
74771: LD_INT 0
74773: PUSH
74774: LD_INT 0
74776: PUSH
74777: EMPTY
74778: LIST
74779: LIST
74780: LIST
74781: LIST
74782: LIST
74783: LIST
74784: LIST
74785: PUSH
74786: LD_STRING E
74788: PUSH
74789: LD_INT 0
74791: PUSH
74792: LD_INT 0
74794: PUSH
74795: LD_VAR 0 3
74799: PUSH
74800: LD_INT 0
74802: PUSH
74803: LD_INT 0
74805: PUSH
74806: LD_INT 0
74808: PUSH
74809: EMPTY
74810: LIST
74811: LIST
74812: LIST
74813: LIST
74814: LIST
74815: LIST
74816: LIST
74817: PUSH
74818: EMPTY
74819: LIST
74820: LIST
74821: PPUSH
74822: CALL_OW 446
// end ;
74826: LD_VAR 0 2
74830: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74831: LD_INT 0
74833: PPUSH
74834: PPUSH
// if not driver or not IsInUnit ( driver ) then
74835: LD_VAR 0 1
74839: NOT
74840: PUSH
74841: LD_VAR 0 1
74845: PPUSH
74846: CALL_OW 310
74850: NOT
74851: OR
74852: IFFALSE 74856
// exit ;
74854: GO 74946
// vehicle := IsInUnit ( driver ) ;
74856: LD_ADDR_VAR 0 3
74860: PUSH
74861: LD_VAR 0 1
74865: PPUSH
74866: CALL_OW 310
74870: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74871: LD_VAR 0 1
74875: PPUSH
74876: LD_STRING \
74878: PUSH
74879: LD_INT 0
74881: PUSH
74882: LD_INT 0
74884: PUSH
74885: LD_INT 0
74887: PUSH
74888: LD_INT 0
74890: PUSH
74891: LD_INT 0
74893: PUSH
74894: LD_INT 0
74896: PUSH
74897: EMPTY
74898: LIST
74899: LIST
74900: LIST
74901: LIST
74902: LIST
74903: LIST
74904: LIST
74905: PUSH
74906: LD_STRING E
74908: PUSH
74909: LD_INT 0
74911: PUSH
74912: LD_INT 0
74914: PUSH
74915: LD_VAR 0 3
74919: PUSH
74920: LD_INT 0
74922: PUSH
74923: LD_INT 0
74925: PUSH
74926: LD_INT 0
74928: PUSH
74929: EMPTY
74930: LIST
74931: LIST
74932: LIST
74933: LIST
74934: LIST
74935: LIST
74936: LIST
74937: PUSH
74938: EMPTY
74939: LIST
74940: LIST
74941: PPUSH
74942: CALL_OW 447
// end ;
74946: LD_VAR 0 2
74950: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
74951: LD_INT 0
74953: PPUSH
74954: PPUSH
74955: PPUSH
// tmp := [ ] ;
74956: LD_ADDR_VAR 0 5
74960: PUSH
74961: EMPTY
74962: ST_TO_ADDR
// for i in units do
74963: LD_ADDR_VAR 0 4
74967: PUSH
74968: LD_VAR 0 1
74972: PUSH
74973: FOR_IN
74974: IFFALSE 75012
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
74976: LD_ADDR_VAR 0 5
74980: PUSH
74981: LD_VAR 0 5
74985: PPUSH
74986: LD_VAR 0 5
74990: PUSH
74991: LD_INT 1
74993: PLUS
74994: PPUSH
74995: LD_VAR 0 4
74999: PPUSH
75000: CALL_OW 256
75004: PPUSH
75005: CALL_OW 2
75009: ST_TO_ADDR
75010: GO 74973
75012: POP
75013: POP
// if not tmp then
75014: LD_VAR 0 5
75018: NOT
75019: IFFALSE 75023
// exit ;
75021: GO 75071
// if asc then
75023: LD_VAR 0 2
75027: IFFALSE 75051
// result := SortListByListAsc ( units , tmp ) else
75029: LD_ADDR_VAR 0 3
75033: PUSH
75034: LD_VAR 0 1
75038: PPUSH
75039: LD_VAR 0 5
75043: PPUSH
75044: CALL_OW 76
75048: ST_TO_ADDR
75049: GO 75071
// result := SortListByListDesc ( units , tmp ) ;
75051: LD_ADDR_VAR 0 3
75055: PUSH
75056: LD_VAR 0 1
75060: PPUSH
75061: LD_VAR 0 5
75065: PPUSH
75066: CALL_OW 77
75070: ST_TO_ADDR
// end ;
75071: LD_VAR 0 3
75075: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
75076: LD_INT 0
75078: PPUSH
75079: PPUSH
// task := GetTaskList ( mech ) ;
75080: LD_ADDR_VAR 0 4
75084: PUSH
75085: LD_VAR 0 1
75089: PPUSH
75090: CALL_OW 437
75094: ST_TO_ADDR
// if not task then
75095: LD_VAR 0 4
75099: NOT
75100: IFFALSE 75104
// exit ;
75102: GO 75146
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
75104: LD_ADDR_VAR 0 3
75108: PUSH
75109: LD_VAR 0 4
75113: PUSH
75114: LD_INT 1
75116: ARRAY
75117: PUSH
75118: LD_INT 1
75120: ARRAY
75121: PUSH
75122: LD_STRING r
75124: EQUAL
75125: PUSH
75126: LD_VAR 0 4
75130: PUSH
75131: LD_INT 1
75133: ARRAY
75134: PUSH
75135: LD_INT 4
75137: ARRAY
75138: PUSH
75139: LD_VAR 0 2
75143: EQUAL
75144: AND
75145: ST_TO_ADDR
// end ;
75146: LD_VAR 0 3
75150: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75151: LD_INT 0
75153: PPUSH
// SetDir ( unit , d ) ;
75154: LD_VAR 0 1
75158: PPUSH
75159: LD_VAR 0 4
75163: PPUSH
75164: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
75168: LD_VAR 0 1
75172: PPUSH
75173: LD_VAR 0 2
75177: PPUSH
75178: LD_VAR 0 3
75182: PPUSH
75183: LD_VAR 0 5
75187: PPUSH
75188: CALL_OW 48
// end ;
75192: LD_VAR 0 6
75196: RET
// export function ToNaturalNumber ( number ) ; begin
75197: LD_INT 0
75199: PPUSH
// result := number div 1 ;
75200: LD_ADDR_VAR 0 2
75204: PUSH
75205: LD_VAR 0 1
75209: PUSH
75210: LD_INT 1
75212: DIV
75213: ST_TO_ADDR
// if number < 0 then
75214: LD_VAR 0 1
75218: PUSH
75219: LD_INT 0
75221: LESS
75222: IFFALSE 75232
// result := 0 ;
75224: LD_ADDR_VAR 0 2
75228: PUSH
75229: LD_INT 0
75231: ST_TO_ADDR
// end ;
75232: LD_VAR 0 2
75236: RET
// export function SortByClass ( units , class ) ; var un ; begin
75237: LD_INT 0
75239: PPUSH
75240: PPUSH
// if not units or not class then
75241: LD_VAR 0 1
75245: NOT
75246: PUSH
75247: LD_VAR 0 2
75251: NOT
75252: OR
75253: IFFALSE 75257
// exit ;
75255: GO 75352
// result := [ ] ;
75257: LD_ADDR_VAR 0 3
75261: PUSH
75262: EMPTY
75263: ST_TO_ADDR
// for un in units do
75264: LD_ADDR_VAR 0 4
75268: PUSH
75269: LD_VAR 0 1
75273: PUSH
75274: FOR_IN
75275: IFFALSE 75350
// if GetClass ( un ) = class then
75277: LD_VAR 0 4
75281: PPUSH
75282: CALL_OW 257
75286: PUSH
75287: LD_VAR 0 2
75291: EQUAL
75292: IFFALSE 75319
// result := Insert ( result , 1 , un ) else
75294: LD_ADDR_VAR 0 3
75298: PUSH
75299: LD_VAR 0 3
75303: PPUSH
75304: LD_INT 1
75306: PPUSH
75307: LD_VAR 0 4
75311: PPUSH
75312: CALL_OW 2
75316: ST_TO_ADDR
75317: GO 75348
// result := Replace ( result , result + 1 , un ) ;
75319: LD_ADDR_VAR 0 3
75323: PUSH
75324: LD_VAR 0 3
75328: PPUSH
75329: LD_VAR 0 3
75333: PUSH
75334: LD_INT 1
75336: PLUS
75337: PPUSH
75338: LD_VAR 0 4
75342: PPUSH
75343: CALL_OW 1
75347: ST_TO_ADDR
75348: GO 75274
75350: POP
75351: POP
// end ;
75352: LD_VAR 0 3
75356: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
75357: LD_INT 0
75359: PPUSH
75360: PPUSH
75361: PPUSH
75362: PPUSH
75363: PPUSH
75364: PPUSH
75365: PPUSH
// result := [ ] ;
75366: LD_ADDR_VAR 0 4
75370: PUSH
75371: EMPTY
75372: ST_TO_ADDR
// if x - r < 0 then
75373: LD_VAR 0 1
75377: PUSH
75378: LD_VAR 0 3
75382: MINUS
75383: PUSH
75384: LD_INT 0
75386: LESS
75387: IFFALSE 75399
// min_x := 0 else
75389: LD_ADDR_VAR 0 8
75393: PUSH
75394: LD_INT 0
75396: ST_TO_ADDR
75397: GO 75415
// min_x := x - r ;
75399: LD_ADDR_VAR 0 8
75403: PUSH
75404: LD_VAR 0 1
75408: PUSH
75409: LD_VAR 0 3
75413: MINUS
75414: ST_TO_ADDR
// if y - r < 0 then
75415: LD_VAR 0 2
75419: PUSH
75420: LD_VAR 0 3
75424: MINUS
75425: PUSH
75426: LD_INT 0
75428: LESS
75429: IFFALSE 75441
// min_y := 0 else
75431: LD_ADDR_VAR 0 7
75435: PUSH
75436: LD_INT 0
75438: ST_TO_ADDR
75439: GO 75457
// min_y := y - r ;
75441: LD_ADDR_VAR 0 7
75445: PUSH
75446: LD_VAR 0 2
75450: PUSH
75451: LD_VAR 0 3
75455: MINUS
75456: ST_TO_ADDR
// max_x := x + r ;
75457: LD_ADDR_VAR 0 9
75461: PUSH
75462: LD_VAR 0 1
75466: PUSH
75467: LD_VAR 0 3
75471: PLUS
75472: ST_TO_ADDR
// max_y := y + r ;
75473: LD_ADDR_VAR 0 10
75477: PUSH
75478: LD_VAR 0 2
75482: PUSH
75483: LD_VAR 0 3
75487: PLUS
75488: ST_TO_ADDR
// for _x = min_x to max_x do
75489: LD_ADDR_VAR 0 5
75493: PUSH
75494: DOUBLE
75495: LD_VAR 0 8
75499: DEC
75500: ST_TO_ADDR
75501: LD_VAR 0 9
75505: PUSH
75506: FOR_TO
75507: IFFALSE 75608
// for _y = min_y to max_y do
75509: LD_ADDR_VAR 0 6
75513: PUSH
75514: DOUBLE
75515: LD_VAR 0 7
75519: DEC
75520: ST_TO_ADDR
75521: LD_VAR 0 10
75525: PUSH
75526: FOR_TO
75527: IFFALSE 75604
// begin if not ValidHex ( _x , _y ) then
75529: LD_VAR 0 5
75533: PPUSH
75534: LD_VAR 0 6
75538: PPUSH
75539: CALL_OW 488
75543: NOT
75544: IFFALSE 75548
// continue ;
75546: GO 75526
// if GetResourceTypeXY ( _x , _y ) then
75548: LD_VAR 0 5
75552: PPUSH
75553: LD_VAR 0 6
75557: PPUSH
75558: CALL_OW 283
75562: IFFALSE 75602
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75564: LD_ADDR_VAR 0 4
75568: PUSH
75569: LD_VAR 0 4
75573: PPUSH
75574: LD_VAR 0 4
75578: PUSH
75579: LD_INT 1
75581: PLUS
75582: PPUSH
75583: LD_VAR 0 5
75587: PUSH
75588: LD_VAR 0 6
75592: PUSH
75593: EMPTY
75594: LIST
75595: LIST
75596: PPUSH
75597: CALL_OW 1
75601: ST_TO_ADDR
// end ;
75602: GO 75526
75604: POP
75605: POP
75606: GO 75506
75608: POP
75609: POP
// end ;
75610: LD_VAR 0 4
75614: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
75615: LD_INT 0
75617: PPUSH
75618: PPUSH
75619: PPUSH
75620: PPUSH
75621: PPUSH
75622: PPUSH
75623: PPUSH
75624: PPUSH
// if not units then
75625: LD_VAR 0 1
75629: NOT
75630: IFFALSE 75634
// exit ;
75632: GO 76059
// result := UnitFilter ( units , [ f_ok ] ) ;
75634: LD_ADDR_VAR 0 3
75638: PUSH
75639: LD_VAR 0 1
75643: PPUSH
75644: LD_INT 50
75646: PUSH
75647: EMPTY
75648: LIST
75649: PPUSH
75650: CALL_OW 72
75654: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75655: LD_ADDR_VAR 0 8
75659: PUSH
75660: LD_VAR 0 1
75664: PUSH
75665: LD_INT 1
75667: ARRAY
75668: PPUSH
75669: CALL_OW 255
75673: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
75674: LD_ADDR_VAR 0 10
75678: PUSH
75679: LD_INT 29
75681: PUSH
75682: LD_EXP 125
75686: PUSH
75687: EMPTY
75688: LIST
75689: LIST
75690: ST_TO_ADDR
// if not result then
75691: LD_VAR 0 3
75695: NOT
75696: IFFALSE 75700
// exit ;
75698: GO 76059
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
75700: LD_ADDR_VAR 0 5
75704: PUSH
75705: LD_INT 81
75707: PUSH
75708: LD_VAR 0 8
75712: PUSH
75713: EMPTY
75714: LIST
75715: LIST
75716: PPUSH
75717: CALL_OW 69
75721: ST_TO_ADDR
// for i in result do
75722: LD_ADDR_VAR 0 4
75726: PUSH
75727: LD_VAR 0 3
75731: PUSH
75732: FOR_IN
75733: IFFALSE 76057
// begin tag := GetTag ( i ) + 1 ;
75735: LD_ADDR_VAR 0 9
75739: PUSH
75740: LD_VAR 0 4
75744: PPUSH
75745: CALL_OW 110
75749: PUSH
75750: LD_INT 1
75752: PLUS
75753: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
75754: LD_ADDR_VAR 0 7
75758: PUSH
75759: LD_VAR 0 4
75763: PPUSH
75764: CALL_OW 250
75768: PPUSH
75769: LD_VAR 0 4
75773: PPUSH
75774: CALL_OW 251
75778: PPUSH
75779: LD_INT 6
75781: PPUSH
75782: CALL 75357 0 3
75786: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
75787: LD_VAR 0 7
75791: PUSH
75792: LD_VAR 0 4
75796: PPUSH
75797: CALL_OW 264
75801: PUSH
75802: LD_VAR 0 10
75806: IN
75807: NOT
75808: AND
75809: IFFALSE 75848
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
75811: LD_VAR 0 4
75815: PPUSH
75816: LD_VAR 0 7
75820: PUSH
75821: LD_INT 1
75823: ARRAY
75824: PUSH
75825: LD_INT 1
75827: ARRAY
75828: PPUSH
75829: LD_VAR 0 7
75833: PUSH
75834: LD_INT 1
75836: ARRAY
75837: PUSH
75838: LD_INT 2
75840: ARRAY
75841: PPUSH
75842: CALL_OW 116
75846: GO 76055
// if path > tag then
75848: LD_VAR 0 2
75852: PUSH
75853: LD_VAR 0 9
75857: GREATER
75858: IFFALSE 76025
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
75860: LD_ADDR_VAR 0 6
75864: PUSH
75865: LD_VAR 0 5
75869: PPUSH
75870: LD_INT 91
75872: PUSH
75873: LD_VAR 0 4
75877: PUSH
75878: LD_INT 12
75880: PUSH
75881: EMPTY
75882: LIST
75883: LIST
75884: LIST
75885: PPUSH
75886: CALL_OW 72
75890: ST_TO_ADDR
// if nearEnemy then
75891: LD_VAR 0 6
75895: IFFALSE 75923
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
75897: LD_VAR 0 4
75901: PPUSH
75902: LD_VAR 0 6
75906: PPUSH
75907: LD_VAR 0 4
75911: PPUSH
75912: CALL_OW 74
75916: PPUSH
75917: CALL_OW 115
75921: GO 76023
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
75923: LD_VAR 0 4
75927: PPUSH
75928: LD_VAR 0 2
75932: PUSH
75933: LD_VAR 0 9
75937: ARRAY
75938: PUSH
75939: LD_INT 1
75941: ARRAY
75942: PPUSH
75943: LD_VAR 0 2
75947: PUSH
75948: LD_VAR 0 9
75952: ARRAY
75953: PUSH
75954: LD_INT 2
75956: ARRAY
75957: PPUSH
75958: CALL_OW 297
75962: PUSH
75963: LD_INT 6
75965: GREATER
75966: IFFALSE 76009
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
75968: LD_VAR 0 4
75972: PPUSH
75973: LD_VAR 0 2
75977: PUSH
75978: LD_VAR 0 9
75982: ARRAY
75983: PUSH
75984: LD_INT 1
75986: ARRAY
75987: PPUSH
75988: LD_VAR 0 2
75992: PUSH
75993: LD_VAR 0 9
75997: ARRAY
75998: PUSH
75999: LD_INT 2
76001: ARRAY
76002: PPUSH
76003: CALL_OW 114
76007: GO 76023
// SetTag ( i , tag ) ;
76009: LD_VAR 0 4
76013: PPUSH
76014: LD_VAR 0 9
76018: PPUSH
76019: CALL_OW 109
// end else
76023: GO 76055
// if enemy then
76025: LD_VAR 0 5
76029: IFFALSE 76055
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
76031: LD_VAR 0 4
76035: PPUSH
76036: LD_VAR 0 5
76040: PPUSH
76041: LD_VAR 0 4
76045: PPUSH
76046: CALL_OW 74
76050: PPUSH
76051: CALL_OW 115
// end ;
76055: GO 75732
76057: POP
76058: POP
// end ;
76059: LD_VAR 0 3
76063: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
76064: LD_INT 0
76066: PPUSH
76067: PPUSH
76068: PPUSH
// if not unit or IsInUnit ( unit ) then
76069: LD_VAR 0 1
76073: NOT
76074: PUSH
76075: LD_VAR 0 1
76079: PPUSH
76080: CALL_OW 310
76084: OR
76085: IFFALSE 76089
// exit ;
76087: GO 76180
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
76089: LD_ADDR_VAR 0 4
76093: PUSH
76094: LD_VAR 0 1
76098: PPUSH
76099: CALL_OW 250
76103: PPUSH
76104: LD_VAR 0 2
76108: PPUSH
76109: LD_INT 1
76111: PPUSH
76112: CALL_OW 272
76116: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
76117: LD_ADDR_VAR 0 5
76121: PUSH
76122: LD_VAR 0 1
76126: PPUSH
76127: CALL_OW 251
76131: PPUSH
76132: LD_VAR 0 2
76136: PPUSH
76137: LD_INT 1
76139: PPUSH
76140: CALL_OW 273
76144: ST_TO_ADDR
// if ValidHex ( x , y ) then
76145: LD_VAR 0 4
76149: PPUSH
76150: LD_VAR 0 5
76154: PPUSH
76155: CALL_OW 488
76159: IFFALSE 76180
// ComTurnXY ( unit , x , y ) ;
76161: LD_VAR 0 1
76165: PPUSH
76166: LD_VAR 0 4
76170: PPUSH
76171: LD_VAR 0 5
76175: PPUSH
76176: CALL_OW 118
// end ;
76180: LD_VAR 0 3
76184: RET
// export function SeeUnits ( side , units ) ; var i ; begin
76185: LD_INT 0
76187: PPUSH
76188: PPUSH
// result := false ;
76189: LD_ADDR_VAR 0 3
76193: PUSH
76194: LD_INT 0
76196: ST_TO_ADDR
// if not units then
76197: LD_VAR 0 2
76201: NOT
76202: IFFALSE 76206
// exit ;
76204: GO 76251
// for i in units do
76206: LD_ADDR_VAR 0 4
76210: PUSH
76211: LD_VAR 0 2
76215: PUSH
76216: FOR_IN
76217: IFFALSE 76249
// if See ( side , i ) then
76219: LD_VAR 0 1
76223: PPUSH
76224: LD_VAR 0 4
76228: PPUSH
76229: CALL_OW 292
76233: IFFALSE 76247
// begin result := true ;
76235: LD_ADDR_VAR 0 3
76239: PUSH
76240: LD_INT 1
76242: ST_TO_ADDR
// exit ;
76243: POP
76244: POP
76245: GO 76251
// end ;
76247: GO 76216
76249: POP
76250: POP
// end ;
76251: LD_VAR 0 3
76255: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
76256: LD_INT 0
76258: PPUSH
76259: PPUSH
76260: PPUSH
76261: PPUSH
// if not unit or not points then
76262: LD_VAR 0 1
76266: NOT
76267: PUSH
76268: LD_VAR 0 2
76272: NOT
76273: OR
76274: IFFALSE 76278
// exit ;
76276: GO 76368
// dist := 99999 ;
76278: LD_ADDR_VAR 0 5
76282: PUSH
76283: LD_INT 99999
76285: ST_TO_ADDR
// for i in points do
76286: LD_ADDR_VAR 0 4
76290: PUSH
76291: LD_VAR 0 2
76295: PUSH
76296: FOR_IN
76297: IFFALSE 76366
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
76299: LD_ADDR_VAR 0 6
76303: PUSH
76304: LD_VAR 0 1
76308: PPUSH
76309: LD_VAR 0 4
76313: PUSH
76314: LD_INT 1
76316: ARRAY
76317: PPUSH
76318: LD_VAR 0 4
76322: PUSH
76323: LD_INT 2
76325: ARRAY
76326: PPUSH
76327: CALL_OW 297
76331: ST_TO_ADDR
// if tmpDist < dist then
76332: LD_VAR 0 6
76336: PUSH
76337: LD_VAR 0 5
76341: LESS
76342: IFFALSE 76364
// begin result := i ;
76344: LD_ADDR_VAR 0 3
76348: PUSH
76349: LD_VAR 0 4
76353: ST_TO_ADDR
// dist := tmpDist ;
76354: LD_ADDR_VAR 0 5
76358: PUSH
76359: LD_VAR 0 6
76363: ST_TO_ADDR
// end ; end ;
76364: GO 76296
76366: POP
76367: POP
// end ; end_of_file
76368: LD_VAR 0 3
76372: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76373: LD_VAR 0 1
76377: PPUSH
76378: LD_VAR 0 2
76382: PPUSH
76383: LD_VAR 0 3
76387: PPUSH
76388: LD_VAR 0 4
76392: PPUSH
76393: LD_VAR 0 5
76397: PPUSH
76398: LD_VAR 0 6
76402: PPUSH
76403: CALL 17080 0 6
// end ;
76407: PPOPN 6
76409: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76410: CALL 17055 0 0
// end ;
76414: PPOPN 1
76416: END
