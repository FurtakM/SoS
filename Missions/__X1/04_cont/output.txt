// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// PrepareNature ;
   8: CALL 1860 0 0
// PrepareArabian ;
  12: CALL 2230 0 0
// PrepareAmerican ;
  16: CALL 7225 0 0
// PrepareRussian ;
  20: CALL 3186 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 8785 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 25 25$00 , 24 24$00 , 23 23$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 52500
 188: PUSH
 189: LD_INT 50400
 191: PUSH
 192: LD_INT 48300
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: PUSH
 200: LD_OWVAR 67
 204: ARRAY
 205: ST_TO_ADDR
// escapeCounter := 0 ;
 206: LD_ADDR_EXP 19
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// loseCounter := 0 ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// labCaptured := false ;
 222: LD_ADDR_EXP 21
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// hillBase := false ;
 230: LD_ADDR_EXP 15
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 238: LD_ADDR_EXP 8
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: LD_INT 4
 248: PUSH
 249: LD_INT 5
 251: PUSH
 252: LD_INT 6
 254: PUSH
 255: LD_INT 7
 257: PUSH
 258: LD_INT 8
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: LIST
 268: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 269: LD_ADDR_EXP 23
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// kaganCaptured := false ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// end ;
 285: LD_VAR 0 1
 289: RET
// every 0 0$1 trigger debug do var i ;
 290: LD_EXP 1
 294: IFFALSE 363
 296: GO 298
 298: DISABLE
 299: LD_INT 0
 301: PPUSH
// begin enable ;
 302: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 303: LD_ADDR_VAR 0 1
 307: PUSH
 308: LD_INT 22
 310: PUSH
 311: LD_INT 2
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: PUSH
 318: LD_INT 3
 320: PUSH
 321: LD_INT 21
 323: PUSH
 324: LD_INT 3
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: FOR_IN
 345: IFFALSE 361
// SetLives ( i , 1000 ) ;
 347: LD_VAR 0 1
 351: PPUSH
 352: LD_INT 1000
 354: PPUSH
 355: CALL_OW 234
 359: GO 344
 361: POP
 362: POP
// end ; end_of_file
 363: PPOPN 1
 365: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 366: LD_INT 0
 368: PPUSH
 369: PPUSH
// if exist_mode then
 370: LD_VAR 0 2
 374: IFFALSE 399
// unit := CreateCharacter ( prefix & ident ) else
 376: LD_ADDR_VAR 0 5
 380: PUSH
 381: LD_VAR 0 3
 385: PUSH
 386: LD_VAR 0 1
 390: STR
 391: PPUSH
 392: CALL_OW 34
 396: ST_TO_ADDR
 397: GO 414
// unit := NewCharacter ( ident ) ;
 399: LD_ADDR_VAR 0 5
 403: PUSH
 404: LD_VAR 0 1
 408: PPUSH
 409: CALL_OW 25
 413: ST_TO_ADDR
// result := unit ;
 414: LD_ADDR_VAR 0 4
 418: PUSH
 419: LD_VAR 0 5
 423: ST_TO_ADDR
// end ;
 424: LD_VAR 0 4
 428: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 429: LD_INT 0
 431: PPUSH
// uc_side := side ;
 432: LD_ADDR_OWVAR 20
 436: PUSH
 437: LD_VAR 0 1
 441: ST_TO_ADDR
// uc_nation := nation ;
 442: LD_ADDR_OWVAR 21
 446: PUSH
 447: LD_VAR 0 2
 451: ST_TO_ADDR
// vc_chassis := chassis ;
 452: LD_ADDR_OWVAR 37
 456: PUSH
 457: LD_VAR 0 3
 461: ST_TO_ADDR
// vc_engine := engine ;
 462: LD_ADDR_OWVAR 39
 466: PUSH
 467: LD_VAR 0 4
 471: ST_TO_ADDR
// vc_control := control ;
 472: LD_ADDR_OWVAR 38
 476: PUSH
 477: LD_VAR 0 5
 481: ST_TO_ADDR
// vc_weapon := weapon ;
 482: LD_ADDR_OWVAR 40
 486: PUSH
 487: LD_VAR 0 6
 491: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 492: LD_ADDR_OWVAR 41
 496: PUSH
 497: LD_VAR 0 7
 501: ST_TO_ADDR
// result := CreateVehicle ;
 502: LD_ADDR_VAR 0 8
 506: PUSH
 507: CALL_OW 45
 511: ST_TO_ADDR
// end ;
 512: LD_VAR 0 8
 516: RET
// export function SayX ( units , ident ) ; var i ; begin
 517: LD_INT 0
 519: PPUSH
 520: PPUSH
// result := false ;
 521: LD_ADDR_VAR 0 3
 525: PUSH
 526: LD_INT 0
 528: ST_TO_ADDR
// if not units then
 529: LD_VAR 0 1
 533: NOT
 534: IFFALSE 538
// exit ;
 536: GO 592
// for i in units do
 538: LD_ADDR_VAR 0 4
 542: PUSH
 543: LD_VAR 0 1
 547: PUSH
 548: FOR_IN
 549: IFFALSE 590
// if IsOk ( i ) then
 551: LD_VAR 0 4
 555: PPUSH
 556: CALL_OW 302
 560: IFFALSE 588
// begin Say ( i , ident ) ;
 562: LD_VAR 0 4
 566: PPUSH
 567: LD_VAR 0 2
 571: PPUSH
 572: CALL_OW 88
// result := i ;
 576: LD_ADDR_VAR 0 3
 580: PUSH
 581: LD_VAR 0 4
 585: ST_TO_ADDR
// break ;
 586: GO 590
// end ;
 588: GO 548
 590: POP
 591: POP
// end ;
 592: LD_VAR 0 3
 596: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 597: LD_INT 0
 599: PPUSH
 600: PPUSH
 601: PPUSH
// if not observer or not unit then
 602: LD_VAR 0 1
 606: NOT
 607: PUSH
 608: LD_VAR 0 2
 612: NOT
 613: OR
 614: IFFALSE 618
// exit ;
 616: GO 666
// if not See ( GetSide ( observer ) , unit ) then
 618: LD_VAR 0 1
 622: PPUSH
 623: CALL_OW 255
 627: PPUSH
 628: LD_VAR 0 2
 632: PPUSH
 633: CALL_OW 292
 637: NOT
 638: IFFALSE 642
// exit ;
 640: GO 666
// result := GetDistUnits ( observer , unit ) < 12 ;
 642: LD_ADDR_VAR 0 3
 646: PUSH
 647: LD_VAR 0 1
 651: PPUSH
 652: LD_VAR 0 2
 656: PPUSH
 657: CALL_OW 296
 661: PUSH
 662: LD_INT 12
 664: LESS
 665: ST_TO_ADDR
// end ;
 666: LD_VAR 0 3
 670: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 671: LD_INT 0
 673: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 674: LD_VAR 0 2
 678: PUSH
 679: LD_INT 1
 681: ARRAY
 682: PPUSH
 683: LD_VAR 0 2
 687: PUSH
 688: LD_INT 2
 690: ARRAY
 691: PPUSH
 692: CALL_OW 488
 696: PUSH
 697: LD_VAR 0 2
 701: PUSH
 702: LD_INT 1
 704: ARRAY
 705: PPUSH
 706: LD_VAR 0 2
 710: PUSH
 711: LD_INT 2
 713: ARRAY
 714: PPUSH
 715: CALL_OW 428
 719: PUSH
 720: LD_INT 0
 722: EQUAL
 723: AND
 724: IFFALSE 758
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 726: LD_VAR 0 1
 730: PPUSH
 731: LD_VAR 0 2
 735: PUSH
 736: LD_INT 1
 738: ARRAY
 739: PPUSH
 740: LD_VAR 0 2
 744: PUSH
 745: LD_INT 2
 747: ARRAY
 748: PPUSH
 749: LD_VAR 0 3
 753: PPUSH
 754: CALL_OW 48
// end ;
 758: LD_VAR 0 4
 762: RET
// export function Video ( mode ) ; begin
 763: LD_INT 0
 765: PPUSH
// ingame_video = mode ;
 766: LD_ADDR_OWVAR 52
 770: PUSH
 771: LD_VAR 0 1
 775: ST_TO_ADDR
// interface_hidden = mode ;
 776: LD_ADDR_OWVAR 54
 780: PUSH
 781: LD_VAR 0 1
 785: ST_TO_ADDR
// end ;
 786: LD_VAR 0 2
 790: RET
// export function ReverseArray ( array ) ; var i ; begin
 791: LD_INT 0
 793: PPUSH
 794: PPUSH
// if not array then
 795: LD_VAR 0 1
 799: NOT
 800: IFFALSE 804
// exit ;
 802: GO 862
// result := [ ] ;
 804: LD_ADDR_VAR 0 2
 808: PUSH
 809: EMPTY
 810: ST_TO_ADDR
// for i := 1 to array do
 811: LD_ADDR_VAR 0 3
 815: PUSH
 816: DOUBLE
 817: LD_INT 1
 819: DEC
 820: ST_TO_ADDR
 821: LD_VAR 0 1
 825: PUSH
 826: FOR_TO
 827: IFFALSE 860
// result := Insert ( result , 1 , array [ i ] ) ;
 829: LD_ADDR_VAR 0 2
 833: PUSH
 834: LD_VAR 0 2
 838: PPUSH
 839: LD_INT 1
 841: PPUSH
 842: LD_VAR 0 1
 846: PUSH
 847: LD_VAR 0 3
 851: ARRAY
 852: PPUSH
 853: CALL_OW 2
 857: ST_TO_ADDR
 858: GO 826
 860: POP
 861: POP
// end ;
 862: LD_VAR 0 2
 866: RET
// export function ComExit ( unit ) ; begin
 867: LD_INT 0
 869: PPUSH
// result := IsInUnit ( unit ) ;
 870: LD_ADDR_VAR 0 2
 874: PUSH
 875: LD_VAR 0 1
 879: PPUSH
 880: CALL_OW 310
 884: ST_TO_ADDR
// if not result then
 885: LD_VAR 0 2
 889: NOT
 890: IFFALSE 894
// exit ;
 892: GO 929
// if GetType ( result ) = unit_vehicle then
 894: LD_VAR 0 2
 898: PPUSH
 899: CALL_OW 247
 903: PUSH
 904: LD_INT 2
 906: EQUAL
 907: IFFALSE 920
// ComExitVehicle ( unit ) else
 909: LD_VAR 0 1
 913: PPUSH
 914: CALL_OW 121
 918: GO 929
// ComExitBuilding ( unit ) ;
 920: LD_VAR 0 1
 924: PPUSH
 925: CALL_OW 122
// end ;
 929: LD_VAR 0 2
 933: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 934: LD_INT 0
 936: PPUSH
 937: PPUSH
// if not side or not nation then
 938: LD_VAR 0 1
 942: NOT
 943: PUSH
 944: LD_VAR 0 2
 948: NOT
 949: OR
 950: IFFALSE 954
// exit ;
 952: GO 1718
// case nation of nation_american :
 954: LD_VAR 0 2
 958: PUSH
 959: LD_INT 1
 961: DOUBLE
 962: EQUAL
 963: IFTRUE 967
 965: GO 1181
 967: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 968: LD_ADDR_VAR 0 4
 972: PUSH
 973: LD_INT 35
 975: PUSH
 976: LD_INT 45
 978: PUSH
 979: LD_INT 46
 981: PUSH
 982: LD_INT 47
 984: PUSH
 985: LD_INT 82
 987: PUSH
 988: LD_INT 83
 990: PUSH
 991: LD_INT 84
 993: PUSH
 994: LD_INT 85
 996: PUSH
 997: LD_INT 86
 999: PUSH
1000: LD_INT 1
1002: PUSH
1003: LD_INT 2
1005: PUSH
1006: LD_INT 6
1008: PUSH
1009: LD_INT 15
1011: PUSH
1012: LD_INT 16
1014: PUSH
1015: LD_INT 7
1017: PUSH
1018: LD_INT 12
1020: PUSH
1021: LD_INT 13
1023: PUSH
1024: LD_INT 10
1026: PUSH
1027: LD_INT 14
1029: PUSH
1030: LD_INT 20
1032: PUSH
1033: LD_INT 21
1035: PUSH
1036: LD_INT 22
1038: PUSH
1039: LD_INT 25
1041: PUSH
1042: LD_INT 32
1044: PUSH
1045: LD_INT 27
1047: PUSH
1048: LD_INT 36
1050: PUSH
1051: LD_INT 69
1053: PUSH
1054: LD_INT 39
1056: PUSH
1057: LD_INT 34
1059: PUSH
1060: LD_INT 40
1062: PUSH
1063: LD_INT 48
1065: PUSH
1066: LD_INT 49
1068: PUSH
1069: LD_INT 50
1071: PUSH
1072: LD_INT 51
1074: PUSH
1075: LD_INT 52
1077: PUSH
1078: LD_INT 53
1080: PUSH
1081: LD_INT 54
1083: PUSH
1084: LD_INT 55
1086: PUSH
1087: LD_INT 56
1089: PUSH
1090: LD_INT 57
1092: PUSH
1093: LD_INT 58
1095: PUSH
1096: LD_INT 59
1098: PUSH
1099: LD_INT 60
1101: PUSH
1102: LD_INT 61
1104: PUSH
1105: LD_INT 62
1107: PUSH
1108: LD_INT 80
1110: PUSH
1111: LD_INT 82
1113: PUSH
1114: LD_INT 83
1116: PUSH
1117: LD_INT 84
1119: PUSH
1120: LD_INT 85
1122: PUSH
1123: LD_INT 86
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: LIST
1176: LIST
1177: LIST
1178: ST_TO_ADDR
1179: GO 1642
1181: LD_INT 2
1183: DOUBLE
1184: EQUAL
1185: IFTRUE 1189
1187: GO 1411
1189: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1190: LD_ADDR_VAR 0 4
1194: PUSH
1195: LD_INT 35
1197: PUSH
1198: LD_INT 45
1200: PUSH
1201: LD_INT 46
1203: PUSH
1204: LD_INT 47
1206: PUSH
1207: LD_INT 82
1209: PUSH
1210: LD_INT 83
1212: PUSH
1213: LD_INT 84
1215: PUSH
1216: LD_INT 85
1218: PUSH
1219: LD_INT 87
1221: PUSH
1222: LD_INT 70
1224: PUSH
1225: LD_INT 1
1227: PUSH
1228: LD_INT 11
1230: PUSH
1231: LD_INT 3
1233: PUSH
1234: LD_INT 4
1236: PUSH
1237: LD_INT 5
1239: PUSH
1240: LD_INT 6
1242: PUSH
1243: LD_INT 15
1245: PUSH
1246: LD_INT 18
1248: PUSH
1249: LD_INT 7
1251: PUSH
1252: LD_INT 17
1254: PUSH
1255: LD_INT 8
1257: PUSH
1258: LD_INT 20
1260: PUSH
1261: LD_INT 21
1263: PUSH
1264: LD_INT 22
1266: PUSH
1267: LD_INT 72
1269: PUSH
1270: LD_INT 26
1272: PUSH
1273: LD_INT 69
1275: PUSH
1276: LD_INT 39
1278: PUSH
1279: LD_INT 40
1281: PUSH
1282: LD_INT 41
1284: PUSH
1285: LD_INT 42
1287: PUSH
1288: LD_INT 43
1290: PUSH
1291: LD_INT 48
1293: PUSH
1294: LD_INT 49
1296: PUSH
1297: LD_INT 50
1299: PUSH
1300: LD_INT 51
1302: PUSH
1303: LD_INT 52
1305: PUSH
1306: LD_INT 53
1308: PUSH
1309: LD_INT 54
1311: PUSH
1312: LD_INT 55
1314: PUSH
1315: LD_INT 56
1317: PUSH
1318: LD_INT 60
1320: PUSH
1321: LD_INT 61
1323: PUSH
1324: LD_INT 62
1326: PUSH
1327: LD_INT 66
1329: PUSH
1330: LD_INT 67
1332: PUSH
1333: LD_INT 68
1335: PUSH
1336: LD_INT 81
1338: PUSH
1339: LD_INT 82
1341: PUSH
1342: LD_INT 83
1344: PUSH
1345: LD_INT 84
1347: PUSH
1348: LD_INT 85
1350: PUSH
1351: LD_INT 87
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: LIST
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: ST_TO_ADDR
1409: GO 1642
1411: LD_INT 3
1413: DOUBLE
1414: EQUAL
1415: IFTRUE 1419
1417: GO 1641
1419: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1420: LD_ADDR_VAR 0 4
1424: PUSH
1425: LD_INT 46
1427: PUSH
1428: LD_INT 47
1430: PUSH
1431: LD_INT 1
1433: PUSH
1434: LD_INT 2
1436: PUSH
1437: LD_INT 82
1439: PUSH
1440: LD_INT 83
1442: PUSH
1443: LD_INT 84
1445: PUSH
1446: LD_INT 85
1448: PUSH
1449: LD_INT 86
1451: PUSH
1452: LD_INT 11
1454: PUSH
1455: LD_INT 9
1457: PUSH
1458: LD_INT 20
1460: PUSH
1461: LD_INT 19
1463: PUSH
1464: LD_INT 21
1466: PUSH
1467: LD_INT 24
1469: PUSH
1470: LD_INT 22
1472: PUSH
1473: LD_INT 25
1475: PUSH
1476: LD_INT 28
1478: PUSH
1479: LD_INT 29
1481: PUSH
1482: LD_INT 30
1484: PUSH
1485: LD_INT 31
1487: PUSH
1488: LD_INT 37
1490: PUSH
1491: LD_INT 38
1493: PUSH
1494: LD_INT 32
1496: PUSH
1497: LD_INT 27
1499: PUSH
1500: LD_INT 33
1502: PUSH
1503: LD_INT 69
1505: PUSH
1506: LD_INT 39
1508: PUSH
1509: LD_INT 34
1511: PUSH
1512: LD_INT 40
1514: PUSH
1515: LD_INT 71
1517: PUSH
1518: LD_INT 23
1520: PUSH
1521: LD_INT 44
1523: PUSH
1524: LD_INT 48
1526: PUSH
1527: LD_INT 49
1529: PUSH
1530: LD_INT 50
1532: PUSH
1533: LD_INT 51
1535: PUSH
1536: LD_INT 52
1538: PUSH
1539: LD_INT 53
1541: PUSH
1542: LD_INT 54
1544: PUSH
1545: LD_INT 55
1547: PUSH
1548: LD_INT 56
1550: PUSH
1551: LD_INT 57
1553: PUSH
1554: LD_INT 58
1556: PUSH
1557: LD_INT 59
1559: PUSH
1560: LD_INT 63
1562: PUSH
1563: LD_INT 64
1565: PUSH
1566: LD_INT 65
1568: PUSH
1569: LD_INT 82
1571: PUSH
1572: LD_INT 83
1574: PUSH
1575: LD_INT 84
1577: PUSH
1578: LD_INT 85
1580: PUSH
1581: LD_INT 86
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: ST_TO_ADDR
1639: GO 1642
1641: POP
// if state > - 1 and state < 3 then
1642: LD_VAR 0 3
1646: PUSH
1647: LD_INT 1
1649: NEG
1650: GREATER
1651: PUSH
1652: LD_VAR 0 3
1656: PUSH
1657: LD_INT 3
1659: LESS
1660: AND
1661: IFFALSE 1718
// for i in result do
1663: LD_ADDR_VAR 0 5
1667: PUSH
1668: LD_VAR 0 4
1672: PUSH
1673: FOR_IN
1674: IFFALSE 1716
// if GetTech ( i , side ) <> state then
1676: LD_VAR 0 5
1680: PPUSH
1681: LD_VAR 0 1
1685: PPUSH
1686: CALL_OW 321
1690: PUSH
1691: LD_VAR 0 3
1695: NONEQUAL
1696: IFFALSE 1714
// result := result diff i ;
1698: LD_ADDR_VAR 0 4
1702: PUSH
1703: LD_VAR 0 4
1707: PUSH
1708: LD_VAR 0 5
1712: DIFF
1713: ST_TO_ADDR
1714: GO 1673
1716: POP
1717: POP
// end ;
1718: LD_VAR 0 4
1722: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
1723: LD_INT 0
1725: PPUSH
1726: PPUSH
// InitUc ;
1727: CALL_OW 18
// InitHc ;
1731: CALL_OW 19
// uc_side := 0 ;
1735: LD_ADDR_OWVAR 20
1739: PUSH
1740: LD_INT 0
1742: ST_TO_ADDR
// uc_nation := 0 ;
1743: LD_ADDR_OWVAR 21
1747: PUSH
1748: LD_INT 0
1750: ST_TO_ADDR
// for i = 1 to amount do
1751: LD_ADDR_VAR 0 4
1755: PUSH
1756: DOUBLE
1757: LD_INT 1
1759: DEC
1760: ST_TO_ADDR
1761: LD_VAR 0 2
1765: PUSH
1766: FOR_TO
1767: IFFALSE 1849
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
1769: LD_ADDR_OWVAR 29
1773: PUSH
1774: LD_INT 9
1776: PPUSH
1777: LD_INT 12
1779: PPUSH
1780: CALL_OW 12
1784: PUSH
1785: LD_INT 9
1787: PPUSH
1788: LD_INT 12
1790: PPUSH
1791: CALL_OW 12
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
1800: LD_ADDR_OWVAR 35
1804: PUSH
1805: LD_INT 1
1807: NEG
1808: PPUSH
1809: LD_INT 1
1811: PPUSH
1812: CALL_OW 12
1816: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
1817: LD_INT 0
1819: PPUSH
1820: LD_INT 12
1822: PPUSH
1823: LD_INT 1
1825: PPUSH
1826: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
1830: CALL_OW 44
1834: PPUSH
1835: LD_VAR 0 1
1839: PPUSH
1840: LD_INT 0
1842: PPUSH
1843: CALL_OW 49
// end ;
1847: GO 1766
1849: POP
1850: POP
// InitHc ;
1851: CALL_OW 19
// end ;
1855: LD_VAR 0 3
1859: RET
// export function PrepareNature ; var i ; begin
1860: LD_INT 0
1862: PPUSH
1863: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
1864: LD_INT 18
1866: PPUSH
1867: LD_INT 5
1869: PUSH
1870: LD_INT 4
1872: PUSH
1873: LD_INT 3
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: LIST
1880: PUSH
1881: LD_OWVAR 67
1885: ARRAY
1886: PPUSH
1887: CALL 1723 0 2
// for i := 1 to 3 do
1891: LD_ADDR_VAR 0 2
1895: PUSH
1896: DOUBLE
1897: LD_INT 1
1899: DEC
1900: ST_TO_ADDR
1901: LD_INT 3
1903: PUSH
1904: FOR_TO
1905: IFFALSE 1940
// begin hc_class := 21 ;
1907: LD_ADDR_OWVAR 28
1911: PUSH
1912: LD_INT 21
1914: ST_TO_ADDR
// hc_gallery :=  ;
1915: LD_ADDR_OWVAR 33
1919: PUSH
1920: LD_STRING 
1922: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1923: CALL_OW 44
1927: PPUSH
1928: LD_INT 18
1930: PPUSH
1931: LD_INT 0
1933: PPUSH
1934: CALL_OW 49
// end ;
1938: GO 1904
1940: POP
1941: POP
// for i := 1 to 2 do
1942: LD_ADDR_VAR 0 2
1946: PUSH
1947: DOUBLE
1948: LD_INT 1
1950: DEC
1951: ST_TO_ADDR
1952: LD_INT 2
1954: PUSH
1955: FOR_TO
1956: IFFALSE 1991
// begin hc_class := 18 ;
1958: LD_ADDR_OWVAR 28
1962: PUSH
1963: LD_INT 18
1965: ST_TO_ADDR
// hc_gallery :=  ;
1966: LD_ADDR_OWVAR 33
1970: PUSH
1971: LD_STRING 
1973: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1974: CALL_OW 44
1978: PPUSH
1979: LD_INT 18
1981: PPUSH
1982: LD_INT 0
1984: PPUSH
1985: CALL_OW 49
// end ;
1989: GO 1955
1991: POP
1992: POP
// for i := 1 to 2 do
1993: LD_ADDR_VAR 0 2
1997: PUSH
1998: DOUBLE
1999: LD_INT 1
2001: DEC
2002: ST_TO_ADDR
2003: LD_INT 2
2005: PUSH
2006: FOR_TO
2007: IFFALSE 2042
// begin hc_class := 13 ;
2009: LD_ADDR_OWVAR 28
2013: PUSH
2014: LD_INT 13
2016: ST_TO_ADDR
// hc_gallery :=  ;
2017: LD_ADDR_OWVAR 33
2021: PUSH
2022: LD_STRING 
2024: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
2025: CALL_OW 44
2029: PPUSH
2030: LD_INT 18
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: CALL_OW 49
// end ;
2040: GO 2006
2042: POP
2043: POP
// end ;
2044: LD_VAR 0 1
2048: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
2049: LD_INT 0
2051: PPUSH
2052: PPUSH
2053: PPUSH
2054: PPUSH
2055: PPUSH
// result := false ;
2056: LD_ADDR_VAR 0 4
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// if not sideList or not enemySide then
2064: LD_VAR 0 1
2068: NOT
2069: PUSH
2070: LD_VAR 0 2
2074: NOT
2075: OR
2076: IFFALSE 2080
// exit ;
2078: GO 2225
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
2080: LD_ADDR_VAR 0 7
2084: PUSH
2085: LD_INT 22
2087: PUSH
2088: LD_VAR 0 2
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: PPUSH
2097: CALL_OW 69
2101: ST_TO_ADDR
// if not tmp then
2102: LD_VAR 0 7
2106: NOT
2107: IFFALSE 2111
// exit ;
2109: GO 2225
// for s in sideList do
2111: LD_ADDR_VAR 0 6
2115: PUSH
2116: LD_VAR 0 1
2120: PUSH
2121: FOR_IN
2122: IFFALSE 2223
// for i in tmp do
2124: LD_ADDR_VAR 0 5
2128: PUSH
2129: LD_VAR 0 7
2133: PUSH
2134: FOR_IN
2135: IFFALSE 2219
// if See ( s , i ) then
2137: LD_VAR 0 6
2141: PPUSH
2142: LD_VAR 0 5
2146: PPUSH
2147: CALL_OW 292
2151: IFFALSE 2217
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
2153: LD_ADDR_VAR 0 8
2157: PUSH
2158: LD_INT 22
2160: PUSH
2161: LD_VAR 0 6
2165: PUSH
2166: EMPTY
2167: LIST
2168: LIST
2169: PPUSH
2170: CALL_OW 69
2174: PPUSH
2175: LD_VAR 0 5
2179: PPUSH
2180: CALL_OW 74
2184: ST_TO_ADDR
// if tmp2 in exceptUnits then
2185: LD_VAR 0 8
2189: PUSH
2190: LD_VAR 0 3
2194: IN
2195: IFFALSE 2201
// continue else
2197: GO 2134
2199: GO 2217
// begin result := tmp2 ;
2201: LD_ADDR_VAR 0 4
2205: PUSH
2206: LD_VAR 0 8
2210: ST_TO_ADDR
// exit ;
2211: POP
2212: POP
2213: POP
2214: POP
2215: GO 2225
// end ; end ;
2217: GO 2134
2219: POP
2220: POP
2221: GO 2121
2223: POP
2224: POP
// end ; end_of_file
2225: LD_VAR 0 4
2229: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
2230: LD_INT 0
2232: PPUSH
2233: PPUSH
// uc_side := 5 ;
2234: LD_ADDR_OWVAR 20
2238: PUSH
2239: LD_INT 5
2241: ST_TO_ADDR
// uc_nation := 2 ;
2242: LD_ADDR_OWVAR 21
2246: PUSH
2247: LD_INT 2
2249: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2250: LD_ADDR_EXP 36
2254: PUSH
2255: LD_STRING Abdul
2257: PPUSH
2258: LD_INT 0
2260: PPUSH
2261: LD_STRING 
2263: PPUSH
2264: CALL 366 0 3
2268: ST_TO_ADDR
// uc_side := 2 ;
2269: LD_ADDR_OWVAR 20
2273: PUSH
2274: LD_INT 2
2276: ST_TO_ADDR
// uc_nation := 2 ;
2277: LD_ADDR_OWVAR 21
2281: PUSH
2282: LD_INT 2
2284: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
2285: LD_ADDR_EXP 25
2289: PUSH
2290: LD_STRING Heike
2292: PPUSH
2293: LD_EXP 1
2297: NOT
2298: PPUSH
2299: LD_EXP 2
2303: PPUSH
2304: CALL 366 0 3
2308: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
2309: LD_ADDR_EXP 28
2313: PUSH
2314: LD_STRING Ibrahim
2316: PPUSH
2317: LD_EXP 1
2321: NOT
2322: PPUSH
2323: LD_EXP 2
2327: PPUSH
2328: CALL 366 0 3
2332: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
2333: LD_ADDR_EXP 26
2337: PUSH
2338: LD_STRING Givi
2340: PPUSH
2341: LD_EXP 1
2345: NOT
2346: PPUSH
2347: LD_EXP 2
2351: PPUSH
2352: CALL 366 0 3
2356: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
2357: LD_ADDR_EXP 29
2361: PUSH
2362: LD_STRING Kamil
2364: PPUSH
2365: LD_EXP 1
2369: NOT
2370: PPUSH
2371: LD_EXP 2
2375: PPUSH
2376: CALL 366 0 3
2380: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
2381: LD_ADDR_EXP 30
2385: PUSH
2386: LD_STRING Kaia
2388: PPUSH
2389: LD_EXP 1
2393: NOT
2394: PPUSH
2395: LD_EXP 2
2399: PPUSH
2400: CALL 366 0 3
2404: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
2405: LD_ADDR_EXP 31
2409: PUSH
2410: LD_STRING Sophia
2412: PPUSH
2413: LD_EXP 1
2417: NOT
2418: PPUSH
2419: LD_EXP 2
2423: PPUSH
2424: CALL 366 0 3
2428: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2429: LD_ADDR_EXP 32
2433: PUSH
2434: LD_STRING Markov
2436: PPUSH
2437: LD_EXP 1
2441: NOT
2442: PPUSH
2443: LD_EXP 2
2447: PPUSH
2448: CALL 366 0 3
2452: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2453: LD_ADDR_EXP 35
2457: PUSH
2458: LD_STRING Aviradze
2460: PPUSH
2461: LD_EXP 1
2465: NOT
2466: PPUSH
2467: LD_EXP 2
2471: PPUSH
2472: CALL 366 0 3
2476: ST_TO_ADDR
// aviradzeSquad := [ ] ;
2477: LD_ADDR_EXP 39
2481: PUSH
2482: EMPTY
2483: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
2484: LD_ADDR_EXP 37
2488: PUSH
2489: LD_STRING 03_others
2491: PPUSH
2492: CALL_OW 31
2496: ST_TO_ADDR
// uc_side := 5 ;
2497: LD_ADDR_OWVAR 20
2501: PUSH
2502: LD_INT 5
2504: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
2505: LD_ADDR_EXP 34
2509: PUSH
2510: LD_STRING Kurt
2512: PPUSH
2513: LD_INT 0
2515: PPUSH
2516: LD_STRING 
2518: PPUSH
2519: CALL 366 0 3
2523: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2524: LD_ADDR_EXP 27
2528: PUSH
2529: LD_STRING Mike
2531: PPUSH
2532: LD_EXP 1
2536: NOT
2537: PPUSH
2538: LD_EXP 2
2542: PPUSH
2543: CALL 366 0 3
2547: ST_TO_ADDR
// if Mike then
2548: LD_EXP 27
2552: IFFALSE 2575
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
2554: LD_EXP 27
2558: PPUSH
2559: LD_INT 142
2561: PPUSH
2562: LD_INT 63
2564: PPUSH
2565: LD_INT 2
2567: PPUSH
2568: LD_INT 0
2570: PPUSH
2571: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
2575: LD_EXP 34
2579: PPUSH
2580: LD_INT 142
2582: PPUSH
2583: LD_INT 63
2585: PPUSH
2586: LD_INT 3
2588: PPUSH
2589: LD_INT 0
2591: PPUSH
2592: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
2596: LD_EXP 34
2600: PUSH
2601: LD_EXP 27
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PPUSH
2610: CALL_OW 140
// end ;
2614: LD_VAR 0 1
2618: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
2619: LD_INT 0
2621: PPUSH
2622: PPUSH
2623: PPUSH
2624: PPUSH
// uc_side := 5 ;
2625: LD_ADDR_OWVAR 20
2629: PUSH
2630: LD_INT 5
2632: ST_TO_ADDR
// uc_nation := 2 ;
2633: LD_ADDR_OWVAR 21
2637: PUSH
2638: LD_INT 2
2640: ST_TO_ADDR
// InitHc ;
2641: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
2645: LD_ADDR_EXP 33
2649: PUSH
2650: LD_STRING Omar
2652: PPUSH
2653: LD_INT 0
2655: PPUSH
2656: LD_STRING 
2658: PPUSH
2659: CALL 366 0 3
2663: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
2664: LD_EXP 33
2668: PPUSH
2669: LD_INT 284
2671: PPUSH
2672: LD_INT 163
2674: PPUSH
2675: LD_INT 0
2677: PPUSH
2678: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
2682: LD_EXP 33
2686: PPUSH
2687: LD_INT 256
2689: PPUSH
2690: LD_INT 129
2692: PPUSH
2693: CALL_OW 111
// wait ( 0 0$2 ) ;
2697: LD_INT 70
2699: PPUSH
2700: CALL_OW 67
// omarSquad := [ ] ;
2704: LD_ADDR_EXP 38
2708: PUSH
2709: EMPTY
2710: ST_TO_ADDR
// for i := 1 to 5 do
2711: LD_ADDR_VAR 0 2
2715: PUSH
2716: DOUBLE
2717: LD_INT 1
2719: DEC
2720: ST_TO_ADDR
2721: LD_INT 5
2723: PUSH
2724: FOR_TO
2725: IFFALSE 2931
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
2727: LD_INT 5
2729: PPUSH
2730: LD_INT 2
2732: PPUSH
2733: LD_INT 13
2735: PUSH
2736: LD_INT 14
2738: PUSH
2739: EMPTY
2740: LIST
2741: LIST
2742: PUSH
2743: LD_VAR 0 2
2747: PUSH
2748: LD_INT 2
2750: MOD
2751: PUSH
2752: LD_INT 1
2754: PLUS
2755: ARRAY
2756: PPUSH
2757: LD_INT 1
2759: PPUSH
2760: LD_INT 1
2762: PPUSH
2763: LD_INT 25
2765: PUSH
2766: LD_INT 27
2768: PUSH
2769: LD_INT 26
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: LIST
2776: PUSH
2777: LD_VAR 0 2
2781: PUSH
2782: LD_INT 3
2784: MOD
2785: PUSH
2786: LD_INT 1
2788: PLUS
2789: ARRAY
2790: PPUSH
2791: LD_INT 100
2793: PPUSH
2794: CALL 429 0 7
// veh := CreateVehicle ;
2798: LD_ADDR_VAR 0 4
2802: PUSH
2803: CALL_OW 45
2807: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2808: LD_VAR 0 4
2812: PPUSH
2813: LD_INT 5
2815: PPUSH
2816: CALL_OW 233
// omarSquad := omarSquad union veh ;
2820: LD_ADDR_EXP 38
2824: PUSH
2825: LD_EXP 38
2829: PUSH
2830: LD_VAR 0 4
2834: UNION
2835: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
2836: LD_VAR 0 4
2840: PPUSH
2841: LD_INT 284
2843: PPUSH
2844: LD_INT 163
2846: PPUSH
2847: LD_INT 0
2849: PPUSH
2850: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
2854: LD_INT 0
2856: PPUSH
2857: LD_INT 3
2859: PPUSH
2860: LD_INT 2
2862: PPUSH
2863: CALL_OW 380
// un := CreateHuman ;
2867: LD_ADDR_VAR 0 3
2871: PUSH
2872: CALL_OW 44
2876: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2877: LD_ADDR_EXP 38
2881: PUSH
2882: LD_EXP 38
2886: PUSH
2887: LD_VAR 0 3
2891: UNION
2892: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2893: LD_VAR 0 3
2897: PPUSH
2898: LD_VAR 0 4
2902: PPUSH
2903: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
2907: LD_VAR 0 3
2911: PPUSH
2912: LD_INT 271
2914: PPUSH
2915: LD_INT 144
2917: PPUSH
2918: CALL_OW 111
// wait ( 0 0$2 ) ;
2922: LD_INT 70
2924: PPUSH
2925: CALL_OW 67
// end ;
2929: GO 2724
2931: POP
2932: POP
// for i := 1 to 3 do
2933: LD_ADDR_VAR 0 2
2937: PUSH
2938: DOUBLE
2939: LD_INT 1
2941: DEC
2942: ST_TO_ADDR
2943: LD_INT 3
2945: PUSH
2946: FOR_TO
2947: IFFALSE 3030
// begin PrepareHuman ( false , 1 , 2 ) ;
2949: LD_INT 0
2951: PPUSH
2952: LD_INT 1
2954: PPUSH
2955: LD_INT 2
2957: PPUSH
2958: CALL_OW 380
// un := CreateHuman ;
2962: LD_ADDR_VAR 0 3
2966: PUSH
2967: CALL_OW 44
2971: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2972: LD_ADDR_EXP 38
2976: PUSH
2977: LD_EXP 38
2981: PUSH
2982: LD_VAR 0 3
2986: UNION
2987: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
2988: LD_VAR 0 3
2992: PPUSH
2993: LD_INT 284
2995: PPUSH
2996: LD_INT 163
2998: PPUSH
2999: LD_INT 0
3001: PPUSH
3002: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
3006: LD_VAR 0 3
3010: PPUSH
3011: LD_INT 257
3013: PPUSH
3014: LD_INT 138
3016: PPUSH
3017: CALL_OW 111
// wait ( 0 0$1 ) ;
3021: LD_INT 35
3023: PPUSH
3024: CALL_OW 67
// end ;
3028: GO 2946
3030: POP
3031: POP
// for i := 1 to 6 do
3032: LD_ADDR_VAR 0 2
3036: PUSH
3037: DOUBLE
3038: LD_INT 1
3040: DEC
3041: ST_TO_ADDR
3042: LD_INT 6
3044: PUSH
3045: FOR_TO
3046: IFFALSE 3179
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
3048: LD_INT 0
3050: PPUSH
3051: LD_INT 1
3053: PUSH
3054: LD_INT 1
3056: PUSH
3057: LD_INT 4
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: LIST
3064: PUSH
3065: LD_VAR 0 2
3069: PUSH
3070: LD_INT 3
3072: MOD
3073: PUSH
3074: LD_INT 1
3076: PLUS
3077: ARRAY
3078: PPUSH
3079: LD_INT 3
3081: PPUSH
3082: CALL_OW 380
// un := CreateHuman ;
3086: LD_ADDR_VAR 0 3
3090: PUSH
3091: CALL_OW 44
3095: ST_TO_ADDR
// omarSquad := omarSquad union un ;
3096: LD_ADDR_EXP 38
3100: PUSH
3101: LD_EXP 38
3105: PUSH
3106: LD_VAR 0 3
3110: UNION
3111: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
3112: LD_VAR 0 3
3116: PPUSH
3117: LD_INT 225
3119: PPUSH
3120: LD_INT 163
3122: PPUSH
3123: LD_INT 0
3125: PPUSH
3126: CALL_OW 48
// if i = 1 then
3130: LD_VAR 0 2
3134: PUSH
3135: LD_INT 1
3137: EQUAL
3138: IFFALSE 3155
// SetAttr ( un , attr_speed , 12 ) ;
3140: LD_VAR 0 3
3144: PPUSH
3145: LD_INT 2
3147: PPUSH
3148: LD_INT 12
3150: PPUSH
3151: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
3155: LD_VAR 0 3
3159: PPUSH
3160: LD_INT 222
3162: PPUSH
3163: LD_INT 157
3165: PPUSH
3166: CALL_OW 111
// wait ( 0 0$1 ) ;
3170: LD_INT 35
3172: PPUSH
3173: CALL_OW 67
// end ;
3177: GO 3045
3179: POP
3180: POP
// end ; end_of_file
3181: LD_VAR 0 1
3185: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
3186: LD_INT 0
3188: PPUSH
3189: PPUSH
3190: PPUSH
3191: PPUSH
3192: PPUSH
3193: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
3194: LD_INT 3
3196: PPUSH
3197: LD_INT 149
3199: PPUSH
3200: LD_INT 67
3202: PPUSH
3203: CALL_OW 428
3207: PPUSH
3208: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
3212: LD_ADDR_EXP 50
3216: PUSH
3217: LD_INT 111
3219: PPUSH
3220: LD_INT 89
3222: PPUSH
3223: CALL_OW 428
3227: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
3228: LD_ADDR_VAR 0 2
3232: PUSH
3233: LD_INT 21
3235: PUSH
3236: LD_INT 3
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: LD_INT 23
3245: PUSH
3246: LD_INT 3
3248: PUSH
3249: EMPTY
3250: LIST
3251: LIST
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: PPUSH
3257: CALL_OW 69
3261: PUSH
3262: FOR_IN
3263: IFFALSE 3279
// SetBLevel ( i , 5 ) ;
3265: LD_VAR 0 2
3269: PPUSH
3270: LD_INT 5
3272: PPUSH
3273: CALL_OW 241
3277: GO 3262
3279: POP
3280: POP
// SetBName ( kirov , kirov ) ;
3281: LD_INT 71
3283: PPUSH
3284: LD_STRING kirov
3286: PPUSH
3287: CALL_OW 500
// SetBName ( beria , beria ) ;
3291: LD_INT 106
3293: PPUSH
3294: LD_STRING beria
3296: PPUSH
3297: CALL_OW 500
// SetBName ( kagan , kagan ) ;
3301: LD_INT 112
3303: PPUSH
3304: LD_STRING kagan
3306: PPUSH
3307: CALL_OW 500
// uc_side := 6 ;
3311: LD_ADDR_OWVAR 20
3315: PUSH
3316: LD_INT 6
3318: ST_TO_ADDR
// uc_nation := 3 ;
3319: LD_ADDR_OWVAR 21
3323: PUSH
3324: LD_INT 3
3326: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
3327: LD_ADDR_VAR 0 5
3331: PUSH
3332: LD_INT 22
3334: PUSH
3335: LD_INT 6
3337: PUSH
3338: EMPTY
3339: LIST
3340: LIST
3341: PUSH
3342: LD_INT 30
3344: PUSH
3345: LD_INT 5
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PPUSH
3356: CALL_OW 69
3360: PUSH
3361: LD_INT 1
3363: ARRAY
3364: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
3365: LD_ADDR_VAR 0 4
3369: PUSH
3370: LD_INT 22
3372: PUSH
3373: LD_INT 6
3375: PUSH
3376: EMPTY
3377: LIST
3378: LIST
3379: PUSH
3380: LD_INT 30
3382: PUSH
3383: LD_INT 4
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: PUSH
3390: EMPTY
3391: LIST
3392: LIST
3393: PPUSH
3394: CALL_OW 69
3398: PUSH
3399: LD_INT 1
3401: ARRAY
3402: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
3403: LD_ADDR_EXP 44
3407: PUSH
3408: EMPTY
3409: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
3410: LD_ADDR_EXP 45
3414: PUSH
3415: EMPTY
3416: ST_TO_ADDR
// russianPatrol := [ ] ;
3417: LD_ADDR_EXP 47
3421: PUSH
3422: EMPTY
3423: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
3424: LD_ADDR_EXP 40
3428: PUSH
3429: LD_STRING Kurin
3431: PPUSH
3432: LD_INT 0
3434: PPUSH
3435: LD_STRING 
3437: PPUSH
3438: CALL 366 0 3
3442: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
3443: LD_EXP 40
3447: PPUSH
3448: LD_INT 71
3450: PPUSH
3451: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
3455: LD_ADDR_EXP 42
3459: PUSH
3460: LD_STRING Popov
3462: PPUSH
3463: LD_INT 0
3465: PPUSH
3466: LD_STRING 
3468: PPUSH
3469: CALL 366 0 3
3473: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
3474: LD_EXP 42
3478: PPUSH
3479: LD_INT 71
3481: PPUSH
3482: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
3486: LD_ADDR_EXP 41
3490: PUSH
3491: LD_STRING Grishko
3493: PPUSH
3494: LD_INT 0
3496: PPUSH
3497: LD_STRING 
3499: PPUSH
3500: CALL 366 0 3
3504: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
3505: LD_EXP 41
3509: PPUSH
3510: LD_INT 207
3512: PPUSH
3513: LD_INT 106
3515: PPUSH
3516: LD_INT 0
3518: PPUSH
3519: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
3523: LD_EXP 41
3527: PPUSH
3528: LD_INT 209
3530: PPUSH
3531: LD_INT 106
3533: PPUSH
3534: CALL_OW 118
// for i := 1 to 2 do
3538: LD_ADDR_VAR 0 2
3542: PUSH
3543: DOUBLE
3544: LD_INT 1
3546: DEC
3547: ST_TO_ADDR
3548: LD_INT 2
3550: PUSH
3551: FOR_TO
3552: IFFALSE 3607
// begin PrepareHuman ( false , 2 , 2 ) ;
3554: LD_INT 0
3556: PPUSH
3557: LD_INT 2
3559: PPUSH
3560: LD_INT 2
3562: PPUSH
3563: CALL_OW 380
// un := CreateHuman ;
3567: LD_ADDR_VAR 0 3
3571: PUSH
3572: CALL_OW 44
3576: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
3577: LD_VAR 0 3
3581: PPUSH
3582: LD_INT 71
3584: PPUSH
3585: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3589: LD_ADDR_EXP 44
3593: PUSH
3594: LD_EXP 44
3598: PUSH
3599: LD_VAR 0 3
3603: UNION
3604: ST_TO_ADDR
// end ;
3605: GO 3551
3607: POP
3608: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
3609: LD_ADDR_VAR 0 2
3613: PUSH
3614: DOUBLE
3615: LD_INT 1
3617: DEC
3618: ST_TO_ADDR
3619: LD_INT 5
3621: PUSH
3622: LD_INT 6
3624: PUSH
3625: LD_INT 6
3627: PUSH
3628: EMPTY
3629: LIST
3630: LIST
3631: LIST
3632: PUSH
3633: LD_OWVAR 67
3637: ARRAY
3638: PUSH
3639: FOR_TO
3640: IFFALSE 3714
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3642: LD_INT 0
3644: PPUSH
3645: LD_INT 1
3647: PPUSH
3648: LD_INT 2
3650: PUSH
3651: LD_INT 3
3653: PUSH
3654: LD_INT 4
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: LIST
3661: PUSH
3662: LD_OWVAR 67
3666: ARRAY
3667: PPUSH
3668: CALL_OW 380
// un := CreateHuman ;
3672: LD_ADDR_VAR 0 3
3676: PUSH
3677: CALL_OW 44
3681: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
3682: LD_VAR 0 3
3686: PPUSH
3687: LD_VAR 0 5
3691: PPUSH
3692: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3696: LD_ADDR_EXP 44
3700: PUSH
3701: LD_EXP 44
3705: PUSH
3706: LD_VAR 0 3
3710: UNION
3711: ST_TO_ADDR
// end ;
3712: GO 3639
3714: POP
3715: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
3716: LD_ADDR_VAR 0 2
3720: PUSH
3721: LD_INT 22
3723: PUSH
3724: LD_INT 6
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: LD_INT 30
3733: PUSH
3734: LD_INT 32
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: PUSH
3741: EMPTY
3742: LIST
3743: LIST
3744: PPUSH
3745: CALL_OW 69
3749: PUSH
3750: FOR_IN
3751: IFFALSE 3825
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 ] [ Difficulty ] ) ;
3753: LD_INT 0
3755: PPUSH
3756: LD_INT 1
3758: PPUSH
3759: LD_INT 3
3761: PUSH
3762: LD_INT 4
3764: PUSH
3765: LD_INT 4
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: LIST
3772: PUSH
3773: LD_OWVAR 67
3777: ARRAY
3778: PPUSH
3779: CALL_OW 380
// un := CreateHuman ;
3783: LD_ADDR_VAR 0 3
3787: PUSH
3788: CALL_OW 44
3792: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
3793: LD_VAR 0 3
3797: PPUSH
3798: LD_VAR 0 2
3802: PPUSH
3803: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3807: LD_ADDR_EXP 44
3811: PUSH
3812: LD_EXP 44
3816: PUSH
3817: LD_VAR 0 3
3821: UNION
3822: ST_TO_ADDR
// end ;
3823: GO 3750
3825: POP
3826: POP
// for i := 1 to 3 do
3827: LD_ADDR_VAR 0 2
3831: PUSH
3832: DOUBLE
3833: LD_INT 1
3835: DEC
3836: ST_TO_ADDR
3837: LD_INT 3
3839: PUSH
3840: FOR_TO
3841: IFFALSE 3896
// begin PrepareHuman ( false , 3 , 3 ) ;
3843: LD_INT 0
3845: PPUSH
3846: LD_INT 3
3848: PPUSH
3849: LD_INT 3
3851: PPUSH
3852: CALL_OW 380
// un := CreateHuman ;
3856: LD_ADDR_VAR 0 3
3860: PUSH
3861: CALL_OW 44
3865: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
3866: LD_VAR 0 3
3870: PPUSH
3871: LD_INT 92
3873: PPUSH
3874: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3878: LD_ADDR_EXP 44
3882: PUSH
3883: LD_EXP 44
3887: PUSH
3888: LD_VAR 0 3
3892: UNION
3893: ST_TO_ADDR
// end ;
3894: GO 3840
3896: POP
3897: POP
// for i := 1 to 2 do
3898: LD_ADDR_VAR 0 2
3902: PUSH
3903: DOUBLE
3904: LD_INT 1
3906: DEC
3907: ST_TO_ADDR
3908: LD_INT 2
3910: PUSH
3911: FOR_TO
3912: IFFALSE 3967
// begin PrepareHuman ( false , 4 , 3 ) ;
3914: LD_INT 0
3916: PPUSH
3917: LD_INT 4
3919: PPUSH
3920: LD_INT 3
3922: PPUSH
3923: CALL_OW 380
// un := CreateHuman ;
3927: LD_ADDR_VAR 0 3
3931: PUSH
3932: CALL_OW 44
3936: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
3937: LD_VAR 0 3
3941: PPUSH
3942: LD_INT 83
3944: PPUSH
3945: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3949: LD_ADDR_EXP 44
3953: PUSH
3954: LD_EXP 44
3958: PUSH
3959: LD_VAR 0 3
3963: UNION
3964: ST_TO_ADDR
// end ;
3965: GO 3911
3967: POP
3968: POP
// for i := 1 to 5 do
3969: LD_ADDR_VAR 0 2
3973: PUSH
3974: DOUBLE
3975: LD_INT 1
3977: DEC
3978: ST_TO_ADDR
3979: LD_INT 5
3981: PUSH
3982: FOR_TO
3983: IFFALSE 4040
// begin PrepareHuman ( false , 1 , 3 ) ;
3985: LD_INT 0
3987: PPUSH
3988: LD_INT 1
3990: PPUSH
3991: LD_INT 3
3993: PPUSH
3994: CALL_OW 380
// un := CreateHuman ;
3998: LD_ADDR_VAR 0 3
4002: PUSH
4003: CALL_OW 44
4007: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
4008: LD_VAR 0 3
4012: PPUSH
4013: LD_VAR 0 4
4017: PPUSH
4018: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
4022: LD_ADDR_EXP 46
4026: PUSH
4027: LD_EXP 46
4031: PUSH
4032: LD_VAR 0 3
4036: UNION
4037: ST_TO_ADDR
// end ;
4038: GO 3982
4040: POP
4041: POP
// russianCargo := [ ] ;
4042: LD_ADDR_EXP 49
4046: PUSH
4047: EMPTY
4048: ST_TO_ADDR
// for i := 1 to 2 do
4049: LD_ADDR_VAR 0 2
4053: PUSH
4054: DOUBLE
4055: LD_INT 1
4057: DEC
4058: ST_TO_ADDR
4059: LD_INT 2
4061: PUSH
4062: FOR_TO
4063: IFFALSE 4195
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
4065: LD_INT 6
4067: PPUSH
4068: LD_INT 3
4070: PPUSH
4071: LD_INT 21
4073: PPUSH
4074: LD_INT 1
4076: PPUSH
4077: LD_INT 1
4079: PPUSH
4080: LD_INT 51
4082: PPUSH
4083: LD_INT 100
4085: PPUSH
4086: CALL 429 0 7
// un := CreateVehicle ;
4090: LD_ADDR_VAR 0 3
4094: PUSH
4095: CALL_OW 45
4099: ST_TO_ADDR
// russianCargo := russianCargo union un ;
4100: LD_ADDR_EXP 49
4104: PUSH
4105: LD_EXP 49
4109: PUSH
4110: LD_VAR 0 3
4114: UNION
4115: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
4116: LD_VAR 0 3
4120: PPUSH
4121: LD_INT 2
4123: PPUSH
4124: LD_INT 100
4126: PPUSH
4127: CALL_OW 290
// SetDir ( un , 4 ) ;
4131: LD_VAR 0 3
4135: PPUSH
4136: LD_INT 4
4138: PPUSH
4139: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
4143: LD_VAR 0 3
4147: PPUSH
4148: LD_INT 147
4150: PPUSH
4151: LD_INT 103
4153: PPUSH
4154: LD_INT 4
4156: PPUSH
4157: LD_INT 0
4159: PPUSH
4160: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
4164: LD_INT 0
4166: PPUSH
4167: LD_INT 1
4169: PPUSH
4170: LD_OWVAR 67
4174: PPUSH
4175: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
4179: CALL_OW 44
4183: PPUSH
4184: LD_VAR 0 3
4188: PPUSH
4189: CALL_OW 52
// end ;
4193: GO 4062
4195: POP
4196: POP
// uc_side := 3 ;
4197: LD_ADDR_OWVAR 20
4201: PUSH
4202: LD_INT 3
4204: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
4205: LD_ADDR_EXP 43
4209: PUSH
4210: LD_STRING Burlak
4212: PPUSH
4213: LD_INT 0
4215: PPUSH
4216: LD_STRING 
4218: PPUSH
4219: CALL 366 0 3
4223: ST_TO_ADDR
// for i := 1 to 5 do
4224: LD_ADDR_VAR 0 2
4228: PUSH
4229: DOUBLE
4230: LD_INT 1
4232: DEC
4233: ST_TO_ADDR
4234: LD_INT 5
4236: PUSH
4237: FOR_TO
4238: IFFALSE 4331
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
4240: LD_INT 0
4242: PPUSH
4243: LD_INT 1
4245: PPUSH
4246: LD_OWVAR 67
4250: PUSH
4251: LD_INT 1
4253: PLUS
4254: PPUSH
4255: CALL_OW 380
// un := CreateHuman ;
4259: LD_ADDR_VAR 0 3
4263: PUSH
4264: CALL_OW 44
4268: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
4269: LD_VAR 0 3
4273: PPUSH
4274: LD_INT 22
4276: PUSH
4277: LD_INT 3
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: LD_INT 30
4286: PUSH
4287: LD_INT 32
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: PPUSH
4298: CALL_OW 69
4302: PUSH
4303: LD_VAR 0 2
4307: ARRAY
4308: PPUSH
4309: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4313: LD_ADDR_EXP 45
4317: PUSH
4318: LD_EXP 45
4322: PUSH
4323: LD_VAR 0 3
4327: UNION
4328: ST_TO_ADDR
// end ;
4329: GO 4237
4331: POP
4332: POP
// for i := 1 to 2 do
4333: LD_ADDR_VAR 0 2
4337: PUSH
4338: DOUBLE
4339: LD_INT 1
4341: DEC
4342: ST_TO_ADDR
4343: LD_INT 2
4345: PUSH
4346: FOR_TO
4347: IFFALSE 4438
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
4349: LD_INT 0
4351: PPUSH
4352: LD_INT 1
4354: PPUSH
4355: LD_OWVAR 67
4359: PUSH
4360: LD_INT 1
4362: PLUS
4363: PPUSH
4364: CALL_OW 380
// un := CreateHuman ;
4368: LD_ADDR_VAR 0 3
4372: PUSH
4373: CALL_OW 44
4377: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
4378: LD_VAR 0 3
4382: PPUSH
4383: LD_INT 22
4385: PUSH
4386: LD_INT 3
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: PUSH
4393: LD_INT 30
4395: PUSH
4396: LD_INT 5
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: PPUSH
4407: CALL_OW 69
4411: PUSH
4412: LD_INT 1
4414: ARRAY
4415: PPUSH
4416: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4420: LD_ADDR_EXP 45
4424: PUSH
4425: LD_EXP 45
4429: PUSH
4430: LD_VAR 0 3
4434: UNION
4435: ST_TO_ADDR
// end ;
4436: GO 4346
4438: POP
4439: POP
// for i := 1 to 2 do
4440: LD_ADDR_VAR 0 2
4444: PUSH
4445: DOUBLE
4446: LD_INT 1
4448: DEC
4449: ST_TO_ADDR
4450: LD_INT 2
4452: PUSH
4453: FOR_TO
4454: IFFALSE 4541
// begin PrepareHuman ( false , 4 , Difficulty ) ;
4456: LD_INT 0
4458: PPUSH
4459: LD_INT 4
4461: PPUSH
4462: LD_OWVAR 67
4466: PPUSH
4467: CALL_OW 380
// un := CreateHuman ;
4471: LD_ADDR_VAR 0 3
4475: PUSH
4476: CALL_OW 44
4480: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
4481: LD_VAR 0 3
4485: PPUSH
4486: LD_INT 22
4488: PUSH
4489: LD_INT 3
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 30
4498: PUSH
4499: LD_INT 7
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: PPUSH
4510: CALL_OW 69
4514: PUSH
4515: LD_INT 1
4517: ARRAY
4518: PPUSH
4519: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4523: LD_ADDR_EXP 45
4527: PUSH
4528: LD_EXP 45
4532: PUSH
4533: LD_VAR 0 3
4537: UNION
4538: ST_TO_ADDR
// end ;
4539: GO 4453
4541: POP
4542: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
4543: LD_INT 0
4545: PPUSH
4546: LD_INT 2
4548: PPUSH
4549: LD_OWVAR 67
4553: PPUSH
4554: CALL_OW 380
// un := CreateHuman ;
4558: LD_ADDR_VAR 0 3
4562: PUSH
4563: CALL_OW 44
4567: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
4568: LD_VAR 0 3
4572: PPUSH
4573: LD_INT 106
4575: PPUSH
4576: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4580: LD_ADDR_EXP 45
4584: PUSH
4585: LD_EXP 45
4589: PUSH
4590: LD_VAR 0 3
4594: UNION
4595: ST_TO_ADDR
// for i := 1 to 3 do
4596: LD_ADDR_VAR 0 2
4600: PUSH
4601: DOUBLE
4602: LD_INT 1
4604: DEC
4605: ST_TO_ADDR
4606: LD_INT 3
4608: PUSH
4609: FOR_TO
4610: IFFALSE 4732
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
4612: LD_ADDR_VAR 0 6
4616: PUSH
4617: LD_INT 22
4619: PUSH
4620: LD_INT 3
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: PUSH
4627: LD_INT 30
4629: PUSH
4630: LD_INT 31
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: PPUSH
4641: CALL_OW 69
4645: PUSH
4646: LD_VAR 0 2
4650: ARRAY
4651: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
4652: LD_INT 0
4654: PPUSH
4655: LD_INT 1
4657: PPUSH
4658: LD_OWVAR 67
4662: PPUSH
4663: CALL_OW 380
// un := CreateHuman ;
4667: LD_ADDR_VAR 0 3
4671: PUSH
4672: CALL_OW 44
4676: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
4677: LD_VAR 0 3
4681: PPUSH
4682: LD_VAR 0 6
4686: PPUSH
4687: CALL_OW 254
4691: PUSH
4692: LD_INT 3
4694: PLUS
4695: PPUSH
4696: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
4700: LD_VAR 0 3
4704: PPUSH
4705: LD_VAR 0 6
4709: PPUSH
4710: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4714: LD_ADDR_EXP 45
4718: PUSH
4719: LD_EXP 45
4723: PUSH
4724: LD_VAR 0 3
4728: UNION
4729: ST_TO_ADDR
// end ;
4730: GO 4609
4732: POP
4733: POP
// if Difficulty > 1 then
4734: LD_OWVAR 67
4738: PUSH
4739: LD_INT 1
4741: GREATER
4742: IFFALSE 4817
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
4744: LD_ADDR_VAR 0 3
4748: PUSH
4749: LD_INT 3
4751: PPUSH
4752: LD_INT 3
4754: PPUSH
4755: LD_INT 23
4757: PPUSH
4758: LD_INT 1
4760: PPUSH
4761: LD_INT 1
4763: PPUSH
4764: LD_INT 44
4766: PPUSH
4767: LD_INT 100
4769: PPUSH
4770: CALL 429 0 7
4774: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
4775: LD_VAR 0 3
4779: PPUSH
4780: LD_INT 73
4782: PPUSH
4783: LD_INT 110
4785: PPUSH
4786: LD_INT 0
4788: PPUSH
4789: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
4793: LD_INT 0
4795: PPUSH
4796: LD_INT 3
4798: PPUSH
4799: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
4803: CALL_OW 44
4807: PPUSH
4808: LD_VAR 0 3
4812: PPUSH
4813: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
4817: LD_ADDR_EXP 48
4821: PUSH
4822: EMPTY
4823: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 ] [ Difficulty ] do
4824: LD_ADDR_VAR 0 2
4828: PUSH
4829: DOUBLE
4830: LD_INT 1
4832: DEC
4833: ST_TO_ADDR
4834: LD_INT 6
4836: PUSH
4837: LD_INT 7
4839: PUSH
4840: LD_INT 8
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: LIST
4847: PUSH
4848: LD_OWVAR 67
4852: ARRAY
4853: PUSH
4854: FOR_TO
4855: IFFALSE 5079
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
4857: LD_INT 3
4859: PPUSH
4860: LD_INT 3
4862: PPUSH
4863: LD_INT 21
4865: PUSH
4866: LD_INT 23
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PUSH
4873: LD_VAR 0 2
4877: PUSH
4878: LD_INT 2
4880: MOD
4881: PUSH
4882: LD_INT 1
4884: PLUS
4885: ARRAY
4886: PPUSH
4887: LD_INT 1
4889: PPUSH
4890: LD_INT 1
4892: PPUSH
4893: LD_INT 43
4895: PUSH
4896: LD_INT 44
4898: PUSH
4899: LD_INT 42
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: LIST
4906: PUSH
4907: LD_VAR 0 2
4911: PUSH
4912: LD_INT 3
4914: MOD
4915: PUSH
4916: LD_INT 1
4918: PLUS
4919: ARRAY
4920: PPUSH
4921: LD_INT 100
4923: PPUSH
4924: CALL 429 0 7
// un := CreateVehicle ;
4928: LD_ADDR_VAR 0 3
4932: PUSH
4933: CALL_OW 45
4937: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
4938: LD_VAR 0 3
4942: PPUSH
4943: LD_INT 0
4945: PUSH
4946: LD_INT 5
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: PUSH
4953: LD_INT 1
4955: PPUSH
4956: LD_INT 2
4958: PPUSH
4959: CALL_OW 12
4963: ARRAY
4964: PPUSH
4965: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
4969: LD_ADDR_EXP 48
4973: PUSH
4974: LD_EXP 48
4978: PUSH
4979: LD_VAR 0 3
4983: UNION
4984: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
4985: LD_VAR 0 3
4989: PPUSH
4990: LD_INT 127
4992: PPUSH
4993: LD_INT 89
4995: PPUSH
4996: LD_INT 7
4998: PPUSH
4999: LD_INT 0
5001: PPUSH
5002: CALL_OW 50
// uc_side := 3 ;
5006: LD_ADDR_OWVAR 20
5010: PUSH
5011: LD_INT 3
5013: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
5014: LD_INT 0
5016: PPUSH
5017: LD_INT 3
5019: PPUSH
5020: LD_INT 3
5022: PPUSH
5023: CALL_OW 380
// un := CreateHuman ;
5027: LD_ADDR_VAR 0 3
5031: PUSH
5032: CALL_OW 44
5036: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
5037: LD_ADDR_EXP 48
5041: PUSH
5042: LD_EXP 48
5046: PUSH
5047: LD_VAR 0 3
5051: UNION
5052: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
5053: LD_VAR 0 3
5057: PPUSH
5058: LD_EXP 48
5062: PUSH
5063: LD_EXP 48
5067: PUSH
5068: LD_INT 1
5070: MINUS
5071: ARRAY
5072: PPUSH
5073: CALL_OW 52
// end ;
5077: GO 4854
5079: POP
5080: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
5081: LD_ADDR_VAR 0 2
5085: PUSH
5086: DOUBLE
5087: LD_INT 1
5089: DEC
5090: ST_TO_ADDR
5091: LD_INT 3
5093: PUSH
5094: LD_INT 4
5096: PUSH
5097: LD_INT 5
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: LIST
5104: PUSH
5105: LD_OWVAR 67
5109: ARRAY
5110: PUSH
5111: FOR_TO
5112: IFFALSE 5178
// begin PrepareHuman ( false , 1 , Difficulty ) ;
5114: LD_INT 0
5116: PPUSH
5117: LD_INT 1
5119: PPUSH
5120: LD_OWVAR 67
5124: PPUSH
5125: CALL_OW 380
// un := CreateHuman ;
5129: LD_ADDR_VAR 0 3
5133: PUSH
5134: CALL_OW 44
5138: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
5139: LD_ADDR_EXP 48
5143: PUSH
5144: LD_EXP 48
5148: PUSH
5149: LD_VAR 0 3
5153: UNION
5154: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
5155: LD_VAR 0 3
5159: PPUSH
5160: LD_INT 91
5162: PPUSH
5163: LD_INT 60
5165: PPUSH
5166: LD_INT 3
5168: PPUSH
5169: LD_INT 0
5171: PPUSH
5172: CALL_OW 50
// end ;
5176: GO 5111
5178: POP
5179: POP
// end ;
5180: LD_VAR 0 1
5184: RET
// every 0 0$3 do var i ;
5185: GO 5187
5187: DISABLE
5188: LD_INT 0
5190: PPUSH
// begin for i := 1 to 4 do
5191: LD_ADDR_VAR 0 1
5195: PUSH
5196: DOUBLE
5197: LD_INT 1
5199: DEC
5200: ST_TO_ADDR
5201: LD_INT 4
5203: PUSH
5204: FOR_TO
5205: IFFALSE 5224
// ComExitBuilding ( grishkoSquad [ i ] ) ;
5207: LD_EXP 46
5211: PUSH
5212: LD_VAR 0 1
5216: ARRAY
5217: PPUSH
5218: CALL_OW 122
5222: GO 5204
5224: POP
5225: POP
// wait ( 3 ) ;
5226: LD_INT 3
5228: PPUSH
5229: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
5233: LD_EXP 46
5237: PUSH
5238: LD_INT 1
5240: ARRAY
5241: PPUSH
5242: LD_INT 22
5244: PUSH
5245: LD_INT 6
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: PUSH
5252: LD_INT 30
5254: PUSH
5255: LD_INT 31
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: PPUSH
5266: CALL_OW 69
5270: PPUSH
5271: LD_EXP 46
5275: PUSH
5276: LD_INT 1
5278: ARRAY
5279: PPUSH
5280: CALL_OW 74
5284: PPUSH
5285: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
5289: LD_EXP 46
5293: PUSH
5294: LD_INT 2
5296: ARRAY
5297: PPUSH
5298: LD_INT 211
5300: PPUSH
5301: LD_INT 107
5303: PPUSH
5304: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
5308: LD_EXP 46
5312: PUSH
5313: LD_INT 2
5315: ARRAY
5316: PPUSH
5317: LD_INT 209
5319: PPUSH
5320: LD_INT 106
5322: PPUSH
5323: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
5327: LD_EXP 46
5331: PUSH
5332: LD_INT 3
5334: ARRAY
5335: PPUSH
5336: LD_INT 209
5338: PPUSH
5339: LD_INT 103
5341: PPUSH
5342: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
5346: LD_EXP 46
5350: PUSH
5351: LD_INT 3
5353: ARRAY
5354: PPUSH
5355: LD_INT 209
5357: PPUSH
5358: LD_INT 106
5360: PPUSH
5361: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
5365: LD_EXP 46
5369: PUSH
5370: LD_INT 4
5372: ARRAY
5373: PPUSH
5374: LD_INT 227
5376: PPUSH
5377: LD_INT 117
5379: PPUSH
5380: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
5384: LD_EXP 46
5388: PUSH
5389: LD_INT 4
5391: ARRAY
5392: PPUSH
5393: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
5397: LD_INT 700
5399: PPUSH
5400: CALL_OW 67
// for i := 3 downto 2 do
5404: LD_ADDR_VAR 0 1
5408: PUSH
5409: DOUBLE
5410: LD_INT 3
5412: INC
5413: ST_TO_ADDR
5414: LD_INT 2
5416: PUSH
5417: FOR_DOWNTO
5418: IFFALSE 5585
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
5420: LD_EXP 46
5424: PUSH
5425: LD_VAR 0 1
5429: ARRAY
5430: PPUSH
5431: LD_INT 200
5433: PPUSH
5434: LD_INT 91
5436: PPUSH
5437: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5441: LD_EXP 46
5445: PUSH
5446: LD_VAR 0 1
5450: ARRAY
5451: PPUSH
5452: LD_INT 210
5454: PPUSH
5455: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
5459: LD_EXP 46
5463: PUSH
5464: LD_VAR 0 1
5468: ARRAY
5469: PPUSH
5470: LD_INT 224
5472: PPUSH
5473: LD_INT 93
5475: PPUSH
5476: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5480: LD_EXP 46
5484: PUSH
5485: LD_VAR 0 1
5489: ARRAY
5490: PPUSH
5491: LD_INT 210
5493: PPUSH
5494: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
5498: LD_EXP 46
5502: PUSH
5503: LD_VAR 0 1
5507: ARRAY
5508: PPUSH
5509: LD_INT 239
5511: PPUSH
5512: LD_INT 123
5514: PPUSH
5515: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5519: LD_EXP 46
5523: PUSH
5524: LD_VAR 0 1
5528: ARRAY
5529: PPUSH
5530: LD_INT 210
5532: PPUSH
5533: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
5537: LD_EXP 46
5541: PUSH
5542: LD_VAR 0 1
5546: ARRAY
5547: PPUSH
5548: LD_INT 212
5550: PPUSH
5551: LD_INT 105
5553: PPUSH
5554: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
5558: LD_EXP 46
5562: PUSH
5563: LD_VAR 0 1
5567: ARRAY
5568: PPUSH
5569: LD_INT 700
5571: PPUSH
5572: CALL_OW 202
// wait ( 0 0$30 ) ;
5576: LD_INT 1050
5578: PPUSH
5579: CALL_OW 67
// end ;
5583: GO 5417
5585: POP
5586: POP
// until not activeGrishkoAI ;
5587: LD_EXP 10
5591: NOT
5592: IFFALSE 5397
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
5594: LD_EXP 46
5598: PPUSH
5599: LD_INT 221
5601: PPUSH
5602: LD_INT 110
5604: PPUSH
5605: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
5609: LD_EXP 46
5613: PPUSH
5614: LD_INT 228
5616: PPUSH
5617: LD_INT 115
5619: PPUSH
5620: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
5624: LD_EXP 46
5628: PPUSH
5629: CALL_OW 200
// end ;
5633: PPOPN 1
5635: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
5636: LD_EXP 12
5640: IFFALSE 6382
5642: GO 5644
5644: DISABLE
5645: LD_INT 0
5647: PPUSH
5648: PPUSH
5649: PPUSH
5650: PPUSH
// begin uc_side := 6 ;
5651: LD_ADDR_OWVAR 20
5655: PUSH
5656: LD_INT 6
5658: ST_TO_ADDR
// uc_nation := 3 ;
5659: LD_ADDR_OWVAR 21
5663: PUSH
5664: LD_INT 3
5666: ST_TO_ADDR
// for i := 1 to 3 do
5667: LD_ADDR_VAR 0 2
5671: PUSH
5672: DOUBLE
5673: LD_INT 1
5675: DEC
5676: ST_TO_ADDR
5677: LD_INT 3
5679: PUSH
5680: FOR_TO
5681: IFFALSE 5790
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
5683: LD_INT 0
5685: PPUSH
5686: LD_INT 1
5688: PPUSH
5689: LD_INT 2
5691: PUSH
5692: LD_INT 3
5694: PUSH
5695: LD_INT 4
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: LIST
5702: PUSH
5703: LD_OWVAR 67
5707: ARRAY
5708: PPUSH
5709: CALL_OW 380
// un := CreateHuman ;
5713: LD_ADDR_VAR 0 1
5717: PUSH
5718: CALL_OW 44
5722: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
5723: LD_ADDR_EXP 47
5727: PUSH
5728: LD_EXP 47
5732: PUSH
5733: LD_VAR 0 1
5737: UNION
5738: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5739: LD_VAR 0 1
5743: PPUSH
5744: LD_INT 1
5746: PPUSH
5747: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
5751: LD_VAR 0 1
5755: PPUSH
5756: LD_INT 11
5758: PPUSH
5759: LD_INT 0
5761: PPUSH
5762: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
5766: LD_VAR 0 1
5770: PPUSH
5771: LD_INT 210
5773: PPUSH
5774: LD_INT 159
5776: PPUSH
5777: CALL_OW 111
// wait ( 0 0$2 ) ;
5781: LD_INT 70
5783: PPUSH
5784: CALL_OW 67
// end ;
5788: GO 5680
5790: POP
5791: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
5792: LD_ADDR_VAR 0 4
5796: PUSH
5797: LD_INT 172
5799: PUSH
5800: LD_INT 76
5802: PUSH
5803: EMPTY
5804: LIST
5805: LIST
5806: PUSH
5807: LD_INT 150
5809: PUSH
5810: LD_INT 38
5812: PUSH
5813: EMPTY
5814: LIST
5815: LIST
5816: PUSH
5817: LD_INT 148
5819: PUSH
5820: LD_INT 9
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: PUSH
5827: LD_INT 165
5829: PUSH
5830: LD_INT 38
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: PUSH
5837: EMPTY
5838: LIST
5839: LIST
5840: LIST
5841: LIST
5842: PUSH
5843: LD_INT 191
5845: PUSH
5846: LD_INT 77
5848: PUSH
5849: EMPTY
5850: LIST
5851: LIST
5852: PUSH
5853: LD_INT 168
5855: PUSH
5856: LD_INT 42
5858: PUSH
5859: EMPTY
5860: LIST
5861: LIST
5862: PUSH
5863: LD_INT 166
5865: PUSH
5866: LD_INT 11
5868: PUSH
5869: EMPTY
5870: LIST
5871: LIST
5872: PUSH
5873: LD_INT 151
5875: PUSH
5876: LD_INT 12
5878: PUSH
5879: EMPTY
5880: LIST
5881: LIST
5882: PUSH
5883: EMPTY
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: PUSH
5889: LD_INT 221
5891: PUSH
5892: LD_INT 88
5894: PUSH
5895: EMPTY
5896: LIST
5897: LIST
5898: PUSH
5899: LD_INT 217
5901: PUSH
5902: LD_INT 64
5904: PUSH
5905: EMPTY
5906: LIST
5907: LIST
5908: PUSH
5909: LD_INT 232
5911: PUSH
5912: LD_INT 66
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: PUSH
5919: LD_INT 200
5921: PUSH
5922: LD_INT 56
5924: PUSH
5925: EMPTY
5926: LIST
5927: LIST
5928: PUSH
5929: EMPTY
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: LIST
5939: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5940: LD_INT 35
5942: PPUSH
5943: CALL_OW 67
// for i := russianPatrol downto 1 do
5947: LD_ADDR_VAR 0 2
5951: PUSH
5952: DOUBLE
5953: LD_EXP 47
5957: INC
5958: ST_TO_ADDR
5959: LD_INT 1
5961: PUSH
5962: FOR_DOWNTO
5963: IFFALSE 6346
// begin if IsDead ( russianPatrol [ i ] ) then
5965: LD_EXP 47
5969: PUSH
5970: LD_VAR 0 2
5974: ARRAY
5975: PPUSH
5976: CALL_OW 301
5980: IFFALSE 5984
// continue ;
5982: GO 5962
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
5984: LD_EXP 47
5988: PUSH
5989: LD_VAR 0 2
5993: ARRAY
5994: PPUSH
5995: CALL_OW 256
5999: PUSH
6000: LD_INT 990
6002: LESS
6003: PUSH
6004: LD_EXP 47
6008: PUSH
6009: LD_VAR 0 2
6013: ARRAY
6014: PPUSH
6015: CALL_OW 110
6019: PUSH
6020: LD_INT 1
6022: EQUAL
6023: AND
6024: IFFALSE 6044
// SetTag ( russianPatrol [ i ] , 2 ) ;
6026: LD_EXP 47
6030: PUSH
6031: LD_VAR 0 2
6035: ARRAY
6036: PPUSH
6037: LD_INT 2
6039: PPUSH
6040: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
6044: LD_EXP 47
6048: PUSH
6049: LD_VAR 0 2
6053: ARRAY
6054: PPUSH
6055: CALL_OW 110
6059: PUSH
6060: LD_INT 2
6062: EQUAL
6063: IFFALSE 6130
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
6065: LD_EXP 47
6069: PUSH
6070: LD_VAR 0 2
6074: ARRAY
6075: PPUSH
6076: LD_INT 166
6078: PPUSH
6079: LD_INT 101
6081: PPUSH
6082: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
6086: LD_EXP 47
6090: PUSH
6091: LD_VAR 0 2
6095: ARRAY
6096: PPUSH
6097: LD_INT 71
6099: PPUSH
6100: CALL_OW 296
6104: PUSH
6105: LD_INT 10
6107: LESS
6108: IFFALSE 6128
// SetTag ( russianPatrol [ i ] , 3 ) ;
6110: LD_EXP 47
6114: PUSH
6115: LD_VAR 0 2
6119: ARRAY
6120: PPUSH
6121: LD_INT 3
6123: PPUSH
6124: CALL_OW 109
// continue ;
6128: GO 5962
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
6130: LD_EXP 47
6134: PUSH
6135: LD_VAR 0 2
6139: ARRAY
6140: PPUSH
6141: CALL_OW 110
6145: PUSH
6146: LD_INT 3
6148: EQUAL
6149: IFFALSE 6244
// begin spottedByPatrol := true ;
6151: LD_ADDR_EXP 7
6155: PUSH
6156: LD_INT 1
6158: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
6159: LD_EXP 47
6163: PUSH
6164: LD_VAR 0 2
6168: ARRAY
6169: PPUSH
6170: CALL_OW 250
6174: PPUSH
6175: LD_EXP 47
6179: PUSH
6180: LD_VAR 0 2
6184: ARRAY
6185: PPUSH
6186: CALL_OW 251
6190: PPUSH
6191: LD_INT 2
6193: PPUSH
6194: LD_INT 6
6196: NEG
6197: PPUSH
6198: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
6202: LD_EXP 47
6206: PUSH
6207: LD_VAR 0 2
6211: ARRAY
6212: PPUSH
6213: CALL_OW 87
// DialogueOn ;
6217: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
6221: LD_EXP 25
6225: PPUSH
6226: LD_STRING DH-Spot-f-3
6228: PPUSH
6229: CALL_OW 88
// DialogueOff ;
6233: CALL_OW 7
// YouLost ( Spotted ) ;
6237: LD_STRING Spotted
6239: PPUSH
6240: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
6244: LD_EXP 47
6248: PUSH
6249: LD_VAR 0 2
6253: ARRAY
6254: PPUSH
6255: CALL_OW 314
6259: NOT
6260: IFFALSE 6344
// for j in patrol [ i ] do
6262: LD_ADDR_VAR 0 3
6266: PUSH
6267: LD_VAR 0 4
6271: PUSH
6272: LD_VAR 0 2
6276: ARRAY
6277: PUSH
6278: FOR_IN
6279: IFFALSE 6342
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
6281: LD_EXP 47
6285: PUSH
6286: LD_VAR 0 2
6290: ARRAY
6291: PPUSH
6292: LD_INT 35
6294: PPUSH
6295: LD_INT 175
6297: PPUSH
6298: CALL_OW 12
6302: PPUSH
6303: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
6307: LD_EXP 47
6311: PUSH
6312: LD_VAR 0 2
6316: ARRAY
6317: PPUSH
6318: LD_VAR 0 3
6322: PUSH
6323: LD_INT 1
6325: ARRAY
6326: PPUSH
6327: LD_VAR 0 3
6331: PUSH
6332: LD_INT 2
6334: ARRAY
6335: PPUSH
6336: CALL_OW 174
// end ;
6340: GO 6278
6342: POP
6343: POP
// end ;
6344: GO 5962
6346: POP
6347: POP
// until not russianPatrol or russianAlert ;
6348: LD_EXP 47
6352: NOT
6353: PUSH
6354: LD_EXP 9
6358: OR
6359: IFFALSE 5940
// if russianPatrol then
6361: LD_EXP 47
6365: IFFALSE 6382
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
6367: LD_EXP 47
6371: PPUSH
6372: LD_INT 161
6374: PPUSH
6375: LD_INT 107
6377: PPUSH
6378: CALL_OW 114
// end ;
6382: PPOPN 4
6384: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
6385: LD_EXP 6
6389: PUSH
6390: LD_EXP 13
6394: NOT
6395: AND
6396: IFFALSE 6882
6398: GO 6400
6400: DISABLE
6401: LD_INT 0
6403: PPUSH
6404: PPUSH
6405: PPUSH
6406: PPUSH
6407: PPUSH
// begin enable ;
6408: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
6409: LD_ADDR_VAR 0 2
6413: PUSH
6414: LD_EXP 48
6418: PPUSH
6419: LD_INT 21
6421: PUSH
6422: LD_INT 2
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: PPUSH
6429: CALL_OW 72
6433: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
6434: LD_ADDR_VAR 0 4
6438: PUSH
6439: LD_INT 22
6441: PUSH
6442: LD_INT 4
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: PPUSH
6449: CALL_OW 69
6453: ST_TO_ADDR
// for i in filter do
6454: LD_ADDR_VAR 0 1
6458: PUSH
6459: LD_VAR 0 2
6463: PUSH
6464: FOR_IN
6465: IFFALSE 6880
// begin tmp := IsDrivenBy ( i ) ;
6467: LD_ADDR_VAR 0 3
6471: PUSH
6472: LD_VAR 0 1
6476: PPUSH
6477: CALL_OW 311
6481: ST_TO_ADDR
// if not tmp then
6482: LD_VAR 0 3
6486: NOT
6487: IFFALSE 6491
// continue ;
6489: GO 6464
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
6491: LD_VAR 0 1
6495: PPUSH
6496: CALL_OW 261
6500: PUSH
6501: LD_INT 90
6503: GREATER
6504: PUSH
6505: LD_VAR 0 1
6509: PPUSH
6510: CALL_OW 110
6514: PUSH
6515: LD_INT 2
6517: EQUAL
6518: AND
6519: IFFALSE 6535
// SetTag ( i , 0 ) else
6521: LD_VAR 0 1
6525: PPUSH
6526: LD_INT 0
6528: PPUSH
6529: CALL_OW 109
6533: GO 6631
// if GetTag ( i ) = 2 then
6535: LD_VAR 0 1
6539: PPUSH
6540: CALL_OW 110
6544: PUSH
6545: LD_INT 2
6547: EQUAL
6548: IFFALSE 6631
// begin x := rand ( 1 , 2 ) ;
6550: LD_ADDR_VAR 0 5
6554: PUSH
6555: LD_INT 1
6557: PPUSH
6558: LD_INT 2
6560: PPUSH
6561: CALL_OW 12
6565: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
6566: LD_VAR 0 1
6570: PPUSH
6571: LD_EXP 49
6575: PUSH
6576: LD_VAR 0 5
6580: ARRAY
6581: PPUSH
6582: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
6586: LD_EXP 49
6590: PUSH
6591: LD_VAR 0 5
6595: ARRAY
6596: PPUSH
6597: LD_INT 2
6599: PPUSH
6600: CALL_OW 289
6604: PUSH
6605: LD_INT 20
6607: LESS
6608: IFFALSE 6631
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
6610: LD_EXP 49
6614: PUSH
6615: LD_VAR 0 5
6619: ARRAY
6620: PPUSH
6621: LD_INT 2
6623: PPUSH
6624: LD_INT 100
6626: PPUSH
6627: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
6631: LD_VAR 0 1
6635: PPUSH
6636: CALL_OW 256
6640: PUSH
6641: LD_INT 600
6643: GREATEREQUAL
6644: PUSH
6645: LD_VAR 0 1
6649: PPUSH
6650: CALL_OW 110
6654: NOT
6655: AND
6656: IFFALSE 6682
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6658: LD_VAR 0 1
6662: PPUSH
6663: LD_VAR 0 4
6667: PPUSH
6668: LD_VAR 0 1
6672: PPUSH
6673: CALL_OW 74
6677: PPUSH
6678: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
6682: LD_VAR 0 1
6686: PPUSH
6687: CALL_OW 256
6691: PUSH
6692: LD_INT 600
6694: LESS
6695: PUSH
6696: LD_VAR 0 1
6700: PPUSH
6701: CALL_OW 110
6705: NOT
6706: AND
6707: IFFALSE 6736
// begin SetTag ( i , 1 ) ;
6709: LD_VAR 0 1
6713: PPUSH
6714: LD_INT 1
6716: PPUSH
6717: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
6721: LD_VAR 0 1
6725: PPUSH
6726: LD_INT 62
6728: PPUSH
6729: LD_INT 22
6731: PPUSH
6732: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
6736: LD_VAR 0 1
6740: PPUSH
6741: CALL_OW 110
6745: PUSH
6746: LD_INT 1
6748: EQUAL
6749: PUSH
6750: LD_VAR 0 1
6754: PPUSH
6755: LD_INT 62
6757: PPUSH
6758: LD_INT 22
6760: PPUSH
6761: CALL_OW 297
6765: PUSH
6766: LD_INT 6
6768: LESS
6769: AND
6770: PUSH
6771: LD_VAR 0 3
6775: AND
6776: IFFALSE 6878
// begin ComExitVehicle ( tmp ) ;
6778: LD_VAR 0 3
6782: PPUSH
6783: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
6787: LD_VAR 0 3
6791: PPUSH
6792: LD_VAR 0 1
6796: PPUSH
6797: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
6801: LD_INT 35
6803: PPUSH
6804: CALL_OW 67
// until GetLives ( i ) = 1000 ;
6808: LD_VAR 0 1
6812: PPUSH
6813: CALL_OW 256
6817: PUSH
6818: LD_INT 1000
6820: EQUAL
6821: IFFALSE 6801
// ComEnterUnit ( tmp , i ) ;
6823: LD_VAR 0 3
6827: PPUSH
6828: LD_VAR 0 1
6832: PPUSH
6833: CALL_OW 120
// if GetFuel ( i ) <= 90 then
6837: LD_VAR 0 1
6841: PPUSH
6842: CALL_OW 261
6846: PUSH
6847: LD_INT 90
6849: LESSEQUAL
6850: IFFALSE 6866
// SetTag ( i , 2 ) else
6852: LD_VAR 0 1
6856: PPUSH
6857: LD_INT 2
6859: PPUSH
6860: CALL_OW 109
6864: GO 6878
// SetTag ( i , 0 ) ;
6866: LD_VAR 0 1
6870: PPUSH
6871: LD_INT 0
6873: PPUSH
6874: CALL_OW 109
// end ; end ;
6878: GO 6464
6880: POP
6881: POP
// end ;
6882: PPOPN 5
6884: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
6885: LD_EXP 20
6889: IFFALSE 7112
6891: GO 6893
6893: DISABLE
6894: LD_INT 0
6896: PPUSH
6897: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
6898: LD_EXP 49
6902: PPUSH
6903: LD_INT 79
6905: PPUSH
6906: LD_INT 155
6908: PPUSH
6909: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
6913: LD_EXP 49
6917: PPUSH
6918: LD_INT 16
6920: PPUSH
6921: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6925: LD_ADDR_VAR 0 2
6929: PUSH
6930: LD_EXP 48
6934: PPUSH
6935: LD_INT 50
6937: PUSH
6938: EMPTY
6939: LIST
6940: PPUSH
6941: CALL_OW 72
6945: ST_TO_ADDR
// for i in tmp do
6946: LD_ADDR_VAR 0 1
6950: PUSH
6951: LD_VAR 0 2
6955: PUSH
6956: FOR_IN
6957: IFFALSE 6991
// begin ComAgressiveMove ( i , 123 , 60 ) ;
6959: LD_VAR 0 1
6963: PPUSH
6964: LD_INT 123
6966: PPUSH
6967: LD_INT 60
6969: PPUSH
6970: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
6974: LD_VAR 0 1
6978: PPUSH
6979: LD_INT 153
6981: PPUSH
6982: LD_INT 103
6984: PPUSH
6985: CALL_OW 174
// end ;
6989: GO 6956
6991: POP
6992: POP
// repeat wait ( 0 0$1 ) ;
6993: LD_INT 35
6995: PPUSH
6996: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
7000: LD_ADDR_VAR 0 2
7004: PUSH
7005: LD_EXP 48
7009: PPUSH
7010: LD_INT 50
7012: PUSH
7013: EMPTY
7014: LIST
7015: PPUSH
7016: CALL_OW 72
7020: ST_TO_ADDR
// for i in tmp do
7021: LD_ADDR_VAR 0 1
7025: PUSH
7026: LD_VAR 0 2
7030: PUSH
7031: FOR_IN
7032: IFFALSE 7103
// if not HasTask ( i ) then
7034: LD_VAR 0 1
7038: PPUSH
7039: CALL_OW 314
7043: NOT
7044: IFFALSE 7101
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
7046: LD_VAR 0 1
7050: PPUSH
7051: LD_INT 81
7053: PUSH
7054: LD_INT 3
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PUSH
7061: LD_INT 3
7063: PUSH
7064: LD_INT 21
7066: PUSH
7067: LD_INT 3
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: PPUSH
7082: CALL_OW 69
7086: PPUSH
7087: LD_VAR 0 1
7091: PPUSH
7092: CALL_OW 74
7096: PPUSH
7097: CALL_OW 115
7101: GO 7031
7103: POP
7104: POP
7105: LD_VAR 0 2
7109: NOT
7110: IFFALSE 6993
// end ;
7112: PPOPN 2
7114: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
7115: LD_INT 22
7117: PUSH
7118: LD_INT 3
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: LD_INT 32
7127: PUSH
7128: LD_INT 1
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PPUSH
7139: CALL_OW 69
7143: IFFALSE 7222
7145: GO 7147
7147: DISABLE
7148: LD_INT 0
7150: PPUSH
// begin enable ;
7151: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
7152: LD_ADDR_VAR 0 1
7156: PUSH
7157: LD_INT 22
7159: PUSH
7160: LD_INT 3
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 32
7169: PUSH
7170: LD_INT 1
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PPUSH
7181: CALL_OW 69
7185: PUSH
7186: FOR_IN
7187: IFFALSE 7220
// if GetFuel ( i ) < 1 then
7189: LD_VAR 0 1
7193: PPUSH
7194: CALL_OW 261
7198: PUSH
7199: LD_INT 1
7201: LESS
7202: IFFALSE 7218
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
7204: LD_VAR 0 1
7208: PPUSH
7209: CALL_OW 311
7213: PPUSH
7214: CALL_OW 121
7218: GO 7186
7220: POP
7221: POP
// end ; end_of_file
7222: PPOPN 1
7224: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
7225: LD_INT 0
7227: PPUSH
7228: PPUSH
7229: PPUSH
// SetBName ( omikron , omikron ) ;
7230: LD_INT 64
7232: PPUSH
7233: LD_STRING omikron
7235: PPUSH
7236: CALL_OW 500
// uc_side := 4 ;
7240: LD_ADDR_OWVAR 20
7244: PUSH
7245: LD_INT 4
7247: ST_TO_ADDR
// uc_nation := 1 ;
7248: LD_ADDR_OWVAR 21
7252: PUSH
7253: LD_INT 1
7255: ST_TO_ADDR
// omicronSquad := [ ] ;
7256: LD_ADDR_EXP 51
7260: PUSH
7261: EMPTY
7262: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
7263: LD_ADDR_VAR 0 2
7267: PUSH
7268: LD_INT 22
7270: PUSH
7271: LD_INT 4
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: LD_INT 2
7280: PUSH
7281: LD_INT 30
7283: PUSH
7284: LD_INT 32
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PUSH
7291: LD_INT 30
7293: PUSH
7294: LD_INT 31
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: PUSH
7301: EMPTY
7302: LIST
7303: LIST
7304: LIST
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PPUSH
7310: CALL_OW 69
7314: PUSH
7315: FOR_IN
7316: IFFALSE 7373
// begin PrepareHuman ( false , 1 , 1 ) ;
7318: LD_INT 0
7320: PPUSH
7321: LD_INT 1
7323: PPUSH
7324: LD_INT 1
7326: PPUSH
7327: CALL_OW 380
// un := CreateHuman ;
7331: LD_ADDR_VAR 0 3
7335: PUSH
7336: CALL_OW 44
7340: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7341: LD_ADDR_EXP 51
7345: PUSH
7346: LD_EXP 51
7350: PUSH
7351: LD_VAR 0 3
7355: UNION
7356: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
7357: LD_VAR 0 3
7361: PPUSH
7362: LD_VAR 0 2
7366: PPUSH
7367: CALL_OW 52
// end ;
7371: GO 7315
7373: POP
7374: POP
// for i := 1 to 3 do
7375: LD_ADDR_VAR 0 2
7379: PUSH
7380: DOUBLE
7381: LD_INT 1
7383: DEC
7384: ST_TO_ADDR
7385: LD_INT 3
7387: PUSH
7388: FOR_TO
7389: IFFALSE 7444
// begin PrepareHuman ( false , 2 , 2 ) ;
7391: LD_INT 0
7393: PPUSH
7394: LD_INT 2
7396: PPUSH
7397: LD_INT 2
7399: PPUSH
7400: CALL_OW 380
// un := CreateHuman ;
7404: LD_ADDR_VAR 0 3
7408: PUSH
7409: CALL_OW 44
7413: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7414: LD_ADDR_EXP 51
7418: PUSH
7419: LD_EXP 51
7423: PUSH
7424: LD_VAR 0 3
7428: UNION
7429: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
7430: LD_VAR 0 3
7434: PPUSH
7435: LD_INT 64
7437: PPUSH
7438: CALL_OW 52
// end ;
7442: GO 7388
7444: POP
7445: POP
// for i := 1 to 2 do
7446: LD_ADDR_VAR 0 2
7450: PUSH
7451: DOUBLE
7452: LD_INT 1
7454: DEC
7455: ST_TO_ADDR
7456: LD_INT 2
7458: PUSH
7459: FOR_TO
7460: IFFALSE 7599
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
7462: LD_INT 4
7464: PPUSH
7465: LD_INT 1
7467: PPUSH
7468: LD_INT 2
7470: PPUSH
7471: LD_INT 2
7473: PPUSH
7474: LD_INT 1
7476: PPUSH
7477: LD_INT 3
7479: PPUSH
7480: LD_INT 100
7482: PPUSH
7483: CALL 429 0 7
// un := CreateVehicle ;
7487: LD_ADDR_VAR 0 3
7491: PUSH
7492: CALL_OW 45
7496: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7497: LD_ADDR_EXP 51
7501: PUSH
7502: LD_EXP 51
7506: PUSH
7507: LD_VAR 0 3
7511: UNION
7512: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
7513: LD_VAR 0 3
7517: PPUSH
7518: LD_INT 28
7520: PPUSH
7521: LD_INT 37
7523: PPUSH
7524: LD_INT 6
7526: PPUSH
7527: LD_INT 0
7529: PPUSH
7530: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
7534: LD_INT 0
7536: PPUSH
7537: LD_INT 3
7539: PPUSH
7540: LD_INT 2
7542: PPUSH
7543: CALL_OW 380
// un := CreateHuman ;
7547: LD_ADDR_VAR 0 3
7551: PUSH
7552: CALL_OW 44
7556: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7557: LD_ADDR_EXP 51
7561: PUSH
7562: LD_EXP 51
7566: PUSH
7567: LD_VAR 0 3
7571: UNION
7572: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
7573: LD_VAR 0 3
7577: PPUSH
7578: LD_EXP 51
7582: PUSH
7583: LD_EXP 51
7587: PUSH
7588: LD_INT 1
7590: MINUS
7591: ARRAY
7592: PPUSH
7593: CALL_OW 52
// end ;
7597: GO 7459
7599: POP
7600: POP
// end ;
7601: LD_VAR 0 1
7605: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
7606: LD_INT 0
7608: PPUSH
7609: PPUSH
7610: PPUSH
7611: PPUSH
// uc_side := 4 ;
7612: LD_ADDR_OWVAR 20
7616: PUSH
7617: LD_INT 4
7619: ST_TO_ADDR
// uc_nation := 1 ;
7620: LD_ADDR_OWVAR 21
7624: PUSH
7625: LD_INT 1
7627: ST_TO_ADDR
// tmp := [ ] ;
7628: LD_ADDR_VAR 0 4
7632: PUSH
7633: EMPTY
7634: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7635: LD_INT 4
7637: PPUSH
7638: LD_INT 1
7640: PPUSH
7641: LD_INT 2
7643: PPUSH
7644: LD_INT 1
7646: PPUSH
7647: LD_INT 1
7649: PPUSH
7650: LD_INT 4
7652: PPUSH
7653: LD_INT 77
7655: PPUSH
7656: CALL 429 0 7
// un := CreateVehicle ;
7660: LD_ADDR_VAR 0 3
7664: PUSH
7665: CALL_OW 45
7669: ST_TO_ADDR
// tmp := tmp union un ;
7670: LD_ADDR_VAR 0 4
7674: PUSH
7675: LD_VAR 0 4
7679: PUSH
7680: LD_VAR 0 3
7684: UNION
7685: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7686: LD_VAR 0 3
7690: PPUSH
7691: LD_INT 2
7693: PPUSH
7694: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
7698: LD_VAR 0 3
7702: PPUSH
7703: LD_INT 106
7705: PPUSH
7706: LD_INT 3
7708: PPUSH
7709: LD_INT 0
7711: PPUSH
7712: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
7716: LD_INT 0
7718: PPUSH
7719: LD_INT 3
7721: PPUSH
7722: LD_INT 2
7724: PPUSH
7725: CALL_OW 380
// un := CreateHuman ;
7729: LD_ADDR_VAR 0 3
7733: PUSH
7734: CALL_OW 44
7738: ST_TO_ADDR
// tmp := tmp union un ;
7739: LD_ADDR_VAR 0 4
7743: PUSH
7744: LD_VAR 0 4
7748: PUSH
7749: LD_VAR 0 3
7753: UNION
7754: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7755: LD_VAR 0 3
7759: PPUSH
7760: LD_VAR 0 4
7764: PUSH
7765: LD_VAR 0 4
7769: PUSH
7770: LD_INT 1
7772: MINUS
7773: ARRAY
7774: PPUSH
7775: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7779: LD_VAR 0 3
7783: PPUSH
7784: LD_INT 109
7786: PPUSH
7787: LD_INT 9
7789: PPUSH
7790: CALL_OW 111
// wait ( 0 0$1 ) ;
7794: LD_INT 35
7796: PPUSH
7797: CALL_OW 67
// for i := 1 to 2 do
7801: LD_ADDR_VAR 0 2
7805: PUSH
7806: DOUBLE
7807: LD_INT 1
7809: DEC
7810: ST_TO_ADDR
7811: LD_INT 2
7813: PUSH
7814: FOR_TO
7815: IFFALSE 7879
// begin PrepareHuman ( false , 1 , 2 ) ;
7817: LD_INT 0
7819: PPUSH
7820: LD_INT 1
7822: PPUSH
7823: LD_INT 2
7825: PPUSH
7826: CALL_OW 380
// un := CreateHuman ;
7830: LD_ADDR_VAR 0 3
7834: PUSH
7835: CALL_OW 44
7839: ST_TO_ADDR
// tmp := tmp union un ;
7840: LD_ADDR_VAR 0 4
7844: PUSH
7845: LD_VAR 0 4
7849: PUSH
7850: LD_VAR 0 3
7854: UNION
7855: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7856: LD_VAR 0 3
7860: PPUSH
7861: LD_INT 105
7863: PPUSH
7864: LD_INT 2
7866: PPUSH
7867: LD_INT 2
7869: PPUSH
7870: LD_INT 0
7872: PPUSH
7873: CALL_OW 50
// end ;
7877: GO 7814
7879: POP
7880: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7881: LD_VAR 0 4
7885: PPUSH
7886: LD_INT 26
7888: PPUSH
7889: LD_INT 35
7891: PPUSH
7892: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7896: LD_INT 35
7898: PPUSH
7899: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7903: LD_VAR 0 4
7907: PPUSH
7908: LD_INT 50
7910: PUSH
7911: EMPTY
7912: LIST
7913: PPUSH
7914: CALL_OW 72
7918: NOT
7919: IFFALSE 7923
// exit ;
7921: GO 8050
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7923: LD_VAR 0 4
7927: PPUSH
7928: LD_INT 91
7930: PUSH
7931: LD_INT 64
7933: PUSH
7934: LD_INT 12
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: LIST
7941: PPUSH
7942: CALL_OW 72
7946: PUSH
7947: LD_VAR 0 4
7951: EQUAL
7952: IFFALSE 7896
// omicronSquad := omicronSquad union tmp ;
7954: LD_ADDR_EXP 51
7958: PUSH
7959: LD_EXP 51
7963: PUSH
7964: LD_VAR 0 4
7968: UNION
7969: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7970: LD_ADDR_VAR 0 2
7974: PUSH
7975: LD_VAR 0 4
7979: PPUSH
7980: LD_INT 25
7982: PUSH
7983: LD_INT 1
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: PPUSH
7990: CALL_OW 72
7994: PUSH
7995: FOR_IN
7996: IFFALSE 8048
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7998: LD_VAR 0 2
8002: PPUSH
8003: LD_INT 22
8005: PUSH
8006: LD_INT 4
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: PUSH
8013: LD_INT 30
8015: PUSH
8016: LD_INT 4
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PPUSH
8027: CALL_OW 69
8031: PPUSH
8032: LD_VAR 0 2
8036: PPUSH
8037: CALL_OW 74
8041: PPUSH
8042: CALL_OW 120
8046: GO 7995
8048: POP
8049: POP
// end ;
8050: LD_VAR 0 1
8054: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
8055: LD_EXP 13
8059: NOT
8060: IFFALSE 8631
8062: GO 8064
8064: DISABLE
8065: LD_INT 0
8067: PPUSH
8068: PPUSH
8069: PPUSH
8070: PPUSH
// begin enable ;
8071: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8072: LD_ADDR_VAR 0 2
8076: PUSH
8077: LD_INT 22
8079: PUSH
8080: LD_INT 4
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PUSH
8087: LD_INT 21
8089: PUSH
8090: LD_INT 3
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: PUSH
8097: LD_INT 3
8099: PUSH
8100: LD_INT 24
8102: PUSH
8103: LD_INT 1000
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: LIST
8118: PPUSH
8119: CALL_OW 69
8123: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
8124: LD_ADDR_VAR 0 3
8128: PUSH
8129: LD_EXP 51
8133: PPUSH
8134: LD_INT 25
8136: PUSH
8137: LD_INT 2
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: PPUSH
8144: CALL_OW 72
8148: ST_TO_ADDR
// if filter and tmp then
8149: LD_VAR 0 2
8153: PUSH
8154: LD_VAR 0 3
8158: AND
8159: IFFALSE 8232
// begin for i in tmp do
8161: LD_ADDR_VAR 0 1
8165: PUSH
8166: LD_VAR 0 3
8170: PUSH
8171: FOR_IN
8172: IFFALSE 8228
// if IsInUnit ( i ) then
8174: LD_VAR 0 1
8178: PPUSH
8179: CALL_OW 310
8183: IFFALSE 8196
// ComExitBuilding ( i ) else
8185: LD_VAR 0 1
8189: PPUSH
8190: CALL_OW 122
8194: GO 8226
// if not HasTask ( i ) then
8196: LD_VAR 0 1
8200: PPUSH
8201: CALL_OW 314
8205: NOT
8206: IFFALSE 8226
// ComRepairBuilding ( i , filter [ 1 ] ) ;
8208: LD_VAR 0 1
8212: PPUSH
8213: LD_VAR 0 2
8217: PUSH
8218: LD_INT 1
8220: ARRAY
8221: PPUSH
8222: CALL_OW 130
8226: GO 8171
8228: POP
8229: POP
// end else
8230: GO 8303
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
8232: LD_VAR 0 3
8236: PPUSH
8237: LD_INT 3
8239: PUSH
8240: LD_INT 54
8242: PUSH
8243: EMPTY
8244: LIST
8245: PUSH
8246: EMPTY
8247: LIST
8248: LIST
8249: PPUSH
8250: CALL_OW 72
8254: IFFALSE 8303
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
8256: LD_ADDR_VAR 0 1
8260: PUSH
8261: LD_VAR 0 3
8265: PPUSH
8266: LD_INT 3
8268: PUSH
8269: LD_INT 54
8271: PUSH
8272: EMPTY
8273: LIST
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: PPUSH
8279: CALL_OW 72
8283: PUSH
8284: FOR_IN
8285: IFFALSE 8301
// ComEnterUnit ( i , omikron ) ;
8287: LD_VAR 0 1
8291: PPUSH
8292: LD_INT 64
8294: PPUSH
8295: CALL_OW 120
8299: GO 8284
8301: POP
8302: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
8303: LD_ADDR_VAR 0 2
8307: PUSH
8308: LD_EXP 51
8312: PPUSH
8313: LD_INT 21
8315: PUSH
8316: LD_INT 2
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: PPUSH
8323: CALL_OW 72
8327: ST_TO_ADDR
// if not filter then
8328: LD_VAR 0 2
8332: NOT
8333: IFFALSE 8337
// exit ;
8335: GO 8631
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
8337: LD_ADDR_VAR 0 4
8341: PUSH
8342: LD_INT 13
8344: PPUSH
8345: LD_INT 81
8347: PUSH
8348: LD_INT 4
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: PPUSH
8355: CALL_OW 70
8359: ST_TO_ADDR
// if enemy then
8360: LD_VAR 0 4
8364: IFFALSE 8631
// begin for i in filter do
8366: LD_ADDR_VAR 0 1
8370: PUSH
8371: LD_VAR 0 2
8375: PUSH
8376: FOR_IN
8377: IFFALSE 8629
// begin tmp := IsDrivenBy ( i ) ;
8379: LD_ADDR_VAR 0 3
8383: PUSH
8384: LD_VAR 0 1
8388: PPUSH
8389: CALL_OW 311
8393: ST_TO_ADDR
// if not tmp then
8394: LD_VAR 0 3
8398: NOT
8399: IFFALSE 8403
// continue ;
8401: GO 8376
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
8403: LD_VAR 0 1
8407: PPUSH
8408: CALL_OW 256
8412: PUSH
8413: LD_INT 600
8415: GREATEREQUAL
8416: PUSH
8417: LD_VAR 0 1
8421: PPUSH
8422: CALL_OW 110
8426: PUSH
8427: LD_INT 1
8429: NONEQUAL
8430: AND
8431: IFFALSE 8457
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8433: LD_VAR 0 1
8437: PPUSH
8438: LD_VAR 0 4
8442: PPUSH
8443: LD_VAR 0 1
8447: PPUSH
8448: CALL_OW 74
8452: PPUSH
8453: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
8457: LD_VAR 0 1
8461: PPUSH
8462: CALL_OW 256
8466: PUSH
8467: LD_INT 600
8469: LESS
8470: PUSH
8471: LD_VAR 0 1
8475: PPUSH
8476: CALL_OW 110
8480: PUSH
8481: LD_INT 1
8483: NONEQUAL
8484: AND
8485: IFFALSE 8514
// begin SetTag ( i , 1 ) ;
8487: LD_VAR 0 1
8491: PPUSH
8492: LD_INT 1
8494: PPUSH
8495: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
8499: LD_VAR 0 1
8503: PPUSH
8504: LD_INT 27
8506: PPUSH
8507: LD_INT 35
8509: PPUSH
8510: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
8514: LD_VAR 0 1
8518: PPUSH
8519: CALL_OW 110
8523: PUSH
8524: LD_INT 1
8526: EQUAL
8527: PUSH
8528: LD_VAR 0 1
8532: PPUSH
8533: LD_INT 27
8535: PPUSH
8536: LD_INT 35
8538: PPUSH
8539: CALL_OW 297
8543: PUSH
8544: LD_INT 6
8546: LESS
8547: AND
8548: PUSH
8549: LD_VAR 0 3
8553: AND
8554: IFFALSE 8627
// begin ComExitVehicle ( tmp ) ;
8556: LD_VAR 0 3
8560: PPUSH
8561: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8565: LD_VAR 0 3
8569: PPUSH
8570: LD_VAR 0 1
8574: PPUSH
8575: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8579: LD_INT 35
8581: PPUSH
8582: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8586: LD_VAR 0 1
8590: PPUSH
8591: CALL_OW 256
8595: PUSH
8596: LD_INT 1000
8598: EQUAL
8599: IFFALSE 8579
// ComEnterUnit ( tmp , i ) ;
8601: LD_VAR 0 3
8605: PPUSH
8606: LD_VAR 0 1
8610: PPUSH
8611: CALL_OW 120
// SetTag ( i , 0 ) ;
8615: LD_VAR 0 1
8619: PPUSH
8620: LD_INT 0
8622: PPUSH
8623: CALL_OW 109
// end ; end ;
8627: GO 8376
8629: POP
8630: POP
// end ; end ;
8631: PPOPN 4
8633: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
8634: LD_EXP 13
8638: IFFALSE 8782
8640: GO 8642
8642: DISABLE
8643: LD_INT 0
8645: PPUSH
8646: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
8647: LD_ADDR_VAR 0 2
8651: PUSH
8652: LD_EXP 51
8656: PPUSH
8657: LD_INT 21
8659: PUSH
8660: LD_INT 1
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: PUSH
8667: LD_INT 50
8669: PUSH
8670: EMPTY
8671: LIST
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: PPUSH
8677: CALL_OW 72
8681: ST_TO_ADDR
// if not tmp then
8682: LD_VAR 0 2
8686: NOT
8687: IFFALSE 8691
// exit ;
8689: GO 8782
// repeat wait ( 0 0$1 ) ;
8691: LD_INT 35
8693: PPUSH
8694: CALL_OW 67
// for i in tmp do
8698: LD_ADDR_VAR 0 1
8702: PUSH
8703: LD_VAR 0 2
8707: PUSH
8708: FOR_IN
8709: IFFALSE 8773
// begin ComExit ( i ) ;
8711: LD_VAR 0 1
8715: PPUSH
8716: CALL 867 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
8720: LD_VAR 0 1
8724: PPUSH
8725: LD_INT 14
8727: PPUSH
8728: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
8732: LD_VAR 0 1
8736: PPUSH
8737: LD_INT 14
8739: PPUSH
8740: CALL_OW 308
8744: IFFALSE 8771
// begin tmp := tmp diff i ;
8746: LD_ADDR_VAR 0 2
8750: PUSH
8751: LD_VAR 0 2
8755: PUSH
8756: LD_VAR 0 1
8760: DIFF
8761: ST_TO_ADDR
// RemoveUnit ( i ) ;
8762: LD_VAR 0 1
8766: PPUSH
8767: CALL_OW 64
// end ; end ;
8771: GO 8708
8773: POP
8774: POP
// until not tmp ;
8775: LD_VAR 0 2
8779: NOT
8780: IFFALSE 8691
// end ; end_of_file
8782: PPOPN 2
8784: END
// export function Action ; var i , un , veh , tmp ; begin
8785: LD_INT 0
8787: PPUSH
8788: PPUSH
8789: PPUSH
8790: PPUSH
8791: PPUSH
// InGameOn ;
8792: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8796: LD_INT 179
8798: PPUSH
8799: LD_INT 5
8801: PPUSH
8802: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8806: LD_ADDR_VAR 0 4
8810: PUSH
8811: LD_INT 2
8813: PPUSH
8814: LD_INT 2
8816: PPUSH
8817: LD_INT 12
8819: PPUSH
8820: LD_INT 1
8822: PPUSH
8823: LD_INT 1
8825: PPUSH
8826: LD_INT 24
8828: PPUSH
8829: LD_INT 33
8831: PPUSH
8832: CALL 429 0 7
8836: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8837: LD_VAR 0 4
8841: PPUSH
8842: LD_INT 2
8844: PPUSH
8845: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8849: LD_VAR 0 4
8853: PPUSH
8854: LD_INT 178
8856: PPUSH
8857: LD_INT 2
8859: PPUSH
8860: LD_INT 0
8862: PPUSH
8863: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8867: LD_EXP 25
8871: PPUSH
8872: LD_VAR 0 4
8876: PPUSH
8877: CALL_OW 52
// if Kamil then
8881: LD_EXP 29
8885: IFFALSE 8920
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8887: LD_EXP 29
8891: PPUSH
8892: LD_INT 207
8894: PPUSH
8895: LD_INT 37
8897: PPUSH
8898: LD_INT 0
8900: PPUSH
8901: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8905: LD_EXP 29
8909: PPUSH
8910: LD_INT 211
8912: PPUSH
8913: LD_INT 38
8915: PPUSH
8916: CALL_OW 118
// end ; if Sophia then
8920: LD_EXP 31
8924: IFFALSE 8959
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8926: LD_EXP 31
8930: PPUSH
8931: LD_INT 209
8933: PPUSH
8934: LD_INT 40
8936: PPUSH
8937: LD_INT 0
8939: PPUSH
8940: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8944: LD_EXP 31
8948: PPUSH
8949: LD_INT 211
8951: PPUSH
8952: LD_INT 38
8954: PPUSH
8955: CALL_OW 118
// end ; if Givi then
8959: LD_EXP 26
8963: IFFALSE 8998
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8965: LD_EXP 26
8969: PPUSH
8970: LD_INT 201
8972: PPUSH
8973: LD_INT 34
8975: PPUSH
8976: LD_INT 0
8978: PPUSH
8979: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8983: LD_EXP 26
8987: PPUSH
8988: LD_INT 206
8990: PPUSH
8991: LD_INT 36
8993: PPUSH
8994: CALL_OW 118
// end ; if Ibrahim then
8998: LD_EXP 28
9002: IFFALSE 9037
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
9004: LD_EXP 28
9008: PPUSH
9009: LD_INT 202
9011: PPUSH
9012: LD_INT 39
9014: PPUSH
9015: LD_INT 0
9017: PPUSH
9018: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
9022: LD_EXP 28
9026: PPUSH
9027: LD_INT 206
9029: PPUSH
9030: LD_INT 36
9032: PPUSH
9033: CALL_OW 118
// end ; if Markov then
9037: LD_EXP 32
9041: IFFALSE 9128
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
9043: LD_ADDR_VAR 0 4
9047: PUSH
9048: LD_INT 2
9050: PPUSH
9051: LD_INT 2
9053: PPUSH
9054: LD_INT 13
9056: PPUSH
9057: LD_INT 1
9059: PPUSH
9060: LD_INT 1
9062: PPUSH
9063: LD_INT 25
9065: PPUSH
9066: LD_INT 80
9068: PUSH
9069: LD_INT 20
9071: PUSH
9072: LD_OWVAR 67
9076: MUL
9077: MINUS
9078: PPUSH
9079: CALL 429 0 7
9083: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
9084: LD_VAR 0 4
9088: PPUSH
9089: LD_INT 2
9091: PPUSH
9092: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
9096: LD_VAR 0 4
9100: PPUSH
9101: LD_INT 197
9103: PPUSH
9104: LD_INT 35
9106: PPUSH
9107: LD_INT 0
9109: PPUSH
9110: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
9114: LD_EXP 32
9118: PPUSH
9119: LD_VAR 0 4
9123: PPUSH
9124: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
9128: LD_ADDR_VAR 0 5
9132: PUSH
9133: LD_EXP 30
9137: PUSH
9138: LD_EXP 37
9142: UNION
9143: ST_TO_ADDR
// for i in tmp do
9144: LD_ADDR_VAR 0 2
9148: PUSH
9149: LD_VAR 0 5
9153: PUSH
9154: FOR_IN
9155: IFFALSE 9189
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
9157: LD_VAR 0 2
9161: PPUSH
9162: LD_INT 203
9164: PPUSH
9165: LD_INT 41
9167: PPUSH
9168: LD_INT 6
9170: PPUSH
9171: LD_INT 0
9173: PPUSH
9174: CALL_OW 50
// ComHold ( i ) ;
9178: LD_VAR 0 2
9182: PPUSH
9183: CALL_OW 140
// end ;
9187: GO 9154
9189: POP
9190: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
9191: LD_INT 22
9193: PUSH
9194: LD_INT 2
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: PUSH
9201: LD_INT 25
9203: PUSH
9204: LD_INT 2
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: PPUSH
9215: CALL_OW 69
9219: NOT
9220: IFFALSE 9234
// SetClass ( Heike , 2 ) ;
9222: LD_EXP 25
9226: PPUSH
9227: LD_INT 2
9229: PPUSH
9230: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
9234: LD_EXP 25
9238: PPUSH
9239: LD_INT 183
9241: PPUSH
9242: LD_INT 12
9244: PPUSH
9245: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
9249: LD_EXP 25
9253: PPUSH
9254: LD_INT 188
9256: PPUSH
9257: LD_INT 20
9259: PPUSH
9260: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
9264: LD_EXP 25
9268: PPUSH
9269: LD_INT 191
9271: PPUSH
9272: LD_INT 25
9274: PPUSH
9275: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
9279: LD_EXP 25
9283: PPUSH
9284: LD_INT 203
9286: PPUSH
9287: LD_INT 29
9289: PPUSH
9290: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
9294: LD_EXP 25
9298: PPUSH
9299: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
9303: LD_INT 35
9305: PPUSH
9306: CALL_OW 67
// until not IsInUnit ( Heike ) ;
9310: LD_EXP 25
9314: PPUSH
9315: CALL_OW 310
9319: NOT
9320: IFFALSE 9303
// CenterOnUnits ( Heike ) ;
9322: LD_EXP 25
9326: PPUSH
9327: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
9331: LD_ADDR_VAR 0 5
9335: PUSH
9336: LD_INT 22
9338: PUSH
9339: LD_INT 2
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: PUSH
9346: LD_INT 21
9348: PUSH
9349: LD_INT 1
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: PPUSH
9360: CALL_OW 69
9364: PUSH
9365: LD_EXP 25
9369: PUSH
9370: LD_EXP 32
9374: PUSH
9375: EMPTY
9376: LIST
9377: LIST
9378: DIFF
9379: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
9380: LD_VAR 0 5
9384: PPUSH
9385: LD_EXP 25
9389: PPUSH
9390: CALL_OW 119
// if Givi then
9394: LD_EXP 26
9398: IFFALSE 9416
// ComTurnUnit ( Heike , Givi ) else
9400: LD_EXP 25
9404: PPUSH
9405: LD_EXP 26
9409: PPUSH
9410: CALL_OW 119
9414: GO 9434
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
9416: LD_EXP 25
9420: PPUSH
9421: LD_VAR 0 5
9425: PUSH
9426: LD_INT 1
9428: ARRAY
9429: PPUSH
9430: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
9434: LD_EXP 25
9438: PPUSH
9439: LD_STRING DH-Start-1
9441: PPUSH
9442: CALL_OW 88
// if Givi then
9446: LD_EXP 26
9450: IFFALSE 9497
// begin Say ( Givi , DG-Start-2 ) ;
9452: LD_EXP 26
9456: PPUSH
9457: LD_STRING DG-Start-2
9459: PPUSH
9460: CALL_OW 88
// if not Mike then
9464: LD_EXP 27
9468: NOT
9469: IFFALSE 9495
// begin Say ( Givi , DG-Start-b-3 ) ;
9471: LD_EXP 26
9475: PPUSH
9476: LD_STRING DG-Start-b-3
9478: PPUSH
9479: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
9483: LD_EXP 25
9487: PPUSH
9488: LD_STRING DH-Start-b-4
9490: PPUSH
9491: CALL_OW 88
// end ; end else
9495: GO 9562
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
9497: LD_EXP 37
9501: PPUSH
9502: LD_INT 26
9504: PUSH
9505: LD_INT 1
9507: PUSH
9508: EMPTY
9509: LIST
9510: LIST
9511: PPUSH
9512: CALL_OW 72
9516: PUSH
9517: LD_INT 1
9519: ARRAY
9520: PPUSH
9521: LD_STRING DArm-Start-a-2
9523: PPUSH
9524: CALL_OW 88
9528: NOT
9529: IFFALSE 9562
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
9531: LD_EXP 37
9535: PPUSH
9536: LD_INT 26
9538: PUSH
9539: LD_INT 2
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: PPUSH
9546: CALL_OW 72
9550: PUSH
9551: LD_INT 1
9553: ARRAY
9554: PPUSH
9555: LD_STRING DArf-Start-a-2
9557: PPUSH
9558: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
9562: LD_EXP 25
9566: PPUSH
9567: LD_INT 211
9569: PPUSH
9570: LD_INT 38
9572: PPUSH
9573: CALL_OW 118
// wait ( 0 0$1 ) ;
9577: LD_INT 35
9579: PPUSH
9580: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
9584: LD_EXP 25
9588: PPUSH
9589: LD_STRING DH-Start-3
9591: PPUSH
9592: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9596: LD_EXP 25
9600: PPUSH
9601: LD_STRING DH-Start-4
9603: PPUSH
9604: CALL_OW 88
// InGameOff ;
9608: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
9612: LD_STRING Prepare
9614: PPUSH
9615: CALL_OW 337
// SaveForQuickRestart ;
9619: CALL_OW 22
// wait ( 0 0$10 ) ;
9623: LD_INT 350
9625: PPUSH
9626: CALL_OW 67
// if not Aviradze then
9630: LD_EXP 35
9634: NOT
9635: IFFALSE 9639
// exit ;
9637: GO 9879
// SetDir ( Aviradze , 4 ) ;
9639: LD_EXP 35
9643: PPUSH
9644: LD_INT 4
9646: PPUSH
9647: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
9651: LD_EXP 35
9655: PPUSH
9656: LD_INT 225
9658: PPUSH
9659: LD_INT 33
9661: PPUSH
9662: LD_INT 0
9664: PPUSH
9665: CALL_OW 48
// for i := 1 to 2 do
9669: LD_ADDR_VAR 0 2
9673: PUSH
9674: DOUBLE
9675: LD_INT 1
9677: DEC
9678: ST_TO_ADDR
9679: LD_INT 2
9681: PUSH
9682: FOR_TO
9683: IFFALSE 9814
// begin uc_side := 2 ;
9685: LD_ADDR_OWVAR 20
9689: PUSH
9690: LD_INT 2
9692: ST_TO_ADDR
// uc_nation := 0 ;
9693: LD_ADDR_OWVAR 21
9697: PUSH
9698: LD_INT 0
9700: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9701: LD_INT 0
9703: PPUSH
9704: LD_INT 12
9706: PPUSH
9707: LD_INT 1
9709: PPUSH
9710: CALL_OW 380
// hc_gallery :=  ;
9714: LD_ADDR_OWVAR 33
9718: PUSH
9719: LD_STRING 
9721: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
9722: LD_ADDR_OWVAR 26
9726: PUSH
9727: LD_STRING Artudito
9729: PUSH
9730: LD_STRING Textur
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: PUSH
9737: LD_VAR 0 2
9741: ARRAY
9742: ST_TO_ADDR
// un := CreateHuman ;
9743: LD_ADDR_VAR 0 3
9747: PUSH
9748: CALL_OW 44
9752: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9753: LD_VAR 0 3
9757: PPUSH
9758: LD_INT 224
9760: PUSH
9761: LD_INT 226
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: PUSH
9768: LD_VAR 0 2
9772: ARRAY
9773: PPUSH
9774: LD_INT 31
9776: PUSH
9777: LD_INT 35
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: PUSH
9784: LD_VAR 0 2
9788: ARRAY
9789: PPUSH
9790: LD_INT 0
9792: PPUSH
9793: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9797: LD_VAR 0 3
9801: PPUSH
9802: LD_INT 215
9804: PPUSH
9805: LD_INT 36
9807: PPUSH
9808: CALL_OW 111
// end ;
9812: GO 9682
9814: POP
9815: POP
// hc_name :=  ;
9816: LD_ADDR_OWVAR 26
9820: PUSH
9821: LD_STRING 
9823: ST_TO_ADDR
// InitHc ;
9824: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9828: LD_EXP 35
9832: PPUSH
9833: LD_INT 215
9835: PPUSH
9836: LD_INT 36
9838: PPUSH
9839: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
9843: LD_EXP 35
9847: PPUSH
9848: LD_STRING DA-Arrive-1
9850: PPUSH
9851: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
9855: LD_EXP 25
9859: PPUSH
9860: LD_STRING DH-Arrive-2
9862: PPUSH
9863: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
9867: LD_EXP 35
9871: PPUSH
9872: LD_STRING DA-Arrive-3
9874: PPUSH
9875: CALL_OW 88
// end ;
9879: LD_VAR 0 1
9883: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
9884: LD_EXP 3
9888: IFFALSE 11213
9890: GO 9892
9892: DISABLE
9893: LD_INT 0
9895: PPUSH
9896: PPUSH
9897: PPUSH
// begin DialogueOn ;
9898: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9902: LD_EXP 25
9906: PPUSH
9907: LD_STRING DH-base-1
9909: PPUSH
9910: CALL_OW 88
// if Markov then
9914: LD_EXP 32
9918: IFFALSE 9970
// begin Say ( Markov , DMar-base-2 ) ;
9920: LD_EXP 32
9924: PPUSH
9925: LD_STRING DMar-base-2
9927: PPUSH
9928: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9932: LD_EXP 32
9936: PPUSH
9937: LD_STRING DMar-base-3
9939: PPUSH
9940: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9944: LD_EXP 25
9948: PPUSH
9949: LD_STRING DH-base-4
9951: PPUSH
9952: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9956: LD_EXP 32
9960: PPUSH
9961: LD_STRING DMar-base-5
9963: PPUSH
9964: CALL_OW 88
// end else
9968: GO 10047
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9970: LD_EXP 37
9974: PPUSH
9975: LD_INT 26
9977: PUSH
9978: LD_INT 1
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: PPUSH
9985: CALL_OW 72
9989: PUSH
9990: LD_INT 1
9992: ARRAY
9993: PPUSH
9994: LD_STRING DArm-base-a-2
9996: PPUSH
9997: CALL_OW 88
10001: NOT
10002: IFFALSE 10035
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
10004: LD_EXP 37
10008: PPUSH
10009: LD_INT 26
10011: PUSH
10012: LD_INT 2
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PPUSH
10019: CALL_OW 72
10023: PUSH
10024: LD_INT 1
10026: ARRAY
10027: PPUSH
10028: LD_STRING DArf-base-a-2
10030: PPUSH
10031: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
10035: LD_EXP 25
10039: PPUSH
10040: LD_STRING DH-base-a-3
10042: PPUSH
10043: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
10047: LD_EXP 35
10051: PPUSH
10052: LD_STRING DA-base-6
10054: PPUSH
10055: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
10059: LD_EXP 35
10063: PPUSH
10064: LD_STRING DA-base-7
10066: PPUSH
10067: CALL_OW 88
// DialogueOff ;
10071: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
10075: LD_STRING Flamethrower
10077: PPUSH
10078: CALL_OW 337
// wait ( 2 2$00 ) ;
10082: LD_INT 4200
10084: PPUSH
10085: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
10089: LD_EXP 34
10093: PUSH
10094: LD_EXP 27
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: PPUSH
10103: LD_INT 203
10105: PPUSH
10106: LD_INT 37
10108: PPUSH
10109: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
10113: LD_INT 22
10115: PUSH
10116: LD_INT 2
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: LD_INT 92
10125: PUSH
10126: LD_INT 203
10128: PUSH
10129: LD_INT 37
10131: PUSH
10132: LD_INT 10
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: PPUSH
10145: CALL_OW 69
10149: NOT
10150: IFFALSE 10190
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
10152: LD_EXP 34
10156: PUSH
10157: LD_EXP 27
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: PPUSH
10166: LD_EXP 25
10170: PPUSH
10171: CALL_OW 250
10175: PPUSH
10176: LD_EXP 25
10180: PPUSH
10181: CALL_OW 251
10185: PPUSH
10186: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10190: LD_INT 35
10192: PPUSH
10193: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
10197: LD_INT 2
10199: PPUSH
10200: LD_EXP 34
10204: PPUSH
10205: CALL_OW 292
10209: PUSH
10210: LD_EXP 34
10214: PPUSH
10215: LD_EXP 25
10219: PPUSH
10220: CALL_OW 296
10224: PUSH
10225: LD_INT 8
10227: LESS
10228: PUSH
10229: LD_EXP 34
10233: PPUSH
10234: LD_INT 22
10236: PUSH
10237: LD_INT 2
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PUSH
10244: LD_INT 21
10246: PUSH
10247: LD_INT 3
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: PPUSH
10258: CALL_OW 69
10262: PPUSH
10263: LD_EXP 34
10267: PPUSH
10268: CALL_OW 74
10272: PPUSH
10273: CALL_OW 296
10277: PUSH
10278: LD_INT 7
10280: LESS
10281: OR
10282: AND
10283: PUSH
10284: LD_EXP 34
10288: PPUSH
10289: LD_INT 10
10291: PPUSH
10292: CALL_OW 308
10296: NOT
10297: AND
10298: IFFALSE 10190
// InGameOn ;
10300: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
10304: LD_EXP 34
10308: PPUSH
10309: CALL_OW 87
// if IsInUnit ( Heike ) then
10313: LD_EXP 25
10317: PPUSH
10318: CALL_OW 310
10322: IFFALSE 10333
// ComExitBuilding ( Heike ) ;
10324: LD_EXP 25
10328: PPUSH
10329: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
10333: LD_EXP 34
10337: PUSH
10338: LD_EXP 27
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PPUSH
10347: LD_EXP 25
10351: PPUSH
10352: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
10356: LD_EXP 25
10360: PPUSH
10361: LD_EXP 34
10365: PPUSH
10366: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
10370: LD_INT 22
10372: PUSH
10373: LD_INT 2
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: PUSH
10380: LD_INT 91
10382: PUSH
10383: LD_EXP 34
10387: PUSH
10388: LD_INT 10
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: LIST
10395: PUSH
10396: LD_INT 21
10398: PUSH
10399: LD_INT 3
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: LIST
10410: PPUSH
10411: CALL_OW 69
10415: IFFALSE 10441
// begin Say ( Kurt , DKs-scout-1 ) ;
10417: LD_EXP 34
10421: PPUSH
10422: LD_STRING DKs-scout-1
10424: PPUSH
10425: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
10429: LD_EXP 25
10433: PPUSH
10434: LD_STRING DH-scout-2
10436: PPUSH
10437: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
10441: LD_EXP 25
10445: PPUSH
10446: CALL_OW 85
// repeat wait ( 0 0$1 ) ;
10450: LD_INT 35
10452: PPUSH
10453: CALL_OW 67
// until GetDistUnits ( Heike , Kurt ) < 6 ;
10457: LD_EXP 25
10461: PPUSH
10462: LD_EXP 34
10466: PPUSH
10467: CALL_OW 296
10471: PUSH
10472: LD_INT 6
10474: LESS
10475: IFFALSE 10450
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
10477: LD_EXP 34
10481: PUSH
10482: LD_EXP 27
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: PPUSH
10491: LD_EXP 25
10495: PPUSH
10496: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
10500: LD_EXP 34
10504: PPUSH
10505: LD_STRING DKs-scout-3
10507: PPUSH
10508: CALL_OW 88
// if Kaia then
10512: LD_EXP 30
10516: IFFALSE 10706
// begin if IsInUnit ( Kaia ) then
10518: LD_EXP 30
10522: PPUSH
10523: CALL_OW 310
10527: IFFALSE 10538
// ComExitBuilding ( Kaia ) ;
10529: LD_EXP 30
10533: PPUSH
10534: CALL_OW 122
// wait ( 0 0$1 ) ;
10538: LD_INT 35
10540: PPUSH
10541: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
10545: LD_EXP 30
10549: PPUSH
10550: LD_EXP 34
10554: PPUSH
10555: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
10559: LD_INT 35
10561: PPUSH
10562: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
10566: LD_EXP 30
10570: PPUSH
10571: LD_EXP 34
10575: PPUSH
10576: CALL_OW 296
10580: PUSH
10581: LD_INT 6
10583: LESS
10584: IFFALSE 10559
// ComTurnUnit ( Kaia , Kurt ) ;
10586: LD_EXP 30
10590: PPUSH
10591: LD_EXP 34
10595: PPUSH
10596: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
10600: LD_EXP 30
10604: PPUSH
10605: LD_STRING DK-scout-4
10607: PPUSH
10608: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
10612: LD_EXP 34
10616: PPUSH
10617: LD_EXP 30
10621: PPUSH
10622: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
10626: LD_EXP 34
10630: PPUSH
10631: LD_STRING DKs-scout-5
10633: PPUSH
10634: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
10638: LD_EXP 30
10642: PPUSH
10643: LD_STRING DK-scout-6
10645: PPUSH
10646: CALL_OW 88
// if Mike then
10650: LD_EXP 27
10654: IFFALSE 10706
// begin Say ( Mike , DM-scout-7 ) ;
10656: LD_EXP 27
10660: PPUSH
10661: LD_STRING DM-scout-7
10663: PPUSH
10664: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
10668: LD_EXP 30
10672: PPUSH
10673: LD_EXP 27
10677: PPUSH
10678: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
10682: LD_EXP 30
10686: PPUSH
10687: LD_STRING DK-scout-8
10689: PPUSH
10690: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
10694: LD_EXP 27
10698: PPUSH
10699: LD_STRING DM-scout-9
10701: PPUSH
10702: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
10706: LD_INT 184
10708: PPUSH
10709: LD_INT 100
10711: PPUSH
10712: LD_INT 2
10714: PPUSH
10715: LD_INT 12
10717: NEG
10718: PPUSH
10719: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
10723: LD_INT 184
10725: PPUSH
10726: LD_INT 100
10728: PPUSH
10729: LD_INT 2
10731: PPUSH
10732: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
10736: LD_INT 184
10738: PPUSH
10739: LD_INT 100
10741: PPUSH
10742: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
10746: LD_EXP 34
10750: PPUSH
10751: LD_STRING DKs-scout-10
10753: PPUSH
10754: CALL_OW 88
// wait ( 0 0$1 ) ;
10758: LD_INT 35
10760: PPUSH
10761: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
10765: LD_INT 144
10767: PPUSH
10768: LD_INT 65
10770: PPUSH
10771: LD_INT 2
10773: PPUSH
10774: LD_INT 12
10776: NEG
10777: PPUSH
10778: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
10782: LD_INT 144
10784: PPUSH
10785: LD_INT 65
10787: PPUSH
10788: LD_INT 2
10790: PPUSH
10791: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
10795: LD_INT 144
10797: PPUSH
10798: LD_INT 65
10800: PPUSH
10801: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
10805: LD_EXP 34
10809: PPUSH
10810: LD_STRING DKs-scout-11
10812: PPUSH
10813: CALL_OW 88
// wait ( 0 0$1 ) ;
10817: LD_INT 35
10819: PPUSH
10820: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
10824: LD_EXP 34
10828: PPUSH
10829: CALL_OW 87
// if Mike and not Givi then
10833: LD_EXP 27
10837: PUSH
10838: LD_EXP 26
10842: NOT
10843: AND
10844: IFFALSE 10870
// begin Say ( Mike , DM-scout-a-1 ) ;
10846: LD_EXP 27
10850: PPUSH
10851: LD_STRING DM-scout-a-1
10853: PPUSH
10854: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
10858: LD_EXP 25
10862: PPUSH
10863: LD_STRING DH-scout-a-2
10865: PPUSH
10866: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10870: LD_EXP 34
10874: PUSH
10875: LD_EXP 27
10879: PUSH
10880: EMPTY
10881: LIST
10882: LIST
10883: PPUSH
10884: LD_INT 2
10886: PPUSH
10887: CALL_OW 235
// InGameOff ;
10891: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
10895: LD_STRING Hill
10897: PPUSH
10898: CALL_OW 337
// allowToPatrol := true ;
10902: LD_ADDR_EXP 12
10906: PUSH
10907: LD_INT 1
10909: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10910: LD_INT 3150
10912: PPUSH
10913: CALL_OW 67
// InitHc ;
10917: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 ] [ Difficulty ] do
10921: LD_ADDR_VAR 0 1
10925: PUSH
10926: DOUBLE
10927: LD_INT 1
10929: DEC
10930: ST_TO_ADDR
10931: LD_INT 3
10933: PUSH
10934: LD_INT 3
10936: PUSH
10937: LD_INT 2
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: LIST
10944: PUSH
10945: LD_OWVAR 67
10949: ARRAY
10950: PUSH
10951: FOR_TO
10952: IFFALSE 11211
// begin uc_side := 2 ;
10954: LD_ADDR_OWVAR 20
10958: PUSH
10959: LD_INT 2
10961: ST_TO_ADDR
// uc_nation := 2 ;
10962: LD_ADDR_OWVAR 21
10966: PUSH
10967: LD_INT 2
10969: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 ] [ Difficulty ] ) ;
10970: LD_INT 0
10972: PPUSH
10973: LD_INT 1
10975: PUSH
10976: LD_INT 3
10978: PUSH
10979: LD_INT 1
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: LIST
10986: PUSH
10987: LD_VAR 0 1
10991: PUSH
10992: LD_INT 3
10994: MOD
10995: PUSH
10996: LD_INT 1
10998: PLUS
10999: ARRAY
11000: PPUSH
11001: LD_INT 3
11003: PUSH
11004: LD_INT 2
11006: PUSH
11007: LD_INT 2
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: LIST
11014: PUSH
11015: LD_OWVAR 67
11019: ARRAY
11020: PPUSH
11021: CALL_OW 380
// un := CreateHuman ;
11025: LD_ADDR_VAR 0 2
11029: PUSH
11030: CALL_OW 44
11034: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
11035: LD_ADDR_EXP 37
11039: PUSH
11040: LD_EXP 37
11044: PUSH
11045: LD_VAR 0 2
11049: UNION
11050: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
11051: LD_INT 2
11053: PPUSH
11054: LD_INT 2
11056: PPUSH
11057: LD_INT 13
11059: PPUSH
11060: LD_INT 2
11062: PUSH
11063: LD_INT 1
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: PUSH
11070: LD_VAR 0 1
11074: PUSH
11075: LD_INT 2
11077: MOD
11078: PUSH
11079: LD_INT 1
11081: PLUS
11082: ARRAY
11083: PPUSH
11084: LD_INT 1
11086: PPUSH
11087: LD_INT 27
11089: PUSH
11090: LD_INT 25
11092: PUSH
11093: LD_INT 27
11095: PUSH
11096: LD_INT 23
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: PUSH
11105: LD_OWVAR 67
11109: PUSH
11110: LD_INT 0
11112: PPUSH
11113: LD_INT 1
11115: PPUSH
11116: CALL_OW 12
11120: PLUS
11121: ARRAY
11122: PPUSH
11123: LD_INT 77
11125: PPUSH
11126: CALL 429 0 7
// veh := CreateVehicle ;
11130: LD_ADDR_VAR 0 3
11134: PUSH
11135: CALL_OW 45
11139: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
11140: LD_VAR 0 3
11144: PPUSH
11145: LD_INT 2
11147: PPUSH
11148: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
11152: LD_VAR 0 3
11156: PPUSH
11157: LD_INT 178
11159: PPUSH
11160: LD_INT 2
11162: PPUSH
11163: LD_INT 2
11165: PPUSH
11166: LD_INT 0
11168: PPUSH
11169: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
11173: LD_VAR 0 2
11177: PPUSH
11178: LD_VAR 0 3
11182: PPUSH
11183: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
11187: LD_VAR 0 2
11191: PPUSH
11192: LD_INT 183
11194: PPUSH
11195: LD_INT 11
11197: PPUSH
11198: CALL_OW 111
// wait ( 0 0$2 ) ;
11202: LD_INT 70
11204: PPUSH
11205: CALL_OW 67
// end ;
11209: GO 10951
11211: POP
11212: POP
// end ;
11213: PPOPN 3
11215: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
11216: LD_EXP 4
11220: PUSH
11221: LD_EXP 35
11225: PPUSH
11226: CALL_OW 302
11230: AND
11231: IFFALSE 11280
11233: GO 11235
11235: DISABLE
// begin DialogueOn ;
11236: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
11240: LD_EXP 35
11244: PPUSH
11245: LD_STRING DA-lab-1
11247: PPUSH
11248: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
11252: LD_EXP 35
11256: PPUSH
11257: LD_STRING DA-lab-2
11259: PPUSH
11260: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
11264: LD_EXP 25
11268: PPUSH
11269: LD_STRING DH-lab-3
11271: PPUSH
11272: CALL_OW 88
// DialogueOff ;
11276: CALL_OW 7
// end ;
11280: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
11281: LD_INT 17
11283: PPUSH
11284: LD_INT 2
11286: PPUSH
11287: CALL_OW 321
11291: PUSH
11292: LD_INT 2
11294: EQUAL
11295: IFFALSE 11427
11297: GO 11299
11299: DISABLE
11300: LD_INT 0
11302: PPUSH
// begin DialogueOn ;
11303: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
11307: LD_EXP 35
11311: PPUSH
11312: LD_STRING DA-Cam-1
11314: PPUSH
11315: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
11319: LD_EXP 35
11323: PPUSH
11324: LD_STRING DA-Cam-2
11326: PPUSH
11327: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
11331: LD_EXP 35
11335: PPUSH
11336: LD_STRING DA-Cam-3
11338: PPUSH
11339: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
11343: LD_EXP 25
11347: PPUSH
11348: LD_STRING DH-Cam-4
11350: PPUSH
11351: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
11355: LD_EXP 30
11359: PPUSH
11360: LD_STRING DK-Cam-5
11362: PPUSH
11363: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
11367: LD_EXP 30
11371: PPUSH
11372: LD_STRING DK-Cam-6
11374: PPUSH
11375: CALL_OW 88
// DialogueOff ;
11379: CALL_OW 7
// Query ( Camera ) ;
11383: LD_STRING Camera
11385: PPUSH
11386: CALL_OW 97
// hiddenCameraAllowed := true ;
11390: LD_ADDR_EXP 5
11394: PUSH
11395: LD_INT 1
11397: ST_TO_ADDR
// for i in camAreas do
11398: LD_ADDR_VAR 0 1
11402: PUSH
11403: LD_EXP 8
11407: PUSH
11408: FOR_IN
11409: IFFALSE 11425
// SetAreaMapShow ( i , 1 ) ;
11411: LD_VAR 0 1
11415: PPUSH
11416: LD_INT 1
11418: PPUSH
11419: CALL_OW 424
11423: GO 11408
11425: POP
11426: POP
// end ;
11427: PPOPN 1
11429: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
11430: LD_EXP 8
11434: NOT
11435: PUSH
11436: LD_EXP 5
11440: AND
11441: IFFALSE 11539
11443: GO 11445
11445: DISABLE
11446: LD_INT 0
11448: PPUSH
// begin stop_talking := true ;
11449: LD_ADDR_OWVAR 56
11453: PUSH
11454: LD_INT 1
11456: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
11457: LD_ADDR_VAR 0 1
11461: PUSH
11462: LD_INT 22
11464: PUSH
11465: LD_INT 2
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PUSH
11472: LD_INT 21
11474: PUSH
11475: LD_INT 1
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PUSH
11482: LD_INT 23
11484: PUSH
11485: LD_INT 2
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: LIST
11496: PPUSH
11497: CALL_OW 69
11501: PUSH
11502: FOR_IN
11503: IFFALSE 11522
// AddExperience ( i , 2 , 450 ) ;
11505: LD_VAR 0 1
11509: PPUSH
11510: LD_INT 2
11512: PPUSH
11513: LD_INT 450
11515: PPUSH
11516: CALL_OW 492
11520: GO 11502
11522: POP
11523: POP
// stop_talking := false ;
11524: LD_ADDR_OWVAR 56
11528: PUSH
11529: LD_INT 0
11531: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
11532: LD_STRING ACH_CAMERA
11534: PPUSH
11535: CALL_OW 543
// end ;
11539: PPOPN 1
11541: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
11542: LD_EXP 9
11546: PUSH
11547: LD_EXP 11
11551: NOT
11552: AND
11553: IFFALSE 11612
11555: GO 11557
11557: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
11558: LD_EXP 9
11562: PPUSH
11563: CALL_OW 250
11567: PPUSH
11568: LD_EXP 9
11572: PPUSH
11573: CALL_OW 251
11577: PPUSH
11578: LD_INT 2
11580: PPUSH
11581: LD_INT 6
11583: NEG
11584: PPUSH
11585: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
11589: LD_EXP 9
11593: PPUSH
11594: CALL_OW 87
// wait ( 0 0$1 ) ;
11598: LD_INT 35
11600: PPUSH
11601: CALL_OW 67
// YouLost ( Spotted ) ;
11605: LD_STRING Spotted
11607: PPUSH
11608: CALL_OW 104
// end ;
11612: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
11613: LD_INT 3
11615: PUSH
11616: LD_INT 6
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: PPUSH
11623: LD_INT 2
11625: PPUSH
11626: LD_EXP 47
11630: PPUSH
11631: CALL 2049 0 3
11635: IFFALSE 11668
11637: GO 11639
11639: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
11640: LD_ADDR_EXP 9
11644: PUSH
11645: LD_INT 3
11647: PUSH
11648: LD_INT 6
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: PPUSH
11655: LD_INT 2
11657: PPUSH
11658: LD_EXP 47
11662: PPUSH
11663: CALL 2049 0 3
11667: ST_TO_ADDR
11668: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
11669: LD_INT 22
11671: PUSH
11672: LD_INT 6
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: PUSH
11679: LD_INT 30
11681: PUSH
11682: LD_INT 32
11684: PUSH
11685: EMPTY
11686: LIST
11687: LIST
11688: PUSH
11689: LD_INT 3
11691: PUSH
11692: LD_INT 24
11694: PUSH
11695: LD_INT 1000
11697: PUSH
11698: EMPTY
11699: LIST
11700: LIST
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: PUSH
11706: EMPTY
11707: LIST
11708: LIST
11709: LIST
11710: PPUSH
11711: CALL_OW 69
11715: IFFALSE 11776
11717: GO 11719
11719: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
11720: LD_ADDR_EXP 9
11724: PUSH
11725: LD_INT 22
11727: PUSH
11728: LD_INT 6
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: PUSH
11735: LD_INT 30
11737: PUSH
11738: LD_INT 32
11740: PUSH
11741: EMPTY
11742: LIST
11743: LIST
11744: PUSH
11745: LD_INT 3
11747: PUSH
11748: LD_INT 24
11750: PUSH
11751: LD_INT 1000
11753: PUSH
11754: EMPTY
11755: LIST
11756: LIST
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: LIST
11766: PPUSH
11767: CALL_OW 69
11771: PUSH
11772: LD_INT 1
11774: ARRAY
11775: ST_TO_ADDR
11776: END
// every 0 0$1 trigger russianAlert do var i , tmp , towers , noncombat ;
11777: LD_EXP 9
11781: IFFALSE 12013
11783: GO 11785
11785: DISABLE
11786: LD_INT 0
11788: PPUSH
11789: PPUSH
11790: PPUSH
11791: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11792: LD_ADDR_VAR 0 4
11796: PUSH
11797: LD_EXP 42
11801: PUSH
11802: LD_EXP 44
11806: PUSH
11807: LD_EXP 45
11811: UNION
11812: PPUSH
11813: LD_INT 3
11815: PUSH
11816: LD_INT 25
11818: PUSH
11819: LD_INT 1
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: PPUSH
11830: CALL_OW 72
11834: UNION
11835: ST_TO_ADDR
// for i in noncombat do
11836: LD_ADDR_VAR 0 1
11840: PUSH
11841: LD_VAR 0 4
11845: PUSH
11846: FOR_IN
11847: IFFALSE 11943
// begin if IsInUnit ( i ) then
11849: LD_VAR 0 1
11853: PPUSH
11854: CALL_OW 310
11858: IFFALSE 11869
// ComExitBuilding ( i ) ;
11860: LD_VAR 0 1
11864: PPUSH
11865: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
11869: LD_VAR 0 1
11873: PPUSH
11874: LD_INT 114
11876: PPUSH
11877: LD_INT 97
11879: PPUSH
11880: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
11884: LD_VAR 0 1
11888: PPUSH
11889: LD_INT 99
11891: PPUSH
11892: LD_INT 128
11894: PPUSH
11895: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
11899: LD_VAR 0 1
11903: PPUSH
11904: LD_INT 91
11906: PPUSH
11907: LD_INT 145
11909: PPUSH
11910: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
11914: LD_VAR 0 1
11918: PPUSH
11919: LD_INT 82
11921: PPUSH
11922: LD_INT 153
11924: PPUSH
11925: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
11929: LD_VAR 0 1
11933: PPUSH
11934: LD_INT 16
11936: PPUSH
11937: CALL_OW 173
// end ;
11941: GO 11846
11943: POP
11944: POP
// if not allowHeikeAttack then
11945: LD_EXP 11
11949: NOT
11950: IFFALSE 11954
// exit ;
11952: GO 12013
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11954: LD_EXP 40
11958: PPUSH
11959: LD_STRING D9a-Kur-1
11961: PPUSH
11962: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11966: LD_EXP 43
11970: PPUSH
11971: LD_STRING D9a-Bur-1
11973: PPUSH
11974: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11978: LD_EXP 40
11982: PPUSH
11983: LD_STRING D9a-Kur-2
11985: PPUSH
11986: CALL_OW 94
// omicronFall := true ;
11990: LD_ADDR_EXP 13
11994: PUSH
11995: LD_INT 1
11997: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11998: LD_INT 105
12000: PPUSH
12001: CALL_OW 67
// retreatFromOmicron := true ;
12005: LD_ADDR_EXP 20
12009: PUSH
12010: LD_INT 1
12012: ST_TO_ADDR
// end ;
12013: PPOPN 4
12015: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
12016: LD_INT 16
12018: PPUSH
12019: LD_INT 3
12021: PUSH
12022: LD_INT 22
12024: PUSH
12025: LD_INT 2
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: PUSH
12036: LD_INT 23
12038: PUSH
12039: LD_INT 3
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PPUSH
12050: CALL_OW 70
12054: IFFALSE 12137
12056: GO 12058
12058: DISABLE
12059: LD_INT 0
12061: PPUSH
// begin enable ;
12062: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
12063: LD_ADDR_VAR 0 1
12067: PUSH
12068: LD_INT 16
12070: PPUSH
12071: LD_INT 3
12073: PUSH
12074: LD_INT 22
12076: PUSH
12077: LD_INT 2
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: PUSH
12088: LD_INT 23
12090: PUSH
12091: LD_INT 3
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PPUSH
12102: CALL_OW 70
12106: PUSH
12107: FOR_IN
12108: IFFALSE 12135
// begin escapeCounter := escapeCounter + 1 ;
12110: LD_ADDR_EXP 19
12114: PUSH
12115: LD_EXP 19
12119: PUSH
12120: LD_INT 1
12122: PLUS
12123: ST_TO_ADDR
// RemoveUnit ( i ) ;
12124: LD_VAR 0 1
12128: PPUSH
12129: CALL_OW 64
// end ;
12133: GO 12107
12135: POP
12136: POP
// end ;
12137: PPOPN 1
12139: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
12140: LD_OWVAR 1
12144: PUSH
12145: LD_INT 13650
12147: PUSH
12148: LD_INT 0
12150: PPUSH
12151: LD_INT 3150
12153: PPUSH
12154: CALL_OW 12
12158: PLUS
12159: GREATEREQUAL
12160: IFFALSE 12169
12162: GO 12164
12164: DISABLE
// SmallAmericanReinforcements ;
12165: CALL 7606 0 0
12169: END
// every 0 0$1 trigger tick >= 9 9$15 do
12170: LD_OWVAR 1
12174: PUSH
12175: LD_INT 19425
12177: GREATEREQUAL
12178: IFFALSE 12243
12180: GO 12182
12182: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
12183: LD_EXP 48
12187: PPUSH
12188: LD_INT 21
12190: PUSH
12191: LD_INT 2
12193: PUSH
12194: EMPTY
12195: LIST
12196: LIST
12197: PPUSH
12198: CALL_OW 72
12202: PPUSH
12203: LD_INT 62
12205: PPUSH
12206: LD_INT 22
12208: PPUSH
12209: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
12213: LD_EXP 49
12217: PPUSH
12218: LD_INT 69
12220: PPUSH
12221: LD_INT 27
12223: PPUSH
12224: CALL_OW 111
// wait ( 1 1$00 ) ;
12228: LD_INT 2100
12230: PPUSH
12231: CALL_OW 67
// startAttackOnOmicron := true ;
12235: LD_ADDR_EXP 6
12239: PUSH
12240: LD_INT 1
12242: ST_TO_ADDR
// end ;
12243: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
12244: LD_EXP 22
12248: PUSH
12249: LD_INT 0
12251: EQUAL
12252: IFFALSE 14259
12254: GO 12256
12256: DISABLE
12257: LD_INT 0
12259: PPUSH
12260: PPUSH
12261: PPUSH
12262: PPUSH
12263: PPUSH
12264: PPUSH
12265: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
12266: LD_INT 5
12268: PPUSH
12269: LD_INT 2
12271: PPUSH
12272: CALL_OW 343
// PrepareOmarForces ;
12276: CALL 2619 0 0
// wait ( 0 0$03 ) ;
12280: LD_INT 105
12282: PPUSH
12283: CALL_OW 67
// allowHeikeAttack := true ;
12287: LD_ADDR_EXP 11
12291: PUSH
12292: LD_INT 1
12294: ST_TO_ADDR
// activeGrishkoAI := false ;
12295: LD_ADDR_EXP 10
12299: PUSH
12300: LD_INT 0
12302: ST_TO_ADDR
// if not hillBase then
12303: LD_EXP 15
12307: NOT
12308: IFFALSE 12317
// ChangeMissionObjectives ( HillDone ) ;
12310: LD_STRING HillDone
12312: PPUSH
12313: CALL_OW 337
// CenterOnUnits ( Omar ) ;
12317: LD_EXP 33
12321: PPUSH
12322: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
12326: LD_ADDR_VAR 0 1
12330: PUSH
12331: LD_INT 22
12333: PUSH
12334: LD_INT 2
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: LD_INT 21
12343: PUSH
12344: LD_INT 1
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PPUSH
12355: CALL_OW 69
12359: PUSH
12360: FOR_IN
12361: IFFALSE 12385
// if HasTask ( i ) then
12363: LD_VAR 0 1
12367: PPUSH
12368: CALL_OW 314
12372: IFFALSE 12383
// ComHold ( i ) ;
12374: LD_VAR 0 1
12378: PPUSH
12379: CALL_OW 140
12383: GO 12360
12385: POP
12386: POP
// DialogueOn ;
12387: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
12391: LD_EXP 33
12395: PPUSH
12396: LD_STRING DO-assault-1
12398: PPUSH
12399: CALL_OW 94
// DialogueOff ;
12403: CALL_OW 7
// game_speed := 4 ;
12407: LD_ADDR_OWVAR 65
12411: PUSH
12412: LD_INT 4
12414: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
12415: LD_ADDR_VAR 0 1
12419: PUSH
12420: LD_EXP 46
12424: PPUSH
12425: LD_INT 3
12427: PUSH
12428: LD_INT 54
12430: PUSH
12431: EMPTY
12432: LIST
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PPUSH
12438: CALL_OW 72
12442: PUSH
12443: FOR_IN
12444: IFFALSE 12463
// ComMoveXY ( i , 226 , 114 ) ;
12446: LD_VAR 0 1
12450: PPUSH
12451: LD_INT 226
12453: PPUSH
12454: LD_INT 114
12456: PPUSH
12457: CALL_OW 111
12461: GO 12443
12463: POP
12464: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
12465: LD_EXP 41
12469: PPUSH
12470: LD_INT 22
12472: PUSH
12473: LD_INT 6
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PUSH
12480: LD_INT 30
12482: PUSH
12483: LD_INT 4
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PPUSH
12494: CALL_OW 69
12498: PPUSH
12499: LD_EXP 41
12503: PPUSH
12504: CALL_OW 74
12508: PPUSH
12509: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
12513: LD_STRING Attack
12515: PPUSH
12516: CALL_OW 337
// music_class := music_combat ;
12520: LD_ADDR_OWVAR 72
12524: PUSH
12525: LD_INT 1
12527: ST_TO_ADDR
// music_nat := 4 ;
12528: LD_ADDR_OWVAR 71
12532: PUSH
12533: LD_INT 4
12535: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
12536: LD_INT 5
12538: PPUSH
12539: LD_EXP 41
12543: PPUSH
12544: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12548: LD_INT 6
12550: PPUSH
12551: LD_EXP 38
12555: PPUSH
12556: LD_INT 25
12558: PUSH
12559: LD_INT 1
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: PPUSH
12566: CALL_OW 72
12570: PUSH
12571: LD_INT 4
12573: ARRAY
12574: PPUSH
12575: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
12579: LD_ADDR_VAR 0 1
12583: PUSH
12584: LD_EXP 38
12588: PPUSH
12589: LD_INT 3
12591: PUSH
12592: LD_INT 25
12594: PUSH
12595: LD_INT 4
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: PPUSH
12606: CALL_OW 72
12610: PUSH
12611: FOR_IN
12612: IFFALSE 12631
// ComAgressiveMove ( i , 221 , 110 ) ;
12614: LD_VAR 0 1
12618: PPUSH
12619: LD_INT 221
12621: PPUSH
12622: LD_INT 110
12624: PPUSH
12625: CALL_OW 114
12629: GO 12611
12631: POP
12632: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
12633: LD_EXP 38
12637: PPUSH
12638: LD_INT 25
12640: PUSH
12641: LD_INT 4
12643: PUSH
12644: EMPTY
12645: LIST
12646: LIST
12647: PPUSH
12648: CALL_OW 72
12652: PPUSH
12653: LD_INT 214
12655: PPUSH
12656: LD_INT 124
12658: PPUSH
12659: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
12663: LD_EXP 38
12667: PPUSH
12668: LD_INT 25
12670: PUSH
12671: LD_INT 1
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: PPUSH
12678: CALL_OW 72
12682: PUSH
12683: LD_INT 4
12685: ARRAY
12686: PPUSH
12687: LD_INT 214
12689: PPUSH
12690: LD_INT 114
12692: PPUSH
12693: LD_INT 0
12695: PPUSH
12696: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
12700: LD_EXP 41
12704: PPUSH
12705: LD_STRING D9-Gri-1
12707: PPUSH
12708: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
12712: LD_EXP 40
12716: PPUSH
12717: LD_STRING D9-Kur-1
12719: PPUSH
12720: CALL_OW 94
// wait ( 0 0$1 ) ;
12724: LD_INT 35
12726: PPUSH
12727: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
12731: LD_EXP 33
12735: PPUSH
12736: LD_INT 233
12738: PPUSH
12739: LD_INT 130
12741: PPUSH
12742: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
12746: LD_EXP 41
12750: PPUSH
12751: LD_STRING D9-Gri-2
12753: PPUSH
12754: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12758: LD_EXP 40
12762: PPUSH
12763: LD_STRING D9-Kur-2
12765: PPUSH
12766: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
12770: LD_EXP 41
12774: PPUSH
12775: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
12779: LD_EXP 41
12783: PPUSH
12784: LD_INT 211
12786: PPUSH
12787: LD_INT 104
12789: PPUSH
12790: CALL_OW 171
// AddComHold ( Grishko ) ;
12794: LD_EXP 41
12798: PPUSH
12799: CALL_OW 200
// repeat wait ( 3 ) ;
12803: LD_INT 3
12805: PPUSH
12806: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
12810: LD_EXP 41
12814: PPUSH
12815: CALL_OW 310
12819: NOT
12820: IFFALSE 12803
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
12822: LD_EXP 38
12826: PPUSH
12827: LD_INT 34
12829: PUSH
12830: LD_INT 26
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: PPUSH
12837: CALL_OW 72
12841: PPUSH
12842: LD_EXP 41
12846: PPUSH
12847: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12851: LD_EXP 38
12855: PPUSH
12856: LD_INT 34
12858: PUSH
12859: LD_INT 26
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PPUSH
12866: CALL_OW 72
12870: PPUSH
12871: LD_INT 215
12873: PPUSH
12874: LD_INT 106
12876: PPUSH
12877: CALL_OW 174
// repeat wait ( 3 ) ;
12881: LD_INT 3
12883: PPUSH
12884: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12888: LD_EXP 41
12892: PPUSH
12893: CALL_OW 256
12897: PUSH
12898: LD_INT 1000
12900: LESS
12901: IFFALSE 12881
// NormalAttack ( 5 , Grishko ) ;
12903: LD_INT 5
12905: PPUSH
12906: LD_EXP 41
12910: PPUSH
12911: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12915: LD_INT 6
12917: PPUSH
12918: LD_EXP 38
12922: PPUSH
12923: LD_INT 25
12925: PUSH
12926: LD_INT 1
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: PPUSH
12933: CALL_OW 72
12937: PUSH
12938: LD_INT 4
12940: ARRAY
12941: PPUSH
12942: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
12946: LD_EXP 41
12950: PPUSH
12951: LD_STRING D9-Gri-3
12953: PPUSH
12954: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12958: LD_EXP 40
12962: PPUSH
12963: LD_STRING D9-Kur-3
12965: PPUSH
12966: CALL_OW 94
// music_class := music_auto ;
12970: LD_ADDR_OWVAR 72
12974: PUSH
12975: LD_INT 0
12977: ST_TO_ADDR
// music_nat := music_auto ;
12978: LD_ADDR_OWVAR 71
12982: PUSH
12983: LD_INT 0
12985: ST_TO_ADDR
// for i in omarSquad do
12986: LD_ADDR_VAR 0 1
12990: PUSH
12991: LD_EXP 38
12995: PUSH
12996: FOR_IN
12997: IFFALSE 13139
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12999: LD_VAR 0 1
13003: PPUSH
13004: CALL_OW 247
13008: PUSH
13009: LD_INT 2
13011: EQUAL
13012: PUSH
13013: LD_VAR 0 1
13017: PPUSH
13018: CALL_OW 256
13022: PUSH
13023: LD_INT 1000
13025: LESS
13026: AND
13027: IFFALSE 13093
// begin driver := IsDrivenBy ( i ) ;
13029: LD_ADDR_VAR 0 2
13033: PUSH
13034: LD_VAR 0 1
13038: PPUSH
13039: CALL_OW 311
13043: ST_TO_ADDR
// veh := i ;
13044: LD_ADDR_VAR 0 3
13048: PUSH
13049: LD_VAR 0 1
13053: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
13054: LD_VAR 0 2
13058: PPUSH
13059: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
13063: LD_VAR 0 2
13067: PPUSH
13068: LD_VAR 0 3
13072: PPUSH
13073: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
13077: LD_VAR 0 2
13081: PPUSH
13082: LD_VAR 0 3
13086: PPUSH
13087: CALL_OW 180
// end else
13091: GO 13137
// if GetLives ( i ) < 500 then
13093: LD_VAR 0 1
13097: PPUSH
13098: CALL_OW 256
13102: PUSH
13103: LD_INT 500
13105: LESS
13106: IFFALSE 13137
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
13108: LD_EXP 38
13112: PPUSH
13113: LD_INT 25
13115: PUSH
13116: LD_INT 4
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: PPUSH
13123: CALL_OW 72
13127: PPUSH
13128: LD_VAR 0 1
13132: PPUSH
13133: CALL_OW 188
// end ; end ;
13137: GO 12996
13139: POP
13140: POP
// repeat wait ( 0 0$1 ) ;
13141: LD_INT 35
13143: PPUSH
13144: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
13148: LD_EXP 38
13152: PPUSH
13153: LD_INT 3
13155: PUSH
13156: LD_INT 24
13158: PUSH
13159: LD_INT 1000
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: PUSH
13170: LD_INT 21
13172: PUSH
13173: LD_INT 2
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: PPUSH
13184: CALL_OW 72
13188: NOT
13189: PUSH
13190: LD_EXP 38
13194: PPUSH
13195: LD_INT 3
13197: PUSH
13198: LD_INT 24
13200: PUSH
13201: LD_INT 250
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: PPUSH
13212: CALL_OW 72
13216: NOT
13217: AND
13218: IFFALSE 13141
// wait ( 0 0$2 ) ;
13220: LD_INT 70
13222: PPUSH
13223: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
13227: LD_ADDR_VAR 0 5
13231: PUSH
13232: LD_EXP 38
13236: PPUSH
13237: LD_INT 58
13239: PUSH
13240: EMPTY
13241: LIST
13242: PUSH
13243: LD_INT 21
13245: PUSH
13246: LD_INT 2
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: PPUSH
13257: CALL_OW 72
13261: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
13262: LD_ADDR_VAR 0 6
13266: PUSH
13267: LD_EXP 38
13271: PPUSH
13272: LD_INT 25
13274: PUSH
13275: LD_INT 3
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PUSH
13282: LD_INT 3
13284: PUSH
13285: LD_INT 55
13287: PUSH
13288: EMPTY
13289: LIST
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: PUSH
13295: EMPTY
13296: LIST
13297: LIST
13298: PPUSH
13299: CALL_OW 72
13303: ST_TO_ADDR
// for i := 1 to tmp do
13304: LD_ADDR_VAR 0 1
13308: PUSH
13309: DOUBLE
13310: LD_INT 1
13312: DEC
13313: ST_TO_ADDR
13314: LD_VAR 0 5
13318: PUSH
13319: FOR_TO
13320: IFFALSE 13350
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
13322: LD_VAR 0 6
13326: PUSH
13327: LD_VAR 0 1
13331: ARRAY
13332: PPUSH
13333: LD_VAR 0 5
13337: PUSH
13338: LD_VAR 0 1
13342: ARRAY
13343: PPUSH
13344: CALL_OW 120
13348: GO 13319
13350: POP
13351: POP
// wait ( 0 0$5 ) ;
13352: LD_INT 175
13354: PPUSH
13355: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
13359: LD_EXP 38
13363: PPUSH
13364: LD_INT 199
13366: PPUSH
13367: LD_INT 141
13369: PPUSH
13370: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
13374: LD_EXP 33
13378: PPUSH
13379: LD_INT 190
13381: PPUSH
13382: LD_INT 143
13384: PPUSH
13385: CALL_OW 114
// AddComHold ( Omar ) ;
13389: LD_EXP 33
13393: PPUSH
13394: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
13398: LD_EXP 38
13402: PPUSH
13403: LD_INT 2
13405: PUSH
13406: LD_INT 25
13408: PUSH
13409: LD_INT 1
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: PUSH
13416: LD_INT 25
13418: PUSH
13419: LD_INT 4
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: LIST
13430: PPUSH
13431: CALL_OW 72
13435: PPUSH
13436: LD_INT 161
13438: PPUSH
13439: LD_INT 130
13441: PPUSH
13442: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
13446: LD_EXP 38
13450: PPUSH
13451: LD_INT 25
13453: PUSH
13454: LD_INT 1
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: PPUSH
13461: CALL_OW 72
13465: PPUSH
13466: LD_INT 163
13468: PPUSH
13469: LD_INT 122
13471: PPUSH
13472: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
13476: LD_EXP 38
13480: PPUSH
13481: LD_INT 25
13483: PUSH
13484: LD_INT 1
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PPUSH
13491: CALL_OW 72
13495: PUSH
13496: LD_INT 4
13498: ARRAY
13499: PPUSH
13500: LD_INT 165
13502: PPUSH
13503: LD_INT 118
13505: PPUSH
13506: LD_INT 0
13508: PPUSH
13509: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
13513: LD_EXP 38
13517: PPUSH
13518: LD_INT 25
13520: PUSH
13521: LD_INT 1
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PPUSH
13528: CALL_OW 72
13532: PUSH
13533: LD_INT 4
13535: ARRAY
13536: PPUSH
13537: LD_INT 159
13539: PPUSH
13540: LD_INT 116
13542: PPUSH
13543: LD_INT 0
13545: PPUSH
13546: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
13550: LD_EXP 38
13554: PPUSH
13555: LD_INT 21
13557: PUSH
13558: LD_INT 2
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PPUSH
13565: CALL_OW 72
13569: PPUSH
13570: LD_INT 169
13572: PPUSH
13573: LD_INT 114
13575: PPUSH
13576: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
13580: LD_INT 35
13582: PPUSH
13583: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
13587: LD_ADDR_VAR 0 5
13591: PUSH
13592: LD_EXP 38
13596: PPUSH
13597: LD_INT 25
13599: PUSH
13600: LD_INT 1
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PPUSH
13607: CALL_OW 72
13611: ST_TO_ADDR
// for i in tmp do
13612: LD_ADDR_VAR 0 1
13616: PUSH
13617: LD_VAR 0 5
13621: PUSH
13622: FOR_IN
13623: IFFALSE 13720
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
13625: LD_VAR 0 1
13629: PPUSH
13630: CALL_OW 256
13634: PUSH
13635: LD_INT 600
13637: LESS
13638: PUSH
13639: LD_VAR 0 1
13643: PPUSH
13644: LD_INT 161
13646: PPUSH
13647: LD_INT 130
13649: PPUSH
13650: CALL_OW 297
13654: PUSH
13655: LD_INT 6
13657: GREATER
13658: AND
13659: IFFALSE 13676
// ComMoveXY ( i , 161 , 130 ) ;
13661: LD_VAR 0 1
13665: PPUSH
13666: LD_INT 161
13668: PPUSH
13669: LD_INT 130
13671: PPUSH
13672: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
13676: LD_VAR 0 1
13680: PPUSH
13681: CALL_OW 256
13685: PUSH
13686: LD_INT 1000
13688: EQUAL
13689: PUSH
13690: LD_VAR 0 1
13694: PPUSH
13695: CALL_OW 314
13699: NOT
13700: AND
13701: IFFALSE 13718
// ComAgressiveMove ( i , 160 , 109 ) ;
13703: LD_VAR 0 1
13707: PPUSH
13708: LD_INT 160
13710: PPUSH
13711: LD_INT 109
13713: PPUSH
13714: CALL_OW 114
// end ;
13718: GO 13622
13720: POP
13721: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
13722: LD_ADDR_VAR 0 5
13726: PUSH
13727: LD_EXP 38
13731: PPUSH
13732: LD_INT 21
13734: PUSH
13735: LD_INT 2
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: PPUSH
13742: CALL_OW 72
13746: ST_TO_ADDR
// for i in tmp do
13747: LD_ADDR_VAR 0 1
13751: PUSH
13752: LD_VAR 0 5
13756: PUSH
13757: FOR_IN
13758: IFFALSE 14024
// begin tmp2 := IsDrivenBy ( i ) ;
13760: LD_ADDR_VAR 0 6
13764: PUSH
13765: LD_VAR 0 1
13769: PPUSH
13770: CALL_OW 311
13774: ST_TO_ADDR
// if not tmp2 then
13775: LD_VAR 0 6
13779: NOT
13780: IFFALSE 13784
// continue ;
13782: GO 13757
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
13784: LD_VAR 0 1
13788: PPUSH
13789: CALL_OW 256
13793: PUSH
13794: LD_INT 600
13796: GREATEREQUAL
13797: PUSH
13798: LD_VAR 0 1
13802: PPUSH
13803: CALL_OW 110
13807: PUSH
13808: LD_INT 1
13810: EQUAL
13811: AND
13812: IFFALSE 13826
// SetTag ( i , 0 ) ;
13814: LD_VAR 0 1
13818: PPUSH
13819: LD_INT 0
13821: PPUSH
13822: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
13826: LD_VAR 0 1
13830: PPUSH
13831: CALL_OW 256
13835: PUSH
13836: LD_INT 600
13838: GREATEREQUAL
13839: PUSH
13840: LD_VAR 0 1
13844: PPUSH
13845: CALL_OW 110
13849: NOT
13850: AND
13851: IFFALSE 13877
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13853: LD_VAR 0 1
13857: PPUSH
13858: LD_VAR 0 7
13862: PPUSH
13863: LD_VAR 0 1
13867: PPUSH
13868: CALL_OW 74
13872: PPUSH
13873: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13877: LD_VAR 0 1
13881: PPUSH
13882: CALL_OW 256
13886: PUSH
13887: LD_INT 600
13889: LESS
13890: PUSH
13891: LD_VAR 0 1
13895: PPUSH
13896: CALL_OW 110
13900: NOT
13901: AND
13902: IFFALSE 13931
// begin SetTag ( i , 1 ) ;
13904: LD_VAR 0 1
13908: PPUSH
13909: LD_INT 1
13911: PPUSH
13912: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13916: LD_VAR 0 1
13920: PPUSH
13921: LD_INT 202
13923: PPUSH
13924: LD_INT 150
13926: PPUSH
13927: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13931: LD_VAR 0 1
13935: PPUSH
13936: CALL_OW 110
13940: PUSH
13941: LD_INT 1
13943: EQUAL
13944: PUSH
13945: LD_VAR 0 1
13949: PPUSH
13950: LD_INT 202
13952: PPUSH
13953: LD_INT 150
13955: PPUSH
13956: CALL_OW 297
13960: PUSH
13961: LD_INT 6
13963: LESS
13964: AND
13965: PUSH
13966: LD_VAR 0 6
13970: AND
13971: IFFALSE 14022
// begin ComExitVehicle ( tmp2 ) ;
13973: LD_VAR 0 6
13977: PPUSH
13978: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13982: LD_VAR 0 6
13986: PPUSH
13987: LD_VAR 0 1
13991: PPUSH
13992: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13996: LD_VAR 0 6
14000: PPUSH
14001: LD_INT 700
14003: PPUSH
14004: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
14008: LD_VAR 0 6
14012: PPUSH
14013: LD_VAR 0 1
14017: PPUSH
14018: CALL_OW 180
// end ; end ;
14022: GO 13757
14024: POP
14025: POP
// until kirovDestroyed ;
14026: LD_EXP 16
14030: IFFALSE 13580
// repeat wait ( 0 0$1 ) ;
14032: LD_INT 35
14034: PPUSH
14035: CALL_OW 67
// for i in omarSquad union Omar do
14039: LD_ADDR_VAR 0 1
14043: PUSH
14044: LD_EXP 38
14048: PUSH
14049: LD_EXP 33
14053: UNION
14054: PUSH
14055: FOR_IN
14056: IFFALSE 14226
// if IsInArea ( i , southRoadArea ) then
14058: LD_VAR 0 1
14062: PPUSH
14063: LD_INT 15
14065: PPUSH
14066: CALL_OW 308
14070: IFFALSE 14083
// RemoveUnit ( i ) else
14072: LD_VAR 0 1
14076: PPUSH
14077: CALL_OW 64
14081: GO 14224
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
14083: LD_VAR 0 1
14087: PPUSH
14088: CALL_OW 257
14092: PUSH
14093: LD_INT 3
14095: EQUAL
14096: PUSH
14097: LD_VAR 0 1
14101: PPUSH
14102: CALL_OW 310
14106: NOT
14107: AND
14108: PUSH
14109: LD_INT 22
14111: PUSH
14112: LD_INT 5
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: PUSH
14119: LD_INT 24
14121: PUSH
14122: LD_INT 251
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: PUSH
14129: LD_INT 21
14131: PUSH
14132: LD_INT 2
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: LD_INT 58
14141: PUSH
14142: EMPTY
14143: LIST
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: PPUSH
14151: CALL_OW 69
14155: AND
14156: IFFALSE 14209
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
14158: LD_VAR 0 1
14162: PPUSH
14163: LD_INT 22
14165: PUSH
14166: LD_INT 5
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: PUSH
14173: LD_INT 21
14175: PUSH
14176: LD_INT 2
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: PUSH
14183: LD_INT 58
14185: PUSH
14186: EMPTY
14187: LIST
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: LIST
14193: PPUSH
14194: CALL_OW 69
14198: PUSH
14199: LD_INT 1
14201: ARRAY
14202: PPUSH
14203: CALL_OW 120
14207: GO 14224
// ComMoveXY ( i , 208 , 162 ) ;
14209: LD_VAR 0 1
14213: PPUSH
14214: LD_INT 208
14216: PPUSH
14217: LD_INT 162
14219: PPUSH
14220: CALL_OW 111
// end ;
14224: GO 14055
14226: POP
14227: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
14228: LD_INT 22
14230: PUSH
14231: LD_INT 5
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: PUSH
14238: LD_INT 21
14240: PUSH
14241: LD_INT 1
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: PPUSH
14252: CALL_OW 69
14256: NOT
14257: IFFALSE 14032
// end ;
14259: PPOPN 7
14261: END
// every 0 0$1 trigger IsDead ( kirov ) do
14262: LD_INT 71
14264: PPUSH
14265: CALL_OW 301
14269: IFFALSE 14286
14271: GO 14273
14273: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
14274: LD_EXP 25
14278: PPUSH
14279: LD_STRING DH-1-Kirov
14281: PPUSH
14282: CALL_OW 88
14286: END
// every 0 0$1 trigger See ( 2 , beria ) do
14287: LD_INT 2
14289: PPUSH
14290: LD_INT 106
14292: PPUSH
14293: CALL_OW 292
14297: IFFALSE 14314
14299: GO 14301
14301: DISABLE
// Say ( Heike , DH-1-Beria ) ;
14302: LD_EXP 25
14306: PPUSH
14307: LD_STRING DH-1-Beria
14309: PPUSH
14310: CALL_OW 88
14314: END
// every 0 0$1 trigger See ( 2 , kagan ) do
14315: LD_INT 2
14317: PPUSH
14318: LD_INT 112
14320: PPUSH
14321: CALL_OW 292
14325: IFFALSE 14570
14327: GO 14329
14329: DISABLE
// begin DialogueOn ;
14330: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
14334: LD_INT 112
14336: PPUSH
14337: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
14341: LD_EXP 25
14345: PPUSH
14346: LD_STRING DH-1-Kagan
14348: PPUSH
14349: CALL_OW 88
// if Kamil then
14353: LD_EXP 29
14357: IFFALSE 14395
// begin Say ( Kamil , DKam-Kagan-2 ) ;
14359: LD_EXP 29
14363: PPUSH
14364: LD_STRING DKam-Kagan-2
14366: PPUSH
14367: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
14371: LD_EXP 26
14375: PPUSH
14376: LD_STRING DG-Kagan-3
14378: PPUSH
14379: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
14383: LD_EXP 26
14387: PPUSH
14388: LD_STRING DG-Kagan-4
14390: PPUSH
14391: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
14395: LD_STRING KaganBase
14397: PPUSH
14398: CALL_OW 97
14402: PUSH
14403: LD_INT 1
14405: DOUBLE
14406: EQUAL
14407: IFTRUE 14411
14409: GO 14506
14411: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
14412: LD_EXP 25
14416: PPUSH
14417: LD_STRING DH-Kagan-5
14419: PPUSH
14420: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
14424: LD_EXP 25
14428: PPUSH
14429: LD_STRING DH-Kagan-6
14431: PPUSH
14432: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
14436: LD_EXP 36
14440: PPUSH
14441: LD_STRING DShar-Kagan-7
14443: PPUSH
14444: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
14448: LD_EXP 25
14452: PPUSH
14453: LD_STRING DH-Kagan-8
14455: PPUSH
14456: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
14460: LD_EXP 25
14464: PPUSH
14465: LD_STRING DH-Kagan-9
14467: PPUSH
14468: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
14472: LD_EXP 36
14476: PPUSH
14477: LD_STRING DShar-Kagan-10
14479: PPUSH
14480: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
14484: LD_EXP 25
14488: PPUSH
14489: LD_STRING DH-Kagan-11
14491: PPUSH
14492: CALL_OW 88
// kaganCaptured := true ;
14496: LD_ADDR_EXP 24
14500: PUSH
14501: LD_INT 1
14503: ST_TO_ADDR
// end ; 2 :
14504: GO 14566
14506: LD_INT 2
14508: DOUBLE
14509: EQUAL
14510: IFTRUE 14514
14512: GO 14565
14514: POP
// begin Say ( Heike , DH-Kagan-a-5 ) ;
14515: LD_EXP 25
14519: PPUSH
14520: LD_STRING DH-Kagan-a-5
14522: PPUSH
14523: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
14527: LD_EXP 25
14531: PPUSH
14532: LD_STRING DH-Kagan-a-6
14534: PPUSH
14535: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
14539: LD_EXP 25
14543: PPUSH
14544: LD_STRING DH-Kagan-a-7
14546: PPUSH
14547: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
14551: LD_EXP 26
14555: PPUSH
14556: LD_STRING DG-Kagan-a-8
14558: PPUSH
14559: CALL_OW 88
// end ; end ;
14563: GO 14566
14565: POP
// DialogueOff ;
14566: CALL_OW 7
// end ;
14570: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
14571: LD_EXP 18
14575: PUSH
14576: LD_INT 112
14578: PPUSH
14579: CALL_OW 255
14583: PUSH
14584: LD_INT 2
14586: EQUAL
14587: OR
14588: IFFALSE 14600
14590: GO 14592
14592: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
14593: LD_STRING KaganDone
14595: PPUSH
14596: CALL_OW 337
14600: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
14601: LD_EXP 6
14605: PUSH
14606: LD_EXP 48
14610: PPUSH
14611: LD_INT 95
14613: PUSH
14614: LD_INT 19
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: PPUSH
14621: CALL_OW 72
14625: AND
14626: IFFALSE 14703
14628: GO 14630
14630: DISABLE
// begin DialogueOn ;
14631: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
14635: LD_INT 63
14637: PPUSH
14638: LD_INT 32
14640: PPUSH
14641: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
14645: LD_INT 63
14647: PPUSH
14648: LD_INT 32
14650: PPUSH
14651: LD_INT 2
14653: PPUSH
14654: LD_INT 12
14656: NEG
14657: PPUSH
14658: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
14662: LD_EXP 25
14666: PPUSH
14667: LD_STRING DH-Omicron-1
14669: PPUSH
14670: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
14674: LD_EXP 27
14678: PPUSH
14679: LD_STRING DM-Omicron-2
14681: PPUSH
14682: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
14686: LD_INT 63
14688: PPUSH
14689: LD_INT 32
14691: PPUSH
14692: LD_INT 2
14694: PPUSH
14695: CALL_OW 331
// DialogueOff ;
14699: CALL_OW 7
// end ;
14703: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
14704: LD_INT 2
14706: PPUSH
14707: LD_EXP 50
14711: PPUSH
14712: CALL_OW 292
14716: PUSH
14717: LD_EXP 50
14721: PPUSH
14722: CALL_OW 255
14726: PUSH
14727: LD_INT 2
14729: EQUAL
14730: OR
14731: PUSH
14732: LD_INT 106
14734: PPUSH
14735: CALL_OW 255
14739: PUSH
14740: LD_INT 2
14742: EQUAL
14743: OR
14744: PUSH
14745: LD_EXP 50
14749: PPUSH
14750: CALL_OW 302
14754: AND
14755: PUSH
14756: LD_EXP 25
14760: PPUSH
14761: CALL_OW 302
14765: AND
14766: PUSH
14767: LD_EXP 35
14771: PPUSH
14772: CALL_OW 302
14776: AND
14777: IFFALSE 15398
14779: GO 14781
14781: DISABLE
14782: LD_INT 0
14784: PPUSH
14785: PPUSH
14786: PPUSH
14787: PPUSH
14788: PPUSH
// begin DialogueOn ;
14789: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
14793: LD_INT 111
14795: PPUSH
14796: LD_INT 90
14798: PPUSH
14799: LD_INT 2
14801: PPUSH
14802: LD_INT 6
14804: NEG
14805: PPUSH
14806: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
14810: LD_INT 111
14812: PPUSH
14813: LD_INT 90
14815: PPUSH
14816: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
14820: LD_EXP 35
14824: PPUSH
14825: LD_STRING DA-Cap-1
14827: PPUSH
14828: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
14832: LD_EXP 25
14836: PPUSH
14837: LD_STRING DH-Cap-2
14839: PPUSH
14840: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
14844: LD_INT 111
14846: PPUSH
14847: LD_INT 90
14849: PPUSH
14850: LD_INT 2
14852: PPUSH
14853: CALL_OW 331
// DialogueOff ;
14857: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
14861: LD_INT 35
14863: PPUSH
14864: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) ;
14868: LD_EXP 17
14872: PUSH
14873: LD_INT 106
14875: PPUSH
14876: CALL_OW 255
14880: PUSH
14881: LD_INT 2
14883: EQUAL
14884: OR
14885: PUSH
14886: LD_EXP 50
14890: PPUSH
14891: CALL_OW 255
14895: PUSH
14896: LD_INT 2
14898: EQUAL
14899: OR
14900: PUSH
14901: LD_EXP 50
14905: PPUSH
14906: CALL_OW 302
14910: AND
14911: PUSH
14912: LD_EXP 35
14916: PPUSH
14917: CALL_OW 302
14921: AND
14922: PUSH
14923: LD_INT 2
14925: PPUSH
14926: CALL_OW 463
14930: NOT
14931: AND
14932: IFFALSE 14861
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14934: LD_ADDR_VAR 0 2
14938: PUSH
14939: LD_EXP 37
14943: PUSH
14944: LD_EXP 28
14948: PUSH
14949: LD_EXP 29
14953: PUSH
14954: LD_EXP 31
14958: PUSH
14959: LD_EXP 30
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: UNION
14970: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14971: LD_ADDR_VAR 0 2
14975: PUSH
14976: LD_VAR 0 2
14980: PPUSH
14981: LD_INT 50
14983: PUSH
14984: EMPTY
14985: LIST
14986: PPUSH
14987: CALL_OW 72
14991: ST_TO_ADDR
// if tmp < 2 then
14992: LD_VAR 0 2
14996: PUSH
14997: LD_INT 2
14999: LESS
15000: IFFALSE 15012
// q := 2 else
15002: LD_ADDR_VAR 0 4
15006: PUSH
15007: LD_INT 2
15009: ST_TO_ADDR
15010: GO 15025
// q := Query ( LabCap ) ;
15012: LD_ADDR_VAR 0 4
15016: PUSH
15017: LD_STRING LabCap
15019: PPUSH
15020: CALL_OW 97
15024: ST_TO_ADDR
// case q of 1 :
15025: LD_VAR 0 4
15029: PUSH
15030: LD_INT 1
15032: DOUBLE
15033: EQUAL
15034: IFTRUE 15038
15036: GO 15362
15038: POP
// begin DoNotAttack ( 2 , ruLab ) ;
15039: LD_INT 2
15041: PPUSH
15042: LD_EXP 50
15046: PPUSH
15047: CALL_OW 471
// labCaptured := true ;
15051: LD_ADDR_EXP 21
15055: PUSH
15056: LD_INT 1
15058: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
15059: LD_EXP 25
15063: PPUSH
15064: LD_STRING DH-Cap-a-1
15066: PPUSH
15067: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
15071: LD_EXP 35
15075: PPUSH
15076: LD_STRING DA-Cap-a-2
15078: PPUSH
15079: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike ] ^ [ sel_changeable ] ^ tmp ;
15083: LD_ADDR_VAR 0 5
15087: PUSH
15088: LD_EXP 35
15092: PUSH
15093: LD_INT -3
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: LD_INT -2
15102: PUSH
15103: LD_INT -4
15105: PUSH
15106: LD_EXP 25
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: LIST
15115: ADD
15116: PUSH
15117: LD_INT -3
15119: PUSH
15120: EMPTY
15121: LIST
15122: ADD
15123: PUSH
15124: LD_VAR 0 2
15128: ADD
15129: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
15130: LD_ADDR_VAR 0 3
15134: PUSH
15135: LD_STRING Select two characters to go with Aviradze
15137: PPUSH
15138: LD_INT 2
15140: PPUSH
15141: LD_INT 2
15143: PPUSH
15144: LD_VAR 0 5
15148: PPUSH
15149: EMPTY
15150: PPUSH
15151: CALL_OW 42
15155: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
15156: LD_EXP 50
15160: PPUSH
15161: LD_INT 8
15163: PPUSH
15164: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
15168: LD_EXP 35
15172: PPUSH
15173: LD_INT 8
15175: PPUSH
15176: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
15180: LD_ADDR_EXP 39
15184: PUSH
15185: LD_EXP 35
15189: PUSH
15190: EMPTY
15191: LIST
15192: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
15193: LD_EXP 35
15197: PPUSH
15198: CALL_OW 310
15202: IFFALSE 15213
// ComExit ( Aviradze ) ;
15204: LD_EXP 35
15208: PPUSH
15209: CALL 867 0 1
// wait ( 3 ) ;
15213: LD_INT 3
15215: PPUSH
15216: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
15220: LD_EXP 35
15224: PPUSH
15225: LD_EXP 50
15229: PPUSH
15230: CALL_OW 120
// for i := 1 to 2 do
15234: LD_ADDR_VAR 0 1
15238: PUSH
15239: DOUBLE
15240: LD_INT 1
15242: DEC
15243: ST_TO_ADDR
15244: LD_INT 2
15246: PUSH
15247: FOR_TO
15248: IFFALSE 15351
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
15250: LD_ADDR_EXP 39
15254: PUSH
15255: LD_EXP 39
15259: PUSH
15260: LD_VAR 0 3
15264: PUSH
15265: LD_VAR 0 1
15269: ARRAY
15270: UNION
15271: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
15272: LD_VAR 0 3
15276: PUSH
15277: LD_VAR 0 1
15281: ARRAY
15282: PPUSH
15283: LD_INT 8
15285: PPUSH
15286: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
15290: LD_VAR 0 3
15294: PUSH
15295: LD_VAR 0 1
15299: ARRAY
15300: PPUSH
15301: CALL_OW 310
15305: IFFALSE 15322
// ComExit ( tmp2 [ i ] ) ;
15307: LD_VAR 0 3
15311: PUSH
15312: LD_VAR 0 1
15316: ARRAY
15317: PPUSH
15318: CALL 867 0 1
// wait ( 3 ) ;
15322: LD_INT 3
15324: PPUSH
15325: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
15329: LD_VAR 0 3
15333: PUSH
15334: LD_VAR 0 1
15338: ARRAY
15339: PPUSH
15340: LD_EXP 50
15344: PPUSH
15345: CALL_OW 120
// end ;
15349: GO 15247
15351: POP
15352: POP
// SetAchievement ( ACH_LAB ) ;
15353: LD_STRING ACH_LAB
15355: PPUSH
15356: CALL_OW 543
// end ; 2 :
15360: GO 15398
15362: LD_INT 2
15364: DOUBLE
15365: EQUAL
15366: IFTRUE 15370
15368: GO 15397
15370: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
15371: LD_EXP 25
15375: PPUSH
15376: LD_STRING DH-Cap-b-1
15378: PPUSH
15379: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
15383: LD_EXP 35
15387: PPUSH
15388: LD_STRING DA-Cap-b-2
15390: PPUSH
15391: CALL_OW 88
// end ; end ;
15395: GO 15398
15397: POP
// end ;
15398: PPOPN 5
15400: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
15401: LD_INT 10
15403: PPUSH
15404: LD_INT 22
15406: PUSH
15407: LD_INT 2
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: PUSH
15414: LD_INT 30
15416: PUSH
15417: LD_INT 31
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PPUSH
15428: CALL_OW 70
15432: PUSH
15433: LD_INT 2
15435: GREATEREQUAL
15436: IFFALSE 15448
15438: GO 15440
15440: DISABLE
// SetAchievement ( ACH_KING ) ;
15441: LD_STRING ACH_KING
15443: PPUSH
15444: CALL_OW 543
15448: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
15449: LD_EXP 11
15453: NOT
15454: PUSH
15455: LD_INT 10
15457: PPUSH
15458: LD_INT 22
15460: PUSH
15461: LD_INT 2
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: PUSH
15468: LD_INT 2
15470: PUSH
15471: LD_INT 30
15473: PUSH
15474: LD_INT 31
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PUSH
15481: LD_INT 30
15483: PUSH
15484: LD_INT 4
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: LIST
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PPUSH
15500: CALL_OW 70
15504: AND
15505: IFFALSE 15525
15507: GO 15509
15509: DISABLE
// begin hillBase := true ;
15510: LD_ADDR_EXP 15
15514: PUSH
15515: LD_INT 1
15517: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
15518: LD_STRING HillDone
15520: PPUSH
15521: CALL_OW 337
// end ;
15525: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
15526: LD_EXP 30
15530: PUSH
15531: LD_EXP 30
15535: PPUSH
15536: CALL_OW 256
15540: PUSH
15541: LD_INT 3
15543: LESS
15544: AND
15545: IFFALSE 15591
15547: GO 15549
15549: DISABLE
// begin DialogueOn ;
15550: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
15554: LD_EXP 30
15558: PPUSH
15559: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
15563: LD_EXP 30
15567: PPUSH
15568: LD_STRING DK-Kkilled-1
15570: PPUSH
15571: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
15575: LD_EXP 25
15579: PPUSH
15580: LD_STRING DH-Kkilled-2
15582: PPUSH
15583: CALL_OW 88
// DialogueOff ;
15587: CALL_OW 7
// end ;
15591: END
// every 0 0$1 trigger kaiaKilledByRussian do
15592: LD_EXP 23
15596: IFFALSE 15613
15598: GO 15600
15600: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
15601: LD_EXP 25
15605: PPUSH
15606: LD_STRING DH-Kkilled-3
15608: PPUSH
15609: CALL_OW 88
15613: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo ;
15614: LD_EXP 16
15618: PUSH
15619: LD_INT 106
15621: PPUSH
15622: CALL_OW 255
15626: PUSH
15627: LD_INT 2
15629: EQUAL
15630: PUSH
15631: LD_EXP 17
15635: OR
15636: AND
15637: PUSH
15638: LD_EXP 18
15642: PUSH
15643: LD_EXP 24
15647: PUSH
15648: LD_INT 112
15650: PPUSH
15651: CALL_OW 255
15655: PUSH
15656: LD_INT 2
15658: EQUAL
15659: AND
15660: OR
15661: AND
15662: IFFALSE 16844
15664: GO 15666
15666: DISABLE
15667: LD_INT 0
15669: PPUSH
15670: PPUSH
15671: PPUSH
15672: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
15673: LD_STRING GoToWest
15675: PPUSH
15676: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
15680: LD_INT 17
15682: PPUSH
15683: LD_INT 1
15685: PPUSH
15686: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
15690: LD_INT 35
15692: PPUSH
15693: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15697: LD_ADDR_VAR 0 2
15701: PUSH
15702: LD_INT 17
15704: PPUSH
15705: LD_INT 22
15707: PUSH
15708: LD_INT 2
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: PUSH
15715: LD_INT 2
15717: PUSH
15718: LD_INT 21
15720: PUSH
15721: LD_INT 1
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: LD_INT 21
15730: PUSH
15731: LD_INT 2
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: PUSH
15738: LD_INT 3
15740: PUSH
15741: LD_INT 58
15743: PUSH
15744: EMPTY
15745: LIST
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: LIST
15759: PUSH
15760: EMPTY
15761: LIST
15762: LIST
15763: PPUSH
15764: CALL_OW 70
15768: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15769: LD_ADDR_VAR 0 3
15773: PUSH
15774: LD_INT 22
15776: PUSH
15777: LD_INT 2
15779: PUSH
15780: EMPTY
15781: LIST
15782: LIST
15783: PUSH
15784: LD_INT 3
15786: PUSH
15787: LD_INT 55
15789: PUSH
15790: EMPTY
15791: LIST
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PUSH
15797: LD_INT 2
15799: PUSH
15800: LD_INT 21
15802: PUSH
15803: LD_INT 1
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PUSH
15810: LD_INT 21
15812: PUSH
15813: LD_INT 2
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: PUSH
15820: LD_INT 3
15822: PUSH
15823: LD_INT 58
15825: PUSH
15826: EMPTY
15827: LIST
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: LIST
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: LIST
15846: PPUSH
15847: CALL_OW 69
15851: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15852: LD_VAR 0 2
15856: PUSH
15857: LD_INT 0
15859: PLUS
15860: PUSH
15861: LD_VAR 0 3
15865: PUSH
15866: LD_INT 0
15868: PLUS
15869: EQUAL
15870: IFFALSE 15690
// SaveCharacters ( Heike , 04_1_Heike ) ;
15872: LD_EXP 25
15876: PPUSH
15877: LD_STRING 04_1_Heike
15879: PPUSH
15880: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15884: LD_EXP 35
15888: PUSH
15889: LD_EXP 35
15893: PUSH
15894: LD_EXP 39
15898: IN
15899: NOT
15900: AND
15901: IFFALSE 15917
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15903: LD_EXP 35
15907: PPUSH
15908: LD_STRING 04_1_Aviradze
15910: PPUSH
15911: CALL_OW 38
15915: GO 15935
// if Aviradze then
15917: LD_EXP 35
15921: IFFALSE 15935
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15923: LD_EXP 35
15927: PPUSH
15928: LD_STRING 04_1_Aviradze_L
15930: PPUSH
15931: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15935: LD_EXP 28
15939: PUSH
15940: LD_EXP 28
15944: PUSH
15945: LD_EXP 39
15949: IN
15950: NOT
15951: AND
15952: IFFALSE 15968
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15954: LD_EXP 28
15958: PPUSH
15959: LD_STRING 04_1_Ibrahim
15961: PPUSH
15962: CALL_OW 38
15966: GO 15986
// if Ibrahim then
15968: LD_EXP 28
15972: IFFALSE 15986
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
15974: LD_EXP 28
15978: PPUSH
15979: LD_STRING 04_1_Ibrahim_L
15981: PPUSH
15982: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
15986: LD_EXP 29
15990: PUSH
15991: LD_EXP 29
15995: PUSH
15996: LD_EXP 39
16000: IN
16001: NOT
16002: AND
16003: IFFALSE 16019
// SaveCharacters ( Kamil , 04_1_Kamil ) else
16005: LD_EXP 29
16009: PPUSH
16010: LD_STRING 04_1_Kamil
16012: PPUSH
16013: CALL_OW 38
16017: GO 16037
// if Kamil then
16019: LD_EXP 29
16023: IFFALSE 16037
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
16025: LD_EXP 29
16029: PPUSH
16030: LD_STRING 04_1_Kamil_L
16032: PPUSH
16033: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
16037: LD_EXP 31
16041: PUSH
16042: LD_EXP 31
16046: PUSH
16047: LD_EXP 39
16051: IN
16052: NOT
16053: AND
16054: IFFALSE 16070
// SaveCharacters ( Sophia , 04_1_Sophia ) else
16056: LD_EXP 31
16060: PPUSH
16061: LD_STRING 04_1_Sophia
16063: PPUSH
16064: CALL_OW 38
16068: GO 16088
// if Sophia then
16070: LD_EXP 31
16074: IFFALSE 16088
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
16076: LD_EXP 31
16080: PPUSH
16081: LD_STRING 04_1_Sophia_L
16083: PPUSH
16084: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
16088: LD_EXP 30
16092: PUSH
16093: LD_EXP 30
16097: PUSH
16098: LD_EXP 39
16102: IN
16103: NOT
16104: AND
16105: IFFALSE 16121
// SaveCharacters ( Kaia , 04_1_Kaia ) else
16107: LD_EXP 30
16111: PPUSH
16112: LD_STRING 04_1_Kaia
16114: PPUSH
16115: CALL_OW 38
16119: GO 16139
// if Kaia then
16121: LD_EXP 30
16125: IFFALSE 16139
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
16127: LD_EXP 30
16131: PPUSH
16132: LD_STRING 04_1_Kaia_L
16134: PPUSH
16135: CALL_OW 38
// if Givi then
16139: LD_EXP 26
16143: IFFALSE 16157
// SaveCharacters ( Givi , 04_1_Givi ) ;
16145: LD_EXP 26
16149: PPUSH
16150: LD_STRING 04_1_Givi
16152: PPUSH
16153: CALL_OW 38
// if Mike then
16157: LD_EXP 27
16161: IFFALSE 16175
// SaveCharacters ( Mike , 04_1_Mike ) ;
16163: LD_EXP 27
16167: PPUSH
16168: LD_STRING 04_1_Mike
16170: PPUSH
16171: CALL_OW 38
// if Markov then
16175: LD_EXP 32
16179: IFFALSE 16193
// SaveCharacters ( Markov , 04_1_Markov ) ;
16181: LD_EXP 32
16185: PPUSH
16186: LD_STRING 04_1_Markov
16188: PPUSH
16189: CALL_OW 38
// if Kurt then
16193: LD_EXP 34
16197: IFFALSE 16211
// SaveCharacters ( Kurt , 04_1_Kurt ) ;
16199: LD_EXP 34
16203: PPUSH
16204: LD_STRING 04_1_Kurt
16206: PPUSH
16207: CALL_OW 38
// if heikeSecondSquad diff aviradzeSquad then
16211: LD_EXP 37
16215: PUSH
16216: LD_EXP 39
16220: DIFF
16221: IFFALSE 16241
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
16223: LD_EXP 37
16227: PUSH
16228: LD_EXP 39
16232: DIFF
16233: PPUSH
16234: LD_STRING 04_1_others
16236: PPUSH
16237: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
16241: LD_EXP 39
16245: PUSH
16246: LD_EXP 37
16250: AND
16251: IFFALSE 16336
// begin tmp := [ ] ;
16253: LD_ADDR_VAR 0 2
16257: PUSH
16258: EMPTY
16259: ST_TO_ADDR
// for i in heikeSecondSquad do
16260: LD_ADDR_VAR 0 1
16264: PUSH
16265: LD_EXP 37
16269: PUSH
16270: FOR_IN
16271: IFFALSE 16316
// if i in aviradzeSquad then
16273: LD_VAR 0 1
16277: PUSH
16278: LD_EXP 39
16282: IN
16283: IFFALSE 16314
// tmp := Replace ( tmp , tmp + 1 , i ) ;
16285: LD_ADDR_VAR 0 2
16289: PUSH
16290: LD_VAR 0 2
16294: PPUSH
16295: LD_VAR 0 2
16299: PUSH
16300: LD_INT 1
16302: PLUS
16303: PPUSH
16304: LD_VAR 0 1
16308: PPUSH
16309: CALL_OW 1
16313: ST_TO_ADDR
16314: GO 16270
16316: POP
16317: POP
// if tmp then
16318: LD_VAR 0 2
16322: IFFALSE 16336
// SaveCharacters ( tmp , 04_1_others_L ) ;
16324: LD_VAR 0 2
16328: PPUSH
16329: LD_STRING 04_1_others_L
16331: PPUSH
16332: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
16336: LD_ADDR_VAR 0 2
16340: PUSH
16341: LD_INT 22
16343: PUSH
16344: LD_INT 2
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: PUSH
16351: LD_INT 23
16353: PUSH
16354: LD_INT 0
16356: PUSH
16357: EMPTY
16358: LIST
16359: LIST
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: PPUSH
16365: CALL_OW 69
16369: ST_TO_ADDR
// if tmp then
16370: LD_VAR 0 2
16374: IFFALSE 16388
// SaveCharacters ( tmp , 04_1_apes ) ;
16376: LD_VAR 0 2
16380: PPUSH
16381: LD_STRING 04_1_apes
16383: PPUSH
16384: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
16388: LD_ADDR_VAR 0 2
16392: PUSH
16393: LD_INT 17
16395: PPUSH
16396: LD_INT 21
16398: PUSH
16399: LD_INT 2
16401: PUSH
16402: EMPTY
16403: LIST
16404: LIST
16405: PPUSH
16406: CALL_OW 70
16410: ST_TO_ADDR
// if tmp then
16411: LD_VAR 0 2
16415: IFFALSE 16709
// begin tmp2 := [ ] ;
16417: LD_ADDR_VAR 0 3
16421: PUSH
16422: EMPTY
16423: ST_TO_ADDR
// for i in tmp do
16424: LD_ADDR_VAR 0 1
16428: PUSH
16429: LD_VAR 0 2
16433: PUSH
16434: FOR_IN
16435: IFFALSE 16695
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
16437: LD_VAR 0 1
16441: PPUSH
16442: CALL_OW 264
16446: PUSH
16447: LD_INT 32
16449: PUSH
16450: LD_INT 12
16452: PUSH
16453: LD_INT 51
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: LIST
16460: IN
16461: IFFALSE 16598
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
16463: LD_ADDR_VAR 0 4
16467: PUSH
16468: LD_VAR 0 1
16472: PPUSH
16473: LD_INT 1
16475: PPUSH
16476: CALL_OW 289
16480: PUSH
16481: LD_VAR 0 1
16485: PPUSH
16486: LD_INT 2
16488: PPUSH
16489: CALL_OW 289
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
16498: LD_ADDR_VAR 0 3
16502: PUSH
16503: LD_VAR 0 3
16507: PPUSH
16508: LD_VAR 0 3
16512: PUSH
16513: LD_INT 1
16515: PLUS
16516: PPUSH
16517: LD_VAR 0 1
16521: PPUSH
16522: CALL_OW 265
16526: PUSH
16527: LD_VAR 0 1
16531: PPUSH
16532: CALL_OW 262
16536: PUSH
16537: LD_VAR 0 1
16541: PPUSH
16542: CALL_OW 263
16546: PUSH
16547: LD_VAR 0 1
16551: PPUSH
16552: CALL_OW 264
16556: PUSH
16557: LD_VAR 0 1
16561: PPUSH
16562: CALL_OW 248
16566: PUSH
16567: LD_VAR 0 1
16571: PPUSH
16572: CALL_OW 256
16576: PUSH
16577: LD_VAR 0 4
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: PPUSH
16591: CALL_OW 1
16595: ST_TO_ADDR
// end else
16596: GO 16693
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
16598: LD_ADDR_VAR 0 3
16602: PUSH
16603: LD_VAR 0 3
16607: PPUSH
16608: LD_VAR 0 3
16612: PUSH
16613: LD_INT 1
16615: PLUS
16616: PPUSH
16617: LD_VAR 0 1
16621: PPUSH
16622: CALL_OW 265
16626: PUSH
16627: LD_VAR 0 1
16631: PPUSH
16632: CALL_OW 262
16636: PUSH
16637: LD_VAR 0 1
16641: PPUSH
16642: CALL_OW 263
16646: PUSH
16647: LD_VAR 0 1
16651: PPUSH
16652: CALL_OW 264
16656: PUSH
16657: LD_VAR 0 1
16661: PPUSH
16662: CALL_OW 248
16666: PUSH
16667: LD_VAR 0 1
16671: PPUSH
16672: CALL_OW 256
16676: PUSH
16677: EMPTY
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: PPUSH
16688: CALL_OW 1
16692: ST_TO_ADDR
16693: GO 16434
16695: POP
16696: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
16697: LD_VAR 0 3
16701: PPUSH
16702: LD_STRING 04_1_Vehicles
16704: PPUSH
16705: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
16709: LD_EXP 21
16713: PPUSH
16714: LD_STRING 04_1_RuLabCaptured
16716: PPUSH
16717: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
16721: LD_EXP 19
16725: PPUSH
16726: LD_STRING 04_1_EscapeCounter
16728: PPUSH
16729: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
16733: LD_EXP 15
16737: PPUSH
16738: LD_STRING 04_1_BaseHill
16740: PPUSH
16741: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
16745: LD_OWVAR 1
16749: PPUSH
16750: LD_STRING 04_1_Time
16752: PPUSH
16753: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
16757: LD_EXP 14
16761: PPUSH
16762: LD_STRING 04_1_DeadCounter
16764: PPUSH
16765: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
16769: LD_EXP 24
16773: PUSH
16774: LD_INT 112
16776: PPUSH
16777: CALL_OW 255
16781: MUL
16782: PUSH
16783: LD_INT 2
16785: EQUAL
16786: PPUSH
16787: LD_STRING 04_1_KaganCaptured
16789: PPUSH
16790: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
16794: LD_INT 22
16796: PUSH
16797: LD_INT 2
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: PUSH
16804: LD_INT 34
16806: PUSH
16807: LD_INT 26
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: PPUSH
16818: CALL_OW 69
16822: PUSH
16823: LD_INT 0
16825: PLUS
16826: PPUSH
16827: LD_STRING 04_1_Flamethrower
16829: PPUSH
16830: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16834: LD_INT 1
16836: PPUSH
16837: LD_STRING __x1\04_cont2
16839: PPUSH
16840: CALL_OW 340
// end ; end_of_file
16844: PPOPN 4
16846: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16847: LD_VAR 0 1
16851: PPUSH
16852: CALL_OW 266
16856: PUSH
16857: LD_INT 0
16859: EQUAL
16860: PUSH
16861: LD_VAR 0 1
16865: PPUSH
16866: CALL_OW 255
16870: PUSH
16871: LD_INT 2
16873: EQUAL
16874: AND
16875: IFFALSE 16885
// baseConstructed := true ;
16877: LD_ADDR_EXP 3
16881: PUSH
16882: LD_INT 1
16884: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16885: LD_VAR 0 1
16889: PPUSH
16890: CALL_OW 266
16894: PUSH
16895: LD_INT 6
16897: EQUAL
16898: PUSH
16899: LD_VAR 0 1
16903: PPUSH
16904: CALL_OW 255
16908: PUSH
16909: LD_INT 2
16911: EQUAL
16912: AND
16913: IFFALSE 16923
// labConstructed := true ;
16915: LD_ADDR_EXP 4
16919: PUSH
16920: LD_INT 1
16922: ST_TO_ADDR
// end ;
16923: PPOPN 1
16925: END
// on UnitDestroyed ( un ) do begin if un = Heike then
16926: LD_VAR 0 1
16930: PUSH
16931: LD_EXP 25
16935: EQUAL
16936: IFFALSE 16945
// YouLost ( Heike ) ;
16938: LD_STRING Heike
16940: PPUSH
16941: CALL_OW 104
// if un = Omar then
16945: LD_VAR 0 1
16949: PUSH
16950: LD_EXP 33
16954: EQUAL
16955: IFFALSE 16964
// YouLost ( Omar ) ;
16957: LD_STRING Omar
16959: PPUSH
16960: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
16964: LD_VAR 0 1
16968: PUSH
16969: LD_INT 22
16971: PUSH
16972: LD_INT 2
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PUSH
16979: LD_INT 23
16981: PUSH
16982: LD_INT 2
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PUSH
16989: LD_INT 21
16991: PUSH
16992: LD_INT 1
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: LIST
17003: PPUSH
17004: CALL_OW 69
17008: IN
17009: IFFALSE 17025
// loseCounter := loseCounter + 1 ;
17011: LD_ADDR_EXP 14
17015: PUSH
17016: LD_EXP 14
17020: PUSH
17021: LD_INT 1
17023: PLUS
17024: ST_TO_ADDR
// if un = omikron then
17025: LD_VAR 0 1
17029: PUSH
17030: LD_INT 64
17032: EQUAL
17033: IFFALSE 17043
// omicronFall := true ;
17035: LD_ADDR_EXP 13
17039: PUSH
17040: LD_INT 1
17042: ST_TO_ADDR
// if un = kirov then
17043: LD_VAR 0 1
17047: PUSH
17048: LD_INT 71
17050: EQUAL
17051: IFFALSE 17068
// begin ChangeMissionObjectives ( KirovDone ) ;
17053: LD_STRING KirovDone
17055: PPUSH
17056: CALL_OW 337
// kirovDestroyed := true ;
17060: LD_ADDR_EXP 16
17064: PUSH
17065: LD_INT 1
17067: ST_TO_ADDR
// end ; if un = beria then
17068: LD_VAR 0 1
17072: PUSH
17073: LD_INT 106
17075: EQUAL
17076: IFFALSE 17093
// begin ChangeMissionObjectives ( BeriaDone ) ;
17078: LD_STRING BeriaDone
17080: PPUSH
17081: CALL_OW 337
// beriaDestroyed := true ;
17085: LD_ADDR_EXP 17
17089: PUSH
17090: LD_INT 1
17092: ST_TO_ADDR
// end ; if un = kagan then
17093: LD_VAR 0 1
17097: PUSH
17098: LD_INT 112
17100: EQUAL
17101: IFFALSE 17111
// kaganDestroyed := true ;
17103: LD_ADDR_EXP 18
17107: PUSH
17108: LD_INT 1
17110: ST_TO_ADDR
// if un in russianPatrol then
17111: LD_VAR 0 1
17115: PUSH
17116: LD_EXP 47
17120: IN
17121: IFFALSE 17139
// russianPatrol := russianPatrol diff un ;
17123: LD_ADDR_EXP 47
17127: PUSH
17128: LD_EXP 47
17132: PUSH
17133: LD_VAR 0 1
17137: DIFF
17138: ST_TO_ADDR
// if un in russianOmicronAttackers then
17139: LD_VAR 0 1
17143: PUSH
17144: LD_EXP 48
17148: IN
17149: IFFALSE 17167
// russianOmicronAttackers := russianOmicronAttackers diff un ;
17151: LD_ADDR_EXP 48
17155: PUSH
17156: LD_EXP 48
17160: PUSH
17161: LD_VAR 0 1
17165: DIFF
17166: ST_TO_ADDR
// end ;
17167: PPOPN 1
17169: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
17170: LD_INT 0
17172: PPUSH
17173: PPUSH
17174: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
17175: LD_VAR 0 1
17179: PUSH
17180: LD_INT 2
17182: PUSH
17183: LD_INT 22
17185: PUSH
17186: LD_INT 3
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: PUSH
17193: LD_INT 22
17195: PUSH
17196: LD_INT 4
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PUSH
17203: LD_INT 22
17205: PUSH
17206: LD_INT 6
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: PUSH
17219: LD_INT 30
17221: PUSH
17222: LD_INT 32
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PPUSH
17233: CALL_OW 69
17237: IN
17238: IFFALSE 17411
// begin sol := UnitsInside ( un ) ;
17240: LD_ADDR_VAR 0 3
17244: PUSH
17245: LD_VAR 0 1
17249: PPUSH
17250: CALL_OW 313
17254: ST_TO_ADDR
// if not sol then
17255: LD_VAR 0 3
17259: NOT
17260: IFFALSE 17264
// exit ;
17262: GO 17411
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17264: LD_ADDR_VAR 0 4
17268: PUSH
17269: LD_INT 22
17271: PUSH
17272: LD_VAR 0 1
17276: PPUSH
17277: CALL_OW 255
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: PUSH
17286: LD_INT 2
17288: PUSH
17289: LD_INT 30
17291: PUSH
17292: LD_INT 4
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PUSH
17299: LD_INT 30
17301: PUSH
17302: LD_INT 5
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: LIST
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PPUSH
17318: CALL_OW 69
17322: ST_TO_ADDR
// if not nearestBarracks then
17323: LD_VAR 0 4
17327: NOT
17328: IFFALSE 17332
// exit ;
17330: GO 17411
// for i in nearestBarracks do
17332: LD_ADDR_VAR 0 2
17336: PUSH
17337: LD_VAR 0 4
17341: PUSH
17342: FOR_IN
17343: IFFALSE 17378
// if UnitsInside ( i ) = 6 then
17345: LD_VAR 0 2
17349: PPUSH
17350: CALL_OW 313
17354: PUSH
17355: LD_INT 6
17357: EQUAL
17358: IFFALSE 17376
// nearestBarracks := nearestBarracks diff i ;
17360: LD_ADDR_VAR 0 4
17364: PUSH
17365: LD_VAR 0 4
17369: PUSH
17370: LD_VAR 0 2
17374: DIFF
17375: ST_TO_ADDR
17376: GO 17342
17378: POP
17379: POP
// if not nearestBarracks then
17380: LD_VAR 0 4
17384: NOT
17385: IFFALSE 17389
// exit ;
17387: GO 17411
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
17389: LD_VAR 0 3
17393: PUSH
17394: LD_INT 1
17396: ARRAY
17397: PPUSH
17398: LD_VAR 0 4
17402: PUSH
17403: LD_INT 1
17405: ARRAY
17406: PPUSH
17407: CALL_OW 120
// end ; end ;
17411: PPOPN 4
17413: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
17414: LD_INT 0
17416: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
17417: LD_EXP 8
17421: NOT
17422: PUSH
17423: LD_EXP 5
17427: NOT
17428: OR
17429: IFFALSE 17433
// exit ;
17431: GO 17501
// for i in camAreas do
17433: LD_ADDR_VAR 0 5
17437: PUSH
17438: LD_EXP 8
17442: PUSH
17443: FOR_IN
17444: IFFALSE 17499
// if InArea ( x , y , i ) then
17446: LD_VAR 0 3
17450: PPUSH
17451: LD_VAR 0 4
17455: PPUSH
17456: LD_VAR 0 5
17460: PPUSH
17461: CALL_OW 309
17465: IFFALSE 17497
// begin SetAreaMapShow ( i , 0 ) ;
17467: LD_VAR 0 5
17471: PPUSH
17472: LD_INT 0
17474: PPUSH
17475: CALL_OW 424
// camAreas := camAreas diff i ;
17479: LD_ADDR_EXP 8
17483: PUSH
17484: LD_EXP 8
17488: PUSH
17489: LD_VAR 0 5
17493: DIFF
17494: ST_TO_ADDR
// break ;
17495: GO 17499
// end ;
17497: GO 17443
17499: POP
17500: POP
// end ;
17501: PPOPN 5
17503: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
17504: LD_VAR 0 1
17508: PUSH
17509: LD_INT 2
17511: EQUAL
17512: PUSH
17513: LD_VAR 0 2
17517: PUSH
17518: LD_INT 5
17520: PUSH
17521: LD_INT 8
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: IN
17528: AND
17529: IFFALSE 17538
// YouLost ( Ally ) ;
17531: LD_STRING Ally
17533: PPUSH
17534: CALL_OW 104
// end ;
17538: PPOPN 2
17540: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
17541: LD_VAR 0 1
17545: PUSH
17546: LD_EXP 30
17550: EQUAL
17551: PUSH
17552: LD_VAR 0 2
17556: PUSH
17557: LD_INT 3
17559: PUSH
17560: LD_INT 6
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: IN
17567: AND
17568: IFFALSE 17599
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
17570: LD_ADDR_EXP 23
17574: PUSH
17575: LD_VAR 0 1
17579: PPUSH
17580: CALL_OW 250
17584: PUSH
17585: LD_VAR 0 1
17589: PPUSH
17590: CALL_OW 251
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: ST_TO_ADDR
// end ; end_of_file
17599: PPOPN 3
17601: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 ] [ Difficulty ] do
17602: LD_EXP 11
17606: NOT
17607: PUSH
17608: LD_INT 12
17610: PPUSH
17611: LD_INT 1
17613: PPUSH
17614: CALL_OW 287
17618: PUSH
17619: LD_INT 20
17621: PUSH
17622: LD_INT 16
17624: PUSH
17625: LD_INT 12
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: LIST
17632: PUSH
17633: LD_OWVAR 67
17637: ARRAY
17638: LESS
17639: AND
17640: IFFALSE 17667
17642: GO 17644
17644: DISABLE
// begin enable ;
17645: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
17646: LD_INT 1
17648: PPUSH
17649: LD_INT 5
17651: PPUSH
17652: CALL_OW 12
17656: PPUSH
17657: LD_INT 12
17659: PPUSH
17660: LD_INT 1
17662: PPUSH
17663: CALL_OW 55
// end ; end_of_file
17667: END
// every 0 0$1 trigger omarCountdown do
17668: LD_EXP 22
17672: IFFALSE 17724
17674: GO 17676
17676: DISABLE
// begin enable ;
17677: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
17678: LD_ADDR_OWVAR 47
17682: PUSH
17683: LD_STRING #X104-1
17685: PUSH
17686: LD_EXP 22
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
17695: LD_ADDR_EXP 22
17699: PUSH
17700: LD_EXP 22
17704: PUSH
17705: LD_INT 35
17707: MINUS
17708: ST_TO_ADDR
// if not omarCountdown then
17709: LD_EXP 22
17713: NOT
17714: IFFALSE 17724
// display_strings :=  ;
17716: LD_ADDR_OWVAR 47
17720: PUSH
17721: LD_STRING 
17723: ST_TO_ADDR
// end ; end_of_file
17724: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
17725: LD_VAR 0 2
17729: PUSH
17730: LD_INT 100
17732: EQUAL
17733: IFFALSE 18682
// begin if not StreamModeActive then
17735: LD_EXP 52
17739: NOT
17740: IFFALSE 17750
// StreamModeActive := true ;
17742: LD_ADDR_EXP 52
17746: PUSH
17747: LD_INT 1
17749: ST_TO_ADDR
// if p3 = 0 then
17750: LD_VAR 0 3
17754: PUSH
17755: LD_INT 0
17757: EQUAL
17758: IFFALSE 17764
// InitStreamMode ;
17760: CALL 18915 0 0
// if p3 = 1 then
17764: LD_VAR 0 3
17768: PUSH
17769: LD_INT 1
17771: EQUAL
17772: IFFALSE 17782
// sRocket := true ;
17774: LD_ADDR_EXP 57
17778: PUSH
17779: LD_INT 1
17781: ST_TO_ADDR
// if p3 = 2 then
17782: LD_VAR 0 3
17786: PUSH
17787: LD_INT 2
17789: EQUAL
17790: IFFALSE 17800
// sSpeed := true ;
17792: LD_ADDR_EXP 56
17796: PUSH
17797: LD_INT 1
17799: ST_TO_ADDR
// if p3 = 3 then
17800: LD_VAR 0 3
17804: PUSH
17805: LD_INT 3
17807: EQUAL
17808: IFFALSE 17818
// sEngine := true ;
17810: LD_ADDR_EXP 58
17814: PUSH
17815: LD_INT 1
17817: ST_TO_ADDR
// if p3 = 4 then
17818: LD_VAR 0 3
17822: PUSH
17823: LD_INT 4
17825: EQUAL
17826: IFFALSE 17836
// sSpec := true ;
17828: LD_ADDR_EXP 55
17832: PUSH
17833: LD_INT 1
17835: ST_TO_ADDR
// if p3 = 5 then
17836: LD_VAR 0 3
17840: PUSH
17841: LD_INT 5
17843: EQUAL
17844: IFFALSE 17854
// sLevel := true ;
17846: LD_ADDR_EXP 59
17850: PUSH
17851: LD_INT 1
17853: ST_TO_ADDR
// if p3 = 6 then
17854: LD_VAR 0 3
17858: PUSH
17859: LD_INT 6
17861: EQUAL
17862: IFFALSE 17872
// sArmoury := true ;
17864: LD_ADDR_EXP 60
17868: PUSH
17869: LD_INT 1
17871: ST_TO_ADDR
// if p3 = 7 then
17872: LD_VAR 0 3
17876: PUSH
17877: LD_INT 7
17879: EQUAL
17880: IFFALSE 17890
// sRadar := true ;
17882: LD_ADDR_EXP 61
17886: PUSH
17887: LD_INT 1
17889: ST_TO_ADDR
// if p3 = 8 then
17890: LD_VAR 0 3
17894: PUSH
17895: LD_INT 8
17897: EQUAL
17898: IFFALSE 17908
// sBunker := true ;
17900: LD_ADDR_EXP 62
17904: PUSH
17905: LD_INT 1
17907: ST_TO_ADDR
// if p3 = 9 then
17908: LD_VAR 0 3
17912: PUSH
17913: LD_INT 9
17915: EQUAL
17916: IFFALSE 17926
// sHack := true ;
17918: LD_ADDR_EXP 63
17922: PUSH
17923: LD_INT 1
17925: ST_TO_ADDR
// if p3 = 10 then
17926: LD_VAR 0 3
17930: PUSH
17931: LD_INT 10
17933: EQUAL
17934: IFFALSE 17944
// sFire := true ;
17936: LD_ADDR_EXP 64
17940: PUSH
17941: LD_INT 1
17943: ST_TO_ADDR
// if p3 = 11 then
17944: LD_VAR 0 3
17948: PUSH
17949: LD_INT 11
17951: EQUAL
17952: IFFALSE 17962
// sRefresh := true ;
17954: LD_ADDR_EXP 65
17958: PUSH
17959: LD_INT 1
17961: ST_TO_ADDR
// if p3 = 12 then
17962: LD_VAR 0 3
17966: PUSH
17967: LD_INT 12
17969: EQUAL
17970: IFFALSE 17980
// sExp := true ;
17972: LD_ADDR_EXP 66
17976: PUSH
17977: LD_INT 1
17979: ST_TO_ADDR
// if p3 = 13 then
17980: LD_VAR 0 3
17984: PUSH
17985: LD_INT 13
17987: EQUAL
17988: IFFALSE 17998
// sDepot := true ;
17990: LD_ADDR_EXP 67
17994: PUSH
17995: LD_INT 1
17997: ST_TO_ADDR
// if p3 = 14 then
17998: LD_VAR 0 3
18002: PUSH
18003: LD_INT 14
18005: EQUAL
18006: IFFALSE 18016
// sFlag := true ;
18008: LD_ADDR_EXP 68
18012: PUSH
18013: LD_INT 1
18015: ST_TO_ADDR
// if p3 = 15 then
18016: LD_VAR 0 3
18020: PUSH
18021: LD_INT 15
18023: EQUAL
18024: IFFALSE 18034
// sKamikadze := true ;
18026: LD_ADDR_EXP 76
18030: PUSH
18031: LD_INT 1
18033: ST_TO_ADDR
// if p3 = 16 then
18034: LD_VAR 0 3
18038: PUSH
18039: LD_INT 16
18041: EQUAL
18042: IFFALSE 18052
// sTroll := true ;
18044: LD_ADDR_EXP 77
18048: PUSH
18049: LD_INT 1
18051: ST_TO_ADDR
// if p3 = 17 then
18052: LD_VAR 0 3
18056: PUSH
18057: LD_INT 17
18059: EQUAL
18060: IFFALSE 18070
// sSlow := true ;
18062: LD_ADDR_EXP 78
18066: PUSH
18067: LD_INT 1
18069: ST_TO_ADDR
// if p3 = 18 then
18070: LD_VAR 0 3
18074: PUSH
18075: LD_INT 18
18077: EQUAL
18078: IFFALSE 18088
// sLack := true ;
18080: LD_ADDR_EXP 79
18084: PUSH
18085: LD_INT 1
18087: ST_TO_ADDR
// if p3 = 19 then
18088: LD_VAR 0 3
18092: PUSH
18093: LD_INT 19
18095: EQUAL
18096: IFFALSE 18106
// sTank := true ;
18098: LD_ADDR_EXP 81
18102: PUSH
18103: LD_INT 1
18105: ST_TO_ADDR
// if p3 = 20 then
18106: LD_VAR 0 3
18110: PUSH
18111: LD_INT 20
18113: EQUAL
18114: IFFALSE 18124
// sRemote := true ;
18116: LD_ADDR_EXP 82
18120: PUSH
18121: LD_INT 1
18123: ST_TO_ADDR
// if p3 = 21 then
18124: LD_VAR 0 3
18128: PUSH
18129: LD_INT 21
18131: EQUAL
18132: IFFALSE 18142
// sPowell := true ;
18134: LD_ADDR_EXP 83
18138: PUSH
18139: LD_INT 1
18141: ST_TO_ADDR
// if p3 = 22 then
18142: LD_VAR 0 3
18146: PUSH
18147: LD_INT 22
18149: EQUAL
18150: IFFALSE 18160
// sTeleport := true ;
18152: LD_ADDR_EXP 86
18156: PUSH
18157: LD_INT 1
18159: ST_TO_ADDR
// if p3 = 23 then
18160: LD_VAR 0 3
18164: PUSH
18165: LD_INT 23
18167: EQUAL
18168: IFFALSE 18178
// sOilTower := true ;
18170: LD_ADDR_EXP 88
18174: PUSH
18175: LD_INT 1
18177: ST_TO_ADDR
// if p3 = 24 then
18178: LD_VAR 0 3
18182: PUSH
18183: LD_INT 24
18185: EQUAL
18186: IFFALSE 18196
// sShovel := true ;
18188: LD_ADDR_EXP 89
18192: PUSH
18193: LD_INT 1
18195: ST_TO_ADDR
// if p3 = 25 then
18196: LD_VAR 0 3
18200: PUSH
18201: LD_INT 25
18203: EQUAL
18204: IFFALSE 18214
// sSheik := true ;
18206: LD_ADDR_EXP 90
18210: PUSH
18211: LD_INT 1
18213: ST_TO_ADDR
// if p3 = 26 then
18214: LD_VAR 0 3
18218: PUSH
18219: LD_INT 26
18221: EQUAL
18222: IFFALSE 18232
// sEarthquake := true ;
18224: LD_ADDR_EXP 92
18228: PUSH
18229: LD_INT 1
18231: ST_TO_ADDR
// if p3 = 27 then
18232: LD_VAR 0 3
18236: PUSH
18237: LD_INT 27
18239: EQUAL
18240: IFFALSE 18250
// sAI := true ;
18242: LD_ADDR_EXP 93
18246: PUSH
18247: LD_INT 1
18249: ST_TO_ADDR
// if p3 = 28 then
18250: LD_VAR 0 3
18254: PUSH
18255: LD_INT 28
18257: EQUAL
18258: IFFALSE 18268
// sCargo := true ;
18260: LD_ADDR_EXP 96
18264: PUSH
18265: LD_INT 1
18267: ST_TO_ADDR
// if p3 = 29 then
18268: LD_VAR 0 3
18272: PUSH
18273: LD_INT 29
18275: EQUAL
18276: IFFALSE 18286
// sDLaser := true ;
18278: LD_ADDR_EXP 97
18282: PUSH
18283: LD_INT 1
18285: ST_TO_ADDR
// if p3 = 30 then
18286: LD_VAR 0 3
18290: PUSH
18291: LD_INT 30
18293: EQUAL
18294: IFFALSE 18304
// sExchange := true ;
18296: LD_ADDR_EXP 98
18300: PUSH
18301: LD_INT 1
18303: ST_TO_ADDR
// if p3 = 31 then
18304: LD_VAR 0 3
18308: PUSH
18309: LD_INT 31
18311: EQUAL
18312: IFFALSE 18322
// sFac := true ;
18314: LD_ADDR_EXP 99
18318: PUSH
18319: LD_INT 1
18321: ST_TO_ADDR
// if p3 = 32 then
18322: LD_VAR 0 3
18326: PUSH
18327: LD_INT 32
18329: EQUAL
18330: IFFALSE 18340
// sPower := true ;
18332: LD_ADDR_EXP 100
18336: PUSH
18337: LD_INT 1
18339: ST_TO_ADDR
// if p3 = 33 then
18340: LD_VAR 0 3
18344: PUSH
18345: LD_INT 33
18347: EQUAL
18348: IFFALSE 18358
// sRandom := true ;
18350: LD_ADDR_EXP 101
18354: PUSH
18355: LD_INT 1
18357: ST_TO_ADDR
// if p3 = 34 then
18358: LD_VAR 0 3
18362: PUSH
18363: LD_INT 34
18365: EQUAL
18366: IFFALSE 18376
// sShield := true ;
18368: LD_ADDR_EXP 102
18372: PUSH
18373: LD_INT 1
18375: ST_TO_ADDR
// if p3 = 35 then
18376: LD_VAR 0 3
18380: PUSH
18381: LD_INT 35
18383: EQUAL
18384: IFFALSE 18394
// sTime := true ;
18386: LD_ADDR_EXP 103
18390: PUSH
18391: LD_INT 1
18393: ST_TO_ADDR
// if p3 = 36 then
18394: LD_VAR 0 3
18398: PUSH
18399: LD_INT 36
18401: EQUAL
18402: IFFALSE 18412
// sTools := true ;
18404: LD_ADDR_EXP 104
18408: PUSH
18409: LD_INT 1
18411: ST_TO_ADDR
// if p3 = 101 then
18412: LD_VAR 0 3
18416: PUSH
18417: LD_INT 101
18419: EQUAL
18420: IFFALSE 18430
// sSold := true ;
18422: LD_ADDR_EXP 69
18426: PUSH
18427: LD_INT 1
18429: ST_TO_ADDR
// if p3 = 102 then
18430: LD_VAR 0 3
18434: PUSH
18435: LD_INT 102
18437: EQUAL
18438: IFFALSE 18448
// sDiff := true ;
18440: LD_ADDR_EXP 70
18444: PUSH
18445: LD_INT 1
18447: ST_TO_ADDR
// if p3 = 103 then
18448: LD_VAR 0 3
18452: PUSH
18453: LD_INT 103
18455: EQUAL
18456: IFFALSE 18466
// sFog := true ;
18458: LD_ADDR_EXP 73
18462: PUSH
18463: LD_INT 1
18465: ST_TO_ADDR
// if p3 = 104 then
18466: LD_VAR 0 3
18470: PUSH
18471: LD_INT 104
18473: EQUAL
18474: IFFALSE 18484
// sReset := true ;
18476: LD_ADDR_EXP 74
18480: PUSH
18481: LD_INT 1
18483: ST_TO_ADDR
// if p3 = 105 then
18484: LD_VAR 0 3
18488: PUSH
18489: LD_INT 105
18491: EQUAL
18492: IFFALSE 18502
// sSun := true ;
18494: LD_ADDR_EXP 75
18498: PUSH
18499: LD_INT 1
18501: ST_TO_ADDR
// if p3 = 106 then
18502: LD_VAR 0 3
18506: PUSH
18507: LD_INT 106
18509: EQUAL
18510: IFFALSE 18520
// sTiger := true ;
18512: LD_ADDR_EXP 71
18516: PUSH
18517: LD_INT 1
18519: ST_TO_ADDR
// if p3 = 107 then
18520: LD_VAR 0 3
18524: PUSH
18525: LD_INT 107
18527: EQUAL
18528: IFFALSE 18538
// sBomb := true ;
18530: LD_ADDR_EXP 72
18534: PUSH
18535: LD_INT 1
18537: ST_TO_ADDR
// if p3 = 108 then
18538: LD_VAR 0 3
18542: PUSH
18543: LD_INT 108
18545: EQUAL
18546: IFFALSE 18556
// sWound := true ;
18548: LD_ADDR_EXP 80
18552: PUSH
18553: LD_INT 1
18555: ST_TO_ADDR
// if p3 = 109 then
18556: LD_VAR 0 3
18560: PUSH
18561: LD_INT 109
18563: EQUAL
18564: IFFALSE 18574
// sBetray := true ;
18566: LD_ADDR_EXP 84
18570: PUSH
18571: LD_INT 1
18573: ST_TO_ADDR
// if p3 = 110 then
18574: LD_VAR 0 3
18578: PUSH
18579: LD_INT 110
18581: EQUAL
18582: IFFALSE 18592
// sContamin := true ;
18584: LD_ADDR_EXP 85
18588: PUSH
18589: LD_INT 1
18591: ST_TO_ADDR
// if p3 = 111 then
18592: LD_VAR 0 3
18596: PUSH
18597: LD_INT 111
18599: EQUAL
18600: IFFALSE 18610
// sOil := true ;
18602: LD_ADDR_EXP 87
18606: PUSH
18607: LD_INT 1
18609: ST_TO_ADDR
// if p3 = 112 then
18610: LD_VAR 0 3
18614: PUSH
18615: LD_INT 112
18617: EQUAL
18618: IFFALSE 18628
// sStu := true ;
18620: LD_ADDR_EXP 91
18624: PUSH
18625: LD_INT 1
18627: ST_TO_ADDR
// if p3 = 113 then
18628: LD_VAR 0 3
18632: PUSH
18633: LD_INT 113
18635: EQUAL
18636: IFFALSE 18646
// sBazooka := true ;
18638: LD_ADDR_EXP 94
18642: PUSH
18643: LD_INT 1
18645: ST_TO_ADDR
// if p3 = 114 then
18646: LD_VAR 0 3
18650: PUSH
18651: LD_INT 114
18653: EQUAL
18654: IFFALSE 18664
// sMortar := true ;
18656: LD_ADDR_EXP 95
18660: PUSH
18661: LD_INT 1
18663: ST_TO_ADDR
// if p3 = 115 then
18664: LD_VAR 0 3
18668: PUSH
18669: LD_INT 115
18671: EQUAL
18672: IFFALSE 18682
// sRanger := true ;
18674: LD_ADDR_EXP 105
18678: PUSH
18679: LD_INT 1
18681: ST_TO_ADDR
// end ; if p2 = 101 then
18682: LD_VAR 0 2
18686: PUSH
18687: LD_INT 101
18689: EQUAL
18690: IFFALSE 18893
// begin case p3 of 1 :
18692: LD_VAR 0 3
18696: PUSH
18697: LD_INT 1
18699: DOUBLE
18700: EQUAL
18701: IFTRUE 18705
18703: GO 18712
18705: POP
// hHackUnlimitedResources ; 2 :
18706: CALL 28987 0 0
18710: GO 18893
18712: LD_INT 2
18714: DOUBLE
18715: EQUAL
18716: IFTRUE 18720
18718: GO 18727
18720: POP
// hHackSetLevel10 ; 3 :
18721: CALL 29120 0 0
18725: GO 18893
18727: LD_INT 3
18729: DOUBLE
18730: EQUAL
18731: IFTRUE 18735
18733: GO 18742
18735: POP
// hHackSetLevel10YourUnits ; 4 :
18736: CALL 29205 0 0
18740: GO 18893
18742: LD_INT 4
18744: DOUBLE
18745: EQUAL
18746: IFTRUE 18750
18748: GO 18772
18750: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
18751: LD_VAR 0 4
18755: PPUSH
18756: LD_VAR 0 5
18760: PPUSH
18761: LD_VAR 0 6
18765: PPUSH
18766: CALL 29295 0 3
18770: GO 18893
18772: LD_INT 5
18774: DOUBLE
18775: EQUAL
18776: IFTRUE 18780
18778: GO 18787
18780: POP
// hHackSpawnVehicle ; 6 :
18781: CALL 29356 0 0
18785: GO 18893
18787: LD_INT 6
18789: DOUBLE
18790: EQUAL
18791: IFTRUE 18795
18793: GO 18802
18795: POP
// hHackInvincible ; 7 :
18796: CALL 29902 0 0
18800: GO 18893
18802: LD_INT 7
18804: DOUBLE
18805: EQUAL
18806: IFTRUE 18810
18808: GO 18817
18810: POP
// hHackInvisible ; 8 :
18811: CALL 30013 0 0
18815: GO 18893
18817: LD_INT 8
18819: DOUBLE
18820: EQUAL
18821: IFTRUE 18825
18823: GO 18832
18825: POP
// hHackChangeYourSide ; 9 :
18826: CALL 30070 0 0
18830: GO 18893
18832: LD_INT 9
18834: DOUBLE
18835: EQUAL
18836: IFTRUE 18840
18838: GO 18847
18840: POP
// hHackChangeUnitSide ; 10 :
18841: CALL 30112 0 0
18845: GO 18893
18847: LD_INT 10
18849: DOUBLE
18850: EQUAL
18851: IFTRUE 18855
18853: GO 18862
18855: POP
// hHackFog ; 11 :
18856: CALL 30213 0 0
18860: GO 18893
18862: LD_INT 11
18864: DOUBLE
18865: EQUAL
18866: IFTRUE 18870
18868: GO 18877
18870: POP
// hHackApeman ; 12 :
18871: CALL 30228 0 0
18875: GO 18893
18877: LD_INT 12
18879: DOUBLE
18880: EQUAL
18881: IFTRUE 18885
18883: GO 18892
18885: POP
// hHackBoom ; end ;
18886: CALL 30313 0 0
18890: GO 18893
18892: POP
// end ; end ;
18893: PPOPN 6
18895: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
18896: GO 18898
18898: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
18899: LD_STRING initStreamRollete();
18901: PPUSH
18902: CALL_OW 559
// InitStreamMode ;
18906: CALL 18915 0 0
// DefineStreamItems ( ) ;
18910: CALL 19355 0 0
// end ;
18914: END
// function InitStreamMode ; begin
18915: LD_INT 0
18917: PPUSH
// streamModeActive := false ;
18918: LD_ADDR_EXP 52
18922: PUSH
18923: LD_INT 0
18925: ST_TO_ADDR
// normalCounter := 36 ;
18926: LD_ADDR_EXP 53
18930: PUSH
18931: LD_INT 36
18933: ST_TO_ADDR
// hardcoreCounter := 16 ;
18934: LD_ADDR_EXP 54
18938: PUSH
18939: LD_INT 16
18941: ST_TO_ADDR
// sRocket := false ;
18942: LD_ADDR_EXP 57
18946: PUSH
18947: LD_INT 0
18949: ST_TO_ADDR
// sSpeed := false ;
18950: LD_ADDR_EXP 56
18954: PUSH
18955: LD_INT 0
18957: ST_TO_ADDR
// sEngine := false ;
18958: LD_ADDR_EXP 58
18962: PUSH
18963: LD_INT 0
18965: ST_TO_ADDR
// sSpec := false ;
18966: LD_ADDR_EXP 55
18970: PUSH
18971: LD_INT 0
18973: ST_TO_ADDR
// sLevel := false ;
18974: LD_ADDR_EXP 59
18978: PUSH
18979: LD_INT 0
18981: ST_TO_ADDR
// sArmoury := false ;
18982: LD_ADDR_EXP 60
18986: PUSH
18987: LD_INT 0
18989: ST_TO_ADDR
// sRadar := false ;
18990: LD_ADDR_EXP 61
18994: PUSH
18995: LD_INT 0
18997: ST_TO_ADDR
// sBunker := false ;
18998: LD_ADDR_EXP 62
19002: PUSH
19003: LD_INT 0
19005: ST_TO_ADDR
// sHack := false ;
19006: LD_ADDR_EXP 63
19010: PUSH
19011: LD_INT 0
19013: ST_TO_ADDR
// sFire := false ;
19014: LD_ADDR_EXP 64
19018: PUSH
19019: LD_INT 0
19021: ST_TO_ADDR
// sRefresh := false ;
19022: LD_ADDR_EXP 65
19026: PUSH
19027: LD_INT 0
19029: ST_TO_ADDR
// sExp := false ;
19030: LD_ADDR_EXP 66
19034: PUSH
19035: LD_INT 0
19037: ST_TO_ADDR
// sDepot := false ;
19038: LD_ADDR_EXP 67
19042: PUSH
19043: LD_INT 0
19045: ST_TO_ADDR
// sFlag := false ;
19046: LD_ADDR_EXP 68
19050: PUSH
19051: LD_INT 0
19053: ST_TO_ADDR
// sKamikadze := false ;
19054: LD_ADDR_EXP 76
19058: PUSH
19059: LD_INT 0
19061: ST_TO_ADDR
// sTroll := false ;
19062: LD_ADDR_EXP 77
19066: PUSH
19067: LD_INT 0
19069: ST_TO_ADDR
// sSlow := false ;
19070: LD_ADDR_EXP 78
19074: PUSH
19075: LD_INT 0
19077: ST_TO_ADDR
// sLack := false ;
19078: LD_ADDR_EXP 79
19082: PUSH
19083: LD_INT 0
19085: ST_TO_ADDR
// sTank := false ;
19086: LD_ADDR_EXP 81
19090: PUSH
19091: LD_INT 0
19093: ST_TO_ADDR
// sRemote := false ;
19094: LD_ADDR_EXP 82
19098: PUSH
19099: LD_INT 0
19101: ST_TO_ADDR
// sPowell := false ;
19102: LD_ADDR_EXP 83
19106: PUSH
19107: LD_INT 0
19109: ST_TO_ADDR
// sTeleport := false ;
19110: LD_ADDR_EXP 86
19114: PUSH
19115: LD_INT 0
19117: ST_TO_ADDR
// sOilTower := false ;
19118: LD_ADDR_EXP 88
19122: PUSH
19123: LD_INT 0
19125: ST_TO_ADDR
// sShovel := false ;
19126: LD_ADDR_EXP 89
19130: PUSH
19131: LD_INT 0
19133: ST_TO_ADDR
// sSheik := false ;
19134: LD_ADDR_EXP 90
19138: PUSH
19139: LD_INT 0
19141: ST_TO_ADDR
// sEarthquake := false ;
19142: LD_ADDR_EXP 92
19146: PUSH
19147: LD_INT 0
19149: ST_TO_ADDR
// sAI := false ;
19150: LD_ADDR_EXP 93
19154: PUSH
19155: LD_INT 0
19157: ST_TO_ADDR
// sCargo := false ;
19158: LD_ADDR_EXP 96
19162: PUSH
19163: LD_INT 0
19165: ST_TO_ADDR
// sDLaser := false ;
19166: LD_ADDR_EXP 97
19170: PUSH
19171: LD_INT 0
19173: ST_TO_ADDR
// sExchange := false ;
19174: LD_ADDR_EXP 98
19178: PUSH
19179: LD_INT 0
19181: ST_TO_ADDR
// sFac := false ;
19182: LD_ADDR_EXP 99
19186: PUSH
19187: LD_INT 0
19189: ST_TO_ADDR
// sPower := false ;
19190: LD_ADDR_EXP 100
19194: PUSH
19195: LD_INT 0
19197: ST_TO_ADDR
// sRandom := false ;
19198: LD_ADDR_EXP 101
19202: PUSH
19203: LD_INT 0
19205: ST_TO_ADDR
// sShield := false ;
19206: LD_ADDR_EXP 102
19210: PUSH
19211: LD_INT 0
19213: ST_TO_ADDR
// sTime := false ;
19214: LD_ADDR_EXP 103
19218: PUSH
19219: LD_INT 0
19221: ST_TO_ADDR
// sTools := false ;
19222: LD_ADDR_EXP 104
19226: PUSH
19227: LD_INT 0
19229: ST_TO_ADDR
// sSold := false ;
19230: LD_ADDR_EXP 69
19234: PUSH
19235: LD_INT 0
19237: ST_TO_ADDR
// sDiff := false ;
19238: LD_ADDR_EXP 70
19242: PUSH
19243: LD_INT 0
19245: ST_TO_ADDR
// sFog := false ;
19246: LD_ADDR_EXP 73
19250: PUSH
19251: LD_INT 0
19253: ST_TO_ADDR
// sReset := false ;
19254: LD_ADDR_EXP 74
19258: PUSH
19259: LD_INT 0
19261: ST_TO_ADDR
// sSun := false ;
19262: LD_ADDR_EXP 75
19266: PUSH
19267: LD_INT 0
19269: ST_TO_ADDR
// sTiger := false ;
19270: LD_ADDR_EXP 71
19274: PUSH
19275: LD_INT 0
19277: ST_TO_ADDR
// sBomb := false ;
19278: LD_ADDR_EXP 72
19282: PUSH
19283: LD_INT 0
19285: ST_TO_ADDR
// sWound := false ;
19286: LD_ADDR_EXP 80
19290: PUSH
19291: LD_INT 0
19293: ST_TO_ADDR
// sBetray := false ;
19294: LD_ADDR_EXP 84
19298: PUSH
19299: LD_INT 0
19301: ST_TO_ADDR
// sContamin := false ;
19302: LD_ADDR_EXP 85
19306: PUSH
19307: LD_INT 0
19309: ST_TO_ADDR
// sOil := false ;
19310: LD_ADDR_EXP 87
19314: PUSH
19315: LD_INT 0
19317: ST_TO_ADDR
// sStu := false ;
19318: LD_ADDR_EXP 91
19322: PUSH
19323: LD_INT 0
19325: ST_TO_ADDR
// sBazooka := false ;
19326: LD_ADDR_EXP 94
19330: PUSH
19331: LD_INT 0
19333: ST_TO_ADDR
// sMortar := false ;
19334: LD_ADDR_EXP 95
19338: PUSH
19339: LD_INT 0
19341: ST_TO_ADDR
// sRanger := false ;
19342: LD_ADDR_EXP 105
19346: PUSH
19347: LD_INT 0
19349: ST_TO_ADDR
// end ;
19350: LD_VAR 0 1
19354: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
19355: LD_INT 0
19357: PPUSH
19358: PPUSH
19359: PPUSH
19360: PPUSH
19361: PPUSH
// result := [ ] ;
19362: LD_ADDR_VAR 0 1
19366: PUSH
19367: EMPTY
19368: ST_TO_ADDR
// if campaign_id = 1 then
19369: LD_OWVAR 69
19373: PUSH
19374: LD_INT 1
19376: EQUAL
19377: IFFALSE 22315
// begin case mission_number of 1 :
19379: LD_OWVAR 70
19383: PUSH
19384: LD_INT 1
19386: DOUBLE
19387: EQUAL
19388: IFTRUE 19392
19390: GO 19456
19392: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
19393: LD_ADDR_VAR 0 1
19397: PUSH
19398: LD_INT 2
19400: PUSH
19401: LD_INT 4
19403: PUSH
19404: LD_INT 11
19406: PUSH
19407: LD_INT 12
19409: PUSH
19410: LD_INT 15
19412: PUSH
19413: LD_INT 16
19415: PUSH
19416: LD_INT 22
19418: PUSH
19419: LD_INT 23
19421: PUSH
19422: LD_INT 26
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 101
19438: PUSH
19439: LD_INT 102
19441: PUSH
19442: LD_INT 106
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: LIST
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: ST_TO_ADDR
19454: GO 22313
19456: LD_INT 2
19458: DOUBLE
19459: EQUAL
19460: IFTRUE 19464
19462: GO 19536
19464: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
19465: LD_ADDR_VAR 0 1
19469: PUSH
19470: LD_INT 2
19472: PUSH
19473: LD_INT 4
19475: PUSH
19476: LD_INT 11
19478: PUSH
19479: LD_INT 12
19481: PUSH
19482: LD_INT 15
19484: PUSH
19485: LD_INT 16
19487: PUSH
19488: LD_INT 22
19490: PUSH
19491: LD_INT 23
19493: PUSH
19494: LD_INT 26
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 101
19510: PUSH
19511: LD_INT 102
19513: PUSH
19514: LD_INT 105
19516: PUSH
19517: LD_INT 106
19519: PUSH
19520: LD_INT 108
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: ST_TO_ADDR
19534: GO 22313
19536: LD_INT 3
19538: DOUBLE
19539: EQUAL
19540: IFTRUE 19544
19542: GO 19620
19544: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
19545: LD_ADDR_VAR 0 1
19549: PUSH
19550: LD_INT 2
19552: PUSH
19553: LD_INT 4
19555: PUSH
19556: LD_INT 5
19558: PUSH
19559: LD_INT 11
19561: PUSH
19562: LD_INT 12
19564: PUSH
19565: LD_INT 15
19567: PUSH
19568: LD_INT 16
19570: PUSH
19571: LD_INT 22
19573: PUSH
19574: LD_INT 26
19576: PUSH
19577: LD_INT 36
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 101
19594: PUSH
19595: LD_INT 102
19597: PUSH
19598: LD_INT 105
19600: PUSH
19601: LD_INT 106
19603: PUSH
19604: LD_INT 108
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: ST_TO_ADDR
19618: GO 22313
19620: LD_INT 4
19622: DOUBLE
19623: EQUAL
19624: IFTRUE 19628
19626: GO 19712
19628: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
19629: LD_ADDR_VAR 0 1
19633: PUSH
19634: LD_INT 2
19636: PUSH
19637: LD_INT 4
19639: PUSH
19640: LD_INT 5
19642: PUSH
19643: LD_INT 8
19645: PUSH
19646: LD_INT 11
19648: PUSH
19649: LD_INT 12
19651: PUSH
19652: LD_INT 15
19654: PUSH
19655: LD_INT 16
19657: PUSH
19658: LD_INT 22
19660: PUSH
19661: LD_INT 23
19663: PUSH
19664: LD_INT 26
19666: PUSH
19667: LD_INT 36
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: PUSH
19684: LD_INT 101
19686: PUSH
19687: LD_INT 102
19689: PUSH
19690: LD_INT 105
19692: PUSH
19693: LD_INT 106
19695: PUSH
19696: LD_INT 108
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: ST_TO_ADDR
19710: GO 22313
19712: LD_INT 5
19714: DOUBLE
19715: EQUAL
19716: IFTRUE 19720
19718: GO 19820
19720: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
19721: LD_ADDR_VAR 0 1
19725: PUSH
19726: LD_INT 2
19728: PUSH
19729: LD_INT 4
19731: PUSH
19732: LD_INT 5
19734: PUSH
19735: LD_INT 6
19737: PUSH
19738: LD_INT 8
19740: PUSH
19741: LD_INT 11
19743: PUSH
19744: LD_INT 12
19746: PUSH
19747: LD_INT 15
19749: PUSH
19750: LD_INT 16
19752: PUSH
19753: LD_INT 22
19755: PUSH
19756: LD_INT 23
19758: PUSH
19759: LD_INT 25
19761: PUSH
19762: LD_INT 26
19764: PUSH
19765: LD_INT 36
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 101
19786: PUSH
19787: LD_INT 102
19789: PUSH
19790: LD_INT 105
19792: PUSH
19793: LD_INT 106
19795: PUSH
19796: LD_INT 108
19798: PUSH
19799: LD_INT 109
19801: PUSH
19802: LD_INT 112
19804: PUSH
19805: EMPTY
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: ST_TO_ADDR
19818: GO 22313
19820: LD_INT 6
19822: DOUBLE
19823: EQUAL
19824: IFTRUE 19828
19826: GO 19948
19828: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
19829: LD_ADDR_VAR 0 1
19833: PUSH
19834: LD_INT 2
19836: PUSH
19837: LD_INT 4
19839: PUSH
19840: LD_INT 5
19842: PUSH
19843: LD_INT 6
19845: PUSH
19846: LD_INT 8
19848: PUSH
19849: LD_INT 11
19851: PUSH
19852: LD_INT 12
19854: PUSH
19855: LD_INT 15
19857: PUSH
19858: LD_INT 16
19860: PUSH
19861: LD_INT 20
19863: PUSH
19864: LD_INT 21
19866: PUSH
19867: LD_INT 22
19869: PUSH
19870: LD_INT 23
19872: PUSH
19873: LD_INT 25
19875: PUSH
19876: LD_INT 26
19878: PUSH
19879: LD_INT 30
19881: PUSH
19882: LD_INT 31
19884: PUSH
19885: LD_INT 32
19887: PUSH
19888: LD_INT 36
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: PUSH
19912: LD_INT 101
19914: PUSH
19915: LD_INT 102
19917: PUSH
19918: LD_INT 105
19920: PUSH
19921: LD_INT 106
19923: PUSH
19924: LD_INT 108
19926: PUSH
19927: LD_INT 109
19929: PUSH
19930: LD_INT 112
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: ST_TO_ADDR
19946: GO 22313
19948: LD_INT 7
19950: DOUBLE
19951: EQUAL
19952: IFTRUE 19956
19954: GO 20056
19956: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
19957: LD_ADDR_VAR 0 1
19961: PUSH
19962: LD_INT 2
19964: PUSH
19965: LD_INT 4
19967: PUSH
19968: LD_INT 5
19970: PUSH
19971: LD_INT 7
19973: PUSH
19974: LD_INT 11
19976: PUSH
19977: LD_INT 12
19979: PUSH
19980: LD_INT 15
19982: PUSH
19983: LD_INT 16
19985: PUSH
19986: LD_INT 20
19988: PUSH
19989: LD_INT 21
19991: PUSH
19992: LD_INT 22
19994: PUSH
19995: LD_INT 23
19997: PUSH
19998: LD_INT 25
20000: PUSH
20001: LD_INT 26
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: PUSH
20020: LD_INT 101
20022: PUSH
20023: LD_INT 102
20025: PUSH
20026: LD_INT 103
20028: PUSH
20029: LD_INT 105
20031: PUSH
20032: LD_INT 106
20034: PUSH
20035: LD_INT 108
20037: PUSH
20038: LD_INT 112
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: ST_TO_ADDR
20054: GO 22313
20056: LD_INT 8
20058: DOUBLE
20059: EQUAL
20060: IFTRUE 20064
20062: GO 20192
20064: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
20065: LD_ADDR_VAR 0 1
20069: PUSH
20070: LD_INT 2
20072: PUSH
20073: LD_INT 4
20075: PUSH
20076: LD_INT 5
20078: PUSH
20079: LD_INT 6
20081: PUSH
20082: LD_INT 7
20084: PUSH
20085: LD_INT 8
20087: PUSH
20088: LD_INT 11
20090: PUSH
20091: LD_INT 12
20093: PUSH
20094: LD_INT 15
20096: PUSH
20097: LD_INT 16
20099: PUSH
20100: LD_INT 20
20102: PUSH
20103: LD_INT 21
20105: PUSH
20106: LD_INT 22
20108: PUSH
20109: LD_INT 23
20111: PUSH
20112: LD_INT 25
20114: PUSH
20115: LD_INT 26
20117: PUSH
20118: LD_INT 30
20120: PUSH
20121: LD_INT 31
20123: PUSH
20124: LD_INT 32
20126: PUSH
20127: LD_INT 36
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: PUSH
20152: LD_INT 101
20154: PUSH
20155: LD_INT 102
20157: PUSH
20158: LD_INT 103
20160: PUSH
20161: LD_INT 105
20163: PUSH
20164: LD_INT 106
20166: PUSH
20167: LD_INT 108
20169: PUSH
20170: LD_INT 109
20172: PUSH
20173: LD_INT 112
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: ST_TO_ADDR
20190: GO 22313
20192: LD_INT 9
20194: DOUBLE
20195: EQUAL
20196: IFTRUE 20200
20198: GO 20336
20200: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
20201: LD_ADDR_VAR 0 1
20205: PUSH
20206: LD_INT 2
20208: PUSH
20209: LD_INT 4
20211: PUSH
20212: LD_INT 5
20214: PUSH
20215: LD_INT 6
20217: PUSH
20218: LD_INT 7
20220: PUSH
20221: LD_INT 8
20223: PUSH
20224: LD_INT 11
20226: PUSH
20227: LD_INT 12
20229: PUSH
20230: LD_INT 15
20232: PUSH
20233: LD_INT 16
20235: PUSH
20236: LD_INT 20
20238: PUSH
20239: LD_INT 21
20241: PUSH
20242: LD_INT 22
20244: PUSH
20245: LD_INT 23
20247: PUSH
20248: LD_INT 25
20250: PUSH
20251: LD_INT 26
20253: PUSH
20254: LD_INT 28
20256: PUSH
20257: LD_INT 30
20259: PUSH
20260: LD_INT 31
20262: PUSH
20263: LD_INT 32
20265: PUSH
20266: LD_INT 36
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: PUSH
20292: LD_INT 101
20294: PUSH
20295: LD_INT 102
20297: PUSH
20298: LD_INT 103
20300: PUSH
20301: LD_INT 105
20303: PUSH
20304: LD_INT 106
20306: PUSH
20307: LD_INT 108
20309: PUSH
20310: LD_INT 109
20312: PUSH
20313: LD_INT 112
20315: PUSH
20316: LD_INT 114
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: ST_TO_ADDR
20334: GO 22313
20336: LD_INT 10
20338: DOUBLE
20339: EQUAL
20340: IFTRUE 20344
20342: GO 20528
20344: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
20345: LD_ADDR_VAR 0 1
20349: PUSH
20350: LD_INT 2
20352: PUSH
20353: LD_INT 4
20355: PUSH
20356: LD_INT 5
20358: PUSH
20359: LD_INT 6
20361: PUSH
20362: LD_INT 7
20364: PUSH
20365: LD_INT 8
20367: PUSH
20368: LD_INT 9
20370: PUSH
20371: LD_INT 10
20373: PUSH
20374: LD_INT 11
20376: PUSH
20377: LD_INT 12
20379: PUSH
20380: LD_INT 13
20382: PUSH
20383: LD_INT 14
20385: PUSH
20386: LD_INT 15
20388: PUSH
20389: LD_INT 16
20391: PUSH
20392: LD_INT 17
20394: PUSH
20395: LD_INT 18
20397: PUSH
20398: LD_INT 19
20400: PUSH
20401: LD_INT 20
20403: PUSH
20404: LD_INT 21
20406: PUSH
20407: LD_INT 22
20409: PUSH
20410: LD_INT 23
20412: PUSH
20413: LD_INT 24
20415: PUSH
20416: LD_INT 25
20418: PUSH
20419: LD_INT 26
20421: PUSH
20422: LD_INT 28
20424: PUSH
20425: LD_INT 30
20427: PUSH
20428: LD_INT 31
20430: PUSH
20431: LD_INT 32
20433: PUSH
20434: LD_INT 36
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: PUSH
20468: LD_INT 101
20470: PUSH
20471: LD_INT 102
20473: PUSH
20474: LD_INT 103
20476: PUSH
20477: LD_INT 104
20479: PUSH
20480: LD_INT 105
20482: PUSH
20483: LD_INT 106
20485: PUSH
20486: LD_INT 107
20488: PUSH
20489: LD_INT 108
20491: PUSH
20492: LD_INT 109
20494: PUSH
20495: LD_INT 110
20497: PUSH
20498: LD_INT 111
20500: PUSH
20501: LD_INT 112
20503: PUSH
20504: LD_INT 114
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: ST_TO_ADDR
20526: GO 22313
20528: LD_INT 11
20530: DOUBLE
20531: EQUAL
20532: IFTRUE 20536
20534: GO 20728
20536: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
20537: LD_ADDR_VAR 0 1
20541: PUSH
20542: LD_INT 2
20544: PUSH
20545: LD_INT 3
20547: PUSH
20548: LD_INT 4
20550: PUSH
20551: LD_INT 5
20553: PUSH
20554: LD_INT 6
20556: PUSH
20557: LD_INT 7
20559: PUSH
20560: LD_INT 8
20562: PUSH
20563: LD_INT 9
20565: PUSH
20566: LD_INT 10
20568: PUSH
20569: LD_INT 11
20571: PUSH
20572: LD_INT 12
20574: PUSH
20575: LD_INT 13
20577: PUSH
20578: LD_INT 14
20580: PUSH
20581: LD_INT 15
20583: PUSH
20584: LD_INT 16
20586: PUSH
20587: LD_INT 17
20589: PUSH
20590: LD_INT 18
20592: PUSH
20593: LD_INT 19
20595: PUSH
20596: LD_INT 20
20598: PUSH
20599: LD_INT 21
20601: PUSH
20602: LD_INT 22
20604: PUSH
20605: LD_INT 23
20607: PUSH
20608: LD_INT 24
20610: PUSH
20611: LD_INT 25
20613: PUSH
20614: LD_INT 26
20616: PUSH
20617: LD_INT 28
20619: PUSH
20620: LD_INT 30
20622: PUSH
20623: LD_INT 31
20625: PUSH
20626: LD_INT 32
20628: PUSH
20629: LD_INT 34
20631: PUSH
20632: LD_INT 36
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: PUSH
20668: LD_INT 101
20670: PUSH
20671: LD_INT 102
20673: PUSH
20674: LD_INT 103
20676: PUSH
20677: LD_INT 104
20679: PUSH
20680: LD_INT 105
20682: PUSH
20683: LD_INT 106
20685: PUSH
20686: LD_INT 107
20688: PUSH
20689: LD_INT 108
20691: PUSH
20692: LD_INT 109
20694: PUSH
20695: LD_INT 110
20697: PUSH
20698: LD_INT 111
20700: PUSH
20701: LD_INT 112
20703: PUSH
20704: LD_INT 114
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: ST_TO_ADDR
20726: GO 22313
20728: LD_INT 12
20730: DOUBLE
20731: EQUAL
20732: IFTRUE 20736
20734: GO 20944
20736: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
20737: LD_ADDR_VAR 0 1
20741: PUSH
20742: LD_INT 1
20744: PUSH
20745: LD_INT 2
20747: PUSH
20748: LD_INT 3
20750: PUSH
20751: LD_INT 4
20753: PUSH
20754: LD_INT 5
20756: PUSH
20757: LD_INT 6
20759: PUSH
20760: LD_INT 7
20762: PUSH
20763: LD_INT 8
20765: PUSH
20766: LD_INT 9
20768: PUSH
20769: LD_INT 10
20771: PUSH
20772: LD_INT 11
20774: PUSH
20775: LD_INT 12
20777: PUSH
20778: LD_INT 13
20780: PUSH
20781: LD_INT 14
20783: PUSH
20784: LD_INT 15
20786: PUSH
20787: LD_INT 16
20789: PUSH
20790: LD_INT 17
20792: PUSH
20793: LD_INT 18
20795: PUSH
20796: LD_INT 19
20798: PUSH
20799: LD_INT 20
20801: PUSH
20802: LD_INT 21
20804: PUSH
20805: LD_INT 22
20807: PUSH
20808: LD_INT 23
20810: PUSH
20811: LD_INT 24
20813: PUSH
20814: LD_INT 25
20816: PUSH
20817: LD_INT 26
20819: PUSH
20820: LD_INT 27
20822: PUSH
20823: LD_INT 28
20825: PUSH
20826: LD_INT 30
20828: PUSH
20829: LD_INT 31
20831: PUSH
20832: LD_INT 32
20834: PUSH
20835: LD_INT 33
20837: PUSH
20838: LD_INT 34
20840: PUSH
20841: LD_INT 36
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: PUSH
20880: LD_INT 101
20882: PUSH
20883: LD_INT 102
20885: PUSH
20886: LD_INT 103
20888: PUSH
20889: LD_INT 104
20891: PUSH
20892: LD_INT 105
20894: PUSH
20895: LD_INT 106
20897: PUSH
20898: LD_INT 107
20900: PUSH
20901: LD_INT 108
20903: PUSH
20904: LD_INT 109
20906: PUSH
20907: LD_INT 110
20909: PUSH
20910: LD_INT 111
20912: PUSH
20913: LD_INT 112
20915: PUSH
20916: LD_INT 113
20918: PUSH
20919: LD_INT 114
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: ST_TO_ADDR
20942: GO 22313
20944: LD_INT 13
20946: DOUBLE
20947: EQUAL
20948: IFTRUE 20952
20950: GO 21148
20952: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
20953: LD_ADDR_VAR 0 1
20957: PUSH
20958: LD_INT 1
20960: PUSH
20961: LD_INT 2
20963: PUSH
20964: LD_INT 3
20966: PUSH
20967: LD_INT 4
20969: PUSH
20970: LD_INT 5
20972: PUSH
20973: LD_INT 8
20975: PUSH
20976: LD_INT 9
20978: PUSH
20979: LD_INT 10
20981: PUSH
20982: LD_INT 11
20984: PUSH
20985: LD_INT 12
20987: PUSH
20988: LD_INT 14
20990: PUSH
20991: LD_INT 15
20993: PUSH
20994: LD_INT 16
20996: PUSH
20997: LD_INT 17
20999: PUSH
21000: LD_INT 18
21002: PUSH
21003: LD_INT 19
21005: PUSH
21006: LD_INT 20
21008: PUSH
21009: LD_INT 21
21011: PUSH
21012: LD_INT 22
21014: PUSH
21015: LD_INT 23
21017: PUSH
21018: LD_INT 24
21020: PUSH
21021: LD_INT 25
21023: PUSH
21024: LD_INT 26
21026: PUSH
21027: LD_INT 27
21029: PUSH
21030: LD_INT 28
21032: PUSH
21033: LD_INT 30
21035: PUSH
21036: LD_INT 31
21038: PUSH
21039: LD_INT 32
21041: PUSH
21042: LD_INT 33
21044: PUSH
21045: LD_INT 34
21047: PUSH
21048: LD_INT 36
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: PUSH
21084: LD_INT 101
21086: PUSH
21087: LD_INT 102
21089: PUSH
21090: LD_INT 103
21092: PUSH
21093: LD_INT 104
21095: PUSH
21096: LD_INT 105
21098: PUSH
21099: LD_INT 106
21101: PUSH
21102: LD_INT 107
21104: PUSH
21105: LD_INT 108
21107: PUSH
21108: LD_INT 109
21110: PUSH
21111: LD_INT 110
21113: PUSH
21114: LD_INT 111
21116: PUSH
21117: LD_INT 112
21119: PUSH
21120: LD_INT 113
21122: PUSH
21123: LD_INT 114
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: ST_TO_ADDR
21146: GO 22313
21148: LD_INT 14
21150: DOUBLE
21151: EQUAL
21152: IFTRUE 21156
21154: GO 21368
21156: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
21157: LD_ADDR_VAR 0 1
21161: PUSH
21162: LD_INT 1
21164: PUSH
21165: LD_INT 2
21167: PUSH
21168: LD_INT 3
21170: PUSH
21171: LD_INT 4
21173: PUSH
21174: LD_INT 5
21176: PUSH
21177: LD_INT 6
21179: PUSH
21180: LD_INT 7
21182: PUSH
21183: LD_INT 8
21185: PUSH
21186: LD_INT 9
21188: PUSH
21189: LD_INT 10
21191: PUSH
21192: LD_INT 11
21194: PUSH
21195: LD_INT 12
21197: PUSH
21198: LD_INT 13
21200: PUSH
21201: LD_INT 14
21203: PUSH
21204: LD_INT 15
21206: PUSH
21207: LD_INT 16
21209: PUSH
21210: LD_INT 17
21212: PUSH
21213: LD_INT 18
21215: PUSH
21216: LD_INT 19
21218: PUSH
21219: LD_INT 20
21221: PUSH
21222: LD_INT 21
21224: PUSH
21225: LD_INT 22
21227: PUSH
21228: LD_INT 23
21230: PUSH
21231: LD_INT 24
21233: PUSH
21234: LD_INT 25
21236: PUSH
21237: LD_INT 26
21239: PUSH
21240: LD_INT 27
21242: PUSH
21243: LD_INT 28
21245: PUSH
21246: LD_INT 29
21248: PUSH
21249: LD_INT 30
21251: PUSH
21252: LD_INT 31
21254: PUSH
21255: LD_INT 32
21257: PUSH
21258: LD_INT 33
21260: PUSH
21261: LD_INT 34
21263: PUSH
21264: LD_INT 36
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: PUSH
21304: LD_INT 101
21306: PUSH
21307: LD_INT 102
21309: PUSH
21310: LD_INT 103
21312: PUSH
21313: LD_INT 104
21315: PUSH
21316: LD_INT 105
21318: PUSH
21319: LD_INT 106
21321: PUSH
21322: LD_INT 107
21324: PUSH
21325: LD_INT 108
21327: PUSH
21328: LD_INT 109
21330: PUSH
21331: LD_INT 110
21333: PUSH
21334: LD_INT 111
21336: PUSH
21337: LD_INT 112
21339: PUSH
21340: LD_INT 113
21342: PUSH
21343: LD_INT 114
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: ST_TO_ADDR
21366: GO 22313
21368: LD_INT 15
21370: DOUBLE
21371: EQUAL
21372: IFTRUE 21376
21374: GO 21588
21376: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
21377: LD_ADDR_VAR 0 1
21381: PUSH
21382: LD_INT 1
21384: PUSH
21385: LD_INT 2
21387: PUSH
21388: LD_INT 3
21390: PUSH
21391: LD_INT 4
21393: PUSH
21394: LD_INT 5
21396: PUSH
21397: LD_INT 6
21399: PUSH
21400: LD_INT 7
21402: PUSH
21403: LD_INT 8
21405: PUSH
21406: LD_INT 9
21408: PUSH
21409: LD_INT 10
21411: PUSH
21412: LD_INT 11
21414: PUSH
21415: LD_INT 12
21417: PUSH
21418: LD_INT 13
21420: PUSH
21421: LD_INT 14
21423: PUSH
21424: LD_INT 15
21426: PUSH
21427: LD_INT 16
21429: PUSH
21430: LD_INT 17
21432: PUSH
21433: LD_INT 18
21435: PUSH
21436: LD_INT 19
21438: PUSH
21439: LD_INT 20
21441: PUSH
21442: LD_INT 21
21444: PUSH
21445: LD_INT 22
21447: PUSH
21448: LD_INT 23
21450: PUSH
21451: LD_INT 24
21453: PUSH
21454: LD_INT 25
21456: PUSH
21457: LD_INT 26
21459: PUSH
21460: LD_INT 27
21462: PUSH
21463: LD_INT 28
21465: PUSH
21466: LD_INT 29
21468: PUSH
21469: LD_INT 30
21471: PUSH
21472: LD_INT 31
21474: PUSH
21475: LD_INT 32
21477: PUSH
21478: LD_INT 33
21480: PUSH
21481: LD_INT 34
21483: PUSH
21484: LD_INT 36
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: PUSH
21524: LD_INT 101
21526: PUSH
21527: LD_INT 102
21529: PUSH
21530: LD_INT 103
21532: PUSH
21533: LD_INT 104
21535: PUSH
21536: LD_INT 105
21538: PUSH
21539: LD_INT 106
21541: PUSH
21542: LD_INT 107
21544: PUSH
21545: LD_INT 108
21547: PUSH
21548: LD_INT 109
21550: PUSH
21551: LD_INT 110
21553: PUSH
21554: LD_INT 111
21556: PUSH
21557: LD_INT 112
21559: PUSH
21560: LD_INT 113
21562: PUSH
21563: LD_INT 114
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: ST_TO_ADDR
21586: GO 22313
21588: LD_INT 16
21590: DOUBLE
21591: EQUAL
21592: IFTRUE 21596
21594: GO 21720
21596: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
21597: LD_ADDR_VAR 0 1
21601: PUSH
21602: LD_INT 2
21604: PUSH
21605: LD_INT 4
21607: PUSH
21608: LD_INT 5
21610: PUSH
21611: LD_INT 7
21613: PUSH
21614: LD_INT 11
21616: PUSH
21617: LD_INT 12
21619: PUSH
21620: LD_INT 15
21622: PUSH
21623: LD_INT 16
21625: PUSH
21626: LD_INT 20
21628: PUSH
21629: LD_INT 21
21631: PUSH
21632: LD_INT 22
21634: PUSH
21635: LD_INT 23
21637: PUSH
21638: LD_INT 25
21640: PUSH
21641: LD_INT 26
21643: PUSH
21644: LD_INT 30
21646: PUSH
21647: LD_INT 31
21649: PUSH
21650: LD_INT 32
21652: PUSH
21653: LD_INT 33
21655: PUSH
21656: LD_INT 34
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 101
21682: PUSH
21683: LD_INT 102
21685: PUSH
21686: LD_INT 103
21688: PUSH
21689: LD_INT 106
21691: PUSH
21692: LD_INT 108
21694: PUSH
21695: LD_INT 112
21697: PUSH
21698: LD_INT 113
21700: PUSH
21701: LD_INT 114
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: ST_TO_ADDR
21718: GO 22313
21720: LD_INT 17
21722: DOUBLE
21723: EQUAL
21724: IFTRUE 21728
21726: GO 21940
21728: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
21729: LD_ADDR_VAR 0 1
21733: PUSH
21734: LD_INT 1
21736: PUSH
21737: LD_INT 2
21739: PUSH
21740: LD_INT 3
21742: PUSH
21743: LD_INT 4
21745: PUSH
21746: LD_INT 5
21748: PUSH
21749: LD_INT 6
21751: PUSH
21752: LD_INT 7
21754: PUSH
21755: LD_INT 8
21757: PUSH
21758: LD_INT 9
21760: PUSH
21761: LD_INT 10
21763: PUSH
21764: LD_INT 11
21766: PUSH
21767: LD_INT 12
21769: PUSH
21770: LD_INT 13
21772: PUSH
21773: LD_INT 14
21775: PUSH
21776: LD_INT 15
21778: PUSH
21779: LD_INT 16
21781: PUSH
21782: LD_INT 17
21784: PUSH
21785: LD_INT 18
21787: PUSH
21788: LD_INT 19
21790: PUSH
21791: LD_INT 20
21793: PUSH
21794: LD_INT 21
21796: PUSH
21797: LD_INT 22
21799: PUSH
21800: LD_INT 23
21802: PUSH
21803: LD_INT 24
21805: PUSH
21806: LD_INT 25
21808: PUSH
21809: LD_INT 26
21811: PUSH
21812: LD_INT 27
21814: PUSH
21815: LD_INT 28
21817: PUSH
21818: LD_INT 29
21820: PUSH
21821: LD_INT 30
21823: PUSH
21824: LD_INT 31
21826: PUSH
21827: LD_INT 32
21829: PUSH
21830: LD_INT 33
21832: PUSH
21833: LD_INT 34
21835: PUSH
21836: LD_INT 36
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: PUSH
21876: LD_INT 101
21878: PUSH
21879: LD_INT 102
21881: PUSH
21882: LD_INT 103
21884: PUSH
21885: LD_INT 104
21887: PUSH
21888: LD_INT 105
21890: PUSH
21891: LD_INT 106
21893: PUSH
21894: LD_INT 107
21896: PUSH
21897: LD_INT 108
21899: PUSH
21900: LD_INT 109
21902: PUSH
21903: LD_INT 110
21905: PUSH
21906: LD_INT 111
21908: PUSH
21909: LD_INT 112
21911: PUSH
21912: LD_INT 113
21914: PUSH
21915: LD_INT 114
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: ST_TO_ADDR
21938: GO 22313
21940: LD_INT 18
21942: DOUBLE
21943: EQUAL
21944: IFTRUE 21948
21946: GO 22084
21948: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
21949: LD_ADDR_VAR 0 1
21953: PUSH
21954: LD_INT 2
21956: PUSH
21957: LD_INT 4
21959: PUSH
21960: LD_INT 5
21962: PUSH
21963: LD_INT 7
21965: PUSH
21966: LD_INT 11
21968: PUSH
21969: LD_INT 12
21971: PUSH
21972: LD_INT 15
21974: PUSH
21975: LD_INT 16
21977: PUSH
21978: LD_INT 20
21980: PUSH
21981: LD_INT 21
21983: PUSH
21984: LD_INT 22
21986: PUSH
21987: LD_INT 23
21989: PUSH
21990: LD_INT 25
21992: PUSH
21993: LD_INT 26
21995: PUSH
21996: LD_INT 30
21998: PUSH
21999: LD_INT 31
22001: PUSH
22002: LD_INT 32
22004: PUSH
22005: LD_INT 33
22007: PUSH
22008: LD_INT 34
22010: PUSH
22011: LD_INT 35
22013: PUSH
22014: LD_INT 36
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 101
22042: PUSH
22043: LD_INT 102
22045: PUSH
22046: LD_INT 103
22048: PUSH
22049: LD_INT 106
22051: PUSH
22052: LD_INT 108
22054: PUSH
22055: LD_INT 112
22057: PUSH
22058: LD_INT 113
22060: PUSH
22061: LD_INT 114
22063: PUSH
22064: LD_INT 115
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: ST_TO_ADDR
22082: GO 22313
22084: LD_INT 19
22086: DOUBLE
22087: EQUAL
22088: IFTRUE 22092
22090: GO 22312
22092: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
22093: LD_ADDR_VAR 0 1
22097: PUSH
22098: LD_INT 1
22100: PUSH
22101: LD_INT 2
22103: PUSH
22104: LD_INT 3
22106: PUSH
22107: LD_INT 4
22109: PUSH
22110: LD_INT 5
22112: PUSH
22113: LD_INT 6
22115: PUSH
22116: LD_INT 7
22118: PUSH
22119: LD_INT 8
22121: PUSH
22122: LD_INT 9
22124: PUSH
22125: LD_INT 10
22127: PUSH
22128: LD_INT 11
22130: PUSH
22131: LD_INT 12
22133: PUSH
22134: LD_INT 13
22136: PUSH
22137: LD_INT 14
22139: PUSH
22140: LD_INT 15
22142: PUSH
22143: LD_INT 16
22145: PUSH
22146: LD_INT 17
22148: PUSH
22149: LD_INT 18
22151: PUSH
22152: LD_INT 19
22154: PUSH
22155: LD_INT 20
22157: PUSH
22158: LD_INT 21
22160: PUSH
22161: LD_INT 22
22163: PUSH
22164: LD_INT 23
22166: PUSH
22167: LD_INT 24
22169: PUSH
22170: LD_INT 25
22172: PUSH
22173: LD_INT 26
22175: PUSH
22176: LD_INT 27
22178: PUSH
22179: LD_INT 28
22181: PUSH
22182: LD_INT 29
22184: PUSH
22185: LD_INT 30
22187: PUSH
22188: LD_INT 31
22190: PUSH
22191: LD_INT 32
22193: PUSH
22194: LD_INT 33
22196: PUSH
22197: LD_INT 34
22199: PUSH
22200: LD_INT 35
22202: PUSH
22203: LD_INT 36
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 101
22246: PUSH
22247: LD_INT 102
22249: PUSH
22250: LD_INT 103
22252: PUSH
22253: LD_INT 104
22255: PUSH
22256: LD_INT 105
22258: PUSH
22259: LD_INT 106
22261: PUSH
22262: LD_INT 107
22264: PUSH
22265: LD_INT 108
22267: PUSH
22268: LD_INT 109
22270: PUSH
22271: LD_INT 110
22273: PUSH
22274: LD_INT 111
22276: PUSH
22277: LD_INT 112
22279: PUSH
22280: LD_INT 113
22282: PUSH
22283: LD_INT 114
22285: PUSH
22286: LD_INT 115
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: ST_TO_ADDR
22310: GO 22313
22312: POP
// end else
22313: GO 22532
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
22315: LD_ADDR_VAR 0 1
22319: PUSH
22320: LD_INT 1
22322: PUSH
22323: LD_INT 2
22325: PUSH
22326: LD_INT 3
22328: PUSH
22329: LD_INT 4
22331: PUSH
22332: LD_INT 5
22334: PUSH
22335: LD_INT 6
22337: PUSH
22338: LD_INT 7
22340: PUSH
22341: LD_INT 8
22343: PUSH
22344: LD_INT 9
22346: PUSH
22347: LD_INT 10
22349: PUSH
22350: LD_INT 11
22352: PUSH
22353: LD_INT 12
22355: PUSH
22356: LD_INT 13
22358: PUSH
22359: LD_INT 14
22361: PUSH
22362: LD_INT 15
22364: PUSH
22365: LD_INT 16
22367: PUSH
22368: LD_INT 17
22370: PUSH
22371: LD_INT 18
22373: PUSH
22374: LD_INT 19
22376: PUSH
22377: LD_INT 20
22379: PUSH
22380: LD_INT 21
22382: PUSH
22383: LD_INT 22
22385: PUSH
22386: LD_INT 23
22388: PUSH
22389: LD_INT 24
22391: PUSH
22392: LD_INT 25
22394: PUSH
22395: LD_INT 26
22397: PUSH
22398: LD_INT 27
22400: PUSH
22401: LD_INT 28
22403: PUSH
22404: LD_INT 29
22406: PUSH
22407: LD_INT 30
22409: PUSH
22410: LD_INT 31
22412: PUSH
22413: LD_INT 32
22415: PUSH
22416: LD_INT 33
22418: PUSH
22419: LD_INT 34
22421: PUSH
22422: LD_INT 35
22424: PUSH
22425: LD_INT 36
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 101
22468: PUSH
22469: LD_INT 102
22471: PUSH
22472: LD_INT 103
22474: PUSH
22475: LD_INT 104
22477: PUSH
22478: LD_INT 105
22480: PUSH
22481: LD_INT 106
22483: PUSH
22484: LD_INT 107
22486: PUSH
22487: LD_INT 108
22489: PUSH
22490: LD_INT 109
22492: PUSH
22493: LD_INT 110
22495: PUSH
22496: LD_INT 111
22498: PUSH
22499: LD_INT 112
22501: PUSH
22502: LD_INT 113
22504: PUSH
22505: LD_INT 114
22507: PUSH
22508: LD_INT 115
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: ST_TO_ADDR
// if result then
22532: LD_VAR 0 1
22536: IFFALSE 22825
// begin normal :=  ;
22538: LD_ADDR_VAR 0 3
22542: PUSH
22543: LD_STRING 
22545: ST_TO_ADDR
// hardcore :=  ;
22546: LD_ADDR_VAR 0 4
22550: PUSH
22551: LD_STRING 
22553: ST_TO_ADDR
// for i = 1 to normalCounter do
22554: LD_ADDR_VAR 0 5
22558: PUSH
22559: DOUBLE
22560: LD_INT 1
22562: DEC
22563: ST_TO_ADDR
22564: LD_EXP 53
22568: PUSH
22569: FOR_TO
22570: IFFALSE 22671
// begin tmp := 0 ;
22572: LD_ADDR_VAR 0 2
22576: PUSH
22577: LD_STRING 0
22579: ST_TO_ADDR
// if result [ 1 ] then
22580: LD_VAR 0 1
22584: PUSH
22585: LD_INT 1
22587: ARRAY
22588: IFFALSE 22653
// if result [ 1 ] [ 1 ] = i then
22590: LD_VAR 0 1
22594: PUSH
22595: LD_INT 1
22597: ARRAY
22598: PUSH
22599: LD_INT 1
22601: ARRAY
22602: PUSH
22603: LD_VAR 0 5
22607: EQUAL
22608: IFFALSE 22653
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22610: LD_ADDR_VAR 0 1
22614: PUSH
22615: LD_VAR 0 1
22619: PPUSH
22620: LD_INT 1
22622: PPUSH
22623: LD_VAR 0 1
22627: PUSH
22628: LD_INT 1
22630: ARRAY
22631: PPUSH
22632: LD_INT 1
22634: PPUSH
22635: CALL_OW 3
22639: PPUSH
22640: CALL_OW 1
22644: ST_TO_ADDR
// tmp := 1 ;
22645: LD_ADDR_VAR 0 2
22649: PUSH
22650: LD_STRING 1
22652: ST_TO_ADDR
// end ; normal := normal & tmp ;
22653: LD_ADDR_VAR 0 3
22657: PUSH
22658: LD_VAR 0 3
22662: PUSH
22663: LD_VAR 0 2
22667: STR
22668: ST_TO_ADDR
// end ;
22669: GO 22569
22671: POP
22672: POP
// for i = 1 to hardcoreCounter do
22673: LD_ADDR_VAR 0 5
22677: PUSH
22678: DOUBLE
22679: LD_INT 1
22681: DEC
22682: ST_TO_ADDR
22683: LD_EXP 54
22687: PUSH
22688: FOR_TO
22689: IFFALSE 22794
// begin tmp := 0 ;
22691: LD_ADDR_VAR 0 2
22695: PUSH
22696: LD_STRING 0
22698: ST_TO_ADDR
// if result [ 2 ] then
22699: LD_VAR 0 1
22703: PUSH
22704: LD_INT 2
22706: ARRAY
22707: IFFALSE 22776
// if result [ 2 ] [ 1 ] = 100 + i then
22709: LD_VAR 0 1
22713: PUSH
22714: LD_INT 2
22716: ARRAY
22717: PUSH
22718: LD_INT 1
22720: ARRAY
22721: PUSH
22722: LD_INT 100
22724: PUSH
22725: LD_VAR 0 5
22729: PLUS
22730: EQUAL
22731: IFFALSE 22776
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22733: LD_ADDR_VAR 0 1
22737: PUSH
22738: LD_VAR 0 1
22742: PPUSH
22743: LD_INT 2
22745: PPUSH
22746: LD_VAR 0 1
22750: PUSH
22751: LD_INT 2
22753: ARRAY
22754: PPUSH
22755: LD_INT 1
22757: PPUSH
22758: CALL_OW 3
22762: PPUSH
22763: CALL_OW 1
22767: ST_TO_ADDR
// tmp := 1 ;
22768: LD_ADDR_VAR 0 2
22772: PUSH
22773: LD_STRING 1
22775: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22776: LD_ADDR_VAR 0 4
22780: PUSH
22781: LD_VAR 0 4
22785: PUSH
22786: LD_VAR 0 2
22790: STR
22791: ST_TO_ADDR
// end ;
22792: GO 22688
22794: POP
22795: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
22796: LD_STRING getStreamItemsFromMission("
22798: PUSH
22799: LD_VAR 0 3
22803: STR
22804: PUSH
22805: LD_STRING ","
22807: STR
22808: PUSH
22809: LD_VAR 0 4
22813: STR
22814: PUSH
22815: LD_STRING ")
22817: STR
22818: PPUSH
22819: CALL_OW 559
// end else
22823: GO 22832
// ToLua ( getStreamItemsFromMission("","") ) ;
22825: LD_STRING getStreamItemsFromMission("","")
22827: PPUSH
22828: CALL_OW 559
// end ;
22832: LD_VAR 0 1
22836: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
22837: LD_EXP 52
22841: PUSH
22842: LD_EXP 57
22846: AND
22847: IFFALSE 22971
22849: GO 22851
22851: DISABLE
22852: LD_INT 0
22854: PPUSH
22855: PPUSH
// begin enable ;
22856: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
22857: LD_ADDR_VAR 0 2
22861: PUSH
22862: LD_INT 22
22864: PUSH
22865: LD_OWVAR 2
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 2
22876: PUSH
22877: LD_INT 34
22879: PUSH
22880: LD_INT 7
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PUSH
22887: LD_INT 34
22889: PUSH
22890: LD_INT 45
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PUSH
22897: LD_INT 34
22899: PUSH
22900: LD_INT 28
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 34
22909: PUSH
22910: LD_INT 47
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PPUSH
22928: CALL_OW 69
22932: ST_TO_ADDR
// if not tmp then
22933: LD_VAR 0 2
22937: NOT
22938: IFFALSE 22942
// exit ;
22940: GO 22971
// for i in tmp do
22942: LD_ADDR_VAR 0 1
22946: PUSH
22947: LD_VAR 0 2
22951: PUSH
22952: FOR_IN
22953: IFFALSE 22969
// begin SetLives ( i , 0 ) ;
22955: LD_VAR 0 1
22959: PPUSH
22960: LD_INT 0
22962: PPUSH
22963: CALL_OW 234
// end ;
22967: GO 22952
22969: POP
22970: POP
// end ;
22971: PPOPN 2
22973: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
22974: LD_EXP 52
22978: PUSH
22979: LD_EXP 58
22983: AND
22984: IFFALSE 23068
22986: GO 22988
22988: DISABLE
22989: LD_INT 0
22991: PPUSH
22992: PPUSH
// begin enable ;
22993: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
22994: LD_ADDR_VAR 0 2
22998: PUSH
22999: LD_INT 22
23001: PUSH
23002: LD_OWVAR 2
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: LD_INT 32
23013: PUSH
23014: LD_INT 3
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PPUSH
23025: CALL_OW 69
23029: ST_TO_ADDR
// if not tmp then
23030: LD_VAR 0 2
23034: NOT
23035: IFFALSE 23039
// exit ;
23037: GO 23068
// for i in tmp do
23039: LD_ADDR_VAR 0 1
23043: PUSH
23044: LD_VAR 0 2
23048: PUSH
23049: FOR_IN
23050: IFFALSE 23066
// begin SetLives ( i , 0 ) ;
23052: LD_VAR 0 1
23056: PPUSH
23057: LD_INT 0
23059: PPUSH
23060: CALL_OW 234
// end ;
23064: GO 23049
23066: POP
23067: POP
// end ;
23068: PPOPN 2
23070: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23071: LD_EXP 52
23075: PUSH
23076: LD_EXP 55
23080: AND
23081: IFFALSE 23174
23083: GO 23085
23085: DISABLE
23086: LD_INT 0
23088: PPUSH
// begin enable ;
23089: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23090: LD_ADDR_VAR 0 1
23094: PUSH
23095: LD_INT 22
23097: PUSH
23098: LD_OWVAR 2
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: PUSH
23107: LD_INT 2
23109: PUSH
23110: LD_INT 25
23112: PUSH
23113: LD_INT 5
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 25
23122: PUSH
23123: LD_INT 9
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 25
23132: PUSH
23133: LD_INT 8
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: EMPTY
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PPUSH
23150: CALL_OW 69
23154: PUSH
23155: FOR_IN
23156: IFFALSE 23172
// begin SetClass ( i , 1 ) ;
23158: LD_VAR 0 1
23162: PPUSH
23163: LD_INT 1
23165: PPUSH
23166: CALL_OW 336
// end ;
23170: GO 23155
23172: POP
23173: POP
// end ;
23174: PPOPN 1
23176: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23177: LD_EXP 52
23181: PUSH
23182: LD_EXP 56
23186: AND
23187: PUSH
23188: LD_OWVAR 65
23192: PUSH
23193: LD_INT 7
23195: LESS
23196: AND
23197: IFFALSE 23211
23199: GO 23201
23201: DISABLE
// begin enable ;
23202: ENABLE
// game_speed := 7 ;
23203: LD_ADDR_OWVAR 65
23207: PUSH
23208: LD_INT 7
23210: ST_TO_ADDR
// end ;
23211: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23212: LD_EXP 52
23216: PUSH
23217: LD_EXP 59
23221: AND
23222: IFFALSE 23424
23224: GO 23226
23226: DISABLE
23227: LD_INT 0
23229: PPUSH
23230: PPUSH
23231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23232: LD_ADDR_VAR 0 3
23236: PUSH
23237: LD_INT 81
23239: PUSH
23240: LD_OWVAR 2
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 21
23251: PUSH
23252: LD_INT 1
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PPUSH
23263: CALL_OW 69
23267: ST_TO_ADDR
// if not tmp then
23268: LD_VAR 0 3
23272: NOT
23273: IFFALSE 23277
// exit ;
23275: GO 23424
// if tmp > 5 then
23277: LD_VAR 0 3
23281: PUSH
23282: LD_INT 5
23284: GREATER
23285: IFFALSE 23297
// k := 5 else
23287: LD_ADDR_VAR 0 2
23291: PUSH
23292: LD_INT 5
23294: ST_TO_ADDR
23295: GO 23307
// k := tmp ;
23297: LD_ADDR_VAR 0 2
23301: PUSH
23302: LD_VAR 0 3
23306: ST_TO_ADDR
// for i := 1 to k do
23307: LD_ADDR_VAR 0 1
23311: PUSH
23312: DOUBLE
23313: LD_INT 1
23315: DEC
23316: ST_TO_ADDR
23317: LD_VAR 0 2
23321: PUSH
23322: FOR_TO
23323: IFFALSE 23422
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23325: LD_VAR 0 3
23329: PUSH
23330: LD_VAR 0 1
23334: ARRAY
23335: PPUSH
23336: LD_VAR 0 1
23340: PUSH
23341: LD_INT 4
23343: MOD
23344: PUSH
23345: LD_INT 1
23347: PLUS
23348: PPUSH
23349: CALL_OW 259
23353: PUSH
23354: LD_INT 10
23356: LESS
23357: IFFALSE 23420
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23359: LD_VAR 0 3
23363: PUSH
23364: LD_VAR 0 1
23368: ARRAY
23369: PPUSH
23370: LD_VAR 0 1
23374: PUSH
23375: LD_INT 4
23377: MOD
23378: PUSH
23379: LD_INT 1
23381: PLUS
23382: PPUSH
23383: LD_VAR 0 3
23387: PUSH
23388: LD_VAR 0 1
23392: ARRAY
23393: PPUSH
23394: LD_VAR 0 1
23398: PUSH
23399: LD_INT 4
23401: MOD
23402: PUSH
23403: LD_INT 1
23405: PLUS
23406: PPUSH
23407: CALL_OW 259
23411: PUSH
23412: LD_INT 1
23414: PLUS
23415: PPUSH
23416: CALL_OW 237
23420: GO 23322
23422: POP
23423: POP
// end ;
23424: PPOPN 3
23426: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23427: LD_EXP 52
23431: PUSH
23432: LD_EXP 60
23436: AND
23437: IFFALSE 23457
23439: GO 23441
23441: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23442: LD_INT 4
23444: PPUSH
23445: LD_OWVAR 2
23449: PPUSH
23450: LD_INT 0
23452: PPUSH
23453: CALL_OW 324
23457: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23458: LD_EXP 52
23462: PUSH
23463: LD_EXP 89
23467: AND
23468: IFFALSE 23488
23470: GO 23472
23472: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23473: LD_INT 19
23475: PPUSH
23476: LD_OWVAR 2
23480: PPUSH
23481: LD_INT 0
23483: PPUSH
23484: CALL_OW 324
23488: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23489: LD_EXP 52
23493: PUSH
23494: LD_EXP 61
23498: AND
23499: IFFALSE 23601
23501: GO 23503
23503: DISABLE
23504: LD_INT 0
23506: PPUSH
23507: PPUSH
// begin enable ;
23508: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23509: LD_ADDR_VAR 0 2
23513: PUSH
23514: LD_INT 22
23516: PUSH
23517: LD_OWVAR 2
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PUSH
23526: LD_INT 2
23528: PUSH
23529: LD_INT 34
23531: PUSH
23532: LD_INT 11
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 34
23541: PUSH
23542: LD_INT 30
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: LIST
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: PPUSH
23558: CALL_OW 69
23562: ST_TO_ADDR
// if not tmp then
23563: LD_VAR 0 2
23567: NOT
23568: IFFALSE 23572
// exit ;
23570: GO 23601
// for i in tmp do
23572: LD_ADDR_VAR 0 1
23576: PUSH
23577: LD_VAR 0 2
23581: PUSH
23582: FOR_IN
23583: IFFALSE 23599
// begin SetLives ( i , 0 ) ;
23585: LD_VAR 0 1
23589: PPUSH
23590: LD_INT 0
23592: PPUSH
23593: CALL_OW 234
// end ;
23597: GO 23582
23599: POP
23600: POP
// end ;
23601: PPOPN 2
23603: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23604: LD_EXP 52
23608: PUSH
23609: LD_EXP 62
23613: AND
23614: IFFALSE 23634
23616: GO 23618
23618: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23619: LD_INT 32
23621: PPUSH
23622: LD_OWVAR 2
23626: PPUSH
23627: LD_INT 0
23629: PPUSH
23630: CALL_OW 324
23634: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23635: LD_EXP 52
23639: PUSH
23640: LD_EXP 63
23644: AND
23645: IFFALSE 23826
23647: GO 23649
23649: DISABLE
23650: LD_INT 0
23652: PPUSH
23653: PPUSH
23654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23655: LD_ADDR_VAR 0 2
23659: PUSH
23660: LD_INT 22
23662: PUSH
23663: LD_OWVAR 2
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: PUSH
23672: LD_INT 33
23674: PUSH
23675: LD_INT 3
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PPUSH
23686: CALL_OW 69
23690: ST_TO_ADDR
// if not tmp then
23691: LD_VAR 0 2
23695: NOT
23696: IFFALSE 23700
// exit ;
23698: GO 23826
// side := 0 ;
23700: LD_ADDR_VAR 0 3
23704: PUSH
23705: LD_INT 0
23707: ST_TO_ADDR
// for i := 1 to 8 do
23708: LD_ADDR_VAR 0 1
23712: PUSH
23713: DOUBLE
23714: LD_INT 1
23716: DEC
23717: ST_TO_ADDR
23718: LD_INT 8
23720: PUSH
23721: FOR_TO
23722: IFFALSE 23770
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23724: LD_OWVAR 2
23728: PUSH
23729: LD_VAR 0 1
23733: NONEQUAL
23734: PUSH
23735: LD_OWVAR 2
23739: PPUSH
23740: LD_VAR 0 1
23744: PPUSH
23745: CALL_OW 81
23749: PUSH
23750: LD_INT 2
23752: EQUAL
23753: AND
23754: IFFALSE 23768
// begin side := i ;
23756: LD_ADDR_VAR 0 3
23760: PUSH
23761: LD_VAR 0 1
23765: ST_TO_ADDR
// break ;
23766: GO 23770
// end ;
23768: GO 23721
23770: POP
23771: POP
// if not side then
23772: LD_VAR 0 3
23776: NOT
23777: IFFALSE 23781
// exit ;
23779: GO 23826
// for i := 1 to tmp do
23781: LD_ADDR_VAR 0 1
23785: PUSH
23786: DOUBLE
23787: LD_INT 1
23789: DEC
23790: ST_TO_ADDR
23791: LD_VAR 0 2
23795: PUSH
23796: FOR_TO
23797: IFFALSE 23824
// if Prob ( 60 ) then
23799: LD_INT 60
23801: PPUSH
23802: CALL_OW 13
23806: IFFALSE 23822
// SetSide ( i , side ) ;
23808: LD_VAR 0 1
23812: PPUSH
23813: LD_VAR 0 3
23817: PPUSH
23818: CALL_OW 235
23822: GO 23796
23824: POP
23825: POP
// end ;
23826: PPOPN 3
23828: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
23829: LD_EXP 52
23833: PUSH
23834: LD_EXP 65
23838: AND
23839: IFFALSE 23958
23841: GO 23843
23843: DISABLE
23844: LD_INT 0
23846: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
23847: LD_ADDR_VAR 0 1
23851: PUSH
23852: LD_INT 22
23854: PUSH
23855: LD_OWVAR 2
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 21
23866: PUSH
23867: LD_INT 1
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 3
23876: PUSH
23877: LD_INT 23
23879: PUSH
23880: LD_INT 0
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: LIST
23895: PPUSH
23896: CALL_OW 69
23900: PUSH
23901: FOR_IN
23902: IFFALSE 23956
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
23904: LD_VAR 0 1
23908: PPUSH
23909: CALL_OW 257
23913: PUSH
23914: LD_INT 1
23916: PUSH
23917: LD_INT 2
23919: PUSH
23920: LD_INT 3
23922: PUSH
23923: LD_INT 4
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: IN
23932: IFFALSE 23954
// SetClass ( un , rand ( 1 , 4 ) ) ;
23934: LD_VAR 0 1
23938: PPUSH
23939: LD_INT 1
23941: PPUSH
23942: LD_INT 4
23944: PPUSH
23945: CALL_OW 12
23949: PPUSH
23950: CALL_OW 336
23954: GO 23901
23956: POP
23957: POP
// end ;
23958: PPOPN 1
23960: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
23961: LD_EXP 52
23965: PUSH
23966: LD_EXP 64
23970: AND
23971: IFFALSE 24050
23973: GO 23975
23975: DISABLE
23976: LD_INT 0
23978: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23979: LD_ADDR_VAR 0 1
23983: PUSH
23984: LD_INT 22
23986: PUSH
23987: LD_OWVAR 2
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 21
23998: PUSH
23999: LD_INT 3
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: PPUSH
24010: CALL_OW 69
24014: ST_TO_ADDR
// if not tmp then
24015: LD_VAR 0 1
24019: NOT
24020: IFFALSE 24024
// exit ;
24022: GO 24050
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24024: LD_VAR 0 1
24028: PUSH
24029: LD_INT 1
24031: PPUSH
24032: LD_VAR 0 1
24036: PPUSH
24037: CALL_OW 12
24041: ARRAY
24042: PPUSH
24043: LD_INT 100
24045: PPUSH
24046: CALL_OW 234
// end ;
24050: PPOPN 1
24052: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24053: LD_EXP 52
24057: PUSH
24058: LD_EXP 66
24062: AND
24063: IFFALSE 24161
24065: GO 24067
24067: DISABLE
24068: LD_INT 0
24070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24071: LD_ADDR_VAR 0 1
24075: PUSH
24076: LD_INT 22
24078: PUSH
24079: LD_OWVAR 2
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 21
24090: PUSH
24091: LD_INT 1
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: PPUSH
24102: CALL_OW 69
24106: ST_TO_ADDR
// if not tmp then
24107: LD_VAR 0 1
24111: NOT
24112: IFFALSE 24116
// exit ;
24114: GO 24161
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24116: LD_VAR 0 1
24120: PUSH
24121: LD_INT 1
24123: PPUSH
24124: LD_VAR 0 1
24128: PPUSH
24129: CALL_OW 12
24133: ARRAY
24134: PPUSH
24135: LD_INT 1
24137: PPUSH
24138: LD_INT 4
24140: PPUSH
24141: CALL_OW 12
24145: PPUSH
24146: LD_INT 3000
24148: PPUSH
24149: LD_INT 9000
24151: PPUSH
24152: CALL_OW 12
24156: PPUSH
24157: CALL_OW 492
// end ;
24161: PPOPN 1
24163: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24164: LD_EXP 52
24168: PUSH
24169: LD_EXP 67
24173: AND
24174: IFFALSE 24194
24176: GO 24178
24178: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24179: LD_INT 1
24181: PPUSH
24182: LD_OWVAR 2
24186: PPUSH
24187: LD_INT 0
24189: PPUSH
24190: CALL_OW 324
24194: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24195: LD_EXP 52
24199: PUSH
24200: LD_EXP 68
24204: AND
24205: IFFALSE 24288
24207: GO 24209
24209: DISABLE
24210: LD_INT 0
24212: PPUSH
24213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24214: LD_ADDR_VAR 0 2
24218: PUSH
24219: LD_INT 22
24221: PUSH
24222: LD_OWVAR 2
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: LD_INT 21
24233: PUSH
24234: LD_INT 3
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PPUSH
24245: CALL_OW 69
24249: ST_TO_ADDR
// if not tmp then
24250: LD_VAR 0 2
24254: NOT
24255: IFFALSE 24259
// exit ;
24257: GO 24288
// for i in tmp do
24259: LD_ADDR_VAR 0 1
24263: PUSH
24264: LD_VAR 0 2
24268: PUSH
24269: FOR_IN
24270: IFFALSE 24286
// SetBLevel ( i , 10 ) ;
24272: LD_VAR 0 1
24276: PPUSH
24277: LD_INT 10
24279: PPUSH
24280: CALL_OW 241
24284: GO 24269
24286: POP
24287: POP
// end ;
24288: PPOPN 2
24290: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24291: LD_EXP 52
24295: PUSH
24296: LD_EXP 69
24300: AND
24301: IFFALSE 24412
24303: GO 24305
24305: DISABLE
24306: LD_INT 0
24308: PPUSH
24309: PPUSH
24310: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24311: LD_ADDR_VAR 0 3
24315: PUSH
24316: LD_INT 22
24318: PUSH
24319: LD_OWVAR 2
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PUSH
24328: LD_INT 25
24330: PUSH
24331: LD_INT 1
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PPUSH
24342: CALL_OW 69
24346: ST_TO_ADDR
// if not tmp then
24347: LD_VAR 0 3
24351: NOT
24352: IFFALSE 24356
// exit ;
24354: GO 24412
// un := tmp [ rand ( 1 , tmp ) ] ;
24356: LD_ADDR_VAR 0 2
24360: PUSH
24361: LD_VAR 0 3
24365: PUSH
24366: LD_INT 1
24368: PPUSH
24369: LD_VAR 0 3
24373: PPUSH
24374: CALL_OW 12
24378: ARRAY
24379: ST_TO_ADDR
// if Crawls ( un ) then
24380: LD_VAR 0 2
24384: PPUSH
24385: CALL_OW 318
24389: IFFALSE 24400
// ComWalk ( un ) ;
24391: LD_VAR 0 2
24395: PPUSH
24396: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24400: LD_VAR 0 2
24404: PPUSH
24405: LD_INT 5
24407: PPUSH
24408: CALL_OW 336
// end ;
24412: PPOPN 3
24414: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
24415: LD_EXP 52
24419: PUSH
24420: LD_EXP 70
24424: AND
24425: PUSH
24426: LD_OWVAR 67
24430: PUSH
24431: LD_INT 3
24433: LESS
24434: AND
24435: IFFALSE 24454
24437: GO 24439
24439: DISABLE
// Difficulty := Difficulty + 1 ;
24440: LD_ADDR_OWVAR 67
24444: PUSH
24445: LD_OWVAR 67
24449: PUSH
24450: LD_INT 1
24452: PLUS
24453: ST_TO_ADDR
24454: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24455: LD_EXP 52
24459: PUSH
24460: LD_EXP 71
24464: AND
24465: IFFALSE 24568
24467: GO 24469
24469: DISABLE
24470: LD_INT 0
24472: PPUSH
// begin for i := 1 to 5 do
24473: LD_ADDR_VAR 0 1
24477: PUSH
24478: DOUBLE
24479: LD_INT 1
24481: DEC
24482: ST_TO_ADDR
24483: LD_INT 5
24485: PUSH
24486: FOR_TO
24487: IFFALSE 24566
// begin uc_nation := nation_nature ;
24489: LD_ADDR_OWVAR 21
24493: PUSH
24494: LD_INT 0
24496: ST_TO_ADDR
// uc_side := 0 ;
24497: LD_ADDR_OWVAR 20
24501: PUSH
24502: LD_INT 0
24504: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24505: LD_ADDR_OWVAR 29
24509: PUSH
24510: LD_INT 12
24512: PUSH
24513: LD_INT 12
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: ST_TO_ADDR
// hc_agressivity := 20 ;
24520: LD_ADDR_OWVAR 35
24524: PUSH
24525: LD_INT 20
24527: ST_TO_ADDR
// hc_class := class_tiger ;
24528: LD_ADDR_OWVAR 28
24532: PUSH
24533: LD_INT 14
24535: ST_TO_ADDR
// hc_gallery :=  ;
24536: LD_ADDR_OWVAR 33
24540: PUSH
24541: LD_STRING 
24543: ST_TO_ADDR
// hc_name :=  ;
24544: LD_ADDR_OWVAR 26
24548: PUSH
24549: LD_STRING 
24551: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24552: CALL_OW 44
24556: PPUSH
24557: LD_INT 0
24559: PPUSH
24560: CALL_OW 51
// end ;
24564: GO 24486
24566: POP
24567: POP
// end ;
24568: PPOPN 1
24570: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24571: LD_EXP 52
24575: PUSH
24576: LD_EXP 72
24580: AND
24581: IFFALSE 24590
24583: GO 24585
24585: DISABLE
// StreamSibBomb ;
24586: CALL 24591 0 0
24590: END
// export function StreamSibBomb ; var i , x , y ; begin
24591: LD_INT 0
24593: PPUSH
24594: PPUSH
24595: PPUSH
24596: PPUSH
// result := false ;
24597: LD_ADDR_VAR 0 1
24601: PUSH
24602: LD_INT 0
24604: ST_TO_ADDR
// for i := 1 to 16 do
24605: LD_ADDR_VAR 0 2
24609: PUSH
24610: DOUBLE
24611: LD_INT 1
24613: DEC
24614: ST_TO_ADDR
24615: LD_INT 16
24617: PUSH
24618: FOR_TO
24619: IFFALSE 24818
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24621: LD_ADDR_VAR 0 3
24625: PUSH
24626: LD_INT 10
24628: PUSH
24629: LD_INT 20
24631: PUSH
24632: LD_INT 30
24634: PUSH
24635: LD_INT 40
24637: PUSH
24638: LD_INT 50
24640: PUSH
24641: LD_INT 60
24643: PUSH
24644: LD_INT 70
24646: PUSH
24647: LD_INT 80
24649: PUSH
24650: LD_INT 90
24652: PUSH
24653: LD_INT 100
24655: PUSH
24656: LD_INT 110
24658: PUSH
24659: LD_INT 120
24661: PUSH
24662: LD_INT 130
24664: PUSH
24665: LD_INT 140
24667: PUSH
24668: LD_INT 150
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 1
24690: PPUSH
24691: LD_INT 15
24693: PPUSH
24694: CALL_OW 12
24698: ARRAY
24699: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24700: LD_ADDR_VAR 0 4
24704: PUSH
24705: LD_INT 10
24707: PUSH
24708: LD_INT 20
24710: PUSH
24711: LD_INT 30
24713: PUSH
24714: LD_INT 40
24716: PUSH
24717: LD_INT 50
24719: PUSH
24720: LD_INT 60
24722: PUSH
24723: LD_INT 70
24725: PUSH
24726: LD_INT 80
24728: PUSH
24729: LD_INT 90
24731: PUSH
24732: LD_INT 100
24734: PUSH
24735: LD_INT 110
24737: PUSH
24738: LD_INT 120
24740: PUSH
24741: LD_INT 130
24743: PUSH
24744: LD_INT 140
24746: PUSH
24747: LD_INT 150
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 1
24769: PPUSH
24770: LD_INT 15
24772: PPUSH
24773: CALL_OW 12
24777: ARRAY
24778: ST_TO_ADDR
// if ValidHex ( x , y ) then
24779: LD_VAR 0 3
24783: PPUSH
24784: LD_VAR 0 4
24788: PPUSH
24789: CALL_OW 488
24793: IFFALSE 24816
// begin result := [ x , y ] ;
24795: LD_ADDR_VAR 0 1
24799: PUSH
24800: LD_VAR 0 3
24804: PUSH
24805: LD_VAR 0 4
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: ST_TO_ADDR
// break ;
24814: GO 24818
// end ; end ;
24816: GO 24618
24818: POP
24819: POP
// if result then
24820: LD_VAR 0 1
24824: IFFALSE 24884
// begin ToLua ( playSibBomb() ) ;
24826: LD_STRING playSibBomb()
24828: PPUSH
24829: CALL_OW 559
// wait ( 0 0$14 ) ;
24833: LD_INT 490
24835: PPUSH
24836: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
24840: LD_VAR 0 1
24844: PUSH
24845: LD_INT 1
24847: ARRAY
24848: PPUSH
24849: LD_VAR 0 1
24853: PUSH
24854: LD_INT 2
24856: ARRAY
24857: PPUSH
24858: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
24862: LD_VAR 0 1
24866: PUSH
24867: LD_INT 1
24869: ARRAY
24870: PPUSH
24871: LD_VAR 0 1
24875: PUSH
24876: LD_INT 2
24878: ARRAY
24879: PPUSH
24880: CALL_OW 429
// end ; end ;
24884: LD_VAR 0 1
24888: RET
// every 0 0$1 trigger StreamModeActive and sReset do
24889: LD_EXP 52
24893: PUSH
24894: LD_EXP 74
24898: AND
24899: IFFALSE 24911
24901: GO 24903
24903: DISABLE
// YouLost (  ) ;
24904: LD_STRING 
24906: PPUSH
24907: CALL_OW 104
24911: END
// every 0 0$1 trigger StreamModeActive and sFog do
24912: LD_EXP 52
24916: PUSH
24917: LD_EXP 73
24921: AND
24922: IFFALSE 24936
24924: GO 24926
24926: DISABLE
// FogOff ( your_side ) ;
24927: LD_OWVAR 2
24931: PPUSH
24932: CALL_OW 344
24936: END
// every 0 0$1 trigger StreamModeActive and sSun do
24937: LD_EXP 52
24941: PUSH
24942: LD_EXP 75
24946: AND
24947: IFFALSE 24975
24949: GO 24951
24951: DISABLE
// begin solar_recharge_percent := 0 ;
24952: LD_ADDR_OWVAR 79
24956: PUSH
24957: LD_INT 0
24959: ST_TO_ADDR
// wait ( 5 5$00 ) ;
24960: LD_INT 10500
24962: PPUSH
24963: CALL_OW 67
// solar_recharge_percent := 100 ;
24967: LD_ADDR_OWVAR 79
24971: PUSH
24972: LD_INT 100
24974: ST_TO_ADDR
// end ;
24975: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
24976: LD_EXP 52
24980: PUSH
24981: LD_EXP 76
24985: AND
24986: IFFALSE 25225
24988: GO 24990
24990: DISABLE
24991: LD_INT 0
24993: PPUSH
24994: PPUSH
24995: PPUSH
// begin tmp := [ ] ;
24996: LD_ADDR_VAR 0 3
25000: PUSH
25001: EMPTY
25002: ST_TO_ADDR
// for i := 1 to 6 do
25003: LD_ADDR_VAR 0 1
25007: PUSH
25008: DOUBLE
25009: LD_INT 1
25011: DEC
25012: ST_TO_ADDR
25013: LD_INT 6
25015: PUSH
25016: FOR_TO
25017: IFFALSE 25122
// begin uc_nation := nation_nature ;
25019: LD_ADDR_OWVAR 21
25023: PUSH
25024: LD_INT 0
25026: ST_TO_ADDR
// uc_side := 0 ;
25027: LD_ADDR_OWVAR 20
25031: PUSH
25032: LD_INT 0
25034: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25035: LD_ADDR_OWVAR 29
25039: PUSH
25040: LD_INT 12
25042: PUSH
25043: LD_INT 12
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: ST_TO_ADDR
// hc_agressivity := 20 ;
25050: LD_ADDR_OWVAR 35
25054: PUSH
25055: LD_INT 20
25057: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25058: LD_ADDR_OWVAR 28
25062: PUSH
25063: LD_INT 17
25065: ST_TO_ADDR
// hc_gallery :=  ;
25066: LD_ADDR_OWVAR 33
25070: PUSH
25071: LD_STRING 
25073: ST_TO_ADDR
// hc_name :=  ;
25074: LD_ADDR_OWVAR 26
25078: PUSH
25079: LD_STRING 
25081: ST_TO_ADDR
// un := CreateHuman ;
25082: LD_ADDR_VAR 0 2
25086: PUSH
25087: CALL_OW 44
25091: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25092: LD_VAR 0 2
25096: PPUSH
25097: LD_INT 1
25099: PPUSH
25100: CALL_OW 51
// tmp := tmp ^ un ;
25104: LD_ADDR_VAR 0 3
25108: PUSH
25109: LD_VAR 0 3
25113: PUSH
25114: LD_VAR 0 2
25118: ADD
25119: ST_TO_ADDR
// end ;
25120: GO 25016
25122: POP
25123: POP
// repeat wait ( 0 0$1 ) ;
25124: LD_INT 35
25126: PPUSH
25127: CALL_OW 67
// for un in tmp do
25131: LD_ADDR_VAR 0 2
25135: PUSH
25136: LD_VAR 0 3
25140: PUSH
25141: FOR_IN
25142: IFFALSE 25216
// begin if IsDead ( un ) then
25144: LD_VAR 0 2
25148: PPUSH
25149: CALL_OW 301
25153: IFFALSE 25173
// begin tmp := tmp diff un ;
25155: LD_ADDR_VAR 0 3
25159: PUSH
25160: LD_VAR 0 3
25164: PUSH
25165: LD_VAR 0 2
25169: DIFF
25170: ST_TO_ADDR
// continue ;
25171: GO 25141
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25173: LD_VAR 0 2
25177: PPUSH
25178: LD_INT 3
25180: PUSH
25181: LD_INT 22
25183: PUSH
25184: LD_INT 0
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: PPUSH
25195: CALL_OW 69
25199: PPUSH
25200: LD_VAR 0 2
25204: PPUSH
25205: CALL_OW 74
25209: PPUSH
25210: CALL_OW 115
// end ;
25214: GO 25141
25216: POP
25217: POP
// until not tmp ;
25218: LD_VAR 0 3
25222: NOT
25223: IFFALSE 25124
// end ;
25225: PPOPN 3
25227: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25228: LD_EXP 52
25232: PUSH
25233: LD_EXP 77
25237: AND
25238: IFFALSE 25292
25240: GO 25242
25242: DISABLE
// begin ToLua ( displayTroll(); ) ;
25243: LD_STRING displayTroll();
25245: PPUSH
25246: CALL_OW 559
// wait ( 3 3$00 ) ;
25250: LD_INT 6300
25252: PPUSH
25253: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25257: LD_STRING hideTroll();
25259: PPUSH
25260: CALL_OW 559
// wait ( 1 1$00 ) ;
25264: LD_INT 2100
25266: PPUSH
25267: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25271: LD_STRING displayTroll();
25273: PPUSH
25274: CALL_OW 559
// wait ( 1 1$00 ) ;
25278: LD_INT 2100
25280: PPUSH
25281: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25285: LD_STRING hideTroll();
25287: PPUSH
25288: CALL_OW 559
// end ;
25292: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25293: LD_EXP 52
25297: PUSH
25298: LD_EXP 78
25302: AND
25303: IFFALSE 25366
25305: GO 25307
25307: DISABLE
25308: LD_INT 0
25310: PPUSH
// begin p := 0 ;
25311: LD_ADDR_VAR 0 1
25315: PUSH
25316: LD_INT 0
25318: ST_TO_ADDR
// repeat game_speed := 1 ;
25319: LD_ADDR_OWVAR 65
25323: PUSH
25324: LD_INT 1
25326: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25327: LD_INT 35
25329: PPUSH
25330: CALL_OW 67
// p := p + 1 ;
25334: LD_ADDR_VAR 0 1
25338: PUSH
25339: LD_VAR 0 1
25343: PUSH
25344: LD_INT 1
25346: PLUS
25347: ST_TO_ADDR
// until p >= 60 ;
25348: LD_VAR 0 1
25352: PUSH
25353: LD_INT 60
25355: GREATEREQUAL
25356: IFFALSE 25319
// game_speed := 4 ;
25358: LD_ADDR_OWVAR 65
25362: PUSH
25363: LD_INT 4
25365: ST_TO_ADDR
// end ;
25366: PPOPN 1
25368: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25369: LD_EXP 52
25373: PUSH
25374: LD_EXP 79
25378: AND
25379: IFFALSE 25525
25381: GO 25383
25383: DISABLE
25384: LD_INT 0
25386: PPUSH
25387: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25388: LD_ADDR_VAR 0 1
25392: PUSH
25393: LD_INT 22
25395: PUSH
25396: LD_OWVAR 2
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 2
25407: PUSH
25408: LD_INT 30
25410: PUSH
25411: LD_INT 0
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: PUSH
25418: LD_INT 30
25420: PUSH
25421: LD_INT 1
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: LIST
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PPUSH
25437: CALL_OW 69
25441: ST_TO_ADDR
// if not depot then
25442: LD_VAR 0 1
25446: NOT
25447: IFFALSE 25451
// exit ;
25449: GO 25525
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25451: LD_ADDR_VAR 0 2
25455: PUSH
25456: LD_VAR 0 1
25460: PUSH
25461: LD_INT 1
25463: PPUSH
25464: LD_VAR 0 1
25468: PPUSH
25469: CALL_OW 12
25473: ARRAY
25474: PPUSH
25475: CALL_OW 274
25479: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25480: LD_VAR 0 2
25484: PPUSH
25485: LD_INT 1
25487: PPUSH
25488: LD_INT 0
25490: PPUSH
25491: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25495: LD_VAR 0 2
25499: PPUSH
25500: LD_INT 2
25502: PPUSH
25503: LD_INT 0
25505: PPUSH
25506: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25510: LD_VAR 0 2
25514: PPUSH
25515: LD_INT 3
25517: PPUSH
25518: LD_INT 0
25520: PPUSH
25521: CALL_OW 277
// end ;
25525: PPOPN 2
25527: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25528: LD_EXP 52
25532: PUSH
25533: LD_EXP 80
25537: AND
25538: IFFALSE 25635
25540: GO 25542
25542: DISABLE
25543: LD_INT 0
25545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25546: LD_ADDR_VAR 0 1
25550: PUSH
25551: LD_INT 22
25553: PUSH
25554: LD_OWVAR 2
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 21
25565: PUSH
25566: LD_INT 1
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 3
25575: PUSH
25576: LD_INT 23
25578: PUSH
25579: LD_INT 0
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: LIST
25594: PPUSH
25595: CALL_OW 69
25599: ST_TO_ADDR
// if not tmp then
25600: LD_VAR 0 1
25604: NOT
25605: IFFALSE 25609
// exit ;
25607: GO 25635
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25609: LD_VAR 0 1
25613: PUSH
25614: LD_INT 1
25616: PPUSH
25617: LD_VAR 0 1
25621: PPUSH
25622: CALL_OW 12
25626: ARRAY
25627: PPUSH
25628: LD_INT 200
25630: PPUSH
25631: CALL_OW 234
// end ;
25635: PPOPN 1
25637: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25638: LD_EXP 52
25642: PUSH
25643: LD_EXP 81
25647: AND
25648: IFFALSE 25727
25650: GO 25652
25652: DISABLE
25653: LD_INT 0
25655: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25656: LD_ADDR_VAR 0 1
25660: PUSH
25661: LD_INT 22
25663: PUSH
25664: LD_OWVAR 2
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 21
25675: PUSH
25676: LD_INT 2
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PPUSH
25687: CALL_OW 69
25691: ST_TO_ADDR
// if not tmp then
25692: LD_VAR 0 1
25696: NOT
25697: IFFALSE 25701
// exit ;
25699: GO 25727
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25701: LD_VAR 0 1
25705: PUSH
25706: LD_INT 1
25708: PPUSH
25709: LD_VAR 0 1
25713: PPUSH
25714: CALL_OW 12
25718: ARRAY
25719: PPUSH
25720: LD_INT 60
25722: PPUSH
25723: CALL_OW 234
// end ;
25727: PPOPN 1
25729: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25730: LD_EXP 52
25734: PUSH
25735: LD_EXP 82
25739: AND
25740: IFFALSE 25839
25742: GO 25744
25744: DISABLE
25745: LD_INT 0
25747: PPUSH
25748: PPUSH
// begin enable ;
25749: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25750: LD_ADDR_VAR 0 1
25754: PUSH
25755: LD_INT 22
25757: PUSH
25758: LD_OWVAR 2
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 61
25769: PUSH
25770: EMPTY
25771: LIST
25772: PUSH
25773: LD_INT 33
25775: PUSH
25776: LD_INT 2
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: LIST
25787: PPUSH
25788: CALL_OW 69
25792: ST_TO_ADDR
// if not tmp then
25793: LD_VAR 0 1
25797: NOT
25798: IFFALSE 25802
// exit ;
25800: GO 25839
// for i in tmp do
25802: LD_ADDR_VAR 0 2
25806: PUSH
25807: LD_VAR 0 1
25811: PUSH
25812: FOR_IN
25813: IFFALSE 25837
// if IsControledBy ( i ) then
25815: LD_VAR 0 2
25819: PPUSH
25820: CALL_OW 312
25824: IFFALSE 25835
// ComUnlink ( i ) ;
25826: LD_VAR 0 2
25830: PPUSH
25831: CALL_OW 136
25835: GO 25812
25837: POP
25838: POP
// end ;
25839: PPOPN 2
25841: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
25842: LD_EXP 52
25846: PUSH
25847: LD_EXP 83
25851: AND
25852: IFFALSE 25992
25854: GO 25856
25856: DISABLE
25857: LD_INT 0
25859: PPUSH
25860: PPUSH
// begin ToLua ( displayPowell(); ) ;
25861: LD_STRING displayPowell();
25863: PPUSH
25864: CALL_OW 559
// uc_side := 0 ;
25868: LD_ADDR_OWVAR 20
25872: PUSH
25873: LD_INT 0
25875: ST_TO_ADDR
// uc_nation := 2 ;
25876: LD_ADDR_OWVAR 21
25880: PUSH
25881: LD_INT 2
25883: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
25884: LD_ADDR_OWVAR 37
25888: PUSH
25889: LD_INT 14
25891: ST_TO_ADDR
// vc_engine := engine_siberite ;
25892: LD_ADDR_OWVAR 39
25896: PUSH
25897: LD_INT 3
25899: ST_TO_ADDR
// vc_control := control_apeman ;
25900: LD_ADDR_OWVAR 38
25904: PUSH
25905: LD_INT 5
25907: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25908: LD_ADDR_OWVAR 40
25912: PUSH
25913: LD_INT 29
25915: ST_TO_ADDR
// un := CreateVehicle ;
25916: LD_ADDR_VAR 0 2
25920: PUSH
25921: CALL_OW 45
25925: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25926: LD_VAR 0 2
25930: PPUSH
25931: LD_INT 1
25933: PPUSH
25934: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25938: LD_INT 35
25940: PPUSH
25941: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25945: LD_VAR 0 2
25949: PPUSH
25950: LD_INT 22
25952: PUSH
25953: LD_OWVAR 2
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PPUSH
25962: CALL_OW 69
25966: PPUSH
25967: LD_VAR 0 2
25971: PPUSH
25972: CALL_OW 74
25976: PPUSH
25977: CALL_OW 115
// until IsDead ( un ) ;
25981: LD_VAR 0 2
25985: PPUSH
25986: CALL_OW 301
25990: IFFALSE 25938
// end ;
25992: PPOPN 2
25994: END
// every 0 0$1 trigger StreamModeActive and sStu do
25995: LD_EXP 52
25999: PUSH
26000: LD_EXP 91
26004: AND
26005: IFFALSE 26021
26007: GO 26009
26009: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26010: LD_STRING displayStucuk();
26012: PPUSH
26013: CALL_OW 559
// ResetFog ;
26017: CALL_OW 335
// end ;
26021: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26022: LD_EXP 52
26026: PUSH
26027: LD_EXP 84
26031: AND
26032: IFFALSE 26173
26034: GO 26036
26036: DISABLE
26037: LD_INT 0
26039: PPUSH
26040: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26041: LD_ADDR_VAR 0 2
26045: PUSH
26046: LD_INT 22
26048: PUSH
26049: LD_OWVAR 2
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 21
26060: PUSH
26061: LD_INT 1
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PPUSH
26072: CALL_OW 69
26076: ST_TO_ADDR
// if not tmp then
26077: LD_VAR 0 2
26081: NOT
26082: IFFALSE 26086
// exit ;
26084: GO 26173
// un := tmp [ rand ( 1 , tmp ) ] ;
26086: LD_ADDR_VAR 0 1
26090: PUSH
26091: LD_VAR 0 2
26095: PUSH
26096: LD_INT 1
26098: PPUSH
26099: LD_VAR 0 2
26103: PPUSH
26104: CALL_OW 12
26108: ARRAY
26109: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26110: LD_VAR 0 1
26114: PPUSH
26115: LD_INT 0
26117: PPUSH
26118: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26122: LD_VAR 0 1
26126: PPUSH
26127: LD_OWVAR 3
26131: PUSH
26132: LD_VAR 0 1
26136: DIFF
26137: PPUSH
26138: LD_VAR 0 1
26142: PPUSH
26143: CALL_OW 74
26147: PPUSH
26148: CALL_OW 115
// wait ( 0 0$20 ) ;
26152: LD_INT 700
26154: PPUSH
26155: CALL_OW 67
// SetSide ( un , your_side ) ;
26159: LD_VAR 0 1
26163: PPUSH
26164: LD_OWVAR 2
26168: PPUSH
26169: CALL_OW 235
// end ;
26173: PPOPN 2
26175: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26176: LD_EXP 52
26180: PUSH
26181: LD_EXP 85
26185: AND
26186: IFFALSE 26292
26188: GO 26190
26190: DISABLE
26191: LD_INT 0
26193: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26194: LD_ADDR_VAR 0 1
26198: PUSH
26199: LD_INT 22
26201: PUSH
26202: LD_OWVAR 2
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 2
26213: PUSH
26214: LD_INT 30
26216: PUSH
26217: LD_INT 0
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 30
26226: PUSH
26227: LD_INT 1
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: LIST
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PPUSH
26243: CALL_OW 69
26247: ST_TO_ADDR
// if not depot then
26248: LD_VAR 0 1
26252: NOT
26253: IFFALSE 26257
// exit ;
26255: GO 26292
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26257: LD_VAR 0 1
26261: PUSH
26262: LD_INT 1
26264: ARRAY
26265: PPUSH
26266: CALL_OW 250
26270: PPUSH
26271: LD_VAR 0 1
26275: PUSH
26276: LD_INT 1
26278: ARRAY
26279: PPUSH
26280: CALL_OW 251
26284: PPUSH
26285: LD_INT 70
26287: PPUSH
26288: CALL_OW 495
// end ;
26292: PPOPN 1
26294: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26295: LD_EXP 52
26299: PUSH
26300: LD_EXP 86
26304: AND
26305: IFFALSE 26516
26307: GO 26309
26309: DISABLE
26310: LD_INT 0
26312: PPUSH
26313: PPUSH
26314: PPUSH
26315: PPUSH
26316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26317: LD_ADDR_VAR 0 5
26321: PUSH
26322: LD_INT 22
26324: PUSH
26325: LD_OWVAR 2
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 21
26336: PUSH
26337: LD_INT 1
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PPUSH
26348: CALL_OW 69
26352: ST_TO_ADDR
// if not tmp then
26353: LD_VAR 0 5
26357: NOT
26358: IFFALSE 26362
// exit ;
26360: GO 26516
// for i in tmp do
26362: LD_ADDR_VAR 0 1
26366: PUSH
26367: LD_VAR 0 5
26371: PUSH
26372: FOR_IN
26373: IFFALSE 26514
// begin d := rand ( 0 , 5 ) ;
26375: LD_ADDR_VAR 0 4
26379: PUSH
26380: LD_INT 0
26382: PPUSH
26383: LD_INT 5
26385: PPUSH
26386: CALL_OW 12
26390: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26391: LD_ADDR_VAR 0 2
26395: PUSH
26396: LD_VAR 0 1
26400: PPUSH
26401: CALL_OW 250
26405: PPUSH
26406: LD_VAR 0 4
26410: PPUSH
26411: LD_INT 3
26413: PPUSH
26414: LD_INT 12
26416: PPUSH
26417: CALL_OW 12
26421: PPUSH
26422: CALL_OW 272
26426: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26427: LD_ADDR_VAR 0 3
26431: PUSH
26432: LD_VAR 0 1
26436: PPUSH
26437: CALL_OW 251
26441: PPUSH
26442: LD_VAR 0 4
26446: PPUSH
26447: LD_INT 3
26449: PPUSH
26450: LD_INT 12
26452: PPUSH
26453: CALL_OW 12
26457: PPUSH
26458: CALL_OW 273
26462: ST_TO_ADDR
// if ValidHex ( x , y ) then
26463: LD_VAR 0 2
26467: PPUSH
26468: LD_VAR 0 3
26472: PPUSH
26473: CALL_OW 488
26477: IFFALSE 26512
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26479: LD_VAR 0 1
26483: PPUSH
26484: LD_VAR 0 2
26488: PPUSH
26489: LD_VAR 0 3
26493: PPUSH
26494: LD_INT 3
26496: PPUSH
26497: LD_INT 6
26499: PPUSH
26500: CALL_OW 12
26504: PPUSH
26505: LD_INT 1
26507: PPUSH
26508: CALL_OW 483
// end ;
26512: GO 26372
26514: POP
26515: POP
// end ;
26516: PPOPN 5
26518: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26519: LD_EXP 52
26523: PUSH
26524: LD_EXP 87
26528: AND
26529: IFFALSE 26623
26531: GO 26533
26533: DISABLE
26534: LD_INT 0
26536: PPUSH
26537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26538: LD_ADDR_VAR 0 2
26542: PUSH
26543: LD_INT 22
26545: PUSH
26546: LD_OWVAR 2
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 32
26557: PUSH
26558: LD_INT 1
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 21
26567: PUSH
26568: LD_INT 2
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: LIST
26579: PPUSH
26580: CALL_OW 69
26584: ST_TO_ADDR
// if not tmp then
26585: LD_VAR 0 2
26589: NOT
26590: IFFALSE 26594
// exit ;
26592: GO 26623
// for i in tmp do
26594: LD_ADDR_VAR 0 1
26598: PUSH
26599: LD_VAR 0 2
26603: PUSH
26604: FOR_IN
26605: IFFALSE 26621
// SetFuel ( i , 0 ) ;
26607: LD_VAR 0 1
26611: PPUSH
26612: LD_INT 0
26614: PPUSH
26615: CALL_OW 240
26619: GO 26604
26621: POP
26622: POP
// end ;
26623: PPOPN 2
26625: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26626: LD_EXP 52
26630: PUSH
26631: LD_EXP 88
26635: AND
26636: IFFALSE 26702
26638: GO 26640
26640: DISABLE
26641: LD_INT 0
26643: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26644: LD_ADDR_VAR 0 1
26648: PUSH
26649: LD_INT 22
26651: PUSH
26652: LD_OWVAR 2
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 30
26663: PUSH
26664: LD_INT 29
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PPUSH
26675: CALL_OW 69
26679: ST_TO_ADDR
// if not tmp then
26680: LD_VAR 0 1
26684: NOT
26685: IFFALSE 26689
// exit ;
26687: GO 26702
// DestroyUnit ( tmp [ 1 ] ) ;
26689: LD_VAR 0 1
26693: PUSH
26694: LD_INT 1
26696: ARRAY
26697: PPUSH
26698: CALL_OW 65
// end ;
26702: PPOPN 1
26704: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26705: LD_EXP 52
26709: PUSH
26710: LD_EXP 90
26714: AND
26715: IFFALSE 26844
26717: GO 26719
26719: DISABLE
26720: LD_INT 0
26722: PPUSH
// begin uc_side := 0 ;
26723: LD_ADDR_OWVAR 20
26727: PUSH
26728: LD_INT 0
26730: ST_TO_ADDR
// uc_nation := nation_arabian ;
26731: LD_ADDR_OWVAR 21
26735: PUSH
26736: LD_INT 2
26738: ST_TO_ADDR
// hc_gallery :=  ;
26739: LD_ADDR_OWVAR 33
26743: PUSH
26744: LD_STRING 
26746: ST_TO_ADDR
// hc_name :=  ;
26747: LD_ADDR_OWVAR 26
26751: PUSH
26752: LD_STRING 
26754: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26755: LD_INT 1
26757: PPUSH
26758: LD_INT 11
26760: PPUSH
26761: LD_INT 10
26763: PPUSH
26764: CALL_OW 380
// un := CreateHuman ;
26768: LD_ADDR_VAR 0 1
26772: PUSH
26773: CALL_OW 44
26777: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26778: LD_VAR 0 1
26782: PPUSH
26783: LD_INT 1
26785: PPUSH
26786: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26790: LD_INT 35
26792: PPUSH
26793: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26797: LD_VAR 0 1
26801: PPUSH
26802: LD_INT 22
26804: PUSH
26805: LD_OWVAR 2
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PPUSH
26814: CALL_OW 69
26818: PPUSH
26819: LD_VAR 0 1
26823: PPUSH
26824: CALL_OW 74
26828: PPUSH
26829: CALL_OW 115
// until IsDead ( un ) ;
26833: LD_VAR 0 1
26837: PPUSH
26838: CALL_OW 301
26842: IFFALSE 26790
// end ;
26844: PPOPN 1
26846: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26847: LD_EXP 52
26851: PUSH
26852: LD_EXP 92
26856: AND
26857: IFFALSE 26869
26859: GO 26861
26861: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
26862: LD_STRING earthquake(getX(game), 0, 32)
26864: PPUSH
26865: CALL_OW 559
26869: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
26870: LD_EXP 52
26874: PUSH
26875: LD_EXP 93
26879: AND
26880: IFFALSE 26971
26882: GO 26884
26884: DISABLE
26885: LD_INT 0
26887: PPUSH
// begin enable ;
26888: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26889: LD_ADDR_VAR 0 1
26893: PUSH
26894: LD_INT 22
26896: PUSH
26897: LD_OWVAR 2
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: LD_INT 21
26908: PUSH
26909: LD_INT 2
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 33
26918: PUSH
26919: LD_INT 3
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: LIST
26930: PPUSH
26931: CALL_OW 69
26935: ST_TO_ADDR
// if not tmp then
26936: LD_VAR 0 1
26940: NOT
26941: IFFALSE 26945
// exit ;
26943: GO 26971
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26945: LD_VAR 0 1
26949: PUSH
26950: LD_INT 1
26952: PPUSH
26953: LD_VAR 0 1
26957: PPUSH
26958: CALL_OW 12
26962: ARRAY
26963: PPUSH
26964: LD_INT 1
26966: PPUSH
26967: CALL_OW 234
// end ;
26971: PPOPN 1
26973: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
26974: LD_EXP 52
26978: PUSH
26979: LD_EXP 94
26983: AND
26984: IFFALSE 27125
26986: GO 26988
26988: DISABLE
26989: LD_INT 0
26991: PPUSH
26992: PPUSH
26993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26994: LD_ADDR_VAR 0 3
26998: PUSH
26999: LD_INT 22
27001: PUSH
27002: LD_OWVAR 2
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 25
27013: PUSH
27014: LD_INT 1
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PPUSH
27025: CALL_OW 69
27029: ST_TO_ADDR
// if not tmp then
27030: LD_VAR 0 3
27034: NOT
27035: IFFALSE 27039
// exit ;
27037: GO 27125
// un := tmp [ rand ( 1 , tmp ) ] ;
27039: LD_ADDR_VAR 0 2
27043: PUSH
27044: LD_VAR 0 3
27048: PUSH
27049: LD_INT 1
27051: PPUSH
27052: LD_VAR 0 3
27056: PPUSH
27057: CALL_OW 12
27061: ARRAY
27062: ST_TO_ADDR
// if Crawls ( un ) then
27063: LD_VAR 0 2
27067: PPUSH
27068: CALL_OW 318
27072: IFFALSE 27083
// ComWalk ( un ) ;
27074: LD_VAR 0 2
27078: PPUSH
27079: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27083: LD_VAR 0 2
27087: PPUSH
27088: LD_INT 9
27090: PPUSH
27091: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27095: LD_INT 28
27097: PPUSH
27098: LD_OWVAR 2
27102: PPUSH
27103: LD_INT 2
27105: PPUSH
27106: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27110: LD_INT 29
27112: PPUSH
27113: LD_OWVAR 2
27117: PPUSH
27118: LD_INT 2
27120: PPUSH
27121: CALL_OW 322
// end ;
27125: PPOPN 3
27127: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27128: LD_EXP 52
27132: PUSH
27133: LD_EXP 95
27137: AND
27138: IFFALSE 27249
27140: GO 27142
27142: DISABLE
27143: LD_INT 0
27145: PPUSH
27146: PPUSH
27147: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27148: LD_ADDR_VAR 0 3
27152: PUSH
27153: LD_INT 22
27155: PUSH
27156: LD_OWVAR 2
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 25
27167: PUSH
27168: LD_INT 1
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PPUSH
27179: CALL_OW 69
27183: ST_TO_ADDR
// if not tmp then
27184: LD_VAR 0 3
27188: NOT
27189: IFFALSE 27193
// exit ;
27191: GO 27249
// un := tmp [ rand ( 1 , tmp ) ] ;
27193: LD_ADDR_VAR 0 2
27197: PUSH
27198: LD_VAR 0 3
27202: PUSH
27203: LD_INT 1
27205: PPUSH
27206: LD_VAR 0 3
27210: PPUSH
27211: CALL_OW 12
27215: ARRAY
27216: ST_TO_ADDR
// if Crawls ( un ) then
27217: LD_VAR 0 2
27221: PPUSH
27222: CALL_OW 318
27226: IFFALSE 27237
// ComWalk ( un ) ;
27228: LD_VAR 0 2
27232: PPUSH
27233: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27237: LD_VAR 0 2
27241: PPUSH
27242: LD_INT 8
27244: PPUSH
27245: CALL_OW 336
// end ;
27249: PPOPN 3
27251: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27252: LD_EXP 52
27256: PUSH
27257: LD_EXP 96
27261: AND
27262: IFFALSE 27406
27264: GO 27266
27266: DISABLE
27267: LD_INT 0
27269: PPUSH
27270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27271: LD_ADDR_VAR 0 2
27275: PUSH
27276: LD_INT 22
27278: PUSH
27279: LD_OWVAR 2
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 21
27290: PUSH
27291: LD_INT 2
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 2
27300: PUSH
27301: LD_INT 34
27303: PUSH
27304: LD_INT 12
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 34
27313: PUSH
27314: LD_INT 51
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 34
27323: PUSH
27324: LD_INT 32
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: LIST
27341: PPUSH
27342: CALL_OW 69
27346: ST_TO_ADDR
// if not tmp then
27347: LD_VAR 0 2
27351: NOT
27352: IFFALSE 27356
// exit ;
27354: GO 27406
// for i in tmp do
27356: LD_ADDR_VAR 0 1
27360: PUSH
27361: LD_VAR 0 2
27365: PUSH
27366: FOR_IN
27367: IFFALSE 27404
// if GetCargo ( i , mat_artifact ) = 0 then
27369: LD_VAR 0 1
27373: PPUSH
27374: LD_INT 4
27376: PPUSH
27377: CALL_OW 289
27381: PUSH
27382: LD_INT 0
27384: EQUAL
27385: IFFALSE 27402
// SetCargo ( i , mat_siberit , 100 ) ;
27387: LD_VAR 0 1
27391: PPUSH
27392: LD_INT 3
27394: PPUSH
27395: LD_INT 100
27397: PPUSH
27398: CALL_OW 290
27402: GO 27366
27404: POP
27405: POP
// end ;
27406: PPOPN 2
27408: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27409: LD_EXP 52
27413: PUSH
27414: LD_EXP 97
27418: AND
27419: IFFALSE 27602
27421: GO 27423
27423: DISABLE
27424: LD_INT 0
27426: PPUSH
27427: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27428: LD_ADDR_VAR 0 2
27432: PUSH
27433: LD_INT 22
27435: PUSH
27436: LD_OWVAR 2
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PPUSH
27445: CALL_OW 69
27449: ST_TO_ADDR
// if not tmp then
27450: LD_VAR 0 2
27454: NOT
27455: IFFALSE 27459
// exit ;
27457: GO 27602
// for i := 1 to 2 do
27459: LD_ADDR_VAR 0 1
27463: PUSH
27464: DOUBLE
27465: LD_INT 1
27467: DEC
27468: ST_TO_ADDR
27469: LD_INT 2
27471: PUSH
27472: FOR_TO
27473: IFFALSE 27600
// begin uc_side := your_side ;
27475: LD_ADDR_OWVAR 20
27479: PUSH
27480: LD_OWVAR 2
27484: ST_TO_ADDR
// uc_nation := nation_american ;
27485: LD_ADDR_OWVAR 21
27489: PUSH
27490: LD_INT 1
27492: ST_TO_ADDR
// vc_chassis := us_morphling ;
27493: LD_ADDR_OWVAR 37
27497: PUSH
27498: LD_INT 5
27500: ST_TO_ADDR
// vc_engine := engine_siberite ;
27501: LD_ADDR_OWVAR 39
27505: PUSH
27506: LD_INT 3
27508: ST_TO_ADDR
// vc_control := control_computer ;
27509: LD_ADDR_OWVAR 38
27513: PUSH
27514: LD_INT 3
27516: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27517: LD_ADDR_OWVAR 40
27521: PUSH
27522: LD_INT 10
27524: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27525: LD_VAR 0 2
27529: PUSH
27530: LD_INT 1
27532: ARRAY
27533: PPUSH
27534: CALL_OW 310
27538: NOT
27539: IFFALSE 27586
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27541: CALL_OW 45
27545: PPUSH
27546: LD_VAR 0 2
27550: PUSH
27551: LD_INT 1
27553: ARRAY
27554: PPUSH
27555: CALL_OW 250
27559: PPUSH
27560: LD_VAR 0 2
27564: PUSH
27565: LD_INT 1
27567: ARRAY
27568: PPUSH
27569: CALL_OW 251
27573: PPUSH
27574: LD_INT 12
27576: PPUSH
27577: LD_INT 1
27579: PPUSH
27580: CALL_OW 50
27584: GO 27598
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27586: CALL_OW 45
27590: PPUSH
27591: LD_INT 1
27593: PPUSH
27594: CALL_OW 51
// end ;
27598: GO 27472
27600: POP
27601: POP
// end ;
27602: PPOPN 2
27604: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27605: LD_EXP 52
27609: PUSH
27610: LD_EXP 98
27614: AND
27615: IFFALSE 27837
27617: GO 27619
27619: DISABLE
27620: LD_INT 0
27622: PPUSH
27623: PPUSH
27624: PPUSH
27625: PPUSH
27626: PPUSH
27627: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27628: LD_ADDR_VAR 0 6
27632: PUSH
27633: LD_INT 22
27635: PUSH
27636: LD_OWVAR 2
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 21
27647: PUSH
27648: LD_INT 1
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 3
27657: PUSH
27658: LD_INT 23
27660: PUSH
27661: LD_INT 0
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: LIST
27676: PPUSH
27677: CALL_OW 69
27681: ST_TO_ADDR
// if not tmp then
27682: LD_VAR 0 6
27686: NOT
27687: IFFALSE 27691
// exit ;
27689: GO 27837
// s1 := rand ( 1 , 4 ) ;
27691: LD_ADDR_VAR 0 2
27695: PUSH
27696: LD_INT 1
27698: PPUSH
27699: LD_INT 4
27701: PPUSH
27702: CALL_OW 12
27706: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27707: LD_ADDR_VAR 0 4
27711: PUSH
27712: LD_VAR 0 6
27716: PUSH
27717: LD_INT 1
27719: ARRAY
27720: PPUSH
27721: LD_VAR 0 2
27725: PPUSH
27726: CALL_OW 259
27730: ST_TO_ADDR
// if s1 = 1 then
27731: LD_VAR 0 2
27735: PUSH
27736: LD_INT 1
27738: EQUAL
27739: IFFALSE 27759
// s2 := rand ( 2 , 4 ) else
27741: LD_ADDR_VAR 0 3
27745: PUSH
27746: LD_INT 2
27748: PPUSH
27749: LD_INT 4
27751: PPUSH
27752: CALL_OW 12
27756: ST_TO_ADDR
27757: GO 27767
// s2 := 1 ;
27759: LD_ADDR_VAR 0 3
27763: PUSH
27764: LD_INT 1
27766: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27767: LD_ADDR_VAR 0 5
27771: PUSH
27772: LD_VAR 0 6
27776: PUSH
27777: LD_INT 1
27779: ARRAY
27780: PPUSH
27781: LD_VAR 0 3
27785: PPUSH
27786: CALL_OW 259
27790: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27791: LD_VAR 0 6
27795: PUSH
27796: LD_INT 1
27798: ARRAY
27799: PPUSH
27800: LD_VAR 0 2
27804: PPUSH
27805: LD_VAR 0 5
27809: PPUSH
27810: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27814: LD_VAR 0 6
27818: PUSH
27819: LD_INT 1
27821: ARRAY
27822: PPUSH
27823: LD_VAR 0 3
27827: PPUSH
27828: LD_VAR 0 4
27832: PPUSH
27833: CALL_OW 237
// end ;
27837: PPOPN 6
27839: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27840: LD_EXP 52
27844: PUSH
27845: LD_EXP 99
27849: AND
27850: IFFALSE 27929
27852: GO 27854
27854: DISABLE
27855: LD_INT 0
27857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
27858: LD_ADDR_VAR 0 1
27862: PUSH
27863: LD_INT 22
27865: PUSH
27866: LD_OWVAR 2
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 30
27877: PUSH
27878: LD_INT 3
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PPUSH
27889: CALL_OW 69
27893: ST_TO_ADDR
// if not tmp then
27894: LD_VAR 0 1
27898: NOT
27899: IFFALSE 27903
// exit ;
27901: GO 27929
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27903: LD_VAR 0 1
27907: PUSH
27908: LD_INT 1
27910: PPUSH
27911: LD_VAR 0 1
27915: PPUSH
27916: CALL_OW 12
27920: ARRAY
27921: PPUSH
27922: LD_INT 1
27924: PPUSH
27925: CALL_OW 234
// end ;
27929: PPOPN 1
27931: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27932: LD_EXP 52
27936: PUSH
27937: LD_EXP 100
27941: AND
27942: IFFALSE 28054
27944: GO 27946
27946: DISABLE
27947: LD_INT 0
27949: PPUSH
27950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27951: LD_ADDR_VAR 0 2
27955: PUSH
27956: LD_INT 22
27958: PUSH
27959: LD_OWVAR 2
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 2
27970: PUSH
27971: LD_INT 30
27973: PUSH
27974: LD_INT 27
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 30
27983: PUSH
27984: LD_INT 26
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 30
27993: PUSH
27994: LD_INT 28
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PPUSH
28011: CALL_OW 69
28015: ST_TO_ADDR
// if not tmp then
28016: LD_VAR 0 2
28020: NOT
28021: IFFALSE 28025
// exit ;
28023: GO 28054
// for i in tmp do
28025: LD_ADDR_VAR 0 1
28029: PUSH
28030: LD_VAR 0 2
28034: PUSH
28035: FOR_IN
28036: IFFALSE 28052
// SetLives ( i , 1 ) ;
28038: LD_VAR 0 1
28042: PPUSH
28043: LD_INT 1
28045: PPUSH
28046: CALL_OW 234
28050: GO 28035
28052: POP
28053: POP
// end ;
28054: PPOPN 2
28056: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28057: LD_EXP 52
28061: PUSH
28062: LD_EXP 101
28066: AND
28067: IFFALSE 28341
28069: GO 28071
28071: DISABLE
28072: LD_INT 0
28074: PPUSH
28075: PPUSH
28076: PPUSH
// begin i := rand ( 1 , 7 ) ;
28077: LD_ADDR_VAR 0 1
28081: PUSH
28082: LD_INT 1
28084: PPUSH
28085: LD_INT 7
28087: PPUSH
28088: CALL_OW 12
28092: ST_TO_ADDR
// case i of 1 :
28093: LD_VAR 0 1
28097: PUSH
28098: LD_INT 1
28100: DOUBLE
28101: EQUAL
28102: IFTRUE 28106
28104: GO 28116
28106: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28107: LD_STRING earthquake(getX(game), 0, 32)
28109: PPUSH
28110: CALL_OW 559
28114: GO 28341
28116: LD_INT 2
28118: DOUBLE
28119: EQUAL
28120: IFTRUE 28124
28122: GO 28138
28124: POP
// begin ToLua ( displayStucuk(); ) ;
28125: LD_STRING displayStucuk();
28127: PPUSH
28128: CALL_OW 559
// ResetFog ;
28132: CALL_OW 335
// end ; 3 :
28136: GO 28341
28138: LD_INT 3
28140: DOUBLE
28141: EQUAL
28142: IFTRUE 28146
28144: GO 28250
28146: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28147: LD_ADDR_VAR 0 2
28151: PUSH
28152: LD_INT 22
28154: PUSH
28155: LD_OWVAR 2
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: LD_INT 25
28166: PUSH
28167: LD_INT 1
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PPUSH
28178: CALL_OW 69
28182: ST_TO_ADDR
// if not tmp then
28183: LD_VAR 0 2
28187: NOT
28188: IFFALSE 28192
// exit ;
28190: GO 28341
// un := tmp [ rand ( 1 , tmp ) ] ;
28192: LD_ADDR_VAR 0 3
28196: PUSH
28197: LD_VAR 0 2
28201: PUSH
28202: LD_INT 1
28204: PPUSH
28205: LD_VAR 0 2
28209: PPUSH
28210: CALL_OW 12
28214: ARRAY
28215: ST_TO_ADDR
// if Crawls ( un ) then
28216: LD_VAR 0 3
28220: PPUSH
28221: CALL_OW 318
28225: IFFALSE 28236
// ComWalk ( un ) ;
28227: LD_VAR 0 3
28231: PPUSH
28232: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28236: LD_VAR 0 3
28240: PPUSH
28241: LD_INT 8
28243: PPUSH
28244: CALL_OW 336
// end ; 4 :
28248: GO 28341
28250: LD_INT 4
28252: DOUBLE
28253: EQUAL
28254: IFTRUE 28258
28256: GO 28319
28258: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28259: LD_ADDR_VAR 0 2
28263: PUSH
28264: LD_INT 22
28266: PUSH
28267: LD_OWVAR 2
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 30
28278: PUSH
28279: LD_INT 29
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PPUSH
28290: CALL_OW 69
28294: ST_TO_ADDR
// if not tmp then
28295: LD_VAR 0 2
28299: NOT
28300: IFFALSE 28304
// exit ;
28302: GO 28341
// DestroyUnit ( tmp [ 1 ] ) ;
28304: LD_VAR 0 2
28308: PUSH
28309: LD_INT 1
28311: ARRAY
28312: PPUSH
28313: CALL_OW 65
// end ; 5 .. 7 :
28317: GO 28341
28319: LD_INT 5
28321: DOUBLE
28322: GREATEREQUAL
28323: IFFALSE 28331
28325: LD_INT 7
28327: DOUBLE
28328: LESSEQUAL
28329: IFTRUE 28333
28331: GO 28340
28333: POP
// StreamSibBomb ; end ;
28334: CALL 24591 0 0
28338: GO 28341
28340: POP
// end ;
28341: PPOPN 3
28343: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28344: LD_EXP 52
28348: PUSH
28349: LD_EXP 102
28353: AND
28354: IFFALSE 28510
28356: GO 28358
28358: DISABLE
28359: LD_INT 0
28361: PPUSH
28362: PPUSH
28363: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28364: LD_ADDR_VAR 0 2
28368: PUSH
28369: LD_INT 81
28371: PUSH
28372: LD_OWVAR 2
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: LD_INT 2
28383: PUSH
28384: LD_INT 21
28386: PUSH
28387: LD_INT 1
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 21
28396: PUSH
28397: LD_INT 2
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: LIST
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PPUSH
28413: CALL_OW 69
28417: ST_TO_ADDR
// if not tmp then
28418: LD_VAR 0 2
28422: NOT
28423: IFFALSE 28427
// exit ;
28425: GO 28510
// p := 0 ;
28427: LD_ADDR_VAR 0 3
28431: PUSH
28432: LD_INT 0
28434: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28435: LD_INT 35
28437: PPUSH
28438: CALL_OW 67
// p := p + 1 ;
28442: LD_ADDR_VAR 0 3
28446: PUSH
28447: LD_VAR 0 3
28451: PUSH
28452: LD_INT 1
28454: PLUS
28455: ST_TO_ADDR
// for i in tmp do
28456: LD_ADDR_VAR 0 1
28460: PUSH
28461: LD_VAR 0 2
28465: PUSH
28466: FOR_IN
28467: IFFALSE 28498
// if GetLives ( i ) < 1000 then
28469: LD_VAR 0 1
28473: PPUSH
28474: CALL_OW 256
28478: PUSH
28479: LD_INT 1000
28481: LESS
28482: IFFALSE 28496
// SetLives ( i , 1000 ) ;
28484: LD_VAR 0 1
28488: PPUSH
28489: LD_INT 1000
28491: PPUSH
28492: CALL_OW 234
28496: GO 28466
28498: POP
28499: POP
// until p > 20 ;
28500: LD_VAR 0 3
28504: PUSH
28505: LD_INT 20
28507: GREATER
28508: IFFALSE 28435
// end ;
28510: PPOPN 3
28512: END
// every 0 0$1 trigger StreamModeActive and sTime do
28513: LD_EXP 52
28517: PUSH
28518: LD_EXP 103
28522: AND
28523: IFFALSE 28558
28525: GO 28527
28527: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28528: LD_INT 28
28530: PPUSH
28531: LD_OWVAR 2
28535: PPUSH
28536: LD_INT 2
28538: PPUSH
28539: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28543: LD_INT 30
28545: PPUSH
28546: LD_OWVAR 2
28550: PPUSH
28551: LD_INT 2
28553: PPUSH
28554: CALL_OW 322
// end ;
28558: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28559: LD_EXP 52
28563: PUSH
28564: LD_EXP 104
28568: AND
28569: IFFALSE 28690
28571: GO 28573
28573: DISABLE
28574: LD_INT 0
28576: PPUSH
28577: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28578: LD_ADDR_VAR 0 2
28582: PUSH
28583: LD_INT 22
28585: PUSH
28586: LD_OWVAR 2
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 21
28597: PUSH
28598: LD_INT 1
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 3
28607: PUSH
28608: LD_INT 23
28610: PUSH
28611: LD_INT 0
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: LIST
28626: PPUSH
28627: CALL_OW 69
28631: ST_TO_ADDR
// if not tmp then
28632: LD_VAR 0 2
28636: NOT
28637: IFFALSE 28641
// exit ;
28639: GO 28690
// for i in tmp do
28641: LD_ADDR_VAR 0 1
28645: PUSH
28646: LD_VAR 0 2
28650: PUSH
28651: FOR_IN
28652: IFFALSE 28688
// begin if Crawls ( i ) then
28654: LD_VAR 0 1
28658: PPUSH
28659: CALL_OW 318
28663: IFFALSE 28674
// ComWalk ( i ) ;
28665: LD_VAR 0 1
28669: PPUSH
28670: CALL_OW 138
// SetClass ( i , 2 ) ;
28674: LD_VAR 0 1
28678: PPUSH
28679: LD_INT 2
28681: PPUSH
28682: CALL_OW 336
// end ;
28686: GO 28651
28688: POP
28689: POP
// end ;
28690: PPOPN 2
28692: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28693: LD_EXP 52
28697: PUSH
28698: LD_EXP 105
28702: AND
28703: IFFALSE 28984
28705: GO 28707
28707: DISABLE
28708: LD_INT 0
28710: PPUSH
28711: PPUSH
28712: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28713: LD_OWVAR 2
28717: PPUSH
28718: LD_INT 9
28720: PPUSH
28721: LD_INT 1
28723: PPUSH
28724: LD_INT 1
28726: PPUSH
28727: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28731: LD_INT 9
28733: PPUSH
28734: LD_OWVAR 2
28738: PPUSH
28739: CALL_OW 343
// uc_side := 9 ;
28743: LD_ADDR_OWVAR 20
28747: PUSH
28748: LD_INT 9
28750: ST_TO_ADDR
// uc_nation := 2 ;
28751: LD_ADDR_OWVAR 21
28755: PUSH
28756: LD_INT 2
28758: ST_TO_ADDR
// hc_name := Dark Warrior ;
28759: LD_ADDR_OWVAR 26
28763: PUSH
28764: LD_STRING Dark Warrior
28766: ST_TO_ADDR
// hc_gallery :=  ;
28767: LD_ADDR_OWVAR 33
28771: PUSH
28772: LD_STRING 
28774: ST_TO_ADDR
// hc_noskilllimit := true ;
28775: LD_ADDR_OWVAR 76
28779: PUSH
28780: LD_INT 1
28782: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28783: LD_ADDR_OWVAR 31
28787: PUSH
28788: LD_INT 30
28790: PUSH
28791: LD_INT 30
28793: PUSH
28794: LD_INT 30
28796: PUSH
28797: LD_INT 30
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: ST_TO_ADDR
// un := CreateHuman ;
28806: LD_ADDR_VAR 0 3
28810: PUSH
28811: CALL_OW 44
28815: ST_TO_ADDR
// hc_noskilllimit := false ;
28816: LD_ADDR_OWVAR 76
28820: PUSH
28821: LD_INT 0
28823: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28824: LD_VAR 0 3
28828: PPUSH
28829: LD_INT 1
28831: PPUSH
28832: CALL_OW 51
// p := 0 ;
28836: LD_ADDR_VAR 0 2
28840: PUSH
28841: LD_INT 0
28843: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28844: LD_INT 35
28846: PPUSH
28847: CALL_OW 67
// p := p + 1 ;
28851: LD_ADDR_VAR 0 2
28855: PUSH
28856: LD_VAR 0 2
28860: PUSH
28861: LD_INT 1
28863: PLUS
28864: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28865: LD_VAR 0 3
28869: PPUSH
28870: CALL_OW 256
28874: PUSH
28875: LD_INT 1000
28877: LESS
28878: IFFALSE 28892
// SetLives ( un , 1000 ) ;
28880: LD_VAR 0 3
28884: PPUSH
28885: LD_INT 1000
28887: PPUSH
28888: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
28892: LD_VAR 0 3
28896: PPUSH
28897: LD_INT 81
28899: PUSH
28900: LD_OWVAR 2
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 91
28911: PUSH
28912: LD_VAR 0 3
28916: PUSH
28917: LD_INT 30
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: LIST
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PPUSH
28929: CALL_OW 69
28933: PPUSH
28934: LD_VAR 0 3
28938: PPUSH
28939: CALL_OW 74
28943: PPUSH
28944: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
28948: LD_VAR 0 2
28952: PUSH
28953: LD_INT 60
28955: GREATER
28956: PUSH
28957: LD_VAR 0 3
28961: PPUSH
28962: CALL_OW 301
28966: OR
28967: IFFALSE 28844
// if un then
28969: LD_VAR 0 3
28973: IFFALSE 28984
// RemoveUnit ( un ) ;
28975: LD_VAR 0 3
28979: PPUSH
28980: CALL_OW 64
// end ;
28984: PPOPN 3
28986: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28987: LD_INT 0
28989: PPUSH
28990: PPUSH
28991: PPUSH
28992: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28993: LD_ADDR_VAR 0 4
28997: PUSH
28998: LD_INT 22
29000: PUSH
29001: LD_OWVAR 2
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 2
29012: PUSH
29013: LD_INT 30
29015: PUSH
29016: LD_INT 0
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 30
29025: PUSH
29026: LD_INT 1
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: LIST
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PPUSH
29042: CALL_OW 69
29046: ST_TO_ADDR
// if not tmp then
29047: LD_VAR 0 4
29051: NOT
29052: IFFALSE 29056
// exit ;
29054: GO 29115
// for i in tmp do
29056: LD_ADDR_VAR 0 2
29060: PUSH
29061: LD_VAR 0 4
29065: PUSH
29066: FOR_IN
29067: IFFALSE 29113
// for j = 1 to 3 do
29069: LD_ADDR_VAR 0 3
29073: PUSH
29074: DOUBLE
29075: LD_INT 1
29077: DEC
29078: ST_TO_ADDR
29079: LD_INT 3
29081: PUSH
29082: FOR_TO
29083: IFFALSE 29109
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29085: LD_VAR 0 2
29089: PPUSH
29090: CALL_OW 274
29094: PPUSH
29095: LD_VAR 0 3
29099: PPUSH
29100: LD_INT 99999
29102: PPUSH
29103: CALL_OW 277
29107: GO 29082
29109: POP
29110: POP
29111: GO 29066
29113: POP
29114: POP
// end ;
29115: LD_VAR 0 1
29119: RET
// export function hHackSetLevel10 ; var i , j ; begin
29120: LD_INT 0
29122: PPUSH
29123: PPUSH
29124: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29125: LD_ADDR_VAR 0 2
29129: PUSH
29130: LD_INT 21
29132: PUSH
29133: LD_INT 1
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PPUSH
29140: CALL_OW 69
29144: PUSH
29145: FOR_IN
29146: IFFALSE 29198
// if IsSelected ( i ) then
29148: LD_VAR 0 2
29152: PPUSH
29153: CALL_OW 306
29157: IFFALSE 29196
// begin for j := 1 to 4 do
29159: LD_ADDR_VAR 0 3
29163: PUSH
29164: DOUBLE
29165: LD_INT 1
29167: DEC
29168: ST_TO_ADDR
29169: LD_INT 4
29171: PUSH
29172: FOR_TO
29173: IFFALSE 29194
// SetSkill ( i , j , 10 ) ;
29175: LD_VAR 0 2
29179: PPUSH
29180: LD_VAR 0 3
29184: PPUSH
29185: LD_INT 10
29187: PPUSH
29188: CALL_OW 237
29192: GO 29172
29194: POP
29195: POP
// end ;
29196: GO 29145
29198: POP
29199: POP
// end ;
29200: LD_VAR 0 1
29204: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29205: LD_INT 0
29207: PPUSH
29208: PPUSH
29209: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29210: LD_ADDR_VAR 0 2
29214: PUSH
29215: LD_INT 22
29217: PUSH
29218: LD_OWVAR 2
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 21
29229: PUSH
29230: LD_INT 1
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: PPUSH
29241: CALL_OW 69
29245: PUSH
29246: FOR_IN
29247: IFFALSE 29288
// begin for j := 1 to 4 do
29249: LD_ADDR_VAR 0 3
29253: PUSH
29254: DOUBLE
29255: LD_INT 1
29257: DEC
29258: ST_TO_ADDR
29259: LD_INT 4
29261: PUSH
29262: FOR_TO
29263: IFFALSE 29284
// SetSkill ( i , j , 10 ) ;
29265: LD_VAR 0 2
29269: PPUSH
29270: LD_VAR 0 3
29274: PPUSH
29275: LD_INT 10
29277: PPUSH
29278: CALL_OW 237
29282: GO 29262
29284: POP
29285: POP
// end ;
29286: GO 29246
29288: POP
29289: POP
// end ;
29290: LD_VAR 0 1
29294: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
29295: LD_INT 0
29297: PPUSH
// uc_side := your_side ;
29298: LD_ADDR_OWVAR 20
29302: PUSH
29303: LD_OWVAR 2
29307: ST_TO_ADDR
// uc_nation := nation ;
29308: LD_ADDR_OWVAR 21
29312: PUSH
29313: LD_VAR 0 1
29317: ST_TO_ADDR
// InitHc ;
29318: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29322: LD_INT 0
29324: PPUSH
29325: LD_VAR 0 2
29329: PPUSH
29330: LD_VAR 0 3
29334: PPUSH
29335: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
29339: CALL_OW 44
29343: PPUSH
29344: LD_INT 1
29346: PPUSH
29347: CALL_OW 51
// end ;
29351: LD_VAR 0 4
29355: RET
// export function hHackSpawnVehicle ; begin
29356: LD_INT 0
29358: PPUSH
// uc_side := your_side ;
29359: LD_ADDR_OWVAR 20
29363: PUSH
29364: LD_OWVAR 2
29368: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
29369: LD_ADDR_OWVAR 21
29373: PUSH
29374: LD_INT 1
29376: PPUSH
29377: LD_INT 3
29379: PPUSH
29380: CALL_OW 12
29384: ST_TO_ADDR
// InitVc ;
29385: CALL_OW 20
// case uc_nation of 1 :
29389: LD_OWVAR 21
29393: PUSH
29394: LD_INT 1
29396: DOUBLE
29397: EQUAL
29398: IFTRUE 29402
29400: GO 29546
29402: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
29403: LD_ADDR_OWVAR 37
29407: PUSH
29408: LD_INT 1
29410: PUSH
29411: LD_INT 2
29413: PUSH
29414: LD_INT 3
29416: PUSH
29417: LD_INT 4
29419: PUSH
29420: LD_INT 5
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 1
29432: PPUSH
29433: LD_INT 5
29435: PPUSH
29436: CALL_OW 12
29440: ARRAY
29441: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
29442: LD_ADDR_OWVAR 39
29446: PUSH
29447: LD_INT 1
29449: PPUSH
29450: LD_INT 3
29452: PPUSH
29453: CALL_OW 12
29457: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
29458: LD_ADDR_OWVAR 38
29462: PUSH
29463: LD_INT 1
29465: PUSH
29466: LD_INT 2
29468: PUSH
29469: LD_INT 3
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 1
29479: PPUSH
29480: LD_INT 3
29482: PPUSH
29483: CALL_OW 12
29487: ARRAY
29488: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
29489: LD_ADDR_OWVAR 40
29493: PUSH
29494: LD_INT 2
29496: PUSH
29497: LD_INT 4
29499: PUSH
29500: LD_INT 5
29502: PUSH
29503: LD_INT 3
29505: PUSH
29506: LD_INT 7
29508: PUSH
29509: LD_INT 8
29511: PUSH
29512: LD_INT 9
29514: PUSH
29515: LD_INT 10
29517: PUSH
29518: LD_INT 6
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 1
29534: PPUSH
29535: LD_INT 9
29537: PPUSH
29538: CALL_OW 12
29542: ARRAY
29543: ST_TO_ADDR
// end ; 2 :
29544: GO 29811
29546: LD_INT 2
29548: DOUBLE
29549: EQUAL
29550: IFTRUE 29554
29552: GO 29678
29554: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
29555: LD_ADDR_OWVAR 37
29559: PUSH
29560: LD_INT 11
29562: PUSH
29563: LD_INT 12
29565: PUSH
29566: LD_INT 13
29568: PUSH
29569: LD_INT 14
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: PUSH
29578: LD_INT 1
29580: PPUSH
29581: LD_INT 4
29583: PPUSH
29584: CALL_OW 12
29588: ARRAY
29589: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
29590: LD_ADDR_OWVAR 39
29594: PUSH
29595: LD_INT 1
29597: PPUSH
29598: LD_INT 3
29600: PPUSH
29601: CALL_OW 12
29605: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
29606: LD_ADDR_OWVAR 38
29610: PUSH
29611: LD_INT 1
29613: PUSH
29614: LD_INT 2
29616: PUSH
29617: LD_INT 5
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: LIST
29624: PUSH
29625: LD_INT 1
29627: PPUSH
29628: LD_INT 3
29630: PPUSH
29631: CALL_OW 12
29635: ARRAY
29636: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
29637: LD_ADDR_OWVAR 40
29641: PUSH
29642: LD_INT 24
29644: PUSH
29645: LD_INT 26
29647: PUSH
29648: LD_INT 27
29650: PUSH
29651: LD_INT 28
29653: PUSH
29654: LD_INT 29
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 1
29666: PPUSH
29667: LD_INT 5
29669: PPUSH
29670: CALL_OW 12
29674: ARRAY
29675: ST_TO_ADDR
// end ; 3 :
29676: GO 29811
29678: LD_INT 3
29680: DOUBLE
29681: EQUAL
29682: IFTRUE 29686
29684: GO 29810
29686: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
29687: LD_ADDR_OWVAR 37
29691: PUSH
29692: LD_INT 21
29694: PUSH
29695: LD_INT 23
29697: PUSH
29698: LD_INT 22
29700: PUSH
29701: LD_INT 24
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: PUSH
29710: LD_INT 1
29712: PPUSH
29713: LD_INT 4
29715: PPUSH
29716: CALL_OW 12
29720: ARRAY
29721: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
29722: LD_ADDR_OWVAR 39
29726: PUSH
29727: LD_INT 1
29729: PPUSH
29730: LD_INT 3
29732: PPUSH
29733: CALL_OW 12
29737: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
29738: LD_ADDR_OWVAR 38
29742: PUSH
29743: LD_INT 1
29745: PUSH
29746: LD_INT 3
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: LD_INT 1
29755: PPUSH
29756: LD_INT 2
29758: PPUSH
29759: CALL_OW 12
29763: ARRAY
29764: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
29765: LD_ADDR_OWVAR 40
29769: PUSH
29770: LD_INT 42
29772: PUSH
29773: LD_INT 43
29775: PUSH
29776: LD_INT 44
29778: PUSH
29779: LD_INT 46
29781: PUSH
29782: LD_INT 48
29784: PUSH
29785: LD_INT 47
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 1
29798: PPUSH
29799: LD_INT 6
29801: PPUSH
29802: CALL_OW 12
29806: ARRAY
29807: ST_TO_ADDR
// end ; end ;
29808: GO 29811
29810: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29811: CALL_OW 45
29815: PPUSH
29816: LD_INT 1
29818: PPUSH
29819: CALL_OW 51
// end ;
29823: LD_VAR 0 1
29827: RET
// export hInvincible ; every 1 do
29828: GO 29830
29830: DISABLE
// hInvincible := [ ] ;
29831: LD_ADDR_EXP 106
29835: PUSH
29836: EMPTY
29837: ST_TO_ADDR
29838: END
// every 10 do var i ;
29839: GO 29841
29841: DISABLE
29842: LD_INT 0
29844: PPUSH
// begin enable ;
29845: ENABLE
// if not hInvincible then
29846: LD_EXP 106
29850: NOT
29851: IFFALSE 29855
// exit ;
29853: GO 29899
// for i in hInvincible do
29855: LD_ADDR_VAR 0 1
29859: PUSH
29860: LD_EXP 106
29864: PUSH
29865: FOR_IN
29866: IFFALSE 29897
// if GetLives ( i ) < 1000 then
29868: LD_VAR 0 1
29872: PPUSH
29873: CALL_OW 256
29877: PUSH
29878: LD_INT 1000
29880: LESS
29881: IFFALSE 29895
// SetLives ( i , 1000 ) ;
29883: LD_VAR 0 1
29887: PPUSH
29888: LD_INT 1000
29890: PPUSH
29891: CALL_OW 234
29895: GO 29865
29897: POP
29898: POP
// end ;
29899: PPOPN 1
29901: END
// export function hHackInvincible ; var i ; begin
29902: LD_INT 0
29904: PPUSH
29905: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29906: LD_ADDR_VAR 0 2
29910: PUSH
29911: LD_INT 2
29913: PUSH
29914: LD_INT 21
29916: PUSH
29917: LD_INT 1
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 21
29926: PUSH
29927: LD_INT 2
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: LIST
29938: PPUSH
29939: CALL_OW 69
29943: PUSH
29944: FOR_IN
29945: IFFALSE 30006
// if IsSelected ( i ) then
29947: LD_VAR 0 2
29951: PPUSH
29952: CALL_OW 306
29956: IFFALSE 30004
// begin if i in hInvincible then
29958: LD_VAR 0 2
29962: PUSH
29963: LD_EXP 106
29967: IN
29968: IFFALSE 29988
// hInvincible := hInvincible diff i else
29970: LD_ADDR_EXP 106
29974: PUSH
29975: LD_EXP 106
29979: PUSH
29980: LD_VAR 0 2
29984: DIFF
29985: ST_TO_ADDR
29986: GO 30004
// hInvincible := hInvincible union i ;
29988: LD_ADDR_EXP 106
29992: PUSH
29993: LD_EXP 106
29997: PUSH
29998: LD_VAR 0 2
30002: UNION
30003: ST_TO_ADDR
// end ;
30004: GO 29944
30006: POP
30007: POP
// end ;
30008: LD_VAR 0 1
30012: RET
// export function hHackInvisible ; var i , j ; begin
30013: LD_INT 0
30015: PPUSH
30016: PPUSH
30017: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30018: LD_ADDR_VAR 0 2
30022: PUSH
30023: LD_INT 21
30025: PUSH
30026: LD_INT 1
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PPUSH
30033: CALL_OW 69
30037: PUSH
30038: FOR_IN
30039: IFFALSE 30063
// if IsSelected ( i ) then
30041: LD_VAR 0 2
30045: PPUSH
30046: CALL_OW 306
30050: IFFALSE 30061
// ComForceInvisible ( i ) ;
30052: LD_VAR 0 2
30056: PPUSH
30057: CALL_OW 496
30061: GO 30038
30063: POP
30064: POP
// end ;
30065: LD_VAR 0 1
30069: RET
// export function hHackChangeYourSide ; begin
30070: LD_INT 0
30072: PPUSH
// if your_side = 8 then
30073: LD_OWVAR 2
30077: PUSH
30078: LD_INT 8
30080: EQUAL
30081: IFFALSE 30093
// your_side := 0 else
30083: LD_ADDR_OWVAR 2
30087: PUSH
30088: LD_INT 0
30090: ST_TO_ADDR
30091: GO 30107
// your_side := your_side + 1 ;
30093: LD_ADDR_OWVAR 2
30097: PUSH
30098: LD_OWVAR 2
30102: PUSH
30103: LD_INT 1
30105: PLUS
30106: ST_TO_ADDR
// end ;
30107: LD_VAR 0 1
30111: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30112: LD_INT 0
30114: PPUSH
30115: PPUSH
30116: PPUSH
// for i in all_units do
30117: LD_ADDR_VAR 0 2
30121: PUSH
30122: LD_OWVAR 3
30126: PUSH
30127: FOR_IN
30128: IFFALSE 30206
// if IsSelected ( i ) then
30130: LD_VAR 0 2
30134: PPUSH
30135: CALL_OW 306
30139: IFFALSE 30204
// begin j := GetSide ( i ) ;
30141: LD_ADDR_VAR 0 3
30145: PUSH
30146: LD_VAR 0 2
30150: PPUSH
30151: CALL_OW 255
30155: ST_TO_ADDR
// if j = 8 then
30156: LD_VAR 0 3
30160: PUSH
30161: LD_INT 8
30163: EQUAL
30164: IFFALSE 30176
// j := 0 else
30166: LD_ADDR_VAR 0 3
30170: PUSH
30171: LD_INT 0
30173: ST_TO_ADDR
30174: GO 30190
// j := j + 1 ;
30176: LD_ADDR_VAR 0 3
30180: PUSH
30181: LD_VAR 0 3
30185: PUSH
30186: LD_INT 1
30188: PLUS
30189: ST_TO_ADDR
// SetSide ( i , j ) ;
30190: LD_VAR 0 2
30194: PPUSH
30195: LD_VAR 0 3
30199: PPUSH
30200: CALL_OW 235
// end ;
30204: GO 30127
30206: POP
30207: POP
// end ;
30208: LD_VAR 0 1
30212: RET
// export function hHackFog ; begin
30213: LD_INT 0
30215: PPUSH
// FogOff ( true ) ;
30216: LD_INT 1
30218: PPUSH
30219: CALL_OW 344
// end ;
30223: LD_VAR 0 1
30227: RET
// export function hHackApeman ; begin
30228: LD_INT 0
30230: PPUSH
// uc_side := your_side ;
30231: LD_ADDR_OWVAR 20
30235: PUSH
30236: LD_OWVAR 2
30240: ST_TO_ADDR
// uc_nation := 0 ;
30241: LD_ADDR_OWVAR 21
30245: PUSH
30246: LD_INT 0
30248: ST_TO_ADDR
// hc_name :=  ;
30249: LD_ADDR_OWVAR 26
30253: PUSH
30254: LD_STRING 
30256: ST_TO_ADDR
// hc_gallery :=  ;
30257: LD_ADDR_OWVAR 33
30261: PUSH
30262: LD_STRING 
30264: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
30265: LD_ADDR_OWVAR 31
30269: PUSH
30270: LD_INT 0
30272: PUSH
30273: LD_INT 0
30275: PUSH
30276: LD_INT 0
30278: PUSH
30279: LD_INT 0
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: ST_TO_ADDR
// hc_class := class_apeman ;
30288: LD_ADDR_OWVAR 28
30292: PUSH
30293: LD_INT 12
30295: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
30296: CALL_OW 44
30300: PPUSH
30301: LD_INT 1
30303: PPUSH
30304: CALL_OW 51
// end ;
30308: LD_VAR 0 1
30312: RET
// export function hHackBoom ; begin
30313: LD_INT 0
30315: PPUSH
// uc_side := your_side ;
30316: LD_ADDR_OWVAR 20
30320: PUSH
30321: LD_OWVAR 2
30325: ST_TO_ADDR
// uc_nation := 1 ;
30326: LD_ADDR_OWVAR 21
30330: PUSH
30331: LD_INT 1
30333: ST_TO_ADDR
// vc_chassis := us_morphling ;
30334: LD_ADDR_OWVAR 37
30338: PUSH
30339: LD_INT 5
30341: ST_TO_ADDR
// vc_engine := engine_siberite ;
30342: LD_ADDR_OWVAR 39
30346: PUSH
30347: LD_INT 3
30349: ST_TO_ADDR
// vc_control := control_computer ;
30350: LD_ADDR_OWVAR 38
30354: PUSH
30355: LD_INT 3
30357: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
30358: LD_ADDR_OWVAR 40
30362: PUSH
30363: LD_INT 8
30365: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30366: CALL_OW 45
30370: PPUSH
30371: LD_INT 1
30373: PPUSH
30374: CALL_OW 51
// end ;
30378: LD_VAR 0 1
30382: RET
