// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// CreateNature ;
   8: CALL 837 0 0
// PrepareArabian ;
  12: CALL 1207 0 0
// PrepareAmerican ;
  16: CALL 6202 0 0
// PrepareRussian ;
  20: CALL 2163 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 7762 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 25 25$00 , 24 24$00 , 23 23$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 52500
 188: PUSH
 189: LD_INT 50400
 191: PUSH
 192: LD_INT 48300
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: PUSH
 200: LD_OWVAR 67
 204: ARRAY
 205: ST_TO_ADDR
// escapeCounter := 0 ;
 206: LD_ADDR_EXP 19
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// loseCounter := 0 ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// labCaptured := false ;
 222: LD_ADDR_EXP 21
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// hillBase := false ;
 230: LD_ADDR_EXP 15
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 238: LD_ADDR_EXP 8
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: LD_INT 4
 248: PUSH
 249: LD_INT 5
 251: PUSH
 252: LD_INT 6
 254: PUSH
 255: LD_INT 7
 257: PUSH
 258: LD_INT 8
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: LIST
 268: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 269: LD_ADDR_EXP 23
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// kaganCaptured := false ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// end ;
 285: LD_VAR 0 1
 289: RET
// every 0 0$1 trigger debug do var i ;
 290: LD_EXP 1
 294: IFFALSE 363
 296: GO 298
 298: DISABLE
 299: LD_INT 0
 301: PPUSH
// begin enable ;
 302: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 303: LD_ADDR_VAR 0 1
 307: PUSH
 308: LD_INT 22
 310: PUSH
 311: LD_INT 2
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: PUSH
 318: LD_INT 3
 320: PUSH
 321: LD_INT 21
 323: PUSH
 324: LD_INT 3
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: FOR_IN
 345: IFFALSE 361
// SetLives ( i , 1000 ) ;
 347: LD_VAR 0 1
 351: PPUSH
 352: LD_INT 1000
 354: PPUSH
 355: CALL_OW 234
 359: GO 344
 361: POP
 362: POP
// end ; end_of_file
 363: PPOPN 1
 365: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 366: LD_INT 0
 368: PPUSH
// uc_side := side ;
 369: LD_ADDR_OWVAR 20
 373: PUSH
 374: LD_VAR 0 1
 378: ST_TO_ADDR
// uc_nation := nation ;
 379: LD_ADDR_OWVAR 21
 383: PUSH
 384: LD_VAR 0 2
 388: ST_TO_ADDR
// vc_chassis := chassis ;
 389: LD_ADDR_OWVAR 37
 393: PUSH
 394: LD_VAR 0 3
 398: ST_TO_ADDR
// vc_engine := engine ;
 399: LD_ADDR_OWVAR 39
 403: PUSH
 404: LD_VAR 0 4
 408: ST_TO_ADDR
// vc_control := control ;
 409: LD_ADDR_OWVAR 38
 413: PUSH
 414: LD_VAR 0 5
 418: ST_TO_ADDR
// vc_weapon := weapon ;
 419: LD_ADDR_OWVAR 40
 423: PUSH
 424: LD_VAR 0 6
 428: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 429: LD_ADDR_OWVAR 41
 433: PUSH
 434: LD_VAR 0 7
 438: ST_TO_ADDR
// result := CreateVehicle ;
 439: LD_ADDR_VAR 0 8
 443: PUSH
 444: CALL_OW 45
 448: ST_TO_ADDR
// end ;
 449: LD_VAR 0 8
 453: RET
// export function SayX ( units , ident ) ; var i ; begin
 454: LD_INT 0
 456: PPUSH
 457: PPUSH
// result := false ;
 458: LD_ADDR_VAR 0 3
 462: PUSH
 463: LD_INT 0
 465: ST_TO_ADDR
// if not units then
 466: LD_VAR 0 1
 470: NOT
 471: IFFALSE 475
// exit ;
 473: GO 529
// for i in units do
 475: LD_ADDR_VAR 0 4
 479: PUSH
 480: LD_VAR 0 1
 484: PUSH
 485: FOR_IN
 486: IFFALSE 527
// if IsOk ( i ) then
 488: LD_VAR 0 4
 492: PPUSH
 493: CALL_OW 302
 497: IFFALSE 525
// begin Say ( i , ident ) ;
 499: LD_VAR 0 4
 503: PPUSH
 504: LD_VAR 0 2
 508: PPUSH
 509: CALL_OW 88
// result := i ;
 513: LD_ADDR_VAR 0 3
 517: PUSH
 518: LD_VAR 0 4
 522: ST_TO_ADDR
// break ;
 523: GO 527
// end ;
 525: GO 485
 527: POP
 528: POP
// end ;
 529: LD_VAR 0 3
 533: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 534: LD_INT 0
 536: PPUSH
 537: PPUSH
 538: PPUSH
// if not observer or not unit then
 539: LD_VAR 0 1
 543: NOT
 544: PUSH
 545: LD_VAR 0 2
 549: NOT
 550: OR
 551: IFFALSE 555
// exit ;
 553: GO 603
// if not See ( GetSide ( observer ) , unit ) then
 555: LD_VAR 0 1
 559: PPUSH
 560: CALL_OW 255
 564: PPUSH
 565: LD_VAR 0 2
 569: PPUSH
 570: CALL_OW 292
 574: NOT
 575: IFFALSE 579
// exit ;
 577: GO 603
// result := GetDistUnits ( observer , unit ) < 12 ;
 579: LD_ADDR_VAR 0 3
 583: PUSH
 584: LD_VAR 0 1
 588: PPUSH
 589: LD_VAR 0 2
 593: PPUSH
 594: CALL_OW 296
 598: PUSH
 599: LD_INT 12
 601: LESS
 602: ST_TO_ADDR
// end ;
 603: LD_VAR 0 3
 607: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 608: LD_INT 0
 610: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 611: LD_VAR 0 2
 615: PUSH
 616: LD_INT 1
 618: ARRAY
 619: PPUSH
 620: LD_VAR 0 2
 624: PUSH
 625: LD_INT 2
 627: ARRAY
 628: PPUSH
 629: CALL_OW 488
 633: PUSH
 634: LD_VAR 0 2
 638: PUSH
 639: LD_INT 1
 641: ARRAY
 642: PPUSH
 643: LD_VAR 0 2
 647: PUSH
 648: LD_INT 2
 650: ARRAY
 651: PPUSH
 652: CALL_OW 428
 656: PUSH
 657: LD_INT 0
 659: EQUAL
 660: AND
 661: IFFALSE 695
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 663: LD_VAR 0 1
 667: PPUSH
 668: LD_VAR 0 2
 672: PUSH
 673: LD_INT 1
 675: ARRAY
 676: PPUSH
 677: LD_VAR 0 2
 681: PUSH
 682: LD_INT 2
 684: ARRAY
 685: PPUSH
 686: LD_VAR 0 3
 690: PPUSH
 691: CALL_OW 48
// end ;
 695: LD_VAR 0 4
 699: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 700: LD_INT 0
 702: PPUSH
 703: PPUSH
// InitUc ;
 704: CALL_OW 18
// InitHc ;
 708: CALL_OW 19
// uc_side := 0 ;
 712: LD_ADDR_OWVAR 20
 716: PUSH
 717: LD_INT 0
 719: ST_TO_ADDR
// uc_nation := 0 ;
 720: LD_ADDR_OWVAR 21
 724: PUSH
 725: LD_INT 0
 727: ST_TO_ADDR
// for i = 1 to amount do
 728: LD_ADDR_VAR 0 4
 732: PUSH
 733: DOUBLE
 734: LD_INT 1
 736: DEC
 737: ST_TO_ADDR
 738: LD_VAR 0 2
 742: PUSH
 743: FOR_TO
 744: IFFALSE 826
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 746: LD_ADDR_OWVAR 29
 750: PUSH
 751: LD_INT 9
 753: PPUSH
 754: LD_INT 12
 756: PPUSH
 757: CALL_OW 12
 761: PUSH
 762: LD_INT 9
 764: PPUSH
 765: LD_INT 12
 767: PPUSH
 768: CALL_OW 12
 772: PUSH
 773: EMPTY
 774: LIST
 775: LIST
 776: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 777: LD_ADDR_OWVAR 35
 781: PUSH
 782: LD_INT 1
 784: NEG
 785: PPUSH
 786: LD_INT 1
 788: PPUSH
 789: CALL_OW 12
 793: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 794: LD_INT 0
 796: PPUSH
 797: LD_INT 12
 799: PPUSH
 800: LD_INT 1
 802: PPUSH
 803: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 807: CALL_OW 44
 811: PPUSH
 812: LD_VAR 0 1
 816: PPUSH
 817: LD_INT 0
 819: PPUSH
 820: CALL_OW 49
// end ;
 824: GO 743
 826: POP
 827: POP
// InitHc ;
 828: CALL_OW 19
// end ;
 832: LD_VAR 0 3
 836: RET
// export function CreateNature ; var i ; begin
 837: LD_INT 0
 839: PPUSH
 840: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
 841: LD_INT 18
 843: PPUSH
 844: LD_INT 5
 846: PUSH
 847: LD_INT 4
 849: PUSH
 850: LD_INT 3
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: LIST
 857: PUSH
 858: LD_OWVAR 67
 862: ARRAY
 863: PPUSH
 864: CALL 700 0 2
// for i := 1 to 3 do
 868: LD_ADDR_VAR 0 2
 872: PUSH
 873: DOUBLE
 874: LD_INT 1
 876: DEC
 877: ST_TO_ADDR
 878: LD_INT 3
 880: PUSH
 881: FOR_TO
 882: IFFALSE 917
// begin hc_class := 21 ;
 884: LD_ADDR_OWVAR 28
 888: PUSH
 889: LD_INT 21
 891: ST_TO_ADDR
// hc_gallery :=  ;
 892: LD_ADDR_OWVAR 33
 896: PUSH
 897: LD_STRING 
 899: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 900: CALL_OW 44
 904: PPUSH
 905: LD_INT 18
 907: PPUSH
 908: LD_INT 0
 910: PPUSH
 911: CALL_OW 49
// end ;
 915: GO 881
 917: POP
 918: POP
// for i := 1 to 2 do
 919: LD_ADDR_VAR 0 2
 923: PUSH
 924: DOUBLE
 925: LD_INT 1
 927: DEC
 928: ST_TO_ADDR
 929: LD_INT 2
 931: PUSH
 932: FOR_TO
 933: IFFALSE 968
// begin hc_class := 18 ;
 935: LD_ADDR_OWVAR 28
 939: PUSH
 940: LD_INT 18
 942: ST_TO_ADDR
// hc_gallery :=  ;
 943: LD_ADDR_OWVAR 33
 947: PUSH
 948: LD_STRING 
 950: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 951: CALL_OW 44
 955: PPUSH
 956: LD_INT 18
 958: PPUSH
 959: LD_INT 0
 961: PPUSH
 962: CALL_OW 49
// end ;
 966: GO 932
 968: POP
 969: POP
// for i := 1 to 2 do
 970: LD_ADDR_VAR 0 2
 974: PUSH
 975: DOUBLE
 976: LD_INT 1
 978: DEC
 979: ST_TO_ADDR
 980: LD_INT 2
 982: PUSH
 983: FOR_TO
 984: IFFALSE 1019
// begin hc_class := 13 ;
 986: LD_ADDR_OWVAR 28
 990: PUSH
 991: LD_INT 13
 993: ST_TO_ADDR
// hc_gallery :=  ;
 994: LD_ADDR_OWVAR 33
 998: PUSH
 999: LD_STRING 
1001: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1002: CALL_OW 44
1006: PPUSH
1007: LD_INT 18
1009: PPUSH
1010: LD_INT 0
1012: PPUSH
1013: CALL_OW 49
// end ;
1017: GO 983
1019: POP
1020: POP
// end ;
1021: LD_VAR 0 1
1025: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1026: LD_INT 0
1028: PPUSH
1029: PPUSH
1030: PPUSH
1031: PPUSH
1032: PPUSH
// result := false ;
1033: LD_ADDR_VAR 0 4
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// if not sideList or not enemySide then
1041: LD_VAR 0 1
1045: NOT
1046: PUSH
1047: LD_VAR 0 2
1051: NOT
1052: OR
1053: IFFALSE 1057
// exit ;
1055: GO 1202
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1057: LD_ADDR_VAR 0 7
1061: PUSH
1062: LD_INT 22
1064: PUSH
1065: LD_VAR 0 2
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: PPUSH
1074: CALL_OW 69
1078: ST_TO_ADDR
// if not tmp then
1079: LD_VAR 0 7
1083: NOT
1084: IFFALSE 1088
// exit ;
1086: GO 1202
// for s in sideList do
1088: LD_ADDR_VAR 0 6
1092: PUSH
1093: LD_VAR 0 1
1097: PUSH
1098: FOR_IN
1099: IFFALSE 1200
// for i in tmp do
1101: LD_ADDR_VAR 0 5
1105: PUSH
1106: LD_VAR 0 7
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1196
// if See ( s , i ) then
1114: LD_VAR 0 6
1118: PPUSH
1119: LD_VAR 0 5
1123: PPUSH
1124: CALL_OW 292
1128: IFFALSE 1194
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
1130: LD_ADDR_VAR 0 8
1134: PUSH
1135: LD_INT 22
1137: PUSH
1138: LD_VAR 0 6
1142: PUSH
1143: EMPTY
1144: LIST
1145: LIST
1146: PPUSH
1147: CALL_OW 69
1151: PPUSH
1152: LD_VAR 0 5
1156: PPUSH
1157: CALL_OW 74
1161: ST_TO_ADDR
// if tmp2 in exceptUnits then
1162: LD_VAR 0 8
1166: PUSH
1167: LD_VAR 0 3
1171: IN
1172: IFFALSE 1178
// continue else
1174: GO 1111
1176: GO 1194
// begin result := tmp2 ;
1178: LD_ADDR_VAR 0 4
1182: PUSH
1183: LD_VAR 0 8
1187: ST_TO_ADDR
// exit ;
1188: POP
1189: POP
1190: POP
1191: POP
1192: GO 1202
// end ; end ;
1194: GO 1111
1196: POP
1197: POP
1198: GO 1098
1200: POP
1201: POP
// end ; end_of_file
1202: LD_VAR 0 4
1206: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1207: LD_INT 0
1209: PPUSH
1210: PPUSH
// uc_side := 5 ;
1211: LD_ADDR_OWVAR 20
1215: PUSH
1216: LD_INT 5
1218: ST_TO_ADDR
// uc_nation := 2 ;
1219: LD_ADDR_OWVAR 21
1223: PUSH
1224: LD_INT 2
1226: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1227: LD_ADDR_EXP 36
1231: PUSH
1232: LD_STRING Abdul
1234: PPUSH
1235: LD_INT 0
1237: PPUSH
1238: LD_STRING 
1240: PPUSH
1241: CALL 34329 0 3
1245: ST_TO_ADDR
// uc_side := 2 ;
1246: LD_ADDR_OWVAR 20
1250: PUSH
1251: LD_INT 2
1253: ST_TO_ADDR
// uc_nation := 2 ;
1254: LD_ADDR_OWVAR 21
1258: PUSH
1259: LD_INT 2
1261: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1262: LD_ADDR_EXP 25
1266: PUSH
1267: LD_STRING Heike
1269: PPUSH
1270: LD_EXP 1
1274: NOT
1275: PPUSH
1276: LD_EXP 2
1280: PPUSH
1281: CALL 34329 0 3
1285: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1286: LD_ADDR_EXP 28
1290: PUSH
1291: LD_STRING Ibrahim
1293: PPUSH
1294: LD_EXP 1
1298: NOT
1299: PPUSH
1300: LD_EXP 2
1304: PPUSH
1305: CALL 34329 0 3
1309: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1310: LD_ADDR_EXP 26
1314: PUSH
1315: LD_STRING Givi
1317: PPUSH
1318: LD_EXP 1
1322: NOT
1323: PPUSH
1324: LD_EXP 2
1328: PPUSH
1329: CALL 34329 0 3
1333: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1334: LD_ADDR_EXP 29
1338: PUSH
1339: LD_STRING Kamil
1341: PPUSH
1342: LD_EXP 1
1346: NOT
1347: PPUSH
1348: LD_EXP 2
1352: PPUSH
1353: CALL 34329 0 3
1357: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1358: LD_ADDR_EXP 30
1362: PUSH
1363: LD_STRING Kaia
1365: PPUSH
1366: LD_EXP 1
1370: NOT
1371: PPUSH
1372: LD_EXP 2
1376: PPUSH
1377: CALL 34329 0 3
1381: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1382: LD_ADDR_EXP 31
1386: PUSH
1387: LD_STRING Sophia
1389: PPUSH
1390: LD_EXP 1
1394: NOT
1395: PPUSH
1396: LD_EXP 2
1400: PPUSH
1401: CALL 34329 0 3
1405: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1406: LD_ADDR_EXP 32
1410: PUSH
1411: LD_STRING Markov
1413: PPUSH
1414: LD_EXP 1
1418: NOT
1419: PPUSH
1420: LD_EXP 2
1424: PPUSH
1425: CALL 34329 0 3
1429: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1430: LD_ADDR_EXP 35
1434: PUSH
1435: LD_STRING Aviradze
1437: PPUSH
1438: LD_EXP 1
1442: NOT
1443: PPUSH
1444: LD_EXP 2
1448: PPUSH
1449: CALL 34329 0 3
1453: ST_TO_ADDR
// aviradzeSquad := [ ] ;
1454: LD_ADDR_EXP 39
1458: PUSH
1459: EMPTY
1460: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
1461: LD_ADDR_EXP 37
1465: PUSH
1466: LD_STRING 03_others
1468: PPUSH
1469: CALL_OW 31
1473: ST_TO_ADDR
// uc_side := 5 ;
1474: LD_ADDR_OWVAR 20
1478: PUSH
1479: LD_INT 5
1481: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
1482: LD_ADDR_EXP 34
1486: PUSH
1487: LD_STRING Kurt
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: LD_STRING 
1495: PPUSH
1496: CALL 34329 0 3
1500: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1501: LD_ADDR_EXP 27
1505: PUSH
1506: LD_STRING Mike
1508: PPUSH
1509: LD_EXP 1
1513: NOT
1514: PPUSH
1515: LD_EXP 2
1519: PPUSH
1520: CALL 34329 0 3
1524: ST_TO_ADDR
// if Mike then
1525: LD_EXP 27
1529: IFFALSE 1552
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
1531: LD_EXP 27
1535: PPUSH
1536: LD_INT 142
1538: PPUSH
1539: LD_INT 63
1541: PPUSH
1542: LD_INT 2
1544: PPUSH
1545: LD_INT 0
1547: PPUSH
1548: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
1552: LD_EXP 34
1556: PPUSH
1557: LD_INT 142
1559: PPUSH
1560: LD_INT 63
1562: PPUSH
1563: LD_INT 3
1565: PPUSH
1566: LD_INT 0
1568: PPUSH
1569: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
1573: LD_EXP 34
1577: PUSH
1578: LD_EXP 27
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: PPUSH
1587: CALL_OW 140
// end ;
1591: LD_VAR 0 1
1595: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
1596: LD_INT 0
1598: PPUSH
1599: PPUSH
1600: PPUSH
1601: PPUSH
// uc_side := 5 ;
1602: LD_ADDR_OWVAR 20
1606: PUSH
1607: LD_INT 5
1609: ST_TO_ADDR
// uc_nation := 2 ;
1610: LD_ADDR_OWVAR 21
1614: PUSH
1615: LD_INT 2
1617: ST_TO_ADDR
// InitHc ;
1618: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
1622: LD_ADDR_EXP 33
1626: PUSH
1627: LD_STRING Omar
1629: PPUSH
1630: LD_INT 0
1632: PPUSH
1633: LD_STRING 
1635: PPUSH
1636: CALL 34329 0 3
1640: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
1641: LD_EXP 33
1645: PPUSH
1646: LD_INT 284
1648: PPUSH
1649: LD_INT 163
1651: PPUSH
1652: LD_INT 0
1654: PPUSH
1655: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
1659: LD_EXP 33
1663: PPUSH
1664: LD_INT 256
1666: PPUSH
1667: LD_INT 129
1669: PPUSH
1670: CALL_OW 111
// wait ( 0 0$2 ) ;
1674: LD_INT 70
1676: PPUSH
1677: CALL_OW 67
// omarSquad := [ ] ;
1681: LD_ADDR_EXP 38
1685: PUSH
1686: EMPTY
1687: ST_TO_ADDR
// for i := 1 to 5 do
1688: LD_ADDR_VAR 0 2
1692: PUSH
1693: DOUBLE
1694: LD_INT 1
1696: DEC
1697: ST_TO_ADDR
1698: LD_INT 5
1700: PUSH
1701: FOR_TO
1702: IFFALSE 1908
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1704: LD_INT 5
1706: PPUSH
1707: LD_INT 2
1709: PPUSH
1710: LD_INT 13
1712: PUSH
1713: LD_INT 14
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: PUSH
1720: LD_VAR 0 2
1724: PUSH
1725: LD_INT 2
1727: MOD
1728: PUSH
1729: LD_INT 1
1731: PLUS
1732: ARRAY
1733: PPUSH
1734: LD_INT 1
1736: PPUSH
1737: LD_INT 1
1739: PPUSH
1740: LD_INT 25
1742: PUSH
1743: LD_INT 27
1745: PUSH
1746: LD_INT 26
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: LIST
1753: PUSH
1754: LD_VAR 0 2
1758: PUSH
1759: LD_INT 3
1761: MOD
1762: PUSH
1763: LD_INT 1
1765: PLUS
1766: ARRAY
1767: PPUSH
1768: LD_INT 100
1770: PPUSH
1771: CALL 366 0 7
// veh := CreateVehicle ;
1775: LD_ADDR_VAR 0 4
1779: PUSH
1780: CALL_OW 45
1784: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1785: LD_VAR 0 4
1789: PPUSH
1790: LD_INT 5
1792: PPUSH
1793: CALL_OW 233
// omarSquad := omarSquad union veh ;
1797: LD_ADDR_EXP 38
1801: PUSH
1802: LD_EXP 38
1806: PUSH
1807: LD_VAR 0 4
1811: UNION
1812: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
1813: LD_VAR 0 4
1817: PPUSH
1818: LD_INT 284
1820: PPUSH
1821: LD_INT 163
1823: PPUSH
1824: LD_INT 0
1826: PPUSH
1827: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
1831: LD_INT 0
1833: PPUSH
1834: LD_INT 3
1836: PPUSH
1837: LD_INT 2
1839: PPUSH
1840: CALL_OW 380
// un := CreateHuman ;
1844: LD_ADDR_VAR 0 3
1848: PUSH
1849: CALL_OW 44
1853: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1854: LD_ADDR_EXP 38
1858: PUSH
1859: LD_EXP 38
1863: PUSH
1864: LD_VAR 0 3
1868: UNION
1869: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1870: LD_VAR 0 3
1874: PPUSH
1875: LD_VAR 0 4
1879: PPUSH
1880: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
1884: LD_VAR 0 3
1888: PPUSH
1889: LD_INT 271
1891: PPUSH
1892: LD_INT 144
1894: PPUSH
1895: CALL_OW 111
// wait ( 0 0$2 ) ;
1899: LD_INT 70
1901: PPUSH
1902: CALL_OW 67
// end ;
1906: GO 1701
1908: POP
1909: POP
// for i := 1 to 3 do
1910: LD_ADDR_VAR 0 2
1914: PUSH
1915: DOUBLE
1916: LD_INT 1
1918: DEC
1919: ST_TO_ADDR
1920: LD_INT 3
1922: PUSH
1923: FOR_TO
1924: IFFALSE 2007
// begin PrepareHuman ( false , 1 , 2 ) ;
1926: LD_INT 0
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: LD_INT 2
1934: PPUSH
1935: CALL_OW 380
// un := CreateHuman ;
1939: LD_ADDR_VAR 0 3
1943: PUSH
1944: CALL_OW 44
1948: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1949: LD_ADDR_EXP 38
1953: PUSH
1954: LD_EXP 38
1958: PUSH
1959: LD_VAR 0 3
1963: UNION
1964: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
1965: LD_VAR 0 3
1969: PPUSH
1970: LD_INT 284
1972: PPUSH
1973: LD_INT 163
1975: PPUSH
1976: LD_INT 0
1978: PPUSH
1979: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
1983: LD_VAR 0 3
1987: PPUSH
1988: LD_INT 257
1990: PPUSH
1991: LD_INT 138
1993: PPUSH
1994: CALL_OW 111
// wait ( 0 0$1 ) ;
1998: LD_INT 35
2000: PPUSH
2001: CALL_OW 67
// end ;
2005: GO 1923
2007: POP
2008: POP
// for i := 1 to 6 do
2009: LD_ADDR_VAR 0 2
2013: PUSH
2014: DOUBLE
2015: LD_INT 1
2017: DEC
2018: ST_TO_ADDR
2019: LD_INT 6
2021: PUSH
2022: FOR_TO
2023: IFFALSE 2156
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 1
2030: PUSH
2031: LD_INT 1
2033: PUSH
2034: LD_INT 4
2036: PUSH
2037: EMPTY
2038: LIST
2039: LIST
2040: LIST
2041: PUSH
2042: LD_VAR 0 2
2046: PUSH
2047: LD_INT 3
2049: MOD
2050: PUSH
2051: LD_INT 1
2053: PLUS
2054: ARRAY
2055: PPUSH
2056: LD_INT 3
2058: PPUSH
2059: CALL_OW 380
// un := CreateHuman ;
2063: LD_ADDR_VAR 0 3
2067: PUSH
2068: CALL_OW 44
2072: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2073: LD_ADDR_EXP 38
2077: PUSH
2078: LD_EXP 38
2082: PUSH
2083: LD_VAR 0 3
2087: UNION
2088: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2089: LD_VAR 0 3
2093: PPUSH
2094: LD_INT 225
2096: PPUSH
2097: LD_INT 163
2099: PPUSH
2100: LD_INT 0
2102: PPUSH
2103: CALL_OW 48
// if i = 1 then
2107: LD_VAR 0 2
2111: PUSH
2112: LD_INT 1
2114: EQUAL
2115: IFFALSE 2132
// SetAttr ( un , attr_speed , 12 ) ;
2117: LD_VAR 0 3
2121: PPUSH
2122: LD_INT 2
2124: PPUSH
2125: LD_INT 12
2127: PPUSH
2128: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2132: LD_VAR 0 3
2136: PPUSH
2137: LD_INT 222
2139: PPUSH
2140: LD_INT 157
2142: PPUSH
2143: CALL_OW 111
// wait ( 0 0$1 ) ;
2147: LD_INT 35
2149: PPUSH
2150: CALL_OW 67
// end ;
2154: GO 2022
2156: POP
2157: POP
// end ; end_of_file
2158: LD_VAR 0 1
2162: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2163: LD_INT 0
2165: PPUSH
2166: PPUSH
2167: PPUSH
2168: PPUSH
2169: PPUSH
2170: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
2171: LD_INT 3
2173: PPUSH
2174: LD_INT 149
2176: PPUSH
2177: LD_INT 67
2179: PPUSH
2180: CALL_OW 428
2184: PPUSH
2185: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
2189: LD_ADDR_EXP 50
2193: PUSH
2194: LD_INT 111
2196: PPUSH
2197: LD_INT 89
2199: PPUSH
2200: CALL_OW 428
2204: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2205: LD_ADDR_VAR 0 2
2209: PUSH
2210: LD_INT 21
2212: PUSH
2213: LD_INT 3
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PUSH
2220: LD_INT 23
2222: PUSH
2223: LD_INT 3
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: PUSH
2230: EMPTY
2231: LIST
2232: LIST
2233: PPUSH
2234: CALL_OW 69
2238: PUSH
2239: FOR_IN
2240: IFFALSE 2256
// SetBLevel ( i , 5 ) ;
2242: LD_VAR 0 2
2246: PPUSH
2247: LD_INT 5
2249: PPUSH
2250: CALL_OW 241
2254: GO 2239
2256: POP
2257: POP
// SetBName ( kirov , kirov ) ;
2258: LD_INT 71
2260: PPUSH
2261: LD_STRING kirov
2263: PPUSH
2264: CALL_OW 500
// SetBName ( beria , beria ) ;
2268: LD_INT 106
2270: PPUSH
2271: LD_STRING beria
2273: PPUSH
2274: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2278: LD_INT 112
2280: PPUSH
2281: LD_STRING kagan
2283: PPUSH
2284: CALL_OW 500
// uc_side := 6 ;
2288: LD_ADDR_OWVAR 20
2292: PUSH
2293: LD_INT 6
2295: ST_TO_ADDR
// uc_nation := 3 ;
2296: LD_ADDR_OWVAR 21
2300: PUSH
2301: LD_INT 3
2303: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2304: LD_ADDR_VAR 0 5
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 6
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 30
2321: PUSH
2322: LD_INT 5
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PPUSH
2333: CALL_OW 69
2337: PUSH
2338: LD_INT 1
2340: ARRAY
2341: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
2342: LD_ADDR_VAR 0 4
2346: PUSH
2347: LD_INT 22
2349: PUSH
2350: LD_INT 6
2352: PUSH
2353: EMPTY
2354: LIST
2355: LIST
2356: PUSH
2357: LD_INT 30
2359: PUSH
2360: LD_INT 4
2362: PUSH
2363: EMPTY
2364: LIST
2365: LIST
2366: PUSH
2367: EMPTY
2368: LIST
2369: LIST
2370: PPUSH
2371: CALL_OW 69
2375: PUSH
2376: LD_INT 1
2378: ARRAY
2379: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
2380: LD_ADDR_EXP 44
2384: PUSH
2385: EMPTY
2386: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
2387: LD_ADDR_EXP 45
2391: PUSH
2392: EMPTY
2393: ST_TO_ADDR
// russianPatrol := [ ] ;
2394: LD_ADDR_EXP 47
2398: PUSH
2399: EMPTY
2400: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
2401: LD_ADDR_EXP 40
2405: PUSH
2406: LD_STRING Kurin
2408: PPUSH
2409: LD_INT 0
2411: PPUSH
2412: LD_STRING 
2414: PPUSH
2415: CALL 34329 0 3
2419: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
2420: LD_EXP 40
2424: PPUSH
2425: LD_INT 71
2427: PPUSH
2428: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
2432: LD_ADDR_EXP 42
2436: PUSH
2437: LD_STRING Popov
2439: PPUSH
2440: LD_INT 0
2442: PPUSH
2443: LD_STRING 
2445: PPUSH
2446: CALL 34329 0 3
2450: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
2451: LD_EXP 42
2455: PPUSH
2456: LD_INT 71
2458: PPUSH
2459: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
2463: LD_ADDR_EXP 41
2467: PUSH
2468: LD_STRING Grishko
2470: PPUSH
2471: LD_INT 0
2473: PPUSH
2474: LD_STRING 
2476: PPUSH
2477: CALL 34329 0 3
2481: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
2482: LD_EXP 41
2486: PPUSH
2487: LD_INT 207
2489: PPUSH
2490: LD_INT 106
2492: PPUSH
2493: LD_INT 0
2495: PPUSH
2496: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
2500: LD_EXP 41
2504: PPUSH
2505: LD_INT 209
2507: PPUSH
2508: LD_INT 106
2510: PPUSH
2511: CALL_OW 118
// for i := 1 to 2 do
2515: LD_ADDR_VAR 0 2
2519: PUSH
2520: DOUBLE
2521: LD_INT 1
2523: DEC
2524: ST_TO_ADDR
2525: LD_INT 2
2527: PUSH
2528: FOR_TO
2529: IFFALSE 2584
// begin PrepareHuman ( false , 2 , 2 ) ;
2531: LD_INT 0
2533: PPUSH
2534: LD_INT 2
2536: PPUSH
2537: LD_INT 2
2539: PPUSH
2540: CALL_OW 380
// un := CreateHuman ;
2544: LD_ADDR_VAR 0 3
2548: PUSH
2549: CALL_OW 44
2553: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2554: LD_VAR 0 3
2558: PPUSH
2559: LD_INT 71
2561: PPUSH
2562: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2566: LD_ADDR_EXP 44
2570: PUSH
2571: LD_EXP 44
2575: PUSH
2576: LD_VAR 0 3
2580: UNION
2581: ST_TO_ADDR
// end ;
2582: GO 2528
2584: POP
2585: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
2586: LD_ADDR_VAR 0 2
2590: PUSH
2591: DOUBLE
2592: LD_INT 1
2594: DEC
2595: ST_TO_ADDR
2596: LD_INT 5
2598: PUSH
2599: LD_INT 6
2601: PUSH
2602: LD_INT 6
2604: PUSH
2605: EMPTY
2606: LIST
2607: LIST
2608: LIST
2609: PUSH
2610: LD_OWVAR 67
2614: ARRAY
2615: PUSH
2616: FOR_TO
2617: IFFALSE 2691
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
2619: LD_INT 0
2621: PPUSH
2622: LD_INT 1
2624: PPUSH
2625: LD_INT 2
2627: PUSH
2628: LD_INT 3
2630: PUSH
2631: LD_INT 4
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: LIST
2638: PUSH
2639: LD_OWVAR 67
2643: ARRAY
2644: PPUSH
2645: CALL_OW 380
// un := CreateHuman ;
2649: LD_ADDR_VAR 0 3
2653: PUSH
2654: CALL_OW 44
2658: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
2659: LD_VAR 0 3
2663: PPUSH
2664: LD_VAR 0 5
2668: PPUSH
2669: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2673: LD_ADDR_EXP 44
2677: PUSH
2678: LD_EXP 44
2682: PUSH
2683: LD_VAR 0 3
2687: UNION
2688: ST_TO_ADDR
// end ;
2689: GO 2616
2691: POP
2692: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
2693: LD_ADDR_VAR 0 2
2697: PUSH
2698: LD_INT 22
2700: PUSH
2701: LD_INT 6
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PUSH
2708: LD_INT 30
2710: PUSH
2711: LD_INT 32
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PPUSH
2722: CALL_OW 69
2726: PUSH
2727: FOR_IN
2728: IFFALSE 2802
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 ] [ Difficulty ] ) ;
2730: LD_INT 0
2732: PPUSH
2733: LD_INT 1
2735: PPUSH
2736: LD_INT 3
2738: PUSH
2739: LD_INT 4
2741: PUSH
2742: LD_INT 4
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: LIST
2749: PUSH
2750: LD_OWVAR 67
2754: ARRAY
2755: PPUSH
2756: CALL_OW 380
// un := CreateHuman ;
2760: LD_ADDR_VAR 0 3
2764: PUSH
2765: CALL_OW 44
2769: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2770: LD_VAR 0 3
2774: PPUSH
2775: LD_VAR 0 2
2779: PPUSH
2780: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2784: LD_ADDR_EXP 44
2788: PUSH
2789: LD_EXP 44
2793: PUSH
2794: LD_VAR 0 3
2798: UNION
2799: ST_TO_ADDR
// end ;
2800: GO 2727
2802: POP
2803: POP
// for i := 1 to 3 do
2804: LD_ADDR_VAR 0 2
2808: PUSH
2809: DOUBLE
2810: LD_INT 1
2812: DEC
2813: ST_TO_ADDR
2814: LD_INT 3
2816: PUSH
2817: FOR_TO
2818: IFFALSE 2873
// begin PrepareHuman ( false , 3 , 3 ) ;
2820: LD_INT 0
2822: PPUSH
2823: LD_INT 3
2825: PPUSH
2826: LD_INT 3
2828: PPUSH
2829: CALL_OW 380
// un := CreateHuman ;
2833: LD_ADDR_VAR 0 3
2837: PUSH
2838: CALL_OW 44
2842: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
2843: LD_VAR 0 3
2847: PPUSH
2848: LD_INT 92
2850: PPUSH
2851: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2855: LD_ADDR_EXP 44
2859: PUSH
2860: LD_EXP 44
2864: PUSH
2865: LD_VAR 0 3
2869: UNION
2870: ST_TO_ADDR
// end ;
2871: GO 2817
2873: POP
2874: POP
// for i := 1 to 2 do
2875: LD_ADDR_VAR 0 2
2879: PUSH
2880: DOUBLE
2881: LD_INT 1
2883: DEC
2884: ST_TO_ADDR
2885: LD_INT 2
2887: PUSH
2888: FOR_TO
2889: IFFALSE 2944
// begin PrepareHuman ( false , 4 , 3 ) ;
2891: LD_INT 0
2893: PPUSH
2894: LD_INT 4
2896: PPUSH
2897: LD_INT 3
2899: PPUSH
2900: CALL_OW 380
// un := CreateHuman ;
2904: LD_ADDR_VAR 0 3
2908: PUSH
2909: CALL_OW 44
2913: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2914: LD_VAR 0 3
2918: PPUSH
2919: LD_INT 83
2921: PPUSH
2922: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2926: LD_ADDR_EXP 44
2930: PUSH
2931: LD_EXP 44
2935: PUSH
2936: LD_VAR 0 3
2940: UNION
2941: ST_TO_ADDR
// end ;
2942: GO 2888
2944: POP
2945: POP
// for i := 1 to 5 do
2946: LD_ADDR_VAR 0 2
2950: PUSH
2951: DOUBLE
2952: LD_INT 1
2954: DEC
2955: ST_TO_ADDR
2956: LD_INT 5
2958: PUSH
2959: FOR_TO
2960: IFFALSE 3017
// begin PrepareHuman ( false , 1 , 3 ) ;
2962: LD_INT 0
2964: PPUSH
2965: LD_INT 1
2967: PPUSH
2968: LD_INT 3
2970: PPUSH
2971: CALL_OW 380
// un := CreateHuman ;
2975: LD_ADDR_VAR 0 3
2979: PUSH
2980: CALL_OW 44
2984: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
2985: LD_VAR 0 3
2989: PPUSH
2990: LD_VAR 0 4
2994: PPUSH
2995: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
2999: LD_ADDR_EXP 46
3003: PUSH
3004: LD_EXP 46
3008: PUSH
3009: LD_VAR 0 3
3013: UNION
3014: ST_TO_ADDR
// end ;
3015: GO 2959
3017: POP
3018: POP
// russianCargo := [ ] ;
3019: LD_ADDR_EXP 49
3023: PUSH
3024: EMPTY
3025: ST_TO_ADDR
// for i := 1 to 2 do
3026: LD_ADDR_VAR 0 2
3030: PUSH
3031: DOUBLE
3032: LD_INT 1
3034: DEC
3035: ST_TO_ADDR
3036: LD_INT 2
3038: PUSH
3039: FOR_TO
3040: IFFALSE 3172
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3042: LD_INT 6
3044: PPUSH
3045: LD_INT 3
3047: PPUSH
3048: LD_INT 21
3050: PPUSH
3051: LD_INT 1
3053: PPUSH
3054: LD_INT 1
3056: PPUSH
3057: LD_INT 51
3059: PPUSH
3060: LD_INT 100
3062: PPUSH
3063: CALL 366 0 7
// un := CreateVehicle ;
3067: LD_ADDR_VAR 0 3
3071: PUSH
3072: CALL_OW 45
3076: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3077: LD_ADDR_EXP 49
3081: PUSH
3082: LD_EXP 49
3086: PUSH
3087: LD_VAR 0 3
3091: UNION
3092: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3093: LD_VAR 0 3
3097: PPUSH
3098: LD_INT 2
3100: PPUSH
3101: LD_INT 100
3103: PPUSH
3104: CALL_OW 290
// SetDir ( un , 4 ) ;
3108: LD_VAR 0 3
3112: PPUSH
3113: LD_INT 4
3115: PPUSH
3116: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3120: LD_VAR 0 3
3124: PPUSH
3125: LD_INT 147
3127: PPUSH
3128: LD_INT 103
3130: PPUSH
3131: LD_INT 4
3133: PPUSH
3134: LD_INT 0
3136: PPUSH
3137: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3141: LD_INT 0
3143: PPUSH
3144: LD_INT 1
3146: PPUSH
3147: LD_OWVAR 67
3151: PPUSH
3152: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3156: CALL_OW 44
3160: PPUSH
3161: LD_VAR 0 3
3165: PPUSH
3166: CALL_OW 52
// end ;
3170: GO 3039
3172: POP
3173: POP
// uc_side := 3 ;
3174: LD_ADDR_OWVAR 20
3178: PUSH
3179: LD_INT 3
3181: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3182: LD_ADDR_EXP 43
3186: PUSH
3187: LD_STRING Burlak
3189: PPUSH
3190: LD_INT 0
3192: PPUSH
3193: LD_STRING 
3195: PPUSH
3196: CALL 34329 0 3
3200: ST_TO_ADDR
// for i := 1 to 5 do
3201: LD_ADDR_VAR 0 2
3205: PUSH
3206: DOUBLE
3207: LD_INT 1
3209: DEC
3210: ST_TO_ADDR
3211: LD_INT 5
3213: PUSH
3214: FOR_TO
3215: IFFALSE 3308
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3217: LD_INT 0
3219: PPUSH
3220: LD_INT 1
3222: PPUSH
3223: LD_OWVAR 67
3227: PUSH
3228: LD_INT 1
3230: PLUS
3231: PPUSH
3232: CALL_OW 380
// un := CreateHuman ;
3236: LD_ADDR_VAR 0 3
3240: PUSH
3241: CALL_OW 44
3245: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3246: LD_VAR 0 3
3250: PPUSH
3251: LD_INT 22
3253: PUSH
3254: LD_INT 3
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 30
3263: PUSH
3264: LD_INT 32
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PPUSH
3275: CALL_OW 69
3279: PUSH
3280: LD_VAR 0 2
3284: ARRAY
3285: PPUSH
3286: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3290: LD_ADDR_EXP 45
3294: PUSH
3295: LD_EXP 45
3299: PUSH
3300: LD_VAR 0 3
3304: UNION
3305: ST_TO_ADDR
// end ;
3306: GO 3214
3308: POP
3309: POP
// for i := 1 to 2 do
3310: LD_ADDR_VAR 0 2
3314: PUSH
3315: DOUBLE
3316: LD_INT 1
3318: DEC
3319: ST_TO_ADDR
3320: LD_INT 2
3322: PUSH
3323: FOR_TO
3324: IFFALSE 3415
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3326: LD_INT 0
3328: PPUSH
3329: LD_INT 1
3331: PPUSH
3332: LD_OWVAR 67
3336: PUSH
3337: LD_INT 1
3339: PLUS
3340: PPUSH
3341: CALL_OW 380
// un := CreateHuman ;
3345: LD_ADDR_VAR 0 3
3349: PUSH
3350: CALL_OW 44
3354: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3355: LD_VAR 0 3
3359: PPUSH
3360: LD_INT 22
3362: PUSH
3363: LD_INT 3
3365: PUSH
3366: EMPTY
3367: LIST
3368: LIST
3369: PUSH
3370: LD_INT 30
3372: PUSH
3373: LD_INT 5
3375: PUSH
3376: EMPTY
3377: LIST
3378: LIST
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: PPUSH
3384: CALL_OW 69
3388: PUSH
3389: LD_INT 1
3391: ARRAY
3392: PPUSH
3393: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3397: LD_ADDR_EXP 45
3401: PUSH
3402: LD_EXP 45
3406: PUSH
3407: LD_VAR 0 3
3411: UNION
3412: ST_TO_ADDR
// end ;
3413: GO 3323
3415: POP
3416: POP
// for i := 1 to 2 do
3417: LD_ADDR_VAR 0 2
3421: PUSH
3422: DOUBLE
3423: LD_INT 1
3425: DEC
3426: ST_TO_ADDR
3427: LD_INT 2
3429: PUSH
3430: FOR_TO
3431: IFFALSE 3518
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3433: LD_INT 0
3435: PPUSH
3436: LD_INT 4
3438: PPUSH
3439: LD_OWVAR 67
3443: PPUSH
3444: CALL_OW 380
// un := CreateHuman ;
3448: LD_ADDR_VAR 0 3
3452: PUSH
3453: CALL_OW 44
3457: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
3458: LD_VAR 0 3
3462: PPUSH
3463: LD_INT 22
3465: PUSH
3466: LD_INT 3
3468: PUSH
3469: EMPTY
3470: LIST
3471: LIST
3472: PUSH
3473: LD_INT 30
3475: PUSH
3476: LD_INT 7
3478: PUSH
3479: EMPTY
3480: LIST
3481: LIST
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: PPUSH
3487: CALL_OW 69
3491: PUSH
3492: LD_INT 1
3494: ARRAY
3495: PPUSH
3496: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3500: LD_ADDR_EXP 45
3504: PUSH
3505: LD_EXP 45
3509: PUSH
3510: LD_VAR 0 3
3514: UNION
3515: ST_TO_ADDR
// end ;
3516: GO 3430
3518: POP
3519: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
3520: LD_INT 0
3522: PPUSH
3523: LD_INT 2
3525: PPUSH
3526: LD_OWVAR 67
3530: PPUSH
3531: CALL_OW 380
// un := CreateHuman ;
3535: LD_ADDR_VAR 0 3
3539: PUSH
3540: CALL_OW 44
3544: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
3545: LD_VAR 0 3
3549: PPUSH
3550: LD_INT 106
3552: PPUSH
3553: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3557: LD_ADDR_EXP 45
3561: PUSH
3562: LD_EXP 45
3566: PUSH
3567: LD_VAR 0 3
3571: UNION
3572: ST_TO_ADDR
// for i := 1 to 3 do
3573: LD_ADDR_VAR 0 2
3577: PUSH
3578: DOUBLE
3579: LD_INT 1
3581: DEC
3582: ST_TO_ADDR
3583: LD_INT 3
3585: PUSH
3586: FOR_TO
3587: IFFALSE 3709
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
3589: LD_ADDR_VAR 0 6
3593: PUSH
3594: LD_INT 22
3596: PUSH
3597: LD_INT 3
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PUSH
3604: LD_INT 30
3606: PUSH
3607: LD_INT 31
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: PUSH
3614: EMPTY
3615: LIST
3616: LIST
3617: PPUSH
3618: CALL_OW 69
3622: PUSH
3623: LD_VAR 0 2
3627: ARRAY
3628: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
3629: LD_INT 0
3631: PPUSH
3632: LD_INT 1
3634: PPUSH
3635: LD_OWVAR 67
3639: PPUSH
3640: CALL_OW 380
// un := CreateHuman ;
3644: LD_ADDR_VAR 0 3
3648: PUSH
3649: CALL_OW 44
3653: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
3654: LD_VAR 0 3
3658: PPUSH
3659: LD_VAR 0 6
3663: PPUSH
3664: CALL_OW 254
3668: PUSH
3669: LD_INT 3
3671: PLUS
3672: PPUSH
3673: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
3677: LD_VAR 0 3
3681: PPUSH
3682: LD_VAR 0 6
3686: PPUSH
3687: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3691: LD_ADDR_EXP 45
3695: PUSH
3696: LD_EXP 45
3700: PUSH
3701: LD_VAR 0 3
3705: UNION
3706: ST_TO_ADDR
// end ;
3707: GO 3586
3709: POP
3710: POP
// if Difficulty > 1 then
3711: LD_OWVAR 67
3715: PUSH
3716: LD_INT 1
3718: GREATER
3719: IFFALSE 3794
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
3721: LD_ADDR_VAR 0 3
3725: PUSH
3726: LD_INT 3
3728: PPUSH
3729: LD_INT 3
3731: PPUSH
3732: LD_INT 23
3734: PPUSH
3735: LD_INT 1
3737: PPUSH
3738: LD_INT 1
3740: PPUSH
3741: LD_INT 44
3743: PPUSH
3744: LD_INT 100
3746: PPUSH
3747: CALL 366 0 7
3751: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
3752: LD_VAR 0 3
3756: PPUSH
3757: LD_INT 73
3759: PPUSH
3760: LD_INT 110
3762: PPUSH
3763: LD_INT 0
3765: PPUSH
3766: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
3770: LD_INT 0
3772: PPUSH
3773: LD_INT 3
3775: PPUSH
3776: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
3780: CALL_OW 44
3784: PPUSH
3785: LD_VAR 0 3
3789: PPUSH
3790: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
3794: LD_ADDR_EXP 48
3798: PUSH
3799: EMPTY
3800: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 ] [ Difficulty ] do
3801: LD_ADDR_VAR 0 2
3805: PUSH
3806: DOUBLE
3807: LD_INT 1
3809: DEC
3810: ST_TO_ADDR
3811: LD_INT 6
3813: PUSH
3814: LD_INT 7
3816: PUSH
3817: LD_INT 8
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: LIST
3824: PUSH
3825: LD_OWVAR 67
3829: ARRAY
3830: PUSH
3831: FOR_TO
3832: IFFALSE 4056
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
3834: LD_INT 3
3836: PPUSH
3837: LD_INT 3
3839: PPUSH
3840: LD_INT 21
3842: PUSH
3843: LD_INT 23
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: PUSH
3850: LD_VAR 0 2
3854: PUSH
3855: LD_INT 2
3857: MOD
3858: PUSH
3859: LD_INT 1
3861: PLUS
3862: ARRAY
3863: PPUSH
3864: LD_INT 1
3866: PPUSH
3867: LD_INT 1
3869: PPUSH
3870: LD_INT 43
3872: PUSH
3873: LD_INT 44
3875: PUSH
3876: LD_INT 42
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: LIST
3883: PUSH
3884: LD_VAR 0 2
3888: PUSH
3889: LD_INT 3
3891: MOD
3892: PUSH
3893: LD_INT 1
3895: PLUS
3896: ARRAY
3897: PPUSH
3898: LD_INT 100
3900: PPUSH
3901: CALL 366 0 7
// un := CreateVehicle ;
3905: LD_ADDR_VAR 0 3
3909: PUSH
3910: CALL_OW 45
3914: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
3915: LD_VAR 0 3
3919: PPUSH
3920: LD_INT 0
3922: PUSH
3923: LD_INT 5
3925: PUSH
3926: EMPTY
3927: LIST
3928: LIST
3929: PUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_INT 2
3935: PPUSH
3936: CALL_OW 12
3940: ARRAY
3941: PPUSH
3942: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
3946: LD_ADDR_EXP 48
3950: PUSH
3951: LD_EXP 48
3955: PUSH
3956: LD_VAR 0 3
3960: UNION
3961: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
3962: LD_VAR 0 3
3966: PPUSH
3967: LD_INT 127
3969: PPUSH
3970: LD_INT 89
3972: PPUSH
3973: LD_INT 7
3975: PPUSH
3976: LD_INT 0
3978: PPUSH
3979: CALL_OW 50
// uc_side := 3 ;
3983: LD_ADDR_OWVAR 20
3987: PUSH
3988: LD_INT 3
3990: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
3991: LD_INT 0
3993: PPUSH
3994: LD_INT 3
3996: PPUSH
3997: LD_INT 3
3999: PPUSH
4000: CALL_OW 380
// un := CreateHuman ;
4004: LD_ADDR_VAR 0 3
4008: PUSH
4009: CALL_OW 44
4013: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4014: LD_ADDR_EXP 48
4018: PUSH
4019: LD_EXP 48
4023: PUSH
4024: LD_VAR 0 3
4028: UNION
4029: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4030: LD_VAR 0 3
4034: PPUSH
4035: LD_EXP 48
4039: PUSH
4040: LD_EXP 48
4044: PUSH
4045: LD_INT 1
4047: MINUS
4048: ARRAY
4049: PPUSH
4050: CALL_OW 52
// end ;
4054: GO 3831
4056: POP
4057: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
4058: LD_ADDR_VAR 0 2
4062: PUSH
4063: DOUBLE
4064: LD_INT 1
4066: DEC
4067: ST_TO_ADDR
4068: LD_INT 3
4070: PUSH
4071: LD_INT 4
4073: PUSH
4074: LD_INT 5
4076: PUSH
4077: EMPTY
4078: LIST
4079: LIST
4080: LIST
4081: PUSH
4082: LD_OWVAR 67
4086: ARRAY
4087: PUSH
4088: FOR_TO
4089: IFFALSE 4155
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4091: LD_INT 0
4093: PPUSH
4094: LD_INT 1
4096: PPUSH
4097: LD_OWVAR 67
4101: PPUSH
4102: CALL_OW 380
// un := CreateHuman ;
4106: LD_ADDR_VAR 0 3
4110: PUSH
4111: CALL_OW 44
4115: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4116: LD_ADDR_EXP 48
4120: PUSH
4121: LD_EXP 48
4125: PUSH
4126: LD_VAR 0 3
4130: UNION
4131: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4132: LD_VAR 0 3
4136: PPUSH
4137: LD_INT 91
4139: PPUSH
4140: LD_INT 60
4142: PPUSH
4143: LD_INT 3
4145: PPUSH
4146: LD_INT 0
4148: PPUSH
4149: CALL_OW 50
// end ;
4153: GO 4088
4155: POP
4156: POP
// end ;
4157: LD_VAR 0 1
4161: RET
// every 0 0$3 do var i ;
4162: GO 4164
4164: DISABLE
4165: LD_INT 0
4167: PPUSH
// begin for i := 1 to 4 do
4168: LD_ADDR_VAR 0 1
4172: PUSH
4173: DOUBLE
4174: LD_INT 1
4176: DEC
4177: ST_TO_ADDR
4178: LD_INT 4
4180: PUSH
4181: FOR_TO
4182: IFFALSE 4201
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4184: LD_EXP 46
4188: PUSH
4189: LD_VAR 0 1
4193: ARRAY
4194: PPUSH
4195: CALL_OW 122
4199: GO 4181
4201: POP
4202: POP
// wait ( 3 ) ;
4203: LD_INT 3
4205: PPUSH
4206: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4210: LD_EXP 46
4214: PUSH
4215: LD_INT 1
4217: ARRAY
4218: PPUSH
4219: LD_INT 22
4221: PUSH
4222: LD_INT 6
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: PUSH
4229: LD_INT 30
4231: PUSH
4232: LD_INT 31
4234: PUSH
4235: EMPTY
4236: LIST
4237: LIST
4238: PUSH
4239: EMPTY
4240: LIST
4241: LIST
4242: PPUSH
4243: CALL_OW 69
4247: PPUSH
4248: LD_EXP 46
4252: PUSH
4253: LD_INT 1
4255: ARRAY
4256: PPUSH
4257: CALL_OW 74
4261: PPUSH
4262: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4266: LD_EXP 46
4270: PUSH
4271: LD_INT 2
4273: ARRAY
4274: PPUSH
4275: LD_INT 211
4277: PPUSH
4278: LD_INT 107
4280: PPUSH
4281: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4285: LD_EXP 46
4289: PUSH
4290: LD_INT 2
4292: ARRAY
4293: PPUSH
4294: LD_INT 209
4296: PPUSH
4297: LD_INT 106
4299: PPUSH
4300: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4304: LD_EXP 46
4308: PUSH
4309: LD_INT 3
4311: ARRAY
4312: PPUSH
4313: LD_INT 209
4315: PPUSH
4316: LD_INT 103
4318: PPUSH
4319: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4323: LD_EXP 46
4327: PUSH
4328: LD_INT 3
4330: ARRAY
4331: PPUSH
4332: LD_INT 209
4334: PPUSH
4335: LD_INT 106
4337: PPUSH
4338: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4342: LD_EXP 46
4346: PUSH
4347: LD_INT 4
4349: ARRAY
4350: PPUSH
4351: LD_INT 227
4353: PPUSH
4354: LD_INT 117
4356: PPUSH
4357: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4361: LD_EXP 46
4365: PUSH
4366: LD_INT 4
4368: ARRAY
4369: PPUSH
4370: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4374: LD_INT 700
4376: PPUSH
4377: CALL_OW 67
// for i := 3 downto 2 do
4381: LD_ADDR_VAR 0 1
4385: PUSH
4386: DOUBLE
4387: LD_INT 3
4389: INC
4390: ST_TO_ADDR
4391: LD_INT 2
4393: PUSH
4394: FOR_DOWNTO
4395: IFFALSE 4562
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4397: LD_EXP 46
4401: PUSH
4402: LD_VAR 0 1
4406: ARRAY
4407: PPUSH
4408: LD_INT 200
4410: PPUSH
4411: LD_INT 91
4413: PPUSH
4414: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4418: LD_EXP 46
4422: PUSH
4423: LD_VAR 0 1
4427: ARRAY
4428: PPUSH
4429: LD_INT 210
4431: PPUSH
4432: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4436: LD_EXP 46
4440: PUSH
4441: LD_VAR 0 1
4445: ARRAY
4446: PPUSH
4447: LD_INT 224
4449: PPUSH
4450: LD_INT 93
4452: PPUSH
4453: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4457: LD_EXP 46
4461: PUSH
4462: LD_VAR 0 1
4466: ARRAY
4467: PPUSH
4468: LD_INT 210
4470: PPUSH
4471: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4475: LD_EXP 46
4479: PUSH
4480: LD_VAR 0 1
4484: ARRAY
4485: PPUSH
4486: LD_INT 239
4488: PPUSH
4489: LD_INT 123
4491: PPUSH
4492: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4496: LD_EXP 46
4500: PUSH
4501: LD_VAR 0 1
4505: ARRAY
4506: PPUSH
4507: LD_INT 210
4509: PPUSH
4510: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4514: LD_EXP 46
4518: PUSH
4519: LD_VAR 0 1
4523: ARRAY
4524: PPUSH
4525: LD_INT 212
4527: PPUSH
4528: LD_INT 105
4530: PPUSH
4531: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4535: LD_EXP 46
4539: PUSH
4540: LD_VAR 0 1
4544: ARRAY
4545: PPUSH
4546: LD_INT 700
4548: PPUSH
4549: CALL_OW 202
// wait ( 0 0$30 ) ;
4553: LD_INT 1050
4555: PPUSH
4556: CALL_OW 67
// end ;
4560: GO 4394
4562: POP
4563: POP
// until not activeGrishkoAI ;
4564: LD_EXP 10
4568: NOT
4569: IFFALSE 4374
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
4571: LD_EXP 46
4575: PPUSH
4576: LD_INT 221
4578: PPUSH
4579: LD_INT 110
4581: PPUSH
4582: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
4586: LD_EXP 46
4590: PPUSH
4591: LD_INT 228
4593: PPUSH
4594: LD_INT 115
4596: PPUSH
4597: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
4601: LD_EXP 46
4605: PPUSH
4606: CALL_OW 200
// end ;
4610: PPOPN 1
4612: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
4613: LD_EXP 12
4617: IFFALSE 5359
4619: GO 4621
4621: DISABLE
4622: LD_INT 0
4624: PPUSH
4625: PPUSH
4626: PPUSH
4627: PPUSH
// begin uc_side := 6 ;
4628: LD_ADDR_OWVAR 20
4632: PUSH
4633: LD_INT 6
4635: ST_TO_ADDR
// uc_nation := 3 ;
4636: LD_ADDR_OWVAR 21
4640: PUSH
4641: LD_INT 3
4643: ST_TO_ADDR
// for i := 1 to 3 do
4644: LD_ADDR_VAR 0 2
4648: PUSH
4649: DOUBLE
4650: LD_INT 1
4652: DEC
4653: ST_TO_ADDR
4654: LD_INT 3
4656: PUSH
4657: FOR_TO
4658: IFFALSE 4767
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
4660: LD_INT 0
4662: PPUSH
4663: LD_INT 1
4665: PPUSH
4666: LD_INT 2
4668: PUSH
4669: LD_INT 3
4671: PUSH
4672: LD_INT 4
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: LIST
4679: PUSH
4680: LD_OWVAR 67
4684: ARRAY
4685: PPUSH
4686: CALL_OW 380
// un := CreateHuman ;
4690: LD_ADDR_VAR 0 1
4694: PUSH
4695: CALL_OW 44
4699: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
4700: LD_ADDR_EXP 47
4704: PUSH
4705: LD_EXP 47
4709: PUSH
4710: LD_VAR 0 1
4714: UNION
4715: ST_TO_ADDR
// SetTag ( un , 1 ) ;
4716: LD_VAR 0 1
4720: PPUSH
4721: LD_INT 1
4723: PPUSH
4724: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
4728: LD_VAR 0 1
4732: PPUSH
4733: LD_INT 11
4735: PPUSH
4736: LD_INT 0
4738: PPUSH
4739: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
4743: LD_VAR 0 1
4747: PPUSH
4748: LD_INT 210
4750: PPUSH
4751: LD_INT 159
4753: PPUSH
4754: CALL_OW 111
// wait ( 0 0$2 ) ;
4758: LD_INT 70
4760: PPUSH
4761: CALL_OW 67
// end ;
4765: GO 4657
4767: POP
4768: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
4769: LD_ADDR_VAR 0 4
4773: PUSH
4774: LD_INT 172
4776: PUSH
4777: LD_INT 76
4779: PUSH
4780: EMPTY
4781: LIST
4782: LIST
4783: PUSH
4784: LD_INT 150
4786: PUSH
4787: LD_INT 38
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: PUSH
4794: LD_INT 148
4796: PUSH
4797: LD_INT 9
4799: PUSH
4800: EMPTY
4801: LIST
4802: LIST
4803: PUSH
4804: LD_INT 165
4806: PUSH
4807: LD_INT 38
4809: PUSH
4810: EMPTY
4811: LIST
4812: LIST
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: PUSH
4820: LD_INT 191
4822: PUSH
4823: LD_INT 77
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: PUSH
4830: LD_INT 168
4832: PUSH
4833: LD_INT 42
4835: PUSH
4836: EMPTY
4837: LIST
4838: LIST
4839: PUSH
4840: LD_INT 166
4842: PUSH
4843: LD_INT 11
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: PUSH
4850: LD_INT 151
4852: PUSH
4853: LD_INT 12
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: PUSH
4866: LD_INT 221
4868: PUSH
4869: LD_INT 88
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: PUSH
4876: LD_INT 217
4878: PUSH
4879: LD_INT 64
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: PUSH
4886: LD_INT 232
4888: PUSH
4889: LD_INT 66
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: PUSH
4896: LD_INT 200
4898: PUSH
4899: LD_INT 56
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: LIST
4916: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4917: LD_INT 35
4919: PPUSH
4920: CALL_OW 67
// for i := russianPatrol downto 1 do
4924: LD_ADDR_VAR 0 2
4928: PUSH
4929: DOUBLE
4930: LD_EXP 47
4934: INC
4935: ST_TO_ADDR
4936: LD_INT 1
4938: PUSH
4939: FOR_DOWNTO
4940: IFFALSE 5323
// begin if IsDead ( russianPatrol [ i ] ) then
4942: LD_EXP 47
4946: PUSH
4947: LD_VAR 0 2
4951: ARRAY
4952: PPUSH
4953: CALL_OW 301
4957: IFFALSE 4961
// continue ;
4959: GO 4939
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
4961: LD_EXP 47
4965: PUSH
4966: LD_VAR 0 2
4970: ARRAY
4971: PPUSH
4972: CALL_OW 256
4976: PUSH
4977: LD_INT 990
4979: LESS
4980: PUSH
4981: LD_EXP 47
4985: PUSH
4986: LD_VAR 0 2
4990: ARRAY
4991: PPUSH
4992: CALL_OW 110
4996: PUSH
4997: LD_INT 1
4999: EQUAL
5000: AND
5001: IFFALSE 5021
// SetTag ( russianPatrol [ i ] , 2 ) ;
5003: LD_EXP 47
5007: PUSH
5008: LD_VAR 0 2
5012: ARRAY
5013: PPUSH
5014: LD_INT 2
5016: PPUSH
5017: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5021: LD_EXP 47
5025: PUSH
5026: LD_VAR 0 2
5030: ARRAY
5031: PPUSH
5032: CALL_OW 110
5036: PUSH
5037: LD_INT 2
5039: EQUAL
5040: IFFALSE 5107
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5042: LD_EXP 47
5046: PUSH
5047: LD_VAR 0 2
5051: ARRAY
5052: PPUSH
5053: LD_INT 166
5055: PPUSH
5056: LD_INT 101
5058: PPUSH
5059: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5063: LD_EXP 47
5067: PUSH
5068: LD_VAR 0 2
5072: ARRAY
5073: PPUSH
5074: LD_INT 71
5076: PPUSH
5077: CALL_OW 296
5081: PUSH
5082: LD_INT 10
5084: LESS
5085: IFFALSE 5105
// SetTag ( russianPatrol [ i ] , 3 ) ;
5087: LD_EXP 47
5091: PUSH
5092: LD_VAR 0 2
5096: ARRAY
5097: PPUSH
5098: LD_INT 3
5100: PPUSH
5101: CALL_OW 109
// continue ;
5105: GO 4939
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5107: LD_EXP 47
5111: PUSH
5112: LD_VAR 0 2
5116: ARRAY
5117: PPUSH
5118: CALL_OW 110
5122: PUSH
5123: LD_INT 3
5125: EQUAL
5126: IFFALSE 5221
// begin spottedByPatrol := true ;
5128: LD_ADDR_EXP 7
5132: PUSH
5133: LD_INT 1
5135: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5136: LD_EXP 47
5140: PUSH
5141: LD_VAR 0 2
5145: ARRAY
5146: PPUSH
5147: CALL_OW 250
5151: PPUSH
5152: LD_EXP 47
5156: PUSH
5157: LD_VAR 0 2
5161: ARRAY
5162: PPUSH
5163: CALL_OW 251
5167: PPUSH
5168: LD_INT 2
5170: PPUSH
5171: LD_INT 6
5173: NEG
5174: PPUSH
5175: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
5179: LD_EXP 47
5183: PUSH
5184: LD_VAR 0 2
5188: ARRAY
5189: PPUSH
5190: CALL_OW 87
// DialogueOn ;
5194: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
5198: LD_EXP 25
5202: PPUSH
5203: LD_STRING DH-Spot-f-3
5205: PPUSH
5206: CALL_OW 88
// DialogueOff ;
5210: CALL_OW 7
// YouLost ( Spotted ) ;
5214: LD_STRING Spotted
5216: PPUSH
5217: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
5221: LD_EXP 47
5225: PUSH
5226: LD_VAR 0 2
5230: ARRAY
5231: PPUSH
5232: CALL_OW 314
5236: NOT
5237: IFFALSE 5321
// for j in patrol [ i ] do
5239: LD_ADDR_VAR 0 3
5243: PUSH
5244: LD_VAR 0 4
5248: PUSH
5249: LD_VAR 0 2
5253: ARRAY
5254: PUSH
5255: FOR_IN
5256: IFFALSE 5319
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5258: LD_EXP 47
5262: PUSH
5263: LD_VAR 0 2
5267: ARRAY
5268: PPUSH
5269: LD_INT 35
5271: PPUSH
5272: LD_INT 175
5274: PPUSH
5275: CALL_OW 12
5279: PPUSH
5280: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5284: LD_EXP 47
5288: PUSH
5289: LD_VAR 0 2
5293: ARRAY
5294: PPUSH
5295: LD_VAR 0 3
5299: PUSH
5300: LD_INT 1
5302: ARRAY
5303: PPUSH
5304: LD_VAR 0 3
5308: PUSH
5309: LD_INT 2
5311: ARRAY
5312: PPUSH
5313: CALL_OW 174
// end ;
5317: GO 5255
5319: POP
5320: POP
// end ;
5321: GO 4939
5323: POP
5324: POP
// until not russianPatrol or russianAlert ;
5325: LD_EXP 47
5329: NOT
5330: PUSH
5331: LD_EXP 9
5335: OR
5336: IFFALSE 4917
// if russianPatrol then
5338: LD_EXP 47
5342: IFFALSE 5359
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5344: LD_EXP 47
5348: PPUSH
5349: LD_INT 161
5351: PPUSH
5352: LD_INT 107
5354: PPUSH
5355: CALL_OW 114
// end ;
5359: PPOPN 4
5361: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5362: LD_EXP 6
5366: PUSH
5367: LD_EXP 13
5371: NOT
5372: AND
5373: IFFALSE 5859
5375: GO 5377
5377: DISABLE
5378: LD_INT 0
5380: PPUSH
5381: PPUSH
5382: PPUSH
5383: PPUSH
5384: PPUSH
// begin enable ;
5385: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5386: LD_ADDR_VAR 0 2
5390: PUSH
5391: LD_EXP 48
5395: PPUSH
5396: LD_INT 21
5398: PUSH
5399: LD_INT 2
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PPUSH
5406: CALL_OW 72
5410: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5411: LD_ADDR_VAR 0 4
5415: PUSH
5416: LD_INT 22
5418: PUSH
5419: LD_INT 4
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: PPUSH
5426: CALL_OW 69
5430: ST_TO_ADDR
// for i in filter do
5431: LD_ADDR_VAR 0 1
5435: PUSH
5436: LD_VAR 0 2
5440: PUSH
5441: FOR_IN
5442: IFFALSE 5857
// begin tmp := IsDrivenBy ( i ) ;
5444: LD_ADDR_VAR 0 3
5448: PUSH
5449: LD_VAR 0 1
5453: PPUSH
5454: CALL_OW 311
5458: ST_TO_ADDR
// if not tmp then
5459: LD_VAR 0 3
5463: NOT
5464: IFFALSE 5468
// continue ;
5466: GO 5441
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5468: LD_VAR 0 1
5472: PPUSH
5473: CALL_OW 261
5477: PUSH
5478: LD_INT 90
5480: GREATER
5481: PUSH
5482: LD_VAR 0 1
5486: PPUSH
5487: CALL_OW 110
5491: PUSH
5492: LD_INT 2
5494: EQUAL
5495: AND
5496: IFFALSE 5512
// SetTag ( i , 0 ) else
5498: LD_VAR 0 1
5502: PPUSH
5503: LD_INT 0
5505: PPUSH
5506: CALL_OW 109
5510: GO 5608
// if GetTag ( i ) = 2 then
5512: LD_VAR 0 1
5516: PPUSH
5517: CALL_OW 110
5521: PUSH
5522: LD_INT 2
5524: EQUAL
5525: IFFALSE 5608
// begin x := rand ( 1 , 2 ) ;
5527: LD_ADDR_VAR 0 5
5531: PUSH
5532: LD_INT 1
5534: PPUSH
5535: LD_INT 2
5537: PPUSH
5538: CALL_OW 12
5542: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5543: LD_VAR 0 1
5547: PPUSH
5548: LD_EXP 49
5552: PUSH
5553: LD_VAR 0 5
5557: ARRAY
5558: PPUSH
5559: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
5563: LD_EXP 49
5567: PUSH
5568: LD_VAR 0 5
5572: ARRAY
5573: PPUSH
5574: LD_INT 2
5576: PPUSH
5577: CALL_OW 289
5581: PUSH
5582: LD_INT 20
5584: LESS
5585: IFFALSE 5608
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
5587: LD_EXP 49
5591: PUSH
5592: LD_VAR 0 5
5596: ARRAY
5597: PPUSH
5598: LD_INT 2
5600: PPUSH
5601: LD_INT 100
5603: PPUSH
5604: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5608: LD_VAR 0 1
5612: PPUSH
5613: CALL_OW 256
5617: PUSH
5618: LD_INT 600
5620: GREATEREQUAL
5621: PUSH
5622: LD_VAR 0 1
5626: PPUSH
5627: CALL_OW 110
5631: NOT
5632: AND
5633: IFFALSE 5659
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5635: LD_VAR 0 1
5639: PPUSH
5640: LD_VAR 0 4
5644: PPUSH
5645: LD_VAR 0 1
5649: PPUSH
5650: CALL_OW 74
5654: PPUSH
5655: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5659: LD_VAR 0 1
5663: PPUSH
5664: CALL_OW 256
5668: PUSH
5669: LD_INT 600
5671: LESS
5672: PUSH
5673: LD_VAR 0 1
5677: PPUSH
5678: CALL_OW 110
5682: NOT
5683: AND
5684: IFFALSE 5713
// begin SetTag ( i , 1 ) ;
5686: LD_VAR 0 1
5690: PPUSH
5691: LD_INT 1
5693: PPUSH
5694: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5698: LD_VAR 0 1
5702: PPUSH
5703: LD_INT 62
5705: PPUSH
5706: LD_INT 22
5708: PPUSH
5709: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5713: LD_VAR 0 1
5717: PPUSH
5718: CALL_OW 110
5722: PUSH
5723: LD_INT 1
5725: EQUAL
5726: PUSH
5727: LD_VAR 0 1
5731: PPUSH
5732: LD_INT 62
5734: PPUSH
5735: LD_INT 22
5737: PPUSH
5738: CALL_OW 297
5742: PUSH
5743: LD_INT 6
5745: LESS
5746: AND
5747: PUSH
5748: LD_VAR 0 3
5752: AND
5753: IFFALSE 5855
// begin ComExitVehicle ( tmp ) ;
5755: LD_VAR 0 3
5759: PPUSH
5760: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
5764: LD_VAR 0 3
5768: PPUSH
5769: LD_VAR 0 1
5773: PPUSH
5774: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5778: LD_INT 35
5780: PPUSH
5781: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5785: LD_VAR 0 1
5789: PPUSH
5790: CALL_OW 256
5794: PUSH
5795: LD_INT 1000
5797: EQUAL
5798: IFFALSE 5778
// ComEnterUnit ( tmp , i ) ;
5800: LD_VAR 0 3
5804: PPUSH
5805: LD_VAR 0 1
5809: PPUSH
5810: CALL_OW 120
// if GetFuel ( i ) <= 90 then
5814: LD_VAR 0 1
5818: PPUSH
5819: CALL_OW 261
5823: PUSH
5824: LD_INT 90
5826: LESSEQUAL
5827: IFFALSE 5843
// SetTag ( i , 2 ) else
5829: LD_VAR 0 1
5833: PPUSH
5834: LD_INT 2
5836: PPUSH
5837: CALL_OW 109
5841: GO 5855
// SetTag ( i , 0 ) ;
5843: LD_VAR 0 1
5847: PPUSH
5848: LD_INT 0
5850: PPUSH
5851: CALL_OW 109
// end ; end ;
5855: GO 5441
5857: POP
5858: POP
// end ;
5859: PPOPN 5
5861: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
5862: LD_EXP 20
5866: IFFALSE 6089
5868: GO 5870
5870: DISABLE
5871: LD_INT 0
5873: PPUSH
5874: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
5875: LD_EXP 49
5879: PPUSH
5880: LD_INT 79
5882: PPUSH
5883: LD_INT 155
5885: PPUSH
5886: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
5890: LD_EXP 49
5894: PPUSH
5895: LD_INT 16
5897: PPUSH
5898: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5902: LD_ADDR_VAR 0 2
5906: PUSH
5907: LD_EXP 48
5911: PPUSH
5912: LD_INT 50
5914: PUSH
5915: EMPTY
5916: LIST
5917: PPUSH
5918: CALL_OW 72
5922: ST_TO_ADDR
// for i in tmp do
5923: LD_ADDR_VAR 0 1
5927: PUSH
5928: LD_VAR 0 2
5932: PUSH
5933: FOR_IN
5934: IFFALSE 5968
// begin ComAgressiveMove ( i , 123 , 60 ) ;
5936: LD_VAR 0 1
5940: PPUSH
5941: LD_INT 123
5943: PPUSH
5944: LD_INT 60
5946: PPUSH
5947: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
5951: LD_VAR 0 1
5955: PPUSH
5956: LD_INT 153
5958: PPUSH
5959: LD_INT 103
5961: PPUSH
5962: CALL_OW 174
// end ;
5966: GO 5933
5968: POP
5969: POP
// repeat wait ( 0 0$1 ) ;
5970: LD_INT 35
5972: PPUSH
5973: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5977: LD_ADDR_VAR 0 2
5981: PUSH
5982: LD_EXP 48
5986: PPUSH
5987: LD_INT 50
5989: PUSH
5990: EMPTY
5991: LIST
5992: PPUSH
5993: CALL_OW 72
5997: ST_TO_ADDR
// for i in tmp do
5998: LD_ADDR_VAR 0 1
6002: PUSH
6003: LD_VAR 0 2
6007: PUSH
6008: FOR_IN
6009: IFFALSE 6080
// if not HasTask ( i ) then
6011: LD_VAR 0 1
6015: PPUSH
6016: CALL_OW 314
6020: NOT
6021: IFFALSE 6078
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
6023: LD_VAR 0 1
6027: PPUSH
6028: LD_INT 81
6030: PUSH
6031: LD_INT 3
6033: PUSH
6034: EMPTY
6035: LIST
6036: LIST
6037: PUSH
6038: LD_INT 3
6040: PUSH
6041: LD_INT 21
6043: PUSH
6044: LD_INT 3
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: PUSH
6055: EMPTY
6056: LIST
6057: LIST
6058: PPUSH
6059: CALL_OW 69
6063: PPUSH
6064: LD_VAR 0 1
6068: PPUSH
6069: CALL_OW 74
6073: PPUSH
6074: CALL_OW 115
6078: GO 6008
6080: POP
6081: POP
6082: LD_VAR 0 2
6086: NOT
6087: IFFALSE 5970
// end ;
6089: PPOPN 2
6091: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6092: LD_INT 22
6094: PUSH
6095: LD_INT 3
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: PUSH
6102: LD_INT 32
6104: PUSH
6105: LD_INT 1
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: PPUSH
6116: CALL_OW 69
6120: IFFALSE 6199
6122: GO 6124
6124: DISABLE
6125: LD_INT 0
6127: PPUSH
// begin enable ;
6128: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6129: LD_ADDR_VAR 0 1
6133: PUSH
6134: LD_INT 22
6136: PUSH
6137: LD_INT 3
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: LD_INT 32
6146: PUSH
6147: LD_INT 1
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PPUSH
6158: CALL_OW 69
6162: PUSH
6163: FOR_IN
6164: IFFALSE 6197
// if GetFuel ( i ) < 1 then
6166: LD_VAR 0 1
6170: PPUSH
6171: CALL_OW 261
6175: PUSH
6176: LD_INT 1
6178: LESS
6179: IFFALSE 6195
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6181: LD_VAR 0 1
6185: PPUSH
6186: CALL_OW 311
6190: PPUSH
6191: CALL_OW 121
6195: GO 6163
6197: POP
6198: POP
// end ; end_of_file
6199: PPOPN 1
6201: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6202: LD_INT 0
6204: PPUSH
6205: PPUSH
6206: PPUSH
// SetBName ( omikron , omikron ) ;
6207: LD_INT 64
6209: PPUSH
6210: LD_STRING omikron
6212: PPUSH
6213: CALL_OW 500
// uc_side := 4 ;
6217: LD_ADDR_OWVAR 20
6221: PUSH
6222: LD_INT 4
6224: ST_TO_ADDR
// uc_nation := 1 ;
6225: LD_ADDR_OWVAR 21
6229: PUSH
6230: LD_INT 1
6232: ST_TO_ADDR
// omicronSquad := [ ] ;
6233: LD_ADDR_EXP 51
6237: PUSH
6238: EMPTY
6239: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6240: LD_ADDR_VAR 0 2
6244: PUSH
6245: LD_INT 22
6247: PUSH
6248: LD_INT 4
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 2
6257: PUSH
6258: LD_INT 30
6260: PUSH
6261: LD_INT 32
6263: PUSH
6264: EMPTY
6265: LIST
6266: LIST
6267: PUSH
6268: LD_INT 30
6270: PUSH
6271: LD_INT 31
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: LIST
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PPUSH
6287: CALL_OW 69
6291: PUSH
6292: FOR_IN
6293: IFFALSE 6350
// begin PrepareHuman ( false , 1 , 1 ) ;
6295: LD_INT 0
6297: PPUSH
6298: LD_INT 1
6300: PPUSH
6301: LD_INT 1
6303: PPUSH
6304: CALL_OW 380
// un := CreateHuman ;
6308: LD_ADDR_VAR 0 3
6312: PUSH
6313: CALL_OW 44
6317: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6318: LD_ADDR_EXP 51
6322: PUSH
6323: LD_EXP 51
6327: PUSH
6328: LD_VAR 0 3
6332: UNION
6333: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6334: LD_VAR 0 3
6338: PPUSH
6339: LD_VAR 0 2
6343: PPUSH
6344: CALL_OW 52
// end ;
6348: GO 6292
6350: POP
6351: POP
// for i := 1 to 3 do
6352: LD_ADDR_VAR 0 2
6356: PUSH
6357: DOUBLE
6358: LD_INT 1
6360: DEC
6361: ST_TO_ADDR
6362: LD_INT 3
6364: PUSH
6365: FOR_TO
6366: IFFALSE 6421
// begin PrepareHuman ( false , 2 , 2 ) ;
6368: LD_INT 0
6370: PPUSH
6371: LD_INT 2
6373: PPUSH
6374: LD_INT 2
6376: PPUSH
6377: CALL_OW 380
// un := CreateHuman ;
6381: LD_ADDR_VAR 0 3
6385: PUSH
6386: CALL_OW 44
6390: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6391: LD_ADDR_EXP 51
6395: PUSH
6396: LD_EXP 51
6400: PUSH
6401: LD_VAR 0 3
6405: UNION
6406: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6407: LD_VAR 0 3
6411: PPUSH
6412: LD_INT 64
6414: PPUSH
6415: CALL_OW 52
// end ;
6419: GO 6365
6421: POP
6422: POP
// for i := 1 to 2 do
6423: LD_ADDR_VAR 0 2
6427: PUSH
6428: DOUBLE
6429: LD_INT 1
6431: DEC
6432: ST_TO_ADDR
6433: LD_INT 2
6435: PUSH
6436: FOR_TO
6437: IFFALSE 6576
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6439: LD_INT 4
6441: PPUSH
6442: LD_INT 1
6444: PPUSH
6445: LD_INT 2
6447: PPUSH
6448: LD_INT 2
6450: PPUSH
6451: LD_INT 1
6453: PPUSH
6454: LD_INT 3
6456: PPUSH
6457: LD_INT 100
6459: PPUSH
6460: CALL 366 0 7
// un := CreateVehicle ;
6464: LD_ADDR_VAR 0 3
6468: PUSH
6469: CALL_OW 45
6473: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6474: LD_ADDR_EXP 51
6478: PUSH
6479: LD_EXP 51
6483: PUSH
6484: LD_VAR 0 3
6488: UNION
6489: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
6490: LD_VAR 0 3
6494: PPUSH
6495: LD_INT 28
6497: PPUSH
6498: LD_INT 37
6500: PPUSH
6501: LD_INT 6
6503: PPUSH
6504: LD_INT 0
6506: PPUSH
6507: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
6511: LD_INT 0
6513: PPUSH
6514: LD_INT 3
6516: PPUSH
6517: LD_INT 2
6519: PPUSH
6520: CALL_OW 380
// un := CreateHuman ;
6524: LD_ADDR_VAR 0 3
6528: PUSH
6529: CALL_OW 44
6533: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6534: LD_ADDR_EXP 51
6538: PUSH
6539: LD_EXP 51
6543: PUSH
6544: LD_VAR 0 3
6548: UNION
6549: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
6550: LD_VAR 0 3
6554: PPUSH
6555: LD_EXP 51
6559: PUSH
6560: LD_EXP 51
6564: PUSH
6565: LD_INT 1
6567: MINUS
6568: ARRAY
6569: PPUSH
6570: CALL_OW 52
// end ;
6574: GO 6436
6576: POP
6577: POP
// end ;
6578: LD_VAR 0 1
6582: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
6583: LD_INT 0
6585: PPUSH
6586: PPUSH
6587: PPUSH
6588: PPUSH
// uc_side := 4 ;
6589: LD_ADDR_OWVAR 20
6593: PUSH
6594: LD_INT 4
6596: ST_TO_ADDR
// uc_nation := 1 ;
6597: LD_ADDR_OWVAR 21
6601: PUSH
6602: LD_INT 1
6604: ST_TO_ADDR
// tmp := [ ] ;
6605: LD_ADDR_VAR 0 4
6609: PUSH
6610: EMPTY
6611: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
6612: LD_INT 4
6614: PPUSH
6615: LD_INT 1
6617: PPUSH
6618: LD_INT 2
6620: PPUSH
6621: LD_INT 1
6623: PPUSH
6624: LD_INT 1
6626: PPUSH
6627: LD_INT 4
6629: PPUSH
6630: LD_INT 77
6632: PPUSH
6633: CALL 366 0 7
// un := CreateVehicle ;
6637: LD_ADDR_VAR 0 3
6641: PUSH
6642: CALL_OW 45
6646: ST_TO_ADDR
// tmp := tmp union un ;
6647: LD_ADDR_VAR 0 4
6651: PUSH
6652: LD_VAR 0 4
6656: PUSH
6657: LD_VAR 0 3
6661: UNION
6662: ST_TO_ADDR
// SetDir ( un , 2 ) ;
6663: LD_VAR 0 3
6667: PPUSH
6668: LD_INT 2
6670: PPUSH
6671: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
6675: LD_VAR 0 3
6679: PPUSH
6680: LD_INT 106
6682: PPUSH
6683: LD_INT 3
6685: PPUSH
6686: LD_INT 0
6688: PPUSH
6689: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
6693: LD_INT 0
6695: PPUSH
6696: LD_INT 3
6698: PPUSH
6699: LD_INT 2
6701: PPUSH
6702: CALL_OW 380
// un := CreateHuman ;
6706: LD_ADDR_VAR 0 3
6710: PUSH
6711: CALL_OW 44
6715: ST_TO_ADDR
// tmp := tmp union un ;
6716: LD_ADDR_VAR 0 4
6720: PUSH
6721: LD_VAR 0 4
6725: PUSH
6726: LD_VAR 0 3
6730: UNION
6731: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
6732: LD_VAR 0 3
6736: PPUSH
6737: LD_VAR 0 4
6741: PUSH
6742: LD_VAR 0 4
6746: PUSH
6747: LD_INT 1
6749: MINUS
6750: ARRAY
6751: PPUSH
6752: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
6756: LD_VAR 0 3
6760: PPUSH
6761: LD_INT 109
6763: PPUSH
6764: LD_INT 9
6766: PPUSH
6767: CALL_OW 111
// wait ( 0 0$1 ) ;
6771: LD_INT 35
6773: PPUSH
6774: CALL_OW 67
// for i := 1 to 2 do
6778: LD_ADDR_VAR 0 2
6782: PUSH
6783: DOUBLE
6784: LD_INT 1
6786: DEC
6787: ST_TO_ADDR
6788: LD_INT 2
6790: PUSH
6791: FOR_TO
6792: IFFALSE 6856
// begin PrepareHuman ( false , 1 , 2 ) ;
6794: LD_INT 0
6796: PPUSH
6797: LD_INT 1
6799: PPUSH
6800: LD_INT 2
6802: PPUSH
6803: CALL_OW 380
// un := CreateHuman ;
6807: LD_ADDR_VAR 0 3
6811: PUSH
6812: CALL_OW 44
6816: ST_TO_ADDR
// tmp := tmp union un ;
6817: LD_ADDR_VAR 0 4
6821: PUSH
6822: LD_VAR 0 4
6826: PUSH
6827: LD_VAR 0 3
6831: UNION
6832: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
6833: LD_VAR 0 3
6837: PPUSH
6838: LD_INT 105
6840: PPUSH
6841: LD_INT 2
6843: PPUSH
6844: LD_INT 2
6846: PPUSH
6847: LD_INT 0
6849: PPUSH
6850: CALL_OW 50
// end ;
6854: GO 6791
6856: POP
6857: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
6858: LD_VAR 0 4
6862: PPUSH
6863: LD_INT 26
6865: PPUSH
6866: LD_INT 35
6868: PPUSH
6869: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
6873: LD_INT 35
6875: PPUSH
6876: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
6880: LD_VAR 0 4
6884: PPUSH
6885: LD_INT 50
6887: PUSH
6888: EMPTY
6889: LIST
6890: PPUSH
6891: CALL_OW 72
6895: NOT
6896: IFFALSE 6900
// exit ;
6898: GO 7027
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
6900: LD_VAR 0 4
6904: PPUSH
6905: LD_INT 91
6907: PUSH
6908: LD_INT 64
6910: PUSH
6911: LD_INT 12
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: LIST
6918: PPUSH
6919: CALL_OW 72
6923: PUSH
6924: LD_VAR 0 4
6928: EQUAL
6929: IFFALSE 6873
// omicronSquad := omicronSquad union tmp ;
6931: LD_ADDR_EXP 51
6935: PUSH
6936: LD_EXP 51
6940: PUSH
6941: LD_VAR 0 4
6945: UNION
6946: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
6947: LD_ADDR_VAR 0 2
6951: PUSH
6952: LD_VAR 0 4
6956: PPUSH
6957: LD_INT 25
6959: PUSH
6960: LD_INT 1
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: PPUSH
6967: CALL_OW 72
6971: PUSH
6972: FOR_IN
6973: IFFALSE 7025
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
6975: LD_VAR 0 2
6979: PPUSH
6980: LD_INT 22
6982: PUSH
6983: LD_INT 4
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: LD_INT 30
6992: PUSH
6993: LD_INT 4
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PPUSH
7004: CALL_OW 69
7008: PPUSH
7009: LD_VAR 0 2
7013: PPUSH
7014: CALL_OW 74
7018: PPUSH
7019: CALL_OW 120
7023: GO 6972
7025: POP
7026: POP
// end ;
7027: LD_VAR 0 1
7031: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7032: LD_EXP 13
7036: NOT
7037: IFFALSE 7608
7039: GO 7041
7041: DISABLE
7042: LD_INT 0
7044: PPUSH
7045: PPUSH
7046: PPUSH
7047: PPUSH
// begin enable ;
7048: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7049: LD_ADDR_VAR 0 2
7053: PUSH
7054: LD_INT 22
7056: PUSH
7057: LD_INT 4
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PUSH
7064: LD_INT 21
7066: PUSH
7067: LD_INT 3
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: PUSH
7074: LD_INT 3
7076: PUSH
7077: LD_INT 24
7079: PUSH
7080: LD_INT 1000
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: LIST
7095: PPUSH
7096: CALL_OW 69
7100: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7101: LD_ADDR_VAR 0 3
7105: PUSH
7106: LD_EXP 51
7110: PPUSH
7111: LD_INT 25
7113: PUSH
7114: LD_INT 2
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PPUSH
7121: CALL_OW 72
7125: ST_TO_ADDR
// if filter and tmp then
7126: LD_VAR 0 2
7130: PUSH
7131: LD_VAR 0 3
7135: AND
7136: IFFALSE 7209
// begin for i in tmp do
7138: LD_ADDR_VAR 0 1
7142: PUSH
7143: LD_VAR 0 3
7147: PUSH
7148: FOR_IN
7149: IFFALSE 7205
// if IsInUnit ( i ) then
7151: LD_VAR 0 1
7155: PPUSH
7156: CALL_OW 310
7160: IFFALSE 7173
// ComExitBuilding ( i ) else
7162: LD_VAR 0 1
7166: PPUSH
7167: CALL_OW 122
7171: GO 7203
// if not HasTask ( i ) then
7173: LD_VAR 0 1
7177: PPUSH
7178: CALL_OW 314
7182: NOT
7183: IFFALSE 7203
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7185: LD_VAR 0 1
7189: PPUSH
7190: LD_VAR 0 2
7194: PUSH
7195: LD_INT 1
7197: ARRAY
7198: PPUSH
7199: CALL_OW 130
7203: GO 7148
7205: POP
7206: POP
// end else
7207: GO 7280
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7209: LD_VAR 0 3
7213: PPUSH
7214: LD_INT 3
7216: PUSH
7217: LD_INT 54
7219: PUSH
7220: EMPTY
7221: LIST
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PPUSH
7227: CALL_OW 72
7231: IFFALSE 7280
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7233: LD_ADDR_VAR 0 1
7237: PUSH
7238: LD_VAR 0 3
7242: PPUSH
7243: LD_INT 3
7245: PUSH
7246: LD_INT 54
7248: PUSH
7249: EMPTY
7250: LIST
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PPUSH
7256: CALL_OW 72
7260: PUSH
7261: FOR_IN
7262: IFFALSE 7278
// ComEnterUnit ( i , omikron ) ;
7264: LD_VAR 0 1
7268: PPUSH
7269: LD_INT 64
7271: PPUSH
7272: CALL_OW 120
7276: GO 7261
7278: POP
7279: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7280: LD_ADDR_VAR 0 2
7284: PUSH
7285: LD_EXP 51
7289: PPUSH
7290: LD_INT 21
7292: PUSH
7293: LD_INT 2
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: PPUSH
7300: CALL_OW 72
7304: ST_TO_ADDR
// if not filter then
7305: LD_VAR 0 2
7309: NOT
7310: IFFALSE 7314
// exit ;
7312: GO 7608
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7314: LD_ADDR_VAR 0 4
7318: PUSH
7319: LD_INT 13
7321: PPUSH
7322: LD_INT 81
7324: PUSH
7325: LD_INT 4
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PPUSH
7332: CALL_OW 70
7336: ST_TO_ADDR
// if enemy then
7337: LD_VAR 0 4
7341: IFFALSE 7608
// begin for i in filter do
7343: LD_ADDR_VAR 0 1
7347: PUSH
7348: LD_VAR 0 2
7352: PUSH
7353: FOR_IN
7354: IFFALSE 7606
// begin tmp := IsDrivenBy ( i ) ;
7356: LD_ADDR_VAR 0 3
7360: PUSH
7361: LD_VAR 0 1
7365: PPUSH
7366: CALL_OW 311
7370: ST_TO_ADDR
// if not tmp then
7371: LD_VAR 0 3
7375: NOT
7376: IFFALSE 7380
// continue ;
7378: GO 7353
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7380: LD_VAR 0 1
7384: PPUSH
7385: CALL_OW 256
7389: PUSH
7390: LD_INT 600
7392: GREATEREQUAL
7393: PUSH
7394: LD_VAR 0 1
7398: PPUSH
7399: CALL_OW 110
7403: PUSH
7404: LD_INT 1
7406: NONEQUAL
7407: AND
7408: IFFALSE 7434
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7410: LD_VAR 0 1
7414: PPUSH
7415: LD_VAR 0 4
7419: PPUSH
7420: LD_VAR 0 1
7424: PPUSH
7425: CALL_OW 74
7429: PPUSH
7430: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7434: LD_VAR 0 1
7438: PPUSH
7439: CALL_OW 256
7443: PUSH
7444: LD_INT 600
7446: LESS
7447: PUSH
7448: LD_VAR 0 1
7452: PPUSH
7453: CALL_OW 110
7457: PUSH
7458: LD_INT 1
7460: NONEQUAL
7461: AND
7462: IFFALSE 7491
// begin SetTag ( i , 1 ) ;
7464: LD_VAR 0 1
7468: PPUSH
7469: LD_INT 1
7471: PPUSH
7472: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
7476: LD_VAR 0 1
7480: PPUSH
7481: LD_INT 27
7483: PPUSH
7484: LD_INT 35
7486: PPUSH
7487: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
7491: LD_VAR 0 1
7495: PPUSH
7496: CALL_OW 110
7500: PUSH
7501: LD_INT 1
7503: EQUAL
7504: PUSH
7505: LD_VAR 0 1
7509: PPUSH
7510: LD_INT 27
7512: PPUSH
7513: LD_INT 35
7515: PPUSH
7516: CALL_OW 297
7520: PUSH
7521: LD_INT 6
7523: LESS
7524: AND
7525: PUSH
7526: LD_VAR 0 3
7530: AND
7531: IFFALSE 7604
// begin ComExitVehicle ( tmp ) ;
7533: LD_VAR 0 3
7537: PPUSH
7538: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
7542: LD_VAR 0 3
7546: PPUSH
7547: LD_VAR 0 1
7551: PPUSH
7552: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
7556: LD_INT 35
7558: PPUSH
7559: CALL_OW 67
// until GetLives ( i ) = 1000 ;
7563: LD_VAR 0 1
7567: PPUSH
7568: CALL_OW 256
7572: PUSH
7573: LD_INT 1000
7575: EQUAL
7576: IFFALSE 7556
// ComEnterUnit ( tmp , i ) ;
7578: LD_VAR 0 3
7582: PPUSH
7583: LD_VAR 0 1
7587: PPUSH
7588: CALL_OW 120
// SetTag ( i , 0 ) ;
7592: LD_VAR 0 1
7596: PPUSH
7597: LD_INT 0
7599: PPUSH
7600: CALL_OW 109
// end ; end ;
7604: GO 7353
7606: POP
7607: POP
// end ; end ;
7608: PPOPN 4
7610: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
7611: LD_EXP 13
7615: IFFALSE 7759
7617: GO 7619
7619: DISABLE
7620: LD_INT 0
7622: PPUSH
7623: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
7624: LD_ADDR_VAR 0 2
7628: PUSH
7629: LD_EXP 51
7633: PPUSH
7634: LD_INT 21
7636: PUSH
7637: LD_INT 1
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: PUSH
7644: LD_INT 50
7646: PUSH
7647: EMPTY
7648: LIST
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: PPUSH
7654: CALL_OW 72
7658: ST_TO_ADDR
// if not tmp then
7659: LD_VAR 0 2
7663: NOT
7664: IFFALSE 7668
// exit ;
7666: GO 7759
// repeat wait ( 0 0$1 ) ;
7668: LD_INT 35
7670: PPUSH
7671: CALL_OW 67
// for i in tmp do
7675: LD_ADDR_VAR 0 1
7679: PUSH
7680: LD_VAR 0 2
7684: PUSH
7685: FOR_IN
7686: IFFALSE 7750
// begin ComExit ( i ) ;
7688: LD_VAR 0 1
7692: PPUSH
7693: CALL 70706 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
7697: LD_VAR 0 1
7701: PPUSH
7702: LD_INT 14
7704: PPUSH
7705: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
7709: LD_VAR 0 1
7713: PPUSH
7714: LD_INT 14
7716: PPUSH
7717: CALL_OW 308
7721: IFFALSE 7748
// begin tmp := tmp diff i ;
7723: LD_ADDR_VAR 0 2
7727: PUSH
7728: LD_VAR 0 2
7732: PUSH
7733: LD_VAR 0 1
7737: DIFF
7738: ST_TO_ADDR
// RemoveUnit ( i ) ;
7739: LD_VAR 0 1
7743: PPUSH
7744: CALL_OW 64
// end ; end ;
7748: GO 7685
7750: POP
7751: POP
// until not tmp ;
7752: LD_VAR 0 2
7756: NOT
7757: IFFALSE 7668
// end ; end_of_file
7759: PPOPN 2
7761: END
// export function Action ; var i , un , veh , tmp ; begin
7762: LD_INT 0
7764: PPUSH
7765: PPUSH
7766: PPUSH
7767: PPUSH
7768: PPUSH
// InGameOn ;
7769: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
7773: LD_INT 179
7775: PPUSH
7776: LD_INT 5
7778: PPUSH
7779: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
7783: LD_ADDR_VAR 0 4
7787: PUSH
7788: LD_INT 2
7790: PPUSH
7791: LD_INT 2
7793: PPUSH
7794: LD_INT 12
7796: PPUSH
7797: LD_INT 1
7799: PPUSH
7800: LD_INT 1
7802: PPUSH
7803: LD_INT 24
7805: PPUSH
7806: LD_INT 33
7808: PPUSH
7809: CALL 366 0 7
7813: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
7814: LD_VAR 0 4
7818: PPUSH
7819: LD_INT 2
7821: PPUSH
7822: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
7826: LD_VAR 0 4
7830: PPUSH
7831: LD_INT 178
7833: PPUSH
7834: LD_INT 2
7836: PPUSH
7837: LD_INT 0
7839: PPUSH
7840: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
7844: LD_EXP 25
7848: PPUSH
7849: LD_VAR 0 4
7853: PPUSH
7854: CALL_OW 52
// if Kamil then
7858: LD_EXP 29
7862: IFFALSE 7897
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
7864: LD_EXP 29
7868: PPUSH
7869: LD_INT 207
7871: PPUSH
7872: LD_INT 37
7874: PPUSH
7875: LD_INT 0
7877: PPUSH
7878: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
7882: LD_EXP 29
7886: PPUSH
7887: LD_INT 211
7889: PPUSH
7890: LD_INT 38
7892: PPUSH
7893: CALL_OW 118
// end ; if Sophia then
7897: LD_EXP 31
7901: IFFALSE 7936
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
7903: LD_EXP 31
7907: PPUSH
7908: LD_INT 209
7910: PPUSH
7911: LD_INT 40
7913: PPUSH
7914: LD_INT 0
7916: PPUSH
7917: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
7921: LD_EXP 31
7925: PPUSH
7926: LD_INT 211
7928: PPUSH
7929: LD_INT 38
7931: PPUSH
7932: CALL_OW 118
// end ; if Givi then
7936: LD_EXP 26
7940: IFFALSE 7975
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
7942: LD_EXP 26
7946: PPUSH
7947: LD_INT 201
7949: PPUSH
7950: LD_INT 34
7952: PPUSH
7953: LD_INT 0
7955: PPUSH
7956: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
7960: LD_EXP 26
7964: PPUSH
7965: LD_INT 206
7967: PPUSH
7968: LD_INT 36
7970: PPUSH
7971: CALL_OW 118
// end ; if Ibrahim then
7975: LD_EXP 28
7979: IFFALSE 8014
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
7981: LD_EXP 28
7985: PPUSH
7986: LD_INT 202
7988: PPUSH
7989: LD_INT 39
7991: PPUSH
7992: LD_INT 0
7994: PPUSH
7995: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
7999: LD_EXP 28
8003: PPUSH
8004: LD_INT 206
8006: PPUSH
8007: LD_INT 36
8009: PPUSH
8010: CALL_OW 118
// end ; if Markov then
8014: LD_EXP 32
8018: IFFALSE 8105
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8020: LD_ADDR_VAR 0 4
8024: PUSH
8025: LD_INT 2
8027: PPUSH
8028: LD_INT 2
8030: PPUSH
8031: LD_INT 13
8033: PPUSH
8034: LD_INT 1
8036: PPUSH
8037: LD_INT 1
8039: PPUSH
8040: LD_INT 25
8042: PPUSH
8043: LD_INT 80
8045: PUSH
8046: LD_INT 20
8048: PUSH
8049: LD_OWVAR 67
8053: MUL
8054: MINUS
8055: PPUSH
8056: CALL 366 0 7
8060: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8061: LD_VAR 0 4
8065: PPUSH
8066: LD_INT 2
8068: PPUSH
8069: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8073: LD_VAR 0 4
8077: PPUSH
8078: LD_INT 197
8080: PPUSH
8081: LD_INT 35
8083: PPUSH
8084: LD_INT 0
8086: PPUSH
8087: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8091: LD_EXP 32
8095: PPUSH
8096: LD_VAR 0 4
8100: PPUSH
8101: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8105: LD_ADDR_VAR 0 5
8109: PUSH
8110: LD_EXP 30
8114: PUSH
8115: LD_EXP 37
8119: UNION
8120: ST_TO_ADDR
// for i in tmp do
8121: LD_ADDR_VAR 0 2
8125: PUSH
8126: LD_VAR 0 5
8130: PUSH
8131: FOR_IN
8132: IFFALSE 8166
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8134: LD_VAR 0 2
8138: PPUSH
8139: LD_INT 203
8141: PPUSH
8142: LD_INT 41
8144: PPUSH
8145: LD_INT 6
8147: PPUSH
8148: LD_INT 0
8150: PPUSH
8151: CALL_OW 50
// ComHold ( i ) ;
8155: LD_VAR 0 2
8159: PPUSH
8160: CALL_OW 140
// end ;
8164: GO 8131
8166: POP
8167: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8168: LD_INT 22
8170: PUSH
8171: LD_INT 2
8173: PUSH
8174: EMPTY
8175: LIST
8176: LIST
8177: PUSH
8178: LD_INT 25
8180: PUSH
8181: LD_INT 2
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: PUSH
8188: EMPTY
8189: LIST
8190: LIST
8191: PPUSH
8192: CALL_OW 69
8196: NOT
8197: IFFALSE 8211
// SetClass ( Heike , 2 ) ;
8199: LD_EXP 25
8203: PPUSH
8204: LD_INT 2
8206: PPUSH
8207: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8211: LD_EXP 25
8215: PPUSH
8216: LD_INT 183
8218: PPUSH
8219: LD_INT 12
8221: PPUSH
8222: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8226: LD_EXP 25
8230: PPUSH
8231: LD_INT 188
8233: PPUSH
8234: LD_INT 20
8236: PPUSH
8237: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8241: LD_EXP 25
8245: PPUSH
8246: LD_INT 191
8248: PPUSH
8249: LD_INT 25
8251: PPUSH
8252: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8256: LD_EXP 25
8260: PPUSH
8261: LD_INT 203
8263: PPUSH
8264: LD_INT 29
8266: PPUSH
8267: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8271: LD_EXP 25
8275: PPUSH
8276: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8280: LD_INT 35
8282: PPUSH
8283: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8287: LD_EXP 25
8291: PPUSH
8292: CALL_OW 310
8296: NOT
8297: IFFALSE 8280
// CenterOnUnits ( Heike ) ;
8299: LD_EXP 25
8303: PPUSH
8304: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8308: LD_ADDR_VAR 0 5
8312: PUSH
8313: LD_INT 22
8315: PUSH
8316: LD_INT 2
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: PUSH
8323: LD_INT 21
8325: PUSH
8326: LD_INT 1
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: PPUSH
8337: CALL_OW 69
8341: PUSH
8342: LD_EXP 25
8346: PUSH
8347: LD_EXP 32
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: DIFF
8356: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8357: LD_VAR 0 5
8361: PPUSH
8362: LD_EXP 25
8366: PPUSH
8367: CALL_OW 119
// if Givi then
8371: LD_EXP 26
8375: IFFALSE 8393
// ComTurnUnit ( Heike , Givi ) else
8377: LD_EXP 25
8381: PPUSH
8382: LD_EXP 26
8386: PPUSH
8387: CALL_OW 119
8391: GO 8411
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8393: LD_EXP 25
8397: PPUSH
8398: LD_VAR 0 5
8402: PUSH
8403: LD_INT 1
8405: ARRAY
8406: PPUSH
8407: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8411: LD_EXP 25
8415: PPUSH
8416: LD_STRING DH-Start-1
8418: PPUSH
8419: CALL_OW 88
// if Givi then
8423: LD_EXP 26
8427: IFFALSE 8474
// begin Say ( Givi , DG-Start-2 ) ;
8429: LD_EXP 26
8433: PPUSH
8434: LD_STRING DG-Start-2
8436: PPUSH
8437: CALL_OW 88
// if not Mike then
8441: LD_EXP 27
8445: NOT
8446: IFFALSE 8472
// begin Say ( Givi , DG-Start-b-3 ) ;
8448: LD_EXP 26
8452: PPUSH
8453: LD_STRING DG-Start-b-3
8455: PPUSH
8456: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
8460: LD_EXP 25
8464: PPUSH
8465: LD_STRING DH-Start-b-4
8467: PPUSH
8468: CALL_OW 88
// end ; end else
8472: GO 8539
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
8474: LD_EXP 37
8478: PPUSH
8479: LD_INT 26
8481: PUSH
8482: LD_INT 1
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PPUSH
8489: CALL_OW 72
8493: PUSH
8494: LD_INT 1
8496: ARRAY
8497: PPUSH
8498: LD_STRING DArm-Start-a-2
8500: PPUSH
8501: CALL_OW 88
8505: NOT
8506: IFFALSE 8539
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
8508: LD_EXP 37
8512: PPUSH
8513: LD_INT 26
8515: PUSH
8516: LD_INT 2
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PPUSH
8523: CALL_OW 72
8527: PUSH
8528: LD_INT 1
8530: ARRAY
8531: PPUSH
8532: LD_STRING DArf-Start-a-2
8534: PPUSH
8535: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
8539: LD_EXP 25
8543: PPUSH
8544: LD_INT 211
8546: PPUSH
8547: LD_INT 38
8549: PPUSH
8550: CALL_OW 118
// wait ( 0 0$1 ) ;
8554: LD_INT 35
8556: PPUSH
8557: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
8561: LD_EXP 25
8565: PPUSH
8566: LD_STRING DH-Start-3
8568: PPUSH
8569: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8573: LD_EXP 25
8577: PPUSH
8578: LD_STRING DH-Start-4
8580: PPUSH
8581: CALL_OW 88
// InGameOff ;
8585: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
8589: LD_STRING Prepare
8591: PPUSH
8592: CALL_OW 337
// SaveForQuickRestart ;
8596: CALL_OW 22
// wait ( 0 0$10 ) ;
8600: LD_INT 350
8602: PPUSH
8603: CALL_OW 67
// if not Aviradze then
8607: LD_EXP 35
8611: NOT
8612: IFFALSE 8616
// exit ;
8614: GO 8856
// SetDir ( Aviradze , 4 ) ;
8616: LD_EXP 35
8620: PPUSH
8621: LD_INT 4
8623: PPUSH
8624: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
8628: LD_EXP 35
8632: PPUSH
8633: LD_INT 225
8635: PPUSH
8636: LD_INT 33
8638: PPUSH
8639: LD_INT 0
8641: PPUSH
8642: CALL_OW 48
// for i := 1 to 2 do
8646: LD_ADDR_VAR 0 2
8650: PUSH
8651: DOUBLE
8652: LD_INT 1
8654: DEC
8655: ST_TO_ADDR
8656: LD_INT 2
8658: PUSH
8659: FOR_TO
8660: IFFALSE 8791
// begin uc_side := 2 ;
8662: LD_ADDR_OWVAR 20
8666: PUSH
8667: LD_INT 2
8669: ST_TO_ADDR
// uc_nation := 0 ;
8670: LD_ADDR_OWVAR 21
8674: PUSH
8675: LD_INT 0
8677: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
8678: LD_INT 0
8680: PPUSH
8681: LD_INT 12
8683: PPUSH
8684: LD_INT 1
8686: PPUSH
8687: CALL_OW 380
// hc_gallery :=  ;
8691: LD_ADDR_OWVAR 33
8695: PUSH
8696: LD_STRING 
8698: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
8699: LD_ADDR_OWVAR 26
8703: PUSH
8704: LD_STRING Artudito
8706: PUSH
8707: LD_STRING Textur
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: PUSH
8714: LD_VAR 0 2
8718: ARRAY
8719: ST_TO_ADDR
// un := CreateHuman ;
8720: LD_ADDR_VAR 0 3
8724: PUSH
8725: CALL_OW 44
8729: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
8730: LD_VAR 0 3
8734: PPUSH
8735: LD_INT 224
8737: PUSH
8738: LD_INT 226
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PUSH
8745: LD_VAR 0 2
8749: ARRAY
8750: PPUSH
8751: LD_INT 31
8753: PUSH
8754: LD_INT 35
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: PUSH
8761: LD_VAR 0 2
8765: ARRAY
8766: PPUSH
8767: LD_INT 0
8769: PPUSH
8770: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
8774: LD_VAR 0 3
8778: PPUSH
8779: LD_INT 215
8781: PPUSH
8782: LD_INT 36
8784: PPUSH
8785: CALL_OW 111
// end ;
8789: GO 8659
8791: POP
8792: POP
// hc_name :=  ;
8793: LD_ADDR_OWVAR 26
8797: PUSH
8798: LD_STRING 
8800: ST_TO_ADDR
// InitHc ;
8801: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
8805: LD_EXP 35
8809: PPUSH
8810: LD_INT 215
8812: PPUSH
8813: LD_INT 36
8815: PPUSH
8816: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
8820: LD_EXP 35
8824: PPUSH
8825: LD_STRING DA-Arrive-1
8827: PPUSH
8828: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
8832: LD_EXP 25
8836: PPUSH
8837: LD_STRING DH-Arrive-2
8839: PPUSH
8840: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
8844: LD_EXP 35
8848: PPUSH
8849: LD_STRING DA-Arrive-3
8851: PPUSH
8852: CALL_OW 88
// end ;
8856: LD_VAR 0 1
8860: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
8861: LD_EXP 3
8865: IFFALSE 10254
8867: GO 8869
8869: DISABLE
8870: LD_INT 0
8872: PPUSH
8873: PPUSH
8874: PPUSH
// begin DialogueOn ;
8875: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
8879: LD_EXP 25
8883: PPUSH
8884: LD_STRING DH-base-1
8886: PPUSH
8887: CALL_OW 88
// if Markov then
8891: LD_EXP 32
8895: IFFALSE 8947
// begin Say ( Markov , DMar-base-2 ) ;
8897: LD_EXP 32
8901: PPUSH
8902: LD_STRING DMar-base-2
8904: PPUSH
8905: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
8909: LD_EXP 32
8913: PPUSH
8914: LD_STRING DMar-base-3
8916: PPUSH
8917: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
8921: LD_EXP 25
8925: PPUSH
8926: LD_STRING DH-base-4
8928: PPUSH
8929: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
8933: LD_EXP 32
8937: PPUSH
8938: LD_STRING DMar-base-5
8940: PPUSH
8941: CALL_OW 88
// end else
8945: GO 9024
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
8947: LD_EXP 37
8951: PPUSH
8952: LD_INT 26
8954: PUSH
8955: LD_INT 1
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: PPUSH
8962: CALL_OW 72
8966: PUSH
8967: LD_INT 1
8969: ARRAY
8970: PPUSH
8971: LD_STRING DArm-base-a-2
8973: PPUSH
8974: CALL_OW 88
8978: NOT
8979: IFFALSE 9012
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
8981: LD_EXP 37
8985: PPUSH
8986: LD_INT 26
8988: PUSH
8989: LD_INT 2
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: PPUSH
8996: CALL_OW 72
9000: PUSH
9001: LD_INT 1
9003: ARRAY
9004: PPUSH
9005: LD_STRING DArf-base-a-2
9007: PPUSH
9008: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9012: LD_EXP 25
9016: PPUSH
9017: LD_STRING DH-base-a-3
9019: PPUSH
9020: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9024: LD_EXP 35
9028: PPUSH
9029: LD_STRING DA-base-6
9031: PPUSH
9032: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9036: LD_EXP 35
9040: PPUSH
9041: LD_STRING DA-base-7
9043: PPUSH
9044: CALL_OW 88
// DialogueOff ;
9048: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9052: LD_STRING Flamethrower
9054: PPUSH
9055: CALL_OW 337
// wait ( 2 2$00 ) ;
9059: LD_INT 4200
9061: PPUSH
9062: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9066: LD_EXP 34
9070: PUSH
9071: LD_EXP 27
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: PPUSH
9080: LD_INT 203
9082: PPUSH
9083: LD_INT 37
9085: PPUSH
9086: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9090: LD_INT 22
9092: PUSH
9093: LD_INT 2
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PUSH
9100: LD_INT 92
9102: PUSH
9103: LD_INT 203
9105: PUSH
9106: LD_INT 37
9108: PUSH
9109: LD_INT 10
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: PUSH
9118: EMPTY
9119: LIST
9120: LIST
9121: PPUSH
9122: CALL_OW 69
9126: NOT
9127: IFFALSE 9167
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9129: LD_EXP 34
9133: PUSH
9134: LD_EXP 27
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PPUSH
9143: LD_EXP 25
9147: PPUSH
9148: CALL_OW 250
9152: PPUSH
9153: LD_EXP 25
9157: PPUSH
9158: CALL_OW 251
9162: PPUSH
9163: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9167: LD_INT 35
9169: PPUSH
9170: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9174: LD_INT 2
9176: PPUSH
9177: LD_EXP 34
9181: PPUSH
9182: CALL_OW 292
9186: PUSH
9187: LD_EXP 34
9191: PPUSH
9192: LD_EXP 25
9196: PPUSH
9197: CALL_OW 296
9201: PUSH
9202: LD_INT 8
9204: LESS
9205: PUSH
9206: LD_EXP 34
9210: PPUSH
9211: LD_INT 22
9213: PUSH
9214: LD_INT 2
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PUSH
9221: LD_INT 21
9223: PUSH
9224: LD_INT 3
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: PPUSH
9235: CALL_OW 69
9239: PPUSH
9240: LD_EXP 34
9244: PPUSH
9245: CALL_OW 74
9249: PPUSH
9250: CALL_OW 296
9254: PUSH
9255: LD_INT 7
9257: LESS
9258: OR
9259: AND
9260: PUSH
9261: LD_EXP 34
9265: PPUSH
9266: LD_INT 10
9268: PPUSH
9269: CALL_OW 308
9273: NOT
9274: AND
9275: IFFALSE 9167
// InGameOn ;
9277: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9281: LD_EXP 34
9285: PPUSH
9286: CALL_OW 87
// if IsInUnit ( Heike ) then
9290: LD_EXP 25
9294: PPUSH
9295: CALL_OW 310
9299: IFFALSE 9310
// ComExitBuilding ( Heike ) ;
9301: LD_EXP 25
9305: PPUSH
9306: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9310: LD_EXP 34
9314: PUSH
9315: LD_EXP 27
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PPUSH
9324: LD_EXP 25
9328: PPUSH
9329: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9333: LD_EXP 25
9337: PPUSH
9338: LD_EXP 34
9342: PPUSH
9343: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9347: LD_INT 22
9349: PUSH
9350: LD_INT 2
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: PUSH
9357: LD_INT 91
9359: PUSH
9360: LD_EXP 34
9364: PUSH
9365: LD_INT 10
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: LIST
9372: PUSH
9373: LD_INT 21
9375: PUSH
9376: LD_INT 3
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: LIST
9387: PPUSH
9388: CALL_OW 69
9392: IFFALSE 9418
// begin Say ( Kurt , DKs-scout-1 ) ;
9394: LD_EXP 34
9398: PPUSH
9399: LD_STRING DKs-scout-1
9401: PPUSH
9402: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9406: LD_EXP 25
9410: PPUSH
9411: LD_STRING DH-scout-2
9413: PPUSH
9414: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
9418: LD_EXP 25
9422: PPUSH
9423: CALL_OW 85
// if IsInUnit ( Heike ) then
9427: LD_EXP 25
9431: PPUSH
9432: CALL_OW 310
9436: IFFALSE 9447
// ComExit ( Heike ) ;
9438: LD_EXP 25
9442: PPUSH
9443: CALL 70706 0 1
// repeat wait ( 0 0$1 ) ;
9447: LD_INT 35
9449: PPUSH
9450: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
9454: LD_EXP 25
9458: PPUSH
9459: LD_EXP 34
9463: PPUSH
9464: CALL_OW 112
// until GetDistUnits ( Heike , Kurt ) < 6 ;
9468: LD_EXP 25
9472: PPUSH
9473: LD_EXP 34
9477: PPUSH
9478: CALL_OW 296
9482: PUSH
9483: LD_INT 6
9485: LESS
9486: IFFALSE 9447
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
9488: LD_EXP 34
9492: PUSH
9493: LD_EXP 27
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: PPUSH
9502: LD_EXP 25
9506: PPUSH
9507: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
9511: LD_EXP 34
9515: PPUSH
9516: LD_STRING DKs-scout-3
9518: PPUSH
9519: CALL_OW 88
// if Kaia and GetDistUnits ( Kaia , Kurt ) < 15 then
9523: LD_EXP 30
9527: PUSH
9528: LD_EXP 30
9532: PPUSH
9533: LD_EXP 34
9537: PPUSH
9538: CALL_OW 296
9542: PUSH
9543: LD_INT 15
9545: LESS
9546: AND
9547: IFFALSE 9737
// begin if IsInUnit ( Kaia ) then
9549: LD_EXP 30
9553: PPUSH
9554: CALL_OW 310
9558: IFFALSE 9569
// ComExitBuilding ( Kaia ) ;
9560: LD_EXP 30
9564: PPUSH
9565: CALL_OW 122
// wait ( 0 0$1 ) ;
9569: LD_INT 35
9571: PPUSH
9572: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
9576: LD_EXP 30
9580: PPUSH
9581: LD_EXP 34
9585: PPUSH
9586: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
9590: LD_INT 35
9592: PPUSH
9593: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
9597: LD_EXP 30
9601: PPUSH
9602: LD_EXP 34
9606: PPUSH
9607: CALL_OW 296
9611: PUSH
9612: LD_INT 6
9614: LESS
9615: IFFALSE 9590
// ComTurnUnit ( Kaia , Kurt ) ;
9617: LD_EXP 30
9621: PPUSH
9622: LD_EXP 34
9626: PPUSH
9627: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
9631: LD_EXP 30
9635: PPUSH
9636: LD_STRING DK-scout-4
9638: PPUSH
9639: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
9643: LD_EXP 34
9647: PPUSH
9648: LD_EXP 30
9652: PPUSH
9653: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
9657: LD_EXP 34
9661: PPUSH
9662: LD_STRING DKs-scout-5
9664: PPUSH
9665: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
9669: LD_EXP 30
9673: PPUSH
9674: LD_STRING DK-scout-6
9676: PPUSH
9677: CALL_OW 88
// if Mike then
9681: LD_EXP 27
9685: IFFALSE 9737
// begin Say ( Mike , DM-scout-7 ) ;
9687: LD_EXP 27
9691: PPUSH
9692: LD_STRING DM-scout-7
9694: PPUSH
9695: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
9699: LD_EXP 30
9703: PPUSH
9704: LD_EXP 27
9708: PPUSH
9709: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
9713: LD_EXP 30
9717: PPUSH
9718: LD_STRING DK-scout-8
9720: PPUSH
9721: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
9725: LD_EXP 27
9729: PPUSH
9730: LD_STRING DM-scout-9
9732: PPUSH
9733: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
9737: LD_INT 184
9739: PPUSH
9740: LD_INT 100
9742: PPUSH
9743: LD_INT 2
9745: PPUSH
9746: LD_INT 12
9748: NEG
9749: PPUSH
9750: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
9754: LD_INT 184
9756: PPUSH
9757: LD_INT 100
9759: PPUSH
9760: LD_INT 2
9762: PPUSH
9763: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
9767: LD_INT 184
9769: PPUSH
9770: LD_INT 100
9772: PPUSH
9773: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
9777: LD_EXP 34
9781: PPUSH
9782: LD_STRING DKs-scout-10
9784: PPUSH
9785: CALL_OW 88
// wait ( 0 0$1 ) ;
9789: LD_INT 35
9791: PPUSH
9792: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
9796: LD_INT 144
9798: PPUSH
9799: LD_INT 65
9801: PPUSH
9802: LD_INT 2
9804: PPUSH
9805: LD_INT 12
9807: NEG
9808: PPUSH
9809: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
9813: LD_INT 144
9815: PPUSH
9816: LD_INT 65
9818: PPUSH
9819: LD_INT 2
9821: PPUSH
9822: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
9826: LD_INT 144
9828: PPUSH
9829: LD_INT 65
9831: PPUSH
9832: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
9836: LD_EXP 34
9840: PPUSH
9841: LD_STRING DKs-scout-11
9843: PPUSH
9844: CALL_OW 88
// wait ( 0 0$1 ) ;
9848: LD_INT 35
9850: PPUSH
9851: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
9855: LD_EXP 34
9859: PPUSH
9860: CALL_OW 87
// if Mike and not Givi then
9864: LD_EXP 27
9868: PUSH
9869: LD_EXP 26
9873: NOT
9874: AND
9875: IFFALSE 9901
// begin Say ( Mike , DM-scout-a-1 ) ;
9877: LD_EXP 27
9881: PPUSH
9882: LD_STRING DM-scout-a-1
9884: PPUSH
9885: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
9889: LD_EXP 25
9893: PPUSH
9894: LD_STRING DH-scout-a-2
9896: PPUSH
9897: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
9901: LD_EXP 34
9905: PUSH
9906: LD_EXP 27
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: PPUSH
9915: LD_INT 2
9917: PPUSH
9918: CALL_OW 235
// InGameOff ;
9922: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
9926: LD_STRING Hill
9928: PPUSH
9929: CALL_OW 337
// SetAreaMapShow ( dontGoArea , 1 ) ;
9933: LD_INT 20
9935: PPUSH
9936: LD_INT 1
9938: PPUSH
9939: CALL_OW 424
// allowToPatrol := true ;
9943: LD_ADDR_EXP 12
9947: PUSH
9948: LD_INT 1
9950: ST_TO_ADDR
// wait ( 1 1$30 ) ;
9951: LD_INT 3150
9953: PPUSH
9954: CALL_OW 67
// InitHc ;
9958: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 ] [ Difficulty ] do
9962: LD_ADDR_VAR 0 1
9966: PUSH
9967: DOUBLE
9968: LD_INT 1
9970: DEC
9971: ST_TO_ADDR
9972: LD_INT 3
9974: PUSH
9975: LD_INT 3
9977: PUSH
9978: LD_INT 2
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: LIST
9985: PUSH
9986: LD_OWVAR 67
9990: ARRAY
9991: PUSH
9992: FOR_TO
9993: IFFALSE 10252
// begin uc_side := 2 ;
9995: LD_ADDR_OWVAR 20
9999: PUSH
10000: LD_INT 2
10002: ST_TO_ADDR
// uc_nation := 2 ;
10003: LD_ADDR_OWVAR 21
10007: PUSH
10008: LD_INT 2
10010: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 ] [ Difficulty ] ) ;
10011: LD_INT 0
10013: PPUSH
10014: LD_INT 1
10016: PUSH
10017: LD_INT 3
10019: PUSH
10020: LD_INT 1
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: LIST
10027: PUSH
10028: LD_VAR 0 1
10032: PUSH
10033: LD_INT 3
10035: MOD
10036: PUSH
10037: LD_INT 1
10039: PLUS
10040: ARRAY
10041: PPUSH
10042: LD_INT 3
10044: PUSH
10045: LD_INT 2
10047: PUSH
10048: LD_INT 2
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: LIST
10055: PUSH
10056: LD_OWVAR 67
10060: ARRAY
10061: PPUSH
10062: CALL_OW 380
// un := CreateHuman ;
10066: LD_ADDR_VAR 0 2
10070: PUSH
10071: CALL_OW 44
10075: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10076: LD_ADDR_EXP 37
10080: PUSH
10081: LD_EXP 37
10085: PUSH
10086: LD_VAR 0 2
10090: UNION
10091: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10092: LD_INT 2
10094: PPUSH
10095: LD_INT 2
10097: PPUSH
10098: LD_INT 13
10100: PPUSH
10101: LD_INT 2
10103: PUSH
10104: LD_INT 1
10106: PUSH
10107: EMPTY
10108: LIST
10109: LIST
10110: PUSH
10111: LD_VAR 0 1
10115: PUSH
10116: LD_INT 2
10118: MOD
10119: PUSH
10120: LD_INT 1
10122: PLUS
10123: ARRAY
10124: PPUSH
10125: LD_INT 1
10127: PPUSH
10128: LD_INT 27
10130: PUSH
10131: LD_INT 25
10133: PUSH
10134: LD_INT 27
10136: PUSH
10137: LD_INT 23
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: PUSH
10146: LD_OWVAR 67
10150: PUSH
10151: LD_INT 0
10153: PPUSH
10154: LD_INT 1
10156: PPUSH
10157: CALL_OW 12
10161: PLUS
10162: ARRAY
10163: PPUSH
10164: LD_INT 77
10166: PPUSH
10167: CALL 366 0 7
// veh := CreateVehicle ;
10171: LD_ADDR_VAR 0 3
10175: PUSH
10176: CALL_OW 45
10180: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10181: LD_VAR 0 3
10185: PPUSH
10186: LD_INT 2
10188: PPUSH
10189: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10193: LD_VAR 0 3
10197: PPUSH
10198: LD_INT 178
10200: PPUSH
10201: LD_INT 2
10203: PPUSH
10204: LD_INT 2
10206: PPUSH
10207: LD_INT 0
10209: PPUSH
10210: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10214: LD_VAR 0 2
10218: PPUSH
10219: LD_VAR 0 3
10223: PPUSH
10224: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10228: LD_VAR 0 2
10232: PPUSH
10233: LD_INT 183
10235: PPUSH
10236: LD_INT 11
10238: PPUSH
10239: CALL_OW 111
// wait ( 0 0$2 ) ;
10243: LD_INT 70
10245: PPUSH
10246: CALL_OW 67
// end ;
10250: GO 9992
10252: POP
10253: POP
// end ;
10254: PPOPN 3
10256: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10257: LD_EXP 4
10261: PUSH
10262: LD_EXP 35
10266: PPUSH
10267: CALL_OW 302
10271: AND
10272: IFFALSE 10321
10274: GO 10276
10276: DISABLE
// begin DialogueOn ;
10277: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10281: LD_EXP 35
10285: PPUSH
10286: LD_STRING DA-lab-1
10288: PPUSH
10289: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10293: LD_EXP 35
10297: PPUSH
10298: LD_STRING DA-lab-2
10300: PPUSH
10301: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10305: LD_EXP 25
10309: PPUSH
10310: LD_STRING DH-lab-3
10312: PPUSH
10313: CALL_OW 88
// DialogueOff ;
10317: CALL_OW 7
// end ;
10321: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10322: LD_INT 17
10324: PPUSH
10325: LD_INT 2
10327: PPUSH
10328: CALL_OW 321
10332: PUSH
10333: LD_INT 2
10335: EQUAL
10336: IFFALSE 10468
10338: GO 10340
10340: DISABLE
10341: LD_INT 0
10343: PPUSH
// begin DialogueOn ;
10344: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10348: LD_EXP 35
10352: PPUSH
10353: LD_STRING DA-Cam-1
10355: PPUSH
10356: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10360: LD_EXP 35
10364: PPUSH
10365: LD_STRING DA-Cam-2
10367: PPUSH
10368: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10372: LD_EXP 35
10376: PPUSH
10377: LD_STRING DA-Cam-3
10379: PPUSH
10380: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10384: LD_EXP 25
10388: PPUSH
10389: LD_STRING DH-Cam-4
10391: PPUSH
10392: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
10396: LD_EXP 30
10400: PPUSH
10401: LD_STRING DK-Cam-5
10403: PPUSH
10404: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
10408: LD_EXP 30
10412: PPUSH
10413: LD_STRING DK-Cam-6
10415: PPUSH
10416: CALL_OW 88
// DialogueOff ;
10420: CALL_OW 7
// Query ( Camera ) ;
10424: LD_STRING Camera
10426: PPUSH
10427: CALL_OW 97
// hiddenCameraAllowed := true ;
10431: LD_ADDR_EXP 5
10435: PUSH
10436: LD_INT 1
10438: ST_TO_ADDR
// for i in camAreas do
10439: LD_ADDR_VAR 0 1
10443: PUSH
10444: LD_EXP 8
10448: PUSH
10449: FOR_IN
10450: IFFALSE 10466
// SetAreaMapShow ( i , 1 ) ;
10452: LD_VAR 0 1
10456: PPUSH
10457: LD_INT 1
10459: PPUSH
10460: CALL_OW 424
10464: GO 10449
10466: POP
10467: POP
// end ;
10468: PPOPN 1
10470: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
10471: LD_EXP 8
10475: NOT
10476: PUSH
10477: LD_EXP 5
10481: AND
10482: IFFALSE 10580
10484: GO 10486
10486: DISABLE
10487: LD_INT 0
10489: PPUSH
// begin stop_talking := true ;
10490: LD_ADDR_OWVAR 56
10494: PUSH
10495: LD_INT 1
10497: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
10498: LD_ADDR_VAR 0 1
10502: PUSH
10503: LD_INT 22
10505: PUSH
10506: LD_INT 2
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 21
10515: PUSH
10516: LD_INT 1
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: LD_INT 23
10525: PUSH
10526: LD_INT 2
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: LIST
10537: PPUSH
10538: CALL_OW 69
10542: PUSH
10543: FOR_IN
10544: IFFALSE 10563
// AddExperience ( i , 2 , 450 ) ;
10546: LD_VAR 0 1
10550: PPUSH
10551: LD_INT 2
10553: PPUSH
10554: LD_INT 450
10556: PPUSH
10557: CALL_OW 492
10561: GO 10543
10563: POP
10564: POP
// stop_talking := false ;
10565: LD_ADDR_OWVAR 56
10569: PUSH
10570: LD_INT 0
10572: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
10573: LD_STRING ACH_CAMERA
10575: PPUSH
10576: CALL_OW 543
// end ;
10580: PPOPN 1
10582: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
10583: LD_EXP 9
10587: PUSH
10588: LD_EXP 11
10592: NOT
10593: AND
10594: IFFALSE 10653
10596: GO 10598
10598: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
10599: LD_EXP 9
10603: PPUSH
10604: CALL_OW 250
10608: PPUSH
10609: LD_EXP 9
10613: PPUSH
10614: CALL_OW 251
10618: PPUSH
10619: LD_INT 2
10621: PPUSH
10622: LD_INT 6
10624: NEG
10625: PPUSH
10626: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
10630: LD_EXP 9
10634: PPUSH
10635: CALL_OW 87
// wait ( 0 0$1 ) ;
10639: LD_INT 35
10641: PPUSH
10642: CALL_OW 67
// YouLost ( Spotted ) ;
10646: LD_STRING Spotted
10648: PPUSH
10649: CALL_OW 104
// end ;
10653: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
10654: LD_INT 3
10656: PUSH
10657: LD_INT 6
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PPUSH
10664: LD_INT 2
10666: PPUSH
10667: LD_EXP 47
10671: PPUSH
10672: CALL 1026 0 3
10676: IFFALSE 10709
10678: GO 10680
10680: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
10681: LD_ADDR_EXP 9
10685: PUSH
10686: LD_INT 3
10688: PUSH
10689: LD_INT 6
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PPUSH
10696: LD_INT 2
10698: PPUSH
10699: LD_EXP 47
10703: PPUSH
10704: CALL 1026 0 3
10708: ST_TO_ADDR
10709: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
10710: LD_INT 22
10712: PUSH
10713: LD_INT 6
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: LD_INT 30
10722: PUSH
10723: LD_INT 32
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: PUSH
10730: LD_INT 3
10732: PUSH
10733: LD_INT 24
10735: PUSH
10736: LD_INT 1000
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: LIST
10751: PPUSH
10752: CALL_OW 69
10756: IFFALSE 10817
10758: GO 10760
10760: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
10761: LD_ADDR_EXP 9
10765: PUSH
10766: LD_INT 22
10768: PUSH
10769: LD_INT 6
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: PUSH
10776: LD_INT 30
10778: PUSH
10779: LD_INT 32
10781: PUSH
10782: EMPTY
10783: LIST
10784: LIST
10785: PUSH
10786: LD_INT 3
10788: PUSH
10789: LD_INT 24
10791: PUSH
10792: LD_INT 1000
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: LIST
10807: PPUSH
10808: CALL_OW 69
10812: PUSH
10813: LD_INT 1
10815: ARRAY
10816: ST_TO_ADDR
10817: END
// every 0 0$1 trigger russianAlert do var i , tmp , towers , noncombat ;
10818: LD_EXP 9
10822: IFFALSE 11054
10824: GO 10826
10826: DISABLE
10827: LD_INT 0
10829: PPUSH
10830: PPUSH
10831: PPUSH
10832: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
10833: LD_ADDR_VAR 0 4
10837: PUSH
10838: LD_EXP 42
10842: PUSH
10843: LD_EXP 44
10847: PUSH
10848: LD_EXP 45
10852: UNION
10853: PPUSH
10854: LD_INT 3
10856: PUSH
10857: LD_INT 25
10859: PUSH
10860: LD_INT 1
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: PPUSH
10871: CALL_OW 72
10875: UNION
10876: ST_TO_ADDR
// for i in noncombat do
10877: LD_ADDR_VAR 0 1
10881: PUSH
10882: LD_VAR 0 4
10886: PUSH
10887: FOR_IN
10888: IFFALSE 10984
// begin if IsInUnit ( i ) then
10890: LD_VAR 0 1
10894: PPUSH
10895: CALL_OW 310
10899: IFFALSE 10910
// ComExitBuilding ( i ) ;
10901: LD_VAR 0 1
10905: PPUSH
10906: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
10910: LD_VAR 0 1
10914: PPUSH
10915: LD_INT 114
10917: PPUSH
10918: LD_INT 97
10920: PPUSH
10921: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
10925: LD_VAR 0 1
10929: PPUSH
10930: LD_INT 99
10932: PPUSH
10933: LD_INT 128
10935: PPUSH
10936: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
10940: LD_VAR 0 1
10944: PPUSH
10945: LD_INT 91
10947: PPUSH
10948: LD_INT 145
10950: PPUSH
10951: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
10955: LD_VAR 0 1
10959: PPUSH
10960: LD_INT 82
10962: PPUSH
10963: LD_INT 153
10965: PPUSH
10966: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
10970: LD_VAR 0 1
10974: PPUSH
10975: LD_INT 16
10977: PPUSH
10978: CALL_OW 173
// end ;
10982: GO 10887
10984: POP
10985: POP
// if not allowHeikeAttack then
10986: LD_EXP 11
10990: NOT
10991: IFFALSE 10995
// exit ;
10993: GO 11054
// SayRadio ( Kurin , D9a-Kur-1 ) ;
10995: LD_EXP 40
10999: PPUSH
11000: LD_STRING D9a-Kur-1
11002: PPUSH
11003: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11007: LD_EXP 43
11011: PPUSH
11012: LD_STRING D9a-Bur-1
11014: PPUSH
11015: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11019: LD_EXP 40
11023: PPUSH
11024: LD_STRING D9a-Kur-2
11026: PPUSH
11027: CALL_OW 94
// omicronFall := true ;
11031: LD_ADDR_EXP 13
11035: PUSH
11036: LD_INT 1
11038: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11039: LD_INT 105
11041: PPUSH
11042: CALL_OW 67
// retreatFromOmicron := true ;
11046: LD_ADDR_EXP 20
11050: PUSH
11051: LD_INT 1
11053: ST_TO_ADDR
// end ;
11054: PPOPN 4
11056: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11057: LD_INT 16
11059: PPUSH
11060: LD_INT 3
11062: PUSH
11063: LD_INT 22
11065: PUSH
11066: LD_INT 2
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PUSH
11077: LD_INT 23
11079: PUSH
11080: LD_INT 3
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PPUSH
11091: CALL_OW 70
11095: IFFALSE 11178
11097: GO 11099
11099: DISABLE
11100: LD_INT 0
11102: PPUSH
// begin enable ;
11103: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11104: LD_ADDR_VAR 0 1
11108: PUSH
11109: LD_INT 16
11111: PPUSH
11112: LD_INT 3
11114: PUSH
11115: LD_INT 22
11117: PUSH
11118: LD_INT 2
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PUSH
11129: LD_INT 23
11131: PUSH
11132: LD_INT 3
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: PPUSH
11143: CALL_OW 70
11147: PUSH
11148: FOR_IN
11149: IFFALSE 11176
// begin escapeCounter := escapeCounter + 1 ;
11151: LD_ADDR_EXP 19
11155: PUSH
11156: LD_EXP 19
11160: PUSH
11161: LD_INT 1
11163: PLUS
11164: ST_TO_ADDR
// RemoveUnit ( i ) ;
11165: LD_VAR 0 1
11169: PPUSH
11170: CALL_OW 64
// end ;
11174: GO 11148
11176: POP
11177: POP
// end ;
11178: PPOPN 1
11180: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11181: LD_OWVAR 1
11185: PUSH
11186: LD_INT 13650
11188: PUSH
11189: LD_INT 0
11191: PPUSH
11192: LD_INT 3150
11194: PPUSH
11195: CALL_OW 12
11199: PLUS
11200: GREATEREQUAL
11201: IFFALSE 11210
11203: GO 11205
11205: DISABLE
// SmallAmericanReinforcements ;
11206: CALL 6583 0 0
11210: END
// every 0 0$1 trigger tick >= 9 9$15 do
11211: LD_OWVAR 1
11215: PUSH
11216: LD_INT 19425
11218: GREATEREQUAL
11219: IFFALSE 11284
11221: GO 11223
11223: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11224: LD_EXP 48
11228: PPUSH
11229: LD_INT 21
11231: PUSH
11232: LD_INT 2
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: PPUSH
11239: CALL_OW 72
11243: PPUSH
11244: LD_INT 62
11246: PPUSH
11247: LD_INT 22
11249: PPUSH
11250: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11254: LD_EXP 49
11258: PPUSH
11259: LD_INT 69
11261: PPUSH
11262: LD_INT 27
11264: PPUSH
11265: CALL_OW 111
// wait ( 1 1$00 ) ;
11269: LD_INT 2100
11271: PPUSH
11272: CALL_OW 67
// startAttackOnOmicron := true ;
11276: LD_ADDR_EXP 6
11280: PUSH
11281: LD_INT 1
11283: ST_TO_ADDR
// end ;
11284: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11285: LD_EXP 22
11289: PUSH
11290: LD_INT 0
11292: EQUAL
11293: IFFALSE 13310
11295: GO 11297
11297: DISABLE
11298: LD_INT 0
11300: PPUSH
11301: PPUSH
11302: PPUSH
11303: PPUSH
11304: PPUSH
11305: PPUSH
11306: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11307: LD_INT 5
11309: PPUSH
11310: LD_INT 2
11312: PPUSH
11313: CALL_OW 343
// PrepareOmarForces ;
11317: CALL 1596 0 0
// wait ( 0 0$03 ) ;
11321: LD_INT 105
11323: PPUSH
11324: CALL_OW 67
// allowHeikeAttack := true ;
11328: LD_ADDR_EXP 11
11332: PUSH
11333: LD_INT 1
11335: ST_TO_ADDR
// activeGrishkoAI := false ;
11336: LD_ADDR_EXP 10
11340: PUSH
11341: LD_INT 0
11343: ST_TO_ADDR
// SetAreaMapShow ( dontGoArea , 0 ) ;
11344: LD_INT 20
11346: PPUSH
11347: LD_INT 0
11349: PPUSH
11350: CALL_OW 424
// if not hillBase then
11354: LD_EXP 15
11358: NOT
11359: IFFALSE 11368
// ChangeMissionObjectives ( HillDone ) ;
11361: LD_STRING HillDone
11363: PPUSH
11364: CALL_OW 337
// CenterOnUnits ( Omar ) ;
11368: LD_EXP 33
11372: PPUSH
11373: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
11377: LD_ADDR_VAR 0 1
11381: PUSH
11382: LD_INT 22
11384: PUSH
11385: LD_INT 2
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PUSH
11392: LD_INT 21
11394: PUSH
11395: LD_INT 1
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: PPUSH
11406: CALL_OW 69
11410: PUSH
11411: FOR_IN
11412: IFFALSE 11436
// if HasTask ( i ) then
11414: LD_VAR 0 1
11418: PPUSH
11419: CALL_OW 314
11423: IFFALSE 11434
// ComHold ( i ) ;
11425: LD_VAR 0 1
11429: PPUSH
11430: CALL_OW 140
11434: GO 11411
11436: POP
11437: POP
// DialogueOn ;
11438: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
11442: LD_EXP 33
11446: PPUSH
11447: LD_STRING DO-assault-1
11449: PPUSH
11450: CALL_OW 94
// DialogueOff ;
11454: CALL_OW 7
// game_speed := 4 ;
11458: LD_ADDR_OWVAR 65
11462: PUSH
11463: LD_INT 4
11465: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
11466: LD_ADDR_VAR 0 1
11470: PUSH
11471: LD_EXP 46
11475: PPUSH
11476: LD_INT 3
11478: PUSH
11479: LD_INT 54
11481: PUSH
11482: EMPTY
11483: LIST
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: PPUSH
11489: CALL_OW 72
11493: PUSH
11494: FOR_IN
11495: IFFALSE 11514
// ComMoveXY ( i , 226 , 114 ) ;
11497: LD_VAR 0 1
11501: PPUSH
11502: LD_INT 226
11504: PPUSH
11505: LD_INT 114
11507: PPUSH
11508: CALL_OW 111
11512: GO 11494
11514: POP
11515: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
11516: LD_EXP 41
11520: PPUSH
11521: LD_INT 22
11523: PUSH
11524: LD_INT 6
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: PUSH
11531: LD_INT 30
11533: PUSH
11534: LD_INT 4
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: PPUSH
11545: CALL_OW 69
11549: PPUSH
11550: LD_EXP 41
11554: PPUSH
11555: CALL_OW 74
11559: PPUSH
11560: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
11564: LD_STRING Attack
11566: PPUSH
11567: CALL_OW 337
// music_class := music_combat ;
11571: LD_ADDR_OWVAR 72
11575: PUSH
11576: LD_INT 1
11578: ST_TO_ADDR
// music_nat := 4 ;
11579: LD_ADDR_OWVAR 71
11583: PUSH
11584: LD_INT 4
11586: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
11587: LD_INT 5
11589: PPUSH
11590: LD_EXP 41
11594: PPUSH
11595: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
11599: LD_INT 6
11601: PPUSH
11602: LD_EXP 38
11606: PPUSH
11607: LD_INT 25
11609: PUSH
11610: LD_INT 1
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: PPUSH
11617: CALL_OW 72
11621: PUSH
11622: LD_INT 4
11624: ARRAY
11625: PPUSH
11626: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
11630: LD_ADDR_VAR 0 1
11634: PUSH
11635: LD_EXP 38
11639: PPUSH
11640: LD_INT 3
11642: PUSH
11643: LD_INT 25
11645: PUSH
11646: LD_INT 4
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PPUSH
11657: CALL_OW 72
11661: PUSH
11662: FOR_IN
11663: IFFALSE 11682
// ComAgressiveMove ( i , 221 , 110 ) ;
11665: LD_VAR 0 1
11669: PPUSH
11670: LD_INT 221
11672: PPUSH
11673: LD_INT 110
11675: PPUSH
11676: CALL_OW 114
11680: GO 11662
11682: POP
11683: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
11684: LD_EXP 38
11688: PPUSH
11689: LD_INT 25
11691: PUSH
11692: LD_INT 4
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: PPUSH
11699: CALL_OW 72
11703: PPUSH
11704: LD_INT 214
11706: PPUSH
11707: LD_INT 124
11709: PPUSH
11710: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
11714: LD_EXP 38
11718: PPUSH
11719: LD_INT 25
11721: PUSH
11722: LD_INT 1
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: PPUSH
11729: CALL_OW 72
11733: PUSH
11734: LD_INT 4
11736: ARRAY
11737: PPUSH
11738: LD_INT 214
11740: PPUSH
11741: LD_INT 114
11743: PPUSH
11744: LD_INT 0
11746: PPUSH
11747: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
11751: LD_EXP 41
11755: PPUSH
11756: LD_STRING D9-Gri-1
11758: PPUSH
11759: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
11763: LD_EXP 40
11767: PPUSH
11768: LD_STRING D9-Kur-1
11770: PPUSH
11771: CALL_OW 94
// wait ( 0 0$1 ) ;
11775: LD_INT 35
11777: PPUSH
11778: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
11782: LD_EXP 33
11786: PPUSH
11787: LD_INT 233
11789: PPUSH
11790: LD_INT 130
11792: PPUSH
11793: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
11797: LD_EXP 41
11801: PPUSH
11802: LD_STRING D9-Gri-2
11804: PPUSH
11805: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
11809: LD_EXP 40
11813: PPUSH
11814: LD_STRING D9-Kur-2
11816: PPUSH
11817: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
11821: LD_EXP 41
11825: PPUSH
11826: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
11830: LD_EXP 41
11834: PPUSH
11835: LD_INT 211
11837: PPUSH
11838: LD_INT 104
11840: PPUSH
11841: CALL_OW 171
// AddComHold ( Grishko ) ;
11845: LD_EXP 41
11849: PPUSH
11850: CALL_OW 200
// repeat wait ( 3 ) ;
11854: LD_INT 3
11856: PPUSH
11857: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
11861: LD_EXP 41
11865: PPUSH
11866: CALL_OW 310
11870: NOT
11871: IFFALSE 11854
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
11873: LD_EXP 38
11877: PPUSH
11878: LD_INT 34
11880: PUSH
11881: LD_INT 26
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: PPUSH
11888: CALL_OW 72
11892: PPUSH
11893: LD_EXP 41
11897: PPUSH
11898: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
11902: LD_EXP 38
11906: PPUSH
11907: LD_INT 34
11909: PUSH
11910: LD_INT 26
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PPUSH
11917: CALL_OW 72
11921: PPUSH
11922: LD_INT 215
11924: PPUSH
11925: LD_INT 106
11927: PPUSH
11928: CALL_OW 174
// repeat wait ( 3 ) ;
11932: LD_INT 3
11934: PPUSH
11935: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
11939: LD_EXP 41
11943: PPUSH
11944: CALL_OW 256
11948: PUSH
11949: LD_INT 1000
11951: LESS
11952: IFFALSE 11932
// NormalAttack ( 5 , Grishko ) ;
11954: LD_INT 5
11956: PPUSH
11957: LD_EXP 41
11961: PPUSH
11962: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
11966: LD_INT 6
11968: PPUSH
11969: LD_EXP 38
11973: PPUSH
11974: LD_INT 25
11976: PUSH
11977: LD_INT 1
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: PPUSH
11984: CALL_OW 72
11988: PUSH
11989: LD_INT 4
11991: ARRAY
11992: PPUSH
11993: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
11997: LD_EXP 41
12001: PPUSH
12002: LD_STRING D9-Gri-3
12004: PPUSH
12005: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12009: LD_EXP 40
12013: PPUSH
12014: LD_STRING D9-Kur-3
12016: PPUSH
12017: CALL_OW 94
// music_class := music_auto ;
12021: LD_ADDR_OWVAR 72
12025: PUSH
12026: LD_INT 0
12028: ST_TO_ADDR
// music_nat := music_auto ;
12029: LD_ADDR_OWVAR 71
12033: PUSH
12034: LD_INT 0
12036: ST_TO_ADDR
// for i in omarSquad do
12037: LD_ADDR_VAR 0 1
12041: PUSH
12042: LD_EXP 38
12046: PUSH
12047: FOR_IN
12048: IFFALSE 12190
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12050: LD_VAR 0 1
12054: PPUSH
12055: CALL_OW 247
12059: PUSH
12060: LD_INT 2
12062: EQUAL
12063: PUSH
12064: LD_VAR 0 1
12068: PPUSH
12069: CALL_OW 256
12073: PUSH
12074: LD_INT 1000
12076: LESS
12077: AND
12078: IFFALSE 12144
// begin driver := IsDrivenBy ( i ) ;
12080: LD_ADDR_VAR 0 2
12084: PUSH
12085: LD_VAR 0 1
12089: PPUSH
12090: CALL_OW 311
12094: ST_TO_ADDR
// veh := i ;
12095: LD_ADDR_VAR 0 3
12099: PUSH
12100: LD_VAR 0 1
12104: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12105: LD_VAR 0 2
12109: PPUSH
12110: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12114: LD_VAR 0 2
12118: PPUSH
12119: LD_VAR 0 3
12123: PPUSH
12124: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12128: LD_VAR 0 2
12132: PPUSH
12133: LD_VAR 0 3
12137: PPUSH
12138: CALL_OW 180
// end else
12142: GO 12188
// if GetLives ( i ) < 500 then
12144: LD_VAR 0 1
12148: PPUSH
12149: CALL_OW 256
12153: PUSH
12154: LD_INT 500
12156: LESS
12157: IFFALSE 12188
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12159: LD_EXP 38
12163: PPUSH
12164: LD_INT 25
12166: PUSH
12167: LD_INT 4
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: PPUSH
12174: CALL_OW 72
12178: PPUSH
12179: LD_VAR 0 1
12183: PPUSH
12184: CALL_OW 188
// end ; end ;
12188: GO 12047
12190: POP
12191: POP
// repeat wait ( 0 0$1 ) ;
12192: LD_INT 35
12194: PPUSH
12195: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12199: LD_EXP 38
12203: PPUSH
12204: LD_INT 3
12206: PUSH
12207: LD_INT 24
12209: PUSH
12210: LD_INT 1000
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: LD_INT 21
12223: PUSH
12224: LD_INT 2
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: PPUSH
12235: CALL_OW 72
12239: NOT
12240: PUSH
12241: LD_EXP 38
12245: PPUSH
12246: LD_INT 3
12248: PUSH
12249: LD_INT 24
12251: PUSH
12252: LD_INT 250
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: PPUSH
12263: CALL_OW 72
12267: NOT
12268: AND
12269: IFFALSE 12192
// wait ( 0 0$2 ) ;
12271: LD_INT 70
12273: PPUSH
12274: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12278: LD_ADDR_VAR 0 5
12282: PUSH
12283: LD_EXP 38
12287: PPUSH
12288: LD_INT 58
12290: PUSH
12291: EMPTY
12292: LIST
12293: PUSH
12294: LD_INT 21
12296: PUSH
12297: LD_INT 2
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: PPUSH
12308: CALL_OW 72
12312: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
12313: LD_ADDR_VAR 0 6
12317: PUSH
12318: LD_EXP 38
12322: PPUSH
12323: LD_INT 25
12325: PUSH
12326: LD_INT 3
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: LD_INT 3
12335: PUSH
12336: LD_INT 55
12338: PUSH
12339: EMPTY
12340: LIST
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PPUSH
12350: CALL_OW 72
12354: ST_TO_ADDR
// for i := 1 to tmp do
12355: LD_ADDR_VAR 0 1
12359: PUSH
12360: DOUBLE
12361: LD_INT 1
12363: DEC
12364: ST_TO_ADDR
12365: LD_VAR 0 5
12369: PUSH
12370: FOR_TO
12371: IFFALSE 12401
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
12373: LD_VAR 0 6
12377: PUSH
12378: LD_VAR 0 1
12382: ARRAY
12383: PPUSH
12384: LD_VAR 0 5
12388: PUSH
12389: LD_VAR 0 1
12393: ARRAY
12394: PPUSH
12395: CALL_OW 120
12399: GO 12370
12401: POP
12402: POP
// wait ( 0 0$5 ) ;
12403: LD_INT 175
12405: PPUSH
12406: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
12410: LD_EXP 38
12414: PPUSH
12415: LD_INT 199
12417: PPUSH
12418: LD_INT 141
12420: PPUSH
12421: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
12425: LD_EXP 33
12429: PPUSH
12430: LD_INT 190
12432: PPUSH
12433: LD_INT 143
12435: PPUSH
12436: CALL_OW 114
// AddComHold ( Omar ) ;
12440: LD_EXP 33
12444: PPUSH
12445: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
12449: LD_EXP 38
12453: PPUSH
12454: LD_INT 2
12456: PUSH
12457: LD_INT 25
12459: PUSH
12460: LD_INT 1
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: PUSH
12467: LD_INT 25
12469: PUSH
12470: LD_INT 4
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: LIST
12481: PPUSH
12482: CALL_OW 72
12486: PPUSH
12487: LD_INT 161
12489: PPUSH
12490: LD_INT 130
12492: PPUSH
12493: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
12497: LD_EXP 38
12501: PPUSH
12502: LD_INT 25
12504: PUSH
12505: LD_INT 1
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: PPUSH
12512: CALL_OW 72
12516: PPUSH
12517: LD_INT 163
12519: PPUSH
12520: LD_INT 122
12522: PPUSH
12523: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
12527: LD_EXP 38
12531: PPUSH
12532: LD_INT 25
12534: PUSH
12535: LD_INT 1
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: PPUSH
12542: CALL_OW 72
12546: PUSH
12547: LD_INT 4
12549: ARRAY
12550: PPUSH
12551: LD_INT 165
12553: PPUSH
12554: LD_INT 118
12556: PPUSH
12557: LD_INT 0
12559: PPUSH
12560: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
12564: LD_EXP 38
12568: PPUSH
12569: LD_INT 25
12571: PUSH
12572: LD_INT 1
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PPUSH
12579: CALL_OW 72
12583: PUSH
12584: LD_INT 4
12586: ARRAY
12587: PPUSH
12588: LD_INT 159
12590: PPUSH
12591: LD_INT 116
12593: PPUSH
12594: LD_INT 0
12596: PPUSH
12597: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
12601: LD_EXP 38
12605: PPUSH
12606: LD_INT 21
12608: PUSH
12609: LD_INT 2
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PPUSH
12616: CALL_OW 72
12620: PPUSH
12621: LD_INT 169
12623: PPUSH
12624: LD_INT 114
12626: PPUSH
12627: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
12631: LD_INT 35
12633: PPUSH
12634: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
12638: LD_ADDR_VAR 0 5
12642: PUSH
12643: LD_EXP 38
12647: PPUSH
12648: LD_INT 25
12650: PUSH
12651: LD_INT 1
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: PPUSH
12658: CALL_OW 72
12662: ST_TO_ADDR
// for i in tmp do
12663: LD_ADDR_VAR 0 1
12667: PUSH
12668: LD_VAR 0 5
12672: PUSH
12673: FOR_IN
12674: IFFALSE 12771
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
12676: LD_VAR 0 1
12680: PPUSH
12681: CALL_OW 256
12685: PUSH
12686: LD_INT 600
12688: LESS
12689: PUSH
12690: LD_VAR 0 1
12694: PPUSH
12695: LD_INT 161
12697: PPUSH
12698: LD_INT 130
12700: PPUSH
12701: CALL_OW 297
12705: PUSH
12706: LD_INT 6
12708: GREATER
12709: AND
12710: IFFALSE 12727
// ComMoveXY ( i , 161 , 130 ) ;
12712: LD_VAR 0 1
12716: PPUSH
12717: LD_INT 161
12719: PPUSH
12720: LD_INT 130
12722: PPUSH
12723: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
12727: LD_VAR 0 1
12731: PPUSH
12732: CALL_OW 256
12736: PUSH
12737: LD_INT 1000
12739: EQUAL
12740: PUSH
12741: LD_VAR 0 1
12745: PPUSH
12746: CALL_OW 314
12750: NOT
12751: AND
12752: IFFALSE 12769
// ComAgressiveMove ( i , 160 , 109 ) ;
12754: LD_VAR 0 1
12758: PPUSH
12759: LD_INT 160
12761: PPUSH
12762: LD_INT 109
12764: PPUSH
12765: CALL_OW 114
// end ;
12769: GO 12673
12771: POP
12772: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
12773: LD_ADDR_VAR 0 5
12777: PUSH
12778: LD_EXP 38
12782: PPUSH
12783: LD_INT 21
12785: PUSH
12786: LD_INT 2
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: PPUSH
12793: CALL_OW 72
12797: ST_TO_ADDR
// for i in tmp do
12798: LD_ADDR_VAR 0 1
12802: PUSH
12803: LD_VAR 0 5
12807: PUSH
12808: FOR_IN
12809: IFFALSE 13075
// begin tmp2 := IsDrivenBy ( i ) ;
12811: LD_ADDR_VAR 0 6
12815: PUSH
12816: LD_VAR 0 1
12820: PPUSH
12821: CALL_OW 311
12825: ST_TO_ADDR
// if not tmp2 then
12826: LD_VAR 0 6
12830: NOT
12831: IFFALSE 12835
// continue ;
12833: GO 12808
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
12835: LD_VAR 0 1
12839: PPUSH
12840: CALL_OW 256
12844: PUSH
12845: LD_INT 600
12847: GREATEREQUAL
12848: PUSH
12849: LD_VAR 0 1
12853: PPUSH
12854: CALL_OW 110
12858: PUSH
12859: LD_INT 1
12861: EQUAL
12862: AND
12863: IFFALSE 12877
// SetTag ( i , 0 ) ;
12865: LD_VAR 0 1
12869: PPUSH
12870: LD_INT 0
12872: PPUSH
12873: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
12877: LD_VAR 0 1
12881: PPUSH
12882: CALL_OW 256
12886: PUSH
12887: LD_INT 600
12889: GREATEREQUAL
12890: PUSH
12891: LD_VAR 0 1
12895: PPUSH
12896: CALL_OW 110
12900: NOT
12901: AND
12902: IFFALSE 12928
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
12904: LD_VAR 0 1
12908: PPUSH
12909: LD_VAR 0 7
12913: PPUSH
12914: LD_VAR 0 1
12918: PPUSH
12919: CALL_OW 74
12923: PPUSH
12924: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
12928: LD_VAR 0 1
12932: PPUSH
12933: CALL_OW 256
12937: PUSH
12938: LD_INT 600
12940: LESS
12941: PUSH
12942: LD_VAR 0 1
12946: PPUSH
12947: CALL_OW 110
12951: NOT
12952: AND
12953: IFFALSE 12982
// begin SetTag ( i , 1 ) ;
12955: LD_VAR 0 1
12959: PPUSH
12960: LD_INT 1
12962: PPUSH
12963: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
12967: LD_VAR 0 1
12971: PPUSH
12972: LD_INT 202
12974: PPUSH
12975: LD_INT 150
12977: PPUSH
12978: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
12982: LD_VAR 0 1
12986: PPUSH
12987: CALL_OW 110
12991: PUSH
12992: LD_INT 1
12994: EQUAL
12995: PUSH
12996: LD_VAR 0 1
13000: PPUSH
13001: LD_INT 202
13003: PPUSH
13004: LD_INT 150
13006: PPUSH
13007: CALL_OW 297
13011: PUSH
13012: LD_INT 6
13014: LESS
13015: AND
13016: PUSH
13017: LD_VAR 0 6
13021: AND
13022: IFFALSE 13073
// begin ComExitVehicle ( tmp2 ) ;
13024: LD_VAR 0 6
13028: PPUSH
13029: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13033: LD_VAR 0 6
13037: PPUSH
13038: LD_VAR 0 1
13042: PPUSH
13043: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13047: LD_VAR 0 6
13051: PPUSH
13052: LD_INT 700
13054: PPUSH
13055: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13059: LD_VAR 0 6
13063: PPUSH
13064: LD_VAR 0 1
13068: PPUSH
13069: CALL_OW 180
// end ; end ;
13073: GO 12808
13075: POP
13076: POP
// until kirovDestroyed ;
13077: LD_EXP 16
13081: IFFALSE 12631
// repeat wait ( 0 0$1 ) ;
13083: LD_INT 35
13085: PPUSH
13086: CALL_OW 67
// for i in omarSquad union Omar do
13090: LD_ADDR_VAR 0 1
13094: PUSH
13095: LD_EXP 38
13099: PUSH
13100: LD_EXP 33
13104: UNION
13105: PUSH
13106: FOR_IN
13107: IFFALSE 13277
// if IsInArea ( i , southRoadArea ) then
13109: LD_VAR 0 1
13113: PPUSH
13114: LD_INT 15
13116: PPUSH
13117: CALL_OW 308
13121: IFFALSE 13134
// RemoveUnit ( i ) else
13123: LD_VAR 0 1
13127: PPUSH
13128: CALL_OW 64
13132: GO 13275
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
13134: LD_VAR 0 1
13138: PPUSH
13139: CALL_OW 257
13143: PUSH
13144: LD_INT 3
13146: EQUAL
13147: PUSH
13148: LD_VAR 0 1
13152: PPUSH
13153: CALL_OW 310
13157: NOT
13158: AND
13159: PUSH
13160: LD_INT 22
13162: PUSH
13163: LD_INT 5
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: PUSH
13170: LD_INT 24
13172: PUSH
13173: LD_INT 251
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: PUSH
13180: LD_INT 21
13182: PUSH
13183: LD_INT 2
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: PUSH
13190: LD_INT 58
13192: PUSH
13193: EMPTY
13194: LIST
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: PPUSH
13202: CALL_OW 69
13206: AND
13207: IFFALSE 13260
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
13209: LD_VAR 0 1
13213: PPUSH
13214: LD_INT 22
13216: PUSH
13217: LD_INT 5
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PUSH
13224: LD_INT 21
13226: PUSH
13227: LD_INT 2
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: PUSH
13234: LD_INT 58
13236: PUSH
13237: EMPTY
13238: LIST
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: LIST
13244: PPUSH
13245: CALL_OW 69
13249: PUSH
13250: LD_INT 1
13252: ARRAY
13253: PPUSH
13254: CALL_OW 120
13258: GO 13275
// ComMoveXY ( i , 208 , 162 ) ;
13260: LD_VAR 0 1
13264: PPUSH
13265: LD_INT 208
13267: PPUSH
13268: LD_INT 162
13270: PPUSH
13271: CALL_OW 111
// end ;
13275: GO 13106
13277: POP
13278: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
13279: LD_INT 22
13281: PUSH
13282: LD_INT 5
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: PUSH
13289: LD_INT 21
13291: PUSH
13292: LD_INT 1
13294: PUSH
13295: EMPTY
13296: LIST
13297: LIST
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: PPUSH
13303: CALL_OW 69
13307: NOT
13308: IFFALSE 13083
// end ;
13310: PPOPN 7
13312: END
// every 0 0$1 trigger IsDead ( kirov ) do
13313: LD_INT 71
13315: PPUSH
13316: CALL_OW 301
13320: IFFALSE 13337
13322: GO 13324
13324: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
13325: LD_EXP 25
13329: PPUSH
13330: LD_STRING DH-1-Kirov
13332: PPUSH
13333: CALL_OW 88
13337: END
// every 0 0$1 trigger See ( 2 , beria ) do
13338: LD_INT 2
13340: PPUSH
13341: LD_INT 106
13343: PPUSH
13344: CALL_OW 292
13348: IFFALSE 13365
13350: GO 13352
13352: DISABLE
// Say ( Heike , DH-1-Beria ) ;
13353: LD_EXP 25
13357: PPUSH
13358: LD_STRING DH-1-Beria
13360: PPUSH
13361: CALL_OW 88
13365: END
// every 0 0$1 trigger See ( 2 , kagan ) do
13366: LD_INT 2
13368: PPUSH
13369: LD_INT 112
13371: PPUSH
13372: CALL_OW 292
13376: IFFALSE 13643
13378: GO 13380
13380: DISABLE
// begin DialogueOn ;
13381: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
13385: LD_INT 112
13387: PPUSH
13388: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
13392: LD_EXP 25
13396: PPUSH
13397: LD_STRING DH-1-Kagan
13399: PPUSH
13400: CALL_OW 88
// if Kamil then
13404: LD_EXP 29
13408: IFFALSE 13446
// begin Say ( Kamil , DKam-Kagan-2 ) ;
13410: LD_EXP 29
13414: PPUSH
13415: LD_STRING DKam-Kagan-2
13417: PPUSH
13418: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
13422: LD_EXP 26
13426: PPUSH
13427: LD_STRING DG-Kagan-3
13429: PPUSH
13430: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
13434: LD_EXP 26
13438: PPUSH
13439: LD_STRING DG-Kagan-4
13441: PPUSH
13442: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
13446: LD_STRING KaganBase
13448: PPUSH
13449: CALL_OW 97
13453: PUSH
13454: LD_INT 1
13456: DOUBLE
13457: EQUAL
13458: IFTRUE 13462
13460: GO 13557
13462: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
13463: LD_EXP 25
13467: PPUSH
13468: LD_STRING DH-Kagan-5
13470: PPUSH
13471: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
13475: LD_EXP 25
13479: PPUSH
13480: LD_STRING DH-Kagan-6
13482: PPUSH
13483: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
13487: LD_EXP 36
13491: PPUSH
13492: LD_STRING DShar-Kagan-7
13494: PPUSH
13495: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
13499: LD_EXP 25
13503: PPUSH
13504: LD_STRING DH-Kagan-8
13506: PPUSH
13507: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
13511: LD_EXP 25
13515: PPUSH
13516: LD_STRING DH-Kagan-9
13518: PPUSH
13519: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
13523: LD_EXP 36
13527: PPUSH
13528: LD_STRING DShar-Kagan-10
13530: PPUSH
13531: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
13535: LD_EXP 25
13539: PPUSH
13540: LD_STRING DH-Kagan-11
13542: PPUSH
13543: CALL_OW 88
// kaganCaptured := true ;
13547: LD_ADDR_EXP 24
13551: PUSH
13552: LD_INT 1
13554: ST_TO_ADDR
// end ; 2 :
13555: GO 13639
13557: LD_INT 2
13559: DOUBLE
13560: EQUAL
13561: IFTRUE 13565
13563: GO 13638
13565: POP
// begin if FilterAllUnits ( [ f_side , 8 ] ) and Aviradze then
13566: LD_INT 22
13568: PUSH
13569: LD_INT 8
13571: PUSH
13572: EMPTY
13573: LIST
13574: LIST
13575: PPUSH
13576: CALL_OW 69
13580: PUSH
13581: LD_EXP 35
13585: AND
13586: IFFALSE 13600
// Say ( Heike , DH-Kagan-a-5 ) ;
13588: LD_EXP 25
13592: PPUSH
13593: LD_STRING DH-Kagan-a-5
13595: PPUSH
13596: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
13600: LD_EXP 25
13604: PPUSH
13605: LD_STRING DH-Kagan-a-6
13607: PPUSH
13608: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
13612: LD_EXP 25
13616: PPUSH
13617: LD_STRING DH-Kagan-a-7
13619: PPUSH
13620: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
13624: LD_EXP 26
13628: PPUSH
13629: LD_STRING DG-Kagan-a-8
13631: PPUSH
13632: CALL_OW 88
// end ; end ;
13636: GO 13639
13638: POP
// DialogueOff ;
13639: CALL_OW 7
// end ;
13643: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
13644: LD_EXP 18
13648: PUSH
13649: LD_INT 112
13651: PPUSH
13652: CALL_OW 255
13656: PUSH
13657: LD_INT 2
13659: EQUAL
13660: OR
13661: IFFALSE 13673
13663: GO 13665
13665: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
13666: LD_STRING KaganDone
13668: PPUSH
13669: CALL_OW 337
13673: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
13674: LD_EXP 6
13678: PUSH
13679: LD_EXP 48
13683: PPUSH
13684: LD_INT 95
13686: PUSH
13687: LD_INT 19
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: PPUSH
13694: CALL_OW 72
13698: AND
13699: IFFALSE 13776
13701: GO 13703
13703: DISABLE
// begin DialogueOn ;
13704: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
13708: LD_INT 63
13710: PPUSH
13711: LD_INT 32
13713: PPUSH
13714: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
13718: LD_INT 63
13720: PPUSH
13721: LD_INT 32
13723: PPUSH
13724: LD_INT 2
13726: PPUSH
13727: LD_INT 12
13729: NEG
13730: PPUSH
13731: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
13735: LD_EXP 25
13739: PPUSH
13740: LD_STRING DH-Omicron-1
13742: PPUSH
13743: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
13747: LD_EXP 27
13751: PPUSH
13752: LD_STRING DM-Omicron-2
13754: PPUSH
13755: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
13759: LD_INT 63
13761: PPUSH
13762: LD_INT 32
13764: PPUSH
13765: LD_INT 2
13767: PPUSH
13768: CALL_OW 331
// DialogueOff ;
13772: CALL_OW 7
// end ;
13776: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
13777: LD_INT 2
13779: PPUSH
13780: LD_EXP 50
13784: PPUSH
13785: CALL_OW 292
13789: PUSH
13790: LD_EXP 50
13794: PPUSH
13795: CALL_OW 255
13799: PUSH
13800: LD_INT 2
13802: EQUAL
13803: OR
13804: PUSH
13805: LD_INT 106
13807: PPUSH
13808: CALL_OW 255
13812: PUSH
13813: LD_INT 2
13815: EQUAL
13816: OR
13817: PUSH
13818: LD_EXP 50
13822: PPUSH
13823: CALL_OW 302
13827: AND
13828: PUSH
13829: LD_EXP 25
13833: PPUSH
13834: CALL_OW 302
13838: AND
13839: PUSH
13840: LD_EXP 35
13844: PPUSH
13845: CALL_OW 302
13849: AND
13850: IFFALSE 14571
13852: GO 13854
13854: DISABLE
13855: LD_INT 0
13857: PPUSH
13858: PPUSH
13859: PPUSH
13860: PPUSH
13861: PPUSH
// begin DialogueOn ;
13862: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
13866: LD_INT 111
13868: PPUSH
13869: LD_INT 90
13871: PPUSH
13872: LD_INT 2
13874: PPUSH
13875: LD_INT 6
13877: NEG
13878: PPUSH
13879: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
13883: LD_INT 111
13885: PPUSH
13886: LD_INT 90
13888: PPUSH
13889: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
13893: LD_EXP 35
13897: PPUSH
13898: LD_STRING DA-Cap-1
13900: PPUSH
13901: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
13905: LD_EXP 25
13909: PPUSH
13910: LD_STRING DH-Cap-2
13912: PPUSH
13913: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
13917: LD_INT 111
13919: PPUSH
13920: LD_INT 90
13922: PPUSH
13923: LD_INT 2
13925: PPUSH
13926: CALL_OW 331
// DialogueOff ;
13930: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
13934: LD_INT 35
13936: PPUSH
13937: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 110 , 95 , 12 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_distxy , 110 , 95 , 12 ] ] ) ;
13941: LD_EXP 17
13945: PUSH
13946: LD_INT 106
13948: PPUSH
13949: CALL_OW 255
13953: PUSH
13954: LD_INT 2
13956: EQUAL
13957: OR
13958: PUSH
13959: LD_EXP 50
13963: PPUSH
13964: CALL_OW 255
13968: PUSH
13969: LD_INT 2
13971: EQUAL
13972: OR
13973: PUSH
13974: LD_EXP 50
13978: PPUSH
13979: CALL_OW 302
13983: AND
13984: PUSH
13985: LD_EXP 35
13989: PPUSH
13990: CALL_OW 302
13994: AND
13995: PUSH
13996: LD_INT 2
13998: PPUSH
13999: CALL_OW 463
14003: NOT
14004: AND
14005: PUSH
14006: LD_INT 22
14008: PUSH
14009: LD_INT 3
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: PUSH
14016: LD_INT 21
14018: PUSH
14019: LD_INT 1
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: PUSH
14026: LD_INT 92
14028: PUSH
14029: LD_INT 110
14031: PUSH
14032: LD_INT 95
14034: PUSH
14035: LD_INT 12
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: LIST
14048: PPUSH
14049: CALL_OW 69
14053: NOT
14054: AND
14055: PUSH
14056: LD_INT 22
14058: PUSH
14059: LD_INT 3
14061: PUSH
14062: EMPTY
14063: LIST
14064: LIST
14065: PUSH
14066: LD_INT 30
14068: PUSH
14069: LD_INT 5
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: PUSH
14076: LD_INT 92
14078: PUSH
14079: LD_INT 110
14081: PUSH
14082: LD_INT 95
14084: PUSH
14085: LD_INT 12
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: LIST
14098: PPUSH
14099: CALL_OW 69
14103: NOT
14104: AND
14105: IFFALSE 13934
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14107: LD_ADDR_VAR 0 2
14111: PUSH
14112: LD_EXP 37
14116: PUSH
14117: LD_EXP 28
14121: PUSH
14122: LD_EXP 29
14126: PUSH
14127: LD_EXP 31
14131: PUSH
14132: LD_EXP 30
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: UNION
14143: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14144: LD_ADDR_VAR 0 2
14148: PUSH
14149: LD_VAR 0 2
14153: PPUSH
14154: LD_INT 50
14156: PUSH
14157: EMPTY
14158: LIST
14159: PPUSH
14160: CALL_OW 72
14164: ST_TO_ADDR
// if tmp < 2 then
14165: LD_VAR 0 2
14169: PUSH
14170: LD_INT 2
14172: LESS
14173: IFFALSE 14185
// q := 2 else
14175: LD_ADDR_VAR 0 4
14179: PUSH
14180: LD_INT 2
14182: ST_TO_ADDR
14183: GO 14198
// q := Query ( LabCap ) ;
14185: LD_ADDR_VAR 0 4
14189: PUSH
14190: LD_STRING LabCap
14192: PPUSH
14193: CALL_OW 97
14197: ST_TO_ADDR
// case q of 1 :
14198: LD_VAR 0 4
14202: PUSH
14203: LD_INT 1
14205: DOUBLE
14206: EQUAL
14207: IFTRUE 14211
14209: GO 14535
14211: POP
// begin DoNotAttack ( 2 , ruLab ) ;
14212: LD_INT 2
14214: PPUSH
14215: LD_EXP 50
14219: PPUSH
14220: CALL_OW 471
// labCaptured := true ;
14224: LD_ADDR_EXP 21
14228: PUSH
14229: LD_INT 1
14231: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
14232: LD_EXP 25
14236: PPUSH
14237: LD_STRING DH-Cap-a-1
14239: PPUSH
14240: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
14244: LD_EXP 35
14248: PPUSH
14249: LD_STRING DA-Cap-a-2
14251: PPUSH
14252: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike ] ^ [ sel_changeable ] ^ tmp ;
14256: LD_ADDR_VAR 0 5
14260: PUSH
14261: LD_EXP 35
14265: PUSH
14266: LD_INT -3
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PUSH
14273: LD_INT -2
14275: PUSH
14276: LD_INT -4
14278: PUSH
14279: LD_EXP 25
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: LIST
14288: ADD
14289: PUSH
14290: LD_INT -3
14292: PUSH
14293: EMPTY
14294: LIST
14295: ADD
14296: PUSH
14297: LD_VAR 0 2
14301: ADD
14302: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
14303: LD_ADDR_VAR 0 3
14307: PUSH
14308: LD_STRING Select two characters to go with Aviradze
14310: PPUSH
14311: LD_INT 2
14313: PPUSH
14314: LD_INT 2
14316: PPUSH
14317: LD_VAR 0 5
14321: PPUSH
14322: EMPTY
14323: PPUSH
14324: CALL_OW 42
14328: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
14329: LD_EXP 50
14333: PPUSH
14334: LD_INT 8
14336: PPUSH
14337: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
14341: LD_EXP 35
14345: PPUSH
14346: LD_INT 8
14348: PPUSH
14349: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
14353: LD_ADDR_EXP 39
14357: PUSH
14358: LD_EXP 35
14362: PUSH
14363: EMPTY
14364: LIST
14365: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
14366: LD_EXP 35
14370: PPUSH
14371: CALL_OW 310
14375: IFFALSE 14386
// ComExit ( Aviradze ) ;
14377: LD_EXP 35
14381: PPUSH
14382: CALL 70706 0 1
// wait ( 3 ) ;
14386: LD_INT 3
14388: PPUSH
14389: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
14393: LD_EXP 35
14397: PPUSH
14398: LD_EXP 50
14402: PPUSH
14403: CALL_OW 120
// for i := 1 to 2 do
14407: LD_ADDR_VAR 0 1
14411: PUSH
14412: DOUBLE
14413: LD_INT 1
14415: DEC
14416: ST_TO_ADDR
14417: LD_INT 2
14419: PUSH
14420: FOR_TO
14421: IFFALSE 14524
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
14423: LD_ADDR_EXP 39
14427: PUSH
14428: LD_EXP 39
14432: PUSH
14433: LD_VAR 0 3
14437: PUSH
14438: LD_VAR 0 1
14442: ARRAY
14443: UNION
14444: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
14445: LD_VAR 0 3
14449: PUSH
14450: LD_VAR 0 1
14454: ARRAY
14455: PPUSH
14456: LD_INT 8
14458: PPUSH
14459: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
14463: LD_VAR 0 3
14467: PUSH
14468: LD_VAR 0 1
14472: ARRAY
14473: PPUSH
14474: CALL_OW 310
14478: IFFALSE 14495
// ComExit ( tmp2 [ i ] ) ;
14480: LD_VAR 0 3
14484: PUSH
14485: LD_VAR 0 1
14489: ARRAY
14490: PPUSH
14491: CALL 70706 0 1
// wait ( 3 ) ;
14495: LD_INT 3
14497: PPUSH
14498: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
14502: LD_VAR 0 3
14506: PUSH
14507: LD_VAR 0 1
14511: ARRAY
14512: PPUSH
14513: LD_EXP 50
14517: PPUSH
14518: CALL_OW 120
// end ;
14522: GO 14420
14524: POP
14525: POP
// SetAchievement ( ACH_LAB ) ;
14526: LD_STRING ACH_LAB
14528: PPUSH
14529: CALL_OW 543
// end ; 2 :
14533: GO 14571
14535: LD_INT 2
14537: DOUBLE
14538: EQUAL
14539: IFTRUE 14543
14541: GO 14570
14543: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
14544: LD_EXP 25
14548: PPUSH
14549: LD_STRING DH-Cap-b-1
14551: PPUSH
14552: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
14556: LD_EXP 35
14560: PPUSH
14561: LD_STRING DA-Cap-b-2
14563: PPUSH
14564: CALL_OW 88
// end ; end ;
14568: GO 14571
14570: POP
// end ;
14571: PPOPN 5
14573: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
14574: LD_INT 10
14576: PPUSH
14577: LD_INT 22
14579: PUSH
14580: LD_INT 2
14582: PUSH
14583: EMPTY
14584: LIST
14585: LIST
14586: PUSH
14587: LD_INT 30
14589: PUSH
14590: LD_INT 31
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: PUSH
14597: EMPTY
14598: LIST
14599: LIST
14600: PPUSH
14601: CALL_OW 70
14605: PUSH
14606: LD_INT 2
14608: GREATEREQUAL
14609: IFFALSE 14621
14611: GO 14613
14613: DISABLE
// SetAchievement ( ACH_KING ) ;
14614: LD_STRING ACH_KING
14616: PPUSH
14617: CALL_OW 543
14621: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
14622: LD_EXP 11
14626: NOT
14627: PUSH
14628: LD_INT 10
14630: PPUSH
14631: LD_INT 22
14633: PUSH
14634: LD_INT 2
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PUSH
14641: LD_INT 2
14643: PUSH
14644: LD_INT 30
14646: PUSH
14647: LD_INT 31
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PUSH
14654: LD_INT 30
14656: PUSH
14657: LD_INT 4
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: LIST
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: PPUSH
14673: CALL_OW 70
14677: AND
14678: IFFALSE 14698
14680: GO 14682
14682: DISABLE
// begin hillBase := true ;
14683: LD_ADDR_EXP 15
14687: PUSH
14688: LD_INT 1
14690: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
14691: LD_STRING HillDone
14693: PPUSH
14694: CALL_OW 337
// end ;
14698: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
14699: LD_EXP 30
14703: PUSH
14704: LD_EXP 30
14708: PPUSH
14709: CALL_OW 256
14713: PUSH
14714: LD_INT 3
14716: LESS
14717: AND
14718: IFFALSE 14764
14720: GO 14722
14722: DISABLE
// begin DialogueOn ;
14723: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
14727: LD_EXP 30
14731: PPUSH
14732: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
14736: LD_EXP 30
14740: PPUSH
14741: LD_STRING DK-Kkilled-1
14743: PPUSH
14744: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
14748: LD_EXP 25
14752: PPUSH
14753: LD_STRING DH-Kkilled-2
14755: PPUSH
14756: CALL_OW 88
// DialogueOff ;
14760: CALL_OW 7
// end ;
14764: END
// every 0 0$1 trigger kaiaKilledByRussian do
14765: LD_EXP 23
14769: IFFALSE 14786
14771: GO 14773
14773: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
14774: LD_EXP 25
14778: PPUSH
14779: LD_STRING DH-Kkilled-3
14781: PPUSH
14782: CALL_OW 88
14786: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo ;
14787: LD_EXP 16
14791: PUSH
14792: LD_INT 106
14794: PPUSH
14795: CALL_OW 255
14799: PUSH
14800: LD_INT 2
14802: EQUAL
14803: PUSH
14804: LD_EXP 17
14808: OR
14809: AND
14810: PUSH
14811: LD_EXP 18
14815: PUSH
14816: LD_EXP 24
14820: PUSH
14821: LD_INT 112
14823: PPUSH
14824: CALL_OW 255
14828: PUSH
14829: LD_INT 2
14831: EQUAL
14832: AND
14833: OR
14834: AND
14835: IFFALSE 16017
14837: GO 14839
14839: DISABLE
14840: LD_INT 0
14842: PPUSH
14843: PPUSH
14844: PPUSH
14845: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
14846: LD_STRING GoToWest
14848: PPUSH
14849: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
14853: LD_INT 17
14855: PPUSH
14856: LD_INT 1
14858: PPUSH
14859: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
14863: LD_INT 35
14865: PPUSH
14866: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
14870: LD_ADDR_VAR 0 2
14874: PUSH
14875: LD_INT 17
14877: PPUSH
14878: LD_INT 22
14880: PUSH
14881: LD_INT 2
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: LD_INT 2
14890: PUSH
14891: LD_INT 21
14893: PUSH
14894: LD_INT 1
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: PUSH
14901: LD_INT 21
14903: PUSH
14904: LD_INT 2
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: PUSH
14911: LD_INT 3
14913: PUSH
14914: LD_INT 58
14916: PUSH
14917: EMPTY
14918: LIST
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: LIST
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PPUSH
14937: CALL_OW 70
14941: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
14942: LD_ADDR_VAR 0 3
14946: PUSH
14947: LD_INT 22
14949: PUSH
14950: LD_INT 2
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: LD_INT 3
14959: PUSH
14960: LD_INT 55
14962: PUSH
14963: EMPTY
14964: LIST
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: PUSH
14970: LD_INT 2
14972: PUSH
14973: LD_INT 21
14975: PUSH
14976: LD_INT 1
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: PUSH
14983: LD_INT 21
14985: PUSH
14986: LD_INT 2
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: PUSH
14993: LD_INT 3
14995: PUSH
14996: LD_INT 58
14998: PUSH
14999: EMPTY
15000: LIST
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: LIST
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: LIST
15019: PPUSH
15020: CALL_OW 69
15024: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15025: LD_VAR 0 2
15029: PUSH
15030: LD_INT 0
15032: PLUS
15033: PUSH
15034: LD_VAR 0 3
15038: PUSH
15039: LD_INT 0
15041: PLUS
15042: EQUAL
15043: IFFALSE 14863
// SaveCharacters ( Heike , 04_1_Heike ) ;
15045: LD_EXP 25
15049: PPUSH
15050: LD_STRING 04_1_Heike
15052: PPUSH
15053: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15057: LD_EXP 35
15061: PUSH
15062: LD_EXP 35
15066: PUSH
15067: LD_EXP 39
15071: IN
15072: NOT
15073: AND
15074: IFFALSE 15090
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15076: LD_EXP 35
15080: PPUSH
15081: LD_STRING 04_1_Aviradze
15083: PPUSH
15084: CALL_OW 38
15088: GO 15108
// if Aviradze then
15090: LD_EXP 35
15094: IFFALSE 15108
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15096: LD_EXP 35
15100: PPUSH
15101: LD_STRING 04_1_Aviradze_L
15103: PPUSH
15104: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15108: LD_EXP 28
15112: PUSH
15113: LD_EXP 28
15117: PUSH
15118: LD_EXP 39
15122: IN
15123: NOT
15124: AND
15125: IFFALSE 15141
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15127: LD_EXP 28
15131: PPUSH
15132: LD_STRING 04_1_Ibrahim
15134: PPUSH
15135: CALL_OW 38
15139: GO 15159
// if Ibrahim then
15141: LD_EXP 28
15145: IFFALSE 15159
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
15147: LD_EXP 28
15151: PPUSH
15152: LD_STRING 04_1_Ibrahim_L
15154: PPUSH
15155: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
15159: LD_EXP 29
15163: PUSH
15164: LD_EXP 29
15168: PUSH
15169: LD_EXP 39
15173: IN
15174: NOT
15175: AND
15176: IFFALSE 15192
// SaveCharacters ( Kamil , 04_1_Kamil ) else
15178: LD_EXP 29
15182: PPUSH
15183: LD_STRING 04_1_Kamil
15185: PPUSH
15186: CALL_OW 38
15190: GO 15210
// if Kamil then
15192: LD_EXP 29
15196: IFFALSE 15210
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
15198: LD_EXP 29
15202: PPUSH
15203: LD_STRING 04_1_Kamil_L
15205: PPUSH
15206: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
15210: LD_EXP 31
15214: PUSH
15215: LD_EXP 31
15219: PUSH
15220: LD_EXP 39
15224: IN
15225: NOT
15226: AND
15227: IFFALSE 15243
// SaveCharacters ( Sophia , 04_1_Sophia ) else
15229: LD_EXP 31
15233: PPUSH
15234: LD_STRING 04_1_Sophia
15236: PPUSH
15237: CALL_OW 38
15241: GO 15261
// if Sophia then
15243: LD_EXP 31
15247: IFFALSE 15261
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
15249: LD_EXP 31
15253: PPUSH
15254: LD_STRING 04_1_Sophia_L
15256: PPUSH
15257: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
15261: LD_EXP 30
15265: PUSH
15266: LD_EXP 30
15270: PUSH
15271: LD_EXP 39
15275: IN
15276: NOT
15277: AND
15278: IFFALSE 15294
// SaveCharacters ( Kaia , 04_1_Kaia ) else
15280: LD_EXP 30
15284: PPUSH
15285: LD_STRING 04_1_Kaia
15287: PPUSH
15288: CALL_OW 38
15292: GO 15312
// if Kaia then
15294: LD_EXP 30
15298: IFFALSE 15312
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
15300: LD_EXP 30
15304: PPUSH
15305: LD_STRING 04_1_Kaia_L
15307: PPUSH
15308: CALL_OW 38
// if Givi then
15312: LD_EXP 26
15316: IFFALSE 15330
// SaveCharacters ( Givi , 04_1_Givi ) ;
15318: LD_EXP 26
15322: PPUSH
15323: LD_STRING 04_1_Givi
15325: PPUSH
15326: CALL_OW 38
// if Mike then
15330: LD_EXP 27
15334: IFFALSE 15348
// SaveCharacters ( Mike , 04_1_Mike ) ;
15336: LD_EXP 27
15340: PPUSH
15341: LD_STRING 04_1_Mike
15343: PPUSH
15344: CALL_OW 38
// if Markov then
15348: LD_EXP 32
15352: IFFALSE 15366
// SaveCharacters ( Markov , 04_1_Markov ) ;
15354: LD_EXP 32
15358: PPUSH
15359: LD_STRING 04_1_Markov
15361: PPUSH
15362: CALL_OW 38
// if Kurt then
15366: LD_EXP 34
15370: IFFALSE 15384
// SaveCharacters ( Kurt , 04_1_Kurt ) ;
15372: LD_EXP 34
15376: PPUSH
15377: LD_STRING 04_1_Kurt
15379: PPUSH
15380: CALL_OW 38
// if heikeSecondSquad diff aviradzeSquad then
15384: LD_EXP 37
15388: PUSH
15389: LD_EXP 39
15393: DIFF
15394: IFFALSE 15414
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
15396: LD_EXP 37
15400: PUSH
15401: LD_EXP 39
15405: DIFF
15406: PPUSH
15407: LD_STRING 04_1_others
15409: PPUSH
15410: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
15414: LD_EXP 39
15418: PUSH
15419: LD_EXP 37
15423: AND
15424: IFFALSE 15509
// begin tmp := [ ] ;
15426: LD_ADDR_VAR 0 2
15430: PUSH
15431: EMPTY
15432: ST_TO_ADDR
// for i in heikeSecondSquad do
15433: LD_ADDR_VAR 0 1
15437: PUSH
15438: LD_EXP 37
15442: PUSH
15443: FOR_IN
15444: IFFALSE 15489
// if i in aviradzeSquad then
15446: LD_VAR 0 1
15450: PUSH
15451: LD_EXP 39
15455: IN
15456: IFFALSE 15487
// tmp := Replace ( tmp , tmp + 1 , i ) ;
15458: LD_ADDR_VAR 0 2
15462: PUSH
15463: LD_VAR 0 2
15467: PPUSH
15468: LD_VAR 0 2
15472: PUSH
15473: LD_INT 1
15475: PLUS
15476: PPUSH
15477: LD_VAR 0 1
15481: PPUSH
15482: CALL_OW 1
15486: ST_TO_ADDR
15487: GO 15443
15489: POP
15490: POP
// if tmp then
15491: LD_VAR 0 2
15495: IFFALSE 15509
// SaveCharacters ( tmp , 04_1_others_L ) ;
15497: LD_VAR 0 2
15501: PPUSH
15502: LD_STRING 04_1_others_L
15504: PPUSH
15505: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
15509: LD_ADDR_VAR 0 2
15513: PUSH
15514: LD_INT 22
15516: PUSH
15517: LD_INT 2
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: PUSH
15524: LD_INT 23
15526: PUSH
15527: LD_INT 0
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: PPUSH
15538: CALL_OW 69
15542: ST_TO_ADDR
// if tmp then
15543: LD_VAR 0 2
15547: IFFALSE 15561
// SaveCharacters ( tmp , 04_1_apes ) ;
15549: LD_VAR 0 2
15553: PPUSH
15554: LD_STRING 04_1_apes
15556: PPUSH
15557: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
15561: LD_ADDR_VAR 0 2
15565: PUSH
15566: LD_INT 17
15568: PPUSH
15569: LD_INT 21
15571: PUSH
15572: LD_INT 2
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PPUSH
15579: CALL_OW 70
15583: ST_TO_ADDR
// if tmp then
15584: LD_VAR 0 2
15588: IFFALSE 15882
// begin tmp2 := [ ] ;
15590: LD_ADDR_VAR 0 3
15594: PUSH
15595: EMPTY
15596: ST_TO_ADDR
// for i in tmp do
15597: LD_ADDR_VAR 0 1
15601: PUSH
15602: LD_VAR 0 2
15606: PUSH
15607: FOR_IN
15608: IFFALSE 15868
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
15610: LD_VAR 0 1
15614: PPUSH
15615: CALL_OW 264
15619: PUSH
15620: LD_INT 32
15622: PUSH
15623: LD_INT 12
15625: PUSH
15626: LD_INT 51
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: LIST
15633: IN
15634: IFFALSE 15771
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
15636: LD_ADDR_VAR 0 4
15640: PUSH
15641: LD_VAR 0 1
15645: PPUSH
15646: LD_INT 1
15648: PPUSH
15649: CALL_OW 289
15653: PUSH
15654: LD_VAR 0 1
15658: PPUSH
15659: LD_INT 2
15661: PPUSH
15662: CALL_OW 289
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
15671: LD_ADDR_VAR 0 3
15675: PUSH
15676: LD_VAR 0 3
15680: PPUSH
15681: LD_VAR 0 3
15685: PUSH
15686: LD_INT 1
15688: PLUS
15689: PPUSH
15690: LD_VAR 0 1
15694: PPUSH
15695: CALL_OW 265
15699: PUSH
15700: LD_VAR 0 1
15704: PPUSH
15705: CALL_OW 262
15709: PUSH
15710: LD_VAR 0 1
15714: PPUSH
15715: CALL_OW 263
15719: PUSH
15720: LD_VAR 0 1
15724: PPUSH
15725: CALL_OW 264
15729: PUSH
15730: LD_VAR 0 1
15734: PPUSH
15735: CALL_OW 248
15739: PUSH
15740: LD_VAR 0 1
15744: PPUSH
15745: CALL_OW 256
15749: PUSH
15750: LD_VAR 0 4
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: PPUSH
15764: CALL_OW 1
15768: ST_TO_ADDR
// end else
15769: GO 15866
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
15771: LD_ADDR_VAR 0 3
15775: PUSH
15776: LD_VAR 0 3
15780: PPUSH
15781: LD_VAR 0 3
15785: PUSH
15786: LD_INT 1
15788: PLUS
15789: PPUSH
15790: LD_VAR 0 1
15794: PPUSH
15795: CALL_OW 265
15799: PUSH
15800: LD_VAR 0 1
15804: PPUSH
15805: CALL_OW 262
15809: PUSH
15810: LD_VAR 0 1
15814: PPUSH
15815: CALL_OW 263
15819: PUSH
15820: LD_VAR 0 1
15824: PPUSH
15825: CALL_OW 264
15829: PUSH
15830: LD_VAR 0 1
15834: PPUSH
15835: CALL_OW 248
15839: PUSH
15840: LD_VAR 0 1
15844: PPUSH
15845: CALL_OW 256
15849: PUSH
15850: EMPTY
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: PPUSH
15861: CALL_OW 1
15865: ST_TO_ADDR
15866: GO 15607
15868: POP
15869: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
15870: LD_VAR 0 3
15874: PPUSH
15875: LD_STRING 04_1_Vehicles
15877: PPUSH
15878: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
15882: LD_EXP 21
15886: PPUSH
15887: LD_STRING 04_1_RuLabCaptured
15889: PPUSH
15890: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
15894: LD_EXP 19
15898: PPUSH
15899: LD_STRING 04_1_EscapeCounter
15901: PPUSH
15902: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
15906: LD_EXP 15
15910: PPUSH
15911: LD_STRING 04_1_BaseHill
15913: PPUSH
15914: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
15918: LD_OWVAR 1
15922: PPUSH
15923: LD_STRING 04_1_Time
15925: PPUSH
15926: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
15930: LD_EXP 14
15934: PPUSH
15935: LD_STRING 04_1_DeadCounter
15937: PPUSH
15938: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
15942: LD_EXP 24
15946: PUSH
15947: LD_INT 112
15949: PPUSH
15950: CALL_OW 255
15954: MUL
15955: PUSH
15956: LD_INT 2
15958: EQUAL
15959: PPUSH
15960: LD_STRING 04_1_KaganCaptured
15962: PPUSH
15963: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
15967: LD_INT 22
15969: PUSH
15970: LD_INT 2
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: LD_INT 34
15979: PUSH
15980: LD_INT 26
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PPUSH
15991: CALL_OW 69
15995: PUSH
15996: LD_INT 0
15998: PLUS
15999: PPUSH
16000: LD_STRING 04_1_Flamethrower
16002: PPUSH
16003: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16007: LD_INT 1
16009: PPUSH
16010: LD_STRING __x1\04_cont2
16012: PPUSH
16013: CALL_OW 340
// end ; end_of_file
16017: PPOPN 4
16019: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16020: LD_VAR 0 1
16024: PPUSH
16025: CALL_OW 266
16029: PUSH
16030: LD_INT 0
16032: EQUAL
16033: PUSH
16034: LD_VAR 0 1
16038: PPUSH
16039: CALL_OW 255
16043: PUSH
16044: LD_INT 2
16046: EQUAL
16047: AND
16048: IFFALSE 16058
// baseConstructed := true ;
16050: LD_ADDR_EXP 3
16054: PUSH
16055: LD_INT 1
16057: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16058: LD_VAR 0 1
16062: PPUSH
16063: CALL_OW 266
16067: PUSH
16068: LD_INT 6
16070: EQUAL
16071: PUSH
16072: LD_VAR 0 1
16076: PPUSH
16077: CALL_OW 255
16081: PUSH
16082: LD_INT 2
16084: EQUAL
16085: AND
16086: IFFALSE 16096
// labConstructed := true ;
16088: LD_ADDR_EXP 4
16092: PUSH
16093: LD_INT 1
16095: ST_TO_ADDR
// end ;
16096: PPOPN 1
16098: END
// on UnitDestroyed ( un ) do begin if un = Heike then
16099: LD_VAR 0 1
16103: PUSH
16104: LD_EXP 25
16108: EQUAL
16109: IFFALSE 16118
// YouLost ( Heike ) ;
16111: LD_STRING Heike
16113: PPUSH
16114: CALL_OW 104
// if un = Omar then
16118: LD_VAR 0 1
16122: PUSH
16123: LD_EXP 33
16127: EQUAL
16128: IFFALSE 16137
// YouLost ( Omar ) ;
16130: LD_STRING Omar
16132: PPUSH
16133: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
16137: LD_VAR 0 1
16141: PUSH
16142: LD_INT 22
16144: PUSH
16145: LD_INT 2
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 23
16154: PUSH
16155: LD_INT 2
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: PUSH
16162: LD_INT 21
16164: PUSH
16165: LD_INT 1
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: PUSH
16172: EMPTY
16173: LIST
16174: LIST
16175: LIST
16176: PPUSH
16177: CALL_OW 69
16181: IN
16182: IFFALSE 16198
// loseCounter := loseCounter + 1 ;
16184: LD_ADDR_EXP 14
16188: PUSH
16189: LD_EXP 14
16193: PUSH
16194: LD_INT 1
16196: PLUS
16197: ST_TO_ADDR
// if un = omikron then
16198: LD_VAR 0 1
16202: PUSH
16203: LD_INT 64
16205: EQUAL
16206: IFFALSE 16216
// omicronFall := true ;
16208: LD_ADDR_EXP 13
16212: PUSH
16213: LD_INT 1
16215: ST_TO_ADDR
// if un = kirov then
16216: LD_VAR 0 1
16220: PUSH
16221: LD_INT 71
16223: EQUAL
16224: IFFALSE 16241
// begin ChangeMissionObjectives ( KirovDone ) ;
16226: LD_STRING KirovDone
16228: PPUSH
16229: CALL_OW 337
// kirovDestroyed := true ;
16233: LD_ADDR_EXP 16
16237: PUSH
16238: LD_INT 1
16240: ST_TO_ADDR
// end ; if un = beria then
16241: LD_VAR 0 1
16245: PUSH
16246: LD_INT 106
16248: EQUAL
16249: IFFALSE 16266
// begin ChangeMissionObjectives ( BeriaDone ) ;
16251: LD_STRING BeriaDone
16253: PPUSH
16254: CALL_OW 337
// beriaDestroyed := true ;
16258: LD_ADDR_EXP 17
16262: PUSH
16263: LD_INT 1
16265: ST_TO_ADDR
// end ; if un = kagan then
16266: LD_VAR 0 1
16270: PUSH
16271: LD_INT 112
16273: EQUAL
16274: IFFALSE 16284
// kaganDestroyed := true ;
16276: LD_ADDR_EXP 18
16280: PUSH
16281: LD_INT 1
16283: ST_TO_ADDR
// if un in russianPatrol then
16284: LD_VAR 0 1
16288: PUSH
16289: LD_EXP 47
16293: IN
16294: IFFALSE 16312
// russianPatrol := russianPatrol diff un ;
16296: LD_ADDR_EXP 47
16300: PUSH
16301: LD_EXP 47
16305: PUSH
16306: LD_VAR 0 1
16310: DIFF
16311: ST_TO_ADDR
// if un in russianOmicronAttackers then
16312: LD_VAR 0 1
16316: PUSH
16317: LD_EXP 48
16321: IN
16322: IFFALSE 16340
// russianOmicronAttackers := russianOmicronAttackers diff un ;
16324: LD_ADDR_EXP 48
16328: PUSH
16329: LD_EXP 48
16333: PUSH
16334: LD_VAR 0 1
16338: DIFF
16339: ST_TO_ADDR
// end ;
16340: PPOPN 1
16342: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
16343: LD_INT 0
16345: PPUSH
16346: PPUSH
16347: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
16348: LD_VAR 0 1
16352: PUSH
16353: LD_INT 2
16355: PUSH
16356: LD_INT 22
16358: PUSH
16359: LD_INT 3
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: PUSH
16366: LD_INT 22
16368: PUSH
16369: LD_INT 4
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PUSH
16376: LD_INT 22
16378: PUSH
16379: LD_INT 6
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: PUSH
16392: LD_INT 30
16394: PUSH
16395: LD_INT 32
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: PUSH
16402: EMPTY
16403: LIST
16404: LIST
16405: PPUSH
16406: CALL_OW 69
16410: IN
16411: IFFALSE 16584
// begin sol := UnitsInside ( un ) ;
16413: LD_ADDR_VAR 0 3
16417: PUSH
16418: LD_VAR 0 1
16422: PPUSH
16423: CALL_OW 313
16427: ST_TO_ADDR
// if not sol then
16428: LD_VAR 0 3
16432: NOT
16433: IFFALSE 16437
// exit ;
16435: GO 16584
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16437: LD_ADDR_VAR 0 4
16441: PUSH
16442: LD_INT 22
16444: PUSH
16445: LD_VAR 0 1
16449: PPUSH
16450: CALL_OW 255
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PUSH
16459: LD_INT 2
16461: PUSH
16462: LD_INT 30
16464: PUSH
16465: LD_INT 4
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: PUSH
16472: LD_INT 30
16474: PUSH
16475: LD_INT 5
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: LIST
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PPUSH
16491: CALL_OW 69
16495: ST_TO_ADDR
// if not nearestBarracks then
16496: LD_VAR 0 4
16500: NOT
16501: IFFALSE 16505
// exit ;
16503: GO 16584
// for i in nearestBarracks do
16505: LD_ADDR_VAR 0 2
16509: PUSH
16510: LD_VAR 0 4
16514: PUSH
16515: FOR_IN
16516: IFFALSE 16551
// if UnitsInside ( i ) = 6 then
16518: LD_VAR 0 2
16522: PPUSH
16523: CALL_OW 313
16527: PUSH
16528: LD_INT 6
16530: EQUAL
16531: IFFALSE 16549
// nearestBarracks := nearestBarracks diff i ;
16533: LD_ADDR_VAR 0 4
16537: PUSH
16538: LD_VAR 0 4
16542: PUSH
16543: LD_VAR 0 2
16547: DIFF
16548: ST_TO_ADDR
16549: GO 16515
16551: POP
16552: POP
// if not nearestBarracks then
16553: LD_VAR 0 4
16557: NOT
16558: IFFALSE 16562
// exit ;
16560: GO 16584
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
16562: LD_VAR 0 3
16566: PUSH
16567: LD_INT 1
16569: ARRAY
16570: PPUSH
16571: LD_VAR 0 4
16575: PUSH
16576: LD_INT 1
16578: ARRAY
16579: PPUSH
16580: CALL_OW 120
// end ; end ;
16584: PPOPN 4
16586: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
16587: LD_INT 0
16589: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
16590: LD_EXP 8
16594: NOT
16595: PUSH
16596: LD_EXP 5
16600: NOT
16601: OR
16602: IFFALSE 16606
// exit ;
16604: GO 16674
// for i in camAreas do
16606: LD_ADDR_VAR 0 5
16610: PUSH
16611: LD_EXP 8
16615: PUSH
16616: FOR_IN
16617: IFFALSE 16672
// if InArea ( x , y , i ) then
16619: LD_VAR 0 3
16623: PPUSH
16624: LD_VAR 0 4
16628: PPUSH
16629: LD_VAR 0 5
16633: PPUSH
16634: CALL_OW 309
16638: IFFALSE 16670
// begin SetAreaMapShow ( i , 0 ) ;
16640: LD_VAR 0 5
16644: PPUSH
16645: LD_INT 0
16647: PPUSH
16648: CALL_OW 424
// camAreas := camAreas diff i ;
16652: LD_ADDR_EXP 8
16656: PUSH
16657: LD_EXP 8
16661: PUSH
16662: LD_VAR 0 5
16666: DIFF
16667: ST_TO_ADDR
// break ;
16668: GO 16672
// end ;
16670: GO 16616
16672: POP
16673: POP
// end ;
16674: PPOPN 5
16676: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
16677: LD_VAR 0 1
16681: PUSH
16682: LD_INT 2
16684: EQUAL
16685: PUSH
16686: LD_VAR 0 2
16690: PUSH
16691: LD_INT 5
16693: PUSH
16694: LD_INT 8
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: IN
16701: AND
16702: IFFALSE 16711
// YouLost ( Ally ) ;
16704: LD_STRING Ally
16706: PPUSH
16707: CALL_OW 104
// end ;
16711: PPOPN 2
16713: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
16714: LD_VAR 0 1
16718: PUSH
16719: LD_EXP 30
16723: EQUAL
16724: PUSH
16725: LD_VAR 0 2
16729: PUSH
16730: LD_INT 3
16732: PUSH
16733: LD_INT 6
16735: PUSH
16736: EMPTY
16737: LIST
16738: LIST
16739: IN
16740: AND
16741: IFFALSE 16772
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
16743: LD_ADDR_EXP 23
16747: PUSH
16748: LD_VAR 0 1
16752: PPUSH
16753: CALL_OW 250
16757: PUSH
16758: LD_VAR 0 1
16762: PPUSH
16763: CALL_OW 251
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: ST_TO_ADDR
// end ; end_of_file
16772: PPOPN 3
16774: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 ] [ Difficulty ] do
16775: LD_EXP 11
16779: NOT
16780: PUSH
16781: LD_INT 12
16783: PPUSH
16784: LD_INT 1
16786: PPUSH
16787: CALL_OW 287
16791: PUSH
16792: LD_INT 20
16794: PUSH
16795: LD_INT 16
16797: PUSH
16798: LD_INT 12
16800: PUSH
16801: EMPTY
16802: LIST
16803: LIST
16804: LIST
16805: PUSH
16806: LD_OWVAR 67
16810: ARRAY
16811: LESS
16812: AND
16813: IFFALSE 16840
16815: GO 16817
16817: DISABLE
// begin enable ;
16818: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
16819: LD_INT 1
16821: PPUSH
16822: LD_INT 5
16824: PPUSH
16825: CALL_OW 12
16829: PPUSH
16830: LD_INT 12
16832: PPUSH
16833: LD_INT 1
16835: PPUSH
16836: CALL_OW 55
// end ; end_of_file
16840: END
// every 0 0$1 trigger omarCountdown do
16841: LD_EXP 22
16845: IFFALSE 16897
16847: GO 16849
16849: DISABLE
// begin enable ;
16850: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
16851: LD_ADDR_OWVAR 47
16855: PUSH
16856: LD_STRING #X104-1
16858: PUSH
16859: LD_EXP 22
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
16868: LD_ADDR_EXP 22
16872: PUSH
16873: LD_EXP 22
16877: PUSH
16878: LD_INT 35
16880: MINUS
16881: ST_TO_ADDR
// if not omarCountdown then
16882: LD_EXP 22
16886: NOT
16887: IFFALSE 16897
// display_strings :=  ;
16889: LD_ADDR_OWVAR 47
16893: PUSH
16894: LD_STRING 
16896: ST_TO_ADDR
// end ; end_of_file
16897: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
16898: LD_VAR 0 2
16902: PUSH
16903: LD_INT 100
16905: EQUAL
16906: IFFALSE 17855
// begin if not StreamModeActive then
16908: LD_EXP 52
16912: NOT
16913: IFFALSE 16923
// StreamModeActive := true ;
16915: LD_ADDR_EXP 52
16919: PUSH
16920: LD_INT 1
16922: ST_TO_ADDR
// if p3 = 0 then
16923: LD_VAR 0 3
16927: PUSH
16928: LD_INT 0
16930: EQUAL
16931: IFFALSE 16937
// InitStreamMode ;
16933: CALL 18013 0 0
// if p3 = 1 then
16937: LD_VAR 0 3
16941: PUSH
16942: LD_INT 1
16944: EQUAL
16945: IFFALSE 16955
// sRocket := true ;
16947: LD_ADDR_EXP 57
16951: PUSH
16952: LD_INT 1
16954: ST_TO_ADDR
// if p3 = 2 then
16955: LD_VAR 0 3
16959: PUSH
16960: LD_INT 2
16962: EQUAL
16963: IFFALSE 16973
// sSpeed := true ;
16965: LD_ADDR_EXP 56
16969: PUSH
16970: LD_INT 1
16972: ST_TO_ADDR
// if p3 = 3 then
16973: LD_VAR 0 3
16977: PUSH
16978: LD_INT 3
16980: EQUAL
16981: IFFALSE 16991
// sEngine := true ;
16983: LD_ADDR_EXP 58
16987: PUSH
16988: LD_INT 1
16990: ST_TO_ADDR
// if p3 = 4 then
16991: LD_VAR 0 3
16995: PUSH
16996: LD_INT 4
16998: EQUAL
16999: IFFALSE 17009
// sSpec := true ;
17001: LD_ADDR_EXP 55
17005: PUSH
17006: LD_INT 1
17008: ST_TO_ADDR
// if p3 = 5 then
17009: LD_VAR 0 3
17013: PUSH
17014: LD_INT 5
17016: EQUAL
17017: IFFALSE 17027
// sLevel := true ;
17019: LD_ADDR_EXP 59
17023: PUSH
17024: LD_INT 1
17026: ST_TO_ADDR
// if p3 = 6 then
17027: LD_VAR 0 3
17031: PUSH
17032: LD_INT 6
17034: EQUAL
17035: IFFALSE 17045
// sArmoury := true ;
17037: LD_ADDR_EXP 60
17041: PUSH
17042: LD_INT 1
17044: ST_TO_ADDR
// if p3 = 7 then
17045: LD_VAR 0 3
17049: PUSH
17050: LD_INT 7
17052: EQUAL
17053: IFFALSE 17063
// sRadar := true ;
17055: LD_ADDR_EXP 61
17059: PUSH
17060: LD_INT 1
17062: ST_TO_ADDR
// if p3 = 8 then
17063: LD_VAR 0 3
17067: PUSH
17068: LD_INT 8
17070: EQUAL
17071: IFFALSE 17081
// sBunker := true ;
17073: LD_ADDR_EXP 62
17077: PUSH
17078: LD_INT 1
17080: ST_TO_ADDR
// if p3 = 9 then
17081: LD_VAR 0 3
17085: PUSH
17086: LD_INT 9
17088: EQUAL
17089: IFFALSE 17099
// sHack := true ;
17091: LD_ADDR_EXP 63
17095: PUSH
17096: LD_INT 1
17098: ST_TO_ADDR
// if p3 = 10 then
17099: LD_VAR 0 3
17103: PUSH
17104: LD_INT 10
17106: EQUAL
17107: IFFALSE 17117
// sFire := true ;
17109: LD_ADDR_EXP 64
17113: PUSH
17114: LD_INT 1
17116: ST_TO_ADDR
// if p3 = 11 then
17117: LD_VAR 0 3
17121: PUSH
17122: LD_INT 11
17124: EQUAL
17125: IFFALSE 17135
// sRefresh := true ;
17127: LD_ADDR_EXP 65
17131: PUSH
17132: LD_INT 1
17134: ST_TO_ADDR
// if p3 = 12 then
17135: LD_VAR 0 3
17139: PUSH
17140: LD_INT 12
17142: EQUAL
17143: IFFALSE 17153
// sExp := true ;
17145: LD_ADDR_EXP 66
17149: PUSH
17150: LD_INT 1
17152: ST_TO_ADDR
// if p3 = 13 then
17153: LD_VAR 0 3
17157: PUSH
17158: LD_INT 13
17160: EQUAL
17161: IFFALSE 17171
// sDepot := true ;
17163: LD_ADDR_EXP 67
17167: PUSH
17168: LD_INT 1
17170: ST_TO_ADDR
// if p3 = 14 then
17171: LD_VAR 0 3
17175: PUSH
17176: LD_INT 14
17178: EQUAL
17179: IFFALSE 17189
// sFlag := true ;
17181: LD_ADDR_EXP 68
17185: PUSH
17186: LD_INT 1
17188: ST_TO_ADDR
// if p3 = 15 then
17189: LD_VAR 0 3
17193: PUSH
17194: LD_INT 15
17196: EQUAL
17197: IFFALSE 17207
// sKamikadze := true ;
17199: LD_ADDR_EXP 76
17203: PUSH
17204: LD_INT 1
17206: ST_TO_ADDR
// if p3 = 16 then
17207: LD_VAR 0 3
17211: PUSH
17212: LD_INT 16
17214: EQUAL
17215: IFFALSE 17225
// sTroll := true ;
17217: LD_ADDR_EXP 77
17221: PUSH
17222: LD_INT 1
17224: ST_TO_ADDR
// if p3 = 17 then
17225: LD_VAR 0 3
17229: PUSH
17230: LD_INT 17
17232: EQUAL
17233: IFFALSE 17243
// sSlow := true ;
17235: LD_ADDR_EXP 78
17239: PUSH
17240: LD_INT 1
17242: ST_TO_ADDR
// if p3 = 18 then
17243: LD_VAR 0 3
17247: PUSH
17248: LD_INT 18
17250: EQUAL
17251: IFFALSE 17261
// sLack := true ;
17253: LD_ADDR_EXP 79
17257: PUSH
17258: LD_INT 1
17260: ST_TO_ADDR
// if p3 = 19 then
17261: LD_VAR 0 3
17265: PUSH
17266: LD_INT 19
17268: EQUAL
17269: IFFALSE 17279
// sTank := true ;
17271: LD_ADDR_EXP 81
17275: PUSH
17276: LD_INT 1
17278: ST_TO_ADDR
// if p3 = 20 then
17279: LD_VAR 0 3
17283: PUSH
17284: LD_INT 20
17286: EQUAL
17287: IFFALSE 17297
// sRemote := true ;
17289: LD_ADDR_EXP 82
17293: PUSH
17294: LD_INT 1
17296: ST_TO_ADDR
// if p3 = 21 then
17297: LD_VAR 0 3
17301: PUSH
17302: LD_INT 21
17304: EQUAL
17305: IFFALSE 17315
// sPowell := true ;
17307: LD_ADDR_EXP 83
17311: PUSH
17312: LD_INT 1
17314: ST_TO_ADDR
// if p3 = 22 then
17315: LD_VAR 0 3
17319: PUSH
17320: LD_INT 22
17322: EQUAL
17323: IFFALSE 17333
// sTeleport := true ;
17325: LD_ADDR_EXP 86
17329: PUSH
17330: LD_INT 1
17332: ST_TO_ADDR
// if p3 = 23 then
17333: LD_VAR 0 3
17337: PUSH
17338: LD_INT 23
17340: EQUAL
17341: IFFALSE 17351
// sOilTower := true ;
17343: LD_ADDR_EXP 88
17347: PUSH
17348: LD_INT 1
17350: ST_TO_ADDR
// if p3 = 24 then
17351: LD_VAR 0 3
17355: PUSH
17356: LD_INT 24
17358: EQUAL
17359: IFFALSE 17369
// sShovel := true ;
17361: LD_ADDR_EXP 89
17365: PUSH
17366: LD_INT 1
17368: ST_TO_ADDR
// if p3 = 25 then
17369: LD_VAR 0 3
17373: PUSH
17374: LD_INT 25
17376: EQUAL
17377: IFFALSE 17387
// sSheik := true ;
17379: LD_ADDR_EXP 90
17383: PUSH
17384: LD_INT 1
17386: ST_TO_ADDR
// if p3 = 26 then
17387: LD_VAR 0 3
17391: PUSH
17392: LD_INT 26
17394: EQUAL
17395: IFFALSE 17405
// sEarthquake := true ;
17397: LD_ADDR_EXP 92
17401: PUSH
17402: LD_INT 1
17404: ST_TO_ADDR
// if p3 = 27 then
17405: LD_VAR 0 3
17409: PUSH
17410: LD_INT 27
17412: EQUAL
17413: IFFALSE 17423
// sAI := true ;
17415: LD_ADDR_EXP 93
17419: PUSH
17420: LD_INT 1
17422: ST_TO_ADDR
// if p3 = 28 then
17423: LD_VAR 0 3
17427: PUSH
17428: LD_INT 28
17430: EQUAL
17431: IFFALSE 17441
// sCargo := true ;
17433: LD_ADDR_EXP 96
17437: PUSH
17438: LD_INT 1
17440: ST_TO_ADDR
// if p3 = 29 then
17441: LD_VAR 0 3
17445: PUSH
17446: LD_INT 29
17448: EQUAL
17449: IFFALSE 17459
// sDLaser := true ;
17451: LD_ADDR_EXP 97
17455: PUSH
17456: LD_INT 1
17458: ST_TO_ADDR
// if p3 = 30 then
17459: LD_VAR 0 3
17463: PUSH
17464: LD_INT 30
17466: EQUAL
17467: IFFALSE 17477
// sExchange := true ;
17469: LD_ADDR_EXP 98
17473: PUSH
17474: LD_INT 1
17476: ST_TO_ADDR
// if p3 = 31 then
17477: LD_VAR 0 3
17481: PUSH
17482: LD_INT 31
17484: EQUAL
17485: IFFALSE 17495
// sFac := true ;
17487: LD_ADDR_EXP 99
17491: PUSH
17492: LD_INT 1
17494: ST_TO_ADDR
// if p3 = 32 then
17495: LD_VAR 0 3
17499: PUSH
17500: LD_INT 32
17502: EQUAL
17503: IFFALSE 17513
// sPower := true ;
17505: LD_ADDR_EXP 100
17509: PUSH
17510: LD_INT 1
17512: ST_TO_ADDR
// if p3 = 33 then
17513: LD_VAR 0 3
17517: PUSH
17518: LD_INT 33
17520: EQUAL
17521: IFFALSE 17531
// sRandom := true ;
17523: LD_ADDR_EXP 101
17527: PUSH
17528: LD_INT 1
17530: ST_TO_ADDR
// if p3 = 34 then
17531: LD_VAR 0 3
17535: PUSH
17536: LD_INT 34
17538: EQUAL
17539: IFFALSE 17549
// sShield := true ;
17541: LD_ADDR_EXP 102
17545: PUSH
17546: LD_INT 1
17548: ST_TO_ADDR
// if p3 = 35 then
17549: LD_VAR 0 3
17553: PUSH
17554: LD_INT 35
17556: EQUAL
17557: IFFALSE 17567
// sTime := true ;
17559: LD_ADDR_EXP 103
17563: PUSH
17564: LD_INT 1
17566: ST_TO_ADDR
// if p3 = 36 then
17567: LD_VAR 0 3
17571: PUSH
17572: LD_INT 36
17574: EQUAL
17575: IFFALSE 17585
// sTools := true ;
17577: LD_ADDR_EXP 104
17581: PUSH
17582: LD_INT 1
17584: ST_TO_ADDR
// if p3 = 101 then
17585: LD_VAR 0 3
17589: PUSH
17590: LD_INT 101
17592: EQUAL
17593: IFFALSE 17603
// sSold := true ;
17595: LD_ADDR_EXP 69
17599: PUSH
17600: LD_INT 1
17602: ST_TO_ADDR
// if p3 = 102 then
17603: LD_VAR 0 3
17607: PUSH
17608: LD_INT 102
17610: EQUAL
17611: IFFALSE 17621
// sDiff := true ;
17613: LD_ADDR_EXP 70
17617: PUSH
17618: LD_INT 1
17620: ST_TO_ADDR
// if p3 = 103 then
17621: LD_VAR 0 3
17625: PUSH
17626: LD_INT 103
17628: EQUAL
17629: IFFALSE 17639
// sFog := true ;
17631: LD_ADDR_EXP 73
17635: PUSH
17636: LD_INT 1
17638: ST_TO_ADDR
// if p3 = 104 then
17639: LD_VAR 0 3
17643: PUSH
17644: LD_INT 104
17646: EQUAL
17647: IFFALSE 17657
// sReset := true ;
17649: LD_ADDR_EXP 74
17653: PUSH
17654: LD_INT 1
17656: ST_TO_ADDR
// if p3 = 105 then
17657: LD_VAR 0 3
17661: PUSH
17662: LD_INT 105
17664: EQUAL
17665: IFFALSE 17675
// sSun := true ;
17667: LD_ADDR_EXP 75
17671: PUSH
17672: LD_INT 1
17674: ST_TO_ADDR
// if p3 = 106 then
17675: LD_VAR 0 3
17679: PUSH
17680: LD_INT 106
17682: EQUAL
17683: IFFALSE 17693
// sTiger := true ;
17685: LD_ADDR_EXP 71
17689: PUSH
17690: LD_INT 1
17692: ST_TO_ADDR
// if p3 = 107 then
17693: LD_VAR 0 3
17697: PUSH
17698: LD_INT 107
17700: EQUAL
17701: IFFALSE 17711
// sBomb := true ;
17703: LD_ADDR_EXP 72
17707: PUSH
17708: LD_INT 1
17710: ST_TO_ADDR
// if p3 = 108 then
17711: LD_VAR 0 3
17715: PUSH
17716: LD_INT 108
17718: EQUAL
17719: IFFALSE 17729
// sWound := true ;
17721: LD_ADDR_EXP 80
17725: PUSH
17726: LD_INT 1
17728: ST_TO_ADDR
// if p3 = 109 then
17729: LD_VAR 0 3
17733: PUSH
17734: LD_INT 109
17736: EQUAL
17737: IFFALSE 17747
// sBetray := true ;
17739: LD_ADDR_EXP 84
17743: PUSH
17744: LD_INT 1
17746: ST_TO_ADDR
// if p3 = 110 then
17747: LD_VAR 0 3
17751: PUSH
17752: LD_INT 110
17754: EQUAL
17755: IFFALSE 17765
// sContamin := true ;
17757: LD_ADDR_EXP 85
17761: PUSH
17762: LD_INT 1
17764: ST_TO_ADDR
// if p3 = 111 then
17765: LD_VAR 0 3
17769: PUSH
17770: LD_INT 111
17772: EQUAL
17773: IFFALSE 17783
// sOil := true ;
17775: LD_ADDR_EXP 87
17779: PUSH
17780: LD_INT 1
17782: ST_TO_ADDR
// if p3 = 112 then
17783: LD_VAR 0 3
17787: PUSH
17788: LD_INT 112
17790: EQUAL
17791: IFFALSE 17801
// sStu := true ;
17793: LD_ADDR_EXP 91
17797: PUSH
17798: LD_INT 1
17800: ST_TO_ADDR
// if p3 = 113 then
17801: LD_VAR 0 3
17805: PUSH
17806: LD_INT 113
17808: EQUAL
17809: IFFALSE 17819
// sBazooka := true ;
17811: LD_ADDR_EXP 94
17815: PUSH
17816: LD_INT 1
17818: ST_TO_ADDR
// if p3 = 114 then
17819: LD_VAR 0 3
17823: PUSH
17824: LD_INT 114
17826: EQUAL
17827: IFFALSE 17837
// sMortar := true ;
17829: LD_ADDR_EXP 95
17833: PUSH
17834: LD_INT 1
17836: ST_TO_ADDR
// if p3 = 115 then
17837: LD_VAR 0 3
17841: PUSH
17842: LD_INT 115
17844: EQUAL
17845: IFFALSE 17855
// sRanger := true ;
17847: LD_ADDR_EXP 105
17851: PUSH
17852: LD_INT 1
17854: ST_TO_ADDR
// end ; if p2 = 101 then
17855: LD_VAR 0 2
17859: PUSH
17860: LD_INT 101
17862: EQUAL
17863: IFFALSE 17991
// begin case p3 of 1 :
17865: LD_VAR 0 3
17869: PUSH
17870: LD_INT 1
17872: DOUBLE
17873: EQUAL
17874: IFTRUE 17878
17876: GO 17885
17878: POP
// hHackUnlimitedResources ; 2 :
17879: CALL 29026 0 0
17883: GO 17991
17885: LD_INT 2
17887: DOUBLE
17888: EQUAL
17889: IFTRUE 17893
17891: GO 17900
17893: POP
// hHackSetLevel10 ; 3 :
17894: CALL 29159 0 0
17898: GO 17991
17900: LD_INT 3
17902: DOUBLE
17903: EQUAL
17904: IFTRUE 17908
17906: GO 17915
17908: POP
// hHackSetLevel10YourUnits ; 4 :
17909: CALL 29244 0 0
17913: GO 17991
17915: LD_INT 4
17917: DOUBLE
17918: EQUAL
17919: IFTRUE 17923
17921: GO 17930
17923: POP
// hHackInvincible ; 5 :
17924: CALL 29692 0 0
17928: GO 17991
17930: LD_INT 5
17932: DOUBLE
17933: EQUAL
17934: IFTRUE 17938
17936: GO 17945
17938: POP
// hHackInvisible ; 6 :
17939: CALL 29803 0 0
17943: GO 17991
17945: LD_INT 6
17947: DOUBLE
17948: EQUAL
17949: IFTRUE 17953
17951: GO 17960
17953: POP
// hHackChangeYourSide ; 7 :
17954: CALL 29860 0 0
17958: GO 17991
17960: LD_INT 7
17962: DOUBLE
17963: EQUAL
17964: IFTRUE 17968
17966: GO 17975
17968: POP
// hHackChangeUnitSide ; 8 :
17969: CALL 29902 0 0
17973: GO 17991
17975: LD_INT 8
17977: DOUBLE
17978: EQUAL
17979: IFTRUE 17983
17981: GO 17990
17983: POP
// hHackFog ; end ;
17984: CALL 30003 0 0
17988: GO 17991
17990: POP
// end ; end ;
17991: PPOPN 6
17993: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
17994: GO 17996
17996: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
17997: LD_STRING initStreamRollete();
17999: PPUSH
18000: CALL_OW 559
// InitStreamMode ;
18004: CALL 18013 0 0
// DefineStreamItems ( ) ;
18008: CALL 18453 0 0
// end ;
18012: END
// function InitStreamMode ; begin
18013: LD_INT 0
18015: PPUSH
// streamModeActive := false ;
18016: LD_ADDR_EXP 52
18020: PUSH
18021: LD_INT 0
18023: ST_TO_ADDR
// normalCounter := 36 ;
18024: LD_ADDR_EXP 53
18028: PUSH
18029: LD_INT 36
18031: ST_TO_ADDR
// hardcoreCounter := 16 ;
18032: LD_ADDR_EXP 54
18036: PUSH
18037: LD_INT 16
18039: ST_TO_ADDR
// sRocket := false ;
18040: LD_ADDR_EXP 57
18044: PUSH
18045: LD_INT 0
18047: ST_TO_ADDR
// sSpeed := false ;
18048: LD_ADDR_EXP 56
18052: PUSH
18053: LD_INT 0
18055: ST_TO_ADDR
// sEngine := false ;
18056: LD_ADDR_EXP 58
18060: PUSH
18061: LD_INT 0
18063: ST_TO_ADDR
// sSpec := false ;
18064: LD_ADDR_EXP 55
18068: PUSH
18069: LD_INT 0
18071: ST_TO_ADDR
// sLevel := false ;
18072: LD_ADDR_EXP 59
18076: PUSH
18077: LD_INT 0
18079: ST_TO_ADDR
// sArmoury := false ;
18080: LD_ADDR_EXP 60
18084: PUSH
18085: LD_INT 0
18087: ST_TO_ADDR
// sRadar := false ;
18088: LD_ADDR_EXP 61
18092: PUSH
18093: LD_INT 0
18095: ST_TO_ADDR
// sBunker := false ;
18096: LD_ADDR_EXP 62
18100: PUSH
18101: LD_INT 0
18103: ST_TO_ADDR
// sHack := false ;
18104: LD_ADDR_EXP 63
18108: PUSH
18109: LD_INT 0
18111: ST_TO_ADDR
// sFire := false ;
18112: LD_ADDR_EXP 64
18116: PUSH
18117: LD_INT 0
18119: ST_TO_ADDR
// sRefresh := false ;
18120: LD_ADDR_EXP 65
18124: PUSH
18125: LD_INT 0
18127: ST_TO_ADDR
// sExp := false ;
18128: LD_ADDR_EXP 66
18132: PUSH
18133: LD_INT 0
18135: ST_TO_ADDR
// sDepot := false ;
18136: LD_ADDR_EXP 67
18140: PUSH
18141: LD_INT 0
18143: ST_TO_ADDR
// sFlag := false ;
18144: LD_ADDR_EXP 68
18148: PUSH
18149: LD_INT 0
18151: ST_TO_ADDR
// sKamikadze := false ;
18152: LD_ADDR_EXP 76
18156: PUSH
18157: LD_INT 0
18159: ST_TO_ADDR
// sTroll := false ;
18160: LD_ADDR_EXP 77
18164: PUSH
18165: LD_INT 0
18167: ST_TO_ADDR
// sSlow := false ;
18168: LD_ADDR_EXP 78
18172: PUSH
18173: LD_INT 0
18175: ST_TO_ADDR
// sLack := false ;
18176: LD_ADDR_EXP 79
18180: PUSH
18181: LD_INT 0
18183: ST_TO_ADDR
// sTank := false ;
18184: LD_ADDR_EXP 81
18188: PUSH
18189: LD_INT 0
18191: ST_TO_ADDR
// sRemote := false ;
18192: LD_ADDR_EXP 82
18196: PUSH
18197: LD_INT 0
18199: ST_TO_ADDR
// sPowell := false ;
18200: LD_ADDR_EXP 83
18204: PUSH
18205: LD_INT 0
18207: ST_TO_ADDR
// sTeleport := false ;
18208: LD_ADDR_EXP 86
18212: PUSH
18213: LD_INT 0
18215: ST_TO_ADDR
// sOilTower := false ;
18216: LD_ADDR_EXP 88
18220: PUSH
18221: LD_INT 0
18223: ST_TO_ADDR
// sShovel := false ;
18224: LD_ADDR_EXP 89
18228: PUSH
18229: LD_INT 0
18231: ST_TO_ADDR
// sSheik := false ;
18232: LD_ADDR_EXP 90
18236: PUSH
18237: LD_INT 0
18239: ST_TO_ADDR
// sEarthquake := false ;
18240: LD_ADDR_EXP 92
18244: PUSH
18245: LD_INT 0
18247: ST_TO_ADDR
// sAI := false ;
18248: LD_ADDR_EXP 93
18252: PUSH
18253: LD_INT 0
18255: ST_TO_ADDR
// sCargo := false ;
18256: LD_ADDR_EXP 96
18260: PUSH
18261: LD_INT 0
18263: ST_TO_ADDR
// sDLaser := false ;
18264: LD_ADDR_EXP 97
18268: PUSH
18269: LD_INT 0
18271: ST_TO_ADDR
// sExchange := false ;
18272: LD_ADDR_EXP 98
18276: PUSH
18277: LD_INT 0
18279: ST_TO_ADDR
// sFac := false ;
18280: LD_ADDR_EXP 99
18284: PUSH
18285: LD_INT 0
18287: ST_TO_ADDR
// sPower := false ;
18288: LD_ADDR_EXP 100
18292: PUSH
18293: LD_INT 0
18295: ST_TO_ADDR
// sRandom := false ;
18296: LD_ADDR_EXP 101
18300: PUSH
18301: LD_INT 0
18303: ST_TO_ADDR
// sShield := false ;
18304: LD_ADDR_EXP 102
18308: PUSH
18309: LD_INT 0
18311: ST_TO_ADDR
// sTime := false ;
18312: LD_ADDR_EXP 103
18316: PUSH
18317: LD_INT 0
18319: ST_TO_ADDR
// sTools := false ;
18320: LD_ADDR_EXP 104
18324: PUSH
18325: LD_INT 0
18327: ST_TO_ADDR
// sSold := false ;
18328: LD_ADDR_EXP 69
18332: PUSH
18333: LD_INT 0
18335: ST_TO_ADDR
// sDiff := false ;
18336: LD_ADDR_EXP 70
18340: PUSH
18341: LD_INT 0
18343: ST_TO_ADDR
// sFog := false ;
18344: LD_ADDR_EXP 73
18348: PUSH
18349: LD_INT 0
18351: ST_TO_ADDR
// sReset := false ;
18352: LD_ADDR_EXP 74
18356: PUSH
18357: LD_INT 0
18359: ST_TO_ADDR
// sSun := false ;
18360: LD_ADDR_EXP 75
18364: PUSH
18365: LD_INT 0
18367: ST_TO_ADDR
// sTiger := false ;
18368: LD_ADDR_EXP 71
18372: PUSH
18373: LD_INT 0
18375: ST_TO_ADDR
// sBomb := false ;
18376: LD_ADDR_EXP 72
18380: PUSH
18381: LD_INT 0
18383: ST_TO_ADDR
// sWound := false ;
18384: LD_ADDR_EXP 80
18388: PUSH
18389: LD_INT 0
18391: ST_TO_ADDR
// sBetray := false ;
18392: LD_ADDR_EXP 84
18396: PUSH
18397: LD_INT 0
18399: ST_TO_ADDR
// sContamin := false ;
18400: LD_ADDR_EXP 85
18404: PUSH
18405: LD_INT 0
18407: ST_TO_ADDR
// sOil := false ;
18408: LD_ADDR_EXP 87
18412: PUSH
18413: LD_INT 0
18415: ST_TO_ADDR
// sStu := false ;
18416: LD_ADDR_EXP 91
18420: PUSH
18421: LD_INT 0
18423: ST_TO_ADDR
// sBazooka := false ;
18424: LD_ADDR_EXP 94
18428: PUSH
18429: LD_INT 0
18431: ST_TO_ADDR
// sMortar := false ;
18432: LD_ADDR_EXP 95
18436: PUSH
18437: LD_INT 0
18439: ST_TO_ADDR
// sRanger := false ;
18440: LD_ADDR_EXP 105
18444: PUSH
18445: LD_INT 0
18447: ST_TO_ADDR
// end ;
18448: LD_VAR 0 1
18452: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
18453: LD_INT 0
18455: PPUSH
18456: PPUSH
18457: PPUSH
18458: PPUSH
18459: PPUSH
// result := [ ] ;
18460: LD_ADDR_VAR 0 1
18464: PUSH
18465: EMPTY
18466: ST_TO_ADDR
// if campaign_id = 1 then
18467: LD_OWVAR 69
18471: PUSH
18472: LD_INT 1
18474: EQUAL
18475: IFFALSE 21413
// begin case mission_number of 1 :
18477: LD_OWVAR 70
18481: PUSH
18482: LD_INT 1
18484: DOUBLE
18485: EQUAL
18486: IFTRUE 18490
18488: GO 18554
18490: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
18491: LD_ADDR_VAR 0 1
18495: PUSH
18496: LD_INT 2
18498: PUSH
18499: LD_INT 4
18501: PUSH
18502: LD_INT 11
18504: PUSH
18505: LD_INT 12
18507: PUSH
18508: LD_INT 15
18510: PUSH
18511: LD_INT 16
18513: PUSH
18514: LD_INT 22
18516: PUSH
18517: LD_INT 23
18519: PUSH
18520: LD_INT 26
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: PUSH
18534: LD_INT 101
18536: PUSH
18537: LD_INT 102
18539: PUSH
18540: LD_INT 106
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: LIST
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: ST_TO_ADDR
18552: GO 21411
18554: LD_INT 2
18556: DOUBLE
18557: EQUAL
18558: IFTRUE 18562
18560: GO 18634
18562: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
18563: LD_ADDR_VAR 0 1
18567: PUSH
18568: LD_INT 2
18570: PUSH
18571: LD_INT 4
18573: PUSH
18574: LD_INT 11
18576: PUSH
18577: LD_INT 12
18579: PUSH
18580: LD_INT 15
18582: PUSH
18583: LD_INT 16
18585: PUSH
18586: LD_INT 22
18588: PUSH
18589: LD_INT 23
18591: PUSH
18592: LD_INT 26
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: PUSH
18606: LD_INT 101
18608: PUSH
18609: LD_INT 102
18611: PUSH
18612: LD_INT 105
18614: PUSH
18615: LD_INT 106
18617: PUSH
18618: LD_INT 108
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: ST_TO_ADDR
18632: GO 21411
18634: LD_INT 3
18636: DOUBLE
18637: EQUAL
18638: IFTRUE 18642
18640: GO 18718
18642: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
18643: LD_ADDR_VAR 0 1
18647: PUSH
18648: LD_INT 2
18650: PUSH
18651: LD_INT 4
18653: PUSH
18654: LD_INT 5
18656: PUSH
18657: LD_INT 11
18659: PUSH
18660: LD_INT 12
18662: PUSH
18663: LD_INT 15
18665: PUSH
18666: LD_INT 16
18668: PUSH
18669: LD_INT 22
18671: PUSH
18672: LD_INT 26
18674: PUSH
18675: LD_INT 36
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 101
18692: PUSH
18693: LD_INT 102
18695: PUSH
18696: LD_INT 105
18698: PUSH
18699: LD_INT 106
18701: PUSH
18702: LD_INT 108
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: ST_TO_ADDR
18716: GO 21411
18718: LD_INT 4
18720: DOUBLE
18721: EQUAL
18722: IFTRUE 18726
18724: GO 18810
18726: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
18727: LD_ADDR_VAR 0 1
18731: PUSH
18732: LD_INT 2
18734: PUSH
18735: LD_INT 4
18737: PUSH
18738: LD_INT 5
18740: PUSH
18741: LD_INT 8
18743: PUSH
18744: LD_INT 11
18746: PUSH
18747: LD_INT 12
18749: PUSH
18750: LD_INT 15
18752: PUSH
18753: LD_INT 16
18755: PUSH
18756: LD_INT 22
18758: PUSH
18759: LD_INT 23
18761: PUSH
18762: LD_INT 26
18764: PUSH
18765: LD_INT 36
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 101
18784: PUSH
18785: LD_INT 102
18787: PUSH
18788: LD_INT 105
18790: PUSH
18791: LD_INT 106
18793: PUSH
18794: LD_INT 108
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: ST_TO_ADDR
18808: GO 21411
18810: LD_INT 5
18812: DOUBLE
18813: EQUAL
18814: IFTRUE 18818
18816: GO 18918
18818: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
18819: LD_ADDR_VAR 0 1
18823: PUSH
18824: LD_INT 2
18826: PUSH
18827: LD_INT 4
18829: PUSH
18830: LD_INT 5
18832: PUSH
18833: LD_INT 6
18835: PUSH
18836: LD_INT 8
18838: PUSH
18839: LD_INT 11
18841: PUSH
18842: LD_INT 12
18844: PUSH
18845: LD_INT 15
18847: PUSH
18848: LD_INT 16
18850: PUSH
18851: LD_INT 22
18853: PUSH
18854: LD_INT 23
18856: PUSH
18857: LD_INT 25
18859: PUSH
18860: LD_INT 26
18862: PUSH
18863: LD_INT 36
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: PUSH
18882: LD_INT 101
18884: PUSH
18885: LD_INT 102
18887: PUSH
18888: LD_INT 105
18890: PUSH
18891: LD_INT 106
18893: PUSH
18894: LD_INT 108
18896: PUSH
18897: LD_INT 109
18899: PUSH
18900: LD_INT 112
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: ST_TO_ADDR
18916: GO 21411
18918: LD_INT 6
18920: DOUBLE
18921: EQUAL
18922: IFTRUE 18926
18924: GO 19046
18926: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
18927: LD_ADDR_VAR 0 1
18931: PUSH
18932: LD_INT 2
18934: PUSH
18935: LD_INT 4
18937: PUSH
18938: LD_INT 5
18940: PUSH
18941: LD_INT 6
18943: PUSH
18944: LD_INT 8
18946: PUSH
18947: LD_INT 11
18949: PUSH
18950: LD_INT 12
18952: PUSH
18953: LD_INT 15
18955: PUSH
18956: LD_INT 16
18958: PUSH
18959: LD_INT 20
18961: PUSH
18962: LD_INT 21
18964: PUSH
18965: LD_INT 22
18967: PUSH
18968: LD_INT 23
18970: PUSH
18971: LD_INT 25
18973: PUSH
18974: LD_INT 26
18976: PUSH
18977: LD_INT 30
18979: PUSH
18980: LD_INT 31
18982: PUSH
18983: LD_INT 32
18985: PUSH
18986: LD_INT 36
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: PUSH
19010: LD_INT 101
19012: PUSH
19013: LD_INT 102
19015: PUSH
19016: LD_INT 105
19018: PUSH
19019: LD_INT 106
19021: PUSH
19022: LD_INT 108
19024: PUSH
19025: LD_INT 109
19027: PUSH
19028: LD_INT 112
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: ST_TO_ADDR
19044: GO 21411
19046: LD_INT 7
19048: DOUBLE
19049: EQUAL
19050: IFTRUE 19054
19052: GO 19154
19054: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
19055: LD_ADDR_VAR 0 1
19059: PUSH
19060: LD_INT 2
19062: PUSH
19063: LD_INT 4
19065: PUSH
19066: LD_INT 5
19068: PUSH
19069: LD_INT 7
19071: PUSH
19072: LD_INT 11
19074: PUSH
19075: LD_INT 12
19077: PUSH
19078: LD_INT 15
19080: PUSH
19081: LD_INT 16
19083: PUSH
19084: LD_INT 20
19086: PUSH
19087: LD_INT 21
19089: PUSH
19090: LD_INT 22
19092: PUSH
19093: LD_INT 23
19095: PUSH
19096: LD_INT 25
19098: PUSH
19099: LD_INT 26
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 101
19120: PUSH
19121: LD_INT 102
19123: PUSH
19124: LD_INT 103
19126: PUSH
19127: LD_INT 105
19129: PUSH
19130: LD_INT 106
19132: PUSH
19133: LD_INT 108
19135: PUSH
19136: LD_INT 112
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: ST_TO_ADDR
19152: GO 21411
19154: LD_INT 8
19156: DOUBLE
19157: EQUAL
19158: IFTRUE 19162
19160: GO 19290
19162: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
19163: LD_ADDR_VAR 0 1
19167: PUSH
19168: LD_INT 2
19170: PUSH
19171: LD_INT 4
19173: PUSH
19174: LD_INT 5
19176: PUSH
19177: LD_INT 6
19179: PUSH
19180: LD_INT 7
19182: PUSH
19183: LD_INT 8
19185: PUSH
19186: LD_INT 11
19188: PUSH
19189: LD_INT 12
19191: PUSH
19192: LD_INT 15
19194: PUSH
19195: LD_INT 16
19197: PUSH
19198: LD_INT 20
19200: PUSH
19201: LD_INT 21
19203: PUSH
19204: LD_INT 22
19206: PUSH
19207: LD_INT 23
19209: PUSH
19210: LD_INT 25
19212: PUSH
19213: LD_INT 26
19215: PUSH
19216: LD_INT 30
19218: PUSH
19219: LD_INT 31
19221: PUSH
19222: LD_INT 32
19224: PUSH
19225: LD_INT 36
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: PUSH
19250: LD_INT 101
19252: PUSH
19253: LD_INT 102
19255: PUSH
19256: LD_INT 103
19258: PUSH
19259: LD_INT 105
19261: PUSH
19262: LD_INT 106
19264: PUSH
19265: LD_INT 108
19267: PUSH
19268: LD_INT 109
19270: PUSH
19271: LD_INT 112
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: ST_TO_ADDR
19288: GO 21411
19290: LD_INT 9
19292: DOUBLE
19293: EQUAL
19294: IFTRUE 19298
19296: GO 19434
19298: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
19299: LD_ADDR_VAR 0 1
19303: PUSH
19304: LD_INT 2
19306: PUSH
19307: LD_INT 4
19309: PUSH
19310: LD_INT 5
19312: PUSH
19313: LD_INT 6
19315: PUSH
19316: LD_INT 7
19318: PUSH
19319: LD_INT 8
19321: PUSH
19322: LD_INT 11
19324: PUSH
19325: LD_INT 12
19327: PUSH
19328: LD_INT 15
19330: PUSH
19331: LD_INT 16
19333: PUSH
19334: LD_INT 20
19336: PUSH
19337: LD_INT 21
19339: PUSH
19340: LD_INT 22
19342: PUSH
19343: LD_INT 23
19345: PUSH
19346: LD_INT 25
19348: PUSH
19349: LD_INT 26
19351: PUSH
19352: LD_INT 28
19354: PUSH
19355: LD_INT 30
19357: PUSH
19358: LD_INT 31
19360: PUSH
19361: LD_INT 32
19363: PUSH
19364: LD_INT 36
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: PUSH
19390: LD_INT 101
19392: PUSH
19393: LD_INT 102
19395: PUSH
19396: LD_INT 103
19398: PUSH
19399: LD_INT 105
19401: PUSH
19402: LD_INT 106
19404: PUSH
19405: LD_INT 108
19407: PUSH
19408: LD_INT 109
19410: PUSH
19411: LD_INT 112
19413: PUSH
19414: LD_INT 114
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: ST_TO_ADDR
19432: GO 21411
19434: LD_INT 10
19436: DOUBLE
19437: EQUAL
19438: IFTRUE 19442
19440: GO 19626
19442: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
19443: LD_ADDR_VAR 0 1
19447: PUSH
19448: LD_INT 2
19450: PUSH
19451: LD_INT 4
19453: PUSH
19454: LD_INT 5
19456: PUSH
19457: LD_INT 6
19459: PUSH
19460: LD_INT 7
19462: PUSH
19463: LD_INT 8
19465: PUSH
19466: LD_INT 9
19468: PUSH
19469: LD_INT 10
19471: PUSH
19472: LD_INT 11
19474: PUSH
19475: LD_INT 12
19477: PUSH
19478: LD_INT 13
19480: PUSH
19481: LD_INT 14
19483: PUSH
19484: LD_INT 15
19486: PUSH
19487: LD_INT 16
19489: PUSH
19490: LD_INT 17
19492: PUSH
19493: LD_INT 18
19495: PUSH
19496: LD_INT 19
19498: PUSH
19499: LD_INT 20
19501: PUSH
19502: LD_INT 21
19504: PUSH
19505: LD_INT 22
19507: PUSH
19508: LD_INT 23
19510: PUSH
19511: LD_INT 24
19513: PUSH
19514: LD_INT 25
19516: PUSH
19517: LD_INT 26
19519: PUSH
19520: LD_INT 28
19522: PUSH
19523: LD_INT 30
19525: PUSH
19526: LD_INT 31
19528: PUSH
19529: LD_INT 32
19531: PUSH
19532: LD_INT 36
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: PUSH
19566: LD_INT 101
19568: PUSH
19569: LD_INT 102
19571: PUSH
19572: LD_INT 103
19574: PUSH
19575: LD_INT 104
19577: PUSH
19578: LD_INT 105
19580: PUSH
19581: LD_INT 106
19583: PUSH
19584: LD_INT 107
19586: PUSH
19587: LD_INT 108
19589: PUSH
19590: LD_INT 109
19592: PUSH
19593: LD_INT 110
19595: PUSH
19596: LD_INT 111
19598: PUSH
19599: LD_INT 112
19601: PUSH
19602: LD_INT 114
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: ST_TO_ADDR
19624: GO 21411
19626: LD_INT 11
19628: DOUBLE
19629: EQUAL
19630: IFTRUE 19634
19632: GO 19826
19634: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
19635: LD_ADDR_VAR 0 1
19639: PUSH
19640: LD_INT 2
19642: PUSH
19643: LD_INT 3
19645: PUSH
19646: LD_INT 4
19648: PUSH
19649: LD_INT 5
19651: PUSH
19652: LD_INT 6
19654: PUSH
19655: LD_INT 7
19657: PUSH
19658: LD_INT 8
19660: PUSH
19661: LD_INT 9
19663: PUSH
19664: LD_INT 10
19666: PUSH
19667: LD_INT 11
19669: PUSH
19670: LD_INT 12
19672: PUSH
19673: LD_INT 13
19675: PUSH
19676: LD_INT 14
19678: PUSH
19679: LD_INT 15
19681: PUSH
19682: LD_INT 16
19684: PUSH
19685: LD_INT 17
19687: PUSH
19688: LD_INT 18
19690: PUSH
19691: LD_INT 19
19693: PUSH
19694: LD_INT 20
19696: PUSH
19697: LD_INT 21
19699: PUSH
19700: LD_INT 22
19702: PUSH
19703: LD_INT 23
19705: PUSH
19706: LD_INT 24
19708: PUSH
19709: LD_INT 25
19711: PUSH
19712: LD_INT 26
19714: PUSH
19715: LD_INT 28
19717: PUSH
19718: LD_INT 30
19720: PUSH
19721: LD_INT 31
19723: PUSH
19724: LD_INT 32
19726: PUSH
19727: LD_INT 34
19729: PUSH
19730: LD_INT 36
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: PUSH
19766: LD_INT 101
19768: PUSH
19769: LD_INT 102
19771: PUSH
19772: LD_INT 103
19774: PUSH
19775: LD_INT 104
19777: PUSH
19778: LD_INT 105
19780: PUSH
19781: LD_INT 106
19783: PUSH
19784: LD_INT 107
19786: PUSH
19787: LD_INT 108
19789: PUSH
19790: LD_INT 109
19792: PUSH
19793: LD_INT 110
19795: PUSH
19796: LD_INT 111
19798: PUSH
19799: LD_INT 112
19801: PUSH
19802: LD_INT 114
19804: PUSH
19805: EMPTY
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: ST_TO_ADDR
19824: GO 21411
19826: LD_INT 12
19828: DOUBLE
19829: EQUAL
19830: IFTRUE 19834
19832: GO 20042
19834: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
19835: LD_ADDR_VAR 0 1
19839: PUSH
19840: LD_INT 1
19842: PUSH
19843: LD_INT 2
19845: PUSH
19846: LD_INT 3
19848: PUSH
19849: LD_INT 4
19851: PUSH
19852: LD_INT 5
19854: PUSH
19855: LD_INT 6
19857: PUSH
19858: LD_INT 7
19860: PUSH
19861: LD_INT 8
19863: PUSH
19864: LD_INT 9
19866: PUSH
19867: LD_INT 10
19869: PUSH
19870: LD_INT 11
19872: PUSH
19873: LD_INT 12
19875: PUSH
19876: LD_INT 13
19878: PUSH
19879: LD_INT 14
19881: PUSH
19882: LD_INT 15
19884: PUSH
19885: LD_INT 16
19887: PUSH
19888: LD_INT 17
19890: PUSH
19891: LD_INT 18
19893: PUSH
19894: LD_INT 19
19896: PUSH
19897: LD_INT 20
19899: PUSH
19900: LD_INT 21
19902: PUSH
19903: LD_INT 22
19905: PUSH
19906: LD_INT 23
19908: PUSH
19909: LD_INT 24
19911: PUSH
19912: LD_INT 25
19914: PUSH
19915: LD_INT 26
19917: PUSH
19918: LD_INT 27
19920: PUSH
19921: LD_INT 28
19923: PUSH
19924: LD_INT 30
19926: PUSH
19927: LD_INT 31
19929: PUSH
19930: LD_INT 32
19932: PUSH
19933: LD_INT 33
19935: PUSH
19936: LD_INT 34
19938: PUSH
19939: LD_INT 36
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: PUSH
19978: LD_INT 101
19980: PUSH
19981: LD_INT 102
19983: PUSH
19984: LD_INT 103
19986: PUSH
19987: LD_INT 104
19989: PUSH
19990: LD_INT 105
19992: PUSH
19993: LD_INT 106
19995: PUSH
19996: LD_INT 107
19998: PUSH
19999: LD_INT 108
20001: PUSH
20002: LD_INT 109
20004: PUSH
20005: LD_INT 110
20007: PUSH
20008: LD_INT 111
20010: PUSH
20011: LD_INT 112
20013: PUSH
20014: LD_INT 113
20016: PUSH
20017: LD_INT 114
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: ST_TO_ADDR
20040: GO 21411
20042: LD_INT 13
20044: DOUBLE
20045: EQUAL
20046: IFTRUE 20050
20048: GO 20246
20050: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
20051: LD_ADDR_VAR 0 1
20055: PUSH
20056: LD_INT 1
20058: PUSH
20059: LD_INT 2
20061: PUSH
20062: LD_INT 3
20064: PUSH
20065: LD_INT 4
20067: PUSH
20068: LD_INT 5
20070: PUSH
20071: LD_INT 8
20073: PUSH
20074: LD_INT 9
20076: PUSH
20077: LD_INT 10
20079: PUSH
20080: LD_INT 11
20082: PUSH
20083: LD_INT 12
20085: PUSH
20086: LD_INT 14
20088: PUSH
20089: LD_INT 15
20091: PUSH
20092: LD_INT 16
20094: PUSH
20095: LD_INT 17
20097: PUSH
20098: LD_INT 18
20100: PUSH
20101: LD_INT 19
20103: PUSH
20104: LD_INT 20
20106: PUSH
20107: LD_INT 21
20109: PUSH
20110: LD_INT 22
20112: PUSH
20113: LD_INT 23
20115: PUSH
20116: LD_INT 24
20118: PUSH
20119: LD_INT 25
20121: PUSH
20122: LD_INT 26
20124: PUSH
20125: LD_INT 27
20127: PUSH
20128: LD_INT 28
20130: PUSH
20131: LD_INT 30
20133: PUSH
20134: LD_INT 31
20136: PUSH
20137: LD_INT 32
20139: PUSH
20140: LD_INT 33
20142: PUSH
20143: LD_INT 34
20145: PUSH
20146: LD_INT 36
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: PUSH
20182: LD_INT 101
20184: PUSH
20185: LD_INT 102
20187: PUSH
20188: LD_INT 103
20190: PUSH
20191: LD_INT 104
20193: PUSH
20194: LD_INT 105
20196: PUSH
20197: LD_INT 106
20199: PUSH
20200: LD_INT 107
20202: PUSH
20203: LD_INT 108
20205: PUSH
20206: LD_INT 109
20208: PUSH
20209: LD_INT 110
20211: PUSH
20212: LD_INT 111
20214: PUSH
20215: LD_INT 112
20217: PUSH
20218: LD_INT 113
20220: PUSH
20221: LD_INT 114
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: ST_TO_ADDR
20244: GO 21411
20246: LD_INT 14
20248: DOUBLE
20249: EQUAL
20250: IFTRUE 20254
20252: GO 20466
20254: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
20255: LD_ADDR_VAR 0 1
20259: PUSH
20260: LD_INT 1
20262: PUSH
20263: LD_INT 2
20265: PUSH
20266: LD_INT 3
20268: PUSH
20269: LD_INT 4
20271: PUSH
20272: LD_INT 5
20274: PUSH
20275: LD_INT 6
20277: PUSH
20278: LD_INT 7
20280: PUSH
20281: LD_INT 8
20283: PUSH
20284: LD_INT 9
20286: PUSH
20287: LD_INT 10
20289: PUSH
20290: LD_INT 11
20292: PUSH
20293: LD_INT 12
20295: PUSH
20296: LD_INT 13
20298: PUSH
20299: LD_INT 14
20301: PUSH
20302: LD_INT 15
20304: PUSH
20305: LD_INT 16
20307: PUSH
20308: LD_INT 17
20310: PUSH
20311: LD_INT 18
20313: PUSH
20314: LD_INT 19
20316: PUSH
20317: LD_INT 20
20319: PUSH
20320: LD_INT 21
20322: PUSH
20323: LD_INT 22
20325: PUSH
20326: LD_INT 23
20328: PUSH
20329: LD_INT 24
20331: PUSH
20332: LD_INT 25
20334: PUSH
20335: LD_INT 26
20337: PUSH
20338: LD_INT 27
20340: PUSH
20341: LD_INT 28
20343: PUSH
20344: LD_INT 29
20346: PUSH
20347: LD_INT 30
20349: PUSH
20350: LD_INT 31
20352: PUSH
20353: LD_INT 32
20355: PUSH
20356: LD_INT 33
20358: PUSH
20359: LD_INT 34
20361: PUSH
20362: LD_INT 36
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 101
20404: PUSH
20405: LD_INT 102
20407: PUSH
20408: LD_INT 103
20410: PUSH
20411: LD_INT 104
20413: PUSH
20414: LD_INT 105
20416: PUSH
20417: LD_INT 106
20419: PUSH
20420: LD_INT 107
20422: PUSH
20423: LD_INT 108
20425: PUSH
20426: LD_INT 109
20428: PUSH
20429: LD_INT 110
20431: PUSH
20432: LD_INT 111
20434: PUSH
20435: LD_INT 112
20437: PUSH
20438: LD_INT 113
20440: PUSH
20441: LD_INT 114
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: ST_TO_ADDR
20464: GO 21411
20466: LD_INT 15
20468: DOUBLE
20469: EQUAL
20470: IFTRUE 20474
20472: GO 20686
20474: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
20475: LD_ADDR_VAR 0 1
20479: PUSH
20480: LD_INT 1
20482: PUSH
20483: LD_INT 2
20485: PUSH
20486: LD_INT 3
20488: PUSH
20489: LD_INT 4
20491: PUSH
20492: LD_INT 5
20494: PUSH
20495: LD_INT 6
20497: PUSH
20498: LD_INT 7
20500: PUSH
20501: LD_INT 8
20503: PUSH
20504: LD_INT 9
20506: PUSH
20507: LD_INT 10
20509: PUSH
20510: LD_INT 11
20512: PUSH
20513: LD_INT 12
20515: PUSH
20516: LD_INT 13
20518: PUSH
20519: LD_INT 14
20521: PUSH
20522: LD_INT 15
20524: PUSH
20525: LD_INT 16
20527: PUSH
20528: LD_INT 17
20530: PUSH
20531: LD_INT 18
20533: PUSH
20534: LD_INT 19
20536: PUSH
20537: LD_INT 20
20539: PUSH
20540: LD_INT 21
20542: PUSH
20543: LD_INT 22
20545: PUSH
20546: LD_INT 23
20548: PUSH
20549: LD_INT 24
20551: PUSH
20552: LD_INT 25
20554: PUSH
20555: LD_INT 26
20557: PUSH
20558: LD_INT 27
20560: PUSH
20561: LD_INT 28
20563: PUSH
20564: LD_INT 29
20566: PUSH
20567: LD_INT 30
20569: PUSH
20570: LD_INT 31
20572: PUSH
20573: LD_INT 32
20575: PUSH
20576: LD_INT 33
20578: PUSH
20579: LD_INT 34
20581: PUSH
20582: LD_INT 36
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: PUSH
20622: LD_INT 101
20624: PUSH
20625: LD_INT 102
20627: PUSH
20628: LD_INT 103
20630: PUSH
20631: LD_INT 104
20633: PUSH
20634: LD_INT 105
20636: PUSH
20637: LD_INT 106
20639: PUSH
20640: LD_INT 107
20642: PUSH
20643: LD_INT 108
20645: PUSH
20646: LD_INT 109
20648: PUSH
20649: LD_INT 110
20651: PUSH
20652: LD_INT 111
20654: PUSH
20655: LD_INT 112
20657: PUSH
20658: LD_INT 113
20660: PUSH
20661: LD_INT 114
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: ST_TO_ADDR
20684: GO 21411
20686: LD_INT 16
20688: DOUBLE
20689: EQUAL
20690: IFTRUE 20694
20692: GO 20818
20694: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
20695: LD_ADDR_VAR 0 1
20699: PUSH
20700: LD_INT 2
20702: PUSH
20703: LD_INT 4
20705: PUSH
20706: LD_INT 5
20708: PUSH
20709: LD_INT 7
20711: PUSH
20712: LD_INT 11
20714: PUSH
20715: LD_INT 12
20717: PUSH
20718: LD_INT 15
20720: PUSH
20721: LD_INT 16
20723: PUSH
20724: LD_INT 20
20726: PUSH
20727: LD_INT 21
20729: PUSH
20730: LD_INT 22
20732: PUSH
20733: LD_INT 23
20735: PUSH
20736: LD_INT 25
20738: PUSH
20739: LD_INT 26
20741: PUSH
20742: LD_INT 30
20744: PUSH
20745: LD_INT 31
20747: PUSH
20748: LD_INT 32
20750: PUSH
20751: LD_INT 33
20753: PUSH
20754: LD_INT 34
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: PUSH
20778: LD_INT 101
20780: PUSH
20781: LD_INT 102
20783: PUSH
20784: LD_INT 103
20786: PUSH
20787: LD_INT 106
20789: PUSH
20790: LD_INT 108
20792: PUSH
20793: LD_INT 112
20795: PUSH
20796: LD_INT 113
20798: PUSH
20799: LD_INT 114
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: ST_TO_ADDR
20816: GO 21411
20818: LD_INT 17
20820: DOUBLE
20821: EQUAL
20822: IFTRUE 20826
20824: GO 21038
20826: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
20827: LD_ADDR_VAR 0 1
20831: PUSH
20832: LD_INT 1
20834: PUSH
20835: LD_INT 2
20837: PUSH
20838: LD_INT 3
20840: PUSH
20841: LD_INT 4
20843: PUSH
20844: LD_INT 5
20846: PUSH
20847: LD_INT 6
20849: PUSH
20850: LD_INT 7
20852: PUSH
20853: LD_INT 8
20855: PUSH
20856: LD_INT 9
20858: PUSH
20859: LD_INT 10
20861: PUSH
20862: LD_INT 11
20864: PUSH
20865: LD_INT 12
20867: PUSH
20868: LD_INT 13
20870: PUSH
20871: LD_INT 14
20873: PUSH
20874: LD_INT 15
20876: PUSH
20877: LD_INT 16
20879: PUSH
20880: LD_INT 17
20882: PUSH
20883: LD_INT 18
20885: PUSH
20886: LD_INT 19
20888: PUSH
20889: LD_INT 20
20891: PUSH
20892: LD_INT 21
20894: PUSH
20895: LD_INT 22
20897: PUSH
20898: LD_INT 23
20900: PUSH
20901: LD_INT 24
20903: PUSH
20904: LD_INT 25
20906: PUSH
20907: LD_INT 26
20909: PUSH
20910: LD_INT 27
20912: PUSH
20913: LD_INT 28
20915: PUSH
20916: LD_INT 29
20918: PUSH
20919: LD_INT 30
20921: PUSH
20922: LD_INT 31
20924: PUSH
20925: LD_INT 32
20927: PUSH
20928: LD_INT 33
20930: PUSH
20931: LD_INT 34
20933: PUSH
20934: LD_INT 36
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 101
20976: PUSH
20977: LD_INT 102
20979: PUSH
20980: LD_INT 103
20982: PUSH
20983: LD_INT 104
20985: PUSH
20986: LD_INT 105
20988: PUSH
20989: LD_INT 106
20991: PUSH
20992: LD_INT 107
20994: PUSH
20995: LD_INT 108
20997: PUSH
20998: LD_INT 109
21000: PUSH
21001: LD_INT 110
21003: PUSH
21004: LD_INT 111
21006: PUSH
21007: LD_INT 112
21009: PUSH
21010: LD_INT 113
21012: PUSH
21013: LD_INT 114
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: ST_TO_ADDR
21036: GO 21411
21038: LD_INT 18
21040: DOUBLE
21041: EQUAL
21042: IFTRUE 21046
21044: GO 21182
21046: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
21047: LD_ADDR_VAR 0 1
21051: PUSH
21052: LD_INT 2
21054: PUSH
21055: LD_INT 4
21057: PUSH
21058: LD_INT 5
21060: PUSH
21061: LD_INT 7
21063: PUSH
21064: LD_INT 11
21066: PUSH
21067: LD_INT 12
21069: PUSH
21070: LD_INT 15
21072: PUSH
21073: LD_INT 16
21075: PUSH
21076: LD_INT 20
21078: PUSH
21079: LD_INT 21
21081: PUSH
21082: LD_INT 22
21084: PUSH
21085: LD_INT 23
21087: PUSH
21088: LD_INT 25
21090: PUSH
21091: LD_INT 26
21093: PUSH
21094: LD_INT 30
21096: PUSH
21097: LD_INT 31
21099: PUSH
21100: LD_INT 32
21102: PUSH
21103: LD_INT 33
21105: PUSH
21106: LD_INT 34
21108: PUSH
21109: LD_INT 35
21111: PUSH
21112: LD_INT 36
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 101
21140: PUSH
21141: LD_INT 102
21143: PUSH
21144: LD_INT 103
21146: PUSH
21147: LD_INT 106
21149: PUSH
21150: LD_INT 108
21152: PUSH
21153: LD_INT 112
21155: PUSH
21156: LD_INT 113
21158: PUSH
21159: LD_INT 114
21161: PUSH
21162: LD_INT 115
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: ST_TO_ADDR
21180: GO 21411
21182: LD_INT 19
21184: DOUBLE
21185: EQUAL
21186: IFTRUE 21190
21188: GO 21410
21190: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
21191: LD_ADDR_VAR 0 1
21195: PUSH
21196: LD_INT 1
21198: PUSH
21199: LD_INT 2
21201: PUSH
21202: LD_INT 3
21204: PUSH
21205: LD_INT 4
21207: PUSH
21208: LD_INT 5
21210: PUSH
21211: LD_INT 6
21213: PUSH
21214: LD_INT 7
21216: PUSH
21217: LD_INT 8
21219: PUSH
21220: LD_INT 9
21222: PUSH
21223: LD_INT 10
21225: PUSH
21226: LD_INT 11
21228: PUSH
21229: LD_INT 12
21231: PUSH
21232: LD_INT 13
21234: PUSH
21235: LD_INT 14
21237: PUSH
21238: LD_INT 15
21240: PUSH
21241: LD_INT 16
21243: PUSH
21244: LD_INT 17
21246: PUSH
21247: LD_INT 18
21249: PUSH
21250: LD_INT 19
21252: PUSH
21253: LD_INT 20
21255: PUSH
21256: LD_INT 21
21258: PUSH
21259: LD_INT 22
21261: PUSH
21262: LD_INT 23
21264: PUSH
21265: LD_INT 24
21267: PUSH
21268: LD_INT 25
21270: PUSH
21271: LD_INT 26
21273: PUSH
21274: LD_INT 27
21276: PUSH
21277: LD_INT 28
21279: PUSH
21280: LD_INT 29
21282: PUSH
21283: LD_INT 30
21285: PUSH
21286: LD_INT 31
21288: PUSH
21289: LD_INT 32
21291: PUSH
21292: LD_INT 33
21294: PUSH
21295: LD_INT 34
21297: PUSH
21298: LD_INT 35
21300: PUSH
21301: LD_INT 36
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: PUSH
21342: LD_INT 101
21344: PUSH
21345: LD_INT 102
21347: PUSH
21348: LD_INT 103
21350: PUSH
21351: LD_INT 104
21353: PUSH
21354: LD_INT 105
21356: PUSH
21357: LD_INT 106
21359: PUSH
21360: LD_INT 107
21362: PUSH
21363: LD_INT 108
21365: PUSH
21366: LD_INT 109
21368: PUSH
21369: LD_INT 110
21371: PUSH
21372: LD_INT 111
21374: PUSH
21375: LD_INT 112
21377: PUSH
21378: LD_INT 113
21380: PUSH
21381: LD_INT 114
21383: PUSH
21384: LD_INT 115
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: ST_TO_ADDR
21408: GO 21411
21410: POP
// end else
21411: GO 21630
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
21413: LD_ADDR_VAR 0 1
21417: PUSH
21418: LD_INT 1
21420: PUSH
21421: LD_INT 2
21423: PUSH
21424: LD_INT 3
21426: PUSH
21427: LD_INT 4
21429: PUSH
21430: LD_INT 5
21432: PUSH
21433: LD_INT 6
21435: PUSH
21436: LD_INT 7
21438: PUSH
21439: LD_INT 8
21441: PUSH
21442: LD_INT 9
21444: PUSH
21445: LD_INT 10
21447: PUSH
21448: LD_INT 11
21450: PUSH
21451: LD_INT 12
21453: PUSH
21454: LD_INT 13
21456: PUSH
21457: LD_INT 14
21459: PUSH
21460: LD_INT 15
21462: PUSH
21463: LD_INT 16
21465: PUSH
21466: LD_INT 17
21468: PUSH
21469: LD_INT 18
21471: PUSH
21472: LD_INT 19
21474: PUSH
21475: LD_INT 20
21477: PUSH
21478: LD_INT 21
21480: PUSH
21481: LD_INT 22
21483: PUSH
21484: LD_INT 23
21486: PUSH
21487: LD_INT 24
21489: PUSH
21490: LD_INT 25
21492: PUSH
21493: LD_INT 26
21495: PUSH
21496: LD_INT 27
21498: PUSH
21499: LD_INT 28
21501: PUSH
21502: LD_INT 29
21504: PUSH
21505: LD_INT 30
21507: PUSH
21508: LD_INT 31
21510: PUSH
21511: LD_INT 32
21513: PUSH
21514: LD_INT 33
21516: PUSH
21517: LD_INT 34
21519: PUSH
21520: LD_INT 35
21522: PUSH
21523: LD_INT 36
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 101
21566: PUSH
21567: LD_INT 102
21569: PUSH
21570: LD_INT 103
21572: PUSH
21573: LD_INT 104
21575: PUSH
21576: LD_INT 105
21578: PUSH
21579: LD_INT 106
21581: PUSH
21582: LD_INT 107
21584: PUSH
21585: LD_INT 108
21587: PUSH
21588: LD_INT 109
21590: PUSH
21591: LD_INT 110
21593: PUSH
21594: LD_INT 111
21596: PUSH
21597: LD_INT 112
21599: PUSH
21600: LD_INT 113
21602: PUSH
21603: LD_INT 114
21605: PUSH
21606: LD_INT 115
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: ST_TO_ADDR
// if result then
21630: LD_VAR 0 1
21634: IFFALSE 21923
// begin normal :=  ;
21636: LD_ADDR_VAR 0 3
21640: PUSH
21641: LD_STRING 
21643: ST_TO_ADDR
// hardcore :=  ;
21644: LD_ADDR_VAR 0 4
21648: PUSH
21649: LD_STRING 
21651: ST_TO_ADDR
// for i = 1 to normalCounter do
21652: LD_ADDR_VAR 0 5
21656: PUSH
21657: DOUBLE
21658: LD_INT 1
21660: DEC
21661: ST_TO_ADDR
21662: LD_EXP 53
21666: PUSH
21667: FOR_TO
21668: IFFALSE 21769
// begin tmp := 0 ;
21670: LD_ADDR_VAR 0 2
21674: PUSH
21675: LD_STRING 0
21677: ST_TO_ADDR
// if result [ 1 ] then
21678: LD_VAR 0 1
21682: PUSH
21683: LD_INT 1
21685: ARRAY
21686: IFFALSE 21751
// if result [ 1 ] [ 1 ] = i then
21688: LD_VAR 0 1
21692: PUSH
21693: LD_INT 1
21695: ARRAY
21696: PUSH
21697: LD_INT 1
21699: ARRAY
21700: PUSH
21701: LD_VAR 0 5
21705: EQUAL
21706: IFFALSE 21751
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
21708: LD_ADDR_VAR 0 1
21712: PUSH
21713: LD_VAR 0 1
21717: PPUSH
21718: LD_INT 1
21720: PPUSH
21721: LD_VAR 0 1
21725: PUSH
21726: LD_INT 1
21728: ARRAY
21729: PPUSH
21730: LD_INT 1
21732: PPUSH
21733: CALL_OW 3
21737: PPUSH
21738: CALL_OW 1
21742: ST_TO_ADDR
// tmp := 1 ;
21743: LD_ADDR_VAR 0 2
21747: PUSH
21748: LD_STRING 1
21750: ST_TO_ADDR
// end ; normal := normal & tmp ;
21751: LD_ADDR_VAR 0 3
21755: PUSH
21756: LD_VAR 0 3
21760: PUSH
21761: LD_VAR 0 2
21765: STR
21766: ST_TO_ADDR
// end ;
21767: GO 21667
21769: POP
21770: POP
// for i = 1 to hardcoreCounter do
21771: LD_ADDR_VAR 0 5
21775: PUSH
21776: DOUBLE
21777: LD_INT 1
21779: DEC
21780: ST_TO_ADDR
21781: LD_EXP 54
21785: PUSH
21786: FOR_TO
21787: IFFALSE 21892
// begin tmp := 0 ;
21789: LD_ADDR_VAR 0 2
21793: PUSH
21794: LD_STRING 0
21796: ST_TO_ADDR
// if result [ 2 ] then
21797: LD_VAR 0 1
21801: PUSH
21802: LD_INT 2
21804: ARRAY
21805: IFFALSE 21874
// if result [ 2 ] [ 1 ] = 100 + i then
21807: LD_VAR 0 1
21811: PUSH
21812: LD_INT 2
21814: ARRAY
21815: PUSH
21816: LD_INT 1
21818: ARRAY
21819: PUSH
21820: LD_INT 100
21822: PUSH
21823: LD_VAR 0 5
21827: PLUS
21828: EQUAL
21829: IFFALSE 21874
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
21831: LD_ADDR_VAR 0 1
21835: PUSH
21836: LD_VAR 0 1
21840: PPUSH
21841: LD_INT 2
21843: PPUSH
21844: LD_VAR 0 1
21848: PUSH
21849: LD_INT 2
21851: ARRAY
21852: PPUSH
21853: LD_INT 1
21855: PPUSH
21856: CALL_OW 3
21860: PPUSH
21861: CALL_OW 1
21865: ST_TO_ADDR
// tmp := 1 ;
21866: LD_ADDR_VAR 0 2
21870: PUSH
21871: LD_STRING 1
21873: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21874: LD_ADDR_VAR 0 4
21878: PUSH
21879: LD_VAR 0 4
21883: PUSH
21884: LD_VAR 0 2
21888: STR
21889: ST_TO_ADDR
// end ;
21890: GO 21786
21892: POP
21893: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
21894: LD_STRING getStreamItemsFromMission("
21896: PUSH
21897: LD_VAR 0 3
21901: STR
21902: PUSH
21903: LD_STRING ","
21905: STR
21906: PUSH
21907: LD_VAR 0 4
21911: STR
21912: PUSH
21913: LD_STRING ")
21915: STR
21916: PPUSH
21917: CALL_OW 559
// end else
21921: GO 21930
// ToLua ( getStreamItemsFromMission("","") ) ;
21923: LD_STRING getStreamItemsFromMission("","")
21925: PPUSH
21926: CALL_OW 559
// end ;
21930: LD_VAR 0 1
21934: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21935: LD_EXP 52
21939: PUSH
21940: LD_EXP 57
21944: AND
21945: IFFALSE 22069
21947: GO 21949
21949: DISABLE
21950: LD_INT 0
21952: PPUSH
21953: PPUSH
// begin enable ;
21954: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21955: LD_ADDR_VAR 0 2
21959: PUSH
21960: LD_INT 22
21962: PUSH
21963: LD_OWVAR 2
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 2
21974: PUSH
21975: LD_INT 34
21977: PUSH
21978: LD_INT 7
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: PUSH
21985: LD_INT 34
21987: PUSH
21988: LD_INT 45
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: PUSH
21995: LD_INT 34
21997: PUSH
21998: LD_INT 28
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: PUSH
22005: LD_INT 34
22007: PUSH
22008: LD_INT 47
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: PPUSH
22026: CALL_OW 69
22030: ST_TO_ADDR
// if not tmp then
22031: LD_VAR 0 2
22035: NOT
22036: IFFALSE 22040
// exit ;
22038: GO 22069
// for i in tmp do
22040: LD_ADDR_VAR 0 1
22044: PUSH
22045: LD_VAR 0 2
22049: PUSH
22050: FOR_IN
22051: IFFALSE 22067
// begin SetLives ( i , 0 ) ;
22053: LD_VAR 0 1
22057: PPUSH
22058: LD_INT 0
22060: PPUSH
22061: CALL_OW 234
// end ;
22065: GO 22050
22067: POP
22068: POP
// end ;
22069: PPOPN 2
22071: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
22072: LD_EXP 52
22076: PUSH
22077: LD_EXP 58
22081: AND
22082: IFFALSE 22166
22084: GO 22086
22086: DISABLE
22087: LD_INT 0
22089: PPUSH
22090: PPUSH
// begin enable ;
22091: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
22092: LD_ADDR_VAR 0 2
22096: PUSH
22097: LD_INT 22
22099: PUSH
22100: LD_OWVAR 2
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PUSH
22109: LD_INT 32
22111: PUSH
22112: LD_INT 3
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: PPUSH
22123: CALL_OW 69
22127: ST_TO_ADDR
// if not tmp then
22128: LD_VAR 0 2
22132: NOT
22133: IFFALSE 22137
// exit ;
22135: GO 22166
// for i in tmp do
22137: LD_ADDR_VAR 0 1
22141: PUSH
22142: LD_VAR 0 2
22146: PUSH
22147: FOR_IN
22148: IFFALSE 22164
// begin SetLives ( i , 0 ) ;
22150: LD_VAR 0 1
22154: PPUSH
22155: LD_INT 0
22157: PPUSH
22158: CALL_OW 234
// end ;
22162: GO 22147
22164: POP
22165: POP
// end ;
22166: PPOPN 2
22168: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
22169: LD_EXP 52
22173: PUSH
22174: LD_EXP 55
22178: AND
22179: IFFALSE 22272
22181: GO 22183
22183: DISABLE
22184: LD_INT 0
22186: PPUSH
// begin enable ;
22187: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22188: LD_ADDR_VAR 0 1
22192: PUSH
22193: LD_INT 22
22195: PUSH
22196: LD_OWVAR 2
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: LD_INT 2
22207: PUSH
22208: LD_INT 25
22210: PUSH
22211: LD_INT 5
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: LD_INT 25
22220: PUSH
22221: LD_INT 9
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 25
22230: PUSH
22231: LD_INT 8
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: PPUSH
22248: CALL_OW 69
22252: PUSH
22253: FOR_IN
22254: IFFALSE 22270
// begin SetClass ( i , 1 ) ;
22256: LD_VAR 0 1
22260: PPUSH
22261: LD_INT 1
22263: PPUSH
22264: CALL_OW 336
// end ;
22268: GO 22253
22270: POP
22271: POP
// end ;
22272: PPOPN 1
22274: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22275: LD_EXP 52
22279: PUSH
22280: LD_EXP 56
22284: AND
22285: PUSH
22286: LD_OWVAR 65
22290: PUSH
22291: LD_INT 7
22293: LESS
22294: AND
22295: IFFALSE 22309
22297: GO 22299
22299: DISABLE
// begin enable ;
22300: ENABLE
// game_speed := 7 ;
22301: LD_ADDR_OWVAR 65
22305: PUSH
22306: LD_INT 7
22308: ST_TO_ADDR
// end ;
22309: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
22310: LD_EXP 52
22314: PUSH
22315: LD_EXP 59
22319: AND
22320: IFFALSE 22522
22322: GO 22324
22324: DISABLE
22325: LD_INT 0
22327: PPUSH
22328: PPUSH
22329: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22330: LD_ADDR_VAR 0 3
22334: PUSH
22335: LD_INT 81
22337: PUSH
22338: LD_OWVAR 2
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PUSH
22347: LD_INT 21
22349: PUSH
22350: LD_INT 1
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PPUSH
22361: CALL_OW 69
22365: ST_TO_ADDR
// if not tmp then
22366: LD_VAR 0 3
22370: NOT
22371: IFFALSE 22375
// exit ;
22373: GO 22522
// if tmp > 5 then
22375: LD_VAR 0 3
22379: PUSH
22380: LD_INT 5
22382: GREATER
22383: IFFALSE 22395
// k := 5 else
22385: LD_ADDR_VAR 0 2
22389: PUSH
22390: LD_INT 5
22392: ST_TO_ADDR
22393: GO 22405
// k := tmp ;
22395: LD_ADDR_VAR 0 2
22399: PUSH
22400: LD_VAR 0 3
22404: ST_TO_ADDR
// for i := 1 to k do
22405: LD_ADDR_VAR 0 1
22409: PUSH
22410: DOUBLE
22411: LD_INT 1
22413: DEC
22414: ST_TO_ADDR
22415: LD_VAR 0 2
22419: PUSH
22420: FOR_TO
22421: IFFALSE 22520
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22423: LD_VAR 0 3
22427: PUSH
22428: LD_VAR 0 1
22432: ARRAY
22433: PPUSH
22434: LD_VAR 0 1
22438: PUSH
22439: LD_INT 4
22441: MOD
22442: PUSH
22443: LD_INT 1
22445: PLUS
22446: PPUSH
22447: CALL_OW 259
22451: PUSH
22452: LD_INT 10
22454: LESS
22455: IFFALSE 22518
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22457: LD_VAR 0 3
22461: PUSH
22462: LD_VAR 0 1
22466: ARRAY
22467: PPUSH
22468: LD_VAR 0 1
22472: PUSH
22473: LD_INT 4
22475: MOD
22476: PUSH
22477: LD_INT 1
22479: PLUS
22480: PPUSH
22481: LD_VAR 0 3
22485: PUSH
22486: LD_VAR 0 1
22490: ARRAY
22491: PPUSH
22492: LD_VAR 0 1
22496: PUSH
22497: LD_INT 4
22499: MOD
22500: PUSH
22501: LD_INT 1
22503: PLUS
22504: PPUSH
22505: CALL_OW 259
22509: PUSH
22510: LD_INT 1
22512: PLUS
22513: PPUSH
22514: CALL_OW 237
22518: GO 22420
22520: POP
22521: POP
// end ;
22522: PPOPN 3
22524: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22525: LD_EXP 52
22529: PUSH
22530: LD_EXP 60
22534: AND
22535: IFFALSE 22555
22537: GO 22539
22539: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22540: LD_INT 4
22542: PPUSH
22543: LD_OWVAR 2
22547: PPUSH
22548: LD_INT 0
22550: PPUSH
22551: CALL_OW 324
22555: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22556: LD_EXP 52
22560: PUSH
22561: LD_EXP 89
22565: AND
22566: IFFALSE 22586
22568: GO 22570
22570: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22571: LD_INT 19
22573: PPUSH
22574: LD_OWVAR 2
22578: PPUSH
22579: LD_INT 0
22581: PPUSH
22582: CALL_OW 324
22586: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22587: LD_EXP 52
22591: PUSH
22592: LD_EXP 61
22596: AND
22597: IFFALSE 22699
22599: GO 22601
22601: DISABLE
22602: LD_INT 0
22604: PPUSH
22605: PPUSH
// begin enable ;
22606: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22607: LD_ADDR_VAR 0 2
22611: PUSH
22612: LD_INT 22
22614: PUSH
22615: LD_OWVAR 2
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 2
22626: PUSH
22627: LD_INT 34
22629: PUSH
22630: LD_INT 11
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PUSH
22637: LD_INT 34
22639: PUSH
22640: LD_INT 30
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: LIST
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PPUSH
22656: CALL_OW 69
22660: ST_TO_ADDR
// if not tmp then
22661: LD_VAR 0 2
22665: NOT
22666: IFFALSE 22670
// exit ;
22668: GO 22699
// for i in tmp do
22670: LD_ADDR_VAR 0 1
22674: PUSH
22675: LD_VAR 0 2
22679: PUSH
22680: FOR_IN
22681: IFFALSE 22697
// begin SetLives ( i , 0 ) ;
22683: LD_VAR 0 1
22687: PPUSH
22688: LD_INT 0
22690: PPUSH
22691: CALL_OW 234
// end ;
22695: GO 22680
22697: POP
22698: POP
// end ;
22699: PPOPN 2
22701: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22702: LD_EXP 52
22706: PUSH
22707: LD_EXP 62
22711: AND
22712: IFFALSE 22732
22714: GO 22716
22716: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22717: LD_INT 32
22719: PPUSH
22720: LD_OWVAR 2
22724: PPUSH
22725: LD_INT 0
22727: PPUSH
22728: CALL_OW 324
22732: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22733: LD_EXP 52
22737: PUSH
22738: LD_EXP 63
22742: AND
22743: IFFALSE 22924
22745: GO 22747
22747: DISABLE
22748: LD_INT 0
22750: PPUSH
22751: PPUSH
22752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22753: LD_ADDR_VAR 0 2
22757: PUSH
22758: LD_INT 22
22760: PUSH
22761: LD_OWVAR 2
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PUSH
22770: LD_INT 33
22772: PUSH
22773: LD_INT 3
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PPUSH
22784: CALL_OW 69
22788: ST_TO_ADDR
// if not tmp then
22789: LD_VAR 0 2
22793: NOT
22794: IFFALSE 22798
// exit ;
22796: GO 22924
// side := 0 ;
22798: LD_ADDR_VAR 0 3
22802: PUSH
22803: LD_INT 0
22805: ST_TO_ADDR
// for i := 1 to 8 do
22806: LD_ADDR_VAR 0 1
22810: PUSH
22811: DOUBLE
22812: LD_INT 1
22814: DEC
22815: ST_TO_ADDR
22816: LD_INT 8
22818: PUSH
22819: FOR_TO
22820: IFFALSE 22868
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22822: LD_OWVAR 2
22826: PUSH
22827: LD_VAR 0 1
22831: NONEQUAL
22832: PUSH
22833: LD_OWVAR 2
22837: PPUSH
22838: LD_VAR 0 1
22842: PPUSH
22843: CALL_OW 81
22847: PUSH
22848: LD_INT 2
22850: EQUAL
22851: AND
22852: IFFALSE 22866
// begin side := i ;
22854: LD_ADDR_VAR 0 3
22858: PUSH
22859: LD_VAR 0 1
22863: ST_TO_ADDR
// break ;
22864: GO 22868
// end ;
22866: GO 22819
22868: POP
22869: POP
// if not side then
22870: LD_VAR 0 3
22874: NOT
22875: IFFALSE 22879
// exit ;
22877: GO 22924
// for i := 1 to tmp do
22879: LD_ADDR_VAR 0 1
22883: PUSH
22884: DOUBLE
22885: LD_INT 1
22887: DEC
22888: ST_TO_ADDR
22889: LD_VAR 0 2
22893: PUSH
22894: FOR_TO
22895: IFFALSE 22922
// if Prob ( 60 ) then
22897: LD_INT 60
22899: PPUSH
22900: CALL_OW 13
22904: IFFALSE 22920
// SetSide ( i , side ) ;
22906: LD_VAR 0 1
22910: PPUSH
22911: LD_VAR 0 3
22915: PPUSH
22916: CALL_OW 235
22920: GO 22894
22922: POP
22923: POP
// end ;
22924: PPOPN 3
22926: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22927: LD_EXP 52
22931: PUSH
22932: LD_EXP 65
22936: AND
22937: IFFALSE 23056
22939: GO 22941
22941: DISABLE
22942: LD_INT 0
22944: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22945: LD_ADDR_VAR 0 1
22949: PUSH
22950: LD_INT 22
22952: PUSH
22953: LD_OWVAR 2
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PUSH
22962: LD_INT 21
22964: PUSH
22965: LD_INT 1
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: LD_INT 3
22974: PUSH
22975: LD_INT 23
22977: PUSH
22978: LD_INT 0
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: LIST
22993: PPUSH
22994: CALL_OW 69
22998: PUSH
22999: FOR_IN
23000: IFFALSE 23054
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
23002: LD_VAR 0 1
23006: PPUSH
23007: CALL_OW 257
23011: PUSH
23012: LD_INT 1
23014: PUSH
23015: LD_INT 2
23017: PUSH
23018: LD_INT 3
23020: PUSH
23021: LD_INT 4
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: IN
23030: IFFALSE 23052
// SetClass ( un , rand ( 1 , 4 ) ) ;
23032: LD_VAR 0 1
23036: PPUSH
23037: LD_INT 1
23039: PPUSH
23040: LD_INT 4
23042: PPUSH
23043: CALL_OW 12
23047: PPUSH
23048: CALL_OW 336
23052: GO 22999
23054: POP
23055: POP
// end ;
23056: PPOPN 1
23058: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
23059: LD_EXP 52
23063: PUSH
23064: LD_EXP 64
23068: AND
23069: IFFALSE 23148
23071: GO 23073
23073: DISABLE
23074: LD_INT 0
23076: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23077: LD_ADDR_VAR 0 1
23081: PUSH
23082: LD_INT 22
23084: PUSH
23085: LD_OWVAR 2
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 21
23096: PUSH
23097: LD_INT 3
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PPUSH
23108: CALL_OW 69
23112: ST_TO_ADDR
// if not tmp then
23113: LD_VAR 0 1
23117: NOT
23118: IFFALSE 23122
// exit ;
23120: GO 23148
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
23122: LD_VAR 0 1
23126: PUSH
23127: LD_INT 1
23129: PPUSH
23130: LD_VAR 0 1
23134: PPUSH
23135: CALL_OW 12
23139: ARRAY
23140: PPUSH
23141: LD_INT 100
23143: PPUSH
23144: CALL_OW 234
// end ;
23148: PPOPN 1
23150: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
23151: LD_EXP 52
23155: PUSH
23156: LD_EXP 66
23160: AND
23161: IFFALSE 23259
23163: GO 23165
23165: DISABLE
23166: LD_INT 0
23168: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23169: LD_ADDR_VAR 0 1
23173: PUSH
23174: LD_INT 22
23176: PUSH
23177: LD_OWVAR 2
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PUSH
23186: LD_INT 21
23188: PUSH
23189: LD_INT 1
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PPUSH
23200: CALL_OW 69
23204: ST_TO_ADDR
// if not tmp then
23205: LD_VAR 0 1
23209: NOT
23210: IFFALSE 23214
// exit ;
23212: GO 23259
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
23214: LD_VAR 0 1
23218: PUSH
23219: LD_INT 1
23221: PPUSH
23222: LD_VAR 0 1
23226: PPUSH
23227: CALL_OW 12
23231: ARRAY
23232: PPUSH
23233: LD_INT 1
23235: PPUSH
23236: LD_INT 4
23238: PPUSH
23239: CALL_OW 12
23243: PPUSH
23244: LD_INT 3000
23246: PPUSH
23247: LD_INT 9000
23249: PPUSH
23250: CALL_OW 12
23254: PPUSH
23255: CALL_OW 492
// end ;
23259: PPOPN 1
23261: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23262: LD_EXP 52
23266: PUSH
23267: LD_EXP 67
23271: AND
23272: IFFALSE 23292
23274: GO 23276
23276: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
23277: LD_INT 1
23279: PPUSH
23280: LD_OWVAR 2
23284: PPUSH
23285: LD_INT 0
23287: PPUSH
23288: CALL_OW 324
23292: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
23293: LD_EXP 52
23297: PUSH
23298: LD_EXP 68
23302: AND
23303: IFFALSE 23386
23305: GO 23307
23307: DISABLE
23308: LD_INT 0
23310: PPUSH
23311: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23312: LD_ADDR_VAR 0 2
23316: PUSH
23317: LD_INT 22
23319: PUSH
23320: LD_OWVAR 2
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: PUSH
23329: LD_INT 21
23331: PUSH
23332: LD_INT 3
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PPUSH
23343: CALL_OW 69
23347: ST_TO_ADDR
// if not tmp then
23348: LD_VAR 0 2
23352: NOT
23353: IFFALSE 23357
// exit ;
23355: GO 23386
// for i in tmp do
23357: LD_ADDR_VAR 0 1
23361: PUSH
23362: LD_VAR 0 2
23366: PUSH
23367: FOR_IN
23368: IFFALSE 23384
// SetBLevel ( i , 10 ) ;
23370: LD_VAR 0 1
23374: PPUSH
23375: LD_INT 10
23377: PPUSH
23378: CALL_OW 241
23382: GO 23367
23384: POP
23385: POP
// end ;
23386: PPOPN 2
23388: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23389: LD_EXP 52
23393: PUSH
23394: LD_EXP 69
23398: AND
23399: IFFALSE 23510
23401: GO 23403
23403: DISABLE
23404: LD_INT 0
23406: PPUSH
23407: PPUSH
23408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23409: LD_ADDR_VAR 0 3
23413: PUSH
23414: LD_INT 22
23416: PUSH
23417: LD_OWVAR 2
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: PUSH
23426: LD_INT 25
23428: PUSH
23429: LD_INT 1
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PPUSH
23440: CALL_OW 69
23444: ST_TO_ADDR
// if not tmp then
23445: LD_VAR 0 3
23449: NOT
23450: IFFALSE 23454
// exit ;
23452: GO 23510
// un := tmp [ rand ( 1 , tmp ) ] ;
23454: LD_ADDR_VAR 0 2
23458: PUSH
23459: LD_VAR 0 3
23463: PUSH
23464: LD_INT 1
23466: PPUSH
23467: LD_VAR 0 3
23471: PPUSH
23472: CALL_OW 12
23476: ARRAY
23477: ST_TO_ADDR
// if Crawls ( un ) then
23478: LD_VAR 0 2
23482: PPUSH
23483: CALL_OW 318
23487: IFFALSE 23498
// ComWalk ( un ) ;
23489: LD_VAR 0 2
23493: PPUSH
23494: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23498: LD_VAR 0 2
23502: PPUSH
23503: LD_INT 5
23505: PPUSH
23506: CALL_OW 336
// end ;
23510: PPOPN 3
23512: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
23513: LD_EXP 52
23517: PUSH
23518: LD_EXP 70
23522: AND
23523: PUSH
23524: LD_OWVAR 67
23528: PUSH
23529: LD_INT 3
23531: LESS
23532: AND
23533: IFFALSE 23552
23535: GO 23537
23537: DISABLE
// Difficulty := Difficulty + 1 ;
23538: LD_ADDR_OWVAR 67
23542: PUSH
23543: LD_OWVAR 67
23547: PUSH
23548: LD_INT 1
23550: PLUS
23551: ST_TO_ADDR
23552: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23553: LD_EXP 52
23557: PUSH
23558: LD_EXP 71
23562: AND
23563: IFFALSE 23666
23565: GO 23567
23567: DISABLE
23568: LD_INT 0
23570: PPUSH
// begin for i := 1 to 5 do
23571: LD_ADDR_VAR 0 1
23575: PUSH
23576: DOUBLE
23577: LD_INT 1
23579: DEC
23580: ST_TO_ADDR
23581: LD_INT 5
23583: PUSH
23584: FOR_TO
23585: IFFALSE 23664
// begin uc_nation := nation_nature ;
23587: LD_ADDR_OWVAR 21
23591: PUSH
23592: LD_INT 0
23594: ST_TO_ADDR
// uc_side := 0 ;
23595: LD_ADDR_OWVAR 20
23599: PUSH
23600: LD_INT 0
23602: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23603: LD_ADDR_OWVAR 29
23607: PUSH
23608: LD_INT 12
23610: PUSH
23611: LD_INT 12
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: ST_TO_ADDR
// hc_agressivity := 20 ;
23618: LD_ADDR_OWVAR 35
23622: PUSH
23623: LD_INT 20
23625: ST_TO_ADDR
// hc_class := class_tiger ;
23626: LD_ADDR_OWVAR 28
23630: PUSH
23631: LD_INT 14
23633: ST_TO_ADDR
// hc_gallery :=  ;
23634: LD_ADDR_OWVAR 33
23638: PUSH
23639: LD_STRING 
23641: ST_TO_ADDR
// hc_name :=  ;
23642: LD_ADDR_OWVAR 26
23646: PUSH
23647: LD_STRING 
23649: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23650: CALL_OW 44
23654: PPUSH
23655: LD_INT 0
23657: PPUSH
23658: CALL_OW 51
// end ;
23662: GO 23584
23664: POP
23665: POP
// end ;
23666: PPOPN 1
23668: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23669: LD_EXP 52
23673: PUSH
23674: LD_EXP 72
23678: AND
23679: IFFALSE 23688
23681: GO 23683
23683: DISABLE
// StreamSibBomb ;
23684: CALL 23689 0 0
23688: END
// export function StreamSibBomb ; var i , x , y ; begin
23689: LD_INT 0
23691: PPUSH
23692: PPUSH
23693: PPUSH
23694: PPUSH
// result := false ;
23695: LD_ADDR_VAR 0 1
23699: PUSH
23700: LD_INT 0
23702: ST_TO_ADDR
// for i := 1 to 16 do
23703: LD_ADDR_VAR 0 2
23707: PUSH
23708: DOUBLE
23709: LD_INT 1
23711: DEC
23712: ST_TO_ADDR
23713: LD_INT 16
23715: PUSH
23716: FOR_TO
23717: IFFALSE 23916
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23719: LD_ADDR_VAR 0 3
23723: PUSH
23724: LD_INT 10
23726: PUSH
23727: LD_INT 20
23729: PUSH
23730: LD_INT 30
23732: PUSH
23733: LD_INT 40
23735: PUSH
23736: LD_INT 50
23738: PUSH
23739: LD_INT 60
23741: PUSH
23742: LD_INT 70
23744: PUSH
23745: LD_INT 80
23747: PUSH
23748: LD_INT 90
23750: PUSH
23751: LD_INT 100
23753: PUSH
23754: LD_INT 110
23756: PUSH
23757: LD_INT 120
23759: PUSH
23760: LD_INT 130
23762: PUSH
23763: LD_INT 140
23765: PUSH
23766: LD_INT 150
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: PUSH
23786: LD_INT 1
23788: PPUSH
23789: LD_INT 15
23791: PPUSH
23792: CALL_OW 12
23796: ARRAY
23797: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23798: LD_ADDR_VAR 0 4
23802: PUSH
23803: LD_INT 10
23805: PUSH
23806: LD_INT 20
23808: PUSH
23809: LD_INT 30
23811: PUSH
23812: LD_INT 40
23814: PUSH
23815: LD_INT 50
23817: PUSH
23818: LD_INT 60
23820: PUSH
23821: LD_INT 70
23823: PUSH
23824: LD_INT 80
23826: PUSH
23827: LD_INT 90
23829: PUSH
23830: LD_INT 100
23832: PUSH
23833: LD_INT 110
23835: PUSH
23836: LD_INT 120
23838: PUSH
23839: LD_INT 130
23841: PUSH
23842: LD_INT 140
23844: PUSH
23845: LD_INT 150
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 1
23867: PPUSH
23868: LD_INT 15
23870: PPUSH
23871: CALL_OW 12
23875: ARRAY
23876: ST_TO_ADDR
// if ValidHex ( x , y ) then
23877: LD_VAR 0 3
23881: PPUSH
23882: LD_VAR 0 4
23886: PPUSH
23887: CALL_OW 488
23891: IFFALSE 23914
// begin result := [ x , y ] ;
23893: LD_ADDR_VAR 0 1
23897: PUSH
23898: LD_VAR 0 3
23902: PUSH
23903: LD_VAR 0 4
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: ST_TO_ADDR
// break ;
23912: GO 23916
// end ; end ;
23914: GO 23716
23916: POP
23917: POP
// if result then
23918: LD_VAR 0 1
23922: IFFALSE 23982
// begin ToLua ( playSibBomb() ) ;
23924: LD_STRING playSibBomb()
23926: PPUSH
23927: CALL_OW 559
// wait ( 0 0$14 ) ;
23931: LD_INT 490
23933: PPUSH
23934: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23938: LD_VAR 0 1
23942: PUSH
23943: LD_INT 1
23945: ARRAY
23946: PPUSH
23947: LD_VAR 0 1
23951: PUSH
23952: LD_INT 2
23954: ARRAY
23955: PPUSH
23956: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23960: LD_VAR 0 1
23964: PUSH
23965: LD_INT 1
23967: ARRAY
23968: PPUSH
23969: LD_VAR 0 1
23973: PUSH
23974: LD_INT 2
23976: ARRAY
23977: PPUSH
23978: CALL_OW 429
// end ; end ;
23982: LD_VAR 0 1
23986: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23987: LD_EXP 52
23991: PUSH
23992: LD_EXP 74
23996: AND
23997: IFFALSE 24009
23999: GO 24001
24001: DISABLE
// YouLost (  ) ;
24002: LD_STRING 
24004: PPUSH
24005: CALL_OW 104
24009: END
// every 0 0$1 trigger StreamModeActive and sFog do
24010: LD_EXP 52
24014: PUSH
24015: LD_EXP 73
24019: AND
24020: IFFALSE 24034
24022: GO 24024
24024: DISABLE
// FogOff ( your_side ) ;
24025: LD_OWVAR 2
24029: PPUSH
24030: CALL_OW 344
24034: END
// every 0 0$1 trigger StreamModeActive and sSun do
24035: LD_EXP 52
24039: PUSH
24040: LD_EXP 75
24044: AND
24045: IFFALSE 24073
24047: GO 24049
24049: DISABLE
// begin solar_recharge_percent := 0 ;
24050: LD_ADDR_OWVAR 79
24054: PUSH
24055: LD_INT 0
24057: ST_TO_ADDR
// wait ( 5 5$00 ) ;
24058: LD_INT 10500
24060: PPUSH
24061: CALL_OW 67
// solar_recharge_percent := 100 ;
24065: LD_ADDR_OWVAR 79
24069: PUSH
24070: LD_INT 100
24072: ST_TO_ADDR
// end ;
24073: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
24074: LD_EXP 52
24078: PUSH
24079: LD_EXP 76
24083: AND
24084: IFFALSE 24323
24086: GO 24088
24088: DISABLE
24089: LD_INT 0
24091: PPUSH
24092: PPUSH
24093: PPUSH
// begin tmp := [ ] ;
24094: LD_ADDR_VAR 0 3
24098: PUSH
24099: EMPTY
24100: ST_TO_ADDR
// for i := 1 to 6 do
24101: LD_ADDR_VAR 0 1
24105: PUSH
24106: DOUBLE
24107: LD_INT 1
24109: DEC
24110: ST_TO_ADDR
24111: LD_INT 6
24113: PUSH
24114: FOR_TO
24115: IFFALSE 24220
// begin uc_nation := nation_nature ;
24117: LD_ADDR_OWVAR 21
24121: PUSH
24122: LD_INT 0
24124: ST_TO_ADDR
// uc_side := 0 ;
24125: LD_ADDR_OWVAR 20
24129: PUSH
24130: LD_INT 0
24132: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24133: LD_ADDR_OWVAR 29
24137: PUSH
24138: LD_INT 12
24140: PUSH
24141: LD_INT 12
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: ST_TO_ADDR
// hc_agressivity := 20 ;
24148: LD_ADDR_OWVAR 35
24152: PUSH
24153: LD_INT 20
24155: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
24156: LD_ADDR_OWVAR 28
24160: PUSH
24161: LD_INT 17
24163: ST_TO_ADDR
// hc_gallery :=  ;
24164: LD_ADDR_OWVAR 33
24168: PUSH
24169: LD_STRING 
24171: ST_TO_ADDR
// hc_name :=  ;
24172: LD_ADDR_OWVAR 26
24176: PUSH
24177: LD_STRING 
24179: ST_TO_ADDR
// un := CreateHuman ;
24180: LD_ADDR_VAR 0 2
24184: PUSH
24185: CALL_OW 44
24189: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24190: LD_VAR 0 2
24194: PPUSH
24195: LD_INT 1
24197: PPUSH
24198: CALL_OW 51
// tmp := tmp ^ un ;
24202: LD_ADDR_VAR 0 3
24206: PUSH
24207: LD_VAR 0 3
24211: PUSH
24212: LD_VAR 0 2
24216: ADD
24217: ST_TO_ADDR
// end ;
24218: GO 24114
24220: POP
24221: POP
// repeat wait ( 0 0$1 ) ;
24222: LD_INT 35
24224: PPUSH
24225: CALL_OW 67
// for un in tmp do
24229: LD_ADDR_VAR 0 2
24233: PUSH
24234: LD_VAR 0 3
24238: PUSH
24239: FOR_IN
24240: IFFALSE 24314
// begin if IsDead ( un ) then
24242: LD_VAR 0 2
24246: PPUSH
24247: CALL_OW 301
24251: IFFALSE 24271
// begin tmp := tmp diff un ;
24253: LD_ADDR_VAR 0 3
24257: PUSH
24258: LD_VAR 0 3
24262: PUSH
24263: LD_VAR 0 2
24267: DIFF
24268: ST_TO_ADDR
// continue ;
24269: GO 24239
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24271: LD_VAR 0 2
24275: PPUSH
24276: LD_INT 3
24278: PUSH
24279: LD_INT 22
24281: PUSH
24282: LD_INT 0
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PPUSH
24293: CALL_OW 69
24297: PPUSH
24298: LD_VAR 0 2
24302: PPUSH
24303: CALL_OW 74
24307: PPUSH
24308: CALL_OW 115
// end ;
24312: GO 24239
24314: POP
24315: POP
// until not tmp ;
24316: LD_VAR 0 3
24320: NOT
24321: IFFALSE 24222
// end ;
24323: PPOPN 3
24325: END
// every 0 0$1 trigger StreamModeActive and sTroll do
24326: LD_EXP 52
24330: PUSH
24331: LD_EXP 77
24335: AND
24336: IFFALSE 24390
24338: GO 24340
24340: DISABLE
// begin ToLua ( displayTroll(); ) ;
24341: LD_STRING displayTroll();
24343: PPUSH
24344: CALL_OW 559
// wait ( 3 3$00 ) ;
24348: LD_INT 6300
24350: PPUSH
24351: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24355: LD_STRING hideTroll();
24357: PPUSH
24358: CALL_OW 559
// wait ( 1 1$00 ) ;
24362: LD_INT 2100
24364: PPUSH
24365: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24369: LD_STRING displayTroll();
24371: PPUSH
24372: CALL_OW 559
// wait ( 1 1$00 ) ;
24376: LD_INT 2100
24378: PPUSH
24379: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24383: LD_STRING hideTroll();
24385: PPUSH
24386: CALL_OW 559
// end ;
24390: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24391: LD_EXP 52
24395: PUSH
24396: LD_EXP 78
24400: AND
24401: IFFALSE 24464
24403: GO 24405
24405: DISABLE
24406: LD_INT 0
24408: PPUSH
// begin p := 0 ;
24409: LD_ADDR_VAR 0 1
24413: PUSH
24414: LD_INT 0
24416: ST_TO_ADDR
// repeat game_speed := 1 ;
24417: LD_ADDR_OWVAR 65
24421: PUSH
24422: LD_INT 1
24424: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24425: LD_INT 35
24427: PPUSH
24428: CALL_OW 67
// p := p + 1 ;
24432: LD_ADDR_VAR 0 1
24436: PUSH
24437: LD_VAR 0 1
24441: PUSH
24442: LD_INT 1
24444: PLUS
24445: ST_TO_ADDR
// until p >= 60 ;
24446: LD_VAR 0 1
24450: PUSH
24451: LD_INT 60
24453: GREATEREQUAL
24454: IFFALSE 24417
// game_speed := 4 ;
24456: LD_ADDR_OWVAR 65
24460: PUSH
24461: LD_INT 4
24463: ST_TO_ADDR
// end ;
24464: PPOPN 1
24466: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24467: LD_EXP 52
24471: PUSH
24472: LD_EXP 79
24476: AND
24477: IFFALSE 24623
24479: GO 24481
24481: DISABLE
24482: LD_INT 0
24484: PPUSH
24485: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24486: LD_ADDR_VAR 0 1
24490: PUSH
24491: LD_INT 22
24493: PUSH
24494: LD_OWVAR 2
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 2
24505: PUSH
24506: LD_INT 30
24508: PUSH
24509: LD_INT 0
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 30
24518: PUSH
24519: LD_INT 1
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: LIST
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PPUSH
24535: CALL_OW 69
24539: ST_TO_ADDR
// if not depot then
24540: LD_VAR 0 1
24544: NOT
24545: IFFALSE 24549
// exit ;
24547: GO 24623
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24549: LD_ADDR_VAR 0 2
24553: PUSH
24554: LD_VAR 0 1
24558: PUSH
24559: LD_INT 1
24561: PPUSH
24562: LD_VAR 0 1
24566: PPUSH
24567: CALL_OW 12
24571: ARRAY
24572: PPUSH
24573: CALL_OW 274
24577: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24578: LD_VAR 0 2
24582: PPUSH
24583: LD_INT 1
24585: PPUSH
24586: LD_INT 0
24588: PPUSH
24589: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24593: LD_VAR 0 2
24597: PPUSH
24598: LD_INT 2
24600: PPUSH
24601: LD_INT 0
24603: PPUSH
24604: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24608: LD_VAR 0 2
24612: PPUSH
24613: LD_INT 3
24615: PPUSH
24616: LD_INT 0
24618: PPUSH
24619: CALL_OW 277
// end ;
24623: PPOPN 2
24625: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24626: LD_EXP 52
24630: PUSH
24631: LD_EXP 80
24635: AND
24636: IFFALSE 24733
24638: GO 24640
24640: DISABLE
24641: LD_INT 0
24643: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24644: LD_ADDR_VAR 0 1
24648: PUSH
24649: LD_INT 22
24651: PUSH
24652: LD_OWVAR 2
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 21
24663: PUSH
24664: LD_INT 1
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: PUSH
24671: LD_INT 3
24673: PUSH
24674: LD_INT 23
24676: PUSH
24677: LD_INT 0
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: LIST
24692: PPUSH
24693: CALL_OW 69
24697: ST_TO_ADDR
// if not tmp then
24698: LD_VAR 0 1
24702: NOT
24703: IFFALSE 24707
// exit ;
24705: GO 24733
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24707: LD_VAR 0 1
24711: PUSH
24712: LD_INT 1
24714: PPUSH
24715: LD_VAR 0 1
24719: PPUSH
24720: CALL_OW 12
24724: ARRAY
24725: PPUSH
24726: LD_INT 200
24728: PPUSH
24729: CALL_OW 234
// end ;
24733: PPOPN 1
24735: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24736: LD_EXP 52
24740: PUSH
24741: LD_EXP 81
24745: AND
24746: IFFALSE 24825
24748: GO 24750
24750: DISABLE
24751: LD_INT 0
24753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24754: LD_ADDR_VAR 0 1
24758: PUSH
24759: LD_INT 22
24761: PUSH
24762: LD_OWVAR 2
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PUSH
24771: LD_INT 21
24773: PUSH
24774: LD_INT 2
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PPUSH
24785: CALL_OW 69
24789: ST_TO_ADDR
// if not tmp then
24790: LD_VAR 0 1
24794: NOT
24795: IFFALSE 24799
// exit ;
24797: GO 24825
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24799: LD_VAR 0 1
24803: PUSH
24804: LD_INT 1
24806: PPUSH
24807: LD_VAR 0 1
24811: PPUSH
24812: CALL_OW 12
24816: ARRAY
24817: PPUSH
24818: LD_INT 60
24820: PPUSH
24821: CALL_OW 234
// end ;
24825: PPOPN 1
24827: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24828: LD_EXP 52
24832: PUSH
24833: LD_EXP 82
24837: AND
24838: IFFALSE 24937
24840: GO 24842
24842: DISABLE
24843: LD_INT 0
24845: PPUSH
24846: PPUSH
// begin enable ;
24847: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24848: LD_ADDR_VAR 0 1
24852: PUSH
24853: LD_INT 22
24855: PUSH
24856: LD_OWVAR 2
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 61
24867: PUSH
24868: EMPTY
24869: LIST
24870: PUSH
24871: LD_INT 33
24873: PUSH
24874: LD_INT 2
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: LIST
24885: PPUSH
24886: CALL_OW 69
24890: ST_TO_ADDR
// if not tmp then
24891: LD_VAR 0 1
24895: NOT
24896: IFFALSE 24900
// exit ;
24898: GO 24937
// for i in tmp do
24900: LD_ADDR_VAR 0 2
24904: PUSH
24905: LD_VAR 0 1
24909: PUSH
24910: FOR_IN
24911: IFFALSE 24935
// if IsControledBy ( i ) then
24913: LD_VAR 0 2
24917: PPUSH
24918: CALL_OW 312
24922: IFFALSE 24933
// ComUnlink ( i ) ;
24924: LD_VAR 0 2
24928: PPUSH
24929: CALL_OW 136
24933: GO 24910
24935: POP
24936: POP
// end ;
24937: PPOPN 2
24939: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24940: LD_EXP 52
24944: PUSH
24945: LD_EXP 83
24949: AND
24950: IFFALSE 25090
24952: GO 24954
24954: DISABLE
24955: LD_INT 0
24957: PPUSH
24958: PPUSH
// begin ToLua ( displayPowell(); ) ;
24959: LD_STRING displayPowell();
24961: PPUSH
24962: CALL_OW 559
// uc_side := 0 ;
24966: LD_ADDR_OWVAR 20
24970: PUSH
24971: LD_INT 0
24973: ST_TO_ADDR
// uc_nation := 2 ;
24974: LD_ADDR_OWVAR 21
24978: PUSH
24979: LD_INT 2
24981: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24982: LD_ADDR_OWVAR 37
24986: PUSH
24987: LD_INT 14
24989: ST_TO_ADDR
// vc_engine := engine_siberite ;
24990: LD_ADDR_OWVAR 39
24994: PUSH
24995: LD_INT 3
24997: ST_TO_ADDR
// vc_control := control_apeman ;
24998: LD_ADDR_OWVAR 38
25002: PUSH
25003: LD_INT 5
25005: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25006: LD_ADDR_OWVAR 40
25010: PUSH
25011: LD_INT 29
25013: ST_TO_ADDR
// un := CreateVehicle ;
25014: LD_ADDR_VAR 0 2
25018: PUSH
25019: CALL_OW 45
25023: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25024: LD_VAR 0 2
25028: PPUSH
25029: LD_INT 1
25031: PPUSH
25032: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25036: LD_INT 35
25038: PPUSH
25039: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25043: LD_VAR 0 2
25047: PPUSH
25048: LD_INT 22
25050: PUSH
25051: LD_OWVAR 2
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PPUSH
25060: CALL_OW 69
25064: PPUSH
25065: LD_VAR 0 2
25069: PPUSH
25070: CALL_OW 74
25074: PPUSH
25075: CALL_OW 115
// until IsDead ( un ) ;
25079: LD_VAR 0 2
25083: PPUSH
25084: CALL_OW 301
25088: IFFALSE 25036
// end ;
25090: PPOPN 2
25092: END
// every 0 0$1 trigger StreamModeActive and sStu do
25093: LD_EXP 52
25097: PUSH
25098: LD_EXP 91
25102: AND
25103: IFFALSE 25119
25105: GO 25107
25107: DISABLE
// begin ToLua ( displayStucuk(); ) ;
25108: LD_STRING displayStucuk();
25110: PPUSH
25111: CALL_OW 559
// ResetFog ;
25115: CALL_OW 335
// end ;
25119: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
25120: LD_EXP 52
25124: PUSH
25125: LD_EXP 84
25129: AND
25130: IFFALSE 25271
25132: GO 25134
25134: DISABLE
25135: LD_INT 0
25137: PPUSH
25138: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25139: LD_ADDR_VAR 0 2
25143: PUSH
25144: LD_INT 22
25146: PUSH
25147: LD_OWVAR 2
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 21
25158: PUSH
25159: LD_INT 1
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PPUSH
25170: CALL_OW 69
25174: ST_TO_ADDR
// if not tmp then
25175: LD_VAR 0 2
25179: NOT
25180: IFFALSE 25184
// exit ;
25182: GO 25271
// un := tmp [ rand ( 1 , tmp ) ] ;
25184: LD_ADDR_VAR 0 1
25188: PUSH
25189: LD_VAR 0 2
25193: PUSH
25194: LD_INT 1
25196: PPUSH
25197: LD_VAR 0 2
25201: PPUSH
25202: CALL_OW 12
25206: ARRAY
25207: ST_TO_ADDR
// SetSide ( un , 0 ) ;
25208: LD_VAR 0 1
25212: PPUSH
25213: LD_INT 0
25215: PPUSH
25216: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
25220: LD_VAR 0 1
25224: PPUSH
25225: LD_OWVAR 3
25229: PUSH
25230: LD_VAR 0 1
25234: DIFF
25235: PPUSH
25236: LD_VAR 0 1
25240: PPUSH
25241: CALL_OW 74
25245: PPUSH
25246: CALL_OW 115
// wait ( 0 0$20 ) ;
25250: LD_INT 700
25252: PPUSH
25253: CALL_OW 67
// SetSide ( un , your_side ) ;
25257: LD_VAR 0 1
25261: PPUSH
25262: LD_OWVAR 2
25266: PPUSH
25267: CALL_OW 235
// end ;
25271: PPOPN 2
25273: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25274: LD_EXP 52
25278: PUSH
25279: LD_EXP 85
25283: AND
25284: IFFALSE 25390
25286: GO 25288
25288: DISABLE
25289: LD_INT 0
25291: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25292: LD_ADDR_VAR 0 1
25296: PUSH
25297: LD_INT 22
25299: PUSH
25300: LD_OWVAR 2
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 2
25311: PUSH
25312: LD_INT 30
25314: PUSH
25315: LD_INT 0
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: LD_INT 30
25324: PUSH
25325: LD_INT 1
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: LIST
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PPUSH
25341: CALL_OW 69
25345: ST_TO_ADDR
// if not depot then
25346: LD_VAR 0 1
25350: NOT
25351: IFFALSE 25355
// exit ;
25353: GO 25390
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25355: LD_VAR 0 1
25359: PUSH
25360: LD_INT 1
25362: ARRAY
25363: PPUSH
25364: CALL_OW 250
25368: PPUSH
25369: LD_VAR 0 1
25373: PUSH
25374: LD_INT 1
25376: ARRAY
25377: PPUSH
25378: CALL_OW 251
25382: PPUSH
25383: LD_INT 70
25385: PPUSH
25386: CALL_OW 495
// end ;
25390: PPOPN 1
25392: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25393: LD_EXP 52
25397: PUSH
25398: LD_EXP 86
25402: AND
25403: IFFALSE 25614
25405: GO 25407
25407: DISABLE
25408: LD_INT 0
25410: PPUSH
25411: PPUSH
25412: PPUSH
25413: PPUSH
25414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25415: LD_ADDR_VAR 0 5
25419: PUSH
25420: LD_INT 22
25422: PUSH
25423: LD_OWVAR 2
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 21
25434: PUSH
25435: LD_INT 1
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PPUSH
25446: CALL_OW 69
25450: ST_TO_ADDR
// if not tmp then
25451: LD_VAR 0 5
25455: NOT
25456: IFFALSE 25460
// exit ;
25458: GO 25614
// for i in tmp do
25460: LD_ADDR_VAR 0 1
25464: PUSH
25465: LD_VAR 0 5
25469: PUSH
25470: FOR_IN
25471: IFFALSE 25612
// begin d := rand ( 0 , 5 ) ;
25473: LD_ADDR_VAR 0 4
25477: PUSH
25478: LD_INT 0
25480: PPUSH
25481: LD_INT 5
25483: PPUSH
25484: CALL_OW 12
25488: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25489: LD_ADDR_VAR 0 2
25493: PUSH
25494: LD_VAR 0 1
25498: PPUSH
25499: CALL_OW 250
25503: PPUSH
25504: LD_VAR 0 4
25508: PPUSH
25509: LD_INT 3
25511: PPUSH
25512: LD_INT 12
25514: PPUSH
25515: CALL_OW 12
25519: PPUSH
25520: CALL_OW 272
25524: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25525: LD_ADDR_VAR 0 3
25529: PUSH
25530: LD_VAR 0 1
25534: PPUSH
25535: CALL_OW 251
25539: PPUSH
25540: LD_VAR 0 4
25544: PPUSH
25545: LD_INT 3
25547: PPUSH
25548: LD_INT 12
25550: PPUSH
25551: CALL_OW 12
25555: PPUSH
25556: CALL_OW 273
25560: ST_TO_ADDR
// if ValidHex ( x , y ) then
25561: LD_VAR 0 2
25565: PPUSH
25566: LD_VAR 0 3
25570: PPUSH
25571: CALL_OW 488
25575: IFFALSE 25610
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25577: LD_VAR 0 1
25581: PPUSH
25582: LD_VAR 0 2
25586: PPUSH
25587: LD_VAR 0 3
25591: PPUSH
25592: LD_INT 3
25594: PPUSH
25595: LD_INT 6
25597: PPUSH
25598: CALL_OW 12
25602: PPUSH
25603: LD_INT 1
25605: PPUSH
25606: CALL_OW 483
// end ;
25610: GO 25470
25612: POP
25613: POP
// end ;
25614: PPOPN 5
25616: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25617: LD_EXP 52
25621: PUSH
25622: LD_EXP 87
25626: AND
25627: IFFALSE 25721
25629: GO 25631
25631: DISABLE
25632: LD_INT 0
25634: PPUSH
25635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25636: LD_ADDR_VAR 0 2
25640: PUSH
25641: LD_INT 22
25643: PUSH
25644: LD_OWVAR 2
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 32
25655: PUSH
25656: LD_INT 1
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 21
25665: PUSH
25666: LD_INT 2
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: LIST
25677: PPUSH
25678: CALL_OW 69
25682: ST_TO_ADDR
// if not tmp then
25683: LD_VAR 0 2
25687: NOT
25688: IFFALSE 25692
// exit ;
25690: GO 25721
// for i in tmp do
25692: LD_ADDR_VAR 0 1
25696: PUSH
25697: LD_VAR 0 2
25701: PUSH
25702: FOR_IN
25703: IFFALSE 25719
// SetFuel ( i , 0 ) ;
25705: LD_VAR 0 1
25709: PPUSH
25710: LD_INT 0
25712: PPUSH
25713: CALL_OW 240
25717: GO 25702
25719: POP
25720: POP
// end ;
25721: PPOPN 2
25723: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25724: LD_EXP 52
25728: PUSH
25729: LD_EXP 88
25733: AND
25734: IFFALSE 25800
25736: GO 25738
25738: DISABLE
25739: LD_INT 0
25741: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25742: LD_ADDR_VAR 0 1
25746: PUSH
25747: LD_INT 22
25749: PUSH
25750: LD_OWVAR 2
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 30
25761: PUSH
25762: LD_INT 29
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PPUSH
25773: CALL_OW 69
25777: ST_TO_ADDR
// if not tmp then
25778: LD_VAR 0 1
25782: NOT
25783: IFFALSE 25787
// exit ;
25785: GO 25800
// DestroyUnit ( tmp [ 1 ] ) ;
25787: LD_VAR 0 1
25791: PUSH
25792: LD_INT 1
25794: ARRAY
25795: PPUSH
25796: CALL_OW 65
// end ;
25800: PPOPN 1
25802: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25803: LD_EXP 52
25807: PUSH
25808: LD_EXP 90
25812: AND
25813: IFFALSE 25942
25815: GO 25817
25817: DISABLE
25818: LD_INT 0
25820: PPUSH
// begin uc_side := 0 ;
25821: LD_ADDR_OWVAR 20
25825: PUSH
25826: LD_INT 0
25828: ST_TO_ADDR
// uc_nation := nation_arabian ;
25829: LD_ADDR_OWVAR 21
25833: PUSH
25834: LD_INT 2
25836: ST_TO_ADDR
// hc_gallery :=  ;
25837: LD_ADDR_OWVAR 33
25841: PUSH
25842: LD_STRING 
25844: ST_TO_ADDR
// hc_name :=  ;
25845: LD_ADDR_OWVAR 26
25849: PUSH
25850: LD_STRING 
25852: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25853: LD_INT 1
25855: PPUSH
25856: LD_INT 11
25858: PPUSH
25859: LD_INT 10
25861: PPUSH
25862: CALL_OW 380
// un := CreateHuman ;
25866: LD_ADDR_VAR 0 1
25870: PUSH
25871: CALL_OW 44
25875: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25876: LD_VAR 0 1
25880: PPUSH
25881: LD_INT 1
25883: PPUSH
25884: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25888: LD_INT 35
25890: PPUSH
25891: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25895: LD_VAR 0 1
25899: PPUSH
25900: LD_INT 22
25902: PUSH
25903: LD_OWVAR 2
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PPUSH
25912: CALL_OW 69
25916: PPUSH
25917: LD_VAR 0 1
25921: PPUSH
25922: CALL_OW 74
25926: PPUSH
25927: CALL_OW 115
// until IsDead ( un ) ;
25931: LD_VAR 0 1
25935: PPUSH
25936: CALL_OW 301
25940: IFFALSE 25888
// end ;
25942: PPOPN 1
25944: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25945: LD_EXP 52
25949: PUSH
25950: LD_EXP 92
25954: AND
25955: IFFALSE 25967
25957: GO 25959
25959: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25960: LD_STRING earthquake(getX(game), 0, 32)
25962: PPUSH
25963: CALL_OW 559
25967: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25968: LD_EXP 52
25972: PUSH
25973: LD_EXP 93
25977: AND
25978: IFFALSE 26069
25980: GO 25982
25982: DISABLE
25983: LD_INT 0
25985: PPUSH
// begin enable ;
25986: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25987: LD_ADDR_VAR 0 1
25991: PUSH
25992: LD_INT 22
25994: PUSH
25995: LD_OWVAR 2
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 21
26006: PUSH
26007: LD_INT 2
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 33
26016: PUSH
26017: LD_INT 3
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: LIST
26028: PPUSH
26029: CALL_OW 69
26033: ST_TO_ADDR
// if not tmp then
26034: LD_VAR 0 1
26038: NOT
26039: IFFALSE 26043
// exit ;
26041: GO 26069
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26043: LD_VAR 0 1
26047: PUSH
26048: LD_INT 1
26050: PPUSH
26051: LD_VAR 0 1
26055: PPUSH
26056: CALL_OW 12
26060: ARRAY
26061: PPUSH
26062: LD_INT 1
26064: PPUSH
26065: CALL_OW 234
// end ;
26069: PPOPN 1
26071: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
26072: LD_EXP 52
26076: PUSH
26077: LD_EXP 94
26081: AND
26082: IFFALSE 26223
26084: GO 26086
26086: DISABLE
26087: LD_INT 0
26089: PPUSH
26090: PPUSH
26091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26092: LD_ADDR_VAR 0 3
26096: PUSH
26097: LD_INT 22
26099: PUSH
26100: LD_OWVAR 2
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 25
26111: PUSH
26112: LD_INT 1
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PPUSH
26123: CALL_OW 69
26127: ST_TO_ADDR
// if not tmp then
26128: LD_VAR 0 3
26132: NOT
26133: IFFALSE 26137
// exit ;
26135: GO 26223
// un := tmp [ rand ( 1 , tmp ) ] ;
26137: LD_ADDR_VAR 0 2
26141: PUSH
26142: LD_VAR 0 3
26146: PUSH
26147: LD_INT 1
26149: PPUSH
26150: LD_VAR 0 3
26154: PPUSH
26155: CALL_OW 12
26159: ARRAY
26160: ST_TO_ADDR
// if Crawls ( un ) then
26161: LD_VAR 0 2
26165: PPUSH
26166: CALL_OW 318
26170: IFFALSE 26181
// ComWalk ( un ) ;
26172: LD_VAR 0 2
26176: PPUSH
26177: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26181: LD_VAR 0 2
26185: PPUSH
26186: LD_INT 9
26188: PPUSH
26189: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
26193: LD_INT 28
26195: PPUSH
26196: LD_OWVAR 2
26200: PPUSH
26201: LD_INT 2
26203: PPUSH
26204: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
26208: LD_INT 29
26210: PPUSH
26211: LD_OWVAR 2
26215: PPUSH
26216: LD_INT 2
26218: PPUSH
26219: CALL_OW 322
// end ;
26223: PPOPN 3
26225: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
26226: LD_EXP 52
26230: PUSH
26231: LD_EXP 95
26235: AND
26236: IFFALSE 26347
26238: GO 26240
26240: DISABLE
26241: LD_INT 0
26243: PPUSH
26244: PPUSH
26245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26246: LD_ADDR_VAR 0 3
26250: PUSH
26251: LD_INT 22
26253: PUSH
26254: LD_OWVAR 2
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 25
26265: PUSH
26266: LD_INT 1
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PPUSH
26277: CALL_OW 69
26281: ST_TO_ADDR
// if not tmp then
26282: LD_VAR 0 3
26286: NOT
26287: IFFALSE 26291
// exit ;
26289: GO 26347
// un := tmp [ rand ( 1 , tmp ) ] ;
26291: LD_ADDR_VAR 0 2
26295: PUSH
26296: LD_VAR 0 3
26300: PUSH
26301: LD_INT 1
26303: PPUSH
26304: LD_VAR 0 3
26308: PPUSH
26309: CALL_OW 12
26313: ARRAY
26314: ST_TO_ADDR
// if Crawls ( un ) then
26315: LD_VAR 0 2
26319: PPUSH
26320: CALL_OW 318
26324: IFFALSE 26335
// ComWalk ( un ) ;
26326: LD_VAR 0 2
26330: PPUSH
26331: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26335: LD_VAR 0 2
26339: PPUSH
26340: LD_INT 8
26342: PPUSH
26343: CALL_OW 336
// end ;
26347: PPOPN 3
26349: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26350: LD_EXP 52
26354: PUSH
26355: LD_EXP 96
26359: AND
26360: IFFALSE 26504
26362: GO 26364
26364: DISABLE
26365: LD_INT 0
26367: PPUSH
26368: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26369: LD_ADDR_VAR 0 2
26373: PUSH
26374: LD_INT 22
26376: PUSH
26377: LD_OWVAR 2
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 21
26388: PUSH
26389: LD_INT 2
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 2
26398: PUSH
26399: LD_INT 34
26401: PUSH
26402: LD_INT 12
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 34
26411: PUSH
26412: LD_INT 51
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 34
26421: PUSH
26422: LD_INT 32
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: LIST
26439: PPUSH
26440: CALL_OW 69
26444: ST_TO_ADDR
// if not tmp then
26445: LD_VAR 0 2
26449: NOT
26450: IFFALSE 26454
// exit ;
26452: GO 26504
// for i in tmp do
26454: LD_ADDR_VAR 0 1
26458: PUSH
26459: LD_VAR 0 2
26463: PUSH
26464: FOR_IN
26465: IFFALSE 26502
// if GetCargo ( i , mat_artifact ) = 0 then
26467: LD_VAR 0 1
26471: PPUSH
26472: LD_INT 4
26474: PPUSH
26475: CALL_OW 289
26479: PUSH
26480: LD_INT 0
26482: EQUAL
26483: IFFALSE 26500
// SetCargo ( i , mat_siberit , 100 ) ;
26485: LD_VAR 0 1
26489: PPUSH
26490: LD_INT 3
26492: PPUSH
26493: LD_INT 100
26495: PPUSH
26496: CALL_OW 290
26500: GO 26464
26502: POP
26503: POP
// end ;
26504: PPOPN 2
26506: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26507: LD_EXP 52
26511: PUSH
26512: LD_EXP 97
26516: AND
26517: IFFALSE 26700
26519: GO 26521
26521: DISABLE
26522: LD_INT 0
26524: PPUSH
26525: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26526: LD_ADDR_VAR 0 2
26530: PUSH
26531: LD_INT 22
26533: PUSH
26534: LD_OWVAR 2
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PPUSH
26543: CALL_OW 69
26547: ST_TO_ADDR
// if not tmp then
26548: LD_VAR 0 2
26552: NOT
26553: IFFALSE 26557
// exit ;
26555: GO 26700
// for i := 1 to 2 do
26557: LD_ADDR_VAR 0 1
26561: PUSH
26562: DOUBLE
26563: LD_INT 1
26565: DEC
26566: ST_TO_ADDR
26567: LD_INT 2
26569: PUSH
26570: FOR_TO
26571: IFFALSE 26698
// begin uc_side := your_side ;
26573: LD_ADDR_OWVAR 20
26577: PUSH
26578: LD_OWVAR 2
26582: ST_TO_ADDR
// uc_nation := nation_american ;
26583: LD_ADDR_OWVAR 21
26587: PUSH
26588: LD_INT 1
26590: ST_TO_ADDR
// vc_chassis := us_morphling ;
26591: LD_ADDR_OWVAR 37
26595: PUSH
26596: LD_INT 5
26598: ST_TO_ADDR
// vc_engine := engine_siberite ;
26599: LD_ADDR_OWVAR 39
26603: PUSH
26604: LD_INT 3
26606: ST_TO_ADDR
// vc_control := control_computer ;
26607: LD_ADDR_OWVAR 38
26611: PUSH
26612: LD_INT 3
26614: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26615: LD_ADDR_OWVAR 40
26619: PUSH
26620: LD_INT 10
26622: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26623: LD_VAR 0 2
26627: PUSH
26628: LD_INT 1
26630: ARRAY
26631: PPUSH
26632: CALL_OW 310
26636: NOT
26637: IFFALSE 26684
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26639: CALL_OW 45
26643: PPUSH
26644: LD_VAR 0 2
26648: PUSH
26649: LD_INT 1
26651: ARRAY
26652: PPUSH
26653: CALL_OW 250
26657: PPUSH
26658: LD_VAR 0 2
26662: PUSH
26663: LD_INT 1
26665: ARRAY
26666: PPUSH
26667: CALL_OW 251
26671: PPUSH
26672: LD_INT 12
26674: PPUSH
26675: LD_INT 1
26677: PPUSH
26678: CALL_OW 50
26682: GO 26696
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26684: CALL_OW 45
26688: PPUSH
26689: LD_INT 1
26691: PPUSH
26692: CALL_OW 51
// end ;
26696: GO 26570
26698: POP
26699: POP
// end ;
26700: PPOPN 2
26702: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26703: LD_EXP 52
26707: PUSH
26708: LD_EXP 98
26712: AND
26713: IFFALSE 26935
26715: GO 26717
26717: DISABLE
26718: LD_INT 0
26720: PPUSH
26721: PPUSH
26722: PPUSH
26723: PPUSH
26724: PPUSH
26725: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26726: LD_ADDR_VAR 0 6
26730: PUSH
26731: LD_INT 22
26733: PUSH
26734: LD_OWVAR 2
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 21
26745: PUSH
26746: LD_INT 1
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 3
26755: PUSH
26756: LD_INT 23
26758: PUSH
26759: LD_INT 0
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: LIST
26774: PPUSH
26775: CALL_OW 69
26779: ST_TO_ADDR
// if not tmp then
26780: LD_VAR 0 6
26784: NOT
26785: IFFALSE 26789
// exit ;
26787: GO 26935
// s1 := rand ( 1 , 4 ) ;
26789: LD_ADDR_VAR 0 2
26793: PUSH
26794: LD_INT 1
26796: PPUSH
26797: LD_INT 4
26799: PPUSH
26800: CALL_OW 12
26804: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26805: LD_ADDR_VAR 0 4
26809: PUSH
26810: LD_VAR 0 6
26814: PUSH
26815: LD_INT 1
26817: ARRAY
26818: PPUSH
26819: LD_VAR 0 2
26823: PPUSH
26824: CALL_OW 259
26828: ST_TO_ADDR
// if s1 = 1 then
26829: LD_VAR 0 2
26833: PUSH
26834: LD_INT 1
26836: EQUAL
26837: IFFALSE 26857
// s2 := rand ( 2 , 4 ) else
26839: LD_ADDR_VAR 0 3
26843: PUSH
26844: LD_INT 2
26846: PPUSH
26847: LD_INT 4
26849: PPUSH
26850: CALL_OW 12
26854: ST_TO_ADDR
26855: GO 26865
// s2 := 1 ;
26857: LD_ADDR_VAR 0 3
26861: PUSH
26862: LD_INT 1
26864: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26865: LD_ADDR_VAR 0 5
26869: PUSH
26870: LD_VAR 0 6
26874: PUSH
26875: LD_INT 1
26877: ARRAY
26878: PPUSH
26879: LD_VAR 0 3
26883: PPUSH
26884: CALL_OW 259
26888: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26889: LD_VAR 0 6
26893: PUSH
26894: LD_INT 1
26896: ARRAY
26897: PPUSH
26898: LD_VAR 0 2
26902: PPUSH
26903: LD_VAR 0 5
26907: PPUSH
26908: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26912: LD_VAR 0 6
26916: PUSH
26917: LD_INT 1
26919: ARRAY
26920: PPUSH
26921: LD_VAR 0 3
26925: PPUSH
26926: LD_VAR 0 4
26930: PPUSH
26931: CALL_OW 237
// end ;
26935: PPOPN 6
26937: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26938: LD_EXP 52
26942: PUSH
26943: LD_EXP 99
26947: AND
26948: IFFALSE 27027
26950: GO 26952
26952: DISABLE
26953: LD_INT 0
26955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26956: LD_ADDR_VAR 0 1
26960: PUSH
26961: LD_INT 22
26963: PUSH
26964: LD_OWVAR 2
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 30
26975: PUSH
26976: LD_INT 3
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PPUSH
26987: CALL_OW 69
26991: ST_TO_ADDR
// if not tmp then
26992: LD_VAR 0 1
26996: NOT
26997: IFFALSE 27001
// exit ;
26999: GO 27027
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27001: LD_VAR 0 1
27005: PUSH
27006: LD_INT 1
27008: PPUSH
27009: LD_VAR 0 1
27013: PPUSH
27014: CALL_OW 12
27018: ARRAY
27019: PPUSH
27020: LD_INT 1
27022: PPUSH
27023: CALL_OW 234
// end ;
27027: PPOPN 1
27029: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27030: LD_EXP 52
27034: PUSH
27035: LD_EXP 100
27039: AND
27040: IFFALSE 27152
27042: GO 27044
27044: DISABLE
27045: LD_INT 0
27047: PPUSH
27048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27049: LD_ADDR_VAR 0 2
27053: PUSH
27054: LD_INT 22
27056: PUSH
27057: LD_OWVAR 2
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 2
27068: PUSH
27069: LD_INT 30
27071: PUSH
27072: LD_INT 27
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 30
27081: PUSH
27082: LD_INT 26
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 30
27091: PUSH
27092: LD_INT 28
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PPUSH
27109: CALL_OW 69
27113: ST_TO_ADDR
// if not tmp then
27114: LD_VAR 0 2
27118: NOT
27119: IFFALSE 27123
// exit ;
27121: GO 27152
// for i in tmp do
27123: LD_ADDR_VAR 0 1
27127: PUSH
27128: LD_VAR 0 2
27132: PUSH
27133: FOR_IN
27134: IFFALSE 27150
// SetLives ( i , 1 ) ;
27136: LD_VAR 0 1
27140: PPUSH
27141: LD_INT 1
27143: PPUSH
27144: CALL_OW 234
27148: GO 27133
27150: POP
27151: POP
// end ;
27152: PPOPN 2
27154: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
27155: LD_EXP 52
27159: PUSH
27160: LD_EXP 101
27164: AND
27165: IFFALSE 27439
27167: GO 27169
27169: DISABLE
27170: LD_INT 0
27172: PPUSH
27173: PPUSH
27174: PPUSH
// begin i := rand ( 1 , 7 ) ;
27175: LD_ADDR_VAR 0 1
27179: PUSH
27180: LD_INT 1
27182: PPUSH
27183: LD_INT 7
27185: PPUSH
27186: CALL_OW 12
27190: ST_TO_ADDR
// case i of 1 :
27191: LD_VAR 0 1
27195: PUSH
27196: LD_INT 1
27198: DOUBLE
27199: EQUAL
27200: IFTRUE 27204
27202: GO 27214
27204: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
27205: LD_STRING earthquake(getX(game), 0, 32)
27207: PPUSH
27208: CALL_OW 559
27212: GO 27439
27214: LD_INT 2
27216: DOUBLE
27217: EQUAL
27218: IFTRUE 27222
27220: GO 27236
27222: POP
// begin ToLua ( displayStucuk(); ) ;
27223: LD_STRING displayStucuk();
27225: PPUSH
27226: CALL_OW 559
// ResetFog ;
27230: CALL_OW 335
// end ; 3 :
27234: GO 27439
27236: LD_INT 3
27238: DOUBLE
27239: EQUAL
27240: IFTRUE 27244
27242: GO 27348
27244: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27245: LD_ADDR_VAR 0 2
27249: PUSH
27250: LD_INT 22
27252: PUSH
27253: LD_OWVAR 2
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 25
27264: PUSH
27265: LD_INT 1
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PPUSH
27276: CALL_OW 69
27280: ST_TO_ADDR
// if not tmp then
27281: LD_VAR 0 2
27285: NOT
27286: IFFALSE 27290
// exit ;
27288: GO 27439
// un := tmp [ rand ( 1 , tmp ) ] ;
27290: LD_ADDR_VAR 0 3
27294: PUSH
27295: LD_VAR 0 2
27299: PUSH
27300: LD_INT 1
27302: PPUSH
27303: LD_VAR 0 2
27307: PPUSH
27308: CALL_OW 12
27312: ARRAY
27313: ST_TO_ADDR
// if Crawls ( un ) then
27314: LD_VAR 0 3
27318: PPUSH
27319: CALL_OW 318
27323: IFFALSE 27334
// ComWalk ( un ) ;
27325: LD_VAR 0 3
27329: PPUSH
27330: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27334: LD_VAR 0 3
27338: PPUSH
27339: LD_INT 8
27341: PPUSH
27342: CALL_OW 336
// end ; 4 :
27346: GO 27439
27348: LD_INT 4
27350: DOUBLE
27351: EQUAL
27352: IFTRUE 27356
27354: GO 27417
27356: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27357: LD_ADDR_VAR 0 2
27361: PUSH
27362: LD_INT 22
27364: PUSH
27365: LD_OWVAR 2
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 30
27376: PUSH
27377: LD_INT 29
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PPUSH
27388: CALL_OW 69
27392: ST_TO_ADDR
// if not tmp then
27393: LD_VAR 0 2
27397: NOT
27398: IFFALSE 27402
// exit ;
27400: GO 27439
// DestroyUnit ( tmp [ 1 ] ) ;
27402: LD_VAR 0 2
27406: PUSH
27407: LD_INT 1
27409: ARRAY
27410: PPUSH
27411: CALL_OW 65
// end ; 5 .. 7 :
27415: GO 27439
27417: LD_INT 5
27419: DOUBLE
27420: GREATEREQUAL
27421: IFFALSE 27429
27423: LD_INT 7
27425: DOUBLE
27426: LESSEQUAL
27427: IFTRUE 27431
27429: GO 27438
27431: POP
// StreamSibBomb ; end ;
27432: CALL 23689 0 0
27436: GO 27439
27438: POP
// end ;
27439: PPOPN 3
27441: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27442: LD_EXP 52
27446: PUSH
27447: LD_EXP 102
27451: AND
27452: IFFALSE 27608
27454: GO 27456
27456: DISABLE
27457: LD_INT 0
27459: PPUSH
27460: PPUSH
27461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27462: LD_ADDR_VAR 0 2
27466: PUSH
27467: LD_INT 81
27469: PUSH
27470: LD_OWVAR 2
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 2
27481: PUSH
27482: LD_INT 21
27484: PUSH
27485: LD_INT 1
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 21
27494: PUSH
27495: LD_INT 2
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: LIST
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PPUSH
27511: CALL_OW 69
27515: ST_TO_ADDR
// if not tmp then
27516: LD_VAR 0 2
27520: NOT
27521: IFFALSE 27525
// exit ;
27523: GO 27608
// p := 0 ;
27525: LD_ADDR_VAR 0 3
27529: PUSH
27530: LD_INT 0
27532: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27533: LD_INT 35
27535: PPUSH
27536: CALL_OW 67
// p := p + 1 ;
27540: LD_ADDR_VAR 0 3
27544: PUSH
27545: LD_VAR 0 3
27549: PUSH
27550: LD_INT 1
27552: PLUS
27553: ST_TO_ADDR
// for i in tmp do
27554: LD_ADDR_VAR 0 1
27558: PUSH
27559: LD_VAR 0 2
27563: PUSH
27564: FOR_IN
27565: IFFALSE 27596
// if GetLives ( i ) < 1000 then
27567: LD_VAR 0 1
27571: PPUSH
27572: CALL_OW 256
27576: PUSH
27577: LD_INT 1000
27579: LESS
27580: IFFALSE 27594
// SetLives ( i , 1000 ) ;
27582: LD_VAR 0 1
27586: PPUSH
27587: LD_INT 1000
27589: PPUSH
27590: CALL_OW 234
27594: GO 27564
27596: POP
27597: POP
// until p > 20 ;
27598: LD_VAR 0 3
27602: PUSH
27603: LD_INT 20
27605: GREATER
27606: IFFALSE 27533
// end ;
27608: PPOPN 3
27610: END
// every 0 0$1 trigger StreamModeActive and sTime do
27611: LD_EXP 52
27615: PUSH
27616: LD_EXP 103
27620: AND
27621: IFFALSE 27656
27623: GO 27625
27625: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27626: LD_INT 28
27628: PPUSH
27629: LD_OWVAR 2
27633: PPUSH
27634: LD_INT 2
27636: PPUSH
27637: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27641: LD_INT 30
27643: PPUSH
27644: LD_OWVAR 2
27648: PPUSH
27649: LD_INT 2
27651: PPUSH
27652: CALL_OW 322
// end ;
27656: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27657: LD_EXP 52
27661: PUSH
27662: LD_EXP 104
27666: AND
27667: IFFALSE 27788
27669: GO 27671
27671: DISABLE
27672: LD_INT 0
27674: PPUSH
27675: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27676: LD_ADDR_VAR 0 2
27680: PUSH
27681: LD_INT 22
27683: PUSH
27684: LD_OWVAR 2
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 21
27695: PUSH
27696: LD_INT 1
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: LD_INT 3
27705: PUSH
27706: LD_INT 23
27708: PUSH
27709: LD_INT 0
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: LIST
27724: PPUSH
27725: CALL_OW 69
27729: ST_TO_ADDR
// if not tmp then
27730: LD_VAR 0 2
27734: NOT
27735: IFFALSE 27739
// exit ;
27737: GO 27788
// for i in tmp do
27739: LD_ADDR_VAR 0 1
27743: PUSH
27744: LD_VAR 0 2
27748: PUSH
27749: FOR_IN
27750: IFFALSE 27786
// begin if Crawls ( i ) then
27752: LD_VAR 0 1
27756: PPUSH
27757: CALL_OW 318
27761: IFFALSE 27772
// ComWalk ( i ) ;
27763: LD_VAR 0 1
27767: PPUSH
27768: CALL_OW 138
// SetClass ( i , 2 ) ;
27772: LD_VAR 0 1
27776: PPUSH
27777: LD_INT 2
27779: PPUSH
27780: CALL_OW 336
// end ;
27784: GO 27749
27786: POP
27787: POP
// end ;
27788: PPOPN 2
27790: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27791: LD_EXP 52
27795: PUSH
27796: LD_EXP 105
27800: AND
27801: IFFALSE 28082
27803: GO 27805
27805: DISABLE
27806: LD_INT 0
27808: PPUSH
27809: PPUSH
27810: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27811: LD_OWVAR 2
27815: PPUSH
27816: LD_INT 9
27818: PPUSH
27819: LD_INT 1
27821: PPUSH
27822: LD_INT 1
27824: PPUSH
27825: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27829: LD_INT 9
27831: PPUSH
27832: LD_OWVAR 2
27836: PPUSH
27837: CALL_OW 343
// uc_side := 9 ;
27841: LD_ADDR_OWVAR 20
27845: PUSH
27846: LD_INT 9
27848: ST_TO_ADDR
// uc_nation := 2 ;
27849: LD_ADDR_OWVAR 21
27853: PUSH
27854: LD_INT 2
27856: ST_TO_ADDR
// hc_name := Dark Warrior ;
27857: LD_ADDR_OWVAR 26
27861: PUSH
27862: LD_STRING Dark Warrior
27864: ST_TO_ADDR
// hc_gallery :=  ;
27865: LD_ADDR_OWVAR 33
27869: PUSH
27870: LD_STRING 
27872: ST_TO_ADDR
// hc_noskilllimit := true ;
27873: LD_ADDR_OWVAR 76
27877: PUSH
27878: LD_INT 1
27880: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27881: LD_ADDR_OWVAR 31
27885: PUSH
27886: LD_INT 30
27888: PUSH
27889: LD_INT 30
27891: PUSH
27892: LD_INT 30
27894: PUSH
27895: LD_INT 30
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: ST_TO_ADDR
// un := CreateHuman ;
27904: LD_ADDR_VAR 0 3
27908: PUSH
27909: CALL_OW 44
27913: ST_TO_ADDR
// hc_noskilllimit := false ;
27914: LD_ADDR_OWVAR 76
27918: PUSH
27919: LD_INT 0
27921: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27922: LD_VAR 0 3
27926: PPUSH
27927: LD_INT 1
27929: PPUSH
27930: CALL_OW 51
// p := 0 ;
27934: LD_ADDR_VAR 0 2
27938: PUSH
27939: LD_INT 0
27941: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27942: LD_INT 35
27944: PPUSH
27945: CALL_OW 67
// p := p + 1 ;
27949: LD_ADDR_VAR 0 2
27953: PUSH
27954: LD_VAR 0 2
27958: PUSH
27959: LD_INT 1
27961: PLUS
27962: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27963: LD_VAR 0 3
27967: PPUSH
27968: CALL_OW 256
27972: PUSH
27973: LD_INT 1000
27975: LESS
27976: IFFALSE 27990
// SetLives ( un , 1000 ) ;
27978: LD_VAR 0 3
27982: PPUSH
27983: LD_INT 1000
27985: PPUSH
27986: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27990: LD_VAR 0 3
27994: PPUSH
27995: LD_INT 81
27997: PUSH
27998: LD_OWVAR 2
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: LD_INT 91
28009: PUSH
28010: LD_VAR 0 3
28014: PUSH
28015: LD_INT 30
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: LIST
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PPUSH
28027: CALL_OW 69
28031: PPUSH
28032: LD_VAR 0 3
28036: PPUSH
28037: CALL_OW 74
28041: PPUSH
28042: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
28046: LD_VAR 0 2
28050: PUSH
28051: LD_INT 60
28053: GREATER
28054: PUSH
28055: LD_VAR 0 3
28059: PPUSH
28060: CALL_OW 301
28064: OR
28065: IFFALSE 27942
// if un then
28067: LD_VAR 0 3
28071: IFFALSE 28082
// RemoveUnit ( un ) ;
28073: LD_VAR 0 3
28077: PPUSH
28078: CALL_OW 64
// end ;
28082: PPOPN 3
28084: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28085: LD_INT 0
28087: PPUSH
// case cmd of 301 :
28088: LD_VAR 0 1
28092: PUSH
28093: LD_INT 301
28095: DOUBLE
28096: EQUAL
28097: IFTRUE 28101
28099: GO 28133
28101: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28102: LD_VAR 0 6
28106: PPUSH
28107: LD_VAR 0 7
28111: PPUSH
28112: LD_VAR 0 8
28116: PPUSH
28117: LD_VAR 0 4
28121: PPUSH
28122: LD_VAR 0 5
28126: PPUSH
28127: CALL 29334 0 5
28131: GO 28254
28133: LD_INT 302
28135: DOUBLE
28136: EQUAL
28137: IFTRUE 28141
28139: GO 28178
28141: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28142: LD_VAR 0 6
28146: PPUSH
28147: LD_VAR 0 7
28151: PPUSH
28152: LD_VAR 0 8
28156: PPUSH
28157: LD_VAR 0 9
28161: PPUSH
28162: LD_VAR 0 4
28166: PPUSH
28167: LD_VAR 0 5
28171: PPUSH
28172: CALL 29425 0 6
28176: GO 28254
28178: LD_INT 303
28180: DOUBLE
28181: EQUAL
28182: IFTRUE 28186
28184: GO 28223
28186: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28187: LD_VAR 0 6
28191: PPUSH
28192: LD_VAR 0 7
28196: PPUSH
28197: LD_VAR 0 8
28201: PPUSH
28202: LD_VAR 0 9
28206: PPUSH
28207: LD_VAR 0 4
28211: PPUSH
28212: LD_VAR 0 5
28216: PPUSH
28217: CALL 28259 0 6
28221: GO 28254
28223: LD_INT 304
28225: DOUBLE
28226: EQUAL
28227: IFTRUE 28231
28229: GO 28253
28231: POP
// hHackTeleport ( unit , x , y ) ; end ;
28232: LD_VAR 0 2
28236: PPUSH
28237: LD_VAR 0 4
28241: PPUSH
28242: LD_VAR 0 5
28246: PPUSH
28247: CALL 30018 0 3
28251: GO 28254
28253: POP
// end ;
28254: LD_VAR 0 12
28258: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28259: LD_INT 0
28261: PPUSH
28262: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28263: LD_VAR 0 1
28267: PUSH
28268: LD_INT 1
28270: LESS
28271: PUSH
28272: LD_VAR 0 1
28276: PUSH
28277: LD_INT 3
28279: GREATER
28280: OR
28281: PUSH
28282: LD_VAR 0 5
28286: PPUSH
28287: LD_VAR 0 6
28291: PPUSH
28292: CALL_OW 428
28296: OR
28297: IFFALSE 28301
// exit ;
28299: GO 29021
// uc_side := your_side ;
28301: LD_ADDR_OWVAR 20
28305: PUSH
28306: LD_OWVAR 2
28310: ST_TO_ADDR
// uc_nation := nation ;
28311: LD_ADDR_OWVAR 21
28315: PUSH
28316: LD_VAR 0 1
28320: ST_TO_ADDR
// bc_level = 1 ;
28321: LD_ADDR_OWVAR 43
28325: PUSH
28326: LD_INT 1
28328: ST_TO_ADDR
// case btype of 1 :
28329: LD_VAR 0 2
28333: PUSH
28334: LD_INT 1
28336: DOUBLE
28337: EQUAL
28338: IFTRUE 28342
28340: GO 28353
28342: POP
// bc_type := b_depot ; 2 :
28343: LD_ADDR_OWVAR 42
28347: PUSH
28348: LD_INT 0
28350: ST_TO_ADDR
28351: GO 28965
28353: LD_INT 2
28355: DOUBLE
28356: EQUAL
28357: IFTRUE 28361
28359: GO 28372
28361: POP
// bc_type := b_warehouse ; 3 :
28362: LD_ADDR_OWVAR 42
28366: PUSH
28367: LD_INT 1
28369: ST_TO_ADDR
28370: GO 28965
28372: LD_INT 3
28374: DOUBLE
28375: EQUAL
28376: IFTRUE 28380
28378: GO 28391
28380: POP
// bc_type := b_lab ; 4 .. 9 :
28381: LD_ADDR_OWVAR 42
28385: PUSH
28386: LD_INT 6
28388: ST_TO_ADDR
28389: GO 28965
28391: LD_INT 4
28393: DOUBLE
28394: GREATEREQUAL
28395: IFFALSE 28403
28397: LD_INT 9
28399: DOUBLE
28400: LESSEQUAL
28401: IFTRUE 28405
28403: GO 28457
28405: POP
// begin bc_type := b_lab_half ;
28406: LD_ADDR_OWVAR 42
28410: PUSH
28411: LD_INT 7
28413: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28414: LD_ADDR_OWVAR 44
28418: PUSH
28419: LD_INT 10
28421: PUSH
28422: LD_INT 11
28424: PUSH
28425: LD_INT 12
28427: PUSH
28428: LD_INT 15
28430: PUSH
28431: LD_INT 14
28433: PUSH
28434: LD_INT 13
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: PUSH
28445: LD_VAR 0 2
28449: PUSH
28450: LD_INT 3
28452: MINUS
28453: ARRAY
28454: ST_TO_ADDR
// end ; 10 .. 13 :
28455: GO 28965
28457: LD_INT 10
28459: DOUBLE
28460: GREATEREQUAL
28461: IFFALSE 28469
28463: LD_INT 13
28465: DOUBLE
28466: LESSEQUAL
28467: IFTRUE 28471
28469: GO 28548
28471: POP
// begin bc_type := b_lab_full ;
28472: LD_ADDR_OWVAR 42
28476: PUSH
28477: LD_INT 8
28479: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28480: LD_ADDR_OWVAR 44
28484: PUSH
28485: LD_INT 10
28487: PUSH
28488: LD_INT 12
28490: PUSH
28491: LD_INT 14
28493: PUSH
28494: LD_INT 13
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: PUSH
28503: LD_VAR 0 2
28507: PUSH
28508: LD_INT 9
28510: MINUS
28511: ARRAY
28512: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28513: LD_ADDR_OWVAR 45
28517: PUSH
28518: LD_INT 11
28520: PUSH
28521: LD_INT 15
28523: PUSH
28524: LD_INT 12
28526: PUSH
28527: LD_INT 15
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: PUSH
28536: LD_VAR 0 2
28540: PUSH
28541: LD_INT 9
28543: MINUS
28544: ARRAY
28545: ST_TO_ADDR
// end ; 14 :
28546: GO 28965
28548: LD_INT 14
28550: DOUBLE
28551: EQUAL
28552: IFTRUE 28556
28554: GO 28567
28556: POP
// bc_type := b_workshop ; 15 :
28557: LD_ADDR_OWVAR 42
28561: PUSH
28562: LD_INT 2
28564: ST_TO_ADDR
28565: GO 28965
28567: LD_INT 15
28569: DOUBLE
28570: EQUAL
28571: IFTRUE 28575
28573: GO 28586
28575: POP
// bc_type := b_factory ; 16 :
28576: LD_ADDR_OWVAR 42
28580: PUSH
28581: LD_INT 3
28583: ST_TO_ADDR
28584: GO 28965
28586: LD_INT 16
28588: DOUBLE
28589: EQUAL
28590: IFTRUE 28594
28592: GO 28605
28594: POP
// bc_type := b_ext_gun ; 17 :
28595: LD_ADDR_OWVAR 42
28599: PUSH
28600: LD_INT 17
28602: ST_TO_ADDR
28603: GO 28965
28605: LD_INT 17
28607: DOUBLE
28608: EQUAL
28609: IFTRUE 28613
28611: GO 28641
28613: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28614: LD_ADDR_OWVAR 42
28618: PUSH
28619: LD_INT 19
28621: PUSH
28622: LD_INT 23
28624: PUSH
28625: LD_INT 19
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: LIST
28632: PUSH
28633: LD_VAR 0 1
28637: ARRAY
28638: ST_TO_ADDR
28639: GO 28965
28641: LD_INT 18
28643: DOUBLE
28644: EQUAL
28645: IFTRUE 28649
28647: GO 28660
28649: POP
// bc_type := b_ext_radar ; 19 :
28650: LD_ADDR_OWVAR 42
28654: PUSH
28655: LD_INT 20
28657: ST_TO_ADDR
28658: GO 28965
28660: LD_INT 19
28662: DOUBLE
28663: EQUAL
28664: IFTRUE 28668
28666: GO 28679
28668: POP
// bc_type := b_ext_radio ; 20 :
28669: LD_ADDR_OWVAR 42
28673: PUSH
28674: LD_INT 22
28676: ST_TO_ADDR
28677: GO 28965
28679: LD_INT 20
28681: DOUBLE
28682: EQUAL
28683: IFTRUE 28687
28685: GO 28698
28687: POP
// bc_type := b_ext_siberium ; 21 :
28688: LD_ADDR_OWVAR 42
28692: PUSH
28693: LD_INT 21
28695: ST_TO_ADDR
28696: GO 28965
28698: LD_INT 21
28700: DOUBLE
28701: EQUAL
28702: IFTRUE 28706
28704: GO 28717
28706: POP
// bc_type := b_ext_computer ; 22 :
28707: LD_ADDR_OWVAR 42
28711: PUSH
28712: LD_INT 24
28714: ST_TO_ADDR
28715: GO 28965
28717: LD_INT 22
28719: DOUBLE
28720: EQUAL
28721: IFTRUE 28725
28723: GO 28736
28725: POP
// bc_type := b_ext_track ; 23 :
28726: LD_ADDR_OWVAR 42
28730: PUSH
28731: LD_INT 16
28733: ST_TO_ADDR
28734: GO 28965
28736: LD_INT 23
28738: DOUBLE
28739: EQUAL
28740: IFTRUE 28744
28742: GO 28755
28744: POP
// bc_type := b_ext_laser ; 24 :
28745: LD_ADDR_OWVAR 42
28749: PUSH
28750: LD_INT 25
28752: ST_TO_ADDR
28753: GO 28965
28755: LD_INT 24
28757: DOUBLE
28758: EQUAL
28759: IFTRUE 28763
28761: GO 28774
28763: POP
// bc_type := b_control_tower ; 25 :
28764: LD_ADDR_OWVAR 42
28768: PUSH
28769: LD_INT 36
28771: ST_TO_ADDR
28772: GO 28965
28774: LD_INT 25
28776: DOUBLE
28777: EQUAL
28778: IFTRUE 28782
28780: GO 28793
28782: POP
// bc_type := b_breastwork ; 26 :
28783: LD_ADDR_OWVAR 42
28787: PUSH
28788: LD_INT 31
28790: ST_TO_ADDR
28791: GO 28965
28793: LD_INT 26
28795: DOUBLE
28796: EQUAL
28797: IFTRUE 28801
28799: GO 28812
28801: POP
// bc_type := b_bunker ; 27 :
28802: LD_ADDR_OWVAR 42
28806: PUSH
28807: LD_INT 32
28809: ST_TO_ADDR
28810: GO 28965
28812: LD_INT 27
28814: DOUBLE
28815: EQUAL
28816: IFTRUE 28820
28818: GO 28831
28820: POP
// bc_type := b_turret ; 28 :
28821: LD_ADDR_OWVAR 42
28825: PUSH
28826: LD_INT 33
28828: ST_TO_ADDR
28829: GO 28965
28831: LD_INT 28
28833: DOUBLE
28834: EQUAL
28835: IFTRUE 28839
28837: GO 28850
28839: POP
// bc_type := b_armoury ; 29 :
28840: LD_ADDR_OWVAR 42
28844: PUSH
28845: LD_INT 4
28847: ST_TO_ADDR
28848: GO 28965
28850: LD_INT 29
28852: DOUBLE
28853: EQUAL
28854: IFTRUE 28858
28856: GO 28869
28858: POP
// bc_type := b_barracks ; 30 :
28859: LD_ADDR_OWVAR 42
28863: PUSH
28864: LD_INT 5
28866: ST_TO_ADDR
28867: GO 28965
28869: LD_INT 30
28871: DOUBLE
28872: EQUAL
28873: IFTRUE 28877
28875: GO 28888
28877: POP
// bc_type := b_solar_power ; 31 :
28878: LD_ADDR_OWVAR 42
28882: PUSH
28883: LD_INT 27
28885: ST_TO_ADDR
28886: GO 28965
28888: LD_INT 31
28890: DOUBLE
28891: EQUAL
28892: IFTRUE 28896
28894: GO 28907
28896: POP
// bc_type := b_oil_power ; 32 :
28897: LD_ADDR_OWVAR 42
28901: PUSH
28902: LD_INT 26
28904: ST_TO_ADDR
28905: GO 28965
28907: LD_INT 32
28909: DOUBLE
28910: EQUAL
28911: IFTRUE 28915
28913: GO 28926
28915: POP
// bc_type := b_siberite_power ; 33 :
28916: LD_ADDR_OWVAR 42
28920: PUSH
28921: LD_INT 28
28923: ST_TO_ADDR
28924: GO 28965
28926: LD_INT 33
28928: DOUBLE
28929: EQUAL
28930: IFTRUE 28934
28932: GO 28945
28934: POP
// bc_type := b_oil_mine ; 34 :
28935: LD_ADDR_OWVAR 42
28939: PUSH
28940: LD_INT 29
28942: ST_TO_ADDR
28943: GO 28965
28945: LD_INT 34
28947: DOUBLE
28948: EQUAL
28949: IFTRUE 28953
28951: GO 28964
28953: POP
// bc_type := b_siberite_mine ; end ;
28954: LD_ADDR_OWVAR 42
28958: PUSH
28959: LD_INT 30
28961: ST_TO_ADDR
28962: GO 28965
28964: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28965: LD_ADDR_VAR 0 8
28969: PUSH
28970: LD_VAR 0 5
28974: PPUSH
28975: LD_VAR 0 6
28979: PPUSH
28980: LD_VAR 0 3
28984: PPUSH
28985: CALL_OW 47
28989: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28990: LD_OWVAR 42
28994: PUSH
28995: LD_INT 32
28997: PUSH
28998: LD_INT 33
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: IN
29005: IFFALSE 29021
// PlaceWeaponTurret ( b , weapon ) ;
29007: LD_VAR 0 8
29011: PPUSH
29012: LD_VAR 0 4
29016: PPUSH
29017: CALL_OW 431
// end ;
29021: LD_VAR 0 7
29025: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29026: LD_INT 0
29028: PPUSH
29029: PPUSH
29030: PPUSH
29031: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29032: LD_ADDR_VAR 0 4
29036: PUSH
29037: LD_INT 22
29039: PUSH
29040: LD_OWVAR 2
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 2
29051: PUSH
29052: LD_INT 30
29054: PUSH
29055: LD_INT 0
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: LD_INT 30
29064: PUSH
29065: LD_INT 1
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: LIST
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PPUSH
29081: CALL_OW 69
29085: ST_TO_ADDR
// if not tmp then
29086: LD_VAR 0 4
29090: NOT
29091: IFFALSE 29095
// exit ;
29093: GO 29154
// for i in tmp do
29095: LD_ADDR_VAR 0 2
29099: PUSH
29100: LD_VAR 0 4
29104: PUSH
29105: FOR_IN
29106: IFFALSE 29152
// for j = 1 to 3 do
29108: LD_ADDR_VAR 0 3
29112: PUSH
29113: DOUBLE
29114: LD_INT 1
29116: DEC
29117: ST_TO_ADDR
29118: LD_INT 3
29120: PUSH
29121: FOR_TO
29122: IFFALSE 29148
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29124: LD_VAR 0 2
29128: PPUSH
29129: CALL_OW 274
29133: PPUSH
29134: LD_VAR 0 3
29138: PPUSH
29139: LD_INT 99999
29141: PPUSH
29142: CALL_OW 277
29146: GO 29121
29148: POP
29149: POP
29150: GO 29105
29152: POP
29153: POP
// end ;
29154: LD_VAR 0 1
29158: RET
// export function hHackSetLevel10 ; var i , j ; begin
29159: LD_INT 0
29161: PPUSH
29162: PPUSH
29163: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29164: LD_ADDR_VAR 0 2
29168: PUSH
29169: LD_INT 21
29171: PUSH
29172: LD_INT 1
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PPUSH
29179: CALL_OW 69
29183: PUSH
29184: FOR_IN
29185: IFFALSE 29237
// if IsSelected ( i ) then
29187: LD_VAR 0 2
29191: PPUSH
29192: CALL_OW 306
29196: IFFALSE 29235
// begin for j := 1 to 4 do
29198: LD_ADDR_VAR 0 3
29202: PUSH
29203: DOUBLE
29204: LD_INT 1
29206: DEC
29207: ST_TO_ADDR
29208: LD_INT 4
29210: PUSH
29211: FOR_TO
29212: IFFALSE 29233
// SetSkill ( i , j , 10 ) ;
29214: LD_VAR 0 2
29218: PPUSH
29219: LD_VAR 0 3
29223: PPUSH
29224: LD_INT 10
29226: PPUSH
29227: CALL_OW 237
29231: GO 29211
29233: POP
29234: POP
// end ;
29235: GO 29184
29237: POP
29238: POP
// end ;
29239: LD_VAR 0 1
29243: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29244: LD_INT 0
29246: PPUSH
29247: PPUSH
29248: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29249: LD_ADDR_VAR 0 2
29253: PUSH
29254: LD_INT 22
29256: PUSH
29257: LD_OWVAR 2
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 21
29268: PUSH
29269: LD_INT 1
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PPUSH
29280: CALL_OW 69
29284: PUSH
29285: FOR_IN
29286: IFFALSE 29327
// begin for j := 1 to 4 do
29288: LD_ADDR_VAR 0 3
29292: PUSH
29293: DOUBLE
29294: LD_INT 1
29296: DEC
29297: ST_TO_ADDR
29298: LD_INT 4
29300: PUSH
29301: FOR_TO
29302: IFFALSE 29323
// SetSkill ( i , j , 10 ) ;
29304: LD_VAR 0 2
29308: PPUSH
29309: LD_VAR 0 3
29313: PPUSH
29314: LD_INT 10
29316: PPUSH
29317: CALL_OW 237
29321: GO 29301
29323: POP
29324: POP
// end ;
29325: GO 29285
29327: POP
29328: POP
// end ;
29329: LD_VAR 0 1
29333: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
29334: LD_INT 0
29336: PPUSH
// uc_side := your_side ;
29337: LD_ADDR_OWVAR 20
29341: PUSH
29342: LD_OWVAR 2
29346: ST_TO_ADDR
// uc_nation := nation ;
29347: LD_ADDR_OWVAR 21
29351: PUSH
29352: LD_VAR 0 1
29356: ST_TO_ADDR
// InitHc ;
29357: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29361: LD_INT 0
29363: PPUSH
29364: LD_VAR 0 2
29368: PPUSH
29369: LD_VAR 0 3
29373: PPUSH
29374: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29378: LD_VAR 0 4
29382: PPUSH
29383: LD_VAR 0 5
29387: PPUSH
29388: CALL_OW 428
29392: PUSH
29393: LD_INT 0
29395: EQUAL
29396: IFFALSE 29420
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29398: CALL_OW 44
29402: PPUSH
29403: LD_VAR 0 4
29407: PPUSH
29408: LD_VAR 0 5
29412: PPUSH
29413: LD_INT 1
29415: PPUSH
29416: CALL_OW 48
// end ;
29420: LD_VAR 0 6
29424: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29425: LD_INT 0
29427: PPUSH
29428: PPUSH
// uc_side := your_side ;
29429: LD_ADDR_OWVAR 20
29433: PUSH
29434: LD_OWVAR 2
29438: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29439: LD_VAR 0 1
29443: PUSH
29444: LD_INT 1
29446: PUSH
29447: LD_INT 2
29449: PUSH
29450: LD_INT 3
29452: PUSH
29453: LD_INT 4
29455: PUSH
29456: LD_INT 5
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: IN
29466: IFFALSE 29478
// uc_nation := nation_american else
29468: LD_ADDR_OWVAR 21
29472: PUSH
29473: LD_INT 1
29475: ST_TO_ADDR
29476: GO 29521
// if chassis in [ 11 , 12 , 13 , 14 ] then
29478: LD_VAR 0 1
29482: PUSH
29483: LD_INT 11
29485: PUSH
29486: LD_INT 12
29488: PUSH
29489: LD_INT 13
29491: PUSH
29492: LD_INT 14
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: IN
29501: IFFALSE 29513
// uc_nation := nation_arabian else
29503: LD_ADDR_OWVAR 21
29507: PUSH
29508: LD_INT 2
29510: ST_TO_ADDR
29511: GO 29521
// uc_nation := nation_russian ;
29513: LD_ADDR_OWVAR 21
29517: PUSH
29518: LD_INT 3
29520: ST_TO_ADDR
// vc_chassis := chassis ;
29521: LD_ADDR_OWVAR 37
29525: PUSH
29526: LD_VAR 0 1
29530: ST_TO_ADDR
// vc_engine := engine ;
29531: LD_ADDR_OWVAR 39
29535: PUSH
29536: LD_VAR 0 2
29540: ST_TO_ADDR
// vc_control := control ;
29541: LD_ADDR_OWVAR 38
29545: PUSH
29546: LD_VAR 0 3
29550: ST_TO_ADDR
// vc_weapon := weapon ;
29551: LD_ADDR_OWVAR 40
29555: PUSH
29556: LD_VAR 0 4
29560: ST_TO_ADDR
// un := CreateVehicle ;
29561: LD_ADDR_VAR 0 8
29565: PUSH
29566: CALL_OW 45
29570: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29571: LD_VAR 0 8
29575: PPUSH
29576: LD_INT 0
29578: PPUSH
29579: LD_INT 5
29581: PPUSH
29582: CALL_OW 12
29586: PPUSH
29587: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29591: LD_VAR 0 8
29595: PPUSH
29596: LD_VAR 0 5
29600: PPUSH
29601: LD_VAR 0 6
29605: PPUSH
29606: LD_INT 1
29608: PPUSH
29609: CALL_OW 48
// end ;
29613: LD_VAR 0 7
29617: RET
// export hInvincible ; every 1 do
29618: GO 29620
29620: DISABLE
// hInvincible := [ ] ;
29621: LD_ADDR_EXP 106
29625: PUSH
29626: EMPTY
29627: ST_TO_ADDR
29628: END
// every 10 do var i ;
29629: GO 29631
29631: DISABLE
29632: LD_INT 0
29634: PPUSH
// begin enable ;
29635: ENABLE
// if not hInvincible then
29636: LD_EXP 106
29640: NOT
29641: IFFALSE 29645
// exit ;
29643: GO 29689
// for i in hInvincible do
29645: LD_ADDR_VAR 0 1
29649: PUSH
29650: LD_EXP 106
29654: PUSH
29655: FOR_IN
29656: IFFALSE 29687
// if GetLives ( i ) < 1000 then
29658: LD_VAR 0 1
29662: PPUSH
29663: CALL_OW 256
29667: PUSH
29668: LD_INT 1000
29670: LESS
29671: IFFALSE 29685
// SetLives ( i , 1000 ) ;
29673: LD_VAR 0 1
29677: PPUSH
29678: LD_INT 1000
29680: PPUSH
29681: CALL_OW 234
29685: GO 29655
29687: POP
29688: POP
// end ;
29689: PPOPN 1
29691: END
// export function hHackInvincible ; var i ; begin
29692: LD_INT 0
29694: PPUSH
29695: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29696: LD_ADDR_VAR 0 2
29700: PUSH
29701: LD_INT 2
29703: PUSH
29704: LD_INT 21
29706: PUSH
29707: LD_INT 1
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 21
29716: PUSH
29717: LD_INT 2
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: LIST
29728: PPUSH
29729: CALL_OW 69
29733: PUSH
29734: FOR_IN
29735: IFFALSE 29796
// if IsSelected ( i ) then
29737: LD_VAR 0 2
29741: PPUSH
29742: CALL_OW 306
29746: IFFALSE 29794
// begin if i in hInvincible then
29748: LD_VAR 0 2
29752: PUSH
29753: LD_EXP 106
29757: IN
29758: IFFALSE 29778
// hInvincible := hInvincible diff i else
29760: LD_ADDR_EXP 106
29764: PUSH
29765: LD_EXP 106
29769: PUSH
29770: LD_VAR 0 2
29774: DIFF
29775: ST_TO_ADDR
29776: GO 29794
// hInvincible := hInvincible union i ;
29778: LD_ADDR_EXP 106
29782: PUSH
29783: LD_EXP 106
29787: PUSH
29788: LD_VAR 0 2
29792: UNION
29793: ST_TO_ADDR
// end ;
29794: GO 29734
29796: POP
29797: POP
// end ;
29798: LD_VAR 0 1
29802: RET
// export function hHackInvisible ; var i , j ; begin
29803: LD_INT 0
29805: PPUSH
29806: PPUSH
29807: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29808: LD_ADDR_VAR 0 2
29812: PUSH
29813: LD_INT 21
29815: PUSH
29816: LD_INT 1
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PPUSH
29823: CALL_OW 69
29827: PUSH
29828: FOR_IN
29829: IFFALSE 29853
// if IsSelected ( i ) then
29831: LD_VAR 0 2
29835: PPUSH
29836: CALL_OW 306
29840: IFFALSE 29851
// ComForceInvisible ( i ) ;
29842: LD_VAR 0 2
29846: PPUSH
29847: CALL_OW 496
29851: GO 29828
29853: POP
29854: POP
// end ;
29855: LD_VAR 0 1
29859: RET
// export function hHackChangeYourSide ; begin
29860: LD_INT 0
29862: PPUSH
// if your_side = 8 then
29863: LD_OWVAR 2
29867: PUSH
29868: LD_INT 8
29870: EQUAL
29871: IFFALSE 29883
// your_side := 0 else
29873: LD_ADDR_OWVAR 2
29877: PUSH
29878: LD_INT 0
29880: ST_TO_ADDR
29881: GO 29897
// your_side := your_side + 1 ;
29883: LD_ADDR_OWVAR 2
29887: PUSH
29888: LD_OWVAR 2
29892: PUSH
29893: LD_INT 1
29895: PLUS
29896: ST_TO_ADDR
// end ;
29897: LD_VAR 0 1
29901: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29902: LD_INT 0
29904: PPUSH
29905: PPUSH
29906: PPUSH
// for i in all_units do
29907: LD_ADDR_VAR 0 2
29911: PUSH
29912: LD_OWVAR 3
29916: PUSH
29917: FOR_IN
29918: IFFALSE 29996
// if IsSelected ( i ) then
29920: LD_VAR 0 2
29924: PPUSH
29925: CALL_OW 306
29929: IFFALSE 29994
// begin j := GetSide ( i ) ;
29931: LD_ADDR_VAR 0 3
29935: PUSH
29936: LD_VAR 0 2
29940: PPUSH
29941: CALL_OW 255
29945: ST_TO_ADDR
// if j = 8 then
29946: LD_VAR 0 3
29950: PUSH
29951: LD_INT 8
29953: EQUAL
29954: IFFALSE 29966
// j := 0 else
29956: LD_ADDR_VAR 0 3
29960: PUSH
29961: LD_INT 0
29963: ST_TO_ADDR
29964: GO 29980
// j := j + 1 ;
29966: LD_ADDR_VAR 0 3
29970: PUSH
29971: LD_VAR 0 3
29975: PUSH
29976: LD_INT 1
29978: PLUS
29979: ST_TO_ADDR
// SetSide ( i , j ) ;
29980: LD_VAR 0 2
29984: PPUSH
29985: LD_VAR 0 3
29989: PPUSH
29990: CALL_OW 235
// end ;
29994: GO 29917
29996: POP
29997: POP
// end ;
29998: LD_VAR 0 1
30002: RET
// export function hHackFog ; begin
30003: LD_INT 0
30005: PPUSH
// FogOff ( true ) ;
30006: LD_INT 1
30008: PPUSH
30009: CALL_OW 344
// end ;
30013: LD_VAR 0 1
30017: RET
// export function hHackTeleport ( unit , x , y ) ; begin
30018: LD_INT 0
30020: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
30021: LD_VAR 0 1
30025: PPUSH
30026: LD_VAR 0 2
30030: PPUSH
30031: LD_VAR 0 3
30035: PPUSH
30036: LD_INT 1
30038: PPUSH
30039: LD_INT 1
30041: PPUSH
30042: CALL_OW 483
// CenterOnXY ( x , y ) ;
30046: LD_VAR 0 2
30050: PPUSH
30051: LD_VAR 0 3
30055: PPUSH
30056: CALL_OW 84
// end ; end_of_file
30060: LD_VAR 0 4
30064: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
30065: LD_VAR 0 1
30069: PUSH
30070: LD_INT 200
30072: DOUBLE
30073: GREATEREQUAL
30074: IFFALSE 30082
30076: LD_INT 299
30078: DOUBLE
30079: LESSEQUAL
30080: IFTRUE 30084
30082: GO 30116
30084: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
30085: LD_VAR 0 1
30089: PPUSH
30090: LD_VAR 0 2
30094: PPUSH
30095: LD_VAR 0 3
30099: PPUSH
30100: LD_VAR 0 4
30104: PPUSH
30105: LD_VAR 0 5
30109: PPUSH
30110: CALL 30310 0 5
30114: GO 30193
30116: LD_INT 300
30118: DOUBLE
30119: GREATEREQUAL
30120: IFFALSE 30128
30122: LD_INT 399
30124: DOUBLE
30125: LESSEQUAL
30126: IFTRUE 30130
30128: GO 30192
30130: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
30131: LD_VAR 0 1
30135: PPUSH
30136: LD_VAR 0 2
30140: PPUSH
30141: LD_VAR 0 3
30145: PPUSH
30146: LD_VAR 0 4
30150: PPUSH
30151: LD_VAR 0 5
30155: PPUSH
30156: LD_VAR 0 6
30160: PPUSH
30161: LD_VAR 0 7
30165: PPUSH
30166: LD_VAR 0 8
30170: PPUSH
30171: LD_VAR 0 9
30175: PPUSH
30176: LD_VAR 0 10
30180: PPUSH
30181: LD_VAR 0 11
30185: PPUSH
30186: CALL 28085 0 11
30190: GO 30193
30192: POP
// end ; end_of_file
30193: PPOPN 11
30195: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
30196: LD_INT 0
30198: PPUSH
30199: PPUSH
30200: PPUSH
30201: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
30202: LD_VAR 0 1
30206: PPUSH
30207: CALL_OW 264
30211: PUSH
30212: LD_EXP 121
30216: EQUAL
30217: IFFALSE 30289
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
30219: LD_INT 68
30221: PPUSH
30222: LD_VAR 0 1
30226: PPUSH
30227: CALL_OW 255
30231: PPUSH
30232: CALL_OW 321
30236: PUSH
30237: LD_INT 2
30239: EQUAL
30240: IFFALSE 30252
// eff := 70 else
30242: LD_ADDR_VAR 0 4
30246: PUSH
30247: LD_INT 70
30249: ST_TO_ADDR
30250: GO 30260
// eff := 30 ;
30252: LD_ADDR_VAR 0 4
30256: PUSH
30257: LD_INT 30
30259: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
30260: LD_VAR 0 1
30264: PPUSH
30265: CALL_OW 250
30269: PPUSH
30270: LD_VAR 0 1
30274: PPUSH
30275: CALL_OW 251
30279: PPUSH
30280: LD_VAR 0 4
30284: PPUSH
30285: CALL_OW 495
// end ; end ;
30289: LD_VAR 0 2
30293: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
30294: LD_INT 0
30296: PPUSH
// end ;
30297: LD_VAR 0 4
30301: RET
// export function SOS_Command ( cmd ) ; begin
30302: LD_INT 0
30304: PPUSH
// end ;
30305: LD_VAR 0 2
30309: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
30310: LD_INT 0
30312: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
30313: LD_VAR 0 1
30317: PUSH
30318: LD_INT 250
30320: EQUAL
30321: PUSH
30322: LD_VAR 0 2
30326: PPUSH
30327: CALL_OW 264
30331: PUSH
30332: LD_EXP 124
30336: EQUAL
30337: AND
30338: IFFALSE 30359
// MinerPlaceMine ( unit , x , y ) ;
30340: LD_VAR 0 2
30344: PPUSH
30345: LD_VAR 0 4
30349: PPUSH
30350: LD_VAR 0 5
30354: PPUSH
30355: CALL 32700 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
30359: LD_VAR 0 1
30363: PUSH
30364: LD_INT 251
30366: EQUAL
30367: PUSH
30368: LD_VAR 0 2
30372: PPUSH
30373: CALL_OW 264
30377: PUSH
30378: LD_EXP 124
30382: EQUAL
30383: AND
30384: IFFALSE 30405
// MinerDetonateMine ( unit , x , y ) ;
30386: LD_VAR 0 2
30390: PPUSH
30391: LD_VAR 0 4
30395: PPUSH
30396: LD_VAR 0 5
30400: PPUSH
30401: CALL 32977 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
30405: LD_VAR 0 1
30409: PUSH
30410: LD_INT 252
30412: EQUAL
30413: PUSH
30414: LD_VAR 0 2
30418: PPUSH
30419: CALL_OW 264
30423: PUSH
30424: LD_EXP 124
30428: EQUAL
30429: AND
30430: IFFALSE 30451
// MinerCreateMinefield ( unit , x , y ) ;
30432: LD_VAR 0 2
30436: PPUSH
30437: LD_VAR 0 4
30441: PPUSH
30442: LD_VAR 0 5
30446: PPUSH
30447: CALL 33394 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
30451: LD_VAR 0 1
30455: PUSH
30456: LD_INT 253
30458: EQUAL
30459: PUSH
30460: LD_VAR 0 2
30464: PPUSH
30465: CALL_OW 257
30469: PUSH
30470: LD_INT 5
30472: EQUAL
30473: AND
30474: IFFALSE 30495
// ComBinocular ( unit , x , y ) ;
30476: LD_VAR 0 2
30480: PPUSH
30481: LD_VAR 0 4
30485: PPUSH
30486: LD_VAR 0 5
30490: PPUSH
30491: CALL 33765 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
30495: LD_VAR 0 1
30499: PUSH
30500: LD_INT 254
30502: EQUAL
30503: PUSH
30504: LD_VAR 0 2
30508: PPUSH
30509: CALL_OW 264
30513: PUSH
30514: LD_EXP 119
30518: EQUAL
30519: AND
30520: PUSH
30521: LD_VAR 0 3
30525: PPUSH
30526: CALL_OW 263
30530: PUSH
30531: LD_INT 3
30533: EQUAL
30534: AND
30535: IFFALSE 30551
// HackDestroyVehicle ( unit , selectedUnit ) ;
30537: LD_VAR 0 2
30541: PPUSH
30542: LD_VAR 0 3
30546: PPUSH
30547: CALL 32060 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
30551: LD_VAR 0 1
30555: PUSH
30556: LD_INT 255
30558: EQUAL
30559: PUSH
30560: LD_VAR 0 2
30564: PPUSH
30565: CALL_OW 264
30569: PUSH
30570: LD_INT 14
30572: PUSH
30573: LD_INT 53
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: IN
30580: AND
30581: PUSH
30582: LD_VAR 0 4
30586: PPUSH
30587: LD_VAR 0 5
30591: PPUSH
30592: CALL_OW 488
30596: AND
30597: IFFALSE 30621
// CutTreeXYR ( unit , x , y , 12 ) ;
30599: LD_VAR 0 2
30603: PPUSH
30604: LD_VAR 0 4
30608: PPUSH
30609: LD_VAR 0 5
30613: PPUSH
30614: LD_INT 12
30616: PPUSH
30617: CALL 30626 0 4
// end ;
30621: LD_VAR 0 6
30625: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
30626: LD_INT 0
30628: PPUSH
30629: PPUSH
30630: PPUSH
30631: PPUSH
30632: PPUSH
30633: PPUSH
30634: PPUSH
30635: PPUSH
30636: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
30637: LD_VAR 0 1
30641: NOT
30642: PUSH
30643: LD_VAR 0 2
30647: PPUSH
30648: LD_VAR 0 3
30652: PPUSH
30653: CALL_OW 488
30657: NOT
30658: OR
30659: PUSH
30660: LD_VAR 0 4
30664: NOT
30665: OR
30666: IFFALSE 30670
// exit ;
30668: GO 31010
// list := [ ] ;
30670: LD_ADDR_VAR 0 13
30674: PUSH
30675: EMPTY
30676: ST_TO_ADDR
// if x - r < 0 then
30677: LD_VAR 0 2
30681: PUSH
30682: LD_VAR 0 4
30686: MINUS
30687: PUSH
30688: LD_INT 0
30690: LESS
30691: IFFALSE 30703
// min_x := 0 else
30693: LD_ADDR_VAR 0 7
30697: PUSH
30698: LD_INT 0
30700: ST_TO_ADDR
30701: GO 30719
// min_x := x - r ;
30703: LD_ADDR_VAR 0 7
30707: PUSH
30708: LD_VAR 0 2
30712: PUSH
30713: LD_VAR 0 4
30717: MINUS
30718: ST_TO_ADDR
// if y - r < 0 then
30719: LD_VAR 0 3
30723: PUSH
30724: LD_VAR 0 4
30728: MINUS
30729: PUSH
30730: LD_INT 0
30732: LESS
30733: IFFALSE 30745
// min_y := 0 else
30735: LD_ADDR_VAR 0 8
30739: PUSH
30740: LD_INT 0
30742: ST_TO_ADDR
30743: GO 30761
// min_y := y - r ;
30745: LD_ADDR_VAR 0 8
30749: PUSH
30750: LD_VAR 0 3
30754: PUSH
30755: LD_VAR 0 4
30759: MINUS
30760: ST_TO_ADDR
// max_x := x + r ;
30761: LD_ADDR_VAR 0 9
30765: PUSH
30766: LD_VAR 0 2
30770: PUSH
30771: LD_VAR 0 4
30775: PLUS
30776: ST_TO_ADDR
// max_y := y + r ;
30777: LD_ADDR_VAR 0 10
30781: PUSH
30782: LD_VAR 0 3
30786: PUSH
30787: LD_VAR 0 4
30791: PLUS
30792: ST_TO_ADDR
// for _x = min_x to max_x do
30793: LD_ADDR_VAR 0 11
30797: PUSH
30798: DOUBLE
30799: LD_VAR 0 7
30803: DEC
30804: ST_TO_ADDR
30805: LD_VAR 0 9
30809: PUSH
30810: FOR_TO
30811: IFFALSE 30928
// for _y = min_y to max_y do
30813: LD_ADDR_VAR 0 12
30817: PUSH
30818: DOUBLE
30819: LD_VAR 0 8
30823: DEC
30824: ST_TO_ADDR
30825: LD_VAR 0 10
30829: PUSH
30830: FOR_TO
30831: IFFALSE 30924
// begin if not ValidHex ( _x , _y ) then
30833: LD_VAR 0 11
30837: PPUSH
30838: LD_VAR 0 12
30842: PPUSH
30843: CALL_OW 488
30847: NOT
30848: IFFALSE 30852
// continue ;
30850: GO 30830
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
30852: LD_VAR 0 11
30856: PPUSH
30857: LD_VAR 0 12
30861: PPUSH
30862: CALL_OW 351
30866: PUSH
30867: LD_VAR 0 11
30871: PPUSH
30872: LD_VAR 0 12
30876: PPUSH
30877: CALL_OW 554
30881: AND
30882: IFFALSE 30922
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
30884: LD_ADDR_VAR 0 13
30888: PUSH
30889: LD_VAR 0 13
30893: PPUSH
30894: LD_VAR 0 13
30898: PUSH
30899: LD_INT 1
30901: PLUS
30902: PPUSH
30903: LD_VAR 0 11
30907: PUSH
30908: LD_VAR 0 12
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PPUSH
30917: CALL_OW 2
30921: ST_TO_ADDR
// end ;
30922: GO 30830
30924: POP
30925: POP
30926: GO 30810
30928: POP
30929: POP
// if not list then
30930: LD_VAR 0 13
30934: NOT
30935: IFFALSE 30939
// exit ;
30937: GO 31010
// for i in list do
30939: LD_ADDR_VAR 0 6
30943: PUSH
30944: LD_VAR 0 13
30948: PUSH
30949: FOR_IN
30950: IFFALSE 31008
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
30952: LD_VAR 0 1
30956: PPUSH
30957: LD_STRING M
30959: PUSH
30960: LD_VAR 0 6
30964: PUSH
30965: LD_INT 1
30967: ARRAY
30968: PUSH
30969: LD_VAR 0 6
30973: PUSH
30974: LD_INT 2
30976: ARRAY
30977: PUSH
30978: LD_INT 0
30980: PUSH
30981: LD_INT 0
30983: PUSH
30984: LD_INT 0
30986: PUSH
30987: LD_INT 0
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: PUSH
30999: EMPTY
31000: LIST
31001: PPUSH
31002: CALL_OW 447
31006: GO 30949
31008: POP
31009: POP
// end ;
31010: LD_VAR 0 5
31014: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
31015: LD_EXP 107
31019: NOT
31020: IFFALSE 31070
31022: GO 31024
31024: DISABLE
// begin initHack := true ;
31025: LD_ADDR_EXP 107
31029: PUSH
31030: LD_INT 1
31032: ST_TO_ADDR
// hackTanks := [ ] ;
31033: LD_ADDR_EXP 108
31037: PUSH
31038: EMPTY
31039: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
31040: LD_ADDR_EXP 109
31044: PUSH
31045: EMPTY
31046: ST_TO_ADDR
// hackLimit := 3 ;
31047: LD_ADDR_EXP 110
31051: PUSH
31052: LD_INT 3
31054: ST_TO_ADDR
// hackDist := 12 ;
31055: LD_ADDR_EXP 111
31059: PUSH
31060: LD_INT 12
31062: ST_TO_ADDR
// hackCounter := [ ] ;
31063: LD_ADDR_EXP 112
31067: PUSH
31068: EMPTY
31069: ST_TO_ADDR
// end ;
31070: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
31071: LD_EXP 107
31075: PUSH
31076: LD_INT 34
31078: PUSH
31079: LD_EXP 119
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PPUSH
31088: CALL_OW 69
31092: AND
31093: IFFALSE 31348
31095: GO 31097
31097: DISABLE
31098: LD_INT 0
31100: PPUSH
31101: PPUSH
// begin enable ;
31102: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
31103: LD_ADDR_VAR 0 1
31107: PUSH
31108: LD_INT 34
31110: PUSH
31111: LD_EXP 119
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PPUSH
31120: CALL_OW 69
31124: PUSH
31125: FOR_IN
31126: IFFALSE 31346
// begin if not i in hackTanks then
31128: LD_VAR 0 1
31132: PUSH
31133: LD_EXP 108
31137: IN
31138: NOT
31139: IFFALSE 31222
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
31141: LD_ADDR_EXP 108
31145: PUSH
31146: LD_EXP 108
31150: PPUSH
31151: LD_EXP 108
31155: PUSH
31156: LD_INT 1
31158: PLUS
31159: PPUSH
31160: LD_VAR 0 1
31164: PPUSH
31165: CALL_OW 1
31169: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
31170: LD_ADDR_EXP 109
31174: PUSH
31175: LD_EXP 109
31179: PPUSH
31180: LD_EXP 109
31184: PUSH
31185: LD_INT 1
31187: PLUS
31188: PPUSH
31189: EMPTY
31190: PPUSH
31191: CALL_OW 1
31195: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
31196: LD_ADDR_EXP 112
31200: PUSH
31201: LD_EXP 112
31205: PPUSH
31206: LD_EXP 112
31210: PUSH
31211: LD_INT 1
31213: PLUS
31214: PPUSH
31215: EMPTY
31216: PPUSH
31217: CALL_OW 1
31221: ST_TO_ADDR
// end ; if not IsOk ( i ) then
31222: LD_VAR 0 1
31226: PPUSH
31227: CALL_OW 302
31231: NOT
31232: IFFALSE 31245
// begin HackUnlinkAll ( i ) ;
31234: LD_VAR 0 1
31238: PPUSH
31239: CALL 31351 0 1
// continue ;
31243: GO 31125
// end ; HackCheckCapturedStatus ( i ) ;
31245: LD_VAR 0 1
31249: PPUSH
31250: CALL 31794 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
31254: LD_ADDR_VAR 0 2
31258: PUSH
31259: LD_INT 81
31261: PUSH
31262: LD_VAR 0 1
31266: PPUSH
31267: CALL_OW 255
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 33
31278: PUSH
31279: LD_INT 3
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 91
31288: PUSH
31289: LD_VAR 0 1
31293: PUSH
31294: LD_EXP 111
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 50
31306: PUSH
31307: EMPTY
31308: LIST
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: PPUSH
31316: CALL_OW 69
31320: ST_TO_ADDR
// if not tmp then
31321: LD_VAR 0 2
31325: NOT
31326: IFFALSE 31330
// continue ;
31328: GO 31125
// HackLink ( i , tmp ) ;
31330: LD_VAR 0 1
31334: PPUSH
31335: LD_VAR 0 2
31339: PPUSH
31340: CALL 31487 0 2
// end ;
31344: GO 31125
31346: POP
31347: POP
// end ;
31348: PPOPN 2
31350: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
31351: LD_INT 0
31353: PPUSH
31354: PPUSH
31355: PPUSH
// if not hack in hackTanks then
31356: LD_VAR 0 1
31360: PUSH
31361: LD_EXP 108
31365: IN
31366: NOT
31367: IFFALSE 31371
// exit ;
31369: GO 31482
// index := GetElementIndex ( hackTanks , hack ) ;
31371: LD_ADDR_VAR 0 4
31375: PUSH
31376: LD_EXP 108
31380: PPUSH
31381: LD_VAR 0 1
31385: PPUSH
31386: CALL 39060 0 2
31390: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
31391: LD_EXP 109
31395: PUSH
31396: LD_VAR 0 4
31400: ARRAY
31401: IFFALSE 31482
// begin for i in hackTanksCaptured [ index ] do
31403: LD_ADDR_VAR 0 3
31407: PUSH
31408: LD_EXP 109
31412: PUSH
31413: LD_VAR 0 4
31417: ARRAY
31418: PUSH
31419: FOR_IN
31420: IFFALSE 31446
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
31422: LD_VAR 0 3
31426: PUSH
31427: LD_INT 1
31429: ARRAY
31430: PPUSH
31431: LD_VAR 0 3
31435: PUSH
31436: LD_INT 2
31438: ARRAY
31439: PPUSH
31440: CALL_OW 235
31444: GO 31419
31446: POP
31447: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
31448: LD_ADDR_EXP 109
31452: PUSH
31453: LD_EXP 109
31457: PPUSH
31458: LD_VAR 0 4
31462: PPUSH
31463: EMPTY
31464: PPUSH
31465: CALL_OW 1
31469: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
31470: LD_VAR 0 1
31474: PPUSH
31475: LD_INT 0
31477: PPUSH
31478: CALL_OW 505
// end ; end ;
31482: LD_VAR 0 2
31486: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
31487: LD_INT 0
31489: PPUSH
31490: PPUSH
31491: PPUSH
// if not hack in hackTanks or not vehicles then
31492: LD_VAR 0 1
31496: PUSH
31497: LD_EXP 108
31501: IN
31502: NOT
31503: PUSH
31504: LD_VAR 0 2
31508: NOT
31509: OR
31510: IFFALSE 31514
// exit ;
31512: GO 31789
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
31514: LD_ADDR_VAR 0 2
31518: PUSH
31519: LD_VAR 0 1
31523: PPUSH
31524: LD_VAR 0 2
31528: PPUSH
31529: LD_INT 1
31531: PPUSH
31532: LD_INT 1
31534: PPUSH
31535: CALL 39710 0 4
31539: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
31540: LD_ADDR_VAR 0 5
31544: PUSH
31545: LD_EXP 108
31549: PPUSH
31550: LD_VAR 0 1
31554: PPUSH
31555: CALL 39060 0 2
31559: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
31560: LD_EXP 109
31564: PUSH
31565: LD_VAR 0 5
31569: ARRAY
31570: PUSH
31571: LD_EXP 110
31575: LESS
31576: IFFALSE 31765
// begin for i := 1 to vehicles do
31578: LD_ADDR_VAR 0 4
31582: PUSH
31583: DOUBLE
31584: LD_INT 1
31586: DEC
31587: ST_TO_ADDR
31588: LD_VAR 0 2
31592: PUSH
31593: FOR_TO
31594: IFFALSE 31763
// begin if hackTanksCaptured [ index ] = hackLimit then
31596: LD_EXP 109
31600: PUSH
31601: LD_VAR 0 5
31605: ARRAY
31606: PUSH
31607: LD_EXP 110
31611: EQUAL
31612: IFFALSE 31616
// break ;
31614: GO 31763
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
31616: LD_ADDR_EXP 112
31620: PUSH
31621: LD_EXP 112
31625: PPUSH
31626: LD_VAR 0 5
31630: PPUSH
31631: LD_EXP 112
31635: PUSH
31636: LD_VAR 0 5
31640: ARRAY
31641: PUSH
31642: LD_INT 1
31644: PLUS
31645: PPUSH
31646: CALL_OW 1
31650: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
31651: LD_ADDR_EXP 109
31655: PUSH
31656: LD_EXP 109
31660: PPUSH
31661: LD_VAR 0 5
31665: PUSH
31666: LD_EXP 109
31670: PUSH
31671: LD_VAR 0 5
31675: ARRAY
31676: PUSH
31677: LD_INT 1
31679: PLUS
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PPUSH
31685: LD_VAR 0 2
31689: PUSH
31690: LD_VAR 0 4
31694: ARRAY
31695: PUSH
31696: LD_VAR 0 2
31700: PUSH
31701: LD_VAR 0 4
31705: ARRAY
31706: PPUSH
31707: CALL_OW 255
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PPUSH
31716: CALL 39275 0 3
31720: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
31721: LD_VAR 0 2
31725: PUSH
31726: LD_VAR 0 4
31730: ARRAY
31731: PPUSH
31732: LD_VAR 0 1
31736: PPUSH
31737: CALL_OW 255
31741: PPUSH
31742: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
31746: LD_VAR 0 2
31750: PUSH
31751: LD_VAR 0 4
31755: ARRAY
31756: PPUSH
31757: CALL_OW 141
// end ;
31761: GO 31593
31763: POP
31764: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31765: LD_VAR 0 1
31769: PPUSH
31770: LD_EXP 109
31774: PUSH
31775: LD_VAR 0 5
31779: ARRAY
31780: PUSH
31781: LD_INT 0
31783: PLUS
31784: PPUSH
31785: CALL_OW 505
// end ;
31789: LD_VAR 0 3
31793: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
31794: LD_INT 0
31796: PPUSH
31797: PPUSH
31798: PPUSH
31799: PPUSH
// if not hack in hackTanks then
31800: LD_VAR 0 1
31804: PUSH
31805: LD_EXP 108
31809: IN
31810: NOT
31811: IFFALSE 31815
// exit ;
31813: GO 32055
// index := GetElementIndex ( hackTanks , hack ) ;
31815: LD_ADDR_VAR 0 4
31819: PUSH
31820: LD_EXP 108
31824: PPUSH
31825: LD_VAR 0 1
31829: PPUSH
31830: CALL 39060 0 2
31834: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
31835: LD_ADDR_VAR 0 3
31839: PUSH
31840: DOUBLE
31841: LD_EXP 109
31845: PUSH
31846: LD_VAR 0 4
31850: ARRAY
31851: INC
31852: ST_TO_ADDR
31853: LD_INT 1
31855: PUSH
31856: FOR_DOWNTO
31857: IFFALSE 32029
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
31859: LD_ADDR_VAR 0 5
31863: PUSH
31864: LD_EXP 109
31868: PUSH
31869: LD_VAR 0 4
31873: ARRAY
31874: PUSH
31875: LD_VAR 0 3
31879: ARRAY
31880: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
31881: LD_VAR 0 5
31885: PUSH
31886: LD_INT 1
31888: ARRAY
31889: PPUSH
31890: CALL_OW 302
31894: NOT
31895: PUSH
31896: LD_VAR 0 5
31900: PUSH
31901: LD_INT 1
31903: ARRAY
31904: PPUSH
31905: CALL_OW 255
31909: PUSH
31910: LD_VAR 0 1
31914: PPUSH
31915: CALL_OW 255
31919: NONEQUAL
31920: OR
31921: IFFALSE 32027
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
31923: LD_VAR 0 5
31927: PUSH
31928: LD_INT 1
31930: ARRAY
31931: PPUSH
31932: CALL_OW 305
31936: PUSH
31937: LD_VAR 0 5
31941: PUSH
31942: LD_INT 1
31944: ARRAY
31945: PPUSH
31946: CALL_OW 255
31950: PUSH
31951: LD_VAR 0 1
31955: PPUSH
31956: CALL_OW 255
31960: EQUAL
31961: AND
31962: IFFALSE 31986
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
31964: LD_VAR 0 5
31968: PUSH
31969: LD_INT 1
31971: ARRAY
31972: PPUSH
31973: LD_VAR 0 5
31977: PUSH
31978: LD_INT 2
31980: ARRAY
31981: PPUSH
31982: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
31986: LD_ADDR_EXP 109
31990: PUSH
31991: LD_EXP 109
31995: PPUSH
31996: LD_VAR 0 4
32000: PPUSH
32001: LD_EXP 109
32005: PUSH
32006: LD_VAR 0 4
32010: ARRAY
32011: PPUSH
32012: LD_VAR 0 3
32016: PPUSH
32017: CALL_OW 3
32021: PPUSH
32022: CALL_OW 1
32026: ST_TO_ADDR
// end ; end ;
32027: GO 31856
32029: POP
32030: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32031: LD_VAR 0 1
32035: PPUSH
32036: LD_EXP 109
32040: PUSH
32041: LD_VAR 0 4
32045: ARRAY
32046: PUSH
32047: LD_INT 0
32049: PLUS
32050: PPUSH
32051: CALL_OW 505
// end ;
32055: LD_VAR 0 2
32059: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
32060: LD_INT 0
32062: PPUSH
32063: PPUSH
32064: PPUSH
32065: PPUSH
// if not hack in hackTanks then
32066: LD_VAR 0 1
32070: PUSH
32071: LD_EXP 108
32075: IN
32076: NOT
32077: IFFALSE 32081
// exit ;
32079: GO 32166
// index := GetElementIndex ( hackTanks , hack ) ;
32081: LD_ADDR_VAR 0 5
32085: PUSH
32086: LD_EXP 108
32090: PPUSH
32091: LD_VAR 0 1
32095: PPUSH
32096: CALL 39060 0 2
32100: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
32101: LD_ADDR_VAR 0 4
32105: PUSH
32106: DOUBLE
32107: LD_INT 1
32109: DEC
32110: ST_TO_ADDR
32111: LD_EXP 109
32115: PUSH
32116: LD_VAR 0 5
32120: ARRAY
32121: PUSH
32122: FOR_TO
32123: IFFALSE 32164
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
32125: LD_EXP 109
32129: PUSH
32130: LD_VAR 0 5
32134: ARRAY
32135: PUSH
32136: LD_VAR 0 4
32140: ARRAY
32141: PUSH
32142: LD_INT 1
32144: ARRAY
32145: PUSH
32146: LD_VAR 0 2
32150: EQUAL
32151: IFFALSE 32162
// KillUnit ( vehicle ) ;
32153: LD_VAR 0 2
32157: PPUSH
32158: CALL_OW 66
32162: GO 32122
32164: POP
32165: POP
// end ;
32166: LD_VAR 0 3
32170: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
32171: LD_EXP 113
32175: NOT
32176: IFFALSE 32211
32178: GO 32180
32180: DISABLE
// begin initMiner := true ;
32181: LD_ADDR_EXP 113
32185: PUSH
32186: LD_INT 1
32188: ST_TO_ADDR
// minersList := [ ] ;
32189: LD_ADDR_EXP 114
32193: PUSH
32194: EMPTY
32195: ST_TO_ADDR
// minerMinesList := [ ] ;
32196: LD_ADDR_EXP 115
32200: PUSH
32201: EMPTY
32202: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
32203: LD_ADDR_EXP 116
32207: PUSH
32208: LD_INT 5
32210: ST_TO_ADDR
// end ;
32211: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
32212: LD_EXP 113
32216: PUSH
32217: LD_INT 34
32219: PUSH
32220: LD_EXP 124
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PPUSH
32229: CALL_OW 69
32233: AND
32234: IFFALSE 32697
32236: GO 32238
32238: DISABLE
32239: LD_INT 0
32241: PPUSH
32242: PPUSH
32243: PPUSH
32244: PPUSH
// begin enable ;
32245: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
32246: LD_ADDR_VAR 0 1
32250: PUSH
32251: LD_INT 34
32253: PUSH
32254: LD_EXP 124
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PPUSH
32263: CALL_OW 69
32267: PUSH
32268: FOR_IN
32269: IFFALSE 32341
// begin if not i in minersList then
32271: LD_VAR 0 1
32275: PUSH
32276: LD_EXP 114
32280: IN
32281: NOT
32282: IFFALSE 32339
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
32284: LD_ADDR_EXP 114
32288: PUSH
32289: LD_EXP 114
32293: PPUSH
32294: LD_EXP 114
32298: PUSH
32299: LD_INT 1
32301: PLUS
32302: PPUSH
32303: LD_VAR 0 1
32307: PPUSH
32308: CALL_OW 1
32312: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
32313: LD_ADDR_EXP 115
32317: PUSH
32318: LD_EXP 115
32322: PPUSH
32323: LD_EXP 115
32327: PUSH
32328: LD_INT 1
32330: PLUS
32331: PPUSH
32332: EMPTY
32333: PPUSH
32334: CALL_OW 1
32338: ST_TO_ADDR
// end end ;
32339: GO 32268
32341: POP
32342: POP
// for i := minerMinesList downto 1 do
32343: LD_ADDR_VAR 0 1
32347: PUSH
32348: DOUBLE
32349: LD_EXP 115
32353: INC
32354: ST_TO_ADDR
32355: LD_INT 1
32357: PUSH
32358: FOR_DOWNTO
32359: IFFALSE 32695
// begin if IsLive ( minersList [ i ] ) then
32361: LD_EXP 114
32365: PUSH
32366: LD_VAR 0 1
32370: ARRAY
32371: PPUSH
32372: CALL_OW 300
32376: IFFALSE 32404
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
32378: LD_EXP 114
32382: PUSH
32383: LD_VAR 0 1
32387: ARRAY
32388: PPUSH
32389: LD_EXP 115
32393: PUSH
32394: LD_VAR 0 1
32398: ARRAY
32399: PPUSH
32400: CALL_OW 505
// if not minerMinesList [ i ] then
32404: LD_EXP 115
32408: PUSH
32409: LD_VAR 0 1
32413: ARRAY
32414: NOT
32415: IFFALSE 32419
// continue ;
32417: GO 32358
// for j := minerMinesList [ i ] downto 1 do
32419: LD_ADDR_VAR 0 2
32423: PUSH
32424: DOUBLE
32425: LD_EXP 115
32429: PUSH
32430: LD_VAR 0 1
32434: ARRAY
32435: INC
32436: ST_TO_ADDR
32437: LD_INT 1
32439: PUSH
32440: FOR_DOWNTO
32441: IFFALSE 32691
// begin side := GetSide ( minersList [ i ] ) ;
32443: LD_ADDR_VAR 0 3
32447: PUSH
32448: LD_EXP 114
32452: PUSH
32453: LD_VAR 0 1
32457: ARRAY
32458: PPUSH
32459: CALL_OW 255
32463: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
32464: LD_ADDR_VAR 0 4
32468: PUSH
32469: LD_EXP 115
32473: PUSH
32474: LD_VAR 0 1
32478: ARRAY
32479: PUSH
32480: LD_VAR 0 2
32484: ARRAY
32485: PUSH
32486: LD_INT 1
32488: ARRAY
32489: PPUSH
32490: LD_EXP 115
32494: PUSH
32495: LD_VAR 0 1
32499: ARRAY
32500: PUSH
32501: LD_VAR 0 2
32505: ARRAY
32506: PUSH
32507: LD_INT 2
32509: ARRAY
32510: PPUSH
32511: CALL_OW 428
32515: ST_TO_ADDR
// if not tmp then
32516: LD_VAR 0 4
32520: NOT
32521: IFFALSE 32525
// continue ;
32523: GO 32440
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
32525: LD_VAR 0 4
32529: PUSH
32530: LD_INT 81
32532: PUSH
32533: LD_VAR 0 3
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PPUSH
32542: CALL_OW 69
32546: IN
32547: PUSH
32548: LD_EXP 115
32552: PUSH
32553: LD_VAR 0 1
32557: ARRAY
32558: PUSH
32559: LD_VAR 0 2
32563: ARRAY
32564: PUSH
32565: LD_INT 1
32567: ARRAY
32568: PPUSH
32569: LD_EXP 115
32573: PUSH
32574: LD_VAR 0 1
32578: ARRAY
32579: PUSH
32580: LD_VAR 0 2
32584: ARRAY
32585: PUSH
32586: LD_INT 2
32588: ARRAY
32589: PPUSH
32590: CALL_OW 458
32594: AND
32595: IFFALSE 32689
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
32597: LD_EXP 115
32601: PUSH
32602: LD_VAR 0 1
32606: ARRAY
32607: PUSH
32608: LD_VAR 0 2
32612: ARRAY
32613: PUSH
32614: LD_INT 1
32616: ARRAY
32617: PPUSH
32618: LD_EXP 115
32622: PUSH
32623: LD_VAR 0 1
32627: ARRAY
32628: PUSH
32629: LD_VAR 0 2
32633: ARRAY
32634: PUSH
32635: LD_INT 2
32637: ARRAY
32638: PPUSH
32639: LD_VAR 0 3
32643: PPUSH
32644: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
32648: LD_ADDR_EXP 115
32652: PUSH
32653: LD_EXP 115
32657: PPUSH
32658: LD_VAR 0 1
32662: PPUSH
32663: LD_EXP 115
32667: PUSH
32668: LD_VAR 0 1
32672: ARRAY
32673: PPUSH
32674: LD_VAR 0 2
32678: PPUSH
32679: CALL_OW 3
32683: PPUSH
32684: CALL_OW 1
32688: ST_TO_ADDR
// end ; end ;
32689: GO 32440
32691: POP
32692: POP
// end ;
32693: GO 32358
32695: POP
32696: POP
// end ;
32697: PPOPN 4
32699: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
32700: LD_INT 0
32702: PPUSH
32703: PPUSH
// result := false ;
32704: LD_ADDR_VAR 0 4
32708: PUSH
32709: LD_INT 0
32711: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
32712: LD_VAR 0 1
32716: PPUSH
32717: CALL_OW 264
32721: PUSH
32722: LD_EXP 124
32726: EQUAL
32727: NOT
32728: IFFALSE 32732
// exit ;
32730: GO 32972
// index := GetElementIndex ( minersList , unit ) ;
32732: LD_ADDR_VAR 0 5
32736: PUSH
32737: LD_EXP 114
32741: PPUSH
32742: LD_VAR 0 1
32746: PPUSH
32747: CALL 39060 0 2
32751: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
32752: LD_EXP 115
32756: PUSH
32757: LD_VAR 0 5
32761: ARRAY
32762: PUSH
32763: LD_EXP 116
32767: GREATEREQUAL
32768: IFFALSE 32772
// exit ;
32770: GO 32972
// ComMoveXY ( unit , x , y ) ;
32772: LD_VAR 0 1
32776: PPUSH
32777: LD_VAR 0 2
32781: PPUSH
32782: LD_VAR 0 3
32786: PPUSH
32787: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32791: LD_INT 35
32793: PPUSH
32794: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
32798: LD_VAR 0 1
32802: PPUSH
32803: LD_VAR 0 2
32807: PPUSH
32808: LD_VAR 0 3
32812: PPUSH
32813: CALL 69124 0 3
32817: NOT
32818: PUSH
32819: LD_VAR 0 1
32823: PPUSH
32824: CALL_OW 314
32828: AND
32829: IFFALSE 32833
// exit ;
32831: GO 32972
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
32833: LD_VAR 0 2
32837: PPUSH
32838: LD_VAR 0 3
32842: PPUSH
32843: CALL_OW 428
32847: PUSH
32848: LD_VAR 0 1
32852: EQUAL
32853: PUSH
32854: LD_VAR 0 1
32858: PPUSH
32859: CALL_OW 314
32863: NOT
32864: AND
32865: IFFALSE 32791
// PlaySoundXY ( x , y , PlantMine ) ;
32867: LD_VAR 0 2
32871: PPUSH
32872: LD_VAR 0 3
32876: PPUSH
32877: LD_STRING PlantMine
32879: PPUSH
32880: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
32884: LD_VAR 0 2
32888: PPUSH
32889: LD_VAR 0 3
32893: PPUSH
32894: LD_VAR 0 1
32898: PPUSH
32899: CALL_OW 255
32903: PPUSH
32904: LD_INT 0
32906: PPUSH
32907: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
32911: LD_ADDR_EXP 115
32915: PUSH
32916: LD_EXP 115
32920: PPUSH
32921: LD_VAR 0 5
32925: PUSH
32926: LD_EXP 115
32930: PUSH
32931: LD_VAR 0 5
32935: ARRAY
32936: PUSH
32937: LD_INT 1
32939: PLUS
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PPUSH
32945: LD_VAR 0 2
32949: PUSH
32950: LD_VAR 0 3
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PPUSH
32959: CALL 39275 0 3
32963: ST_TO_ADDR
// result := true ;
32964: LD_ADDR_VAR 0 4
32968: PUSH
32969: LD_INT 1
32971: ST_TO_ADDR
// end ;
32972: LD_VAR 0 4
32976: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
32977: LD_INT 0
32979: PPUSH
32980: PPUSH
32981: PPUSH
// if not unit in minersList then
32982: LD_VAR 0 1
32986: PUSH
32987: LD_EXP 114
32991: IN
32992: NOT
32993: IFFALSE 32997
// exit ;
32995: GO 33389
// index := GetElementIndex ( minersList , unit ) ;
32997: LD_ADDR_VAR 0 6
33001: PUSH
33002: LD_EXP 114
33006: PPUSH
33007: LD_VAR 0 1
33011: PPUSH
33012: CALL 39060 0 2
33016: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
33017: LD_ADDR_VAR 0 5
33021: PUSH
33022: DOUBLE
33023: LD_EXP 115
33027: PUSH
33028: LD_VAR 0 6
33032: ARRAY
33033: INC
33034: ST_TO_ADDR
33035: LD_INT 1
33037: PUSH
33038: FOR_DOWNTO
33039: IFFALSE 33200
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
33041: LD_EXP 115
33045: PUSH
33046: LD_VAR 0 6
33050: ARRAY
33051: PUSH
33052: LD_VAR 0 5
33056: ARRAY
33057: PUSH
33058: LD_INT 1
33060: ARRAY
33061: PUSH
33062: LD_VAR 0 2
33066: EQUAL
33067: PUSH
33068: LD_EXP 115
33072: PUSH
33073: LD_VAR 0 6
33077: ARRAY
33078: PUSH
33079: LD_VAR 0 5
33083: ARRAY
33084: PUSH
33085: LD_INT 2
33087: ARRAY
33088: PUSH
33089: LD_VAR 0 3
33093: EQUAL
33094: AND
33095: IFFALSE 33198
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
33097: LD_EXP 115
33101: PUSH
33102: LD_VAR 0 6
33106: ARRAY
33107: PUSH
33108: LD_VAR 0 5
33112: ARRAY
33113: PUSH
33114: LD_INT 1
33116: ARRAY
33117: PPUSH
33118: LD_EXP 115
33122: PUSH
33123: LD_VAR 0 6
33127: ARRAY
33128: PUSH
33129: LD_VAR 0 5
33133: ARRAY
33134: PUSH
33135: LD_INT 2
33137: ARRAY
33138: PPUSH
33139: LD_VAR 0 1
33143: PPUSH
33144: CALL_OW 255
33148: PPUSH
33149: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
33153: LD_ADDR_EXP 115
33157: PUSH
33158: LD_EXP 115
33162: PPUSH
33163: LD_VAR 0 6
33167: PPUSH
33168: LD_EXP 115
33172: PUSH
33173: LD_VAR 0 6
33177: ARRAY
33178: PPUSH
33179: LD_VAR 0 5
33183: PPUSH
33184: CALL_OW 3
33188: PPUSH
33189: CALL_OW 1
33193: ST_TO_ADDR
// exit ;
33194: POP
33195: POP
33196: GO 33389
// end ; end ;
33198: GO 33038
33200: POP
33201: POP
// for i := minerMinesList [ index ] downto 1 do
33202: LD_ADDR_VAR 0 5
33206: PUSH
33207: DOUBLE
33208: LD_EXP 115
33212: PUSH
33213: LD_VAR 0 6
33217: ARRAY
33218: INC
33219: ST_TO_ADDR
33220: LD_INT 1
33222: PUSH
33223: FOR_DOWNTO
33224: IFFALSE 33387
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
33226: LD_EXP 115
33230: PUSH
33231: LD_VAR 0 6
33235: ARRAY
33236: PUSH
33237: LD_VAR 0 5
33241: ARRAY
33242: PUSH
33243: LD_INT 1
33245: ARRAY
33246: PPUSH
33247: LD_EXP 115
33251: PUSH
33252: LD_VAR 0 6
33256: ARRAY
33257: PUSH
33258: LD_VAR 0 5
33262: ARRAY
33263: PUSH
33264: LD_INT 2
33266: ARRAY
33267: PPUSH
33268: LD_VAR 0 2
33272: PPUSH
33273: LD_VAR 0 3
33277: PPUSH
33278: CALL_OW 298
33282: PUSH
33283: LD_INT 6
33285: LESS
33286: IFFALSE 33385
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
33288: LD_EXP 115
33292: PUSH
33293: LD_VAR 0 6
33297: ARRAY
33298: PUSH
33299: LD_VAR 0 5
33303: ARRAY
33304: PUSH
33305: LD_INT 1
33307: ARRAY
33308: PPUSH
33309: LD_EXP 115
33313: PUSH
33314: LD_VAR 0 6
33318: ARRAY
33319: PUSH
33320: LD_VAR 0 5
33324: ARRAY
33325: PUSH
33326: LD_INT 2
33328: ARRAY
33329: PPUSH
33330: LD_VAR 0 1
33334: PPUSH
33335: CALL_OW 255
33339: PPUSH
33340: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
33344: LD_ADDR_EXP 115
33348: PUSH
33349: LD_EXP 115
33353: PPUSH
33354: LD_VAR 0 6
33358: PPUSH
33359: LD_EXP 115
33363: PUSH
33364: LD_VAR 0 6
33368: ARRAY
33369: PPUSH
33370: LD_VAR 0 5
33374: PPUSH
33375: CALL_OW 3
33379: PPUSH
33380: CALL_OW 1
33384: ST_TO_ADDR
// end ; end ;
33385: GO 33223
33387: POP
33388: POP
// end ;
33389: LD_VAR 0 4
33393: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
33394: LD_INT 0
33396: PPUSH
33397: PPUSH
33398: PPUSH
33399: PPUSH
33400: PPUSH
33401: PPUSH
33402: PPUSH
33403: PPUSH
33404: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
33405: LD_VAR 0 1
33409: PPUSH
33410: CALL_OW 264
33414: PUSH
33415: LD_EXP 124
33419: EQUAL
33420: NOT
33421: PUSH
33422: LD_VAR 0 1
33426: PUSH
33427: LD_EXP 114
33431: IN
33432: NOT
33433: OR
33434: IFFALSE 33438
// exit ;
33436: GO 33760
// index := GetElementIndex ( minersList , unit ) ;
33438: LD_ADDR_VAR 0 6
33442: PUSH
33443: LD_EXP 114
33447: PPUSH
33448: LD_VAR 0 1
33452: PPUSH
33453: CALL 39060 0 2
33457: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
33458: LD_ADDR_VAR 0 8
33462: PUSH
33463: LD_EXP 116
33467: PUSH
33468: LD_EXP 115
33472: PUSH
33473: LD_VAR 0 6
33477: ARRAY
33478: MINUS
33479: ST_TO_ADDR
// if not minesFreeAmount then
33480: LD_VAR 0 8
33484: NOT
33485: IFFALSE 33489
// exit ;
33487: GO 33760
// tmp := [ ] ;
33489: LD_ADDR_VAR 0 7
33493: PUSH
33494: EMPTY
33495: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
33496: LD_ADDR_VAR 0 5
33500: PUSH
33501: DOUBLE
33502: LD_INT 1
33504: DEC
33505: ST_TO_ADDR
33506: LD_VAR 0 8
33510: PUSH
33511: FOR_TO
33512: IFFALSE 33707
// begin _d := rand ( 0 , 5 ) ;
33514: LD_ADDR_VAR 0 11
33518: PUSH
33519: LD_INT 0
33521: PPUSH
33522: LD_INT 5
33524: PPUSH
33525: CALL_OW 12
33529: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
33530: LD_ADDR_VAR 0 12
33534: PUSH
33535: LD_INT 2
33537: PPUSH
33538: LD_INT 6
33540: PPUSH
33541: CALL_OW 12
33545: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
33546: LD_ADDR_VAR 0 9
33550: PUSH
33551: LD_VAR 0 2
33555: PPUSH
33556: LD_VAR 0 11
33560: PPUSH
33561: LD_VAR 0 12
33565: PPUSH
33566: CALL_OW 272
33570: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
33571: LD_ADDR_VAR 0 10
33575: PUSH
33576: LD_VAR 0 3
33580: PPUSH
33581: LD_VAR 0 11
33585: PPUSH
33586: LD_VAR 0 12
33590: PPUSH
33591: CALL_OW 273
33595: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
33596: LD_VAR 0 9
33600: PPUSH
33601: LD_VAR 0 10
33605: PPUSH
33606: CALL_OW 488
33610: PUSH
33611: LD_VAR 0 9
33615: PUSH
33616: LD_VAR 0 10
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_VAR 0 7
33629: IN
33630: NOT
33631: AND
33632: PUSH
33633: LD_VAR 0 9
33637: PPUSH
33638: LD_VAR 0 10
33642: PPUSH
33643: CALL_OW 458
33647: NOT
33648: AND
33649: IFFALSE 33691
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
33651: LD_ADDR_VAR 0 7
33655: PUSH
33656: LD_VAR 0 7
33660: PPUSH
33661: LD_VAR 0 7
33665: PUSH
33666: LD_INT 1
33668: PLUS
33669: PPUSH
33670: LD_VAR 0 9
33674: PUSH
33675: LD_VAR 0 10
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PPUSH
33684: CALL_OW 1
33688: ST_TO_ADDR
33689: GO 33705
// i := i - 1 ;
33691: LD_ADDR_VAR 0 5
33695: PUSH
33696: LD_VAR 0 5
33700: PUSH
33701: LD_INT 1
33703: MINUS
33704: ST_TO_ADDR
// end ;
33705: GO 33511
33707: POP
33708: POP
// for i in tmp do
33709: LD_ADDR_VAR 0 5
33713: PUSH
33714: LD_VAR 0 7
33718: PUSH
33719: FOR_IN
33720: IFFALSE 33758
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
33722: LD_VAR 0 1
33726: PPUSH
33727: LD_VAR 0 5
33731: PUSH
33732: LD_INT 1
33734: ARRAY
33735: PPUSH
33736: LD_VAR 0 5
33740: PUSH
33741: LD_INT 2
33743: ARRAY
33744: PPUSH
33745: CALL 32700 0 3
33749: NOT
33750: IFFALSE 33756
// exit ;
33752: POP
33753: POP
33754: GO 33760
33756: GO 33719
33758: POP
33759: POP
// end ;
33760: LD_VAR 0 4
33764: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
33765: LD_INT 0
33767: PPUSH
33768: PPUSH
33769: PPUSH
33770: PPUSH
33771: PPUSH
33772: PPUSH
33773: PPUSH
// if not GetClass ( unit ) = class_sniper then
33774: LD_VAR 0 1
33778: PPUSH
33779: CALL_OW 257
33783: PUSH
33784: LD_INT 5
33786: EQUAL
33787: NOT
33788: IFFALSE 33792
// exit ;
33790: GO 34180
// dist := 8 ;
33792: LD_ADDR_VAR 0 5
33796: PUSH
33797: LD_INT 8
33799: ST_TO_ADDR
// viewRange := 12 ;
33800: LD_ADDR_VAR 0 7
33804: PUSH
33805: LD_INT 12
33807: ST_TO_ADDR
// side := GetSide ( unit ) ;
33808: LD_ADDR_VAR 0 6
33812: PUSH
33813: LD_VAR 0 1
33817: PPUSH
33818: CALL_OW 255
33822: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
33823: LD_INT 61
33825: PPUSH
33826: LD_VAR 0 6
33830: PPUSH
33831: CALL_OW 321
33835: PUSH
33836: LD_INT 2
33838: EQUAL
33839: IFFALSE 33849
// viewRange := 16 ;
33841: LD_ADDR_VAR 0 7
33845: PUSH
33846: LD_INT 16
33848: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
33849: LD_VAR 0 1
33853: PPUSH
33854: LD_VAR 0 2
33858: PPUSH
33859: LD_VAR 0 3
33863: PPUSH
33864: CALL_OW 297
33868: PUSH
33869: LD_VAR 0 5
33873: GREATER
33874: IFFALSE 33953
// begin ComMoveXY ( unit , x , y ) ;
33876: LD_VAR 0 1
33880: PPUSH
33881: LD_VAR 0 2
33885: PPUSH
33886: LD_VAR 0 3
33890: PPUSH
33891: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33895: LD_INT 35
33897: PPUSH
33898: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
33902: LD_VAR 0 1
33906: PPUSH
33907: LD_VAR 0 2
33911: PPUSH
33912: LD_VAR 0 3
33916: PPUSH
33917: CALL 69124 0 3
33921: NOT
33922: IFFALSE 33926
// exit ;
33924: GO 34180
// until GetDistUnitXY ( unit , x , y ) < dist ;
33926: LD_VAR 0 1
33930: PPUSH
33931: LD_VAR 0 2
33935: PPUSH
33936: LD_VAR 0 3
33940: PPUSH
33941: CALL_OW 297
33945: PUSH
33946: LD_VAR 0 5
33950: LESS
33951: IFFALSE 33895
// end ; ComTurnXY ( unit , x , y ) ;
33953: LD_VAR 0 1
33957: PPUSH
33958: LD_VAR 0 2
33962: PPUSH
33963: LD_VAR 0 3
33967: PPUSH
33968: CALL_OW 118
// wait ( 5 ) ;
33972: LD_INT 5
33974: PPUSH
33975: CALL_OW 67
// _d := GetDir ( unit ) ;
33979: LD_ADDR_VAR 0 10
33983: PUSH
33984: LD_VAR 0 1
33988: PPUSH
33989: CALL_OW 254
33993: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
33994: LD_ADDR_VAR 0 8
33998: PUSH
33999: LD_VAR 0 1
34003: PPUSH
34004: CALL_OW 250
34008: PPUSH
34009: LD_VAR 0 10
34013: PPUSH
34014: LD_VAR 0 5
34018: PPUSH
34019: CALL_OW 272
34023: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
34024: LD_ADDR_VAR 0 9
34028: PUSH
34029: LD_VAR 0 1
34033: PPUSH
34034: CALL_OW 251
34038: PPUSH
34039: LD_VAR 0 10
34043: PPUSH
34044: LD_VAR 0 5
34048: PPUSH
34049: CALL_OW 273
34053: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34054: LD_VAR 0 8
34058: PPUSH
34059: LD_VAR 0 9
34063: PPUSH
34064: CALL_OW 488
34068: NOT
34069: IFFALSE 34073
// exit ;
34071: GO 34180
// ComAnimCustom ( unit , 1 ) ;
34073: LD_VAR 0 1
34077: PPUSH
34078: LD_INT 1
34080: PPUSH
34081: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
34085: LD_VAR 0 8
34089: PPUSH
34090: LD_VAR 0 9
34094: PPUSH
34095: LD_VAR 0 6
34099: PPUSH
34100: LD_VAR 0 7
34104: PPUSH
34105: CALL_OW 330
// repeat wait ( 1 ) ;
34109: LD_INT 1
34111: PPUSH
34112: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
34116: LD_VAR 0 1
34120: PPUSH
34121: CALL_OW 316
34125: PUSH
34126: LD_VAR 0 1
34130: PPUSH
34131: CALL_OW 314
34135: OR
34136: PUSH
34137: LD_VAR 0 1
34141: PPUSH
34142: CALL_OW 302
34146: NOT
34147: OR
34148: PUSH
34149: LD_VAR 0 1
34153: PPUSH
34154: CALL_OW 301
34158: OR
34159: IFFALSE 34109
// RemoveSeeing ( _x , _y , side ) ;
34161: LD_VAR 0 8
34165: PPUSH
34166: LD_VAR 0 9
34170: PPUSH
34171: LD_VAR 0 6
34175: PPUSH
34176: CALL_OW 331
// end ; end_of_file
34180: LD_VAR 0 4
34184: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
34185: LD_INT 0
34187: PPUSH
// ar_miner := 81 ;
34188: LD_ADDR_EXP 124
34192: PUSH
34193: LD_INT 81
34195: ST_TO_ADDR
// ar_crane := 88 ;
34196: LD_ADDR_EXP 123
34200: PUSH
34201: LD_INT 88
34203: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
34204: LD_ADDR_EXP 118
34208: PUSH
34209: LD_INT 89
34211: ST_TO_ADDR
// us_hack := 99 ;
34212: LD_ADDR_EXP 119
34216: PUSH
34217: LD_INT 99
34219: ST_TO_ADDR
// us_artillery := 97 ;
34220: LD_ADDR_EXP 120
34224: PUSH
34225: LD_INT 97
34227: ST_TO_ADDR
// ar_bio_bomb := 91 ;
34228: LD_ADDR_EXP 121
34232: PUSH
34233: LD_INT 91
34235: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
34236: LD_ADDR_EXP 122
34240: PUSH
34241: LD_INT 92
34243: ST_TO_ADDR
// ru_radar := 98 ;
34244: LD_ADDR_EXP 117
34248: PUSH
34249: LD_INT 98
34251: ST_TO_ADDR
// tech_Artillery := 80 ;
34252: LD_ADDR_EXP 125
34256: PUSH
34257: LD_INT 80
34259: ST_TO_ADDR
// tech_RadMat := 81 ;
34260: LD_ADDR_EXP 126
34264: PUSH
34265: LD_INT 81
34267: ST_TO_ADDR
// tech_BasicTools := 82 ;
34268: LD_ADDR_EXP 127
34272: PUSH
34273: LD_INT 82
34275: ST_TO_ADDR
// tech_Cargo := 83 ;
34276: LD_ADDR_EXP 128
34280: PUSH
34281: LD_INT 83
34283: ST_TO_ADDR
// tech_Track := 84 ;
34284: LD_ADDR_EXP 129
34288: PUSH
34289: LD_INT 84
34291: ST_TO_ADDR
// tech_Crane := 85 ;
34292: LD_ADDR_EXP 130
34296: PUSH
34297: LD_INT 85
34299: ST_TO_ADDR
// tech_Bulldozer := 86 ;
34300: LD_ADDR_EXP 131
34304: PUSH
34305: LD_INT 86
34307: ST_TO_ADDR
// tech_Hovercraft := 87 ;
34308: LD_ADDR_EXP 132
34312: PUSH
34313: LD_INT 87
34315: ST_TO_ADDR
// end ;
34316: LD_VAR 0 1
34320: RET
// every 1 do
34321: GO 34323
34323: DISABLE
// InitGlobalVariables ; end_of_file
34324: CALL 34185 0 0
34328: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
34329: LD_INT 0
34331: PPUSH
34332: PPUSH
// if exist_mode then
34333: LD_VAR 0 2
34337: IFFALSE 34362
// unit := CreateCharacter ( prefix & ident ) else
34339: LD_ADDR_VAR 0 5
34343: PUSH
34344: LD_VAR 0 3
34348: PUSH
34349: LD_VAR 0 1
34353: STR
34354: PPUSH
34355: CALL_OW 34
34359: ST_TO_ADDR
34360: GO 34377
// unit := NewCharacter ( ident ) ;
34362: LD_ADDR_VAR 0 5
34366: PUSH
34367: LD_VAR 0 1
34371: PPUSH
34372: CALL_OW 25
34376: ST_TO_ADDR
// result := unit ;
34377: LD_ADDR_VAR 0 4
34381: PUSH
34382: LD_VAR 0 5
34386: ST_TO_ADDR
// end ;
34387: LD_VAR 0 4
34391: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
34392: LD_INT 0
34394: PPUSH
34395: PPUSH
// if not side or not nation then
34396: LD_VAR 0 1
34400: NOT
34401: PUSH
34402: LD_VAR 0 2
34406: NOT
34407: OR
34408: IFFALSE 34412
// exit ;
34410: GO 35176
// case nation of nation_american :
34412: LD_VAR 0 2
34416: PUSH
34417: LD_INT 1
34419: DOUBLE
34420: EQUAL
34421: IFTRUE 34425
34423: GO 34639
34425: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
34426: LD_ADDR_VAR 0 4
34430: PUSH
34431: LD_INT 35
34433: PUSH
34434: LD_INT 45
34436: PUSH
34437: LD_INT 46
34439: PUSH
34440: LD_INT 47
34442: PUSH
34443: LD_INT 82
34445: PUSH
34446: LD_INT 83
34448: PUSH
34449: LD_INT 84
34451: PUSH
34452: LD_INT 85
34454: PUSH
34455: LD_INT 86
34457: PUSH
34458: LD_INT 1
34460: PUSH
34461: LD_INT 2
34463: PUSH
34464: LD_INT 6
34466: PUSH
34467: LD_INT 15
34469: PUSH
34470: LD_INT 16
34472: PUSH
34473: LD_INT 7
34475: PUSH
34476: LD_INT 12
34478: PUSH
34479: LD_INT 13
34481: PUSH
34482: LD_INT 10
34484: PUSH
34485: LD_INT 14
34487: PUSH
34488: LD_INT 20
34490: PUSH
34491: LD_INT 21
34493: PUSH
34494: LD_INT 22
34496: PUSH
34497: LD_INT 25
34499: PUSH
34500: LD_INT 32
34502: PUSH
34503: LD_INT 27
34505: PUSH
34506: LD_INT 36
34508: PUSH
34509: LD_INT 69
34511: PUSH
34512: LD_INT 39
34514: PUSH
34515: LD_INT 34
34517: PUSH
34518: LD_INT 40
34520: PUSH
34521: LD_INT 48
34523: PUSH
34524: LD_INT 49
34526: PUSH
34527: LD_INT 50
34529: PUSH
34530: LD_INT 51
34532: PUSH
34533: LD_INT 52
34535: PUSH
34536: LD_INT 53
34538: PUSH
34539: LD_INT 54
34541: PUSH
34542: LD_INT 55
34544: PUSH
34545: LD_INT 56
34547: PUSH
34548: LD_INT 57
34550: PUSH
34551: LD_INT 58
34553: PUSH
34554: LD_INT 59
34556: PUSH
34557: LD_INT 60
34559: PUSH
34560: LD_INT 61
34562: PUSH
34563: LD_INT 62
34565: PUSH
34566: LD_INT 80
34568: PUSH
34569: LD_INT 82
34571: PUSH
34572: LD_INT 83
34574: PUSH
34575: LD_INT 84
34577: PUSH
34578: LD_INT 85
34580: PUSH
34581: LD_INT 86
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: ST_TO_ADDR
34637: GO 35100
34639: LD_INT 2
34641: DOUBLE
34642: EQUAL
34643: IFTRUE 34647
34645: GO 34869
34647: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
34648: LD_ADDR_VAR 0 4
34652: PUSH
34653: LD_INT 35
34655: PUSH
34656: LD_INT 45
34658: PUSH
34659: LD_INT 46
34661: PUSH
34662: LD_INT 47
34664: PUSH
34665: LD_INT 82
34667: PUSH
34668: LD_INT 83
34670: PUSH
34671: LD_INT 84
34673: PUSH
34674: LD_INT 85
34676: PUSH
34677: LD_INT 87
34679: PUSH
34680: LD_INT 70
34682: PUSH
34683: LD_INT 1
34685: PUSH
34686: LD_INT 11
34688: PUSH
34689: LD_INT 3
34691: PUSH
34692: LD_INT 4
34694: PUSH
34695: LD_INT 5
34697: PUSH
34698: LD_INT 6
34700: PUSH
34701: LD_INT 15
34703: PUSH
34704: LD_INT 18
34706: PUSH
34707: LD_INT 7
34709: PUSH
34710: LD_INT 17
34712: PUSH
34713: LD_INT 8
34715: PUSH
34716: LD_INT 20
34718: PUSH
34719: LD_INT 21
34721: PUSH
34722: LD_INT 22
34724: PUSH
34725: LD_INT 72
34727: PUSH
34728: LD_INT 26
34730: PUSH
34731: LD_INT 69
34733: PUSH
34734: LD_INT 39
34736: PUSH
34737: LD_INT 40
34739: PUSH
34740: LD_INT 41
34742: PUSH
34743: LD_INT 42
34745: PUSH
34746: LD_INT 43
34748: PUSH
34749: LD_INT 48
34751: PUSH
34752: LD_INT 49
34754: PUSH
34755: LD_INT 50
34757: PUSH
34758: LD_INT 51
34760: PUSH
34761: LD_INT 52
34763: PUSH
34764: LD_INT 53
34766: PUSH
34767: LD_INT 54
34769: PUSH
34770: LD_INT 55
34772: PUSH
34773: LD_INT 56
34775: PUSH
34776: LD_INT 60
34778: PUSH
34779: LD_INT 61
34781: PUSH
34782: LD_INT 62
34784: PUSH
34785: LD_INT 66
34787: PUSH
34788: LD_INT 67
34790: PUSH
34791: LD_INT 68
34793: PUSH
34794: LD_INT 81
34796: PUSH
34797: LD_INT 82
34799: PUSH
34800: LD_INT 83
34802: PUSH
34803: LD_INT 84
34805: PUSH
34806: LD_INT 85
34808: PUSH
34809: LD_INT 87
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: ST_TO_ADDR
34867: GO 35100
34869: LD_INT 3
34871: DOUBLE
34872: EQUAL
34873: IFTRUE 34877
34875: GO 35099
34877: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
34878: LD_ADDR_VAR 0 4
34882: PUSH
34883: LD_INT 46
34885: PUSH
34886: LD_INT 47
34888: PUSH
34889: LD_INT 1
34891: PUSH
34892: LD_INT 2
34894: PUSH
34895: LD_INT 82
34897: PUSH
34898: LD_INT 83
34900: PUSH
34901: LD_INT 84
34903: PUSH
34904: LD_INT 85
34906: PUSH
34907: LD_INT 86
34909: PUSH
34910: LD_INT 11
34912: PUSH
34913: LD_INT 9
34915: PUSH
34916: LD_INT 20
34918: PUSH
34919: LD_INT 19
34921: PUSH
34922: LD_INT 21
34924: PUSH
34925: LD_INT 24
34927: PUSH
34928: LD_INT 22
34930: PUSH
34931: LD_INT 25
34933: PUSH
34934: LD_INT 28
34936: PUSH
34937: LD_INT 29
34939: PUSH
34940: LD_INT 30
34942: PUSH
34943: LD_INT 31
34945: PUSH
34946: LD_INT 37
34948: PUSH
34949: LD_INT 38
34951: PUSH
34952: LD_INT 32
34954: PUSH
34955: LD_INT 27
34957: PUSH
34958: LD_INT 33
34960: PUSH
34961: LD_INT 69
34963: PUSH
34964: LD_INT 39
34966: PUSH
34967: LD_INT 34
34969: PUSH
34970: LD_INT 40
34972: PUSH
34973: LD_INT 71
34975: PUSH
34976: LD_INT 23
34978: PUSH
34979: LD_INT 44
34981: PUSH
34982: LD_INT 48
34984: PUSH
34985: LD_INT 49
34987: PUSH
34988: LD_INT 50
34990: PUSH
34991: LD_INT 51
34993: PUSH
34994: LD_INT 52
34996: PUSH
34997: LD_INT 53
34999: PUSH
35000: LD_INT 54
35002: PUSH
35003: LD_INT 55
35005: PUSH
35006: LD_INT 56
35008: PUSH
35009: LD_INT 57
35011: PUSH
35012: LD_INT 58
35014: PUSH
35015: LD_INT 59
35017: PUSH
35018: LD_INT 63
35020: PUSH
35021: LD_INT 64
35023: PUSH
35024: LD_INT 65
35026: PUSH
35027: LD_INT 82
35029: PUSH
35030: LD_INT 83
35032: PUSH
35033: LD_INT 84
35035: PUSH
35036: LD_INT 85
35038: PUSH
35039: LD_INT 86
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: ST_TO_ADDR
35097: GO 35100
35099: POP
// if state > - 1 and state < 3 then
35100: LD_VAR 0 3
35104: PUSH
35105: LD_INT 1
35107: NEG
35108: GREATER
35109: PUSH
35110: LD_VAR 0 3
35114: PUSH
35115: LD_INT 3
35117: LESS
35118: AND
35119: IFFALSE 35176
// for i in result do
35121: LD_ADDR_VAR 0 5
35125: PUSH
35126: LD_VAR 0 4
35130: PUSH
35131: FOR_IN
35132: IFFALSE 35174
// if GetTech ( i , side ) <> state then
35134: LD_VAR 0 5
35138: PPUSH
35139: LD_VAR 0 1
35143: PPUSH
35144: CALL_OW 321
35148: PUSH
35149: LD_VAR 0 3
35153: NONEQUAL
35154: IFFALSE 35172
// result := result diff i ;
35156: LD_ADDR_VAR 0 4
35160: PUSH
35161: LD_VAR 0 4
35165: PUSH
35166: LD_VAR 0 5
35170: DIFF
35171: ST_TO_ADDR
35172: GO 35131
35174: POP
35175: POP
// end ;
35176: LD_VAR 0 4
35180: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35181: LD_INT 0
35183: PPUSH
35184: PPUSH
35185: PPUSH
// result := true ;
35186: LD_ADDR_VAR 0 3
35190: PUSH
35191: LD_INT 1
35193: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35194: LD_ADDR_VAR 0 5
35198: PUSH
35199: LD_VAR 0 2
35203: PPUSH
35204: CALL_OW 480
35208: ST_TO_ADDR
// if not tmp then
35209: LD_VAR 0 5
35213: NOT
35214: IFFALSE 35218
// exit ;
35216: GO 35267
// for i in tmp do
35218: LD_ADDR_VAR 0 4
35222: PUSH
35223: LD_VAR 0 5
35227: PUSH
35228: FOR_IN
35229: IFFALSE 35265
// if GetTech ( i , side ) <> state_researched then
35231: LD_VAR 0 4
35235: PPUSH
35236: LD_VAR 0 1
35240: PPUSH
35241: CALL_OW 321
35245: PUSH
35246: LD_INT 2
35248: NONEQUAL
35249: IFFALSE 35263
// begin result := false ;
35251: LD_ADDR_VAR 0 3
35255: PUSH
35256: LD_INT 0
35258: ST_TO_ADDR
// exit ;
35259: POP
35260: POP
35261: GO 35267
// end ;
35263: GO 35228
35265: POP
35266: POP
// end ;
35267: LD_VAR 0 3
35271: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
35272: LD_INT 0
35274: PPUSH
35275: PPUSH
35276: PPUSH
35277: PPUSH
35278: PPUSH
35279: PPUSH
35280: PPUSH
35281: PPUSH
35282: PPUSH
35283: PPUSH
35284: PPUSH
35285: PPUSH
35286: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
35287: LD_VAR 0 1
35291: NOT
35292: PUSH
35293: LD_VAR 0 1
35297: PPUSH
35298: CALL_OW 257
35302: PUSH
35303: LD_INT 9
35305: NONEQUAL
35306: OR
35307: IFFALSE 35311
// exit ;
35309: GO 35884
// side := GetSide ( unit ) ;
35311: LD_ADDR_VAR 0 9
35315: PUSH
35316: LD_VAR 0 1
35320: PPUSH
35321: CALL_OW 255
35325: ST_TO_ADDR
// tech_space := tech_spacanom ;
35326: LD_ADDR_VAR 0 12
35330: PUSH
35331: LD_INT 29
35333: ST_TO_ADDR
// tech_time := tech_taurad ;
35334: LD_ADDR_VAR 0 13
35338: PUSH
35339: LD_INT 28
35341: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
35342: LD_ADDR_VAR 0 11
35346: PUSH
35347: LD_VAR 0 1
35351: PPUSH
35352: CALL_OW 310
35356: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
35357: LD_VAR 0 11
35361: PPUSH
35362: CALL_OW 247
35366: PUSH
35367: LD_INT 2
35369: EQUAL
35370: IFFALSE 35374
// exit ;
35372: GO 35884
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35374: LD_ADDR_VAR 0 8
35378: PUSH
35379: LD_INT 81
35381: PUSH
35382: LD_VAR 0 9
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 3
35393: PUSH
35394: LD_INT 21
35396: PUSH
35397: LD_INT 3
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PPUSH
35412: CALL_OW 69
35416: ST_TO_ADDR
// if not tmp then
35417: LD_VAR 0 8
35421: NOT
35422: IFFALSE 35426
// exit ;
35424: GO 35884
// if in_unit then
35426: LD_VAR 0 11
35430: IFFALSE 35454
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
35432: LD_ADDR_VAR 0 10
35436: PUSH
35437: LD_VAR 0 8
35441: PPUSH
35442: LD_VAR 0 11
35446: PPUSH
35447: CALL_OW 74
35451: ST_TO_ADDR
35452: GO 35474
// enemy := NearestUnitToUnit ( tmp , unit ) ;
35454: LD_ADDR_VAR 0 10
35458: PUSH
35459: LD_VAR 0 8
35463: PPUSH
35464: LD_VAR 0 1
35468: PPUSH
35469: CALL_OW 74
35473: ST_TO_ADDR
// if not enemy then
35474: LD_VAR 0 10
35478: NOT
35479: IFFALSE 35483
// exit ;
35481: GO 35884
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
35483: LD_VAR 0 11
35487: PUSH
35488: LD_VAR 0 11
35492: PPUSH
35493: LD_VAR 0 10
35497: PPUSH
35498: CALL_OW 296
35502: PUSH
35503: LD_INT 13
35505: GREATER
35506: AND
35507: PUSH
35508: LD_VAR 0 1
35512: PPUSH
35513: LD_VAR 0 10
35517: PPUSH
35518: CALL_OW 296
35522: PUSH
35523: LD_INT 12
35525: GREATER
35526: OR
35527: IFFALSE 35531
// exit ;
35529: GO 35884
// missile := [ 1 ] ;
35531: LD_ADDR_VAR 0 14
35535: PUSH
35536: LD_INT 1
35538: PUSH
35539: EMPTY
35540: LIST
35541: ST_TO_ADDR
// if Researched ( side , tech_space ) then
35542: LD_VAR 0 9
35546: PPUSH
35547: LD_VAR 0 12
35551: PPUSH
35552: CALL_OW 325
35556: IFFALSE 35585
// missile := Insert ( missile , missile + 1 , 2 ) ;
35558: LD_ADDR_VAR 0 14
35562: PUSH
35563: LD_VAR 0 14
35567: PPUSH
35568: LD_VAR 0 14
35572: PUSH
35573: LD_INT 1
35575: PLUS
35576: PPUSH
35577: LD_INT 2
35579: PPUSH
35580: CALL_OW 2
35584: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
35585: LD_VAR 0 9
35589: PPUSH
35590: LD_VAR 0 13
35594: PPUSH
35595: CALL_OW 325
35599: PUSH
35600: LD_VAR 0 10
35604: PPUSH
35605: CALL_OW 255
35609: PPUSH
35610: LD_VAR 0 13
35614: PPUSH
35615: CALL_OW 325
35619: NOT
35620: AND
35621: IFFALSE 35650
// missile := Insert ( missile , missile + 1 , 3 ) ;
35623: LD_ADDR_VAR 0 14
35627: PUSH
35628: LD_VAR 0 14
35632: PPUSH
35633: LD_VAR 0 14
35637: PUSH
35638: LD_INT 1
35640: PLUS
35641: PPUSH
35642: LD_INT 3
35644: PPUSH
35645: CALL_OW 2
35649: ST_TO_ADDR
// if missile < 2 then
35650: LD_VAR 0 14
35654: PUSH
35655: LD_INT 2
35657: LESS
35658: IFFALSE 35662
// exit ;
35660: GO 35884
// x := GetX ( enemy ) ;
35662: LD_ADDR_VAR 0 4
35666: PUSH
35667: LD_VAR 0 10
35671: PPUSH
35672: CALL_OW 250
35676: ST_TO_ADDR
// y := GetY ( enemy ) ;
35677: LD_ADDR_VAR 0 5
35681: PUSH
35682: LD_VAR 0 10
35686: PPUSH
35687: CALL_OW 251
35691: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35692: LD_ADDR_VAR 0 6
35696: PUSH
35697: LD_VAR 0 4
35701: PUSH
35702: LD_INT 1
35704: NEG
35705: PPUSH
35706: LD_INT 1
35708: PPUSH
35709: CALL_OW 12
35713: PLUS
35714: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35715: LD_ADDR_VAR 0 7
35719: PUSH
35720: LD_VAR 0 5
35724: PUSH
35725: LD_INT 1
35727: NEG
35728: PPUSH
35729: LD_INT 1
35731: PPUSH
35732: CALL_OW 12
35736: PLUS
35737: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35738: LD_VAR 0 6
35742: PPUSH
35743: LD_VAR 0 7
35747: PPUSH
35748: CALL_OW 488
35752: NOT
35753: IFFALSE 35775
// begin _x := x ;
35755: LD_ADDR_VAR 0 6
35759: PUSH
35760: LD_VAR 0 4
35764: ST_TO_ADDR
// _y := y ;
35765: LD_ADDR_VAR 0 7
35769: PUSH
35770: LD_VAR 0 5
35774: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35775: LD_ADDR_VAR 0 3
35779: PUSH
35780: LD_INT 1
35782: PPUSH
35783: LD_VAR 0 14
35787: PPUSH
35788: CALL_OW 12
35792: ST_TO_ADDR
// case i of 1 :
35793: LD_VAR 0 3
35797: PUSH
35798: LD_INT 1
35800: DOUBLE
35801: EQUAL
35802: IFTRUE 35806
35804: GO 35823
35806: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35807: LD_VAR 0 1
35811: PPUSH
35812: LD_VAR 0 10
35816: PPUSH
35817: CALL_OW 115
35821: GO 35884
35823: LD_INT 2
35825: DOUBLE
35826: EQUAL
35827: IFTRUE 35831
35829: GO 35853
35831: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35832: LD_VAR 0 1
35836: PPUSH
35837: LD_VAR 0 6
35841: PPUSH
35842: LD_VAR 0 7
35846: PPUSH
35847: CALL_OW 153
35851: GO 35884
35853: LD_INT 3
35855: DOUBLE
35856: EQUAL
35857: IFTRUE 35861
35859: GO 35883
35861: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35862: LD_VAR 0 1
35866: PPUSH
35867: LD_VAR 0 6
35871: PPUSH
35872: LD_VAR 0 7
35876: PPUSH
35877: CALL_OW 154
35881: GO 35884
35883: POP
// end ;
35884: LD_VAR 0 2
35888: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35889: LD_INT 0
35891: PPUSH
35892: PPUSH
35893: PPUSH
35894: PPUSH
35895: PPUSH
35896: PPUSH
// if not unit or not building then
35897: LD_VAR 0 1
35901: NOT
35902: PUSH
35903: LD_VAR 0 2
35907: NOT
35908: OR
35909: IFFALSE 35913
// exit ;
35911: GO 36071
// x := GetX ( building ) ;
35913: LD_ADDR_VAR 0 5
35917: PUSH
35918: LD_VAR 0 2
35922: PPUSH
35923: CALL_OW 250
35927: ST_TO_ADDR
// y := GetY ( building ) ;
35928: LD_ADDR_VAR 0 6
35932: PUSH
35933: LD_VAR 0 2
35937: PPUSH
35938: CALL_OW 251
35942: ST_TO_ADDR
// for i = 0 to 5 do
35943: LD_ADDR_VAR 0 4
35947: PUSH
35948: DOUBLE
35949: LD_INT 0
35951: DEC
35952: ST_TO_ADDR
35953: LD_INT 5
35955: PUSH
35956: FOR_TO
35957: IFFALSE 36069
// begin _x := ShiftX ( x , i , 3 ) ;
35959: LD_ADDR_VAR 0 7
35963: PUSH
35964: LD_VAR 0 5
35968: PPUSH
35969: LD_VAR 0 4
35973: PPUSH
35974: LD_INT 3
35976: PPUSH
35977: CALL_OW 272
35981: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35982: LD_ADDR_VAR 0 8
35986: PUSH
35987: LD_VAR 0 6
35991: PPUSH
35992: LD_VAR 0 4
35996: PPUSH
35997: LD_INT 3
35999: PPUSH
36000: CALL_OW 273
36004: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36005: LD_VAR 0 7
36009: PPUSH
36010: LD_VAR 0 8
36014: PPUSH
36015: CALL_OW 488
36019: NOT
36020: IFFALSE 36024
// continue ;
36022: GO 35956
// if HexInfo ( _x , _y ) = 0 then
36024: LD_VAR 0 7
36028: PPUSH
36029: LD_VAR 0 8
36033: PPUSH
36034: CALL_OW 428
36038: PUSH
36039: LD_INT 0
36041: EQUAL
36042: IFFALSE 36067
// begin ComMoveXY ( unit , _x , _y ) ;
36044: LD_VAR 0 1
36048: PPUSH
36049: LD_VAR 0 7
36053: PPUSH
36054: LD_VAR 0 8
36058: PPUSH
36059: CALL_OW 111
// exit ;
36063: POP
36064: POP
36065: GO 36071
// end ; end ;
36067: GO 35956
36069: POP
36070: POP
// end ;
36071: LD_VAR 0 3
36075: RET
// export function ScanBase ( side , base_area ) ; begin
36076: LD_INT 0
36078: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
36079: LD_ADDR_VAR 0 3
36083: PUSH
36084: LD_VAR 0 2
36088: PPUSH
36089: LD_INT 81
36091: PUSH
36092: LD_VAR 0 1
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PPUSH
36101: CALL_OW 70
36105: ST_TO_ADDR
// end ;
36106: LD_VAR 0 3
36110: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
36111: LD_INT 0
36113: PPUSH
36114: PPUSH
36115: PPUSH
36116: PPUSH
// result := false ;
36117: LD_ADDR_VAR 0 2
36121: PUSH
36122: LD_INT 0
36124: ST_TO_ADDR
// side := GetSide ( unit ) ;
36125: LD_ADDR_VAR 0 3
36129: PUSH
36130: LD_VAR 0 1
36134: PPUSH
36135: CALL_OW 255
36139: ST_TO_ADDR
// nat := GetNation ( unit ) ;
36140: LD_ADDR_VAR 0 4
36144: PUSH
36145: LD_VAR 0 1
36149: PPUSH
36150: CALL_OW 248
36154: ST_TO_ADDR
// case nat of 1 :
36155: LD_VAR 0 4
36159: PUSH
36160: LD_INT 1
36162: DOUBLE
36163: EQUAL
36164: IFTRUE 36168
36166: GO 36179
36168: POP
// tech := tech_lassight ; 2 :
36169: LD_ADDR_VAR 0 5
36173: PUSH
36174: LD_INT 12
36176: ST_TO_ADDR
36177: GO 36218
36179: LD_INT 2
36181: DOUBLE
36182: EQUAL
36183: IFTRUE 36187
36185: GO 36198
36187: POP
// tech := tech_mortar ; 3 :
36188: LD_ADDR_VAR 0 5
36192: PUSH
36193: LD_INT 41
36195: ST_TO_ADDR
36196: GO 36218
36198: LD_INT 3
36200: DOUBLE
36201: EQUAL
36202: IFTRUE 36206
36204: GO 36217
36206: POP
// tech := tech_bazooka ; end ;
36207: LD_ADDR_VAR 0 5
36211: PUSH
36212: LD_INT 44
36214: ST_TO_ADDR
36215: GO 36218
36217: POP
// if Researched ( side , tech ) then
36218: LD_VAR 0 3
36222: PPUSH
36223: LD_VAR 0 5
36227: PPUSH
36228: CALL_OW 325
36232: IFFALSE 36259
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
36234: LD_ADDR_VAR 0 2
36238: PUSH
36239: LD_INT 5
36241: PUSH
36242: LD_INT 8
36244: PUSH
36245: LD_INT 9
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: LIST
36252: PUSH
36253: LD_VAR 0 4
36257: ARRAY
36258: ST_TO_ADDR
// end ;
36259: LD_VAR 0 2
36263: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
36264: LD_INT 0
36266: PPUSH
36267: PPUSH
36268: PPUSH
// if not mines then
36269: LD_VAR 0 2
36273: NOT
36274: IFFALSE 36278
// exit ;
36276: GO 36422
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36278: LD_ADDR_VAR 0 5
36282: PUSH
36283: LD_INT 81
36285: PUSH
36286: LD_VAR 0 1
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 3
36297: PUSH
36298: LD_INT 21
36300: PUSH
36301: LD_INT 3
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PPUSH
36316: CALL_OW 69
36320: ST_TO_ADDR
// for i in mines do
36321: LD_ADDR_VAR 0 4
36325: PUSH
36326: LD_VAR 0 2
36330: PUSH
36331: FOR_IN
36332: IFFALSE 36420
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
36334: LD_VAR 0 4
36338: PUSH
36339: LD_INT 1
36341: ARRAY
36342: PPUSH
36343: LD_VAR 0 4
36347: PUSH
36348: LD_INT 2
36350: ARRAY
36351: PPUSH
36352: CALL_OW 458
36356: NOT
36357: IFFALSE 36361
// continue ;
36359: GO 36331
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
36361: LD_VAR 0 4
36365: PUSH
36366: LD_INT 1
36368: ARRAY
36369: PPUSH
36370: LD_VAR 0 4
36374: PUSH
36375: LD_INT 2
36377: ARRAY
36378: PPUSH
36379: CALL_OW 428
36383: PUSH
36384: LD_VAR 0 5
36388: IN
36389: IFFALSE 36418
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
36391: LD_VAR 0 4
36395: PUSH
36396: LD_INT 1
36398: ARRAY
36399: PPUSH
36400: LD_VAR 0 4
36404: PUSH
36405: LD_INT 2
36407: ARRAY
36408: PPUSH
36409: LD_VAR 0 1
36413: PPUSH
36414: CALL_OW 456
// end ;
36418: GO 36331
36420: POP
36421: POP
// end ;
36422: LD_VAR 0 3
36426: RET
// export function Count ( array ) ; var i ; begin
36427: LD_INT 0
36429: PPUSH
36430: PPUSH
// result := 0 ;
36431: LD_ADDR_VAR 0 2
36435: PUSH
36436: LD_INT 0
36438: ST_TO_ADDR
// for i in array do
36439: LD_ADDR_VAR 0 3
36443: PUSH
36444: LD_VAR 0 1
36448: PUSH
36449: FOR_IN
36450: IFFALSE 36474
// if i then
36452: LD_VAR 0 3
36456: IFFALSE 36472
// result := result + 1 ;
36458: LD_ADDR_VAR 0 2
36462: PUSH
36463: LD_VAR 0 2
36467: PUSH
36468: LD_INT 1
36470: PLUS
36471: ST_TO_ADDR
36472: GO 36449
36474: POP
36475: POP
// end ;
36476: LD_VAR 0 2
36480: RET
// export function IsEmpty ( building ) ; begin
36481: LD_INT 0
36483: PPUSH
// if not building then
36484: LD_VAR 0 1
36488: NOT
36489: IFFALSE 36493
// exit ;
36491: GO 36536
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
36493: LD_ADDR_VAR 0 2
36497: PUSH
36498: LD_VAR 0 1
36502: PUSH
36503: LD_INT 22
36505: PUSH
36506: LD_VAR 0 1
36510: PPUSH
36511: CALL_OW 255
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 58
36522: PUSH
36523: EMPTY
36524: LIST
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PPUSH
36530: CALL_OW 69
36534: IN
36535: ST_TO_ADDR
// end ;
36536: LD_VAR 0 2
36540: RET
// export function IsNotFull ( building ) ; begin
36541: LD_INT 0
36543: PPUSH
// if not building then
36544: LD_VAR 0 1
36548: NOT
36549: IFFALSE 36553
// exit ;
36551: GO 36572
// result := UnitsInside ( building ) < 6 ;
36553: LD_ADDR_VAR 0 2
36557: PUSH
36558: LD_VAR 0 1
36562: PPUSH
36563: CALL_OW 313
36567: PUSH
36568: LD_INT 6
36570: LESS
36571: ST_TO_ADDR
// end ;
36572: LD_VAR 0 2
36576: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
36577: LD_INT 0
36579: PPUSH
36580: PPUSH
36581: PPUSH
36582: PPUSH
// tmp := [ ] ;
36583: LD_ADDR_VAR 0 3
36587: PUSH
36588: EMPTY
36589: ST_TO_ADDR
// list := [ ] ;
36590: LD_ADDR_VAR 0 5
36594: PUSH
36595: EMPTY
36596: ST_TO_ADDR
// for i = 16 to 25 do
36597: LD_ADDR_VAR 0 4
36601: PUSH
36602: DOUBLE
36603: LD_INT 16
36605: DEC
36606: ST_TO_ADDR
36607: LD_INT 25
36609: PUSH
36610: FOR_TO
36611: IFFALSE 36684
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
36613: LD_ADDR_VAR 0 3
36617: PUSH
36618: LD_VAR 0 3
36622: PUSH
36623: LD_INT 22
36625: PUSH
36626: LD_VAR 0 1
36630: PPUSH
36631: CALL_OW 255
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 91
36642: PUSH
36643: LD_VAR 0 1
36647: PUSH
36648: LD_INT 6
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 30
36658: PUSH
36659: LD_VAR 0 4
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: LIST
36672: PUSH
36673: EMPTY
36674: LIST
36675: PPUSH
36676: CALL_OW 69
36680: ADD
36681: ST_TO_ADDR
36682: GO 36610
36684: POP
36685: POP
// for i = 1 to tmp do
36686: LD_ADDR_VAR 0 4
36690: PUSH
36691: DOUBLE
36692: LD_INT 1
36694: DEC
36695: ST_TO_ADDR
36696: LD_VAR 0 3
36700: PUSH
36701: FOR_TO
36702: IFFALSE 36790
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
36704: LD_ADDR_VAR 0 5
36708: PUSH
36709: LD_VAR 0 5
36713: PUSH
36714: LD_VAR 0 3
36718: PUSH
36719: LD_VAR 0 4
36723: ARRAY
36724: PPUSH
36725: CALL_OW 266
36729: PUSH
36730: LD_VAR 0 3
36734: PUSH
36735: LD_VAR 0 4
36739: ARRAY
36740: PPUSH
36741: CALL_OW 250
36745: PUSH
36746: LD_VAR 0 3
36750: PUSH
36751: LD_VAR 0 4
36755: ARRAY
36756: PPUSH
36757: CALL_OW 251
36761: PUSH
36762: LD_VAR 0 3
36766: PUSH
36767: LD_VAR 0 4
36771: ARRAY
36772: PPUSH
36773: CALL_OW 254
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: PUSH
36784: EMPTY
36785: LIST
36786: ADD
36787: ST_TO_ADDR
36788: GO 36701
36790: POP
36791: POP
// result := list ;
36792: LD_ADDR_VAR 0 2
36796: PUSH
36797: LD_VAR 0 5
36801: ST_TO_ADDR
// end ;
36802: LD_VAR 0 2
36806: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36807: LD_INT 0
36809: PPUSH
36810: PPUSH
36811: PPUSH
36812: PPUSH
36813: PPUSH
36814: PPUSH
36815: PPUSH
// if not factory then
36816: LD_VAR 0 1
36820: NOT
36821: IFFALSE 36825
// exit ;
36823: GO 37418
// if control = control_apeman then
36825: LD_VAR 0 4
36829: PUSH
36830: LD_INT 5
36832: EQUAL
36833: IFFALSE 36942
// begin tmp := UnitsInside ( factory ) ;
36835: LD_ADDR_VAR 0 8
36839: PUSH
36840: LD_VAR 0 1
36844: PPUSH
36845: CALL_OW 313
36849: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36850: LD_VAR 0 8
36854: PPUSH
36855: LD_INT 25
36857: PUSH
36858: LD_INT 12
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PPUSH
36865: CALL_OW 72
36869: NOT
36870: IFFALSE 36880
// control := control_manual ;
36872: LD_ADDR_VAR 0 4
36876: PUSH
36877: LD_INT 1
36879: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36880: LD_ADDR_VAR 0 8
36884: PUSH
36885: LD_VAR 0 1
36889: PPUSH
36890: CALL 36577 0 1
36894: ST_TO_ADDR
// if tmp then
36895: LD_VAR 0 8
36899: IFFALSE 36942
// begin for i in tmp do
36901: LD_ADDR_VAR 0 7
36905: PUSH
36906: LD_VAR 0 8
36910: PUSH
36911: FOR_IN
36912: IFFALSE 36940
// if i [ 1 ] = b_ext_radio then
36914: LD_VAR 0 7
36918: PUSH
36919: LD_INT 1
36921: ARRAY
36922: PUSH
36923: LD_INT 22
36925: EQUAL
36926: IFFALSE 36938
// begin control := control_remote ;
36928: LD_ADDR_VAR 0 4
36932: PUSH
36933: LD_INT 2
36935: ST_TO_ADDR
// break ;
36936: GO 36940
// end ;
36938: GO 36911
36940: POP
36941: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36942: LD_VAR 0 1
36946: PPUSH
36947: LD_VAR 0 2
36951: PPUSH
36952: LD_VAR 0 3
36956: PPUSH
36957: LD_VAR 0 4
36961: PPUSH
36962: LD_VAR 0 5
36966: PPUSH
36967: CALL_OW 448
36971: IFFALSE 37006
// begin result := [ chassis , engine , control , weapon ] ;
36973: LD_ADDR_VAR 0 6
36977: PUSH
36978: LD_VAR 0 2
36982: PUSH
36983: LD_VAR 0 3
36987: PUSH
36988: LD_VAR 0 4
36992: PUSH
36993: LD_VAR 0 5
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: ST_TO_ADDR
// exit ;
37004: GO 37418
// end ; _chassis := AvailableChassisList ( factory ) ;
37006: LD_ADDR_VAR 0 9
37010: PUSH
37011: LD_VAR 0 1
37015: PPUSH
37016: CALL_OW 475
37020: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
37021: LD_ADDR_VAR 0 11
37025: PUSH
37026: LD_VAR 0 1
37030: PPUSH
37031: CALL_OW 476
37035: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
37036: LD_ADDR_VAR 0 12
37040: PUSH
37041: LD_VAR 0 1
37045: PPUSH
37046: CALL_OW 477
37050: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
37051: LD_ADDR_VAR 0 10
37055: PUSH
37056: LD_VAR 0 1
37060: PPUSH
37061: CALL_OW 478
37065: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
37066: LD_VAR 0 9
37070: NOT
37071: PUSH
37072: LD_VAR 0 11
37076: NOT
37077: OR
37078: PUSH
37079: LD_VAR 0 12
37083: NOT
37084: OR
37085: PUSH
37086: LD_VAR 0 10
37090: NOT
37091: OR
37092: IFFALSE 37127
// begin result := [ chassis , engine , control , weapon ] ;
37094: LD_ADDR_VAR 0 6
37098: PUSH
37099: LD_VAR 0 2
37103: PUSH
37104: LD_VAR 0 3
37108: PUSH
37109: LD_VAR 0 4
37113: PUSH
37114: LD_VAR 0 5
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: ST_TO_ADDR
// exit ;
37125: GO 37418
// end ; if not chassis in _chassis then
37127: LD_VAR 0 2
37131: PUSH
37132: LD_VAR 0 9
37136: IN
37137: NOT
37138: IFFALSE 37164
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
37140: LD_ADDR_VAR 0 2
37144: PUSH
37145: LD_VAR 0 9
37149: PUSH
37150: LD_INT 1
37152: PPUSH
37153: LD_VAR 0 9
37157: PPUSH
37158: CALL_OW 12
37162: ARRAY
37163: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
37164: LD_VAR 0 2
37168: PPUSH
37169: LD_VAR 0 3
37173: PPUSH
37174: CALL 37423 0 2
37178: NOT
37179: IFFALSE 37238
// repeat engine := _engine [ 1 ] ;
37181: LD_ADDR_VAR 0 3
37185: PUSH
37186: LD_VAR 0 11
37190: PUSH
37191: LD_INT 1
37193: ARRAY
37194: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
37195: LD_ADDR_VAR 0 11
37199: PUSH
37200: LD_VAR 0 11
37204: PPUSH
37205: LD_INT 1
37207: PPUSH
37208: CALL_OW 3
37212: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
37213: LD_VAR 0 2
37217: PPUSH
37218: LD_VAR 0 3
37222: PPUSH
37223: CALL 37423 0 2
37227: PUSH
37228: LD_VAR 0 11
37232: PUSH
37233: EMPTY
37234: EQUAL
37235: OR
37236: IFFALSE 37181
// if not control in _control then
37238: LD_VAR 0 4
37242: PUSH
37243: LD_VAR 0 12
37247: IN
37248: NOT
37249: IFFALSE 37275
// control := _control [ rand ( 1 , _control ) ] ;
37251: LD_ADDR_VAR 0 4
37255: PUSH
37256: LD_VAR 0 12
37260: PUSH
37261: LD_INT 1
37263: PPUSH
37264: LD_VAR 0 12
37268: PPUSH
37269: CALL_OW 12
37273: ARRAY
37274: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
37275: LD_VAR 0 2
37279: PPUSH
37280: LD_VAR 0 5
37284: PPUSH
37285: CALL 37643 0 2
37289: NOT
37290: IFFALSE 37349
// repeat weapon := _weapon [ 1 ] ;
37292: LD_ADDR_VAR 0 5
37296: PUSH
37297: LD_VAR 0 10
37301: PUSH
37302: LD_INT 1
37304: ARRAY
37305: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
37306: LD_ADDR_VAR 0 10
37310: PUSH
37311: LD_VAR 0 10
37315: PPUSH
37316: LD_INT 1
37318: PPUSH
37319: CALL_OW 3
37323: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
37324: LD_VAR 0 2
37328: PPUSH
37329: LD_VAR 0 5
37333: PPUSH
37334: CALL 37643 0 2
37338: PUSH
37339: LD_VAR 0 10
37343: PUSH
37344: EMPTY
37345: EQUAL
37346: OR
37347: IFFALSE 37292
// result := [ ] ;
37349: LD_ADDR_VAR 0 6
37353: PUSH
37354: EMPTY
37355: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37356: LD_VAR 0 1
37360: PPUSH
37361: LD_VAR 0 2
37365: PPUSH
37366: LD_VAR 0 3
37370: PPUSH
37371: LD_VAR 0 4
37375: PPUSH
37376: LD_VAR 0 5
37380: PPUSH
37381: CALL_OW 448
37385: IFFALSE 37418
// result := [ chassis , engine , control , weapon ] ;
37387: LD_ADDR_VAR 0 6
37391: PUSH
37392: LD_VAR 0 2
37396: PUSH
37397: LD_VAR 0 3
37401: PUSH
37402: LD_VAR 0 4
37406: PUSH
37407: LD_VAR 0 5
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: LIST
37416: LIST
37417: ST_TO_ADDR
// end ;
37418: LD_VAR 0 6
37422: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
37423: LD_INT 0
37425: PPUSH
// if not chassis or not engine then
37426: LD_VAR 0 1
37430: NOT
37431: PUSH
37432: LD_VAR 0 2
37436: NOT
37437: OR
37438: IFFALSE 37442
// exit ;
37440: GO 37638
// case engine of engine_solar :
37442: LD_VAR 0 2
37446: PUSH
37447: LD_INT 2
37449: DOUBLE
37450: EQUAL
37451: IFTRUE 37455
37453: GO 37493
37455: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
37456: LD_ADDR_VAR 0 3
37460: PUSH
37461: LD_INT 11
37463: PUSH
37464: LD_INT 12
37466: PUSH
37467: LD_INT 13
37469: PUSH
37470: LD_INT 14
37472: PUSH
37473: LD_INT 1
37475: PUSH
37476: LD_INT 2
37478: PUSH
37479: LD_INT 3
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: ST_TO_ADDR
37491: GO 37622
37493: LD_INT 1
37495: DOUBLE
37496: EQUAL
37497: IFTRUE 37501
37499: GO 37563
37501: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
37502: LD_ADDR_VAR 0 3
37506: PUSH
37507: LD_INT 11
37509: PUSH
37510: LD_INT 12
37512: PUSH
37513: LD_INT 13
37515: PUSH
37516: LD_INT 14
37518: PUSH
37519: LD_INT 1
37521: PUSH
37522: LD_INT 2
37524: PUSH
37525: LD_INT 3
37527: PUSH
37528: LD_INT 4
37530: PUSH
37531: LD_INT 5
37533: PUSH
37534: LD_INT 21
37536: PUSH
37537: LD_INT 23
37539: PUSH
37540: LD_INT 22
37542: PUSH
37543: LD_INT 24
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: ST_TO_ADDR
37561: GO 37622
37563: LD_INT 3
37565: DOUBLE
37566: EQUAL
37567: IFTRUE 37571
37569: GO 37621
37571: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37572: LD_ADDR_VAR 0 3
37576: PUSH
37577: LD_INT 13
37579: PUSH
37580: LD_INT 14
37582: PUSH
37583: LD_INT 2
37585: PUSH
37586: LD_INT 3
37588: PUSH
37589: LD_INT 4
37591: PUSH
37592: LD_INT 5
37594: PUSH
37595: LD_INT 21
37597: PUSH
37598: LD_INT 22
37600: PUSH
37601: LD_INT 23
37603: PUSH
37604: LD_INT 24
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: ST_TO_ADDR
37619: GO 37622
37621: POP
// result := ( chassis in result ) ;
37622: LD_ADDR_VAR 0 3
37626: PUSH
37627: LD_VAR 0 1
37631: PUSH
37632: LD_VAR 0 3
37636: IN
37637: ST_TO_ADDR
// end ;
37638: LD_VAR 0 3
37642: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
37643: LD_INT 0
37645: PPUSH
// if not chassis or not weapon then
37646: LD_VAR 0 1
37650: NOT
37651: PUSH
37652: LD_VAR 0 2
37656: NOT
37657: OR
37658: IFFALSE 37662
// exit ;
37660: GO 38688
// case weapon of us_machine_gun :
37662: LD_VAR 0 2
37666: PUSH
37667: LD_INT 2
37669: DOUBLE
37670: EQUAL
37671: IFTRUE 37675
37673: GO 37705
37675: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
37676: LD_ADDR_VAR 0 3
37680: PUSH
37681: LD_INT 1
37683: PUSH
37684: LD_INT 2
37686: PUSH
37687: LD_INT 3
37689: PUSH
37690: LD_INT 4
37692: PUSH
37693: LD_INT 5
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: ST_TO_ADDR
37703: GO 38672
37705: LD_INT 3
37707: DOUBLE
37708: EQUAL
37709: IFTRUE 37713
37711: GO 37743
37713: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
37714: LD_ADDR_VAR 0 3
37718: PUSH
37719: LD_INT 1
37721: PUSH
37722: LD_INT 2
37724: PUSH
37725: LD_INT 3
37727: PUSH
37728: LD_INT 4
37730: PUSH
37731: LD_INT 5
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: ST_TO_ADDR
37741: GO 38672
37743: LD_INT 11
37745: DOUBLE
37746: EQUAL
37747: IFTRUE 37751
37749: GO 37781
37751: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37752: LD_ADDR_VAR 0 3
37756: PUSH
37757: LD_INT 1
37759: PUSH
37760: LD_INT 2
37762: PUSH
37763: LD_INT 3
37765: PUSH
37766: LD_INT 4
37768: PUSH
37769: LD_INT 5
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: ST_TO_ADDR
37779: GO 38672
37781: LD_INT 4
37783: DOUBLE
37784: EQUAL
37785: IFTRUE 37789
37787: GO 37815
37789: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37790: LD_ADDR_VAR 0 3
37794: PUSH
37795: LD_INT 2
37797: PUSH
37798: LD_INT 3
37800: PUSH
37801: LD_INT 4
37803: PUSH
37804: LD_INT 5
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: ST_TO_ADDR
37813: GO 38672
37815: LD_INT 5
37817: DOUBLE
37818: EQUAL
37819: IFTRUE 37823
37821: GO 37849
37823: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37824: LD_ADDR_VAR 0 3
37828: PUSH
37829: LD_INT 2
37831: PUSH
37832: LD_INT 3
37834: PUSH
37835: LD_INT 4
37837: PUSH
37838: LD_INT 5
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: ST_TO_ADDR
37847: GO 38672
37849: LD_INT 9
37851: DOUBLE
37852: EQUAL
37853: IFTRUE 37857
37855: GO 37883
37857: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37858: LD_ADDR_VAR 0 3
37862: PUSH
37863: LD_INT 2
37865: PUSH
37866: LD_INT 3
37868: PUSH
37869: LD_INT 4
37871: PUSH
37872: LD_INT 5
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: ST_TO_ADDR
37881: GO 38672
37883: LD_INT 7
37885: DOUBLE
37886: EQUAL
37887: IFTRUE 37891
37889: GO 37917
37891: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37892: LD_ADDR_VAR 0 3
37896: PUSH
37897: LD_INT 2
37899: PUSH
37900: LD_INT 3
37902: PUSH
37903: LD_INT 4
37905: PUSH
37906: LD_INT 5
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: ST_TO_ADDR
37915: GO 38672
37917: LD_INT 12
37919: DOUBLE
37920: EQUAL
37921: IFTRUE 37925
37923: GO 37951
37925: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37926: LD_ADDR_VAR 0 3
37930: PUSH
37931: LD_INT 2
37933: PUSH
37934: LD_INT 3
37936: PUSH
37937: LD_INT 4
37939: PUSH
37940: LD_INT 5
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: ST_TO_ADDR
37949: GO 38672
37951: LD_INT 13
37953: DOUBLE
37954: EQUAL
37955: IFTRUE 37959
37957: GO 37985
37959: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37960: LD_ADDR_VAR 0 3
37964: PUSH
37965: LD_INT 2
37967: PUSH
37968: LD_INT 3
37970: PUSH
37971: LD_INT 4
37973: PUSH
37974: LD_INT 5
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: ST_TO_ADDR
37983: GO 38672
37985: LD_INT 14
37987: DOUBLE
37988: EQUAL
37989: IFTRUE 37993
37991: GO 38011
37993: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37994: LD_ADDR_VAR 0 3
37998: PUSH
37999: LD_INT 4
38001: PUSH
38002: LD_INT 5
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: ST_TO_ADDR
38009: GO 38672
38011: LD_INT 6
38013: DOUBLE
38014: EQUAL
38015: IFTRUE 38019
38017: GO 38037
38019: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
38020: LD_ADDR_VAR 0 3
38024: PUSH
38025: LD_INT 4
38027: PUSH
38028: LD_INT 5
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: ST_TO_ADDR
38035: GO 38672
38037: LD_INT 10
38039: DOUBLE
38040: EQUAL
38041: IFTRUE 38045
38043: GO 38063
38045: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
38046: LD_ADDR_VAR 0 3
38050: PUSH
38051: LD_INT 4
38053: PUSH
38054: LD_INT 5
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: ST_TO_ADDR
38061: GO 38672
38063: LD_INT 22
38065: DOUBLE
38066: EQUAL
38067: IFTRUE 38071
38069: GO 38097
38071: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
38072: LD_ADDR_VAR 0 3
38076: PUSH
38077: LD_INT 11
38079: PUSH
38080: LD_INT 12
38082: PUSH
38083: LD_INT 13
38085: PUSH
38086: LD_INT 14
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: ST_TO_ADDR
38095: GO 38672
38097: LD_INT 23
38099: DOUBLE
38100: EQUAL
38101: IFTRUE 38105
38103: GO 38131
38105: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
38106: LD_ADDR_VAR 0 3
38110: PUSH
38111: LD_INT 11
38113: PUSH
38114: LD_INT 12
38116: PUSH
38117: LD_INT 13
38119: PUSH
38120: LD_INT 14
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: ST_TO_ADDR
38129: GO 38672
38131: LD_INT 24
38133: DOUBLE
38134: EQUAL
38135: IFTRUE 38139
38137: GO 38165
38139: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
38140: LD_ADDR_VAR 0 3
38144: PUSH
38145: LD_INT 11
38147: PUSH
38148: LD_INT 12
38150: PUSH
38151: LD_INT 13
38153: PUSH
38154: LD_INT 14
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: ST_TO_ADDR
38163: GO 38672
38165: LD_INT 30
38167: DOUBLE
38168: EQUAL
38169: IFTRUE 38173
38171: GO 38199
38173: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
38174: LD_ADDR_VAR 0 3
38178: PUSH
38179: LD_INT 11
38181: PUSH
38182: LD_INT 12
38184: PUSH
38185: LD_INT 13
38187: PUSH
38188: LD_INT 14
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: ST_TO_ADDR
38197: GO 38672
38199: LD_INT 25
38201: DOUBLE
38202: EQUAL
38203: IFTRUE 38207
38205: GO 38225
38207: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
38208: LD_ADDR_VAR 0 3
38212: PUSH
38213: LD_INT 13
38215: PUSH
38216: LD_INT 14
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: ST_TO_ADDR
38223: GO 38672
38225: LD_INT 27
38227: DOUBLE
38228: EQUAL
38229: IFTRUE 38233
38231: GO 38251
38233: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
38234: LD_ADDR_VAR 0 3
38238: PUSH
38239: LD_INT 13
38241: PUSH
38242: LD_INT 14
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: ST_TO_ADDR
38249: GO 38672
38251: LD_INT 28
38253: DOUBLE
38254: EQUAL
38255: IFTRUE 38259
38257: GO 38277
38259: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
38260: LD_ADDR_VAR 0 3
38264: PUSH
38265: LD_INT 13
38267: PUSH
38268: LD_INT 14
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: ST_TO_ADDR
38275: GO 38672
38277: LD_INT 29
38279: DOUBLE
38280: EQUAL
38281: IFTRUE 38285
38283: GO 38303
38285: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
38286: LD_ADDR_VAR 0 3
38290: PUSH
38291: LD_INT 13
38293: PUSH
38294: LD_INT 14
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: ST_TO_ADDR
38301: GO 38672
38303: LD_INT 31
38305: DOUBLE
38306: EQUAL
38307: IFTRUE 38311
38309: GO 38329
38311: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
38312: LD_ADDR_VAR 0 3
38316: PUSH
38317: LD_INT 13
38319: PUSH
38320: LD_INT 14
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: ST_TO_ADDR
38327: GO 38672
38329: LD_INT 26
38331: DOUBLE
38332: EQUAL
38333: IFTRUE 38337
38335: GO 38355
38337: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
38338: LD_ADDR_VAR 0 3
38342: PUSH
38343: LD_INT 13
38345: PUSH
38346: LD_INT 14
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: ST_TO_ADDR
38353: GO 38672
38355: LD_INT 42
38357: DOUBLE
38358: EQUAL
38359: IFTRUE 38363
38361: GO 38389
38363: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
38364: LD_ADDR_VAR 0 3
38368: PUSH
38369: LD_INT 21
38371: PUSH
38372: LD_INT 22
38374: PUSH
38375: LD_INT 23
38377: PUSH
38378: LD_INT 24
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: ST_TO_ADDR
38387: GO 38672
38389: LD_INT 43
38391: DOUBLE
38392: EQUAL
38393: IFTRUE 38397
38395: GO 38423
38397: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
38398: LD_ADDR_VAR 0 3
38402: PUSH
38403: LD_INT 21
38405: PUSH
38406: LD_INT 22
38408: PUSH
38409: LD_INT 23
38411: PUSH
38412: LD_INT 24
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: ST_TO_ADDR
38421: GO 38672
38423: LD_INT 44
38425: DOUBLE
38426: EQUAL
38427: IFTRUE 38431
38429: GO 38457
38431: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
38432: LD_ADDR_VAR 0 3
38436: PUSH
38437: LD_INT 21
38439: PUSH
38440: LD_INT 22
38442: PUSH
38443: LD_INT 23
38445: PUSH
38446: LD_INT 24
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: ST_TO_ADDR
38455: GO 38672
38457: LD_INT 45
38459: DOUBLE
38460: EQUAL
38461: IFTRUE 38465
38463: GO 38491
38465: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
38466: LD_ADDR_VAR 0 3
38470: PUSH
38471: LD_INT 21
38473: PUSH
38474: LD_INT 22
38476: PUSH
38477: LD_INT 23
38479: PUSH
38480: LD_INT 24
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: ST_TO_ADDR
38489: GO 38672
38491: LD_INT 49
38493: DOUBLE
38494: EQUAL
38495: IFTRUE 38499
38497: GO 38525
38499: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
38500: LD_ADDR_VAR 0 3
38504: PUSH
38505: LD_INT 21
38507: PUSH
38508: LD_INT 22
38510: PUSH
38511: LD_INT 23
38513: PUSH
38514: LD_INT 24
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: ST_TO_ADDR
38523: GO 38672
38525: LD_INT 51
38527: DOUBLE
38528: EQUAL
38529: IFTRUE 38533
38531: GO 38559
38533: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
38534: LD_ADDR_VAR 0 3
38538: PUSH
38539: LD_INT 21
38541: PUSH
38542: LD_INT 22
38544: PUSH
38545: LD_INT 23
38547: PUSH
38548: LD_INT 24
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: ST_TO_ADDR
38557: GO 38672
38559: LD_INT 52
38561: DOUBLE
38562: EQUAL
38563: IFTRUE 38567
38565: GO 38593
38567: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
38568: LD_ADDR_VAR 0 3
38572: PUSH
38573: LD_INT 21
38575: PUSH
38576: LD_INT 22
38578: PUSH
38579: LD_INT 23
38581: PUSH
38582: LD_INT 24
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: ST_TO_ADDR
38591: GO 38672
38593: LD_INT 53
38595: DOUBLE
38596: EQUAL
38597: IFTRUE 38601
38599: GO 38619
38601: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
38602: LD_ADDR_VAR 0 3
38606: PUSH
38607: LD_INT 23
38609: PUSH
38610: LD_INT 24
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: ST_TO_ADDR
38617: GO 38672
38619: LD_INT 46
38621: DOUBLE
38622: EQUAL
38623: IFTRUE 38627
38625: GO 38645
38627: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
38628: LD_ADDR_VAR 0 3
38632: PUSH
38633: LD_INT 23
38635: PUSH
38636: LD_INT 24
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: ST_TO_ADDR
38643: GO 38672
38645: LD_INT 47
38647: DOUBLE
38648: EQUAL
38649: IFTRUE 38653
38651: GO 38671
38653: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38654: LD_ADDR_VAR 0 3
38658: PUSH
38659: LD_INT 23
38661: PUSH
38662: LD_INT 24
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: ST_TO_ADDR
38669: GO 38672
38671: POP
// result := ( chassis in result ) ;
38672: LD_ADDR_VAR 0 3
38676: PUSH
38677: LD_VAR 0 1
38681: PUSH
38682: LD_VAR 0 3
38686: IN
38687: ST_TO_ADDR
// end ;
38688: LD_VAR 0 3
38692: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
38693: LD_INT 0
38695: PPUSH
38696: PPUSH
38697: PPUSH
38698: PPUSH
38699: PPUSH
38700: PPUSH
38701: PPUSH
// result := array ;
38702: LD_ADDR_VAR 0 5
38706: PUSH
38707: LD_VAR 0 1
38711: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38712: LD_VAR 0 1
38716: NOT
38717: PUSH
38718: LD_VAR 0 2
38722: NOT
38723: OR
38724: PUSH
38725: LD_VAR 0 3
38729: NOT
38730: OR
38731: PUSH
38732: LD_VAR 0 2
38736: PUSH
38737: LD_VAR 0 1
38741: GREATER
38742: OR
38743: PUSH
38744: LD_VAR 0 3
38748: PUSH
38749: LD_VAR 0 1
38753: GREATER
38754: OR
38755: IFFALSE 38759
// exit ;
38757: GO 39055
// if direction then
38759: LD_VAR 0 4
38763: IFFALSE 38827
// begin d := 1 ;
38765: LD_ADDR_VAR 0 9
38769: PUSH
38770: LD_INT 1
38772: ST_TO_ADDR
// if i_from > i_to then
38773: LD_VAR 0 2
38777: PUSH
38778: LD_VAR 0 3
38782: GREATER
38783: IFFALSE 38809
// length := ( array - i_from ) + i_to else
38785: LD_ADDR_VAR 0 11
38789: PUSH
38790: LD_VAR 0 1
38794: PUSH
38795: LD_VAR 0 2
38799: MINUS
38800: PUSH
38801: LD_VAR 0 3
38805: PLUS
38806: ST_TO_ADDR
38807: GO 38825
// length := i_to - i_from ;
38809: LD_ADDR_VAR 0 11
38813: PUSH
38814: LD_VAR 0 3
38818: PUSH
38819: LD_VAR 0 2
38823: MINUS
38824: ST_TO_ADDR
// end else
38825: GO 38888
// begin d := - 1 ;
38827: LD_ADDR_VAR 0 9
38831: PUSH
38832: LD_INT 1
38834: NEG
38835: ST_TO_ADDR
// if i_from > i_to then
38836: LD_VAR 0 2
38840: PUSH
38841: LD_VAR 0 3
38845: GREATER
38846: IFFALSE 38866
// length := i_from - i_to else
38848: LD_ADDR_VAR 0 11
38852: PUSH
38853: LD_VAR 0 2
38857: PUSH
38858: LD_VAR 0 3
38862: MINUS
38863: ST_TO_ADDR
38864: GO 38888
// length := ( array - i_to ) + i_from ;
38866: LD_ADDR_VAR 0 11
38870: PUSH
38871: LD_VAR 0 1
38875: PUSH
38876: LD_VAR 0 3
38880: MINUS
38881: PUSH
38882: LD_VAR 0 2
38886: PLUS
38887: ST_TO_ADDR
// end ; if not length then
38888: LD_VAR 0 11
38892: NOT
38893: IFFALSE 38897
// exit ;
38895: GO 39055
// tmp := array ;
38897: LD_ADDR_VAR 0 10
38901: PUSH
38902: LD_VAR 0 1
38906: ST_TO_ADDR
// for i = 1 to length do
38907: LD_ADDR_VAR 0 6
38911: PUSH
38912: DOUBLE
38913: LD_INT 1
38915: DEC
38916: ST_TO_ADDR
38917: LD_VAR 0 11
38921: PUSH
38922: FOR_TO
38923: IFFALSE 39043
// begin for j = 1 to array do
38925: LD_ADDR_VAR 0 7
38929: PUSH
38930: DOUBLE
38931: LD_INT 1
38933: DEC
38934: ST_TO_ADDR
38935: LD_VAR 0 1
38939: PUSH
38940: FOR_TO
38941: IFFALSE 39029
// begin k := j + d ;
38943: LD_ADDR_VAR 0 8
38947: PUSH
38948: LD_VAR 0 7
38952: PUSH
38953: LD_VAR 0 9
38957: PLUS
38958: ST_TO_ADDR
// if k > array then
38959: LD_VAR 0 8
38963: PUSH
38964: LD_VAR 0 1
38968: GREATER
38969: IFFALSE 38979
// k := 1 ;
38971: LD_ADDR_VAR 0 8
38975: PUSH
38976: LD_INT 1
38978: ST_TO_ADDR
// if not k then
38979: LD_VAR 0 8
38983: NOT
38984: IFFALSE 38996
// k := array ;
38986: LD_ADDR_VAR 0 8
38990: PUSH
38991: LD_VAR 0 1
38995: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38996: LD_ADDR_VAR 0 10
39000: PUSH
39001: LD_VAR 0 10
39005: PPUSH
39006: LD_VAR 0 8
39010: PPUSH
39011: LD_VAR 0 1
39015: PUSH
39016: LD_VAR 0 7
39020: ARRAY
39021: PPUSH
39022: CALL_OW 1
39026: ST_TO_ADDR
// end ;
39027: GO 38940
39029: POP
39030: POP
// array := tmp ;
39031: LD_ADDR_VAR 0 1
39035: PUSH
39036: LD_VAR 0 10
39040: ST_TO_ADDR
// end ;
39041: GO 38922
39043: POP
39044: POP
// result := array ;
39045: LD_ADDR_VAR 0 5
39049: PUSH
39050: LD_VAR 0 1
39054: ST_TO_ADDR
// end ;
39055: LD_VAR 0 5
39059: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
39060: LD_INT 0
39062: PPUSH
39063: PPUSH
// result := 0 ;
39064: LD_ADDR_VAR 0 3
39068: PUSH
39069: LD_INT 0
39071: ST_TO_ADDR
// if not array or not value in array then
39072: LD_VAR 0 1
39076: NOT
39077: PUSH
39078: LD_VAR 0 2
39082: PUSH
39083: LD_VAR 0 1
39087: IN
39088: NOT
39089: OR
39090: IFFALSE 39094
// exit ;
39092: GO 39148
// for i = 1 to array do
39094: LD_ADDR_VAR 0 4
39098: PUSH
39099: DOUBLE
39100: LD_INT 1
39102: DEC
39103: ST_TO_ADDR
39104: LD_VAR 0 1
39108: PUSH
39109: FOR_TO
39110: IFFALSE 39146
// if value = array [ i ] then
39112: LD_VAR 0 2
39116: PUSH
39117: LD_VAR 0 1
39121: PUSH
39122: LD_VAR 0 4
39126: ARRAY
39127: EQUAL
39128: IFFALSE 39144
// begin result := i ;
39130: LD_ADDR_VAR 0 3
39134: PUSH
39135: LD_VAR 0 4
39139: ST_TO_ADDR
// exit ;
39140: POP
39141: POP
39142: GO 39148
// end ;
39144: GO 39109
39146: POP
39147: POP
// end ;
39148: LD_VAR 0 3
39152: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
39153: LD_INT 0
39155: PPUSH
// vc_chassis := chassis ;
39156: LD_ADDR_OWVAR 37
39160: PUSH
39161: LD_VAR 0 1
39165: ST_TO_ADDR
// vc_engine := engine ;
39166: LD_ADDR_OWVAR 39
39170: PUSH
39171: LD_VAR 0 2
39175: ST_TO_ADDR
// vc_control := control ;
39176: LD_ADDR_OWVAR 38
39180: PUSH
39181: LD_VAR 0 3
39185: ST_TO_ADDR
// vc_weapon := weapon ;
39186: LD_ADDR_OWVAR 40
39190: PUSH
39191: LD_VAR 0 4
39195: ST_TO_ADDR
// vc_fuel_battery := fuel ;
39196: LD_ADDR_OWVAR 41
39200: PUSH
39201: LD_VAR 0 5
39205: ST_TO_ADDR
// end ;
39206: LD_VAR 0 6
39210: RET
// export function WantPlant ( unit ) ; var task ; begin
39211: LD_INT 0
39213: PPUSH
39214: PPUSH
// result := false ;
39215: LD_ADDR_VAR 0 2
39219: PUSH
39220: LD_INT 0
39222: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
39223: LD_ADDR_VAR 0 3
39227: PUSH
39228: LD_VAR 0 1
39232: PPUSH
39233: CALL_OW 437
39237: ST_TO_ADDR
// if task then
39238: LD_VAR 0 3
39242: IFFALSE 39270
// if task [ 1 ] [ 1 ] = p then
39244: LD_VAR 0 3
39248: PUSH
39249: LD_INT 1
39251: ARRAY
39252: PUSH
39253: LD_INT 1
39255: ARRAY
39256: PUSH
39257: LD_STRING p
39259: EQUAL
39260: IFFALSE 39270
// result := true ;
39262: LD_ADDR_VAR 0 2
39266: PUSH
39267: LD_INT 1
39269: ST_TO_ADDR
// end ;
39270: LD_VAR 0 2
39274: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
39275: LD_INT 0
39277: PPUSH
39278: PPUSH
39279: PPUSH
39280: PPUSH
// if pos < 1 then
39281: LD_VAR 0 2
39285: PUSH
39286: LD_INT 1
39288: LESS
39289: IFFALSE 39293
// exit ;
39291: GO 39596
// if pos = 1 then
39293: LD_VAR 0 2
39297: PUSH
39298: LD_INT 1
39300: EQUAL
39301: IFFALSE 39334
// result := Replace ( arr , pos [ 1 ] , value ) else
39303: LD_ADDR_VAR 0 4
39307: PUSH
39308: LD_VAR 0 1
39312: PPUSH
39313: LD_VAR 0 2
39317: PUSH
39318: LD_INT 1
39320: ARRAY
39321: PPUSH
39322: LD_VAR 0 3
39326: PPUSH
39327: CALL_OW 1
39331: ST_TO_ADDR
39332: GO 39596
// begin tmp := arr ;
39334: LD_ADDR_VAR 0 6
39338: PUSH
39339: LD_VAR 0 1
39343: ST_TO_ADDR
// s_arr := [ tmp ] ;
39344: LD_ADDR_VAR 0 7
39348: PUSH
39349: LD_VAR 0 6
39353: PUSH
39354: EMPTY
39355: LIST
39356: ST_TO_ADDR
// for i = 1 to pos - 1 do
39357: LD_ADDR_VAR 0 5
39361: PUSH
39362: DOUBLE
39363: LD_INT 1
39365: DEC
39366: ST_TO_ADDR
39367: LD_VAR 0 2
39371: PUSH
39372: LD_INT 1
39374: MINUS
39375: PUSH
39376: FOR_TO
39377: IFFALSE 39422
// begin tmp := tmp [ pos [ i ] ] ;
39379: LD_ADDR_VAR 0 6
39383: PUSH
39384: LD_VAR 0 6
39388: PUSH
39389: LD_VAR 0 2
39393: PUSH
39394: LD_VAR 0 5
39398: ARRAY
39399: ARRAY
39400: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
39401: LD_ADDR_VAR 0 7
39405: PUSH
39406: LD_VAR 0 7
39410: PUSH
39411: LD_VAR 0 6
39415: PUSH
39416: EMPTY
39417: LIST
39418: ADD
39419: ST_TO_ADDR
// end ;
39420: GO 39376
39422: POP
39423: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
39424: LD_ADDR_VAR 0 6
39428: PUSH
39429: LD_VAR 0 6
39433: PPUSH
39434: LD_VAR 0 2
39438: PUSH
39439: LD_VAR 0 2
39443: ARRAY
39444: PPUSH
39445: LD_VAR 0 3
39449: PPUSH
39450: CALL_OW 1
39454: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
39455: LD_ADDR_VAR 0 7
39459: PUSH
39460: LD_VAR 0 7
39464: PPUSH
39465: LD_VAR 0 7
39469: PPUSH
39470: LD_VAR 0 6
39474: PPUSH
39475: CALL_OW 1
39479: ST_TO_ADDR
// for i = s_arr downto 2 do
39480: LD_ADDR_VAR 0 5
39484: PUSH
39485: DOUBLE
39486: LD_VAR 0 7
39490: INC
39491: ST_TO_ADDR
39492: LD_INT 2
39494: PUSH
39495: FOR_DOWNTO
39496: IFFALSE 39580
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
39498: LD_ADDR_VAR 0 6
39502: PUSH
39503: LD_VAR 0 7
39507: PUSH
39508: LD_VAR 0 5
39512: PUSH
39513: LD_INT 1
39515: MINUS
39516: ARRAY
39517: PPUSH
39518: LD_VAR 0 2
39522: PUSH
39523: LD_VAR 0 5
39527: PUSH
39528: LD_INT 1
39530: MINUS
39531: ARRAY
39532: PPUSH
39533: LD_VAR 0 7
39537: PUSH
39538: LD_VAR 0 5
39542: ARRAY
39543: PPUSH
39544: CALL_OW 1
39548: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
39549: LD_ADDR_VAR 0 7
39553: PUSH
39554: LD_VAR 0 7
39558: PPUSH
39559: LD_VAR 0 5
39563: PUSH
39564: LD_INT 1
39566: MINUS
39567: PPUSH
39568: LD_VAR 0 6
39572: PPUSH
39573: CALL_OW 1
39577: ST_TO_ADDR
// end ;
39578: GO 39495
39580: POP
39581: POP
// result := s_arr [ 1 ] ;
39582: LD_ADDR_VAR 0 4
39586: PUSH
39587: LD_VAR 0 7
39591: PUSH
39592: LD_INT 1
39594: ARRAY
39595: ST_TO_ADDR
// end ; end ;
39596: LD_VAR 0 4
39600: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
39601: LD_INT 0
39603: PPUSH
39604: PPUSH
// if not list then
39605: LD_VAR 0 1
39609: NOT
39610: IFFALSE 39614
// exit ;
39612: GO 39705
// i := list [ pos1 ] ;
39614: LD_ADDR_VAR 0 5
39618: PUSH
39619: LD_VAR 0 1
39623: PUSH
39624: LD_VAR 0 2
39628: ARRAY
39629: ST_TO_ADDR
// if not i then
39630: LD_VAR 0 5
39634: NOT
39635: IFFALSE 39639
// exit ;
39637: GO 39705
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
39639: LD_ADDR_VAR 0 1
39643: PUSH
39644: LD_VAR 0 1
39648: PPUSH
39649: LD_VAR 0 2
39653: PPUSH
39654: LD_VAR 0 1
39658: PUSH
39659: LD_VAR 0 3
39663: ARRAY
39664: PPUSH
39665: CALL_OW 1
39669: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
39670: LD_ADDR_VAR 0 1
39674: PUSH
39675: LD_VAR 0 1
39679: PPUSH
39680: LD_VAR 0 3
39684: PPUSH
39685: LD_VAR 0 5
39689: PPUSH
39690: CALL_OW 1
39694: ST_TO_ADDR
// result := list ;
39695: LD_ADDR_VAR 0 4
39699: PUSH
39700: LD_VAR 0 1
39704: ST_TO_ADDR
// end ;
39705: LD_VAR 0 4
39709: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39710: LD_INT 0
39712: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39713: LD_ADDR_VAR 0 5
39717: PUSH
39718: LD_VAR 0 1
39722: PPUSH
39723: CALL_OW 250
39727: PPUSH
39728: LD_VAR 0 1
39732: PPUSH
39733: CALL_OW 251
39737: PPUSH
39738: LD_VAR 0 2
39742: PPUSH
39743: LD_VAR 0 3
39747: PPUSH
39748: LD_VAR 0 4
39752: PPUSH
39753: CALL 39763 0 5
39757: ST_TO_ADDR
// end ;
39758: LD_VAR 0 5
39762: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39763: LD_INT 0
39765: PPUSH
39766: PPUSH
39767: PPUSH
39768: PPUSH
// if not list then
39769: LD_VAR 0 3
39773: NOT
39774: IFFALSE 39778
// exit ;
39776: GO 40166
// result := [ ] ;
39778: LD_ADDR_VAR 0 6
39782: PUSH
39783: EMPTY
39784: ST_TO_ADDR
// for i in list do
39785: LD_ADDR_VAR 0 7
39789: PUSH
39790: LD_VAR 0 3
39794: PUSH
39795: FOR_IN
39796: IFFALSE 39998
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39798: LD_ADDR_VAR 0 9
39802: PUSH
39803: LD_VAR 0 7
39807: PPUSH
39808: LD_VAR 0 1
39812: PPUSH
39813: LD_VAR 0 2
39817: PPUSH
39818: CALL_OW 297
39822: ST_TO_ADDR
// if not result then
39823: LD_VAR 0 6
39827: NOT
39828: IFFALSE 39854
// result := [ [ i , tmp ] ] else
39830: LD_ADDR_VAR 0 6
39834: PUSH
39835: LD_VAR 0 7
39839: PUSH
39840: LD_VAR 0 9
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: EMPTY
39850: LIST
39851: ST_TO_ADDR
39852: GO 39996
// begin if result [ result ] [ 2 ] < tmp then
39854: LD_VAR 0 6
39858: PUSH
39859: LD_VAR 0 6
39863: ARRAY
39864: PUSH
39865: LD_INT 2
39867: ARRAY
39868: PUSH
39869: LD_VAR 0 9
39873: LESS
39874: IFFALSE 39916
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39876: LD_ADDR_VAR 0 6
39880: PUSH
39881: LD_VAR 0 6
39885: PPUSH
39886: LD_VAR 0 6
39890: PUSH
39891: LD_INT 1
39893: PLUS
39894: PPUSH
39895: LD_VAR 0 7
39899: PUSH
39900: LD_VAR 0 9
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PPUSH
39909: CALL_OW 2
39913: ST_TO_ADDR
39914: GO 39996
// for j = 1 to result do
39916: LD_ADDR_VAR 0 8
39920: PUSH
39921: DOUBLE
39922: LD_INT 1
39924: DEC
39925: ST_TO_ADDR
39926: LD_VAR 0 6
39930: PUSH
39931: FOR_TO
39932: IFFALSE 39994
// begin if tmp < result [ j ] [ 2 ] then
39934: LD_VAR 0 9
39938: PUSH
39939: LD_VAR 0 6
39943: PUSH
39944: LD_VAR 0 8
39948: ARRAY
39949: PUSH
39950: LD_INT 2
39952: ARRAY
39953: LESS
39954: IFFALSE 39992
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39956: LD_ADDR_VAR 0 6
39960: PUSH
39961: LD_VAR 0 6
39965: PPUSH
39966: LD_VAR 0 8
39970: PPUSH
39971: LD_VAR 0 7
39975: PUSH
39976: LD_VAR 0 9
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PPUSH
39985: CALL_OW 2
39989: ST_TO_ADDR
// break ;
39990: GO 39994
// end ; end ;
39992: GO 39931
39994: POP
39995: POP
// end ; end ;
39996: GO 39795
39998: POP
39999: POP
// if result and not asc then
40000: LD_VAR 0 6
40004: PUSH
40005: LD_VAR 0 4
40009: NOT
40010: AND
40011: IFFALSE 40086
// begin tmp := result ;
40013: LD_ADDR_VAR 0 9
40017: PUSH
40018: LD_VAR 0 6
40022: ST_TO_ADDR
// for i = tmp downto 1 do
40023: LD_ADDR_VAR 0 7
40027: PUSH
40028: DOUBLE
40029: LD_VAR 0 9
40033: INC
40034: ST_TO_ADDR
40035: LD_INT 1
40037: PUSH
40038: FOR_DOWNTO
40039: IFFALSE 40084
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
40041: LD_ADDR_VAR 0 6
40045: PUSH
40046: LD_VAR 0 6
40050: PPUSH
40051: LD_VAR 0 9
40055: PUSH
40056: LD_VAR 0 7
40060: MINUS
40061: PUSH
40062: LD_INT 1
40064: PLUS
40065: PPUSH
40066: LD_VAR 0 9
40070: PUSH
40071: LD_VAR 0 7
40075: ARRAY
40076: PPUSH
40077: CALL_OW 1
40081: ST_TO_ADDR
40082: GO 40038
40084: POP
40085: POP
// end ; tmp := [ ] ;
40086: LD_ADDR_VAR 0 9
40090: PUSH
40091: EMPTY
40092: ST_TO_ADDR
// if mode then
40093: LD_VAR 0 5
40097: IFFALSE 40166
// begin for i = 1 to result do
40099: LD_ADDR_VAR 0 7
40103: PUSH
40104: DOUBLE
40105: LD_INT 1
40107: DEC
40108: ST_TO_ADDR
40109: LD_VAR 0 6
40113: PUSH
40114: FOR_TO
40115: IFFALSE 40154
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
40117: LD_ADDR_VAR 0 9
40121: PUSH
40122: LD_VAR 0 9
40126: PPUSH
40127: LD_VAR 0 7
40131: PPUSH
40132: LD_VAR 0 6
40136: PUSH
40137: LD_VAR 0 7
40141: ARRAY
40142: PUSH
40143: LD_INT 1
40145: ARRAY
40146: PPUSH
40147: CALL_OW 1
40151: ST_TO_ADDR
40152: GO 40114
40154: POP
40155: POP
// result := tmp ;
40156: LD_ADDR_VAR 0 6
40160: PUSH
40161: LD_VAR 0 9
40165: ST_TO_ADDR
// end ; end ;
40166: LD_VAR 0 6
40170: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
40171: LD_INT 0
40173: PPUSH
40174: PPUSH
40175: PPUSH
40176: PPUSH
40177: PPUSH
40178: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
40179: LD_ADDR_VAR 0 5
40183: PUSH
40184: LD_INT 0
40186: PUSH
40187: LD_INT 0
40189: PUSH
40190: LD_INT 0
40192: PUSH
40193: EMPTY
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: ST_TO_ADDR
// if not x or not y then
40201: LD_VAR 0 2
40205: NOT
40206: PUSH
40207: LD_VAR 0 3
40211: NOT
40212: OR
40213: IFFALSE 40217
// exit ;
40215: GO 41863
// if not range then
40217: LD_VAR 0 4
40221: NOT
40222: IFFALSE 40232
// range := 10 ;
40224: LD_ADDR_VAR 0 4
40228: PUSH
40229: LD_INT 10
40231: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40232: LD_ADDR_VAR 0 8
40236: PUSH
40237: LD_INT 81
40239: PUSH
40240: LD_VAR 0 1
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 92
40251: PUSH
40252: LD_VAR 0 2
40256: PUSH
40257: LD_VAR 0 3
40261: PUSH
40262: LD_VAR 0 4
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 3
40275: PUSH
40276: LD_INT 21
40278: PUSH
40279: LD_INT 3
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: LIST
40294: PPUSH
40295: CALL_OW 69
40299: ST_TO_ADDR
// if not tmp then
40300: LD_VAR 0 8
40304: NOT
40305: IFFALSE 40309
// exit ;
40307: GO 41863
// for i in tmp do
40309: LD_ADDR_VAR 0 6
40313: PUSH
40314: LD_VAR 0 8
40318: PUSH
40319: FOR_IN
40320: IFFALSE 41838
// begin points := [ 0 , 0 , 0 ] ;
40322: LD_ADDR_VAR 0 9
40326: PUSH
40327: LD_INT 0
40329: PUSH
40330: LD_INT 0
40332: PUSH
40333: LD_INT 0
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: LIST
40340: ST_TO_ADDR
// bpoints := 1 ;
40341: LD_ADDR_VAR 0 10
40345: PUSH
40346: LD_INT 1
40348: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40349: LD_VAR 0 6
40353: PPUSH
40354: CALL_OW 247
40358: PUSH
40359: LD_INT 1
40361: DOUBLE
40362: EQUAL
40363: IFTRUE 40367
40365: GO 40945
40367: POP
// begin if GetClass ( i ) = 1 then
40368: LD_VAR 0 6
40372: PPUSH
40373: CALL_OW 257
40377: PUSH
40378: LD_INT 1
40380: EQUAL
40381: IFFALSE 40402
// points := [ 10 , 5 , 3 ] ;
40383: LD_ADDR_VAR 0 9
40387: PUSH
40388: LD_INT 10
40390: PUSH
40391: LD_INT 5
40393: PUSH
40394: LD_INT 3
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: LIST
40401: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40402: LD_VAR 0 6
40406: PPUSH
40407: CALL_OW 257
40411: PUSH
40412: LD_INT 2
40414: PUSH
40415: LD_INT 3
40417: PUSH
40418: LD_INT 4
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: LIST
40425: IN
40426: IFFALSE 40447
// points := [ 3 , 2 , 1 ] ;
40428: LD_ADDR_VAR 0 9
40432: PUSH
40433: LD_INT 3
40435: PUSH
40436: LD_INT 2
40438: PUSH
40439: LD_INT 1
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: LIST
40446: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40447: LD_VAR 0 6
40451: PPUSH
40452: CALL_OW 257
40456: PUSH
40457: LD_INT 5
40459: EQUAL
40460: IFFALSE 40481
// points := [ 130 , 5 , 2 ] ;
40462: LD_ADDR_VAR 0 9
40466: PUSH
40467: LD_INT 130
40469: PUSH
40470: LD_INT 5
40472: PUSH
40473: LD_INT 2
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: LIST
40480: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40481: LD_VAR 0 6
40485: PPUSH
40486: CALL_OW 257
40490: PUSH
40491: LD_INT 8
40493: EQUAL
40494: IFFALSE 40515
// points := [ 35 , 35 , 30 ] ;
40496: LD_ADDR_VAR 0 9
40500: PUSH
40501: LD_INT 35
40503: PUSH
40504: LD_INT 35
40506: PUSH
40507: LD_INT 30
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: LIST
40514: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40515: LD_VAR 0 6
40519: PPUSH
40520: CALL_OW 257
40524: PUSH
40525: LD_INT 9
40527: EQUAL
40528: IFFALSE 40549
// points := [ 20 , 55 , 40 ] ;
40530: LD_ADDR_VAR 0 9
40534: PUSH
40535: LD_INT 20
40537: PUSH
40538: LD_INT 55
40540: PUSH
40541: LD_INT 40
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: LIST
40548: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40549: LD_VAR 0 6
40553: PPUSH
40554: CALL_OW 257
40558: PUSH
40559: LD_INT 12
40561: PUSH
40562: LD_INT 16
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: IN
40569: IFFALSE 40590
// points := [ 5 , 3 , 2 ] ;
40571: LD_ADDR_VAR 0 9
40575: PUSH
40576: LD_INT 5
40578: PUSH
40579: LD_INT 3
40581: PUSH
40582: LD_INT 2
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: LIST
40589: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40590: LD_VAR 0 6
40594: PPUSH
40595: CALL_OW 257
40599: PUSH
40600: LD_INT 17
40602: EQUAL
40603: IFFALSE 40624
// points := [ 100 , 50 , 75 ] ;
40605: LD_ADDR_VAR 0 9
40609: PUSH
40610: LD_INT 100
40612: PUSH
40613: LD_INT 50
40615: PUSH
40616: LD_INT 75
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: LIST
40623: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40624: LD_VAR 0 6
40628: PPUSH
40629: CALL_OW 257
40633: PUSH
40634: LD_INT 15
40636: EQUAL
40637: IFFALSE 40658
// points := [ 10 , 5 , 3 ] ;
40639: LD_ADDR_VAR 0 9
40643: PUSH
40644: LD_INT 10
40646: PUSH
40647: LD_INT 5
40649: PUSH
40650: LD_INT 3
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: LIST
40657: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40658: LD_VAR 0 6
40662: PPUSH
40663: CALL_OW 257
40667: PUSH
40668: LD_INT 14
40670: EQUAL
40671: IFFALSE 40692
// points := [ 10 , 0 , 0 ] ;
40673: LD_ADDR_VAR 0 9
40677: PUSH
40678: LD_INT 10
40680: PUSH
40681: LD_INT 0
40683: PUSH
40684: LD_INT 0
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: LIST
40691: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40692: LD_VAR 0 6
40696: PPUSH
40697: CALL_OW 257
40701: PUSH
40702: LD_INT 11
40704: EQUAL
40705: IFFALSE 40726
// points := [ 30 , 10 , 5 ] ;
40707: LD_ADDR_VAR 0 9
40711: PUSH
40712: LD_INT 30
40714: PUSH
40715: LD_INT 10
40717: PUSH
40718: LD_INT 5
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: LIST
40725: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40726: LD_VAR 0 1
40730: PPUSH
40731: LD_INT 5
40733: PPUSH
40734: CALL_OW 321
40738: PUSH
40739: LD_INT 2
40741: EQUAL
40742: IFFALSE 40759
// bpoints := bpoints * 1.8 ;
40744: LD_ADDR_VAR 0 10
40748: PUSH
40749: LD_VAR 0 10
40753: PUSH
40754: LD_REAL  1.80000000000000E+0000
40757: MUL
40758: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40759: LD_VAR 0 6
40763: PPUSH
40764: CALL_OW 257
40768: PUSH
40769: LD_INT 1
40771: PUSH
40772: LD_INT 2
40774: PUSH
40775: LD_INT 3
40777: PUSH
40778: LD_INT 4
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: IN
40787: PUSH
40788: LD_VAR 0 1
40792: PPUSH
40793: LD_INT 51
40795: PPUSH
40796: CALL_OW 321
40800: PUSH
40801: LD_INT 2
40803: EQUAL
40804: AND
40805: IFFALSE 40822
// bpoints := bpoints * 1.2 ;
40807: LD_ADDR_VAR 0 10
40811: PUSH
40812: LD_VAR 0 10
40816: PUSH
40817: LD_REAL  1.20000000000000E+0000
40820: MUL
40821: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40822: LD_VAR 0 6
40826: PPUSH
40827: CALL_OW 257
40831: PUSH
40832: LD_INT 5
40834: PUSH
40835: LD_INT 7
40837: PUSH
40838: LD_INT 9
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: LIST
40845: IN
40846: PUSH
40847: LD_VAR 0 1
40851: PPUSH
40852: LD_INT 52
40854: PPUSH
40855: CALL_OW 321
40859: PUSH
40860: LD_INT 2
40862: EQUAL
40863: AND
40864: IFFALSE 40881
// bpoints := bpoints * 1.5 ;
40866: LD_ADDR_VAR 0 10
40870: PUSH
40871: LD_VAR 0 10
40875: PUSH
40876: LD_REAL  1.50000000000000E+0000
40879: MUL
40880: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40881: LD_VAR 0 1
40885: PPUSH
40886: LD_INT 66
40888: PPUSH
40889: CALL_OW 321
40893: PUSH
40894: LD_INT 2
40896: EQUAL
40897: IFFALSE 40914
// bpoints := bpoints * 1.1 ;
40899: LD_ADDR_VAR 0 10
40903: PUSH
40904: LD_VAR 0 10
40908: PUSH
40909: LD_REAL  1.10000000000000E+0000
40912: MUL
40913: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40914: LD_ADDR_VAR 0 10
40918: PUSH
40919: LD_VAR 0 10
40923: PUSH
40924: LD_VAR 0 6
40928: PPUSH
40929: LD_INT 1
40931: PPUSH
40932: CALL_OW 259
40936: PUSH
40937: LD_REAL  1.15000000000000E+0000
40940: MUL
40941: MUL
40942: ST_TO_ADDR
// end ; unit_vehicle :
40943: GO 41767
40945: LD_INT 2
40947: DOUBLE
40948: EQUAL
40949: IFTRUE 40953
40951: GO 41755
40953: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40954: LD_VAR 0 6
40958: PPUSH
40959: CALL_OW 264
40963: PUSH
40964: LD_INT 2
40966: PUSH
40967: LD_INT 42
40969: PUSH
40970: LD_INT 24
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: LIST
40977: IN
40978: IFFALSE 40999
// points := [ 25 , 5 , 3 ] ;
40980: LD_ADDR_VAR 0 9
40984: PUSH
40985: LD_INT 25
40987: PUSH
40988: LD_INT 5
40990: PUSH
40991: LD_INT 3
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: LIST
40998: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40999: LD_VAR 0 6
41003: PPUSH
41004: CALL_OW 264
41008: PUSH
41009: LD_INT 4
41011: PUSH
41012: LD_INT 43
41014: PUSH
41015: LD_INT 25
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: LIST
41022: IN
41023: IFFALSE 41044
// points := [ 40 , 15 , 5 ] ;
41025: LD_ADDR_VAR 0 9
41029: PUSH
41030: LD_INT 40
41032: PUSH
41033: LD_INT 15
41035: PUSH
41036: LD_INT 5
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: LIST
41043: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
41044: LD_VAR 0 6
41048: PPUSH
41049: CALL_OW 264
41053: PUSH
41054: LD_INT 3
41056: PUSH
41057: LD_INT 23
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: IN
41064: IFFALSE 41085
// points := [ 7 , 25 , 8 ] ;
41066: LD_ADDR_VAR 0 9
41070: PUSH
41071: LD_INT 7
41073: PUSH
41074: LD_INT 25
41076: PUSH
41077: LD_INT 8
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: LIST
41084: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
41085: LD_VAR 0 6
41089: PPUSH
41090: CALL_OW 264
41094: PUSH
41095: LD_INT 5
41097: PUSH
41098: LD_INT 27
41100: PUSH
41101: LD_INT 44
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: LIST
41108: IN
41109: IFFALSE 41130
// points := [ 14 , 50 , 16 ] ;
41111: LD_ADDR_VAR 0 9
41115: PUSH
41116: LD_INT 14
41118: PUSH
41119: LD_INT 50
41121: PUSH
41122: LD_INT 16
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: LIST
41129: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
41130: LD_VAR 0 6
41134: PPUSH
41135: CALL_OW 264
41139: PUSH
41140: LD_INT 6
41142: PUSH
41143: LD_INT 46
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: IN
41150: IFFALSE 41171
// points := [ 32 , 120 , 70 ] ;
41152: LD_ADDR_VAR 0 9
41156: PUSH
41157: LD_INT 32
41159: PUSH
41160: LD_INT 120
41162: PUSH
41163: LD_INT 70
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: LIST
41170: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
41171: LD_VAR 0 6
41175: PPUSH
41176: CALL_OW 264
41180: PUSH
41181: LD_INT 7
41183: PUSH
41184: LD_INT 28
41186: PUSH
41187: LD_INT 45
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: LIST
41194: IN
41195: IFFALSE 41216
// points := [ 35 , 20 , 45 ] ;
41197: LD_ADDR_VAR 0 9
41201: PUSH
41202: LD_INT 35
41204: PUSH
41205: LD_INT 20
41207: PUSH
41208: LD_INT 45
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: LIST
41215: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
41216: LD_VAR 0 6
41220: PPUSH
41221: CALL_OW 264
41225: PUSH
41226: LD_INT 47
41228: PUSH
41229: EMPTY
41230: LIST
41231: IN
41232: IFFALSE 41253
// points := [ 67 , 45 , 75 ] ;
41234: LD_ADDR_VAR 0 9
41238: PUSH
41239: LD_INT 67
41241: PUSH
41242: LD_INT 45
41244: PUSH
41245: LD_INT 75
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: LIST
41252: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41253: LD_VAR 0 6
41257: PPUSH
41258: CALL_OW 264
41262: PUSH
41263: LD_INT 26
41265: PUSH
41266: EMPTY
41267: LIST
41268: IN
41269: IFFALSE 41290
// points := [ 120 , 30 , 80 ] ;
41271: LD_ADDR_VAR 0 9
41275: PUSH
41276: LD_INT 120
41278: PUSH
41279: LD_INT 30
41281: PUSH
41282: LD_INT 80
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: LIST
41289: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41290: LD_VAR 0 6
41294: PPUSH
41295: CALL_OW 264
41299: PUSH
41300: LD_INT 22
41302: PUSH
41303: EMPTY
41304: LIST
41305: IN
41306: IFFALSE 41327
// points := [ 40 , 1 , 1 ] ;
41308: LD_ADDR_VAR 0 9
41312: PUSH
41313: LD_INT 40
41315: PUSH
41316: LD_INT 1
41318: PUSH
41319: LD_INT 1
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: LIST
41326: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41327: LD_VAR 0 6
41331: PPUSH
41332: CALL_OW 264
41336: PUSH
41337: LD_INT 29
41339: PUSH
41340: EMPTY
41341: LIST
41342: IN
41343: IFFALSE 41364
// points := [ 70 , 200 , 400 ] ;
41345: LD_ADDR_VAR 0 9
41349: PUSH
41350: LD_INT 70
41352: PUSH
41353: LD_INT 200
41355: PUSH
41356: LD_INT 400
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: LIST
41363: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41364: LD_VAR 0 6
41368: PPUSH
41369: CALL_OW 264
41373: PUSH
41374: LD_INT 14
41376: PUSH
41377: LD_INT 53
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: IN
41384: IFFALSE 41405
// points := [ 40 , 10 , 20 ] ;
41386: LD_ADDR_VAR 0 9
41390: PUSH
41391: LD_INT 40
41393: PUSH
41394: LD_INT 10
41396: PUSH
41397: LD_INT 20
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: LIST
41404: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41405: LD_VAR 0 6
41409: PPUSH
41410: CALL_OW 264
41414: PUSH
41415: LD_INT 9
41417: PUSH
41418: EMPTY
41419: LIST
41420: IN
41421: IFFALSE 41442
// points := [ 5 , 70 , 20 ] ;
41423: LD_ADDR_VAR 0 9
41427: PUSH
41428: LD_INT 5
41430: PUSH
41431: LD_INT 70
41433: PUSH
41434: LD_INT 20
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: LIST
41441: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41442: LD_VAR 0 6
41446: PPUSH
41447: CALL_OW 264
41451: PUSH
41452: LD_INT 10
41454: PUSH
41455: EMPTY
41456: LIST
41457: IN
41458: IFFALSE 41479
// points := [ 35 , 110 , 70 ] ;
41460: LD_ADDR_VAR 0 9
41464: PUSH
41465: LD_INT 35
41467: PUSH
41468: LD_INT 110
41470: PUSH
41471: LD_INT 70
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: LIST
41478: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41479: LD_VAR 0 6
41483: PPUSH
41484: CALL_OW 265
41488: PUSH
41489: LD_INT 25
41491: EQUAL
41492: IFFALSE 41513
// points := [ 80 , 65 , 100 ] ;
41494: LD_ADDR_VAR 0 9
41498: PUSH
41499: LD_INT 80
41501: PUSH
41502: LD_INT 65
41504: PUSH
41505: LD_INT 100
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: LIST
41512: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41513: LD_VAR 0 6
41517: PPUSH
41518: CALL_OW 263
41522: PUSH
41523: LD_INT 1
41525: EQUAL
41526: IFFALSE 41561
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41528: LD_ADDR_VAR 0 10
41532: PUSH
41533: LD_VAR 0 10
41537: PUSH
41538: LD_VAR 0 6
41542: PPUSH
41543: CALL_OW 311
41547: PPUSH
41548: LD_INT 3
41550: PPUSH
41551: CALL_OW 259
41555: PUSH
41556: LD_INT 4
41558: MUL
41559: MUL
41560: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41561: LD_VAR 0 6
41565: PPUSH
41566: CALL_OW 263
41570: PUSH
41571: LD_INT 2
41573: EQUAL
41574: IFFALSE 41625
// begin j := IsControledBy ( i ) ;
41576: LD_ADDR_VAR 0 7
41580: PUSH
41581: LD_VAR 0 6
41585: PPUSH
41586: CALL_OW 312
41590: ST_TO_ADDR
// if j then
41591: LD_VAR 0 7
41595: IFFALSE 41625
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41597: LD_ADDR_VAR 0 10
41601: PUSH
41602: LD_VAR 0 10
41606: PUSH
41607: LD_VAR 0 7
41611: PPUSH
41612: LD_INT 3
41614: PPUSH
41615: CALL_OW 259
41619: PUSH
41620: LD_INT 3
41622: MUL
41623: MUL
41624: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41625: LD_VAR 0 6
41629: PPUSH
41630: CALL_OW 264
41634: PUSH
41635: LD_INT 5
41637: PUSH
41638: LD_INT 6
41640: PUSH
41641: LD_INT 46
41643: PUSH
41644: LD_INT 44
41646: PUSH
41647: LD_INT 47
41649: PUSH
41650: LD_INT 45
41652: PUSH
41653: LD_INT 28
41655: PUSH
41656: LD_INT 7
41658: PUSH
41659: LD_INT 27
41661: PUSH
41662: LD_INT 29
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: IN
41677: PUSH
41678: LD_VAR 0 1
41682: PPUSH
41683: LD_INT 52
41685: PPUSH
41686: CALL_OW 321
41690: PUSH
41691: LD_INT 2
41693: EQUAL
41694: AND
41695: IFFALSE 41712
// bpoints := bpoints * 1.2 ;
41697: LD_ADDR_VAR 0 10
41701: PUSH
41702: LD_VAR 0 10
41706: PUSH
41707: LD_REAL  1.20000000000000E+0000
41710: MUL
41711: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41712: LD_VAR 0 6
41716: PPUSH
41717: CALL_OW 264
41721: PUSH
41722: LD_INT 6
41724: PUSH
41725: LD_INT 46
41727: PUSH
41728: LD_INT 47
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: LIST
41735: IN
41736: IFFALSE 41753
// bpoints := bpoints * 1.2 ;
41738: LD_ADDR_VAR 0 10
41742: PUSH
41743: LD_VAR 0 10
41747: PUSH
41748: LD_REAL  1.20000000000000E+0000
41751: MUL
41752: ST_TO_ADDR
// end ; unit_building :
41753: GO 41767
41755: LD_INT 3
41757: DOUBLE
41758: EQUAL
41759: IFTRUE 41763
41761: GO 41766
41763: POP
// ; end ;
41764: GO 41767
41766: POP
// for j = 1 to 3 do
41767: LD_ADDR_VAR 0 7
41771: PUSH
41772: DOUBLE
41773: LD_INT 1
41775: DEC
41776: ST_TO_ADDR
41777: LD_INT 3
41779: PUSH
41780: FOR_TO
41781: IFFALSE 41834
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41783: LD_ADDR_VAR 0 5
41787: PUSH
41788: LD_VAR 0 5
41792: PPUSH
41793: LD_VAR 0 7
41797: PPUSH
41798: LD_VAR 0 5
41802: PUSH
41803: LD_VAR 0 7
41807: ARRAY
41808: PUSH
41809: LD_VAR 0 9
41813: PUSH
41814: LD_VAR 0 7
41818: ARRAY
41819: PUSH
41820: LD_VAR 0 10
41824: MUL
41825: PLUS
41826: PPUSH
41827: CALL_OW 1
41831: ST_TO_ADDR
41832: GO 41780
41834: POP
41835: POP
// end ;
41836: GO 40319
41838: POP
41839: POP
// result := Replace ( result , 4 , tmp ) ;
41840: LD_ADDR_VAR 0 5
41844: PUSH
41845: LD_VAR 0 5
41849: PPUSH
41850: LD_INT 4
41852: PPUSH
41853: LD_VAR 0 8
41857: PPUSH
41858: CALL_OW 1
41862: ST_TO_ADDR
// end ;
41863: LD_VAR 0 5
41867: RET
// export function DangerAtRange ( unit , range ) ; begin
41868: LD_INT 0
41870: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41871: LD_ADDR_VAR 0 3
41875: PUSH
41876: LD_VAR 0 1
41880: PPUSH
41881: CALL_OW 255
41885: PPUSH
41886: LD_VAR 0 1
41890: PPUSH
41891: CALL_OW 250
41895: PPUSH
41896: LD_VAR 0 1
41900: PPUSH
41901: CALL_OW 251
41905: PPUSH
41906: LD_VAR 0 2
41910: PPUSH
41911: CALL 40171 0 4
41915: ST_TO_ADDR
// end ;
41916: LD_VAR 0 3
41920: RET
// export function DangerInArea ( side , area ) ; begin
41921: LD_INT 0
41923: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41924: LD_ADDR_VAR 0 3
41928: PUSH
41929: LD_VAR 0 2
41933: PPUSH
41934: LD_INT 81
41936: PUSH
41937: LD_VAR 0 1
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PPUSH
41946: CALL_OW 70
41950: ST_TO_ADDR
// end ;
41951: LD_VAR 0 3
41955: RET
// export function IsExtension ( b ) ; begin
41956: LD_INT 0
41958: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41959: LD_ADDR_VAR 0 2
41963: PUSH
41964: LD_VAR 0 1
41968: PUSH
41969: LD_INT 23
41971: PUSH
41972: LD_INT 20
41974: PUSH
41975: LD_INT 22
41977: PUSH
41978: LD_INT 17
41980: PUSH
41981: LD_INT 24
41983: PUSH
41984: LD_INT 21
41986: PUSH
41987: LD_INT 19
41989: PUSH
41990: LD_INT 16
41992: PUSH
41993: LD_INT 25
41995: PUSH
41996: LD_INT 18
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: IN
42011: ST_TO_ADDR
// end ;
42012: LD_VAR 0 2
42016: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
42017: LD_INT 0
42019: PPUSH
42020: PPUSH
42021: PPUSH
// result := [ ] ;
42022: LD_ADDR_VAR 0 3
42026: PUSH
42027: EMPTY
42028: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
42029: LD_ADDR_VAR 0 4
42033: PUSH
42034: LD_VAR 0 2
42038: PPUSH
42039: LD_INT 21
42041: PUSH
42042: LD_INT 3
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PPUSH
42049: CALL_OW 70
42053: ST_TO_ADDR
// if not tmp then
42054: LD_VAR 0 4
42058: NOT
42059: IFFALSE 42063
// exit ;
42061: GO 42121
// for i in tmp do
42063: LD_ADDR_VAR 0 5
42067: PUSH
42068: LD_VAR 0 4
42072: PUSH
42073: FOR_IN
42074: IFFALSE 42109
// if GetBase ( i ) <> base then
42076: LD_VAR 0 5
42080: PPUSH
42081: CALL_OW 274
42085: PUSH
42086: LD_VAR 0 1
42090: NONEQUAL
42091: IFFALSE 42107
// ComLinkToBase ( base , i ) ;
42093: LD_VAR 0 1
42097: PPUSH
42098: LD_VAR 0 5
42102: PPUSH
42103: CALL_OW 169
42107: GO 42073
42109: POP
42110: POP
// result := tmp ;
42111: LD_ADDR_VAR 0 3
42115: PUSH
42116: LD_VAR 0 4
42120: ST_TO_ADDR
// end ;
42121: LD_VAR 0 3
42125: RET
// export function ComComplete ( unit , b ) ; var i ; begin
42126: LD_INT 0
42128: PPUSH
42129: PPUSH
// if BuildingStatus ( b ) = bs_build then
42130: LD_VAR 0 2
42134: PPUSH
42135: CALL_OW 461
42139: PUSH
42140: LD_INT 1
42142: EQUAL
42143: IFFALSE 42203
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
42145: LD_VAR 0 1
42149: PPUSH
42150: LD_STRING h
42152: PUSH
42153: LD_VAR 0 2
42157: PPUSH
42158: CALL_OW 250
42162: PUSH
42163: LD_VAR 0 2
42167: PPUSH
42168: CALL_OW 251
42172: PUSH
42173: LD_VAR 0 2
42177: PUSH
42178: LD_INT 0
42180: PUSH
42181: LD_INT 0
42183: PUSH
42184: LD_INT 0
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: PUSH
42196: EMPTY
42197: LIST
42198: PPUSH
42199: CALL_OW 446
// end ;
42203: LD_VAR 0 3
42207: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42208: LD_INT 0
42210: PPUSH
42211: PPUSH
42212: PPUSH
42213: PPUSH
42214: PPUSH
42215: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
42216: LD_VAR 0 1
42220: NOT
42221: PUSH
42222: LD_VAR 0 1
42226: PPUSH
42227: CALL_OW 263
42231: PUSH
42232: LD_INT 2
42234: EQUAL
42235: NOT
42236: OR
42237: IFFALSE 42241
// exit ;
42239: GO 42557
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42241: LD_ADDR_VAR 0 6
42245: PUSH
42246: LD_INT 22
42248: PUSH
42249: LD_VAR 0 1
42253: PPUSH
42254: CALL_OW 255
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 2
42265: PUSH
42266: LD_INT 30
42268: PUSH
42269: LD_INT 36
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 34
42278: PUSH
42279: LD_INT 31
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: LIST
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PPUSH
42295: CALL_OW 69
42299: ST_TO_ADDR
// if not tmp then
42300: LD_VAR 0 6
42304: NOT
42305: IFFALSE 42309
// exit ;
42307: GO 42557
// result := [ ] ;
42309: LD_ADDR_VAR 0 2
42313: PUSH
42314: EMPTY
42315: ST_TO_ADDR
// for i in tmp do
42316: LD_ADDR_VAR 0 3
42320: PUSH
42321: LD_VAR 0 6
42325: PUSH
42326: FOR_IN
42327: IFFALSE 42398
// begin t := UnitsInside ( i ) ;
42329: LD_ADDR_VAR 0 4
42333: PUSH
42334: LD_VAR 0 3
42338: PPUSH
42339: CALL_OW 313
42343: ST_TO_ADDR
// if t then
42344: LD_VAR 0 4
42348: IFFALSE 42396
// for j in t do
42350: LD_ADDR_VAR 0 7
42354: PUSH
42355: LD_VAR 0 4
42359: PUSH
42360: FOR_IN
42361: IFFALSE 42394
// result := Insert ( result , result + 1 , j ) ;
42363: LD_ADDR_VAR 0 2
42367: PUSH
42368: LD_VAR 0 2
42372: PPUSH
42373: LD_VAR 0 2
42377: PUSH
42378: LD_INT 1
42380: PLUS
42381: PPUSH
42382: LD_VAR 0 7
42386: PPUSH
42387: CALL_OW 2
42391: ST_TO_ADDR
42392: GO 42360
42394: POP
42395: POP
// end ;
42396: GO 42326
42398: POP
42399: POP
// if not result then
42400: LD_VAR 0 2
42404: NOT
42405: IFFALSE 42409
// exit ;
42407: GO 42557
// mech := result [ 1 ] ;
42409: LD_ADDR_VAR 0 5
42413: PUSH
42414: LD_VAR 0 2
42418: PUSH
42419: LD_INT 1
42421: ARRAY
42422: ST_TO_ADDR
// if result > 1 then
42423: LD_VAR 0 2
42427: PUSH
42428: LD_INT 1
42430: GREATER
42431: IFFALSE 42543
// for i = 2 to result do
42433: LD_ADDR_VAR 0 3
42437: PUSH
42438: DOUBLE
42439: LD_INT 2
42441: DEC
42442: ST_TO_ADDR
42443: LD_VAR 0 2
42447: PUSH
42448: FOR_TO
42449: IFFALSE 42541
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42451: LD_ADDR_VAR 0 4
42455: PUSH
42456: LD_VAR 0 2
42460: PUSH
42461: LD_VAR 0 3
42465: ARRAY
42466: PPUSH
42467: LD_INT 3
42469: PPUSH
42470: CALL_OW 259
42474: PUSH
42475: LD_VAR 0 2
42479: PUSH
42480: LD_VAR 0 3
42484: ARRAY
42485: PPUSH
42486: CALL_OW 432
42490: MINUS
42491: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42492: LD_VAR 0 4
42496: PUSH
42497: LD_VAR 0 5
42501: PPUSH
42502: LD_INT 3
42504: PPUSH
42505: CALL_OW 259
42509: PUSH
42510: LD_VAR 0 5
42514: PPUSH
42515: CALL_OW 432
42519: MINUS
42520: GREATEREQUAL
42521: IFFALSE 42539
// mech := result [ i ] ;
42523: LD_ADDR_VAR 0 5
42527: PUSH
42528: LD_VAR 0 2
42532: PUSH
42533: LD_VAR 0 3
42537: ARRAY
42538: ST_TO_ADDR
// end ;
42539: GO 42448
42541: POP
42542: POP
// ComLinkTo ( vehicle , mech ) ;
42543: LD_VAR 0 1
42547: PPUSH
42548: LD_VAR 0 5
42552: PPUSH
42553: CALL_OW 135
// end ;
42557: LD_VAR 0 2
42561: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42562: LD_INT 0
42564: PPUSH
42565: PPUSH
42566: PPUSH
42567: PPUSH
42568: PPUSH
42569: PPUSH
42570: PPUSH
42571: PPUSH
42572: PPUSH
42573: PPUSH
42574: PPUSH
42575: PPUSH
42576: PPUSH
// result := [ ] ;
42577: LD_ADDR_VAR 0 7
42581: PUSH
42582: EMPTY
42583: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42584: LD_VAR 0 1
42588: PPUSH
42589: CALL_OW 266
42593: PUSH
42594: LD_INT 0
42596: PUSH
42597: LD_INT 1
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: IN
42604: NOT
42605: IFFALSE 42609
// exit ;
42607: GO 44240
// if name then
42609: LD_VAR 0 3
42613: IFFALSE 42629
// SetBName ( base_dep , name ) ;
42615: LD_VAR 0 1
42619: PPUSH
42620: LD_VAR 0 3
42624: PPUSH
42625: CALL_OW 500
// base := GetBase ( base_dep ) ;
42629: LD_ADDR_VAR 0 15
42633: PUSH
42634: LD_VAR 0 1
42638: PPUSH
42639: CALL_OW 274
42643: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42644: LD_ADDR_VAR 0 16
42648: PUSH
42649: LD_VAR 0 1
42653: PPUSH
42654: CALL_OW 255
42658: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42659: LD_ADDR_VAR 0 17
42663: PUSH
42664: LD_VAR 0 1
42668: PPUSH
42669: CALL_OW 248
42673: ST_TO_ADDR
// if sources then
42674: LD_VAR 0 5
42678: IFFALSE 42725
// for i = 1 to 3 do
42680: LD_ADDR_VAR 0 8
42684: PUSH
42685: DOUBLE
42686: LD_INT 1
42688: DEC
42689: ST_TO_ADDR
42690: LD_INT 3
42692: PUSH
42693: FOR_TO
42694: IFFALSE 42723
// AddResourceType ( base , i , sources [ i ] ) ;
42696: LD_VAR 0 15
42700: PPUSH
42701: LD_VAR 0 8
42705: PPUSH
42706: LD_VAR 0 5
42710: PUSH
42711: LD_VAR 0 8
42715: ARRAY
42716: PPUSH
42717: CALL_OW 276
42721: GO 42693
42723: POP
42724: POP
// buildings := GetBaseBuildings ( base , area ) ;
42725: LD_ADDR_VAR 0 18
42729: PUSH
42730: LD_VAR 0 15
42734: PPUSH
42735: LD_VAR 0 2
42739: PPUSH
42740: CALL 42017 0 2
42744: ST_TO_ADDR
// InitHc ;
42745: CALL_OW 19
// InitUc ;
42749: CALL_OW 18
// uc_side := side ;
42753: LD_ADDR_OWVAR 20
42757: PUSH
42758: LD_VAR 0 16
42762: ST_TO_ADDR
// uc_nation := nation ;
42763: LD_ADDR_OWVAR 21
42767: PUSH
42768: LD_VAR 0 17
42772: ST_TO_ADDR
// if buildings then
42773: LD_VAR 0 18
42777: IFFALSE 44099
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42779: LD_ADDR_VAR 0 19
42783: PUSH
42784: LD_VAR 0 18
42788: PPUSH
42789: LD_INT 2
42791: PUSH
42792: LD_INT 30
42794: PUSH
42795: LD_INT 29
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 30
42804: PUSH
42805: LD_INT 30
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: LIST
42816: PPUSH
42817: CALL_OW 72
42821: ST_TO_ADDR
// if tmp then
42822: LD_VAR 0 19
42826: IFFALSE 42874
// for i in tmp do
42828: LD_ADDR_VAR 0 8
42832: PUSH
42833: LD_VAR 0 19
42837: PUSH
42838: FOR_IN
42839: IFFALSE 42872
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42841: LD_VAR 0 8
42845: PPUSH
42846: CALL_OW 250
42850: PPUSH
42851: LD_VAR 0 8
42855: PPUSH
42856: CALL_OW 251
42860: PPUSH
42861: LD_VAR 0 16
42865: PPUSH
42866: CALL_OW 441
42870: GO 42838
42872: POP
42873: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42874: LD_VAR 0 18
42878: PPUSH
42879: LD_INT 2
42881: PUSH
42882: LD_INT 30
42884: PUSH
42885: LD_INT 32
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 30
42894: PUSH
42895: LD_INT 33
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: LIST
42906: PPUSH
42907: CALL_OW 72
42911: IFFALSE 42999
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42913: LD_ADDR_VAR 0 8
42917: PUSH
42918: LD_VAR 0 18
42922: PPUSH
42923: LD_INT 2
42925: PUSH
42926: LD_INT 30
42928: PUSH
42929: LD_INT 32
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 30
42938: PUSH
42939: LD_INT 33
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: LIST
42950: PPUSH
42951: CALL_OW 72
42955: PUSH
42956: FOR_IN
42957: IFFALSE 42997
// begin if not GetBWeapon ( i ) then
42959: LD_VAR 0 8
42963: PPUSH
42964: CALL_OW 269
42968: NOT
42969: IFFALSE 42995
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42971: LD_VAR 0 8
42975: PPUSH
42976: LD_VAR 0 8
42980: PPUSH
42981: LD_VAR 0 2
42985: PPUSH
42986: CALL 44245 0 2
42990: PPUSH
42991: CALL_OW 431
// end ;
42995: GO 42956
42997: POP
42998: POP
// end ; for i = 1 to personel do
42999: LD_ADDR_VAR 0 8
43003: PUSH
43004: DOUBLE
43005: LD_INT 1
43007: DEC
43008: ST_TO_ADDR
43009: LD_VAR 0 6
43013: PUSH
43014: FOR_TO
43015: IFFALSE 44079
// begin if i > 4 then
43017: LD_VAR 0 8
43021: PUSH
43022: LD_INT 4
43024: GREATER
43025: IFFALSE 43029
// break ;
43027: GO 44079
// case i of 1 :
43029: LD_VAR 0 8
43033: PUSH
43034: LD_INT 1
43036: DOUBLE
43037: EQUAL
43038: IFTRUE 43042
43040: GO 43122
43042: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
43043: LD_ADDR_VAR 0 12
43047: PUSH
43048: LD_VAR 0 18
43052: PPUSH
43053: LD_INT 22
43055: PUSH
43056: LD_VAR 0 16
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 58
43067: PUSH
43068: EMPTY
43069: LIST
43070: PUSH
43071: LD_INT 2
43073: PUSH
43074: LD_INT 30
43076: PUSH
43077: LD_INT 32
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 30
43086: PUSH
43087: LD_INT 4
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 30
43096: PUSH
43097: LD_INT 5
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: LIST
43114: PPUSH
43115: CALL_OW 72
43119: ST_TO_ADDR
43120: GO 43344
43122: LD_INT 2
43124: DOUBLE
43125: EQUAL
43126: IFTRUE 43130
43128: GO 43192
43130: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
43131: LD_ADDR_VAR 0 12
43135: PUSH
43136: LD_VAR 0 18
43140: PPUSH
43141: LD_INT 22
43143: PUSH
43144: LD_VAR 0 16
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 2
43155: PUSH
43156: LD_INT 30
43158: PUSH
43159: LD_INT 0
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 30
43168: PUSH
43169: LD_INT 1
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: LIST
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PPUSH
43185: CALL_OW 72
43189: ST_TO_ADDR
43190: GO 43344
43192: LD_INT 3
43194: DOUBLE
43195: EQUAL
43196: IFTRUE 43200
43198: GO 43262
43200: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
43201: LD_ADDR_VAR 0 12
43205: PUSH
43206: LD_VAR 0 18
43210: PPUSH
43211: LD_INT 22
43213: PUSH
43214: LD_VAR 0 16
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 2
43225: PUSH
43226: LD_INT 30
43228: PUSH
43229: LD_INT 2
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 30
43238: PUSH
43239: LD_INT 3
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: LIST
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PPUSH
43255: CALL_OW 72
43259: ST_TO_ADDR
43260: GO 43344
43262: LD_INT 4
43264: DOUBLE
43265: EQUAL
43266: IFTRUE 43270
43268: GO 43343
43270: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43271: LD_ADDR_VAR 0 12
43275: PUSH
43276: LD_VAR 0 18
43280: PPUSH
43281: LD_INT 22
43283: PUSH
43284: LD_VAR 0 16
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 2
43295: PUSH
43296: LD_INT 30
43298: PUSH
43299: LD_INT 6
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 30
43308: PUSH
43309: LD_INT 7
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 30
43318: PUSH
43319: LD_INT 8
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PPUSH
43336: CALL_OW 72
43340: ST_TO_ADDR
43341: GO 43344
43343: POP
// if i = 1 then
43344: LD_VAR 0 8
43348: PUSH
43349: LD_INT 1
43351: EQUAL
43352: IFFALSE 43463
// begin tmp := [ ] ;
43354: LD_ADDR_VAR 0 19
43358: PUSH
43359: EMPTY
43360: ST_TO_ADDR
// for j in f do
43361: LD_ADDR_VAR 0 9
43365: PUSH
43366: LD_VAR 0 12
43370: PUSH
43371: FOR_IN
43372: IFFALSE 43445
// if GetBType ( j ) = b_bunker then
43374: LD_VAR 0 9
43378: PPUSH
43379: CALL_OW 266
43383: PUSH
43384: LD_INT 32
43386: EQUAL
43387: IFFALSE 43414
// tmp := Insert ( tmp , 1 , j ) else
43389: LD_ADDR_VAR 0 19
43393: PUSH
43394: LD_VAR 0 19
43398: PPUSH
43399: LD_INT 1
43401: PPUSH
43402: LD_VAR 0 9
43406: PPUSH
43407: CALL_OW 2
43411: ST_TO_ADDR
43412: GO 43443
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43414: LD_ADDR_VAR 0 19
43418: PUSH
43419: LD_VAR 0 19
43423: PPUSH
43424: LD_VAR 0 19
43428: PUSH
43429: LD_INT 1
43431: PLUS
43432: PPUSH
43433: LD_VAR 0 9
43437: PPUSH
43438: CALL_OW 2
43442: ST_TO_ADDR
43443: GO 43371
43445: POP
43446: POP
// if tmp then
43447: LD_VAR 0 19
43451: IFFALSE 43463
// f := tmp ;
43453: LD_ADDR_VAR 0 12
43457: PUSH
43458: LD_VAR 0 19
43462: ST_TO_ADDR
// end ; x := personel [ i ] ;
43463: LD_ADDR_VAR 0 13
43467: PUSH
43468: LD_VAR 0 6
43472: PUSH
43473: LD_VAR 0 8
43477: ARRAY
43478: ST_TO_ADDR
// if x = - 1 then
43479: LD_VAR 0 13
43483: PUSH
43484: LD_INT 1
43486: NEG
43487: EQUAL
43488: IFFALSE 43697
// begin for j in f do
43490: LD_ADDR_VAR 0 9
43494: PUSH
43495: LD_VAR 0 12
43499: PUSH
43500: FOR_IN
43501: IFFALSE 43693
// repeat InitHc ;
43503: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43507: LD_VAR 0 9
43511: PPUSH
43512: CALL_OW 266
43516: PUSH
43517: LD_INT 5
43519: EQUAL
43520: IFFALSE 43590
// begin if UnitsInside ( j ) < 3 then
43522: LD_VAR 0 9
43526: PPUSH
43527: CALL_OW 313
43531: PUSH
43532: LD_INT 3
43534: LESS
43535: IFFALSE 43571
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43537: LD_INT 0
43539: PPUSH
43540: LD_INT 5
43542: PUSH
43543: LD_INT 8
43545: PUSH
43546: LD_INT 9
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: LIST
43553: PUSH
43554: LD_VAR 0 17
43558: ARRAY
43559: PPUSH
43560: LD_VAR 0 4
43564: PPUSH
43565: CALL_OW 380
43569: GO 43588
// PrepareHuman ( false , i , skill ) ;
43571: LD_INT 0
43573: PPUSH
43574: LD_VAR 0 8
43578: PPUSH
43579: LD_VAR 0 4
43583: PPUSH
43584: CALL_OW 380
// end else
43588: GO 43607
// PrepareHuman ( false , i , skill ) ;
43590: LD_INT 0
43592: PPUSH
43593: LD_VAR 0 8
43597: PPUSH
43598: LD_VAR 0 4
43602: PPUSH
43603: CALL_OW 380
// un := CreateHuman ;
43607: LD_ADDR_VAR 0 14
43611: PUSH
43612: CALL_OW 44
43616: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43617: LD_ADDR_VAR 0 7
43621: PUSH
43622: LD_VAR 0 7
43626: PPUSH
43627: LD_INT 1
43629: PPUSH
43630: LD_VAR 0 14
43634: PPUSH
43635: CALL_OW 2
43639: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43640: LD_VAR 0 14
43644: PPUSH
43645: LD_VAR 0 9
43649: PPUSH
43650: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43654: LD_VAR 0 9
43658: PPUSH
43659: CALL_OW 313
43663: PUSH
43664: LD_INT 6
43666: EQUAL
43667: PUSH
43668: LD_VAR 0 9
43672: PPUSH
43673: CALL_OW 266
43677: PUSH
43678: LD_INT 32
43680: PUSH
43681: LD_INT 31
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: IN
43688: OR
43689: IFFALSE 43503
43691: GO 43500
43693: POP
43694: POP
// end else
43695: GO 44077
// for j = 1 to x do
43697: LD_ADDR_VAR 0 9
43701: PUSH
43702: DOUBLE
43703: LD_INT 1
43705: DEC
43706: ST_TO_ADDR
43707: LD_VAR 0 13
43711: PUSH
43712: FOR_TO
43713: IFFALSE 44075
// begin InitHc ;
43715: CALL_OW 19
// if not f then
43719: LD_VAR 0 12
43723: NOT
43724: IFFALSE 43813
// begin PrepareHuman ( false , i , skill ) ;
43726: LD_INT 0
43728: PPUSH
43729: LD_VAR 0 8
43733: PPUSH
43734: LD_VAR 0 4
43738: PPUSH
43739: CALL_OW 380
// un := CreateHuman ;
43743: LD_ADDR_VAR 0 14
43747: PUSH
43748: CALL_OW 44
43752: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43753: LD_ADDR_VAR 0 7
43757: PUSH
43758: LD_VAR 0 7
43762: PPUSH
43763: LD_INT 1
43765: PPUSH
43766: LD_VAR 0 14
43770: PPUSH
43771: CALL_OW 2
43775: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43776: LD_VAR 0 14
43780: PPUSH
43781: LD_VAR 0 1
43785: PPUSH
43786: CALL_OW 250
43790: PPUSH
43791: LD_VAR 0 1
43795: PPUSH
43796: CALL_OW 251
43800: PPUSH
43801: LD_INT 10
43803: PPUSH
43804: LD_INT 0
43806: PPUSH
43807: CALL_OW 50
// continue ;
43811: GO 43712
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43813: LD_VAR 0 12
43817: PUSH
43818: LD_INT 1
43820: ARRAY
43821: PPUSH
43822: CALL_OW 313
43826: PUSH
43827: LD_VAR 0 12
43831: PUSH
43832: LD_INT 1
43834: ARRAY
43835: PPUSH
43836: CALL_OW 266
43840: PUSH
43841: LD_INT 32
43843: PUSH
43844: LD_INT 31
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: IN
43851: AND
43852: PUSH
43853: LD_VAR 0 12
43857: PUSH
43858: LD_INT 1
43860: ARRAY
43861: PPUSH
43862: CALL_OW 313
43866: PUSH
43867: LD_INT 6
43869: EQUAL
43870: OR
43871: IFFALSE 43891
// f := Delete ( f , 1 ) ;
43873: LD_ADDR_VAR 0 12
43877: PUSH
43878: LD_VAR 0 12
43882: PPUSH
43883: LD_INT 1
43885: PPUSH
43886: CALL_OW 3
43890: ST_TO_ADDR
// if not f then
43891: LD_VAR 0 12
43895: NOT
43896: IFFALSE 43914
// begin x := x + 2 ;
43898: LD_ADDR_VAR 0 13
43902: PUSH
43903: LD_VAR 0 13
43907: PUSH
43908: LD_INT 2
43910: PLUS
43911: ST_TO_ADDR
// continue ;
43912: GO 43712
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43914: LD_VAR 0 12
43918: PUSH
43919: LD_INT 1
43921: ARRAY
43922: PPUSH
43923: CALL_OW 266
43927: PUSH
43928: LD_INT 5
43930: EQUAL
43931: IFFALSE 44005
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43933: LD_VAR 0 12
43937: PUSH
43938: LD_INT 1
43940: ARRAY
43941: PPUSH
43942: CALL_OW 313
43946: PUSH
43947: LD_INT 3
43949: LESS
43950: IFFALSE 43986
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43952: LD_INT 0
43954: PPUSH
43955: LD_INT 5
43957: PUSH
43958: LD_INT 8
43960: PUSH
43961: LD_INT 9
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: LIST
43968: PUSH
43969: LD_VAR 0 17
43973: ARRAY
43974: PPUSH
43975: LD_VAR 0 4
43979: PPUSH
43980: CALL_OW 380
43984: GO 44003
// PrepareHuman ( false , i , skill ) ;
43986: LD_INT 0
43988: PPUSH
43989: LD_VAR 0 8
43993: PPUSH
43994: LD_VAR 0 4
43998: PPUSH
43999: CALL_OW 380
// end else
44003: GO 44022
// PrepareHuman ( false , i , skill ) ;
44005: LD_INT 0
44007: PPUSH
44008: LD_VAR 0 8
44012: PPUSH
44013: LD_VAR 0 4
44017: PPUSH
44018: CALL_OW 380
// un := CreateHuman ;
44022: LD_ADDR_VAR 0 14
44026: PUSH
44027: CALL_OW 44
44031: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44032: LD_ADDR_VAR 0 7
44036: PUSH
44037: LD_VAR 0 7
44041: PPUSH
44042: LD_INT 1
44044: PPUSH
44045: LD_VAR 0 14
44049: PPUSH
44050: CALL_OW 2
44054: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
44055: LD_VAR 0 14
44059: PPUSH
44060: LD_VAR 0 12
44064: PUSH
44065: LD_INT 1
44067: ARRAY
44068: PPUSH
44069: CALL_OW 52
// end ;
44073: GO 43712
44075: POP
44076: POP
// end ;
44077: GO 43014
44079: POP
44080: POP
// result := result ^ buildings ;
44081: LD_ADDR_VAR 0 7
44085: PUSH
44086: LD_VAR 0 7
44090: PUSH
44091: LD_VAR 0 18
44095: ADD
44096: ST_TO_ADDR
// end else
44097: GO 44240
// begin for i = 1 to personel do
44099: LD_ADDR_VAR 0 8
44103: PUSH
44104: DOUBLE
44105: LD_INT 1
44107: DEC
44108: ST_TO_ADDR
44109: LD_VAR 0 6
44113: PUSH
44114: FOR_TO
44115: IFFALSE 44238
// begin if i > 4 then
44117: LD_VAR 0 8
44121: PUSH
44122: LD_INT 4
44124: GREATER
44125: IFFALSE 44129
// break ;
44127: GO 44238
// x := personel [ i ] ;
44129: LD_ADDR_VAR 0 13
44133: PUSH
44134: LD_VAR 0 6
44138: PUSH
44139: LD_VAR 0 8
44143: ARRAY
44144: ST_TO_ADDR
// if x = - 1 then
44145: LD_VAR 0 13
44149: PUSH
44150: LD_INT 1
44152: NEG
44153: EQUAL
44154: IFFALSE 44158
// continue ;
44156: GO 44114
// PrepareHuman ( false , i , skill ) ;
44158: LD_INT 0
44160: PPUSH
44161: LD_VAR 0 8
44165: PPUSH
44166: LD_VAR 0 4
44170: PPUSH
44171: CALL_OW 380
// un := CreateHuman ;
44175: LD_ADDR_VAR 0 14
44179: PUSH
44180: CALL_OW 44
44184: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44185: LD_VAR 0 14
44189: PPUSH
44190: LD_VAR 0 1
44194: PPUSH
44195: CALL_OW 250
44199: PPUSH
44200: LD_VAR 0 1
44204: PPUSH
44205: CALL_OW 251
44209: PPUSH
44210: LD_INT 10
44212: PPUSH
44213: LD_INT 0
44215: PPUSH
44216: CALL_OW 50
// result := result ^ un ;
44220: LD_ADDR_VAR 0 7
44224: PUSH
44225: LD_VAR 0 7
44229: PUSH
44230: LD_VAR 0 14
44234: ADD
44235: ST_TO_ADDR
// end ;
44236: GO 44114
44238: POP
44239: POP
// end ; end ;
44240: LD_VAR 0 7
44244: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44245: LD_INT 0
44247: PPUSH
44248: PPUSH
44249: PPUSH
44250: PPUSH
44251: PPUSH
44252: PPUSH
44253: PPUSH
44254: PPUSH
44255: PPUSH
44256: PPUSH
44257: PPUSH
44258: PPUSH
44259: PPUSH
44260: PPUSH
44261: PPUSH
44262: PPUSH
// result := false ;
44263: LD_ADDR_VAR 0 3
44267: PUSH
44268: LD_INT 0
44270: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44271: LD_VAR 0 1
44275: NOT
44276: PUSH
44277: LD_VAR 0 1
44281: PPUSH
44282: CALL_OW 266
44286: PUSH
44287: LD_INT 32
44289: PUSH
44290: LD_INT 33
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: IN
44297: NOT
44298: OR
44299: IFFALSE 44303
// exit ;
44301: GO 45439
// nat := GetNation ( tower ) ;
44303: LD_ADDR_VAR 0 12
44307: PUSH
44308: LD_VAR 0 1
44312: PPUSH
44313: CALL_OW 248
44317: ST_TO_ADDR
// side := GetSide ( tower ) ;
44318: LD_ADDR_VAR 0 16
44322: PUSH
44323: LD_VAR 0 1
44327: PPUSH
44328: CALL_OW 255
44332: ST_TO_ADDR
// x := GetX ( tower ) ;
44333: LD_ADDR_VAR 0 10
44337: PUSH
44338: LD_VAR 0 1
44342: PPUSH
44343: CALL_OW 250
44347: ST_TO_ADDR
// y := GetY ( tower ) ;
44348: LD_ADDR_VAR 0 11
44352: PUSH
44353: LD_VAR 0 1
44357: PPUSH
44358: CALL_OW 251
44362: ST_TO_ADDR
// if not x or not y then
44363: LD_VAR 0 10
44367: NOT
44368: PUSH
44369: LD_VAR 0 11
44373: NOT
44374: OR
44375: IFFALSE 44379
// exit ;
44377: GO 45439
// weapon := 0 ;
44379: LD_ADDR_VAR 0 18
44383: PUSH
44384: LD_INT 0
44386: ST_TO_ADDR
// fac_list := [ ] ;
44387: LD_ADDR_VAR 0 17
44391: PUSH
44392: EMPTY
44393: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
44394: LD_ADDR_VAR 0 6
44398: PUSH
44399: LD_VAR 0 1
44403: PPUSH
44404: CALL_OW 274
44408: PPUSH
44409: LD_VAR 0 2
44413: PPUSH
44414: CALL 42017 0 2
44418: PPUSH
44419: LD_INT 30
44421: PUSH
44422: LD_INT 3
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PPUSH
44429: CALL_OW 72
44433: ST_TO_ADDR
// if not factories then
44434: LD_VAR 0 6
44438: NOT
44439: IFFALSE 44443
// exit ;
44441: GO 45439
// for i in factories do
44443: LD_ADDR_VAR 0 8
44447: PUSH
44448: LD_VAR 0 6
44452: PUSH
44453: FOR_IN
44454: IFFALSE 44479
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44456: LD_ADDR_VAR 0 17
44460: PUSH
44461: LD_VAR 0 17
44465: PUSH
44466: LD_VAR 0 8
44470: PPUSH
44471: CALL_OW 478
44475: UNION
44476: ST_TO_ADDR
44477: GO 44453
44479: POP
44480: POP
// if not fac_list then
44481: LD_VAR 0 17
44485: NOT
44486: IFFALSE 44490
// exit ;
44488: GO 45439
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44490: LD_ADDR_VAR 0 5
44494: PUSH
44495: LD_INT 4
44497: PUSH
44498: LD_INT 5
44500: PUSH
44501: LD_INT 9
44503: PUSH
44504: LD_INT 10
44506: PUSH
44507: LD_INT 6
44509: PUSH
44510: LD_INT 7
44512: PUSH
44513: LD_INT 11
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 27
44527: PUSH
44528: LD_INT 28
44530: PUSH
44531: LD_INT 26
44533: PUSH
44534: LD_INT 30
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 43
44545: PUSH
44546: LD_INT 44
44548: PUSH
44549: LD_INT 46
44551: PUSH
44552: LD_INT 45
44554: PUSH
44555: LD_INT 47
44557: PUSH
44558: LD_INT 49
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: LIST
44573: PUSH
44574: LD_VAR 0 12
44578: ARRAY
44579: ST_TO_ADDR
// for i in list do
44580: LD_ADDR_VAR 0 8
44584: PUSH
44585: LD_VAR 0 5
44589: PUSH
44590: FOR_IN
44591: IFFALSE 44624
// if not i in fac_list then
44593: LD_VAR 0 8
44597: PUSH
44598: LD_VAR 0 17
44602: IN
44603: NOT
44604: IFFALSE 44622
// list := list diff i ;
44606: LD_ADDR_VAR 0 5
44610: PUSH
44611: LD_VAR 0 5
44615: PUSH
44616: LD_VAR 0 8
44620: DIFF
44621: ST_TO_ADDR
44622: GO 44590
44624: POP
44625: POP
// if not list then
44626: LD_VAR 0 5
44630: NOT
44631: IFFALSE 44635
// exit ;
44633: GO 45439
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44635: LD_VAR 0 12
44639: PUSH
44640: LD_INT 3
44642: EQUAL
44643: PUSH
44644: LD_INT 49
44646: PUSH
44647: LD_VAR 0 5
44651: IN
44652: AND
44653: PUSH
44654: LD_INT 31
44656: PPUSH
44657: LD_VAR 0 16
44661: PPUSH
44662: CALL_OW 321
44666: PUSH
44667: LD_INT 2
44669: EQUAL
44670: AND
44671: IFFALSE 44731
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44673: LD_INT 22
44675: PUSH
44676: LD_VAR 0 16
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 35
44687: PUSH
44688: LD_INT 49
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 91
44697: PUSH
44698: LD_VAR 0 1
44702: PUSH
44703: LD_INT 10
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: LIST
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: LIST
44715: PPUSH
44716: CALL_OW 69
44720: NOT
44721: IFFALSE 44731
// weapon := ru_time_lapser ;
44723: LD_ADDR_VAR 0 18
44727: PUSH
44728: LD_INT 49
44730: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44731: LD_VAR 0 12
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: LD_INT 2
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: IN
44746: PUSH
44747: LD_INT 11
44749: PUSH
44750: LD_VAR 0 5
44754: IN
44755: PUSH
44756: LD_INT 30
44758: PUSH
44759: LD_VAR 0 5
44763: IN
44764: OR
44765: AND
44766: PUSH
44767: LD_INT 6
44769: PPUSH
44770: LD_VAR 0 16
44774: PPUSH
44775: CALL_OW 321
44779: PUSH
44780: LD_INT 2
44782: EQUAL
44783: AND
44784: IFFALSE 44949
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44786: LD_INT 22
44788: PUSH
44789: LD_VAR 0 16
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 2
44800: PUSH
44801: LD_INT 35
44803: PUSH
44804: LD_INT 11
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 35
44813: PUSH
44814: LD_INT 30
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 91
44828: PUSH
44829: LD_VAR 0 1
44833: PUSH
44834: LD_INT 18
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: LIST
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: LIST
44846: PPUSH
44847: CALL_OW 69
44851: NOT
44852: PUSH
44853: LD_INT 22
44855: PUSH
44856: LD_VAR 0 16
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 2
44867: PUSH
44868: LD_INT 30
44870: PUSH
44871: LD_INT 32
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 30
44880: PUSH
44881: LD_INT 33
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 91
44895: PUSH
44896: LD_VAR 0 1
44900: PUSH
44901: LD_INT 12
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: LIST
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: LIST
44913: PUSH
44914: EMPTY
44915: LIST
44916: PPUSH
44917: CALL_OW 69
44921: PUSH
44922: LD_INT 2
44924: GREATER
44925: AND
44926: IFFALSE 44949
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44928: LD_ADDR_VAR 0 18
44932: PUSH
44933: LD_INT 11
44935: PUSH
44936: LD_INT 30
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_VAR 0 12
44947: ARRAY
44948: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44949: LD_VAR 0 18
44953: NOT
44954: PUSH
44955: LD_INT 40
44957: PPUSH
44958: LD_VAR 0 16
44962: PPUSH
44963: CALL_OW 321
44967: PUSH
44968: LD_INT 2
44970: EQUAL
44971: AND
44972: PUSH
44973: LD_INT 7
44975: PUSH
44976: LD_VAR 0 5
44980: IN
44981: PUSH
44982: LD_INT 28
44984: PUSH
44985: LD_VAR 0 5
44989: IN
44990: OR
44991: PUSH
44992: LD_INT 45
44994: PUSH
44995: LD_VAR 0 5
44999: IN
45000: OR
45001: AND
45002: IFFALSE 45256
// begin hex := GetHexInfo ( x , y ) ;
45004: LD_ADDR_VAR 0 4
45008: PUSH
45009: LD_VAR 0 10
45013: PPUSH
45014: LD_VAR 0 11
45018: PPUSH
45019: CALL_OW 546
45023: ST_TO_ADDR
// if hex [ 1 ] then
45024: LD_VAR 0 4
45028: PUSH
45029: LD_INT 1
45031: ARRAY
45032: IFFALSE 45036
// exit ;
45034: GO 45439
// height := hex [ 2 ] ;
45036: LD_ADDR_VAR 0 15
45040: PUSH
45041: LD_VAR 0 4
45045: PUSH
45046: LD_INT 2
45048: ARRAY
45049: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
45050: LD_ADDR_VAR 0 14
45054: PUSH
45055: LD_INT 0
45057: PUSH
45058: LD_INT 2
45060: PUSH
45061: LD_INT 3
45063: PUSH
45064: LD_INT 5
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: ST_TO_ADDR
// for i in tmp do
45073: LD_ADDR_VAR 0 8
45077: PUSH
45078: LD_VAR 0 14
45082: PUSH
45083: FOR_IN
45084: IFFALSE 45254
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
45086: LD_ADDR_VAR 0 9
45090: PUSH
45091: LD_VAR 0 10
45095: PPUSH
45096: LD_VAR 0 8
45100: PPUSH
45101: LD_INT 5
45103: PPUSH
45104: CALL_OW 272
45108: PUSH
45109: LD_VAR 0 11
45113: PPUSH
45114: LD_VAR 0 8
45118: PPUSH
45119: LD_INT 5
45121: PPUSH
45122: CALL_OW 273
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
45131: LD_VAR 0 9
45135: PUSH
45136: LD_INT 1
45138: ARRAY
45139: PPUSH
45140: LD_VAR 0 9
45144: PUSH
45145: LD_INT 2
45147: ARRAY
45148: PPUSH
45149: CALL_OW 488
45153: IFFALSE 45252
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
45155: LD_ADDR_VAR 0 4
45159: PUSH
45160: LD_VAR 0 9
45164: PUSH
45165: LD_INT 1
45167: ARRAY
45168: PPUSH
45169: LD_VAR 0 9
45173: PUSH
45174: LD_INT 2
45176: ARRAY
45177: PPUSH
45178: CALL_OW 546
45182: ST_TO_ADDR
// if hex [ 1 ] then
45183: LD_VAR 0 4
45187: PUSH
45188: LD_INT 1
45190: ARRAY
45191: IFFALSE 45195
// continue ;
45193: GO 45083
// h := hex [ 2 ] ;
45195: LD_ADDR_VAR 0 13
45199: PUSH
45200: LD_VAR 0 4
45204: PUSH
45205: LD_INT 2
45207: ARRAY
45208: ST_TO_ADDR
// if h + 7 < height then
45209: LD_VAR 0 13
45213: PUSH
45214: LD_INT 7
45216: PLUS
45217: PUSH
45218: LD_VAR 0 15
45222: LESS
45223: IFFALSE 45252
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45225: LD_ADDR_VAR 0 18
45229: PUSH
45230: LD_INT 7
45232: PUSH
45233: LD_INT 28
45235: PUSH
45236: LD_INT 45
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: LIST
45243: PUSH
45244: LD_VAR 0 12
45248: ARRAY
45249: ST_TO_ADDR
// break ;
45250: GO 45254
// end ; end ; end ;
45252: GO 45083
45254: POP
45255: POP
// end ; if not weapon then
45256: LD_VAR 0 18
45260: NOT
45261: IFFALSE 45321
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45263: LD_ADDR_VAR 0 5
45267: PUSH
45268: LD_VAR 0 5
45272: PUSH
45273: LD_INT 11
45275: PUSH
45276: LD_INT 30
45278: PUSH
45279: LD_INT 49
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: LIST
45286: DIFF
45287: ST_TO_ADDR
// if not list then
45288: LD_VAR 0 5
45292: NOT
45293: IFFALSE 45297
// exit ;
45295: GO 45439
// weapon := list [ rand ( 1 , list ) ] ;
45297: LD_ADDR_VAR 0 18
45301: PUSH
45302: LD_VAR 0 5
45306: PUSH
45307: LD_INT 1
45309: PPUSH
45310: LD_VAR 0 5
45314: PPUSH
45315: CALL_OW 12
45319: ARRAY
45320: ST_TO_ADDR
// end ; if weapon then
45321: LD_VAR 0 18
45325: IFFALSE 45439
// begin tmp := CostOfWeapon ( weapon ) ;
45327: LD_ADDR_VAR 0 14
45331: PUSH
45332: LD_VAR 0 18
45336: PPUSH
45337: CALL_OW 451
45341: ST_TO_ADDR
// j := GetBase ( tower ) ;
45342: LD_ADDR_VAR 0 9
45346: PUSH
45347: LD_VAR 0 1
45351: PPUSH
45352: CALL_OW 274
45356: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45357: LD_VAR 0 9
45361: PPUSH
45362: LD_INT 1
45364: PPUSH
45365: CALL_OW 275
45369: PUSH
45370: LD_VAR 0 14
45374: PUSH
45375: LD_INT 1
45377: ARRAY
45378: GREATEREQUAL
45379: PUSH
45380: LD_VAR 0 9
45384: PPUSH
45385: LD_INT 2
45387: PPUSH
45388: CALL_OW 275
45392: PUSH
45393: LD_VAR 0 14
45397: PUSH
45398: LD_INT 2
45400: ARRAY
45401: GREATEREQUAL
45402: AND
45403: PUSH
45404: LD_VAR 0 9
45408: PPUSH
45409: LD_INT 3
45411: PPUSH
45412: CALL_OW 275
45416: PUSH
45417: LD_VAR 0 14
45421: PUSH
45422: LD_INT 3
45424: ARRAY
45425: GREATEREQUAL
45426: AND
45427: IFFALSE 45439
// result := weapon ;
45429: LD_ADDR_VAR 0 3
45433: PUSH
45434: LD_VAR 0 18
45438: ST_TO_ADDR
// end ; end ;
45439: LD_VAR 0 3
45443: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45444: LD_INT 0
45446: PPUSH
45447: PPUSH
// result := true ;
45448: LD_ADDR_VAR 0 3
45452: PUSH
45453: LD_INT 1
45455: ST_TO_ADDR
// if array1 = array2 then
45456: LD_VAR 0 1
45460: PUSH
45461: LD_VAR 0 2
45465: EQUAL
45466: IFFALSE 45526
// begin for i = 1 to array1 do
45468: LD_ADDR_VAR 0 4
45472: PUSH
45473: DOUBLE
45474: LD_INT 1
45476: DEC
45477: ST_TO_ADDR
45478: LD_VAR 0 1
45482: PUSH
45483: FOR_TO
45484: IFFALSE 45522
// if array1 [ i ] <> array2 [ i ] then
45486: LD_VAR 0 1
45490: PUSH
45491: LD_VAR 0 4
45495: ARRAY
45496: PUSH
45497: LD_VAR 0 2
45501: PUSH
45502: LD_VAR 0 4
45506: ARRAY
45507: NONEQUAL
45508: IFFALSE 45520
// begin result := false ;
45510: LD_ADDR_VAR 0 3
45514: PUSH
45515: LD_INT 0
45517: ST_TO_ADDR
// break ;
45518: GO 45522
// end ;
45520: GO 45483
45522: POP
45523: POP
// end else
45524: GO 45534
// result := false ;
45526: LD_ADDR_VAR 0 3
45530: PUSH
45531: LD_INT 0
45533: ST_TO_ADDR
// end ;
45534: LD_VAR 0 3
45538: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45539: LD_INT 0
45541: PPUSH
45542: PPUSH
45543: PPUSH
// pom := GetBase ( fac ) ;
45544: LD_ADDR_VAR 0 5
45548: PUSH
45549: LD_VAR 0 1
45553: PPUSH
45554: CALL_OW 274
45558: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45559: LD_ADDR_VAR 0 4
45563: PUSH
45564: LD_VAR 0 2
45568: PUSH
45569: LD_INT 1
45571: ARRAY
45572: PPUSH
45573: LD_VAR 0 2
45577: PUSH
45578: LD_INT 2
45580: ARRAY
45581: PPUSH
45582: LD_VAR 0 2
45586: PUSH
45587: LD_INT 3
45589: ARRAY
45590: PPUSH
45591: LD_VAR 0 2
45595: PUSH
45596: LD_INT 4
45598: ARRAY
45599: PPUSH
45600: CALL_OW 449
45604: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45605: LD_ADDR_VAR 0 3
45609: PUSH
45610: LD_VAR 0 5
45614: PPUSH
45615: LD_INT 1
45617: PPUSH
45618: CALL_OW 275
45622: PUSH
45623: LD_VAR 0 4
45627: PUSH
45628: LD_INT 1
45630: ARRAY
45631: GREATEREQUAL
45632: PUSH
45633: LD_VAR 0 5
45637: PPUSH
45638: LD_INT 2
45640: PPUSH
45641: CALL_OW 275
45645: PUSH
45646: LD_VAR 0 4
45650: PUSH
45651: LD_INT 2
45653: ARRAY
45654: GREATEREQUAL
45655: AND
45656: PUSH
45657: LD_VAR 0 5
45661: PPUSH
45662: LD_INT 3
45664: PPUSH
45665: CALL_OW 275
45669: PUSH
45670: LD_VAR 0 4
45674: PUSH
45675: LD_INT 3
45677: ARRAY
45678: GREATEREQUAL
45679: AND
45680: ST_TO_ADDR
// end ;
45681: LD_VAR 0 3
45685: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45686: LD_INT 0
45688: PPUSH
45689: PPUSH
45690: PPUSH
45691: PPUSH
// pom := GetBase ( building ) ;
45692: LD_ADDR_VAR 0 3
45696: PUSH
45697: LD_VAR 0 1
45701: PPUSH
45702: CALL_OW 274
45706: ST_TO_ADDR
// if not pom then
45707: LD_VAR 0 3
45711: NOT
45712: IFFALSE 45716
// exit ;
45714: GO 45886
// btype := GetBType ( building ) ;
45716: LD_ADDR_VAR 0 5
45720: PUSH
45721: LD_VAR 0 1
45725: PPUSH
45726: CALL_OW 266
45730: ST_TO_ADDR
// if btype = b_armoury then
45731: LD_VAR 0 5
45735: PUSH
45736: LD_INT 4
45738: EQUAL
45739: IFFALSE 45749
// btype := b_barracks ;
45741: LD_ADDR_VAR 0 5
45745: PUSH
45746: LD_INT 5
45748: ST_TO_ADDR
// if btype = b_depot then
45749: LD_VAR 0 5
45753: PUSH
45754: LD_INT 0
45756: EQUAL
45757: IFFALSE 45767
// btype := b_warehouse ;
45759: LD_ADDR_VAR 0 5
45763: PUSH
45764: LD_INT 1
45766: ST_TO_ADDR
// if btype = b_workshop then
45767: LD_VAR 0 5
45771: PUSH
45772: LD_INT 2
45774: EQUAL
45775: IFFALSE 45785
// btype := b_factory ;
45777: LD_ADDR_VAR 0 5
45781: PUSH
45782: LD_INT 3
45784: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45785: LD_ADDR_VAR 0 4
45789: PUSH
45790: LD_VAR 0 5
45794: PPUSH
45795: LD_VAR 0 1
45799: PPUSH
45800: CALL_OW 248
45804: PPUSH
45805: CALL_OW 450
45809: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45810: LD_ADDR_VAR 0 2
45814: PUSH
45815: LD_VAR 0 3
45819: PPUSH
45820: LD_INT 1
45822: PPUSH
45823: CALL_OW 275
45827: PUSH
45828: LD_VAR 0 4
45832: PUSH
45833: LD_INT 1
45835: ARRAY
45836: GREATEREQUAL
45837: PUSH
45838: LD_VAR 0 3
45842: PPUSH
45843: LD_INT 2
45845: PPUSH
45846: CALL_OW 275
45850: PUSH
45851: LD_VAR 0 4
45855: PUSH
45856: LD_INT 2
45858: ARRAY
45859: GREATEREQUAL
45860: AND
45861: PUSH
45862: LD_VAR 0 3
45866: PPUSH
45867: LD_INT 3
45869: PPUSH
45870: CALL_OW 275
45874: PUSH
45875: LD_VAR 0 4
45879: PUSH
45880: LD_INT 3
45882: ARRAY
45883: GREATEREQUAL
45884: AND
45885: ST_TO_ADDR
// end ;
45886: LD_VAR 0 2
45890: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45891: LD_INT 0
45893: PPUSH
45894: PPUSH
45895: PPUSH
// pom := GetBase ( building ) ;
45896: LD_ADDR_VAR 0 4
45900: PUSH
45901: LD_VAR 0 1
45905: PPUSH
45906: CALL_OW 274
45910: ST_TO_ADDR
// if not pom then
45911: LD_VAR 0 4
45915: NOT
45916: IFFALSE 45920
// exit ;
45918: GO 46021
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45920: LD_ADDR_VAR 0 5
45924: PUSH
45925: LD_VAR 0 2
45929: PPUSH
45930: LD_VAR 0 1
45934: PPUSH
45935: CALL_OW 248
45939: PPUSH
45940: CALL_OW 450
45944: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45945: LD_ADDR_VAR 0 3
45949: PUSH
45950: LD_VAR 0 4
45954: PPUSH
45955: LD_INT 1
45957: PPUSH
45958: CALL_OW 275
45962: PUSH
45963: LD_VAR 0 5
45967: PUSH
45968: LD_INT 1
45970: ARRAY
45971: GREATEREQUAL
45972: PUSH
45973: LD_VAR 0 4
45977: PPUSH
45978: LD_INT 2
45980: PPUSH
45981: CALL_OW 275
45985: PUSH
45986: LD_VAR 0 5
45990: PUSH
45991: LD_INT 2
45993: ARRAY
45994: GREATEREQUAL
45995: AND
45996: PUSH
45997: LD_VAR 0 4
46001: PPUSH
46002: LD_INT 3
46004: PPUSH
46005: CALL_OW 275
46009: PUSH
46010: LD_VAR 0 5
46014: PUSH
46015: LD_INT 3
46017: ARRAY
46018: GREATEREQUAL
46019: AND
46020: ST_TO_ADDR
// end ;
46021: LD_VAR 0 3
46025: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
46026: LD_INT 0
46028: PPUSH
46029: PPUSH
46030: PPUSH
46031: PPUSH
46032: PPUSH
46033: PPUSH
46034: PPUSH
46035: PPUSH
46036: PPUSH
46037: PPUSH
// result := false ;
46038: LD_ADDR_VAR 0 6
46042: PUSH
46043: LD_INT 0
46045: ST_TO_ADDR
// if not base or not btype or not x or not y then
46046: LD_VAR 0 1
46050: NOT
46051: PUSH
46052: LD_VAR 0 2
46056: NOT
46057: OR
46058: PUSH
46059: LD_VAR 0 3
46063: NOT
46064: OR
46065: PUSH
46066: LD_VAR 0 4
46070: NOT
46071: OR
46072: IFFALSE 46076
// exit ;
46074: GO 46685
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
46076: LD_ADDR_VAR 0 12
46080: PUSH
46081: LD_VAR 0 2
46085: PPUSH
46086: LD_VAR 0 3
46090: PPUSH
46091: LD_VAR 0 4
46095: PPUSH
46096: LD_VAR 0 5
46100: PPUSH
46101: LD_VAR 0 1
46105: PUSH
46106: LD_INT 1
46108: ARRAY
46109: PPUSH
46110: CALL_OW 248
46114: PPUSH
46115: LD_INT 0
46117: PPUSH
46118: CALL 47522 0 6
46122: ST_TO_ADDR
// if not hexes then
46123: LD_VAR 0 12
46127: NOT
46128: IFFALSE 46132
// exit ;
46130: GO 46685
// for i = 1 to hexes do
46132: LD_ADDR_VAR 0 7
46136: PUSH
46137: DOUBLE
46138: LD_INT 1
46140: DEC
46141: ST_TO_ADDR
46142: LD_VAR 0 12
46146: PUSH
46147: FOR_TO
46148: IFFALSE 46683
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46150: LD_ADDR_VAR 0 11
46154: PUSH
46155: LD_VAR 0 12
46159: PUSH
46160: LD_VAR 0 7
46164: ARRAY
46165: PUSH
46166: LD_INT 1
46168: ARRAY
46169: PPUSH
46170: LD_VAR 0 12
46174: PUSH
46175: LD_VAR 0 7
46179: ARRAY
46180: PUSH
46181: LD_INT 2
46183: ARRAY
46184: PPUSH
46185: CALL_OW 428
46189: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46190: LD_VAR 0 12
46194: PUSH
46195: LD_VAR 0 7
46199: ARRAY
46200: PUSH
46201: LD_INT 1
46203: ARRAY
46204: PPUSH
46205: LD_VAR 0 12
46209: PUSH
46210: LD_VAR 0 7
46214: ARRAY
46215: PUSH
46216: LD_INT 2
46218: ARRAY
46219: PPUSH
46220: CALL_OW 351
46224: PUSH
46225: LD_VAR 0 12
46229: PUSH
46230: LD_VAR 0 7
46234: ARRAY
46235: PUSH
46236: LD_INT 1
46238: ARRAY
46239: PPUSH
46240: LD_VAR 0 12
46244: PUSH
46245: LD_VAR 0 7
46249: ARRAY
46250: PUSH
46251: LD_INT 2
46253: ARRAY
46254: PPUSH
46255: CALL_OW 488
46259: NOT
46260: OR
46261: PUSH
46262: LD_VAR 0 11
46266: PPUSH
46267: CALL_OW 247
46271: PUSH
46272: LD_INT 3
46274: EQUAL
46275: OR
46276: IFFALSE 46282
// exit ;
46278: POP
46279: POP
46280: GO 46685
// if not tmp or not tmp in base then
46282: LD_VAR 0 11
46286: NOT
46287: PUSH
46288: LD_VAR 0 11
46292: PUSH
46293: LD_VAR 0 1
46297: IN
46298: NOT
46299: OR
46300: IFFALSE 46304
// continue ;
46302: GO 46147
// result := true ;
46304: LD_ADDR_VAR 0 6
46308: PUSH
46309: LD_INT 1
46311: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46312: LD_ADDR_VAR 0 15
46316: PUSH
46317: LD_VAR 0 1
46321: PPUSH
46322: LD_INT 22
46324: PUSH
46325: LD_VAR 0 11
46329: PPUSH
46330: CALL_OW 255
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 2
46341: PUSH
46342: LD_INT 30
46344: PUSH
46345: LD_INT 0
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 30
46354: PUSH
46355: LD_INT 1
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: LIST
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PPUSH
46371: CALL_OW 72
46375: ST_TO_ADDR
// if dep then
46376: LD_VAR 0 15
46380: IFFALSE 46516
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46382: LD_ADDR_VAR 0 14
46386: PUSH
46387: LD_VAR 0 15
46391: PUSH
46392: LD_INT 1
46394: ARRAY
46395: PPUSH
46396: CALL_OW 250
46400: PPUSH
46401: LD_VAR 0 15
46405: PUSH
46406: LD_INT 1
46408: ARRAY
46409: PPUSH
46410: CALL_OW 254
46414: PPUSH
46415: LD_INT 5
46417: PPUSH
46418: CALL_OW 272
46422: PUSH
46423: LD_VAR 0 15
46427: PUSH
46428: LD_INT 1
46430: ARRAY
46431: PPUSH
46432: CALL_OW 251
46436: PPUSH
46437: LD_VAR 0 15
46441: PUSH
46442: LD_INT 1
46444: ARRAY
46445: PPUSH
46446: CALL_OW 254
46450: PPUSH
46451: LD_INT 5
46453: PPUSH
46454: CALL_OW 273
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46463: LD_VAR 0 14
46467: PUSH
46468: LD_INT 1
46470: ARRAY
46471: PPUSH
46472: LD_VAR 0 14
46476: PUSH
46477: LD_INT 2
46479: ARRAY
46480: PPUSH
46481: CALL_OW 488
46485: IFFALSE 46516
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46487: LD_VAR 0 11
46491: PPUSH
46492: LD_VAR 0 14
46496: PUSH
46497: LD_INT 1
46499: ARRAY
46500: PPUSH
46501: LD_VAR 0 14
46505: PUSH
46506: LD_INT 2
46508: ARRAY
46509: PPUSH
46510: CALL_OW 111
// continue ;
46514: GO 46147
// end ; end ; r := GetDir ( tmp ) ;
46516: LD_ADDR_VAR 0 13
46520: PUSH
46521: LD_VAR 0 11
46525: PPUSH
46526: CALL_OW 254
46530: ST_TO_ADDR
// if r = 5 then
46531: LD_VAR 0 13
46535: PUSH
46536: LD_INT 5
46538: EQUAL
46539: IFFALSE 46549
// r := 0 ;
46541: LD_ADDR_VAR 0 13
46545: PUSH
46546: LD_INT 0
46548: ST_TO_ADDR
// for j = r to 5 do
46549: LD_ADDR_VAR 0 8
46553: PUSH
46554: DOUBLE
46555: LD_VAR 0 13
46559: DEC
46560: ST_TO_ADDR
46561: LD_INT 5
46563: PUSH
46564: FOR_TO
46565: IFFALSE 46679
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46567: LD_ADDR_VAR 0 9
46571: PUSH
46572: LD_VAR 0 11
46576: PPUSH
46577: CALL_OW 250
46581: PPUSH
46582: LD_VAR 0 8
46586: PPUSH
46587: LD_INT 2
46589: PPUSH
46590: CALL_OW 272
46594: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46595: LD_ADDR_VAR 0 10
46599: PUSH
46600: LD_VAR 0 11
46604: PPUSH
46605: CALL_OW 251
46609: PPUSH
46610: LD_VAR 0 8
46614: PPUSH
46615: LD_INT 2
46617: PPUSH
46618: CALL_OW 273
46622: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46623: LD_VAR 0 9
46627: PPUSH
46628: LD_VAR 0 10
46632: PPUSH
46633: CALL_OW 488
46637: PUSH
46638: LD_VAR 0 9
46642: PPUSH
46643: LD_VAR 0 10
46647: PPUSH
46648: CALL_OW 428
46652: NOT
46653: AND
46654: IFFALSE 46677
// begin ComMoveXY ( tmp , _x , _y ) ;
46656: LD_VAR 0 11
46660: PPUSH
46661: LD_VAR 0 9
46665: PPUSH
46666: LD_VAR 0 10
46670: PPUSH
46671: CALL_OW 111
// break ;
46675: GO 46679
// end ; end ;
46677: GO 46564
46679: POP
46680: POP
// end ;
46681: GO 46147
46683: POP
46684: POP
// end ;
46685: LD_VAR 0 6
46689: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
46690: LD_INT 0
46692: PPUSH
46693: PPUSH
46694: PPUSH
46695: PPUSH
46696: PPUSH
46697: PPUSH
46698: PPUSH
46699: PPUSH
46700: PPUSH
46701: PPUSH
// result := false ;
46702: LD_ADDR_VAR 0 6
46706: PUSH
46707: LD_INT 0
46709: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46710: LD_VAR 0 1
46714: NOT
46715: PUSH
46716: LD_VAR 0 1
46720: PPUSH
46721: CALL_OW 266
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: LD_INT 1
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: IN
46736: NOT
46737: OR
46738: PUSH
46739: LD_VAR 0 2
46743: NOT
46744: OR
46745: PUSH
46746: LD_VAR 0 5
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: LD_INT 1
46756: PUSH
46757: LD_INT 2
46759: PUSH
46760: LD_INT 3
46762: PUSH
46763: LD_INT 4
46765: PUSH
46766: LD_INT 5
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: IN
46777: NOT
46778: OR
46779: PUSH
46780: LD_VAR 0 3
46784: PPUSH
46785: LD_VAR 0 4
46789: PPUSH
46790: CALL_OW 488
46794: NOT
46795: OR
46796: IFFALSE 46800
// exit ;
46798: GO 47517
// pom := GetBase ( depot ) ;
46800: LD_ADDR_VAR 0 10
46804: PUSH
46805: LD_VAR 0 1
46809: PPUSH
46810: CALL_OW 274
46814: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46815: LD_ADDR_VAR 0 11
46819: PUSH
46820: LD_VAR 0 2
46824: PPUSH
46825: LD_VAR 0 1
46829: PPUSH
46830: CALL_OW 248
46834: PPUSH
46835: CALL_OW 450
46839: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46840: LD_VAR 0 10
46844: PPUSH
46845: LD_INT 1
46847: PPUSH
46848: CALL_OW 275
46852: PUSH
46853: LD_VAR 0 11
46857: PUSH
46858: LD_INT 1
46860: ARRAY
46861: GREATEREQUAL
46862: PUSH
46863: LD_VAR 0 10
46867: PPUSH
46868: LD_INT 2
46870: PPUSH
46871: CALL_OW 275
46875: PUSH
46876: LD_VAR 0 11
46880: PUSH
46881: LD_INT 2
46883: ARRAY
46884: GREATEREQUAL
46885: AND
46886: PUSH
46887: LD_VAR 0 10
46891: PPUSH
46892: LD_INT 3
46894: PPUSH
46895: CALL_OW 275
46899: PUSH
46900: LD_VAR 0 11
46904: PUSH
46905: LD_INT 3
46907: ARRAY
46908: GREATEREQUAL
46909: AND
46910: NOT
46911: IFFALSE 46915
// exit ;
46913: GO 47517
// if GetBType ( depot ) = b_depot then
46915: LD_VAR 0 1
46919: PPUSH
46920: CALL_OW 266
46924: PUSH
46925: LD_INT 0
46927: EQUAL
46928: IFFALSE 46940
// dist := 28 else
46930: LD_ADDR_VAR 0 14
46934: PUSH
46935: LD_INT 28
46937: ST_TO_ADDR
46938: GO 46948
// dist := 36 ;
46940: LD_ADDR_VAR 0 14
46944: PUSH
46945: LD_INT 36
46947: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46948: LD_VAR 0 1
46952: PPUSH
46953: LD_VAR 0 3
46957: PPUSH
46958: LD_VAR 0 4
46962: PPUSH
46963: CALL_OW 297
46967: PUSH
46968: LD_VAR 0 14
46972: GREATER
46973: IFFALSE 46977
// exit ;
46975: GO 47517
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46977: LD_ADDR_VAR 0 12
46981: PUSH
46982: LD_VAR 0 2
46986: PPUSH
46987: LD_VAR 0 3
46991: PPUSH
46992: LD_VAR 0 4
46996: PPUSH
46997: LD_VAR 0 5
47001: PPUSH
47002: LD_VAR 0 1
47006: PPUSH
47007: CALL_OW 248
47011: PPUSH
47012: LD_INT 0
47014: PPUSH
47015: CALL 47522 0 6
47019: ST_TO_ADDR
// if not hexes then
47020: LD_VAR 0 12
47024: NOT
47025: IFFALSE 47029
// exit ;
47027: GO 47517
// hex := GetHexInfo ( x , y ) ;
47029: LD_ADDR_VAR 0 15
47033: PUSH
47034: LD_VAR 0 3
47038: PPUSH
47039: LD_VAR 0 4
47043: PPUSH
47044: CALL_OW 546
47048: ST_TO_ADDR
// if hex [ 1 ] then
47049: LD_VAR 0 15
47053: PUSH
47054: LD_INT 1
47056: ARRAY
47057: IFFALSE 47061
// exit ;
47059: GO 47517
// height := hex [ 2 ] ;
47061: LD_ADDR_VAR 0 13
47065: PUSH
47066: LD_VAR 0 15
47070: PUSH
47071: LD_INT 2
47073: ARRAY
47074: ST_TO_ADDR
// for i = 1 to hexes do
47075: LD_ADDR_VAR 0 7
47079: PUSH
47080: DOUBLE
47081: LD_INT 1
47083: DEC
47084: ST_TO_ADDR
47085: LD_VAR 0 12
47089: PUSH
47090: FOR_TO
47091: IFFALSE 47421
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47093: LD_VAR 0 12
47097: PUSH
47098: LD_VAR 0 7
47102: ARRAY
47103: PUSH
47104: LD_INT 1
47106: ARRAY
47107: PPUSH
47108: LD_VAR 0 12
47112: PUSH
47113: LD_VAR 0 7
47117: ARRAY
47118: PUSH
47119: LD_INT 2
47121: ARRAY
47122: PPUSH
47123: CALL_OW 488
47127: NOT
47128: PUSH
47129: LD_VAR 0 12
47133: PUSH
47134: LD_VAR 0 7
47138: ARRAY
47139: PUSH
47140: LD_INT 1
47142: ARRAY
47143: PPUSH
47144: LD_VAR 0 12
47148: PUSH
47149: LD_VAR 0 7
47153: ARRAY
47154: PUSH
47155: LD_INT 2
47157: ARRAY
47158: PPUSH
47159: CALL_OW 428
47163: PUSH
47164: LD_INT 0
47166: GREATER
47167: OR
47168: PUSH
47169: LD_VAR 0 12
47173: PUSH
47174: LD_VAR 0 7
47178: ARRAY
47179: PUSH
47180: LD_INT 1
47182: ARRAY
47183: PPUSH
47184: LD_VAR 0 12
47188: PUSH
47189: LD_VAR 0 7
47193: ARRAY
47194: PUSH
47195: LD_INT 2
47197: ARRAY
47198: PPUSH
47199: CALL_OW 351
47203: OR
47204: IFFALSE 47210
// exit ;
47206: POP
47207: POP
47208: GO 47517
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47210: LD_ADDR_VAR 0 8
47214: PUSH
47215: LD_VAR 0 12
47219: PUSH
47220: LD_VAR 0 7
47224: ARRAY
47225: PUSH
47226: LD_INT 1
47228: ARRAY
47229: PPUSH
47230: LD_VAR 0 12
47234: PUSH
47235: LD_VAR 0 7
47239: ARRAY
47240: PUSH
47241: LD_INT 2
47243: ARRAY
47244: PPUSH
47245: CALL_OW 546
47249: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47250: LD_VAR 0 8
47254: PUSH
47255: LD_INT 1
47257: ARRAY
47258: PUSH
47259: LD_VAR 0 8
47263: PUSH
47264: LD_INT 2
47266: ARRAY
47267: PUSH
47268: LD_VAR 0 13
47272: PUSH
47273: LD_INT 2
47275: PLUS
47276: GREATER
47277: OR
47278: PUSH
47279: LD_VAR 0 8
47283: PUSH
47284: LD_INT 2
47286: ARRAY
47287: PUSH
47288: LD_VAR 0 13
47292: PUSH
47293: LD_INT 2
47295: MINUS
47296: LESS
47297: OR
47298: PUSH
47299: LD_VAR 0 8
47303: PUSH
47304: LD_INT 3
47306: ARRAY
47307: PUSH
47308: LD_INT 0
47310: PUSH
47311: LD_INT 8
47313: PUSH
47314: LD_INT 9
47316: PUSH
47317: LD_INT 10
47319: PUSH
47320: LD_INT 11
47322: PUSH
47323: LD_INT 12
47325: PUSH
47326: LD_INT 13
47328: PUSH
47329: LD_INT 16
47331: PUSH
47332: LD_INT 17
47334: PUSH
47335: LD_INT 18
47337: PUSH
47338: LD_INT 19
47340: PUSH
47341: LD_INT 20
47343: PUSH
47344: LD_INT 21
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: IN
47362: NOT
47363: OR
47364: PUSH
47365: LD_VAR 0 8
47369: PUSH
47370: LD_INT 5
47372: ARRAY
47373: NOT
47374: OR
47375: PUSH
47376: LD_VAR 0 8
47380: PUSH
47381: LD_INT 6
47383: ARRAY
47384: PUSH
47385: LD_INT 1
47387: PUSH
47388: LD_INT 2
47390: PUSH
47391: LD_INT 7
47393: PUSH
47394: LD_INT 9
47396: PUSH
47397: LD_INT 10
47399: PUSH
47400: LD_INT 11
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: IN
47411: NOT
47412: OR
47413: IFFALSE 47419
// exit ;
47415: POP
47416: POP
47417: GO 47517
// end ;
47419: GO 47090
47421: POP
47422: POP
// side := GetSide ( depot ) ;
47423: LD_ADDR_VAR 0 9
47427: PUSH
47428: LD_VAR 0 1
47432: PPUSH
47433: CALL_OW 255
47437: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47438: LD_VAR 0 9
47442: PPUSH
47443: LD_VAR 0 3
47447: PPUSH
47448: LD_VAR 0 4
47452: PPUSH
47453: LD_INT 20
47455: PPUSH
47456: CALL 40171 0 4
47460: PUSH
47461: LD_INT 4
47463: ARRAY
47464: IFFALSE 47468
// exit ;
47466: GO 47517
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
47468: LD_VAR 0 2
47472: PUSH
47473: LD_INT 29
47475: PUSH
47476: LD_INT 30
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: IN
47483: PUSH
47484: LD_VAR 0 3
47488: PPUSH
47489: LD_VAR 0 4
47493: PPUSH
47494: LD_VAR 0 9
47498: PPUSH
47499: CALL_OW 440
47503: NOT
47504: AND
47505: IFFALSE 47509
// exit ;
47507: GO 47517
// result := true ;
47509: LD_ADDR_VAR 0 6
47513: PUSH
47514: LD_INT 1
47516: ST_TO_ADDR
// end ;
47517: LD_VAR 0 6
47521: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
47522: LD_INT 0
47524: PPUSH
47525: PPUSH
47526: PPUSH
47527: PPUSH
47528: PPUSH
47529: PPUSH
47530: PPUSH
47531: PPUSH
47532: PPUSH
47533: PPUSH
47534: PPUSH
47535: PPUSH
47536: PPUSH
47537: PPUSH
47538: PPUSH
47539: PPUSH
47540: PPUSH
47541: PPUSH
47542: PPUSH
47543: PPUSH
47544: PPUSH
47545: PPUSH
47546: PPUSH
47547: PPUSH
47548: PPUSH
47549: PPUSH
47550: PPUSH
47551: PPUSH
47552: PPUSH
47553: PPUSH
47554: PPUSH
47555: PPUSH
47556: PPUSH
47557: PPUSH
47558: PPUSH
47559: PPUSH
47560: PPUSH
47561: PPUSH
47562: PPUSH
47563: PPUSH
47564: PPUSH
47565: PPUSH
47566: PPUSH
47567: PPUSH
47568: PPUSH
47569: PPUSH
47570: PPUSH
47571: PPUSH
47572: PPUSH
47573: PPUSH
47574: PPUSH
47575: PPUSH
47576: PPUSH
47577: PPUSH
47578: PPUSH
47579: PPUSH
47580: PPUSH
47581: PPUSH
// result = [ ] ;
47582: LD_ADDR_VAR 0 7
47586: PUSH
47587: EMPTY
47588: ST_TO_ADDR
// temp_list = [ ] ;
47589: LD_ADDR_VAR 0 9
47593: PUSH
47594: EMPTY
47595: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
47596: LD_VAR 0 4
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: LD_INT 2
47609: PUSH
47610: LD_INT 3
47612: PUSH
47613: LD_INT 4
47615: PUSH
47616: LD_INT 5
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: IN
47627: NOT
47628: PUSH
47629: LD_VAR 0 1
47633: PUSH
47634: LD_INT 0
47636: PUSH
47637: LD_INT 1
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: IN
47644: PUSH
47645: LD_VAR 0 5
47649: PUSH
47650: LD_INT 1
47652: PUSH
47653: LD_INT 2
47655: PUSH
47656: LD_INT 3
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: LIST
47663: IN
47664: NOT
47665: AND
47666: OR
47667: IFFALSE 47671
// exit ;
47669: GO 66062
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47671: LD_VAR 0 1
47675: PUSH
47676: LD_INT 6
47678: PUSH
47679: LD_INT 7
47681: PUSH
47682: LD_INT 8
47684: PUSH
47685: LD_INT 13
47687: PUSH
47688: LD_INT 12
47690: PUSH
47691: LD_INT 15
47693: PUSH
47694: LD_INT 11
47696: PUSH
47697: LD_INT 14
47699: PUSH
47700: LD_INT 10
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: IN
47714: IFFALSE 47724
// btype = b_lab ;
47716: LD_ADDR_VAR 0 1
47720: PUSH
47721: LD_INT 6
47723: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47724: LD_VAR 0 6
47728: PUSH
47729: LD_INT 0
47731: PUSH
47732: LD_INT 1
47734: PUSH
47735: LD_INT 2
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: LIST
47742: IN
47743: NOT
47744: PUSH
47745: LD_VAR 0 1
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: LD_INT 1
47755: PUSH
47756: LD_INT 2
47758: PUSH
47759: LD_INT 3
47761: PUSH
47762: LD_INT 6
47764: PUSH
47765: LD_INT 36
47767: PUSH
47768: LD_INT 4
47770: PUSH
47771: LD_INT 5
47773: PUSH
47774: LD_INT 31
47776: PUSH
47777: LD_INT 32
47779: PUSH
47780: LD_INT 33
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: IN
47796: NOT
47797: PUSH
47798: LD_VAR 0 6
47802: PUSH
47803: LD_INT 1
47805: EQUAL
47806: AND
47807: OR
47808: PUSH
47809: LD_VAR 0 1
47813: PUSH
47814: LD_INT 2
47816: PUSH
47817: LD_INT 3
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: IN
47824: NOT
47825: PUSH
47826: LD_VAR 0 6
47830: PUSH
47831: LD_INT 2
47833: EQUAL
47834: AND
47835: OR
47836: IFFALSE 47846
// mode = 0 ;
47838: LD_ADDR_VAR 0 6
47842: PUSH
47843: LD_INT 0
47845: ST_TO_ADDR
// case mode of 0 :
47846: LD_VAR 0 6
47850: PUSH
47851: LD_INT 0
47853: DOUBLE
47854: EQUAL
47855: IFTRUE 47859
47857: GO 59312
47859: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47860: LD_ADDR_VAR 0 11
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: LD_INT 1
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: LD_INT 0
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 1
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 0
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 1
47918: NEG
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 1
47929: NEG
47930: PUSH
47931: LD_INT 1
47933: NEG
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: LD_INT 2
47945: NEG
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: LD_INT 2
47956: NEG
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: PUSH
47965: LD_INT 1
47967: NEG
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 1
47975: PUSH
47976: LD_INT 2
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 0
47985: PUSH
47986: LD_INT 2
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 1
47995: NEG
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: PUSH
48007: LD_INT 3
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 0
48016: PUSH
48017: LD_INT 3
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 1
48026: NEG
48027: PUSH
48028: LD_INT 2
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48053: LD_ADDR_VAR 0 12
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: LD_INT 1
48073: NEG
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 1
48081: PUSH
48082: LD_INT 0
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 1
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: LD_INT 1
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 1
48111: NEG
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: NEG
48123: PUSH
48124: LD_INT 1
48126: NEG
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 1
48134: PUSH
48135: LD_INT 1
48137: NEG
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 2
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 2
48155: PUSH
48156: LD_INT 1
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 1
48165: NEG
48166: PUSH
48167: LD_INT 1
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 2
48176: NEG
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 2
48187: NEG
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 2
48199: NEG
48200: PUSH
48201: LD_INT 1
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 3
48210: NEG
48211: PUSH
48212: LD_INT 0
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 3
48221: NEG
48222: PUSH
48223: LD_INT 1
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48249: LD_ADDR_VAR 0 13
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: LD_INT 0
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 0
48266: PUSH
48267: LD_INT 1
48269: NEG
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 1
48277: PUSH
48278: LD_INT 0
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 1
48287: PUSH
48288: LD_INT 1
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 0
48297: PUSH
48298: LD_INT 1
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 1
48307: NEG
48308: PUSH
48309: LD_INT 0
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 1
48318: NEG
48319: PUSH
48320: LD_INT 1
48322: NEG
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: NEG
48331: PUSH
48332: LD_INT 2
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 2
48342: PUSH
48343: LD_INT 1
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 2
48352: PUSH
48353: LD_INT 2
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: LD_INT 2
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 2
48372: NEG
48373: PUSH
48374: LD_INT 1
48376: NEG
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 2
48384: NEG
48385: PUSH
48386: LD_INT 2
48388: NEG
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 2
48396: NEG
48397: PUSH
48398: LD_INT 3
48400: NEG
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 3
48408: NEG
48409: PUSH
48410: LD_INT 2
48412: NEG
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 3
48420: NEG
48421: PUSH
48422: LD_INT 3
48424: NEG
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48448: LD_ADDR_VAR 0 14
48452: PUSH
48453: LD_INT 0
48455: PUSH
48456: LD_INT 0
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 0
48465: PUSH
48466: LD_INT 1
48468: NEG
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 1
48476: PUSH
48477: LD_INT 0
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 1
48486: PUSH
48487: LD_INT 1
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 0
48496: PUSH
48497: LD_INT 1
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 1
48506: NEG
48507: PUSH
48508: LD_INT 0
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: LD_INT 1
48521: NEG
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 1
48529: NEG
48530: PUSH
48531: LD_INT 2
48533: NEG
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 0
48541: PUSH
48542: LD_INT 2
48544: NEG
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 1
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 1
48563: PUSH
48564: LD_INT 2
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: LD_INT 2
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: PUSH
48585: LD_INT 1
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 1
48594: NEG
48595: PUSH
48596: LD_INT 3
48598: NEG
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: LD_INT 3
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 1
48617: PUSH
48618: LD_INT 2
48620: NEG
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48644: LD_ADDR_VAR 0 15
48648: PUSH
48649: LD_INT 0
48651: PUSH
48652: LD_INT 0
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 0
48661: PUSH
48662: LD_INT 1
48664: NEG
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 1
48672: PUSH
48673: LD_INT 0
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 1
48682: PUSH
48683: LD_INT 1
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 0
48692: PUSH
48693: LD_INT 1
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 1
48702: NEG
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 1
48713: NEG
48714: PUSH
48715: LD_INT 1
48717: NEG
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 1
48725: PUSH
48726: LD_INT 1
48728: NEG
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 2
48736: PUSH
48737: LD_INT 0
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 2
48746: PUSH
48747: LD_INT 1
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 1
48756: NEG
48757: PUSH
48758: LD_INT 1
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 2
48767: NEG
48768: PUSH
48769: LD_INT 0
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 2
48778: NEG
48779: PUSH
48780: LD_INT 1
48782: NEG
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 2
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 3
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 3
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48837: LD_ADDR_VAR 0 16
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: LD_INT 0
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 1
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 1
48895: NEG
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: NEG
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 1
48918: NEG
48919: PUSH
48920: LD_INT 2
48922: NEG
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 2
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 2
48940: PUSH
48941: LD_INT 2
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 1
48950: PUSH
48951: LD_INT 2
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 2
48960: NEG
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 2
48972: NEG
48973: PUSH
48974: LD_INT 2
48976: NEG
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 3
48984: PUSH
48985: LD_INT 2
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 3
48994: PUSH
48995: LD_INT 3
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 2
49004: PUSH
49005: LD_INT 3
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49030: LD_ADDR_VAR 0 17
49034: PUSH
49035: LD_INT 0
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 0
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 1
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 1
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: LD_INT 1
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: NEG
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 1
49099: NEG
49100: PUSH
49101: LD_INT 1
49103: NEG
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 1
49111: NEG
49112: PUSH
49113: LD_INT 2
49115: NEG
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: LD_INT 2
49126: NEG
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 1
49134: PUSH
49135: LD_INT 1
49137: NEG
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 2
49145: PUSH
49146: LD_INT 0
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 2
49155: PUSH
49156: LD_INT 1
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 2
49165: PUSH
49166: LD_INT 2
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 1
49175: PUSH
49176: LD_INT 2
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: LD_INT 2
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 1
49195: NEG
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 2
49206: NEG
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 2
49217: NEG
49218: PUSH
49219: LD_INT 1
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 2
49229: NEG
49230: PUSH
49231: LD_INT 2
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49260: LD_ADDR_VAR 0 18
49264: PUSH
49265: LD_INT 0
49267: PUSH
49268: LD_INT 0
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 0
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 1
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: NEG
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 1
49329: NEG
49330: PUSH
49331: LD_INT 1
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 1
49341: NEG
49342: PUSH
49343: LD_INT 2
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: LD_INT 2
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: PUSH
49365: LD_INT 1
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 2
49375: PUSH
49376: LD_INT 0
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 2
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 2
49395: PUSH
49396: LD_INT 2
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 1
49405: PUSH
49406: LD_INT 2
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: LD_INT 2
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 1
49425: NEG
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 2
49436: NEG
49437: PUSH
49438: LD_INT 0
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 2
49447: NEG
49448: PUSH
49449: LD_INT 1
49451: NEG
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 2
49459: NEG
49460: PUSH
49461: LD_INT 2
49463: NEG
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49490: LD_ADDR_VAR 0 19
49494: PUSH
49495: LD_INT 0
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 1
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: LD_INT 1
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 1
49548: NEG
49549: PUSH
49550: LD_INT 0
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 1
49559: NEG
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 1
49571: NEG
49572: PUSH
49573: LD_INT 2
49575: NEG
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 0
49583: PUSH
49584: LD_INT 2
49586: NEG
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 1
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 2
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 2
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 2
49625: PUSH
49626: LD_INT 2
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 1
49635: PUSH
49636: LD_INT 2
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: LD_INT 2
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: NEG
49656: PUSH
49657: LD_INT 1
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 2
49666: NEG
49667: PUSH
49668: LD_INT 0
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 2
49677: NEG
49678: PUSH
49679: LD_INT 1
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 2
49689: NEG
49690: PUSH
49691: LD_INT 2
49693: NEG
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49720: LD_ADDR_VAR 0 20
49724: PUSH
49725: LD_INT 0
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 1
49778: NEG
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 1
49789: NEG
49790: PUSH
49791: LD_INT 1
49793: NEG
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 1
49801: NEG
49802: PUSH
49803: LD_INT 2
49805: NEG
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 0
49813: PUSH
49814: LD_INT 2
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 1
49824: PUSH
49825: LD_INT 1
49827: NEG
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 2
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 2
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 2
49855: PUSH
49856: LD_INT 2
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: PUSH
49866: LD_INT 2
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: LD_INT 2
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 1
49885: NEG
49886: PUSH
49887: LD_INT 1
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 2
49896: NEG
49897: PUSH
49898: LD_INT 0
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 2
49907: NEG
49908: PUSH
49909: LD_INT 1
49911: NEG
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 2
49919: NEG
49920: PUSH
49921: LD_INT 2
49923: NEG
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49950: LD_ADDR_VAR 0 21
49954: PUSH
49955: LD_INT 0
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: LD_INT 1
49970: NEG
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 1
49988: PUSH
49989: LD_INT 1
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 0
49998: PUSH
49999: LD_INT 1
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 1
50019: NEG
50020: PUSH
50021: LD_INT 1
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 1
50031: NEG
50032: PUSH
50033: LD_INT 2
50035: NEG
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: LD_INT 2
50046: NEG
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 1
50054: PUSH
50055: LD_INT 1
50057: NEG
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 2
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 2
50075: PUSH
50076: LD_INT 1
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 2
50085: PUSH
50086: LD_INT 2
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 1
50095: PUSH
50096: LD_INT 2
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 0
50105: PUSH
50106: LD_INT 2
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 1
50115: NEG
50116: PUSH
50117: LD_INT 1
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 2
50126: NEG
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 2
50137: NEG
50138: PUSH
50139: LD_INT 1
50141: NEG
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 2
50149: NEG
50150: PUSH
50151: LD_INT 2
50153: NEG
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50180: LD_ADDR_VAR 0 22
50184: PUSH
50185: LD_INT 0
50187: PUSH
50188: LD_INT 0
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 0
50197: PUSH
50198: LD_INT 1
50200: NEG
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: LD_INT 0
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 1
50218: PUSH
50219: LD_INT 1
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: LD_INT 1
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: LD_INT 0
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 1
50249: NEG
50250: PUSH
50251: LD_INT 1
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 1
50261: NEG
50262: PUSH
50263: LD_INT 2
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: LD_INT 2
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: LD_INT 1
50287: NEG
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 2
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 2
50305: PUSH
50306: LD_INT 1
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 2
50315: PUSH
50316: LD_INT 2
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 1
50325: PUSH
50326: LD_INT 2
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 0
50335: PUSH
50336: LD_INT 2
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 1
50345: NEG
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 2
50356: NEG
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 2
50367: NEG
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 2
50379: NEG
50380: PUSH
50381: LD_INT 2
50383: NEG
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50410: LD_ADDR_VAR 0 23
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 0
50427: PUSH
50428: LD_INT 1
50430: NEG
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 1
50448: PUSH
50449: LD_INT 1
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: LD_INT 1
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: NEG
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: LD_INT 1
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 1
50491: NEG
50492: PUSH
50493: LD_INT 2
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: LD_INT 2
50506: NEG
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 1
50514: PUSH
50515: LD_INT 1
50517: NEG
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 2
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 2
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 2
50545: PUSH
50546: LD_INT 2
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 1
50555: PUSH
50556: LD_INT 2
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 0
50565: PUSH
50566: LD_INT 2
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: LD_INT 1
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 2
50586: NEG
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 2
50597: NEG
50598: PUSH
50599: LD_INT 1
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 2
50609: NEG
50610: PUSH
50611: LD_INT 2
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 2
50621: NEG
50622: PUSH
50623: LD_INT 3
50625: NEG
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 1
50633: NEG
50634: PUSH
50635: LD_INT 3
50637: NEG
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: LD_INT 2
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 2
50656: PUSH
50657: LD_INT 1
50659: NEG
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50690: LD_ADDR_VAR 0 24
50694: PUSH
50695: LD_INT 0
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: LD_INT 1
50710: NEG
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: LD_INT 0
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: LD_INT 1
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: LD_INT 1
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 1
50759: NEG
50760: PUSH
50761: LD_INT 1
50763: NEG
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: NEG
50772: PUSH
50773: LD_INT 2
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: LD_INT 2
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 2
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 2
50815: PUSH
50816: LD_INT 1
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 2
50825: PUSH
50826: LD_INT 2
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: LD_INT 2
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: LD_INT 2
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: NEG
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 2
50866: NEG
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 2
50877: NEG
50878: PUSH
50879: LD_INT 1
50881: NEG
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 2
50889: NEG
50890: PUSH
50891: LD_INT 2
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: LD_INT 2
50904: NEG
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 2
50912: PUSH
50913: LD_INT 1
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 3
50923: PUSH
50924: LD_INT 1
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 3
50933: PUSH
50934: LD_INT 2
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50966: LD_ADDR_VAR 0 25
50970: PUSH
50971: LD_INT 0
50973: PUSH
50974: LD_INT 0
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 0
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 1
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: LD_INT 1
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: LD_INT 1
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 1
51024: NEG
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 1
51035: NEG
51036: PUSH
51037: LD_INT 1
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 1
51047: NEG
51048: PUSH
51049: LD_INT 2
51051: NEG
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 0
51059: PUSH
51060: LD_INT 2
51062: NEG
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 1
51070: PUSH
51071: LD_INT 1
51073: NEG
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 2
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 2
51091: PUSH
51092: LD_INT 1
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 2
51101: PUSH
51102: LD_INT 2
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 1
51111: PUSH
51112: LD_INT 2
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: LD_INT 2
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 1
51131: NEG
51132: PUSH
51133: LD_INT 1
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 2
51142: NEG
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 2
51153: NEG
51154: PUSH
51155: LD_INT 1
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 2
51165: NEG
51166: PUSH
51167: LD_INT 2
51169: NEG
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 3
51177: PUSH
51178: LD_INT 1
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 3
51187: PUSH
51188: LD_INT 2
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 2
51197: PUSH
51198: LD_INT 3
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 1
51207: PUSH
51208: LD_INT 3
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51240: LD_ADDR_VAR 0 26
51244: PUSH
51245: LD_INT 0
51247: PUSH
51248: LD_INT 0
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 0
51257: PUSH
51258: LD_INT 1
51260: NEG
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: LD_INT 0
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 1
51278: PUSH
51279: LD_INT 1
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 0
51288: PUSH
51289: LD_INT 1
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 1
51298: NEG
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 1
51309: NEG
51310: PUSH
51311: LD_INT 1
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 1
51321: NEG
51322: PUSH
51323: LD_INT 2
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: LD_INT 2
51336: NEG
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: LD_INT 1
51347: NEG
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 2
51355: PUSH
51356: LD_INT 0
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 2
51365: PUSH
51366: LD_INT 1
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 2
51375: PUSH
51376: LD_INT 2
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: LD_INT 2
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 0
51395: PUSH
51396: LD_INT 2
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 1
51405: NEG
51406: PUSH
51407: LD_INT 1
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 2
51416: NEG
51417: PUSH
51418: LD_INT 0
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 2
51427: NEG
51428: PUSH
51429: LD_INT 1
51431: NEG
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 2
51439: NEG
51440: PUSH
51441: LD_INT 2
51443: NEG
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 2
51451: PUSH
51452: LD_INT 3
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 1
51461: PUSH
51462: LD_INT 3
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 1
51471: NEG
51472: PUSH
51473: LD_INT 2
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 2
51482: NEG
51483: PUSH
51484: LD_INT 1
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51516: LD_ADDR_VAR 0 27
51520: PUSH
51521: LD_INT 0
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 0
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 1
51544: PUSH
51545: LD_INT 0
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 1
51554: PUSH
51555: LD_INT 1
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 1
51574: NEG
51575: PUSH
51576: LD_INT 0
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 1
51585: NEG
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 1
51597: NEG
51598: PUSH
51599: LD_INT 2
51601: NEG
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: LD_INT 2
51612: NEG
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: LD_INT 1
51623: NEG
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 2
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 2
51641: PUSH
51642: LD_INT 1
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 2
51651: PUSH
51652: LD_INT 2
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 1
51661: PUSH
51662: LD_INT 2
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 0
51671: PUSH
51672: LD_INT 2
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 1
51681: NEG
51682: PUSH
51683: LD_INT 1
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 2
51692: NEG
51693: PUSH
51694: LD_INT 0
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 2
51703: NEG
51704: PUSH
51705: LD_INT 1
51707: NEG
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 2
51715: NEG
51716: PUSH
51717: LD_INT 2
51719: NEG
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 1
51727: NEG
51728: PUSH
51729: LD_INT 2
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 2
51738: NEG
51739: PUSH
51740: LD_INT 1
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 3
51749: NEG
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 3
51761: NEG
51762: PUSH
51763: LD_INT 2
51765: NEG
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51796: LD_ADDR_VAR 0 28
51800: PUSH
51801: LD_INT 0
51803: PUSH
51804: LD_INT 0
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: LD_INT 1
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 1
51834: PUSH
51835: LD_INT 1
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: LD_INT 1
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 1
51854: NEG
51855: PUSH
51856: LD_INT 0
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 1
51865: NEG
51866: PUSH
51867: LD_INT 1
51869: NEG
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 1
51877: NEG
51878: PUSH
51879: LD_INT 2
51881: NEG
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 0
51889: PUSH
51890: LD_INT 2
51892: NEG
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 1
51900: PUSH
51901: LD_INT 1
51903: NEG
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 2
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 2
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 2
51931: PUSH
51932: LD_INT 2
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: LD_INT 2
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: LD_INT 2
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 1
51961: NEG
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 2
51972: NEG
51973: PUSH
51974: LD_INT 0
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 2
51983: NEG
51984: PUSH
51985: LD_INT 1
51987: NEG
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 2
51995: NEG
51996: PUSH
51997: LD_INT 2
51999: NEG
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 2
52007: NEG
52008: PUSH
52009: LD_INT 3
52011: NEG
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 1
52019: NEG
52020: PUSH
52021: LD_INT 3
52023: NEG
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 3
52031: NEG
52032: PUSH
52033: LD_INT 1
52035: NEG
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 3
52043: NEG
52044: PUSH
52045: LD_INT 2
52047: NEG
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52078: LD_ADDR_VAR 0 29
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 1
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: LD_INT 1
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 1
52136: NEG
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: NEG
52148: PUSH
52149: LD_INT 1
52151: NEG
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: LD_INT 2
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 0
52171: PUSH
52172: LD_INT 2
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 1
52182: PUSH
52183: LD_INT 1
52185: NEG
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 2
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 2
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: LD_INT 2
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 0
52223: PUSH
52224: LD_INT 2
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 1
52233: NEG
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 2
52244: NEG
52245: PUSH
52246: LD_INT 1
52248: NEG
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 2
52256: NEG
52257: PUSH
52258: LD_INT 2
52260: NEG
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 2
52268: NEG
52269: PUSH
52270: LD_INT 3
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 2
52280: PUSH
52281: LD_INT 1
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 3
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 1
52301: PUSH
52302: LD_INT 3
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 1
52311: NEG
52312: PUSH
52313: LD_INT 2
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 3
52322: NEG
52323: PUSH
52324: LD_INT 2
52326: NEG
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52357: LD_ADDR_VAR 0 30
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: LD_INT 1
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: LD_INT 0
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 0
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: NEG
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 1
52438: NEG
52439: PUSH
52440: LD_INT 2
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: LD_INT 2
52453: NEG
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 1
52461: PUSH
52462: LD_INT 1
52464: NEG
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 2
52472: PUSH
52473: LD_INT 0
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 2
52482: PUSH
52483: LD_INT 1
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 2
52492: PUSH
52493: LD_INT 2
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: LD_INT 2
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: NEG
52513: PUSH
52514: LD_INT 1
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 2
52523: NEG
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 2
52534: NEG
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 1
52546: NEG
52547: PUSH
52548: LD_INT 3
52550: NEG
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 1
52558: PUSH
52559: LD_INT 2
52561: NEG
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 3
52569: PUSH
52570: LD_INT 2
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 2
52579: PUSH
52580: LD_INT 3
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 2
52589: NEG
52590: PUSH
52591: LD_INT 1
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 3
52600: NEG
52601: PUSH
52602: LD_INT 1
52604: NEG
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52635: LD_ADDR_VAR 0 31
52639: PUSH
52640: LD_INT 0
52642: PUSH
52643: LD_INT 0
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 0
52652: PUSH
52653: LD_INT 1
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 1
52663: PUSH
52664: LD_INT 0
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 1
52673: PUSH
52674: LD_INT 1
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 0
52683: PUSH
52684: LD_INT 1
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: LD_INT 0
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 1
52704: NEG
52705: PUSH
52706: LD_INT 1
52708: NEG
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 1
52716: NEG
52717: PUSH
52718: LD_INT 2
52720: NEG
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 1
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 2
52739: PUSH
52740: LD_INT 0
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 2
52749: PUSH
52750: LD_INT 1
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 2
52759: PUSH
52760: LD_INT 2
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 1
52769: PUSH
52770: LD_INT 2
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 0
52779: PUSH
52780: LD_INT 2
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 1
52789: NEG
52790: PUSH
52791: LD_INT 1
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 2
52800: NEG
52801: PUSH
52802: LD_INT 1
52804: NEG
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 2
52812: NEG
52813: PUSH
52814: LD_INT 2
52816: NEG
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 2
52824: NEG
52825: PUSH
52826: LD_INT 3
52828: NEG
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 2
52836: PUSH
52837: LD_INT 1
52839: NEG
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 3
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 1
52857: PUSH
52858: LD_INT 3
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 1
52867: NEG
52868: PUSH
52869: LD_INT 2
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 3
52878: NEG
52879: PUSH
52880: LD_INT 2
52882: NEG
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52913: LD_ADDR_VAR 0 32
52917: PUSH
52918: LD_INT 0
52920: PUSH
52921: LD_INT 0
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: LD_INT 1
52933: NEG
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 1
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 1
52951: PUSH
52952: LD_INT 1
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 0
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 1
52971: NEG
52972: PUSH
52973: LD_INT 0
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 1
52982: NEG
52983: PUSH
52984: LD_INT 1
52986: NEG
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 1
52994: NEG
52995: PUSH
52996: LD_INT 2
52998: NEG
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 0
53006: PUSH
53007: LD_INT 2
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: LD_INT 1
53020: NEG
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 2
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 2
53038: PUSH
53039: LD_INT 2
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 1
53048: PUSH
53049: LD_INT 2
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 0
53058: PUSH
53059: LD_INT 2
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 1
53068: NEG
53069: PUSH
53070: LD_INT 1
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 2
53079: NEG
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 2
53090: NEG
53091: PUSH
53092: LD_INT 1
53094: NEG
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: LD_INT 3
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: PUSH
53115: LD_INT 2
53117: NEG
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 3
53125: PUSH
53126: LD_INT 2
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 2
53135: PUSH
53136: LD_INT 3
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 2
53145: NEG
53146: PUSH
53147: LD_INT 1
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 3
53156: NEG
53157: PUSH
53158: LD_INT 1
53160: NEG
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53191: LD_ADDR_VAR 0 33
53195: PUSH
53196: LD_INT 0
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 1
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 1
53249: NEG
53250: PUSH
53251: LD_INT 0
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 1
53260: NEG
53261: PUSH
53262: LD_INT 1
53264: NEG
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 1
53272: NEG
53273: PUSH
53274: LD_INT 2
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 1
53284: PUSH
53285: LD_INT 1
53287: NEG
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 2
53295: PUSH
53296: LD_INT 0
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 2
53305: PUSH
53306: LD_INT 1
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: PUSH
53316: LD_INT 2
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: LD_INT 2
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 1
53335: NEG
53336: PUSH
53337: LD_INT 1
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 2
53346: NEG
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 2
53357: NEG
53358: PUSH
53359: LD_INT 1
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 2
53369: NEG
53370: PUSH
53371: LD_INT 2
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 2
53381: NEG
53382: PUSH
53383: LD_INT 3
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 2
53393: PUSH
53394: LD_INT 1
53396: NEG
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 3
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 1
53414: PUSH
53415: LD_INT 3
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 1
53424: NEG
53425: PUSH
53426: LD_INT 2
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 3
53435: NEG
53436: PUSH
53437: LD_INT 2
53439: NEG
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53470: LD_ADDR_VAR 0 34
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: LD_INT 0
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: LD_INT 1
53490: NEG
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 1
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 1
53539: NEG
53540: PUSH
53541: LD_INT 1
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 1
53551: NEG
53552: PUSH
53553: LD_INT 2
53555: NEG
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: LD_INT 2
53566: NEG
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: LD_INT 1
53577: NEG
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 2
53585: PUSH
53586: LD_INT 1
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 2
53595: PUSH
53596: LD_INT 2
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: LD_INT 2
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 1
53615: NEG
53616: PUSH
53617: LD_INT 1
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 2
53626: NEG
53627: PUSH
53628: LD_INT 0
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 2
53637: NEG
53638: PUSH
53639: LD_INT 1
53641: NEG
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 2
53649: NEG
53650: PUSH
53651: LD_INT 2
53653: NEG
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 1
53661: NEG
53662: PUSH
53663: LD_INT 3
53665: NEG
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 1
53673: PUSH
53674: LD_INT 2
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 3
53684: PUSH
53685: LD_INT 2
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 2
53694: PUSH
53695: LD_INT 3
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 2
53704: NEG
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 3
53715: NEG
53716: PUSH
53717: LD_INT 1
53719: NEG
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53750: LD_ADDR_VAR 0 35
53754: PUSH
53755: LD_INT 0
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 0
53767: PUSH
53768: LD_INT 1
53770: NEG
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 1
53778: PUSH
53779: LD_INT 0
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 1
53788: PUSH
53789: LD_INT 1
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: LD_INT 1
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 1
53819: NEG
53820: PUSH
53821: LD_INT 1
53823: NEG
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 2
53831: PUSH
53832: LD_INT 1
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 2
53841: NEG
53842: PUSH
53843: LD_INT 1
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53862: LD_ADDR_VAR 0 36
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: LD_INT 1
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 1
53890: PUSH
53891: LD_INT 0
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 1
53900: PUSH
53901: LD_INT 1
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 1
53920: NEG
53921: PUSH
53922: LD_INT 0
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 1
53931: NEG
53932: PUSH
53933: LD_INT 1
53935: NEG
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 1
53943: NEG
53944: PUSH
53945: LD_INT 2
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 1
53955: PUSH
53956: LD_INT 2
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53974: LD_ADDR_VAR 0 37
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: LD_INT 1
53994: NEG
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 1
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: LD_INT 1
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: LD_INT 0
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 1
54043: NEG
54044: PUSH
54045: LD_INT 1
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: PUSH
54056: LD_INT 1
54058: NEG
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: LD_INT 1
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54086: LD_ADDR_VAR 0 38
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: LD_INT 0
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 0
54103: PUSH
54104: LD_INT 1
54106: NEG
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 1
54114: PUSH
54115: LD_INT 0
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 1
54124: PUSH
54125: LD_INT 1
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: LD_INT 1
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 1
54144: NEG
54145: PUSH
54146: LD_INT 0
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 1
54155: NEG
54156: PUSH
54157: LD_INT 1
54159: NEG
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 2
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 2
54177: NEG
54178: PUSH
54179: LD_INT 1
54181: NEG
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54198: LD_ADDR_VAR 0 39
54202: PUSH
54203: LD_INT 0
54205: PUSH
54206: LD_INT 0
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: LD_INT 1
54218: NEG
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 1
54226: PUSH
54227: LD_INT 0
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: LD_INT 1
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: LD_INT 1
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 1
54256: NEG
54257: PUSH
54258: LD_INT 0
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 1
54267: NEG
54268: PUSH
54269: LD_INT 1
54271: NEG
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 1
54279: NEG
54280: PUSH
54281: LD_INT 2
54283: NEG
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: LD_INT 2
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54310: LD_ADDR_VAR 0 40
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 1
54338: PUSH
54339: LD_INT 0
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 1
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 1
54368: NEG
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 1
54379: NEG
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 1
54391: PUSH
54392: LD_INT 1
54394: NEG
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 1
54402: NEG
54403: PUSH
54404: LD_INT 1
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54422: LD_ADDR_VAR 0 41
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 1
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: LD_INT 1
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: LD_INT 1
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: LD_INT 1
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 1
54503: NEG
54504: PUSH
54505: LD_INT 2
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: PUSH
54516: LD_INT 1
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 2
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 2
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 2
54546: PUSH
54547: LD_INT 2
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: LD_INT 2
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 1
54566: NEG
54567: PUSH
54568: LD_INT 1
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 2
54577: NEG
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 2
54588: NEG
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 2
54600: NEG
54601: PUSH
54602: LD_INT 2
54604: NEG
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 2
54612: NEG
54613: PUSH
54614: LD_INT 3
54616: NEG
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 2
54624: PUSH
54625: LD_INT 1
54627: NEG
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 3
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 3
54645: PUSH
54646: LD_INT 1
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 3
54655: PUSH
54656: LD_INT 2
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 3
54665: PUSH
54666: LD_INT 3
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 2
54675: PUSH
54676: LD_INT 3
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 2
54685: NEG
54686: PUSH
54687: LD_INT 1
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 3
54696: NEG
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 3
54707: NEG
54708: PUSH
54709: LD_INT 1
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 3
54719: NEG
54720: PUSH
54721: LD_INT 2
54723: NEG
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 3
54731: NEG
54732: PUSH
54733: LD_INT 3
54735: NEG
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54772: LD_ADDR_VAR 0 42
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 0
54789: PUSH
54790: LD_INT 1
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 1
54800: PUSH
54801: LD_INT 0
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 1
54810: PUSH
54811: LD_INT 1
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 0
54820: PUSH
54821: LD_INT 1
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 1
54830: NEG
54831: PUSH
54832: LD_INT 0
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 1
54841: NEG
54842: PUSH
54843: LD_INT 1
54845: NEG
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 1
54853: NEG
54854: PUSH
54855: LD_INT 2
54857: NEG
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: LD_INT 2
54868: NEG
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 1
54876: PUSH
54877: LD_INT 1
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 2
54887: PUSH
54888: LD_INT 1
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 2
54897: PUSH
54898: LD_INT 2
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 1
54907: PUSH
54908: LD_INT 2
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: LD_INT 2
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 1
54927: NEG
54928: PUSH
54929: LD_INT 1
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 2
54938: NEG
54939: PUSH
54940: LD_INT 1
54942: NEG
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 2
54950: NEG
54951: PUSH
54952: LD_INT 2
54954: NEG
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 2
54962: NEG
54963: PUSH
54964: LD_INT 3
54966: NEG
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 1
54974: NEG
54975: PUSH
54976: LD_INT 3
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: LD_INT 3
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 1
54997: PUSH
54998: LD_INT 2
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 3
55008: PUSH
55009: LD_INT 2
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 3
55018: PUSH
55019: LD_INT 3
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 2
55028: PUSH
55029: LD_INT 3
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 1
55038: PUSH
55039: LD_INT 3
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: LD_INT 3
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 1
55058: NEG
55059: PUSH
55060: LD_INT 2
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 3
55069: NEG
55070: PUSH
55071: LD_INT 2
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 3
55081: NEG
55082: PUSH
55083: LD_INT 3
55085: NEG
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55122: LD_ADDR_VAR 0 43
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: LD_INT 0
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: LD_INT 1
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 1
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 1
55160: PUSH
55161: LD_INT 1
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: LD_INT 1
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 1
55180: NEG
55181: PUSH
55182: LD_INT 0
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 1
55191: NEG
55192: PUSH
55193: LD_INT 1
55195: NEG
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 1
55203: NEG
55204: PUSH
55205: LD_INT 2
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 0
55215: PUSH
55216: LD_INT 2
55218: NEG
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 1
55226: PUSH
55227: LD_INT 1
55229: NEG
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 2
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 2
55247: PUSH
55248: LD_INT 1
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 1
55257: PUSH
55258: LD_INT 2
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 0
55267: PUSH
55268: LD_INT 2
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: LD_INT 1
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 2
55288: NEG
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 2
55299: NEG
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: PUSH
55313: LD_INT 3
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: LD_INT 3
55326: NEG
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 1
55334: PUSH
55335: LD_INT 2
55337: NEG
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 2
55345: PUSH
55346: LD_INT 1
55348: NEG
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 3
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 3
55366: PUSH
55367: LD_INT 1
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 1
55376: PUSH
55377: LD_INT 3
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: LD_INT 3
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 1
55396: NEG
55397: PUSH
55398: LD_INT 2
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 2
55407: NEG
55408: PUSH
55409: LD_INT 1
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 3
55418: NEG
55419: PUSH
55420: LD_INT 0
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 3
55429: NEG
55430: PUSH
55431: LD_INT 1
55433: NEG
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55470: LD_ADDR_VAR 0 44
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 0
55487: PUSH
55488: LD_INT 1
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 1
55498: PUSH
55499: LD_INT 0
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 1
55508: PUSH
55509: LD_INT 1
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 0
55518: PUSH
55519: LD_INT 1
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 1
55528: NEG
55529: PUSH
55530: LD_INT 0
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 1
55539: NEG
55540: PUSH
55541: LD_INT 1
55543: NEG
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: PUSH
55553: LD_INT 2
55555: NEG
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 1
55563: PUSH
55564: LD_INT 1
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 2
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 2
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 2
55594: PUSH
55595: LD_INT 2
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: LD_INT 2
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 1
55614: NEG
55615: PUSH
55616: LD_INT 1
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 2
55625: NEG
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 2
55636: NEG
55637: PUSH
55638: LD_INT 1
55640: NEG
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 2
55648: NEG
55649: PUSH
55650: LD_INT 2
55652: NEG
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 2
55660: NEG
55661: PUSH
55662: LD_INT 3
55664: NEG
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 2
55672: PUSH
55673: LD_INT 1
55675: NEG
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 3
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 3
55693: PUSH
55694: LD_INT 1
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 3
55703: PUSH
55704: LD_INT 2
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 3
55713: PUSH
55714: LD_INT 3
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 2
55723: PUSH
55724: LD_INT 3
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 2
55733: NEG
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 3
55744: NEG
55745: PUSH
55746: LD_INT 0
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 3
55755: NEG
55756: PUSH
55757: LD_INT 1
55759: NEG
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 3
55767: NEG
55768: PUSH
55769: LD_INT 2
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 3
55779: NEG
55780: PUSH
55781: LD_INT 3
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55820: LD_ADDR_VAR 0 45
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: LD_INT 0
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: LD_INT 1
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 1
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 1
55858: PUSH
55859: LD_INT 1
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: LD_INT 1
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: LD_INT 0
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 1
55889: NEG
55890: PUSH
55891: LD_INT 1
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: LD_INT 2
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: LD_INT 2
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: LD_INT 1
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 2
55935: PUSH
55936: LD_INT 1
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 2
55945: PUSH
55946: LD_INT 2
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: LD_INT 2
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: LD_INT 2
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 1
55975: NEG
55976: PUSH
55977: LD_INT 1
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 2
55986: NEG
55987: PUSH
55988: LD_INT 1
55990: NEG
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 2
55998: NEG
55999: PUSH
56000: LD_INT 2
56002: NEG
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 2
56010: NEG
56011: PUSH
56012: LD_INT 3
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 1
56022: NEG
56023: PUSH
56024: LD_INT 3
56026: NEG
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 0
56034: PUSH
56035: LD_INT 3
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 1
56045: PUSH
56046: LD_INT 2
56048: NEG
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 3
56056: PUSH
56057: LD_INT 2
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 3
56066: PUSH
56067: LD_INT 3
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 2
56076: PUSH
56077: LD_INT 3
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 1
56086: PUSH
56087: LD_INT 3
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 0
56096: PUSH
56097: LD_INT 3
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 1
56106: NEG
56107: PUSH
56108: LD_INT 2
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 3
56117: NEG
56118: PUSH
56119: LD_INT 2
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 3
56129: NEG
56130: PUSH
56131: LD_INT 3
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56170: LD_ADDR_VAR 0 46
56174: PUSH
56175: LD_INT 0
56177: PUSH
56178: LD_INT 0
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 0
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 1
56198: PUSH
56199: LD_INT 0
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 1
56208: PUSH
56209: LD_INT 1
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: LD_INT 1
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 1
56228: NEG
56229: PUSH
56230: LD_INT 0
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 1
56239: NEG
56240: PUSH
56241: LD_INT 1
56243: NEG
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 1
56251: NEG
56252: PUSH
56253: LD_INT 2
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: LD_INT 2
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 1
56274: PUSH
56275: LD_INT 1
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 2
56285: PUSH
56286: LD_INT 0
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 2
56295: PUSH
56296: LD_INT 1
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 1
56305: PUSH
56306: LD_INT 2
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: LD_INT 2
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: LD_INT 1
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 2
56336: NEG
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 2
56347: NEG
56348: PUSH
56349: LD_INT 1
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 1
56359: NEG
56360: PUSH
56361: LD_INT 3
56363: NEG
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: LD_INT 3
56374: NEG
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 1
56382: PUSH
56383: LD_INT 2
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 2
56393: PUSH
56394: LD_INT 1
56396: NEG
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 3
56404: PUSH
56405: LD_INT 0
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 3
56414: PUSH
56415: LD_INT 1
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 1
56424: PUSH
56425: LD_INT 3
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: LD_INT 3
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 1
56444: NEG
56445: PUSH
56446: LD_INT 2
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 2
56455: NEG
56456: PUSH
56457: LD_INT 1
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 3
56466: NEG
56467: PUSH
56468: LD_INT 0
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 3
56477: NEG
56478: PUSH
56479: LD_INT 1
56481: NEG
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56518: LD_ADDR_VAR 0 47
56522: PUSH
56523: LD_INT 0
56525: PUSH
56526: LD_INT 0
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 0
56535: PUSH
56536: LD_INT 1
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 1
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 1
56556: PUSH
56557: LD_INT 1
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 0
56566: PUSH
56567: LD_INT 1
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 1
56576: NEG
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 1
56587: NEG
56588: PUSH
56589: LD_INT 1
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 1
56599: NEG
56600: PUSH
56601: LD_INT 2
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 0
56611: PUSH
56612: LD_INT 2
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 1
56622: PUSH
56623: LD_INT 1
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 2
56633: NEG
56634: PUSH
56635: LD_INT 1
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 2
56645: NEG
56646: PUSH
56647: LD_INT 2
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56669: LD_ADDR_VAR 0 48
56673: PUSH
56674: LD_INT 0
56676: PUSH
56677: LD_INT 0
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 0
56686: PUSH
56687: LD_INT 1
56689: NEG
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 1
56697: PUSH
56698: LD_INT 0
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 1
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: LD_INT 1
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 1
56727: NEG
56728: PUSH
56729: LD_INT 0
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 1
56738: NEG
56739: PUSH
56740: LD_INT 1
56742: NEG
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 1
56750: NEG
56751: PUSH
56752: LD_INT 2
56754: NEG
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: LD_INT 2
56765: NEG
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 1
56773: PUSH
56774: LD_INT 1
56776: NEG
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 2
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 2
56794: PUSH
56795: LD_INT 1
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56816: LD_ADDR_VAR 0 49
56820: PUSH
56821: LD_INT 0
56823: PUSH
56824: LD_INT 0
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: LD_INT 1
56836: NEG
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 1
56844: PUSH
56845: LD_INT 0
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 1
56854: PUSH
56855: LD_INT 1
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 0
56864: PUSH
56865: LD_INT 1
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 1
56874: NEG
56875: PUSH
56876: LD_INT 0
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 1
56885: NEG
56886: PUSH
56887: LD_INT 1
56889: NEG
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: LD_INT 1
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 2
56908: PUSH
56909: LD_INT 0
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 2
56918: PUSH
56919: LD_INT 1
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 2
56928: PUSH
56929: LD_INT 2
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 1
56938: PUSH
56939: LD_INT 2
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56960: LD_ADDR_VAR 0 50
56964: PUSH
56965: LD_INT 0
56967: PUSH
56968: LD_INT 0
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 0
56977: PUSH
56978: LD_INT 1
56980: NEG
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 1
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 1
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 0
57008: PUSH
57009: LD_INT 1
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 1
57018: NEG
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 1
57029: NEG
57030: PUSH
57031: LD_INT 1
57033: NEG
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 2
57041: PUSH
57042: LD_INT 1
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 2
57051: PUSH
57052: LD_INT 2
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 1
57061: PUSH
57062: LD_INT 2
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 0
57071: PUSH
57072: LD_INT 2
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 1
57081: NEG
57082: PUSH
57083: LD_INT 1
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57104: LD_ADDR_VAR 0 51
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 0
57121: PUSH
57122: LD_INT 1
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: PUSH
57133: LD_INT 0
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 1
57142: PUSH
57143: LD_INT 1
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 0
57152: PUSH
57153: LD_INT 1
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 1
57162: NEG
57163: PUSH
57164: LD_INT 0
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 1
57173: NEG
57174: PUSH
57175: LD_INT 1
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 1
57185: PUSH
57186: LD_INT 2
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 0
57195: PUSH
57196: LD_INT 2
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 1
57205: NEG
57206: PUSH
57207: LD_INT 1
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 2
57216: NEG
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 2
57227: NEG
57228: PUSH
57229: LD_INT 1
57231: NEG
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57251: LD_ADDR_VAR 0 52
57255: PUSH
57256: LD_INT 0
57258: PUSH
57259: LD_INT 0
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: LD_INT 1
57271: NEG
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 1
57279: PUSH
57280: LD_INT 0
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 1
57289: PUSH
57290: LD_INT 1
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 0
57299: PUSH
57300: LD_INT 1
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 1
57309: NEG
57310: PUSH
57311: LD_INT 0
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 1
57320: NEG
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 1
57332: NEG
57333: PUSH
57334: LD_INT 2
57336: NEG
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 1
57344: NEG
57345: PUSH
57346: LD_INT 1
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 2
57355: NEG
57356: PUSH
57357: LD_INT 0
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 2
57366: NEG
57367: PUSH
57368: LD_INT 1
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 2
57378: NEG
57379: PUSH
57380: LD_INT 2
57382: NEG
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57402: LD_ADDR_VAR 0 53
57406: PUSH
57407: LD_INT 0
57409: PUSH
57410: LD_INT 0
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: LD_INT 1
57422: NEG
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 1
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 1
57440: PUSH
57441: LD_INT 1
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: LD_INT 1
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 1
57460: NEG
57461: PUSH
57462: LD_INT 0
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: LD_INT 1
57475: NEG
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 1
57483: NEG
57484: PUSH
57485: LD_INT 2
57487: NEG
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 0
57495: PUSH
57496: LD_INT 2
57498: NEG
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 1
57506: PUSH
57507: LD_INT 1
57509: NEG
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 2
57517: PUSH
57518: LD_INT 0
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 2
57527: PUSH
57528: LD_INT 1
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 2
57537: PUSH
57538: LD_INT 2
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 1
57547: PUSH
57548: LD_INT 2
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 0
57557: PUSH
57558: LD_INT 2
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 1
57567: NEG
57568: PUSH
57569: LD_INT 1
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 2
57578: NEG
57579: PUSH
57580: LD_INT 0
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 2
57589: NEG
57590: PUSH
57591: LD_INT 1
57593: NEG
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 2
57601: NEG
57602: PUSH
57603: LD_INT 2
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57632: LD_ADDR_VAR 0 54
57636: PUSH
57637: LD_INT 0
57639: PUSH
57640: LD_INT 0
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 0
57649: PUSH
57650: LD_INT 1
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 1
57660: PUSH
57661: LD_INT 0
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 1
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 0
57680: PUSH
57681: LD_INT 1
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 1
57690: NEG
57691: PUSH
57692: LD_INT 0
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 1
57701: NEG
57702: PUSH
57703: LD_INT 1
57705: NEG
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: LD_INT 2
57717: NEG
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: LD_INT 2
57728: NEG
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 1
57736: PUSH
57737: LD_INT 1
57739: NEG
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 2
57747: PUSH
57748: LD_INT 0
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 2
57757: PUSH
57758: LD_INT 1
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 2
57767: PUSH
57768: LD_INT 2
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 1
57777: PUSH
57778: LD_INT 2
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 0
57787: PUSH
57788: LD_INT 2
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 1
57797: NEG
57798: PUSH
57799: LD_INT 1
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 2
57808: NEG
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 2
57819: NEG
57820: PUSH
57821: LD_INT 1
57823: NEG
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 2
57831: NEG
57832: PUSH
57833: LD_INT 2
57835: NEG
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57862: LD_ADDR_VAR 0 55
57866: PUSH
57867: LD_INT 0
57869: PUSH
57870: LD_INT 0
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 0
57879: PUSH
57880: LD_INT 1
57882: NEG
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 1
57890: PUSH
57891: LD_INT 0
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 1
57900: PUSH
57901: LD_INT 1
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 0
57910: PUSH
57911: LD_INT 1
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 1
57920: NEG
57921: PUSH
57922: LD_INT 0
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 1
57931: NEG
57932: PUSH
57933: LD_INT 1
57935: NEG
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 1
57943: NEG
57944: PUSH
57945: LD_INT 2
57947: NEG
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 0
57955: PUSH
57956: LD_INT 2
57958: NEG
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 1
57966: PUSH
57967: LD_INT 1
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 2
57977: PUSH
57978: LD_INT 0
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 2
57987: PUSH
57988: LD_INT 1
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 2
57997: PUSH
57998: LD_INT 2
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 1
58007: PUSH
58008: LD_INT 2
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 0
58017: PUSH
58018: LD_INT 2
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 1
58027: NEG
58028: PUSH
58029: LD_INT 1
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 2
58038: NEG
58039: PUSH
58040: LD_INT 0
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 2
58049: NEG
58050: PUSH
58051: LD_INT 1
58053: NEG
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 2
58061: NEG
58062: PUSH
58063: LD_INT 2
58065: NEG
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58092: LD_ADDR_VAR 0 56
58096: PUSH
58097: LD_INT 0
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 0
58109: PUSH
58110: LD_INT 1
58112: NEG
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 1
58120: PUSH
58121: LD_INT 0
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 1
58130: PUSH
58131: LD_INT 1
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 0
58140: PUSH
58141: LD_INT 1
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 1
58150: NEG
58151: PUSH
58152: LD_INT 0
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 1
58161: NEG
58162: PUSH
58163: LD_INT 1
58165: NEG
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 1
58173: NEG
58174: PUSH
58175: LD_INT 2
58177: NEG
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 0
58185: PUSH
58186: LD_INT 2
58188: NEG
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 1
58196: PUSH
58197: LD_INT 1
58199: NEG
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 2
58207: PUSH
58208: LD_INT 0
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 2
58217: PUSH
58218: LD_INT 1
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 2
58227: PUSH
58228: LD_INT 2
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 1
58237: PUSH
58238: LD_INT 2
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 0
58247: PUSH
58248: LD_INT 2
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 1
58257: NEG
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 2
58268: NEG
58269: PUSH
58270: LD_INT 0
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 2
58279: NEG
58280: PUSH
58281: LD_INT 1
58283: NEG
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 2
58291: NEG
58292: PUSH
58293: LD_INT 2
58295: NEG
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58322: LD_ADDR_VAR 0 57
58326: PUSH
58327: LD_INT 0
58329: PUSH
58330: LD_INT 0
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 0
58339: PUSH
58340: LD_INT 1
58342: NEG
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 1
58350: PUSH
58351: LD_INT 0
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 1
58360: PUSH
58361: LD_INT 1
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: LD_INT 1
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 1
58380: NEG
58381: PUSH
58382: LD_INT 0
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 1
58391: NEG
58392: PUSH
58393: LD_INT 1
58395: NEG
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 1
58403: NEG
58404: PUSH
58405: LD_INT 2
58407: NEG
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 0
58415: PUSH
58416: LD_INT 2
58418: NEG
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 1
58426: PUSH
58427: LD_INT 1
58429: NEG
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 2
58437: PUSH
58438: LD_INT 0
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 2
58447: PUSH
58448: LD_INT 1
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 2
58457: PUSH
58458: LD_INT 2
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 1
58467: PUSH
58468: LD_INT 2
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 0
58477: PUSH
58478: LD_INT 2
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 1
58487: NEG
58488: PUSH
58489: LD_INT 1
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 2
58498: NEG
58499: PUSH
58500: LD_INT 0
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 2
58509: NEG
58510: PUSH
58511: LD_INT 1
58513: NEG
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 2
58521: NEG
58522: PUSH
58523: LD_INT 2
58525: NEG
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58552: LD_ADDR_VAR 0 58
58556: PUSH
58557: LD_INT 0
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 0
58569: PUSH
58570: LD_INT 1
58572: NEG
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 1
58580: PUSH
58581: LD_INT 0
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 1
58590: PUSH
58591: LD_INT 1
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: LD_INT 1
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 1
58610: NEG
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 1
58621: NEG
58622: PUSH
58623: LD_INT 1
58625: NEG
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 1
58633: NEG
58634: PUSH
58635: LD_INT 2
58637: NEG
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 0
58645: PUSH
58646: LD_INT 2
58648: NEG
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 1
58656: PUSH
58657: LD_INT 1
58659: NEG
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 2
58667: PUSH
58668: LD_INT 0
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 2
58677: PUSH
58678: LD_INT 1
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 2
58687: PUSH
58688: LD_INT 2
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: LD_INT 2
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 0
58707: PUSH
58708: LD_INT 2
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 1
58717: NEG
58718: PUSH
58719: LD_INT 1
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 2
58728: NEG
58729: PUSH
58730: LD_INT 0
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 2
58739: NEG
58740: PUSH
58741: LD_INT 1
58743: NEG
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 2
58751: NEG
58752: PUSH
58753: LD_INT 2
58755: NEG
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58782: LD_ADDR_VAR 0 59
58786: PUSH
58787: LD_INT 0
58789: PUSH
58790: LD_INT 0
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 0
58799: PUSH
58800: LD_INT 1
58802: NEG
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 1
58810: PUSH
58811: LD_INT 0
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 1
58820: PUSH
58821: LD_INT 1
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: LD_INT 1
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 1
58840: NEG
58841: PUSH
58842: LD_INT 0
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 1
58851: NEG
58852: PUSH
58853: LD_INT 1
58855: NEG
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58870: LD_ADDR_VAR 0 60
58874: PUSH
58875: LD_INT 0
58877: PUSH
58878: LD_INT 0
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 0
58887: PUSH
58888: LD_INT 1
58890: NEG
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 1
58898: PUSH
58899: LD_INT 0
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 1
58908: PUSH
58909: LD_INT 1
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 0
58918: PUSH
58919: LD_INT 1
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 1
58928: NEG
58929: PUSH
58930: LD_INT 0
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 1
58939: NEG
58940: PUSH
58941: LD_INT 1
58943: NEG
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58958: LD_ADDR_VAR 0 61
58962: PUSH
58963: LD_INT 0
58965: PUSH
58966: LD_INT 0
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 0
58975: PUSH
58976: LD_INT 1
58978: NEG
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 1
58986: PUSH
58987: LD_INT 0
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 1
58996: PUSH
58997: LD_INT 1
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 0
59006: PUSH
59007: LD_INT 1
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 1
59016: NEG
59017: PUSH
59018: LD_INT 0
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 1
59027: NEG
59028: PUSH
59029: LD_INT 1
59031: NEG
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59046: LD_ADDR_VAR 0 62
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: LD_INT 0
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 0
59063: PUSH
59064: LD_INT 1
59066: NEG
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 1
59074: PUSH
59075: LD_INT 0
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 1
59084: PUSH
59085: LD_INT 1
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 0
59094: PUSH
59095: LD_INT 1
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 1
59104: NEG
59105: PUSH
59106: LD_INT 0
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 1
59115: NEG
59116: PUSH
59117: LD_INT 1
59119: NEG
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59134: LD_ADDR_VAR 0 63
59138: PUSH
59139: LD_INT 0
59141: PUSH
59142: LD_INT 0
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 0
59151: PUSH
59152: LD_INT 1
59154: NEG
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 1
59162: PUSH
59163: LD_INT 0
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 1
59172: PUSH
59173: LD_INT 1
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: LD_INT 1
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 1
59192: NEG
59193: PUSH
59194: LD_INT 0
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 1
59203: NEG
59204: PUSH
59205: LD_INT 1
59207: NEG
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59222: LD_ADDR_VAR 0 64
59226: PUSH
59227: LD_INT 0
59229: PUSH
59230: LD_INT 0
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 0
59239: PUSH
59240: LD_INT 1
59242: NEG
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 1
59250: PUSH
59251: LD_INT 0
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 1
59260: PUSH
59261: LD_INT 1
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 0
59270: PUSH
59271: LD_INT 1
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 1
59280: NEG
59281: PUSH
59282: LD_INT 0
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 1
59291: NEG
59292: PUSH
59293: LD_INT 1
59295: NEG
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: ST_TO_ADDR
// end ; 1 :
59310: GO 65207
59312: LD_INT 1
59314: DOUBLE
59315: EQUAL
59316: IFTRUE 59320
59318: GO 61943
59320: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59321: LD_ADDR_VAR 0 11
59325: PUSH
59326: LD_INT 1
59328: NEG
59329: PUSH
59330: LD_INT 3
59332: NEG
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 0
59340: PUSH
59341: LD_INT 3
59343: NEG
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 1
59351: PUSH
59352: LD_INT 2
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: LIST
59364: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59365: LD_ADDR_VAR 0 12
59369: PUSH
59370: LD_INT 2
59372: PUSH
59373: LD_INT 1
59375: NEG
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 3
59383: PUSH
59384: LD_INT 0
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 3
59393: PUSH
59394: LD_INT 1
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: LIST
59405: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59406: LD_ADDR_VAR 0 13
59410: PUSH
59411: LD_INT 3
59413: PUSH
59414: LD_INT 2
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 3
59423: PUSH
59424: LD_INT 3
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 2
59433: PUSH
59434: LD_INT 3
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: LIST
59445: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59446: LD_ADDR_VAR 0 14
59450: PUSH
59451: LD_INT 1
59453: PUSH
59454: LD_INT 3
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 0
59463: PUSH
59464: LD_INT 3
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 1
59473: NEG
59474: PUSH
59475: LD_INT 2
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: LIST
59486: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59487: LD_ADDR_VAR 0 15
59491: PUSH
59492: LD_INT 2
59494: NEG
59495: PUSH
59496: LD_INT 1
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 3
59505: NEG
59506: PUSH
59507: LD_INT 0
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 3
59516: NEG
59517: PUSH
59518: LD_INT 1
59520: NEG
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: LIST
59530: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59531: LD_ADDR_VAR 0 16
59535: PUSH
59536: LD_INT 2
59538: NEG
59539: PUSH
59540: LD_INT 3
59542: NEG
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 3
59550: NEG
59551: PUSH
59552: LD_INT 2
59554: NEG
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 3
59562: NEG
59563: PUSH
59564: LD_INT 3
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: LIST
59576: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59577: LD_ADDR_VAR 0 17
59581: PUSH
59582: LD_INT 1
59584: NEG
59585: PUSH
59586: LD_INT 3
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 0
59596: PUSH
59597: LD_INT 3
59599: NEG
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 1
59607: PUSH
59608: LD_INT 2
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: LIST
59620: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59621: LD_ADDR_VAR 0 18
59625: PUSH
59626: LD_INT 2
59628: PUSH
59629: LD_INT 1
59631: NEG
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 3
59639: PUSH
59640: LD_INT 0
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 3
59649: PUSH
59650: LD_INT 1
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: LIST
59661: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59662: LD_ADDR_VAR 0 19
59666: PUSH
59667: LD_INT 3
59669: PUSH
59670: LD_INT 2
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 3
59679: PUSH
59680: LD_INT 3
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 2
59689: PUSH
59690: LD_INT 3
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: LIST
59701: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59702: LD_ADDR_VAR 0 20
59706: PUSH
59707: LD_INT 1
59709: PUSH
59710: LD_INT 3
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 0
59719: PUSH
59720: LD_INT 3
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 1
59729: NEG
59730: PUSH
59731: LD_INT 2
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: LIST
59742: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59743: LD_ADDR_VAR 0 21
59747: PUSH
59748: LD_INT 2
59750: NEG
59751: PUSH
59752: LD_INT 1
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 3
59761: NEG
59762: PUSH
59763: LD_INT 0
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 3
59772: NEG
59773: PUSH
59774: LD_INT 1
59776: NEG
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: LIST
59786: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59787: LD_ADDR_VAR 0 22
59791: PUSH
59792: LD_INT 2
59794: NEG
59795: PUSH
59796: LD_INT 3
59798: NEG
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 3
59806: NEG
59807: PUSH
59808: LD_INT 2
59810: NEG
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 3
59818: NEG
59819: PUSH
59820: LD_INT 3
59822: NEG
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: LIST
59832: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59833: LD_ADDR_VAR 0 23
59837: PUSH
59838: LD_INT 0
59840: PUSH
59841: LD_INT 3
59843: NEG
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 1
59851: NEG
59852: PUSH
59853: LD_INT 4
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 1
59863: PUSH
59864: LD_INT 3
59866: NEG
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: LIST
59876: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59877: LD_ADDR_VAR 0 24
59881: PUSH
59882: LD_INT 3
59884: PUSH
59885: LD_INT 0
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 3
59894: PUSH
59895: LD_INT 1
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 4
59905: PUSH
59906: LD_INT 1
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: LIST
59917: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59918: LD_ADDR_VAR 0 25
59922: PUSH
59923: LD_INT 3
59925: PUSH
59926: LD_INT 3
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 4
59935: PUSH
59936: LD_INT 3
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 3
59945: PUSH
59946: LD_INT 4
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: LIST
59957: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59958: LD_ADDR_VAR 0 26
59962: PUSH
59963: LD_INT 0
59965: PUSH
59966: LD_INT 3
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 1
59975: PUSH
59976: LD_INT 4
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 1
59985: NEG
59986: PUSH
59987: LD_INT 3
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: LIST
59998: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59999: LD_ADDR_VAR 0 27
60003: PUSH
60004: LD_INT 3
60006: NEG
60007: PUSH
60008: LD_INT 0
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 3
60017: NEG
60018: PUSH
60019: LD_INT 1
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 4
60028: NEG
60029: PUSH
60030: LD_INT 1
60032: NEG
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: LIST
60042: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60043: LD_ADDR_VAR 0 28
60047: PUSH
60048: LD_INT 3
60050: NEG
60051: PUSH
60052: LD_INT 3
60054: NEG
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 3
60062: NEG
60063: PUSH
60064: LD_INT 4
60066: NEG
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 4
60074: NEG
60075: PUSH
60076: LD_INT 3
60078: NEG
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: LIST
60088: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60089: LD_ADDR_VAR 0 29
60093: PUSH
60094: LD_INT 1
60096: NEG
60097: PUSH
60098: LD_INT 3
60100: NEG
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 0
60108: PUSH
60109: LD_INT 3
60111: NEG
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 1
60119: PUSH
60120: LD_INT 2
60122: NEG
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 1
60130: NEG
60131: PUSH
60132: LD_INT 4
60134: NEG
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 0
60142: PUSH
60143: LD_INT 4
60145: NEG
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 1
60153: PUSH
60154: LD_INT 3
60156: NEG
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 1
60164: NEG
60165: PUSH
60166: LD_INT 5
60168: NEG
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 0
60176: PUSH
60177: LD_INT 5
60179: NEG
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 1
60187: PUSH
60188: LD_INT 4
60190: NEG
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 1
60198: NEG
60199: PUSH
60200: LD_INT 6
60202: NEG
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 0
60210: PUSH
60211: LD_INT 6
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 1
60221: PUSH
60222: LD_INT 5
60224: NEG
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60244: LD_ADDR_VAR 0 30
60248: PUSH
60249: LD_INT 2
60251: PUSH
60252: LD_INT 1
60254: NEG
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 3
60262: PUSH
60263: LD_INT 0
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 3
60272: PUSH
60273: LD_INT 1
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 3
60282: PUSH
60283: LD_INT 1
60285: NEG
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 4
60293: PUSH
60294: LD_INT 0
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 4
60303: PUSH
60304: LD_INT 1
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 4
60313: PUSH
60314: LD_INT 1
60316: NEG
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 5
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 5
60334: PUSH
60335: LD_INT 1
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 5
60344: PUSH
60345: LD_INT 1
60347: NEG
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 6
60355: PUSH
60356: LD_INT 0
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 6
60365: PUSH
60366: LD_INT 1
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60387: LD_ADDR_VAR 0 31
60391: PUSH
60392: LD_INT 3
60394: PUSH
60395: LD_INT 2
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 3
60404: PUSH
60405: LD_INT 3
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 2
60414: PUSH
60415: LD_INT 3
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 4
60424: PUSH
60425: LD_INT 3
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 4
60434: PUSH
60435: LD_INT 4
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 3
60444: PUSH
60445: LD_INT 4
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 5
60454: PUSH
60455: LD_INT 4
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 5
60464: PUSH
60465: LD_INT 5
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 4
60474: PUSH
60475: LD_INT 5
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 6
60484: PUSH
60485: LD_INT 5
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 6
60494: PUSH
60495: LD_INT 6
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 5
60504: PUSH
60505: LD_INT 6
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
60526: LD_ADDR_VAR 0 32
60530: PUSH
60531: LD_INT 1
60533: PUSH
60534: LD_INT 3
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 0
60543: PUSH
60544: LD_INT 3
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 1
60553: NEG
60554: PUSH
60555: LD_INT 2
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 1
60564: PUSH
60565: LD_INT 4
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 0
60574: PUSH
60575: LD_INT 4
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 1
60584: NEG
60585: PUSH
60586: LD_INT 3
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 1
60595: PUSH
60596: LD_INT 5
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 0
60605: PUSH
60606: LD_INT 5
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 1
60615: NEG
60616: PUSH
60617: LD_INT 4
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 1
60626: PUSH
60627: LD_INT 6
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 0
60636: PUSH
60637: LD_INT 6
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 1
60646: NEG
60647: PUSH
60648: LD_INT 5
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60669: LD_ADDR_VAR 0 33
60673: PUSH
60674: LD_INT 2
60676: NEG
60677: PUSH
60678: LD_INT 1
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 3
60687: NEG
60688: PUSH
60689: LD_INT 0
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 3
60698: NEG
60699: PUSH
60700: LD_INT 1
60702: NEG
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 3
60710: NEG
60711: PUSH
60712: LD_INT 1
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 4
60721: NEG
60722: PUSH
60723: LD_INT 0
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 4
60732: NEG
60733: PUSH
60734: LD_INT 1
60736: NEG
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 4
60744: NEG
60745: PUSH
60746: LD_INT 1
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 5
60755: NEG
60756: PUSH
60757: LD_INT 0
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 5
60766: NEG
60767: PUSH
60768: LD_INT 1
60770: NEG
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 5
60778: NEG
60779: PUSH
60780: LD_INT 1
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 6
60789: NEG
60790: PUSH
60791: LD_INT 0
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 6
60800: NEG
60801: PUSH
60802: LD_INT 1
60804: NEG
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60824: LD_ADDR_VAR 0 34
60828: PUSH
60829: LD_INT 2
60831: NEG
60832: PUSH
60833: LD_INT 3
60835: NEG
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 3
60843: NEG
60844: PUSH
60845: LD_INT 2
60847: NEG
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 3
60855: NEG
60856: PUSH
60857: LD_INT 3
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 3
60867: NEG
60868: PUSH
60869: LD_INT 4
60871: NEG
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 4
60879: NEG
60880: PUSH
60881: LD_INT 3
60883: NEG
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 4
60891: NEG
60892: PUSH
60893: LD_INT 4
60895: NEG
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 4
60903: NEG
60904: PUSH
60905: LD_INT 5
60907: NEG
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 5
60915: NEG
60916: PUSH
60917: LD_INT 4
60919: NEG
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 5
60927: NEG
60928: PUSH
60929: LD_INT 5
60931: NEG
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 5
60939: NEG
60940: PUSH
60941: LD_INT 6
60943: NEG
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 6
60951: NEG
60952: PUSH
60953: LD_INT 5
60955: NEG
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 6
60963: NEG
60964: PUSH
60965: LD_INT 6
60967: NEG
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60987: LD_ADDR_VAR 0 41
60991: PUSH
60992: LD_INT 0
60994: PUSH
60995: LD_INT 2
60997: NEG
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 1
61005: NEG
61006: PUSH
61007: LD_INT 3
61009: NEG
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 1
61017: PUSH
61018: LD_INT 2
61020: NEG
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: LIST
61030: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61031: LD_ADDR_VAR 0 42
61035: PUSH
61036: LD_INT 2
61038: PUSH
61039: LD_INT 0
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 2
61048: PUSH
61049: LD_INT 1
61051: NEG
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 3
61059: PUSH
61060: LD_INT 1
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: LIST
61071: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61072: LD_ADDR_VAR 0 43
61076: PUSH
61077: LD_INT 2
61079: PUSH
61080: LD_INT 2
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 3
61089: PUSH
61090: LD_INT 2
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 2
61099: PUSH
61100: LD_INT 3
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: LIST
61111: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61112: LD_ADDR_VAR 0 44
61116: PUSH
61117: LD_INT 0
61119: PUSH
61120: LD_INT 2
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 1
61129: PUSH
61130: LD_INT 3
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 1
61139: NEG
61140: PUSH
61141: LD_INT 2
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: LIST
61152: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61153: LD_ADDR_VAR 0 45
61157: PUSH
61158: LD_INT 2
61160: NEG
61161: PUSH
61162: LD_INT 0
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 2
61171: NEG
61172: PUSH
61173: LD_INT 1
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 3
61182: NEG
61183: PUSH
61184: LD_INT 1
61186: NEG
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: LIST
61196: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61197: LD_ADDR_VAR 0 46
61201: PUSH
61202: LD_INT 2
61204: NEG
61205: PUSH
61206: LD_INT 2
61208: NEG
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 2
61216: NEG
61217: PUSH
61218: LD_INT 3
61220: NEG
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 3
61228: NEG
61229: PUSH
61230: LD_INT 2
61232: NEG
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: LIST
61242: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61243: LD_ADDR_VAR 0 47
61247: PUSH
61248: LD_INT 2
61250: NEG
61251: PUSH
61252: LD_INT 3
61254: NEG
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 1
61262: NEG
61263: PUSH
61264: LD_INT 3
61266: NEG
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61276: LD_ADDR_VAR 0 48
61280: PUSH
61281: LD_INT 1
61283: PUSH
61284: LD_INT 2
61286: NEG
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 2
61294: PUSH
61295: LD_INT 1
61297: NEG
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61307: LD_ADDR_VAR 0 49
61311: PUSH
61312: LD_INT 3
61314: PUSH
61315: LD_INT 1
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 3
61324: PUSH
61325: LD_INT 2
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61336: LD_ADDR_VAR 0 50
61340: PUSH
61341: LD_INT 2
61343: PUSH
61344: LD_INT 3
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 1
61353: PUSH
61354: LD_INT 3
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61365: LD_ADDR_VAR 0 51
61369: PUSH
61370: LD_INT 1
61372: NEG
61373: PUSH
61374: LD_INT 2
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 2
61383: NEG
61384: PUSH
61385: LD_INT 1
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61396: LD_ADDR_VAR 0 52
61400: PUSH
61401: LD_INT 3
61403: NEG
61404: PUSH
61405: LD_INT 1
61407: NEG
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 3
61415: NEG
61416: PUSH
61417: LD_INT 2
61419: NEG
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61429: LD_ADDR_VAR 0 53
61433: PUSH
61434: LD_INT 1
61436: NEG
61437: PUSH
61438: LD_INT 3
61440: NEG
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: LD_INT 3
61451: NEG
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 1
61459: PUSH
61460: LD_INT 2
61462: NEG
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: LIST
61472: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61473: LD_ADDR_VAR 0 54
61477: PUSH
61478: LD_INT 2
61480: PUSH
61481: LD_INT 1
61483: NEG
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 3
61491: PUSH
61492: LD_INT 0
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 3
61501: PUSH
61502: LD_INT 1
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: LIST
61513: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61514: LD_ADDR_VAR 0 55
61518: PUSH
61519: LD_INT 3
61521: PUSH
61522: LD_INT 2
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 3
61531: PUSH
61532: LD_INT 3
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 2
61541: PUSH
61542: LD_INT 3
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: LIST
61553: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61554: LD_ADDR_VAR 0 56
61558: PUSH
61559: LD_INT 1
61561: PUSH
61562: LD_INT 3
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 0
61571: PUSH
61572: LD_INT 3
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 1
61581: NEG
61582: PUSH
61583: LD_INT 2
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: LIST
61594: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61595: LD_ADDR_VAR 0 57
61599: PUSH
61600: LD_INT 2
61602: NEG
61603: PUSH
61604: LD_INT 1
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 3
61613: NEG
61614: PUSH
61615: LD_INT 0
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 3
61624: NEG
61625: PUSH
61626: LD_INT 1
61628: NEG
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: LIST
61638: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61639: LD_ADDR_VAR 0 58
61643: PUSH
61644: LD_INT 2
61646: NEG
61647: PUSH
61648: LD_INT 3
61650: NEG
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 3
61658: NEG
61659: PUSH
61660: LD_INT 2
61662: NEG
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 3
61670: NEG
61671: PUSH
61672: LD_INT 3
61674: NEG
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: LIST
61684: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61685: LD_ADDR_VAR 0 59
61689: PUSH
61690: LD_INT 1
61692: NEG
61693: PUSH
61694: LD_INT 2
61696: NEG
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 0
61704: PUSH
61705: LD_INT 2
61707: NEG
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 1
61715: PUSH
61716: LD_INT 1
61718: NEG
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: LIST
61728: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61729: LD_ADDR_VAR 0 60
61733: PUSH
61734: LD_INT 1
61736: PUSH
61737: LD_INT 1
61739: NEG
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 2
61747: PUSH
61748: LD_INT 0
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 2
61757: PUSH
61758: LD_INT 1
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: LIST
61769: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61770: LD_ADDR_VAR 0 61
61774: PUSH
61775: LD_INT 2
61777: PUSH
61778: LD_INT 1
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 2
61787: PUSH
61788: LD_INT 2
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 1
61797: PUSH
61798: LD_INT 2
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: LIST
61809: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61810: LD_ADDR_VAR 0 62
61814: PUSH
61815: LD_INT 1
61817: PUSH
61818: LD_INT 2
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 0
61827: PUSH
61828: LD_INT 2
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 1
61837: NEG
61838: PUSH
61839: LD_INT 1
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: LIST
61850: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61851: LD_ADDR_VAR 0 63
61855: PUSH
61856: LD_INT 1
61858: NEG
61859: PUSH
61860: LD_INT 1
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 2
61869: NEG
61870: PUSH
61871: LD_INT 0
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 2
61880: NEG
61881: PUSH
61882: LD_INT 1
61884: NEG
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: LIST
61894: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61895: LD_ADDR_VAR 0 64
61899: PUSH
61900: LD_INT 1
61902: NEG
61903: PUSH
61904: LD_INT 2
61906: NEG
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 2
61914: NEG
61915: PUSH
61916: LD_INT 1
61918: NEG
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 2
61926: NEG
61927: PUSH
61928: LD_INT 2
61930: NEG
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: LIST
61940: ST_TO_ADDR
// end ; 2 :
61941: GO 65207
61943: LD_INT 2
61945: DOUBLE
61946: EQUAL
61947: IFTRUE 61951
61949: GO 65206
61951: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61952: LD_ADDR_VAR 0 29
61956: PUSH
61957: LD_INT 4
61959: PUSH
61960: LD_INT 0
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 4
61969: PUSH
61970: LD_INT 1
61972: NEG
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 5
61980: PUSH
61981: LD_INT 0
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 5
61990: PUSH
61991: LD_INT 1
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 4
62000: PUSH
62001: LD_INT 1
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 3
62010: PUSH
62011: LD_INT 0
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 3
62020: PUSH
62021: LD_INT 1
62023: NEG
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 3
62031: PUSH
62032: LD_INT 2
62034: NEG
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 5
62042: PUSH
62043: LD_INT 2
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 3
62052: PUSH
62053: LD_INT 3
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 3
62062: PUSH
62063: LD_INT 2
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 4
62072: PUSH
62073: LD_INT 3
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 4
62082: PUSH
62083: LD_INT 4
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 3
62092: PUSH
62093: LD_INT 4
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 2
62102: PUSH
62103: LD_INT 3
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 2
62112: PUSH
62113: LD_INT 2
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 4
62122: PUSH
62123: LD_INT 2
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 2
62132: PUSH
62133: LD_INT 4
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 0
62142: PUSH
62143: LD_INT 4
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 0
62152: PUSH
62153: LD_INT 3
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 1
62162: PUSH
62163: LD_INT 4
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 1
62172: PUSH
62173: LD_INT 5
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 0
62182: PUSH
62183: LD_INT 5
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 1
62192: NEG
62193: PUSH
62194: LD_INT 4
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 1
62203: NEG
62204: PUSH
62205: LD_INT 3
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 2
62214: PUSH
62215: LD_INT 5
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 2
62224: NEG
62225: PUSH
62226: LD_INT 3
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 3
62235: NEG
62236: PUSH
62237: LD_INT 0
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 3
62246: NEG
62247: PUSH
62248: LD_INT 1
62250: NEG
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 2
62258: NEG
62259: PUSH
62260: LD_INT 0
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 2
62269: NEG
62270: PUSH
62271: LD_INT 1
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 3
62280: NEG
62281: PUSH
62282: LD_INT 1
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 4
62291: NEG
62292: PUSH
62293: LD_INT 0
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 4
62302: NEG
62303: PUSH
62304: LD_INT 1
62306: NEG
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 4
62314: NEG
62315: PUSH
62316: LD_INT 2
62318: NEG
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 2
62326: NEG
62327: PUSH
62328: LD_INT 2
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 4
62337: NEG
62338: PUSH
62339: LD_INT 4
62341: NEG
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 4
62349: NEG
62350: PUSH
62351: LD_INT 5
62353: NEG
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 3
62361: NEG
62362: PUSH
62363: LD_INT 4
62365: NEG
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 3
62373: NEG
62374: PUSH
62375: LD_INT 3
62377: NEG
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 4
62385: NEG
62386: PUSH
62387: LD_INT 3
62389: NEG
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 5
62397: NEG
62398: PUSH
62399: LD_INT 4
62401: NEG
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 5
62409: NEG
62410: PUSH
62411: LD_INT 5
62413: NEG
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 3
62421: NEG
62422: PUSH
62423: LD_INT 5
62425: NEG
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 5
62433: NEG
62434: PUSH
62435: LD_INT 3
62437: NEG
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
62490: LD_ADDR_VAR 0 30
62494: PUSH
62495: LD_INT 4
62497: PUSH
62498: LD_INT 4
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 4
62507: PUSH
62508: LD_INT 3
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 5
62517: PUSH
62518: LD_INT 4
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 5
62527: PUSH
62528: LD_INT 5
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 4
62537: PUSH
62538: LD_INT 5
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 3
62547: PUSH
62548: LD_INT 4
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 3
62557: PUSH
62558: LD_INT 3
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 5
62567: PUSH
62568: LD_INT 3
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: LD_INT 3
62577: PUSH
62578: LD_INT 5
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 0
62587: PUSH
62588: LD_INT 3
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 0
62597: PUSH
62598: LD_INT 2
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 1
62607: PUSH
62608: LD_INT 3
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 1
62617: PUSH
62618: LD_INT 4
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 0
62627: PUSH
62628: LD_INT 4
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 1
62637: NEG
62638: PUSH
62639: LD_INT 3
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 1
62648: NEG
62649: PUSH
62650: LD_INT 2
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 2
62659: PUSH
62660: LD_INT 4
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 2
62669: NEG
62670: PUSH
62671: LD_INT 2
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 4
62680: NEG
62681: PUSH
62682: LD_INT 0
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 4
62691: NEG
62692: PUSH
62693: LD_INT 1
62695: NEG
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 3
62703: NEG
62704: PUSH
62705: LD_INT 0
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: LD_INT 3
62714: NEG
62715: PUSH
62716: LD_INT 1
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 4
62725: NEG
62726: PUSH
62727: LD_INT 1
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 5
62736: NEG
62737: PUSH
62738: LD_INT 0
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 5
62747: NEG
62748: PUSH
62749: LD_INT 1
62751: NEG
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 5
62759: NEG
62760: PUSH
62761: LD_INT 2
62763: NEG
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 3
62771: NEG
62772: PUSH
62773: LD_INT 2
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 3
62782: NEG
62783: PUSH
62784: LD_INT 3
62786: NEG
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 3
62794: NEG
62795: PUSH
62796: LD_INT 4
62798: NEG
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 2
62806: NEG
62807: PUSH
62808: LD_INT 3
62810: NEG
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 2
62818: NEG
62819: PUSH
62820: LD_INT 2
62822: NEG
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 3
62830: NEG
62831: PUSH
62832: LD_INT 2
62834: NEG
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 4
62842: NEG
62843: PUSH
62844: LD_INT 3
62846: NEG
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 4
62854: NEG
62855: PUSH
62856: LD_INT 4
62858: NEG
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 2
62866: NEG
62867: PUSH
62868: LD_INT 4
62870: NEG
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 4
62878: NEG
62879: PUSH
62880: LD_INT 2
62882: NEG
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 0
62890: PUSH
62891: LD_INT 4
62893: NEG
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 0
62901: PUSH
62902: LD_INT 5
62904: NEG
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 1
62912: PUSH
62913: LD_INT 4
62915: NEG
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 1
62923: PUSH
62924: LD_INT 3
62926: NEG
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 0
62934: PUSH
62935: LD_INT 3
62937: NEG
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 1
62945: NEG
62946: PUSH
62947: LD_INT 4
62949: NEG
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 1
62957: NEG
62958: PUSH
62959: LD_INT 5
62961: NEG
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 2
62969: PUSH
62970: LD_INT 3
62972: NEG
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 2
62980: NEG
62981: PUSH
62982: LD_INT 5
62984: NEG
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63037: LD_ADDR_VAR 0 31
63041: PUSH
63042: LD_INT 0
63044: PUSH
63045: LD_INT 4
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 0
63054: PUSH
63055: LD_INT 3
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 1
63064: PUSH
63065: LD_INT 4
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 1
63074: PUSH
63075: LD_INT 5
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 0
63084: PUSH
63085: LD_INT 5
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 1
63094: NEG
63095: PUSH
63096: LD_INT 4
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 1
63105: NEG
63106: PUSH
63107: LD_INT 3
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 2
63116: PUSH
63117: LD_INT 5
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 2
63126: NEG
63127: PUSH
63128: LD_INT 3
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 3
63137: NEG
63138: PUSH
63139: LD_INT 0
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 3
63148: NEG
63149: PUSH
63150: LD_INT 1
63152: NEG
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 2
63160: NEG
63161: PUSH
63162: LD_INT 0
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 2
63171: NEG
63172: PUSH
63173: LD_INT 1
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 3
63182: NEG
63183: PUSH
63184: LD_INT 1
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 4
63193: NEG
63194: PUSH
63195: LD_INT 0
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 4
63204: NEG
63205: PUSH
63206: LD_INT 1
63208: NEG
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 4
63216: NEG
63217: PUSH
63218: LD_INT 2
63220: NEG
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 2
63228: NEG
63229: PUSH
63230: LD_INT 2
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 4
63239: NEG
63240: PUSH
63241: LD_INT 4
63243: NEG
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 4
63251: NEG
63252: PUSH
63253: LD_INT 5
63255: NEG
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 3
63263: NEG
63264: PUSH
63265: LD_INT 4
63267: NEG
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: LD_INT 3
63275: NEG
63276: PUSH
63277: LD_INT 3
63279: NEG
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 4
63287: NEG
63288: PUSH
63289: LD_INT 3
63291: NEG
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 5
63299: NEG
63300: PUSH
63301: LD_INT 4
63303: NEG
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 5
63311: NEG
63312: PUSH
63313: LD_INT 5
63315: NEG
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 3
63323: NEG
63324: PUSH
63325: LD_INT 5
63327: NEG
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 5
63335: NEG
63336: PUSH
63337: LD_INT 3
63339: NEG
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: LD_INT 0
63347: PUSH
63348: LD_INT 3
63350: NEG
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 0
63358: PUSH
63359: LD_INT 4
63361: NEG
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 1
63369: PUSH
63370: LD_INT 3
63372: NEG
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 1
63380: PUSH
63381: LD_INT 2
63383: NEG
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 0
63391: PUSH
63392: LD_INT 2
63394: NEG
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 1
63402: NEG
63403: PUSH
63404: LD_INT 3
63406: NEG
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 1
63414: NEG
63415: PUSH
63416: LD_INT 4
63418: NEG
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 2
63426: PUSH
63427: LD_INT 2
63429: NEG
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 2
63437: NEG
63438: PUSH
63439: LD_INT 4
63441: NEG
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 4
63449: PUSH
63450: LD_INT 0
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 4
63459: PUSH
63460: LD_INT 1
63462: NEG
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 5
63470: PUSH
63471: LD_INT 0
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 5
63480: PUSH
63481: LD_INT 1
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 4
63490: PUSH
63491: LD_INT 1
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 3
63500: PUSH
63501: LD_INT 0
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: LD_INT 3
63510: PUSH
63511: LD_INT 1
63513: NEG
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 3
63521: PUSH
63522: LD_INT 2
63524: NEG
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 5
63532: PUSH
63533: LD_INT 2
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
63587: LD_ADDR_VAR 0 32
63591: PUSH
63592: LD_INT 4
63594: NEG
63595: PUSH
63596: LD_INT 0
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 4
63605: NEG
63606: PUSH
63607: LD_INT 1
63609: NEG
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 3
63617: NEG
63618: PUSH
63619: LD_INT 0
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 3
63628: NEG
63629: PUSH
63630: LD_INT 1
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 4
63639: NEG
63640: PUSH
63641: LD_INT 1
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 5
63650: NEG
63651: PUSH
63652: LD_INT 0
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 5
63661: NEG
63662: PUSH
63663: LD_INT 1
63665: NEG
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 5
63673: NEG
63674: PUSH
63675: LD_INT 2
63677: NEG
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 3
63685: NEG
63686: PUSH
63687: LD_INT 2
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 3
63696: NEG
63697: PUSH
63698: LD_INT 3
63700: NEG
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 3
63708: NEG
63709: PUSH
63710: LD_INT 4
63712: NEG
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 2
63720: NEG
63721: PUSH
63722: LD_INT 3
63724: NEG
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 2
63732: NEG
63733: PUSH
63734: LD_INT 2
63736: NEG
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 3
63744: NEG
63745: PUSH
63746: LD_INT 2
63748: NEG
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 4
63756: NEG
63757: PUSH
63758: LD_INT 3
63760: NEG
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 4
63768: NEG
63769: PUSH
63770: LD_INT 4
63772: NEG
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 2
63780: NEG
63781: PUSH
63782: LD_INT 4
63784: NEG
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: LD_INT 4
63792: NEG
63793: PUSH
63794: LD_INT 2
63796: NEG
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 0
63804: PUSH
63805: LD_INT 4
63807: NEG
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 0
63815: PUSH
63816: LD_INT 5
63818: NEG
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 1
63826: PUSH
63827: LD_INT 4
63829: NEG
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 1
63837: PUSH
63838: LD_INT 3
63840: NEG
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 0
63848: PUSH
63849: LD_INT 3
63851: NEG
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 1
63859: NEG
63860: PUSH
63861: LD_INT 4
63863: NEG
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 1
63871: NEG
63872: PUSH
63873: LD_INT 5
63875: NEG
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 2
63883: PUSH
63884: LD_INT 3
63886: NEG
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 2
63894: NEG
63895: PUSH
63896: LD_INT 5
63898: NEG
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 3
63906: PUSH
63907: LD_INT 0
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 3
63916: PUSH
63917: LD_INT 1
63919: NEG
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 4
63927: PUSH
63928: LD_INT 0
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 4
63937: PUSH
63938: LD_INT 1
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 3
63947: PUSH
63948: LD_INT 1
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 2
63957: PUSH
63958: LD_INT 0
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 2
63967: PUSH
63968: LD_INT 1
63970: NEG
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: LD_INT 2
63978: PUSH
63979: LD_INT 2
63981: NEG
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 4
63989: PUSH
63990: LD_INT 2
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 4
63999: PUSH
64000: LD_INT 4
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 4
64009: PUSH
64010: LD_INT 3
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 5
64019: PUSH
64020: LD_INT 4
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 5
64029: PUSH
64030: LD_INT 5
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 4
64039: PUSH
64040: LD_INT 5
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 3
64049: PUSH
64050: LD_INT 4
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 3
64059: PUSH
64060: LD_INT 3
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 5
64069: PUSH
64070: LD_INT 3
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 3
64079: PUSH
64080: LD_INT 5
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: LIST
64133: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64134: LD_ADDR_VAR 0 33
64138: PUSH
64139: LD_INT 4
64141: NEG
64142: PUSH
64143: LD_INT 4
64145: NEG
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: LD_INT 4
64153: NEG
64154: PUSH
64155: LD_INT 5
64157: NEG
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 3
64165: NEG
64166: PUSH
64167: LD_INT 4
64169: NEG
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 3
64177: NEG
64178: PUSH
64179: LD_INT 3
64181: NEG
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 4
64189: NEG
64190: PUSH
64191: LD_INT 3
64193: NEG
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 5
64201: NEG
64202: PUSH
64203: LD_INT 4
64205: NEG
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 5
64213: NEG
64214: PUSH
64215: LD_INT 5
64217: NEG
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 3
64225: NEG
64226: PUSH
64227: LD_INT 5
64229: NEG
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 5
64237: NEG
64238: PUSH
64239: LD_INT 3
64241: NEG
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 0
64249: PUSH
64250: LD_INT 3
64252: NEG
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 0
64260: PUSH
64261: LD_INT 4
64263: NEG
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 1
64271: PUSH
64272: LD_INT 3
64274: NEG
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 1
64282: PUSH
64283: LD_INT 2
64285: NEG
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 0
64293: PUSH
64294: LD_INT 2
64296: NEG
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 1
64304: NEG
64305: PUSH
64306: LD_INT 3
64308: NEG
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 1
64316: NEG
64317: PUSH
64318: LD_INT 4
64320: NEG
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 2
64328: PUSH
64329: LD_INT 2
64331: NEG
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 2
64339: NEG
64340: PUSH
64341: LD_INT 4
64343: NEG
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 4
64351: PUSH
64352: LD_INT 0
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 4
64361: PUSH
64362: LD_INT 1
64364: NEG
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 5
64372: PUSH
64373: LD_INT 0
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 5
64382: PUSH
64383: LD_INT 1
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 4
64392: PUSH
64393: LD_INT 1
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 3
64402: PUSH
64403: LD_INT 0
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 3
64412: PUSH
64413: LD_INT 1
64415: NEG
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 3
64423: PUSH
64424: LD_INT 2
64426: NEG
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 5
64434: PUSH
64435: LD_INT 2
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 3
64444: PUSH
64445: LD_INT 3
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PUSH
64452: LD_INT 3
64454: PUSH
64455: LD_INT 2
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 4
64464: PUSH
64465: LD_INT 3
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 4
64474: PUSH
64475: LD_INT 4
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 3
64484: PUSH
64485: LD_INT 4
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 2
64494: PUSH
64495: LD_INT 3
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 2
64504: PUSH
64505: LD_INT 2
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 4
64514: PUSH
64515: LD_INT 2
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 2
64524: PUSH
64525: LD_INT 4
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 0
64534: PUSH
64535: LD_INT 4
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 0
64544: PUSH
64545: LD_INT 3
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 1
64554: PUSH
64555: LD_INT 4
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 1
64564: PUSH
64565: LD_INT 5
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 0
64574: PUSH
64575: LD_INT 5
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 1
64584: NEG
64585: PUSH
64586: LD_INT 4
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 1
64595: NEG
64596: PUSH
64597: LD_INT 3
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: PUSH
64604: LD_INT 2
64606: PUSH
64607: LD_INT 5
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 2
64616: NEG
64617: PUSH
64618: LD_INT 3
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64672: LD_ADDR_VAR 0 34
64676: PUSH
64677: LD_INT 0
64679: PUSH
64680: LD_INT 4
64682: NEG
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 0
64690: PUSH
64691: LD_INT 5
64693: NEG
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 1
64701: PUSH
64702: LD_INT 4
64704: NEG
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 1
64712: PUSH
64713: LD_INT 3
64715: NEG
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 0
64723: PUSH
64724: LD_INT 3
64726: NEG
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 1
64734: NEG
64735: PUSH
64736: LD_INT 4
64738: NEG
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 1
64746: NEG
64747: PUSH
64748: LD_INT 5
64750: NEG
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 2
64758: PUSH
64759: LD_INT 3
64761: NEG
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 2
64769: NEG
64770: PUSH
64771: LD_INT 5
64773: NEG
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: LD_INT 3
64781: PUSH
64782: LD_INT 0
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 3
64791: PUSH
64792: LD_INT 1
64794: NEG
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 4
64802: PUSH
64803: LD_INT 0
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 4
64812: PUSH
64813: LD_INT 1
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 3
64822: PUSH
64823: LD_INT 1
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 2
64832: PUSH
64833: LD_INT 0
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: LD_INT 2
64842: PUSH
64843: LD_INT 1
64845: NEG
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 2
64853: PUSH
64854: LD_INT 2
64856: NEG
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 4
64864: PUSH
64865: LD_INT 2
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 4
64874: PUSH
64875: LD_INT 4
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 4
64884: PUSH
64885: LD_INT 3
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: LD_INT 5
64894: PUSH
64895: LD_INT 4
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: LD_INT 5
64904: PUSH
64905: LD_INT 5
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 4
64914: PUSH
64915: LD_INT 5
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 3
64924: PUSH
64925: LD_INT 4
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: LD_INT 3
64934: PUSH
64935: LD_INT 3
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: LD_INT 5
64944: PUSH
64945: LD_INT 3
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 3
64954: PUSH
64955: LD_INT 5
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 0
64964: PUSH
64965: LD_INT 3
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 0
64974: PUSH
64975: LD_INT 2
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 1
64984: PUSH
64985: LD_INT 3
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 1
64994: PUSH
64995: LD_INT 4
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: LD_INT 0
65004: PUSH
65005: LD_INT 4
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 1
65014: NEG
65015: PUSH
65016: LD_INT 3
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 1
65025: NEG
65026: PUSH
65027: LD_INT 2
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 2
65036: PUSH
65037: LD_INT 4
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_INT 2
65046: NEG
65047: PUSH
65048: LD_INT 2
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 4
65057: NEG
65058: PUSH
65059: LD_INT 0
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: LD_INT 4
65068: NEG
65069: PUSH
65070: LD_INT 1
65072: NEG
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: LD_INT 3
65080: NEG
65081: PUSH
65082: LD_INT 0
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 3
65091: NEG
65092: PUSH
65093: LD_INT 1
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 4
65102: NEG
65103: PUSH
65104: LD_INT 1
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 5
65113: NEG
65114: PUSH
65115: LD_INT 0
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 5
65124: NEG
65125: PUSH
65126: LD_INT 1
65128: NEG
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: PUSH
65134: LD_INT 5
65136: NEG
65137: PUSH
65138: LD_INT 2
65140: NEG
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: LD_INT 3
65148: NEG
65149: PUSH
65150: LD_INT 2
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: LIST
65182: LIST
65183: LIST
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: LIST
65190: LIST
65191: LIST
65192: LIST
65193: LIST
65194: LIST
65195: LIST
65196: LIST
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: ST_TO_ADDR
// end ; end ;
65204: GO 65207
65206: POP
// case btype of b_depot , b_warehouse :
65207: LD_VAR 0 1
65211: PUSH
65212: LD_INT 0
65214: DOUBLE
65215: EQUAL
65216: IFTRUE 65226
65218: LD_INT 1
65220: DOUBLE
65221: EQUAL
65222: IFTRUE 65226
65224: GO 65427
65226: POP
// case nation of nation_american :
65227: LD_VAR 0 5
65231: PUSH
65232: LD_INT 1
65234: DOUBLE
65235: EQUAL
65236: IFTRUE 65240
65238: GO 65296
65240: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65241: LD_ADDR_VAR 0 9
65245: PUSH
65246: LD_VAR 0 11
65250: PUSH
65251: LD_VAR 0 12
65255: PUSH
65256: LD_VAR 0 13
65260: PUSH
65261: LD_VAR 0 14
65265: PUSH
65266: LD_VAR 0 15
65270: PUSH
65271: LD_VAR 0 16
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: PUSH
65284: LD_VAR 0 4
65288: PUSH
65289: LD_INT 1
65291: PLUS
65292: ARRAY
65293: ST_TO_ADDR
65294: GO 65425
65296: LD_INT 2
65298: DOUBLE
65299: EQUAL
65300: IFTRUE 65304
65302: GO 65360
65304: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65305: LD_ADDR_VAR 0 9
65309: PUSH
65310: LD_VAR 0 17
65314: PUSH
65315: LD_VAR 0 18
65319: PUSH
65320: LD_VAR 0 19
65324: PUSH
65325: LD_VAR 0 20
65329: PUSH
65330: LD_VAR 0 21
65334: PUSH
65335: LD_VAR 0 22
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: PUSH
65348: LD_VAR 0 4
65352: PUSH
65353: LD_INT 1
65355: PLUS
65356: ARRAY
65357: ST_TO_ADDR
65358: GO 65425
65360: LD_INT 3
65362: DOUBLE
65363: EQUAL
65364: IFTRUE 65368
65366: GO 65424
65368: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65369: LD_ADDR_VAR 0 9
65373: PUSH
65374: LD_VAR 0 23
65378: PUSH
65379: LD_VAR 0 24
65383: PUSH
65384: LD_VAR 0 25
65388: PUSH
65389: LD_VAR 0 26
65393: PUSH
65394: LD_VAR 0 27
65398: PUSH
65399: LD_VAR 0 28
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: LIST
65408: LIST
65409: LIST
65410: LIST
65411: PUSH
65412: LD_VAR 0 4
65416: PUSH
65417: LD_INT 1
65419: PLUS
65420: ARRAY
65421: ST_TO_ADDR
65422: GO 65425
65424: POP
65425: GO 65980
65427: LD_INT 2
65429: DOUBLE
65430: EQUAL
65431: IFTRUE 65441
65433: LD_INT 3
65435: DOUBLE
65436: EQUAL
65437: IFTRUE 65441
65439: GO 65497
65441: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
65442: LD_ADDR_VAR 0 9
65446: PUSH
65447: LD_VAR 0 29
65451: PUSH
65452: LD_VAR 0 30
65456: PUSH
65457: LD_VAR 0 31
65461: PUSH
65462: LD_VAR 0 32
65466: PUSH
65467: LD_VAR 0 33
65471: PUSH
65472: LD_VAR 0 34
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: LIST
65481: LIST
65482: LIST
65483: LIST
65484: PUSH
65485: LD_VAR 0 4
65489: PUSH
65490: LD_INT 1
65492: PLUS
65493: ARRAY
65494: ST_TO_ADDR
65495: GO 65980
65497: LD_INT 16
65499: DOUBLE
65500: EQUAL
65501: IFTRUE 65559
65503: LD_INT 17
65505: DOUBLE
65506: EQUAL
65507: IFTRUE 65559
65509: LD_INT 18
65511: DOUBLE
65512: EQUAL
65513: IFTRUE 65559
65515: LD_INT 19
65517: DOUBLE
65518: EQUAL
65519: IFTRUE 65559
65521: LD_INT 22
65523: DOUBLE
65524: EQUAL
65525: IFTRUE 65559
65527: LD_INT 20
65529: DOUBLE
65530: EQUAL
65531: IFTRUE 65559
65533: LD_INT 21
65535: DOUBLE
65536: EQUAL
65537: IFTRUE 65559
65539: LD_INT 23
65541: DOUBLE
65542: EQUAL
65543: IFTRUE 65559
65545: LD_INT 24
65547: DOUBLE
65548: EQUAL
65549: IFTRUE 65559
65551: LD_INT 25
65553: DOUBLE
65554: EQUAL
65555: IFTRUE 65559
65557: GO 65615
65559: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
65560: LD_ADDR_VAR 0 9
65564: PUSH
65565: LD_VAR 0 35
65569: PUSH
65570: LD_VAR 0 36
65574: PUSH
65575: LD_VAR 0 37
65579: PUSH
65580: LD_VAR 0 38
65584: PUSH
65585: LD_VAR 0 39
65589: PUSH
65590: LD_VAR 0 40
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: PUSH
65603: LD_VAR 0 4
65607: PUSH
65608: LD_INT 1
65610: PLUS
65611: ARRAY
65612: ST_TO_ADDR
65613: GO 65980
65615: LD_INT 6
65617: DOUBLE
65618: EQUAL
65619: IFTRUE 65671
65621: LD_INT 7
65623: DOUBLE
65624: EQUAL
65625: IFTRUE 65671
65627: LD_INT 8
65629: DOUBLE
65630: EQUAL
65631: IFTRUE 65671
65633: LD_INT 13
65635: DOUBLE
65636: EQUAL
65637: IFTRUE 65671
65639: LD_INT 12
65641: DOUBLE
65642: EQUAL
65643: IFTRUE 65671
65645: LD_INT 15
65647: DOUBLE
65648: EQUAL
65649: IFTRUE 65671
65651: LD_INT 11
65653: DOUBLE
65654: EQUAL
65655: IFTRUE 65671
65657: LD_INT 14
65659: DOUBLE
65660: EQUAL
65661: IFTRUE 65671
65663: LD_INT 10
65665: DOUBLE
65666: EQUAL
65667: IFTRUE 65671
65669: GO 65727
65671: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65672: LD_ADDR_VAR 0 9
65676: PUSH
65677: LD_VAR 0 41
65681: PUSH
65682: LD_VAR 0 42
65686: PUSH
65687: LD_VAR 0 43
65691: PUSH
65692: LD_VAR 0 44
65696: PUSH
65697: LD_VAR 0 45
65701: PUSH
65702: LD_VAR 0 46
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: PUSH
65715: LD_VAR 0 4
65719: PUSH
65720: LD_INT 1
65722: PLUS
65723: ARRAY
65724: ST_TO_ADDR
65725: GO 65980
65727: LD_INT 36
65729: DOUBLE
65730: EQUAL
65731: IFTRUE 65735
65733: GO 65791
65735: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65736: LD_ADDR_VAR 0 9
65740: PUSH
65741: LD_VAR 0 47
65745: PUSH
65746: LD_VAR 0 48
65750: PUSH
65751: LD_VAR 0 49
65755: PUSH
65756: LD_VAR 0 50
65760: PUSH
65761: LD_VAR 0 51
65765: PUSH
65766: LD_VAR 0 52
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: PUSH
65779: LD_VAR 0 4
65783: PUSH
65784: LD_INT 1
65786: PLUS
65787: ARRAY
65788: ST_TO_ADDR
65789: GO 65980
65791: LD_INT 4
65793: DOUBLE
65794: EQUAL
65795: IFTRUE 65817
65797: LD_INT 5
65799: DOUBLE
65800: EQUAL
65801: IFTRUE 65817
65803: LD_INT 34
65805: DOUBLE
65806: EQUAL
65807: IFTRUE 65817
65809: LD_INT 37
65811: DOUBLE
65812: EQUAL
65813: IFTRUE 65817
65815: GO 65873
65817: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65818: LD_ADDR_VAR 0 9
65822: PUSH
65823: LD_VAR 0 53
65827: PUSH
65828: LD_VAR 0 54
65832: PUSH
65833: LD_VAR 0 55
65837: PUSH
65838: LD_VAR 0 56
65842: PUSH
65843: LD_VAR 0 57
65847: PUSH
65848: LD_VAR 0 58
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: LIST
65860: PUSH
65861: LD_VAR 0 4
65865: PUSH
65866: LD_INT 1
65868: PLUS
65869: ARRAY
65870: ST_TO_ADDR
65871: GO 65980
65873: LD_INT 31
65875: DOUBLE
65876: EQUAL
65877: IFTRUE 65923
65879: LD_INT 32
65881: DOUBLE
65882: EQUAL
65883: IFTRUE 65923
65885: LD_INT 33
65887: DOUBLE
65888: EQUAL
65889: IFTRUE 65923
65891: LD_INT 27
65893: DOUBLE
65894: EQUAL
65895: IFTRUE 65923
65897: LD_INT 26
65899: DOUBLE
65900: EQUAL
65901: IFTRUE 65923
65903: LD_INT 28
65905: DOUBLE
65906: EQUAL
65907: IFTRUE 65923
65909: LD_INT 29
65911: DOUBLE
65912: EQUAL
65913: IFTRUE 65923
65915: LD_INT 30
65917: DOUBLE
65918: EQUAL
65919: IFTRUE 65923
65921: GO 65979
65923: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65924: LD_ADDR_VAR 0 9
65928: PUSH
65929: LD_VAR 0 59
65933: PUSH
65934: LD_VAR 0 60
65938: PUSH
65939: LD_VAR 0 61
65943: PUSH
65944: LD_VAR 0 62
65948: PUSH
65949: LD_VAR 0 63
65953: PUSH
65954: LD_VAR 0 64
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: PUSH
65967: LD_VAR 0 4
65971: PUSH
65972: LD_INT 1
65974: PLUS
65975: ARRAY
65976: ST_TO_ADDR
65977: GO 65980
65979: POP
// temp_list2 = [ ] ;
65980: LD_ADDR_VAR 0 10
65984: PUSH
65985: EMPTY
65986: ST_TO_ADDR
// for i in temp_list do
65987: LD_ADDR_VAR 0 8
65991: PUSH
65992: LD_VAR 0 9
65996: PUSH
65997: FOR_IN
65998: IFFALSE 66050
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66000: LD_ADDR_VAR 0 10
66004: PUSH
66005: LD_VAR 0 10
66009: PUSH
66010: LD_VAR 0 8
66014: PUSH
66015: LD_INT 1
66017: ARRAY
66018: PUSH
66019: LD_VAR 0 2
66023: PLUS
66024: PUSH
66025: LD_VAR 0 8
66029: PUSH
66030: LD_INT 2
66032: ARRAY
66033: PUSH
66034: LD_VAR 0 3
66038: PLUS
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: EMPTY
66045: LIST
66046: ADD
66047: ST_TO_ADDR
66048: GO 65997
66050: POP
66051: POP
// result = temp_list2 ;
66052: LD_ADDR_VAR 0 7
66056: PUSH
66057: LD_VAR 0 10
66061: ST_TO_ADDR
// end ;
66062: LD_VAR 0 7
66066: RET
// export function EnemyInRange ( unit , dist ) ; begin
66067: LD_INT 0
66069: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66070: LD_ADDR_VAR 0 3
66074: PUSH
66075: LD_VAR 0 1
66079: PPUSH
66080: CALL_OW 255
66084: PPUSH
66085: LD_VAR 0 1
66089: PPUSH
66090: CALL_OW 250
66094: PPUSH
66095: LD_VAR 0 1
66099: PPUSH
66100: CALL_OW 251
66104: PPUSH
66105: LD_VAR 0 2
66109: PPUSH
66110: CALL 40171 0 4
66114: PUSH
66115: LD_INT 4
66117: ARRAY
66118: ST_TO_ADDR
// end ;
66119: LD_VAR 0 3
66123: RET
// export function PlayerSeeMe ( unit ) ; begin
66124: LD_INT 0
66126: PPUSH
// result := See ( your_side , unit ) ;
66127: LD_ADDR_VAR 0 2
66131: PUSH
66132: LD_OWVAR 2
66136: PPUSH
66137: LD_VAR 0 1
66141: PPUSH
66142: CALL_OW 292
66146: ST_TO_ADDR
// end ;
66147: LD_VAR 0 2
66151: RET
// export function ReverseDir ( unit ) ; begin
66152: LD_INT 0
66154: PPUSH
// if not unit then
66155: LD_VAR 0 1
66159: NOT
66160: IFFALSE 66164
// exit ;
66162: GO 66187
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66164: LD_ADDR_VAR 0 2
66168: PUSH
66169: LD_VAR 0 1
66173: PPUSH
66174: CALL_OW 254
66178: PUSH
66179: LD_INT 3
66181: PLUS
66182: PUSH
66183: LD_INT 6
66185: MOD
66186: ST_TO_ADDR
// end ;
66187: LD_VAR 0 2
66191: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
66192: LD_INT 0
66194: PPUSH
66195: PPUSH
66196: PPUSH
66197: PPUSH
66198: PPUSH
// if not hexes then
66199: LD_VAR 0 2
66203: NOT
66204: IFFALSE 66208
// exit ;
66206: GO 66356
// dist := 9999 ;
66208: LD_ADDR_VAR 0 5
66212: PUSH
66213: LD_INT 9999
66215: ST_TO_ADDR
// for i = 1 to hexes do
66216: LD_ADDR_VAR 0 4
66220: PUSH
66221: DOUBLE
66222: LD_INT 1
66224: DEC
66225: ST_TO_ADDR
66226: LD_VAR 0 2
66230: PUSH
66231: FOR_TO
66232: IFFALSE 66344
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
66234: LD_VAR 0 1
66238: PPUSH
66239: LD_VAR 0 2
66243: PUSH
66244: LD_VAR 0 4
66248: ARRAY
66249: PUSH
66250: LD_INT 1
66252: ARRAY
66253: PPUSH
66254: LD_VAR 0 2
66258: PUSH
66259: LD_VAR 0 4
66263: ARRAY
66264: PUSH
66265: LD_INT 2
66267: ARRAY
66268: PPUSH
66269: CALL_OW 297
66273: PUSH
66274: LD_VAR 0 5
66278: LESS
66279: IFFALSE 66342
// begin hex := hexes [ i ] ;
66281: LD_ADDR_VAR 0 7
66285: PUSH
66286: LD_VAR 0 2
66290: PUSH
66291: LD_VAR 0 4
66295: ARRAY
66296: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66297: LD_ADDR_VAR 0 5
66301: PUSH
66302: LD_VAR 0 1
66306: PPUSH
66307: LD_VAR 0 2
66311: PUSH
66312: LD_VAR 0 4
66316: ARRAY
66317: PUSH
66318: LD_INT 1
66320: ARRAY
66321: PPUSH
66322: LD_VAR 0 2
66326: PUSH
66327: LD_VAR 0 4
66331: ARRAY
66332: PUSH
66333: LD_INT 2
66335: ARRAY
66336: PPUSH
66337: CALL_OW 297
66341: ST_TO_ADDR
// end ; end ;
66342: GO 66231
66344: POP
66345: POP
// result := hex ;
66346: LD_ADDR_VAR 0 3
66350: PUSH
66351: LD_VAR 0 7
66355: ST_TO_ADDR
// end ;
66356: LD_VAR 0 3
66360: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66361: LD_INT 0
66363: PPUSH
66364: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66365: LD_VAR 0 1
66369: NOT
66370: PUSH
66371: LD_VAR 0 1
66375: PUSH
66376: LD_INT 21
66378: PUSH
66379: LD_INT 2
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 23
66388: PUSH
66389: LD_INT 2
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: PPUSH
66400: CALL_OW 69
66404: IN
66405: NOT
66406: OR
66407: IFFALSE 66411
// exit ;
66409: GO 66458
// for i = 1 to 3 do
66411: LD_ADDR_VAR 0 3
66415: PUSH
66416: DOUBLE
66417: LD_INT 1
66419: DEC
66420: ST_TO_ADDR
66421: LD_INT 3
66423: PUSH
66424: FOR_TO
66425: IFFALSE 66456
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
66427: LD_VAR 0 1
66431: PPUSH
66432: CALL_OW 250
66436: PPUSH
66437: LD_VAR 0 1
66441: PPUSH
66442: CALL_OW 251
66446: PPUSH
66447: LD_INT 1
66449: PPUSH
66450: CALL_OW 453
66454: GO 66424
66456: POP
66457: POP
// end ;
66458: LD_VAR 0 2
66462: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
66463: LD_INT 0
66465: PPUSH
66466: PPUSH
66467: PPUSH
66468: PPUSH
66469: PPUSH
66470: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
66471: LD_VAR 0 1
66475: NOT
66476: PUSH
66477: LD_VAR 0 2
66481: NOT
66482: OR
66483: PUSH
66484: LD_VAR 0 1
66488: PPUSH
66489: CALL_OW 314
66493: OR
66494: IFFALSE 66498
// exit ;
66496: GO 66939
// x := GetX ( enemy_unit ) ;
66498: LD_ADDR_VAR 0 7
66502: PUSH
66503: LD_VAR 0 2
66507: PPUSH
66508: CALL_OW 250
66512: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
66513: LD_ADDR_VAR 0 8
66517: PUSH
66518: LD_VAR 0 2
66522: PPUSH
66523: CALL_OW 251
66527: ST_TO_ADDR
// if not x or not y then
66528: LD_VAR 0 7
66532: NOT
66533: PUSH
66534: LD_VAR 0 8
66538: NOT
66539: OR
66540: IFFALSE 66544
// exit ;
66542: GO 66939
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
66544: LD_ADDR_VAR 0 6
66548: PUSH
66549: LD_VAR 0 7
66553: PPUSH
66554: LD_INT 0
66556: PPUSH
66557: LD_INT 4
66559: PPUSH
66560: CALL_OW 272
66564: PUSH
66565: LD_VAR 0 8
66569: PPUSH
66570: LD_INT 0
66572: PPUSH
66573: LD_INT 4
66575: PPUSH
66576: CALL_OW 273
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: PUSH
66585: LD_VAR 0 7
66589: PPUSH
66590: LD_INT 1
66592: PPUSH
66593: LD_INT 4
66595: PPUSH
66596: CALL_OW 272
66600: PUSH
66601: LD_VAR 0 8
66605: PPUSH
66606: LD_INT 1
66608: PPUSH
66609: LD_INT 4
66611: PPUSH
66612: CALL_OW 273
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PUSH
66621: LD_VAR 0 7
66625: PPUSH
66626: LD_INT 2
66628: PPUSH
66629: LD_INT 4
66631: PPUSH
66632: CALL_OW 272
66636: PUSH
66637: LD_VAR 0 8
66641: PPUSH
66642: LD_INT 2
66644: PPUSH
66645: LD_INT 4
66647: PPUSH
66648: CALL_OW 273
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_VAR 0 7
66661: PPUSH
66662: LD_INT 3
66664: PPUSH
66665: LD_INT 4
66667: PPUSH
66668: CALL_OW 272
66672: PUSH
66673: LD_VAR 0 8
66677: PPUSH
66678: LD_INT 3
66680: PPUSH
66681: LD_INT 4
66683: PPUSH
66684: CALL_OW 273
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: PUSH
66693: LD_VAR 0 7
66697: PPUSH
66698: LD_INT 4
66700: PPUSH
66701: LD_INT 4
66703: PPUSH
66704: CALL_OW 272
66708: PUSH
66709: LD_VAR 0 8
66713: PPUSH
66714: LD_INT 4
66716: PPUSH
66717: LD_INT 4
66719: PPUSH
66720: CALL_OW 273
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_VAR 0 7
66733: PPUSH
66734: LD_INT 5
66736: PPUSH
66737: LD_INT 4
66739: PPUSH
66740: CALL_OW 272
66744: PUSH
66745: LD_VAR 0 8
66749: PPUSH
66750: LD_INT 5
66752: PPUSH
66753: LD_INT 4
66755: PPUSH
66756: CALL_OW 273
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: ST_TO_ADDR
// for i = tmp downto 1 do
66773: LD_ADDR_VAR 0 4
66777: PUSH
66778: DOUBLE
66779: LD_VAR 0 6
66783: INC
66784: ST_TO_ADDR
66785: LD_INT 1
66787: PUSH
66788: FOR_DOWNTO
66789: IFFALSE 66890
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66791: LD_VAR 0 6
66795: PUSH
66796: LD_VAR 0 4
66800: ARRAY
66801: PUSH
66802: LD_INT 1
66804: ARRAY
66805: PPUSH
66806: LD_VAR 0 6
66810: PUSH
66811: LD_VAR 0 4
66815: ARRAY
66816: PUSH
66817: LD_INT 2
66819: ARRAY
66820: PPUSH
66821: CALL_OW 488
66825: NOT
66826: PUSH
66827: LD_VAR 0 6
66831: PUSH
66832: LD_VAR 0 4
66836: ARRAY
66837: PUSH
66838: LD_INT 1
66840: ARRAY
66841: PPUSH
66842: LD_VAR 0 6
66846: PUSH
66847: LD_VAR 0 4
66851: ARRAY
66852: PUSH
66853: LD_INT 2
66855: ARRAY
66856: PPUSH
66857: CALL_OW 428
66861: PUSH
66862: LD_INT 0
66864: NONEQUAL
66865: OR
66866: IFFALSE 66888
// tmp := Delete ( tmp , i ) ;
66868: LD_ADDR_VAR 0 6
66872: PUSH
66873: LD_VAR 0 6
66877: PPUSH
66878: LD_VAR 0 4
66882: PPUSH
66883: CALL_OW 3
66887: ST_TO_ADDR
66888: GO 66788
66890: POP
66891: POP
// j := GetClosestHex ( unit , tmp ) ;
66892: LD_ADDR_VAR 0 5
66896: PUSH
66897: LD_VAR 0 1
66901: PPUSH
66902: LD_VAR 0 6
66906: PPUSH
66907: CALL 66192 0 2
66911: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66912: LD_VAR 0 1
66916: PPUSH
66917: LD_VAR 0 5
66921: PUSH
66922: LD_INT 1
66924: ARRAY
66925: PPUSH
66926: LD_VAR 0 5
66930: PUSH
66931: LD_INT 2
66933: ARRAY
66934: PPUSH
66935: CALL_OW 111
// end ;
66939: LD_VAR 0 3
66943: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66944: LD_INT 0
66946: PPUSH
66947: PPUSH
66948: PPUSH
// uc_side = 0 ;
66949: LD_ADDR_OWVAR 20
66953: PUSH
66954: LD_INT 0
66956: ST_TO_ADDR
// uc_nation = 0 ;
66957: LD_ADDR_OWVAR 21
66961: PUSH
66962: LD_INT 0
66964: ST_TO_ADDR
// InitHc_All ( ) ;
66965: CALL_OW 584
// InitVc ;
66969: CALL_OW 20
// if mastodonts then
66973: LD_VAR 0 6
66977: IFFALSE 67044
// for i = 1 to mastodonts do
66979: LD_ADDR_VAR 0 11
66983: PUSH
66984: DOUBLE
66985: LD_INT 1
66987: DEC
66988: ST_TO_ADDR
66989: LD_VAR 0 6
66993: PUSH
66994: FOR_TO
66995: IFFALSE 67042
// begin vc_chassis := 31 ;
66997: LD_ADDR_OWVAR 37
67001: PUSH
67002: LD_INT 31
67004: ST_TO_ADDR
// vc_control := control_rider ;
67005: LD_ADDR_OWVAR 38
67009: PUSH
67010: LD_INT 4
67012: ST_TO_ADDR
// animal := CreateVehicle ;
67013: LD_ADDR_VAR 0 12
67017: PUSH
67018: CALL_OW 45
67022: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67023: LD_VAR 0 12
67027: PPUSH
67028: LD_VAR 0 8
67032: PPUSH
67033: LD_INT 0
67035: PPUSH
67036: CALL 69232 0 3
// end ;
67040: GO 66994
67042: POP
67043: POP
// if horses then
67044: LD_VAR 0 5
67048: IFFALSE 67115
// for i = 1 to horses do
67050: LD_ADDR_VAR 0 11
67054: PUSH
67055: DOUBLE
67056: LD_INT 1
67058: DEC
67059: ST_TO_ADDR
67060: LD_VAR 0 5
67064: PUSH
67065: FOR_TO
67066: IFFALSE 67113
// begin hc_class := 21 ;
67068: LD_ADDR_OWVAR 28
67072: PUSH
67073: LD_INT 21
67075: ST_TO_ADDR
// hc_gallery :=  ;
67076: LD_ADDR_OWVAR 33
67080: PUSH
67081: LD_STRING 
67083: ST_TO_ADDR
// animal := CreateHuman ;
67084: LD_ADDR_VAR 0 12
67088: PUSH
67089: CALL_OW 44
67093: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67094: LD_VAR 0 12
67098: PPUSH
67099: LD_VAR 0 8
67103: PPUSH
67104: LD_INT 0
67106: PPUSH
67107: CALL 69232 0 3
// end ;
67111: GO 67065
67113: POP
67114: POP
// if birds then
67115: LD_VAR 0 1
67119: IFFALSE 67186
// for i = 1 to birds do
67121: LD_ADDR_VAR 0 11
67125: PUSH
67126: DOUBLE
67127: LD_INT 1
67129: DEC
67130: ST_TO_ADDR
67131: LD_VAR 0 1
67135: PUSH
67136: FOR_TO
67137: IFFALSE 67184
// begin hc_class = 18 ;
67139: LD_ADDR_OWVAR 28
67143: PUSH
67144: LD_INT 18
67146: ST_TO_ADDR
// hc_gallery =  ;
67147: LD_ADDR_OWVAR 33
67151: PUSH
67152: LD_STRING 
67154: ST_TO_ADDR
// animal := CreateHuman ;
67155: LD_ADDR_VAR 0 12
67159: PUSH
67160: CALL_OW 44
67164: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67165: LD_VAR 0 12
67169: PPUSH
67170: LD_VAR 0 8
67174: PPUSH
67175: LD_INT 0
67177: PPUSH
67178: CALL 69232 0 3
// end ;
67182: GO 67136
67184: POP
67185: POP
// if tigers then
67186: LD_VAR 0 2
67190: IFFALSE 67274
// for i = 1 to tigers do
67192: LD_ADDR_VAR 0 11
67196: PUSH
67197: DOUBLE
67198: LD_INT 1
67200: DEC
67201: ST_TO_ADDR
67202: LD_VAR 0 2
67206: PUSH
67207: FOR_TO
67208: IFFALSE 67272
// begin hc_class = class_tiger ;
67210: LD_ADDR_OWVAR 28
67214: PUSH
67215: LD_INT 14
67217: ST_TO_ADDR
// hc_gallery =  ;
67218: LD_ADDR_OWVAR 33
67222: PUSH
67223: LD_STRING 
67225: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67226: LD_ADDR_OWVAR 35
67230: PUSH
67231: LD_INT 7
67233: NEG
67234: PPUSH
67235: LD_INT 7
67237: PPUSH
67238: CALL_OW 12
67242: ST_TO_ADDR
// animal := CreateHuman ;
67243: LD_ADDR_VAR 0 12
67247: PUSH
67248: CALL_OW 44
67252: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67253: LD_VAR 0 12
67257: PPUSH
67258: LD_VAR 0 8
67262: PPUSH
67263: LD_INT 0
67265: PPUSH
67266: CALL 69232 0 3
// end ;
67270: GO 67207
67272: POP
67273: POP
// if apemans then
67274: LD_VAR 0 3
67278: IFFALSE 67401
// for i = 1 to apemans do
67280: LD_ADDR_VAR 0 11
67284: PUSH
67285: DOUBLE
67286: LD_INT 1
67288: DEC
67289: ST_TO_ADDR
67290: LD_VAR 0 3
67294: PUSH
67295: FOR_TO
67296: IFFALSE 67399
// begin hc_class = class_apeman ;
67298: LD_ADDR_OWVAR 28
67302: PUSH
67303: LD_INT 12
67305: ST_TO_ADDR
// hc_gallery =  ;
67306: LD_ADDR_OWVAR 33
67310: PUSH
67311: LD_STRING 
67313: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
67314: LD_ADDR_OWVAR 35
67318: PUSH
67319: LD_INT 5
67321: NEG
67322: PPUSH
67323: LD_INT 5
67325: PPUSH
67326: CALL_OW 12
67330: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67331: LD_ADDR_OWVAR 31
67335: PUSH
67336: LD_INT 1
67338: PPUSH
67339: LD_INT 3
67341: PPUSH
67342: CALL_OW 12
67346: PUSH
67347: LD_INT 1
67349: PPUSH
67350: LD_INT 3
67352: PPUSH
67353: CALL_OW 12
67357: PUSH
67358: LD_INT 0
67360: PUSH
67361: LD_INT 0
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: LIST
67368: LIST
67369: ST_TO_ADDR
// animal := CreateHuman ;
67370: LD_ADDR_VAR 0 12
67374: PUSH
67375: CALL_OW 44
67379: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67380: LD_VAR 0 12
67384: PPUSH
67385: LD_VAR 0 8
67389: PPUSH
67390: LD_INT 0
67392: PPUSH
67393: CALL 69232 0 3
// end ;
67397: GO 67295
67399: POP
67400: POP
// if enchidnas then
67401: LD_VAR 0 4
67405: IFFALSE 67472
// for i = 1 to enchidnas do
67407: LD_ADDR_VAR 0 11
67411: PUSH
67412: DOUBLE
67413: LD_INT 1
67415: DEC
67416: ST_TO_ADDR
67417: LD_VAR 0 4
67421: PUSH
67422: FOR_TO
67423: IFFALSE 67470
// begin hc_class = 13 ;
67425: LD_ADDR_OWVAR 28
67429: PUSH
67430: LD_INT 13
67432: ST_TO_ADDR
// hc_gallery =  ;
67433: LD_ADDR_OWVAR 33
67437: PUSH
67438: LD_STRING 
67440: ST_TO_ADDR
// animal := CreateHuman ;
67441: LD_ADDR_VAR 0 12
67445: PUSH
67446: CALL_OW 44
67450: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67451: LD_VAR 0 12
67455: PPUSH
67456: LD_VAR 0 8
67460: PPUSH
67461: LD_INT 0
67463: PPUSH
67464: CALL 69232 0 3
// end ;
67468: GO 67422
67470: POP
67471: POP
// if fishes then
67472: LD_VAR 0 7
67476: IFFALSE 67543
// for i = 1 to fishes do
67478: LD_ADDR_VAR 0 11
67482: PUSH
67483: DOUBLE
67484: LD_INT 1
67486: DEC
67487: ST_TO_ADDR
67488: LD_VAR 0 7
67492: PUSH
67493: FOR_TO
67494: IFFALSE 67541
// begin hc_class = 20 ;
67496: LD_ADDR_OWVAR 28
67500: PUSH
67501: LD_INT 20
67503: ST_TO_ADDR
// hc_gallery =  ;
67504: LD_ADDR_OWVAR 33
67508: PUSH
67509: LD_STRING 
67511: ST_TO_ADDR
// animal := CreateHuman ;
67512: LD_ADDR_VAR 0 12
67516: PUSH
67517: CALL_OW 44
67521: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67522: LD_VAR 0 12
67526: PPUSH
67527: LD_VAR 0 9
67531: PPUSH
67532: LD_INT 0
67534: PPUSH
67535: CALL 69232 0 3
// end ;
67539: GO 67493
67541: POP
67542: POP
// end ;
67543: LD_VAR 0 10
67547: RET
// export function WantHeal ( sci , unit ) ; begin
67548: LD_INT 0
67550: PPUSH
// if GetTaskList ( sci ) > 0 then
67551: LD_VAR 0 1
67555: PPUSH
67556: CALL_OW 437
67560: PUSH
67561: LD_INT 0
67563: GREATER
67564: IFFALSE 67634
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67566: LD_VAR 0 1
67570: PPUSH
67571: CALL_OW 437
67575: PUSH
67576: LD_INT 1
67578: ARRAY
67579: PUSH
67580: LD_INT 1
67582: ARRAY
67583: PUSH
67584: LD_STRING l
67586: EQUAL
67587: PUSH
67588: LD_VAR 0 1
67592: PPUSH
67593: CALL_OW 437
67597: PUSH
67598: LD_INT 1
67600: ARRAY
67601: PUSH
67602: LD_INT 4
67604: ARRAY
67605: PUSH
67606: LD_VAR 0 2
67610: EQUAL
67611: AND
67612: IFFALSE 67624
// result := true else
67614: LD_ADDR_VAR 0 3
67618: PUSH
67619: LD_INT 1
67621: ST_TO_ADDR
67622: GO 67632
// result := false ;
67624: LD_ADDR_VAR 0 3
67628: PUSH
67629: LD_INT 0
67631: ST_TO_ADDR
// end else
67632: GO 67642
// result := false ;
67634: LD_ADDR_VAR 0 3
67638: PUSH
67639: LD_INT 0
67641: ST_TO_ADDR
// end ;
67642: LD_VAR 0 3
67646: RET
// export function HealTarget ( sci ) ; begin
67647: LD_INT 0
67649: PPUSH
// if not sci then
67650: LD_VAR 0 1
67654: NOT
67655: IFFALSE 67659
// exit ;
67657: GO 67724
// result := 0 ;
67659: LD_ADDR_VAR 0 2
67663: PUSH
67664: LD_INT 0
67666: ST_TO_ADDR
// if GetTaskList ( sci ) then
67667: LD_VAR 0 1
67671: PPUSH
67672: CALL_OW 437
67676: IFFALSE 67724
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67678: LD_VAR 0 1
67682: PPUSH
67683: CALL_OW 437
67687: PUSH
67688: LD_INT 1
67690: ARRAY
67691: PUSH
67692: LD_INT 1
67694: ARRAY
67695: PUSH
67696: LD_STRING l
67698: EQUAL
67699: IFFALSE 67724
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67701: LD_ADDR_VAR 0 2
67705: PUSH
67706: LD_VAR 0 1
67710: PPUSH
67711: CALL_OW 437
67715: PUSH
67716: LD_INT 1
67718: ARRAY
67719: PUSH
67720: LD_INT 4
67722: ARRAY
67723: ST_TO_ADDR
// end ;
67724: LD_VAR 0 2
67728: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67729: LD_INT 0
67731: PPUSH
67732: PPUSH
67733: PPUSH
67734: PPUSH
// if not base_units then
67735: LD_VAR 0 1
67739: NOT
67740: IFFALSE 67744
// exit ;
67742: GO 67831
// result := false ;
67744: LD_ADDR_VAR 0 2
67748: PUSH
67749: LD_INT 0
67751: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67752: LD_ADDR_VAR 0 5
67756: PUSH
67757: LD_VAR 0 1
67761: PPUSH
67762: LD_INT 21
67764: PUSH
67765: LD_INT 3
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PPUSH
67772: CALL_OW 72
67776: ST_TO_ADDR
// if not tmp then
67777: LD_VAR 0 5
67781: NOT
67782: IFFALSE 67786
// exit ;
67784: GO 67831
// for i in tmp do
67786: LD_ADDR_VAR 0 3
67790: PUSH
67791: LD_VAR 0 5
67795: PUSH
67796: FOR_IN
67797: IFFALSE 67829
// begin result := EnemyInRange ( i , 22 ) ;
67799: LD_ADDR_VAR 0 2
67803: PUSH
67804: LD_VAR 0 3
67808: PPUSH
67809: LD_INT 22
67811: PPUSH
67812: CALL 66067 0 2
67816: ST_TO_ADDR
// if result then
67817: LD_VAR 0 2
67821: IFFALSE 67827
// exit ;
67823: POP
67824: POP
67825: GO 67831
// end ;
67827: GO 67796
67829: POP
67830: POP
// end ;
67831: LD_VAR 0 2
67835: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
67836: LD_INT 0
67838: PPUSH
67839: PPUSH
// if not units then
67840: LD_VAR 0 1
67844: NOT
67845: IFFALSE 67849
// exit ;
67847: GO 67919
// result := [ ] ;
67849: LD_ADDR_VAR 0 3
67853: PUSH
67854: EMPTY
67855: ST_TO_ADDR
// for i in units do
67856: LD_ADDR_VAR 0 4
67860: PUSH
67861: LD_VAR 0 1
67865: PUSH
67866: FOR_IN
67867: IFFALSE 67917
// if GetTag ( i ) = tag then
67869: LD_VAR 0 4
67873: PPUSH
67874: CALL_OW 110
67878: PUSH
67879: LD_VAR 0 2
67883: EQUAL
67884: IFFALSE 67915
// result := Insert ( result , result + 1 , i ) ;
67886: LD_ADDR_VAR 0 3
67890: PUSH
67891: LD_VAR 0 3
67895: PPUSH
67896: LD_VAR 0 3
67900: PUSH
67901: LD_INT 1
67903: PLUS
67904: PPUSH
67905: LD_VAR 0 4
67909: PPUSH
67910: CALL_OW 2
67914: ST_TO_ADDR
67915: GO 67866
67917: POP
67918: POP
// end ;
67919: LD_VAR 0 3
67923: RET
// export function IsDriver ( un ) ; begin
67924: LD_INT 0
67926: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67927: LD_ADDR_VAR 0 2
67931: PUSH
67932: LD_VAR 0 1
67936: PUSH
67937: LD_INT 55
67939: PUSH
67940: EMPTY
67941: LIST
67942: PPUSH
67943: CALL_OW 69
67947: IN
67948: ST_TO_ADDR
// end ;
67949: LD_VAR 0 2
67953: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67954: LD_INT 0
67956: PPUSH
67957: PPUSH
// list := [ ] ;
67958: LD_ADDR_VAR 0 5
67962: PUSH
67963: EMPTY
67964: ST_TO_ADDR
// case d of 0 :
67965: LD_VAR 0 3
67969: PUSH
67970: LD_INT 0
67972: DOUBLE
67973: EQUAL
67974: IFTRUE 67978
67976: GO 68111
67978: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67979: LD_ADDR_VAR 0 5
67983: PUSH
67984: LD_VAR 0 1
67988: PUSH
67989: LD_INT 4
67991: MINUS
67992: PUSH
67993: LD_VAR 0 2
67997: PUSH
67998: LD_INT 4
68000: MINUS
68001: PUSH
68002: LD_INT 2
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: LIST
68009: PUSH
68010: LD_VAR 0 1
68014: PUSH
68015: LD_INT 3
68017: MINUS
68018: PUSH
68019: LD_VAR 0 2
68023: PUSH
68024: LD_INT 1
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: LIST
68031: PUSH
68032: LD_VAR 0 1
68036: PUSH
68037: LD_INT 4
68039: PLUS
68040: PUSH
68041: LD_VAR 0 2
68045: PUSH
68046: LD_INT 4
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: LIST
68053: PUSH
68054: LD_VAR 0 1
68058: PUSH
68059: LD_INT 3
68061: PLUS
68062: PUSH
68063: LD_VAR 0 2
68067: PUSH
68068: LD_INT 3
68070: PLUS
68071: PUSH
68072: LD_INT 5
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: LIST
68079: PUSH
68080: LD_VAR 0 1
68084: PUSH
68085: LD_VAR 0 2
68089: PUSH
68090: LD_INT 4
68092: PLUS
68093: PUSH
68094: LD_INT 0
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: LIST
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: ST_TO_ADDR
// end ; 1 :
68109: GO 68809
68111: LD_INT 1
68113: DOUBLE
68114: EQUAL
68115: IFTRUE 68119
68117: GO 68252
68119: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68120: LD_ADDR_VAR 0 5
68124: PUSH
68125: LD_VAR 0 1
68129: PUSH
68130: LD_VAR 0 2
68134: PUSH
68135: LD_INT 4
68137: MINUS
68138: PUSH
68139: LD_INT 3
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: LIST
68146: PUSH
68147: LD_VAR 0 1
68151: PUSH
68152: LD_INT 3
68154: MINUS
68155: PUSH
68156: LD_VAR 0 2
68160: PUSH
68161: LD_INT 3
68163: MINUS
68164: PUSH
68165: LD_INT 2
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: LIST
68172: PUSH
68173: LD_VAR 0 1
68177: PUSH
68178: LD_INT 4
68180: MINUS
68181: PUSH
68182: LD_VAR 0 2
68186: PUSH
68187: LD_INT 1
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: LIST
68194: PUSH
68195: LD_VAR 0 1
68199: PUSH
68200: LD_VAR 0 2
68204: PUSH
68205: LD_INT 3
68207: PLUS
68208: PUSH
68209: LD_INT 0
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: LIST
68216: PUSH
68217: LD_VAR 0 1
68221: PUSH
68222: LD_INT 4
68224: PLUS
68225: PUSH
68226: LD_VAR 0 2
68230: PUSH
68231: LD_INT 4
68233: PLUS
68234: PUSH
68235: LD_INT 5
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: LIST
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: LIST
68247: LIST
68248: LIST
68249: ST_TO_ADDR
// end ; 2 :
68250: GO 68809
68252: LD_INT 2
68254: DOUBLE
68255: EQUAL
68256: IFTRUE 68260
68258: GO 68389
68260: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68261: LD_ADDR_VAR 0 5
68265: PUSH
68266: LD_VAR 0 1
68270: PUSH
68271: LD_VAR 0 2
68275: PUSH
68276: LD_INT 3
68278: MINUS
68279: PUSH
68280: LD_INT 3
68282: PUSH
68283: EMPTY
68284: LIST
68285: LIST
68286: LIST
68287: PUSH
68288: LD_VAR 0 1
68292: PUSH
68293: LD_INT 4
68295: PLUS
68296: PUSH
68297: LD_VAR 0 2
68301: PUSH
68302: LD_INT 4
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: LIST
68309: PUSH
68310: LD_VAR 0 1
68314: PUSH
68315: LD_VAR 0 2
68319: PUSH
68320: LD_INT 4
68322: PLUS
68323: PUSH
68324: LD_INT 0
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: LIST
68331: PUSH
68332: LD_VAR 0 1
68336: PUSH
68337: LD_INT 3
68339: MINUS
68340: PUSH
68341: LD_VAR 0 2
68345: PUSH
68346: LD_INT 1
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: LIST
68353: PUSH
68354: LD_VAR 0 1
68358: PUSH
68359: LD_INT 4
68361: MINUS
68362: PUSH
68363: LD_VAR 0 2
68367: PUSH
68368: LD_INT 4
68370: MINUS
68371: PUSH
68372: LD_INT 2
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: LIST
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: ST_TO_ADDR
// end ; 3 :
68387: GO 68809
68389: LD_INT 3
68391: DOUBLE
68392: EQUAL
68393: IFTRUE 68397
68395: GO 68530
68397: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68398: LD_ADDR_VAR 0 5
68402: PUSH
68403: LD_VAR 0 1
68407: PUSH
68408: LD_INT 3
68410: PLUS
68411: PUSH
68412: LD_VAR 0 2
68416: PUSH
68417: LD_INT 4
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: LIST
68424: PUSH
68425: LD_VAR 0 1
68429: PUSH
68430: LD_INT 4
68432: PLUS
68433: PUSH
68434: LD_VAR 0 2
68438: PUSH
68439: LD_INT 4
68441: PLUS
68442: PUSH
68443: LD_INT 5
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: LIST
68450: PUSH
68451: LD_VAR 0 1
68455: PUSH
68456: LD_INT 4
68458: MINUS
68459: PUSH
68460: LD_VAR 0 2
68464: PUSH
68465: LD_INT 1
68467: PUSH
68468: EMPTY
68469: LIST
68470: LIST
68471: LIST
68472: PUSH
68473: LD_VAR 0 1
68477: PUSH
68478: LD_VAR 0 2
68482: PUSH
68483: LD_INT 4
68485: MINUS
68486: PUSH
68487: LD_INT 3
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: LIST
68494: PUSH
68495: LD_VAR 0 1
68499: PUSH
68500: LD_INT 3
68502: MINUS
68503: PUSH
68504: LD_VAR 0 2
68508: PUSH
68509: LD_INT 3
68511: MINUS
68512: PUSH
68513: LD_INT 2
68515: PUSH
68516: EMPTY
68517: LIST
68518: LIST
68519: LIST
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: ST_TO_ADDR
// end ; 4 :
68528: GO 68809
68530: LD_INT 4
68532: DOUBLE
68533: EQUAL
68534: IFTRUE 68538
68536: GO 68671
68538: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68539: LD_ADDR_VAR 0 5
68543: PUSH
68544: LD_VAR 0 1
68548: PUSH
68549: LD_VAR 0 2
68553: PUSH
68554: LD_INT 4
68556: PLUS
68557: PUSH
68558: LD_INT 0
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: LIST
68565: PUSH
68566: LD_VAR 0 1
68570: PUSH
68571: LD_INT 3
68573: PLUS
68574: PUSH
68575: LD_VAR 0 2
68579: PUSH
68580: LD_INT 3
68582: PLUS
68583: PUSH
68584: LD_INT 5
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: LIST
68591: PUSH
68592: LD_VAR 0 1
68596: PUSH
68597: LD_INT 4
68599: PLUS
68600: PUSH
68601: LD_VAR 0 2
68605: PUSH
68606: LD_INT 4
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: LIST
68613: PUSH
68614: LD_VAR 0 1
68618: PUSH
68619: LD_VAR 0 2
68623: PUSH
68624: LD_INT 3
68626: MINUS
68627: PUSH
68628: LD_INT 3
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: LIST
68635: PUSH
68636: LD_VAR 0 1
68640: PUSH
68641: LD_INT 4
68643: MINUS
68644: PUSH
68645: LD_VAR 0 2
68649: PUSH
68650: LD_INT 4
68652: MINUS
68653: PUSH
68654: LD_INT 2
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: LIST
68661: PUSH
68662: EMPTY
68663: LIST
68664: LIST
68665: LIST
68666: LIST
68667: LIST
68668: ST_TO_ADDR
// end ; 5 :
68669: GO 68809
68671: LD_INT 5
68673: DOUBLE
68674: EQUAL
68675: IFTRUE 68679
68677: GO 68808
68679: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68680: LD_ADDR_VAR 0 5
68684: PUSH
68685: LD_VAR 0 1
68689: PUSH
68690: LD_INT 4
68692: MINUS
68693: PUSH
68694: LD_VAR 0 2
68698: PUSH
68699: LD_INT 1
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: LIST
68706: PUSH
68707: LD_VAR 0 1
68711: PUSH
68712: LD_VAR 0 2
68716: PUSH
68717: LD_INT 4
68719: MINUS
68720: PUSH
68721: LD_INT 3
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: LIST
68728: PUSH
68729: LD_VAR 0 1
68733: PUSH
68734: LD_INT 4
68736: PLUS
68737: PUSH
68738: LD_VAR 0 2
68742: PUSH
68743: LD_INT 4
68745: PLUS
68746: PUSH
68747: LD_INT 5
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: LIST
68754: PUSH
68755: LD_VAR 0 1
68759: PUSH
68760: LD_INT 3
68762: PLUS
68763: PUSH
68764: LD_VAR 0 2
68768: PUSH
68769: LD_INT 4
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: LIST
68776: PUSH
68777: LD_VAR 0 1
68781: PUSH
68782: LD_VAR 0 2
68786: PUSH
68787: LD_INT 3
68789: PLUS
68790: PUSH
68791: LD_INT 0
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: LIST
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: LIST
68803: LIST
68804: LIST
68805: ST_TO_ADDR
// end ; end ;
68806: GO 68809
68808: POP
// result := list ;
68809: LD_ADDR_VAR 0 4
68813: PUSH
68814: LD_VAR 0 5
68818: ST_TO_ADDR
// end ;
68819: LD_VAR 0 4
68823: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68824: LD_INT 0
68826: PPUSH
68827: PPUSH
68828: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68829: LD_VAR 0 1
68833: NOT
68834: PUSH
68835: LD_VAR 0 2
68839: PUSH
68840: LD_INT 1
68842: PUSH
68843: LD_INT 2
68845: PUSH
68846: LD_INT 3
68848: PUSH
68849: LD_INT 4
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: LIST
68856: LIST
68857: IN
68858: NOT
68859: OR
68860: IFFALSE 68864
// exit ;
68862: GO 68956
// tmp := [ ] ;
68864: LD_ADDR_VAR 0 5
68868: PUSH
68869: EMPTY
68870: ST_TO_ADDR
// for i in units do
68871: LD_ADDR_VAR 0 4
68875: PUSH
68876: LD_VAR 0 1
68880: PUSH
68881: FOR_IN
68882: IFFALSE 68925
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
68884: LD_ADDR_VAR 0 5
68888: PUSH
68889: LD_VAR 0 5
68893: PPUSH
68894: LD_VAR 0 5
68898: PUSH
68899: LD_INT 1
68901: PLUS
68902: PPUSH
68903: LD_VAR 0 4
68907: PPUSH
68908: LD_VAR 0 2
68912: PPUSH
68913: CALL_OW 259
68917: PPUSH
68918: CALL_OW 2
68922: ST_TO_ADDR
68923: GO 68881
68925: POP
68926: POP
// if not tmp then
68927: LD_VAR 0 5
68931: NOT
68932: IFFALSE 68936
// exit ;
68934: GO 68956
// result := SortListByListDesc ( units , tmp ) ;
68936: LD_ADDR_VAR 0 3
68940: PUSH
68941: LD_VAR 0 1
68945: PPUSH
68946: LD_VAR 0 5
68950: PPUSH
68951: CALL_OW 77
68955: ST_TO_ADDR
// end ;
68956: LD_VAR 0 3
68960: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68961: LD_INT 0
68963: PPUSH
68964: PPUSH
68965: PPUSH
// result := false ;
68966: LD_ADDR_VAR 0 3
68970: PUSH
68971: LD_INT 0
68973: ST_TO_ADDR
// x := GetX ( building ) ;
68974: LD_ADDR_VAR 0 4
68978: PUSH
68979: LD_VAR 0 2
68983: PPUSH
68984: CALL_OW 250
68988: ST_TO_ADDR
// y := GetY ( building ) ;
68989: LD_ADDR_VAR 0 5
68993: PUSH
68994: LD_VAR 0 2
68998: PPUSH
68999: CALL_OW 251
69003: ST_TO_ADDR
// if not building or not x or not y then
69004: LD_VAR 0 2
69008: NOT
69009: PUSH
69010: LD_VAR 0 4
69014: NOT
69015: OR
69016: PUSH
69017: LD_VAR 0 5
69021: NOT
69022: OR
69023: IFFALSE 69027
// exit ;
69025: GO 69119
// if GetTaskList ( unit ) then
69027: LD_VAR 0 1
69031: PPUSH
69032: CALL_OW 437
69036: IFFALSE 69119
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69038: LD_STRING e
69040: PUSH
69041: LD_VAR 0 1
69045: PPUSH
69046: CALL_OW 437
69050: PUSH
69051: LD_INT 1
69053: ARRAY
69054: PUSH
69055: LD_INT 1
69057: ARRAY
69058: EQUAL
69059: PUSH
69060: LD_VAR 0 4
69064: PUSH
69065: LD_VAR 0 1
69069: PPUSH
69070: CALL_OW 437
69074: PUSH
69075: LD_INT 1
69077: ARRAY
69078: PUSH
69079: LD_INT 2
69081: ARRAY
69082: EQUAL
69083: AND
69084: PUSH
69085: LD_VAR 0 5
69089: PUSH
69090: LD_VAR 0 1
69094: PPUSH
69095: CALL_OW 437
69099: PUSH
69100: LD_INT 1
69102: ARRAY
69103: PUSH
69104: LD_INT 3
69106: ARRAY
69107: EQUAL
69108: AND
69109: IFFALSE 69119
// result := true end ;
69111: LD_ADDR_VAR 0 3
69115: PUSH
69116: LD_INT 1
69118: ST_TO_ADDR
// end ;
69119: LD_VAR 0 3
69123: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69124: LD_INT 0
69126: PPUSH
// result := false ;
69127: LD_ADDR_VAR 0 4
69131: PUSH
69132: LD_INT 0
69134: ST_TO_ADDR
// if GetTaskList ( unit ) then
69135: LD_VAR 0 1
69139: PPUSH
69140: CALL_OW 437
69144: IFFALSE 69227
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69146: LD_STRING M
69148: PUSH
69149: LD_VAR 0 1
69153: PPUSH
69154: CALL_OW 437
69158: PUSH
69159: LD_INT 1
69161: ARRAY
69162: PUSH
69163: LD_INT 1
69165: ARRAY
69166: EQUAL
69167: PUSH
69168: LD_VAR 0 2
69172: PUSH
69173: LD_VAR 0 1
69177: PPUSH
69178: CALL_OW 437
69182: PUSH
69183: LD_INT 1
69185: ARRAY
69186: PUSH
69187: LD_INT 2
69189: ARRAY
69190: EQUAL
69191: AND
69192: PUSH
69193: LD_VAR 0 3
69197: PUSH
69198: LD_VAR 0 1
69202: PPUSH
69203: CALL_OW 437
69207: PUSH
69208: LD_INT 1
69210: ARRAY
69211: PUSH
69212: LD_INT 3
69214: ARRAY
69215: EQUAL
69216: AND
69217: IFFALSE 69227
// result := true ;
69219: LD_ADDR_VAR 0 4
69223: PUSH
69224: LD_INT 1
69226: ST_TO_ADDR
// end ; end ;
69227: LD_VAR 0 4
69231: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69232: LD_INT 0
69234: PPUSH
69235: PPUSH
69236: PPUSH
69237: PPUSH
// if not unit or not area then
69238: LD_VAR 0 1
69242: NOT
69243: PUSH
69244: LD_VAR 0 2
69248: NOT
69249: OR
69250: IFFALSE 69254
// exit ;
69252: GO 69418
// tmp := AreaToList ( area , i ) ;
69254: LD_ADDR_VAR 0 6
69258: PUSH
69259: LD_VAR 0 2
69263: PPUSH
69264: LD_VAR 0 5
69268: PPUSH
69269: CALL_OW 517
69273: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69274: LD_ADDR_VAR 0 5
69278: PUSH
69279: DOUBLE
69280: LD_INT 1
69282: DEC
69283: ST_TO_ADDR
69284: LD_VAR 0 6
69288: PUSH
69289: LD_INT 1
69291: ARRAY
69292: PUSH
69293: FOR_TO
69294: IFFALSE 69416
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69296: LD_ADDR_VAR 0 7
69300: PUSH
69301: LD_VAR 0 6
69305: PUSH
69306: LD_INT 1
69308: ARRAY
69309: PUSH
69310: LD_VAR 0 5
69314: ARRAY
69315: PUSH
69316: LD_VAR 0 6
69320: PUSH
69321: LD_INT 2
69323: ARRAY
69324: PUSH
69325: LD_VAR 0 5
69329: ARRAY
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
69335: LD_VAR 0 7
69339: PUSH
69340: LD_INT 1
69342: ARRAY
69343: PPUSH
69344: LD_VAR 0 7
69348: PUSH
69349: LD_INT 2
69351: ARRAY
69352: PPUSH
69353: CALL_OW 428
69357: PUSH
69358: LD_INT 0
69360: EQUAL
69361: IFFALSE 69414
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69363: LD_VAR 0 1
69367: PPUSH
69368: LD_VAR 0 7
69372: PUSH
69373: LD_INT 1
69375: ARRAY
69376: PPUSH
69377: LD_VAR 0 7
69381: PUSH
69382: LD_INT 2
69384: ARRAY
69385: PPUSH
69386: LD_VAR 0 3
69390: PPUSH
69391: CALL_OW 48
// result := IsPlaced ( unit ) ;
69395: LD_ADDR_VAR 0 4
69399: PUSH
69400: LD_VAR 0 1
69404: PPUSH
69405: CALL_OW 305
69409: ST_TO_ADDR
// exit ;
69410: POP
69411: POP
69412: GO 69418
// end ; end ;
69414: GO 69293
69416: POP
69417: POP
// end ;
69418: LD_VAR 0 4
69422: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69423: LD_INT 0
69425: PPUSH
69426: PPUSH
69427: PPUSH
// if not side or side > 8 then
69428: LD_VAR 0 1
69432: NOT
69433: PUSH
69434: LD_VAR 0 1
69438: PUSH
69439: LD_INT 8
69441: GREATER
69442: OR
69443: IFFALSE 69447
// exit ;
69445: GO 69634
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69447: LD_ADDR_VAR 0 4
69451: PUSH
69452: LD_INT 22
69454: PUSH
69455: LD_VAR 0 1
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: PUSH
69464: LD_INT 21
69466: PUSH
69467: LD_INT 3
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: PPUSH
69478: CALL_OW 69
69482: ST_TO_ADDR
// if not tmp then
69483: LD_VAR 0 4
69487: NOT
69488: IFFALSE 69492
// exit ;
69490: GO 69634
// enable_addtolog := true ;
69492: LD_ADDR_OWVAR 81
69496: PUSH
69497: LD_INT 1
69499: ST_TO_ADDR
// AddToLog ( [ ) ;
69500: LD_STRING [
69502: PPUSH
69503: CALL_OW 561
// for i in tmp do
69507: LD_ADDR_VAR 0 3
69511: PUSH
69512: LD_VAR 0 4
69516: PUSH
69517: FOR_IN
69518: IFFALSE 69625
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69520: LD_STRING [
69522: PUSH
69523: LD_VAR 0 3
69527: PPUSH
69528: CALL_OW 266
69532: STR
69533: PUSH
69534: LD_STRING , 
69536: STR
69537: PUSH
69538: LD_VAR 0 3
69542: PPUSH
69543: CALL_OW 250
69547: STR
69548: PUSH
69549: LD_STRING , 
69551: STR
69552: PUSH
69553: LD_VAR 0 3
69557: PPUSH
69558: CALL_OW 251
69562: STR
69563: PUSH
69564: LD_STRING , 
69566: STR
69567: PUSH
69568: LD_VAR 0 3
69572: PPUSH
69573: CALL_OW 254
69577: STR
69578: PUSH
69579: LD_STRING , 
69581: STR
69582: PUSH
69583: LD_VAR 0 3
69587: PPUSH
69588: LD_INT 1
69590: PPUSH
69591: CALL_OW 268
69595: STR
69596: PUSH
69597: LD_STRING , 
69599: STR
69600: PUSH
69601: LD_VAR 0 3
69605: PPUSH
69606: LD_INT 2
69608: PPUSH
69609: CALL_OW 268
69613: STR
69614: PUSH
69615: LD_STRING ],
69617: STR
69618: PPUSH
69619: CALL_OW 561
// end ;
69623: GO 69517
69625: POP
69626: POP
// AddToLog ( ]; ) ;
69627: LD_STRING ];
69629: PPUSH
69630: CALL_OW 561
// end ;
69634: LD_VAR 0 2
69638: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69639: LD_INT 0
69641: PPUSH
69642: PPUSH
69643: PPUSH
69644: PPUSH
69645: PPUSH
// if not area or not rate or not max then
69646: LD_VAR 0 1
69650: NOT
69651: PUSH
69652: LD_VAR 0 2
69656: NOT
69657: OR
69658: PUSH
69659: LD_VAR 0 4
69663: NOT
69664: OR
69665: IFFALSE 69669
// exit ;
69667: GO 69861
// while 1 do
69669: LD_INT 1
69671: IFFALSE 69861
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69673: LD_ADDR_VAR 0 9
69677: PUSH
69678: LD_VAR 0 1
69682: PPUSH
69683: LD_INT 1
69685: PPUSH
69686: CALL_OW 287
69690: PUSH
69691: LD_INT 10
69693: MUL
69694: ST_TO_ADDR
// r := rate / 10 ;
69695: LD_ADDR_VAR 0 7
69699: PUSH
69700: LD_VAR 0 2
69704: PUSH
69705: LD_INT 10
69707: DIVREAL
69708: ST_TO_ADDR
// time := 1 1$00 ;
69709: LD_ADDR_VAR 0 8
69713: PUSH
69714: LD_INT 2100
69716: ST_TO_ADDR
// if amount < min then
69717: LD_VAR 0 9
69721: PUSH
69722: LD_VAR 0 3
69726: LESS
69727: IFFALSE 69745
// r := r * 2 else
69729: LD_ADDR_VAR 0 7
69733: PUSH
69734: LD_VAR 0 7
69738: PUSH
69739: LD_INT 2
69741: MUL
69742: ST_TO_ADDR
69743: GO 69771
// if amount > max then
69745: LD_VAR 0 9
69749: PUSH
69750: LD_VAR 0 4
69754: GREATER
69755: IFFALSE 69771
// r := r / 2 ;
69757: LD_ADDR_VAR 0 7
69761: PUSH
69762: LD_VAR 0 7
69766: PUSH
69767: LD_INT 2
69769: DIVREAL
69770: ST_TO_ADDR
// time := time / r ;
69771: LD_ADDR_VAR 0 8
69775: PUSH
69776: LD_VAR 0 8
69780: PUSH
69781: LD_VAR 0 7
69785: DIVREAL
69786: ST_TO_ADDR
// if time < 0 then
69787: LD_VAR 0 8
69791: PUSH
69792: LD_INT 0
69794: LESS
69795: IFFALSE 69812
// time := time * - 1 ;
69797: LD_ADDR_VAR 0 8
69801: PUSH
69802: LD_VAR 0 8
69806: PUSH
69807: LD_INT 1
69809: NEG
69810: MUL
69811: ST_TO_ADDR
// wait ( time ) ;
69812: LD_VAR 0 8
69816: PPUSH
69817: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
69821: LD_INT 35
69823: PPUSH
69824: LD_INT 875
69826: PPUSH
69827: CALL_OW 12
69831: PPUSH
69832: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69836: LD_INT 1
69838: PPUSH
69839: LD_INT 5
69841: PPUSH
69842: CALL_OW 12
69846: PPUSH
69847: LD_VAR 0 1
69851: PPUSH
69852: LD_INT 1
69854: PPUSH
69855: CALL_OW 55
// end ;
69859: GO 69669
// end ;
69861: LD_VAR 0 5
69865: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69866: LD_INT 0
69868: PPUSH
69869: PPUSH
69870: PPUSH
69871: PPUSH
69872: PPUSH
69873: PPUSH
69874: PPUSH
69875: PPUSH
// if not turrets or not factories then
69876: LD_VAR 0 1
69880: NOT
69881: PUSH
69882: LD_VAR 0 2
69886: NOT
69887: OR
69888: IFFALSE 69892
// exit ;
69890: GO 70199
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69892: LD_ADDR_VAR 0 10
69896: PUSH
69897: LD_INT 5
69899: PUSH
69900: LD_INT 6
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PUSH
69907: LD_INT 2
69909: PUSH
69910: LD_INT 4
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: LD_INT 3
69919: PUSH
69920: LD_INT 5
69922: PUSH
69923: EMPTY
69924: LIST
69925: LIST
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: LIST
69931: PUSH
69932: LD_INT 24
69934: PUSH
69935: LD_INT 25
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: PUSH
69942: LD_INT 23
69944: PUSH
69945: LD_INT 27
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: PUSH
69952: EMPTY
69953: LIST
69954: LIST
69955: PUSH
69956: LD_INT 42
69958: PUSH
69959: LD_INT 43
69961: PUSH
69962: EMPTY
69963: LIST
69964: LIST
69965: PUSH
69966: LD_INT 44
69968: PUSH
69969: LD_INT 46
69971: PUSH
69972: EMPTY
69973: LIST
69974: LIST
69975: PUSH
69976: LD_INT 45
69978: PUSH
69979: LD_INT 47
69981: PUSH
69982: EMPTY
69983: LIST
69984: LIST
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: LIST
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: LIST
69995: ST_TO_ADDR
// result := [ ] ;
69996: LD_ADDR_VAR 0 3
70000: PUSH
70001: EMPTY
70002: ST_TO_ADDR
// for i in turrets do
70003: LD_ADDR_VAR 0 4
70007: PUSH
70008: LD_VAR 0 1
70012: PUSH
70013: FOR_IN
70014: IFFALSE 70197
// begin nat := GetNation ( i ) ;
70016: LD_ADDR_VAR 0 7
70020: PUSH
70021: LD_VAR 0 4
70025: PPUSH
70026: CALL_OW 248
70030: ST_TO_ADDR
// weapon := 0 ;
70031: LD_ADDR_VAR 0 8
70035: PUSH
70036: LD_INT 0
70038: ST_TO_ADDR
// if not nat then
70039: LD_VAR 0 7
70043: NOT
70044: IFFALSE 70048
// continue ;
70046: GO 70013
// for j in list [ nat ] do
70048: LD_ADDR_VAR 0 5
70052: PUSH
70053: LD_VAR 0 10
70057: PUSH
70058: LD_VAR 0 7
70062: ARRAY
70063: PUSH
70064: FOR_IN
70065: IFFALSE 70106
// if GetBWeapon ( i ) = j [ 1 ] then
70067: LD_VAR 0 4
70071: PPUSH
70072: CALL_OW 269
70076: PUSH
70077: LD_VAR 0 5
70081: PUSH
70082: LD_INT 1
70084: ARRAY
70085: EQUAL
70086: IFFALSE 70104
// begin weapon := j [ 2 ] ;
70088: LD_ADDR_VAR 0 8
70092: PUSH
70093: LD_VAR 0 5
70097: PUSH
70098: LD_INT 2
70100: ARRAY
70101: ST_TO_ADDR
// break ;
70102: GO 70106
// end ;
70104: GO 70064
70106: POP
70107: POP
// if not weapon then
70108: LD_VAR 0 8
70112: NOT
70113: IFFALSE 70117
// continue ;
70115: GO 70013
// for k in factories do
70117: LD_ADDR_VAR 0 6
70121: PUSH
70122: LD_VAR 0 2
70126: PUSH
70127: FOR_IN
70128: IFFALSE 70193
// begin weapons := AvailableWeaponList ( k ) ;
70130: LD_ADDR_VAR 0 9
70134: PUSH
70135: LD_VAR 0 6
70139: PPUSH
70140: CALL_OW 478
70144: ST_TO_ADDR
// if not weapons then
70145: LD_VAR 0 9
70149: NOT
70150: IFFALSE 70154
// continue ;
70152: GO 70127
// if weapon in weapons then
70154: LD_VAR 0 8
70158: PUSH
70159: LD_VAR 0 9
70163: IN
70164: IFFALSE 70191
// begin result := [ i , weapon ] ;
70166: LD_ADDR_VAR 0 3
70170: PUSH
70171: LD_VAR 0 4
70175: PUSH
70176: LD_VAR 0 8
70180: PUSH
70181: EMPTY
70182: LIST
70183: LIST
70184: ST_TO_ADDR
// exit ;
70185: POP
70186: POP
70187: POP
70188: POP
70189: GO 70199
// end ; end ;
70191: GO 70127
70193: POP
70194: POP
// end ;
70195: GO 70013
70197: POP
70198: POP
// end ;
70199: LD_VAR 0 3
70203: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70204: LD_INT 0
70206: PPUSH
// if not side or side > 8 then
70207: LD_VAR 0 3
70211: NOT
70212: PUSH
70213: LD_VAR 0 3
70217: PUSH
70218: LD_INT 8
70220: GREATER
70221: OR
70222: IFFALSE 70226
// exit ;
70224: GO 70285
// if not range then
70226: LD_VAR 0 4
70230: NOT
70231: IFFALSE 70242
// range := - 12 ;
70233: LD_ADDR_VAR 0 4
70237: PUSH
70238: LD_INT 12
70240: NEG
70241: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70242: LD_VAR 0 1
70246: PPUSH
70247: LD_VAR 0 2
70251: PPUSH
70252: LD_VAR 0 3
70256: PPUSH
70257: LD_VAR 0 4
70261: PPUSH
70262: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70266: LD_VAR 0 1
70270: PPUSH
70271: LD_VAR 0 2
70275: PPUSH
70276: LD_VAR 0 3
70280: PPUSH
70281: CALL_OW 331
// end ;
70285: LD_VAR 0 5
70289: RET
// export function Video ( mode ) ; begin
70290: LD_INT 0
70292: PPUSH
// ingame_video = mode ;
70293: LD_ADDR_OWVAR 52
70297: PUSH
70298: LD_VAR 0 1
70302: ST_TO_ADDR
// interface_hidden = mode ;
70303: LD_ADDR_OWVAR 54
70307: PUSH
70308: LD_VAR 0 1
70312: ST_TO_ADDR
// end ;
70313: LD_VAR 0 2
70317: RET
// export function Join ( array , element ) ; begin
70318: LD_INT 0
70320: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70321: LD_ADDR_VAR 0 3
70325: PUSH
70326: LD_VAR 0 1
70330: PPUSH
70331: LD_VAR 0 1
70335: PUSH
70336: LD_INT 1
70338: PLUS
70339: PPUSH
70340: LD_VAR 0 2
70344: PPUSH
70345: CALL_OW 1
70349: ST_TO_ADDR
// end ;
70350: LD_VAR 0 3
70354: RET
// export function JoinUnion ( array , element ) ; begin
70355: LD_INT 0
70357: PPUSH
// result := array union element ;
70358: LD_ADDR_VAR 0 3
70362: PUSH
70363: LD_VAR 0 1
70367: PUSH
70368: LD_VAR 0 2
70372: UNION
70373: ST_TO_ADDR
// end ;
70374: LD_VAR 0 3
70378: RET
// export function GetBehemoths ( side ) ; begin
70379: LD_INT 0
70381: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
70382: LD_ADDR_VAR 0 2
70386: PUSH
70387: LD_INT 22
70389: PUSH
70390: LD_VAR 0 1
70394: PUSH
70395: EMPTY
70396: LIST
70397: LIST
70398: PUSH
70399: LD_INT 31
70401: PUSH
70402: LD_INT 25
70404: PUSH
70405: EMPTY
70406: LIST
70407: LIST
70408: PUSH
70409: EMPTY
70410: LIST
70411: LIST
70412: PPUSH
70413: CALL_OW 69
70417: ST_TO_ADDR
// end ;
70418: LD_VAR 0 2
70422: RET
// export function Shuffle ( array ) ; var i , index ; begin
70423: LD_INT 0
70425: PPUSH
70426: PPUSH
70427: PPUSH
// result := [ ] ;
70428: LD_ADDR_VAR 0 2
70432: PUSH
70433: EMPTY
70434: ST_TO_ADDR
// if not array then
70435: LD_VAR 0 1
70439: NOT
70440: IFFALSE 70444
// exit ;
70442: GO 70543
// Randomize ;
70444: CALL_OW 10
// for i = array downto 1 do
70448: LD_ADDR_VAR 0 3
70452: PUSH
70453: DOUBLE
70454: LD_VAR 0 1
70458: INC
70459: ST_TO_ADDR
70460: LD_INT 1
70462: PUSH
70463: FOR_DOWNTO
70464: IFFALSE 70541
// begin index := rand ( 1 , array ) ;
70466: LD_ADDR_VAR 0 4
70470: PUSH
70471: LD_INT 1
70473: PPUSH
70474: LD_VAR 0 1
70478: PPUSH
70479: CALL_OW 12
70483: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70484: LD_ADDR_VAR 0 2
70488: PUSH
70489: LD_VAR 0 2
70493: PPUSH
70494: LD_VAR 0 2
70498: PUSH
70499: LD_INT 1
70501: PLUS
70502: PPUSH
70503: LD_VAR 0 1
70507: PUSH
70508: LD_VAR 0 4
70512: ARRAY
70513: PPUSH
70514: CALL_OW 2
70518: ST_TO_ADDR
// array := Delete ( array , index ) ;
70519: LD_ADDR_VAR 0 1
70523: PUSH
70524: LD_VAR 0 1
70528: PPUSH
70529: LD_VAR 0 4
70533: PPUSH
70534: CALL_OW 3
70538: ST_TO_ADDR
// end ;
70539: GO 70463
70541: POP
70542: POP
// end ;
70543: LD_VAR 0 2
70547: RET
// export function GetBaseMaterials ( base ) ; begin
70548: LD_INT 0
70550: PPUSH
// result := [ 0 , 0 , 0 ] ;
70551: LD_ADDR_VAR 0 2
70555: PUSH
70556: LD_INT 0
70558: PUSH
70559: LD_INT 0
70561: PUSH
70562: LD_INT 0
70564: PUSH
70565: EMPTY
70566: LIST
70567: LIST
70568: LIST
70569: ST_TO_ADDR
// if not base then
70570: LD_VAR 0 1
70574: NOT
70575: IFFALSE 70579
// exit ;
70577: GO 70628
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70579: LD_ADDR_VAR 0 2
70583: PUSH
70584: LD_VAR 0 1
70588: PPUSH
70589: LD_INT 1
70591: PPUSH
70592: CALL_OW 275
70596: PUSH
70597: LD_VAR 0 1
70601: PPUSH
70602: LD_INT 2
70604: PPUSH
70605: CALL_OW 275
70609: PUSH
70610: LD_VAR 0 1
70614: PPUSH
70615: LD_INT 3
70617: PPUSH
70618: CALL_OW 275
70622: PUSH
70623: EMPTY
70624: LIST
70625: LIST
70626: LIST
70627: ST_TO_ADDR
// end ;
70628: LD_VAR 0 2
70632: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70633: LD_INT 0
70635: PPUSH
70636: PPUSH
// result := array ;
70637: LD_ADDR_VAR 0 3
70641: PUSH
70642: LD_VAR 0 1
70646: ST_TO_ADDR
// if size > 0 then
70647: LD_VAR 0 2
70651: PUSH
70652: LD_INT 0
70654: GREATER
70655: IFFALSE 70701
// for i := array downto size do
70657: LD_ADDR_VAR 0 4
70661: PUSH
70662: DOUBLE
70663: LD_VAR 0 1
70667: INC
70668: ST_TO_ADDR
70669: LD_VAR 0 2
70673: PUSH
70674: FOR_DOWNTO
70675: IFFALSE 70699
// result := Delete ( result , result ) ;
70677: LD_ADDR_VAR 0 3
70681: PUSH
70682: LD_VAR 0 3
70686: PPUSH
70687: LD_VAR 0 3
70691: PPUSH
70692: CALL_OW 3
70696: ST_TO_ADDR
70697: GO 70674
70699: POP
70700: POP
// end ;
70701: LD_VAR 0 3
70705: RET
// export function ComExit ( unit ) ; var tmp ; begin
70706: LD_INT 0
70708: PPUSH
70709: PPUSH
// if not IsInUnit ( unit ) then
70710: LD_VAR 0 1
70714: PPUSH
70715: CALL_OW 310
70719: NOT
70720: IFFALSE 70724
// exit ;
70722: GO 70784
// tmp := IsInUnit ( unit ) ;
70724: LD_ADDR_VAR 0 3
70728: PUSH
70729: LD_VAR 0 1
70733: PPUSH
70734: CALL_OW 310
70738: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70739: LD_VAR 0 3
70743: PPUSH
70744: CALL_OW 247
70748: PUSH
70749: LD_INT 2
70751: EQUAL
70752: IFFALSE 70765
// ComExitVehicle ( unit ) else
70754: LD_VAR 0 1
70758: PPUSH
70759: CALL_OW 121
70763: GO 70774
// ComExitBuilding ( unit ) ;
70765: LD_VAR 0 1
70769: PPUSH
70770: CALL_OW 122
// result := tmp ;
70774: LD_ADDR_VAR 0 2
70778: PUSH
70779: LD_VAR 0 3
70783: ST_TO_ADDR
// end ;
70784: LD_VAR 0 2
70788: RET
// export function ResetHc ; begin
70789: LD_INT 0
70791: PPUSH
// InitHc ;
70792: CALL_OW 19
// hc_importance := 0 ;
70796: LD_ADDR_OWVAR 32
70800: PUSH
70801: LD_INT 0
70803: ST_TO_ADDR
// end ;
70804: LD_VAR 0 1
70808: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70809: LD_INT 0
70811: PPUSH
70812: PPUSH
70813: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70814: LD_ADDR_VAR 0 6
70818: PUSH
70819: LD_VAR 0 1
70823: PUSH
70824: LD_VAR 0 3
70828: PLUS
70829: PUSH
70830: LD_INT 2
70832: DIV
70833: ST_TO_ADDR
// if _x < 0 then
70834: LD_VAR 0 6
70838: PUSH
70839: LD_INT 0
70841: LESS
70842: IFFALSE 70859
// _x := _x * - 1 ;
70844: LD_ADDR_VAR 0 6
70848: PUSH
70849: LD_VAR 0 6
70853: PUSH
70854: LD_INT 1
70856: NEG
70857: MUL
70858: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70859: LD_ADDR_VAR 0 7
70863: PUSH
70864: LD_VAR 0 2
70868: PUSH
70869: LD_VAR 0 4
70873: PLUS
70874: PUSH
70875: LD_INT 2
70877: DIV
70878: ST_TO_ADDR
// if _y < 0 then
70879: LD_VAR 0 7
70883: PUSH
70884: LD_INT 0
70886: LESS
70887: IFFALSE 70904
// _y := _y * - 1 ;
70889: LD_ADDR_VAR 0 7
70893: PUSH
70894: LD_VAR 0 7
70898: PUSH
70899: LD_INT 1
70901: NEG
70902: MUL
70903: ST_TO_ADDR
// result := [ _x , _y ] ;
70904: LD_ADDR_VAR 0 5
70908: PUSH
70909: LD_VAR 0 6
70913: PUSH
70914: LD_VAR 0 7
70918: PUSH
70919: EMPTY
70920: LIST
70921: LIST
70922: ST_TO_ADDR
// end ;
70923: LD_VAR 0 5
70927: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70928: LD_INT 0
70930: PPUSH
70931: PPUSH
70932: PPUSH
70933: PPUSH
// task := GetTaskList ( unit ) ;
70934: LD_ADDR_VAR 0 7
70938: PUSH
70939: LD_VAR 0 1
70943: PPUSH
70944: CALL_OW 437
70948: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70949: LD_VAR 0 7
70953: NOT
70954: PUSH
70955: LD_VAR 0 1
70959: PPUSH
70960: LD_VAR 0 2
70964: PPUSH
70965: CALL_OW 308
70969: NOT
70970: AND
70971: IFFALSE 70975
// exit ;
70973: GO 71093
// if IsInArea ( unit , area ) then
70975: LD_VAR 0 1
70979: PPUSH
70980: LD_VAR 0 2
70984: PPUSH
70985: CALL_OW 308
70989: IFFALSE 71007
// begin ComMoveToArea ( unit , goAway ) ;
70991: LD_VAR 0 1
70995: PPUSH
70996: LD_VAR 0 3
71000: PPUSH
71001: CALL_OW 113
// exit ;
71005: GO 71093
// end ; if task [ 1 ] [ 1 ] <> M then
71007: LD_VAR 0 7
71011: PUSH
71012: LD_INT 1
71014: ARRAY
71015: PUSH
71016: LD_INT 1
71018: ARRAY
71019: PUSH
71020: LD_STRING M
71022: NONEQUAL
71023: IFFALSE 71027
// exit ;
71025: GO 71093
// x := task [ 1 ] [ 2 ] ;
71027: LD_ADDR_VAR 0 5
71031: PUSH
71032: LD_VAR 0 7
71036: PUSH
71037: LD_INT 1
71039: ARRAY
71040: PUSH
71041: LD_INT 2
71043: ARRAY
71044: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71045: LD_ADDR_VAR 0 6
71049: PUSH
71050: LD_VAR 0 7
71054: PUSH
71055: LD_INT 1
71057: ARRAY
71058: PUSH
71059: LD_INT 3
71061: ARRAY
71062: ST_TO_ADDR
// if InArea ( x , y , area ) then
71063: LD_VAR 0 5
71067: PPUSH
71068: LD_VAR 0 6
71072: PPUSH
71073: LD_VAR 0 2
71077: PPUSH
71078: CALL_OW 309
71082: IFFALSE 71093
// ComStop ( unit ) ;
71084: LD_VAR 0 1
71088: PPUSH
71089: CALL_OW 141
// end ;
71093: LD_VAR 0 4
71097: RET
// export function Abs ( value ) ; begin
71098: LD_INT 0
71100: PPUSH
// result := value ;
71101: LD_ADDR_VAR 0 2
71105: PUSH
71106: LD_VAR 0 1
71110: ST_TO_ADDR
// if value < 0 then
71111: LD_VAR 0 1
71115: PUSH
71116: LD_INT 0
71118: LESS
71119: IFFALSE 71136
// result := value * - 1 ;
71121: LD_ADDR_VAR 0 2
71125: PUSH
71126: LD_VAR 0 1
71130: PUSH
71131: LD_INT 1
71133: NEG
71134: MUL
71135: ST_TO_ADDR
// end ;
71136: LD_VAR 0 2
71140: RET
