// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// CreateNature ;
   8: CALL 837 0 0
// PrepareArabian ;
  12: CALL 1207 0 0
// PrepareAmerican ;
  16: CALL 6202 0 0
// PrepareRussian ;
  20: CALL 2163 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 7762 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 25 25$00 , 24 24$00 , 23 23$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 52500
 188: PUSH
 189: LD_INT 50400
 191: PUSH
 192: LD_INT 48300
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: PUSH
 200: LD_OWVAR 67
 204: ARRAY
 205: ST_TO_ADDR
// escapeCounter := 0 ;
 206: LD_ADDR_EXP 19
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// loseCounter := 0 ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// labCaptured := false ;
 222: LD_ADDR_EXP 21
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// hillBase := false ;
 230: LD_ADDR_EXP 15
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 238: LD_ADDR_EXP 8
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: LD_INT 4
 248: PUSH
 249: LD_INT 5
 251: PUSH
 252: LD_INT 6
 254: PUSH
 255: LD_INT 7
 257: PUSH
 258: LD_INT 8
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: LIST
 268: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 269: LD_ADDR_EXP 23
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// kaganCaptured := false ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// end ;
 285: LD_VAR 0 1
 289: RET
// every 0 0$1 trigger debug do var i ;
 290: LD_EXP 1
 294: IFFALSE 363
 296: GO 298
 298: DISABLE
 299: LD_INT 0
 301: PPUSH
// begin enable ;
 302: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 303: LD_ADDR_VAR 0 1
 307: PUSH
 308: LD_INT 22
 310: PUSH
 311: LD_INT 2
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: PUSH
 318: LD_INT 3
 320: PUSH
 321: LD_INT 21
 323: PUSH
 324: LD_INT 3
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: FOR_IN
 345: IFFALSE 361
// SetLives ( i , 1000 ) ;
 347: LD_VAR 0 1
 351: PPUSH
 352: LD_INT 1000
 354: PPUSH
 355: CALL_OW 234
 359: GO 344
 361: POP
 362: POP
// end ; end_of_file
 363: PPOPN 1
 365: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 366: LD_INT 0
 368: PPUSH
// uc_side := side ;
 369: LD_ADDR_OWVAR 20
 373: PUSH
 374: LD_VAR 0 1
 378: ST_TO_ADDR
// uc_nation := nation ;
 379: LD_ADDR_OWVAR 21
 383: PUSH
 384: LD_VAR 0 2
 388: ST_TO_ADDR
// vc_chassis := chassis ;
 389: LD_ADDR_OWVAR 37
 393: PUSH
 394: LD_VAR 0 3
 398: ST_TO_ADDR
// vc_engine := engine ;
 399: LD_ADDR_OWVAR 39
 403: PUSH
 404: LD_VAR 0 4
 408: ST_TO_ADDR
// vc_control := control ;
 409: LD_ADDR_OWVAR 38
 413: PUSH
 414: LD_VAR 0 5
 418: ST_TO_ADDR
// vc_weapon := weapon ;
 419: LD_ADDR_OWVAR 40
 423: PUSH
 424: LD_VAR 0 6
 428: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 429: LD_ADDR_OWVAR 41
 433: PUSH
 434: LD_VAR 0 7
 438: ST_TO_ADDR
// result := CreateVehicle ;
 439: LD_ADDR_VAR 0 8
 443: PUSH
 444: CALL_OW 45
 448: ST_TO_ADDR
// end ;
 449: LD_VAR 0 8
 453: RET
// export function SayX ( units , ident ) ; var i ; begin
 454: LD_INT 0
 456: PPUSH
 457: PPUSH
// result := false ;
 458: LD_ADDR_VAR 0 3
 462: PUSH
 463: LD_INT 0
 465: ST_TO_ADDR
// if not units then
 466: LD_VAR 0 1
 470: NOT
 471: IFFALSE 475
// exit ;
 473: GO 529
// for i in units do
 475: LD_ADDR_VAR 0 4
 479: PUSH
 480: LD_VAR 0 1
 484: PUSH
 485: FOR_IN
 486: IFFALSE 527
// if IsOk ( i ) then
 488: LD_VAR 0 4
 492: PPUSH
 493: CALL_OW 302
 497: IFFALSE 525
// begin Say ( i , ident ) ;
 499: LD_VAR 0 4
 503: PPUSH
 504: LD_VAR 0 2
 508: PPUSH
 509: CALL_OW 88
// result := i ;
 513: LD_ADDR_VAR 0 3
 517: PUSH
 518: LD_VAR 0 4
 522: ST_TO_ADDR
// break ;
 523: GO 527
// end ;
 525: GO 485
 527: POP
 528: POP
// end ;
 529: LD_VAR 0 3
 533: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 534: LD_INT 0
 536: PPUSH
 537: PPUSH
 538: PPUSH
// if not observer or not unit then
 539: LD_VAR 0 1
 543: NOT
 544: PUSH
 545: LD_VAR 0 2
 549: NOT
 550: OR
 551: IFFALSE 555
// exit ;
 553: GO 603
// if not See ( GetSide ( observer ) , unit ) then
 555: LD_VAR 0 1
 559: PPUSH
 560: CALL_OW 255
 564: PPUSH
 565: LD_VAR 0 2
 569: PPUSH
 570: CALL_OW 292
 574: NOT
 575: IFFALSE 579
// exit ;
 577: GO 603
// result := GetDistUnits ( observer , unit ) < 12 ;
 579: LD_ADDR_VAR 0 3
 583: PUSH
 584: LD_VAR 0 1
 588: PPUSH
 589: LD_VAR 0 2
 593: PPUSH
 594: CALL_OW 296
 598: PUSH
 599: LD_INT 12
 601: LESS
 602: ST_TO_ADDR
// end ;
 603: LD_VAR 0 3
 607: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 608: LD_INT 0
 610: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 611: LD_VAR 0 2
 615: PUSH
 616: LD_INT 1
 618: ARRAY
 619: PPUSH
 620: LD_VAR 0 2
 624: PUSH
 625: LD_INT 2
 627: ARRAY
 628: PPUSH
 629: CALL_OW 488
 633: PUSH
 634: LD_VAR 0 2
 638: PUSH
 639: LD_INT 1
 641: ARRAY
 642: PPUSH
 643: LD_VAR 0 2
 647: PUSH
 648: LD_INT 2
 650: ARRAY
 651: PPUSH
 652: CALL_OW 428
 656: PUSH
 657: LD_INT 0
 659: EQUAL
 660: AND
 661: IFFALSE 695
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 663: LD_VAR 0 1
 667: PPUSH
 668: LD_VAR 0 2
 672: PUSH
 673: LD_INT 1
 675: ARRAY
 676: PPUSH
 677: LD_VAR 0 2
 681: PUSH
 682: LD_INT 2
 684: ARRAY
 685: PPUSH
 686: LD_VAR 0 3
 690: PPUSH
 691: CALL_OW 48
// end ;
 695: LD_VAR 0 4
 699: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 700: LD_INT 0
 702: PPUSH
 703: PPUSH
// InitUc ;
 704: CALL_OW 18
// InitHc ;
 708: CALL_OW 19
// uc_side := 0 ;
 712: LD_ADDR_OWVAR 20
 716: PUSH
 717: LD_INT 0
 719: ST_TO_ADDR
// uc_nation := 0 ;
 720: LD_ADDR_OWVAR 21
 724: PUSH
 725: LD_INT 0
 727: ST_TO_ADDR
// for i = 1 to amount do
 728: LD_ADDR_VAR 0 4
 732: PUSH
 733: DOUBLE
 734: LD_INT 1
 736: DEC
 737: ST_TO_ADDR
 738: LD_VAR 0 2
 742: PUSH
 743: FOR_TO
 744: IFFALSE 826
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 746: LD_ADDR_OWVAR 29
 750: PUSH
 751: LD_INT 9
 753: PPUSH
 754: LD_INT 12
 756: PPUSH
 757: CALL_OW 12
 761: PUSH
 762: LD_INT 9
 764: PPUSH
 765: LD_INT 12
 767: PPUSH
 768: CALL_OW 12
 772: PUSH
 773: EMPTY
 774: LIST
 775: LIST
 776: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 777: LD_ADDR_OWVAR 35
 781: PUSH
 782: LD_INT 1
 784: NEG
 785: PPUSH
 786: LD_INT 1
 788: PPUSH
 789: CALL_OW 12
 793: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 794: LD_INT 0
 796: PPUSH
 797: LD_INT 12
 799: PPUSH
 800: LD_INT 1
 802: PPUSH
 803: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 807: CALL_OW 44
 811: PPUSH
 812: LD_VAR 0 1
 816: PPUSH
 817: LD_INT 0
 819: PPUSH
 820: CALL_OW 49
// end ;
 824: GO 743
 826: POP
 827: POP
// InitHc ;
 828: CALL_OW 19
// end ;
 832: LD_VAR 0 3
 836: RET
// export function CreateNature ; var i ; begin
 837: LD_INT 0
 839: PPUSH
 840: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
 841: LD_INT 18
 843: PPUSH
 844: LD_INT 5
 846: PUSH
 847: LD_INT 4
 849: PUSH
 850: LD_INT 3
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: LIST
 857: PUSH
 858: LD_OWVAR 67
 862: ARRAY
 863: PPUSH
 864: CALL 700 0 2
// for i := 1 to 3 do
 868: LD_ADDR_VAR 0 2
 872: PUSH
 873: DOUBLE
 874: LD_INT 1
 876: DEC
 877: ST_TO_ADDR
 878: LD_INT 3
 880: PUSH
 881: FOR_TO
 882: IFFALSE 917
// begin hc_class := 21 ;
 884: LD_ADDR_OWVAR 28
 888: PUSH
 889: LD_INT 21
 891: ST_TO_ADDR
// hc_gallery :=  ;
 892: LD_ADDR_OWVAR 33
 896: PUSH
 897: LD_STRING 
 899: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 900: CALL_OW 44
 904: PPUSH
 905: LD_INT 18
 907: PPUSH
 908: LD_INT 0
 910: PPUSH
 911: CALL_OW 49
// end ;
 915: GO 881
 917: POP
 918: POP
// for i := 1 to 2 do
 919: LD_ADDR_VAR 0 2
 923: PUSH
 924: DOUBLE
 925: LD_INT 1
 927: DEC
 928: ST_TO_ADDR
 929: LD_INT 2
 931: PUSH
 932: FOR_TO
 933: IFFALSE 968
// begin hc_class := 18 ;
 935: LD_ADDR_OWVAR 28
 939: PUSH
 940: LD_INT 18
 942: ST_TO_ADDR
// hc_gallery :=  ;
 943: LD_ADDR_OWVAR 33
 947: PUSH
 948: LD_STRING 
 950: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 951: CALL_OW 44
 955: PPUSH
 956: LD_INT 18
 958: PPUSH
 959: LD_INT 0
 961: PPUSH
 962: CALL_OW 49
// end ;
 966: GO 932
 968: POP
 969: POP
// for i := 1 to 2 do
 970: LD_ADDR_VAR 0 2
 974: PUSH
 975: DOUBLE
 976: LD_INT 1
 978: DEC
 979: ST_TO_ADDR
 980: LD_INT 2
 982: PUSH
 983: FOR_TO
 984: IFFALSE 1019
// begin hc_class := 13 ;
 986: LD_ADDR_OWVAR 28
 990: PUSH
 991: LD_INT 13
 993: ST_TO_ADDR
// hc_gallery :=  ;
 994: LD_ADDR_OWVAR 33
 998: PUSH
 999: LD_STRING 
1001: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1002: CALL_OW 44
1006: PPUSH
1007: LD_INT 18
1009: PPUSH
1010: LD_INT 0
1012: PPUSH
1013: CALL_OW 49
// end ;
1017: GO 983
1019: POP
1020: POP
// end ;
1021: LD_VAR 0 1
1025: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1026: LD_INT 0
1028: PPUSH
1029: PPUSH
1030: PPUSH
1031: PPUSH
1032: PPUSH
// result := false ;
1033: LD_ADDR_VAR 0 4
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// if not sideList or not enemySide then
1041: LD_VAR 0 1
1045: NOT
1046: PUSH
1047: LD_VAR 0 2
1051: NOT
1052: OR
1053: IFFALSE 1057
// exit ;
1055: GO 1202
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1057: LD_ADDR_VAR 0 7
1061: PUSH
1062: LD_INT 22
1064: PUSH
1065: LD_VAR 0 2
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: PPUSH
1074: CALL_OW 69
1078: ST_TO_ADDR
// if not tmp then
1079: LD_VAR 0 7
1083: NOT
1084: IFFALSE 1088
// exit ;
1086: GO 1202
// for s in sideList do
1088: LD_ADDR_VAR 0 6
1092: PUSH
1093: LD_VAR 0 1
1097: PUSH
1098: FOR_IN
1099: IFFALSE 1200
// for i in tmp do
1101: LD_ADDR_VAR 0 5
1105: PUSH
1106: LD_VAR 0 7
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1196
// if See ( s , i ) then
1114: LD_VAR 0 6
1118: PPUSH
1119: LD_VAR 0 5
1123: PPUSH
1124: CALL_OW 292
1128: IFFALSE 1194
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
1130: LD_ADDR_VAR 0 8
1134: PUSH
1135: LD_INT 22
1137: PUSH
1138: LD_VAR 0 6
1142: PUSH
1143: EMPTY
1144: LIST
1145: LIST
1146: PPUSH
1147: CALL_OW 69
1151: PPUSH
1152: LD_VAR 0 5
1156: PPUSH
1157: CALL_OW 74
1161: ST_TO_ADDR
// if tmp2 in exceptUnits then
1162: LD_VAR 0 8
1166: PUSH
1167: LD_VAR 0 3
1171: IN
1172: IFFALSE 1178
// continue else
1174: GO 1111
1176: GO 1194
// begin result := tmp2 ;
1178: LD_ADDR_VAR 0 4
1182: PUSH
1183: LD_VAR 0 8
1187: ST_TO_ADDR
// exit ;
1188: POP
1189: POP
1190: POP
1191: POP
1192: GO 1202
// end ; end ;
1194: GO 1111
1196: POP
1197: POP
1198: GO 1098
1200: POP
1201: POP
// end ; end_of_file
1202: LD_VAR 0 4
1206: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1207: LD_INT 0
1209: PPUSH
1210: PPUSH
// uc_side := 5 ;
1211: LD_ADDR_OWVAR 20
1215: PUSH
1216: LD_INT 5
1218: ST_TO_ADDR
// uc_nation := 2 ;
1219: LD_ADDR_OWVAR 21
1223: PUSH
1224: LD_INT 2
1226: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1227: LD_ADDR_EXP 36
1231: PUSH
1232: LD_STRING Abdul
1234: PPUSH
1235: LD_INT 0
1237: PPUSH
1238: LD_STRING 
1240: PPUSH
1241: CALL 34423 0 3
1245: ST_TO_ADDR
// uc_side := 2 ;
1246: LD_ADDR_OWVAR 20
1250: PUSH
1251: LD_INT 2
1253: ST_TO_ADDR
// uc_nation := 2 ;
1254: LD_ADDR_OWVAR 21
1258: PUSH
1259: LD_INT 2
1261: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1262: LD_ADDR_EXP 25
1266: PUSH
1267: LD_STRING Heike
1269: PPUSH
1270: LD_EXP 1
1274: NOT
1275: PPUSH
1276: LD_EXP 2
1280: PPUSH
1281: CALL 34423 0 3
1285: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1286: LD_ADDR_EXP 28
1290: PUSH
1291: LD_STRING Ibrahim
1293: PPUSH
1294: LD_EXP 1
1298: NOT
1299: PPUSH
1300: LD_EXP 2
1304: PPUSH
1305: CALL 34423 0 3
1309: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1310: LD_ADDR_EXP 26
1314: PUSH
1315: LD_STRING Givi
1317: PPUSH
1318: LD_EXP 1
1322: NOT
1323: PPUSH
1324: LD_EXP 2
1328: PPUSH
1329: CALL 34423 0 3
1333: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1334: LD_ADDR_EXP 29
1338: PUSH
1339: LD_STRING Kamil
1341: PPUSH
1342: LD_EXP 1
1346: NOT
1347: PPUSH
1348: LD_EXP 2
1352: PPUSH
1353: CALL 34423 0 3
1357: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1358: LD_ADDR_EXP 30
1362: PUSH
1363: LD_STRING Kaia
1365: PPUSH
1366: LD_EXP 1
1370: NOT
1371: PPUSH
1372: LD_EXP 2
1376: PPUSH
1377: CALL 34423 0 3
1381: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1382: LD_ADDR_EXP 31
1386: PUSH
1387: LD_STRING Sophia
1389: PPUSH
1390: LD_EXP 1
1394: NOT
1395: PPUSH
1396: LD_EXP 2
1400: PPUSH
1401: CALL 34423 0 3
1405: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1406: LD_ADDR_EXP 32
1410: PUSH
1411: LD_STRING Markov
1413: PPUSH
1414: LD_EXP 1
1418: NOT
1419: PPUSH
1420: LD_EXP 2
1424: PPUSH
1425: CALL 34423 0 3
1429: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1430: LD_ADDR_EXP 35
1434: PUSH
1435: LD_STRING Aviradze
1437: PPUSH
1438: LD_EXP 1
1442: NOT
1443: PPUSH
1444: LD_EXP 2
1448: PPUSH
1449: CALL 34423 0 3
1453: ST_TO_ADDR
// aviradzeSquad := [ ] ;
1454: LD_ADDR_EXP 39
1458: PUSH
1459: EMPTY
1460: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
1461: LD_ADDR_EXP 37
1465: PUSH
1466: LD_STRING 03_others
1468: PPUSH
1469: CALL_OW 31
1473: ST_TO_ADDR
// uc_side := 5 ;
1474: LD_ADDR_OWVAR 20
1478: PUSH
1479: LD_INT 5
1481: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
1482: LD_ADDR_EXP 34
1486: PUSH
1487: LD_STRING Kurt
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: LD_STRING 
1495: PPUSH
1496: CALL 34423 0 3
1500: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1501: LD_ADDR_EXP 27
1505: PUSH
1506: LD_STRING Mike
1508: PPUSH
1509: LD_EXP 1
1513: NOT
1514: PPUSH
1515: LD_EXP 2
1519: PPUSH
1520: CALL 34423 0 3
1524: ST_TO_ADDR
// if Mike then
1525: LD_EXP 27
1529: IFFALSE 1552
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
1531: LD_EXP 27
1535: PPUSH
1536: LD_INT 142
1538: PPUSH
1539: LD_INT 63
1541: PPUSH
1542: LD_INT 2
1544: PPUSH
1545: LD_INT 0
1547: PPUSH
1548: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
1552: LD_EXP 34
1556: PPUSH
1557: LD_INT 142
1559: PPUSH
1560: LD_INT 63
1562: PPUSH
1563: LD_INT 3
1565: PPUSH
1566: LD_INT 0
1568: PPUSH
1569: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
1573: LD_EXP 34
1577: PUSH
1578: LD_EXP 27
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: PPUSH
1587: CALL_OW 140
// end ;
1591: LD_VAR 0 1
1595: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
1596: LD_INT 0
1598: PPUSH
1599: PPUSH
1600: PPUSH
1601: PPUSH
// uc_side := 5 ;
1602: LD_ADDR_OWVAR 20
1606: PUSH
1607: LD_INT 5
1609: ST_TO_ADDR
// uc_nation := 2 ;
1610: LD_ADDR_OWVAR 21
1614: PUSH
1615: LD_INT 2
1617: ST_TO_ADDR
// InitHc ;
1618: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
1622: LD_ADDR_EXP 33
1626: PUSH
1627: LD_STRING Omar
1629: PPUSH
1630: LD_INT 0
1632: PPUSH
1633: LD_STRING 
1635: PPUSH
1636: CALL 34423 0 3
1640: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
1641: LD_EXP 33
1645: PPUSH
1646: LD_INT 284
1648: PPUSH
1649: LD_INT 163
1651: PPUSH
1652: LD_INT 0
1654: PPUSH
1655: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
1659: LD_EXP 33
1663: PPUSH
1664: LD_INT 256
1666: PPUSH
1667: LD_INT 129
1669: PPUSH
1670: CALL_OW 111
// wait ( 0 0$2 ) ;
1674: LD_INT 70
1676: PPUSH
1677: CALL_OW 67
// omarSquad := [ ] ;
1681: LD_ADDR_EXP 38
1685: PUSH
1686: EMPTY
1687: ST_TO_ADDR
// for i := 1 to 5 do
1688: LD_ADDR_VAR 0 2
1692: PUSH
1693: DOUBLE
1694: LD_INT 1
1696: DEC
1697: ST_TO_ADDR
1698: LD_INT 5
1700: PUSH
1701: FOR_TO
1702: IFFALSE 1908
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1704: LD_INT 5
1706: PPUSH
1707: LD_INT 2
1709: PPUSH
1710: LD_INT 13
1712: PUSH
1713: LD_INT 14
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: PUSH
1720: LD_VAR 0 2
1724: PUSH
1725: LD_INT 2
1727: MOD
1728: PUSH
1729: LD_INT 1
1731: PLUS
1732: ARRAY
1733: PPUSH
1734: LD_INT 1
1736: PPUSH
1737: LD_INT 1
1739: PPUSH
1740: LD_INT 25
1742: PUSH
1743: LD_INT 27
1745: PUSH
1746: LD_INT 26
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: LIST
1753: PUSH
1754: LD_VAR 0 2
1758: PUSH
1759: LD_INT 3
1761: MOD
1762: PUSH
1763: LD_INT 1
1765: PLUS
1766: ARRAY
1767: PPUSH
1768: LD_INT 100
1770: PPUSH
1771: CALL 366 0 7
// veh := CreateVehicle ;
1775: LD_ADDR_VAR 0 4
1779: PUSH
1780: CALL_OW 45
1784: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1785: LD_VAR 0 4
1789: PPUSH
1790: LD_INT 5
1792: PPUSH
1793: CALL_OW 233
// omarSquad := omarSquad union veh ;
1797: LD_ADDR_EXP 38
1801: PUSH
1802: LD_EXP 38
1806: PUSH
1807: LD_VAR 0 4
1811: UNION
1812: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
1813: LD_VAR 0 4
1817: PPUSH
1818: LD_INT 284
1820: PPUSH
1821: LD_INT 163
1823: PPUSH
1824: LD_INT 0
1826: PPUSH
1827: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
1831: LD_INT 0
1833: PPUSH
1834: LD_INT 3
1836: PPUSH
1837: LD_INT 2
1839: PPUSH
1840: CALL_OW 380
// un := CreateHuman ;
1844: LD_ADDR_VAR 0 3
1848: PUSH
1849: CALL_OW 44
1853: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1854: LD_ADDR_EXP 38
1858: PUSH
1859: LD_EXP 38
1863: PUSH
1864: LD_VAR 0 3
1868: UNION
1869: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1870: LD_VAR 0 3
1874: PPUSH
1875: LD_VAR 0 4
1879: PPUSH
1880: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
1884: LD_VAR 0 3
1888: PPUSH
1889: LD_INT 271
1891: PPUSH
1892: LD_INT 144
1894: PPUSH
1895: CALL_OW 111
// wait ( 0 0$2 ) ;
1899: LD_INT 70
1901: PPUSH
1902: CALL_OW 67
// end ;
1906: GO 1701
1908: POP
1909: POP
// for i := 1 to 3 do
1910: LD_ADDR_VAR 0 2
1914: PUSH
1915: DOUBLE
1916: LD_INT 1
1918: DEC
1919: ST_TO_ADDR
1920: LD_INT 3
1922: PUSH
1923: FOR_TO
1924: IFFALSE 2007
// begin PrepareHuman ( false , 1 , 2 ) ;
1926: LD_INT 0
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: LD_INT 2
1934: PPUSH
1935: CALL_OW 380
// un := CreateHuman ;
1939: LD_ADDR_VAR 0 3
1943: PUSH
1944: CALL_OW 44
1948: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1949: LD_ADDR_EXP 38
1953: PUSH
1954: LD_EXP 38
1958: PUSH
1959: LD_VAR 0 3
1963: UNION
1964: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
1965: LD_VAR 0 3
1969: PPUSH
1970: LD_INT 284
1972: PPUSH
1973: LD_INT 163
1975: PPUSH
1976: LD_INT 0
1978: PPUSH
1979: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
1983: LD_VAR 0 3
1987: PPUSH
1988: LD_INT 257
1990: PPUSH
1991: LD_INT 138
1993: PPUSH
1994: CALL_OW 111
// wait ( 0 0$1 ) ;
1998: LD_INT 35
2000: PPUSH
2001: CALL_OW 67
// end ;
2005: GO 1923
2007: POP
2008: POP
// for i := 1 to 6 do
2009: LD_ADDR_VAR 0 2
2013: PUSH
2014: DOUBLE
2015: LD_INT 1
2017: DEC
2018: ST_TO_ADDR
2019: LD_INT 6
2021: PUSH
2022: FOR_TO
2023: IFFALSE 2156
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 1
2030: PUSH
2031: LD_INT 1
2033: PUSH
2034: LD_INT 4
2036: PUSH
2037: EMPTY
2038: LIST
2039: LIST
2040: LIST
2041: PUSH
2042: LD_VAR 0 2
2046: PUSH
2047: LD_INT 3
2049: MOD
2050: PUSH
2051: LD_INT 1
2053: PLUS
2054: ARRAY
2055: PPUSH
2056: LD_INT 3
2058: PPUSH
2059: CALL_OW 380
// un := CreateHuman ;
2063: LD_ADDR_VAR 0 3
2067: PUSH
2068: CALL_OW 44
2072: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2073: LD_ADDR_EXP 38
2077: PUSH
2078: LD_EXP 38
2082: PUSH
2083: LD_VAR 0 3
2087: UNION
2088: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2089: LD_VAR 0 3
2093: PPUSH
2094: LD_INT 225
2096: PPUSH
2097: LD_INT 163
2099: PPUSH
2100: LD_INT 0
2102: PPUSH
2103: CALL_OW 48
// if i = 1 then
2107: LD_VAR 0 2
2111: PUSH
2112: LD_INT 1
2114: EQUAL
2115: IFFALSE 2132
// SetAttr ( un , attr_speed , 12 ) ;
2117: LD_VAR 0 3
2121: PPUSH
2122: LD_INT 2
2124: PPUSH
2125: LD_INT 12
2127: PPUSH
2128: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2132: LD_VAR 0 3
2136: PPUSH
2137: LD_INT 222
2139: PPUSH
2140: LD_INT 157
2142: PPUSH
2143: CALL_OW 111
// wait ( 0 0$1 ) ;
2147: LD_INT 35
2149: PPUSH
2150: CALL_OW 67
// end ;
2154: GO 2022
2156: POP
2157: POP
// end ; end_of_file
2158: LD_VAR 0 1
2162: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2163: LD_INT 0
2165: PPUSH
2166: PPUSH
2167: PPUSH
2168: PPUSH
2169: PPUSH
2170: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
2171: LD_INT 3
2173: PPUSH
2174: LD_INT 149
2176: PPUSH
2177: LD_INT 67
2179: PPUSH
2180: CALL_OW 428
2184: PPUSH
2185: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
2189: LD_ADDR_EXP 50
2193: PUSH
2194: LD_INT 111
2196: PPUSH
2197: LD_INT 89
2199: PPUSH
2200: CALL_OW 428
2204: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2205: LD_ADDR_VAR 0 2
2209: PUSH
2210: LD_INT 21
2212: PUSH
2213: LD_INT 3
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PUSH
2220: LD_INT 23
2222: PUSH
2223: LD_INT 3
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: PUSH
2230: EMPTY
2231: LIST
2232: LIST
2233: PPUSH
2234: CALL_OW 69
2238: PUSH
2239: FOR_IN
2240: IFFALSE 2256
// SetBLevel ( i , 5 ) ;
2242: LD_VAR 0 2
2246: PPUSH
2247: LD_INT 5
2249: PPUSH
2250: CALL_OW 241
2254: GO 2239
2256: POP
2257: POP
// SetBName ( kirov , kirov ) ;
2258: LD_INT 71
2260: PPUSH
2261: LD_STRING kirov
2263: PPUSH
2264: CALL_OW 500
// SetBName ( beria , beria ) ;
2268: LD_INT 106
2270: PPUSH
2271: LD_STRING beria
2273: PPUSH
2274: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2278: LD_INT 112
2280: PPUSH
2281: LD_STRING kagan
2283: PPUSH
2284: CALL_OW 500
// uc_side := 6 ;
2288: LD_ADDR_OWVAR 20
2292: PUSH
2293: LD_INT 6
2295: ST_TO_ADDR
// uc_nation := 3 ;
2296: LD_ADDR_OWVAR 21
2300: PUSH
2301: LD_INT 3
2303: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2304: LD_ADDR_VAR 0 5
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 6
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 30
2321: PUSH
2322: LD_INT 5
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PPUSH
2333: CALL_OW 69
2337: PUSH
2338: LD_INT 1
2340: ARRAY
2341: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
2342: LD_ADDR_VAR 0 4
2346: PUSH
2347: LD_INT 22
2349: PUSH
2350: LD_INT 6
2352: PUSH
2353: EMPTY
2354: LIST
2355: LIST
2356: PUSH
2357: LD_INT 30
2359: PUSH
2360: LD_INT 4
2362: PUSH
2363: EMPTY
2364: LIST
2365: LIST
2366: PUSH
2367: EMPTY
2368: LIST
2369: LIST
2370: PPUSH
2371: CALL_OW 69
2375: PUSH
2376: LD_INT 1
2378: ARRAY
2379: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
2380: LD_ADDR_EXP 44
2384: PUSH
2385: EMPTY
2386: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
2387: LD_ADDR_EXP 45
2391: PUSH
2392: EMPTY
2393: ST_TO_ADDR
// russianPatrol := [ ] ;
2394: LD_ADDR_EXP 47
2398: PUSH
2399: EMPTY
2400: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
2401: LD_ADDR_EXP 40
2405: PUSH
2406: LD_STRING Kurin
2408: PPUSH
2409: LD_INT 0
2411: PPUSH
2412: LD_STRING 
2414: PPUSH
2415: CALL 34423 0 3
2419: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
2420: LD_EXP 40
2424: PPUSH
2425: LD_INT 71
2427: PPUSH
2428: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
2432: LD_ADDR_EXP 42
2436: PUSH
2437: LD_STRING Popov
2439: PPUSH
2440: LD_INT 0
2442: PPUSH
2443: LD_STRING 
2445: PPUSH
2446: CALL 34423 0 3
2450: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
2451: LD_EXP 42
2455: PPUSH
2456: LD_INT 71
2458: PPUSH
2459: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
2463: LD_ADDR_EXP 41
2467: PUSH
2468: LD_STRING Grishko
2470: PPUSH
2471: LD_INT 0
2473: PPUSH
2474: LD_STRING 
2476: PPUSH
2477: CALL 34423 0 3
2481: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
2482: LD_EXP 41
2486: PPUSH
2487: LD_INT 207
2489: PPUSH
2490: LD_INT 106
2492: PPUSH
2493: LD_INT 0
2495: PPUSH
2496: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
2500: LD_EXP 41
2504: PPUSH
2505: LD_INT 209
2507: PPUSH
2508: LD_INT 106
2510: PPUSH
2511: CALL_OW 118
// for i := 1 to 2 do
2515: LD_ADDR_VAR 0 2
2519: PUSH
2520: DOUBLE
2521: LD_INT 1
2523: DEC
2524: ST_TO_ADDR
2525: LD_INT 2
2527: PUSH
2528: FOR_TO
2529: IFFALSE 2584
// begin PrepareHuman ( false , 2 , 2 ) ;
2531: LD_INT 0
2533: PPUSH
2534: LD_INT 2
2536: PPUSH
2537: LD_INT 2
2539: PPUSH
2540: CALL_OW 380
// un := CreateHuman ;
2544: LD_ADDR_VAR 0 3
2548: PUSH
2549: CALL_OW 44
2553: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2554: LD_VAR 0 3
2558: PPUSH
2559: LD_INT 71
2561: PPUSH
2562: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2566: LD_ADDR_EXP 44
2570: PUSH
2571: LD_EXP 44
2575: PUSH
2576: LD_VAR 0 3
2580: UNION
2581: ST_TO_ADDR
// end ;
2582: GO 2528
2584: POP
2585: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
2586: LD_ADDR_VAR 0 2
2590: PUSH
2591: DOUBLE
2592: LD_INT 1
2594: DEC
2595: ST_TO_ADDR
2596: LD_INT 5
2598: PUSH
2599: LD_INT 6
2601: PUSH
2602: LD_INT 6
2604: PUSH
2605: EMPTY
2606: LIST
2607: LIST
2608: LIST
2609: PUSH
2610: LD_OWVAR 67
2614: ARRAY
2615: PUSH
2616: FOR_TO
2617: IFFALSE 2691
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
2619: LD_INT 0
2621: PPUSH
2622: LD_INT 1
2624: PPUSH
2625: LD_INT 2
2627: PUSH
2628: LD_INT 3
2630: PUSH
2631: LD_INT 4
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: LIST
2638: PUSH
2639: LD_OWVAR 67
2643: ARRAY
2644: PPUSH
2645: CALL_OW 380
// un := CreateHuman ;
2649: LD_ADDR_VAR 0 3
2653: PUSH
2654: CALL_OW 44
2658: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
2659: LD_VAR 0 3
2663: PPUSH
2664: LD_VAR 0 5
2668: PPUSH
2669: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2673: LD_ADDR_EXP 44
2677: PUSH
2678: LD_EXP 44
2682: PUSH
2683: LD_VAR 0 3
2687: UNION
2688: ST_TO_ADDR
// end ;
2689: GO 2616
2691: POP
2692: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
2693: LD_ADDR_VAR 0 2
2697: PUSH
2698: LD_INT 22
2700: PUSH
2701: LD_INT 6
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PUSH
2708: LD_INT 30
2710: PUSH
2711: LD_INT 32
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PPUSH
2722: CALL_OW 69
2726: PUSH
2727: FOR_IN
2728: IFFALSE 2802
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 ] [ Difficulty ] ) ;
2730: LD_INT 0
2732: PPUSH
2733: LD_INT 1
2735: PPUSH
2736: LD_INT 3
2738: PUSH
2739: LD_INT 4
2741: PUSH
2742: LD_INT 4
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: LIST
2749: PUSH
2750: LD_OWVAR 67
2754: ARRAY
2755: PPUSH
2756: CALL_OW 380
// un := CreateHuman ;
2760: LD_ADDR_VAR 0 3
2764: PUSH
2765: CALL_OW 44
2769: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2770: LD_VAR 0 3
2774: PPUSH
2775: LD_VAR 0 2
2779: PPUSH
2780: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2784: LD_ADDR_EXP 44
2788: PUSH
2789: LD_EXP 44
2793: PUSH
2794: LD_VAR 0 3
2798: UNION
2799: ST_TO_ADDR
// end ;
2800: GO 2727
2802: POP
2803: POP
// for i := 1 to 3 do
2804: LD_ADDR_VAR 0 2
2808: PUSH
2809: DOUBLE
2810: LD_INT 1
2812: DEC
2813: ST_TO_ADDR
2814: LD_INT 3
2816: PUSH
2817: FOR_TO
2818: IFFALSE 2873
// begin PrepareHuman ( false , 3 , 3 ) ;
2820: LD_INT 0
2822: PPUSH
2823: LD_INT 3
2825: PPUSH
2826: LD_INT 3
2828: PPUSH
2829: CALL_OW 380
// un := CreateHuman ;
2833: LD_ADDR_VAR 0 3
2837: PUSH
2838: CALL_OW 44
2842: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
2843: LD_VAR 0 3
2847: PPUSH
2848: LD_INT 92
2850: PPUSH
2851: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2855: LD_ADDR_EXP 44
2859: PUSH
2860: LD_EXP 44
2864: PUSH
2865: LD_VAR 0 3
2869: UNION
2870: ST_TO_ADDR
// end ;
2871: GO 2817
2873: POP
2874: POP
// for i := 1 to 2 do
2875: LD_ADDR_VAR 0 2
2879: PUSH
2880: DOUBLE
2881: LD_INT 1
2883: DEC
2884: ST_TO_ADDR
2885: LD_INT 2
2887: PUSH
2888: FOR_TO
2889: IFFALSE 2944
// begin PrepareHuman ( false , 4 , 3 ) ;
2891: LD_INT 0
2893: PPUSH
2894: LD_INT 4
2896: PPUSH
2897: LD_INT 3
2899: PPUSH
2900: CALL_OW 380
// un := CreateHuman ;
2904: LD_ADDR_VAR 0 3
2908: PUSH
2909: CALL_OW 44
2913: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2914: LD_VAR 0 3
2918: PPUSH
2919: LD_INT 83
2921: PPUSH
2922: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2926: LD_ADDR_EXP 44
2930: PUSH
2931: LD_EXP 44
2935: PUSH
2936: LD_VAR 0 3
2940: UNION
2941: ST_TO_ADDR
// end ;
2942: GO 2888
2944: POP
2945: POP
// for i := 1 to 5 do
2946: LD_ADDR_VAR 0 2
2950: PUSH
2951: DOUBLE
2952: LD_INT 1
2954: DEC
2955: ST_TO_ADDR
2956: LD_INT 5
2958: PUSH
2959: FOR_TO
2960: IFFALSE 3017
// begin PrepareHuman ( false , 1 , 3 ) ;
2962: LD_INT 0
2964: PPUSH
2965: LD_INT 1
2967: PPUSH
2968: LD_INT 3
2970: PPUSH
2971: CALL_OW 380
// un := CreateHuman ;
2975: LD_ADDR_VAR 0 3
2979: PUSH
2980: CALL_OW 44
2984: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
2985: LD_VAR 0 3
2989: PPUSH
2990: LD_VAR 0 4
2994: PPUSH
2995: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
2999: LD_ADDR_EXP 46
3003: PUSH
3004: LD_EXP 46
3008: PUSH
3009: LD_VAR 0 3
3013: UNION
3014: ST_TO_ADDR
// end ;
3015: GO 2959
3017: POP
3018: POP
// russianCargo := [ ] ;
3019: LD_ADDR_EXP 49
3023: PUSH
3024: EMPTY
3025: ST_TO_ADDR
// for i := 1 to 2 do
3026: LD_ADDR_VAR 0 2
3030: PUSH
3031: DOUBLE
3032: LD_INT 1
3034: DEC
3035: ST_TO_ADDR
3036: LD_INT 2
3038: PUSH
3039: FOR_TO
3040: IFFALSE 3172
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3042: LD_INT 6
3044: PPUSH
3045: LD_INT 3
3047: PPUSH
3048: LD_INT 21
3050: PPUSH
3051: LD_INT 1
3053: PPUSH
3054: LD_INT 1
3056: PPUSH
3057: LD_INT 51
3059: PPUSH
3060: LD_INT 100
3062: PPUSH
3063: CALL 366 0 7
// un := CreateVehicle ;
3067: LD_ADDR_VAR 0 3
3071: PUSH
3072: CALL_OW 45
3076: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3077: LD_ADDR_EXP 49
3081: PUSH
3082: LD_EXP 49
3086: PUSH
3087: LD_VAR 0 3
3091: UNION
3092: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3093: LD_VAR 0 3
3097: PPUSH
3098: LD_INT 2
3100: PPUSH
3101: LD_INT 100
3103: PPUSH
3104: CALL_OW 290
// SetDir ( un , 4 ) ;
3108: LD_VAR 0 3
3112: PPUSH
3113: LD_INT 4
3115: PPUSH
3116: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3120: LD_VAR 0 3
3124: PPUSH
3125: LD_INT 147
3127: PPUSH
3128: LD_INT 103
3130: PPUSH
3131: LD_INT 4
3133: PPUSH
3134: LD_INT 0
3136: PPUSH
3137: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3141: LD_INT 0
3143: PPUSH
3144: LD_INT 1
3146: PPUSH
3147: LD_OWVAR 67
3151: PPUSH
3152: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3156: CALL_OW 44
3160: PPUSH
3161: LD_VAR 0 3
3165: PPUSH
3166: CALL_OW 52
// end ;
3170: GO 3039
3172: POP
3173: POP
// uc_side := 3 ;
3174: LD_ADDR_OWVAR 20
3178: PUSH
3179: LD_INT 3
3181: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3182: LD_ADDR_EXP 43
3186: PUSH
3187: LD_STRING Burlak
3189: PPUSH
3190: LD_INT 0
3192: PPUSH
3193: LD_STRING 
3195: PPUSH
3196: CALL 34423 0 3
3200: ST_TO_ADDR
// for i := 1 to 5 do
3201: LD_ADDR_VAR 0 2
3205: PUSH
3206: DOUBLE
3207: LD_INT 1
3209: DEC
3210: ST_TO_ADDR
3211: LD_INT 5
3213: PUSH
3214: FOR_TO
3215: IFFALSE 3308
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3217: LD_INT 0
3219: PPUSH
3220: LD_INT 1
3222: PPUSH
3223: LD_OWVAR 67
3227: PUSH
3228: LD_INT 1
3230: PLUS
3231: PPUSH
3232: CALL_OW 380
// un := CreateHuman ;
3236: LD_ADDR_VAR 0 3
3240: PUSH
3241: CALL_OW 44
3245: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3246: LD_VAR 0 3
3250: PPUSH
3251: LD_INT 22
3253: PUSH
3254: LD_INT 3
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 30
3263: PUSH
3264: LD_INT 32
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PPUSH
3275: CALL_OW 69
3279: PUSH
3280: LD_VAR 0 2
3284: ARRAY
3285: PPUSH
3286: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3290: LD_ADDR_EXP 45
3294: PUSH
3295: LD_EXP 45
3299: PUSH
3300: LD_VAR 0 3
3304: UNION
3305: ST_TO_ADDR
// end ;
3306: GO 3214
3308: POP
3309: POP
// for i := 1 to 2 do
3310: LD_ADDR_VAR 0 2
3314: PUSH
3315: DOUBLE
3316: LD_INT 1
3318: DEC
3319: ST_TO_ADDR
3320: LD_INT 2
3322: PUSH
3323: FOR_TO
3324: IFFALSE 3415
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3326: LD_INT 0
3328: PPUSH
3329: LD_INT 1
3331: PPUSH
3332: LD_OWVAR 67
3336: PUSH
3337: LD_INT 1
3339: PLUS
3340: PPUSH
3341: CALL_OW 380
// un := CreateHuman ;
3345: LD_ADDR_VAR 0 3
3349: PUSH
3350: CALL_OW 44
3354: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3355: LD_VAR 0 3
3359: PPUSH
3360: LD_INT 22
3362: PUSH
3363: LD_INT 3
3365: PUSH
3366: EMPTY
3367: LIST
3368: LIST
3369: PUSH
3370: LD_INT 30
3372: PUSH
3373: LD_INT 5
3375: PUSH
3376: EMPTY
3377: LIST
3378: LIST
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: PPUSH
3384: CALL_OW 69
3388: PUSH
3389: LD_INT 1
3391: ARRAY
3392: PPUSH
3393: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3397: LD_ADDR_EXP 45
3401: PUSH
3402: LD_EXP 45
3406: PUSH
3407: LD_VAR 0 3
3411: UNION
3412: ST_TO_ADDR
// end ;
3413: GO 3323
3415: POP
3416: POP
// for i := 1 to 2 do
3417: LD_ADDR_VAR 0 2
3421: PUSH
3422: DOUBLE
3423: LD_INT 1
3425: DEC
3426: ST_TO_ADDR
3427: LD_INT 2
3429: PUSH
3430: FOR_TO
3431: IFFALSE 3518
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3433: LD_INT 0
3435: PPUSH
3436: LD_INT 4
3438: PPUSH
3439: LD_OWVAR 67
3443: PPUSH
3444: CALL_OW 380
// un := CreateHuman ;
3448: LD_ADDR_VAR 0 3
3452: PUSH
3453: CALL_OW 44
3457: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
3458: LD_VAR 0 3
3462: PPUSH
3463: LD_INT 22
3465: PUSH
3466: LD_INT 3
3468: PUSH
3469: EMPTY
3470: LIST
3471: LIST
3472: PUSH
3473: LD_INT 30
3475: PUSH
3476: LD_INT 7
3478: PUSH
3479: EMPTY
3480: LIST
3481: LIST
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: PPUSH
3487: CALL_OW 69
3491: PUSH
3492: LD_INT 1
3494: ARRAY
3495: PPUSH
3496: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3500: LD_ADDR_EXP 45
3504: PUSH
3505: LD_EXP 45
3509: PUSH
3510: LD_VAR 0 3
3514: UNION
3515: ST_TO_ADDR
// end ;
3516: GO 3430
3518: POP
3519: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
3520: LD_INT 0
3522: PPUSH
3523: LD_INT 2
3525: PPUSH
3526: LD_OWVAR 67
3530: PPUSH
3531: CALL_OW 380
// un := CreateHuman ;
3535: LD_ADDR_VAR 0 3
3539: PUSH
3540: CALL_OW 44
3544: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
3545: LD_VAR 0 3
3549: PPUSH
3550: LD_INT 106
3552: PPUSH
3553: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3557: LD_ADDR_EXP 45
3561: PUSH
3562: LD_EXP 45
3566: PUSH
3567: LD_VAR 0 3
3571: UNION
3572: ST_TO_ADDR
// for i := 1 to 3 do
3573: LD_ADDR_VAR 0 2
3577: PUSH
3578: DOUBLE
3579: LD_INT 1
3581: DEC
3582: ST_TO_ADDR
3583: LD_INT 3
3585: PUSH
3586: FOR_TO
3587: IFFALSE 3709
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
3589: LD_ADDR_VAR 0 6
3593: PUSH
3594: LD_INT 22
3596: PUSH
3597: LD_INT 3
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PUSH
3604: LD_INT 30
3606: PUSH
3607: LD_INT 31
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: PUSH
3614: EMPTY
3615: LIST
3616: LIST
3617: PPUSH
3618: CALL_OW 69
3622: PUSH
3623: LD_VAR 0 2
3627: ARRAY
3628: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
3629: LD_INT 0
3631: PPUSH
3632: LD_INT 1
3634: PPUSH
3635: LD_OWVAR 67
3639: PPUSH
3640: CALL_OW 380
// un := CreateHuman ;
3644: LD_ADDR_VAR 0 3
3648: PUSH
3649: CALL_OW 44
3653: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
3654: LD_VAR 0 3
3658: PPUSH
3659: LD_VAR 0 6
3663: PPUSH
3664: CALL_OW 254
3668: PUSH
3669: LD_INT 3
3671: PLUS
3672: PPUSH
3673: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
3677: LD_VAR 0 3
3681: PPUSH
3682: LD_VAR 0 6
3686: PPUSH
3687: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3691: LD_ADDR_EXP 45
3695: PUSH
3696: LD_EXP 45
3700: PUSH
3701: LD_VAR 0 3
3705: UNION
3706: ST_TO_ADDR
// end ;
3707: GO 3586
3709: POP
3710: POP
// if Difficulty > 1 then
3711: LD_OWVAR 67
3715: PUSH
3716: LD_INT 1
3718: GREATER
3719: IFFALSE 3794
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
3721: LD_ADDR_VAR 0 3
3725: PUSH
3726: LD_INT 3
3728: PPUSH
3729: LD_INT 3
3731: PPUSH
3732: LD_INT 23
3734: PPUSH
3735: LD_INT 1
3737: PPUSH
3738: LD_INT 1
3740: PPUSH
3741: LD_INT 44
3743: PPUSH
3744: LD_INT 100
3746: PPUSH
3747: CALL 366 0 7
3751: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
3752: LD_VAR 0 3
3756: PPUSH
3757: LD_INT 73
3759: PPUSH
3760: LD_INT 110
3762: PPUSH
3763: LD_INT 0
3765: PPUSH
3766: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
3770: LD_INT 0
3772: PPUSH
3773: LD_INT 3
3775: PPUSH
3776: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
3780: CALL_OW 44
3784: PPUSH
3785: LD_VAR 0 3
3789: PPUSH
3790: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
3794: LD_ADDR_EXP 48
3798: PUSH
3799: EMPTY
3800: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 ] [ Difficulty ] do
3801: LD_ADDR_VAR 0 2
3805: PUSH
3806: DOUBLE
3807: LD_INT 1
3809: DEC
3810: ST_TO_ADDR
3811: LD_INT 6
3813: PUSH
3814: LD_INT 7
3816: PUSH
3817: LD_INT 8
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: LIST
3824: PUSH
3825: LD_OWVAR 67
3829: ARRAY
3830: PUSH
3831: FOR_TO
3832: IFFALSE 4056
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
3834: LD_INT 3
3836: PPUSH
3837: LD_INT 3
3839: PPUSH
3840: LD_INT 21
3842: PUSH
3843: LD_INT 23
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: PUSH
3850: LD_VAR 0 2
3854: PUSH
3855: LD_INT 2
3857: MOD
3858: PUSH
3859: LD_INT 1
3861: PLUS
3862: ARRAY
3863: PPUSH
3864: LD_INT 1
3866: PPUSH
3867: LD_INT 1
3869: PPUSH
3870: LD_INT 43
3872: PUSH
3873: LD_INT 44
3875: PUSH
3876: LD_INT 42
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: LIST
3883: PUSH
3884: LD_VAR 0 2
3888: PUSH
3889: LD_INT 3
3891: MOD
3892: PUSH
3893: LD_INT 1
3895: PLUS
3896: ARRAY
3897: PPUSH
3898: LD_INT 100
3900: PPUSH
3901: CALL 366 0 7
// un := CreateVehicle ;
3905: LD_ADDR_VAR 0 3
3909: PUSH
3910: CALL_OW 45
3914: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
3915: LD_VAR 0 3
3919: PPUSH
3920: LD_INT 0
3922: PUSH
3923: LD_INT 5
3925: PUSH
3926: EMPTY
3927: LIST
3928: LIST
3929: PUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_INT 2
3935: PPUSH
3936: CALL_OW 12
3940: ARRAY
3941: PPUSH
3942: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
3946: LD_ADDR_EXP 48
3950: PUSH
3951: LD_EXP 48
3955: PUSH
3956: LD_VAR 0 3
3960: UNION
3961: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
3962: LD_VAR 0 3
3966: PPUSH
3967: LD_INT 127
3969: PPUSH
3970: LD_INT 89
3972: PPUSH
3973: LD_INT 7
3975: PPUSH
3976: LD_INT 0
3978: PPUSH
3979: CALL_OW 50
// uc_side := 3 ;
3983: LD_ADDR_OWVAR 20
3987: PUSH
3988: LD_INT 3
3990: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
3991: LD_INT 0
3993: PPUSH
3994: LD_INT 3
3996: PPUSH
3997: LD_INT 3
3999: PPUSH
4000: CALL_OW 380
// un := CreateHuman ;
4004: LD_ADDR_VAR 0 3
4008: PUSH
4009: CALL_OW 44
4013: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4014: LD_ADDR_EXP 48
4018: PUSH
4019: LD_EXP 48
4023: PUSH
4024: LD_VAR 0 3
4028: UNION
4029: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4030: LD_VAR 0 3
4034: PPUSH
4035: LD_EXP 48
4039: PUSH
4040: LD_EXP 48
4044: PUSH
4045: LD_INT 1
4047: MINUS
4048: ARRAY
4049: PPUSH
4050: CALL_OW 52
// end ;
4054: GO 3831
4056: POP
4057: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
4058: LD_ADDR_VAR 0 2
4062: PUSH
4063: DOUBLE
4064: LD_INT 1
4066: DEC
4067: ST_TO_ADDR
4068: LD_INT 3
4070: PUSH
4071: LD_INT 4
4073: PUSH
4074: LD_INT 5
4076: PUSH
4077: EMPTY
4078: LIST
4079: LIST
4080: LIST
4081: PUSH
4082: LD_OWVAR 67
4086: ARRAY
4087: PUSH
4088: FOR_TO
4089: IFFALSE 4155
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4091: LD_INT 0
4093: PPUSH
4094: LD_INT 1
4096: PPUSH
4097: LD_OWVAR 67
4101: PPUSH
4102: CALL_OW 380
// un := CreateHuman ;
4106: LD_ADDR_VAR 0 3
4110: PUSH
4111: CALL_OW 44
4115: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4116: LD_ADDR_EXP 48
4120: PUSH
4121: LD_EXP 48
4125: PUSH
4126: LD_VAR 0 3
4130: UNION
4131: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4132: LD_VAR 0 3
4136: PPUSH
4137: LD_INT 91
4139: PPUSH
4140: LD_INT 60
4142: PPUSH
4143: LD_INT 3
4145: PPUSH
4146: LD_INT 0
4148: PPUSH
4149: CALL_OW 50
// end ;
4153: GO 4088
4155: POP
4156: POP
// end ;
4157: LD_VAR 0 1
4161: RET
// every 0 0$3 do var i ;
4162: GO 4164
4164: DISABLE
4165: LD_INT 0
4167: PPUSH
// begin for i := 1 to 4 do
4168: LD_ADDR_VAR 0 1
4172: PUSH
4173: DOUBLE
4174: LD_INT 1
4176: DEC
4177: ST_TO_ADDR
4178: LD_INT 4
4180: PUSH
4181: FOR_TO
4182: IFFALSE 4201
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4184: LD_EXP 46
4188: PUSH
4189: LD_VAR 0 1
4193: ARRAY
4194: PPUSH
4195: CALL_OW 122
4199: GO 4181
4201: POP
4202: POP
// wait ( 3 ) ;
4203: LD_INT 3
4205: PPUSH
4206: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4210: LD_EXP 46
4214: PUSH
4215: LD_INT 1
4217: ARRAY
4218: PPUSH
4219: LD_INT 22
4221: PUSH
4222: LD_INT 6
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: PUSH
4229: LD_INT 30
4231: PUSH
4232: LD_INT 31
4234: PUSH
4235: EMPTY
4236: LIST
4237: LIST
4238: PUSH
4239: EMPTY
4240: LIST
4241: LIST
4242: PPUSH
4243: CALL_OW 69
4247: PPUSH
4248: LD_EXP 46
4252: PUSH
4253: LD_INT 1
4255: ARRAY
4256: PPUSH
4257: CALL_OW 74
4261: PPUSH
4262: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4266: LD_EXP 46
4270: PUSH
4271: LD_INT 2
4273: ARRAY
4274: PPUSH
4275: LD_INT 211
4277: PPUSH
4278: LD_INT 107
4280: PPUSH
4281: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4285: LD_EXP 46
4289: PUSH
4290: LD_INT 2
4292: ARRAY
4293: PPUSH
4294: LD_INT 209
4296: PPUSH
4297: LD_INT 106
4299: PPUSH
4300: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4304: LD_EXP 46
4308: PUSH
4309: LD_INT 3
4311: ARRAY
4312: PPUSH
4313: LD_INT 209
4315: PPUSH
4316: LD_INT 103
4318: PPUSH
4319: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4323: LD_EXP 46
4327: PUSH
4328: LD_INT 3
4330: ARRAY
4331: PPUSH
4332: LD_INT 209
4334: PPUSH
4335: LD_INT 106
4337: PPUSH
4338: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4342: LD_EXP 46
4346: PUSH
4347: LD_INT 4
4349: ARRAY
4350: PPUSH
4351: LD_INT 227
4353: PPUSH
4354: LD_INT 117
4356: PPUSH
4357: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4361: LD_EXP 46
4365: PUSH
4366: LD_INT 4
4368: ARRAY
4369: PPUSH
4370: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4374: LD_INT 700
4376: PPUSH
4377: CALL_OW 67
// for i := 3 downto 2 do
4381: LD_ADDR_VAR 0 1
4385: PUSH
4386: DOUBLE
4387: LD_INT 3
4389: INC
4390: ST_TO_ADDR
4391: LD_INT 2
4393: PUSH
4394: FOR_DOWNTO
4395: IFFALSE 4562
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4397: LD_EXP 46
4401: PUSH
4402: LD_VAR 0 1
4406: ARRAY
4407: PPUSH
4408: LD_INT 200
4410: PPUSH
4411: LD_INT 91
4413: PPUSH
4414: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4418: LD_EXP 46
4422: PUSH
4423: LD_VAR 0 1
4427: ARRAY
4428: PPUSH
4429: LD_INT 210
4431: PPUSH
4432: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4436: LD_EXP 46
4440: PUSH
4441: LD_VAR 0 1
4445: ARRAY
4446: PPUSH
4447: LD_INT 224
4449: PPUSH
4450: LD_INT 93
4452: PPUSH
4453: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4457: LD_EXP 46
4461: PUSH
4462: LD_VAR 0 1
4466: ARRAY
4467: PPUSH
4468: LD_INT 210
4470: PPUSH
4471: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4475: LD_EXP 46
4479: PUSH
4480: LD_VAR 0 1
4484: ARRAY
4485: PPUSH
4486: LD_INT 239
4488: PPUSH
4489: LD_INT 123
4491: PPUSH
4492: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4496: LD_EXP 46
4500: PUSH
4501: LD_VAR 0 1
4505: ARRAY
4506: PPUSH
4507: LD_INT 210
4509: PPUSH
4510: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4514: LD_EXP 46
4518: PUSH
4519: LD_VAR 0 1
4523: ARRAY
4524: PPUSH
4525: LD_INT 212
4527: PPUSH
4528: LD_INT 105
4530: PPUSH
4531: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4535: LD_EXP 46
4539: PUSH
4540: LD_VAR 0 1
4544: ARRAY
4545: PPUSH
4546: LD_INT 700
4548: PPUSH
4549: CALL_OW 202
// wait ( 0 0$30 ) ;
4553: LD_INT 1050
4555: PPUSH
4556: CALL_OW 67
// end ;
4560: GO 4394
4562: POP
4563: POP
// until not activeGrishkoAI ;
4564: LD_EXP 10
4568: NOT
4569: IFFALSE 4374
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
4571: LD_EXP 46
4575: PPUSH
4576: LD_INT 221
4578: PPUSH
4579: LD_INT 110
4581: PPUSH
4582: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
4586: LD_EXP 46
4590: PPUSH
4591: LD_INT 228
4593: PPUSH
4594: LD_INT 115
4596: PPUSH
4597: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
4601: LD_EXP 46
4605: PPUSH
4606: CALL_OW 200
// end ;
4610: PPOPN 1
4612: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
4613: LD_EXP 12
4617: IFFALSE 5359
4619: GO 4621
4621: DISABLE
4622: LD_INT 0
4624: PPUSH
4625: PPUSH
4626: PPUSH
4627: PPUSH
// begin uc_side := 6 ;
4628: LD_ADDR_OWVAR 20
4632: PUSH
4633: LD_INT 6
4635: ST_TO_ADDR
// uc_nation := 3 ;
4636: LD_ADDR_OWVAR 21
4640: PUSH
4641: LD_INT 3
4643: ST_TO_ADDR
// for i := 1 to 3 do
4644: LD_ADDR_VAR 0 2
4648: PUSH
4649: DOUBLE
4650: LD_INT 1
4652: DEC
4653: ST_TO_ADDR
4654: LD_INT 3
4656: PUSH
4657: FOR_TO
4658: IFFALSE 4767
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
4660: LD_INT 0
4662: PPUSH
4663: LD_INT 1
4665: PPUSH
4666: LD_INT 2
4668: PUSH
4669: LD_INT 3
4671: PUSH
4672: LD_INT 4
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: LIST
4679: PUSH
4680: LD_OWVAR 67
4684: ARRAY
4685: PPUSH
4686: CALL_OW 380
// un := CreateHuman ;
4690: LD_ADDR_VAR 0 1
4694: PUSH
4695: CALL_OW 44
4699: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
4700: LD_ADDR_EXP 47
4704: PUSH
4705: LD_EXP 47
4709: PUSH
4710: LD_VAR 0 1
4714: UNION
4715: ST_TO_ADDR
// SetTag ( un , 1 ) ;
4716: LD_VAR 0 1
4720: PPUSH
4721: LD_INT 1
4723: PPUSH
4724: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
4728: LD_VAR 0 1
4732: PPUSH
4733: LD_INT 11
4735: PPUSH
4736: LD_INT 0
4738: PPUSH
4739: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
4743: LD_VAR 0 1
4747: PPUSH
4748: LD_INT 210
4750: PPUSH
4751: LD_INT 159
4753: PPUSH
4754: CALL_OW 111
// wait ( 0 0$2 ) ;
4758: LD_INT 70
4760: PPUSH
4761: CALL_OW 67
// end ;
4765: GO 4657
4767: POP
4768: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
4769: LD_ADDR_VAR 0 4
4773: PUSH
4774: LD_INT 172
4776: PUSH
4777: LD_INT 76
4779: PUSH
4780: EMPTY
4781: LIST
4782: LIST
4783: PUSH
4784: LD_INT 150
4786: PUSH
4787: LD_INT 38
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: PUSH
4794: LD_INT 148
4796: PUSH
4797: LD_INT 9
4799: PUSH
4800: EMPTY
4801: LIST
4802: LIST
4803: PUSH
4804: LD_INT 165
4806: PUSH
4807: LD_INT 38
4809: PUSH
4810: EMPTY
4811: LIST
4812: LIST
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: PUSH
4820: LD_INT 191
4822: PUSH
4823: LD_INT 77
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: PUSH
4830: LD_INT 168
4832: PUSH
4833: LD_INT 42
4835: PUSH
4836: EMPTY
4837: LIST
4838: LIST
4839: PUSH
4840: LD_INT 166
4842: PUSH
4843: LD_INT 11
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: PUSH
4850: LD_INT 151
4852: PUSH
4853: LD_INT 12
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: PUSH
4866: LD_INT 221
4868: PUSH
4869: LD_INT 88
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: PUSH
4876: LD_INT 217
4878: PUSH
4879: LD_INT 64
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: PUSH
4886: LD_INT 232
4888: PUSH
4889: LD_INT 66
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: PUSH
4896: LD_INT 200
4898: PUSH
4899: LD_INT 56
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: LIST
4916: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4917: LD_INT 35
4919: PPUSH
4920: CALL_OW 67
// for i := russianPatrol downto 1 do
4924: LD_ADDR_VAR 0 2
4928: PUSH
4929: DOUBLE
4930: LD_EXP 47
4934: INC
4935: ST_TO_ADDR
4936: LD_INT 1
4938: PUSH
4939: FOR_DOWNTO
4940: IFFALSE 5323
// begin if IsDead ( russianPatrol [ i ] ) then
4942: LD_EXP 47
4946: PUSH
4947: LD_VAR 0 2
4951: ARRAY
4952: PPUSH
4953: CALL_OW 301
4957: IFFALSE 4961
// continue ;
4959: GO 4939
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
4961: LD_EXP 47
4965: PUSH
4966: LD_VAR 0 2
4970: ARRAY
4971: PPUSH
4972: CALL_OW 256
4976: PUSH
4977: LD_INT 990
4979: LESS
4980: PUSH
4981: LD_EXP 47
4985: PUSH
4986: LD_VAR 0 2
4990: ARRAY
4991: PPUSH
4992: CALL_OW 110
4996: PUSH
4997: LD_INT 1
4999: EQUAL
5000: AND
5001: IFFALSE 5021
// SetTag ( russianPatrol [ i ] , 2 ) ;
5003: LD_EXP 47
5007: PUSH
5008: LD_VAR 0 2
5012: ARRAY
5013: PPUSH
5014: LD_INT 2
5016: PPUSH
5017: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5021: LD_EXP 47
5025: PUSH
5026: LD_VAR 0 2
5030: ARRAY
5031: PPUSH
5032: CALL_OW 110
5036: PUSH
5037: LD_INT 2
5039: EQUAL
5040: IFFALSE 5107
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5042: LD_EXP 47
5046: PUSH
5047: LD_VAR 0 2
5051: ARRAY
5052: PPUSH
5053: LD_INT 166
5055: PPUSH
5056: LD_INT 101
5058: PPUSH
5059: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5063: LD_EXP 47
5067: PUSH
5068: LD_VAR 0 2
5072: ARRAY
5073: PPUSH
5074: LD_INT 71
5076: PPUSH
5077: CALL_OW 296
5081: PUSH
5082: LD_INT 10
5084: LESS
5085: IFFALSE 5105
// SetTag ( russianPatrol [ i ] , 3 ) ;
5087: LD_EXP 47
5091: PUSH
5092: LD_VAR 0 2
5096: ARRAY
5097: PPUSH
5098: LD_INT 3
5100: PPUSH
5101: CALL_OW 109
// continue ;
5105: GO 4939
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5107: LD_EXP 47
5111: PUSH
5112: LD_VAR 0 2
5116: ARRAY
5117: PPUSH
5118: CALL_OW 110
5122: PUSH
5123: LD_INT 3
5125: EQUAL
5126: IFFALSE 5221
// begin spottedByPatrol := true ;
5128: LD_ADDR_EXP 7
5132: PUSH
5133: LD_INT 1
5135: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5136: LD_EXP 47
5140: PUSH
5141: LD_VAR 0 2
5145: ARRAY
5146: PPUSH
5147: CALL_OW 250
5151: PPUSH
5152: LD_EXP 47
5156: PUSH
5157: LD_VAR 0 2
5161: ARRAY
5162: PPUSH
5163: CALL_OW 251
5167: PPUSH
5168: LD_INT 2
5170: PPUSH
5171: LD_INT 6
5173: NEG
5174: PPUSH
5175: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
5179: LD_EXP 47
5183: PUSH
5184: LD_VAR 0 2
5188: ARRAY
5189: PPUSH
5190: CALL_OW 87
// DialogueOn ;
5194: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
5198: LD_EXP 25
5202: PPUSH
5203: LD_STRING DH-Spot-f-3
5205: PPUSH
5206: CALL_OW 88
// DialogueOff ;
5210: CALL_OW 7
// YouLost ( Spotted ) ;
5214: LD_STRING Spotted
5216: PPUSH
5217: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
5221: LD_EXP 47
5225: PUSH
5226: LD_VAR 0 2
5230: ARRAY
5231: PPUSH
5232: CALL_OW 314
5236: NOT
5237: IFFALSE 5321
// for j in patrol [ i ] do
5239: LD_ADDR_VAR 0 3
5243: PUSH
5244: LD_VAR 0 4
5248: PUSH
5249: LD_VAR 0 2
5253: ARRAY
5254: PUSH
5255: FOR_IN
5256: IFFALSE 5319
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5258: LD_EXP 47
5262: PUSH
5263: LD_VAR 0 2
5267: ARRAY
5268: PPUSH
5269: LD_INT 35
5271: PPUSH
5272: LD_INT 175
5274: PPUSH
5275: CALL_OW 12
5279: PPUSH
5280: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5284: LD_EXP 47
5288: PUSH
5289: LD_VAR 0 2
5293: ARRAY
5294: PPUSH
5295: LD_VAR 0 3
5299: PUSH
5300: LD_INT 1
5302: ARRAY
5303: PPUSH
5304: LD_VAR 0 3
5308: PUSH
5309: LD_INT 2
5311: ARRAY
5312: PPUSH
5313: CALL_OW 174
// end ;
5317: GO 5255
5319: POP
5320: POP
// end ;
5321: GO 4939
5323: POP
5324: POP
// until not russianPatrol or russianAlert ;
5325: LD_EXP 47
5329: NOT
5330: PUSH
5331: LD_EXP 9
5335: OR
5336: IFFALSE 4917
// if russianPatrol then
5338: LD_EXP 47
5342: IFFALSE 5359
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5344: LD_EXP 47
5348: PPUSH
5349: LD_INT 161
5351: PPUSH
5352: LD_INT 107
5354: PPUSH
5355: CALL_OW 114
// end ;
5359: PPOPN 4
5361: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5362: LD_EXP 6
5366: PUSH
5367: LD_EXP 13
5371: NOT
5372: AND
5373: IFFALSE 5859
5375: GO 5377
5377: DISABLE
5378: LD_INT 0
5380: PPUSH
5381: PPUSH
5382: PPUSH
5383: PPUSH
5384: PPUSH
// begin enable ;
5385: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5386: LD_ADDR_VAR 0 2
5390: PUSH
5391: LD_EXP 48
5395: PPUSH
5396: LD_INT 21
5398: PUSH
5399: LD_INT 2
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PPUSH
5406: CALL_OW 72
5410: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5411: LD_ADDR_VAR 0 4
5415: PUSH
5416: LD_INT 22
5418: PUSH
5419: LD_INT 4
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: PPUSH
5426: CALL_OW 69
5430: ST_TO_ADDR
// for i in filter do
5431: LD_ADDR_VAR 0 1
5435: PUSH
5436: LD_VAR 0 2
5440: PUSH
5441: FOR_IN
5442: IFFALSE 5857
// begin tmp := IsDrivenBy ( i ) ;
5444: LD_ADDR_VAR 0 3
5448: PUSH
5449: LD_VAR 0 1
5453: PPUSH
5454: CALL_OW 311
5458: ST_TO_ADDR
// if not tmp then
5459: LD_VAR 0 3
5463: NOT
5464: IFFALSE 5468
// continue ;
5466: GO 5441
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5468: LD_VAR 0 1
5472: PPUSH
5473: CALL_OW 261
5477: PUSH
5478: LD_INT 90
5480: GREATER
5481: PUSH
5482: LD_VAR 0 1
5486: PPUSH
5487: CALL_OW 110
5491: PUSH
5492: LD_INT 2
5494: EQUAL
5495: AND
5496: IFFALSE 5512
// SetTag ( i , 0 ) else
5498: LD_VAR 0 1
5502: PPUSH
5503: LD_INT 0
5505: PPUSH
5506: CALL_OW 109
5510: GO 5608
// if GetTag ( i ) = 2 then
5512: LD_VAR 0 1
5516: PPUSH
5517: CALL_OW 110
5521: PUSH
5522: LD_INT 2
5524: EQUAL
5525: IFFALSE 5608
// begin x := rand ( 1 , 2 ) ;
5527: LD_ADDR_VAR 0 5
5531: PUSH
5532: LD_INT 1
5534: PPUSH
5535: LD_INT 2
5537: PPUSH
5538: CALL_OW 12
5542: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5543: LD_VAR 0 1
5547: PPUSH
5548: LD_EXP 49
5552: PUSH
5553: LD_VAR 0 5
5557: ARRAY
5558: PPUSH
5559: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
5563: LD_EXP 49
5567: PUSH
5568: LD_VAR 0 5
5572: ARRAY
5573: PPUSH
5574: LD_INT 2
5576: PPUSH
5577: CALL_OW 289
5581: PUSH
5582: LD_INT 20
5584: LESS
5585: IFFALSE 5608
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
5587: LD_EXP 49
5591: PUSH
5592: LD_VAR 0 5
5596: ARRAY
5597: PPUSH
5598: LD_INT 2
5600: PPUSH
5601: LD_INT 100
5603: PPUSH
5604: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5608: LD_VAR 0 1
5612: PPUSH
5613: CALL_OW 256
5617: PUSH
5618: LD_INT 600
5620: GREATEREQUAL
5621: PUSH
5622: LD_VAR 0 1
5626: PPUSH
5627: CALL_OW 110
5631: NOT
5632: AND
5633: IFFALSE 5659
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5635: LD_VAR 0 1
5639: PPUSH
5640: LD_VAR 0 4
5644: PPUSH
5645: LD_VAR 0 1
5649: PPUSH
5650: CALL_OW 74
5654: PPUSH
5655: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5659: LD_VAR 0 1
5663: PPUSH
5664: CALL_OW 256
5668: PUSH
5669: LD_INT 600
5671: LESS
5672: PUSH
5673: LD_VAR 0 1
5677: PPUSH
5678: CALL_OW 110
5682: NOT
5683: AND
5684: IFFALSE 5713
// begin SetTag ( i , 1 ) ;
5686: LD_VAR 0 1
5690: PPUSH
5691: LD_INT 1
5693: PPUSH
5694: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5698: LD_VAR 0 1
5702: PPUSH
5703: LD_INT 62
5705: PPUSH
5706: LD_INT 22
5708: PPUSH
5709: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5713: LD_VAR 0 1
5717: PPUSH
5718: CALL_OW 110
5722: PUSH
5723: LD_INT 1
5725: EQUAL
5726: PUSH
5727: LD_VAR 0 1
5731: PPUSH
5732: LD_INT 62
5734: PPUSH
5735: LD_INT 22
5737: PPUSH
5738: CALL_OW 297
5742: PUSH
5743: LD_INT 6
5745: LESS
5746: AND
5747: PUSH
5748: LD_VAR 0 3
5752: AND
5753: IFFALSE 5855
// begin ComExitVehicle ( tmp ) ;
5755: LD_VAR 0 3
5759: PPUSH
5760: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
5764: LD_VAR 0 3
5768: PPUSH
5769: LD_VAR 0 1
5773: PPUSH
5774: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5778: LD_INT 35
5780: PPUSH
5781: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5785: LD_VAR 0 1
5789: PPUSH
5790: CALL_OW 256
5794: PUSH
5795: LD_INT 1000
5797: EQUAL
5798: IFFALSE 5778
// ComEnterUnit ( tmp , i ) ;
5800: LD_VAR 0 3
5804: PPUSH
5805: LD_VAR 0 1
5809: PPUSH
5810: CALL_OW 120
// if GetFuel ( i ) <= 90 then
5814: LD_VAR 0 1
5818: PPUSH
5819: CALL_OW 261
5823: PUSH
5824: LD_INT 90
5826: LESSEQUAL
5827: IFFALSE 5843
// SetTag ( i , 2 ) else
5829: LD_VAR 0 1
5833: PPUSH
5834: LD_INT 2
5836: PPUSH
5837: CALL_OW 109
5841: GO 5855
// SetTag ( i , 0 ) ;
5843: LD_VAR 0 1
5847: PPUSH
5848: LD_INT 0
5850: PPUSH
5851: CALL_OW 109
// end ; end ;
5855: GO 5441
5857: POP
5858: POP
// end ;
5859: PPOPN 5
5861: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
5862: LD_EXP 20
5866: IFFALSE 6089
5868: GO 5870
5870: DISABLE
5871: LD_INT 0
5873: PPUSH
5874: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
5875: LD_EXP 49
5879: PPUSH
5880: LD_INT 79
5882: PPUSH
5883: LD_INT 155
5885: PPUSH
5886: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
5890: LD_EXP 49
5894: PPUSH
5895: LD_INT 16
5897: PPUSH
5898: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5902: LD_ADDR_VAR 0 2
5906: PUSH
5907: LD_EXP 48
5911: PPUSH
5912: LD_INT 50
5914: PUSH
5915: EMPTY
5916: LIST
5917: PPUSH
5918: CALL_OW 72
5922: ST_TO_ADDR
// for i in tmp do
5923: LD_ADDR_VAR 0 1
5927: PUSH
5928: LD_VAR 0 2
5932: PUSH
5933: FOR_IN
5934: IFFALSE 5968
// begin ComAgressiveMove ( i , 123 , 60 ) ;
5936: LD_VAR 0 1
5940: PPUSH
5941: LD_INT 123
5943: PPUSH
5944: LD_INT 60
5946: PPUSH
5947: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
5951: LD_VAR 0 1
5955: PPUSH
5956: LD_INT 153
5958: PPUSH
5959: LD_INT 103
5961: PPUSH
5962: CALL_OW 174
// end ;
5966: GO 5933
5968: POP
5969: POP
// repeat wait ( 0 0$1 ) ;
5970: LD_INT 35
5972: PPUSH
5973: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5977: LD_ADDR_VAR 0 2
5981: PUSH
5982: LD_EXP 48
5986: PPUSH
5987: LD_INT 50
5989: PUSH
5990: EMPTY
5991: LIST
5992: PPUSH
5993: CALL_OW 72
5997: ST_TO_ADDR
// for i in tmp do
5998: LD_ADDR_VAR 0 1
6002: PUSH
6003: LD_VAR 0 2
6007: PUSH
6008: FOR_IN
6009: IFFALSE 6080
// if not HasTask ( i ) then
6011: LD_VAR 0 1
6015: PPUSH
6016: CALL_OW 314
6020: NOT
6021: IFFALSE 6078
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
6023: LD_VAR 0 1
6027: PPUSH
6028: LD_INT 81
6030: PUSH
6031: LD_INT 3
6033: PUSH
6034: EMPTY
6035: LIST
6036: LIST
6037: PUSH
6038: LD_INT 3
6040: PUSH
6041: LD_INT 21
6043: PUSH
6044: LD_INT 3
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: PUSH
6055: EMPTY
6056: LIST
6057: LIST
6058: PPUSH
6059: CALL_OW 69
6063: PPUSH
6064: LD_VAR 0 1
6068: PPUSH
6069: CALL_OW 74
6073: PPUSH
6074: CALL_OW 115
6078: GO 6008
6080: POP
6081: POP
6082: LD_VAR 0 2
6086: NOT
6087: IFFALSE 5970
// end ;
6089: PPOPN 2
6091: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6092: LD_INT 22
6094: PUSH
6095: LD_INT 3
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: PUSH
6102: LD_INT 32
6104: PUSH
6105: LD_INT 1
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: PPUSH
6116: CALL_OW 69
6120: IFFALSE 6199
6122: GO 6124
6124: DISABLE
6125: LD_INT 0
6127: PPUSH
// begin enable ;
6128: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6129: LD_ADDR_VAR 0 1
6133: PUSH
6134: LD_INT 22
6136: PUSH
6137: LD_INT 3
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: LD_INT 32
6146: PUSH
6147: LD_INT 1
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PPUSH
6158: CALL_OW 69
6162: PUSH
6163: FOR_IN
6164: IFFALSE 6197
// if GetFuel ( i ) < 1 then
6166: LD_VAR 0 1
6170: PPUSH
6171: CALL_OW 261
6175: PUSH
6176: LD_INT 1
6178: LESS
6179: IFFALSE 6195
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6181: LD_VAR 0 1
6185: PPUSH
6186: CALL_OW 311
6190: PPUSH
6191: CALL_OW 121
6195: GO 6163
6197: POP
6198: POP
// end ; end_of_file
6199: PPOPN 1
6201: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6202: LD_INT 0
6204: PPUSH
6205: PPUSH
6206: PPUSH
// SetBName ( omikron , omikron ) ;
6207: LD_INT 64
6209: PPUSH
6210: LD_STRING omikron
6212: PPUSH
6213: CALL_OW 500
// uc_side := 4 ;
6217: LD_ADDR_OWVAR 20
6221: PUSH
6222: LD_INT 4
6224: ST_TO_ADDR
// uc_nation := 1 ;
6225: LD_ADDR_OWVAR 21
6229: PUSH
6230: LD_INT 1
6232: ST_TO_ADDR
// omicronSquad := [ ] ;
6233: LD_ADDR_EXP 51
6237: PUSH
6238: EMPTY
6239: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6240: LD_ADDR_VAR 0 2
6244: PUSH
6245: LD_INT 22
6247: PUSH
6248: LD_INT 4
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 2
6257: PUSH
6258: LD_INT 30
6260: PUSH
6261: LD_INT 32
6263: PUSH
6264: EMPTY
6265: LIST
6266: LIST
6267: PUSH
6268: LD_INT 30
6270: PUSH
6271: LD_INT 31
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: LIST
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PPUSH
6287: CALL_OW 69
6291: PUSH
6292: FOR_IN
6293: IFFALSE 6350
// begin PrepareHuman ( false , 1 , 1 ) ;
6295: LD_INT 0
6297: PPUSH
6298: LD_INT 1
6300: PPUSH
6301: LD_INT 1
6303: PPUSH
6304: CALL_OW 380
// un := CreateHuman ;
6308: LD_ADDR_VAR 0 3
6312: PUSH
6313: CALL_OW 44
6317: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6318: LD_ADDR_EXP 51
6322: PUSH
6323: LD_EXP 51
6327: PUSH
6328: LD_VAR 0 3
6332: UNION
6333: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6334: LD_VAR 0 3
6338: PPUSH
6339: LD_VAR 0 2
6343: PPUSH
6344: CALL_OW 52
// end ;
6348: GO 6292
6350: POP
6351: POP
// for i := 1 to 3 do
6352: LD_ADDR_VAR 0 2
6356: PUSH
6357: DOUBLE
6358: LD_INT 1
6360: DEC
6361: ST_TO_ADDR
6362: LD_INT 3
6364: PUSH
6365: FOR_TO
6366: IFFALSE 6421
// begin PrepareHuman ( false , 2 , 2 ) ;
6368: LD_INT 0
6370: PPUSH
6371: LD_INT 2
6373: PPUSH
6374: LD_INT 2
6376: PPUSH
6377: CALL_OW 380
// un := CreateHuman ;
6381: LD_ADDR_VAR 0 3
6385: PUSH
6386: CALL_OW 44
6390: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6391: LD_ADDR_EXP 51
6395: PUSH
6396: LD_EXP 51
6400: PUSH
6401: LD_VAR 0 3
6405: UNION
6406: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6407: LD_VAR 0 3
6411: PPUSH
6412: LD_INT 64
6414: PPUSH
6415: CALL_OW 52
// end ;
6419: GO 6365
6421: POP
6422: POP
// for i := 1 to 2 do
6423: LD_ADDR_VAR 0 2
6427: PUSH
6428: DOUBLE
6429: LD_INT 1
6431: DEC
6432: ST_TO_ADDR
6433: LD_INT 2
6435: PUSH
6436: FOR_TO
6437: IFFALSE 6576
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6439: LD_INT 4
6441: PPUSH
6442: LD_INT 1
6444: PPUSH
6445: LD_INT 2
6447: PPUSH
6448: LD_INT 2
6450: PPUSH
6451: LD_INT 1
6453: PPUSH
6454: LD_INT 3
6456: PPUSH
6457: LD_INT 100
6459: PPUSH
6460: CALL 366 0 7
// un := CreateVehicle ;
6464: LD_ADDR_VAR 0 3
6468: PUSH
6469: CALL_OW 45
6473: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6474: LD_ADDR_EXP 51
6478: PUSH
6479: LD_EXP 51
6483: PUSH
6484: LD_VAR 0 3
6488: UNION
6489: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
6490: LD_VAR 0 3
6494: PPUSH
6495: LD_INT 28
6497: PPUSH
6498: LD_INT 37
6500: PPUSH
6501: LD_INT 6
6503: PPUSH
6504: LD_INT 0
6506: PPUSH
6507: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
6511: LD_INT 0
6513: PPUSH
6514: LD_INT 3
6516: PPUSH
6517: LD_INT 2
6519: PPUSH
6520: CALL_OW 380
// un := CreateHuman ;
6524: LD_ADDR_VAR 0 3
6528: PUSH
6529: CALL_OW 44
6533: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6534: LD_ADDR_EXP 51
6538: PUSH
6539: LD_EXP 51
6543: PUSH
6544: LD_VAR 0 3
6548: UNION
6549: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
6550: LD_VAR 0 3
6554: PPUSH
6555: LD_EXP 51
6559: PUSH
6560: LD_EXP 51
6564: PUSH
6565: LD_INT 1
6567: MINUS
6568: ARRAY
6569: PPUSH
6570: CALL_OW 52
// end ;
6574: GO 6436
6576: POP
6577: POP
// end ;
6578: LD_VAR 0 1
6582: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
6583: LD_INT 0
6585: PPUSH
6586: PPUSH
6587: PPUSH
6588: PPUSH
// uc_side := 4 ;
6589: LD_ADDR_OWVAR 20
6593: PUSH
6594: LD_INT 4
6596: ST_TO_ADDR
// uc_nation := 1 ;
6597: LD_ADDR_OWVAR 21
6601: PUSH
6602: LD_INT 1
6604: ST_TO_ADDR
// tmp := [ ] ;
6605: LD_ADDR_VAR 0 4
6609: PUSH
6610: EMPTY
6611: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
6612: LD_INT 4
6614: PPUSH
6615: LD_INT 1
6617: PPUSH
6618: LD_INT 2
6620: PPUSH
6621: LD_INT 1
6623: PPUSH
6624: LD_INT 1
6626: PPUSH
6627: LD_INT 4
6629: PPUSH
6630: LD_INT 77
6632: PPUSH
6633: CALL 366 0 7
// un := CreateVehicle ;
6637: LD_ADDR_VAR 0 3
6641: PUSH
6642: CALL_OW 45
6646: ST_TO_ADDR
// tmp := tmp union un ;
6647: LD_ADDR_VAR 0 4
6651: PUSH
6652: LD_VAR 0 4
6656: PUSH
6657: LD_VAR 0 3
6661: UNION
6662: ST_TO_ADDR
// SetDir ( un , 2 ) ;
6663: LD_VAR 0 3
6667: PPUSH
6668: LD_INT 2
6670: PPUSH
6671: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
6675: LD_VAR 0 3
6679: PPUSH
6680: LD_INT 106
6682: PPUSH
6683: LD_INT 3
6685: PPUSH
6686: LD_INT 0
6688: PPUSH
6689: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
6693: LD_INT 0
6695: PPUSH
6696: LD_INT 3
6698: PPUSH
6699: LD_INT 2
6701: PPUSH
6702: CALL_OW 380
// un := CreateHuman ;
6706: LD_ADDR_VAR 0 3
6710: PUSH
6711: CALL_OW 44
6715: ST_TO_ADDR
// tmp := tmp union un ;
6716: LD_ADDR_VAR 0 4
6720: PUSH
6721: LD_VAR 0 4
6725: PUSH
6726: LD_VAR 0 3
6730: UNION
6731: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
6732: LD_VAR 0 3
6736: PPUSH
6737: LD_VAR 0 4
6741: PUSH
6742: LD_VAR 0 4
6746: PUSH
6747: LD_INT 1
6749: MINUS
6750: ARRAY
6751: PPUSH
6752: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
6756: LD_VAR 0 3
6760: PPUSH
6761: LD_INT 109
6763: PPUSH
6764: LD_INT 9
6766: PPUSH
6767: CALL_OW 111
// wait ( 0 0$1 ) ;
6771: LD_INT 35
6773: PPUSH
6774: CALL_OW 67
// for i := 1 to 2 do
6778: LD_ADDR_VAR 0 2
6782: PUSH
6783: DOUBLE
6784: LD_INT 1
6786: DEC
6787: ST_TO_ADDR
6788: LD_INT 2
6790: PUSH
6791: FOR_TO
6792: IFFALSE 6856
// begin PrepareHuman ( false , 1 , 2 ) ;
6794: LD_INT 0
6796: PPUSH
6797: LD_INT 1
6799: PPUSH
6800: LD_INT 2
6802: PPUSH
6803: CALL_OW 380
// un := CreateHuman ;
6807: LD_ADDR_VAR 0 3
6811: PUSH
6812: CALL_OW 44
6816: ST_TO_ADDR
// tmp := tmp union un ;
6817: LD_ADDR_VAR 0 4
6821: PUSH
6822: LD_VAR 0 4
6826: PUSH
6827: LD_VAR 0 3
6831: UNION
6832: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
6833: LD_VAR 0 3
6837: PPUSH
6838: LD_INT 105
6840: PPUSH
6841: LD_INT 2
6843: PPUSH
6844: LD_INT 2
6846: PPUSH
6847: LD_INT 0
6849: PPUSH
6850: CALL_OW 50
// end ;
6854: GO 6791
6856: POP
6857: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
6858: LD_VAR 0 4
6862: PPUSH
6863: LD_INT 26
6865: PPUSH
6866: LD_INT 35
6868: PPUSH
6869: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
6873: LD_INT 35
6875: PPUSH
6876: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
6880: LD_VAR 0 4
6884: PPUSH
6885: LD_INT 50
6887: PUSH
6888: EMPTY
6889: LIST
6890: PPUSH
6891: CALL_OW 72
6895: NOT
6896: IFFALSE 6900
// exit ;
6898: GO 7027
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
6900: LD_VAR 0 4
6904: PPUSH
6905: LD_INT 91
6907: PUSH
6908: LD_INT 64
6910: PUSH
6911: LD_INT 12
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: LIST
6918: PPUSH
6919: CALL_OW 72
6923: PUSH
6924: LD_VAR 0 4
6928: EQUAL
6929: IFFALSE 6873
// omicronSquad := omicronSquad union tmp ;
6931: LD_ADDR_EXP 51
6935: PUSH
6936: LD_EXP 51
6940: PUSH
6941: LD_VAR 0 4
6945: UNION
6946: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
6947: LD_ADDR_VAR 0 2
6951: PUSH
6952: LD_VAR 0 4
6956: PPUSH
6957: LD_INT 25
6959: PUSH
6960: LD_INT 1
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: PPUSH
6967: CALL_OW 72
6971: PUSH
6972: FOR_IN
6973: IFFALSE 7025
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
6975: LD_VAR 0 2
6979: PPUSH
6980: LD_INT 22
6982: PUSH
6983: LD_INT 4
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: LD_INT 30
6992: PUSH
6993: LD_INT 4
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PPUSH
7004: CALL_OW 69
7008: PPUSH
7009: LD_VAR 0 2
7013: PPUSH
7014: CALL_OW 74
7018: PPUSH
7019: CALL_OW 120
7023: GO 6972
7025: POP
7026: POP
// end ;
7027: LD_VAR 0 1
7031: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7032: LD_EXP 13
7036: NOT
7037: IFFALSE 7608
7039: GO 7041
7041: DISABLE
7042: LD_INT 0
7044: PPUSH
7045: PPUSH
7046: PPUSH
7047: PPUSH
// begin enable ;
7048: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7049: LD_ADDR_VAR 0 2
7053: PUSH
7054: LD_INT 22
7056: PUSH
7057: LD_INT 4
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PUSH
7064: LD_INT 21
7066: PUSH
7067: LD_INT 3
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: PUSH
7074: LD_INT 3
7076: PUSH
7077: LD_INT 24
7079: PUSH
7080: LD_INT 1000
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: LIST
7095: PPUSH
7096: CALL_OW 69
7100: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7101: LD_ADDR_VAR 0 3
7105: PUSH
7106: LD_EXP 51
7110: PPUSH
7111: LD_INT 25
7113: PUSH
7114: LD_INT 2
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PPUSH
7121: CALL_OW 72
7125: ST_TO_ADDR
// if filter and tmp then
7126: LD_VAR 0 2
7130: PUSH
7131: LD_VAR 0 3
7135: AND
7136: IFFALSE 7209
// begin for i in tmp do
7138: LD_ADDR_VAR 0 1
7142: PUSH
7143: LD_VAR 0 3
7147: PUSH
7148: FOR_IN
7149: IFFALSE 7205
// if IsInUnit ( i ) then
7151: LD_VAR 0 1
7155: PPUSH
7156: CALL_OW 310
7160: IFFALSE 7173
// ComExitBuilding ( i ) else
7162: LD_VAR 0 1
7166: PPUSH
7167: CALL_OW 122
7171: GO 7203
// if not HasTask ( i ) then
7173: LD_VAR 0 1
7177: PPUSH
7178: CALL_OW 314
7182: NOT
7183: IFFALSE 7203
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7185: LD_VAR 0 1
7189: PPUSH
7190: LD_VAR 0 2
7194: PUSH
7195: LD_INT 1
7197: ARRAY
7198: PPUSH
7199: CALL_OW 130
7203: GO 7148
7205: POP
7206: POP
// end else
7207: GO 7280
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7209: LD_VAR 0 3
7213: PPUSH
7214: LD_INT 3
7216: PUSH
7217: LD_INT 54
7219: PUSH
7220: EMPTY
7221: LIST
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PPUSH
7227: CALL_OW 72
7231: IFFALSE 7280
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7233: LD_ADDR_VAR 0 1
7237: PUSH
7238: LD_VAR 0 3
7242: PPUSH
7243: LD_INT 3
7245: PUSH
7246: LD_INT 54
7248: PUSH
7249: EMPTY
7250: LIST
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PPUSH
7256: CALL_OW 72
7260: PUSH
7261: FOR_IN
7262: IFFALSE 7278
// ComEnterUnit ( i , omikron ) ;
7264: LD_VAR 0 1
7268: PPUSH
7269: LD_INT 64
7271: PPUSH
7272: CALL_OW 120
7276: GO 7261
7278: POP
7279: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7280: LD_ADDR_VAR 0 2
7284: PUSH
7285: LD_EXP 51
7289: PPUSH
7290: LD_INT 21
7292: PUSH
7293: LD_INT 2
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: PPUSH
7300: CALL_OW 72
7304: ST_TO_ADDR
// if not filter then
7305: LD_VAR 0 2
7309: NOT
7310: IFFALSE 7314
// exit ;
7312: GO 7608
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7314: LD_ADDR_VAR 0 4
7318: PUSH
7319: LD_INT 13
7321: PPUSH
7322: LD_INT 81
7324: PUSH
7325: LD_INT 4
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PPUSH
7332: CALL_OW 70
7336: ST_TO_ADDR
// if enemy then
7337: LD_VAR 0 4
7341: IFFALSE 7608
// begin for i in filter do
7343: LD_ADDR_VAR 0 1
7347: PUSH
7348: LD_VAR 0 2
7352: PUSH
7353: FOR_IN
7354: IFFALSE 7606
// begin tmp := IsDrivenBy ( i ) ;
7356: LD_ADDR_VAR 0 3
7360: PUSH
7361: LD_VAR 0 1
7365: PPUSH
7366: CALL_OW 311
7370: ST_TO_ADDR
// if not tmp then
7371: LD_VAR 0 3
7375: NOT
7376: IFFALSE 7380
// continue ;
7378: GO 7353
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7380: LD_VAR 0 1
7384: PPUSH
7385: CALL_OW 256
7389: PUSH
7390: LD_INT 600
7392: GREATEREQUAL
7393: PUSH
7394: LD_VAR 0 1
7398: PPUSH
7399: CALL_OW 110
7403: PUSH
7404: LD_INT 1
7406: NONEQUAL
7407: AND
7408: IFFALSE 7434
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7410: LD_VAR 0 1
7414: PPUSH
7415: LD_VAR 0 4
7419: PPUSH
7420: LD_VAR 0 1
7424: PPUSH
7425: CALL_OW 74
7429: PPUSH
7430: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7434: LD_VAR 0 1
7438: PPUSH
7439: CALL_OW 256
7443: PUSH
7444: LD_INT 600
7446: LESS
7447: PUSH
7448: LD_VAR 0 1
7452: PPUSH
7453: CALL_OW 110
7457: PUSH
7458: LD_INT 1
7460: NONEQUAL
7461: AND
7462: IFFALSE 7491
// begin SetTag ( i , 1 ) ;
7464: LD_VAR 0 1
7468: PPUSH
7469: LD_INT 1
7471: PPUSH
7472: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
7476: LD_VAR 0 1
7480: PPUSH
7481: LD_INT 27
7483: PPUSH
7484: LD_INT 35
7486: PPUSH
7487: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
7491: LD_VAR 0 1
7495: PPUSH
7496: CALL_OW 110
7500: PUSH
7501: LD_INT 1
7503: EQUAL
7504: PUSH
7505: LD_VAR 0 1
7509: PPUSH
7510: LD_INT 27
7512: PPUSH
7513: LD_INT 35
7515: PPUSH
7516: CALL_OW 297
7520: PUSH
7521: LD_INT 6
7523: LESS
7524: AND
7525: PUSH
7526: LD_VAR 0 3
7530: AND
7531: IFFALSE 7604
// begin ComExitVehicle ( tmp ) ;
7533: LD_VAR 0 3
7537: PPUSH
7538: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
7542: LD_VAR 0 3
7546: PPUSH
7547: LD_VAR 0 1
7551: PPUSH
7552: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
7556: LD_INT 35
7558: PPUSH
7559: CALL_OW 67
// until GetLives ( i ) = 1000 ;
7563: LD_VAR 0 1
7567: PPUSH
7568: CALL_OW 256
7572: PUSH
7573: LD_INT 1000
7575: EQUAL
7576: IFFALSE 7556
// ComEnterUnit ( tmp , i ) ;
7578: LD_VAR 0 3
7582: PPUSH
7583: LD_VAR 0 1
7587: PPUSH
7588: CALL_OW 120
// SetTag ( i , 0 ) ;
7592: LD_VAR 0 1
7596: PPUSH
7597: LD_INT 0
7599: PPUSH
7600: CALL_OW 109
// end ; end ;
7604: GO 7353
7606: POP
7607: POP
// end ; end ;
7608: PPOPN 4
7610: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
7611: LD_EXP 13
7615: IFFALSE 7759
7617: GO 7619
7619: DISABLE
7620: LD_INT 0
7622: PPUSH
7623: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
7624: LD_ADDR_VAR 0 2
7628: PUSH
7629: LD_EXP 51
7633: PPUSH
7634: LD_INT 21
7636: PUSH
7637: LD_INT 1
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: PUSH
7644: LD_INT 50
7646: PUSH
7647: EMPTY
7648: LIST
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: PPUSH
7654: CALL_OW 72
7658: ST_TO_ADDR
// if not tmp then
7659: LD_VAR 0 2
7663: NOT
7664: IFFALSE 7668
// exit ;
7666: GO 7759
// repeat wait ( 0 0$1 ) ;
7668: LD_INT 35
7670: PPUSH
7671: CALL_OW 67
// for i in tmp do
7675: LD_ADDR_VAR 0 1
7679: PUSH
7680: LD_VAR 0 2
7684: PUSH
7685: FOR_IN
7686: IFFALSE 7750
// begin ComExit ( i ) ;
7688: LD_VAR 0 1
7692: PPUSH
7693: CALL 71549 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
7697: LD_VAR 0 1
7701: PPUSH
7702: LD_INT 14
7704: PPUSH
7705: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
7709: LD_VAR 0 1
7713: PPUSH
7714: LD_INT 14
7716: PPUSH
7717: CALL_OW 308
7721: IFFALSE 7748
// begin tmp := tmp diff i ;
7723: LD_ADDR_VAR 0 2
7727: PUSH
7728: LD_VAR 0 2
7732: PUSH
7733: LD_VAR 0 1
7737: DIFF
7738: ST_TO_ADDR
// RemoveUnit ( i ) ;
7739: LD_VAR 0 1
7743: PPUSH
7744: CALL_OW 64
// end ; end ;
7748: GO 7685
7750: POP
7751: POP
// until not tmp ;
7752: LD_VAR 0 2
7756: NOT
7757: IFFALSE 7668
// end ; end_of_file
7759: PPOPN 2
7761: END
// export function Action ; var i , un , veh , tmp ; begin
7762: LD_INT 0
7764: PPUSH
7765: PPUSH
7766: PPUSH
7767: PPUSH
7768: PPUSH
// InGameOn ;
7769: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
7773: LD_INT 179
7775: PPUSH
7776: LD_INT 5
7778: PPUSH
7779: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
7783: LD_ADDR_VAR 0 4
7787: PUSH
7788: LD_INT 2
7790: PPUSH
7791: LD_INT 2
7793: PPUSH
7794: LD_INT 12
7796: PPUSH
7797: LD_INT 1
7799: PPUSH
7800: LD_INT 1
7802: PPUSH
7803: LD_INT 24
7805: PPUSH
7806: LD_INT 33
7808: PPUSH
7809: CALL 366 0 7
7813: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
7814: LD_VAR 0 4
7818: PPUSH
7819: LD_INT 2
7821: PPUSH
7822: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
7826: LD_VAR 0 4
7830: PPUSH
7831: LD_INT 178
7833: PPUSH
7834: LD_INT 2
7836: PPUSH
7837: LD_INT 0
7839: PPUSH
7840: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
7844: LD_EXP 25
7848: PPUSH
7849: LD_VAR 0 4
7853: PPUSH
7854: CALL_OW 52
// if Kamil then
7858: LD_EXP 29
7862: IFFALSE 7897
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
7864: LD_EXP 29
7868: PPUSH
7869: LD_INT 207
7871: PPUSH
7872: LD_INT 37
7874: PPUSH
7875: LD_INT 0
7877: PPUSH
7878: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
7882: LD_EXP 29
7886: PPUSH
7887: LD_INT 211
7889: PPUSH
7890: LD_INT 38
7892: PPUSH
7893: CALL_OW 118
// end ; if Sophia then
7897: LD_EXP 31
7901: IFFALSE 7936
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
7903: LD_EXP 31
7907: PPUSH
7908: LD_INT 209
7910: PPUSH
7911: LD_INT 40
7913: PPUSH
7914: LD_INT 0
7916: PPUSH
7917: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
7921: LD_EXP 31
7925: PPUSH
7926: LD_INT 211
7928: PPUSH
7929: LD_INT 38
7931: PPUSH
7932: CALL_OW 118
// end ; if Givi then
7936: LD_EXP 26
7940: IFFALSE 7975
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
7942: LD_EXP 26
7946: PPUSH
7947: LD_INT 201
7949: PPUSH
7950: LD_INT 34
7952: PPUSH
7953: LD_INT 0
7955: PPUSH
7956: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
7960: LD_EXP 26
7964: PPUSH
7965: LD_INT 206
7967: PPUSH
7968: LD_INT 36
7970: PPUSH
7971: CALL_OW 118
// end ; if Ibrahim then
7975: LD_EXP 28
7979: IFFALSE 8014
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
7981: LD_EXP 28
7985: PPUSH
7986: LD_INT 202
7988: PPUSH
7989: LD_INT 39
7991: PPUSH
7992: LD_INT 0
7994: PPUSH
7995: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
7999: LD_EXP 28
8003: PPUSH
8004: LD_INT 206
8006: PPUSH
8007: LD_INT 36
8009: PPUSH
8010: CALL_OW 118
// end ; if Markov then
8014: LD_EXP 32
8018: IFFALSE 8105
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8020: LD_ADDR_VAR 0 4
8024: PUSH
8025: LD_INT 2
8027: PPUSH
8028: LD_INT 2
8030: PPUSH
8031: LD_INT 13
8033: PPUSH
8034: LD_INT 1
8036: PPUSH
8037: LD_INT 1
8039: PPUSH
8040: LD_INT 25
8042: PPUSH
8043: LD_INT 80
8045: PUSH
8046: LD_INT 20
8048: PUSH
8049: LD_OWVAR 67
8053: MUL
8054: MINUS
8055: PPUSH
8056: CALL 366 0 7
8060: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8061: LD_VAR 0 4
8065: PPUSH
8066: LD_INT 2
8068: PPUSH
8069: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8073: LD_VAR 0 4
8077: PPUSH
8078: LD_INT 197
8080: PPUSH
8081: LD_INT 35
8083: PPUSH
8084: LD_INT 0
8086: PPUSH
8087: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8091: LD_EXP 32
8095: PPUSH
8096: LD_VAR 0 4
8100: PPUSH
8101: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8105: LD_ADDR_VAR 0 5
8109: PUSH
8110: LD_EXP 30
8114: PUSH
8115: LD_EXP 37
8119: UNION
8120: ST_TO_ADDR
// for i in tmp do
8121: LD_ADDR_VAR 0 2
8125: PUSH
8126: LD_VAR 0 5
8130: PUSH
8131: FOR_IN
8132: IFFALSE 8166
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8134: LD_VAR 0 2
8138: PPUSH
8139: LD_INT 203
8141: PPUSH
8142: LD_INT 41
8144: PPUSH
8145: LD_INT 6
8147: PPUSH
8148: LD_INT 0
8150: PPUSH
8151: CALL_OW 50
// ComHold ( i ) ;
8155: LD_VAR 0 2
8159: PPUSH
8160: CALL_OW 140
// end ;
8164: GO 8131
8166: POP
8167: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8168: LD_INT 22
8170: PUSH
8171: LD_INT 2
8173: PUSH
8174: EMPTY
8175: LIST
8176: LIST
8177: PUSH
8178: LD_INT 25
8180: PUSH
8181: LD_INT 2
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: PUSH
8188: EMPTY
8189: LIST
8190: LIST
8191: PPUSH
8192: CALL_OW 69
8196: NOT
8197: IFFALSE 8211
// SetClass ( Heike , 2 ) ;
8199: LD_EXP 25
8203: PPUSH
8204: LD_INT 2
8206: PPUSH
8207: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8211: LD_EXP 25
8215: PPUSH
8216: LD_INT 183
8218: PPUSH
8219: LD_INT 12
8221: PPUSH
8222: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8226: LD_EXP 25
8230: PPUSH
8231: LD_INT 188
8233: PPUSH
8234: LD_INT 20
8236: PPUSH
8237: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8241: LD_EXP 25
8245: PPUSH
8246: LD_INT 191
8248: PPUSH
8249: LD_INT 25
8251: PPUSH
8252: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8256: LD_EXP 25
8260: PPUSH
8261: LD_INT 203
8263: PPUSH
8264: LD_INT 29
8266: PPUSH
8267: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8271: LD_EXP 25
8275: PPUSH
8276: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8280: LD_INT 35
8282: PPUSH
8283: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8287: LD_EXP 25
8291: PPUSH
8292: CALL_OW 310
8296: NOT
8297: IFFALSE 8280
// CenterOnUnits ( Heike ) ;
8299: LD_EXP 25
8303: PPUSH
8304: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8308: LD_ADDR_VAR 0 5
8312: PUSH
8313: LD_INT 22
8315: PUSH
8316: LD_INT 2
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: PUSH
8323: LD_INT 21
8325: PUSH
8326: LD_INT 1
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: PPUSH
8337: CALL_OW 69
8341: PUSH
8342: LD_EXP 25
8346: PUSH
8347: LD_EXP 32
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: DIFF
8356: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8357: LD_VAR 0 5
8361: PPUSH
8362: LD_EXP 25
8366: PPUSH
8367: CALL_OW 119
// if Givi then
8371: LD_EXP 26
8375: IFFALSE 8393
// ComTurnUnit ( Heike , Givi ) else
8377: LD_EXP 25
8381: PPUSH
8382: LD_EXP 26
8386: PPUSH
8387: CALL_OW 119
8391: GO 8411
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8393: LD_EXP 25
8397: PPUSH
8398: LD_VAR 0 5
8402: PUSH
8403: LD_INT 1
8405: ARRAY
8406: PPUSH
8407: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8411: LD_EXP 25
8415: PPUSH
8416: LD_STRING DH-Start-1
8418: PPUSH
8419: CALL_OW 88
// if Givi then
8423: LD_EXP 26
8427: IFFALSE 8474
// begin Say ( Givi , DG-Start-2 ) ;
8429: LD_EXP 26
8433: PPUSH
8434: LD_STRING DG-Start-2
8436: PPUSH
8437: CALL_OW 88
// if not Mike then
8441: LD_EXP 27
8445: NOT
8446: IFFALSE 8472
// begin Say ( Givi , DG-Start-b-3 ) ;
8448: LD_EXP 26
8452: PPUSH
8453: LD_STRING DG-Start-b-3
8455: PPUSH
8456: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
8460: LD_EXP 25
8464: PPUSH
8465: LD_STRING DH-Start-b-4
8467: PPUSH
8468: CALL_OW 88
// end ; end else
8472: GO 8539
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
8474: LD_EXP 37
8478: PPUSH
8479: LD_INT 26
8481: PUSH
8482: LD_INT 1
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PPUSH
8489: CALL_OW 72
8493: PUSH
8494: LD_INT 1
8496: ARRAY
8497: PPUSH
8498: LD_STRING DArm-Start-a-2
8500: PPUSH
8501: CALL_OW 88
8505: NOT
8506: IFFALSE 8539
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
8508: LD_EXP 37
8512: PPUSH
8513: LD_INT 26
8515: PUSH
8516: LD_INT 2
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PPUSH
8523: CALL_OW 72
8527: PUSH
8528: LD_INT 1
8530: ARRAY
8531: PPUSH
8532: LD_STRING DArf-Start-a-2
8534: PPUSH
8535: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
8539: LD_EXP 25
8543: PPUSH
8544: LD_INT 211
8546: PPUSH
8547: LD_INT 38
8549: PPUSH
8550: CALL_OW 118
// wait ( 0 0$1 ) ;
8554: LD_INT 35
8556: PPUSH
8557: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
8561: LD_EXP 25
8565: PPUSH
8566: LD_STRING DH-Start-3
8568: PPUSH
8569: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8573: LD_EXP 25
8577: PPUSH
8578: LD_STRING DH-Start-4
8580: PPUSH
8581: CALL_OW 88
// InGameOff ;
8585: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
8589: LD_STRING Prepare
8591: PPUSH
8592: CALL_OW 337
// SaveForQuickRestart ;
8596: CALL_OW 22
// wait ( 0 0$10 ) ;
8600: LD_INT 350
8602: PPUSH
8603: CALL_OW 67
// if not Aviradze then
8607: LD_EXP 35
8611: NOT
8612: IFFALSE 8616
// exit ;
8614: GO 8856
// SetDir ( Aviradze , 4 ) ;
8616: LD_EXP 35
8620: PPUSH
8621: LD_INT 4
8623: PPUSH
8624: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
8628: LD_EXP 35
8632: PPUSH
8633: LD_INT 225
8635: PPUSH
8636: LD_INT 33
8638: PPUSH
8639: LD_INT 0
8641: PPUSH
8642: CALL_OW 48
// for i := 1 to 2 do
8646: LD_ADDR_VAR 0 2
8650: PUSH
8651: DOUBLE
8652: LD_INT 1
8654: DEC
8655: ST_TO_ADDR
8656: LD_INT 2
8658: PUSH
8659: FOR_TO
8660: IFFALSE 8791
// begin uc_side := 2 ;
8662: LD_ADDR_OWVAR 20
8666: PUSH
8667: LD_INT 2
8669: ST_TO_ADDR
// uc_nation := 0 ;
8670: LD_ADDR_OWVAR 21
8674: PUSH
8675: LD_INT 0
8677: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
8678: LD_INT 0
8680: PPUSH
8681: LD_INT 12
8683: PPUSH
8684: LD_INT 1
8686: PPUSH
8687: CALL_OW 380
// hc_gallery :=  ;
8691: LD_ADDR_OWVAR 33
8695: PUSH
8696: LD_STRING 
8698: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
8699: LD_ADDR_OWVAR 26
8703: PUSH
8704: LD_STRING Artudito
8706: PUSH
8707: LD_STRING Textur
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: PUSH
8714: LD_VAR 0 2
8718: ARRAY
8719: ST_TO_ADDR
// un := CreateHuman ;
8720: LD_ADDR_VAR 0 3
8724: PUSH
8725: CALL_OW 44
8729: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
8730: LD_VAR 0 3
8734: PPUSH
8735: LD_INT 224
8737: PUSH
8738: LD_INT 226
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PUSH
8745: LD_VAR 0 2
8749: ARRAY
8750: PPUSH
8751: LD_INT 31
8753: PUSH
8754: LD_INT 35
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: PUSH
8761: LD_VAR 0 2
8765: ARRAY
8766: PPUSH
8767: LD_INT 0
8769: PPUSH
8770: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
8774: LD_VAR 0 3
8778: PPUSH
8779: LD_INT 215
8781: PPUSH
8782: LD_INT 36
8784: PPUSH
8785: CALL_OW 111
// end ;
8789: GO 8659
8791: POP
8792: POP
// hc_name :=  ;
8793: LD_ADDR_OWVAR 26
8797: PUSH
8798: LD_STRING 
8800: ST_TO_ADDR
// InitHc ;
8801: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
8805: LD_EXP 35
8809: PPUSH
8810: LD_INT 215
8812: PPUSH
8813: LD_INT 36
8815: PPUSH
8816: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
8820: LD_EXP 35
8824: PPUSH
8825: LD_STRING DA-Arrive-1
8827: PPUSH
8828: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
8832: LD_EXP 25
8836: PPUSH
8837: LD_STRING DH-Arrive-2
8839: PPUSH
8840: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
8844: LD_EXP 35
8848: PPUSH
8849: LD_STRING DA-Arrive-3
8851: PPUSH
8852: CALL_OW 88
// end ;
8856: LD_VAR 0 1
8860: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
8861: LD_EXP 3
8865: IFFALSE 10254
8867: GO 8869
8869: DISABLE
8870: LD_INT 0
8872: PPUSH
8873: PPUSH
8874: PPUSH
// begin DialogueOn ;
8875: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
8879: LD_EXP 25
8883: PPUSH
8884: LD_STRING DH-base-1
8886: PPUSH
8887: CALL_OW 88
// if Markov then
8891: LD_EXP 32
8895: IFFALSE 8947
// begin Say ( Markov , DMar-base-2 ) ;
8897: LD_EXP 32
8901: PPUSH
8902: LD_STRING DMar-base-2
8904: PPUSH
8905: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
8909: LD_EXP 32
8913: PPUSH
8914: LD_STRING DMar-base-3
8916: PPUSH
8917: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
8921: LD_EXP 25
8925: PPUSH
8926: LD_STRING DH-base-4
8928: PPUSH
8929: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
8933: LD_EXP 32
8937: PPUSH
8938: LD_STRING DMar-base-5
8940: PPUSH
8941: CALL_OW 88
// end else
8945: GO 9024
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
8947: LD_EXP 37
8951: PPUSH
8952: LD_INT 26
8954: PUSH
8955: LD_INT 1
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: PPUSH
8962: CALL_OW 72
8966: PUSH
8967: LD_INT 1
8969: ARRAY
8970: PPUSH
8971: LD_STRING DArm-base-a-2
8973: PPUSH
8974: CALL_OW 88
8978: NOT
8979: IFFALSE 9012
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
8981: LD_EXP 37
8985: PPUSH
8986: LD_INT 26
8988: PUSH
8989: LD_INT 2
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: PPUSH
8996: CALL_OW 72
9000: PUSH
9001: LD_INT 1
9003: ARRAY
9004: PPUSH
9005: LD_STRING DArf-base-a-2
9007: PPUSH
9008: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9012: LD_EXP 25
9016: PPUSH
9017: LD_STRING DH-base-a-3
9019: PPUSH
9020: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9024: LD_EXP 35
9028: PPUSH
9029: LD_STRING DA-base-6
9031: PPUSH
9032: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9036: LD_EXP 35
9040: PPUSH
9041: LD_STRING DA-base-7
9043: PPUSH
9044: CALL_OW 88
// DialogueOff ;
9048: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9052: LD_STRING Flamethrower
9054: PPUSH
9055: CALL_OW 337
// wait ( 2 2$00 ) ;
9059: LD_INT 4200
9061: PPUSH
9062: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9066: LD_EXP 34
9070: PUSH
9071: LD_EXP 27
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: PPUSH
9080: LD_INT 203
9082: PPUSH
9083: LD_INT 37
9085: PPUSH
9086: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9090: LD_INT 22
9092: PUSH
9093: LD_INT 2
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PUSH
9100: LD_INT 92
9102: PUSH
9103: LD_INT 203
9105: PUSH
9106: LD_INT 37
9108: PUSH
9109: LD_INT 10
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: PUSH
9118: EMPTY
9119: LIST
9120: LIST
9121: PPUSH
9122: CALL_OW 69
9126: NOT
9127: IFFALSE 9167
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9129: LD_EXP 34
9133: PUSH
9134: LD_EXP 27
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PPUSH
9143: LD_EXP 25
9147: PPUSH
9148: CALL_OW 250
9152: PPUSH
9153: LD_EXP 25
9157: PPUSH
9158: CALL_OW 251
9162: PPUSH
9163: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9167: LD_INT 35
9169: PPUSH
9170: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9174: LD_INT 2
9176: PPUSH
9177: LD_EXP 34
9181: PPUSH
9182: CALL_OW 292
9186: PUSH
9187: LD_EXP 34
9191: PPUSH
9192: LD_EXP 25
9196: PPUSH
9197: CALL_OW 296
9201: PUSH
9202: LD_INT 8
9204: LESS
9205: PUSH
9206: LD_EXP 34
9210: PPUSH
9211: LD_INT 22
9213: PUSH
9214: LD_INT 2
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PUSH
9221: LD_INT 21
9223: PUSH
9224: LD_INT 3
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: PPUSH
9235: CALL_OW 69
9239: PPUSH
9240: LD_EXP 34
9244: PPUSH
9245: CALL_OW 74
9249: PPUSH
9250: CALL_OW 296
9254: PUSH
9255: LD_INT 7
9257: LESS
9258: OR
9259: AND
9260: PUSH
9261: LD_EXP 34
9265: PPUSH
9266: LD_INT 10
9268: PPUSH
9269: CALL_OW 308
9273: NOT
9274: AND
9275: IFFALSE 9167
// InGameOn ;
9277: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9281: LD_EXP 34
9285: PPUSH
9286: CALL_OW 87
// if IsInUnit ( Heike ) then
9290: LD_EXP 25
9294: PPUSH
9295: CALL_OW 310
9299: IFFALSE 9310
// ComExitBuilding ( Heike ) ;
9301: LD_EXP 25
9305: PPUSH
9306: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9310: LD_EXP 34
9314: PUSH
9315: LD_EXP 27
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PPUSH
9324: LD_EXP 25
9328: PPUSH
9329: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9333: LD_EXP 25
9337: PPUSH
9338: LD_EXP 34
9342: PPUSH
9343: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9347: LD_INT 22
9349: PUSH
9350: LD_INT 2
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: PUSH
9357: LD_INT 91
9359: PUSH
9360: LD_EXP 34
9364: PUSH
9365: LD_INT 10
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: LIST
9372: PUSH
9373: LD_INT 21
9375: PUSH
9376: LD_INT 3
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: LIST
9387: PPUSH
9388: CALL_OW 69
9392: IFFALSE 9418
// begin Say ( Kurt , DKs-scout-1 ) ;
9394: LD_EXP 34
9398: PPUSH
9399: LD_STRING DKs-scout-1
9401: PPUSH
9402: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9406: LD_EXP 25
9410: PPUSH
9411: LD_STRING DH-scout-2
9413: PPUSH
9414: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
9418: LD_EXP 25
9422: PPUSH
9423: CALL_OW 85
// if IsInUnit ( Heike ) then
9427: LD_EXP 25
9431: PPUSH
9432: CALL_OW 310
9436: IFFALSE 9447
// ComExit ( Heike ) ;
9438: LD_EXP 25
9442: PPUSH
9443: CALL 71549 0 1
// repeat wait ( 0 0$1 ) ;
9447: LD_INT 35
9449: PPUSH
9450: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
9454: LD_EXP 25
9458: PPUSH
9459: LD_EXP 34
9463: PPUSH
9464: CALL_OW 112
// until GetDistUnits ( Heike , Kurt ) < 6 ;
9468: LD_EXP 25
9472: PPUSH
9473: LD_EXP 34
9477: PPUSH
9478: CALL_OW 296
9482: PUSH
9483: LD_INT 6
9485: LESS
9486: IFFALSE 9447
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
9488: LD_EXP 34
9492: PUSH
9493: LD_EXP 27
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: PPUSH
9502: LD_EXP 25
9506: PPUSH
9507: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
9511: LD_EXP 34
9515: PPUSH
9516: LD_STRING DKs-scout-3
9518: PPUSH
9519: CALL_OW 88
// if Kaia and GetDistUnits ( Kaia , Kurt ) < 15 then
9523: LD_EXP 30
9527: PUSH
9528: LD_EXP 30
9532: PPUSH
9533: LD_EXP 34
9537: PPUSH
9538: CALL_OW 296
9542: PUSH
9543: LD_INT 15
9545: LESS
9546: AND
9547: IFFALSE 9737
// begin if IsInUnit ( Kaia ) then
9549: LD_EXP 30
9553: PPUSH
9554: CALL_OW 310
9558: IFFALSE 9569
// ComExitBuilding ( Kaia ) ;
9560: LD_EXP 30
9564: PPUSH
9565: CALL_OW 122
// wait ( 0 0$1 ) ;
9569: LD_INT 35
9571: PPUSH
9572: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
9576: LD_EXP 30
9580: PPUSH
9581: LD_EXP 34
9585: PPUSH
9586: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
9590: LD_INT 35
9592: PPUSH
9593: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
9597: LD_EXP 30
9601: PPUSH
9602: LD_EXP 34
9606: PPUSH
9607: CALL_OW 296
9611: PUSH
9612: LD_INT 6
9614: LESS
9615: IFFALSE 9590
// ComTurnUnit ( Kaia , Kurt ) ;
9617: LD_EXP 30
9621: PPUSH
9622: LD_EXP 34
9626: PPUSH
9627: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
9631: LD_EXP 30
9635: PPUSH
9636: LD_STRING DK-scout-4
9638: PPUSH
9639: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
9643: LD_EXP 34
9647: PPUSH
9648: LD_EXP 30
9652: PPUSH
9653: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
9657: LD_EXP 34
9661: PPUSH
9662: LD_STRING DKs-scout-5
9664: PPUSH
9665: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
9669: LD_EXP 30
9673: PPUSH
9674: LD_STRING DK-scout-6
9676: PPUSH
9677: CALL_OW 88
// if Mike then
9681: LD_EXP 27
9685: IFFALSE 9737
// begin Say ( Mike , DM-scout-7 ) ;
9687: LD_EXP 27
9691: PPUSH
9692: LD_STRING DM-scout-7
9694: PPUSH
9695: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
9699: LD_EXP 30
9703: PPUSH
9704: LD_EXP 27
9708: PPUSH
9709: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
9713: LD_EXP 30
9717: PPUSH
9718: LD_STRING DK-scout-8
9720: PPUSH
9721: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
9725: LD_EXP 27
9729: PPUSH
9730: LD_STRING DM-scout-9
9732: PPUSH
9733: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
9737: LD_INT 184
9739: PPUSH
9740: LD_INT 100
9742: PPUSH
9743: LD_INT 2
9745: PPUSH
9746: LD_INT 12
9748: NEG
9749: PPUSH
9750: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
9754: LD_INT 184
9756: PPUSH
9757: LD_INT 100
9759: PPUSH
9760: LD_INT 2
9762: PPUSH
9763: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
9767: LD_INT 184
9769: PPUSH
9770: LD_INT 100
9772: PPUSH
9773: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
9777: LD_EXP 34
9781: PPUSH
9782: LD_STRING DKs-scout-10
9784: PPUSH
9785: CALL_OW 88
// wait ( 0 0$1 ) ;
9789: LD_INT 35
9791: PPUSH
9792: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
9796: LD_INT 144
9798: PPUSH
9799: LD_INT 65
9801: PPUSH
9802: LD_INT 2
9804: PPUSH
9805: LD_INT 12
9807: NEG
9808: PPUSH
9809: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
9813: LD_INT 144
9815: PPUSH
9816: LD_INT 65
9818: PPUSH
9819: LD_INT 2
9821: PPUSH
9822: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
9826: LD_INT 144
9828: PPUSH
9829: LD_INT 65
9831: PPUSH
9832: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
9836: LD_EXP 34
9840: PPUSH
9841: LD_STRING DKs-scout-11
9843: PPUSH
9844: CALL_OW 88
// wait ( 0 0$1 ) ;
9848: LD_INT 35
9850: PPUSH
9851: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
9855: LD_EXP 34
9859: PPUSH
9860: CALL_OW 87
// if Mike and not Givi then
9864: LD_EXP 27
9868: PUSH
9869: LD_EXP 26
9873: NOT
9874: AND
9875: IFFALSE 9901
// begin Say ( Mike , DM-scout-a-1 ) ;
9877: LD_EXP 27
9881: PPUSH
9882: LD_STRING DM-scout-a-1
9884: PPUSH
9885: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
9889: LD_EXP 25
9893: PPUSH
9894: LD_STRING DH-scout-a-2
9896: PPUSH
9897: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
9901: LD_EXP 34
9905: PUSH
9906: LD_EXP 27
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: PPUSH
9915: LD_INT 2
9917: PPUSH
9918: CALL_OW 235
// InGameOff ;
9922: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
9926: LD_STRING Hill
9928: PPUSH
9929: CALL_OW 337
// SetAreaMapShow ( dontGoArea , 1 ) ;
9933: LD_INT 20
9935: PPUSH
9936: LD_INT 1
9938: PPUSH
9939: CALL_OW 424
// allowToPatrol := true ;
9943: LD_ADDR_EXP 12
9947: PUSH
9948: LD_INT 1
9950: ST_TO_ADDR
// wait ( 1 1$30 ) ;
9951: LD_INT 3150
9953: PPUSH
9954: CALL_OW 67
// InitHc ;
9958: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 ] [ Difficulty ] do
9962: LD_ADDR_VAR 0 1
9966: PUSH
9967: DOUBLE
9968: LD_INT 1
9970: DEC
9971: ST_TO_ADDR
9972: LD_INT 3
9974: PUSH
9975: LD_INT 3
9977: PUSH
9978: LD_INT 2
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: LIST
9985: PUSH
9986: LD_OWVAR 67
9990: ARRAY
9991: PUSH
9992: FOR_TO
9993: IFFALSE 10252
// begin uc_side := 2 ;
9995: LD_ADDR_OWVAR 20
9999: PUSH
10000: LD_INT 2
10002: ST_TO_ADDR
// uc_nation := 2 ;
10003: LD_ADDR_OWVAR 21
10007: PUSH
10008: LD_INT 2
10010: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 ] [ Difficulty ] ) ;
10011: LD_INT 0
10013: PPUSH
10014: LD_INT 1
10016: PUSH
10017: LD_INT 3
10019: PUSH
10020: LD_INT 1
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: LIST
10027: PUSH
10028: LD_VAR 0 1
10032: PUSH
10033: LD_INT 3
10035: MOD
10036: PUSH
10037: LD_INT 1
10039: PLUS
10040: ARRAY
10041: PPUSH
10042: LD_INT 3
10044: PUSH
10045: LD_INT 2
10047: PUSH
10048: LD_INT 2
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: LIST
10055: PUSH
10056: LD_OWVAR 67
10060: ARRAY
10061: PPUSH
10062: CALL_OW 380
// un := CreateHuman ;
10066: LD_ADDR_VAR 0 2
10070: PUSH
10071: CALL_OW 44
10075: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10076: LD_ADDR_EXP 37
10080: PUSH
10081: LD_EXP 37
10085: PUSH
10086: LD_VAR 0 2
10090: UNION
10091: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10092: LD_INT 2
10094: PPUSH
10095: LD_INT 2
10097: PPUSH
10098: LD_INT 13
10100: PPUSH
10101: LD_INT 2
10103: PUSH
10104: LD_INT 1
10106: PUSH
10107: EMPTY
10108: LIST
10109: LIST
10110: PUSH
10111: LD_VAR 0 1
10115: PUSH
10116: LD_INT 2
10118: MOD
10119: PUSH
10120: LD_INT 1
10122: PLUS
10123: ARRAY
10124: PPUSH
10125: LD_INT 1
10127: PPUSH
10128: LD_INT 27
10130: PUSH
10131: LD_INT 25
10133: PUSH
10134: LD_INT 27
10136: PUSH
10137: LD_INT 23
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: PUSH
10146: LD_OWVAR 67
10150: PUSH
10151: LD_INT 0
10153: PPUSH
10154: LD_INT 1
10156: PPUSH
10157: CALL_OW 12
10161: PLUS
10162: ARRAY
10163: PPUSH
10164: LD_INT 77
10166: PPUSH
10167: CALL 366 0 7
// veh := CreateVehicle ;
10171: LD_ADDR_VAR 0 3
10175: PUSH
10176: CALL_OW 45
10180: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10181: LD_VAR 0 3
10185: PPUSH
10186: LD_INT 2
10188: PPUSH
10189: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10193: LD_VAR 0 3
10197: PPUSH
10198: LD_INT 178
10200: PPUSH
10201: LD_INT 2
10203: PPUSH
10204: LD_INT 2
10206: PPUSH
10207: LD_INT 0
10209: PPUSH
10210: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10214: LD_VAR 0 2
10218: PPUSH
10219: LD_VAR 0 3
10223: PPUSH
10224: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10228: LD_VAR 0 2
10232: PPUSH
10233: LD_INT 183
10235: PPUSH
10236: LD_INT 11
10238: PPUSH
10239: CALL_OW 111
// wait ( 0 0$2 ) ;
10243: LD_INT 70
10245: PPUSH
10246: CALL_OW 67
// end ;
10250: GO 9992
10252: POP
10253: POP
// end ;
10254: PPOPN 3
10256: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10257: LD_EXP 4
10261: PUSH
10262: LD_EXP 35
10266: PPUSH
10267: CALL_OW 302
10271: AND
10272: IFFALSE 10321
10274: GO 10276
10276: DISABLE
// begin DialogueOn ;
10277: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10281: LD_EXP 35
10285: PPUSH
10286: LD_STRING DA-lab-1
10288: PPUSH
10289: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10293: LD_EXP 35
10297: PPUSH
10298: LD_STRING DA-lab-2
10300: PPUSH
10301: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10305: LD_EXP 25
10309: PPUSH
10310: LD_STRING DH-lab-3
10312: PPUSH
10313: CALL_OW 88
// DialogueOff ;
10317: CALL_OW 7
// end ;
10321: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10322: LD_INT 17
10324: PPUSH
10325: LD_INT 2
10327: PPUSH
10328: CALL_OW 321
10332: PUSH
10333: LD_INT 2
10335: EQUAL
10336: IFFALSE 10468
10338: GO 10340
10340: DISABLE
10341: LD_INT 0
10343: PPUSH
// begin DialogueOn ;
10344: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10348: LD_EXP 35
10352: PPUSH
10353: LD_STRING DA-Cam-1
10355: PPUSH
10356: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10360: LD_EXP 35
10364: PPUSH
10365: LD_STRING DA-Cam-2
10367: PPUSH
10368: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10372: LD_EXP 35
10376: PPUSH
10377: LD_STRING DA-Cam-3
10379: PPUSH
10380: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10384: LD_EXP 25
10388: PPUSH
10389: LD_STRING DH-Cam-4
10391: PPUSH
10392: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
10396: LD_EXP 30
10400: PPUSH
10401: LD_STRING DK-Cam-5
10403: PPUSH
10404: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
10408: LD_EXP 30
10412: PPUSH
10413: LD_STRING DK-Cam-6
10415: PPUSH
10416: CALL_OW 88
// DialogueOff ;
10420: CALL_OW 7
// Query ( Camera ) ;
10424: LD_STRING Camera
10426: PPUSH
10427: CALL_OW 97
// hiddenCameraAllowed := true ;
10431: LD_ADDR_EXP 5
10435: PUSH
10436: LD_INT 1
10438: ST_TO_ADDR
// for i in camAreas do
10439: LD_ADDR_VAR 0 1
10443: PUSH
10444: LD_EXP 8
10448: PUSH
10449: FOR_IN
10450: IFFALSE 10466
// SetAreaMapShow ( i , 1 ) ;
10452: LD_VAR 0 1
10456: PPUSH
10457: LD_INT 1
10459: PPUSH
10460: CALL_OW 424
10464: GO 10449
10466: POP
10467: POP
// end ;
10468: PPOPN 1
10470: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
10471: LD_EXP 8
10475: NOT
10476: PUSH
10477: LD_EXP 5
10481: AND
10482: IFFALSE 10580
10484: GO 10486
10486: DISABLE
10487: LD_INT 0
10489: PPUSH
// begin stop_talking := true ;
10490: LD_ADDR_OWVAR 56
10494: PUSH
10495: LD_INT 1
10497: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
10498: LD_ADDR_VAR 0 1
10502: PUSH
10503: LD_INT 22
10505: PUSH
10506: LD_INT 2
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 21
10515: PUSH
10516: LD_INT 1
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: LD_INT 23
10525: PUSH
10526: LD_INT 2
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: LIST
10537: PPUSH
10538: CALL_OW 69
10542: PUSH
10543: FOR_IN
10544: IFFALSE 10563
// AddExperience ( i , 2 , 450 ) ;
10546: LD_VAR 0 1
10550: PPUSH
10551: LD_INT 2
10553: PPUSH
10554: LD_INT 450
10556: PPUSH
10557: CALL_OW 492
10561: GO 10543
10563: POP
10564: POP
// stop_talking := false ;
10565: LD_ADDR_OWVAR 56
10569: PUSH
10570: LD_INT 0
10572: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
10573: LD_STRING ACH_CAMERA
10575: PPUSH
10576: CALL_OW 543
// end ;
10580: PPOPN 1
10582: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
10583: LD_EXP 9
10587: PUSH
10588: LD_EXP 11
10592: NOT
10593: AND
10594: IFFALSE 10653
10596: GO 10598
10598: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
10599: LD_EXP 9
10603: PPUSH
10604: CALL_OW 250
10608: PPUSH
10609: LD_EXP 9
10613: PPUSH
10614: CALL_OW 251
10618: PPUSH
10619: LD_INT 2
10621: PPUSH
10622: LD_INT 6
10624: NEG
10625: PPUSH
10626: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
10630: LD_EXP 9
10634: PPUSH
10635: CALL_OW 87
// wait ( 0 0$1 ) ;
10639: LD_INT 35
10641: PPUSH
10642: CALL_OW 67
// YouLost ( Spotted ) ;
10646: LD_STRING Spotted
10648: PPUSH
10649: CALL_OW 104
// end ;
10653: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
10654: LD_INT 3
10656: PUSH
10657: LD_INT 6
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PPUSH
10664: LD_INT 2
10666: PPUSH
10667: LD_EXP 47
10671: PPUSH
10672: CALL 1026 0 3
10676: IFFALSE 10709
10678: GO 10680
10680: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
10681: LD_ADDR_EXP 9
10685: PUSH
10686: LD_INT 3
10688: PUSH
10689: LD_INT 6
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PPUSH
10696: LD_INT 2
10698: PPUSH
10699: LD_EXP 47
10703: PPUSH
10704: CALL 1026 0 3
10708: ST_TO_ADDR
10709: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
10710: LD_INT 22
10712: PUSH
10713: LD_INT 6
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: LD_INT 30
10722: PUSH
10723: LD_INT 32
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: PUSH
10730: LD_INT 3
10732: PUSH
10733: LD_INT 24
10735: PUSH
10736: LD_INT 1000
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: LIST
10751: PPUSH
10752: CALL_OW 69
10756: IFFALSE 10817
10758: GO 10760
10760: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
10761: LD_ADDR_EXP 9
10765: PUSH
10766: LD_INT 22
10768: PUSH
10769: LD_INT 6
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: PUSH
10776: LD_INT 30
10778: PUSH
10779: LD_INT 32
10781: PUSH
10782: EMPTY
10783: LIST
10784: LIST
10785: PUSH
10786: LD_INT 3
10788: PUSH
10789: LD_INT 24
10791: PUSH
10792: LD_INT 1000
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: LIST
10807: PPUSH
10808: CALL_OW 69
10812: PUSH
10813: LD_INT 1
10815: ARRAY
10816: ST_TO_ADDR
10817: END
// every 0 0$1 trigger russianAlert do var i , tmp , towers , noncombat ;
10818: LD_EXP 9
10822: IFFALSE 11054
10824: GO 10826
10826: DISABLE
10827: LD_INT 0
10829: PPUSH
10830: PPUSH
10831: PPUSH
10832: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
10833: LD_ADDR_VAR 0 4
10837: PUSH
10838: LD_EXP 42
10842: PUSH
10843: LD_EXP 44
10847: PUSH
10848: LD_EXP 45
10852: UNION
10853: PPUSH
10854: LD_INT 3
10856: PUSH
10857: LD_INT 25
10859: PUSH
10860: LD_INT 1
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: PPUSH
10871: CALL_OW 72
10875: UNION
10876: ST_TO_ADDR
// for i in noncombat do
10877: LD_ADDR_VAR 0 1
10881: PUSH
10882: LD_VAR 0 4
10886: PUSH
10887: FOR_IN
10888: IFFALSE 10984
// begin if IsInUnit ( i ) then
10890: LD_VAR 0 1
10894: PPUSH
10895: CALL_OW 310
10899: IFFALSE 10910
// ComExitBuilding ( i ) ;
10901: LD_VAR 0 1
10905: PPUSH
10906: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
10910: LD_VAR 0 1
10914: PPUSH
10915: LD_INT 114
10917: PPUSH
10918: LD_INT 97
10920: PPUSH
10921: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
10925: LD_VAR 0 1
10929: PPUSH
10930: LD_INT 99
10932: PPUSH
10933: LD_INT 128
10935: PPUSH
10936: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
10940: LD_VAR 0 1
10944: PPUSH
10945: LD_INT 91
10947: PPUSH
10948: LD_INT 145
10950: PPUSH
10951: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
10955: LD_VAR 0 1
10959: PPUSH
10960: LD_INT 82
10962: PPUSH
10963: LD_INT 153
10965: PPUSH
10966: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
10970: LD_VAR 0 1
10974: PPUSH
10975: LD_INT 16
10977: PPUSH
10978: CALL_OW 173
// end ;
10982: GO 10887
10984: POP
10985: POP
// if not allowHeikeAttack then
10986: LD_EXP 11
10990: NOT
10991: IFFALSE 10995
// exit ;
10993: GO 11054
// SayRadio ( Kurin , D9a-Kur-1 ) ;
10995: LD_EXP 40
10999: PPUSH
11000: LD_STRING D9a-Kur-1
11002: PPUSH
11003: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11007: LD_EXP 43
11011: PPUSH
11012: LD_STRING D9a-Bur-1
11014: PPUSH
11015: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11019: LD_EXP 40
11023: PPUSH
11024: LD_STRING D9a-Kur-2
11026: PPUSH
11027: CALL_OW 94
// omicronFall := true ;
11031: LD_ADDR_EXP 13
11035: PUSH
11036: LD_INT 1
11038: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11039: LD_INT 105
11041: PPUSH
11042: CALL_OW 67
// retreatFromOmicron := true ;
11046: LD_ADDR_EXP 20
11050: PUSH
11051: LD_INT 1
11053: ST_TO_ADDR
// end ;
11054: PPOPN 4
11056: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11057: LD_INT 16
11059: PPUSH
11060: LD_INT 3
11062: PUSH
11063: LD_INT 22
11065: PUSH
11066: LD_INT 2
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PUSH
11077: LD_INT 23
11079: PUSH
11080: LD_INT 3
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PPUSH
11091: CALL_OW 70
11095: IFFALSE 11178
11097: GO 11099
11099: DISABLE
11100: LD_INT 0
11102: PPUSH
// begin enable ;
11103: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11104: LD_ADDR_VAR 0 1
11108: PUSH
11109: LD_INT 16
11111: PPUSH
11112: LD_INT 3
11114: PUSH
11115: LD_INT 22
11117: PUSH
11118: LD_INT 2
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PUSH
11129: LD_INT 23
11131: PUSH
11132: LD_INT 3
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: PPUSH
11143: CALL_OW 70
11147: PUSH
11148: FOR_IN
11149: IFFALSE 11176
// begin escapeCounter := escapeCounter + 1 ;
11151: LD_ADDR_EXP 19
11155: PUSH
11156: LD_EXP 19
11160: PUSH
11161: LD_INT 1
11163: PLUS
11164: ST_TO_ADDR
// RemoveUnit ( i ) ;
11165: LD_VAR 0 1
11169: PPUSH
11170: CALL_OW 64
// end ;
11174: GO 11148
11176: POP
11177: POP
// end ;
11178: PPOPN 1
11180: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11181: LD_OWVAR 1
11185: PUSH
11186: LD_INT 13650
11188: PUSH
11189: LD_INT 0
11191: PPUSH
11192: LD_INT 3150
11194: PPUSH
11195: CALL_OW 12
11199: PLUS
11200: GREATEREQUAL
11201: IFFALSE 11210
11203: GO 11205
11205: DISABLE
// SmallAmericanReinforcements ;
11206: CALL 6583 0 0
11210: END
// every 0 0$1 trigger tick >= 9 9$15 do
11211: LD_OWVAR 1
11215: PUSH
11216: LD_INT 19425
11218: GREATEREQUAL
11219: IFFALSE 11284
11221: GO 11223
11223: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11224: LD_EXP 48
11228: PPUSH
11229: LD_INT 21
11231: PUSH
11232: LD_INT 2
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: PPUSH
11239: CALL_OW 72
11243: PPUSH
11244: LD_INT 62
11246: PPUSH
11247: LD_INT 22
11249: PPUSH
11250: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11254: LD_EXP 49
11258: PPUSH
11259: LD_INT 69
11261: PPUSH
11262: LD_INT 27
11264: PPUSH
11265: CALL_OW 111
// wait ( 1 1$00 ) ;
11269: LD_INT 2100
11271: PPUSH
11272: CALL_OW 67
// startAttackOnOmicron := true ;
11276: LD_ADDR_EXP 6
11280: PUSH
11281: LD_INT 1
11283: ST_TO_ADDR
// end ;
11284: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11285: LD_EXP 22
11289: PUSH
11290: LD_INT 0
11292: EQUAL
11293: IFFALSE 13310
11295: GO 11297
11297: DISABLE
11298: LD_INT 0
11300: PPUSH
11301: PPUSH
11302: PPUSH
11303: PPUSH
11304: PPUSH
11305: PPUSH
11306: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11307: LD_INT 5
11309: PPUSH
11310: LD_INT 2
11312: PPUSH
11313: CALL_OW 343
// PrepareOmarForces ;
11317: CALL 1596 0 0
// wait ( 0 0$03 ) ;
11321: LD_INT 105
11323: PPUSH
11324: CALL_OW 67
// allowHeikeAttack := true ;
11328: LD_ADDR_EXP 11
11332: PUSH
11333: LD_INT 1
11335: ST_TO_ADDR
// activeGrishkoAI := false ;
11336: LD_ADDR_EXP 10
11340: PUSH
11341: LD_INT 0
11343: ST_TO_ADDR
// SetAreaMapShow ( dontGoArea , 0 ) ;
11344: LD_INT 20
11346: PPUSH
11347: LD_INT 0
11349: PPUSH
11350: CALL_OW 424
// if not hillBase then
11354: LD_EXP 15
11358: NOT
11359: IFFALSE 11368
// ChangeMissionObjectives ( HillDone ) ;
11361: LD_STRING HillDone
11363: PPUSH
11364: CALL_OW 337
// CenterOnUnits ( Omar ) ;
11368: LD_EXP 33
11372: PPUSH
11373: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
11377: LD_ADDR_VAR 0 1
11381: PUSH
11382: LD_INT 22
11384: PUSH
11385: LD_INT 2
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PUSH
11392: LD_INT 21
11394: PUSH
11395: LD_INT 1
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: PPUSH
11406: CALL_OW 69
11410: PUSH
11411: FOR_IN
11412: IFFALSE 11436
// if HasTask ( i ) then
11414: LD_VAR 0 1
11418: PPUSH
11419: CALL_OW 314
11423: IFFALSE 11434
// ComHold ( i ) ;
11425: LD_VAR 0 1
11429: PPUSH
11430: CALL_OW 140
11434: GO 11411
11436: POP
11437: POP
// DialogueOn ;
11438: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
11442: LD_EXP 33
11446: PPUSH
11447: LD_STRING DO-assault-1
11449: PPUSH
11450: CALL_OW 94
// DialogueOff ;
11454: CALL_OW 7
// game_speed := 4 ;
11458: LD_ADDR_OWVAR 65
11462: PUSH
11463: LD_INT 4
11465: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
11466: LD_ADDR_VAR 0 1
11470: PUSH
11471: LD_EXP 46
11475: PPUSH
11476: LD_INT 3
11478: PUSH
11479: LD_INT 54
11481: PUSH
11482: EMPTY
11483: LIST
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: PPUSH
11489: CALL_OW 72
11493: PUSH
11494: FOR_IN
11495: IFFALSE 11514
// ComMoveXY ( i , 226 , 114 ) ;
11497: LD_VAR 0 1
11501: PPUSH
11502: LD_INT 226
11504: PPUSH
11505: LD_INT 114
11507: PPUSH
11508: CALL_OW 111
11512: GO 11494
11514: POP
11515: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
11516: LD_EXP 41
11520: PPUSH
11521: LD_INT 22
11523: PUSH
11524: LD_INT 6
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: PUSH
11531: LD_INT 30
11533: PUSH
11534: LD_INT 4
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: PPUSH
11545: CALL_OW 69
11549: PPUSH
11550: LD_EXP 41
11554: PPUSH
11555: CALL_OW 74
11559: PPUSH
11560: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
11564: LD_STRING Attack
11566: PPUSH
11567: CALL_OW 337
// music_class := music_combat ;
11571: LD_ADDR_OWVAR 72
11575: PUSH
11576: LD_INT 1
11578: ST_TO_ADDR
// music_nat := 4 ;
11579: LD_ADDR_OWVAR 71
11583: PUSH
11584: LD_INT 4
11586: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
11587: LD_INT 5
11589: PPUSH
11590: LD_EXP 41
11594: PPUSH
11595: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
11599: LD_INT 6
11601: PPUSH
11602: LD_EXP 38
11606: PPUSH
11607: LD_INT 25
11609: PUSH
11610: LD_INT 1
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: PPUSH
11617: CALL_OW 72
11621: PUSH
11622: LD_INT 4
11624: ARRAY
11625: PPUSH
11626: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
11630: LD_ADDR_VAR 0 1
11634: PUSH
11635: LD_EXP 38
11639: PPUSH
11640: LD_INT 3
11642: PUSH
11643: LD_INT 25
11645: PUSH
11646: LD_INT 4
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PPUSH
11657: CALL_OW 72
11661: PUSH
11662: FOR_IN
11663: IFFALSE 11682
// ComAgressiveMove ( i , 221 , 110 ) ;
11665: LD_VAR 0 1
11669: PPUSH
11670: LD_INT 221
11672: PPUSH
11673: LD_INT 110
11675: PPUSH
11676: CALL_OW 114
11680: GO 11662
11682: POP
11683: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
11684: LD_EXP 38
11688: PPUSH
11689: LD_INT 25
11691: PUSH
11692: LD_INT 4
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: PPUSH
11699: CALL_OW 72
11703: PPUSH
11704: LD_INT 214
11706: PPUSH
11707: LD_INT 124
11709: PPUSH
11710: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
11714: LD_EXP 38
11718: PPUSH
11719: LD_INT 25
11721: PUSH
11722: LD_INT 1
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: PPUSH
11729: CALL_OW 72
11733: PUSH
11734: LD_INT 4
11736: ARRAY
11737: PPUSH
11738: LD_INT 214
11740: PPUSH
11741: LD_INT 114
11743: PPUSH
11744: LD_INT 0
11746: PPUSH
11747: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
11751: LD_EXP 41
11755: PPUSH
11756: LD_STRING D9-Gri-1
11758: PPUSH
11759: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
11763: LD_EXP 40
11767: PPUSH
11768: LD_STRING D9-Kur-1
11770: PPUSH
11771: CALL_OW 94
// wait ( 0 0$1 ) ;
11775: LD_INT 35
11777: PPUSH
11778: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
11782: LD_EXP 33
11786: PPUSH
11787: LD_INT 233
11789: PPUSH
11790: LD_INT 130
11792: PPUSH
11793: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
11797: LD_EXP 41
11801: PPUSH
11802: LD_STRING D9-Gri-2
11804: PPUSH
11805: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
11809: LD_EXP 40
11813: PPUSH
11814: LD_STRING D9-Kur-2
11816: PPUSH
11817: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
11821: LD_EXP 41
11825: PPUSH
11826: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
11830: LD_EXP 41
11834: PPUSH
11835: LD_INT 211
11837: PPUSH
11838: LD_INT 104
11840: PPUSH
11841: CALL_OW 171
// AddComHold ( Grishko ) ;
11845: LD_EXP 41
11849: PPUSH
11850: CALL_OW 200
// repeat wait ( 3 ) ;
11854: LD_INT 3
11856: PPUSH
11857: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
11861: LD_EXP 41
11865: PPUSH
11866: CALL_OW 310
11870: NOT
11871: IFFALSE 11854
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
11873: LD_EXP 38
11877: PPUSH
11878: LD_INT 34
11880: PUSH
11881: LD_INT 26
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: PPUSH
11888: CALL_OW 72
11892: PPUSH
11893: LD_EXP 41
11897: PPUSH
11898: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
11902: LD_EXP 38
11906: PPUSH
11907: LD_INT 34
11909: PUSH
11910: LD_INT 26
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PPUSH
11917: CALL_OW 72
11921: PPUSH
11922: LD_INT 215
11924: PPUSH
11925: LD_INT 106
11927: PPUSH
11928: CALL_OW 174
// repeat wait ( 3 ) ;
11932: LD_INT 3
11934: PPUSH
11935: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
11939: LD_EXP 41
11943: PPUSH
11944: CALL_OW 256
11948: PUSH
11949: LD_INT 1000
11951: LESS
11952: IFFALSE 11932
// NormalAttack ( 5 , Grishko ) ;
11954: LD_INT 5
11956: PPUSH
11957: LD_EXP 41
11961: PPUSH
11962: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
11966: LD_INT 6
11968: PPUSH
11969: LD_EXP 38
11973: PPUSH
11974: LD_INT 25
11976: PUSH
11977: LD_INT 1
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: PPUSH
11984: CALL_OW 72
11988: PUSH
11989: LD_INT 4
11991: ARRAY
11992: PPUSH
11993: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
11997: LD_EXP 41
12001: PPUSH
12002: LD_STRING D9-Gri-3
12004: PPUSH
12005: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12009: LD_EXP 40
12013: PPUSH
12014: LD_STRING D9-Kur-3
12016: PPUSH
12017: CALL_OW 94
// music_class := music_auto ;
12021: LD_ADDR_OWVAR 72
12025: PUSH
12026: LD_INT 0
12028: ST_TO_ADDR
// music_nat := music_auto ;
12029: LD_ADDR_OWVAR 71
12033: PUSH
12034: LD_INT 0
12036: ST_TO_ADDR
// for i in omarSquad do
12037: LD_ADDR_VAR 0 1
12041: PUSH
12042: LD_EXP 38
12046: PUSH
12047: FOR_IN
12048: IFFALSE 12190
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12050: LD_VAR 0 1
12054: PPUSH
12055: CALL_OW 247
12059: PUSH
12060: LD_INT 2
12062: EQUAL
12063: PUSH
12064: LD_VAR 0 1
12068: PPUSH
12069: CALL_OW 256
12073: PUSH
12074: LD_INT 1000
12076: LESS
12077: AND
12078: IFFALSE 12144
// begin driver := IsDrivenBy ( i ) ;
12080: LD_ADDR_VAR 0 2
12084: PUSH
12085: LD_VAR 0 1
12089: PPUSH
12090: CALL_OW 311
12094: ST_TO_ADDR
// veh := i ;
12095: LD_ADDR_VAR 0 3
12099: PUSH
12100: LD_VAR 0 1
12104: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12105: LD_VAR 0 2
12109: PPUSH
12110: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12114: LD_VAR 0 2
12118: PPUSH
12119: LD_VAR 0 3
12123: PPUSH
12124: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12128: LD_VAR 0 2
12132: PPUSH
12133: LD_VAR 0 3
12137: PPUSH
12138: CALL_OW 180
// end else
12142: GO 12188
// if GetLives ( i ) < 500 then
12144: LD_VAR 0 1
12148: PPUSH
12149: CALL_OW 256
12153: PUSH
12154: LD_INT 500
12156: LESS
12157: IFFALSE 12188
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12159: LD_EXP 38
12163: PPUSH
12164: LD_INT 25
12166: PUSH
12167: LD_INT 4
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: PPUSH
12174: CALL_OW 72
12178: PPUSH
12179: LD_VAR 0 1
12183: PPUSH
12184: CALL_OW 188
// end ; end ;
12188: GO 12047
12190: POP
12191: POP
// repeat wait ( 0 0$1 ) ;
12192: LD_INT 35
12194: PPUSH
12195: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12199: LD_EXP 38
12203: PPUSH
12204: LD_INT 3
12206: PUSH
12207: LD_INT 24
12209: PUSH
12210: LD_INT 1000
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: LD_INT 21
12223: PUSH
12224: LD_INT 2
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: PPUSH
12235: CALL_OW 72
12239: NOT
12240: PUSH
12241: LD_EXP 38
12245: PPUSH
12246: LD_INT 3
12248: PUSH
12249: LD_INT 24
12251: PUSH
12252: LD_INT 250
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: PPUSH
12263: CALL_OW 72
12267: NOT
12268: AND
12269: IFFALSE 12192
// wait ( 0 0$2 ) ;
12271: LD_INT 70
12273: PPUSH
12274: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12278: LD_ADDR_VAR 0 5
12282: PUSH
12283: LD_EXP 38
12287: PPUSH
12288: LD_INT 58
12290: PUSH
12291: EMPTY
12292: LIST
12293: PUSH
12294: LD_INT 21
12296: PUSH
12297: LD_INT 2
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: PPUSH
12308: CALL_OW 72
12312: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
12313: LD_ADDR_VAR 0 6
12317: PUSH
12318: LD_EXP 38
12322: PPUSH
12323: LD_INT 25
12325: PUSH
12326: LD_INT 3
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: LD_INT 3
12335: PUSH
12336: LD_INT 55
12338: PUSH
12339: EMPTY
12340: LIST
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PPUSH
12350: CALL_OW 72
12354: ST_TO_ADDR
// for i := 1 to tmp do
12355: LD_ADDR_VAR 0 1
12359: PUSH
12360: DOUBLE
12361: LD_INT 1
12363: DEC
12364: ST_TO_ADDR
12365: LD_VAR 0 5
12369: PUSH
12370: FOR_TO
12371: IFFALSE 12401
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
12373: LD_VAR 0 6
12377: PUSH
12378: LD_VAR 0 1
12382: ARRAY
12383: PPUSH
12384: LD_VAR 0 5
12388: PUSH
12389: LD_VAR 0 1
12393: ARRAY
12394: PPUSH
12395: CALL_OW 120
12399: GO 12370
12401: POP
12402: POP
// wait ( 0 0$5 ) ;
12403: LD_INT 175
12405: PPUSH
12406: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
12410: LD_EXP 38
12414: PPUSH
12415: LD_INT 199
12417: PPUSH
12418: LD_INT 141
12420: PPUSH
12421: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
12425: LD_EXP 33
12429: PPUSH
12430: LD_INT 190
12432: PPUSH
12433: LD_INT 143
12435: PPUSH
12436: CALL_OW 114
// AddComHold ( Omar ) ;
12440: LD_EXP 33
12444: PPUSH
12445: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
12449: LD_EXP 38
12453: PPUSH
12454: LD_INT 2
12456: PUSH
12457: LD_INT 25
12459: PUSH
12460: LD_INT 1
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: PUSH
12467: LD_INT 25
12469: PUSH
12470: LD_INT 4
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: LIST
12481: PPUSH
12482: CALL_OW 72
12486: PPUSH
12487: LD_INT 161
12489: PPUSH
12490: LD_INT 130
12492: PPUSH
12493: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
12497: LD_EXP 38
12501: PPUSH
12502: LD_INT 25
12504: PUSH
12505: LD_INT 1
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: PPUSH
12512: CALL_OW 72
12516: PPUSH
12517: LD_INT 163
12519: PPUSH
12520: LD_INT 122
12522: PPUSH
12523: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
12527: LD_EXP 38
12531: PPUSH
12532: LD_INT 25
12534: PUSH
12535: LD_INT 1
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: PPUSH
12542: CALL_OW 72
12546: PUSH
12547: LD_INT 4
12549: ARRAY
12550: PPUSH
12551: LD_INT 165
12553: PPUSH
12554: LD_INT 118
12556: PPUSH
12557: LD_INT 0
12559: PPUSH
12560: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
12564: LD_EXP 38
12568: PPUSH
12569: LD_INT 25
12571: PUSH
12572: LD_INT 1
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PPUSH
12579: CALL_OW 72
12583: PUSH
12584: LD_INT 4
12586: ARRAY
12587: PPUSH
12588: LD_INT 159
12590: PPUSH
12591: LD_INT 116
12593: PPUSH
12594: LD_INT 0
12596: PPUSH
12597: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
12601: LD_EXP 38
12605: PPUSH
12606: LD_INT 21
12608: PUSH
12609: LD_INT 2
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PPUSH
12616: CALL_OW 72
12620: PPUSH
12621: LD_INT 169
12623: PPUSH
12624: LD_INT 114
12626: PPUSH
12627: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
12631: LD_INT 35
12633: PPUSH
12634: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
12638: LD_ADDR_VAR 0 5
12642: PUSH
12643: LD_EXP 38
12647: PPUSH
12648: LD_INT 25
12650: PUSH
12651: LD_INT 1
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: PPUSH
12658: CALL_OW 72
12662: ST_TO_ADDR
// for i in tmp do
12663: LD_ADDR_VAR 0 1
12667: PUSH
12668: LD_VAR 0 5
12672: PUSH
12673: FOR_IN
12674: IFFALSE 12771
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
12676: LD_VAR 0 1
12680: PPUSH
12681: CALL_OW 256
12685: PUSH
12686: LD_INT 600
12688: LESS
12689: PUSH
12690: LD_VAR 0 1
12694: PPUSH
12695: LD_INT 161
12697: PPUSH
12698: LD_INT 130
12700: PPUSH
12701: CALL_OW 297
12705: PUSH
12706: LD_INT 6
12708: GREATER
12709: AND
12710: IFFALSE 12727
// ComMoveXY ( i , 161 , 130 ) ;
12712: LD_VAR 0 1
12716: PPUSH
12717: LD_INT 161
12719: PPUSH
12720: LD_INT 130
12722: PPUSH
12723: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
12727: LD_VAR 0 1
12731: PPUSH
12732: CALL_OW 256
12736: PUSH
12737: LD_INT 1000
12739: EQUAL
12740: PUSH
12741: LD_VAR 0 1
12745: PPUSH
12746: CALL_OW 314
12750: NOT
12751: AND
12752: IFFALSE 12769
// ComAgressiveMove ( i , 160 , 109 ) ;
12754: LD_VAR 0 1
12758: PPUSH
12759: LD_INT 160
12761: PPUSH
12762: LD_INT 109
12764: PPUSH
12765: CALL_OW 114
// end ;
12769: GO 12673
12771: POP
12772: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
12773: LD_ADDR_VAR 0 5
12777: PUSH
12778: LD_EXP 38
12782: PPUSH
12783: LD_INT 21
12785: PUSH
12786: LD_INT 2
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: PPUSH
12793: CALL_OW 72
12797: ST_TO_ADDR
// for i in tmp do
12798: LD_ADDR_VAR 0 1
12802: PUSH
12803: LD_VAR 0 5
12807: PUSH
12808: FOR_IN
12809: IFFALSE 13075
// begin tmp2 := IsDrivenBy ( i ) ;
12811: LD_ADDR_VAR 0 6
12815: PUSH
12816: LD_VAR 0 1
12820: PPUSH
12821: CALL_OW 311
12825: ST_TO_ADDR
// if not tmp2 then
12826: LD_VAR 0 6
12830: NOT
12831: IFFALSE 12835
// continue ;
12833: GO 12808
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
12835: LD_VAR 0 1
12839: PPUSH
12840: CALL_OW 256
12844: PUSH
12845: LD_INT 600
12847: GREATEREQUAL
12848: PUSH
12849: LD_VAR 0 1
12853: PPUSH
12854: CALL_OW 110
12858: PUSH
12859: LD_INT 1
12861: EQUAL
12862: AND
12863: IFFALSE 12877
// SetTag ( i , 0 ) ;
12865: LD_VAR 0 1
12869: PPUSH
12870: LD_INT 0
12872: PPUSH
12873: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
12877: LD_VAR 0 1
12881: PPUSH
12882: CALL_OW 256
12886: PUSH
12887: LD_INT 600
12889: GREATEREQUAL
12890: PUSH
12891: LD_VAR 0 1
12895: PPUSH
12896: CALL_OW 110
12900: NOT
12901: AND
12902: IFFALSE 12928
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
12904: LD_VAR 0 1
12908: PPUSH
12909: LD_VAR 0 7
12913: PPUSH
12914: LD_VAR 0 1
12918: PPUSH
12919: CALL_OW 74
12923: PPUSH
12924: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
12928: LD_VAR 0 1
12932: PPUSH
12933: CALL_OW 256
12937: PUSH
12938: LD_INT 600
12940: LESS
12941: PUSH
12942: LD_VAR 0 1
12946: PPUSH
12947: CALL_OW 110
12951: NOT
12952: AND
12953: IFFALSE 12982
// begin SetTag ( i , 1 ) ;
12955: LD_VAR 0 1
12959: PPUSH
12960: LD_INT 1
12962: PPUSH
12963: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
12967: LD_VAR 0 1
12971: PPUSH
12972: LD_INT 202
12974: PPUSH
12975: LD_INT 150
12977: PPUSH
12978: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
12982: LD_VAR 0 1
12986: PPUSH
12987: CALL_OW 110
12991: PUSH
12992: LD_INT 1
12994: EQUAL
12995: PUSH
12996: LD_VAR 0 1
13000: PPUSH
13001: LD_INT 202
13003: PPUSH
13004: LD_INT 150
13006: PPUSH
13007: CALL_OW 297
13011: PUSH
13012: LD_INT 6
13014: LESS
13015: AND
13016: PUSH
13017: LD_VAR 0 6
13021: AND
13022: IFFALSE 13073
// begin ComExitVehicle ( tmp2 ) ;
13024: LD_VAR 0 6
13028: PPUSH
13029: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13033: LD_VAR 0 6
13037: PPUSH
13038: LD_VAR 0 1
13042: PPUSH
13043: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13047: LD_VAR 0 6
13051: PPUSH
13052: LD_INT 700
13054: PPUSH
13055: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13059: LD_VAR 0 6
13063: PPUSH
13064: LD_VAR 0 1
13068: PPUSH
13069: CALL_OW 180
// end ; end ;
13073: GO 12808
13075: POP
13076: POP
// until kirovDestroyed ;
13077: LD_EXP 16
13081: IFFALSE 12631
// repeat wait ( 0 0$1 ) ;
13083: LD_INT 35
13085: PPUSH
13086: CALL_OW 67
// for i in omarSquad union Omar do
13090: LD_ADDR_VAR 0 1
13094: PUSH
13095: LD_EXP 38
13099: PUSH
13100: LD_EXP 33
13104: UNION
13105: PUSH
13106: FOR_IN
13107: IFFALSE 13277
// if IsInArea ( i , southRoadArea ) then
13109: LD_VAR 0 1
13113: PPUSH
13114: LD_INT 15
13116: PPUSH
13117: CALL_OW 308
13121: IFFALSE 13134
// RemoveUnit ( i ) else
13123: LD_VAR 0 1
13127: PPUSH
13128: CALL_OW 64
13132: GO 13275
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
13134: LD_VAR 0 1
13138: PPUSH
13139: CALL_OW 257
13143: PUSH
13144: LD_INT 3
13146: EQUAL
13147: PUSH
13148: LD_VAR 0 1
13152: PPUSH
13153: CALL_OW 310
13157: NOT
13158: AND
13159: PUSH
13160: LD_INT 22
13162: PUSH
13163: LD_INT 5
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: PUSH
13170: LD_INT 24
13172: PUSH
13173: LD_INT 251
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: PUSH
13180: LD_INT 21
13182: PUSH
13183: LD_INT 2
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: PUSH
13190: LD_INT 58
13192: PUSH
13193: EMPTY
13194: LIST
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: PPUSH
13202: CALL_OW 69
13206: AND
13207: IFFALSE 13260
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
13209: LD_VAR 0 1
13213: PPUSH
13214: LD_INT 22
13216: PUSH
13217: LD_INT 5
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PUSH
13224: LD_INT 21
13226: PUSH
13227: LD_INT 2
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: PUSH
13234: LD_INT 58
13236: PUSH
13237: EMPTY
13238: LIST
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: LIST
13244: PPUSH
13245: CALL_OW 69
13249: PUSH
13250: LD_INT 1
13252: ARRAY
13253: PPUSH
13254: CALL_OW 120
13258: GO 13275
// ComMoveXY ( i , 208 , 162 ) ;
13260: LD_VAR 0 1
13264: PPUSH
13265: LD_INT 208
13267: PPUSH
13268: LD_INT 162
13270: PPUSH
13271: CALL_OW 111
// end ;
13275: GO 13106
13277: POP
13278: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
13279: LD_INT 22
13281: PUSH
13282: LD_INT 5
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: PUSH
13289: LD_INT 21
13291: PUSH
13292: LD_INT 1
13294: PUSH
13295: EMPTY
13296: LIST
13297: LIST
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: PPUSH
13303: CALL_OW 69
13307: NOT
13308: IFFALSE 13083
// end ;
13310: PPOPN 7
13312: END
// every 0 0$1 trigger IsDead ( kirov ) do
13313: LD_INT 71
13315: PPUSH
13316: CALL_OW 301
13320: IFFALSE 13337
13322: GO 13324
13324: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
13325: LD_EXP 25
13329: PPUSH
13330: LD_STRING DH-1-Kirov
13332: PPUSH
13333: CALL_OW 88
13337: END
// every 0 0$1 trigger See ( 2 , beria ) do
13338: LD_INT 2
13340: PPUSH
13341: LD_INT 106
13343: PPUSH
13344: CALL_OW 292
13348: IFFALSE 13365
13350: GO 13352
13352: DISABLE
// Say ( Heike , DH-1-Beria ) ;
13353: LD_EXP 25
13357: PPUSH
13358: LD_STRING DH-1-Beria
13360: PPUSH
13361: CALL_OW 88
13365: END
// every 0 0$1 trigger See ( 2 , kagan ) do
13366: LD_INT 2
13368: PPUSH
13369: LD_INT 112
13371: PPUSH
13372: CALL_OW 292
13376: IFFALSE 13643
13378: GO 13380
13380: DISABLE
// begin DialogueOn ;
13381: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
13385: LD_INT 112
13387: PPUSH
13388: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
13392: LD_EXP 25
13396: PPUSH
13397: LD_STRING DH-1-Kagan
13399: PPUSH
13400: CALL_OW 88
// if Kamil then
13404: LD_EXP 29
13408: IFFALSE 13446
// begin Say ( Kamil , DKam-Kagan-2 ) ;
13410: LD_EXP 29
13414: PPUSH
13415: LD_STRING DKam-Kagan-2
13417: PPUSH
13418: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
13422: LD_EXP 26
13426: PPUSH
13427: LD_STRING DG-Kagan-3
13429: PPUSH
13430: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
13434: LD_EXP 26
13438: PPUSH
13439: LD_STRING DG-Kagan-4
13441: PPUSH
13442: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
13446: LD_STRING KaganBase
13448: PPUSH
13449: CALL_OW 97
13453: PUSH
13454: LD_INT 1
13456: DOUBLE
13457: EQUAL
13458: IFTRUE 13462
13460: GO 13557
13462: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
13463: LD_EXP 25
13467: PPUSH
13468: LD_STRING DH-Kagan-5
13470: PPUSH
13471: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
13475: LD_EXP 25
13479: PPUSH
13480: LD_STRING DH-Kagan-6
13482: PPUSH
13483: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
13487: LD_EXP 36
13491: PPUSH
13492: LD_STRING DShar-Kagan-7
13494: PPUSH
13495: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
13499: LD_EXP 25
13503: PPUSH
13504: LD_STRING DH-Kagan-8
13506: PPUSH
13507: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
13511: LD_EXP 25
13515: PPUSH
13516: LD_STRING DH-Kagan-9
13518: PPUSH
13519: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
13523: LD_EXP 36
13527: PPUSH
13528: LD_STRING DShar-Kagan-10
13530: PPUSH
13531: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
13535: LD_EXP 25
13539: PPUSH
13540: LD_STRING DH-Kagan-11
13542: PPUSH
13543: CALL_OW 88
// kaganCaptured := true ;
13547: LD_ADDR_EXP 24
13551: PUSH
13552: LD_INT 1
13554: ST_TO_ADDR
// end ; 2 :
13555: GO 13639
13557: LD_INT 2
13559: DOUBLE
13560: EQUAL
13561: IFTRUE 13565
13563: GO 13638
13565: POP
// begin if FilterAllUnits ( [ f_side , 8 ] ) and Aviradze then
13566: LD_INT 22
13568: PUSH
13569: LD_INT 8
13571: PUSH
13572: EMPTY
13573: LIST
13574: LIST
13575: PPUSH
13576: CALL_OW 69
13580: PUSH
13581: LD_EXP 35
13585: AND
13586: IFFALSE 13600
// Say ( Heike , DH-Kagan-a-5 ) ;
13588: LD_EXP 25
13592: PPUSH
13593: LD_STRING DH-Kagan-a-5
13595: PPUSH
13596: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
13600: LD_EXP 25
13604: PPUSH
13605: LD_STRING DH-Kagan-a-6
13607: PPUSH
13608: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
13612: LD_EXP 25
13616: PPUSH
13617: LD_STRING DH-Kagan-a-7
13619: PPUSH
13620: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
13624: LD_EXP 26
13628: PPUSH
13629: LD_STRING DG-Kagan-a-8
13631: PPUSH
13632: CALL_OW 88
// end ; end ;
13636: GO 13639
13638: POP
// DialogueOff ;
13639: CALL_OW 7
// end ;
13643: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
13644: LD_EXP 18
13648: PUSH
13649: LD_INT 112
13651: PPUSH
13652: CALL_OW 255
13656: PUSH
13657: LD_INT 2
13659: EQUAL
13660: OR
13661: IFFALSE 13673
13663: GO 13665
13665: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
13666: LD_STRING KaganDone
13668: PPUSH
13669: CALL_OW 337
13673: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
13674: LD_EXP 6
13678: PUSH
13679: LD_EXP 48
13683: PPUSH
13684: LD_INT 95
13686: PUSH
13687: LD_INT 19
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: PPUSH
13694: CALL_OW 72
13698: AND
13699: IFFALSE 13776
13701: GO 13703
13703: DISABLE
// begin DialogueOn ;
13704: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
13708: LD_INT 63
13710: PPUSH
13711: LD_INT 32
13713: PPUSH
13714: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
13718: LD_INT 63
13720: PPUSH
13721: LD_INT 32
13723: PPUSH
13724: LD_INT 2
13726: PPUSH
13727: LD_INT 12
13729: NEG
13730: PPUSH
13731: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
13735: LD_EXP 25
13739: PPUSH
13740: LD_STRING DH-Omicron-1
13742: PPUSH
13743: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
13747: LD_EXP 27
13751: PPUSH
13752: LD_STRING DM-Omicron-2
13754: PPUSH
13755: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
13759: LD_INT 63
13761: PPUSH
13762: LD_INT 32
13764: PPUSH
13765: LD_INT 2
13767: PPUSH
13768: CALL_OW 331
// DialogueOff ;
13772: CALL_OW 7
// end ;
13776: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
13777: LD_INT 2
13779: PPUSH
13780: LD_EXP 50
13784: PPUSH
13785: CALL_OW 292
13789: PUSH
13790: LD_EXP 50
13794: PPUSH
13795: CALL_OW 255
13799: PUSH
13800: LD_INT 2
13802: EQUAL
13803: OR
13804: PUSH
13805: LD_INT 106
13807: PPUSH
13808: CALL_OW 255
13812: PUSH
13813: LD_INT 2
13815: EQUAL
13816: OR
13817: PUSH
13818: LD_EXP 50
13822: PPUSH
13823: CALL_OW 302
13827: AND
13828: PUSH
13829: LD_EXP 25
13833: PPUSH
13834: CALL_OW 302
13838: AND
13839: PUSH
13840: LD_EXP 35
13844: PPUSH
13845: CALL_OW 302
13849: AND
13850: IFFALSE 14571
13852: GO 13854
13854: DISABLE
13855: LD_INT 0
13857: PPUSH
13858: PPUSH
13859: PPUSH
13860: PPUSH
13861: PPUSH
// begin DialogueOn ;
13862: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
13866: LD_INT 111
13868: PPUSH
13869: LD_INT 90
13871: PPUSH
13872: LD_INT 2
13874: PPUSH
13875: LD_INT 6
13877: NEG
13878: PPUSH
13879: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
13883: LD_INT 111
13885: PPUSH
13886: LD_INT 90
13888: PPUSH
13889: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
13893: LD_EXP 35
13897: PPUSH
13898: LD_STRING DA-Cap-1
13900: PPUSH
13901: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
13905: LD_EXP 25
13909: PPUSH
13910: LD_STRING DH-Cap-2
13912: PPUSH
13913: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
13917: LD_INT 111
13919: PPUSH
13920: LD_INT 90
13922: PPUSH
13923: LD_INT 2
13925: PPUSH
13926: CALL_OW 331
// DialogueOff ;
13930: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
13934: LD_INT 35
13936: PPUSH
13937: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 110 , 95 , 12 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_distxy , 110 , 95 , 12 ] ] ) ;
13941: LD_EXP 17
13945: PUSH
13946: LD_INT 106
13948: PPUSH
13949: CALL_OW 255
13953: PUSH
13954: LD_INT 2
13956: EQUAL
13957: OR
13958: PUSH
13959: LD_EXP 50
13963: PPUSH
13964: CALL_OW 255
13968: PUSH
13969: LD_INT 2
13971: EQUAL
13972: OR
13973: PUSH
13974: LD_EXP 50
13978: PPUSH
13979: CALL_OW 302
13983: AND
13984: PUSH
13985: LD_EXP 35
13989: PPUSH
13990: CALL_OW 302
13994: AND
13995: PUSH
13996: LD_INT 2
13998: PPUSH
13999: CALL_OW 463
14003: NOT
14004: AND
14005: PUSH
14006: LD_INT 22
14008: PUSH
14009: LD_INT 3
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: PUSH
14016: LD_INT 21
14018: PUSH
14019: LD_INT 1
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: PUSH
14026: LD_INT 92
14028: PUSH
14029: LD_INT 110
14031: PUSH
14032: LD_INT 95
14034: PUSH
14035: LD_INT 12
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: LIST
14048: PPUSH
14049: CALL_OW 69
14053: NOT
14054: AND
14055: PUSH
14056: LD_INT 22
14058: PUSH
14059: LD_INT 3
14061: PUSH
14062: EMPTY
14063: LIST
14064: LIST
14065: PUSH
14066: LD_INT 30
14068: PUSH
14069: LD_INT 5
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: PUSH
14076: LD_INT 92
14078: PUSH
14079: LD_INT 110
14081: PUSH
14082: LD_INT 95
14084: PUSH
14085: LD_INT 12
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: LIST
14098: PPUSH
14099: CALL_OW 69
14103: NOT
14104: AND
14105: IFFALSE 13934
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14107: LD_ADDR_VAR 0 2
14111: PUSH
14112: LD_EXP 37
14116: PUSH
14117: LD_EXP 28
14121: PUSH
14122: LD_EXP 29
14126: PUSH
14127: LD_EXP 31
14131: PUSH
14132: LD_EXP 30
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: UNION
14143: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14144: LD_ADDR_VAR 0 2
14148: PUSH
14149: LD_VAR 0 2
14153: PPUSH
14154: LD_INT 50
14156: PUSH
14157: EMPTY
14158: LIST
14159: PPUSH
14160: CALL_OW 72
14164: ST_TO_ADDR
// if tmp < 2 then
14165: LD_VAR 0 2
14169: PUSH
14170: LD_INT 2
14172: LESS
14173: IFFALSE 14185
// q := 2 else
14175: LD_ADDR_VAR 0 4
14179: PUSH
14180: LD_INT 2
14182: ST_TO_ADDR
14183: GO 14198
// q := Query ( LabCap ) ;
14185: LD_ADDR_VAR 0 4
14189: PUSH
14190: LD_STRING LabCap
14192: PPUSH
14193: CALL_OW 97
14197: ST_TO_ADDR
// case q of 1 :
14198: LD_VAR 0 4
14202: PUSH
14203: LD_INT 1
14205: DOUBLE
14206: EQUAL
14207: IFTRUE 14211
14209: GO 14535
14211: POP
// begin DoNotAttack ( 2 , ruLab ) ;
14212: LD_INT 2
14214: PPUSH
14215: LD_EXP 50
14219: PPUSH
14220: CALL_OW 471
// labCaptured := true ;
14224: LD_ADDR_EXP 21
14228: PUSH
14229: LD_INT 1
14231: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
14232: LD_EXP 25
14236: PPUSH
14237: LD_STRING DH-Cap-a-1
14239: PPUSH
14240: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
14244: LD_EXP 35
14248: PPUSH
14249: LD_STRING DA-Cap-a-2
14251: PPUSH
14252: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike ] ^ [ sel_changeable ] ^ tmp ;
14256: LD_ADDR_VAR 0 5
14260: PUSH
14261: LD_EXP 35
14265: PUSH
14266: LD_INT -3
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PUSH
14273: LD_INT -2
14275: PUSH
14276: LD_INT -4
14278: PUSH
14279: LD_EXP 25
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: LIST
14288: ADD
14289: PUSH
14290: LD_INT -3
14292: PUSH
14293: EMPTY
14294: LIST
14295: ADD
14296: PUSH
14297: LD_VAR 0 2
14301: ADD
14302: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
14303: LD_ADDR_VAR 0 3
14307: PUSH
14308: LD_STRING Select two characters to go with Aviradze
14310: PPUSH
14311: LD_INT 2
14313: PPUSH
14314: LD_INT 2
14316: PPUSH
14317: LD_VAR 0 5
14321: PPUSH
14322: EMPTY
14323: PPUSH
14324: CALL_OW 42
14328: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
14329: LD_EXP 50
14333: PPUSH
14334: LD_INT 8
14336: PPUSH
14337: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
14341: LD_EXP 35
14345: PPUSH
14346: LD_INT 8
14348: PPUSH
14349: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
14353: LD_ADDR_EXP 39
14357: PUSH
14358: LD_EXP 35
14362: PUSH
14363: EMPTY
14364: LIST
14365: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
14366: LD_EXP 35
14370: PPUSH
14371: CALL_OW 310
14375: IFFALSE 14386
// ComExit ( Aviradze ) ;
14377: LD_EXP 35
14381: PPUSH
14382: CALL 71549 0 1
// wait ( 3 ) ;
14386: LD_INT 3
14388: PPUSH
14389: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
14393: LD_EXP 35
14397: PPUSH
14398: LD_EXP 50
14402: PPUSH
14403: CALL_OW 120
// for i := 1 to 2 do
14407: LD_ADDR_VAR 0 1
14411: PUSH
14412: DOUBLE
14413: LD_INT 1
14415: DEC
14416: ST_TO_ADDR
14417: LD_INT 2
14419: PUSH
14420: FOR_TO
14421: IFFALSE 14524
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
14423: LD_ADDR_EXP 39
14427: PUSH
14428: LD_EXP 39
14432: PUSH
14433: LD_VAR 0 3
14437: PUSH
14438: LD_VAR 0 1
14442: ARRAY
14443: UNION
14444: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
14445: LD_VAR 0 3
14449: PUSH
14450: LD_VAR 0 1
14454: ARRAY
14455: PPUSH
14456: LD_INT 8
14458: PPUSH
14459: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
14463: LD_VAR 0 3
14467: PUSH
14468: LD_VAR 0 1
14472: ARRAY
14473: PPUSH
14474: CALL_OW 310
14478: IFFALSE 14495
// ComExit ( tmp2 [ i ] ) ;
14480: LD_VAR 0 3
14484: PUSH
14485: LD_VAR 0 1
14489: ARRAY
14490: PPUSH
14491: CALL 71549 0 1
// wait ( 3 ) ;
14495: LD_INT 3
14497: PPUSH
14498: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
14502: LD_VAR 0 3
14506: PUSH
14507: LD_VAR 0 1
14511: ARRAY
14512: PPUSH
14513: LD_EXP 50
14517: PPUSH
14518: CALL_OW 120
// end ;
14522: GO 14420
14524: POP
14525: POP
// SetAchievement ( ACH_LAB ) ;
14526: LD_STRING ACH_LAB
14528: PPUSH
14529: CALL_OW 543
// end ; 2 :
14533: GO 14571
14535: LD_INT 2
14537: DOUBLE
14538: EQUAL
14539: IFTRUE 14543
14541: GO 14570
14543: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
14544: LD_EXP 25
14548: PPUSH
14549: LD_STRING DH-Cap-b-1
14551: PPUSH
14552: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
14556: LD_EXP 35
14560: PPUSH
14561: LD_STRING DA-Cap-b-2
14563: PPUSH
14564: CALL_OW 88
// end ; end ;
14568: GO 14571
14570: POP
// end ;
14571: PPOPN 5
14573: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
14574: LD_INT 10
14576: PPUSH
14577: LD_INT 22
14579: PUSH
14580: LD_INT 2
14582: PUSH
14583: EMPTY
14584: LIST
14585: LIST
14586: PUSH
14587: LD_INT 30
14589: PUSH
14590: LD_INT 31
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: PUSH
14597: EMPTY
14598: LIST
14599: LIST
14600: PPUSH
14601: CALL_OW 70
14605: PUSH
14606: LD_INT 2
14608: GREATEREQUAL
14609: IFFALSE 14621
14611: GO 14613
14613: DISABLE
// SetAchievement ( ACH_KING ) ;
14614: LD_STRING ACH_KING
14616: PPUSH
14617: CALL_OW 543
14621: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
14622: LD_EXP 11
14626: NOT
14627: PUSH
14628: LD_INT 10
14630: PPUSH
14631: LD_INT 22
14633: PUSH
14634: LD_INT 2
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PUSH
14641: LD_INT 2
14643: PUSH
14644: LD_INT 30
14646: PUSH
14647: LD_INT 31
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PUSH
14654: LD_INT 30
14656: PUSH
14657: LD_INT 4
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: LIST
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: PPUSH
14673: CALL_OW 70
14677: AND
14678: IFFALSE 14698
14680: GO 14682
14682: DISABLE
// begin hillBase := true ;
14683: LD_ADDR_EXP 15
14687: PUSH
14688: LD_INT 1
14690: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
14691: LD_STRING HillDone
14693: PPUSH
14694: CALL_OW 337
// end ;
14698: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
14699: LD_EXP 30
14703: PUSH
14704: LD_EXP 30
14708: PPUSH
14709: CALL_OW 256
14713: PUSH
14714: LD_INT 3
14716: LESS
14717: AND
14718: IFFALSE 14764
14720: GO 14722
14722: DISABLE
// begin DialogueOn ;
14723: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
14727: LD_EXP 30
14731: PPUSH
14732: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
14736: LD_EXP 30
14740: PPUSH
14741: LD_STRING DK-Kkilled-1
14743: PPUSH
14744: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
14748: LD_EXP 25
14752: PPUSH
14753: LD_STRING DH-Kkilled-2
14755: PPUSH
14756: CALL_OW 88
// DialogueOff ;
14760: CALL_OW 7
// end ;
14764: END
// every 0 0$1 trigger kaiaKilledByRussian do
14765: LD_EXP 23
14769: IFFALSE 14786
14771: GO 14773
14773: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
14774: LD_EXP 25
14778: PPUSH
14779: LD_STRING DH-Kkilled-3
14781: PPUSH
14782: CALL_OW 88
14786: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo ;
14787: LD_EXP 16
14791: PUSH
14792: LD_INT 106
14794: PPUSH
14795: CALL_OW 255
14799: PUSH
14800: LD_INT 2
14802: EQUAL
14803: PUSH
14804: LD_EXP 17
14808: OR
14809: AND
14810: PUSH
14811: LD_EXP 18
14815: PUSH
14816: LD_EXP 24
14820: PUSH
14821: LD_INT 112
14823: PPUSH
14824: CALL_OW 255
14828: PUSH
14829: LD_INT 2
14831: EQUAL
14832: AND
14833: OR
14834: AND
14835: IFFALSE 16024
14837: GO 14839
14839: DISABLE
14840: LD_INT 0
14842: PPUSH
14843: PPUSH
14844: PPUSH
14845: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
14846: LD_STRING GoToWest
14848: PPUSH
14849: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
14853: LD_INT 17
14855: PPUSH
14856: LD_INT 1
14858: PPUSH
14859: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
14863: LD_INT 35
14865: PPUSH
14866: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
14870: LD_ADDR_VAR 0 2
14874: PUSH
14875: LD_INT 17
14877: PPUSH
14878: LD_INT 22
14880: PUSH
14881: LD_INT 2
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: LD_INT 2
14890: PUSH
14891: LD_INT 21
14893: PUSH
14894: LD_INT 1
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: PUSH
14901: LD_INT 21
14903: PUSH
14904: LD_INT 2
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: PUSH
14911: LD_INT 3
14913: PUSH
14914: LD_INT 58
14916: PUSH
14917: EMPTY
14918: LIST
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: LIST
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PPUSH
14937: CALL_OW 70
14941: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
14942: LD_ADDR_VAR 0 3
14946: PUSH
14947: LD_INT 22
14949: PUSH
14950: LD_INT 2
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: LD_INT 3
14959: PUSH
14960: LD_INT 55
14962: PUSH
14963: EMPTY
14964: LIST
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: PUSH
14970: LD_INT 2
14972: PUSH
14973: LD_INT 21
14975: PUSH
14976: LD_INT 1
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: PUSH
14983: LD_INT 21
14985: PUSH
14986: LD_INT 2
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: PUSH
14993: LD_INT 3
14995: PUSH
14996: LD_INT 58
14998: PUSH
14999: EMPTY
15000: LIST
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: LIST
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: LIST
15019: PPUSH
15020: CALL_OW 69
15024: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15025: LD_VAR 0 2
15029: PUSH
15030: LD_INT 0
15032: PLUS
15033: PUSH
15034: LD_VAR 0 3
15038: PUSH
15039: LD_INT 0
15041: PLUS
15042: EQUAL
15043: IFFALSE 14863
// SaveCharacters ( Heike , 04_1_Heike ) ;
15045: LD_EXP 25
15049: PPUSH
15050: LD_STRING 04_1_Heike
15052: PPUSH
15053: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15057: LD_EXP 35
15061: PUSH
15062: LD_EXP 35
15066: PUSH
15067: LD_EXP 39
15071: IN
15072: NOT
15073: AND
15074: IFFALSE 15090
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15076: LD_EXP 35
15080: PPUSH
15081: LD_STRING 04_1_Aviradze
15083: PPUSH
15084: CALL_OW 38
15088: GO 15108
// if Aviradze then
15090: LD_EXP 35
15094: IFFALSE 15108
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15096: LD_EXP 35
15100: PPUSH
15101: LD_STRING 04_1_Aviradze_L
15103: PPUSH
15104: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15108: LD_EXP 28
15112: PUSH
15113: LD_EXP 28
15117: PUSH
15118: LD_EXP 39
15122: IN
15123: NOT
15124: AND
15125: IFFALSE 15141
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15127: LD_EXP 28
15131: PPUSH
15132: LD_STRING 04_1_Ibrahim
15134: PPUSH
15135: CALL_OW 38
15139: GO 15159
// if Ibrahim then
15141: LD_EXP 28
15145: IFFALSE 15159
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
15147: LD_EXP 28
15151: PPUSH
15152: LD_STRING 04_1_Ibrahim_L
15154: PPUSH
15155: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
15159: LD_EXP 29
15163: PUSH
15164: LD_EXP 29
15168: PUSH
15169: LD_EXP 39
15173: IN
15174: NOT
15175: AND
15176: IFFALSE 15192
// SaveCharacters ( Kamil , 04_1_Kamil ) else
15178: LD_EXP 29
15182: PPUSH
15183: LD_STRING 04_1_Kamil
15185: PPUSH
15186: CALL_OW 38
15190: GO 15210
// if Kamil then
15192: LD_EXP 29
15196: IFFALSE 15210
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
15198: LD_EXP 29
15202: PPUSH
15203: LD_STRING 04_1_Kamil_L
15205: PPUSH
15206: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
15210: LD_EXP 31
15214: PUSH
15215: LD_EXP 31
15219: PUSH
15220: LD_EXP 39
15224: IN
15225: NOT
15226: AND
15227: IFFALSE 15243
// SaveCharacters ( Sophia , 04_1_Sophia ) else
15229: LD_EXP 31
15233: PPUSH
15234: LD_STRING 04_1_Sophia
15236: PPUSH
15237: CALL_OW 38
15241: GO 15261
// if Sophia then
15243: LD_EXP 31
15247: IFFALSE 15261
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
15249: LD_EXP 31
15253: PPUSH
15254: LD_STRING 04_1_Sophia_L
15256: PPUSH
15257: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
15261: LD_EXP 30
15265: PUSH
15266: LD_EXP 30
15270: PUSH
15271: LD_EXP 39
15275: IN
15276: NOT
15277: AND
15278: IFFALSE 15294
// SaveCharacters ( Kaia , 04_1_Kaia ) else
15280: LD_EXP 30
15284: PPUSH
15285: LD_STRING 04_1_Kaia
15287: PPUSH
15288: CALL_OW 38
15292: GO 15312
// if Kaia then
15294: LD_EXP 30
15298: IFFALSE 15312
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
15300: LD_EXP 30
15304: PPUSH
15305: LD_STRING 04_1_Kaia_L
15307: PPUSH
15308: CALL_OW 38
// if Givi then
15312: LD_EXP 26
15316: IFFALSE 15330
// SaveCharacters ( Givi , 04_1_Givi ) ;
15318: LD_EXP 26
15322: PPUSH
15323: LD_STRING 04_1_Givi
15325: PPUSH
15326: CALL_OW 38
// if Mike then
15330: LD_EXP 27
15334: IFFALSE 15348
// SaveCharacters ( Mike , 04_1_Mike ) ;
15336: LD_EXP 27
15340: PPUSH
15341: LD_STRING 04_1_Mike
15343: PPUSH
15344: CALL_OW 38
// if Markov then
15348: LD_EXP 32
15352: IFFALSE 15366
// SaveCharacters ( Markov , 04_1_Markov ) ;
15354: LD_EXP 32
15358: PPUSH
15359: LD_STRING 04_1_Markov
15361: PPUSH
15362: CALL_OW 38
// if Kurt then
15366: LD_EXP 34
15370: IFFALSE 15391
// begin SaveCharacters ( Kurt , 04_1_Kurt ) ;
15372: LD_EXP 34
15376: PPUSH
15377: LD_STRING 04_1_Kurt
15379: PPUSH
15380: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KURT) ) ;
15384: LD_STRING enableBioCharacter(BIO_KURT)
15386: PPUSH
15387: CALL_OW 559
// end ; if heikeSecondSquad diff aviradzeSquad then
15391: LD_EXP 37
15395: PUSH
15396: LD_EXP 39
15400: DIFF
15401: IFFALSE 15421
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
15403: LD_EXP 37
15407: PUSH
15408: LD_EXP 39
15412: DIFF
15413: PPUSH
15414: LD_STRING 04_1_others
15416: PPUSH
15417: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
15421: LD_EXP 39
15425: PUSH
15426: LD_EXP 37
15430: AND
15431: IFFALSE 15516
// begin tmp := [ ] ;
15433: LD_ADDR_VAR 0 2
15437: PUSH
15438: EMPTY
15439: ST_TO_ADDR
// for i in heikeSecondSquad do
15440: LD_ADDR_VAR 0 1
15444: PUSH
15445: LD_EXP 37
15449: PUSH
15450: FOR_IN
15451: IFFALSE 15496
// if i in aviradzeSquad then
15453: LD_VAR 0 1
15457: PUSH
15458: LD_EXP 39
15462: IN
15463: IFFALSE 15494
// tmp := Replace ( tmp , tmp + 1 , i ) ;
15465: LD_ADDR_VAR 0 2
15469: PUSH
15470: LD_VAR 0 2
15474: PPUSH
15475: LD_VAR 0 2
15479: PUSH
15480: LD_INT 1
15482: PLUS
15483: PPUSH
15484: LD_VAR 0 1
15488: PPUSH
15489: CALL_OW 1
15493: ST_TO_ADDR
15494: GO 15450
15496: POP
15497: POP
// if tmp then
15498: LD_VAR 0 2
15502: IFFALSE 15516
// SaveCharacters ( tmp , 04_1_others_L ) ;
15504: LD_VAR 0 2
15508: PPUSH
15509: LD_STRING 04_1_others_L
15511: PPUSH
15512: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
15516: LD_ADDR_VAR 0 2
15520: PUSH
15521: LD_INT 22
15523: PUSH
15524: LD_INT 2
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: PUSH
15531: LD_INT 23
15533: PUSH
15534: LD_INT 0
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: PPUSH
15545: CALL_OW 69
15549: ST_TO_ADDR
// if tmp then
15550: LD_VAR 0 2
15554: IFFALSE 15568
// SaveCharacters ( tmp , 04_1_apes ) ;
15556: LD_VAR 0 2
15560: PPUSH
15561: LD_STRING 04_1_apes
15563: PPUSH
15564: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
15568: LD_ADDR_VAR 0 2
15572: PUSH
15573: LD_INT 17
15575: PPUSH
15576: LD_INT 21
15578: PUSH
15579: LD_INT 2
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: PPUSH
15586: CALL_OW 70
15590: ST_TO_ADDR
// if tmp then
15591: LD_VAR 0 2
15595: IFFALSE 15889
// begin tmp2 := [ ] ;
15597: LD_ADDR_VAR 0 3
15601: PUSH
15602: EMPTY
15603: ST_TO_ADDR
// for i in tmp do
15604: LD_ADDR_VAR 0 1
15608: PUSH
15609: LD_VAR 0 2
15613: PUSH
15614: FOR_IN
15615: IFFALSE 15875
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
15617: LD_VAR 0 1
15621: PPUSH
15622: CALL_OW 264
15626: PUSH
15627: LD_INT 32
15629: PUSH
15630: LD_INT 12
15632: PUSH
15633: LD_INT 51
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: LIST
15640: IN
15641: IFFALSE 15778
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
15643: LD_ADDR_VAR 0 4
15647: PUSH
15648: LD_VAR 0 1
15652: PPUSH
15653: LD_INT 1
15655: PPUSH
15656: CALL_OW 289
15660: PUSH
15661: LD_VAR 0 1
15665: PPUSH
15666: LD_INT 2
15668: PPUSH
15669: CALL_OW 289
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
15678: LD_ADDR_VAR 0 3
15682: PUSH
15683: LD_VAR 0 3
15687: PPUSH
15688: LD_VAR 0 3
15692: PUSH
15693: LD_INT 1
15695: PLUS
15696: PPUSH
15697: LD_VAR 0 1
15701: PPUSH
15702: CALL_OW 265
15706: PUSH
15707: LD_VAR 0 1
15711: PPUSH
15712: CALL_OW 262
15716: PUSH
15717: LD_VAR 0 1
15721: PPUSH
15722: CALL_OW 263
15726: PUSH
15727: LD_VAR 0 1
15731: PPUSH
15732: CALL_OW 264
15736: PUSH
15737: LD_VAR 0 1
15741: PPUSH
15742: CALL_OW 248
15746: PUSH
15747: LD_VAR 0 1
15751: PPUSH
15752: CALL_OW 256
15756: PUSH
15757: LD_VAR 0 4
15761: PUSH
15762: EMPTY
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: PPUSH
15771: CALL_OW 1
15775: ST_TO_ADDR
// end else
15776: GO 15873
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
15778: LD_ADDR_VAR 0 3
15782: PUSH
15783: LD_VAR 0 3
15787: PPUSH
15788: LD_VAR 0 3
15792: PUSH
15793: LD_INT 1
15795: PLUS
15796: PPUSH
15797: LD_VAR 0 1
15801: PPUSH
15802: CALL_OW 265
15806: PUSH
15807: LD_VAR 0 1
15811: PPUSH
15812: CALL_OW 262
15816: PUSH
15817: LD_VAR 0 1
15821: PPUSH
15822: CALL_OW 263
15826: PUSH
15827: LD_VAR 0 1
15831: PPUSH
15832: CALL_OW 264
15836: PUSH
15837: LD_VAR 0 1
15841: PPUSH
15842: CALL_OW 248
15846: PUSH
15847: LD_VAR 0 1
15851: PPUSH
15852: CALL_OW 256
15856: PUSH
15857: EMPTY
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: PPUSH
15868: CALL_OW 1
15872: ST_TO_ADDR
15873: GO 15614
15875: POP
15876: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
15877: LD_VAR 0 3
15881: PPUSH
15882: LD_STRING 04_1_Vehicles
15884: PPUSH
15885: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
15889: LD_EXP 21
15893: PPUSH
15894: LD_STRING 04_1_RuLabCaptured
15896: PPUSH
15897: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
15901: LD_EXP 19
15905: PPUSH
15906: LD_STRING 04_1_EscapeCounter
15908: PPUSH
15909: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
15913: LD_EXP 15
15917: PPUSH
15918: LD_STRING 04_1_BaseHill
15920: PPUSH
15921: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
15925: LD_OWVAR 1
15929: PPUSH
15930: LD_STRING 04_1_Time
15932: PPUSH
15933: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
15937: LD_EXP 14
15941: PPUSH
15942: LD_STRING 04_1_DeadCounter
15944: PPUSH
15945: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
15949: LD_EXP 24
15953: PUSH
15954: LD_INT 112
15956: PPUSH
15957: CALL_OW 255
15961: MUL
15962: PUSH
15963: LD_INT 2
15965: EQUAL
15966: PPUSH
15967: LD_STRING 04_1_KaganCaptured
15969: PPUSH
15970: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
15974: LD_INT 22
15976: PUSH
15977: LD_INT 2
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PUSH
15984: LD_INT 34
15986: PUSH
15987: LD_INT 26
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PPUSH
15998: CALL_OW 69
16002: PUSH
16003: LD_INT 0
16005: PLUS
16006: PPUSH
16007: LD_STRING 04_1_Flamethrower
16009: PPUSH
16010: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16014: LD_INT 1
16016: PPUSH
16017: LD_STRING __x1\04_cont2
16019: PPUSH
16020: CALL_OW 340
// end ; end_of_file
16024: PPOPN 4
16026: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16027: LD_VAR 0 1
16031: PPUSH
16032: CALL_OW 266
16036: PUSH
16037: LD_INT 0
16039: EQUAL
16040: PUSH
16041: LD_VAR 0 1
16045: PPUSH
16046: CALL_OW 255
16050: PUSH
16051: LD_INT 2
16053: EQUAL
16054: AND
16055: IFFALSE 16065
// baseConstructed := true ;
16057: LD_ADDR_EXP 3
16061: PUSH
16062: LD_INT 1
16064: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16065: LD_VAR 0 1
16069: PPUSH
16070: CALL_OW 266
16074: PUSH
16075: LD_INT 6
16077: EQUAL
16078: PUSH
16079: LD_VAR 0 1
16083: PPUSH
16084: CALL_OW 255
16088: PUSH
16089: LD_INT 2
16091: EQUAL
16092: AND
16093: IFFALSE 16103
// labConstructed := true ;
16095: LD_ADDR_EXP 4
16099: PUSH
16100: LD_INT 1
16102: ST_TO_ADDR
// end ;
16103: PPOPN 1
16105: END
// on UnitDestroyed ( un ) do begin if un = Heike then
16106: LD_VAR 0 1
16110: PUSH
16111: LD_EXP 25
16115: EQUAL
16116: IFFALSE 16125
// YouLost ( Heike ) ;
16118: LD_STRING Heike
16120: PPUSH
16121: CALL_OW 104
// if un = Omar then
16125: LD_VAR 0 1
16129: PUSH
16130: LD_EXP 33
16134: EQUAL
16135: IFFALSE 16144
// YouLost ( Omar ) ;
16137: LD_STRING Omar
16139: PPUSH
16140: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
16144: LD_VAR 0 1
16148: PUSH
16149: LD_INT 22
16151: PUSH
16152: LD_INT 2
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: PUSH
16159: LD_INT 23
16161: PUSH
16162: LD_INT 2
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PUSH
16169: LD_INT 21
16171: PUSH
16172: LD_INT 1
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: LIST
16183: PPUSH
16184: CALL_OW 69
16188: IN
16189: IFFALSE 16205
// loseCounter := loseCounter + 1 ;
16191: LD_ADDR_EXP 14
16195: PUSH
16196: LD_EXP 14
16200: PUSH
16201: LD_INT 1
16203: PLUS
16204: ST_TO_ADDR
// if un = omikron then
16205: LD_VAR 0 1
16209: PUSH
16210: LD_INT 64
16212: EQUAL
16213: IFFALSE 16223
// omicronFall := true ;
16215: LD_ADDR_EXP 13
16219: PUSH
16220: LD_INT 1
16222: ST_TO_ADDR
// if un = kirov then
16223: LD_VAR 0 1
16227: PUSH
16228: LD_INT 71
16230: EQUAL
16231: IFFALSE 16248
// begin ChangeMissionObjectives ( KirovDone ) ;
16233: LD_STRING KirovDone
16235: PPUSH
16236: CALL_OW 337
// kirovDestroyed := true ;
16240: LD_ADDR_EXP 16
16244: PUSH
16245: LD_INT 1
16247: ST_TO_ADDR
// end ; if un = beria then
16248: LD_VAR 0 1
16252: PUSH
16253: LD_INT 106
16255: EQUAL
16256: IFFALSE 16273
// begin ChangeMissionObjectives ( BeriaDone ) ;
16258: LD_STRING BeriaDone
16260: PPUSH
16261: CALL_OW 337
// beriaDestroyed := true ;
16265: LD_ADDR_EXP 17
16269: PUSH
16270: LD_INT 1
16272: ST_TO_ADDR
// end ; if un = kagan then
16273: LD_VAR 0 1
16277: PUSH
16278: LD_INT 112
16280: EQUAL
16281: IFFALSE 16291
// kaganDestroyed := true ;
16283: LD_ADDR_EXP 18
16287: PUSH
16288: LD_INT 1
16290: ST_TO_ADDR
// if un in russianPatrol then
16291: LD_VAR 0 1
16295: PUSH
16296: LD_EXP 47
16300: IN
16301: IFFALSE 16319
// russianPatrol := russianPatrol diff un ;
16303: LD_ADDR_EXP 47
16307: PUSH
16308: LD_EXP 47
16312: PUSH
16313: LD_VAR 0 1
16317: DIFF
16318: ST_TO_ADDR
// if un in russianOmicronAttackers then
16319: LD_VAR 0 1
16323: PUSH
16324: LD_EXP 48
16328: IN
16329: IFFALSE 16347
// russianOmicronAttackers := russianOmicronAttackers diff un ;
16331: LD_ADDR_EXP 48
16335: PUSH
16336: LD_EXP 48
16340: PUSH
16341: LD_VAR 0 1
16345: DIFF
16346: ST_TO_ADDR
// end ;
16347: PPOPN 1
16349: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
16350: LD_INT 0
16352: PPUSH
16353: PPUSH
16354: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
16355: LD_VAR 0 1
16359: PUSH
16360: LD_INT 2
16362: PUSH
16363: LD_INT 22
16365: PUSH
16366: LD_INT 3
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: PUSH
16373: LD_INT 22
16375: PUSH
16376: LD_INT 4
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: PUSH
16383: LD_INT 22
16385: PUSH
16386: LD_INT 6
16388: PUSH
16389: EMPTY
16390: LIST
16391: LIST
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: PUSH
16399: LD_INT 30
16401: PUSH
16402: LD_INT 32
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: PPUSH
16413: CALL_OW 69
16417: IN
16418: IFFALSE 16591
// begin sol := UnitsInside ( un ) ;
16420: LD_ADDR_VAR 0 3
16424: PUSH
16425: LD_VAR 0 1
16429: PPUSH
16430: CALL_OW 313
16434: ST_TO_ADDR
// if not sol then
16435: LD_VAR 0 3
16439: NOT
16440: IFFALSE 16444
// exit ;
16442: GO 16591
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16444: LD_ADDR_VAR 0 4
16448: PUSH
16449: LD_INT 22
16451: PUSH
16452: LD_VAR 0 1
16456: PPUSH
16457: CALL_OW 255
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PUSH
16466: LD_INT 2
16468: PUSH
16469: LD_INT 30
16471: PUSH
16472: LD_INT 4
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 30
16481: PUSH
16482: LD_INT 5
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: LIST
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: PPUSH
16498: CALL_OW 69
16502: ST_TO_ADDR
// if not nearestBarracks then
16503: LD_VAR 0 4
16507: NOT
16508: IFFALSE 16512
// exit ;
16510: GO 16591
// for i in nearestBarracks do
16512: LD_ADDR_VAR 0 2
16516: PUSH
16517: LD_VAR 0 4
16521: PUSH
16522: FOR_IN
16523: IFFALSE 16558
// if UnitsInside ( i ) = 6 then
16525: LD_VAR 0 2
16529: PPUSH
16530: CALL_OW 313
16534: PUSH
16535: LD_INT 6
16537: EQUAL
16538: IFFALSE 16556
// nearestBarracks := nearestBarracks diff i ;
16540: LD_ADDR_VAR 0 4
16544: PUSH
16545: LD_VAR 0 4
16549: PUSH
16550: LD_VAR 0 2
16554: DIFF
16555: ST_TO_ADDR
16556: GO 16522
16558: POP
16559: POP
// if not nearestBarracks then
16560: LD_VAR 0 4
16564: NOT
16565: IFFALSE 16569
// exit ;
16567: GO 16591
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
16569: LD_VAR 0 3
16573: PUSH
16574: LD_INT 1
16576: ARRAY
16577: PPUSH
16578: LD_VAR 0 4
16582: PUSH
16583: LD_INT 1
16585: ARRAY
16586: PPUSH
16587: CALL_OW 120
// end ; end ;
16591: PPOPN 4
16593: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
16594: LD_INT 0
16596: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
16597: LD_EXP 8
16601: NOT
16602: PUSH
16603: LD_EXP 5
16607: NOT
16608: OR
16609: IFFALSE 16613
// exit ;
16611: GO 16681
// for i in camAreas do
16613: LD_ADDR_VAR 0 5
16617: PUSH
16618: LD_EXP 8
16622: PUSH
16623: FOR_IN
16624: IFFALSE 16679
// if InArea ( x , y , i ) then
16626: LD_VAR 0 3
16630: PPUSH
16631: LD_VAR 0 4
16635: PPUSH
16636: LD_VAR 0 5
16640: PPUSH
16641: CALL_OW 309
16645: IFFALSE 16677
// begin SetAreaMapShow ( i , 0 ) ;
16647: LD_VAR 0 5
16651: PPUSH
16652: LD_INT 0
16654: PPUSH
16655: CALL_OW 424
// camAreas := camAreas diff i ;
16659: LD_ADDR_EXP 8
16663: PUSH
16664: LD_EXP 8
16668: PUSH
16669: LD_VAR 0 5
16673: DIFF
16674: ST_TO_ADDR
// break ;
16675: GO 16679
// end ;
16677: GO 16623
16679: POP
16680: POP
// end ;
16681: PPOPN 5
16683: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
16684: LD_VAR 0 1
16688: PUSH
16689: LD_INT 2
16691: EQUAL
16692: PUSH
16693: LD_VAR 0 2
16697: PUSH
16698: LD_INT 5
16700: PUSH
16701: LD_INT 8
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: IN
16708: AND
16709: IFFALSE 16718
// YouLost ( Ally ) ;
16711: LD_STRING Ally
16713: PPUSH
16714: CALL_OW 104
// end ;
16718: PPOPN 2
16720: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
16721: LD_VAR 0 1
16725: PUSH
16726: LD_EXP 30
16730: EQUAL
16731: PUSH
16732: LD_VAR 0 2
16736: PUSH
16737: LD_INT 3
16739: PUSH
16740: LD_INT 6
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: IN
16747: AND
16748: IFFALSE 16779
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
16750: LD_ADDR_EXP 23
16754: PUSH
16755: LD_VAR 0 1
16759: PPUSH
16760: CALL_OW 250
16764: PUSH
16765: LD_VAR 0 1
16769: PPUSH
16770: CALL_OW 251
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: ST_TO_ADDR
// end ; end_of_file
16779: PPOPN 3
16781: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 ] [ Difficulty ] do
16782: LD_EXP 11
16786: NOT
16787: PUSH
16788: LD_INT 12
16790: PPUSH
16791: LD_INT 1
16793: PPUSH
16794: CALL_OW 287
16798: PUSH
16799: LD_INT 20
16801: PUSH
16802: LD_INT 16
16804: PUSH
16805: LD_INT 12
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: LIST
16812: PUSH
16813: LD_OWVAR 67
16817: ARRAY
16818: LESS
16819: AND
16820: IFFALSE 16847
16822: GO 16824
16824: DISABLE
// begin enable ;
16825: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
16826: LD_INT 1
16828: PPUSH
16829: LD_INT 5
16831: PPUSH
16832: CALL_OW 12
16836: PPUSH
16837: LD_INT 12
16839: PPUSH
16840: LD_INT 1
16842: PPUSH
16843: CALL_OW 55
// end ; end_of_file
16847: END
// every 0 0$1 trigger omarCountdown do
16848: LD_EXP 22
16852: IFFALSE 16904
16854: GO 16856
16856: DISABLE
// begin enable ;
16857: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
16858: LD_ADDR_OWVAR 47
16862: PUSH
16863: LD_STRING #X104-1
16865: PUSH
16866: LD_EXP 22
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
16875: LD_ADDR_EXP 22
16879: PUSH
16880: LD_EXP 22
16884: PUSH
16885: LD_INT 35
16887: MINUS
16888: ST_TO_ADDR
// if not omarCountdown then
16889: LD_EXP 22
16893: NOT
16894: IFFALSE 16904
// display_strings :=  ;
16896: LD_ADDR_OWVAR 47
16900: PUSH
16901: LD_STRING 
16903: ST_TO_ADDR
// end ; end_of_file
16904: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16905: LD_INT 0
16907: PPUSH
// if p2 = 100 then
16908: LD_VAR 0 2
16912: PUSH
16913: LD_INT 100
16915: EQUAL
16916: IFFALSE 17865
// begin if not StreamModeActive then
16918: LD_EXP 52
16922: NOT
16923: IFFALSE 16933
// StreamModeActive := true ;
16925: LD_ADDR_EXP 52
16929: PUSH
16930: LD_INT 1
16932: ST_TO_ADDR
// if p3 = 0 then
16933: LD_VAR 0 3
16937: PUSH
16938: LD_INT 0
16940: EQUAL
16941: IFFALSE 16947
// InitStreamMode ;
16943: CALL 18025 0 0
// if p3 = 1 then
16947: LD_VAR 0 3
16951: PUSH
16952: LD_INT 1
16954: EQUAL
16955: IFFALSE 16965
// sRocket := true ;
16957: LD_ADDR_EXP 57
16961: PUSH
16962: LD_INT 1
16964: ST_TO_ADDR
// if p3 = 2 then
16965: LD_VAR 0 3
16969: PUSH
16970: LD_INT 2
16972: EQUAL
16973: IFFALSE 16983
// sSpeed := true ;
16975: LD_ADDR_EXP 56
16979: PUSH
16980: LD_INT 1
16982: ST_TO_ADDR
// if p3 = 3 then
16983: LD_VAR 0 3
16987: PUSH
16988: LD_INT 3
16990: EQUAL
16991: IFFALSE 17001
// sEngine := true ;
16993: LD_ADDR_EXP 58
16997: PUSH
16998: LD_INT 1
17000: ST_TO_ADDR
// if p3 = 4 then
17001: LD_VAR 0 3
17005: PUSH
17006: LD_INT 4
17008: EQUAL
17009: IFFALSE 17019
// sSpec := true ;
17011: LD_ADDR_EXP 55
17015: PUSH
17016: LD_INT 1
17018: ST_TO_ADDR
// if p3 = 5 then
17019: LD_VAR 0 3
17023: PUSH
17024: LD_INT 5
17026: EQUAL
17027: IFFALSE 17037
// sLevel := true ;
17029: LD_ADDR_EXP 59
17033: PUSH
17034: LD_INT 1
17036: ST_TO_ADDR
// if p3 = 6 then
17037: LD_VAR 0 3
17041: PUSH
17042: LD_INT 6
17044: EQUAL
17045: IFFALSE 17055
// sArmoury := true ;
17047: LD_ADDR_EXP 60
17051: PUSH
17052: LD_INT 1
17054: ST_TO_ADDR
// if p3 = 7 then
17055: LD_VAR 0 3
17059: PUSH
17060: LD_INT 7
17062: EQUAL
17063: IFFALSE 17073
// sRadar := true ;
17065: LD_ADDR_EXP 61
17069: PUSH
17070: LD_INT 1
17072: ST_TO_ADDR
// if p3 = 8 then
17073: LD_VAR 0 3
17077: PUSH
17078: LD_INT 8
17080: EQUAL
17081: IFFALSE 17091
// sBunker := true ;
17083: LD_ADDR_EXP 62
17087: PUSH
17088: LD_INT 1
17090: ST_TO_ADDR
// if p3 = 9 then
17091: LD_VAR 0 3
17095: PUSH
17096: LD_INT 9
17098: EQUAL
17099: IFFALSE 17109
// sHack := true ;
17101: LD_ADDR_EXP 63
17105: PUSH
17106: LD_INT 1
17108: ST_TO_ADDR
// if p3 = 10 then
17109: LD_VAR 0 3
17113: PUSH
17114: LD_INT 10
17116: EQUAL
17117: IFFALSE 17127
// sFire := true ;
17119: LD_ADDR_EXP 64
17123: PUSH
17124: LD_INT 1
17126: ST_TO_ADDR
// if p3 = 11 then
17127: LD_VAR 0 3
17131: PUSH
17132: LD_INT 11
17134: EQUAL
17135: IFFALSE 17145
// sRefresh := true ;
17137: LD_ADDR_EXP 65
17141: PUSH
17142: LD_INT 1
17144: ST_TO_ADDR
// if p3 = 12 then
17145: LD_VAR 0 3
17149: PUSH
17150: LD_INT 12
17152: EQUAL
17153: IFFALSE 17163
// sExp := true ;
17155: LD_ADDR_EXP 66
17159: PUSH
17160: LD_INT 1
17162: ST_TO_ADDR
// if p3 = 13 then
17163: LD_VAR 0 3
17167: PUSH
17168: LD_INT 13
17170: EQUAL
17171: IFFALSE 17181
// sDepot := true ;
17173: LD_ADDR_EXP 67
17177: PUSH
17178: LD_INT 1
17180: ST_TO_ADDR
// if p3 = 14 then
17181: LD_VAR 0 3
17185: PUSH
17186: LD_INT 14
17188: EQUAL
17189: IFFALSE 17199
// sFlag := true ;
17191: LD_ADDR_EXP 68
17195: PUSH
17196: LD_INT 1
17198: ST_TO_ADDR
// if p3 = 15 then
17199: LD_VAR 0 3
17203: PUSH
17204: LD_INT 15
17206: EQUAL
17207: IFFALSE 17217
// sKamikadze := true ;
17209: LD_ADDR_EXP 76
17213: PUSH
17214: LD_INT 1
17216: ST_TO_ADDR
// if p3 = 16 then
17217: LD_VAR 0 3
17221: PUSH
17222: LD_INT 16
17224: EQUAL
17225: IFFALSE 17235
// sTroll := true ;
17227: LD_ADDR_EXP 77
17231: PUSH
17232: LD_INT 1
17234: ST_TO_ADDR
// if p3 = 17 then
17235: LD_VAR 0 3
17239: PUSH
17240: LD_INT 17
17242: EQUAL
17243: IFFALSE 17253
// sSlow := true ;
17245: LD_ADDR_EXP 78
17249: PUSH
17250: LD_INT 1
17252: ST_TO_ADDR
// if p3 = 18 then
17253: LD_VAR 0 3
17257: PUSH
17258: LD_INT 18
17260: EQUAL
17261: IFFALSE 17271
// sLack := true ;
17263: LD_ADDR_EXP 79
17267: PUSH
17268: LD_INT 1
17270: ST_TO_ADDR
// if p3 = 19 then
17271: LD_VAR 0 3
17275: PUSH
17276: LD_INT 19
17278: EQUAL
17279: IFFALSE 17289
// sTank := true ;
17281: LD_ADDR_EXP 81
17285: PUSH
17286: LD_INT 1
17288: ST_TO_ADDR
// if p3 = 20 then
17289: LD_VAR 0 3
17293: PUSH
17294: LD_INT 20
17296: EQUAL
17297: IFFALSE 17307
// sRemote := true ;
17299: LD_ADDR_EXP 82
17303: PUSH
17304: LD_INT 1
17306: ST_TO_ADDR
// if p3 = 21 then
17307: LD_VAR 0 3
17311: PUSH
17312: LD_INT 21
17314: EQUAL
17315: IFFALSE 17325
// sPowell := true ;
17317: LD_ADDR_EXP 83
17321: PUSH
17322: LD_INT 1
17324: ST_TO_ADDR
// if p3 = 22 then
17325: LD_VAR 0 3
17329: PUSH
17330: LD_INT 22
17332: EQUAL
17333: IFFALSE 17343
// sTeleport := true ;
17335: LD_ADDR_EXP 86
17339: PUSH
17340: LD_INT 1
17342: ST_TO_ADDR
// if p3 = 23 then
17343: LD_VAR 0 3
17347: PUSH
17348: LD_INT 23
17350: EQUAL
17351: IFFALSE 17361
// sOilTower := true ;
17353: LD_ADDR_EXP 88
17357: PUSH
17358: LD_INT 1
17360: ST_TO_ADDR
// if p3 = 24 then
17361: LD_VAR 0 3
17365: PUSH
17366: LD_INT 24
17368: EQUAL
17369: IFFALSE 17379
// sShovel := true ;
17371: LD_ADDR_EXP 89
17375: PUSH
17376: LD_INT 1
17378: ST_TO_ADDR
// if p3 = 25 then
17379: LD_VAR 0 3
17383: PUSH
17384: LD_INT 25
17386: EQUAL
17387: IFFALSE 17397
// sSheik := true ;
17389: LD_ADDR_EXP 90
17393: PUSH
17394: LD_INT 1
17396: ST_TO_ADDR
// if p3 = 26 then
17397: LD_VAR 0 3
17401: PUSH
17402: LD_INT 26
17404: EQUAL
17405: IFFALSE 17415
// sEarthquake := true ;
17407: LD_ADDR_EXP 92
17411: PUSH
17412: LD_INT 1
17414: ST_TO_ADDR
// if p3 = 27 then
17415: LD_VAR 0 3
17419: PUSH
17420: LD_INT 27
17422: EQUAL
17423: IFFALSE 17433
// sAI := true ;
17425: LD_ADDR_EXP 93
17429: PUSH
17430: LD_INT 1
17432: ST_TO_ADDR
// if p3 = 28 then
17433: LD_VAR 0 3
17437: PUSH
17438: LD_INT 28
17440: EQUAL
17441: IFFALSE 17451
// sCargo := true ;
17443: LD_ADDR_EXP 96
17447: PUSH
17448: LD_INT 1
17450: ST_TO_ADDR
// if p3 = 29 then
17451: LD_VAR 0 3
17455: PUSH
17456: LD_INT 29
17458: EQUAL
17459: IFFALSE 17469
// sDLaser := true ;
17461: LD_ADDR_EXP 97
17465: PUSH
17466: LD_INT 1
17468: ST_TO_ADDR
// if p3 = 30 then
17469: LD_VAR 0 3
17473: PUSH
17474: LD_INT 30
17476: EQUAL
17477: IFFALSE 17487
// sExchange := true ;
17479: LD_ADDR_EXP 98
17483: PUSH
17484: LD_INT 1
17486: ST_TO_ADDR
// if p3 = 31 then
17487: LD_VAR 0 3
17491: PUSH
17492: LD_INT 31
17494: EQUAL
17495: IFFALSE 17505
// sFac := true ;
17497: LD_ADDR_EXP 99
17501: PUSH
17502: LD_INT 1
17504: ST_TO_ADDR
// if p3 = 32 then
17505: LD_VAR 0 3
17509: PUSH
17510: LD_INT 32
17512: EQUAL
17513: IFFALSE 17523
// sPower := true ;
17515: LD_ADDR_EXP 100
17519: PUSH
17520: LD_INT 1
17522: ST_TO_ADDR
// if p3 = 33 then
17523: LD_VAR 0 3
17527: PUSH
17528: LD_INT 33
17530: EQUAL
17531: IFFALSE 17541
// sRandom := true ;
17533: LD_ADDR_EXP 101
17537: PUSH
17538: LD_INT 1
17540: ST_TO_ADDR
// if p3 = 34 then
17541: LD_VAR 0 3
17545: PUSH
17546: LD_INT 34
17548: EQUAL
17549: IFFALSE 17559
// sShield := true ;
17551: LD_ADDR_EXP 102
17555: PUSH
17556: LD_INT 1
17558: ST_TO_ADDR
// if p3 = 35 then
17559: LD_VAR 0 3
17563: PUSH
17564: LD_INT 35
17566: EQUAL
17567: IFFALSE 17577
// sTime := true ;
17569: LD_ADDR_EXP 103
17573: PUSH
17574: LD_INT 1
17576: ST_TO_ADDR
// if p3 = 36 then
17577: LD_VAR 0 3
17581: PUSH
17582: LD_INT 36
17584: EQUAL
17585: IFFALSE 17595
// sTools := true ;
17587: LD_ADDR_EXP 104
17591: PUSH
17592: LD_INT 1
17594: ST_TO_ADDR
// if p3 = 101 then
17595: LD_VAR 0 3
17599: PUSH
17600: LD_INT 101
17602: EQUAL
17603: IFFALSE 17613
// sSold := true ;
17605: LD_ADDR_EXP 69
17609: PUSH
17610: LD_INT 1
17612: ST_TO_ADDR
// if p3 = 102 then
17613: LD_VAR 0 3
17617: PUSH
17618: LD_INT 102
17620: EQUAL
17621: IFFALSE 17631
// sDiff := true ;
17623: LD_ADDR_EXP 70
17627: PUSH
17628: LD_INT 1
17630: ST_TO_ADDR
// if p3 = 103 then
17631: LD_VAR 0 3
17635: PUSH
17636: LD_INT 103
17638: EQUAL
17639: IFFALSE 17649
// sFog := true ;
17641: LD_ADDR_EXP 73
17645: PUSH
17646: LD_INT 1
17648: ST_TO_ADDR
// if p3 = 104 then
17649: LD_VAR 0 3
17653: PUSH
17654: LD_INT 104
17656: EQUAL
17657: IFFALSE 17667
// sReset := true ;
17659: LD_ADDR_EXP 74
17663: PUSH
17664: LD_INT 1
17666: ST_TO_ADDR
// if p3 = 105 then
17667: LD_VAR 0 3
17671: PUSH
17672: LD_INT 105
17674: EQUAL
17675: IFFALSE 17685
// sSun := true ;
17677: LD_ADDR_EXP 75
17681: PUSH
17682: LD_INT 1
17684: ST_TO_ADDR
// if p3 = 106 then
17685: LD_VAR 0 3
17689: PUSH
17690: LD_INT 106
17692: EQUAL
17693: IFFALSE 17703
// sTiger := true ;
17695: LD_ADDR_EXP 71
17699: PUSH
17700: LD_INT 1
17702: ST_TO_ADDR
// if p3 = 107 then
17703: LD_VAR 0 3
17707: PUSH
17708: LD_INT 107
17710: EQUAL
17711: IFFALSE 17721
// sBomb := true ;
17713: LD_ADDR_EXP 72
17717: PUSH
17718: LD_INT 1
17720: ST_TO_ADDR
// if p3 = 108 then
17721: LD_VAR 0 3
17725: PUSH
17726: LD_INT 108
17728: EQUAL
17729: IFFALSE 17739
// sWound := true ;
17731: LD_ADDR_EXP 80
17735: PUSH
17736: LD_INT 1
17738: ST_TO_ADDR
// if p3 = 109 then
17739: LD_VAR 0 3
17743: PUSH
17744: LD_INT 109
17746: EQUAL
17747: IFFALSE 17757
// sBetray := true ;
17749: LD_ADDR_EXP 84
17753: PUSH
17754: LD_INT 1
17756: ST_TO_ADDR
// if p3 = 110 then
17757: LD_VAR 0 3
17761: PUSH
17762: LD_INT 110
17764: EQUAL
17765: IFFALSE 17775
// sContamin := true ;
17767: LD_ADDR_EXP 85
17771: PUSH
17772: LD_INT 1
17774: ST_TO_ADDR
// if p3 = 111 then
17775: LD_VAR 0 3
17779: PUSH
17780: LD_INT 111
17782: EQUAL
17783: IFFALSE 17793
// sOil := true ;
17785: LD_ADDR_EXP 87
17789: PUSH
17790: LD_INT 1
17792: ST_TO_ADDR
// if p3 = 112 then
17793: LD_VAR 0 3
17797: PUSH
17798: LD_INT 112
17800: EQUAL
17801: IFFALSE 17811
// sStu := true ;
17803: LD_ADDR_EXP 91
17807: PUSH
17808: LD_INT 1
17810: ST_TO_ADDR
// if p3 = 113 then
17811: LD_VAR 0 3
17815: PUSH
17816: LD_INT 113
17818: EQUAL
17819: IFFALSE 17829
// sBazooka := true ;
17821: LD_ADDR_EXP 94
17825: PUSH
17826: LD_INT 1
17828: ST_TO_ADDR
// if p3 = 114 then
17829: LD_VAR 0 3
17833: PUSH
17834: LD_INT 114
17836: EQUAL
17837: IFFALSE 17847
// sMortar := true ;
17839: LD_ADDR_EXP 95
17843: PUSH
17844: LD_INT 1
17846: ST_TO_ADDR
// if p3 = 115 then
17847: LD_VAR 0 3
17851: PUSH
17852: LD_INT 115
17854: EQUAL
17855: IFFALSE 17865
// sRanger := true ;
17857: LD_ADDR_EXP 105
17861: PUSH
17862: LD_INT 1
17864: ST_TO_ADDR
// end ; if p2 = 101 then
17865: LD_VAR 0 2
17869: PUSH
17870: LD_INT 101
17872: EQUAL
17873: IFFALSE 18001
// begin case p3 of 1 :
17875: LD_VAR 0 3
17879: PUSH
17880: LD_INT 1
17882: DOUBLE
17883: EQUAL
17884: IFTRUE 17888
17886: GO 17895
17888: POP
// hHackUnlimitedResources ; 2 :
17889: CALL 29038 0 0
17893: GO 18001
17895: LD_INT 2
17897: DOUBLE
17898: EQUAL
17899: IFTRUE 17903
17901: GO 17910
17903: POP
// hHackSetLevel10 ; 3 :
17904: CALL 29171 0 0
17908: GO 18001
17910: LD_INT 3
17912: DOUBLE
17913: EQUAL
17914: IFTRUE 17918
17916: GO 17925
17918: POP
// hHackSetLevel10YourUnits ; 4 :
17919: CALL 29256 0 0
17923: GO 18001
17925: LD_INT 4
17927: DOUBLE
17928: EQUAL
17929: IFTRUE 17933
17931: GO 17940
17933: POP
// hHackInvincible ; 5 :
17934: CALL 29704 0 0
17938: GO 18001
17940: LD_INT 5
17942: DOUBLE
17943: EQUAL
17944: IFTRUE 17948
17946: GO 17955
17948: POP
// hHackInvisible ; 6 :
17949: CALL 29815 0 0
17953: GO 18001
17955: LD_INT 6
17957: DOUBLE
17958: EQUAL
17959: IFTRUE 17963
17961: GO 17970
17963: POP
// hHackChangeYourSide ; 7 :
17964: CALL 29872 0 0
17968: GO 18001
17970: LD_INT 7
17972: DOUBLE
17973: EQUAL
17974: IFTRUE 17978
17976: GO 17985
17978: POP
// hHackChangeUnitSide ; 8 :
17979: CALL 29914 0 0
17983: GO 18001
17985: LD_INT 8
17987: DOUBLE
17988: EQUAL
17989: IFTRUE 17993
17991: GO 18000
17993: POP
// hHackFog ; end ;
17994: CALL 30015 0 0
17998: GO 18001
18000: POP
// end ; end ;
18001: LD_VAR 0 7
18005: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
18006: GO 18008
18008: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
18009: LD_STRING initStreamRollete();
18011: PPUSH
18012: CALL_OW 559
// InitStreamMode ;
18016: CALL 18025 0 0
// DefineStreamItems ( ) ;
18020: CALL 18465 0 0
// end ;
18024: END
// function InitStreamMode ; begin
18025: LD_INT 0
18027: PPUSH
// streamModeActive := false ;
18028: LD_ADDR_EXP 52
18032: PUSH
18033: LD_INT 0
18035: ST_TO_ADDR
// normalCounter := 36 ;
18036: LD_ADDR_EXP 53
18040: PUSH
18041: LD_INT 36
18043: ST_TO_ADDR
// hardcoreCounter := 16 ;
18044: LD_ADDR_EXP 54
18048: PUSH
18049: LD_INT 16
18051: ST_TO_ADDR
// sRocket := false ;
18052: LD_ADDR_EXP 57
18056: PUSH
18057: LD_INT 0
18059: ST_TO_ADDR
// sSpeed := false ;
18060: LD_ADDR_EXP 56
18064: PUSH
18065: LD_INT 0
18067: ST_TO_ADDR
// sEngine := false ;
18068: LD_ADDR_EXP 58
18072: PUSH
18073: LD_INT 0
18075: ST_TO_ADDR
// sSpec := false ;
18076: LD_ADDR_EXP 55
18080: PUSH
18081: LD_INT 0
18083: ST_TO_ADDR
// sLevel := false ;
18084: LD_ADDR_EXP 59
18088: PUSH
18089: LD_INT 0
18091: ST_TO_ADDR
// sArmoury := false ;
18092: LD_ADDR_EXP 60
18096: PUSH
18097: LD_INT 0
18099: ST_TO_ADDR
// sRadar := false ;
18100: LD_ADDR_EXP 61
18104: PUSH
18105: LD_INT 0
18107: ST_TO_ADDR
// sBunker := false ;
18108: LD_ADDR_EXP 62
18112: PUSH
18113: LD_INT 0
18115: ST_TO_ADDR
// sHack := false ;
18116: LD_ADDR_EXP 63
18120: PUSH
18121: LD_INT 0
18123: ST_TO_ADDR
// sFire := false ;
18124: LD_ADDR_EXP 64
18128: PUSH
18129: LD_INT 0
18131: ST_TO_ADDR
// sRefresh := false ;
18132: LD_ADDR_EXP 65
18136: PUSH
18137: LD_INT 0
18139: ST_TO_ADDR
// sExp := false ;
18140: LD_ADDR_EXP 66
18144: PUSH
18145: LD_INT 0
18147: ST_TO_ADDR
// sDepot := false ;
18148: LD_ADDR_EXP 67
18152: PUSH
18153: LD_INT 0
18155: ST_TO_ADDR
// sFlag := false ;
18156: LD_ADDR_EXP 68
18160: PUSH
18161: LD_INT 0
18163: ST_TO_ADDR
// sKamikadze := false ;
18164: LD_ADDR_EXP 76
18168: PUSH
18169: LD_INT 0
18171: ST_TO_ADDR
// sTroll := false ;
18172: LD_ADDR_EXP 77
18176: PUSH
18177: LD_INT 0
18179: ST_TO_ADDR
// sSlow := false ;
18180: LD_ADDR_EXP 78
18184: PUSH
18185: LD_INT 0
18187: ST_TO_ADDR
// sLack := false ;
18188: LD_ADDR_EXP 79
18192: PUSH
18193: LD_INT 0
18195: ST_TO_ADDR
// sTank := false ;
18196: LD_ADDR_EXP 81
18200: PUSH
18201: LD_INT 0
18203: ST_TO_ADDR
// sRemote := false ;
18204: LD_ADDR_EXP 82
18208: PUSH
18209: LD_INT 0
18211: ST_TO_ADDR
// sPowell := false ;
18212: LD_ADDR_EXP 83
18216: PUSH
18217: LD_INT 0
18219: ST_TO_ADDR
// sTeleport := false ;
18220: LD_ADDR_EXP 86
18224: PUSH
18225: LD_INT 0
18227: ST_TO_ADDR
// sOilTower := false ;
18228: LD_ADDR_EXP 88
18232: PUSH
18233: LD_INT 0
18235: ST_TO_ADDR
// sShovel := false ;
18236: LD_ADDR_EXP 89
18240: PUSH
18241: LD_INT 0
18243: ST_TO_ADDR
// sSheik := false ;
18244: LD_ADDR_EXP 90
18248: PUSH
18249: LD_INT 0
18251: ST_TO_ADDR
// sEarthquake := false ;
18252: LD_ADDR_EXP 92
18256: PUSH
18257: LD_INT 0
18259: ST_TO_ADDR
// sAI := false ;
18260: LD_ADDR_EXP 93
18264: PUSH
18265: LD_INT 0
18267: ST_TO_ADDR
// sCargo := false ;
18268: LD_ADDR_EXP 96
18272: PUSH
18273: LD_INT 0
18275: ST_TO_ADDR
// sDLaser := false ;
18276: LD_ADDR_EXP 97
18280: PUSH
18281: LD_INT 0
18283: ST_TO_ADDR
// sExchange := false ;
18284: LD_ADDR_EXP 98
18288: PUSH
18289: LD_INT 0
18291: ST_TO_ADDR
// sFac := false ;
18292: LD_ADDR_EXP 99
18296: PUSH
18297: LD_INT 0
18299: ST_TO_ADDR
// sPower := false ;
18300: LD_ADDR_EXP 100
18304: PUSH
18305: LD_INT 0
18307: ST_TO_ADDR
// sRandom := false ;
18308: LD_ADDR_EXP 101
18312: PUSH
18313: LD_INT 0
18315: ST_TO_ADDR
// sShield := false ;
18316: LD_ADDR_EXP 102
18320: PUSH
18321: LD_INT 0
18323: ST_TO_ADDR
// sTime := false ;
18324: LD_ADDR_EXP 103
18328: PUSH
18329: LD_INT 0
18331: ST_TO_ADDR
// sTools := false ;
18332: LD_ADDR_EXP 104
18336: PUSH
18337: LD_INT 0
18339: ST_TO_ADDR
// sSold := false ;
18340: LD_ADDR_EXP 69
18344: PUSH
18345: LD_INT 0
18347: ST_TO_ADDR
// sDiff := false ;
18348: LD_ADDR_EXP 70
18352: PUSH
18353: LD_INT 0
18355: ST_TO_ADDR
// sFog := false ;
18356: LD_ADDR_EXP 73
18360: PUSH
18361: LD_INT 0
18363: ST_TO_ADDR
// sReset := false ;
18364: LD_ADDR_EXP 74
18368: PUSH
18369: LD_INT 0
18371: ST_TO_ADDR
// sSun := false ;
18372: LD_ADDR_EXP 75
18376: PUSH
18377: LD_INT 0
18379: ST_TO_ADDR
// sTiger := false ;
18380: LD_ADDR_EXP 71
18384: PUSH
18385: LD_INT 0
18387: ST_TO_ADDR
// sBomb := false ;
18388: LD_ADDR_EXP 72
18392: PUSH
18393: LD_INT 0
18395: ST_TO_ADDR
// sWound := false ;
18396: LD_ADDR_EXP 80
18400: PUSH
18401: LD_INT 0
18403: ST_TO_ADDR
// sBetray := false ;
18404: LD_ADDR_EXP 84
18408: PUSH
18409: LD_INT 0
18411: ST_TO_ADDR
// sContamin := false ;
18412: LD_ADDR_EXP 85
18416: PUSH
18417: LD_INT 0
18419: ST_TO_ADDR
// sOil := false ;
18420: LD_ADDR_EXP 87
18424: PUSH
18425: LD_INT 0
18427: ST_TO_ADDR
// sStu := false ;
18428: LD_ADDR_EXP 91
18432: PUSH
18433: LD_INT 0
18435: ST_TO_ADDR
// sBazooka := false ;
18436: LD_ADDR_EXP 94
18440: PUSH
18441: LD_INT 0
18443: ST_TO_ADDR
// sMortar := false ;
18444: LD_ADDR_EXP 95
18448: PUSH
18449: LD_INT 0
18451: ST_TO_ADDR
// sRanger := false ;
18452: LD_ADDR_EXP 105
18456: PUSH
18457: LD_INT 0
18459: ST_TO_ADDR
// end ;
18460: LD_VAR 0 1
18464: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
18465: LD_INT 0
18467: PPUSH
18468: PPUSH
18469: PPUSH
18470: PPUSH
18471: PPUSH
// result := [ ] ;
18472: LD_ADDR_VAR 0 1
18476: PUSH
18477: EMPTY
18478: ST_TO_ADDR
// if campaign_id = 1 then
18479: LD_OWVAR 69
18483: PUSH
18484: LD_INT 1
18486: EQUAL
18487: IFFALSE 21425
// begin case mission_number of 1 :
18489: LD_OWVAR 70
18493: PUSH
18494: LD_INT 1
18496: DOUBLE
18497: EQUAL
18498: IFTRUE 18502
18500: GO 18566
18502: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
18503: LD_ADDR_VAR 0 1
18507: PUSH
18508: LD_INT 2
18510: PUSH
18511: LD_INT 4
18513: PUSH
18514: LD_INT 11
18516: PUSH
18517: LD_INT 12
18519: PUSH
18520: LD_INT 15
18522: PUSH
18523: LD_INT 16
18525: PUSH
18526: LD_INT 22
18528: PUSH
18529: LD_INT 23
18531: PUSH
18532: LD_INT 26
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 101
18548: PUSH
18549: LD_INT 102
18551: PUSH
18552: LD_INT 106
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: LIST
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: ST_TO_ADDR
18564: GO 21423
18566: LD_INT 2
18568: DOUBLE
18569: EQUAL
18570: IFTRUE 18574
18572: GO 18646
18574: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
18575: LD_ADDR_VAR 0 1
18579: PUSH
18580: LD_INT 2
18582: PUSH
18583: LD_INT 4
18585: PUSH
18586: LD_INT 11
18588: PUSH
18589: LD_INT 12
18591: PUSH
18592: LD_INT 15
18594: PUSH
18595: LD_INT 16
18597: PUSH
18598: LD_INT 22
18600: PUSH
18601: LD_INT 23
18603: PUSH
18604: LD_INT 26
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: PUSH
18618: LD_INT 101
18620: PUSH
18621: LD_INT 102
18623: PUSH
18624: LD_INT 105
18626: PUSH
18627: LD_INT 106
18629: PUSH
18630: LD_INT 108
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: ST_TO_ADDR
18644: GO 21423
18646: LD_INT 3
18648: DOUBLE
18649: EQUAL
18650: IFTRUE 18654
18652: GO 18730
18654: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
18655: LD_ADDR_VAR 0 1
18659: PUSH
18660: LD_INT 2
18662: PUSH
18663: LD_INT 4
18665: PUSH
18666: LD_INT 5
18668: PUSH
18669: LD_INT 11
18671: PUSH
18672: LD_INT 12
18674: PUSH
18675: LD_INT 15
18677: PUSH
18678: LD_INT 16
18680: PUSH
18681: LD_INT 22
18683: PUSH
18684: LD_INT 26
18686: PUSH
18687: LD_INT 36
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: PUSH
18702: LD_INT 101
18704: PUSH
18705: LD_INT 102
18707: PUSH
18708: LD_INT 105
18710: PUSH
18711: LD_INT 106
18713: PUSH
18714: LD_INT 108
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: ST_TO_ADDR
18728: GO 21423
18730: LD_INT 4
18732: DOUBLE
18733: EQUAL
18734: IFTRUE 18738
18736: GO 18822
18738: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
18739: LD_ADDR_VAR 0 1
18743: PUSH
18744: LD_INT 2
18746: PUSH
18747: LD_INT 4
18749: PUSH
18750: LD_INT 5
18752: PUSH
18753: LD_INT 8
18755: PUSH
18756: LD_INT 11
18758: PUSH
18759: LD_INT 12
18761: PUSH
18762: LD_INT 15
18764: PUSH
18765: LD_INT 16
18767: PUSH
18768: LD_INT 22
18770: PUSH
18771: LD_INT 23
18773: PUSH
18774: LD_INT 26
18776: PUSH
18777: LD_INT 36
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: PUSH
18794: LD_INT 101
18796: PUSH
18797: LD_INT 102
18799: PUSH
18800: LD_INT 105
18802: PUSH
18803: LD_INT 106
18805: PUSH
18806: LD_INT 108
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: ST_TO_ADDR
18820: GO 21423
18822: LD_INT 5
18824: DOUBLE
18825: EQUAL
18826: IFTRUE 18830
18828: GO 18930
18830: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
18831: LD_ADDR_VAR 0 1
18835: PUSH
18836: LD_INT 2
18838: PUSH
18839: LD_INT 4
18841: PUSH
18842: LD_INT 5
18844: PUSH
18845: LD_INT 6
18847: PUSH
18848: LD_INT 8
18850: PUSH
18851: LD_INT 11
18853: PUSH
18854: LD_INT 12
18856: PUSH
18857: LD_INT 15
18859: PUSH
18860: LD_INT 16
18862: PUSH
18863: LD_INT 22
18865: PUSH
18866: LD_INT 23
18868: PUSH
18869: LD_INT 25
18871: PUSH
18872: LD_INT 26
18874: PUSH
18875: LD_INT 36
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 101
18896: PUSH
18897: LD_INT 102
18899: PUSH
18900: LD_INT 105
18902: PUSH
18903: LD_INT 106
18905: PUSH
18906: LD_INT 108
18908: PUSH
18909: LD_INT 109
18911: PUSH
18912: LD_INT 112
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: ST_TO_ADDR
18928: GO 21423
18930: LD_INT 6
18932: DOUBLE
18933: EQUAL
18934: IFTRUE 18938
18936: GO 19058
18938: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
18939: LD_ADDR_VAR 0 1
18943: PUSH
18944: LD_INT 2
18946: PUSH
18947: LD_INT 4
18949: PUSH
18950: LD_INT 5
18952: PUSH
18953: LD_INT 6
18955: PUSH
18956: LD_INT 8
18958: PUSH
18959: LD_INT 11
18961: PUSH
18962: LD_INT 12
18964: PUSH
18965: LD_INT 15
18967: PUSH
18968: LD_INT 16
18970: PUSH
18971: LD_INT 20
18973: PUSH
18974: LD_INT 21
18976: PUSH
18977: LD_INT 22
18979: PUSH
18980: LD_INT 23
18982: PUSH
18983: LD_INT 25
18985: PUSH
18986: LD_INT 26
18988: PUSH
18989: LD_INT 30
18991: PUSH
18992: LD_INT 31
18994: PUSH
18995: LD_INT 32
18997: PUSH
18998: LD_INT 36
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: PUSH
19022: LD_INT 101
19024: PUSH
19025: LD_INT 102
19027: PUSH
19028: LD_INT 105
19030: PUSH
19031: LD_INT 106
19033: PUSH
19034: LD_INT 108
19036: PUSH
19037: LD_INT 109
19039: PUSH
19040: LD_INT 112
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: ST_TO_ADDR
19056: GO 21423
19058: LD_INT 7
19060: DOUBLE
19061: EQUAL
19062: IFTRUE 19066
19064: GO 19166
19066: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
19067: LD_ADDR_VAR 0 1
19071: PUSH
19072: LD_INT 2
19074: PUSH
19075: LD_INT 4
19077: PUSH
19078: LD_INT 5
19080: PUSH
19081: LD_INT 7
19083: PUSH
19084: LD_INT 11
19086: PUSH
19087: LD_INT 12
19089: PUSH
19090: LD_INT 15
19092: PUSH
19093: LD_INT 16
19095: PUSH
19096: LD_INT 20
19098: PUSH
19099: LD_INT 21
19101: PUSH
19102: LD_INT 22
19104: PUSH
19105: LD_INT 23
19107: PUSH
19108: LD_INT 25
19110: PUSH
19111: LD_INT 26
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: PUSH
19130: LD_INT 101
19132: PUSH
19133: LD_INT 102
19135: PUSH
19136: LD_INT 103
19138: PUSH
19139: LD_INT 105
19141: PUSH
19142: LD_INT 106
19144: PUSH
19145: LD_INT 108
19147: PUSH
19148: LD_INT 112
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: ST_TO_ADDR
19164: GO 21423
19166: LD_INT 8
19168: DOUBLE
19169: EQUAL
19170: IFTRUE 19174
19172: GO 19302
19174: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
19175: LD_ADDR_VAR 0 1
19179: PUSH
19180: LD_INT 2
19182: PUSH
19183: LD_INT 4
19185: PUSH
19186: LD_INT 5
19188: PUSH
19189: LD_INT 6
19191: PUSH
19192: LD_INT 7
19194: PUSH
19195: LD_INT 8
19197: PUSH
19198: LD_INT 11
19200: PUSH
19201: LD_INT 12
19203: PUSH
19204: LD_INT 15
19206: PUSH
19207: LD_INT 16
19209: PUSH
19210: LD_INT 20
19212: PUSH
19213: LD_INT 21
19215: PUSH
19216: LD_INT 22
19218: PUSH
19219: LD_INT 23
19221: PUSH
19222: LD_INT 25
19224: PUSH
19225: LD_INT 26
19227: PUSH
19228: LD_INT 30
19230: PUSH
19231: LD_INT 31
19233: PUSH
19234: LD_INT 32
19236: PUSH
19237: LD_INT 36
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: PUSH
19262: LD_INT 101
19264: PUSH
19265: LD_INT 102
19267: PUSH
19268: LD_INT 103
19270: PUSH
19271: LD_INT 105
19273: PUSH
19274: LD_INT 106
19276: PUSH
19277: LD_INT 108
19279: PUSH
19280: LD_INT 109
19282: PUSH
19283: LD_INT 112
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: ST_TO_ADDR
19300: GO 21423
19302: LD_INT 9
19304: DOUBLE
19305: EQUAL
19306: IFTRUE 19310
19308: GO 19446
19310: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
19311: LD_ADDR_VAR 0 1
19315: PUSH
19316: LD_INT 2
19318: PUSH
19319: LD_INT 4
19321: PUSH
19322: LD_INT 5
19324: PUSH
19325: LD_INT 6
19327: PUSH
19328: LD_INT 7
19330: PUSH
19331: LD_INT 8
19333: PUSH
19334: LD_INT 11
19336: PUSH
19337: LD_INT 12
19339: PUSH
19340: LD_INT 15
19342: PUSH
19343: LD_INT 16
19345: PUSH
19346: LD_INT 20
19348: PUSH
19349: LD_INT 21
19351: PUSH
19352: LD_INT 22
19354: PUSH
19355: LD_INT 23
19357: PUSH
19358: LD_INT 25
19360: PUSH
19361: LD_INT 26
19363: PUSH
19364: LD_INT 28
19366: PUSH
19367: LD_INT 30
19369: PUSH
19370: LD_INT 31
19372: PUSH
19373: LD_INT 32
19375: PUSH
19376: LD_INT 36
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: PUSH
19402: LD_INT 101
19404: PUSH
19405: LD_INT 102
19407: PUSH
19408: LD_INT 103
19410: PUSH
19411: LD_INT 105
19413: PUSH
19414: LD_INT 106
19416: PUSH
19417: LD_INT 108
19419: PUSH
19420: LD_INT 109
19422: PUSH
19423: LD_INT 112
19425: PUSH
19426: LD_INT 114
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: ST_TO_ADDR
19444: GO 21423
19446: LD_INT 10
19448: DOUBLE
19449: EQUAL
19450: IFTRUE 19454
19452: GO 19638
19454: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
19455: LD_ADDR_VAR 0 1
19459: PUSH
19460: LD_INT 2
19462: PUSH
19463: LD_INT 4
19465: PUSH
19466: LD_INT 5
19468: PUSH
19469: LD_INT 6
19471: PUSH
19472: LD_INT 7
19474: PUSH
19475: LD_INT 8
19477: PUSH
19478: LD_INT 9
19480: PUSH
19481: LD_INT 10
19483: PUSH
19484: LD_INT 11
19486: PUSH
19487: LD_INT 12
19489: PUSH
19490: LD_INT 13
19492: PUSH
19493: LD_INT 14
19495: PUSH
19496: LD_INT 15
19498: PUSH
19499: LD_INT 16
19501: PUSH
19502: LD_INT 17
19504: PUSH
19505: LD_INT 18
19507: PUSH
19508: LD_INT 19
19510: PUSH
19511: LD_INT 20
19513: PUSH
19514: LD_INT 21
19516: PUSH
19517: LD_INT 22
19519: PUSH
19520: LD_INT 23
19522: PUSH
19523: LD_INT 24
19525: PUSH
19526: LD_INT 25
19528: PUSH
19529: LD_INT 26
19531: PUSH
19532: LD_INT 28
19534: PUSH
19535: LD_INT 30
19537: PUSH
19538: LD_INT 31
19540: PUSH
19541: LD_INT 32
19543: PUSH
19544: LD_INT 36
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: PUSH
19578: LD_INT 101
19580: PUSH
19581: LD_INT 102
19583: PUSH
19584: LD_INT 103
19586: PUSH
19587: LD_INT 104
19589: PUSH
19590: LD_INT 105
19592: PUSH
19593: LD_INT 106
19595: PUSH
19596: LD_INT 107
19598: PUSH
19599: LD_INT 108
19601: PUSH
19602: LD_INT 109
19604: PUSH
19605: LD_INT 110
19607: PUSH
19608: LD_INT 111
19610: PUSH
19611: LD_INT 112
19613: PUSH
19614: LD_INT 114
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: ST_TO_ADDR
19636: GO 21423
19638: LD_INT 11
19640: DOUBLE
19641: EQUAL
19642: IFTRUE 19646
19644: GO 19838
19646: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
19647: LD_ADDR_VAR 0 1
19651: PUSH
19652: LD_INT 2
19654: PUSH
19655: LD_INT 3
19657: PUSH
19658: LD_INT 4
19660: PUSH
19661: LD_INT 5
19663: PUSH
19664: LD_INT 6
19666: PUSH
19667: LD_INT 7
19669: PUSH
19670: LD_INT 8
19672: PUSH
19673: LD_INT 9
19675: PUSH
19676: LD_INT 10
19678: PUSH
19679: LD_INT 11
19681: PUSH
19682: LD_INT 12
19684: PUSH
19685: LD_INT 13
19687: PUSH
19688: LD_INT 14
19690: PUSH
19691: LD_INT 15
19693: PUSH
19694: LD_INT 16
19696: PUSH
19697: LD_INT 17
19699: PUSH
19700: LD_INT 18
19702: PUSH
19703: LD_INT 19
19705: PUSH
19706: LD_INT 20
19708: PUSH
19709: LD_INT 21
19711: PUSH
19712: LD_INT 22
19714: PUSH
19715: LD_INT 23
19717: PUSH
19718: LD_INT 24
19720: PUSH
19721: LD_INT 25
19723: PUSH
19724: LD_INT 26
19726: PUSH
19727: LD_INT 28
19729: PUSH
19730: LD_INT 30
19732: PUSH
19733: LD_INT 31
19735: PUSH
19736: LD_INT 32
19738: PUSH
19739: LD_INT 34
19741: PUSH
19742: LD_INT 36
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: PUSH
19778: LD_INT 101
19780: PUSH
19781: LD_INT 102
19783: PUSH
19784: LD_INT 103
19786: PUSH
19787: LD_INT 104
19789: PUSH
19790: LD_INT 105
19792: PUSH
19793: LD_INT 106
19795: PUSH
19796: LD_INT 107
19798: PUSH
19799: LD_INT 108
19801: PUSH
19802: LD_INT 109
19804: PUSH
19805: LD_INT 110
19807: PUSH
19808: LD_INT 111
19810: PUSH
19811: LD_INT 112
19813: PUSH
19814: LD_INT 114
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: ST_TO_ADDR
19836: GO 21423
19838: LD_INT 12
19840: DOUBLE
19841: EQUAL
19842: IFTRUE 19846
19844: GO 20054
19846: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
19847: LD_ADDR_VAR 0 1
19851: PUSH
19852: LD_INT 1
19854: PUSH
19855: LD_INT 2
19857: PUSH
19858: LD_INT 3
19860: PUSH
19861: LD_INT 4
19863: PUSH
19864: LD_INT 5
19866: PUSH
19867: LD_INT 6
19869: PUSH
19870: LD_INT 7
19872: PUSH
19873: LD_INT 8
19875: PUSH
19876: LD_INT 9
19878: PUSH
19879: LD_INT 10
19881: PUSH
19882: LD_INT 11
19884: PUSH
19885: LD_INT 12
19887: PUSH
19888: LD_INT 13
19890: PUSH
19891: LD_INT 14
19893: PUSH
19894: LD_INT 15
19896: PUSH
19897: LD_INT 16
19899: PUSH
19900: LD_INT 17
19902: PUSH
19903: LD_INT 18
19905: PUSH
19906: LD_INT 19
19908: PUSH
19909: LD_INT 20
19911: PUSH
19912: LD_INT 21
19914: PUSH
19915: LD_INT 22
19917: PUSH
19918: LD_INT 23
19920: PUSH
19921: LD_INT 24
19923: PUSH
19924: LD_INT 25
19926: PUSH
19927: LD_INT 26
19929: PUSH
19930: LD_INT 27
19932: PUSH
19933: LD_INT 28
19935: PUSH
19936: LD_INT 30
19938: PUSH
19939: LD_INT 31
19941: PUSH
19942: LD_INT 32
19944: PUSH
19945: LD_INT 33
19947: PUSH
19948: LD_INT 34
19950: PUSH
19951: LD_INT 36
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: PUSH
19990: LD_INT 101
19992: PUSH
19993: LD_INT 102
19995: PUSH
19996: LD_INT 103
19998: PUSH
19999: LD_INT 104
20001: PUSH
20002: LD_INT 105
20004: PUSH
20005: LD_INT 106
20007: PUSH
20008: LD_INT 107
20010: PUSH
20011: LD_INT 108
20013: PUSH
20014: LD_INT 109
20016: PUSH
20017: LD_INT 110
20019: PUSH
20020: LD_INT 111
20022: PUSH
20023: LD_INT 112
20025: PUSH
20026: LD_INT 113
20028: PUSH
20029: LD_INT 114
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: ST_TO_ADDR
20052: GO 21423
20054: LD_INT 13
20056: DOUBLE
20057: EQUAL
20058: IFTRUE 20062
20060: GO 20258
20062: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
20063: LD_ADDR_VAR 0 1
20067: PUSH
20068: LD_INT 1
20070: PUSH
20071: LD_INT 2
20073: PUSH
20074: LD_INT 3
20076: PUSH
20077: LD_INT 4
20079: PUSH
20080: LD_INT 5
20082: PUSH
20083: LD_INT 8
20085: PUSH
20086: LD_INT 9
20088: PUSH
20089: LD_INT 10
20091: PUSH
20092: LD_INT 11
20094: PUSH
20095: LD_INT 12
20097: PUSH
20098: LD_INT 14
20100: PUSH
20101: LD_INT 15
20103: PUSH
20104: LD_INT 16
20106: PUSH
20107: LD_INT 17
20109: PUSH
20110: LD_INT 18
20112: PUSH
20113: LD_INT 19
20115: PUSH
20116: LD_INT 20
20118: PUSH
20119: LD_INT 21
20121: PUSH
20122: LD_INT 22
20124: PUSH
20125: LD_INT 23
20127: PUSH
20128: LD_INT 24
20130: PUSH
20131: LD_INT 25
20133: PUSH
20134: LD_INT 26
20136: PUSH
20137: LD_INT 27
20139: PUSH
20140: LD_INT 28
20142: PUSH
20143: LD_INT 30
20145: PUSH
20146: LD_INT 31
20148: PUSH
20149: LD_INT 32
20151: PUSH
20152: LD_INT 33
20154: PUSH
20155: LD_INT 34
20157: PUSH
20158: LD_INT 36
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 101
20196: PUSH
20197: LD_INT 102
20199: PUSH
20200: LD_INT 103
20202: PUSH
20203: LD_INT 104
20205: PUSH
20206: LD_INT 105
20208: PUSH
20209: LD_INT 106
20211: PUSH
20212: LD_INT 107
20214: PUSH
20215: LD_INT 108
20217: PUSH
20218: LD_INT 109
20220: PUSH
20221: LD_INT 110
20223: PUSH
20224: LD_INT 111
20226: PUSH
20227: LD_INT 112
20229: PUSH
20230: LD_INT 113
20232: PUSH
20233: LD_INT 114
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: ST_TO_ADDR
20256: GO 21423
20258: LD_INT 14
20260: DOUBLE
20261: EQUAL
20262: IFTRUE 20266
20264: GO 20478
20266: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
20267: LD_ADDR_VAR 0 1
20271: PUSH
20272: LD_INT 1
20274: PUSH
20275: LD_INT 2
20277: PUSH
20278: LD_INT 3
20280: PUSH
20281: LD_INT 4
20283: PUSH
20284: LD_INT 5
20286: PUSH
20287: LD_INT 6
20289: PUSH
20290: LD_INT 7
20292: PUSH
20293: LD_INT 8
20295: PUSH
20296: LD_INT 9
20298: PUSH
20299: LD_INT 10
20301: PUSH
20302: LD_INT 11
20304: PUSH
20305: LD_INT 12
20307: PUSH
20308: LD_INT 13
20310: PUSH
20311: LD_INT 14
20313: PUSH
20314: LD_INT 15
20316: PUSH
20317: LD_INT 16
20319: PUSH
20320: LD_INT 17
20322: PUSH
20323: LD_INT 18
20325: PUSH
20326: LD_INT 19
20328: PUSH
20329: LD_INT 20
20331: PUSH
20332: LD_INT 21
20334: PUSH
20335: LD_INT 22
20337: PUSH
20338: LD_INT 23
20340: PUSH
20341: LD_INT 24
20343: PUSH
20344: LD_INT 25
20346: PUSH
20347: LD_INT 26
20349: PUSH
20350: LD_INT 27
20352: PUSH
20353: LD_INT 28
20355: PUSH
20356: LD_INT 29
20358: PUSH
20359: LD_INT 30
20361: PUSH
20362: LD_INT 31
20364: PUSH
20365: LD_INT 32
20367: PUSH
20368: LD_INT 33
20370: PUSH
20371: LD_INT 34
20373: PUSH
20374: LD_INT 36
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: PUSH
20414: LD_INT 101
20416: PUSH
20417: LD_INT 102
20419: PUSH
20420: LD_INT 103
20422: PUSH
20423: LD_INT 104
20425: PUSH
20426: LD_INT 105
20428: PUSH
20429: LD_INT 106
20431: PUSH
20432: LD_INT 107
20434: PUSH
20435: LD_INT 108
20437: PUSH
20438: LD_INT 109
20440: PUSH
20441: LD_INT 110
20443: PUSH
20444: LD_INT 111
20446: PUSH
20447: LD_INT 112
20449: PUSH
20450: LD_INT 113
20452: PUSH
20453: LD_INT 114
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: ST_TO_ADDR
20476: GO 21423
20478: LD_INT 15
20480: DOUBLE
20481: EQUAL
20482: IFTRUE 20486
20484: GO 20698
20486: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
20487: LD_ADDR_VAR 0 1
20491: PUSH
20492: LD_INT 1
20494: PUSH
20495: LD_INT 2
20497: PUSH
20498: LD_INT 3
20500: PUSH
20501: LD_INT 4
20503: PUSH
20504: LD_INT 5
20506: PUSH
20507: LD_INT 6
20509: PUSH
20510: LD_INT 7
20512: PUSH
20513: LD_INT 8
20515: PUSH
20516: LD_INT 9
20518: PUSH
20519: LD_INT 10
20521: PUSH
20522: LD_INT 11
20524: PUSH
20525: LD_INT 12
20527: PUSH
20528: LD_INT 13
20530: PUSH
20531: LD_INT 14
20533: PUSH
20534: LD_INT 15
20536: PUSH
20537: LD_INT 16
20539: PUSH
20540: LD_INT 17
20542: PUSH
20543: LD_INT 18
20545: PUSH
20546: LD_INT 19
20548: PUSH
20549: LD_INT 20
20551: PUSH
20552: LD_INT 21
20554: PUSH
20555: LD_INT 22
20557: PUSH
20558: LD_INT 23
20560: PUSH
20561: LD_INT 24
20563: PUSH
20564: LD_INT 25
20566: PUSH
20567: LD_INT 26
20569: PUSH
20570: LD_INT 27
20572: PUSH
20573: LD_INT 28
20575: PUSH
20576: LD_INT 29
20578: PUSH
20579: LD_INT 30
20581: PUSH
20582: LD_INT 31
20584: PUSH
20585: LD_INT 32
20587: PUSH
20588: LD_INT 33
20590: PUSH
20591: LD_INT 34
20593: PUSH
20594: LD_INT 36
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: PUSH
20634: LD_INT 101
20636: PUSH
20637: LD_INT 102
20639: PUSH
20640: LD_INT 103
20642: PUSH
20643: LD_INT 104
20645: PUSH
20646: LD_INT 105
20648: PUSH
20649: LD_INT 106
20651: PUSH
20652: LD_INT 107
20654: PUSH
20655: LD_INT 108
20657: PUSH
20658: LD_INT 109
20660: PUSH
20661: LD_INT 110
20663: PUSH
20664: LD_INT 111
20666: PUSH
20667: LD_INT 112
20669: PUSH
20670: LD_INT 113
20672: PUSH
20673: LD_INT 114
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: ST_TO_ADDR
20696: GO 21423
20698: LD_INT 16
20700: DOUBLE
20701: EQUAL
20702: IFTRUE 20706
20704: GO 20830
20706: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
20707: LD_ADDR_VAR 0 1
20711: PUSH
20712: LD_INT 2
20714: PUSH
20715: LD_INT 4
20717: PUSH
20718: LD_INT 5
20720: PUSH
20721: LD_INT 7
20723: PUSH
20724: LD_INT 11
20726: PUSH
20727: LD_INT 12
20729: PUSH
20730: LD_INT 15
20732: PUSH
20733: LD_INT 16
20735: PUSH
20736: LD_INT 20
20738: PUSH
20739: LD_INT 21
20741: PUSH
20742: LD_INT 22
20744: PUSH
20745: LD_INT 23
20747: PUSH
20748: LD_INT 25
20750: PUSH
20751: LD_INT 26
20753: PUSH
20754: LD_INT 30
20756: PUSH
20757: LD_INT 31
20759: PUSH
20760: LD_INT 32
20762: PUSH
20763: LD_INT 33
20765: PUSH
20766: LD_INT 34
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: PUSH
20790: LD_INT 101
20792: PUSH
20793: LD_INT 102
20795: PUSH
20796: LD_INT 103
20798: PUSH
20799: LD_INT 106
20801: PUSH
20802: LD_INT 108
20804: PUSH
20805: LD_INT 112
20807: PUSH
20808: LD_INT 113
20810: PUSH
20811: LD_INT 114
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: ST_TO_ADDR
20828: GO 21423
20830: LD_INT 17
20832: DOUBLE
20833: EQUAL
20834: IFTRUE 20838
20836: GO 21050
20838: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
20839: LD_ADDR_VAR 0 1
20843: PUSH
20844: LD_INT 1
20846: PUSH
20847: LD_INT 2
20849: PUSH
20850: LD_INT 3
20852: PUSH
20853: LD_INT 4
20855: PUSH
20856: LD_INT 5
20858: PUSH
20859: LD_INT 6
20861: PUSH
20862: LD_INT 7
20864: PUSH
20865: LD_INT 8
20867: PUSH
20868: LD_INT 9
20870: PUSH
20871: LD_INT 10
20873: PUSH
20874: LD_INT 11
20876: PUSH
20877: LD_INT 12
20879: PUSH
20880: LD_INT 13
20882: PUSH
20883: LD_INT 14
20885: PUSH
20886: LD_INT 15
20888: PUSH
20889: LD_INT 16
20891: PUSH
20892: LD_INT 17
20894: PUSH
20895: LD_INT 18
20897: PUSH
20898: LD_INT 19
20900: PUSH
20901: LD_INT 20
20903: PUSH
20904: LD_INT 21
20906: PUSH
20907: LD_INT 22
20909: PUSH
20910: LD_INT 23
20912: PUSH
20913: LD_INT 24
20915: PUSH
20916: LD_INT 25
20918: PUSH
20919: LD_INT 26
20921: PUSH
20922: LD_INT 27
20924: PUSH
20925: LD_INT 28
20927: PUSH
20928: LD_INT 29
20930: PUSH
20931: LD_INT 30
20933: PUSH
20934: LD_INT 31
20936: PUSH
20937: LD_INT 32
20939: PUSH
20940: LD_INT 33
20942: PUSH
20943: LD_INT 34
20945: PUSH
20946: LD_INT 36
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 101
20988: PUSH
20989: LD_INT 102
20991: PUSH
20992: LD_INT 103
20994: PUSH
20995: LD_INT 104
20997: PUSH
20998: LD_INT 105
21000: PUSH
21001: LD_INT 106
21003: PUSH
21004: LD_INT 107
21006: PUSH
21007: LD_INT 108
21009: PUSH
21010: LD_INT 109
21012: PUSH
21013: LD_INT 110
21015: PUSH
21016: LD_INT 111
21018: PUSH
21019: LD_INT 112
21021: PUSH
21022: LD_INT 113
21024: PUSH
21025: LD_INT 114
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: ST_TO_ADDR
21048: GO 21423
21050: LD_INT 18
21052: DOUBLE
21053: EQUAL
21054: IFTRUE 21058
21056: GO 21194
21058: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
21059: LD_ADDR_VAR 0 1
21063: PUSH
21064: LD_INT 2
21066: PUSH
21067: LD_INT 4
21069: PUSH
21070: LD_INT 5
21072: PUSH
21073: LD_INT 7
21075: PUSH
21076: LD_INT 11
21078: PUSH
21079: LD_INT 12
21081: PUSH
21082: LD_INT 15
21084: PUSH
21085: LD_INT 16
21087: PUSH
21088: LD_INT 20
21090: PUSH
21091: LD_INT 21
21093: PUSH
21094: LD_INT 22
21096: PUSH
21097: LD_INT 23
21099: PUSH
21100: LD_INT 25
21102: PUSH
21103: LD_INT 26
21105: PUSH
21106: LD_INT 30
21108: PUSH
21109: LD_INT 31
21111: PUSH
21112: LD_INT 32
21114: PUSH
21115: LD_INT 33
21117: PUSH
21118: LD_INT 34
21120: PUSH
21121: LD_INT 35
21123: PUSH
21124: LD_INT 36
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: PUSH
21150: LD_INT 101
21152: PUSH
21153: LD_INT 102
21155: PUSH
21156: LD_INT 103
21158: PUSH
21159: LD_INT 106
21161: PUSH
21162: LD_INT 108
21164: PUSH
21165: LD_INT 112
21167: PUSH
21168: LD_INT 113
21170: PUSH
21171: LD_INT 114
21173: PUSH
21174: LD_INT 115
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: ST_TO_ADDR
21192: GO 21423
21194: LD_INT 19
21196: DOUBLE
21197: EQUAL
21198: IFTRUE 21202
21200: GO 21422
21202: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
21203: LD_ADDR_VAR 0 1
21207: PUSH
21208: LD_INT 1
21210: PUSH
21211: LD_INT 2
21213: PUSH
21214: LD_INT 3
21216: PUSH
21217: LD_INT 4
21219: PUSH
21220: LD_INT 5
21222: PUSH
21223: LD_INT 6
21225: PUSH
21226: LD_INT 7
21228: PUSH
21229: LD_INT 8
21231: PUSH
21232: LD_INT 9
21234: PUSH
21235: LD_INT 10
21237: PUSH
21238: LD_INT 11
21240: PUSH
21241: LD_INT 12
21243: PUSH
21244: LD_INT 13
21246: PUSH
21247: LD_INT 14
21249: PUSH
21250: LD_INT 15
21252: PUSH
21253: LD_INT 16
21255: PUSH
21256: LD_INT 17
21258: PUSH
21259: LD_INT 18
21261: PUSH
21262: LD_INT 19
21264: PUSH
21265: LD_INT 20
21267: PUSH
21268: LD_INT 21
21270: PUSH
21271: LD_INT 22
21273: PUSH
21274: LD_INT 23
21276: PUSH
21277: LD_INT 24
21279: PUSH
21280: LD_INT 25
21282: PUSH
21283: LD_INT 26
21285: PUSH
21286: LD_INT 27
21288: PUSH
21289: LD_INT 28
21291: PUSH
21292: LD_INT 29
21294: PUSH
21295: LD_INT 30
21297: PUSH
21298: LD_INT 31
21300: PUSH
21301: LD_INT 32
21303: PUSH
21304: LD_INT 33
21306: PUSH
21307: LD_INT 34
21309: PUSH
21310: LD_INT 35
21312: PUSH
21313: LD_INT 36
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 101
21356: PUSH
21357: LD_INT 102
21359: PUSH
21360: LD_INT 103
21362: PUSH
21363: LD_INT 104
21365: PUSH
21366: LD_INT 105
21368: PUSH
21369: LD_INT 106
21371: PUSH
21372: LD_INT 107
21374: PUSH
21375: LD_INT 108
21377: PUSH
21378: LD_INT 109
21380: PUSH
21381: LD_INT 110
21383: PUSH
21384: LD_INT 111
21386: PUSH
21387: LD_INT 112
21389: PUSH
21390: LD_INT 113
21392: PUSH
21393: LD_INT 114
21395: PUSH
21396: LD_INT 115
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: ST_TO_ADDR
21420: GO 21423
21422: POP
// end else
21423: GO 21642
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
21425: LD_ADDR_VAR 0 1
21429: PUSH
21430: LD_INT 1
21432: PUSH
21433: LD_INT 2
21435: PUSH
21436: LD_INT 3
21438: PUSH
21439: LD_INT 4
21441: PUSH
21442: LD_INT 5
21444: PUSH
21445: LD_INT 6
21447: PUSH
21448: LD_INT 7
21450: PUSH
21451: LD_INT 8
21453: PUSH
21454: LD_INT 9
21456: PUSH
21457: LD_INT 10
21459: PUSH
21460: LD_INT 11
21462: PUSH
21463: LD_INT 12
21465: PUSH
21466: LD_INT 13
21468: PUSH
21469: LD_INT 14
21471: PUSH
21472: LD_INT 15
21474: PUSH
21475: LD_INT 16
21477: PUSH
21478: LD_INT 17
21480: PUSH
21481: LD_INT 18
21483: PUSH
21484: LD_INT 19
21486: PUSH
21487: LD_INT 20
21489: PUSH
21490: LD_INT 21
21492: PUSH
21493: LD_INT 22
21495: PUSH
21496: LD_INT 23
21498: PUSH
21499: LD_INT 24
21501: PUSH
21502: LD_INT 25
21504: PUSH
21505: LD_INT 26
21507: PUSH
21508: LD_INT 27
21510: PUSH
21511: LD_INT 28
21513: PUSH
21514: LD_INT 29
21516: PUSH
21517: LD_INT 30
21519: PUSH
21520: LD_INT 31
21522: PUSH
21523: LD_INT 32
21525: PUSH
21526: LD_INT 33
21528: PUSH
21529: LD_INT 34
21531: PUSH
21532: LD_INT 35
21534: PUSH
21535: LD_INT 36
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 101
21578: PUSH
21579: LD_INT 102
21581: PUSH
21582: LD_INT 103
21584: PUSH
21585: LD_INT 104
21587: PUSH
21588: LD_INT 105
21590: PUSH
21591: LD_INT 106
21593: PUSH
21594: LD_INT 107
21596: PUSH
21597: LD_INT 108
21599: PUSH
21600: LD_INT 109
21602: PUSH
21603: LD_INT 110
21605: PUSH
21606: LD_INT 111
21608: PUSH
21609: LD_INT 112
21611: PUSH
21612: LD_INT 113
21614: PUSH
21615: LD_INT 114
21617: PUSH
21618: LD_INT 115
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: ST_TO_ADDR
// if result then
21642: LD_VAR 0 1
21646: IFFALSE 21935
// begin normal :=  ;
21648: LD_ADDR_VAR 0 3
21652: PUSH
21653: LD_STRING 
21655: ST_TO_ADDR
// hardcore :=  ;
21656: LD_ADDR_VAR 0 4
21660: PUSH
21661: LD_STRING 
21663: ST_TO_ADDR
// for i = 1 to normalCounter do
21664: LD_ADDR_VAR 0 5
21668: PUSH
21669: DOUBLE
21670: LD_INT 1
21672: DEC
21673: ST_TO_ADDR
21674: LD_EXP 53
21678: PUSH
21679: FOR_TO
21680: IFFALSE 21781
// begin tmp := 0 ;
21682: LD_ADDR_VAR 0 2
21686: PUSH
21687: LD_STRING 0
21689: ST_TO_ADDR
// if result [ 1 ] then
21690: LD_VAR 0 1
21694: PUSH
21695: LD_INT 1
21697: ARRAY
21698: IFFALSE 21763
// if result [ 1 ] [ 1 ] = i then
21700: LD_VAR 0 1
21704: PUSH
21705: LD_INT 1
21707: ARRAY
21708: PUSH
21709: LD_INT 1
21711: ARRAY
21712: PUSH
21713: LD_VAR 0 5
21717: EQUAL
21718: IFFALSE 21763
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
21720: LD_ADDR_VAR 0 1
21724: PUSH
21725: LD_VAR 0 1
21729: PPUSH
21730: LD_INT 1
21732: PPUSH
21733: LD_VAR 0 1
21737: PUSH
21738: LD_INT 1
21740: ARRAY
21741: PPUSH
21742: LD_INT 1
21744: PPUSH
21745: CALL_OW 3
21749: PPUSH
21750: CALL_OW 1
21754: ST_TO_ADDR
// tmp := 1 ;
21755: LD_ADDR_VAR 0 2
21759: PUSH
21760: LD_STRING 1
21762: ST_TO_ADDR
// end ; normal := normal & tmp ;
21763: LD_ADDR_VAR 0 3
21767: PUSH
21768: LD_VAR 0 3
21772: PUSH
21773: LD_VAR 0 2
21777: STR
21778: ST_TO_ADDR
// end ;
21779: GO 21679
21781: POP
21782: POP
// for i = 1 to hardcoreCounter do
21783: LD_ADDR_VAR 0 5
21787: PUSH
21788: DOUBLE
21789: LD_INT 1
21791: DEC
21792: ST_TO_ADDR
21793: LD_EXP 54
21797: PUSH
21798: FOR_TO
21799: IFFALSE 21904
// begin tmp := 0 ;
21801: LD_ADDR_VAR 0 2
21805: PUSH
21806: LD_STRING 0
21808: ST_TO_ADDR
// if result [ 2 ] then
21809: LD_VAR 0 1
21813: PUSH
21814: LD_INT 2
21816: ARRAY
21817: IFFALSE 21886
// if result [ 2 ] [ 1 ] = 100 + i then
21819: LD_VAR 0 1
21823: PUSH
21824: LD_INT 2
21826: ARRAY
21827: PUSH
21828: LD_INT 1
21830: ARRAY
21831: PUSH
21832: LD_INT 100
21834: PUSH
21835: LD_VAR 0 5
21839: PLUS
21840: EQUAL
21841: IFFALSE 21886
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
21843: LD_ADDR_VAR 0 1
21847: PUSH
21848: LD_VAR 0 1
21852: PPUSH
21853: LD_INT 2
21855: PPUSH
21856: LD_VAR 0 1
21860: PUSH
21861: LD_INT 2
21863: ARRAY
21864: PPUSH
21865: LD_INT 1
21867: PPUSH
21868: CALL_OW 3
21872: PPUSH
21873: CALL_OW 1
21877: ST_TO_ADDR
// tmp := 1 ;
21878: LD_ADDR_VAR 0 2
21882: PUSH
21883: LD_STRING 1
21885: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21886: LD_ADDR_VAR 0 4
21890: PUSH
21891: LD_VAR 0 4
21895: PUSH
21896: LD_VAR 0 2
21900: STR
21901: ST_TO_ADDR
// end ;
21902: GO 21798
21904: POP
21905: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
21906: LD_STRING getStreamItemsFromMission("
21908: PUSH
21909: LD_VAR 0 3
21913: STR
21914: PUSH
21915: LD_STRING ","
21917: STR
21918: PUSH
21919: LD_VAR 0 4
21923: STR
21924: PUSH
21925: LD_STRING ")
21927: STR
21928: PPUSH
21929: CALL_OW 559
// end else
21933: GO 21942
// ToLua ( getStreamItemsFromMission("","") ) ;
21935: LD_STRING getStreamItemsFromMission("","")
21937: PPUSH
21938: CALL_OW 559
// end ;
21942: LD_VAR 0 1
21946: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21947: LD_EXP 52
21951: PUSH
21952: LD_EXP 57
21956: AND
21957: IFFALSE 22081
21959: GO 21961
21961: DISABLE
21962: LD_INT 0
21964: PPUSH
21965: PPUSH
// begin enable ;
21966: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21967: LD_ADDR_VAR 0 2
21971: PUSH
21972: LD_INT 22
21974: PUSH
21975: LD_OWVAR 2
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PUSH
21984: LD_INT 2
21986: PUSH
21987: LD_INT 34
21989: PUSH
21990: LD_INT 7
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 34
21999: PUSH
22000: LD_INT 45
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: PUSH
22007: LD_INT 34
22009: PUSH
22010: LD_INT 28
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 34
22019: PUSH
22020: LD_INT 47
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: PPUSH
22038: CALL_OW 69
22042: ST_TO_ADDR
// if not tmp then
22043: LD_VAR 0 2
22047: NOT
22048: IFFALSE 22052
// exit ;
22050: GO 22081
// for i in tmp do
22052: LD_ADDR_VAR 0 1
22056: PUSH
22057: LD_VAR 0 2
22061: PUSH
22062: FOR_IN
22063: IFFALSE 22079
// begin SetLives ( i , 0 ) ;
22065: LD_VAR 0 1
22069: PPUSH
22070: LD_INT 0
22072: PPUSH
22073: CALL_OW 234
// end ;
22077: GO 22062
22079: POP
22080: POP
// end ;
22081: PPOPN 2
22083: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
22084: LD_EXP 52
22088: PUSH
22089: LD_EXP 58
22093: AND
22094: IFFALSE 22178
22096: GO 22098
22098: DISABLE
22099: LD_INT 0
22101: PPUSH
22102: PPUSH
// begin enable ;
22103: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
22104: LD_ADDR_VAR 0 2
22108: PUSH
22109: LD_INT 22
22111: PUSH
22112: LD_OWVAR 2
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 32
22123: PUSH
22124: LD_INT 3
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PPUSH
22135: CALL_OW 69
22139: ST_TO_ADDR
// if not tmp then
22140: LD_VAR 0 2
22144: NOT
22145: IFFALSE 22149
// exit ;
22147: GO 22178
// for i in tmp do
22149: LD_ADDR_VAR 0 1
22153: PUSH
22154: LD_VAR 0 2
22158: PUSH
22159: FOR_IN
22160: IFFALSE 22176
// begin SetLives ( i , 0 ) ;
22162: LD_VAR 0 1
22166: PPUSH
22167: LD_INT 0
22169: PPUSH
22170: CALL_OW 234
// end ;
22174: GO 22159
22176: POP
22177: POP
// end ;
22178: PPOPN 2
22180: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
22181: LD_EXP 52
22185: PUSH
22186: LD_EXP 55
22190: AND
22191: IFFALSE 22284
22193: GO 22195
22195: DISABLE
22196: LD_INT 0
22198: PPUSH
// begin enable ;
22199: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22200: LD_ADDR_VAR 0 1
22204: PUSH
22205: LD_INT 22
22207: PUSH
22208: LD_OWVAR 2
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PUSH
22217: LD_INT 2
22219: PUSH
22220: LD_INT 25
22222: PUSH
22223: LD_INT 5
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: PUSH
22230: LD_INT 25
22232: PUSH
22233: LD_INT 9
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PUSH
22240: LD_INT 25
22242: PUSH
22243: LD_INT 8
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PPUSH
22260: CALL_OW 69
22264: PUSH
22265: FOR_IN
22266: IFFALSE 22282
// begin SetClass ( i , 1 ) ;
22268: LD_VAR 0 1
22272: PPUSH
22273: LD_INT 1
22275: PPUSH
22276: CALL_OW 336
// end ;
22280: GO 22265
22282: POP
22283: POP
// end ;
22284: PPOPN 1
22286: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22287: LD_EXP 52
22291: PUSH
22292: LD_EXP 56
22296: AND
22297: PUSH
22298: LD_OWVAR 65
22302: PUSH
22303: LD_INT 7
22305: LESS
22306: AND
22307: IFFALSE 22321
22309: GO 22311
22311: DISABLE
// begin enable ;
22312: ENABLE
// game_speed := 7 ;
22313: LD_ADDR_OWVAR 65
22317: PUSH
22318: LD_INT 7
22320: ST_TO_ADDR
// end ;
22321: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
22322: LD_EXP 52
22326: PUSH
22327: LD_EXP 59
22331: AND
22332: IFFALSE 22534
22334: GO 22336
22336: DISABLE
22337: LD_INT 0
22339: PPUSH
22340: PPUSH
22341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22342: LD_ADDR_VAR 0 3
22346: PUSH
22347: LD_INT 81
22349: PUSH
22350: LD_OWVAR 2
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: LD_INT 21
22361: PUSH
22362: LD_INT 1
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PPUSH
22373: CALL_OW 69
22377: ST_TO_ADDR
// if not tmp then
22378: LD_VAR 0 3
22382: NOT
22383: IFFALSE 22387
// exit ;
22385: GO 22534
// if tmp > 5 then
22387: LD_VAR 0 3
22391: PUSH
22392: LD_INT 5
22394: GREATER
22395: IFFALSE 22407
// k := 5 else
22397: LD_ADDR_VAR 0 2
22401: PUSH
22402: LD_INT 5
22404: ST_TO_ADDR
22405: GO 22417
// k := tmp ;
22407: LD_ADDR_VAR 0 2
22411: PUSH
22412: LD_VAR 0 3
22416: ST_TO_ADDR
// for i := 1 to k do
22417: LD_ADDR_VAR 0 1
22421: PUSH
22422: DOUBLE
22423: LD_INT 1
22425: DEC
22426: ST_TO_ADDR
22427: LD_VAR 0 2
22431: PUSH
22432: FOR_TO
22433: IFFALSE 22532
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22435: LD_VAR 0 3
22439: PUSH
22440: LD_VAR 0 1
22444: ARRAY
22445: PPUSH
22446: LD_VAR 0 1
22450: PUSH
22451: LD_INT 4
22453: MOD
22454: PUSH
22455: LD_INT 1
22457: PLUS
22458: PPUSH
22459: CALL_OW 259
22463: PUSH
22464: LD_INT 10
22466: LESS
22467: IFFALSE 22530
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22469: LD_VAR 0 3
22473: PUSH
22474: LD_VAR 0 1
22478: ARRAY
22479: PPUSH
22480: LD_VAR 0 1
22484: PUSH
22485: LD_INT 4
22487: MOD
22488: PUSH
22489: LD_INT 1
22491: PLUS
22492: PPUSH
22493: LD_VAR 0 3
22497: PUSH
22498: LD_VAR 0 1
22502: ARRAY
22503: PPUSH
22504: LD_VAR 0 1
22508: PUSH
22509: LD_INT 4
22511: MOD
22512: PUSH
22513: LD_INT 1
22515: PLUS
22516: PPUSH
22517: CALL_OW 259
22521: PUSH
22522: LD_INT 1
22524: PLUS
22525: PPUSH
22526: CALL_OW 237
22530: GO 22432
22532: POP
22533: POP
// end ;
22534: PPOPN 3
22536: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22537: LD_EXP 52
22541: PUSH
22542: LD_EXP 60
22546: AND
22547: IFFALSE 22567
22549: GO 22551
22551: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22552: LD_INT 4
22554: PPUSH
22555: LD_OWVAR 2
22559: PPUSH
22560: LD_INT 0
22562: PPUSH
22563: CALL_OW 324
22567: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22568: LD_EXP 52
22572: PUSH
22573: LD_EXP 89
22577: AND
22578: IFFALSE 22598
22580: GO 22582
22582: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22583: LD_INT 19
22585: PPUSH
22586: LD_OWVAR 2
22590: PPUSH
22591: LD_INT 0
22593: PPUSH
22594: CALL_OW 324
22598: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22599: LD_EXP 52
22603: PUSH
22604: LD_EXP 61
22608: AND
22609: IFFALSE 22711
22611: GO 22613
22613: DISABLE
22614: LD_INT 0
22616: PPUSH
22617: PPUSH
// begin enable ;
22618: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22619: LD_ADDR_VAR 0 2
22623: PUSH
22624: LD_INT 22
22626: PUSH
22627: LD_OWVAR 2
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 2
22638: PUSH
22639: LD_INT 34
22641: PUSH
22642: LD_INT 11
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: PUSH
22649: LD_INT 34
22651: PUSH
22652: LD_INT 30
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: LIST
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PPUSH
22668: CALL_OW 69
22672: ST_TO_ADDR
// if not tmp then
22673: LD_VAR 0 2
22677: NOT
22678: IFFALSE 22682
// exit ;
22680: GO 22711
// for i in tmp do
22682: LD_ADDR_VAR 0 1
22686: PUSH
22687: LD_VAR 0 2
22691: PUSH
22692: FOR_IN
22693: IFFALSE 22709
// begin SetLives ( i , 0 ) ;
22695: LD_VAR 0 1
22699: PPUSH
22700: LD_INT 0
22702: PPUSH
22703: CALL_OW 234
// end ;
22707: GO 22692
22709: POP
22710: POP
// end ;
22711: PPOPN 2
22713: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22714: LD_EXP 52
22718: PUSH
22719: LD_EXP 62
22723: AND
22724: IFFALSE 22744
22726: GO 22728
22728: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22729: LD_INT 32
22731: PPUSH
22732: LD_OWVAR 2
22736: PPUSH
22737: LD_INT 0
22739: PPUSH
22740: CALL_OW 324
22744: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22745: LD_EXP 52
22749: PUSH
22750: LD_EXP 63
22754: AND
22755: IFFALSE 22936
22757: GO 22759
22759: DISABLE
22760: LD_INT 0
22762: PPUSH
22763: PPUSH
22764: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22765: LD_ADDR_VAR 0 2
22769: PUSH
22770: LD_INT 22
22772: PUSH
22773: LD_OWVAR 2
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 33
22784: PUSH
22785: LD_INT 3
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PPUSH
22796: CALL_OW 69
22800: ST_TO_ADDR
// if not tmp then
22801: LD_VAR 0 2
22805: NOT
22806: IFFALSE 22810
// exit ;
22808: GO 22936
// side := 0 ;
22810: LD_ADDR_VAR 0 3
22814: PUSH
22815: LD_INT 0
22817: ST_TO_ADDR
// for i := 1 to 8 do
22818: LD_ADDR_VAR 0 1
22822: PUSH
22823: DOUBLE
22824: LD_INT 1
22826: DEC
22827: ST_TO_ADDR
22828: LD_INT 8
22830: PUSH
22831: FOR_TO
22832: IFFALSE 22880
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22834: LD_OWVAR 2
22838: PUSH
22839: LD_VAR 0 1
22843: NONEQUAL
22844: PUSH
22845: LD_OWVAR 2
22849: PPUSH
22850: LD_VAR 0 1
22854: PPUSH
22855: CALL_OW 81
22859: PUSH
22860: LD_INT 2
22862: EQUAL
22863: AND
22864: IFFALSE 22878
// begin side := i ;
22866: LD_ADDR_VAR 0 3
22870: PUSH
22871: LD_VAR 0 1
22875: ST_TO_ADDR
// break ;
22876: GO 22880
// end ;
22878: GO 22831
22880: POP
22881: POP
// if not side then
22882: LD_VAR 0 3
22886: NOT
22887: IFFALSE 22891
// exit ;
22889: GO 22936
// for i := 1 to tmp do
22891: LD_ADDR_VAR 0 1
22895: PUSH
22896: DOUBLE
22897: LD_INT 1
22899: DEC
22900: ST_TO_ADDR
22901: LD_VAR 0 2
22905: PUSH
22906: FOR_TO
22907: IFFALSE 22934
// if Prob ( 60 ) then
22909: LD_INT 60
22911: PPUSH
22912: CALL_OW 13
22916: IFFALSE 22932
// SetSide ( i , side ) ;
22918: LD_VAR 0 1
22922: PPUSH
22923: LD_VAR 0 3
22927: PPUSH
22928: CALL_OW 235
22932: GO 22906
22934: POP
22935: POP
// end ;
22936: PPOPN 3
22938: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22939: LD_EXP 52
22943: PUSH
22944: LD_EXP 65
22948: AND
22949: IFFALSE 23068
22951: GO 22953
22953: DISABLE
22954: LD_INT 0
22956: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22957: LD_ADDR_VAR 0 1
22961: PUSH
22962: LD_INT 22
22964: PUSH
22965: LD_OWVAR 2
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: LD_INT 21
22976: PUSH
22977: LD_INT 1
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 3
22986: PUSH
22987: LD_INT 23
22989: PUSH
22990: LD_INT 0
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: LIST
23005: PPUSH
23006: CALL_OW 69
23010: PUSH
23011: FOR_IN
23012: IFFALSE 23066
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
23014: LD_VAR 0 1
23018: PPUSH
23019: CALL_OW 257
23023: PUSH
23024: LD_INT 1
23026: PUSH
23027: LD_INT 2
23029: PUSH
23030: LD_INT 3
23032: PUSH
23033: LD_INT 4
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: IN
23042: IFFALSE 23064
// SetClass ( un , rand ( 1 , 4 ) ) ;
23044: LD_VAR 0 1
23048: PPUSH
23049: LD_INT 1
23051: PPUSH
23052: LD_INT 4
23054: PPUSH
23055: CALL_OW 12
23059: PPUSH
23060: CALL_OW 336
23064: GO 23011
23066: POP
23067: POP
// end ;
23068: PPOPN 1
23070: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
23071: LD_EXP 52
23075: PUSH
23076: LD_EXP 64
23080: AND
23081: IFFALSE 23160
23083: GO 23085
23085: DISABLE
23086: LD_INT 0
23088: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23089: LD_ADDR_VAR 0 1
23093: PUSH
23094: LD_INT 22
23096: PUSH
23097: LD_OWVAR 2
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: PUSH
23106: LD_INT 21
23108: PUSH
23109: LD_INT 3
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PPUSH
23120: CALL_OW 69
23124: ST_TO_ADDR
// if not tmp then
23125: LD_VAR 0 1
23129: NOT
23130: IFFALSE 23134
// exit ;
23132: GO 23160
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
23134: LD_VAR 0 1
23138: PUSH
23139: LD_INT 1
23141: PPUSH
23142: LD_VAR 0 1
23146: PPUSH
23147: CALL_OW 12
23151: ARRAY
23152: PPUSH
23153: LD_INT 100
23155: PPUSH
23156: CALL_OW 234
// end ;
23160: PPOPN 1
23162: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
23163: LD_EXP 52
23167: PUSH
23168: LD_EXP 66
23172: AND
23173: IFFALSE 23271
23175: GO 23177
23177: DISABLE
23178: LD_INT 0
23180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23181: LD_ADDR_VAR 0 1
23185: PUSH
23186: LD_INT 22
23188: PUSH
23189: LD_OWVAR 2
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: LD_INT 21
23200: PUSH
23201: LD_INT 1
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PPUSH
23212: CALL_OW 69
23216: ST_TO_ADDR
// if not tmp then
23217: LD_VAR 0 1
23221: NOT
23222: IFFALSE 23226
// exit ;
23224: GO 23271
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
23226: LD_VAR 0 1
23230: PUSH
23231: LD_INT 1
23233: PPUSH
23234: LD_VAR 0 1
23238: PPUSH
23239: CALL_OW 12
23243: ARRAY
23244: PPUSH
23245: LD_INT 1
23247: PPUSH
23248: LD_INT 4
23250: PPUSH
23251: CALL_OW 12
23255: PPUSH
23256: LD_INT 3000
23258: PPUSH
23259: LD_INT 9000
23261: PPUSH
23262: CALL_OW 12
23266: PPUSH
23267: CALL_OW 492
// end ;
23271: PPOPN 1
23273: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23274: LD_EXP 52
23278: PUSH
23279: LD_EXP 67
23283: AND
23284: IFFALSE 23304
23286: GO 23288
23288: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
23289: LD_INT 1
23291: PPUSH
23292: LD_OWVAR 2
23296: PPUSH
23297: LD_INT 0
23299: PPUSH
23300: CALL_OW 324
23304: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
23305: LD_EXP 52
23309: PUSH
23310: LD_EXP 68
23314: AND
23315: IFFALSE 23398
23317: GO 23319
23319: DISABLE
23320: LD_INT 0
23322: PPUSH
23323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23324: LD_ADDR_VAR 0 2
23328: PUSH
23329: LD_INT 22
23331: PUSH
23332: LD_OWVAR 2
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PUSH
23341: LD_INT 21
23343: PUSH
23344: LD_INT 3
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PPUSH
23355: CALL_OW 69
23359: ST_TO_ADDR
// if not tmp then
23360: LD_VAR 0 2
23364: NOT
23365: IFFALSE 23369
// exit ;
23367: GO 23398
// for i in tmp do
23369: LD_ADDR_VAR 0 1
23373: PUSH
23374: LD_VAR 0 2
23378: PUSH
23379: FOR_IN
23380: IFFALSE 23396
// SetBLevel ( i , 10 ) ;
23382: LD_VAR 0 1
23386: PPUSH
23387: LD_INT 10
23389: PPUSH
23390: CALL_OW 241
23394: GO 23379
23396: POP
23397: POP
// end ;
23398: PPOPN 2
23400: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23401: LD_EXP 52
23405: PUSH
23406: LD_EXP 69
23410: AND
23411: IFFALSE 23522
23413: GO 23415
23415: DISABLE
23416: LD_INT 0
23418: PPUSH
23419: PPUSH
23420: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23421: LD_ADDR_VAR 0 3
23425: PUSH
23426: LD_INT 22
23428: PUSH
23429: LD_OWVAR 2
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: PUSH
23438: LD_INT 25
23440: PUSH
23441: LD_INT 1
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PPUSH
23452: CALL_OW 69
23456: ST_TO_ADDR
// if not tmp then
23457: LD_VAR 0 3
23461: NOT
23462: IFFALSE 23466
// exit ;
23464: GO 23522
// un := tmp [ rand ( 1 , tmp ) ] ;
23466: LD_ADDR_VAR 0 2
23470: PUSH
23471: LD_VAR 0 3
23475: PUSH
23476: LD_INT 1
23478: PPUSH
23479: LD_VAR 0 3
23483: PPUSH
23484: CALL_OW 12
23488: ARRAY
23489: ST_TO_ADDR
// if Crawls ( un ) then
23490: LD_VAR 0 2
23494: PPUSH
23495: CALL_OW 318
23499: IFFALSE 23510
// ComWalk ( un ) ;
23501: LD_VAR 0 2
23505: PPUSH
23506: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23510: LD_VAR 0 2
23514: PPUSH
23515: LD_INT 5
23517: PPUSH
23518: CALL_OW 336
// end ;
23522: PPOPN 3
23524: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
23525: LD_EXP 52
23529: PUSH
23530: LD_EXP 70
23534: AND
23535: PUSH
23536: LD_OWVAR 67
23540: PUSH
23541: LD_INT 3
23543: LESS
23544: AND
23545: IFFALSE 23564
23547: GO 23549
23549: DISABLE
// Difficulty := Difficulty + 1 ;
23550: LD_ADDR_OWVAR 67
23554: PUSH
23555: LD_OWVAR 67
23559: PUSH
23560: LD_INT 1
23562: PLUS
23563: ST_TO_ADDR
23564: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23565: LD_EXP 52
23569: PUSH
23570: LD_EXP 71
23574: AND
23575: IFFALSE 23678
23577: GO 23579
23579: DISABLE
23580: LD_INT 0
23582: PPUSH
// begin for i := 1 to 5 do
23583: LD_ADDR_VAR 0 1
23587: PUSH
23588: DOUBLE
23589: LD_INT 1
23591: DEC
23592: ST_TO_ADDR
23593: LD_INT 5
23595: PUSH
23596: FOR_TO
23597: IFFALSE 23676
// begin uc_nation := nation_nature ;
23599: LD_ADDR_OWVAR 21
23603: PUSH
23604: LD_INT 0
23606: ST_TO_ADDR
// uc_side := 0 ;
23607: LD_ADDR_OWVAR 20
23611: PUSH
23612: LD_INT 0
23614: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23615: LD_ADDR_OWVAR 29
23619: PUSH
23620: LD_INT 12
23622: PUSH
23623: LD_INT 12
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: ST_TO_ADDR
// hc_agressivity := 20 ;
23630: LD_ADDR_OWVAR 35
23634: PUSH
23635: LD_INT 20
23637: ST_TO_ADDR
// hc_class := class_tiger ;
23638: LD_ADDR_OWVAR 28
23642: PUSH
23643: LD_INT 14
23645: ST_TO_ADDR
// hc_gallery :=  ;
23646: LD_ADDR_OWVAR 33
23650: PUSH
23651: LD_STRING 
23653: ST_TO_ADDR
// hc_name :=  ;
23654: LD_ADDR_OWVAR 26
23658: PUSH
23659: LD_STRING 
23661: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23662: CALL_OW 44
23666: PPUSH
23667: LD_INT 0
23669: PPUSH
23670: CALL_OW 51
// end ;
23674: GO 23596
23676: POP
23677: POP
// end ;
23678: PPOPN 1
23680: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23681: LD_EXP 52
23685: PUSH
23686: LD_EXP 72
23690: AND
23691: IFFALSE 23700
23693: GO 23695
23695: DISABLE
// StreamSibBomb ;
23696: CALL 23701 0 0
23700: END
// export function StreamSibBomb ; var i , x , y ; begin
23701: LD_INT 0
23703: PPUSH
23704: PPUSH
23705: PPUSH
23706: PPUSH
// result := false ;
23707: LD_ADDR_VAR 0 1
23711: PUSH
23712: LD_INT 0
23714: ST_TO_ADDR
// for i := 1 to 16 do
23715: LD_ADDR_VAR 0 2
23719: PUSH
23720: DOUBLE
23721: LD_INT 1
23723: DEC
23724: ST_TO_ADDR
23725: LD_INT 16
23727: PUSH
23728: FOR_TO
23729: IFFALSE 23928
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23731: LD_ADDR_VAR 0 3
23735: PUSH
23736: LD_INT 10
23738: PUSH
23739: LD_INT 20
23741: PUSH
23742: LD_INT 30
23744: PUSH
23745: LD_INT 40
23747: PUSH
23748: LD_INT 50
23750: PUSH
23751: LD_INT 60
23753: PUSH
23754: LD_INT 70
23756: PUSH
23757: LD_INT 80
23759: PUSH
23760: LD_INT 90
23762: PUSH
23763: LD_INT 100
23765: PUSH
23766: LD_INT 110
23768: PUSH
23769: LD_INT 120
23771: PUSH
23772: LD_INT 130
23774: PUSH
23775: LD_INT 140
23777: PUSH
23778: LD_INT 150
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: PUSH
23798: LD_INT 1
23800: PPUSH
23801: LD_INT 15
23803: PPUSH
23804: CALL_OW 12
23808: ARRAY
23809: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23810: LD_ADDR_VAR 0 4
23814: PUSH
23815: LD_INT 10
23817: PUSH
23818: LD_INT 20
23820: PUSH
23821: LD_INT 30
23823: PUSH
23824: LD_INT 40
23826: PUSH
23827: LD_INT 50
23829: PUSH
23830: LD_INT 60
23832: PUSH
23833: LD_INT 70
23835: PUSH
23836: LD_INT 80
23838: PUSH
23839: LD_INT 90
23841: PUSH
23842: LD_INT 100
23844: PUSH
23845: LD_INT 110
23847: PUSH
23848: LD_INT 120
23850: PUSH
23851: LD_INT 130
23853: PUSH
23854: LD_INT 140
23856: PUSH
23857: LD_INT 150
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: PUSH
23877: LD_INT 1
23879: PPUSH
23880: LD_INT 15
23882: PPUSH
23883: CALL_OW 12
23887: ARRAY
23888: ST_TO_ADDR
// if ValidHex ( x , y ) then
23889: LD_VAR 0 3
23893: PPUSH
23894: LD_VAR 0 4
23898: PPUSH
23899: CALL_OW 488
23903: IFFALSE 23926
// begin result := [ x , y ] ;
23905: LD_ADDR_VAR 0 1
23909: PUSH
23910: LD_VAR 0 3
23914: PUSH
23915: LD_VAR 0 4
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: ST_TO_ADDR
// break ;
23924: GO 23928
// end ; end ;
23926: GO 23728
23928: POP
23929: POP
// if result then
23930: LD_VAR 0 1
23934: IFFALSE 23994
// begin ToLua ( playSibBomb() ) ;
23936: LD_STRING playSibBomb()
23938: PPUSH
23939: CALL_OW 559
// wait ( 0 0$14 ) ;
23943: LD_INT 490
23945: PPUSH
23946: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23950: LD_VAR 0 1
23954: PUSH
23955: LD_INT 1
23957: ARRAY
23958: PPUSH
23959: LD_VAR 0 1
23963: PUSH
23964: LD_INT 2
23966: ARRAY
23967: PPUSH
23968: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23972: LD_VAR 0 1
23976: PUSH
23977: LD_INT 1
23979: ARRAY
23980: PPUSH
23981: LD_VAR 0 1
23985: PUSH
23986: LD_INT 2
23988: ARRAY
23989: PPUSH
23990: CALL_OW 429
// end ; end ;
23994: LD_VAR 0 1
23998: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23999: LD_EXP 52
24003: PUSH
24004: LD_EXP 74
24008: AND
24009: IFFALSE 24021
24011: GO 24013
24013: DISABLE
// YouLost (  ) ;
24014: LD_STRING 
24016: PPUSH
24017: CALL_OW 104
24021: END
// every 0 0$1 trigger StreamModeActive and sFog do
24022: LD_EXP 52
24026: PUSH
24027: LD_EXP 73
24031: AND
24032: IFFALSE 24046
24034: GO 24036
24036: DISABLE
// FogOff ( your_side ) ;
24037: LD_OWVAR 2
24041: PPUSH
24042: CALL_OW 344
24046: END
// every 0 0$1 trigger StreamModeActive and sSun do
24047: LD_EXP 52
24051: PUSH
24052: LD_EXP 75
24056: AND
24057: IFFALSE 24085
24059: GO 24061
24061: DISABLE
// begin solar_recharge_percent := 0 ;
24062: LD_ADDR_OWVAR 79
24066: PUSH
24067: LD_INT 0
24069: ST_TO_ADDR
// wait ( 5 5$00 ) ;
24070: LD_INT 10500
24072: PPUSH
24073: CALL_OW 67
// solar_recharge_percent := 100 ;
24077: LD_ADDR_OWVAR 79
24081: PUSH
24082: LD_INT 100
24084: ST_TO_ADDR
// end ;
24085: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
24086: LD_EXP 52
24090: PUSH
24091: LD_EXP 76
24095: AND
24096: IFFALSE 24335
24098: GO 24100
24100: DISABLE
24101: LD_INT 0
24103: PPUSH
24104: PPUSH
24105: PPUSH
// begin tmp := [ ] ;
24106: LD_ADDR_VAR 0 3
24110: PUSH
24111: EMPTY
24112: ST_TO_ADDR
// for i := 1 to 6 do
24113: LD_ADDR_VAR 0 1
24117: PUSH
24118: DOUBLE
24119: LD_INT 1
24121: DEC
24122: ST_TO_ADDR
24123: LD_INT 6
24125: PUSH
24126: FOR_TO
24127: IFFALSE 24232
// begin uc_nation := nation_nature ;
24129: LD_ADDR_OWVAR 21
24133: PUSH
24134: LD_INT 0
24136: ST_TO_ADDR
// uc_side := 0 ;
24137: LD_ADDR_OWVAR 20
24141: PUSH
24142: LD_INT 0
24144: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24145: LD_ADDR_OWVAR 29
24149: PUSH
24150: LD_INT 12
24152: PUSH
24153: LD_INT 12
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: ST_TO_ADDR
// hc_agressivity := 20 ;
24160: LD_ADDR_OWVAR 35
24164: PUSH
24165: LD_INT 20
24167: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
24168: LD_ADDR_OWVAR 28
24172: PUSH
24173: LD_INT 17
24175: ST_TO_ADDR
// hc_gallery :=  ;
24176: LD_ADDR_OWVAR 33
24180: PUSH
24181: LD_STRING 
24183: ST_TO_ADDR
// hc_name :=  ;
24184: LD_ADDR_OWVAR 26
24188: PUSH
24189: LD_STRING 
24191: ST_TO_ADDR
// un := CreateHuman ;
24192: LD_ADDR_VAR 0 2
24196: PUSH
24197: CALL_OW 44
24201: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24202: LD_VAR 0 2
24206: PPUSH
24207: LD_INT 1
24209: PPUSH
24210: CALL_OW 51
// tmp := tmp ^ un ;
24214: LD_ADDR_VAR 0 3
24218: PUSH
24219: LD_VAR 0 3
24223: PUSH
24224: LD_VAR 0 2
24228: ADD
24229: ST_TO_ADDR
// end ;
24230: GO 24126
24232: POP
24233: POP
// repeat wait ( 0 0$1 ) ;
24234: LD_INT 35
24236: PPUSH
24237: CALL_OW 67
// for un in tmp do
24241: LD_ADDR_VAR 0 2
24245: PUSH
24246: LD_VAR 0 3
24250: PUSH
24251: FOR_IN
24252: IFFALSE 24326
// begin if IsDead ( un ) then
24254: LD_VAR 0 2
24258: PPUSH
24259: CALL_OW 301
24263: IFFALSE 24283
// begin tmp := tmp diff un ;
24265: LD_ADDR_VAR 0 3
24269: PUSH
24270: LD_VAR 0 3
24274: PUSH
24275: LD_VAR 0 2
24279: DIFF
24280: ST_TO_ADDR
// continue ;
24281: GO 24251
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24283: LD_VAR 0 2
24287: PPUSH
24288: LD_INT 3
24290: PUSH
24291: LD_INT 22
24293: PUSH
24294: LD_INT 0
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: PPUSH
24305: CALL_OW 69
24309: PPUSH
24310: LD_VAR 0 2
24314: PPUSH
24315: CALL_OW 74
24319: PPUSH
24320: CALL_OW 115
// end ;
24324: GO 24251
24326: POP
24327: POP
// until not tmp ;
24328: LD_VAR 0 3
24332: NOT
24333: IFFALSE 24234
// end ;
24335: PPOPN 3
24337: END
// every 0 0$1 trigger StreamModeActive and sTroll do
24338: LD_EXP 52
24342: PUSH
24343: LD_EXP 77
24347: AND
24348: IFFALSE 24402
24350: GO 24352
24352: DISABLE
// begin ToLua ( displayTroll(); ) ;
24353: LD_STRING displayTroll();
24355: PPUSH
24356: CALL_OW 559
// wait ( 3 3$00 ) ;
24360: LD_INT 6300
24362: PPUSH
24363: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24367: LD_STRING hideTroll();
24369: PPUSH
24370: CALL_OW 559
// wait ( 1 1$00 ) ;
24374: LD_INT 2100
24376: PPUSH
24377: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24381: LD_STRING displayTroll();
24383: PPUSH
24384: CALL_OW 559
// wait ( 1 1$00 ) ;
24388: LD_INT 2100
24390: PPUSH
24391: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24395: LD_STRING hideTroll();
24397: PPUSH
24398: CALL_OW 559
// end ;
24402: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24403: LD_EXP 52
24407: PUSH
24408: LD_EXP 78
24412: AND
24413: IFFALSE 24476
24415: GO 24417
24417: DISABLE
24418: LD_INT 0
24420: PPUSH
// begin p := 0 ;
24421: LD_ADDR_VAR 0 1
24425: PUSH
24426: LD_INT 0
24428: ST_TO_ADDR
// repeat game_speed := 1 ;
24429: LD_ADDR_OWVAR 65
24433: PUSH
24434: LD_INT 1
24436: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24437: LD_INT 35
24439: PPUSH
24440: CALL_OW 67
// p := p + 1 ;
24444: LD_ADDR_VAR 0 1
24448: PUSH
24449: LD_VAR 0 1
24453: PUSH
24454: LD_INT 1
24456: PLUS
24457: ST_TO_ADDR
// until p >= 60 ;
24458: LD_VAR 0 1
24462: PUSH
24463: LD_INT 60
24465: GREATEREQUAL
24466: IFFALSE 24429
// game_speed := 4 ;
24468: LD_ADDR_OWVAR 65
24472: PUSH
24473: LD_INT 4
24475: ST_TO_ADDR
// end ;
24476: PPOPN 1
24478: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24479: LD_EXP 52
24483: PUSH
24484: LD_EXP 79
24488: AND
24489: IFFALSE 24635
24491: GO 24493
24493: DISABLE
24494: LD_INT 0
24496: PPUSH
24497: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24498: LD_ADDR_VAR 0 1
24502: PUSH
24503: LD_INT 22
24505: PUSH
24506: LD_OWVAR 2
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PUSH
24515: LD_INT 2
24517: PUSH
24518: LD_INT 30
24520: PUSH
24521: LD_INT 0
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 30
24530: PUSH
24531: LD_INT 1
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: LIST
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PPUSH
24547: CALL_OW 69
24551: ST_TO_ADDR
// if not depot then
24552: LD_VAR 0 1
24556: NOT
24557: IFFALSE 24561
// exit ;
24559: GO 24635
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24561: LD_ADDR_VAR 0 2
24565: PUSH
24566: LD_VAR 0 1
24570: PUSH
24571: LD_INT 1
24573: PPUSH
24574: LD_VAR 0 1
24578: PPUSH
24579: CALL_OW 12
24583: ARRAY
24584: PPUSH
24585: CALL_OW 274
24589: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24590: LD_VAR 0 2
24594: PPUSH
24595: LD_INT 1
24597: PPUSH
24598: LD_INT 0
24600: PPUSH
24601: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24605: LD_VAR 0 2
24609: PPUSH
24610: LD_INT 2
24612: PPUSH
24613: LD_INT 0
24615: PPUSH
24616: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24620: LD_VAR 0 2
24624: PPUSH
24625: LD_INT 3
24627: PPUSH
24628: LD_INT 0
24630: PPUSH
24631: CALL_OW 277
// end ;
24635: PPOPN 2
24637: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24638: LD_EXP 52
24642: PUSH
24643: LD_EXP 80
24647: AND
24648: IFFALSE 24745
24650: GO 24652
24652: DISABLE
24653: LD_INT 0
24655: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24656: LD_ADDR_VAR 0 1
24660: PUSH
24661: LD_INT 22
24663: PUSH
24664: LD_OWVAR 2
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 21
24675: PUSH
24676: LD_INT 1
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: LD_INT 3
24685: PUSH
24686: LD_INT 23
24688: PUSH
24689: LD_INT 0
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: LIST
24704: PPUSH
24705: CALL_OW 69
24709: ST_TO_ADDR
// if not tmp then
24710: LD_VAR 0 1
24714: NOT
24715: IFFALSE 24719
// exit ;
24717: GO 24745
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24719: LD_VAR 0 1
24723: PUSH
24724: LD_INT 1
24726: PPUSH
24727: LD_VAR 0 1
24731: PPUSH
24732: CALL_OW 12
24736: ARRAY
24737: PPUSH
24738: LD_INT 200
24740: PPUSH
24741: CALL_OW 234
// end ;
24745: PPOPN 1
24747: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24748: LD_EXP 52
24752: PUSH
24753: LD_EXP 81
24757: AND
24758: IFFALSE 24837
24760: GO 24762
24762: DISABLE
24763: LD_INT 0
24765: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24766: LD_ADDR_VAR 0 1
24770: PUSH
24771: LD_INT 22
24773: PUSH
24774: LD_OWVAR 2
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 21
24785: PUSH
24786: LD_INT 2
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PPUSH
24797: CALL_OW 69
24801: ST_TO_ADDR
// if not tmp then
24802: LD_VAR 0 1
24806: NOT
24807: IFFALSE 24811
// exit ;
24809: GO 24837
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24811: LD_VAR 0 1
24815: PUSH
24816: LD_INT 1
24818: PPUSH
24819: LD_VAR 0 1
24823: PPUSH
24824: CALL_OW 12
24828: ARRAY
24829: PPUSH
24830: LD_INT 60
24832: PPUSH
24833: CALL_OW 234
// end ;
24837: PPOPN 1
24839: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24840: LD_EXP 52
24844: PUSH
24845: LD_EXP 82
24849: AND
24850: IFFALSE 24949
24852: GO 24854
24854: DISABLE
24855: LD_INT 0
24857: PPUSH
24858: PPUSH
// begin enable ;
24859: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24860: LD_ADDR_VAR 0 1
24864: PUSH
24865: LD_INT 22
24867: PUSH
24868: LD_OWVAR 2
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 61
24879: PUSH
24880: EMPTY
24881: LIST
24882: PUSH
24883: LD_INT 33
24885: PUSH
24886: LD_INT 2
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: LIST
24897: PPUSH
24898: CALL_OW 69
24902: ST_TO_ADDR
// if not tmp then
24903: LD_VAR 0 1
24907: NOT
24908: IFFALSE 24912
// exit ;
24910: GO 24949
// for i in tmp do
24912: LD_ADDR_VAR 0 2
24916: PUSH
24917: LD_VAR 0 1
24921: PUSH
24922: FOR_IN
24923: IFFALSE 24947
// if IsControledBy ( i ) then
24925: LD_VAR 0 2
24929: PPUSH
24930: CALL_OW 312
24934: IFFALSE 24945
// ComUnlink ( i ) ;
24936: LD_VAR 0 2
24940: PPUSH
24941: CALL_OW 136
24945: GO 24922
24947: POP
24948: POP
// end ;
24949: PPOPN 2
24951: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24952: LD_EXP 52
24956: PUSH
24957: LD_EXP 83
24961: AND
24962: IFFALSE 25102
24964: GO 24966
24966: DISABLE
24967: LD_INT 0
24969: PPUSH
24970: PPUSH
// begin ToLua ( displayPowell(); ) ;
24971: LD_STRING displayPowell();
24973: PPUSH
24974: CALL_OW 559
// uc_side := 0 ;
24978: LD_ADDR_OWVAR 20
24982: PUSH
24983: LD_INT 0
24985: ST_TO_ADDR
// uc_nation := 2 ;
24986: LD_ADDR_OWVAR 21
24990: PUSH
24991: LD_INT 2
24993: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24994: LD_ADDR_OWVAR 37
24998: PUSH
24999: LD_INT 14
25001: ST_TO_ADDR
// vc_engine := engine_siberite ;
25002: LD_ADDR_OWVAR 39
25006: PUSH
25007: LD_INT 3
25009: ST_TO_ADDR
// vc_control := control_apeman ;
25010: LD_ADDR_OWVAR 38
25014: PUSH
25015: LD_INT 5
25017: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25018: LD_ADDR_OWVAR 40
25022: PUSH
25023: LD_INT 29
25025: ST_TO_ADDR
// un := CreateVehicle ;
25026: LD_ADDR_VAR 0 2
25030: PUSH
25031: CALL_OW 45
25035: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25036: LD_VAR 0 2
25040: PPUSH
25041: LD_INT 1
25043: PPUSH
25044: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25048: LD_INT 35
25050: PPUSH
25051: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25055: LD_VAR 0 2
25059: PPUSH
25060: LD_INT 22
25062: PUSH
25063: LD_OWVAR 2
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PPUSH
25072: CALL_OW 69
25076: PPUSH
25077: LD_VAR 0 2
25081: PPUSH
25082: CALL_OW 74
25086: PPUSH
25087: CALL_OW 115
// until IsDead ( un ) ;
25091: LD_VAR 0 2
25095: PPUSH
25096: CALL_OW 301
25100: IFFALSE 25048
// end ;
25102: PPOPN 2
25104: END
// every 0 0$1 trigger StreamModeActive and sStu do
25105: LD_EXP 52
25109: PUSH
25110: LD_EXP 91
25114: AND
25115: IFFALSE 25131
25117: GO 25119
25119: DISABLE
// begin ToLua ( displayStucuk(); ) ;
25120: LD_STRING displayStucuk();
25122: PPUSH
25123: CALL_OW 559
// ResetFog ;
25127: CALL_OW 335
// end ;
25131: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
25132: LD_EXP 52
25136: PUSH
25137: LD_EXP 84
25141: AND
25142: IFFALSE 25283
25144: GO 25146
25146: DISABLE
25147: LD_INT 0
25149: PPUSH
25150: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25151: LD_ADDR_VAR 0 2
25155: PUSH
25156: LD_INT 22
25158: PUSH
25159: LD_OWVAR 2
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 21
25170: PUSH
25171: LD_INT 1
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: PPUSH
25182: CALL_OW 69
25186: ST_TO_ADDR
// if not tmp then
25187: LD_VAR 0 2
25191: NOT
25192: IFFALSE 25196
// exit ;
25194: GO 25283
// un := tmp [ rand ( 1 , tmp ) ] ;
25196: LD_ADDR_VAR 0 1
25200: PUSH
25201: LD_VAR 0 2
25205: PUSH
25206: LD_INT 1
25208: PPUSH
25209: LD_VAR 0 2
25213: PPUSH
25214: CALL_OW 12
25218: ARRAY
25219: ST_TO_ADDR
// SetSide ( un , 0 ) ;
25220: LD_VAR 0 1
25224: PPUSH
25225: LD_INT 0
25227: PPUSH
25228: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
25232: LD_VAR 0 1
25236: PPUSH
25237: LD_OWVAR 3
25241: PUSH
25242: LD_VAR 0 1
25246: DIFF
25247: PPUSH
25248: LD_VAR 0 1
25252: PPUSH
25253: CALL_OW 74
25257: PPUSH
25258: CALL_OW 115
// wait ( 0 0$20 ) ;
25262: LD_INT 700
25264: PPUSH
25265: CALL_OW 67
// SetSide ( un , your_side ) ;
25269: LD_VAR 0 1
25273: PPUSH
25274: LD_OWVAR 2
25278: PPUSH
25279: CALL_OW 235
// end ;
25283: PPOPN 2
25285: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25286: LD_EXP 52
25290: PUSH
25291: LD_EXP 85
25295: AND
25296: IFFALSE 25402
25298: GO 25300
25300: DISABLE
25301: LD_INT 0
25303: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25304: LD_ADDR_VAR 0 1
25308: PUSH
25309: LD_INT 22
25311: PUSH
25312: LD_OWVAR 2
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 2
25323: PUSH
25324: LD_INT 30
25326: PUSH
25327: LD_INT 0
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 30
25336: PUSH
25337: LD_INT 1
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: LIST
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PPUSH
25353: CALL_OW 69
25357: ST_TO_ADDR
// if not depot then
25358: LD_VAR 0 1
25362: NOT
25363: IFFALSE 25367
// exit ;
25365: GO 25402
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25367: LD_VAR 0 1
25371: PUSH
25372: LD_INT 1
25374: ARRAY
25375: PPUSH
25376: CALL_OW 250
25380: PPUSH
25381: LD_VAR 0 1
25385: PUSH
25386: LD_INT 1
25388: ARRAY
25389: PPUSH
25390: CALL_OW 251
25394: PPUSH
25395: LD_INT 70
25397: PPUSH
25398: CALL_OW 495
// end ;
25402: PPOPN 1
25404: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25405: LD_EXP 52
25409: PUSH
25410: LD_EXP 86
25414: AND
25415: IFFALSE 25626
25417: GO 25419
25419: DISABLE
25420: LD_INT 0
25422: PPUSH
25423: PPUSH
25424: PPUSH
25425: PPUSH
25426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25427: LD_ADDR_VAR 0 5
25431: PUSH
25432: LD_INT 22
25434: PUSH
25435: LD_OWVAR 2
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 21
25446: PUSH
25447: LD_INT 1
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PPUSH
25458: CALL_OW 69
25462: ST_TO_ADDR
// if not tmp then
25463: LD_VAR 0 5
25467: NOT
25468: IFFALSE 25472
// exit ;
25470: GO 25626
// for i in tmp do
25472: LD_ADDR_VAR 0 1
25476: PUSH
25477: LD_VAR 0 5
25481: PUSH
25482: FOR_IN
25483: IFFALSE 25624
// begin d := rand ( 0 , 5 ) ;
25485: LD_ADDR_VAR 0 4
25489: PUSH
25490: LD_INT 0
25492: PPUSH
25493: LD_INT 5
25495: PPUSH
25496: CALL_OW 12
25500: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25501: LD_ADDR_VAR 0 2
25505: PUSH
25506: LD_VAR 0 1
25510: PPUSH
25511: CALL_OW 250
25515: PPUSH
25516: LD_VAR 0 4
25520: PPUSH
25521: LD_INT 3
25523: PPUSH
25524: LD_INT 12
25526: PPUSH
25527: CALL_OW 12
25531: PPUSH
25532: CALL_OW 272
25536: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25537: LD_ADDR_VAR 0 3
25541: PUSH
25542: LD_VAR 0 1
25546: PPUSH
25547: CALL_OW 251
25551: PPUSH
25552: LD_VAR 0 4
25556: PPUSH
25557: LD_INT 3
25559: PPUSH
25560: LD_INT 12
25562: PPUSH
25563: CALL_OW 12
25567: PPUSH
25568: CALL_OW 273
25572: ST_TO_ADDR
// if ValidHex ( x , y ) then
25573: LD_VAR 0 2
25577: PPUSH
25578: LD_VAR 0 3
25582: PPUSH
25583: CALL_OW 488
25587: IFFALSE 25622
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25589: LD_VAR 0 1
25593: PPUSH
25594: LD_VAR 0 2
25598: PPUSH
25599: LD_VAR 0 3
25603: PPUSH
25604: LD_INT 3
25606: PPUSH
25607: LD_INT 6
25609: PPUSH
25610: CALL_OW 12
25614: PPUSH
25615: LD_INT 1
25617: PPUSH
25618: CALL_OW 483
// end ;
25622: GO 25482
25624: POP
25625: POP
// end ;
25626: PPOPN 5
25628: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25629: LD_EXP 52
25633: PUSH
25634: LD_EXP 87
25638: AND
25639: IFFALSE 25733
25641: GO 25643
25643: DISABLE
25644: LD_INT 0
25646: PPUSH
25647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25648: LD_ADDR_VAR 0 2
25652: PUSH
25653: LD_INT 22
25655: PUSH
25656: LD_OWVAR 2
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 32
25667: PUSH
25668: LD_INT 1
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 21
25677: PUSH
25678: LD_INT 2
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: LIST
25689: PPUSH
25690: CALL_OW 69
25694: ST_TO_ADDR
// if not tmp then
25695: LD_VAR 0 2
25699: NOT
25700: IFFALSE 25704
// exit ;
25702: GO 25733
// for i in tmp do
25704: LD_ADDR_VAR 0 1
25708: PUSH
25709: LD_VAR 0 2
25713: PUSH
25714: FOR_IN
25715: IFFALSE 25731
// SetFuel ( i , 0 ) ;
25717: LD_VAR 0 1
25721: PPUSH
25722: LD_INT 0
25724: PPUSH
25725: CALL_OW 240
25729: GO 25714
25731: POP
25732: POP
// end ;
25733: PPOPN 2
25735: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25736: LD_EXP 52
25740: PUSH
25741: LD_EXP 88
25745: AND
25746: IFFALSE 25812
25748: GO 25750
25750: DISABLE
25751: LD_INT 0
25753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25754: LD_ADDR_VAR 0 1
25758: PUSH
25759: LD_INT 22
25761: PUSH
25762: LD_OWVAR 2
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 30
25773: PUSH
25774: LD_INT 29
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PPUSH
25785: CALL_OW 69
25789: ST_TO_ADDR
// if not tmp then
25790: LD_VAR 0 1
25794: NOT
25795: IFFALSE 25799
// exit ;
25797: GO 25812
// DestroyUnit ( tmp [ 1 ] ) ;
25799: LD_VAR 0 1
25803: PUSH
25804: LD_INT 1
25806: ARRAY
25807: PPUSH
25808: CALL_OW 65
// end ;
25812: PPOPN 1
25814: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25815: LD_EXP 52
25819: PUSH
25820: LD_EXP 90
25824: AND
25825: IFFALSE 25954
25827: GO 25829
25829: DISABLE
25830: LD_INT 0
25832: PPUSH
// begin uc_side := 0 ;
25833: LD_ADDR_OWVAR 20
25837: PUSH
25838: LD_INT 0
25840: ST_TO_ADDR
// uc_nation := nation_arabian ;
25841: LD_ADDR_OWVAR 21
25845: PUSH
25846: LD_INT 2
25848: ST_TO_ADDR
// hc_gallery :=  ;
25849: LD_ADDR_OWVAR 33
25853: PUSH
25854: LD_STRING 
25856: ST_TO_ADDR
// hc_name :=  ;
25857: LD_ADDR_OWVAR 26
25861: PUSH
25862: LD_STRING 
25864: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25865: LD_INT 1
25867: PPUSH
25868: LD_INT 11
25870: PPUSH
25871: LD_INT 10
25873: PPUSH
25874: CALL_OW 380
// un := CreateHuman ;
25878: LD_ADDR_VAR 0 1
25882: PUSH
25883: CALL_OW 44
25887: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25888: LD_VAR 0 1
25892: PPUSH
25893: LD_INT 1
25895: PPUSH
25896: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25900: LD_INT 35
25902: PPUSH
25903: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25907: LD_VAR 0 1
25911: PPUSH
25912: LD_INT 22
25914: PUSH
25915: LD_OWVAR 2
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PPUSH
25924: CALL_OW 69
25928: PPUSH
25929: LD_VAR 0 1
25933: PPUSH
25934: CALL_OW 74
25938: PPUSH
25939: CALL_OW 115
// until IsDead ( un ) ;
25943: LD_VAR 0 1
25947: PPUSH
25948: CALL_OW 301
25952: IFFALSE 25900
// end ;
25954: PPOPN 1
25956: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25957: LD_EXP 52
25961: PUSH
25962: LD_EXP 92
25966: AND
25967: IFFALSE 25979
25969: GO 25971
25971: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25972: LD_STRING earthquake(getX(game), 0, 32)
25974: PPUSH
25975: CALL_OW 559
25979: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25980: LD_EXP 52
25984: PUSH
25985: LD_EXP 93
25989: AND
25990: IFFALSE 26081
25992: GO 25994
25994: DISABLE
25995: LD_INT 0
25997: PPUSH
// begin enable ;
25998: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25999: LD_ADDR_VAR 0 1
26003: PUSH
26004: LD_INT 22
26006: PUSH
26007: LD_OWVAR 2
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 21
26018: PUSH
26019: LD_INT 2
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 33
26028: PUSH
26029: LD_INT 3
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: LIST
26040: PPUSH
26041: CALL_OW 69
26045: ST_TO_ADDR
// if not tmp then
26046: LD_VAR 0 1
26050: NOT
26051: IFFALSE 26055
// exit ;
26053: GO 26081
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26055: LD_VAR 0 1
26059: PUSH
26060: LD_INT 1
26062: PPUSH
26063: LD_VAR 0 1
26067: PPUSH
26068: CALL_OW 12
26072: ARRAY
26073: PPUSH
26074: LD_INT 1
26076: PPUSH
26077: CALL_OW 234
// end ;
26081: PPOPN 1
26083: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
26084: LD_EXP 52
26088: PUSH
26089: LD_EXP 94
26093: AND
26094: IFFALSE 26235
26096: GO 26098
26098: DISABLE
26099: LD_INT 0
26101: PPUSH
26102: PPUSH
26103: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26104: LD_ADDR_VAR 0 3
26108: PUSH
26109: LD_INT 22
26111: PUSH
26112: LD_OWVAR 2
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 25
26123: PUSH
26124: LD_INT 1
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PPUSH
26135: CALL_OW 69
26139: ST_TO_ADDR
// if not tmp then
26140: LD_VAR 0 3
26144: NOT
26145: IFFALSE 26149
// exit ;
26147: GO 26235
// un := tmp [ rand ( 1 , tmp ) ] ;
26149: LD_ADDR_VAR 0 2
26153: PUSH
26154: LD_VAR 0 3
26158: PUSH
26159: LD_INT 1
26161: PPUSH
26162: LD_VAR 0 3
26166: PPUSH
26167: CALL_OW 12
26171: ARRAY
26172: ST_TO_ADDR
// if Crawls ( un ) then
26173: LD_VAR 0 2
26177: PPUSH
26178: CALL_OW 318
26182: IFFALSE 26193
// ComWalk ( un ) ;
26184: LD_VAR 0 2
26188: PPUSH
26189: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26193: LD_VAR 0 2
26197: PPUSH
26198: LD_INT 9
26200: PPUSH
26201: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
26205: LD_INT 28
26207: PPUSH
26208: LD_OWVAR 2
26212: PPUSH
26213: LD_INT 2
26215: PPUSH
26216: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
26220: LD_INT 29
26222: PPUSH
26223: LD_OWVAR 2
26227: PPUSH
26228: LD_INT 2
26230: PPUSH
26231: CALL_OW 322
// end ;
26235: PPOPN 3
26237: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
26238: LD_EXP 52
26242: PUSH
26243: LD_EXP 95
26247: AND
26248: IFFALSE 26359
26250: GO 26252
26252: DISABLE
26253: LD_INT 0
26255: PPUSH
26256: PPUSH
26257: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26258: LD_ADDR_VAR 0 3
26262: PUSH
26263: LD_INT 22
26265: PUSH
26266: LD_OWVAR 2
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: LD_INT 25
26277: PUSH
26278: LD_INT 1
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PPUSH
26289: CALL_OW 69
26293: ST_TO_ADDR
// if not tmp then
26294: LD_VAR 0 3
26298: NOT
26299: IFFALSE 26303
// exit ;
26301: GO 26359
// un := tmp [ rand ( 1 , tmp ) ] ;
26303: LD_ADDR_VAR 0 2
26307: PUSH
26308: LD_VAR 0 3
26312: PUSH
26313: LD_INT 1
26315: PPUSH
26316: LD_VAR 0 3
26320: PPUSH
26321: CALL_OW 12
26325: ARRAY
26326: ST_TO_ADDR
// if Crawls ( un ) then
26327: LD_VAR 0 2
26331: PPUSH
26332: CALL_OW 318
26336: IFFALSE 26347
// ComWalk ( un ) ;
26338: LD_VAR 0 2
26342: PPUSH
26343: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26347: LD_VAR 0 2
26351: PPUSH
26352: LD_INT 8
26354: PPUSH
26355: CALL_OW 336
// end ;
26359: PPOPN 3
26361: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26362: LD_EXP 52
26366: PUSH
26367: LD_EXP 96
26371: AND
26372: IFFALSE 26516
26374: GO 26376
26376: DISABLE
26377: LD_INT 0
26379: PPUSH
26380: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26381: LD_ADDR_VAR 0 2
26385: PUSH
26386: LD_INT 22
26388: PUSH
26389: LD_OWVAR 2
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: LD_INT 21
26400: PUSH
26401: LD_INT 2
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PUSH
26408: LD_INT 2
26410: PUSH
26411: LD_INT 34
26413: PUSH
26414: LD_INT 12
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 34
26423: PUSH
26424: LD_INT 51
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: LD_INT 34
26433: PUSH
26434: LD_INT 32
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: LIST
26451: PPUSH
26452: CALL_OW 69
26456: ST_TO_ADDR
// if not tmp then
26457: LD_VAR 0 2
26461: NOT
26462: IFFALSE 26466
// exit ;
26464: GO 26516
// for i in tmp do
26466: LD_ADDR_VAR 0 1
26470: PUSH
26471: LD_VAR 0 2
26475: PUSH
26476: FOR_IN
26477: IFFALSE 26514
// if GetCargo ( i , mat_artifact ) = 0 then
26479: LD_VAR 0 1
26483: PPUSH
26484: LD_INT 4
26486: PPUSH
26487: CALL_OW 289
26491: PUSH
26492: LD_INT 0
26494: EQUAL
26495: IFFALSE 26512
// SetCargo ( i , mat_siberit , 100 ) ;
26497: LD_VAR 0 1
26501: PPUSH
26502: LD_INT 3
26504: PPUSH
26505: LD_INT 100
26507: PPUSH
26508: CALL_OW 290
26512: GO 26476
26514: POP
26515: POP
// end ;
26516: PPOPN 2
26518: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26519: LD_EXP 52
26523: PUSH
26524: LD_EXP 97
26528: AND
26529: IFFALSE 26712
26531: GO 26533
26533: DISABLE
26534: LD_INT 0
26536: PPUSH
26537: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26538: LD_ADDR_VAR 0 2
26542: PUSH
26543: LD_INT 22
26545: PUSH
26546: LD_OWVAR 2
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PPUSH
26555: CALL_OW 69
26559: ST_TO_ADDR
// if not tmp then
26560: LD_VAR 0 2
26564: NOT
26565: IFFALSE 26569
// exit ;
26567: GO 26712
// for i := 1 to 2 do
26569: LD_ADDR_VAR 0 1
26573: PUSH
26574: DOUBLE
26575: LD_INT 1
26577: DEC
26578: ST_TO_ADDR
26579: LD_INT 2
26581: PUSH
26582: FOR_TO
26583: IFFALSE 26710
// begin uc_side := your_side ;
26585: LD_ADDR_OWVAR 20
26589: PUSH
26590: LD_OWVAR 2
26594: ST_TO_ADDR
// uc_nation := nation_american ;
26595: LD_ADDR_OWVAR 21
26599: PUSH
26600: LD_INT 1
26602: ST_TO_ADDR
// vc_chassis := us_morphling ;
26603: LD_ADDR_OWVAR 37
26607: PUSH
26608: LD_INT 5
26610: ST_TO_ADDR
// vc_engine := engine_siberite ;
26611: LD_ADDR_OWVAR 39
26615: PUSH
26616: LD_INT 3
26618: ST_TO_ADDR
// vc_control := control_computer ;
26619: LD_ADDR_OWVAR 38
26623: PUSH
26624: LD_INT 3
26626: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26627: LD_ADDR_OWVAR 40
26631: PUSH
26632: LD_INT 10
26634: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26635: LD_VAR 0 2
26639: PUSH
26640: LD_INT 1
26642: ARRAY
26643: PPUSH
26644: CALL_OW 310
26648: NOT
26649: IFFALSE 26696
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26651: CALL_OW 45
26655: PPUSH
26656: LD_VAR 0 2
26660: PUSH
26661: LD_INT 1
26663: ARRAY
26664: PPUSH
26665: CALL_OW 250
26669: PPUSH
26670: LD_VAR 0 2
26674: PUSH
26675: LD_INT 1
26677: ARRAY
26678: PPUSH
26679: CALL_OW 251
26683: PPUSH
26684: LD_INT 12
26686: PPUSH
26687: LD_INT 1
26689: PPUSH
26690: CALL_OW 50
26694: GO 26708
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26696: CALL_OW 45
26700: PPUSH
26701: LD_INT 1
26703: PPUSH
26704: CALL_OW 51
// end ;
26708: GO 26582
26710: POP
26711: POP
// end ;
26712: PPOPN 2
26714: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26715: LD_EXP 52
26719: PUSH
26720: LD_EXP 98
26724: AND
26725: IFFALSE 26947
26727: GO 26729
26729: DISABLE
26730: LD_INT 0
26732: PPUSH
26733: PPUSH
26734: PPUSH
26735: PPUSH
26736: PPUSH
26737: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26738: LD_ADDR_VAR 0 6
26742: PUSH
26743: LD_INT 22
26745: PUSH
26746: LD_OWVAR 2
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: LD_INT 21
26757: PUSH
26758: LD_INT 1
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 3
26767: PUSH
26768: LD_INT 23
26770: PUSH
26771: LD_INT 0
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: LIST
26786: PPUSH
26787: CALL_OW 69
26791: ST_TO_ADDR
// if not tmp then
26792: LD_VAR 0 6
26796: NOT
26797: IFFALSE 26801
// exit ;
26799: GO 26947
// s1 := rand ( 1 , 4 ) ;
26801: LD_ADDR_VAR 0 2
26805: PUSH
26806: LD_INT 1
26808: PPUSH
26809: LD_INT 4
26811: PPUSH
26812: CALL_OW 12
26816: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26817: LD_ADDR_VAR 0 4
26821: PUSH
26822: LD_VAR 0 6
26826: PUSH
26827: LD_INT 1
26829: ARRAY
26830: PPUSH
26831: LD_VAR 0 2
26835: PPUSH
26836: CALL_OW 259
26840: ST_TO_ADDR
// if s1 = 1 then
26841: LD_VAR 0 2
26845: PUSH
26846: LD_INT 1
26848: EQUAL
26849: IFFALSE 26869
// s2 := rand ( 2 , 4 ) else
26851: LD_ADDR_VAR 0 3
26855: PUSH
26856: LD_INT 2
26858: PPUSH
26859: LD_INT 4
26861: PPUSH
26862: CALL_OW 12
26866: ST_TO_ADDR
26867: GO 26877
// s2 := 1 ;
26869: LD_ADDR_VAR 0 3
26873: PUSH
26874: LD_INT 1
26876: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26877: LD_ADDR_VAR 0 5
26881: PUSH
26882: LD_VAR 0 6
26886: PUSH
26887: LD_INT 1
26889: ARRAY
26890: PPUSH
26891: LD_VAR 0 3
26895: PPUSH
26896: CALL_OW 259
26900: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26901: LD_VAR 0 6
26905: PUSH
26906: LD_INT 1
26908: ARRAY
26909: PPUSH
26910: LD_VAR 0 2
26914: PPUSH
26915: LD_VAR 0 5
26919: PPUSH
26920: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26924: LD_VAR 0 6
26928: PUSH
26929: LD_INT 1
26931: ARRAY
26932: PPUSH
26933: LD_VAR 0 3
26937: PPUSH
26938: LD_VAR 0 4
26942: PPUSH
26943: CALL_OW 237
// end ;
26947: PPOPN 6
26949: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26950: LD_EXP 52
26954: PUSH
26955: LD_EXP 99
26959: AND
26960: IFFALSE 27039
26962: GO 26964
26964: DISABLE
26965: LD_INT 0
26967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26968: LD_ADDR_VAR 0 1
26972: PUSH
26973: LD_INT 22
26975: PUSH
26976: LD_OWVAR 2
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 30
26987: PUSH
26988: LD_INT 3
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PPUSH
26999: CALL_OW 69
27003: ST_TO_ADDR
// if not tmp then
27004: LD_VAR 0 1
27008: NOT
27009: IFFALSE 27013
// exit ;
27011: GO 27039
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27013: LD_VAR 0 1
27017: PUSH
27018: LD_INT 1
27020: PPUSH
27021: LD_VAR 0 1
27025: PPUSH
27026: CALL_OW 12
27030: ARRAY
27031: PPUSH
27032: LD_INT 1
27034: PPUSH
27035: CALL_OW 234
// end ;
27039: PPOPN 1
27041: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27042: LD_EXP 52
27046: PUSH
27047: LD_EXP 100
27051: AND
27052: IFFALSE 27164
27054: GO 27056
27056: DISABLE
27057: LD_INT 0
27059: PPUSH
27060: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27061: LD_ADDR_VAR 0 2
27065: PUSH
27066: LD_INT 22
27068: PUSH
27069: LD_OWVAR 2
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 2
27080: PUSH
27081: LD_INT 30
27083: PUSH
27084: LD_INT 27
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 30
27093: PUSH
27094: LD_INT 26
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 30
27103: PUSH
27104: LD_INT 28
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PPUSH
27121: CALL_OW 69
27125: ST_TO_ADDR
// if not tmp then
27126: LD_VAR 0 2
27130: NOT
27131: IFFALSE 27135
// exit ;
27133: GO 27164
// for i in tmp do
27135: LD_ADDR_VAR 0 1
27139: PUSH
27140: LD_VAR 0 2
27144: PUSH
27145: FOR_IN
27146: IFFALSE 27162
// SetLives ( i , 1 ) ;
27148: LD_VAR 0 1
27152: PPUSH
27153: LD_INT 1
27155: PPUSH
27156: CALL_OW 234
27160: GO 27145
27162: POP
27163: POP
// end ;
27164: PPOPN 2
27166: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
27167: LD_EXP 52
27171: PUSH
27172: LD_EXP 101
27176: AND
27177: IFFALSE 27451
27179: GO 27181
27181: DISABLE
27182: LD_INT 0
27184: PPUSH
27185: PPUSH
27186: PPUSH
// begin i := rand ( 1 , 7 ) ;
27187: LD_ADDR_VAR 0 1
27191: PUSH
27192: LD_INT 1
27194: PPUSH
27195: LD_INT 7
27197: PPUSH
27198: CALL_OW 12
27202: ST_TO_ADDR
// case i of 1 :
27203: LD_VAR 0 1
27207: PUSH
27208: LD_INT 1
27210: DOUBLE
27211: EQUAL
27212: IFTRUE 27216
27214: GO 27226
27216: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
27217: LD_STRING earthquake(getX(game), 0, 32)
27219: PPUSH
27220: CALL_OW 559
27224: GO 27451
27226: LD_INT 2
27228: DOUBLE
27229: EQUAL
27230: IFTRUE 27234
27232: GO 27248
27234: POP
// begin ToLua ( displayStucuk(); ) ;
27235: LD_STRING displayStucuk();
27237: PPUSH
27238: CALL_OW 559
// ResetFog ;
27242: CALL_OW 335
// end ; 3 :
27246: GO 27451
27248: LD_INT 3
27250: DOUBLE
27251: EQUAL
27252: IFTRUE 27256
27254: GO 27360
27256: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27257: LD_ADDR_VAR 0 2
27261: PUSH
27262: LD_INT 22
27264: PUSH
27265: LD_OWVAR 2
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 25
27276: PUSH
27277: LD_INT 1
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PPUSH
27288: CALL_OW 69
27292: ST_TO_ADDR
// if not tmp then
27293: LD_VAR 0 2
27297: NOT
27298: IFFALSE 27302
// exit ;
27300: GO 27451
// un := tmp [ rand ( 1 , tmp ) ] ;
27302: LD_ADDR_VAR 0 3
27306: PUSH
27307: LD_VAR 0 2
27311: PUSH
27312: LD_INT 1
27314: PPUSH
27315: LD_VAR 0 2
27319: PPUSH
27320: CALL_OW 12
27324: ARRAY
27325: ST_TO_ADDR
// if Crawls ( un ) then
27326: LD_VAR 0 3
27330: PPUSH
27331: CALL_OW 318
27335: IFFALSE 27346
// ComWalk ( un ) ;
27337: LD_VAR 0 3
27341: PPUSH
27342: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27346: LD_VAR 0 3
27350: PPUSH
27351: LD_INT 8
27353: PPUSH
27354: CALL_OW 336
// end ; 4 :
27358: GO 27451
27360: LD_INT 4
27362: DOUBLE
27363: EQUAL
27364: IFTRUE 27368
27366: GO 27429
27368: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27369: LD_ADDR_VAR 0 2
27373: PUSH
27374: LD_INT 22
27376: PUSH
27377: LD_OWVAR 2
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 30
27388: PUSH
27389: LD_INT 29
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PPUSH
27400: CALL_OW 69
27404: ST_TO_ADDR
// if not tmp then
27405: LD_VAR 0 2
27409: NOT
27410: IFFALSE 27414
// exit ;
27412: GO 27451
// DestroyUnit ( tmp [ 1 ] ) ;
27414: LD_VAR 0 2
27418: PUSH
27419: LD_INT 1
27421: ARRAY
27422: PPUSH
27423: CALL_OW 65
// end ; 5 .. 7 :
27427: GO 27451
27429: LD_INT 5
27431: DOUBLE
27432: GREATEREQUAL
27433: IFFALSE 27441
27435: LD_INT 7
27437: DOUBLE
27438: LESSEQUAL
27439: IFTRUE 27443
27441: GO 27450
27443: POP
// StreamSibBomb ; end ;
27444: CALL 23701 0 0
27448: GO 27451
27450: POP
// end ;
27451: PPOPN 3
27453: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27454: LD_EXP 52
27458: PUSH
27459: LD_EXP 102
27463: AND
27464: IFFALSE 27620
27466: GO 27468
27468: DISABLE
27469: LD_INT 0
27471: PPUSH
27472: PPUSH
27473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27474: LD_ADDR_VAR 0 2
27478: PUSH
27479: LD_INT 81
27481: PUSH
27482: LD_OWVAR 2
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: PUSH
27491: LD_INT 2
27493: PUSH
27494: LD_INT 21
27496: PUSH
27497: LD_INT 1
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 21
27506: PUSH
27507: LD_INT 2
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: LIST
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PPUSH
27523: CALL_OW 69
27527: ST_TO_ADDR
// if not tmp then
27528: LD_VAR 0 2
27532: NOT
27533: IFFALSE 27537
// exit ;
27535: GO 27620
// p := 0 ;
27537: LD_ADDR_VAR 0 3
27541: PUSH
27542: LD_INT 0
27544: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27545: LD_INT 35
27547: PPUSH
27548: CALL_OW 67
// p := p + 1 ;
27552: LD_ADDR_VAR 0 3
27556: PUSH
27557: LD_VAR 0 3
27561: PUSH
27562: LD_INT 1
27564: PLUS
27565: ST_TO_ADDR
// for i in tmp do
27566: LD_ADDR_VAR 0 1
27570: PUSH
27571: LD_VAR 0 2
27575: PUSH
27576: FOR_IN
27577: IFFALSE 27608
// if GetLives ( i ) < 1000 then
27579: LD_VAR 0 1
27583: PPUSH
27584: CALL_OW 256
27588: PUSH
27589: LD_INT 1000
27591: LESS
27592: IFFALSE 27606
// SetLives ( i , 1000 ) ;
27594: LD_VAR 0 1
27598: PPUSH
27599: LD_INT 1000
27601: PPUSH
27602: CALL_OW 234
27606: GO 27576
27608: POP
27609: POP
// until p > 20 ;
27610: LD_VAR 0 3
27614: PUSH
27615: LD_INT 20
27617: GREATER
27618: IFFALSE 27545
// end ;
27620: PPOPN 3
27622: END
// every 0 0$1 trigger StreamModeActive and sTime do
27623: LD_EXP 52
27627: PUSH
27628: LD_EXP 103
27632: AND
27633: IFFALSE 27668
27635: GO 27637
27637: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27638: LD_INT 28
27640: PPUSH
27641: LD_OWVAR 2
27645: PPUSH
27646: LD_INT 2
27648: PPUSH
27649: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27653: LD_INT 30
27655: PPUSH
27656: LD_OWVAR 2
27660: PPUSH
27661: LD_INT 2
27663: PPUSH
27664: CALL_OW 322
// end ;
27668: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27669: LD_EXP 52
27673: PUSH
27674: LD_EXP 104
27678: AND
27679: IFFALSE 27800
27681: GO 27683
27683: DISABLE
27684: LD_INT 0
27686: PPUSH
27687: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27688: LD_ADDR_VAR 0 2
27692: PUSH
27693: LD_INT 22
27695: PUSH
27696: LD_OWVAR 2
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 21
27707: PUSH
27708: LD_INT 1
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: LD_INT 3
27717: PUSH
27718: LD_INT 23
27720: PUSH
27721: LD_INT 0
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: LIST
27736: PPUSH
27737: CALL_OW 69
27741: ST_TO_ADDR
// if not tmp then
27742: LD_VAR 0 2
27746: NOT
27747: IFFALSE 27751
// exit ;
27749: GO 27800
// for i in tmp do
27751: LD_ADDR_VAR 0 1
27755: PUSH
27756: LD_VAR 0 2
27760: PUSH
27761: FOR_IN
27762: IFFALSE 27798
// begin if Crawls ( i ) then
27764: LD_VAR 0 1
27768: PPUSH
27769: CALL_OW 318
27773: IFFALSE 27784
// ComWalk ( i ) ;
27775: LD_VAR 0 1
27779: PPUSH
27780: CALL_OW 138
// SetClass ( i , 2 ) ;
27784: LD_VAR 0 1
27788: PPUSH
27789: LD_INT 2
27791: PPUSH
27792: CALL_OW 336
// end ;
27796: GO 27761
27798: POP
27799: POP
// end ;
27800: PPOPN 2
27802: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27803: LD_EXP 52
27807: PUSH
27808: LD_EXP 105
27812: AND
27813: IFFALSE 28094
27815: GO 27817
27817: DISABLE
27818: LD_INT 0
27820: PPUSH
27821: PPUSH
27822: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27823: LD_OWVAR 2
27827: PPUSH
27828: LD_INT 9
27830: PPUSH
27831: LD_INT 1
27833: PPUSH
27834: LD_INT 1
27836: PPUSH
27837: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27841: LD_INT 9
27843: PPUSH
27844: LD_OWVAR 2
27848: PPUSH
27849: CALL_OW 343
// uc_side := 9 ;
27853: LD_ADDR_OWVAR 20
27857: PUSH
27858: LD_INT 9
27860: ST_TO_ADDR
// uc_nation := 2 ;
27861: LD_ADDR_OWVAR 21
27865: PUSH
27866: LD_INT 2
27868: ST_TO_ADDR
// hc_name := Dark Warrior ;
27869: LD_ADDR_OWVAR 26
27873: PUSH
27874: LD_STRING Dark Warrior
27876: ST_TO_ADDR
// hc_gallery :=  ;
27877: LD_ADDR_OWVAR 33
27881: PUSH
27882: LD_STRING 
27884: ST_TO_ADDR
// hc_noskilllimit := true ;
27885: LD_ADDR_OWVAR 76
27889: PUSH
27890: LD_INT 1
27892: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27893: LD_ADDR_OWVAR 31
27897: PUSH
27898: LD_INT 30
27900: PUSH
27901: LD_INT 30
27903: PUSH
27904: LD_INT 30
27906: PUSH
27907: LD_INT 30
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: ST_TO_ADDR
// un := CreateHuman ;
27916: LD_ADDR_VAR 0 3
27920: PUSH
27921: CALL_OW 44
27925: ST_TO_ADDR
// hc_noskilllimit := false ;
27926: LD_ADDR_OWVAR 76
27930: PUSH
27931: LD_INT 0
27933: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27934: LD_VAR 0 3
27938: PPUSH
27939: LD_INT 1
27941: PPUSH
27942: CALL_OW 51
// p := 0 ;
27946: LD_ADDR_VAR 0 2
27950: PUSH
27951: LD_INT 0
27953: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27954: LD_INT 35
27956: PPUSH
27957: CALL_OW 67
// p := p + 1 ;
27961: LD_ADDR_VAR 0 2
27965: PUSH
27966: LD_VAR 0 2
27970: PUSH
27971: LD_INT 1
27973: PLUS
27974: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27975: LD_VAR 0 3
27979: PPUSH
27980: CALL_OW 256
27984: PUSH
27985: LD_INT 1000
27987: LESS
27988: IFFALSE 28002
// SetLives ( un , 1000 ) ;
27990: LD_VAR 0 3
27994: PPUSH
27995: LD_INT 1000
27997: PPUSH
27998: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
28002: LD_VAR 0 3
28006: PPUSH
28007: LD_INT 81
28009: PUSH
28010: LD_OWVAR 2
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 91
28021: PUSH
28022: LD_VAR 0 3
28026: PUSH
28027: LD_INT 30
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: LIST
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PPUSH
28039: CALL_OW 69
28043: PPUSH
28044: LD_VAR 0 3
28048: PPUSH
28049: CALL_OW 74
28053: PPUSH
28054: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
28058: LD_VAR 0 2
28062: PUSH
28063: LD_INT 60
28065: GREATER
28066: PUSH
28067: LD_VAR 0 3
28071: PPUSH
28072: CALL_OW 301
28076: OR
28077: IFFALSE 27954
// if un then
28079: LD_VAR 0 3
28083: IFFALSE 28094
// RemoveUnit ( un ) ;
28085: LD_VAR 0 3
28089: PPUSH
28090: CALL_OW 64
// end ;
28094: PPOPN 3
28096: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28097: LD_INT 0
28099: PPUSH
// case cmd of 301 :
28100: LD_VAR 0 1
28104: PUSH
28105: LD_INT 301
28107: DOUBLE
28108: EQUAL
28109: IFTRUE 28113
28111: GO 28145
28113: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28114: LD_VAR 0 6
28118: PPUSH
28119: LD_VAR 0 7
28123: PPUSH
28124: LD_VAR 0 8
28128: PPUSH
28129: LD_VAR 0 4
28133: PPUSH
28134: LD_VAR 0 5
28138: PPUSH
28139: CALL 29346 0 5
28143: GO 28266
28145: LD_INT 302
28147: DOUBLE
28148: EQUAL
28149: IFTRUE 28153
28151: GO 28190
28153: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28154: LD_VAR 0 6
28158: PPUSH
28159: LD_VAR 0 7
28163: PPUSH
28164: LD_VAR 0 8
28168: PPUSH
28169: LD_VAR 0 9
28173: PPUSH
28174: LD_VAR 0 4
28178: PPUSH
28179: LD_VAR 0 5
28183: PPUSH
28184: CALL 29437 0 6
28188: GO 28266
28190: LD_INT 303
28192: DOUBLE
28193: EQUAL
28194: IFTRUE 28198
28196: GO 28235
28198: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28199: LD_VAR 0 6
28203: PPUSH
28204: LD_VAR 0 7
28208: PPUSH
28209: LD_VAR 0 8
28213: PPUSH
28214: LD_VAR 0 9
28218: PPUSH
28219: LD_VAR 0 4
28223: PPUSH
28224: LD_VAR 0 5
28228: PPUSH
28229: CALL 28271 0 6
28233: GO 28266
28235: LD_INT 304
28237: DOUBLE
28238: EQUAL
28239: IFTRUE 28243
28241: GO 28265
28243: POP
// hHackTeleport ( unit , x , y ) ; end ;
28244: LD_VAR 0 2
28248: PPUSH
28249: LD_VAR 0 4
28253: PPUSH
28254: LD_VAR 0 5
28258: PPUSH
28259: CALL 30030 0 3
28263: GO 28266
28265: POP
// end ;
28266: LD_VAR 0 12
28270: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28271: LD_INT 0
28273: PPUSH
28274: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28275: LD_VAR 0 1
28279: PUSH
28280: LD_INT 1
28282: LESS
28283: PUSH
28284: LD_VAR 0 1
28288: PUSH
28289: LD_INT 3
28291: GREATER
28292: OR
28293: PUSH
28294: LD_VAR 0 5
28298: PPUSH
28299: LD_VAR 0 6
28303: PPUSH
28304: CALL_OW 428
28308: OR
28309: IFFALSE 28313
// exit ;
28311: GO 29033
// uc_side := your_side ;
28313: LD_ADDR_OWVAR 20
28317: PUSH
28318: LD_OWVAR 2
28322: ST_TO_ADDR
// uc_nation := nation ;
28323: LD_ADDR_OWVAR 21
28327: PUSH
28328: LD_VAR 0 1
28332: ST_TO_ADDR
// bc_level = 1 ;
28333: LD_ADDR_OWVAR 43
28337: PUSH
28338: LD_INT 1
28340: ST_TO_ADDR
// case btype of 1 :
28341: LD_VAR 0 2
28345: PUSH
28346: LD_INT 1
28348: DOUBLE
28349: EQUAL
28350: IFTRUE 28354
28352: GO 28365
28354: POP
// bc_type := b_depot ; 2 :
28355: LD_ADDR_OWVAR 42
28359: PUSH
28360: LD_INT 0
28362: ST_TO_ADDR
28363: GO 28977
28365: LD_INT 2
28367: DOUBLE
28368: EQUAL
28369: IFTRUE 28373
28371: GO 28384
28373: POP
// bc_type := b_warehouse ; 3 :
28374: LD_ADDR_OWVAR 42
28378: PUSH
28379: LD_INT 1
28381: ST_TO_ADDR
28382: GO 28977
28384: LD_INT 3
28386: DOUBLE
28387: EQUAL
28388: IFTRUE 28392
28390: GO 28403
28392: POP
// bc_type := b_lab ; 4 .. 9 :
28393: LD_ADDR_OWVAR 42
28397: PUSH
28398: LD_INT 6
28400: ST_TO_ADDR
28401: GO 28977
28403: LD_INT 4
28405: DOUBLE
28406: GREATEREQUAL
28407: IFFALSE 28415
28409: LD_INT 9
28411: DOUBLE
28412: LESSEQUAL
28413: IFTRUE 28417
28415: GO 28469
28417: POP
// begin bc_type := b_lab_half ;
28418: LD_ADDR_OWVAR 42
28422: PUSH
28423: LD_INT 7
28425: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28426: LD_ADDR_OWVAR 44
28430: PUSH
28431: LD_INT 10
28433: PUSH
28434: LD_INT 11
28436: PUSH
28437: LD_INT 12
28439: PUSH
28440: LD_INT 15
28442: PUSH
28443: LD_INT 14
28445: PUSH
28446: LD_INT 13
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: PUSH
28457: LD_VAR 0 2
28461: PUSH
28462: LD_INT 3
28464: MINUS
28465: ARRAY
28466: ST_TO_ADDR
// end ; 10 .. 13 :
28467: GO 28977
28469: LD_INT 10
28471: DOUBLE
28472: GREATEREQUAL
28473: IFFALSE 28481
28475: LD_INT 13
28477: DOUBLE
28478: LESSEQUAL
28479: IFTRUE 28483
28481: GO 28560
28483: POP
// begin bc_type := b_lab_full ;
28484: LD_ADDR_OWVAR 42
28488: PUSH
28489: LD_INT 8
28491: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28492: LD_ADDR_OWVAR 44
28496: PUSH
28497: LD_INT 10
28499: PUSH
28500: LD_INT 12
28502: PUSH
28503: LD_INT 14
28505: PUSH
28506: LD_INT 13
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: PUSH
28515: LD_VAR 0 2
28519: PUSH
28520: LD_INT 9
28522: MINUS
28523: ARRAY
28524: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28525: LD_ADDR_OWVAR 45
28529: PUSH
28530: LD_INT 11
28532: PUSH
28533: LD_INT 15
28535: PUSH
28536: LD_INT 12
28538: PUSH
28539: LD_INT 15
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: PUSH
28548: LD_VAR 0 2
28552: PUSH
28553: LD_INT 9
28555: MINUS
28556: ARRAY
28557: ST_TO_ADDR
// end ; 14 :
28558: GO 28977
28560: LD_INT 14
28562: DOUBLE
28563: EQUAL
28564: IFTRUE 28568
28566: GO 28579
28568: POP
// bc_type := b_workshop ; 15 :
28569: LD_ADDR_OWVAR 42
28573: PUSH
28574: LD_INT 2
28576: ST_TO_ADDR
28577: GO 28977
28579: LD_INT 15
28581: DOUBLE
28582: EQUAL
28583: IFTRUE 28587
28585: GO 28598
28587: POP
// bc_type := b_factory ; 16 :
28588: LD_ADDR_OWVAR 42
28592: PUSH
28593: LD_INT 3
28595: ST_TO_ADDR
28596: GO 28977
28598: LD_INT 16
28600: DOUBLE
28601: EQUAL
28602: IFTRUE 28606
28604: GO 28617
28606: POP
// bc_type := b_ext_gun ; 17 :
28607: LD_ADDR_OWVAR 42
28611: PUSH
28612: LD_INT 17
28614: ST_TO_ADDR
28615: GO 28977
28617: LD_INT 17
28619: DOUBLE
28620: EQUAL
28621: IFTRUE 28625
28623: GO 28653
28625: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28626: LD_ADDR_OWVAR 42
28630: PUSH
28631: LD_INT 19
28633: PUSH
28634: LD_INT 23
28636: PUSH
28637: LD_INT 19
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: LIST
28644: PUSH
28645: LD_VAR 0 1
28649: ARRAY
28650: ST_TO_ADDR
28651: GO 28977
28653: LD_INT 18
28655: DOUBLE
28656: EQUAL
28657: IFTRUE 28661
28659: GO 28672
28661: POP
// bc_type := b_ext_radar ; 19 :
28662: LD_ADDR_OWVAR 42
28666: PUSH
28667: LD_INT 20
28669: ST_TO_ADDR
28670: GO 28977
28672: LD_INT 19
28674: DOUBLE
28675: EQUAL
28676: IFTRUE 28680
28678: GO 28691
28680: POP
// bc_type := b_ext_radio ; 20 :
28681: LD_ADDR_OWVAR 42
28685: PUSH
28686: LD_INT 22
28688: ST_TO_ADDR
28689: GO 28977
28691: LD_INT 20
28693: DOUBLE
28694: EQUAL
28695: IFTRUE 28699
28697: GO 28710
28699: POP
// bc_type := b_ext_siberium ; 21 :
28700: LD_ADDR_OWVAR 42
28704: PUSH
28705: LD_INT 21
28707: ST_TO_ADDR
28708: GO 28977
28710: LD_INT 21
28712: DOUBLE
28713: EQUAL
28714: IFTRUE 28718
28716: GO 28729
28718: POP
// bc_type := b_ext_computer ; 22 :
28719: LD_ADDR_OWVAR 42
28723: PUSH
28724: LD_INT 24
28726: ST_TO_ADDR
28727: GO 28977
28729: LD_INT 22
28731: DOUBLE
28732: EQUAL
28733: IFTRUE 28737
28735: GO 28748
28737: POP
// bc_type := b_ext_track ; 23 :
28738: LD_ADDR_OWVAR 42
28742: PUSH
28743: LD_INT 16
28745: ST_TO_ADDR
28746: GO 28977
28748: LD_INT 23
28750: DOUBLE
28751: EQUAL
28752: IFTRUE 28756
28754: GO 28767
28756: POP
// bc_type := b_ext_laser ; 24 :
28757: LD_ADDR_OWVAR 42
28761: PUSH
28762: LD_INT 25
28764: ST_TO_ADDR
28765: GO 28977
28767: LD_INT 24
28769: DOUBLE
28770: EQUAL
28771: IFTRUE 28775
28773: GO 28786
28775: POP
// bc_type := b_control_tower ; 25 :
28776: LD_ADDR_OWVAR 42
28780: PUSH
28781: LD_INT 36
28783: ST_TO_ADDR
28784: GO 28977
28786: LD_INT 25
28788: DOUBLE
28789: EQUAL
28790: IFTRUE 28794
28792: GO 28805
28794: POP
// bc_type := b_breastwork ; 26 :
28795: LD_ADDR_OWVAR 42
28799: PUSH
28800: LD_INT 31
28802: ST_TO_ADDR
28803: GO 28977
28805: LD_INT 26
28807: DOUBLE
28808: EQUAL
28809: IFTRUE 28813
28811: GO 28824
28813: POP
// bc_type := b_bunker ; 27 :
28814: LD_ADDR_OWVAR 42
28818: PUSH
28819: LD_INT 32
28821: ST_TO_ADDR
28822: GO 28977
28824: LD_INT 27
28826: DOUBLE
28827: EQUAL
28828: IFTRUE 28832
28830: GO 28843
28832: POP
// bc_type := b_turret ; 28 :
28833: LD_ADDR_OWVAR 42
28837: PUSH
28838: LD_INT 33
28840: ST_TO_ADDR
28841: GO 28977
28843: LD_INT 28
28845: DOUBLE
28846: EQUAL
28847: IFTRUE 28851
28849: GO 28862
28851: POP
// bc_type := b_armoury ; 29 :
28852: LD_ADDR_OWVAR 42
28856: PUSH
28857: LD_INT 4
28859: ST_TO_ADDR
28860: GO 28977
28862: LD_INT 29
28864: DOUBLE
28865: EQUAL
28866: IFTRUE 28870
28868: GO 28881
28870: POP
// bc_type := b_barracks ; 30 :
28871: LD_ADDR_OWVAR 42
28875: PUSH
28876: LD_INT 5
28878: ST_TO_ADDR
28879: GO 28977
28881: LD_INT 30
28883: DOUBLE
28884: EQUAL
28885: IFTRUE 28889
28887: GO 28900
28889: POP
// bc_type := b_solar_power ; 31 :
28890: LD_ADDR_OWVAR 42
28894: PUSH
28895: LD_INT 27
28897: ST_TO_ADDR
28898: GO 28977
28900: LD_INT 31
28902: DOUBLE
28903: EQUAL
28904: IFTRUE 28908
28906: GO 28919
28908: POP
// bc_type := b_oil_power ; 32 :
28909: LD_ADDR_OWVAR 42
28913: PUSH
28914: LD_INT 26
28916: ST_TO_ADDR
28917: GO 28977
28919: LD_INT 32
28921: DOUBLE
28922: EQUAL
28923: IFTRUE 28927
28925: GO 28938
28927: POP
// bc_type := b_siberite_power ; 33 :
28928: LD_ADDR_OWVAR 42
28932: PUSH
28933: LD_INT 28
28935: ST_TO_ADDR
28936: GO 28977
28938: LD_INT 33
28940: DOUBLE
28941: EQUAL
28942: IFTRUE 28946
28944: GO 28957
28946: POP
// bc_type := b_oil_mine ; 34 :
28947: LD_ADDR_OWVAR 42
28951: PUSH
28952: LD_INT 29
28954: ST_TO_ADDR
28955: GO 28977
28957: LD_INT 34
28959: DOUBLE
28960: EQUAL
28961: IFTRUE 28965
28963: GO 28976
28965: POP
// bc_type := b_siberite_mine ; end ;
28966: LD_ADDR_OWVAR 42
28970: PUSH
28971: LD_INT 30
28973: ST_TO_ADDR
28974: GO 28977
28976: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28977: LD_ADDR_VAR 0 8
28981: PUSH
28982: LD_VAR 0 5
28986: PPUSH
28987: LD_VAR 0 6
28991: PPUSH
28992: LD_VAR 0 3
28996: PPUSH
28997: CALL_OW 47
29001: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
29002: LD_OWVAR 42
29006: PUSH
29007: LD_INT 32
29009: PUSH
29010: LD_INT 33
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: IN
29017: IFFALSE 29033
// PlaceWeaponTurret ( b , weapon ) ;
29019: LD_VAR 0 8
29023: PPUSH
29024: LD_VAR 0 4
29028: PPUSH
29029: CALL_OW 431
// end ;
29033: LD_VAR 0 7
29037: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29038: LD_INT 0
29040: PPUSH
29041: PPUSH
29042: PPUSH
29043: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29044: LD_ADDR_VAR 0 4
29048: PUSH
29049: LD_INT 22
29051: PUSH
29052: LD_OWVAR 2
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 2
29063: PUSH
29064: LD_INT 30
29066: PUSH
29067: LD_INT 0
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 30
29076: PUSH
29077: LD_INT 1
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: LIST
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PPUSH
29093: CALL_OW 69
29097: ST_TO_ADDR
// if not tmp then
29098: LD_VAR 0 4
29102: NOT
29103: IFFALSE 29107
// exit ;
29105: GO 29166
// for i in tmp do
29107: LD_ADDR_VAR 0 2
29111: PUSH
29112: LD_VAR 0 4
29116: PUSH
29117: FOR_IN
29118: IFFALSE 29164
// for j = 1 to 3 do
29120: LD_ADDR_VAR 0 3
29124: PUSH
29125: DOUBLE
29126: LD_INT 1
29128: DEC
29129: ST_TO_ADDR
29130: LD_INT 3
29132: PUSH
29133: FOR_TO
29134: IFFALSE 29160
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29136: LD_VAR 0 2
29140: PPUSH
29141: CALL_OW 274
29145: PPUSH
29146: LD_VAR 0 3
29150: PPUSH
29151: LD_INT 99999
29153: PPUSH
29154: CALL_OW 277
29158: GO 29133
29160: POP
29161: POP
29162: GO 29117
29164: POP
29165: POP
// end ;
29166: LD_VAR 0 1
29170: RET
// export function hHackSetLevel10 ; var i , j ; begin
29171: LD_INT 0
29173: PPUSH
29174: PPUSH
29175: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29176: LD_ADDR_VAR 0 2
29180: PUSH
29181: LD_INT 21
29183: PUSH
29184: LD_INT 1
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PPUSH
29191: CALL_OW 69
29195: PUSH
29196: FOR_IN
29197: IFFALSE 29249
// if IsSelected ( i ) then
29199: LD_VAR 0 2
29203: PPUSH
29204: CALL_OW 306
29208: IFFALSE 29247
// begin for j := 1 to 4 do
29210: LD_ADDR_VAR 0 3
29214: PUSH
29215: DOUBLE
29216: LD_INT 1
29218: DEC
29219: ST_TO_ADDR
29220: LD_INT 4
29222: PUSH
29223: FOR_TO
29224: IFFALSE 29245
// SetSkill ( i , j , 10 ) ;
29226: LD_VAR 0 2
29230: PPUSH
29231: LD_VAR 0 3
29235: PPUSH
29236: LD_INT 10
29238: PPUSH
29239: CALL_OW 237
29243: GO 29223
29245: POP
29246: POP
// end ;
29247: GO 29196
29249: POP
29250: POP
// end ;
29251: LD_VAR 0 1
29255: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29256: LD_INT 0
29258: PPUSH
29259: PPUSH
29260: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29261: LD_ADDR_VAR 0 2
29265: PUSH
29266: LD_INT 22
29268: PUSH
29269: LD_OWVAR 2
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: LD_INT 21
29280: PUSH
29281: LD_INT 1
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PPUSH
29292: CALL_OW 69
29296: PUSH
29297: FOR_IN
29298: IFFALSE 29339
// begin for j := 1 to 4 do
29300: LD_ADDR_VAR 0 3
29304: PUSH
29305: DOUBLE
29306: LD_INT 1
29308: DEC
29309: ST_TO_ADDR
29310: LD_INT 4
29312: PUSH
29313: FOR_TO
29314: IFFALSE 29335
// SetSkill ( i , j , 10 ) ;
29316: LD_VAR 0 2
29320: PPUSH
29321: LD_VAR 0 3
29325: PPUSH
29326: LD_INT 10
29328: PPUSH
29329: CALL_OW 237
29333: GO 29313
29335: POP
29336: POP
// end ;
29337: GO 29297
29339: POP
29340: POP
// end ;
29341: LD_VAR 0 1
29345: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
29346: LD_INT 0
29348: PPUSH
// uc_side := your_side ;
29349: LD_ADDR_OWVAR 20
29353: PUSH
29354: LD_OWVAR 2
29358: ST_TO_ADDR
// uc_nation := nation ;
29359: LD_ADDR_OWVAR 21
29363: PUSH
29364: LD_VAR 0 1
29368: ST_TO_ADDR
// InitHc ;
29369: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29373: LD_INT 0
29375: PPUSH
29376: LD_VAR 0 2
29380: PPUSH
29381: LD_VAR 0 3
29385: PPUSH
29386: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29390: LD_VAR 0 4
29394: PPUSH
29395: LD_VAR 0 5
29399: PPUSH
29400: CALL_OW 428
29404: PUSH
29405: LD_INT 0
29407: EQUAL
29408: IFFALSE 29432
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29410: CALL_OW 44
29414: PPUSH
29415: LD_VAR 0 4
29419: PPUSH
29420: LD_VAR 0 5
29424: PPUSH
29425: LD_INT 1
29427: PPUSH
29428: CALL_OW 48
// end ;
29432: LD_VAR 0 6
29436: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29437: LD_INT 0
29439: PPUSH
29440: PPUSH
// uc_side := your_side ;
29441: LD_ADDR_OWVAR 20
29445: PUSH
29446: LD_OWVAR 2
29450: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29451: LD_VAR 0 1
29455: PUSH
29456: LD_INT 1
29458: PUSH
29459: LD_INT 2
29461: PUSH
29462: LD_INT 3
29464: PUSH
29465: LD_INT 4
29467: PUSH
29468: LD_INT 5
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: IN
29478: IFFALSE 29490
// uc_nation := nation_american else
29480: LD_ADDR_OWVAR 21
29484: PUSH
29485: LD_INT 1
29487: ST_TO_ADDR
29488: GO 29533
// if chassis in [ 11 , 12 , 13 , 14 ] then
29490: LD_VAR 0 1
29494: PUSH
29495: LD_INT 11
29497: PUSH
29498: LD_INT 12
29500: PUSH
29501: LD_INT 13
29503: PUSH
29504: LD_INT 14
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: IN
29513: IFFALSE 29525
// uc_nation := nation_arabian else
29515: LD_ADDR_OWVAR 21
29519: PUSH
29520: LD_INT 2
29522: ST_TO_ADDR
29523: GO 29533
// uc_nation := nation_russian ;
29525: LD_ADDR_OWVAR 21
29529: PUSH
29530: LD_INT 3
29532: ST_TO_ADDR
// vc_chassis := chassis ;
29533: LD_ADDR_OWVAR 37
29537: PUSH
29538: LD_VAR 0 1
29542: ST_TO_ADDR
// vc_engine := engine ;
29543: LD_ADDR_OWVAR 39
29547: PUSH
29548: LD_VAR 0 2
29552: ST_TO_ADDR
// vc_control := control ;
29553: LD_ADDR_OWVAR 38
29557: PUSH
29558: LD_VAR 0 3
29562: ST_TO_ADDR
// vc_weapon := weapon ;
29563: LD_ADDR_OWVAR 40
29567: PUSH
29568: LD_VAR 0 4
29572: ST_TO_ADDR
// un := CreateVehicle ;
29573: LD_ADDR_VAR 0 8
29577: PUSH
29578: CALL_OW 45
29582: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29583: LD_VAR 0 8
29587: PPUSH
29588: LD_INT 0
29590: PPUSH
29591: LD_INT 5
29593: PPUSH
29594: CALL_OW 12
29598: PPUSH
29599: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29603: LD_VAR 0 8
29607: PPUSH
29608: LD_VAR 0 5
29612: PPUSH
29613: LD_VAR 0 6
29617: PPUSH
29618: LD_INT 1
29620: PPUSH
29621: CALL_OW 48
// end ;
29625: LD_VAR 0 7
29629: RET
// export hInvincible ; every 1 do
29630: GO 29632
29632: DISABLE
// hInvincible := [ ] ;
29633: LD_ADDR_EXP 106
29637: PUSH
29638: EMPTY
29639: ST_TO_ADDR
29640: END
// every 10 do var i ;
29641: GO 29643
29643: DISABLE
29644: LD_INT 0
29646: PPUSH
// begin enable ;
29647: ENABLE
// if not hInvincible then
29648: LD_EXP 106
29652: NOT
29653: IFFALSE 29657
// exit ;
29655: GO 29701
// for i in hInvincible do
29657: LD_ADDR_VAR 0 1
29661: PUSH
29662: LD_EXP 106
29666: PUSH
29667: FOR_IN
29668: IFFALSE 29699
// if GetLives ( i ) < 1000 then
29670: LD_VAR 0 1
29674: PPUSH
29675: CALL_OW 256
29679: PUSH
29680: LD_INT 1000
29682: LESS
29683: IFFALSE 29697
// SetLives ( i , 1000 ) ;
29685: LD_VAR 0 1
29689: PPUSH
29690: LD_INT 1000
29692: PPUSH
29693: CALL_OW 234
29697: GO 29667
29699: POP
29700: POP
// end ;
29701: PPOPN 1
29703: END
// export function hHackInvincible ; var i ; begin
29704: LD_INT 0
29706: PPUSH
29707: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29708: LD_ADDR_VAR 0 2
29712: PUSH
29713: LD_INT 2
29715: PUSH
29716: LD_INT 21
29718: PUSH
29719: LD_INT 1
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: LD_INT 21
29728: PUSH
29729: LD_INT 2
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: LIST
29740: PPUSH
29741: CALL_OW 69
29745: PUSH
29746: FOR_IN
29747: IFFALSE 29808
// if IsSelected ( i ) then
29749: LD_VAR 0 2
29753: PPUSH
29754: CALL_OW 306
29758: IFFALSE 29806
// begin if i in hInvincible then
29760: LD_VAR 0 2
29764: PUSH
29765: LD_EXP 106
29769: IN
29770: IFFALSE 29790
// hInvincible := hInvincible diff i else
29772: LD_ADDR_EXP 106
29776: PUSH
29777: LD_EXP 106
29781: PUSH
29782: LD_VAR 0 2
29786: DIFF
29787: ST_TO_ADDR
29788: GO 29806
// hInvincible := hInvincible union i ;
29790: LD_ADDR_EXP 106
29794: PUSH
29795: LD_EXP 106
29799: PUSH
29800: LD_VAR 0 2
29804: UNION
29805: ST_TO_ADDR
// end ;
29806: GO 29746
29808: POP
29809: POP
// end ;
29810: LD_VAR 0 1
29814: RET
// export function hHackInvisible ; var i , j ; begin
29815: LD_INT 0
29817: PPUSH
29818: PPUSH
29819: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29820: LD_ADDR_VAR 0 2
29824: PUSH
29825: LD_INT 21
29827: PUSH
29828: LD_INT 1
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PPUSH
29835: CALL_OW 69
29839: PUSH
29840: FOR_IN
29841: IFFALSE 29865
// if IsSelected ( i ) then
29843: LD_VAR 0 2
29847: PPUSH
29848: CALL_OW 306
29852: IFFALSE 29863
// ComForceInvisible ( i ) ;
29854: LD_VAR 0 2
29858: PPUSH
29859: CALL_OW 496
29863: GO 29840
29865: POP
29866: POP
// end ;
29867: LD_VAR 0 1
29871: RET
// export function hHackChangeYourSide ; begin
29872: LD_INT 0
29874: PPUSH
// if your_side = 8 then
29875: LD_OWVAR 2
29879: PUSH
29880: LD_INT 8
29882: EQUAL
29883: IFFALSE 29895
// your_side := 0 else
29885: LD_ADDR_OWVAR 2
29889: PUSH
29890: LD_INT 0
29892: ST_TO_ADDR
29893: GO 29909
// your_side := your_side + 1 ;
29895: LD_ADDR_OWVAR 2
29899: PUSH
29900: LD_OWVAR 2
29904: PUSH
29905: LD_INT 1
29907: PLUS
29908: ST_TO_ADDR
// end ;
29909: LD_VAR 0 1
29913: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29914: LD_INT 0
29916: PPUSH
29917: PPUSH
29918: PPUSH
// for i in all_units do
29919: LD_ADDR_VAR 0 2
29923: PUSH
29924: LD_OWVAR 3
29928: PUSH
29929: FOR_IN
29930: IFFALSE 30008
// if IsSelected ( i ) then
29932: LD_VAR 0 2
29936: PPUSH
29937: CALL_OW 306
29941: IFFALSE 30006
// begin j := GetSide ( i ) ;
29943: LD_ADDR_VAR 0 3
29947: PUSH
29948: LD_VAR 0 2
29952: PPUSH
29953: CALL_OW 255
29957: ST_TO_ADDR
// if j = 8 then
29958: LD_VAR 0 3
29962: PUSH
29963: LD_INT 8
29965: EQUAL
29966: IFFALSE 29978
// j := 0 else
29968: LD_ADDR_VAR 0 3
29972: PUSH
29973: LD_INT 0
29975: ST_TO_ADDR
29976: GO 29992
// j := j + 1 ;
29978: LD_ADDR_VAR 0 3
29982: PUSH
29983: LD_VAR 0 3
29987: PUSH
29988: LD_INT 1
29990: PLUS
29991: ST_TO_ADDR
// SetSide ( i , j ) ;
29992: LD_VAR 0 2
29996: PPUSH
29997: LD_VAR 0 3
30001: PPUSH
30002: CALL_OW 235
// end ;
30006: GO 29929
30008: POP
30009: POP
// end ;
30010: LD_VAR 0 1
30014: RET
// export function hHackFog ; begin
30015: LD_INT 0
30017: PPUSH
// FogOff ( true ) ;
30018: LD_INT 1
30020: PPUSH
30021: CALL_OW 344
// end ;
30025: LD_VAR 0 1
30029: RET
// export function hHackTeleport ( unit , x , y ) ; begin
30030: LD_INT 0
30032: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
30033: LD_VAR 0 1
30037: PPUSH
30038: LD_VAR 0 2
30042: PPUSH
30043: LD_VAR 0 3
30047: PPUSH
30048: LD_INT 1
30050: PPUSH
30051: LD_INT 1
30053: PPUSH
30054: CALL_OW 483
// CenterOnXY ( x , y ) ;
30058: LD_VAR 0 2
30062: PPUSH
30063: LD_VAR 0 3
30067: PPUSH
30068: CALL_OW 84
// end ; end_of_file
30072: LD_VAR 0 4
30076: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
30077: LD_VAR 0 1
30081: PUSH
30082: LD_INT 200
30084: DOUBLE
30085: GREATEREQUAL
30086: IFFALSE 30094
30088: LD_INT 299
30090: DOUBLE
30091: LESSEQUAL
30092: IFTRUE 30096
30094: GO 30128
30096: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
30097: LD_VAR 0 1
30101: PPUSH
30102: LD_VAR 0 2
30106: PPUSH
30107: LD_VAR 0 3
30111: PPUSH
30112: LD_VAR 0 4
30116: PPUSH
30117: LD_VAR 0 5
30121: PPUSH
30122: CALL 30372 0 5
30126: GO 30205
30128: LD_INT 300
30130: DOUBLE
30131: GREATEREQUAL
30132: IFFALSE 30140
30134: LD_INT 399
30136: DOUBLE
30137: LESSEQUAL
30138: IFTRUE 30142
30140: GO 30204
30142: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
30143: LD_VAR 0 1
30147: PPUSH
30148: LD_VAR 0 2
30152: PPUSH
30153: LD_VAR 0 3
30157: PPUSH
30158: LD_VAR 0 4
30162: PPUSH
30163: LD_VAR 0 5
30167: PPUSH
30168: LD_VAR 0 6
30172: PPUSH
30173: LD_VAR 0 7
30177: PPUSH
30178: LD_VAR 0 8
30182: PPUSH
30183: LD_VAR 0 9
30187: PPUSH
30188: LD_VAR 0 10
30192: PPUSH
30193: LD_VAR 0 11
30197: PPUSH
30198: CALL 28097 0 11
30202: GO 30205
30204: POP
// end ;
30205: PPOPN 11
30207: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
30208: LD_VAR 0 1
30212: PPUSH
30213: LD_VAR 0 2
30217: PPUSH
30218: LD_VAR 0 3
30222: PPUSH
30223: LD_VAR 0 4
30227: PPUSH
30228: LD_VAR 0 5
30232: PPUSH
30233: CALL 30354 0 5
// end ; end_of_file
30237: PPOPN 5
30239: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
30240: LD_INT 0
30242: PPUSH
30243: PPUSH
30244: PPUSH
30245: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
30246: LD_VAR 0 1
30250: PPUSH
30251: CALL_OW 264
30255: PUSH
30256: LD_EXP 123
30260: EQUAL
30261: IFFALSE 30333
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
30263: LD_INT 68
30265: PPUSH
30266: LD_VAR 0 1
30270: PPUSH
30271: CALL_OW 255
30275: PPUSH
30276: CALL_OW 321
30280: PUSH
30281: LD_INT 2
30283: EQUAL
30284: IFFALSE 30296
// eff := 70 else
30286: LD_ADDR_VAR 0 4
30290: PUSH
30291: LD_INT 70
30293: ST_TO_ADDR
30294: GO 30304
// eff := 30 ;
30296: LD_ADDR_VAR 0 4
30300: PUSH
30301: LD_INT 30
30303: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
30304: LD_VAR 0 1
30308: PPUSH
30309: CALL_OW 250
30313: PPUSH
30314: LD_VAR 0 1
30318: PPUSH
30319: CALL_OW 251
30323: PPUSH
30324: LD_VAR 0 4
30328: PPUSH
30329: CALL_OW 495
// end ; end ;
30333: LD_VAR 0 2
30337: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
30338: LD_INT 0
30340: PPUSH
// end ;
30341: LD_VAR 0 4
30345: RET
// export function SOS_Command ( cmd ) ; begin
30346: LD_INT 0
30348: PPUSH
// end ;
30349: LD_VAR 0 2
30353: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
30354: LD_INT 0
30356: PPUSH
// if cmd = 121 then
30357: LD_VAR 0 1
30361: PUSH
30362: LD_INT 121
30364: EQUAL
30365: IFFALSE 30367
// end ;
30367: LD_VAR 0 6
30371: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
30372: LD_INT 0
30374: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
30375: LD_VAR 0 1
30379: PUSH
30380: LD_INT 250
30382: EQUAL
30383: PUSH
30384: LD_VAR 0 2
30388: PPUSH
30389: CALL_OW 264
30393: PUSH
30394: LD_EXP 126
30398: EQUAL
30399: AND
30400: IFFALSE 30421
// MinerPlaceMine ( unit , x , y ) ;
30402: LD_VAR 0 2
30406: PPUSH
30407: LD_VAR 0 4
30411: PPUSH
30412: LD_VAR 0 5
30416: PPUSH
30417: CALL 32770 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
30421: LD_VAR 0 1
30425: PUSH
30426: LD_INT 251
30428: EQUAL
30429: PUSH
30430: LD_VAR 0 2
30434: PPUSH
30435: CALL_OW 264
30439: PUSH
30440: LD_EXP 126
30444: EQUAL
30445: AND
30446: IFFALSE 30467
// MinerDetonateMine ( unit , x , y ) ;
30448: LD_VAR 0 2
30452: PPUSH
30453: LD_VAR 0 4
30457: PPUSH
30458: LD_VAR 0 5
30462: PPUSH
30463: CALL 33047 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
30467: LD_VAR 0 1
30471: PUSH
30472: LD_INT 252
30474: EQUAL
30475: PUSH
30476: LD_VAR 0 2
30480: PPUSH
30481: CALL_OW 264
30485: PUSH
30486: LD_EXP 126
30490: EQUAL
30491: AND
30492: IFFALSE 30513
// MinerCreateMinefield ( unit , x , y ) ;
30494: LD_VAR 0 2
30498: PPUSH
30499: LD_VAR 0 4
30503: PPUSH
30504: LD_VAR 0 5
30508: PPUSH
30509: CALL 33464 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
30513: LD_VAR 0 1
30517: PUSH
30518: LD_INT 253
30520: EQUAL
30521: PUSH
30522: LD_VAR 0 2
30526: PPUSH
30527: CALL_OW 257
30531: PUSH
30532: LD_INT 5
30534: EQUAL
30535: AND
30536: IFFALSE 30557
// ComBinocular ( unit , x , y ) ;
30538: LD_VAR 0 2
30542: PPUSH
30543: LD_VAR 0 4
30547: PPUSH
30548: LD_VAR 0 5
30552: PPUSH
30553: CALL 33835 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
30557: LD_VAR 0 1
30561: PUSH
30562: LD_INT 254
30564: EQUAL
30565: PUSH
30566: LD_VAR 0 2
30570: PPUSH
30571: CALL_OW 264
30575: PUSH
30576: LD_EXP 121
30580: EQUAL
30581: AND
30582: PUSH
30583: LD_VAR 0 3
30587: PPUSH
30588: CALL_OW 263
30592: PUSH
30593: LD_INT 3
30595: EQUAL
30596: AND
30597: IFFALSE 30613
// HackDestroyVehicle ( unit , selectedUnit ) ;
30599: LD_VAR 0 2
30603: PPUSH
30604: LD_VAR 0 3
30608: PPUSH
30609: CALL 32130 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
30613: LD_VAR 0 1
30617: PUSH
30618: LD_INT 255
30620: EQUAL
30621: PUSH
30622: LD_VAR 0 2
30626: PPUSH
30627: CALL_OW 264
30631: PUSH
30632: LD_INT 14
30634: PUSH
30635: LD_INT 53
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: IN
30642: AND
30643: PUSH
30644: LD_VAR 0 4
30648: PPUSH
30649: LD_VAR 0 5
30653: PPUSH
30654: CALL_OW 488
30658: AND
30659: IFFALSE 30683
// CutTreeXYR ( unit , x , y , 12 ) ;
30661: LD_VAR 0 2
30665: PPUSH
30666: LD_VAR 0 4
30670: PPUSH
30671: LD_VAR 0 5
30675: PPUSH
30676: LD_INT 12
30678: PPUSH
30679: CALL 30696 0 4
// end ;
30683: LD_VAR 0 6
30687: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
30688: LD_INT 0
30690: PPUSH
// end ;
30691: LD_VAR 0 4
30695: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
30696: LD_INT 0
30698: PPUSH
30699: PPUSH
30700: PPUSH
30701: PPUSH
30702: PPUSH
30703: PPUSH
30704: PPUSH
30705: PPUSH
30706: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
30707: LD_VAR 0 1
30711: NOT
30712: PUSH
30713: LD_VAR 0 2
30717: PPUSH
30718: LD_VAR 0 3
30722: PPUSH
30723: CALL_OW 488
30727: NOT
30728: OR
30729: PUSH
30730: LD_VAR 0 4
30734: NOT
30735: OR
30736: IFFALSE 30740
// exit ;
30738: GO 31080
// list := [ ] ;
30740: LD_ADDR_VAR 0 13
30744: PUSH
30745: EMPTY
30746: ST_TO_ADDR
// if x - r < 0 then
30747: LD_VAR 0 2
30751: PUSH
30752: LD_VAR 0 4
30756: MINUS
30757: PUSH
30758: LD_INT 0
30760: LESS
30761: IFFALSE 30773
// min_x := 0 else
30763: LD_ADDR_VAR 0 7
30767: PUSH
30768: LD_INT 0
30770: ST_TO_ADDR
30771: GO 30789
// min_x := x - r ;
30773: LD_ADDR_VAR 0 7
30777: PUSH
30778: LD_VAR 0 2
30782: PUSH
30783: LD_VAR 0 4
30787: MINUS
30788: ST_TO_ADDR
// if y - r < 0 then
30789: LD_VAR 0 3
30793: PUSH
30794: LD_VAR 0 4
30798: MINUS
30799: PUSH
30800: LD_INT 0
30802: LESS
30803: IFFALSE 30815
// min_y := 0 else
30805: LD_ADDR_VAR 0 8
30809: PUSH
30810: LD_INT 0
30812: ST_TO_ADDR
30813: GO 30831
// min_y := y - r ;
30815: LD_ADDR_VAR 0 8
30819: PUSH
30820: LD_VAR 0 3
30824: PUSH
30825: LD_VAR 0 4
30829: MINUS
30830: ST_TO_ADDR
// max_x := x + r ;
30831: LD_ADDR_VAR 0 9
30835: PUSH
30836: LD_VAR 0 2
30840: PUSH
30841: LD_VAR 0 4
30845: PLUS
30846: ST_TO_ADDR
// max_y := y + r ;
30847: LD_ADDR_VAR 0 10
30851: PUSH
30852: LD_VAR 0 3
30856: PUSH
30857: LD_VAR 0 4
30861: PLUS
30862: ST_TO_ADDR
// for _x = min_x to max_x do
30863: LD_ADDR_VAR 0 11
30867: PUSH
30868: DOUBLE
30869: LD_VAR 0 7
30873: DEC
30874: ST_TO_ADDR
30875: LD_VAR 0 9
30879: PUSH
30880: FOR_TO
30881: IFFALSE 30998
// for _y = min_y to max_y do
30883: LD_ADDR_VAR 0 12
30887: PUSH
30888: DOUBLE
30889: LD_VAR 0 8
30893: DEC
30894: ST_TO_ADDR
30895: LD_VAR 0 10
30899: PUSH
30900: FOR_TO
30901: IFFALSE 30994
// begin if not ValidHex ( _x , _y ) then
30903: LD_VAR 0 11
30907: PPUSH
30908: LD_VAR 0 12
30912: PPUSH
30913: CALL_OW 488
30917: NOT
30918: IFFALSE 30922
// continue ;
30920: GO 30900
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
30922: LD_VAR 0 11
30926: PPUSH
30927: LD_VAR 0 12
30931: PPUSH
30932: CALL_OW 351
30936: PUSH
30937: LD_VAR 0 11
30941: PPUSH
30942: LD_VAR 0 12
30946: PPUSH
30947: CALL_OW 554
30951: AND
30952: IFFALSE 30992
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
30954: LD_ADDR_VAR 0 13
30958: PUSH
30959: LD_VAR 0 13
30963: PPUSH
30964: LD_VAR 0 13
30968: PUSH
30969: LD_INT 1
30971: PLUS
30972: PPUSH
30973: LD_VAR 0 11
30977: PUSH
30978: LD_VAR 0 12
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PPUSH
30987: CALL_OW 2
30991: ST_TO_ADDR
// end ;
30992: GO 30900
30994: POP
30995: POP
30996: GO 30880
30998: POP
30999: POP
// if not list then
31000: LD_VAR 0 13
31004: NOT
31005: IFFALSE 31009
// exit ;
31007: GO 31080
// for i in list do
31009: LD_ADDR_VAR 0 6
31013: PUSH
31014: LD_VAR 0 13
31018: PUSH
31019: FOR_IN
31020: IFFALSE 31078
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
31022: LD_VAR 0 1
31026: PPUSH
31027: LD_STRING M
31029: PUSH
31030: LD_VAR 0 6
31034: PUSH
31035: LD_INT 1
31037: ARRAY
31038: PUSH
31039: LD_VAR 0 6
31043: PUSH
31044: LD_INT 2
31046: ARRAY
31047: PUSH
31048: LD_INT 0
31050: PUSH
31051: LD_INT 0
31053: PUSH
31054: LD_INT 0
31056: PUSH
31057: LD_INT 0
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: PUSH
31069: EMPTY
31070: LIST
31071: PPUSH
31072: CALL_OW 447
31076: GO 31019
31078: POP
31079: POP
// end ;
31080: LD_VAR 0 5
31084: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
31085: LD_EXP 109
31089: NOT
31090: IFFALSE 31140
31092: GO 31094
31094: DISABLE
// begin initHack := true ;
31095: LD_ADDR_EXP 109
31099: PUSH
31100: LD_INT 1
31102: ST_TO_ADDR
// hackTanks := [ ] ;
31103: LD_ADDR_EXP 110
31107: PUSH
31108: EMPTY
31109: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
31110: LD_ADDR_EXP 111
31114: PUSH
31115: EMPTY
31116: ST_TO_ADDR
// hackLimit := 3 ;
31117: LD_ADDR_EXP 112
31121: PUSH
31122: LD_INT 3
31124: ST_TO_ADDR
// hackDist := 12 ;
31125: LD_ADDR_EXP 113
31129: PUSH
31130: LD_INT 12
31132: ST_TO_ADDR
// hackCounter := [ ] ;
31133: LD_ADDR_EXP 114
31137: PUSH
31138: EMPTY
31139: ST_TO_ADDR
// end ;
31140: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
31141: LD_EXP 109
31145: PUSH
31146: LD_INT 34
31148: PUSH
31149: LD_EXP 121
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PPUSH
31158: CALL_OW 69
31162: AND
31163: IFFALSE 31418
31165: GO 31167
31167: DISABLE
31168: LD_INT 0
31170: PPUSH
31171: PPUSH
// begin enable ;
31172: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
31173: LD_ADDR_VAR 0 1
31177: PUSH
31178: LD_INT 34
31180: PUSH
31181: LD_EXP 121
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PPUSH
31190: CALL_OW 69
31194: PUSH
31195: FOR_IN
31196: IFFALSE 31416
// begin if not i in hackTanks then
31198: LD_VAR 0 1
31202: PUSH
31203: LD_EXP 110
31207: IN
31208: NOT
31209: IFFALSE 31292
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
31211: LD_ADDR_EXP 110
31215: PUSH
31216: LD_EXP 110
31220: PPUSH
31221: LD_EXP 110
31225: PUSH
31226: LD_INT 1
31228: PLUS
31229: PPUSH
31230: LD_VAR 0 1
31234: PPUSH
31235: CALL_OW 1
31239: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
31240: LD_ADDR_EXP 111
31244: PUSH
31245: LD_EXP 111
31249: PPUSH
31250: LD_EXP 111
31254: PUSH
31255: LD_INT 1
31257: PLUS
31258: PPUSH
31259: EMPTY
31260: PPUSH
31261: CALL_OW 1
31265: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
31266: LD_ADDR_EXP 114
31270: PUSH
31271: LD_EXP 114
31275: PPUSH
31276: LD_EXP 114
31280: PUSH
31281: LD_INT 1
31283: PLUS
31284: PPUSH
31285: EMPTY
31286: PPUSH
31287: CALL_OW 1
31291: ST_TO_ADDR
// end ; if not IsOk ( i ) then
31292: LD_VAR 0 1
31296: PPUSH
31297: CALL_OW 302
31301: NOT
31302: IFFALSE 31315
// begin HackUnlinkAll ( i ) ;
31304: LD_VAR 0 1
31308: PPUSH
31309: CALL 31421 0 1
// continue ;
31313: GO 31195
// end ; HackCheckCapturedStatus ( i ) ;
31315: LD_VAR 0 1
31319: PPUSH
31320: CALL 31864 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
31324: LD_ADDR_VAR 0 2
31328: PUSH
31329: LD_INT 81
31331: PUSH
31332: LD_VAR 0 1
31336: PPUSH
31337: CALL_OW 255
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 33
31348: PUSH
31349: LD_INT 3
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 91
31358: PUSH
31359: LD_VAR 0 1
31363: PUSH
31364: LD_EXP 113
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 50
31376: PUSH
31377: EMPTY
31378: LIST
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: PPUSH
31386: CALL_OW 69
31390: ST_TO_ADDR
// if not tmp then
31391: LD_VAR 0 2
31395: NOT
31396: IFFALSE 31400
// continue ;
31398: GO 31195
// HackLink ( i , tmp ) ;
31400: LD_VAR 0 1
31404: PPUSH
31405: LD_VAR 0 2
31409: PPUSH
31410: CALL 31557 0 2
// end ;
31414: GO 31195
31416: POP
31417: POP
// end ;
31418: PPOPN 2
31420: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
31421: LD_INT 0
31423: PPUSH
31424: PPUSH
31425: PPUSH
// if not hack in hackTanks then
31426: LD_VAR 0 1
31430: PUSH
31431: LD_EXP 110
31435: IN
31436: NOT
31437: IFFALSE 31441
// exit ;
31439: GO 31552
// index := GetElementIndex ( hackTanks , hack ) ;
31441: LD_ADDR_VAR 0 4
31445: PUSH
31446: LD_EXP 110
31450: PPUSH
31451: LD_VAR 0 1
31455: PPUSH
31456: CALL 39194 0 2
31460: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
31461: LD_EXP 111
31465: PUSH
31466: LD_VAR 0 4
31470: ARRAY
31471: IFFALSE 31552
// begin for i in hackTanksCaptured [ index ] do
31473: LD_ADDR_VAR 0 3
31477: PUSH
31478: LD_EXP 111
31482: PUSH
31483: LD_VAR 0 4
31487: ARRAY
31488: PUSH
31489: FOR_IN
31490: IFFALSE 31516
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
31492: LD_VAR 0 3
31496: PUSH
31497: LD_INT 1
31499: ARRAY
31500: PPUSH
31501: LD_VAR 0 3
31505: PUSH
31506: LD_INT 2
31508: ARRAY
31509: PPUSH
31510: CALL_OW 235
31514: GO 31489
31516: POP
31517: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
31518: LD_ADDR_EXP 111
31522: PUSH
31523: LD_EXP 111
31527: PPUSH
31528: LD_VAR 0 4
31532: PPUSH
31533: EMPTY
31534: PPUSH
31535: CALL_OW 1
31539: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
31540: LD_VAR 0 1
31544: PPUSH
31545: LD_INT 0
31547: PPUSH
31548: CALL_OW 505
// end ; end ;
31552: LD_VAR 0 2
31556: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
31557: LD_INT 0
31559: PPUSH
31560: PPUSH
31561: PPUSH
// if not hack in hackTanks or not vehicles then
31562: LD_VAR 0 1
31566: PUSH
31567: LD_EXP 110
31571: IN
31572: NOT
31573: PUSH
31574: LD_VAR 0 2
31578: NOT
31579: OR
31580: IFFALSE 31584
// exit ;
31582: GO 31859
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
31584: LD_ADDR_VAR 0 2
31588: PUSH
31589: LD_VAR 0 1
31593: PPUSH
31594: LD_VAR 0 2
31598: PPUSH
31599: LD_INT 1
31601: PPUSH
31602: LD_INT 1
31604: PPUSH
31605: CALL 39844 0 4
31609: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
31610: LD_ADDR_VAR 0 5
31614: PUSH
31615: LD_EXP 110
31619: PPUSH
31620: LD_VAR 0 1
31624: PPUSH
31625: CALL 39194 0 2
31629: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
31630: LD_EXP 111
31634: PUSH
31635: LD_VAR 0 5
31639: ARRAY
31640: PUSH
31641: LD_EXP 112
31645: LESS
31646: IFFALSE 31835
// begin for i := 1 to vehicles do
31648: LD_ADDR_VAR 0 4
31652: PUSH
31653: DOUBLE
31654: LD_INT 1
31656: DEC
31657: ST_TO_ADDR
31658: LD_VAR 0 2
31662: PUSH
31663: FOR_TO
31664: IFFALSE 31833
// begin if hackTanksCaptured [ index ] = hackLimit then
31666: LD_EXP 111
31670: PUSH
31671: LD_VAR 0 5
31675: ARRAY
31676: PUSH
31677: LD_EXP 112
31681: EQUAL
31682: IFFALSE 31686
// break ;
31684: GO 31833
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
31686: LD_ADDR_EXP 114
31690: PUSH
31691: LD_EXP 114
31695: PPUSH
31696: LD_VAR 0 5
31700: PPUSH
31701: LD_EXP 114
31705: PUSH
31706: LD_VAR 0 5
31710: ARRAY
31711: PUSH
31712: LD_INT 1
31714: PLUS
31715: PPUSH
31716: CALL_OW 1
31720: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
31721: LD_ADDR_EXP 111
31725: PUSH
31726: LD_EXP 111
31730: PPUSH
31731: LD_VAR 0 5
31735: PUSH
31736: LD_EXP 111
31740: PUSH
31741: LD_VAR 0 5
31745: ARRAY
31746: PUSH
31747: LD_INT 1
31749: PLUS
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PPUSH
31755: LD_VAR 0 2
31759: PUSH
31760: LD_VAR 0 4
31764: ARRAY
31765: PUSH
31766: LD_VAR 0 2
31770: PUSH
31771: LD_VAR 0 4
31775: ARRAY
31776: PPUSH
31777: CALL_OW 255
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PPUSH
31786: CALL 39409 0 3
31790: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
31791: LD_VAR 0 2
31795: PUSH
31796: LD_VAR 0 4
31800: ARRAY
31801: PPUSH
31802: LD_VAR 0 1
31806: PPUSH
31807: CALL_OW 255
31811: PPUSH
31812: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
31816: LD_VAR 0 2
31820: PUSH
31821: LD_VAR 0 4
31825: ARRAY
31826: PPUSH
31827: CALL_OW 141
// end ;
31831: GO 31663
31833: POP
31834: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31835: LD_VAR 0 1
31839: PPUSH
31840: LD_EXP 111
31844: PUSH
31845: LD_VAR 0 5
31849: ARRAY
31850: PUSH
31851: LD_INT 0
31853: PLUS
31854: PPUSH
31855: CALL_OW 505
// end ;
31859: LD_VAR 0 3
31863: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
31864: LD_INT 0
31866: PPUSH
31867: PPUSH
31868: PPUSH
31869: PPUSH
// if not hack in hackTanks then
31870: LD_VAR 0 1
31874: PUSH
31875: LD_EXP 110
31879: IN
31880: NOT
31881: IFFALSE 31885
// exit ;
31883: GO 32125
// index := GetElementIndex ( hackTanks , hack ) ;
31885: LD_ADDR_VAR 0 4
31889: PUSH
31890: LD_EXP 110
31894: PPUSH
31895: LD_VAR 0 1
31899: PPUSH
31900: CALL 39194 0 2
31904: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
31905: LD_ADDR_VAR 0 3
31909: PUSH
31910: DOUBLE
31911: LD_EXP 111
31915: PUSH
31916: LD_VAR 0 4
31920: ARRAY
31921: INC
31922: ST_TO_ADDR
31923: LD_INT 1
31925: PUSH
31926: FOR_DOWNTO
31927: IFFALSE 32099
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
31929: LD_ADDR_VAR 0 5
31933: PUSH
31934: LD_EXP 111
31938: PUSH
31939: LD_VAR 0 4
31943: ARRAY
31944: PUSH
31945: LD_VAR 0 3
31949: ARRAY
31950: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
31951: LD_VAR 0 5
31955: PUSH
31956: LD_INT 1
31958: ARRAY
31959: PPUSH
31960: CALL_OW 302
31964: NOT
31965: PUSH
31966: LD_VAR 0 5
31970: PUSH
31971: LD_INT 1
31973: ARRAY
31974: PPUSH
31975: CALL_OW 255
31979: PUSH
31980: LD_VAR 0 1
31984: PPUSH
31985: CALL_OW 255
31989: NONEQUAL
31990: OR
31991: IFFALSE 32097
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
31993: LD_VAR 0 5
31997: PUSH
31998: LD_INT 1
32000: ARRAY
32001: PPUSH
32002: CALL_OW 305
32006: PUSH
32007: LD_VAR 0 5
32011: PUSH
32012: LD_INT 1
32014: ARRAY
32015: PPUSH
32016: CALL_OW 255
32020: PUSH
32021: LD_VAR 0 1
32025: PPUSH
32026: CALL_OW 255
32030: EQUAL
32031: AND
32032: IFFALSE 32056
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
32034: LD_VAR 0 5
32038: PUSH
32039: LD_INT 1
32041: ARRAY
32042: PPUSH
32043: LD_VAR 0 5
32047: PUSH
32048: LD_INT 2
32050: ARRAY
32051: PPUSH
32052: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
32056: LD_ADDR_EXP 111
32060: PUSH
32061: LD_EXP 111
32065: PPUSH
32066: LD_VAR 0 4
32070: PPUSH
32071: LD_EXP 111
32075: PUSH
32076: LD_VAR 0 4
32080: ARRAY
32081: PPUSH
32082: LD_VAR 0 3
32086: PPUSH
32087: CALL_OW 3
32091: PPUSH
32092: CALL_OW 1
32096: ST_TO_ADDR
// end ; end ;
32097: GO 31926
32099: POP
32100: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32101: LD_VAR 0 1
32105: PPUSH
32106: LD_EXP 111
32110: PUSH
32111: LD_VAR 0 4
32115: ARRAY
32116: PUSH
32117: LD_INT 0
32119: PLUS
32120: PPUSH
32121: CALL_OW 505
// end ;
32125: LD_VAR 0 2
32129: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
32130: LD_INT 0
32132: PPUSH
32133: PPUSH
32134: PPUSH
32135: PPUSH
// if not hack in hackTanks then
32136: LD_VAR 0 1
32140: PUSH
32141: LD_EXP 110
32145: IN
32146: NOT
32147: IFFALSE 32151
// exit ;
32149: GO 32236
// index := GetElementIndex ( hackTanks , hack ) ;
32151: LD_ADDR_VAR 0 5
32155: PUSH
32156: LD_EXP 110
32160: PPUSH
32161: LD_VAR 0 1
32165: PPUSH
32166: CALL 39194 0 2
32170: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
32171: LD_ADDR_VAR 0 4
32175: PUSH
32176: DOUBLE
32177: LD_INT 1
32179: DEC
32180: ST_TO_ADDR
32181: LD_EXP 111
32185: PUSH
32186: LD_VAR 0 5
32190: ARRAY
32191: PUSH
32192: FOR_TO
32193: IFFALSE 32234
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
32195: LD_EXP 111
32199: PUSH
32200: LD_VAR 0 5
32204: ARRAY
32205: PUSH
32206: LD_VAR 0 4
32210: ARRAY
32211: PUSH
32212: LD_INT 1
32214: ARRAY
32215: PUSH
32216: LD_VAR 0 2
32220: EQUAL
32221: IFFALSE 32232
// KillUnit ( vehicle ) ;
32223: LD_VAR 0 2
32227: PPUSH
32228: CALL_OW 66
32232: GO 32192
32234: POP
32235: POP
// end ;
32236: LD_VAR 0 3
32240: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
32241: LD_EXP 115
32245: NOT
32246: IFFALSE 32281
32248: GO 32250
32250: DISABLE
// begin initMiner := true ;
32251: LD_ADDR_EXP 115
32255: PUSH
32256: LD_INT 1
32258: ST_TO_ADDR
// minersList := [ ] ;
32259: LD_ADDR_EXP 116
32263: PUSH
32264: EMPTY
32265: ST_TO_ADDR
// minerMinesList := [ ] ;
32266: LD_ADDR_EXP 117
32270: PUSH
32271: EMPTY
32272: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
32273: LD_ADDR_EXP 118
32277: PUSH
32278: LD_INT 5
32280: ST_TO_ADDR
// end ;
32281: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
32282: LD_EXP 115
32286: PUSH
32287: LD_INT 34
32289: PUSH
32290: LD_EXP 126
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PPUSH
32299: CALL_OW 69
32303: AND
32304: IFFALSE 32767
32306: GO 32308
32308: DISABLE
32309: LD_INT 0
32311: PPUSH
32312: PPUSH
32313: PPUSH
32314: PPUSH
// begin enable ;
32315: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
32316: LD_ADDR_VAR 0 1
32320: PUSH
32321: LD_INT 34
32323: PUSH
32324: LD_EXP 126
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PPUSH
32333: CALL_OW 69
32337: PUSH
32338: FOR_IN
32339: IFFALSE 32411
// begin if not i in minersList then
32341: LD_VAR 0 1
32345: PUSH
32346: LD_EXP 116
32350: IN
32351: NOT
32352: IFFALSE 32409
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
32354: LD_ADDR_EXP 116
32358: PUSH
32359: LD_EXP 116
32363: PPUSH
32364: LD_EXP 116
32368: PUSH
32369: LD_INT 1
32371: PLUS
32372: PPUSH
32373: LD_VAR 0 1
32377: PPUSH
32378: CALL_OW 1
32382: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
32383: LD_ADDR_EXP 117
32387: PUSH
32388: LD_EXP 117
32392: PPUSH
32393: LD_EXP 117
32397: PUSH
32398: LD_INT 1
32400: PLUS
32401: PPUSH
32402: EMPTY
32403: PPUSH
32404: CALL_OW 1
32408: ST_TO_ADDR
// end end ;
32409: GO 32338
32411: POP
32412: POP
// for i := minerMinesList downto 1 do
32413: LD_ADDR_VAR 0 1
32417: PUSH
32418: DOUBLE
32419: LD_EXP 117
32423: INC
32424: ST_TO_ADDR
32425: LD_INT 1
32427: PUSH
32428: FOR_DOWNTO
32429: IFFALSE 32765
// begin if IsLive ( minersList [ i ] ) then
32431: LD_EXP 116
32435: PUSH
32436: LD_VAR 0 1
32440: ARRAY
32441: PPUSH
32442: CALL_OW 300
32446: IFFALSE 32474
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
32448: LD_EXP 116
32452: PUSH
32453: LD_VAR 0 1
32457: ARRAY
32458: PPUSH
32459: LD_EXP 117
32463: PUSH
32464: LD_VAR 0 1
32468: ARRAY
32469: PPUSH
32470: CALL_OW 505
// if not minerMinesList [ i ] then
32474: LD_EXP 117
32478: PUSH
32479: LD_VAR 0 1
32483: ARRAY
32484: NOT
32485: IFFALSE 32489
// continue ;
32487: GO 32428
// for j := minerMinesList [ i ] downto 1 do
32489: LD_ADDR_VAR 0 2
32493: PUSH
32494: DOUBLE
32495: LD_EXP 117
32499: PUSH
32500: LD_VAR 0 1
32504: ARRAY
32505: INC
32506: ST_TO_ADDR
32507: LD_INT 1
32509: PUSH
32510: FOR_DOWNTO
32511: IFFALSE 32761
// begin side := GetSide ( minersList [ i ] ) ;
32513: LD_ADDR_VAR 0 3
32517: PUSH
32518: LD_EXP 116
32522: PUSH
32523: LD_VAR 0 1
32527: ARRAY
32528: PPUSH
32529: CALL_OW 255
32533: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
32534: LD_ADDR_VAR 0 4
32538: PUSH
32539: LD_EXP 117
32543: PUSH
32544: LD_VAR 0 1
32548: ARRAY
32549: PUSH
32550: LD_VAR 0 2
32554: ARRAY
32555: PUSH
32556: LD_INT 1
32558: ARRAY
32559: PPUSH
32560: LD_EXP 117
32564: PUSH
32565: LD_VAR 0 1
32569: ARRAY
32570: PUSH
32571: LD_VAR 0 2
32575: ARRAY
32576: PUSH
32577: LD_INT 2
32579: ARRAY
32580: PPUSH
32581: CALL_OW 428
32585: ST_TO_ADDR
// if not tmp then
32586: LD_VAR 0 4
32590: NOT
32591: IFFALSE 32595
// continue ;
32593: GO 32510
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
32595: LD_VAR 0 4
32599: PUSH
32600: LD_INT 81
32602: PUSH
32603: LD_VAR 0 3
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PPUSH
32612: CALL_OW 69
32616: IN
32617: PUSH
32618: LD_EXP 117
32622: PUSH
32623: LD_VAR 0 1
32627: ARRAY
32628: PUSH
32629: LD_VAR 0 2
32633: ARRAY
32634: PUSH
32635: LD_INT 1
32637: ARRAY
32638: PPUSH
32639: LD_EXP 117
32643: PUSH
32644: LD_VAR 0 1
32648: ARRAY
32649: PUSH
32650: LD_VAR 0 2
32654: ARRAY
32655: PUSH
32656: LD_INT 2
32658: ARRAY
32659: PPUSH
32660: CALL_OW 458
32664: AND
32665: IFFALSE 32759
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
32667: LD_EXP 117
32671: PUSH
32672: LD_VAR 0 1
32676: ARRAY
32677: PUSH
32678: LD_VAR 0 2
32682: ARRAY
32683: PUSH
32684: LD_INT 1
32686: ARRAY
32687: PPUSH
32688: LD_EXP 117
32692: PUSH
32693: LD_VAR 0 1
32697: ARRAY
32698: PUSH
32699: LD_VAR 0 2
32703: ARRAY
32704: PUSH
32705: LD_INT 2
32707: ARRAY
32708: PPUSH
32709: LD_VAR 0 3
32713: PPUSH
32714: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
32718: LD_ADDR_EXP 117
32722: PUSH
32723: LD_EXP 117
32727: PPUSH
32728: LD_VAR 0 1
32732: PPUSH
32733: LD_EXP 117
32737: PUSH
32738: LD_VAR 0 1
32742: ARRAY
32743: PPUSH
32744: LD_VAR 0 2
32748: PPUSH
32749: CALL_OW 3
32753: PPUSH
32754: CALL_OW 1
32758: ST_TO_ADDR
// end ; end ;
32759: GO 32510
32761: POP
32762: POP
// end ;
32763: GO 32428
32765: POP
32766: POP
// end ;
32767: PPOPN 4
32769: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
32770: LD_INT 0
32772: PPUSH
32773: PPUSH
// result := false ;
32774: LD_ADDR_VAR 0 4
32778: PUSH
32779: LD_INT 0
32781: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
32782: LD_VAR 0 1
32786: PPUSH
32787: CALL_OW 264
32791: PUSH
32792: LD_EXP 126
32796: EQUAL
32797: NOT
32798: IFFALSE 32802
// exit ;
32800: GO 33042
// index := GetElementIndex ( minersList , unit ) ;
32802: LD_ADDR_VAR 0 5
32806: PUSH
32807: LD_EXP 116
32811: PPUSH
32812: LD_VAR 0 1
32816: PPUSH
32817: CALL 39194 0 2
32821: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
32822: LD_EXP 117
32826: PUSH
32827: LD_VAR 0 5
32831: ARRAY
32832: PUSH
32833: LD_EXP 118
32837: GREATEREQUAL
32838: IFFALSE 32842
// exit ;
32840: GO 33042
// ComMoveXY ( unit , x , y ) ;
32842: LD_VAR 0 1
32846: PPUSH
32847: LD_VAR 0 2
32851: PPUSH
32852: LD_VAR 0 3
32856: PPUSH
32857: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32861: LD_INT 35
32863: PPUSH
32864: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
32868: LD_VAR 0 1
32872: PPUSH
32873: LD_VAR 0 2
32877: PPUSH
32878: LD_VAR 0 3
32882: PPUSH
32883: CALL 69967 0 3
32887: NOT
32888: PUSH
32889: LD_VAR 0 1
32893: PPUSH
32894: CALL_OW 314
32898: AND
32899: IFFALSE 32903
// exit ;
32901: GO 33042
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
32903: LD_VAR 0 2
32907: PPUSH
32908: LD_VAR 0 3
32912: PPUSH
32913: CALL_OW 428
32917: PUSH
32918: LD_VAR 0 1
32922: EQUAL
32923: PUSH
32924: LD_VAR 0 1
32928: PPUSH
32929: CALL_OW 314
32933: NOT
32934: AND
32935: IFFALSE 32861
// PlaySoundXY ( x , y , PlantMine ) ;
32937: LD_VAR 0 2
32941: PPUSH
32942: LD_VAR 0 3
32946: PPUSH
32947: LD_STRING PlantMine
32949: PPUSH
32950: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
32954: LD_VAR 0 2
32958: PPUSH
32959: LD_VAR 0 3
32963: PPUSH
32964: LD_VAR 0 1
32968: PPUSH
32969: CALL_OW 255
32973: PPUSH
32974: LD_INT 0
32976: PPUSH
32977: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
32981: LD_ADDR_EXP 117
32985: PUSH
32986: LD_EXP 117
32990: PPUSH
32991: LD_VAR 0 5
32995: PUSH
32996: LD_EXP 117
33000: PUSH
33001: LD_VAR 0 5
33005: ARRAY
33006: PUSH
33007: LD_INT 1
33009: PLUS
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PPUSH
33015: LD_VAR 0 2
33019: PUSH
33020: LD_VAR 0 3
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PPUSH
33029: CALL 39409 0 3
33033: ST_TO_ADDR
// result := true ;
33034: LD_ADDR_VAR 0 4
33038: PUSH
33039: LD_INT 1
33041: ST_TO_ADDR
// end ;
33042: LD_VAR 0 4
33046: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
33047: LD_INT 0
33049: PPUSH
33050: PPUSH
33051: PPUSH
// if not unit in minersList then
33052: LD_VAR 0 1
33056: PUSH
33057: LD_EXP 116
33061: IN
33062: NOT
33063: IFFALSE 33067
// exit ;
33065: GO 33459
// index := GetElementIndex ( minersList , unit ) ;
33067: LD_ADDR_VAR 0 6
33071: PUSH
33072: LD_EXP 116
33076: PPUSH
33077: LD_VAR 0 1
33081: PPUSH
33082: CALL 39194 0 2
33086: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
33087: LD_ADDR_VAR 0 5
33091: PUSH
33092: DOUBLE
33093: LD_EXP 117
33097: PUSH
33098: LD_VAR 0 6
33102: ARRAY
33103: INC
33104: ST_TO_ADDR
33105: LD_INT 1
33107: PUSH
33108: FOR_DOWNTO
33109: IFFALSE 33270
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
33111: LD_EXP 117
33115: PUSH
33116: LD_VAR 0 6
33120: ARRAY
33121: PUSH
33122: LD_VAR 0 5
33126: ARRAY
33127: PUSH
33128: LD_INT 1
33130: ARRAY
33131: PUSH
33132: LD_VAR 0 2
33136: EQUAL
33137: PUSH
33138: LD_EXP 117
33142: PUSH
33143: LD_VAR 0 6
33147: ARRAY
33148: PUSH
33149: LD_VAR 0 5
33153: ARRAY
33154: PUSH
33155: LD_INT 2
33157: ARRAY
33158: PUSH
33159: LD_VAR 0 3
33163: EQUAL
33164: AND
33165: IFFALSE 33268
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
33167: LD_EXP 117
33171: PUSH
33172: LD_VAR 0 6
33176: ARRAY
33177: PUSH
33178: LD_VAR 0 5
33182: ARRAY
33183: PUSH
33184: LD_INT 1
33186: ARRAY
33187: PPUSH
33188: LD_EXP 117
33192: PUSH
33193: LD_VAR 0 6
33197: ARRAY
33198: PUSH
33199: LD_VAR 0 5
33203: ARRAY
33204: PUSH
33205: LD_INT 2
33207: ARRAY
33208: PPUSH
33209: LD_VAR 0 1
33213: PPUSH
33214: CALL_OW 255
33218: PPUSH
33219: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
33223: LD_ADDR_EXP 117
33227: PUSH
33228: LD_EXP 117
33232: PPUSH
33233: LD_VAR 0 6
33237: PPUSH
33238: LD_EXP 117
33242: PUSH
33243: LD_VAR 0 6
33247: ARRAY
33248: PPUSH
33249: LD_VAR 0 5
33253: PPUSH
33254: CALL_OW 3
33258: PPUSH
33259: CALL_OW 1
33263: ST_TO_ADDR
// exit ;
33264: POP
33265: POP
33266: GO 33459
// end ; end ;
33268: GO 33108
33270: POP
33271: POP
// for i := minerMinesList [ index ] downto 1 do
33272: LD_ADDR_VAR 0 5
33276: PUSH
33277: DOUBLE
33278: LD_EXP 117
33282: PUSH
33283: LD_VAR 0 6
33287: ARRAY
33288: INC
33289: ST_TO_ADDR
33290: LD_INT 1
33292: PUSH
33293: FOR_DOWNTO
33294: IFFALSE 33457
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
33296: LD_EXP 117
33300: PUSH
33301: LD_VAR 0 6
33305: ARRAY
33306: PUSH
33307: LD_VAR 0 5
33311: ARRAY
33312: PUSH
33313: LD_INT 1
33315: ARRAY
33316: PPUSH
33317: LD_EXP 117
33321: PUSH
33322: LD_VAR 0 6
33326: ARRAY
33327: PUSH
33328: LD_VAR 0 5
33332: ARRAY
33333: PUSH
33334: LD_INT 2
33336: ARRAY
33337: PPUSH
33338: LD_VAR 0 2
33342: PPUSH
33343: LD_VAR 0 3
33347: PPUSH
33348: CALL_OW 298
33352: PUSH
33353: LD_INT 6
33355: LESS
33356: IFFALSE 33455
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
33358: LD_EXP 117
33362: PUSH
33363: LD_VAR 0 6
33367: ARRAY
33368: PUSH
33369: LD_VAR 0 5
33373: ARRAY
33374: PUSH
33375: LD_INT 1
33377: ARRAY
33378: PPUSH
33379: LD_EXP 117
33383: PUSH
33384: LD_VAR 0 6
33388: ARRAY
33389: PUSH
33390: LD_VAR 0 5
33394: ARRAY
33395: PUSH
33396: LD_INT 2
33398: ARRAY
33399: PPUSH
33400: LD_VAR 0 1
33404: PPUSH
33405: CALL_OW 255
33409: PPUSH
33410: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
33414: LD_ADDR_EXP 117
33418: PUSH
33419: LD_EXP 117
33423: PPUSH
33424: LD_VAR 0 6
33428: PPUSH
33429: LD_EXP 117
33433: PUSH
33434: LD_VAR 0 6
33438: ARRAY
33439: PPUSH
33440: LD_VAR 0 5
33444: PPUSH
33445: CALL_OW 3
33449: PPUSH
33450: CALL_OW 1
33454: ST_TO_ADDR
// end ; end ;
33455: GO 33293
33457: POP
33458: POP
// end ;
33459: LD_VAR 0 4
33463: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
33464: LD_INT 0
33466: PPUSH
33467: PPUSH
33468: PPUSH
33469: PPUSH
33470: PPUSH
33471: PPUSH
33472: PPUSH
33473: PPUSH
33474: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
33475: LD_VAR 0 1
33479: PPUSH
33480: CALL_OW 264
33484: PUSH
33485: LD_EXP 126
33489: EQUAL
33490: NOT
33491: PUSH
33492: LD_VAR 0 1
33496: PUSH
33497: LD_EXP 116
33501: IN
33502: NOT
33503: OR
33504: IFFALSE 33508
// exit ;
33506: GO 33830
// index := GetElementIndex ( minersList , unit ) ;
33508: LD_ADDR_VAR 0 6
33512: PUSH
33513: LD_EXP 116
33517: PPUSH
33518: LD_VAR 0 1
33522: PPUSH
33523: CALL 39194 0 2
33527: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
33528: LD_ADDR_VAR 0 8
33532: PUSH
33533: LD_EXP 118
33537: PUSH
33538: LD_EXP 117
33542: PUSH
33543: LD_VAR 0 6
33547: ARRAY
33548: MINUS
33549: ST_TO_ADDR
// if not minesFreeAmount then
33550: LD_VAR 0 8
33554: NOT
33555: IFFALSE 33559
// exit ;
33557: GO 33830
// tmp := [ ] ;
33559: LD_ADDR_VAR 0 7
33563: PUSH
33564: EMPTY
33565: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
33566: LD_ADDR_VAR 0 5
33570: PUSH
33571: DOUBLE
33572: LD_INT 1
33574: DEC
33575: ST_TO_ADDR
33576: LD_VAR 0 8
33580: PUSH
33581: FOR_TO
33582: IFFALSE 33777
// begin _d := rand ( 0 , 5 ) ;
33584: LD_ADDR_VAR 0 11
33588: PUSH
33589: LD_INT 0
33591: PPUSH
33592: LD_INT 5
33594: PPUSH
33595: CALL_OW 12
33599: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
33600: LD_ADDR_VAR 0 12
33604: PUSH
33605: LD_INT 2
33607: PPUSH
33608: LD_INT 6
33610: PPUSH
33611: CALL_OW 12
33615: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
33616: LD_ADDR_VAR 0 9
33620: PUSH
33621: LD_VAR 0 2
33625: PPUSH
33626: LD_VAR 0 11
33630: PPUSH
33631: LD_VAR 0 12
33635: PPUSH
33636: CALL_OW 272
33640: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
33641: LD_ADDR_VAR 0 10
33645: PUSH
33646: LD_VAR 0 3
33650: PPUSH
33651: LD_VAR 0 11
33655: PPUSH
33656: LD_VAR 0 12
33660: PPUSH
33661: CALL_OW 273
33665: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
33666: LD_VAR 0 9
33670: PPUSH
33671: LD_VAR 0 10
33675: PPUSH
33676: CALL_OW 488
33680: PUSH
33681: LD_VAR 0 9
33685: PUSH
33686: LD_VAR 0 10
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_VAR 0 7
33699: IN
33700: NOT
33701: AND
33702: PUSH
33703: LD_VAR 0 9
33707: PPUSH
33708: LD_VAR 0 10
33712: PPUSH
33713: CALL_OW 458
33717: NOT
33718: AND
33719: IFFALSE 33761
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
33721: LD_ADDR_VAR 0 7
33725: PUSH
33726: LD_VAR 0 7
33730: PPUSH
33731: LD_VAR 0 7
33735: PUSH
33736: LD_INT 1
33738: PLUS
33739: PPUSH
33740: LD_VAR 0 9
33744: PUSH
33745: LD_VAR 0 10
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PPUSH
33754: CALL_OW 1
33758: ST_TO_ADDR
33759: GO 33775
// i := i - 1 ;
33761: LD_ADDR_VAR 0 5
33765: PUSH
33766: LD_VAR 0 5
33770: PUSH
33771: LD_INT 1
33773: MINUS
33774: ST_TO_ADDR
// end ;
33775: GO 33581
33777: POP
33778: POP
// for i in tmp do
33779: LD_ADDR_VAR 0 5
33783: PUSH
33784: LD_VAR 0 7
33788: PUSH
33789: FOR_IN
33790: IFFALSE 33828
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
33792: LD_VAR 0 1
33796: PPUSH
33797: LD_VAR 0 5
33801: PUSH
33802: LD_INT 1
33804: ARRAY
33805: PPUSH
33806: LD_VAR 0 5
33810: PUSH
33811: LD_INT 2
33813: ARRAY
33814: PPUSH
33815: CALL 32770 0 3
33819: NOT
33820: IFFALSE 33826
// exit ;
33822: POP
33823: POP
33824: GO 33830
33826: GO 33789
33828: POP
33829: POP
// end ;
33830: LD_VAR 0 4
33834: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
33835: LD_INT 0
33837: PPUSH
33838: PPUSH
33839: PPUSH
33840: PPUSH
33841: PPUSH
33842: PPUSH
33843: PPUSH
// if not GetClass ( unit ) = class_sniper then
33844: LD_VAR 0 1
33848: PPUSH
33849: CALL_OW 257
33853: PUSH
33854: LD_INT 5
33856: EQUAL
33857: NOT
33858: IFFALSE 33862
// exit ;
33860: GO 34250
// dist := 8 ;
33862: LD_ADDR_VAR 0 5
33866: PUSH
33867: LD_INT 8
33869: ST_TO_ADDR
// viewRange := 12 ;
33870: LD_ADDR_VAR 0 7
33874: PUSH
33875: LD_INT 12
33877: ST_TO_ADDR
// side := GetSide ( unit ) ;
33878: LD_ADDR_VAR 0 6
33882: PUSH
33883: LD_VAR 0 1
33887: PPUSH
33888: CALL_OW 255
33892: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
33893: LD_INT 61
33895: PPUSH
33896: LD_VAR 0 6
33900: PPUSH
33901: CALL_OW 321
33905: PUSH
33906: LD_INT 2
33908: EQUAL
33909: IFFALSE 33919
// viewRange := 16 ;
33911: LD_ADDR_VAR 0 7
33915: PUSH
33916: LD_INT 16
33918: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
33919: LD_VAR 0 1
33923: PPUSH
33924: LD_VAR 0 2
33928: PPUSH
33929: LD_VAR 0 3
33933: PPUSH
33934: CALL_OW 297
33938: PUSH
33939: LD_VAR 0 5
33943: GREATER
33944: IFFALSE 34023
// begin ComMoveXY ( unit , x , y ) ;
33946: LD_VAR 0 1
33950: PPUSH
33951: LD_VAR 0 2
33955: PPUSH
33956: LD_VAR 0 3
33960: PPUSH
33961: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33965: LD_INT 35
33967: PPUSH
33968: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
33972: LD_VAR 0 1
33976: PPUSH
33977: LD_VAR 0 2
33981: PPUSH
33982: LD_VAR 0 3
33986: PPUSH
33987: CALL 69967 0 3
33991: NOT
33992: IFFALSE 33996
// exit ;
33994: GO 34250
// until GetDistUnitXY ( unit , x , y ) < dist ;
33996: LD_VAR 0 1
34000: PPUSH
34001: LD_VAR 0 2
34005: PPUSH
34006: LD_VAR 0 3
34010: PPUSH
34011: CALL_OW 297
34015: PUSH
34016: LD_VAR 0 5
34020: LESS
34021: IFFALSE 33965
// end ; ComTurnXY ( unit , x , y ) ;
34023: LD_VAR 0 1
34027: PPUSH
34028: LD_VAR 0 2
34032: PPUSH
34033: LD_VAR 0 3
34037: PPUSH
34038: CALL_OW 118
// wait ( 5 ) ;
34042: LD_INT 5
34044: PPUSH
34045: CALL_OW 67
// _d := GetDir ( unit ) ;
34049: LD_ADDR_VAR 0 10
34053: PUSH
34054: LD_VAR 0 1
34058: PPUSH
34059: CALL_OW 254
34063: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
34064: LD_ADDR_VAR 0 8
34068: PUSH
34069: LD_VAR 0 1
34073: PPUSH
34074: CALL_OW 250
34078: PPUSH
34079: LD_VAR 0 10
34083: PPUSH
34084: LD_VAR 0 5
34088: PPUSH
34089: CALL_OW 272
34093: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
34094: LD_ADDR_VAR 0 9
34098: PUSH
34099: LD_VAR 0 1
34103: PPUSH
34104: CALL_OW 251
34108: PPUSH
34109: LD_VAR 0 10
34113: PPUSH
34114: LD_VAR 0 5
34118: PPUSH
34119: CALL_OW 273
34123: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34124: LD_VAR 0 8
34128: PPUSH
34129: LD_VAR 0 9
34133: PPUSH
34134: CALL_OW 488
34138: NOT
34139: IFFALSE 34143
// exit ;
34141: GO 34250
// ComAnimCustom ( unit , 1 ) ;
34143: LD_VAR 0 1
34147: PPUSH
34148: LD_INT 1
34150: PPUSH
34151: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
34155: LD_VAR 0 8
34159: PPUSH
34160: LD_VAR 0 9
34164: PPUSH
34165: LD_VAR 0 6
34169: PPUSH
34170: LD_VAR 0 7
34174: PPUSH
34175: CALL_OW 330
// repeat wait ( 1 ) ;
34179: LD_INT 1
34181: PPUSH
34182: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
34186: LD_VAR 0 1
34190: PPUSH
34191: CALL_OW 316
34195: PUSH
34196: LD_VAR 0 1
34200: PPUSH
34201: CALL_OW 314
34205: OR
34206: PUSH
34207: LD_VAR 0 1
34211: PPUSH
34212: CALL_OW 302
34216: NOT
34217: OR
34218: PUSH
34219: LD_VAR 0 1
34223: PPUSH
34224: CALL_OW 301
34228: OR
34229: IFFALSE 34179
// RemoveSeeing ( _x , _y , side ) ;
34231: LD_VAR 0 8
34235: PPUSH
34236: LD_VAR 0 9
34240: PPUSH
34241: LD_VAR 0 6
34245: PPUSH
34246: CALL_OW 331
// end ; end_of_file
34250: LD_VAR 0 4
34254: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
34255: LD_INT 0
34257: PPUSH
// ar_miner := 81 ;
34258: LD_ADDR_EXP 126
34262: PUSH
34263: LD_INT 81
34265: ST_TO_ADDR
// ar_crane := 88 ;
34266: LD_ADDR_EXP 125
34270: PUSH
34271: LD_INT 88
34273: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
34274: LD_ADDR_EXP 120
34278: PUSH
34279: LD_INT 89
34281: ST_TO_ADDR
// us_hack := 99 ;
34282: LD_ADDR_EXP 121
34286: PUSH
34287: LD_INT 99
34289: ST_TO_ADDR
// us_artillery := 97 ;
34290: LD_ADDR_EXP 122
34294: PUSH
34295: LD_INT 97
34297: ST_TO_ADDR
// ar_bio_bomb := 91 ;
34298: LD_ADDR_EXP 123
34302: PUSH
34303: LD_INT 91
34305: ST_TO_ADDR
// ar_mortar := 92 ;
34306: LD_ADDR_EXP 124
34310: PUSH
34311: LD_INT 92
34313: ST_TO_ADDR
// ru_radar := 98 ;
34314: LD_ADDR_EXP 119
34318: PUSH
34319: LD_INT 98
34321: ST_TO_ADDR
// tech_Artillery := 80 ;
34322: LD_ADDR_EXP 127
34326: PUSH
34327: LD_INT 80
34329: ST_TO_ADDR
// tech_RadMat := 81 ;
34330: LD_ADDR_EXP 128
34334: PUSH
34335: LD_INT 81
34337: ST_TO_ADDR
// tech_BasicTools := 82 ;
34338: LD_ADDR_EXP 129
34342: PUSH
34343: LD_INT 82
34345: ST_TO_ADDR
// tech_Cargo := 83 ;
34346: LD_ADDR_EXP 130
34350: PUSH
34351: LD_INT 83
34353: ST_TO_ADDR
// tech_Track := 84 ;
34354: LD_ADDR_EXP 131
34358: PUSH
34359: LD_INT 84
34361: ST_TO_ADDR
// tech_Crane := 85 ;
34362: LD_ADDR_EXP 132
34366: PUSH
34367: LD_INT 85
34369: ST_TO_ADDR
// tech_Bulldozer := 86 ;
34370: LD_ADDR_EXP 133
34374: PUSH
34375: LD_INT 86
34377: ST_TO_ADDR
// tech_Hovercraft := 87 ;
34378: LD_ADDR_EXP 134
34382: PUSH
34383: LD_INT 87
34385: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
34386: LD_ADDR_EXP 135
34390: PUSH
34391: LD_INT 88
34393: ST_TO_ADDR
// class_mastodont := 31 ;
34394: LD_ADDR_EXP 136
34398: PUSH
34399: LD_INT 31
34401: ST_TO_ADDR
// class_horse := 21 ;
34402: LD_ADDR_EXP 137
34406: PUSH
34407: LD_INT 21
34409: ST_TO_ADDR
// end ;
34410: LD_VAR 0 1
34414: RET
// every 1 do
34415: GO 34417
34417: DISABLE
// InitGlobalVariables ; end_of_file
34418: CALL 34255 0 0
34422: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
34423: LD_INT 0
34425: PPUSH
34426: PPUSH
// if exist_mode then
34427: LD_VAR 0 2
34431: IFFALSE 34456
// unit := CreateCharacter ( prefix & ident ) else
34433: LD_ADDR_VAR 0 5
34437: PUSH
34438: LD_VAR 0 3
34442: PUSH
34443: LD_VAR 0 1
34447: STR
34448: PPUSH
34449: CALL_OW 34
34453: ST_TO_ADDR
34454: GO 34471
// unit := NewCharacter ( ident ) ;
34456: LD_ADDR_VAR 0 5
34460: PUSH
34461: LD_VAR 0 1
34465: PPUSH
34466: CALL_OW 25
34470: ST_TO_ADDR
// result := unit ;
34471: LD_ADDR_VAR 0 4
34475: PUSH
34476: LD_VAR 0 5
34480: ST_TO_ADDR
// end ;
34481: LD_VAR 0 4
34485: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
34486: LD_INT 0
34488: PPUSH
34489: PPUSH
// if not side or not nation then
34490: LD_VAR 0 1
34494: NOT
34495: PUSH
34496: LD_VAR 0 2
34500: NOT
34501: OR
34502: IFFALSE 34506
// exit ;
34504: GO 35274
// case nation of nation_american :
34506: LD_VAR 0 2
34510: PUSH
34511: LD_INT 1
34513: DOUBLE
34514: EQUAL
34515: IFTRUE 34519
34517: GO 34733
34519: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
34520: LD_ADDR_VAR 0 4
34524: PUSH
34525: LD_INT 35
34527: PUSH
34528: LD_INT 45
34530: PUSH
34531: LD_INT 46
34533: PUSH
34534: LD_INT 47
34536: PUSH
34537: LD_INT 82
34539: PUSH
34540: LD_INT 83
34542: PUSH
34543: LD_INT 84
34545: PUSH
34546: LD_INT 85
34548: PUSH
34549: LD_INT 86
34551: PUSH
34552: LD_INT 1
34554: PUSH
34555: LD_INT 2
34557: PUSH
34558: LD_INT 6
34560: PUSH
34561: LD_INT 15
34563: PUSH
34564: LD_INT 16
34566: PUSH
34567: LD_INT 7
34569: PUSH
34570: LD_INT 12
34572: PUSH
34573: LD_INT 13
34575: PUSH
34576: LD_INT 10
34578: PUSH
34579: LD_INT 14
34581: PUSH
34582: LD_INT 20
34584: PUSH
34585: LD_INT 21
34587: PUSH
34588: LD_INT 22
34590: PUSH
34591: LD_INT 25
34593: PUSH
34594: LD_INT 32
34596: PUSH
34597: LD_INT 27
34599: PUSH
34600: LD_INT 36
34602: PUSH
34603: LD_INT 69
34605: PUSH
34606: LD_INT 39
34608: PUSH
34609: LD_INT 34
34611: PUSH
34612: LD_INT 40
34614: PUSH
34615: LD_INT 48
34617: PUSH
34618: LD_INT 49
34620: PUSH
34621: LD_INT 50
34623: PUSH
34624: LD_INT 51
34626: PUSH
34627: LD_INT 52
34629: PUSH
34630: LD_INT 53
34632: PUSH
34633: LD_INT 54
34635: PUSH
34636: LD_INT 55
34638: PUSH
34639: LD_INT 56
34641: PUSH
34642: LD_INT 57
34644: PUSH
34645: LD_INT 58
34647: PUSH
34648: LD_INT 59
34650: PUSH
34651: LD_INT 60
34653: PUSH
34654: LD_INT 61
34656: PUSH
34657: LD_INT 62
34659: PUSH
34660: LD_INT 80
34662: PUSH
34663: LD_INT 82
34665: PUSH
34666: LD_INT 83
34668: PUSH
34669: LD_INT 84
34671: PUSH
34672: LD_INT 85
34674: PUSH
34675: LD_INT 86
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: ST_TO_ADDR
34731: GO 35198
34733: LD_INT 2
34735: DOUBLE
34736: EQUAL
34737: IFTRUE 34741
34739: GO 34967
34741: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
34742: LD_ADDR_VAR 0 4
34746: PUSH
34747: LD_INT 35
34749: PUSH
34750: LD_INT 45
34752: PUSH
34753: LD_INT 46
34755: PUSH
34756: LD_INT 47
34758: PUSH
34759: LD_INT 82
34761: PUSH
34762: LD_INT 83
34764: PUSH
34765: LD_INT 84
34767: PUSH
34768: LD_INT 85
34770: PUSH
34771: LD_INT 87
34773: PUSH
34774: LD_INT 70
34776: PUSH
34777: LD_INT 1
34779: PUSH
34780: LD_INT 11
34782: PUSH
34783: LD_INT 3
34785: PUSH
34786: LD_INT 4
34788: PUSH
34789: LD_INT 5
34791: PUSH
34792: LD_INT 6
34794: PUSH
34795: LD_INT 15
34797: PUSH
34798: LD_INT 18
34800: PUSH
34801: LD_INT 7
34803: PUSH
34804: LD_INT 17
34806: PUSH
34807: LD_INT 8
34809: PUSH
34810: LD_INT 20
34812: PUSH
34813: LD_INT 21
34815: PUSH
34816: LD_INT 22
34818: PUSH
34819: LD_INT 72
34821: PUSH
34822: LD_INT 26
34824: PUSH
34825: LD_INT 69
34827: PUSH
34828: LD_INT 39
34830: PUSH
34831: LD_INT 40
34833: PUSH
34834: LD_INT 41
34836: PUSH
34837: LD_INT 42
34839: PUSH
34840: LD_INT 43
34842: PUSH
34843: LD_INT 48
34845: PUSH
34846: LD_INT 49
34848: PUSH
34849: LD_INT 50
34851: PUSH
34852: LD_INT 51
34854: PUSH
34855: LD_INT 52
34857: PUSH
34858: LD_INT 53
34860: PUSH
34861: LD_INT 54
34863: PUSH
34864: LD_INT 55
34866: PUSH
34867: LD_INT 56
34869: PUSH
34870: LD_INT 60
34872: PUSH
34873: LD_INT 61
34875: PUSH
34876: LD_INT 62
34878: PUSH
34879: LD_INT 66
34881: PUSH
34882: LD_INT 67
34884: PUSH
34885: LD_INT 68
34887: PUSH
34888: LD_INT 81
34890: PUSH
34891: LD_INT 82
34893: PUSH
34894: LD_INT 83
34896: PUSH
34897: LD_INT 84
34899: PUSH
34900: LD_INT 85
34902: PUSH
34903: LD_INT 87
34905: PUSH
34906: LD_INT 88
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: ST_TO_ADDR
34965: GO 35198
34967: LD_INT 3
34969: DOUBLE
34970: EQUAL
34971: IFTRUE 34975
34973: GO 35197
34975: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
34976: LD_ADDR_VAR 0 4
34980: PUSH
34981: LD_INT 46
34983: PUSH
34984: LD_INT 47
34986: PUSH
34987: LD_INT 1
34989: PUSH
34990: LD_INT 2
34992: PUSH
34993: LD_INT 82
34995: PUSH
34996: LD_INT 83
34998: PUSH
34999: LD_INT 84
35001: PUSH
35002: LD_INT 85
35004: PUSH
35005: LD_INT 86
35007: PUSH
35008: LD_INT 11
35010: PUSH
35011: LD_INT 9
35013: PUSH
35014: LD_INT 20
35016: PUSH
35017: LD_INT 19
35019: PUSH
35020: LD_INT 21
35022: PUSH
35023: LD_INT 24
35025: PUSH
35026: LD_INT 22
35028: PUSH
35029: LD_INT 25
35031: PUSH
35032: LD_INT 28
35034: PUSH
35035: LD_INT 29
35037: PUSH
35038: LD_INT 30
35040: PUSH
35041: LD_INT 31
35043: PUSH
35044: LD_INT 37
35046: PUSH
35047: LD_INT 38
35049: PUSH
35050: LD_INT 32
35052: PUSH
35053: LD_INT 27
35055: PUSH
35056: LD_INT 33
35058: PUSH
35059: LD_INT 69
35061: PUSH
35062: LD_INT 39
35064: PUSH
35065: LD_INT 34
35067: PUSH
35068: LD_INT 40
35070: PUSH
35071: LD_INT 71
35073: PUSH
35074: LD_INT 23
35076: PUSH
35077: LD_INT 44
35079: PUSH
35080: LD_INT 48
35082: PUSH
35083: LD_INT 49
35085: PUSH
35086: LD_INT 50
35088: PUSH
35089: LD_INT 51
35091: PUSH
35092: LD_INT 52
35094: PUSH
35095: LD_INT 53
35097: PUSH
35098: LD_INT 54
35100: PUSH
35101: LD_INT 55
35103: PUSH
35104: LD_INT 56
35106: PUSH
35107: LD_INT 57
35109: PUSH
35110: LD_INT 58
35112: PUSH
35113: LD_INT 59
35115: PUSH
35116: LD_INT 63
35118: PUSH
35119: LD_INT 64
35121: PUSH
35122: LD_INT 65
35124: PUSH
35125: LD_INT 82
35127: PUSH
35128: LD_INT 83
35130: PUSH
35131: LD_INT 84
35133: PUSH
35134: LD_INT 85
35136: PUSH
35137: LD_INT 86
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: ST_TO_ADDR
35195: GO 35198
35197: POP
// if state > - 1 and state < 3 then
35198: LD_VAR 0 3
35202: PUSH
35203: LD_INT 1
35205: NEG
35206: GREATER
35207: PUSH
35208: LD_VAR 0 3
35212: PUSH
35213: LD_INT 3
35215: LESS
35216: AND
35217: IFFALSE 35274
// for i in result do
35219: LD_ADDR_VAR 0 5
35223: PUSH
35224: LD_VAR 0 4
35228: PUSH
35229: FOR_IN
35230: IFFALSE 35272
// if GetTech ( i , side ) <> state then
35232: LD_VAR 0 5
35236: PPUSH
35237: LD_VAR 0 1
35241: PPUSH
35242: CALL_OW 321
35246: PUSH
35247: LD_VAR 0 3
35251: NONEQUAL
35252: IFFALSE 35270
// result := result diff i ;
35254: LD_ADDR_VAR 0 4
35258: PUSH
35259: LD_VAR 0 4
35263: PUSH
35264: LD_VAR 0 5
35268: DIFF
35269: ST_TO_ADDR
35270: GO 35229
35272: POP
35273: POP
// end ;
35274: LD_VAR 0 4
35278: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35279: LD_INT 0
35281: PPUSH
35282: PPUSH
35283: PPUSH
// result := true ;
35284: LD_ADDR_VAR 0 3
35288: PUSH
35289: LD_INT 1
35291: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35292: LD_ADDR_VAR 0 5
35296: PUSH
35297: LD_VAR 0 2
35301: PPUSH
35302: CALL_OW 480
35306: ST_TO_ADDR
// if not tmp then
35307: LD_VAR 0 5
35311: NOT
35312: IFFALSE 35316
// exit ;
35314: GO 35365
// for i in tmp do
35316: LD_ADDR_VAR 0 4
35320: PUSH
35321: LD_VAR 0 5
35325: PUSH
35326: FOR_IN
35327: IFFALSE 35363
// if GetTech ( i , side ) <> state_researched then
35329: LD_VAR 0 4
35333: PPUSH
35334: LD_VAR 0 1
35338: PPUSH
35339: CALL_OW 321
35343: PUSH
35344: LD_INT 2
35346: NONEQUAL
35347: IFFALSE 35361
// begin result := false ;
35349: LD_ADDR_VAR 0 3
35353: PUSH
35354: LD_INT 0
35356: ST_TO_ADDR
// exit ;
35357: POP
35358: POP
35359: GO 35365
// end ;
35361: GO 35326
35363: POP
35364: POP
// end ;
35365: LD_VAR 0 3
35369: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
35370: LD_INT 0
35372: PPUSH
35373: PPUSH
35374: PPUSH
35375: PPUSH
35376: PPUSH
35377: PPUSH
35378: PPUSH
35379: PPUSH
35380: PPUSH
35381: PPUSH
35382: PPUSH
35383: PPUSH
35384: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
35385: LD_VAR 0 1
35389: NOT
35390: PUSH
35391: LD_VAR 0 1
35395: PPUSH
35396: CALL_OW 257
35400: PUSH
35401: LD_INT 9
35403: NONEQUAL
35404: OR
35405: IFFALSE 35409
// exit ;
35407: GO 35982
// side := GetSide ( unit ) ;
35409: LD_ADDR_VAR 0 9
35413: PUSH
35414: LD_VAR 0 1
35418: PPUSH
35419: CALL_OW 255
35423: ST_TO_ADDR
// tech_space := tech_spacanom ;
35424: LD_ADDR_VAR 0 12
35428: PUSH
35429: LD_INT 29
35431: ST_TO_ADDR
// tech_time := tech_taurad ;
35432: LD_ADDR_VAR 0 13
35436: PUSH
35437: LD_INT 28
35439: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
35440: LD_ADDR_VAR 0 11
35444: PUSH
35445: LD_VAR 0 1
35449: PPUSH
35450: CALL_OW 310
35454: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
35455: LD_VAR 0 11
35459: PPUSH
35460: CALL_OW 247
35464: PUSH
35465: LD_INT 2
35467: EQUAL
35468: IFFALSE 35472
// exit ;
35470: GO 35982
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35472: LD_ADDR_VAR 0 8
35476: PUSH
35477: LD_INT 81
35479: PUSH
35480: LD_VAR 0 9
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 3
35491: PUSH
35492: LD_INT 21
35494: PUSH
35495: LD_INT 3
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PPUSH
35510: CALL_OW 69
35514: ST_TO_ADDR
// if not tmp then
35515: LD_VAR 0 8
35519: NOT
35520: IFFALSE 35524
// exit ;
35522: GO 35982
// if in_unit then
35524: LD_VAR 0 11
35528: IFFALSE 35552
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
35530: LD_ADDR_VAR 0 10
35534: PUSH
35535: LD_VAR 0 8
35539: PPUSH
35540: LD_VAR 0 11
35544: PPUSH
35545: CALL_OW 74
35549: ST_TO_ADDR
35550: GO 35572
// enemy := NearestUnitToUnit ( tmp , unit ) ;
35552: LD_ADDR_VAR 0 10
35556: PUSH
35557: LD_VAR 0 8
35561: PPUSH
35562: LD_VAR 0 1
35566: PPUSH
35567: CALL_OW 74
35571: ST_TO_ADDR
// if not enemy then
35572: LD_VAR 0 10
35576: NOT
35577: IFFALSE 35581
// exit ;
35579: GO 35982
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
35581: LD_VAR 0 11
35585: PUSH
35586: LD_VAR 0 11
35590: PPUSH
35591: LD_VAR 0 10
35595: PPUSH
35596: CALL_OW 296
35600: PUSH
35601: LD_INT 13
35603: GREATER
35604: AND
35605: PUSH
35606: LD_VAR 0 1
35610: PPUSH
35611: LD_VAR 0 10
35615: PPUSH
35616: CALL_OW 296
35620: PUSH
35621: LD_INT 12
35623: GREATER
35624: OR
35625: IFFALSE 35629
// exit ;
35627: GO 35982
// missile := [ 1 ] ;
35629: LD_ADDR_VAR 0 14
35633: PUSH
35634: LD_INT 1
35636: PUSH
35637: EMPTY
35638: LIST
35639: ST_TO_ADDR
// if Researched ( side , tech_space ) then
35640: LD_VAR 0 9
35644: PPUSH
35645: LD_VAR 0 12
35649: PPUSH
35650: CALL_OW 325
35654: IFFALSE 35683
// missile := Insert ( missile , missile + 1 , 2 ) ;
35656: LD_ADDR_VAR 0 14
35660: PUSH
35661: LD_VAR 0 14
35665: PPUSH
35666: LD_VAR 0 14
35670: PUSH
35671: LD_INT 1
35673: PLUS
35674: PPUSH
35675: LD_INT 2
35677: PPUSH
35678: CALL_OW 2
35682: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
35683: LD_VAR 0 9
35687: PPUSH
35688: LD_VAR 0 13
35692: PPUSH
35693: CALL_OW 325
35697: PUSH
35698: LD_VAR 0 10
35702: PPUSH
35703: CALL_OW 255
35707: PPUSH
35708: LD_VAR 0 13
35712: PPUSH
35713: CALL_OW 325
35717: NOT
35718: AND
35719: IFFALSE 35748
// missile := Insert ( missile , missile + 1 , 3 ) ;
35721: LD_ADDR_VAR 0 14
35725: PUSH
35726: LD_VAR 0 14
35730: PPUSH
35731: LD_VAR 0 14
35735: PUSH
35736: LD_INT 1
35738: PLUS
35739: PPUSH
35740: LD_INT 3
35742: PPUSH
35743: CALL_OW 2
35747: ST_TO_ADDR
// if missile < 2 then
35748: LD_VAR 0 14
35752: PUSH
35753: LD_INT 2
35755: LESS
35756: IFFALSE 35760
// exit ;
35758: GO 35982
// x := GetX ( enemy ) ;
35760: LD_ADDR_VAR 0 4
35764: PUSH
35765: LD_VAR 0 10
35769: PPUSH
35770: CALL_OW 250
35774: ST_TO_ADDR
// y := GetY ( enemy ) ;
35775: LD_ADDR_VAR 0 5
35779: PUSH
35780: LD_VAR 0 10
35784: PPUSH
35785: CALL_OW 251
35789: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35790: LD_ADDR_VAR 0 6
35794: PUSH
35795: LD_VAR 0 4
35799: PUSH
35800: LD_INT 1
35802: NEG
35803: PPUSH
35804: LD_INT 1
35806: PPUSH
35807: CALL_OW 12
35811: PLUS
35812: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35813: LD_ADDR_VAR 0 7
35817: PUSH
35818: LD_VAR 0 5
35822: PUSH
35823: LD_INT 1
35825: NEG
35826: PPUSH
35827: LD_INT 1
35829: PPUSH
35830: CALL_OW 12
35834: PLUS
35835: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35836: LD_VAR 0 6
35840: PPUSH
35841: LD_VAR 0 7
35845: PPUSH
35846: CALL_OW 488
35850: NOT
35851: IFFALSE 35873
// begin _x := x ;
35853: LD_ADDR_VAR 0 6
35857: PUSH
35858: LD_VAR 0 4
35862: ST_TO_ADDR
// _y := y ;
35863: LD_ADDR_VAR 0 7
35867: PUSH
35868: LD_VAR 0 5
35872: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35873: LD_ADDR_VAR 0 3
35877: PUSH
35878: LD_INT 1
35880: PPUSH
35881: LD_VAR 0 14
35885: PPUSH
35886: CALL_OW 12
35890: ST_TO_ADDR
// case i of 1 :
35891: LD_VAR 0 3
35895: PUSH
35896: LD_INT 1
35898: DOUBLE
35899: EQUAL
35900: IFTRUE 35904
35902: GO 35921
35904: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35905: LD_VAR 0 1
35909: PPUSH
35910: LD_VAR 0 10
35914: PPUSH
35915: CALL_OW 115
35919: GO 35982
35921: LD_INT 2
35923: DOUBLE
35924: EQUAL
35925: IFTRUE 35929
35927: GO 35951
35929: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35930: LD_VAR 0 1
35934: PPUSH
35935: LD_VAR 0 6
35939: PPUSH
35940: LD_VAR 0 7
35944: PPUSH
35945: CALL_OW 153
35949: GO 35982
35951: LD_INT 3
35953: DOUBLE
35954: EQUAL
35955: IFTRUE 35959
35957: GO 35981
35959: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35960: LD_VAR 0 1
35964: PPUSH
35965: LD_VAR 0 6
35969: PPUSH
35970: LD_VAR 0 7
35974: PPUSH
35975: CALL_OW 154
35979: GO 35982
35981: POP
// end ;
35982: LD_VAR 0 2
35986: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35987: LD_INT 0
35989: PPUSH
35990: PPUSH
35991: PPUSH
35992: PPUSH
35993: PPUSH
35994: PPUSH
// if not unit or not building then
35995: LD_VAR 0 1
35999: NOT
36000: PUSH
36001: LD_VAR 0 2
36005: NOT
36006: OR
36007: IFFALSE 36011
// exit ;
36009: GO 36169
// x := GetX ( building ) ;
36011: LD_ADDR_VAR 0 5
36015: PUSH
36016: LD_VAR 0 2
36020: PPUSH
36021: CALL_OW 250
36025: ST_TO_ADDR
// y := GetY ( building ) ;
36026: LD_ADDR_VAR 0 6
36030: PUSH
36031: LD_VAR 0 2
36035: PPUSH
36036: CALL_OW 251
36040: ST_TO_ADDR
// for i = 0 to 5 do
36041: LD_ADDR_VAR 0 4
36045: PUSH
36046: DOUBLE
36047: LD_INT 0
36049: DEC
36050: ST_TO_ADDR
36051: LD_INT 5
36053: PUSH
36054: FOR_TO
36055: IFFALSE 36167
// begin _x := ShiftX ( x , i , 3 ) ;
36057: LD_ADDR_VAR 0 7
36061: PUSH
36062: LD_VAR 0 5
36066: PPUSH
36067: LD_VAR 0 4
36071: PPUSH
36072: LD_INT 3
36074: PPUSH
36075: CALL_OW 272
36079: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
36080: LD_ADDR_VAR 0 8
36084: PUSH
36085: LD_VAR 0 6
36089: PPUSH
36090: LD_VAR 0 4
36094: PPUSH
36095: LD_INT 3
36097: PPUSH
36098: CALL_OW 273
36102: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36103: LD_VAR 0 7
36107: PPUSH
36108: LD_VAR 0 8
36112: PPUSH
36113: CALL_OW 488
36117: NOT
36118: IFFALSE 36122
// continue ;
36120: GO 36054
// if HexInfo ( _x , _y ) = 0 then
36122: LD_VAR 0 7
36126: PPUSH
36127: LD_VAR 0 8
36131: PPUSH
36132: CALL_OW 428
36136: PUSH
36137: LD_INT 0
36139: EQUAL
36140: IFFALSE 36165
// begin ComMoveXY ( unit , _x , _y ) ;
36142: LD_VAR 0 1
36146: PPUSH
36147: LD_VAR 0 7
36151: PPUSH
36152: LD_VAR 0 8
36156: PPUSH
36157: CALL_OW 111
// exit ;
36161: POP
36162: POP
36163: GO 36169
// end ; end ;
36165: GO 36054
36167: POP
36168: POP
// end ;
36169: LD_VAR 0 3
36173: RET
// export function ScanBase ( side , base_area ) ; begin
36174: LD_INT 0
36176: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
36177: LD_ADDR_VAR 0 3
36181: PUSH
36182: LD_VAR 0 2
36186: PPUSH
36187: LD_INT 81
36189: PUSH
36190: LD_VAR 0 1
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PPUSH
36199: CALL_OW 70
36203: ST_TO_ADDR
// end ;
36204: LD_VAR 0 3
36208: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
36209: LD_INT 0
36211: PPUSH
36212: PPUSH
36213: PPUSH
36214: PPUSH
// result := false ;
36215: LD_ADDR_VAR 0 2
36219: PUSH
36220: LD_INT 0
36222: ST_TO_ADDR
// side := GetSide ( unit ) ;
36223: LD_ADDR_VAR 0 3
36227: PUSH
36228: LD_VAR 0 1
36232: PPUSH
36233: CALL_OW 255
36237: ST_TO_ADDR
// nat := GetNation ( unit ) ;
36238: LD_ADDR_VAR 0 4
36242: PUSH
36243: LD_VAR 0 1
36247: PPUSH
36248: CALL_OW 248
36252: ST_TO_ADDR
// case nat of 1 :
36253: LD_VAR 0 4
36257: PUSH
36258: LD_INT 1
36260: DOUBLE
36261: EQUAL
36262: IFTRUE 36266
36264: GO 36277
36266: POP
// tech := tech_lassight ; 2 :
36267: LD_ADDR_VAR 0 5
36271: PUSH
36272: LD_INT 12
36274: ST_TO_ADDR
36275: GO 36316
36277: LD_INT 2
36279: DOUBLE
36280: EQUAL
36281: IFTRUE 36285
36283: GO 36296
36285: POP
// tech := tech_mortar ; 3 :
36286: LD_ADDR_VAR 0 5
36290: PUSH
36291: LD_INT 41
36293: ST_TO_ADDR
36294: GO 36316
36296: LD_INT 3
36298: DOUBLE
36299: EQUAL
36300: IFTRUE 36304
36302: GO 36315
36304: POP
// tech := tech_bazooka ; end ;
36305: LD_ADDR_VAR 0 5
36309: PUSH
36310: LD_INT 44
36312: ST_TO_ADDR
36313: GO 36316
36315: POP
// if Researched ( side , tech ) then
36316: LD_VAR 0 3
36320: PPUSH
36321: LD_VAR 0 5
36325: PPUSH
36326: CALL_OW 325
36330: IFFALSE 36357
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
36332: LD_ADDR_VAR 0 2
36336: PUSH
36337: LD_INT 5
36339: PUSH
36340: LD_INT 8
36342: PUSH
36343: LD_INT 9
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: LIST
36350: PUSH
36351: LD_VAR 0 4
36355: ARRAY
36356: ST_TO_ADDR
// end ;
36357: LD_VAR 0 2
36361: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
36362: LD_INT 0
36364: PPUSH
36365: PPUSH
36366: PPUSH
// if not mines then
36367: LD_VAR 0 2
36371: NOT
36372: IFFALSE 36376
// exit ;
36374: GO 36520
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36376: LD_ADDR_VAR 0 5
36380: PUSH
36381: LD_INT 81
36383: PUSH
36384: LD_VAR 0 1
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 3
36395: PUSH
36396: LD_INT 21
36398: PUSH
36399: LD_INT 3
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PPUSH
36414: CALL_OW 69
36418: ST_TO_ADDR
// for i in mines do
36419: LD_ADDR_VAR 0 4
36423: PUSH
36424: LD_VAR 0 2
36428: PUSH
36429: FOR_IN
36430: IFFALSE 36518
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
36432: LD_VAR 0 4
36436: PUSH
36437: LD_INT 1
36439: ARRAY
36440: PPUSH
36441: LD_VAR 0 4
36445: PUSH
36446: LD_INT 2
36448: ARRAY
36449: PPUSH
36450: CALL_OW 458
36454: NOT
36455: IFFALSE 36459
// continue ;
36457: GO 36429
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
36459: LD_VAR 0 4
36463: PUSH
36464: LD_INT 1
36466: ARRAY
36467: PPUSH
36468: LD_VAR 0 4
36472: PUSH
36473: LD_INT 2
36475: ARRAY
36476: PPUSH
36477: CALL_OW 428
36481: PUSH
36482: LD_VAR 0 5
36486: IN
36487: IFFALSE 36516
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
36489: LD_VAR 0 4
36493: PUSH
36494: LD_INT 1
36496: ARRAY
36497: PPUSH
36498: LD_VAR 0 4
36502: PUSH
36503: LD_INT 2
36505: ARRAY
36506: PPUSH
36507: LD_VAR 0 1
36511: PPUSH
36512: CALL_OW 456
// end ;
36516: GO 36429
36518: POP
36519: POP
// end ;
36520: LD_VAR 0 3
36524: RET
// export function Count ( array ) ; var i ; begin
36525: LD_INT 0
36527: PPUSH
36528: PPUSH
// result := 0 ;
36529: LD_ADDR_VAR 0 2
36533: PUSH
36534: LD_INT 0
36536: ST_TO_ADDR
// for i in array do
36537: LD_ADDR_VAR 0 3
36541: PUSH
36542: LD_VAR 0 1
36546: PUSH
36547: FOR_IN
36548: IFFALSE 36572
// if i then
36550: LD_VAR 0 3
36554: IFFALSE 36570
// result := result + 1 ;
36556: LD_ADDR_VAR 0 2
36560: PUSH
36561: LD_VAR 0 2
36565: PUSH
36566: LD_INT 1
36568: PLUS
36569: ST_TO_ADDR
36570: GO 36547
36572: POP
36573: POP
// end ;
36574: LD_VAR 0 2
36578: RET
// export function IsEmpty ( building ) ; begin
36579: LD_INT 0
36581: PPUSH
// if not building then
36582: LD_VAR 0 1
36586: NOT
36587: IFFALSE 36591
// exit ;
36589: GO 36634
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
36591: LD_ADDR_VAR 0 2
36595: PUSH
36596: LD_VAR 0 1
36600: PUSH
36601: LD_INT 22
36603: PUSH
36604: LD_VAR 0 1
36608: PPUSH
36609: CALL_OW 255
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 58
36620: PUSH
36621: EMPTY
36622: LIST
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PPUSH
36628: CALL_OW 69
36632: IN
36633: ST_TO_ADDR
// end ;
36634: LD_VAR 0 2
36638: RET
// export function IsNotFull ( building ) ; begin
36639: LD_INT 0
36641: PPUSH
// if not building then
36642: LD_VAR 0 1
36646: NOT
36647: IFFALSE 36651
// exit ;
36649: GO 36670
// result := UnitsInside ( building ) < 6 ;
36651: LD_ADDR_VAR 0 2
36655: PUSH
36656: LD_VAR 0 1
36660: PPUSH
36661: CALL_OW 313
36665: PUSH
36666: LD_INT 6
36668: LESS
36669: ST_TO_ADDR
// end ;
36670: LD_VAR 0 2
36674: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
36675: LD_INT 0
36677: PPUSH
36678: PPUSH
36679: PPUSH
36680: PPUSH
// tmp := [ ] ;
36681: LD_ADDR_VAR 0 3
36685: PUSH
36686: EMPTY
36687: ST_TO_ADDR
// list := [ ] ;
36688: LD_ADDR_VAR 0 5
36692: PUSH
36693: EMPTY
36694: ST_TO_ADDR
// for i = 16 to 25 do
36695: LD_ADDR_VAR 0 4
36699: PUSH
36700: DOUBLE
36701: LD_INT 16
36703: DEC
36704: ST_TO_ADDR
36705: LD_INT 25
36707: PUSH
36708: FOR_TO
36709: IFFALSE 36782
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
36711: LD_ADDR_VAR 0 3
36715: PUSH
36716: LD_VAR 0 3
36720: PUSH
36721: LD_INT 22
36723: PUSH
36724: LD_VAR 0 1
36728: PPUSH
36729: CALL_OW 255
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PUSH
36738: LD_INT 91
36740: PUSH
36741: LD_VAR 0 1
36745: PUSH
36746: LD_INT 6
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 30
36756: PUSH
36757: LD_VAR 0 4
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: LIST
36770: PUSH
36771: EMPTY
36772: LIST
36773: PPUSH
36774: CALL_OW 69
36778: ADD
36779: ST_TO_ADDR
36780: GO 36708
36782: POP
36783: POP
// for i = 1 to tmp do
36784: LD_ADDR_VAR 0 4
36788: PUSH
36789: DOUBLE
36790: LD_INT 1
36792: DEC
36793: ST_TO_ADDR
36794: LD_VAR 0 3
36798: PUSH
36799: FOR_TO
36800: IFFALSE 36888
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
36802: LD_ADDR_VAR 0 5
36806: PUSH
36807: LD_VAR 0 5
36811: PUSH
36812: LD_VAR 0 3
36816: PUSH
36817: LD_VAR 0 4
36821: ARRAY
36822: PPUSH
36823: CALL_OW 266
36827: PUSH
36828: LD_VAR 0 3
36832: PUSH
36833: LD_VAR 0 4
36837: ARRAY
36838: PPUSH
36839: CALL_OW 250
36843: PUSH
36844: LD_VAR 0 3
36848: PUSH
36849: LD_VAR 0 4
36853: ARRAY
36854: PPUSH
36855: CALL_OW 251
36859: PUSH
36860: LD_VAR 0 3
36864: PUSH
36865: LD_VAR 0 4
36869: ARRAY
36870: PPUSH
36871: CALL_OW 254
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: PUSH
36882: EMPTY
36883: LIST
36884: ADD
36885: ST_TO_ADDR
36886: GO 36799
36888: POP
36889: POP
// result := list ;
36890: LD_ADDR_VAR 0 2
36894: PUSH
36895: LD_VAR 0 5
36899: ST_TO_ADDR
// end ;
36900: LD_VAR 0 2
36904: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36905: LD_INT 0
36907: PPUSH
36908: PPUSH
36909: PPUSH
36910: PPUSH
36911: PPUSH
36912: PPUSH
36913: PPUSH
// if not factory then
36914: LD_VAR 0 1
36918: NOT
36919: IFFALSE 36923
// exit ;
36921: GO 37516
// if control = control_apeman then
36923: LD_VAR 0 4
36927: PUSH
36928: LD_INT 5
36930: EQUAL
36931: IFFALSE 37040
// begin tmp := UnitsInside ( factory ) ;
36933: LD_ADDR_VAR 0 8
36937: PUSH
36938: LD_VAR 0 1
36942: PPUSH
36943: CALL_OW 313
36947: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36948: LD_VAR 0 8
36952: PPUSH
36953: LD_INT 25
36955: PUSH
36956: LD_INT 12
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PPUSH
36963: CALL_OW 72
36967: NOT
36968: IFFALSE 36978
// control := control_manual ;
36970: LD_ADDR_VAR 0 4
36974: PUSH
36975: LD_INT 1
36977: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36978: LD_ADDR_VAR 0 8
36982: PUSH
36983: LD_VAR 0 1
36987: PPUSH
36988: CALL 36675 0 1
36992: ST_TO_ADDR
// if tmp then
36993: LD_VAR 0 8
36997: IFFALSE 37040
// begin for i in tmp do
36999: LD_ADDR_VAR 0 7
37003: PUSH
37004: LD_VAR 0 8
37008: PUSH
37009: FOR_IN
37010: IFFALSE 37038
// if i [ 1 ] = b_ext_radio then
37012: LD_VAR 0 7
37016: PUSH
37017: LD_INT 1
37019: ARRAY
37020: PUSH
37021: LD_INT 22
37023: EQUAL
37024: IFFALSE 37036
// begin control := control_remote ;
37026: LD_ADDR_VAR 0 4
37030: PUSH
37031: LD_INT 2
37033: ST_TO_ADDR
// break ;
37034: GO 37038
// end ;
37036: GO 37009
37038: POP
37039: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37040: LD_VAR 0 1
37044: PPUSH
37045: LD_VAR 0 2
37049: PPUSH
37050: LD_VAR 0 3
37054: PPUSH
37055: LD_VAR 0 4
37059: PPUSH
37060: LD_VAR 0 5
37064: PPUSH
37065: CALL_OW 448
37069: IFFALSE 37104
// begin result := [ chassis , engine , control , weapon ] ;
37071: LD_ADDR_VAR 0 6
37075: PUSH
37076: LD_VAR 0 2
37080: PUSH
37081: LD_VAR 0 3
37085: PUSH
37086: LD_VAR 0 4
37090: PUSH
37091: LD_VAR 0 5
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: ST_TO_ADDR
// exit ;
37102: GO 37516
// end ; _chassis := AvailableChassisList ( factory ) ;
37104: LD_ADDR_VAR 0 9
37108: PUSH
37109: LD_VAR 0 1
37113: PPUSH
37114: CALL_OW 475
37118: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
37119: LD_ADDR_VAR 0 11
37123: PUSH
37124: LD_VAR 0 1
37128: PPUSH
37129: CALL_OW 476
37133: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
37134: LD_ADDR_VAR 0 12
37138: PUSH
37139: LD_VAR 0 1
37143: PPUSH
37144: CALL_OW 477
37148: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
37149: LD_ADDR_VAR 0 10
37153: PUSH
37154: LD_VAR 0 1
37158: PPUSH
37159: CALL_OW 478
37163: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
37164: LD_VAR 0 9
37168: NOT
37169: PUSH
37170: LD_VAR 0 11
37174: NOT
37175: OR
37176: PUSH
37177: LD_VAR 0 12
37181: NOT
37182: OR
37183: PUSH
37184: LD_VAR 0 10
37188: NOT
37189: OR
37190: IFFALSE 37225
// begin result := [ chassis , engine , control , weapon ] ;
37192: LD_ADDR_VAR 0 6
37196: PUSH
37197: LD_VAR 0 2
37201: PUSH
37202: LD_VAR 0 3
37206: PUSH
37207: LD_VAR 0 4
37211: PUSH
37212: LD_VAR 0 5
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: ST_TO_ADDR
// exit ;
37223: GO 37516
// end ; if not chassis in _chassis then
37225: LD_VAR 0 2
37229: PUSH
37230: LD_VAR 0 9
37234: IN
37235: NOT
37236: IFFALSE 37262
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
37238: LD_ADDR_VAR 0 2
37242: PUSH
37243: LD_VAR 0 9
37247: PUSH
37248: LD_INT 1
37250: PPUSH
37251: LD_VAR 0 9
37255: PPUSH
37256: CALL_OW 12
37260: ARRAY
37261: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
37262: LD_VAR 0 2
37266: PPUSH
37267: LD_VAR 0 3
37271: PPUSH
37272: CALL 37521 0 2
37276: NOT
37277: IFFALSE 37336
// repeat engine := _engine [ 1 ] ;
37279: LD_ADDR_VAR 0 3
37283: PUSH
37284: LD_VAR 0 11
37288: PUSH
37289: LD_INT 1
37291: ARRAY
37292: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
37293: LD_ADDR_VAR 0 11
37297: PUSH
37298: LD_VAR 0 11
37302: PPUSH
37303: LD_INT 1
37305: PPUSH
37306: CALL_OW 3
37310: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
37311: LD_VAR 0 2
37315: PPUSH
37316: LD_VAR 0 3
37320: PPUSH
37321: CALL 37521 0 2
37325: PUSH
37326: LD_VAR 0 11
37330: PUSH
37331: EMPTY
37332: EQUAL
37333: OR
37334: IFFALSE 37279
// if not control in _control then
37336: LD_VAR 0 4
37340: PUSH
37341: LD_VAR 0 12
37345: IN
37346: NOT
37347: IFFALSE 37373
// control := _control [ rand ( 1 , _control ) ] ;
37349: LD_ADDR_VAR 0 4
37353: PUSH
37354: LD_VAR 0 12
37358: PUSH
37359: LD_INT 1
37361: PPUSH
37362: LD_VAR 0 12
37366: PPUSH
37367: CALL_OW 12
37371: ARRAY
37372: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
37373: LD_VAR 0 2
37377: PPUSH
37378: LD_VAR 0 5
37382: PPUSH
37383: CALL 37741 0 2
37387: NOT
37388: IFFALSE 37447
// repeat weapon := _weapon [ 1 ] ;
37390: LD_ADDR_VAR 0 5
37394: PUSH
37395: LD_VAR 0 10
37399: PUSH
37400: LD_INT 1
37402: ARRAY
37403: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
37404: LD_ADDR_VAR 0 10
37408: PUSH
37409: LD_VAR 0 10
37413: PPUSH
37414: LD_INT 1
37416: PPUSH
37417: CALL_OW 3
37421: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
37422: LD_VAR 0 2
37426: PPUSH
37427: LD_VAR 0 5
37431: PPUSH
37432: CALL 37741 0 2
37436: PUSH
37437: LD_VAR 0 10
37441: PUSH
37442: EMPTY
37443: EQUAL
37444: OR
37445: IFFALSE 37390
// result := [ ] ;
37447: LD_ADDR_VAR 0 6
37451: PUSH
37452: EMPTY
37453: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37454: LD_VAR 0 1
37458: PPUSH
37459: LD_VAR 0 2
37463: PPUSH
37464: LD_VAR 0 3
37468: PPUSH
37469: LD_VAR 0 4
37473: PPUSH
37474: LD_VAR 0 5
37478: PPUSH
37479: CALL_OW 448
37483: IFFALSE 37516
// result := [ chassis , engine , control , weapon ] ;
37485: LD_ADDR_VAR 0 6
37489: PUSH
37490: LD_VAR 0 2
37494: PUSH
37495: LD_VAR 0 3
37499: PUSH
37500: LD_VAR 0 4
37504: PUSH
37505: LD_VAR 0 5
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: ST_TO_ADDR
// end ;
37516: LD_VAR 0 6
37520: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
37521: LD_INT 0
37523: PPUSH
// if not chassis or not engine then
37524: LD_VAR 0 1
37528: NOT
37529: PUSH
37530: LD_VAR 0 2
37534: NOT
37535: OR
37536: IFFALSE 37540
// exit ;
37538: GO 37736
// case engine of engine_solar :
37540: LD_VAR 0 2
37544: PUSH
37545: LD_INT 2
37547: DOUBLE
37548: EQUAL
37549: IFTRUE 37553
37551: GO 37591
37553: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
37554: LD_ADDR_VAR 0 3
37558: PUSH
37559: LD_INT 11
37561: PUSH
37562: LD_INT 12
37564: PUSH
37565: LD_INT 13
37567: PUSH
37568: LD_INT 14
37570: PUSH
37571: LD_INT 1
37573: PUSH
37574: LD_INT 2
37576: PUSH
37577: LD_INT 3
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: ST_TO_ADDR
37589: GO 37720
37591: LD_INT 1
37593: DOUBLE
37594: EQUAL
37595: IFTRUE 37599
37597: GO 37661
37599: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
37600: LD_ADDR_VAR 0 3
37604: PUSH
37605: LD_INT 11
37607: PUSH
37608: LD_INT 12
37610: PUSH
37611: LD_INT 13
37613: PUSH
37614: LD_INT 14
37616: PUSH
37617: LD_INT 1
37619: PUSH
37620: LD_INT 2
37622: PUSH
37623: LD_INT 3
37625: PUSH
37626: LD_INT 4
37628: PUSH
37629: LD_INT 5
37631: PUSH
37632: LD_INT 21
37634: PUSH
37635: LD_INT 23
37637: PUSH
37638: LD_INT 22
37640: PUSH
37641: LD_INT 24
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: ST_TO_ADDR
37659: GO 37720
37661: LD_INT 3
37663: DOUBLE
37664: EQUAL
37665: IFTRUE 37669
37667: GO 37719
37669: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37670: LD_ADDR_VAR 0 3
37674: PUSH
37675: LD_INT 13
37677: PUSH
37678: LD_INT 14
37680: PUSH
37681: LD_INT 2
37683: PUSH
37684: LD_INT 3
37686: PUSH
37687: LD_INT 4
37689: PUSH
37690: LD_INT 5
37692: PUSH
37693: LD_INT 21
37695: PUSH
37696: LD_INT 22
37698: PUSH
37699: LD_INT 23
37701: PUSH
37702: LD_INT 24
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: ST_TO_ADDR
37717: GO 37720
37719: POP
// result := ( chassis in result ) ;
37720: LD_ADDR_VAR 0 3
37724: PUSH
37725: LD_VAR 0 1
37729: PUSH
37730: LD_VAR 0 3
37734: IN
37735: ST_TO_ADDR
// end ;
37736: LD_VAR 0 3
37740: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
37741: LD_INT 0
37743: PPUSH
// if not chassis or not weapon then
37744: LD_VAR 0 1
37748: NOT
37749: PUSH
37750: LD_VAR 0 2
37754: NOT
37755: OR
37756: IFFALSE 37760
// exit ;
37758: GO 38822
// case weapon of us_machine_gun :
37760: LD_VAR 0 2
37764: PUSH
37765: LD_INT 2
37767: DOUBLE
37768: EQUAL
37769: IFTRUE 37773
37771: GO 37803
37773: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
37774: LD_ADDR_VAR 0 3
37778: PUSH
37779: LD_INT 1
37781: PUSH
37782: LD_INT 2
37784: PUSH
37785: LD_INT 3
37787: PUSH
37788: LD_INT 4
37790: PUSH
37791: LD_INT 5
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: LIST
37800: ST_TO_ADDR
37801: GO 38806
37803: LD_INT 3
37805: DOUBLE
37806: EQUAL
37807: IFTRUE 37811
37809: GO 37841
37811: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
37812: LD_ADDR_VAR 0 3
37816: PUSH
37817: LD_INT 1
37819: PUSH
37820: LD_INT 2
37822: PUSH
37823: LD_INT 3
37825: PUSH
37826: LD_INT 4
37828: PUSH
37829: LD_INT 5
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: ST_TO_ADDR
37839: GO 38806
37841: LD_INT 11
37843: DOUBLE
37844: EQUAL
37845: IFTRUE 37849
37847: GO 37879
37849: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37850: LD_ADDR_VAR 0 3
37854: PUSH
37855: LD_INT 1
37857: PUSH
37858: LD_INT 2
37860: PUSH
37861: LD_INT 3
37863: PUSH
37864: LD_INT 4
37866: PUSH
37867: LD_INT 5
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: ST_TO_ADDR
37877: GO 38806
37879: LD_INT 4
37881: DOUBLE
37882: EQUAL
37883: IFTRUE 37887
37885: GO 37913
37887: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37888: LD_ADDR_VAR 0 3
37892: PUSH
37893: LD_INT 2
37895: PUSH
37896: LD_INT 3
37898: PUSH
37899: LD_INT 4
37901: PUSH
37902: LD_INT 5
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: ST_TO_ADDR
37911: GO 38806
37913: LD_INT 5
37915: DOUBLE
37916: EQUAL
37917: IFTRUE 37921
37919: GO 37947
37921: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37922: LD_ADDR_VAR 0 3
37926: PUSH
37927: LD_INT 2
37929: PUSH
37930: LD_INT 3
37932: PUSH
37933: LD_INT 4
37935: PUSH
37936: LD_INT 5
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: ST_TO_ADDR
37945: GO 38806
37947: LD_INT 9
37949: DOUBLE
37950: EQUAL
37951: IFTRUE 37955
37953: GO 37981
37955: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37956: LD_ADDR_VAR 0 3
37960: PUSH
37961: LD_INT 2
37963: PUSH
37964: LD_INT 3
37966: PUSH
37967: LD_INT 4
37969: PUSH
37970: LD_INT 5
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: ST_TO_ADDR
37979: GO 38806
37981: LD_INT 7
37983: DOUBLE
37984: EQUAL
37985: IFTRUE 37989
37987: GO 38015
37989: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37990: LD_ADDR_VAR 0 3
37994: PUSH
37995: LD_INT 2
37997: PUSH
37998: LD_INT 3
38000: PUSH
38001: LD_INT 4
38003: PUSH
38004: LD_INT 5
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: ST_TO_ADDR
38013: GO 38806
38015: LD_INT 12
38017: DOUBLE
38018: EQUAL
38019: IFTRUE 38023
38021: GO 38049
38023: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
38024: LD_ADDR_VAR 0 3
38028: PUSH
38029: LD_INT 2
38031: PUSH
38032: LD_INT 3
38034: PUSH
38035: LD_INT 4
38037: PUSH
38038: LD_INT 5
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: ST_TO_ADDR
38047: GO 38806
38049: LD_INT 13
38051: DOUBLE
38052: EQUAL
38053: IFTRUE 38057
38055: GO 38083
38057: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
38058: LD_ADDR_VAR 0 3
38062: PUSH
38063: LD_INT 2
38065: PUSH
38066: LD_INT 3
38068: PUSH
38069: LD_INT 4
38071: PUSH
38072: LD_INT 5
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: ST_TO_ADDR
38081: GO 38806
38083: LD_INT 14
38085: DOUBLE
38086: EQUAL
38087: IFTRUE 38091
38089: GO 38109
38091: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
38092: LD_ADDR_VAR 0 3
38096: PUSH
38097: LD_INT 4
38099: PUSH
38100: LD_INT 5
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: ST_TO_ADDR
38107: GO 38806
38109: LD_INT 6
38111: DOUBLE
38112: EQUAL
38113: IFTRUE 38117
38115: GO 38135
38117: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
38118: LD_ADDR_VAR 0 3
38122: PUSH
38123: LD_INT 4
38125: PUSH
38126: LD_INT 5
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: ST_TO_ADDR
38133: GO 38806
38135: LD_INT 10
38137: DOUBLE
38138: EQUAL
38139: IFTRUE 38143
38141: GO 38161
38143: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
38144: LD_ADDR_VAR 0 3
38148: PUSH
38149: LD_INT 4
38151: PUSH
38152: LD_INT 5
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: ST_TO_ADDR
38159: GO 38806
38161: LD_INT 22
38163: DOUBLE
38164: EQUAL
38165: IFTRUE 38169
38167: GO 38195
38169: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
38170: LD_ADDR_VAR 0 3
38174: PUSH
38175: LD_INT 11
38177: PUSH
38178: LD_INT 12
38180: PUSH
38181: LD_INT 13
38183: PUSH
38184: LD_INT 14
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: ST_TO_ADDR
38193: GO 38806
38195: LD_INT 23
38197: DOUBLE
38198: EQUAL
38199: IFTRUE 38203
38201: GO 38229
38203: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
38204: LD_ADDR_VAR 0 3
38208: PUSH
38209: LD_INT 11
38211: PUSH
38212: LD_INT 12
38214: PUSH
38215: LD_INT 13
38217: PUSH
38218: LD_INT 14
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: ST_TO_ADDR
38227: GO 38806
38229: LD_INT 24
38231: DOUBLE
38232: EQUAL
38233: IFTRUE 38237
38235: GO 38263
38237: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
38238: LD_ADDR_VAR 0 3
38242: PUSH
38243: LD_INT 11
38245: PUSH
38246: LD_INT 12
38248: PUSH
38249: LD_INT 13
38251: PUSH
38252: LD_INT 14
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: ST_TO_ADDR
38261: GO 38806
38263: LD_INT 30
38265: DOUBLE
38266: EQUAL
38267: IFTRUE 38271
38269: GO 38297
38271: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
38272: LD_ADDR_VAR 0 3
38276: PUSH
38277: LD_INT 11
38279: PUSH
38280: LD_INT 12
38282: PUSH
38283: LD_INT 13
38285: PUSH
38286: LD_INT 14
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: ST_TO_ADDR
38295: GO 38806
38297: LD_INT 25
38299: DOUBLE
38300: EQUAL
38301: IFTRUE 38305
38303: GO 38323
38305: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
38306: LD_ADDR_VAR 0 3
38310: PUSH
38311: LD_INT 13
38313: PUSH
38314: LD_INT 14
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: ST_TO_ADDR
38321: GO 38806
38323: LD_INT 27
38325: DOUBLE
38326: EQUAL
38327: IFTRUE 38331
38329: GO 38349
38331: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
38332: LD_ADDR_VAR 0 3
38336: PUSH
38337: LD_INT 13
38339: PUSH
38340: LD_INT 14
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: ST_TO_ADDR
38347: GO 38806
38349: LD_EXP 124
38353: DOUBLE
38354: EQUAL
38355: IFTRUE 38359
38357: GO 38385
38359: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
38360: LD_ADDR_VAR 0 3
38364: PUSH
38365: LD_INT 11
38367: PUSH
38368: LD_INT 12
38370: PUSH
38371: LD_INT 13
38373: PUSH
38374: LD_INT 14
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: ST_TO_ADDR
38383: GO 38806
38385: LD_INT 28
38387: DOUBLE
38388: EQUAL
38389: IFTRUE 38393
38391: GO 38411
38393: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
38394: LD_ADDR_VAR 0 3
38398: PUSH
38399: LD_INT 13
38401: PUSH
38402: LD_INT 14
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: ST_TO_ADDR
38409: GO 38806
38411: LD_INT 29
38413: DOUBLE
38414: EQUAL
38415: IFTRUE 38419
38417: GO 38437
38419: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
38420: LD_ADDR_VAR 0 3
38424: PUSH
38425: LD_INT 13
38427: PUSH
38428: LD_INT 14
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: ST_TO_ADDR
38435: GO 38806
38437: LD_INT 31
38439: DOUBLE
38440: EQUAL
38441: IFTRUE 38445
38443: GO 38463
38445: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
38446: LD_ADDR_VAR 0 3
38450: PUSH
38451: LD_INT 13
38453: PUSH
38454: LD_INT 14
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: ST_TO_ADDR
38461: GO 38806
38463: LD_INT 26
38465: DOUBLE
38466: EQUAL
38467: IFTRUE 38471
38469: GO 38489
38471: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
38472: LD_ADDR_VAR 0 3
38476: PUSH
38477: LD_INT 13
38479: PUSH
38480: LD_INT 14
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: ST_TO_ADDR
38487: GO 38806
38489: LD_INT 42
38491: DOUBLE
38492: EQUAL
38493: IFTRUE 38497
38495: GO 38523
38497: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
38498: LD_ADDR_VAR 0 3
38502: PUSH
38503: LD_INT 21
38505: PUSH
38506: LD_INT 22
38508: PUSH
38509: LD_INT 23
38511: PUSH
38512: LD_INT 24
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: ST_TO_ADDR
38521: GO 38806
38523: LD_INT 43
38525: DOUBLE
38526: EQUAL
38527: IFTRUE 38531
38529: GO 38557
38531: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
38532: LD_ADDR_VAR 0 3
38536: PUSH
38537: LD_INT 21
38539: PUSH
38540: LD_INT 22
38542: PUSH
38543: LD_INT 23
38545: PUSH
38546: LD_INT 24
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: ST_TO_ADDR
38555: GO 38806
38557: LD_INT 44
38559: DOUBLE
38560: EQUAL
38561: IFTRUE 38565
38563: GO 38591
38565: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
38566: LD_ADDR_VAR 0 3
38570: PUSH
38571: LD_INT 21
38573: PUSH
38574: LD_INT 22
38576: PUSH
38577: LD_INT 23
38579: PUSH
38580: LD_INT 24
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: ST_TO_ADDR
38589: GO 38806
38591: LD_INT 45
38593: DOUBLE
38594: EQUAL
38595: IFTRUE 38599
38597: GO 38625
38599: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
38600: LD_ADDR_VAR 0 3
38604: PUSH
38605: LD_INT 21
38607: PUSH
38608: LD_INT 22
38610: PUSH
38611: LD_INT 23
38613: PUSH
38614: LD_INT 24
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: ST_TO_ADDR
38623: GO 38806
38625: LD_INT 49
38627: DOUBLE
38628: EQUAL
38629: IFTRUE 38633
38631: GO 38659
38633: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
38634: LD_ADDR_VAR 0 3
38638: PUSH
38639: LD_INT 21
38641: PUSH
38642: LD_INT 22
38644: PUSH
38645: LD_INT 23
38647: PUSH
38648: LD_INT 24
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: ST_TO_ADDR
38657: GO 38806
38659: LD_INT 51
38661: DOUBLE
38662: EQUAL
38663: IFTRUE 38667
38665: GO 38693
38667: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
38668: LD_ADDR_VAR 0 3
38672: PUSH
38673: LD_INT 21
38675: PUSH
38676: LD_INT 22
38678: PUSH
38679: LD_INT 23
38681: PUSH
38682: LD_INT 24
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: ST_TO_ADDR
38691: GO 38806
38693: LD_INT 52
38695: DOUBLE
38696: EQUAL
38697: IFTRUE 38701
38699: GO 38727
38701: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
38702: LD_ADDR_VAR 0 3
38706: PUSH
38707: LD_INT 21
38709: PUSH
38710: LD_INT 22
38712: PUSH
38713: LD_INT 23
38715: PUSH
38716: LD_INT 24
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: ST_TO_ADDR
38725: GO 38806
38727: LD_INT 53
38729: DOUBLE
38730: EQUAL
38731: IFTRUE 38735
38733: GO 38753
38735: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
38736: LD_ADDR_VAR 0 3
38740: PUSH
38741: LD_INT 23
38743: PUSH
38744: LD_INT 24
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: ST_TO_ADDR
38751: GO 38806
38753: LD_INT 46
38755: DOUBLE
38756: EQUAL
38757: IFTRUE 38761
38759: GO 38779
38761: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
38762: LD_ADDR_VAR 0 3
38766: PUSH
38767: LD_INT 23
38769: PUSH
38770: LD_INT 24
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: ST_TO_ADDR
38777: GO 38806
38779: LD_INT 47
38781: DOUBLE
38782: EQUAL
38783: IFTRUE 38787
38785: GO 38805
38787: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38788: LD_ADDR_VAR 0 3
38792: PUSH
38793: LD_INT 23
38795: PUSH
38796: LD_INT 24
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: ST_TO_ADDR
38803: GO 38806
38805: POP
// result := ( chassis in result ) ;
38806: LD_ADDR_VAR 0 3
38810: PUSH
38811: LD_VAR 0 1
38815: PUSH
38816: LD_VAR 0 3
38820: IN
38821: ST_TO_ADDR
// end ;
38822: LD_VAR 0 3
38826: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
38827: LD_INT 0
38829: PPUSH
38830: PPUSH
38831: PPUSH
38832: PPUSH
38833: PPUSH
38834: PPUSH
38835: PPUSH
// result := array ;
38836: LD_ADDR_VAR 0 5
38840: PUSH
38841: LD_VAR 0 1
38845: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38846: LD_VAR 0 1
38850: NOT
38851: PUSH
38852: LD_VAR 0 2
38856: NOT
38857: OR
38858: PUSH
38859: LD_VAR 0 3
38863: NOT
38864: OR
38865: PUSH
38866: LD_VAR 0 2
38870: PUSH
38871: LD_VAR 0 1
38875: GREATER
38876: OR
38877: PUSH
38878: LD_VAR 0 3
38882: PUSH
38883: LD_VAR 0 1
38887: GREATER
38888: OR
38889: IFFALSE 38893
// exit ;
38891: GO 39189
// if direction then
38893: LD_VAR 0 4
38897: IFFALSE 38961
// begin d := 1 ;
38899: LD_ADDR_VAR 0 9
38903: PUSH
38904: LD_INT 1
38906: ST_TO_ADDR
// if i_from > i_to then
38907: LD_VAR 0 2
38911: PUSH
38912: LD_VAR 0 3
38916: GREATER
38917: IFFALSE 38943
// length := ( array - i_from ) + i_to else
38919: LD_ADDR_VAR 0 11
38923: PUSH
38924: LD_VAR 0 1
38928: PUSH
38929: LD_VAR 0 2
38933: MINUS
38934: PUSH
38935: LD_VAR 0 3
38939: PLUS
38940: ST_TO_ADDR
38941: GO 38959
// length := i_to - i_from ;
38943: LD_ADDR_VAR 0 11
38947: PUSH
38948: LD_VAR 0 3
38952: PUSH
38953: LD_VAR 0 2
38957: MINUS
38958: ST_TO_ADDR
// end else
38959: GO 39022
// begin d := - 1 ;
38961: LD_ADDR_VAR 0 9
38965: PUSH
38966: LD_INT 1
38968: NEG
38969: ST_TO_ADDR
// if i_from > i_to then
38970: LD_VAR 0 2
38974: PUSH
38975: LD_VAR 0 3
38979: GREATER
38980: IFFALSE 39000
// length := i_from - i_to else
38982: LD_ADDR_VAR 0 11
38986: PUSH
38987: LD_VAR 0 2
38991: PUSH
38992: LD_VAR 0 3
38996: MINUS
38997: ST_TO_ADDR
38998: GO 39022
// length := ( array - i_to ) + i_from ;
39000: LD_ADDR_VAR 0 11
39004: PUSH
39005: LD_VAR 0 1
39009: PUSH
39010: LD_VAR 0 3
39014: MINUS
39015: PUSH
39016: LD_VAR 0 2
39020: PLUS
39021: ST_TO_ADDR
// end ; if not length then
39022: LD_VAR 0 11
39026: NOT
39027: IFFALSE 39031
// exit ;
39029: GO 39189
// tmp := array ;
39031: LD_ADDR_VAR 0 10
39035: PUSH
39036: LD_VAR 0 1
39040: ST_TO_ADDR
// for i = 1 to length do
39041: LD_ADDR_VAR 0 6
39045: PUSH
39046: DOUBLE
39047: LD_INT 1
39049: DEC
39050: ST_TO_ADDR
39051: LD_VAR 0 11
39055: PUSH
39056: FOR_TO
39057: IFFALSE 39177
// begin for j = 1 to array do
39059: LD_ADDR_VAR 0 7
39063: PUSH
39064: DOUBLE
39065: LD_INT 1
39067: DEC
39068: ST_TO_ADDR
39069: LD_VAR 0 1
39073: PUSH
39074: FOR_TO
39075: IFFALSE 39163
// begin k := j + d ;
39077: LD_ADDR_VAR 0 8
39081: PUSH
39082: LD_VAR 0 7
39086: PUSH
39087: LD_VAR 0 9
39091: PLUS
39092: ST_TO_ADDR
// if k > array then
39093: LD_VAR 0 8
39097: PUSH
39098: LD_VAR 0 1
39102: GREATER
39103: IFFALSE 39113
// k := 1 ;
39105: LD_ADDR_VAR 0 8
39109: PUSH
39110: LD_INT 1
39112: ST_TO_ADDR
// if not k then
39113: LD_VAR 0 8
39117: NOT
39118: IFFALSE 39130
// k := array ;
39120: LD_ADDR_VAR 0 8
39124: PUSH
39125: LD_VAR 0 1
39129: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
39130: LD_ADDR_VAR 0 10
39134: PUSH
39135: LD_VAR 0 10
39139: PPUSH
39140: LD_VAR 0 8
39144: PPUSH
39145: LD_VAR 0 1
39149: PUSH
39150: LD_VAR 0 7
39154: ARRAY
39155: PPUSH
39156: CALL_OW 1
39160: ST_TO_ADDR
// end ;
39161: GO 39074
39163: POP
39164: POP
// array := tmp ;
39165: LD_ADDR_VAR 0 1
39169: PUSH
39170: LD_VAR 0 10
39174: ST_TO_ADDR
// end ;
39175: GO 39056
39177: POP
39178: POP
// result := array ;
39179: LD_ADDR_VAR 0 5
39183: PUSH
39184: LD_VAR 0 1
39188: ST_TO_ADDR
// end ;
39189: LD_VAR 0 5
39193: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
39194: LD_INT 0
39196: PPUSH
39197: PPUSH
// result := 0 ;
39198: LD_ADDR_VAR 0 3
39202: PUSH
39203: LD_INT 0
39205: ST_TO_ADDR
// if not array or not value in array then
39206: LD_VAR 0 1
39210: NOT
39211: PUSH
39212: LD_VAR 0 2
39216: PUSH
39217: LD_VAR 0 1
39221: IN
39222: NOT
39223: OR
39224: IFFALSE 39228
// exit ;
39226: GO 39282
// for i = 1 to array do
39228: LD_ADDR_VAR 0 4
39232: PUSH
39233: DOUBLE
39234: LD_INT 1
39236: DEC
39237: ST_TO_ADDR
39238: LD_VAR 0 1
39242: PUSH
39243: FOR_TO
39244: IFFALSE 39280
// if value = array [ i ] then
39246: LD_VAR 0 2
39250: PUSH
39251: LD_VAR 0 1
39255: PUSH
39256: LD_VAR 0 4
39260: ARRAY
39261: EQUAL
39262: IFFALSE 39278
// begin result := i ;
39264: LD_ADDR_VAR 0 3
39268: PUSH
39269: LD_VAR 0 4
39273: ST_TO_ADDR
// exit ;
39274: POP
39275: POP
39276: GO 39282
// end ;
39278: GO 39243
39280: POP
39281: POP
// end ;
39282: LD_VAR 0 3
39286: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
39287: LD_INT 0
39289: PPUSH
// vc_chassis := chassis ;
39290: LD_ADDR_OWVAR 37
39294: PUSH
39295: LD_VAR 0 1
39299: ST_TO_ADDR
// vc_engine := engine ;
39300: LD_ADDR_OWVAR 39
39304: PUSH
39305: LD_VAR 0 2
39309: ST_TO_ADDR
// vc_control := control ;
39310: LD_ADDR_OWVAR 38
39314: PUSH
39315: LD_VAR 0 3
39319: ST_TO_ADDR
// vc_weapon := weapon ;
39320: LD_ADDR_OWVAR 40
39324: PUSH
39325: LD_VAR 0 4
39329: ST_TO_ADDR
// vc_fuel_battery := fuel ;
39330: LD_ADDR_OWVAR 41
39334: PUSH
39335: LD_VAR 0 5
39339: ST_TO_ADDR
// end ;
39340: LD_VAR 0 6
39344: RET
// export function WantPlant ( unit ) ; var task ; begin
39345: LD_INT 0
39347: PPUSH
39348: PPUSH
// result := false ;
39349: LD_ADDR_VAR 0 2
39353: PUSH
39354: LD_INT 0
39356: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
39357: LD_ADDR_VAR 0 3
39361: PUSH
39362: LD_VAR 0 1
39366: PPUSH
39367: CALL_OW 437
39371: ST_TO_ADDR
// if task then
39372: LD_VAR 0 3
39376: IFFALSE 39404
// if task [ 1 ] [ 1 ] = p then
39378: LD_VAR 0 3
39382: PUSH
39383: LD_INT 1
39385: ARRAY
39386: PUSH
39387: LD_INT 1
39389: ARRAY
39390: PUSH
39391: LD_STRING p
39393: EQUAL
39394: IFFALSE 39404
// result := true ;
39396: LD_ADDR_VAR 0 2
39400: PUSH
39401: LD_INT 1
39403: ST_TO_ADDR
// end ;
39404: LD_VAR 0 2
39408: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
39409: LD_INT 0
39411: PPUSH
39412: PPUSH
39413: PPUSH
39414: PPUSH
// if pos < 1 then
39415: LD_VAR 0 2
39419: PUSH
39420: LD_INT 1
39422: LESS
39423: IFFALSE 39427
// exit ;
39425: GO 39730
// if pos = 1 then
39427: LD_VAR 0 2
39431: PUSH
39432: LD_INT 1
39434: EQUAL
39435: IFFALSE 39468
// result := Replace ( arr , pos [ 1 ] , value ) else
39437: LD_ADDR_VAR 0 4
39441: PUSH
39442: LD_VAR 0 1
39446: PPUSH
39447: LD_VAR 0 2
39451: PUSH
39452: LD_INT 1
39454: ARRAY
39455: PPUSH
39456: LD_VAR 0 3
39460: PPUSH
39461: CALL_OW 1
39465: ST_TO_ADDR
39466: GO 39730
// begin tmp := arr ;
39468: LD_ADDR_VAR 0 6
39472: PUSH
39473: LD_VAR 0 1
39477: ST_TO_ADDR
// s_arr := [ tmp ] ;
39478: LD_ADDR_VAR 0 7
39482: PUSH
39483: LD_VAR 0 6
39487: PUSH
39488: EMPTY
39489: LIST
39490: ST_TO_ADDR
// for i = 1 to pos - 1 do
39491: LD_ADDR_VAR 0 5
39495: PUSH
39496: DOUBLE
39497: LD_INT 1
39499: DEC
39500: ST_TO_ADDR
39501: LD_VAR 0 2
39505: PUSH
39506: LD_INT 1
39508: MINUS
39509: PUSH
39510: FOR_TO
39511: IFFALSE 39556
// begin tmp := tmp [ pos [ i ] ] ;
39513: LD_ADDR_VAR 0 6
39517: PUSH
39518: LD_VAR 0 6
39522: PUSH
39523: LD_VAR 0 2
39527: PUSH
39528: LD_VAR 0 5
39532: ARRAY
39533: ARRAY
39534: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
39535: LD_ADDR_VAR 0 7
39539: PUSH
39540: LD_VAR 0 7
39544: PUSH
39545: LD_VAR 0 6
39549: PUSH
39550: EMPTY
39551: LIST
39552: ADD
39553: ST_TO_ADDR
// end ;
39554: GO 39510
39556: POP
39557: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
39558: LD_ADDR_VAR 0 6
39562: PUSH
39563: LD_VAR 0 6
39567: PPUSH
39568: LD_VAR 0 2
39572: PUSH
39573: LD_VAR 0 2
39577: ARRAY
39578: PPUSH
39579: LD_VAR 0 3
39583: PPUSH
39584: CALL_OW 1
39588: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
39589: LD_ADDR_VAR 0 7
39593: PUSH
39594: LD_VAR 0 7
39598: PPUSH
39599: LD_VAR 0 7
39603: PPUSH
39604: LD_VAR 0 6
39608: PPUSH
39609: CALL_OW 1
39613: ST_TO_ADDR
// for i = s_arr downto 2 do
39614: LD_ADDR_VAR 0 5
39618: PUSH
39619: DOUBLE
39620: LD_VAR 0 7
39624: INC
39625: ST_TO_ADDR
39626: LD_INT 2
39628: PUSH
39629: FOR_DOWNTO
39630: IFFALSE 39714
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
39632: LD_ADDR_VAR 0 6
39636: PUSH
39637: LD_VAR 0 7
39641: PUSH
39642: LD_VAR 0 5
39646: PUSH
39647: LD_INT 1
39649: MINUS
39650: ARRAY
39651: PPUSH
39652: LD_VAR 0 2
39656: PUSH
39657: LD_VAR 0 5
39661: PUSH
39662: LD_INT 1
39664: MINUS
39665: ARRAY
39666: PPUSH
39667: LD_VAR 0 7
39671: PUSH
39672: LD_VAR 0 5
39676: ARRAY
39677: PPUSH
39678: CALL_OW 1
39682: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
39683: LD_ADDR_VAR 0 7
39687: PUSH
39688: LD_VAR 0 7
39692: PPUSH
39693: LD_VAR 0 5
39697: PUSH
39698: LD_INT 1
39700: MINUS
39701: PPUSH
39702: LD_VAR 0 6
39706: PPUSH
39707: CALL_OW 1
39711: ST_TO_ADDR
// end ;
39712: GO 39629
39714: POP
39715: POP
// result := s_arr [ 1 ] ;
39716: LD_ADDR_VAR 0 4
39720: PUSH
39721: LD_VAR 0 7
39725: PUSH
39726: LD_INT 1
39728: ARRAY
39729: ST_TO_ADDR
// end ; end ;
39730: LD_VAR 0 4
39734: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
39735: LD_INT 0
39737: PPUSH
39738: PPUSH
// if not list then
39739: LD_VAR 0 1
39743: NOT
39744: IFFALSE 39748
// exit ;
39746: GO 39839
// i := list [ pos1 ] ;
39748: LD_ADDR_VAR 0 5
39752: PUSH
39753: LD_VAR 0 1
39757: PUSH
39758: LD_VAR 0 2
39762: ARRAY
39763: ST_TO_ADDR
// if not i then
39764: LD_VAR 0 5
39768: NOT
39769: IFFALSE 39773
// exit ;
39771: GO 39839
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
39773: LD_ADDR_VAR 0 1
39777: PUSH
39778: LD_VAR 0 1
39782: PPUSH
39783: LD_VAR 0 2
39787: PPUSH
39788: LD_VAR 0 1
39792: PUSH
39793: LD_VAR 0 3
39797: ARRAY
39798: PPUSH
39799: CALL_OW 1
39803: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
39804: LD_ADDR_VAR 0 1
39808: PUSH
39809: LD_VAR 0 1
39813: PPUSH
39814: LD_VAR 0 3
39818: PPUSH
39819: LD_VAR 0 5
39823: PPUSH
39824: CALL_OW 1
39828: ST_TO_ADDR
// result := list ;
39829: LD_ADDR_VAR 0 4
39833: PUSH
39834: LD_VAR 0 1
39838: ST_TO_ADDR
// end ;
39839: LD_VAR 0 4
39843: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39844: LD_INT 0
39846: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39847: LD_ADDR_VAR 0 5
39851: PUSH
39852: LD_VAR 0 1
39856: PPUSH
39857: CALL_OW 250
39861: PPUSH
39862: LD_VAR 0 1
39866: PPUSH
39867: CALL_OW 251
39871: PPUSH
39872: LD_VAR 0 2
39876: PPUSH
39877: LD_VAR 0 3
39881: PPUSH
39882: LD_VAR 0 4
39886: PPUSH
39887: CALL 39897 0 5
39891: ST_TO_ADDR
// end ;
39892: LD_VAR 0 5
39896: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39897: LD_INT 0
39899: PPUSH
39900: PPUSH
39901: PPUSH
39902: PPUSH
// if not list then
39903: LD_VAR 0 3
39907: NOT
39908: IFFALSE 39912
// exit ;
39910: GO 40300
// result := [ ] ;
39912: LD_ADDR_VAR 0 6
39916: PUSH
39917: EMPTY
39918: ST_TO_ADDR
// for i in list do
39919: LD_ADDR_VAR 0 7
39923: PUSH
39924: LD_VAR 0 3
39928: PUSH
39929: FOR_IN
39930: IFFALSE 40132
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39932: LD_ADDR_VAR 0 9
39936: PUSH
39937: LD_VAR 0 7
39941: PPUSH
39942: LD_VAR 0 1
39946: PPUSH
39947: LD_VAR 0 2
39951: PPUSH
39952: CALL_OW 297
39956: ST_TO_ADDR
// if not result then
39957: LD_VAR 0 6
39961: NOT
39962: IFFALSE 39988
// result := [ [ i , tmp ] ] else
39964: LD_ADDR_VAR 0 6
39968: PUSH
39969: LD_VAR 0 7
39973: PUSH
39974: LD_VAR 0 9
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: EMPTY
39984: LIST
39985: ST_TO_ADDR
39986: GO 40130
// begin if result [ result ] [ 2 ] < tmp then
39988: LD_VAR 0 6
39992: PUSH
39993: LD_VAR 0 6
39997: ARRAY
39998: PUSH
39999: LD_INT 2
40001: ARRAY
40002: PUSH
40003: LD_VAR 0 9
40007: LESS
40008: IFFALSE 40050
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
40010: LD_ADDR_VAR 0 6
40014: PUSH
40015: LD_VAR 0 6
40019: PPUSH
40020: LD_VAR 0 6
40024: PUSH
40025: LD_INT 1
40027: PLUS
40028: PPUSH
40029: LD_VAR 0 7
40033: PUSH
40034: LD_VAR 0 9
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PPUSH
40043: CALL_OW 2
40047: ST_TO_ADDR
40048: GO 40130
// for j = 1 to result do
40050: LD_ADDR_VAR 0 8
40054: PUSH
40055: DOUBLE
40056: LD_INT 1
40058: DEC
40059: ST_TO_ADDR
40060: LD_VAR 0 6
40064: PUSH
40065: FOR_TO
40066: IFFALSE 40128
// begin if tmp < result [ j ] [ 2 ] then
40068: LD_VAR 0 9
40072: PUSH
40073: LD_VAR 0 6
40077: PUSH
40078: LD_VAR 0 8
40082: ARRAY
40083: PUSH
40084: LD_INT 2
40086: ARRAY
40087: LESS
40088: IFFALSE 40126
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40090: LD_ADDR_VAR 0 6
40094: PUSH
40095: LD_VAR 0 6
40099: PPUSH
40100: LD_VAR 0 8
40104: PPUSH
40105: LD_VAR 0 7
40109: PUSH
40110: LD_VAR 0 9
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PPUSH
40119: CALL_OW 2
40123: ST_TO_ADDR
// break ;
40124: GO 40128
// end ; end ;
40126: GO 40065
40128: POP
40129: POP
// end ; end ;
40130: GO 39929
40132: POP
40133: POP
// if result and not asc then
40134: LD_VAR 0 6
40138: PUSH
40139: LD_VAR 0 4
40143: NOT
40144: AND
40145: IFFALSE 40220
// begin tmp := result ;
40147: LD_ADDR_VAR 0 9
40151: PUSH
40152: LD_VAR 0 6
40156: ST_TO_ADDR
// for i = tmp downto 1 do
40157: LD_ADDR_VAR 0 7
40161: PUSH
40162: DOUBLE
40163: LD_VAR 0 9
40167: INC
40168: ST_TO_ADDR
40169: LD_INT 1
40171: PUSH
40172: FOR_DOWNTO
40173: IFFALSE 40218
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
40175: LD_ADDR_VAR 0 6
40179: PUSH
40180: LD_VAR 0 6
40184: PPUSH
40185: LD_VAR 0 9
40189: PUSH
40190: LD_VAR 0 7
40194: MINUS
40195: PUSH
40196: LD_INT 1
40198: PLUS
40199: PPUSH
40200: LD_VAR 0 9
40204: PUSH
40205: LD_VAR 0 7
40209: ARRAY
40210: PPUSH
40211: CALL_OW 1
40215: ST_TO_ADDR
40216: GO 40172
40218: POP
40219: POP
// end ; tmp := [ ] ;
40220: LD_ADDR_VAR 0 9
40224: PUSH
40225: EMPTY
40226: ST_TO_ADDR
// if mode then
40227: LD_VAR 0 5
40231: IFFALSE 40300
// begin for i = 1 to result do
40233: LD_ADDR_VAR 0 7
40237: PUSH
40238: DOUBLE
40239: LD_INT 1
40241: DEC
40242: ST_TO_ADDR
40243: LD_VAR 0 6
40247: PUSH
40248: FOR_TO
40249: IFFALSE 40288
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
40251: LD_ADDR_VAR 0 9
40255: PUSH
40256: LD_VAR 0 9
40260: PPUSH
40261: LD_VAR 0 7
40265: PPUSH
40266: LD_VAR 0 6
40270: PUSH
40271: LD_VAR 0 7
40275: ARRAY
40276: PUSH
40277: LD_INT 1
40279: ARRAY
40280: PPUSH
40281: CALL_OW 1
40285: ST_TO_ADDR
40286: GO 40248
40288: POP
40289: POP
// result := tmp ;
40290: LD_ADDR_VAR 0 6
40294: PUSH
40295: LD_VAR 0 9
40299: ST_TO_ADDR
// end ; end ;
40300: LD_VAR 0 6
40304: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
40305: LD_INT 0
40307: PPUSH
40308: PPUSH
40309: PPUSH
40310: PPUSH
40311: PPUSH
40312: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
40313: LD_ADDR_VAR 0 5
40317: PUSH
40318: LD_INT 0
40320: PUSH
40321: LD_INT 0
40323: PUSH
40324: LD_INT 0
40326: PUSH
40327: EMPTY
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: ST_TO_ADDR
// if not x or not y then
40335: LD_VAR 0 2
40339: NOT
40340: PUSH
40341: LD_VAR 0 3
40345: NOT
40346: OR
40347: IFFALSE 40351
// exit ;
40349: GO 42003
// if not range then
40351: LD_VAR 0 4
40355: NOT
40356: IFFALSE 40366
// range := 10 ;
40358: LD_ADDR_VAR 0 4
40362: PUSH
40363: LD_INT 10
40365: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40366: LD_ADDR_VAR 0 8
40370: PUSH
40371: LD_INT 81
40373: PUSH
40374: LD_VAR 0 1
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 92
40385: PUSH
40386: LD_VAR 0 2
40390: PUSH
40391: LD_VAR 0 3
40395: PUSH
40396: LD_VAR 0 4
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 3
40409: PUSH
40410: LD_INT 21
40412: PUSH
40413: LD_INT 3
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: LIST
40428: PPUSH
40429: CALL_OW 69
40433: ST_TO_ADDR
// if not tmp then
40434: LD_VAR 0 8
40438: NOT
40439: IFFALSE 40443
// exit ;
40441: GO 42003
// for i in tmp do
40443: LD_ADDR_VAR 0 6
40447: PUSH
40448: LD_VAR 0 8
40452: PUSH
40453: FOR_IN
40454: IFFALSE 41978
// begin points := [ 0 , 0 , 0 ] ;
40456: LD_ADDR_VAR 0 9
40460: PUSH
40461: LD_INT 0
40463: PUSH
40464: LD_INT 0
40466: PUSH
40467: LD_INT 0
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: LIST
40474: ST_TO_ADDR
// bpoints := 1 ;
40475: LD_ADDR_VAR 0 10
40479: PUSH
40480: LD_INT 1
40482: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40483: LD_VAR 0 6
40487: PPUSH
40488: CALL_OW 247
40492: PUSH
40493: LD_INT 1
40495: DOUBLE
40496: EQUAL
40497: IFTRUE 40501
40499: GO 41079
40501: POP
// begin if GetClass ( i ) = 1 then
40502: LD_VAR 0 6
40506: PPUSH
40507: CALL_OW 257
40511: PUSH
40512: LD_INT 1
40514: EQUAL
40515: IFFALSE 40536
// points := [ 10 , 5 , 3 ] ;
40517: LD_ADDR_VAR 0 9
40521: PUSH
40522: LD_INT 10
40524: PUSH
40525: LD_INT 5
40527: PUSH
40528: LD_INT 3
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: LIST
40535: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40536: LD_VAR 0 6
40540: PPUSH
40541: CALL_OW 257
40545: PUSH
40546: LD_INT 2
40548: PUSH
40549: LD_INT 3
40551: PUSH
40552: LD_INT 4
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: LIST
40559: IN
40560: IFFALSE 40581
// points := [ 3 , 2 , 1 ] ;
40562: LD_ADDR_VAR 0 9
40566: PUSH
40567: LD_INT 3
40569: PUSH
40570: LD_INT 2
40572: PUSH
40573: LD_INT 1
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: LIST
40580: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40581: LD_VAR 0 6
40585: PPUSH
40586: CALL_OW 257
40590: PUSH
40591: LD_INT 5
40593: EQUAL
40594: IFFALSE 40615
// points := [ 130 , 5 , 2 ] ;
40596: LD_ADDR_VAR 0 9
40600: PUSH
40601: LD_INT 130
40603: PUSH
40604: LD_INT 5
40606: PUSH
40607: LD_INT 2
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: LIST
40614: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40615: LD_VAR 0 6
40619: PPUSH
40620: CALL_OW 257
40624: PUSH
40625: LD_INT 8
40627: EQUAL
40628: IFFALSE 40649
// points := [ 35 , 35 , 30 ] ;
40630: LD_ADDR_VAR 0 9
40634: PUSH
40635: LD_INT 35
40637: PUSH
40638: LD_INT 35
40640: PUSH
40641: LD_INT 30
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: LIST
40648: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40649: LD_VAR 0 6
40653: PPUSH
40654: CALL_OW 257
40658: PUSH
40659: LD_INT 9
40661: EQUAL
40662: IFFALSE 40683
// points := [ 20 , 55 , 40 ] ;
40664: LD_ADDR_VAR 0 9
40668: PUSH
40669: LD_INT 20
40671: PUSH
40672: LD_INT 55
40674: PUSH
40675: LD_INT 40
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: LIST
40682: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40683: LD_VAR 0 6
40687: PPUSH
40688: CALL_OW 257
40692: PUSH
40693: LD_INT 12
40695: PUSH
40696: LD_INT 16
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: IN
40703: IFFALSE 40724
// points := [ 5 , 3 , 2 ] ;
40705: LD_ADDR_VAR 0 9
40709: PUSH
40710: LD_INT 5
40712: PUSH
40713: LD_INT 3
40715: PUSH
40716: LD_INT 2
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: LIST
40723: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40724: LD_VAR 0 6
40728: PPUSH
40729: CALL_OW 257
40733: PUSH
40734: LD_INT 17
40736: EQUAL
40737: IFFALSE 40758
// points := [ 100 , 50 , 75 ] ;
40739: LD_ADDR_VAR 0 9
40743: PUSH
40744: LD_INT 100
40746: PUSH
40747: LD_INT 50
40749: PUSH
40750: LD_INT 75
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: LIST
40757: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40758: LD_VAR 0 6
40762: PPUSH
40763: CALL_OW 257
40767: PUSH
40768: LD_INT 15
40770: EQUAL
40771: IFFALSE 40792
// points := [ 10 , 5 , 3 ] ;
40773: LD_ADDR_VAR 0 9
40777: PUSH
40778: LD_INT 10
40780: PUSH
40781: LD_INT 5
40783: PUSH
40784: LD_INT 3
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: LIST
40791: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40792: LD_VAR 0 6
40796: PPUSH
40797: CALL_OW 257
40801: PUSH
40802: LD_INT 14
40804: EQUAL
40805: IFFALSE 40826
// points := [ 10 , 0 , 0 ] ;
40807: LD_ADDR_VAR 0 9
40811: PUSH
40812: LD_INT 10
40814: PUSH
40815: LD_INT 0
40817: PUSH
40818: LD_INT 0
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: LIST
40825: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40826: LD_VAR 0 6
40830: PPUSH
40831: CALL_OW 257
40835: PUSH
40836: LD_INT 11
40838: EQUAL
40839: IFFALSE 40860
// points := [ 30 , 10 , 5 ] ;
40841: LD_ADDR_VAR 0 9
40845: PUSH
40846: LD_INT 30
40848: PUSH
40849: LD_INT 10
40851: PUSH
40852: LD_INT 5
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: LIST
40859: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40860: LD_VAR 0 1
40864: PPUSH
40865: LD_INT 5
40867: PPUSH
40868: CALL_OW 321
40872: PUSH
40873: LD_INT 2
40875: EQUAL
40876: IFFALSE 40893
// bpoints := bpoints * 1.8 ;
40878: LD_ADDR_VAR 0 10
40882: PUSH
40883: LD_VAR 0 10
40887: PUSH
40888: LD_REAL  1.80000000000000E+0000
40891: MUL
40892: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40893: LD_VAR 0 6
40897: PPUSH
40898: CALL_OW 257
40902: PUSH
40903: LD_INT 1
40905: PUSH
40906: LD_INT 2
40908: PUSH
40909: LD_INT 3
40911: PUSH
40912: LD_INT 4
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: IN
40921: PUSH
40922: LD_VAR 0 1
40926: PPUSH
40927: LD_INT 51
40929: PPUSH
40930: CALL_OW 321
40934: PUSH
40935: LD_INT 2
40937: EQUAL
40938: AND
40939: IFFALSE 40956
// bpoints := bpoints * 1.2 ;
40941: LD_ADDR_VAR 0 10
40945: PUSH
40946: LD_VAR 0 10
40950: PUSH
40951: LD_REAL  1.20000000000000E+0000
40954: MUL
40955: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40956: LD_VAR 0 6
40960: PPUSH
40961: CALL_OW 257
40965: PUSH
40966: LD_INT 5
40968: PUSH
40969: LD_INT 7
40971: PUSH
40972: LD_INT 9
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: LIST
40979: IN
40980: PUSH
40981: LD_VAR 0 1
40985: PPUSH
40986: LD_INT 52
40988: PPUSH
40989: CALL_OW 321
40993: PUSH
40994: LD_INT 2
40996: EQUAL
40997: AND
40998: IFFALSE 41015
// bpoints := bpoints * 1.5 ;
41000: LD_ADDR_VAR 0 10
41004: PUSH
41005: LD_VAR 0 10
41009: PUSH
41010: LD_REAL  1.50000000000000E+0000
41013: MUL
41014: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
41015: LD_VAR 0 1
41019: PPUSH
41020: LD_INT 66
41022: PPUSH
41023: CALL_OW 321
41027: PUSH
41028: LD_INT 2
41030: EQUAL
41031: IFFALSE 41048
// bpoints := bpoints * 1.1 ;
41033: LD_ADDR_VAR 0 10
41037: PUSH
41038: LD_VAR 0 10
41042: PUSH
41043: LD_REAL  1.10000000000000E+0000
41046: MUL
41047: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
41048: LD_ADDR_VAR 0 10
41052: PUSH
41053: LD_VAR 0 10
41057: PUSH
41058: LD_VAR 0 6
41062: PPUSH
41063: LD_INT 1
41065: PPUSH
41066: CALL_OW 259
41070: PUSH
41071: LD_REAL  1.15000000000000E+0000
41074: MUL
41075: MUL
41076: ST_TO_ADDR
// end ; unit_vehicle :
41077: GO 41907
41079: LD_INT 2
41081: DOUBLE
41082: EQUAL
41083: IFTRUE 41087
41085: GO 41895
41087: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
41088: LD_VAR 0 6
41092: PPUSH
41093: CALL_OW 264
41097: PUSH
41098: LD_INT 2
41100: PUSH
41101: LD_INT 42
41103: PUSH
41104: LD_INT 24
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: LIST
41111: IN
41112: IFFALSE 41133
// points := [ 25 , 5 , 3 ] ;
41114: LD_ADDR_VAR 0 9
41118: PUSH
41119: LD_INT 25
41121: PUSH
41122: LD_INT 5
41124: PUSH
41125: LD_INT 3
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: LIST
41132: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
41133: LD_VAR 0 6
41137: PPUSH
41138: CALL_OW 264
41142: PUSH
41143: LD_INT 4
41145: PUSH
41146: LD_INT 43
41148: PUSH
41149: LD_INT 25
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: LIST
41156: IN
41157: IFFALSE 41178
// points := [ 40 , 15 , 5 ] ;
41159: LD_ADDR_VAR 0 9
41163: PUSH
41164: LD_INT 40
41166: PUSH
41167: LD_INT 15
41169: PUSH
41170: LD_INT 5
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: LIST
41177: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
41178: LD_VAR 0 6
41182: PPUSH
41183: CALL_OW 264
41187: PUSH
41188: LD_INT 3
41190: PUSH
41191: LD_INT 23
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: IN
41198: IFFALSE 41219
// points := [ 7 , 25 , 8 ] ;
41200: LD_ADDR_VAR 0 9
41204: PUSH
41205: LD_INT 7
41207: PUSH
41208: LD_INT 25
41210: PUSH
41211: LD_INT 8
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: LIST
41218: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
41219: LD_VAR 0 6
41223: PPUSH
41224: CALL_OW 264
41228: PUSH
41229: LD_INT 5
41231: PUSH
41232: LD_INT 27
41234: PUSH
41235: LD_INT 44
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: LIST
41242: IN
41243: IFFALSE 41264
// points := [ 14 , 50 , 16 ] ;
41245: LD_ADDR_VAR 0 9
41249: PUSH
41250: LD_INT 14
41252: PUSH
41253: LD_INT 50
41255: PUSH
41256: LD_INT 16
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: LIST
41263: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
41264: LD_VAR 0 6
41268: PPUSH
41269: CALL_OW 264
41273: PUSH
41274: LD_INT 6
41276: PUSH
41277: LD_INT 46
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: IN
41284: IFFALSE 41305
// points := [ 32 , 120 , 70 ] ;
41286: LD_ADDR_VAR 0 9
41290: PUSH
41291: LD_INT 32
41293: PUSH
41294: LD_INT 120
41296: PUSH
41297: LD_INT 70
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: LIST
41304: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
41305: LD_VAR 0 6
41309: PPUSH
41310: CALL_OW 264
41314: PUSH
41315: LD_INT 7
41317: PUSH
41318: LD_INT 28
41320: PUSH
41321: LD_INT 45
41323: PUSH
41324: LD_EXP 124
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: IN
41335: IFFALSE 41356
// points := [ 35 , 20 , 45 ] ;
41337: LD_ADDR_VAR 0 9
41341: PUSH
41342: LD_INT 35
41344: PUSH
41345: LD_INT 20
41347: PUSH
41348: LD_INT 45
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: LIST
41355: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
41356: LD_VAR 0 6
41360: PPUSH
41361: CALL_OW 264
41365: PUSH
41366: LD_INT 47
41368: PUSH
41369: EMPTY
41370: LIST
41371: IN
41372: IFFALSE 41393
// points := [ 67 , 45 , 75 ] ;
41374: LD_ADDR_VAR 0 9
41378: PUSH
41379: LD_INT 67
41381: PUSH
41382: LD_INT 45
41384: PUSH
41385: LD_INT 75
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: LIST
41392: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41393: LD_VAR 0 6
41397: PPUSH
41398: CALL_OW 264
41402: PUSH
41403: LD_INT 26
41405: PUSH
41406: EMPTY
41407: LIST
41408: IN
41409: IFFALSE 41430
// points := [ 120 , 30 , 80 ] ;
41411: LD_ADDR_VAR 0 9
41415: PUSH
41416: LD_INT 120
41418: PUSH
41419: LD_INT 30
41421: PUSH
41422: LD_INT 80
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: LIST
41429: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41430: LD_VAR 0 6
41434: PPUSH
41435: CALL_OW 264
41439: PUSH
41440: LD_INT 22
41442: PUSH
41443: EMPTY
41444: LIST
41445: IN
41446: IFFALSE 41467
// points := [ 40 , 1 , 1 ] ;
41448: LD_ADDR_VAR 0 9
41452: PUSH
41453: LD_INT 40
41455: PUSH
41456: LD_INT 1
41458: PUSH
41459: LD_INT 1
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: LIST
41466: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41467: LD_VAR 0 6
41471: PPUSH
41472: CALL_OW 264
41476: PUSH
41477: LD_INT 29
41479: PUSH
41480: EMPTY
41481: LIST
41482: IN
41483: IFFALSE 41504
// points := [ 70 , 200 , 400 ] ;
41485: LD_ADDR_VAR 0 9
41489: PUSH
41490: LD_INT 70
41492: PUSH
41493: LD_INT 200
41495: PUSH
41496: LD_INT 400
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: LIST
41503: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41504: LD_VAR 0 6
41508: PPUSH
41509: CALL_OW 264
41513: PUSH
41514: LD_INT 14
41516: PUSH
41517: LD_INT 53
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: IN
41524: IFFALSE 41545
// points := [ 40 , 10 , 20 ] ;
41526: LD_ADDR_VAR 0 9
41530: PUSH
41531: LD_INT 40
41533: PUSH
41534: LD_INT 10
41536: PUSH
41537: LD_INT 20
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: LIST
41544: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41545: LD_VAR 0 6
41549: PPUSH
41550: CALL_OW 264
41554: PUSH
41555: LD_INT 9
41557: PUSH
41558: EMPTY
41559: LIST
41560: IN
41561: IFFALSE 41582
// points := [ 5 , 70 , 20 ] ;
41563: LD_ADDR_VAR 0 9
41567: PUSH
41568: LD_INT 5
41570: PUSH
41571: LD_INT 70
41573: PUSH
41574: LD_INT 20
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: LIST
41581: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41582: LD_VAR 0 6
41586: PPUSH
41587: CALL_OW 264
41591: PUSH
41592: LD_INT 10
41594: PUSH
41595: EMPTY
41596: LIST
41597: IN
41598: IFFALSE 41619
// points := [ 35 , 110 , 70 ] ;
41600: LD_ADDR_VAR 0 9
41604: PUSH
41605: LD_INT 35
41607: PUSH
41608: LD_INT 110
41610: PUSH
41611: LD_INT 70
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: LIST
41618: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41619: LD_VAR 0 6
41623: PPUSH
41624: CALL_OW 265
41628: PUSH
41629: LD_INT 25
41631: EQUAL
41632: IFFALSE 41653
// points := [ 80 , 65 , 100 ] ;
41634: LD_ADDR_VAR 0 9
41638: PUSH
41639: LD_INT 80
41641: PUSH
41642: LD_INT 65
41644: PUSH
41645: LD_INT 100
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: LIST
41652: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41653: LD_VAR 0 6
41657: PPUSH
41658: CALL_OW 263
41662: PUSH
41663: LD_INT 1
41665: EQUAL
41666: IFFALSE 41701
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41668: LD_ADDR_VAR 0 10
41672: PUSH
41673: LD_VAR 0 10
41677: PUSH
41678: LD_VAR 0 6
41682: PPUSH
41683: CALL_OW 311
41687: PPUSH
41688: LD_INT 3
41690: PPUSH
41691: CALL_OW 259
41695: PUSH
41696: LD_INT 4
41698: MUL
41699: MUL
41700: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41701: LD_VAR 0 6
41705: PPUSH
41706: CALL_OW 263
41710: PUSH
41711: LD_INT 2
41713: EQUAL
41714: IFFALSE 41765
// begin j := IsControledBy ( i ) ;
41716: LD_ADDR_VAR 0 7
41720: PUSH
41721: LD_VAR 0 6
41725: PPUSH
41726: CALL_OW 312
41730: ST_TO_ADDR
// if j then
41731: LD_VAR 0 7
41735: IFFALSE 41765
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41737: LD_ADDR_VAR 0 10
41741: PUSH
41742: LD_VAR 0 10
41746: PUSH
41747: LD_VAR 0 7
41751: PPUSH
41752: LD_INT 3
41754: PPUSH
41755: CALL_OW 259
41759: PUSH
41760: LD_INT 3
41762: MUL
41763: MUL
41764: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41765: LD_VAR 0 6
41769: PPUSH
41770: CALL_OW 264
41774: PUSH
41775: LD_INT 5
41777: PUSH
41778: LD_INT 6
41780: PUSH
41781: LD_INT 46
41783: PUSH
41784: LD_INT 44
41786: PUSH
41787: LD_INT 47
41789: PUSH
41790: LD_INT 45
41792: PUSH
41793: LD_INT 28
41795: PUSH
41796: LD_INT 7
41798: PUSH
41799: LD_INT 27
41801: PUSH
41802: LD_INT 29
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: IN
41817: PUSH
41818: LD_VAR 0 1
41822: PPUSH
41823: LD_INT 52
41825: PPUSH
41826: CALL_OW 321
41830: PUSH
41831: LD_INT 2
41833: EQUAL
41834: AND
41835: IFFALSE 41852
// bpoints := bpoints * 1.2 ;
41837: LD_ADDR_VAR 0 10
41841: PUSH
41842: LD_VAR 0 10
41846: PUSH
41847: LD_REAL  1.20000000000000E+0000
41850: MUL
41851: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41852: LD_VAR 0 6
41856: PPUSH
41857: CALL_OW 264
41861: PUSH
41862: LD_INT 6
41864: PUSH
41865: LD_INT 46
41867: PUSH
41868: LD_INT 47
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: LIST
41875: IN
41876: IFFALSE 41893
// bpoints := bpoints * 1.2 ;
41878: LD_ADDR_VAR 0 10
41882: PUSH
41883: LD_VAR 0 10
41887: PUSH
41888: LD_REAL  1.20000000000000E+0000
41891: MUL
41892: ST_TO_ADDR
// end ; unit_building :
41893: GO 41907
41895: LD_INT 3
41897: DOUBLE
41898: EQUAL
41899: IFTRUE 41903
41901: GO 41906
41903: POP
// ; end ;
41904: GO 41907
41906: POP
// for j = 1 to 3 do
41907: LD_ADDR_VAR 0 7
41911: PUSH
41912: DOUBLE
41913: LD_INT 1
41915: DEC
41916: ST_TO_ADDR
41917: LD_INT 3
41919: PUSH
41920: FOR_TO
41921: IFFALSE 41974
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41923: LD_ADDR_VAR 0 5
41927: PUSH
41928: LD_VAR 0 5
41932: PPUSH
41933: LD_VAR 0 7
41937: PPUSH
41938: LD_VAR 0 5
41942: PUSH
41943: LD_VAR 0 7
41947: ARRAY
41948: PUSH
41949: LD_VAR 0 9
41953: PUSH
41954: LD_VAR 0 7
41958: ARRAY
41959: PUSH
41960: LD_VAR 0 10
41964: MUL
41965: PLUS
41966: PPUSH
41967: CALL_OW 1
41971: ST_TO_ADDR
41972: GO 41920
41974: POP
41975: POP
// end ;
41976: GO 40453
41978: POP
41979: POP
// result := Replace ( result , 4 , tmp ) ;
41980: LD_ADDR_VAR 0 5
41984: PUSH
41985: LD_VAR 0 5
41989: PPUSH
41990: LD_INT 4
41992: PPUSH
41993: LD_VAR 0 8
41997: PPUSH
41998: CALL_OW 1
42002: ST_TO_ADDR
// end ;
42003: LD_VAR 0 5
42007: RET
// export function DangerAtRange ( unit , range ) ; begin
42008: LD_INT 0
42010: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
42011: LD_ADDR_VAR 0 3
42015: PUSH
42016: LD_VAR 0 1
42020: PPUSH
42021: CALL_OW 255
42025: PPUSH
42026: LD_VAR 0 1
42030: PPUSH
42031: CALL_OW 250
42035: PPUSH
42036: LD_VAR 0 1
42040: PPUSH
42041: CALL_OW 251
42045: PPUSH
42046: LD_VAR 0 2
42050: PPUSH
42051: CALL 40305 0 4
42055: ST_TO_ADDR
// end ;
42056: LD_VAR 0 3
42060: RET
// export function DangerInArea ( side , area ) ; begin
42061: LD_INT 0
42063: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
42064: LD_ADDR_VAR 0 3
42068: PUSH
42069: LD_VAR 0 2
42073: PPUSH
42074: LD_INT 81
42076: PUSH
42077: LD_VAR 0 1
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PPUSH
42086: CALL_OW 70
42090: ST_TO_ADDR
// end ;
42091: LD_VAR 0 3
42095: RET
// export function IsExtension ( b ) ; begin
42096: LD_INT 0
42098: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
42099: LD_ADDR_VAR 0 2
42103: PUSH
42104: LD_VAR 0 1
42108: PUSH
42109: LD_INT 23
42111: PUSH
42112: LD_INT 20
42114: PUSH
42115: LD_INT 22
42117: PUSH
42118: LD_INT 17
42120: PUSH
42121: LD_INT 24
42123: PUSH
42124: LD_INT 21
42126: PUSH
42127: LD_INT 19
42129: PUSH
42130: LD_INT 16
42132: PUSH
42133: LD_INT 25
42135: PUSH
42136: LD_INT 18
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: IN
42151: ST_TO_ADDR
// end ;
42152: LD_VAR 0 2
42156: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
42157: LD_INT 0
42159: PPUSH
42160: PPUSH
42161: PPUSH
// result := [ ] ;
42162: LD_ADDR_VAR 0 4
42166: PUSH
42167: EMPTY
42168: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
42169: LD_ADDR_VAR 0 5
42173: PUSH
42174: LD_VAR 0 2
42178: PPUSH
42179: LD_INT 21
42181: PUSH
42182: LD_INT 3
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PPUSH
42189: CALL_OW 70
42193: ST_TO_ADDR
// if not tmp then
42194: LD_VAR 0 5
42198: NOT
42199: IFFALSE 42203
// exit ;
42201: GO 42267
// if checkLink then
42203: LD_VAR 0 3
42207: IFFALSE 42257
// begin for i in tmp do
42209: LD_ADDR_VAR 0 6
42213: PUSH
42214: LD_VAR 0 5
42218: PUSH
42219: FOR_IN
42220: IFFALSE 42255
// if GetBase ( i ) <> base then
42222: LD_VAR 0 6
42226: PPUSH
42227: CALL_OW 274
42231: PUSH
42232: LD_VAR 0 1
42236: NONEQUAL
42237: IFFALSE 42253
// ComLinkToBase ( base , i ) ;
42239: LD_VAR 0 1
42243: PPUSH
42244: LD_VAR 0 6
42248: PPUSH
42249: CALL_OW 169
42253: GO 42219
42255: POP
42256: POP
// end ; result := tmp ;
42257: LD_ADDR_VAR 0 4
42261: PUSH
42262: LD_VAR 0 5
42266: ST_TO_ADDR
// end ;
42267: LD_VAR 0 4
42271: RET
// export function ComComplete ( units , b ) ; var i ; begin
42272: LD_INT 0
42274: PPUSH
42275: PPUSH
// if not units then
42276: LD_VAR 0 1
42280: NOT
42281: IFFALSE 42285
// exit ;
42283: GO 42375
// for i in units do
42285: LD_ADDR_VAR 0 4
42289: PUSH
42290: LD_VAR 0 1
42294: PUSH
42295: FOR_IN
42296: IFFALSE 42373
// if BuildingStatus ( b ) = bs_build then
42298: LD_VAR 0 2
42302: PPUSH
42303: CALL_OW 461
42307: PUSH
42308: LD_INT 1
42310: EQUAL
42311: IFFALSE 42371
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
42313: LD_VAR 0 4
42317: PPUSH
42318: LD_STRING h
42320: PUSH
42321: LD_VAR 0 2
42325: PPUSH
42326: CALL_OW 250
42330: PUSH
42331: LD_VAR 0 2
42335: PPUSH
42336: CALL_OW 251
42340: PUSH
42341: LD_VAR 0 2
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: LD_INT 0
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: PUSH
42364: EMPTY
42365: LIST
42366: PPUSH
42367: CALL_OW 446
42371: GO 42295
42373: POP
42374: POP
// end ;
42375: LD_VAR 0 3
42379: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42380: LD_INT 0
42382: PPUSH
42383: PPUSH
42384: PPUSH
42385: PPUSH
42386: PPUSH
42387: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
42388: LD_VAR 0 1
42392: NOT
42393: PUSH
42394: LD_VAR 0 1
42398: PPUSH
42399: CALL_OW 263
42403: PUSH
42404: LD_INT 2
42406: EQUAL
42407: NOT
42408: OR
42409: IFFALSE 42413
// exit ;
42411: GO 42729
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42413: LD_ADDR_VAR 0 6
42417: PUSH
42418: LD_INT 22
42420: PUSH
42421: LD_VAR 0 1
42425: PPUSH
42426: CALL_OW 255
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 2
42437: PUSH
42438: LD_INT 30
42440: PUSH
42441: LD_INT 36
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 34
42450: PUSH
42451: LD_INT 31
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: LIST
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PPUSH
42467: CALL_OW 69
42471: ST_TO_ADDR
// if not tmp then
42472: LD_VAR 0 6
42476: NOT
42477: IFFALSE 42481
// exit ;
42479: GO 42729
// result := [ ] ;
42481: LD_ADDR_VAR 0 2
42485: PUSH
42486: EMPTY
42487: ST_TO_ADDR
// for i in tmp do
42488: LD_ADDR_VAR 0 3
42492: PUSH
42493: LD_VAR 0 6
42497: PUSH
42498: FOR_IN
42499: IFFALSE 42570
// begin t := UnitsInside ( i ) ;
42501: LD_ADDR_VAR 0 4
42505: PUSH
42506: LD_VAR 0 3
42510: PPUSH
42511: CALL_OW 313
42515: ST_TO_ADDR
// if t then
42516: LD_VAR 0 4
42520: IFFALSE 42568
// for j in t do
42522: LD_ADDR_VAR 0 7
42526: PUSH
42527: LD_VAR 0 4
42531: PUSH
42532: FOR_IN
42533: IFFALSE 42566
// result := Insert ( result , result + 1 , j ) ;
42535: LD_ADDR_VAR 0 2
42539: PUSH
42540: LD_VAR 0 2
42544: PPUSH
42545: LD_VAR 0 2
42549: PUSH
42550: LD_INT 1
42552: PLUS
42553: PPUSH
42554: LD_VAR 0 7
42558: PPUSH
42559: CALL_OW 2
42563: ST_TO_ADDR
42564: GO 42532
42566: POP
42567: POP
// end ;
42568: GO 42498
42570: POP
42571: POP
// if not result then
42572: LD_VAR 0 2
42576: NOT
42577: IFFALSE 42581
// exit ;
42579: GO 42729
// mech := result [ 1 ] ;
42581: LD_ADDR_VAR 0 5
42585: PUSH
42586: LD_VAR 0 2
42590: PUSH
42591: LD_INT 1
42593: ARRAY
42594: ST_TO_ADDR
// if result > 1 then
42595: LD_VAR 0 2
42599: PUSH
42600: LD_INT 1
42602: GREATER
42603: IFFALSE 42715
// for i = 2 to result do
42605: LD_ADDR_VAR 0 3
42609: PUSH
42610: DOUBLE
42611: LD_INT 2
42613: DEC
42614: ST_TO_ADDR
42615: LD_VAR 0 2
42619: PUSH
42620: FOR_TO
42621: IFFALSE 42713
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42623: LD_ADDR_VAR 0 4
42627: PUSH
42628: LD_VAR 0 2
42632: PUSH
42633: LD_VAR 0 3
42637: ARRAY
42638: PPUSH
42639: LD_INT 3
42641: PPUSH
42642: CALL_OW 259
42646: PUSH
42647: LD_VAR 0 2
42651: PUSH
42652: LD_VAR 0 3
42656: ARRAY
42657: PPUSH
42658: CALL_OW 432
42662: MINUS
42663: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42664: LD_VAR 0 4
42668: PUSH
42669: LD_VAR 0 5
42673: PPUSH
42674: LD_INT 3
42676: PPUSH
42677: CALL_OW 259
42681: PUSH
42682: LD_VAR 0 5
42686: PPUSH
42687: CALL_OW 432
42691: MINUS
42692: GREATEREQUAL
42693: IFFALSE 42711
// mech := result [ i ] ;
42695: LD_ADDR_VAR 0 5
42699: PUSH
42700: LD_VAR 0 2
42704: PUSH
42705: LD_VAR 0 3
42709: ARRAY
42710: ST_TO_ADDR
// end ;
42711: GO 42620
42713: POP
42714: POP
// ComLinkTo ( vehicle , mech ) ;
42715: LD_VAR 0 1
42719: PPUSH
42720: LD_VAR 0 5
42724: PPUSH
42725: CALL_OW 135
// end ;
42729: LD_VAR 0 2
42733: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42734: LD_INT 0
42736: PPUSH
42737: PPUSH
42738: PPUSH
42739: PPUSH
42740: PPUSH
42741: PPUSH
42742: PPUSH
42743: PPUSH
42744: PPUSH
42745: PPUSH
42746: PPUSH
42747: PPUSH
42748: PPUSH
// result := [ ] ;
42749: LD_ADDR_VAR 0 7
42753: PUSH
42754: EMPTY
42755: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42756: LD_VAR 0 1
42760: PPUSH
42761: CALL_OW 266
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: LD_INT 1
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: IN
42776: NOT
42777: IFFALSE 42781
// exit ;
42779: GO 44415
// if name then
42781: LD_VAR 0 3
42785: IFFALSE 42801
// SetBName ( base_dep , name ) ;
42787: LD_VAR 0 1
42791: PPUSH
42792: LD_VAR 0 3
42796: PPUSH
42797: CALL_OW 500
// base := GetBase ( base_dep ) ;
42801: LD_ADDR_VAR 0 15
42805: PUSH
42806: LD_VAR 0 1
42810: PPUSH
42811: CALL_OW 274
42815: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42816: LD_ADDR_VAR 0 16
42820: PUSH
42821: LD_VAR 0 1
42825: PPUSH
42826: CALL_OW 255
42830: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42831: LD_ADDR_VAR 0 17
42835: PUSH
42836: LD_VAR 0 1
42840: PPUSH
42841: CALL_OW 248
42845: ST_TO_ADDR
// if sources then
42846: LD_VAR 0 5
42850: IFFALSE 42897
// for i = 1 to 3 do
42852: LD_ADDR_VAR 0 8
42856: PUSH
42857: DOUBLE
42858: LD_INT 1
42860: DEC
42861: ST_TO_ADDR
42862: LD_INT 3
42864: PUSH
42865: FOR_TO
42866: IFFALSE 42895
// AddResourceType ( base , i , sources [ i ] ) ;
42868: LD_VAR 0 15
42872: PPUSH
42873: LD_VAR 0 8
42877: PPUSH
42878: LD_VAR 0 5
42882: PUSH
42883: LD_VAR 0 8
42887: ARRAY
42888: PPUSH
42889: CALL_OW 276
42893: GO 42865
42895: POP
42896: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42897: LD_ADDR_VAR 0 18
42901: PUSH
42902: LD_VAR 0 15
42906: PPUSH
42907: LD_VAR 0 2
42911: PPUSH
42912: LD_INT 1
42914: PPUSH
42915: CALL 42157 0 3
42919: ST_TO_ADDR
// InitHc ;
42920: CALL_OW 19
// InitUc ;
42924: CALL_OW 18
// uc_side := side ;
42928: LD_ADDR_OWVAR 20
42932: PUSH
42933: LD_VAR 0 16
42937: ST_TO_ADDR
// uc_nation := nation ;
42938: LD_ADDR_OWVAR 21
42942: PUSH
42943: LD_VAR 0 17
42947: ST_TO_ADDR
// if buildings then
42948: LD_VAR 0 18
42952: IFFALSE 44274
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42954: LD_ADDR_VAR 0 19
42958: PUSH
42959: LD_VAR 0 18
42963: PPUSH
42964: LD_INT 2
42966: PUSH
42967: LD_INT 30
42969: PUSH
42970: LD_INT 29
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 30
42979: PUSH
42980: LD_INT 30
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: LIST
42991: PPUSH
42992: CALL_OW 72
42996: ST_TO_ADDR
// if tmp then
42997: LD_VAR 0 19
43001: IFFALSE 43049
// for i in tmp do
43003: LD_ADDR_VAR 0 8
43007: PUSH
43008: LD_VAR 0 19
43012: PUSH
43013: FOR_IN
43014: IFFALSE 43047
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
43016: LD_VAR 0 8
43020: PPUSH
43021: CALL_OW 250
43025: PPUSH
43026: LD_VAR 0 8
43030: PPUSH
43031: CALL_OW 251
43035: PPUSH
43036: LD_VAR 0 16
43040: PPUSH
43041: CALL_OW 441
43045: GO 43013
43047: POP
43048: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
43049: LD_VAR 0 18
43053: PPUSH
43054: LD_INT 2
43056: PUSH
43057: LD_INT 30
43059: PUSH
43060: LD_INT 32
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 30
43069: PUSH
43070: LD_INT 33
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: LIST
43081: PPUSH
43082: CALL_OW 72
43086: IFFALSE 43174
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
43088: LD_ADDR_VAR 0 8
43092: PUSH
43093: LD_VAR 0 18
43097: PPUSH
43098: LD_INT 2
43100: PUSH
43101: LD_INT 30
43103: PUSH
43104: LD_INT 32
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 30
43113: PUSH
43114: LD_INT 33
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: LIST
43125: PPUSH
43126: CALL_OW 72
43130: PUSH
43131: FOR_IN
43132: IFFALSE 43172
// begin if not GetBWeapon ( i ) then
43134: LD_VAR 0 8
43138: PPUSH
43139: CALL_OW 269
43143: NOT
43144: IFFALSE 43170
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
43146: LD_VAR 0 8
43150: PPUSH
43151: LD_VAR 0 8
43155: PPUSH
43156: LD_VAR 0 2
43160: PPUSH
43161: CALL 44420 0 2
43165: PPUSH
43166: CALL_OW 431
// end ;
43170: GO 43131
43172: POP
43173: POP
// end ; for i = 1 to personel do
43174: LD_ADDR_VAR 0 8
43178: PUSH
43179: DOUBLE
43180: LD_INT 1
43182: DEC
43183: ST_TO_ADDR
43184: LD_VAR 0 6
43188: PUSH
43189: FOR_TO
43190: IFFALSE 44254
// begin if i > 4 then
43192: LD_VAR 0 8
43196: PUSH
43197: LD_INT 4
43199: GREATER
43200: IFFALSE 43204
// break ;
43202: GO 44254
// case i of 1 :
43204: LD_VAR 0 8
43208: PUSH
43209: LD_INT 1
43211: DOUBLE
43212: EQUAL
43213: IFTRUE 43217
43215: GO 43297
43217: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
43218: LD_ADDR_VAR 0 12
43222: PUSH
43223: LD_VAR 0 18
43227: PPUSH
43228: LD_INT 22
43230: PUSH
43231: LD_VAR 0 16
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 58
43242: PUSH
43243: EMPTY
43244: LIST
43245: PUSH
43246: LD_INT 2
43248: PUSH
43249: LD_INT 30
43251: PUSH
43252: LD_INT 32
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 30
43261: PUSH
43262: LD_INT 4
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 30
43271: PUSH
43272: LD_INT 5
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: LIST
43289: PPUSH
43290: CALL_OW 72
43294: ST_TO_ADDR
43295: GO 43519
43297: LD_INT 2
43299: DOUBLE
43300: EQUAL
43301: IFTRUE 43305
43303: GO 43367
43305: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
43306: LD_ADDR_VAR 0 12
43310: PUSH
43311: LD_VAR 0 18
43315: PPUSH
43316: LD_INT 22
43318: PUSH
43319: LD_VAR 0 16
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 2
43330: PUSH
43331: LD_INT 30
43333: PUSH
43334: LD_INT 0
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 30
43343: PUSH
43344: LD_INT 1
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: LIST
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PPUSH
43360: CALL_OW 72
43364: ST_TO_ADDR
43365: GO 43519
43367: LD_INT 3
43369: DOUBLE
43370: EQUAL
43371: IFTRUE 43375
43373: GO 43437
43375: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
43376: LD_ADDR_VAR 0 12
43380: PUSH
43381: LD_VAR 0 18
43385: PPUSH
43386: LD_INT 22
43388: PUSH
43389: LD_VAR 0 16
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 2
43400: PUSH
43401: LD_INT 30
43403: PUSH
43404: LD_INT 2
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 30
43413: PUSH
43414: LD_INT 3
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: LIST
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PPUSH
43430: CALL_OW 72
43434: ST_TO_ADDR
43435: GO 43519
43437: LD_INT 4
43439: DOUBLE
43440: EQUAL
43441: IFTRUE 43445
43443: GO 43518
43445: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43446: LD_ADDR_VAR 0 12
43450: PUSH
43451: LD_VAR 0 18
43455: PPUSH
43456: LD_INT 22
43458: PUSH
43459: LD_VAR 0 16
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 2
43470: PUSH
43471: LD_INT 30
43473: PUSH
43474: LD_INT 6
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 30
43483: PUSH
43484: LD_INT 7
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 30
43493: PUSH
43494: LD_INT 8
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PPUSH
43511: CALL_OW 72
43515: ST_TO_ADDR
43516: GO 43519
43518: POP
// if i = 1 then
43519: LD_VAR 0 8
43523: PUSH
43524: LD_INT 1
43526: EQUAL
43527: IFFALSE 43638
// begin tmp := [ ] ;
43529: LD_ADDR_VAR 0 19
43533: PUSH
43534: EMPTY
43535: ST_TO_ADDR
// for j in f do
43536: LD_ADDR_VAR 0 9
43540: PUSH
43541: LD_VAR 0 12
43545: PUSH
43546: FOR_IN
43547: IFFALSE 43620
// if GetBType ( j ) = b_bunker then
43549: LD_VAR 0 9
43553: PPUSH
43554: CALL_OW 266
43558: PUSH
43559: LD_INT 32
43561: EQUAL
43562: IFFALSE 43589
// tmp := Insert ( tmp , 1 , j ) else
43564: LD_ADDR_VAR 0 19
43568: PUSH
43569: LD_VAR 0 19
43573: PPUSH
43574: LD_INT 1
43576: PPUSH
43577: LD_VAR 0 9
43581: PPUSH
43582: CALL_OW 2
43586: ST_TO_ADDR
43587: GO 43618
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43589: LD_ADDR_VAR 0 19
43593: PUSH
43594: LD_VAR 0 19
43598: PPUSH
43599: LD_VAR 0 19
43603: PUSH
43604: LD_INT 1
43606: PLUS
43607: PPUSH
43608: LD_VAR 0 9
43612: PPUSH
43613: CALL_OW 2
43617: ST_TO_ADDR
43618: GO 43546
43620: POP
43621: POP
// if tmp then
43622: LD_VAR 0 19
43626: IFFALSE 43638
// f := tmp ;
43628: LD_ADDR_VAR 0 12
43632: PUSH
43633: LD_VAR 0 19
43637: ST_TO_ADDR
// end ; x := personel [ i ] ;
43638: LD_ADDR_VAR 0 13
43642: PUSH
43643: LD_VAR 0 6
43647: PUSH
43648: LD_VAR 0 8
43652: ARRAY
43653: ST_TO_ADDR
// if x = - 1 then
43654: LD_VAR 0 13
43658: PUSH
43659: LD_INT 1
43661: NEG
43662: EQUAL
43663: IFFALSE 43872
// begin for j in f do
43665: LD_ADDR_VAR 0 9
43669: PUSH
43670: LD_VAR 0 12
43674: PUSH
43675: FOR_IN
43676: IFFALSE 43868
// repeat InitHc ;
43678: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43682: LD_VAR 0 9
43686: PPUSH
43687: CALL_OW 266
43691: PUSH
43692: LD_INT 5
43694: EQUAL
43695: IFFALSE 43765
// begin if UnitsInside ( j ) < 3 then
43697: LD_VAR 0 9
43701: PPUSH
43702: CALL_OW 313
43706: PUSH
43707: LD_INT 3
43709: LESS
43710: IFFALSE 43746
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43712: LD_INT 0
43714: PPUSH
43715: LD_INT 5
43717: PUSH
43718: LD_INT 8
43720: PUSH
43721: LD_INT 9
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: LIST
43728: PUSH
43729: LD_VAR 0 17
43733: ARRAY
43734: PPUSH
43735: LD_VAR 0 4
43739: PPUSH
43740: CALL_OW 380
43744: GO 43763
// PrepareHuman ( false , i , skill ) ;
43746: LD_INT 0
43748: PPUSH
43749: LD_VAR 0 8
43753: PPUSH
43754: LD_VAR 0 4
43758: PPUSH
43759: CALL_OW 380
// end else
43763: GO 43782
// PrepareHuman ( false , i , skill ) ;
43765: LD_INT 0
43767: PPUSH
43768: LD_VAR 0 8
43772: PPUSH
43773: LD_VAR 0 4
43777: PPUSH
43778: CALL_OW 380
// un := CreateHuman ;
43782: LD_ADDR_VAR 0 14
43786: PUSH
43787: CALL_OW 44
43791: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43792: LD_ADDR_VAR 0 7
43796: PUSH
43797: LD_VAR 0 7
43801: PPUSH
43802: LD_INT 1
43804: PPUSH
43805: LD_VAR 0 14
43809: PPUSH
43810: CALL_OW 2
43814: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43815: LD_VAR 0 14
43819: PPUSH
43820: LD_VAR 0 9
43824: PPUSH
43825: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43829: LD_VAR 0 9
43833: PPUSH
43834: CALL_OW 313
43838: PUSH
43839: LD_INT 6
43841: EQUAL
43842: PUSH
43843: LD_VAR 0 9
43847: PPUSH
43848: CALL_OW 266
43852: PUSH
43853: LD_INT 32
43855: PUSH
43856: LD_INT 31
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: IN
43863: OR
43864: IFFALSE 43678
43866: GO 43675
43868: POP
43869: POP
// end else
43870: GO 44252
// for j = 1 to x do
43872: LD_ADDR_VAR 0 9
43876: PUSH
43877: DOUBLE
43878: LD_INT 1
43880: DEC
43881: ST_TO_ADDR
43882: LD_VAR 0 13
43886: PUSH
43887: FOR_TO
43888: IFFALSE 44250
// begin InitHc ;
43890: CALL_OW 19
// if not f then
43894: LD_VAR 0 12
43898: NOT
43899: IFFALSE 43988
// begin PrepareHuman ( false , i , skill ) ;
43901: LD_INT 0
43903: PPUSH
43904: LD_VAR 0 8
43908: PPUSH
43909: LD_VAR 0 4
43913: PPUSH
43914: CALL_OW 380
// un := CreateHuman ;
43918: LD_ADDR_VAR 0 14
43922: PUSH
43923: CALL_OW 44
43927: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43928: LD_ADDR_VAR 0 7
43932: PUSH
43933: LD_VAR 0 7
43937: PPUSH
43938: LD_INT 1
43940: PPUSH
43941: LD_VAR 0 14
43945: PPUSH
43946: CALL_OW 2
43950: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43951: LD_VAR 0 14
43955: PPUSH
43956: LD_VAR 0 1
43960: PPUSH
43961: CALL_OW 250
43965: PPUSH
43966: LD_VAR 0 1
43970: PPUSH
43971: CALL_OW 251
43975: PPUSH
43976: LD_INT 10
43978: PPUSH
43979: LD_INT 0
43981: PPUSH
43982: CALL_OW 50
// continue ;
43986: GO 43887
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43988: LD_VAR 0 12
43992: PUSH
43993: LD_INT 1
43995: ARRAY
43996: PPUSH
43997: CALL_OW 313
44001: PUSH
44002: LD_VAR 0 12
44006: PUSH
44007: LD_INT 1
44009: ARRAY
44010: PPUSH
44011: CALL_OW 266
44015: PUSH
44016: LD_INT 32
44018: PUSH
44019: LD_INT 31
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: IN
44026: AND
44027: PUSH
44028: LD_VAR 0 12
44032: PUSH
44033: LD_INT 1
44035: ARRAY
44036: PPUSH
44037: CALL_OW 313
44041: PUSH
44042: LD_INT 6
44044: EQUAL
44045: OR
44046: IFFALSE 44066
// f := Delete ( f , 1 ) ;
44048: LD_ADDR_VAR 0 12
44052: PUSH
44053: LD_VAR 0 12
44057: PPUSH
44058: LD_INT 1
44060: PPUSH
44061: CALL_OW 3
44065: ST_TO_ADDR
// if not f then
44066: LD_VAR 0 12
44070: NOT
44071: IFFALSE 44089
// begin x := x + 2 ;
44073: LD_ADDR_VAR 0 13
44077: PUSH
44078: LD_VAR 0 13
44082: PUSH
44083: LD_INT 2
44085: PLUS
44086: ST_TO_ADDR
// continue ;
44087: GO 43887
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
44089: LD_VAR 0 12
44093: PUSH
44094: LD_INT 1
44096: ARRAY
44097: PPUSH
44098: CALL_OW 266
44102: PUSH
44103: LD_INT 5
44105: EQUAL
44106: IFFALSE 44180
// begin if UnitsInside ( f [ 1 ] ) < 3 then
44108: LD_VAR 0 12
44112: PUSH
44113: LD_INT 1
44115: ARRAY
44116: PPUSH
44117: CALL_OW 313
44121: PUSH
44122: LD_INT 3
44124: LESS
44125: IFFALSE 44161
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44127: LD_INT 0
44129: PPUSH
44130: LD_INT 5
44132: PUSH
44133: LD_INT 8
44135: PUSH
44136: LD_INT 9
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: LIST
44143: PUSH
44144: LD_VAR 0 17
44148: ARRAY
44149: PPUSH
44150: LD_VAR 0 4
44154: PPUSH
44155: CALL_OW 380
44159: GO 44178
// PrepareHuman ( false , i , skill ) ;
44161: LD_INT 0
44163: PPUSH
44164: LD_VAR 0 8
44168: PPUSH
44169: LD_VAR 0 4
44173: PPUSH
44174: CALL_OW 380
// end else
44178: GO 44197
// PrepareHuman ( false , i , skill ) ;
44180: LD_INT 0
44182: PPUSH
44183: LD_VAR 0 8
44187: PPUSH
44188: LD_VAR 0 4
44192: PPUSH
44193: CALL_OW 380
// un := CreateHuman ;
44197: LD_ADDR_VAR 0 14
44201: PUSH
44202: CALL_OW 44
44206: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44207: LD_ADDR_VAR 0 7
44211: PUSH
44212: LD_VAR 0 7
44216: PPUSH
44217: LD_INT 1
44219: PPUSH
44220: LD_VAR 0 14
44224: PPUSH
44225: CALL_OW 2
44229: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
44230: LD_VAR 0 14
44234: PPUSH
44235: LD_VAR 0 12
44239: PUSH
44240: LD_INT 1
44242: ARRAY
44243: PPUSH
44244: CALL_OW 52
// end ;
44248: GO 43887
44250: POP
44251: POP
// end ;
44252: GO 43189
44254: POP
44255: POP
// result := result ^ buildings ;
44256: LD_ADDR_VAR 0 7
44260: PUSH
44261: LD_VAR 0 7
44265: PUSH
44266: LD_VAR 0 18
44270: ADD
44271: ST_TO_ADDR
// end else
44272: GO 44415
// begin for i = 1 to personel do
44274: LD_ADDR_VAR 0 8
44278: PUSH
44279: DOUBLE
44280: LD_INT 1
44282: DEC
44283: ST_TO_ADDR
44284: LD_VAR 0 6
44288: PUSH
44289: FOR_TO
44290: IFFALSE 44413
// begin if i > 4 then
44292: LD_VAR 0 8
44296: PUSH
44297: LD_INT 4
44299: GREATER
44300: IFFALSE 44304
// break ;
44302: GO 44413
// x := personel [ i ] ;
44304: LD_ADDR_VAR 0 13
44308: PUSH
44309: LD_VAR 0 6
44313: PUSH
44314: LD_VAR 0 8
44318: ARRAY
44319: ST_TO_ADDR
// if x = - 1 then
44320: LD_VAR 0 13
44324: PUSH
44325: LD_INT 1
44327: NEG
44328: EQUAL
44329: IFFALSE 44333
// continue ;
44331: GO 44289
// PrepareHuman ( false , i , skill ) ;
44333: LD_INT 0
44335: PPUSH
44336: LD_VAR 0 8
44340: PPUSH
44341: LD_VAR 0 4
44345: PPUSH
44346: CALL_OW 380
// un := CreateHuman ;
44350: LD_ADDR_VAR 0 14
44354: PUSH
44355: CALL_OW 44
44359: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44360: LD_VAR 0 14
44364: PPUSH
44365: LD_VAR 0 1
44369: PPUSH
44370: CALL_OW 250
44374: PPUSH
44375: LD_VAR 0 1
44379: PPUSH
44380: CALL_OW 251
44384: PPUSH
44385: LD_INT 10
44387: PPUSH
44388: LD_INT 0
44390: PPUSH
44391: CALL_OW 50
// result := result ^ un ;
44395: LD_ADDR_VAR 0 7
44399: PUSH
44400: LD_VAR 0 7
44404: PUSH
44405: LD_VAR 0 14
44409: ADD
44410: ST_TO_ADDR
// end ;
44411: GO 44289
44413: POP
44414: POP
// end ; end ;
44415: LD_VAR 0 7
44419: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44420: LD_INT 0
44422: PPUSH
44423: PPUSH
44424: PPUSH
44425: PPUSH
44426: PPUSH
44427: PPUSH
44428: PPUSH
44429: PPUSH
44430: PPUSH
44431: PPUSH
44432: PPUSH
44433: PPUSH
44434: PPUSH
44435: PPUSH
44436: PPUSH
44437: PPUSH
// result := false ;
44438: LD_ADDR_VAR 0 3
44442: PUSH
44443: LD_INT 0
44445: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44446: LD_VAR 0 1
44450: NOT
44451: PUSH
44452: LD_VAR 0 1
44456: PPUSH
44457: CALL_OW 266
44461: PUSH
44462: LD_INT 32
44464: PUSH
44465: LD_INT 33
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: IN
44472: NOT
44473: OR
44474: IFFALSE 44478
// exit ;
44476: GO 45587
// nat := GetNation ( tower ) ;
44478: LD_ADDR_VAR 0 12
44482: PUSH
44483: LD_VAR 0 1
44487: PPUSH
44488: CALL_OW 248
44492: ST_TO_ADDR
// side := GetSide ( tower ) ;
44493: LD_ADDR_VAR 0 16
44497: PUSH
44498: LD_VAR 0 1
44502: PPUSH
44503: CALL_OW 255
44507: ST_TO_ADDR
// x := GetX ( tower ) ;
44508: LD_ADDR_VAR 0 10
44512: PUSH
44513: LD_VAR 0 1
44517: PPUSH
44518: CALL_OW 250
44522: ST_TO_ADDR
// y := GetY ( tower ) ;
44523: LD_ADDR_VAR 0 11
44527: PUSH
44528: LD_VAR 0 1
44532: PPUSH
44533: CALL_OW 251
44537: ST_TO_ADDR
// if not x or not y then
44538: LD_VAR 0 10
44542: NOT
44543: PUSH
44544: LD_VAR 0 11
44548: NOT
44549: OR
44550: IFFALSE 44554
// exit ;
44552: GO 45587
// weapon := 0 ;
44554: LD_ADDR_VAR 0 18
44558: PUSH
44559: LD_INT 0
44561: ST_TO_ADDR
// fac_list := [ ] ;
44562: LD_ADDR_VAR 0 17
44566: PUSH
44567: EMPTY
44568: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44569: LD_ADDR_VAR 0 6
44573: PUSH
44574: LD_VAR 0 1
44578: PPUSH
44579: CALL_OW 274
44583: PPUSH
44584: LD_VAR 0 2
44588: PPUSH
44589: LD_INT 0
44591: PPUSH
44592: CALL 42157 0 3
44596: PPUSH
44597: LD_INT 30
44599: PUSH
44600: LD_INT 3
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PPUSH
44607: CALL_OW 72
44611: ST_TO_ADDR
// if not factories then
44612: LD_VAR 0 6
44616: NOT
44617: IFFALSE 44621
// exit ;
44619: GO 45587
// for i in factories do
44621: LD_ADDR_VAR 0 8
44625: PUSH
44626: LD_VAR 0 6
44630: PUSH
44631: FOR_IN
44632: IFFALSE 44657
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44634: LD_ADDR_VAR 0 17
44638: PUSH
44639: LD_VAR 0 17
44643: PUSH
44644: LD_VAR 0 8
44648: PPUSH
44649: CALL_OW 478
44653: UNION
44654: ST_TO_ADDR
44655: GO 44631
44657: POP
44658: POP
// if not fac_list then
44659: LD_VAR 0 17
44663: NOT
44664: IFFALSE 44668
// exit ;
44666: GO 45587
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44668: LD_ADDR_VAR 0 5
44672: PUSH
44673: LD_INT 4
44675: PUSH
44676: LD_INT 5
44678: PUSH
44679: LD_INT 9
44681: PUSH
44682: LD_INT 10
44684: PUSH
44685: LD_INT 6
44687: PUSH
44688: LD_INT 7
44690: PUSH
44691: LD_INT 11
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 27
44705: PUSH
44706: LD_INT 28
44708: PUSH
44709: LD_INT 26
44711: PUSH
44712: LD_INT 30
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 43
44723: PUSH
44724: LD_INT 44
44726: PUSH
44727: LD_INT 46
44729: PUSH
44730: LD_INT 45
44732: PUSH
44733: LD_INT 47
44735: PUSH
44736: LD_INT 49
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: LIST
44751: PUSH
44752: LD_VAR 0 12
44756: ARRAY
44757: ST_TO_ADDR
// list := list isect fac_list ;
44758: LD_ADDR_VAR 0 5
44762: PUSH
44763: LD_VAR 0 5
44767: PUSH
44768: LD_VAR 0 17
44772: ISECT
44773: ST_TO_ADDR
// if not list then
44774: LD_VAR 0 5
44778: NOT
44779: IFFALSE 44783
// exit ;
44781: GO 45587
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44783: LD_VAR 0 12
44787: PUSH
44788: LD_INT 3
44790: EQUAL
44791: PUSH
44792: LD_INT 49
44794: PUSH
44795: LD_VAR 0 5
44799: IN
44800: AND
44801: PUSH
44802: LD_INT 31
44804: PPUSH
44805: LD_VAR 0 16
44809: PPUSH
44810: CALL_OW 321
44814: PUSH
44815: LD_INT 2
44817: EQUAL
44818: AND
44819: IFFALSE 44879
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44821: LD_INT 22
44823: PUSH
44824: LD_VAR 0 16
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 35
44835: PUSH
44836: LD_INT 49
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 91
44845: PUSH
44846: LD_VAR 0 1
44850: PUSH
44851: LD_INT 10
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: LIST
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: LIST
44863: PPUSH
44864: CALL_OW 69
44868: NOT
44869: IFFALSE 44879
// weapon := ru_time_lapser ;
44871: LD_ADDR_VAR 0 18
44875: PUSH
44876: LD_INT 49
44878: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44879: LD_VAR 0 12
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: LD_INT 2
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: IN
44894: PUSH
44895: LD_INT 11
44897: PUSH
44898: LD_VAR 0 5
44902: IN
44903: PUSH
44904: LD_INT 30
44906: PUSH
44907: LD_VAR 0 5
44911: IN
44912: OR
44913: AND
44914: PUSH
44915: LD_INT 6
44917: PPUSH
44918: LD_VAR 0 16
44922: PPUSH
44923: CALL_OW 321
44927: PUSH
44928: LD_INT 2
44930: EQUAL
44931: AND
44932: IFFALSE 45097
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44934: LD_INT 22
44936: PUSH
44937: LD_VAR 0 16
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 2
44948: PUSH
44949: LD_INT 35
44951: PUSH
44952: LD_INT 11
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 35
44961: PUSH
44962: LD_INT 30
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 91
44976: PUSH
44977: LD_VAR 0 1
44981: PUSH
44982: LD_INT 18
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: LIST
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: LIST
44994: PPUSH
44995: CALL_OW 69
44999: NOT
45000: PUSH
45001: LD_INT 22
45003: PUSH
45004: LD_VAR 0 16
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 2
45015: PUSH
45016: LD_INT 30
45018: PUSH
45019: LD_INT 32
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 30
45028: PUSH
45029: LD_INT 33
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 91
45043: PUSH
45044: LD_VAR 0 1
45048: PUSH
45049: LD_INT 12
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: LIST
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: LIST
45061: PUSH
45062: EMPTY
45063: LIST
45064: PPUSH
45065: CALL_OW 69
45069: PUSH
45070: LD_INT 2
45072: GREATER
45073: AND
45074: IFFALSE 45097
// weapon := [ us_radar , ar_radar ] [ nat ] ;
45076: LD_ADDR_VAR 0 18
45080: PUSH
45081: LD_INT 11
45083: PUSH
45084: LD_INT 30
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_VAR 0 12
45095: ARRAY
45096: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
45097: LD_VAR 0 18
45101: NOT
45102: PUSH
45103: LD_INT 40
45105: PPUSH
45106: LD_VAR 0 16
45110: PPUSH
45111: CALL_OW 321
45115: PUSH
45116: LD_INT 2
45118: EQUAL
45119: AND
45120: PUSH
45121: LD_INT 7
45123: PUSH
45124: LD_VAR 0 5
45128: IN
45129: PUSH
45130: LD_INT 28
45132: PUSH
45133: LD_VAR 0 5
45137: IN
45138: OR
45139: PUSH
45140: LD_INT 45
45142: PUSH
45143: LD_VAR 0 5
45147: IN
45148: OR
45149: AND
45150: IFFALSE 45404
// begin hex := GetHexInfo ( x , y ) ;
45152: LD_ADDR_VAR 0 4
45156: PUSH
45157: LD_VAR 0 10
45161: PPUSH
45162: LD_VAR 0 11
45166: PPUSH
45167: CALL_OW 546
45171: ST_TO_ADDR
// if hex [ 1 ] then
45172: LD_VAR 0 4
45176: PUSH
45177: LD_INT 1
45179: ARRAY
45180: IFFALSE 45184
// exit ;
45182: GO 45587
// height := hex [ 2 ] ;
45184: LD_ADDR_VAR 0 15
45188: PUSH
45189: LD_VAR 0 4
45193: PUSH
45194: LD_INT 2
45196: ARRAY
45197: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
45198: LD_ADDR_VAR 0 14
45202: PUSH
45203: LD_INT 0
45205: PUSH
45206: LD_INT 2
45208: PUSH
45209: LD_INT 3
45211: PUSH
45212: LD_INT 5
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: ST_TO_ADDR
// for i in tmp do
45221: LD_ADDR_VAR 0 8
45225: PUSH
45226: LD_VAR 0 14
45230: PUSH
45231: FOR_IN
45232: IFFALSE 45402
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
45234: LD_ADDR_VAR 0 9
45238: PUSH
45239: LD_VAR 0 10
45243: PPUSH
45244: LD_VAR 0 8
45248: PPUSH
45249: LD_INT 5
45251: PPUSH
45252: CALL_OW 272
45256: PUSH
45257: LD_VAR 0 11
45261: PPUSH
45262: LD_VAR 0 8
45266: PPUSH
45267: LD_INT 5
45269: PPUSH
45270: CALL_OW 273
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
45279: LD_VAR 0 9
45283: PUSH
45284: LD_INT 1
45286: ARRAY
45287: PPUSH
45288: LD_VAR 0 9
45292: PUSH
45293: LD_INT 2
45295: ARRAY
45296: PPUSH
45297: CALL_OW 488
45301: IFFALSE 45400
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
45303: LD_ADDR_VAR 0 4
45307: PUSH
45308: LD_VAR 0 9
45312: PUSH
45313: LD_INT 1
45315: ARRAY
45316: PPUSH
45317: LD_VAR 0 9
45321: PUSH
45322: LD_INT 2
45324: ARRAY
45325: PPUSH
45326: CALL_OW 546
45330: ST_TO_ADDR
// if hex [ 1 ] then
45331: LD_VAR 0 4
45335: PUSH
45336: LD_INT 1
45338: ARRAY
45339: IFFALSE 45343
// continue ;
45341: GO 45231
// h := hex [ 2 ] ;
45343: LD_ADDR_VAR 0 13
45347: PUSH
45348: LD_VAR 0 4
45352: PUSH
45353: LD_INT 2
45355: ARRAY
45356: ST_TO_ADDR
// if h + 7 < height then
45357: LD_VAR 0 13
45361: PUSH
45362: LD_INT 7
45364: PLUS
45365: PUSH
45366: LD_VAR 0 15
45370: LESS
45371: IFFALSE 45400
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45373: LD_ADDR_VAR 0 18
45377: PUSH
45378: LD_INT 7
45380: PUSH
45381: LD_INT 28
45383: PUSH
45384: LD_INT 45
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: LIST
45391: PUSH
45392: LD_VAR 0 12
45396: ARRAY
45397: ST_TO_ADDR
// break ;
45398: GO 45402
// end ; end ; end ;
45400: GO 45231
45402: POP
45403: POP
// end ; if not weapon then
45404: LD_VAR 0 18
45408: NOT
45409: IFFALSE 45469
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45411: LD_ADDR_VAR 0 5
45415: PUSH
45416: LD_VAR 0 5
45420: PUSH
45421: LD_INT 11
45423: PUSH
45424: LD_INT 30
45426: PUSH
45427: LD_INT 49
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: LIST
45434: DIFF
45435: ST_TO_ADDR
// if not list then
45436: LD_VAR 0 5
45440: NOT
45441: IFFALSE 45445
// exit ;
45443: GO 45587
// weapon := list [ rand ( 1 , list ) ] ;
45445: LD_ADDR_VAR 0 18
45449: PUSH
45450: LD_VAR 0 5
45454: PUSH
45455: LD_INT 1
45457: PPUSH
45458: LD_VAR 0 5
45462: PPUSH
45463: CALL_OW 12
45467: ARRAY
45468: ST_TO_ADDR
// end ; if weapon then
45469: LD_VAR 0 18
45473: IFFALSE 45587
// begin tmp := CostOfWeapon ( weapon ) ;
45475: LD_ADDR_VAR 0 14
45479: PUSH
45480: LD_VAR 0 18
45484: PPUSH
45485: CALL_OW 451
45489: ST_TO_ADDR
// j := GetBase ( tower ) ;
45490: LD_ADDR_VAR 0 9
45494: PUSH
45495: LD_VAR 0 1
45499: PPUSH
45500: CALL_OW 274
45504: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45505: LD_VAR 0 9
45509: PPUSH
45510: LD_INT 1
45512: PPUSH
45513: CALL_OW 275
45517: PUSH
45518: LD_VAR 0 14
45522: PUSH
45523: LD_INT 1
45525: ARRAY
45526: GREATEREQUAL
45527: PUSH
45528: LD_VAR 0 9
45532: PPUSH
45533: LD_INT 2
45535: PPUSH
45536: CALL_OW 275
45540: PUSH
45541: LD_VAR 0 14
45545: PUSH
45546: LD_INT 2
45548: ARRAY
45549: GREATEREQUAL
45550: AND
45551: PUSH
45552: LD_VAR 0 9
45556: PPUSH
45557: LD_INT 3
45559: PPUSH
45560: CALL_OW 275
45564: PUSH
45565: LD_VAR 0 14
45569: PUSH
45570: LD_INT 3
45572: ARRAY
45573: GREATEREQUAL
45574: AND
45575: IFFALSE 45587
// result := weapon ;
45577: LD_ADDR_VAR 0 3
45581: PUSH
45582: LD_VAR 0 18
45586: ST_TO_ADDR
// end ; end ;
45587: LD_VAR 0 3
45591: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45592: LD_INT 0
45594: PPUSH
45595: PPUSH
// result := true ;
45596: LD_ADDR_VAR 0 3
45600: PUSH
45601: LD_INT 1
45603: ST_TO_ADDR
// if array1 = array2 then
45604: LD_VAR 0 1
45608: PUSH
45609: LD_VAR 0 2
45613: EQUAL
45614: IFFALSE 45674
// begin for i = 1 to array1 do
45616: LD_ADDR_VAR 0 4
45620: PUSH
45621: DOUBLE
45622: LD_INT 1
45624: DEC
45625: ST_TO_ADDR
45626: LD_VAR 0 1
45630: PUSH
45631: FOR_TO
45632: IFFALSE 45670
// if array1 [ i ] <> array2 [ i ] then
45634: LD_VAR 0 1
45638: PUSH
45639: LD_VAR 0 4
45643: ARRAY
45644: PUSH
45645: LD_VAR 0 2
45649: PUSH
45650: LD_VAR 0 4
45654: ARRAY
45655: NONEQUAL
45656: IFFALSE 45668
// begin result := false ;
45658: LD_ADDR_VAR 0 3
45662: PUSH
45663: LD_INT 0
45665: ST_TO_ADDR
// break ;
45666: GO 45670
// end ;
45668: GO 45631
45670: POP
45671: POP
// end else
45672: GO 45682
// result := false ;
45674: LD_ADDR_VAR 0 3
45678: PUSH
45679: LD_INT 0
45681: ST_TO_ADDR
// end ;
45682: LD_VAR 0 3
45686: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45687: LD_INT 0
45689: PPUSH
45690: PPUSH
// if not array1 or not array2 then
45691: LD_VAR 0 1
45695: NOT
45696: PUSH
45697: LD_VAR 0 2
45701: NOT
45702: OR
45703: IFFALSE 45707
// exit ;
45705: GO 45771
// result := true ;
45707: LD_ADDR_VAR 0 3
45711: PUSH
45712: LD_INT 1
45714: ST_TO_ADDR
// for i = 1 to array1 do
45715: LD_ADDR_VAR 0 4
45719: PUSH
45720: DOUBLE
45721: LD_INT 1
45723: DEC
45724: ST_TO_ADDR
45725: LD_VAR 0 1
45729: PUSH
45730: FOR_TO
45731: IFFALSE 45769
// if array1 [ i ] <> array2 [ i ] then
45733: LD_VAR 0 1
45737: PUSH
45738: LD_VAR 0 4
45742: ARRAY
45743: PUSH
45744: LD_VAR 0 2
45748: PUSH
45749: LD_VAR 0 4
45753: ARRAY
45754: NONEQUAL
45755: IFFALSE 45767
// begin result := false ;
45757: LD_ADDR_VAR 0 3
45761: PUSH
45762: LD_INT 0
45764: ST_TO_ADDR
// break ;
45765: GO 45769
// end ;
45767: GO 45730
45769: POP
45770: POP
// end ;
45771: LD_VAR 0 3
45775: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45776: LD_INT 0
45778: PPUSH
45779: PPUSH
45780: PPUSH
// pom := GetBase ( fac ) ;
45781: LD_ADDR_VAR 0 5
45785: PUSH
45786: LD_VAR 0 1
45790: PPUSH
45791: CALL_OW 274
45795: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45796: LD_ADDR_VAR 0 4
45800: PUSH
45801: LD_VAR 0 2
45805: PUSH
45806: LD_INT 1
45808: ARRAY
45809: PPUSH
45810: LD_VAR 0 2
45814: PUSH
45815: LD_INT 2
45817: ARRAY
45818: PPUSH
45819: LD_VAR 0 2
45823: PUSH
45824: LD_INT 3
45826: ARRAY
45827: PPUSH
45828: LD_VAR 0 2
45832: PUSH
45833: LD_INT 4
45835: ARRAY
45836: PPUSH
45837: CALL_OW 449
45841: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45842: LD_ADDR_VAR 0 3
45846: PUSH
45847: LD_VAR 0 5
45851: PPUSH
45852: LD_INT 1
45854: PPUSH
45855: CALL_OW 275
45859: PUSH
45860: LD_VAR 0 4
45864: PUSH
45865: LD_INT 1
45867: ARRAY
45868: GREATEREQUAL
45869: PUSH
45870: LD_VAR 0 5
45874: PPUSH
45875: LD_INT 2
45877: PPUSH
45878: CALL_OW 275
45882: PUSH
45883: LD_VAR 0 4
45887: PUSH
45888: LD_INT 2
45890: ARRAY
45891: GREATEREQUAL
45892: AND
45893: PUSH
45894: LD_VAR 0 5
45898: PPUSH
45899: LD_INT 3
45901: PPUSH
45902: CALL_OW 275
45906: PUSH
45907: LD_VAR 0 4
45911: PUSH
45912: LD_INT 3
45914: ARRAY
45915: GREATEREQUAL
45916: AND
45917: ST_TO_ADDR
// end ;
45918: LD_VAR 0 3
45922: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45923: LD_INT 0
45925: PPUSH
45926: PPUSH
45927: PPUSH
45928: PPUSH
// pom := GetBase ( building ) ;
45929: LD_ADDR_VAR 0 3
45933: PUSH
45934: LD_VAR 0 1
45938: PPUSH
45939: CALL_OW 274
45943: ST_TO_ADDR
// if not pom then
45944: LD_VAR 0 3
45948: NOT
45949: IFFALSE 45953
// exit ;
45951: GO 46123
// btype := GetBType ( building ) ;
45953: LD_ADDR_VAR 0 5
45957: PUSH
45958: LD_VAR 0 1
45962: PPUSH
45963: CALL_OW 266
45967: ST_TO_ADDR
// if btype = b_armoury then
45968: LD_VAR 0 5
45972: PUSH
45973: LD_INT 4
45975: EQUAL
45976: IFFALSE 45986
// btype := b_barracks ;
45978: LD_ADDR_VAR 0 5
45982: PUSH
45983: LD_INT 5
45985: ST_TO_ADDR
// if btype = b_depot then
45986: LD_VAR 0 5
45990: PUSH
45991: LD_INT 0
45993: EQUAL
45994: IFFALSE 46004
// btype := b_warehouse ;
45996: LD_ADDR_VAR 0 5
46000: PUSH
46001: LD_INT 1
46003: ST_TO_ADDR
// if btype = b_workshop then
46004: LD_VAR 0 5
46008: PUSH
46009: LD_INT 2
46011: EQUAL
46012: IFFALSE 46022
// btype := b_factory ;
46014: LD_ADDR_VAR 0 5
46018: PUSH
46019: LD_INT 3
46021: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46022: LD_ADDR_VAR 0 4
46026: PUSH
46027: LD_VAR 0 5
46031: PPUSH
46032: LD_VAR 0 1
46036: PPUSH
46037: CALL_OW 248
46041: PPUSH
46042: CALL_OW 450
46046: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46047: LD_ADDR_VAR 0 2
46051: PUSH
46052: LD_VAR 0 3
46056: PPUSH
46057: LD_INT 1
46059: PPUSH
46060: CALL_OW 275
46064: PUSH
46065: LD_VAR 0 4
46069: PUSH
46070: LD_INT 1
46072: ARRAY
46073: GREATEREQUAL
46074: PUSH
46075: LD_VAR 0 3
46079: PPUSH
46080: LD_INT 2
46082: PPUSH
46083: CALL_OW 275
46087: PUSH
46088: LD_VAR 0 4
46092: PUSH
46093: LD_INT 2
46095: ARRAY
46096: GREATEREQUAL
46097: AND
46098: PUSH
46099: LD_VAR 0 3
46103: PPUSH
46104: LD_INT 3
46106: PPUSH
46107: CALL_OW 275
46111: PUSH
46112: LD_VAR 0 4
46116: PUSH
46117: LD_INT 3
46119: ARRAY
46120: GREATEREQUAL
46121: AND
46122: ST_TO_ADDR
// end ;
46123: LD_VAR 0 2
46127: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
46128: LD_INT 0
46130: PPUSH
46131: PPUSH
46132: PPUSH
// pom := GetBase ( building ) ;
46133: LD_ADDR_VAR 0 4
46137: PUSH
46138: LD_VAR 0 1
46142: PPUSH
46143: CALL_OW 274
46147: ST_TO_ADDR
// if not pom then
46148: LD_VAR 0 4
46152: NOT
46153: IFFALSE 46157
// exit ;
46155: GO 46258
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46157: LD_ADDR_VAR 0 5
46161: PUSH
46162: LD_VAR 0 2
46166: PPUSH
46167: LD_VAR 0 1
46171: PPUSH
46172: CALL_OW 248
46176: PPUSH
46177: CALL_OW 450
46181: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46182: LD_ADDR_VAR 0 3
46186: PUSH
46187: LD_VAR 0 4
46191: PPUSH
46192: LD_INT 1
46194: PPUSH
46195: CALL_OW 275
46199: PUSH
46200: LD_VAR 0 5
46204: PUSH
46205: LD_INT 1
46207: ARRAY
46208: GREATEREQUAL
46209: PUSH
46210: LD_VAR 0 4
46214: PPUSH
46215: LD_INT 2
46217: PPUSH
46218: CALL_OW 275
46222: PUSH
46223: LD_VAR 0 5
46227: PUSH
46228: LD_INT 2
46230: ARRAY
46231: GREATEREQUAL
46232: AND
46233: PUSH
46234: LD_VAR 0 4
46238: PPUSH
46239: LD_INT 3
46241: PPUSH
46242: CALL_OW 275
46246: PUSH
46247: LD_VAR 0 5
46251: PUSH
46252: LD_INT 3
46254: ARRAY
46255: GREATEREQUAL
46256: AND
46257: ST_TO_ADDR
// end ;
46258: LD_VAR 0 3
46262: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
46263: LD_INT 0
46265: PPUSH
46266: PPUSH
46267: PPUSH
46268: PPUSH
46269: PPUSH
46270: PPUSH
46271: PPUSH
46272: PPUSH
46273: PPUSH
46274: PPUSH
46275: PPUSH
// result := false ;
46276: LD_ADDR_VAR 0 8
46280: PUSH
46281: LD_INT 0
46283: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
46284: LD_VAR 0 5
46288: NOT
46289: PUSH
46290: LD_VAR 0 1
46294: NOT
46295: OR
46296: PUSH
46297: LD_VAR 0 2
46301: NOT
46302: OR
46303: PUSH
46304: LD_VAR 0 3
46308: NOT
46309: OR
46310: IFFALSE 46314
// exit ;
46312: GO 47128
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46314: LD_ADDR_VAR 0 14
46318: PUSH
46319: LD_VAR 0 1
46323: PPUSH
46324: LD_VAR 0 2
46328: PPUSH
46329: LD_VAR 0 3
46333: PPUSH
46334: LD_VAR 0 4
46338: PPUSH
46339: LD_VAR 0 5
46343: PUSH
46344: LD_INT 1
46346: ARRAY
46347: PPUSH
46348: CALL_OW 248
46352: PPUSH
46353: LD_INT 0
46355: PPUSH
46356: CALL 48365 0 6
46360: ST_TO_ADDR
// if not hexes then
46361: LD_VAR 0 14
46365: NOT
46366: IFFALSE 46370
// exit ;
46368: GO 47128
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46370: LD_ADDR_VAR 0 17
46374: PUSH
46375: LD_VAR 0 5
46379: PPUSH
46380: LD_INT 22
46382: PUSH
46383: LD_VAR 0 13
46387: PPUSH
46388: CALL_OW 255
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 2
46399: PUSH
46400: LD_INT 30
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 30
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: LIST
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PPUSH
46429: CALL_OW 72
46433: ST_TO_ADDR
// for i = 1 to hexes do
46434: LD_ADDR_VAR 0 9
46438: PUSH
46439: DOUBLE
46440: LD_INT 1
46442: DEC
46443: ST_TO_ADDR
46444: LD_VAR 0 14
46448: PUSH
46449: FOR_TO
46450: IFFALSE 47126
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46452: LD_ADDR_VAR 0 13
46456: PUSH
46457: LD_VAR 0 14
46461: PUSH
46462: LD_VAR 0 9
46466: ARRAY
46467: PUSH
46468: LD_INT 1
46470: ARRAY
46471: PPUSH
46472: LD_VAR 0 14
46476: PUSH
46477: LD_VAR 0 9
46481: ARRAY
46482: PUSH
46483: LD_INT 2
46485: ARRAY
46486: PPUSH
46487: CALL_OW 428
46491: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46492: LD_VAR 0 14
46496: PUSH
46497: LD_VAR 0 9
46501: ARRAY
46502: PUSH
46503: LD_INT 1
46505: ARRAY
46506: PPUSH
46507: LD_VAR 0 14
46511: PUSH
46512: LD_VAR 0 9
46516: ARRAY
46517: PUSH
46518: LD_INT 2
46520: ARRAY
46521: PPUSH
46522: CALL_OW 351
46526: PUSH
46527: LD_VAR 0 14
46531: PUSH
46532: LD_VAR 0 9
46536: ARRAY
46537: PUSH
46538: LD_INT 1
46540: ARRAY
46541: PPUSH
46542: LD_VAR 0 14
46546: PUSH
46547: LD_VAR 0 9
46551: ARRAY
46552: PUSH
46553: LD_INT 2
46555: ARRAY
46556: PPUSH
46557: CALL_OW 488
46561: NOT
46562: OR
46563: PUSH
46564: LD_VAR 0 13
46568: PPUSH
46569: CALL_OW 247
46573: PUSH
46574: LD_INT 3
46576: EQUAL
46577: OR
46578: IFFALSE 46584
// exit ;
46580: POP
46581: POP
46582: GO 47128
// if not tmp then
46584: LD_VAR 0 13
46588: NOT
46589: IFFALSE 46593
// continue ;
46591: GO 46449
// result := true ;
46593: LD_ADDR_VAR 0 8
46597: PUSH
46598: LD_INT 1
46600: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46601: LD_VAR 0 6
46605: PUSH
46606: LD_VAR 0 13
46610: PPUSH
46611: CALL_OW 247
46615: PUSH
46616: LD_INT 2
46618: EQUAL
46619: AND
46620: PUSH
46621: LD_VAR 0 13
46625: PPUSH
46626: CALL_OW 263
46630: PUSH
46631: LD_INT 1
46633: EQUAL
46634: AND
46635: IFFALSE 46799
// begin if IsDrivenBy ( tmp ) then
46637: LD_VAR 0 13
46641: PPUSH
46642: CALL_OW 311
46646: IFFALSE 46650
// continue ;
46648: GO 46449
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46650: LD_VAR 0 6
46654: PPUSH
46655: LD_INT 3
46657: PUSH
46658: LD_INT 60
46660: PUSH
46661: EMPTY
46662: LIST
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 3
46670: PUSH
46671: LD_INT 55
46673: PUSH
46674: EMPTY
46675: LIST
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PPUSH
46685: CALL_OW 72
46689: IFFALSE 46797
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46691: LD_ADDR_VAR 0 18
46695: PUSH
46696: LD_VAR 0 6
46700: PPUSH
46701: LD_INT 3
46703: PUSH
46704: LD_INT 60
46706: PUSH
46707: EMPTY
46708: LIST
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 3
46716: PUSH
46717: LD_INT 55
46719: PUSH
46720: EMPTY
46721: LIST
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PPUSH
46731: CALL_OW 72
46735: PUSH
46736: LD_INT 1
46738: ARRAY
46739: ST_TO_ADDR
// if IsInUnit ( driver ) then
46740: LD_VAR 0 18
46744: PPUSH
46745: CALL_OW 310
46749: IFFALSE 46760
// ComExit ( driver ) ;
46751: LD_VAR 0 18
46755: PPUSH
46756: CALL 71549 0 1
// AddComEnterUnit ( driver , tmp ) ;
46760: LD_VAR 0 18
46764: PPUSH
46765: LD_VAR 0 13
46769: PPUSH
46770: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46774: LD_VAR 0 18
46778: PPUSH
46779: LD_VAR 0 7
46783: PPUSH
46784: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46788: LD_VAR 0 18
46792: PPUSH
46793: CALL_OW 181
// end ; continue ;
46797: GO 46449
// end ; if not cleaners or not tmp in cleaners then
46799: LD_VAR 0 6
46803: NOT
46804: PUSH
46805: LD_VAR 0 13
46809: PUSH
46810: LD_VAR 0 6
46814: IN
46815: NOT
46816: OR
46817: IFFALSE 47124
// begin if dep then
46819: LD_VAR 0 17
46823: IFFALSE 46959
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46825: LD_ADDR_VAR 0 16
46829: PUSH
46830: LD_VAR 0 17
46834: PUSH
46835: LD_INT 1
46837: ARRAY
46838: PPUSH
46839: CALL_OW 250
46843: PPUSH
46844: LD_VAR 0 17
46848: PUSH
46849: LD_INT 1
46851: ARRAY
46852: PPUSH
46853: CALL_OW 254
46857: PPUSH
46858: LD_INT 5
46860: PPUSH
46861: CALL_OW 272
46865: PUSH
46866: LD_VAR 0 17
46870: PUSH
46871: LD_INT 1
46873: ARRAY
46874: PPUSH
46875: CALL_OW 251
46879: PPUSH
46880: LD_VAR 0 17
46884: PUSH
46885: LD_INT 1
46887: ARRAY
46888: PPUSH
46889: CALL_OW 254
46893: PPUSH
46894: LD_INT 5
46896: PPUSH
46897: CALL_OW 273
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46906: LD_VAR 0 16
46910: PUSH
46911: LD_INT 1
46913: ARRAY
46914: PPUSH
46915: LD_VAR 0 16
46919: PUSH
46920: LD_INT 2
46922: ARRAY
46923: PPUSH
46924: CALL_OW 488
46928: IFFALSE 46959
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46930: LD_VAR 0 13
46934: PPUSH
46935: LD_VAR 0 16
46939: PUSH
46940: LD_INT 1
46942: ARRAY
46943: PPUSH
46944: LD_VAR 0 16
46948: PUSH
46949: LD_INT 2
46951: ARRAY
46952: PPUSH
46953: CALL_OW 111
// continue ;
46957: GO 46449
// end ; end ; r := GetDir ( tmp ) ;
46959: LD_ADDR_VAR 0 15
46963: PUSH
46964: LD_VAR 0 13
46968: PPUSH
46969: CALL_OW 254
46973: ST_TO_ADDR
// if r = 5 then
46974: LD_VAR 0 15
46978: PUSH
46979: LD_INT 5
46981: EQUAL
46982: IFFALSE 46992
// r := 0 ;
46984: LD_ADDR_VAR 0 15
46988: PUSH
46989: LD_INT 0
46991: ST_TO_ADDR
// for j = r to 5 do
46992: LD_ADDR_VAR 0 10
46996: PUSH
46997: DOUBLE
46998: LD_VAR 0 15
47002: DEC
47003: ST_TO_ADDR
47004: LD_INT 5
47006: PUSH
47007: FOR_TO
47008: IFFALSE 47122
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
47010: LD_ADDR_VAR 0 11
47014: PUSH
47015: LD_VAR 0 13
47019: PPUSH
47020: CALL_OW 250
47024: PPUSH
47025: LD_VAR 0 10
47029: PPUSH
47030: LD_INT 2
47032: PPUSH
47033: CALL_OW 272
47037: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
47038: LD_ADDR_VAR 0 12
47042: PUSH
47043: LD_VAR 0 13
47047: PPUSH
47048: CALL_OW 251
47052: PPUSH
47053: LD_VAR 0 10
47057: PPUSH
47058: LD_INT 2
47060: PPUSH
47061: CALL_OW 273
47065: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
47066: LD_VAR 0 11
47070: PPUSH
47071: LD_VAR 0 12
47075: PPUSH
47076: CALL_OW 488
47080: PUSH
47081: LD_VAR 0 11
47085: PPUSH
47086: LD_VAR 0 12
47090: PPUSH
47091: CALL_OW 428
47095: NOT
47096: AND
47097: IFFALSE 47120
// begin ComMoveXY ( tmp , _x , _y ) ;
47099: LD_VAR 0 13
47103: PPUSH
47104: LD_VAR 0 11
47108: PPUSH
47109: LD_VAR 0 12
47113: PPUSH
47114: CALL_OW 111
// break ;
47118: GO 47122
// end ; end ;
47120: GO 47007
47122: POP
47123: POP
// end ; end ;
47124: GO 46449
47126: POP
47127: POP
// end ;
47128: LD_VAR 0 8
47132: RET
// export function BuildingTechInvented ( side , btype ) ; begin
47133: LD_INT 0
47135: PPUSH
// result := true ;
47136: LD_ADDR_VAR 0 3
47140: PUSH
47141: LD_INT 1
47143: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
47144: LD_VAR 0 2
47148: PUSH
47149: LD_INT 24
47151: DOUBLE
47152: EQUAL
47153: IFTRUE 47163
47155: LD_INT 33
47157: DOUBLE
47158: EQUAL
47159: IFTRUE 47163
47161: GO 47188
47163: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
47164: LD_ADDR_VAR 0 3
47168: PUSH
47169: LD_INT 32
47171: PPUSH
47172: LD_VAR 0 1
47176: PPUSH
47177: CALL_OW 321
47181: PUSH
47182: LD_INT 2
47184: EQUAL
47185: ST_TO_ADDR
47186: GO 47508
47188: LD_INT 20
47190: DOUBLE
47191: EQUAL
47192: IFTRUE 47196
47194: GO 47221
47196: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
47197: LD_ADDR_VAR 0 3
47201: PUSH
47202: LD_INT 6
47204: PPUSH
47205: LD_VAR 0 1
47209: PPUSH
47210: CALL_OW 321
47214: PUSH
47215: LD_INT 2
47217: EQUAL
47218: ST_TO_ADDR
47219: GO 47508
47221: LD_INT 22
47223: DOUBLE
47224: EQUAL
47225: IFTRUE 47235
47227: LD_INT 36
47229: DOUBLE
47230: EQUAL
47231: IFTRUE 47235
47233: GO 47260
47235: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
47236: LD_ADDR_VAR 0 3
47240: PUSH
47241: LD_INT 15
47243: PPUSH
47244: LD_VAR 0 1
47248: PPUSH
47249: CALL_OW 321
47253: PUSH
47254: LD_INT 2
47256: EQUAL
47257: ST_TO_ADDR
47258: GO 47508
47260: LD_INT 30
47262: DOUBLE
47263: EQUAL
47264: IFTRUE 47268
47266: GO 47293
47268: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
47269: LD_ADDR_VAR 0 3
47273: PUSH
47274: LD_INT 20
47276: PPUSH
47277: LD_VAR 0 1
47281: PPUSH
47282: CALL_OW 321
47286: PUSH
47287: LD_INT 2
47289: EQUAL
47290: ST_TO_ADDR
47291: GO 47508
47293: LD_INT 28
47295: DOUBLE
47296: EQUAL
47297: IFTRUE 47307
47299: LD_INT 21
47301: DOUBLE
47302: EQUAL
47303: IFTRUE 47307
47305: GO 47332
47307: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
47308: LD_ADDR_VAR 0 3
47312: PUSH
47313: LD_INT 21
47315: PPUSH
47316: LD_VAR 0 1
47320: PPUSH
47321: CALL_OW 321
47325: PUSH
47326: LD_INT 2
47328: EQUAL
47329: ST_TO_ADDR
47330: GO 47508
47332: LD_INT 16
47334: DOUBLE
47335: EQUAL
47336: IFTRUE 47340
47338: GO 47367
47340: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
47341: LD_ADDR_VAR 0 3
47345: PUSH
47346: LD_EXP 131
47350: PPUSH
47351: LD_VAR 0 1
47355: PPUSH
47356: CALL_OW 321
47360: PUSH
47361: LD_INT 2
47363: EQUAL
47364: ST_TO_ADDR
47365: GO 47508
47367: LD_INT 19
47369: DOUBLE
47370: EQUAL
47371: IFTRUE 47381
47373: LD_INT 23
47375: DOUBLE
47376: EQUAL
47377: IFTRUE 47381
47379: GO 47408
47381: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
47382: LD_ADDR_VAR 0 3
47386: PUSH
47387: LD_EXP 130
47391: PPUSH
47392: LD_VAR 0 1
47396: PPUSH
47397: CALL_OW 321
47401: PUSH
47402: LD_INT 2
47404: EQUAL
47405: ST_TO_ADDR
47406: GO 47508
47408: LD_INT 17
47410: DOUBLE
47411: EQUAL
47412: IFTRUE 47416
47414: GO 47441
47416: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47417: LD_ADDR_VAR 0 3
47421: PUSH
47422: LD_INT 39
47424: PPUSH
47425: LD_VAR 0 1
47429: PPUSH
47430: CALL_OW 321
47434: PUSH
47435: LD_INT 2
47437: EQUAL
47438: ST_TO_ADDR
47439: GO 47508
47441: LD_INT 18
47443: DOUBLE
47444: EQUAL
47445: IFTRUE 47449
47447: GO 47474
47449: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47450: LD_ADDR_VAR 0 3
47454: PUSH
47455: LD_INT 40
47457: PPUSH
47458: LD_VAR 0 1
47462: PPUSH
47463: CALL_OW 321
47467: PUSH
47468: LD_INT 2
47470: EQUAL
47471: ST_TO_ADDR
47472: GO 47508
47474: LD_INT 27
47476: DOUBLE
47477: EQUAL
47478: IFTRUE 47482
47480: GO 47507
47482: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47483: LD_ADDR_VAR 0 3
47487: PUSH
47488: LD_INT 35
47490: PPUSH
47491: LD_VAR 0 1
47495: PPUSH
47496: CALL_OW 321
47500: PUSH
47501: LD_INT 2
47503: EQUAL
47504: ST_TO_ADDR
47505: GO 47508
47507: POP
// end ;
47508: LD_VAR 0 3
47512: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47513: LD_INT 0
47515: PPUSH
47516: PPUSH
47517: PPUSH
47518: PPUSH
47519: PPUSH
47520: PPUSH
47521: PPUSH
47522: PPUSH
47523: PPUSH
47524: PPUSH
47525: PPUSH
// result := false ;
47526: LD_ADDR_VAR 0 6
47530: PUSH
47531: LD_INT 0
47533: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47534: LD_VAR 0 1
47538: NOT
47539: PUSH
47540: LD_VAR 0 1
47544: PPUSH
47545: CALL_OW 266
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: LD_INT 1
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: IN
47560: NOT
47561: OR
47562: PUSH
47563: LD_VAR 0 2
47567: NOT
47568: OR
47569: PUSH
47570: LD_VAR 0 5
47574: PUSH
47575: LD_INT 0
47577: PUSH
47578: LD_INT 1
47580: PUSH
47581: LD_INT 2
47583: PUSH
47584: LD_INT 3
47586: PUSH
47587: LD_INT 4
47589: PUSH
47590: LD_INT 5
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: IN
47601: NOT
47602: OR
47603: PUSH
47604: LD_VAR 0 3
47608: PPUSH
47609: LD_VAR 0 4
47613: PPUSH
47614: CALL_OW 488
47618: NOT
47619: OR
47620: IFFALSE 47624
// exit ;
47622: GO 48360
// side := GetSide ( depot ) ;
47624: LD_ADDR_VAR 0 9
47628: PUSH
47629: LD_VAR 0 1
47633: PPUSH
47634: CALL_OW 255
47638: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47639: LD_VAR 0 9
47643: PPUSH
47644: LD_VAR 0 2
47648: PPUSH
47649: CALL 47133 0 2
47653: NOT
47654: IFFALSE 47658
// exit ;
47656: GO 48360
// pom := GetBase ( depot ) ;
47658: LD_ADDR_VAR 0 10
47662: PUSH
47663: LD_VAR 0 1
47667: PPUSH
47668: CALL_OW 274
47672: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47673: LD_ADDR_VAR 0 11
47677: PUSH
47678: LD_VAR 0 2
47682: PPUSH
47683: LD_VAR 0 1
47687: PPUSH
47688: CALL_OW 248
47692: PPUSH
47693: CALL_OW 450
47697: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47698: LD_VAR 0 10
47702: PPUSH
47703: LD_INT 1
47705: PPUSH
47706: CALL_OW 275
47710: PUSH
47711: LD_VAR 0 11
47715: PUSH
47716: LD_INT 1
47718: ARRAY
47719: GREATEREQUAL
47720: PUSH
47721: LD_VAR 0 10
47725: PPUSH
47726: LD_INT 2
47728: PPUSH
47729: CALL_OW 275
47733: PUSH
47734: LD_VAR 0 11
47738: PUSH
47739: LD_INT 2
47741: ARRAY
47742: GREATEREQUAL
47743: AND
47744: PUSH
47745: LD_VAR 0 10
47749: PPUSH
47750: LD_INT 3
47752: PPUSH
47753: CALL_OW 275
47757: PUSH
47758: LD_VAR 0 11
47762: PUSH
47763: LD_INT 3
47765: ARRAY
47766: GREATEREQUAL
47767: AND
47768: NOT
47769: IFFALSE 47773
// exit ;
47771: GO 48360
// if GetBType ( depot ) = b_depot then
47773: LD_VAR 0 1
47777: PPUSH
47778: CALL_OW 266
47782: PUSH
47783: LD_INT 0
47785: EQUAL
47786: IFFALSE 47798
// dist := 28 else
47788: LD_ADDR_VAR 0 14
47792: PUSH
47793: LD_INT 28
47795: ST_TO_ADDR
47796: GO 47806
// dist := 36 ;
47798: LD_ADDR_VAR 0 14
47802: PUSH
47803: LD_INT 36
47805: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47806: LD_VAR 0 1
47810: PPUSH
47811: LD_VAR 0 3
47815: PPUSH
47816: LD_VAR 0 4
47820: PPUSH
47821: CALL_OW 297
47825: PUSH
47826: LD_VAR 0 14
47830: GREATER
47831: IFFALSE 47835
// exit ;
47833: GO 48360
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47835: LD_ADDR_VAR 0 12
47839: PUSH
47840: LD_VAR 0 2
47844: PPUSH
47845: LD_VAR 0 3
47849: PPUSH
47850: LD_VAR 0 4
47854: PPUSH
47855: LD_VAR 0 5
47859: PPUSH
47860: LD_VAR 0 1
47864: PPUSH
47865: CALL_OW 248
47869: PPUSH
47870: LD_INT 0
47872: PPUSH
47873: CALL 48365 0 6
47877: ST_TO_ADDR
// if not hexes then
47878: LD_VAR 0 12
47882: NOT
47883: IFFALSE 47887
// exit ;
47885: GO 48360
// hex := GetHexInfo ( x , y ) ;
47887: LD_ADDR_VAR 0 15
47891: PUSH
47892: LD_VAR 0 3
47896: PPUSH
47897: LD_VAR 0 4
47901: PPUSH
47902: CALL_OW 546
47906: ST_TO_ADDR
// if hex [ 1 ] then
47907: LD_VAR 0 15
47911: PUSH
47912: LD_INT 1
47914: ARRAY
47915: IFFALSE 47919
// exit ;
47917: GO 48360
// height := hex [ 2 ] ;
47919: LD_ADDR_VAR 0 13
47923: PUSH
47924: LD_VAR 0 15
47928: PUSH
47929: LD_INT 2
47931: ARRAY
47932: ST_TO_ADDR
// for i = 1 to hexes do
47933: LD_ADDR_VAR 0 7
47937: PUSH
47938: DOUBLE
47939: LD_INT 1
47941: DEC
47942: ST_TO_ADDR
47943: LD_VAR 0 12
47947: PUSH
47948: FOR_TO
47949: IFFALSE 48279
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47951: LD_VAR 0 12
47955: PUSH
47956: LD_VAR 0 7
47960: ARRAY
47961: PUSH
47962: LD_INT 1
47964: ARRAY
47965: PPUSH
47966: LD_VAR 0 12
47970: PUSH
47971: LD_VAR 0 7
47975: ARRAY
47976: PUSH
47977: LD_INT 2
47979: ARRAY
47980: PPUSH
47981: CALL_OW 488
47985: NOT
47986: PUSH
47987: LD_VAR 0 12
47991: PUSH
47992: LD_VAR 0 7
47996: ARRAY
47997: PUSH
47998: LD_INT 1
48000: ARRAY
48001: PPUSH
48002: LD_VAR 0 12
48006: PUSH
48007: LD_VAR 0 7
48011: ARRAY
48012: PUSH
48013: LD_INT 2
48015: ARRAY
48016: PPUSH
48017: CALL_OW 428
48021: PUSH
48022: LD_INT 0
48024: GREATER
48025: OR
48026: PUSH
48027: LD_VAR 0 12
48031: PUSH
48032: LD_VAR 0 7
48036: ARRAY
48037: PUSH
48038: LD_INT 1
48040: ARRAY
48041: PPUSH
48042: LD_VAR 0 12
48046: PUSH
48047: LD_VAR 0 7
48051: ARRAY
48052: PUSH
48053: LD_INT 2
48055: ARRAY
48056: PPUSH
48057: CALL_OW 351
48061: OR
48062: IFFALSE 48068
// exit ;
48064: POP
48065: POP
48066: GO 48360
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48068: LD_ADDR_VAR 0 8
48072: PUSH
48073: LD_VAR 0 12
48077: PUSH
48078: LD_VAR 0 7
48082: ARRAY
48083: PUSH
48084: LD_INT 1
48086: ARRAY
48087: PPUSH
48088: LD_VAR 0 12
48092: PUSH
48093: LD_VAR 0 7
48097: ARRAY
48098: PUSH
48099: LD_INT 2
48101: ARRAY
48102: PPUSH
48103: CALL_OW 546
48107: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48108: LD_VAR 0 8
48112: PUSH
48113: LD_INT 1
48115: ARRAY
48116: PUSH
48117: LD_VAR 0 8
48121: PUSH
48122: LD_INT 2
48124: ARRAY
48125: PUSH
48126: LD_VAR 0 13
48130: PUSH
48131: LD_INT 2
48133: PLUS
48134: GREATER
48135: OR
48136: PUSH
48137: LD_VAR 0 8
48141: PUSH
48142: LD_INT 2
48144: ARRAY
48145: PUSH
48146: LD_VAR 0 13
48150: PUSH
48151: LD_INT 2
48153: MINUS
48154: LESS
48155: OR
48156: PUSH
48157: LD_VAR 0 8
48161: PUSH
48162: LD_INT 3
48164: ARRAY
48165: PUSH
48166: LD_INT 0
48168: PUSH
48169: LD_INT 8
48171: PUSH
48172: LD_INT 9
48174: PUSH
48175: LD_INT 10
48177: PUSH
48178: LD_INT 11
48180: PUSH
48181: LD_INT 12
48183: PUSH
48184: LD_INT 13
48186: PUSH
48187: LD_INT 16
48189: PUSH
48190: LD_INT 17
48192: PUSH
48193: LD_INT 18
48195: PUSH
48196: LD_INT 19
48198: PUSH
48199: LD_INT 20
48201: PUSH
48202: LD_INT 21
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: IN
48220: NOT
48221: OR
48222: PUSH
48223: LD_VAR 0 8
48227: PUSH
48228: LD_INT 5
48230: ARRAY
48231: NOT
48232: OR
48233: PUSH
48234: LD_VAR 0 8
48238: PUSH
48239: LD_INT 6
48241: ARRAY
48242: PUSH
48243: LD_INT 1
48245: PUSH
48246: LD_INT 2
48248: PUSH
48249: LD_INT 7
48251: PUSH
48252: LD_INT 9
48254: PUSH
48255: LD_INT 10
48257: PUSH
48258: LD_INT 11
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: IN
48269: NOT
48270: OR
48271: IFFALSE 48277
// exit ;
48273: POP
48274: POP
48275: GO 48360
// end ;
48277: GO 47948
48279: POP
48280: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48281: LD_VAR 0 9
48285: PPUSH
48286: LD_VAR 0 3
48290: PPUSH
48291: LD_VAR 0 4
48295: PPUSH
48296: LD_INT 20
48298: PPUSH
48299: CALL 40305 0 4
48303: PUSH
48304: LD_INT 4
48306: ARRAY
48307: IFFALSE 48311
// exit ;
48309: GO 48360
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48311: LD_VAR 0 2
48315: PUSH
48316: LD_INT 29
48318: PUSH
48319: LD_INT 30
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: IN
48326: PUSH
48327: LD_VAR 0 3
48331: PPUSH
48332: LD_VAR 0 4
48336: PPUSH
48337: LD_VAR 0 9
48341: PPUSH
48342: CALL_OW 440
48346: NOT
48347: AND
48348: IFFALSE 48352
// exit ;
48350: GO 48360
// result := true ;
48352: LD_ADDR_VAR 0 6
48356: PUSH
48357: LD_INT 1
48359: ST_TO_ADDR
// end ;
48360: LD_VAR 0 6
48364: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48365: LD_INT 0
48367: PPUSH
48368: PPUSH
48369: PPUSH
48370: PPUSH
48371: PPUSH
48372: PPUSH
48373: PPUSH
48374: PPUSH
48375: PPUSH
48376: PPUSH
48377: PPUSH
48378: PPUSH
48379: PPUSH
48380: PPUSH
48381: PPUSH
48382: PPUSH
48383: PPUSH
48384: PPUSH
48385: PPUSH
48386: PPUSH
48387: PPUSH
48388: PPUSH
48389: PPUSH
48390: PPUSH
48391: PPUSH
48392: PPUSH
48393: PPUSH
48394: PPUSH
48395: PPUSH
48396: PPUSH
48397: PPUSH
48398: PPUSH
48399: PPUSH
48400: PPUSH
48401: PPUSH
48402: PPUSH
48403: PPUSH
48404: PPUSH
48405: PPUSH
48406: PPUSH
48407: PPUSH
48408: PPUSH
48409: PPUSH
48410: PPUSH
48411: PPUSH
48412: PPUSH
48413: PPUSH
48414: PPUSH
48415: PPUSH
48416: PPUSH
48417: PPUSH
48418: PPUSH
48419: PPUSH
48420: PPUSH
48421: PPUSH
48422: PPUSH
48423: PPUSH
48424: PPUSH
// result = [ ] ;
48425: LD_ADDR_VAR 0 7
48429: PUSH
48430: EMPTY
48431: ST_TO_ADDR
// temp_list = [ ] ;
48432: LD_ADDR_VAR 0 9
48436: PUSH
48437: EMPTY
48438: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48439: LD_VAR 0 4
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: LD_INT 1
48449: PUSH
48450: LD_INT 2
48452: PUSH
48453: LD_INT 3
48455: PUSH
48456: LD_INT 4
48458: PUSH
48459: LD_INT 5
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: IN
48470: NOT
48471: PUSH
48472: LD_VAR 0 1
48476: PUSH
48477: LD_INT 0
48479: PUSH
48480: LD_INT 1
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: IN
48487: PUSH
48488: LD_VAR 0 5
48492: PUSH
48493: LD_INT 1
48495: PUSH
48496: LD_INT 2
48498: PUSH
48499: LD_INT 3
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: LIST
48506: IN
48507: NOT
48508: AND
48509: OR
48510: IFFALSE 48514
// exit ;
48512: GO 66905
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48514: LD_VAR 0 1
48518: PUSH
48519: LD_INT 6
48521: PUSH
48522: LD_INT 7
48524: PUSH
48525: LD_INT 8
48527: PUSH
48528: LD_INT 13
48530: PUSH
48531: LD_INT 12
48533: PUSH
48534: LD_INT 15
48536: PUSH
48537: LD_INT 11
48539: PUSH
48540: LD_INT 14
48542: PUSH
48543: LD_INT 10
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: IN
48557: IFFALSE 48567
// btype = b_lab ;
48559: LD_ADDR_VAR 0 1
48563: PUSH
48564: LD_INT 6
48566: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48567: LD_VAR 0 6
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: LD_INT 1
48577: PUSH
48578: LD_INT 2
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: LIST
48585: IN
48586: NOT
48587: PUSH
48588: LD_VAR 0 1
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: LD_INT 1
48598: PUSH
48599: LD_INT 2
48601: PUSH
48602: LD_INT 3
48604: PUSH
48605: LD_INT 6
48607: PUSH
48608: LD_INT 36
48610: PUSH
48611: LD_INT 4
48613: PUSH
48614: LD_INT 5
48616: PUSH
48617: LD_INT 31
48619: PUSH
48620: LD_INT 32
48622: PUSH
48623: LD_INT 33
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: IN
48639: NOT
48640: PUSH
48641: LD_VAR 0 6
48645: PUSH
48646: LD_INT 1
48648: EQUAL
48649: AND
48650: OR
48651: PUSH
48652: LD_VAR 0 1
48656: PUSH
48657: LD_INT 2
48659: PUSH
48660: LD_INT 3
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: IN
48667: NOT
48668: PUSH
48669: LD_VAR 0 6
48673: PUSH
48674: LD_INT 2
48676: EQUAL
48677: AND
48678: OR
48679: IFFALSE 48689
// mode = 0 ;
48681: LD_ADDR_VAR 0 6
48685: PUSH
48686: LD_INT 0
48688: ST_TO_ADDR
// case mode of 0 :
48689: LD_VAR 0 6
48693: PUSH
48694: LD_INT 0
48696: DOUBLE
48697: EQUAL
48698: IFTRUE 48702
48700: GO 60155
48702: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48703: LD_ADDR_VAR 0 11
48707: PUSH
48708: LD_INT 0
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: LD_INT 1
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 1
48741: PUSH
48742: LD_INT 1
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 0
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 1
48761: NEG
48762: PUSH
48763: LD_INT 0
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 1
48772: NEG
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 1
48784: NEG
48785: PUSH
48786: LD_INT 2
48788: NEG
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 0
48796: PUSH
48797: LD_INT 2
48799: NEG
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: LD_INT 1
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 1
48818: PUSH
48819: LD_INT 2
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: LD_INT 2
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 1
48838: NEG
48839: PUSH
48840: LD_INT 1
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 1
48849: PUSH
48850: LD_INT 3
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: LD_INT 3
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 1
48869: NEG
48870: PUSH
48871: LD_INT 2
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48896: LD_ADDR_VAR 0 12
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: LD_INT 0
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: LD_INT 1
48916: NEG
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 1
48924: PUSH
48925: LD_INT 0
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: LD_INT 1
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: LD_INT 1
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 1
48954: NEG
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 1
48977: PUSH
48978: LD_INT 1
48980: NEG
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 2
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 2
48998: PUSH
48999: LD_INT 1
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 1
49008: NEG
49009: PUSH
49010: LD_INT 1
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 2
49019: NEG
49020: PUSH
49021: LD_INT 0
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 2
49030: NEG
49031: PUSH
49032: LD_INT 1
49034: NEG
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 2
49042: NEG
49043: PUSH
49044: LD_INT 1
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 3
49053: NEG
49054: PUSH
49055: LD_INT 0
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 3
49064: NEG
49065: PUSH
49066: LD_INT 1
49068: NEG
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49092: LD_ADDR_VAR 0 13
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 0
49109: PUSH
49110: LD_INT 1
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 1
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: LD_INT 1
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: LD_INT 0
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: NEG
49162: PUSH
49163: LD_INT 1
49165: NEG
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 1
49173: NEG
49174: PUSH
49175: LD_INT 2
49177: NEG
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 2
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 2
49195: PUSH
49196: LD_INT 2
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 1
49205: PUSH
49206: LD_INT 2
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 2
49215: NEG
49216: PUSH
49217: LD_INT 1
49219: NEG
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 2
49227: NEG
49228: PUSH
49229: LD_INT 2
49231: NEG
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 2
49239: NEG
49240: PUSH
49241: LD_INT 3
49243: NEG
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 3
49251: NEG
49252: PUSH
49253: LD_INT 2
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 3
49263: NEG
49264: PUSH
49265: LD_INT 3
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49291: LD_ADDR_VAR 0 14
49295: PUSH
49296: LD_INT 0
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: LD_INT 1
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 1
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 1
49329: PUSH
49330: LD_INT 1
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: NEG
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: NEG
49373: PUSH
49374: LD_INT 2
49376: NEG
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 0
49384: PUSH
49385: LD_INT 2
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 1
49406: PUSH
49407: LD_INT 2
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 0
49416: PUSH
49417: LD_INT 2
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 1
49437: NEG
49438: PUSH
49439: LD_INT 3
49441: NEG
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 0
49449: PUSH
49450: LD_INT 3
49452: NEG
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 1
49460: PUSH
49461: LD_INT 2
49463: NEG
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49487: LD_ADDR_VAR 0 15
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: LD_INT 0
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 0
49504: PUSH
49505: LD_INT 1
49507: NEG
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 1
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 1
49525: PUSH
49526: LD_INT 1
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 0
49535: PUSH
49536: LD_INT 1
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 1
49545: NEG
49546: PUSH
49547: LD_INT 0
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 1
49556: NEG
49557: PUSH
49558: LD_INT 1
49560: NEG
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: LD_INT 1
49571: NEG
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 2
49579: PUSH
49580: LD_INT 0
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 2
49589: PUSH
49590: LD_INT 1
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 1
49599: NEG
49600: PUSH
49601: LD_INT 1
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 2
49610: NEG
49611: PUSH
49612: LD_INT 0
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 2
49621: NEG
49622: PUSH
49623: LD_INT 1
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 2
49633: PUSH
49634: LD_INT 1
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 3
49644: PUSH
49645: LD_INT 0
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 3
49654: PUSH
49655: LD_INT 1
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49680: LD_ADDR_VAR 0 16
49684: PUSH
49685: LD_INT 0
49687: PUSH
49688: LD_INT 0
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 0
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 1
49708: PUSH
49709: LD_INT 0
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 1
49718: PUSH
49719: LD_INT 1
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 0
49728: PUSH
49729: LD_INT 1
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 1
49738: NEG
49739: PUSH
49740: LD_INT 0
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 1
49749: NEG
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 1
49761: NEG
49762: PUSH
49763: LD_INT 2
49765: NEG
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 2
49773: PUSH
49774: LD_INT 1
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 2
49783: PUSH
49784: LD_INT 2
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 1
49793: PUSH
49794: LD_INT 2
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 2
49803: NEG
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 2
49815: NEG
49816: PUSH
49817: LD_INT 2
49819: NEG
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 3
49827: PUSH
49828: LD_INT 2
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 3
49837: PUSH
49838: LD_INT 3
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 2
49847: PUSH
49848: LD_INT 3
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49873: LD_ADDR_VAR 0 17
49877: PUSH
49878: LD_INT 0
49880: PUSH
49881: LD_INT 0
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 0
49890: PUSH
49891: LD_INT 1
49893: NEG
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 1
49911: PUSH
49912: LD_INT 1
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 0
49921: PUSH
49922: LD_INT 1
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 1
49931: NEG
49932: PUSH
49933: LD_INT 0
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 1
49942: NEG
49943: PUSH
49944: LD_INT 1
49946: NEG
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 1
49954: NEG
49955: PUSH
49956: LD_INT 2
49958: NEG
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: LD_INT 2
49969: NEG
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: LD_INT 1
49980: NEG
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 2
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 2
49998: PUSH
49999: LD_INT 1
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 2
50008: PUSH
50009: LD_INT 2
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 1
50018: PUSH
50019: LD_INT 2
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: LD_INT 2
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 2
50049: NEG
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 2
50060: NEG
50061: PUSH
50062: LD_INT 1
50064: NEG
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 2
50072: NEG
50073: PUSH
50074: LD_INT 2
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50103: LD_ADDR_VAR 0 18
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: LD_INT 1
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 1
50141: PUSH
50142: LD_INT 1
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 0
50151: PUSH
50152: LD_INT 1
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 1
50161: NEG
50162: PUSH
50163: LD_INT 0
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 1
50172: NEG
50173: PUSH
50174: LD_INT 1
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 1
50184: NEG
50185: PUSH
50186: LD_INT 2
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 0
50196: PUSH
50197: LD_INT 2
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: LD_INT 1
50210: NEG
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 2
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 2
50228: PUSH
50229: LD_INT 1
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 2
50238: PUSH
50239: LD_INT 2
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: LD_INT 2
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: LD_INT 2
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 1
50268: NEG
50269: PUSH
50270: LD_INT 1
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 2
50279: NEG
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 2
50290: NEG
50291: PUSH
50292: LD_INT 1
50294: NEG
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 2
50302: NEG
50303: PUSH
50304: LD_INT 2
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50333: LD_ADDR_VAR 0 19
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: LD_INT 1
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: PUSH
50393: LD_INT 0
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 1
50402: NEG
50403: PUSH
50404: LD_INT 1
50406: NEG
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 1
50414: NEG
50415: PUSH
50416: LD_INT 2
50418: NEG
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: LD_INT 2
50429: NEG
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 1
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 2
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 2
50458: PUSH
50459: LD_INT 1
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 2
50468: PUSH
50469: LD_INT 2
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 1
50478: PUSH
50479: LD_INT 2
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: LD_INT 2
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 1
50498: NEG
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 2
50509: NEG
50510: PUSH
50511: LD_INT 0
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 2
50520: NEG
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 2
50532: NEG
50533: PUSH
50534: LD_INT 2
50536: NEG
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50563: LD_ADDR_VAR 0 20
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 1
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: LD_INT 1
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: LD_INT 0
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: LD_INT 2
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 0
50656: PUSH
50657: LD_INT 2
50659: NEG
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 1
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 2
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 2
50688: PUSH
50689: LD_INT 1
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 2
50698: PUSH
50699: LD_INT 2
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 1
50708: PUSH
50709: LD_INT 2
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 0
50718: PUSH
50719: LD_INT 2
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: NEG
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 2
50739: NEG
50740: PUSH
50741: LD_INT 0
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 2
50750: NEG
50751: PUSH
50752: LD_INT 1
50754: NEG
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 2
50762: NEG
50763: PUSH
50764: LD_INT 2
50766: NEG
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50793: LD_ADDR_VAR 0 21
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 1
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: LD_INT 1
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: LD_INT 0
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: NEG
50863: PUSH
50864: LD_INT 1
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: LD_INT 2
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 0
50886: PUSH
50887: LD_INT 2
50889: NEG
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 1
50897: PUSH
50898: LD_INT 1
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 2
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 2
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 2
50928: PUSH
50929: LD_INT 2
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 1
50938: PUSH
50939: LD_INT 2
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: LD_INT 2
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 1
50958: NEG
50959: PUSH
50960: LD_INT 1
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 2
50969: NEG
50970: PUSH
50971: LD_INT 0
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 2
50980: NEG
50981: PUSH
50982: LD_INT 1
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 2
50992: NEG
50993: PUSH
50994: LD_INT 2
50996: NEG
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51023: LD_ADDR_VAR 0 22
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: LD_INT 0
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: LD_INT 1
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 1
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 1
51061: PUSH
51062: LD_INT 1
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 0
51071: PUSH
51072: LD_INT 1
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 1
51081: NEG
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 1
51092: NEG
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: LD_INT 2
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 0
51116: PUSH
51117: LD_INT 2
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 1
51127: PUSH
51128: LD_INT 1
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 2
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 2
51148: PUSH
51149: LD_INT 1
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 2
51158: PUSH
51159: LD_INT 2
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: LD_INT 2
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: LD_INT 2
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 2
51199: NEG
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 2
51210: NEG
51211: PUSH
51212: LD_INT 1
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 2
51222: NEG
51223: PUSH
51224: LD_INT 2
51226: NEG
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51253: LD_ADDR_VAR 0 23
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: LD_INT 1
51273: NEG
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: PUSH
51282: LD_INT 0
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 1
51291: PUSH
51292: LD_INT 1
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 0
51301: PUSH
51302: LD_INT 1
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 1
51311: NEG
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 1
51322: NEG
51323: PUSH
51324: LD_INT 1
51326: NEG
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 1
51334: NEG
51335: PUSH
51336: LD_INT 2
51338: NEG
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 0
51346: PUSH
51347: LD_INT 2
51349: NEG
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 1
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 2
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 2
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 2
51388: PUSH
51389: LD_INT 2
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 1
51398: PUSH
51399: LD_INT 2
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: LD_INT 2
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 1
51418: NEG
51419: PUSH
51420: LD_INT 1
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 2
51429: NEG
51430: PUSH
51431: LD_INT 0
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 2
51440: NEG
51441: PUSH
51442: LD_INT 1
51444: NEG
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 2
51452: NEG
51453: PUSH
51454: LD_INT 2
51456: NEG
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 2
51464: NEG
51465: PUSH
51466: LD_INT 3
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 1
51476: NEG
51477: PUSH
51478: LD_INT 3
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: PUSH
51489: LD_INT 2
51491: NEG
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 2
51499: PUSH
51500: LD_INT 1
51502: NEG
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51533: LD_ADDR_VAR 0 24
51537: PUSH
51538: LD_INT 0
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 1
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: LD_INT 1
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: LD_INT 1
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: NEG
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: NEG
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 1
51614: NEG
51615: PUSH
51616: LD_INT 2
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: LD_INT 2
51629: NEG
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 1
51637: PUSH
51638: LD_INT 1
51640: NEG
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 2
51648: PUSH
51649: LD_INT 0
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 2
51658: PUSH
51659: LD_INT 1
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 2
51668: PUSH
51669: LD_INT 2
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 1
51678: PUSH
51679: LD_INT 2
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 0
51688: PUSH
51689: LD_INT 2
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 1
51698: NEG
51699: PUSH
51700: LD_INT 1
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 2
51709: NEG
51710: PUSH
51711: LD_INT 0
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 2
51720: NEG
51721: PUSH
51722: LD_INT 1
51724: NEG
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 2
51732: NEG
51733: PUSH
51734: LD_INT 2
51736: NEG
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 1
51744: PUSH
51745: LD_INT 2
51747: NEG
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 2
51755: PUSH
51756: LD_INT 1
51758: NEG
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 3
51766: PUSH
51767: LD_INT 1
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 3
51776: PUSH
51777: LD_INT 2
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51809: LD_ADDR_VAR 0 25
51813: PUSH
51814: LD_INT 0
51816: PUSH
51817: LD_INT 0
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 0
51826: PUSH
51827: LD_INT 1
51829: NEG
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 1
51837: PUSH
51838: LD_INT 0
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 1
51847: PUSH
51848: LD_INT 1
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: LD_INT 1
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: LD_INT 0
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 1
51878: NEG
51879: PUSH
51880: LD_INT 1
51882: NEG
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 1
51890: NEG
51891: PUSH
51892: LD_INT 2
51894: NEG
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 0
51902: PUSH
51903: LD_INT 2
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 1
51913: PUSH
51914: LD_INT 1
51916: NEG
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 2
51924: PUSH
51925: LD_INT 0
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 2
51934: PUSH
51935: LD_INT 1
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 2
51944: PUSH
51945: LD_INT 2
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 1
51954: PUSH
51955: LD_INT 2
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 0
51964: PUSH
51965: LD_INT 2
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 1
51974: NEG
51975: PUSH
51976: LD_INT 1
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 2
51985: NEG
51986: PUSH
51987: LD_INT 0
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 2
51996: NEG
51997: PUSH
51998: LD_INT 1
52000: NEG
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 2
52008: NEG
52009: PUSH
52010: LD_INT 2
52012: NEG
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 3
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 3
52030: PUSH
52031: LD_INT 2
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 2
52040: PUSH
52041: LD_INT 3
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 1
52050: PUSH
52051: LD_INT 3
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52083: LD_ADDR_VAR 0 26
52087: PUSH
52088: LD_INT 0
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 0
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 1
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 1
52121: PUSH
52122: LD_INT 1
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 0
52131: PUSH
52132: LD_INT 1
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 1
52141: NEG
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 1
52152: NEG
52153: PUSH
52154: LD_INT 1
52156: NEG
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 1
52164: NEG
52165: PUSH
52166: LD_INT 2
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 0
52176: PUSH
52177: LD_INT 2
52179: NEG
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 1
52187: PUSH
52188: LD_INT 1
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 2
52198: PUSH
52199: LD_INT 0
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 2
52208: PUSH
52209: LD_INT 1
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 2
52218: PUSH
52219: LD_INT 2
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 1
52228: PUSH
52229: LD_INT 2
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: LD_INT 2
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 1
52248: NEG
52249: PUSH
52250: LD_INT 1
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 2
52259: NEG
52260: PUSH
52261: LD_INT 0
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 2
52270: NEG
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 2
52282: NEG
52283: PUSH
52284: LD_INT 2
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 2
52294: PUSH
52295: LD_INT 3
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: LD_INT 3
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: NEG
52315: PUSH
52316: LD_INT 2
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 2
52325: NEG
52326: PUSH
52327: LD_INT 1
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52359: LD_ADDR_VAR 0 27
52363: PUSH
52364: LD_INT 0
52366: PUSH
52367: LD_INT 0
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 0
52376: PUSH
52377: LD_INT 1
52379: NEG
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 1
52387: PUSH
52388: LD_INT 0
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 1
52397: PUSH
52398: LD_INT 1
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: LD_INT 1
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 1
52417: NEG
52418: PUSH
52419: LD_INT 0
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 1
52428: NEG
52429: PUSH
52430: LD_INT 1
52432: NEG
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: LD_INT 2
52444: NEG
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: LD_INT 2
52455: NEG
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 1
52463: PUSH
52464: LD_INT 1
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 2
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 2
52484: PUSH
52485: LD_INT 1
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 2
52494: PUSH
52495: LD_INT 2
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: LD_INT 2
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 0
52514: PUSH
52515: LD_INT 2
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: LD_INT 1
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 2
52535: NEG
52536: PUSH
52537: LD_INT 0
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 2
52546: NEG
52547: PUSH
52548: LD_INT 1
52550: NEG
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 2
52558: NEG
52559: PUSH
52560: LD_INT 2
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 1
52570: NEG
52571: PUSH
52572: LD_INT 2
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 2
52581: NEG
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 3
52592: NEG
52593: PUSH
52594: LD_INT 1
52596: NEG
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 3
52604: NEG
52605: PUSH
52606: LD_INT 2
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52639: LD_ADDR_VAR 0 28
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 0
52656: PUSH
52657: LD_INT 1
52659: NEG
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 1
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 1
52677: PUSH
52678: LD_INT 1
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 0
52687: PUSH
52688: LD_INT 1
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 1
52697: NEG
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 1
52708: NEG
52709: PUSH
52710: LD_INT 1
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: LD_INT 2
52724: NEG
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 0
52732: PUSH
52733: LD_INT 2
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: LD_INT 1
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 2
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 2
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 2
52774: PUSH
52775: LD_INT 2
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: PUSH
52785: LD_INT 2
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 0
52794: PUSH
52795: LD_INT 2
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 1
52804: NEG
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 2
52815: NEG
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 2
52826: NEG
52827: PUSH
52828: LD_INT 1
52830: NEG
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 2
52838: NEG
52839: PUSH
52840: LD_INT 2
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 2
52850: NEG
52851: PUSH
52852: LD_INT 3
52854: NEG
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 1
52862: NEG
52863: PUSH
52864: LD_INT 3
52866: NEG
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 3
52874: NEG
52875: PUSH
52876: LD_INT 1
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 3
52886: NEG
52887: PUSH
52888: LD_INT 2
52890: NEG
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52921: LD_ADDR_VAR 0 29
52925: PUSH
52926: LD_INT 0
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: LD_INT 1
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 1
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 1
52959: PUSH
52960: LD_INT 1
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: LD_INT 1
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: LD_INT 0
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 1
52990: NEG
52991: PUSH
52992: LD_INT 1
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 1
53002: NEG
53003: PUSH
53004: LD_INT 2
53006: NEG
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 0
53014: PUSH
53015: LD_INT 2
53017: NEG
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 1
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 2
53036: PUSH
53037: LD_INT 0
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 2
53046: PUSH
53047: LD_INT 1
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 1
53056: PUSH
53057: LD_INT 2
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 0
53066: PUSH
53067: LD_INT 2
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: LD_INT 1
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 2
53087: NEG
53088: PUSH
53089: LD_INT 1
53091: NEG
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 2
53099: NEG
53100: PUSH
53101: LD_INT 2
53103: NEG
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 2
53111: NEG
53112: PUSH
53113: LD_INT 3
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 2
53123: PUSH
53124: LD_INT 1
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 3
53134: PUSH
53135: LD_INT 1
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: LD_INT 3
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 1
53154: NEG
53155: PUSH
53156: LD_INT 2
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 3
53165: NEG
53166: PUSH
53167: LD_INT 2
53169: NEG
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53200: LD_ADDR_VAR 0 30
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: LD_INT 1
53220: NEG
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 1
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 1
53238: PUSH
53239: LD_INT 1
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 1
53258: NEG
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 1
53269: NEG
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: LD_INT 2
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 0
53293: PUSH
53294: LD_INT 2
53296: NEG
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 1
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 2
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 2
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 2
53335: PUSH
53336: LD_INT 2
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: LD_INT 2
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: LD_INT 1
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 2
53366: NEG
53367: PUSH
53368: LD_INT 0
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 2
53377: NEG
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: LD_INT 3
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 1
53401: PUSH
53402: LD_INT 2
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 3
53412: PUSH
53413: LD_INT 2
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 2
53422: PUSH
53423: LD_INT 3
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 2
53432: NEG
53433: PUSH
53434: LD_INT 1
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 3
53443: NEG
53444: PUSH
53445: LD_INT 1
53447: NEG
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53478: LD_ADDR_VAR 0 31
53482: PUSH
53483: LD_INT 0
53485: PUSH
53486: LD_INT 0
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: LD_INT 1
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 1
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: PUSH
53517: LD_INT 1
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 0
53526: PUSH
53527: LD_INT 1
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 1
53536: NEG
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 1
53547: NEG
53548: PUSH
53549: LD_INT 1
53551: NEG
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: PUSH
53561: LD_INT 2
53563: NEG
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 1
53571: PUSH
53572: LD_INT 1
53574: NEG
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 2
53582: PUSH
53583: LD_INT 0
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 2
53592: PUSH
53593: LD_INT 1
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 2
53602: PUSH
53603: LD_INT 2
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 1
53612: PUSH
53613: LD_INT 2
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 0
53622: PUSH
53623: LD_INT 2
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 1
53632: NEG
53633: PUSH
53634: LD_INT 1
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 2
53643: NEG
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 2
53655: NEG
53656: PUSH
53657: LD_INT 2
53659: NEG
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 2
53667: NEG
53668: PUSH
53669: LD_INT 3
53671: NEG
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 2
53679: PUSH
53680: LD_INT 1
53682: NEG
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 3
53690: PUSH
53691: LD_INT 1
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: LD_INT 3
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 1
53710: NEG
53711: PUSH
53712: LD_INT 2
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 3
53721: NEG
53722: PUSH
53723: LD_INT 2
53725: NEG
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53756: LD_ADDR_VAR 0 32
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 0
53773: PUSH
53774: LD_INT 1
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 1
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 0
53804: PUSH
53805: LD_INT 1
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: LD_INT 0
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 1
53825: NEG
53826: PUSH
53827: LD_INT 1
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: LD_INT 2
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: LD_INT 2
53852: NEG
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: LD_INT 1
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 2
53871: PUSH
53872: LD_INT 1
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 2
53881: PUSH
53882: LD_INT 2
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 1
53891: PUSH
53892: LD_INT 2
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 0
53901: PUSH
53902: LD_INT 2
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 1
53911: NEG
53912: PUSH
53913: LD_INT 1
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 2
53922: NEG
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 2
53933: NEG
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: LD_INT 3
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: PUSH
53958: LD_INT 2
53960: NEG
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 3
53968: PUSH
53969: LD_INT 2
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 2
53978: PUSH
53979: LD_INT 3
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 2
53988: NEG
53989: PUSH
53990: LD_INT 1
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 3
53999: NEG
54000: PUSH
54001: LD_INT 1
54003: NEG
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54034: LD_ADDR_VAR 0 33
54038: PUSH
54039: LD_INT 0
54041: PUSH
54042: LD_INT 0
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: LD_INT 1
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 1
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 1
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: LD_INT 1
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 1
54092: NEG
54093: PUSH
54094: LD_INT 0
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 1
54103: NEG
54104: PUSH
54105: LD_INT 1
54107: NEG
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 1
54115: NEG
54116: PUSH
54117: LD_INT 2
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 1
54127: PUSH
54128: LD_INT 1
54130: NEG
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 2
54138: PUSH
54139: LD_INT 0
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 2
54148: PUSH
54149: LD_INT 1
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: LD_INT 2
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 0
54168: PUSH
54169: LD_INT 2
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 1
54178: NEG
54179: PUSH
54180: LD_INT 1
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 2
54189: NEG
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 2
54200: NEG
54201: PUSH
54202: LD_INT 1
54204: NEG
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 2
54212: NEG
54213: PUSH
54214: LD_INT 2
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 2
54224: NEG
54225: PUSH
54226: LD_INT 3
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 2
54236: PUSH
54237: LD_INT 1
54239: NEG
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 3
54247: PUSH
54248: LD_INT 1
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: PUSH
54258: LD_INT 3
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 1
54267: NEG
54268: PUSH
54269: LD_INT 2
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 3
54278: NEG
54279: PUSH
54280: LD_INT 2
54282: NEG
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54313: LD_ADDR_VAR 0 34
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: LD_INT 0
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 0
54330: PUSH
54331: LD_INT 1
54333: NEG
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 1
54341: PUSH
54342: LD_INT 0
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: LD_INT 1
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 0
54361: PUSH
54362: LD_INT 1
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 1
54371: NEG
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 1
54382: NEG
54383: PUSH
54384: LD_INT 1
54386: NEG
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 1
54394: NEG
54395: PUSH
54396: LD_INT 2
54398: NEG
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 0
54406: PUSH
54407: LD_INT 2
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 1
54417: PUSH
54418: LD_INT 1
54420: NEG
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 2
54428: PUSH
54429: LD_INT 1
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 2
54438: PUSH
54439: LD_INT 2
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: LD_INT 2
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 1
54458: NEG
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 2
54469: NEG
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 2
54480: NEG
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 2
54492: NEG
54493: PUSH
54494: LD_INT 2
54496: NEG
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 1
54504: NEG
54505: PUSH
54506: LD_INT 3
54508: NEG
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 1
54516: PUSH
54517: LD_INT 2
54519: NEG
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 3
54527: PUSH
54528: LD_INT 2
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 2
54537: PUSH
54538: LD_INT 3
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 2
54547: NEG
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 3
54558: NEG
54559: PUSH
54560: LD_INT 1
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54593: LD_ADDR_VAR 0 35
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 1
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 1
54631: PUSH
54632: LD_INT 1
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 0
54641: PUSH
54642: LD_INT 1
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 1
54651: NEG
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 1
54662: NEG
54663: PUSH
54664: LD_INT 1
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 2
54674: PUSH
54675: LD_INT 1
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 2
54684: NEG
54685: PUSH
54686: LD_INT 1
54688: NEG
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54705: LD_ADDR_VAR 0 36
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: LD_INT 1
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 1
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 0
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 1
54763: NEG
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 1
54774: NEG
54775: PUSH
54776: LD_INT 1
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 1
54786: NEG
54787: PUSH
54788: LD_INT 2
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 1
54798: PUSH
54799: LD_INT 2
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54817: LD_ADDR_VAR 0 37
54821: PUSH
54822: LD_INT 0
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 0
54834: PUSH
54835: LD_INT 1
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 1
54855: PUSH
54856: LD_INT 1
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 1
54886: NEG
54887: PUSH
54888: LD_INT 1
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 1
54898: PUSH
54899: LD_INT 1
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 1
54909: NEG
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54929: LD_ADDR_VAR 0 38
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: LD_INT 1
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: LD_INT 1
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 1
54987: NEG
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: NEG
54999: PUSH
55000: LD_INT 1
55002: NEG
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 2
55010: PUSH
55011: LD_INT 1
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 2
55020: NEG
55021: PUSH
55022: LD_INT 1
55024: NEG
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55041: LD_ADDR_VAR 0 39
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 0
55058: PUSH
55059: LD_INT 1
55061: NEG
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 1
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 1
55079: PUSH
55080: LD_INT 1
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 0
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: NEG
55100: PUSH
55101: LD_INT 0
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 1
55110: NEG
55111: PUSH
55112: LD_INT 1
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 1
55122: NEG
55123: PUSH
55124: LD_INT 2
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 1
55134: PUSH
55135: LD_INT 2
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55153: LD_ADDR_VAR 0 40
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: LD_INT 0
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: LD_INT 1
55173: NEG
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: LD_INT 0
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: LD_INT 1
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: LD_INT 1
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: LD_INT 0
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 1
55222: NEG
55223: PUSH
55224: LD_INT 1
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: LD_INT 1
55237: NEG
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 1
55245: NEG
55246: PUSH
55247: LD_INT 1
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55265: LD_ADDR_VAR 0 41
55269: PUSH
55270: LD_INT 0
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 0
55282: PUSH
55283: LD_INT 1
55285: NEG
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 1
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 1
55303: PUSH
55304: LD_INT 1
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: LD_INT 1
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 1
55323: NEG
55324: PUSH
55325: LD_INT 0
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 1
55334: NEG
55335: PUSH
55336: LD_INT 1
55338: NEG
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 1
55346: NEG
55347: PUSH
55348: LD_INT 2
55350: NEG
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 1
55358: PUSH
55359: LD_INT 1
55361: NEG
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 2
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 2
55379: PUSH
55380: LD_INT 1
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 2
55389: PUSH
55390: LD_INT 2
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 1
55399: PUSH
55400: LD_INT 2
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: NEG
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 2
55420: NEG
55421: PUSH
55422: LD_INT 0
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 2
55431: NEG
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 2
55443: NEG
55444: PUSH
55445: LD_INT 2
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 2
55455: NEG
55456: PUSH
55457: LD_INT 3
55459: NEG
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 2
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 3
55478: PUSH
55479: LD_INT 0
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 3
55488: PUSH
55489: LD_INT 1
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 3
55498: PUSH
55499: LD_INT 2
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 3
55508: PUSH
55509: LD_INT 3
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 2
55518: PUSH
55519: LD_INT 3
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 2
55528: NEG
55529: PUSH
55530: LD_INT 1
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 3
55539: NEG
55540: PUSH
55541: LD_INT 0
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 3
55550: NEG
55551: PUSH
55552: LD_INT 1
55554: NEG
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 3
55562: NEG
55563: PUSH
55564: LD_INT 2
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 3
55574: NEG
55575: PUSH
55576: LD_INT 3
55578: NEG
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55615: LD_ADDR_VAR 0 42
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: LD_INT 1
55635: NEG
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 1
55643: PUSH
55644: LD_INT 0
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: LD_INT 1
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 1
55673: NEG
55674: PUSH
55675: LD_INT 0
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 1
55684: NEG
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 1
55696: NEG
55697: PUSH
55698: LD_INT 2
55700: NEG
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: LD_INT 2
55711: NEG
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 1
55719: PUSH
55720: LD_INT 1
55722: NEG
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 2
55730: PUSH
55731: LD_INT 1
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 2
55740: PUSH
55741: LD_INT 2
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: LD_INT 2
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: LD_INT 2
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 1
55770: NEG
55771: PUSH
55772: LD_INT 1
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 2
55781: NEG
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 2
55793: NEG
55794: PUSH
55795: LD_INT 2
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 2
55805: NEG
55806: PUSH
55807: LD_INT 3
55809: NEG
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 1
55817: NEG
55818: PUSH
55819: LD_INT 3
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: LD_INT 3
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 1
55840: PUSH
55841: LD_INT 2
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 3
55851: PUSH
55852: LD_INT 2
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 3
55861: PUSH
55862: LD_INT 3
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 2
55871: PUSH
55872: LD_INT 3
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: LD_INT 3
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 0
55891: PUSH
55892: LD_INT 3
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: LD_INT 2
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 3
55912: NEG
55913: PUSH
55914: LD_INT 2
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 3
55924: NEG
55925: PUSH
55926: LD_INT 3
55928: NEG
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55965: LD_ADDR_VAR 0 43
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 0
55982: PUSH
55983: LD_INT 1
55985: NEG
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 1
55993: PUSH
55994: LD_INT 0
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 1
56003: PUSH
56004: LD_INT 1
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 0
56013: PUSH
56014: LD_INT 1
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 1
56023: NEG
56024: PUSH
56025: LD_INT 0
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 1
56034: NEG
56035: PUSH
56036: LD_INT 1
56038: NEG
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: LD_INT 2
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 0
56058: PUSH
56059: LD_INT 2
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 1
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 2
56080: PUSH
56081: LD_INT 0
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 2
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 1
56100: PUSH
56101: LD_INT 2
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: LD_INT 2
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 1
56120: NEG
56121: PUSH
56122: LD_INT 1
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 2
56131: NEG
56132: PUSH
56133: LD_INT 0
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 2
56142: NEG
56143: PUSH
56144: LD_INT 1
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 1
56154: NEG
56155: PUSH
56156: LD_INT 3
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 0
56166: PUSH
56167: LD_INT 3
56169: NEG
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 1
56177: PUSH
56178: LD_INT 2
56180: NEG
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 2
56188: PUSH
56189: LD_INT 1
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 3
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 3
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 1
56219: PUSH
56220: LD_INT 3
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: LD_INT 3
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 1
56239: NEG
56240: PUSH
56241: LD_INT 2
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 2
56250: NEG
56251: PUSH
56252: LD_INT 1
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 3
56261: NEG
56262: PUSH
56263: LD_INT 0
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 3
56272: NEG
56273: PUSH
56274: LD_INT 1
56276: NEG
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56313: LD_ADDR_VAR 0 44
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: LD_INT 0
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 0
56330: PUSH
56331: LD_INT 1
56333: NEG
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 1
56341: PUSH
56342: LD_INT 0
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 1
56351: PUSH
56352: LD_INT 1
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 0
56361: PUSH
56362: LD_INT 1
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 1
56371: NEG
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 1
56382: NEG
56383: PUSH
56384: LD_INT 1
56386: NEG
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 1
56394: NEG
56395: PUSH
56396: LD_INT 2
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 1
56406: PUSH
56407: LD_INT 1
56409: NEG
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 2
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 2
56427: PUSH
56428: LD_INT 1
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 2
56437: PUSH
56438: LD_INT 2
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 1
56447: PUSH
56448: LD_INT 2
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 1
56457: NEG
56458: PUSH
56459: LD_INT 1
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 2
56468: NEG
56469: PUSH
56470: LD_INT 0
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 2
56479: NEG
56480: PUSH
56481: LD_INT 1
56483: NEG
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 2
56491: NEG
56492: PUSH
56493: LD_INT 2
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 2
56503: NEG
56504: PUSH
56505: LD_INT 3
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 2
56515: PUSH
56516: LD_INT 1
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 3
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 3
56536: PUSH
56537: LD_INT 1
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 3
56546: PUSH
56547: LD_INT 2
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 3
56556: PUSH
56557: LD_INT 3
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 2
56566: PUSH
56567: LD_INT 3
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 2
56576: NEG
56577: PUSH
56578: LD_INT 1
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 3
56587: NEG
56588: PUSH
56589: LD_INT 0
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 3
56598: NEG
56599: PUSH
56600: LD_INT 1
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 3
56610: NEG
56611: PUSH
56612: LD_INT 2
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 3
56622: NEG
56623: PUSH
56624: LD_INT 3
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56663: LD_ADDR_VAR 0 45
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 0
56680: PUSH
56681: LD_INT 1
56683: NEG
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 1
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 1
56701: PUSH
56702: LD_INT 1
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 0
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 1
56721: NEG
56722: PUSH
56723: LD_INT 0
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 1
56732: NEG
56733: PUSH
56734: LD_INT 1
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 1
56744: NEG
56745: PUSH
56746: LD_INT 2
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 0
56756: PUSH
56757: LD_INT 2
56759: NEG
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 1
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 2
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 2
56788: PUSH
56789: LD_INT 2
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 1
56798: PUSH
56799: LD_INT 2
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 0
56808: PUSH
56809: LD_INT 2
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 1
56818: NEG
56819: PUSH
56820: LD_INT 1
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 2
56829: NEG
56830: PUSH
56831: LD_INT 1
56833: NEG
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 2
56841: NEG
56842: PUSH
56843: LD_INT 2
56845: NEG
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 2
56853: NEG
56854: PUSH
56855: LD_INT 3
56857: NEG
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 1
56865: NEG
56866: PUSH
56867: LD_INT 3
56869: NEG
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: LD_INT 3
56880: NEG
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 1
56888: PUSH
56889: LD_INT 2
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 3
56899: PUSH
56900: LD_INT 2
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 3
56909: PUSH
56910: LD_INT 3
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 2
56919: PUSH
56920: LD_INT 3
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: LD_INT 3
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 0
56939: PUSH
56940: LD_INT 3
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 1
56949: NEG
56950: PUSH
56951: LD_INT 2
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 3
56960: NEG
56961: PUSH
56962: LD_INT 2
56964: NEG
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 3
56972: NEG
56973: PUSH
56974: LD_INT 3
56976: NEG
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57013: LD_ADDR_VAR 0 46
57017: PUSH
57018: LD_INT 0
57020: PUSH
57021: LD_INT 0
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 0
57030: PUSH
57031: LD_INT 1
57033: NEG
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 1
57041: PUSH
57042: LD_INT 0
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 1
57051: PUSH
57052: LD_INT 1
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 0
57061: PUSH
57062: LD_INT 1
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 1
57071: NEG
57072: PUSH
57073: LD_INT 0
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 1
57082: NEG
57083: PUSH
57084: LD_INT 1
57086: NEG
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: LD_INT 2
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 0
57106: PUSH
57107: LD_INT 2
57109: NEG
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 1
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 2
57128: PUSH
57129: LD_INT 0
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 2
57138: PUSH
57139: LD_INT 1
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: LD_INT 2
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 0
57158: PUSH
57159: LD_INT 2
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 1
57168: NEG
57169: PUSH
57170: LD_INT 1
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 2
57179: NEG
57180: PUSH
57181: LD_INT 0
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 2
57190: NEG
57191: PUSH
57192: LD_INT 1
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 1
57202: NEG
57203: PUSH
57204: LD_INT 3
57206: NEG
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 0
57214: PUSH
57215: LD_INT 3
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 1
57225: PUSH
57226: LD_INT 2
57228: NEG
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 2
57236: PUSH
57237: LD_INT 1
57239: NEG
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 3
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 3
57257: PUSH
57258: LD_INT 1
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 1
57267: PUSH
57268: LD_INT 3
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 0
57277: PUSH
57278: LD_INT 3
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 1
57287: NEG
57288: PUSH
57289: LD_INT 2
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 2
57298: NEG
57299: PUSH
57300: LD_INT 1
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 3
57309: NEG
57310: PUSH
57311: LD_INT 0
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 3
57320: NEG
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57361: LD_ADDR_VAR 0 47
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: LD_INT 1
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 1
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 1
57399: PUSH
57400: LD_INT 1
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 0
57409: PUSH
57410: LD_INT 1
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 1
57419: NEG
57420: PUSH
57421: LD_INT 0
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 1
57430: NEG
57431: PUSH
57432: LD_INT 1
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 1
57442: NEG
57443: PUSH
57444: LD_INT 2
57446: NEG
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 0
57454: PUSH
57455: LD_INT 2
57457: NEG
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 1
57465: PUSH
57466: LD_INT 1
57468: NEG
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 2
57476: NEG
57477: PUSH
57478: LD_INT 1
57480: NEG
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 2
57488: NEG
57489: PUSH
57490: LD_INT 2
57492: NEG
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57512: LD_ADDR_VAR 0 48
57516: PUSH
57517: LD_INT 0
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 0
57529: PUSH
57530: LD_INT 1
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 1
57540: PUSH
57541: LD_INT 0
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: LD_INT 1
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 0
57560: PUSH
57561: LD_INT 1
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 1
57570: NEG
57571: PUSH
57572: LD_INT 0
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 1
57581: NEG
57582: PUSH
57583: LD_INT 1
57585: NEG
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 1
57593: NEG
57594: PUSH
57595: LD_INT 2
57597: NEG
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 0
57605: PUSH
57606: LD_INT 2
57608: NEG
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 1
57616: PUSH
57617: LD_INT 1
57619: NEG
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 2
57627: PUSH
57628: LD_INT 0
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 2
57637: PUSH
57638: LD_INT 1
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57659: LD_ADDR_VAR 0 49
57663: PUSH
57664: LD_INT 0
57666: PUSH
57667: LD_INT 0
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 0
57676: PUSH
57677: LD_INT 1
57679: NEG
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 1
57687: PUSH
57688: LD_INT 0
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 1
57697: PUSH
57698: LD_INT 1
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 0
57707: PUSH
57708: LD_INT 1
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 1
57717: NEG
57718: PUSH
57719: LD_INT 0
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 1
57728: NEG
57729: PUSH
57730: LD_INT 1
57732: NEG
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 1
57740: PUSH
57741: LD_INT 1
57743: NEG
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 2
57751: PUSH
57752: LD_INT 0
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 2
57761: PUSH
57762: LD_INT 1
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 2
57771: PUSH
57772: LD_INT 2
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 1
57781: PUSH
57782: LD_INT 2
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57803: LD_ADDR_VAR 0 50
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: LD_INT 0
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: LD_INT 1
57823: NEG
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 1
57831: PUSH
57832: LD_INT 0
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 1
57841: PUSH
57842: LD_INT 1
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 0
57851: PUSH
57852: LD_INT 1
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 1
57861: NEG
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 1
57872: NEG
57873: PUSH
57874: LD_INT 1
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 2
57884: PUSH
57885: LD_INT 1
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 2
57894: PUSH
57895: LD_INT 2
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 1
57904: PUSH
57905: LD_INT 2
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: LD_INT 2
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 1
57924: NEG
57925: PUSH
57926: LD_INT 1
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57947: LD_ADDR_VAR 0 51
57951: PUSH
57952: LD_INT 0
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 0
57964: PUSH
57965: LD_INT 1
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 1
57975: PUSH
57976: LD_INT 0
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 1
57985: PUSH
57986: LD_INT 1
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: LD_INT 1
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 1
58005: NEG
58006: PUSH
58007: LD_INT 0
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 1
58016: NEG
58017: PUSH
58018: LD_INT 1
58020: NEG
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 1
58028: PUSH
58029: LD_INT 2
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 0
58038: PUSH
58039: LD_INT 2
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 1
58048: NEG
58049: PUSH
58050: LD_INT 1
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 2
58059: NEG
58060: PUSH
58061: LD_INT 0
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 2
58070: NEG
58071: PUSH
58072: LD_INT 1
58074: NEG
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58094: LD_ADDR_VAR 0 52
58098: PUSH
58099: LD_INT 0
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 0
58111: PUSH
58112: LD_INT 1
58114: NEG
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 1
58122: PUSH
58123: LD_INT 0
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 1
58132: PUSH
58133: LD_INT 1
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 0
58142: PUSH
58143: LD_INT 1
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 1
58152: NEG
58153: PUSH
58154: LD_INT 0
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 1
58163: NEG
58164: PUSH
58165: LD_INT 1
58167: NEG
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 1
58175: NEG
58176: PUSH
58177: LD_INT 2
58179: NEG
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 1
58187: NEG
58188: PUSH
58189: LD_INT 1
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 2
58198: NEG
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 2
58209: NEG
58210: PUSH
58211: LD_INT 1
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 2
58221: NEG
58222: PUSH
58223: LD_INT 2
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58245: LD_ADDR_VAR 0 53
58249: PUSH
58250: LD_INT 0
58252: PUSH
58253: LD_INT 0
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 0
58262: PUSH
58263: LD_INT 1
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 1
58273: PUSH
58274: LD_INT 0
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 1
58283: PUSH
58284: LD_INT 1
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 0
58293: PUSH
58294: LD_INT 1
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 1
58303: NEG
58304: PUSH
58305: LD_INT 0
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: LD_INT 1
58318: NEG
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 1
58326: NEG
58327: PUSH
58328: LD_INT 2
58330: NEG
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 0
58338: PUSH
58339: LD_INT 2
58341: NEG
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 1
58349: PUSH
58350: LD_INT 1
58352: NEG
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 2
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 2
58370: PUSH
58371: LD_INT 1
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 2
58380: PUSH
58381: LD_INT 2
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 1
58390: PUSH
58391: LD_INT 2
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 0
58400: PUSH
58401: LD_INT 2
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 1
58410: NEG
58411: PUSH
58412: LD_INT 1
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 2
58421: NEG
58422: PUSH
58423: LD_INT 0
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 2
58432: NEG
58433: PUSH
58434: LD_INT 1
58436: NEG
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 2
58444: NEG
58445: PUSH
58446: LD_INT 2
58448: NEG
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58475: LD_ADDR_VAR 0 54
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: LD_INT 0
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 0
58492: PUSH
58493: LD_INT 1
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 1
58503: PUSH
58504: LD_INT 0
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 1
58513: PUSH
58514: LD_INT 1
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 0
58523: PUSH
58524: LD_INT 1
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 1
58533: NEG
58534: PUSH
58535: LD_INT 0
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 1
58544: NEG
58545: PUSH
58546: LD_INT 1
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 1
58556: NEG
58557: PUSH
58558: LD_INT 2
58560: NEG
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 0
58568: PUSH
58569: LD_INT 2
58571: NEG
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 1
58579: PUSH
58580: LD_INT 1
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 2
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 2
58600: PUSH
58601: LD_INT 1
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 2
58610: PUSH
58611: LD_INT 2
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 1
58620: PUSH
58621: LD_INT 2
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 0
58630: PUSH
58631: LD_INT 2
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 1
58640: NEG
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 2
58651: NEG
58652: PUSH
58653: LD_INT 0
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 2
58662: NEG
58663: PUSH
58664: LD_INT 1
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 2
58674: NEG
58675: PUSH
58676: LD_INT 2
58678: NEG
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58705: LD_ADDR_VAR 0 55
58709: PUSH
58710: LD_INT 0
58712: PUSH
58713: LD_INT 0
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 0
58722: PUSH
58723: LD_INT 1
58725: NEG
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 1
58733: PUSH
58734: LD_INT 0
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 1
58743: PUSH
58744: LD_INT 1
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: LD_INT 1
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 1
58763: NEG
58764: PUSH
58765: LD_INT 0
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 1
58774: NEG
58775: PUSH
58776: LD_INT 1
58778: NEG
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 1
58786: NEG
58787: PUSH
58788: LD_INT 2
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 0
58798: PUSH
58799: LD_INT 2
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 1
58809: PUSH
58810: LD_INT 1
58812: NEG
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 2
58820: PUSH
58821: LD_INT 0
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 2
58830: PUSH
58831: LD_INT 1
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 2
58840: PUSH
58841: LD_INT 2
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: LD_INT 2
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 0
58860: PUSH
58861: LD_INT 2
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 1
58870: NEG
58871: PUSH
58872: LD_INT 1
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 2
58881: NEG
58882: PUSH
58883: LD_INT 0
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 2
58892: NEG
58893: PUSH
58894: LD_INT 1
58896: NEG
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 2
58904: NEG
58905: PUSH
58906: LD_INT 2
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58935: LD_ADDR_VAR 0 56
58939: PUSH
58940: LD_INT 0
58942: PUSH
58943: LD_INT 0
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 0
58952: PUSH
58953: LD_INT 1
58955: NEG
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 1
58963: PUSH
58964: LD_INT 0
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 1
58973: PUSH
58974: LD_INT 1
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 0
58983: PUSH
58984: LD_INT 1
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 1
58993: NEG
58994: PUSH
58995: LD_INT 0
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 1
59004: NEG
59005: PUSH
59006: LD_INT 1
59008: NEG
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 1
59016: NEG
59017: PUSH
59018: LD_INT 2
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 0
59028: PUSH
59029: LD_INT 2
59031: NEG
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 1
59039: PUSH
59040: LD_INT 1
59042: NEG
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 2
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 2
59060: PUSH
59061: LD_INT 1
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 2
59070: PUSH
59071: LD_INT 2
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 1
59080: PUSH
59081: LD_INT 2
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 0
59090: PUSH
59091: LD_INT 2
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 1
59100: NEG
59101: PUSH
59102: LD_INT 1
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 2
59111: NEG
59112: PUSH
59113: LD_INT 0
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 2
59122: NEG
59123: PUSH
59124: LD_INT 1
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 2
59134: NEG
59135: PUSH
59136: LD_INT 2
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59165: LD_ADDR_VAR 0 57
59169: PUSH
59170: LD_INT 0
59172: PUSH
59173: LD_INT 0
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: LD_INT 1
59185: NEG
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 1
59193: PUSH
59194: LD_INT 0
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 1
59203: PUSH
59204: LD_INT 1
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 0
59213: PUSH
59214: LD_INT 1
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 1
59223: NEG
59224: PUSH
59225: LD_INT 0
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 1
59234: NEG
59235: PUSH
59236: LD_INT 1
59238: NEG
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 1
59246: NEG
59247: PUSH
59248: LD_INT 2
59250: NEG
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 0
59258: PUSH
59259: LD_INT 2
59261: NEG
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 1
59269: PUSH
59270: LD_INT 1
59272: NEG
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 2
59280: PUSH
59281: LD_INT 0
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 2
59290: PUSH
59291: LD_INT 1
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 2
59300: PUSH
59301: LD_INT 2
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 1
59310: PUSH
59311: LD_INT 2
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 0
59320: PUSH
59321: LD_INT 2
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 1
59330: NEG
59331: PUSH
59332: LD_INT 1
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 2
59341: NEG
59342: PUSH
59343: LD_INT 0
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 2
59352: NEG
59353: PUSH
59354: LD_INT 1
59356: NEG
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 2
59364: NEG
59365: PUSH
59366: LD_INT 2
59368: NEG
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59395: LD_ADDR_VAR 0 58
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: LD_INT 0
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 0
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 1
59423: PUSH
59424: LD_INT 0
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 1
59433: PUSH
59434: LD_INT 1
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 0
59443: PUSH
59444: LD_INT 1
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 1
59453: NEG
59454: PUSH
59455: LD_INT 0
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 1
59464: NEG
59465: PUSH
59466: LD_INT 1
59468: NEG
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 1
59476: NEG
59477: PUSH
59478: LD_INT 2
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 0
59488: PUSH
59489: LD_INT 2
59491: NEG
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 1
59499: PUSH
59500: LD_INT 1
59502: NEG
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 2
59510: PUSH
59511: LD_INT 0
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 2
59520: PUSH
59521: LD_INT 1
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 2
59530: PUSH
59531: LD_INT 2
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 1
59540: PUSH
59541: LD_INT 2
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 0
59550: PUSH
59551: LD_INT 2
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 1
59560: NEG
59561: PUSH
59562: LD_INT 1
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 2
59571: NEG
59572: PUSH
59573: LD_INT 0
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 2
59582: NEG
59583: PUSH
59584: LD_INT 1
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 2
59594: NEG
59595: PUSH
59596: LD_INT 2
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59625: LD_ADDR_VAR 0 59
59629: PUSH
59630: LD_INT 0
59632: PUSH
59633: LD_INT 0
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 0
59642: PUSH
59643: LD_INT 1
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 1
59653: PUSH
59654: LD_INT 0
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 1
59663: PUSH
59664: LD_INT 1
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 0
59673: PUSH
59674: LD_INT 1
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 1
59683: NEG
59684: PUSH
59685: LD_INT 0
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 1
59694: NEG
59695: PUSH
59696: LD_INT 1
59698: NEG
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59713: LD_ADDR_VAR 0 60
59717: PUSH
59718: LD_INT 0
59720: PUSH
59721: LD_INT 0
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 0
59730: PUSH
59731: LD_INT 1
59733: NEG
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 1
59741: PUSH
59742: LD_INT 0
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 1
59751: PUSH
59752: LD_INT 1
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 0
59761: PUSH
59762: LD_INT 1
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 1
59771: NEG
59772: PUSH
59773: LD_INT 0
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 1
59782: NEG
59783: PUSH
59784: LD_INT 1
59786: NEG
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59801: LD_ADDR_VAR 0 61
59805: PUSH
59806: LD_INT 0
59808: PUSH
59809: LD_INT 0
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 0
59818: PUSH
59819: LD_INT 1
59821: NEG
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 1
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 1
59839: PUSH
59840: LD_INT 1
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 0
59849: PUSH
59850: LD_INT 1
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 1
59859: NEG
59860: PUSH
59861: LD_INT 0
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 1
59870: NEG
59871: PUSH
59872: LD_INT 1
59874: NEG
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59889: LD_ADDR_VAR 0 62
59893: PUSH
59894: LD_INT 0
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 0
59906: PUSH
59907: LD_INT 1
59909: NEG
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 1
59917: PUSH
59918: LD_INT 0
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 1
59927: PUSH
59928: LD_INT 1
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 0
59937: PUSH
59938: LD_INT 1
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 1
59947: NEG
59948: PUSH
59949: LD_INT 0
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 1
59958: NEG
59959: PUSH
59960: LD_INT 1
59962: NEG
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59977: LD_ADDR_VAR 0 63
59981: PUSH
59982: LD_INT 0
59984: PUSH
59985: LD_INT 0
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 0
59994: PUSH
59995: LD_INT 1
59997: NEG
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 1
60005: PUSH
60006: LD_INT 0
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 1
60015: PUSH
60016: LD_INT 1
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 0
60025: PUSH
60026: LD_INT 1
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 1
60035: NEG
60036: PUSH
60037: LD_INT 0
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 1
60046: NEG
60047: PUSH
60048: LD_INT 1
60050: NEG
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60065: LD_ADDR_VAR 0 64
60069: PUSH
60070: LD_INT 0
60072: PUSH
60073: LD_INT 0
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 0
60082: PUSH
60083: LD_INT 1
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 1
60093: PUSH
60094: LD_INT 0
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 1
60103: PUSH
60104: LD_INT 1
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 0
60113: PUSH
60114: LD_INT 1
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 1
60123: NEG
60124: PUSH
60125: LD_INT 0
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 1
60134: NEG
60135: PUSH
60136: LD_INT 1
60138: NEG
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: ST_TO_ADDR
// end ; 1 :
60153: GO 66050
60155: LD_INT 1
60157: DOUBLE
60158: EQUAL
60159: IFTRUE 60163
60161: GO 62786
60163: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60164: LD_ADDR_VAR 0 11
60168: PUSH
60169: LD_INT 1
60171: NEG
60172: PUSH
60173: LD_INT 3
60175: NEG
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 0
60183: PUSH
60184: LD_INT 3
60186: NEG
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 1
60194: PUSH
60195: LD_INT 2
60197: NEG
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: LIST
60207: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60208: LD_ADDR_VAR 0 12
60212: PUSH
60213: LD_INT 2
60215: PUSH
60216: LD_INT 1
60218: NEG
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 3
60226: PUSH
60227: LD_INT 0
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 3
60236: PUSH
60237: LD_INT 1
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: LIST
60248: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60249: LD_ADDR_VAR 0 13
60253: PUSH
60254: LD_INT 3
60256: PUSH
60257: LD_INT 2
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 3
60266: PUSH
60267: LD_INT 3
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 2
60276: PUSH
60277: LD_INT 3
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: LIST
60288: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60289: LD_ADDR_VAR 0 14
60293: PUSH
60294: LD_INT 1
60296: PUSH
60297: LD_INT 3
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 0
60306: PUSH
60307: LD_INT 3
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 1
60316: NEG
60317: PUSH
60318: LD_INT 2
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: LIST
60329: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60330: LD_ADDR_VAR 0 15
60334: PUSH
60335: LD_INT 2
60337: NEG
60338: PUSH
60339: LD_INT 1
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 3
60348: NEG
60349: PUSH
60350: LD_INT 0
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 3
60359: NEG
60360: PUSH
60361: LD_INT 1
60363: NEG
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: LIST
60373: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60374: LD_ADDR_VAR 0 16
60378: PUSH
60379: LD_INT 2
60381: NEG
60382: PUSH
60383: LD_INT 3
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 3
60393: NEG
60394: PUSH
60395: LD_INT 2
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 3
60405: NEG
60406: PUSH
60407: LD_INT 3
60409: NEG
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: LIST
60419: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60420: LD_ADDR_VAR 0 17
60424: PUSH
60425: LD_INT 1
60427: NEG
60428: PUSH
60429: LD_INT 3
60431: NEG
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 0
60439: PUSH
60440: LD_INT 3
60442: NEG
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 1
60450: PUSH
60451: LD_INT 2
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: LIST
60463: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60464: LD_ADDR_VAR 0 18
60468: PUSH
60469: LD_INT 2
60471: PUSH
60472: LD_INT 1
60474: NEG
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 3
60482: PUSH
60483: LD_INT 0
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 3
60492: PUSH
60493: LD_INT 1
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: LIST
60504: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60505: LD_ADDR_VAR 0 19
60509: PUSH
60510: LD_INT 3
60512: PUSH
60513: LD_INT 2
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 3
60522: PUSH
60523: LD_INT 3
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 2
60532: PUSH
60533: LD_INT 3
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: LIST
60544: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60545: LD_ADDR_VAR 0 20
60549: PUSH
60550: LD_INT 1
60552: PUSH
60553: LD_INT 3
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 0
60562: PUSH
60563: LD_INT 3
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 1
60572: NEG
60573: PUSH
60574: LD_INT 2
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: LIST
60585: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60586: LD_ADDR_VAR 0 21
60590: PUSH
60591: LD_INT 2
60593: NEG
60594: PUSH
60595: LD_INT 1
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 3
60604: NEG
60605: PUSH
60606: LD_INT 0
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 3
60615: NEG
60616: PUSH
60617: LD_INT 1
60619: NEG
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: LIST
60629: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60630: LD_ADDR_VAR 0 22
60634: PUSH
60635: LD_INT 2
60637: NEG
60638: PUSH
60639: LD_INT 3
60641: NEG
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 3
60649: NEG
60650: PUSH
60651: LD_INT 2
60653: NEG
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 3
60661: NEG
60662: PUSH
60663: LD_INT 3
60665: NEG
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: LIST
60675: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60676: LD_ADDR_VAR 0 23
60680: PUSH
60681: LD_INT 0
60683: PUSH
60684: LD_INT 3
60686: NEG
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 1
60694: NEG
60695: PUSH
60696: LD_INT 4
60698: NEG
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 1
60706: PUSH
60707: LD_INT 3
60709: NEG
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: LIST
60719: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60720: LD_ADDR_VAR 0 24
60724: PUSH
60725: LD_INT 3
60727: PUSH
60728: LD_INT 0
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 3
60737: PUSH
60738: LD_INT 1
60740: NEG
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 4
60748: PUSH
60749: LD_INT 1
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: LIST
60760: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60761: LD_ADDR_VAR 0 25
60765: PUSH
60766: LD_INT 3
60768: PUSH
60769: LD_INT 3
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 4
60778: PUSH
60779: LD_INT 3
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 3
60788: PUSH
60789: LD_INT 4
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: LIST
60800: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60801: LD_ADDR_VAR 0 26
60805: PUSH
60806: LD_INT 0
60808: PUSH
60809: LD_INT 3
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 1
60818: PUSH
60819: LD_INT 4
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 1
60828: NEG
60829: PUSH
60830: LD_INT 3
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: LIST
60841: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60842: LD_ADDR_VAR 0 27
60846: PUSH
60847: LD_INT 3
60849: NEG
60850: PUSH
60851: LD_INT 0
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 3
60860: NEG
60861: PUSH
60862: LD_INT 1
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 4
60871: NEG
60872: PUSH
60873: LD_INT 1
60875: NEG
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: LIST
60885: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60886: LD_ADDR_VAR 0 28
60890: PUSH
60891: LD_INT 3
60893: NEG
60894: PUSH
60895: LD_INT 3
60897: NEG
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 3
60905: NEG
60906: PUSH
60907: LD_INT 4
60909: NEG
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 4
60917: NEG
60918: PUSH
60919: LD_INT 3
60921: NEG
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: LIST
60931: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60932: LD_ADDR_VAR 0 29
60936: PUSH
60937: LD_INT 1
60939: NEG
60940: PUSH
60941: LD_INT 3
60943: NEG
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 0
60951: PUSH
60952: LD_INT 3
60954: NEG
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 1
60962: PUSH
60963: LD_INT 2
60965: NEG
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 1
60973: NEG
60974: PUSH
60975: LD_INT 4
60977: NEG
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 0
60985: PUSH
60986: LD_INT 4
60988: NEG
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 1
60996: PUSH
60997: LD_INT 3
60999: NEG
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 1
61007: NEG
61008: PUSH
61009: LD_INT 5
61011: NEG
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 0
61019: PUSH
61020: LD_INT 5
61022: NEG
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 1
61030: PUSH
61031: LD_INT 4
61033: NEG
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 1
61041: NEG
61042: PUSH
61043: LD_INT 6
61045: NEG
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 0
61053: PUSH
61054: LD_INT 6
61056: NEG
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 1
61064: PUSH
61065: LD_INT 5
61067: NEG
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61087: LD_ADDR_VAR 0 30
61091: PUSH
61092: LD_INT 2
61094: PUSH
61095: LD_INT 1
61097: NEG
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 3
61105: PUSH
61106: LD_INT 0
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 3
61115: PUSH
61116: LD_INT 1
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 3
61125: PUSH
61126: LD_INT 1
61128: NEG
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 4
61136: PUSH
61137: LD_INT 0
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 4
61146: PUSH
61147: LD_INT 1
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 4
61156: PUSH
61157: LD_INT 1
61159: NEG
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 5
61167: PUSH
61168: LD_INT 0
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 5
61177: PUSH
61178: LD_INT 1
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 5
61187: PUSH
61188: LD_INT 1
61190: NEG
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 6
61198: PUSH
61199: LD_INT 0
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 6
61208: PUSH
61209: LD_INT 1
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61230: LD_ADDR_VAR 0 31
61234: PUSH
61235: LD_INT 3
61237: PUSH
61238: LD_INT 2
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 3
61247: PUSH
61248: LD_INT 3
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 2
61257: PUSH
61258: LD_INT 3
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 4
61267: PUSH
61268: LD_INT 3
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 4
61277: PUSH
61278: LD_INT 4
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 3
61287: PUSH
61288: LD_INT 4
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 5
61297: PUSH
61298: LD_INT 4
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 5
61307: PUSH
61308: LD_INT 5
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 4
61317: PUSH
61318: LD_INT 5
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 6
61327: PUSH
61328: LD_INT 5
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 6
61337: PUSH
61338: LD_INT 6
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 5
61347: PUSH
61348: LD_INT 6
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61369: LD_ADDR_VAR 0 32
61373: PUSH
61374: LD_INT 1
61376: PUSH
61377: LD_INT 3
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 0
61386: PUSH
61387: LD_INT 3
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 1
61396: NEG
61397: PUSH
61398: LD_INT 2
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 1
61407: PUSH
61408: LD_INT 4
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 0
61417: PUSH
61418: LD_INT 4
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 1
61427: NEG
61428: PUSH
61429: LD_INT 3
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 1
61438: PUSH
61439: LD_INT 5
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: LD_INT 5
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 1
61458: NEG
61459: PUSH
61460: LD_INT 4
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 1
61469: PUSH
61470: LD_INT 6
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 0
61479: PUSH
61480: LD_INT 6
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 1
61489: NEG
61490: PUSH
61491: LD_INT 5
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61512: LD_ADDR_VAR 0 33
61516: PUSH
61517: LD_INT 2
61519: NEG
61520: PUSH
61521: LD_INT 1
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 3
61530: NEG
61531: PUSH
61532: LD_INT 0
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 3
61541: NEG
61542: PUSH
61543: LD_INT 1
61545: NEG
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 3
61553: NEG
61554: PUSH
61555: LD_INT 1
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 4
61564: NEG
61565: PUSH
61566: LD_INT 0
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 4
61575: NEG
61576: PUSH
61577: LD_INT 1
61579: NEG
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 4
61587: NEG
61588: PUSH
61589: LD_INT 1
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 5
61598: NEG
61599: PUSH
61600: LD_INT 0
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 5
61609: NEG
61610: PUSH
61611: LD_INT 1
61613: NEG
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 5
61621: NEG
61622: PUSH
61623: LD_INT 1
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 6
61632: NEG
61633: PUSH
61634: LD_INT 0
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 6
61643: NEG
61644: PUSH
61645: LD_INT 1
61647: NEG
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61667: LD_ADDR_VAR 0 34
61671: PUSH
61672: LD_INT 2
61674: NEG
61675: PUSH
61676: LD_INT 3
61678: NEG
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 3
61686: NEG
61687: PUSH
61688: LD_INT 2
61690: NEG
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 3
61698: NEG
61699: PUSH
61700: LD_INT 3
61702: NEG
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 3
61710: NEG
61711: PUSH
61712: LD_INT 4
61714: NEG
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 4
61722: NEG
61723: PUSH
61724: LD_INT 3
61726: NEG
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 4
61734: NEG
61735: PUSH
61736: LD_INT 4
61738: NEG
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 4
61746: NEG
61747: PUSH
61748: LD_INT 5
61750: NEG
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 5
61758: NEG
61759: PUSH
61760: LD_INT 4
61762: NEG
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 5
61770: NEG
61771: PUSH
61772: LD_INT 5
61774: NEG
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 5
61782: NEG
61783: PUSH
61784: LD_INT 6
61786: NEG
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 6
61794: NEG
61795: PUSH
61796: LD_INT 5
61798: NEG
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 6
61806: NEG
61807: PUSH
61808: LD_INT 6
61810: NEG
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61830: LD_ADDR_VAR 0 41
61834: PUSH
61835: LD_INT 0
61837: PUSH
61838: LD_INT 2
61840: NEG
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 1
61848: NEG
61849: PUSH
61850: LD_INT 3
61852: NEG
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 1
61860: PUSH
61861: LD_INT 2
61863: NEG
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: LIST
61873: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61874: LD_ADDR_VAR 0 42
61878: PUSH
61879: LD_INT 2
61881: PUSH
61882: LD_INT 0
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 2
61891: PUSH
61892: LD_INT 1
61894: NEG
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 3
61902: PUSH
61903: LD_INT 1
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: LIST
61914: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61915: LD_ADDR_VAR 0 43
61919: PUSH
61920: LD_INT 2
61922: PUSH
61923: LD_INT 2
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 3
61932: PUSH
61933: LD_INT 2
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 2
61942: PUSH
61943: LD_INT 3
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: LIST
61954: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61955: LD_ADDR_VAR 0 44
61959: PUSH
61960: LD_INT 0
61962: PUSH
61963: LD_INT 2
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 1
61972: PUSH
61973: LD_INT 3
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 1
61982: NEG
61983: PUSH
61984: LD_INT 2
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: LIST
61995: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61996: LD_ADDR_VAR 0 45
62000: PUSH
62001: LD_INT 2
62003: NEG
62004: PUSH
62005: LD_INT 0
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 2
62014: NEG
62015: PUSH
62016: LD_INT 1
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 3
62025: NEG
62026: PUSH
62027: LD_INT 1
62029: NEG
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: LIST
62039: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62040: LD_ADDR_VAR 0 46
62044: PUSH
62045: LD_INT 2
62047: NEG
62048: PUSH
62049: LD_INT 2
62051: NEG
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 2
62059: NEG
62060: PUSH
62061: LD_INT 3
62063: NEG
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 3
62071: NEG
62072: PUSH
62073: LD_INT 2
62075: NEG
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: LIST
62085: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62086: LD_ADDR_VAR 0 47
62090: PUSH
62091: LD_INT 2
62093: NEG
62094: PUSH
62095: LD_INT 3
62097: NEG
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 1
62105: NEG
62106: PUSH
62107: LD_INT 3
62109: NEG
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62119: LD_ADDR_VAR 0 48
62123: PUSH
62124: LD_INT 1
62126: PUSH
62127: LD_INT 2
62129: NEG
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 2
62137: PUSH
62138: LD_INT 1
62140: NEG
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62150: LD_ADDR_VAR 0 49
62154: PUSH
62155: LD_INT 3
62157: PUSH
62158: LD_INT 1
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 3
62167: PUSH
62168: LD_INT 2
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
62179: LD_ADDR_VAR 0 50
62183: PUSH
62184: LD_INT 2
62186: PUSH
62187: LD_INT 3
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 1
62196: PUSH
62197: LD_INT 3
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62208: LD_ADDR_VAR 0 51
62212: PUSH
62213: LD_INT 1
62215: NEG
62216: PUSH
62217: LD_INT 2
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 2
62226: NEG
62227: PUSH
62228: LD_INT 1
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62239: LD_ADDR_VAR 0 52
62243: PUSH
62244: LD_INT 3
62246: NEG
62247: PUSH
62248: LD_INT 1
62250: NEG
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 3
62258: NEG
62259: PUSH
62260: LD_INT 2
62262: NEG
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62272: LD_ADDR_VAR 0 53
62276: PUSH
62277: LD_INT 1
62279: NEG
62280: PUSH
62281: LD_INT 3
62283: NEG
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 0
62291: PUSH
62292: LD_INT 3
62294: NEG
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 1
62302: PUSH
62303: LD_INT 2
62305: NEG
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: LIST
62315: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62316: LD_ADDR_VAR 0 54
62320: PUSH
62321: LD_INT 2
62323: PUSH
62324: LD_INT 1
62326: NEG
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 3
62334: PUSH
62335: LD_INT 0
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 3
62344: PUSH
62345: LD_INT 1
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: LIST
62356: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62357: LD_ADDR_VAR 0 55
62361: PUSH
62362: LD_INT 3
62364: PUSH
62365: LD_INT 2
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 3
62374: PUSH
62375: LD_INT 3
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 2
62384: PUSH
62385: LD_INT 3
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: LIST
62396: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62397: LD_ADDR_VAR 0 56
62401: PUSH
62402: LD_INT 1
62404: PUSH
62405: LD_INT 3
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 0
62414: PUSH
62415: LD_INT 3
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 1
62424: NEG
62425: PUSH
62426: LD_INT 2
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: LIST
62437: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62438: LD_ADDR_VAR 0 57
62442: PUSH
62443: LD_INT 2
62445: NEG
62446: PUSH
62447: LD_INT 1
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 3
62456: NEG
62457: PUSH
62458: LD_INT 0
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 3
62467: NEG
62468: PUSH
62469: LD_INT 1
62471: NEG
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: LIST
62481: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62482: LD_ADDR_VAR 0 58
62486: PUSH
62487: LD_INT 2
62489: NEG
62490: PUSH
62491: LD_INT 3
62493: NEG
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 3
62501: NEG
62502: PUSH
62503: LD_INT 2
62505: NEG
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 3
62513: NEG
62514: PUSH
62515: LD_INT 3
62517: NEG
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: LIST
62527: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62528: LD_ADDR_VAR 0 59
62532: PUSH
62533: LD_INT 1
62535: NEG
62536: PUSH
62537: LD_INT 2
62539: NEG
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 0
62547: PUSH
62548: LD_INT 2
62550: NEG
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 1
62558: PUSH
62559: LD_INT 1
62561: NEG
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: LIST
62571: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62572: LD_ADDR_VAR 0 60
62576: PUSH
62577: LD_INT 1
62579: PUSH
62580: LD_INT 1
62582: NEG
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 2
62590: PUSH
62591: LD_INT 0
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 2
62600: PUSH
62601: LD_INT 1
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: LIST
62612: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62613: LD_ADDR_VAR 0 61
62617: PUSH
62618: LD_INT 2
62620: PUSH
62621: LD_INT 1
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 2
62630: PUSH
62631: LD_INT 2
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 1
62640: PUSH
62641: LD_INT 2
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: LIST
62652: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62653: LD_ADDR_VAR 0 62
62657: PUSH
62658: LD_INT 1
62660: PUSH
62661: LD_INT 2
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 0
62670: PUSH
62671: LD_INT 2
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 1
62680: NEG
62681: PUSH
62682: LD_INT 1
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: LIST
62693: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62694: LD_ADDR_VAR 0 63
62698: PUSH
62699: LD_INT 1
62701: NEG
62702: PUSH
62703: LD_INT 1
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 2
62712: NEG
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 2
62723: NEG
62724: PUSH
62725: LD_INT 1
62727: NEG
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: LIST
62737: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62738: LD_ADDR_VAR 0 64
62742: PUSH
62743: LD_INT 1
62745: NEG
62746: PUSH
62747: LD_INT 2
62749: NEG
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 2
62757: NEG
62758: PUSH
62759: LD_INT 1
62761: NEG
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 2
62769: NEG
62770: PUSH
62771: LD_INT 2
62773: NEG
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: LIST
62783: ST_TO_ADDR
// end ; 2 :
62784: GO 66050
62786: LD_INT 2
62788: DOUBLE
62789: EQUAL
62790: IFTRUE 62794
62792: GO 66049
62794: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62795: LD_ADDR_VAR 0 29
62799: PUSH
62800: LD_INT 4
62802: PUSH
62803: LD_INT 0
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 4
62812: PUSH
62813: LD_INT 1
62815: NEG
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 5
62823: PUSH
62824: LD_INT 0
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 5
62833: PUSH
62834: LD_INT 1
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 4
62843: PUSH
62844: LD_INT 1
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 3
62853: PUSH
62854: LD_INT 0
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 3
62863: PUSH
62864: LD_INT 1
62866: NEG
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 3
62874: PUSH
62875: LD_INT 2
62877: NEG
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 5
62885: PUSH
62886: LD_INT 2
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 3
62895: PUSH
62896: LD_INT 3
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 3
62905: PUSH
62906: LD_INT 2
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 4
62915: PUSH
62916: LD_INT 3
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PUSH
62923: LD_INT 4
62925: PUSH
62926: LD_INT 4
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 3
62935: PUSH
62936: LD_INT 4
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 2
62945: PUSH
62946: LD_INT 3
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 2
62955: PUSH
62956: LD_INT 2
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 4
62965: PUSH
62966: LD_INT 2
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 2
62975: PUSH
62976: LD_INT 4
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 0
62985: PUSH
62986: LD_INT 4
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 0
62995: PUSH
62996: LD_INT 3
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 1
63005: PUSH
63006: LD_INT 4
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 1
63015: PUSH
63016: LD_INT 5
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 0
63025: PUSH
63026: LD_INT 5
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 1
63035: NEG
63036: PUSH
63037: LD_INT 4
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 1
63046: NEG
63047: PUSH
63048: LD_INT 3
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 2
63057: PUSH
63058: LD_INT 5
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 2
63067: NEG
63068: PUSH
63069: LD_INT 3
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 3
63078: NEG
63079: PUSH
63080: LD_INT 0
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 3
63089: NEG
63090: PUSH
63091: LD_INT 1
63093: NEG
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 2
63101: NEG
63102: PUSH
63103: LD_INT 0
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 2
63112: NEG
63113: PUSH
63114: LD_INT 1
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 3
63123: NEG
63124: PUSH
63125: LD_INT 1
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 4
63134: NEG
63135: PUSH
63136: LD_INT 0
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 4
63145: NEG
63146: PUSH
63147: LD_INT 1
63149: NEG
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 4
63157: NEG
63158: PUSH
63159: LD_INT 2
63161: NEG
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 2
63169: NEG
63170: PUSH
63171: LD_INT 2
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 4
63180: NEG
63181: PUSH
63182: LD_INT 4
63184: NEG
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 4
63192: NEG
63193: PUSH
63194: LD_INT 5
63196: NEG
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 3
63204: NEG
63205: PUSH
63206: LD_INT 4
63208: NEG
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 3
63216: NEG
63217: PUSH
63218: LD_INT 3
63220: NEG
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 4
63228: NEG
63229: PUSH
63230: LD_INT 3
63232: NEG
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 5
63240: NEG
63241: PUSH
63242: LD_INT 4
63244: NEG
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: LD_INT 5
63252: NEG
63253: PUSH
63254: LD_INT 5
63256: NEG
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 3
63264: NEG
63265: PUSH
63266: LD_INT 5
63268: NEG
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 5
63276: NEG
63277: PUSH
63278: LD_INT 3
63280: NEG
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63333: LD_ADDR_VAR 0 30
63337: PUSH
63338: LD_INT 4
63340: PUSH
63341: LD_INT 4
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 4
63350: PUSH
63351: LD_INT 3
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 5
63360: PUSH
63361: LD_INT 4
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 5
63370: PUSH
63371: LD_INT 5
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 4
63380: PUSH
63381: LD_INT 5
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 3
63390: PUSH
63391: LD_INT 4
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 3
63400: PUSH
63401: LD_INT 3
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 5
63410: PUSH
63411: LD_INT 3
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 3
63420: PUSH
63421: LD_INT 5
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 0
63430: PUSH
63431: LD_INT 3
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 0
63440: PUSH
63441: LD_INT 2
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 1
63450: PUSH
63451: LD_INT 3
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 1
63460: PUSH
63461: LD_INT 4
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 0
63470: PUSH
63471: LD_INT 4
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 1
63480: NEG
63481: PUSH
63482: LD_INT 3
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 1
63491: NEG
63492: PUSH
63493: LD_INT 2
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 2
63502: PUSH
63503: LD_INT 4
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 2
63512: NEG
63513: PUSH
63514: LD_INT 2
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: LD_INT 4
63523: NEG
63524: PUSH
63525: LD_INT 0
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 4
63534: NEG
63535: PUSH
63536: LD_INT 1
63538: NEG
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: LD_INT 3
63546: NEG
63547: PUSH
63548: LD_INT 0
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 3
63557: NEG
63558: PUSH
63559: LD_INT 1
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 4
63568: NEG
63569: PUSH
63570: LD_INT 1
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 5
63579: NEG
63580: PUSH
63581: LD_INT 0
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 5
63590: NEG
63591: PUSH
63592: LD_INT 1
63594: NEG
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 5
63602: NEG
63603: PUSH
63604: LD_INT 2
63606: NEG
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 3
63614: NEG
63615: PUSH
63616: LD_INT 2
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 3
63625: NEG
63626: PUSH
63627: LD_INT 3
63629: NEG
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 3
63637: NEG
63638: PUSH
63639: LD_INT 4
63641: NEG
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 2
63649: NEG
63650: PUSH
63651: LD_INT 3
63653: NEG
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 2
63661: NEG
63662: PUSH
63663: LD_INT 2
63665: NEG
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 3
63673: NEG
63674: PUSH
63675: LD_INT 2
63677: NEG
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 4
63685: NEG
63686: PUSH
63687: LD_INT 3
63689: NEG
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 4
63697: NEG
63698: PUSH
63699: LD_INT 4
63701: NEG
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 2
63709: NEG
63710: PUSH
63711: LD_INT 4
63713: NEG
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 4
63721: NEG
63722: PUSH
63723: LD_INT 2
63725: NEG
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PUSH
63731: LD_INT 0
63733: PUSH
63734: LD_INT 4
63736: NEG
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 0
63744: PUSH
63745: LD_INT 5
63747: NEG
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 1
63755: PUSH
63756: LD_INT 4
63758: NEG
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 1
63766: PUSH
63767: LD_INT 3
63769: NEG
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 0
63777: PUSH
63778: LD_INT 3
63780: NEG
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 1
63788: NEG
63789: PUSH
63790: LD_INT 4
63792: NEG
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 1
63800: NEG
63801: PUSH
63802: LD_INT 5
63804: NEG
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 2
63812: PUSH
63813: LD_INT 3
63815: NEG
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 2
63823: NEG
63824: PUSH
63825: LD_INT 5
63827: NEG
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63880: LD_ADDR_VAR 0 31
63884: PUSH
63885: LD_INT 0
63887: PUSH
63888: LD_INT 4
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 0
63897: PUSH
63898: LD_INT 3
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 1
63907: PUSH
63908: LD_INT 4
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 1
63917: PUSH
63918: LD_INT 5
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 0
63927: PUSH
63928: LD_INT 5
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 1
63937: NEG
63938: PUSH
63939: LD_INT 4
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 1
63948: NEG
63949: PUSH
63950: LD_INT 3
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 2
63959: PUSH
63960: LD_INT 5
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 2
63969: NEG
63970: PUSH
63971: LD_INT 3
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: LD_INT 3
63980: NEG
63981: PUSH
63982: LD_INT 0
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 3
63991: NEG
63992: PUSH
63993: LD_INT 1
63995: NEG
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 2
64003: NEG
64004: PUSH
64005: LD_INT 0
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 2
64014: NEG
64015: PUSH
64016: LD_INT 1
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_INT 3
64025: NEG
64026: PUSH
64027: LD_INT 1
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 4
64036: NEG
64037: PUSH
64038: LD_INT 0
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 4
64047: NEG
64048: PUSH
64049: LD_INT 1
64051: NEG
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 4
64059: NEG
64060: PUSH
64061: LD_INT 2
64063: NEG
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 2
64071: NEG
64072: PUSH
64073: LD_INT 2
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: LD_INT 4
64082: NEG
64083: PUSH
64084: LD_INT 4
64086: NEG
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 4
64094: NEG
64095: PUSH
64096: LD_INT 5
64098: NEG
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PUSH
64104: LD_INT 3
64106: NEG
64107: PUSH
64108: LD_INT 4
64110: NEG
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 3
64118: NEG
64119: PUSH
64120: LD_INT 3
64122: NEG
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 4
64130: NEG
64131: PUSH
64132: LD_INT 3
64134: NEG
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 5
64142: NEG
64143: PUSH
64144: LD_INT 4
64146: NEG
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 5
64154: NEG
64155: PUSH
64156: LD_INT 5
64158: NEG
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: PUSH
64164: LD_INT 3
64166: NEG
64167: PUSH
64168: LD_INT 5
64170: NEG
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: LD_INT 5
64178: NEG
64179: PUSH
64180: LD_INT 3
64182: NEG
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 0
64190: PUSH
64191: LD_INT 3
64193: NEG
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 0
64201: PUSH
64202: LD_INT 4
64204: NEG
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 1
64212: PUSH
64213: LD_INT 3
64215: NEG
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 1
64223: PUSH
64224: LD_INT 2
64226: NEG
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 0
64234: PUSH
64235: LD_INT 2
64237: NEG
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 1
64245: NEG
64246: PUSH
64247: LD_INT 3
64249: NEG
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 1
64257: NEG
64258: PUSH
64259: LD_INT 4
64261: NEG
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 2
64269: PUSH
64270: LD_INT 2
64272: NEG
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 2
64280: NEG
64281: PUSH
64282: LD_INT 4
64284: NEG
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 4
64292: PUSH
64293: LD_INT 0
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 4
64302: PUSH
64303: LD_INT 1
64305: NEG
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 5
64313: PUSH
64314: LD_INT 0
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 5
64323: PUSH
64324: LD_INT 1
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 4
64333: PUSH
64334: LD_INT 1
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 3
64343: PUSH
64344: LD_INT 0
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 3
64353: PUSH
64354: LD_INT 1
64356: NEG
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 3
64364: PUSH
64365: LD_INT 2
64367: NEG
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 5
64375: PUSH
64376: LD_INT 2
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64430: LD_ADDR_VAR 0 32
64434: PUSH
64435: LD_INT 4
64437: NEG
64438: PUSH
64439: LD_INT 0
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 4
64448: NEG
64449: PUSH
64450: LD_INT 1
64452: NEG
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 3
64460: NEG
64461: PUSH
64462: LD_INT 0
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: LD_INT 3
64471: NEG
64472: PUSH
64473: LD_INT 1
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 4
64482: NEG
64483: PUSH
64484: LD_INT 1
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 5
64493: NEG
64494: PUSH
64495: LD_INT 0
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 5
64504: NEG
64505: PUSH
64506: LD_INT 1
64508: NEG
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 5
64516: NEG
64517: PUSH
64518: LD_INT 2
64520: NEG
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 3
64528: NEG
64529: PUSH
64530: LD_INT 2
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 3
64539: NEG
64540: PUSH
64541: LD_INT 3
64543: NEG
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 3
64551: NEG
64552: PUSH
64553: LD_INT 4
64555: NEG
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 2
64563: NEG
64564: PUSH
64565: LD_INT 3
64567: NEG
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 2
64575: NEG
64576: PUSH
64577: LD_INT 2
64579: NEG
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 3
64587: NEG
64588: PUSH
64589: LD_INT 2
64591: NEG
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 4
64599: NEG
64600: PUSH
64601: LD_INT 3
64603: NEG
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 4
64611: NEG
64612: PUSH
64613: LD_INT 4
64615: NEG
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 2
64623: NEG
64624: PUSH
64625: LD_INT 4
64627: NEG
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 4
64635: NEG
64636: PUSH
64637: LD_INT 2
64639: NEG
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 0
64647: PUSH
64648: LD_INT 4
64650: NEG
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 0
64658: PUSH
64659: LD_INT 5
64661: NEG
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 1
64669: PUSH
64670: LD_INT 4
64672: NEG
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 1
64680: PUSH
64681: LD_INT 3
64683: NEG
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 0
64691: PUSH
64692: LD_INT 3
64694: NEG
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 1
64702: NEG
64703: PUSH
64704: LD_INT 4
64706: NEG
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: LD_INT 1
64714: NEG
64715: PUSH
64716: LD_INT 5
64718: NEG
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: LD_INT 2
64726: PUSH
64727: LD_INT 3
64729: NEG
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: LD_INT 2
64737: NEG
64738: PUSH
64739: LD_INT 5
64741: NEG
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 3
64749: PUSH
64750: LD_INT 0
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 3
64759: PUSH
64760: LD_INT 1
64762: NEG
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: LD_INT 4
64770: PUSH
64771: LD_INT 0
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 4
64780: PUSH
64781: LD_INT 1
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 3
64790: PUSH
64791: LD_INT 1
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 2
64800: PUSH
64801: LD_INT 0
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 2
64810: PUSH
64811: LD_INT 1
64813: NEG
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 2
64821: PUSH
64822: LD_INT 2
64824: NEG
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 4
64832: PUSH
64833: LD_INT 2
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: LD_INT 4
64842: PUSH
64843: LD_INT 4
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 4
64852: PUSH
64853: LD_INT 3
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 5
64862: PUSH
64863: LD_INT 4
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 5
64872: PUSH
64873: LD_INT 5
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 4
64882: PUSH
64883: LD_INT 5
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 3
64892: PUSH
64893: LD_INT 4
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 3
64902: PUSH
64903: LD_INT 3
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: PUSH
64910: LD_INT 5
64912: PUSH
64913: LD_INT 3
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: LD_INT 3
64922: PUSH
64923: LD_INT 5
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64977: LD_ADDR_VAR 0 33
64981: PUSH
64982: LD_INT 4
64984: NEG
64985: PUSH
64986: LD_INT 4
64988: NEG
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 4
64996: NEG
64997: PUSH
64998: LD_INT 5
65000: NEG
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: LD_INT 3
65008: NEG
65009: PUSH
65010: LD_INT 4
65012: NEG
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 3
65020: NEG
65021: PUSH
65022: LD_INT 3
65024: NEG
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 4
65032: NEG
65033: PUSH
65034: LD_INT 3
65036: NEG
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 5
65044: NEG
65045: PUSH
65046: LD_INT 4
65048: NEG
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 5
65056: NEG
65057: PUSH
65058: LD_INT 5
65060: NEG
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: LD_INT 3
65068: NEG
65069: PUSH
65070: LD_INT 5
65072: NEG
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: LD_INT 5
65080: NEG
65081: PUSH
65082: LD_INT 3
65084: NEG
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 0
65092: PUSH
65093: LD_INT 3
65095: NEG
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 0
65103: PUSH
65104: LD_INT 4
65106: NEG
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 1
65114: PUSH
65115: LD_INT 3
65117: NEG
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 1
65125: PUSH
65126: LD_INT 2
65128: NEG
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: PUSH
65134: LD_INT 0
65136: PUSH
65137: LD_INT 2
65139: NEG
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 1
65147: NEG
65148: PUSH
65149: LD_INT 3
65151: NEG
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 1
65159: NEG
65160: PUSH
65161: LD_INT 4
65163: NEG
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 2
65171: PUSH
65172: LD_INT 2
65174: NEG
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 2
65182: NEG
65183: PUSH
65184: LD_INT 4
65186: NEG
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: LD_INT 4
65194: PUSH
65195: LD_INT 0
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: PUSH
65202: LD_INT 4
65204: PUSH
65205: LD_INT 1
65207: NEG
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 5
65215: PUSH
65216: LD_INT 0
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 5
65225: PUSH
65226: LD_INT 1
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 4
65235: PUSH
65236: LD_INT 1
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 3
65245: PUSH
65246: LD_INT 0
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 3
65255: PUSH
65256: LD_INT 1
65258: NEG
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: PUSH
65264: LD_INT 3
65266: PUSH
65267: LD_INT 2
65269: NEG
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: LD_INT 5
65277: PUSH
65278: LD_INT 2
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: LD_INT 3
65287: PUSH
65288: LD_INT 3
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 3
65297: PUSH
65298: LD_INT 2
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: LD_INT 4
65307: PUSH
65308: LD_INT 3
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: LD_INT 4
65317: PUSH
65318: LD_INT 4
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: LD_INT 3
65327: PUSH
65328: LD_INT 4
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 2
65337: PUSH
65338: LD_INT 3
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: LD_INT 2
65347: PUSH
65348: LD_INT 2
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: PUSH
65355: LD_INT 4
65357: PUSH
65358: LD_INT 2
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: PUSH
65365: LD_INT 2
65367: PUSH
65368: LD_INT 4
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 0
65377: PUSH
65378: LD_INT 4
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 0
65387: PUSH
65388: LD_INT 3
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 1
65397: PUSH
65398: LD_INT 4
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 1
65407: PUSH
65408: LD_INT 5
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 0
65417: PUSH
65418: LD_INT 5
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: PUSH
65425: LD_INT 1
65427: NEG
65428: PUSH
65429: LD_INT 4
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: LD_INT 1
65438: NEG
65439: PUSH
65440: LD_INT 3
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: LD_INT 2
65449: PUSH
65450: LD_INT 5
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 2
65459: NEG
65460: PUSH
65461: LD_INT 3
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: LIST
65472: LIST
65473: LIST
65474: LIST
65475: LIST
65476: LIST
65477: LIST
65478: LIST
65479: LIST
65480: LIST
65481: LIST
65482: LIST
65483: LIST
65484: LIST
65485: LIST
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65515: LD_ADDR_VAR 0 34
65519: PUSH
65520: LD_INT 0
65522: PUSH
65523: LD_INT 4
65525: NEG
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: LD_INT 0
65533: PUSH
65534: LD_INT 5
65536: NEG
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 1
65544: PUSH
65545: LD_INT 4
65547: NEG
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: LD_INT 1
65555: PUSH
65556: LD_INT 3
65558: NEG
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: LD_INT 0
65566: PUSH
65567: LD_INT 3
65569: NEG
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 1
65577: NEG
65578: PUSH
65579: LD_INT 4
65581: NEG
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: LD_INT 1
65589: NEG
65590: PUSH
65591: LD_INT 5
65593: NEG
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: PUSH
65599: LD_INT 2
65601: PUSH
65602: LD_INT 3
65604: NEG
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 2
65612: NEG
65613: PUSH
65614: LD_INT 5
65616: NEG
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 3
65624: PUSH
65625: LD_INT 0
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 3
65634: PUSH
65635: LD_INT 1
65637: NEG
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 4
65645: PUSH
65646: LD_INT 0
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 4
65655: PUSH
65656: LD_INT 1
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 3
65665: PUSH
65666: LD_INT 1
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 2
65675: PUSH
65676: LD_INT 0
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 2
65685: PUSH
65686: LD_INT 1
65688: NEG
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: LD_INT 2
65696: PUSH
65697: LD_INT 2
65699: NEG
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: PUSH
65705: LD_INT 4
65707: PUSH
65708: LD_INT 2
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 4
65717: PUSH
65718: LD_INT 4
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 4
65727: PUSH
65728: LD_INT 3
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 5
65737: PUSH
65738: LD_INT 4
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 5
65747: PUSH
65748: LD_INT 5
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 4
65757: PUSH
65758: LD_INT 5
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 3
65767: PUSH
65768: LD_INT 4
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 3
65777: PUSH
65778: LD_INT 3
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: LD_INT 5
65787: PUSH
65788: LD_INT 3
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: LD_INT 3
65797: PUSH
65798: LD_INT 5
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 0
65807: PUSH
65808: LD_INT 3
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 0
65817: PUSH
65818: LD_INT 2
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 1
65827: PUSH
65828: LD_INT 3
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 1
65837: PUSH
65838: LD_INT 4
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 0
65847: PUSH
65848: LD_INT 4
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 1
65857: NEG
65858: PUSH
65859: LD_INT 3
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 1
65868: NEG
65869: PUSH
65870: LD_INT 2
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 2
65879: PUSH
65880: LD_INT 4
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 2
65889: NEG
65890: PUSH
65891: LD_INT 2
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 4
65900: NEG
65901: PUSH
65902: LD_INT 0
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 4
65911: NEG
65912: PUSH
65913: LD_INT 1
65915: NEG
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 3
65923: NEG
65924: PUSH
65925: LD_INT 0
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: LD_INT 3
65934: NEG
65935: PUSH
65936: LD_INT 1
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 4
65945: NEG
65946: PUSH
65947: LD_INT 1
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 5
65956: NEG
65957: PUSH
65958: LD_INT 0
65960: PUSH
65961: EMPTY
65962: LIST
65963: LIST
65964: PUSH
65965: LD_INT 5
65967: NEG
65968: PUSH
65969: LD_INT 1
65971: NEG
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: PUSH
65977: LD_INT 5
65979: NEG
65980: PUSH
65981: LD_INT 2
65983: NEG
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 3
65991: NEG
65992: PUSH
65993: LD_INT 2
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: LIST
66020: LIST
66021: LIST
66022: LIST
66023: LIST
66024: LIST
66025: LIST
66026: LIST
66027: LIST
66028: LIST
66029: LIST
66030: LIST
66031: LIST
66032: LIST
66033: LIST
66034: LIST
66035: LIST
66036: LIST
66037: LIST
66038: LIST
66039: LIST
66040: LIST
66041: LIST
66042: LIST
66043: LIST
66044: LIST
66045: LIST
66046: ST_TO_ADDR
// end ; end ;
66047: GO 66050
66049: POP
// case btype of b_depot , b_warehouse :
66050: LD_VAR 0 1
66054: PUSH
66055: LD_INT 0
66057: DOUBLE
66058: EQUAL
66059: IFTRUE 66069
66061: LD_INT 1
66063: DOUBLE
66064: EQUAL
66065: IFTRUE 66069
66067: GO 66270
66069: POP
// case nation of nation_american :
66070: LD_VAR 0 5
66074: PUSH
66075: LD_INT 1
66077: DOUBLE
66078: EQUAL
66079: IFTRUE 66083
66081: GO 66139
66083: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66084: LD_ADDR_VAR 0 9
66088: PUSH
66089: LD_VAR 0 11
66093: PUSH
66094: LD_VAR 0 12
66098: PUSH
66099: LD_VAR 0 13
66103: PUSH
66104: LD_VAR 0 14
66108: PUSH
66109: LD_VAR 0 15
66113: PUSH
66114: LD_VAR 0 16
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: PUSH
66127: LD_VAR 0 4
66131: PUSH
66132: LD_INT 1
66134: PLUS
66135: ARRAY
66136: ST_TO_ADDR
66137: GO 66268
66139: LD_INT 2
66141: DOUBLE
66142: EQUAL
66143: IFTRUE 66147
66145: GO 66203
66147: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66148: LD_ADDR_VAR 0 9
66152: PUSH
66153: LD_VAR 0 17
66157: PUSH
66158: LD_VAR 0 18
66162: PUSH
66163: LD_VAR 0 19
66167: PUSH
66168: LD_VAR 0 20
66172: PUSH
66173: LD_VAR 0 21
66177: PUSH
66178: LD_VAR 0 22
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: PUSH
66191: LD_VAR 0 4
66195: PUSH
66196: LD_INT 1
66198: PLUS
66199: ARRAY
66200: ST_TO_ADDR
66201: GO 66268
66203: LD_INT 3
66205: DOUBLE
66206: EQUAL
66207: IFTRUE 66211
66209: GO 66267
66211: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66212: LD_ADDR_VAR 0 9
66216: PUSH
66217: LD_VAR 0 23
66221: PUSH
66222: LD_VAR 0 24
66226: PUSH
66227: LD_VAR 0 25
66231: PUSH
66232: LD_VAR 0 26
66236: PUSH
66237: LD_VAR 0 27
66241: PUSH
66242: LD_VAR 0 28
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: PUSH
66255: LD_VAR 0 4
66259: PUSH
66260: LD_INT 1
66262: PLUS
66263: ARRAY
66264: ST_TO_ADDR
66265: GO 66268
66267: POP
66268: GO 66823
66270: LD_INT 2
66272: DOUBLE
66273: EQUAL
66274: IFTRUE 66284
66276: LD_INT 3
66278: DOUBLE
66279: EQUAL
66280: IFTRUE 66284
66282: GO 66340
66284: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66285: LD_ADDR_VAR 0 9
66289: PUSH
66290: LD_VAR 0 29
66294: PUSH
66295: LD_VAR 0 30
66299: PUSH
66300: LD_VAR 0 31
66304: PUSH
66305: LD_VAR 0 32
66309: PUSH
66310: LD_VAR 0 33
66314: PUSH
66315: LD_VAR 0 34
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: PUSH
66328: LD_VAR 0 4
66332: PUSH
66333: LD_INT 1
66335: PLUS
66336: ARRAY
66337: ST_TO_ADDR
66338: GO 66823
66340: LD_INT 16
66342: DOUBLE
66343: EQUAL
66344: IFTRUE 66402
66346: LD_INT 17
66348: DOUBLE
66349: EQUAL
66350: IFTRUE 66402
66352: LD_INT 18
66354: DOUBLE
66355: EQUAL
66356: IFTRUE 66402
66358: LD_INT 19
66360: DOUBLE
66361: EQUAL
66362: IFTRUE 66402
66364: LD_INT 22
66366: DOUBLE
66367: EQUAL
66368: IFTRUE 66402
66370: LD_INT 20
66372: DOUBLE
66373: EQUAL
66374: IFTRUE 66402
66376: LD_INT 21
66378: DOUBLE
66379: EQUAL
66380: IFTRUE 66402
66382: LD_INT 23
66384: DOUBLE
66385: EQUAL
66386: IFTRUE 66402
66388: LD_INT 24
66390: DOUBLE
66391: EQUAL
66392: IFTRUE 66402
66394: LD_INT 25
66396: DOUBLE
66397: EQUAL
66398: IFTRUE 66402
66400: GO 66458
66402: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66403: LD_ADDR_VAR 0 9
66407: PUSH
66408: LD_VAR 0 35
66412: PUSH
66413: LD_VAR 0 36
66417: PUSH
66418: LD_VAR 0 37
66422: PUSH
66423: LD_VAR 0 38
66427: PUSH
66428: LD_VAR 0 39
66432: PUSH
66433: LD_VAR 0 40
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: PUSH
66446: LD_VAR 0 4
66450: PUSH
66451: LD_INT 1
66453: PLUS
66454: ARRAY
66455: ST_TO_ADDR
66456: GO 66823
66458: LD_INT 6
66460: DOUBLE
66461: EQUAL
66462: IFTRUE 66514
66464: LD_INT 7
66466: DOUBLE
66467: EQUAL
66468: IFTRUE 66514
66470: LD_INT 8
66472: DOUBLE
66473: EQUAL
66474: IFTRUE 66514
66476: LD_INT 13
66478: DOUBLE
66479: EQUAL
66480: IFTRUE 66514
66482: LD_INT 12
66484: DOUBLE
66485: EQUAL
66486: IFTRUE 66514
66488: LD_INT 15
66490: DOUBLE
66491: EQUAL
66492: IFTRUE 66514
66494: LD_INT 11
66496: DOUBLE
66497: EQUAL
66498: IFTRUE 66514
66500: LD_INT 14
66502: DOUBLE
66503: EQUAL
66504: IFTRUE 66514
66506: LD_INT 10
66508: DOUBLE
66509: EQUAL
66510: IFTRUE 66514
66512: GO 66570
66514: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66515: LD_ADDR_VAR 0 9
66519: PUSH
66520: LD_VAR 0 41
66524: PUSH
66525: LD_VAR 0 42
66529: PUSH
66530: LD_VAR 0 43
66534: PUSH
66535: LD_VAR 0 44
66539: PUSH
66540: LD_VAR 0 45
66544: PUSH
66545: LD_VAR 0 46
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: LIST
66554: LIST
66555: LIST
66556: LIST
66557: PUSH
66558: LD_VAR 0 4
66562: PUSH
66563: LD_INT 1
66565: PLUS
66566: ARRAY
66567: ST_TO_ADDR
66568: GO 66823
66570: LD_INT 36
66572: DOUBLE
66573: EQUAL
66574: IFTRUE 66578
66576: GO 66634
66578: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66579: LD_ADDR_VAR 0 9
66583: PUSH
66584: LD_VAR 0 47
66588: PUSH
66589: LD_VAR 0 48
66593: PUSH
66594: LD_VAR 0 49
66598: PUSH
66599: LD_VAR 0 50
66603: PUSH
66604: LD_VAR 0 51
66608: PUSH
66609: LD_VAR 0 52
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: PUSH
66622: LD_VAR 0 4
66626: PUSH
66627: LD_INT 1
66629: PLUS
66630: ARRAY
66631: ST_TO_ADDR
66632: GO 66823
66634: LD_INT 4
66636: DOUBLE
66637: EQUAL
66638: IFTRUE 66660
66640: LD_INT 5
66642: DOUBLE
66643: EQUAL
66644: IFTRUE 66660
66646: LD_INT 34
66648: DOUBLE
66649: EQUAL
66650: IFTRUE 66660
66652: LD_INT 37
66654: DOUBLE
66655: EQUAL
66656: IFTRUE 66660
66658: GO 66716
66660: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66661: LD_ADDR_VAR 0 9
66665: PUSH
66666: LD_VAR 0 53
66670: PUSH
66671: LD_VAR 0 54
66675: PUSH
66676: LD_VAR 0 55
66680: PUSH
66681: LD_VAR 0 56
66685: PUSH
66686: LD_VAR 0 57
66690: PUSH
66691: LD_VAR 0 58
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: PUSH
66704: LD_VAR 0 4
66708: PUSH
66709: LD_INT 1
66711: PLUS
66712: ARRAY
66713: ST_TO_ADDR
66714: GO 66823
66716: LD_INT 31
66718: DOUBLE
66719: EQUAL
66720: IFTRUE 66766
66722: LD_INT 32
66724: DOUBLE
66725: EQUAL
66726: IFTRUE 66766
66728: LD_INT 33
66730: DOUBLE
66731: EQUAL
66732: IFTRUE 66766
66734: LD_INT 27
66736: DOUBLE
66737: EQUAL
66738: IFTRUE 66766
66740: LD_INT 26
66742: DOUBLE
66743: EQUAL
66744: IFTRUE 66766
66746: LD_INT 28
66748: DOUBLE
66749: EQUAL
66750: IFTRUE 66766
66752: LD_INT 29
66754: DOUBLE
66755: EQUAL
66756: IFTRUE 66766
66758: LD_INT 30
66760: DOUBLE
66761: EQUAL
66762: IFTRUE 66766
66764: GO 66822
66766: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66767: LD_ADDR_VAR 0 9
66771: PUSH
66772: LD_VAR 0 59
66776: PUSH
66777: LD_VAR 0 60
66781: PUSH
66782: LD_VAR 0 61
66786: PUSH
66787: LD_VAR 0 62
66791: PUSH
66792: LD_VAR 0 63
66796: PUSH
66797: LD_VAR 0 64
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: PUSH
66810: LD_VAR 0 4
66814: PUSH
66815: LD_INT 1
66817: PLUS
66818: ARRAY
66819: ST_TO_ADDR
66820: GO 66823
66822: POP
// temp_list2 = [ ] ;
66823: LD_ADDR_VAR 0 10
66827: PUSH
66828: EMPTY
66829: ST_TO_ADDR
// for i in temp_list do
66830: LD_ADDR_VAR 0 8
66834: PUSH
66835: LD_VAR 0 9
66839: PUSH
66840: FOR_IN
66841: IFFALSE 66893
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66843: LD_ADDR_VAR 0 10
66847: PUSH
66848: LD_VAR 0 10
66852: PUSH
66853: LD_VAR 0 8
66857: PUSH
66858: LD_INT 1
66860: ARRAY
66861: PUSH
66862: LD_VAR 0 2
66866: PLUS
66867: PUSH
66868: LD_VAR 0 8
66872: PUSH
66873: LD_INT 2
66875: ARRAY
66876: PUSH
66877: LD_VAR 0 3
66881: PLUS
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: EMPTY
66888: LIST
66889: ADD
66890: ST_TO_ADDR
66891: GO 66840
66893: POP
66894: POP
// result = temp_list2 ;
66895: LD_ADDR_VAR 0 7
66899: PUSH
66900: LD_VAR 0 10
66904: ST_TO_ADDR
// end ;
66905: LD_VAR 0 7
66909: RET
// export function EnemyInRange ( unit , dist ) ; begin
66910: LD_INT 0
66912: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66913: LD_ADDR_VAR 0 3
66917: PUSH
66918: LD_VAR 0 1
66922: PPUSH
66923: CALL_OW 255
66927: PPUSH
66928: LD_VAR 0 1
66932: PPUSH
66933: CALL_OW 250
66937: PPUSH
66938: LD_VAR 0 1
66942: PPUSH
66943: CALL_OW 251
66947: PPUSH
66948: LD_VAR 0 2
66952: PPUSH
66953: CALL 40305 0 4
66957: PUSH
66958: LD_INT 4
66960: ARRAY
66961: ST_TO_ADDR
// end ;
66962: LD_VAR 0 3
66966: RET
// export function PlayerSeeMe ( unit ) ; begin
66967: LD_INT 0
66969: PPUSH
// result := See ( your_side , unit ) ;
66970: LD_ADDR_VAR 0 2
66974: PUSH
66975: LD_OWVAR 2
66979: PPUSH
66980: LD_VAR 0 1
66984: PPUSH
66985: CALL_OW 292
66989: ST_TO_ADDR
// end ;
66990: LD_VAR 0 2
66994: RET
// export function ReverseDir ( unit ) ; begin
66995: LD_INT 0
66997: PPUSH
// if not unit then
66998: LD_VAR 0 1
67002: NOT
67003: IFFALSE 67007
// exit ;
67005: GO 67030
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67007: LD_ADDR_VAR 0 2
67011: PUSH
67012: LD_VAR 0 1
67016: PPUSH
67017: CALL_OW 254
67021: PUSH
67022: LD_INT 3
67024: PLUS
67025: PUSH
67026: LD_INT 6
67028: MOD
67029: ST_TO_ADDR
// end ;
67030: LD_VAR 0 2
67034: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
67035: LD_INT 0
67037: PPUSH
67038: PPUSH
67039: PPUSH
67040: PPUSH
67041: PPUSH
// if not hexes then
67042: LD_VAR 0 2
67046: NOT
67047: IFFALSE 67051
// exit ;
67049: GO 67199
// dist := 9999 ;
67051: LD_ADDR_VAR 0 5
67055: PUSH
67056: LD_INT 9999
67058: ST_TO_ADDR
// for i = 1 to hexes do
67059: LD_ADDR_VAR 0 4
67063: PUSH
67064: DOUBLE
67065: LD_INT 1
67067: DEC
67068: ST_TO_ADDR
67069: LD_VAR 0 2
67073: PUSH
67074: FOR_TO
67075: IFFALSE 67187
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
67077: LD_VAR 0 1
67081: PPUSH
67082: LD_VAR 0 2
67086: PUSH
67087: LD_VAR 0 4
67091: ARRAY
67092: PUSH
67093: LD_INT 1
67095: ARRAY
67096: PPUSH
67097: LD_VAR 0 2
67101: PUSH
67102: LD_VAR 0 4
67106: ARRAY
67107: PUSH
67108: LD_INT 2
67110: ARRAY
67111: PPUSH
67112: CALL_OW 297
67116: PUSH
67117: LD_VAR 0 5
67121: LESS
67122: IFFALSE 67185
// begin hex := hexes [ i ] ;
67124: LD_ADDR_VAR 0 7
67128: PUSH
67129: LD_VAR 0 2
67133: PUSH
67134: LD_VAR 0 4
67138: ARRAY
67139: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67140: LD_ADDR_VAR 0 5
67144: PUSH
67145: LD_VAR 0 1
67149: PPUSH
67150: LD_VAR 0 2
67154: PUSH
67155: LD_VAR 0 4
67159: ARRAY
67160: PUSH
67161: LD_INT 1
67163: ARRAY
67164: PPUSH
67165: LD_VAR 0 2
67169: PUSH
67170: LD_VAR 0 4
67174: ARRAY
67175: PUSH
67176: LD_INT 2
67178: ARRAY
67179: PPUSH
67180: CALL_OW 297
67184: ST_TO_ADDR
// end ; end ;
67185: GO 67074
67187: POP
67188: POP
// result := hex ;
67189: LD_ADDR_VAR 0 3
67193: PUSH
67194: LD_VAR 0 7
67198: ST_TO_ADDR
// end ;
67199: LD_VAR 0 3
67203: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67204: LD_INT 0
67206: PPUSH
67207: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67208: LD_VAR 0 1
67212: NOT
67213: PUSH
67214: LD_VAR 0 1
67218: PUSH
67219: LD_INT 21
67221: PUSH
67222: LD_INT 2
67224: PUSH
67225: EMPTY
67226: LIST
67227: LIST
67228: PUSH
67229: LD_INT 23
67231: PUSH
67232: LD_INT 2
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PPUSH
67243: CALL_OW 69
67247: IN
67248: NOT
67249: OR
67250: IFFALSE 67254
// exit ;
67252: GO 67301
// for i = 1 to 3 do
67254: LD_ADDR_VAR 0 3
67258: PUSH
67259: DOUBLE
67260: LD_INT 1
67262: DEC
67263: ST_TO_ADDR
67264: LD_INT 3
67266: PUSH
67267: FOR_TO
67268: IFFALSE 67299
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67270: LD_VAR 0 1
67274: PPUSH
67275: CALL_OW 250
67279: PPUSH
67280: LD_VAR 0 1
67284: PPUSH
67285: CALL_OW 251
67289: PPUSH
67290: LD_INT 1
67292: PPUSH
67293: CALL_OW 453
67297: GO 67267
67299: POP
67300: POP
// end ;
67301: LD_VAR 0 2
67305: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67306: LD_INT 0
67308: PPUSH
67309: PPUSH
67310: PPUSH
67311: PPUSH
67312: PPUSH
67313: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
67314: LD_VAR 0 1
67318: NOT
67319: PUSH
67320: LD_VAR 0 2
67324: NOT
67325: OR
67326: PUSH
67327: LD_VAR 0 1
67331: PPUSH
67332: CALL_OW 314
67336: OR
67337: IFFALSE 67341
// exit ;
67339: GO 67782
// x := GetX ( enemy_unit ) ;
67341: LD_ADDR_VAR 0 7
67345: PUSH
67346: LD_VAR 0 2
67350: PPUSH
67351: CALL_OW 250
67355: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67356: LD_ADDR_VAR 0 8
67360: PUSH
67361: LD_VAR 0 2
67365: PPUSH
67366: CALL_OW 251
67370: ST_TO_ADDR
// if not x or not y then
67371: LD_VAR 0 7
67375: NOT
67376: PUSH
67377: LD_VAR 0 8
67381: NOT
67382: OR
67383: IFFALSE 67387
// exit ;
67385: GO 67782
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67387: LD_ADDR_VAR 0 6
67391: PUSH
67392: LD_VAR 0 7
67396: PPUSH
67397: LD_INT 0
67399: PPUSH
67400: LD_INT 4
67402: PPUSH
67403: CALL_OW 272
67407: PUSH
67408: LD_VAR 0 8
67412: PPUSH
67413: LD_INT 0
67415: PPUSH
67416: LD_INT 4
67418: PPUSH
67419: CALL_OW 273
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_VAR 0 7
67432: PPUSH
67433: LD_INT 1
67435: PPUSH
67436: LD_INT 4
67438: PPUSH
67439: CALL_OW 272
67443: PUSH
67444: LD_VAR 0 8
67448: PPUSH
67449: LD_INT 1
67451: PPUSH
67452: LD_INT 4
67454: PPUSH
67455: CALL_OW 273
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: PUSH
67464: LD_VAR 0 7
67468: PPUSH
67469: LD_INT 2
67471: PPUSH
67472: LD_INT 4
67474: PPUSH
67475: CALL_OW 272
67479: PUSH
67480: LD_VAR 0 8
67484: PPUSH
67485: LD_INT 2
67487: PPUSH
67488: LD_INT 4
67490: PPUSH
67491: CALL_OW 273
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: PUSH
67500: LD_VAR 0 7
67504: PPUSH
67505: LD_INT 3
67507: PPUSH
67508: LD_INT 4
67510: PPUSH
67511: CALL_OW 272
67515: PUSH
67516: LD_VAR 0 8
67520: PPUSH
67521: LD_INT 3
67523: PPUSH
67524: LD_INT 4
67526: PPUSH
67527: CALL_OW 273
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_VAR 0 7
67540: PPUSH
67541: LD_INT 4
67543: PPUSH
67544: LD_INT 4
67546: PPUSH
67547: CALL_OW 272
67551: PUSH
67552: LD_VAR 0 8
67556: PPUSH
67557: LD_INT 4
67559: PPUSH
67560: LD_INT 4
67562: PPUSH
67563: CALL_OW 273
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: LD_VAR 0 7
67576: PPUSH
67577: LD_INT 5
67579: PPUSH
67580: LD_INT 4
67582: PPUSH
67583: CALL_OW 272
67587: PUSH
67588: LD_VAR 0 8
67592: PPUSH
67593: LD_INT 5
67595: PPUSH
67596: LD_INT 4
67598: PPUSH
67599: CALL_OW 273
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: LIST
67612: LIST
67613: LIST
67614: LIST
67615: ST_TO_ADDR
// for i = tmp downto 1 do
67616: LD_ADDR_VAR 0 4
67620: PUSH
67621: DOUBLE
67622: LD_VAR 0 6
67626: INC
67627: ST_TO_ADDR
67628: LD_INT 1
67630: PUSH
67631: FOR_DOWNTO
67632: IFFALSE 67733
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67634: LD_VAR 0 6
67638: PUSH
67639: LD_VAR 0 4
67643: ARRAY
67644: PUSH
67645: LD_INT 1
67647: ARRAY
67648: PPUSH
67649: LD_VAR 0 6
67653: PUSH
67654: LD_VAR 0 4
67658: ARRAY
67659: PUSH
67660: LD_INT 2
67662: ARRAY
67663: PPUSH
67664: CALL_OW 488
67668: NOT
67669: PUSH
67670: LD_VAR 0 6
67674: PUSH
67675: LD_VAR 0 4
67679: ARRAY
67680: PUSH
67681: LD_INT 1
67683: ARRAY
67684: PPUSH
67685: LD_VAR 0 6
67689: PUSH
67690: LD_VAR 0 4
67694: ARRAY
67695: PUSH
67696: LD_INT 2
67698: ARRAY
67699: PPUSH
67700: CALL_OW 428
67704: PUSH
67705: LD_INT 0
67707: NONEQUAL
67708: OR
67709: IFFALSE 67731
// tmp := Delete ( tmp , i ) ;
67711: LD_ADDR_VAR 0 6
67715: PUSH
67716: LD_VAR 0 6
67720: PPUSH
67721: LD_VAR 0 4
67725: PPUSH
67726: CALL_OW 3
67730: ST_TO_ADDR
67731: GO 67631
67733: POP
67734: POP
// j := GetClosestHex ( unit , tmp ) ;
67735: LD_ADDR_VAR 0 5
67739: PUSH
67740: LD_VAR 0 1
67744: PPUSH
67745: LD_VAR 0 6
67749: PPUSH
67750: CALL 67035 0 2
67754: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67755: LD_VAR 0 1
67759: PPUSH
67760: LD_VAR 0 5
67764: PUSH
67765: LD_INT 1
67767: ARRAY
67768: PPUSH
67769: LD_VAR 0 5
67773: PUSH
67774: LD_INT 2
67776: ARRAY
67777: PPUSH
67778: CALL_OW 111
// end ;
67782: LD_VAR 0 3
67786: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67787: LD_INT 0
67789: PPUSH
67790: PPUSH
67791: PPUSH
// uc_side = 0 ;
67792: LD_ADDR_OWVAR 20
67796: PUSH
67797: LD_INT 0
67799: ST_TO_ADDR
// uc_nation = 0 ;
67800: LD_ADDR_OWVAR 21
67804: PUSH
67805: LD_INT 0
67807: ST_TO_ADDR
// InitHc_All ( ) ;
67808: CALL_OW 584
// InitVc ;
67812: CALL_OW 20
// if mastodonts then
67816: LD_VAR 0 6
67820: IFFALSE 67887
// for i = 1 to mastodonts do
67822: LD_ADDR_VAR 0 11
67826: PUSH
67827: DOUBLE
67828: LD_INT 1
67830: DEC
67831: ST_TO_ADDR
67832: LD_VAR 0 6
67836: PUSH
67837: FOR_TO
67838: IFFALSE 67885
// begin vc_chassis := 31 ;
67840: LD_ADDR_OWVAR 37
67844: PUSH
67845: LD_INT 31
67847: ST_TO_ADDR
// vc_control := control_rider ;
67848: LD_ADDR_OWVAR 38
67852: PUSH
67853: LD_INT 4
67855: ST_TO_ADDR
// animal := CreateVehicle ;
67856: LD_ADDR_VAR 0 12
67860: PUSH
67861: CALL_OW 45
67865: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67866: LD_VAR 0 12
67870: PPUSH
67871: LD_VAR 0 8
67875: PPUSH
67876: LD_INT 0
67878: PPUSH
67879: CALL 70075 0 3
// end ;
67883: GO 67837
67885: POP
67886: POP
// if horses then
67887: LD_VAR 0 5
67891: IFFALSE 67958
// for i = 1 to horses do
67893: LD_ADDR_VAR 0 11
67897: PUSH
67898: DOUBLE
67899: LD_INT 1
67901: DEC
67902: ST_TO_ADDR
67903: LD_VAR 0 5
67907: PUSH
67908: FOR_TO
67909: IFFALSE 67956
// begin hc_class := 21 ;
67911: LD_ADDR_OWVAR 28
67915: PUSH
67916: LD_INT 21
67918: ST_TO_ADDR
// hc_gallery :=  ;
67919: LD_ADDR_OWVAR 33
67923: PUSH
67924: LD_STRING 
67926: ST_TO_ADDR
// animal := CreateHuman ;
67927: LD_ADDR_VAR 0 12
67931: PUSH
67932: CALL_OW 44
67936: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67937: LD_VAR 0 12
67941: PPUSH
67942: LD_VAR 0 8
67946: PPUSH
67947: LD_INT 0
67949: PPUSH
67950: CALL 70075 0 3
// end ;
67954: GO 67908
67956: POP
67957: POP
// if birds then
67958: LD_VAR 0 1
67962: IFFALSE 68029
// for i = 1 to birds do
67964: LD_ADDR_VAR 0 11
67968: PUSH
67969: DOUBLE
67970: LD_INT 1
67972: DEC
67973: ST_TO_ADDR
67974: LD_VAR 0 1
67978: PUSH
67979: FOR_TO
67980: IFFALSE 68027
// begin hc_class = 18 ;
67982: LD_ADDR_OWVAR 28
67986: PUSH
67987: LD_INT 18
67989: ST_TO_ADDR
// hc_gallery =  ;
67990: LD_ADDR_OWVAR 33
67994: PUSH
67995: LD_STRING 
67997: ST_TO_ADDR
// animal := CreateHuman ;
67998: LD_ADDR_VAR 0 12
68002: PUSH
68003: CALL_OW 44
68007: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68008: LD_VAR 0 12
68012: PPUSH
68013: LD_VAR 0 8
68017: PPUSH
68018: LD_INT 0
68020: PPUSH
68021: CALL 70075 0 3
// end ;
68025: GO 67979
68027: POP
68028: POP
// if tigers then
68029: LD_VAR 0 2
68033: IFFALSE 68117
// for i = 1 to tigers do
68035: LD_ADDR_VAR 0 11
68039: PUSH
68040: DOUBLE
68041: LD_INT 1
68043: DEC
68044: ST_TO_ADDR
68045: LD_VAR 0 2
68049: PUSH
68050: FOR_TO
68051: IFFALSE 68115
// begin hc_class = class_tiger ;
68053: LD_ADDR_OWVAR 28
68057: PUSH
68058: LD_INT 14
68060: ST_TO_ADDR
// hc_gallery =  ;
68061: LD_ADDR_OWVAR 33
68065: PUSH
68066: LD_STRING 
68068: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68069: LD_ADDR_OWVAR 35
68073: PUSH
68074: LD_INT 7
68076: NEG
68077: PPUSH
68078: LD_INT 7
68080: PPUSH
68081: CALL_OW 12
68085: ST_TO_ADDR
// animal := CreateHuman ;
68086: LD_ADDR_VAR 0 12
68090: PUSH
68091: CALL_OW 44
68095: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68096: LD_VAR 0 12
68100: PPUSH
68101: LD_VAR 0 8
68105: PPUSH
68106: LD_INT 0
68108: PPUSH
68109: CALL 70075 0 3
// end ;
68113: GO 68050
68115: POP
68116: POP
// if apemans then
68117: LD_VAR 0 3
68121: IFFALSE 68244
// for i = 1 to apemans do
68123: LD_ADDR_VAR 0 11
68127: PUSH
68128: DOUBLE
68129: LD_INT 1
68131: DEC
68132: ST_TO_ADDR
68133: LD_VAR 0 3
68137: PUSH
68138: FOR_TO
68139: IFFALSE 68242
// begin hc_class = class_apeman ;
68141: LD_ADDR_OWVAR 28
68145: PUSH
68146: LD_INT 12
68148: ST_TO_ADDR
// hc_gallery =  ;
68149: LD_ADDR_OWVAR 33
68153: PUSH
68154: LD_STRING 
68156: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
68157: LD_ADDR_OWVAR 35
68161: PUSH
68162: LD_INT 2
68164: NEG
68165: PPUSH
68166: LD_INT 2
68168: PPUSH
68169: CALL_OW 12
68173: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68174: LD_ADDR_OWVAR 31
68178: PUSH
68179: LD_INT 1
68181: PPUSH
68182: LD_INT 3
68184: PPUSH
68185: CALL_OW 12
68189: PUSH
68190: LD_INT 1
68192: PPUSH
68193: LD_INT 3
68195: PPUSH
68196: CALL_OW 12
68200: PUSH
68201: LD_INT 0
68203: PUSH
68204: LD_INT 0
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: LIST
68211: LIST
68212: ST_TO_ADDR
// animal := CreateHuman ;
68213: LD_ADDR_VAR 0 12
68217: PUSH
68218: CALL_OW 44
68222: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68223: LD_VAR 0 12
68227: PPUSH
68228: LD_VAR 0 8
68232: PPUSH
68233: LD_INT 0
68235: PPUSH
68236: CALL 70075 0 3
// end ;
68240: GO 68138
68242: POP
68243: POP
// if enchidnas then
68244: LD_VAR 0 4
68248: IFFALSE 68315
// for i = 1 to enchidnas do
68250: LD_ADDR_VAR 0 11
68254: PUSH
68255: DOUBLE
68256: LD_INT 1
68258: DEC
68259: ST_TO_ADDR
68260: LD_VAR 0 4
68264: PUSH
68265: FOR_TO
68266: IFFALSE 68313
// begin hc_class = 13 ;
68268: LD_ADDR_OWVAR 28
68272: PUSH
68273: LD_INT 13
68275: ST_TO_ADDR
// hc_gallery =  ;
68276: LD_ADDR_OWVAR 33
68280: PUSH
68281: LD_STRING 
68283: ST_TO_ADDR
// animal := CreateHuman ;
68284: LD_ADDR_VAR 0 12
68288: PUSH
68289: CALL_OW 44
68293: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68294: LD_VAR 0 12
68298: PPUSH
68299: LD_VAR 0 8
68303: PPUSH
68304: LD_INT 0
68306: PPUSH
68307: CALL 70075 0 3
// end ;
68311: GO 68265
68313: POP
68314: POP
// if fishes then
68315: LD_VAR 0 7
68319: IFFALSE 68386
// for i = 1 to fishes do
68321: LD_ADDR_VAR 0 11
68325: PUSH
68326: DOUBLE
68327: LD_INT 1
68329: DEC
68330: ST_TO_ADDR
68331: LD_VAR 0 7
68335: PUSH
68336: FOR_TO
68337: IFFALSE 68384
// begin hc_class = 20 ;
68339: LD_ADDR_OWVAR 28
68343: PUSH
68344: LD_INT 20
68346: ST_TO_ADDR
// hc_gallery =  ;
68347: LD_ADDR_OWVAR 33
68351: PUSH
68352: LD_STRING 
68354: ST_TO_ADDR
// animal := CreateHuman ;
68355: LD_ADDR_VAR 0 12
68359: PUSH
68360: CALL_OW 44
68364: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68365: LD_VAR 0 12
68369: PPUSH
68370: LD_VAR 0 9
68374: PPUSH
68375: LD_INT 0
68377: PPUSH
68378: CALL 70075 0 3
// end ;
68382: GO 68336
68384: POP
68385: POP
// end ;
68386: LD_VAR 0 10
68390: RET
// export function WantHeal ( sci , unit ) ; begin
68391: LD_INT 0
68393: PPUSH
// if GetTaskList ( sci ) > 0 then
68394: LD_VAR 0 1
68398: PPUSH
68399: CALL_OW 437
68403: PUSH
68404: LD_INT 0
68406: GREATER
68407: IFFALSE 68477
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68409: LD_VAR 0 1
68413: PPUSH
68414: CALL_OW 437
68418: PUSH
68419: LD_INT 1
68421: ARRAY
68422: PUSH
68423: LD_INT 1
68425: ARRAY
68426: PUSH
68427: LD_STRING l
68429: EQUAL
68430: PUSH
68431: LD_VAR 0 1
68435: PPUSH
68436: CALL_OW 437
68440: PUSH
68441: LD_INT 1
68443: ARRAY
68444: PUSH
68445: LD_INT 4
68447: ARRAY
68448: PUSH
68449: LD_VAR 0 2
68453: EQUAL
68454: AND
68455: IFFALSE 68467
// result := true else
68457: LD_ADDR_VAR 0 3
68461: PUSH
68462: LD_INT 1
68464: ST_TO_ADDR
68465: GO 68475
// result := false ;
68467: LD_ADDR_VAR 0 3
68471: PUSH
68472: LD_INT 0
68474: ST_TO_ADDR
// end else
68475: GO 68485
// result := false ;
68477: LD_ADDR_VAR 0 3
68481: PUSH
68482: LD_INT 0
68484: ST_TO_ADDR
// end ;
68485: LD_VAR 0 3
68489: RET
// export function HealTarget ( sci ) ; begin
68490: LD_INT 0
68492: PPUSH
// if not sci then
68493: LD_VAR 0 1
68497: NOT
68498: IFFALSE 68502
// exit ;
68500: GO 68567
// result := 0 ;
68502: LD_ADDR_VAR 0 2
68506: PUSH
68507: LD_INT 0
68509: ST_TO_ADDR
// if GetTaskList ( sci ) then
68510: LD_VAR 0 1
68514: PPUSH
68515: CALL_OW 437
68519: IFFALSE 68567
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
68521: LD_VAR 0 1
68525: PPUSH
68526: CALL_OW 437
68530: PUSH
68531: LD_INT 1
68533: ARRAY
68534: PUSH
68535: LD_INT 1
68537: ARRAY
68538: PUSH
68539: LD_STRING l
68541: EQUAL
68542: IFFALSE 68567
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
68544: LD_ADDR_VAR 0 2
68548: PUSH
68549: LD_VAR 0 1
68553: PPUSH
68554: CALL_OW 437
68558: PUSH
68559: LD_INT 1
68561: ARRAY
68562: PUSH
68563: LD_INT 4
68565: ARRAY
68566: ST_TO_ADDR
// end ;
68567: LD_VAR 0 2
68571: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
68572: LD_INT 0
68574: PPUSH
68575: PPUSH
68576: PPUSH
68577: PPUSH
// if not base_units then
68578: LD_VAR 0 1
68582: NOT
68583: IFFALSE 68587
// exit ;
68585: GO 68674
// result := false ;
68587: LD_ADDR_VAR 0 2
68591: PUSH
68592: LD_INT 0
68594: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
68595: LD_ADDR_VAR 0 5
68599: PUSH
68600: LD_VAR 0 1
68604: PPUSH
68605: LD_INT 21
68607: PUSH
68608: LD_INT 3
68610: PUSH
68611: EMPTY
68612: LIST
68613: LIST
68614: PPUSH
68615: CALL_OW 72
68619: ST_TO_ADDR
// if not tmp then
68620: LD_VAR 0 5
68624: NOT
68625: IFFALSE 68629
// exit ;
68627: GO 68674
// for i in tmp do
68629: LD_ADDR_VAR 0 3
68633: PUSH
68634: LD_VAR 0 5
68638: PUSH
68639: FOR_IN
68640: IFFALSE 68672
// begin result := EnemyInRange ( i , 22 ) ;
68642: LD_ADDR_VAR 0 2
68646: PUSH
68647: LD_VAR 0 3
68651: PPUSH
68652: LD_INT 22
68654: PPUSH
68655: CALL 66910 0 2
68659: ST_TO_ADDR
// if result then
68660: LD_VAR 0 2
68664: IFFALSE 68670
// exit ;
68666: POP
68667: POP
68668: GO 68674
// end ;
68670: GO 68639
68672: POP
68673: POP
// end ;
68674: LD_VAR 0 2
68678: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
68679: LD_INT 0
68681: PPUSH
68682: PPUSH
// if not units then
68683: LD_VAR 0 1
68687: NOT
68688: IFFALSE 68692
// exit ;
68690: GO 68762
// result := [ ] ;
68692: LD_ADDR_VAR 0 3
68696: PUSH
68697: EMPTY
68698: ST_TO_ADDR
// for i in units do
68699: LD_ADDR_VAR 0 4
68703: PUSH
68704: LD_VAR 0 1
68708: PUSH
68709: FOR_IN
68710: IFFALSE 68760
// if GetTag ( i ) = tag then
68712: LD_VAR 0 4
68716: PPUSH
68717: CALL_OW 110
68721: PUSH
68722: LD_VAR 0 2
68726: EQUAL
68727: IFFALSE 68758
// result := Insert ( result , result + 1 , i ) ;
68729: LD_ADDR_VAR 0 3
68733: PUSH
68734: LD_VAR 0 3
68738: PPUSH
68739: LD_VAR 0 3
68743: PUSH
68744: LD_INT 1
68746: PLUS
68747: PPUSH
68748: LD_VAR 0 4
68752: PPUSH
68753: CALL_OW 2
68757: ST_TO_ADDR
68758: GO 68709
68760: POP
68761: POP
// end ;
68762: LD_VAR 0 3
68766: RET
// export function IsDriver ( un ) ; begin
68767: LD_INT 0
68769: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
68770: LD_ADDR_VAR 0 2
68774: PUSH
68775: LD_VAR 0 1
68779: PUSH
68780: LD_INT 55
68782: PUSH
68783: EMPTY
68784: LIST
68785: PPUSH
68786: CALL_OW 69
68790: IN
68791: ST_TO_ADDR
// end ;
68792: LD_VAR 0 2
68796: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
68797: LD_INT 0
68799: PPUSH
68800: PPUSH
// list := [ ] ;
68801: LD_ADDR_VAR 0 5
68805: PUSH
68806: EMPTY
68807: ST_TO_ADDR
// case d of 0 :
68808: LD_VAR 0 3
68812: PUSH
68813: LD_INT 0
68815: DOUBLE
68816: EQUAL
68817: IFTRUE 68821
68819: GO 68954
68821: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
68822: LD_ADDR_VAR 0 5
68826: PUSH
68827: LD_VAR 0 1
68831: PUSH
68832: LD_INT 4
68834: MINUS
68835: PUSH
68836: LD_VAR 0 2
68840: PUSH
68841: LD_INT 4
68843: MINUS
68844: PUSH
68845: LD_INT 2
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: LIST
68852: PUSH
68853: LD_VAR 0 1
68857: PUSH
68858: LD_INT 3
68860: MINUS
68861: PUSH
68862: LD_VAR 0 2
68866: PUSH
68867: LD_INT 1
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: LIST
68874: PUSH
68875: LD_VAR 0 1
68879: PUSH
68880: LD_INT 4
68882: PLUS
68883: PUSH
68884: LD_VAR 0 2
68888: PUSH
68889: LD_INT 4
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: LIST
68896: PUSH
68897: LD_VAR 0 1
68901: PUSH
68902: LD_INT 3
68904: PLUS
68905: PUSH
68906: LD_VAR 0 2
68910: PUSH
68911: LD_INT 3
68913: PLUS
68914: PUSH
68915: LD_INT 5
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: LIST
68922: PUSH
68923: LD_VAR 0 1
68927: PUSH
68928: LD_VAR 0 2
68932: PUSH
68933: LD_INT 4
68935: PLUS
68936: PUSH
68937: LD_INT 0
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: LIST
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: ST_TO_ADDR
// end ; 1 :
68952: GO 69652
68954: LD_INT 1
68956: DOUBLE
68957: EQUAL
68958: IFTRUE 68962
68960: GO 69095
68962: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68963: LD_ADDR_VAR 0 5
68967: PUSH
68968: LD_VAR 0 1
68972: PUSH
68973: LD_VAR 0 2
68977: PUSH
68978: LD_INT 4
68980: MINUS
68981: PUSH
68982: LD_INT 3
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: LIST
68989: PUSH
68990: LD_VAR 0 1
68994: PUSH
68995: LD_INT 3
68997: MINUS
68998: PUSH
68999: LD_VAR 0 2
69003: PUSH
69004: LD_INT 3
69006: MINUS
69007: PUSH
69008: LD_INT 2
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: LIST
69015: PUSH
69016: LD_VAR 0 1
69020: PUSH
69021: LD_INT 4
69023: MINUS
69024: PUSH
69025: LD_VAR 0 2
69029: PUSH
69030: LD_INT 1
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: LIST
69037: PUSH
69038: LD_VAR 0 1
69042: PUSH
69043: LD_VAR 0 2
69047: PUSH
69048: LD_INT 3
69050: PLUS
69051: PUSH
69052: LD_INT 0
69054: PUSH
69055: EMPTY
69056: LIST
69057: LIST
69058: LIST
69059: PUSH
69060: LD_VAR 0 1
69064: PUSH
69065: LD_INT 4
69067: PLUS
69068: PUSH
69069: LD_VAR 0 2
69073: PUSH
69074: LD_INT 4
69076: PLUS
69077: PUSH
69078: LD_INT 5
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: LIST
69085: PUSH
69086: EMPTY
69087: LIST
69088: LIST
69089: LIST
69090: LIST
69091: LIST
69092: ST_TO_ADDR
// end ; 2 :
69093: GO 69652
69095: LD_INT 2
69097: DOUBLE
69098: EQUAL
69099: IFTRUE 69103
69101: GO 69232
69103: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69104: LD_ADDR_VAR 0 5
69108: PUSH
69109: LD_VAR 0 1
69113: PUSH
69114: LD_VAR 0 2
69118: PUSH
69119: LD_INT 3
69121: MINUS
69122: PUSH
69123: LD_INT 3
69125: PUSH
69126: EMPTY
69127: LIST
69128: LIST
69129: LIST
69130: PUSH
69131: LD_VAR 0 1
69135: PUSH
69136: LD_INT 4
69138: PLUS
69139: PUSH
69140: LD_VAR 0 2
69144: PUSH
69145: LD_INT 4
69147: PUSH
69148: EMPTY
69149: LIST
69150: LIST
69151: LIST
69152: PUSH
69153: LD_VAR 0 1
69157: PUSH
69158: LD_VAR 0 2
69162: PUSH
69163: LD_INT 4
69165: PLUS
69166: PUSH
69167: LD_INT 0
69169: PUSH
69170: EMPTY
69171: LIST
69172: LIST
69173: LIST
69174: PUSH
69175: LD_VAR 0 1
69179: PUSH
69180: LD_INT 3
69182: MINUS
69183: PUSH
69184: LD_VAR 0 2
69188: PUSH
69189: LD_INT 1
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: LIST
69196: PUSH
69197: LD_VAR 0 1
69201: PUSH
69202: LD_INT 4
69204: MINUS
69205: PUSH
69206: LD_VAR 0 2
69210: PUSH
69211: LD_INT 4
69213: MINUS
69214: PUSH
69215: LD_INT 2
69217: PUSH
69218: EMPTY
69219: LIST
69220: LIST
69221: LIST
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: ST_TO_ADDR
// end ; 3 :
69230: GO 69652
69232: LD_INT 3
69234: DOUBLE
69235: EQUAL
69236: IFTRUE 69240
69238: GO 69373
69240: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69241: LD_ADDR_VAR 0 5
69245: PUSH
69246: LD_VAR 0 1
69250: PUSH
69251: LD_INT 3
69253: PLUS
69254: PUSH
69255: LD_VAR 0 2
69259: PUSH
69260: LD_INT 4
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: LIST
69267: PUSH
69268: LD_VAR 0 1
69272: PUSH
69273: LD_INT 4
69275: PLUS
69276: PUSH
69277: LD_VAR 0 2
69281: PUSH
69282: LD_INT 4
69284: PLUS
69285: PUSH
69286: LD_INT 5
69288: PUSH
69289: EMPTY
69290: LIST
69291: LIST
69292: LIST
69293: PUSH
69294: LD_VAR 0 1
69298: PUSH
69299: LD_INT 4
69301: MINUS
69302: PUSH
69303: LD_VAR 0 2
69307: PUSH
69308: LD_INT 1
69310: PUSH
69311: EMPTY
69312: LIST
69313: LIST
69314: LIST
69315: PUSH
69316: LD_VAR 0 1
69320: PUSH
69321: LD_VAR 0 2
69325: PUSH
69326: LD_INT 4
69328: MINUS
69329: PUSH
69330: LD_INT 3
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: LIST
69337: PUSH
69338: LD_VAR 0 1
69342: PUSH
69343: LD_INT 3
69345: MINUS
69346: PUSH
69347: LD_VAR 0 2
69351: PUSH
69352: LD_INT 3
69354: MINUS
69355: PUSH
69356: LD_INT 2
69358: PUSH
69359: EMPTY
69360: LIST
69361: LIST
69362: LIST
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: LIST
69368: LIST
69369: LIST
69370: ST_TO_ADDR
// end ; 4 :
69371: GO 69652
69373: LD_INT 4
69375: DOUBLE
69376: EQUAL
69377: IFTRUE 69381
69379: GO 69514
69381: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69382: LD_ADDR_VAR 0 5
69386: PUSH
69387: LD_VAR 0 1
69391: PUSH
69392: LD_VAR 0 2
69396: PUSH
69397: LD_INT 4
69399: PLUS
69400: PUSH
69401: LD_INT 0
69403: PUSH
69404: EMPTY
69405: LIST
69406: LIST
69407: LIST
69408: PUSH
69409: LD_VAR 0 1
69413: PUSH
69414: LD_INT 3
69416: PLUS
69417: PUSH
69418: LD_VAR 0 2
69422: PUSH
69423: LD_INT 3
69425: PLUS
69426: PUSH
69427: LD_INT 5
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: LIST
69434: PUSH
69435: LD_VAR 0 1
69439: PUSH
69440: LD_INT 4
69442: PLUS
69443: PUSH
69444: LD_VAR 0 2
69448: PUSH
69449: LD_INT 4
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: LIST
69456: PUSH
69457: LD_VAR 0 1
69461: PUSH
69462: LD_VAR 0 2
69466: PUSH
69467: LD_INT 3
69469: MINUS
69470: PUSH
69471: LD_INT 3
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: LIST
69478: PUSH
69479: LD_VAR 0 1
69483: PUSH
69484: LD_INT 4
69486: MINUS
69487: PUSH
69488: LD_VAR 0 2
69492: PUSH
69493: LD_INT 4
69495: MINUS
69496: PUSH
69497: LD_INT 2
69499: PUSH
69500: EMPTY
69501: LIST
69502: LIST
69503: LIST
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: LIST
69509: LIST
69510: LIST
69511: ST_TO_ADDR
// end ; 5 :
69512: GO 69652
69514: LD_INT 5
69516: DOUBLE
69517: EQUAL
69518: IFTRUE 69522
69520: GO 69651
69522: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
69523: LD_ADDR_VAR 0 5
69527: PUSH
69528: LD_VAR 0 1
69532: PUSH
69533: LD_INT 4
69535: MINUS
69536: PUSH
69537: LD_VAR 0 2
69541: PUSH
69542: LD_INT 1
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: LIST
69549: PUSH
69550: LD_VAR 0 1
69554: PUSH
69555: LD_VAR 0 2
69559: PUSH
69560: LD_INT 4
69562: MINUS
69563: PUSH
69564: LD_INT 3
69566: PUSH
69567: EMPTY
69568: LIST
69569: LIST
69570: LIST
69571: PUSH
69572: LD_VAR 0 1
69576: PUSH
69577: LD_INT 4
69579: PLUS
69580: PUSH
69581: LD_VAR 0 2
69585: PUSH
69586: LD_INT 4
69588: PLUS
69589: PUSH
69590: LD_INT 5
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: LIST
69597: PUSH
69598: LD_VAR 0 1
69602: PUSH
69603: LD_INT 3
69605: PLUS
69606: PUSH
69607: LD_VAR 0 2
69611: PUSH
69612: LD_INT 4
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: LIST
69619: PUSH
69620: LD_VAR 0 1
69624: PUSH
69625: LD_VAR 0 2
69629: PUSH
69630: LD_INT 3
69632: PLUS
69633: PUSH
69634: LD_INT 0
69636: PUSH
69637: EMPTY
69638: LIST
69639: LIST
69640: LIST
69641: PUSH
69642: EMPTY
69643: LIST
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: ST_TO_ADDR
// end ; end ;
69649: GO 69652
69651: POP
// result := list ;
69652: LD_ADDR_VAR 0 4
69656: PUSH
69657: LD_VAR 0 5
69661: ST_TO_ADDR
// end ;
69662: LD_VAR 0 4
69666: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
69667: LD_INT 0
69669: PPUSH
69670: PPUSH
69671: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
69672: LD_VAR 0 1
69676: NOT
69677: PUSH
69678: LD_VAR 0 2
69682: PUSH
69683: LD_INT 1
69685: PUSH
69686: LD_INT 2
69688: PUSH
69689: LD_INT 3
69691: PUSH
69692: LD_INT 4
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: LIST
69699: LIST
69700: IN
69701: NOT
69702: OR
69703: IFFALSE 69707
// exit ;
69705: GO 69799
// tmp := [ ] ;
69707: LD_ADDR_VAR 0 5
69711: PUSH
69712: EMPTY
69713: ST_TO_ADDR
// for i in units do
69714: LD_ADDR_VAR 0 4
69718: PUSH
69719: LD_VAR 0 1
69723: PUSH
69724: FOR_IN
69725: IFFALSE 69768
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
69727: LD_ADDR_VAR 0 5
69731: PUSH
69732: LD_VAR 0 5
69736: PPUSH
69737: LD_VAR 0 5
69741: PUSH
69742: LD_INT 1
69744: PLUS
69745: PPUSH
69746: LD_VAR 0 4
69750: PPUSH
69751: LD_VAR 0 2
69755: PPUSH
69756: CALL_OW 259
69760: PPUSH
69761: CALL_OW 2
69765: ST_TO_ADDR
69766: GO 69724
69768: POP
69769: POP
// if not tmp then
69770: LD_VAR 0 5
69774: NOT
69775: IFFALSE 69779
// exit ;
69777: GO 69799
// result := SortListByListDesc ( units , tmp ) ;
69779: LD_ADDR_VAR 0 3
69783: PUSH
69784: LD_VAR 0 1
69788: PPUSH
69789: LD_VAR 0 5
69793: PPUSH
69794: CALL_OW 77
69798: ST_TO_ADDR
// end ;
69799: LD_VAR 0 3
69803: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
69804: LD_INT 0
69806: PPUSH
69807: PPUSH
69808: PPUSH
// result := false ;
69809: LD_ADDR_VAR 0 3
69813: PUSH
69814: LD_INT 0
69816: ST_TO_ADDR
// x := GetX ( building ) ;
69817: LD_ADDR_VAR 0 4
69821: PUSH
69822: LD_VAR 0 2
69826: PPUSH
69827: CALL_OW 250
69831: ST_TO_ADDR
// y := GetY ( building ) ;
69832: LD_ADDR_VAR 0 5
69836: PUSH
69837: LD_VAR 0 2
69841: PPUSH
69842: CALL_OW 251
69846: ST_TO_ADDR
// if not building or not x or not y then
69847: LD_VAR 0 2
69851: NOT
69852: PUSH
69853: LD_VAR 0 4
69857: NOT
69858: OR
69859: PUSH
69860: LD_VAR 0 5
69864: NOT
69865: OR
69866: IFFALSE 69870
// exit ;
69868: GO 69962
// if GetTaskList ( unit ) then
69870: LD_VAR 0 1
69874: PPUSH
69875: CALL_OW 437
69879: IFFALSE 69962
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69881: LD_STRING e
69883: PUSH
69884: LD_VAR 0 1
69888: PPUSH
69889: CALL_OW 437
69893: PUSH
69894: LD_INT 1
69896: ARRAY
69897: PUSH
69898: LD_INT 1
69900: ARRAY
69901: EQUAL
69902: PUSH
69903: LD_VAR 0 4
69907: PUSH
69908: LD_VAR 0 1
69912: PPUSH
69913: CALL_OW 437
69917: PUSH
69918: LD_INT 1
69920: ARRAY
69921: PUSH
69922: LD_INT 2
69924: ARRAY
69925: EQUAL
69926: AND
69927: PUSH
69928: LD_VAR 0 5
69932: PUSH
69933: LD_VAR 0 1
69937: PPUSH
69938: CALL_OW 437
69942: PUSH
69943: LD_INT 1
69945: ARRAY
69946: PUSH
69947: LD_INT 3
69949: ARRAY
69950: EQUAL
69951: AND
69952: IFFALSE 69962
// result := true end ;
69954: LD_ADDR_VAR 0 3
69958: PUSH
69959: LD_INT 1
69961: ST_TO_ADDR
// end ;
69962: LD_VAR 0 3
69966: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69967: LD_INT 0
69969: PPUSH
// result := false ;
69970: LD_ADDR_VAR 0 4
69974: PUSH
69975: LD_INT 0
69977: ST_TO_ADDR
// if GetTaskList ( unit ) then
69978: LD_VAR 0 1
69982: PPUSH
69983: CALL_OW 437
69987: IFFALSE 70070
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69989: LD_STRING M
69991: PUSH
69992: LD_VAR 0 1
69996: PPUSH
69997: CALL_OW 437
70001: PUSH
70002: LD_INT 1
70004: ARRAY
70005: PUSH
70006: LD_INT 1
70008: ARRAY
70009: EQUAL
70010: PUSH
70011: LD_VAR 0 2
70015: PUSH
70016: LD_VAR 0 1
70020: PPUSH
70021: CALL_OW 437
70025: PUSH
70026: LD_INT 1
70028: ARRAY
70029: PUSH
70030: LD_INT 2
70032: ARRAY
70033: EQUAL
70034: AND
70035: PUSH
70036: LD_VAR 0 3
70040: PUSH
70041: LD_VAR 0 1
70045: PPUSH
70046: CALL_OW 437
70050: PUSH
70051: LD_INT 1
70053: ARRAY
70054: PUSH
70055: LD_INT 3
70057: ARRAY
70058: EQUAL
70059: AND
70060: IFFALSE 70070
// result := true ;
70062: LD_ADDR_VAR 0 4
70066: PUSH
70067: LD_INT 1
70069: ST_TO_ADDR
// end ; end ;
70070: LD_VAR 0 4
70074: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70075: LD_INT 0
70077: PPUSH
70078: PPUSH
70079: PPUSH
70080: PPUSH
// if not unit or not area then
70081: LD_VAR 0 1
70085: NOT
70086: PUSH
70087: LD_VAR 0 2
70091: NOT
70092: OR
70093: IFFALSE 70097
// exit ;
70095: GO 70261
// tmp := AreaToList ( area , i ) ;
70097: LD_ADDR_VAR 0 6
70101: PUSH
70102: LD_VAR 0 2
70106: PPUSH
70107: LD_VAR 0 5
70111: PPUSH
70112: CALL_OW 517
70116: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70117: LD_ADDR_VAR 0 5
70121: PUSH
70122: DOUBLE
70123: LD_INT 1
70125: DEC
70126: ST_TO_ADDR
70127: LD_VAR 0 6
70131: PUSH
70132: LD_INT 1
70134: ARRAY
70135: PUSH
70136: FOR_TO
70137: IFFALSE 70259
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70139: LD_ADDR_VAR 0 7
70143: PUSH
70144: LD_VAR 0 6
70148: PUSH
70149: LD_INT 1
70151: ARRAY
70152: PUSH
70153: LD_VAR 0 5
70157: ARRAY
70158: PUSH
70159: LD_VAR 0 6
70163: PUSH
70164: LD_INT 2
70166: ARRAY
70167: PUSH
70168: LD_VAR 0 5
70172: ARRAY
70173: PUSH
70174: EMPTY
70175: LIST
70176: LIST
70177: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
70178: LD_VAR 0 7
70182: PUSH
70183: LD_INT 1
70185: ARRAY
70186: PPUSH
70187: LD_VAR 0 7
70191: PUSH
70192: LD_INT 2
70194: ARRAY
70195: PPUSH
70196: CALL_OW 428
70200: PUSH
70201: LD_INT 0
70203: EQUAL
70204: IFFALSE 70257
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70206: LD_VAR 0 1
70210: PPUSH
70211: LD_VAR 0 7
70215: PUSH
70216: LD_INT 1
70218: ARRAY
70219: PPUSH
70220: LD_VAR 0 7
70224: PUSH
70225: LD_INT 2
70227: ARRAY
70228: PPUSH
70229: LD_VAR 0 3
70233: PPUSH
70234: CALL_OW 48
// result := IsPlaced ( unit ) ;
70238: LD_ADDR_VAR 0 4
70242: PUSH
70243: LD_VAR 0 1
70247: PPUSH
70248: CALL_OW 305
70252: ST_TO_ADDR
// exit ;
70253: POP
70254: POP
70255: GO 70261
// end ; end ;
70257: GO 70136
70259: POP
70260: POP
// end ;
70261: LD_VAR 0 4
70265: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70266: LD_INT 0
70268: PPUSH
70269: PPUSH
70270: PPUSH
// if not side or side > 8 then
70271: LD_VAR 0 1
70275: NOT
70276: PUSH
70277: LD_VAR 0 1
70281: PUSH
70282: LD_INT 8
70284: GREATER
70285: OR
70286: IFFALSE 70290
// exit ;
70288: GO 70477
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70290: LD_ADDR_VAR 0 4
70294: PUSH
70295: LD_INT 22
70297: PUSH
70298: LD_VAR 0 1
70302: PUSH
70303: EMPTY
70304: LIST
70305: LIST
70306: PUSH
70307: LD_INT 21
70309: PUSH
70310: LD_INT 3
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: PPUSH
70321: CALL_OW 69
70325: ST_TO_ADDR
// if not tmp then
70326: LD_VAR 0 4
70330: NOT
70331: IFFALSE 70335
// exit ;
70333: GO 70477
// enable_addtolog := true ;
70335: LD_ADDR_OWVAR 81
70339: PUSH
70340: LD_INT 1
70342: ST_TO_ADDR
// AddToLog ( [ ) ;
70343: LD_STRING [
70345: PPUSH
70346: CALL_OW 561
// for i in tmp do
70350: LD_ADDR_VAR 0 3
70354: PUSH
70355: LD_VAR 0 4
70359: PUSH
70360: FOR_IN
70361: IFFALSE 70468
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70363: LD_STRING [
70365: PUSH
70366: LD_VAR 0 3
70370: PPUSH
70371: CALL_OW 266
70375: STR
70376: PUSH
70377: LD_STRING , 
70379: STR
70380: PUSH
70381: LD_VAR 0 3
70385: PPUSH
70386: CALL_OW 250
70390: STR
70391: PUSH
70392: LD_STRING , 
70394: STR
70395: PUSH
70396: LD_VAR 0 3
70400: PPUSH
70401: CALL_OW 251
70405: STR
70406: PUSH
70407: LD_STRING , 
70409: STR
70410: PUSH
70411: LD_VAR 0 3
70415: PPUSH
70416: CALL_OW 254
70420: STR
70421: PUSH
70422: LD_STRING , 
70424: STR
70425: PUSH
70426: LD_VAR 0 3
70430: PPUSH
70431: LD_INT 1
70433: PPUSH
70434: CALL_OW 268
70438: STR
70439: PUSH
70440: LD_STRING , 
70442: STR
70443: PUSH
70444: LD_VAR 0 3
70448: PPUSH
70449: LD_INT 2
70451: PPUSH
70452: CALL_OW 268
70456: STR
70457: PUSH
70458: LD_STRING ],
70460: STR
70461: PPUSH
70462: CALL_OW 561
// end ;
70466: GO 70360
70468: POP
70469: POP
// AddToLog ( ]; ) ;
70470: LD_STRING ];
70472: PPUSH
70473: CALL_OW 561
// end ;
70477: LD_VAR 0 2
70481: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70482: LD_INT 0
70484: PPUSH
70485: PPUSH
70486: PPUSH
70487: PPUSH
70488: PPUSH
// if not area or not rate or not max then
70489: LD_VAR 0 1
70493: NOT
70494: PUSH
70495: LD_VAR 0 2
70499: NOT
70500: OR
70501: PUSH
70502: LD_VAR 0 4
70506: NOT
70507: OR
70508: IFFALSE 70512
// exit ;
70510: GO 70704
// while 1 do
70512: LD_INT 1
70514: IFFALSE 70704
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
70516: LD_ADDR_VAR 0 9
70520: PUSH
70521: LD_VAR 0 1
70525: PPUSH
70526: LD_INT 1
70528: PPUSH
70529: CALL_OW 287
70533: PUSH
70534: LD_INT 10
70536: MUL
70537: ST_TO_ADDR
// r := rate / 10 ;
70538: LD_ADDR_VAR 0 7
70542: PUSH
70543: LD_VAR 0 2
70547: PUSH
70548: LD_INT 10
70550: DIVREAL
70551: ST_TO_ADDR
// time := 1 1$00 ;
70552: LD_ADDR_VAR 0 8
70556: PUSH
70557: LD_INT 2100
70559: ST_TO_ADDR
// if amount < min then
70560: LD_VAR 0 9
70564: PUSH
70565: LD_VAR 0 3
70569: LESS
70570: IFFALSE 70588
// r := r * 2 else
70572: LD_ADDR_VAR 0 7
70576: PUSH
70577: LD_VAR 0 7
70581: PUSH
70582: LD_INT 2
70584: MUL
70585: ST_TO_ADDR
70586: GO 70614
// if amount > max then
70588: LD_VAR 0 9
70592: PUSH
70593: LD_VAR 0 4
70597: GREATER
70598: IFFALSE 70614
// r := r / 2 ;
70600: LD_ADDR_VAR 0 7
70604: PUSH
70605: LD_VAR 0 7
70609: PUSH
70610: LD_INT 2
70612: DIVREAL
70613: ST_TO_ADDR
// time := time / r ;
70614: LD_ADDR_VAR 0 8
70618: PUSH
70619: LD_VAR 0 8
70623: PUSH
70624: LD_VAR 0 7
70628: DIVREAL
70629: ST_TO_ADDR
// if time < 0 then
70630: LD_VAR 0 8
70634: PUSH
70635: LD_INT 0
70637: LESS
70638: IFFALSE 70655
// time := time * - 1 ;
70640: LD_ADDR_VAR 0 8
70644: PUSH
70645: LD_VAR 0 8
70649: PUSH
70650: LD_INT 1
70652: NEG
70653: MUL
70654: ST_TO_ADDR
// wait ( time ) ;
70655: LD_VAR 0 8
70659: PPUSH
70660: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
70664: LD_INT 35
70666: PPUSH
70667: LD_INT 875
70669: PPUSH
70670: CALL_OW 12
70674: PPUSH
70675: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
70679: LD_INT 1
70681: PPUSH
70682: LD_INT 5
70684: PPUSH
70685: CALL_OW 12
70689: PPUSH
70690: LD_VAR 0 1
70694: PPUSH
70695: LD_INT 1
70697: PPUSH
70698: CALL_OW 55
// end ;
70702: GO 70512
// end ;
70704: LD_VAR 0 5
70708: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
70709: LD_INT 0
70711: PPUSH
70712: PPUSH
70713: PPUSH
70714: PPUSH
70715: PPUSH
70716: PPUSH
70717: PPUSH
70718: PPUSH
// if not turrets or not factories then
70719: LD_VAR 0 1
70723: NOT
70724: PUSH
70725: LD_VAR 0 2
70729: NOT
70730: OR
70731: IFFALSE 70735
// exit ;
70733: GO 71042
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
70735: LD_ADDR_VAR 0 10
70739: PUSH
70740: LD_INT 5
70742: PUSH
70743: LD_INT 6
70745: PUSH
70746: EMPTY
70747: LIST
70748: LIST
70749: PUSH
70750: LD_INT 2
70752: PUSH
70753: LD_INT 4
70755: PUSH
70756: EMPTY
70757: LIST
70758: LIST
70759: PUSH
70760: LD_INT 3
70762: PUSH
70763: LD_INT 5
70765: PUSH
70766: EMPTY
70767: LIST
70768: LIST
70769: PUSH
70770: EMPTY
70771: LIST
70772: LIST
70773: LIST
70774: PUSH
70775: LD_INT 24
70777: PUSH
70778: LD_INT 25
70780: PUSH
70781: EMPTY
70782: LIST
70783: LIST
70784: PUSH
70785: LD_INT 23
70787: PUSH
70788: LD_INT 27
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 42
70801: PUSH
70802: LD_INT 43
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: PUSH
70809: LD_INT 44
70811: PUSH
70812: LD_INT 46
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: PUSH
70819: LD_INT 45
70821: PUSH
70822: LD_INT 47
70824: PUSH
70825: EMPTY
70826: LIST
70827: LIST
70828: PUSH
70829: EMPTY
70830: LIST
70831: LIST
70832: LIST
70833: PUSH
70834: EMPTY
70835: LIST
70836: LIST
70837: LIST
70838: ST_TO_ADDR
// result := [ ] ;
70839: LD_ADDR_VAR 0 3
70843: PUSH
70844: EMPTY
70845: ST_TO_ADDR
// for i in turrets do
70846: LD_ADDR_VAR 0 4
70850: PUSH
70851: LD_VAR 0 1
70855: PUSH
70856: FOR_IN
70857: IFFALSE 71040
// begin nat := GetNation ( i ) ;
70859: LD_ADDR_VAR 0 7
70863: PUSH
70864: LD_VAR 0 4
70868: PPUSH
70869: CALL_OW 248
70873: ST_TO_ADDR
// weapon := 0 ;
70874: LD_ADDR_VAR 0 8
70878: PUSH
70879: LD_INT 0
70881: ST_TO_ADDR
// if not nat then
70882: LD_VAR 0 7
70886: NOT
70887: IFFALSE 70891
// continue ;
70889: GO 70856
// for j in list [ nat ] do
70891: LD_ADDR_VAR 0 5
70895: PUSH
70896: LD_VAR 0 10
70900: PUSH
70901: LD_VAR 0 7
70905: ARRAY
70906: PUSH
70907: FOR_IN
70908: IFFALSE 70949
// if GetBWeapon ( i ) = j [ 1 ] then
70910: LD_VAR 0 4
70914: PPUSH
70915: CALL_OW 269
70919: PUSH
70920: LD_VAR 0 5
70924: PUSH
70925: LD_INT 1
70927: ARRAY
70928: EQUAL
70929: IFFALSE 70947
// begin weapon := j [ 2 ] ;
70931: LD_ADDR_VAR 0 8
70935: PUSH
70936: LD_VAR 0 5
70940: PUSH
70941: LD_INT 2
70943: ARRAY
70944: ST_TO_ADDR
// break ;
70945: GO 70949
// end ;
70947: GO 70907
70949: POP
70950: POP
// if not weapon then
70951: LD_VAR 0 8
70955: NOT
70956: IFFALSE 70960
// continue ;
70958: GO 70856
// for k in factories do
70960: LD_ADDR_VAR 0 6
70964: PUSH
70965: LD_VAR 0 2
70969: PUSH
70970: FOR_IN
70971: IFFALSE 71036
// begin weapons := AvailableWeaponList ( k ) ;
70973: LD_ADDR_VAR 0 9
70977: PUSH
70978: LD_VAR 0 6
70982: PPUSH
70983: CALL_OW 478
70987: ST_TO_ADDR
// if not weapons then
70988: LD_VAR 0 9
70992: NOT
70993: IFFALSE 70997
// continue ;
70995: GO 70970
// if weapon in weapons then
70997: LD_VAR 0 8
71001: PUSH
71002: LD_VAR 0 9
71006: IN
71007: IFFALSE 71034
// begin result := [ i , weapon ] ;
71009: LD_ADDR_VAR 0 3
71013: PUSH
71014: LD_VAR 0 4
71018: PUSH
71019: LD_VAR 0 8
71023: PUSH
71024: EMPTY
71025: LIST
71026: LIST
71027: ST_TO_ADDR
// exit ;
71028: POP
71029: POP
71030: POP
71031: POP
71032: GO 71042
// end ; end ;
71034: GO 70970
71036: POP
71037: POP
// end ;
71038: GO 70856
71040: POP
71041: POP
// end ;
71042: LD_VAR 0 3
71046: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71047: LD_INT 0
71049: PPUSH
// if not side or side > 8 then
71050: LD_VAR 0 3
71054: NOT
71055: PUSH
71056: LD_VAR 0 3
71060: PUSH
71061: LD_INT 8
71063: GREATER
71064: OR
71065: IFFALSE 71069
// exit ;
71067: GO 71128
// if not range then
71069: LD_VAR 0 4
71073: NOT
71074: IFFALSE 71085
// range := - 12 ;
71076: LD_ADDR_VAR 0 4
71080: PUSH
71081: LD_INT 12
71083: NEG
71084: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71085: LD_VAR 0 1
71089: PPUSH
71090: LD_VAR 0 2
71094: PPUSH
71095: LD_VAR 0 3
71099: PPUSH
71100: LD_VAR 0 4
71104: PPUSH
71105: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71109: LD_VAR 0 1
71113: PPUSH
71114: LD_VAR 0 2
71118: PPUSH
71119: LD_VAR 0 3
71123: PPUSH
71124: CALL_OW 331
// end ;
71128: LD_VAR 0 5
71132: RET
// export function Video ( mode ) ; begin
71133: LD_INT 0
71135: PPUSH
// ingame_video = mode ;
71136: LD_ADDR_OWVAR 52
71140: PUSH
71141: LD_VAR 0 1
71145: ST_TO_ADDR
// interface_hidden = mode ;
71146: LD_ADDR_OWVAR 54
71150: PUSH
71151: LD_VAR 0 1
71155: ST_TO_ADDR
// end ;
71156: LD_VAR 0 2
71160: RET
// export function Join ( array , element ) ; begin
71161: LD_INT 0
71163: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71164: LD_ADDR_VAR 0 3
71168: PUSH
71169: LD_VAR 0 1
71173: PPUSH
71174: LD_VAR 0 1
71178: PUSH
71179: LD_INT 1
71181: PLUS
71182: PPUSH
71183: LD_VAR 0 2
71187: PPUSH
71188: CALL_OW 1
71192: ST_TO_ADDR
// end ;
71193: LD_VAR 0 3
71197: RET
// export function JoinUnion ( array , element ) ; begin
71198: LD_INT 0
71200: PPUSH
// result := array union element ;
71201: LD_ADDR_VAR 0 3
71205: PUSH
71206: LD_VAR 0 1
71210: PUSH
71211: LD_VAR 0 2
71215: UNION
71216: ST_TO_ADDR
// end ;
71217: LD_VAR 0 3
71221: RET
// export function GetBehemoths ( side ) ; begin
71222: LD_INT 0
71224: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
71225: LD_ADDR_VAR 0 2
71229: PUSH
71230: LD_INT 22
71232: PUSH
71233: LD_VAR 0 1
71237: PUSH
71238: EMPTY
71239: LIST
71240: LIST
71241: PUSH
71242: LD_INT 31
71244: PUSH
71245: LD_INT 25
71247: PUSH
71248: EMPTY
71249: LIST
71250: LIST
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PPUSH
71256: CALL_OW 69
71260: ST_TO_ADDR
// end ;
71261: LD_VAR 0 2
71265: RET
// export function Shuffle ( array ) ; var i , index ; begin
71266: LD_INT 0
71268: PPUSH
71269: PPUSH
71270: PPUSH
// result := [ ] ;
71271: LD_ADDR_VAR 0 2
71275: PUSH
71276: EMPTY
71277: ST_TO_ADDR
// if not array then
71278: LD_VAR 0 1
71282: NOT
71283: IFFALSE 71287
// exit ;
71285: GO 71386
// Randomize ;
71287: CALL_OW 10
// for i = array downto 1 do
71291: LD_ADDR_VAR 0 3
71295: PUSH
71296: DOUBLE
71297: LD_VAR 0 1
71301: INC
71302: ST_TO_ADDR
71303: LD_INT 1
71305: PUSH
71306: FOR_DOWNTO
71307: IFFALSE 71384
// begin index := rand ( 1 , array ) ;
71309: LD_ADDR_VAR 0 4
71313: PUSH
71314: LD_INT 1
71316: PPUSH
71317: LD_VAR 0 1
71321: PPUSH
71322: CALL_OW 12
71326: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71327: LD_ADDR_VAR 0 2
71331: PUSH
71332: LD_VAR 0 2
71336: PPUSH
71337: LD_VAR 0 2
71341: PUSH
71342: LD_INT 1
71344: PLUS
71345: PPUSH
71346: LD_VAR 0 1
71350: PUSH
71351: LD_VAR 0 4
71355: ARRAY
71356: PPUSH
71357: CALL_OW 2
71361: ST_TO_ADDR
// array := Delete ( array , index ) ;
71362: LD_ADDR_VAR 0 1
71366: PUSH
71367: LD_VAR 0 1
71371: PPUSH
71372: LD_VAR 0 4
71376: PPUSH
71377: CALL_OW 3
71381: ST_TO_ADDR
// end ;
71382: GO 71306
71384: POP
71385: POP
// end ;
71386: LD_VAR 0 2
71390: RET
// export function GetBaseMaterials ( base ) ; begin
71391: LD_INT 0
71393: PPUSH
// result := [ 0 , 0 , 0 ] ;
71394: LD_ADDR_VAR 0 2
71398: PUSH
71399: LD_INT 0
71401: PUSH
71402: LD_INT 0
71404: PUSH
71405: LD_INT 0
71407: PUSH
71408: EMPTY
71409: LIST
71410: LIST
71411: LIST
71412: ST_TO_ADDR
// if not base then
71413: LD_VAR 0 1
71417: NOT
71418: IFFALSE 71422
// exit ;
71420: GO 71471
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
71422: LD_ADDR_VAR 0 2
71426: PUSH
71427: LD_VAR 0 1
71431: PPUSH
71432: LD_INT 1
71434: PPUSH
71435: CALL_OW 275
71439: PUSH
71440: LD_VAR 0 1
71444: PPUSH
71445: LD_INT 2
71447: PPUSH
71448: CALL_OW 275
71452: PUSH
71453: LD_VAR 0 1
71457: PPUSH
71458: LD_INT 3
71460: PPUSH
71461: CALL_OW 275
71465: PUSH
71466: EMPTY
71467: LIST
71468: LIST
71469: LIST
71470: ST_TO_ADDR
// end ;
71471: LD_VAR 0 2
71475: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
71476: LD_INT 0
71478: PPUSH
71479: PPUSH
// result := array ;
71480: LD_ADDR_VAR 0 3
71484: PUSH
71485: LD_VAR 0 1
71489: ST_TO_ADDR
// if size > 0 then
71490: LD_VAR 0 2
71494: PUSH
71495: LD_INT 0
71497: GREATER
71498: IFFALSE 71544
// for i := array downto size do
71500: LD_ADDR_VAR 0 4
71504: PUSH
71505: DOUBLE
71506: LD_VAR 0 1
71510: INC
71511: ST_TO_ADDR
71512: LD_VAR 0 2
71516: PUSH
71517: FOR_DOWNTO
71518: IFFALSE 71542
// result := Delete ( result , result ) ;
71520: LD_ADDR_VAR 0 3
71524: PUSH
71525: LD_VAR 0 3
71529: PPUSH
71530: LD_VAR 0 3
71534: PPUSH
71535: CALL_OW 3
71539: ST_TO_ADDR
71540: GO 71517
71542: POP
71543: POP
// end ;
71544: LD_VAR 0 3
71548: RET
// export function ComExit ( unit ) ; var tmp ; begin
71549: LD_INT 0
71551: PPUSH
71552: PPUSH
// if not IsInUnit ( unit ) then
71553: LD_VAR 0 1
71557: PPUSH
71558: CALL_OW 310
71562: NOT
71563: IFFALSE 71567
// exit ;
71565: GO 71627
// tmp := IsInUnit ( unit ) ;
71567: LD_ADDR_VAR 0 3
71571: PUSH
71572: LD_VAR 0 1
71576: PPUSH
71577: CALL_OW 310
71581: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
71582: LD_VAR 0 3
71586: PPUSH
71587: CALL_OW 247
71591: PUSH
71592: LD_INT 2
71594: EQUAL
71595: IFFALSE 71608
// ComExitVehicle ( unit ) else
71597: LD_VAR 0 1
71601: PPUSH
71602: CALL_OW 121
71606: GO 71617
// ComExitBuilding ( unit ) ;
71608: LD_VAR 0 1
71612: PPUSH
71613: CALL_OW 122
// result := tmp ;
71617: LD_ADDR_VAR 0 2
71621: PUSH
71622: LD_VAR 0 3
71626: ST_TO_ADDR
// end ;
71627: LD_VAR 0 2
71631: RET
// export function ComExitAll ( units ) ; var i ; begin
71632: LD_INT 0
71634: PPUSH
71635: PPUSH
// if not units then
71636: LD_VAR 0 1
71640: NOT
71641: IFFALSE 71645
// exit ;
71643: GO 71671
// for i in units do
71645: LD_ADDR_VAR 0 3
71649: PUSH
71650: LD_VAR 0 1
71654: PUSH
71655: FOR_IN
71656: IFFALSE 71669
// ComExit ( i ) ;
71658: LD_VAR 0 3
71662: PPUSH
71663: CALL 71549 0 1
71667: GO 71655
71669: POP
71670: POP
// end ;
71671: LD_VAR 0 2
71675: RET
// export function ResetHc ; begin
71676: LD_INT 0
71678: PPUSH
// InitHc ;
71679: CALL_OW 19
// hc_importance := 0 ;
71683: LD_ADDR_OWVAR 32
71687: PUSH
71688: LD_INT 0
71690: ST_TO_ADDR
// end ;
71691: LD_VAR 0 1
71695: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
71696: LD_INT 0
71698: PPUSH
71699: PPUSH
71700: PPUSH
// _x := ( x1 + x2 ) div 2 ;
71701: LD_ADDR_VAR 0 6
71705: PUSH
71706: LD_VAR 0 1
71710: PUSH
71711: LD_VAR 0 3
71715: PLUS
71716: PUSH
71717: LD_INT 2
71719: DIV
71720: ST_TO_ADDR
// if _x < 0 then
71721: LD_VAR 0 6
71725: PUSH
71726: LD_INT 0
71728: LESS
71729: IFFALSE 71746
// _x := _x * - 1 ;
71731: LD_ADDR_VAR 0 6
71735: PUSH
71736: LD_VAR 0 6
71740: PUSH
71741: LD_INT 1
71743: NEG
71744: MUL
71745: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
71746: LD_ADDR_VAR 0 7
71750: PUSH
71751: LD_VAR 0 2
71755: PUSH
71756: LD_VAR 0 4
71760: PLUS
71761: PUSH
71762: LD_INT 2
71764: DIV
71765: ST_TO_ADDR
// if _y < 0 then
71766: LD_VAR 0 7
71770: PUSH
71771: LD_INT 0
71773: LESS
71774: IFFALSE 71791
// _y := _y * - 1 ;
71776: LD_ADDR_VAR 0 7
71780: PUSH
71781: LD_VAR 0 7
71785: PUSH
71786: LD_INT 1
71788: NEG
71789: MUL
71790: ST_TO_ADDR
// result := [ _x , _y ] ;
71791: LD_ADDR_VAR 0 5
71795: PUSH
71796: LD_VAR 0 6
71800: PUSH
71801: LD_VAR 0 7
71805: PUSH
71806: EMPTY
71807: LIST
71808: LIST
71809: ST_TO_ADDR
// end ;
71810: LD_VAR 0 5
71814: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
71815: LD_INT 0
71817: PPUSH
71818: PPUSH
71819: PPUSH
71820: PPUSH
// task := GetTaskList ( unit ) ;
71821: LD_ADDR_VAR 0 7
71825: PUSH
71826: LD_VAR 0 1
71830: PPUSH
71831: CALL_OW 437
71835: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71836: LD_VAR 0 7
71840: NOT
71841: PUSH
71842: LD_VAR 0 1
71846: PPUSH
71847: LD_VAR 0 2
71851: PPUSH
71852: CALL_OW 308
71856: NOT
71857: AND
71858: IFFALSE 71862
// exit ;
71860: GO 71980
// if IsInArea ( unit , area ) then
71862: LD_VAR 0 1
71866: PPUSH
71867: LD_VAR 0 2
71871: PPUSH
71872: CALL_OW 308
71876: IFFALSE 71894
// begin ComMoveToArea ( unit , goAway ) ;
71878: LD_VAR 0 1
71882: PPUSH
71883: LD_VAR 0 3
71887: PPUSH
71888: CALL_OW 113
// exit ;
71892: GO 71980
// end ; if task [ 1 ] [ 1 ] <> M then
71894: LD_VAR 0 7
71898: PUSH
71899: LD_INT 1
71901: ARRAY
71902: PUSH
71903: LD_INT 1
71905: ARRAY
71906: PUSH
71907: LD_STRING M
71909: NONEQUAL
71910: IFFALSE 71914
// exit ;
71912: GO 71980
// x := task [ 1 ] [ 2 ] ;
71914: LD_ADDR_VAR 0 5
71918: PUSH
71919: LD_VAR 0 7
71923: PUSH
71924: LD_INT 1
71926: ARRAY
71927: PUSH
71928: LD_INT 2
71930: ARRAY
71931: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71932: LD_ADDR_VAR 0 6
71936: PUSH
71937: LD_VAR 0 7
71941: PUSH
71942: LD_INT 1
71944: ARRAY
71945: PUSH
71946: LD_INT 3
71948: ARRAY
71949: ST_TO_ADDR
// if InArea ( x , y , area ) then
71950: LD_VAR 0 5
71954: PPUSH
71955: LD_VAR 0 6
71959: PPUSH
71960: LD_VAR 0 2
71964: PPUSH
71965: CALL_OW 309
71969: IFFALSE 71980
// ComStop ( unit ) ;
71971: LD_VAR 0 1
71975: PPUSH
71976: CALL_OW 141
// end ;
71980: LD_VAR 0 4
71984: RET
// export function Abs ( value ) ; begin
71985: LD_INT 0
71987: PPUSH
// result := value ;
71988: LD_ADDR_VAR 0 2
71992: PUSH
71993: LD_VAR 0 1
71997: ST_TO_ADDR
// if value < 0 then
71998: LD_VAR 0 1
72002: PUSH
72003: LD_INT 0
72005: LESS
72006: IFFALSE 72023
// result := value * - 1 ;
72008: LD_ADDR_VAR 0 2
72012: PUSH
72013: LD_VAR 0 1
72017: PUSH
72018: LD_INT 1
72020: NEG
72021: MUL
72022: ST_TO_ADDR
// end ;
72023: LD_VAR 0 2
72027: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72028: LD_INT 0
72030: PPUSH
72031: PPUSH
72032: PPUSH
72033: PPUSH
72034: PPUSH
72035: PPUSH
72036: PPUSH
72037: PPUSH
// if not unit or not building then
72038: LD_VAR 0 1
72042: NOT
72043: PUSH
72044: LD_VAR 0 2
72048: NOT
72049: OR
72050: IFFALSE 72054
// exit ;
72052: GO 72280
// x := GetX ( building ) ;
72054: LD_ADDR_VAR 0 4
72058: PUSH
72059: LD_VAR 0 2
72063: PPUSH
72064: CALL_OW 250
72068: ST_TO_ADDR
// y := GetY ( building ) ;
72069: LD_ADDR_VAR 0 6
72073: PUSH
72074: LD_VAR 0 2
72078: PPUSH
72079: CALL_OW 251
72083: ST_TO_ADDR
// d := GetDir ( building ) ;
72084: LD_ADDR_VAR 0 8
72088: PUSH
72089: LD_VAR 0 2
72093: PPUSH
72094: CALL_OW 254
72098: ST_TO_ADDR
// r := 4 ;
72099: LD_ADDR_VAR 0 9
72103: PUSH
72104: LD_INT 4
72106: ST_TO_ADDR
// for i := 1 to 5 do
72107: LD_ADDR_VAR 0 10
72111: PUSH
72112: DOUBLE
72113: LD_INT 1
72115: DEC
72116: ST_TO_ADDR
72117: LD_INT 5
72119: PUSH
72120: FOR_TO
72121: IFFALSE 72278
// begin _x := ShiftX ( x , d , r + i ) ;
72123: LD_ADDR_VAR 0 5
72127: PUSH
72128: LD_VAR 0 4
72132: PPUSH
72133: LD_VAR 0 8
72137: PPUSH
72138: LD_VAR 0 9
72142: PUSH
72143: LD_VAR 0 10
72147: PLUS
72148: PPUSH
72149: CALL_OW 272
72153: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
72154: LD_ADDR_VAR 0 7
72158: PUSH
72159: LD_VAR 0 6
72163: PPUSH
72164: LD_VAR 0 8
72168: PPUSH
72169: LD_VAR 0 9
72173: PUSH
72174: LD_VAR 0 10
72178: PLUS
72179: PPUSH
72180: CALL_OW 273
72184: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
72185: LD_VAR 0 5
72189: PPUSH
72190: LD_VAR 0 7
72194: PPUSH
72195: CALL_OW 488
72199: PUSH
72200: LD_VAR 0 5
72204: PPUSH
72205: LD_VAR 0 7
72209: PPUSH
72210: CALL_OW 428
72214: PPUSH
72215: CALL_OW 247
72219: PUSH
72220: LD_INT 3
72222: PUSH
72223: LD_INT 2
72225: PUSH
72226: EMPTY
72227: LIST
72228: LIST
72229: IN
72230: NOT
72231: AND
72232: IFFALSE 72276
// begin ComMoveXY ( unit , _x , _y ) ;
72234: LD_VAR 0 1
72238: PPUSH
72239: LD_VAR 0 5
72243: PPUSH
72244: LD_VAR 0 7
72248: PPUSH
72249: CALL_OW 111
// result := [ _x , _y ] ;
72253: LD_ADDR_VAR 0 3
72257: PUSH
72258: LD_VAR 0 5
72262: PUSH
72263: LD_VAR 0 7
72267: PUSH
72268: EMPTY
72269: LIST
72270: LIST
72271: ST_TO_ADDR
// exit ;
72272: POP
72273: POP
72274: GO 72280
// end ; end ;
72276: GO 72120
72278: POP
72279: POP
// end ;
72280: LD_VAR 0 3
72284: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
72285: LD_INT 0
72287: PPUSH
72288: PPUSH
72289: PPUSH
// result := 0 ;
72290: LD_ADDR_VAR 0 3
72294: PUSH
72295: LD_INT 0
72297: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
72298: LD_VAR 0 1
72302: PUSH
72303: LD_INT 0
72305: LESS
72306: PUSH
72307: LD_VAR 0 1
72311: PUSH
72312: LD_INT 8
72314: GREATER
72315: OR
72316: PUSH
72317: LD_VAR 0 2
72321: PUSH
72322: LD_INT 0
72324: LESS
72325: OR
72326: PUSH
72327: LD_VAR 0 2
72331: PUSH
72332: LD_INT 8
72334: GREATER
72335: OR
72336: IFFALSE 72340
// exit ;
72338: GO 72415
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72340: LD_ADDR_VAR 0 4
72344: PUSH
72345: LD_INT 22
72347: PUSH
72348: LD_VAR 0 2
72352: PUSH
72353: EMPTY
72354: LIST
72355: LIST
72356: PPUSH
72357: CALL_OW 69
72361: PUSH
72362: FOR_IN
72363: IFFALSE 72413
// begin un := UnitShoot ( i ) ;
72365: LD_ADDR_VAR 0 5
72369: PUSH
72370: LD_VAR 0 4
72374: PPUSH
72375: CALL_OW 504
72379: ST_TO_ADDR
// if GetSide ( un ) = side1 then
72380: LD_VAR 0 5
72384: PPUSH
72385: CALL_OW 255
72389: PUSH
72390: LD_VAR 0 1
72394: EQUAL
72395: IFFALSE 72411
// begin result := un ;
72397: LD_ADDR_VAR 0 3
72401: PUSH
72402: LD_VAR 0 5
72406: ST_TO_ADDR
// exit ;
72407: POP
72408: POP
72409: GO 72415
// end ; end ;
72411: GO 72362
72413: POP
72414: POP
// end ;
72415: LD_VAR 0 3
72419: RET
// export function GetCargoBay ( units ) ; begin
72420: LD_INT 0
72422: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
72423: LD_ADDR_VAR 0 2
72427: PUSH
72428: LD_VAR 0 1
72432: PPUSH
72433: LD_INT 2
72435: PUSH
72436: LD_INT 34
72438: PUSH
72439: LD_INT 12
72441: PUSH
72442: EMPTY
72443: LIST
72444: LIST
72445: PUSH
72446: LD_INT 34
72448: PUSH
72449: LD_INT 51
72451: PUSH
72452: EMPTY
72453: LIST
72454: LIST
72455: PUSH
72456: LD_INT 34
72458: PUSH
72459: LD_INT 32
72461: PUSH
72462: EMPTY
72463: LIST
72464: LIST
72465: PUSH
72466: LD_INT 34
72468: PUSH
72469: LD_EXP 120
72473: PUSH
72474: EMPTY
72475: LIST
72476: LIST
72477: PUSH
72478: EMPTY
72479: LIST
72480: LIST
72481: LIST
72482: LIST
72483: LIST
72484: PPUSH
72485: CALL_OW 72
72489: ST_TO_ADDR
// end ;
72490: LD_VAR 0 2
72494: RET
// export function Negate ( value ) ; begin
72495: LD_INT 0
72497: PPUSH
// result := not value ;
72498: LD_ADDR_VAR 0 2
72502: PUSH
72503: LD_VAR 0 1
72507: NOT
72508: ST_TO_ADDR
// end ;
72509: LD_VAR 0 2
72513: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
72514: LD_INT 0
72516: PPUSH
// if x1 = x2 then
72517: LD_VAR 0 1
72521: PUSH
72522: LD_VAR 0 3
72526: EQUAL
72527: IFFALSE 72561
// begin if y1 > y2 then
72529: LD_VAR 0 2
72533: PUSH
72534: LD_VAR 0 4
72538: GREATER
72539: IFFALSE 72551
// result := 0 else
72541: LD_ADDR_VAR 0 5
72545: PUSH
72546: LD_INT 0
72548: ST_TO_ADDR
72549: GO 72559
// result := 3 ;
72551: LD_ADDR_VAR 0 5
72555: PUSH
72556: LD_INT 3
72558: ST_TO_ADDR
// exit ;
72559: GO 72647
// end ; if y1 = y2 then
72561: LD_VAR 0 2
72565: PUSH
72566: LD_VAR 0 4
72570: EQUAL
72571: IFFALSE 72605
// begin if x1 > x2 then
72573: LD_VAR 0 1
72577: PUSH
72578: LD_VAR 0 3
72582: GREATER
72583: IFFALSE 72595
// result := 1 else
72585: LD_ADDR_VAR 0 5
72589: PUSH
72590: LD_INT 1
72592: ST_TO_ADDR
72593: GO 72603
// result := 4 ;
72595: LD_ADDR_VAR 0 5
72599: PUSH
72600: LD_INT 4
72602: ST_TO_ADDR
// exit ;
72603: GO 72647
// end ; if x1 > x2 and y1 > y2 then
72605: LD_VAR 0 1
72609: PUSH
72610: LD_VAR 0 3
72614: GREATER
72615: PUSH
72616: LD_VAR 0 2
72620: PUSH
72621: LD_VAR 0 4
72625: GREATER
72626: AND
72627: IFFALSE 72639
// result := 2 else
72629: LD_ADDR_VAR 0 5
72633: PUSH
72634: LD_INT 2
72636: ST_TO_ADDR
72637: GO 72647
// result := 5 ;
72639: LD_ADDR_VAR 0 5
72643: PUSH
72644: LD_INT 5
72646: ST_TO_ADDR
// end ;
72647: LD_VAR 0 5
72651: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72652: LD_INT 0
72654: PPUSH
72655: PPUSH
// if not driver or not IsInUnit ( driver ) then
72656: LD_VAR 0 1
72660: NOT
72661: PUSH
72662: LD_VAR 0 1
72666: PPUSH
72667: CALL_OW 310
72671: NOT
72672: OR
72673: IFFALSE 72677
// exit ;
72675: GO 72767
// vehicle := IsInUnit ( driver ) ;
72677: LD_ADDR_VAR 0 3
72681: PUSH
72682: LD_VAR 0 1
72686: PPUSH
72687: CALL_OW 310
72691: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72692: LD_VAR 0 1
72696: PPUSH
72697: LD_STRING \
72699: PUSH
72700: LD_INT 0
72702: PUSH
72703: LD_INT 0
72705: PUSH
72706: LD_INT 0
72708: PUSH
72709: LD_INT 0
72711: PUSH
72712: LD_INT 0
72714: PUSH
72715: LD_INT 0
72717: PUSH
72718: EMPTY
72719: LIST
72720: LIST
72721: LIST
72722: LIST
72723: LIST
72724: LIST
72725: LIST
72726: PUSH
72727: LD_STRING E
72729: PUSH
72730: LD_INT 0
72732: PUSH
72733: LD_INT 0
72735: PUSH
72736: LD_VAR 0 3
72740: PUSH
72741: LD_INT 0
72743: PUSH
72744: LD_INT 0
72746: PUSH
72747: LD_INT 0
72749: PUSH
72750: EMPTY
72751: LIST
72752: LIST
72753: LIST
72754: LIST
72755: LIST
72756: LIST
72757: LIST
72758: PUSH
72759: EMPTY
72760: LIST
72761: LIST
72762: PPUSH
72763: CALL_OW 446
// end ;
72767: LD_VAR 0 2
72771: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72772: LD_INT 0
72774: PPUSH
72775: PPUSH
// if not driver or not IsInUnit ( driver ) then
72776: LD_VAR 0 1
72780: NOT
72781: PUSH
72782: LD_VAR 0 1
72786: PPUSH
72787: CALL_OW 310
72791: NOT
72792: OR
72793: IFFALSE 72797
// exit ;
72795: GO 72887
// vehicle := IsInUnit ( driver ) ;
72797: LD_ADDR_VAR 0 3
72801: PUSH
72802: LD_VAR 0 1
72806: PPUSH
72807: CALL_OW 310
72811: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72812: LD_VAR 0 1
72816: PPUSH
72817: LD_STRING \
72819: PUSH
72820: LD_INT 0
72822: PUSH
72823: LD_INT 0
72825: PUSH
72826: LD_INT 0
72828: PUSH
72829: LD_INT 0
72831: PUSH
72832: LD_INT 0
72834: PUSH
72835: LD_INT 0
72837: PUSH
72838: EMPTY
72839: LIST
72840: LIST
72841: LIST
72842: LIST
72843: LIST
72844: LIST
72845: LIST
72846: PUSH
72847: LD_STRING E
72849: PUSH
72850: LD_INT 0
72852: PUSH
72853: LD_INT 0
72855: PUSH
72856: LD_VAR 0 3
72860: PUSH
72861: LD_INT 0
72863: PUSH
72864: LD_INT 0
72866: PUSH
72867: LD_INT 0
72869: PUSH
72870: EMPTY
72871: LIST
72872: LIST
72873: LIST
72874: LIST
72875: LIST
72876: LIST
72877: LIST
72878: PUSH
72879: EMPTY
72880: LIST
72881: LIST
72882: PPUSH
72883: CALL_OW 447
// end ;
72887: LD_VAR 0 2
72891: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72892: LD_INT 0
72894: PPUSH
72895: PPUSH
72896: PPUSH
// tmp := [ ] ;
72897: LD_ADDR_VAR 0 5
72901: PUSH
72902: EMPTY
72903: ST_TO_ADDR
// for i in units do
72904: LD_ADDR_VAR 0 4
72908: PUSH
72909: LD_VAR 0 1
72913: PUSH
72914: FOR_IN
72915: IFFALSE 72953
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72917: LD_ADDR_VAR 0 5
72921: PUSH
72922: LD_VAR 0 5
72926: PPUSH
72927: LD_VAR 0 5
72931: PUSH
72932: LD_INT 1
72934: PLUS
72935: PPUSH
72936: LD_VAR 0 4
72940: PPUSH
72941: CALL_OW 256
72945: PPUSH
72946: CALL_OW 2
72950: ST_TO_ADDR
72951: GO 72914
72953: POP
72954: POP
// if not tmp then
72955: LD_VAR 0 5
72959: NOT
72960: IFFALSE 72964
// exit ;
72962: GO 73012
// if asc then
72964: LD_VAR 0 2
72968: IFFALSE 72992
// result := SortListByListAsc ( units , tmp ) else
72970: LD_ADDR_VAR 0 3
72974: PUSH
72975: LD_VAR 0 1
72979: PPUSH
72980: LD_VAR 0 5
72984: PPUSH
72985: CALL_OW 76
72989: ST_TO_ADDR
72990: GO 73012
// result := SortListByListDesc ( units , tmp ) ;
72992: LD_ADDR_VAR 0 3
72996: PUSH
72997: LD_VAR 0 1
73001: PPUSH
73002: LD_VAR 0 5
73006: PPUSH
73007: CALL_OW 77
73011: ST_TO_ADDR
// end ;
73012: LD_VAR 0 3
73016: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
73017: LD_INT 0
73019: PPUSH
73020: PPUSH
// task := GetTaskList ( mech ) ;
73021: LD_ADDR_VAR 0 4
73025: PUSH
73026: LD_VAR 0 1
73030: PPUSH
73031: CALL_OW 437
73035: ST_TO_ADDR
// if not task then
73036: LD_VAR 0 4
73040: NOT
73041: IFFALSE 73045
// exit ;
73043: GO 73087
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
73045: LD_ADDR_VAR 0 3
73049: PUSH
73050: LD_VAR 0 4
73054: PUSH
73055: LD_INT 1
73057: ARRAY
73058: PUSH
73059: LD_INT 1
73061: ARRAY
73062: PUSH
73063: LD_STRING r
73065: EQUAL
73066: PUSH
73067: LD_VAR 0 4
73071: PUSH
73072: LD_INT 1
73074: ARRAY
73075: PUSH
73076: LD_INT 4
73078: ARRAY
73079: PUSH
73080: LD_VAR 0 2
73084: EQUAL
73085: AND
73086: ST_TO_ADDR
// end ;
73087: LD_VAR 0 3
73091: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
73092: LD_INT 0
73094: PPUSH
// SetDir ( unit , d ) ;
73095: LD_VAR 0 1
73099: PPUSH
73100: LD_VAR 0 4
73104: PPUSH
73105: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
73109: LD_VAR 0 1
73113: PPUSH
73114: LD_VAR 0 2
73118: PPUSH
73119: LD_VAR 0 3
73123: PPUSH
73124: LD_VAR 0 5
73128: PPUSH
73129: CALL_OW 48
// end ;
73133: LD_VAR 0 6
73137: RET
// export function ToNaturalNumber ( number ) ; begin
73138: LD_INT 0
73140: PPUSH
// result := number div 1 ;
73141: LD_ADDR_VAR 0 2
73145: PUSH
73146: LD_VAR 0 1
73150: PUSH
73151: LD_INT 1
73153: DIV
73154: ST_TO_ADDR
// if number < 0 then
73155: LD_VAR 0 1
73159: PUSH
73160: LD_INT 0
73162: LESS
73163: IFFALSE 73173
// result := 0 ;
73165: LD_ADDR_VAR 0 2
73169: PUSH
73170: LD_INT 0
73172: ST_TO_ADDR
// end ; end_of_file
73173: LD_VAR 0 2
73177: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73178: LD_VAR 0 1
73182: PPUSH
73183: LD_VAR 0 2
73187: PPUSH
73188: LD_VAR 0 3
73192: PPUSH
73193: LD_VAR 0 4
73197: PPUSH
73198: LD_VAR 0 5
73202: PPUSH
73203: LD_VAR 0 6
73207: PPUSH
73208: CALL 16905 0 6
// end ;
73212: PPOPN 6
73214: END
