// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// PrepareNature ;
   8: CALL 1860 0 0
// PrepareArabian ;
  12: CALL 2230 0 0
// PrepareAmerican ;
  16: CALL 7225 0 0
// PrepareRussian ;
  20: CALL 3186 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 8785 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 25 25$00 , 24 24$00 , 23 23$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 52500
 188: PUSH
 189: LD_INT 50400
 191: PUSH
 192: LD_INT 48300
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: PUSH
 200: LD_OWVAR 67
 204: ARRAY
 205: ST_TO_ADDR
// escapeCounter := 0 ;
 206: LD_ADDR_EXP 19
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// loseCounter := 0 ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// labCaptured := false ;
 222: LD_ADDR_EXP 21
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// hillBase := false ;
 230: LD_ADDR_EXP 15
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 238: LD_ADDR_EXP 8
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: LD_INT 4
 248: PUSH
 249: LD_INT 5
 251: PUSH
 252: LD_INT 6
 254: PUSH
 255: LD_INT 7
 257: PUSH
 258: LD_INT 8
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: LIST
 268: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 269: LD_ADDR_EXP 23
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// kaganCaptured := false ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// end ;
 285: LD_VAR 0 1
 289: RET
// every 0 0$1 trigger debug do var i ;
 290: LD_EXP 1
 294: IFFALSE 363
 296: GO 298
 298: DISABLE
 299: LD_INT 0
 301: PPUSH
// begin enable ;
 302: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 303: LD_ADDR_VAR 0 1
 307: PUSH
 308: LD_INT 22
 310: PUSH
 311: LD_INT 2
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: PUSH
 318: LD_INT 3
 320: PUSH
 321: LD_INT 21
 323: PUSH
 324: LD_INT 3
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: FOR_IN
 345: IFFALSE 361
// SetLives ( i , 1000 ) ;
 347: LD_VAR 0 1
 351: PPUSH
 352: LD_INT 1000
 354: PPUSH
 355: CALL_OW 234
 359: GO 344
 361: POP
 362: POP
// end ; end_of_file
 363: PPOPN 1
 365: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 366: LD_INT 0
 368: PPUSH
 369: PPUSH
// if exist_mode then
 370: LD_VAR 0 2
 374: IFFALSE 399
// unit := CreateCharacter ( prefix & ident ) else
 376: LD_ADDR_VAR 0 5
 380: PUSH
 381: LD_VAR 0 3
 385: PUSH
 386: LD_VAR 0 1
 390: STR
 391: PPUSH
 392: CALL_OW 34
 396: ST_TO_ADDR
 397: GO 414
// unit := NewCharacter ( ident ) ;
 399: LD_ADDR_VAR 0 5
 403: PUSH
 404: LD_VAR 0 1
 408: PPUSH
 409: CALL_OW 25
 413: ST_TO_ADDR
// result := unit ;
 414: LD_ADDR_VAR 0 4
 418: PUSH
 419: LD_VAR 0 5
 423: ST_TO_ADDR
// end ;
 424: LD_VAR 0 4
 428: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 429: LD_INT 0
 431: PPUSH
// uc_side := side ;
 432: LD_ADDR_OWVAR 20
 436: PUSH
 437: LD_VAR 0 1
 441: ST_TO_ADDR
// uc_nation := nation ;
 442: LD_ADDR_OWVAR 21
 446: PUSH
 447: LD_VAR 0 2
 451: ST_TO_ADDR
// vc_chassis := chassis ;
 452: LD_ADDR_OWVAR 37
 456: PUSH
 457: LD_VAR 0 3
 461: ST_TO_ADDR
// vc_engine := engine ;
 462: LD_ADDR_OWVAR 39
 466: PUSH
 467: LD_VAR 0 4
 471: ST_TO_ADDR
// vc_control := control ;
 472: LD_ADDR_OWVAR 38
 476: PUSH
 477: LD_VAR 0 5
 481: ST_TO_ADDR
// vc_weapon := weapon ;
 482: LD_ADDR_OWVAR 40
 486: PUSH
 487: LD_VAR 0 6
 491: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 492: LD_ADDR_OWVAR 41
 496: PUSH
 497: LD_VAR 0 7
 501: ST_TO_ADDR
// result := CreateVehicle ;
 502: LD_ADDR_VAR 0 8
 506: PUSH
 507: CALL_OW 45
 511: ST_TO_ADDR
// end ;
 512: LD_VAR 0 8
 516: RET
// export function SayX ( units , ident ) ; var i ; begin
 517: LD_INT 0
 519: PPUSH
 520: PPUSH
// result := false ;
 521: LD_ADDR_VAR 0 3
 525: PUSH
 526: LD_INT 0
 528: ST_TO_ADDR
// if not units then
 529: LD_VAR 0 1
 533: NOT
 534: IFFALSE 538
// exit ;
 536: GO 592
// for i in units do
 538: LD_ADDR_VAR 0 4
 542: PUSH
 543: LD_VAR 0 1
 547: PUSH
 548: FOR_IN
 549: IFFALSE 590
// if IsOk ( i ) then
 551: LD_VAR 0 4
 555: PPUSH
 556: CALL_OW 302
 560: IFFALSE 588
// begin Say ( i , ident ) ;
 562: LD_VAR 0 4
 566: PPUSH
 567: LD_VAR 0 2
 571: PPUSH
 572: CALL_OW 88
// result := i ;
 576: LD_ADDR_VAR 0 3
 580: PUSH
 581: LD_VAR 0 4
 585: ST_TO_ADDR
// break ;
 586: GO 590
// end ;
 588: GO 548
 590: POP
 591: POP
// end ;
 592: LD_VAR 0 3
 596: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 597: LD_INT 0
 599: PPUSH
 600: PPUSH
 601: PPUSH
// if not observer or not unit then
 602: LD_VAR 0 1
 606: NOT
 607: PUSH
 608: LD_VAR 0 2
 612: NOT
 613: OR
 614: IFFALSE 618
// exit ;
 616: GO 666
// if not See ( GetSide ( observer ) , unit ) then
 618: LD_VAR 0 1
 622: PPUSH
 623: CALL_OW 255
 627: PPUSH
 628: LD_VAR 0 2
 632: PPUSH
 633: CALL_OW 292
 637: NOT
 638: IFFALSE 642
// exit ;
 640: GO 666
// result := GetDistUnits ( observer , unit ) < 12 ;
 642: LD_ADDR_VAR 0 3
 646: PUSH
 647: LD_VAR 0 1
 651: PPUSH
 652: LD_VAR 0 2
 656: PPUSH
 657: CALL_OW 296
 661: PUSH
 662: LD_INT 12
 664: LESS
 665: ST_TO_ADDR
// end ;
 666: LD_VAR 0 3
 670: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 671: LD_INT 0
 673: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 674: LD_VAR 0 2
 678: PUSH
 679: LD_INT 1
 681: ARRAY
 682: PPUSH
 683: LD_VAR 0 2
 687: PUSH
 688: LD_INT 2
 690: ARRAY
 691: PPUSH
 692: CALL_OW 488
 696: PUSH
 697: LD_VAR 0 2
 701: PUSH
 702: LD_INT 1
 704: ARRAY
 705: PPUSH
 706: LD_VAR 0 2
 710: PUSH
 711: LD_INT 2
 713: ARRAY
 714: PPUSH
 715: CALL_OW 428
 719: PUSH
 720: LD_INT 0
 722: EQUAL
 723: AND
 724: IFFALSE 758
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 726: LD_VAR 0 1
 730: PPUSH
 731: LD_VAR 0 2
 735: PUSH
 736: LD_INT 1
 738: ARRAY
 739: PPUSH
 740: LD_VAR 0 2
 744: PUSH
 745: LD_INT 2
 747: ARRAY
 748: PPUSH
 749: LD_VAR 0 3
 753: PPUSH
 754: CALL_OW 48
// end ;
 758: LD_VAR 0 4
 762: RET
// export function Video ( mode ) ; begin
 763: LD_INT 0
 765: PPUSH
// ingame_video = mode ;
 766: LD_ADDR_OWVAR 52
 770: PUSH
 771: LD_VAR 0 1
 775: ST_TO_ADDR
// interface_hidden = mode ;
 776: LD_ADDR_OWVAR 54
 780: PUSH
 781: LD_VAR 0 1
 785: ST_TO_ADDR
// end ;
 786: LD_VAR 0 2
 790: RET
// export function ReverseArray ( array ) ; var i ; begin
 791: LD_INT 0
 793: PPUSH
 794: PPUSH
// if not array then
 795: LD_VAR 0 1
 799: NOT
 800: IFFALSE 804
// exit ;
 802: GO 862
// result := [ ] ;
 804: LD_ADDR_VAR 0 2
 808: PUSH
 809: EMPTY
 810: ST_TO_ADDR
// for i := 1 to array do
 811: LD_ADDR_VAR 0 3
 815: PUSH
 816: DOUBLE
 817: LD_INT 1
 819: DEC
 820: ST_TO_ADDR
 821: LD_VAR 0 1
 825: PUSH
 826: FOR_TO
 827: IFFALSE 860
// result := Insert ( result , 1 , array [ i ] ) ;
 829: LD_ADDR_VAR 0 2
 833: PUSH
 834: LD_VAR 0 2
 838: PPUSH
 839: LD_INT 1
 841: PPUSH
 842: LD_VAR 0 1
 846: PUSH
 847: LD_VAR 0 3
 851: ARRAY
 852: PPUSH
 853: CALL_OW 2
 857: ST_TO_ADDR
 858: GO 826
 860: POP
 861: POP
// end ;
 862: LD_VAR 0 2
 866: RET
// export function ComExit ( unit ) ; begin
 867: LD_INT 0
 869: PPUSH
// result := IsInUnit ( unit ) ;
 870: LD_ADDR_VAR 0 2
 874: PUSH
 875: LD_VAR 0 1
 879: PPUSH
 880: CALL_OW 310
 884: ST_TO_ADDR
// if not result then
 885: LD_VAR 0 2
 889: NOT
 890: IFFALSE 894
// exit ;
 892: GO 929
// if GetType ( result ) = unit_vehicle then
 894: LD_VAR 0 2
 898: PPUSH
 899: CALL_OW 247
 903: PUSH
 904: LD_INT 2
 906: EQUAL
 907: IFFALSE 920
// ComExitVehicle ( unit ) else
 909: LD_VAR 0 1
 913: PPUSH
 914: CALL_OW 121
 918: GO 929
// ComExitBuilding ( unit ) ;
 920: LD_VAR 0 1
 924: PPUSH
 925: CALL_OW 122
// end ;
 929: LD_VAR 0 2
 933: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 934: LD_INT 0
 936: PPUSH
 937: PPUSH
// if not side or not nation then
 938: LD_VAR 0 1
 942: NOT
 943: PUSH
 944: LD_VAR 0 2
 948: NOT
 949: OR
 950: IFFALSE 954
// exit ;
 952: GO 1718
// case nation of nation_american :
 954: LD_VAR 0 2
 958: PUSH
 959: LD_INT 1
 961: DOUBLE
 962: EQUAL
 963: IFTRUE 967
 965: GO 1181
 967: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 968: LD_ADDR_VAR 0 4
 972: PUSH
 973: LD_INT 35
 975: PUSH
 976: LD_INT 45
 978: PUSH
 979: LD_INT 46
 981: PUSH
 982: LD_INT 47
 984: PUSH
 985: LD_INT 82
 987: PUSH
 988: LD_INT 83
 990: PUSH
 991: LD_INT 84
 993: PUSH
 994: LD_INT 85
 996: PUSH
 997: LD_INT 86
 999: PUSH
1000: LD_INT 1
1002: PUSH
1003: LD_INT 2
1005: PUSH
1006: LD_INT 6
1008: PUSH
1009: LD_INT 15
1011: PUSH
1012: LD_INT 16
1014: PUSH
1015: LD_INT 7
1017: PUSH
1018: LD_INT 12
1020: PUSH
1021: LD_INT 13
1023: PUSH
1024: LD_INT 10
1026: PUSH
1027: LD_INT 14
1029: PUSH
1030: LD_INT 20
1032: PUSH
1033: LD_INT 21
1035: PUSH
1036: LD_INT 22
1038: PUSH
1039: LD_INT 25
1041: PUSH
1042: LD_INT 32
1044: PUSH
1045: LD_INT 27
1047: PUSH
1048: LD_INT 36
1050: PUSH
1051: LD_INT 69
1053: PUSH
1054: LD_INT 39
1056: PUSH
1057: LD_INT 34
1059: PUSH
1060: LD_INT 40
1062: PUSH
1063: LD_INT 48
1065: PUSH
1066: LD_INT 49
1068: PUSH
1069: LD_INT 50
1071: PUSH
1072: LD_INT 51
1074: PUSH
1075: LD_INT 52
1077: PUSH
1078: LD_INT 53
1080: PUSH
1081: LD_INT 54
1083: PUSH
1084: LD_INT 55
1086: PUSH
1087: LD_INT 56
1089: PUSH
1090: LD_INT 57
1092: PUSH
1093: LD_INT 58
1095: PUSH
1096: LD_INT 59
1098: PUSH
1099: LD_INT 60
1101: PUSH
1102: LD_INT 61
1104: PUSH
1105: LD_INT 62
1107: PUSH
1108: LD_INT 80
1110: PUSH
1111: LD_INT 82
1113: PUSH
1114: LD_INT 83
1116: PUSH
1117: LD_INT 84
1119: PUSH
1120: LD_INT 85
1122: PUSH
1123: LD_INT 86
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: LIST
1176: LIST
1177: LIST
1178: ST_TO_ADDR
1179: GO 1642
1181: LD_INT 2
1183: DOUBLE
1184: EQUAL
1185: IFTRUE 1189
1187: GO 1411
1189: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1190: LD_ADDR_VAR 0 4
1194: PUSH
1195: LD_INT 35
1197: PUSH
1198: LD_INT 45
1200: PUSH
1201: LD_INT 46
1203: PUSH
1204: LD_INT 47
1206: PUSH
1207: LD_INT 82
1209: PUSH
1210: LD_INT 83
1212: PUSH
1213: LD_INT 84
1215: PUSH
1216: LD_INT 85
1218: PUSH
1219: LD_INT 87
1221: PUSH
1222: LD_INT 70
1224: PUSH
1225: LD_INT 1
1227: PUSH
1228: LD_INT 11
1230: PUSH
1231: LD_INT 3
1233: PUSH
1234: LD_INT 4
1236: PUSH
1237: LD_INT 5
1239: PUSH
1240: LD_INT 6
1242: PUSH
1243: LD_INT 15
1245: PUSH
1246: LD_INT 18
1248: PUSH
1249: LD_INT 7
1251: PUSH
1252: LD_INT 17
1254: PUSH
1255: LD_INT 8
1257: PUSH
1258: LD_INT 20
1260: PUSH
1261: LD_INT 21
1263: PUSH
1264: LD_INT 22
1266: PUSH
1267: LD_INT 72
1269: PUSH
1270: LD_INT 26
1272: PUSH
1273: LD_INT 69
1275: PUSH
1276: LD_INT 39
1278: PUSH
1279: LD_INT 40
1281: PUSH
1282: LD_INT 41
1284: PUSH
1285: LD_INT 42
1287: PUSH
1288: LD_INT 43
1290: PUSH
1291: LD_INT 48
1293: PUSH
1294: LD_INT 49
1296: PUSH
1297: LD_INT 50
1299: PUSH
1300: LD_INT 51
1302: PUSH
1303: LD_INT 52
1305: PUSH
1306: LD_INT 53
1308: PUSH
1309: LD_INT 54
1311: PUSH
1312: LD_INT 55
1314: PUSH
1315: LD_INT 56
1317: PUSH
1318: LD_INT 60
1320: PUSH
1321: LD_INT 61
1323: PUSH
1324: LD_INT 62
1326: PUSH
1327: LD_INT 66
1329: PUSH
1330: LD_INT 67
1332: PUSH
1333: LD_INT 68
1335: PUSH
1336: LD_INT 81
1338: PUSH
1339: LD_INT 82
1341: PUSH
1342: LD_INT 83
1344: PUSH
1345: LD_INT 84
1347: PUSH
1348: LD_INT 85
1350: PUSH
1351: LD_INT 87
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: LIST
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: ST_TO_ADDR
1409: GO 1642
1411: LD_INT 3
1413: DOUBLE
1414: EQUAL
1415: IFTRUE 1419
1417: GO 1641
1419: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1420: LD_ADDR_VAR 0 4
1424: PUSH
1425: LD_INT 46
1427: PUSH
1428: LD_INT 47
1430: PUSH
1431: LD_INT 1
1433: PUSH
1434: LD_INT 2
1436: PUSH
1437: LD_INT 82
1439: PUSH
1440: LD_INT 83
1442: PUSH
1443: LD_INT 84
1445: PUSH
1446: LD_INT 85
1448: PUSH
1449: LD_INT 86
1451: PUSH
1452: LD_INT 11
1454: PUSH
1455: LD_INT 9
1457: PUSH
1458: LD_INT 20
1460: PUSH
1461: LD_INT 19
1463: PUSH
1464: LD_INT 21
1466: PUSH
1467: LD_INT 24
1469: PUSH
1470: LD_INT 22
1472: PUSH
1473: LD_INT 25
1475: PUSH
1476: LD_INT 28
1478: PUSH
1479: LD_INT 29
1481: PUSH
1482: LD_INT 30
1484: PUSH
1485: LD_INT 31
1487: PUSH
1488: LD_INT 37
1490: PUSH
1491: LD_INT 38
1493: PUSH
1494: LD_INT 32
1496: PUSH
1497: LD_INT 27
1499: PUSH
1500: LD_INT 33
1502: PUSH
1503: LD_INT 69
1505: PUSH
1506: LD_INT 39
1508: PUSH
1509: LD_INT 34
1511: PUSH
1512: LD_INT 40
1514: PUSH
1515: LD_INT 71
1517: PUSH
1518: LD_INT 23
1520: PUSH
1521: LD_INT 44
1523: PUSH
1524: LD_INT 48
1526: PUSH
1527: LD_INT 49
1529: PUSH
1530: LD_INT 50
1532: PUSH
1533: LD_INT 51
1535: PUSH
1536: LD_INT 52
1538: PUSH
1539: LD_INT 53
1541: PUSH
1542: LD_INT 54
1544: PUSH
1545: LD_INT 55
1547: PUSH
1548: LD_INT 56
1550: PUSH
1551: LD_INT 57
1553: PUSH
1554: LD_INT 58
1556: PUSH
1557: LD_INT 59
1559: PUSH
1560: LD_INT 63
1562: PUSH
1563: LD_INT 64
1565: PUSH
1566: LD_INT 65
1568: PUSH
1569: LD_INT 82
1571: PUSH
1572: LD_INT 83
1574: PUSH
1575: LD_INT 84
1577: PUSH
1578: LD_INT 85
1580: PUSH
1581: LD_INT 86
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: ST_TO_ADDR
1639: GO 1642
1641: POP
// if state > - 1 and state < 3 then
1642: LD_VAR 0 3
1646: PUSH
1647: LD_INT 1
1649: NEG
1650: GREATER
1651: PUSH
1652: LD_VAR 0 3
1656: PUSH
1657: LD_INT 3
1659: LESS
1660: AND
1661: IFFALSE 1718
// for i in result do
1663: LD_ADDR_VAR 0 5
1667: PUSH
1668: LD_VAR 0 4
1672: PUSH
1673: FOR_IN
1674: IFFALSE 1716
// if GetTech ( i , side ) <> state then
1676: LD_VAR 0 5
1680: PPUSH
1681: LD_VAR 0 1
1685: PPUSH
1686: CALL_OW 321
1690: PUSH
1691: LD_VAR 0 3
1695: NONEQUAL
1696: IFFALSE 1714
// result := result diff i ;
1698: LD_ADDR_VAR 0 4
1702: PUSH
1703: LD_VAR 0 4
1707: PUSH
1708: LD_VAR 0 5
1712: DIFF
1713: ST_TO_ADDR
1714: GO 1673
1716: POP
1717: POP
// end ;
1718: LD_VAR 0 4
1722: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
1723: LD_INT 0
1725: PPUSH
1726: PPUSH
// InitUc ;
1727: CALL_OW 18
// InitHc ;
1731: CALL_OW 19
// uc_side := 0 ;
1735: LD_ADDR_OWVAR 20
1739: PUSH
1740: LD_INT 0
1742: ST_TO_ADDR
// uc_nation := 0 ;
1743: LD_ADDR_OWVAR 21
1747: PUSH
1748: LD_INT 0
1750: ST_TO_ADDR
// for i = 1 to amount do
1751: LD_ADDR_VAR 0 4
1755: PUSH
1756: DOUBLE
1757: LD_INT 1
1759: DEC
1760: ST_TO_ADDR
1761: LD_VAR 0 2
1765: PUSH
1766: FOR_TO
1767: IFFALSE 1849
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
1769: LD_ADDR_OWVAR 29
1773: PUSH
1774: LD_INT 9
1776: PPUSH
1777: LD_INT 12
1779: PPUSH
1780: CALL_OW 12
1784: PUSH
1785: LD_INT 9
1787: PPUSH
1788: LD_INT 12
1790: PPUSH
1791: CALL_OW 12
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
1800: LD_ADDR_OWVAR 35
1804: PUSH
1805: LD_INT 1
1807: NEG
1808: PPUSH
1809: LD_INT 1
1811: PPUSH
1812: CALL_OW 12
1816: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
1817: LD_INT 0
1819: PPUSH
1820: LD_INT 12
1822: PPUSH
1823: LD_INT 1
1825: PPUSH
1826: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
1830: CALL_OW 44
1834: PPUSH
1835: LD_VAR 0 1
1839: PPUSH
1840: LD_INT 0
1842: PPUSH
1843: CALL_OW 49
// end ;
1847: GO 1766
1849: POP
1850: POP
// InitHc ;
1851: CALL_OW 19
// end ;
1855: LD_VAR 0 3
1859: RET
// export function PrepareNature ; var i ; begin
1860: LD_INT 0
1862: PPUSH
1863: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
1864: LD_INT 18
1866: PPUSH
1867: LD_INT 5
1869: PUSH
1870: LD_INT 4
1872: PUSH
1873: LD_INT 3
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: LIST
1880: PUSH
1881: LD_OWVAR 67
1885: ARRAY
1886: PPUSH
1887: CALL 1723 0 2
// for i := 1 to 3 do
1891: LD_ADDR_VAR 0 2
1895: PUSH
1896: DOUBLE
1897: LD_INT 1
1899: DEC
1900: ST_TO_ADDR
1901: LD_INT 3
1903: PUSH
1904: FOR_TO
1905: IFFALSE 1940
// begin hc_class := 21 ;
1907: LD_ADDR_OWVAR 28
1911: PUSH
1912: LD_INT 21
1914: ST_TO_ADDR
// hc_gallery :=  ;
1915: LD_ADDR_OWVAR 33
1919: PUSH
1920: LD_STRING 
1922: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1923: CALL_OW 44
1927: PPUSH
1928: LD_INT 18
1930: PPUSH
1931: LD_INT 0
1933: PPUSH
1934: CALL_OW 49
// end ;
1938: GO 1904
1940: POP
1941: POP
// for i := 1 to 2 do
1942: LD_ADDR_VAR 0 2
1946: PUSH
1947: DOUBLE
1948: LD_INT 1
1950: DEC
1951: ST_TO_ADDR
1952: LD_INT 2
1954: PUSH
1955: FOR_TO
1956: IFFALSE 1991
// begin hc_class := 18 ;
1958: LD_ADDR_OWVAR 28
1962: PUSH
1963: LD_INT 18
1965: ST_TO_ADDR
// hc_gallery :=  ;
1966: LD_ADDR_OWVAR 33
1970: PUSH
1971: LD_STRING 
1973: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1974: CALL_OW 44
1978: PPUSH
1979: LD_INT 18
1981: PPUSH
1982: LD_INT 0
1984: PPUSH
1985: CALL_OW 49
// end ;
1989: GO 1955
1991: POP
1992: POP
// for i := 1 to 2 do
1993: LD_ADDR_VAR 0 2
1997: PUSH
1998: DOUBLE
1999: LD_INT 1
2001: DEC
2002: ST_TO_ADDR
2003: LD_INT 2
2005: PUSH
2006: FOR_TO
2007: IFFALSE 2042
// begin hc_class := 13 ;
2009: LD_ADDR_OWVAR 28
2013: PUSH
2014: LD_INT 13
2016: ST_TO_ADDR
// hc_gallery :=  ;
2017: LD_ADDR_OWVAR 33
2021: PUSH
2022: LD_STRING 
2024: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
2025: CALL_OW 44
2029: PPUSH
2030: LD_INT 18
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: CALL_OW 49
// end ;
2040: GO 2006
2042: POP
2043: POP
// end ;
2044: LD_VAR 0 1
2048: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
2049: LD_INT 0
2051: PPUSH
2052: PPUSH
2053: PPUSH
2054: PPUSH
2055: PPUSH
// result := false ;
2056: LD_ADDR_VAR 0 4
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// if not sideList or not enemySide then
2064: LD_VAR 0 1
2068: NOT
2069: PUSH
2070: LD_VAR 0 2
2074: NOT
2075: OR
2076: IFFALSE 2080
// exit ;
2078: GO 2225
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
2080: LD_ADDR_VAR 0 7
2084: PUSH
2085: LD_INT 22
2087: PUSH
2088: LD_VAR 0 2
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: PPUSH
2097: CALL_OW 69
2101: ST_TO_ADDR
// if not tmp then
2102: LD_VAR 0 7
2106: NOT
2107: IFFALSE 2111
// exit ;
2109: GO 2225
// for s in sideList do
2111: LD_ADDR_VAR 0 6
2115: PUSH
2116: LD_VAR 0 1
2120: PUSH
2121: FOR_IN
2122: IFFALSE 2223
// for i in tmp do
2124: LD_ADDR_VAR 0 5
2128: PUSH
2129: LD_VAR 0 7
2133: PUSH
2134: FOR_IN
2135: IFFALSE 2219
// if See ( s , i ) then
2137: LD_VAR 0 6
2141: PPUSH
2142: LD_VAR 0 5
2146: PPUSH
2147: CALL_OW 292
2151: IFFALSE 2217
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
2153: LD_ADDR_VAR 0 8
2157: PUSH
2158: LD_INT 22
2160: PUSH
2161: LD_VAR 0 6
2165: PUSH
2166: EMPTY
2167: LIST
2168: LIST
2169: PPUSH
2170: CALL_OW 69
2174: PPUSH
2175: LD_VAR 0 5
2179: PPUSH
2180: CALL_OW 74
2184: ST_TO_ADDR
// if tmp2 in exceptUnits then
2185: LD_VAR 0 8
2189: PUSH
2190: LD_VAR 0 3
2194: IN
2195: IFFALSE 2201
// continue else
2197: GO 2134
2199: GO 2217
// begin result := tmp2 ;
2201: LD_ADDR_VAR 0 4
2205: PUSH
2206: LD_VAR 0 8
2210: ST_TO_ADDR
// exit ;
2211: POP
2212: POP
2213: POP
2214: POP
2215: GO 2225
// end ; end ;
2217: GO 2134
2219: POP
2220: POP
2221: GO 2121
2223: POP
2224: POP
// end ; end_of_file
2225: LD_VAR 0 4
2229: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
2230: LD_INT 0
2232: PPUSH
2233: PPUSH
// uc_side := 5 ;
2234: LD_ADDR_OWVAR 20
2238: PUSH
2239: LD_INT 5
2241: ST_TO_ADDR
// uc_nation := 2 ;
2242: LD_ADDR_OWVAR 21
2246: PUSH
2247: LD_INT 2
2249: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2250: LD_ADDR_EXP 36
2254: PUSH
2255: LD_STRING Abdul
2257: PPUSH
2258: LD_INT 0
2260: PPUSH
2261: LD_STRING 
2263: PPUSH
2264: CALL 366 0 3
2268: ST_TO_ADDR
// uc_side := 2 ;
2269: LD_ADDR_OWVAR 20
2273: PUSH
2274: LD_INT 2
2276: ST_TO_ADDR
// uc_nation := 2 ;
2277: LD_ADDR_OWVAR 21
2281: PUSH
2282: LD_INT 2
2284: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
2285: LD_ADDR_EXP 25
2289: PUSH
2290: LD_STRING Heike
2292: PPUSH
2293: LD_EXP 1
2297: NOT
2298: PPUSH
2299: LD_EXP 2
2303: PPUSH
2304: CALL 366 0 3
2308: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
2309: LD_ADDR_EXP 28
2313: PUSH
2314: LD_STRING Ibrahim
2316: PPUSH
2317: LD_EXP 1
2321: NOT
2322: PPUSH
2323: LD_EXP 2
2327: PPUSH
2328: CALL 366 0 3
2332: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
2333: LD_ADDR_EXP 26
2337: PUSH
2338: LD_STRING Givi
2340: PPUSH
2341: LD_EXP 1
2345: NOT
2346: PPUSH
2347: LD_EXP 2
2351: PPUSH
2352: CALL 366 0 3
2356: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
2357: LD_ADDR_EXP 29
2361: PUSH
2362: LD_STRING Kamil
2364: PPUSH
2365: LD_EXP 1
2369: NOT
2370: PPUSH
2371: LD_EXP 2
2375: PPUSH
2376: CALL 366 0 3
2380: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
2381: LD_ADDR_EXP 30
2385: PUSH
2386: LD_STRING Kaia
2388: PPUSH
2389: LD_EXP 1
2393: NOT
2394: PPUSH
2395: LD_EXP 2
2399: PPUSH
2400: CALL 366 0 3
2404: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
2405: LD_ADDR_EXP 31
2409: PUSH
2410: LD_STRING Sophia
2412: PPUSH
2413: LD_EXP 1
2417: NOT
2418: PPUSH
2419: LD_EXP 2
2423: PPUSH
2424: CALL 366 0 3
2428: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2429: LD_ADDR_EXP 32
2433: PUSH
2434: LD_STRING Markov
2436: PPUSH
2437: LD_EXP 1
2441: NOT
2442: PPUSH
2443: LD_EXP 2
2447: PPUSH
2448: CALL 366 0 3
2452: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2453: LD_ADDR_EXP 35
2457: PUSH
2458: LD_STRING Aviradze
2460: PPUSH
2461: LD_EXP 1
2465: NOT
2466: PPUSH
2467: LD_EXP 2
2471: PPUSH
2472: CALL 366 0 3
2476: ST_TO_ADDR
// aviradzeSquad := [ ] ;
2477: LD_ADDR_EXP 39
2481: PUSH
2482: EMPTY
2483: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
2484: LD_ADDR_EXP 37
2488: PUSH
2489: LD_STRING 03_others
2491: PPUSH
2492: CALL_OW 31
2496: ST_TO_ADDR
// uc_side := 5 ;
2497: LD_ADDR_OWVAR 20
2501: PUSH
2502: LD_INT 5
2504: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
2505: LD_ADDR_EXP 34
2509: PUSH
2510: LD_STRING Kurt
2512: PPUSH
2513: LD_INT 0
2515: PPUSH
2516: LD_STRING 
2518: PPUSH
2519: CALL 366 0 3
2523: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2524: LD_ADDR_EXP 27
2528: PUSH
2529: LD_STRING Mike
2531: PPUSH
2532: LD_EXP 1
2536: NOT
2537: PPUSH
2538: LD_EXP 2
2542: PPUSH
2543: CALL 366 0 3
2547: ST_TO_ADDR
// if Mike then
2548: LD_EXP 27
2552: IFFALSE 2575
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
2554: LD_EXP 27
2558: PPUSH
2559: LD_INT 142
2561: PPUSH
2562: LD_INT 63
2564: PPUSH
2565: LD_INT 2
2567: PPUSH
2568: LD_INT 0
2570: PPUSH
2571: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
2575: LD_EXP 34
2579: PPUSH
2580: LD_INT 142
2582: PPUSH
2583: LD_INT 63
2585: PPUSH
2586: LD_INT 3
2588: PPUSH
2589: LD_INT 0
2591: PPUSH
2592: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
2596: LD_EXP 34
2600: PUSH
2601: LD_EXP 27
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PPUSH
2610: CALL_OW 140
// end ;
2614: LD_VAR 0 1
2618: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
2619: LD_INT 0
2621: PPUSH
2622: PPUSH
2623: PPUSH
2624: PPUSH
// uc_side := 5 ;
2625: LD_ADDR_OWVAR 20
2629: PUSH
2630: LD_INT 5
2632: ST_TO_ADDR
// uc_nation := 2 ;
2633: LD_ADDR_OWVAR 21
2637: PUSH
2638: LD_INT 2
2640: ST_TO_ADDR
// InitHc ;
2641: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
2645: LD_ADDR_EXP 33
2649: PUSH
2650: LD_STRING Omar
2652: PPUSH
2653: LD_INT 0
2655: PPUSH
2656: LD_STRING 
2658: PPUSH
2659: CALL 366 0 3
2663: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
2664: LD_EXP 33
2668: PPUSH
2669: LD_INT 284
2671: PPUSH
2672: LD_INT 163
2674: PPUSH
2675: LD_INT 0
2677: PPUSH
2678: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
2682: LD_EXP 33
2686: PPUSH
2687: LD_INT 256
2689: PPUSH
2690: LD_INT 129
2692: PPUSH
2693: CALL_OW 111
// wait ( 0 0$2 ) ;
2697: LD_INT 70
2699: PPUSH
2700: CALL_OW 67
// omarSquad := [ ] ;
2704: LD_ADDR_EXP 38
2708: PUSH
2709: EMPTY
2710: ST_TO_ADDR
// for i := 1 to 5 do
2711: LD_ADDR_VAR 0 2
2715: PUSH
2716: DOUBLE
2717: LD_INT 1
2719: DEC
2720: ST_TO_ADDR
2721: LD_INT 5
2723: PUSH
2724: FOR_TO
2725: IFFALSE 2931
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
2727: LD_INT 5
2729: PPUSH
2730: LD_INT 2
2732: PPUSH
2733: LD_INT 13
2735: PUSH
2736: LD_INT 14
2738: PUSH
2739: EMPTY
2740: LIST
2741: LIST
2742: PUSH
2743: LD_VAR 0 2
2747: PUSH
2748: LD_INT 2
2750: MOD
2751: PUSH
2752: LD_INT 1
2754: PLUS
2755: ARRAY
2756: PPUSH
2757: LD_INT 1
2759: PPUSH
2760: LD_INT 1
2762: PPUSH
2763: LD_INT 25
2765: PUSH
2766: LD_INT 27
2768: PUSH
2769: LD_INT 26
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: LIST
2776: PUSH
2777: LD_VAR 0 2
2781: PUSH
2782: LD_INT 3
2784: MOD
2785: PUSH
2786: LD_INT 1
2788: PLUS
2789: ARRAY
2790: PPUSH
2791: LD_INT 100
2793: PPUSH
2794: CALL 429 0 7
// veh := CreateVehicle ;
2798: LD_ADDR_VAR 0 4
2802: PUSH
2803: CALL_OW 45
2807: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2808: LD_VAR 0 4
2812: PPUSH
2813: LD_INT 5
2815: PPUSH
2816: CALL_OW 233
// omarSquad := omarSquad union veh ;
2820: LD_ADDR_EXP 38
2824: PUSH
2825: LD_EXP 38
2829: PUSH
2830: LD_VAR 0 4
2834: UNION
2835: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
2836: LD_VAR 0 4
2840: PPUSH
2841: LD_INT 284
2843: PPUSH
2844: LD_INT 163
2846: PPUSH
2847: LD_INT 0
2849: PPUSH
2850: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
2854: LD_INT 0
2856: PPUSH
2857: LD_INT 3
2859: PPUSH
2860: LD_INT 2
2862: PPUSH
2863: CALL_OW 380
// un := CreateHuman ;
2867: LD_ADDR_VAR 0 3
2871: PUSH
2872: CALL_OW 44
2876: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2877: LD_ADDR_EXP 38
2881: PUSH
2882: LD_EXP 38
2886: PUSH
2887: LD_VAR 0 3
2891: UNION
2892: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2893: LD_VAR 0 3
2897: PPUSH
2898: LD_VAR 0 4
2902: PPUSH
2903: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
2907: LD_VAR 0 3
2911: PPUSH
2912: LD_INT 271
2914: PPUSH
2915: LD_INT 144
2917: PPUSH
2918: CALL_OW 111
// wait ( 0 0$2 ) ;
2922: LD_INT 70
2924: PPUSH
2925: CALL_OW 67
// end ;
2929: GO 2724
2931: POP
2932: POP
// for i := 1 to 3 do
2933: LD_ADDR_VAR 0 2
2937: PUSH
2938: DOUBLE
2939: LD_INT 1
2941: DEC
2942: ST_TO_ADDR
2943: LD_INT 3
2945: PUSH
2946: FOR_TO
2947: IFFALSE 3030
// begin PrepareHuman ( false , 1 , 2 ) ;
2949: LD_INT 0
2951: PPUSH
2952: LD_INT 1
2954: PPUSH
2955: LD_INT 2
2957: PPUSH
2958: CALL_OW 380
// un := CreateHuman ;
2962: LD_ADDR_VAR 0 3
2966: PUSH
2967: CALL_OW 44
2971: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2972: LD_ADDR_EXP 38
2976: PUSH
2977: LD_EXP 38
2981: PUSH
2982: LD_VAR 0 3
2986: UNION
2987: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
2988: LD_VAR 0 3
2992: PPUSH
2993: LD_INT 284
2995: PPUSH
2996: LD_INT 163
2998: PPUSH
2999: LD_INT 0
3001: PPUSH
3002: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
3006: LD_VAR 0 3
3010: PPUSH
3011: LD_INT 257
3013: PPUSH
3014: LD_INT 138
3016: PPUSH
3017: CALL_OW 111
// wait ( 0 0$1 ) ;
3021: LD_INT 35
3023: PPUSH
3024: CALL_OW 67
// end ;
3028: GO 2946
3030: POP
3031: POP
// for i := 1 to 6 do
3032: LD_ADDR_VAR 0 2
3036: PUSH
3037: DOUBLE
3038: LD_INT 1
3040: DEC
3041: ST_TO_ADDR
3042: LD_INT 6
3044: PUSH
3045: FOR_TO
3046: IFFALSE 3179
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
3048: LD_INT 0
3050: PPUSH
3051: LD_INT 1
3053: PUSH
3054: LD_INT 1
3056: PUSH
3057: LD_INT 4
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: LIST
3064: PUSH
3065: LD_VAR 0 2
3069: PUSH
3070: LD_INT 3
3072: MOD
3073: PUSH
3074: LD_INT 1
3076: PLUS
3077: ARRAY
3078: PPUSH
3079: LD_INT 3
3081: PPUSH
3082: CALL_OW 380
// un := CreateHuman ;
3086: LD_ADDR_VAR 0 3
3090: PUSH
3091: CALL_OW 44
3095: ST_TO_ADDR
// omarSquad := omarSquad union un ;
3096: LD_ADDR_EXP 38
3100: PUSH
3101: LD_EXP 38
3105: PUSH
3106: LD_VAR 0 3
3110: UNION
3111: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
3112: LD_VAR 0 3
3116: PPUSH
3117: LD_INT 225
3119: PPUSH
3120: LD_INT 163
3122: PPUSH
3123: LD_INT 0
3125: PPUSH
3126: CALL_OW 48
// if i = 1 then
3130: LD_VAR 0 2
3134: PUSH
3135: LD_INT 1
3137: EQUAL
3138: IFFALSE 3155
// SetAttr ( un , attr_speed , 12 ) ;
3140: LD_VAR 0 3
3144: PPUSH
3145: LD_INT 2
3147: PPUSH
3148: LD_INT 12
3150: PPUSH
3151: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
3155: LD_VAR 0 3
3159: PPUSH
3160: LD_INT 222
3162: PPUSH
3163: LD_INT 157
3165: PPUSH
3166: CALL_OW 111
// wait ( 0 0$1 ) ;
3170: LD_INT 35
3172: PPUSH
3173: CALL_OW 67
// end ;
3177: GO 3045
3179: POP
3180: POP
// end ; end_of_file
3181: LD_VAR 0 1
3185: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
3186: LD_INT 0
3188: PPUSH
3189: PPUSH
3190: PPUSH
3191: PPUSH
3192: PPUSH
3193: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
3194: LD_INT 3
3196: PPUSH
3197: LD_INT 149
3199: PPUSH
3200: LD_INT 67
3202: PPUSH
3203: CALL_OW 428
3207: PPUSH
3208: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
3212: LD_ADDR_EXP 50
3216: PUSH
3217: LD_INT 111
3219: PPUSH
3220: LD_INT 89
3222: PPUSH
3223: CALL_OW 428
3227: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
3228: LD_ADDR_VAR 0 2
3232: PUSH
3233: LD_INT 21
3235: PUSH
3236: LD_INT 3
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: LD_INT 23
3245: PUSH
3246: LD_INT 3
3248: PUSH
3249: EMPTY
3250: LIST
3251: LIST
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: PPUSH
3257: CALL_OW 69
3261: PUSH
3262: FOR_IN
3263: IFFALSE 3279
// SetBLevel ( i , 5 ) ;
3265: LD_VAR 0 2
3269: PPUSH
3270: LD_INT 5
3272: PPUSH
3273: CALL_OW 241
3277: GO 3262
3279: POP
3280: POP
// SetBName ( kirov , kirov ) ;
3281: LD_INT 71
3283: PPUSH
3284: LD_STRING kirov
3286: PPUSH
3287: CALL_OW 500
// SetBName ( beria , beria ) ;
3291: LD_INT 106
3293: PPUSH
3294: LD_STRING beria
3296: PPUSH
3297: CALL_OW 500
// SetBName ( kagan , kagan ) ;
3301: LD_INT 112
3303: PPUSH
3304: LD_STRING kagan
3306: PPUSH
3307: CALL_OW 500
// uc_side := 6 ;
3311: LD_ADDR_OWVAR 20
3315: PUSH
3316: LD_INT 6
3318: ST_TO_ADDR
// uc_nation := 3 ;
3319: LD_ADDR_OWVAR 21
3323: PUSH
3324: LD_INT 3
3326: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
3327: LD_ADDR_VAR 0 5
3331: PUSH
3332: LD_INT 22
3334: PUSH
3335: LD_INT 6
3337: PUSH
3338: EMPTY
3339: LIST
3340: LIST
3341: PUSH
3342: LD_INT 30
3344: PUSH
3345: LD_INT 5
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PPUSH
3356: CALL_OW 69
3360: PUSH
3361: LD_INT 1
3363: ARRAY
3364: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
3365: LD_ADDR_VAR 0 4
3369: PUSH
3370: LD_INT 22
3372: PUSH
3373: LD_INT 6
3375: PUSH
3376: EMPTY
3377: LIST
3378: LIST
3379: PUSH
3380: LD_INT 30
3382: PUSH
3383: LD_INT 4
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: PUSH
3390: EMPTY
3391: LIST
3392: LIST
3393: PPUSH
3394: CALL_OW 69
3398: PUSH
3399: LD_INT 1
3401: ARRAY
3402: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
3403: LD_ADDR_EXP 44
3407: PUSH
3408: EMPTY
3409: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
3410: LD_ADDR_EXP 45
3414: PUSH
3415: EMPTY
3416: ST_TO_ADDR
// russianPatrol := [ ] ;
3417: LD_ADDR_EXP 47
3421: PUSH
3422: EMPTY
3423: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
3424: LD_ADDR_EXP 40
3428: PUSH
3429: LD_STRING Kurin
3431: PPUSH
3432: LD_INT 0
3434: PPUSH
3435: LD_STRING 
3437: PPUSH
3438: CALL 366 0 3
3442: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
3443: LD_EXP 40
3447: PPUSH
3448: LD_INT 71
3450: PPUSH
3451: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
3455: LD_ADDR_EXP 42
3459: PUSH
3460: LD_STRING Popov
3462: PPUSH
3463: LD_INT 0
3465: PPUSH
3466: LD_STRING 
3468: PPUSH
3469: CALL 366 0 3
3473: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
3474: LD_EXP 42
3478: PPUSH
3479: LD_INT 71
3481: PPUSH
3482: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
3486: LD_ADDR_EXP 41
3490: PUSH
3491: LD_STRING Grishko
3493: PPUSH
3494: LD_INT 0
3496: PPUSH
3497: LD_STRING 
3499: PPUSH
3500: CALL 366 0 3
3504: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
3505: LD_EXP 41
3509: PPUSH
3510: LD_INT 207
3512: PPUSH
3513: LD_INT 106
3515: PPUSH
3516: LD_INT 0
3518: PPUSH
3519: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
3523: LD_EXP 41
3527: PPUSH
3528: LD_INT 209
3530: PPUSH
3531: LD_INT 106
3533: PPUSH
3534: CALL_OW 118
// for i := 1 to 2 do
3538: LD_ADDR_VAR 0 2
3542: PUSH
3543: DOUBLE
3544: LD_INT 1
3546: DEC
3547: ST_TO_ADDR
3548: LD_INT 2
3550: PUSH
3551: FOR_TO
3552: IFFALSE 3607
// begin PrepareHuman ( false , 2 , 2 ) ;
3554: LD_INT 0
3556: PPUSH
3557: LD_INT 2
3559: PPUSH
3560: LD_INT 2
3562: PPUSH
3563: CALL_OW 380
// un := CreateHuman ;
3567: LD_ADDR_VAR 0 3
3571: PUSH
3572: CALL_OW 44
3576: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
3577: LD_VAR 0 3
3581: PPUSH
3582: LD_INT 71
3584: PPUSH
3585: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3589: LD_ADDR_EXP 44
3593: PUSH
3594: LD_EXP 44
3598: PUSH
3599: LD_VAR 0 3
3603: UNION
3604: ST_TO_ADDR
// end ;
3605: GO 3551
3607: POP
3608: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
3609: LD_ADDR_VAR 0 2
3613: PUSH
3614: DOUBLE
3615: LD_INT 1
3617: DEC
3618: ST_TO_ADDR
3619: LD_INT 5
3621: PUSH
3622: LD_INT 6
3624: PUSH
3625: LD_INT 6
3627: PUSH
3628: EMPTY
3629: LIST
3630: LIST
3631: LIST
3632: PUSH
3633: LD_OWVAR 67
3637: ARRAY
3638: PUSH
3639: FOR_TO
3640: IFFALSE 3714
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3642: LD_INT 0
3644: PPUSH
3645: LD_INT 1
3647: PPUSH
3648: LD_INT 2
3650: PUSH
3651: LD_INT 3
3653: PUSH
3654: LD_INT 4
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: LIST
3661: PUSH
3662: LD_OWVAR 67
3666: ARRAY
3667: PPUSH
3668: CALL_OW 380
// un := CreateHuman ;
3672: LD_ADDR_VAR 0 3
3676: PUSH
3677: CALL_OW 44
3681: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
3682: LD_VAR 0 3
3686: PPUSH
3687: LD_VAR 0 5
3691: PPUSH
3692: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3696: LD_ADDR_EXP 44
3700: PUSH
3701: LD_EXP 44
3705: PUSH
3706: LD_VAR 0 3
3710: UNION
3711: ST_TO_ADDR
// end ;
3712: GO 3639
3714: POP
3715: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
3716: LD_ADDR_VAR 0 2
3720: PUSH
3721: LD_INT 22
3723: PUSH
3724: LD_INT 6
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: LD_INT 30
3733: PUSH
3734: LD_INT 32
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: PUSH
3741: EMPTY
3742: LIST
3743: LIST
3744: PPUSH
3745: CALL_OW 69
3749: PUSH
3750: FOR_IN
3751: IFFALSE 3825
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 ] [ Difficulty ] ) ;
3753: LD_INT 0
3755: PPUSH
3756: LD_INT 1
3758: PPUSH
3759: LD_INT 3
3761: PUSH
3762: LD_INT 4
3764: PUSH
3765: LD_INT 4
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: LIST
3772: PUSH
3773: LD_OWVAR 67
3777: ARRAY
3778: PPUSH
3779: CALL_OW 380
// un := CreateHuman ;
3783: LD_ADDR_VAR 0 3
3787: PUSH
3788: CALL_OW 44
3792: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
3793: LD_VAR 0 3
3797: PPUSH
3798: LD_VAR 0 2
3802: PPUSH
3803: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3807: LD_ADDR_EXP 44
3811: PUSH
3812: LD_EXP 44
3816: PUSH
3817: LD_VAR 0 3
3821: UNION
3822: ST_TO_ADDR
// end ;
3823: GO 3750
3825: POP
3826: POP
// for i := 1 to 3 do
3827: LD_ADDR_VAR 0 2
3831: PUSH
3832: DOUBLE
3833: LD_INT 1
3835: DEC
3836: ST_TO_ADDR
3837: LD_INT 3
3839: PUSH
3840: FOR_TO
3841: IFFALSE 3896
// begin PrepareHuman ( false , 3 , 3 ) ;
3843: LD_INT 0
3845: PPUSH
3846: LD_INT 3
3848: PPUSH
3849: LD_INT 3
3851: PPUSH
3852: CALL_OW 380
// un := CreateHuman ;
3856: LD_ADDR_VAR 0 3
3860: PUSH
3861: CALL_OW 44
3865: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
3866: LD_VAR 0 3
3870: PPUSH
3871: LD_INT 92
3873: PPUSH
3874: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3878: LD_ADDR_EXP 44
3882: PUSH
3883: LD_EXP 44
3887: PUSH
3888: LD_VAR 0 3
3892: UNION
3893: ST_TO_ADDR
// end ;
3894: GO 3840
3896: POP
3897: POP
// for i := 1 to 2 do
3898: LD_ADDR_VAR 0 2
3902: PUSH
3903: DOUBLE
3904: LD_INT 1
3906: DEC
3907: ST_TO_ADDR
3908: LD_INT 2
3910: PUSH
3911: FOR_TO
3912: IFFALSE 3967
// begin PrepareHuman ( false , 4 , 3 ) ;
3914: LD_INT 0
3916: PPUSH
3917: LD_INT 4
3919: PPUSH
3920: LD_INT 3
3922: PPUSH
3923: CALL_OW 380
// un := CreateHuman ;
3927: LD_ADDR_VAR 0 3
3931: PUSH
3932: CALL_OW 44
3936: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
3937: LD_VAR 0 3
3941: PPUSH
3942: LD_INT 83
3944: PPUSH
3945: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3949: LD_ADDR_EXP 44
3953: PUSH
3954: LD_EXP 44
3958: PUSH
3959: LD_VAR 0 3
3963: UNION
3964: ST_TO_ADDR
// end ;
3965: GO 3911
3967: POP
3968: POP
// for i := 1 to 5 do
3969: LD_ADDR_VAR 0 2
3973: PUSH
3974: DOUBLE
3975: LD_INT 1
3977: DEC
3978: ST_TO_ADDR
3979: LD_INT 5
3981: PUSH
3982: FOR_TO
3983: IFFALSE 4040
// begin PrepareHuman ( false , 1 , 3 ) ;
3985: LD_INT 0
3987: PPUSH
3988: LD_INT 1
3990: PPUSH
3991: LD_INT 3
3993: PPUSH
3994: CALL_OW 380
// un := CreateHuman ;
3998: LD_ADDR_VAR 0 3
4002: PUSH
4003: CALL_OW 44
4007: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
4008: LD_VAR 0 3
4012: PPUSH
4013: LD_VAR 0 4
4017: PPUSH
4018: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
4022: LD_ADDR_EXP 46
4026: PUSH
4027: LD_EXP 46
4031: PUSH
4032: LD_VAR 0 3
4036: UNION
4037: ST_TO_ADDR
// end ;
4038: GO 3982
4040: POP
4041: POP
// russianCargo := [ ] ;
4042: LD_ADDR_EXP 49
4046: PUSH
4047: EMPTY
4048: ST_TO_ADDR
// for i := 1 to 2 do
4049: LD_ADDR_VAR 0 2
4053: PUSH
4054: DOUBLE
4055: LD_INT 1
4057: DEC
4058: ST_TO_ADDR
4059: LD_INT 2
4061: PUSH
4062: FOR_TO
4063: IFFALSE 4195
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
4065: LD_INT 6
4067: PPUSH
4068: LD_INT 3
4070: PPUSH
4071: LD_INT 21
4073: PPUSH
4074: LD_INT 1
4076: PPUSH
4077: LD_INT 1
4079: PPUSH
4080: LD_INT 51
4082: PPUSH
4083: LD_INT 100
4085: PPUSH
4086: CALL 429 0 7
// un := CreateVehicle ;
4090: LD_ADDR_VAR 0 3
4094: PUSH
4095: CALL_OW 45
4099: ST_TO_ADDR
// russianCargo := russianCargo union un ;
4100: LD_ADDR_EXP 49
4104: PUSH
4105: LD_EXP 49
4109: PUSH
4110: LD_VAR 0 3
4114: UNION
4115: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
4116: LD_VAR 0 3
4120: PPUSH
4121: LD_INT 2
4123: PPUSH
4124: LD_INT 100
4126: PPUSH
4127: CALL_OW 290
// SetDir ( un , 4 ) ;
4131: LD_VAR 0 3
4135: PPUSH
4136: LD_INT 4
4138: PPUSH
4139: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
4143: LD_VAR 0 3
4147: PPUSH
4148: LD_INT 147
4150: PPUSH
4151: LD_INT 103
4153: PPUSH
4154: LD_INT 4
4156: PPUSH
4157: LD_INT 0
4159: PPUSH
4160: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
4164: LD_INT 0
4166: PPUSH
4167: LD_INT 1
4169: PPUSH
4170: LD_OWVAR 67
4174: PPUSH
4175: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
4179: CALL_OW 44
4183: PPUSH
4184: LD_VAR 0 3
4188: PPUSH
4189: CALL_OW 52
// end ;
4193: GO 4062
4195: POP
4196: POP
// uc_side := 3 ;
4197: LD_ADDR_OWVAR 20
4201: PUSH
4202: LD_INT 3
4204: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
4205: LD_ADDR_EXP 43
4209: PUSH
4210: LD_STRING Burlak
4212: PPUSH
4213: LD_INT 0
4215: PPUSH
4216: LD_STRING 
4218: PPUSH
4219: CALL 366 0 3
4223: ST_TO_ADDR
// for i := 1 to 5 do
4224: LD_ADDR_VAR 0 2
4228: PUSH
4229: DOUBLE
4230: LD_INT 1
4232: DEC
4233: ST_TO_ADDR
4234: LD_INT 5
4236: PUSH
4237: FOR_TO
4238: IFFALSE 4331
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
4240: LD_INT 0
4242: PPUSH
4243: LD_INT 1
4245: PPUSH
4246: LD_OWVAR 67
4250: PUSH
4251: LD_INT 1
4253: PLUS
4254: PPUSH
4255: CALL_OW 380
// un := CreateHuman ;
4259: LD_ADDR_VAR 0 3
4263: PUSH
4264: CALL_OW 44
4268: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
4269: LD_VAR 0 3
4273: PPUSH
4274: LD_INT 22
4276: PUSH
4277: LD_INT 3
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: LD_INT 30
4286: PUSH
4287: LD_INT 32
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: PPUSH
4298: CALL_OW 69
4302: PUSH
4303: LD_VAR 0 2
4307: ARRAY
4308: PPUSH
4309: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4313: LD_ADDR_EXP 45
4317: PUSH
4318: LD_EXP 45
4322: PUSH
4323: LD_VAR 0 3
4327: UNION
4328: ST_TO_ADDR
// end ;
4329: GO 4237
4331: POP
4332: POP
// for i := 1 to 2 do
4333: LD_ADDR_VAR 0 2
4337: PUSH
4338: DOUBLE
4339: LD_INT 1
4341: DEC
4342: ST_TO_ADDR
4343: LD_INT 2
4345: PUSH
4346: FOR_TO
4347: IFFALSE 4438
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
4349: LD_INT 0
4351: PPUSH
4352: LD_INT 1
4354: PPUSH
4355: LD_OWVAR 67
4359: PUSH
4360: LD_INT 1
4362: PLUS
4363: PPUSH
4364: CALL_OW 380
// un := CreateHuman ;
4368: LD_ADDR_VAR 0 3
4372: PUSH
4373: CALL_OW 44
4377: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
4378: LD_VAR 0 3
4382: PPUSH
4383: LD_INT 22
4385: PUSH
4386: LD_INT 3
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: PUSH
4393: LD_INT 30
4395: PUSH
4396: LD_INT 5
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: PPUSH
4407: CALL_OW 69
4411: PUSH
4412: LD_INT 1
4414: ARRAY
4415: PPUSH
4416: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4420: LD_ADDR_EXP 45
4424: PUSH
4425: LD_EXP 45
4429: PUSH
4430: LD_VAR 0 3
4434: UNION
4435: ST_TO_ADDR
// end ;
4436: GO 4346
4438: POP
4439: POP
// for i := 1 to 2 do
4440: LD_ADDR_VAR 0 2
4444: PUSH
4445: DOUBLE
4446: LD_INT 1
4448: DEC
4449: ST_TO_ADDR
4450: LD_INT 2
4452: PUSH
4453: FOR_TO
4454: IFFALSE 4541
// begin PrepareHuman ( false , 4 , Difficulty ) ;
4456: LD_INT 0
4458: PPUSH
4459: LD_INT 4
4461: PPUSH
4462: LD_OWVAR 67
4466: PPUSH
4467: CALL_OW 380
// un := CreateHuman ;
4471: LD_ADDR_VAR 0 3
4475: PUSH
4476: CALL_OW 44
4480: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
4481: LD_VAR 0 3
4485: PPUSH
4486: LD_INT 22
4488: PUSH
4489: LD_INT 3
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 30
4498: PUSH
4499: LD_INT 7
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: PPUSH
4510: CALL_OW 69
4514: PUSH
4515: LD_INT 1
4517: ARRAY
4518: PPUSH
4519: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4523: LD_ADDR_EXP 45
4527: PUSH
4528: LD_EXP 45
4532: PUSH
4533: LD_VAR 0 3
4537: UNION
4538: ST_TO_ADDR
// end ;
4539: GO 4453
4541: POP
4542: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
4543: LD_INT 0
4545: PPUSH
4546: LD_INT 2
4548: PPUSH
4549: LD_OWVAR 67
4553: PPUSH
4554: CALL_OW 380
// un := CreateHuman ;
4558: LD_ADDR_VAR 0 3
4562: PUSH
4563: CALL_OW 44
4567: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
4568: LD_VAR 0 3
4572: PPUSH
4573: LD_INT 106
4575: PPUSH
4576: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4580: LD_ADDR_EXP 45
4584: PUSH
4585: LD_EXP 45
4589: PUSH
4590: LD_VAR 0 3
4594: UNION
4595: ST_TO_ADDR
// for i := 1 to 3 do
4596: LD_ADDR_VAR 0 2
4600: PUSH
4601: DOUBLE
4602: LD_INT 1
4604: DEC
4605: ST_TO_ADDR
4606: LD_INT 3
4608: PUSH
4609: FOR_TO
4610: IFFALSE 4732
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
4612: LD_ADDR_VAR 0 6
4616: PUSH
4617: LD_INT 22
4619: PUSH
4620: LD_INT 3
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: PUSH
4627: LD_INT 30
4629: PUSH
4630: LD_INT 31
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: PPUSH
4641: CALL_OW 69
4645: PUSH
4646: LD_VAR 0 2
4650: ARRAY
4651: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
4652: LD_INT 0
4654: PPUSH
4655: LD_INT 1
4657: PPUSH
4658: LD_OWVAR 67
4662: PPUSH
4663: CALL_OW 380
// un := CreateHuman ;
4667: LD_ADDR_VAR 0 3
4671: PUSH
4672: CALL_OW 44
4676: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
4677: LD_VAR 0 3
4681: PPUSH
4682: LD_VAR 0 6
4686: PPUSH
4687: CALL_OW 254
4691: PUSH
4692: LD_INT 3
4694: PLUS
4695: PPUSH
4696: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
4700: LD_VAR 0 3
4704: PPUSH
4705: LD_VAR 0 6
4709: PPUSH
4710: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4714: LD_ADDR_EXP 45
4718: PUSH
4719: LD_EXP 45
4723: PUSH
4724: LD_VAR 0 3
4728: UNION
4729: ST_TO_ADDR
// end ;
4730: GO 4609
4732: POP
4733: POP
// if Difficulty > 1 then
4734: LD_OWVAR 67
4738: PUSH
4739: LD_INT 1
4741: GREATER
4742: IFFALSE 4817
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
4744: LD_ADDR_VAR 0 3
4748: PUSH
4749: LD_INT 3
4751: PPUSH
4752: LD_INT 3
4754: PPUSH
4755: LD_INT 23
4757: PPUSH
4758: LD_INT 1
4760: PPUSH
4761: LD_INT 1
4763: PPUSH
4764: LD_INT 44
4766: PPUSH
4767: LD_INT 100
4769: PPUSH
4770: CALL 429 0 7
4774: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
4775: LD_VAR 0 3
4779: PPUSH
4780: LD_INT 73
4782: PPUSH
4783: LD_INT 110
4785: PPUSH
4786: LD_INT 0
4788: PPUSH
4789: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
4793: LD_INT 0
4795: PPUSH
4796: LD_INT 3
4798: PPUSH
4799: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
4803: CALL_OW 44
4807: PPUSH
4808: LD_VAR 0 3
4812: PPUSH
4813: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
4817: LD_ADDR_EXP 48
4821: PUSH
4822: EMPTY
4823: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 ] [ Difficulty ] do
4824: LD_ADDR_VAR 0 2
4828: PUSH
4829: DOUBLE
4830: LD_INT 1
4832: DEC
4833: ST_TO_ADDR
4834: LD_INT 6
4836: PUSH
4837: LD_INT 7
4839: PUSH
4840: LD_INT 8
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: LIST
4847: PUSH
4848: LD_OWVAR 67
4852: ARRAY
4853: PUSH
4854: FOR_TO
4855: IFFALSE 5079
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
4857: LD_INT 3
4859: PPUSH
4860: LD_INT 3
4862: PPUSH
4863: LD_INT 21
4865: PUSH
4866: LD_INT 23
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PUSH
4873: LD_VAR 0 2
4877: PUSH
4878: LD_INT 2
4880: MOD
4881: PUSH
4882: LD_INT 1
4884: PLUS
4885: ARRAY
4886: PPUSH
4887: LD_INT 1
4889: PPUSH
4890: LD_INT 1
4892: PPUSH
4893: LD_INT 43
4895: PUSH
4896: LD_INT 44
4898: PUSH
4899: LD_INT 42
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: LIST
4906: PUSH
4907: LD_VAR 0 2
4911: PUSH
4912: LD_INT 3
4914: MOD
4915: PUSH
4916: LD_INT 1
4918: PLUS
4919: ARRAY
4920: PPUSH
4921: LD_INT 100
4923: PPUSH
4924: CALL 429 0 7
// un := CreateVehicle ;
4928: LD_ADDR_VAR 0 3
4932: PUSH
4933: CALL_OW 45
4937: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
4938: LD_VAR 0 3
4942: PPUSH
4943: LD_INT 0
4945: PUSH
4946: LD_INT 5
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: PUSH
4953: LD_INT 1
4955: PPUSH
4956: LD_INT 2
4958: PPUSH
4959: CALL_OW 12
4963: ARRAY
4964: PPUSH
4965: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
4969: LD_ADDR_EXP 48
4973: PUSH
4974: LD_EXP 48
4978: PUSH
4979: LD_VAR 0 3
4983: UNION
4984: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
4985: LD_VAR 0 3
4989: PPUSH
4990: LD_INT 127
4992: PPUSH
4993: LD_INT 89
4995: PPUSH
4996: LD_INT 7
4998: PPUSH
4999: LD_INT 0
5001: PPUSH
5002: CALL_OW 50
// uc_side := 3 ;
5006: LD_ADDR_OWVAR 20
5010: PUSH
5011: LD_INT 3
5013: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
5014: LD_INT 0
5016: PPUSH
5017: LD_INT 3
5019: PPUSH
5020: LD_INT 3
5022: PPUSH
5023: CALL_OW 380
// un := CreateHuman ;
5027: LD_ADDR_VAR 0 3
5031: PUSH
5032: CALL_OW 44
5036: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
5037: LD_ADDR_EXP 48
5041: PUSH
5042: LD_EXP 48
5046: PUSH
5047: LD_VAR 0 3
5051: UNION
5052: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
5053: LD_VAR 0 3
5057: PPUSH
5058: LD_EXP 48
5062: PUSH
5063: LD_EXP 48
5067: PUSH
5068: LD_INT 1
5070: MINUS
5071: ARRAY
5072: PPUSH
5073: CALL_OW 52
// end ;
5077: GO 4854
5079: POP
5080: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
5081: LD_ADDR_VAR 0 2
5085: PUSH
5086: DOUBLE
5087: LD_INT 1
5089: DEC
5090: ST_TO_ADDR
5091: LD_INT 3
5093: PUSH
5094: LD_INT 4
5096: PUSH
5097: LD_INT 5
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: LIST
5104: PUSH
5105: LD_OWVAR 67
5109: ARRAY
5110: PUSH
5111: FOR_TO
5112: IFFALSE 5178
// begin PrepareHuman ( false , 1 , Difficulty ) ;
5114: LD_INT 0
5116: PPUSH
5117: LD_INT 1
5119: PPUSH
5120: LD_OWVAR 67
5124: PPUSH
5125: CALL_OW 380
// un := CreateHuman ;
5129: LD_ADDR_VAR 0 3
5133: PUSH
5134: CALL_OW 44
5138: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
5139: LD_ADDR_EXP 48
5143: PUSH
5144: LD_EXP 48
5148: PUSH
5149: LD_VAR 0 3
5153: UNION
5154: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
5155: LD_VAR 0 3
5159: PPUSH
5160: LD_INT 91
5162: PPUSH
5163: LD_INT 60
5165: PPUSH
5166: LD_INT 3
5168: PPUSH
5169: LD_INT 0
5171: PPUSH
5172: CALL_OW 50
// end ;
5176: GO 5111
5178: POP
5179: POP
// end ;
5180: LD_VAR 0 1
5184: RET
// every 0 0$3 do var i ;
5185: GO 5187
5187: DISABLE
5188: LD_INT 0
5190: PPUSH
// begin for i := 1 to 4 do
5191: LD_ADDR_VAR 0 1
5195: PUSH
5196: DOUBLE
5197: LD_INT 1
5199: DEC
5200: ST_TO_ADDR
5201: LD_INT 4
5203: PUSH
5204: FOR_TO
5205: IFFALSE 5224
// ComExitBuilding ( grishkoSquad [ i ] ) ;
5207: LD_EXP 46
5211: PUSH
5212: LD_VAR 0 1
5216: ARRAY
5217: PPUSH
5218: CALL_OW 122
5222: GO 5204
5224: POP
5225: POP
// wait ( 3 ) ;
5226: LD_INT 3
5228: PPUSH
5229: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
5233: LD_EXP 46
5237: PUSH
5238: LD_INT 1
5240: ARRAY
5241: PPUSH
5242: LD_INT 22
5244: PUSH
5245: LD_INT 6
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: PUSH
5252: LD_INT 30
5254: PUSH
5255: LD_INT 31
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: PPUSH
5266: CALL_OW 69
5270: PPUSH
5271: LD_EXP 46
5275: PUSH
5276: LD_INT 1
5278: ARRAY
5279: PPUSH
5280: CALL_OW 74
5284: PPUSH
5285: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
5289: LD_EXP 46
5293: PUSH
5294: LD_INT 2
5296: ARRAY
5297: PPUSH
5298: LD_INT 211
5300: PPUSH
5301: LD_INT 107
5303: PPUSH
5304: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
5308: LD_EXP 46
5312: PUSH
5313: LD_INT 2
5315: ARRAY
5316: PPUSH
5317: LD_INT 209
5319: PPUSH
5320: LD_INT 106
5322: PPUSH
5323: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
5327: LD_EXP 46
5331: PUSH
5332: LD_INT 3
5334: ARRAY
5335: PPUSH
5336: LD_INT 209
5338: PPUSH
5339: LD_INT 103
5341: PPUSH
5342: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
5346: LD_EXP 46
5350: PUSH
5351: LD_INT 3
5353: ARRAY
5354: PPUSH
5355: LD_INT 209
5357: PPUSH
5358: LD_INT 106
5360: PPUSH
5361: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
5365: LD_EXP 46
5369: PUSH
5370: LD_INT 4
5372: ARRAY
5373: PPUSH
5374: LD_INT 227
5376: PPUSH
5377: LD_INT 117
5379: PPUSH
5380: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
5384: LD_EXP 46
5388: PUSH
5389: LD_INT 4
5391: ARRAY
5392: PPUSH
5393: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
5397: LD_INT 700
5399: PPUSH
5400: CALL_OW 67
// for i := 3 downto 2 do
5404: LD_ADDR_VAR 0 1
5408: PUSH
5409: DOUBLE
5410: LD_INT 3
5412: INC
5413: ST_TO_ADDR
5414: LD_INT 2
5416: PUSH
5417: FOR_DOWNTO
5418: IFFALSE 5585
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
5420: LD_EXP 46
5424: PUSH
5425: LD_VAR 0 1
5429: ARRAY
5430: PPUSH
5431: LD_INT 200
5433: PPUSH
5434: LD_INT 91
5436: PPUSH
5437: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5441: LD_EXP 46
5445: PUSH
5446: LD_VAR 0 1
5450: ARRAY
5451: PPUSH
5452: LD_INT 210
5454: PPUSH
5455: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
5459: LD_EXP 46
5463: PUSH
5464: LD_VAR 0 1
5468: ARRAY
5469: PPUSH
5470: LD_INT 224
5472: PPUSH
5473: LD_INT 93
5475: PPUSH
5476: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5480: LD_EXP 46
5484: PUSH
5485: LD_VAR 0 1
5489: ARRAY
5490: PPUSH
5491: LD_INT 210
5493: PPUSH
5494: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
5498: LD_EXP 46
5502: PUSH
5503: LD_VAR 0 1
5507: ARRAY
5508: PPUSH
5509: LD_INT 239
5511: PPUSH
5512: LD_INT 123
5514: PPUSH
5515: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5519: LD_EXP 46
5523: PUSH
5524: LD_VAR 0 1
5528: ARRAY
5529: PPUSH
5530: LD_INT 210
5532: PPUSH
5533: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
5537: LD_EXP 46
5541: PUSH
5542: LD_VAR 0 1
5546: ARRAY
5547: PPUSH
5548: LD_INT 212
5550: PPUSH
5551: LD_INT 105
5553: PPUSH
5554: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
5558: LD_EXP 46
5562: PUSH
5563: LD_VAR 0 1
5567: ARRAY
5568: PPUSH
5569: LD_INT 700
5571: PPUSH
5572: CALL_OW 202
// wait ( 0 0$30 ) ;
5576: LD_INT 1050
5578: PPUSH
5579: CALL_OW 67
// end ;
5583: GO 5417
5585: POP
5586: POP
// until not activeGrishkoAI ;
5587: LD_EXP 10
5591: NOT
5592: IFFALSE 5397
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
5594: LD_EXP 46
5598: PPUSH
5599: LD_INT 221
5601: PPUSH
5602: LD_INT 110
5604: PPUSH
5605: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
5609: LD_EXP 46
5613: PPUSH
5614: LD_INT 228
5616: PPUSH
5617: LD_INT 115
5619: PPUSH
5620: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
5624: LD_EXP 46
5628: PPUSH
5629: CALL_OW 200
// end ;
5633: PPOPN 1
5635: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
5636: LD_EXP 12
5640: IFFALSE 6382
5642: GO 5644
5644: DISABLE
5645: LD_INT 0
5647: PPUSH
5648: PPUSH
5649: PPUSH
5650: PPUSH
// begin uc_side := 6 ;
5651: LD_ADDR_OWVAR 20
5655: PUSH
5656: LD_INT 6
5658: ST_TO_ADDR
// uc_nation := 3 ;
5659: LD_ADDR_OWVAR 21
5663: PUSH
5664: LD_INT 3
5666: ST_TO_ADDR
// for i := 1 to 3 do
5667: LD_ADDR_VAR 0 2
5671: PUSH
5672: DOUBLE
5673: LD_INT 1
5675: DEC
5676: ST_TO_ADDR
5677: LD_INT 3
5679: PUSH
5680: FOR_TO
5681: IFFALSE 5790
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
5683: LD_INT 0
5685: PPUSH
5686: LD_INT 1
5688: PPUSH
5689: LD_INT 2
5691: PUSH
5692: LD_INT 3
5694: PUSH
5695: LD_INT 4
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: LIST
5702: PUSH
5703: LD_OWVAR 67
5707: ARRAY
5708: PPUSH
5709: CALL_OW 380
// un := CreateHuman ;
5713: LD_ADDR_VAR 0 1
5717: PUSH
5718: CALL_OW 44
5722: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
5723: LD_ADDR_EXP 47
5727: PUSH
5728: LD_EXP 47
5732: PUSH
5733: LD_VAR 0 1
5737: UNION
5738: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5739: LD_VAR 0 1
5743: PPUSH
5744: LD_INT 1
5746: PPUSH
5747: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
5751: LD_VAR 0 1
5755: PPUSH
5756: LD_INT 11
5758: PPUSH
5759: LD_INT 0
5761: PPUSH
5762: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
5766: LD_VAR 0 1
5770: PPUSH
5771: LD_INT 210
5773: PPUSH
5774: LD_INT 159
5776: PPUSH
5777: CALL_OW 111
// wait ( 0 0$2 ) ;
5781: LD_INT 70
5783: PPUSH
5784: CALL_OW 67
// end ;
5788: GO 5680
5790: POP
5791: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
5792: LD_ADDR_VAR 0 4
5796: PUSH
5797: LD_INT 172
5799: PUSH
5800: LD_INT 76
5802: PUSH
5803: EMPTY
5804: LIST
5805: LIST
5806: PUSH
5807: LD_INT 150
5809: PUSH
5810: LD_INT 38
5812: PUSH
5813: EMPTY
5814: LIST
5815: LIST
5816: PUSH
5817: LD_INT 148
5819: PUSH
5820: LD_INT 9
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: PUSH
5827: LD_INT 165
5829: PUSH
5830: LD_INT 38
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: PUSH
5837: EMPTY
5838: LIST
5839: LIST
5840: LIST
5841: LIST
5842: PUSH
5843: LD_INT 191
5845: PUSH
5846: LD_INT 77
5848: PUSH
5849: EMPTY
5850: LIST
5851: LIST
5852: PUSH
5853: LD_INT 168
5855: PUSH
5856: LD_INT 42
5858: PUSH
5859: EMPTY
5860: LIST
5861: LIST
5862: PUSH
5863: LD_INT 166
5865: PUSH
5866: LD_INT 11
5868: PUSH
5869: EMPTY
5870: LIST
5871: LIST
5872: PUSH
5873: LD_INT 151
5875: PUSH
5876: LD_INT 12
5878: PUSH
5879: EMPTY
5880: LIST
5881: LIST
5882: PUSH
5883: EMPTY
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: PUSH
5889: LD_INT 221
5891: PUSH
5892: LD_INT 88
5894: PUSH
5895: EMPTY
5896: LIST
5897: LIST
5898: PUSH
5899: LD_INT 217
5901: PUSH
5902: LD_INT 64
5904: PUSH
5905: EMPTY
5906: LIST
5907: LIST
5908: PUSH
5909: LD_INT 232
5911: PUSH
5912: LD_INT 66
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: PUSH
5919: LD_INT 200
5921: PUSH
5922: LD_INT 56
5924: PUSH
5925: EMPTY
5926: LIST
5927: LIST
5928: PUSH
5929: EMPTY
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: LIST
5939: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5940: LD_INT 35
5942: PPUSH
5943: CALL_OW 67
// for i := russianPatrol downto 1 do
5947: LD_ADDR_VAR 0 2
5951: PUSH
5952: DOUBLE
5953: LD_EXP 47
5957: INC
5958: ST_TO_ADDR
5959: LD_INT 1
5961: PUSH
5962: FOR_DOWNTO
5963: IFFALSE 6346
// begin if IsDead ( russianPatrol [ i ] ) then
5965: LD_EXP 47
5969: PUSH
5970: LD_VAR 0 2
5974: ARRAY
5975: PPUSH
5976: CALL_OW 301
5980: IFFALSE 5984
// continue ;
5982: GO 5962
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
5984: LD_EXP 47
5988: PUSH
5989: LD_VAR 0 2
5993: ARRAY
5994: PPUSH
5995: CALL_OW 256
5999: PUSH
6000: LD_INT 990
6002: LESS
6003: PUSH
6004: LD_EXP 47
6008: PUSH
6009: LD_VAR 0 2
6013: ARRAY
6014: PPUSH
6015: CALL_OW 110
6019: PUSH
6020: LD_INT 1
6022: EQUAL
6023: AND
6024: IFFALSE 6044
// SetTag ( russianPatrol [ i ] , 2 ) ;
6026: LD_EXP 47
6030: PUSH
6031: LD_VAR 0 2
6035: ARRAY
6036: PPUSH
6037: LD_INT 2
6039: PPUSH
6040: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
6044: LD_EXP 47
6048: PUSH
6049: LD_VAR 0 2
6053: ARRAY
6054: PPUSH
6055: CALL_OW 110
6059: PUSH
6060: LD_INT 2
6062: EQUAL
6063: IFFALSE 6130
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
6065: LD_EXP 47
6069: PUSH
6070: LD_VAR 0 2
6074: ARRAY
6075: PPUSH
6076: LD_INT 166
6078: PPUSH
6079: LD_INT 101
6081: PPUSH
6082: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
6086: LD_EXP 47
6090: PUSH
6091: LD_VAR 0 2
6095: ARRAY
6096: PPUSH
6097: LD_INT 71
6099: PPUSH
6100: CALL_OW 296
6104: PUSH
6105: LD_INT 10
6107: LESS
6108: IFFALSE 6128
// SetTag ( russianPatrol [ i ] , 3 ) ;
6110: LD_EXP 47
6114: PUSH
6115: LD_VAR 0 2
6119: ARRAY
6120: PPUSH
6121: LD_INT 3
6123: PPUSH
6124: CALL_OW 109
// continue ;
6128: GO 5962
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
6130: LD_EXP 47
6134: PUSH
6135: LD_VAR 0 2
6139: ARRAY
6140: PPUSH
6141: CALL_OW 110
6145: PUSH
6146: LD_INT 3
6148: EQUAL
6149: IFFALSE 6244
// begin spottedByPatrol := true ;
6151: LD_ADDR_EXP 7
6155: PUSH
6156: LD_INT 1
6158: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
6159: LD_EXP 47
6163: PUSH
6164: LD_VAR 0 2
6168: ARRAY
6169: PPUSH
6170: CALL_OW 250
6174: PPUSH
6175: LD_EXP 47
6179: PUSH
6180: LD_VAR 0 2
6184: ARRAY
6185: PPUSH
6186: CALL_OW 251
6190: PPUSH
6191: LD_INT 2
6193: PPUSH
6194: LD_INT 6
6196: NEG
6197: PPUSH
6198: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
6202: LD_EXP 47
6206: PUSH
6207: LD_VAR 0 2
6211: ARRAY
6212: PPUSH
6213: CALL_OW 87
// DialogueOn ;
6217: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
6221: LD_EXP 25
6225: PPUSH
6226: LD_STRING DH-Spot-f-3
6228: PPUSH
6229: CALL_OW 88
// DialogueOff ;
6233: CALL_OW 7
// YouLost ( Spotted ) ;
6237: LD_STRING Spotted
6239: PPUSH
6240: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
6244: LD_EXP 47
6248: PUSH
6249: LD_VAR 0 2
6253: ARRAY
6254: PPUSH
6255: CALL_OW 314
6259: NOT
6260: IFFALSE 6344
// for j in patrol [ i ] do
6262: LD_ADDR_VAR 0 3
6266: PUSH
6267: LD_VAR 0 4
6271: PUSH
6272: LD_VAR 0 2
6276: ARRAY
6277: PUSH
6278: FOR_IN
6279: IFFALSE 6342
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
6281: LD_EXP 47
6285: PUSH
6286: LD_VAR 0 2
6290: ARRAY
6291: PPUSH
6292: LD_INT 35
6294: PPUSH
6295: LD_INT 175
6297: PPUSH
6298: CALL_OW 12
6302: PPUSH
6303: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
6307: LD_EXP 47
6311: PUSH
6312: LD_VAR 0 2
6316: ARRAY
6317: PPUSH
6318: LD_VAR 0 3
6322: PUSH
6323: LD_INT 1
6325: ARRAY
6326: PPUSH
6327: LD_VAR 0 3
6331: PUSH
6332: LD_INT 2
6334: ARRAY
6335: PPUSH
6336: CALL_OW 174
// end ;
6340: GO 6278
6342: POP
6343: POP
// end ;
6344: GO 5962
6346: POP
6347: POP
// until not russianPatrol or russianAlert ;
6348: LD_EXP 47
6352: NOT
6353: PUSH
6354: LD_EXP 9
6358: OR
6359: IFFALSE 5940
// if russianPatrol then
6361: LD_EXP 47
6365: IFFALSE 6382
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
6367: LD_EXP 47
6371: PPUSH
6372: LD_INT 161
6374: PPUSH
6375: LD_INT 107
6377: PPUSH
6378: CALL_OW 114
// end ;
6382: PPOPN 4
6384: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
6385: LD_EXP 6
6389: PUSH
6390: LD_EXP 13
6394: NOT
6395: AND
6396: IFFALSE 6882
6398: GO 6400
6400: DISABLE
6401: LD_INT 0
6403: PPUSH
6404: PPUSH
6405: PPUSH
6406: PPUSH
6407: PPUSH
// begin enable ;
6408: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
6409: LD_ADDR_VAR 0 2
6413: PUSH
6414: LD_EXP 48
6418: PPUSH
6419: LD_INT 21
6421: PUSH
6422: LD_INT 2
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: PPUSH
6429: CALL_OW 72
6433: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
6434: LD_ADDR_VAR 0 4
6438: PUSH
6439: LD_INT 22
6441: PUSH
6442: LD_INT 4
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: PPUSH
6449: CALL_OW 69
6453: ST_TO_ADDR
// for i in filter do
6454: LD_ADDR_VAR 0 1
6458: PUSH
6459: LD_VAR 0 2
6463: PUSH
6464: FOR_IN
6465: IFFALSE 6880
// begin tmp := IsDrivenBy ( i ) ;
6467: LD_ADDR_VAR 0 3
6471: PUSH
6472: LD_VAR 0 1
6476: PPUSH
6477: CALL_OW 311
6481: ST_TO_ADDR
// if not tmp then
6482: LD_VAR 0 3
6486: NOT
6487: IFFALSE 6491
// continue ;
6489: GO 6464
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
6491: LD_VAR 0 1
6495: PPUSH
6496: CALL_OW 261
6500: PUSH
6501: LD_INT 90
6503: GREATER
6504: PUSH
6505: LD_VAR 0 1
6509: PPUSH
6510: CALL_OW 110
6514: PUSH
6515: LD_INT 2
6517: EQUAL
6518: AND
6519: IFFALSE 6535
// SetTag ( i , 0 ) else
6521: LD_VAR 0 1
6525: PPUSH
6526: LD_INT 0
6528: PPUSH
6529: CALL_OW 109
6533: GO 6631
// if GetTag ( i ) = 2 then
6535: LD_VAR 0 1
6539: PPUSH
6540: CALL_OW 110
6544: PUSH
6545: LD_INT 2
6547: EQUAL
6548: IFFALSE 6631
// begin x := rand ( 1 , 2 ) ;
6550: LD_ADDR_VAR 0 5
6554: PUSH
6555: LD_INT 1
6557: PPUSH
6558: LD_INT 2
6560: PPUSH
6561: CALL_OW 12
6565: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
6566: LD_VAR 0 1
6570: PPUSH
6571: LD_EXP 49
6575: PUSH
6576: LD_VAR 0 5
6580: ARRAY
6581: PPUSH
6582: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
6586: LD_EXP 49
6590: PUSH
6591: LD_VAR 0 5
6595: ARRAY
6596: PPUSH
6597: LD_INT 2
6599: PPUSH
6600: CALL_OW 289
6604: PUSH
6605: LD_INT 20
6607: LESS
6608: IFFALSE 6631
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
6610: LD_EXP 49
6614: PUSH
6615: LD_VAR 0 5
6619: ARRAY
6620: PPUSH
6621: LD_INT 2
6623: PPUSH
6624: LD_INT 100
6626: PPUSH
6627: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
6631: LD_VAR 0 1
6635: PPUSH
6636: CALL_OW 256
6640: PUSH
6641: LD_INT 600
6643: GREATEREQUAL
6644: PUSH
6645: LD_VAR 0 1
6649: PPUSH
6650: CALL_OW 110
6654: NOT
6655: AND
6656: IFFALSE 6682
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6658: LD_VAR 0 1
6662: PPUSH
6663: LD_VAR 0 4
6667: PPUSH
6668: LD_VAR 0 1
6672: PPUSH
6673: CALL_OW 74
6677: PPUSH
6678: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
6682: LD_VAR 0 1
6686: PPUSH
6687: CALL_OW 256
6691: PUSH
6692: LD_INT 600
6694: LESS
6695: PUSH
6696: LD_VAR 0 1
6700: PPUSH
6701: CALL_OW 110
6705: NOT
6706: AND
6707: IFFALSE 6736
// begin SetTag ( i , 1 ) ;
6709: LD_VAR 0 1
6713: PPUSH
6714: LD_INT 1
6716: PPUSH
6717: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
6721: LD_VAR 0 1
6725: PPUSH
6726: LD_INT 62
6728: PPUSH
6729: LD_INT 22
6731: PPUSH
6732: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
6736: LD_VAR 0 1
6740: PPUSH
6741: CALL_OW 110
6745: PUSH
6746: LD_INT 1
6748: EQUAL
6749: PUSH
6750: LD_VAR 0 1
6754: PPUSH
6755: LD_INT 62
6757: PPUSH
6758: LD_INT 22
6760: PPUSH
6761: CALL_OW 297
6765: PUSH
6766: LD_INT 6
6768: LESS
6769: AND
6770: PUSH
6771: LD_VAR 0 3
6775: AND
6776: IFFALSE 6878
// begin ComExitVehicle ( tmp ) ;
6778: LD_VAR 0 3
6782: PPUSH
6783: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
6787: LD_VAR 0 3
6791: PPUSH
6792: LD_VAR 0 1
6796: PPUSH
6797: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
6801: LD_INT 35
6803: PPUSH
6804: CALL_OW 67
// until GetLives ( i ) = 1000 ;
6808: LD_VAR 0 1
6812: PPUSH
6813: CALL_OW 256
6817: PUSH
6818: LD_INT 1000
6820: EQUAL
6821: IFFALSE 6801
// ComEnterUnit ( tmp , i ) ;
6823: LD_VAR 0 3
6827: PPUSH
6828: LD_VAR 0 1
6832: PPUSH
6833: CALL_OW 120
// if GetFuel ( i ) <= 90 then
6837: LD_VAR 0 1
6841: PPUSH
6842: CALL_OW 261
6846: PUSH
6847: LD_INT 90
6849: LESSEQUAL
6850: IFFALSE 6866
// SetTag ( i , 2 ) else
6852: LD_VAR 0 1
6856: PPUSH
6857: LD_INT 2
6859: PPUSH
6860: CALL_OW 109
6864: GO 6878
// SetTag ( i , 0 ) ;
6866: LD_VAR 0 1
6870: PPUSH
6871: LD_INT 0
6873: PPUSH
6874: CALL_OW 109
// end ; end ;
6878: GO 6464
6880: POP
6881: POP
// end ;
6882: PPOPN 5
6884: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
6885: LD_EXP 20
6889: IFFALSE 7112
6891: GO 6893
6893: DISABLE
6894: LD_INT 0
6896: PPUSH
6897: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
6898: LD_EXP 49
6902: PPUSH
6903: LD_INT 79
6905: PPUSH
6906: LD_INT 155
6908: PPUSH
6909: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
6913: LD_EXP 49
6917: PPUSH
6918: LD_INT 16
6920: PPUSH
6921: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6925: LD_ADDR_VAR 0 2
6929: PUSH
6930: LD_EXP 48
6934: PPUSH
6935: LD_INT 50
6937: PUSH
6938: EMPTY
6939: LIST
6940: PPUSH
6941: CALL_OW 72
6945: ST_TO_ADDR
// for i in tmp do
6946: LD_ADDR_VAR 0 1
6950: PUSH
6951: LD_VAR 0 2
6955: PUSH
6956: FOR_IN
6957: IFFALSE 6991
// begin ComAgressiveMove ( i , 123 , 60 ) ;
6959: LD_VAR 0 1
6963: PPUSH
6964: LD_INT 123
6966: PPUSH
6967: LD_INT 60
6969: PPUSH
6970: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
6974: LD_VAR 0 1
6978: PPUSH
6979: LD_INT 153
6981: PPUSH
6982: LD_INT 103
6984: PPUSH
6985: CALL_OW 174
// end ;
6989: GO 6956
6991: POP
6992: POP
// repeat wait ( 0 0$1 ) ;
6993: LD_INT 35
6995: PPUSH
6996: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
7000: LD_ADDR_VAR 0 2
7004: PUSH
7005: LD_EXP 48
7009: PPUSH
7010: LD_INT 50
7012: PUSH
7013: EMPTY
7014: LIST
7015: PPUSH
7016: CALL_OW 72
7020: ST_TO_ADDR
// for i in tmp do
7021: LD_ADDR_VAR 0 1
7025: PUSH
7026: LD_VAR 0 2
7030: PUSH
7031: FOR_IN
7032: IFFALSE 7103
// if not HasTask ( i ) then
7034: LD_VAR 0 1
7038: PPUSH
7039: CALL_OW 314
7043: NOT
7044: IFFALSE 7101
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
7046: LD_VAR 0 1
7050: PPUSH
7051: LD_INT 81
7053: PUSH
7054: LD_INT 3
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PUSH
7061: LD_INT 3
7063: PUSH
7064: LD_INT 21
7066: PUSH
7067: LD_INT 3
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: PPUSH
7082: CALL_OW 69
7086: PPUSH
7087: LD_VAR 0 1
7091: PPUSH
7092: CALL_OW 74
7096: PPUSH
7097: CALL_OW 115
7101: GO 7031
7103: POP
7104: POP
7105: LD_VAR 0 2
7109: NOT
7110: IFFALSE 6993
// end ;
7112: PPOPN 2
7114: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
7115: LD_INT 22
7117: PUSH
7118: LD_INT 3
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: LD_INT 32
7127: PUSH
7128: LD_INT 1
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PPUSH
7139: CALL_OW 69
7143: IFFALSE 7222
7145: GO 7147
7147: DISABLE
7148: LD_INT 0
7150: PPUSH
// begin enable ;
7151: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
7152: LD_ADDR_VAR 0 1
7156: PUSH
7157: LD_INT 22
7159: PUSH
7160: LD_INT 3
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 32
7169: PUSH
7170: LD_INT 1
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PPUSH
7181: CALL_OW 69
7185: PUSH
7186: FOR_IN
7187: IFFALSE 7220
// if GetFuel ( i ) < 1 then
7189: LD_VAR 0 1
7193: PPUSH
7194: CALL_OW 261
7198: PUSH
7199: LD_INT 1
7201: LESS
7202: IFFALSE 7218
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
7204: LD_VAR 0 1
7208: PPUSH
7209: CALL_OW 311
7213: PPUSH
7214: CALL_OW 121
7218: GO 7186
7220: POP
7221: POP
// end ; end_of_file
7222: PPOPN 1
7224: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
7225: LD_INT 0
7227: PPUSH
7228: PPUSH
7229: PPUSH
// SetBName ( omikron , omikron ) ;
7230: LD_INT 64
7232: PPUSH
7233: LD_STRING omikron
7235: PPUSH
7236: CALL_OW 500
// uc_side := 4 ;
7240: LD_ADDR_OWVAR 20
7244: PUSH
7245: LD_INT 4
7247: ST_TO_ADDR
// uc_nation := 1 ;
7248: LD_ADDR_OWVAR 21
7252: PUSH
7253: LD_INT 1
7255: ST_TO_ADDR
// omicronSquad := [ ] ;
7256: LD_ADDR_EXP 51
7260: PUSH
7261: EMPTY
7262: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
7263: LD_ADDR_VAR 0 2
7267: PUSH
7268: LD_INT 22
7270: PUSH
7271: LD_INT 4
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: LD_INT 2
7280: PUSH
7281: LD_INT 30
7283: PUSH
7284: LD_INT 32
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PUSH
7291: LD_INT 30
7293: PUSH
7294: LD_INT 31
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: PUSH
7301: EMPTY
7302: LIST
7303: LIST
7304: LIST
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PPUSH
7310: CALL_OW 69
7314: PUSH
7315: FOR_IN
7316: IFFALSE 7373
// begin PrepareHuman ( false , 1 , 1 ) ;
7318: LD_INT 0
7320: PPUSH
7321: LD_INT 1
7323: PPUSH
7324: LD_INT 1
7326: PPUSH
7327: CALL_OW 380
// un := CreateHuman ;
7331: LD_ADDR_VAR 0 3
7335: PUSH
7336: CALL_OW 44
7340: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7341: LD_ADDR_EXP 51
7345: PUSH
7346: LD_EXP 51
7350: PUSH
7351: LD_VAR 0 3
7355: UNION
7356: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
7357: LD_VAR 0 3
7361: PPUSH
7362: LD_VAR 0 2
7366: PPUSH
7367: CALL_OW 52
// end ;
7371: GO 7315
7373: POP
7374: POP
// for i := 1 to 3 do
7375: LD_ADDR_VAR 0 2
7379: PUSH
7380: DOUBLE
7381: LD_INT 1
7383: DEC
7384: ST_TO_ADDR
7385: LD_INT 3
7387: PUSH
7388: FOR_TO
7389: IFFALSE 7444
// begin PrepareHuman ( false , 2 , 2 ) ;
7391: LD_INT 0
7393: PPUSH
7394: LD_INT 2
7396: PPUSH
7397: LD_INT 2
7399: PPUSH
7400: CALL_OW 380
// un := CreateHuman ;
7404: LD_ADDR_VAR 0 3
7408: PUSH
7409: CALL_OW 44
7413: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7414: LD_ADDR_EXP 51
7418: PUSH
7419: LD_EXP 51
7423: PUSH
7424: LD_VAR 0 3
7428: UNION
7429: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
7430: LD_VAR 0 3
7434: PPUSH
7435: LD_INT 64
7437: PPUSH
7438: CALL_OW 52
// end ;
7442: GO 7388
7444: POP
7445: POP
// for i := 1 to 2 do
7446: LD_ADDR_VAR 0 2
7450: PUSH
7451: DOUBLE
7452: LD_INT 1
7454: DEC
7455: ST_TO_ADDR
7456: LD_INT 2
7458: PUSH
7459: FOR_TO
7460: IFFALSE 7599
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
7462: LD_INT 4
7464: PPUSH
7465: LD_INT 1
7467: PPUSH
7468: LD_INT 2
7470: PPUSH
7471: LD_INT 2
7473: PPUSH
7474: LD_INT 1
7476: PPUSH
7477: LD_INT 3
7479: PPUSH
7480: LD_INT 100
7482: PPUSH
7483: CALL 429 0 7
// un := CreateVehicle ;
7487: LD_ADDR_VAR 0 3
7491: PUSH
7492: CALL_OW 45
7496: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7497: LD_ADDR_EXP 51
7501: PUSH
7502: LD_EXP 51
7506: PUSH
7507: LD_VAR 0 3
7511: UNION
7512: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
7513: LD_VAR 0 3
7517: PPUSH
7518: LD_INT 28
7520: PPUSH
7521: LD_INT 37
7523: PPUSH
7524: LD_INT 6
7526: PPUSH
7527: LD_INT 0
7529: PPUSH
7530: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
7534: LD_INT 0
7536: PPUSH
7537: LD_INT 3
7539: PPUSH
7540: LD_INT 2
7542: PPUSH
7543: CALL_OW 380
// un := CreateHuman ;
7547: LD_ADDR_VAR 0 3
7551: PUSH
7552: CALL_OW 44
7556: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7557: LD_ADDR_EXP 51
7561: PUSH
7562: LD_EXP 51
7566: PUSH
7567: LD_VAR 0 3
7571: UNION
7572: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
7573: LD_VAR 0 3
7577: PPUSH
7578: LD_EXP 51
7582: PUSH
7583: LD_EXP 51
7587: PUSH
7588: LD_INT 1
7590: MINUS
7591: ARRAY
7592: PPUSH
7593: CALL_OW 52
// end ;
7597: GO 7459
7599: POP
7600: POP
// end ;
7601: LD_VAR 0 1
7605: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
7606: LD_INT 0
7608: PPUSH
7609: PPUSH
7610: PPUSH
7611: PPUSH
// uc_side := 4 ;
7612: LD_ADDR_OWVAR 20
7616: PUSH
7617: LD_INT 4
7619: ST_TO_ADDR
// uc_nation := 1 ;
7620: LD_ADDR_OWVAR 21
7624: PUSH
7625: LD_INT 1
7627: ST_TO_ADDR
// tmp := [ ] ;
7628: LD_ADDR_VAR 0 4
7632: PUSH
7633: EMPTY
7634: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7635: LD_INT 4
7637: PPUSH
7638: LD_INT 1
7640: PPUSH
7641: LD_INT 2
7643: PPUSH
7644: LD_INT 1
7646: PPUSH
7647: LD_INT 1
7649: PPUSH
7650: LD_INT 4
7652: PPUSH
7653: LD_INT 77
7655: PPUSH
7656: CALL 429 0 7
// un := CreateVehicle ;
7660: LD_ADDR_VAR 0 3
7664: PUSH
7665: CALL_OW 45
7669: ST_TO_ADDR
// tmp := tmp union un ;
7670: LD_ADDR_VAR 0 4
7674: PUSH
7675: LD_VAR 0 4
7679: PUSH
7680: LD_VAR 0 3
7684: UNION
7685: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7686: LD_VAR 0 3
7690: PPUSH
7691: LD_INT 2
7693: PPUSH
7694: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
7698: LD_VAR 0 3
7702: PPUSH
7703: LD_INT 106
7705: PPUSH
7706: LD_INT 3
7708: PPUSH
7709: LD_INT 0
7711: PPUSH
7712: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
7716: LD_INT 0
7718: PPUSH
7719: LD_INT 3
7721: PPUSH
7722: LD_INT 2
7724: PPUSH
7725: CALL_OW 380
// un := CreateHuman ;
7729: LD_ADDR_VAR 0 3
7733: PUSH
7734: CALL_OW 44
7738: ST_TO_ADDR
// tmp := tmp union un ;
7739: LD_ADDR_VAR 0 4
7743: PUSH
7744: LD_VAR 0 4
7748: PUSH
7749: LD_VAR 0 3
7753: UNION
7754: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7755: LD_VAR 0 3
7759: PPUSH
7760: LD_VAR 0 4
7764: PUSH
7765: LD_VAR 0 4
7769: PUSH
7770: LD_INT 1
7772: MINUS
7773: ARRAY
7774: PPUSH
7775: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7779: LD_VAR 0 3
7783: PPUSH
7784: LD_INT 109
7786: PPUSH
7787: LD_INT 9
7789: PPUSH
7790: CALL_OW 111
// wait ( 0 0$1 ) ;
7794: LD_INT 35
7796: PPUSH
7797: CALL_OW 67
// for i := 1 to 2 do
7801: LD_ADDR_VAR 0 2
7805: PUSH
7806: DOUBLE
7807: LD_INT 1
7809: DEC
7810: ST_TO_ADDR
7811: LD_INT 2
7813: PUSH
7814: FOR_TO
7815: IFFALSE 7879
// begin PrepareHuman ( false , 1 , 2 ) ;
7817: LD_INT 0
7819: PPUSH
7820: LD_INT 1
7822: PPUSH
7823: LD_INT 2
7825: PPUSH
7826: CALL_OW 380
// un := CreateHuman ;
7830: LD_ADDR_VAR 0 3
7834: PUSH
7835: CALL_OW 44
7839: ST_TO_ADDR
// tmp := tmp union un ;
7840: LD_ADDR_VAR 0 4
7844: PUSH
7845: LD_VAR 0 4
7849: PUSH
7850: LD_VAR 0 3
7854: UNION
7855: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7856: LD_VAR 0 3
7860: PPUSH
7861: LD_INT 105
7863: PPUSH
7864: LD_INT 2
7866: PPUSH
7867: LD_INT 2
7869: PPUSH
7870: LD_INT 0
7872: PPUSH
7873: CALL_OW 50
// end ;
7877: GO 7814
7879: POP
7880: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7881: LD_VAR 0 4
7885: PPUSH
7886: LD_INT 26
7888: PPUSH
7889: LD_INT 35
7891: PPUSH
7892: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7896: LD_INT 35
7898: PPUSH
7899: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7903: LD_VAR 0 4
7907: PPUSH
7908: LD_INT 50
7910: PUSH
7911: EMPTY
7912: LIST
7913: PPUSH
7914: CALL_OW 72
7918: NOT
7919: IFFALSE 7923
// exit ;
7921: GO 8050
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7923: LD_VAR 0 4
7927: PPUSH
7928: LD_INT 91
7930: PUSH
7931: LD_INT 64
7933: PUSH
7934: LD_INT 12
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: LIST
7941: PPUSH
7942: CALL_OW 72
7946: PUSH
7947: LD_VAR 0 4
7951: EQUAL
7952: IFFALSE 7896
// omicronSquad := omicronSquad union tmp ;
7954: LD_ADDR_EXP 51
7958: PUSH
7959: LD_EXP 51
7963: PUSH
7964: LD_VAR 0 4
7968: UNION
7969: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7970: LD_ADDR_VAR 0 2
7974: PUSH
7975: LD_VAR 0 4
7979: PPUSH
7980: LD_INT 25
7982: PUSH
7983: LD_INT 1
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: PPUSH
7990: CALL_OW 72
7994: PUSH
7995: FOR_IN
7996: IFFALSE 8048
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7998: LD_VAR 0 2
8002: PPUSH
8003: LD_INT 22
8005: PUSH
8006: LD_INT 4
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: PUSH
8013: LD_INT 30
8015: PUSH
8016: LD_INT 4
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PPUSH
8027: CALL_OW 69
8031: PPUSH
8032: LD_VAR 0 2
8036: PPUSH
8037: CALL_OW 74
8041: PPUSH
8042: CALL_OW 120
8046: GO 7995
8048: POP
8049: POP
// end ;
8050: LD_VAR 0 1
8054: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
8055: LD_EXP 13
8059: NOT
8060: IFFALSE 8631
8062: GO 8064
8064: DISABLE
8065: LD_INT 0
8067: PPUSH
8068: PPUSH
8069: PPUSH
8070: PPUSH
// begin enable ;
8071: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8072: LD_ADDR_VAR 0 2
8076: PUSH
8077: LD_INT 22
8079: PUSH
8080: LD_INT 4
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PUSH
8087: LD_INT 21
8089: PUSH
8090: LD_INT 3
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: PUSH
8097: LD_INT 3
8099: PUSH
8100: LD_INT 24
8102: PUSH
8103: LD_INT 1000
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: LIST
8118: PPUSH
8119: CALL_OW 69
8123: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
8124: LD_ADDR_VAR 0 3
8128: PUSH
8129: LD_EXP 51
8133: PPUSH
8134: LD_INT 25
8136: PUSH
8137: LD_INT 2
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: PPUSH
8144: CALL_OW 72
8148: ST_TO_ADDR
// if filter and tmp then
8149: LD_VAR 0 2
8153: PUSH
8154: LD_VAR 0 3
8158: AND
8159: IFFALSE 8232
// begin for i in tmp do
8161: LD_ADDR_VAR 0 1
8165: PUSH
8166: LD_VAR 0 3
8170: PUSH
8171: FOR_IN
8172: IFFALSE 8228
// if IsInUnit ( i ) then
8174: LD_VAR 0 1
8178: PPUSH
8179: CALL_OW 310
8183: IFFALSE 8196
// ComExitBuilding ( i ) else
8185: LD_VAR 0 1
8189: PPUSH
8190: CALL_OW 122
8194: GO 8226
// if not HasTask ( i ) then
8196: LD_VAR 0 1
8200: PPUSH
8201: CALL_OW 314
8205: NOT
8206: IFFALSE 8226
// ComRepairBuilding ( i , filter [ 1 ] ) ;
8208: LD_VAR 0 1
8212: PPUSH
8213: LD_VAR 0 2
8217: PUSH
8218: LD_INT 1
8220: ARRAY
8221: PPUSH
8222: CALL_OW 130
8226: GO 8171
8228: POP
8229: POP
// end else
8230: GO 8303
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
8232: LD_VAR 0 3
8236: PPUSH
8237: LD_INT 3
8239: PUSH
8240: LD_INT 54
8242: PUSH
8243: EMPTY
8244: LIST
8245: PUSH
8246: EMPTY
8247: LIST
8248: LIST
8249: PPUSH
8250: CALL_OW 72
8254: IFFALSE 8303
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
8256: LD_ADDR_VAR 0 1
8260: PUSH
8261: LD_VAR 0 3
8265: PPUSH
8266: LD_INT 3
8268: PUSH
8269: LD_INT 54
8271: PUSH
8272: EMPTY
8273: LIST
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: PPUSH
8279: CALL_OW 72
8283: PUSH
8284: FOR_IN
8285: IFFALSE 8301
// ComEnterUnit ( i , omikron ) ;
8287: LD_VAR 0 1
8291: PPUSH
8292: LD_INT 64
8294: PPUSH
8295: CALL_OW 120
8299: GO 8284
8301: POP
8302: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
8303: LD_ADDR_VAR 0 2
8307: PUSH
8308: LD_EXP 51
8312: PPUSH
8313: LD_INT 21
8315: PUSH
8316: LD_INT 2
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: PPUSH
8323: CALL_OW 72
8327: ST_TO_ADDR
// if not filter then
8328: LD_VAR 0 2
8332: NOT
8333: IFFALSE 8337
// exit ;
8335: GO 8631
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
8337: LD_ADDR_VAR 0 4
8341: PUSH
8342: LD_INT 13
8344: PPUSH
8345: LD_INT 81
8347: PUSH
8348: LD_INT 4
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: PPUSH
8355: CALL_OW 70
8359: ST_TO_ADDR
// if enemy then
8360: LD_VAR 0 4
8364: IFFALSE 8631
// begin for i in filter do
8366: LD_ADDR_VAR 0 1
8370: PUSH
8371: LD_VAR 0 2
8375: PUSH
8376: FOR_IN
8377: IFFALSE 8629
// begin tmp := IsDrivenBy ( i ) ;
8379: LD_ADDR_VAR 0 3
8383: PUSH
8384: LD_VAR 0 1
8388: PPUSH
8389: CALL_OW 311
8393: ST_TO_ADDR
// if not tmp then
8394: LD_VAR 0 3
8398: NOT
8399: IFFALSE 8403
// continue ;
8401: GO 8376
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
8403: LD_VAR 0 1
8407: PPUSH
8408: CALL_OW 256
8412: PUSH
8413: LD_INT 600
8415: GREATEREQUAL
8416: PUSH
8417: LD_VAR 0 1
8421: PPUSH
8422: CALL_OW 110
8426: PUSH
8427: LD_INT 1
8429: NONEQUAL
8430: AND
8431: IFFALSE 8457
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8433: LD_VAR 0 1
8437: PPUSH
8438: LD_VAR 0 4
8442: PPUSH
8443: LD_VAR 0 1
8447: PPUSH
8448: CALL_OW 74
8452: PPUSH
8453: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
8457: LD_VAR 0 1
8461: PPUSH
8462: CALL_OW 256
8466: PUSH
8467: LD_INT 600
8469: LESS
8470: PUSH
8471: LD_VAR 0 1
8475: PPUSH
8476: CALL_OW 110
8480: PUSH
8481: LD_INT 1
8483: NONEQUAL
8484: AND
8485: IFFALSE 8514
// begin SetTag ( i , 1 ) ;
8487: LD_VAR 0 1
8491: PPUSH
8492: LD_INT 1
8494: PPUSH
8495: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
8499: LD_VAR 0 1
8503: PPUSH
8504: LD_INT 27
8506: PPUSH
8507: LD_INT 35
8509: PPUSH
8510: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
8514: LD_VAR 0 1
8518: PPUSH
8519: CALL_OW 110
8523: PUSH
8524: LD_INT 1
8526: EQUAL
8527: PUSH
8528: LD_VAR 0 1
8532: PPUSH
8533: LD_INT 27
8535: PPUSH
8536: LD_INT 35
8538: PPUSH
8539: CALL_OW 297
8543: PUSH
8544: LD_INT 6
8546: LESS
8547: AND
8548: PUSH
8549: LD_VAR 0 3
8553: AND
8554: IFFALSE 8627
// begin ComExitVehicle ( tmp ) ;
8556: LD_VAR 0 3
8560: PPUSH
8561: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8565: LD_VAR 0 3
8569: PPUSH
8570: LD_VAR 0 1
8574: PPUSH
8575: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8579: LD_INT 35
8581: PPUSH
8582: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8586: LD_VAR 0 1
8590: PPUSH
8591: CALL_OW 256
8595: PUSH
8596: LD_INT 1000
8598: EQUAL
8599: IFFALSE 8579
// ComEnterUnit ( tmp , i ) ;
8601: LD_VAR 0 3
8605: PPUSH
8606: LD_VAR 0 1
8610: PPUSH
8611: CALL_OW 120
// SetTag ( i , 0 ) ;
8615: LD_VAR 0 1
8619: PPUSH
8620: LD_INT 0
8622: PPUSH
8623: CALL_OW 109
// end ; end ;
8627: GO 8376
8629: POP
8630: POP
// end ; end ;
8631: PPOPN 4
8633: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
8634: LD_EXP 13
8638: IFFALSE 8782
8640: GO 8642
8642: DISABLE
8643: LD_INT 0
8645: PPUSH
8646: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
8647: LD_ADDR_VAR 0 2
8651: PUSH
8652: LD_EXP 51
8656: PPUSH
8657: LD_INT 21
8659: PUSH
8660: LD_INT 1
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: PUSH
8667: LD_INT 50
8669: PUSH
8670: EMPTY
8671: LIST
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: PPUSH
8677: CALL_OW 72
8681: ST_TO_ADDR
// if not tmp then
8682: LD_VAR 0 2
8686: NOT
8687: IFFALSE 8691
// exit ;
8689: GO 8782
// repeat wait ( 0 0$1 ) ;
8691: LD_INT 35
8693: PPUSH
8694: CALL_OW 67
// for i in tmp do
8698: LD_ADDR_VAR 0 1
8702: PUSH
8703: LD_VAR 0 2
8707: PUSH
8708: FOR_IN
8709: IFFALSE 8773
// begin ComExit ( i ) ;
8711: LD_VAR 0 1
8715: PPUSH
8716: CALL 867 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
8720: LD_VAR 0 1
8724: PPUSH
8725: LD_INT 14
8727: PPUSH
8728: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
8732: LD_VAR 0 1
8736: PPUSH
8737: LD_INT 14
8739: PPUSH
8740: CALL_OW 308
8744: IFFALSE 8771
// begin tmp := tmp diff i ;
8746: LD_ADDR_VAR 0 2
8750: PUSH
8751: LD_VAR 0 2
8755: PUSH
8756: LD_VAR 0 1
8760: DIFF
8761: ST_TO_ADDR
// RemoveUnit ( i ) ;
8762: LD_VAR 0 1
8766: PPUSH
8767: CALL_OW 64
// end ; end ;
8771: GO 8708
8773: POP
8774: POP
// until not tmp ;
8775: LD_VAR 0 2
8779: NOT
8780: IFFALSE 8691
// end ; end_of_file
8782: PPOPN 2
8784: END
// export function Action ; var i , un , veh , tmp ; begin
8785: LD_INT 0
8787: PPUSH
8788: PPUSH
8789: PPUSH
8790: PPUSH
8791: PPUSH
// InGameOn ;
8792: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8796: LD_INT 179
8798: PPUSH
8799: LD_INT 5
8801: PPUSH
8802: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8806: LD_ADDR_VAR 0 4
8810: PUSH
8811: LD_INT 2
8813: PPUSH
8814: LD_INT 2
8816: PPUSH
8817: LD_INT 12
8819: PPUSH
8820: LD_INT 1
8822: PPUSH
8823: LD_INT 1
8825: PPUSH
8826: LD_INT 24
8828: PPUSH
8829: LD_INT 33
8831: PPUSH
8832: CALL 429 0 7
8836: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8837: LD_VAR 0 4
8841: PPUSH
8842: LD_INT 2
8844: PPUSH
8845: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8849: LD_VAR 0 4
8853: PPUSH
8854: LD_INT 178
8856: PPUSH
8857: LD_INT 2
8859: PPUSH
8860: LD_INT 0
8862: PPUSH
8863: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8867: LD_EXP 25
8871: PPUSH
8872: LD_VAR 0 4
8876: PPUSH
8877: CALL_OW 52
// if Kamil then
8881: LD_EXP 29
8885: IFFALSE 8920
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8887: LD_EXP 29
8891: PPUSH
8892: LD_INT 207
8894: PPUSH
8895: LD_INT 37
8897: PPUSH
8898: LD_INT 0
8900: PPUSH
8901: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8905: LD_EXP 29
8909: PPUSH
8910: LD_INT 211
8912: PPUSH
8913: LD_INT 38
8915: PPUSH
8916: CALL_OW 118
// end ; if Sophia then
8920: LD_EXP 31
8924: IFFALSE 8959
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8926: LD_EXP 31
8930: PPUSH
8931: LD_INT 209
8933: PPUSH
8934: LD_INT 40
8936: PPUSH
8937: LD_INT 0
8939: PPUSH
8940: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8944: LD_EXP 31
8948: PPUSH
8949: LD_INT 211
8951: PPUSH
8952: LD_INT 38
8954: PPUSH
8955: CALL_OW 118
// end ; if Givi then
8959: LD_EXP 26
8963: IFFALSE 8998
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8965: LD_EXP 26
8969: PPUSH
8970: LD_INT 201
8972: PPUSH
8973: LD_INT 34
8975: PPUSH
8976: LD_INT 0
8978: PPUSH
8979: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8983: LD_EXP 26
8987: PPUSH
8988: LD_INT 206
8990: PPUSH
8991: LD_INT 36
8993: PPUSH
8994: CALL_OW 118
// end ; if Ibrahim then
8998: LD_EXP 28
9002: IFFALSE 9037
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
9004: LD_EXP 28
9008: PPUSH
9009: LD_INT 202
9011: PPUSH
9012: LD_INT 39
9014: PPUSH
9015: LD_INT 0
9017: PPUSH
9018: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
9022: LD_EXP 28
9026: PPUSH
9027: LD_INT 206
9029: PPUSH
9030: LD_INT 36
9032: PPUSH
9033: CALL_OW 118
// end ; if Markov then
9037: LD_EXP 32
9041: IFFALSE 9128
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
9043: LD_ADDR_VAR 0 4
9047: PUSH
9048: LD_INT 2
9050: PPUSH
9051: LD_INT 2
9053: PPUSH
9054: LD_INT 13
9056: PPUSH
9057: LD_INT 1
9059: PPUSH
9060: LD_INT 1
9062: PPUSH
9063: LD_INT 25
9065: PPUSH
9066: LD_INT 80
9068: PUSH
9069: LD_INT 20
9071: PUSH
9072: LD_OWVAR 67
9076: MUL
9077: MINUS
9078: PPUSH
9079: CALL 429 0 7
9083: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
9084: LD_VAR 0 4
9088: PPUSH
9089: LD_INT 2
9091: PPUSH
9092: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
9096: LD_VAR 0 4
9100: PPUSH
9101: LD_INT 197
9103: PPUSH
9104: LD_INT 35
9106: PPUSH
9107: LD_INT 0
9109: PPUSH
9110: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
9114: LD_EXP 32
9118: PPUSH
9119: LD_VAR 0 4
9123: PPUSH
9124: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
9128: LD_ADDR_VAR 0 5
9132: PUSH
9133: LD_EXP 30
9137: PUSH
9138: LD_EXP 37
9142: UNION
9143: ST_TO_ADDR
// for i in tmp do
9144: LD_ADDR_VAR 0 2
9148: PUSH
9149: LD_VAR 0 5
9153: PUSH
9154: FOR_IN
9155: IFFALSE 9189
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
9157: LD_VAR 0 2
9161: PPUSH
9162: LD_INT 203
9164: PPUSH
9165: LD_INT 41
9167: PPUSH
9168: LD_INT 6
9170: PPUSH
9171: LD_INT 0
9173: PPUSH
9174: CALL_OW 50
// ComHold ( i ) ;
9178: LD_VAR 0 2
9182: PPUSH
9183: CALL_OW 140
// end ;
9187: GO 9154
9189: POP
9190: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
9191: LD_INT 22
9193: PUSH
9194: LD_INT 2
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: PUSH
9201: LD_INT 25
9203: PUSH
9204: LD_INT 2
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: PPUSH
9215: CALL_OW 69
9219: NOT
9220: IFFALSE 9234
// SetClass ( Heike , 2 ) ;
9222: LD_EXP 25
9226: PPUSH
9227: LD_INT 2
9229: PPUSH
9230: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
9234: LD_EXP 25
9238: PPUSH
9239: LD_INT 183
9241: PPUSH
9242: LD_INT 12
9244: PPUSH
9245: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
9249: LD_EXP 25
9253: PPUSH
9254: LD_INT 188
9256: PPUSH
9257: LD_INT 20
9259: PPUSH
9260: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
9264: LD_EXP 25
9268: PPUSH
9269: LD_INT 191
9271: PPUSH
9272: LD_INT 25
9274: PPUSH
9275: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
9279: LD_EXP 25
9283: PPUSH
9284: LD_INT 203
9286: PPUSH
9287: LD_INT 29
9289: PPUSH
9290: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
9294: LD_EXP 25
9298: PPUSH
9299: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
9303: LD_INT 35
9305: PPUSH
9306: CALL_OW 67
// until not IsInUnit ( Heike ) ;
9310: LD_EXP 25
9314: PPUSH
9315: CALL_OW 310
9319: NOT
9320: IFFALSE 9303
// CenterOnUnits ( Heike ) ;
9322: LD_EXP 25
9326: PPUSH
9327: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
9331: LD_ADDR_VAR 0 5
9335: PUSH
9336: LD_INT 22
9338: PUSH
9339: LD_INT 2
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: PUSH
9346: LD_INT 21
9348: PUSH
9349: LD_INT 1
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: PPUSH
9360: CALL_OW 69
9364: PUSH
9365: LD_EXP 25
9369: PUSH
9370: LD_EXP 32
9374: PUSH
9375: EMPTY
9376: LIST
9377: LIST
9378: DIFF
9379: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
9380: LD_VAR 0 5
9384: PPUSH
9385: LD_EXP 25
9389: PPUSH
9390: CALL_OW 119
// if Givi then
9394: LD_EXP 26
9398: IFFALSE 9416
// ComTurnUnit ( Heike , Givi ) else
9400: LD_EXP 25
9404: PPUSH
9405: LD_EXP 26
9409: PPUSH
9410: CALL_OW 119
9414: GO 9434
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
9416: LD_EXP 25
9420: PPUSH
9421: LD_VAR 0 5
9425: PUSH
9426: LD_INT 1
9428: ARRAY
9429: PPUSH
9430: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
9434: LD_EXP 25
9438: PPUSH
9439: LD_STRING DH-Start-1
9441: PPUSH
9442: CALL_OW 88
// if Givi then
9446: LD_EXP 26
9450: IFFALSE 9497
// begin Say ( Givi , DG-Start-2 ) ;
9452: LD_EXP 26
9456: PPUSH
9457: LD_STRING DG-Start-2
9459: PPUSH
9460: CALL_OW 88
// if not Mike then
9464: LD_EXP 27
9468: NOT
9469: IFFALSE 9495
// begin Say ( Givi , DG-Start-b-3 ) ;
9471: LD_EXP 26
9475: PPUSH
9476: LD_STRING DG-Start-b-3
9478: PPUSH
9479: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
9483: LD_EXP 25
9487: PPUSH
9488: LD_STRING DH-Start-b-4
9490: PPUSH
9491: CALL_OW 88
// end ; end else
9495: GO 9562
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
9497: LD_EXP 37
9501: PPUSH
9502: LD_INT 26
9504: PUSH
9505: LD_INT 1
9507: PUSH
9508: EMPTY
9509: LIST
9510: LIST
9511: PPUSH
9512: CALL_OW 72
9516: PUSH
9517: LD_INT 1
9519: ARRAY
9520: PPUSH
9521: LD_STRING DArm-Start-a-2
9523: PPUSH
9524: CALL_OW 88
9528: NOT
9529: IFFALSE 9562
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
9531: LD_EXP 37
9535: PPUSH
9536: LD_INT 26
9538: PUSH
9539: LD_INT 2
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: PPUSH
9546: CALL_OW 72
9550: PUSH
9551: LD_INT 1
9553: ARRAY
9554: PPUSH
9555: LD_STRING DArf-Start-a-2
9557: PPUSH
9558: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
9562: LD_EXP 25
9566: PPUSH
9567: LD_INT 211
9569: PPUSH
9570: LD_INT 38
9572: PPUSH
9573: CALL_OW 118
// wait ( 0 0$1 ) ;
9577: LD_INT 35
9579: PPUSH
9580: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
9584: LD_EXP 25
9588: PPUSH
9589: LD_STRING DH-Start-3
9591: PPUSH
9592: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9596: LD_EXP 25
9600: PPUSH
9601: LD_STRING DH-Start-4
9603: PPUSH
9604: CALL_OW 88
// InGameOff ;
9608: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
9612: LD_STRING Prepare
9614: PPUSH
9615: CALL_OW 337
// SaveForQuickRestart ;
9619: CALL_OW 22
// wait ( 0 0$10 ) ;
9623: LD_INT 350
9625: PPUSH
9626: CALL_OW 67
// if not Aviradze then
9630: LD_EXP 35
9634: NOT
9635: IFFALSE 9639
// exit ;
9637: GO 9879
// SetDir ( Aviradze , 4 ) ;
9639: LD_EXP 35
9643: PPUSH
9644: LD_INT 4
9646: PPUSH
9647: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
9651: LD_EXP 35
9655: PPUSH
9656: LD_INT 225
9658: PPUSH
9659: LD_INT 33
9661: PPUSH
9662: LD_INT 0
9664: PPUSH
9665: CALL_OW 48
// for i := 1 to 2 do
9669: LD_ADDR_VAR 0 2
9673: PUSH
9674: DOUBLE
9675: LD_INT 1
9677: DEC
9678: ST_TO_ADDR
9679: LD_INT 2
9681: PUSH
9682: FOR_TO
9683: IFFALSE 9814
// begin uc_side := 2 ;
9685: LD_ADDR_OWVAR 20
9689: PUSH
9690: LD_INT 2
9692: ST_TO_ADDR
// uc_nation := 0 ;
9693: LD_ADDR_OWVAR 21
9697: PUSH
9698: LD_INT 0
9700: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9701: LD_INT 0
9703: PPUSH
9704: LD_INT 12
9706: PPUSH
9707: LD_INT 1
9709: PPUSH
9710: CALL_OW 380
// hc_gallery :=  ;
9714: LD_ADDR_OWVAR 33
9718: PUSH
9719: LD_STRING 
9721: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
9722: LD_ADDR_OWVAR 26
9726: PUSH
9727: LD_STRING Artudito
9729: PUSH
9730: LD_STRING Textur
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: PUSH
9737: LD_VAR 0 2
9741: ARRAY
9742: ST_TO_ADDR
// un := CreateHuman ;
9743: LD_ADDR_VAR 0 3
9747: PUSH
9748: CALL_OW 44
9752: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9753: LD_VAR 0 3
9757: PPUSH
9758: LD_INT 224
9760: PUSH
9761: LD_INT 226
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: PUSH
9768: LD_VAR 0 2
9772: ARRAY
9773: PPUSH
9774: LD_INT 31
9776: PUSH
9777: LD_INT 35
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: PUSH
9784: LD_VAR 0 2
9788: ARRAY
9789: PPUSH
9790: LD_INT 0
9792: PPUSH
9793: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9797: LD_VAR 0 3
9801: PPUSH
9802: LD_INT 215
9804: PPUSH
9805: LD_INT 36
9807: PPUSH
9808: CALL_OW 111
// end ;
9812: GO 9682
9814: POP
9815: POP
// hc_name :=  ;
9816: LD_ADDR_OWVAR 26
9820: PUSH
9821: LD_STRING 
9823: ST_TO_ADDR
// InitHc ;
9824: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9828: LD_EXP 35
9832: PPUSH
9833: LD_INT 215
9835: PPUSH
9836: LD_INT 36
9838: PPUSH
9839: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
9843: LD_EXP 35
9847: PPUSH
9848: LD_STRING DA-Arrive-1
9850: PPUSH
9851: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
9855: LD_EXP 25
9859: PPUSH
9860: LD_STRING DH-Arrive-2
9862: PPUSH
9863: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
9867: LD_EXP 35
9871: PPUSH
9872: LD_STRING DA-Arrive-3
9874: PPUSH
9875: CALL_OW 88
// end ;
9879: LD_VAR 0 1
9883: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
9884: LD_EXP 3
9888: IFFALSE 11277
9890: GO 9892
9892: DISABLE
9893: LD_INT 0
9895: PPUSH
9896: PPUSH
9897: PPUSH
// begin DialogueOn ;
9898: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9902: LD_EXP 25
9906: PPUSH
9907: LD_STRING DH-base-1
9909: PPUSH
9910: CALL_OW 88
// if Markov then
9914: LD_EXP 32
9918: IFFALSE 9970
// begin Say ( Markov , DMar-base-2 ) ;
9920: LD_EXP 32
9924: PPUSH
9925: LD_STRING DMar-base-2
9927: PPUSH
9928: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9932: LD_EXP 32
9936: PPUSH
9937: LD_STRING DMar-base-3
9939: PPUSH
9940: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9944: LD_EXP 25
9948: PPUSH
9949: LD_STRING DH-base-4
9951: PPUSH
9952: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9956: LD_EXP 32
9960: PPUSH
9961: LD_STRING DMar-base-5
9963: PPUSH
9964: CALL_OW 88
// end else
9968: GO 10047
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9970: LD_EXP 37
9974: PPUSH
9975: LD_INT 26
9977: PUSH
9978: LD_INT 1
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: PPUSH
9985: CALL_OW 72
9989: PUSH
9990: LD_INT 1
9992: ARRAY
9993: PPUSH
9994: LD_STRING DArm-base-a-2
9996: PPUSH
9997: CALL_OW 88
10001: NOT
10002: IFFALSE 10035
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
10004: LD_EXP 37
10008: PPUSH
10009: LD_INT 26
10011: PUSH
10012: LD_INT 2
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PPUSH
10019: CALL_OW 72
10023: PUSH
10024: LD_INT 1
10026: ARRAY
10027: PPUSH
10028: LD_STRING DArf-base-a-2
10030: PPUSH
10031: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
10035: LD_EXP 25
10039: PPUSH
10040: LD_STRING DH-base-a-3
10042: PPUSH
10043: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
10047: LD_EXP 35
10051: PPUSH
10052: LD_STRING DA-base-6
10054: PPUSH
10055: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
10059: LD_EXP 35
10063: PPUSH
10064: LD_STRING DA-base-7
10066: PPUSH
10067: CALL_OW 88
// DialogueOff ;
10071: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
10075: LD_STRING Flamethrower
10077: PPUSH
10078: CALL_OW 337
// wait ( 2 2$00 ) ;
10082: LD_INT 4200
10084: PPUSH
10085: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
10089: LD_EXP 34
10093: PUSH
10094: LD_EXP 27
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: PPUSH
10103: LD_INT 203
10105: PPUSH
10106: LD_INT 37
10108: PPUSH
10109: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
10113: LD_INT 22
10115: PUSH
10116: LD_INT 2
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: LD_INT 92
10125: PUSH
10126: LD_INT 203
10128: PUSH
10129: LD_INT 37
10131: PUSH
10132: LD_INT 10
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: PPUSH
10145: CALL_OW 69
10149: NOT
10150: IFFALSE 10190
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
10152: LD_EXP 34
10156: PUSH
10157: LD_EXP 27
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: PPUSH
10166: LD_EXP 25
10170: PPUSH
10171: CALL_OW 250
10175: PPUSH
10176: LD_EXP 25
10180: PPUSH
10181: CALL_OW 251
10185: PPUSH
10186: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10190: LD_INT 35
10192: PPUSH
10193: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
10197: LD_INT 2
10199: PPUSH
10200: LD_EXP 34
10204: PPUSH
10205: CALL_OW 292
10209: PUSH
10210: LD_EXP 34
10214: PPUSH
10215: LD_EXP 25
10219: PPUSH
10220: CALL_OW 296
10224: PUSH
10225: LD_INT 8
10227: LESS
10228: PUSH
10229: LD_EXP 34
10233: PPUSH
10234: LD_INT 22
10236: PUSH
10237: LD_INT 2
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PUSH
10244: LD_INT 21
10246: PUSH
10247: LD_INT 3
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: PPUSH
10258: CALL_OW 69
10262: PPUSH
10263: LD_EXP 34
10267: PPUSH
10268: CALL_OW 74
10272: PPUSH
10273: CALL_OW 296
10277: PUSH
10278: LD_INT 7
10280: LESS
10281: OR
10282: AND
10283: PUSH
10284: LD_EXP 34
10288: PPUSH
10289: LD_INT 10
10291: PPUSH
10292: CALL_OW 308
10296: NOT
10297: AND
10298: IFFALSE 10190
// InGameOn ;
10300: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
10304: LD_EXP 34
10308: PPUSH
10309: CALL_OW 87
// if IsInUnit ( Heike ) then
10313: LD_EXP 25
10317: PPUSH
10318: CALL_OW 310
10322: IFFALSE 10333
// ComExitBuilding ( Heike ) ;
10324: LD_EXP 25
10328: PPUSH
10329: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
10333: LD_EXP 34
10337: PUSH
10338: LD_EXP 27
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PPUSH
10347: LD_EXP 25
10351: PPUSH
10352: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
10356: LD_EXP 25
10360: PPUSH
10361: LD_EXP 34
10365: PPUSH
10366: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
10370: LD_INT 22
10372: PUSH
10373: LD_INT 2
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: PUSH
10380: LD_INT 91
10382: PUSH
10383: LD_EXP 34
10387: PUSH
10388: LD_INT 10
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: LIST
10395: PUSH
10396: LD_INT 21
10398: PUSH
10399: LD_INT 3
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: LIST
10410: PPUSH
10411: CALL_OW 69
10415: IFFALSE 10441
// begin Say ( Kurt , DKs-scout-1 ) ;
10417: LD_EXP 34
10421: PPUSH
10422: LD_STRING DKs-scout-1
10424: PPUSH
10425: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
10429: LD_EXP 25
10433: PPUSH
10434: LD_STRING DH-scout-2
10436: PPUSH
10437: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
10441: LD_EXP 25
10445: PPUSH
10446: CALL_OW 85
// if IsInUnit ( Heike ) then
10450: LD_EXP 25
10454: PPUSH
10455: CALL_OW 310
10459: IFFALSE 10470
// ComExit ( Heike ) ;
10461: LD_EXP 25
10465: PPUSH
10466: CALL 867 0 1
// repeat wait ( 0 0$1 ) ;
10470: LD_INT 35
10472: PPUSH
10473: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
10477: LD_EXP 25
10481: PPUSH
10482: LD_EXP 34
10486: PPUSH
10487: CALL_OW 112
// until GetDistUnits ( Heike , Kurt ) < 6 ;
10491: LD_EXP 25
10495: PPUSH
10496: LD_EXP 34
10500: PPUSH
10501: CALL_OW 296
10505: PUSH
10506: LD_INT 6
10508: LESS
10509: IFFALSE 10470
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
10511: LD_EXP 34
10515: PUSH
10516: LD_EXP 27
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: PPUSH
10525: LD_EXP 25
10529: PPUSH
10530: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
10534: LD_EXP 34
10538: PPUSH
10539: LD_STRING DKs-scout-3
10541: PPUSH
10542: CALL_OW 88
// if Kaia and GetDistUnits ( Kaia , Kurt ) < 15 then
10546: LD_EXP 30
10550: PUSH
10551: LD_EXP 30
10555: PPUSH
10556: LD_EXP 34
10560: PPUSH
10561: CALL_OW 296
10565: PUSH
10566: LD_INT 15
10568: LESS
10569: AND
10570: IFFALSE 10760
// begin if IsInUnit ( Kaia ) then
10572: LD_EXP 30
10576: PPUSH
10577: CALL_OW 310
10581: IFFALSE 10592
// ComExitBuilding ( Kaia ) ;
10583: LD_EXP 30
10587: PPUSH
10588: CALL_OW 122
// wait ( 0 0$1 ) ;
10592: LD_INT 35
10594: PPUSH
10595: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
10599: LD_EXP 30
10603: PPUSH
10604: LD_EXP 34
10608: PPUSH
10609: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
10613: LD_INT 35
10615: PPUSH
10616: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
10620: LD_EXP 30
10624: PPUSH
10625: LD_EXP 34
10629: PPUSH
10630: CALL_OW 296
10634: PUSH
10635: LD_INT 6
10637: LESS
10638: IFFALSE 10613
// ComTurnUnit ( Kaia , Kurt ) ;
10640: LD_EXP 30
10644: PPUSH
10645: LD_EXP 34
10649: PPUSH
10650: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
10654: LD_EXP 30
10658: PPUSH
10659: LD_STRING DK-scout-4
10661: PPUSH
10662: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
10666: LD_EXP 34
10670: PPUSH
10671: LD_EXP 30
10675: PPUSH
10676: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
10680: LD_EXP 34
10684: PPUSH
10685: LD_STRING DKs-scout-5
10687: PPUSH
10688: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
10692: LD_EXP 30
10696: PPUSH
10697: LD_STRING DK-scout-6
10699: PPUSH
10700: CALL_OW 88
// if Mike then
10704: LD_EXP 27
10708: IFFALSE 10760
// begin Say ( Mike , DM-scout-7 ) ;
10710: LD_EXP 27
10714: PPUSH
10715: LD_STRING DM-scout-7
10717: PPUSH
10718: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
10722: LD_EXP 30
10726: PPUSH
10727: LD_EXP 27
10731: PPUSH
10732: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
10736: LD_EXP 30
10740: PPUSH
10741: LD_STRING DK-scout-8
10743: PPUSH
10744: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
10748: LD_EXP 27
10752: PPUSH
10753: LD_STRING DM-scout-9
10755: PPUSH
10756: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
10760: LD_INT 184
10762: PPUSH
10763: LD_INT 100
10765: PPUSH
10766: LD_INT 2
10768: PPUSH
10769: LD_INT 12
10771: NEG
10772: PPUSH
10773: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
10777: LD_INT 184
10779: PPUSH
10780: LD_INT 100
10782: PPUSH
10783: LD_INT 2
10785: PPUSH
10786: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
10790: LD_INT 184
10792: PPUSH
10793: LD_INT 100
10795: PPUSH
10796: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
10800: LD_EXP 34
10804: PPUSH
10805: LD_STRING DKs-scout-10
10807: PPUSH
10808: CALL_OW 88
// wait ( 0 0$1 ) ;
10812: LD_INT 35
10814: PPUSH
10815: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
10819: LD_INT 144
10821: PPUSH
10822: LD_INT 65
10824: PPUSH
10825: LD_INT 2
10827: PPUSH
10828: LD_INT 12
10830: NEG
10831: PPUSH
10832: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
10836: LD_INT 144
10838: PPUSH
10839: LD_INT 65
10841: PPUSH
10842: LD_INT 2
10844: PPUSH
10845: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
10849: LD_INT 144
10851: PPUSH
10852: LD_INT 65
10854: PPUSH
10855: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
10859: LD_EXP 34
10863: PPUSH
10864: LD_STRING DKs-scout-11
10866: PPUSH
10867: CALL_OW 88
// wait ( 0 0$1 ) ;
10871: LD_INT 35
10873: PPUSH
10874: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
10878: LD_EXP 34
10882: PPUSH
10883: CALL_OW 87
// if Mike and not Givi then
10887: LD_EXP 27
10891: PUSH
10892: LD_EXP 26
10896: NOT
10897: AND
10898: IFFALSE 10924
// begin Say ( Mike , DM-scout-a-1 ) ;
10900: LD_EXP 27
10904: PPUSH
10905: LD_STRING DM-scout-a-1
10907: PPUSH
10908: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
10912: LD_EXP 25
10916: PPUSH
10917: LD_STRING DH-scout-a-2
10919: PPUSH
10920: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10924: LD_EXP 34
10928: PUSH
10929: LD_EXP 27
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PPUSH
10938: LD_INT 2
10940: PPUSH
10941: CALL_OW 235
// InGameOff ;
10945: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
10949: LD_STRING Hill
10951: PPUSH
10952: CALL_OW 337
// SetAreaMapShow ( dontGoArea , 1 ) ;
10956: LD_INT 20
10958: PPUSH
10959: LD_INT 1
10961: PPUSH
10962: CALL_OW 424
// allowToPatrol := true ;
10966: LD_ADDR_EXP 12
10970: PUSH
10971: LD_INT 1
10973: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10974: LD_INT 3150
10976: PPUSH
10977: CALL_OW 67
// InitHc ;
10981: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 ] [ Difficulty ] do
10985: LD_ADDR_VAR 0 1
10989: PUSH
10990: DOUBLE
10991: LD_INT 1
10993: DEC
10994: ST_TO_ADDR
10995: LD_INT 3
10997: PUSH
10998: LD_INT 3
11000: PUSH
11001: LD_INT 2
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: LIST
11008: PUSH
11009: LD_OWVAR 67
11013: ARRAY
11014: PUSH
11015: FOR_TO
11016: IFFALSE 11275
// begin uc_side := 2 ;
11018: LD_ADDR_OWVAR 20
11022: PUSH
11023: LD_INT 2
11025: ST_TO_ADDR
// uc_nation := 2 ;
11026: LD_ADDR_OWVAR 21
11030: PUSH
11031: LD_INT 2
11033: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 ] [ Difficulty ] ) ;
11034: LD_INT 0
11036: PPUSH
11037: LD_INT 1
11039: PUSH
11040: LD_INT 3
11042: PUSH
11043: LD_INT 1
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: LIST
11050: PUSH
11051: LD_VAR 0 1
11055: PUSH
11056: LD_INT 3
11058: MOD
11059: PUSH
11060: LD_INT 1
11062: PLUS
11063: ARRAY
11064: PPUSH
11065: LD_INT 3
11067: PUSH
11068: LD_INT 2
11070: PUSH
11071: LD_INT 2
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: LIST
11078: PUSH
11079: LD_OWVAR 67
11083: ARRAY
11084: PPUSH
11085: CALL_OW 380
// un := CreateHuman ;
11089: LD_ADDR_VAR 0 2
11093: PUSH
11094: CALL_OW 44
11098: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
11099: LD_ADDR_EXP 37
11103: PUSH
11104: LD_EXP 37
11108: PUSH
11109: LD_VAR 0 2
11113: UNION
11114: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
11115: LD_INT 2
11117: PPUSH
11118: LD_INT 2
11120: PPUSH
11121: LD_INT 13
11123: PPUSH
11124: LD_INT 2
11126: PUSH
11127: LD_INT 1
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: PUSH
11134: LD_VAR 0 1
11138: PUSH
11139: LD_INT 2
11141: MOD
11142: PUSH
11143: LD_INT 1
11145: PLUS
11146: ARRAY
11147: PPUSH
11148: LD_INT 1
11150: PPUSH
11151: LD_INT 27
11153: PUSH
11154: LD_INT 25
11156: PUSH
11157: LD_INT 27
11159: PUSH
11160: LD_INT 23
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: PUSH
11169: LD_OWVAR 67
11173: PUSH
11174: LD_INT 0
11176: PPUSH
11177: LD_INT 1
11179: PPUSH
11180: CALL_OW 12
11184: PLUS
11185: ARRAY
11186: PPUSH
11187: LD_INT 77
11189: PPUSH
11190: CALL 429 0 7
// veh := CreateVehicle ;
11194: LD_ADDR_VAR 0 3
11198: PUSH
11199: CALL_OW 45
11203: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
11204: LD_VAR 0 3
11208: PPUSH
11209: LD_INT 2
11211: PPUSH
11212: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
11216: LD_VAR 0 3
11220: PPUSH
11221: LD_INT 178
11223: PPUSH
11224: LD_INT 2
11226: PPUSH
11227: LD_INT 2
11229: PPUSH
11230: LD_INT 0
11232: PPUSH
11233: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
11237: LD_VAR 0 2
11241: PPUSH
11242: LD_VAR 0 3
11246: PPUSH
11247: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
11251: LD_VAR 0 2
11255: PPUSH
11256: LD_INT 183
11258: PPUSH
11259: LD_INT 11
11261: PPUSH
11262: CALL_OW 111
// wait ( 0 0$2 ) ;
11266: LD_INT 70
11268: PPUSH
11269: CALL_OW 67
// end ;
11273: GO 11015
11275: POP
11276: POP
// end ;
11277: PPOPN 3
11279: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
11280: LD_EXP 4
11284: PUSH
11285: LD_EXP 35
11289: PPUSH
11290: CALL_OW 302
11294: AND
11295: IFFALSE 11344
11297: GO 11299
11299: DISABLE
// begin DialogueOn ;
11300: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
11304: LD_EXP 35
11308: PPUSH
11309: LD_STRING DA-lab-1
11311: PPUSH
11312: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
11316: LD_EXP 35
11320: PPUSH
11321: LD_STRING DA-lab-2
11323: PPUSH
11324: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
11328: LD_EXP 25
11332: PPUSH
11333: LD_STRING DH-lab-3
11335: PPUSH
11336: CALL_OW 88
// DialogueOff ;
11340: CALL_OW 7
// end ;
11344: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
11345: LD_INT 17
11347: PPUSH
11348: LD_INT 2
11350: PPUSH
11351: CALL_OW 321
11355: PUSH
11356: LD_INT 2
11358: EQUAL
11359: IFFALSE 11491
11361: GO 11363
11363: DISABLE
11364: LD_INT 0
11366: PPUSH
// begin DialogueOn ;
11367: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
11371: LD_EXP 35
11375: PPUSH
11376: LD_STRING DA-Cam-1
11378: PPUSH
11379: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
11383: LD_EXP 35
11387: PPUSH
11388: LD_STRING DA-Cam-2
11390: PPUSH
11391: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
11395: LD_EXP 35
11399: PPUSH
11400: LD_STRING DA-Cam-3
11402: PPUSH
11403: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
11407: LD_EXP 25
11411: PPUSH
11412: LD_STRING DH-Cam-4
11414: PPUSH
11415: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
11419: LD_EXP 30
11423: PPUSH
11424: LD_STRING DK-Cam-5
11426: PPUSH
11427: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
11431: LD_EXP 30
11435: PPUSH
11436: LD_STRING DK-Cam-6
11438: PPUSH
11439: CALL_OW 88
// DialogueOff ;
11443: CALL_OW 7
// Query ( Camera ) ;
11447: LD_STRING Camera
11449: PPUSH
11450: CALL_OW 97
// hiddenCameraAllowed := true ;
11454: LD_ADDR_EXP 5
11458: PUSH
11459: LD_INT 1
11461: ST_TO_ADDR
// for i in camAreas do
11462: LD_ADDR_VAR 0 1
11466: PUSH
11467: LD_EXP 8
11471: PUSH
11472: FOR_IN
11473: IFFALSE 11489
// SetAreaMapShow ( i , 1 ) ;
11475: LD_VAR 0 1
11479: PPUSH
11480: LD_INT 1
11482: PPUSH
11483: CALL_OW 424
11487: GO 11472
11489: POP
11490: POP
// end ;
11491: PPOPN 1
11493: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
11494: LD_EXP 8
11498: NOT
11499: PUSH
11500: LD_EXP 5
11504: AND
11505: IFFALSE 11603
11507: GO 11509
11509: DISABLE
11510: LD_INT 0
11512: PPUSH
// begin stop_talking := true ;
11513: LD_ADDR_OWVAR 56
11517: PUSH
11518: LD_INT 1
11520: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
11521: LD_ADDR_VAR 0 1
11525: PUSH
11526: LD_INT 22
11528: PUSH
11529: LD_INT 2
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: PUSH
11536: LD_INT 21
11538: PUSH
11539: LD_INT 1
11541: PUSH
11542: EMPTY
11543: LIST
11544: LIST
11545: PUSH
11546: LD_INT 23
11548: PUSH
11549: LD_INT 2
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: LIST
11560: PPUSH
11561: CALL_OW 69
11565: PUSH
11566: FOR_IN
11567: IFFALSE 11586
// AddExperience ( i , 2 , 450 ) ;
11569: LD_VAR 0 1
11573: PPUSH
11574: LD_INT 2
11576: PPUSH
11577: LD_INT 450
11579: PPUSH
11580: CALL_OW 492
11584: GO 11566
11586: POP
11587: POP
// stop_talking := false ;
11588: LD_ADDR_OWVAR 56
11592: PUSH
11593: LD_INT 0
11595: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
11596: LD_STRING ACH_CAMERA
11598: PPUSH
11599: CALL_OW 543
// end ;
11603: PPOPN 1
11605: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
11606: LD_EXP 9
11610: PUSH
11611: LD_EXP 11
11615: NOT
11616: AND
11617: IFFALSE 11676
11619: GO 11621
11621: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
11622: LD_EXP 9
11626: PPUSH
11627: CALL_OW 250
11631: PPUSH
11632: LD_EXP 9
11636: PPUSH
11637: CALL_OW 251
11641: PPUSH
11642: LD_INT 2
11644: PPUSH
11645: LD_INT 6
11647: NEG
11648: PPUSH
11649: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
11653: LD_EXP 9
11657: PPUSH
11658: CALL_OW 87
// wait ( 0 0$1 ) ;
11662: LD_INT 35
11664: PPUSH
11665: CALL_OW 67
// YouLost ( Spotted ) ;
11669: LD_STRING Spotted
11671: PPUSH
11672: CALL_OW 104
// end ;
11676: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
11677: LD_INT 3
11679: PUSH
11680: LD_INT 6
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PPUSH
11687: LD_INT 2
11689: PPUSH
11690: LD_EXP 47
11694: PPUSH
11695: CALL 2049 0 3
11699: IFFALSE 11732
11701: GO 11703
11703: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
11704: LD_ADDR_EXP 9
11708: PUSH
11709: LD_INT 3
11711: PUSH
11712: LD_INT 6
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: PPUSH
11719: LD_INT 2
11721: PPUSH
11722: LD_EXP 47
11726: PPUSH
11727: CALL 2049 0 3
11731: ST_TO_ADDR
11732: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
11733: LD_INT 22
11735: PUSH
11736: LD_INT 6
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: PUSH
11743: LD_INT 30
11745: PUSH
11746: LD_INT 32
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: PUSH
11753: LD_INT 3
11755: PUSH
11756: LD_INT 24
11758: PUSH
11759: LD_INT 1000
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: PUSH
11766: EMPTY
11767: LIST
11768: LIST
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: LIST
11774: PPUSH
11775: CALL_OW 69
11779: IFFALSE 11840
11781: GO 11783
11783: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
11784: LD_ADDR_EXP 9
11788: PUSH
11789: LD_INT 22
11791: PUSH
11792: LD_INT 6
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: PUSH
11799: LD_INT 30
11801: PUSH
11802: LD_INT 32
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: PUSH
11809: LD_INT 3
11811: PUSH
11812: LD_INT 24
11814: PUSH
11815: LD_INT 1000
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: LIST
11830: PPUSH
11831: CALL_OW 69
11835: PUSH
11836: LD_INT 1
11838: ARRAY
11839: ST_TO_ADDR
11840: END
// every 0 0$1 trigger russianAlert do var i , tmp , towers , noncombat ;
11841: LD_EXP 9
11845: IFFALSE 12077
11847: GO 11849
11849: DISABLE
11850: LD_INT 0
11852: PPUSH
11853: PPUSH
11854: PPUSH
11855: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11856: LD_ADDR_VAR 0 4
11860: PUSH
11861: LD_EXP 42
11865: PUSH
11866: LD_EXP 44
11870: PUSH
11871: LD_EXP 45
11875: UNION
11876: PPUSH
11877: LD_INT 3
11879: PUSH
11880: LD_INT 25
11882: PUSH
11883: LD_INT 1
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PUSH
11890: EMPTY
11891: LIST
11892: LIST
11893: PPUSH
11894: CALL_OW 72
11898: UNION
11899: ST_TO_ADDR
// for i in noncombat do
11900: LD_ADDR_VAR 0 1
11904: PUSH
11905: LD_VAR 0 4
11909: PUSH
11910: FOR_IN
11911: IFFALSE 12007
// begin if IsInUnit ( i ) then
11913: LD_VAR 0 1
11917: PPUSH
11918: CALL_OW 310
11922: IFFALSE 11933
// ComExitBuilding ( i ) ;
11924: LD_VAR 0 1
11928: PPUSH
11929: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
11933: LD_VAR 0 1
11937: PPUSH
11938: LD_INT 114
11940: PPUSH
11941: LD_INT 97
11943: PPUSH
11944: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
11948: LD_VAR 0 1
11952: PPUSH
11953: LD_INT 99
11955: PPUSH
11956: LD_INT 128
11958: PPUSH
11959: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
11963: LD_VAR 0 1
11967: PPUSH
11968: LD_INT 91
11970: PPUSH
11971: LD_INT 145
11973: PPUSH
11974: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
11978: LD_VAR 0 1
11982: PPUSH
11983: LD_INT 82
11985: PPUSH
11986: LD_INT 153
11988: PPUSH
11989: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
11993: LD_VAR 0 1
11997: PPUSH
11998: LD_INT 16
12000: PPUSH
12001: CALL_OW 173
// end ;
12005: GO 11910
12007: POP
12008: POP
// if not allowHeikeAttack then
12009: LD_EXP 11
12013: NOT
12014: IFFALSE 12018
// exit ;
12016: GO 12077
// SayRadio ( Kurin , D9a-Kur-1 ) ;
12018: LD_EXP 40
12022: PPUSH
12023: LD_STRING D9a-Kur-1
12025: PPUSH
12026: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
12030: LD_EXP 43
12034: PPUSH
12035: LD_STRING D9a-Bur-1
12037: PPUSH
12038: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
12042: LD_EXP 40
12046: PPUSH
12047: LD_STRING D9a-Kur-2
12049: PPUSH
12050: CALL_OW 94
// omicronFall := true ;
12054: LD_ADDR_EXP 13
12058: PUSH
12059: LD_INT 1
12061: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12062: LD_INT 105
12064: PPUSH
12065: CALL_OW 67
// retreatFromOmicron := true ;
12069: LD_ADDR_EXP 20
12073: PUSH
12074: LD_INT 1
12076: ST_TO_ADDR
// end ;
12077: PPOPN 4
12079: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
12080: LD_INT 16
12082: PPUSH
12083: LD_INT 3
12085: PUSH
12086: LD_INT 22
12088: PUSH
12089: LD_INT 2
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PUSH
12100: LD_INT 23
12102: PUSH
12103: LD_INT 3
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: PPUSH
12114: CALL_OW 70
12118: IFFALSE 12201
12120: GO 12122
12122: DISABLE
12123: LD_INT 0
12125: PPUSH
// begin enable ;
12126: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
12127: LD_ADDR_VAR 0 1
12131: PUSH
12132: LD_INT 16
12134: PPUSH
12135: LD_INT 3
12137: PUSH
12138: LD_INT 22
12140: PUSH
12141: LD_INT 2
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: PUSH
12152: LD_INT 23
12154: PUSH
12155: LD_INT 3
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: PPUSH
12166: CALL_OW 70
12170: PUSH
12171: FOR_IN
12172: IFFALSE 12199
// begin escapeCounter := escapeCounter + 1 ;
12174: LD_ADDR_EXP 19
12178: PUSH
12179: LD_EXP 19
12183: PUSH
12184: LD_INT 1
12186: PLUS
12187: ST_TO_ADDR
// RemoveUnit ( i ) ;
12188: LD_VAR 0 1
12192: PPUSH
12193: CALL_OW 64
// end ;
12197: GO 12171
12199: POP
12200: POP
// end ;
12201: PPOPN 1
12203: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
12204: LD_OWVAR 1
12208: PUSH
12209: LD_INT 13650
12211: PUSH
12212: LD_INT 0
12214: PPUSH
12215: LD_INT 3150
12217: PPUSH
12218: CALL_OW 12
12222: PLUS
12223: GREATEREQUAL
12224: IFFALSE 12233
12226: GO 12228
12228: DISABLE
// SmallAmericanReinforcements ;
12229: CALL 7606 0 0
12233: END
// every 0 0$1 trigger tick >= 9 9$15 do
12234: LD_OWVAR 1
12238: PUSH
12239: LD_INT 19425
12241: GREATEREQUAL
12242: IFFALSE 12307
12244: GO 12246
12246: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
12247: LD_EXP 48
12251: PPUSH
12252: LD_INT 21
12254: PUSH
12255: LD_INT 2
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PPUSH
12262: CALL_OW 72
12266: PPUSH
12267: LD_INT 62
12269: PPUSH
12270: LD_INT 22
12272: PPUSH
12273: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
12277: LD_EXP 49
12281: PPUSH
12282: LD_INT 69
12284: PPUSH
12285: LD_INT 27
12287: PPUSH
12288: CALL_OW 111
// wait ( 1 1$00 ) ;
12292: LD_INT 2100
12294: PPUSH
12295: CALL_OW 67
// startAttackOnOmicron := true ;
12299: LD_ADDR_EXP 6
12303: PUSH
12304: LD_INT 1
12306: ST_TO_ADDR
// end ;
12307: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
12308: LD_EXP 22
12312: PUSH
12313: LD_INT 0
12315: EQUAL
12316: IFFALSE 14333
12318: GO 12320
12320: DISABLE
12321: LD_INT 0
12323: PPUSH
12324: PPUSH
12325: PPUSH
12326: PPUSH
12327: PPUSH
12328: PPUSH
12329: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
12330: LD_INT 5
12332: PPUSH
12333: LD_INT 2
12335: PPUSH
12336: CALL_OW 343
// PrepareOmarForces ;
12340: CALL 2619 0 0
// wait ( 0 0$03 ) ;
12344: LD_INT 105
12346: PPUSH
12347: CALL_OW 67
// allowHeikeAttack := true ;
12351: LD_ADDR_EXP 11
12355: PUSH
12356: LD_INT 1
12358: ST_TO_ADDR
// activeGrishkoAI := false ;
12359: LD_ADDR_EXP 10
12363: PUSH
12364: LD_INT 0
12366: ST_TO_ADDR
// SetAreaMapShow ( dontGoArea , 0 ) ;
12367: LD_INT 20
12369: PPUSH
12370: LD_INT 0
12372: PPUSH
12373: CALL_OW 424
// if not hillBase then
12377: LD_EXP 15
12381: NOT
12382: IFFALSE 12391
// ChangeMissionObjectives ( HillDone ) ;
12384: LD_STRING HillDone
12386: PPUSH
12387: CALL_OW 337
// CenterOnUnits ( Omar ) ;
12391: LD_EXP 33
12395: PPUSH
12396: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
12400: LD_ADDR_VAR 0 1
12404: PUSH
12405: LD_INT 22
12407: PUSH
12408: LD_INT 2
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PUSH
12415: LD_INT 21
12417: PUSH
12418: LD_INT 1
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: PPUSH
12429: CALL_OW 69
12433: PUSH
12434: FOR_IN
12435: IFFALSE 12459
// if HasTask ( i ) then
12437: LD_VAR 0 1
12441: PPUSH
12442: CALL_OW 314
12446: IFFALSE 12457
// ComHold ( i ) ;
12448: LD_VAR 0 1
12452: PPUSH
12453: CALL_OW 140
12457: GO 12434
12459: POP
12460: POP
// DialogueOn ;
12461: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
12465: LD_EXP 33
12469: PPUSH
12470: LD_STRING DO-assault-1
12472: PPUSH
12473: CALL_OW 94
// DialogueOff ;
12477: CALL_OW 7
// game_speed := 4 ;
12481: LD_ADDR_OWVAR 65
12485: PUSH
12486: LD_INT 4
12488: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
12489: LD_ADDR_VAR 0 1
12493: PUSH
12494: LD_EXP 46
12498: PPUSH
12499: LD_INT 3
12501: PUSH
12502: LD_INT 54
12504: PUSH
12505: EMPTY
12506: LIST
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: PPUSH
12512: CALL_OW 72
12516: PUSH
12517: FOR_IN
12518: IFFALSE 12537
// ComMoveXY ( i , 226 , 114 ) ;
12520: LD_VAR 0 1
12524: PPUSH
12525: LD_INT 226
12527: PPUSH
12528: LD_INT 114
12530: PPUSH
12531: CALL_OW 111
12535: GO 12517
12537: POP
12538: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
12539: LD_EXP 41
12543: PPUSH
12544: LD_INT 22
12546: PUSH
12547: LD_INT 6
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: PUSH
12554: LD_INT 30
12556: PUSH
12557: LD_INT 4
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: PPUSH
12568: CALL_OW 69
12572: PPUSH
12573: LD_EXP 41
12577: PPUSH
12578: CALL_OW 74
12582: PPUSH
12583: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
12587: LD_STRING Attack
12589: PPUSH
12590: CALL_OW 337
// music_class := music_combat ;
12594: LD_ADDR_OWVAR 72
12598: PUSH
12599: LD_INT 1
12601: ST_TO_ADDR
// music_nat := 4 ;
12602: LD_ADDR_OWVAR 71
12606: PUSH
12607: LD_INT 4
12609: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
12610: LD_INT 5
12612: PPUSH
12613: LD_EXP 41
12617: PPUSH
12618: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12622: LD_INT 6
12624: PPUSH
12625: LD_EXP 38
12629: PPUSH
12630: LD_INT 25
12632: PUSH
12633: LD_INT 1
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PPUSH
12640: CALL_OW 72
12644: PUSH
12645: LD_INT 4
12647: ARRAY
12648: PPUSH
12649: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
12653: LD_ADDR_VAR 0 1
12657: PUSH
12658: LD_EXP 38
12662: PPUSH
12663: LD_INT 3
12665: PUSH
12666: LD_INT 25
12668: PUSH
12669: LD_INT 4
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: PPUSH
12680: CALL_OW 72
12684: PUSH
12685: FOR_IN
12686: IFFALSE 12705
// ComAgressiveMove ( i , 221 , 110 ) ;
12688: LD_VAR 0 1
12692: PPUSH
12693: LD_INT 221
12695: PPUSH
12696: LD_INT 110
12698: PPUSH
12699: CALL_OW 114
12703: GO 12685
12705: POP
12706: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
12707: LD_EXP 38
12711: PPUSH
12712: LD_INT 25
12714: PUSH
12715: LD_INT 4
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PPUSH
12722: CALL_OW 72
12726: PPUSH
12727: LD_INT 214
12729: PPUSH
12730: LD_INT 124
12732: PPUSH
12733: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
12737: LD_EXP 38
12741: PPUSH
12742: LD_INT 25
12744: PUSH
12745: LD_INT 1
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: PPUSH
12752: CALL_OW 72
12756: PUSH
12757: LD_INT 4
12759: ARRAY
12760: PPUSH
12761: LD_INT 214
12763: PPUSH
12764: LD_INT 114
12766: PPUSH
12767: LD_INT 0
12769: PPUSH
12770: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
12774: LD_EXP 41
12778: PPUSH
12779: LD_STRING D9-Gri-1
12781: PPUSH
12782: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
12786: LD_EXP 40
12790: PPUSH
12791: LD_STRING D9-Kur-1
12793: PPUSH
12794: CALL_OW 94
// wait ( 0 0$1 ) ;
12798: LD_INT 35
12800: PPUSH
12801: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
12805: LD_EXP 33
12809: PPUSH
12810: LD_INT 233
12812: PPUSH
12813: LD_INT 130
12815: PPUSH
12816: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
12820: LD_EXP 41
12824: PPUSH
12825: LD_STRING D9-Gri-2
12827: PPUSH
12828: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12832: LD_EXP 40
12836: PPUSH
12837: LD_STRING D9-Kur-2
12839: PPUSH
12840: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
12844: LD_EXP 41
12848: PPUSH
12849: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
12853: LD_EXP 41
12857: PPUSH
12858: LD_INT 211
12860: PPUSH
12861: LD_INT 104
12863: PPUSH
12864: CALL_OW 171
// AddComHold ( Grishko ) ;
12868: LD_EXP 41
12872: PPUSH
12873: CALL_OW 200
// repeat wait ( 3 ) ;
12877: LD_INT 3
12879: PPUSH
12880: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
12884: LD_EXP 41
12888: PPUSH
12889: CALL_OW 310
12893: NOT
12894: IFFALSE 12877
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
12896: LD_EXP 38
12900: PPUSH
12901: LD_INT 34
12903: PUSH
12904: LD_INT 26
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: PPUSH
12911: CALL_OW 72
12915: PPUSH
12916: LD_EXP 41
12920: PPUSH
12921: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12925: LD_EXP 38
12929: PPUSH
12930: LD_INT 34
12932: PUSH
12933: LD_INT 26
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PPUSH
12940: CALL_OW 72
12944: PPUSH
12945: LD_INT 215
12947: PPUSH
12948: LD_INT 106
12950: PPUSH
12951: CALL_OW 174
// repeat wait ( 3 ) ;
12955: LD_INT 3
12957: PPUSH
12958: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12962: LD_EXP 41
12966: PPUSH
12967: CALL_OW 256
12971: PUSH
12972: LD_INT 1000
12974: LESS
12975: IFFALSE 12955
// NormalAttack ( 5 , Grishko ) ;
12977: LD_INT 5
12979: PPUSH
12980: LD_EXP 41
12984: PPUSH
12985: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12989: LD_INT 6
12991: PPUSH
12992: LD_EXP 38
12996: PPUSH
12997: LD_INT 25
12999: PUSH
13000: LD_INT 1
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: PPUSH
13007: CALL_OW 72
13011: PUSH
13012: LD_INT 4
13014: ARRAY
13015: PPUSH
13016: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
13020: LD_EXP 41
13024: PPUSH
13025: LD_STRING D9-Gri-3
13027: PPUSH
13028: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
13032: LD_EXP 40
13036: PPUSH
13037: LD_STRING D9-Kur-3
13039: PPUSH
13040: CALL_OW 94
// music_class := music_auto ;
13044: LD_ADDR_OWVAR 72
13048: PUSH
13049: LD_INT 0
13051: ST_TO_ADDR
// music_nat := music_auto ;
13052: LD_ADDR_OWVAR 71
13056: PUSH
13057: LD_INT 0
13059: ST_TO_ADDR
// for i in omarSquad do
13060: LD_ADDR_VAR 0 1
13064: PUSH
13065: LD_EXP 38
13069: PUSH
13070: FOR_IN
13071: IFFALSE 13213
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
13073: LD_VAR 0 1
13077: PPUSH
13078: CALL_OW 247
13082: PUSH
13083: LD_INT 2
13085: EQUAL
13086: PUSH
13087: LD_VAR 0 1
13091: PPUSH
13092: CALL_OW 256
13096: PUSH
13097: LD_INT 1000
13099: LESS
13100: AND
13101: IFFALSE 13167
// begin driver := IsDrivenBy ( i ) ;
13103: LD_ADDR_VAR 0 2
13107: PUSH
13108: LD_VAR 0 1
13112: PPUSH
13113: CALL_OW 311
13117: ST_TO_ADDR
// veh := i ;
13118: LD_ADDR_VAR 0 3
13122: PUSH
13123: LD_VAR 0 1
13127: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
13128: LD_VAR 0 2
13132: PPUSH
13133: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
13137: LD_VAR 0 2
13141: PPUSH
13142: LD_VAR 0 3
13146: PPUSH
13147: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
13151: LD_VAR 0 2
13155: PPUSH
13156: LD_VAR 0 3
13160: PPUSH
13161: CALL_OW 180
// end else
13165: GO 13211
// if GetLives ( i ) < 500 then
13167: LD_VAR 0 1
13171: PPUSH
13172: CALL_OW 256
13176: PUSH
13177: LD_INT 500
13179: LESS
13180: IFFALSE 13211
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
13182: LD_EXP 38
13186: PPUSH
13187: LD_INT 25
13189: PUSH
13190: LD_INT 4
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: PPUSH
13197: CALL_OW 72
13201: PPUSH
13202: LD_VAR 0 1
13206: PPUSH
13207: CALL_OW 188
// end ; end ;
13211: GO 13070
13213: POP
13214: POP
// repeat wait ( 0 0$1 ) ;
13215: LD_INT 35
13217: PPUSH
13218: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
13222: LD_EXP 38
13226: PPUSH
13227: LD_INT 3
13229: PUSH
13230: LD_INT 24
13232: PUSH
13233: LD_INT 1000
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: PUSH
13244: LD_INT 21
13246: PUSH
13247: LD_INT 2
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: PPUSH
13258: CALL_OW 72
13262: NOT
13263: PUSH
13264: LD_EXP 38
13268: PPUSH
13269: LD_INT 3
13271: PUSH
13272: LD_INT 24
13274: PUSH
13275: LD_INT 250
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: PPUSH
13286: CALL_OW 72
13290: NOT
13291: AND
13292: IFFALSE 13215
// wait ( 0 0$2 ) ;
13294: LD_INT 70
13296: PPUSH
13297: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
13301: LD_ADDR_VAR 0 5
13305: PUSH
13306: LD_EXP 38
13310: PPUSH
13311: LD_INT 58
13313: PUSH
13314: EMPTY
13315: LIST
13316: PUSH
13317: LD_INT 21
13319: PUSH
13320: LD_INT 2
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: PPUSH
13331: CALL_OW 72
13335: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
13336: LD_ADDR_VAR 0 6
13340: PUSH
13341: LD_EXP 38
13345: PPUSH
13346: LD_INT 25
13348: PUSH
13349: LD_INT 3
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: PUSH
13356: LD_INT 3
13358: PUSH
13359: LD_INT 55
13361: PUSH
13362: EMPTY
13363: LIST
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: PPUSH
13373: CALL_OW 72
13377: ST_TO_ADDR
// for i := 1 to tmp do
13378: LD_ADDR_VAR 0 1
13382: PUSH
13383: DOUBLE
13384: LD_INT 1
13386: DEC
13387: ST_TO_ADDR
13388: LD_VAR 0 5
13392: PUSH
13393: FOR_TO
13394: IFFALSE 13424
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
13396: LD_VAR 0 6
13400: PUSH
13401: LD_VAR 0 1
13405: ARRAY
13406: PPUSH
13407: LD_VAR 0 5
13411: PUSH
13412: LD_VAR 0 1
13416: ARRAY
13417: PPUSH
13418: CALL_OW 120
13422: GO 13393
13424: POP
13425: POP
// wait ( 0 0$5 ) ;
13426: LD_INT 175
13428: PPUSH
13429: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
13433: LD_EXP 38
13437: PPUSH
13438: LD_INT 199
13440: PPUSH
13441: LD_INT 141
13443: PPUSH
13444: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
13448: LD_EXP 33
13452: PPUSH
13453: LD_INT 190
13455: PPUSH
13456: LD_INT 143
13458: PPUSH
13459: CALL_OW 114
// AddComHold ( Omar ) ;
13463: LD_EXP 33
13467: PPUSH
13468: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
13472: LD_EXP 38
13476: PPUSH
13477: LD_INT 2
13479: PUSH
13480: LD_INT 25
13482: PUSH
13483: LD_INT 1
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: PUSH
13490: LD_INT 25
13492: PUSH
13493: LD_INT 4
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: LIST
13504: PPUSH
13505: CALL_OW 72
13509: PPUSH
13510: LD_INT 161
13512: PPUSH
13513: LD_INT 130
13515: PPUSH
13516: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
13520: LD_EXP 38
13524: PPUSH
13525: LD_INT 25
13527: PUSH
13528: LD_INT 1
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: PPUSH
13535: CALL_OW 72
13539: PPUSH
13540: LD_INT 163
13542: PPUSH
13543: LD_INT 122
13545: PPUSH
13546: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
13550: LD_EXP 38
13554: PPUSH
13555: LD_INT 25
13557: PUSH
13558: LD_INT 1
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PPUSH
13565: CALL_OW 72
13569: PUSH
13570: LD_INT 4
13572: ARRAY
13573: PPUSH
13574: LD_INT 165
13576: PPUSH
13577: LD_INT 118
13579: PPUSH
13580: LD_INT 0
13582: PPUSH
13583: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
13587: LD_EXP 38
13591: PPUSH
13592: LD_INT 25
13594: PUSH
13595: LD_INT 1
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: PPUSH
13602: CALL_OW 72
13606: PUSH
13607: LD_INT 4
13609: ARRAY
13610: PPUSH
13611: LD_INT 159
13613: PPUSH
13614: LD_INT 116
13616: PPUSH
13617: LD_INT 0
13619: PPUSH
13620: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
13624: LD_EXP 38
13628: PPUSH
13629: LD_INT 21
13631: PUSH
13632: LD_INT 2
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: PPUSH
13639: CALL_OW 72
13643: PPUSH
13644: LD_INT 169
13646: PPUSH
13647: LD_INT 114
13649: PPUSH
13650: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
13654: LD_INT 35
13656: PPUSH
13657: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
13661: LD_ADDR_VAR 0 5
13665: PUSH
13666: LD_EXP 38
13670: PPUSH
13671: LD_INT 25
13673: PUSH
13674: LD_INT 1
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PPUSH
13681: CALL_OW 72
13685: ST_TO_ADDR
// for i in tmp do
13686: LD_ADDR_VAR 0 1
13690: PUSH
13691: LD_VAR 0 5
13695: PUSH
13696: FOR_IN
13697: IFFALSE 13794
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
13699: LD_VAR 0 1
13703: PPUSH
13704: CALL_OW 256
13708: PUSH
13709: LD_INT 600
13711: LESS
13712: PUSH
13713: LD_VAR 0 1
13717: PPUSH
13718: LD_INT 161
13720: PPUSH
13721: LD_INT 130
13723: PPUSH
13724: CALL_OW 297
13728: PUSH
13729: LD_INT 6
13731: GREATER
13732: AND
13733: IFFALSE 13750
// ComMoveXY ( i , 161 , 130 ) ;
13735: LD_VAR 0 1
13739: PPUSH
13740: LD_INT 161
13742: PPUSH
13743: LD_INT 130
13745: PPUSH
13746: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
13750: LD_VAR 0 1
13754: PPUSH
13755: CALL_OW 256
13759: PUSH
13760: LD_INT 1000
13762: EQUAL
13763: PUSH
13764: LD_VAR 0 1
13768: PPUSH
13769: CALL_OW 314
13773: NOT
13774: AND
13775: IFFALSE 13792
// ComAgressiveMove ( i , 160 , 109 ) ;
13777: LD_VAR 0 1
13781: PPUSH
13782: LD_INT 160
13784: PPUSH
13785: LD_INT 109
13787: PPUSH
13788: CALL_OW 114
// end ;
13792: GO 13696
13794: POP
13795: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
13796: LD_ADDR_VAR 0 5
13800: PUSH
13801: LD_EXP 38
13805: PPUSH
13806: LD_INT 21
13808: PUSH
13809: LD_INT 2
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: PPUSH
13816: CALL_OW 72
13820: ST_TO_ADDR
// for i in tmp do
13821: LD_ADDR_VAR 0 1
13825: PUSH
13826: LD_VAR 0 5
13830: PUSH
13831: FOR_IN
13832: IFFALSE 14098
// begin tmp2 := IsDrivenBy ( i ) ;
13834: LD_ADDR_VAR 0 6
13838: PUSH
13839: LD_VAR 0 1
13843: PPUSH
13844: CALL_OW 311
13848: ST_TO_ADDR
// if not tmp2 then
13849: LD_VAR 0 6
13853: NOT
13854: IFFALSE 13858
// continue ;
13856: GO 13831
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
13858: LD_VAR 0 1
13862: PPUSH
13863: CALL_OW 256
13867: PUSH
13868: LD_INT 600
13870: GREATEREQUAL
13871: PUSH
13872: LD_VAR 0 1
13876: PPUSH
13877: CALL_OW 110
13881: PUSH
13882: LD_INT 1
13884: EQUAL
13885: AND
13886: IFFALSE 13900
// SetTag ( i , 0 ) ;
13888: LD_VAR 0 1
13892: PPUSH
13893: LD_INT 0
13895: PPUSH
13896: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
13900: LD_VAR 0 1
13904: PPUSH
13905: CALL_OW 256
13909: PUSH
13910: LD_INT 600
13912: GREATEREQUAL
13913: PUSH
13914: LD_VAR 0 1
13918: PPUSH
13919: CALL_OW 110
13923: NOT
13924: AND
13925: IFFALSE 13951
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13927: LD_VAR 0 1
13931: PPUSH
13932: LD_VAR 0 7
13936: PPUSH
13937: LD_VAR 0 1
13941: PPUSH
13942: CALL_OW 74
13946: PPUSH
13947: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13951: LD_VAR 0 1
13955: PPUSH
13956: CALL_OW 256
13960: PUSH
13961: LD_INT 600
13963: LESS
13964: PUSH
13965: LD_VAR 0 1
13969: PPUSH
13970: CALL_OW 110
13974: NOT
13975: AND
13976: IFFALSE 14005
// begin SetTag ( i , 1 ) ;
13978: LD_VAR 0 1
13982: PPUSH
13983: LD_INT 1
13985: PPUSH
13986: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13990: LD_VAR 0 1
13994: PPUSH
13995: LD_INT 202
13997: PPUSH
13998: LD_INT 150
14000: PPUSH
14001: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
14005: LD_VAR 0 1
14009: PPUSH
14010: CALL_OW 110
14014: PUSH
14015: LD_INT 1
14017: EQUAL
14018: PUSH
14019: LD_VAR 0 1
14023: PPUSH
14024: LD_INT 202
14026: PPUSH
14027: LD_INT 150
14029: PPUSH
14030: CALL_OW 297
14034: PUSH
14035: LD_INT 6
14037: LESS
14038: AND
14039: PUSH
14040: LD_VAR 0 6
14044: AND
14045: IFFALSE 14096
// begin ComExitVehicle ( tmp2 ) ;
14047: LD_VAR 0 6
14051: PPUSH
14052: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
14056: LD_VAR 0 6
14060: PPUSH
14061: LD_VAR 0 1
14065: PPUSH
14066: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
14070: LD_VAR 0 6
14074: PPUSH
14075: LD_INT 700
14077: PPUSH
14078: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
14082: LD_VAR 0 6
14086: PPUSH
14087: LD_VAR 0 1
14091: PPUSH
14092: CALL_OW 180
// end ; end ;
14096: GO 13831
14098: POP
14099: POP
// until kirovDestroyed ;
14100: LD_EXP 16
14104: IFFALSE 13654
// repeat wait ( 0 0$1 ) ;
14106: LD_INT 35
14108: PPUSH
14109: CALL_OW 67
// for i in omarSquad union Omar do
14113: LD_ADDR_VAR 0 1
14117: PUSH
14118: LD_EXP 38
14122: PUSH
14123: LD_EXP 33
14127: UNION
14128: PUSH
14129: FOR_IN
14130: IFFALSE 14300
// if IsInArea ( i , southRoadArea ) then
14132: LD_VAR 0 1
14136: PPUSH
14137: LD_INT 15
14139: PPUSH
14140: CALL_OW 308
14144: IFFALSE 14157
// RemoveUnit ( i ) else
14146: LD_VAR 0 1
14150: PPUSH
14151: CALL_OW 64
14155: GO 14298
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
14157: LD_VAR 0 1
14161: PPUSH
14162: CALL_OW 257
14166: PUSH
14167: LD_INT 3
14169: EQUAL
14170: PUSH
14171: LD_VAR 0 1
14175: PPUSH
14176: CALL_OW 310
14180: NOT
14181: AND
14182: PUSH
14183: LD_INT 22
14185: PUSH
14186: LD_INT 5
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: PUSH
14193: LD_INT 24
14195: PUSH
14196: LD_INT 251
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: PUSH
14203: LD_INT 21
14205: PUSH
14206: LD_INT 2
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: PUSH
14213: LD_INT 58
14215: PUSH
14216: EMPTY
14217: LIST
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: PPUSH
14225: CALL_OW 69
14229: AND
14230: IFFALSE 14283
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
14232: LD_VAR 0 1
14236: PPUSH
14237: LD_INT 22
14239: PUSH
14240: LD_INT 5
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: PUSH
14247: LD_INT 21
14249: PUSH
14250: LD_INT 2
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: PUSH
14257: LD_INT 58
14259: PUSH
14260: EMPTY
14261: LIST
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: LIST
14267: PPUSH
14268: CALL_OW 69
14272: PUSH
14273: LD_INT 1
14275: ARRAY
14276: PPUSH
14277: CALL_OW 120
14281: GO 14298
// ComMoveXY ( i , 208 , 162 ) ;
14283: LD_VAR 0 1
14287: PPUSH
14288: LD_INT 208
14290: PPUSH
14291: LD_INT 162
14293: PPUSH
14294: CALL_OW 111
// end ;
14298: GO 14129
14300: POP
14301: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
14302: LD_INT 22
14304: PUSH
14305: LD_INT 5
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PUSH
14312: LD_INT 21
14314: PUSH
14315: LD_INT 1
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: PPUSH
14326: CALL_OW 69
14330: NOT
14331: IFFALSE 14106
// end ;
14333: PPOPN 7
14335: END
// every 0 0$1 trigger IsDead ( kirov ) do
14336: LD_INT 71
14338: PPUSH
14339: CALL_OW 301
14343: IFFALSE 14360
14345: GO 14347
14347: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
14348: LD_EXP 25
14352: PPUSH
14353: LD_STRING DH-1-Kirov
14355: PPUSH
14356: CALL_OW 88
14360: END
// every 0 0$1 trigger See ( 2 , beria ) do
14361: LD_INT 2
14363: PPUSH
14364: LD_INT 106
14366: PPUSH
14367: CALL_OW 292
14371: IFFALSE 14388
14373: GO 14375
14375: DISABLE
// Say ( Heike , DH-1-Beria ) ;
14376: LD_EXP 25
14380: PPUSH
14381: LD_STRING DH-1-Beria
14383: PPUSH
14384: CALL_OW 88
14388: END
// every 0 0$1 trigger See ( 2 , kagan ) do
14389: LD_INT 2
14391: PPUSH
14392: LD_INT 112
14394: PPUSH
14395: CALL_OW 292
14399: IFFALSE 14666
14401: GO 14403
14403: DISABLE
// begin DialogueOn ;
14404: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
14408: LD_INT 112
14410: PPUSH
14411: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
14415: LD_EXP 25
14419: PPUSH
14420: LD_STRING DH-1-Kagan
14422: PPUSH
14423: CALL_OW 88
// if Kamil then
14427: LD_EXP 29
14431: IFFALSE 14469
// begin Say ( Kamil , DKam-Kagan-2 ) ;
14433: LD_EXP 29
14437: PPUSH
14438: LD_STRING DKam-Kagan-2
14440: PPUSH
14441: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
14445: LD_EXP 26
14449: PPUSH
14450: LD_STRING DG-Kagan-3
14452: PPUSH
14453: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
14457: LD_EXP 26
14461: PPUSH
14462: LD_STRING DG-Kagan-4
14464: PPUSH
14465: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
14469: LD_STRING KaganBase
14471: PPUSH
14472: CALL_OW 97
14476: PUSH
14477: LD_INT 1
14479: DOUBLE
14480: EQUAL
14481: IFTRUE 14485
14483: GO 14580
14485: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
14486: LD_EXP 25
14490: PPUSH
14491: LD_STRING DH-Kagan-5
14493: PPUSH
14494: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
14498: LD_EXP 25
14502: PPUSH
14503: LD_STRING DH-Kagan-6
14505: PPUSH
14506: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
14510: LD_EXP 36
14514: PPUSH
14515: LD_STRING DShar-Kagan-7
14517: PPUSH
14518: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
14522: LD_EXP 25
14526: PPUSH
14527: LD_STRING DH-Kagan-8
14529: PPUSH
14530: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
14534: LD_EXP 25
14538: PPUSH
14539: LD_STRING DH-Kagan-9
14541: PPUSH
14542: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
14546: LD_EXP 36
14550: PPUSH
14551: LD_STRING DShar-Kagan-10
14553: PPUSH
14554: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
14558: LD_EXP 25
14562: PPUSH
14563: LD_STRING DH-Kagan-11
14565: PPUSH
14566: CALL_OW 88
// kaganCaptured := true ;
14570: LD_ADDR_EXP 24
14574: PUSH
14575: LD_INT 1
14577: ST_TO_ADDR
// end ; 2 :
14578: GO 14662
14580: LD_INT 2
14582: DOUBLE
14583: EQUAL
14584: IFTRUE 14588
14586: GO 14661
14588: POP
// begin if FilterAllUnits ( [ f_side , 8 ] ) and Aviradze then
14589: LD_INT 22
14591: PUSH
14592: LD_INT 8
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: PPUSH
14599: CALL_OW 69
14603: PUSH
14604: LD_EXP 35
14608: AND
14609: IFFALSE 14623
// Say ( Heike , DH-Kagan-a-5 ) ;
14611: LD_EXP 25
14615: PPUSH
14616: LD_STRING DH-Kagan-a-5
14618: PPUSH
14619: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
14623: LD_EXP 25
14627: PPUSH
14628: LD_STRING DH-Kagan-a-6
14630: PPUSH
14631: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
14635: LD_EXP 25
14639: PPUSH
14640: LD_STRING DH-Kagan-a-7
14642: PPUSH
14643: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
14647: LD_EXP 26
14651: PPUSH
14652: LD_STRING DG-Kagan-a-8
14654: PPUSH
14655: CALL_OW 88
// end ; end ;
14659: GO 14662
14661: POP
// DialogueOff ;
14662: CALL_OW 7
// end ;
14666: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
14667: LD_EXP 18
14671: PUSH
14672: LD_INT 112
14674: PPUSH
14675: CALL_OW 255
14679: PUSH
14680: LD_INT 2
14682: EQUAL
14683: OR
14684: IFFALSE 14696
14686: GO 14688
14688: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
14689: LD_STRING KaganDone
14691: PPUSH
14692: CALL_OW 337
14696: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
14697: LD_EXP 6
14701: PUSH
14702: LD_EXP 48
14706: PPUSH
14707: LD_INT 95
14709: PUSH
14710: LD_INT 19
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: PPUSH
14717: CALL_OW 72
14721: AND
14722: IFFALSE 14799
14724: GO 14726
14726: DISABLE
// begin DialogueOn ;
14727: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
14731: LD_INT 63
14733: PPUSH
14734: LD_INT 32
14736: PPUSH
14737: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
14741: LD_INT 63
14743: PPUSH
14744: LD_INT 32
14746: PPUSH
14747: LD_INT 2
14749: PPUSH
14750: LD_INT 12
14752: NEG
14753: PPUSH
14754: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
14758: LD_EXP 25
14762: PPUSH
14763: LD_STRING DH-Omicron-1
14765: PPUSH
14766: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
14770: LD_EXP 27
14774: PPUSH
14775: LD_STRING DM-Omicron-2
14777: PPUSH
14778: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
14782: LD_INT 63
14784: PPUSH
14785: LD_INT 32
14787: PPUSH
14788: LD_INT 2
14790: PPUSH
14791: CALL_OW 331
// DialogueOff ;
14795: CALL_OW 7
// end ;
14799: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
14800: LD_INT 2
14802: PPUSH
14803: LD_EXP 50
14807: PPUSH
14808: CALL_OW 292
14812: PUSH
14813: LD_EXP 50
14817: PPUSH
14818: CALL_OW 255
14822: PUSH
14823: LD_INT 2
14825: EQUAL
14826: OR
14827: PUSH
14828: LD_INT 106
14830: PPUSH
14831: CALL_OW 255
14835: PUSH
14836: LD_INT 2
14838: EQUAL
14839: OR
14840: PUSH
14841: LD_EXP 50
14845: PPUSH
14846: CALL_OW 302
14850: AND
14851: PUSH
14852: LD_EXP 25
14856: PPUSH
14857: CALL_OW 302
14861: AND
14862: PUSH
14863: LD_EXP 35
14867: PPUSH
14868: CALL_OW 302
14872: AND
14873: IFFALSE 15594
14875: GO 14877
14877: DISABLE
14878: LD_INT 0
14880: PPUSH
14881: PPUSH
14882: PPUSH
14883: PPUSH
14884: PPUSH
// begin DialogueOn ;
14885: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
14889: LD_INT 111
14891: PPUSH
14892: LD_INT 90
14894: PPUSH
14895: LD_INT 2
14897: PPUSH
14898: LD_INT 6
14900: NEG
14901: PPUSH
14902: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
14906: LD_INT 111
14908: PPUSH
14909: LD_INT 90
14911: PPUSH
14912: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
14916: LD_EXP 35
14920: PPUSH
14921: LD_STRING DA-Cap-1
14923: PPUSH
14924: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
14928: LD_EXP 25
14932: PPUSH
14933: LD_STRING DH-Cap-2
14935: PPUSH
14936: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
14940: LD_INT 111
14942: PPUSH
14943: LD_INT 90
14945: PPUSH
14946: LD_INT 2
14948: PPUSH
14949: CALL_OW 331
// DialogueOff ;
14953: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
14957: LD_INT 35
14959: PPUSH
14960: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 110 , 95 , 12 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_distxy , 110 , 95 , 12 ] ] ) ;
14964: LD_EXP 17
14968: PUSH
14969: LD_INT 106
14971: PPUSH
14972: CALL_OW 255
14976: PUSH
14977: LD_INT 2
14979: EQUAL
14980: OR
14981: PUSH
14982: LD_EXP 50
14986: PPUSH
14987: CALL_OW 255
14991: PUSH
14992: LD_INT 2
14994: EQUAL
14995: OR
14996: PUSH
14997: LD_EXP 50
15001: PPUSH
15002: CALL_OW 302
15006: AND
15007: PUSH
15008: LD_EXP 35
15012: PPUSH
15013: CALL_OW 302
15017: AND
15018: PUSH
15019: LD_INT 2
15021: PPUSH
15022: CALL_OW 463
15026: NOT
15027: AND
15028: PUSH
15029: LD_INT 22
15031: PUSH
15032: LD_INT 3
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: PUSH
15039: LD_INT 21
15041: PUSH
15042: LD_INT 1
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: PUSH
15049: LD_INT 92
15051: PUSH
15052: LD_INT 110
15054: PUSH
15055: LD_INT 95
15057: PUSH
15058: LD_INT 12
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: LIST
15071: PPUSH
15072: CALL_OW 69
15076: NOT
15077: AND
15078: PUSH
15079: LD_INT 22
15081: PUSH
15082: LD_INT 3
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: PUSH
15089: LD_INT 30
15091: PUSH
15092: LD_INT 5
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: PUSH
15099: LD_INT 92
15101: PUSH
15102: LD_INT 110
15104: PUSH
15105: LD_INT 95
15107: PUSH
15108: LD_INT 12
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: LIST
15121: PPUSH
15122: CALL_OW 69
15126: NOT
15127: AND
15128: IFFALSE 14957
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
15130: LD_ADDR_VAR 0 2
15134: PUSH
15135: LD_EXP 37
15139: PUSH
15140: LD_EXP 28
15144: PUSH
15145: LD_EXP 29
15149: PUSH
15150: LD_EXP 31
15154: PUSH
15155: LD_EXP 30
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: UNION
15166: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
15167: LD_ADDR_VAR 0 2
15171: PUSH
15172: LD_VAR 0 2
15176: PPUSH
15177: LD_INT 50
15179: PUSH
15180: EMPTY
15181: LIST
15182: PPUSH
15183: CALL_OW 72
15187: ST_TO_ADDR
// if tmp < 2 then
15188: LD_VAR 0 2
15192: PUSH
15193: LD_INT 2
15195: LESS
15196: IFFALSE 15208
// q := 2 else
15198: LD_ADDR_VAR 0 4
15202: PUSH
15203: LD_INT 2
15205: ST_TO_ADDR
15206: GO 15221
// q := Query ( LabCap ) ;
15208: LD_ADDR_VAR 0 4
15212: PUSH
15213: LD_STRING LabCap
15215: PPUSH
15216: CALL_OW 97
15220: ST_TO_ADDR
// case q of 1 :
15221: LD_VAR 0 4
15225: PUSH
15226: LD_INT 1
15228: DOUBLE
15229: EQUAL
15230: IFTRUE 15234
15232: GO 15558
15234: POP
// begin DoNotAttack ( 2 , ruLab ) ;
15235: LD_INT 2
15237: PPUSH
15238: LD_EXP 50
15242: PPUSH
15243: CALL_OW 471
// labCaptured := true ;
15247: LD_ADDR_EXP 21
15251: PUSH
15252: LD_INT 1
15254: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
15255: LD_EXP 25
15259: PPUSH
15260: LD_STRING DH-Cap-a-1
15262: PPUSH
15263: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
15267: LD_EXP 35
15271: PPUSH
15272: LD_STRING DA-Cap-a-2
15274: PPUSH
15275: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike ] ^ [ sel_changeable ] ^ tmp ;
15279: LD_ADDR_VAR 0 5
15283: PUSH
15284: LD_EXP 35
15288: PUSH
15289: LD_INT -3
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: PUSH
15296: LD_INT -2
15298: PUSH
15299: LD_INT -4
15301: PUSH
15302: LD_EXP 25
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: LIST
15311: ADD
15312: PUSH
15313: LD_INT -3
15315: PUSH
15316: EMPTY
15317: LIST
15318: ADD
15319: PUSH
15320: LD_VAR 0 2
15324: ADD
15325: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
15326: LD_ADDR_VAR 0 3
15330: PUSH
15331: LD_STRING Select two characters to go with Aviradze
15333: PPUSH
15334: LD_INT 2
15336: PPUSH
15337: LD_INT 2
15339: PPUSH
15340: LD_VAR 0 5
15344: PPUSH
15345: EMPTY
15346: PPUSH
15347: CALL_OW 42
15351: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
15352: LD_EXP 50
15356: PPUSH
15357: LD_INT 8
15359: PPUSH
15360: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
15364: LD_EXP 35
15368: PPUSH
15369: LD_INT 8
15371: PPUSH
15372: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
15376: LD_ADDR_EXP 39
15380: PUSH
15381: LD_EXP 35
15385: PUSH
15386: EMPTY
15387: LIST
15388: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
15389: LD_EXP 35
15393: PPUSH
15394: CALL_OW 310
15398: IFFALSE 15409
// ComExit ( Aviradze ) ;
15400: LD_EXP 35
15404: PPUSH
15405: CALL 867 0 1
// wait ( 3 ) ;
15409: LD_INT 3
15411: PPUSH
15412: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
15416: LD_EXP 35
15420: PPUSH
15421: LD_EXP 50
15425: PPUSH
15426: CALL_OW 120
// for i := 1 to 2 do
15430: LD_ADDR_VAR 0 1
15434: PUSH
15435: DOUBLE
15436: LD_INT 1
15438: DEC
15439: ST_TO_ADDR
15440: LD_INT 2
15442: PUSH
15443: FOR_TO
15444: IFFALSE 15547
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
15446: LD_ADDR_EXP 39
15450: PUSH
15451: LD_EXP 39
15455: PUSH
15456: LD_VAR 0 3
15460: PUSH
15461: LD_VAR 0 1
15465: ARRAY
15466: UNION
15467: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
15468: LD_VAR 0 3
15472: PUSH
15473: LD_VAR 0 1
15477: ARRAY
15478: PPUSH
15479: LD_INT 8
15481: PPUSH
15482: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
15486: LD_VAR 0 3
15490: PUSH
15491: LD_VAR 0 1
15495: ARRAY
15496: PPUSH
15497: CALL_OW 310
15501: IFFALSE 15518
// ComExit ( tmp2 [ i ] ) ;
15503: LD_VAR 0 3
15507: PUSH
15508: LD_VAR 0 1
15512: ARRAY
15513: PPUSH
15514: CALL 867 0 1
// wait ( 3 ) ;
15518: LD_INT 3
15520: PPUSH
15521: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
15525: LD_VAR 0 3
15529: PUSH
15530: LD_VAR 0 1
15534: ARRAY
15535: PPUSH
15536: LD_EXP 50
15540: PPUSH
15541: CALL_OW 120
// end ;
15545: GO 15443
15547: POP
15548: POP
// SetAchievement ( ACH_LAB ) ;
15549: LD_STRING ACH_LAB
15551: PPUSH
15552: CALL_OW 543
// end ; 2 :
15556: GO 15594
15558: LD_INT 2
15560: DOUBLE
15561: EQUAL
15562: IFTRUE 15566
15564: GO 15593
15566: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
15567: LD_EXP 25
15571: PPUSH
15572: LD_STRING DH-Cap-b-1
15574: PPUSH
15575: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
15579: LD_EXP 35
15583: PPUSH
15584: LD_STRING DA-Cap-b-2
15586: PPUSH
15587: CALL_OW 88
// end ; end ;
15591: GO 15594
15593: POP
// end ;
15594: PPOPN 5
15596: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
15597: LD_INT 10
15599: PPUSH
15600: LD_INT 22
15602: PUSH
15603: LD_INT 2
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: LD_INT 30
15612: PUSH
15613: LD_INT 31
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: PPUSH
15624: CALL_OW 70
15628: PUSH
15629: LD_INT 2
15631: GREATEREQUAL
15632: IFFALSE 15644
15634: GO 15636
15636: DISABLE
// SetAchievement ( ACH_KING ) ;
15637: LD_STRING ACH_KING
15639: PPUSH
15640: CALL_OW 543
15644: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
15645: LD_EXP 11
15649: NOT
15650: PUSH
15651: LD_INT 10
15653: PPUSH
15654: LD_INT 22
15656: PUSH
15657: LD_INT 2
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: PUSH
15664: LD_INT 2
15666: PUSH
15667: LD_INT 30
15669: PUSH
15670: LD_INT 31
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PUSH
15677: LD_INT 30
15679: PUSH
15680: LD_INT 4
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: LIST
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: PPUSH
15696: CALL_OW 70
15700: AND
15701: IFFALSE 15721
15703: GO 15705
15705: DISABLE
// begin hillBase := true ;
15706: LD_ADDR_EXP 15
15710: PUSH
15711: LD_INT 1
15713: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
15714: LD_STRING HillDone
15716: PPUSH
15717: CALL_OW 337
// end ;
15721: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
15722: LD_EXP 30
15726: PUSH
15727: LD_EXP 30
15731: PPUSH
15732: CALL_OW 256
15736: PUSH
15737: LD_INT 3
15739: LESS
15740: AND
15741: IFFALSE 15787
15743: GO 15745
15745: DISABLE
// begin DialogueOn ;
15746: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
15750: LD_EXP 30
15754: PPUSH
15755: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
15759: LD_EXP 30
15763: PPUSH
15764: LD_STRING DK-Kkilled-1
15766: PPUSH
15767: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
15771: LD_EXP 25
15775: PPUSH
15776: LD_STRING DH-Kkilled-2
15778: PPUSH
15779: CALL_OW 88
// DialogueOff ;
15783: CALL_OW 7
// end ;
15787: END
// every 0 0$1 trigger kaiaKilledByRussian do
15788: LD_EXP 23
15792: IFFALSE 15809
15794: GO 15796
15796: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
15797: LD_EXP 25
15801: PPUSH
15802: LD_STRING DH-Kkilled-3
15804: PPUSH
15805: CALL_OW 88
15809: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo ;
15810: LD_EXP 16
15814: PUSH
15815: LD_INT 106
15817: PPUSH
15818: CALL_OW 255
15822: PUSH
15823: LD_INT 2
15825: EQUAL
15826: PUSH
15827: LD_EXP 17
15831: OR
15832: AND
15833: PUSH
15834: LD_EXP 18
15838: PUSH
15839: LD_EXP 24
15843: PUSH
15844: LD_INT 112
15846: PPUSH
15847: CALL_OW 255
15851: PUSH
15852: LD_INT 2
15854: EQUAL
15855: AND
15856: OR
15857: AND
15858: IFFALSE 17040
15860: GO 15862
15862: DISABLE
15863: LD_INT 0
15865: PPUSH
15866: PPUSH
15867: PPUSH
15868: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
15869: LD_STRING GoToWest
15871: PPUSH
15872: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
15876: LD_INT 17
15878: PPUSH
15879: LD_INT 1
15881: PPUSH
15882: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
15886: LD_INT 35
15888: PPUSH
15889: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15893: LD_ADDR_VAR 0 2
15897: PUSH
15898: LD_INT 17
15900: PPUSH
15901: LD_INT 22
15903: PUSH
15904: LD_INT 2
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: PUSH
15911: LD_INT 2
15913: PUSH
15914: LD_INT 21
15916: PUSH
15917: LD_INT 1
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: LD_INT 21
15926: PUSH
15927: LD_INT 2
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PUSH
15934: LD_INT 3
15936: PUSH
15937: LD_INT 58
15939: PUSH
15940: EMPTY
15941: LIST
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: LIST
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: PPUSH
15960: CALL_OW 70
15964: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15965: LD_ADDR_VAR 0 3
15969: PUSH
15970: LD_INT 22
15972: PUSH
15973: LD_INT 2
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PUSH
15980: LD_INT 3
15982: PUSH
15983: LD_INT 55
15985: PUSH
15986: EMPTY
15987: LIST
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PUSH
15993: LD_INT 2
15995: PUSH
15996: LD_INT 21
15998: PUSH
15999: LD_INT 1
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: PUSH
16006: LD_INT 21
16008: PUSH
16009: LD_INT 2
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: PUSH
16016: LD_INT 3
16018: PUSH
16019: LD_INT 58
16021: PUSH
16022: EMPTY
16023: LIST
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: PUSH
16029: EMPTY
16030: LIST
16031: LIST
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: LIST
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: LIST
16042: PPUSH
16043: CALL_OW 69
16047: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
16048: LD_VAR 0 2
16052: PUSH
16053: LD_INT 0
16055: PLUS
16056: PUSH
16057: LD_VAR 0 3
16061: PUSH
16062: LD_INT 0
16064: PLUS
16065: EQUAL
16066: IFFALSE 15886
// SaveCharacters ( Heike , 04_1_Heike ) ;
16068: LD_EXP 25
16072: PPUSH
16073: LD_STRING 04_1_Heike
16075: PPUSH
16076: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
16080: LD_EXP 35
16084: PUSH
16085: LD_EXP 35
16089: PUSH
16090: LD_EXP 39
16094: IN
16095: NOT
16096: AND
16097: IFFALSE 16113
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
16099: LD_EXP 35
16103: PPUSH
16104: LD_STRING 04_1_Aviradze
16106: PPUSH
16107: CALL_OW 38
16111: GO 16131
// if Aviradze then
16113: LD_EXP 35
16117: IFFALSE 16131
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
16119: LD_EXP 35
16123: PPUSH
16124: LD_STRING 04_1_Aviradze_L
16126: PPUSH
16127: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
16131: LD_EXP 28
16135: PUSH
16136: LD_EXP 28
16140: PUSH
16141: LD_EXP 39
16145: IN
16146: NOT
16147: AND
16148: IFFALSE 16164
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
16150: LD_EXP 28
16154: PPUSH
16155: LD_STRING 04_1_Ibrahim
16157: PPUSH
16158: CALL_OW 38
16162: GO 16182
// if Ibrahim then
16164: LD_EXP 28
16168: IFFALSE 16182
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
16170: LD_EXP 28
16174: PPUSH
16175: LD_STRING 04_1_Ibrahim_L
16177: PPUSH
16178: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
16182: LD_EXP 29
16186: PUSH
16187: LD_EXP 29
16191: PUSH
16192: LD_EXP 39
16196: IN
16197: NOT
16198: AND
16199: IFFALSE 16215
// SaveCharacters ( Kamil , 04_1_Kamil ) else
16201: LD_EXP 29
16205: PPUSH
16206: LD_STRING 04_1_Kamil
16208: PPUSH
16209: CALL_OW 38
16213: GO 16233
// if Kamil then
16215: LD_EXP 29
16219: IFFALSE 16233
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
16221: LD_EXP 29
16225: PPUSH
16226: LD_STRING 04_1_Kamil_L
16228: PPUSH
16229: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
16233: LD_EXP 31
16237: PUSH
16238: LD_EXP 31
16242: PUSH
16243: LD_EXP 39
16247: IN
16248: NOT
16249: AND
16250: IFFALSE 16266
// SaveCharacters ( Sophia , 04_1_Sophia ) else
16252: LD_EXP 31
16256: PPUSH
16257: LD_STRING 04_1_Sophia
16259: PPUSH
16260: CALL_OW 38
16264: GO 16284
// if Sophia then
16266: LD_EXP 31
16270: IFFALSE 16284
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
16272: LD_EXP 31
16276: PPUSH
16277: LD_STRING 04_1_Sophia_L
16279: PPUSH
16280: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
16284: LD_EXP 30
16288: PUSH
16289: LD_EXP 30
16293: PUSH
16294: LD_EXP 39
16298: IN
16299: NOT
16300: AND
16301: IFFALSE 16317
// SaveCharacters ( Kaia , 04_1_Kaia ) else
16303: LD_EXP 30
16307: PPUSH
16308: LD_STRING 04_1_Kaia
16310: PPUSH
16311: CALL_OW 38
16315: GO 16335
// if Kaia then
16317: LD_EXP 30
16321: IFFALSE 16335
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
16323: LD_EXP 30
16327: PPUSH
16328: LD_STRING 04_1_Kaia_L
16330: PPUSH
16331: CALL_OW 38
// if Givi then
16335: LD_EXP 26
16339: IFFALSE 16353
// SaveCharacters ( Givi , 04_1_Givi ) ;
16341: LD_EXP 26
16345: PPUSH
16346: LD_STRING 04_1_Givi
16348: PPUSH
16349: CALL_OW 38
// if Mike then
16353: LD_EXP 27
16357: IFFALSE 16371
// SaveCharacters ( Mike , 04_1_Mike ) ;
16359: LD_EXP 27
16363: PPUSH
16364: LD_STRING 04_1_Mike
16366: PPUSH
16367: CALL_OW 38
// if Markov then
16371: LD_EXP 32
16375: IFFALSE 16389
// SaveCharacters ( Markov , 04_1_Markov ) ;
16377: LD_EXP 32
16381: PPUSH
16382: LD_STRING 04_1_Markov
16384: PPUSH
16385: CALL_OW 38
// if Kurt then
16389: LD_EXP 34
16393: IFFALSE 16407
// SaveCharacters ( Kurt , 04_1_Kurt ) ;
16395: LD_EXP 34
16399: PPUSH
16400: LD_STRING 04_1_Kurt
16402: PPUSH
16403: CALL_OW 38
// if heikeSecondSquad diff aviradzeSquad then
16407: LD_EXP 37
16411: PUSH
16412: LD_EXP 39
16416: DIFF
16417: IFFALSE 16437
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
16419: LD_EXP 37
16423: PUSH
16424: LD_EXP 39
16428: DIFF
16429: PPUSH
16430: LD_STRING 04_1_others
16432: PPUSH
16433: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
16437: LD_EXP 39
16441: PUSH
16442: LD_EXP 37
16446: AND
16447: IFFALSE 16532
// begin tmp := [ ] ;
16449: LD_ADDR_VAR 0 2
16453: PUSH
16454: EMPTY
16455: ST_TO_ADDR
// for i in heikeSecondSquad do
16456: LD_ADDR_VAR 0 1
16460: PUSH
16461: LD_EXP 37
16465: PUSH
16466: FOR_IN
16467: IFFALSE 16512
// if i in aviradzeSquad then
16469: LD_VAR 0 1
16473: PUSH
16474: LD_EXP 39
16478: IN
16479: IFFALSE 16510
// tmp := Replace ( tmp , tmp + 1 , i ) ;
16481: LD_ADDR_VAR 0 2
16485: PUSH
16486: LD_VAR 0 2
16490: PPUSH
16491: LD_VAR 0 2
16495: PUSH
16496: LD_INT 1
16498: PLUS
16499: PPUSH
16500: LD_VAR 0 1
16504: PPUSH
16505: CALL_OW 1
16509: ST_TO_ADDR
16510: GO 16466
16512: POP
16513: POP
// if tmp then
16514: LD_VAR 0 2
16518: IFFALSE 16532
// SaveCharacters ( tmp , 04_1_others_L ) ;
16520: LD_VAR 0 2
16524: PPUSH
16525: LD_STRING 04_1_others_L
16527: PPUSH
16528: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
16532: LD_ADDR_VAR 0 2
16536: PUSH
16537: LD_INT 22
16539: PUSH
16540: LD_INT 2
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PUSH
16547: LD_INT 23
16549: PUSH
16550: LD_INT 0
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: PPUSH
16561: CALL_OW 69
16565: ST_TO_ADDR
// if tmp then
16566: LD_VAR 0 2
16570: IFFALSE 16584
// SaveCharacters ( tmp , 04_1_apes ) ;
16572: LD_VAR 0 2
16576: PPUSH
16577: LD_STRING 04_1_apes
16579: PPUSH
16580: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
16584: LD_ADDR_VAR 0 2
16588: PUSH
16589: LD_INT 17
16591: PPUSH
16592: LD_INT 21
16594: PUSH
16595: LD_INT 2
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: PPUSH
16602: CALL_OW 70
16606: ST_TO_ADDR
// if tmp then
16607: LD_VAR 0 2
16611: IFFALSE 16905
// begin tmp2 := [ ] ;
16613: LD_ADDR_VAR 0 3
16617: PUSH
16618: EMPTY
16619: ST_TO_ADDR
// for i in tmp do
16620: LD_ADDR_VAR 0 1
16624: PUSH
16625: LD_VAR 0 2
16629: PUSH
16630: FOR_IN
16631: IFFALSE 16891
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
16633: LD_VAR 0 1
16637: PPUSH
16638: CALL_OW 264
16642: PUSH
16643: LD_INT 32
16645: PUSH
16646: LD_INT 12
16648: PUSH
16649: LD_INT 51
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: LIST
16656: IN
16657: IFFALSE 16794
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
16659: LD_ADDR_VAR 0 4
16663: PUSH
16664: LD_VAR 0 1
16668: PPUSH
16669: LD_INT 1
16671: PPUSH
16672: CALL_OW 289
16676: PUSH
16677: LD_VAR 0 1
16681: PPUSH
16682: LD_INT 2
16684: PPUSH
16685: CALL_OW 289
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
16694: LD_ADDR_VAR 0 3
16698: PUSH
16699: LD_VAR 0 3
16703: PPUSH
16704: LD_VAR 0 3
16708: PUSH
16709: LD_INT 1
16711: PLUS
16712: PPUSH
16713: LD_VAR 0 1
16717: PPUSH
16718: CALL_OW 265
16722: PUSH
16723: LD_VAR 0 1
16727: PPUSH
16728: CALL_OW 262
16732: PUSH
16733: LD_VAR 0 1
16737: PPUSH
16738: CALL_OW 263
16742: PUSH
16743: LD_VAR 0 1
16747: PPUSH
16748: CALL_OW 264
16752: PUSH
16753: LD_VAR 0 1
16757: PPUSH
16758: CALL_OW 248
16762: PUSH
16763: LD_VAR 0 1
16767: PPUSH
16768: CALL_OW 256
16772: PUSH
16773: LD_VAR 0 4
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: PPUSH
16787: CALL_OW 1
16791: ST_TO_ADDR
// end else
16792: GO 16889
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
16794: LD_ADDR_VAR 0 3
16798: PUSH
16799: LD_VAR 0 3
16803: PPUSH
16804: LD_VAR 0 3
16808: PUSH
16809: LD_INT 1
16811: PLUS
16812: PPUSH
16813: LD_VAR 0 1
16817: PPUSH
16818: CALL_OW 265
16822: PUSH
16823: LD_VAR 0 1
16827: PPUSH
16828: CALL_OW 262
16832: PUSH
16833: LD_VAR 0 1
16837: PPUSH
16838: CALL_OW 263
16842: PUSH
16843: LD_VAR 0 1
16847: PPUSH
16848: CALL_OW 264
16852: PUSH
16853: LD_VAR 0 1
16857: PPUSH
16858: CALL_OW 248
16862: PUSH
16863: LD_VAR 0 1
16867: PPUSH
16868: CALL_OW 256
16872: PUSH
16873: EMPTY
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: PPUSH
16884: CALL_OW 1
16888: ST_TO_ADDR
16889: GO 16630
16891: POP
16892: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
16893: LD_VAR 0 3
16897: PPUSH
16898: LD_STRING 04_1_Vehicles
16900: PPUSH
16901: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
16905: LD_EXP 21
16909: PPUSH
16910: LD_STRING 04_1_RuLabCaptured
16912: PPUSH
16913: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
16917: LD_EXP 19
16921: PPUSH
16922: LD_STRING 04_1_EscapeCounter
16924: PPUSH
16925: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
16929: LD_EXP 15
16933: PPUSH
16934: LD_STRING 04_1_BaseHill
16936: PPUSH
16937: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
16941: LD_OWVAR 1
16945: PPUSH
16946: LD_STRING 04_1_Time
16948: PPUSH
16949: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
16953: LD_EXP 14
16957: PPUSH
16958: LD_STRING 04_1_DeadCounter
16960: PPUSH
16961: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
16965: LD_EXP 24
16969: PUSH
16970: LD_INT 112
16972: PPUSH
16973: CALL_OW 255
16977: MUL
16978: PUSH
16979: LD_INT 2
16981: EQUAL
16982: PPUSH
16983: LD_STRING 04_1_KaganCaptured
16985: PPUSH
16986: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
16990: LD_INT 22
16992: PUSH
16993: LD_INT 2
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PUSH
17000: LD_INT 34
17002: PUSH
17003: LD_INT 26
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PPUSH
17014: CALL_OW 69
17018: PUSH
17019: LD_INT 0
17021: PLUS
17022: PPUSH
17023: LD_STRING 04_1_Flamethrower
17025: PPUSH
17026: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
17030: LD_INT 1
17032: PPUSH
17033: LD_STRING __x1\04_cont2
17035: PPUSH
17036: CALL_OW 340
// end ; end_of_file
17040: PPOPN 4
17042: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
17043: LD_VAR 0 1
17047: PPUSH
17048: CALL_OW 266
17052: PUSH
17053: LD_INT 0
17055: EQUAL
17056: PUSH
17057: LD_VAR 0 1
17061: PPUSH
17062: CALL_OW 255
17066: PUSH
17067: LD_INT 2
17069: EQUAL
17070: AND
17071: IFFALSE 17081
// baseConstructed := true ;
17073: LD_ADDR_EXP 3
17077: PUSH
17078: LD_INT 1
17080: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
17081: LD_VAR 0 1
17085: PPUSH
17086: CALL_OW 266
17090: PUSH
17091: LD_INT 6
17093: EQUAL
17094: PUSH
17095: LD_VAR 0 1
17099: PPUSH
17100: CALL_OW 255
17104: PUSH
17105: LD_INT 2
17107: EQUAL
17108: AND
17109: IFFALSE 17119
// labConstructed := true ;
17111: LD_ADDR_EXP 4
17115: PUSH
17116: LD_INT 1
17118: ST_TO_ADDR
// end ;
17119: PPOPN 1
17121: END
// on UnitDestroyed ( un ) do begin if un = Heike then
17122: LD_VAR 0 1
17126: PUSH
17127: LD_EXP 25
17131: EQUAL
17132: IFFALSE 17141
// YouLost ( Heike ) ;
17134: LD_STRING Heike
17136: PPUSH
17137: CALL_OW 104
// if un = Omar then
17141: LD_VAR 0 1
17145: PUSH
17146: LD_EXP 33
17150: EQUAL
17151: IFFALSE 17160
// YouLost ( Omar ) ;
17153: LD_STRING Omar
17155: PPUSH
17156: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
17160: LD_VAR 0 1
17164: PUSH
17165: LD_INT 22
17167: PUSH
17168: LD_INT 2
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: PUSH
17175: LD_INT 23
17177: PUSH
17178: LD_INT 2
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: PUSH
17185: LD_INT 21
17187: PUSH
17188: LD_INT 1
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: LIST
17199: PPUSH
17200: CALL_OW 69
17204: IN
17205: IFFALSE 17221
// loseCounter := loseCounter + 1 ;
17207: LD_ADDR_EXP 14
17211: PUSH
17212: LD_EXP 14
17216: PUSH
17217: LD_INT 1
17219: PLUS
17220: ST_TO_ADDR
// if un = omikron then
17221: LD_VAR 0 1
17225: PUSH
17226: LD_INT 64
17228: EQUAL
17229: IFFALSE 17239
// omicronFall := true ;
17231: LD_ADDR_EXP 13
17235: PUSH
17236: LD_INT 1
17238: ST_TO_ADDR
// if un = kirov then
17239: LD_VAR 0 1
17243: PUSH
17244: LD_INT 71
17246: EQUAL
17247: IFFALSE 17264
// begin ChangeMissionObjectives ( KirovDone ) ;
17249: LD_STRING KirovDone
17251: PPUSH
17252: CALL_OW 337
// kirovDestroyed := true ;
17256: LD_ADDR_EXP 16
17260: PUSH
17261: LD_INT 1
17263: ST_TO_ADDR
// end ; if un = beria then
17264: LD_VAR 0 1
17268: PUSH
17269: LD_INT 106
17271: EQUAL
17272: IFFALSE 17289
// begin ChangeMissionObjectives ( BeriaDone ) ;
17274: LD_STRING BeriaDone
17276: PPUSH
17277: CALL_OW 337
// beriaDestroyed := true ;
17281: LD_ADDR_EXP 17
17285: PUSH
17286: LD_INT 1
17288: ST_TO_ADDR
// end ; if un = kagan then
17289: LD_VAR 0 1
17293: PUSH
17294: LD_INT 112
17296: EQUAL
17297: IFFALSE 17307
// kaganDestroyed := true ;
17299: LD_ADDR_EXP 18
17303: PUSH
17304: LD_INT 1
17306: ST_TO_ADDR
// if un in russianPatrol then
17307: LD_VAR 0 1
17311: PUSH
17312: LD_EXP 47
17316: IN
17317: IFFALSE 17335
// russianPatrol := russianPatrol diff un ;
17319: LD_ADDR_EXP 47
17323: PUSH
17324: LD_EXP 47
17328: PUSH
17329: LD_VAR 0 1
17333: DIFF
17334: ST_TO_ADDR
// if un in russianOmicronAttackers then
17335: LD_VAR 0 1
17339: PUSH
17340: LD_EXP 48
17344: IN
17345: IFFALSE 17363
// russianOmicronAttackers := russianOmicronAttackers diff un ;
17347: LD_ADDR_EXP 48
17351: PUSH
17352: LD_EXP 48
17356: PUSH
17357: LD_VAR 0 1
17361: DIFF
17362: ST_TO_ADDR
// end ;
17363: PPOPN 1
17365: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
17366: LD_INT 0
17368: PPUSH
17369: PPUSH
17370: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
17371: LD_VAR 0 1
17375: PUSH
17376: LD_INT 2
17378: PUSH
17379: LD_INT 22
17381: PUSH
17382: LD_INT 3
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: PUSH
17389: LD_INT 22
17391: PUSH
17392: LD_INT 4
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: PUSH
17399: LD_INT 22
17401: PUSH
17402: LD_INT 6
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: PUSH
17415: LD_INT 30
17417: PUSH
17418: LD_INT 32
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PPUSH
17429: CALL_OW 69
17433: IN
17434: IFFALSE 17607
// begin sol := UnitsInside ( un ) ;
17436: LD_ADDR_VAR 0 3
17440: PUSH
17441: LD_VAR 0 1
17445: PPUSH
17446: CALL_OW 313
17450: ST_TO_ADDR
// if not sol then
17451: LD_VAR 0 3
17455: NOT
17456: IFFALSE 17460
// exit ;
17458: GO 17607
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17460: LD_ADDR_VAR 0 4
17464: PUSH
17465: LD_INT 22
17467: PUSH
17468: LD_VAR 0 1
17472: PPUSH
17473: CALL_OW 255
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: PUSH
17482: LD_INT 2
17484: PUSH
17485: LD_INT 30
17487: PUSH
17488: LD_INT 4
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: PUSH
17495: LD_INT 30
17497: PUSH
17498: LD_INT 5
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: LIST
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: PPUSH
17514: CALL_OW 69
17518: ST_TO_ADDR
// if not nearestBarracks then
17519: LD_VAR 0 4
17523: NOT
17524: IFFALSE 17528
// exit ;
17526: GO 17607
// for i in nearestBarracks do
17528: LD_ADDR_VAR 0 2
17532: PUSH
17533: LD_VAR 0 4
17537: PUSH
17538: FOR_IN
17539: IFFALSE 17574
// if UnitsInside ( i ) = 6 then
17541: LD_VAR 0 2
17545: PPUSH
17546: CALL_OW 313
17550: PUSH
17551: LD_INT 6
17553: EQUAL
17554: IFFALSE 17572
// nearestBarracks := nearestBarracks diff i ;
17556: LD_ADDR_VAR 0 4
17560: PUSH
17561: LD_VAR 0 4
17565: PUSH
17566: LD_VAR 0 2
17570: DIFF
17571: ST_TO_ADDR
17572: GO 17538
17574: POP
17575: POP
// if not nearestBarracks then
17576: LD_VAR 0 4
17580: NOT
17581: IFFALSE 17585
// exit ;
17583: GO 17607
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
17585: LD_VAR 0 3
17589: PUSH
17590: LD_INT 1
17592: ARRAY
17593: PPUSH
17594: LD_VAR 0 4
17598: PUSH
17599: LD_INT 1
17601: ARRAY
17602: PPUSH
17603: CALL_OW 120
// end ; end ;
17607: PPOPN 4
17609: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
17610: LD_INT 0
17612: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
17613: LD_EXP 8
17617: NOT
17618: PUSH
17619: LD_EXP 5
17623: NOT
17624: OR
17625: IFFALSE 17629
// exit ;
17627: GO 17697
// for i in camAreas do
17629: LD_ADDR_VAR 0 5
17633: PUSH
17634: LD_EXP 8
17638: PUSH
17639: FOR_IN
17640: IFFALSE 17695
// if InArea ( x , y , i ) then
17642: LD_VAR 0 3
17646: PPUSH
17647: LD_VAR 0 4
17651: PPUSH
17652: LD_VAR 0 5
17656: PPUSH
17657: CALL_OW 309
17661: IFFALSE 17693
// begin SetAreaMapShow ( i , 0 ) ;
17663: LD_VAR 0 5
17667: PPUSH
17668: LD_INT 0
17670: PPUSH
17671: CALL_OW 424
// camAreas := camAreas diff i ;
17675: LD_ADDR_EXP 8
17679: PUSH
17680: LD_EXP 8
17684: PUSH
17685: LD_VAR 0 5
17689: DIFF
17690: ST_TO_ADDR
// break ;
17691: GO 17695
// end ;
17693: GO 17639
17695: POP
17696: POP
// end ;
17697: PPOPN 5
17699: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
17700: LD_VAR 0 1
17704: PUSH
17705: LD_INT 2
17707: EQUAL
17708: PUSH
17709: LD_VAR 0 2
17713: PUSH
17714: LD_INT 5
17716: PUSH
17717: LD_INT 8
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: IN
17724: AND
17725: IFFALSE 17734
// YouLost ( Ally ) ;
17727: LD_STRING Ally
17729: PPUSH
17730: CALL_OW 104
// end ;
17734: PPOPN 2
17736: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
17737: LD_VAR 0 1
17741: PUSH
17742: LD_EXP 30
17746: EQUAL
17747: PUSH
17748: LD_VAR 0 2
17752: PUSH
17753: LD_INT 3
17755: PUSH
17756: LD_INT 6
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: IN
17763: AND
17764: IFFALSE 17795
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
17766: LD_ADDR_EXP 23
17770: PUSH
17771: LD_VAR 0 1
17775: PPUSH
17776: CALL_OW 250
17780: PUSH
17781: LD_VAR 0 1
17785: PPUSH
17786: CALL_OW 251
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: ST_TO_ADDR
// end ; end_of_file
17795: PPOPN 3
17797: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 ] [ Difficulty ] do
17798: LD_EXP 11
17802: NOT
17803: PUSH
17804: LD_INT 12
17806: PPUSH
17807: LD_INT 1
17809: PPUSH
17810: CALL_OW 287
17814: PUSH
17815: LD_INT 20
17817: PUSH
17818: LD_INT 16
17820: PUSH
17821: LD_INT 12
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: LIST
17828: PUSH
17829: LD_OWVAR 67
17833: ARRAY
17834: LESS
17835: AND
17836: IFFALSE 17863
17838: GO 17840
17840: DISABLE
// begin enable ;
17841: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
17842: LD_INT 1
17844: PPUSH
17845: LD_INT 5
17847: PPUSH
17848: CALL_OW 12
17852: PPUSH
17853: LD_INT 12
17855: PPUSH
17856: LD_INT 1
17858: PPUSH
17859: CALL_OW 55
// end ; end_of_file
17863: END
// every 0 0$1 trigger omarCountdown do
17864: LD_EXP 22
17868: IFFALSE 17920
17870: GO 17872
17872: DISABLE
// begin enable ;
17873: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
17874: LD_ADDR_OWVAR 47
17878: PUSH
17879: LD_STRING #X104-1
17881: PUSH
17882: LD_EXP 22
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
17891: LD_ADDR_EXP 22
17895: PUSH
17896: LD_EXP 22
17900: PUSH
17901: LD_INT 35
17903: MINUS
17904: ST_TO_ADDR
// if not omarCountdown then
17905: LD_EXP 22
17909: NOT
17910: IFFALSE 17920
// display_strings :=  ;
17912: LD_ADDR_OWVAR 47
17916: PUSH
17917: LD_STRING 
17919: ST_TO_ADDR
// end ; end_of_file
17920: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
17921: LD_VAR 0 2
17925: PUSH
17926: LD_INT 100
17928: EQUAL
17929: IFFALSE 18878
// begin if not StreamModeActive then
17931: LD_EXP 52
17935: NOT
17936: IFFALSE 17946
// StreamModeActive := true ;
17938: LD_ADDR_EXP 52
17942: PUSH
17943: LD_INT 1
17945: ST_TO_ADDR
// if p3 = 0 then
17946: LD_VAR 0 3
17950: PUSH
17951: LD_INT 0
17953: EQUAL
17954: IFFALSE 17960
// InitStreamMode ;
17956: CALL 19111 0 0
// if p3 = 1 then
17960: LD_VAR 0 3
17964: PUSH
17965: LD_INT 1
17967: EQUAL
17968: IFFALSE 17978
// sRocket := true ;
17970: LD_ADDR_EXP 57
17974: PUSH
17975: LD_INT 1
17977: ST_TO_ADDR
// if p3 = 2 then
17978: LD_VAR 0 3
17982: PUSH
17983: LD_INT 2
17985: EQUAL
17986: IFFALSE 17996
// sSpeed := true ;
17988: LD_ADDR_EXP 56
17992: PUSH
17993: LD_INT 1
17995: ST_TO_ADDR
// if p3 = 3 then
17996: LD_VAR 0 3
18000: PUSH
18001: LD_INT 3
18003: EQUAL
18004: IFFALSE 18014
// sEngine := true ;
18006: LD_ADDR_EXP 58
18010: PUSH
18011: LD_INT 1
18013: ST_TO_ADDR
// if p3 = 4 then
18014: LD_VAR 0 3
18018: PUSH
18019: LD_INT 4
18021: EQUAL
18022: IFFALSE 18032
// sSpec := true ;
18024: LD_ADDR_EXP 55
18028: PUSH
18029: LD_INT 1
18031: ST_TO_ADDR
// if p3 = 5 then
18032: LD_VAR 0 3
18036: PUSH
18037: LD_INT 5
18039: EQUAL
18040: IFFALSE 18050
// sLevel := true ;
18042: LD_ADDR_EXP 59
18046: PUSH
18047: LD_INT 1
18049: ST_TO_ADDR
// if p3 = 6 then
18050: LD_VAR 0 3
18054: PUSH
18055: LD_INT 6
18057: EQUAL
18058: IFFALSE 18068
// sArmoury := true ;
18060: LD_ADDR_EXP 60
18064: PUSH
18065: LD_INT 1
18067: ST_TO_ADDR
// if p3 = 7 then
18068: LD_VAR 0 3
18072: PUSH
18073: LD_INT 7
18075: EQUAL
18076: IFFALSE 18086
// sRadar := true ;
18078: LD_ADDR_EXP 61
18082: PUSH
18083: LD_INT 1
18085: ST_TO_ADDR
// if p3 = 8 then
18086: LD_VAR 0 3
18090: PUSH
18091: LD_INT 8
18093: EQUAL
18094: IFFALSE 18104
// sBunker := true ;
18096: LD_ADDR_EXP 62
18100: PUSH
18101: LD_INT 1
18103: ST_TO_ADDR
// if p3 = 9 then
18104: LD_VAR 0 3
18108: PUSH
18109: LD_INT 9
18111: EQUAL
18112: IFFALSE 18122
// sHack := true ;
18114: LD_ADDR_EXP 63
18118: PUSH
18119: LD_INT 1
18121: ST_TO_ADDR
// if p3 = 10 then
18122: LD_VAR 0 3
18126: PUSH
18127: LD_INT 10
18129: EQUAL
18130: IFFALSE 18140
// sFire := true ;
18132: LD_ADDR_EXP 64
18136: PUSH
18137: LD_INT 1
18139: ST_TO_ADDR
// if p3 = 11 then
18140: LD_VAR 0 3
18144: PUSH
18145: LD_INT 11
18147: EQUAL
18148: IFFALSE 18158
// sRefresh := true ;
18150: LD_ADDR_EXP 65
18154: PUSH
18155: LD_INT 1
18157: ST_TO_ADDR
// if p3 = 12 then
18158: LD_VAR 0 3
18162: PUSH
18163: LD_INT 12
18165: EQUAL
18166: IFFALSE 18176
// sExp := true ;
18168: LD_ADDR_EXP 66
18172: PUSH
18173: LD_INT 1
18175: ST_TO_ADDR
// if p3 = 13 then
18176: LD_VAR 0 3
18180: PUSH
18181: LD_INT 13
18183: EQUAL
18184: IFFALSE 18194
// sDepot := true ;
18186: LD_ADDR_EXP 67
18190: PUSH
18191: LD_INT 1
18193: ST_TO_ADDR
// if p3 = 14 then
18194: LD_VAR 0 3
18198: PUSH
18199: LD_INT 14
18201: EQUAL
18202: IFFALSE 18212
// sFlag := true ;
18204: LD_ADDR_EXP 68
18208: PUSH
18209: LD_INT 1
18211: ST_TO_ADDR
// if p3 = 15 then
18212: LD_VAR 0 3
18216: PUSH
18217: LD_INT 15
18219: EQUAL
18220: IFFALSE 18230
// sKamikadze := true ;
18222: LD_ADDR_EXP 76
18226: PUSH
18227: LD_INT 1
18229: ST_TO_ADDR
// if p3 = 16 then
18230: LD_VAR 0 3
18234: PUSH
18235: LD_INT 16
18237: EQUAL
18238: IFFALSE 18248
// sTroll := true ;
18240: LD_ADDR_EXP 77
18244: PUSH
18245: LD_INT 1
18247: ST_TO_ADDR
// if p3 = 17 then
18248: LD_VAR 0 3
18252: PUSH
18253: LD_INT 17
18255: EQUAL
18256: IFFALSE 18266
// sSlow := true ;
18258: LD_ADDR_EXP 78
18262: PUSH
18263: LD_INT 1
18265: ST_TO_ADDR
// if p3 = 18 then
18266: LD_VAR 0 3
18270: PUSH
18271: LD_INT 18
18273: EQUAL
18274: IFFALSE 18284
// sLack := true ;
18276: LD_ADDR_EXP 79
18280: PUSH
18281: LD_INT 1
18283: ST_TO_ADDR
// if p3 = 19 then
18284: LD_VAR 0 3
18288: PUSH
18289: LD_INT 19
18291: EQUAL
18292: IFFALSE 18302
// sTank := true ;
18294: LD_ADDR_EXP 81
18298: PUSH
18299: LD_INT 1
18301: ST_TO_ADDR
// if p3 = 20 then
18302: LD_VAR 0 3
18306: PUSH
18307: LD_INT 20
18309: EQUAL
18310: IFFALSE 18320
// sRemote := true ;
18312: LD_ADDR_EXP 82
18316: PUSH
18317: LD_INT 1
18319: ST_TO_ADDR
// if p3 = 21 then
18320: LD_VAR 0 3
18324: PUSH
18325: LD_INT 21
18327: EQUAL
18328: IFFALSE 18338
// sPowell := true ;
18330: LD_ADDR_EXP 83
18334: PUSH
18335: LD_INT 1
18337: ST_TO_ADDR
// if p3 = 22 then
18338: LD_VAR 0 3
18342: PUSH
18343: LD_INT 22
18345: EQUAL
18346: IFFALSE 18356
// sTeleport := true ;
18348: LD_ADDR_EXP 86
18352: PUSH
18353: LD_INT 1
18355: ST_TO_ADDR
// if p3 = 23 then
18356: LD_VAR 0 3
18360: PUSH
18361: LD_INT 23
18363: EQUAL
18364: IFFALSE 18374
// sOilTower := true ;
18366: LD_ADDR_EXP 88
18370: PUSH
18371: LD_INT 1
18373: ST_TO_ADDR
// if p3 = 24 then
18374: LD_VAR 0 3
18378: PUSH
18379: LD_INT 24
18381: EQUAL
18382: IFFALSE 18392
// sShovel := true ;
18384: LD_ADDR_EXP 89
18388: PUSH
18389: LD_INT 1
18391: ST_TO_ADDR
// if p3 = 25 then
18392: LD_VAR 0 3
18396: PUSH
18397: LD_INT 25
18399: EQUAL
18400: IFFALSE 18410
// sSheik := true ;
18402: LD_ADDR_EXP 90
18406: PUSH
18407: LD_INT 1
18409: ST_TO_ADDR
// if p3 = 26 then
18410: LD_VAR 0 3
18414: PUSH
18415: LD_INT 26
18417: EQUAL
18418: IFFALSE 18428
// sEarthquake := true ;
18420: LD_ADDR_EXP 92
18424: PUSH
18425: LD_INT 1
18427: ST_TO_ADDR
// if p3 = 27 then
18428: LD_VAR 0 3
18432: PUSH
18433: LD_INT 27
18435: EQUAL
18436: IFFALSE 18446
// sAI := true ;
18438: LD_ADDR_EXP 93
18442: PUSH
18443: LD_INT 1
18445: ST_TO_ADDR
// if p3 = 28 then
18446: LD_VAR 0 3
18450: PUSH
18451: LD_INT 28
18453: EQUAL
18454: IFFALSE 18464
// sCargo := true ;
18456: LD_ADDR_EXP 96
18460: PUSH
18461: LD_INT 1
18463: ST_TO_ADDR
// if p3 = 29 then
18464: LD_VAR 0 3
18468: PUSH
18469: LD_INT 29
18471: EQUAL
18472: IFFALSE 18482
// sDLaser := true ;
18474: LD_ADDR_EXP 97
18478: PUSH
18479: LD_INT 1
18481: ST_TO_ADDR
// if p3 = 30 then
18482: LD_VAR 0 3
18486: PUSH
18487: LD_INT 30
18489: EQUAL
18490: IFFALSE 18500
// sExchange := true ;
18492: LD_ADDR_EXP 98
18496: PUSH
18497: LD_INT 1
18499: ST_TO_ADDR
// if p3 = 31 then
18500: LD_VAR 0 3
18504: PUSH
18505: LD_INT 31
18507: EQUAL
18508: IFFALSE 18518
// sFac := true ;
18510: LD_ADDR_EXP 99
18514: PUSH
18515: LD_INT 1
18517: ST_TO_ADDR
// if p3 = 32 then
18518: LD_VAR 0 3
18522: PUSH
18523: LD_INT 32
18525: EQUAL
18526: IFFALSE 18536
// sPower := true ;
18528: LD_ADDR_EXP 100
18532: PUSH
18533: LD_INT 1
18535: ST_TO_ADDR
// if p3 = 33 then
18536: LD_VAR 0 3
18540: PUSH
18541: LD_INT 33
18543: EQUAL
18544: IFFALSE 18554
// sRandom := true ;
18546: LD_ADDR_EXP 101
18550: PUSH
18551: LD_INT 1
18553: ST_TO_ADDR
// if p3 = 34 then
18554: LD_VAR 0 3
18558: PUSH
18559: LD_INT 34
18561: EQUAL
18562: IFFALSE 18572
// sShield := true ;
18564: LD_ADDR_EXP 102
18568: PUSH
18569: LD_INT 1
18571: ST_TO_ADDR
// if p3 = 35 then
18572: LD_VAR 0 3
18576: PUSH
18577: LD_INT 35
18579: EQUAL
18580: IFFALSE 18590
// sTime := true ;
18582: LD_ADDR_EXP 103
18586: PUSH
18587: LD_INT 1
18589: ST_TO_ADDR
// if p3 = 36 then
18590: LD_VAR 0 3
18594: PUSH
18595: LD_INT 36
18597: EQUAL
18598: IFFALSE 18608
// sTools := true ;
18600: LD_ADDR_EXP 104
18604: PUSH
18605: LD_INT 1
18607: ST_TO_ADDR
// if p3 = 101 then
18608: LD_VAR 0 3
18612: PUSH
18613: LD_INT 101
18615: EQUAL
18616: IFFALSE 18626
// sSold := true ;
18618: LD_ADDR_EXP 69
18622: PUSH
18623: LD_INT 1
18625: ST_TO_ADDR
// if p3 = 102 then
18626: LD_VAR 0 3
18630: PUSH
18631: LD_INT 102
18633: EQUAL
18634: IFFALSE 18644
// sDiff := true ;
18636: LD_ADDR_EXP 70
18640: PUSH
18641: LD_INT 1
18643: ST_TO_ADDR
// if p3 = 103 then
18644: LD_VAR 0 3
18648: PUSH
18649: LD_INT 103
18651: EQUAL
18652: IFFALSE 18662
// sFog := true ;
18654: LD_ADDR_EXP 73
18658: PUSH
18659: LD_INT 1
18661: ST_TO_ADDR
// if p3 = 104 then
18662: LD_VAR 0 3
18666: PUSH
18667: LD_INT 104
18669: EQUAL
18670: IFFALSE 18680
// sReset := true ;
18672: LD_ADDR_EXP 74
18676: PUSH
18677: LD_INT 1
18679: ST_TO_ADDR
// if p3 = 105 then
18680: LD_VAR 0 3
18684: PUSH
18685: LD_INT 105
18687: EQUAL
18688: IFFALSE 18698
// sSun := true ;
18690: LD_ADDR_EXP 75
18694: PUSH
18695: LD_INT 1
18697: ST_TO_ADDR
// if p3 = 106 then
18698: LD_VAR 0 3
18702: PUSH
18703: LD_INT 106
18705: EQUAL
18706: IFFALSE 18716
// sTiger := true ;
18708: LD_ADDR_EXP 71
18712: PUSH
18713: LD_INT 1
18715: ST_TO_ADDR
// if p3 = 107 then
18716: LD_VAR 0 3
18720: PUSH
18721: LD_INT 107
18723: EQUAL
18724: IFFALSE 18734
// sBomb := true ;
18726: LD_ADDR_EXP 72
18730: PUSH
18731: LD_INT 1
18733: ST_TO_ADDR
// if p3 = 108 then
18734: LD_VAR 0 3
18738: PUSH
18739: LD_INT 108
18741: EQUAL
18742: IFFALSE 18752
// sWound := true ;
18744: LD_ADDR_EXP 80
18748: PUSH
18749: LD_INT 1
18751: ST_TO_ADDR
// if p3 = 109 then
18752: LD_VAR 0 3
18756: PUSH
18757: LD_INT 109
18759: EQUAL
18760: IFFALSE 18770
// sBetray := true ;
18762: LD_ADDR_EXP 84
18766: PUSH
18767: LD_INT 1
18769: ST_TO_ADDR
// if p3 = 110 then
18770: LD_VAR 0 3
18774: PUSH
18775: LD_INT 110
18777: EQUAL
18778: IFFALSE 18788
// sContamin := true ;
18780: LD_ADDR_EXP 85
18784: PUSH
18785: LD_INT 1
18787: ST_TO_ADDR
// if p3 = 111 then
18788: LD_VAR 0 3
18792: PUSH
18793: LD_INT 111
18795: EQUAL
18796: IFFALSE 18806
// sOil := true ;
18798: LD_ADDR_EXP 87
18802: PUSH
18803: LD_INT 1
18805: ST_TO_ADDR
// if p3 = 112 then
18806: LD_VAR 0 3
18810: PUSH
18811: LD_INT 112
18813: EQUAL
18814: IFFALSE 18824
// sStu := true ;
18816: LD_ADDR_EXP 91
18820: PUSH
18821: LD_INT 1
18823: ST_TO_ADDR
// if p3 = 113 then
18824: LD_VAR 0 3
18828: PUSH
18829: LD_INT 113
18831: EQUAL
18832: IFFALSE 18842
// sBazooka := true ;
18834: LD_ADDR_EXP 94
18838: PUSH
18839: LD_INT 1
18841: ST_TO_ADDR
// if p3 = 114 then
18842: LD_VAR 0 3
18846: PUSH
18847: LD_INT 114
18849: EQUAL
18850: IFFALSE 18860
// sMortar := true ;
18852: LD_ADDR_EXP 95
18856: PUSH
18857: LD_INT 1
18859: ST_TO_ADDR
// if p3 = 115 then
18860: LD_VAR 0 3
18864: PUSH
18865: LD_INT 115
18867: EQUAL
18868: IFFALSE 18878
// sRanger := true ;
18870: LD_ADDR_EXP 105
18874: PUSH
18875: LD_INT 1
18877: ST_TO_ADDR
// end ; if p2 = 101 then
18878: LD_VAR 0 2
18882: PUSH
18883: LD_INT 101
18885: EQUAL
18886: IFFALSE 19089
// begin case p3 of 1 :
18888: LD_VAR 0 3
18892: PUSH
18893: LD_INT 1
18895: DOUBLE
18896: EQUAL
18897: IFTRUE 18901
18899: GO 18908
18901: POP
// hHackUnlimitedResources ; 2 :
18902: CALL 29183 0 0
18906: GO 19089
18908: LD_INT 2
18910: DOUBLE
18911: EQUAL
18912: IFTRUE 18916
18914: GO 18923
18916: POP
// hHackSetLevel10 ; 3 :
18917: CALL 29316 0 0
18921: GO 19089
18923: LD_INT 3
18925: DOUBLE
18926: EQUAL
18927: IFTRUE 18931
18929: GO 18938
18931: POP
// hHackSetLevel10YourUnits ; 4 :
18932: CALL 29401 0 0
18936: GO 19089
18938: LD_INT 4
18940: DOUBLE
18941: EQUAL
18942: IFTRUE 18946
18944: GO 18968
18946: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
18947: LD_VAR 0 4
18951: PPUSH
18952: LD_VAR 0 5
18956: PPUSH
18957: LD_VAR 0 6
18961: PPUSH
18962: CALL 29491 0 3
18966: GO 19089
18968: LD_INT 5
18970: DOUBLE
18971: EQUAL
18972: IFTRUE 18976
18974: GO 18983
18976: POP
// hHackSpawnVehicle ; 6 :
18977: CALL 29552 0 0
18981: GO 19089
18983: LD_INT 6
18985: DOUBLE
18986: EQUAL
18987: IFTRUE 18991
18989: GO 18998
18991: POP
// hHackInvincible ; 7 :
18992: CALL 30098 0 0
18996: GO 19089
18998: LD_INT 7
19000: DOUBLE
19001: EQUAL
19002: IFTRUE 19006
19004: GO 19013
19006: POP
// hHackInvisible ; 8 :
19007: CALL 30209 0 0
19011: GO 19089
19013: LD_INT 8
19015: DOUBLE
19016: EQUAL
19017: IFTRUE 19021
19019: GO 19028
19021: POP
// hHackChangeYourSide ; 9 :
19022: CALL 30266 0 0
19026: GO 19089
19028: LD_INT 9
19030: DOUBLE
19031: EQUAL
19032: IFTRUE 19036
19034: GO 19043
19036: POP
// hHackChangeUnitSide ; 10 :
19037: CALL 30308 0 0
19041: GO 19089
19043: LD_INT 10
19045: DOUBLE
19046: EQUAL
19047: IFTRUE 19051
19049: GO 19058
19051: POP
// hHackFog ; 11 :
19052: CALL 30409 0 0
19056: GO 19089
19058: LD_INT 11
19060: DOUBLE
19061: EQUAL
19062: IFTRUE 19066
19064: GO 19073
19066: POP
// hHackApeman ; 12 :
19067: CALL 30424 0 0
19071: GO 19089
19073: LD_INT 12
19075: DOUBLE
19076: EQUAL
19077: IFTRUE 19081
19079: GO 19088
19081: POP
// hHackBoom ; end ;
19082: CALL 30509 0 0
19086: GO 19089
19088: POP
// end ; end ;
19089: PPOPN 6
19091: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
19092: GO 19094
19094: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19095: LD_STRING initStreamRollete();
19097: PPUSH
19098: CALL_OW 559
// InitStreamMode ;
19102: CALL 19111 0 0
// DefineStreamItems ( ) ;
19106: CALL 19551 0 0
// end ;
19110: END
// function InitStreamMode ; begin
19111: LD_INT 0
19113: PPUSH
// streamModeActive := false ;
19114: LD_ADDR_EXP 52
19118: PUSH
19119: LD_INT 0
19121: ST_TO_ADDR
// normalCounter := 36 ;
19122: LD_ADDR_EXP 53
19126: PUSH
19127: LD_INT 36
19129: ST_TO_ADDR
// hardcoreCounter := 16 ;
19130: LD_ADDR_EXP 54
19134: PUSH
19135: LD_INT 16
19137: ST_TO_ADDR
// sRocket := false ;
19138: LD_ADDR_EXP 57
19142: PUSH
19143: LD_INT 0
19145: ST_TO_ADDR
// sSpeed := false ;
19146: LD_ADDR_EXP 56
19150: PUSH
19151: LD_INT 0
19153: ST_TO_ADDR
// sEngine := false ;
19154: LD_ADDR_EXP 58
19158: PUSH
19159: LD_INT 0
19161: ST_TO_ADDR
// sSpec := false ;
19162: LD_ADDR_EXP 55
19166: PUSH
19167: LD_INT 0
19169: ST_TO_ADDR
// sLevel := false ;
19170: LD_ADDR_EXP 59
19174: PUSH
19175: LD_INT 0
19177: ST_TO_ADDR
// sArmoury := false ;
19178: LD_ADDR_EXP 60
19182: PUSH
19183: LD_INT 0
19185: ST_TO_ADDR
// sRadar := false ;
19186: LD_ADDR_EXP 61
19190: PUSH
19191: LD_INT 0
19193: ST_TO_ADDR
// sBunker := false ;
19194: LD_ADDR_EXP 62
19198: PUSH
19199: LD_INT 0
19201: ST_TO_ADDR
// sHack := false ;
19202: LD_ADDR_EXP 63
19206: PUSH
19207: LD_INT 0
19209: ST_TO_ADDR
// sFire := false ;
19210: LD_ADDR_EXP 64
19214: PUSH
19215: LD_INT 0
19217: ST_TO_ADDR
// sRefresh := false ;
19218: LD_ADDR_EXP 65
19222: PUSH
19223: LD_INT 0
19225: ST_TO_ADDR
// sExp := false ;
19226: LD_ADDR_EXP 66
19230: PUSH
19231: LD_INT 0
19233: ST_TO_ADDR
// sDepot := false ;
19234: LD_ADDR_EXP 67
19238: PUSH
19239: LD_INT 0
19241: ST_TO_ADDR
// sFlag := false ;
19242: LD_ADDR_EXP 68
19246: PUSH
19247: LD_INT 0
19249: ST_TO_ADDR
// sKamikadze := false ;
19250: LD_ADDR_EXP 76
19254: PUSH
19255: LD_INT 0
19257: ST_TO_ADDR
// sTroll := false ;
19258: LD_ADDR_EXP 77
19262: PUSH
19263: LD_INT 0
19265: ST_TO_ADDR
// sSlow := false ;
19266: LD_ADDR_EXP 78
19270: PUSH
19271: LD_INT 0
19273: ST_TO_ADDR
// sLack := false ;
19274: LD_ADDR_EXP 79
19278: PUSH
19279: LD_INT 0
19281: ST_TO_ADDR
// sTank := false ;
19282: LD_ADDR_EXP 81
19286: PUSH
19287: LD_INT 0
19289: ST_TO_ADDR
// sRemote := false ;
19290: LD_ADDR_EXP 82
19294: PUSH
19295: LD_INT 0
19297: ST_TO_ADDR
// sPowell := false ;
19298: LD_ADDR_EXP 83
19302: PUSH
19303: LD_INT 0
19305: ST_TO_ADDR
// sTeleport := false ;
19306: LD_ADDR_EXP 86
19310: PUSH
19311: LD_INT 0
19313: ST_TO_ADDR
// sOilTower := false ;
19314: LD_ADDR_EXP 88
19318: PUSH
19319: LD_INT 0
19321: ST_TO_ADDR
// sShovel := false ;
19322: LD_ADDR_EXP 89
19326: PUSH
19327: LD_INT 0
19329: ST_TO_ADDR
// sSheik := false ;
19330: LD_ADDR_EXP 90
19334: PUSH
19335: LD_INT 0
19337: ST_TO_ADDR
// sEarthquake := false ;
19338: LD_ADDR_EXP 92
19342: PUSH
19343: LD_INT 0
19345: ST_TO_ADDR
// sAI := false ;
19346: LD_ADDR_EXP 93
19350: PUSH
19351: LD_INT 0
19353: ST_TO_ADDR
// sCargo := false ;
19354: LD_ADDR_EXP 96
19358: PUSH
19359: LD_INT 0
19361: ST_TO_ADDR
// sDLaser := false ;
19362: LD_ADDR_EXP 97
19366: PUSH
19367: LD_INT 0
19369: ST_TO_ADDR
// sExchange := false ;
19370: LD_ADDR_EXP 98
19374: PUSH
19375: LD_INT 0
19377: ST_TO_ADDR
// sFac := false ;
19378: LD_ADDR_EXP 99
19382: PUSH
19383: LD_INT 0
19385: ST_TO_ADDR
// sPower := false ;
19386: LD_ADDR_EXP 100
19390: PUSH
19391: LD_INT 0
19393: ST_TO_ADDR
// sRandom := false ;
19394: LD_ADDR_EXP 101
19398: PUSH
19399: LD_INT 0
19401: ST_TO_ADDR
// sShield := false ;
19402: LD_ADDR_EXP 102
19406: PUSH
19407: LD_INT 0
19409: ST_TO_ADDR
// sTime := false ;
19410: LD_ADDR_EXP 103
19414: PUSH
19415: LD_INT 0
19417: ST_TO_ADDR
// sTools := false ;
19418: LD_ADDR_EXP 104
19422: PUSH
19423: LD_INT 0
19425: ST_TO_ADDR
// sSold := false ;
19426: LD_ADDR_EXP 69
19430: PUSH
19431: LD_INT 0
19433: ST_TO_ADDR
// sDiff := false ;
19434: LD_ADDR_EXP 70
19438: PUSH
19439: LD_INT 0
19441: ST_TO_ADDR
// sFog := false ;
19442: LD_ADDR_EXP 73
19446: PUSH
19447: LD_INT 0
19449: ST_TO_ADDR
// sReset := false ;
19450: LD_ADDR_EXP 74
19454: PUSH
19455: LD_INT 0
19457: ST_TO_ADDR
// sSun := false ;
19458: LD_ADDR_EXP 75
19462: PUSH
19463: LD_INT 0
19465: ST_TO_ADDR
// sTiger := false ;
19466: LD_ADDR_EXP 71
19470: PUSH
19471: LD_INT 0
19473: ST_TO_ADDR
// sBomb := false ;
19474: LD_ADDR_EXP 72
19478: PUSH
19479: LD_INT 0
19481: ST_TO_ADDR
// sWound := false ;
19482: LD_ADDR_EXP 80
19486: PUSH
19487: LD_INT 0
19489: ST_TO_ADDR
// sBetray := false ;
19490: LD_ADDR_EXP 84
19494: PUSH
19495: LD_INT 0
19497: ST_TO_ADDR
// sContamin := false ;
19498: LD_ADDR_EXP 85
19502: PUSH
19503: LD_INT 0
19505: ST_TO_ADDR
// sOil := false ;
19506: LD_ADDR_EXP 87
19510: PUSH
19511: LD_INT 0
19513: ST_TO_ADDR
// sStu := false ;
19514: LD_ADDR_EXP 91
19518: PUSH
19519: LD_INT 0
19521: ST_TO_ADDR
// sBazooka := false ;
19522: LD_ADDR_EXP 94
19526: PUSH
19527: LD_INT 0
19529: ST_TO_ADDR
// sMortar := false ;
19530: LD_ADDR_EXP 95
19534: PUSH
19535: LD_INT 0
19537: ST_TO_ADDR
// sRanger := false ;
19538: LD_ADDR_EXP 105
19542: PUSH
19543: LD_INT 0
19545: ST_TO_ADDR
// end ;
19546: LD_VAR 0 1
19550: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
19551: LD_INT 0
19553: PPUSH
19554: PPUSH
19555: PPUSH
19556: PPUSH
19557: PPUSH
// result := [ ] ;
19558: LD_ADDR_VAR 0 1
19562: PUSH
19563: EMPTY
19564: ST_TO_ADDR
// if campaign_id = 1 then
19565: LD_OWVAR 69
19569: PUSH
19570: LD_INT 1
19572: EQUAL
19573: IFFALSE 22511
// begin case mission_number of 1 :
19575: LD_OWVAR 70
19579: PUSH
19580: LD_INT 1
19582: DOUBLE
19583: EQUAL
19584: IFTRUE 19588
19586: GO 19652
19588: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
19589: LD_ADDR_VAR 0 1
19593: PUSH
19594: LD_INT 2
19596: PUSH
19597: LD_INT 4
19599: PUSH
19600: LD_INT 11
19602: PUSH
19603: LD_INT 12
19605: PUSH
19606: LD_INT 15
19608: PUSH
19609: LD_INT 16
19611: PUSH
19612: LD_INT 22
19614: PUSH
19615: LD_INT 23
19617: PUSH
19618: LD_INT 26
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: PUSH
19632: LD_INT 101
19634: PUSH
19635: LD_INT 102
19637: PUSH
19638: LD_INT 106
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: LIST
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: ST_TO_ADDR
19650: GO 22509
19652: LD_INT 2
19654: DOUBLE
19655: EQUAL
19656: IFTRUE 19660
19658: GO 19732
19660: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
19661: LD_ADDR_VAR 0 1
19665: PUSH
19666: LD_INT 2
19668: PUSH
19669: LD_INT 4
19671: PUSH
19672: LD_INT 11
19674: PUSH
19675: LD_INT 12
19677: PUSH
19678: LD_INT 15
19680: PUSH
19681: LD_INT 16
19683: PUSH
19684: LD_INT 22
19686: PUSH
19687: LD_INT 23
19689: PUSH
19690: LD_INT 26
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 101
19706: PUSH
19707: LD_INT 102
19709: PUSH
19710: LD_INT 105
19712: PUSH
19713: LD_INT 106
19715: PUSH
19716: LD_INT 108
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: ST_TO_ADDR
19730: GO 22509
19732: LD_INT 3
19734: DOUBLE
19735: EQUAL
19736: IFTRUE 19740
19738: GO 19816
19740: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
19741: LD_ADDR_VAR 0 1
19745: PUSH
19746: LD_INT 2
19748: PUSH
19749: LD_INT 4
19751: PUSH
19752: LD_INT 5
19754: PUSH
19755: LD_INT 11
19757: PUSH
19758: LD_INT 12
19760: PUSH
19761: LD_INT 15
19763: PUSH
19764: LD_INT 16
19766: PUSH
19767: LD_INT 22
19769: PUSH
19770: LD_INT 26
19772: PUSH
19773: LD_INT 36
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: PUSH
19788: LD_INT 101
19790: PUSH
19791: LD_INT 102
19793: PUSH
19794: LD_INT 105
19796: PUSH
19797: LD_INT 106
19799: PUSH
19800: LD_INT 108
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: ST_TO_ADDR
19814: GO 22509
19816: LD_INT 4
19818: DOUBLE
19819: EQUAL
19820: IFTRUE 19824
19822: GO 19908
19824: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
19825: LD_ADDR_VAR 0 1
19829: PUSH
19830: LD_INT 2
19832: PUSH
19833: LD_INT 4
19835: PUSH
19836: LD_INT 5
19838: PUSH
19839: LD_INT 8
19841: PUSH
19842: LD_INT 11
19844: PUSH
19845: LD_INT 12
19847: PUSH
19848: LD_INT 15
19850: PUSH
19851: LD_INT 16
19853: PUSH
19854: LD_INT 22
19856: PUSH
19857: LD_INT 23
19859: PUSH
19860: LD_INT 26
19862: PUSH
19863: LD_INT 36
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: PUSH
19880: LD_INT 101
19882: PUSH
19883: LD_INT 102
19885: PUSH
19886: LD_INT 105
19888: PUSH
19889: LD_INT 106
19891: PUSH
19892: LD_INT 108
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: ST_TO_ADDR
19906: GO 22509
19908: LD_INT 5
19910: DOUBLE
19911: EQUAL
19912: IFTRUE 19916
19914: GO 20016
19916: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
19917: LD_ADDR_VAR 0 1
19921: PUSH
19922: LD_INT 2
19924: PUSH
19925: LD_INT 4
19927: PUSH
19928: LD_INT 5
19930: PUSH
19931: LD_INT 6
19933: PUSH
19934: LD_INT 8
19936: PUSH
19937: LD_INT 11
19939: PUSH
19940: LD_INT 12
19942: PUSH
19943: LD_INT 15
19945: PUSH
19946: LD_INT 16
19948: PUSH
19949: LD_INT 22
19951: PUSH
19952: LD_INT 23
19954: PUSH
19955: LD_INT 25
19957: PUSH
19958: LD_INT 26
19960: PUSH
19961: LD_INT 36
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: PUSH
19980: LD_INT 101
19982: PUSH
19983: LD_INT 102
19985: PUSH
19986: LD_INT 105
19988: PUSH
19989: LD_INT 106
19991: PUSH
19992: LD_INT 108
19994: PUSH
19995: LD_INT 109
19997: PUSH
19998: LD_INT 112
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: ST_TO_ADDR
20014: GO 22509
20016: LD_INT 6
20018: DOUBLE
20019: EQUAL
20020: IFTRUE 20024
20022: GO 20144
20024: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
20025: LD_ADDR_VAR 0 1
20029: PUSH
20030: LD_INT 2
20032: PUSH
20033: LD_INT 4
20035: PUSH
20036: LD_INT 5
20038: PUSH
20039: LD_INT 6
20041: PUSH
20042: LD_INT 8
20044: PUSH
20045: LD_INT 11
20047: PUSH
20048: LD_INT 12
20050: PUSH
20051: LD_INT 15
20053: PUSH
20054: LD_INT 16
20056: PUSH
20057: LD_INT 20
20059: PUSH
20060: LD_INT 21
20062: PUSH
20063: LD_INT 22
20065: PUSH
20066: LD_INT 23
20068: PUSH
20069: LD_INT 25
20071: PUSH
20072: LD_INT 26
20074: PUSH
20075: LD_INT 30
20077: PUSH
20078: LD_INT 31
20080: PUSH
20081: LD_INT 32
20083: PUSH
20084: LD_INT 36
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: PUSH
20108: LD_INT 101
20110: PUSH
20111: LD_INT 102
20113: PUSH
20114: LD_INT 105
20116: PUSH
20117: LD_INT 106
20119: PUSH
20120: LD_INT 108
20122: PUSH
20123: LD_INT 109
20125: PUSH
20126: LD_INT 112
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: ST_TO_ADDR
20142: GO 22509
20144: LD_INT 7
20146: DOUBLE
20147: EQUAL
20148: IFTRUE 20152
20150: GO 20252
20152: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
20153: LD_ADDR_VAR 0 1
20157: PUSH
20158: LD_INT 2
20160: PUSH
20161: LD_INT 4
20163: PUSH
20164: LD_INT 5
20166: PUSH
20167: LD_INT 7
20169: PUSH
20170: LD_INT 11
20172: PUSH
20173: LD_INT 12
20175: PUSH
20176: LD_INT 15
20178: PUSH
20179: LD_INT 16
20181: PUSH
20182: LD_INT 20
20184: PUSH
20185: LD_INT 21
20187: PUSH
20188: LD_INT 22
20190: PUSH
20191: LD_INT 23
20193: PUSH
20194: LD_INT 25
20196: PUSH
20197: LD_INT 26
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: PUSH
20216: LD_INT 101
20218: PUSH
20219: LD_INT 102
20221: PUSH
20222: LD_INT 103
20224: PUSH
20225: LD_INT 105
20227: PUSH
20228: LD_INT 106
20230: PUSH
20231: LD_INT 108
20233: PUSH
20234: LD_INT 112
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: ST_TO_ADDR
20250: GO 22509
20252: LD_INT 8
20254: DOUBLE
20255: EQUAL
20256: IFTRUE 20260
20258: GO 20388
20260: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
20261: LD_ADDR_VAR 0 1
20265: PUSH
20266: LD_INT 2
20268: PUSH
20269: LD_INT 4
20271: PUSH
20272: LD_INT 5
20274: PUSH
20275: LD_INT 6
20277: PUSH
20278: LD_INT 7
20280: PUSH
20281: LD_INT 8
20283: PUSH
20284: LD_INT 11
20286: PUSH
20287: LD_INT 12
20289: PUSH
20290: LD_INT 15
20292: PUSH
20293: LD_INT 16
20295: PUSH
20296: LD_INT 20
20298: PUSH
20299: LD_INT 21
20301: PUSH
20302: LD_INT 22
20304: PUSH
20305: LD_INT 23
20307: PUSH
20308: LD_INT 25
20310: PUSH
20311: LD_INT 26
20313: PUSH
20314: LD_INT 30
20316: PUSH
20317: LD_INT 31
20319: PUSH
20320: LD_INT 32
20322: PUSH
20323: LD_INT 36
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 101
20350: PUSH
20351: LD_INT 102
20353: PUSH
20354: LD_INT 103
20356: PUSH
20357: LD_INT 105
20359: PUSH
20360: LD_INT 106
20362: PUSH
20363: LD_INT 108
20365: PUSH
20366: LD_INT 109
20368: PUSH
20369: LD_INT 112
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: ST_TO_ADDR
20386: GO 22509
20388: LD_INT 9
20390: DOUBLE
20391: EQUAL
20392: IFTRUE 20396
20394: GO 20532
20396: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
20397: LD_ADDR_VAR 0 1
20401: PUSH
20402: LD_INT 2
20404: PUSH
20405: LD_INT 4
20407: PUSH
20408: LD_INT 5
20410: PUSH
20411: LD_INT 6
20413: PUSH
20414: LD_INT 7
20416: PUSH
20417: LD_INT 8
20419: PUSH
20420: LD_INT 11
20422: PUSH
20423: LD_INT 12
20425: PUSH
20426: LD_INT 15
20428: PUSH
20429: LD_INT 16
20431: PUSH
20432: LD_INT 20
20434: PUSH
20435: LD_INT 21
20437: PUSH
20438: LD_INT 22
20440: PUSH
20441: LD_INT 23
20443: PUSH
20444: LD_INT 25
20446: PUSH
20447: LD_INT 26
20449: PUSH
20450: LD_INT 28
20452: PUSH
20453: LD_INT 30
20455: PUSH
20456: LD_INT 31
20458: PUSH
20459: LD_INT 32
20461: PUSH
20462: LD_INT 36
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 101
20490: PUSH
20491: LD_INT 102
20493: PUSH
20494: LD_INT 103
20496: PUSH
20497: LD_INT 105
20499: PUSH
20500: LD_INT 106
20502: PUSH
20503: LD_INT 108
20505: PUSH
20506: LD_INT 109
20508: PUSH
20509: LD_INT 112
20511: PUSH
20512: LD_INT 114
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: ST_TO_ADDR
20530: GO 22509
20532: LD_INT 10
20534: DOUBLE
20535: EQUAL
20536: IFTRUE 20540
20538: GO 20724
20540: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
20541: LD_ADDR_VAR 0 1
20545: PUSH
20546: LD_INT 2
20548: PUSH
20549: LD_INT 4
20551: PUSH
20552: LD_INT 5
20554: PUSH
20555: LD_INT 6
20557: PUSH
20558: LD_INT 7
20560: PUSH
20561: LD_INT 8
20563: PUSH
20564: LD_INT 9
20566: PUSH
20567: LD_INT 10
20569: PUSH
20570: LD_INT 11
20572: PUSH
20573: LD_INT 12
20575: PUSH
20576: LD_INT 13
20578: PUSH
20579: LD_INT 14
20581: PUSH
20582: LD_INT 15
20584: PUSH
20585: LD_INT 16
20587: PUSH
20588: LD_INT 17
20590: PUSH
20591: LD_INT 18
20593: PUSH
20594: LD_INT 19
20596: PUSH
20597: LD_INT 20
20599: PUSH
20600: LD_INT 21
20602: PUSH
20603: LD_INT 22
20605: PUSH
20606: LD_INT 23
20608: PUSH
20609: LD_INT 24
20611: PUSH
20612: LD_INT 25
20614: PUSH
20615: LD_INT 26
20617: PUSH
20618: LD_INT 28
20620: PUSH
20621: LD_INT 30
20623: PUSH
20624: LD_INT 31
20626: PUSH
20627: LD_INT 32
20629: PUSH
20630: LD_INT 36
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: PUSH
20664: LD_INT 101
20666: PUSH
20667: LD_INT 102
20669: PUSH
20670: LD_INT 103
20672: PUSH
20673: LD_INT 104
20675: PUSH
20676: LD_INT 105
20678: PUSH
20679: LD_INT 106
20681: PUSH
20682: LD_INT 107
20684: PUSH
20685: LD_INT 108
20687: PUSH
20688: LD_INT 109
20690: PUSH
20691: LD_INT 110
20693: PUSH
20694: LD_INT 111
20696: PUSH
20697: LD_INT 112
20699: PUSH
20700: LD_INT 114
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: ST_TO_ADDR
20722: GO 22509
20724: LD_INT 11
20726: DOUBLE
20727: EQUAL
20728: IFTRUE 20732
20730: GO 20924
20732: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
20733: LD_ADDR_VAR 0 1
20737: PUSH
20738: LD_INT 2
20740: PUSH
20741: LD_INT 3
20743: PUSH
20744: LD_INT 4
20746: PUSH
20747: LD_INT 5
20749: PUSH
20750: LD_INT 6
20752: PUSH
20753: LD_INT 7
20755: PUSH
20756: LD_INT 8
20758: PUSH
20759: LD_INT 9
20761: PUSH
20762: LD_INT 10
20764: PUSH
20765: LD_INT 11
20767: PUSH
20768: LD_INT 12
20770: PUSH
20771: LD_INT 13
20773: PUSH
20774: LD_INT 14
20776: PUSH
20777: LD_INT 15
20779: PUSH
20780: LD_INT 16
20782: PUSH
20783: LD_INT 17
20785: PUSH
20786: LD_INT 18
20788: PUSH
20789: LD_INT 19
20791: PUSH
20792: LD_INT 20
20794: PUSH
20795: LD_INT 21
20797: PUSH
20798: LD_INT 22
20800: PUSH
20801: LD_INT 23
20803: PUSH
20804: LD_INT 24
20806: PUSH
20807: LD_INT 25
20809: PUSH
20810: LD_INT 26
20812: PUSH
20813: LD_INT 28
20815: PUSH
20816: LD_INT 30
20818: PUSH
20819: LD_INT 31
20821: PUSH
20822: LD_INT 32
20824: PUSH
20825: LD_INT 34
20827: PUSH
20828: LD_INT 36
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: PUSH
20864: LD_INT 101
20866: PUSH
20867: LD_INT 102
20869: PUSH
20870: LD_INT 103
20872: PUSH
20873: LD_INT 104
20875: PUSH
20876: LD_INT 105
20878: PUSH
20879: LD_INT 106
20881: PUSH
20882: LD_INT 107
20884: PUSH
20885: LD_INT 108
20887: PUSH
20888: LD_INT 109
20890: PUSH
20891: LD_INT 110
20893: PUSH
20894: LD_INT 111
20896: PUSH
20897: LD_INT 112
20899: PUSH
20900: LD_INT 114
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: ST_TO_ADDR
20922: GO 22509
20924: LD_INT 12
20926: DOUBLE
20927: EQUAL
20928: IFTRUE 20932
20930: GO 21140
20932: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
20933: LD_ADDR_VAR 0 1
20937: PUSH
20938: LD_INT 1
20940: PUSH
20941: LD_INT 2
20943: PUSH
20944: LD_INT 3
20946: PUSH
20947: LD_INT 4
20949: PUSH
20950: LD_INT 5
20952: PUSH
20953: LD_INT 6
20955: PUSH
20956: LD_INT 7
20958: PUSH
20959: LD_INT 8
20961: PUSH
20962: LD_INT 9
20964: PUSH
20965: LD_INT 10
20967: PUSH
20968: LD_INT 11
20970: PUSH
20971: LD_INT 12
20973: PUSH
20974: LD_INT 13
20976: PUSH
20977: LD_INT 14
20979: PUSH
20980: LD_INT 15
20982: PUSH
20983: LD_INT 16
20985: PUSH
20986: LD_INT 17
20988: PUSH
20989: LD_INT 18
20991: PUSH
20992: LD_INT 19
20994: PUSH
20995: LD_INT 20
20997: PUSH
20998: LD_INT 21
21000: PUSH
21001: LD_INT 22
21003: PUSH
21004: LD_INT 23
21006: PUSH
21007: LD_INT 24
21009: PUSH
21010: LD_INT 25
21012: PUSH
21013: LD_INT 26
21015: PUSH
21016: LD_INT 27
21018: PUSH
21019: LD_INT 28
21021: PUSH
21022: LD_INT 30
21024: PUSH
21025: LD_INT 31
21027: PUSH
21028: LD_INT 32
21030: PUSH
21031: LD_INT 33
21033: PUSH
21034: LD_INT 34
21036: PUSH
21037: LD_INT 36
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: PUSH
21076: LD_INT 101
21078: PUSH
21079: LD_INT 102
21081: PUSH
21082: LD_INT 103
21084: PUSH
21085: LD_INT 104
21087: PUSH
21088: LD_INT 105
21090: PUSH
21091: LD_INT 106
21093: PUSH
21094: LD_INT 107
21096: PUSH
21097: LD_INT 108
21099: PUSH
21100: LD_INT 109
21102: PUSH
21103: LD_INT 110
21105: PUSH
21106: LD_INT 111
21108: PUSH
21109: LD_INT 112
21111: PUSH
21112: LD_INT 113
21114: PUSH
21115: LD_INT 114
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: ST_TO_ADDR
21138: GO 22509
21140: LD_INT 13
21142: DOUBLE
21143: EQUAL
21144: IFTRUE 21148
21146: GO 21344
21148: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
21149: LD_ADDR_VAR 0 1
21153: PUSH
21154: LD_INT 1
21156: PUSH
21157: LD_INT 2
21159: PUSH
21160: LD_INT 3
21162: PUSH
21163: LD_INT 4
21165: PUSH
21166: LD_INT 5
21168: PUSH
21169: LD_INT 8
21171: PUSH
21172: LD_INT 9
21174: PUSH
21175: LD_INT 10
21177: PUSH
21178: LD_INT 11
21180: PUSH
21181: LD_INT 12
21183: PUSH
21184: LD_INT 14
21186: PUSH
21187: LD_INT 15
21189: PUSH
21190: LD_INT 16
21192: PUSH
21193: LD_INT 17
21195: PUSH
21196: LD_INT 18
21198: PUSH
21199: LD_INT 19
21201: PUSH
21202: LD_INT 20
21204: PUSH
21205: LD_INT 21
21207: PUSH
21208: LD_INT 22
21210: PUSH
21211: LD_INT 23
21213: PUSH
21214: LD_INT 24
21216: PUSH
21217: LD_INT 25
21219: PUSH
21220: LD_INT 26
21222: PUSH
21223: LD_INT 27
21225: PUSH
21226: LD_INT 28
21228: PUSH
21229: LD_INT 30
21231: PUSH
21232: LD_INT 31
21234: PUSH
21235: LD_INT 32
21237: PUSH
21238: LD_INT 33
21240: PUSH
21241: LD_INT 34
21243: PUSH
21244: LD_INT 36
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 101
21282: PUSH
21283: LD_INT 102
21285: PUSH
21286: LD_INT 103
21288: PUSH
21289: LD_INT 104
21291: PUSH
21292: LD_INT 105
21294: PUSH
21295: LD_INT 106
21297: PUSH
21298: LD_INT 107
21300: PUSH
21301: LD_INT 108
21303: PUSH
21304: LD_INT 109
21306: PUSH
21307: LD_INT 110
21309: PUSH
21310: LD_INT 111
21312: PUSH
21313: LD_INT 112
21315: PUSH
21316: LD_INT 113
21318: PUSH
21319: LD_INT 114
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: ST_TO_ADDR
21342: GO 22509
21344: LD_INT 14
21346: DOUBLE
21347: EQUAL
21348: IFTRUE 21352
21350: GO 21564
21352: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
21353: LD_ADDR_VAR 0 1
21357: PUSH
21358: LD_INT 1
21360: PUSH
21361: LD_INT 2
21363: PUSH
21364: LD_INT 3
21366: PUSH
21367: LD_INT 4
21369: PUSH
21370: LD_INT 5
21372: PUSH
21373: LD_INT 6
21375: PUSH
21376: LD_INT 7
21378: PUSH
21379: LD_INT 8
21381: PUSH
21382: LD_INT 9
21384: PUSH
21385: LD_INT 10
21387: PUSH
21388: LD_INT 11
21390: PUSH
21391: LD_INT 12
21393: PUSH
21394: LD_INT 13
21396: PUSH
21397: LD_INT 14
21399: PUSH
21400: LD_INT 15
21402: PUSH
21403: LD_INT 16
21405: PUSH
21406: LD_INT 17
21408: PUSH
21409: LD_INT 18
21411: PUSH
21412: LD_INT 19
21414: PUSH
21415: LD_INT 20
21417: PUSH
21418: LD_INT 21
21420: PUSH
21421: LD_INT 22
21423: PUSH
21424: LD_INT 23
21426: PUSH
21427: LD_INT 24
21429: PUSH
21430: LD_INT 25
21432: PUSH
21433: LD_INT 26
21435: PUSH
21436: LD_INT 27
21438: PUSH
21439: LD_INT 28
21441: PUSH
21442: LD_INT 29
21444: PUSH
21445: LD_INT 30
21447: PUSH
21448: LD_INT 31
21450: PUSH
21451: LD_INT 32
21453: PUSH
21454: LD_INT 33
21456: PUSH
21457: LD_INT 34
21459: PUSH
21460: LD_INT 36
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 101
21502: PUSH
21503: LD_INT 102
21505: PUSH
21506: LD_INT 103
21508: PUSH
21509: LD_INT 104
21511: PUSH
21512: LD_INT 105
21514: PUSH
21515: LD_INT 106
21517: PUSH
21518: LD_INT 107
21520: PUSH
21521: LD_INT 108
21523: PUSH
21524: LD_INT 109
21526: PUSH
21527: LD_INT 110
21529: PUSH
21530: LD_INT 111
21532: PUSH
21533: LD_INT 112
21535: PUSH
21536: LD_INT 113
21538: PUSH
21539: LD_INT 114
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: ST_TO_ADDR
21562: GO 22509
21564: LD_INT 15
21566: DOUBLE
21567: EQUAL
21568: IFTRUE 21572
21570: GO 21784
21572: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
21573: LD_ADDR_VAR 0 1
21577: PUSH
21578: LD_INT 1
21580: PUSH
21581: LD_INT 2
21583: PUSH
21584: LD_INT 3
21586: PUSH
21587: LD_INT 4
21589: PUSH
21590: LD_INT 5
21592: PUSH
21593: LD_INT 6
21595: PUSH
21596: LD_INT 7
21598: PUSH
21599: LD_INT 8
21601: PUSH
21602: LD_INT 9
21604: PUSH
21605: LD_INT 10
21607: PUSH
21608: LD_INT 11
21610: PUSH
21611: LD_INT 12
21613: PUSH
21614: LD_INT 13
21616: PUSH
21617: LD_INT 14
21619: PUSH
21620: LD_INT 15
21622: PUSH
21623: LD_INT 16
21625: PUSH
21626: LD_INT 17
21628: PUSH
21629: LD_INT 18
21631: PUSH
21632: LD_INT 19
21634: PUSH
21635: LD_INT 20
21637: PUSH
21638: LD_INT 21
21640: PUSH
21641: LD_INT 22
21643: PUSH
21644: LD_INT 23
21646: PUSH
21647: LD_INT 24
21649: PUSH
21650: LD_INT 25
21652: PUSH
21653: LD_INT 26
21655: PUSH
21656: LD_INT 27
21658: PUSH
21659: LD_INT 28
21661: PUSH
21662: LD_INT 29
21664: PUSH
21665: LD_INT 30
21667: PUSH
21668: LD_INT 31
21670: PUSH
21671: LD_INT 32
21673: PUSH
21674: LD_INT 33
21676: PUSH
21677: LD_INT 34
21679: PUSH
21680: LD_INT 36
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: PUSH
21720: LD_INT 101
21722: PUSH
21723: LD_INT 102
21725: PUSH
21726: LD_INT 103
21728: PUSH
21729: LD_INT 104
21731: PUSH
21732: LD_INT 105
21734: PUSH
21735: LD_INT 106
21737: PUSH
21738: LD_INT 107
21740: PUSH
21741: LD_INT 108
21743: PUSH
21744: LD_INT 109
21746: PUSH
21747: LD_INT 110
21749: PUSH
21750: LD_INT 111
21752: PUSH
21753: LD_INT 112
21755: PUSH
21756: LD_INT 113
21758: PUSH
21759: LD_INT 114
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: ST_TO_ADDR
21782: GO 22509
21784: LD_INT 16
21786: DOUBLE
21787: EQUAL
21788: IFTRUE 21792
21790: GO 21916
21792: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
21793: LD_ADDR_VAR 0 1
21797: PUSH
21798: LD_INT 2
21800: PUSH
21801: LD_INT 4
21803: PUSH
21804: LD_INT 5
21806: PUSH
21807: LD_INT 7
21809: PUSH
21810: LD_INT 11
21812: PUSH
21813: LD_INT 12
21815: PUSH
21816: LD_INT 15
21818: PUSH
21819: LD_INT 16
21821: PUSH
21822: LD_INT 20
21824: PUSH
21825: LD_INT 21
21827: PUSH
21828: LD_INT 22
21830: PUSH
21831: LD_INT 23
21833: PUSH
21834: LD_INT 25
21836: PUSH
21837: LD_INT 26
21839: PUSH
21840: LD_INT 30
21842: PUSH
21843: LD_INT 31
21845: PUSH
21846: LD_INT 32
21848: PUSH
21849: LD_INT 33
21851: PUSH
21852: LD_INT 34
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: PUSH
21876: LD_INT 101
21878: PUSH
21879: LD_INT 102
21881: PUSH
21882: LD_INT 103
21884: PUSH
21885: LD_INT 106
21887: PUSH
21888: LD_INT 108
21890: PUSH
21891: LD_INT 112
21893: PUSH
21894: LD_INT 113
21896: PUSH
21897: LD_INT 114
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: ST_TO_ADDR
21914: GO 22509
21916: LD_INT 17
21918: DOUBLE
21919: EQUAL
21920: IFTRUE 21924
21922: GO 22136
21924: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
21925: LD_ADDR_VAR 0 1
21929: PUSH
21930: LD_INT 1
21932: PUSH
21933: LD_INT 2
21935: PUSH
21936: LD_INT 3
21938: PUSH
21939: LD_INT 4
21941: PUSH
21942: LD_INT 5
21944: PUSH
21945: LD_INT 6
21947: PUSH
21948: LD_INT 7
21950: PUSH
21951: LD_INT 8
21953: PUSH
21954: LD_INT 9
21956: PUSH
21957: LD_INT 10
21959: PUSH
21960: LD_INT 11
21962: PUSH
21963: LD_INT 12
21965: PUSH
21966: LD_INT 13
21968: PUSH
21969: LD_INT 14
21971: PUSH
21972: LD_INT 15
21974: PUSH
21975: LD_INT 16
21977: PUSH
21978: LD_INT 17
21980: PUSH
21981: LD_INT 18
21983: PUSH
21984: LD_INT 19
21986: PUSH
21987: LD_INT 20
21989: PUSH
21990: LD_INT 21
21992: PUSH
21993: LD_INT 22
21995: PUSH
21996: LD_INT 23
21998: PUSH
21999: LD_INT 24
22001: PUSH
22002: LD_INT 25
22004: PUSH
22005: LD_INT 26
22007: PUSH
22008: LD_INT 27
22010: PUSH
22011: LD_INT 28
22013: PUSH
22014: LD_INT 29
22016: PUSH
22017: LD_INT 30
22019: PUSH
22020: LD_INT 31
22022: PUSH
22023: LD_INT 32
22025: PUSH
22026: LD_INT 33
22028: PUSH
22029: LD_INT 34
22031: PUSH
22032: LD_INT 36
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: PUSH
22072: LD_INT 101
22074: PUSH
22075: LD_INT 102
22077: PUSH
22078: LD_INT 103
22080: PUSH
22081: LD_INT 104
22083: PUSH
22084: LD_INT 105
22086: PUSH
22087: LD_INT 106
22089: PUSH
22090: LD_INT 107
22092: PUSH
22093: LD_INT 108
22095: PUSH
22096: LD_INT 109
22098: PUSH
22099: LD_INT 110
22101: PUSH
22102: LD_INT 111
22104: PUSH
22105: LD_INT 112
22107: PUSH
22108: LD_INT 113
22110: PUSH
22111: LD_INT 114
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: ST_TO_ADDR
22134: GO 22509
22136: LD_INT 18
22138: DOUBLE
22139: EQUAL
22140: IFTRUE 22144
22142: GO 22280
22144: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
22145: LD_ADDR_VAR 0 1
22149: PUSH
22150: LD_INT 2
22152: PUSH
22153: LD_INT 4
22155: PUSH
22156: LD_INT 5
22158: PUSH
22159: LD_INT 7
22161: PUSH
22162: LD_INT 11
22164: PUSH
22165: LD_INT 12
22167: PUSH
22168: LD_INT 15
22170: PUSH
22171: LD_INT 16
22173: PUSH
22174: LD_INT 20
22176: PUSH
22177: LD_INT 21
22179: PUSH
22180: LD_INT 22
22182: PUSH
22183: LD_INT 23
22185: PUSH
22186: LD_INT 25
22188: PUSH
22189: LD_INT 26
22191: PUSH
22192: LD_INT 30
22194: PUSH
22195: LD_INT 31
22197: PUSH
22198: LD_INT 32
22200: PUSH
22201: LD_INT 33
22203: PUSH
22204: LD_INT 34
22206: PUSH
22207: LD_INT 35
22209: PUSH
22210: LD_INT 36
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: PUSH
22236: LD_INT 101
22238: PUSH
22239: LD_INT 102
22241: PUSH
22242: LD_INT 103
22244: PUSH
22245: LD_INT 106
22247: PUSH
22248: LD_INT 108
22250: PUSH
22251: LD_INT 112
22253: PUSH
22254: LD_INT 113
22256: PUSH
22257: LD_INT 114
22259: PUSH
22260: LD_INT 115
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: ST_TO_ADDR
22278: GO 22509
22280: LD_INT 19
22282: DOUBLE
22283: EQUAL
22284: IFTRUE 22288
22286: GO 22508
22288: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
22289: LD_ADDR_VAR 0 1
22293: PUSH
22294: LD_INT 1
22296: PUSH
22297: LD_INT 2
22299: PUSH
22300: LD_INT 3
22302: PUSH
22303: LD_INT 4
22305: PUSH
22306: LD_INT 5
22308: PUSH
22309: LD_INT 6
22311: PUSH
22312: LD_INT 7
22314: PUSH
22315: LD_INT 8
22317: PUSH
22318: LD_INT 9
22320: PUSH
22321: LD_INT 10
22323: PUSH
22324: LD_INT 11
22326: PUSH
22327: LD_INT 12
22329: PUSH
22330: LD_INT 13
22332: PUSH
22333: LD_INT 14
22335: PUSH
22336: LD_INT 15
22338: PUSH
22339: LD_INT 16
22341: PUSH
22342: LD_INT 17
22344: PUSH
22345: LD_INT 18
22347: PUSH
22348: LD_INT 19
22350: PUSH
22351: LD_INT 20
22353: PUSH
22354: LD_INT 21
22356: PUSH
22357: LD_INT 22
22359: PUSH
22360: LD_INT 23
22362: PUSH
22363: LD_INT 24
22365: PUSH
22366: LD_INT 25
22368: PUSH
22369: LD_INT 26
22371: PUSH
22372: LD_INT 27
22374: PUSH
22375: LD_INT 28
22377: PUSH
22378: LD_INT 29
22380: PUSH
22381: LD_INT 30
22383: PUSH
22384: LD_INT 31
22386: PUSH
22387: LD_INT 32
22389: PUSH
22390: LD_INT 33
22392: PUSH
22393: LD_INT 34
22395: PUSH
22396: LD_INT 35
22398: PUSH
22399: LD_INT 36
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 101
22442: PUSH
22443: LD_INT 102
22445: PUSH
22446: LD_INT 103
22448: PUSH
22449: LD_INT 104
22451: PUSH
22452: LD_INT 105
22454: PUSH
22455: LD_INT 106
22457: PUSH
22458: LD_INT 107
22460: PUSH
22461: LD_INT 108
22463: PUSH
22464: LD_INT 109
22466: PUSH
22467: LD_INT 110
22469: PUSH
22470: LD_INT 111
22472: PUSH
22473: LD_INT 112
22475: PUSH
22476: LD_INT 113
22478: PUSH
22479: LD_INT 114
22481: PUSH
22482: LD_INT 115
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: ST_TO_ADDR
22506: GO 22509
22508: POP
// end else
22509: GO 22728
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
22511: LD_ADDR_VAR 0 1
22515: PUSH
22516: LD_INT 1
22518: PUSH
22519: LD_INT 2
22521: PUSH
22522: LD_INT 3
22524: PUSH
22525: LD_INT 4
22527: PUSH
22528: LD_INT 5
22530: PUSH
22531: LD_INT 6
22533: PUSH
22534: LD_INT 7
22536: PUSH
22537: LD_INT 8
22539: PUSH
22540: LD_INT 9
22542: PUSH
22543: LD_INT 10
22545: PUSH
22546: LD_INT 11
22548: PUSH
22549: LD_INT 12
22551: PUSH
22552: LD_INT 13
22554: PUSH
22555: LD_INT 14
22557: PUSH
22558: LD_INT 15
22560: PUSH
22561: LD_INT 16
22563: PUSH
22564: LD_INT 17
22566: PUSH
22567: LD_INT 18
22569: PUSH
22570: LD_INT 19
22572: PUSH
22573: LD_INT 20
22575: PUSH
22576: LD_INT 21
22578: PUSH
22579: LD_INT 22
22581: PUSH
22582: LD_INT 23
22584: PUSH
22585: LD_INT 24
22587: PUSH
22588: LD_INT 25
22590: PUSH
22591: LD_INT 26
22593: PUSH
22594: LD_INT 27
22596: PUSH
22597: LD_INT 28
22599: PUSH
22600: LD_INT 29
22602: PUSH
22603: LD_INT 30
22605: PUSH
22606: LD_INT 31
22608: PUSH
22609: LD_INT 32
22611: PUSH
22612: LD_INT 33
22614: PUSH
22615: LD_INT 34
22617: PUSH
22618: LD_INT 35
22620: PUSH
22621: LD_INT 36
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 101
22664: PUSH
22665: LD_INT 102
22667: PUSH
22668: LD_INT 103
22670: PUSH
22671: LD_INT 104
22673: PUSH
22674: LD_INT 105
22676: PUSH
22677: LD_INT 106
22679: PUSH
22680: LD_INT 107
22682: PUSH
22683: LD_INT 108
22685: PUSH
22686: LD_INT 109
22688: PUSH
22689: LD_INT 110
22691: PUSH
22692: LD_INT 111
22694: PUSH
22695: LD_INT 112
22697: PUSH
22698: LD_INT 113
22700: PUSH
22701: LD_INT 114
22703: PUSH
22704: LD_INT 115
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: ST_TO_ADDR
// if result then
22728: LD_VAR 0 1
22732: IFFALSE 23021
// begin normal :=  ;
22734: LD_ADDR_VAR 0 3
22738: PUSH
22739: LD_STRING 
22741: ST_TO_ADDR
// hardcore :=  ;
22742: LD_ADDR_VAR 0 4
22746: PUSH
22747: LD_STRING 
22749: ST_TO_ADDR
// for i = 1 to normalCounter do
22750: LD_ADDR_VAR 0 5
22754: PUSH
22755: DOUBLE
22756: LD_INT 1
22758: DEC
22759: ST_TO_ADDR
22760: LD_EXP 53
22764: PUSH
22765: FOR_TO
22766: IFFALSE 22867
// begin tmp := 0 ;
22768: LD_ADDR_VAR 0 2
22772: PUSH
22773: LD_STRING 0
22775: ST_TO_ADDR
// if result [ 1 ] then
22776: LD_VAR 0 1
22780: PUSH
22781: LD_INT 1
22783: ARRAY
22784: IFFALSE 22849
// if result [ 1 ] [ 1 ] = i then
22786: LD_VAR 0 1
22790: PUSH
22791: LD_INT 1
22793: ARRAY
22794: PUSH
22795: LD_INT 1
22797: ARRAY
22798: PUSH
22799: LD_VAR 0 5
22803: EQUAL
22804: IFFALSE 22849
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22806: LD_ADDR_VAR 0 1
22810: PUSH
22811: LD_VAR 0 1
22815: PPUSH
22816: LD_INT 1
22818: PPUSH
22819: LD_VAR 0 1
22823: PUSH
22824: LD_INT 1
22826: ARRAY
22827: PPUSH
22828: LD_INT 1
22830: PPUSH
22831: CALL_OW 3
22835: PPUSH
22836: CALL_OW 1
22840: ST_TO_ADDR
// tmp := 1 ;
22841: LD_ADDR_VAR 0 2
22845: PUSH
22846: LD_STRING 1
22848: ST_TO_ADDR
// end ; normal := normal & tmp ;
22849: LD_ADDR_VAR 0 3
22853: PUSH
22854: LD_VAR 0 3
22858: PUSH
22859: LD_VAR 0 2
22863: STR
22864: ST_TO_ADDR
// end ;
22865: GO 22765
22867: POP
22868: POP
// for i = 1 to hardcoreCounter do
22869: LD_ADDR_VAR 0 5
22873: PUSH
22874: DOUBLE
22875: LD_INT 1
22877: DEC
22878: ST_TO_ADDR
22879: LD_EXP 54
22883: PUSH
22884: FOR_TO
22885: IFFALSE 22990
// begin tmp := 0 ;
22887: LD_ADDR_VAR 0 2
22891: PUSH
22892: LD_STRING 0
22894: ST_TO_ADDR
// if result [ 2 ] then
22895: LD_VAR 0 1
22899: PUSH
22900: LD_INT 2
22902: ARRAY
22903: IFFALSE 22972
// if result [ 2 ] [ 1 ] = 100 + i then
22905: LD_VAR 0 1
22909: PUSH
22910: LD_INT 2
22912: ARRAY
22913: PUSH
22914: LD_INT 1
22916: ARRAY
22917: PUSH
22918: LD_INT 100
22920: PUSH
22921: LD_VAR 0 5
22925: PLUS
22926: EQUAL
22927: IFFALSE 22972
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22929: LD_ADDR_VAR 0 1
22933: PUSH
22934: LD_VAR 0 1
22938: PPUSH
22939: LD_INT 2
22941: PPUSH
22942: LD_VAR 0 1
22946: PUSH
22947: LD_INT 2
22949: ARRAY
22950: PPUSH
22951: LD_INT 1
22953: PPUSH
22954: CALL_OW 3
22958: PPUSH
22959: CALL_OW 1
22963: ST_TO_ADDR
// tmp := 1 ;
22964: LD_ADDR_VAR 0 2
22968: PUSH
22969: LD_STRING 1
22971: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22972: LD_ADDR_VAR 0 4
22976: PUSH
22977: LD_VAR 0 4
22981: PUSH
22982: LD_VAR 0 2
22986: STR
22987: ST_TO_ADDR
// end ;
22988: GO 22884
22990: POP
22991: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
22992: LD_STRING getStreamItemsFromMission("
22994: PUSH
22995: LD_VAR 0 3
22999: STR
23000: PUSH
23001: LD_STRING ","
23003: STR
23004: PUSH
23005: LD_VAR 0 4
23009: STR
23010: PUSH
23011: LD_STRING ")
23013: STR
23014: PPUSH
23015: CALL_OW 559
// end else
23019: GO 23028
// ToLua ( getStreamItemsFromMission("","") ) ;
23021: LD_STRING getStreamItemsFromMission("","")
23023: PPUSH
23024: CALL_OW 559
// end ;
23028: LD_VAR 0 1
23032: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23033: LD_EXP 52
23037: PUSH
23038: LD_EXP 57
23042: AND
23043: IFFALSE 23167
23045: GO 23047
23047: DISABLE
23048: LD_INT 0
23050: PPUSH
23051: PPUSH
// begin enable ;
23052: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23053: LD_ADDR_VAR 0 2
23057: PUSH
23058: LD_INT 22
23060: PUSH
23061: LD_OWVAR 2
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 2
23072: PUSH
23073: LD_INT 34
23075: PUSH
23076: LD_INT 7
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 34
23085: PUSH
23086: LD_INT 45
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: PUSH
23093: LD_INT 34
23095: PUSH
23096: LD_INT 28
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: PUSH
23103: LD_INT 34
23105: PUSH
23106: LD_INT 47
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PPUSH
23124: CALL_OW 69
23128: ST_TO_ADDR
// if not tmp then
23129: LD_VAR 0 2
23133: NOT
23134: IFFALSE 23138
// exit ;
23136: GO 23167
// for i in tmp do
23138: LD_ADDR_VAR 0 1
23142: PUSH
23143: LD_VAR 0 2
23147: PUSH
23148: FOR_IN
23149: IFFALSE 23165
// begin SetLives ( i , 0 ) ;
23151: LD_VAR 0 1
23155: PPUSH
23156: LD_INT 0
23158: PPUSH
23159: CALL_OW 234
// end ;
23163: GO 23148
23165: POP
23166: POP
// end ;
23167: PPOPN 2
23169: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23170: LD_EXP 52
23174: PUSH
23175: LD_EXP 58
23179: AND
23180: IFFALSE 23264
23182: GO 23184
23184: DISABLE
23185: LD_INT 0
23187: PPUSH
23188: PPUSH
// begin enable ;
23189: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23190: LD_ADDR_VAR 0 2
23194: PUSH
23195: LD_INT 22
23197: PUSH
23198: LD_OWVAR 2
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PUSH
23207: LD_INT 32
23209: PUSH
23210: LD_INT 3
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PPUSH
23221: CALL_OW 69
23225: ST_TO_ADDR
// if not tmp then
23226: LD_VAR 0 2
23230: NOT
23231: IFFALSE 23235
// exit ;
23233: GO 23264
// for i in tmp do
23235: LD_ADDR_VAR 0 1
23239: PUSH
23240: LD_VAR 0 2
23244: PUSH
23245: FOR_IN
23246: IFFALSE 23262
// begin SetLives ( i , 0 ) ;
23248: LD_VAR 0 1
23252: PPUSH
23253: LD_INT 0
23255: PPUSH
23256: CALL_OW 234
// end ;
23260: GO 23245
23262: POP
23263: POP
// end ;
23264: PPOPN 2
23266: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23267: LD_EXP 52
23271: PUSH
23272: LD_EXP 55
23276: AND
23277: IFFALSE 23370
23279: GO 23281
23281: DISABLE
23282: LD_INT 0
23284: PPUSH
// begin enable ;
23285: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23286: LD_ADDR_VAR 0 1
23290: PUSH
23291: LD_INT 22
23293: PUSH
23294: LD_OWVAR 2
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 2
23305: PUSH
23306: LD_INT 25
23308: PUSH
23309: LD_INT 5
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: LD_INT 25
23318: PUSH
23319: LD_INT 9
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: LD_INT 25
23328: PUSH
23329: LD_INT 8
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PPUSH
23346: CALL_OW 69
23350: PUSH
23351: FOR_IN
23352: IFFALSE 23368
// begin SetClass ( i , 1 ) ;
23354: LD_VAR 0 1
23358: PPUSH
23359: LD_INT 1
23361: PPUSH
23362: CALL_OW 336
// end ;
23366: GO 23351
23368: POP
23369: POP
// end ;
23370: PPOPN 1
23372: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23373: LD_EXP 52
23377: PUSH
23378: LD_EXP 56
23382: AND
23383: PUSH
23384: LD_OWVAR 65
23388: PUSH
23389: LD_INT 7
23391: LESS
23392: AND
23393: IFFALSE 23407
23395: GO 23397
23397: DISABLE
// begin enable ;
23398: ENABLE
// game_speed := 7 ;
23399: LD_ADDR_OWVAR 65
23403: PUSH
23404: LD_INT 7
23406: ST_TO_ADDR
// end ;
23407: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23408: LD_EXP 52
23412: PUSH
23413: LD_EXP 59
23417: AND
23418: IFFALSE 23620
23420: GO 23422
23422: DISABLE
23423: LD_INT 0
23425: PPUSH
23426: PPUSH
23427: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23428: LD_ADDR_VAR 0 3
23432: PUSH
23433: LD_INT 81
23435: PUSH
23436: LD_OWVAR 2
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: LD_INT 21
23447: PUSH
23448: LD_INT 1
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PPUSH
23459: CALL_OW 69
23463: ST_TO_ADDR
// if not tmp then
23464: LD_VAR 0 3
23468: NOT
23469: IFFALSE 23473
// exit ;
23471: GO 23620
// if tmp > 5 then
23473: LD_VAR 0 3
23477: PUSH
23478: LD_INT 5
23480: GREATER
23481: IFFALSE 23493
// k := 5 else
23483: LD_ADDR_VAR 0 2
23487: PUSH
23488: LD_INT 5
23490: ST_TO_ADDR
23491: GO 23503
// k := tmp ;
23493: LD_ADDR_VAR 0 2
23497: PUSH
23498: LD_VAR 0 3
23502: ST_TO_ADDR
// for i := 1 to k do
23503: LD_ADDR_VAR 0 1
23507: PUSH
23508: DOUBLE
23509: LD_INT 1
23511: DEC
23512: ST_TO_ADDR
23513: LD_VAR 0 2
23517: PUSH
23518: FOR_TO
23519: IFFALSE 23618
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23521: LD_VAR 0 3
23525: PUSH
23526: LD_VAR 0 1
23530: ARRAY
23531: PPUSH
23532: LD_VAR 0 1
23536: PUSH
23537: LD_INT 4
23539: MOD
23540: PUSH
23541: LD_INT 1
23543: PLUS
23544: PPUSH
23545: CALL_OW 259
23549: PUSH
23550: LD_INT 10
23552: LESS
23553: IFFALSE 23616
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23555: LD_VAR 0 3
23559: PUSH
23560: LD_VAR 0 1
23564: ARRAY
23565: PPUSH
23566: LD_VAR 0 1
23570: PUSH
23571: LD_INT 4
23573: MOD
23574: PUSH
23575: LD_INT 1
23577: PLUS
23578: PPUSH
23579: LD_VAR 0 3
23583: PUSH
23584: LD_VAR 0 1
23588: ARRAY
23589: PPUSH
23590: LD_VAR 0 1
23594: PUSH
23595: LD_INT 4
23597: MOD
23598: PUSH
23599: LD_INT 1
23601: PLUS
23602: PPUSH
23603: CALL_OW 259
23607: PUSH
23608: LD_INT 1
23610: PLUS
23611: PPUSH
23612: CALL_OW 237
23616: GO 23518
23618: POP
23619: POP
// end ;
23620: PPOPN 3
23622: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23623: LD_EXP 52
23627: PUSH
23628: LD_EXP 60
23632: AND
23633: IFFALSE 23653
23635: GO 23637
23637: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23638: LD_INT 4
23640: PPUSH
23641: LD_OWVAR 2
23645: PPUSH
23646: LD_INT 0
23648: PPUSH
23649: CALL_OW 324
23653: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23654: LD_EXP 52
23658: PUSH
23659: LD_EXP 89
23663: AND
23664: IFFALSE 23684
23666: GO 23668
23668: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23669: LD_INT 19
23671: PPUSH
23672: LD_OWVAR 2
23676: PPUSH
23677: LD_INT 0
23679: PPUSH
23680: CALL_OW 324
23684: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23685: LD_EXP 52
23689: PUSH
23690: LD_EXP 61
23694: AND
23695: IFFALSE 23797
23697: GO 23699
23699: DISABLE
23700: LD_INT 0
23702: PPUSH
23703: PPUSH
// begin enable ;
23704: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23705: LD_ADDR_VAR 0 2
23709: PUSH
23710: LD_INT 22
23712: PUSH
23713: LD_OWVAR 2
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: LD_INT 2
23724: PUSH
23725: LD_INT 34
23727: PUSH
23728: LD_INT 11
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PUSH
23735: LD_INT 34
23737: PUSH
23738: LD_INT 30
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: LIST
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: PPUSH
23754: CALL_OW 69
23758: ST_TO_ADDR
// if not tmp then
23759: LD_VAR 0 2
23763: NOT
23764: IFFALSE 23768
// exit ;
23766: GO 23797
// for i in tmp do
23768: LD_ADDR_VAR 0 1
23772: PUSH
23773: LD_VAR 0 2
23777: PUSH
23778: FOR_IN
23779: IFFALSE 23795
// begin SetLives ( i , 0 ) ;
23781: LD_VAR 0 1
23785: PPUSH
23786: LD_INT 0
23788: PPUSH
23789: CALL_OW 234
// end ;
23793: GO 23778
23795: POP
23796: POP
// end ;
23797: PPOPN 2
23799: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23800: LD_EXP 52
23804: PUSH
23805: LD_EXP 62
23809: AND
23810: IFFALSE 23830
23812: GO 23814
23814: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23815: LD_INT 32
23817: PPUSH
23818: LD_OWVAR 2
23822: PPUSH
23823: LD_INT 0
23825: PPUSH
23826: CALL_OW 324
23830: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23831: LD_EXP 52
23835: PUSH
23836: LD_EXP 63
23840: AND
23841: IFFALSE 24022
23843: GO 23845
23845: DISABLE
23846: LD_INT 0
23848: PPUSH
23849: PPUSH
23850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23851: LD_ADDR_VAR 0 2
23855: PUSH
23856: LD_INT 22
23858: PUSH
23859: LD_OWVAR 2
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: LD_INT 33
23870: PUSH
23871: LD_INT 3
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PPUSH
23882: CALL_OW 69
23886: ST_TO_ADDR
// if not tmp then
23887: LD_VAR 0 2
23891: NOT
23892: IFFALSE 23896
// exit ;
23894: GO 24022
// side := 0 ;
23896: LD_ADDR_VAR 0 3
23900: PUSH
23901: LD_INT 0
23903: ST_TO_ADDR
// for i := 1 to 8 do
23904: LD_ADDR_VAR 0 1
23908: PUSH
23909: DOUBLE
23910: LD_INT 1
23912: DEC
23913: ST_TO_ADDR
23914: LD_INT 8
23916: PUSH
23917: FOR_TO
23918: IFFALSE 23966
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23920: LD_OWVAR 2
23924: PUSH
23925: LD_VAR 0 1
23929: NONEQUAL
23930: PUSH
23931: LD_OWVAR 2
23935: PPUSH
23936: LD_VAR 0 1
23940: PPUSH
23941: CALL_OW 81
23945: PUSH
23946: LD_INT 2
23948: EQUAL
23949: AND
23950: IFFALSE 23964
// begin side := i ;
23952: LD_ADDR_VAR 0 3
23956: PUSH
23957: LD_VAR 0 1
23961: ST_TO_ADDR
// break ;
23962: GO 23966
// end ;
23964: GO 23917
23966: POP
23967: POP
// if not side then
23968: LD_VAR 0 3
23972: NOT
23973: IFFALSE 23977
// exit ;
23975: GO 24022
// for i := 1 to tmp do
23977: LD_ADDR_VAR 0 1
23981: PUSH
23982: DOUBLE
23983: LD_INT 1
23985: DEC
23986: ST_TO_ADDR
23987: LD_VAR 0 2
23991: PUSH
23992: FOR_TO
23993: IFFALSE 24020
// if Prob ( 60 ) then
23995: LD_INT 60
23997: PPUSH
23998: CALL_OW 13
24002: IFFALSE 24018
// SetSide ( i , side ) ;
24004: LD_VAR 0 1
24008: PPUSH
24009: LD_VAR 0 3
24013: PPUSH
24014: CALL_OW 235
24018: GO 23992
24020: POP
24021: POP
// end ;
24022: PPOPN 3
24024: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24025: LD_EXP 52
24029: PUSH
24030: LD_EXP 65
24034: AND
24035: IFFALSE 24154
24037: GO 24039
24039: DISABLE
24040: LD_INT 0
24042: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24043: LD_ADDR_VAR 0 1
24047: PUSH
24048: LD_INT 22
24050: PUSH
24051: LD_OWVAR 2
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 21
24062: PUSH
24063: LD_INT 1
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 3
24072: PUSH
24073: LD_INT 23
24075: PUSH
24076: LD_INT 0
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: LIST
24091: PPUSH
24092: CALL_OW 69
24096: PUSH
24097: FOR_IN
24098: IFFALSE 24152
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24100: LD_VAR 0 1
24104: PPUSH
24105: CALL_OW 257
24109: PUSH
24110: LD_INT 1
24112: PUSH
24113: LD_INT 2
24115: PUSH
24116: LD_INT 3
24118: PUSH
24119: LD_INT 4
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: IN
24128: IFFALSE 24150
// SetClass ( un , rand ( 1 , 4 ) ) ;
24130: LD_VAR 0 1
24134: PPUSH
24135: LD_INT 1
24137: PPUSH
24138: LD_INT 4
24140: PPUSH
24141: CALL_OW 12
24145: PPUSH
24146: CALL_OW 336
24150: GO 24097
24152: POP
24153: POP
// end ;
24154: PPOPN 1
24156: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24157: LD_EXP 52
24161: PUSH
24162: LD_EXP 64
24166: AND
24167: IFFALSE 24246
24169: GO 24171
24171: DISABLE
24172: LD_INT 0
24174: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24175: LD_ADDR_VAR 0 1
24179: PUSH
24180: LD_INT 22
24182: PUSH
24183: LD_OWVAR 2
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: LD_INT 21
24194: PUSH
24195: LD_INT 3
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PPUSH
24206: CALL_OW 69
24210: ST_TO_ADDR
// if not tmp then
24211: LD_VAR 0 1
24215: NOT
24216: IFFALSE 24220
// exit ;
24218: GO 24246
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24220: LD_VAR 0 1
24224: PUSH
24225: LD_INT 1
24227: PPUSH
24228: LD_VAR 0 1
24232: PPUSH
24233: CALL_OW 12
24237: ARRAY
24238: PPUSH
24239: LD_INT 100
24241: PPUSH
24242: CALL_OW 234
// end ;
24246: PPOPN 1
24248: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24249: LD_EXP 52
24253: PUSH
24254: LD_EXP 66
24258: AND
24259: IFFALSE 24357
24261: GO 24263
24263: DISABLE
24264: LD_INT 0
24266: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24267: LD_ADDR_VAR 0 1
24271: PUSH
24272: LD_INT 22
24274: PUSH
24275: LD_OWVAR 2
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: LD_INT 21
24286: PUSH
24287: LD_INT 1
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PPUSH
24298: CALL_OW 69
24302: ST_TO_ADDR
// if not tmp then
24303: LD_VAR 0 1
24307: NOT
24308: IFFALSE 24312
// exit ;
24310: GO 24357
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24312: LD_VAR 0 1
24316: PUSH
24317: LD_INT 1
24319: PPUSH
24320: LD_VAR 0 1
24324: PPUSH
24325: CALL_OW 12
24329: ARRAY
24330: PPUSH
24331: LD_INT 1
24333: PPUSH
24334: LD_INT 4
24336: PPUSH
24337: CALL_OW 12
24341: PPUSH
24342: LD_INT 3000
24344: PPUSH
24345: LD_INT 9000
24347: PPUSH
24348: CALL_OW 12
24352: PPUSH
24353: CALL_OW 492
// end ;
24357: PPOPN 1
24359: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24360: LD_EXP 52
24364: PUSH
24365: LD_EXP 67
24369: AND
24370: IFFALSE 24390
24372: GO 24374
24374: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24375: LD_INT 1
24377: PPUSH
24378: LD_OWVAR 2
24382: PPUSH
24383: LD_INT 0
24385: PPUSH
24386: CALL_OW 324
24390: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24391: LD_EXP 52
24395: PUSH
24396: LD_EXP 68
24400: AND
24401: IFFALSE 24484
24403: GO 24405
24405: DISABLE
24406: LD_INT 0
24408: PPUSH
24409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24410: LD_ADDR_VAR 0 2
24414: PUSH
24415: LD_INT 22
24417: PUSH
24418: LD_OWVAR 2
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 21
24429: PUSH
24430: LD_INT 3
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PPUSH
24441: CALL_OW 69
24445: ST_TO_ADDR
// if not tmp then
24446: LD_VAR 0 2
24450: NOT
24451: IFFALSE 24455
// exit ;
24453: GO 24484
// for i in tmp do
24455: LD_ADDR_VAR 0 1
24459: PUSH
24460: LD_VAR 0 2
24464: PUSH
24465: FOR_IN
24466: IFFALSE 24482
// SetBLevel ( i , 10 ) ;
24468: LD_VAR 0 1
24472: PPUSH
24473: LD_INT 10
24475: PPUSH
24476: CALL_OW 241
24480: GO 24465
24482: POP
24483: POP
// end ;
24484: PPOPN 2
24486: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24487: LD_EXP 52
24491: PUSH
24492: LD_EXP 69
24496: AND
24497: IFFALSE 24608
24499: GO 24501
24501: DISABLE
24502: LD_INT 0
24504: PPUSH
24505: PPUSH
24506: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24507: LD_ADDR_VAR 0 3
24511: PUSH
24512: LD_INT 22
24514: PUSH
24515: LD_OWVAR 2
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 25
24526: PUSH
24527: LD_INT 1
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PPUSH
24538: CALL_OW 69
24542: ST_TO_ADDR
// if not tmp then
24543: LD_VAR 0 3
24547: NOT
24548: IFFALSE 24552
// exit ;
24550: GO 24608
// un := tmp [ rand ( 1 , tmp ) ] ;
24552: LD_ADDR_VAR 0 2
24556: PUSH
24557: LD_VAR 0 3
24561: PUSH
24562: LD_INT 1
24564: PPUSH
24565: LD_VAR 0 3
24569: PPUSH
24570: CALL_OW 12
24574: ARRAY
24575: ST_TO_ADDR
// if Crawls ( un ) then
24576: LD_VAR 0 2
24580: PPUSH
24581: CALL_OW 318
24585: IFFALSE 24596
// ComWalk ( un ) ;
24587: LD_VAR 0 2
24591: PPUSH
24592: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24596: LD_VAR 0 2
24600: PPUSH
24601: LD_INT 5
24603: PPUSH
24604: CALL_OW 336
// end ;
24608: PPOPN 3
24610: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
24611: LD_EXP 52
24615: PUSH
24616: LD_EXP 70
24620: AND
24621: PUSH
24622: LD_OWVAR 67
24626: PUSH
24627: LD_INT 3
24629: LESS
24630: AND
24631: IFFALSE 24650
24633: GO 24635
24635: DISABLE
// Difficulty := Difficulty + 1 ;
24636: LD_ADDR_OWVAR 67
24640: PUSH
24641: LD_OWVAR 67
24645: PUSH
24646: LD_INT 1
24648: PLUS
24649: ST_TO_ADDR
24650: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24651: LD_EXP 52
24655: PUSH
24656: LD_EXP 71
24660: AND
24661: IFFALSE 24764
24663: GO 24665
24665: DISABLE
24666: LD_INT 0
24668: PPUSH
// begin for i := 1 to 5 do
24669: LD_ADDR_VAR 0 1
24673: PUSH
24674: DOUBLE
24675: LD_INT 1
24677: DEC
24678: ST_TO_ADDR
24679: LD_INT 5
24681: PUSH
24682: FOR_TO
24683: IFFALSE 24762
// begin uc_nation := nation_nature ;
24685: LD_ADDR_OWVAR 21
24689: PUSH
24690: LD_INT 0
24692: ST_TO_ADDR
// uc_side := 0 ;
24693: LD_ADDR_OWVAR 20
24697: PUSH
24698: LD_INT 0
24700: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24701: LD_ADDR_OWVAR 29
24705: PUSH
24706: LD_INT 12
24708: PUSH
24709: LD_INT 12
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: ST_TO_ADDR
// hc_agressivity := 20 ;
24716: LD_ADDR_OWVAR 35
24720: PUSH
24721: LD_INT 20
24723: ST_TO_ADDR
// hc_class := class_tiger ;
24724: LD_ADDR_OWVAR 28
24728: PUSH
24729: LD_INT 14
24731: ST_TO_ADDR
// hc_gallery :=  ;
24732: LD_ADDR_OWVAR 33
24736: PUSH
24737: LD_STRING 
24739: ST_TO_ADDR
// hc_name :=  ;
24740: LD_ADDR_OWVAR 26
24744: PUSH
24745: LD_STRING 
24747: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24748: CALL_OW 44
24752: PPUSH
24753: LD_INT 0
24755: PPUSH
24756: CALL_OW 51
// end ;
24760: GO 24682
24762: POP
24763: POP
// end ;
24764: PPOPN 1
24766: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24767: LD_EXP 52
24771: PUSH
24772: LD_EXP 72
24776: AND
24777: IFFALSE 24786
24779: GO 24781
24781: DISABLE
// StreamSibBomb ;
24782: CALL 24787 0 0
24786: END
// export function StreamSibBomb ; var i , x , y ; begin
24787: LD_INT 0
24789: PPUSH
24790: PPUSH
24791: PPUSH
24792: PPUSH
// result := false ;
24793: LD_ADDR_VAR 0 1
24797: PUSH
24798: LD_INT 0
24800: ST_TO_ADDR
// for i := 1 to 16 do
24801: LD_ADDR_VAR 0 2
24805: PUSH
24806: DOUBLE
24807: LD_INT 1
24809: DEC
24810: ST_TO_ADDR
24811: LD_INT 16
24813: PUSH
24814: FOR_TO
24815: IFFALSE 25014
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24817: LD_ADDR_VAR 0 3
24821: PUSH
24822: LD_INT 10
24824: PUSH
24825: LD_INT 20
24827: PUSH
24828: LD_INT 30
24830: PUSH
24831: LD_INT 40
24833: PUSH
24834: LD_INT 50
24836: PUSH
24837: LD_INT 60
24839: PUSH
24840: LD_INT 70
24842: PUSH
24843: LD_INT 80
24845: PUSH
24846: LD_INT 90
24848: PUSH
24849: LD_INT 100
24851: PUSH
24852: LD_INT 110
24854: PUSH
24855: LD_INT 120
24857: PUSH
24858: LD_INT 130
24860: PUSH
24861: LD_INT 140
24863: PUSH
24864: LD_INT 150
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 1
24886: PPUSH
24887: LD_INT 15
24889: PPUSH
24890: CALL_OW 12
24894: ARRAY
24895: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24896: LD_ADDR_VAR 0 4
24900: PUSH
24901: LD_INT 10
24903: PUSH
24904: LD_INT 20
24906: PUSH
24907: LD_INT 30
24909: PUSH
24910: LD_INT 40
24912: PUSH
24913: LD_INT 50
24915: PUSH
24916: LD_INT 60
24918: PUSH
24919: LD_INT 70
24921: PUSH
24922: LD_INT 80
24924: PUSH
24925: LD_INT 90
24927: PUSH
24928: LD_INT 100
24930: PUSH
24931: LD_INT 110
24933: PUSH
24934: LD_INT 120
24936: PUSH
24937: LD_INT 130
24939: PUSH
24940: LD_INT 140
24942: PUSH
24943: LD_INT 150
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: PUSH
24963: LD_INT 1
24965: PPUSH
24966: LD_INT 15
24968: PPUSH
24969: CALL_OW 12
24973: ARRAY
24974: ST_TO_ADDR
// if ValidHex ( x , y ) then
24975: LD_VAR 0 3
24979: PPUSH
24980: LD_VAR 0 4
24984: PPUSH
24985: CALL_OW 488
24989: IFFALSE 25012
// begin result := [ x , y ] ;
24991: LD_ADDR_VAR 0 1
24995: PUSH
24996: LD_VAR 0 3
25000: PUSH
25001: LD_VAR 0 4
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: ST_TO_ADDR
// break ;
25010: GO 25014
// end ; end ;
25012: GO 24814
25014: POP
25015: POP
// if result then
25016: LD_VAR 0 1
25020: IFFALSE 25080
// begin ToLua ( playSibBomb() ) ;
25022: LD_STRING playSibBomb()
25024: PPUSH
25025: CALL_OW 559
// wait ( 0 0$14 ) ;
25029: LD_INT 490
25031: PPUSH
25032: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25036: LD_VAR 0 1
25040: PUSH
25041: LD_INT 1
25043: ARRAY
25044: PPUSH
25045: LD_VAR 0 1
25049: PUSH
25050: LD_INT 2
25052: ARRAY
25053: PPUSH
25054: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25058: LD_VAR 0 1
25062: PUSH
25063: LD_INT 1
25065: ARRAY
25066: PPUSH
25067: LD_VAR 0 1
25071: PUSH
25072: LD_INT 2
25074: ARRAY
25075: PPUSH
25076: CALL_OW 429
// end ; end ;
25080: LD_VAR 0 1
25084: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25085: LD_EXP 52
25089: PUSH
25090: LD_EXP 74
25094: AND
25095: IFFALSE 25107
25097: GO 25099
25099: DISABLE
// YouLost (  ) ;
25100: LD_STRING 
25102: PPUSH
25103: CALL_OW 104
25107: END
// every 0 0$1 trigger StreamModeActive and sFog do
25108: LD_EXP 52
25112: PUSH
25113: LD_EXP 73
25117: AND
25118: IFFALSE 25132
25120: GO 25122
25122: DISABLE
// FogOff ( your_side ) ;
25123: LD_OWVAR 2
25127: PPUSH
25128: CALL_OW 344
25132: END
// every 0 0$1 trigger StreamModeActive and sSun do
25133: LD_EXP 52
25137: PUSH
25138: LD_EXP 75
25142: AND
25143: IFFALSE 25171
25145: GO 25147
25147: DISABLE
// begin solar_recharge_percent := 0 ;
25148: LD_ADDR_OWVAR 79
25152: PUSH
25153: LD_INT 0
25155: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25156: LD_INT 10500
25158: PPUSH
25159: CALL_OW 67
// solar_recharge_percent := 100 ;
25163: LD_ADDR_OWVAR 79
25167: PUSH
25168: LD_INT 100
25170: ST_TO_ADDR
// end ;
25171: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25172: LD_EXP 52
25176: PUSH
25177: LD_EXP 76
25181: AND
25182: IFFALSE 25421
25184: GO 25186
25186: DISABLE
25187: LD_INT 0
25189: PPUSH
25190: PPUSH
25191: PPUSH
// begin tmp := [ ] ;
25192: LD_ADDR_VAR 0 3
25196: PUSH
25197: EMPTY
25198: ST_TO_ADDR
// for i := 1 to 6 do
25199: LD_ADDR_VAR 0 1
25203: PUSH
25204: DOUBLE
25205: LD_INT 1
25207: DEC
25208: ST_TO_ADDR
25209: LD_INT 6
25211: PUSH
25212: FOR_TO
25213: IFFALSE 25318
// begin uc_nation := nation_nature ;
25215: LD_ADDR_OWVAR 21
25219: PUSH
25220: LD_INT 0
25222: ST_TO_ADDR
// uc_side := 0 ;
25223: LD_ADDR_OWVAR 20
25227: PUSH
25228: LD_INT 0
25230: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25231: LD_ADDR_OWVAR 29
25235: PUSH
25236: LD_INT 12
25238: PUSH
25239: LD_INT 12
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: ST_TO_ADDR
// hc_agressivity := 20 ;
25246: LD_ADDR_OWVAR 35
25250: PUSH
25251: LD_INT 20
25253: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25254: LD_ADDR_OWVAR 28
25258: PUSH
25259: LD_INT 17
25261: ST_TO_ADDR
// hc_gallery :=  ;
25262: LD_ADDR_OWVAR 33
25266: PUSH
25267: LD_STRING 
25269: ST_TO_ADDR
// hc_name :=  ;
25270: LD_ADDR_OWVAR 26
25274: PUSH
25275: LD_STRING 
25277: ST_TO_ADDR
// un := CreateHuman ;
25278: LD_ADDR_VAR 0 2
25282: PUSH
25283: CALL_OW 44
25287: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25288: LD_VAR 0 2
25292: PPUSH
25293: LD_INT 1
25295: PPUSH
25296: CALL_OW 51
// tmp := tmp ^ un ;
25300: LD_ADDR_VAR 0 3
25304: PUSH
25305: LD_VAR 0 3
25309: PUSH
25310: LD_VAR 0 2
25314: ADD
25315: ST_TO_ADDR
// end ;
25316: GO 25212
25318: POP
25319: POP
// repeat wait ( 0 0$1 ) ;
25320: LD_INT 35
25322: PPUSH
25323: CALL_OW 67
// for un in tmp do
25327: LD_ADDR_VAR 0 2
25331: PUSH
25332: LD_VAR 0 3
25336: PUSH
25337: FOR_IN
25338: IFFALSE 25412
// begin if IsDead ( un ) then
25340: LD_VAR 0 2
25344: PPUSH
25345: CALL_OW 301
25349: IFFALSE 25369
// begin tmp := tmp diff un ;
25351: LD_ADDR_VAR 0 3
25355: PUSH
25356: LD_VAR 0 3
25360: PUSH
25361: LD_VAR 0 2
25365: DIFF
25366: ST_TO_ADDR
// continue ;
25367: GO 25337
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25369: LD_VAR 0 2
25373: PPUSH
25374: LD_INT 3
25376: PUSH
25377: LD_INT 22
25379: PUSH
25380: LD_INT 0
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PPUSH
25391: CALL_OW 69
25395: PPUSH
25396: LD_VAR 0 2
25400: PPUSH
25401: CALL_OW 74
25405: PPUSH
25406: CALL_OW 115
// end ;
25410: GO 25337
25412: POP
25413: POP
// until not tmp ;
25414: LD_VAR 0 3
25418: NOT
25419: IFFALSE 25320
// end ;
25421: PPOPN 3
25423: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25424: LD_EXP 52
25428: PUSH
25429: LD_EXP 77
25433: AND
25434: IFFALSE 25488
25436: GO 25438
25438: DISABLE
// begin ToLua ( displayTroll(); ) ;
25439: LD_STRING displayTroll();
25441: PPUSH
25442: CALL_OW 559
// wait ( 3 3$00 ) ;
25446: LD_INT 6300
25448: PPUSH
25449: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25453: LD_STRING hideTroll();
25455: PPUSH
25456: CALL_OW 559
// wait ( 1 1$00 ) ;
25460: LD_INT 2100
25462: PPUSH
25463: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25467: LD_STRING displayTroll();
25469: PPUSH
25470: CALL_OW 559
// wait ( 1 1$00 ) ;
25474: LD_INT 2100
25476: PPUSH
25477: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25481: LD_STRING hideTroll();
25483: PPUSH
25484: CALL_OW 559
// end ;
25488: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25489: LD_EXP 52
25493: PUSH
25494: LD_EXP 78
25498: AND
25499: IFFALSE 25562
25501: GO 25503
25503: DISABLE
25504: LD_INT 0
25506: PPUSH
// begin p := 0 ;
25507: LD_ADDR_VAR 0 1
25511: PUSH
25512: LD_INT 0
25514: ST_TO_ADDR
// repeat game_speed := 1 ;
25515: LD_ADDR_OWVAR 65
25519: PUSH
25520: LD_INT 1
25522: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25523: LD_INT 35
25525: PPUSH
25526: CALL_OW 67
// p := p + 1 ;
25530: LD_ADDR_VAR 0 1
25534: PUSH
25535: LD_VAR 0 1
25539: PUSH
25540: LD_INT 1
25542: PLUS
25543: ST_TO_ADDR
// until p >= 60 ;
25544: LD_VAR 0 1
25548: PUSH
25549: LD_INT 60
25551: GREATEREQUAL
25552: IFFALSE 25515
// game_speed := 4 ;
25554: LD_ADDR_OWVAR 65
25558: PUSH
25559: LD_INT 4
25561: ST_TO_ADDR
// end ;
25562: PPOPN 1
25564: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25565: LD_EXP 52
25569: PUSH
25570: LD_EXP 79
25574: AND
25575: IFFALSE 25721
25577: GO 25579
25579: DISABLE
25580: LD_INT 0
25582: PPUSH
25583: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25584: LD_ADDR_VAR 0 1
25588: PUSH
25589: LD_INT 22
25591: PUSH
25592: LD_OWVAR 2
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 2
25603: PUSH
25604: LD_INT 30
25606: PUSH
25607: LD_INT 0
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 30
25616: PUSH
25617: LD_INT 1
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: LIST
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PPUSH
25633: CALL_OW 69
25637: ST_TO_ADDR
// if not depot then
25638: LD_VAR 0 1
25642: NOT
25643: IFFALSE 25647
// exit ;
25645: GO 25721
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25647: LD_ADDR_VAR 0 2
25651: PUSH
25652: LD_VAR 0 1
25656: PUSH
25657: LD_INT 1
25659: PPUSH
25660: LD_VAR 0 1
25664: PPUSH
25665: CALL_OW 12
25669: ARRAY
25670: PPUSH
25671: CALL_OW 274
25675: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25676: LD_VAR 0 2
25680: PPUSH
25681: LD_INT 1
25683: PPUSH
25684: LD_INT 0
25686: PPUSH
25687: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25691: LD_VAR 0 2
25695: PPUSH
25696: LD_INT 2
25698: PPUSH
25699: LD_INT 0
25701: PPUSH
25702: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25706: LD_VAR 0 2
25710: PPUSH
25711: LD_INT 3
25713: PPUSH
25714: LD_INT 0
25716: PPUSH
25717: CALL_OW 277
// end ;
25721: PPOPN 2
25723: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25724: LD_EXP 52
25728: PUSH
25729: LD_EXP 80
25733: AND
25734: IFFALSE 25831
25736: GO 25738
25738: DISABLE
25739: LD_INT 0
25741: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25742: LD_ADDR_VAR 0 1
25746: PUSH
25747: LD_INT 22
25749: PUSH
25750: LD_OWVAR 2
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 21
25761: PUSH
25762: LD_INT 1
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 3
25771: PUSH
25772: LD_INT 23
25774: PUSH
25775: LD_INT 0
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: LIST
25790: PPUSH
25791: CALL_OW 69
25795: ST_TO_ADDR
// if not tmp then
25796: LD_VAR 0 1
25800: NOT
25801: IFFALSE 25805
// exit ;
25803: GO 25831
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25805: LD_VAR 0 1
25809: PUSH
25810: LD_INT 1
25812: PPUSH
25813: LD_VAR 0 1
25817: PPUSH
25818: CALL_OW 12
25822: ARRAY
25823: PPUSH
25824: LD_INT 200
25826: PPUSH
25827: CALL_OW 234
// end ;
25831: PPOPN 1
25833: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25834: LD_EXP 52
25838: PUSH
25839: LD_EXP 81
25843: AND
25844: IFFALSE 25923
25846: GO 25848
25848: DISABLE
25849: LD_INT 0
25851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25852: LD_ADDR_VAR 0 1
25856: PUSH
25857: LD_INT 22
25859: PUSH
25860: LD_OWVAR 2
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 21
25871: PUSH
25872: LD_INT 2
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PPUSH
25883: CALL_OW 69
25887: ST_TO_ADDR
// if not tmp then
25888: LD_VAR 0 1
25892: NOT
25893: IFFALSE 25897
// exit ;
25895: GO 25923
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25897: LD_VAR 0 1
25901: PUSH
25902: LD_INT 1
25904: PPUSH
25905: LD_VAR 0 1
25909: PPUSH
25910: CALL_OW 12
25914: ARRAY
25915: PPUSH
25916: LD_INT 60
25918: PPUSH
25919: CALL_OW 234
// end ;
25923: PPOPN 1
25925: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25926: LD_EXP 52
25930: PUSH
25931: LD_EXP 82
25935: AND
25936: IFFALSE 26035
25938: GO 25940
25940: DISABLE
25941: LD_INT 0
25943: PPUSH
25944: PPUSH
// begin enable ;
25945: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25946: LD_ADDR_VAR 0 1
25950: PUSH
25951: LD_INT 22
25953: PUSH
25954: LD_OWVAR 2
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 61
25965: PUSH
25966: EMPTY
25967: LIST
25968: PUSH
25969: LD_INT 33
25971: PUSH
25972: LD_INT 2
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: LIST
25983: PPUSH
25984: CALL_OW 69
25988: ST_TO_ADDR
// if not tmp then
25989: LD_VAR 0 1
25993: NOT
25994: IFFALSE 25998
// exit ;
25996: GO 26035
// for i in tmp do
25998: LD_ADDR_VAR 0 2
26002: PUSH
26003: LD_VAR 0 1
26007: PUSH
26008: FOR_IN
26009: IFFALSE 26033
// if IsControledBy ( i ) then
26011: LD_VAR 0 2
26015: PPUSH
26016: CALL_OW 312
26020: IFFALSE 26031
// ComUnlink ( i ) ;
26022: LD_VAR 0 2
26026: PPUSH
26027: CALL_OW 136
26031: GO 26008
26033: POP
26034: POP
// end ;
26035: PPOPN 2
26037: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26038: LD_EXP 52
26042: PUSH
26043: LD_EXP 83
26047: AND
26048: IFFALSE 26188
26050: GO 26052
26052: DISABLE
26053: LD_INT 0
26055: PPUSH
26056: PPUSH
// begin ToLua ( displayPowell(); ) ;
26057: LD_STRING displayPowell();
26059: PPUSH
26060: CALL_OW 559
// uc_side := 0 ;
26064: LD_ADDR_OWVAR 20
26068: PUSH
26069: LD_INT 0
26071: ST_TO_ADDR
// uc_nation := 2 ;
26072: LD_ADDR_OWVAR 21
26076: PUSH
26077: LD_INT 2
26079: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26080: LD_ADDR_OWVAR 37
26084: PUSH
26085: LD_INT 14
26087: ST_TO_ADDR
// vc_engine := engine_siberite ;
26088: LD_ADDR_OWVAR 39
26092: PUSH
26093: LD_INT 3
26095: ST_TO_ADDR
// vc_control := control_apeman ;
26096: LD_ADDR_OWVAR 38
26100: PUSH
26101: LD_INT 5
26103: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26104: LD_ADDR_OWVAR 40
26108: PUSH
26109: LD_INT 29
26111: ST_TO_ADDR
// un := CreateVehicle ;
26112: LD_ADDR_VAR 0 2
26116: PUSH
26117: CALL_OW 45
26121: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26122: LD_VAR 0 2
26126: PPUSH
26127: LD_INT 1
26129: PPUSH
26130: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26134: LD_INT 35
26136: PPUSH
26137: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26141: LD_VAR 0 2
26145: PPUSH
26146: LD_INT 22
26148: PUSH
26149: LD_OWVAR 2
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PPUSH
26158: CALL_OW 69
26162: PPUSH
26163: LD_VAR 0 2
26167: PPUSH
26168: CALL_OW 74
26172: PPUSH
26173: CALL_OW 115
// until IsDead ( un ) ;
26177: LD_VAR 0 2
26181: PPUSH
26182: CALL_OW 301
26186: IFFALSE 26134
// end ;
26188: PPOPN 2
26190: END
// every 0 0$1 trigger StreamModeActive and sStu do
26191: LD_EXP 52
26195: PUSH
26196: LD_EXP 91
26200: AND
26201: IFFALSE 26217
26203: GO 26205
26205: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26206: LD_STRING displayStucuk();
26208: PPUSH
26209: CALL_OW 559
// ResetFog ;
26213: CALL_OW 335
// end ;
26217: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26218: LD_EXP 52
26222: PUSH
26223: LD_EXP 84
26227: AND
26228: IFFALSE 26369
26230: GO 26232
26232: DISABLE
26233: LD_INT 0
26235: PPUSH
26236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26237: LD_ADDR_VAR 0 2
26241: PUSH
26242: LD_INT 22
26244: PUSH
26245: LD_OWVAR 2
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: LD_INT 21
26256: PUSH
26257: LD_INT 1
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PPUSH
26268: CALL_OW 69
26272: ST_TO_ADDR
// if not tmp then
26273: LD_VAR 0 2
26277: NOT
26278: IFFALSE 26282
// exit ;
26280: GO 26369
// un := tmp [ rand ( 1 , tmp ) ] ;
26282: LD_ADDR_VAR 0 1
26286: PUSH
26287: LD_VAR 0 2
26291: PUSH
26292: LD_INT 1
26294: PPUSH
26295: LD_VAR 0 2
26299: PPUSH
26300: CALL_OW 12
26304: ARRAY
26305: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26306: LD_VAR 0 1
26310: PPUSH
26311: LD_INT 0
26313: PPUSH
26314: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26318: LD_VAR 0 1
26322: PPUSH
26323: LD_OWVAR 3
26327: PUSH
26328: LD_VAR 0 1
26332: DIFF
26333: PPUSH
26334: LD_VAR 0 1
26338: PPUSH
26339: CALL_OW 74
26343: PPUSH
26344: CALL_OW 115
// wait ( 0 0$20 ) ;
26348: LD_INT 700
26350: PPUSH
26351: CALL_OW 67
// SetSide ( un , your_side ) ;
26355: LD_VAR 0 1
26359: PPUSH
26360: LD_OWVAR 2
26364: PPUSH
26365: CALL_OW 235
// end ;
26369: PPOPN 2
26371: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26372: LD_EXP 52
26376: PUSH
26377: LD_EXP 85
26381: AND
26382: IFFALSE 26488
26384: GO 26386
26386: DISABLE
26387: LD_INT 0
26389: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26390: LD_ADDR_VAR 0 1
26394: PUSH
26395: LD_INT 22
26397: PUSH
26398: LD_OWVAR 2
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 2
26409: PUSH
26410: LD_INT 30
26412: PUSH
26413: LD_INT 0
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 30
26422: PUSH
26423: LD_INT 1
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: LIST
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PPUSH
26439: CALL_OW 69
26443: ST_TO_ADDR
// if not depot then
26444: LD_VAR 0 1
26448: NOT
26449: IFFALSE 26453
// exit ;
26451: GO 26488
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26453: LD_VAR 0 1
26457: PUSH
26458: LD_INT 1
26460: ARRAY
26461: PPUSH
26462: CALL_OW 250
26466: PPUSH
26467: LD_VAR 0 1
26471: PUSH
26472: LD_INT 1
26474: ARRAY
26475: PPUSH
26476: CALL_OW 251
26480: PPUSH
26481: LD_INT 70
26483: PPUSH
26484: CALL_OW 495
// end ;
26488: PPOPN 1
26490: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26491: LD_EXP 52
26495: PUSH
26496: LD_EXP 86
26500: AND
26501: IFFALSE 26712
26503: GO 26505
26505: DISABLE
26506: LD_INT 0
26508: PPUSH
26509: PPUSH
26510: PPUSH
26511: PPUSH
26512: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26513: LD_ADDR_VAR 0 5
26517: PUSH
26518: LD_INT 22
26520: PUSH
26521: LD_OWVAR 2
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 21
26532: PUSH
26533: LD_INT 1
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PPUSH
26544: CALL_OW 69
26548: ST_TO_ADDR
// if not tmp then
26549: LD_VAR 0 5
26553: NOT
26554: IFFALSE 26558
// exit ;
26556: GO 26712
// for i in tmp do
26558: LD_ADDR_VAR 0 1
26562: PUSH
26563: LD_VAR 0 5
26567: PUSH
26568: FOR_IN
26569: IFFALSE 26710
// begin d := rand ( 0 , 5 ) ;
26571: LD_ADDR_VAR 0 4
26575: PUSH
26576: LD_INT 0
26578: PPUSH
26579: LD_INT 5
26581: PPUSH
26582: CALL_OW 12
26586: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26587: LD_ADDR_VAR 0 2
26591: PUSH
26592: LD_VAR 0 1
26596: PPUSH
26597: CALL_OW 250
26601: PPUSH
26602: LD_VAR 0 4
26606: PPUSH
26607: LD_INT 3
26609: PPUSH
26610: LD_INT 12
26612: PPUSH
26613: CALL_OW 12
26617: PPUSH
26618: CALL_OW 272
26622: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26623: LD_ADDR_VAR 0 3
26627: PUSH
26628: LD_VAR 0 1
26632: PPUSH
26633: CALL_OW 251
26637: PPUSH
26638: LD_VAR 0 4
26642: PPUSH
26643: LD_INT 3
26645: PPUSH
26646: LD_INT 12
26648: PPUSH
26649: CALL_OW 12
26653: PPUSH
26654: CALL_OW 273
26658: ST_TO_ADDR
// if ValidHex ( x , y ) then
26659: LD_VAR 0 2
26663: PPUSH
26664: LD_VAR 0 3
26668: PPUSH
26669: CALL_OW 488
26673: IFFALSE 26708
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26675: LD_VAR 0 1
26679: PPUSH
26680: LD_VAR 0 2
26684: PPUSH
26685: LD_VAR 0 3
26689: PPUSH
26690: LD_INT 3
26692: PPUSH
26693: LD_INT 6
26695: PPUSH
26696: CALL_OW 12
26700: PPUSH
26701: LD_INT 1
26703: PPUSH
26704: CALL_OW 483
// end ;
26708: GO 26568
26710: POP
26711: POP
// end ;
26712: PPOPN 5
26714: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26715: LD_EXP 52
26719: PUSH
26720: LD_EXP 87
26724: AND
26725: IFFALSE 26819
26727: GO 26729
26729: DISABLE
26730: LD_INT 0
26732: PPUSH
26733: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26734: LD_ADDR_VAR 0 2
26738: PUSH
26739: LD_INT 22
26741: PUSH
26742: LD_OWVAR 2
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 32
26753: PUSH
26754: LD_INT 1
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 21
26763: PUSH
26764: LD_INT 2
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: LIST
26775: PPUSH
26776: CALL_OW 69
26780: ST_TO_ADDR
// if not tmp then
26781: LD_VAR 0 2
26785: NOT
26786: IFFALSE 26790
// exit ;
26788: GO 26819
// for i in tmp do
26790: LD_ADDR_VAR 0 1
26794: PUSH
26795: LD_VAR 0 2
26799: PUSH
26800: FOR_IN
26801: IFFALSE 26817
// SetFuel ( i , 0 ) ;
26803: LD_VAR 0 1
26807: PPUSH
26808: LD_INT 0
26810: PPUSH
26811: CALL_OW 240
26815: GO 26800
26817: POP
26818: POP
// end ;
26819: PPOPN 2
26821: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26822: LD_EXP 52
26826: PUSH
26827: LD_EXP 88
26831: AND
26832: IFFALSE 26898
26834: GO 26836
26836: DISABLE
26837: LD_INT 0
26839: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26840: LD_ADDR_VAR 0 1
26844: PUSH
26845: LD_INT 22
26847: PUSH
26848: LD_OWVAR 2
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: LD_INT 30
26859: PUSH
26860: LD_INT 29
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PPUSH
26871: CALL_OW 69
26875: ST_TO_ADDR
// if not tmp then
26876: LD_VAR 0 1
26880: NOT
26881: IFFALSE 26885
// exit ;
26883: GO 26898
// DestroyUnit ( tmp [ 1 ] ) ;
26885: LD_VAR 0 1
26889: PUSH
26890: LD_INT 1
26892: ARRAY
26893: PPUSH
26894: CALL_OW 65
// end ;
26898: PPOPN 1
26900: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26901: LD_EXP 52
26905: PUSH
26906: LD_EXP 90
26910: AND
26911: IFFALSE 27040
26913: GO 26915
26915: DISABLE
26916: LD_INT 0
26918: PPUSH
// begin uc_side := 0 ;
26919: LD_ADDR_OWVAR 20
26923: PUSH
26924: LD_INT 0
26926: ST_TO_ADDR
// uc_nation := nation_arabian ;
26927: LD_ADDR_OWVAR 21
26931: PUSH
26932: LD_INT 2
26934: ST_TO_ADDR
// hc_gallery :=  ;
26935: LD_ADDR_OWVAR 33
26939: PUSH
26940: LD_STRING 
26942: ST_TO_ADDR
// hc_name :=  ;
26943: LD_ADDR_OWVAR 26
26947: PUSH
26948: LD_STRING 
26950: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26951: LD_INT 1
26953: PPUSH
26954: LD_INT 11
26956: PPUSH
26957: LD_INT 10
26959: PPUSH
26960: CALL_OW 380
// un := CreateHuman ;
26964: LD_ADDR_VAR 0 1
26968: PUSH
26969: CALL_OW 44
26973: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26974: LD_VAR 0 1
26978: PPUSH
26979: LD_INT 1
26981: PPUSH
26982: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26986: LD_INT 35
26988: PPUSH
26989: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26993: LD_VAR 0 1
26997: PPUSH
26998: LD_INT 22
27000: PUSH
27001: LD_OWVAR 2
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PPUSH
27010: CALL_OW 69
27014: PPUSH
27015: LD_VAR 0 1
27019: PPUSH
27020: CALL_OW 74
27024: PPUSH
27025: CALL_OW 115
// until IsDead ( un ) ;
27029: LD_VAR 0 1
27033: PPUSH
27034: CALL_OW 301
27038: IFFALSE 26986
// end ;
27040: PPOPN 1
27042: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27043: LD_EXP 52
27047: PUSH
27048: LD_EXP 92
27052: AND
27053: IFFALSE 27065
27055: GO 27057
27057: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27058: LD_STRING earthquake(getX(game), 0, 32)
27060: PPUSH
27061: CALL_OW 559
27065: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27066: LD_EXP 52
27070: PUSH
27071: LD_EXP 93
27075: AND
27076: IFFALSE 27167
27078: GO 27080
27080: DISABLE
27081: LD_INT 0
27083: PPUSH
// begin enable ;
27084: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27085: LD_ADDR_VAR 0 1
27089: PUSH
27090: LD_INT 22
27092: PUSH
27093: LD_OWVAR 2
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: LD_INT 21
27104: PUSH
27105: LD_INT 2
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: LD_INT 33
27114: PUSH
27115: LD_INT 3
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: LIST
27126: PPUSH
27127: CALL_OW 69
27131: ST_TO_ADDR
// if not tmp then
27132: LD_VAR 0 1
27136: NOT
27137: IFFALSE 27141
// exit ;
27139: GO 27167
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27141: LD_VAR 0 1
27145: PUSH
27146: LD_INT 1
27148: PPUSH
27149: LD_VAR 0 1
27153: PPUSH
27154: CALL_OW 12
27158: ARRAY
27159: PPUSH
27160: LD_INT 1
27162: PPUSH
27163: CALL_OW 234
// end ;
27167: PPOPN 1
27169: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27170: LD_EXP 52
27174: PUSH
27175: LD_EXP 94
27179: AND
27180: IFFALSE 27321
27182: GO 27184
27184: DISABLE
27185: LD_INT 0
27187: PPUSH
27188: PPUSH
27189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27190: LD_ADDR_VAR 0 3
27194: PUSH
27195: LD_INT 22
27197: PUSH
27198: LD_OWVAR 2
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 25
27209: PUSH
27210: LD_INT 1
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PPUSH
27221: CALL_OW 69
27225: ST_TO_ADDR
// if not tmp then
27226: LD_VAR 0 3
27230: NOT
27231: IFFALSE 27235
// exit ;
27233: GO 27321
// un := tmp [ rand ( 1 , tmp ) ] ;
27235: LD_ADDR_VAR 0 2
27239: PUSH
27240: LD_VAR 0 3
27244: PUSH
27245: LD_INT 1
27247: PPUSH
27248: LD_VAR 0 3
27252: PPUSH
27253: CALL_OW 12
27257: ARRAY
27258: ST_TO_ADDR
// if Crawls ( un ) then
27259: LD_VAR 0 2
27263: PPUSH
27264: CALL_OW 318
27268: IFFALSE 27279
// ComWalk ( un ) ;
27270: LD_VAR 0 2
27274: PPUSH
27275: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27279: LD_VAR 0 2
27283: PPUSH
27284: LD_INT 9
27286: PPUSH
27287: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27291: LD_INT 28
27293: PPUSH
27294: LD_OWVAR 2
27298: PPUSH
27299: LD_INT 2
27301: PPUSH
27302: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27306: LD_INT 29
27308: PPUSH
27309: LD_OWVAR 2
27313: PPUSH
27314: LD_INT 2
27316: PPUSH
27317: CALL_OW 322
// end ;
27321: PPOPN 3
27323: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27324: LD_EXP 52
27328: PUSH
27329: LD_EXP 95
27333: AND
27334: IFFALSE 27445
27336: GO 27338
27338: DISABLE
27339: LD_INT 0
27341: PPUSH
27342: PPUSH
27343: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27344: LD_ADDR_VAR 0 3
27348: PUSH
27349: LD_INT 22
27351: PUSH
27352: LD_OWVAR 2
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PUSH
27361: LD_INT 25
27363: PUSH
27364: LD_INT 1
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PPUSH
27375: CALL_OW 69
27379: ST_TO_ADDR
// if not tmp then
27380: LD_VAR 0 3
27384: NOT
27385: IFFALSE 27389
// exit ;
27387: GO 27445
// un := tmp [ rand ( 1 , tmp ) ] ;
27389: LD_ADDR_VAR 0 2
27393: PUSH
27394: LD_VAR 0 3
27398: PUSH
27399: LD_INT 1
27401: PPUSH
27402: LD_VAR 0 3
27406: PPUSH
27407: CALL_OW 12
27411: ARRAY
27412: ST_TO_ADDR
// if Crawls ( un ) then
27413: LD_VAR 0 2
27417: PPUSH
27418: CALL_OW 318
27422: IFFALSE 27433
// ComWalk ( un ) ;
27424: LD_VAR 0 2
27428: PPUSH
27429: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27433: LD_VAR 0 2
27437: PPUSH
27438: LD_INT 8
27440: PPUSH
27441: CALL_OW 336
// end ;
27445: PPOPN 3
27447: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27448: LD_EXP 52
27452: PUSH
27453: LD_EXP 96
27457: AND
27458: IFFALSE 27602
27460: GO 27462
27462: DISABLE
27463: LD_INT 0
27465: PPUSH
27466: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27467: LD_ADDR_VAR 0 2
27471: PUSH
27472: LD_INT 22
27474: PUSH
27475: LD_OWVAR 2
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 21
27486: PUSH
27487: LD_INT 2
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 2
27496: PUSH
27497: LD_INT 34
27499: PUSH
27500: LD_INT 12
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: LD_INT 34
27509: PUSH
27510: LD_INT 51
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 34
27519: PUSH
27520: LD_INT 32
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: LIST
27537: PPUSH
27538: CALL_OW 69
27542: ST_TO_ADDR
// if not tmp then
27543: LD_VAR 0 2
27547: NOT
27548: IFFALSE 27552
// exit ;
27550: GO 27602
// for i in tmp do
27552: LD_ADDR_VAR 0 1
27556: PUSH
27557: LD_VAR 0 2
27561: PUSH
27562: FOR_IN
27563: IFFALSE 27600
// if GetCargo ( i , mat_artifact ) = 0 then
27565: LD_VAR 0 1
27569: PPUSH
27570: LD_INT 4
27572: PPUSH
27573: CALL_OW 289
27577: PUSH
27578: LD_INT 0
27580: EQUAL
27581: IFFALSE 27598
// SetCargo ( i , mat_siberit , 100 ) ;
27583: LD_VAR 0 1
27587: PPUSH
27588: LD_INT 3
27590: PPUSH
27591: LD_INT 100
27593: PPUSH
27594: CALL_OW 290
27598: GO 27562
27600: POP
27601: POP
// end ;
27602: PPOPN 2
27604: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27605: LD_EXP 52
27609: PUSH
27610: LD_EXP 97
27614: AND
27615: IFFALSE 27798
27617: GO 27619
27619: DISABLE
27620: LD_INT 0
27622: PPUSH
27623: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27624: LD_ADDR_VAR 0 2
27628: PUSH
27629: LD_INT 22
27631: PUSH
27632: LD_OWVAR 2
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PPUSH
27641: CALL_OW 69
27645: ST_TO_ADDR
// if not tmp then
27646: LD_VAR 0 2
27650: NOT
27651: IFFALSE 27655
// exit ;
27653: GO 27798
// for i := 1 to 2 do
27655: LD_ADDR_VAR 0 1
27659: PUSH
27660: DOUBLE
27661: LD_INT 1
27663: DEC
27664: ST_TO_ADDR
27665: LD_INT 2
27667: PUSH
27668: FOR_TO
27669: IFFALSE 27796
// begin uc_side := your_side ;
27671: LD_ADDR_OWVAR 20
27675: PUSH
27676: LD_OWVAR 2
27680: ST_TO_ADDR
// uc_nation := nation_american ;
27681: LD_ADDR_OWVAR 21
27685: PUSH
27686: LD_INT 1
27688: ST_TO_ADDR
// vc_chassis := us_morphling ;
27689: LD_ADDR_OWVAR 37
27693: PUSH
27694: LD_INT 5
27696: ST_TO_ADDR
// vc_engine := engine_siberite ;
27697: LD_ADDR_OWVAR 39
27701: PUSH
27702: LD_INT 3
27704: ST_TO_ADDR
// vc_control := control_computer ;
27705: LD_ADDR_OWVAR 38
27709: PUSH
27710: LD_INT 3
27712: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27713: LD_ADDR_OWVAR 40
27717: PUSH
27718: LD_INT 10
27720: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27721: LD_VAR 0 2
27725: PUSH
27726: LD_INT 1
27728: ARRAY
27729: PPUSH
27730: CALL_OW 310
27734: NOT
27735: IFFALSE 27782
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27737: CALL_OW 45
27741: PPUSH
27742: LD_VAR 0 2
27746: PUSH
27747: LD_INT 1
27749: ARRAY
27750: PPUSH
27751: CALL_OW 250
27755: PPUSH
27756: LD_VAR 0 2
27760: PUSH
27761: LD_INT 1
27763: ARRAY
27764: PPUSH
27765: CALL_OW 251
27769: PPUSH
27770: LD_INT 12
27772: PPUSH
27773: LD_INT 1
27775: PPUSH
27776: CALL_OW 50
27780: GO 27794
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27782: CALL_OW 45
27786: PPUSH
27787: LD_INT 1
27789: PPUSH
27790: CALL_OW 51
// end ;
27794: GO 27668
27796: POP
27797: POP
// end ;
27798: PPOPN 2
27800: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27801: LD_EXP 52
27805: PUSH
27806: LD_EXP 98
27810: AND
27811: IFFALSE 28033
27813: GO 27815
27815: DISABLE
27816: LD_INT 0
27818: PPUSH
27819: PPUSH
27820: PPUSH
27821: PPUSH
27822: PPUSH
27823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27824: LD_ADDR_VAR 0 6
27828: PUSH
27829: LD_INT 22
27831: PUSH
27832: LD_OWVAR 2
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: LD_INT 21
27843: PUSH
27844: LD_INT 1
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 3
27853: PUSH
27854: LD_INT 23
27856: PUSH
27857: LD_INT 0
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: LIST
27872: PPUSH
27873: CALL_OW 69
27877: ST_TO_ADDR
// if not tmp then
27878: LD_VAR 0 6
27882: NOT
27883: IFFALSE 27887
// exit ;
27885: GO 28033
// s1 := rand ( 1 , 4 ) ;
27887: LD_ADDR_VAR 0 2
27891: PUSH
27892: LD_INT 1
27894: PPUSH
27895: LD_INT 4
27897: PPUSH
27898: CALL_OW 12
27902: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27903: LD_ADDR_VAR 0 4
27907: PUSH
27908: LD_VAR 0 6
27912: PUSH
27913: LD_INT 1
27915: ARRAY
27916: PPUSH
27917: LD_VAR 0 2
27921: PPUSH
27922: CALL_OW 259
27926: ST_TO_ADDR
// if s1 = 1 then
27927: LD_VAR 0 2
27931: PUSH
27932: LD_INT 1
27934: EQUAL
27935: IFFALSE 27955
// s2 := rand ( 2 , 4 ) else
27937: LD_ADDR_VAR 0 3
27941: PUSH
27942: LD_INT 2
27944: PPUSH
27945: LD_INT 4
27947: PPUSH
27948: CALL_OW 12
27952: ST_TO_ADDR
27953: GO 27963
// s2 := 1 ;
27955: LD_ADDR_VAR 0 3
27959: PUSH
27960: LD_INT 1
27962: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27963: LD_ADDR_VAR 0 5
27967: PUSH
27968: LD_VAR 0 6
27972: PUSH
27973: LD_INT 1
27975: ARRAY
27976: PPUSH
27977: LD_VAR 0 3
27981: PPUSH
27982: CALL_OW 259
27986: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27987: LD_VAR 0 6
27991: PUSH
27992: LD_INT 1
27994: ARRAY
27995: PPUSH
27996: LD_VAR 0 2
28000: PPUSH
28001: LD_VAR 0 5
28005: PPUSH
28006: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28010: LD_VAR 0 6
28014: PUSH
28015: LD_INT 1
28017: ARRAY
28018: PPUSH
28019: LD_VAR 0 3
28023: PPUSH
28024: LD_VAR 0 4
28028: PPUSH
28029: CALL_OW 237
// end ;
28033: PPOPN 6
28035: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28036: LD_EXP 52
28040: PUSH
28041: LD_EXP 99
28045: AND
28046: IFFALSE 28125
28048: GO 28050
28050: DISABLE
28051: LD_INT 0
28053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28054: LD_ADDR_VAR 0 1
28058: PUSH
28059: LD_INT 22
28061: PUSH
28062: LD_OWVAR 2
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 30
28073: PUSH
28074: LD_INT 3
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PPUSH
28085: CALL_OW 69
28089: ST_TO_ADDR
// if not tmp then
28090: LD_VAR 0 1
28094: NOT
28095: IFFALSE 28099
// exit ;
28097: GO 28125
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28099: LD_VAR 0 1
28103: PUSH
28104: LD_INT 1
28106: PPUSH
28107: LD_VAR 0 1
28111: PPUSH
28112: CALL_OW 12
28116: ARRAY
28117: PPUSH
28118: LD_INT 1
28120: PPUSH
28121: CALL_OW 234
// end ;
28125: PPOPN 1
28127: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28128: LD_EXP 52
28132: PUSH
28133: LD_EXP 100
28137: AND
28138: IFFALSE 28250
28140: GO 28142
28142: DISABLE
28143: LD_INT 0
28145: PPUSH
28146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28147: LD_ADDR_VAR 0 2
28151: PUSH
28152: LD_INT 22
28154: PUSH
28155: LD_OWVAR 2
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: LD_INT 2
28166: PUSH
28167: LD_INT 30
28169: PUSH
28170: LD_INT 27
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 30
28179: PUSH
28180: LD_INT 26
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 30
28189: PUSH
28190: LD_INT 28
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PPUSH
28207: CALL_OW 69
28211: ST_TO_ADDR
// if not tmp then
28212: LD_VAR 0 2
28216: NOT
28217: IFFALSE 28221
// exit ;
28219: GO 28250
// for i in tmp do
28221: LD_ADDR_VAR 0 1
28225: PUSH
28226: LD_VAR 0 2
28230: PUSH
28231: FOR_IN
28232: IFFALSE 28248
// SetLives ( i , 1 ) ;
28234: LD_VAR 0 1
28238: PPUSH
28239: LD_INT 1
28241: PPUSH
28242: CALL_OW 234
28246: GO 28231
28248: POP
28249: POP
// end ;
28250: PPOPN 2
28252: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28253: LD_EXP 52
28257: PUSH
28258: LD_EXP 101
28262: AND
28263: IFFALSE 28537
28265: GO 28267
28267: DISABLE
28268: LD_INT 0
28270: PPUSH
28271: PPUSH
28272: PPUSH
// begin i := rand ( 1 , 7 ) ;
28273: LD_ADDR_VAR 0 1
28277: PUSH
28278: LD_INT 1
28280: PPUSH
28281: LD_INT 7
28283: PPUSH
28284: CALL_OW 12
28288: ST_TO_ADDR
// case i of 1 :
28289: LD_VAR 0 1
28293: PUSH
28294: LD_INT 1
28296: DOUBLE
28297: EQUAL
28298: IFTRUE 28302
28300: GO 28312
28302: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28303: LD_STRING earthquake(getX(game), 0, 32)
28305: PPUSH
28306: CALL_OW 559
28310: GO 28537
28312: LD_INT 2
28314: DOUBLE
28315: EQUAL
28316: IFTRUE 28320
28318: GO 28334
28320: POP
// begin ToLua ( displayStucuk(); ) ;
28321: LD_STRING displayStucuk();
28323: PPUSH
28324: CALL_OW 559
// ResetFog ;
28328: CALL_OW 335
// end ; 3 :
28332: GO 28537
28334: LD_INT 3
28336: DOUBLE
28337: EQUAL
28338: IFTRUE 28342
28340: GO 28446
28342: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28343: LD_ADDR_VAR 0 2
28347: PUSH
28348: LD_INT 22
28350: PUSH
28351: LD_OWVAR 2
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 25
28362: PUSH
28363: LD_INT 1
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PPUSH
28374: CALL_OW 69
28378: ST_TO_ADDR
// if not tmp then
28379: LD_VAR 0 2
28383: NOT
28384: IFFALSE 28388
// exit ;
28386: GO 28537
// un := tmp [ rand ( 1 , tmp ) ] ;
28388: LD_ADDR_VAR 0 3
28392: PUSH
28393: LD_VAR 0 2
28397: PUSH
28398: LD_INT 1
28400: PPUSH
28401: LD_VAR 0 2
28405: PPUSH
28406: CALL_OW 12
28410: ARRAY
28411: ST_TO_ADDR
// if Crawls ( un ) then
28412: LD_VAR 0 3
28416: PPUSH
28417: CALL_OW 318
28421: IFFALSE 28432
// ComWalk ( un ) ;
28423: LD_VAR 0 3
28427: PPUSH
28428: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28432: LD_VAR 0 3
28436: PPUSH
28437: LD_INT 8
28439: PPUSH
28440: CALL_OW 336
// end ; 4 :
28444: GO 28537
28446: LD_INT 4
28448: DOUBLE
28449: EQUAL
28450: IFTRUE 28454
28452: GO 28515
28454: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28455: LD_ADDR_VAR 0 2
28459: PUSH
28460: LD_INT 22
28462: PUSH
28463: LD_OWVAR 2
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 30
28474: PUSH
28475: LD_INT 29
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PPUSH
28486: CALL_OW 69
28490: ST_TO_ADDR
// if not tmp then
28491: LD_VAR 0 2
28495: NOT
28496: IFFALSE 28500
// exit ;
28498: GO 28537
// DestroyUnit ( tmp [ 1 ] ) ;
28500: LD_VAR 0 2
28504: PUSH
28505: LD_INT 1
28507: ARRAY
28508: PPUSH
28509: CALL_OW 65
// end ; 5 .. 7 :
28513: GO 28537
28515: LD_INT 5
28517: DOUBLE
28518: GREATEREQUAL
28519: IFFALSE 28527
28521: LD_INT 7
28523: DOUBLE
28524: LESSEQUAL
28525: IFTRUE 28529
28527: GO 28536
28529: POP
// StreamSibBomb ; end ;
28530: CALL 24787 0 0
28534: GO 28537
28536: POP
// end ;
28537: PPOPN 3
28539: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28540: LD_EXP 52
28544: PUSH
28545: LD_EXP 102
28549: AND
28550: IFFALSE 28706
28552: GO 28554
28554: DISABLE
28555: LD_INT 0
28557: PPUSH
28558: PPUSH
28559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28560: LD_ADDR_VAR 0 2
28564: PUSH
28565: LD_INT 81
28567: PUSH
28568: LD_OWVAR 2
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 2
28579: PUSH
28580: LD_INT 21
28582: PUSH
28583: LD_INT 1
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: LD_INT 21
28592: PUSH
28593: LD_INT 2
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: LIST
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PPUSH
28609: CALL_OW 69
28613: ST_TO_ADDR
// if not tmp then
28614: LD_VAR 0 2
28618: NOT
28619: IFFALSE 28623
// exit ;
28621: GO 28706
// p := 0 ;
28623: LD_ADDR_VAR 0 3
28627: PUSH
28628: LD_INT 0
28630: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28631: LD_INT 35
28633: PPUSH
28634: CALL_OW 67
// p := p + 1 ;
28638: LD_ADDR_VAR 0 3
28642: PUSH
28643: LD_VAR 0 3
28647: PUSH
28648: LD_INT 1
28650: PLUS
28651: ST_TO_ADDR
// for i in tmp do
28652: LD_ADDR_VAR 0 1
28656: PUSH
28657: LD_VAR 0 2
28661: PUSH
28662: FOR_IN
28663: IFFALSE 28694
// if GetLives ( i ) < 1000 then
28665: LD_VAR 0 1
28669: PPUSH
28670: CALL_OW 256
28674: PUSH
28675: LD_INT 1000
28677: LESS
28678: IFFALSE 28692
// SetLives ( i , 1000 ) ;
28680: LD_VAR 0 1
28684: PPUSH
28685: LD_INT 1000
28687: PPUSH
28688: CALL_OW 234
28692: GO 28662
28694: POP
28695: POP
// until p > 20 ;
28696: LD_VAR 0 3
28700: PUSH
28701: LD_INT 20
28703: GREATER
28704: IFFALSE 28631
// end ;
28706: PPOPN 3
28708: END
// every 0 0$1 trigger StreamModeActive and sTime do
28709: LD_EXP 52
28713: PUSH
28714: LD_EXP 103
28718: AND
28719: IFFALSE 28754
28721: GO 28723
28723: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28724: LD_INT 28
28726: PPUSH
28727: LD_OWVAR 2
28731: PPUSH
28732: LD_INT 2
28734: PPUSH
28735: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28739: LD_INT 30
28741: PPUSH
28742: LD_OWVAR 2
28746: PPUSH
28747: LD_INT 2
28749: PPUSH
28750: CALL_OW 322
// end ;
28754: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28755: LD_EXP 52
28759: PUSH
28760: LD_EXP 104
28764: AND
28765: IFFALSE 28886
28767: GO 28769
28769: DISABLE
28770: LD_INT 0
28772: PPUSH
28773: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28774: LD_ADDR_VAR 0 2
28778: PUSH
28779: LD_INT 22
28781: PUSH
28782: LD_OWVAR 2
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 21
28793: PUSH
28794: LD_INT 1
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 3
28803: PUSH
28804: LD_INT 23
28806: PUSH
28807: LD_INT 0
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: LIST
28822: PPUSH
28823: CALL_OW 69
28827: ST_TO_ADDR
// if not tmp then
28828: LD_VAR 0 2
28832: NOT
28833: IFFALSE 28837
// exit ;
28835: GO 28886
// for i in tmp do
28837: LD_ADDR_VAR 0 1
28841: PUSH
28842: LD_VAR 0 2
28846: PUSH
28847: FOR_IN
28848: IFFALSE 28884
// begin if Crawls ( i ) then
28850: LD_VAR 0 1
28854: PPUSH
28855: CALL_OW 318
28859: IFFALSE 28870
// ComWalk ( i ) ;
28861: LD_VAR 0 1
28865: PPUSH
28866: CALL_OW 138
// SetClass ( i , 2 ) ;
28870: LD_VAR 0 1
28874: PPUSH
28875: LD_INT 2
28877: PPUSH
28878: CALL_OW 336
// end ;
28882: GO 28847
28884: POP
28885: POP
// end ;
28886: PPOPN 2
28888: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28889: LD_EXP 52
28893: PUSH
28894: LD_EXP 105
28898: AND
28899: IFFALSE 29180
28901: GO 28903
28903: DISABLE
28904: LD_INT 0
28906: PPUSH
28907: PPUSH
28908: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28909: LD_OWVAR 2
28913: PPUSH
28914: LD_INT 9
28916: PPUSH
28917: LD_INT 1
28919: PPUSH
28920: LD_INT 1
28922: PPUSH
28923: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28927: LD_INT 9
28929: PPUSH
28930: LD_OWVAR 2
28934: PPUSH
28935: CALL_OW 343
// uc_side := 9 ;
28939: LD_ADDR_OWVAR 20
28943: PUSH
28944: LD_INT 9
28946: ST_TO_ADDR
// uc_nation := 2 ;
28947: LD_ADDR_OWVAR 21
28951: PUSH
28952: LD_INT 2
28954: ST_TO_ADDR
// hc_name := Dark Warrior ;
28955: LD_ADDR_OWVAR 26
28959: PUSH
28960: LD_STRING Dark Warrior
28962: ST_TO_ADDR
// hc_gallery :=  ;
28963: LD_ADDR_OWVAR 33
28967: PUSH
28968: LD_STRING 
28970: ST_TO_ADDR
// hc_noskilllimit := true ;
28971: LD_ADDR_OWVAR 76
28975: PUSH
28976: LD_INT 1
28978: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28979: LD_ADDR_OWVAR 31
28983: PUSH
28984: LD_INT 30
28986: PUSH
28987: LD_INT 30
28989: PUSH
28990: LD_INT 30
28992: PUSH
28993: LD_INT 30
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: ST_TO_ADDR
// un := CreateHuman ;
29002: LD_ADDR_VAR 0 3
29006: PUSH
29007: CALL_OW 44
29011: ST_TO_ADDR
// hc_noskilllimit := false ;
29012: LD_ADDR_OWVAR 76
29016: PUSH
29017: LD_INT 0
29019: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29020: LD_VAR 0 3
29024: PPUSH
29025: LD_INT 1
29027: PPUSH
29028: CALL_OW 51
// p := 0 ;
29032: LD_ADDR_VAR 0 2
29036: PUSH
29037: LD_INT 0
29039: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29040: LD_INT 35
29042: PPUSH
29043: CALL_OW 67
// p := p + 1 ;
29047: LD_ADDR_VAR 0 2
29051: PUSH
29052: LD_VAR 0 2
29056: PUSH
29057: LD_INT 1
29059: PLUS
29060: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29061: LD_VAR 0 3
29065: PPUSH
29066: CALL_OW 256
29070: PUSH
29071: LD_INT 1000
29073: LESS
29074: IFFALSE 29088
// SetLives ( un , 1000 ) ;
29076: LD_VAR 0 3
29080: PPUSH
29081: LD_INT 1000
29083: PPUSH
29084: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29088: LD_VAR 0 3
29092: PPUSH
29093: LD_INT 81
29095: PUSH
29096: LD_OWVAR 2
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 91
29107: PUSH
29108: LD_VAR 0 3
29112: PUSH
29113: LD_INT 30
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: LIST
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PPUSH
29125: CALL_OW 69
29129: PPUSH
29130: LD_VAR 0 3
29134: PPUSH
29135: CALL_OW 74
29139: PPUSH
29140: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
29144: LD_VAR 0 2
29148: PUSH
29149: LD_INT 60
29151: GREATER
29152: PUSH
29153: LD_VAR 0 3
29157: PPUSH
29158: CALL_OW 301
29162: OR
29163: IFFALSE 29040
// if un then
29165: LD_VAR 0 3
29169: IFFALSE 29180
// RemoveUnit ( un ) ;
29171: LD_VAR 0 3
29175: PPUSH
29176: CALL_OW 64
// end ;
29180: PPOPN 3
29182: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29183: LD_INT 0
29185: PPUSH
29186: PPUSH
29187: PPUSH
29188: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29189: LD_ADDR_VAR 0 4
29193: PUSH
29194: LD_INT 22
29196: PUSH
29197: LD_OWVAR 2
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: LD_INT 2
29208: PUSH
29209: LD_INT 30
29211: PUSH
29212: LD_INT 0
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 30
29221: PUSH
29222: LD_INT 1
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: LIST
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PPUSH
29238: CALL_OW 69
29242: ST_TO_ADDR
// if not tmp then
29243: LD_VAR 0 4
29247: NOT
29248: IFFALSE 29252
// exit ;
29250: GO 29311
// for i in tmp do
29252: LD_ADDR_VAR 0 2
29256: PUSH
29257: LD_VAR 0 4
29261: PUSH
29262: FOR_IN
29263: IFFALSE 29309
// for j = 1 to 3 do
29265: LD_ADDR_VAR 0 3
29269: PUSH
29270: DOUBLE
29271: LD_INT 1
29273: DEC
29274: ST_TO_ADDR
29275: LD_INT 3
29277: PUSH
29278: FOR_TO
29279: IFFALSE 29305
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29281: LD_VAR 0 2
29285: PPUSH
29286: CALL_OW 274
29290: PPUSH
29291: LD_VAR 0 3
29295: PPUSH
29296: LD_INT 99999
29298: PPUSH
29299: CALL_OW 277
29303: GO 29278
29305: POP
29306: POP
29307: GO 29262
29309: POP
29310: POP
// end ;
29311: LD_VAR 0 1
29315: RET
// export function hHackSetLevel10 ; var i , j ; begin
29316: LD_INT 0
29318: PPUSH
29319: PPUSH
29320: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29321: LD_ADDR_VAR 0 2
29325: PUSH
29326: LD_INT 21
29328: PUSH
29329: LD_INT 1
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PPUSH
29336: CALL_OW 69
29340: PUSH
29341: FOR_IN
29342: IFFALSE 29394
// if IsSelected ( i ) then
29344: LD_VAR 0 2
29348: PPUSH
29349: CALL_OW 306
29353: IFFALSE 29392
// begin for j := 1 to 4 do
29355: LD_ADDR_VAR 0 3
29359: PUSH
29360: DOUBLE
29361: LD_INT 1
29363: DEC
29364: ST_TO_ADDR
29365: LD_INT 4
29367: PUSH
29368: FOR_TO
29369: IFFALSE 29390
// SetSkill ( i , j , 10 ) ;
29371: LD_VAR 0 2
29375: PPUSH
29376: LD_VAR 0 3
29380: PPUSH
29381: LD_INT 10
29383: PPUSH
29384: CALL_OW 237
29388: GO 29368
29390: POP
29391: POP
// end ;
29392: GO 29341
29394: POP
29395: POP
// end ;
29396: LD_VAR 0 1
29400: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29401: LD_INT 0
29403: PPUSH
29404: PPUSH
29405: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29406: LD_ADDR_VAR 0 2
29410: PUSH
29411: LD_INT 22
29413: PUSH
29414: LD_OWVAR 2
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 21
29425: PUSH
29426: LD_INT 1
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PPUSH
29437: CALL_OW 69
29441: PUSH
29442: FOR_IN
29443: IFFALSE 29484
// begin for j := 1 to 4 do
29445: LD_ADDR_VAR 0 3
29449: PUSH
29450: DOUBLE
29451: LD_INT 1
29453: DEC
29454: ST_TO_ADDR
29455: LD_INT 4
29457: PUSH
29458: FOR_TO
29459: IFFALSE 29480
// SetSkill ( i , j , 10 ) ;
29461: LD_VAR 0 2
29465: PPUSH
29466: LD_VAR 0 3
29470: PPUSH
29471: LD_INT 10
29473: PPUSH
29474: CALL_OW 237
29478: GO 29458
29480: POP
29481: POP
// end ;
29482: GO 29442
29484: POP
29485: POP
// end ;
29486: LD_VAR 0 1
29490: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
29491: LD_INT 0
29493: PPUSH
// uc_side := your_side ;
29494: LD_ADDR_OWVAR 20
29498: PUSH
29499: LD_OWVAR 2
29503: ST_TO_ADDR
// uc_nation := nation ;
29504: LD_ADDR_OWVAR 21
29508: PUSH
29509: LD_VAR 0 1
29513: ST_TO_ADDR
// InitHc ;
29514: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29518: LD_INT 0
29520: PPUSH
29521: LD_VAR 0 2
29525: PPUSH
29526: LD_VAR 0 3
29530: PPUSH
29531: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
29535: CALL_OW 44
29539: PPUSH
29540: LD_INT 1
29542: PPUSH
29543: CALL_OW 51
// end ;
29547: LD_VAR 0 4
29551: RET
// export function hHackSpawnVehicle ; begin
29552: LD_INT 0
29554: PPUSH
// uc_side := your_side ;
29555: LD_ADDR_OWVAR 20
29559: PUSH
29560: LD_OWVAR 2
29564: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
29565: LD_ADDR_OWVAR 21
29569: PUSH
29570: LD_INT 1
29572: PPUSH
29573: LD_INT 3
29575: PPUSH
29576: CALL_OW 12
29580: ST_TO_ADDR
// InitVc ;
29581: CALL_OW 20
// case uc_nation of 1 :
29585: LD_OWVAR 21
29589: PUSH
29590: LD_INT 1
29592: DOUBLE
29593: EQUAL
29594: IFTRUE 29598
29596: GO 29742
29598: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
29599: LD_ADDR_OWVAR 37
29603: PUSH
29604: LD_INT 1
29606: PUSH
29607: LD_INT 2
29609: PUSH
29610: LD_INT 3
29612: PUSH
29613: LD_INT 4
29615: PUSH
29616: LD_INT 5
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: PUSH
29626: LD_INT 1
29628: PPUSH
29629: LD_INT 5
29631: PPUSH
29632: CALL_OW 12
29636: ARRAY
29637: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
29638: LD_ADDR_OWVAR 39
29642: PUSH
29643: LD_INT 1
29645: PPUSH
29646: LD_INT 3
29648: PPUSH
29649: CALL_OW 12
29653: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
29654: LD_ADDR_OWVAR 38
29658: PUSH
29659: LD_INT 1
29661: PUSH
29662: LD_INT 2
29664: PUSH
29665: LD_INT 3
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 1
29675: PPUSH
29676: LD_INT 3
29678: PPUSH
29679: CALL_OW 12
29683: ARRAY
29684: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
29685: LD_ADDR_OWVAR 40
29689: PUSH
29690: LD_INT 2
29692: PUSH
29693: LD_INT 4
29695: PUSH
29696: LD_INT 5
29698: PUSH
29699: LD_INT 3
29701: PUSH
29702: LD_INT 7
29704: PUSH
29705: LD_INT 8
29707: PUSH
29708: LD_INT 9
29710: PUSH
29711: LD_INT 10
29713: PUSH
29714: LD_INT 6
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 1
29730: PPUSH
29731: LD_INT 9
29733: PPUSH
29734: CALL_OW 12
29738: ARRAY
29739: ST_TO_ADDR
// end ; 2 :
29740: GO 30007
29742: LD_INT 2
29744: DOUBLE
29745: EQUAL
29746: IFTRUE 29750
29748: GO 29874
29750: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
29751: LD_ADDR_OWVAR 37
29755: PUSH
29756: LD_INT 11
29758: PUSH
29759: LD_INT 12
29761: PUSH
29762: LD_INT 13
29764: PUSH
29765: LD_INT 14
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 1
29776: PPUSH
29777: LD_INT 4
29779: PPUSH
29780: CALL_OW 12
29784: ARRAY
29785: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
29786: LD_ADDR_OWVAR 39
29790: PUSH
29791: LD_INT 1
29793: PPUSH
29794: LD_INT 3
29796: PPUSH
29797: CALL_OW 12
29801: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
29802: LD_ADDR_OWVAR 38
29806: PUSH
29807: LD_INT 1
29809: PUSH
29810: LD_INT 2
29812: PUSH
29813: LD_INT 5
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 1
29823: PPUSH
29824: LD_INT 3
29826: PPUSH
29827: CALL_OW 12
29831: ARRAY
29832: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
29833: LD_ADDR_OWVAR 40
29837: PUSH
29838: LD_INT 24
29840: PUSH
29841: LD_INT 26
29843: PUSH
29844: LD_INT 27
29846: PUSH
29847: LD_INT 28
29849: PUSH
29850: LD_INT 29
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 1
29862: PPUSH
29863: LD_INT 5
29865: PPUSH
29866: CALL_OW 12
29870: ARRAY
29871: ST_TO_ADDR
// end ; 3 :
29872: GO 30007
29874: LD_INT 3
29876: DOUBLE
29877: EQUAL
29878: IFTRUE 29882
29880: GO 30006
29882: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
29883: LD_ADDR_OWVAR 37
29887: PUSH
29888: LD_INT 21
29890: PUSH
29891: LD_INT 23
29893: PUSH
29894: LD_INT 22
29896: PUSH
29897: LD_INT 24
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 1
29908: PPUSH
29909: LD_INT 4
29911: PPUSH
29912: CALL_OW 12
29916: ARRAY
29917: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
29918: LD_ADDR_OWVAR 39
29922: PUSH
29923: LD_INT 1
29925: PPUSH
29926: LD_INT 3
29928: PPUSH
29929: CALL_OW 12
29933: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
29934: LD_ADDR_OWVAR 38
29938: PUSH
29939: LD_INT 1
29941: PUSH
29942: LD_INT 3
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 1
29951: PPUSH
29952: LD_INT 2
29954: PPUSH
29955: CALL_OW 12
29959: ARRAY
29960: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
29961: LD_ADDR_OWVAR 40
29965: PUSH
29966: LD_INT 42
29968: PUSH
29969: LD_INT 43
29971: PUSH
29972: LD_INT 44
29974: PUSH
29975: LD_INT 46
29977: PUSH
29978: LD_INT 48
29980: PUSH
29981: LD_INT 47
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 1
29994: PPUSH
29995: LD_INT 6
29997: PPUSH
29998: CALL_OW 12
30002: ARRAY
30003: ST_TO_ADDR
// end ; end ;
30004: GO 30007
30006: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30007: CALL_OW 45
30011: PPUSH
30012: LD_INT 1
30014: PPUSH
30015: CALL_OW 51
// end ;
30019: LD_VAR 0 1
30023: RET
// export hInvincible ; every 1 do
30024: GO 30026
30026: DISABLE
// hInvincible := [ ] ;
30027: LD_ADDR_EXP 106
30031: PUSH
30032: EMPTY
30033: ST_TO_ADDR
30034: END
// every 10 do var i ;
30035: GO 30037
30037: DISABLE
30038: LD_INT 0
30040: PPUSH
// begin enable ;
30041: ENABLE
// if not hInvincible then
30042: LD_EXP 106
30046: NOT
30047: IFFALSE 30051
// exit ;
30049: GO 30095
// for i in hInvincible do
30051: LD_ADDR_VAR 0 1
30055: PUSH
30056: LD_EXP 106
30060: PUSH
30061: FOR_IN
30062: IFFALSE 30093
// if GetLives ( i ) < 1000 then
30064: LD_VAR 0 1
30068: PPUSH
30069: CALL_OW 256
30073: PUSH
30074: LD_INT 1000
30076: LESS
30077: IFFALSE 30091
// SetLives ( i , 1000 ) ;
30079: LD_VAR 0 1
30083: PPUSH
30084: LD_INT 1000
30086: PPUSH
30087: CALL_OW 234
30091: GO 30061
30093: POP
30094: POP
// end ;
30095: PPOPN 1
30097: END
// export function hHackInvincible ; var i ; begin
30098: LD_INT 0
30100: PPUSH
30101: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30102: LD_ADDR_VAR 0 2
30106: PUSH
30107: LD_INT 2
30109: PUSH
30110: LD_INT 21
30112: PUSH
30113: LD_INT 1
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 21
30122: PUSH
30123: LD_INT 2
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: LIST
30134: PPUSH
30135: CALL_OW 69
30139: PUSH
30140: FOR_IN
30141: IFFALSE 30202
// if IsSelected ( i ) then
30143: LD_VAR 0 2
30147: PPUSH
30148: CALL_OW 306
30152: IFFALSE 30200
// begin if i in hInvincible then
30154: LD_VAR 0 2
30158: PUSH
30159: LD_EXP 106
30163: IN
30164: IFFALSE 30184
// hInvincible := hInvincible diff i else
30166: LD_ADDR_EXP 106
30170: PUSH
30171: LD_EXP 106
30175: PUSH
30176: LD_VAR 0 2
30180: DIFF
30181: ST_TO_ADDR
30182: GO 30200
// hInvincible := hInvincible union i ;
30184: LD_ADDR_EXP 106
30188: PUSH
30189: LD_EXP 106
30193: PUSH
30194: LD_VAR 0 2
30198: UNION
30199: ST_TO_ADDR
// end ;
30200: GO 30140
30202: POP
30203: POP
// end ;
30204: LD_VAR 0 1
30208: RET
// export function hHackInvisible ; var i , j ; begin
30209: LD_INT 0
30211: PPUSH
30212: PPUSH
30213: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30214: LD_ADDR_VAR 0 2
30218: PUSH
30219: LD_INT 21
30221: PUSH
30222: LD_INT 1
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PPUSH
30229: CALL_OW 69
30233: PUSH
30234: FOR_IN
30235: IFFALSE 30259
// if IsSelected ( i ) then
30237: LD_VAR 0 2
30241: PPUSH
30242: CALL_OW 306
30246: IFFALSE 30257
// ComForceInvisible ( i ) ;
30248: LD_VAR 0 2
30252: PPUSH
30253: CALL_OW 496
30257: GO 30234
30259: POP
30260: POP
// end ;
30261: LD_VAR 0 1
30265: RET
// export function hHackChangeYourSide ; begin
30266: LD_INT 0
30268: PPUSH
// if your_side = 8 then
30269: LD_OWVAR 2
30273: PUSH
30274: LD_INT 8
30276: EQUAL
30277: IFFALSE 30289
// your_side := 0 else
30279: LD_ADDR_OWVAR 2
30283: PUSH
30284: LD_INT 0
30286: ST_TO_ADDR
30287: GO 30303
// your_side := your_side + 1 ;
30289: LD_ADDR_OWVAR 2
30293: PUSH
30294: LD_OWVAR 2
30298: PUSH
30299: LD_INT 1
30301: PLUS
30302: ST_TO_ADDR
// end ;
30303: LD_VAR 0 1
30307: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30308: LD_INT 0
30310: PPUSH
30311: PPUSH
30312: PPUSH
// for i in all_units do
30313: LD_ADDR_VAR 0 2
30317: PUSH
30318: LD_OWVAR 3
30322: PUSH
30323: FOR_IN
30324: IFFALSE 30402
// if IsSelected ( i ) then
30326: LD_VAR 0 2
30330: PPUSH
30331: CALL_OW 306
30335: IFFALSE 30400
// begin j := GetSide ( i ) ;
30337: LD_ADDR_VAR 0 3
30341: PUSH
30342: LD_VAR 0 2
30346: PPUSH
30347: CALL_OW 255
30351: ST_TO_ADDR
// if j = 8 then
30352: LD_VAR 0 3
30356: PUSH
30357: LD_INT 8
30359: EQUAL
30360: IFFALSE 30372
// j := 0 else
30362: LD_ADDR_VAR 0 3
30366: PUSH
30367: LD_INT 0
30369: ST_TO_ADDR
30370: GO 30386
// j := j + 1 ;
30372: LD_ADDR_VAR 0 3
30376: PUSH
30377: LD_VAR 0 3
30381: PUSH
30382: LD_INT 1
30384: PLUS
30385: ST_TO_ADDR
// SetSide ( i , j ) ;
30386: LD_VAR 0 2
30390: PPUSH
30391: LD_VAR 0 3
30395: PPUSH
30396: CALL_OW 235
// end ;
30400: GO 30323
30402: POP
30403: POP
// end ;
30404: LD_VAR 0 1
30408: RET
// export function hHackFog ; begin
30409: LD_INT 0
30411: PPUSH
// FogOff ( true ) ;
30412: LD_INT 1
30414: PPUSH
30415: CALL_OW 344
// end ;
30419: LD_VAR 0 1
30423: RET
// export function hHackApeman ; begin
30424: LD_INT 0
30426: PPUSH
// uc_side := your_side ;
30427: LD_ADDR_OWVAR 20
30431: PUSH
30432: LD_OWVAR 2
30436: ST_TO_ADDR
// uc_nation := 0 ;
30437: LD_ADDR_OWVAR 21
30441: PUSH
30442: LD_INT 0
30444: ST_TO_ADDR
// hc_name :=  ;
30445: LD_ADDR_OWVAR 26
30449: PUSH
30450: LD_STRING 
30452: ST_TO_ADDR
// hc_gallery :=  ;
30453: LD_ADDR_OWVAR 33
30457: PUSH
30458: LD_STRING 
30460: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
30461: LD_ADDR_OWVAR 31
30465: PUSH
30466: LD_INT 0
30468: PUSH
30469: LD_INT 0
30471: PUSH
30472: LD_INT 0
30474: PUSH
30475: LD_INT 0
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: ST_TO_ADDR
// hc_class := class_apeman ;
30484: LD_ADDR_OWVAR 28
30488: PUSH
30489: LD_INT 12
30491: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
30492: CALL_OW 44
30496: PPUSH
30497: LD_INT 1
30499: PPUSH
30500: CALL_OW 51
// end ;
30504: LD_VAR 0 1
30508: RET
// export function hHackBoom ; begin
30509: LD_INT 0
30511: PPUSH
// uc_side := your_side ;
30512: LD_ADDR_OWVAR 20
30516: PUSH
30517: LD_OWVAR 2
30521: ST_TO_ADDR
// uc_nation := 1 ;
30522: LD_ADDR_OWVAR 21
30526: PUSH
30527: LD_INT 1
30529: ST_TO_ADDR
// vc_chassis := us_morphling ;
30530: LD_ADDR_OWVAR 37
30534: PUSH
30535: LD_INT 5
30537: ST_TO_ADDR
// vc_engine := engine_siberite ;
30538: LD_ADDR_OWVAR 39
30542: PUSH
30543: LD_INT 3
30545: ST_TO_ADDR
// vc_control := control_computer ;
30546: LD_ADDR_OWVAR 38
30550: PUSH
30551: LD_INT 3
30553: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
30554: LD_ADDR_OWVAR 40
30558: PUSH
30559: LD_INT 8
30561: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30562: CALL_OW 45
30566: PPUSH
30567: LD_INT 1
30569: PPUSH
30570: CALL_OW 51
// end ;
30574: LD_VAR 0 1
30578: RET
