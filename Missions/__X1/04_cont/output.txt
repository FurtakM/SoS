// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// CreateNature ;
   8: CALL 861 0 0
// PrepareArabian ;
  12: CALL 1237 0 0
// PrepareAmerican ;
  16: CALL 6868 0 0
// PrepareRussian ;
  20: CALL 2225 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 8438 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured , cargoRecycled ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 30 30$00 , 27 27$00 , 25 25$00 , 23 23$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 63000
 188: PUSH
 189: LD_INT 56700
 191: PUSH
 192: LD_INT 52500
 194: PUSH
 195: LD_INT 48300
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// escapeCounter := 0 ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// loseCounter := 0 ;
 218: LD_ADDR_EXP 14
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// labCaptured := false ;
 226: LD_ADDR_EXP 21
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// hillBase := false ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 242: LD_ADDR_EXP 8
 246: PUSH
 247: LD_INT 3
 249: PUSH
 250: LD_INT 4
 252: PUSH
 253: LD_INT 5
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 7
 261: PUSH
 262: LD_INT 8
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 273: LD_ADDR_EXP 23
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// kaganCaptured := false ;
 281: LD_ADDR_EXP 24
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// cargoRecycled := LoadVariable ( 03_CargoRecycled , false ) ;
 289: LD_ADDR_EXP 25
 293: PUSH
 294: LD_STRING 03_CargoRecycled
 296: PPUSH
 297: LD_INT 0
 299: PPUSH
 300: CALL_OW 30
 304: ST_TO_ADDR
// end ;
 305: LD_VAR 0 1
 309: RET
// every 0 0$1 trigger debug do var i ;
 310: LD_EXP 1
 314: IFFALSE 383
 316: GO 318
 318: DISABLE
 319: LD_INT 0
 321: PPUSH
// begin enable ;
 322: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 323: LD_ADDR_VAR 0 1
 327: PUSH
 328: LD_INT 22
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 3
 340: PUSH
 341: LD_INT 21
 343: PUSH
 344: LD_INT 3
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: PPUSH
 359: CALL_OW 69
 363: PUSH
 364: FOR_IN
 365: IFFALSE 381
// SetLives ( i , 1000 ) ;
 367: LD_VAR 0 1
 371: PPUSH
 372: LD_INT 1000
 374: PPUSH
 375: CALL_OW 234
 379: GO 364
 381: POP
 382: POP
// end ; end_of_file
 383: PPOPN 1
 385: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 386: LD_INT 0
 388: PPUSH
// uc_side := side ;
 389: LD_ADDR_OWVAR 20
 393: PUSH
 394: LD_VAR 0 1
 398: ST_TO_ADDR
// uc_nation := nation ;
 399: LD_ADDR_OWVAR 21
 403: PUSH
 404: LD_VAR 0 2
 408: ST_TO_ADDR
// vc_chassis := chassis ;
 409: LD_ADDR_OWVAR 37
 413: PUSH
 414: LD_VAR 0 3
 418: ST_TO_ADDR
// vc_engine := engine ;
 419: LD_ADDR_OWVAR 39
 423: PUSH
 424: LD_VAR 0 4
 428: ST_TO_ADDR
// vc_control := control ;
 429: LD_ADDR_OWVAR 38
 433: PUSH
 434: LD_VAR 0 5
 438: ST_TO_ADDR
// vc_weapon := weapon ;
 439: LD_ADDR_OWVAR 40
 443: PUSH
 444: LD_VAR 0 6
 448: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 449: LD_ADDR_OWVAR 41
 453: PUSH
 454: LD_VAR 0 7
 458: ST_TO_ADDR
// result := CreateVehicle ;
 459: LD_ADDR_VAR 0 8
 463: PUSH
 464: CALL_OW 45
 468: ST_TO_ADDR
// end ;
 469: LD_VAR 0 8
 473: RET
// export function SayX ( units , ident ) ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// result := false ;
 478: LD_ADDR_VAR 0 3
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// if not units then
 486: LD_VAR 0 1
 490: NOT
 491: IFFALSE 495
// exit ;
 493: GO 549
// for i in units do
 495: LD_ADDR_VAR 0 4
 499: PUSH
 500: LD_VAR 0 1
 504: PUSH
 505: FOR_IN
 506: IFFALSE 547
// if IsOk ( i ) then
 508: LD_VAR 0 4
 512: PPUSH
 513: CALL_OW 302
 517: IFFALSE 545
// begin Say ( i , ident ) ;
 519: LD_VAR 0 4
 523: PPUSH
 524: LD_VAR 0 2
 528: PPUSH
 529: CALL_OW 88
// result := i ;
 533: LD_ADDR_VAR 0 3
 537: PUSH
 538: LD_VAR 0 4
 542: ST_TO_ADDR
// break ;
 543: GO 547
// end ;
 545: GO 505
 547: POP
 548: POP
// end ;
 549: LD_VAR 0 3
 553: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 554: LD_INT 0
 556: PPUSH
 557: PPUSH
 558: PPUSH
// if not observer or not unit then
 559: LD_VAR 0 1
 563: NOT
 564: IFTRUE 573
 566: PUSH
 567: LD_VAR 0 2
 571: NOT
 572: OR
 573: IFFALSE 577
// exit ;
 575: GO 625
// if not See ( GetSide ( observer ) , unit ) then
 577: LD_VAR 0 1
 581: PPUSH
 582: CALL_OW 255
 586: PPUSH
 587: LD_VAR 0 2
 591: PPUSH
 592: CALL_OW 292
 596: NOT
 597: IFFALSE 601
// exit ;
 599: GO 625
// result := GetDistUnits ( observer , unit ) < 12 ;
 601: LD_ADDR_VAR 0 3
 605: PUSH
 606: LD_VAR 0 1
 610: PPUSH
 611: LD_VAR 0 2
 615: PPUSH
 616: CALL_OW 296
 620: PUSH
 621: LD_INT 12
 623: LESS
 624: ST_TO_ADDR
// end ;
 625: LD_VAR 0 3
 629: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 630: LD_INT 0
 632: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 633: LD_VAR 0 2
 637: PUSH
 638: LD_INT 1
 640: ARRAY
 641: PPUSH
 642: LD_VAR 0 2
 646: PUSH
 647: LD_INT 2
 649: ARRAY
 650: PPUSH
 651: CALL_OW 488
 655: IFFALSE 685
 657: PUSH
 658: LD_VAR 0 2
 662: PUSH
 663: LD_INT 1
 665: ARRAY
 666: PPUSH
 667: LD_VAR 0 2
 671: PUSH
 672: LD_INT 2
 674: ARRAY
 675: PPUSH
 676: CALL_OW 428
 680: PUSH
 681: LD_INT 0
 683: EQUAL
 684: AND
 685: IFFALSE 719
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 687: LD_VAR 0 1
 691: PPUSH
 692: LD_VAR 0 2
 696: PUSH
 697: LD_INT 1
 699: ARRAY
 700: PPUSH
 701: LD_VAR 0 2
 705: PUSH
 706: LD_INT 2
 708: ARRAY
 709: PPUSH
 710: LD_VAR 0 3
 714: PPUSH
 715: CALL_OW 48
// end ;
 719: LD_VAR 0 4
 723: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 724: LD_INT 0
 726: PPUSH
 727: PPUSH
// InitUc ;
 728: CALL_OW 18
// InitHc ;
 732: CALL_OW 19
// uc_side := 0 ;
 736: LD_ADDR_OWVAR 20
 740: PUSH
 741: LD_INT 0
 743: ST_TO_ADDR
// uc_nation := 0 ;
 744: LD_ADDR_OWVAR 21
 748: PUSH
 749: LD_INT 0
 751: ST_TO_ADDR
// for i = 1 to amount do
 752: LD_ADDR_VAR 0 4
 756: PUSH
 757: DOUBLE
 758: LD_INT 1
 760: DEC
 761: ST_TO_ADDR
 762: LD_VAR 0 2
 766: PUSH
 767: FOR_TO
 768: IFFALSE 850
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 770: LD_ADDR_OWVAR 29
 774: PUSH
 775: LD_INT 9
 777: PPUSH
 778: LD_INT 12
 780: PPUSH
 781: CALL_OW 12
 785: PUSH
 786: LD_INT 9
 788: PPUSH
 789: LD_INT 12
 791: PPUSH
 792: CALL_OW 12
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 801: LD_ADDR_OWVAR 35
 805: PUSH
 806: LD_INT 1
 808: NEG
 809: PPUSH
 810: LD_INT 1
 812: PPUSH
 813: CALL_OW 12
 817: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 818: LD_INT 0
 820: PPUSH
 821: LD_INT 12
 823: PPUSH
 824: LD_INT 1
 826: PPUSH
 827: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 831: CALL_OW 44
 835: PPUSH
 836: LD_VAR 0 1
 840: PPUSH
 841: LD_INT 0
 843: PPUSH
 844: CALL_OW 49
// end ;
 848: GO 767
 850: POP
 851: POP
// InitHc ;
 852: CALL_OW 19
// end ;
 856: LD_VAR 0 3
 860: RET
// export function CreateNature ; var i ; begin
 861: LD_INT 0
 863: PPUSH
 864: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 , 2 ] [ Difficulty ] ) ;
 865: LD_INT 18
 867: PPUSH
 868: LD_INT 5
 870: PUSH
 871: LD_INT 4
 873: PUSH
 874: LD_INT 3
 876: PUSH
 877: LD_INT 2
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: PUSH
 886: LD_OWVAR 67
 890: ARRAY
 891: PPUSH
 892: CALL 724 0 2
// for i := 1 to 3 do
 896: LD_ADDR_VAR 0 2
 900: PUSH
 901: DOUBLE
 902: LD_INT 1
 904: DEC
 905: ST_TO_ADDR
 906: LD_INT 3
 908: PUSH
 909: FOR_TO
 910: IFFALSE 945
// begin hc_class := 21 ;
 912: LD_ADDR_OWVAR 28
 916: PUSH
 917: LD_INT 21
 919: ST_TO_ADDR
// hc_gallery :=  ;
 920: LD_ADDR_OWVAR 33
 924: PUSH
 925: LD_STRING 
 927: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 928: CALL_OW 44
 932: PPUSH
 933: LD_INT 18
 935: PPUSH
 936: LD_INT 0
 938: PPUSH
 939: CALL_OW 49
// end ;
 943: GO 909
 945: POP
 946: POP
// for i := 1 to 2 do
 947: LD_ADDR_VAR 0 2
 951: PUSH
 952: DOUBLE
 953: LD_INT 1
 955: DEC
 956: ST_TO_ADDR
 957: LD_INT 2
 959: PUSH
 960: FOR_TO
 961: IFFALSE 996
// begin hc_class := 18 ;
 963: LD_ADDR_OWVAR 28
 967: PUSH
 968: LD_INT 18
 970: ST_TO_ADDR
// hc_gallery :=  ;
 971: LD_ADDR_OWVAR 33
 975: PUSH
 976: LD_STRING 
 978: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 979: CALL_OW 44
 983: PPUSH
 984: LD_INT 18
 986: PPUSH
 987: LD_INT 0
 989: PPUSH
 990: CALL_OW 49
// end ;
 994: GO 960
 996: POP
 997: POP
// for i := 1 to 2 do
 998: LD_ADDR_VAR 0 2
1002: PUSH
1003: DOUBLE
1004: LD_INT 1
1006: DEC
1007: ST_TO_ADDR
1008: LD_INT 2
1010: PUSH
1011: FOR_TO
1012: IFFALSE 1047
// begin hc_class := 13 ;
1014: LD_ADDR_OWVAR 28
1018: PUSH
1019: LD_INT 13
1021: ST_TO_ADDR
// hc_gallery :=  ;
1022: LD_ADDR_OWVAR 33
1026: PUSH
1027: LD_STRING 
1029: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1030: CALL_OW 44
1034: PPUSH
1035: LD_INT 18
1037: PPUSH
1038: LD_INT 0
1040: PPUSH
1041: CALL_OW 49
// end ;
1045: GO 1011
1047: POP
1048: POP
// end ;
1049: LD_VAR 0 1
1053: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1054: LD_INT 0
1056: PPUSH
1057: PPUSH
1058: PPUSH
1059: PPUSH
1060: PPUSH
// result := false ;
1061: LD_ADDR_VAR 0 4
1065: PUSH
1066: LD_INT 0
1068: ST_TO_ADDR
// if not sideList or not enemySide then
1069: LD_VAR 0 1
1073: NOT
1074: IFTRUE 1083
1076: PUSH
1077: LD_VAR 0 2
1081: NOT
1082: OR
1083: IFFALSE 1087
// exit ;
1085: GO 1232
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1087: LD_ADDR_VAR 0 7
1091: PUSH
1092: LD_INT 22
1094: PUSH
1095: LD_VAR 0 2
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: PPUSH
1104: CALL_OW 69
1108: ST_TO_ADDR
// if not tmp then
1109: LD_VAR 0 7
1113: NOT
1114: IFFALSE 1118
// exit ;
1116: GO 1232
// for s in sideList do
1118: LD_ADDR_VAR 0 6
1122: PUSH
1123: LD_VAR 0 1
1127: PUSH
1128: FOR_IN
1129: IFFALSE 1230
// for i in tmp do
1131: LD_ADDR_VAR 0 5
1135: PUSH
1136: LD_VAR 0 7
1140: PUSH
1141: FOR_IN
1142: IFFALSE 1226
// if See ( s , i ) then
1144: LD_VAR 0 6
1148: PPUSH
1149: LD_VAR 0 5
1153: PPUSH
1154: CALL_OW 292
1158: IFFALSE 1224
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
1160: LD_ADDR_VAR 0 8
1164: PUSH
1165: LD_INT 22
1167: PUSH
1168: LD_VAR 0 6
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PPUSH
1177: CALL_OW 69
1181: PPUSH
1182: LD_VAR 0 5
1186: PPUSH
1187: CALL_OW 74
1191: ST_TO_ADDR
// if tmp2 in exceptUnits then
1192: LD_VAR 0 8
1196: PUSH
1197: LD_VAR 0 3
1201: IN
1202: IFFALSE 1208
// continue else
1204: GO 1141
1206: GO 1224
// begin result := tmp2 ;
1208: LD_ADDR_VAR 0 4
1212: PUSH
1213: LD_VAR 0 8
1217: ST_TO_ADDR
// exit ;
1218: POP
1219: POP
1220: POP
1221: POP
1222: GO 1232
// end ; end ;
1224: GO 1141
1226: POP
1227: POP
1228: GO 1128
1230: POP
1231: POP
// end ; end_of_file
1232: LD_VAR 0 4
1236: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1237: LD_INT 0
1239: PPUSH
1240: PPUSH
// if cargoRecycled then
1241: LD_EXP 25
1245: IFFALSE 1273
// begin SetTech ( tech_BasicTools , 2 , state_researched ) ;
1247: LD_INT 82
1249: PPUSH
1250: LD_INT 2
1252: PPUSH
1253: LD_INT 2
1255: PPUSH
1256: CALL_OW 322
// SetTech ( tech_Cargo , 2 , state_researched ) ;
1260: LD_INT 83
1262: PPUSH
1263: LD_INT 2
1265: PPUSH
1266: LD_INT 2
1268: PPUSH
1269: CALL_OW 322
// end ; uc_side := 5 ;
1273: LD_ADDR_OWVAR 20
1277: PUSH
1278: LD_INT 5
1280: ST_TO_ADDR
// uc_nation := 2 ;
1281: LD_ADDR_OWVAR 21
1285: PUSH
1286: LD_INT 2
1288: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1289: LD_ADDR_EXP 37
1293: PUSH
1294: LD_STRING Abdul
1296: PPUSH
1297: LD_INT 0
1299: PPUSH
1300: LD_STRING 
1302: PPUSH
1303: CALL 40847 0 3
1307: ST_TO_ADDR
// uc_side := 2 ;
1308: LD_ADDR_OWVAR 20
1312: PUSH
1313: LD_INT 2
1315: ST_TO_ADDR
// uc_nation := 2 ;
1316: LD_ADDR_OWVAR 21
1320: PUSH
1321: LD_INT 2
1323: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1324: LD_ADDR_EXP 26
1328: PUSH
1329: LD_STRING Heike
1331: PPUSH
1332: LD_EXP 1
1336: NOT
1337: PPUSH
1338: LD_EXP 2
1342: PPUSH
1343: CALL 40847 0 3
1347: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1348: LD_ADDR_EXP 29
1352: PUSH
1353: LD_STRING Ibrahim
1355: PPUSH
1356: LD_EXP 1
1360: NOT
1361: PPUSH
1362: LD_EXP 2
1366: PPUSH
1367: CALL 40847 0 3
1371: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1372: LD_ADDR_EXP 27
1376: PUSH
1377: LD_STRING Givi
1379: PPUSH
1380: LD_EXP 1
1384: NOT
1385: PPUSH
1386: LD_EXP 2
1390: PPUSH
1391: CALL 40847 0 3
1395: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1396: LD_ADDR_EXP 30
1400: PUSH
1401: LD_STRING Kamil
1403: PPUSH
1404: LD_EXP 1
1408: NOT
1409: PPUSH
1410: LD_EXP 2
1414: PPUSH
1415: CALL 40847 0 3
1419: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1420: LD_ADDR_EXP 31
1424: PUSH
1425: LD_STRING Kaia
1427: PPUSH
1428: LD_EXP 1
1432: NOT
1433: PPUSH
1434: LD_EXP 2
1438: PPUSH
1439: CALL 40847 0 3
1443: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1444: LD_ADDR_EXP 32
1448: PUSH
1449: LD_STRING Sophia
1451: PPUSH
1452: LD_EXP 1
1456: NOT
1457: PPUSH
1458: LD_EXP 2
1462: PPUSH
1463: CALL 40847 0 3
1467: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1468: LD_ADDR_EXP 33
1472: PUSH
1473: LD_STRING Markov
1475: PPUSH
1476: LD_EXP 1
1480: NOT
1481: PPUSH
1482: LD_EXP 2
1486: PPUSH
1487: CALL 40847 0 3
1491: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1492: LD_ADDR_EXP 36
1496: PUSH
1497: LD_STRING Aviradze
1499: PPUSH
1500: LD_EXP 1
1504: NOT
1505: PPUSH
1506: LD_EXP 2
1510: PPUSH
1511: CALL 40847 0 3
1515: ST_TO_ADDR
// aviradzeSquad := [ ] ;
1516: LD_ADDR_EXP 40
1520: PUSH
1521: EMPTY
1522: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
1523: LD_ADDR_EXP 38
1527: PUSH
1528: LD_STRING 03_others
1530: PPUSH
1531: CALL_OW 31
1535: ST_TO_ADDR
// uc_side := 5 ;
1536: LD_ADDR_OWVAR 20
1540: PUSH
1541: LD_INT 5
1543: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
1544: LD_ADDR_EXP 35
1548: PUSH
1549: LD_STRING Kurt
1551: PPUSH
1552: LD_INT 0
1554: PPUSH
1555: LD_STRING 
1557: PPUSH
1558: CALL 40847 0 3
1562: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1563: LD_ADDR_EXP 28
1567: PUSH
1568: LD_STRING Mike
1570: PPUSH
1571: LD_EXP 1
1575: NOT
1576: PPUSH
1577: LD_EXP 2
1581: PPUSH
1582: CALL 40847 0 3
1586: ST_TO_ADDR
// if Mike then
1587: LD_EXP 28
1591: IFFALSE 1614
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
1593: LD_EXP 28
1597: PPUSH
1598: LD_INT 142
1600: PPUSH
1601: LD_INT 63
1603: PPUSH
1604: LD_INT 2
1606: PPUSH
1607: LD_INT 0
1609: PPUSH
1610: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
1614: LD_EXP 35
1618: PPUSH
1619: LD_INT 142
1621: PPUSH
1622: LD_INT 63
1624: PPUSH
1625: LD_INT 3
1627: PPUSH
1628: LD_INT 0
1630: PPUSH
1631: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
1635: LD_EXP 35
1639: PUSH
1640: LD_EXP 28
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: PPUSH
1649: CALL_OW 140
// end ;
1653: LD_VAR 0 1
1657: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
1658: LD_INT 0
1660: PPUSH
1661: PPUSH
1662: PPUSH
1663: PPUSH
// uc_side := 5 ;
1664: LD_ADDR_OWVAR 20
1668: PUSH
1669: LD_INT 5
1671: ST_TO_ADDR
// uc_nation := 2 ;
1672: LD_ADDR_OWVAR 21
1676: PUSH
1677: LD_INT 2
1679: ST_TO_ADDR
// InitHc ;
1680: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
1684: LD_ADDR_EXP 34
1688: PUSH
1689: LD_STRING Omar
1691: PPUSH
1692: LD_INT 0
1694: PPUSH
1695: LD_STRING 
1697: PPUSH
1698: CALL 40847 0 3
1702: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
1703: LD_EXP 34
1707: PPUSH
1708: LD_INT 284
1710: PPUSH
1711: LD_INT 163
1713: PPUSH
1714: LD_INT 0
1716: PPUSH
1717: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
1721: LD_EXP 34
1725: PPUSH
1726: LD_INT 256
1728: PPUSH
1729: LD_INT 129
1731: PPUSH
1732: CALL_OW 111
// wait ( 0 0$2 ) ;
1736: LD_INT 70
1738: PPUSH
1739: CALL_OW 67
// omarSquad := [ ] ;
1743: LD_ADDR_EXP 39
1747: PUSH
1748: EMPTY
1749: ST_TO_ADDR
// for i := 1 to 5 do
1750: LD_ADDR_VAR 0 2
1754: PUSH
1755: DOUBLE
1756: LD_INT 1
1758: DEC
1759: ST_TO_ADDR
1760: LD_INT 5
1762: PUSH
1763: FOR_TO
1764: IFFALSE 1970
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1766: LD_INT 5
1768: PPUSH
1769: LD_INT 2
1771: PPUSH
1772: LD_INT 13
1774: PUSH
1775: LD_INT 14
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PUSH
1782: LD_VAR 0 2
1786: PUSH
1787: LD_INT 2
1789: MOD
1790: PUSH
1791: LD_INT 1
1793: PLUS
1794: ARRAY
1795: PPUSH
1796: LD_INT 1
1798: PPUSH
1799: LD_INT 1
1801: PPUSH
1802: LD_INT 25
1804: PUSH
1805: LD_INT 27
1807: PUSH
1808: LD_INT 26
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: LIST
1815: PUSH
1816: LD_VAR 0 2
1820: PUSH
1821: LD_INT 3
1823: MOD
1824: PUSH
1825: LD_INT 1
1827: PLUS
1828: ARRAY
1829: PPUSH
1830: LD_INT 100
1832: PPUSH
1833: CALL 386 0 7
// veh := CreateVehicle ;
1837: LD_ADDR_VAR 0 4
1841: PUSH
1842: CALL_OW 45
1846: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1847: LD_VAR 0 4
1851: PPUSH
1852: LD_INT 5
1854: PPUSH
1855: CALL_OW 233
// omarSquad := omarSquad union veh ;
1859: LD_ADDR_EXP 39
1863: PUSH
1864: LD_EXP 39
1868: PUSH
1869: LD_VAR 0 4
1873: UNION
1874: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
1875: LD_VAR 0 4
1879: PPUSH
1880: LD_INT 284
1882: PPUSH
1883: LD_INT 163
1885: PPUSH
1886: LD_INT 0
1888: PPUSH
1889: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
1893: LD_INT 0
1895: PPUSH
1896: LD_INT 3
1898: PPUSH
1899: LD_INT 2
1901: PPUSH
1902: CALL_OW 380
// un := CreateHuman ;
1906: LD_ADDR_VAR 0 3
1910: PUSH
1911: CALL_OW 44
1915: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1916: LD_ADDR_EXP 39
1920: PUSH
1921: LD_EXP 39
1925: PUSH
1926: LD_VAR 0 3
1930: UNION
1931: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1932: LD_VAR 0 3
1936: PPUSH
1937: LD_VAR 0 4
1941: PPUSH
1942: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
1946: LD_VAR 0 3
1950: PPUSH
1951: LD_INT 271
1953: PPUSH
1954: LD_INT 144
1956: PPUSH
1957: CALL_OW 111
// wait ( 0 0$2 ) ;
1961: LD_INT 70
1963: PPUSH
1964: CALL_OW 67
// end ;
1968: GO 1763
1970: POP
1971: POP
// for i := 1 to 3 do
1972: LD_ADDR_VAR 0 2
1976: PUSH
1977: DOUBLE
1978: LD_INT 1
1980: DEC
1981: ST_TO_ADDR
1982: LD_INT 3
1984: PUSH
1985: FOR_TO
1986: IFFALSE 2069
// begin PrepareHuman ( false , 1 , 2 ) ;
1988: LD_INT 0
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: LD_INT 2
1996: PPUSH
1997: CALL_OW 380
// un := CreateHuman ;
2001: LD_ADDR_VAR 0 3
2005: PUSH
2006: CALL_OW 44
2010: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2011: LD_ADDR_EXP 39
2015: PUSH
2016: LD_EXP 39
2020: PUSH
2021: LD_VAR 0 3
2025: UNION
2026: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
2027: LD_VAR 0 3
2031: PPUSH
2032: LD_INT 284
2034: PPUSH
2035: LD_INT 163
2037: PPUSH
2038: LD_INT 0
2040: PPUSH
2041: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
2045: LD_VAR 0 3
2049: PPUSH
2050: LD_INT 257
2052: PPUSH
2053: LD_INT 138
2055: PPUSH
2056: CALL_OW 111
// wait ( 0 0$1 ) ;
2060: LD_INT 35
2062: PPUSH
2063: CALL_OW 67
// end ;
2067: GO 1985
2069: POP
2070: POP
// for i := 1 to 6 do
2071: LD_ADDR_VAR 0 2
2075: PUSH
2076: DOUBLE
2077: LD_INT 1
2079: DEC
2080: ST_TO_ADDR
2081: LD_INT 6
2083: PUSH
2084: FOR_TO
2085: IFFALSE 2218
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2087: LD_INT 0
2089: PPUSH
2090: LD_INT 1
2092: PUSH
2093: LD_INT 1
2095: PUSH
2096: LD_INT 4
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: PUSH
2104: LD_VAR 0 2
2108: PUSH
2109: LD_INT 3
2111: MOD
2112: PUSH
2113: LD_INT 1
2115: PLUS
2116: ARRAY
2117: PPUSH
2118: LD_INT 3
2120: PPUSH
2121: CALL_OW 380
// un := CreateHuman ;
2125: LD_ADDR_VAR 0 3
2129: PUSH
2130: CALL_OW 44
2134: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2135: LD_ADDR_EXP 39
2139: PUSH
2140: LD_EXP 39
2144: PUSH
2145: LD_VAR 0 3
2149: UNION
2150: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2151: LD_VAR 0 3
2155: PPUSH
2156: LD_INT 225
2158: PPUSH
2159: LD_INT 163
2161: PPUSH
2162: LD_INT 0
2164: PPUSH
2165: CALL_OW 48
// if i = 1 then
2169: LD_VAR 0 2
2173: PUSH
2174: LD_INT 1
2176: EQUAL
2177: IFFALSE 2194
// SetAttr ( un , attr_speed , 12 ) ;
2179: LD_VAR 0 3
2183: PPUSH
2184: LD_INT 2
2186: PPUSH
2187: LD_INT 12
2189: PPUSH
2190: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2194: LD_VAR 0 3
2198: PPUSH
2199: LD_INT 222
2201: PPUSH
2202: LD_INT 157
2204: PPUSH
2205: CALL_OW 111
// wait ( 0 0$1 ) ;
2209: LD_INT 35
2211: PPUSH
2212: CALL_OW 67
// end ;
2216: GO 2084
2218: POP
2219: POP
// end ; end_of_file
2220: LD_VAR 0 1
2224: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2225: LD_INT 0
2227: PPUSH
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
2232: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
2233: LD_INT 3
2235: PPUSH
2236: LD_INT 149
2238: PPUSH
2239: LD_INT 67
2241: PPUSH
2242: CALL_OW 428
2246: PPUSH
2247: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
2251: LD_ADDR_EXP 51
2255: PUSH
2256: LD_INT 111
2258: PPUSH
2259: LD_INT 89
2261: PPUSH
2262: CALL_OW 428
2266: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2267: LD_ADDR_VAR 0 2
2271: PUSH
2272: LD_INT 21
2274: PUSH
2275: LD_INT 3
2277: PUSH
2278: EMPTY
2279: LIST
2280: LIST
2281: PUSH
2282: LD_INT 23
2284: PUSH
2285: LD_INT 3
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: PPUSH
2296: CALL_OW 69
2300: PUSH
2301: FOR_IN
2302: IFFALSE 2318
// SetBLevel ( i , 5 ) ;
2304: LD_VAR 0 2
2308: PPUSH
2309: LD_INT 5
2311: PPUSH
2312: CALL_OW 241
2316: GO 2301
2318: POP
2319: POP
// SetBName ( kirov , kirov ) ;
2320: LD_INT 71
2322: PPUSH
2323: LD_STRING kirov
2325: PPUSH
2326: CALL_OW 500
// SetBName ( beria , beria ) ;
2330: LD_INT 106
2332: PPUSH
2333: LD_STRING beria
2335: PPUSH
2336: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2340: LD_INT 112
2342: PPUSH
2343: LD_STRING kagan
2345: PPUSH
2346: CALL_OW 500
// uc_side := 6 ;
2350: LD_ADDR_OWVAR 20
2354: PUSH
2355: LD_INT 6
2357: ST_TO_ADDR
// uc_nation := 3 ;
2358: LD_ADDR_OWVAR 21
2362: PUSH
2363: LD_INT 3
2365: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2366: LD_ADDR_VAR 0 5
2370: PUSH
2371: LD_INT 22
2373: PUSH
2374: LD_INT 6
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: PUSH
2381: LD_INT 30
2383: PUSH
2384: LD_INT 5
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: PPUSH
2395: CALL_OW 69
2399: PUSH
2400: LD_INT 1
2402: ARRAY
2403: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
2404: LD_ADDR_VAR 0 4
2408: PUSH
2409: LD_INT 22
2411: PUSH
2412: LD_INT 6
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: PUSH
2419: LD_INT 30
2421: PUSH
2422: LD_INT 4
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PPUSH
2433: CALL_OW 69
2437: PUSH
2438: LD_INT 1
2440: ARRAY
2441: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
2442: LD_ADDR_EXP 45
2446: PUSH
2447: EMPTY
2448: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
2449: LD_ADDR_EXP 46
2453: PUSH
2454: EMPTY
2455: ST_TO_ADDR
// russianPatrol := [ ] ;
2456: LD_ADDR_EXP 48
2460: PUSH
2461: EMPTY
2462: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
2463: LD_ADDR_EXP 41
2467: PUSH
2468: LD_STRING Kurin
2470: PPUSH
2471: LD_INT 0
2473: PPUSH
2474: LD_STRING 
2476: PPUSH
2477: CALL 40847 0 3
2481: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
2482: LD_EXP 41
2486: PPUSH
2487: LD_INT 71
2489: PPUSH
2490: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
2494: LD_ADDR_EXP 43
2498: PUSH
2499: LD_STRING Popov
2501: PPUSH
2502: LD_INT 0
2504: PPUSH
2505: LD_STRING 
2507: PPUSH
2508: CALL 40847 0 3
2512: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
2513: LD_EXP 43
2517: PPUSH
2518: LD_INT 71
2520: PPUSH
2521: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
2525: LD_ADDR_EXP 42
2529: PUSH
2530: LD_STRING Grishko
2532: PPUSH
2533: LD_INT 0
2535: PPUSH
2536: LD_STRING 
2538: PPUSH
2539: CALL 40847 0 3
2543: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
2544: LD_EXP 42
2548: PPUSH
2549: LD_INT 207
2551: PPUSH
2552: LD_INT 106
2554: PPUSH
2555: LD_INT 0
2557: PPUSH
2558: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
2562: LD_EXP 42
2566: PPUSH
2567: LD_INT 209
2569: PPUSH
2570: LD_INT 106
2572: PPUSH
2573: CALL_OW 118
// for i := 1 to 2 do
2577: LD_ADDR_VAR 0 2
2581: PUSH
2582: DOUBLE
2583: LD_INT 1
2585: DEC
2586: ST_TO_ADDR
2587: LD_INT 2
2589: PUSH
2590: FOR_TO
2591: IFFALSE 2646
// begin PrepareHuman ( false , 2 , 2 ) ;
2593: LD_INT 0
2595: PPUSH
2596: LD_INT 2
2598: PPUSH
2599: LD_INT 2
2601: PPUSH
2602: CALL_OW 380
// un := CreateHuman ;
2606: LD_ADDR_VAR 0 3
2610: PUSH
2611: CALL_OW 44
2615: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2616: LD_VAR 0 3
2620: PPUSH
2621: LD_INT 71
2623: PPUSH
2624: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2628: LD_ADDR_EXP 45
2632: PUSH
2633: LD_EXP 45
2637: PUSH
2638: LD_VAR 0 3
2642: UNION
2643: ST_TO_ADDR
// end ;
2644: GO 2590
2646: POP
2647: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2648: LD_ADDR_VAR 0 2
2652: PUSH
2653: DOUBLE
2654: LD_INT 1
2656: DEC
2657: ST_TO_ADDR
2658: LD_INT 5
2660: PUSH
2661: LD_INT 6
2663: PUSH
2664: LD_INT 6
2666: PUSH
2667: LD_INT 6
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: LIST
2674: LIST
2675: PUSH
2676: LD_OWVAR 67
2680: ARRAY
2681: PUSH
2682: FOR_TO
2683: IFFALSE 2761
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
2685: LD_INT 0
2687: PPUSH
2688: LD_INT 1
2690: PPUSH
2691: LD_INT 2
2693: PUSH
2694: LD_INT 3
2696: PUSH
2697: LD_INT 4
2699: PUSH
2700: LD_INT 4
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: PUSH
2709: LD_OWVAR 67
2713: ARRAY
2714: PPUSH
2715: CALL_OW 380
// un := CreateHuman ;
2719: LD_ADDR_VAR 0 3
2723: PUSH
2724: CALL_OW 44
2728: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
2729: LD_VAR 0 3
2733: PPUSH
2734: LD_VAR 0 5
2738: PPUSH
2739: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2743: LD_ADDR_EXP 45
2747: PUSH
2748: LD_EXP 45
2752: PUSH
2753: LD_VAR 0 3
2757: UNION
2758: ST_TO_ADDR
// end ;
2759: GO 2682
2761: POP
2762: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
2763: LD_ADDR_VAR 0 2
2767: PUSH
2768: LD_INT 22
2770: PUSH
2771: LD_INT 6
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: LD_INT 30
2780: PUSH
2781: LD_INT 32
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PPUSH
2792: CALL_OW 69
2796: PUSH
2797: FOR_IN
2798: IFFALSE 2876
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
2800: LD_INT 0
2802: PPUSH
2803: LD_INT 1
2805: PPUSH
2806: LD_INT 3
2808: PUSH
2809: LD_INT 4
2811: PUSH
2812: LD_INT 4
2814: PUSH
2815: LD_INT 5
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: LIST
2822: LIST
2823: PUSH
2824: LD_OWVAR 67
2828: ARRAY
2829: PPUSH
2830: CALL_OW 380
// un := CreateHuman ;
2834: LD_ADDR_VAR 0 3
2838: PUSH
2839: CALL_OW 44
2843: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2844: LD_VAR 0 3
2848: PPUSH
2849: LD_VAR 0 2
2853: PPUSH
2854: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2858: LD_ADDR_EXP 45
2862: PUSH
2863: LD_EXP 45
2867: PUSH
2868: LD_VAR 0 3
2872: UNION
2873: ST_TO_ADDR
// end ;
2874: GO 2797
2876: POP
2877: POP
// for i := 1 to 3 do
2878: LD_ADDR_VAR 0 2
2882: PUSH
2883: DOUBLE
2884: LD_INT 1
2886: DEC
2887: ST_TO_ADDR
2888: LD_INT 3
2890: PUSH
2891: FOR_TO
2892: IFFALSE 2947
// begin PrepareHuman ( false , 3 , 3 ) ;
2894: LD_INT 0
2896: PPUSH
2897: LD_INT 3
2899: PPUSH
2900: LD_INT 3
2902: PPUSH
2903: CALL_OW 380
// un := CreateHuman ;
2907: LD_ADDR_VAR 0 3
2911: PUSH
2912: CALL_OW 44
2916: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
2917: LD_VAR 0 3
2921: PPUSH
2922: LD_INT 92
2924: PPUSH
2925: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2929: LD_ADDR_EXP 45
2933: PUSH
2934: LD_EXP 45
2938: PUSH
2939: LD_VAR 0 3
2943: UNION
2944: ST_TO_ADDR
// end ;
2945: GO 2891
2947: POP
2948: POP
// for i := 1 to 2 do
2949: LD_ADDR_VAR 0 2
2953: PUSH
2954: DOUBLE
2955: LD_INT 1
2957: DEC
2958: ST_TO_ADDR
2959: LD_INT 2
2961: PUSH
2962: FOR_TO
2963: IFFALSE 3018
// begin PrepareHuman ( false , 4 , 3 ) ;
2965: LD_INT 0
2967: PPUSH
2968: LD_INT 4
2970: PPUSH
2971: LD_INT 3
2973: PPUSH
2974: CALL_OW 380
// un := CreateHuman ;
2978: LD_ADDR_VAR 0 3
2982: PUSH
2983: CALL_OW 44
2987: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2988: LD_VAR 0 3
2992: PPUSH
2993: LD_INT 83
2995: PPUSH
2996: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3000: LD_ADDR_EXP 45
3004: PUSH
3005: LD_EXP 45
3009: PUSH
3010: LD_VAR 0 3
3014: UNION
3015: ST_TO_ADDR
// end ;
3016: GO 2962
3018: POP
3019: POP
// for i := 1 to 5 do
3020: LD_ADDR_VAR 0 2
3024: PUSH
3025: DOUBLE
3026: LD_INT 1
3028: DEC
3029: ST_TO_ADDR
3030: LD_INT 5
3032: PUSH
3033: FOR_TO
3034: IFFALSE 3091
// begin PrepareHuman ( false , 1 , 3 ) ;
3036: LD_INT 0
3038: PPUSH
3039: LD_INT 1
3041: PPUSH
3042: LD_INT 3
3044: PPUSH
3045: CALL_OW 380
// un := CreateHuman ;
3049: LD_ADDR_VAR 0 3
3053: PUSH
3054: CALL_OW 44
3058: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3059: LD_VAR 0 3
3063: PPUSH
3064: LD_VAR 0 4
3068: PPUSH
3069: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3073: LD_ADDR_EXP 47
3077: PUSH
3078: LD_EXP 47
3082: PUSH
3083: LD_VAR 0 3
3087: UNION
3088: ST_TO_ADDR
// end ;
3089: GO 3033
3091: POP
3092: POP
// russianCargo := [ ] ;
3093: LD_ADDR_EXP 50
3097: PUSH
3098: EMPTY
3099: ST_TO_ADDR
// for i := 1 to 2 do
3100: LD_ADDR_VAR 0 2
3104: PUSH
3105: DOUBLE
3106: LD_INT 1
3108: DEC
3109: ST_TO_ADDR
3110: LD_INT 2
3112: PUSH
3113: FOR_TO
3114: IFFALSE 3246
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3116: LD_INT 6
3118: PPUSH
3119: LD_INT 3
3121: PPUSH
3122: LD_INT 21
3124: PPUSH
3125: LD_INT 1
3127: PPUSH
3128: LD_INT 1
3130: PPUSH
3131: LD_INT 51
3133: PPUSH
3134: LD_INT 100
3136: PPUSH
3137: CALL 386 0 7
// un := CreateVehicle ;
3141: LD_ADDR_VAR 0 3
3145: PUSH
3146: CALL_OW 45
3150: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3151: LD_ADDR_EXP 50
3155: PUSH
3156: LD_EXP 50
3160: PUSH
3161: LD_VAR 0 3
3165: UNION
3166: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3167: LD_VAR 0 3
3171: PPUSH
3172: LD_INT 2
3174: PPUSH
3175: LD_INT 100
3177: PPUSH
3178: CALL_OW 290
// SetDir ( un , 4 ) ;
3182: LD_VAR 0 3
3186: PPUSH
3187: LD_INT 4
3189: PPUSH
3190: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3194: LD_VAR 0 3
3198: PPUSH
3199: LD_INT 147
3201: PPUSH
3202: LD_INT 103
3204: PPUSH
3205: LD_INT 4
3207: PPUSH
3208: LD_INT 0
3210: PPUSH
3211: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3215: LD_INT 0
3217: PPUSH
3218: LD_INT 1
3220: PPUSH
3221: LD_OWVAR 67
3225: PPUSH
3226: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3230: CALL_OW 44
3234: PPUSH
3235: LD_VAR 0 3
3239: PPUSH
3240: CALL_OW 52
// end ;
3244: GO 3113
3246: POP
3247: POP
// uc_side := 3 ;
3248: LD_ADDR_OWVAR 20
3252: PUSH
3253: LD_INT 3
3255: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3256: LD_ADDR_EXP 44
3260: PUSH
3261: LD_STRING Burlak
3263: PPUSH
3264: LD_INT 0
3266: PPUSH
3267: LD_STRING 
3269: PPUSH
3270: CALL 40847 0 3
3274: ST_TO_ADDR
// for i := 1 to 5 do
3275: LD_ADDR_VAR 0 2
3279: PUSH
3280: DOUBLE
3281: LD_INT 1
3283: DEC
3284: ST_TO_ADDR
3285: LD_INT 5
3287: PUSH
3288: FOR_TO
3289: IFFALSE 3382
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3291: LD_INT 0
3293: PPUSH
3294: LD_INT 1
3296: PPUSH
3297: LD_OWVAR 67
3301: PUSH
3302: LD_INT 1
3304: PLUS
3305: PPUSH
3306: CALL_OW 380
// un := CreateHuman ;
3310: LD_ADDR_VAR 0 3
3314: PUSH
3315: CALL_OW 44
3319: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3320: LD_VAR 0 3
3324: PPUSH
3325: LD_INT 22
3327: PUSH
3328: LD_INT 3
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: PUSH
3335: LD_INT 30
3337: PUSH
3338: LD_INT 32
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PPUSH
3349: CALL_OW 69
3353: PUSH
3354: LD_VAR 0 2
3358: ARRAY
3359: PPUSH
3360: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3364: LD_ADDR_EXP 46
3368: PUSH
3369: LD_EXP 46
3373: PUSH
3374: LD_VAR 0 3
3378: UNION
3379: ST_TO_ADDR
// end ;
3380: GO 3288
3382: POP
3383: POP
// for i := 1 to 2 do
3384: LD_ADDR_VAR 0 2
3388: PUSH
3389: DOUBLE
3390: LD_INT 1
3392: DEC
3393: ST_TO_ADDR
3394: LD_INT 2
3396: PUSH
3397: FOR_TO
3398: IFFALSE 3489
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3400: LD_INT 0
3402: PPUSH
3403: LD_INT 1
3405: PPUSH
3406: LD_OWVAR 67
3410: PUSH
3411: LD_INT 1
3413: PLUS
3414: PPUSH
3415: CALL_OW 380
// un := CreateHuman ;
3419: LD_ADDR_VAR 0 3
3423: PUSH
3424: CALL_OW 44
3428: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3429: LD_VAR 0 3
3433: PPUSH
3434: LD_INT 22
3436: PUSH
3437: LD_INT 3
3439: PUSH
3440: EMPTY
3441: LIST
3442: LIST
3443: PUSH
3444: LD_INT 30
3446: PUSH
3447: LD_INT 5
3449: PUSH
3450: EMPTY
3451: LIST
3452: LIST
3453: PUSH
3454: EMPTY
3455: LIST
3456: LIST
3457: PPUSH
3458: CALL_OW 69
3462: PUSH
3463: LD_INT 1
3465: ARRAY
3466: PPUSH
3467: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3471: LD_ADDR_EXP 46
3475: PUSH
3476: LD_EXP 46
3480: PUSH
3481: LD_VAR 0 3
3485: UNION
3486: ST_TO_ADDR
// end ;
3487: GO 3397
3489: POP
3490: POP
// for i := 1 to 2 do
3491: LD_ADDR_VAR 0 2
3495: PUSH
3496: DOUBLE
3497: LD_INT 1
3499: DEC
3500: ST_TO_ADDR
3501: LD_INT 2
3503: PUSH
3504: FOR_TO
3505: IFFALSE 3592
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3507: LD_INT 0
3509: PPUSH
3510: LD_INT 4
3512: PPUSH
3513: LD_OWVAR 67
3517: PPUSH
3518: CALL_OW 380
// un := CreateHuman ;
3522: LD_ADDR_VAR 0 3
3526: PUSH
3527: CALL_OW 44
3531: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
3532: LD_VAR 0 3
3536: PPUSH
3537: LD_INT 22
3539: PUSH
3540: LD_INT 3
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: PUSH
3547: LD_INT 30
3549: PUSH
3550: LD_INT 7
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: PPUSH
3561: CALL_OW 69
3565: PUSH
3566: LD_INT 1
3568: ARRAY
3569: PPUSH
3570: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3574: LD_ADDR_EXP 46
3578: PUSH
3579: LD_EXP 46
3583: PUSH
3584: LD_VAR 0 3
3588: UNION
3589: ST_TO_ADDR
// end ;
3590: GO 3504
3592: POP
3593: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
3594: LD_INT 0
3596: PPUSH
3597: LD_INT 2
3599: PPUSH
3600: LD_OWVAR 67
3604: PPUSH
3605: CALL_OW 380
// un := CreateHuman ;
3609: LD_ADDR_VAR 0 3
3613: PUSH
3614: CALL_OW 44
3618: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
3619: LD_VAR 0 3
3623: PPUSH
3624: LD_INT 106
3626: PPUSH
3627: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3631: LD_ADDR_EXP 46
3635: PUSH
3636: LD_EXP 46
3640: PUSH
3641: LD_VAR 0 3
3645: UNION
3646: ST_TO_ADDR
// for i := 1 to 3 do
3647: LD_ADDR_VAR 0 2
3651: PUSH
3652: DOUBLE
3653: LD_INT 1
3655: DEC
3656: ST_TO_ADDR
3657: LD_INT 3
3659: PUSH
3660: FOR_TO
3661: IFFALSE 3783
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
3663: LD_ADDR_VAR 0 6
3667: PUSH
3668: LD_INT 22
3670: PUSH
3671: LD_INT 3
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: PUSH
3678: LD_INT 30
3680: PUSH
3681: LD_INT 31
3683: PUSH
3684: EMPTY
3685: LIST
3686: LIST
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: PPUSH
3692: CALL_OW 69
3696: PUSH
3697: LD_VAR 0 2
3701: ARRAY
3702: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
3703: LD_INT 0
3705: PPUSH
3706: LD_INT 1
3708: PPUSH
3709: LD_OWVAR 67
3713: PPUSH
3714: CALL_OW 380
// un := CreateHuman ;
3718: LD_ADDR_VAR 0 3
3722: PUSH
3723: CALL_OW 44
3727: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
3728: LD_VAR 0 3
3732: PPUSH
3733: LD_VAR 0 6
3737: PPUSH
3738: CALL_OW 254
3742: PUSH
3743: LD_INT 3
3745: PLUS
3746: PPUSH
3747: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
3751: LD_VAR 0 3
3755: PPUSH
3756: LD_VAR 0 6
3760: PPUSH
3761: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3765: LD_ADDR_EXP 46
3769: PUSH
3770: LD_EXP 46
3774: PUSH
3775: LD_VAR 0 3
3779: UNION
3780: ST_TO_ADDR
// end ;
3781: GO 3660
3783: POP
3784: POP
// if Difficulty > 1 then
3785: LD_OWVAR 67
3789: PUSH
3790: LD_INT 1
3792: GREATER
3793: IFFALSE 3868
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
3795: LD_ADDR_VAR 0 3
3799: PUSH
3800: LD_INT 3
3802: PPUSH
3803: LD_INT 3
3805: PPUSH
3806: LD_INT 23
3808: PPUSH
3809: LD_INT 1
3811: PPUSH
3812: LD_INT 1
3814: PPUSH
3815: LD_INT 44
3817: PPUSH
3818: LD_INT 100
3820: PPUSH
3821: CALL 386 0 7
3825: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
3826: LD_VAR 0 3
3830: PPUSH
3831: LD_INT 73
3833: PPUSH
3834: LD_INT 110
3836: PPUSH
3837: LD_INT 0
3839: PPUSH
3840: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
3844: LD_INT 0
3846: PPUSH
3847: LD_INT 3
3849: PPUSH
3850: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
3854: CALL_OW 44
3858: PPUSH
3859: LD_VAR 0 3
3863: PPUSH
3864: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
3868: LD_ADDR_EXP 49
3872: PUSH
3873: EMPTY
3874: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 , 8 ] [ Difficulty ] do
3875: LD_ADDR_VAR 0 2
3879: PUSH
3880: DOUBLE
3881: LD_INT 1
3883: DEC
3884: ST_TO_ADDR
3885: LD_INT 6
3887: PUSH
3888: LD_INT 7
3890: PUSH
3891: LD_INT 8
3893: PUSH
3894: LD_INT 8
3896: PUSH
3897: EMPTY
3898: LIST
3899: LIST
3900: LIST
3901: LIST
3902: PUSH
3903: LD_OWVAR 67
3907: ARRAY
3908: PUSH
3909: FOR_TO
3910: IFFALSE 4134
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
3912: LD_INT 3
3914: PPUSH
3915: LD_INT 3
3917: PPUSH
3918: LD_INT 21
3920: PUSH
3921: LD_INT 23
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: PUSH
3928: LD_VAR 0 2
3932: PUSH
3933: LD_INT 2
3935: MOD
3936: PUSH
3937: LD_INT 1
3939: PLUS
3940: ARRAY
3941: PPUSH
3942: LD_INT 1
3944: PPUSH
3945: LD_INT 1
3947: PPUSH
3948: LD_INT 43
3950: PUSH
3951: LD_INT 44
3953: PUSH
3954: LD_INT 42
3956: PUSH
3957: EMPTY
3958: LIST
3959: LIST
3960: LIST
3961: PUSH
3962: LD_VAR 0 2
3966: PUSH
3967: LD_INT 3
3969: MOD
3970: PUSH
3971: LD_INT 1
3973: PLUS
3974: ARRAY
3975: PPUSH
3976: LD_INT 100
3978: PPUSH
3979: CALL 386 0 7
// un := CreateVehicle ;
3983: LD_ADDR_VAR 0 3
3987: PUSH
3988: CALL_OW 45
3992: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
3993: LD_VAR 0 3
3997: PPUSH
3998: LD_INT 0
4000: PUSH
4001: LD_INT 5
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: PUSH
4008: LD_INT 1
4010: PPUSH
4011: LD_INT 2
4013: PPUSH
4014: CALL_OW 12
4018: ARRAY
4019: PPUSH
4020: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
4024: LD_ADDR_EXP 49
4028: PUSH
4029: LD_EXP 49
4033: PUSH
4034: LD_VAR 0 3
4038: UNION
4039: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
4040: LD_VAR 0 3
4044: PPUSH
4045: LD_INT 127
4047: PPUSH
4048: LD_INT 89
4050: PPUSH
4051: LD_INT 7
4053: PPUSH
4054: LD_INT 0
4056: PPUSH
4057: CALL_OW 50
// uc_side := 3 ;
4061: LD_ADDR_OWVAR 20
4065: PUSH
4066: LD_INT 3
4068: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4069: LD_INT 0
4071: PPUSH
4072: LD_INT 3
4074: PPUSH
4075: LD_INT 3
4077: PPUSH
4078: CALL_OW 380
// un := CreateHuman ;
4082: LD_ADDR_VAR 0 3
4086: PUSH
4087: CALL_OW 44
4091: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4092: LD_ADDR_EXP 49
4096: PUSH
4097: LD_EXP 49
4101: PUSH
4102: LD_VAR 0 3
4106: UNION
4107: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4108: LD_VAR 0 3
4112: PPUSH
4113: LD_EXP 49
4117: PUSH
4118: LD_EXP 49
4122: PUSH
4123: LD_INT 1
4125: MINUS
4126: ARRAY
4127: PPUSH
4128: CALL_OW 52
// end ;
4132: GO 3909
4134: POP
4135: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
4136: LD_ADDR_VAR 0 2
4140: PUSH
4141: DOUBLE
4142: LD_INT 1
4144: DEC
4145: ST_TO_ADDR
4146: LD_INT 3
4148: PUSH
4149: LD_INT 4
4151: PUSH
4152: LD_INT 5
4154: PUSH
4155: LD_INT 6
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: PUSH
4164: LD_OWVAR 67
4168: ARRAY
4169: PUSH
4170: FOR_TO
4171: IFFALSE 4237
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4173: LD_INT 0
4175: PPUSH
4176: LD_INT 1
4178: PPUSH
4179: LD_OWVAR 67
4183: PPUSH
4184: CALL_OW 380
// un := CreateHuman ;
4188: LD_ADDR_VAR 0 3
4192: PUSH
4193: CALL_OW 44
4197: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4198: LD_ADDR_EXP 49
4202: PUSH
4203: LD_EXP 49
4207: PUSH
4208: LD_VAR 0 3
4212: UNION
4213: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4214: LD_VAR 0 3
4218: PPUSH
4219: LD_INT 91
4221: PPUSH
4222: LD_INT 60
4224: PPUSH
4225: LD_INT 3
4227: PPUSH
4228: LD_INT 0
4230: PPUSH
4231: CALL_OW 50
// end ;
4235: GO 4170
4237: POP
4238: POP
// end ;
4239: LD_VAR 0 1
4243: RET
// every 0 0$3 do var i ;
4244: GO 4246
4246: DISABLE
4247: LD_INT 0
4249: PPUSH
// begin for i := 1 to 4 do
4250: LD_ADDR_VAR 0 1
4254: PUSH
4255: DOUBLE
4256: LD_INT 1
4258: DEC
4259: ST_TO_ADDR
4260: LD_INT 4
4262: PUSH
4263: FOR_TO
4264: IFFALSE 4283
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4266: LD_EXP 47
4270: PUSH
4271: LD_VAR 0 1
4275: ARRAY
4276: PPUSH
4277: CALL_OW 122
4281: GO 4263
4283: POP
4284: POP
// wait ( 3 ) ;
4285: LD_INT 3
4287: PPUSH
4288: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4292: LD_EXP 47
4296: PUSH
4297: LD_INT 1
4299: ARRAY
4300: PPUSH
4301: LD_INT 22
4303: PUSH
4304: LD_INT 6
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: PUSH
4311: LD_INT 30
4313: PUSH
4314: LD_INT 31
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: PPUSH
4325: CALL_OW 69
4329: PPUSH
4330: LD_EXP 47
4334: PUSH
4335: LD_INT 1
4337: ARRAY
4338: PPUSH
4339: CALL_OW 74
4343: PPUSH
4344: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4348: LD_EXP 47
4352: PUSH
4353: LD_INT 2
4355: ARRAY
4356: PPUSH
4357: LD_INT 211
4359: PPUSH
4360: LD_INT 107
4362: PPUSH
4363: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4367: LD_EXP 47
4371: PUSH
4372: LD_INT 2
4374: ARRAY
4375: PPUSH
4376: LD_INT 209
4378: PPUSH
4379: LD_INT 106
4381: PPUSH
4382: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4386: LD_EXP 47
4390: PUSH
4391: LD_INT 3
4393: ARRAY
4394: PPUSH
4395: LD_INT 209
4397: PPUSH
4398: LD_INT 103
4400: PPUSH
4401: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4405: LD_EXP 47
4409: PUSH
4410: LD_INT 3
4412: ARRAY
4413: PPUSH
4414: LD_INT 209
4416: PPUSH
4417: LD_INT 106
4419: PPUSH
4420: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4424: LD_EXP 47
4428: PUSH
4429: LD_INT 4
4431: ARRAY
4432: PPUSH
4433: LD_INT 227
4435: PPUSH
4436: LD_INT 117
4438: PPUSH
4439: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4443: LD_EXP 47
4447: PUSH
4448: LD_INT 4
4450: ARRAY
4451: PPUSH
4452: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4456: LD_INT 700
4458: PPUSH
4459: CALL_OW 67
// for i := 3 downto 2 do
4463: LD_ADDR_VAR 0 1
4467: PUSH
4468: DOUBLE
4469: LD_INT 3
4471: INC
4472: ST_TO_ADDR
4473: LD_INT 2
4475: PUSH
4476: FOR_DOWNTO
4477: IFFALSE 4644
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4479: LD_EXP 47
4483: PUSH
4484: LD_VAR 0 1
4488: ARRAY
4489: PPUSH
4490: LD_INT 200
4492: PPUSH
4493: LD_INT 91
4495: PPUSH
4496: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4500: LD_EXP 47
4504: PUSH
4505: LD_VAR 0 1
4509: ARRAY
4510: PPUSH
4511: LD_INT 210
4513: PPUSH
4514: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4518: LD_EXP 47
4522: PUSH
4523: LD_VAR 0 1
4527: ARRAY
4528: PPUSH
4529: LD_INT 224
4531: PPUSH
4532: LD_INT 93
4534: PPUSH
4535: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4539: LD_EXP 47
4543: PUSH
4544: LD_VAR 0 1
4548: ARRAY
4549: PPUSH
4550: LD_INT 210
4552: PPUSH
4553: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4557: LD_EXP 47
4561: PUSH
4562: LD_VAR 0 1
4566: ARRAY
4567: PPUSH
4568: LD_INT 239
4570: PPUSH
4571: LD_INT 123
4573: PPUSH
4574: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4578: LD_EXP 47
4582: PUSH
4583: LD_VAR 0 1
4587: ARRAY
4588: PPUSH
4589: LD_INT 210
4591: PPUSH
4592: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4596: LD_EXP 47
4600: PUSH
4601: LD_VAR 0 1
4605: ARRAY
4606: PPUSH
4607: LD_INT 212
4609: PPUSH
4610: LD_INT 105
4612: PPUSH
4613: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4617: LD_EXP 47
4621: PUSH
4622: LD_VAR 0 1
4626: ARRAY
4627: PPUSH
4628: LD_INT 700
4630: PPUSH
4631: CALL_OW 202
// wait ( 0 0$30 ) ;
4635: LD_INT 1050
4637: PPUSH
4638: CALL_OW 67
// end ;
4642: GO 4476
4644: POP
4645: POP
// until not activeGrishkoAI ;
4646: LD_EXP 10
4650: NOT
4651: IFFALSE 4456
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
4653: LD_EXP 47
4657: PPUSH
4658: LD_INT 221
4660: PPUSH
4661: LD_INT 110
4663: PPUSH
4664: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
4668: LD_EXP 47
4672: PPUSH
4673: LD_INT 228
4675: PPUSH
4676: LD_INT 115
4678: PPUSH
4679: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
4683: LD_EXP 47
4687: PPUSH
4688: CALL_OW 200
// end ;
4692: PPOPN 1
4694: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
4695: LD_EXP 12
4699: IFFALSE 5449
4701: GO 4703
4703: DISABLE
4704: LD_INT 0
4706: PPUSH
4707: PPUSH
4708: PPUSH
4709: PPUSH
// begin uc_side := 6 ;
4710: LD_ADDR_OWVAR 20
4714: PUSH
4715: LD_INT 6
4717: ST_TO_ADDR
// uc_nation := 3 ;
4718: LD_ADDR_OWVAR 21
4722: PUSH
4723: LD_INT 3
4725: ST_TO_ADDR
// for i := 1 to 3 do
4726: LD_ADDR_VAR 0 2
4730: PUSH
4731: DOUBLE
4732: LD_INT 1
4734: DEC
4735: ST_TO_ADDR
4736: LD_INT 3
4738: PUSH
4739: FOR_TO
4740: IFFALSE 4853
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
4742: LD_INT 0
4744: PPUSH
4745: LD_INT 1
4747: PPUSH
4748: LD_INT 2
4750: PUSH
4751: LD_INT 3
4753: PUSH
4754: LD_INT 4
4756: PUSH
4757: LD_INT 4
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: PUSH
4766: LD_OWVAR 67
4770: ARRAY
4771: PPUSH
4772: CALL_OW 380
// un := CreateHuman ;
4776: LD_ADDR_VAR 0 1
4780: PUSH
4781: CALL_OW 44
4785: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
4786: LD_ADDR_EXP 48
4790: PUSH
4791: LD_EXP 48
4795: PUSH
4796: LD_VAR 0 1
4800: UNION
4801: ST_TO_ADDR
// SetTag ( un , 1 ) ;
4802: LD_VAR 0 1
4806: PPUSH
4807: LD_INT 1
4809: PPUSH
4810: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
4814: LD_VAR 0 1
4818: PPUSH
4819: LD_INT 11
4821: PPUSH
4822: LD_INT 0
4824: PPUSH
4825: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
4829: LD_VAR 0 1
4833: PPUSH
4834: LD_INT 210
4836: PPUSH
4837: LD_INT 159
4839: PPUSH
4840: CALL_OW 111
// wait ( 0 0$2 ) ;
4844: LD_INT 70
4846: PPUSH
4847: CALL_OW 67
// end ;
4851: GO 4739
4853: POP
4854: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
4855: LD_ADDR_VAR 0 4
4859: PUSH
4860: LD_INT 172
4862: PUSH
4863: LD_INT 76
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: PUSH
4870: LD_INT 150
4872: PUSH
4873: LD_INT 38
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: PUSH
4880: LD_INT 148
4882: PUSH
4883: LD_INT 9
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: PUSH
4890: LD_INT 165
4892: PUSH
4893: LD_INT 38
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: PUSH
4906: LD_INT 191
4908: PUSH
4909: LD_INT 77
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: PUSH
4916: LD_INT 168
4918: PUSH
4919: LD_INT 42
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: PUSH
4926: LD_INT 166
4928: PUSH
4929: LD_INT 11
4931: PUSH
4932: EMPTY
4933: LIST
4934: LIST
4935: PUSH
4936: LD_INT 151
4938: PUSH
4939: LD_INT 12
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: PUSH
4952: LD_INT 221
4954: PUSH
4955: LD_INT 88
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: PUSH
4962: LD_INT 217
4964: PUSH
4965: LD_INT 64
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: PUSH
4972: LD_INT 232
4974: PUSH
4975: LD_INT 66
4977: PUSH
4978: EMPTY
4979: LIST
4980: LIST
4981: PUSH
4982: LD_INT 200
4984: PUSH
4985: LD_INT 56
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: LIST
5002: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5003: LD_INT 35
5005: PPUSH
5006: CALL_OW 67
// for i := russianPatrol downto 1 do
5010: LD_ADDR_VAR 0 2
5014: PUSH
5015: DOUBLE
5016: LD_EXP 48
5020: INC
5021: ST_TO_ADDR
5022: LD_INT 1
5024: PUSH
5025: FOR_DOWNTO
5026: IFFALSE 5411
// begin if IsDead ( russianPatrol [ i ] ) then
5028: LD_EXP 48
5032: PUSH
5033: LD_VAR 0 2
5037: ARRAY
5038: PPUSH
5039: CALL_OW 301
5043: IFFALSE 5047
// continue ;
5045: GO 5025
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
5047: LD_EXP 48
5051: PUSH
5052: LD_VAR 0 2
5056: ARRAY
5057: PPUSH
5058: CALL_OW 256
5062: PUSH
5063: LD_INT 990
5065: LESS
5066: IFFALSE 5089
5068: PUSH
5069: LD_EXP 48
5073: PUSH
5074: LD_VAR 0 2
5078: ARRAY
5079: PPUSH
5080: CALL_OW 110
5084: PUSH
5085: LD_INT 1
5087: EQUAL
5088: AND
5089: IFFALSE 5109
// SetTag ( russianPatrol [ i ] , 2 ) ;
5091: LD_EXP 48
5095: PUSH
5096: LD_VAR 0 2
5100: ARRAY
5101: PPUSH
5102: LD_INT 2
5104: PPUSH
5105: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5109: LD_EXP 48
5113: PUSH
5114: LD_VAR 0 2
5118: ARRAY
5119: PPUSH
5120: CALL_OW 110
5124: PUSH
5125: LD_INT 2
5127: EQUAL
5128: IFFALSE 5195
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5130: LD_EXP 48
5134: PUSH
5135: LD_VAR 0 2
5139: ARRAY
5140: PPUSH
5141: LD_INT 166
5143: PPUSH
5144: LD_INT 101
5146: PPUSH
5147: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5151: LD_EXP 48
5155: PUSH
5156: LD_VAR 0 2
5160: ARRAY
5161: PPUSH
5162: LD_INT 71
5164: PPUSH
5165: CALL_OW 296
5169: PUSH
5170: LD_INT 10
5172: LESS
5173: IFFALSE 5193
// SetTag ( russianPatrol [ i ] , 3 ) ;
5175: LD_EXP 48
5179: PUSH
5180: LD_VAR 0 2
5184: ARRAY
5185: PPUSH
5186: LD_INT 3
5188: PPUSH
5189: CALL_OW 109
// continue ;
5193: GO 5025
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5195: LD_EXP 48
5199: PUSH
5200: LD_VAR 0 2
5204: ARRAY
5205: PPUSH
5206: CALL_OW 110
5210: PUSH
5211: LD_INT 3
5213: EQUAL
5214: IFFALSE 5309
// begin spottedByPatrol := true ;
5216: LD_ADDR_EXP 7
5220: PUSH
5221: LD_INT 1
5223: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5224: LD_EXP 48
5228: PUSH
5229: LD_VAR 0 2
5233: ARRAY
5234: PPUSH
5235: CALL_OW 250
5239: PPUSH
5240: LD_EXP 48
5244: PUSH
5245: LD_VAR 0 2
5249: ARRAY
5250: PPUSH
5251: CALL_OW 251
5255: PPUSH
5256: LD_INT 2
5258: PPUSH
5259: LD_INT 6
5261: NEG
5262: PPUSH
5263: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
5267: LD_EXP 48
5271: PUSH
5272: LD_VAR 0 2
5276: ARRAY
5277: PPUSH
5278: CALL_OW 87
// DialogueOn ;
5282: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
5286: LD_EXP 26
5290: PPUSH
5291: LD_STRING DH-Spot-f-3
5293: PPUSH
5294: CALL_OW 88
// DialogueOff ;
5298: CALL_OW 7
// YouLost ( Spotted ) ;
5302: LD_STRING Spotted
5304: PPUSH
5305: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
5309: LD_EXP 48
5313: PUSH
5314: LD_VAR 0 2
5318: ARRAY
5319: PPUSH
5320: CALL_OW 314
5324: NOT
5325: IFFALSE 5409
// for j in patrol [ i ] do
5327: LD_ADDR_VAR 0 3
5331: PUSH
5332: LD_VAR 0 4
5336: PUSH
5337: LD_VAR 0 2
5341: ARRAY
5342: PUSH
5343: FOR_IN
5344: IFFALSE 5407
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5346: LD_EXP 48
5350: PUSH
5351: LD_VAR 0 2
5355: ARRAY
5356: PPUSH
5357: LD_INT 35
5359: PPUSH
5360: LD_INT 175
5362: PPUSH
5363: CALL_OW 12
5367: PPUSH
5368: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5372: LD_EXP 48
5376: PUSH
5377: LD_VAR 0 2
5381: ARRAY
5382: PPUSH
5383: LD_VAR 0 3
5387: PUSH
5388: LD_INT 1
5390: ARRAY
5391: PPUSH
5392: LD_VAR 0 3
5396: PUSH
5397: LD_INT 2
5399: ARRAY
5400: PPUSH
5401: CALL_OW 174
// end ;
5405: GO 5343
5407: POP
5408: POP
// end ;
5409: GO 5025
5411: POP
5412: POP
// until not russianPatrol or russianAlert ;
5413: LD_EXP 48
5417: NOT
5418: IFTRUE 5426
5420: PUSH
5421: LD_EXP 9
5425: OR
5426: IFFALSE 5003
// if russianPatrol then
5428: LD_EXP 48
5432: IFFALSE 5449
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5434: LD_EXP 48
5438: PPUSH
5439: LD_INT 161
5441: PPUSH
5442: LD_INT 107
5444: PPUSH
5445: CALL_OW 114
// end ;
5449: PPOPN 4
5451: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5452: LD_EXP 6
5456: IFFALSE 5465
5458: PUSH
5459: LD_EXP 13
5463: NOT
5464: AND
5465: IFFALSE 5961
5467: GO 5469
5469: DISABLE
5470: LD_INT 0
5472: PPUSH
5473: PPUSH
5474: PPUSH
5475: PPUSH
5476: PPUSH
// begin enable ;
5477: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5478: LD_ADDR_VAR 0 2
5482: PUSH
5483: LD_EXP 49
5487: PPUSH
5488: LD_INT 21
5490: PUSH
5491: LD_INT 2
5493: PUSH
5494: EMPTY
5495: LIST
5496: LIST
5497: PPUSH
5498: CALL_OW 72
5502: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5503: LD_ADDR_VAR 0 4
5507: PUSH
5508: LD_INT 22
5510: PUSH
5511: LD_INT 4
5513: PUSH
5514: EMPTY
5515: LIST
5516: LIST
5517: PPUSH
5518: CALL_OW 69
5522: ST_TO_ADDR
// for i in filter do
5523: LD_ADDR_VAR 0 1
5527: PUSH
5528: LD_VAR 0 2
5532: PUSH
5533: FOR_IN
5534: IFFALSE 5959
// begin tmp := IsDrivenBy ( i ) ;
5536: LD_ADDR_VAR 0 3
5540: PUSH
5541: LD_VAR 0 1
5545: PPUSH
5546: CALL_OW 311
5550: ST_TO_ADDR
// if not tmp then
5551: LD_VAR 0 3
5555: NOT
5556: IFFALSE 5560
// continue ;
5558: GO 5533
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5560: LD_VAR 0 1
5564: PPUSH
5565: CALL_OW 261
5569: PUSH
5570: LD_INT 90
5572: GREATER
5573: IFFALSE 5590
5575: PUSH
5576: LD_VAR 0 1
5580: PPUSH
5581: CALL_OW 110
5585: PUSH
5586: LD_INT 2
5588: EQUAL
5589: AND
5590: IFFALSE 5606
// SetTag ( i , 0 ) else
5592: LD_VAR 0 1
5596: PPUSH
5597: LD_INT 0
5599: PPUSH
5600: CALL_OW 109
5604: GO 5702
// if GetTag ( i ) = 2 then
5606: LD_VAR 0 1
5610: PPUSH
5611: CALL_OW 110
5615: PUSH
5616: LD_INT 2
5618: EQUAL
5619: IFFALSE 5702
// begin x := rand ( 1 , 2 ) ;
5621: LD_ADDR_VAR 0 5
5625: PUSH
5626: LD_INT 1
5628: PPUSH
5629: LD_INT 2
5631: PPUSH
5632: CALL_OW 12
5636: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5637: LD_VAR 0 1
5641: PPUSH
5642: LD_EXP 50
5646: PUSH
5647: LD_VAR 0 5
5651: ARRAY
5652: PPUSH
5653: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
5657: LD_EXP 50
5661: PUSH
5662: LD_VAR 0 5
5666: ARRAY
5667: PPUSH
5668: LD_INT 2
5670: PPUSH
5671: CALL_OW 289
5675: PUSH
5676: LD_INT 20
5678: LESS
5679: IFFALSE 5702
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
5681: LD_EXP 50
5685: PUSH
5686: LD_VAR 0 5
5690: ARRAY
5691: PPUSH
5692: LD_INT 2
5694: PPUSH
5695: LD_INT 100
5697: PPUSH
5698: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5702: LD_VAR 0 1
5706: PPUSH
5707: CALL_OW 256
5711: PUSH
5712: LD_INT 600
5714: GREATEREQUAL
5715: IFFALSE 5729
5717: PUSH
5718: LD_VAR 0 1
5722: PPUSH
5723: CALL_OW 110
5727: NOT
5728: AND
5729: IFFALSE 5755
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5731: LD_VAR 0 1
5735: PPUSH
5736: LD_VAR 0 4
5740: PPUSH
5741: LD_VAR 0 1
5745: PPUSH
5746: CALL_OW 74
5750: PPUSH
5751: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5755: LD_VAR 0 1
5759: PPUSH
5760: CALL_OW 256
5764: PUSH
5765: LD_INT 600
5767: LESS
5768: IFFALSE 5782
5770: PUSH
5771: LD_VAR 0 1
5775: PPUSH
5776: CALL_OW 110
5780: NOT
5781: AND
5782: IFFALSE 5811
// begin SetTag ( i , 1 ) ;
5784: LD_VAR 0 1
5788: PPUSH
5789: LD_INT 1
5791: PPUSH
5792: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5796: LD_VAR 0 1
5800: PPUSH
5801: LD_INT 62
5803: PPUSH
5804: LD_INT 22
5806: PPUSH
5807: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5811: LD_VAR 0 1
5815: PPUSH
5816: CALL_OW 110
5820: PUSH
5821: LD_INT 1
5823: EQUAL
5824: IFFALSE 5847
5826: PUSH
5827: LD_VAR 0 1
5831: PPUSH
5832: LD_INT 62
5834: PPUSH
5835: LD_INT 22
5837: PPUSH
5838: CALL_OW 297
5842: PUSH
5843: LD_INT 6
5845: LESS
5846: AND
5847: IFFALSE 5855
5849: PUSH
5850: LD_VAR 0 3
5854: AND
5855: IFFALSE 5957
// begin ComExitVehicle ( tmp ) ;
5857: LD_VAR 0 3
5861: PPUSH
5862: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
5866: LD_VAR 0 3
5870: PPUSH
5871: LD_VAR 0 1
5875: PPUSH
5876: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5880: LD_INT 35
5882: PPUSH
5883: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5887: LD_VAR 0 1
5891: PPUSH
5892: CALL_OW 256
5896: PUSH
5897: LD_INT 1000
5899: EQUAL
5900: IFFALSE 5880
// ComEnterUnit ( tmp , i ) ;
5902: LD_VAR 0 3
5906: PPUSH
5907: LD_VAR 0 1
5911: PPUSH
5912: CALL_OW 120
// if GetFuel ( i ) <= 90 then
5916: LD_VAR 0 1
5920: PPUSH
5921: CALL_OW 261
5925: PUSH
5926: LD_INT 90
5928: LESSEQUAL
5929: IFFALSE 5945
// SetTag ( i , 2 ) else
5931: LD_VAR 0 1
5935: PPUSH
5936: LD_INT 2
5938: PPUSH
5939: CALL_OW 109
5943: GO 5957
// SetTag ( i , 0 ) ;
5945: LD_VAR 0 1
5949: PPUSH
5950: LD_INT 0
5952: PPUSH
5953: CALL_OW 109
// end ; end ;
5957: GO 5533
5959: POP
5960: POP
// end ;
5961: PPOPN 5
5963: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp , enemy ;
5964: LD_EXP 20
5968: IFFALSE 6263
5970: GO 5972
5972: DISABLE
5973: LD_INT 0
5975: PPUSH
5976: PPUSH
5977: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
5978: LD_EXP 50
5982: PPUSH
5983: LD_INT 79
5985: PPUSH
5986: LD_INT 155
5988: PPUSH
5989: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
5993: LD_EXP 50
5997: PPUSH
5998: LD_INT 16
6000: PPUSH
6001: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6005: LD_ADDR_VAR 0 2
6009: PUSH
6010: LD_EXP 49
6014: PPUSH
6015: LD_INT 50
6017: PUSH
6018: EMPTY
6019: LIST
6020: PPUSH
6021: CALL_OW 72
6025: ST_TO_ADDR
// tmp := tmp diff UnitFilter ( tmp , [ [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] ] ) ;
6026: LD_ADDR_VAR 0 2
6030: PUSH
6031: LD_VAR 0 2
6035: PUSH
6036: LD_VAR 0 2
6040: PPUSH
6041: LD_INT 25
6043: PUSH
6044: LD_INT 3
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: PUSH
6051: LD_INT 3
6053: PUSH
6054: LD_INT 55
6056: PUSH
6057: EMPTY
6058: LIST
6059: PUSH
6060: EMPTY
6061: LIST
6062: LIST
6063: PUSH
6064: EMPTY
6065: LIST
6066: LIST
6067: PPUSH
6068: CALL_OW 72
6072: DIFF
6073: ST_TO_ADDR
// for i in tmp do
6074: LD_ADDR_VAR 0 1
6078: PUSH
6079: LD_VAR 0 2
6083: PUSH
6084: FOR_IN
6085: IFFALSE 6119
// begin ComAgressiveMove ( i , 123 , 60 ) ;
6087: LD_VAR 0 1
6091: PPUSH
6092: LD_INT 123
6094: PPUSH
6095: LD_INT 60
6097: PPUSH
6098: CALL_OW 114
// AddComAgressiveMove ( i , 133 , 95 ) ;
6102: LD_VAR 0 1
6106: PPUSH
6107: LD_INT 133
6109: PPUSH
6110: LD_INT 95
6112: PPUSH
6113: CALL_OW 174
// end ;
6117: GO 6084
6119: POP
6120: POP
// wait ( 0 0$20 ) ;
6121: LD_INT 700
6123: PPUSH
6124: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6128: LD_INT 35
6130: PPUSH
6131: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6135: LD_ADDR_VAR 0 2
6139: PUSH
6140: LD_EXP 49
6144: PPUSH
6145: LD_INT 50
6147: PUSH
6148: EMPTY
6149: LIST
6150: PPUSH
6151: CALL_OW 72
6155: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] , [ f_not , [ f_inarea , hillArea ] ] ] ) ;
6156: LD_ADDR_VAR 0 3
6160: PUSH
6161: LD_INT 81
6163: PUSH
6164: LD_INT 3
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: LD_INT 3
6173: PUSH
6174: LD_INT 21
6176: PUSH
6177: LD_INT 3
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: PUSH
6188: LD_INT 3
6190: PUSH
6191: LD_INT 95
6193: PUSH
6194: LD_INT 10
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: LIST
6209: PPUSH
6210: CALL_OW 69
6214: ST_TO_ADDR
// for i in tmp do
6215: LD_ADDR_VAR 0 1
6219: PUSH
6220: LD_VAR 0 2
6224: PUSH
6225: FOR_IN
6226: IFFALSE 6254
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) until not tmp ;
6228: LD_VAR 0 1
6232: PPUSH
6233: LD_VAR 0 3
6237: PPUSH
6238: LD_VAR 0 1
6242: PPUSH
6243: CALL_OW 74
6247: PPUSH
6248: CALL_OW 115
6252: GO 6225
6254: POP
6255: POP
6256: LD_VAR 0 2
6260: NOT
6261: IFFALSE 6128
// end ;
6263: PPOPN 3
6265: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6266: LD_INT 22
6268: PUSH
6269: LD_INT 3
6271: PUSH
6272: EMPTY
6273: LIST
6274: LIST
6275: PUSH
6276: LD_INT 32
6278: PUSH
6279: LD_INT 1
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: PPUSH
6290: CALL_OW 69
6294: IFFALSE 6373
6296: GO 6298
6298: DISABLE
6299: LD_INT 0
6301: PPUSH
// begin enable ;
6302: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6303: LD_ADDR_VAR 0 1
6307: PUSH
6308: LD_INT 22
6310: PUSH
6311: LD_INT 3
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: PUSH
6318: LD_INT 32
6320: PUSH
6321: LD_INT 1
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: PPUSH
6332: CALL_OW 69
6336: PUSH
6337: FOR_IN
6338: IFFALSE 6371
// if GetFuel ( i ) < 1 then
6340: LD_VAR 0 1
6344: PPUSH
6345: CALL_OW 261
6349: PUSH
6350: LD_INT 1
6352: LESS
6353: IFFALSE 6369
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6355: LD_VAR 0 1
6359: PPUSH
6360: CALL_OW 311
6364: PPUSH
6365: CALL_OW 121
6369: GO 6337
6371: POP
6372: POP
// end ;
6373: PPOPN 1
6375: END
// every 0 0$2 trigger IsDying ( Kurin ) or IsDead ( Kurin ) or IsDying ( Kirov ) or IsDead ( Kirov ) do var i , tmp , enemy , barracks ;
6376: LD_EXP 41
6380: PPUSH
6381: CALL_OW 303
6385: IFTRUE 6398
6387: PUSH
6388: LD_EXP 41
6392: PPUSH
6393: CALL_OW 301
6397: OR
6398: IFTRUE 6409
6400: PUSH
6401: LD_INT 71
6403: PPUSH
6404: CALL_OW 303
6408: OR
6409: IFTRUE 6420
6411: PUSH
6412: LD_INT 71
6414: PPUSH
6415: CALL_OW 301
6419: OR
6420: IFFALSE 6749
6422: GO 6424
6424: DISABLE
6425: LD_INT 0
6427: PPUSH
6428: PPUSH
6429: PPUSH
6430: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 1 ] ) ;
6431: LD_ADDR_VAR 0 2
6435: PUSH
6436: LD_EXP 45
6440: PPUSH
6441: LD_INT 25
6443: PUSH
6444: LD_INT 1
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PPUSH
6451: CALL_OW 72
6455: ST_TO_ADDR
// if not tmp then
6456: LD_VAR 0 2
6460: NOT
6461: IFFALSE 6465
// exit ;
6463: GO 6749
// barracks := HexInfo ( 166 , 116 ) ;
6465: LD_ADDR_VAR 0 4
6469: PUSH
6470: LD_INT 166
6472: PPUSH
6473: LD_INT 116
6475: PPUSH
6476: CALL_OW 428
6480: ST_TO_ADDR
// for i in tmp do
6481: LD_ADDR_VAR 0 1
6485: PUSH
6486: LD_VAR 0 2
6490: PUSH
6491: FOR_IN
6492: IFFALSE 6505
// ComExitBuilding ( i ) ;
6494: LD_VAR 0 1
6498: PPUSH
6499: CALL_OW 122
6503: GO 6491
6505: POP
6506: POP
// repeat wait ( 0 0$1 ) ;
6507: LD_INT 35
6509: PPUSH
6510: CALL_OW 67
// tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
6514: LD_ADDR_VAR 0 2
6518: PUSH
6519: LD_EXP 45
6523: PPUSH
6524: LD_INT 25
6526: PUSH
6527: LD_INT 1
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: PUSH
6534: LD_INT 50
6536: PUSH
6537: EMPTY
6538: LIST
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: PPUSH
6544: CALL_OW 72
6548: ST_TO_ADDR
// enemy := FilterUnitsInArea ( kirovBaseArea , [ f_enemy , 6 ] ) ;
6549: LD_ADDR_VAR 0 3
6553: PUSH
6554: LD_INT 21
6556: PPUSH
6557: LD_INT 81
6559: PUSH
6560: LD_INT 6
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: PPUSH
6567: CALL_OW 70
6571: ST_TO_ADDR
// if enemy then
6572: LD_VAR 0 3
6576: IFFALSE 6621
// begin for i in tmp do
6578: LD_ADDR_VAR 0 1
6582: PUSH
6583: LD_VAR 0 2
6587: PUSH
6588: FOR_IN
6589: IFFALSE 6617
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6591: LD_VAR 0 1
6595: PPUSH
6596: LD_VAR 0 3
6600: PPUSH
6601: LD_VAR 0 1
6605: PPUSH
6606: CALL_OW 74
6610: PPUSH
6611: CALL_OW 115
6615: GO 6588
6617: POP
6618: POP
// end else
6619: GO 6742
// begin for i in tmp do
6621: LD_ADDR_VAR 0 1
6625: PUSH
6626: LD_VAR 0 2
6630: PUSH
6631: FOR_IN
6632: IFFALSE 6740
// if HasTask ( i ) or not IsInArea ( i , kirovBaseArea ) then
6634: LD_VAR 0 1
6638: PPUSH
6639: CALL_OW 314
6643: IFTRUE 6660
6645: PUSH
6646: LD_VAR 0 1
6650: PPUSH
6651: LD_INT 21
6653: PPUSH
6654: CALL_OW 308
6658: NOT
6659: OR
6660: IFFALSE 6738
// if GetLives ( i ) < 600 and IsOk ( barracks ) and UnitsInside ( barracks ) < 6 then
6662: LD_VAR 0 1
6666: PPUSH
6667: CALL_OW 256
6671: PUSH
6672: LD_INT 600
6674: LESS
6675: IFFALSE 6688
6677: PUSH
6678: LD_VAR 0 4
6682: PPUSH
6683: CALL_OW 302
6687: AND
6688: IFFALSE 6705
6690: PUSH
6691: LD_VAR 0 4
6695: PPUSH
6696: CALL_OW 313
6700: PUSH
6701: LD_INT 6
6703: LESS
6704: AND
6705: IFFALSE 6723
// ComEnterUnit ( i , barracks ) else
6707: LD_VAR 0 1
6711: PPUSH
6712: LD_VAR 0 4
6716: PPUSH
6717: CALL_OW 120
6721: GO 6738
// ComMoveXY ( i , 162 , 109 ) ;
6723: LD_VAR 0 1
6727: PPUSH
6728: LD_INT 162
6730: PPUSH
6731: LD_INT 109
6733: PPUSH
6734: CALL_OW 111
6738: GO 6631
6740: POP
6741: POP
// end ; until not tmp ;
6742: LD_VAR 0 2
6746: NOT
6747: IFFALSE 6507
// end ;
6749: PPOPN 4
6751: END
// every 0 0$2 trigger IsDying ( Beria ) or IsDead ( Beria ) do var i , tmp ;
6752: LD_INT 106
6754: PPUSH
6755: CALL_OW 303
6759: IFTRUE 6770
6761: PUSH
6762: LD_INT 106
6764: PPUSH
6765: CALL_OW 301
6769: OR
6770: IFFALSE 6865
6772: GO 6774
6774: DISABLE
6775: LD_INT 0
6777: PPUSH
6778: PPUSH
// begin tmp := UnitFilter ( beriaBaseSquad , [ f_class , 1 ] ) ;
6779: LD_ADDR_VAR 0 2
6783: PUSH
6784: LD_EXP 46
6788: PPUSH
6789: LD_INT 25
6791: PUSH
6792: LD_INT 1
6794: PUSH
6795: EMPTY
6796: LIST
6797: LIST
6798: PPUSH
6799: CALL_OW 72
6803: ST_TO_ADDR
// if not tmp then
6804: LD_VAR 0 2
6808: NOT
6809: IFFALSE 6813
// exit ;
6811: GO 6865
// for i in tmp do
6813: LD_ADDR_VAR 0 1
6817: PUSH
6818: LD_VAR 0 2
6822: PUSH
6823: FOR_IN
6824: IFFALSE 6863
// begin if IsInUnit ( i ) then
6826: LD_VAR 0 1
6830: PPUSH
6831: CALL_OW 310
6835: IFFALSE 6846
// ComExitBuilding ( i ) ;
6837: LD_VAR 0 1
6841: PPUSH
6842: CALL_OW 122
// AddComMoveXY ( i , 66 , 128 ) ;
6846: LD_VAR 0 1
6850: PPUSH
6851: LD_INT 66
6853: PPUSH
6854: LD_INT 128
6856: PPUSH
6857: CALL_OW 171
// end ;
6861: GO 6823
6863: POP
6864: POP
// end ; end_of_file
6865: PPOPN 2
6867: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6868: LD_INT 0
6870: PPUSH
6871: PPUSH
6872: PPUSH
// SetBName ( omikron , omikron ) ;
6873: LD_INT 64
6875: PPUSH
6876: LD_STRING omikron
6878: PPUSH
6879: CALL_OW 500
// uc_side := 4 ;
6883: LD_ADDR_OWVAR 20
6887: PUSH
6888: LD_INT 4
6890: ST_TO_ADDR
// uc_nation := 1 ;
6891: LD_ADDR_OWVAR 21
6895: PUSH
6896: LD_INT 1
6898: ST_TO_ADDR
// omicronSquad := [ ] ;
6899: LD_ADDR_EXP 52
6903: PUSH
6904: EMPTY
6905: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6906: LD_ADDR_VAR 0 2
6910: PUSH
6911: LD_INT 22
6913: PUSH
6914: LD_INT 4
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: PUSH
6921: LD_INT 2
6923: PUSH
6924: LD_INT 30
6926: PUSH
6927: LD_INT 32
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: PUSH
6934: LD_INT 30
6936: PUSH
6937: LD_INT 31
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: LIST
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PPUSH
6953: CALL_OW 69
6957: PUSH
6958: FOR_IN
6959: IFFALSE 7016
// begin PrepareHuman ( false , 1 , 1 ) ;
6961: LD_INT 0
6963: PPUSH
6964: LD_INT 1
6966: PPUSH
6967: LD_INT 1
6969: PPUSH
6970: CALL_OW 380
// un := CreateHuman ;
6974: LD_ADDR_VAR 0 3
6978: PUSH
6979: CALL_OW 44
6983: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6984: LD_ADDR_EXP 52
6988: PUSH
6989: LD_EXP 52
6993: PUSH
6994: LD_VAR 0 3
6998: UNION
6999: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
7000: LD_VAR 0 3
7004: PPUSH
7005: LD_VAR 0 2
7009: PPUSH
7010: CALL_OW 52
// end ;
7014: GO 6958
7016: POP
7017: POP
// for i := 1 to 3 do
7018: LD_ADDR_VAR 0 2
7022: PUSH
7023: DOUBLE
7024: LD_INT 1
7026: DEC
7027: ST_TO_ADDR
7028: LD_INT 3
7030: PUSH
7031: FOR_TO
7032: IFFALSE 7087
// begin PrepareHuman ( false , 2 , 2 ) ;
7034: LD_INT 0
7036: PPUSH
7037: LD_INT 2
7039: PPUSH
7040: LD_INT 2
7042: PPUSH
7043: CALL_OW 380
// un := CreateHuman ;
7047: LD_ADDR_VAR 0 3
7051: PUSH
7052: CALL_OW 44
7056: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7057: LD_ADDR_EXP 52
7061: PUSH
7062: LD_EXP 52
7066: PUSH
7067: LD_VAR 0 3
7071: UNION
7072: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
7073: LD_VAR 0 3
7077: PPUSH
7078: LD_INT 64
7080: PPUSH
7081: CALL_OW 52
// end ;
7085: GO 7031
7087: POP
7088: POP
// for i := 1 to 2 do
7089: LD_ADDR_VAR 0 2
7093: PUSH
7094: DOUBLE
7095: LD_INT 1
7097: DEC
7098: ST_TO_ADDR
7099: LD_INT 2
7101: PUSH
7102: FOR_TO
7103: IFFALSE 7242
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
7105: LD_INT 4
7107: PPUSH
7108: LD_INT 1
7110: PPUSH
7111: LD_INT 2
7113: PPUSH
7114: LD_INT 2
7116: PPUSH
7117: LD_INT 1
7119: PPUSH
7120: LD_INT 3
7122: PPUSH
7123: LD_INT 100
7125: PPUSH
7126: CALL 386 0 7
// un := CreateVehicle ;
7130: LD_ADDR_VAR 0 3
7134: PUSH
7135: CALL_OW 45
7139: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7140: LD_ADDR_EXP 52
7144: PUSH
7145: LD_EXP 52
7149: PUSH
7150: LD_VAR 0 3
7154: UNION
7155: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
7156: LD_VAR 0 3
7160: PPUSH
7161: LD_INT 28
7163: PPUSH
7164: LD_INT 37
7166: PPUSH
7167: LD_INT 6
7169: PPUSH
7170: LD_INT 0
7172: PPUSH
7173: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
7177: LD_INT 0
7179: PPUSH
7180: LD_INT 3
7182: PPUSH
7183: LD_INT 2
7185: PPUSH
7186: CALL_OW 380
// un := CreateHuman ;
7190: LD_ADDR_VAR 0 3
7194: PUSH
7195: CALL_OW 44
7199: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7200: LD_ADDR_EXP 52
7204: PUSH
7205: LD_EXP 52
7209: PUSH
7210: LD_VAR 0 3
7214: UNION
7215: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
7216: LD_VAR 0 3
7220: PPUSH
7221: LD_EXP 52
7225: PUSH
7226: LD_EXP 52
7230: PUSH
7231: LD_INT 1
7233: MINUS
7234: ARRAY
7235: PPUSH
7236: CALL_OW 52
// end ;
7240: GO 7102
7242: POP
7243: POP
// end ;
7244: LD_VAR 0 1
7248: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
7249: LD_INT 0
7251: PPUSH
7252: PPUSH
7253: PPUSH
7254: PPUSH
// uc_side := 4 ;
7255: LD_ADDR_OWVAR 20
7259: PUSH
7260: LD_INT 4
7262: ST_TO_ADDR
// uc_nation := 1 ;
7263: LD_ADDR_OWVAR 21
7267: PUSH
7268: LD_INT 1
7270: ST_TO_ADDR
// tmp := [ ] ;
7271: LD_ADDR_VAR 0 4
7275: PUSH
7276: EMPTY
7277: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7278: LD_INT 4
7280: PPUSH
7281: LD_INT 1
7283: PPUSH
7284: LD_INT 2
7286: PPUSH
7287: LD_INT 1
7289: PPUSH
7290: LD_INT 1
7292: PPUSH
7293: LD_INT 4
7295: PPUSH
7296: LD_INT 77
7298: PPUSH
7299: CALL 386 0 7
// un := CreateVehicle ;
7303: LD_ADDR_VAR 0 3
7307: PUSH
7308: CALL_OW 45
7312: ST_TO_ADDR
// tmp := tmp union un ;
7313: LD_ADDR_VAR 0 4
7317: PUSH
7318: LD_VAR 0 4
7322: PUSH
7323: LD_VAR 0 3
7327: UNION
7328: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7329: LD_VAR 0 3
7333: PPUSH
7334: LD_INT 2
7336: PPUSH
7337: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
7341: LD_VAR 0 3
7345: PPUSH
7346: LD_INT 106
7348: PPUSH
7349: LD_INT 3
7351: PPUSH
7352: LD_INT 0
7354: PPUSH
7355: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
7359: LD_INT 0
7361: PPUSH
7362: LD_INT 3
7364: PPUSH
7365: LD_INT 2
7367: PPUSH
7368: CALL_OW 380
// un := CreateHuman ;
7372: LD_ADDR_VAR 0 3
7376: PUSH
7377: CALL_OW 44
7381: ST_TO_ADDR
// tmp := tmp union un ;
7382: LD_ADDR_VAR 0 4
7386: PUSH
7387: LD_VAR 0 4
7391: PUSH
7392: LD_VAR 0 3
7396: UNION
7397: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7398: LD_VAR 0 3
7402: PPUSH
7403: LD_VAR 0 4
7407: PUSH
7408: LD_VAR 0 4
7412: PUSH
7413: LD_INT 1
7415: MINUS
7416: ARRAY
7417: PPUSH
7418: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7422: LD_VAR 0 3
7426: PPUSH
7427: LD_INT 109
7429: PPUSH
7430: LD_INT 9
7432: PPUSH
7433: CALL_OW 111
// wait ( 0 0$1 ) ;
7437: LD_INT 35
7439: PPUSH
7440: CALL_OW 67
// for i := 1 to 2 do
7444: LD_ADDR_VAR 0 2
7448: PUSH
7449: DOUBLE
7450: LD_INT 1
7452: DEC
7453: ST_TO_ADDR
7454: LD_INT 2
7456: PUSH
7457: FOR_TO
7458: IFFALSE 7522
// begin PrepareHuman ( false , 1 , 2 ) ;
7460: LD_INT 0
7462: PPUSH
7463: LD_INT 1
7465: PPUSH
7466: LD_INT 2
7468: PPUSH
7469: CALL_OW 380
// un := CreateHuman ;
7473: LD_ADDR_VAR 0 3
7477: PUSH
7478: CALL_OW 44
7482: ST_TO_ADDR
// tmp := tmp union un ;
7483: LD_ADDR_VAR 0 4
7487: PUSH
7488: LD_VAR 0 4
7492: PUSH
7493: LD_VAR 0 3
7497: UNION
7498: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7499: LD_VAR 0 3
7503: PPUSH
7504: LD_INT 105
7506: PPUSH
7507: LD_INT 2
7509: PPUSH
7510: LD_INT 2
7512: PPUSH
7513: LD_INT 0
7515: PPUSH
7516: CALL_OW 50
// end ;
7520: GO 7457
7522: POP
7523: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7524: LD_VAR 0 4
7528: PPUSH
7529: LD_INT 26
7531: PPUSH
7532: LD_INT 35
7534: PPUSH
7535: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7539: LD_INT 35
7541: PPUSH
7542: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7546: LD_VAR 0 4
7550: PPUSH
7551: LD_INT 50
7553: PUSH
7554: EMPTY
7555: LIST
7556: PPUSH
7557: CALL_OW 72
7561: NOT
7562: IFFALSE 7566
// exit ;
7564: GO 7693
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7566: LD_VAR 0 4
7570: PPUSH
7571: LD_INT 91
7573: PUSH
7574: LD_INT 64
7576: PUSH
7577: LD_INT 12
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: LIST
7584: PPUSH
7585: CALL_OW 72
7589: PUSH
7590: LD_VAR 0 4
7594: EQUAL
7595: IFFALSE 7539
// omicronSquad := omicronSquad union tmp ;
7597: LD_ADDR_EXP 52
7601: PUSH
7602: LD_EXP 52
7606: PUSH
7607: LD_VAR 0 4
7611: UNION
7612: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7613: LD_ADDR_VAR 0 2
7617: PUSH
7618: LD_VAR 0 4
7622: PPUSH
7623: LD_INT 25
7625: PUSH
7626: LD_INT 1
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: PPUSH
7633: CALL_OW 72
7637: PUSH
7638: FOR_IN
7639: IFFALSE 7691
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7641: LD_VAR 0 2
7645: PPUSH
7646: LD_INT 22
7648: PUSH
7649: LD_INT 4
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: PUSH
7656: LD_INT 30
7658: PUSH
7659: LD_INT 4
7661: PUSH
7662: EMPTY
7663: LIST
7664: LIST
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: PPUSH
7670: CALL_OW 69
7674: PPUSH
7675: LD_VAR 0 2
7679: PPUSH
7680: CALL_OW 74
7684: PPUSH
7685: CALL_OW 120
7689: GO 7638
7691: POP
7692: POP
// end ;
7693: LD_VAR 0 1
7697: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7698: LD_EXP 13
7702: NOT
7703: IFFALSE 8284
7705: GO 7707
7707: DISABLE
7708: LD_INT 0
7710: PPUSH
7711: PPUSH
7712: PPUSH
7713: PPUSH
// begin enable ;
7714: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7715: LD_ADDR_VAR 0 2
7719: PUSH
7720: LD_INT 22
7722: PUSH
7723: LD_INT 4
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: PUSH
7730: LD_INT 21
7732: PUSH
7733: LD_INT 3
7735: PUSH
7736: EMPTY
7737: LIST
7738: LIST
7739: PUSH
7740: LD_INT 3
7742: PUSH
7743: LD_INT 24
7745: PUSH
7746: LD_INT 1000
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: LIST
7761: PPUSH
7762: CALL_OW 69
7766: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7767: LD_ADDR_VAR 0 3
7771: PUSH
7772: LD_EXP 52
7776: PPUSH
7777: LD_INT 25
7779: PUSH
7780: LD_INT 2
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: PPUSH
7787: CALL_OW 72
7791: ST_TO_ADDR
// if filter and tmp then
7792: LD_VAR 0 2
7796: IFFALSE 7804
7798: PUSH
7799: LD_VAR 0 3
7803: AND
7804: IFFALSE 7877
// begin for i in tmp do
7806: LD_ADDR_VAR 0 1
7810: PUSH
7811: LD_VAR 0 3
7815: PUSH
7816: FOR_IN
7817: IFFALSE 7873
// if IsInUnit ( i ) then
7819: LD_VAR 0 1
7823: PPUSH
7824: CALL_OW 310
7828: IFFALSE 7841
// ComExitBuilding ( i ) else
7830: LD_VAR 0 1
7834: PPUSH
7835: CALL_OW 122
7839: GO 7871
// if not HasTask ( i ) then
7841: LD_VAR 0 1
7845: PPUSH
7846: CALL_OW 314
7850: NOT
7851: IFFALSE 7871
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7853: LD_VAR 0 1
7857: PPUSH
7858: LD_VAR 0 2
7862: PUSH
7863: LD_INT 1
7865: ARRAY
7866: PPUSH
7867: CALL_OW 130
7871: GO 7816
7873: POP
7874: POP
// end else
7875: GO 7948
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7877: LD_VAR 0 3
7881: PPUSH
7882: LD_INT 3
7884: PUSH
7885: LD_INT 54
7887: PUSH
7888: EMPTY
7889: LIST
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: PPUSH
7895: CALL_OW 72
7899: IFFALSE 7948
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7901: LD_ADDR_VAR 0 1
7905: PUSH
7906: LD_VAR 0 3
7910: PPUSH
7911: LD_INT 3
7913: PUSH
7914: LD_INT 54
7916: PUSH
7917: EMPTY
7918: LIST
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: PPUSH
7924: CALL_OW 72
7928: PUSH
7929: FOR_IN
7930: IFFALSE 7946
// ComEnterUnit ( i , omikron ) ;
7932: LD_VAR 0 1
7936: PPUSH
7937: LD_INT 64
7939: PPUSH
7940: CALL_OW 120
7944: GO 7929
7946: POP
7947: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7948: LD_ADDR_VAR 0 2
7952: PUSH
7953: LD_EXP 52
7957: PPUSH
7958: LD_INT 21
7960: PUSH
7961: LD_INT 2
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: PPUSH
7968: CALL_OW 72
7972: ST_TO_ADDR
// if not filter then
7973: LD_VAR 0 2
7977: NOT
7978: IFFALSE 7982
// exit ;
7980: GO 8284
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7982: LD_ADDR_VAR 0 4
7986: PUSH
7987: LD_INT 13
7989: PPUSH
7990: LD_INT 81
7992: PUSH
7993: LD_INT 4
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: PPUSH
8000: CALL_OW 70
8004: ST_TO_ADDR
// if enemy then
8005: LD_VAR 0 4
8009: IFFALSE 8284
// begin for i in filter do
8011: LD_ADDR_VAR 0 1
8015: PUSH
8016: LD_VAR 0 2
8020: PUSH
8021: FOR_IN
8022: IFFALSE 8282
// begin tmp := IsDrivenBy ( i ) ;
8024: LD_ADDR_VAR 0 3
8028: PUSH
8029: LD_VAR 0 1
8033: PPUSH
8034: CALL_OW 311
8038: ST_TO_ADDR
// if not tmp then
8039: LD_VAR 0 3
8043: NOT
8044: IFFALSE 8048
// continue ;
8046: GO 8021
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
8048: LD_VAR 0 1
8052: PPUSH
8053: CALL_OW 256
8057: PUSH
8058: LD_INT 600
8060: GREATEREQUAL
8061: IFFALSE 8078
8063: PUSH
8064: LD_VAR 0 1
8068: PPUSH
8069: CALL_OW 110
8073: PUSH
8074: LD_INT 1
8076: NONEQUAL
8077: AND
8078: IFFALSE 8104
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8080: LD_VAR 0 1
8084: PPUSH
8085: LD_VAR 0 4
8089: PPUSH
8090: LD_VAR 0 1
8094: PPUSH
8095: CALL_OW 74
8099: PPUSH
8100: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
8104: LD_VAR 0 1
8108: PPUSH
8109: CALL_OW 256
8113: PUSH
8114: LD_INT 600
8116: LESS
8117: IFFALSE 8134
8119: PUSH
8120: LD_VAR 0 1
8124: PPUSH
8125: CALL_OW 110
8129: PUSH
8130: LD_INT 1
8132: NONEQUAL
8133: AND
8134: IFFALSE 8163
// begin SetTag ( i , 1 ) ;
8136: LD_VAR 0 1
8140: PPUSH
8141: LD_INT 1
8143: PPUSH
8144: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
8148: LD_VAR 0 1
8152: PPUSH
8153: LD_INT 27
8155: PPUSH
8156: LD_INT 35
8158: PPUSH
8159: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
8163: LD_VAR 0 1
8167: PPUSH
8168: CALL_OW 110
8172: PUSH
8173: LD_INT 1
8175: EQUAL
8176: IFFALSE 8199
8178: PUSH
8179: LD_VAR 0 1
8183: PPUSH
8184: LD_INT 27
8186: PPUSH
8187: LD_INT 35
8189: PPUSH
8190: CALL_OW 297
8194: PUSH
8195: LD_INT 6
8197: LESS
8198: AND
8199: IFFALSE 8207
8201: PUSH
8202: LD_VAR 0 3
8206: AND
8207: IFFALSE 8280
// begin ComExitVehicle ( tmp ) ;
8209: LD_VAR 0 3
8213: PPUSH
8214: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8218: LD_VAR 0 3
8222: PPUSH
8223: LD_VAR 0 1
8227: PPUSH
8228: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8232: LD_INT 35
8234: PPUSH
8235: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8239: LD_VAR 0 1
8243: PPUSH
8244: CALL_OW 256
8248: PUSH
8249: LD_INT 1000
8251: EQUAL
8252: IFFALSE 8232
// ComEnterUnit ( tmp , i ) ;
8254: LD_VAR 0 3
8258: PPUSH
8259: LD_VAR 0 1
8263: PPUSH
8264: CALL_OW 120
// SetTag ( i , 0 ) ;
8268: LD_VAR 0 1
8272: PPUSH
8273: LD_INT 0
8275: PPUSH
8276: CALL_OW 109
// end ; end ;
8280: GO 8021
8282: POP
8283: POP
// end ; end ;
8284: PPOPN 4
8286: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
8287: LD_EXP 13
8291: IFFALSE 8435
8293: GO 8295
8295: DISABLE
8296: LD_INT 0
8298: PPUSH
8299: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
8300: LD_ADDR_VAR 0 2
8304: PUSH
8305: LD_EXP 52
8309: PPUSH
8310: LD_INT 21
8312: PUSH
8313: LD_INT 1
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: PUSH
8320: LD_INT 50
8322: PUSH
8323: EMPTY
8324: LIST
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PPUSH
8330: CALL_OW 72
8334: ST_TO_ADDR
// if not tmp then
8335: LD_VAR 0 2
8339: NOT
8340: IFFALSE 8344
// exit ;
8342: GO 8435
// repeat wait ( 0 0$1 ) ;
8344: LD_INT 35
8346: PPUSH
8347: CALL_OW 67
// for i in tmp do
8351: LD_ADDR_VAR 0 1
8355: PUSH
8356: LD_VAR 0 2
8360: PUSH
8361: FOR_IN
8362: IFFALSE 8426
// begin ComExit ( i ) ;
8364: LD_VAR 0 1
8368: PPUSH
8369: CALL 79445 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
8373: LD_VAR 0 1
8377: PPUSH
8378: LD_INT 14
8380: PPUSH
8381: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
8385: LD_VAR 0 1
8389: PPUSH
8390: LD_INT 14
8392: PPUSH
8393: CALL_OW 308
8397: IFFALSE 8424
// begin tmp := tmp diff i ;
8399: LD_ADDR_VAR 0 2
8403: PUSH
8404: LD_VAR 0 2
8408: PUSH
8409: LD_VAR 0 1
8413: DIFF
8414: ST_TO_ADDR
// RemoveUnit ( i ) ;
8415: LD_VAR 0 1
8419: PPUSH
8420: CALL_OW 64
// end ; end ;
8424: GO 8361
8426: POP
8427: POP
// until not tmp ;
8428: LD_VAR 0 2
8432: NOT
8433: IFFALSE 8344
// end ; end_of_file
8435: PPOPN 2
8437: END
// export function Action ; var i , un , veh , tmp ; begin
8438: LD_INT 0
8440: PPUSH
8441: PPUSH
8442: PPUSH
8443: PPUSH
8444: PPUSH
// InGameOn ;
8445: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8449: LD_INT 179
8451: PPUSH
8452: LD_INT 5
8454: PPUSH
8455: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8459: LD_ADDR_VAR 0 4
8463: PUSH
8464: LD_INT 2
8466: PPUSH
8467: LD_INT 2
8469: PPUSH
8470: LD_INT 12
8472: PPUSH
8473: LD_INT 1
8475: PPUSH
8476: LD_INT 1
8478: PPUSH
8479: LD_INT 24
8481: PPUSH
8482: LD_INT 33
8484: PPUSH
8485: CALL 386 0 7
8489: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8490: LD_VAR 0 4
8494: PPUSH
8495: LD_INT 2
8497: PPUSH
8498: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8502: LD_VAR 0 4
8506: PPUSH
8507: LD_INT 178
8509: PPUSH
8510: LD_INT 2
8512: PPUSH
8513: LD_INT 0
8515: PPUSH
8516: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8520: LD_EXP 26
8524: PPUSH
8525: LD_VAR 0 4
8529: PPUSH
8530: CALL_OW 52
// if Kamil then
8534: LD_EXP 30
8538: IFFALSE 8573
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8540: LD_EXP 30
8544: PPUSH
8545: LD_INT 207
8547: PPUSH
8548: LD_INT 37
8550: PPUSH
8551: LD_INT 0
8553: PPUSH
8554: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8558: LD_EXP 30
8562: PPUSH
8563: LD_INT 211
8565: PPUSH
8566: LD_INT 38
8568: PPUSH
8569: CALL_OW 118
// end ; if Sophia then
8573: LD_EXP 32
8577: IFFALSE 8612
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8579: LD_EXP 32
8583: PPUSH
8584: LD_INT 209
8586: PPUSH
8587: LD_INT 40
8589: PPUSH
8590: LD_INT 0
8592: PPUSH
8593: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8597: LD_EXP 32
8601: PPUSH
8602: LD_INT 211
8604: PPUSH
8605: LD_INT 38
8607: PPUSH
8608: CALL_OW 118
// end ; if Givi then
8612: LD_EXP 27
8616: IFFALSE 8651
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8618: LD_EXP 27
8622: PPUSH
8623: LD_INT 201
8625: PPUSH
8626: LD_INT 34
8628: PPUSH
8629: LD_INT 0
8631: PPUSH
8632: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8636: LD_EXP 27
8640: PPUSH
8641: LD_INT 206
8643: PPUSH
8644: LD_INT 36
8646: PPUSH
8647: CALL_OW 118
// end ; if Ibrahim then
8651: LD_EXP 29
8655: IFFALSE 8690
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8657: LD_EXP 29
8661: PPUSH
8662: LD_INT 202
8664: PPUSH
8665: LD_INT 39
8667: PPUSH
8668: LD_INT 0
8670: PPUSH
8671: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8675: LD_EXP 29
8679: PPUSH
8680: LD_INT 206
8682: PPUSH
8683: LD_INT 36
8685: PPUSH
8686: CALL_OW 118
// end ; if Markov then
8690: LD_EXP 33
8694: IFFALSE 8781
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8696: LD_ADDR_VAR 0 4
8700: PUSH
8701: LD_INT 2
8703: PPUSH
8704: LD_INT 2
8706: PPUSH
8707: LD_INT 13
8709: PPUSH
8710: LD_INT 1
8712: PPUSH
8713: LD_INT 1
8715: PPUSH
8716: LD_INT 25
8718: PPUSH
8719: LD_INT 80
8721: PUSH
8722: LD_INT 20
8724: PUSH
8725: LD_OWVAR 67
8729: MUL
8730: MINUS
8731: PPUSH
8732: CALL 386 0 7
8736: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8737: LD_VAR 0 4
8741: PPUSH
8742: LD_INT 2
8744: PPUSH
8745: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8749: LD_VAR 0 4
8753: PPUSH
8754: LD_INT 197
8756: PPUSH
8757: LD_INT 35
8759: PPUSH
8760: LD_INT 0
8762: PPUSH
8763: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8767: LD_EXP 33
8771: PPUSH
8772: LD_VAR 0 4
8776: PPUSH
8777: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8781: LD_ADDR_VAR 0 5
8785: PUSH
8786: LD_EXP 31
8790: PUSH
8791: LD_EXP 38
8795: UNION
8796: ST_TO_ADDR
// for i in tmp do
8797: LD_ADDR_VAR 0 2
8801: PUSH
8802: LD_VAR 0 5
8806: PUSH
8807: FOR_IN
8808: IFFALSE 8842
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8810: LD_VAR 0 2
8814: PPUSH
8815: LD_INT 203
8817: PPUSH
8818: LD_INT 41
8820: PPUSH
8821: LD_INT 6
8823: PPUSH
8824: LD_INT 0
8826: PPUSH
8827: CALL_OW 50
// ComHold ( i ) ;
8831: LD_VAR 0 2
8835: PPUSH
8836: CALL_OW 140
// end ;
8840: GO 8807
8842: POP
8843: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8844: LD_INT 22
8846: PUSH
8847: LD_INT 2
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: PUSH
8854: LD_INT 25
8856: PUSH
8857: LD_INT 2
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: PPUSH
8868: CALL_OW 69
8872: NOT
8873: IFFALSE 8887
// SetClass ( Heike , 2 ) ;
8875: LD_EXP 26
8879: PPUSH
8880: LD_INT 2
8882: PPUSH
8883: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8887: LD_EXP 26
8891: PPUSH
8892: LD_INT 183
8894: PPUSH
8895: LD_INT 12
8897: PPUSH
8898: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8902: LD_EXP 26
8906: PPUSH
8907: LD_INT 188
8909: PPUSH
8910: LD_INT 20
8912: PPUSH
8913: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8917: LD_EXP 26
8921: PPUSH
8922: LD_INT 191
8924: PPUSH
8925: LD_INT 25
8927: PPUSH
8928: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8932: LD_EXP 26
8936: PPUSH
8937: LD_INT 203
8939: PPUSH
8940: LD_INT 29
8942: PPUSH
8943: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8947: LD_EXP 26
8951: PPUSH
8952: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8956: LD_INT 35
8958: PPUSH
8959: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8963: LD_EXP 26
8967: PPUSH
8968: CALL_OW 310
8972: NOT
8973: IFFALSE 8956
// CenterOnUnits ( Heike ) ;
8975: LD_EXP 26
8979: PPUSH
8980: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8984: LD_ADDR_VAR 0 5
8988: PUSH
8989: LD_INT 22
8991: PUSH
8992: LD_INT 2
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: PUSH
8999: LD_INT 21
9001: PUSH
9002: LD_INT 1
9004: PUSH
9005: EMPTY
9006: LIST
9007: LIST
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: PPUSH
9013: CALL_OW 69
9017: PUSH
9018: LD_EXP 26
9022: PUSH
9023: LD_EXP 33
9027: PUSH
9028: EMPTY
9029: LIST
9030: LIST
9031: DIFF
9032: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
9033: LD_VAR 0 5
9037: PPUSH
9038: LD_EXP 26
9042: PPUSH
9043: CALL_OW 119
// if Givi then
9047: LD_EXP 27
9051: IFFALSE 9069
// ComTurnUnit ( Heike , Givi ) else
9053: LD_EXP 26
9057: PPUSH
9058: LD_EXP 27
9062: PPUSH
9063: CALL_OW 119
9067: GO 9087
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
9069: LD_EXP 26
9073: PPUSH
9074: LD_VAR 0 5
9078: PUSH
9079: LD_INT 1
9081: ARRAY
9082: PPUSH
9083: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
9087: LD_EXP 26
9091: PPUSH
9092: LD_STRING DH-Start-1
9094: PPUSH
9095: CALL_OW 88
// if Givi then
9099: LD_EXP 27
9103: IFFALSE 9150
// begin Say ( Givi , DG-Start-2 ) ;
9105: LD_EXP 27
9109: PPUSH
9110: LD_STRING DG-Start-2
9112: PPUSH
9113: CALL_OW 88
// if not Mike then
9117: LD_EXP 28
9121: NOT
9122: IFFALSE 9148
// begin Say ( Givi , DG-Start-b-3 ) ;
9124: LD_EXP 27
9128: PPUSH
9129: LD_STRING DG-Start-b-3
9131: PPUSH
9132: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
9136: LD_EXP 26
9140: PPUSH
9141: LD_STRING DH-Start-b-4
9143: PPUSH
9144: CALL_OW 88
// end ; end else
9148: GO 9215
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
9150: LD_EXP 38
9154: PPUSH
9155: LD_INT 26
9157: PUSH
9158: LD_INT 1
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PPUSH
9165: CALL_OW 72
9169: PUSH
9170: LD_INT 1
9172: ARRAY
9173: PPUSH
9174: LD_STRING DArm-Start-a-2
9176: PPUSH
9177: CALL_OW 88
9181: NOT
9182: IFFALSE 9215
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
9184: LD_EXP 38
9188: PPUSH
9189: LD_INT 26
9191: PUSH
9192: LD_INT 2
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: PPUSH
9199: CALL_OW 72
9203: PUSH
9204: LD_INT 1
9206: ARRAY
9207: PPUSH
9208: LD_STRING DArf-Start-a-2
9210: PPUSH
9211: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
9215: LD_EXP 26
9219: PPUSH
9220: LD_INT 211
9222: PPUSH
9223: LD_INT 38
9225: PPUSH
9226: CALL_OW 118
// wait ( 0 0$1 ) ;
9230: LD_INT 35
9232: PPUSH
9233: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
9237: LD_EXP 26
9241: PPUSH
9242: LD_STRING DH-Start-3
9244: PPUSH
9245: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9249: LD_EXP 26
9253: PPUSH
9254: LD_STRING DH-Start-4
9256: PPUSH
9257: CALL_OW 88
// InGameOff ;
9261: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
9265: LD_STRING Prepare
9267: PPUSH
9268: CALL_OW 337
// SaveForQuickRestart ;
9272: CALL_OW 22
// wait ( 0 0$10 ) ;
9276: LD_INT 350
9278: PPUSH
9279: CALL_OW 67
// if not Aviradze then
9283: LD_EXP 36
9287: NOT
9288: IFFALSE 9292
// exit ;
9290: GO 9532
// SetDir ( Aviradze , 4 ) ;
9292: LD_EXP 36
9296: PPUSH
9297: LD_INT 4
9299: PPUSH
9300: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
9304: LD_EXP 36
9308: PPUSH
9309: LD_INT 225
9311: PPUSH
9312: LD_INT 33
9314: PPUSH
9315: LD_INT 0
9317: PPUSH
9318: CALL_OW 48
// for i := 1 to 2 do
9322: LD_ADDR_VAR 0 2
9326: PUSH
9327: DOUBLE
9328: LD_INT 1
9330: DEC
9331: ST_TO_ADDR
9332: LD_INT 2
9334: PUSH
9335: FOR_TO
9336: IFFALSE 9467
// begin uc_side := 2 ;
9338: LD_ADDR_OWVAR 20
9342: PUSH
9343: LD_INT 2
9345: ST_TO_ADDR
// uc_nation := 0 ;
9346: LD_ADDR_OWVAR 21
9350: PUSH
9351: LD_INT 0
9353: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9354: LD_INT 0
9356: PPUSH
9357: LD_INT 12
9359: PPUSH
9360: LD_INT 1
9362: PPUSH
9363: CALL_OW 380
// hc_gallery :=  ;
9367: LD_ADDR_OWVAR 33
9371: PUSH
9372: LD_STRING 
9374: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
9375: LD_ADDR_OWVAR 26
9379: PUSH
9380: LD_STRING Artudito
9382: PUSH
9383: LD_STRING Textur
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: PUSH
9390: LD_VAR 0 2
9394: ARRAY
9395: ST_TO_ADDR
// un := CreateHuman ;
9396: LD_ADDR_VAR 0 3
9400: PUSH
9401: CALL_OW 44
9405: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9406: LD_VAR 0 3
9410: PPUSH
9411: LD_INT 224
9413: PUSH
9414: LD_INT 226
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: PUSH
9421: LD_VAR 0 2
9425: ARRAY
9426: PPUSH
9427: LD_INT 31
9429: PUSH
9430: LD_INT 35
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: PUSH
9437: LD_VAR 0 2
9441: ARRAY
9442: PPUSH
9443: LD_INT 0
9445: PPUSH
9446: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9450: LD_VAR 0 3
9454: PPUSH
9455: LD_INT 215
9457: PPUSH
9458: LD_INT 36
9460: PPUSH
9461: CALL_OW 111
// end ;
9465: GO 9335
9467: POP
9468: POP
// hc_name :=  ;
9469: LD_ADDR_OWVAR 26
9473: PUSH
9474: LD_STRING 
9476: ST_TO_ADDR
// InitHc ;
9477: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9481: LD_EXP 36
9485: PPUSH
9486: LD_INT 215
9488: PPUSH
9489: LD_INT 36
9491: PPUSH
9492: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
9496: LD_EXP 36
9500: PPUSH
9501: LD_STRING DA-Arrive-1
9503: PPUSH
9504: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
9508: LD_EXP 26
9512: PPUSH
9513: LD_STRING DH-Arrive-2
9515: PPUSH
9516: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
9520: LD_EXP 36
9524: PPUSH
9525: LD_STRING DA-Arrive-3
9527: PPUSH
9528: CALL_OW 88
// end ;
9532: LD_VAR 0 1
9536: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh , p , sex ;
9537: LD_EXP 3
9541: IFFALSE 11093
9543: GO 9545
9545: DISABLE
9546: LD_INT 0
9548: PPUSH
9549: PPUSH
9550: PPUSH
9551: PPUSH
9552: PPUSH
// begin DialogueOn ;
9553: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9557: LD_EXP 26
9561: PPUSH
9562: LD_STRING DH-base-1
9564: PPUSH
9565: CALL_OW 88
// if Markov then
9569: LD_EXP 33
9573: IFFALSE 9625
// begin Say ( Markov , DMar-base-2 ) ;
9575: LD_EXP 33
9579: PPUSH
9580: LD_STRING DMar-base-2
9582: PPUSH
9583: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9587: LD_EXP 33
9591: PPUSH
9592: LD_STRING DMar-base-3
9594: PPUSH
9595: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9599: LD_EXP 26
9603: PPUSH
9604: LD_STRING DH-base-4
9606: PPUSH
9607: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9611: LD_EXP 33
9615: PPUSH
9616: LD_STRING DMar-base-5
9618: PPUSH
9619: CALL_OW 88
// end else
9623: GO 9702
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9625: LD_EXP 38
9629: PPUSH
9630: LD_INT 26
9632: PUSH
9633: LD_INT 1
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PPUSH
9640: CALL_OW 72
9644: PUSH
9645: LD_INT 1
9647: ARRAY
9648: PPUSH
9649: LD_STRING DArm-base-a-2
9651: PPUSH
9652: CALL_OW 88
9656: NOT
9657: IFFALSE 9690
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9659: LD_EXP 38
9663: PPUSH
9664: LD_INT 26
9666: PUSH
9667: LD_INT 2
9669: PUSH
9670: EMPTY
9671: LIST
9672: LIST
9673: PPUSH
9674: CALL_OW 72
9678: PUSH
9679: LD_INT 1
9681: ARRAY
9682: PPUSH
9683: LD_STRING DArf-base-a-2
9685: PPUSH
9686: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9690: LD_EXP 26
9694: PPUSH
9695: LD_STRING DH-base-a-3
9697: PPUSH
9698: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9702: LD_EXP 36
9706: PPUSH
9707: LD_STRING DA-base-6
9709: PPUSH
9710: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9714: LD_EXP 36
9718: PPUSH
9719: LD_STRING DA-base-7
9721: PPUSH
9722: CALL_OW 88
// DialogueOff ;
9726: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9730: LD_STRING Flamethrower
9732: PPUSH
9733: CALL_OW 337
// wait ( 2 2$00 ) ;
9737: LD_INT 4200
9739: PPUSH
9740: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9744: LD_EXP 35
9748: PUSH
9749: LD_EXP 28
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PPUSH
9758: LD_INT 203
9760: PPUSH
9761: LD_INT 37
9763: PPUSH
9764: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9768: LD_INT 22
9770: PUSH
9771: LD_INT 2
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: PUSH
9778: LD_INT 92
9780: PUSH
9781: LD_INT 203
9783: PUSH
9784: LD_INT 37
9786: PUSH
9787: LD_INT 10
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: PUSH
9796: EMPTY
9797: LIST
9798: LIST
9799: PPUSH
9800: CALL_OW 69
9804: NOT
9805: IFFALSE 9845
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9807: LD_EXP 35
9811: PUSH
9812: LD_EXP 28
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PPUSH
9821: LD_EXP 26
9825: PPUSH
9826: CALL_OW 250
9830: PPUSH
9831: LD_EXP 26
9835: PPUSH
9836: CALL_OW 251
9840: PPUSH
9841: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9845: LD_INT 35
9847: PPUSH
9848: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9852: LD_INT 2
9854: PPUSH
9855: LD_EXP 35
9859: PPUSH
9860: CALL_OW 292
9864: IFFALSE 9942
9866: PUSH
9867: LD_EXP 35
9871: PPUSH
9872: LD_EXP 26
9876: PPUSH
9877: CALL_OW 296
9881: PUSH
9882: LD_INT 8
9884: LESS
9885: IFTRUE 9941
9887: PUSH
9888: LD_EXP 35
9892: PPUSH
9893: LD_INT 22
9895: PUSH
9896: LD_INT 2
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PUSH
9903: LD_INT 21
9905: PUSH
9906: LD_INT 3
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: PPUSH
9917: CALL_OW 69
9921: PPUSH
9922: LD_EXP 35
9926: PPUSH
9927: CALL_OW 74
9931: PPUSH
9932: CALL_OW 296
9936: PUSH
9937: LD_INT 7
9939: LESS
9940: OR
9941: AND
9942: IFFALSE 9959
9944: PUSH
9945: LD_EXP 35
9949: PPUSH
9950: LD_INT 10
9952: PPUSH
9953: CALL_OW 308
9957: NOT
9958: AND
9959: IFFALSE 9845
// InGameOn ;
9961: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9965: LD_EXP 35
9969: PPUSH
9970: CALL_OW 87
// if IsInUnit ( Heike ) then
9974: LD_EXP 26
9978: PPUSH
9979: CALL_OW 310
9983: IFFALSE 10001
// begin ComExit ( Heike ) ;
9985: LD_EXP 26
9989: PPUSH
9990: CALL 79445 0 1
// wait ( 0 0$1 ) ;
9994: LD_INT 35
9996: PPUSH
9997: CALL_OW 67
// end ; ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
10001: LD_EXP 35
10005: PUSH
10006: LD_EXP 28
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PPUSH
10015: LD_EXP 26
10019: PPUSH
10020: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
10024: LD_EXP 26
10028: PPUSH
10029: LD_EXP 35
10033: PPUSH
10034: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
10038: LD_INT 22
10040: PUSH
10041: LD_INT 2
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: LD_INT 91
10050: PUSH
10051: LD_EXP 35
10055: PUSH
10056: LD_INT 10
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: LIST
10063: PUSH
10064: LD_INT 21
10066: PUSH
10067: LD_INT 3
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: LIST
10078: PPUSH
10079: CALL_OW 69
10083: IFFALSE 10109
// begin Say ( Kurt , DKs-scout-1 ) ;
10085: LD_EXP 35
10089: PPUSH
10090: LD_STRING DKs-scout-1
10092: PPUSH
10093: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
10097: LD_EXP 26
10101: PPUSH
10102: LD_STRING DH-scout-2
10104: PPUSH
10105: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
10109: LD_EXP 26
10113: PPUSH
10114: CALL_OW 85
// repeat wait ( 0 0$1 ) ;
10118: LD_INT 35
10120: PPUSH
10121: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
10125: LD_EXP 26
10129: PPUSH
10130: LD_EXP 35
10134: PPUSH
10135: CALL_OW 112
// until GetDistUnits ( Heike , Kurt ) < 6 ;
10139: LD_EXP 26
10143: PPUSH
10144: LD_EXP 35
10148: PPUSH
10149: CALL_OW 296
10153: PUSH
10154: LD_INT 6
10156: LESS
10157: IFFALSE 10118
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
10159: LD_EXP 35
10163: PUSH
10164: LD_EXP 28
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: PPUSH
10173: LD_EXP 26
10177: PPUSH
10178: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
10182: LD_EXP 35
10186: PPUSH
10187: LD_STRING DKs-scout-3
10189: PPUSH
10190: CALL_OW 88
// if Kaia and GetDistUnits ( Kaia , Kurt ) < 15 then
10194: LD_EXP 31
10198: IFFALSE 10220
10200: PUSH
10201: LD_EXP 31
10205: PPUSH
10206: LD_EXP 35
10210: PPUSH
10211: CALL_OW 296
10215: PUSH
10216: LD_INT 15
10218: LESS
10219: AND
10220: IFFALSE 10445
// begin p := 1 ;
10222: LD_ADDR_VAR 0 4
10226: PUSH
10227: LD_INT 1
10229: ST_TO_ADDR
// if IsInUnit ( Kaia ) then
10230: LD_EXP 31
10234: PPUSH
10235: CALL_OW 310
10239: IFFALSE 10250
// ComExit ( Kaia ) ;
10241: LD_EXP 31
10245: PPUSH
10246: CALL 79445 0 1
// wait ( 0 0$1 ) ;
10250: LD_INT 35
10252: PPUSH
10253: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
10257: LD_EXP 31
10261: PPUSH
10262: LD_EXP 35
10266: PPUSH
10267: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
10271: LD_INT 35
10273: PPUSH
10274: CALL_OW 67
// p := Inc ( p ) ;
10278: LD_ADDR_VAR 0 4
10282: PUSH
10283: LD_VAR 0 4
10287: PPUSH
10288: CALL 80420 0 1
10292: ST_TO_ADDR
// until GetDistUnits ( Kaia , Kurt ) < 6 or p > 12 ;
10293: LD_EXP 31
10297: PPUSH
10298: LD_EXP 35
10302: PPUSH
10303: CALL_OW 296
10307: PUSH
10308: LD_INT 6
10310: LESS
10311: IFTRUE 10323
10313: PUSH
10314: LD_VAR 0 4
10318: PUSH
10319: LD_INT 12
10321: GREATER
10322: OR
10323: IFFALSE 10271
// ComTurnUnit ( Kaia , Kurt ) ;
10325: LD_EXP 31
10329: PPUSH
10330: LD_EXP 35
10334: PPUSH
10335: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
10339: LD_EXP 31
10343: PPUSH
10344: LD_STRING DK-scout-4
10346: PPUSH
10347: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
10351: LD_EXP 35
10355: PPUSH
10356: LD_EXP 31
10360: PPUSH
10361: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
10365: LD_EXP 35
10369: PPUSH
10370: LD_STRING DKs-scout-5
10372: PPUSH
10373: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
10377: LD_EXP 31
10381: PPUSH
10382: LD_STRING DK-scout-6
10384: PPUSH
10385: CALL_OW 88
// if Mike then
10389: LD_EXP 28
10393: IFFALSE 10445
// begin Say ( Mike , DM-scout-7 ) ;
10395: LD_EXP 28
10399: PPUSH
10400: LD_STRING DM-scout-7
10402: PPUSH
10403: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
10407: LD_EXP 31
10411: PPUSH
10412: LD_EXP 28
10416: PPUSH
10417: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
10421: LD_EXP 31
10425: PPUSH
10426: LD_STRING DK-scout-8
10428: PPUSH
10429: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
10433: LD_EXP 28
10437: PPUSH
10438: LD_STRING DM-scout-9
10440: PPUSH
10441: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
10445: LD_INT 184
10447: PPUSH
10448: LD_INT 100
10450: PPUSH
10451: LD_INT 2
10453: PPUSH
10454: LD_INT 12
10456: NEG
10457: PPUSH
10458: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
10462: LD_INT 184
10464: PPUSH
10465: LD_INT 100
10467: PPUSH
10468: LD_INT 2
10470: PPUSH
10471: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
10475: LD_INT 184
10477: PPUSH
10478: LD_INT 100
10480: PPUSH
10481: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
10485: LD_EXP 35
10489: PPUSH
10490: LD_STRING DKs-scout-10
10492: PPUSH
10493: CALL_OW 88
// wait ( 0 0$1 ) ;
10497: LD_INT 35
10499: PPUSH
10500: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
10504: LD_INT 144
10506: PPUSH
10507: LD_INT 65
10509: PPUSH
10510: LD_INT 2
10512: PPUSH
10513: LD_INT 12
10515: NEG
10516: PPUSH
10517: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
10521: LD_INT 144
10523: PPUSH
10524: LD_INT 65
10526: PPUSH
10527: LD_INT 2
10529: PPUSH
10530: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
10534: LD_INT 144
10536: PPUSH
10537: LD_INT 65
10539: PPUSH
10540: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
10544: LD_EXP 35
10548: PPUSH
10549: LD_STRING DKs-scout-11
10551: PPUSH
10552: CALL_OW 88
// Say ( Kurt , DKs-scout-12 ) ;
10556: LD_EXP 35
10560: PPUSH
10561: LD_STRING DKs-scout-12
10563: PPUSH
10564: CALL_OW 88
// wait ( 0 0$1 ) ;
10568: LD_INT 35
10570: PPUSH
10571: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
10575: LD_EXP 35
10579: PPUSH
10580: CALL_OW 87
// if Mike and not Givi then
10584: LD_EXP 28
10588: IFFALSE 10597
10590: PUSH
10591: LD_EXP 27
10595: NOT
10596: AND
10597: IFFALSE 10623
// begin Say ( Mike , DM-scout-a-1 ) ;
10599: LD_EXP 28
10603: PPUSH
10604: LD_STRING DM-scout-a-1
10606: PPUSH
10607: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
10611: LD_EXP 26
10615: PPUSH
10616: LD_STRING DH-scout-a-2
10618: PPUSH
10619: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10623: LD_EXP 35
10627: PUSH
10628: LD_EXP 28
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: PPUSH
10637: LD_INT 2
10639: PPUSH
10640: CALL_OW 235
// ComStop ( [ Kurt , Mike ] ) ;
10644: LD_EXP 35
10648: PUSH
10649: LD_EXP 28
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PPUSH
10658: CALL_OW 141
// InGameOff ;
10662: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
10666: LD_STRING Hill
10668: PPUSH
10669: CALL_OW 337
// Hint ( BunkerHill ) ;
10673: LD_STRING BunkerHill
10675: PPUSH
10676: CALL_OW 339
// SetAreaMapShow ( bunkerHillArea , 1 ) ;
10680: LD_INT 22
10682: PPUSH
10683: LD_INT 1
10685: PPUSH
10686: CALL_OW 424
// SetAreaMapShow ( dontGoArea , 1 ) ;
10690: LD_INT 20
10692: PPUSH
10693: LD_INT 1
10695: PPUSH
10696: CALL_OW 424
// allowToPatrol := true ;
10700: LD_ADDR_EXP 12
10704: PUSH
10705: LD_INT 1
10707: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10708: LD_INT 3150
10710: PPUSH
10711: CALL_OW 67
// InitHc ;
10715: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
10719: LD_ADDR_VAR 0 1
10723: PUSH
10724: DOUBLE
10725: LD_INT 1
10727: DEC
10728: ST_TO_ADDR
10729: LD_INT 3
10731: PUSH
10732: LD_INT 3
10734: PUSH
10735: LD_INT 2
10737: PUSH
10738: LD_INT 2
10740: PUSH
10741: EMPTY
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: PUSH
10747: LD_OWVAR 67
10751: ARRAY
10752: PUSH
10753: FOR_TO
10754: IFFALSE 11091
// begin uc_side := 2 ;
10756: LD_ADDR_OWVAR 20
10760: PUSH
10761: LD_INT 2
10763: ST_TO_ADDR
// uc_nation := 2 ;
10764: LD_ADDR_OWVAR 21
10768: PUSH
10769: LD_INT 2
10771: ST_TO_ADDR
// if i = 1 then
10772: LD_VAR 0 1
10776: PUSH
10777: LD_INT 1
10779: EQUAL
10780: IFFALSE 10792
// sex := sex_male else
10782: LD_ADDR_VAR 0 5
10786: PUSH
10787: LD_INT 1
10789: ST_TO_ADDR
10790: GO 10800
// sex := false ;
10792: LD_ADDR_VAR 0 5
10796: PUSH
10797: LD_INT 0
10799: ST_TO_ADDR
// PrepareHuman ( sex , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 , 2 ] [ Difficulty ] ) ;
10800: LD_VAR 0 5
10804: PPUSH
10805: LD_INT 1
10807: PUSH
10808: LD_INT 3
10810: PUSH
10811: LD_INT 1
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: LIST
10818: PUSH
10819: LD_VAR 0 1
10823: PUSH
10824: LD_INT 3
10826: MOD
10827: PUSH
10828: LD_INT 1
10830: PLUS
10831: ARRAY
10832: PPUSH
10833: LD_INT 3
10835: PUSH
10836: LD_INT 2
10838: PUSH
10839: LD_INT 2
10841: PUSH
10842: LD_INT 2
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: PUSH
10851: LD_OWVAR 67
10855: ARRAY
10856: PPUSH
10857: CALL_OW 380
// un := CreateHuman ;
10861: LD_ADDR_VAR 0 2
10865: PUSH
10866: CALL_OW 44
10870: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10871: LD_ADDR_EXP 38
10875: PUSH
10876: LD_EXP 38
10880: PUSH
10881: LD_VAR 0 2
10885: UNION
10886: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10887: LD_INT 2
10889: PPUSH
10890: LD_INT 2
10892: PPUSH
10893: LD_INT 13
10895: PPUSH
10896: LD_INT 2
10898: PUSH
10899: LD_INT 1
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: PUSH
10906: LD_VAR 0 1
10910: PUSH
10911: LD_INT 2
10913: MOD
10914: PUSH
10915: LD_INT 1
10917: PLUS
10918: ARRAY
10919: PPUSH
10920: LD_INT 1
10922: PPUSH
10923: LD_INT 27
10925: PUSH
10926: LD_INT 25
10928: PUSH
10929: LD_INT 27
10931: PUSH
10932: LD_INT 23
10934: PUSH
10935: LD_INT 23
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: PUSH
10945: LD_OWVAR 67
10949: PUSH
10950: LD_INT 0
10952: PPUSH
10953: LD_INT 1
10955: PPUSH
10956: CALL_OW 12
10960: PLUS
10961: ARRAY
10962: PPUSH
10963: LD_INT 77
10965: PPUSH
10966: CALL 386 0 7
// veh := CreateVehicle ;
10970: LD_ADDR_VAR 0 3
10974: PUSH
10975: CALL_OW 45
10979: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10980: LD_VAR 0 3
10984: PPUSH
10985: LD_INT 2
10987: PPUSH
10988: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
10992: LD_INT 35
10994: PPUSH
10995: CALL_OW 67
// until PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10999: LD_VAR 0 3
11003: PPUSH
11004: LD_INT 178
11006: PPUSH
11007: LD_INT 2
11009: PPUSH
11010: LD_INT 2
11012: PPUSH
11013: LD_INT 0
11015: PPUSH
11016: CALL_OW 50
11020: IFFALSE 10992
// PlaceHumanInUnit ( un , veh ) ;
11022: LD_VAR 0 2
11026: PPUSH
11027: LD_VAR 0 3
11031: PPUSH
11032: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
11036: LD_VAR 0 2
11040: PPUSH
11041: LD_INT 183
11043: PPUSH
11044: LD_INT 11
11046: PPUSH
11047: CALL_OW 111
// if i = 1 then
11051: LD_VAR 0 1
11055: PUSH
11056: LD_INT 1
11058: EQUAL
11059: IFFALSE 11082
// begin CenterOnUnits ( un ) ;
11061: LD_VAR 0 2
11065: PPUSH
11066: CALL_OW 85
// Say ( un , DArSol-Arrival-1 ) ;
11070: LD_VAR 0 2
11074: PPUSH
11075: LD_STRING DArSol-Arrival-1
11077: PPUSH
11078: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
11082: LD_INT 70
11084: PPUSH
11085: CALL_OW 67
// end ;
11089: GO 10753
11091: POP
11092: POP
// end ;
11093: PPOPN 5
11095: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
11096: LD_EXP 4
11100: IFFALSE 11113
11102: PUSH
11103: LD_EXP 36
11107: PPUSH
11108: CALL_OW 302
11112: AND
11113: IFFALSE 11162
11115: GO 11117
11117: DISABLE
// begin DialogueOn ;
11118: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
11122: LD_EXP 36
11126: PPUSH
11127: LD_STRING DA-lab-1
11129: PPUSH
11130: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
11134: LD_EXP 36
11138: PPUSH
11139: LD_STRING DA-lab-2
11141: PPUSH
11142: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
11146: LD_EXP 26
11150: PPUSH
11151: LD_STRING DH-lab-3
11153: PPUSH
11154: CALL_OW 88
// DialogueOff ;
11158: CALL_OW 7
// end ;
11162: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
11163: LD_INT 17
11165: PPUSH
11166: LD_INT 2
11168: PPUSH
11169: CALL_OW 321
11173: PUSH
11174: LD_INT 2
11176: EQUAL
11177: IFFALSE 11309
11179: GO 11181
11181: DISABLE
11182: LD_INT 0
11184: PPUSH
// begin DialogueOn ;
11185: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
11189: LD_EXP 36
11193: PPUSH
11194: LD_STRING DA-Cam-1
11196: PPUSH
11197: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
11201: LD_EXP 36
11205: PPUSH
11206: LD_STRING DA-Cam-2
11208: PPUSH
11209: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
11213: LD_EXP 36
11217: PPUSH
11218: LD_STRING DA-Cam-3
11220: PPUSH
11221: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
11225: LD_EXP 26
11229: PPUSH
11230: LD_STRING DH-Cam-4
11232: PPUSH
11233: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
11237: LD_EXP 31
11241: PPUSH
11242: LD_STRING DK-Cam-5
11244: PPUSH
11245: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
11249: LD_EXP 31
11253: PPUSH
11254: LD_STRING DK-Cam-6
11256: PPUSH
11257: CALL_OW 88
// DialogueOff ;
11261: CALL_OW 7
// Query ( Camera ) ;
11265: LD_STRING Camera
11267: PPUSH
11268: CALL_OW 97
// hiddenCameraAllowed := true ;
11272: LD_ADDR_EXP 5
11276: PUSH
11277: LD_INT 1
11279: ST_TO_ADDR
// for i in camAreas do
11280: LD_ADDR_VAR 0 1
11284: PUSH
11285: LD_EXP 8
11289: PUSH
11290: FOR_IN
11291: IFFALSE 11307
// SetAreaMapShow ( i , 1 ) ;
11293: LD_VAR 0 1
11297: PPUSH
11298: LD_INT 1
11300: PPUSH
11301: CALL_OW 424
11305: GO 11290
11307: POP
11308: POP
// end ;
11309: PPOPN 1
11311: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
11312: LD_EXP 8
11316: NOT
11317: IFFALSE 11325
11319: PUSH
11320: LD_EXP 5
11324: AND
11325: IFFALSE 11423
11327: GO 11329
11329: DISABLE
11330: LD_INT 0
11332: PPUSH
// begin stop_talking := true ;
11333: LD_ADDR_OWVAR 56
11337: PUSH
11338: LD_INT 1
11340: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
11341: LD_ADDR_VAR 0 1
11345: PUSH
11346: LD_INT 22
11348: PUSH
11349: LD_INT 2
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: PUSH
11356: LD_INT 21
11358: PUSH
11359: LD_INT 1
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PUSH
11366: LD_INT 23
11368: PUSH
11369: LD_INT 2
11371: PUSH
11372: EMPTY
11373: LIST
11374: LIST
11375: PUSH
11376: EMPTY
11377: LIST
11378: LIST
11379: LIST
11380: PPUSH
11381: CALL_OW 69
11385: PUSH
11386: FOR_IN
11387: IFFALSE 11406
// AddExperience ( i , 2 , 450 ) ;
11389: LD_VAR 0 1
11393: PPUSH
11394: LD_INT 2
11396: PPUSH
11397: LD_INT 450
11399: PPUSH
11400: CALL_OW 492
11404: GO 11386
11406: POP
11407: POP
// stop_talking := false ;
11408: LD_ADDR_OWVAR 56
11412: PUSH
11413: LD_INT 0
11415: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
11416: LD_STRING ACH_CAMERA
11418: PPUSH
11419: CALL_OW 543
// end ;
11423: PPOPN 1
11425: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
11426: LD_EXP 9
11430: IFFALSE 11439
11432: PUSH
11433: LD_EXP 11
11437: NOT
11438: AND
11439: IFFALSE 11498
11441: GO 11443
11443: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
11444: LD_EXP 9
11448: PPUSH
11449: CALL_OW 250
11453: PPUSH
11454: LD_EXP 9
11458: PPUSH
11459: CALL_OW 251
11463: PPUSH
11464: LD_INT 2
11466: PPUSH
11467: LD_INT 6
11469: NEG
11470: PPUSH
11471: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
11475: LD_EXP 9
11479: PPUSH
11480: CALL_OW 87
// wait ( 0 0$1 ) ;
11484: LD_INT 35
11486: PPUSH
11487: CALL_OW 67
// YouLost ( Spotted ) ;
11491: LD_STRING Spotted
11493: PPUSH
11494: CALL_OW 104
// end ;
11498: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
11499: LD_INT 3
11501: PUSH
11502: LD_INT 6
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: PPUSH
11509: LD_INT 2
11511: PPUSH
11512: LD_EXP 48
11516: PPUSH
11517: CALL 1054 0 3
11521: IFFALSE 11554
11523: GO 11525
11525: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
11526: LD_ADDR_EXP 9
11530: PUSH
11531: LD_INT 3
11533: PUSH
11534: LD_INT 6
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: PPUSH
11541: LD_INT 2
11543: PPUSH
11544: LD_EXP 48
11548: PPUSH
11549: CALL 1054 0 3
11553: ST_TO_ADDR
11554: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
11555: LD_INT 22
11557: PUSH
11558: LD_INT 6
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PUSH
11565: LD_INT 30
11567: PUSH
11568: LD_INT 32
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PUSH
11575: LD_INT 3
11577: PUSH
11578: LD_INT 24
11580: PUSH
11581: LD_INT 1000
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: LIST
11596: PPUSH
11597: CALL_OW 69
11601: IFFALSE 11662
11603: GO 11605
11605: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
11606: LD_ADDR_EXP 9
11610: PUSH
11611: LD_INT 22
11613: PUSH
11614: LD_INT 6
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: PUSH
11621: LD_INT 30
11623: PUSH
11624: LD_INT 32
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: PUSH
11631: LD_INT 3
11633: PUSH
11634: LD_INT 24
11636: PUSH
11637: LD_INT 1000
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: PUSH
11644: EMPTY
11645: LIST
11646: LIST
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: LIST
11652: PPUSH
11653: CALL_OW 69
11657: PUSH
11658: LD_INT 1
11660: ARRAY
11661: ST_TO_ADDR
11662: END
// every 0 0$1 trigger russianAlert and FilterUnitsInArea ( kirovBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , towers , noncombat ;
11663: LD_EXP 9
11667: IFFALSE 11709
11669: PUSH
11670: LD_INT 21
11672: PPUSH
11673: LD_INT 21
11675: PUSH
11676: LD_INT 3
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: PUSH
11683: LD_INT 3
11685: PUSH
11686: LD_INT 24
11688: PUSH
11689: LD_INT 1000
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: PPUSH
11704: CALL_OW 70
11708: AND
11709: IFFALSE 11948
11711: GO 11713
11713: DISABLE
11714: LD_INT 0
11716: PPUSH
11717: PPUSH
11718: PPUSH
11719: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11720: LD_ADDR_VAR 0 4
11724: PUSH
11725: LD_EXP 43
11729: PUSH
11730: LD_EXP 45
11734: PUSH
11735: LD_EXP 46
11739: UNION
11740: PPUSH
11741: LD_INT 3
11743: PUSH
11744: LD_INT 25
11746: PUSH
11747: LD_INT 1
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PUSH
11754: EMPTY
11755: LIST
11756: LIST
11757: PPUSH
11758: CALL_OW 72
11762: UNION
11763: ST_TO_ADDR
// for i in noncombat do
11764: LD_ADDR_VAR 0 1
11768: PUSH
11769: LD_VAR 0 4
11773: PUSH
11774: FOR_IN
11775: IFFALSE 11871
// begin if IsInUnit ( i ) then
11777: LD_VAR 0 1
11781: PPUSH
11782: CALL_OW 310
11786: IFFALSE 11797
// ComExitBuilding ( i ) ;
11788: LD_VAR 0 1
11792: PPUSH
11793: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
11797: LD_VAR 0 1
11801: PPUSH
11802: LD_INT 114
11804: PPUSH
11805: LD_INT 97
11807: PPUSH
11808: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
11812: LD_VAR 0 1
11816: PPUSH
11817: LD_INT 99
11819: PPUSH
11820: LD_INT 128
11822: PPUSH
11823: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
11827: LD_VAR 0 1
11831: PPUSH
11832: LD_INT 91
11834: PPUSH
11835: LD_INT 145
11837: PPUSH
11838: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
11842: LD_VAR 0 1
11846: PPUSH
11847: LD_INT 82
11849: PPUSH
11850: LD_INT 153
11852: PPUSH
11853: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
11857: LD_VAR 0 1
11861: PPUSH
11862: LD_INT 16
11864: PPUSH
11865: CALL_OW 173
// end ;
11869: GO 11774
11871: POP
11872: POP
// if not allowHeikeAttack then
11873: LD_EXP 11
11877: NOT
11878: IFFALSE 11882
// exit ;
11880: GO 11948
// wait ( 0 0$05 ) ;
11882: LD_INT 175
11884: PPUSH
11885: CALL_OW 67
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11889: LD_EXP 41
11893: PPUSH
11894: LD_STRING D9a-Kur-1
11896: PPUSH
11897: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11901: LD_EXP 44
11905: PPUSH
11906: LD_STRING D9a-Bur-1
11908: PPUSH
11909: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11913: LD_EXP 41
11917: PPUSH
11918: LD_STRING D9a-Kur-2
11920: PPUSH
11921: CALL_OW 94
// omicronFall := true ;
11925: LD_ADDR_EXP 13
11929: PUSH
11930: LD_INT 1
11932: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11933: LD_INT 105
11935: PPUSH
11936: CALL_OW 67
// retreatFromOmicron := true ;
11940: LD_ADDR_EXP 20
11944: PUSH
11945: LD_INT 1
11947: ST_TO_ADDR
// end ;
11948: PPOPN 4
11950: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11951: LD_INT 16
11953: PPUSH
11954: LD_INT 3
11956: PUSH
11957: LD_INT 22
11959: PUSH
11960: LD_INT 2
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: PUSH
11971: LD_INT 23
11973: PUSH
11974: LD_INT 3
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: PPUSH
11985: CALL_OW 70
11989: IFFALSE 12072
11991: GO 11993
11993: DISABLE
11994: LD_INT 0
11996: PPUSH
// begin enable ;
11997: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11998: LD_ADDR_VAR 0 1
12002: PUSH
12003: LD_INT 16
12005: PPUSH
12006: LD_INT 3
12008: PUSH
12009: LD_INT 22
12011: PUSH
12012: LD_INT 2
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PUSH
12023: LD_INT 23
12025: PUSH
12026: LD_INT 3
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: PPUSH
12037: CALL_OW 70
12041: PUSH
12042: FOR_IN
12043: IFFALSE 12070
// begin escapeCounter := escapeCounter + 1 ;
12045: LD_ADDR_EXP 19
12049: PUSH
12050: LD_EXP 19
12054: PUSH
12055: LD_INT 1
12057: PLUS
12058: ST_TO_ADDR
// RemoveUnit ( i ) ;
12059: LD_VAR 0 1
12063: PPUSH
12064: CALL_OW 64
// end ;
12068: GO 12042
12070: POP
12071: POP
// end ;
12072: PPOPN 1
12074: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
12075: LD_OWVAR 1
12079: PUSH
12080: LD_INT 13650
12082: PUSH
12083: LD_INT 0
12085: PPUSH
12086: LD_INT 3150
12088: PPUSH
12089: CALL_OW 12
12093: PLUS
12094: GREATEREQUAL
12095: IFFALSE 12104
12097: GO 12099
12099: DISABLE
// SmallAmericanReinforcements ;
12100: CALL 7249 0 0
12104: END
// every 0 0$1 trigger tick >= [ 15 15$00 , 14 14$00 , 13 13$00 , 12 12$00 ] [ Difficulty ] do
12105: LD_OWVAR 1
12109: PUSH
12110: LD_INT 31500
12112: PUSH
12113: LD_INT 29400
12115: PUSH
12116: LD_INT 27300
12118: PUSH
12119: LD_INT 25200
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: PUSH
12128: LD_OWVAR 67
12132: ARRAY
12133: GREATEREQUAL
12134: IFFALSE 12199
12136: GO 12138
12138: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
12139: LD_EXP 49
12143: PPUSH
12144: LD_INT 21
12146: PUSH
12147: LD_INT 2
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PPUSH
12154: CALL_OW 72
12158: PPUSH
12159: LD_INT 62
12161: PPUSH
12162: LD_INT 22
12164: PPUSH
12165: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
12169: LD_EXP 50
12173: PPUSH
12174: LD_INT 69
12176: PPUSH
12177: LD_INT 27
12179: PPUSH
12180: CALL_OW 111
// wait ( 1 1$00 ) ;
12184: LD_INT 2100
12186: PPUSH
12187: CALL_OW 67
// startAttackOnOmicron := true ;
12191: LD_ADDR_EXP 6
12195: PUSH
12196: LD_INT 1
12198: ST_TO_ADDR
// end ;
12199: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
12200: LD_EXP 22
12204: PUSH
12205: LD_INT 0
12207: EQUAL
12208: IFFALSE 14280
12210: GO 12212
12212: DISABLE
12213: LD_INT 0
12215: PPUSH
12216: PPUSH
12217: PPUSH
12218: PPUSH
12219: PPUSH
12220: PPUSH
12221: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
12222: LD_INT 5
12224: PPUSH
12225: LD_INT 2
12227: PPUSH
12228: CALL_OW 343
// PrepareOmarForces ;
12232: CALL 1658 0 0
// wait ( 0 0$03 ) ;
12236: LD_INT 105
12238: PPUSH
12239: CALL_OW 67
// allowHeikeAttack := true ;
12243: LD_ADDR_EXP 11
12247: PUSH
12248: LD_INT 1
12250: ST_TO_ADDR
// activeGrishkoAI := false ;
12251: LD_ADDR_EXP 10
12255: PUSH
12256: LD_INT 0
12258: ST_TO_ADDR
// SetAreaMapShow ( dontGoArea , 0 ) ;
12259: LD_INT 20
12261: PPUSH
12262: LD_INT 0
12264: PPUSH
12265: CALL_OW 424
// if not hillBase then
12269: LD_EXP 15
12273: NOT
12274: IFFALSE 12283
// ChangeMissionObjectives ( HillDone ) ;
12276: LD_STRING HillDone
12278: PPUSH
12279: CALL_OW 337
// CenterOnUnits ( Omar ) ;
12283: LD_EXP 34
12287: PPUSH
12288: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
12292: LD_ADDR_VAR 0 1
12296: PUSH
12297: LD_INT 22
12299: PUSH
12300: LD_INT 2
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: PUSH
12307: LD_INT 21
12309: PUSH
12310: LD_INT 1
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: PPUSH
12321: CALL_OW 69
12325: PUSH
12326: FOR_IN
12327: IFFALSE 12351
// if HasTask ( i ) then
12329: LD_VAR 0 1
12333: PPUSH
12334: CALL_OW 314
12338: IFFALSE 12349
// ComHold ( i ) ;
12340: LD_VAR 0 1
12344: PPUSH
12345: CALL_OW 140
12349: GO 12326
12351: POP
12352: POP
// DialogueOn ;
12353: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
12357: LD_EXP 34
12361: PPUSH
12362: LD_STRING DO-assault-1
12364: PPUSH
12365: CALL_OW 94
// DialogueOff ;
12369: CALL_OW 7
// game_speed := 4 ;
12373: LD_ADDR_OWVAR 65
12377: PUSH
12378: LD_INT 4
12380: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
12381: LD_ADDR_VAR 0 1
12385: PUSH
12386: LD_EXP 47
12390: PPUSH
12391: LD_INT 3
12393: PUSH
12394: LD_INT 54
12396: PUSH
12397: EMPTY
12398: LIST
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: PPUSH
12404: CALL_OW 72
12408: PUSH
12409: FOR_IN
12410: IFFALSE 12429
// ComMoveXY ( i , 226 , 114 ) ;
12412: LD_VAR 0 1
12416: PPUSH
12417: LD_INT 226
12419: PPUSH
12420: LD_INT 114
12422: PPUSH
12423: CALL_OW 111
12427: GO 12409
12429: POP
12430: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
12431: LD_EXP 42
12435: PPUSH
12436: LD_INT 22
12438: PUSH
12439: LD_INT 6
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: PUSH
12446: LD_INT 30
12448: PUSH
12449: LD_INT 4
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: PPUSH
12460: CALL_OW 69
12464: PPUSH
12465: LD_EXP 42
12469: PPUSH
12470: CALL_OW 74
12474: PPUSH
12475: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
12479: LD_STRING Attack
12481: PPUSH
12482: CALL_OW 337
// music_class := music_combat ;
12486: LD_ADDR_OWVAR 72
12490: PUSH
12491: LD_INT 1
12493: ST_TO_ADDR
// music_nat := 4 ;
12494: LD_ADDR_OWVAR 71
12498: PUSH
12499: LD_INT 4
12501: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
12502: LD_INT 5
12504: PPUSH
12505: LD_EXP 42
12509: PPUSH
12510: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12514: LD_INT 6
12516: PPUSH
12517: LD_EXP 39
12521: PPUSH
12522: LD_INT 25
12524: PUSH
12525: LD_INT 1
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PPUSH
12532: CALL_OW 72
12536: PUSH
12537: LD_INT 4
12539: ARRAY
12540: PPUSH
12541: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
12545: LD_ADDR_VAR 0 1
12549: PUSH
12550: LD_EXP 39
12554: PPUSH
12555: LD_INT 3
12557: PUSH
12558: LD_INT 25
12560: PUSH
12561: LD_INT 4
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PPUSH
12572: CALL_OW 72
12576: PUSH
12577: FOR_IN
12578: IFFALSE 12597
// ComAgressiveMove ( i , 221 , 110 ) ;
12580: LD_VAR 0 1
12584: PPUSH
12585: LD_INT 221
12587: PPUSH
12588: LD_INT 110
12590: PPUSH
12591: CALL_OW 114
12595: GO 12577
12597: POP
12598: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
12599: LD_EXP 39
12603: PPUSH
12604: LD_INT 25
12606: PUSH
12607: LD_INT 4
12609: PUSH
12610: EMPTY
12611: LIST
12612: LIST
12613: PPUSH
12614: CALL_OW 72
12618: PPUSH
12619: LD_INT 214
12621: PPUSH
12622: LD_INT 124
12624: PPUSH
12625: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
12629: LD_EXP 39
12633: PPUSH
12634: LD_INT 25
12636: PUSH
12637: LD_INT 1
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: PPUSH
12644: CALL_OW 72
12648: PUSH
12649: LD_INT 4
12651: ARRAY
12652: PPUSH
12653: LD_INT 214
12655: PPUSH
12656: LD_INT 114
12658: PPUSH
12659: LD_INT 0
12661: PPUSH
12662: CALL_OW 132
// if IsOk ( Grishko ) then
12666: LD_EXP 42
12670: PPUSH
12671: CALL_OW 302
12675: IFFALSE 12701
// begin SayRadio ( Grishko , D9-Gri-1 ) ;
12677: LD_EXP 42
12681: PPUSH
12682: LD_STRING D9-Gri-1
12684: PPUSH
12685: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
12689: LD_EXP 41
12693: PPUSH
12694: LD_STRING D9-Kur-1
12696: PPUSH
12697: CALL_OW 94
// end ; wait ( 0 0$1 ) ;
12701: LD_INT 35
12703: PPUSH
12704: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
12708: LD_EXP 34
12712: PPUSH
12713: LD_INT 233
12715: PPUSH
12716: LD_INT 130
12718: PPUSH
12719: CALL_OW 114
// if IsOk ( Grishko ) then
12723: LD_EXP 42
12727: PPUSH
12728: CALL_OW 302
12732: IFFALSE 12758
// begin SayRadio ( Grishko , D9-Gri-2 ) ;
12734: LD_EXP 42
12738: PPUSH
12739: LD_STRING D9-Gri-2
12741: PPUSH
12742: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12746: LD_EXP 41
12750: PPUSH
12751: LD_STRING D9-Kur-2
12753: PPUSH
12754: CALL_OW 94
// end ; ComExitBuilding ( Grishko ) ;
12758: LD_EXP 42
12762: PPUSH
12763: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
12767: LD_EXP 42
12771: PPUSH
12772: LD_INT 211
12774: PPUSH
12775: LD_INT 104
12777: PPUSH
12778: CALL_OW 171
// AddComHold ( Grishko ) ;
12782: LD_EXP 42
12786: PPUSH
12787: CALL_OW 200
// repeat wait ( 3 ) ;
12791: LD_INT 3
12793: PPUSH
12794: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
12798: LD_EXP 42
12802: PPUSH
12803: CALL_OW 310
12807: NOT
12808: IFFALSE 12791
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
12810: LD_EXP 39
12814: PPUSH
12815: LD_INT 34
12817: PUSH
12818: LD_INT 26
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PPUSH
12825: CALL_OW 72
12829: PPUSH
12830: LD_EXP 42
12834: PPUSH
12835: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12839: LD_EXP 39
12843: PPUSH
12844: LD_INT 34
12846: PUSH
12847: LD_INT 26
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: PPUSH
12854: CALL_OW 72
12858: PPUSH
12859: LD_INT 215
12861: PPUSH
12862: LD_INT 106
12864: PPUSH
12865: CALL_OW 174
// repeat wait ( 3 ) ;
12869: LD_INT 3
12871: PPUSH
12872: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12876: LD_EXP 42
12880: PPUSH
12881: CALL_OW 256
12885: PUSH
12886: LD_INT 1000
12888: LESS
12889: IFFALSE 12869
// NormalAttack ( 5 , Grishko ) ;
12891: LD_INT 5
12893: PPUSH
12894: LD_EXP 42
12898: PPUSH
12899: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12903: LD_INT 6
12905: PPUSH
12906: LD_EXP 39
12910: PPUSH
12911: LD_INT 25
12913: PUSH
12914: LD_INT 1
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: PPUSH
12921: CALL_OW 72
12925: PUSH
12926: LD_INT 4
12928: ARRAY
12929: PPUSH
12930: CALL_OW 472
// if IsOk ( Grishko ) then
12934: LD_EXP 42
12938: PPUSH
12939: CALL_OW 302
12943: IFFALSE 12969
// begin SayRadio ( Grishko , D9-Gri-3 ) ;
12945: LD_EXP 42
12949: PPUSH
12950: LD_STRING D9-Gri-3
12952: PPUSH
12953: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12957: LD_EXP 41
12961: PPUSH
12962: LD_STRING D9-Kur-3
12964: PPUSH
12965: CALL_OW 94
// end ; music_class := music_auto ;
12969: LD_ADDR_OWVAR 72
12973: PUSH
12974: LD_INT 0
12976: ST_TO_ADDR
// music_nat := music_auto ;
12977: LD_ADDR_OWVAR 71
12981: PUSH
12982: LD_INT 0
12984: ST_TO_ADDR
// for i in omarSquad do
12985: LD_ADDR_VAR 0 1
12989: PUSH
12990: LD_EXP 39
12994: PUSH
12995: FOR_IN
12996: IFFALSE 13140
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12998: LD_VAR 0 1
13002: PPUSH
13003: CALL_OW 247
13007: PUSH
13008: LD_INT 2
13010: EQUAL
13011: IFFALSE 13028
13013: PUSH
13014: LD_VAR 0 1
13018: PPUSH
13019: CALL_OW 256
13023: PUSH
13024: LD_INT 1000
13026: LESS
13027: AND
13028: IFFALSE 13094
// begin driver := IsDrivenBy ( i ) ;
13030: LD_ADDR_VAR 0 2
13034: PUSH
13035: LD_VAR 0 1
13039: PPUSH
13040: CALL_OW 311
13044: ST_TO_ADDR
// veh := i ;
13045: LD_ADDR_VAR 0 3
13049: PUSH
13050: LD_VAR 0 1
13054: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
13055: LD_VAR 0 2
13059: PPUSH
13060: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
13064: LD_VAR 0 2
13068: PPUSH
13069: LD_VAR 0 3
13073: PPUSH
13074: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
13078: LD_VAR 0 2
13082: PPUSH
13083: LD_VAR 0 3
13087: PPUSH
13088: CALL_OW 180
// end else
13092: GO 13138
// if GetLives ( i ) < 500 then
13094: LD_VAR 0 1
13098: PPUSH
13099: CALL_OW 256
13103: PUSH
13104: LD_INT 500
13106: LESS
13107: IFFALSE 13138
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
13109: LD_EXP 39
13113: PPUSH
13114: LD_INT 25
13116: PUSH
13117: LD_INT 4
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: PPUSH
13124: CALL_OW 72
13128: PPUSH
13129: LD_VAR 0 1
13133: PPUSH
13134: CALL_OW 188
// end ; end ;
13138: GO 12995
13140: POP
13141: POP
// repeat wait ( 0 0$1 ) ;
13142: LD_INT 35
13144: PPUSH
13145: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
13149: LD_EXP 39
13153: PPUSH
13154: LD_INT 3
13156: PUSH
13157: LD_INT 24
13159: PUSH
13160: LD_INT 1000
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: PUSH
13171: LD_INT 21
13173: PUSH
13174: LD_INT 2
13176: PUSH
13177: EMPTY
13178: LIST
13179: LIST
13180: PUSH
13181: EMPTY
13182: LIST
13183: LIST
13184: PPUSH
13185: CALL_OW 72
13189: NOT
13190: IFFALSE 13221
13192: PUSH
13193: LD_EXP 39
13197: PPUSH
13198: LD_INT 3
13200: PUSH
13201: LD_INT 24
13203: PUSH
13204: LD_INT 250
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: PUSH
13211: EMPTY
13212: LIST
13213: LIST
13214: PPUSH
13215: CALL_OW 72
13219: NOT
13220: AND
13221: IFFALSE 13142
// wait ( 0 0$2 ) ;
13223: LD_INT 70
13225: PPUSH
13226: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
13230: LD_ADDR_VAR 0 5
13234: PUSH
13235: LD_EXP 39
13239: PPUSH
13240: LD_INT 58
13242: PUSH
13243: EMPTY
13244: LIST
13245: PUSH
13246: LD_INT 21
13248: PUSH
13249: LD_INT 2
13251: PUSH
13252: EMPTY
13253: LIST
13254: LIST
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: PPUSH
13260: CALL_OW 72
13264: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
13265: LD_ADDR_VAR 0 6
13269: PUSH
13270: LD_EXP 39
13274: PPUSH
13275: LD_INT 25
13277: PUSH
13278: LD_INT 3
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: PUSH
13285: LD_INT 3
13287: PUSH
13288: LD_INT 55
13290: PUSH
13291: EMPTY
13292: LIST
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PPUSH
13302: CALL_OW 72
13306: ST_TO_ADDR
// for i := 1 to tmp do
13307: LD_ADDR_VAR 0 1
13311: PUSH
13312: DOUBLE
13313: LD_INT 1
13315: DEC
13316: ST_TO_ADDR
13317: LD_VAR 0 5
13321: PUSH
13322: FOR_TO
13323: IFFALSE 13353
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
13325: LD_VAR 0 6
13329: PUSH
13330: LD_VAR 0 1
13334: ARRAY
13335: PPUSH
13336: LD_VAR 0 5
13340: PUSH
13341: LD_VAR 0 1
13345: ARRAY
13346: PPUSH
13347: CALL_OW 120
13351: GO 13322
13353: POP
13354: POP
// wait ( 0 0$5 ) ;
13355: LD_INT 175
13357: PPUSH
13358: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
13362: LD_EXP 39
13366: PPUSH
13367: LD_INT 199
13369: PPUSH
13370: LD_INT 141
13372: PPUSH
13373: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
13377: LD_EXP 34
13381: PPUSH
13382: LD_INT 190
13384: PPUSH
13385: LD_INT 143
13387: PPUSH
13388: CALL_OW 114
// AddComHold ( Omar ) ;
13392: LD_EXP 34
13396: PPUSH
13397: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
13401: LD_EXP 39
13405: PPUSH
13406: LD_INT 2
13408: PUSH
13409: LD_INT 25
13411: PUSH
13412: LD_INT 1
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PUSH
13419: LD_INT 25
13421: PUSH
13422: LD_INT 4
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: LIST
13433: PPUSH
13434: CALL_OW 72
13438: PPUSH
13439: LD_INT 161
13441: PPUSH
13442: LD_INT 130
13444: PPUSH
13445: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
13449: LD_EXP 39
13453: PPUSH
13454: LD_INT 25
13456: PUSH
13457: LD_INT 1
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PPUSH
13464: CALL_OW 72
13468: PPUSH
13469: LD_INT 163
13471: PPUSH
13472: LD_INT 122
13474: PPUSH
13475: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
13479: LD_EXP 39
13483: PPUSH
13484: LD_INT 25
13486: PUSH
13487: LD_INT 1
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PPUSH
13494: CALL_OW 72
13498: PUSH
13499: LD_INT 4
13501: ARRAY
13502: PPUSH
13503: LD_INT 165
13505: PPUSH
13506: LD_INT 118
13508: PPUSH
13509: LD_INT 0
13511: PPUSH
13512: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
13516: LD_EXP 39
13520: PPUSH
13521: LD_INT 25
13523: PUSH
13524: LD_INT 1
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: PPUSH
13531: CALL_OW 72
13535: PUSH
13536: LD_INT 4
13538: ARRAY
13539: PPUSH
13540: LD_INT 159
13542: PPUSH
13543: LD_INT 116
13545: PPUSH
13546: LD_INT 0
13548: PPUSH
13549: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
13553: LD_EXP 39
13557: PPUSH
13558: LD_INT 21
13560: PUSH
13561: LD_INT 2
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: PPUSH
13568: CALL_OW 72
13572: PPUSH
13573: LD_INT 169
13575: PPUSH
13576: LD_INT 114
13578: PPUSH
13579: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
13583: LD_INT 35
13585: PPUSH
13586: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
13590: LD_ADDR_VAR 0 5
13594: PUSH
13595: LD_EXP 39
13599: PPUSH
13600: LD_INT 25
13602: PUSH
13603: LD_INT 1
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PPUSH
13610: CALL_OW 72
13614: ST_TO_ADDR
// for i in tmp do
13615: LD_ADDR_VAR 0 1
13619: PUSH
13620: LD_VAR 0 5
13624: PUSH
13625: FOR_IN
13626: IFFALSE 13727
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
13628: LD_VAR 0 1
13632: PPUSH
13633: CALL_OW 256
13637: PUSH
13638: LD_INT 600
13640: LESS
13641: IFFALSE 13664
13643: PUSH
13644: LD_VAR 0 1
13648: PPUSH
13649: LD_INT 161
13651: PPUSH
13652: LD_INT 130
13654: PPUSH
13655: CALL_OW 297
13659: PUSH
13660: LD_INT 6
13662: GREATER
13663: AND
13664: IFFALSE 13681
// ComMoveXY ( i , 161 , 130 ) ;
13666: LD_VAR 0 1
13670: PPUSH
13671: LD_INT 161
13673: PPUSH
13674: LD_INT 130
13676: PPUSH
13677: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
13681: LD_VAR 0 1
13685: PPUSH
13686: CALL_OW 256
13690: PUSH
13691: LD_INT 1000
13693: EQUAL
13694: IFFALSE 13708
13696: PUSH
13697: LD_VAR 0 1
13701: PPUSH
13702: CALL_OW 314
13706: NOT
13707: AND
13708: IFFALSE 13725
// ComAgressiveMove ( i , 160 , 109 ) ;
13710: LD_VAR 0 1
13714: PPUSH
13715: LD_INT 160
13717: PPUSH
13718: LD_INT 109
13720: PPUSH
13721: CALL_OW 114
// end ;
13725: GO 13625
13727: POP
13728: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
13729: LD_ADDR_VAR 0 5
13733: PUSH
13734: LD_EXP 39
13738: PPUSH
13739: LD_INT 21
13741: PUSH
13742: LD_INT 2
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: PPUSH
13749: CALL_OW 72
13753: ST_TO_ADDR
// for i in tmp do
13754: LD_ADDR_VAR 0 1
13758: PUSH
13759: LD_VAR 0 5
13763: PUSH
13764: FOR_IN
13765: IFFALSE 14041
// begin tmp2 := IsDrivenBy ( i ) ;
13767: LD_ADDR_VAR 0 6
13771: PUSH
13772: LD_VAR 0 1
13776: PPUSH
13777: CALL_OW 311
13781: ST_TO_ADDR
// if not tmp2 then
13782: LD_VAR 0 6
13786: NOT
13787: IFFALSE 13791
// continue ;
13789: GO 13764
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
13791: LD_VAR 0 1
13795: PPUSH
13796: CALL_OW 256
13800: PUSH
13801: LD_INT 600
13803: GREATEREQUAL
13804: IFFALSE 13821
13806: PUSH
13807: LD_VAR 0 1
13811: PPUSH
13812: CALL_OW 110
13816: PUSH
13817: LD_INT 1
13819: EQUAL
13820: AND
13821: IFFALSE 13835
// SetTag ( i , 0 ) ;
13823: LD_VAR 0 1
13827: PPUSH
13828: LD_INT 0
13830: PPUSH
13831: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
13835: LD_VAR 0 1
13839: PPUSH
13840: CALL_OW 256
13844: PUSH
13845: LD_INT 600
13847: GREATEREQUAL
13848: IFFALSE 13862
13850: PUSH
13851: LD_VAR 0 1
13855: PPUSH
13856: CALL_OW 110
13860: NOT
13861: AND
13862: IFFALSE 13888
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13864: LD_VAR 0 1
13868: PPUSH
13869: LD_VAR 0 7
13873: PPUSH
13874: LD_VAR 0 1
13878: PPUSH
13879: CALL_OW 74
13883: PPUSH
13884: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13888: LD_VAR 0 1
13892: PPUSH
13893: CALL_OW 256
13897: PUSH
13898: LD_INT 600
13900: LESS
13901: IFFALSE 13915
13903: PUSH
13904: LD_VAR 0 1
13908: PPUSH
13909: CALL_OW 110
13913: NOT
13914: AND
13915: IFFALSE 13944
// begin SetTag ( i , 1 ) ;
13917: LD_VAR 0 1
13921: PPUSH
13922: LD_INT 1
13924: PPUSH
13925: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13929: LD_VAR 0 1
13933: PPUSH
13934: LD_INT 202
13936: PPUSH
13937: LD_INT 150
13939: PPUSH
13940: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13944: LD_VAR 0 1
13948: PPUSH
13949: CALL_OW 110
13953: PUSH
13954: LD_INT 1
13956: EQUAL
13957: IFFALSE 13980
13959: PUSH
13960: LD_VAR 0 1
13964: PPUSH
13965: LD_INT 202
13967: PPUSH
13968: LD_INT 150
13970: PPUSH
13971: CALL_OW 297
13975: PUSH
13976: LD_INT 6
13978: LESS
13979: AND
13980: IFFALSE 13988
13982: PUSH
13983: LD_VAR 0 6
13987: AND
13988: IFFALSE 14039
// begin ComExitVehicle ( tmp2 ) ;
13990: LD_VAR 0 6
13994: PPUSH
13995: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13999: LD_VAR 0 6
14003: PPUSH
14004: LD_VAR 0 1
14008: PPUSH
14009: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
14013: LD_VAR 0 6
14017: PPUSH
14018: LD_INT 700
14020: PPUSH
14021: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
14025: LD_VAR 0 6
14029: PPUSH
14030: LD_VAR 0 1
14034: PPUSH
14035: CALL_OW 180
// end ; end ;
14039: GO 13764
14041: POP
14042: POP
// until kirovDestroyed ;
14043: LD_EXP 16
14047: IFFALSE 13583
// repeat wait ( 0 0$1 ) ;
14049: LD_INT 35
14051: PPUSH
14052: CALL_OW 67
// for i in omarSquad union Omar do
14056: LD_ADDR_VAR 0 1
14060: PUSH
14061: LD_EXP 39
14065: PUSH
14066: LD_EXP 34
14070: UNION
14071: PUSH
14072: FOR_IN
14073: IFFALSE 14247
// if IsInArea ( i , southRoadArea ) then
14075: LD_VAR 0 1
14079: PPUSH
14080: LD_INT 15
14082: PPUSH
14083: CALL_OW 308
14087: IFFALSE 14100
// RemoveUnit ( i ) else
14089: LD_VAR 0 1
14093: PPUSH
14094: CALL_OW 64
14098: GO 14245
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
14100: LD_VAR 0 1
14104: PPUSH
14105: CALL_OW 257
14109: PUSH
14110: LD_INT 3
14112: EQUAL
14113: IFFALSE 14127
14115: PUSH
14116: LD_VAR 0 1
14120: PPUSH
14121: CALL_OW 310
14125: NOT
14126: AND
14127: IFFALSE 14177
14129: PUSH
14130: LD_INT 22
14132: PUSH
14133: LD_INT 5
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PUSH
14140: LD_INT 24
14142: PUSH
14143: LD_INT 251
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: PUSH
14150: LD_INT 21
14152: PUSH
14153: LD_INT 2
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: PUSH
14160: LD_INT 58
14162: PUSH
14163: EMPTY
14164: LIST
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: PPUSH
14172: CALL_OW 69
14176: AND
14177: IFFALSE 14230
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
14179: LD_VAR 0 1
14183: PPUSH
14184: LD_INT 22
14186: PUSH
14187: LD_INT 5
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: PUSH
14194: LD_INT 21
14196: PUSH
14197: LD_INT 2
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: PUSH
14204: LD_INT 58
14206: PUSH
14207: EMPTY
14208: LIST
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: LIST
14214: PPUSH
14215: CALL_OW 69
14219: PUSH
14220: LD_INT 1
14222: ARRAY
14223: PPUSH
14224: CALL_OW 120
14228: GO 14245
// ComMoveXY ( i , 208 , 162 ) ;
14230: LD_VAR 0 1
14234: PPUSH
14235: LD_INT 208
14237: PPUSH
14238: LD_INT 162
14240: PPUSH
14241: CALL_OW 111
// end ;
14245: GO 14072
14247: POP
14248: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
14249: LD_INT 22
14251: PUSH
14252: LD_INT 5
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: PUSH
14259: LD_INT 21
14261: PUSH
14262: LD_INT 1
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PPUSH
14273: CALL_OW 69
14277: NOT
14278: IFFALSE 14049
// end ;
14280: PPOPN 7
14282: END
// every 0 0$1 trigger IsDead ( kirov ) do
14283: LD_INT 71
14285: PPUSH
14286: CALL_OW 301
14290: IFFALSE 14307
14292: GO 14294
14294: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
14295: LD_EXP 26
14299: PPUSH
14300: LD_STRING DH-1-Kirov
14302: PPUSH
14303: CALL_OW 88
14307: END
// every 0 0$1 trigger See ( 2 , beria ) do
14308: LD_INT 2
14310: PPUSH
14311: LD_INT 106
14313: PPUSH
14314: CALL_OW 292
14318: IFFALSE 14335
14320: GO 14322
14322: DISABLE
// Say ( Heike , DH-1-Beria ) ;
14323: LD_EXP 26
14327: PPUSH
14328: LD_STRING DH-1-Beria
14330: PPUSH
14331: CALL_OW 88
14335: END
// every 0 0$1 trigger See ( 2 , kagan ) do
14336: LD_INT 2
14338: PPUSH
14339: LD_INT 112
14341: PPUSH
14342: CALL_OW 292
14346: IFFALSE 14615
14348: GO 14350
14350: DISABLE
// begin DialogueOn ;
14351: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
14355: LD_INT 112
14357: PPUSH
14358: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
14362: LD_EXP 26
14366: PPUSH
14367: LD_STRING DH-1-Kagan
14369: PPUSH
14370: CALL_OW 88
// if Kamil then
14374: LD_EXP 30
14378: IFFALSE 14416
// begin Say ( Kamil , DKam-Kagan-2 ) ;
14380: LD_EXP 30
14384: PPUSH
14385: LD_STRING DKam-Kagan-2
14387: PPUSH
14388: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
14392: LD_EXP 27
14396: PPUSH
14397: LD_STRING DG-Kagan-3
14399: PPUSH
14400: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
14404: LD_EXP 27
14408: PPUSH
14409: LD_STRING DG-Kagan-4
14411: PPUSH
14412: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
14416: LD_STRING KaganBase
14418: PPUSH
14419: CALL_OW 97
14423: PUSH
14424: LD_INT 1
14426: DOUBLE
14427: EQUAL
14428: IFTRUE 14432
14430: GO 14527
14432: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
14433: LD_EXP 26
14437: PPUSH
14438: LD_STRING DH-Kagan-5
14440: PPUSH
14441: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
14445: LD_EXP 26
14449: PPUSH
14450: LD_STRING DH-Kagan-6
14452: PPUSH
14453: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
14457: LD_EXP 37
14461: PPUSH
14462: LD_STRING DShar-Kagan-7
14464: PPUSH
14465: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
14469: LD_EXP 26
14473: PPUSH
14474: LD_STRING DH-Kagan-8
14476: PPUSH
14477: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
14481: LD_EXP 26
14485: PPUSH
14486: LD_STRING DH-Kagan-9
14488: PPUSH
14489: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
14493: LD_EXP 37
14497: PPUSH
14498: LD_STRING DShar-Kagan-10
14500: PPUSH
14501: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
14505: LD_EXP 26
14509: PPUSH
14510: LD_STRING DH-Kagan-11
14512: PPUSH
14513: CALL_OW 88
// kaganCaptured := true ;
14517: LD_ADDR_EXP 24
14521: PUSH
14522: LD_INT 1
14524: ST_TO_ADDR
// end ; 2 :
14525: GO 14611
14527: LD_INT 2
14529: DOUBLE
14530: EQUAL
14531: IFTRUE 14535
14533: GO 14610
14535: POP
// begin if FilterAllUnits ( [ f_side , 8 ] ) and Aviradze then
14536: LD_INT 22
14538: PUSH
14539: LD_INT 8
14541: PUSH
14542: EMPTY
14543: LIST
14544: LIST
14545: PPUSH
14546: CALL_OW 69
14550: IFFALSE 14558
14552: PUSH
14553: LD_EXP 36
14557: AND
14558: IFFALSE 14572
// Say ( Heike , DH-Kagan-a-5 ) ;
14560: LD_EXP 26
14564: PPUSH
14565: LD_STRING DH-Kagan-a-5
14567: PPUSH
14568: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
14572: LD_EXP 26
14576: PPUSH
14577: LD_STRING DH-Kagan-a-6
14579: PPUSH
14580: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
14584: LD_EXP 26
14588: PPUSH
14589: LD_STRING DH-Kagan-a-7
14591: PPUSH
14592: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
14596: LD_EXP 27
14600: PPUSH
14601: LD_STRING DG-Kagan-a-8
14603: PPUSH
14604: CALL_OW 88
// end ; end ;
14608: GO 14611
14610: POP
// DialogueOff ;
14611: CALL_OW 7
// end ;
14615: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
14616: LD_EXP 18
14620: IFTRUE 14635
14622: PUSH
14623: LD_INT 112
14625: PPUSH
14626: CALL_OW 255
14630: PUSH
14631: LD_INT 2
14633: EQUAL
14634: OR
14635: IFFALSE 14647
14637: GO 14639
14639: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
14640: LD_STRING KaganDone
14642: PPUSH
14643: CALL_OW 337
14647: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
14648: LD_EXP 6
14652: IFFALSE 14675
14654: PUSH
14655: LD_EXP 49
14659: PPUSH
14660: LD_INT 95
14662: PUSH
14663: LD_INT 19
14665: PUSH
14666: EMPTY
14667: LIST
14668: LIST
14669: PPUSH
14670: CALL_OW 72
14674: AND
14675: IFFALSE 14752
14677: GO 14679
14679: DISABLE
// begin DialogueOn ;
14680: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
14684: LD_INT 63
14686: PPUSH
14687: LD_INT 32
14689: PPUSH
14690: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
14694: LD_INT 63
14696: PPUSH
14697: LD_INT 32
14699: PPUSH
14700: LD_INT 2
14702: PPUSH
14703: LD_INT 12
14705: NEG
14706: PPUSH
14707: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
14711: LD_EXP 26
14715: PPUSH
14716: LD_STRING DH-Omicron-1
14718: PPUSH
14719: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
14723: LD_EXP 28
14727: PPUSH
14728: LD_STRING DM-Omicron-2
14730: PPUSH
14731: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
14735: LD_INT 63
14737: PPUSH
14738: LD_INT 32
14740: PPUSH
14741: LD_INT 2
14743: PPUSH
14744: CALL_OW 331
// DialogueOff ;
14748: CALL_OW 7
// end ;
14752: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
14753: LD_INT 2
14755: PPUSH
14756: LD_EXP 51
14760: PPUSH
14761: CALL_OW 292
14765: IFTRUE 14782
14767: PUSH
14768: LD_EXP 51
14772: PPUSH
14773: CALL_OW 255
14777: PUSH
14778: LD_INT 2
14780: EQUAL
14781: OR
14782: IFTRUE 14797
14784: PUSH
14785: LD_INT 106
14787: PPUSH
14788: CALL_OW 255
14792: PUSH
14793: LD_INT 2
14795: EQUAL
14796: OR
14797: IFFALSE 14810
14799: PUSH
14800: LD_EXP 51
14804: PPUSH
14805: CALL_OW 302
14809: AND
14810: IFFALSE 14823
14812: PUSH
14813: LD_EXP 26
14817: PPUSH
14818: CALL_OW 302
14822: AND
14823: IFFALSE 14836
14825: PUSH
14826: LD_EXP 36
14830: PPUSH
14831: CALL_OW 302
14835: AND
14836: IFFALSE 15589
14838: GO 14840
14840: DISABLE
14841: LD_INT 0
14843: PPUSH
14844: PPUSH
14845: PPUSH
14846: PPUSH
14847: PPUSH
// begin DialogueOn ;
14848: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
14852: LD_INT 111
14854: PPUSH
14855: LD_INT 90
14857: PPUSH
14858: LD_INT 2
14860: PPUSH
14861: LD_INT 6
14863: NEG
14864: PPUSH
14865: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
14869: LD_INT 111
14871: PPUSH
14872: LD_INT 90
14874: PPUSH
14875: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
14879: LD_EXP 36
14883: PPUSH
14884: LD_STRING DA-Cap-1
14886: PPUSH
14887: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
14891: LD_EXP 26
14895: PPUSH
14896: LD_STRING DH-Cap-2
14898: PPUSH
14899: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
14903: LD_INT 111
14905: PPUSH
14906: LD_INT 90
14908: PPUSH
14909: LD_INT 2
14911: PPUSH
14912: CALL_OW 331
// DialogueOff ;
14916: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
14920: LD_INT 35
14922: PPUSH
14923: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 110 , 95 , 12 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_distxy , 110 , 95 , 12 ] ] ) ;
14927: LD_EXP 17
14931: IFTRUE 14946
14933: PUSH
14934: LD_INT 106
14936: PPUSH
14937: CALL_OW 255
14941: PUSH
14942: LD_INT 2
14944: EQUAL
14945: OR
14946: IFTRUE 14963
14948: PUSH
14949: LD_EXP 51
14953: PPUSH
14954: CALL_OW 255
14958: PUSH
14959: LD_INT 2
14961: EQUAL
14962: OR
14963: IFFALSE 14976
14965: PUSH
14966: LD_EXP 51
14970: PPUSH
14971: CALL_OW 302
14975: AND
14976: IFFALSE 14989
14978: PUSH
14979: LD_EXP 36
14983: PPUSH
14984: CALL_OW 302
14988: AND
14989: IFFALSE 15001
14991: PUSH
14992: LD_INT 2
14994: PPUSH
14995: CALL_OW 463
14999: NOT
15000: AND
15001: IFFALSE 15053
15003: PUSH
15004: LD_INT 22
15006: PUSH
15007: LD_INT 3
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PUSH
15014: LD_INT 21
15016: PUSH
15017: LD_INT 1
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: PUSH
15024: LD_INT 92
15026: PUSH
15027: LD_INT 110
15029: PUSH
15030: LD_INT 95
15032: PUSH
15033: LD_INT 12
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: LIST
15046: PPUSH
15047: CALL_OW 69
15051: NOT
15052: AND
15053: IFFALSE 15105
15055: PUSH
15056: LD_INT 22
15058: PUSH
15059: LD_INT 3
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: PUSH
15066: LD_INT 30
15068: PUSH
15069: LD_INT 5
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: PUSH
15076: LD_INT 92
15078: PUSH
15079: LD_INT 110
15081: PUSH
15082: LD_INT 95
15084: PUSH
15085: LD_INT 12
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: LIST
15098: PPUSH
15099: CALL_OW 69
15103: NOT
15104: AND
15105: IFFALSE 14920
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
15107: LD_ADDR_VAR 0 2
15111: PUSH
15112: LD_EXP 38
15116: PUSH
15117: LD_EXP 29
15121: PUSH
15122: LD_EXP 30
15126: PUSH
15127: LD_EXP 32
15131: PUSH
15132: LD_EXP 31
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: UNION
15143: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
15144: LD_ADDR_VAR 0 2
15148: PUSH
15149: LD_VAR 0 2
15153: PPUSH
15154: LD_INT 50
15156: PUSH
15157: EMPTY
15158: LIST
15159: PPUSH
15160: CALL_OW 72
15164: ST_TO_ADDR
// if tmp < 2 then
15165: LD_VAR 0 2
15169: PUSH
15170: LD_INT 2
15172: LESS
15173: IFFALSE 15185
// q := 2 else
15175: LD_ADDR_VAR 0 4
15179: PUSH
15180: LD_INT 2
15182: ST_TO_ADDR
15183: GO 15198
// q := Query ( LabCap ) ;
15185: LD_ADDR_VAR 0 4
15189: PUSH
15190: LD_STRING LabCap
15192: PPUSH
15193: CALL_OW 97
15197: ST_TO_ADDR
// case q of 1 :
15198: LD_VAR 0 4
15202: PUSH
15203: LD_INT 1
15205: DOUBLE
15206: EQUAL
15207: IFTRUE 15211
15209: GO 15553
15211: POP
// begin DoNotAttack ( 2 , ruLab ) ;
15212: LD_INT 2
15214: PPUSH
15215: LD_EXP 51
15219: PPUSH
15220: CALL_OW 471
// labCaptured := true ;
15224: LD_ADDR_EXP 21
15228: PUSH
15229: LD_INT 1
15231: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
15232: LD_EXP 26
15236: PPUSH
15237: LD_STRING DH-Cap-a-1
15239: PPUSH
15240: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
15244: LD_EXP 36
15248: PPUSH
15249: LD_STRING DA-Cap-a-2
15251: PPUSH
15252: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike , Givi , Kurt , Markov ] ^ [ sel_changeable ] ^ tmp ;
15256: LD_ADDR_VAR 0 5
15260: PUSH
15261: LD_EXP 36
15265: PUSH
15266: LD_INT -3
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: PUSH
15273: LD_INT -2
15275: PUSH
15276: LD_INT -4
15278: PUSH
15279: LD_EXP 26
15283: PUSH
15284: LD_EXP 27
15288: PUSH
15289: LD_EXP 35
15293: PUSH
15294: LD_EXP 33
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: ADD
15307: PUSH
15308: LD_INT -3
15310: PUSH
15311: EMPTY
15312: LIST
15313: ADD
15314: PUSH
15315: LD_VAR 0 2
15319: ADD
15320: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
15321: LD_ADDR_VAR 0 3
15325: PUSH
15326: LD_STRING Select two characters to go with Aviradze
15328: PPUSH
15329: LD_INT 2
15331: PPUSH
15332: LD_INT 2
15334: PPUSH
15335: LD_VAR 0 5
15339: PPUSH
15340: EMPTY
15341: PPUSH
15342: CALL_OW 42
15346: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
15347: LD_EXP 51
15351: PPUSH
15352: LD_INT 8
15354: PPUSH
15355: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
15359: LD_EXP 36
15363: PPUSH
15364: LD_INT 8
15366: PPUSH
15367: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
15371: LD_ADDR_EXP 40
15375: PUSH
15376: LD_EXP 36
15380: PUSH
15381: EMPTY
15382: LIST
15383: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
15384: LD_EXP 36
15388: PPUSH
15389: CALL_OW 310
15393: IFFALSE 15404
// ComExit ( Aviradze ) ;
15395: LD_EXP 36
15399: PPUSH
15400: CALL 79445 0 1
// wait ( 3 ) ;
15404: LD_INT 3
15406: PPUSH
15407: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
15411: LD_EXP 36
15415: PPUSH
15416: LD_EXP 51
15420: PPUSH
15421: CALL_OW 120
// for i := 1 to 2 do
15425: LD_ADDR_VAR 0 1
15429: PUSH
15430: DOUBLE
15431: LD_INT 1
15433: DEC
15434: ST_TO_ADDR
15435: LD_INT 2
15437: PUSH
15438: FOR_TO
15439: IFFALSE 15542
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
15441: LD_ADDR_EXP 40
15445: PUSH
15446: LD_EXP 40
15450: PUSH
15451: LD_VAR 0 3
15455: PUSH
15456: LD_VAR 0 1
15460: ARRAY
15461: UNION
15462: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
15463: LD_VAR 0 3
15467: PUSH
15468: LD_VAR 0 1
15472: ARRAY
15473: PPUSH
15474: LD_INT 8
15476: PPUSH
15477: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
15481: LD_VAR 0 3
15485: PUSH
15486: LD_VAR 0 1
15490: ARRAY
15491: PPUSH
15492: CALL_OW 310
15496: IFFALSE 15513
// ComExit ( tmp2 [ i ] ) ;
15498: LD_VAR 0 3
15502: PUSH
15503: LD_VAR 0 1
15507: ARRAY
15508: PPUSH
15509: CALL 79445 0 1
// wait ( 3 ) ;
15513: LD_INT 3
15515: PPUSH
15516: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
15520: LD_VAR 0 3
15524: PUSH
15525: LD_VAR 0 1
15529: ARRAY
15530: PPUSH
15531: LD_EXP 51
15535: PPUSH
15536: CALL_OW 120
// end ;
15540: GO 15438
15542: POP
15543: POP
// SetAchievement ( ACH_LAB ) ;
15544: LD_STRING ACH_LAB
15546: PPUSH
15547: CALL_OW 543
// end ; 2 :
15551: GO 15589
15553: LD_INT 2
15555: DOUBLE
15556: EQUAL
15557: IFTRUE 15561
15559: GO 15588
15561: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
15562: LD_EXP 26
15566: PPUSH
15567: LD_STRING DH-Cap-b-1
15569: PPUSH
15570: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
15574: LD_EXP 36
15578: PPUSH
15579: LD_STRING DA-Cap-b-2
15581: PPUSH
15582: CALL_OW 88
// end ; end ;
15586: GO 15589
15588: POP
// end ;
15589: PPOPN 5
15591: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
15592: LD_INT 10
15594: PPUSH
15595: LD_INT 22
15597: PUSH
15598: LD_INT 2
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: PUSH
15605: LD_INT 30
15607: PUSH
15608: LD_INT 31
15610: PUSH
15611: EMPTY
15612: LIST
15613: LIST
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: PPUSH
15619: CALL_OW 70
15623: PUSH
15624: LD_INT 2
15626: GREATEREQUAL
15627: IFFALSE 15639
15629: GO 15631
15631: DISABLE
// SetAchievement ( ACH_KING ) ;
15632: LD_STRING ACH_KING
15634: PPUSH
15635: CALL_OW 543
15639: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
15640: LD_EXP 11
15644: NOT
15645: IFFALSE 15698
15647: PUSH
15648: LD_INT 10
15650: PPUSH
15651: LD_INT 22
15653: PUSH
15654: LD_INT 2
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: LD_INT 2
15663: PUSH
15664: LD_INT 30
15666: PUSH
15667: LD_INT 31
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PUSH
15674: LD_INT 30
15676: PUSH
15677: LD_INT 4
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: LIST
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: PPUSH
15693: CALL_OW 70
15697: AND
15698: IFFALSE 15728
15700: GO 15702
15702: DISABLE
// begin hillBase := true ;
15703: LD_ADDR_EXP 15
15707: PUSH
15708: LD_INT 1
15710: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
15711: LD_STRING HillDone
15713: PPUSH
15714: CALL_OW 337
// SetAreaMapShow ( bunkerHillArea , 0 ) ;
15718: LD_INT 22
15720: PPUSH
15721: LD_INT 0
15723: PPUSH
15724: CALL_OW 424
// end ;
15728: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
15729: LD_EXP 31
15733: IFFALSE 15750
15735: PUSH
15736: LD_EXP 31
15740: PPUSH
15741: CALL_OW 256
15745: PUSH
15746: LD_INT 3
15748: LESS
15749: AND
15750: IFFALSE 15796
15752: GO 15754
15754: DISABLE
// begin DialogueOn ;
15755: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
15759: LD_EXP 31
15763: PPUSH
15764: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
15768: LD_EXP 31
15772: PPUSH
15773: LD_STRING DK-Kkilled-1
15775: PPUSH
15776: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
15780: LD_EXP 26
15784: PPUSH
15785: LD_STRING DH-Kkilled-2
15787: PPUSH
15788: CALL_OW 88
// DialogueOff ;
15792: CALL_OW 7
// end ;
15796: END
// every 0 0$1 trigger kaiaKilledByRussian do
15797: LD_EXP 23
15801: IFFALSE 15818
15803: GO 15805
15805: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
15806: LD_EXP 26
15810: PPUSH
15811: LD_STRING DH-Kkilled-3
15813: PPUSH
15814: CALL_OW 88
15818: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo , driver ;
15819: LD_EXP 16
15823: IFFALSE 15846
15825: PUSH
15826: LD_INT 106
15828: PPUSH
15829: CALL_OW 255
15833: PUSH
15834: LD_INT 2
15836: EQUAL
15837: IFTRUE 15845
15839: PUSH
15840: LD_EXP 17
15844: OR
15845: AND
15846: IFFALSE 15877
15848: PUSH
15849: LD_EXP 18
15853: IFTRUE 15876
15855: PUSH
15856: LD_EXP 24
15860: IFFALSE 15875
15862: PUSH
15863: LD_INT 112
15865: PPUSH
15866: CALL_OW 255
15870: PUSH
15871: LD_INT 2
15873: EQUAL
15874: AND
15875: OR
15876: AND
15877: IFFALSE 17129
15879: GO 15881
15881: DISABLE
15882: LD_INT 0
15884: PPUSH
15885: PPUSH
15886: PPUSH
15887: PPUSH
15888: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
15889: LD_STRING GoToWest
15891: PPUSH
15892: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
15896: LD_INT 17
15898: PPUSH
15899: LD_INT 1
15901: PPUSH
15902: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
15906: LD_INT 35
15908: PPUSH
15909: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15913: LD_ADDR_VAR 0 2
15917: PUSH
15918: LD_INT 17
15920: PPUSH
15921: LD_INT 22
15923: PUSH
15924: LD_INT 2
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: PUSH
15931: LD_INT 2
15933: PUSH
15934: LD_INT 21
15936: PUSH
15937: LD_INT 1
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PUSH
15944: LD_INT 21
15946: PUSH
15947: LD_INT 2
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: LD_INT 3
15956: PUSH
15957: LD_INT 58
15959: PUSH
15960: EMPTY
15961: LIST
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: LIST
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PPUSH
15980: CALL_OW 70
15984: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15985: LD_ADDR_VAR 0 3
15989: PUSH
15990: LD_INT 22
15992: PUSH
15993: LD_INT 2
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: PUSH
16000: LD_INT 3
16002: PUSH
16003: LD_INT 55
16005: PUSH
16006: EMPTY
16007: LIST
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: LD_INT 2
16015: PUSH
16016: LD_INT 21
16018: PUSH
16019: LD_INT 1
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: PUSH
16026: LD_INT 21
16028: PUSH
16029: LD_INT 2
16031: PUSH
16032: EMPTY
16033: LIST
16034: LIST
16035: PUSH
16036: LD_INT 3
16038: PUSH
16039: LD_INT 58
16041: PUSH
16042: EMPTY
16043: LIST
16044: PUSH
16045: EMPTY
16046: LIST
16047: LIST
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: LIST
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: LIST
16062: PPUSH
16063: CALL_OW 69
16067: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
16068: LD_VAR 0 2
16072: PUSH
16073: LD_INT 0
16075: PLUS
16076: PUSH
16077: LD_VAR 0 3
16081: PUSH
16082: LD_INT 0
16084: PLUS
16085: EQUAL
16086: IFFALSE 15906
// SaveCharacters ( Heike , 04_1_Heike ) ;
16088: LD_EXP 26
16092: PPUSH
16093: LD_STRING 04_1_Heike
16095: PPUSH
16096: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
16100: LD_EXP 36
16104: IFFALSE 16119
16106: PUSH
16107: LD_EXP 36
16111: PUSH
16112: LD_EXP 40
16116: IN
16117: NOT
16118: AND
16119: IFFALSE 16135
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
16121: LD_EXP 36
16125: PPUSH
16126: LD_STRING 04_1_Aviradze
16128: PPUSH
16129: CALL_OW 38
16133: GO 16153
// if Aviradze then
16135: LD_EXP 36
16139: IFFALSE 16153
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
16141: LD_EXP 36
16145: PPUSH
16146: LD_STRING 04_1_Aviradze_L
16148: PPUSH
16149: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
16153: LD_EXP 29
16157: IFFALSE 16172
16159: PUSH
16160: LD_EXP 29
16164: PUSH
16165: LD_EXP 40
16169: IN
16170: NOT
16171: AND
16172: IFFALSE 16188
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
16174: LD_EXP 29
16178: PPUSH
16179: LD_STRING 04_1_Ibrahim
16181: PPUSH
16182: CALL_OW 38
16186: GO 16206
// if Ibrahim then
16188: LD_EXP 29
16192: IFFALSE 16206
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
16194: LD_EXP 29
16198: PPUSH
16199: LD_STRING 04_1_Ibrahim_L
16201: PPUSH
16202: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
16206: LD_EXP 30
16210: IFFALSE 16225
16212: PUSH
16213: LD_EXP 30
16217: PUSH
16218: LD_EXP 40
16222: IN
16223: NOT
16224: AND
16225: IFFALSE 16241
// SaveCharacters ( Kamil , 04_1_Kamil ) else
16227: LD_EXP 30
16231: PPUSH
16232: LD_STRING 04_1_Kamil
16234: PPUSH
16235: CALL_OW 38
16239: GO 16259
// if Kamil then
16241: LD_EXP 30
16245: IFFALSE 16259
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
16247: LD_EXP 30
16251: PPUSH
16252: LD_STRING 04_1_Kamil_L
16254: PPUSH
16255: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
16259: LD_EXP 32
16263: IFFALSE 16278
16265: PUSH
16266: LD_EXP 32
16270: PUSH
16271: LD_EXP 40
16275: IN
16276: NOT
16277: AND
16278: IFFALSE 16294
// SaveCharacters ( Sophia , 04_1_Sophia ) else
16280: LD_EXP 32
16284: PPUSH
16285: LD_STRING 04_1_Sophia
16287: PPUSH
16288: CALL_OW 38
16292: GO 16312
// if Sophia then
16294: LD_EXP 32
16298: IFFALSE 16312
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
16300: LD_EXP 32
16304: PPUSH
16305: LD_STRING 04_1_Sophia_L
16307: PPUSH
16308: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
16312: LD_EXP 31
16316: IFFALSE 16331
16318: PUSH
16319: LD_EXP 31
16323: PUSH
16324: LD_EXP 40
16328: IN
16329: NOT
16330: AND
16331: IFFALSE 16347
// SaveCharacters ( Kaia , 04_1_Kaia ) else
16333: LD_EXP 31
16337: PPUSH
16338: LD_STRING 04_1_Kaia
16340: PPUSH
16341: CALL_OW 38
16345: GO 16365
// if Kaia then
16347: LD_EXP 31
16351: IFFALSE 16365
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
16353: LD_EXP 31
16357: PPUSH
16358: LD_STRING 04_1_Kaia_L
16360: PPUSH
16361: CALL_OW 38
// if Givi then
16365: LD_EXP 27
16369: IFFALSE 16383
// SaveCharacters ( Givi , 04_1_Givi ) ;
16371: LD_EXP 27
16375: PPUSH
16376: LD_STRING 04_1_Givi
16378: PPUSH
16379: CALL_OW 38
// if Mike then
16383: LD_EXP 28
16387: IFFALSE 16401
// SaveCharacters ( Mike , 04_1_Mike ) ;
16389: LD_EXP 28
16393: PPUSH
16394: LD_STRING 04_1_Mike
16396: PPUSH
16397: CALL_OW 38
// if Markov then
16401: LD_EXP 33
16405: IFFALSE 16419
// SaveCharacters ( Markov , 04_1_Markov ) ;
16407: LD_EXP 33
16411: PPUSH
16412: LD_STRING 04_1_Markov
16414: PPUSH
16415: CALL_OW 38
// if Kurt then
16419: LD_EXP 35
16423: IFFALSE 16444
// begin SaveCharacters ( Kurt , 04_1_Kurt ) ;
16425: LD_EXP 35
16429: PPUSH
16430: LD_STRING 04_1_Kurt
16432: PPUSH
16433: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KURT) ) ;
16437: LD_STRING enableBioCharacter(BIO_KURT)
16439: PPUSH
16440: CALL_OW 559
// end ; if heikeSecondSquad diff aviradzeSquad then
16444: LD_EXP 38
16448: PUSH
16449: LD_EXP 40
16453: DIFF
16454: IFFALSE 16474
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
16456: LD_EXP 38
16460: PUSH
16461: LD_EXP 40
16465: DIFF
16466: PPUSH
16467: LD_STRING 04_1_others
16469: PPUSH
16470: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
16474: LD_EXP 40
16478: IFFALSE 16486
16480: PUSH
16481: LD_EXP 38
16485: AND
16486: IFFALSE 16571
// begin tmp := [ ] ;
16488: LD_ADDR_VAR 0 2
16492: PUSH
16493: EMPTY
16494: ST_TO_ADDR
// for i in heikeSecondSquad do
16495: LD_ADDR_VAR 0 1
16499: PUSH
16500: LD_EXP 38
16504: PUSH
16505: FOR_IN
16506: IFFALSE 16551
// if i in aviradzeSquad then
16508: LD_VAR 0 1
16512: PUSH
16513: LD_EXP 40
16517: IN
16518: IFFALSE 16549
// tmp := Replace ( tmp , tmp + 1 , i ) ;
16520: LD_ADDR_VAR 0 2
16524: PUSH
16525: LD_VAR 0 2
16529: PPUSH
16530: LD_VAR 0 2
16534: PUSH
16535: LD_INT 1
16537: PLUS
16538: PPUSH
16539: LD_VAR 0 1
16543: PPUSH
16544: CALL_OW 1
16548: ST_TO_ADDR
16549: GO 16505
16551: POP
16552: POP
// if tmp then
16553: LD_VAR 0 2
16557: IFFALSE 16571
// SaveCharacters ( tmp , 04_1_others_L ) ;
16559: LD_VAR 0 2
16563: PPUSH
16564: LD_STRING 04_1_others_L
16566: PPUSH
16567: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
16571: LD_ADDR_VAR 0 2
16575: PUSH
16576: LD_INT 22
16578: PUSH
16579: LD_INT 2
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: PUSH
16586: LD_INT 23
16588: PUSH
16589: LD_INT 0
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: PPUSH
16600: CALL_OW 69
16604: ST_TO_ADDR
// if tmp then
16605: LD_VAR 0 2
16609: IFFALSE 16623
// SaveCharacters ( tmp , 04_1_apes ) ;
16611: LD_VAR 0 2
16615: PPUSH
16616: LD_STRING 04_1_apes
16618: PPUSH
16619: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
16623: LD_ADDR_VAR 0 2
16627: PUSH
16628: LD_INT 17
16630: PPUSH
16631: LD_INT 21
16633: PUSH
16634: LD_INT 2
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: PPUSH
16641: CALL_OW 70
16645: ST_TO_ADDR
// if tmp then
16646: LD_VAR 0 2
16650: IFFALSE 16994
// begin tmp2 := [ ] ;
16652: LD_ADDR_VAR 0 3
16656: PUSH
16657: EMPTY
16658: ST_TO_ADDR
// for i in tmp do
16659: LD_ADDR_VAR 0 1
16663: PUSH
16664: LD_VAR 0 2
16668: PUSH
16669: FOR_IN
16670: IFFALSE 16980
// begin driver := IsDrivenBy ( i ) ;
16672: LD_ADDR_VAR 0 5
16676: PUSH
16677: LD_VAR 0 1
16681: PPUSH
16682: CALL_OW 311
16686: ST_TO_ADDR
// if not driver then
16687: LD_VAR 0 5
16691: NOT
16692: IFFALSE 16696
// continue ;
16694: GO 16669
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay ] then
16696: LD_VAR 0 1
16700: PPUSH
16701: CALL_OW 264
16705: PUSH
16706: LD_INT 32
16708: PUSH
16709: LD_INT 12
16711: PUSH
16712: LD_INT 51
16714: PUSH
16715: LD_INT 89
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: IN
16724: IFFALSE 16872
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
16726: LD_ADDR_VAR 0 4
16730: PUSH
16731: LD_VAR 0 1
16735: PPUSH
16736: LD_INT 1
16738: PPUSH
16739: CALL_OW 289
16743: PUSH
16744: LD_VAR 0 1
16748: PPUSH
16749: LD_INT 2
16751: PPUSH
16752: CALL_OW 289
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo , GetClass ( driver ) ] ) ;
16761: LD_ADDR_VAR 0 3
16765: PUSH
16766: LD_VAR 0 3
16770: PPUSH
16771: LD_VAR 0 3
16775: PUSH
16776: LD_INT 1
16778: PLUS
16779: PPUSH
16780: LD_VAR 0 1
16784: PPUSH
16785: CALL_OW 265
16789: PUSH
16790: LD_VAR 0 1
16794: PPUSH
16795: CALL_OW 262
16799: PUSH
16800: LD_VAR 0 1
16804: PPUSH
16805: CALL_OW 263
16809: PUSH
16810: LD_VAR 0 1
16814: PPUSH
16815: CALL_OW 264
16819: PUSH
16820: LD_VAR 0 1
16824: PPUSH
16825: CALL_OW 248
16829: PUSH
16830: LD_VAR 0 1
16834: PPUSH
16835: CALL_OW 256
16839: PUSH
16840: LD_VAR 0 4
16844: PUSH
16845: LD_VAR 0 5
16849: PPUSH
16850: CALL_OW 257
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: PPUSH
16865: CALL_OW 1
16869: ST_TO_ADDR
// end else
16870: GO 16978
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] , GetClass ( driver ) ] ) ;
16872: LD_ADDR_VAR 0 3
16876: PUSH
16877: LD_VAR 0 3
16881: PPUSH
16882: LD_VAR 0 3
16886: PUSH
16887: LD_INT 1
16889: PLUS
16890: PPUSH
16891: LD_VAR 0 1
16895: PPUSH
16896: CALL_OW 265
16900: PUSH
16901: LD_VAR 0 1
16905: PPUSH
16906: CALL_OW 262
16910: PUSH
16911: LD_VAR 0 1
16915: PPUSH
16916: CALL_OW 263
16920: PUSH
16921: LD_VAR 0 1
16925: PPUSH
16926: CALL_OW 264
16930: PUSH
16931: LD_VAR 0 1
16935: PPUSH
16936: CALL_OW 248
16940: PUSH
16941: LD_VAR 0 1
16945: PPUSH
16946: CALL_OW 256
16950: PUSH
16951: EMPTY
16952: PUSH
16953: LD_VAR 0 5
16957: PPUSH
16958: CALL_OW 257
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: PPUSH
16973: CALL_OW 1
16977: ST_TO_ADDR
// end ;
16978: GO 16669
16980: POP
16981: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
16982: LD_VAR 0 3
16986: PPUSH
16987: LD_STRING 04_1_Vehicles
16989: PPUSH
16990: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
16994: LD_EXP 21
16998: PPUSH
16999: LD_STRING 04_1_RuLabCaptured
17001: PPUSH
17002: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
17006: LD_EXP 19
17010: PPUSH
17011: LD_STRING 04_1_EscapeCounter
17013: PPUSH
17014: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
17018: LD_EXP 15
17022: PPUSH
17023: LD_STRING 04_1_BaseHill
17025: PPUSH
17026: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
17030: LD_OWVAR 1
17034: PPUSH
17035: LD_STRING 04_1_Time
17037: PPUSH
17038: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
17042: LD_EXP 14
17046: PPUSH
17047: LD_STRING 04_1_DeadCounter
17049: PPUSH
17050: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
17054: LD_EXP 24
17058: PUSH
17059: LD_INT 112
17061: PPUSH
17062: CALL_OW 255
17066: MUL
17067: PUSH
17068: LD_INT 2
17070: EQUAL
17071: PPUSH
17072: LD_STRING 04_1_KaganCaptured
17074: PPUSH
17075: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
17079: LD_INT 22
17081: PUSH
17082: LD_INT 2
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PUSH
17089: LD_INT 34
17091: PUSH
17092: LD_INT 26
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PPUSH
17103: CALL_OW 69
17107: PUSH
17108: LD_INT 0
17110: PLUS
17111: PPUSH
17112: LD_STRING 04_1_Flamethrower
17114: PPUSH
17115: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
17119: LD_INT 1
17121: PPUSH
17122: LD_STRING __x1\04_cont2
17124: PPUSH
17125: CALL_OW 340
// end ; end_of_file
17129: PPOPN 5
17131: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
17132: LD_VAR 0 1
17136: PPUSH
17137: CALL_OW 266
17141: PUSH
17142: LD_INT 0
17144: EQUAL
17145: IFFALSE 17162
17147: PUSH
17148: LD_VAR 0 1
17152: PPUSH
17153: CALL_OW 255
17157: PUSH
17158: LD_INT 2
17160: EQUAL
17161: AND
17162: IFFALSE 17172
// baseConstructed := true ;
17164: LD_ADDR_EXP 3
17168: PUSH
17169: LD_INT 1
17171: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
17172: LD_VAR 0 1
17176: PPUSH
17177: CALL_OW 266
17181: PUSH
17182: LD_INT 6
17184: EQUAL
17185: IFFALSE 17202
17187: PUSH
17188: LD_VAR 0 1
17192: PPUSH
17193: CALL_OW 255
17197: PUSH
17198: LD_INT 2
17200: EQUAL
17201: AND
17202: IFFALSE 17212
// labConstructed := true ;
17204: LD_ADDR_EXP 4
17208: PUSH
17209: LD_INT 1
17211: ST_TO_ADDR
// end ;
17212: PPOPN 1
17214: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
17215: LD_VAR 0 1
17219: PPUSH
17220: CALL 34373 0 1
// if un = Heike then
17224: LD_VAR 0 1
17228: PUSH
17229: LD_EXP 26
17233: EQUAL
17234: IFFALSE 17243
// YouLost ( Heike ) ;
17236: LD_STRING Heike
17238: PPUSH
17239: CALL_OW 104
// if un = Omar then
17243: LD_VAR 0 1
17247: PUSH
17248: LD_EXP 34
17252: EQUAL
17253: IFFALSE 17262
// YouLost ( Omar ) ;
17255: LD_STRING Omar
17257: PPUSH
17258: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
17262: LD_VAR 0 1
17266: PUSH
17267: LD_INT 22
17269: PUSH
17270: LD_INT 2
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 23
17279: PUSH
17280: LD_INT 2
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 21
17289: PUSH
17290: LD_INT 1
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: LIST
17301: PPUSH
17302: CALL_OW 69
17306: IN
17307: IFFALSE 17323
// loseCounter := loseCounter + 1 ;
17309: LD_ADDR_EXP 14
17313: PUSH
17314: LD_EXP 14
17318: PUSH
17319: LD_INT 1
17321: PLUS
17322: ST_TO_ADDR
// if un = omikron then
17323: LD_VAR 0 1
17327: PUSH
17328: LD_INT 64
17330: EQUAL
17331: IFFALSE 17341
// omicronFall := true ;
17333: LD_ADDR_EXP 13
17337: PUSH
17338: LD_INT 1
17340: ST_TO_ADDR
// if un = kirov then
17341: LD_VAR 0 1
17345: PUSH
17346: LD_INT 71
17348: EQUAL
17349: IFFALSE 17366
// begin ChangeMissionObjectives ( KirovDone ) ;
17351: LD_STRING KirovDone
17353: PPUSH
17354: CALL_OW 337
// kirovDestroyed := true ;
17358: LD_ADDR_EXP 16
17362: PUSH
17363: LD_INT 1
17365: ST_TO_ADDR
// end ; if un = beria then
17366: LD_VAR 0 1
17370: PUSH
17371: LD_INT 106
17373: EQUAL
17374: IFFALSE 17391
// begin ChangeMissionObjectives ( BeriaDone ) ;
17376: LD_STRING BeriaDone
17378: PPUSH
17379: CALL_OW 337
// beriaDestroyed := true ;
17383: LD_ADDR_EXP 17
17387: PUSH
17388: LD_INT 1
17390: ST_TO_ADDR
// end ; if un = kagan then
17391: LD_VAR 0 1
17395: PUSH
17396: LD_INT 112
17398: EQUAL
17399: IFFALSE 17409
// kaganDestroyed := true ;
17401: LD_ADDR_EXP 18
17405: PUSH
17406: LD_INT 1
17408: ST_TO_ADDR
// if un in russianPatrol then
17409: LD_VAR 0 1
17413: PUSH
17414: LD_EXP 48
17418: IN
17419: IFFALSE 17437
// russianPatrol := russianPatrol diff un ;
17421: LD_ADDR_EXP 48
17425: PUSH
17426: LD_EXP 48
17430: PUSH
17431: LD_VAR 0 1
17435: DIFF
17436: ST_TO_ADDR
// if un in russianOmicronAttackers then
17437: LD_VAR 0 1
17441: PUSH
17442: LD_EXP 49
17446: IN
17447: IFFALSE 17465
// russianOmicronAttackers := russianOmicronAttackers diff un ;
17449: LD_ADDR_EXP 49
17453: PUSH
17454: LD_EXP 49
17458: PUSH
17459: LD_VAR 0 1
17463: DIFF
17464: ST_TO_ADDR
// end ;
17465: PPOPN 1
17467: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
17468: LD_INT 0
17470: PPUSH
17471: PPUSH
17472: PPUSH
// begin if un = Kirov then
17473: LD_VAR 0 1
17477: PUSH
17478: LD_INT 71
17480: EQUAL
17481: IFFALSE 17495
// SetLives ( un , 0 ) ;
17483: LD_VAR 0 1
17487: PPUSH
17488: LD_INT 0
17490: PPUSH
17491: CALL_OW 234
// if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
17495: LD_VAR 0 1
17499: PUSH
17500: LD_INT 2
17502: PUSH
17503: LD_INT 22
17505: PUSH
17506: LD_INT 3
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PUSH
17513: LD_INT 22
17515: PUSH
17516: LD_INT 4
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: PUSH
17523: LD_INT 22
17525: PUSH
17526: LD_INT 6
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 30
17541: PUSH
17542: LD_INT 32
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PPUSH
17553: CALL_OW 69
17557: IN
17558: IFFALSE 17731
// begin sol := UnitsInside ( un ) ;
17560: LD_ADDR_VAR 0 3
17564: PUSH
17565: LD_VAR 0 1
17569: PPUSH
17570: CALL_OW 313
17574: ST_TO_ADDR
// if not sol then
17575: LD_VAR 0 3
17579: NOT
17580: IFFALSE 17584
// exit ;
17582: GO 17731
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17584: LD_ADDR_VAR 0 4
17588: PUSH
17589: LD_INT 22
17591: PUSH
17592: LD_VAR 0 1
17596: PPUSH
17597: CALL_OW 255
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: PUSH
17606: LD_INT 2
17608: PUSH
17609: LD_INT 30
17611: PUSH
17612: LD_INT 4
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PUSH
17619: LD_INT 30
17621: PUSH
17622: LD_INT 5
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: LIST
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PPUSH
17638: CALL_OW 69
17642: ST_TO_ADDR
// if not nearestBarracks then
17643: LD_VAR 0 4
17647: NOT
17648: IFFALSE 17652
// exit ;
17650: GO 17731
// for i in nearestBarracks do
17652: LD_ADDR_VAR 0 2
17656: PUSH
17657: LD_VAR 0 4
17661: PUSH
17662: FOR_IN
17663: IFFALSE 17698
// if UnitsInside ( i ) = 6 then
17665: LD_VAR 0 2
17669: PPUSH
17670: CALL_OW 313
17674: PUSH
17675: LD_INT 6
17677: EQUAL
17678: IFFALSE 17696
// nearestBarracks := nearestBarracks diff i ;
17680: LD_ADDR_VAR 0 4
17684: PUSH
17685: LD_VAR 0 4
17689: PUSH
17690: LD_VAR 0 2
17694: DIFF
17695: ST_TO_ADDR
17696: GO 17662
17698: POP
17699: POP
// if not nearestBarracks then
17700: LD_VAR 0 4
17704: NOT
17705: IFFALSE 17709
// exit ;
17707: GO 17731
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
17709: LD_VAR 0 3
17713: PUSH
17714: LD_INT 1
17716: ARRAY
17717: PPUSH
17718: LD_VAR 0 4
17722: PUSH
17723: LD_INT 1
17725: ARRAY
17726: PPUSH
17727: CALL_OW 120
// end ; end ;
17731: PPOPN 4
17733: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
17734: LD_INT 0
17736: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
17737: LD_EXP 8
17741: NOT
17742: IFTRUE 17751
17744: PUSH
17745: LD_EXP 5
17749: NOT
17750: OR
17751: IFFALSE 17755
// exit ;
17753: GO 17823
// for i in camAreas do
17755: LD_ADDR_VAR 0 5
17759: PUSH
17760: LD_EXP 8
17764: PUSH
17765: FOR_IN
17766: IFFALSE 17821
// if InArea ( x , y , i ) then
17768: LD_VAR 0 3
17772: PPUSH
17773: LD_VAR 0 4
17777: PPUSH
17778: LD_VAR 0 5
17782: PPUSH
17783: CALL_OW 309
17787: IFFALSE 17819
// begin SetAreaMapShow ( i , 0 ) ;
17789: LD_VAR 0 5
17793: PPUSH
17794: LD_INT 0
17796: PPUSH
17797: CALL_OW 424
// camAreas := camAreas diff i ;
17801: LD_ADDR_EXP 8
17805: PUSH
17806: LD_EXP 8
17810: PUSH
17811: LD_VAR 0 5
17815: DIFF
17816: ST_TO_ADDR
// break ;
17817: GO 17821
// end ;
17819: GO 17765
17821: POP
17822: POP
// end ;
17823: PPOPN 5
17825: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
17826: LD_VAR 0 1
17830: PUSH
17831: LD_INT 2
17833: EQUAL
17834: IFFALSE 17853
17836: PUSH
17837: LD_VAR 0 2
17841: PUSH
17842: LD_INT 5
17844: PUSH
17845: LD_INT 8
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: IN
17852: AND
17853: IFFALSE 17862
// YouLost ( Ally ) ;
17855: LD_STRING Ally
17857: PPUSH
17858: CALL_OW 104
// end ;
17862: PPOPN 2
17864: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
17865: LD_VAR 0 1
17869: PUSH
17870: LD_EXP 31
17874: EQUAL
17875: IFFALSE 17894
17877: PUSH
17878: LD_VAR 0 2
17882: PUSH
17883: LD_INT 3
17885: PUSH
17886: LD_INT 6
17888: PUSH
17889: EMPTY
17890: LIST
17891: LIST
17892: IN
17893: AND
17894: IFFALSE 17925
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
17896: LD_ADDR_EXP 23
17900: PUSH
17901: LD_VAR 0 1
17905: PPUSH
17906: CALL_OW 250
17910: PUSH
17911: LD_VAR 0 1
17915: PPUSH
17916: CALL_OW 251
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: ST_TO_ADDR
// end ;
17925: PPOPN 3
17927: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
17928: LD_VAR 0 1
17932: PPUSH
17933: LD_VAR 0 2
17937: PPUSH
17938: CALL 34431 0 2
// end ; end_of_file
17942: PPOPN 2
17944: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 , 10 ] [ Difficulty ] do
17945: LD_EXP 11
17949: NOT
17950: IFFALSE 17989
17952: PUSH
17953: LD_INT 12
17955: PPUSH
17956: LD_INT 1
17958: PPUSH
17959: CALL_OW 287
17963: PUSH
17964: LD_INT 20
17966: PUSH
17967: LD_INT 16
17969: PUSH
17970: LD_INT 12
17972: PUSH
17973: LD_INT 10
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: PUSH
17982: LD_OWVAR 67
17986: ARRAY
17987: LESS
17988: AND
17989: IFFALSE 18016
17991: GO 17993
17993: DISABLE
// begin enable ;
17994: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
17995: LD_INT 1
17997: PPUSH
17998: LD_INT 5
18000: PPUSH
18001: CALL_OW 12
18005: PPUSH
18006: LD_INT 12
18008: PPUSH
18009: LD_INT 1
18011: PPUSH
18012: CALL_OW 55
// end ;
18016: END
// every 1 1$20 trigger allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < 15 do
18017: LD_EXP 11
18021: IFFALSE 18039
18023: PUSH
18024: LD_INT 12
18026: PPUSH
18027: LD_INT 1
18029: PPUSH
18030: CALL_OW 287
18034: PUSH
18035: LD_INT 15
18037: LESS
18038: AND
18039: IFFALSE 18066
18041: GO 18043
18043: DISABLE
// begin enable ;
18044: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
18045: LD_INT 1
18047: PPUSH
18048: LD_INT 5
18050: PPUSH
18051: CALL_OW 12
18055: PPUSH
18056: LD_INT 12
18058: PPUSH
18059: LD_INT 1
18061: PPUSH
18062: CALL_OW 55
// end ; end_of_file
18066: END
// every 0 0$1 trigger omarCountdown do
18067: LD_EXP 22
18071: IFFALSE 18123
18073: GO 18075
18075: DISABLE
// begin enable ;
18076: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
18077: LD_ADDR_OWVAR 47
18081: PUSH
18082: LD_STRING #X104-1
18084: PUSH
18085: LD_EXP 22
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
18094: LD_ADDR_EXP 22
18098: PUSH
18099: LD_EXP 22
18103: PUSH
18104: LD_INT 35
18106: MINUS
18107: ST_TO_ADDR
// if not omarCountdown then
18108: LD_EXP 22
18112: NOT
18113: IFFALSE 18123
// display_strings :=  ;
18115: LD_ADDR_OWVAR 47
18119: PUSH
18120: LD_STRING 
18122: ST_TO_ADDR
// end ; end_of_file
18123: END
// export globalGameSaveCounter ; every 0 0$1 do
18124: GO 18126
18126: DISABLE
// begin enable ;
18127: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18128: LD_STRING updateTimer(
18130: PUSH
18131: LD_OWVAR 1
18135: STR
18136: PUSH
18137: LD_STRING );
18139: STR
18140: PPUSH
18141: CALL_OW 559
// end ;
18145: END
// every 0 0$1 do
18146: GO 18148
18148: DISABLE
// begin globalGameSaveCounter := 0 ;
18149: LD_ADDR_EXP 53
18153: PUSH
18154: LD_INT 0
18156: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
18157: LD_STRING setGameSaveCounter(0)
18159: PPUSH
18160: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
18164: LD_STRING initStreamRollete();
18166: PPUSH
18167: CALL_OW 559
// InitStreamMode ;
18171: CALL 19523 0 0
// DefineStreamItems ( false ) ;
18175: LD_INT 0
18177: PPUSH
18178: CALL 19987 0 1
// end ;
18182: END
// export function SOS_MapStart ( ) ; begin
18183: LD_INT 0
18185: PPUSH
// if streamModeActive then
18186: LD_EXP 54
18190: IFFALSE 18199
// DefineStreamItems ( true ) ;
18192: LD_INT 1
18194: PPUSH
18195: CALL 19987 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
18199: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
18201: PPUSH
18202: CALL_OW 559
// UpdateLuaVariables ( ) ;
18206: CALL 18223 0 0
// UpdateFactoryWaypoints ( ) ;
18210: CALL 33109 0 0
// UpdateWarehouseGatheringPoints ( ) ;
18214: CALL 33361 0 0
// end ;
18218: LD_VAR 0 1
18222: RET
// function UpdateLuaVariables ( ) ; begin
18223: LD_INT 0
18225: PPUSH
// if globalGameSaveCounter then
18226: LD_EXP 53
18230: IFFALSE 18264
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
18232: LD_ADDR_EXP 53
18236: PUSH
18237: LD_EXP 53
18241: PPUSH
18242: CALL 80420 0 1
18246: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
18247: LD_STRING setGameSaveCounter(
18249: PUSH
18250: LD_EXP 53
18254: STR
18255: PUSH
18256: LD_STRING )
18258: STR
18259: PPUSH
18260: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
18264: LD_STRING setGameDifficulty(
18266: PUSH
18267: LD_OWVAR 67
18271: STR
18272: PUSH
18273: LD_STRING )
18275: STR
18276: PPUSH
18277: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
18281: LD_STRING displayDifficulty(
18283: PUSH
18284: LD_OWVAR 67
18288: STR
18289: PUSH
18290: LD_STRING )
18292: STR
18293: PPUSH
18294: CALL_OW 559
// end ;
18298: LD_VAR 0 1
18302: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18303: LD_INT 0
18305: PPUSH
// if p2 = stream_mode then
18306: LD_VAR 0 2
18310: PUSH
18311: LD_INT 100
18313: EQUAL
18314: IFFALSE 19317
// begin if not StreamModeActive then
18316: LD_EXP 54
18320: NOT
18321: IFFALSE 18331
// StreamModeActive := true ;
18323: LD_ADDR_EXP 54
18327: PUSH
18328: LD_INT 1
18330: ST_TO_ADDR
// if p3 = 0 then
18331: LD_VAR 0 3
18335: PUSH
18336: LD_INT 0
18338: EQUAL
18339: IFFALSE 18345
// InitStreamMode ;
18341: CALL 19523 0 0
// if p3 = 1 then
18345: LD_VAR 0 3
18349: PUSH
18350: LD_INT 1
18352: EQUAL
18353: IFFALSE 18363
// sRocket := true ;
18355: LD_ADDR_EXP 59
18359: PUSH
18360: LD_INT 1
18362: ST_TO_ADDR
// if p3 = 2 then
18363: LD_VAR 0 3
18367: PUSH
18368: LD_INT 2
18370: EQUAL
18371: IFFALSE 18381
// sSpeed := true ;
18373: LD_ADDR_EXP 58
18377: PUSH
18378: LD_INT 1
18380: ST_TO_ADDR
// if p3 = 3 then
18381: LD_VAR 0 3
18385: PUSH
18386: LD_INT 3
18388: EQUAL
18389: IFFALSE 18399
// sEngine := true ;
18391: LD_ADDR_EXP 60
18395: PUSH
18396: LD_INT 1
18398: ST_TO_ADDR
// if p3 = 4 then
18399: LD_VAR 0 3
18403: PUSH
18404: LD_INT 4
18406: EQUAL
18407: IFFALSE 18417
// sSpec := true ;
18409: LD_ADDR_EXP 57
18413: PUSH
18414: LD_INT 1
18416: ST_TO_ADDR
// if p3 = 5 then
18417: LD_VAR 0 3
18421: PUSH
18422: LD_INT 5
18424: EQUAL
18425: IFFALSE 18435
// sLevel := true ;
18427: LD_ADDR_EXP 61
18431: PUSH
18432: LD_INT 1
18434: ST_TO_ADDR
// if p3 = 6 then
18435: LD_VAR 0 3
18439: PUSH
18440: LD_INT 6
18442: EQUAL
18443: IFFALSE 18453
// sArmoury := true ;
18445: LD_ADDR_EXP 62
18449: PUSH
18450: LD_INT 1
18452: ST_TO_ADDR
// if p3 = 7 then
18453: LD_VAR 0 3
18457: PUSH
18458: LD_INT 7
18460: EQUAL
18461: IFFALSE 18471
// sRadar := true ;
18463: LD_ADDR_EXP 63
18467: PUSH
18468: LD_INT 1
18470: ST_TO_ADDR
// if p3 = 8 then
18471: LD_VAR 0 3
18475: PUSH
18476: LD_INT 8
18478: EQUAL
18479: IFFALSE 18489
// sBunker := true ;
18481: LD_ADDR_EXP 64
18485: PUSH
18486: LD_INT 1
18488: ST_TO_ADDR
// if p3 = 9 then
18489: LD_VAR 0 3
18493: PUSH
18494: LD_INT 9
18496: EQUAL
18497: IFFALSE 18507
// sHack := true ;
18499: LD_ADDR_EXP 65
18503: PUSH
18504: LD_INT 1
18506: ST_TO_ADDR
// if p3 = 10 then
18507: LD_VAR 0 3
18511: PUSH
18512: LD_INT 10
18514: EQUAL
18515: IFFALSE 18525
// sFire := true ;
18517: LD_ADDR_EXP 66
18521: PUSH
18522: LD_INT 1
18524: ST_TO_ADDR
// if p3 = 11 then
18525: LD_VAR 0 3
18529: PUSH
18530: LD_INT 11
18532: EQUAL
18533: IFFALSE 18543
// sRefresh := true ;
18535: LD_ADDR_EXP 67
18539: PUSH
18540: LD_INT 1
18542: ST_TO_ADDR
// if p3 = 12 then
18543: LD_VAR 0 3
18547: PUSH
18548: LD_INT 12
18550: EQUAL
18551: IFFALSE 18561
// sExp := true ;
18553: LD_ADDR_EXP 68
18557: PUSH
18558: LD_INT 1
18560: ST_TO_ADDR
// if p3 = 13 then
18561: LD_VAR 0 3
18565: PUSH
18566: LD_INT 13
18568: EQUAL
18569: IFFALSE 18579
// sDepot := true ;
18571: LD_ADDR_EXP 69
18575: PUSH
18576: LD_INT 1
18578: ST_TO_ADDR
// if p3 = 14 then
18579: LD_VAR 0 3
18583: PUSH
18584: LD_INT 14
18586: EQUAL
18587: IFFALSE 18597
// sFlag := true ;
18589: LD_ADDR_EXP 70
18593: PUSH
18594: LD_INT 1
18596: ST_TO_ADDR
// if p3 = 15 then
18597: LD_VAR 0 3
18601: PUSH
18602: LD_INT 15
18604: EQUAL
18605: IFFALSE 18615
// sKamikadze := true ;
18607: LD_ADDR_EXP 78
18611: PUSH
18612: LD_INT 1
18614: ST_TO_ADDR
// if p3 = 16 then
18615: LD_VAR 0 3
18619: PUSH
18620: LD_INT 16
18622: EQUAL
18623: IFFALSE 18633
// sTroll := true ;
18625: LD_ADDR_EXP 79
18629: PUSH
18630: LD_INT 1
18632: ST_TO_ADDR
// if p3 = 17 then
18633: LD_VAR 0 3
18637: PUSH
18638: LD_INT 17
18640: EQUAL
18641: IFFALSE 18651
// sSlow := true ;
18643: LD_ADDR_EXP 80
18647: PUSH
18648: LD_INT 1
18650: ST_TO_ADDR
// if p3 = 18 then
18651: LD_VAR 0 3
18655: PUSH
18656: LD_INT 18
18658: EQUAL
18659: IFFALSE 18669
// sLack := true ;
18661: LD_ADDR_EXP 81
18665: PUSH
18666: LD_INT 1
18668: ST_TO_ADDR
// if p3 = 19 then
18669: LD_VAR 0 3
18673: PUSH
18674: LD_INT 19
18676: EQUAL
18677: IFFALSE 18687
// sTank := true ;
18679: LD_ADDR_EXP 83
18683: PUSH
18684: LD_INT 1
18686: ST_TO_ADDR
// if p3 = 20 then
18687: LD_VAR 0 3
18691: PUSH
18692: LD_INT 20
18694: EQUAL
18695: IFFALSE 18705
// sRemote := true ;
18697: LD_ADDR_EXP 84
18701: PUSH
18702: LD_INT 1
18704: ST_TO_ADDR
// if p3 = 21 then
18705: LD_VAR 0 3
18709: PUSH
18710: LD_INT 21
18712: EQUAL
18713: IFFALSE 18723
// sPowell := true ;
18715: LD_ADDR_EXP 85
18719: PUSH
18720: LD_INT 1
18722: ST_TO_ADDR
// if p3 = 22 then
18723: LD_VAR 0 3
18727: PUSH
18728: LD_INT 22
18730: EQUAL
18731: IFFALSE 18741
// sTeleport := true ;
18733: LD_ADDR_EXP 88
18737: PUSH
18738: LD_INT 1
18740: ST_TO_ADDR
// if p3 = 23 then
18741: LD_VAR 0 3
18745: PUSH
18746: LD_INT 23
18748: EQUAL
18749: IFFALSE 18759
// sOilTower := true ;
18751: LD_ADDR_EXP 90
18755: PUSH
18756: LD_INT 1
18758: ST_TO_ADDR
// if p3 = 24 then
18759: LD_VAR 0 3
18763: PUSH
18764: LD_INT 24
18766: EQUAL
18767: IFFALSE 18777
// sShovel := true ;
18769: LD_ADDR_EXP 91
18773: PUSH
18774: LD_INT 1
18776: ST_TO_ADDR
// if p3 = 25 then
18777: LD_VAR 0 3
18781: PUSH
18782: LD_INT 25
18784: EQUAL
18785: IFFALSE 18795
// sSheik := true ;
18787: LD_ADDR_EXP 92
18791: PUSH
18792: LD_INT 1
18794: ST_TO_ADDR
// if p3 = 26 then
18795: LD_VAR 0 3
18799: PUSH
18800: LD_INT 26
18802: EQUAL
18803: IFFALSE 18813
// sEarthquake := true ;
18805: LD_ADDR_EXP 94
18809: PUSH
18810: LD_INT 1
18812: ST_TO_ADDR
// if p3 = 27 then
18813: LD_VAR 0 3
18817: PUSH
18818: LD_INT 27
18820: EQUAL
18821: IFFALSE 18831
// sAI := true ;
18823: LD_ADDR_EXP 95
18827: PUSH
18828: LD_INT 1
18830: ST_TO_ADDR
// if p3 = 28 then
18831: LD_VAR 0 3
18835: PUSH
18836: LD_INT 28
18838: EQUAL
18839: IFFALSE 18849
// sCargo := true ;
18841: LD_ADDR_EXP 98
18845: PUSH
18846: LD_INT 1
18848: ST_TO_ADDR
// if p3 = 29 then
18849: LD_VAR 0 3
18853: PUSH
18854: LD_INT 29
18856: EQUAL
18857: IFFALSE 18867
// sDLaser := true ;
18859: LD_ADDR_EXP 99
18863: PUSH
18864: LD_INT 1
18866: ST_TO_ADDR
// if p3 = 30 then
18867: LD_VAR 0 3
18871: PUSH
18872: LD_INT 30
18874: EQUAL
18875: IFFALSE 18885
// sExchange := true ;
18877: LD_ADDR_EXP 100
18881: PUSH
18882: LD_INT 1
18884: ST_TO_ADDR
// if p3 = 31 then
18885: LD_VAR 0 3
18889: PUSH
18890: LD_INT 31
18892: EQUAL
18893: IFFALSE 18903
// sFac := true ;
18895: LD_ADDR_EXP 101
18899: PUSH
18900: LD_INT 1
18902: ST_TO_ADDR
// if p3 = 32 then
18903: LD_VAR 0 3
18907: PUSH
18908: LD_INT 32
18910: EQUAL
18911: IFFALSE 18921
// sPower := true ;
18913: LD_ADDR_EXP 102
18917: PUSH
18918: LD_INT 1
18920: ST_TO_ADDR
// if p3 = 33 then
18921: LD_VAR 0 3
18925: PUSH
18926: LD_INT 33
18928: EQUAL
18929: IFFALSE 18939
// sRandom := true ;
18931: LD_ADDR_EXP 103
18935: PUSH
18936: LD_INT 1
18938: ST_TO_ADDR
// if p3 = 34 then
18939: LD_VAR 0 3
18943: PUSH
18944: LD_INT 34
18946: EQUAL
18947: IFFALSE 18957
// sShield := true ;
18949: LD_ADDR_EXP 104
18953: PUSH
18954: LD_INT 1
18956: ST_TO_ADDR
// if p3 = 35 then
18957: LD_VAR 0 3
18961: PUSH
18962: LD_INT 35
18964: EQUAL
18965: IFFALSE 18975
// sTime := true ;
18967: LD_ADDR_EXP 105
18971: PUSH
18972: LD_INT 1
18974: ST_TO_ADDR
// if p3 = 36 then
18975: LD_VAR 0 3
18979: PUSH
18980: LD_INT 36
18982: EQUAL
18983: IFFALSE 18993
// sTools := true ;
18985: LD_ADDR_EXP 106
18989: PUSH
18990: LD_INT 1
18992: ST_TO_ADDR
// if p3 = 101 then
18993: LD_VAR 0 3
18997: PUSH
18998: LD_INT 101
19000: EQUAL
19001: IFFALSE 19011
// sSold := true ;
19003: LD_ADDR_EXP 71
19007: PUSH
19008: LD_INT 1
19010: ST_TO_ADDR
// if p3 = 102 then
19011: LD_VAR 0 3
19015: PUSH
19016: LD_INT 102
19018: EQUAL
19019: IFFALSE 19029
// sDiff := true ;
19021: LD_ADDR_EXP 72
19025: PUSH
19026: LD_INT 1
19028: ST_TO_ADDR
// if p3 = 103 then
19029: LD_VAR 0 3
19033: PUSH
19034: LD_INT 103
19036: EQUAL
19037: IFFALSE 19047
// sFog := true ;
19039: LD_ADDR_EXP 75
19043: PUSH
19044: LD_INT 1
19046: ST_TO_ADDR
// if p3 = 104 then
19047: LD_VAR 0 3
19051: PUSH
19052: LD_INT 104
19054: EQUAL
19055: IFFALSE 19065
// sReset := true ;
19057: LD_ADDR_EXP 76
19061: PUSH
19062: LD_INT 1
19064: ST_TO_ADDR
// if p3 = 105 then
19065: LD_VAR 0 3
19069: PUSH
19070: LD_INT 105
19072: EQUAL
19073: IFFALSE 19083
// sSun := true ;
19075: LD_ADDR_EXP 77
19079: PUSH
19080: LD_INT 1
19082: ST_TO_ADDR
// if p3 = 106 then
19083: LD_VAR 0 3
19087: PUSH
19088: LD_INT 106
19090: EQUAL
19091: IFFALSE 19101
// sTiger := true ;
19093: LD_ADDR_EXP 73
19097: PUSH
19098: LD_INT 1
19100: ST_TO_ADDR
// if p3 = 107 then
19101: LD_VAR 0 3
19105: PUSH
19106: LD_INT 107
19108: EQUAL
19109: IFFALSE 19119
// sBomb := true ;
19111: LD_ADDR_EXP 74
19115: PUSH
19116: LD_INT 1
19118: ST_TO_ADDR
// if p3 = 108 then
19119: LD_VAR 0 3
19123: PUSH
19124: LD_INT 108
19126: EQUAL
19127: IFFALSE 19137
// sWound := true ;
19129: LD_ADDR_EXP 82
19133: PUSH
19134: LD_INT 1
19136: ST_TO_ADDR
// if p3 = 109 then
19137: LD_VAR 0 3
19141: PUSH
19142: LD_INT 109
19144: EQUAL
19145: IFFALSE 19155
// sBetray := true ;
19147: LD_ADDR_EXP 86
19151: PUSH
19152: LD_INT 1
19154: ST_TO_ADDR
// if p3 = 110 then
19155: LD_VAR 0 3
19159: PUSH
19160: LD_INT 110
19162: EQUAL
19163: IFFALSE 19173
// sContamin := true ;
19165: LD_ADDR_EXP 87
19169: PUSH
19170: LD_INT 1
19172: ST_TO_ADDR
// if p3 = 111 then
19173: LD_VAR 0 3
19177: PUSH
19178: LD_INT 111
19180: EQUAL
19181: IFFALSE 19191
// sOil := true ;
19183: LD_ADDR_EXP 89
19187: PUSH
19188: LD_INT 1
19190: ST_TO_ADDR
// if p3 = 112 then
19191: LD_VAR 0 3
19195: PUSH
19196: LD_INT 112
19198: EQUAL
19199: IFFALSE 19209
// sStu := true ;
19201: LD_ADDR_EXP 93
19205: PUSH
19206: LD_INT 1
19208: ST_TO_ADDR
// if p3 = 113 then
19209: LD_VAR 0 3
19213: PUSH
19214: LD_INT 113
19216: EQUAL
19217: IFFALSE 19227
// sBazooka := true ;
19219: LD_ADDR_EXP 96
19223: PUSH
19224: LD_INT 1
19226: ST_TO_ADDR
// if p3 = 114 then
19227: LD_VAR 0 3
19231: PUSH
19232: LD_INT 114
19234: EQUAL
19235: IFFALSE 19245
// sMortar := true ;
19237: LD_ADDR_EXP 97
19241: PUSH
19242: LD_INT 1
19244: ST_TO_ADDR
// if p3 = 115 then
19245: LD_VAR 0 3
19249: PUSH
19250: LD_INT 115
19252: EQUAL
19253: IFFALSE 19263
// sRanger := true ;
19255: LD_ADDR_EXP 107
19259: PUSH
19260: LD_INT 1
19262: ST_TO_ADDR
// if p3 = 116 then
19263: LD_VAR 0 3
19267: PUSH
19268: LD_INT 116
19270: EQUAL
19271: IFFALSE 19281
// sComputer := true ;
19273: LD_ADDR_EXP 108
19277: PUSH
19278: LD_INT 1
19280: ST_TO_ADDR
// if p3 = 117 then
19281: LD_VAR 0 3
19285: PUSH
19286: LD_INT 117
19288: EQUAL
19289: IFFALSE 19299
// s30 := true ;
19291: LD_ADDR_EXP 109
19295: PUSH
19296: LD_INT 1
19298: ST_TO_ADDR
// if p3 = 118 then
19299: LD_VAR 0 3
19303: PUSH
19304: LD_INT 118
19306: EQUAL
19307: IFFALSE 19317
// s60 := true ;
19309: LD_ADDR_EXP 110
19313: PUSH
19314: LD_INT 1
19316: ST_TO_ADDR
// end ; if p2 = hack_mode then
19317: LD_VAR 0 2
19321: PUSH
19322: LD_INT 101
19324: EQUAL
19325: IFFALSE 19453
// begin case p3 of 1 :
19327: LD_VAR 0 3
19331: PUSH
19332: LD_INT 1
19334: DOUBLE
19335: EQUAL
19336: IFTRUE 19340
19338: GO 19347
19340: POP
// hHackUnlimitedResources ; 2 :
19341: CALL 31716 0 0
19345: GO 19453
19347: LD_INT 2
19349: DOUBLE
19350: EQUAL
19351: IFTRUE 19355
19353: GO 19362
19355: POP
// hHackSetLevel10 ; 3 :
19356: CALL 31849 0 0
19360: GO 19453
19362: LD_INT 3
19364: DOUBLE
19365: EQUAL
19366: IFTRUE 19370
19368: GO 19377
19370: POP
// hHackSetLevel10YourUnits ; 4 :
19371: CALL 31934 0 0
19375: GO 19453
19377: LD_INT 4
19379: DOUBLE
19380: EQUAL
19381: IFTRUE 19385
19383: GO 19392
19385: POP
// hHackInvincible ; 5 :
19386: CALL 32382 0 0
19390: GO 19453
19392: LD_INT 5
19394: DOUBLE
19395: EQUAL
19396: IFTRUE 19400
19398: GO 19407
19400: POP
// hHackInvisible ; 6 :
19401: CALL 32493 0 0
19405: GO 19453
19407: LD_INT 6
19409: DOUBLE
19410: EQUAL
19411: IFTRUE 19415
19413: GO 19422
19415: POP
// hHackChangeYourSide ; 7 :
19416: CALL 32550 0 0
19420: GO 19453
19422: LD_INT 7
19424: DOUBLE
19425: EQUAL
19426: IFTRUE 19430
19428: GO 19437
19430: POP
// hHackChangeUnitSide ; 8 :
19431: CALL 32592 0 0
19435: GO 19453
19437: LD_INT 8
19439: DOUBLE
19440: EQUAL
19441: IFTRUE 19445
19443: GO 19452
19445: POP
// hHackFog ; end ;
19446: CALL 32693 0 0
19450: GO 19453
19452: POP
// end ; if p2 = game_save_mode then
19453: LD_VAR 0 2
19457: PUSH
19458: LD_INT 102
19460: EQUAL
19461: IFFALSE 19518
// begin if p3 = 1 then
19463: LD_VAR 0 3
19467: PUSH
19468: LD_INT 1
19470: EQUAL
19471: IFFALSE 19483
// globalGameSaveCounter := p4 ;
19473: LD_ADDR_EXP 53
19477: PUSH
19478: LD_VAR 0 4
19482: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
19483: LD_VAR 0 3
19487: PUSH
19488: LD_INT 2
19490: EQUAL
19491: IFFALSE 19499
19493: PUSH
19494: LD_EXP 53
19498: AND
19499: IFFALSE 19518
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19501: LD_STRING setGameSaveCounter(
19503: PUSH
19504: LD_EXP 53
19508: STR
19509: PUSH
19510: LD_STRING )
19512: STR
19513: PPUSH
19514: CALL_OW 559
// end ; end ;
19518: LD_VAR 0 7
19522: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
19523: LD_INT 0
19525: PPUSH
// streamModeActive := false ;
19526: LD_ADDR_EXP 54
19530: PUSH
19531: LD_INT 0
19533: ST_TO_ADDR
// normalCounter := 36 ;
19534: LD_ADDR_EXP 55
19538: PUSH
19539: LD_INT 36
19541: ST_TO_ADDR
// hardcoreCounter := 18 ;
19542: LD_ADDR_EXP 56
19546: PUSH
19547: LD_INT 18
19549: ST_TO_ADDR
// sRocket := false ;
19550: LD_ADDR_EXP 59
19554: PUSH
19555: LD_INT 0
19557: ST_TO_ADDR
// sSpeed := false ;
19558: LD_ADDR_EXP 58
19562: PUSH
19563: LD_INT 0
19565: ST_TO_ADDR
// sEngine := false ;
19566: LD_ADDR_EXP 60
19570: PUSH
19571: LD_INT 0
19573: ST_TO_ADDR
// sSpec := false ;
19574: LD_ADDR_EXP 57
19578: PUSH
19579: LD_INT 0
19581: ST_TO_ADDR
// sLevel := false ;
19582: LD_ADDR_EXP 61
19586: PUSH
19587: LD_INT 0
19589: ST_TO_ADDR
// sArmoury := false ;
19590: LD_ADDR_EXP 62
19594: PUSH
19595: LD_INT 0
19597: ST_TO_ADDR
// sRadar := false ;
19598: LD_ADDR_EXP 63
19602: PUSH
19603: LD_INT 0
19605: ST_TO_ADDR
// sBunker := false ;
19606: LD_ADDR_EXP 64
19610: PUSH
19611: LD_INT 0
19613: ST_TO_ADDR
// sHack := false ;
19614: LD_ADDR_EXP 65
19618: PUSH
19619: LD_INT 0
19621: ST_TO_ADDR
// sFire := false ;
19622: LD_ADDR_EXP 66
19626: PUSH
19627: LD_INT 0
19629: ST_TO_ADDR
// sRefresh := false ;
19630: LD_ADDR_EXP 67
19634: PUSH
19635: LD_INT 0
19637: ST_TO_ADDR
// sExp := false ;
19638: LD_ADDR_EXP 68
19642: PUSH
19643: LD_INT 0
19645: ST_TO_ADDR
// sDepot := false ;
19646: LD_ADDR_EXP 69
19650: PUSH
19651: LD_INT 0
19653: ST_TO_ADDR
// sFlag := false ;
19654: LD_ADDR_EXP 70
19658: PUSH
19659: LD_INT 0
19661: ST_TO_ADDR
// sKamikadze := false ;
19662: LD_ADDR_EXP 78
19666: PUSH
19667: LD_INT 0
19669: ST_TO_ADDR
// sTroll := false ;
19670: LD_ADDR_EXP 79
19674: PUSH
19675: LD_INT 0
19677: ST_TO_ADDR
// sSlow := false ;
19678: LD_ADDR_EXP 80
19682: PUSH
19683: LD_INT 0
19685: ST_TO_ADDR
// sLack := false ;
19686: LD_ADDR_EXP 81
19690: PUSH
19691: LD_INT 0
19693: ST_TO_ADDR
// sTank := false ;
19694: LD_ADDR_EXP 83
19698: PUSH
19699: LD_INT 0
19701: ST_TO_ADDR
// sRemote := false ;
19702: LD_ADDR_EXP 84
19706: PUSH
19707: LD_INT 0
19709: ST_TO_ADDR
// sPowell := false ;
19710: LD_ADDR_EXP 85
19714: PUSH
19715: LD_INT 0
19717: ST_TO_ADDR
// sTeleport := false ;
19718: LD_ADDR_EXP 88
19722: PUSH
19723: LD_INT 0
19725: ST_TO_ADDR
// sOilTower := false ;
19726: LD_ADDR_EXP 90
19730: PUSH
19731: LD_INT 0
19733: ST_TO_ADDR
// sShovel := false ;
19734: LD_ADDR_EXP 91
19738: PUSH
19739: LD_INT 0
19741: ST_TO_ADDR
// sSheik := false ;
19742: LD_ADDR_EXP 92
19746: PUSH
19747: LD_INT 0
19749: ST_TO_ADDR
// sEarthquake := false ;
19750: LD_ADDR_EXP 94
19754: PUSH
19755: LD_INT 0
19757: ST_TO_ADDR
// sAI := false ;
19758: LD_ADDR_EXP 95
19762: PUSH
19763: LD_INT 0
19765: ST_TO_ADDR
// sCargo := false ;
19766: LD_ADDR_EXP 98
19770: PUSH
19771: LD_INT 0
19773: ST_TO_ADDR
// sDLaser := false ;
19774: LD_ADDR_EXP 99
19778: PUSH
19779: LD_INT 0
19781: ST_TO_ADDR
// sExchange := false ;
19782: LD_ADDR_EXP 100
19786: PUSH
19787: LD_INT 0
19789: ST_TO_ADDR
// sFac := false ;
19790: LD_ADDR_EXP 101
19794: PUSH
19795: LD_INT 0
19797: ST_TO_ADDR
// sPower := false ;
19798: LD_ADDR_EXP 102
19802: PUSH
19803: LD_INT 0
19805: ST_TO_ADDR
// sRandom := false ;
19806: LD_ADDR_EXP 103
19810: PUSH
19811: LD_INT 0
19813: ST_TO_ADDR
// sShield := false ;
19814: LD_ADDR_EXP 104
19818: PUSH
19819: LD_INT 0
19821: ST_TO_ADDR
// sTime := false ;
19822: LD_ADDR_EXP 105
19826: PUSH
19827: LD_INT 0
19829: ST_TO_ADDR
// sTools := false ;
19830: LD_ADDR_EXP 106
19834: PUSH
19835: LD_INT 0
19837: ST_TO_ADDR
// sSold := false ;
19838: LD_ADDR_EXP 71
19842: PUSH
19843: LD_INT 0
19845: ST_TO_ADDR
// sDiff := false ;
19846: LD_ADDR_EXP 72
19850: PUSH
19851: LD_INT 0
19853: ST_TO_ADDR
// sFog := false ;
19854: LD_ADDR_EXP 75
19858: PUSH
19859: LD_INT 0
19861: ST_TO_ADDR
// sReset := false ;
19862: LD_ADDR_EXP 76
19866: PUSH
19867: LD_INT 0
19869: ST_TO_ADDR
// sSun := false ;
19870: LD_ADDR_EXP 77
19874: PUSH
19875: LD_INT 0
19877: ST_TO_ADDR
// sTiger := false ;
19878: LD_ADDR_EXP 73
19882: PUSH
19883: LD_INT 0
19885: ST_TO_ADDR
// sBomb := false ;
19886: LD_ADDR_EXP 74
19890: PUSH
19891: LD_INT 0
19893: ST_TO_ADDR
// sWound := false ;
19894: LD_ADDR_EXP 82
19898: PUSH
19899: LD_INT 0
19901: ST_TO_ADDR
// sBetray := false ;
19902: LD_ADDR_EXP 86
19906: PUSH
19907: LD_INT 0
19909: ST_TO_ADDR
// sContamin := false ;
19910: LD_ADDR_EXP 87
19914: PUSH
19915: LD_INT 0
19917: ST_TO_ADDR
// sOil := false ;
19918: LD_ADDR_EXP 89
19922: PUSH
19923: LD_INT 0
19925: ST_TO_ADDR
// sStu := false ;
19926: LD_ADDR_EXP 93
19930: PUSH
19931: LD_INT 0
19933: ST_TO_ADDR
// sBazooka := false ;
19934: LD_ADDR_EXP 96
19938: PUSH
19939: LD_INT 0
19941: ST_TO_ADDR
// sMortar := false ;
19942: LD_ADDR_EXP 97
19946: PUSH
19947: LD_INT 0
19949: ST_TO_ADDR
// sRanger := false ;
19950: LD_ADDR_EXP 107
19954: PUSH
19955: LD_INT 0
19957: ST_TO_ADDR
// sComputer := false ;
19958: LD_ADDR_EXP 108
19962: PUSH
19963: LD_INT 0
19965: ST_TO_ADDR
// s30 := false ;
19966: LD_ADDR_EXP 109
19970: PUSH
19971: LD_INT 0
19973: ST_TO_ADDR
// s60 := false ;
19974: LD_ADDR_EXP 110
19978: PUSH
19979: LD_INT 0
19981: ST_TO_ADDR
// end ;
19982: LD_VAR 0 1
19986: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
19987: LD_INT 0
19989: PPUSH
19990: PPUSH
19991: PPUSH
19992: PPUSH
19993: PPUSH
19994: PPUSH
19995: PPUSH
// result := [ ] ;
19996: LD_ADDR_VAR 0 2
20000: PUSH
20001: EMPTY
20002: ST_TO_ADDR
// if campaign_id = 1 then
20003: LD_OWVAR 69
20007: PUSH
20008: LD_INT 1
20010: EQUAL
20011: IFFALSE 23177
// begin case mission_number of 1 :
20013: LD_OWVAR 70
20017: PUSH
20018: LD_INT 1
20020: DOUBLE
20021: EQUAL
20022: IFTRUE 20026
20024: GO 20102
20026: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20027: LD_ADDR_VAR 0 2
20031: PUSH
20032: LD_INT 2
20034: PUSH
20035: LD_INT 4
20037: PUSH
20038: LD_INT 11
20040: PUSH
20041: LD_INT 12
20043: PUSH
20044: LD_INT 15
20046: PUSH
20047: LD_INT 16
20049: PUSH
20050: LD_INT 22
20052: PUSH
20053: LD_INT 23
20055: PUSH
20056: LD_INT 26
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: PUSH
20070: LD_INT 101
20072: PUSH
20073: LD_INT 102
20075: PUSH
20076: LD_INT 106
20078: PUSH
20079: LD_INT 116
20081: PUSH
20082: LD_INT 117
20084: PUSH
20085: LD_INT 118
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: ST_TO_ADDR
20100: GO 23175
20102: LD_INT 2
20104: DOUBLE
20105: EQUAL
20106: IFTRUE 20110
20108: GO 20194
20110: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20111: LD_ADDR_VAR 0 2
20115: PUSH
20116: LD_INT 2
20118: PUSH
20119: LD_INT 4
20121: PUSH
20122: LD_INT 11
20124: PUSH
20125: LD_INT 12
20127: PUSH
20128: LD_INT 15
20130: PUSH
20131: LD_INT 16
20133: PUSH
20134: LD_INT 22
20136: PUSH
20137: LD_INT 23
20139: PUSH
20140: LD_INT 26
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: PUSH
20154: LD_INT 101
20156: PUSH
20157: LD_INT 102
20159: PUSH
20160: LD_INT 105
20162: PUSH
20163: LD_INT 106
20165: PUSH
20166: LD_INT 108
20168: PUSH
20169: LD_INT 116
20171: PUSH
20172: LD_INT 117
20174: PUSH
20175: LD_INT 118
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: ST_TO_ADDR
20192: GO 23175
20194: LD_INT 3
20196: DOUBLE
20197: EQUAL
20198: IFTRUE 20202
20200: GO 20290
20202: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20203: LD_ADDR_VAR 0 2
20207: PUSH
20208: LD_INT 2
20210: PUSH
20211: LD_INT 4
20213: PUSH
20214: LD_INT 5
20216: PUSH
20217: LD_INT 11
20219: PUSH
20220: LD_INT 12
20222: PUSH
20223: LD_INT 15
20225: PUSH
20226: LD_INT 16
20228: PUSH
20229: LD_INT 22
20231: PUSH
20232: LD_INT 26
20234: PUSH
20235: LD_INT 36
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: PUSH
20250: LD_INT 101
20252: PUSH
20253: LD_INT 102
20255: PUSH
20256: LD_INT 105
20258: PUSH
20259: LD_INT 106
20261: PUSH
20262: LD_INT 108
20264: PUSH
20265: LD_INT 116
20267: PUSH
20268: LD_INT 117
20270: PUSH
20271: LD_INT 118
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: ST_TO_ADDR
20288: GO 23175
20290: LD_INT 4
20292: DOUBLE
20293: EQUAL
20294: IFTRUE 20298
20296: GO 20394
20298: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20299: LD_ADDR_VAR 0 2
20303: PUSH
20304: LD_INT 2
20306: PUSH
20307: LD_INT 4
20309: PUSH
20310: LD_INT 5
20312: PUSH
20313: LD_INT 8
20315: PUSH
20316: LD_INT 11
20318: PUSH
20319: LD_INT 12
20321: PUSH
20322: LD_INT 15
20324: PUSH
20325: LD_INT 16
20327: PUSH
20328: LD_INT 22
20330: PUSH
20331: LD_INT 23
20333: PUSH
20334: LD_INT 26
20336: PUSH
20337: LD_INT 36
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: PUSH
20354: LD_INT 101
20356: PUSH
20357: LD_INT 102
20359: PUSH
20360: LD_INT 105
20362: PUSH
20363: LD_INT 106
20365: PUSH
20366: LD_INT 108
20368: PUSH
20369: LD_INT 116
20371: PUSH
20372: LD_INT 117
20374: PUSH
20375: LD_INT 118
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: ST_TO_ADDR
20392: GO 23175
20394: LD_INT 5
20396: DOUBLE
20397: EQUAL
20398: IFTRUE 20402
20400: GO 20514
20402: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20403: LD_ADDR_VAR 0 2
20407: PUSH
20408: LD_INT 2
20410: PUSH
20411: LD_INT 4
20413: PUSH
20414: LD_INT 5
20416: PUSH
20417: LD_INT 6
20419: PUSH
20420: LD_INT 8
20422: PUSH
20423: LD_INT 11
20425: PUSH
20426: LD_INT 12
20428: PUSH
20429: LD_INT 15
20431: PUSH
20432: LD_INT 16
20434: PUSH
20435: LD_INT 22
20437: PUSH
20438: LD_INT 23
20440: PUSH
20441: LD_INT 25
20443: PUSH
20444: LD_INT 26
20446: PUSH
20447: LD_INT 36
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 101
20468: PUSH
20469: LD_INT 102
20471: PUSH
20472: LD_INT 105
20474: PUSH
20475: LD_INT 106
20477: PUSH
20478: LD_INT 108
20480: PUSH
20481: LD_INT 109
20483: PUSH
20484: LD_INT 112
20486: PUSH
20487: LD_INT 116
20489: PUSH
20490: LD_INT 117
20492: PUSH
20493: LD_INT 118
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: ST_TO_ADDR
20512: GO 23175
20514: LD_INT 6
20516: DOUBLE
20517: EQUAL
20518: IFTRUE 20522
20520: GO 20654
20522: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20523: LD_ADDR_VAR 0 2
20527: PUSH
20528: LD_INT 2
20530: PUSH
20531: LD_INT 4
20533: PUSH
20534: LD_INT 5
20536: PUSH
20537: LD_INT 6
20539: PUSH
20540: LD_INT 8
20542: PUSH
20543: LD_INT 11
20545: PUSH
20546: LD_INT 12
20548: PUSH
20549: LD_INT 15
20551: PUSH
20552: LD_INT 16
20554: PUSH
20555: LD_INT 20
20557: PUSH
20558: LD_INT 21
20560: PUSH
20561: LD_INT 22
20563: PUSH
20564: LD_INT 23
20566: PUSH
20567: LD_INT 25
20569: PUSH
20570: LD_INT 26
20572: PUSH
20573: LD_INT 30
20575: PUSH
20576: LD_INT 31
20578: PUSH
20579: LD_INT 32
20581: PUSH
20582: LD_INT 36
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: PUSH
20606: LD_INT 101
20608: PUSH
20609: LD_INT 102
20611: PUSH
20612: LD_INT 105
20614: PUSH
20615: LD_INT 106
20617: PUSH
20618: LD_INT 108
20620: PUSH
20621: LD_INT 109
20623: PUSH
20624: LD_INT 112
20626: PUSH
20627: LD_INT 116
20629: PUSH
20630: LD_INT 117
20632: PUSH
20633: LD_INT 118
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: ST_TO_ADDR
20652: GO 23175
20654: LD_INT 7
20656: DOUBLE
20657: EQUAL
20658: IFTRUE 20662
20660: GO 20774
20662: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20663: LD_ADDR_VAR 0 2
20667: PUSH
20668: LD_INT 2
20670: PUSH
20671: LD_INT 4
20673: PUSH
20674: LD_INT 5
20676: PUSH
20677: LD_INT 7
20679: PUSH
20680: LD_INT 11
20682: PUSH
20683: LD_INT 12
20685: PUSH
20686: LD_INT 15
20688: PUSH
20689: LD_INT 16
20691: PUSH
20692: LD_INT 20
20694: PUSH
20695: LD_INT 21
20697: PUSH
20698: LD_INT 22
20700: PUSH
20701: LD_INT 23
20703: PUSH
20704: LD_INT 25
20706: PUSH
20707: LD_INT 26
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: PUSH
20726: LD_INT 101
20728: PUSH
20729: LD_INT 102
20731: PUSH
20732: LD_INT 103
20734: PUSH
20735: LD_INT 105
20737: PUSH
20738: LD_INT 106
20740: PUSH
20741: LD_INT 108
20743: PUSH
20744: LD_INT 112
20746: PUSH
20747: LD_INT 116
20749: PUSH
20750: LD_INT 117
20752: PUSH
20753: LD_INT 118
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: ST_TO_ADDR
20772: GO 23175
20774: LD_INT 8
20776: DOUBLE
20777: EQUAL
20778: IFTRUE 20782
20780: GO 20922
20782: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
20783: LD_ADDR_VAR 0 2
20787: PUSH
20788: LD_INT 2
20790: PUSH
20791: LD_INT 4
20793: PUSH
20794: LD_INT 5
20796: PUSH
20797: LD_INT 6
20799: PUSH
20800: LD_INT 7
20802: PUSH
20803: LD_INT 8
20805: PUSH
20806: LD_INT 11
20808: PUSH
20809: LD_INT 12
20811: PUSH
20812: LD_INT 15
20814: PUSH
20815: LD_INT 16
20817: PUSH
20818: LD_INT 20
20820: PUSH
20821: LD_INT 21
20823: PUSH
20824: LD_INT 22
20826: PUSH
20827: LD_INT 23
20829: PUSH
20830: LD_INT 25
20832: PUSH
20833: LD_INT 26
20835: PUSH
20836: LD_INT 30
20838: PUSH
20839: LD_INT 31
20841: PUSH
20842: LD_INT 32
20844: PUSH
20845: LD_INT 36
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: PUSH
20870: LD_INT 101
20872: PUSH
20873: LD_INT 102
20875: PUSH
20876: LD_INT 103
20878: PUSH
20879: LD_INT 105
20881: PUSH
20882: LD_INT 106
20884: PUSH
20885: LD_INT 108
20887: PUSH
20888: LD_INT 109
20890: PUSH
20891: LD_INT 112
20893: PUSH
20894: LD_INT 116
20896: PUSH
20897: LD_INT 117
20899: PUSH
20900: LD_INT 118
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: ST_TO_ADDR
20920: GO 23175
20922: LD_INT 9
20924: DOUBLE
20925: EQUAL
20926: IFTRUE 20930
20928: GO 21078
20930: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
20931: LD_ADDR_VAR 0 2
20935: PUSH
20936: LD_INT 2
20938: PUSH
20939: LD_INT 4
20941: PUSH
20942: LD_INT 5
20944: PUSH
20945: LD_INT 6
20947: PUSH
20948: LD_INT 7
20950: PUSH
20951: LD_INT 8
20953: PUSH
20954: LD_INT 11
20956: PUSH
20957: LD_INT 12
20959: PUSH
20960: LD_INT 15
20962: PUSH
20963: LD_INT 16
20965: PUSH
20966: LD_INT 20
20968: PUSH
20969: LD_INT 21
20971: PUSH
20972: LD_INT 22
20974: PUSH
20975: LD_INT 23
20977: PUSH
20978: LD_INT 25
20980: PUSH
20981: LD_INT 26
20983: PUSH
20984: LD_INT 28
20986: PUSH
20987: LD_INT 30
20989: PUSH
20990: LD_INT 31
20992: PUSH
20993: LD_INT 32
20995: PUSH
20996: LD_INT 36
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: PUSH
21022: LD_INT 101
21024: PUSH
21025: LD_INT 102
21027: PUSH
21028: LD_INT 103
21030: PUSH
21031: LD_INT 105
21033: PUSH
21034: LD_INT 106
21036: PUSH
21037: LD_INT 108
21039: PUSH
21040: LD_INT 109
21042: PUSH
21043: LD_INT 112
21045: PUSH
21046: LD_INT 114
21048: PUSH
21049: LD_INT 116
21051: PUSH
21052: LD_INT 117
21054: PUSH
21055: LD_INT 118
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: ST_TO_ADDR
21076: GO 23175
21078: LD_INT 10
21080: DOUBLE
21081: EQUAL
21082: IFTRUE 21086
21084: GO 21282
21086: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21087: LD_ADDR_VAR 0 2
21091: PUSH
21092: LD_INT 2
21094: PUSH
21095: LD_INT 4
21097: PUSH
21098: LD_INT 5
21100: PUSH
21101: LD_INT 6
21103: PUSH
21104: LD_INT 7
21106: PUSH
21107: LD_INT 8
21109: PUSH
21110: LD_INT 9
21112: PUSH
21113: LD_INT 10
21115: PUSH
21116: LD_INT 11
21118: PUSH
21119: LD_INT 12
21121: PUSH
21122: LD_INT 13
21124: PUSH
21125: LD_INT 14
21127: PUSH
21128: LD_INT 15
21130: PUSH
21131: LD_INT 16
21133: PUSH
21134: LD_INT 17
21136: PUSH
21137: LD_INT 18
21139: PUSH
21140: LD_INT 19
21142: PUSH
21143: LD_INT 20
21145: PUSH
21146: LD_INT 21
21148: PUSH
21149: LD_INT 22
21151: PUSH
21152: LD_INT 23
21154: PUSH
21155: LD_INT 24
21157: PUSH
21158: LD_INT 25
21160: PUSH
21161: LD_INT 26
21163: PUSH
21164: LD_INT 28
21166: PUSH
21167: LD_INT 30
21169: PUSH
21170: LD_INT 31
21172: PUSH
21173: LD_INT 32
21175: PUSH
21176: LD_INT 36
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 101
21212: PUSH
21213: LD_INT 102
21215: PUSH
21216: LD_INT 103
21218: PUSH
21219: LD_INT 104
21221: PUSH
21222: LD_INT 105
21224: PUSH
21225: LD_INT 106
21227: PUSH
21228: LD_INT 107
21230: PUSH
21231: LD_INT 108
21233: PUSH
21234: LD_INT 109
21236: PUSH
21237: LD_INT 110
21239: PUSH
21240: LD_INT 111
21242: PUSH
21243: LD_INT 112
21245: PUSH
21246: LD_INT 114
21248: PUSH
21249: LD_INT 116
21251: PUSH
21252: LD_INT 117
21254: PUSH
21255: LD_INT 118
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: ST_TO_ADDR
21280: GO 23175
21282: LD_INT 11
21284: DOUBLE
21285: EQUAL
21286: IFTRUE 21290
21288: GO 21494
21290: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21291: LD_ADDR_VAR 0 2
21295: PUSH
21296: LD_INT 2
21298: PUSH
21299: LD_INT 3
21301: PUSH
21302: LD_INT 4
21304: PUSH
21305: LD_INT 5
21307: PUSH
21308: LD_INT 6
21310: PUSH
21311: LD_INT 7
21313: PUSH
21314: LD_INT 8
21316: PUSH
21317: LD_INT 9
21319: PUSH
21320: LD_INT 10
21322: PUSH
21323: LD_INT 11
21325: PUSH
21326: LD_INT 12
21328: PUSH
21329: LD_INT 13
21331: PUSH
21332: LD_INT 14
21334: PUSH
21335: LD_INT 15
21337: PUSH
21338: LD_INT 16
21340: PUSH
21341: LD_INT 17
21343: PUSH
21344: LD_INT 18
21346: PUSH
21347: LD_INT 19
21349: PUSH
21350: LD_INT 20
21352: PUSH
21353: LD_INT 21
21355: PUSH
21356: LD_INT 22
21358: PUSH
21359: LD_INT 23
21361: PUSH
21362: LD_INT 24
21364: PUSH
21365: LD_INT 25
21367: PUSH
21368: LD_INT 26
21370: PUSH
21371: LD_INT 28
21373: PUSH
21374: LD_INT 30
21376: PUSH
21377: LD_INT 31
21379: PUSH
21380: LD_INT 32
21382: PUSH
21383: LD_INT 34
21385: PUSH
21386: LD_INT 36
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 101
21424: PUSH
21425: LD_INT 102
21427: PUSH
21428: LD_INT 103
21430: PUSH
21431: LD_INT 104
21433: PUSH
21434: LD_INT 105
21436: PUSH
21437: LD_INT 106
21439: PUSH
21440: LD_INT 107
21442: PUSH
21443: LD_INT 108
21445: PUSH
21446: LD_INT 109
21448: PUSH
21449: LD_INT 110
21451: PUSH
21452: LD_INT 111
21454: PUSH
21455: LD_INT 112
21457: PUSH
21458: LD_INT 114
21460: PUSH
21461: LD_INT 116
21463: PUSH
21464: LD_INT 117
21466: PUSH
21467: LD_INT 118
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: ST_TO_ADDR
21492: GO 23175
21494: LD_INT 12
21496: DOUBLE
21497: EQUAL
21498: IFTRUE 21502
21500: GO 21722
21502: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21503: LD_ADDR_VAR 0 2
21507: PUSH
21508: LD_INT 1
21510: PUSH
21511: LD_INT 2
21513: PUSH
21514: LD_INT 3
21516: PUSH
21517: LD_INT 4
21519: PUSH
21520: LD_INT 5
21522: PUSH
21523: LD_INT 6
21525: PUSH
21526: LD_INT 7
21528: PUSH
21529: LD_INT 8
21531: PUSH
21532: LD_INT 9
21534: PUSH
21535: LD_INT 10
21537: PUSH
21538: LD_INT 11
21540: PUSH
21541: LD_INT 12
21543: PUSH
21544: LD_INT 13
21546: PUSH
21547: LD_INT 14
21549: PUSH
21550: LD_INT 15
21552: PUSH
21553: LD_INT 16
21555: PUSH
21556: LD_INT 17
21558: PUSH
21559: LD_INT 18
21561: PUSH
21562: LD_INT 19
21564: PUSH
21565: LD_INT 20
21567: PUSH
21568: LD_INT 21
21570: PUSH
21571: LD_INT 22
21573: PUSH
21574: LD_INT 23
21576: PUSH
21577: LD_INT 24
21579: PUSH
21580: LD_INT 25
21582: PUSH
21583: LD_INT 26
21585: PUSH
21586: LD_INT 27
21588: PUSH
21589: LD_INT 28
21591: PUSH
21592: LD_INT 30
21594: PUSH
21595: LD_INT 31
21597: PUSH
21598: LD_INT 32
21600: PUSH
21601: LD_INT 33
21603: PUSH
21604: LD_INT 34
21606: PUSH
21607: LD_INT 36
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: PUSH
21646: LD_INT 101
21648: PUSH
21649: LD_INT 102
21651: PUSH
21652: LD_INT 103
21654: PUSH
21655: LD_INT 104
21657: PUSH
21658: LD_INT 105
21660: PUSH
21661: LD_INT 106
21663: PUSH
21664: LD_INT 107
21666: PUSH
21667: LD_INT 108
21669: PUSH
21670: LD_INT 109
21672: PUSH
21673: LD_INT 110
21675: PUSH
21676: LD_INT 111
21678: PUSH
21679: LD_INT 112
21681: PUSH
21682: LD_INT 113
21684: PUSH
21685: LD_INT 114
21687: PUSH
21688: LD_INT 116
21690: PUSH
21691: LD_INT 117
21693: PUSH
21694: LD_INT 118
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: ST_TO_ADDR
21720: GO 23175
21722: LD_INT 13
21724: DOUBLE
21725: EQUAL
21726: IFTRUE 21730
21728: GO 21938
21730: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
21731: LD_ADDR_VAR 0 2
21735: PUSH
21736: LD_INT 1
21738: PUSH
21739: LD_INT 2
21741: PUSH
21742: LD_INT 3
21744: PUSH
21745: LD_INT 4
21747: PUSH
21748: LD_INT 5
21750: PUSH
21751: LD_INT 8
21753: PUSH
21754: LD_INT 9
21756: PUSH
21757: LD_INT 10
21759: PUSH
21760: LD_INT 11
21762: PUSH
21763: LD_INT 12
21765: PUSH
21766: LD_INT 14
21768: PUSH
21769: LD_INT 15
21771: PUSH
21772: LD_INT 16
21774: PUSH
21775: LD_INT 17
21777: PUSH
21778: LD_INT 18
21780: PUSH
21781: LD_INT 19
21783: PUSH
21784: LD_INT 20
21786: PUSH
21787: LD_INT 21
21789: PUSH
21790: LD_INT 22
21792: PUSH
21793: LD_INT 23
21795: PUSH
21796: LD_INT 24
21798: PUSH
21799: LD_INT 25
21801: PUSH
21802: LD_INT 26
21804: PUSH
21805: LD_INT 27
21807: PUSH
21808: LD_INT 28
21810: PUSH
21811: LD_INT 30
21813: PUSH
21814: LD_INT 31
21816: PUSH
21817: LD_INT 32
21819: PUSH
21820: LD_INT 33
21822: PUSH
21823: LD_INT 34
21825: PUSH
21826: LD_INT 36
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: PUSH
21862: LD_INT 101
21864: PUSH
21865: LD_INT 102
21867: PUSH
21868: LD_INT 103
21870: PUSH
21871: LD_INT 104
21873: PUSH
21874: LD_INT 105
21876: PUSH
21877: LD_INT 106
21879: PUSH
21880: LD_INT 107
21882: PUSH
21883: LD_INT 108
21885: PUSH
21886: LD_INT 109
21888: PUSH
21889: LD_INT 110
21891: PUSH
21892: LD_INT 111
21894: PUSH
21895: LD_INT 112
21897: PUSH
21898: LD_INT 113
21900: PUSH
21901: LD_INT 114
21903: PUSH
21904: LD_INT 116
21906: PUSH
21907: LD_INT 117
21909: PUSH
21910: LD_INT 118
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: ST_TO_ADDR
21936: GO 23175
21938: LD_INT 14
21940: DOUBLE
21941: EQUAL
21942: IFTRUE 21946
21944: GO 22170
21946: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
21947: LD_ADDR_VAR 0 2
21951: PUSH
21952: LD_INT 1
21954: PUSH
21955: LD_INT 2
21957: PUSH
21958: LD_INT 3
21960: PUSH
21961: LD_INT 4
21963: PUSH
21964: LD_INT 5
21966: PUSH
21967: LD_INT 6
21969: PUSH
21970: LD_INT 7
21972: PUSH
21973: LD_INT 8
21975: PUSH
21976: LD_INT 9
21978: PUSH
21979: LD_INT 10
21981: PUSH
21982: LD_INT 11
21984: PUSH
21985: LD_INT 12
21987: PUSH
21988: LD_INT 13
21990: PUSH
21991: LD_INT 14
21993: PUSH
21994: LD_INT 15
21996: PUSH
21997: LD_INT 16
21999: PUSH
22000: LD_INT 17
22002: PUSH
22003: LD_INT 18
22005: PUSH
22006: LD_INT 19
22008: PUSH
22009: LD_INT 20
22011: PUSH
22012: LD_INT 21
22014: PUSH
22015: LD_INT 22
22017: PUSH
22018: LD_INT 23
22020: PUSH
22021: LD_INT 24
22023: PUSH
22024: LD_INT 25
22026: PUSH
22027: LD_INT 26
22029: PUSH
22030: LD_INT 27
22032: PUSH
22033: LD_INT 28
22035: PUSH
22036: LD_INT 29
22038: PUSH
22039: LD_INT 30
22041: PUSH
22042: LD_INT 31
22044: PUSH
22045: LD_INT 32
22047: PUSH
22048: LD_INT 33
22050: PUSH
22051: LD_INT 34
22053: PUSH
22054: LD_INT 36
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: PUSH
22094: LD_INT 101
22096: PUSH
22097: LD_INT 102
22099: PUSH
22100: LD_INT 103
22102: PUSH
22103: LD_INT 104
22105: PUSH
22106: LD_INT 105
22108: PUSH
22109: LD_INT 106
22111: PUSH
22112: LD_INT 107
22114: PUSH
22115: LD_INT 108
22117: PUSH
22118: LD_INT 109
22120: PUSH
22121: LD_INT 110
22123: PUSH
22124: LD_INT 111
22126: PUSH
22127: LD_INT 112
22129: PUSH
22130: LD_INT 113
22132: PUSH
22133: LD_INT 114
22135: PUSH
22136: LD_INT 116
22138: PUSH
22139: LD_INT 117
22141: PUSH
22142: LD_INT 118
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: ST_TO_ADDR
22168: GO 23175
22170: LD_INT 15
22172: DOUBLE
22173: EQUAL
22174: IFTRUE 22178
22176: GO 22402
22178: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22179: LD_ADDR_VAR 0 2
22183: PUSH
22184: LD_INT 1
22186: PUSH
22187: LD_INT 2
22189: PUSH
22190: LD_INT 3
22192: PUSH
22193: LD_INT 4
22195: PUSH
22196: LD_INT 5
22198: PUSH
22199: LD_INT 6
22201: PUSH
22202: LD_INT 7
22204: PUSH
22205: LD_INT 8
22207: PUSH
22208: LD_INT 9
22210: PUSH
22211: LD_INT 10
22213: PUSH
22214: LD_INT 11
22216: PUSH
22217: LD_INT 12
22219: PUSH
22220: LD_INT 13
22222: PUSH
22223: LD_INT 14
22225: PUSH
22226: LD_INT 15
22228: PUSH
22229: LD_INT 16
22231: PUSH
22232: LD_INT 17
22234: PUSH
22235: LD_INT 18
22237: PUSH
22238: LD_INT 19
22240: PUSH
22241: LD_INT 20
22243: PUSH
22244: LD_INT 21
22246: PUSH
22247: LD_INT 22
22249: PUSH
22250: LD_INT 23
22252: PUSH
22253: LD_INT 24
22255: PUSH
22256: LD_INT 25
22258: PUSH
22259: LD_INT 26
22261: PUSH
22262: LD_INT 27
22264: PUSH
22265: LD_INT 28
22267: PUSH
22268: LD_INT 29
22270: PUSH
22271: LD_INT 30
22273: PUSH
22274: LD_INT 31
22276: PUSH
22277: LD_INT 32
22279: PUSH
22280: LD_INT 33
22282: PUSH
22283: LD_INT 34
22285: PUSH
22286: LD_INT 36
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 101
22328: PUSH
22329: LD_INT 102
22331: PUSH
22332: LD_INT 103
22334: PUSH
22335: LD_INT 104
22337: PUSH
22338: LD_INT 105
22340: PUSH
22341: LD_INT 106
22343: PUSH
22344: LD_INT 107
22346: PUSH
22347: LD_INT 108
22349: PUSH
22350: LD_INT 109
22352: PUSH
22353: LD_INT 110
22355: PUSH
22356: LD_INT 111
22358: PUSH
22359: LD_INT 112
22361: PUSH
22362: LD_INT 113
22364: PUSH
22365: LD_INT 114
22367: PUSH
22368: LD_INT 116
22370: PUSH
22371: LD_INT 117
22373: PUSH
22374: LD_INT 118
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: ST_TO_ADDR
22400: GO 23175
22402: LD_INT 16
22404: DOUBLE
22405: EQUAL
22406: IFTRUE 22410
22408: GO 22546
22410: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22411: LD_ADDR_VAR 0 2
22415: PUSH
22416: LD_INT 2
22418: PUSH
22419: LD_INT 4
22421: PUSH
22422: LD_INT 5
22424: PUSH
22425: LD_INT 7
22427: PUSH
22428: LD_INT 11
22430: PUSH
22431: LD_INT 12
22433: PUSH
22434: LD_INT 15
22436: PUSH
22437: LD_INT 16
22439: PUSH
22440: LD_INT 20
22442: PUSH
22443: LD_INT 21
22445: PUSH
22446: LD_INT 22
22448: PUSH
22449: LD_INT 23
22451: PUSH
22452: LD_INT 25
22454: PUSH
22455: LD_INT 26
22457: PUSH
22458: LD_INT 30
22460: PUSH
22461: LD_INT 31
22463: PUSH
22464: LD_INT 32
22466: PUSH
22467: LD_INT 33
22469: PUSH
22470: LD_INT 34
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: PUSH
22494: LD_INT 101
22496: PUSH
22497: LD_INT 102
22499: PUSH
22500: LD_INT 103
22502: PUSH
22503: LD_INT 106
22505: PUSH
22506: LD_INT 108
22508: PUSH
22509: LD_INT 112
22511: PUSH
22512: LD_INT 113
22514: PUSH
22515: LD_INT 114
22517: PUSH
22518: LD_INT 116
22520: PUSH
22521: LD_INT 117
22523: PUSH
22524: LD_INT 118
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: ST_TO_ADDR
22544: GO 23175
22546: LD_INT 17
22548: DOUBLE
22549: EQUAL
22550: IFTRUE 22554
22552: GO 22778
22554: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22555: LD_ADDR_VAR 0 2
22559: PUSH
22560: LD_INT 1
22562: PUSH
22563: LD_INT 2
22565: PUSH
22566: LD_INT 3
22568: PUSH
22569: LD_INT 4
22571: PUSH
22572: LD_INT 5
22574: PUSH
22575: LD_INT 6
22577: PUSH
22578: LD_INT 7
22580: PUSH
22581: LD_INT 8
22583: PUSH
22584: LD_INT 9
22586: PUSH
22587: LD_INT 10
22589: PUSH
22590: LD_INT 11
22592: PUSH
22593: LD_INT 12
22595: PUSH
22596: LD_INT 13
22598: PUSH
22599: LD_INT 14
22601: PUSH
22602: LD_INT 15
22604: PUSH
22605: LD_INT 16
22607: PUSH
22608: LD_INT 17
22610: PUSH
22611: LD_INT 18
22613: PUSH
22614: LD_INT 19
22616: PUSH
22617: LD_INT 20
22619: PUSH
22620: LD_INT 21
22622: PUSH
22623: LD_INT 22
22625: PUSH
22626: LD_INT 23
22628: PUSH
22629: LD_INT 24
22631: PUSH
22632: LD_INT 25
22634: PUSH
22635: LD_INT 26
22637: PUSH
22638: LD_INT 27
22640: PUSH
22641: LD_INT 28
22643: PUSH
22644: LD_INT 29
22646: PUSH
22647: LD_INT 30
22649: PUSH
22650: LD_INT 31
22652: PUSH
22653: LD_INT 32
22655: PUSH
22656: LD_INT 33
22658: PUSH
22659: LD_INT 34
22661: PUSH
22662: LD_INT 36
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: PUSH
22702: LD_INT 101
22704: PUSH
22705: LD_INT 102
22707: PUSH
22708: LD_INT 103
22710: PUSH
22711: LD_INT 104
22713: PUSH
22714: LD_INT 105
22716: PUSH
22717: LD_INT 106
22719: PUSH
22720: LD_INT 107
22722: PUSH
22723: LD_INT 108
22725: PUSH
22726: LD_INT 109
22728: PUSH
22729: LD_INT 110
22731: PUSH
22732: LD_INT 111
22734: PUSH
22735: LD_INT 112
22737: PUSH
22738: LD_INT 113
22740: PUSH
22741: LD_INT 114
22743: PUSH
22744: LD_INT 116
22746: PUSH
22747: LD_INT 117
22749: PUSH
22750: LD_INT 118
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: ST_TO_ADDR
22776: GO 23175
22778: LD_INT 18
22780: DOUBLE
22781: EQUAL
22782: IFTRUE 22786
22784: GO 22934
22786: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
22787: LD_ADDR_VAR 0 2
22791: PUSH
22792: LD_INT 2
22794: PUSH
22795: LD_INT 4
22797: PUSH
22798: LD_INT 5
22800: PUSH
22801: LD_INT 7
22803: PUSH
22804: LD_INT 11
22806: PUSH
22807: LD_INT 12
22809: PUSH
22810: LD_INT 15
22812: PUSH
22813: LD_INT 16
22815: PUSH
22816: LD_INT 20
22818: PUSH
22819: LD_INT 21
22821: PUSH
22822: LD_INT 22
22824: PUSH
22825: LD_INT 23
22827: PUSH
22828: LD_INT 25
22830: PUSH
22831: LD_INT 26
22833: PUSH
22834: LD_INT 30
22836: PUSH
22837: LD_INT 31
22839: PUSH
22840: LD_INT 32
22842: PUSH
22843: LD_INT 33
22845: PUSH
22846: LD_INT 34
22848: PUSH
22849: LD_INT 35
22851: PUSH
22852: LD_INT 36
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: PUSH
22878: LD_INT 101
22880: PUSH
22881: LD_INT 102
22883: PUSH
22884: LD_INT 103
22886: PUSH
22887: LD_INT 106
22889: PUSH
22890: LD_INT 108
22892: PUSH
22893: LD_INT 112
22895: PUSH
22896: LD_INT 113
22898: PUSH
22899: LD_INT 114
22901: PUSH
22902: LD_INT 115
22904: PUSH
22905: LD_INT 116
22907: PUSH
22908: LD_INT 117
22910: PUSH
22911: LD_INT 118
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: ST_TO_ADDR
22932: GO 23175
22934: LD_INT 19
22936: DOUBLE
22937: EQUAL
22938: IFTRUE 22942
22940: GO 23174
22942: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
22943: LD_ADDR_VAR 0 2
22947: PUSH
22948: LD_INT 1
22950: PUSH
22951: LD_INT 2
22953: PUSH
22954: LD_INT 3
22956: PUSH
22957: LD_INT 4
22959: PUSH
22960: LD_INT 5
22962: PUSH
22963: LD_INT 6
22965: PUSH
22966: LD_INT 7
22968: PUSH
22969: LD_INT 8
22971: PUSH
22972: LD_INT 9
22974: PUSH
22975: LD_INT 10
22977: PUSH
22978: LD_INT 11
22980: PUSH
22981: LD_INT 12
22983: PUSH
22984: LD_INT 13
22986: PUSH
22987: LD_INT 14
22989: PUSH
22990: LD_INT 15
22992: PUSH
22993: LD_INT 16
22995: PUSH
22996: LD_INT 17
22998: PUSH
22999: LD_INT 18
23001: PUSH
23002: LD_INT 19
23004: PUSH
23005: LD_INT 20
23007: PUSH
23008: LD_INT 21
23010: PUSH
23011: LD_INT 22
23013: PUSH
23014: LD_INT 23
23016: PUSH
23017: LD_INT 24
23019: PUSH
23020: LD_INT 25
23022: PUSH
23023: LD_INT 26
23025: PUSH
23026: LD_INT 27
23028: PUSH
23029: LD_INT 28
23031: PUSH
23032: LD_INT 29
23034: PUSH
23035: LD_INT 30
23037: PUSH
23038: LD_INT 31
23040: PUSH
23041: LD_INT 32
23043: PUSH
23044: LD_INT 33
23046: PUSH
23047: LD_INT 34
23049: PUSH
23050: LD_INT 35
23052: PUSH
23053: LD_INT 36
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 101
23096: PUSH
23097: LD_INT 102
23099: PUSH
23100: LD_INT 103
23102: PUSH
23103: LD_INT 104
23105: PUSH
23106: LD_INT 105
23108: PUSH
23109: LD_INT 106
23111: PUSH
23112: LD_INT 107
23114: PUSH
23115: LD_INT 108
23117: PUSH
23118: LD_INT 109
23120: PUSH
23121: LD_INT 110
23123: PUSH
23124: LD_INT 111
23126: PUSH
23127: LD_INT 112
23129: PUSH
23130: LD_INT 113
23132: PUSH
23133: LD_INT 114
23135: PUSH
23136: LD_INT 115
23138: PUSH
23139: LD_INT 116
23141: PUSH
23142: LD_INT 117
23144: PUSH
23145: LD_INT 118
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: ST_TO_ADDR
23172: GO 23175
23174: POP
// end else
23175: GO 23406
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23177: LD_ADDR_VAR 0 2
23181: PUSH
23182: LD_INT 1
23184: PUSH
23185: LD_INT 2
23187: PUSH
23188: LD_INT 3
23190: PUSH
23191: LD_INT 4
23193: PUSH
23194: LD_INT 5
23196: PUSH
23197: LD_INT 6
23199: PUSH
23200: LD_INT 7
23202: PUSH
23203: LD_INT 8
23205: PUSH
23206: LD_INT 9
23208: PUSH
23209: LD_INT 10
23211: PUSH
23212: LD_INT 11
23214: PUSH
23215: LD_INT 12
23217: PUSH
23218: LD_INT 13
23220: PUSH
23221: LD_INT 14
23223: PUSH
23224: LD_INT 15
23226: PUSH
23227: LD_INT 16
23229: PUSH
23230: LD_INT 17
23232: PUSH
23233: LD_INT 18
23235: PUSH
23236: LD_INT 19
23238: PUSH
23239: LD_INT 20
23241: PUSH
23242: LD_INT 21
23244: PUSH
23245: LD_INT 22
23247: PUSH
23248: LD_INT 23
23250: PUSH
23251: LD_INT 24
23253: PUSH
23254: LD_INT 25
23256: PUSH
23257: LD_INT 26
23259: PUSH
23260: LD_INT 27
23262: PUSH
23263: LD_INT 28
23265: PUSH
23266: LD_INT 29
23268: PUSH
23269: LD_INT 30
23271: PUSH
23272: LD_INT 31
23274: PUSH
23275: LD_INT 32
23277: PUSH
23278: LD_INT 33
23280: PUSH
23281: LD_INT 34
23283: PUSH
23284: LD_INT 35
23286: PUSH
23287: LD_INT 36
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: PUSH
23328: LD_INT 101
23330: PUSH
23331: LD_INT 102
23333: PUSH
23334: LD_INT 103
23336: PUSH
23337: LD_INT 104
23339: PUSH
23340: LD_INT 105
23342: PUSH
23343: LD_INT 106
23345: PUSH
23346: LD_INT 107
23348: PUSH
23349: LD_INT 108
23351: PUSH
23352: LD_INT 109
23354: PUSH
23355: LD_INT 110
23357: PUSH
23358: LD_INT 111
23360: PUSH
23361: LD_INT 112
23363: PUSH
23364: LD_INT 113
23366: PUSH
23367: LD_INT 114
23369: PUSH
23370: LD_INT 115
23372: PUSH
23373: LD_INT 116
23375: PUSH
23376: LD_INT 117
23378: PUSH
23379: LD_INT 118
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: ST_TO_ADDR
// if result then
23406: LD_VAR 0 2
23410: IFFALSE 24196
// begin normal :=  ;
23412: LD_ADDR_VAR 0 5
23416: PUSH
23417: LD_STRING 
23419: ST_TO_ADDR
// hardcore :=  ;
23420: LD_ADDR_VAR 0 6
23424: PUSH
23425: LD_STRING 
23427: ST_TO_ADDR
// active :=  ;
23428: LD_ADDR_VAR 0 7
23432: PUSH
23433: LD_STRING 
23435: ST_TO_ADDR
// for i = 1 to normalCounter do
23436: LD_ADDR_VAR 0 8
23440: PUSH
23441: DOUBLE
23442: LD_INT 1
23444: DEC
23445: ST_TO_ADDR
23446: LD_EXP 55
23450: PUSH
23451: FOR_TO
23452: IFFALSE 23553
// begin tmp := 0 ;
23454: LD_ADDR_VAR 0 3
23458: PUSH
23459: LD_STRING 0
23461: ST_TO_ADDR
// if result [ 1 ] then
23462: LD_VAR 0 2
23466: PUSH
23467: LD_INT 1
23469: ARRAY
23470: IFFALSE 23535
// if result [ 1 ] [ 1 ] = i then
23472: LD_VAR 0 2
23476: PUSH
23477: LD_INT 1
23479: ARRAY
23480: PUSH
23481: LD_INT 1
23483: ARRAY
23484: PUSH
23485: LD_VAR 0 8
23489: EQUAL
23490: IFFALSE 23535
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23492: LD_ADDR_VAR 0 2
23496: PUSH
23497: LD_VAR 0 2
23501: PPUSH
23502: LD_INT 1
23504: PPUSH
23505: LD_VAR 0 2
23509: PUSH
23510: LD_INT 1
23512: ARRAY
23513: PPUSH
23514: LD_INT 1
23516: PPUSH
23517: CALL_OW 3
23521: PPUSH
23522: CALL_OW 1
23526: ST_TO_ADDR
// tmp := 1 ;
23527: LD_ADDR_VAR 0 3
23531: PUSH
23532: LD_STRING 1
23534: ST_TO_ADDR
// end ; normal := normal & tmp ;
23535: LD_ADDR_VAR 0 5
23539: PUSH
23540: LD_VAR 0 5
23544: PUSH
23545: LD_VAR 0 3
23549: STR
23550: ST_TO_ADDR
// end ;
23551: GO 23451
23553: POP
23554: POP
// for i = 1 to hardcoreCounter do
23555: LD_ADDR_VAR 0 8
23559: PUSH
23560: DOUBLE
23561: LD_INT 1
23563: DEC
23564: ST_TO_ADDR
23565: LD_EXP 56
23569: PUSH
23570: FOR_TO
23571: IFFALSE 23676
// begin tmp := 0 ;
23573: LD_ADDR_VAR 0 3
23577: PUSH
23578: LD_STRING 0
23580: ST_TO_ADDR
// if result [ 2 ] then
23581: LD_VAR 0 2
23585: PUSH
23586: LD_INT 2
23588: ARRAY
23589: IFFALSE 23658
// if result [ 2 ] [ 1 ] = 100 + i then
23591: LD_VAR 0 2
23595: PUSH
23596: LD_INT 2
23598: ARRAY
23599: PUSH
23600: LD_INT 1
23602: ARRAY
23603: PUSH
23604: LD_INT 100
23606: PUSH
23607: LD_VAR 0 8
23611: PLUS
23612: EQUAL
23613: IFFALSE 23658
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23615: LD_ADDR_VAR 0 2
23619: PUSH
23620: LD_VAR 0 2
23624: PPUSH
23625: LD_INT 2
23627: PPUSH
23628: LD_VAR 0 2
23632: PUSH
23633: LD_INT 2
23635: ARRAY
23636: PPUSH
23637: LD_INT 1
23639: PPUSH
23640: CALL_OW 3
23644: PPUSH
23645: CALL_OW 1
23649: ST_TO_ADDR
// tmp := 1 ;
23650: LD_ADDR_VAR 0 3
23654: PUSH
23655: LD_STRING 1
23657: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23658: LD_ADDR_VAR 0 6
23662: PUSH
23663: LD_VAR 0 6
23667: PUSH
23668: LD_VAR 0 3
23672: STR
23673: ST_TO_ADDR
// end ;
23674: GO 23570
23676: POP
23677: POP
// if isGameLoad then
23678: LD_VAR 0 1
23682: IFFALSE 24157
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
23684: LD_ADDR_VAR 0 4
23688: PUSH
23689: LD_EXP 59
23693: PUSH
23694: LD_EXP 58
23698: PUSH
23699: LD_EXP 60
23703: PUSH
23704: LD_EXP 57
23708: PUSH
23709: LD_EXP 61
23713: PUSH
23714: LD_EXP 62
23718: PUSH
23719: LD_EXP 63
23723: PUSH
23724: LD_EXP 64
23728: PUSH
23729: LD_EXP 65
23733: PUSH
23734: LD_EXP 66
23738: PUSH
23739: LD_EXP 67
23743: PUSH
23744: LD_EXP 68
23748: PUSH
23749: LD_EXP 69
23753: PUSH
23754: LD_EXP 70
23758: PUSH
23759: LD_EXP 78
23763: PUSH
23764: LD_EXP 79
23768: PUSH
23769: LD_EXP 80
23773: PUSH
23774: LD_EXP 81
23778: PUSH
23779: LD_EXP 83
23783: PUSH
23784: LD_EXP 84
23788: PUSH
23789: LD_EXP 85
23793: PUSH
23794: LD_EXP 88
23798: PUSH
23799: LD_EXP 90
23803: PUSH
23804: LD_EXP 91
23808: PUSH
23809: LD_EXP 92
23813: PUSH
23814: LD_EXP 94
23818: PUSH
23819: LD_EXP 95
23823: PUSH
23824: LD_EXP 98
23828: PUSH
23829: LD_EXP 99
23833: PUSH
23834: LD_EXP 100
23838: PUSH
23839: LD_EXP 101
23843: PUSH
23844: LD_EXP 102
23848: PUSH
23849: LD_EXP 103
23853: PUSH
23854: LD_EXP 104
23858: PUSH
23859: LD_EXP 105
23863: PUSH
23864: LD_EXP 106
23868: PUSH
23869: LD_EXP 71
23873: PUSH
23874: LD_EXP 72
23878: PUSH
23879: LD_EXP 75
23883: PUSH
23884: LD_EXP 76
23888: PUSH
23889: LD_EXP 77
23893: PUSH
23894: LD_EXP 73
23898: PUSH
23899: LD_EXP 74
23903: PUSH
23904: LD_EXP 82
23908: PUSH
23909: LD_EXP 86
23913: PUSH
23914: LD_EXP 87
23918: PUSH
23919: LD_EXP 89
23923: PUSH
23924: LD_EXP 93
23928: PUSH
23929: LD_EXP 96
23933: PUSH
23934: LD_EXP 97
23938: PUSH
23939: LD_EXP 107
23943: PUSH
23944: LD_EXP 108
23948: PUSH
23949: LD_EXP 109
23953: PUSH
23954: LD_EXP 110
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: ST_TO_ADDR
// tmp :=  ;
24015: LD_ADDR_VAR 0 3
24019: PUSH
24020: LD_STRING 
24022: ST_TO_ADDR
// for i = 1 to normalCounter do
24023: LD_ADDR_VAR 0 8
24027: PUSH
24028: DOUBLE
24029: LD_INT 1
24031: DEC
24032: ST_TO_ADDR
24033: LD_EXP 55
24037: PUSH
24038: FOR_TO
24039: IFFALSE 24075
// begin if flags [ i ] then
24041: LD_VAR 0 4
24045: PUSH
24046: LD_VAR 0 8
24050: ARRAY
24051: IFFALSE 24073
// tmp := tmp & i & ; ;
24053: LD_ADDR_VAR 0 3
24057: PUSH
24058: LD_VAR 0 3
24062: PUSH
24063: LD_VAR 0 8
24067: STR
24068: PUSH
24069: LD_STRING ;
24071: STR
24072: ST_TO_ADDR
// end ;
24073: GO 24038
24075: POP
24076: POP
// for i = 1 to hardcoreCounter do
24077: LD_ADDR_VAR 0 8
24081: PUSH
24082: DOUBLE
24083: LD_INT 1
24085: DEC
24086: ST_TO_ADDR
24087: LD_EXP 56
24091: PUSH
24092: FOR_TO
24093: IFFALSE 24139
// begin if flags [ normalCounter + i ] then
24095: LD_VAR 0 4
24099: PUSH
24100: LD_EXP 55
24104: PUSH
24105: LD_VAR 0 8
24109: PLUS
24110: ARRAY
24111: IFFALSE 24137
// tmp := tmp & ( 100 + i ) & ; ;
24113: LD_ADDR_VAR 0 3
24117: PUSH
24118: LD_VAR 0 3
24122: PUSH
24123: LD_INT 100
24125: PUSH
24126: LD_VAR 0 8
24130: PLUS
24131: STR
24132: PUSH
24133: LD_STRING ;
24135: STR
24136: ST_TO_ADDR
// end ;
24137: GO 24092
24139: POP
24140: POP
// if tmp then
24141: LD_VAR 0 3
24145: IFFALSE 24157
// active := tmp ;
24147: LD_ADDR_VAR 0 7
24151: PUSH
24152: LD_VAR 0 3
24156: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24157: LD_STRING getStreamItemsFromMission("
24159: PUSH
24160: LD_VAR 0 5
24164: STR
24165: PUSH
24166: LD_STRING ","
24168: STR
24169: PUSH
24170: LD_VAR 0 6
24174: STR
24175: PUSH
24176: LD_STRING ","
24178: STR
24179: PUSH
24180: LD_VAR 0 7
24184: STR
24185: PUSH
24186: LD_STRING ")
24188: STR
24189: PPUSH
24190: CALL_OW 559
// end else
24194: GO 24203
// ToLua ( getStreamItemsFromMission("","","") ) ;
24196: LD_STRING getStreamItemsFromMission("","","")
24198: PPUSH
24199: CALL_OW 559
// end ;
24203: LD_VAR 0 2
24207: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24208: LD_EXP 54
24212: IFFALSE 24220
24214: PUSH
24215: LD_EXP 59
24219: AND
24220: IFFALSE 24344
24222: GO 24224
24224: DISABLE
24225: LD_INT 0
24227: PPUSH
24228: PPUSH
// begin enable ;
24229: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24230: LD_ADDR_VAR 0 2
24234: PUSH
24235: LD_INT 22
24237: PUSH
24238: LD_OWVAR 2
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PUSH
24247: LD_INT 2
24249: PUSH
24250: LD_INT 34
24252: PUSH
24253: LD_INT 7
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: LD_INT 34
24262: PUSH
24263: LD_INT 45
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PUSH
24270: LD_INT 34
24272: PUSH
24273: LD_INT 28
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: PUSH
24280: LD_INT 34
24282: PUSH
24283: LD_INT 47
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PPUSH
24301: CALL_OW 69
24305: ST_TO_ADDR
// if not tmp then
24306: LD_VAR 0 2
24310: NOT
24311: IFFALSE 24315
// exit ;
24313: GO 24344
// for i in tmp do
24315: LD_ADDR_VAR 0 1
24319: PUSH
24320: LD_VAR 0 2
24324: PUSH
24325: FOR_IN
24326: IFFALSE 24342
// begin SetLives ( i , 0 ) ;
24328: LD_VAR 0 1
24332: PPUSH
24333: LD_INT 0
24335: PPUSH
24336: CALL_OW 234
// end ;
24340: GO 24325
24342: POP
24343: POP
// end ;
24344: PPOPN 2
24346: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24347: LD_EXP 54
24351: IFFALSE 24359
24353: PUSH
24354: LD_EXP 60
24358: AND
24359: IFFALSE 24443
24361: GO 24363
24363: DISABLE
24364: LD_INT 0
24366: PPUSH
24367: PPUSH
// begin enable ;
24368: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24369: LD_ADDR_VAR 0 2
24373: PUSH
24374: LD_INT 22
24376: PUSH
24377: LD_OWVAR 2
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 32
24388: PUSH
24389: LD_INT 3
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PPUSH
24400: CALL_OW 69
24404: ST_TO_ADDR
// if not tmp then
24405: LD_VAR 0 2
24409: NOT
24410: IFFALSE 24414
// exit ;
24412: GO 24443
// for i in tmp do
24414: LD_ADDR_VAR 0 1
24418: PUSH
24419: LD_VAR 0 2
24423: PUSH
24424: FOR_IN
24425: IFFALSE 24441
// begin SetLives ( i , 0 ) ;
24427: LD_VAR 0 1
24431: PPUSH
24432: LD_INT 0
24434: PPUSH
24435: CALL_OW 234
// end ;
24439: GO 24424
24441: POP
24442: POP
// end ;
24443: PPOPN 2
24445: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24446: LD_EXP 54
24450: IFFALSE 24458
24452: PUSH
24453: LD_EXP 57
24457: AND
24458: IFFALSE 24551
24460: GO 24462
24462: DISABLE
24463: LD_INT 0
24465: PPUSH
// begin enable ;
24466: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24467: LD_ADDR_VAR 0 1
24471: PUSH
24472: LD_INT 22
24474: PUSH
24475: LD_OWVAR 2
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: PUSH
24484: LD_INT 2
24486: PUSH
24487: LD_INT 25
24489: PUSH
24490: LD_INT 5
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 25
24499: PUSH
24500: LD_INT 9
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 25
24509: PUSH
24510: LD_INT 8
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PPUSH
24527: CALL_OW 69
24531: PUSH
24532: FOR_IN
24533: IFFALSE 24549
// begin SetClass ( i , 1 ) ;
24535: LD_VAR 0 1
24539: PPUSH
24540: LD_INT 1
24542: PPUSH
24543: CALL_OW 336
// end ;
24547: GO 24532
24549: POP
24550: POP
// end ;
24551: PPOPN 1
24553: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24554: LD_EXP 54
24558: IFFALSE 24566
24560: PUSH
24561: LD_EXP 58
24565: AND
24566: IFFALSE 24578
24568: PUSH
24569: LD_OWVAR 65
24573: PUSH
24574: LD_INT 7
24576: LESS
24577: AND
24578: IFFALSE 24592
24580: GO 24582
24582: DISABLE
// begin enable ;
24583: ENABLE
// game_speed := 7 ;
24584: LD_ADDR_OWVAR 65
24588: PUSH
24589: LD_INT 7
24591: ST_TO_ADDR
// end ;
24592: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24593: LD_EXP 54
24597: IFFALSE 24605
24599: PUSH
24600: LD_EXP 61
24604: AND
24605: IFFALSE 24807
24607: GO 24609
24609: DISABLE
24610: LD_INT 0
24612: PPUSH
24613: PPUSH
24614: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24615: LD_ADDR_VAR 0 3
24619: PUSH
24620: LD_INT 81
24622: PUSH
24623: LD_OWVAR 2
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 21
24634: PUSH
24635: LD_INT 1
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PPUSH
24646: CALL_OW 69
24650: ST_TO_ADDR
// if not tmp then
24651: LD_VAR 0 3
24655: NOT
24656: IFFALSE 24660
// exit ;
24658: GO 24807
// if tmp > 5 then
24660: LD_VAR 0 3
24664: PUSH
24665: LD_INT 5
24667: GREATER
24668: IFFALSE 24680
// k := 5 else
24670: LD_ADDR_VAR 0 2
24674: PUSH
24675: LD_INT 5
24677: ST_TO_ADDR
24678: GO 24690
// k := tmp ;
24680: LD_ADDR_VAR 0 2
24684: PUSH
24685: LD_VAR 0 3
24689: ST_TO_ADDR
// for i := 1 to k do
24690: LD_ADDR_VAR 0 1
24694: PUSH
24695: DOUBLE
24696: LD_INT 1
24698: DEC
24699: ST_TO_ADDR
24700: LD_VAR 0 2
24704: PUSH
24705: FOR_TO
24706: IFFALSE 24805
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24708: LD_VAR 0 3
24712: PUSH
24713: LD_VAR 0 1
24717: ARRAY
24718: PPUSH
24719: LD_VAR 0 1
24723: PUSH
24724: LD_INT 4
24726: MOD
24727: PUSH
24728: LD_INT 1
24730: PLUS
24731: PPUSH
24732: CALL_OW 259
24736: PUSH
24737: LD_INT 10
24739: LESS
24740: IFFALSE 24803
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24742: LD_VAR 0 3
24746: PUSH
24747: LD_VAR 0 1
24751: ARRAY
24752: PPUSH
24753: LD_VAR 0 1
24757: PUSH
24758: LD_INT 4
24760: MOD
24761: PUSH
24762: LD_INT 1
24764: PLUS
24765: PPUSH
24766: LD_VAR 0 3
24770: PUSH
24771: LD_VAR 0 1
24775: ARRAY
24776: PPUSH
24777: LD_VAR 0 1
24781: PUSH
24782: LD_INT 4
24784: MOD
24785: PUSH
24786: LD_INT 1
24788: PLUS
24789: PPUSH
24790: CALL_OW 259
24794: PUSH
24795: LD_INT 1
24797: PLUS
24798: PPUSH
24799: CALL_OW 237
24803: GO 24705
24805: POP
24806: POP
// end ;
24807: PPOPN 3
24809: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24810: LD_EXP 54
24814: IFFALSE 24822
24816: PUSH
24817: LD_EXP 62
24821: AND
24822: IFFALSE 24842
24824: GO 24826
24826: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24827: LD_INT 4
24829: PPUSH
24830: LD_OWVAR 2
24834: PPUSH
24835: LD_INT 0
24837: PPUSH
24838: CALL_OW 324
24842: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24843: LD_EXP 54
24847: IFFALSE 24855
24849: PUSH
24850: LD_EXP 91
24854: AND
24855: IFFALSE 24875
24857: GO 24859
24859: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24860: LD_INT 19
24862: PPUSH
24863: LD_OWVAR 2
24867: PPUSH
24868: LD_INT 0
24870: PPUSH
24871: CALL_OW 324
24875: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24876: LD_EXP 54
24880: IFFALSE 24888
24882: PUSH
24883: LD_EXP 63
24887: AND
24888: IFFALSE 24990
24890: GO 24892
24892: DISABLE
24893: LD_INT 0
24895: PPUSH
24896: PPUSH
// begin enable ;
24897: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24898: LD_ADDR_VAR 0 2
24902: PUSH
24903: LD_INT 22
24905: PUSH
24906: LD_OWVAR 2
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 2
24917: PUSH
24918: LD_INT 34
24920: PUSH
24921: LD_INT 11
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: LD_INT 34
24930: PUSH
24931: LD_INT 30
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: LIST
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PPUSH
24947: CALL_OW 69
24951: ST_TO_ADDR
// if not tmp then
24952: LD_VAR 0 2
24956: NOT
24957: IFFALSE 24961
// exit ;
24959: GO 24990
// for i in tmp do
24961: LD_ADDR_VAR 0 1
24965: PUSH
24966: LD_VAR 0 2
24970: PUSH
24971: FOR_IN
24972: IFFALSE 24988
// begin SetLives ( i , 0 ) ;
24974: LD_VAR 0 1
24978: PPUSH
24979: LD_INT 0
24981: PPUSH
24982: CALL_OW 234
// end ;
24986: GO 24971
24988: POP
24989: POP
// end ;
24990: PPOPN 2
24992: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24993: LD_EXP 54
24997: IFFALSE 25005
24999: PUSH
25000: LD_EXP 64
25004: AND
25005: IFFALSE 25025
25007: GO 25009
25009: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25010: LD_INT 32
25012: PPUSH
25013: LD_OWVAR 2
25017: PPUSH
25018: LD_INT 0
25020: PPUSH
25021: CALL_OW 324
25025: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25026: LD_EXP 54
25030: IFFALSE 25038
25032: PUSH
25033: LD_EXP 65
25037: AND
25038: IFFALSE 25221
25040: GO 25042
25042: DISABLE
25043: LD_INT 0
25045: PPUSH
25046: PPUSH
25047: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25048: LD_ADDR_VAR 0 2
25052: PUSH
25053: LD_INT 22
25055: PUSH
25056: LD_OWVAR 2
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 33
25067: PUSH
25068: LD_INT 3
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PPUSH
25079: CALL_OW 69
25083: ST_TO_ADDR
// if not tmp then
25084: LD_VAR 0 2
25088: NOT
25089: IFFALSE 25093
// exit ;
25091: GO 25221
// side := 0 ;
25093: LD_ADDR_VAR 0 3
25097: PUSH
25098: LD_INT 0
25100: ST_TO_ADDR
// for i := 1 to 8 do
25101: LD_ADDR_VAR 0 1
25105: PUSH
25106: DOUBLE
25107: LD_INT 1
25109: DEC
25110: ST_TO_ADDR
25111: LD_INT 8
25113: PUSH
25114: FOR_TO
25115: IFFALSE 25165
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25117: LD_OWVAR 2
25121: PUSH
25122: LD_VAR 0 1
25126: NONEQUAL
25127: IFFALSE 25149
25129: PUSH
25130: LD_OWVAR 2
25134: PPUSH
25135: LD_VAR 0 1
25139: PPUSH
25140: CALL_OW 81
25144: PUSH
25145: LD_INT 2
25147: EQUAL
25148: AND
25149: IFFALSE 25163
// begin side := i ;
25151: LD_ADDR_VAR 0 3
25155: PUSH
25156: LD_VAR 0 1
25160: ST_TO_ADDR
// break ;
25161: GO 25165
// end ;
25163: GO 25114
25165: POP
25166: POP
// if not side then
25167: LD_VAR 0 3
25171: NOT
25172: IFFALSE 25176
// exit ;
25174: GO 25221
// for i := 1 to tmp do
25176: LD_ADDR_VAR 0 1
25180: PUSH
25181: DOUBLE
25182: LD_INT 1
25184: DEC
25185: ST_TO_ADDR
25186: LD_VAR 0 2
25190: PUSH
25191: FOR_TO
25192: IFFALSE 25219
// if Prob ( 60 ) then
25194: LD_INT 60
25196: PPUSH
25197: CALL_OW 13
25201: IFFALSE 25217
// SetSide ( i , side ) ;
25203: LD_VAR 0 1
25207: PPUSH
25208: LD_VAR 0 3
25212: PPUSH
25213: CALL_OW 235
25217: GO 25191
25219: POP
25220: POP
// end ;
25221: PPOPN 3
25223: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25224: LD_EXP 54
25228: IFFALSE 25236
25230: PUSH
25231: LD_EXP 67
25235: AND
25236: IFFALSE 25355
25238: GO 25240
25240: DISABLE
25241: LD_INT 0
25243: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25244: LD_ADDR_VAR 0 1
25248: PUSH
25249: LD_INT 22
25251: PUSH
25252: LD_OWVAR 2
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: LD_INT 21
25263: PUSH
25264: LD_INT 1
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 3
25273: PUSH
25274: LD_INT 23
25276: PUSH
25277: LD_INT 0
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: LIST
25292: PPUSH
25293: CALL_OW 69
25297: PUSH
25298: FOR_IN
25299: IFFALSE 25353
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25301: LD_VAR 0 1
25305: PPUSH
25306: CALL_OW 257
25310: PUSH
25311: LD_INT 1
25313: PUSH
25314: LD_INT 2
25316: PUSH
25317: LD_INT 3
25319: PUSH
25320: LD_INT 4
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: IN
25329: IFFALSE 25351
// SetClass ( un , rand ( 1 , 4 ) ) ;
25331: LD_VAR 0 1
25335: PPUSH
25336: LD_INT 1
25338: PPUSH
25339: LD_INT 4
25341: PPUSH
25342: CALL_OW 12
25346: PPUSH
25347: CALL_OW 336
25351: GO 25298
25353: POP
25354: POP
// end ;
25355: PPOPN 1
25357: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25358: LD_EXP 54
25362: IFFALSE 25370
25364: PUSH
25365: LD_EXP 66
25369: AND
25370: IFFALSE 25449
25372: GO 25374
25374: DISABLE
25375: LD_INT 0
25377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25378: LD_ADDR_VAR 0 1
25382: PUSH
25383: LD_INT 22
25385: PUSH
25386: LD_OWVAR 2
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 21
25397: PUSH
25398: LD_INT 3
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PPUSH
25409: CALL_OW 69
25413: ST_TO_ADDR
// if not tmp then
25414: LD_VAR 0 1
25418: NOT
25419: IFFALSE 25423
// exit ;
25421: GO 25449
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25423: LD_VAR 0 1
25427: PUSH
25428: LD_INT 1
25430: PPUSH
25431: LD_VAR 0 1
25435: PPUSH
25436: CALL_OW 12
25440: ARRAY
25441: PPUSH
25442: LD_INT 100
25444: PPUSH
25445: CALL_OW 234
// end ;
25449: PPOPN 1
25451: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25452: LD_EXP 54
25456: IFFALSE 25464
25458: PUSH
25459: LD_EXP 68
25463: AND
25464: IFFALSE 25562
25466: GO 25468
25468: DISABLE
25469: LD_INT 0
25471: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25472: LD_ADDR_VAR 0 1
25476: PUSH
25477: LD_INT 22
25479: PUSH
25480: LD_OWVAR 2
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 21
25491: PUSH
25492: LD_INT 1
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PPUSH
25503: CALL_OW 69
25507: ST_TO_ADDR
// if not tmp then
25508: LD_VAR 0 1
25512: NOT
25513: IFFALSE 25517
// exit ;
25515: GO 25562
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25517: LD_VAR 0 1
25521: PUSH
25522: LD_INT 1
25524: PPUSH
25525: LD_VAR 0 1
25529: PPUSH
25530: CALL_OW 12
25534: ARRAY
25535: PPUSH
25536: LD_INT 1
25538: PPUSH
25539: LD_INT 4
25541: PPUSH
25542: CALL_OW 12
25546: PPUSH
25547: LD_INT 3000
25549: PPUSH
25550: LD_INT 9000
25552: PPUSH
25553: CALL_OW 12
25557: PPUSH
25558: CALL_OW 492
// end ;
25562: PPOPN 1
25564: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25565: LD_EXP 54
25569: IFFALSE 25577
25571: PUSH
25572: LD_EXP 69
25576: AND
25577: IFFALSE 25597
25579: GO 25581
25581: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25582: LD_INT 1
25584: PPUSH
25585: LD_OWVAR 2
25589: PPUSH
25590: LD_INT 0
25592: PPUSH
25593: CALL_OW 324
25597: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25598: LD_EXP 54
25602: IFFALSE 25610
25604: PUSH
25605: LD_EXP 70
25609: AND
25610: IFFALSE 25693
25612: GO 25614
25614: DISABLE
25615: LD_INT 0
25617: PPUSH
25618: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25619: LD_ADDR_VAR 0 2
25623: PUSH
25624: LD_INT 22
25626: PUSH
25627: LD_OWVAR 2
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: LD_INT 21
25638: PUSH
25639: LD_INT 3
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PPUSH
25650: CALL_OW 69
25654: ST_TO_ADDR
// if not tmp then
25655: LD_VAR 0 2
25659: NOT
25660: IFFALSE 25664
// exit ;
25662: GO 25693
// for i in tmp do
25664: LD_ADDR_VAR 0 1
25668: PUSH
25669: LD_VAR 0 2
25673: PUSH
25674: FOR_IN
25675: IFFALSE 25691
// SetBLevel ( i , 10 ) ;
25677: LD_VAR 0 1
25681: PPUSH
25682: LD_INT 10
25684: PPUSH
25685: CALL_OW 241
25689: GO 25674
25691: POP
25692: POP
// end ;
25693: PPOPN 2
25695: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25696: LD_EXP 54
25700: IFFALSE 25708
25702: PUSH
25703: LD_EXP 71
25707: AND
25708: IFFALSE 25819
25710: GO 25712
25712: DISABLE
25713: LD_INT 0
25715: PPUSH
25716: PPUSH
25717: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25718: LD_ADDR_VAR 0 3
25722: PUSH
25723: LD_INT 22
25725: PUSH
25726: LD_OWVAR 2
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: LD_INT 25
25737: PUSH
25738: LD_INT 1
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PPUSH
25749: CALL_OW 69
25753: ST_TO_ADDR
// if not tmp then
25754: LD_VAR 0 3
25758: NOT
25759: IFFALSE 25763
// exit ;
25761: GO 25819
// un := tmp [ rand ( 1 , tmp ) ] ;
25763: LD_ADDR_VAR 0 2
25767: PUSH
25768: LD_VAR 0 3
25772: PUSH
25773: LD_INT 1
25775: PPUSH
25776: LD_VAR 0 3
25780: PPUSH
25781: CALL_OW 12
25785: ARRAY
25786: ST_TO_ADDR
// if Crawls ( un ) then
25787: LD_VAR 0 2
25791: PPUSH
25792: CALL_OW 318
25796: IFFALSE 25807
// ComWalk ( un ) ;
25798: LD_VAR 0 2
25802: PPUSH
25803: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25807: LD_VAR 0 2
25811: PPUSH
25812: LD_INT 5
25814: PPUSH
25815: CALL_OW 336
// end ;
25819: PPOPN 3
25821: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25822: LD_EXP 54
25826: IFFALSE 25834
25828: PUSH
25829: LD_EXP 72
25833: AND
25834: IFFALSE 25846
25836: PUSH
25837: LD_OWVAR 67
25841: PUSH
25842: LD_INT 4
25844: LESS
25845: AND
25846: IFFALSE 25865
25848: GO 25850
25850: DISABLE
// begin Difficulty := Difficulty + 1 ;
25851: LD_ADDR_OWVAR 67
25855: PUSH
25856: LD_OWVAR 67
25860: PUSH
25861: LD_INT 1
25863: PLUS
25864: ST_TO_ADDR
// end ;
25865: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25866: LD_EXP 54
25870: IFFALSE 25878
25872: PUSH
25873: LD_EXP 73
25877: AND
25878: IFFALSE 25981
25880: GO 25882
25882: DISABLE
25883: LD_INT 0
25885: PPUSH
// begin for i := 1 to 5 do
25886: LD_ADDR_VAR 0 1
25890: PUSH
25891: DOUBLE
25892: LD_INT 1
25894: DEC
25895: ST_TO_ADDR
25896: LD_INT 5
25898: PUSH
25899: FOR_TO
25900: IFFALSE 25979
// begin uc_nation := nation_nature ;
25902: LD_ADDR_OWVAR 21
25906: PUSH
25907: LD_INT 0
25909: ST_TO_ADDR
// uc_side := 0 ;
25910: LD_ADDR_OWVAR 20
25914: PUSH
25915: LD_INT 0
25917: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25918: LD_ADDR_OWVAR 29
25922: PUSH
25923: LD_INT 12
25925: PUSH
25926: LD_INT 12
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: ST_TO_ADDR
// hc_agressivity := 20 ;
25933: LD_ADDR_OWVAR 35
25937: PUSH
25938: LD_INT 20
25940: ST_TO_ADDR
// hc_class := class_tiger ;
25941: LD_ADDR_OWVAR 28
25945: PUSH
25946: LD_INT 14
25948: ST_TO_ADDR
// hc_gallery :=  ;
25949: LD_ADDR_OWVAR 33
25953: PUSH
25954: LD_STRING 
25956: ST_TO_ADDR
// hc_name :=  ;
25957: LD_ADDR_OWVAR 26
25961: PUSH
25962: LD_STRING 
25964: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25965: CALL_OW 44
25969: PPUSH
25970: LD_INT 0
25972: PPUSH
25973: CALL_OW 51
// end ;
25977: GO 25899
25979: POP
25980: POP
// end ;
25981: PPOPN 1
25983: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25984: LD_EXP 54
25988: IFFALSE 25996
25990: PUSH
25991: LD_EXP 74
25995: AND
25996: IFFALSE 26005
25998: GO 26000
26000: DISABLE
// StreamSibBomb ;
26001: CALL 26006 0 0
26005: END
// export function StreamSibBomb ; var i , x , y ; begin
26006: LD_INT 0
26008: PPUSH
26009: PPUSH
26010: PPUSH
26011: PPUSH
// result := false ;
26012: LD_ADDR_VAR 0 1
26016: PUSH
26017: LD_INT 0
26019: ST_TO_ADDR
// for i := 1 to 16 do
26020: LD_ADDR_VAR 0 2
26024: PUSH
26025: DOUBLE
26026: LD_INT 1
26028: DEC
26029: ST_TO_ADDR
26030: LD_INT 16
26032: PUSH
26033: FOR_TO
26034: IFFALSE 26233
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26036: LD_ADDR_VAR 0 3
26040: PUSH
26041: LD_INT 10
26043: PUSH
26044: LD_INT 20
26046: PUSH
26047: LD_INT 30
26049: PUSH
26050: LD_INT 40
26052: PUSH
26053: LD_INT 50
26055: PUSH
26056: LD_INT 60
26058: PUSH
26059: LD_INT 70
26061: PUSH
26062: LD_INT 80
26064: PUSH
26065: LD_INT 90
26067: PUSH
26068: LD_INT 100
26070: PUSH
26071: LD_INT 110
26073: PUSH
26074: LD_INT 120
26076: PUSH
26077: LD_INT 130
26079: PUSH
26080: LD_INT 140
26082: PUSH
26083: LD_INT 150
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 1
26105: PPUSH
26106: LD_INT 15
26108: PPUSH
26109: CALL_OW 12
26113: ARRAY
26114: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26115: LD_ADDR_VAR 0 4
26119: PUSH
26120: LD_INT 10
26122: PUSH
26123: LD_INT 20
26125: PUSH
26126: LD_INT 30
26128: PUSH
26129: LD_INT 40
26131: PUSH
26132: LD_INT 50
26134: PUSH
26135: LD_INT 60
26137: PUSH
26138: LD_INT 70
26140: PUSH
26141: LD_INT 80
26143: PUSH
26144: LD_INT 90
26146: PUSH
26147: LD_INT 100
26149: PUSH
26150: LD_INT 110
26152: PUSH
26153: LD_INT 120
26155: PUSH
26156: LD_INT 130
26158: PUSH
26159: LD_INT 140
26161: PUSH
26162: LD_INT 150
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: PUSH
26182: LD_INT 1
26184: PPUSH
26185: LD_INT 15
26187: PPUSH
26188: CALL_OW 12
26192: ARRAY
26193: ST_TO_ADDR
// if ValidHex ( x , y ) then
26194: LD_VAR 0 3
26198: PPUSH
26199: LD_VAR 0 4
26203: PPUSH
26204: CALL_OW 488
26208: IFFALSE 26231
// begin result := [ x , y ] ;
26210: LD_ADDR_VAR 0 1
26214: PUSH
26215: LD_VAR 0 3
26219: PUSH
26220: LD_VAR 0 4
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: ST_TO_ADDR
// break ;
26229: GO 26233
// end ; end ;
26231: GO 26033
26233: POP
26234: POP
// if result then
26235: LD_VAR 0 1
26239: IFFALSE 26299
// begin ToLua ( playSibBomb() ) ;
26241: LD_STRING playSibBomb()
26243: PPUSH
26244: CALL_OW 559
// wait ( 0 0$14 ) ;
26248: LD_INT 490
26250: PPUSH
26251: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26255: LD_VAR 0 1
26259: PUSH
26260: LD_INT 1
26262: ARRAY
26263: PPUSH
26264: LD_VAR 0 1
26268: PUSH
26269: LD_INT 2
26271: ARRAY
26272: PPUSH
26273: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26277: LD_VAR 0 1
26281: PUSH
26282: LD_INT 1
26284: ARRAY
26285: PPUSH
26286: LD_VAR 0 1
26290: PUSH
26291: LD_INT 2
26293: ARRAY
26294: PPUSH
26295: CALL_OW 429
// end ; end ;
26299: LD_VAR 0 1
26303: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26304: LD_EXP 54
26308: IFFALSE 26316
26310: PUSH
26311: LD_EXP 76
26315: AND
26316: IFFALSE 26328
26318: GO 26320
26320: DISABLE
// YouLost (  ) ;
26321: LD_STRING 
26323: PPUSH
26324: CALL_OW 104
26328: END
// every 0 0$1 trigger StreamModeActive and sFog do
26329: LD_EXP 54
26333: IFFALSE 26341
26335: PUSH
26336: LD_EXP 75
26340: AND
26341: IFFALSE 26355
26343: GO 26345
26345: DISABLE
// FogOff ( your_side ) ;
26346: LD_OWVAR 2
26350: PPUSH
26351: CALL_OW 344
26355: END
// every 0 0$1 trigger StreamModeActive and sSun do
26356: LD_EXP 54
26360: IFFALSE 26368
26362: PUSH
26363: LD_EXP 77
26367: AND
26368: IFFALSE 26396
26370: GO 26372
26372: DISABLE
// begin solar_recharge_percent := 0 ;
26373: LD_ADDR_OWVAR 79
26377: PUSH
26378: LD_INT 0
26380: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26381: LD_INT 10500
26383: PPUSH
26384: CALL_OW 67
// solar_recharge_percent := 100 ;
26388: LD_ADDR_OWVAR 79
26392: PUSH
26393: LD_INT 100
26395: ST_TO_ADDR
// end ;
26396: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26397: LD_EXP 54
26401: IFFALSE 26409
26403: PUSH
26404: LD_EXP 78
26408: AND
26409: IFFALSE 26648
26411: GO 26413
26413: DISABLE
26414: LD_INT 0
26416: PPUSH
26417: PPUSH
26418: PPUSH
// begin tmp := [ ] ;
26419: LD_ADDR_VAR 0 3
26423: PUSH
26424: EMPTY
26425: ST_TO_ADDR
// for i := 1 to 6 do
26426: LD_ADDR_VAR 0 1
26430: PUSH
26431: DOUBLE
26432: LD_INT 1
26434: DEC
26435: ST_TO_ADDR
26436: LD_INT 6
26438: PUSH
26439: FOR_TO
26440: IFFALSE 26545
// begin uc_nation := nation_nature ;
26442: LD_ADDR_OWVAR 21
26446: PUSH
26447: LD_INT 0
26449: ST_TO_ADDR
// uc_side := 0 ;
26450: LD_ADDR_OWVAR 20
26454: PUSH
26455: LD_INT 0
26457: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26458: LD_ADDR_OWVAR 29
26462: PUSH
26463: LD_INT 12
26465: PUSH
26466: LD_INT 12
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: ST_TO_ADDR
// hc_agressivity := 20 ;
26473: LD_ADDR_OWVAR 35
26477: PUSH
26478: LD_INT 20
26480: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26481: LD_ADDR_OWVAR 28
26485: PUSH
26486: LD_INT 17
26488: ST_TO_ADDR
// hc_gallery :=  ;
26489: LD_ADDR_OWVAR 33
26493: PUSH
26494: LD_STRING 
26496: ST_TO_ADDR
// hc_name :=  ;
26497: LD_ADDR_OWVAR 26
26501: PUSH
26502: LD_STRING 
26504: ST_TO_ADDR
// un := CreateHuman ;
26505: LD_ADDR_VAR 0 2
26509: PUSH
26510: CALL_OW 44
26514: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26515: LD_VAR 0 2
26519: PPUSH
26520: LD_INT 1
26522: PPUSH
26523: CALL_OW 51
// tmp := tmp ^ un ;
26527: LD_ADDR_VAR 0 3
26531: PUSH
26532: LD_VAR 0 3
26536: PUSH
26537: LD_VAR 0 2
26541: ADD
26542: ST_TO_ADDR
// end ;
26543: GO 26439
26545: POP
26546: POP
// repeat wait ( 0 0$1 ) ;
26547: LD_INT 35
26549: PPUSH
26550: CALL_OW 67
// for un in tmp do
26554: LD_ADDR_VAR 0 2
26558: PUSH
26559: LD_VAR 0 3
26563: PUSH
26564: FOR_IN
26565: IFFALSE 26639
// begin if IsDead ( un ) then
26567: LD_VAR 0 2
26571: PPUSH
26572: CALL_OW 301
26576: IFFALSE 26596
// begin tmp := tmp diff un ;
26578: LD_ADDR_VAR 0 3
26582: PUSH
26583: LD_VAR 0 3
26587: PUSH
26588: LD_VAR 0 2
26592: DIFF
26593: ST_TO_ADDR
// continue ;
26594: GO 26564
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26596: LD_VAR 0 2
26600: PPUSH
26601: LD_INT 3
26603: PUSH
26604: LD_INT 22
26606: PUSH
26607: LD_INT 0
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PPUSH
26618: CALL_OW 69
26622: PPUSH
26623: LD_VAR 0 2
26627: PPUSH
26628: CALL_OW 74
26632: PPUSH
26633: CALL_OW 115
// end ;
26637: GO 26564
26639: POP
26640: POP
// until not tmp ;
26641: LD_VAR 0 3
26645: NOT
26646: IFFALSE 26547
// end ;
26648: PPOPN 3
26650: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26651: LD_EXP 54
26655: IFFALSE 26663
26657: PUSH
26658: LD_EXP 79
26662: AND
26663: IFFALSE 26717
26665: GO 26667
26667: DISABLE
// begin ToLua ( displayTroll(); ) ;
26668: LD_STRING displayTroll();
26670: PPUSH
26671: CALL_OW 559
// wait ( 3 3$00 ) ;
26675: LD_INT 6300
26677: PPUSH
26678: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26682: LD_STRING hideTroll();
26684: PPUSH
26685: CALL_OW 559
// wait ( 1 1$00 ) ;
26689: LD_INT 2100
26691: PPUSH
26692: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26696: LD_STRING displayTroll();
26698: PPUSH
26699: CALL_OW 559
// wait ( 1 1$00 ) ;
26703: LD_INT 2100
26705: PPUSH
26706: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26710: LD_STRING hideTroll();
26712: PPUSH
26713: CALL_OW 559
// end ;
26717: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26718: LD_EXP 54
26722: IFFALSE 26730
26724: PUSH
26725: LD_EXP 80
26729: AND
26730: IFFALSE 26793
26732: GO 26734
26734: DISABLE
26735: LD_INT 0
26737: PPUSH
// begin p := 0 ;
26738: LD_ADDR_VAR 0 1
26742: PUSH
26743: LD_INT 0
26745: ST_TO_ADDR
// repeat game_speed := 1 ;
26746: LD_ADDR_OWVAR 65
26750: PUSH
26751: LD_INT 1
26753: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26754: LD_INT 35
26756: PPUSH
26757: CALL_OW 67
// p := p + 1 ;
26761: LD_ADDR_VAR 0 1
26765: PUSH
26766: LD_VAR 0 1
26770: PUSH
26771: LD_INT 1
26773: PLUS
26774: ST_TO_ADDR
// until p >= 60 ;
26775: LD_VAR 0 1
26779: PUSH
26780: LD_INT 60
26782: GREATEREQUAL
26783: IFFALSE 26746
// game_speed := 4 ;
26785: LD_ADDR_OWVAR 65
26789: PUSH
26790: LD_INT 4
26792: ST_TO_ADDR
// end ;
26793: PPOPN 1
26795: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26796: LD_EXP 54
26800: IFFALSE 26808
26802: PUSH
26803: LD_EXP 81
26807: AND
26808: IFFALSE 26954
26810: GO 26812
26812: DISABLE
26813: LD_INT 0
26815: PPUSH
26816: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26817: LD_ADDR_VAR 0 1
26821: PUSH
26822: LD_INT 22
26824: PUSH
26825: LD_OWVAR 2
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 2
26836: PUSH
26837: LD_INT 30
26839: PUSH
26840: LD_INT 0
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: LD_INT 30
26849: PUSH
26850: LD_INT 1
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: LIST
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PPUSH
26866: CALL_OW 69
26870: ST_TO_ADDR
// if not depot then
26871: LD_VAR 0 1
26875: NOT
26876: IFFALSE 26880
// exit ;
26878: GO 26954
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26880: LD_ADDR_VAR 0 2
26884: PUSH
26885: LD_VAR 0 1
26889: PUSH
26890: LD_INT 1
26892: PPUSH
26893: LD_VAR 0 1
26897: PPUSH
26898: CALL_OW 12
26902: ARRAY
26903: PPUSH
26904: CALL_OW 274
26908: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26909: LD_VAR 0 2
26913: PPUSH
26914: LD_INT 1
26916: PPUSH
26917: LD_INT 0
26919: PPUSH
26920: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26924: LD_VAR 0 2
26928: PPUSH
26929: LD_INT 2
26931: PPUSH
26932: LD_INT 0
26934: PPUSH
26935: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26939: LD_VAR 0 2
26943: PPUSH
26944: LD_INT 3
26946: PPUSH
26947: LD_INT 0
26949: PPUSH
26950: CALL_OW 277
// end ;
26954: PPOPN 2
26956: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26957: LD_EXP 54
26961: IFFALSE 26969
26963: PUSH
26964: LD_EXP 82
26968: AND
26969: IFFALSE 27066
26971: GO 26973
26973: DISABLE
26974: LD_INT 0
26976: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26977: LD_ADDR_VAR 0 1
26981: PUSH
26982: LD_INT 22
26984: PUSH
26985: LD_OWVAR 2
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: LD_INT 21
26996: PUSH
26997: LD_INT 1
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 3
27006: PUSH
27007: LD_INT 23
27009: PUSH
27010: LD_INT 0
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: LIST
27025: PPUSH
27026: CALL_OW 69
27030: ST_TO_ADDR
// if not tmp then
27031: LD_VAR 0 1
27035: NOT
27036: IFFALSE 27040
// exit ;
27038: GO 27066
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27040: LD_VAR 0 1
27044: PUSH
27045: LD_INT 1
27047: PPUSH
27048: LD_VAR 0 1
27052: PPUSH
27053: CALL_OW 12
27057: ARRAY
27058: PPUSH
27059: LD_INT 200
27061: PPUSH
27062: CALL_OW 234
// end ;
27066: PPOPN 1
27068: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27069: LD_EXP 54
27073: IFFALSE 27081
27075: PUSH
27076: LD_EXP 83
27080: AND
27081: IFFALSE 27160
27083: GO 27085
27085: DISABLE
27086: LD_INT 0
27088: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27089: LD_ADDR_VAR 0 1
27093: PUSH
27094: LD_INT 22
27096: PUSH
27097: LD_OWVAR 2
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 21
27108: PUSH
27109: LD_INT 2
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PPUSH
27120: CALL_OW 69
27124: ST_TO_ADDR
// if not tmp then
27125: LD_VAR 0 1
27129: NOT
27130: IFFALSE 27134
// exit ;
27132: GO 27160
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27134: LD_VAR 0 1
27138: PUSH
27139: LD_INT 1
27141: PPUSH
27142: LD_VAR 0 1
27146: PPUSH
27147: CALL_OW 12
27151: ARRAY
27152: PPUSH
27153: LD_INT 60
27155: PPUSH
27156: CALL_OW 234
// end ;
27160: PPOPN 1
27162: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27163: LD_EXP 54
27167: IFFALSE 27175
27169: PUSH
27170: LD_EXP 84
27174: AND
27175: IFFALSE 27274
27177: GO 27179
27179: DISABLE
27180: LD_INT 0
27182: PPUSH
27183: PPUSH
// begin enable ;
27184: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27185: LD_ADDR_VAR 0 1
27189: PUSH
27190: LD_INT 22
27192: PUSH
27193: LD_OWVAR 2
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 61
27204: PUSH
27205: EMPTY
27206: LIST
27207: PUSH
27208: LD_INT 33
27210: PUSH
27211: LD_INT 2
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: LIST
27222: PPUSH
27223: CALL_OW 69
27227: ST_TO_ADDR
// if not tmp then
27228: LD_VAR 0 1
27232: NOT
27233: IFFALSE 27237
// exit ;
27235: GO 27274
// for i in tmp do
27237: LD_ADDR_VAR 0 2
27241: PUSH
27242: LD_VAR 0 1
27246: PUSH
27247: FOR_IN
27248: IFFALSE 27272
// if IsControledBy ( i ) then
27250: LD_VAR 0 2
27254: PPUSH
27255: CALL_OW 312
27259: IFFALSE 27270
// ComUnlink ( i ) ;
27261: LD_VAR 0 2
27265: PPUSH
27266: CALL_OW 136
27270: GO 27247
27272: POP
27273: POP
// end ;
27274: PPOPN 2
27276: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27277: LD_EXP 54
27281: IFFALSE 27289
27283: PUSH
27284: LD_EXP 85
27288: AND
27289: IFFALSE 27429
27291: GO 27293
27293: DISABLE
27294: LD_INT 0
27296: PPUSH
27297: PPUSH
// begin ToLua ( displayPowell(); ) ;
27298: LD_STRING displayPowell();
27300: PPUSH
27301: CALL_OW 559
// uc_side := 0 ;
27305: LD_ADDR_OWVAR 20
27309: PUSH
27310: LD_INT 0
27312: ST_TO_ADDR
// uc_nation := 2 ;
27313: LD_ADDR_OWVAR 21
27317: PUSH
27318: LD_INT 2
27320: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27321: LD_ADDR_OWVAR 37
27325: PUSH
27326: LD_INT 14
27328: ST_TO_ADDR
// vc_engine := engine_siberite ;
27329: LD_ADDR_OWVAR 39
27333: PUSH
27334: LD_INT 3
27336: ST_TO_ADDR
// vc_control := control_apeman ;
27337: LD_ADDR_OWVAR 38
27341: PUSH
27342: LD_INT 5
27344: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27345: LD_ADDR_OWVAR 40
27349: PUSH
27350: LD_INT 29
27352: ST_TO_ADDR
// un := CreateVehicle ;
27353: LD_ADDR_VAR 0 2
27357: PUSH
27358: CALL_OW 45
27362: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27363: LD_VAR 0 2
27367: PPUSH
27368: LD_INT 1
27370: PPUSH
27371: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27375: LD_INT 35
27377: PPUSH
27378: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27382: LD_VAR 0 2
27386: PPUSH
27387: LD_INT 22
27389: PUSH
27390: LD_OWVAR 2
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PPUSH
27399: CALL_OW 69
27403: PPUSH
27404: LD_VAR 0 2
27408: PPUSH
27409: CALL_OW 74
27413: PPUSH
27414: CALL_OW 115
// until IsDead ( un ) ;
27418: LD_VAR 0 2
27422: PPUSH
27423: CALL_OW 301
27427: IFFALSE 27375
// end ;
27429: PPOPN 2
27431: END
// every 0 0$1 trigger StreamModeActive and sStu do
27432: LD_EXP 54
27436: IFFALSE 27444
27438: PUSH
27439: LD_EXP 93
27443: AND
27444: IFFALSE 27460
27446: GO 27448
27448: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27449: LD_STRING displayStucuk();
27451: PPUSH
27452: CALL_OW 559
// ResetFog ;
27456: CALL_OW 335
// end ;
27460: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27461: LD_EXP 54
27465: IFFALSE 27473
27467: PUSH
27468: LD_EXP 86
27472: AND
27473: IFFALSE 27614
27475: GO 27477
27477: DISABLE
27478: LD_INT 0
27480: PPUSH
27481: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27482: LD_ADDR_VAR 0 2
27486: PUSH
27487: LD_INT 22
27489: PUSH
27490: LD_OWVAR 2
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 21
27501: PUSH
27502: LD_INT 1
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PPUSH
27513: CALL_OW 69
27517: ST_TO_ADDR
// if not tmp then
27518: LD_VAR 0 2
27522: NOT
27523: IFFALSE 27527
// exit ;
27525: GO 27614
// un := tmp [ rand ( 1 , tmp ) ] ;
27527: LD_ADDR_VAR 0 1
27531: PUSH
27532: LD_VAR 0 2
27536: PUSH
27537: LD_INT 1
27539: PPUSH
27540: LD_VAR 0 2
27544: PPUSH
27545: CALL_OW 12
27549: ARRAY
27550: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27551: LD_VAR 0 1
27555: PPUSH
27556: LD_INT 0
27558: PPUSH
27559: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27563: LD_VAR 0 1
27567: PPUSH
27568: LD_OWVAR 3
27572: PUSH
27573: LD_VAR 0 1
27577: DIFF
27578: PPUSH
27579: LD_VAR 0 1
27583: PPUSH
27584: CALL_OW 74
27588: PPUSH
27589: CALL_OW 115
// wait ( 0 0$20 ) ;
27593: LD_INT 700
27595: PPUSH
27596: CALL_OW 67
// SetSide ( un , your_side ) ;
27600: LD_VAR 0 1
27604: PPUSH
27605: LD_OWVAR 2
27609: PPUSH
27610: CALL_OW 235
// end ;
27614: PPOPN 2
27616: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27617: LD_EXP 54
27621: IFFALSE 27629
27623: PUSH
27624: LD_EXP 87
27628: AND
27629: IFFALSE 27735
27631: GO 27633
27633: DISABLE
27634: LD_INT 0
27636: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27637: LD_ADDR_VAR 0 1
27641: PUSH
27642: LD_INT 22
27644: PUSH
27645: LD_OWVAR 2
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: LD_INT 2
27656: PUSH
27657: LD_INT 30
27659: PUSH
27660: LD_INT 0
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 30
27669: PUSH
27670: LD_INT 1
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: LIST
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PPUSH
27686: CALL_OW 69
27690: ST_TO_ADDR
// if not depot then
27691: LD_VAR 0 1
27695: NOT
27696: IFFALSE 27700
// exit ;
27698: GO 27735
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27700: LD_VAR 0 1
27704: PUSH
27705: LD_INT 1
27707: ARRAY
27708: PPUSH
27709: CALL_OW 250
27713: PPUSH
27714: LD_VAR 0 1
27718: PUSH
27719: LD_INT 1
27721: ARRAY
27722: PPUSH
27723: CALL_OW 251
27727: PPUSH
27728: LD_INT 70
27730: PPUSH
27731: CALL_OW 495
// end ;
27735: PPOPN 1
27737: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27738: LD_EXP 54
27742: IFFALSE 27750
27744: PUSH
27745: LD_EXP 88
27749: AND
27750: IFFALSE 27961
27752: GO 27754
27754: DISABLE
27755: LD_INT 0
27757: PPUSH
27758: PPUSH
27759: PPUSH
27760: PPUSH
27761: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27762: LD_ADDR_VAR 0 5
27766: PUSH
27767: LD_INT 22
27769: PUSH
27770: LD_OWVAR 2
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: LD_INT 21
27781: PUSH
27782: LD_INT 1
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: PPUSH
27793: CALL_OW 69
27797: ST_TO_ADDR
// if not tmp then
27798: LD_VAR 0 5
27802: NOT
27803: IFFALSE 27807
// exit ;
27805: GO 27961
// for i in tmp do
27807: LD_ADDR_VAR 0 1
27811: PUSH
27812: LD_VAR 0 5
27816: PUSH
27817: FOR_IN
27818: IFFALSE 27959
// begin d := rand ( 0 , 5 ) ;
27820: LD_ADDR_VAR 0 4
27824: PUSH
27825: LD_INT 0
27827: PPUSH
27828: LD_INT 5
27830: PPUSH
27831: CALL_OW 12
27835: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27836: LD_ADDR_VAR 0 2
27840: PUSH
27841: LD_VAR 0 1
27845: PPUSH
27846: CALL_OW 250
27850: PPUSH
27851: LD_VAR 0 4
27855: PPUSH
27856: LD_INT 3
27858: PPUSH
27859: LD_INT 12
27861: PPUSH
27862: CALL_OW 12
27866: PPUSH
27867: CALL_OW 272
27871: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27872: LD_ADDR_VAR 0 3
27876: PUSH
27877: LD_VAR 0 1
27881: PPUSH
27882: CALL_OW 251
27886: PPUSH
27887: LD_VAR 0 4
27891: PPUSH
27892: LD_INT 3
27894: PPUSH
27895: LD_INT 12
27897: PPUSH
27898: CALL_OW 12
27902: PPUSH
27903: CALL_OW 273
27907: ST_TO_ADDR
// if ValidHex ( x , y ) then
27908: LD_VAR 0 2
27912: PPUSH
27913: LD_VAR 0 3
27917: PPUSH
27918: CALL_OW 488
27922: IFFALSE 27957
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27924: LD_VAR 0 1
27928: PPUSH
27929: LD_VAR 0 2
27933: PPUSH
27934: LD_VAR 0 3
27938: PPUSH
27939: LD_INT 3
27941: PPUSH
27942: LD_INT 6
27944: PPUSH
27945: CALL_OW 12
27949: PPUSH
27950: LD_INT 1
27952: PPUSH
27953: CALL_OW 483
// end ;
27957: GO 27817
27959: POP
27960: POP
// end ;
27961: PPOPN 5
27963: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27964: LD_EXP 54
27968: IFFALSE 27976
27970: PUSH
27971: LD_EXP 89
27975: AND
27976: IFFALSE 28070
27978: GO 27980
27980: DISABLE
27981: LD_INT 0
27983: PPUSH
27984: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27985: LD_ADDR_VAR 0 2
27989: PUSH
27990: LD_INT 22
27992: PUSH
27993: LD_OWVAR 2
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 32
28004: PUSH
28005: LD_INT 1
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 21
28014: PUSH
28015: LD_INT 2
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: LIST
28026: PPUSH
28027: CALL_OW 69
28031: ST_TO_ADDR
// if not tmp then
28032: LD_VAR 0 2
28036: NOT
28037: IFFALSE 28041
// exit ;
28039: GO 28070
// for i in tmp do
28041: LD_ADDR_VAR 0 1
28045: PUSH
28046: LD_VAR 0 2
28050: PUSH
28051: FOR_IN
28052: IFFALSE 28068
// SetFuel ( i , 0 ) ;
28054: LD_VAR 0 1
28058: PPUSH
28059: LD_INT 0
28061: PPUSH
28062: CALL_OW 240
28066: GO 28051
28068: POP
28069: POP
// end ;
28070: PPOPN 2
28072: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28073: LD_EXP 54
28077: IFFALSE 28085
28079: PUSH
28080: LD_EXP 90
28084: AND
28085: IFFALSE 28151
28087: GO 28089
28089: DISABLE
28090: LD_INT 0
28092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28093: LD_ADDR_VAR 0 1
28097: PUSH
28098: LD_INT 22
28100: PUSH
28101: LD_OWVAR 2
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 30
28112: PUSH
28113: LD_INT 29
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PPUSH
28124: CALL_OW 69
28128: ST_TO_ADDR
// if not tmp then
28129: LD_VAR 0 1
28133: NOT
28134: IFFALSE 28138
// exit ;
28136: GO 28151
// DestroyUnit ( tmp [ 1 ] ) ;
28138: LD_VAR 0 1
28142: PUSH
28143: LD_INT 1
28145: ARRAY
28146: PPUSH
28147: CALL_OW 65
// end ;
28151: PPOPN 1
28153: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28154: LD_EXP 54
28158: IFFALSE 28166
28160: PUSH
28161: LD_EXP 92
28165: AND
28166: IFFALSE 28295
28168: GO 28170
28170: DISABLE
28171: LD_INT 0
28173: PPUSH
// begin uc_side := 0 ;
28174: LD_ADDR_OWVAR 20
28178: PUSH
28179: LD_INT 0
28181: ST_TO_ADDR
// uc_nation := nation_arabian ;
28182: LD_ADDR_OWVAR 21
28186: PUSH
28187: LD_INT 2
28189: ST_TO_ADDR
// hc_gallery :=  ;
28190: LD_ADDR_OWVAR 33
28194: PUSH
28195: LD_STRING 
28197: ST_TO_ADDR
// hc_name :=  ;
28198: LD_ADDR_OWVAR 26
28202: PUSH
28203: LD_STRING 
28205: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28206: LD_INT 1
28208: PPUSH
28209: LD_INT 11
28211: PPUSH
28212: LD_INT 10
28214: PPUSH
28215: CALL_OW 380
// un := CreateHuman ;
28219: LD_ADDR_VAR 0 1
28223: PUSH
28224: CALL_OW 44
28228: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28229: LD_VAR 0 1
28233: PPUSH
28234: LD_INT 1
28236: PPUSH
28237: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28241: LD_INT 35
28243: PPUSH
28244: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28248: LD_VAR 0 1
28252: PPUSH
28253: LD_INT 22
28255: PUSH
28256: LD_OWVAR 2
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PPUSH
28265: CALL_OW 69
28269: PPUSH
28270: LD_VAR 0 1
28274: PPUSH
28275: CALL_OW 74
28279: PPUSH
28280: CALL_OW 115
// until IsDead ( un ) ;
28284: LD_VAR 0 1
28288: PPUSH
28289: CALL_OW 301
28293: IFFALSE 28241
// end ;
28295: PPOPN 1
28297: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28298: LD_EXP 54
28302: IFFALSE 28310
28304: PUSH
28305: LD_EXP 94
28309: AND
28310: IFFALSE 28322
28312: GO 28314
28314: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28315: LD_STRING earthquake(getX(game), 0, 32)
28317: PPUSH
28318: CALL_OW 559
28322: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28323: LD_EXP 54
28327: IFFALSE 28335
28329: PUSH
28330: LD_EXP 95
28334: AND
28335: IFFALSE 28426
28337: GO 28339
28339: DISABLE
28340: LD_INT 0
28342: PPUSH
// begin enable ;
28343: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28344: LD_ADDR_VAR 0 1
28348: PUSH
28349: LD_INT 22
28351: PUSH
28352: LD_OWVAR 2
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 21
28363: PUSH
28364: LD_INT 2
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: LD_INT 33
28373: PUSH
28374: LD_INT 3
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: LIST
28385: PPUSH
28386: CALL_OW 69
28390: ST_TO_ADDR
// if not tmp then
28391: LD_VAR 0 1
28395: NOT
28396: IFFALSE 28400
// exit ;
28398: GO 28426
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28400: LD_VAR 0 1
28404: PUSH
28405: LD_INT 1
28407: PPUSH
28408: LD_VAR 0 1
28412: PPUSH
28413: CALL_OW 12
28417: ARRAY
28418: PPUSH
28419: LD_INT 1
28421: PPUSH
28422: CALL_OW 234
// end ;
28426: PPOPN 1
28428: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28429: LD_EXP 54
28433: IFFALSE 28441
28435: PUSH
28436: LD_EXP 96
28440: AND
28441: IFFALSE 28582
28443: GO 28445
28445: DISABLE
28446: LD_INT 0
28448: PPUSH
28449: PPUSH
28450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28451: LD_ADDR_VAR 0 3
28455: PUSH
28456: LD_INT 22
28458: PUSH
28459: LD_OWVAR 2
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 25
28470: PUSH
28471: LD_INT 1
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PPUSH
28482: CALL_OW 69
28486: ST_TO_ADDR
// if not tmp then
28487: LD_VAR 0 3
28491: NOT
28492: IFFALSE 28496
// exit ;
28494: GO 28582
// un := tmp [ rand ( 1 , tmp ) ] ;
28496: LD_ADDR_VAR 0 2
28500: PUSH
28501: LD_VAR 0 3
28505: PUSH
28506: LD_INT 1
28508: PPUSH
28509: LD_VAR 0 3
28513: PPUSH
28514: CALL_OW 12
28518: ARRAY
28519: ST_TO_ADDR
// if Crawls ( un ) then
28520: LD_VAR 0 2
28524: PPUSH
28525: CALL_OW 318
28529: IFFALSE 28540
// ComWalk ( un ) ;
28531: LD_VAR 0 2
28535: PPUSH
28536: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28540: LD_VAR 0 2
28544: PPUSH
28545: LD_INT 9
28547: PPUSH
28548: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28552: LD_INT 28
28554: PPUSH
28555: LD_OWVAR 2
28559: PPUSH
28560: LD_INT 2
28562: PPUSH
28563: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28567: LD_INT 29
28569: PPUSH
28570: LD_OWVAR 2
28574: PPUSH
28575: LD_INT 2
28577: PPUSH
28578: CALL_OW 322
// end ;
28582: PPOPN 3
28584: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28585: LD_EXP 54
28589: IFFALSE 28597
28591: PUSH
28592: LD_EXP 97
28596: AND
28597: IFFALSE 28708
28599: GO 28601
28601: DISABLE
28602: LD_INT 0
28604: PPUSH
28605: PPUSH
28606: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28607: LD_ADDR_VAR 0 3
28611: PUSH
28612: LD_INT 22
28614: PUSH
28615: LD_OWVAR 2
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 25
28626: PUSH
28627: LD_INT 1
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PPUSH
28638: CALL_OW 69
28642: ST_TO_ADDR
// if not tmp then
28643: LD_VAR 0 3
28647: NOT
28648: IFFALSE 28652
// exit ;
28650: GO 28708
// un := tmp [ rand ( 1 , tmp ) ] ;
28652: LD_ADDR_VAR 0 2
28656: PUSH
28657: LD_VAR 0 3
28661: PUSH
28662: LD_INT 1
28664: PPUSH
28665: LD_VAR 0 3
28669: PPUSH
28670: CALL_OW 12
28674: ARRAY
28675: ST_TO_ADDR
// if Crawls ( un ) then
28676: LD_VAR 0 2
28680: PPUSH
28681: CALL_OW 318
28685: IFFALSE 28696
// ComWalk ( un ) ;
28687: LD_VAR 0 2
28691: PPUSH
28692: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28696: LD_VAR 0 2
28700: PPUSH
28701: LD_INT 8
28703: PPUSH
28704: CALL_OW 336
// end ;
28708: PPOPN 3
28710: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28711: LD_EXP 54
28715: IFFALSE 28723
28717: PUSH
28718: LD_EXP 98
28722: AND
28723: IFFALSE 28867
28725: GO 28727
28727: DISABLE
28728: LD_INT 0
28730: PPUSH
28731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28732: LD_ADDR_VAR 0 2
28736: PUSH
28737: LD_INT 22
28739: PUSH
28740: LD_OWVAR 2
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 21
28751: PUSH
28752: LD_INT 2
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PUSH
28759: LD_INT 2
28761: PUSH
28762: LD_INT 34
28764: PUSH
28765: LD_INT 12
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 34
28774: PUSH
28775: LD_INT 51
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: LD_INT 34
28784: PUSH
28785: LD_INT 32
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: LIST
28802: PPUSH
28803: CALL_OW 69
28807: ST_TO_ADDR
// if not tmp then
28808: LD_VAR 0 2
28812: NOT
28813: IFFALSE 28817
// exit ;
28815: GO 28867
// for i in tmp do
28817: LD_ADDR_VAR 0 1
28821: PUSH
28822: LD_VAR 0 2
28826: PUSH
28827: FOR_IN
28828: IFFALSE 28865
// if GetCargo ( i , mat_artifact ) = 0 then
28830: LD_VAR 0 1
28834: PPUSH
28835: LD_INT 4
28837: PPUSH
28838: CALL_OW 289
28842: PUSH
28843: LD_INT 0
28845: EQUAL
28846: IFFALSE 28863
// SetCargo ( i , mat_siberit , 100 ) ;
28848: LD_VAR 0 1
28852: PPUSH
28853: LD_INT 3
28855: PPUSH
28856: LD_INT 100
28858: PPUSH
28859: CALL_OW 290
28863: GO 28827
28865: POP
28866: POP
// end ;
28867: PPOPN 2
28869: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28870: LD_EXP 54
28874: IFFALSE 28882
28876: PUSH
28877: LD_EXP 99
28881: AND
28882: IFFALSE 29065
28884: GO 28886
28886: DISABLE
28887: LD_INT 0
28889: PPUSH
28890: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28891: LD_ADDR_VAR 0 2
28895: PUSH
28896: LD_INT 22
28898: PUSH
28899: LD_OWVAR 2
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PPUSH
28908: CALL_OW 69
28912: ST_TO_ADDR
// if not tmp then
28913: LD_VAR 0 2
28917: NOT
28918: IFFALSE 28922
// exit ;
28920: GO 29065
// for i := 1 to 2 do
28922: LD_ADDR_VAR 0 1
28926: PUSH
28927: DOUBLE
28928: LD_INT 1
28930: DEC
28931: ST_TO_ADDR
28932: LD_INT 2
28934: PUSH
28935: FOR_TO
28936: IFFALSE 29063
// begin uc_side := your_side ;
28938: LD_ADDR_OWVAR 20
28942: PUSH
28943: LD_OWVAR 2
28947: ST_TO_ADDR
// uc_nation := nation_american ;
28948: LD_ADDR_OWVAR 21
28952: PUSH
28953: LD_INT 1
28955: ST_TO_ADDR
// vc_chassis := us_morphling ;
28956: LD_ADDR_OWVAR 37
28960: PUSH
28961: LD_INT 5
28963: ST_TO_ADDR
// vc_engine := engine_siberite ;
28964: LD_ADDR_OWVAR 39
28968: PUSH
28969: LD_INT 3
28971: ST_TO_ADDR
// vc_control := control_computer ;
28972: LD_ADDR_OWVAR 38
28976: PUSH
28977: LD_INT 3
28979: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28980: LD_ADDR_OWVAR 40
28984: PUSH
28985: LD_INT 10
28987: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28988: LD_VAR 0 2
28992: PUSH
28993: LD_INT 1
28995: ARRAY
28996: PPUSH
28997: CALL_OW 310
29001: NOT
29002: IFFALSE 29049
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29004: CALL_OW 45
29008: PPUSH
29009: LD_VAR 0 2
29013: PUSH
29014: LD_INT 1
29016: ARRAY
29017: PPUSH
29018: CALL_OW 250
29022: PPUSH
29023: LD_VAR 0 2
29027: PUSH
29028: LD_INT 1
29030: ARRAY
29031: PPUSH
29032: CALL_OW 251
29036: PPUSH
29037: LD_INT 12
29039: PPUSH
29040: LD_INT 1
29042: PPUSH
29043: CALL_OW 50
29047: GO 29061
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29049: CALL_OW 45
29053: PPUSH
29054: LD_INT 1
29056: PPUSH
29057: CALL_OW 51
// end ;
29061: GO 28935
29063: POP
29064: POP
// end ;
29065: PPOPN 2
29067: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29068: LD_EXP 54
29072: IFFALSE 29080
29074: PUSH
29075: LD_EXP 100
29079: AND
29080: IFFALSE 29302
29082: GO 29084
29084: DISABLE
29085: LD_INT 0
29087: PPUSH
29088: PPUSH
29089: PPUSH
29090: PPUSH
29091: PPUSH
29092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29093: LD_ADDR_VAR 0 6
29097: PUSH
29098: LD_INT 22
29100: PUSH
29101: LD_OWVAR 2
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 21
29112: PUSH
29113: LD_INT 1
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 3
29122: PUSH
29123: LD_INT 23
29125: PUSH
29126: LD_INT 0
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: LIST
29141: PPUSH
29142: CALL_OW 69
29146: ST_TO_ADDR
// if not tmp then
29147: LD_VAR 0 6
29151: NOT
29152: IFFALSE 29156
// exit ;
29154: GO 29302
// s1 := rand ( 1 , 4 ) ;
29156: LD_ADDR_VAR 0 2
29160: PUSH
29161: LD_INT 1
29163: PPUSH
29164: LD_INT 4
29166: PPUSH
29167: CALL_OW 12
29171: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29172: LD_ADDR_VAR 0 4
29176: PUSH
29177: LD_VAR 0 6
29181: PUSH
29182: LD_INT 1
29184: ARRAY
29185: PPUSH
29186: LD_VAR 0 2
29190: PPUSH
29191: CALL_OW 259
29195: ST_TO_ADDR
// if s1 = 1 then
29196: LD_VAR 0 2
29200: PUSH
29201: LD_INT 1
29203: EQUAL
29204: IFFALSE 29224
// s2 := rand ( 2 , 4 ) else
29206: LD_ADDR_VAR 0 3
29210: PUSH
29211: LD_INT 2
29213: PPUSH
29214: LD_INT 4
29216: PPUSH
29217: CALL_OW 12
29221: ST_TO_ADDR
29222: GO 29232
// s2 := 1 ;
29224: LD_ADDR_VAR 0 3
29228: PUSH
29229: LD_INT 1
29231: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29232: LD_ADDR_VAR 0 5
29236: PUSH
29237: LD_VAR 0 6
29241: PUSH
29242: LD_INT 1
29244: ARRAY
29245: PPUSH
29246: LD_VAR 0 3
29250: PPUSH
29251: CALL_OW 259
29255: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29256: LD_VAR 0 6
29260: PUSH
29261: LD_INT 1
29263: ARRAY
29264: PPUSH
29265: LD_VAR 0 2
29269: PPUSH
29270: LD_VAR 0 5
29274: PPUSH
29275: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29279: LD_VAR 0 6
29283: PUSH
29284: LD_INT 1
29286: ARRAY
29287: PPUSH
29288: LD_VAR 0 3
29292: PPUSH
29293: LD_VAR 0 4
29297: PPUSH
29298: CALL_OW 237
// end ;
29302: PPOPN 6
29304: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29305: LD_EXP 54
29309: IFFALSE 29317
29311: PUSH
29312: LD_EXP 101
29316: AND
29317: IFFALSE 29396
29319: GO 29321
29321: DISABLE
29322: LD_INT 0
29324: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29325: LD_ADDR_VAR 0 1
29329: PUSH
29330: LD_INT 22
29332: PUSH
29333: LD_OWVAR 2
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PUSH
29342: LD_INT 30
29344: PUSH
29345: LD_INT 3
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PPUSH
29356: CALL_OW 69
29360: ST_TO_ADDR
// if not tmp then
29361: LD_VAR 0 1
29365: NOT
29366: IFFALSE 29370
// exit ;
29368: GO 29396
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29370: LD_VAR 0 1
29374: PUSH
29375: LD_INT 1
29377: PPUSH
29378: LD_VAR 0 1
29382: PPUSH
29383: CALL_OW 12
29387: ARRAY
29388: PPUSH
29389: LD_INT 1
29391: PPUSH
29392: CALL_OW 234
// end ;
29396: PPOPN 1
29398: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29399: LD_EXP 54
29403: IFFALSE 29411
29405: PUSH
29406: LD_EXP 102
29410: AND
29411: IFFALSE 29523
29413: GO 29415
29415: DISABLE
29416: LD_INT 0
29418: PPUSH
29419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29420: LD_ADDR_VAR 0 2
29424: PUSH
29425: LD_INT 22
29427: PUSH
29428: LD_OWVAR 2
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 2
29439: PUSH
29440: LD_INT 30
29442: PUSH
29443: LD_INT 27
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 30
29452: PUSH
29453: LD_INT 26
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 30
29462: PUSH
29463: LD_INT 28
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PPUSH
29480: CALL_OW 69
29484: ST_TO_ADDR
// if not tmp then
29485: LD_VAR 0 2
29489: NOT
29490: IFFALSE 29494
// exit ;
29492: GO 29523
// for i in tmp do
29494: LD_ADDR_VAR 0 1
29498: PUSH
29499: LD_VAR 0 2
29503: PUSH
29504: FOR_IN
29505: IFFALSE 29521
// SetLives ( i , 1 ) ;
29507: LD_VAR 0 1
29511: PPUSH
29512: LD_INT 1
29514: PPUSH
29515: CALL_OW 234
29519: GO 29504
29521: POP
29522: POP
// end ;
29523: PPOPN 2
29525: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29526: LD_EXP 54
29530: IFFALSE 29538
29532: PUSH
29533: LD_EXP 103
29537: AND
29538: IFFALSE 29825
29540: GO 29542
29542: DISABLE
29543: LD_INT 0
29545: PPUSH
29546: PPUSH
29547: PPUSH
// begin i := rand ( 1 , 7 ) ;
29548: LD_ADDR_VAR 0 1
29552: PUSH
29553: LD_INT 1
29555: PPUSH
29556: LD_INT 7
29558: PPUSH
29559: CALL_OW 12
29563: ST_TO_ADDR
// case i of 1 :
29564: LD_VAR 0 1
29568: PUSH
29569: LD_INT 1
29571: DOUBLE
29572: EQUAL
29573: IFTRUE 29577
29575: GO 29587
29577: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29578: LD_STRING earthquake(getX(game), 0, 32)
29580: PPUSH
29581: CALL_OW 559
29585: GO 29825
29587: LD_INT 2
29589: DOUBLE
29590: EQUAL
29591: IFTRUE 29595
29593: GO 29609
29595: POP
// begin ToLua ( displayStucuk(); ) ;
29596: LD_STRING displayStucuk();
29598: PPUSH
29599: CALL_OW 559
// ResetFog ;
29603: CALL_OW 335
// end ; 3 :
29607: GO 29825
29609: LD_INT 3
29611: DOUBLE
29612: EQUAL
29613: IFTRUE 29617
29615: GO 29721
29617: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29618: LD_ADDR_VAR 0 2
29622: PUSH
29623: LD_INT 22
29625: PUSH
29626: LD_OWVAR 2
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 25
29637: PUSH
29638: LD_INT 1
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PPUSH
29649: CALL_OW 69
29653: ST_TO_ADDR
// if not tmp then
29654: LD_VAR 0 2
29658: NOT
29659: IFFALSE 29663
// exit ;
29661: GO 29825
// un := tmp [ rand ( 1 , tmp ) ] ;
29663: LD_ADDR_VAR 0 3
29667: PUSH
29668: LD_VAR 0 2
29672: PUSH
29673: LD_INT 1
29675: PPUSH
29676: LD_VAR 0 2
29680: PPUSH
29681: CALL_OW 12
29685: ARRAY
29686: ST_TO_ADDR
// if Crawls ( un ) then
29687: LD_VAR 0 3
29691: PPUSH
29692: CALL_OW 318
29696: IFFALSE 29707
// ComWalk ( un ) ;
29698: LD_VAR 0 3
29702: PPUSH
29703: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29707: LD_VAR 0 3
29711: PPUSH
29712: LD_INT 8
29714: PPUSH
29715: CALL_OW 336
// end ; 4 :
29719: GO 29825
29721: LD_INT 4
29723: DOUBLE
29724: EQUAL
29725: IFTRUE 29729
29727: GO 29803
29729: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29730: LD_ADDR_VAR 0 2
29734: PUSH
29735: LD_INT 22
29737: PUSH
29738: LD_OWVAR 2
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: LD_INT 30
29749: PUSH
29750: LD_INT 29
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PPUSH
29761: CALL_OW 69
29765: ST_TO_ADDR
// if not tmp then
29766: LD_VAR 0 2
29770: NOT
29771: IFFALSE 29775
// exit ;
29773: GO 29825
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29775: LD_VAR 0 2
29779: PUSH
29780: LD_INT 1
29782: ARRAY
29783: PPUSH
29784: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29788: LD_VAR 0 2
29792: PUSH
29793: LD_INT 1
29795: ARRAY
29796: PPUSH
29797: CALL_OW 65
// end ; 5 .. 7 :
29801: GO 29825
29803: LD_INT 5
29805: DOUBLE
29806: GREATEREQUAL
29807: IFFALSE 29815
29809: LD_INT 7
29811: DOUBLE
29812: LESSEQUAL
29813: IFTRUE 29817
29815: GO 29824
29817: POP
// StreamSibBomb ; end ;
29818: CALL 26006 0 0
29822: GO 29825
29824: POP
// end ;
29825: PPOPN 3
29827: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29828: LD_EXP 54
29832: IFFALSE 29840
29834: PUSH
29835: LD_EXP 104
29839: AND
29840: IFFALSE 29996
29842: GO 29844
29844: DISABLE
29845: LD_INT 0
29847: PPUSH
29848: PPUSH
29849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29850: LD_ADDR_VAR 0 2
29854: PUSH
29855: LD_INT 81
29857: PUSH
29858: LD_OWVAR 2
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 2
29869: PUSH
29870: LD_INT 21
29872: PUSH
29873: LD_INT 1
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 21
29882: PUSH
29883: LD_INT 2
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: LIST
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PPUSH
29899: CALL_OW 69
29903: ST_TO_ADDR
// if not tmp then
29904: LD_VAR 0 2
29908: NOT
29909: IFFALSE 29913
// exit ;
29911: GO 29996
// p := 0 ;
29913: LD_ADDR_VAR 0 3
29917: PUSH
29918: LD_INT 0
29920: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29921: LD_INT 35
29923: PPUSH
29924: CALL_OW 67
// p := p + 1 ;
29928: LD_ADDR_VAR 0 3
29932: PUSH
29933: LD_VAR 0 3
29937: PUSH
29938: LD_INT 1
29940: PLUS
29941: ST_TO_ADDR
// for i in tmp do
29942: LD_ADDR_VAR 0 1
29946: PUSH
29947: LD_VAR 0 2
29951: PUSH
29952: FOR_IN
29953: IFFALSE 29984
// if GetLives ( i ) < 1000 then
29955: LD_VAR 0 1
29959: PPUSH
29960: CALL_OW 256
29964: PUSH
29965: LD_INT 1000
29967: LESS
29968: IFFALSE 29982
// SetLives ( i , 1000 ) ;
29970: LD_VAR 0 1
29974: PPUSH
29975: LD_INT 1000
29977: PPUSH
29978: CALL_OW 234
29982: GO 29952
29984: POP
29985: POP
// until p > 20 ;
29986: LD_VAR 0 3
29990: PUSH
29991: LD_INT 20
29993: GREATER
29994: IFFALSE 29921
// end ;
29996: PPOPN 3
29998: END
// every 0 0$1 trigger StreamModeActive and sTime do
29999: LD_EXP 54
30003: IFFALSE 30011
30005: PUSH
30006: LD_EXP 105
30010: AND
30011: IFFALSE 30046
30013: GO 30015
30015: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30016: LD_INT 28
30018: PPUSH
30019: LD_OWVAR 2
30023: PPUSH
30024: LD_INT 2
30026: PPUSH
30027: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30031: LD_INT 30
30033: PPUSH
30034: LD_OWVAR 2
30038: PPUSH
30039: LD_INT 2
30041: PPUSH
30042: CALL_OW 322
// end ;
30046: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30047: LD_EXP 54
30051: IFFALSE 30059
30053: PUSH
30054: LD_EXP 106
30058: AND
30059: IFFALSE 30180
30061: GO 30063
30063: DISABLE
30064: LD_INT 0
30066: PPUSH
30067: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30068: LD_ADDR_VAR 0 2
30072: PUSH
30073: LD_INT 22
30075: PUSH
30076: LD_OWVAR 2
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: LD_INT 21
30087: PUSH
30088: LD_INT 1
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 3
30097: PUSH
30098: LD_INT 23
30100: PUSH
30101: LD_INT 0
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: LIST
30116: PPUSH
30117: CALL_OW 69
30121: ST_TO_ADDR
// if not tmp then
30122: LD_VAR 0 2
30126: NOT
30127: IFFALSE 30131
// exit ;
30129: GO 30180
// for i in tmp do
30131: LD_ADDR_VAR 0 1
30135: PUSH
30136: LD_VAR 0 2
30140: PUSH
30141: FOR_IN
30142: IFFALSE 30178
// begin if Crawls ( i ) then
30144: LD_VAR 0 1
30148: PPUSH
30149: CALL_OW 318
30153: IFFALSE 30164
// ComWalk ( i ) ;
30155: LD_VAR 0 1
30159: PPUSH
30160: CALL_OW 138
// SetClass ( i , 2 ) ;
30164: LD_VAR 0 1
30168: PPUSH
30169: LD_INT 2
30171: PPUSH
30172: CALL_OW 336
// end ;
30176: GO 30141
30178: POP
30179: POP
// end ;
30180: PPOPN 2
30182: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30183: LD_EXP 54
30187: IFFALSE 30195
30189: PUSH
30190: LD_EXP 107
30194: AND
30195: IFFALSE 30485
30197: GO 30199
30199: DISABLE
30200: LD_INT 0
30202: PPUSH
30203: PPUSH
30204: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30205: LD_OWVAR 2
30209: PPUSH
30210: LD_INT 9
30212: PPUSH
30213: LD_INT 1
30215: PPUSH
30216: LD_INT 1
30218: PPUSH
30219: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30223: LD_INT 9
30225: PPUSH
30226: LD_OWVAR 2
30230: PPUSH
30231: CALL_OW 343
// uc_side := 9 ;
30235: LD_ADDR_OWVAR 20
30239: PUSH
30240: LD_INT 9
30242: ST_TO_ADDR
// uc_nation := 2 ;
30243: LD_ADDR_OWVAR 21
30247: PUSH
30248: LD_INT 2
30250: ST_TO_ADDR
// hc_name := Dark Warrior ;
30251: LD_ADDR_OWVAR 26
30255: PUSH
30256: LD_STRING Dark Warrior
30258: ST_TO_ADDR
// hc_gallery :=  ;
30259: LD_ADDR_OWVAR 33
30263: PUSH
30264: LD_STRING 
30266: ST_TO_ADDR
// hc_noskilllimit := true ;
30267: LD_ADDR_OWVAR 76
30271: PUSH
30272: LD_INT 1
30274: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30275: LD_ADDR_OWVAR 31
30279: PUSH
30280: LD_INT 30
30282: PUSH
30283: LD_INT 30
30285: PUSH
30286: LD_INT 30
30288: PUSH
30289: LD_INT 30
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: ST_TO_ADDR
// un := CreateHuman ;
30298: LD_ADDR_VAR 0 3
30302: PUSH
30303: CALL_OW 44
30307: ST_TO_ADDR
// hc_noskilllimit := false ;
30308: LD_ADDR_OWVAR 76
30312: PUSH
30313: LD_INT 0
30315: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30316: LD_VAR 0 3
30320: PPUSH
30321: LD_INT 1
30323: PPUSH
30324: CALL_OW 51
// ToLua ( playRanger() ) ;
30328: LD_STRING playRanger()
30330: PPUSH
30331: CALL_OW 559
// p := 0 ;
30335: LD_ADDR_VAR 0 2
30339: PUSH
30340: LD_INT 0
30342: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30343: LD_INT 35
30345: PPUSH
30346: CALL_OW 67
// p := p + 1 ;
30350: LD_ADDR_VAR 0 2
30354: PUSH
30355: LD_VAR 0 2
30359: PUSH
30360: LD_INT 1
30362: PLUS
30363: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30364: LD_VAR 0 3
30368: PPUSH
30369: CALL_OW 256
30373: PUSH
30374: LD_INT 1000
30376: LESS
30377: IFFALSE 30391
// SetLives ( un , 1000 ) ;
30379: LD_VAR 0 3
30383: PPUSH
30384: LD_INT 1000
30386: PPUSH
30387: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30391: LD_VAR 0 3
30395: PPUSH
30396: LD_INT 81
30398: PUSH
30399: LD_OWVAR 2
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 91
30410: PUSH
30411: LD_VAR 0 3
30415: PUSH
30416: LD_INT 30
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: LIST
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PPUSH
30428: CALL_OW 69
30432: PPUSH
30433: LD_VAR 0 3
30437: PPUSH
30438: CALL_OW 74
30442: PPUSH
30443: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30447: LD_VAR 0 2
30451: PUSH
30452: LD_INT 80
30454: GREATER
30455: IFTRUE 30468
30457: PUSH
30458: LD_VAR 0 3
30462: PPUSH
30463: CALL_OW 301
30467: OR
30468: IFFALSE 30343
// if un then
30470: LD_VAR 0 3
30474: IFFALSE 30485
// RemoveUnit ( un ) ;
30476: LD_VAR 0 3
30480: PPUSH
30481: CALL_OW 64
// end ;
30485: PPOPN 3
30487: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30488: LD_EXP 108
30492: IFFALSE 30608
30494: GO 30496
30496: DISABLE
30497: LD_INT 0
30499: PPUSH
30500: PPUSH
30501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30502: LD_ADDR_VAR 0 2
30506: PUSH
30507: LD_INT 81
30509: PUSH
30510: LD_OWVAR 2
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 21
30521: PUSH
30522: LD_INT 1
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PPUSH
30533: CALL_OW 69
30537: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30538: LD_STRING playComputer()
30540: PPUSH
30541: CALL_OW 559
// if not tmp then
30545: LD_VAR 0 2
30549: NOT
30550: IFFALSE 30554
// exit ;
30552: GO 30608
// for i in tmp do
30554: LD_ADDR_VAR 0 1
30558: PUSH
30559: LD_VAR 0 2
30563: PUSH
30564: FOR_IN
30565: IFFALSE 30606
// for j := 1 to 4 do
30567: LD_ADDR_VAR 0 3
30571: PUSH
30572: DOUBLE
30573: LD_INT 1
30575: DEC
30576: ST_TO_ADDR
30577: LD_INT 4
30579: PUSH
30580: FOR_TO
30581: IFFALSE 30602
// SetSkill ( i , j , 10 ) ;
30583: LD_VAR 0 1
30587: PPUSH
30588: LD_VAR 0 3
30592: PPUSH
30593: LD_INT 10
30595: PPUSH
30596: CALL_OW 237
30600: GO 30580
30602: POP
30603: POP
30604: GO 30564
30606: POP
30607: POP
// end ;
30608: PPOPN 3
30610: END
// every 0 0$1 trigger s30 do var i , tmp ;
30611: LD_EXP 109
30615: IFFALSE 30684
30617: GO 30619
30619: DISABLE
30620: LD_INT 0
30622: PPUSH
30623: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30624: LD_ADDR_VAR 0 2
30628: PUSH
30629: LD_INT 22
30631: PUSH
30632: LD_OWVAR 2
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PPUSH
30641: CALL_OW 69
30645: ST_TO_ADDR
// if not tmp then
30646: LD_VAR 0 2
30650: NOT
30651: IFFALSE 30655
// exit ;
30653: GO 30684
// for i in tmp do
30655: LD_ADDR_VAR 0 1
30659: PUSH
30660: LD_VAR 0 2
30664: PUSH
30665: FOR_IN
30666: IFFALSE 30682
// SetLives ( i , 300 ) ;
30668: LD_VAR 0 1
30672: PPUSH
30673: LD_INT 300
30675: PPUSH
30676: CALL_OW 234
30680: GO 30665
30682: POP
30683: POP
// end ;
30684: PPOPN 2
30686: END
// every 0 0$1 trigger s60 do var i , tmp ;
30687: LD_EXP 110
30691: IFFALSE 30760
30693: GO 30695
30695: DISABLE
30696: LD_INT 0
30698: PPUSH
30699: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30700: LD_ADDR_VAR 0 2
30704: PUSH
30705: LD_INT 22
30707: PUSH
30708: LD_OWVAR 2
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PPUSH
30717: CALL_OW 69
30721: ST_TO_ADDR
// if not tmp then
30722: LD_VAR 0 2
30726: NOT
30727: IFFALSE 30731
// exit ;
30729: GO 30760
// for i in tmp do
30731: LD_ADDR_VAR 0 1
30735: PUSH
30736: LD_VAR 0 2
30740: PUSH
30741: FOR_IN
30742: IFFALSE 30758
// SetLives ( i , 600 ) ;
30744: LD_VAR 0 1
30748: PPUSH
30749: LD_INT 600
30751: PPUSH
30752: CALL_OW 234
30756: GO 30741
30758: POP
30759: POP
// end ;
30760: PPOPN 2
30762: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30763: LD_INT 0
30765: PPUSH
// case cmd of 301 :
30766: LD_VAR 0 1
30770: PUSH
30771: LD_INT 301
30773: DOUBLE
30774: EQUAL
30775: IFTRUE 30779
30777: GO 30811
30779: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30780: LD_VAR 0 6
30784: PPUSH
30785: LD_VAR 0 7
30789: PPUSH
30790: LD_VAR 0 8
30794: PPUSH
30795: LD_VAR 0 4
30799: PPUSH
30800: LD_VAR 0 5
30804: PPUSH
30805: CALL 32024 0 5
30809: GO 30932
30811: LD_INT 302
30813: DOUBLE
30814: EQUAL
30815: IFTRUE 30819
30817: GO 30856
30819: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30820: LD_VAR 0 6
30824: PPUSH
30825: LD_VAR 0 7
30829: PPUSH
30830: LD_VAR 0 8
30834: PPUSH
30835: LD_VAR 0 9
30839: PPUSH
30840: LD_VAR 0 4
30844: PPUSH
30845: LD_VAR 0 5
30849: PPUSH
30850: CALL 32115 0 6
30854: GO 30932
30856: LD_INT 303
30858: DOUBLE
30859: EQUAL
30860: IFTRUE 30864
30862: GO 30901
30864: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30865: LD_VAR 0 6
30869: PPUSH
30870: LD_VAR 0 7
30874: PPUSH
30875: LD_VAR 0 8
30879: PPUSH
30880: LD_VAR 0 9
30884: PPUSH
30885: LD_VAR 0 4
30889: PPUSH
30890: LD_VAR 0 5
30894: PPUSH
30895: CALL 30937 0 6
30899: GO 30932
30901: LD_INT 304
30903: DOUBLE
30904: EQUAL
30905: IFTRUE 30909
30907: GO 30931
30909: POP
// hHackTeleport ( unit , x , y ) ; end ;
30910: LD_VAR 0 2
30914: PPUSH
30915: LD_VAR 0 4
30919: PPUSH
30920: LD_VAR 0 5
30924: PPUSH
30925: CALL 32708 0 3
30929: GO 30932
30931: POP
// end ;
30932: LD_VAR 0 12
30936: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30937: LD_INT 0
30939: PPUSH
30940: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30941: LD_VAR 0 1
30945: PUSH
30946: LD_INT 1
30948: LESS
30949: IFTRUE 30961
30951: PUSH
30952: LD_VAR 0 1
30956: PUSH
30957: LD_INT 3
30959: GREATER
30960: OR
30961: IFTRUE 30979
30963: PUSH
30964: LD_VAR 0 5
30968: PPUSH
30969: LD_VAR 0 6
30973: PPUSH
30974: CALL_OW 428
30978: OR
30979: IFFALSE 30983
// exit ;
30981: GO 31711
// uc_side := your_side ;
30983: LD_ADDR_OWVAR 20
30987: PUSH
30988: LD_OWVAR 2
30992: ST_TO_ADDR
// uc_nation := nation ;
30993: LD_ADDR_OWVAR 21
30997: PUSH
30998: LD_VAR 0 1
31002: ST_TO_ADDR
// bc_level = 1 ;
31003: LD_ADDR_OWVAR 43
31007: PUSH
31008: LD_INT 1
31010: ST_TO_ADDR
// case btype of 1 :
31011: LD_VAR 0 2
31015: PUSH
31016: LD_INT 1
31018: DOUBLE
31019: EQUAL
31020: IFTRUE 31024
31022: GO 31035
31024: POP
// bc_type := b_depot ; 2 :
31025: LD_ADDR_OWVAR 42
31029: PUSH
31030: LD_INT 0
31032: ST_TO_ADDR
31033: GO 31655
31035: LD_INT 2
31037: DOUBLE
31038: EQUAL
31039: IFTRUE 31043
31041: GO 31054
31043: POP
// bc_type := b_warehouse ; 3 :
31044: LD_ADDR_OWVAR 42
31048: PUSH
31049: LD_INT 1
31051: ST_TO_ADDR
31052: GO 31655
31054: LD_INT 3
31056: DOUBLE
31057: EQUAL
31058: IFTRUE 31062
31060: GO 31073
31062: POP
// bc_type := b_lab ; 4 .. 9 :
31063: LD_ADDR_OWVAR 42
31067: PUSH
31068: LD_INT 6
31070: ST_TO_ADDR
31071: GO 31655
31073: LD_INT 4
31075: DOUBLE
31076: GREATEREQUAL
31077: IFFALSE 31085
31079: LD_INT 9
31081: DOUBLE
31082: LESSEQUAL
31083: IFTRUE 31087
31085: GO 31147
31087: POP
// begin bc_type := b_lab_half ;
31088: LD_ADDR_OWVAR 42
31092: PUSH
31093: LD_INT 7
31095: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31096: LD_ADDR_OWVAR 44
31100: PUSH
31101: LD_INT 10
31103: PUSH
31104: LD_INT 11
31106: PUSH
31107: LD_INT 12
31109: PUSH
31110: LD_INT 15
31112: PUSH
31113: LD_INT 14
31115: PUSH
31116: LD_INT 13
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: PUSH
31127: LD_VAR 0 2
31131: PUSH
31132: LD_INT 3
31134: MINUS
31135: ARRAY
31136: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
31137: LD_ADDR_OWVAR 45
31141: PUSH
31142: LD_INT 9
31144: ST_TO_ADDR
// end ; 10 .. 13 :
31145: GO 31655
31147: LD_INT 10
31149: DOUBLE
31150: GREATEREQUAL
31151: IFFALSE 31159
31153: LD_INT 13
31155: DOUBLE
31156: LESSEQUAL
31157: IFTRUE 31161
31159: GO 31238
31161: POP
// begin bc_type := b_lab_full ;
31162: LD_ADDR_OWVAR 42
31166: PUSH
31167: LD_INT 8
31169: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31170: LD_ADDR_OWVAR 44
31174: PUSH
31175: LD_INT 10
31177: PUSH
31178: LD_INT 12
31180: PUSH
31181: LD_INT 14
31183: PUSH
31184: LD_INT 13
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: PUSH
31193: LD_VAR 0 2
31197: PUSH
31198: LD_INT 9
31200: MINUS
31201: ARRAY
31202: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31203: LD_ADDR_OWVAR 45
31207: PUSH
31208: LD_INT 11
31210: PUSH
31211: LD_INT 15
31213: PUSH
31214: LD_INT 12
31216: PUSH
31217: LD_INT 15
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: PUSH
31226: LD_VAR 0 2
31230: PUSH
31231: LD_INT 9
31233: MINUS
31234: ARRAY
31235: ST_TO_ADDR
// end ; 14 :
31236: GO 31655
31238: LD_INT 14
31240: DOUBLE
31241: EQUAL
31242: IFTRUE 31246
31244: GO 31257
31246: POP
// bc_type := b_workshop ; 15 :
31247: LD_ADDR_OWVAR 42
31251: PUSH
31252: LD_INT 2
31254: ST_TO_ADDR
31255: GO 31655
31257: LD_INT 15
31259: DOUBLE
31260: EQUAL
31261: IFTRUE 31265
31263: GO 31276
31265: POP
// bc_type := b_factory ; 16 :
31266: LD_ADDR_OWVAR 42
31270: PUSH
31271: LD_INT 3
31273: ST_TO_ADDR
31274: GO 31655
31276: LD_INT 16
31278: DOUBLE
31279: EQUAL
31280: IFTRUE 31284
31282: GO 31295
31284: POP
// bc_type := b_ext_gun ; 17 :
31285: LD_ADDR_OWVAR 42
31289: PUSH
31290: LD_INT 17
31292: ST_TO_ADDR
31293: GO 31655
31295: LD_INT 17
31297: DOUBLE
31298: EQUAL
31299: IFTRUE 31303
31301: GO 31331
31303: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31304: LD_ADDR_OWVAR 42
31308: PUSH
31309: LD_INT 19
31311: PUSH
31312: LD_INT 23
31314: PUSH
31315: LD_INT 19
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: LIST
31322: PUSH
31323: LD_VAR 0 1
31327: ARRAY
31328: ST_TO_ADDR
31329: GO 31655
31331: LD_INT 18
31333: DOUBLE
31334: EQUAL
31335: IFTRUE 31339
31337: GO 31350
31339: POP
// bc_type := b_ext_radar ; 19 :
31340: LD_ADDR_OWVAR 42
31344: PUSH
31345: LD_INT 20
31347: ST_TO_ADDR
31348: GO 31655
31350: LD_INT 19
31352: DOUBLE
31353: EQUAL
31354: IFTRUE 31358
31356: GO 31369
31358: POP
// bc_type := b_ext_radio ; 20 :
31359: LD_ADDR_OWVAR 42
31363: PUSH
31364: LD_INT 22
31366: ST_TO_ADDR
31367: GO 31655
31369: LD_INT 20
31371: DOUBLE
31372: EQUAL
31373: IFTRUE 31377
31375: GO 31388
31377: POP
// bc_type := b_ext_siberium ; 21 :
31378: LD_ADDR_OWVAR 42
31382: PUSH
31383: LD_INT 21
31385: ST_TO_ADDR
31386: GO 31655
31388: LD_INT 21
31390: DOUBLE
31391: EQUAL
31392: IFTRUE 31396
31394: GO 31407
31396: POP
// bc_type := b_ext_computer ; 22 :
31397: LD_ADDR_OWVAR 42
31401: PUSH
31402: LD_INT 24
31404: ST_TO_ADDR
31405: GO 31655
31407: LD_INT 22
31409: DOUBLE
31410: EQUAL
31411: IFTRUE 31415
31413: GO 31426
31415: POP
// bc_type := b_ext_track ; 23 :
31416: LD_ADDR_OWVAR 42
31420: PUSH
31421: LD_INT 16
31423: ST_TO_ADDR
31424: GO 31655
31426: LD_INT 23
31428: DOUBLE
31429: EQUAL
31430: IFTRUE 31434
31432: GO 31445
31434: POP
// bc_type := b_ext_laser ; 24 :
31435: LD_ADDR_OWVAR 42
31439: PUSH
31440: LD_INT 25
31442: ST_TO_ADDR
31443: GO 31655
31445: LD_INT 24
31447: DOUBLE
31448: EQUAL
31449: IFTRUE 31453
31451: GO 31464
31453: POP
// bc_type := b_control_tower ; 25 :
31454: LD_ADDR_OWVAR 42
31458: PUSH
31459: LD_INT 36
31461: ST_TO_ADDR
31462: GO 31655
31464: LD_INT 25
31466: DOUBLE
31467: EQUAL
31468: IFTRUE 31472
31470: GO 31483
31472: POP
// bc_type := b_breastwork ; 26 :
31473: LD_ADDR_OWVAR 42
31477: PUSH
31478: LD_INT 31
31480: ST_TO_ADDR
31481: GO 31655
31483: LD_INT 26
31485: DOUBLE
31486: EQUAL
31487: IFTRUE 31491
31489: GO 31502
31491: POP
// bc_type := b_bunker ; 27 :
31492: LD_ADDR_OWVAR 42
31496: PUSH
31497: LD_INT 32
31499: ST_TO_ADDR
31500: GO 31655
31502: LD_INT 27
31504: DOUBLE
31505: EQUAL
31506: IFTRUE 31510
31508: GO 31521
31510: POP
// bc_type := b_turret ; 28 :
31511: LD_ADDR_OWVAR 42
31515: PUSH
31516: LD_INT 33
31518: ST_TO_ADDR
31519: GO 31655
31521: LD_INT 28
31523: DOUBLE
31524: EQUAL
31525: IFTRUE 31529
31527: GO 31540
31529: POP
// bc_type := b_armoury ; 29 :
31530: LD_ADDR_OWVAR 42
31534: PUSH
31535: LD_INT 4
31537: ST_TO_ADDR
31538: GO 31655
31540: LD_INT 29
31542: DOUBLE
31543: EQUAL
31544: IFTRUE 31548
31546: GO 31559
31548: POP
// bc_type := b_barracks ; 30 :
31549: LD_ADDR_OWVAR 42
31553: PUSH
31554: LD_INT 5
31556: ST_TO_ADDR
31557: GO 31655
31559: LD_INT 30
31561: DOUBLE
31562: EQUAL
31563: IFTRUE 31567
31565: GO 31578
31567: POP
// bc_type := b_solar_power ; 31 :
31568: LD_ADDR_OWVAR 42
31572: PUSH
31573: LD_INT 27
31575: ST_TO_ADDR
31576: GO 31655
31578: LD_INT 31
31580: DOUBLE
31581: EQUAL
31582: IFTRUE 31586
31584: GO 31597
31586: POP
// bc_type := b_oil_power ; 32 :
31587: LD_ADDR_OWVAR 42
31591: PUSH
31592: LD_INT 26
31594: ST_TO_ADDR
31595: GO 31655
31597: LD_INT 32
31599: DOUBLE
31600: EQUAL
31601: IFTRUE 31605
31603: GO 31616
31605: POP
// bc_type := b_siberite_power ; 33 :
31606: LD_ADDR_OWVAR 42
31610: PUSH
31611: LD_INT 28
31613: ST_TO_ADDR
31614: GO 31655
31616: LD_INT 33
31618: DOUBLE
31619: EQUAL
31620: IFTRUE 31624
31622: GO 31635
31624: POP
// bc_type := b_oil_mine ; 34 :
31625: LD_ADDR_OWVAR 42
31629: PUSH
31630: LD_INT 29
31632: ST_TO_ADDR
31633: GO 31655
31635: LD_INT 34
31637: DOUBLE
31638: EQUAL
31639: IFTRUE 31643
31641: GO 31654
31643: POP
// bc_type := b_siberite_mine ; end ;
31644: LD_ADDR_OWVAR 42
31648: PUSH
31649: LD_INT 30
31651: ST_TO_ADDR
31652: GO 31655
31654: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31655: LD_ADDR_VAR 0 8
31659: PUSH
31660: LD_VAR 0 5
31664: PPUSH
31665: LD_VAR 0 6
31669: PPUSH
31670: LD_VAR 0 3
31674: PPUSH
31675: CALL_OW 47
31679: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31680: LD_OWVAR 42
31684: PUSH
31685: LD_INT 32
31687: PUSH
31688: LD_INT 33
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: IN
31695: IFFALSE 31711
// PlaceWeaponTurret ( b , weapon ) ;
31697: LD_VAR 0 8
31701: PPUSH
31702: LD_VAR 0 4
31706: PPUSH
31707: CALL_OW 431
// end ;
31711: LD_VAR 0 7
31715: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31716: LD_INT 0
31718: PPUSH
31719: PPUSH
31720: PPUSH
31721: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31722: LD_ADDR_VAR 0 4
31726: PUSH
31727: LD_INT 22
31729: PUSH
31730: LD_OWVAR 2
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 2
31741: PUSH
31742: LD_INT 30
31744: PUSH
31745: LD_INT 0
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 30
31754: PUSH
31755: LD_INT 1
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: LIST
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PPUSH
31771: CALL_OW 69
31775: ST_TO_ADDR
// if not tmp then
31776: LD_VAR 0 4
31780: NOT
31781: IFFALSE 31785
// exit ;
31783: GO 31844
// for i in tmp do
31785: LD_ADDR_VAR 0 2
31789: PUSH
31790: LD_VAR 0 4
31794: PUSH
31795: FOR_IN
31796: IFFALSE 31842
// for j = 1 to 3 do
31798: LD_ADDR_VAR 0 3
31802: PUSH
31803: DOUBLE
31804: LD_INT 1
31806: DEC
31807: ST_TO_ADDR
31808: LD_INT 3
31810: PUSH
31811: FOR_TO
31812: IFFALSE 31838
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31814: LD_VAR 0 2
31818: PPUSH
31819: CALL_OW 274
31823: PPUSH
31824: LD_VAR 0 3
31828: PPUSH
31829: LD_INT 99999
31831: PPUSH
31832: CALL_OW 277
31836: GO 31811
31838: POP
31839: POP
31840: GO 31795
31842: POP
31843: POP
// end ;
31844: LD_VAR 0 1
31848: RET
// export function hHackSetLevel10 ; var i , j ; begin
31849: LD_INT 0
31851: PPUSH
31852: PPUSH
31853: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31854: LD_ADDR_VAR 0 2
31858: PUSH
31859: LD_INT 21
31861: PUSH
31862: LD_INT 1
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PPUSH
31869: CALL_OW 69
31873: PUSH
31874: FOR_IN
31875: IFFALSE 31927
// if IsSelected ( i ) then
31877: LD_VAR 0 2
31881: PPUSH
31882: CALL_OW 306
31886: IFFALSE 31925
// begin for j := 1 to 4 do
31888: LD_ADDR_VAR 0 3
31892: PUSH
31893: DOUBLE
31894: LD_INT 1
31896: DEC
31897: ST_TO_ADDR
31898: LD_INT 4
31900: PUSH
31901: FOR_TO
31902: IFFALSE 31923
// SetSkill ( i , j , 10 ) ;
31904: LD_VAR 0 2
31908: PPUSH
31909: LD_VAR 0 3
31913: PPUSH
31914: LD_INT 10
31916: PPUSH
31917: CALL_OW 237
31921: GO 31901
31923: POP
31924: POP
// end ;
31925: GO 31874
31927: POP
31928: POP
// end ;
31929: LD_VAR 0 1
31933: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31934: LD_INT 0
31936: PPUSH
31937: PPUSH
31938: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31939: LD_ADDR_VAR 0 2
31943: PUSH
31944: LD_INT 22
31946: PUSH
31947: LD_OWVAR 2
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 21
31958: PUSH
31959: LD_INT 1
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PPUSH
31970: CALL_OW 69
31974: PUSH
31975: FOR_IN
31976: IFFALSE 32017
// begin for j := 1 to 4 do
31978: LD_ADDR_VAR 0 3
31982: PUSH
31983: DOUBLE
31984: LD_INT 1
31986: DEC
31987: ST_TO_ADDR
31988: LD_INT 4
31990: PUSH
31991: FOR_TO
31992: IFFALSE 32013
// SetSkill ( i , j , 10 ) ;
31994: LD_VAR 0 2
31998: PPUSH
31999: LD_VAR 0 3
32003: PPUSH
32004: LD_INT 10
32006: PPUSH
32007: CALL_OW 237
32011: GO 31991
32013: POP
32014: POP
// end ;
32015: GO 31975
32017: POP
32018: POP
// end ;
32019: LD_VAR 0 1
32023: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32024: LD_INT 0
32026: PPUSH
// uc_side := your_side ;
32027: LD_ADDR_OWVAR 20
32031: PUSH
32032: LD_OWVAR 2
32036: ST_TO_ADDR
// uc_nation := nation ;
32037: LD_ADDR_OWVAR 21
32041: PUSH
32042: LD_VAR 0 1
32046: ST_TO_ADDR
// InitHc ;
32047: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32051: LD_INT 0
32053: PPUSH
32054: LD_VAR 0 2
32058: PPUSH
32059: LD_VAR 0 3
32063: PPUSH
32064: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32068: LD_VAR 0 4
32072: PPUSH
32073: LD_VAR 0 5
32077: PPUSH
32078: CALL_OW 428
32082: PUSH
32083: LD_INT 0
32085: EQUAL
32086: IFFALSE 32110
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32088: CALL_OW 44
32092: PPUSH
32093: LD_VAR 0 4
32097: PPUSH
32098: LD_VAR 0 5
32102: PPUSH
32103: LD_INT 1
32105: PPUSH
32106: CALL_OW 48
// end ;
32110: LD_VAR 0 6
32114: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32115: LD_INT 0
32117: PPUSH
32118: PPUSH
// uc_side := your_side ;
32119: LD_ADDR_OWVAR 20
32123: PUSH
32124: LD_OWVAR 2
32128: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32129: LD_VAR 0 1
32133: PUSH
32134: LD_INT 1
32136: PUSH
32137: LD_INT 2
32139: PUSH
32140: LD_INT 3
32142: PUSH
32143: LD_INT 4
32145: PUSH
32146: LD_INT 5
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: IN
32156: IFFALSE 32168
// uc_nation := nation_american else
32158: LD_ADDR_OWVAR 21
32162: PUSH
32163: LD_INT 1
32165: ST_TO_ADDR
32166: GO 32211
// if chassis in [ 11 , 12 , 13 , 14 ] then
32168: LD_VAR 0 1
32172: PUSH
32173: LD_INT 11
32175: PUSH
32176: LD_INT 12
32178: PUSH
32179: LD_INT 13
32181: PUSH
32182: LD_INT 14
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: IN
32191: IFFALSE 32203
// uc_nation := nation_arabian else
32193: LD_ADDR_OWVAR 21
32197: PUSH
32198: LD_INT 2
32200: ST_TO_ADDR
32201: GO 32211
// uc_nation := nation_russian ;
32203: LD_ADDR_OWVAR 21
32207: PUSH
32208: LD_INT 3
32210: ST_TO_ADDR
// vc_chassis := chassis ;
32211: LD_ADDR_OWVAR 37
32215: PUSH
32216: LD_VAR 0 1
32220: ST_TO_ADDR
// vc_engine := engine ;
32221: LD_ADDR_OWVAR 39
32225: PUSH
32226: LD_VAR 0 2
32230: ST_TO_ADDR
// vc_control := control ;
32231: LD_ADDR_OWVAR 38
32235: PUSH
32236: LD_VAR 0 3
32240: ST_TO_ADDR
// vc_weapon := weapon ;
32241: LD_ADDR_OWVAR 40
32245: PUSH
32246: LD_VAR 0 4
32250: ST_TO_ADDR
// un := CreateVehicle ;
32251: LD_ADDR_VAR 0 8
32255: PUSH
32256: CALL_OW 45
32260: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32261: LD_VAR 0 8
32265: PPUSH
32266: LD_INT 0
32268: PPUSH
32269: LD_INT 5
32271: PPUSH
32272: CALL_OW 12
32276: PPUSH
32277: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32281: LD_VAR 0 8
32285: PPUSH
32286: LD_VAR 0 5
32290: PPUSH
32291: LD_VAR 0 6
32295: PPUSH
32296: LD_INT 1
32298: PPUSH
32299: CALL_OW 48
// end ;
32303: LD_VAR 0 7
32307: RET
// export hInvincible ; every 1 do
32308: GO 32310
32310: DISABLE
// hInvincible := [ ] ;
32311: LD_ADDR_EXP 111
32315: PUSH
32316: EMPTY
32317: ST_TO_ADDR
32318: END
// every 10 do var i ;
32319: GO 32321
32321: DISABLE
32322: LD_INT 0
32324: PPUSH
// begin enable ;
32325: ENABLE
// if not hInvincible then
32326: LD_EXP 111
32330: NOT
32331: IFFALSE 32335
// exit ;
32333: GO 32379
// for i in hInvincible do
32335: LD_ADDR_VAR 0 1
32339: PUSH
32340: LD_EXP 111
32344: PUSH
32345: FOR_IN
32346: IFFALSE 32377
// if GetLives ( i ) < 1000 then
32348: LD_VAR 0 1
32352: PPUSH
32353: CALL_OW 256
32357: PUSH
32358: LD_INT 1000
32360: LESS
32361: IFFALSE 32375
// SetLives ( i , 1000 ) ;
32363: LD_VAR 0 1
32367: PPUSH
32368: LD_INT 1000
32370: PPUSH
32371: CALL_OW 234
32375: GO 32345
32377: POP
32378: POP
// end ;
32379: PPOPN 1
32381: END
// export function hHackInvincible ; var i ; begin
32382: LD_INT 0
32384: PPUSH
32385: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32386: LD_ADDR_VAR 0 2
32390: PUSH
32391: LD_INT 2
32393: PUSH
32394: LD_INT 21
32396: PUSH
32397: LD_INT 1
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PUSH
32404: LD_INT 21
32406: PUSH
32407: LD_INT 2
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: LIST
32418: PPUSH
32419: CALL_OW 69
32423: PUSH
32424: FOR_IN
32425: IFFALSE 32486
// if IsSelected ( i ) then
32427: LD_VAR 0 2
32431: PPUSH
32432: CALL_OW 306
32436: IFFALSE 32484
// begin if i in hInvincible then
32438: LD_VAR 0 2
32442: PUSH
32443: LD_EXP 111
32447: IN
32448: IFFALSE 32468
// hInvincible := hInvincible diff i else
32450: LD_ADDR_EXP 111
32454: PUSH
32455: LD_EXP 111
32459: PUSH
32460: LD_VAR 0 2
32464: DIFF
32465: ST_TO_ADDR
32466: GO 32484
// hInvincible := hInvincible union i ;
32468: LD_ADDR_EXP 111
32472: PUSH
32473: LD_EXP 111
32477: PUSH
32478: LD_VAR 0 2
32482: UNION
32483: ST_TO_ADDR
// end ;
32484: GO 32424
32486: POP
32487: POP
// end ;
32488: LD_VAR 0 1
32492: RET
// export function hHackInvisible ; var i , j ; begin
32493: LD_INT 0
32495: PPUSH
32496: PPUSH
32497: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32498: LD_ADDR_VAR 0 2
32502: PUSH
32503: LD_INT 21
32505: PUSH
32506: LD_INT 1
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PPUSH
32513: CALL_OW 69
32517: PUSH
32518: FOR_IN
32519: IFFALSE 32543
// if IsSelected ( i ) then
32521: LD_VAR 0 2
32525: PPUSH
32526: CALL_OW 306
32530: IFFALSE 32541
// ComForceInvisible ( i ) ;
32532: LD_VAR 0 2
32536: PPUSH
32537: CALL_OW 496
32541: GO 32518
32543: POP
32544: POP
// end ;
32545: LD_VAR 0 1
32549: RET
// export function hHackChangeYourSide ; begin
32550: LD_INT 0
32552: PPUSH
// if your_side = 8 then
32553: LD_OWVAR 2
32557: PUSH
32558: LD_INT 8
32560: EQUAL
32561: IFFALSE 32573
// your_side := 0 else
32563: LD_ADDR_OWVAR 2
32567: PUSH
32568: LD_INT 0
32570: ST_TO_ADDR
32571: GO 32587
// your_side := your_side + 1 ;
32573: LD_ADDR_OWVAR 2
32577: PUSH
32578: LD_OWVAR 2
32582: PUSH
32583: LD_INT 1
32585: PLUS
32586: ST_TO_ADDR
// end ;
32587: LD_VAR 0 1
32591: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32592: LD_INT 0
32594: PPUSH
32595: PPUSH
32596: PPUSH
// for i in all_units do
32597: LD_ADDR_VAR 0 2
32601: PUSH
32602: LD_OWVAR 3
32606: PUSH
32607: FOR_IN
32608: IFFALSE 32686
// if IsSelected ( i ) then
32610: LD_VAR 0 2
32614: PPUSH
32615: CALL_OW 306
32619: IFFALSE 32684
// begin j := GetSide ( i ) ;
32621: LD_ADDR_VAR 0 3
32625: PUSH
32626: LD_VAR 0 2
32630: PPUSH
32631: CALL_OW 255
32635: ST_TO_ADDR
// if j = 8 then
32636: LD_VAR 0 3
32640: PUSH
32641: LD_INT 8
32643: EQUAL
32644: IFFALSE 32656
// j := 0 else
32646: LD_ADDR_VAR 0 3
32650: PUSH
32651: LD_INT 0
32653: ST_TO_ADDR
32654: GO 32670
// j := j + 1 ;
32656: LD_ADDR_VAR 0 3
32660: PUSH
32661: LD_VAR 0 3
32665: PUSH
32666: LD_INT 1
32668: PLUS
32669: ST_TO_ADDR
// SetSide ( i , j ) ;
32670: LD_VAR 0 2
32674: PPUSH
32675: LD_VAR 0 3
32679: PPUSH
32680: CALL_OW 235
// end ;
32684: GO 32607
32686: POP
32687: POP
// end ;
32688: LD_VAR 0 1
32692: RET
// export function hHackFog ; begin
32693: LD_INT 0
32695: PPUSH
// FogOff ( true ) ;
32696: LD_INT 1
32698: PPUSH
32699: CALL_OW 344
// end ;
32703: LD_VAR 0 1
32707: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32708: LD_INT 0
32710: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32711: LD_VAR 0 1
32715: PPUSH
32716: LD_VAR 0 2
32720: PPUSH
32721: LD_VAR 0 3
32725: PPUSH
32726: LD_INT 1
32728: PPUSH
32729: LD_INT 1
32731: PPUSH
32732: CALL_OW 483
// CenterOnXY ( x , y ) ;
32736: LD_VAR 0 2
32740: PPUSH
32741: LD_VAR 0 3
32745: PPUSH
32746: CALL_OW 84
// end ;
32750: LD_VAR 0 4
32754: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
32755: LD_INT 0
32757: PPUSH
32758: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
32759: LD_VAR 0 1
32763: NOT
32764: IFTRUE 32783
32766: PUSH
32767: LD_VAR 0 2
32771: PPUSH
32772: LD_VAR 0 3
32776: PPUSH
32777: CALL_OW 488
32781: NOT
32782: OR
32783: IFTRUE 32818
32785: PUSH
32786: LD_VAR 0 1
32790: PPUSH
32791: CALL_OW 266
32795: PUSH
32796: LD_INT 3
32798: NONEQUAL
32799: IFFALSE 32817
32801: PUSH
32802: LD_VAR 0 1
32806: PPUSH
32807: CALL_OW 247
32811: PUSH
32812: LD_INT 1
32814: EQUAL
32815: NOT
32816: AND
32817: OR
32818: IFFALSE 32822
// exit ;
32820: GO 33104
// if GetType ( factory ) = unit_human then
32822: LD_VAR 0 1
32826: PPUSH
32827: CALL_OW 247
32831: PUSH
32832: LD_INT 1
32834: EQUAL
32835: IFFALSE 32852
// factory := IsInUnit ( factory ) ;
32837: LD_ADDR_VAR 0 1
32841: PUSH
32842: LD_VAR 0 1
32846: PPUSH
32847: CALL_OW 310
32851: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
32852: LD_VAR 0 1
32856: PPUSH
32857: CALL_OW 266
32861: PUSH
32862: LD_INT 3
32864: NONEQUAL
32865: IFFALSE 32869
// exit ;
32867: GO 33104
// for i := 1 to Count ( factoryWaypoints ) do
32869: LD_ADDR_VAR 0 5
32873: PUSH
32874: DOUBLE
32875: LD_INT 1
32877: DEC
32878: ST_TO_ADDR
32879: LD_EXP 112
32883: PPUSH
32884: CALL 43071 0 1
32888: PUSH
32889: FOR_TO
32890: IFFALSE 33052
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
32892: LD_VAR 0 2
32896: PPUSH
32897: LD_VAR 0 3
32901: PPUSH
32902: CALL_OW 428
32906: PUSH
32907: LD_EXP 112
32911: PUSH
32912: LD_VAR 0 5
32916: ARRAY
32917: PUSH
32918: LD_INT 2
32920: ARRAY
32921: EQUAL
32922: IFFALSE 32954
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
32924: LD_ADDR_EXP 112
32928: PUSH
32929: LD_EXP 112
32933: PPUSH
32934: LD_VAR 0 5
32938: PPUSH
32939: CALL_OW 3
32943: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32944: CALL 33109 0 0
// exit ;
32948: POP
32949: POP
32950: GO 33104
// end else
32952: GO 33050
// if factory = factoryWaypoints [ i ] [ 2 ] then
32954: LD_VAR 0 1
32958: PUSH
32959: LD_EXP 112
32963: PUSH
32964: LD_VAR 0 5
32968: ARRAY
32969: PUSH
32970: LD_INT 2
32972: ARRAY
32973: EQUAL
32974: IFFALSE 33050
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
32976: LD_ADDR_EXP 112
32980: PUSH
32981: LD_EXP 112
32985: PPUSH
32986: LD_VAR 0 5
32990: PPUSH
32991: CALL_OW 3
32995: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
32996: LD_ADDR_EXP 112
33000: PUSH
33001: LD_EXP 112
33005: PPUSH
33006: LD_VAR 0 1
33010: PPUSH
33011: CALL_OW 255
33015: PUSH
33016: LD_VAR 0 1
33020: PUSH
33021: LD_VAR 0 2
33025: PUSH
33026: LD_VAR 0 3
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: PPUSH
33037: CALL 79047 0 2
33041: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33042: CALL 33109 0 0
// exit ;
33046: POP
33047: POP
33048: GO 33104
// end ; end ;
33050: GO 32889
33052: POP
33053: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
33054: LD_ADDR_EXP 112
33058: PUSH
33059: LD_EXP 112
33063: PPUSH
33064: LD_VAR 0 1
33068: PPUSH
33069: CALL_OW 255
33073: PUSH
33074: LD_VAR 0 1
33078: PUSH
33079: LD_VAR 0 2
33083: PUSH
33084: LD_VAR 0 3
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: PPUSH
33095: CALL 79047 0 2
33099: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33100: CALL 33109 0 0
// end ;
33104: LD_VAR 0 4
33108: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33109: LD_INT 0
33111: PPUSH
33112: PPUSH
33113: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33114: LD_STRING resetFactoryWaypoint();
33116: PPUSH
33117: CALL_OW 559
// if factoryWaypoints then
33121: LD_EXP 112
33125: IFFALSE 33246
// begin list := factoryWaypoints ;
33127: LD_ADDR_VAR 0 3
33131: PUSH
33132: LD_EXP 112
33136: ST_TO_ADDR
// for i := 1 to list do
33137: LD_ADDR_VAR 0 2
33141: PUSH
33142: DOUBLE
33143: LD_INT 1
33145: DEC
33146: ST_TO_ADDR
33147: LD_VAR 0 3
33151: PUSH
33152: FOR_TO
33153: IFFALSE 33244
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33155: LD_STRING setFactoryWaypointXY(
33157: PUSH
33158: LD_VAR 0 3
33162: PUSH
33163: LD_VAR 0 2
33167: ARRAY
33168: PUSH
33169: LD_INT 1
33171: ARRAY
33172: STR
33173: PUSH
33174: LD_STRING ,
33176: STR
33177: PUSH
33178: LD_VAR 0 3
33182: PUSH
33183: LD_VAR 0 2
33187: ARRAY
33188: PUSH
33189: LD_INT 2
33191: ARRAY
33192: STR
33193: PUSH
33194: LD_STRING ,
33196: STR
33197: PUSH
33198: LD_VAR 0 3
33202: PUSH
33203: LD_VAR 0 2
33207: ARRAY
33208: PUSH
33209: LD_INT 3
33211: ARRAY
33212: STR
33213: PUSH
33214: LD_STRING ,
33216: STR
33217: PUSH
33218: LD_VAR 0 3
33222: PUSH
33223: LD_VAR 0 2
33227: ARRAY
33228: PUSH
33229: LD_INT 4
33231: ARRAY
33232: STR
33233: PUSH
33234: LD_STRING )
33236: STR
33237: PPUSH
33238: CALL_OW 559
33242: GO 33152
33244: POP
33245: POP
// end ; end ;
33246: LD_VAR 0 1
33250: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33251: LD_INT 0
33253: PPUSH
// if HexInfo ( x , y ) = warehouse then
33254: LD_VAR 0 2
33258: PPUSH
33259: LD_VAR 0 3
33263: PPUSH
33264: CALL_OW 428
33268: PUSH
33269: LD_VAR 0 1
33273: EQUAL
33274: IFFALSE 33301
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33276: LD_ADDR_EXP 114
33280: PUSH
33281: LD_EXP 114
33285: PPUSH
33286: LD_VAR 0 1
33290: PPUSH
33291: LD_INT 0
33293: PPUSH
33294: CALL_OW 1
33298: ST_TO_ADDR
33299: GO 33352
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33301: LD_ADDR_EXP 114
33305: PUSH
33306: LD_EXP 114
33310: PPUSH
33311: LD_VAR 0 1
33315: PPUSH
33316: LD_VAR 0 1
33320: PPUSH
33321: CALL_OW 255
33325: PUSH
33326: LD_VAR 0 1
33330: PUSH
33331: LD_VAR 0 2
33335: PUSH
33336: LD_VAR 0 3
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: PPUSH
33347: CALL_OW 1
33351: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33352: CALL 33361 0 0
// end ;
33356: LD_VAR 0 4
33360: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33361: LD_INT 0
33363: PPUSH
33364: PPUSH
33365: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33366: LD_STRING resetWarehouseGatheringPoints();
33368: PPUSH
33369: CALL_OW 559
// if warehouseGatheringPoints then
33373: LD_EXP 114
33377: IFFALSE 33503
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33379: LD_ADDR_VAR 0 3
33383: PUSH
33384: LD_EXP 114
33388: PPUSH
33389: CALL 82981 0 1
33393: ST_TO_ADDR
// for i := 1 to list do
33394: LD_ADDR_VAR 0 2
33398: PUSH
33399: DOUBLE
33400: LD_INT 1
33402: DEC
33403: ST_TO_ADDR
33404: LD_VAR 0 3
33408: PUSH
33409: FOR_TO
33410: IFFALSE 33501
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33412: LD_STRING setWarehouseGatheringPointXY(
33414: PUSH
33415: LD_VAR 0 3
33419: PUSH
33420: LD_VAR 0 2
33424: ARRAY
33425: PUSH
33426: LD_INT 1
33428: ARRAY
33429: STR
33430: PUSH
33431: LD_STRING ,
33433: STR
33434: PUSH
33435: LD_VAR 0 3
33439: PUSH
33440: LD_VAR 0 2
33444: ARRAY
33445: PUSH
33446: LD_INT 2
33448: ARRAY
33449: STR
33450: PUSH
33451: LD_STRING ,
33453: STR
33454: PUSH
33455: LD_VAR 0 3
33459: PUSH
33460: LD_VAR 0 2
33464: ARRAY
33465: PUSH
33466: LD_INT 3
33468: ARRAY
33469: STR
33470: PUSH
33471: LD_STRING ,
33473: STR
33474: PUSH
33475: LD_VAR 0 3
33479: PUSH
33480: LD_VAR 0 2
33484: ARRAY
33485: PUSH
33486: LD_INT 4
33488: ARRAY
33489: STR
33490: PUSH
33491: LD_STRING )
33493: STR
33494: PPUSH
33495: CALL_OW 559
33499: GO 33409
33501: POP
33502: POP
// end ; end ;
33503: LD_VAR 0 1
33507: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
33508: LD_EXP 114
33512: IFFALSE 34207
33514: GO 33516
33516: DISABLE
33517: LD_INT 0
33519: PPUSH
33520: PPUSH
33521: PPUSH
33522: PPUSH
33523: PPUSH
33524: PPUSH
33525: PPUSH
33526: PPUSH
33527: PPUSH
// begin enable ;
33528: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
33529: LD_ADDR_VAR 0 3
33533: PUSH
33534: LD_EXP 114
33538: PPUSH
33539: CALL 82981 0 1
33543: ST_TO_ADDR
// if not list then
33544: LD_VAR 0 3
33548: NOT
33549: IFFALSE 33553
// exit ;
33551: GO 34207
// for i := 1 to list do
33553: LD_ADDR_VAR 0 1
33557: PUSH
33558: DOUBLE
33559: LD_INT 1
33561: DEC
33562: ST_TO_ADDR
33563: LD_VAR 0 3
33567: PUSH
33568: FOR_TO
33569: IFFALSE 34205
// begin depot := list [ i ] [ 2 ] ;
33571: LD_ADDR_VAR 0 8
33575: PUSH
33576: LD_VAR 0 3
33580: PUSH
33581: LD_VAR 0 1
33585: ARRAY
33586: PUSH
33587: LD_INT 2
33589: ARRAY
33590: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33591: LD_ADDR_VAR 0 5
33595: PUSH
33596: LD_VAR 0 3
33600: PUSH
33601: LD_VAR 0 1
33605: ARRAY
33606: PUSH
33607: LD_INT 1
33609: ARRAY
33610: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33611: LD_VAR 0 8
33615: PPUSH
33616: CALL_OW 301
33620: IFTRUE 33639
33622: PUSH
33623: LD_VAR 0 5
33627: PUSH
33628: LD_VAR 0 8
33632: PPUSH
33633: CALL_OW 255
33637: NONEQUAL
33638: OR
33639: IFFALSE 33668
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
33641: LD_ADDR_EXP 114
33645: PUSH
33646: LD_EXP 114
33650: PPUSH
33651: LD_VAR 0 8
33655: PPUSH
33656: LD_INT 0
33658: PPUSH
33659: CALL_OW 1
33663: ST_TO_ADDR
// exit ;
33664: POP
33665: POP
33666: GO 34207
// end ; x := list [ i ] [ 3 ] ;
33668: LD_ADDR_VAR 0 6
33672: PUSH
33673: LD_VAR 0 3
33677: PUSH
33678: LD_VAR 0 1
33682: ARRAY
33683: PUSH
33684: LD_INT 3
33686: ARRAY
33687: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
33688: LD_ADDR_VAR 0 7
33692: PUSH
33693: LD_VAR 0 3
33697: PUSH
33698: LD_VAR 0 1
33702: ARRAY
33703: PUSH
33704: LD_INT 4
33706: ARRAY
33707: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
33708: LD_ADDR_VAR 0 9
33712: PUSH
33713: LD_VAR 0 6
33717: PPUSH
33718: LD_VAR 0 7
33722: PPUSH
33723: LD_INT 16
33725: PPUSH
33726: CALL 81555 0 3
33730: ST_TO_ADDR
// if not cratesNearbyPoint then
33731: LD_VAR 0 9
33735: NOT
33736: IFFALSE 33742
// exit ;
33738: POP
33739: POP
33740: GO 34207
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
33742: LD_ADDR_VAR 0 4
33746: PUSH
33747: LD_INT 22
33749: PUSH
33750: LD_VAR 0 5
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 3
33761: PUSH
33762: LD_INT 60
33764: PUSH
33765: EMPTY
33766: LIST
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 91
33774: PUSH
33775: LD_VAR 0 8
33779: PUSH
33780: LD_INT 6
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 2
33790: PUSH
33791: LD_INT 25
33793: PUSH
33794: LD_INT 2
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 25
33803: PUSH
33804: LD_INT 16
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: LIST
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: PPUSH
33822: CALL_OW 69
33826: PUSH
33827: LD_VAR 0 8
33831: PPUSH
33832: CALL_OW 313
33836: PPUSH
33837: LD_INT 3
33839: PUSH
33840: LD_INT 60
33842: PUSH
33843: EMPTY
33844: LIST
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 2
33852: PUSH
33853: LD_INT 25
33855: PUSH
33856: LD_INT 2
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 25
33865: PUSH
33866: LD_INT 16
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: LIST
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PPUSH
33882: CALL_OW 72
33886: UNION
33887: ST_TO_ADDR
// if tmp then
33888: LD_VAR 0 4
33892: IFFALSE 33972
// begin tmp := ShrinkArray ( tmp , 3 ) ;
33894: LD_ADDR_VAR 0 4
33898: PUSH
33899: LD_VAR 0 4
33903: PPUSH
33904: LD_INT 3
33906: PPUSH
33907: CALL 79362 0 2
33911: ST_TO_ADDR
// for j in tmp do
33912: LD_ADDR_VAR 0 2
33916: PUSH
33917: LD_VAR 0 4
33921: PUSH
33922: FOR_IN
33923: IFFALSE 33966
// begin if IsInUnit ( j ) then
33925: LD_VAR 0 2
33929: PPUSH
33930: CALL_OW 310
33934: IFFALSE 33945
// ComExit ( j ) ;
33936: LD_VAR 0 2
33940: PPUSH
33941: CALL 79445 0 1
// AddComCollect ( j , x , y ) ;
33945: LD_VAR 0 2
33949: PPUSH
33950: LD_VAR 0 6
33954: PPUSH
33955: LD_VAR 0 7
33959: PPUSH
33960: CALL_OW 177
// end ;
33964: GO 33922
33966: POP
33967: POP
// exit ;
33968: POP
33969: POP
33970: GO 34207
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
33972: LD_ADDR_VAR 0 4
33976: PUSH
33977: LD_INT 22
33979: PUSH
33980: LD_VAR 0 5
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 91
33991: PUSH
33992: LD_VAR 0 8
33996: PUSH
33997: LD_INT 8
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 2
34007: PUSH
34008: LD_INT 34
34010: PUSH
34011: LD_INT 12
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 34
34020: PUSH
34021: LD_INT 51
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 34
34030: PUSH
34031: LD_INT 32
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 34
34040: PUSH
34041: LD_INT 89
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: LIST
34059: PPUSH
34060: CALL_OW 69
34064: ST_TO_ADDR
// if tmp then
34065: LD_VAR 0 4
34069: IFFALSE 34203
// begin for j in tmp do
34071: LD_ADDR_VAR 0 2
34075: PUSH
34076: LD_VAR 0 4
34080: PUSH
34081: FOR_IN
34082: IFFALSE 34201
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34084: LD_VAR 0 2
34088: PPUSH
34089: CALL_OW 262
34093: PUSH
34094: LD_INT 3
34096: EQUAL
34097: IFTRUE 34114
34099: PUSH
34100: LD_VAR 0 2
34104: PPUSH
34105: CALL_OW 261
34109: PUSH
34110: LD_INT 20
34112: GREATER
34113: OR
34114: IFFALSE 34128
34116: PUSH
34117: LD_VAR 0 2
34121: PPUSH
34122: CALL_OW 314
34126: NOT
34127: AND
34128: IFFALSE 34158
34130: PUSH
34131: LD_VAR 0 2
34135: PPUSH
34136: CALL_OW 263
34140: PUSH
34141: LD_INT 1
34143: NONEQUAL
34144: IFTRUE 34157
34146: PUSH
34147: LD_VAR 0 2
34151: PPUSH
34152: CALL_OW 311
34156: OR
34157: AND
34158: IFFALSE 34199
// begin ComCollect ( j , x , y ) ;
34160: LD_VAR 0 2
34164: PPUSH
34165: LD_VAR 0 6
34169: PPUSH
34170: LD_VAR 0 7
34174: PPUSH
34175: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34179: LD_VAR 0 2
34183: PPUSH
34184: LD_VAR 0 8
34188: PPUSH
34189: CALL_OW 172
// exit ;
34193: POP
34194: POP
34195: POP
34196: POP
34197: GO 34207
// end ;
34199: GO 34081
34201: POP
34202: POP
// end ; end ;
34203: GO 33568
34205: POP
34206: POP
// end ; end_of_file
34207: PPOPN 9
34209: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
34210: LD_VAR 0 1
34214: PUSH
34215: LD_INT 200
34217: DOUBLE
34218: GREATEREQUAL
34219: IFFALSE 34227
34221: LD_INT 299
34223: DOUBLE
34224: LESSEQUAL
34225: IFTRUE 34229
34227: GO 34261
34229: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
34230: LD_VAR 0 1
34234: PPUSH
34235: LD_VAR 0 2
34239: PPUSH
34240: LD_VAR 0 3
34244: PPUSH
34245: LD_VAR 0 4
34249: PPUSH
34250: LD_VAR 0 5
34254: PPUSH
34255: CALL 35123 0 5
34259: GO 34338
34261: LD_INT 300
34263: DOUBLE
34264: GREATEREQUAL
34265: IFFALSE 34273
34267: LD_INT 399
34269: DOUBLE
34270: LESSEQUAL
34271: IFTRUE 34275
34273: GO 34337
34275: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
34276: LD_VAR 0 1
34280: PPUSH
34281: LD_VAR 0 2
34285: PPUSH
34286: LD_VAR 0 3
34290: PPUSH
34291: LD_VAR 0 4
34295: PPUSH
34296: LD_VAR 0 5
34300: PPUSH
34301: LD_VAR 0 6
34305: PPUSH
34306: LD_VAR 0 7
34310: PPUSH
34311: LD_VAR 0 8
34315: PPUSH
34316: LD_VAR 0 9
34320: PPUSH
34321: LD_VAR 0 10
34325: PPUSH
34326: LD_VAR 0 11
34330: PPUSH
34331: CALL 30763 0 11
34335: GO 34338
34337: POP
// end ;
34338: PPOPN 11
34340: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
34341: LD_VAR 0 1
34345: PPUSH
34346: LD_VAR 0 2
34350: PPUSH
34351: LD_VAR 0 3
34355: PPUSH
34356: LD_VAR 0 4
34360: PPUSH
34361: LD_VAR 0 5
34365: PPUSH
34366: CALL 34423 0 5
// end ; end_of_file
34370: PPOPN 5
34372: END
// export function SOS_UnitDestroyed ( un ) ; begin
34373: LD_INT 0
34375: PPUSH
// ComRadiation ( un ) ;
34376: LD_VAR 0 1
34380: PPUSH
34381: CALL 35543 0 1
// end ;
34385: LD_VAR 0 2
34389: RET
// export function SOS_UnitKamikazed ( un ) ; begin
34390: LD_INT 0
34392: PPUSH
// ComRadiation ( un ) ;
34393: LD_VAR 0 1
34397: PPUSH
34398: CALL 35543 0 1
// end ;
34402: LD_VAR 0 2
34406: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34407: LD_INT 0
34409: PPUSH
// end ;
34410: LD_VAR 0 4
34414: RET
// export function SOS_Command ( cmd ) ; begin
34415: LD_INT 0
34417: PPUSH
// end ;
34418: LD_VAR 0 2
34422: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34423: LD_INT 0
34425: PPUSH
// end ;
34426: LD_VAR 0 6
34430: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
34431: LD_INT 0
34433: PPUSH
34434: PPUSH
34435: PPUSH
34436: PPUSH
34437: PPUSH
// if not vehicle or not factory then
34438: LD_VAR 0 1
34442: NOT
34443: IFTRUE 34452
34445: PUSH
34446: LD_VAR 0 2
34450: NOT
34451: OR
34452: IFFALSE 34456
// exit ;
34454: GO 35118
// weapon := GetWeapon ( vehicle ) ;
34456: LD_ADDR_VAR 0 7
34460: PUSH
34461: LD_VAR 0 1
34465: PPUSH
34466: CALL_OW 264
34470: ST_TO_ADDR
// if weapon = ar_miner then
34471: LD_VAR 0 7
34475: PUSH
34476: LD_INT 81
34478: EQUAL
34479: IFFALSE 34536
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
34481: LD_ADDR_EXP 123
34485: PUSH
34486: LD_EXP 123
34490: PPUSH
34491: LD_EXP 123
34495: PUSH
34496: LD_INT 1
34498: PLUS
34499: PPUSH
34500: LD_VAR 0 1
34504: PPUSH
34505: CALL_OW 1
34509: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34510: LD_ADDR_EXP 124
34514: PUSH
34515: LD_EXP 124
34519: PPUSH
34520: LD_EXP 124
34524: PUSH
34525: LD_INT 1
34527: PLUS
34528: PPUSH
34529: EMPTY
34530: PPUSH
34531: CALL_OW 1
34535: ST_TO_ADDR
// end ; if not factoryWaypoints then
34536: LD_EXP 112
34540: NOT
34541: IFFALSE 34545
// exit ;
34543: GO 35118
// for i := 1 to Count ( factoryWaypoints ) do
34545: LD_ADDR_VAR 0 4
34549: PUSH
34550: DOUBLE
34551: LD_INT 1
34553: DEC
34554: ST_TO_ADDR
34555: LD_EXP 112
34559: PPUSH
34560: CALL 43071 0 1
34564: PUSH
34565: FOR_TO
34566: IFFALSE 35116
// if factoryWaypoints [ i ] [ 2 ] = factory then
34568: LD_EXP 112
34572: PUSH
34573: LD_VAR 0 4
34577: ARRAY
34578: PUSH
34579: LD_INT 2
34581: ARRAY
34582: PUSH
34583: LD_VAR 0 2
34587: EQUAL
34588: IFFALSE 35114
// begin if GetControl ( vehicle ) = control_manual then
34590: LD_VAR 0 1
34594: PPUSH
34595: CALL_OW 263
34599: PUSH
34600: LD_INT 1
34602: EQUAL
34603: IFFALSE 34967
// begin driver := IsDrivenBy ( vehicle ) ;
34605: LD_ADDR_VAR 0 5
34609: PUSH
34610: LD_VAR 0 1
34614: PPUSH
34615: CALL_OW 311
34619: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
34620: LD_VAR 0 5
34624: PUSH
34625: LD_EXP 113
34629: IN
34630: IFTRUE 34644
34632: PUSH
34633: LD_VAR 0 1
34637: PUSH
34638: LD_EXP 113
34642: IN
34643: OR
34644: IFFALSE 34650
// exit ;
34646: POP
34647: POP
34648: GO 35118
// if not HasTask ( driver ) then
34650: LD_VAR 0 5
34654: PPUSH
34655: CALL_OW 314
34659: NOT
34660: IFFALSE 34965
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
34662: LD_ADDR_EXP 113
34666: PUSH
34667: LD_EXP 113
34671: PPUSH
34672: LD_VAR 0 5
34676: PPUSH
34677: CALL 79047 0 2
34681: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
34682: LD_ADDR_EXP 113
34686: PUSH
34687: LD_EXP 113
34691: PPUSH
34692: LD_VAR 0 1
34696: PPUSH
34697: CALL 79047 0 2
34701: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
34702: LD_ADDR_VAR 0 6
34706: PUSH
34707: LD_EXP 112
34711: PUSH
34712: LD_VAR 0 4
34716: ARRAY
34717: PUSH
34718: LD_INT 3
34720: ARRAY
34721: PPUSH
34722: LD_EXP 112
34726: PUSH
34727: LD_VAR 0 4
34731: ARRAY
34732: PUSH
34733: LD_INT 4
34735: ARRAY
34736: PPUSH
34737: CALL_OW 428
34741: ST_TO_ADDR
// if hex then
34742: LD_VAR 0 6
34746: IFFALSE 34764
// ComMoveUnit ( driver , hex ) else
34748: LD_VAR 0 5
34752: PPUSH
34753: LD_VAR 0 6
34757: PPUSH
34758: CALL_OW 112
34762: GO 34848
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
34764: LD_VAR 0 1
34768: PPUSH
34769: LD_EXP 112
34773: PUSH
34774: LD_VAR 0 4
34778: ARRAY
34779: PUSH
34780: LD_INT 3
34782: ARRAY
34783: PPUSH
34784: LD_EXP 112
34788: PUSH
34789: LD_VAR 0 4
34793: ARRAY
34794: PUSH
34795: LD_INT 4
34797: ARRAY
34798: PPUSH
34799: CALL_OW 297
34803: PUSH
34804: LD_INT 0
34806: GREATER
34807: IFFALSE 34848
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
34809: LD_VAR 0 5
34813: PPUSH
34814: LD_EXP 112
34818: PUSH
34819: LD_VAR 0 4
34823: ARRAY
34824: PUSH
34825: LD_INT 3
34827: ARRAY
34828: PPUSH
34829: LD_EXP 112
34833: PUSH
34834: LD_VAR 0 4
34838: ARRAY
34839: PUSH
34840: LD_INT 4
34842: ARRAY
34843: PPUSH
34844: CALL_OW 111
// AddComExitVehicle ( driver ) ;
34848: LD_VAR 0 5
34852: PPUSH
34853: CALL_OW 181
// if Multiplayer then
34857: LD_OWVAR 4
34861: IFFALSE 34910
// begin repeat wait ( 10 ) ;
34863: LD_INT 10
34865: PPUSH
34866: CALL_OW 67
// until not IsInUnit ( driver ) ;
34870: LD_VAR 0 5
34874: PPUSH
34875: CALL_OW 310
34879: NOT
34880: IFFALSE 34863
// if not HasTask ( driver ) then
34882: LD_VAR 0 5
34886: PPUSH
34887: CALL_OW 314
34891: NOT
34892: IFFALSE 34908
// ComEnterUnit ( driver , factory ) ;
34894: LD_VAR 0 5
34898: PPUSH
34899: LD_VAR 0 2
34903: PPUSH
34904: CALL_OW 120
// end else
34908: GO 34924
// AddComEnterUnit ( driver , factory ) ;
34910: LD_VAR 0 5
34914: PPUSH
34915: LD_VAR 0 2
34919: PPUSH
34920: CALL_OW 180
// wait ( 0 0$1 ) ;
34924: LD_INT 35
34926: PPUSH
34927: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
34931: LD_ADDR_EXP 113
34935: PUSH
34936: LD_EXP 113
34940: PUSH
34941: LD_VAR 0 5
34945: DIFF
34946: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
34947: LD_ADDR_EXP 113
34951: PUSH
34952: LD_EXP 113
34956: PUSH
34957: LD_VAR 0 1
34961: DIFF
34962: ST_TO_ADDR
// break ;
34963: GO 35116
// end ; end else
34965: GO 35114
// if GetControl ( vehicle ) = control_remote then
34967: LD_VAR 0 1
34971: PPUSH
34972: CALL_OW 263
34976: PUSH
34977: LD_INT 2
34979: EQUAL
34980: IFFALSE 35066
// begin wait ( 0 0$2 ) ;
34982: LD_INT 70
34984: PPUSH
34985: CALL_OW 67
// repeat wait ( 10 ) ;
34989: LD_INT 10
34991: PPUSH
34992: CALL_OW 67
// Connect ( vehicle ) ;
34996: LD_VAR 0 1
35000: PPUSH
35001: CALL 49349 0 1
// until IsControledBy ( vehicle ) ;
35005: LD_VAR 0 1
35009: PPUSH
35010: CALL_OW 312
35014: IFFALSE 34989
// wait ( 10 ) ;
35016: LD_INT 10
35018: PPUSH
35019: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35023: LD_VAR 0 1
35027: PPUSH
35028: LD_EXP 112
35032: PUSH
35033: LD_VAR 0 4
35037: ARRAY
35038: PUSH
35039: LD_INT 3
35041: ARRAY
35042: PPUSH
35043: LD_EXP 112
35047: PUSH
35048: LD_VAR 0 4
35052: ARRAY
35053: PUSH
35054: LD_INT 4
35056: ARRAY
35057: PPUSH
35058: CALL_OW 111
// break ;
35062: GO 35116
// end else
35064: GO 35114
// begin wait ( 0 0$3 ) ;
35066: LD_INT 105
35068: PPUSH
35069: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35073: LD_VAR 0 1
35077: PPUSH
35078: LD_EXP 112
35082: PUSH
35083: LD_VAR 0 4
35087: ARRAY
35088: PUSH
35089: LD_INT 3
35091: ARRAY
35092: PPUSH
35093: LD_EXP 112
35097: PUSH
35098: LD_VAR 0 4
35102: ARRAY
35103: PUSH
35104: LD_INT 4
35106: ARRAY
35107: PPUSH
35108: CALL_OW 111
// break ;
35112: GO 35116
// end ; end ;
35114: GO 34565
35116: POP
35117: POP
// end ;
35118: LD_VAR 0 3
35122: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35123: LD_INT 0
35125: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35126: LD_VAR 0 1
35130: PUSH
35131: LD_INT 250
35133: EQUAL
35134: IFFALSE 35151
35136: PUSH
35137: LD_VAR 0 2
35141: PPUSH
35142: CALL_OW 264
35146: PUSH
35147: LD_INT 81
35149: EQUAL
35150: AND
35151: IFFALSE 35172
// MinerPlaceMine ( unit , x , y ) ;
35153: LD_VAR 0 2
35157: PPUSH
35158: LD_VAR 0 4
35162: PPUSH
35163: LD_VAR 0 5
35167: PPUSH
35168: CALL 38518 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35172: LD_VAR 0 1
35176: PUSH
35177: LD_INT 251
35179: EQUAL
35180: IFFALSE 35197
35182: PUSH
35183: LD_VAR 0 2
35187: PPUSH
35188: CALL_OW 264
35192: PUSH
35193: LD_INT 81
35195: EQUAL
35196: AND
35197: IFFALSE 35218
// MinerDetonateMine ( unit , x , y ) ;
35199: LD_VAR 0 2
35203: PPUSH
35204: LD_VAR 0 4
35208: PPUSH
35209: LD_VAR 0 5
35213: PPUSH
35214: CALL 38925 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35218: LD_VAR 0 1
35222: PUSH
35223: LD_INT 252
35225: EQUAL
35226: IFFALSE 35243
35228: PUSH
35229: LD_VAR 0 2
35233: PPUSH
35234: CALL_OW 264
35238: PUSH
35239: LD_INT 81
35241: EQUAL
35242: AND
35243: IFFALSE 35264
// MinerCreateMinefield ( unit , x , y ) ;
35245: LD_VAR 0 2
35249: PPUSH
35250: LD_VAR 0 4
35254: PPUSH
35255: LD_VAR 0 5
35259: PPUSH
35260: CALL 39157 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35264: LD_VAR 0 1
35268: PUSH
35269: LD_INT 253
35271: EQUAL
35272: IFFALSE 35289
35274: PUSH
35275: LD_VAR 0 2
35279: PPUSH
35280: CALL_OW 257
35284: PUSH
35285: LD_INT 5
35287: EQUAL
35288: AND
35289: IFFALSE 35310
// ComBinocular ( unit , x , y ) ;
35291: LD_VAR 0 2
35295: PPUSH
35296: LD_VAR 0 4
35300: PPUSH
35301: LD_VAR 0 5
35305: PPUSH
35306: CALL 39532 0 3
// if selectedUnit then
35310: LD_VAR 0 3
35314: IFFALSE 35374
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35316: LD_VAR 0 1
35320: PUSH
35321: LD_INT 254
35323: EQUAL
35324: IFFALSE 35341
35326: PUSH
35327: LD_VAR 0 2
35331: PPUSH
35332: CALL_OW 264
35336: PUSH
35337: LD_INT 99
35339: EQUAL
35340: AND
35341: IFFALSE 35358
35343: PUSH
35344: LD_VAR 0 3
35348: PPUSH
35349: CALL_OW 263
35353: PUSH
35354: LD_INT 3
35356: EQUAL
35357: AND
35358: IFFALSE 35374
// HackDestroyVehicle ( unit , selectedUnit ) ;
35360: LD_VAR 0 2
35364: PPUSH
35365: LD_VAR 0 3
35369: PPUSH
35370: CALL 37708 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35374: LD_VAR 0 1
35378: PUSH
35379: LD_INT 255
35381: EQUAL
35382: IFFALSE 35406
35384: PUSH
35385: LD_VAR 0 2
35389: PPUSH
35390: CALL_OW 264
35394: PUSH
35395: LD_INT 14
35397: PUSH
35398: LD_INT 53
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: IN
35405: AND
35406: IFFALSE 35424
35408: PUSH
35409: LD_VAR 0 4
35413: PPUSH
35414: LD_VAR 0 5
35418: PPUSH
35419: CALL_OW 488
35423: AND
35424: IFFALSE 35448
// CutTreeXYR ( unit , x , y , 12 ) ;
35426: LD_VAR 0 2
35430: PPUSH
35431: LD_VAR 0 4
35435: PPUSH
35436: LD_VAR 0 5
35440: PPUSH
35441: LD_INT 12
35443: PPUSH
35444: CALL 35639 0 4
// if cmd = 256 then
35448: LD_VAR 0 1
35452: PUSH
35453: LD_INT 256
35455: EQUAL
35456: IFFALSE 35477
// SetFactoryWaypoint ( unit , x , y ) ;
35458: LD_VAR 0 2
35462: PPUSH
35463: LD_VAR 0 4
35467: PPUSH
35468: LD_VAR 0 5
35472: PPUSH
35473: CALL 32755 0 3
// if cmd = 257 then
35477: LD_VAR 0 1
35481: PUSH
35482: LD_INT 257
35484: EQUAL
35485: IFFALSE 35506
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35487: LD_VAR 0 2
35491: PPUSH
35492: LD_VAR 0 4
35496: PPUSH
35497: LD_VAR 0 5
35501: PPUSH
35502: CALL 33251 0 3
// if cmd = 258 then
35506: LD_VAR 0 1
35510: PUSH
35511: LD_INT 258
35513: EQUAL
35514: IFFALSE 35538
// BurnTreeXYR ( unit , x , y , 8 ) ;
35516: LD_VAR 0 2
35520: PPUSH
35521: LD_VAR 0 4
35525: PPUSH
35526: LD_VAR 0 5
35530: PPUSH
35531: LD_INT 8
35533: PPUSH
35534: CALL 36061 0 4
// end ;
35538: LD_VAR 0 6
35542: RET
// export function ComRadiation ( un ) ; var eff ; begin
35543: LD_INT 0
35545: PPUSH
35546: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
35547: LD_VAR 0 1
35551: PPUSH
35552: CALL_OW 264
35556: PUSH
35557: LD_INT 91
35559: NONEQUAL
35560: IFFALSE 35564
// exit ;
35562: GO 35634
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35564: LD_INT 68
35566: PPUSH
35567: LD_VAR 0 1
35571: PPUSH
35572: CALL_OW 255
35576: PPUSH
35577: CALL_OW 321
35581: PUSH
35582: LD_INT 2
35584: EQUAL
35585: IFFALSE 35597
// eff := 50 else
35587: LD_ADDR_VAR 0 3
35591: PUSH
35592: LD_INT 50
35594: ST_TO_ADDR
35595: GO 35605
// eff := 25 ;
35597: LD_ADDR_VAR 0 3
35601: PUSH
35602: LD_INT 25
35604: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35605: LD_VAR 0 1
35609: PPUSH
35610: CALL_OW 250
35614: PPUSH
35615: LD_VAR 0 1
35619: PPUSH
35620: CALL_OW 251
35624: PPUSH
35625: LD_VAR 0 3
35629: PPUSH
35630: CALL_OW 495
// end ;
35634: LD_VAR 0 2
35638: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35639: LD_INT 0
35641: PPUSH
35642: PPUSH
35643: PPUSH
35644: PPUSH
35645: PPUSH
35646: PPUSH
35647: PPUSH
35648: PPUSH
35649: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
35650: LD_VAR 0 1
35654: PPUSH
35655: CALL_OW 302
35659: NOT
35660: IFTRUE 35679
35662: PUSH
35663: LD_VAR 0 2
35667: PPUSH
35668: LD_VAR 0 3
35672: PPUSH
35673: CALL_OW 488
35677: NOT
35678: OR
35679: IFTRUE 35688
35681: PUSH
35682: LD_VAR 0 4
35686: NOT
35687: OR
35688: IFFALSE 35692
// exit ;
35690: GO 36056
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
35692: LD_VAR 0 1
35696: PPUSH
35697: CALL_OW 437
35701: PPUSH
35702: CALL 43071 0 1
35706: PUSH
35707: LD_INT 10
35709: GREATER
35710: IFFALSE 35714
// exit ;
35712: GO 36056
// list := [ ] ;
35714: LD_ADDR_VAR 0 13
35718: PUSH
35719: EMPTY
35720: ST_TO_ADDR
// if x - r < 0 then
35721: LD_VAR 0 2
35725: PUSH
35726: LD_VAR 0 4
35730: MINUS
35731: PUSH
35732: LD_INT 0
35734: LESS
35735: IFFALSE 35747
// min_x := 0 else
35737: LD_ADDR_VAR 0 7
35741: PUSH
35742: LD_INT 0
35744: ST_TO_ADDR
35745: GO 35763
// min_x := x - r ;
35747: LD_ADDR_VAR 0 7
35751: PUSH
35752: LD_VAR 0 2
35756: PUSH
35757: LD_VAR 0 4
35761: MINUS
35762: ST_TO_ADDR
// if y - r < 0 then
35763: LD_VAR 0 3
35767: PUSH
35768: LD_VAR 0 4
35772: MINUS
35773: PUSH
35774: LD_INT 0
35776: LESS
35777: IFFALSE 35789
// min_y := 0 else
35779: LD_ADDR_VAR 0 8
35783: PUSH
35784: LD_INT 0
35786: ST_TO_ADDR
35787: GO 35805
// min_y := y - r ;
35789: LD_ADDR_VAR 0 8
35793: PUSH
35794: LD_VAR 0 3
35798: PUSH
35799: LD_VAR 0 4
35803: MINUS
35804: ST_TO_ADDR
// max_x := x + r ;
35805: LD_ADDR_VAR 0 9
35809: PUSH
35810: LD_VAR 0 2
35814: PUSH
35815: LD_VAR 0 4
35819: PLUS
35820: ST_TO_ADDR
// max_y := y + r ;
35821: LD_ADDR_VAR 0 10
35825: PUSH
35826: LD_VAR 0 3
35830: PUSH
35831: LD_VAR 0 4
35835: PLUS
35836: ST_TO_ADDR
// for _x = min_x to max_x do
35837: LD_ADDR_VAR 0 11
35841: PUSH
35842: DOUBLE
35843: LD_VAR 0 7
35847: DEC
35848: ST_TO_ADDR
35849: LD_VAR 0 9
35853: PUSH
35854: FOR_TO
35855: IFFALSE 35974
// for _y = min_y to max_y do
35857: LD_ADDR_VAR 0 12
35861: PUSH
35862: DOUBLE
35863: LD_VAR 0 8
35867: DEC
35868: ST_TO_ADDR
35869: LD_VAR 0 10
35873: PUSH
35874: FOR_TO
35875: IFFALSE 35970
// begin if not ValidHex ( _x , _y ) then
35877: LD_VAR 0 11
35881: PPUSH
35882: LD_VAR 0 12
35886: PPUSH
35887: CALL_OW 488
35891: NOT
35892: IFFALSE 35896
// continue ;
35894: GO 35874
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35896: LD_VAR 0 11
35900: PPUSH
35901: LD_VAR 0 12
35905: PPUSH
35906: CALL_OW 351
35910: IFFALSE 35928
35912: PUSH
35913: LD_VAR 0 11
35917: PPUSH
35918: LD_VAR 0 12
35922: PPUSH
35923: CALL_OW 554
35927: AND
35928: IFFALSE 35968
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35930: LD_ADDR_VAR 0 13
35934: PUSH
35935: LD_VAR 0 13
35939: PPUSH
35940: LD_VAR 0 13
35944: PUSH
35945: LD_INT 1
35947: PLUS
35948: PPUSH
35949: LD_VAR 0 11
35953: PUSH
35954: LD_VAR 0 12
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PPUSH
35963: CALL_OW 2
35967: ST_TO_ADDR
// end ;
35968: GO 35874
35970: POP
35971: POP
35972: GO 35854
35974: POP
35975: POP
// if not list then
35976: LD_VAR 0 13
35980: NOT
35981: IFFALSE 35985
// exit ;
35983: GO 36056
// for i in list do
35985: LD_ADDR_VAR 0 6
35989: PUSH
35990: LD_VAR 0 13
35994: PUSH
35995: FOR_IN
35996: IFFALSE 36054
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35998: LD_VAR 0 1
36002: PPUSH
36003: LD_STRING M
36005: PUSH
36006: LD_VAR 0 6
36010: PUSH
36011: LD_INT 1
36013: ARRAY
36014: PUSH
36015: LD_VAR 0 6
36019: PUSH
36020: LD_INT 2
36022: ARRAY
36023: PUSH
36024: LD_INT 0
36026: PUSH
36027: LD_INT 0
36029: PUSH
36030: LD_INT 0
36032: PUSH
36033: LD_INT 0
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: PUSH
36045: EMPTY
36046: LIST
36047: PPUSH
36048: CALL_OW 447
36052: GO 35995
36054: POP
36055: POP
// end ;
36056: LD_VAR 0 5
36060: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
36061: LD_INT 0
36063: PPUSH
36064: PPUSH
36065: PPUSH
36066: PPUSH
36067: PPUSH
36068: PPUSH
36069: PPUSH
36070: PPUSH
36071: PPUSH
36072: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
36073: LD_VAR 0 1
36077: PPUSH
36078: CALL_OW 302
36082: NOT
36083: IFTRUE 36102
36085: PUSH
36086: LD_VAR 0 2
36090: PPUSH
36091: LD_VAR 0 3
36095: PPUSH
36096: CALL_OW 488
36100: NOT
36101: OR
36102: IFTRUE 36111
36104: PUSH
36105: LD_VAR 0 4
36109: NOT
36110: OR
36111: IFFALSE 36115
// exit ;
36113: GO 36654
// if Count ( GetTaskList ( flame ) ) > 10 then
36115: LD_VAR 0 1
36119: PPUSH
36120: CALL_OW 437
36124: PPUSH
36125: CALL 43071 0 1
36129: PUSH
36130: LD_INT 10
36132: GREATER
36133: IFFALSE 36137
// exit ;
36135: GO 36654
// list := [ ] ;
36137: LD_ADDR_VAR 0 13
36141: PUSH
36142: EMPTY
36143: ST_TO_ADDR
// if x - r < 0 then
36144: LD_VAR 0 2
36148: PUSH
36149: LD_VAR 0 4
36153: MINUS
36154: PUSH
36155: LD_INT 0
36157: LESS
36158: IFFALSE 36170
// min_x := 0 else
36160: LD_ADDR_VAR 0 7
36164: PUSH
36165: LD_INT 0
36167: ST_TO_ADDR
36168: GO 36186
// min_x := x - r ;
36170: LD_ADDR_VAR 0 7
36174: PUSH
36175: LD_VAR 0 2
36179: PUSH
36180: LD_VAR 0 4
36184: MINUS
36185: ST_TO_ADDR
// if y - r < 0 then
36186: LD_VAR 0 3
36190: PUSH
36191: LD_VAR 0 4
36195: MINUS
36196: PUSH
36197: LD_INT 0
36199: LESS
36200: IFFALSE 36212
// min_y := 0 else
36202: LD_ADDR_VAR 0 8
36206: PUSH
36207: LD_INT 0
36209: ST_TO_ADDR
36210: GO 36228
// min_y := y - r ;
36212: LD_ADDR_VAR 0 8
36216: PUSH
36217: LD_VAR 0 3
36221: PUSH
36222: LD_VAR 0 4
36226: MINUS
36227: ST_TO_ADDR
// max_x := x + r ;
36228: LD_ADDR_VAR 0 9
36232: PUSH
36233: LD_VAR 0 2
36237: PUSH
36238: LD_VAR 0 4
36242: PLUS
36243: ST_TO_ADDR
// max_y := y + r ;
36244: LD_ADDR_VAR 0 10
36248: PUSH
36249: LD_VAR 0 3
36253: PUSH
36254: LD_VAR 0 4
36258: PLUS
36259: ST_TO_ADDR
// for _x = min_x to max_x do
36260: LD_ADDR_VAR 0 11
36264: PUSH
36265: DOUBLE
36266: LD_VAR 0 7
36270: DEC
36271: ST_TO_ADDR
36272: LD_VAR 0 9
36276: PUSH
36277: FOR_TO
36278: IFFALSE 36397
// for _y = min_y to max_y do
36280: LD_ADDR_VAR 0 12
36284: PUSH
36285: DOUBLE
36286: LD_VAR 0 8
36290: DEC
36291: ST_TO_ADDR
36292: LD_VAR 0 10
36296: PUSH
36297: FOR_TO
36298: IFFALSE 36393
// begin if not ValidHex ( _x , _y ) then
36300: LD_VAR 0 11
36304: PPUSH
36305: LD_VAR 0 12
36309: PPUSH
36310: CALL_OW 488
36314: NOT
36315: IFFALSE 36319
// continue ;
36317: GO 36297
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36319: LD_VAR 0 11
36323: PPUSH
36324: LD_VAR 0 12
36328: PPUSH
36329: CALL_OW 351
36333: IFFALSE 36351
36335: PUSH
36336: LD_VAR 0 11
36340: PPUSH
36341: LD_VAR 0 12
36345: PPUSH
36346: CALL_OW 554
36350: AND
36351: IFFALSE 36391
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36353: LD_ADDR_VAR 0 13
36357: PUSH
36358: LD_VAR 0 13
36362: PPUSH
36363: LD_VAR 0 13
36367: PUSH
36368: LD_INT 1
36370: PLUS
36371: PPUSH
36372: LD_VAR 0 11
36376: PUSH
36377: LD_VAR 0 12
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PPUSH
36386: CALL_OW 2
36390: ST_TO_ADDR
// end ;
36391: GO 36297
36393: POP
36394: POP
36395: GO 36277
36397: POP
36398: POP
// if not list then
36399: LD_VAR 0 13
36403: NOT
36404: IFFALSE 36408
// exit ;
36406: GO 36654
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
36408: LD_ADDR_VAR 0 13
36412: PUSH
36413: LD_VAR 0 1
36417: PPUSH
36418: LD_VAR 0 13
36422: PPUSH
36423: LD_INT 1
36425: PPUSH
36426: LD_INT 1
36428: PPUSH
36429: CALL 46477 0 4
36433: ST_TO_ADDR
// ComStop ( flame ) ;
36434: LD_VAR 0 1
36438: PPUSH
36439: CALL_OW 141
// for i in list do
36443: LD_ADDR_VAR 0 6
36447: PUSH
36448: LD_VAR 0 13
36452: PUSH
36453: FOR_IN
36454: IFFALSE 36485
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
36456: LD_VAR 0 1
36460: PPUSH
36461: LD_VAR 0 6
36465: PUSH
36466: LD_INT 1
36468: ARRAY
36469: PPUSH
36470: LD_VAR 0 6
36474: PUSH
36475: LD_INT 2
36477: ARRAY
36478: PPUSH
36479: CALL_OW 176
36483: GO 36453
36485: POP
36486: POP
// repeat wait ( 0 0$1 ) ;
36487: LD_INT 35
36489: PPUSH
36490: CALL_OW 67
// task := GetTaskList ( flame ) ;
36494: LD_ADDR_VAR 0 14
36498: PUSH
36499: LD_VAR 0 1
36503: PPUSH
36504: CALL_OW 437
36508: ST_TO_ADDR
// if not task then
36509: LD_VAR 0 14
36513: NOT
36514: IFFALSE 36518
// exit ;
36516: GO 36654
// if task [ 1 ] [ 1 ] <> | then
36518: LD_VAR 0 14
36522: PUSH
36523: LD_INT 1
36525: ARRAY
36526: PUSH
36527: LD_INT 1
36529: ARRAY
36530: PUSH
36531: LD_STRING |
36533: NONEQUAL
36534: IFFALSE 36538
// exit ;
36536: GO 36654
// _x := task [ 1 ] [ 2 ] ;
36538: LD_ADDR_VAR 0 11
36542: PUSH
36543: LD_VAR 0 14
36547: PUSH
36548: LD_INT 1
36550: ARRAY
36551: PUSH
36552: LD_INT 2
36554: ARRAY
36555: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
36556: LD_ADDR_VAR 0 12
36560: PUSH
36561: LD_VAR 0 14
36565: PUSH
36566: LD_INT 1
36568: ARRAY
36569: PUSH
36570: LD_INT 3
36572: ARRAY
36573: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
36574: LD_VAR 0 11
36578: PPUSH
36579: LD_VAR 0 12
36583: PPUSH
36584: CALL_OW 351
36588: NOT
36589: IFTRUE 36608
36591: PUSH
36592: LD_VAR 0 11
36596: PPUSH
36597: LD_VAR 0 12
36601: PPUSH
36602: CALL_OW 554
36606: NOT
36607: OR
36608: IFFALSE 36642
// begin task := Delete ( task , 1 ) ;
36610: LD_ADDR_VAR 0 14
36614: PUSH
36615: LD_VAR 0 14
36619: PPUSH
36620: LD_INT 1
36622: PPUSH
36623: CALL_OW 3
36627: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
36628: LD_VAR 0 1
36632: PPUSH
36633: LD_VAR 0 14
36637: PPUSH
36638: CALL_OW 446
// end ; until not HasTask ( flame ) ;
36642: LD_VAR 0 1
36646: PPUSH
36647: CALL_OW 314
36651: NOT
36652: IFFALSE 36487
// end ;
36654: LD_VAR 0 5
36658: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36659: LD_EXP 116
36663: NOT
36664: IFFALSE 36714
36666: GO 36668
36668: DISABLE
// begin initHack := true ;
36669: LD_ADDR_EXP 116
36673: PUSH
36674: LD_INT 1
36676: ST_TO_ADDR
// hackTanks := [ ] ;
36677: LD_ADDR_EXP 117
36681: PUSH
36682: EMPTY
36683: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36684: LD_ADDR_EXP 118
36688: PUSH
36689: EMPTY
36690: ST_TO_ADDR
// hackLimit := 3 ;
36691: LD_ADDR_EXP 119
36695: PUSH
36696: LD_INT 3
36698: ST_TO_ADDR
// hackDist := 12 ;
36699: LD_ADDR_EXP 120
36703: PUSH
36704: LD_INT 12
36706: ST_TO_ADDR
// hackCounter := [ ] ;
36707: LD_ADDR_EXP 121
36711: PUSH
36712: EMPTY
36713: ST_TO_ADDR
// end ;
36714: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36715: LD_EXP 116
36719: IFFALSE 36737
36721: PUSH
36722: LD_INT 34
36724: PUSH
36725: LD_INT 99
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PPUSH
36732: CALL_OW 69
36736: AND
36737: IFFALSE 36990
36739: GO 36741
36741: DISABLE
36742: LD_INT 0
36744: PPUSH
36745: PPUSH
// begin enable ;
36746: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36747: LD_ADDR_VAR 0 1
36751: PUSH
36752: LD_INT 34
36754: PUSH
36755: LD_INT 99
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PPUSH
36762: CALL_OW 69
36766: PUSH
36767: FOR_IN
36768: IFFALSE 36988
// begin if not i in hackTanks then
36770: LD_VAR 0 1
36774: PUSH
36775: LD_EXP 117
36779: IN
36780: NOT
36781: IFFALSE 36864
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36783: LD_ADDR_EXP 117
36787: PUSH
36788: LD_EXP 117
36792: PPUSH
36793: LD_EXP 117
36797: PUSH
36798: LD_INT 1
36800: PLUS
36801: PPUSH
36802: LD_VAR 0 1
36806: PPUSH
36807: CALL_OW 1
36811: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36812: LD_ADDR_EXP 118
36816: PUSH
36817: LD_EXP 118
36821: PPUSH
36822: LD_EXP 118
36826: PUSH
36827: LD_INT 1
36829: PLUS
36830: PPUSH
36831: EMPTY
36832: PPUSH
36833: CALL_OW 1
36837: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36838: LD_ADDR_EXP 121
36842: PUSH
36843: LD_EXP 121
36847: PPUSH
36848: LD_EXP 121
36852: PUSH
36853: LD_INT 1
36855: PLUS
36856: PPUSH
36857: EMPTY
36858: PPUSH
36859: CALL_OW 1
36863: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36864: LD_VAR 0 1
36868: PPUSH
36869: CALL_OW 302
36873: NOT
36874: IFFALSE 36887
// begin HackUnlinkAll ( i ) ;
36876: LD_VAR 0 1
36880: PPUSH
36881: CALL 36993 0 1
// continue ;
36885: GO 36767
// end ; HackCheckCapturedStatus ( i ) ;
36887: LD_VAR 0 1
36891: PPUSH
36892: CALL 37438 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36896: LD_ADDR_VAR 0 2
36900: PUSH
36901: LD_INT 81
36903: PUSH
36904: LD_VAR 0 1
36908: PPUSH
36909: CALL_OW 255
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 33
36920: PUSH
36921: LD_INT 3
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 91
36930: PUSH
36931: LD_VAR 0 1
36935: PUSH
36936: LD_EXP 120
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 50
36948: PUSH
36949: EMPTY
36950: LIST
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: PPUSH
36958: CALL_OW 69
36962: ST_TO_ADDR
// if not tmp then
36963: LD_VAR 0 2
36967: NOT
36968: IFFALSE 36972
// continue ;
36970: GO 36767
// HackLink ( i , tmp ) ;
36972: LD_VAR 0 1
36976: PPUSH
36977: LD_VAR 0 2
36981: PPUSH
36982: CALL 37129 0 2
// end ;
36986: GO 36767
36988: POP
36989: POP
// end ;
36990: PPOPN 2
36992: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36993: LD_INT 0
36995: PPUSH
36996: PPUSH
36997: PPUSH
// if not hack in hackTanks then
36998: LD_VAR 0 1
37002: PUSH
37003: LD_EXP 117
37007: IN
37008: NOT
37009: IFFALSE 37013
// exit ;
37011: GO 37124
// index := GetElementIndex ( hackTanks , hack ) ;
37013: LD_ADDR_VAR 0 4
37017: PUSH
37018: LD_EXP 117
37022: PPUSH
37023: LD_VAR 0 1
37027: PPUSH
37028: CALL 45772 0 2
37032: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37033: LD_EXP 118
37037: PUSH
37038: LD_VAR 0 4
37042: ARRAY
37043: IFFALSE 37124
// begin for i in hackTanksCaptured [ index ] do
37045: LD_ADDR_VAR 0 3
37049: PUSH
37050: LD_EXP 118
37054: PUSH
37055: LD_VAR 0 4
37059: ARRAY
37060: PUSH
37061: FOR_IN
37062: IFFALSE 37088
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37064: LD_VAR 0 3
37068: PUSH
37069: LD_INT 1
37071: ARRAY
37072: PPUSH
37073: LD_VAR 0 3
37077: PUSH
37078: LD_INT 2
37080: ARRAY
37081: PPUSH
37082: CALL_OW 235
37086: GO 37061
37088: POP
37089: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37090: LD_ADDR_EXP 118
37094: PUSH
37095: LD_EXP 118
37099: PPUSH
37100: LD_VAR 0 4
37104: PPUSH
37105: EMPTY
37106: PPUSH
37107: CALL_OW 1
37111: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37112: LD_VAR 0 1
37116: PPUSH
37117: LD_INT 0
37119: PPUSH
37120: CALL_OW 505
// end ; end ;
37124: LD_VAR 0 2
37128: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37129: LD_INT 0
37131: PPUSH
37132: PPUSH
37133: PPUSH
// if not hack in hackTanks or not vehicles then
37134: LD_VAR 0 1
37138: PUSH
37139: LD_EXP 117
37143: IN
37144: NOT
37145: IFTRUE 37154
37147: PUSH
37148: LD_VAR 0 2
37152: NOT
37153: OR
37154: IFFALSE 37158
// exit ;
37156: GO 37433
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37158: LD_ADDR_VAR 0 2
37162: PUSH
37163: LD_VAR 0 1
37167: PPUSH
37168: LD_VAR 0 2
37172: PPUSH
37173: LD_INT 1
37175: PPUSH
37176: LD_INT 1
37178: PPUSH
37179: CALL 46424 0 4
37183: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37184: LD_ADDR_VAR 0 5
37188: PUSH
37189: LD_EXP 117
37193: PPUSH
37194: LD_VAR 0 1
37198: PPUSH
37199: CALL 45772 0 2
37203: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37204: LD_EXP 118
37208: PUSH
37209: LD_VAR 0 5
37213: ARRAY
37214: PUSH
37215: LD_EXP 119
37219: LESS
37220: IFFALSE 37409
// begin for i := 1 to vehicles do
37222: LD_ADDR_VAR 0 4
37226: PUSH
37227: DOUBLE
37228: LD_INT 1
37230: DEC
37231: ST_TO_ADDR
37232: LD_VAR 0 2
37236: PUSH
37237: FOR_TO
37238: IFFALSE 37407
// begin if hackTanksCaptured [ index ] = hackLimit then
37240: LD_EXP 118
37244: PUSH
37245: LD_VAR 0 5
37249: ARRAY
37250: PUSH
37251: LD_EXP 119
37255: EQUAL
37256: IFFALSE 37260
// break ;
37258: GO 37407
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37260: LD_ADDR_EXP 121
37264: PUSH
37265: LD_EXP 121
37269: PPUSH
37270: LD_VAR 0 5
37274: PPUSH
37275: LD_EXP 121
37279: PUSH
37280: LD_VAR 0 5
37284: ARRAY
37285: PUSH
37286: LD_INT 1
37288: PLUS
37289: PPUSH
37290: CALL_OW 1
37294: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37295: LD_ADDR_EXP 118
37299: PUSH
37300: LD_EXP 118
37304: PPUSH
37305: LD_VAR 0 5
37309: PUSH
37310: LD_EXP 118
37314: PUSH
37315: LD_VAR 0 5
37319: ARRAY
37320: PUSH
37321: LD_INT 1
37323: PLUS
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PPUSH
37329: LD_VAR 0 2
37333: PUSH
37334: LD_VAR 0 4
37338: ARRAY
37339: PUSH
37340: LD_VAR 0 2
37344: PUSH
37345: LD_VAR 0 4
37349: ARRAY
37350: PPUSH
37351: CALL_OW 255
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PPUSH
37360: CALL 45989 0 3
37364: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37365: LD_VAR 0 2
37369: PUSH
37370: LD_VAR 0 4
37374: ARRAY
37375: PPUSH
37376: LD_VAR 0 1
37380: PPUSH
37381: CALL_OW 255
37385: PPUSH
37386: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37390: LD_VAR 0 2
37394: PUSH
37395: LD_VAR 0 4
37399: ARRAY
37400: PPUSH
37401: CALL_OW 141
// end ;
37405: GO 37237
37407: POP
37408: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37409: LD_VAR 0 1
37413: PPUSH
37414: LD_EXP 118
37418: PUSH
37419: LD_VAR 0 5
37423: ARRAY
37424: PUSH
37425: LD_INT 0
37427: PLUS
37428: PPUSH
37429: CALL_OW 505
// end ;
37433: LD_VAR 0 3
37437: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37438: LD_INT 0
37440: PPUSH
37441: PPUSH
37442: PPUSH
37443: PPUSH
// if not hack in hackTanks then
37444: LD_VAR 0 1
37448: PUSH
37449: LD_EXP 117
37453: IN
37454: NOT
37455: IFFALSE 37459
// exit ;
37457: GO 37703
// index := GetElementIndex ( hackTanks , hack ) ;
37459: LD_ADDR_VAR 0 4
37463: PUSH
37464: LD_EXP 117
37468: PPUSH
37469: LD_VAR 0 1
37473: PPUSH
37474: CALL 45772 0 2
37478: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37479: LD_ADDR_VAR 0 3
37483: PUSH
37484: DOUBLE
37485: LD_EXP 118
37489: PUSH
37490: LD_VAR 0 4
37494: ARRAY
37495: INC
37496: ST_TO_ADDR
37497: LD_INT 1
37499: PUSH
37500: FOR_DOWNTO
37501: IFFALSE 37677
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37503: LD_ADDR_VAR 0 5
37507: PUSH
37508: LD_EXP 118
37512: PUSH
37513: LD_VAR 0 4
37517: ARRAY
37518: PUSH
37519: LD_VAR 0 3
37523: ARRAY
37524: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37525: LD_VAR 0 5
37529: PUSH
37530: LD_INT 1
37532: ARRAY
37533: PPUSH
37534: CALL_OW 302
37538: NOT
37539: IFTRUE 37567
37541: PUSH
37542: LD_VAR 0 5
37546: PUSH
37547: LD_INT 1
37549: ARRAY
37550: PPUSH
37551: CALL_OW 255
37555: PUSH
37556: LD_VAR 0 1
37560: PPUSH
37561: CALL_OW 255
37565: NONEQUAL
37566: OR
37567: IFFALSE 37675
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37569: LD_VAR 0 5
37573: PUSH
37574: LD_INT 1
37576: ARRAY
37577: PPUSH
37578: CALL_OW 305
37582: IFFALSE 37610
37584: PUSH
37585: LD_VAR 0 5
37589: PUSH
37590: LD_INT 1
37592: ARRAY
37593: PPUSH
37594: CALL_OW 255
37598: PUSH
37599: LD_VAR 0 1
37603: PPUSH
37604: CALL_OW 255
37608: EQUAL
37609: AND
37610: IFFALSE 37634
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37612: LD_VAR 0 5
37616: PUSH
37617: LD_INT 1
37619: ARRAY
37620: PPUSH
37621: LD_VAR 0 5
37625: PUSH
37626: LD_INT 2
37628: ARRAY
37629: PPUSH
37630: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37634: LD_ADDR_EXP 118
37638: PUSH
37639: LD_EXP 118
37643: PPUSH
37644: LD_VAR 0 4
37648: PPUSH
37649: LD_EXP 118
37653: PUSH
37654: LD_VAR 0 4
37658: ARRAY
37659: PPUSH
37660: LD_VAR 0 3
37664: PPUSH
37665: CALL_OW 3
37669: PPUSH
37670: CALL_OW 1
37674: ST_TO_ADDR
// end ; end ;
37675: GO 37500
37677: POP
37678: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37679: LD_VAR 0 1
37683: PPUSH
37684: LD_EXP 118
37688: PUSH
37689: LD_VAR 0 4
37693: ARRAY
37694: PUSH
37695: LD_INT 0
37697: PLUS
37698: PPUSH
37699: CALL_OW 505
// end ;
37703: LD_VAR 0 2
37707: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37708: LD_INT 0
37710: PPUSH
37711: PPUSH
37712: PPUSH
37713: PPUSH
// if not hack in hackTanks then
37714: LD_VAR 0 1
37718: PUSH
37719: LD_EXP 117
37723: IN
37724: NOT
37725: IFFALSE 37729
// exit ;
37727: GO 37814
// index := GetElementIndex ( hackTanks , hack ) ;
37729: LD_ADDR_VAR 0 5
37733: PUSH
37734: LD_EXP 117
37738: PPUSH
37739: LD_VAR 0 1
37743: PPUSH
37744: CALL 45772 0 2
37748: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37749: LD_ADDR_VAR 0 4
37753: PUSH
37754: DOUBLE
37755: LD_INT 1
37757: DEC
37758: ST_TO_ADDR
37759: LD_EXP 118
37763: PUSH
37764: LD_VAR 0 5
37768: ARRAY
37769: PUSH
37770: FOR_TO
37771: IFFALSE 37812
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37773: LD_EXP 118
37777: PUSH
37778: LD_VAR 0 5
37782: ARRAY
37783: PUSH
37784: LD_VAR 0 4
37788: ARRAY
37789: PUSH
37790: LD_INT 1
37792: ARRAY
37793: PUSH
37794: LD_VAR 0 2
37798: EQUAL
37799: IFFALSE 37810
// KillUnit ( vehicle ) ;
37801: LD_VAR 0 2
37805: PPUSH
37806: CALL_OW 66
37810: GO 37770
37812: POP
37813: POP
// end ;
37814: LD_VAR 0 3
37818: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
37819: LD_EXP 122
37823: NOT
37824: IFFALSE 37957
37826: GO 37828
37828: DISABLE
37829: LD_INT 0
37831: PPUSH
// begin initMiner := true ;
37832: LD_ADDR_EXP 122
37836: PUSH
37837: LD_INT 1
37839: ST_TO_ADDR
// minersList := [ ] ;
37840: LD_ADDR_EXP 123
37844: PUSH
37845: EMPTY
37846: ST_TO_ADDR
// minerMinesList := [ ] ;
37847: LD_ADDR_EXP 124
37851: PUSH
37852: EMPTY
37853: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
37854: LD_ADDR_EXP 125
37858: PUSH
37859: LD_INT 10
37861: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37862: LD_ADDR_VAR 0 1
37866: PUSH
37867: LD_INT 34
37869: PUSH
37870: LD_INT 81
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PPUSH
37877: CALL_OW 69
37881: PUSH
37882: FOR_IN
37883: IFFALSE 37955
// begin if not i in minersList then
37885: LD_VAR 0 1
37889: PUSH
37890: LD_EXP 123
37894: IN
37895: NOT
37896: IFFALSE 37953
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37898: LD_ADDR_EXP 123
37902: PUSH
37903: LD_EXP 123
37907: PPUSH
37908: LD_EXP 123
37912: PUSH
37913: LD_INT 1
37915: PLUS
37916: PPUSH
37917: LD_VAR 0 1
37921: PPUSH
37922: CALL_OW 1
37926: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37927: LD_ADDR_EXP 124
37931: PUSH
37932: LD_EXP 124
37936: PPUSH
37937: LD_EXP 124
37941: PUSH
37942: LD_INT 1
37944: PLUS
37945: PPUSH
37946: EMPTY
37947: PPUSH
37948: CALL_OW 1
37952: ST_TO_ADDR
// end end ;
37953: GO 37882
37955: POP
37956: POP
// end ;
37957: PPOPN 1
37959: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
37960: LD_EXP 122
37964: IFFALSE 37995
37966: PUSH
37967: LD_EXP 124
37971: PPUSH
37972: CALL 43071 0 1
37976: IFTRUE 37994
37978: PUSH
37979: LD_INT 34
37981: PUSH
37982: LD_INT 81
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PPUSH
37989: CALL_OW 69
37993: OR
37994: AND
37995: IFFALSE 38515
37997: GO 37999
37999: DISABLE
38000: LD_INT 0
38002: PPUSH
38003: PPUSH
38004: PPUSH
38005: PPUSH
// begin enable ;
38006: ENABLE
// for i := minerMinesList downto 1 do
38007: LD_ADDR_VAR 0 1
38011: PUSH
38012: DOUBLE
38013: LD_EXP 124
38017: INC
38018: ST_TO_ADDR
38019: LD_INT 1
38021: PUSH
38022: FOR_DOWNTO
38023: IFFALSE 38513
// begin side := GetSide ( minersList [ i ] ) ;
38025: LD_ADDR_VAR 0 3
38029: PUSH
38030: LD_EXP 123
38034: PUSH
38035: LD_VAR 0 1
38039: ARRAY
38040: PPUSH
38041: CALL_OW 255
38045: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
38046: LD_EXP 123
38050: PUSH
38051: LD_VAR 0 1
38055: ARRAY
38056: PPUSH
38057: CALL_OW 300
38061: IFFALSE 38082
38063: PUSH
38064: LD_VAR 0 3
38068: PUSH
38069: LD_OWVAR 2
38073: PUSH
38074: LD_INT 9
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: IN
38081: AND
38082: IFFALSE 38115
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
38084: LD_EXP 123
38088: PUSH
38089: LD_VAR 0 1
38093: ARRAY
38094: PPUSH
38095: LD_EXP 124
38099: PUSH
38100: LD_VAR 0 1
38104: ARRAY
38105: PPUSH
38106: CALL 43071 0 1
38110: PPUSH
38111: CALL_OW 505
// if not minerMinesList [ i ] then
38115: LD_EXP 124
38119: PUSH
38120: LD_VAR 0 1
38124: ARRAY
38125: NOT
38126: IFFALSE 38130
// continue ;
38128: GO 38022
// for j := minerMinesList [ i ] downto 1 do
38130: LD_ADDR_VAR 0 2
38134: PUSH
38135: DOUBLE
38136: LD_EXP 124
38140: PUSH
38141: LD_VAR 0 1
38145: ARRAY
38146: INC
38147: ST_TO_ADDR
38148: LD_INT 1
38150: PUSH
38151: FOR_DOWNTO
38152: IFFALSE 38509
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
38154: LD_EXP 123
38158: PUSH
38159: LD_VAR 0 1
38163: ARRAY
38164: PPUSH
38165: CALL_OW 301
38169: IFTRUE 38189
38171: PUSH
38172: LD_EXP 123
38176: PUSH
38177: LD_VAR 0 1
38181: ARRAY
38182: PPUSH
38183: CALL_OW 305
38187: NOT
38188: OR
38189: IFFALSE 38280
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38191: LD_EXP 124
38195: PUSH
38196: LD_VAR 0 1
38200: ARRAY
38201: PUSH
38202: LD_VAR 0 2
38206: ARRAY
38207: PUSH
38208: LD_INT 1
38210: ARRAY
38211: PPUSH
38212: LD_EXP 124
38216: PUSH
38217: LD_VAR 0 1
38221: ARRAY
38222: PUSH
38223: LD_VAR 0 2
38227: ARRAY
38228: PUSH
38229: LD_INT 2
38231: ARRAY
38232: PPUSH
38233: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38237: LD_ADDR_EXP 124
38241: PUSH
38242: LD_EXP 124
38246: PPUSH
38247: LD_VAR 0 1
38251: PPUSH
38252: LD_EXP 124
38256: PUSH
38257: LD_VAR 0 1
38261: ARRAY
38262: PPUSH
38263: LD_VAR 0 2
38267: PPUSH
38268: CALL_OW 3
38272: PPUSH
38273: CALL_OW 1
38277: ST_TO_ADDR
// continue ;
38278: GO 38151
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38280: LD_ADDR_VAR 0 4
38284: PUSH
38285: LD_EXP 124
38289: PUSH
38290: LD_VAR 0 1
38294: ARRAY
38295: PUSH
38296: LD_VAR 0 2
38300: ARRAY
38301: PUSH
38302: LD_INT 1
38304: ARRAY
38305: PPUSH
38306: LD_EXP 124
38310: PUSH
38311: LD_VAR 0 1
38315: ARRAY
38316: PUSH
38317: LD_VAR 0 2
38321: ARRAY
38322: PUSH
38323: LD_INT 2
38325: ARRAY
38326: PPUSH
38327: CALL_OW 428
38331: ST_TO_ADDR
// if not tmp then
38332: LD_VAR 0 4
38336: NOT
38337: IFFALSE 38341
// continue ;
38339: GO 38151
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38341: LD_VAR 0 4
38345: PUSH
38346: LD_INT 81
38348: PUSH
38349: LD_VAR 0 3
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PPUSH
38358: CALL_OW 69
38362: IN
38363: IFFALSE 38413
38365: PUSH
38366: LD_EXP 124
38370: PUSH
38371: LD_VAR 0 1
38375: ARRAY
38376: PUSH
38377: LD_VAR 0 2
38381: ARRAY
38382: PUSH
38383: LD_INT 1
38385: ARRAY
38386: PPUSH
38387: LD_EXP 124
38391: PUSH
38392: LD_VAR 0 1
38396: ARRAY
38397: PUSH
38398: LD_VAR 0 2
38402: ARRAY
38403: PUSH
38404: LD_INT 2
38406: ARRAY
38407: PPUSH
38408: CALL_OW 458
38412: AND
38413: IFFALSE 38507
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38415: LD_EXP 124
38419: PUSH
38420: LD_VAR 0 1
38424: ARRAY
38425: PUSH
38426: LD_VAR 0 2
38430: ARRAY
38431: PUSH
38432: LD_INT 1
38434: ARRAY
38435: PPUSH
38436: LD_EXP 124
38440: PUSH
38441: LD_VAR 0 1
38445: ARRAY
38446: PUSH
38447: LD_VAR 0 2
38451: ARRAY
38452: PUSH
38453: LD_INT 2
38455: ARRAY
38456: PPUSH
38457: LD_VAR 0 3
38461: PPUSH
38462: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38466: LD_ADDR_EXP 124
38470: PUSH
38471: LD_EXP 124
38475: PPUSH
38476: LD_VAR 0 1
38480: PPUSH
38481: LD_EXP 124
38485: PUSH
38486: LD_VAR 0 1
38490: ARRAY
38491: PPUSH
38492: LD_VAR 0 2
38496: PPUSH
38497: CALL_OW 3
38501: PPUSH
38502: CALL_OW 1
38506: ST_TO_ADDR
// end ; end ;
38507: GO 38151
38509: POP
38510: POP
// end ;
38511: GO 38022
38513: POP
38514: POP
// end ;
38515: PPOPN 4
38517: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
38518: LD_INT 0
38520: PPUSH
38521: PPUSH
38522: PPUSH
38523: PPUSH
// result := false ;
38524: LD_ADDR_VAR 0 4
38528: PUSH
38529: LD_INT 0
38531: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38532: LD_VAR 0 1
38536: PPUSH
38537: CALL_OW 264
38541: PUSH
38542: LD_INT 81
38544: EQUAL
38545: NOT
38546: IFFALSE 38550
// exit ;
38548: GO 38920
// side := GetSide ( unit ) ;
38550: LD_ADDR_VAR 0 6
38554: PUSH
38555: LD_VAR 0 1
38559: PPUSH
38560: CALL_OW 255
38564: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
38565: LD_ADDR_VAR 0 5
38569: PUSH
38570: LD_EXP 123
38574: PPUSH
38575: LD_VAR 0 1
38579: PPUSH
38580: CALL 45772 0 2
38584: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38585: LD_EXP 124
38589: PUSH
38590: LD_VAR 0 5
38594: ARRAY
38595: PUSH
38596: LD_EXP 125
38600: GREATEREQUAL
38601: IFFALSE 38605
// exit ;
38603: GO 38920
// ComMoveXY ( unit , x , y ) ;
38605: LD_VAR 0 1
38609: PPUSH
38610: LD_VAR 0 2
38614: PPUSH
38615: LD_VAR 0 3
38619: PPUSH
38620: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38624: LD_INT 35
38626: PPUSH
38627: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38631: LD_VAR 0 1
38635: PPUSH
38636: LD_VAR 0 2
38640: PPUSH
38641: LD_VAR 0 3
38645: PPUSH
38646: CALL 77828 0 3
38650: NOT
38651: IFFALSE 38664
38653: PUSH
38654: LD_VAR 0 1
38658: PPUSH
38659: CALL_OW 314
38663: AND
38664: IFFALSE 38668
// exit ;
38666: GO 38920
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38668: LD_VAR 0 2
38672: PPUSH
38673: LD_VAR 0 3
38677: PPUSH
38678: CALL_OW 428
38682: PUSH
38683: LD_VAR 0 1
38687: EQUAL
38688: IFFALSE 38702
38690: PUSH
38691: LD_VAR 0 1
38695: PPUSH
38696: CALL_OW 314
38700: NOT
38701: AND
38702: IFFALSE 38624
// if MineAtPos ( x , y ) then
38704: LD_VAR 0 2
38708: PPUSH
38709: LD_VAR 0 3
38713: PPUSH
38714: CALL_OW 458
38718: IFFALSE 38722
// exit ;
38720: GO 38920
// if your_side = side then
38722: LD_OWVAR 2
38726: PUSH
38727: LD_VAR 0 6
38731: EQUAL
38732: IFFALSE 38751
// PlaySoundXY ( x , y , PlantMine ) ;
38734: LD_VAR 0 2
38738: PPUSH
38739: LD_VAR 0 3
38743: PPUSH
38744: LD_STRING PlantMine
38746: PPUSH
38747: CALL_OW 366
// repeat wait ( 1 ) ;
38751: LD_INT 1
38753: PPUSH
38754: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
38758: LD_VAR 0 2
38762: PPUSH
38763: LD_VAR 0 3
38767: PPUSH
38768: LD_VAR 0 6
38772: PPUSH
38773: LD_INT 0
38775: PPUSH
38776: CALL_OW 454
38780: IFFALSE 38751
// if MineAtPos ( x , y ) then
38782: LD_VAR 0 2
38786: PPUSH
38787: LD_VAR 0 3
38791: PPUSH
38792: CALL_OW 458
38796: IFFALSE 38912
// begin for i in minerMinesList [ index ] do
38798: LD_ADDR_VAR 0 7
38802: PUSH
38803: LD_EXP 124
38807: PUSH
38808: LD_VAR 0 5
38812: ARRAY
38813: PUSH
38814: FOR_IN
38815: IFFALSE 38857
// if i [ 1 ] = x and i [ 2 ] = y then
38817: LD_VAR 0 7
38821: PUSH
38822: LD_INT 1
38824: ARRAY
38825: PUSH
38826: LD_VAR 0 2
38830: EQUAL
38831: IFFALSE 38849
38833: PUSH
38834: LD_VAR 0 7
38838: PUSH
38839: LD_INT 2
38841: ARRAY
38842: PUSH
38843: LD_VAR 0 3
38847: EQUAL
38848: AND
38849: IFFALSE 38855
// exit ;
38851: POP
38852: POP
38853: GO 38920
38855: GO 38814
38857: POP
38858: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38859: LD_ADDR_EXP 124
38863: PUSH
38864: LD_EXP 124
38868: PPUSH
38869: LD_VAR 0 5
38873: PUSH
38874: LD_EXP 124
38878: PUSH
38879: LD_VAR 0 5
38883: ARRAY
38884: PUSH
38885: LD_INT 1
38887: PLUS
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PPUSH
38893: LD_VAR 0 2
38897: PUSH
38898: LD_VAR 0 3
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PPUSH
38907: CALL 45989 0 3
38911: ST_TO_ADDR
// end ; result := true ;
38912: LD_ADDR_VAR 0 4
38916: PUSH
38917: LD_INT 1
38919: ST_TO_ADDR
// end ;
38920: LD_VAR 0 4
38924: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38925: LD_INT 0
38927: PPUSH
38928: PPUSH
38929: PPUSH
// if not unit in minersList then
38930: LD_VAR 0 1
38934: PUSH
38935: LD_EXP 123
38939: IN
38940: NOT
38941: IFFALSE 38945
// exit ;
38943: GO 39152
// index := GetElementIndex ( minersList , unit ) ;
38945: LD_ADDR_VAR 0 6
38949: PUSH
38950: LD_EXP 123
38954: PPUSH
38955: LD_VAR 0 1
38959: PPUSH
38960: CALL 45772 0 2
38964: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38965: LD_ADDR_VAR 0 5
38969: PUSH
38970: DOUBLE
38971: LD_EXP 124
38975: PUSH
38976: LD_VAR 0 6
38980: ARRAY
38981: INC
38982: ST_TO_ADDR
38983: LD_INT 1
38985: PUSH
38986: FOR_DOWNTO
38987: IFFALSE 39150
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38989: LD_EXP 124
38993: PUSH
38994: LD_VAR 0 6
38998: ARRAY
38999: PUSH
39000: LD_VAR 0 5
39004: ARRAY
39005: PUSH
39006: LD_INT 1
39008: ARRAY
39009: PPUSH
39010: LD_EXP 124
39014: PUSH
39015: LD_VAR 0 6
39019: ARRAY
39020: PUSH
39021: LD_VAR 0 5
39025: ARRAY
39026: PUSH
39027: LD_INT 2
39029: ARRAY
39030: PPUSH
39031: LD_VAR 0 2
39035: PPUSH
39036: LD_VAR 0 3
39040: PPUSH
39041: CALL_OW 298
39045: PUSH
39046: LD_INT 6
39048: LESS
39049: IFFALSE 39148
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39051: LD_EXP 124
39055: PUSH
39056: LD_VAR 0 6
39060: ARRAY
39061: PUSH
39062: LD_VAR 0 5
39066: ARRAY
39067: PUSH
39068: LD_INT 1
39070: ARRAY
39071: PPUSH
39072: LD_EXP 124
39076: PUSH
39077: LD_VAR 0 6
39081: ARRAY
39082: PUSH
39083: LD_VAR 0 5
39087: ARRAY
39088: PUSH
39089: LD_INT 2
39091: ARRAY
39092: PPUSH
39093: LD_VAR 0 1
39097: PPUSH
39098: CALL_OW 255
39102: PPUSH
39103: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39107: LD_ADDR_EXP 124
39111: PUSH
39112: LD_EXP 124
39116: PPUSH
39117: LD_VAR 0 6
39121: PPUSH
39122: LD_EXP 124
39126: PUSH
39127: LD_VAR 0 6
39131: ARRAY
39132: PPUSH
39133: LD_VAR 0 5
39137: PPUSH
39138: CALL_OW 3
39142: PPUSH
39143: CALL_OW 1
39147: ST_TO_ADDR
// end ; end ;
39148: GO 38986
39150: POP
39151: POP
// end ;
39152: LD_VAR 0 4
39156: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39157: LD_INT 0
39159: PPUSH
39160: PPUSH
39161: PPUSH
39162: PPUSH
39163: PPUSH
39164: PPUSH
39165: PPUSH
39166: PPUSH
39167: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39168: LD_VAR 0 1
39172: PPUSH
39173: CALL_OW 264
39177: PUSH
39178: LD_INT 81
39180: EQUAL
39181: NOT
39182: IFTRUE 39197
39184: PUSH
39185: LD_VAR 0 1
39189: PUSH
39190: LD_EXP 123
39194: IN
39195: NOT
39196: OR
39197: IFFALSE 39201
// exit ;
39199: GO 39527
// index := GetElementIndex ( minersList , unit ) ;
39201: LD_ADDR_VAR 0 6
39205: PUSH
39206: LD_EXP 123
39210: PPUSH
39211: LD_VAR 0 1
39215: PPUSH
39216: CALL 45772 0 2
39220: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39221: LD_ADDR_VAR 0 8
39225: PUSH
39226: LD_EXP 125
39230: PUSH
39231: LD_EXP 124
39235: PUSH
39236: LD_VAR 0 6
39240: ARRAY
39241: MINUS
39242: ST_TO_ADDR
// if not minesFreeAmount then
39243: LD_VAR 0 8
39247: NOT
39248: IFFALSE 39252
// exit ;
39250: GO 39527
// tmp := [ ] ;
39252: LD_ADDR_VAR 0 7
39256: PUSH
39257: EMPTY
39258: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39259: LD_ADDR_VAR 0 5
39263: PUSH
39264: DOUBLE
39265: LD_INT 1
39267: DEC
39268: ST_TO_ADDR
39269: LD_VAR 0 8
39273: PUSH
39274: FOR_TO
39275: IFFALSE 39474
// begin _d := rand ( 0 , 5 ) ;
39277: LD_ADDR_VAR 0 11
39281: PUSH
39282: LD_INT 0
39284: PPUSH
39285: LD_INT 5
39287: PPUSH
39288: CALL_OW 12
39292: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39293: LD_ADDR_VAR 0 12
39297: PUSH
39298: LD_INT 2
39300: PPUSH
39301: LD_INT 6
39303: PPUSH
39304: CALL_OW 12
39308: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39309: LD_ADDR_VAR 0 9
39313: PUSH
39314: LD_VAR 0 2
39318: PPUSH
39319: LD_VAR 0 11
39323: PPUSH
39324: LD_VAR 0 12
39328: PPUSH
39329: CALL_OW 272
39333: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39334: LD_ADDR_VAR 0 10
39338: PUSH
39339: LD_VAR 0 3
39343: PPUSH
39344: LD_VAR 0 11
39348: PPUSH
39349: LD_VAR 0 12
39353: PPUSH
39354: CALL_OW 273
39358: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39359: LD_VAR 0 9
39363: PPUSH
39364: LD_VAR 0 10
39368: PPUSH
39369: CALL_OW 488
39373: IFFALSE 39397
39375: PUSH
39376: LD_VAR 0 9
39380: PUSH
39381: LD_VAR 0 10
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_VAR 0 7
39394: IN
39395: NOT
39396: AND
39397: IFFALSE 39416
39399: PUSH
39400: LD_VAR 0 9
39404: PPUSH
39405: LD_VAR 0 10
39409: PPUSH
39410: CALL_OW 458
39414: NOT
39415: AND
39416: IFFALSE 39458
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39418: LD_ADDR_VAR 0 7
39422: PUSH
39423: LD_VAR 0 7
39427: PPUSH
39428: LD_VAR 0 7
39432: PUSH
39433: LD_INT 1
39435: PLUS
39436: PPUSH
39437: LD_VAR 0 9
39441: PUSH
39442: LD_VAR 0 10
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PPUSH
39451: CALL_OW 1
39455: ST_TO_ADDR
39456: GO 39472
// i := i - 1 ;
39458: LD_ADDR_VAR 0 5
39462: PUSH
39463: LD_VAR 0 5
39467: PUSH
39468: LD_INT 1
39470: MINUS
39471: ST_TO_ADDR
// end ;
39472: GO 39274
39474: POP
39475: POP
// for i in tmp do
39476: LD_ADDR_VAR 0 5
39480: PUSH
39481: LD_VAR 0 7
39485: PUSH
39486: FOR_IN
39487: IFFALSE 39525
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39489: LD_VAR 0 1
39493: PPUSH
39494: LD_VAR 0 5
39498: PUSH
39499: LD_INT 1
39501: ARRAY
39502: PPUSH
39503: LD_VAR 0 5
39507: PUSH
39508: LD_INT 2
39510: ARRAY
39511: PPUSH
39512: CALL 38518 0 3
39516: NOT
39517: IFFALSE 39523
// exit ;
39519: POP
39520: POP
39521: GO 39527
39523: GO 39486
39525: POP
39526: POP
// end ;
39527: LD_VAR 0 4
39531: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
39532: LD_INT 0
39534: PPUSH
39535: PPUSH
39536: PPUSH
39537: PPUSH
39538: PPUSH
39539: PPUSH
39540: PPUSH
39541: PPUSH
39542: PPUSH
// if GetClass ( unit ) <> class_sniper then
39543: LD_VAR 0 1
39547: PPUSH
39548: CALL_OW 257
39552: PUSH
39553: LD_INT 5
39555: NONEQUAL
39556: IFFALSE 39560
// exit ;
39558: GO 40030
// dist := 8 ;
39560: LD_ADDR_VAR 0 5
39564: PUSH
39565: LD_INT 8
39567: ST_TO_ADDR
// viewRange := 12 ;
39568: LD_ADDR_VAR 0 8
39572: PUSH
39573: LD_INT 12
39575: ST_TO_ADDR
// side := GetSide ( unit ) ;
39576: LD_ADDR_VAR 0 6
39580: PUSH
39581: LD_VAR 0 1
39585: PPUSH
39586: CALL_OW 255
39590: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39591: LD_INT 61
39593: PPUSH
39594: LD_VAR 0 6
39598: PPUSH
39599: CALL_OW 321
39603: PUSH
39604: LD_INT 2
39606: EQUAL
39607: IFFALSE 39617
// viewRange := 16 ;
39609: LD_ADDR_VAR 0 8
39613: PUSH
39614: LD_INT 16
39616: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39617: LD_VAR 0 1
39621: PPUSH
39622: LD_VAR 0 2
39626: PPUSH
39627: LD_VAR 0 3
39631: PPUSH
39632: CALL_OW 297
39636: PUSH
39637: LD_VAR 0 5
39641: GREATER
39642: IFFALSE 39721
// begin ComMoveXY ( unit , x , y ) ;
39644: LD_VAR 0 1
39648: PPUSH
39649: LD_VAR 0 2
39653: PPUSH
39654: LD_VAR 0 3
39658: PPUSH
39659: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39663: LD_INT 35
39665: PPUSH
39666: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39670: LD_VAR 0 1
39674: PPUSH
39675: LD_VAR 0 2
39679: PPUSH
39680: LD_VAR 0 3
39684: PPUSH
39685: CALL 77828 0 3
39689: NOT
39690: IFFALSE 39694
// exit ;
39692: GO 40030
// until GetDistUnitXY ( unit , x , y ) < dist ;
39694: LD_VAR 0 1
39698: PPUSH
39699: LD_VAR 0 2
39703: PPUSH
39704: LD_VAR 0 3
39708: PPUSH
39709: CALL_OW 297
39713: PUSH
39714: LD_VAR 0 5
39718: LESS
39719: IFFALSE 39663
// end ; ComTurnXY ( unit , x , y ) ;
39721: LD_VAR 0 1
39725: PPUSH
39726: LD_VAR 0 2
39730: PPUSH
39731: LD_VAR 0 3
39735: PPUSH
39736: CALL_OW 118
// repeat if Multiplayer then
39740: LD_OWVAR 4
39744: IFFALSE 39755
// wait ( 35 ) else
39746: LD_INT 35
39748: PPUSH
39749: CALL_OW 67
39753: GO 39762
// wait ( 5 ) ;
39755: LD_INT 5
39757: PPUSH
39758: CALL_OW 67
// _d := GetDir ( unit ) ;
39762: LD_ADDR_VAR 0 11
39766: PUSH
39767: LD_VAR 0 1
39771: PPUSH
39772: CALL_OW 254
39776: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
39777: LD_ADDR_VAR 0 7
39781: PUSH
39782: LD_VAR 0 1
39786: PPUSH
39787: CALL_OW 250
39791: PPUSH
39792: LD_VAR 0 1
39796: PPUSH
39797: CALL_OW 251
39801: PPUSH
39802: LD_VAR 0 2
39806: PPUSH
39807: LD_VAR 0 3
39811: PPUSH
39812: CALL 80464 0 4
39816: ST_TO_ADDR
// until dir = _d ;
39817: LD_VAR 0 7
39821: PUSH
39822: LD_VAR 0 11
39826: EQUAL
39827: IFFALSE 39740
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
39829: LD_ADDR_VAR 0 9
39833: PUSH
39834: LD_VAR 0 1
39838: PPUSH
39839: CALL_OW 250
39843: PPUSH
39844: LD_VAR 0 7
39848: PPUSH
39849: LD_VAR 0 5
39853: PPUSH
39854: CALL_OW 272
39858: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
39859: LD_ADDR_VAR 0 10
39863: PUSH
39864: LD_VAR 0 1
39868: PPUSH
39869: CALL_OW 251
39873: PPUSH
39874: LD_VAR 0 7
39878: PPUSH
39879: LD_VAR 0 5
39883: PPUSH
39884: CALL_OW 273
39888: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39889: LD_VAR 0 9
39893: PPUSH
39894: LD_VAR 0 10
39898: PPUSH
39899: CALL_OW 488
39903: NOT
39904: IFFALSE 39908
// exit ;
39906: GO 40030
// ComAnimCustom ( unit , 1 ) ;
39908: LD_VAR 0 1
39912: PPUSH
39913: LD_INT 1
39915: PPUSH
39916: CALL_OW 592
// p := 0 ;
39920: LD_ADDR_VAR 0 12
39924: PUSH
39925: LD_INT 0
39927: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39928: LD_VAR 0 9
39932: PPUSH
39933: LD_VAR 0 10
39937: PPUSH
39938: LD_VAR 0 6
39942: PPUSH
39943: LD_VAR 0 8
39947: PPUSH
39948: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
39952: LD_INT 35
39954: PPUSH
39955: CALL_OW 67
// p := Inc ( p ) ;
39959: LD_ADDR_VAR 0 12
39963: PUSH
39964: LD_VAR 0 12
39968: PPUSH
39969: CALL 80420 0 1
39973: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
39974: LD_VAR 0 12
39978: PUSH
39979: LD_INT 3
39981: EQUAL
39982: IFTRUE 39996
39984: PUSH
39985: LD_VAR 0 1
39989: PPUSH
39990: CALL_OW 302
39994: NOT
39995: OR
39996: IFTRUE 40009
39998: PUSH
39999: LD_VAR 0 1
40003: PPUSH
40004: CALL_OW 301
40008: OR
40009: IFFALSE 39952
// RemoveSeeing ( _x , _y , side ) ;
40011: LD_VAR 0 9
40015: PPUSH
40016: LD_VAR 0 10
40020: PPUSH
40021: LD_VAR 0 6
40025: PPUSH
40026: CALL_OW 331
// end ;
40030: LD_VAR 0 4
40034: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
40035: LD_INT 0
40037: PPUSH
40038: PPUSH
40039: PPUSH
40040: PPUSH
40041: PPUSH
40042: PPUSH
40043: PPUSH
40044: PPUSH
40045: PPUSH
40046: PPUSH
40047: PPUSH
// if not unit then
40048: LD_VAR 0 1
40052: NOT
40053: IFFALSE 40057
// exit ;
40055: GO 40328
// side := GetSide ( unit ) ;
40057: LD_ADDR_VAR 0 3
40061: PUSH
40062: LD_VAR 0 1
40066: PPUSH
40067: CALL_OW 255
40071: ST_TO_ADDR
// x := GetX ( unit ) ;
40072: LD_ADDR_VAR 0 5
40076: PUSH
40077: LD_VAR 0 1
40081: PPUSH
40082: CALL_OW 250
40086: ST_TO_ADDR
// y := GetY ( unit ) ;
40087: LD_ADDR_VAR 0 6
40091: PUSH
40092: LD_VAR 0 1
40096: PPUSH
40097: CALL_OW 251
40101: ST_TO_ADDR
// r := 8 ;
40102: LD_ADDR_VAR 0 4
40106: PUSH
40107: LD_INT 8
40109: ST_TO_ADDR
// if x - r < 0 then
40110: LD_VAR 0 5
40114: PUSH
40115: LD_VAR 0 4
40119: MINUS
40120: PUSH
40121: LD_INT 0
40123: LESS
40124: IFFALSE 40136
// min_x := 0 else
40126: LD_ADDR_VAR 0 7
40130: PUSH
40131: LD_INT 0
40133: ST_TO_ADDR
40134: GO 40152
// min_x := x - r ;
40136: LD_ADDR_VAR 0 7
40140: PUSH
40141: LD_VAR 0 5
40145: PUSH
40146: LD_VAR 0 4
40150: MINUS
40151: ST_TO_ADDR
// if y - r < 0 then
40152: LD_VAR 0 6
40156: PUSH
40157: LD_VAR 0 4
40161: MINUS
40162: PUSH
40163: LD_INT 0
40165: LESS
40166: IFFALSE 40178
// min_y := 0 else
40168: LD_ADDR_VAR 0 8
40172: PUSH
40173: LD_INT 0
40175: ST_TO_ADDR
40176: GO 40194
// min_y := y - r ;
40178: LD_ADDR_VAR 0 8
40182: PUSH
40183: LD_VAR 0 6
40187: PUSH
40188: LD_VAR 0 4
40192: MINUS
40193: ST_TO_ADDR
// max_x := x + r ;
40194: LD_ADDR_VAR 0 9
40198: PUSH
40199: LD_VAR 0 5
40203: PUSH
40204: LD_VAR 0 4
40208: PLUS
40209: ST_TO_ADDR
// max_y := y + r ;
40210: LD_ADDR_VAR 0 10
40214: PUSH
40215: LD_VAR 0 6
40219: PUSH
40220: LD_VAR 0 4
40224: PLUS
40225: ST_TO_ADDR
// for _x = min_x to max_x do
40226: LD_ADDR_VAR 0 11
40230: PUSH
40231: DOUBLE
40232: LD_VAR 0 7
40236: DEC
40237: ST_TO_ADDR
40238: LD_VAR 0 9
40242: PUSH
40243: FOR_TO
40244: IFFALSE 40326
// for _y = min_y to max_y do
40246: LD_ADDR_VAR 0 12
40250: PUSH
40251: DOUBLE
40252: LD_VAR 0 8
40256: DEC
40257: ST_TO_ADDR
40258: LD_VAR 0 10
40262: PUSH
40263: FOR_TO
40264: IFFALSE 40322
// begin if not ValidHex ( _x , _y ) then
40266: LD_VAR 0 11
40270: PPUSH
40271: LD_VAR 0 12
40275: PPUSH
40276: CALL_OW 488
40280: NOT
40281: IFFALSE 40285
// continue ;
40283: GO 40263
// if MineAtPos ( _x , _y ) then
40285: LD_VAR 0 11
40289: PPUSH
40290: LD_VAR 0 12
40294: PPUSH
40295: CALL_OW 458
40299: IFFALSE 40320
// ViewMineAtPos ( _x , _y , side ) ;
40301: LD_VAR 0 11
40305: PPUSH
40306: LD_VAR 0 12
40310: PPUSH
40311: LD_VAR 0 3
40315: PPUSH
40316: CALL_OW 457
// end ;
40320: GO 40263
40322: POP
40323: POP
40324: GO 40243
40326: POP
40327: POP
// end ;
40328: LD_VAR 0 2
40332: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
40333: LD_INT 0
40335: PPUSH
40336: PPUSH
40337: PPUSH
40338: PPUSH
40339: PPUSH
40340: PPUSH
40341: PPUSH
// if not units then
40342: LD_VAR 0 1
40346: NOT
40347: IFFALSE 40351
// exit ;
40349: GO 40815
// scaners := [ ] ;
40351: LD_ADDR_VAR 0 6
40355: PUSH
40356: EMPTY
40357: ST_TO_ADDR
// for i in units do
40358: LD_ADDR_VAR 0 3
40362: PUSH
40363: LD_VAR 0 1
40367: PUSH
40368: FOR_IN
40369: IFFALSE 40526
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
40371: LD_VAR 0 3
40375: PPUSH
40376: CALL_OW 264
40380: PUSH
40381: LD_INT 11
40383: NONEQUAL
40384: IFTRUE 40398
40386: PUSH
40387: LD_VAR 0 3
40391: PPUSH
40392: CALL_OW 302
40396: NOT
40397: OR
40398: IFTRUE 40415
40400: PUSH
40401: LD_VAR 0 3
40405: PPUSH
40406: CALL_OW 110
40410: PUSH
40411: LD_INT 502
40413: EQUAL
40414: OR
40415: IFFALSE 40419
// continue ;
40417: GO 40368
// ComStop ( i ) ;
40419: LD_VAR 0 3
40423: PPUSH
40424: CALL_OW 141
// x := GetX ( i ) ;
40428: LD_ADDR_VAR 0 4
40432: PUSH
40433: LD_VAR 0 3
40437: PPUSH
40438: CALL_OW 250
40442: ST_TO_ADDR
// y := GetY ( i ) ;
40443: LD_ADDR_VAR 0 5
40447: PUSH
40448: LD_VAR 0 3
40452: PPUSH
40453: CALL_OW 251
40457: ST_TO_ADDR
// if GetSide ( i ) = your_side then
40458: LD_VAR 0 3
40462: PPUSH
40463: CALL_OW 255
40467: PUSH
40468: LD_OWVAR 2
40472: EQUAL
40473: IFFALSE 40492
// PlaySoundXY ( x , y , mineDetector ) ;
40475: LD_VAR 0 4
40479: PPUSH
40480: LD_VAR 0 5
40484: PPUSH
40485: LD_STRING mineDetector
40487: PPUSH
40488: CALL_OW 366
// scaners := Join ( scaners , i ) ;
40492: LD_ADDR_VAR 0 6
40496: PUSH
40497: LD_VAR 0 6
40501: PPUSH
40502: LD_VAR 0 3
40506: PPUSH
40507: CALL 79047 0 2
40511: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
40512: LD_VAR 0 3
40516: PPUSH
40517: LD_INT 502
40519: PPUSH
40520: CALL_OW 109
// end ;
40524: GO 40368
40526: POP
40527: POP
// if not scaners then
40528: LD_VAR 0 6
40532: NOT
40533: IFFALSE 40537
// exit ;
40535: GO 40815
// wait ( 3 ) ;
40537: LD_INT 3
40539: PPUSH
40540: CALL_OW 67
// timer := 6 ;
40544: LD_ADDR_VAR 0 7
40548: PUSH
40549: LD_INT 6
40551: ST_TO_ADDR
// repeat for i in scaners do
40552: LD_ADDR_VAR 0 3
40556: PUSH
40557: LD_VAR 0 6
40561: PUSH
40562: FOR_IN
40563: IFFALSE 40713
// begin side := GetSide ( i ) ;
40565: LD_ADDR_VAR 0 8
40569: PUSH
40570: LD_VAR 0 3
40574: PPUSH
40575: CALL_OW 255
40579: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
40580: LD_VAR 0 3
40584: PPUSH
40585: CALL_OW 302
40589: NOT
40590: IFTRUE 40603
40592: PUSH
40593: LD_VAR 0 3
40597: PPUSH
40598: CALL_OW 314
40602: OR
40603: IFTRUE 40634
40605: PUSH
40606: LD_VAR 0 3
40610: PPUSH
40611: CALL_OW 263
40615: PUSH
40616: LD_INT 1
40618: EQUAL
40619: IFFALSE 40633
40621: PUSH
40622: LD_VAR 0 3
40626: PPUSH
40627: CALL_OW 311
40631: NOT
40632: AND
40633: OR
40634: IFFALSE 40678
// begin SetUnitDisplayNumber ( i , 0 ) ;
40636: LD_VAR 0 3
40640: PPUSH
40641: LD_INT 0
40643: PPUSH
40644: CALL_OW 505
// SetTag ( i , 0 ) ;
40648: LD_VAR 0 3
40652: PPUSH
40653: LD_INT 0
40655: PPUSH
40656: CALL_OW 109
// scaners := scaners diff i ;
40660: LD_ADDR_VAR 0 6
40664: PUSH
40665: LD_VAR 0 6
40669: PUSH
40670: LD_VAR 0 3
40674: DIFF
40675: ST_TO_ADDR
// continue ;
40676: GO 40562
// end ; if side in [ your_side , 9 ] then
40678: LD_VAR 0 8
40682: PUSH
40683: LD_OWVAR 2
40687: PUSH
40688: LD_INT 9
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: IN
40695: IFFALSE 40711
// SetUnitDisplayNumber ( i , timer ) ;
40697: LD_VAR 0 3
40701: PPUSH
40702: LD_VAR 0 7
40706: PPUSH
40707: CALL_OW 505
// end ;
40711: GO 40562
40713: POP
40714: POP
// if not scaners then
40715: LD_VAR 0 6
40719: NOT
40720: IFFALSE 40724
// exit ;
40722: GO 40815
// timer := Dec ( timer ) ;
40724: LD_ADDR_VAR 0 7
40728: PUSH
40729: LD_VAR 0 7
40733: PPUSH
40734: CALL 80442 0 1
40738: ST_TO_ADDR
// wait ( 0 0$1 ) ;
40739: LD_INT 35
40741: PPUSH
40742: CALL_OW 67
// until timer = 0 ;
40746: LD_VAR 0 7
40750: PUSH
40751: LD_INT 0
40753: EQUAL
40754: IFFALSE 40552
// if not scaners then
40756: LD_VAR 0 6
40760: NOT
40761: IFFALSE 40765
// exit ;
40763: GO 40815
// for i in scaners do
40765: LD_ADDR_VAR 0 3
40769: PUSH
40770: LD_VAR 0 6
40774: PUSH
40775: FOR_IN
40776: IFFALSE 40813
// begin SetUnitDisplayNumber ( i , 0 ) ;
40778: LD_VAR 0 3
40782: PPUSH
40783: LD_INT 0
40785: PPUSH
40786: CALL_OW 505
// SetTag ( i , 0 ) ;
40790: LD_VAR 0 3
40794: PPUSH
40795: LD_INT 0
40797: PPUSH
40798: CALL_OW 109
// RevealDetectorMine ( i ) ;
40802: LD_VAR 0 3
40806: PPUSH
40807: CALL 40035 0 1
// end ;
40811: GO 40775
40813: POP
40814: POP
// end ;
40815: LD_VAR 0 2
40819: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
40820: LD_INT 0
40822: PPUSH
// if p1 = mine_detector_mode then
40823: LD_VAR 0 2
40827: PUSH
40828: LD_INT 103
40830: EQUAL
40831: IFFALSE 40842
// DetectMine ( units ) ;
40833: LD_VAR 0 1
40837: PPUSH
40838: CALL 40333 0 1
// end ; end_of_file
40842: LD_VAR 0 7
40846: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40847: LD_INT 0
40849: PPUSH
40850: PPUSH
// if exist_mode then
40851: LD_VAR 0 2
40855: IFFALSE 40901
// begin unit := CreateCharacter ( prefix & ident ) ;
40857: LD_ADDR_VAR 0 5
40861: PUSH
40862: LD_VAR 0 3
40866: PUSH
40867: LD_VAR 0 1
40871: STR
40872: PPUSH
40873: CALL_OW 34
40877: ST_TO_ADDR
// if unit then
40878: LD_VAR 0 5
40882: IFFALSE 40899
// DeleteCharacters ( prefix & ident ) ;
40884: LD_VAR 0 3
40888: PUSH
40889: LD_VAR 0 1
40893: STR
40894: PPUSH
40895: CALL_OW 40
// end else
40899: GO 40916
// unit := NewCharacter ( ident ) ;
40901: LD_ADDR_VAR 0 5
40905: PUSH
40906: LD_VAR 0 1
40910: PPUSH
40911: CALL_OW 25
40915: ST_TO_ADDR
// result := unit ;
40916: LD_ADDR_VAR 0 4
40920: PUSH
40921: LD_VAR 0 5
40925: ST_TO_ADDR
// end ;
40926: LD_VAR 0 4
40930: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
40931: LD_INT 0
40933: PPUSH
40934: PPUSH
// if exist_mode then
40935: LD_VAR 0 2
40939: IFFALSE 40964
// unit := CreateCharacter ( prefix & ident ) else
40941: LD_ADDR_VAR 0 5
40945: PUSH
40946: LD_VAR 0 3
40950: PUSH
40951: LD_VAR 0 1
40955: STR
40956: PPUSH
40957: CALL_OW 34
40961: ST_TO_ADDR
40962: GO 40979
// unit := NewCharacter ( ident ) ;
40964: LD_ADDR_VAR 0 5
40968: PUSH
40969: LD_VAR 0 1
40973: PPUSH
40974: CALL_OW 25
40978: ST_TO_ADDR
// result := unit ;
40979: LD_ADDR_VAR 0 4
40983: PUSH
40984: LD_VAR 0 5
40988: ST_TO_ADDR
// end ;
40989: LD_VAR 0 4
40993: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40994: LD_INT 0
40996: PPUSH
40997: PPUSH
// if not side or not nation then
40998: LD_VAR 0 1
41002: NOT
41003: IFTRUE 41012
41005: PUSH
41006: LD_VAR 0 2
41010: NOT
41011: OR
41012: IFFALSE 41016
// exit ;
41014: GO 41810
// case nation of nation_american :
41016: LD_VAR 0 2
41020: PUSH
41021: LD_INT 1
41023: DOUBLE
41024: EQUAL
41025: IFTRUE 41029
41027: GO 41251
41029: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
41030: LD_ADDR_VAR 0 4
41034: PUSH
41035: LD_INT 35
41037: PUSH
41038: LD_INT 45
41040: PUSH
41041: LD_INT 46
41043: PUSH
41044: LD_INT 47
41046: PUSH
41047: LD_INT 82
41049: PUSH
41050: LD_INT 83
41052: PUSH
41053: LD_INT 84
41055: PUSH
41056: LD_INT 85
41058: PUSH
41059: LD_INT 86
41061: PUSH
41062: LD_INT 1
41064: PUSH
41065: LD_INT 2
41067: PUSH
41068: LD_INT 6
41070: PUSH
41071: LD_INT 15
41073: PUSH
41074: LD_INT 16
41076: PUSH
41077: LD_INT 7
41079: PUSH
41080: LD_INT 12
41082: PUSH
41083: LD_INT 13
41085: PUSH
41086: LD_INT 10
41088: PUSH
41089: LD_INT 14
41091: PUSH
41092: LD_INT 20
41094: PUSH
41095: LD_INT 21
41097: PUSH
41098: LD_INT 22
41100: PUSH
41101: LD_INT 25
41103: PUSH
41104: LD_INT 32
41106: PUSH
41107: LD_INT 27
41109: PUSH
41110: LD_INT 36
41112: PUSH
41113: LD_INT 69
41115: PUSH
41116: LD_INT 39
41118: PUSH
41119: LD_INT 34
41121: PUSH
41122: LD_INT 40
41124: PUSH
41125: LD_INT 48
41127: PUSH
41128: LD_INT 49
41130: PUSH
41131: LD_INT 50
41133: PUSH
41134: LD_INT 51
41136: PUSH
41137: LD_INT 52
41139: PUSH
41140: LD_INT 53
41142: PUSH
41143: LD_INT 54
41145: PUSH
41146: LD_INT 55
41148: PUSH
41149: LD_INT 56
41151: PUSH
41152: LD_INT 57
41154: PUSH
41155: LD_INT 58
41157: PUSH
41158: LD_INT 59
41160: PUSH
41161: LD_INT 60
41163: PUSH
41164: LD_INT 61
41166: PUSH
41167: LD_INT 62
41169: PUSH
41170: LD_INT 80
41172: PUSH
41173: LD_INT 82
41175: PUSH
41176: LD_INT 83
41178: PUSH
41179: LD_INT 84
41181: PUSH
41182: LD_INT 85
41184: PUSH
41185: LD_INT 86
41187: PUSH
41188: LD_INT 90
41190: PUSH
41191: LD_INT 93
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: ST_TO_ADDR
41249: GO 41732
41251: LD_INT 2
41253: DOUBLE
41254: EQUAL
41255: IFTRUE 41259
41257: GO 41493
41259: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
41260: LD_ADDR_VAR 0 4
41264: PUSH
41265: LD_INT 35
41267: PUSH
41268: LD_INT 45
41270: PUSH
41271: LD_INT 46
41273: PUSH
41274: LD_INT 47
41276: PUSH
41277: LD_INT 82
41279: PUSH
41280: LD_INT 83
41282: PUSH
41283: LD_INT 84
41285: PUSH
41286: LD_INT 85
41288: PUSH
41289: LD_INT 87
41291: PUSH
41292: LD_INT 70
41294: PUSH
41295: LD_INT 1
41297: PUSH
41298: LD_INT 11
41300: PUSH
41301: LD_INT 3
41303: PUSH
41304: LD_INT 4
41306: PUSH
41307: LD_INT 5
41309: PUSH
41310: LD_INT 6
41312: PUSH
41313: LD_INT 15
41315: PUSH
41316: LD_INT 18
41318: PUSH
41319: LD_INT 7
41321: PUSH
41322: LD_INT 17
41324: PUSH
41325: LD_INT 8
41327: PUSH
41328: LD_INT 20
41330: PUSH
41331: LD_INT 21
41333: PUSH
41334: LD_INT 22
41336: PUSH
41337: LD_INT 72
41339: PUSH
41340: LD_INT 26
41342: PUSH
41343: LD_INT 69
41345: PUSH
41346: LD_INT 39
41348: PUSH
41349: LD_INT 40
41351: PUSH
41352: LD_INT 41
41354: PUSH
41355: LD_INT 42
41357: PUSH
41358: LD_INT 43
41360: PUSH
41361: LD_INT 48
41363: PUSH
41364: LD_INT 49
41366: PUSH
41367: LD_INT 50
41369: PUSH
41370: LD_INT 51
41372: PUSH
41373: LD_INT 52
41375: PUSH
41376: LD_INT 53
41378: PUSH
41379: LD_INT 54
41381: PUSH
41382: LD_INT 55
41384: PUSH
41385: LD_INT 56
41387: PUSH
41388: LD_INT 60
41390: PUSH
41391: LD_INT 61
41393: PUSH
41394: LD_INT 62
41396: PUSH
41397: LD_INT 66
41399: PUSH
41400: LD_INT 67
41402: PUSH
41403: LD_INT 68
41405: PUSH
41406: LD_INT 81
41408: PUSH
41409: LD_INT 82
41411: PUSH
41412: LD_INT 83
41414: PUSH
41415: LD_INT 84
41417: PUSH
41418: LD_INT 85
41420: PUSH
41421: LD_INT 87
41423: PUSH
41424: LD_INT 88
41426: PUSH
41427: LD_INT 92
41429: PUSH
41430: LD_INT 94
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: ST_TO_ADDR
41491: GO 41732
41493: LD_INT 3
41495: DOUBLE
41496: EQUAL
41497: IFTRUE 41501
41499: GO 41731
41501: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
41502: LD_ADDR_VAR 0 4
41506: PUSH
41507: LD_INT 46
41509: PUSH
41510: LD_INT 47
41512: PUSH
41513: LD_INT 1
41515: PUSH
41516: LD_INT 2
41518: PUSH
41519: LD_INT 82
41521: PUSH
41522: LD_INT 83
41524: PUSH
41525: LD_INT 84
41527: PUSH
41528: LD_INT 85
41530: PUSH
41531: LD_INT 86
41533: PUSH
41534: LD_INT 11
41536: PUSH
41537: LD_INT 9
41539: PUSH
41540: LD_INT 20
41542: PUSH
41543: LD_INT 19
41545: PUSH
41546: LD_INT 21
41548: PUSH
41549: LD_INT 24
41551: PUSH
41552: LD_INT 22
41554: PUSH
41555: LD_INT 25
41557: PUSH
41558: LD_INT 28
41560: PUSH
41561: LD_INT 29
41563: PUSH
41564: LD_INT 30
41566: PUSH
41567: LD_INT 31
41569: PUSH
41570: LD_INT 37
41572: PUSH
41573: LD_INT 38
41575: PUSH
41576: LD_INT 32
41578: PUSH
41579: LD_INT 27
41581: PUSH
41582: LD_INT 33
41584: PUSH
41585: LD_INT 69
41587: PUSH
41588: LD_INT 39
41590: PUSH
41591: LD_INT 34
41593: PUSH
41594: LD_INT 40
41596: PUSH
41597: LD_INT 71
41599: PUSH
41600: LD_INT 23
41602: PUSH
41603: LD_INT 44
41605: PUSH
41606: LD_INT 48
41608: PUSH
41609: LD_INT 49
41611: PUSH
41612: LD_INT 50
41614: PUSH
41615: LD_INT 51
41617: PUSH
41618: LD_INT 52
41620: PUSH
41621: LD_INT 53
41623: PUSH
41624: LD_INT 54
41626: PUSH
41627: LD_INT 55
41629: PUSH
41630: LD_INT 56
41632: PUSH
41633: LD_INT 57
41635: PUSH
41636: LD_INT 58
41638: PUSH
41639: LD_INT 59
41641: PUSH
41642: LD_INT 63
41644: PUSH
41645: LD_INT 64
41647: PUSH
41648: LD_INT 65
41650: PUSH
41651: LD_INT 82
41653: PUSH
41654: LD_INT 83
41656: PUSH
41657: LD_INT 84
41659: PUSH
41660: LD_INT 85
41662: PUSH
41663: LD_INT 86
41665: PUSH
41666: LD_INT 89
41668: PUSH
41669: LD_INT 91
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: ST_TO_ADDR
41729: GO 41732
41731: POP
// if state > - 1 and state < 3 then
41732: LD_VAR 0 3
41736: PUSH
41737: LD_INT 1
41739: NEG
41740: GREATER
41741: IFFALSE 41753
41743: PUSH
41744: LD_VAR 0 3
41748: PUSH
41749: LD_INT 3
41751: LESS
41752: AND
41753: IFFALSE 41810
// for i in result do
41755: LD_ADDR_VAR 0 5
41759: PUSH
41760: LD_VAR 0 4
41764: PUSH
41765: FOR_IN
41766: IFFALSE 41808
// if GetTech ( i , side ) <> state then
41768: LD_VAR 0 5
41772: PPUSH
41773: LD_VAR 0 1
41777: PPUSH
41778: CALL_OW 321
41782: PUSH
41783: LD_VAR 0 3
41787: NONEQUAL
41788: IFFALSE 41806
// result := result diff i ;
41790: LD_ADDR_VAR 0 4
41794: PUSH
41795: LD_VAR 0 4
41799: PUSH
41800: LD_VAR 0 5
41804: DIFF
41805: ST_TO_ADDR
41806: GO 41765
41808: POP
41809: POP
// end ;
41810: LD_VAR 0 4
41814: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41815: LD_INT 0
41817: PPUSH
41818: PPUSH
41819: PPUSH
// result := true ;
41820: LD_ADDR_VAR 0 3
41824: PUSH
41825: LD_INT 1
41827: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41828: LD_ADDR_VAR 0 5
41832: PUSH
41833: LD_VAR 0 2
41837: PPUSH
41838: CALL_OW 480
41842: ST_TO_ADDR
// if not tmp then
41843: LD_VAR 0 5
41847: NOT
41848: IFFALSE 41852
// exit ;
41850: GO 41901
// for i in tmp do
41852: LD_ADDR_VAR 0 4
41856: PUSH
41857: LD_VAR 0 5
41861: PUSH
41862: FOR_IN
41863: IFFALSE 41899
// if GetTech ( i , side ) <> state_researched then
41865: LD_VAR 0 4
41869: PPUSH
41870: LD_VAR 0 1
41874: PPUSH
41875: CALL_OW 321
41879: PUSH
41880: LD_INT 2
41882: NONEQUAL
41883: IFFALSE 41897
// begin result := false ;
41885: LD_ADDR_VAR 0 3
41889: PUSH
41890: LD_INT 0
41892: ST_TO_ADDR
// exit ;
41893: POP
41894: POP
41895: GO 41901
// end ;
41897: GO 41862
41899: POP
41900: POP
// end ;
41901: LD_VAR 0 3
41905: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41906: LD_INT 0
41908: PPUSH
41909: PPUSH
41910: PPUSH
41911: PPUSH
41912: PPUSH
41913: PPUSH
41914: PPUSH
41915: PPUSH
41916: PPUSH
41917: PPUSH
41918: PPUSH
41919: PPUSH
41920: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41921: LD_VAR 0 1
41925: NOT
41926: IFTRUE 41943
41928: PUSH
41929: LD_VAR 0 1
41933: PPUSH
41934: CALL_OW 257
41938: PUSH
41939: LD_INT 9
41941: NONEQUAL
41942: OR
41943: IFFALSE 41947
// exit ;
41945: GO 42526
// side := GetSide ( unit ) ;
41947: LD_ADDR_VAR 0 9
41951: PUSH
41952: LD_VAR 0 1
41956: PPUSH
41957: CALL_OW 255
41961: ST_TO_ADDR
// tech_space := tech_spacanom ;
41962: LD_ADDR_VAR 0 12
41966: PUSH
41967: LD_INT 29
41969: ST_TO_ADDR
// tech_time := tech_taurad ;
41970: LD_ADDR_VAR 0 13
41974: PUSH
41975: LD_INT 28
41977: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41978: LD_ADDR_VAR 0 11
41982: PUSH
41983: LD_VAR 0 1
41987: PPUSH
41988: CALL_OW 310
41992: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41993: LD_VAR 0 11
41997: PPUSH
41998: CALL_OW 247
42002: PUSH
42003: LD_INT 2
42005: EQUAL
42006: IFFALSE 42010
// exit ;
42008: GO 42526
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42010: LD_ADDR_VAR 0 8
42014: PUSH
42015: LD_INT 81
42017: PUSH
42018: LD_VAR 0 9
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 3
42029: PUSH
42030: LD_INT 21
42032: PUSH
42033: LD_INT 3
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PPUSH
42048: CALL_OW 69
42052: ST_TO_ADDR
// if not tmp then
42053: LD_VAR 0 8
42057: NOT
42058: IFFALSE 42062
// exit ;
42060: GO 42526
// if in_unit then
42062: LD_VAR 0 11
42066: IFFALSE 42090
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42068: LD_ADDR_VAR 0 10
42072: PUSH
42073: LD_VAR 0 8
42077: PPUSH
42078: LD_VAR 0 11
42082: PPUSH
42083: CALL_OW 74
42087: ST_TO_ADDR
42088: GO 42110
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42090: LD_ADDR_VAR 0 10
42094: PUSH
42095: LD_VAR 0 8
42099: PPUSH
42100: LD_VAR 0 1
42104: PPUSH
42105: CALL_OW 74
42109: ST_TO_ADDR
// if not enemy then
42110: LD_VAR 0 10
42114: NOT
42115: IFFALSE 42119
// exit ;
42117: GO 42526
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42119: LD_VAR 0 11
42123: IFFALSE 42145
42125: PUSH
42126: LD_VAR 0 11
42130: PPUSH
42131: LD_VAR 0 10
42135: PPUSH
42136: CALL_OW 296
42140: PUSH
42141: LD_INT 13
42143: GREATER
42144: AND
42145: IFTRUE 42167
42147: PUSH
42148: LD_VAR 0 1
42152: PPUSH
42153: LD_VAR 0 10
42157: PPUSH
42158: CALL_OW 296
42162: PUSH
42163: LD_INT 12
42165: GREATER
42166: OR
42167: IFFALSE 42171
// exit ;
42169: GO 42526
// missile := [ 1 ] ;
42171: LD_ADDR_VAR 0 14
42175: PUSH
42176: LD_INT 1
42178: PUSH
42179: EMPTY
42180: LIST
42181: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42182: LD_VAR 0 9
42186: PPUSH
42187: LD_VAR 0 12
42191: PPUSH
42192: CALL_OW 325
42196: IFFALSE 42225
// missile := Replace ( missile , missile + 1 , 2 ) ;
42198: LD_ADDR_VAR 0 14
42202: PUSH
42203: LD_VAR 0 14
42207: PPUSH
42208: LD_VAR 0 14
42212: PUSH
42213: LD_INT 1
42215: PLUS
42216: PPUSH
42217: LD_INT 2
42219: PPUSH
42220: CALL_OW 1
42224: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42225: LD_VAR 0 9
42229: PPUSH
42230: LD_VAR 0 13
42234: PPUSH
42235: CALL_OW 325
42239: IFFALSE 42263
42241: PUSH
42242: LD_VAR 0 10
42246: PPUSH
42247: CALL_OW 255
42251: PPUSH
42252: LD_VAR 0 13
42256: PPUSH
42257: CALL_OW 325
42261: NOT
42262: AND
42263: IFFALSE 42292
// missile := Replace ( missile , missile + 1 , 3 ) ;
42265: LD_ADDR_VAR 0 14
42269: PUSH
42270: LD_VAR 0 14
42274: PPUSH
42275: LD_VAR 0 14
42279: PUSH
42280: LD_INT 1
42282: PLUS
42283: PPUSH
42284: LD_INT 3
42286: PPUSH
42287: CALL_OW 1
42291: ST_TO_ADDR
// if missile < 2 then
42292: LD_VAR 0 14
42296: PUSH
42297: LD_INT 2
42299: LESS
42300: IFFALSE 42304
// exit ;
42302: GO 42526
// x := GetX ( enemy ) ;
42304: LD_ADDR_VAR 0 4
42308: PUSH
42309: LD_VAR 0 10
42313: PPUSH
42314: CALL_OW 250
42318: ST_TO_ADDR
// y := GetY ( enemy ) ;
42319: LD_ADDR_VAR 0 5
42323: PUSH
42324: LD_VAR 0 10
42328: PPUSH
42329: CALL_OW 251
42333: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42334: LD_ADDR_VAR 0 6
42338: PUSH
42339: LD_VAR 0 4
42343: PUSH
42344: LD_INT 1
42346: NEG
42347: PPUSH
42348: LD_INT 1
42350: PPUSH
42351: CALL_OW 12
42355: PLUS
42356: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42357: LD_ADDR_VAR 0 7
42361: PUSH
42362: LD_VAR 0 5
42366: PUSH
42367: LD_INT 1
42369: NEG
42370: PPUSH
42371: LD_INT 1
42373: PPUSH
42374: CALL_OW 12
42378: PLUS
42379: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42380: LD_VAR 0 6
42384: PPUSH
42385: LD_VAR 0 7
42389: PPUSH
42390: CALL_OW 488
42394: NOT
42395: IFFALSE 42417
// begin _x := x ;
42397: LD_ADDR_VAR 0 6
42401: PUSH
42402: LD_VAR 0 4
42406: ST_TO_ADDR
// _y := y ;
42407: LD_ADDR_VAR 0 7
42411: PUSH
42412: LD_VAR 0 5
42416: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42417: LD_ADDR_VAR 0 3
42421: PUSH
42422: LD_INT 1
42424: PPUSH
42425: LD_VAR 0 14
42429: PPUSH
42430: CALL_OW 12
42434: ST_TO_ADDR
// case i of 1 :
42435: LD_VAR 0 3
42439: PUSH
42440: LD_INT 1
42442: DOUBLE
42443: EQUAL
42444: IFTRUE 42448
42446: GO 42465
42448: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42449: LD_VAR 0 1
42453: PPUSH
42454: LD_VAR 0 10
42458: PPUSH
42459: CALL_OW 115
42463: GO 42526
42465: LD_INT 2
42467: DOUBLE
42468: EQUAL
42469: IFTRUE 42473
42471: GO 42495
42473: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42474: LD_VAR 0 1
42478: PPUSH
42479: LD_VAR 0 6
42483: PPUSH
42484: LD_VAR 0 7
42488: PPUSH
42489: CALL_OW 153
42493: GO 42526
42495: LD_INT 3
42497: DOUBLE
42498: EQUAL
42499: IFTRUE 42503
42501: GO 42525
42503: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42504: LD_VAR 0 1
42508: PPUSH
42509: LD_VAR 0 6
42513: PPUSH
42514: LD_VAR 0 7
42518: PPUSH
42519: CALL_OW 154
42523: GO 42526
42525: POP
// end ;
42526: LD_VAR 0 2
42530: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42531: LD_INT 0
42533: PPUSH
42534: PPUSH
42535: PPUSH
42536: PPUSH
42537: PPUSH
42538: PPUSH
// if not unit or not building then
42539: LD_VAR 0 1
42543: NOT
42544: IFTRUE 42553
42546: PUSH
42547: LD_VAR 0 2
42551: NOT
42552: OR
42553: IFFALSE 42557
// exit ;
42555: GO 42715
// x := GetX ( building ) ;
42557: LD_ADDR_VAR 0 5
42561: PUSH
42562: LD_VAR 0 2
42566: PPUSH
42567: CALL_OW 250
42571: ST_TO_ADDR
// y := GetY ( building ) ;
42572: LD_ADDR_VAR 0 6
42576: PUSH
42577: LD_VAR 0 2
42581: PPUSH
42582: CALL_OW 251
42586: ST_TO_ADDR
// for i := 0 to 5 do
42587: LD_ADDR_VAR 0 4
42591: PUSH
42592: DOUBLE
42593: LD_INT 0
42595: DEC
42596: ST_TO_ADDR
42597: LD_INT 5
42599: PUSH
42600: FOR_TO
42601: IFFALSE 42713
// begin _x := ShiftX ( x , i , 3 ) ;
42603: LD_ADDR_VAR 0 7
42607: PUSH
42608: LD_VAR 0 5
42612: PPUSH
42613: LD_VAR 0 4
42617: PPUSH
42618: LD_INT 3
42620: PPUSH
42621: CALL_OW 272
42625: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42626: LD_ADDR_VAR 0 8
42630: PUSH
42631: LD_VAR 0 6
42635: PPUSH
42636: LD_VAR 0 4
42640: PPUSH
42641: LD_INT 3
42643: PPUSH
42644: CALL_OW 273
42648: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42649: LD_VAR 0 7
42653: PPUSH
42654: LD_VAR 0 8
42658: PPUSH
42659: CALL_OW 488
42663: NOT
42664: IFFALSE 42668
// continue ;
42666: GO 42600
// if HexInfo ( _x , _y ) = 0 then
42668: LD_VAR 0 7
42672: PPUSH
42673: LD_VAR 0 8
42677: PPUSH
42678: CALL_OW 428
42682: PUSH
42683: LD_INT 0
42685: EQUAL
42686: IFFALSE 42711
// begin ComMoveXY ( unit , _x , _y ) ;
42688: LD_VAR 0 1
42692: PPUSH
42693: LD_VAR 0 7
42697: PPUSH
42698: LD_VAR 0 8
42702: PPUSH
42703: CALL_OW 111
// exit ;
42707: POP
42708: POP
42709: GO 42715
// end ; end ;
42711: GO 42600
42713: POP
42714: POP
// end ;
42715: LD_VAR 0 3
42719: RET
// export function ScanBase ( side , base_area ) ; begin
42720: LD_INT 0
42722: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42723: LD_ADDR_VAR 0 3
42727: PUSH
42728: LD_VAR 0 2
42732: PPUSH
42733: LD_INT 81
42735: PUSH
42736: LD_VAR 0 1
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PPUSH
42745: CALL_OW 70
42749: ST_TO_ADDR
// end ;
42750: LD_VAR 0 3
42754: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42755: LD_INT 0
42757: PPUSH
42758: PPUSH
42759: PPUSH
42760: PPUSH
// result := false ;
42761: LD_ADDR_VAR 0 2
42765: PUSH
42766: LD_INT 0
42768: ST_TO_ADDR
// side := GetSide ( unit ) ;
42769: LD_ADDR_VAR 0 3
42773: PUSH
42774: LD_VAR 0 1
42778: PPUSH
42779: CALL_OW 255
42783: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42784: LD_ADDR_VAR 0 4
42788: PUSH
42789: LD_VAR 0 1
42793: PPUSH
42794: CALL_OW 248
42798: ST_TO_ADDR
// case nat of 1 :
42799: LD_VAR 0 4
42803: PUSH
42804: LD_INT 1
42806: DOUBLE
42807: EQUAL
42808: IFTRUE 42812
42810: GO 42823
42812: POP
// tech := tech_lassight ; 2 :
42813: LD_ADDR_VAR 0 5
42817: PUSH
42818: LD_INT 12
42820: ST_TO_ADDR
42821: GO 42862
42823: LD_INT 2
42825: DOUBLE
42826: EQUAL
42827: IFTRUE 42831
42829: GO 42842
42831: POP
// tech := tech_mortar ; 3 :
42832: LD_ADDR_VAR 0 5
42836: PUSH
42837: LD_INT 41
42839: ST_TO_ADDR
42840: GO 42862
42842: LD_INT 3
42844: DOUBLE
42845: EQUAL
42846: IFTRUE 42850
42848: GO 42861
42850: POP
// tech := tech_bazooka ; end ;
42851: LD_ADDR_VAR 0 5
42855: PUSH
42856: LD_INT 44
42858: ST_TO_ADDR
42859: GO 42862
42861: POP
// if Researched ( side , tech ) then
42862: LD_VAR 0 3
42866: PPUSH
42867: LD_VAR 0 5
42871: PPUSH
42872: CALL_OW 325
42876: IFFALSE 42903
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42878: LD_ADDR_VAR 0 2
42882: PUSH
42883: LD_INT 5
42885: PUSH
42886: LD_INT 8
42888: PUSH
42889: LD_INT 9
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: LIST
42896: PUSH
42897: LD_VAR 0 4
42901: ARRAY
42902: ST_TO_ADDR
// end ;
42903: LD_VAR 0 2
42907: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42908: LD_INT 0
42910: PPUSH
42911: PPUSH
42912: PPUSH
// if not mines then
42913: LD_VAR 0 2
42917: NOT
42918: IFFALSE 42922
// exit ;
42920: GO 43066
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42922: LD_ADDR_VAR 0 5
42926: PUSH
42927: LD_INT 81
42929: PUSH
42930: LD_VAR 0 1
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 3
42941: PUSH
42942: LD_INT 21
42944: PUSH
42945: LD_INT 3
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PPUSH
42960: CALL_OW 69
42964: ST_TO_ADDR
// for i in mines do
42965: LD_ADDR_VAR 0 4
42969: PUSH
42970: LD_VAR 0 2
42974: PUSH
42975: FOR_IN
42976: IFFALSE 43064
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42978: LD_VAR 0 4
42982: PUSH
42983: LD_INT 1
42985: ARRAY
42986: PPUSH
42987: LD_VAR 0 4
42991: PUSH
42992: LD_INT 2
42994: ARRAY
42995: PPUSH
42996: CALL_OW 458
43000: NOT
43001: IFFALSE 43005
// continue ;
43003: GO 42975
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43005: LD_VAR 0 4
43009: PUSH
43010: LD_INT 1
43012: ARRAY
43013: PPUSH
43014: LD_VAR 0 4
43018: PUSH
43019: LD_INT 2
43021: ARRAY
43022: PPUSH
43023: CALL_OW 428
43027: PUSH
43028: LD_VAR 0 5
43032: IN
43033: IFFALSE 43062
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43035: LD_VAR 0 4
43039: PUSH
43040: LD_INT 1
43042: ARRAY
43043: PPUSH
43044: LD_VAR 0 4
43048: PUSH
43049: LD_INT 2
43051: ARRAY
43052: PPUSH
43053: LD_VAR 0 1
43057: PPUSH
43058: CALL_OW 456
// end ;
43062: GO 42975
43064: POP
43065: POP
// end ;
43066: LD_VAR 0 3
43070: RET
// export function Count ( array ) ; begin
43071: LD_INT 0
43073: PPUSH
// result := array + 0 ;
43074: LD_ADDR_VAR 0 2
43078: PUSH
43079: LD_VAR 0 1
43083: PUSH
43084: LD_INT 0
43086: PLUS
43087: ST_TO_ADDR
// end ;
43088: LD_VAR 0 2
43092: RET
// export function IsEmpty ( building ) ; begin
43093: LD_INT 0
43095: PPUSH
// if not building then
43096: LD_VAR 0 1
43100: NOT
43101: IFFALSE 43105
// exit ;
43103: GO 43148
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43105: LD_ADDR_VAR 0 2
43109: PUSH
43110: LD_VAR 0 1
43114: PUSH
43115: LD_INT 22
43117: PUSH
43118: LD_VAR 0 1
43122: PPUSH
43123: CALL_OW 255
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 58
43134: PUSH
43135: EMPTY
43136: LIST
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PPUSH
43142: CALL_OW 69
43146: IN
43147: ST_TO_ADDR
// end ;
43148: LD_VAR 0 2
43152: RET
// export function IsNotFull ( building ) ; var places ; begin
43153: LD_INT 0
43155: PPUSH
43156: PPUSH
// if not building then
43157: LD_VAR 0 1
43161: NOT
43162: IFFALSE 43166
// exit ;
43164: GO 43194
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
43166: LD_ADDR_VAR 0 2
43170: PUSH
43171: LD_VAR 0 1
43175: PPUSH
43176: LD_INT 3
43178: PUSH
43179: LD_INT 62
43181: PUSH
43182: EMPTY
43183: LIST
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PPUSH
43189: CALL_OW 72
43193: ST_TO_ADDR
// end ;
43194: LD_VAR 0 2
43198: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43199: LD_INT 0
43201: PPUSH
43202: PPUSH
43203: PPUSH
43204: PPUSH
// tmp := [ ] ;
43205: LD_ADDR_VAR 0 3
43209: PUSH
43210: EMPTY
43211: ST_TO_ADDR
// list := [ ] ;
43212: LD_ADDR_VAR 0 5
43216: PUSH
43217: EMPTY
43218: ST_TO_ADDR
// for i = 16 to 25 do
43219: LD_ADDR_VAR 0 4
43223: PUSH
43224: DOUBLE
43225: LD_INT 16
43227: DEC
43228: ST_TO_ADDR
43229: LD_INT 25
43231: PUSH
43232: FOR_TO
43233: IFFALSE 43306
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43235: LD_ADDR_VAR 0 3
43239: PUSH
43240: LD_VAR 0 3
43244: PUSH
43245: LD_INT 22
43247: PUSH
43248: LD_VAR 0 1
43252: PPUSH
43253: CALL_OW 255
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 91
43264: PUSH
43265: LD_VAR 0 1
43269: PUSH
43270: LD_INT 6
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 30
43280: PUSH
43281: LD_VAR 0 4
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: LIST
43294: PUSH
43295: EMPTY
43296: LIST
43297: PPUSH
43298: CALL_OW 69
43302: ADD
43303: ST_TO_ADDR
43304: GO 43232
43306: POP
43307: POP
// for i = 1 to tmp do
43308: LD_ADDR_VAR 0 4
43312: PUSH
43313: DOUBLE
43314: LD_INT 1
43316: DEC
43317: ST_TO_ADDR
43318: LD_VAR 0 3
43322: PUSH
43323: FOR_TO
43324: IFFALSE 43412
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43326: LD_ADDR_VAR 0 5
43330: PUSH
43331: LD_VAR 0 5
43335: PUSH
43336: LD_VAR 0 3
43340: PUSH
43341: LD_VAR 0 4
43345: ARRAY
43346: PPUSH
43347: CALL_OW 266
43351: PUSH
43352: LD_VAR 0 3
43356: PUSH
43357: LD_VAR 0 4
43361: ARRAY
43362: PPUSH
43363: CALL_OW 250
43367: PUSH
43368: LD_VAR 0 3
43372: PUSH
43373: LD_VAR 0 4
43377: ARRAY
43378: PPUSH
43379: CALL_OW 251
43383: PUSH
43384: LD_VAR 0 3
43388: PUSH
43389: LD_VAR 0 4
43393: ARRAY
43394: PPUSH
43395: CALL_OW 254
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: PUSH
43406: EMPTY
43407: LIST
43408: ADD
43409: ST_TO_ADDR
43410: GO 43323
43412: POP
43413: POP
// result := list ;
43414: LD_ADDR_VAR 0 2
43418: PUSH
43419: LD_VAR 0 5
43423: ST_TO_ADDR
// end ;
43424: LD_VAR 0 2
43428: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43429: LD_INT 0
43431: PPUSH
43432: PPUSH
43433: PPUSH
43434: PPUSH
43435: PPUSH
43436: PPUSH
43437: PPUSH
// if not factory then
43438: LD_VAR 0 1
43442: NOT
43443: IFFALSE 43447
// exit ;
43445: GO 44050
// if control = control_apeman then
43447: LD_VAR 0 4
43451: PUSH
43452: LD_INT 5
43454: EQUAL
43455: IFFALSE 43564
// begin tmp := UnitsInside ( factory ) ;
43457: LD_ADDR_VAR 0 8
43461: PUSH
43462: LD_VAR 0 1
43466: PPUSH
43467: CALL_OW 313
43471: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43472: LD_VAR 0 8
43476: PPUSH
43477: LD_INT 25
43479: PUSH
43480: LD_INT 12
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PPUSH
43487: CALL_OW 72
43491: NOT
43492: IFFALSE 43502
// control := control_manual ;
43494: LD_ADDR_VAR 0 4
43498: PUSH
43499: LD_INT 1
43501: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43502: LD_ADDR_VAR 0 8
43506: PUSH
43507: LD_VAR 0 1
43511: PPUSH
43512: CALL 43199 0 1
43516: ST_TO_ADDR
// if tmp then
43517: LD_VAR 0 8
43521: IFFALSE 43564
// begin for i in tmp do
43523: LD_ADDR_VAR 0 7
43527: PUSH
43528: LD_VAR 0 8
43532: PUSH
43533: FOR_IN
43534: IFFALSE 43562
// if i [ 1 ] = b_ext_radio then
43536: LD_VAR 0 7
43540: PUSH
43541: LD_INT 1
43543: ARRAY
43544: PUSH
43545: LD_INT 22
43547: EQUAL
43548: IFFALSE 43560
// begin control := control_remote ;
43550: LD_ADDR_VAR 0 4
43554: PUSH
43555: LD_INT 2
43557: ST_TO_ADDR
// break ;
43558: GO 43562
// end ;
43560: GO 43533
43562: POP
43563: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43564: LD_VAR 0 1
43568: PPUSH
43569: LD_VAR 0 2
43573: PPUSH
43574: LD_VAR 0 3
43578: PPUSH
43579: LD_VAR 0 4
43583: PPUSH
43584: LD_VAR 0 5
43588: PPUSH
43589: CALL_OW 448
43593: IFFALSE 43628
// begin result := [ chassis , engine , control , weapon ] ;
43595: LD_ADDR_VAR 0 6
43599: PUSH
43600: LD_VAR 0 2
43604: PUSH
43605: LD_VAR 0 3
43609: PUSH
43610: LD_VAR 0 4
43614: PUSH
43615: LD_VAR 0 5
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: ST_TO_ADDR
// exit ;
43626: GO 44050
// end ; _chassis := AvailableChassisList ( factory ) ;
43628: LD_ADDR_VAR 0 9
43632: PUSH
43633: LD_VAR 0 1
43637: PPUSH
43638: CALL_OW 475
43642: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43643: LD_ADDR_VAR 0 11
43647: PUSH
43648: LD_VAR 0 1
43652: PPUSH
43653: CALL_OW 476
43657: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43658: LD_ADDR_VAR 0 12
43662: PUSH
43663: LD_VAR 0 1
43667: PPUSH
43668: CALL_OW 477
43672: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43673: LD_ADDR_VAR 0 10
43677: PUSH
43678: LD_VAR 0 1
43682: PPUSH
43683: CALL_OW 478
43687: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43688: LD_VAR 0 9
43692: NOT
43693: IFTRUE 43702
43695: PUSH
43696: LD_VAR 0 11
43700: NOT
43701: OR
43702: IFTRUE 43711
43704: PUSH
43705: LD_VAR 0 12
43709: NOT
43710: OR
43711: IFTRUE 43720
43713: PUSH
43714: LD_VAR 0 10
43718: NOT
43719: OR
43720: IFFALSE 43755
// begin result := [ chassis , engine , control , weapon ] ;
43722: LD_ADDR_VAR 0 6
43726: PUSH
43727: LD_VAR 0 2
43731: PUSH
43732: LD_VAR 0 3
43736: PUSH
43737: LD_VAR 0 4
43741: PUSH
43742: LD_VAR 0 5
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: ST_TO_ADDR
// exit ;
43753: GO 44050
// end ; if not chassis in _chassis then
43755: LD_VAR 0 2
43759: PUSH
43760: LD_VAR 0 9
43764: IN
43765: NOT
43766: IFFALSE 43792
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43768: LD_ADDR_VAR 0 2
43772: PUSH
43773: LD_VAR 0 9
43777: PUSH
43778: LD_INT 1
43780: PPUSH
43781: LD_VAR 0 9
43785: PPUSH
43786: CALL_OW 12
43790: ARRAY
43791: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43792: LD_VAR 0 2
43796: PPUSH
43797: LD_VAR 0 3
43801: PPUSH
43802: CALL 44055 0 2
43806: NOT
43807: IFFALSE 43868
// repeat engine := _engine [ 1 ] ;
43809: LD_ADDR_VAR 0 3
43813: PUSH
43814: LD_VAR 0 11
43818: PUSH
43819: LD_INT 1
43821: ARRAY
43822: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43823: LD_ADDR_VAR 0 11
43827: PUSH
43828: LD_VAR 0 11
43832: PPUSH
43833: LD_INT 1
43835: PPUSH
43836: CALL_OW 3
43840: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43841: LD_VAR 0 2
43845: PPUSH
43846: LD_VAR 0 3
43850: PPUSH
43851: CALL 44055 0 2
43855: IFTRUE 43866
43857: PUSH
43858: LD_VAR 0 11
43862: PUSH
43863: EMPTY
43864: EQUAL
43865: OR
43866: IFFALSE 43809
// if not control in _control then
43868: LD_VAR 0 4
43872: PUSH
43873: LD_VAR 0 12
43877: IN
43878: NOT
43879: IFFALSE 43905
// control := _control [ rand ( 1 , _control ) ] ;
43881: LD_ADDR_VAR 0 4
43885: PUSH
43886: LD_VAR 0 12
43890: PUSH
43891: LD_INT 1
43893: PPUSH
43894: LD_VAR 0 12
43898: PPUSH
43899: CALL_OW 12
43903: ARRAY
43904: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43905: LD_VAR 0 2
43909: PPUSH
43910: LD_VAR 0 5
43914: PPUSH
43915: CALL 44277 0 2
43919: NOT
43920: IFFALSE 43981
// repeat weapon := _weapon [ 1 ] ;
43922: LD_ADDR_VAR 0 5
43926: PUSH
43927: LD_VAR 0 10
43931: PUSH
43932: LD_INT 1
43934: ARRAY
43935: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43936: LD_ADDR_VAR 0 10
43940: PUSH
43941: LD_VAR 0 10
43945: PPUSH
43946: LD_INT 1
43948: PPUSH
43949: CALL_OW 3
43953: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43954: LD_VAR 0 2
43958: PPUSH
43959: LD_VAR 0 5
43963: PPUSH
43964: CALL 44277 0 2
43968: IFTRUE 43979
43970: PUSH
43971: LD_VAR 0 10
43975: PUSH
43976: EMPTY
43977: EQUAL
43978: OR
43979: IFFALSE 43922
// result := [ ] ;
43981: LD_ADDR_VAR 0 6
43985: PUSH
43986: EMPTY
43987: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43988: LD_VAR 0 1
43992: PPUSH
43993: LD_VAR 0 2
43997: PPUSH
43998: LD_VAR 0 3
44002: PPUSH
44003: LD_VAR 0 4
44007: PPUSH
44008: LD_VAR 0 5
44012: PPUSH
44013: CALL_OW 448
44017: IFFALSE 44050
// result := [ chassis , engine , control , weapon ] ;
44019: LD_ADDR_VAR 0 6
44023: PUSH
44024: LD_VAR 0 2
44028: PUSH
44029: LD_VAR 0 3
44033: PUSH
44034: LD_VAR 0 4
44038: PUSH
44039: LD_VAR 0 5
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: ST_TO_ADDR
// end ;
44050: LD_VAR 0 6
44054: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44055: LD_INT 0
44057: PPUSH
// if not chassis or not engine then
44058: LD_VAR 0 1
44062: NOT
44063: IFTRUE 44072
44065: PUSH
44066: LD_VAR 0 2
44070: NOT
44071: OR
44072: IFFALSE 44076
// exit ;
44074: GO 44272
// case engine of engine_solar :
44076: LD_VAR 0 2
44080: PUSH
44081: LD_INT 2
44083: DOUBLE
44084: EQUAL
44085: IFTRUE 44089
44087: GO 44127
44089: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44090: LD_ADDR_VAR 0 3
44094: PUSH
44095: LD_INT 11
44097: PUSH
44098: LD_INT 12
44100: PUSH
44101: LD_INT 13
44103: PUSH
44104: LD_INT 14
44106: PUSH
44107: LD_INT 1
44109: PUSH
44110: LD_INT 2
44112: PUSH
44113: LD_INT 3
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: ST_TO_ADDR
44125: GO 44256
44127: LD_INT 1
44129: DOUBLE
44130: EQUAL
44131: IFTRUE 44135
44133: GO 44197
44135: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44136: LD_ADDR_VAR 0 3
44140: PUSH
44141: LD_INT 11
44143: PUSH
44144: LD_INT 12
44146: PUSH
44147: LD_INT 13
44149: PUSH
44150: LD_INT 14
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: LD_INT 2
44158: PUSH
44159: LD_INT 3
44161: PUSH
44162: LD_INT 4
44164: PUSH
44165: LD_INT 5
44167: PUSH
44168: LD_INT 21
44170: PUSH
44171: LD_INT 23
44173: PUSH
44174: LD_INT 22
44176: PUSH
44177: LD_INT 24
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: ST_TO_ADDR
44195: GO 44256
44197: LD_INT 3
44199: DOUBLE
44200: EQUAL
44201: IFTRUE 44205
44203: GO 44255
44205: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44206: LD_ADDR_VAR 0 3
44210: PUSH
44211: LD_INT 13
44213: PUSH
44214: LD_INT 14
44216: PUSH
44217: LD_INT 2
44219: PUSH
44220: LD_INT 3
44222: PUSH
44223: LD_INT 4
44225: PUSH
44226: LD_INT 5
44228: PUSH
44229: LD_INT 21
44231: PUSH
44232: LD_INT 22
44234: PUSH
44235: LD_INT 23
44237: PUSH
44238: LD_INT 24
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: ST_TO_ADDR
44253: GO 44256
44255: POP
// result := ( chassis in result ) ;
44256: LD_ADDR_VAR 0 3
44260: PUSH
44261: LD_VAR 0 1
44265: PUSH
44266: LD_VAR 0 3
44270: IN
44271: ST_TO_ADDR
// end ;
44272: LD_VAR 0 3
44276: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44277: LD_INT 0
44279: PPUSH
// if not chassis or not weapon then
44280: LD_VAR 0 1
44284: NOT
44285: IFTRUE 44294
44287: PUSH
44288: LD_VAR 0 2
44292: NOT
44293: OR
44294: IFFALSE 44298
// exit ;
44296: GO 45392
// case weapon of us_machine_gun :
44298: LD_VAR 0 2
44302: PUSH
44303: LD_INT 2
44305: DOUBLE
44306: EQUAL
44307: IFTRUE 44311
44309: GO 44341
44311: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44312: LD_ADDR_VAR 0 3
44316: PUSH
44317: LD_INT 1
44319: PUSH
44320: LD_INT 2
44322: PUSH
44323: LD_INT 3
44325: PUSH
44326: LD_INT 4
44328: PUSH
44329: LD_INT 5
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: ST_TO_ADDR
44339: GO 45376
44341: LD_INT 3
44343: DOUBLE
44344: EQUAL
44345: IFTRUE 44349
44347: GO 44379
44349: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44350: LD_ADDR_VAR 0 3
44354: PUSH
44355: LD_INT 1
44357: PUSH
44358: LD_INT 2
44360: PUSH
44361: LD_INT 3
44363: PUSH
44364: LD_INT 4
44366: PUSH
44367: LD_INT 5
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: ST_TO_ADDR
44377: GO 45376
44379: LD_INT 11
44381: DOUBLE
44382: EQUAL
44383: IFTRUE 44387
44385: GO 44417
44387: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44388: LD_ADDR_VAR 0 3
44392: PUSH
44393: LD_INT 1
44395: PUSH
44396: LD_INT 2
44398: PUSH
44399: LD_INT 3
44401: PUSH
44402: LD_INT 4
44404: PUSH
44405: LD_INT 5
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: ST_TO_ADDR
44415: GO 45376
44417: LD_INT 4
44419: DOUBLE
44420: EQUAL
44421: IFTRUE 44425
44423: GO 44451
44425: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44426: LD_ADDR_VAR 0 3
44430: PUSH
44431: LD_INT 2
44433: PUSH
44434: LD_INT 3
44436: PUSH
44437: LD_INT 4
44439: PUSH
44440: LD_INT 5
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: ST_TO_ADDR
44449: GO 45376
44451: LD_INT 5
44453: DOUBLE
44454: EQUAL
44455: IFTRUE 44459
44457: GO 44485
44459: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44460: LD_ADDR_VAR 0 3
44464: PUSH
44465: LD_INT 2
44467: PUSH
44468: LD_INT 3
44470: PUSH
44471: LD_INT 4
44473: PUSH
44474: LD_INT 5
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: ST_TO_ADDR
44483: GO 45376
44485: LD_INT 9
44487: DOUBLE
44488: EQUAL
44489: IFTRUE 44493
44491: GO 44519
44493: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44494: LD_ADDR_VAR 0 3
44498: PUSH
44499: LD_INT 2
44501: PUSH
44502: LD_INT 3
44504: PUSH
44505: LD_INT 4
44507: PUSH
44508: LD_INT 5
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: ST_TO_ADDR
44517: GO 45376
44519: LD_INT 7
44521: DOUBLE
44522: EQUAL
44523: IFTRUE 44527
44525: GO 44553
44527: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44528: LD_ADDR_VAR 0 3
44532: PUSH
44533: LD_INT 2
44535: PUSH
44536: LD_INT 3
44538: PUSH
44539: LD_INT 4
44541: PUSH
44542: LD_INT 5
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: ST_TO_ADDR
44551: GO 45376
44553: LD_INT 12
44555: DOUBLE
44556: EQUAL
44557: IFTRUE 44561
44559: GO 44587
44561: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44562: LD_ADDR_VAR 0 3
44566: PUSH
44567: LD_INT 2
44569: PUSH
44570: LD_INT 3
44572: PUSH
44573: LD_INT 4
44575: PUSH
44576: LD_INT 5
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: ST_TO_ADDR
44585: GO 45376
44587: LD_INT 13
44589: DOUBLE
44590: EQUAL
44591: IFTRUE 44595
44593: GO 44621
44595: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44596: LD_ADDR_VAR 0 3
44600: PUSH
44601: LD_INT 2
44603: PUSH
44604: LD_INT 3
44606: PUSH
44607: LD_INT 4
44609: PUSH
44610: LD_INT 5
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: ST_TO_ADDR
44619: GO 45376
44621: LD_INT 14
44623: DOUBLE
44624: EQUAL
44625: IFTRUE 44629
44627: GO 44647
44629: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44630: LD_ADDR_VAR 0 3
44634: PUSH
44635: LD_INT 4
44637: PUSH
44638: LD_INT 5
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: ST_TO_ADDR
44645: GO 45376
44647: LD_INT 6
44649: DOUBLE
44650: EQUAL
44651: IFTRUE 44655
44653: GO 44673
44655: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44656: LD_ADDR_VAR 0 3
44660: PUSH
44661: LD_INT 4
44663: PUSH
44664: LD_INT 5
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: ST_TO_ADDR
44671: GO 45376
44673: LD_INT 10
44675: DOUBLE
44676: EQUAL
44677: IFTRUE 44681
44679: GO 44699
44681: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44682: LD_ADDR_VAR 0 3
44686: PUSH
44687: LD_INT 4
44689: PUSH
44690: LD_INT 5
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: ST_TO_ADDR
44697: GO 45376
44699: LD_INT 22
44701: DOUBLE
44702: EQUAL
44703: IFTRUE 44707
44705: GO 44733
44707: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44708: LD_ADDR_VAR 0 3
44712: PUSH
44713: LD_INT 11
44715: PUSH
44716: LD_INT 12
44718: PUSH
44719: LD_INT 13
44721: PUSH
44722: LD_INT 14
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: ST_TO_ADDR
44731: GO 45376
44733: LD_INT 23
44735: DOUBLE
44736: EQUAL
44737: IFTRUE 44741
44739: GO 44767
44741: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44742: LD_ADDR_VAR 0 3
44746: PUSH
44747: LD_INT 11
44749: PUSH
44750: LD_INT 12
44752: PUSH
44753: LD_INT 13
44755: PUSH
44756: LD_INT 14
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: ST_TO_ADDR
44765: GO 45376
44767: LD_INT 24
44769: DOUBLE
44770: EQUAL
44771: IFTRUE 44775
44773: GO 44801
44775: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44776: LD_ADDR_VAR 0 3
44780: PUSH
44781: LD_INT 11
44783: PUSH
44784: LD_INT 12
44786: PUSH
44787: LD_INT 13
44789: PUSH
44790: LD_INT 14
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: ST_TO_ADDR
44799: GO 45376
44801: LD_INT 30
44803: DOUBLE
44804: EQUAL
44805: IFTRUE 44809
44807: GO 44835
44809: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44810: LD_ADDR_VAR 0 3
44814: PUSH
44815: LD_INT 11
44817: PUSH
44818: LD_INT 12
44820: PUSH
44821: LD_INT 13
44823: PUSH
44824: LD_INT 14
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: ST_TO_ADDR
44833: GO 45376
44835: LD_INT 25
44837: DOUBLE
44838: EQUAL
44839: IFTRUE 44843
44841: GO 44861
44843: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44844: LD_ADDR_VAR 0 3
44848: PUSH
44849: LD_INT 13
44851: PUSH
44852: LD_INT 14
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: ST_TO_ADDR
44859: GO 45376
44861: LD_INT 27
44863: DOUBLE
44864: EQUAL
44865: IFTRUE 44869
44867: GO 44887
44869: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44870: LD_ADDR_VAR 0 3
44874: PUSH
44875: LD_INT 13
44877: PUSH
44878: LD_INT 14
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: ST_TO_ADDR
44885: GO 45376
44887: LD_INT 92
44889: DOUBLE
44890: EQUAL
44891: IFTRUE 44895
44893: GO 44921
44895: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44896: LD_ADDR_VAR 0 3
44900: PUSH
44901: LD_INT 11
44903: PUSH
44904: LD_INT 12
44906: PUSH
44907: LD_INT 13
44909: PUSH
44910: LD_INT 14
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: ST_TO_ADDR
44919: GO 45376
44921: LD_INT 28
44923: DOUBLE
44924: EQUAL
44925: IFTRUE 44929
44927: GO 44947
44929: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44930: LD_ADDR_VAR 0 3
44934: PUSH
44935: LD_INT 13
44937: PUSH
44938: LD_INT 14
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: ST_TO_ADDR
44945: GO 45376
44947: LD_INT 29
44949: DOUBLE
44950: EQUAL
44951: IFTRUE 44955
44953: GO 44973
44955: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44956: LD_ADDR_VAR 0 3
44960: PUSH
44961: LD_INT 13
44963: PUSH
44964: LD_INT 14
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: ST_TO_ADDR
44971: GO 45376
44973: LD_INT 31
44975: DOUBLE
44976: EQUAL
44977: IFTRUE 44981
44979: GO 44999
44981: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44982: LD_ADDR_VAR 0 3
44986: PUSH
44987: LD_INT 13
44989: PUSH
44990: LD_INT 14
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: ST_TO_ADDR
44997: GO 45376
44999: LD_INT 26
45001: DOUBLE
45002: EQUAL
45003: IFTRUE 45007
45005: GO 45025
45007: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45008: LD_ADDR_VAR 0 3
45012: PUSH
45013: LD_INT 13
45015: PUSH
45016: LD_INT 14
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: ST_TO_ADDR
45023: GO 45376
45025: LD_INT 42
45027: DOUBLE
45028: EQUAL
45029: IFTRUE 45033
45031: GO 45059
45033: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45034: LD_ADDR_VAR 0 3
45038: PUSH
45039: LD_INT 21
45041: PUSH
45042: LD_INT 22
45044: PUSH
45045: LD_INT 23
45047: PUSH
45048: LD_INT 24
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: ST_TO_ADDR
45057: GO 45376
45059: LD_INT 43
45061: DOUBLE
45062: EQUAL
45063: IFTRUE 45067
45065: GO 45093
45067: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45068: LD_ADDR_VAR 0 3
45072: PUSH
45073: LD_INT 21
45075: PUSH
45076: LD_INT 22
45078: PUSH
45079: LD_INT 23
45081: PUSH
45082: LD_INT 24
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: ST_TO_ADDR
45091: GO 45376
45093: LD_INT 44
45095: DOUBLE
45096: EQUAL
45097: IFTRUE 45101
45099: GO 45127
45101: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45102: LD_ADDR_VAR 0 3
45106: PUSH
45107: LD_INT 21
45109: PUSH
45110: LD_INT 22
45112: PUSH
45113: LD_INT 23
45115: PUSH
45116: LD_INT 24
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: ST_TO_ADDR
45125: GO 45376
45127: LD_INT 45
45129: DOUBLE
45130: EQUAL
45131: IFTRUE 45135
45133: GO 45161
45135: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45136: LD_ADDR_VAR 0 3
45140: PUSH
45141: LD_INT 21
45143: PUSH
45144: LD_INT 22
45146: PUSH
45147: LD_INT 23
45149: PUSH
45150: LD_INT 24
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: ST_TO_ADDR
45159: GO 45376
45161: LD_INT 49
45163: DOUBLE
45164: EQUAL
45165: IFTRUE 45169
45167: GO 45195
45169: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45170: LD_ADDR_VAR 0 3
45174: PUSH
45175: LD_INT 21
45177: PUSH
45178: LD_INT 22
45180: PUSH
45181: LD_INT 23
45183: PUSH
45184: LD_INT 24
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: ST_TO_ADDR
45193: GO 45376
45195: LD_INT 51
45197: DOUBLE
45198: EQUAL
45199: IFTRUE 45203
45201: GO 45229
45203: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45204: LD_ADDR_VAR 0 3
45208: PUSH
45209: LD_INT 21
45211: PUSH
45212: LD_INT 22
45214: PUSH
45215: LD_INT 23
45217: PUSH
45218: LD_INT 24
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: ST_TO_ADDR
45227: GO 45376
45229: LD_INT 52
45231: DOUBLE
45232: EQUAL
45233: IFTRUE 45237
45235: GO 45263
45237: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45238: LD_ADDR_VAR 0 3
45242: PUSH
45243: LD_INT 21
45245: PUSH
45246: LD_INT 22
45248: PUSH
45249: LD_INT 23
45251: PUSH
45252: LD_INT 24
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: ST_TO_ADDR
45261: GO 45376
45263: LD_INT 53
45265: DOUBLE
45266: EQUAL
45267: IFTRUE 45271
45269: GO 45289
45271: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45272: LD_ADDR_VAR 0 3
45276: PUSH
45277: LD_INT 23
45279: PUSH
45280: LD_INT 24
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: ST_TO_ADDR
45287: GO 45376
45289: LD_INT 46
45291: DOUBLE
45292: EQUAL
45293: IFTRUE 45297
45295: GO 45315
45297: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45298: LD_ADDR_VAR 0 3
45302: PUSH
45303: LD_INT 23
45305: PUSH
45306: LD_INT 24
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: ST_TO_ADDR
45313: GO 45376
45315: LD_INT 47
45317: DOUBLE
45318: EQUAL
45319: IFTRUE 45323
45321: GO 45341
45323: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
45324: LD_ADDR_VAR 0 3
45328: PUSH
45329: LD_INT 23
45331: PUSH
45332: LD_INT 24
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: ST_TO_ADDR
45339: GO 45376
45341: LD_INT 98
45343: DOUBLE
45344: EQUAL
45345: IFTRUE 45349
45347: GO 45375
45349: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45350: LD_ADDR_VAR 0 3
45354: PUSH
45355: LD_INT 21
45357: PUSH
45358: LD_INT 22
45360: PUSH
45361: LD_INT 23
45363: PUSH
45364: LD_INT 24
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: ST_TO_ADDR
45373: GO 45376
45375: POP
// result := ( chassis in result ) ;
45376: LD_ADDR_VAR 0 3
45380: PUSH
45381: LD_VAR 0 1
45385: PUSH
45386: LD_VAR 0 3
45390: IN
45391: ST_TO_ADDR
// end ;
45392: LD_VAR 0 3
45396: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45397: LD_INT 0
45399: PPUSH
45400: PPUSH
45401: PPUSH
45402: PPUSH
45403: PPUSH
45404: PPUSH
45405: PPUSH
// result := array ;
45406: LD_ADDR_VAR 0 5
45410: PUSH
45411: LD_VAR 0 1
45415: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45416: LD_VAR 0 1
45420: NOT
45421: IFTRUE 45430
45423: PUSH
45424: LD_VAR 0 2
45428: NOT
45429: OR
45430: IFTRUE 45439
45432: PUSH
45433: LD_VAR 0 3
45437: NOT
45438: OR
45439: IFTRUE 45453
45441: PUSH
45442: LD_VAR 0 2
45446: PUSH
45447: LD_VAR 0 1
45451: GREATER
45452: OR
45453: IFTRUE 45467
45455: PUSH
45456: LD_VAR 0 3
45460: PUSH
45461: LD_VAR 0 1
45465: GREATER
45466: OR
45467: IFFALSE 45471
// exit ;
45469: GO 45767
// if direction then
45471: LD_VAR 0 4
45475: IFFALSE 45539
// begin d := 1 ;
45477: LD_ADDR_VAR 0 9
45481: PUSH
45482: LD_INT 1
45484: ST_TO_ADDR
// if i_from > i_to then
45485: LD_VAR 0 2
45489: PUSH
45490: LD_VAR 0 3
45494: GREATER
45495: IFFALSE 45521
// length := ( array - i_from ) + i_to else
45497: LD_ADDR_VAR 0 11
45501: PUSH
45502: LD_VAR 0 1
45506: PUSH
45507: LD_VAR 0 2
45511: MINUS
45512: PUSH
45513: LD_VAR 0 3
45517: PLUS
45518: ST_TO_ADDR
45519: GO 45537
// length := i_to - i_from ;
45521: LD_ADDR_VAR 0 11
45525: PUSH
45526: LD_VAR 0 3
45530: PUSH
45531: LD_VAR 0 2
45535: MINUS
45536: ST_TO_ADDR
// end else
45537: GO 45600
// begin d := - 1 ;
45539: LD_ADDR_VAR 0 9
45543: PUSH
45544: LD_INT 1
45546: NEG
45547: ST_TO_ADDR
// if i_from > i_to then
45548: LD_VAR 0 2
45552: PUSH
45553: LD_VAR 0 3
45557: GREATER
45558: IFFALSE 45578
// length := i_from - i_to else
45560: LD_ADDR_VAR 0 11
45564: PUSH
45565: LD_VAR 0 2
45569: PUSH
45570: LD_VAR 0 3
45574: MINUS
45575: ST_TO_ADDR
45576: GO 45600
// length := ( array - i_to ) + i_from ;
45578: LD_ADDR_VAR 0 11
45582: PUSH
45583: LD_VAR 0 1
45587: PUSH
45588: LD_VAR 0 3
45592: MINUS
45593: PUSH
45594: LD_VAR 0 2
45598: PLUS
45599: ST_TO_ADDR
// end ; if not length then
45600: LD_VAR 0 11
45604: NOT
45605: IFFALSE 45609
// exit ;
45607: GO 45767
// tmp := array ;
45609: LD_ADDR_VAR 0 10
45613: PUSH
45614: LD_VAR 0 1
45618: ST_TO_ADDR
// for i = 1 to length do
45619: LD_ADDR_VAR 0 6
45623: PUSH
45624: DOUBLE
45625: LD_INT 1
45627: DEC
45628: ST_TO_ADDR
45629: LD_VAR 0 11
45633: PUSH
45634: FOR_TO
45635: IFFALSE 45755
// begin for j = 1 to array do
45637: LD_ADDR_VAR 0 7
45641: PUSH
45642: DOUBLE
45643: LD_INT 1
45645: DEC
45646: ST_TO_ADDR
45647: LD_VAR 0 1
45651: PUSH
45652: FOR_TO
45653: IFFALSE 45741
// begin k := j + d ;
45655: LD_ADDR_VAR 0 8
45659: PUSH
45660: LD_VAR 0 7
45664: PUSH
45665: LD_VAR 0 9
45669: PLUS
45670: ST_TO_ADDR
// if k > array then
45671: LD_VAR 0 8
45675: PUSH
45676: LD_VAR 0 1
45680: GREATER
45681: IFFALSE 45691
// k := 1 ;
45683: LD_ADDR_VAR 0 8
45687: PUSH
45688: LD_INT 1
45690: ST_TO_ADDR
// if not k then
45691: LD_VAR 0 8
45695: NOT
45696: IFFALSE 45708
// k := array ;
45698: LD_ADDR_VAR 0 8
45702: PUSH
45703: LD_VAR 0 1
45707: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45708: LD_ADDR_VAR 0 10
45712: PUSH
45713: LD_VAR 0 10
45717: PPUSH
45718: LD_VAR 0 8
45722: PPUSH
45723: LD_VAR 0 1
45727: PUSH
45728: LD_VAR 0 7
45732: ARRAY
45733: PPUSH
45734: CALL_OW 1
45738: ST_TO_ADDR
// end ;
45739: GO 45652
45741: POP
45742: POP
// array := tmp ;
45743: LD_ADDR_VAR 0 1
45747: PUSH
45748: LD_VAR 0 10
45752: ST_TO_ADDR
// end ;
45753: GO 45634
45755: POP
45756: POP
// result := array ;
45757: LD_ADDR_VAR 0 5
45761: PUSH
45762: LD_VAR 0 1
45766: ST_TO_ADDR
// end ;
45767: LD_VAR 0 5
45771: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45772: LD_INT 0
45774: PPUSH
45775: PPUSH
// result := 0 ;
45776: LD_ADDR_VAR 0 3
45780: PUSH
45781: LD_INT 0
45783: ST_TO_ADDR
// if not array or not value in array then
45784: LD_VAR 0 1
45788: NOT
45789: IFTRUE 45804
45791: PUSH
45792: LD_VAR 0 2
45796: PUSH
45797: LD_VAR 0 1
45801: IN
45802: NOT
45803: OR
45804: IFFALSE 45808
// exit ;
45806: GO 45862
// for i = 1 to array do
45808: LD_ADDR_VAR 0 4
45812: PUSH
45813: DOUBLE
45814: LD_INT 1
45816: DEC
45817: ST_TO_ADDR
45818: LD_VAR 0 1
45822: PUSH
45823: FOR_TO
45824: IFFALSE 45860
// if value = array [ i ] then
45826: LD_VAR 0 2
45830: PUSH
45831: LD_VAR 0 1
45835: PUSH
45836: LD_VAR 0 4
45840: ARRAY
45841: EQUAL
45842: IFFALSE 45858
// begin result := i ;
45844: LD_ADDR_VAR 0 3
45848: PUSH
45849: LD_VAR 0 4
45853: ST_TO_ADDR
// exit ;
45854: POP
45855: POP
45856: GO 45862
// end ;
45858: GO 45823
45860: POP
45861: POP
// end ;
45862: LD_VAR 0 3
45866: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45867: LD_INT 0
45869: PPUSH
// vc_chassis := chassis ;
45870: LD_ADDR_OWVAR 37
45874: PUSH
45875: LD_VAR 0 1
45879: ST_TO_ADDR
// vc_engine := engine ;
45880: LD_ADDR_OWVAR 39
45884: PUSH
45885: LD_VAR 0 2
45889: ST_TO_ADDR
// vc_control := control ;
45890: LD_ADDR_OWVAR 38
45894: PUSH
45895: LD_VAR 0 3
45899: ST_TO_ADDR
// vc_weapon := weapon ;
45900: LD_ADDR_OWVAR 40
45904: PUSH
45905: LD_VAR 0 4
45909: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45910: LD_ADDR_OWVAR 41
45914: PUSH
45915: LD_VAR 0 5
45919: ST_TO_ADDR
// end ;
45920: LD_VAR 0 6
45924: RET
// export function WantPlant ( unit ) ; var task ; begin
45925: LD_INT 0
45927: PPUSH
45928: PPUSH
// result := false ;
45929: LD_ADDR_VAR 0 2
45933: PUSH
45934: LD_INT 0
45936: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45937: LD_ADDR_VAR 0 3
45941: PUSH
45942: LD_VAR 0 1
45946: PPUSH
45947: CALL_OW 437
45951: ST_TO_ADDR
// if task then
45952: LD_VAR 0 3
45956: IFFALSE 45984
// if task [ 1 ] [ 1 ] = p then
45958: LD_VAR 0 3
45962: PUSH
45963: LD_INT 1
45965: ARRAY
45966: PUSH
45967: LD_INT 1
45969: ARRAY
45970: PUSH
45971: LD_STRING p
45973: EQUAL
45974: IFFALSE 45984
// result := true ;
45976: LD_ADDR_VAR 0 2
45980: PUSH
45981: LD_INT 1
45983: ST_TO_ADDR
// end ;
45984: LD_VAR 0 2
45988: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45989: LD_INT 0
45991: PPUSH
45992: PPUSH
45993: PPUSH
45994: PPUSH
// if pos < 1 then
45995: LD_VAR 0 2
45999: PUSH
46000: LD_INT 1
46002: LESS
46003: IFFALSE 46007
// exit ;
46005: GO 46310
// if pos = 1 then
46007: LD_VAR 0 2
46011: PUSH
46012: LD_INT 1
46014: EQUAL
46015: IFFALSE 46048
// result := Replace ( arr , pos [ 1 ] , value ) else
46017: LD_ADDR_VAR 0 4
46021: PUSH
46022: LD_VAR 0 1
46026: PPUSH
46027: LD_VAR 0 2
46031: PUSH
46032: LD_INT 1
46034: ARRAY
46035: PPUSH
46036: LD_VAR 0 3
46040: PPUSH
46041: CALL_OW 1
46045: ST_TO_ADDR
46046: GO 46310
// begin tmp := arr ;
46048: LD_ADDR_VAR 0 6
46052: PUSH
46053: LD_VAR 0 1
46057: ST_TO_ADDR
// s_arr := [ tmp ] ;
46058: LD_ADDR_VAR 0 7
46062: PUSH
46063: LD_VAR 0 6
46067: PUSH
46068: EMPTY
46069: LIST
46070: ST_TO_ADDR
// for i = 1 to pos - 1 do
46071: LD_ADDR_VAR 0 5
46075: PUSH
46076: DOUBLE
46077: LD_INT 1
46079: DEC
46080: ST_TO_ADDR
46081: LD_VAR 0 2
46085: PUSH
46086: LD_INT 1
46088: MINUS
46089: PUSH
46090: FOR_TO
46091: IFFALSE 46136
// begin tmp := tmp [ pos [ i ] ] ;
46093: LD_ADDR_VAR 0 6
46097: PUSH
46098: LD_VAR 0 6
46102: PUSH
46103: LD_VAR 0 2
46107: PUSH
46108: LD_VAR 0 5
46112: ARRAY
46113: ARRAY
46114: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46115: LD_ADDR_VAR 0 7
46119: PUSH
46120: LD_VAR 0 7
46124: PUSH
46125: LD_VAR 0 6
46129: PUSH
46130: EMPTY
46131: LIST
46132: ADD
46133: ST_TO_ADDR
// end ;
46134: GO 46090
46136: POP
46137: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46138: LD_ADDR_VAR 0 6
46142: PUSH
46143: LD_VAR 0 6
46147: PPUSH
46148: LD_VAR 0 2
46152: PUSH
46153: LD_VAR 0 2
46157: ARRAY
46158: PPUSH
46159: LD_VAR 0 3
46163: PPUSH
46164: CALL_OW 1
46168: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46169: LD_ADDR_VAR 0 7
46173: PUSH
46174: LD_VAR 0 7
46178: PPUSH
46179: LD_VAR 0 7
46183: PPUSH
46184: LD_VAR 0 6
46188: PPUSH
46189: CALL_OW 1
46193: ST_TO_ADDR
// for i = s_arr downto 2 do
46194: LD_ADDR_VAR 0 5
46198: PUSH
46199: DOUBLE
46200: LD_VAR 0 7
46204: INC
46205: ST_TO_ADDR
46206: LD_INT 2
46208: PUSH
46209: FOR_DOWNTO
46210: IFFALSE 46294
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46212: LD_ADDR_VAR 0 6
46216: PUSH
46217: LD_VAR 0 7
46221: PUSH
46222: LD_VAR 0 5
46226: PUSH
46227: LD_INT 1
46229: MINUS
46230: ARRAY
46231: PPUSH
46232: LD_VAR 0 2
46236: PUSH
46237: LD_VAR 0 5
46241: PUSH
46242: LD_INT 1
46244: MINUS
46245: ARRAY
46246: PPUSH
46247: LD_VAR 0 7
46251: PUSH
46252: LD_VAR 0 5
46256: ARRAY
46257: PPUSH
46258: CALL_OW 1
46262: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46263: LD_ADDR_VAR 0 7
46267: PUSH
46268: LD_VAR 0 7
46272: PPUSH
46273: LD_VAR 0 5
46277: PUSH
46278: LD_INT 1
46280: MINUS
46281: PPUSH
46282: LD_VAR 0 6
46286: PPUSH
46287: CALL_OW 1
46291: ST_TO_ADDR
// end ;
46292: GO 46209
46294: POP
46295: POP
// result := s_arr [ 1 ] ;
46296: LD_ADDR_VAR 0 4
46300: PUSH
46301: LD_VAR 0 7
46305: PUSH
46306: LD_INT 1
46308: ARRAY
46309: ST_TO_ADDR
// end ; end ;
46310: LD_VAR 0 4
46314: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46315: LD_INT 0
46317: PPUSH
46318: PPUSH
// if not list then
46319: LD_VAR 0 1
46323: NOT
46324: IFFALSE 46328
// exit ;
46326: GO 46419
// i := list [ pos1 ] ;
46328: LD_ADDR_VAR 0 5
46332: PUSH
46333: LD_VAR 0 1
46337: PUSH
46338: LD_VAR 0 2
46342: ARRAY
46343: ST_TO_ADDR
// if not i then
46344: LD_VAR 0 5
46348: NOT
46349: IFFALSE 46353
// exit ;
46351: GO 46419
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46353: LD_ADDR_VAR 0 1
46357: PUSH
46358: LD_VAR 0 1
46362: PPUSH
46363: LD_VAR 0 2
46367: PPUSH
46368: LD_VAR 0 1
46372: PUSH
46373: LD_VAR 0 3
46377: ARRAY
46378: PPUSH
46379: CALL_OW 1
46383: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46384: LD_ADDR_VAR 0 1
46388: PUSH
46389: LD_VAR 0 1
46393: PPUSH
46394: LD_VAR 0 3
46398: PPUSH
46399: LD_VAR 0 5
46403: PPUSH
46404: CALL_OW 1
46408: ST_TO_ADDR
// result := list ;
46409: LD_ADDR_VAR 0 4
46413: PUSH
46414: LD_VAR 0 1
46418: ST_TO_ADDR
// end ;
46419: LD_VAR 0 4
46423: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46424: LD_INT 0
46426: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46427: LD_ADDR_VAR 0 5
46431: PUSH
46432: LD_VAR 0 1
46436: PPUSH
46437: CALL_OW 250
46441: PPUSH
46442: LD_VAR 0 1
46446: PPUSH
46447: CALL_OW 251
46451: PPUSH
46452: LD_VAR 0 2
46456: PPUSH
46457: LD_VAR 0 3
46461: PPUSH
46462: LD_VAR 0 4
46466: PPUSH
46467: CALL 46849 0 5
46471: ST_TO_ADDR
// end ;
46472: LD_VAR 0 5
46476: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
46477: LD_INT 0
46479: PPUSH
46480: PPUSH
46481: PPUSH
46482: PPUSH
// if not list or not unit then
46483: LD_VAR 0 2
46487: NOT
46488: IFTRUE 46497
46490: PUSH
46491: LD_VAR 0 1
46495: NOT
46496: OR
46497: IFFALSE 46501
// exit ;
46499: GO 46844
// result := [ ] ;
46501: LD_ADDR_VAR 0 5
46505: PUSH
46506: EMPTY
46507: ST_TO_ADDR
// for i in list do
46508: LD_ADDR_VAR 0 6
46512: PUSH
46513: LD_VAR 0 2
46517: PUSH
46518: FOR_IN
46519: IFFALSE 46737
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
46521: LD_ADDR_VAR 0 8
46525: PUSH
46526: LD_VAR 0 1
46530: PPUSH
46531: LD_VAR 0 6
46535: PUSH
46536: LD_INT 1
46538: ARRAY
46539: PPUSH
46540: LD_VAR 0 6
46544: PUSH
46545: LD_INT 2
46547: ARRAY
46548: PPUSH
46549: CALL_OW 297
46553: ST_TO_ADDR
// if not Count ( result ) then
46554: LD_VAR 0 5
46558: PPUSH
46559: CALL 43071 0 1
46563: NOT
46564: IFFALSE 46597
// begin result := Join ( result , [ i , tmp ] ) ;
46566: LD_ADDR_VAR 0 5
46570: PUSH
46571: LD_VAR 0 5
46575: PPUSH
46576: LD_VAR 0 6
46580: PUSH
46581: LD_VAR 0 8
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PPUSH
46590: CALL 79047 0 2
46594: ST_TO_ADDR
// continue ;
46595: GO 46518
// end ; if result [ result ] [ 2 ] <= tmp then
46597: LD_VAR 0 5
46601: PUSH
46602: LD_VAR 0 5
46606: ARRAY
46607: PUSH
46608: LD_INT 2
46610: ARRAY
46611: PUSH
46612: LD_VAR 0 8
46616: LESSEQUAL
46617: IFFALSE 46650
// result := Join ( result , [ i , tmp ] ) else
46619: LD_ADDR_VAR 0 5
46623: PUSH
46624: LD_VAR 0 5
46628: PPUSH
46629: LD_VAR 0 6
46633: PUSH
46634: LD_VAR 0 8
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PPUSH
46643: CALL 79047 0 2
46647: ST_TO_ADDR
46648: GO 46735
// begin for j := 1 to Count ( result ) do
46650: LD_ADDR_VAR 0 7
46654: PUSH
46655: DOUBLE
46656: LD_INT 1
46658: DEC
46659: ST_TO_ADDR
46660: LD_VAR 0 5
46664: PPUSH
46665: CALL 43071 0 1
46669: PUSH
46670: FOR_TO
46671: IFFALSE 46733
// begin if tmp < result [ j ] [ 2 ] then
46673: LD_VAR 0 8
46677: PUSH
46678: LD_VAR 0 5
46682: PUSH
46683: LD_VAR 0 7
46687: ARRAY
46688: PUSH
46689: LD_INT 2
46691: ARRAY
46692: LESS
46693: IFFALSE 46731
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46695: LD_ADDR_VAR 0 5
46699: PUSH
46700: LD_VAR 0 5
46704: PPUSH
46705: LD_VAR 0 7
46709: PPUSH
46710: LD_VAR 0 6
46714: PUSH
46715: LD_VAR 0 8
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PPUSH
46724: CALL_OW 2
46728: ST_TO_ADDR
// break ;
46729: GO 46733
// end ; end ;
46731: GO 46670
46733: POP
46734: POP
// end ; end ;
46735: GO 46518
46737: POP
46738: POP
// if result and not asc then
46739: LD_VAR 0 5
46743: IFFALSE 46752
46745: PUSH
46746: LD_VAR 0 3
46750: NOT
46751: AND
46752: IFFALSE 46769
// result := ReverseArray ( result ) ;
46754: LD_ADDR_VAR 0 5
46758: PUSH
46759: LD_VAR 0 5
46763: PPUSH
46764: CALL 74127 0 1
46768: ST_TO_ADDR
// tmp := [ ] ;
46769: LD_ADDR_VAR 0 8
46773: PUSH
46774: EMPTY
46775: ST_TO_ADDR
// if mode then
46776: LD_VAR 0 4
46780: IFFALSE 46844
// begin for i := 1 to result do
46782: LD_ADDR_VAR 0 6
46786: PUSH
46787: DOUBLE
46788: LD_INT 1
46790: DEC
46791: ST_TO_ADDR
46792: LD_VAR 0 5
46796: PUSH
46797: FOR_TO
46798: IFFALSE 46832
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
46800: LD_ADDR_VAR 0 8
46804: PUSH
46805: LD_VAR 0 8
46809: PPUSH
46810: LD_VAR 0 5
46814: PUSH
46815: LD_VAR 0 6
46819: ARRAY
46820: PUSH
46821: LD_INT 1
46823: ARRAY
46824: PPUSH
46825: CALL 79047 0 2
46829: ST_TO_ADDR
46830: GO 46797
46832: POP
46833: POP
// result := tmp ;
46834: LD_ADDR_VAR 0 5
46838: PUSH
46839: LD_VAR 0 8
46843: ST_TO_ADDR
// end ; end ;
46844: LD_VAR 0 5
46848: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46849: LD_INT 0
46851: PPUSH
46852: PPUSH
46853: PPUSH
46854: PPUSH
// if not list then
46855: LD_VAR 0 3
46859: NOT
46860: IFFALSE 46864
// exit ;
46862: GO 47254
// result := [ ] ;
46864: LD_ADDR_VAR 0 6
46868: PUSH
46869: EMPTY
46870: ST_TO_ADDR
// for i in list do
46871: LD_ADDR_VAR 0 7
46875: PUSH
46876: LD_VAR 0 3
46880: PUSH
46881: FOR_IN
46882: IFFALSE 47084
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46884: LD_ADDR_VAR 0 9
46888: PUSH
46889: LD_VAR 0 7
46893: PPUSH
46894: LD_VAR 0 1
46898: PPUSH
46899: LD_VAR 0 2
46903: PPUSH
46904: CALL_OW 297
46908: ST_TO_ADDR
// if not result then
46909: LD_VAR 0 6
46913: NOT
46914: IFFALSE 46940
// result := [ [ i , tmp ] ] else
46916: LD_ADDR_VAR 0 6
46920: PUSH
46921: LD_VAR 0 7
46925: PUSH
46926: LD_VAR 0 9
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: EMPTY
46936: LIST
46937: ST_TO_ADDR
46938: GO 47082
// begin if result [ result ] [ 2 ] <= tmp then
46940: LD_VAR 0 6
46944: PUSH
46945: LD_VAR 0 6
46949: ARRAY
46950: PUSH
46951: LD_INT 2
46953: ARRAY
46954: PUSH
46955: LD_VAR 0 9
46959: LESSEQUAL
46960: IFFALSE 47002
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46962: LD_ADDR_VAR 0 6
46966: PUSH
46967: LD_VAR 0 6
46971: PPUSH
46972: LD_VAR 0 6
46976: PUSH
46977: LD_INT 1
46979: PLUS
46980: PPUSH
46981: LD_VAR 0 7
46985: PUSH
46986: LD_VAR 0 9
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PPUSH
46995: CALL_OW 2
46999: ST_TO_ADDR
47000: GO 47082
// for j := 1 to result do
47002: LD_ADDR_VAR 0 8
47006: PUSH
47007: DOUBLE
47008: LD_INT 1
47010: DEC
47011: ST_TO_ADDR
47012: LD_VAR 0 6
47016: PUSH
47017: FOR_TO
47018: IFFALSE 47080
// begin if tmp < result [ j ] [ 2 ] then
47020: LD_VAR 0 9
47024: PUSH
47025: LD_VAR 0 6
47029: PUSH
47030: LD_VAR 0 8
47034: ARRAY
47035: PUSH
47036: LD_INT 2
47038: ARRAY
47039: LESS
47040: IFFALSE 47078
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47042: LD_ADDR_VAR 0 6
47046: PUSH
47047: LD_VAR 0 6
47051: PPUSH
47052: LD_VAR 0 8
47056: PPUSH
47057: LD_VAR 0 7
47061: PUSH
47062: LD_VAR 0 9
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PPUSH
47071: CALL_OW 2
47075: ST_TO_ADDR
// break ;
47076: GO 47080
// end ; end ;
47078: GO 47017
47080: POP
47081: POP
// end ; end ;
47082: GO 46881
47084: POP
47085: POP
// if result and not asc then
47086: LD_VAR 0 6
47090: IFFALSE 47099
47092: PUSH
47093: LD_VAR 0 4
47097: NOT
47098: AND
47099: IFFALSE 47174
// begin tmp := result ;
47101: LD_ADDR_VAR 0 9
47105: PUSH
47106: LD_VAR 0 6
47110: ST_TO_ADDR
// for i = tmp downto 1 do
47111: LD_ADDR_VAR 0 7
47115: PUSH
47116: DOUBLE
47117: LD_VAR 0 9
47121: INC
47122: ST_TO_ADDR
47123: LD_INT 1
47125: PUSH
47126: FOR_DOWNTO
47127: IFFALSE 47172
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47129: LD_ADDR_VAR 0 6
47133: PUSH
47134: LD_VAR 0 6
47138: PPUSH
47139: LD_VAR 0 9
47143: PUSH
47144: LD_VAR 0 7
47148: MINUS
47149: PUSH
47150: LD_INT 1
47152: PLUS
47153: PPUSH
47154: LD_VAR 0 9
47158: PUSH
47159: LD_VAR 0 7
47163: ARRAY
47164: PPUSH
47165: CALL_OW 1
47169: ST_TO_ADDR
47170: GO 47126
47172: POP
47173: POP
// end ; tmp := [ ] ;
47174: LD_ADDR_VAR 0 9
47178: PUSH
47179: EMPTY
47180: ST_TO_ADDR
// if mode then
47181: LD_VAR 0 5
47185: IFFALSE 47254
// begin for i = 1 to result do
47187: LD_ADDR_VAR 0 7
47191: PUSH
47192: DOUBLE
47193: LD_INT 1
47195: DEC
47196: ST_TO_ADDR
47197: LD_VAR 0 6
47201: PUSH
47202: FOR_TO
47203: IFFALSE 47242
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47205: LD_ADDR_VAR 0 9
47209: PUSH
47210: LD_VAR 0 9
47214: PPUSH
47215: LD_VAR 0 7
47219: PPUSH
47220: LD_VAR 0 6
47224: PUSH
47225: LD_VAR 0 7
47229: ARRAY
47230: PUSH
47231: LD_INT 1
47233: ARRAY
47234: PPUSH
47235: CALL_OW 1
47239: ST_TO_ADDR
47240: GO 47202
47242: POP
47243: POP
// result := tmp ;
47244: LD_ADDR_VAR 0 6
47248: PUSH
47249: LD_VAR 0 9
47253: ST_TO_ADDR
// end ; end ;
47254: LD_VAR 0 6
47258: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47259: LD_INT 0
47261: PPUSH
47262: PPUSH
47263: PPUSH
47264: PPUSH
47265: PPUSH
47266: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47267: LD_ADDR_VAR 0 5
47271: PUSH
47272: LD_INT 0
47274: PUSH
47275: LD_INT 0
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: EMPTY
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: ST_TO_ADDR
// if not x or not y then
47289: LD_VAR 0 2
47293: NOT
47294: IFTRUE 47303
47296: PUSH
47297: LD_VAR 0 3
47301: NOT
47302: OR
47303: IFFALSE 47307
// exit ;
47305: GO 48963
// if not range then
47307: LD_VAR 0 4
47311: NOT
47312: IFFALSE 47322
// range := 10 ;
47314: LD_ADDR_VAR 0 4
47318: PUSH
47319: LD_INT 10
47321: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47322: LD_ADDR_VAR 0 8
47326: PUSH
47327: LD_INT 81
47329: PUSH
47330: LD_VAR 0 1
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 92
47341: PUSH
47342: LD_VAR 0 2
47346: PUSH
47347: LD_VAR 0 3
47351: PUSH
47352: LD_VAR 0 4
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 3
47365: PUSH
47366: LD_INT 21
47368: PUSH
47369: LD_INT 3
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: LIST
47384: PPUSH
47385: CALL_OW 69
47389: ST_TO_ADDR
// if not tmp then
47390: LD_VAR 0 8
47394: NOT
47395: IFFALSE 47399
// exit ;
47397: GO 48963
// for i in tmp do
47399: LD_ADDR_VAR 0 6
47403: PUSH
47404: LD_VAR 0 8
47408: PUSH
47409: FOR_IN
47410: IFFALSE 48938
// begin points := [ 0 , 0 , 0 ] ;
47412: LD_ADDR_VAR 0 9
47416: PUSH
47417: LD_INT 0
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: LD_INT 0
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: LIST
47430: ST_TO_ADDR
// bpoints := 1 ;
47431: LD_ADDR_VAR 0 10
47435: PUSH
47436: LD_INT 1
47438: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47439: LD_VAR 0 6
47443: PPUSH
47444: CALL_OW 247
47448: PUSH
47449: LD_INT 1
47451: DOUBLE
47452: EQUAL
47453: IFTRUE 47457
47455: GO 48039
47457: POP
// begin if GetClass ( i ) = 1 then
47458: LD_VAR 0 6
47462: PPUSH
47463: CALL_OW 257
47467: PUSH
47468: LD_INT 1
47470: EQUAL
47471: IFFALSE 47492
// points := [ 10 , 5 , 3 ] ;
47473: LD_ADDR_VAR 0 9
47477: PUSH
47478: LD_INT 10
47480: PUSH
47481: LD_INT 5
47483: PUSH
47484: LD_INT 3
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: LIST
47491: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47492: LD_VAR 0 6
47496: PPUSH
47497: CALL_OW 257
47501: PUSH
47502: LD_INT 2
47504: PUSH
47505: LD_INT 3
47507: PUSH
47508: LD_INT 4
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: LIST
47515: IN
47516: IFFALSE 47537
// points := [ 3 , 2 , 1 ] ;
47518: LD_ADDR_VAR 0 9
47522: PUSH
47523: LD_INT 3
47525: PUSH
47526: LD_INT 2
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: LIST
47536: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47537: LD_VAR 0 6
47541: PPUSH
47542: CALL_OW 257
47546: PUSH
47547: LD_INT 5
47549: EQUAL
47550: IFFALSE 47571
// points := [ 130 , 5 , 2 ] ;
47552: LD_ADDR_VAR 0 9
47556: PUSH
47557: LD_INT 130
47559: PUSH
47560: LD_INT 5
47562: PUSH
47563: LD_INT 2
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: LIST
47570: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47571: LD_VAR 0 6
47575: PPUSH
47576: CALL_OW 257
47580: PUSH
47581: LD_INT 8
47583: EQUAL
47584: IFFALSE 47605
// points := [ 35 , 35 , 30 ] ;
47586: LD_ADDR_VAR 0 9
47590: PUSH
47591: LD_INT 35
47593: PUSH
47594: LD_INT 35
47596: PUSH
47597: LD_INT 30
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: LIST
47604: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47605: LD_VAR 0 6
47609: PPUSH
47610: CALL_OW 257
47614: PUSH
47615: LD_INT 9
47617: EQUAL
47618: IFFALSE 47639
// points := [ 20 , 55 , 40 ] ;
47620: LD_ADDR_VAR 0 9
47624: PUSH
47625: LD_INT 20
47627: PUSH
47628: LD_INT 55
47630: PUSH
47631: LD_INT 40
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: LIST
47638: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47639: LD_VAR 0 6
47643: PPUSH
47644: CALL_OW 257
47648: PUSH
47649: LD_INT 12
47651: PUSH
47652: LD_INT 16
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: IN
47659: IFFALSE 47680
// points := [ 5 , 3 , 2 ] ;
47661: LD_ADDR_VAR 0 9
47665: PUSH
47666: LD_INT 5
47668: PUSH
47669: LD_INT 3
47671: PUSH
47672: LD_INT 2
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: LIST
47679: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47680: LD_VAR 0 6
47684: PPUSH
47685: CALL_OW 257
47689: PUSH
47690: LD_INT 17
47692: EQUAL
47693: IFFALSE 47714
// points := [ 100 , 50 , 75 ] ;
47695: LD_ADDR_VAR 0 9
47699: PUSH
47700: LD_INT 100
47702: PUSH
47703: LD_INT 50
47705: PUSH
47706: LD_INT 75
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: LIST
47713: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47714: LD_VAR 0 6
47718: PPUSH
47719: CALL_OW 257
47723: PUSH
47724: LD_INT 15
47726: EQUAL
47727: IFFALSE 47748
// points := [ 10 , 5 , 3 ] ;
47729: LD_ADDR_VAR 0 9
47733: PUSH
47734: LD_INT 10
47736: PUSH
47737: LD_INT 5
47739: PUSH
47740: LD_INT 3
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: LIST
47747: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47748: LD_VAR 0 6
47752: PPUSH
47753: CALL_OW 257
47757: PUSH
47758: LD_INT 14
47760: EQUAL
47761: IFFALSE 47782
// points := [ 10 , 0 , 0 ] ;
47763: LD_ADDR_VAR 0 9
47767: PUSH
47768: LD_INT 10
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: LIST
47781: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47782: LD_VAR 0 6
47786: PPUSH
47787: CALL_OW 257
47791: PUSH
47792: LD_INT 11
47794: EQUAL
47795: IFFALSE 47816
// points := [ 30 , 10 , 5 ] ;
47797: LD_ADDR_VAR 0 9
47801: PUSH
47802: LD_INT 30
47804: PUSH
47805: LD_INT 10
47807: PUSH
47808: LD_INT 5
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: LIST
47815: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47816: LD_VAR 0 1
47820: PPUSH
47821: LD_INT 5
47823: PPUSH
47824: CALL_OW 321
47828: PUSH
47829: LD_INT 2
47831: EQUAL
47832: IFFALSE 47849
// bpoints := bpoints * 1.8 ;
47834: LD_ADDR_VAR 0 10
47838: PUSH
47839: LD_VAR 0 10
47843: PUSH
47844: LD_REAL  1.80000000000000E+0000
47847: MUL
47848: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47849: LD_VAR 0 6
47853: PPUSH
47854: CALL_OW 257
47858: PUSH
47859: LD_INT 1
47861: PUSH
47862: LD_INT 2
47864: PUSH
47865: LD_INT 3
47867: PUSH
47868: LD_INT 4
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: IN
47877: IFFALSE 47897
47879: PUSH
47880: LD_VAR 0 1
47884: PPUSH
47885: LD_INT 51
47887: PPUSH
47888: CALL_OW 321
47892: PUSH
47893: LD_INT 2
47895: EQUAL
47896: AND
47897: IFFALSE 47914
// bpoints := bpoints * 1.2 ;
47899: LD_ADDR_VAR 0 10
47903: PUSH
47904: LD_VAR 0 10
47908: PUSH
47909: LD_REAL  1.20000000000000E+0000
47912: MUL
47913: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47914: LD_VAR 0 6
47918: PPUSH
47919: CALL_OW 257
47923: PUSH
47924: LD_INT 5
47926: PUSH
47927: LD_INT 7
47929: PUSH
47930: LD_INT 9
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: LIST
47937: IN
47938: IFFALSE 47958
47940: PUSH
47941: LD_VAR 0 1
47945: PPUSH
47946: LD_INT 52
47948: PPUSH
47949: CALL_OW 321
47953: PUSH
47954: LD_INT 2
47956: EQUAL
47957: AND
47958: IFFALSE 47975
// bpoints := bpoints * 1.5 ;
47960: LD_ADDR_VAR 0 10
47964: PUSH
47965: LD_VAR 0 10
47969: PUSH
47970: LD_REAL  1.50000000000000E+0000
47973: MUL
47974: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47975: LD_VAR 0 1
47979: PPUSH
47980: LD_INT 66
47982: PPUSH
47983: CALL_OW 321
47987: PUSH
47988: LD_INT 2
47990: EQUAL
47991: IFFALSE 48008
// bpoints := bpoints * 1.1 ;
47993: LD_ADDR_VAR 0 10
47997: PUSH
47998: LD_VAR 0 10
48002: PUSH
48003: LD_REAL  1.10000000000000E+0000
48006: MUL
48007: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48008: LD_ADDR_VAR 0 10
48012: PUSH
48013: LD_VAR 0 10
48017: PUSH
48018: LD_VAR 0 6
48022: PPUSH
48023: LD_INT 1
48025: PPUSH
48026: CALL_OW 259
48030: PUSH
48031: LD_REAL  1.15000000000000E+0000
48034: MUL
48035: MUL
48036: ST_TO_ADDR
// end ; unit_vehicle :
48037: GO 48867
48039: LD_INT 2
48041: DOUBLE
48042: EQUAL
48043: IFTRUE 48047
48045: GO 48855
48047: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48048: LD_VAR 0 6
48052: PPUSH
48053: CALL_OW 264
48057: PUSH
48058: LD_INT 2
48060: PUSH
48061: LD_INT 42
48063: PUSH
48064: LD_INT 24
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: LIST
48071: IN
48072: IFFALSE 48093
// points := [ 25 , 5 , 3 ] ;
48074: LD_ADDR_VAR 0 9
48078: PUSH
48079: LD_INT 25
48081: PUSH
48082: LD_INT 5
48084: PUSH
48085: LD_INT 3
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: LIST
48092: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48093: LD_VAR 0 6
48097: PPUSH
48098: CALL_OW 264
48102: PUSH
48103: LD_INT 4
48105: PUSH
48106: LD_INT 43
48108: PUSH
48109: LD_INT 25
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: LIST
48116: IN
48117: IFFALSE 48138
// points := [ 40 , 15 , 5 ] ;
48119: LD_ADDR_VAR 0 9
48123: PUSH
48124: LD_INT 40
48126: PUSH
48127: LD_INT 15
48129: PUSH
48130: LD_INT 5
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: LIST
48137: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48138: LD_VAR 0 6
48142: PPUSH
48143: CALL_OW 264
48147: PUSH
48148: LD_INT 3
48150: PUSH
48151: LD_INT 23
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: IN
48158: IFFALSE 48179
// points := [ 7 , 25 , 8 ] ;
48160: LD_ADDR_VAR 0 9
48164: PUSH
48165: LD_INT 7
48167: PUSH
48168: LD_INT 25
48170: PUSH
48171: LD_INT 8
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: LIST
48178: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48179: LD_VAR 0 6
48183: PPUSH
48184: CALL_OW 264
48188: PUSH
48189: LD_INT 5
48191: PUSH
48192: LD_INT 27
48194: PUSH
48195: LD_INT 44
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: LIST
48202: IN
48203: IFFALSE 48224
// points := [ 14 , 50 , 16 ] ;
48205: LD_ADDR_VAR 0 9
48209: PUSH
48210: LD_INT 14
48212: PUSH
48213: LD_INT 50
48215: PUSH
48216: LD_INT 16
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: LIST
48223: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48224: LD_VAR 0 6
48228: PPUSH
48229: CALL_OW 264
48233: PUSH
48234: LD_INT 6
48236: PUSH
48237: LD_INT 46
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: IN
48244: IFFALSE 48265
// points := [ 32 , 120 , 70 ] ;
48246: LD_ADDR_VAR 0 9
48250: PUSH
48251: LD_INT 32
48253: PUSH
48254: LD_INT 120
48256: PUSH
48257: LD_INT 70
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: LIST
48264: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48265: LD_VAR 0 6
48269: PPUSH
48270: CALL_OW 264
48274: PUSH
48275: LD_INT 7
48277: PUSH
48278: LD_INT 28
48280: PUSH
48281: LD_INT 45
48283: PUSH
48284: LD_INT 92
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: IN
48293: IFFALSE 48314
// points := [ 35 , 20 , 45 ] ;
48295: LD_ADDR_VAR 0 9
48299: PUSH
48300: LD_INT 35
48302: PUSH
48303: LD_INT 20
48305: PUSH
48306: LD_INT 45
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: LIST
48313: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48314: LD_VAR 0 6
48318: PPUSH
48319: CALL_OW 264
48323: PUSH
48324: LD_INT 47
48326: PUSH
48327: EMPTY
48328: LIST
48329: IN
48330: IFFALSE 48351
// points := [ 67 , 45 , 75 ] ;
48332: LD_ADDR_VAR 0 9
48336: PUSH
48337: LD_INT 67
48339: PUSH
48340: LD_INT 45
48342: PUSH
48343: LD_INT 75
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: LIST
48350: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48351: LD_VAR 0 6
48355: PPUSH
48356: CALL_OW 264
48360: PUSH
48361: LD_INT 26
48363: PUSH
48364: EMPTY
48365: LIST
48366: IN
48367: IFFALSE 48388
// points := [ 120 , 30 , 80 ] ;
48369: LD_ADDR_VAR 0 9
48373: PUSH
48374: LD_INT 120
48376: PUSH
48377: LD_INT 30
48379: PUSH
48380: LD_INT 80
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: LIST
48387: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48388: LD_VAR 0 6
48392: PPUSH
48393: CALL_OW 264
48397: PUSH
48398: LD_INT 22
48400: PUSH
48401: EMPTY
48402: LIST
48403: IN
48404: IFFALSE 48425
// points := [ 40 , 1 , 1 ] ;
48406: LD_ADDR_VAR 0 9
48410: PUSH
48411: LD_INT 40
48413: PUSH
48414: LD_INT 1
48416: PUSH
48417: LD_INT 1
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: LIST
48424: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48425: LD_VAR 0 6
48429: PPUSH
48430: CALL_OW 264
48434: PUSH
48435: LD_INT 29
48437: PUSH
48438: EMPTY
48439: LIST
48440: IN
48441: IFFALSE 48462
// points := [ 70 , 200 , 400 ] ;
48443: LD_ADDR_VAR 0 9
48447: PUSH
48448: LD_INT 70
48450: PUSH
48451: LD_INT 200
48453: PUSH
48454: LD_INT 400
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: LIST
48461: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48462: LD_VAR 0 6
48466: PPUSH
48467: CALL_OW 264
48471: PUSH
48472: LD_INT 14
48474: PUSH
48475: LD_INT 53
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: IN
48482: IFFALSE 48503
// points := [ 40 , 10 , 20 ] ;
48484: LD_ADDR_VAR 0 9
48488: PUSH
48489: LD_INT 40
48491: PUSH
48492: LD_INT 10
48494: PUSH
48495: LD_INT 20
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: LIST
48502: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48503: LD_VAR 0 6
48507: PPUSH
48508: CALL_OW 264
48512: PUSH
48513: LD_INT 9
48515: PUSH
48516: EMPTY
48517: LIST
48518: IN
48519: IFFALSE 48540
// points := [ 5 , 70 , 20 ] ;
48521: LD_ADDR_VAR 0 9
48525: PUSH
48526: LD_INT 5
48528: PUSH
48529: LD_INT 70
48531: PUSH
48532: LD_INT 20
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: LIST
48539: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48540: LD_VAR 0 6
48544: PPUSH
48545: CALL_OW 264
48549: PUSH
48550: LD_INT 10
48552: PUSH
48553: EMPTY
48554: LIST
48555: IN
48556: IFFALSE 48577
// points := [ 35 , 110 , 70 ] ;
48558: LD_ADDR_VAR 0 9
48562: PUSH
48563: LD_INT 35
48565: PUSH
48566: LD_INT 110
48568: PUSH
48569: LD_INT 70
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: LIST
48576: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48577: LD_VAR 0 6
48581: PPUSH
48582: CALL_OW 265
48586: PUSH
48587: LD_INT 25
48589: EQUAL
48590: IFFALSE 48611
// points := [ 80 , 65 , 100 ] ;
48592: LD_ADDR_VAR 0 9
48596: PUSH
48597: LD_INT 80
48599: PUSH
48600: LD_INT 65
48602: PUSH
48603: LD_INT 100
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: LIST
48610: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48611: LD_VAR 0 6
48615: PPUSH
48616: CALL_OW 263
48620: PUSH
48621: LD_INT 1
48623: EQUAL
48624: IFFALSE 48659
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48626: LD_ADDR_VAR 0 10
48630: PUSH
48631: LD_VAR 0 10
48635: PUSH
48636: LD_VAR 0 6
48640: PPUSH
48641: CALL_OW 311
48645: PPUSH
48646: LD_INT 3
48648: PPUSH
48649: CALL_OW 259
48653: PUSH
48654: LD_INT 4
48656: MUL
48657: MUL
48658: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48659: LD_VAR 0 6
48663: PPUSH
48664: CALL_OW 263
48668: PUSH
48669: LD_INT 2
48671: EQUAL
48672: IFFALSE 48723
// begin j := IsControledBy ( i ) ;
48674: LD_ADDR_VAR 0 7
48678: PUSH
48679: LD_VAR 0 6
48683: PPUSH
48684: CALL_OW 312
48688: ST_TO_ADDR
// if j then
48689: LD_VAR 0 7
48693: IFFALSE 48723
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48695: LD_ADDR_VAR 0 10
48699: PUSH
48700: LD_VAR 0 10
48704: PUSH
48705: LD_VAR 0 7
48709: PPUSH
48710: LD_INT 3
48712: PPUSH
48713: CALL_OW 259
48717: PUSH
48718: LD_INT 3
48720: MUL
48721: MUL
48722: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48723: LD_VAR 0 6
48727: PPUSH
48728: CALL_OW 264
48732: PUSH
48733: LD_INT 5
48735: PUSH
48736: LD_INT 6
48738: PUSH
48739: LD_INT 46
48741: PUSH
48742: LD_INT 44
48744: PUSH
48745: LD_INT 47
48747: PUSH
48748: LD_INT 45
48750: PUSH
48751: LD_INT 28
48753: PUSH
48754: LD_INT 7
48756: PUSH
48757: LD_INT 27
48759: PUSH
48760: LD_INT 29
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: IN
48775: IFFALSE 48795
48777: PUSH
48778: LD_VAR 0 1
48782: PPUSH
48783: LD_INT 52
48785: PPUSH
48786: CALL_OW 321
48790: PUSH
48791: LD_INT 2
48793: EQUAL
48794: AND
48795: IFFALSE 48812
// bpoints := bpoints * 1.2 ;
48797: LD_ADDR_VAR 0 10
48801: PUSH
48802: LD_VAR 0 10
48806: PUSH
48807: LD_REAL  1.20000000000000E+0000
48810: MUL
48811: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48812: LD_VAR 0 6
48816: PPUSH
48817: CALL_OW 264
48821: PUSH
48822: LD_INT 6
48824: PUSH
48825: LD_INT 46
48827: PUSH
48828: LD_INT 47
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: LIST
48835: IN
48836: IFFALSE 48853
// bpoints := bpoints * 1.2 ;
48838: LD_ADDR_VAR 0 10
48842: PUSH
48843: LD_VAR 0 10
48847: PUSH
48848: LD_REAL  1.20000000000000E+0000
48851: MUL
48852: ST_TO_ADDR
// end ; unit_building :
48853: GO 48867
48855: LD_INT 3
48857: DOUBLE
48858: EQUAL
48859: IFTRUE 48863
48861: GO 48866
48863: POP
// ; end ;
48864: GO 48867
48866: POP
// for j = 1 to 3 do
48867: LD_ADDR_VAR 0 7
48871: PUSH
48872: DOUBLE
48873: LD_INT 1
48875: DEC
48876: ST_TO_ADDR
48877: LD_INT 3
48879: PUSH
48880: FOR_TO
48881: IFFALSE 48934
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48883: LD_ADDR_VAR 0 5
48887: PUSH
48888: LD_VAR 0 5
48892: PPUSH
48893: LD_VAR 0 7
48897: PPUSH
48898: LD_VAR 0 5
48902: PUSH
48903: LD_VAR 0 7
48907: ARRAY
48908: PUSH
48909: LD_VAR 0 9
48913: PUSH
48914: LD_VAR 0 7
48918: ARRAY
48919: PUSH
48920: LD_VAR 0 10
48924: MUL
48925: PLUS
48926: PPUSH
48927: CALL_OW 1
48931: ST_TO_ADDR
48932: GO 48880
48934: POP
48935: POP
// end ;
48936: GO 47409
48938: POP
48939: POP
// result := Replace ( result , 4 , tmp ) ;
48940: LD_ADDR_VAR 0 5
48944: PUSH
48945: LD_VAR 0 5
48949: PPUSH
48950: LD_INT 4
48952: PPUSH
48953: LD_VAR 0 8
48957: PPUSH
48958: CALL_OW 1
48962: ST_TO_ADDR
// end ;
48963: LD_VAR 0 5
48967: RET
// export function DangerAtRange ( unit , range ) ; begin
48968: LD_INT 0
48970: PPUSH
// if not unit then
48971: LD_VAR 0 1
48975: NOT
48976: IFFALSE 48980
// exit ;
48978: GO 49025
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48980: LD_ADDR_VAR 0 3
48984: PUSH
48985: LD_VAR 0 1
48989: PPUSH
48990: CALL_OW 255
48994: PPUSH
48995: LD_VAR 0 1
48999: PPUSH
49000: CALL_OW 250
49004: PPUSH
49005: LD_VAR 0 1
49009: PPUSH
49010: CALL_OW 251
49014: PPUSH
49015: LD_VAR 0 2
49019: PPUSH
49020: CALL 47259 0 4
49024: ST_TO_ADDR
// end ;
49025: LD_VAR 0 3
49029: RET
// export function DangerInArea ( side , area ) ; begin
49030: LD_INT 0
49032: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49033: LD_ADDR_VAR 0 3
49037: PUSH
49038: LD_VAR 0 2
49042: PPUSH
49043: LD_INT 81
49045: PUSH
49046: LD_VAR 0 1
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PPUSH
49055: CALL_OW 70
49059: ST_TO_ADDR
// end ;
49060: LD_VAR 0 3
49064: RET
// export function IsExtension ( b ) ; begin
49065: LD_INT 0
49067: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49068: LD_ADDR_VAR 0 2
49072: PUSH
49073: LD_VAR 0 1
49077: PUSH
49078: LD_INT 23
49080: PUSH
49081: LD_INT 20
49083: PUSH
49084: LD_INT 22
49086: PUSH
49087: LD_INT 17
49089: PUSH
49090: LD_INT 24
49092: PUSH
49093: LD_INT 21
49095: PUSH
49096: LD_INT 19
49098: PUSH
49099: LD_INT 16
49101: PUSH
49102: LD_INT 25
49104: PUSH
49105: LD_INT 18
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: IN
49120: ST_TO_ADDR
// end ;
49121: LD_VAR 0 2
49125: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49126: LD_INT 0
49128: PPUSH
49129: PPUSH
49130: PPUSH
// result := [ ] ;
49131: LD_ADDR_VAR 0 4
49135: PUSH
49136: EMPTY
49137: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49138: LD_ADDR_VAR 0 5
49142: PUSH
49143: LD_VAR 0 2
49147: PPUSH
49148: LD_INT 21
49150: PUSH
49151: LD_INT 3
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PPUSH
49158: CALL_OW 70
49162: ST_TO_ADDR
// if not tmp then
49163: LD_VAR 0 5
49167: NOT
49168: IFFALSE 49172
// exit ;
49170: GO 49236
// if checkLink then
49172: LD_VAR 0 3
49176: IFFALSE 49226
// begin for i in tmp do
49178: LD_ADDR_VAR 0 6
49182: PUSH
49183: LD_VAR 0 5
49187: PUSH
49188: FOR_IN
49189: IFFALSE 49224
// if GetBase ( i ) <> base then
49191: LD_VAR 0 6
49195: PPUSH
49196: CALL_OW 274
49200: PUSH
49201: LD_VAR 0 1
49205: NONEQUAL
49206: IFFALSE 49222
// ComLinkToBase ( base , i ) ;
49208: LD_VAR 0 1
49212: PPUSH
49213: LD_VAR 0 6
49217: PPUSH
49218: CALL_OW 169
49222: GO 49188
49224: POP
49225: POP
// end ; result := tmp ;
49226: LD_ADDR_VAR 0 4
49230: PUSH
49231: LD_VAR 0 5
49235: ST_TO_ADDR
// end ;
49236: LD_VAR 0 4
49240: RET
// export function ComComplete ( units , b ) ; var i ; begin
49241: LD_INT 0
49243: PPUSH
49244: PPUSH
// if not units then
49245: LD_VAR 0 1
49249: NOT
49250: IFFALSE 49254
// exit ;
49252: GO 49344
// for i in units do
49254: LD_ADDR_VAR 0 4
49258: PUSH
49259: LD_VAR 0 1
49263: PUSH
49264: FOR_IN
49265: IFFALSE 49342
// if BuildingStatus ( b ) = bs_build then
49267: LD_VAR 0 2
49271: PPUSH
49272: CALL_OW 461
49276: PUSH
49277: LD_INT 1
49279: EQUAL
49280: IFFALSE 49340
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49282: LD_VAR 0 4
49286: PPUSH
49287: LD_STRING h
49289: PUSH
49290: LD_VAR 0 2
49294: PPUSH
49295: CALL_OW 250
49299: PUSH
49300: LD_VAR 0 2
49304: PPUSH
49305: CALL_OW 251
49309: PUSH
49310: LD_VAR 0 2
49314: PUSH
49315: LD_INT 0
49317: PUSH
49318: LD_INT 0
49320: PUSH
49321: LD_INT 0
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: PUSH
49333: EMPTY
49334: LIST
49335: PPUSH
49336: CALL_OW 446
49340: GO 49264
49342: POP
49343: POP
// end ;
49344: LD_VAR 0 3
49348: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49349: LD_INT 0
49351: PPUSH
49352: PPUSH
49353: PPUSH
49354: PPUSH
49355: PPUSH
49356: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49357: LD_VAR 0 1
49361: NOT
49362: IFTRUE 49379
49364: PUSH
49365: LD_VAR 0 1
49369: PPUSH
49370: CALL_OW 263
49374: PUSH
49375: LD_INT 2
49377: NONEQUAL
49378: OR
49379: IFFALSE 49383
// exit ;
49381: GO 49699
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49383: LD_ADDR_VAR 0 6
49387: PUSH
49388: LD_INT 22
49390: PUSH
49391: LD_VAR 0 1
49395: PPUSH
49396: CALL_OW 255
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 2
49407: PUSH
49408: LD_INT 30
49410: PUSH
49411: LD_INT 36
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 34
49420: PUSH
49421: LD_INT 31
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: LIST
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PPUSH
49437: CALL_OW 69
49441: ST_TO_ADDR
// if not tmp then
49442: LD_VAR 0 6
49446: NOT
49447: IFFALSE 49451
// exit ;
49449: GO 49699
// result := [ ] ;
49451: LD_ADDR_VAR 0 2
49455: PUSH
49456: EMPTY
49457: ST_TO_ADDR
// for i in tmp do
49458: LD_ADDR_VAR 0 3
49462: PUSH
49463: LD_VAR 0 6
49467: PUSH
49468: FOR_IN
49469: IFFALSE 49540
// begin t := UnitsInside ( i ) ;
49471: LD_ADDR_VAR 0 4
49475: PUSH
49476: LD_VAR 0 3
49480: PPUSH
49481: CALL_OW 313
49485: ST_TO_ADDR
// if t then
49486: LD_VAR 0 4
49490: IFFALSE 49538
// for j in t do
49492: LD_ADDR_VAR 0 7
49496: PUSH
49497: LD_VAR 0 4
49501: PUSH
49502: FOR_IN
49503: IFFALSE 49536
// result := Replace ( result , result + 1 , j ) ;
49505: LD_ADDR_VAR 0 2
49509: PUSH
49510: LD_VAR 0 2
49514: PPUSH
49515: LD_VAR 0 2
49519: PUSH
49520: LD_INT 1
49522: PLUS
49523: PPUSH
49524: LD_VAR 0 7
49528: PPUSH
49529: CALL_OW 1
49533: ST_TO_ADDR
49534: GO 49502
49536: POP
49537: POP
// end ;
49538: GO 49468
49540: POP
49541: POP
// if not result then
49542: LD_VAR 0 2
49546: NOT
49547: IFFALSE 49551
// exit ;
49549: GO 49699
// mech := result [ 1 ] ;
49551: LD_ADDR_VAR 0 5
49555: PUSH
49556: LD_VAR 0 2
49560: PUSH
49561: LD_INT 1
49563: ARRAY
49564: ST_TO_ADDR
// if result > 1 then
49565: LD_VAR 0 2
49569: PUSH
49570: LD_INT 1
49572: GREATER
49573: IFFALSE 49685
// begin for i = 2 to result do
49575: LD_ADDR_VAR 0 3
49579: PUSH
49580: DOUBLE
49581: LD_INT 2
49583: DEC
49584: ST_TO_ADDR
49585: LD_VAR 0 2
49589: PUSH
49590: FOR_TO
49591: IFFALSE 49683
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49593: LD_ADDR_VAR 0 4
49597: PUSH
49598: LD_VAR 0 2
49602: PUSH
49603: LD_VAR 0 3
49607: ARRAY
49608: PPUSH
49609: LD_INT 3
49611: PPUSH
49612: CALL_OW 259
49616: PUSH
49617: LD_VAR 0 2
49621: PUSH
49622: LD_VAR 0 3
49626: ARRAY
49627: PPUSH
49628: CALL_OW 432
49632: MINUS
49633: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49634: LD_VAR 0 4
49638: PUSH
49639: LD_VAR 0 5
49643: PPUSH
49644: LD_INT 3
49646: PPUSH
49647: CALL_OW 259
49651: PUSH
49652: LD_VAR 0 5
49656: PPUSH
49657: CALL_OW 432
49661: MINUS
49662: GREATEREQUAL
49663: IFFALSE 49681
// mech := result [ i ] ;
49665: LD_ADDR_VAR 0 5
49669: PUSH
49670: LD_VAR 0 2
49674: PUSH
49675: LD_VAR 0 3
49679: ARRAY
49680: ST_TO_ADDR
// end ;
49681: GO 49590
49683: POP
49684: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49685: LD_VAR 0 1
49689: PPUSH
49690: LD_VAR 0 5
49694: PPUSH
49695: CALL_OW 135
// end ;
49699: LD_VAR 0 2
49703: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49704: LD_INT 0
49706: PPUSH
49707: PPUSH
49708: PPUSH
49709: PPUSH
49710: PPUSH
49711: PPUSH
49712: PPUSH
49713: PPUSH
49714: PPUSH
49715: PPUSH
49716: PPUSH
49717: PPUSH
49718: PPUSH
// result := [ ] ;
49719: LD_ADDR_VAR 0 7
49723: PUSH
49724: EMPTY
49725: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49726: LD_VAR 0 1
49730: PPUSH
49731: CALL_OW 266
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: LD_INT 1
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: IN
49746: NOT
49747: IFFALSE 49751
// exit ;
49749: GO 51391
// if name then
49751: LD_VAR 0 3
49755: IFFALSE 49771
// SetBName ( base_dep , name ) ;
49757: LD_VAR 0 1
49761: PPUSH
49762: LD_VAR 0 3
49766: PPUSH
49767: CALL_OW 500
// base := GetBase ( base_dep ) ;
49771: LD_ADDR_VAR 0 15
49775: PUSH
49776: LD_VAR 0 1
49780: PPUSH
49781: CALL_OW 274
49785: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49786: LD_ADDR_VAR 0 16
49790: PUSH
49791: LD_VAR 0 1
49795: PPUSH
49796: CALL_OW 255
49800: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49801: LD_ADDR_VAR 0 17
49805: PUSH
49806: LD_VAR 0 1
49810: PPUSH
49811: CALL_OW 248
49815: ST_TO_ADDR
// if sources then
49816: LD_VAR 0 5
49820: IFFALSE 49867
// for i = 1 to 3 do
49822: LD_ADDR_VAR 0 8
49826: PUSH
49827: DOUBLE
49828: LD_INT 1
49830: DEC
49831: ST_TO_ADDR
49832: LD_INT 3
49834: PUSH
49835: FOR_TO
49836: IFFALSE 49865
// AddResourceType ( base , i , sources [ i ] ) ;
49838: LD_VAR 0 15
49842: PPUSH
49843: LD_VAR 0 8
49847: PPUSH
49848: LD_VAR 0 5
49852: PUSH
49853: LD_VAR 0 8
49857: ARRAY
49858: PPUSH
49859: CALL_OW 276
49863: GO 49835
49865: POP
49866: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49867: LD_ADDR_VAR 0 18
49871: PUSH
49872: LD_VAR 0 15
49876: PPUSH
49877: LD_VAR 0 2
49881: PPUSH
49882: LD_INT 1
49884: PPUSH
49885: CALL 49126 0 3
49889: ST_TO_ADDR
// InitHc ;
49890: CALL_OW 19
// InitUc ;
49894: CALL_OW 18
// uc_side := side ;
49898: LD_ADDR_OWVAR 20
49902: PUSH
49903: LD_VAR 0 16
49907: ST_TO_ADDR
// uc_nation := nation ;
49908: LD_ADDR_OWVAR 21
49912: PUSH
49913: LD_VAR 0 17
49917: ST_TO_ADDR
// if buildings then
49918: LD_VAR 0 18
49922: IFFALSE 51250
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49924: LD_ADDR_VAR 0 19
49928: PUSH
49929: LD_VAR 0 18
49933: PPUSH
49934: LD_INT 2
49936: PUSH
49937: LD_INT 30
49939: PUSH
49940: LD_INT 29
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 30
49949: PUSH
49950: LD_INT 30
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: LIST
49961: PPUSH
49962: CALL_OW 72
49966: ST_TO_ADDR
// if tmp then
49967: LD_VAR 0 19
49971: IFFALSE 50019
// for i in tmp do
49973: LD_ADDR_VAR 0 8
49977: PUSH
49978: LD_VAR 0 19
49982: PUSH
49983: FOR_IN
49984: IFFALSE 50017
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49986: LD_VAR 0 8
49990: PPUSH
49991: CALL_OW 250
49995: PPUSH
49996: LD_VAR 0 8
50000: PPUSH
50001: CALL_OW 251
50005: PPUSH
50006: LD_VAR 0 16
50010: PPUSH
50011: CALL_OW 441
50015: GO 49983
50017: POP
50018: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50019: LD_VAR 0 18
50023: PPUSH
50024: LD_INT 2
50026: PUSH
50027: LD_INT 30
50029: PUSH
50030: LD_INT 32
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 30
50039: PUSH
50040: LD_INT 33
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: LIST
50051: PPUSH
50052: CALL_OW 72
50056: IFFALSE 50144
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50058: LD_ADDR_VAR 0 8
50062: PUSH
50063: LD_VAR 0 18
50067: PPUSH
50068: LD_INT 2
50070: PUSH
50071: LD_INT 30
50073: PUSH
50074: LD_INT 32
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 30
50083: PUSH
50084: LD_INT 33
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: LIST
50095: PPUSH
50096: CALL_OW 72
50100: PUSH
50101: FOR_IN
50102: IFFALSE 50142
// begin if not GetBWeapon ( i ) then
50104: LD_VAR 0 8
50108: PPUSH
50109: CALL_OW 269
50113: NOT
50114: IFFALSE 50140
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50116: LD_VAR 0 8
50120: PPUSH
50121: LD_VAR 0 8
50125: PPUSH
50126: LD_VAR 0 2
50130: PPUSH
50131: CALL 51396 0 2
50135: PPUSH
50136: CALL_OW 431
// end ;
50140: GO 50101
50142: POP
50143: POP
// end ; for i = 1 to personel do
50144: LD_ADDR_VAR 0 8
50148: PUSH
50149: DOUBLE
50150: LD_INT 1
50152: DEC
50153: ST_TO_ADDR
50154: LD_VAR 0 6
50158: PUSH
50159: FOR_TO
50160: IFFALSE 51230
// begin if i > 4 then
50162: LD_VAR 0 8
50166: PUSH
50167: LD_INT 4
50169: GREATER
50170: IFFALSE 50174
// break ;
50172: GO 51230
// case i of 1 :
50174: LD_VAR 0 8
50178: PUSH
50179: LD_INT 1
50181: DOUBLE
50182: EQUAL
50183: IFTRUE 50187
50185: GO 50267
50187: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50188: LD_ADDR_VAR 0 12
50192: PUSH
50193: LD_VAR 0 18
50197: PPUSH
50198: LD_INT 22
50200: PUSH
50201: LD_VAR 0 16
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 58
50212: PUSH
50213: EMPTY
50214: LIST
50215: PUSH
50216: LD_INT 2
50218: PUSH
50219: LD_INT 30
50221: PUSH
50222: LD_INT 32
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 30
50231: PUSH
50232: LD_INT 4
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 30
50241: PUSH
50242: LD_INT 5
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: LIST
50259: PPUSH
50260: CALL_OW 72
50264: ST_TO_ADDR
50265: GO 50489
50267: LD_INT 2
50269: DOUBLE
50270: EQUAL
50271: IFTRUE 50275
50273: GO 50337
50275: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50276: LD_ADDR_VAR 0 12
50280: PUSH
50281: LD_VAR 0 18
50285: PPUSH
50286: LD_INT 22
50288: PUSH
50289: LD_VAR 0 16
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 2
50300: PUSH
50301: LD_INT 30
50303: PUSH
50304: LD_INT 0
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 30
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: LIST
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PPUSH
50330: CALL_OW 72
50334: ST_TO_ADDR
50335: GO 50489
50337: LD_INT 3
50339: DOUBLE
50340: EQUAL
50341: IFTRUE 50345
50343: GO 50407
50345: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50346: LD_ADDR_VAR 0 12
50350: PUSH
50351: LD_VAR 0 18
50355: PPUSH
50356: LD_INT 22
50358: PUSH
50359: LD_VAR 0 16
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 2
50370: PUSH
50371: LD_INT 30
50373: PUSH
50374: LD_INT 2
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 30
50383: PUSH
50384: LD_INT 3
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: LIST
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PPUSH
50400: CALL_OW 72
50404: ST_TO_ADDR
50405: GO 50489
50407: LD_INT 4
50409: DOUBLE
50410: EQUAL
50411: IFTRUE 50415
50413: GO 50488
50415: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50416: LD_ADDR_VAR 0 12
50420: PUSH
50421: LD_VAR 0 18
50425: PPUSH
50426: LD_INT 22
50428: PUSH
50429: LD_VAR 0 16
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 2
50440: PUSH
50441: LD_INT 30
50443: PUSH
50444: LD_INT 6
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 30
50453: PUSH
50454: LD_INT 7
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 30
50463: PUSH
50464: LD_INT 8
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PPUSH
50481: CALL_OW 72
50485: ST_TO_ADDR
50486: GO 50489
50488: POP
// if i = 1 then
50489: LD_VAR 0 8
50493: PUSH
50494: LD_INT 1
50496: EQUAL
50497: IFFALSE 50608
// begin tmp := [ ] ;
50499: LD_ADDR_VAR 0 19
50503: PUSH
50504: EMPTY
50505: ST_TO_ADDR
// for j in f do
50506: LD_ADDR_VAR 0 9
50510: PUSH
50511: LD_VAR 0 12
50515: PUSH
50516: FOR_IN
50517: IFFALSE 50590
// if GetBType ( j ) = b_bunker then
50519: LD_VAR 0 9
50523: PPUSH
50524: CALL_OW 266
50528: PUSH
50529: LD_INT 32
50531: EQUAL
50532: IFFALSE 50559
// tmp := Insert ( tmp , 1 , j ) else
50534: LD_ADDR_VAR 0 19
50538: PUSH
50539: LD_VAR 0 19
50543: PPUSH
50544: LD_INT 1
50546: PPUSH
50547: LD_VAR 0 9
50551: PPUSH
50552: CALL_OW 2
50556: ST_TO_ADDR
50557: GO 50588
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50559: LD_ADDR_VAR 0 19
50563: PUSH
50564: LD_VAR 0 19
50568: PPUSH
50569: LD_VAR 0 19
50573: PUSH
50574: LD_INT 1
50576: PLUS
50577: PPUSH
50578: LD_VAR 0 9
50582: PPUSH
50583: CALL_OW 2
50587: ST_TO_ADDR
50588: GO 50516
50590: POP
50591: POP
// if tmp then
50592: LD_VAR 0 19
50596: IFFALSE 50608
// f := tmp ;
50598: LD_ADDR_VAR 0 12
50602: PUSH
50603: LD_VAR 0 19
50607: ST_TO_ADDR
// end ; x := personel [ i ] ;
50608: LD_ADDR_VAR 0 13
50612: PUSH
50613: LD_VAR 0 6
50617: PUSH
50618: LD_VAR 0 8
50622: ARRAY
50623: ST_TO_ADDR
// if x = - 1 then
50624: LD_VAR 0 13
50628: PUSH
50629: LD_INT 1
50631: NEG
50632: EQUAL
50633: IFFALSE 50844
// begin for j in f do
50635: LD_ADDR_VAR 0 9
50639: PUSH
50640: LD_VAR 0 12
50644: PUSH
50645: FOR_IN
50646: IFFALSE 50840
// repeat InitHc ;
50648: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50652: LD_VAR 0 9
50656: PPUSH
50657: CALL_OW 266
50661: PUSH
50662: LD_INT 5
50664: EQUAL
50665: IFFALSE 50735
// begin if UnitsInside ( j ) < 3 then
50667: LD_VAR 0 9
50671: PPUSH
50672: CALL_OW 313
50676: PUSH
50677: LD_INT 3
50679: LESS
50680: IFFALSE 50716
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50682: LD_INT 0
50684: PPUSH
50685: LD_INT 5
50687: PUSH
50688: LD_INT 8
50690: PUSH
50691: LD_INT 9
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: LIST
50698: PUSH
50699: LD_VAR 0 17
50703: ARRAY
50704: PPUSH
50705: LD_VAR 0 4
50709: PPUSH
50710: CALL_OW 380
50714: GO 50733
// PrepareHuman ( false , i , skill ) ;
50716: LD_INT 0
50718: PPUSH
50719: LD_VAR 0 8
50723: PPUSH
50724: LD_VAR 0 4
50728: PPUSH
50729: CALL_OW 380
// end else
50733: GO 50752
// PrepareHuman ( false , i , skill ) ;
50735: LD_INT 0
50737: PPUSH
50738: LD_VAR 0 8
50742: PPUSH
50743: LD_VAR 0 4
50747: PPUSH
50748: CALL_OW 380
// un := CreateHuman ;
50752: LD_ADDR_VAR 0 14
50756: PUSH
50757: CALL_OW 44
50761: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50762: LD_ADDR_VAR 0 7
50766: PUSH
50767: LD_VAR 0 7
50771: PPUSH
50772: LD_INT 1
50774: PPUSH
50775: LD_VAR 0 14
50779: PPUSH
50780: CALL_OW 2
50784: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50785: LD_VAR 0 14
50789: PPUSH
50790: LD_VAR 0 9
50794: PPUSH
50795: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50799: LD_VAR 0 9
50803: PPUSH
50804: CALL_OW 313
50808: PUSH
50809: LD_INT 6
50811: EQUAL
50812: IFTRUE 50836
50814: PUSH
50815: LD_VAR 0 9
50819: PPUSH
50820: CALL_OW 266
50824: PUSH
50825: LD_INT 32
50827: PUSH
50828: LD_INT 31
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: IN
50835: OR
50836: IFFALSE 50648
50838: GO 50645
50840: POP
50841: POP
// end else
50842: GO 51228
// for j = 1 to x do
50844: LD_ADDR_VAR 0 9
50848: PUSH
50849: DOUBLE
50850: LD_INT 1
50852: DEC
50853: ST_TO_ADDR
50854: LD_VAR 0 13
50858: PUSH
50859: FOR_TO
50860: IFFALSE 51226
// begin InitHc ;
50862: CALL_OW 19
// if not f then
50866: LD_VAR 0 12
50870: NOT
50871: IFFALSE 50960
// begin PrepareHuman ( false , i , skill ) ;
50873: LD_INT 0
50875: PPUSH
50876: LD_VAR 0 8
50880: PPUSH
50881: LD_VAR 0 4
50885: PPUSH
50886: CALL_OW 380
// un := CreateHuman ;
50890: LD_ADDR_VAR 0 14
50894: PUSH
50895: CALL_OW 44
50899: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50900: LD_ADDR_VAR 0 7
50904: PUSH
50905: LD_VAR 0 7
50909: PPUSH
50910: LD_INT 1
50912: PPUSH
50913: LD_VAR 0 14
50917: PPUSH
50918: CALL_OW 2
50922: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50923: LD_VAR 0 14
50927: PPUSH
50928: LD_VAR 0 1
50932: PPUSH
50933: CALL_OW 250
50937: PPUSH
50938: LD_VAR 0 1
50942: PPUSH
50943: CALL_OW 251
50947: PPUSH
50948: LD_INT 10
50950: PPUSH
50951: LD_INT 0
50953: PPUSH
50954: CALL_OW 50
// continue ;
50958: GO 50859
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50960: LD_VAR 0 12
50964: PUSH
50965: LD_INT 1
50967: ARRAY
50968: PPUSH
50969: CALL_OW 313
50973: IFFALSE 51001
50975: PUSH
50976: LD_VAR 0 12
50980: PUSH
50981: LD_INT 1
50983: ARRAY
50984: PPUSH
50985: CALL_OW 266
50989: PUSH
50990: LD_INT 32
50992: PUSH
50993: LD_INT 31
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: IN
51000: AND
51001: IFTRUE 51022
51003: PUSH
51004: LD_VAR 0 12
51008: PUSH
51009: LD_INT 1
51011: ARRAY
51012: PPUSH
51013: CALL_OW 313
51017: PUSH
51018: LD_INT 6
51020: EQUAL
51021: OR
51022: IFFALSE 51042
// f := Delete ( f , 1 ) ;
51024: LD_ADDR_VAR 0 12
51028: PUSH
51029: LD_VAR 0 12
51033: PPUSH
51034: LD_INT 1
51036: PPUSH
51037: CALL_OW 3
51041: ST_TO_ADDR
// if not f then
51042: LD_VAR 0 12
51046: NOT
51047: IFFALSE 51065
// begin x := x + 2 ;
51049: LD_ADDR_VAR 0 13
51053: PUSH
51054: LD_VAR 0 13
51058: PUSH
51059: LD_INT 2
51061: PLUS
51062: ST_TO_ADDR
// continue ;
51063: GO 50859
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51065: LD_VAR 0 12
51069: PUSH
51070: LD_INT 1
51072: ARRAY
51073: PPUSH
51074: CALL_OW 266
51078: PUSH
51079: LD_INT 5
51081: EQUAL
51082: IFFALSE 51156
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51084: LD_VAR 0 12
51088: PUSH
51089: LD_INT 1
51091: ARRAY
51092: PPUSH
51093: CALL_OW 313
51097: PUSH
51098: LD_INT 3
51100: LESS
51101: IFFALSE 51137
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51103: LD_INT 0
51105: PPUSH
51106: LD_INT 5
51108: PUSH
51109: LD_INT 8
51111: PUSH
51112: LD_INT 9
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: LIST
51119: PUSH
51120: LD_VAR 0 17
51124: ARRAY
51125: PPUSH
51126: LD_VAR 0 4
51130: PPUSH
51131: CALL_OW 380
51135: GO 51154
// PrepareHuman ( false , i , skill ) ;
51137: LD_INT 0
51139: PPUSH
51140: LD_VAR 0 8
51144: PPUSH
51145: LD_VAR 0 4
51149: PPUSH
51150: CALL_OW 380
// end else
51154: GO 51173
// PrepareHuman ( false , i , skill ) ;
51156: LD_INT 0
51158: PPUSH
51159: LD_VAR 0 8
51163: PPUSH
51164: LD_VAR 0 4
51168: PPUSH
51169: CALL_OW 380
// un := CreateHuman ;
51173: LD_ADDR_VAR 0 14
51177: PUSH
51178: CALL_OW 44
51182: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51183: LD_ADDR_VAR 0 7
51187: PUSH
51188: LD_VAR 0 7
51192: PPUSH
51193: LD_INT 1
51195: PPUSH
51196: LD_VAR 0 14
51200: PPUSH
51201: CALL_OW 2
51205: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51206: LD_VAR 0 14
51210: PPUSH
51211: LD_VAR 0 12
51215: PUSH
51216: LD_INT 1
51218: ARRAY
51219: PPUSH
51220: CALL_OW 52
// end ;
51224: GO 50859
51226: POP
51227: POP
// end ;
51228: GO 50159
51230: POP
51231: POP
// result := result ^ buildings ;
51232: LD_ADDR_VAR 0 7
51236: PUSH
51237: LD_VAR 0 7
51241: PUSH
51242: LD_VAR 0 18
51246: ADD
51247: ST_TO_ADDR
// end else
51248: GO 51391
// begin for i = 1 to personel do
51250: LD_ADDR_VAR 0 8
51254: PUSH
51255: DOUBLE
51256: LD_INT 1
51258: DEC
51259: ST_TO_ADDR
51260: LD_VAR 0 6
51264: PUSH
51265: FOR_TO
51266: IFFALSE 51389
// begin if i > 4 then
51268: LD_VAR 0 8
51272: PUSH
51273: LD_INT 4
51275: GREATER
51276: IFFALSE 51280
// break ;
51278: GO 51389
// x := personel [ i ] ;
51280: LD_ADDR_VAR 0 13
51284: PUSH
51285: LD_VAR 0 6
51289: PUSH
51290: LD_VAR 0 8
51294: ARRAY
51295: ST_TO_ADDR
// if x = - 1 then
51296: LD_VAR 0 13
51300: PUSH
51301: LD_INT 1
51303: NEG
51304: EQUAL
51305: IFFALSE 51309
// continue ;
51307: GO 51265
// PrepareHuman ( false , i , skill ) ;
51309: LD_INT 0
51311: PPUSH
51312: LD_VAR 0 8
51316: PPUSH
51317: LD_VAR 0 4
51321: PPUSH
51322: CALL_OW 380
// un := CreateHuman ;
51326: LD_ADDR_VAR 0 14
51330: PUSH
51331: CALL_OW 44
51335: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51336: LD_VAR 0 14
51340: PPUSH
51341: LD_VAR 0 1
51345: PPUSH
51346: CALL_OW 250
51350: PPUSH
51351: LD_VAR 0 1
51355: PPUSH
51356: CALL_OW 251
51360: PPUSH
51361: LD_INT 10
51363: PPUSH
51364: LD_INT 0
51366: PPUSH
51367: CALL_OW 50
// result := result ^ un ;
51371: LD_ADDR_VAR 0 7
51375: PUSH
51376: LD_VAR 0 7
51380: PUSH
51381: LD_VAR 0 14
51385: ADD
51386: ST_TO_ADDR
// end ;
51387: GO 51265
51389: POP
51390: POP
// end ; end ;
51391: LD_VAR 0 7
51395: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51396: LD_INT 0
51398: PPUSH
51399: PPUSH
51400: PPUSH
51401: PPUSH
51402: PPUSH
51403: PPUSH
51404: PPUSH
51405: PPUSH
51406: PPUSH
51407: PPUSH
51408: PPUSH
51409: PPUSH
51410: PPUSH
51411: PPUSH
51412: PPUSH
51413: PPUSH
// result := false ;
51414: LD_ADDR_VAR 0 3
51418: PUSH
51419: LD_INT 0
51421: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51422: LD_VAR 0 1
51426: NOT
51427: IFTRUE 51452
51429: PUSH
51430: LD_VAR 0 1
51434: PPUSH
51435: CALL_OW 266
51439: PUSH
51440: LD_INT 32
51442: PUSH
51443: LD_INT 33
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: IN
51450: NOT
51451: OR
51452: IFFALSE 51456
// exit ;
51454: GO 52591
// nat := GetNation ( tower ) ;
51456: LD_ADDR_VAR 0 12
51460: PUSH
51461: LD_VAR 0 1
51465: PPUSH
51466: CALL_OW 248
51470: ST_TO_ADDR
// side := GetSide ( tower ) ;
51471: LD_ADDR_VAR 0 16
51475: PUSH
51476: LD_VAR 0 1
51480: PPUSH
51481: CALL_OW 255
51485: ST_TO_ADDR
// x := GetX ( tower ) ;
51486: LD_ADDR_VAR 0 10
51490: PUSH
51491: LD_VAR 0 1
51495: PPUSH
51496: CALL_OW 250
51500: ST_TO_ADDR
// y := GetY ( tower ) ;
51501: LD_ADDR_VAR 0 11
51505: PUSH
51506: LD_VAR 0 1
51510: PPUSH
51511: CALL_OW 251
51515: ST_TO_ADDR
// if not x or not y then
51516: LD_VAR 0 10
51520: NOT
51521: IFTRUE 51530
51523: PUSH
51524: LD_VAR 0 11
51528: NOT
51529: OR
51530: IFFALSE 51534
// exit ;
51532: GO 52591
// weapon := 0 ;
51534: LD_ADDR_VAR 0 18
51538: PUSH
51539: LD_INT 0
51541: ST_TO_ADDR
// fac_list := [ ] ;
51542: LD_ADDR_VAR 0 17
51546: PUSH
51547: EMPTY
51548: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51549: LD_ADDR_VAR 0 6
51553: PUSH
51554: LD_VAR 0 1
51558: PPUSH
51559: CALL_OW 274
51563: PPUSH
51564: LD_VAR 0 2
51568: PPUSH
51569: LD_INT 0
51571: PPUSH
51572: CALL 49126 0 3
51576: PPUSH
51577: LD_INT 30
51579: PUSH
51580: LD_INT 3
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PPUSH
51587: CALL_OW 72
51591: ST_TO_ADDR
// if not factories then
51592: LD_VAR 0 6
51596: NOT
51597: IFFALSE 51601
// exit ;
51599: GO 52591
// for i in factories do
51601: LD_ADDR_VAR 0 8
51605: PUSH
51606: LD_VAR 0 6
51610: PUSH
51611: FOR_IN
51612: IFFALSE 51637
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51614: LD_ADDR_VAR 0 17
51618: PUSH
51619: LD_VAR 0 17
51623: PUSH
51624: LD_VAR 0 8
51628: PPUSH
51629: CALL_OW 478
51633: UNION
51634: ST_TO_ADDR
51635: GO 51611
51637: POP
51638: POP
// if not fac_list then
51639: LD_VAR 0 17
51643: NOT
51644: IFFALSE 51648
// exit ;
51646: GO 52591
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51648: LD_ADDR_VAR 0 5
51652: PUSH
51653: LD_INT 4
51655: PUSH
51656: LD_INT 5
51658: PUSH
51659: LD_INT 9
51661: PUSH
51662: LD_INT 10
51664: PUSH
51665: LD_INT 6
51667: PUSH
51668: LD_INT 7
51670: PUSH
51671: LD_INT 11
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 27
51685: PUSH
51686: LD_INT 28
51688: PUSH
51689: LD_INT 26
51691: PUSH
51692: LD_INT 30
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 43
51703: PUSH
51704: LD_INT 44
51706: PUSH
51707: LD_INT 46
51709: PUSH
51710: LD_INT 45
51712: PUSH
51713: LD_INT 47
51715: PUSH
51716: LD_INT 49
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: LIST
51731: PUSH
51732: LD_VAR 0 12
51736: ARRAY
51737: ST_TO_ADDR
// list := list isect fac_list ;
51738: LD_ADDR_VAR 0 5
51742: PUSH
51743: LD_VAR 0 5
51747: PUSH
51748: LD_VAR 0 17
51752: ISECT
51753: ST_TO_ADDR
// if not list then
51754: LD_VAR 0 5
51758: NOT
51759: IFFALSE 51763
// exit ;
51761: GO 52591
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51763: LD_VAR 0 12
51767: PUSH
51768: LD_INT 3
51770: EQUAL
51771: IFFALSE 51783
51773: PUSH
51774: LD_INT 49
51776: PUSH
51777: LD_VAR 0 5
51781: IN
51782: AND
51783: IFFALSE 51803
51785: PUSH
51786: LD_INT 31
51788: PPUSH
51789: LD_VAR 0 16
51793: PPUSH
51794: CALL_OW 321
51798: PUSH
51799: LD_INT 2
51801: EQUAL
51802: AND
51803: IFFALSE 51863
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51805: LD_INT 22
51807: PUSH
51808: LD_VAR 0 16
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 35
51819: PUSH
51820: LD_INT 49
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 91
51829: PUSH
51830: LD_VAR 0 1
51834: PUSH
51835: LD_INT 10
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: LIST
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: LIST
51847: PPUSH
51848: CALL_OW 69
51852: NOT
51853: IFFALSE 51863
// weapon := ru_time_lapser ;
51855: LD_ADDR_VAR 0 18
51859: PUSH
51860: LD_INT 49
51862: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51863: LD_VAR 0 12
51867: PUSH
51868: LD_INT 1
51870: PUSH
51871: LD_INT 2
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: IN
51878: IFFALSE 51902
51880: PUSH
51881: LD_INT 11
51883: PUSH
51884: LD_VAR 0 5
51888: IN
51889: IFTRUE 51901
51891: PUSH
51892: LD_INT 30
51894: PUSH
51895: LD_VAR 0 5
51899: IN
51900: OR
51901: AND
51902: IFFALSE 51922
51904: PUSH
51905: LD_INT 6
51907: PPUSH
51908: LD_VAR 0 16
51912: PPUSH
51913: CALL_OW 321
51917: PUSH
51918: LD_INT 2
51920: EQUAL
51921: AND
51922: IFFALSE 52089
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51924: LD_INT 22
51926: PUSH
51927: LD_VAR 0 16
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 2
51938: PUSH
51939: LD_INT 35
51941: PUSH
51942: LD_INT 11
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 35
51951: PUSH
51952: LD_INT 30
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 91
51966: PUSH
51967: LD_VAR 0 1
51971: PUSH
51972: LD_INT 18
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: LIST
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: LIST
51984: PPUSH
51985: CALL_OW 69
51989: NOT
51990: IFFALSE 52066
51992: PUSH
51993: LD_INT 22
51995: PUSH
51996: LD_VAR 0 16
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 2
52007: PUSH
52008: LD_INT 30
52010: PUSH
52011: LD_INT 32
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 30
52020: PUSH
52021: LD_INT 33
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 91
52035: PUSH
52036: LD_VAR 0 1
52040: PUSH
52041: LD_INT 12
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: LIST
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: LIST
52053: PUSH
52054: EMPTY
52055: LIST
52056: PPUSH
52057: CALL_OW 69
52061: PUSH
52062: LD_INT 2
52064: GREATER
52065: AND
52066: IFFALSE 52089
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52068: LD_ADDR_VAR 0 18
52072: PUSH
52073: LD_INT 11
52075: PUSH
52076: LD_INT 30
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_VAR 0 12
52087: ARRAY
52088: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52089: LD_VAR 0 18
52093: NOT
52094: IFFALSE 52114
52096: PUSH
52097: LD_INT 40
52099: PPUSH
52100: LD_VAR 0 16
52104: PPUSH
52105: CALL_OW 321
52109: PUSH
52110: LD_INT 2
52112: EQUAL
52113: AND
52114: IFFALSE 52150
52116: PUSH
52117: LD_INT 7
52119: PUSH
52120: LD_VAR 0 5
52124: IN
52125: IFTRUE 52137
52127: PUSH
52128: LD_INT 28
52130: PUSH
52131: LD_VAR 0 5
52135: IN
52136: OR
52137: IFTRUE 52149
52139: PUSH
52140: LD_INT 45
52142: PUSH
52143: LD_VAR 0 5
52147: IN
52148: OR
52149: AND
52150: IFFALSE 52404
// begin hex := GetHexInfo ( x , y ) ;
52152: LD_ADDR_VAR 0 4
52156: PUSH
52157: LD_VAR 0 10
52161: PPUSH
52162: LD_VAR 0 11
52166: PPUSH
52167: CALL_OW 546
52171: ST_TO_ADDR
// if hex [ 1 ] then
52172: LD_VAR 0 4
52176: PUSH
52177: LD_INT 1
52179: ARRAY
52180: IFFALSE 52184
// exit ;
52182: GO 52591
// height := hex [ 2 ] ;
52184: LD_ADDR_VAR 0 15
52188: PUSH
52189: LD_VAR 0 4
52193: PUSH
52194: LD_INT 2
52196: ARRAY
52197: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52198: LD_ADDR_VAR 0 14
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: LD_INT 2
52208: PUSH
52209: LD_INT 3
52211: PUSH
52212: LD_INT 5
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: ST_TO_ADDR
// for i in tmp do
52221: LD_ADDR_VAR 0 8
52225: PUSH
52226: LD_VAR 0 14
52230: PUSH
52231: FOR_IN
52232: IFFALSE 52402
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52234: LD_ADDR_VAR 0 9
52238: PUSH
52239: LD_VAR 0 10
52243: PPUSH
52244: LD_VAR 0 8
52248: PPUSH
52249: LD_INT 5
52251: PPUSH
52252: CALL_OW 272
52256: PUSH
52257: LD_VAR 0 11
52261: PPUSH
52262: LD_VAR 0 8
52266: PPUSH
52267: LD_INT 5
52269: PPUSH
52270: CALL_OW 273
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52279: LD_VAR 0 9
52283: PUSH
52284: LD_INT 1
52286: ARRAY
52287: PPUSH
52288: LD_VAR 0 9
52292: PUSH
52293: LD_INT 2
52295: ARRAY
52296: PPUSH
52297: CALL_OW 488
52301: IFFALSE 52400
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52303: LD_ADDR_VAR 0 4
52307: PUSH
52308: LD_VAR 0 9
52312: PUSH
52313: LD_INT 1
52315: ARRAY
52316: PPUSH
52317: LD_VAR 0 9
52321: PUSH
52322: LD_INT 2
52324: ARRAY
52325: PPUSH
52326: CALL_OW 546
52330: ST_TO_ADDR
// if hex [ 1 ] then
52331: LD_VAR 0 4
52335: PUSH
52336: LD_INT 1
52338: ARRAY
52339: IFFALSE 52343
// continue ;
52341: GO 52231
// h := hex [ 2 ] ;
52343: LD_ADDR_VAR 0 13
52347: PUSH
52348: LD_VAR 0 4
52352: PUSH
52353: LD_INT 2
52355: ARRAY
52356: ST_TO_ADDR
// if h + 7 < height then
52357: LD_VAR 0 13
52361: PUSH
52362: LD_INT 7
52364: PLUS
52365: PUSH
52366: LD_VAR 0 15
52370: LESS
52371: IFFALSE 52400
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52373: LD_ADDR_VAR 0 18
52377: PUSH
52378: LD_INT 7
52380: PUSH
52381: LD_INT 28
52383: PUSH
52384: LD_INT 45
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: LIST
52391: PUSH
52392: LD_VAR 0 12
52396: ARRAY
52397: ST_TO_ADDR
// break ;
52398: GO 52402
// end ; end ; end ;
52400: GO 52231
52402: POP
52403: POP
// end ; if not weapon then
52404: LD_VAR 0 18
52408: NOT
52409: IFFALSE 52469
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52411: LD_ADDR_VAR 0 5
52415: PUSH
52416: LD_VAR 0 5
52420: PUSH
52421: LD_INT 11
52423: PUSH
52424: LD_INT 30
52426: PUSH
52427: LD_INT 49
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: LIST
52434: DIFF
52435: ST_TO_ADDR
// if not list then
52436: LD_VAR 0 5
52440: NOT
52441: IFFALSE 52445
// exit ;
52443: GO 52591
// weapon := list [ rand ( 1 , list ) ] ;
52445: LD_ADDR_VAR 0 18
52449: PUSH
52450: LD_VAR 0 5
52454: PUSH
52455: LD_INT 1
52457: PPUSH
52458: LD_VAR 0 5
52462: PPUSH
52463: CALL_OW 12
52467: ARRAY
52468: ST_TO_ADDR
// end ; if weapon then
52469: LD_VAR 0 18
52473: IFFALSE 52591
// begin tmp := CostOfWeapon ( weapon ) ;
52475: LD_ADDR_VAR 0 14
52479: PUSH
52480: LD_VAR 0 18
52484: PPUSH
52485: CALL_OW 451
52489: ST_TO_ADDR
// j := GetBase ( tower ) ;
52490: LD_ADDR_VAR 0 9
52494: PUSH
52495: LD_VAR 0 1
52499: PPUSH
52500: CALL_OW 274
52504: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52505: LD_VAR 0 9
52509: PPUSH
52510: LD_INT 1
52512: PPUSH
52513: CALL_OW 275
52517: PUSH
52518: LD_VAR 0 14
52522: PUSH
52523: LD_INT 1
52525: ARRAY
52526: GREATEREQUAL
52527: IFFALSE 52553
52529: PUSH
52530: LD_VAR 0 9
52534: PPUSH
52535: LD_INT 2
52537: PPUSH
52538: CALL_OW 275
52542: PUSH
52543: LD_VAR 0 14
52547: PUSH
52548: LD_INT 2
52550: ARRAY
52551: GREATEREQUAL
52552: AND
52553: IFFALSE 52579
52555: PUSH
52556: LD_VAR 0 9
52560: PPUSH
52561: LD_INT 3
52563: PPUSH
52564: CALL_OW 275
52568: PUSH
52569: LD_VAR 0 14
52573: PUSH
52574: LD_INT 3
52576: ARRAY
52577: GREATEREQUAL
52578: AND
52579: IFFALSE 52591
// result := weapon ;
52581: LD_ADDR_VAR 0 3
52585: PUSH
52586: LD_VAR 0 18
52590: ST_TO_ADDR
// end ; end ;
52591: LD_VAR 0 3
52595: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52596: LD_INT 0
52598: PPUSH
52599: PPUSH
// result := true ;
52600: LD_ADDR_VAR 0 3
52604: PUSH
52605: LD_INT 1
52607: ST_TO_ADDR
// if array1 = array2 then
52608: LD_VAR 0 1
52612: PUSH
52613: LD_VAR 0 2
52617: EQUAL
52618: IFFALSE 52678
// begin for i = 1 to array1 do
52620: LD_ADDR_VAR 0 4
52624: PUSH
52625: DOUBLE
52626: LD_INT 1
52628: DEC
52629: ST_TO_ADDR
52630: LD_VAR 0 1
52634: PUSH
52635: FOR_TO
52636: IFFALSE 52674
// if array1 [ i ] <> array2 [ i ] then
52638: LD_VAR 0 1
52642: PUSH
52643: LD_VAR 0 4
52647: ARRAY
52648: PUSH
52649: LD_VAR 0 2
52653: PUSH
52654: LD_VAR 0 4
52658: ARRAY
52659: NONEQUAL
52660: IFFALSE 52672
// begin result := false ;
52662: LD_ADDR_VAR 0 3
52666: PUSH
52667: LD_INT 0
52669: ST_TO_ADDR
// break ;
52670: GO 52674
// end ;
52672: GO 52635
52674: POP
52675: POP
// end else
52676: GO 52686
// result := false ;
52678: LD_ADDR_VAR 0 3
52682: PUSH
52683: LD_INT 0
52685: ST_TO_ADDR
// end ;
52686: LD_VAR 0 3
52690: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52691: LD_INT 0
52693: PPUSH
52694: PPUSH
// if not array1 or not array2 then
52695: LD_VAR 0 1
52699: NOT
52700: IFTRUE 52709
52702: PUSH
52703: LD_VAR 0 2
52707: NOT
52708: OR
52709: IFFALSE 52713
// exit ;
52711: GO 52777
// result := true ;
52713: LD_ADDR_VAR 0 3
52717: PUSH
52718: LD_INT 1
52720: ST_TO_ADDR
// for i = 1 to array1 do
52721: LD_ADDR_VAR 0 4
52725: PUSH
52726: DOUBLE
52727: LD_INT 1
52729: DEC
52730: ST_TO_ADDR
52731: LD_VAR 0 1
52735: PUSH
52736: FOR_TO
52737: IFFALSE 52775
// if array1 [ i ] <> array2 [ i ] then
52739: LD_VAR 0 1
52743: PUSH
52744: LD_VAR 0 4
52748: ARRAY
52749: PUSH
52750: LD_VAR 0 2
52754: PUSH
52755: LD_VAR 0 4
52759: ARRAY
52760: NONEQUAL
52761: IFFALSE 52773
// begin result := false ;
52763: LD_ADDR_VAR 0 3
52767: PUSH
52768: LD_INT 0
52770: ST_TO_ADDR
// break ;
52771: GO 52775
// end ;
52773: GO 52736
52775: POP
52776: POP
// end ;
52777: LD_VAR 0 3
52781: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52782: LD_INT 0
52784: PPUSH
52785: PPUSH
52786: PPUSH
// pom := GetBase ( fac ) ;
52787: LD_ADDR_VAR 0 5
52791: PUSH
52792: LD_VAR 0 1
52796: PPUSH
52797: CALL_OW 274
52801: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52802: LD_ADDR_VAR 0 4
52806: PUSH
52807: LD_VAR 0 2
52811: PUSH
52812: LD_INT 1
52814: ARRAY
52815: PPUSH
52816: LD_VAR 0 2
52820: PUSH
52821: LD_INT 2
52823: ARRAY
52824: PPUSH
52825: LD_VAR 0 2
52829: PUSH
52830: LD_INT 3
52832: ARRAY
52833: PPUSH
52834: LD_VAR 0 2
52838: PUSH
52839: LD_INT 4
52841: ARRAY
52842: PPUSH
52843: CALL_OW 449
52847: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52848: LD_ADDR_VAR 0 3
52852: PUSH
52853: LD_VAR 0 5
52857: PPUSH
52858: LD_INT 1
52860: PPUSH
52861: CALL_OW 275
52865: PUSH
52866: LD_VAR 0 4
52870: PUSH
52871: LD_INT 1
52873: ARRAY
52874: GREATEREQUAL
52875: IFFALSE 52901
52877: PUSH
52878: LD_VAR 0 5
52882: PPUSH
52883: LD_INT 2
52885: PPUSH
52886: CALL_OW 275
52890: PUSH
52891: LD_VAR 0 4
52895: PUSH
52896: LD_INT 2
52898: ARRAY
52899: GREATEREQUAL
52900: AND
52901: IFFALSE 52927
52903: PUSH
52904: LD_VAR 0 5
52908: PPUSH
52909: LD_INT 3
52911: PPUSH
52912: CALL_OW 275
52916: PUSH
52917: LD_VAR 0 4
52921: PUSH
52922: LD_INT 3
52924: ARRAY
52925: GREATEREQUAL
52926: AND
52927: ST_TO_ADDR
// end ;
52928: LD_VAR 0 3
52932: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52933: LD_INT 0
52935: PPUSH
52936: PPUSH
52937: PPUSH
52938: PPUSH
// pom := GetBase ( building ) ;
52939: LD_ADDR_VAR 0 3
52943: PUSH
52944: LD_VAR 0 1
52948: PPUSH
52949: CALL_OW 274
52953: ST_TO_ADDR
// if not pom then
52954: LD_VAR 0 3
52958: NOT
52959: IFFALSE 52963
// exit ;
52961: GO 53137
// btype := GetBType ( building ) ;
52963: LD_ADDR_VAR 0 5
52967: PUSH
52968: LD_VAR 0 1
52972: PPUSH
52973: CALL_OW 266
52977: ST_TO_ADDR
// if btype = b_armoury then
52978: LD_VAR 0 5
52982: PUSH
52983: LD_INT 4
52985: EQUAL
52986: IFFALSE 52996
// btype := b_barracks ;
52988: LD_ADDR_VAR 0 5
52992: PUSH
52993: LD_INT 5
52995: ST_TO_ADDR
// if btype = b_depot then
52996: LD_VAR 0 5
53000: PUSH
53001: LD_INT 0
53003: EQUAL
53004: IFFALSE 53014
// btype := b_warehouse ;
53006: LD_ADDR_VAR 0 5
53010: PUSH
53011: LD_INT 1
53013: ST_TO_ADDR
// if btype = b_workshop then
53014: LD_VAR 0 5
53018: PUSH
53019: LD_INT 2
53021: EQUAL
53022: IFFALSE 53032
// btype := b_factory ;
53024: LD_ADDR_VAR 0 5
53028: PUSH
53029: LD_INT 3
53031: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53032: LD_ADDR_VAR 0 4
53036: PUSH
53037: LD_VAR 0 5
53041: PPUSH
53042: LD_VAR 0 1
53046: PPUSH
53047: CALL_OW 248
53051: PPUSH
53052: CALL_OW 450
53056: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53057: LD_ADDR_VAR 0 2
53061: PUSH
53062: LD_VAR 0 3
53066: PPUSH
53067: LD_INT 1
53069: PPUSH
53070: CALL_OW 275
53074: PUSH
53075: LD_VAR 0 4
53079: PUSH
53080: LD_INT 1
53082: ARRAY
53083: GREATEREQUAL
53084: IFFALSE 53110
53086: PUSH
53087: LD_VAR 0 3
53091: PPUSH
53092: LD_INT 2
53094: PPUSH
53095: CALL_OW 275
53099: PUSH
53100: LD_VAR 0 4
53104: PUSH
53105: LD_INT 2
53107: ARRAY
53108: GREATEREQUAL
53109: AND
53110: IFFALSE 53136
53112: PUSH
53113: LD_VAR 0 3
53117: PPUSH
53118: LD_INT 3
53120: PPUSH
53121: CALL_OW 275
53125: PUSH
53126: LD_VAR 0 4
53130: PUSH
53131: LD_INT 3
53133: ARRAY
53134: GREATEREQUAL
53135: AND
53136: ST_TO_ADDR
// end ;
53137: LD_VAR 0 2
53141: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53142: LD_INT 0
53144: PPUSH
53145: PPUSH
53146: PPUSH
// pom := GetBase ( building ) ;
53147: LD_ADDR_VAR 0 4
53151: PUSH
53152: LD_VAR 0 1
53156: PPUSH
53157: CALL_OW 274
53161: ST_TO_ADDR
// if not pom then
53162: LD_VAR 0 4
53166: NOT
53167: IFFALSE 53171
// exit ;
53169: GO 53276
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53171: LD_ADDR_VAR 0 5
53175: PUSH
53176: LD_VAR 0 2
53180: PPUSH
53181: LD_VAR 0 1
53185: PPUSH
53186: CALL_OW 248
53190: PPUSH
53191: CALL_OW 450
53195: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53196: LD_ADDR_VAR 0 3
53200: PUSH
53201: LD_VAR 0 4
53205: PPUSH
53206: LD_INT 1
53208: PPUSH
53209: CALL_OW 275
53213: PUSH
53214: LD_VAR 0 5
53218: PUSH
53219: LD_INT 1
53221: ARRAY
53222: GREATEREQUAL
53223: IFFALSE 53249
53225: PUSH
53226: LD_VAR 0 4
53230: PPUSH
53231: LD_INT 2
53233: PPUSH
53234: CALL_OW 275
53238: PUSH
53239: LD_VAR 0 5
53243: PUSH
53244: LD_INT 2
53246: ARRAY
53247: GREATEREQUAL
53248: AND
53249: IFFALSE 53275
53251: PUSH
53252: LD_VAR 0 4
53256: PPUSH
53257: LD_INT 3
53259: PPUSH
53260: CALL_OW 275
53264: PUSH
53265: LD_VAR 0 5
53269: PUSH
53270: LD_INT 3
53272: ARRAY
53273: GREATEREQUAL
53274: AND
53275: ST_TO_ADDR
// end ;
53276: LD_VAR 0 3
53280: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53281: LD_INT 0
53283: PPUSH
53284: PPUSH
53285: PPUSH
53286: PPUSH
53287: PPUSH
53288: PPUSH
53289: PPUSH
53290: PPUSH
53291: PPUSH
53292: PPUSH
53293: PPUSH
// result := false ;
53294: LD_ADDR_VAR 0 8
53298: PUSH
53299: LD_INT 0
53301: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53302: LD_VAR 0 5
53306: NOT
53307: IFTRUE 53316
53309: PUSH
53310: LD_VAR 0 1
53314: NOT
53315: OR
53316: IFTRUE 53325
53318: PUSH
53319: LD_VAR 0 2
53323: NOT
53324: OR
53325: IFTRUE 53334
53327: PUSH
53328: LD_VAR 0 3
53332: NOT
53333: OR
53334: IFFALSE 53338
// exit ;
53336: GO 54164
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53338: LD_ADDR_VAR 0 14
53342: PUSH
53343: LD_VAR 0 1
53347: PPUSH
53348: LD_VAR 0 2
53352: PPUSH
53353: LD_VAR 0 3
53357: PPUSH
53358: LD_VAR 0 4
53362: PPUSH
53363: LD_VAR 0 5
53367: PUSH
53368: LD_INT 1
53370: ARRAY
53371: PPUSH
53372: CALL_OW 248
53376: PPUSH
53377: LD_INT 0
53379: PPUSH
53380: CALL 55445 0 6
53384: ST_TO_ADDR
// if not hexes then
53385: LD_VAR 0 14
53389: NOT
53390: IFFALSE 53394
// exit ;
53392: GO 54164
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53394: LD_ADDR_VAR 0 17
53398: PUSH
53399: LD_VAR 0 5
53403: PPUSH
53404: LD_INT 22
53406: PUSH
53407: LD_VAR 0 13
53411: PPUSH
53412: CALL_OW 255
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 2
53423: PUSH
53424: LD_INT 30
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 30
53436: PUSH
53437: LD_INT 1
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: LIST
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PPUSH
53453: CALL_OW 72
53457: ST_TO_ADDR
// for i = 1 to hexes do
53458: LD_ADDR_VAR 0 9
53462: PUSH
53463: DOUBLE
53464: LD_INT 1
53466: DEC
53467: ST_TO_ADDR
53468: LD_VAR 0 14
53472: PUSH
53473: FOR_TO
53474: IFFALSE 54162
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53476: LD_ADDR_VAR 0 13
53480: PUSH
53481: LD_VAR 0 14
53485: PUSH
53486: LD_VAR 0 9
53490: ARRAY
53491: PUSH
53492: LD_INT 1
53494: ARRAY
53495: PPUSH
53496: LD_VAR 0 14
53500: PUSH
53501: LD_VAR 0 9
53505: ARRAY
53506: PUSH
53507: LD_INT 2
53509: ARRAY
53510: PPUSH
53511: CALL_OW 428
53515: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53516: LD_VAR 0 14
53520: PUSH
53521: LD_VAR 0 9
53525: ARRAY
53526: PUSH
53527: LD_INT 1
53529: ARRAY
53530: PPUSH
53531: LD_VAR 0 14
53535: PUSH
53536: LD_VAR 0 9
53540: ARRAY
53541: PUSH
53542: LD_INT 2
53544: ARRAY
53545: PPUSH
53546: CALL_OW 351
53550: IFTRUE 53589
53552: PUSH
53553: LD_VAR 0 14
53557: PUSH
53558: LD_VAR 0 9
53562: ARRAY
53563: PUSH
53564: LD_INT 1
53566: ARRAY
53567: PPUSH
53568: LD_VAR 0 14
53572: PUSH
53573: LD_VAR 0 9
53577: ARRAY
53578: PUSH
53579: LD_INT 2
53581: ARRAY
53582: PPUSH
53583: CALL_OW 488
53587: NOT
53588: OR
53589: IFTRUE 53606
53591: PUSH
53592: LD_VAR 0 13
53596: PPUSH
53597: CALL_OW 247
53601: PUSH
53602: LD_INT 3
53604: EQUAL
53605: OR
53606: IFFALSE 53612
// exit ;
53608: POP
53609: POP
53610: GO 54164
// if not tmp then
53612: LD_VAR 0 13
53616: NOT
53617: IFFALSE 53621
// continue ;
53619: GO 53473
// result := true ;
53621: LD_ADDR_VAR 0 8
53625: PUSH
53626: LD_INT 1
53628: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53629: LD_VAR 0 6
53633: IFFALSE 53650
53635: PUSH
53636: LD_VAR 0 13
53640: PPUSH
53641: CALL_OW 247
53645: PUSH
53646: LD_INT 2
53648: EQUAL
53649: AND
53650: IFFALSE 53667
53652: PUSH
53653: LD_VAR 0 13
53657: PPUSH
53658: CALL_OW 263
53662: PUSH
53663: LD_INT 1
53665: EQUAL
53666: AND
53667: IFFALSE 53831
// begin if IsDrivenBy ( tmp ) then
53669: LD_VAR 0 13
53673: PPUSH
53674: CALL_OW 311
53678: IFFALSE 53682
// continue ;
53680: GO 53473
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53682: LD_VAR 0 6
53686: PPUSH
53687: LD_INT 3
53689: PUSH
53690: LD_INT 60
53692: PUSH
53693: EMPTY
53694: LIST
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 3
53702: PUSH
53703: LD_INT 55
53705: PUSH
53706: EMPTY
53707: LIST
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PPUSH
53717: CALL_OW 72
53721: IFFALSE 53829
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53723: LD_ADDR_VAR 0 18
53727: PUSH
53728: LD_VAR 0 6
53732: PPUSH
53733: LD_INT 3
53735: PUSH
53736: LD_INT 60
53738: PUSH
53739: EMPTY
53740: LIST
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 3
53748: PUSH
53749: LD_INT 55
53751: PUSH
53752: EMPTY
53753: LIST
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PPUSH
53763: CALL_OW 72
53767: PUSH
53768: LD_INT 1
53770: ARRAY
53771: ST_TO_ADDR
// if IsInUnit ( driver ) then
53772: LD_VAR 0 18
53776: PPUSH
53777: CALL_OW 310
53781: IFFALSE 53792
// ComExit ( driver ) ;
53783: LD_VAR 0 18
53787: PPUSH
53788: CALL 79445 0 1
// AddComEnterUnit ( driver , tmp ) ;
53792: LD_VAR 0 18
53796: PPUSH
53797: LD_VAR 0 13
53801: PPUSH
53802: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53806: LD_VAR 0 18
53810: PPUSH
53811: LD_VAR 0 7
53815: PPUSH
53816: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53820: LD_VAR 0 18
53824: PPUSH
53825: CALL_OW 181
// end ; continue ;
53829: GO 53473
// end ; if not cleaners or not tmp in cleaners then
53831: LD_VAR 0 6
53835: NOT
53836: IFTRUE 53851
53838: PUSH
53839: LD_VAR 0 13
53843: PUSH
53844: LD_VAR 0 6
53848: IN
53849: NOT
53850: OR
53851: IFFALSE 54160
// begin if dep then
53853: LD_VAR 0 17
53857: IFFALSE 53993
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53859: LD_ADDR_VAR 0 16
53863: PUSH
53864: LD_VAR 0 17
53868: PUSH
53869: LD_INT 1
53871: ARRAY
53872: PPUSH
53873: CALL_OW 250
53877: PPUSH
53878: LD_VAR 0 17
53882: PUSH
53883: LD_INT 1
53885: ARRAY
53886: PPUSH
53887: CALL_OW 254
53891: PPUSH
53892: LD_INT 5
53894: PPUSH
53895: CALL_OW 272
53899: PUSH
53900: LD_VAR 0 17
53904: PUSH
53905: LD_INT 1
53907: ARRAY
53908: PPUSH
53909: CALL_OW 251
53913: PPUSH
53914: LD_VAR 0 17
53918: PUSH
53919: LD_INT 1
53921: ARRAY
53922: PPUSH
53923: CALL_OW 254
53927: PPUSH
53928: LD_INT 5
53930: PPUSH
53931: CALL_OW 273
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53940: LD_VAR 0 16
53944: PUSH
53945: LD_INT 1
53947: ARRAY
53948: PPUSH
53949: LD_VAR 0 16
53953: PUSH
53954: LD_INT 2
53956: ARRAY
53957: PPUSH
53958: CALL_OW 488
53962: IFFALSE 53993
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53964: LD_VAR 0 13
53968: PPUSH
53969: LD_VAR 0 16
53973: PUSH
53974: LD_INT 1
53976: ARRAY
53977: PPUSH
53978: LD_VAR 0 16
53982: PUSH
53983: LD_INT 2
53985: ARRAY
53986: PPUSH
53987: CALL_OW 111
// continue ;
53991: GO 53473
// end ; end ; r := GetDir ( tmp ) ;
53993: LD_ADDR_VAR 0 15
53997: PUSH
53998: LD_VAR 0 13
54002: PPUSH
54003: CALL_OW 254
54007: ST_TO_ADDR
// if r = 5 then
54008: LD_VAR 0 15
54012: PUSH
54013: LD_INT 5
54015: EQUAL
54016: IFFALSE 54026
// r := 0 ;
54018: LD_ADDR_VAR 0 15
54022: PUSH
54023: LD_INT 0
54025: ST_TO_ADDR
// for j = r to 5 do
54026: LD_ADDR_VAR 0 10
54030: PUSH
54031: DOUBLE
54032: LD_VAR 0 15
54036: DEC
54037: ST_TO_ADDR
54038: LD_INT 5
54040: PUSH
54041: FOR_TO
54042: IFFALSE 54158
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54044: LD_ADDR_VAR 0 11
54048: PUSH
54049: LD_VAR 0 13
54053: PPUSH
54054: CALL_OW 250
54058: PPUSH
54059: LD_VAR 0 10
54063: PPUSH
54064: LD_INT 2
54066: PPUSH
54067: CALL_OW 272
54071: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54072: LD_ADDR_VAR 0 12
54076: PUSH
54077: LD_VAR 0 13
54081: PPUSH
54082: CALL_OW 251
54086: PPUSH
54087: LD_VAR 0 10
54091: PPUSH
54092: LD_INT 2
54094: PPUSH
54095: CALL_OW 273
54099: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54100: LD_VAR 0 11
54104: PPUSH
54105: LD_VAR 0 12
54109: PPUSH
54110: CALL_OW 488
54114: IFFALSE 54133
54116: PUSH
54117: LD_VAR 0 11
54121: PPUSH
54122: LD_VAR 0 12
54126: PPUSH
54127: CALL_OW 428
54131: NOT
54132: AND
54133: IFFALSE 54156
// begin ComMoveXY ( tmp , _x , _y ) ;
54135: LD_VAR 0 13
54139: PPUSH
54140: LD_VAR 0 11
54144: PPUSH
54145: LD_VAR 0 12
54149: PPUSH
54150: CALL_OW 111
// break ;
54154: GO 54158
// end ; end ;
54156: GO 54041
54158: POP
54159: POP
// end ; end ;
54160: GO 53473
54162: POP
54163: POP
// end ;
54164: LD_VAR 0 8
54168: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54169: LD_INT 0
54171: PPUSH
// result := true ;
54172: LD_ADDR_VAR 0 3
54176: PUSH
54177: LD_INT 1
54179: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54180: LD_VAR 0 2
54184: PUSH
54185: LD_INT 24
54187: DOUBLE
54188: EQUAL
54189: IFTRUE 54199
54191: LD_INT 33
54193: DOUBLE
54194: EQUAL
54195: IFTRUE 54199
54197: GO 54224
54199: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54200: LD_ADDR_VAR 0 3
54204: PUSH
54205: LD_INT 32
54207: PPUSH
54208: LD_VAR 0 1
54212: PPUSH
54213: CALL_OW 321
54217: PUSH
54218: LD_INT 2
54220: EQUAL
54221: ST_TO_ADDR
54222: GO 54540
54224: LD_INT 20
54226: DOUBLE
54227: EQUAL
54228: IFTRUE 54232
54230: GO 54257
54232: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54233: LD_ADDR_VAR 0 3
54237: PUSH
54238: LD_INT 6
54240: PPUSH
54241: LD_VAR 0 1
54245: PPUSH
54246: CALL_OW 321
54250: PUSH
54251: LD_INT 2
54253: EQUAL
54254: ST_TO_ADDR
54255: GO 54540
54257: LD_INT 22
54259: DOUBLE
54260: EQUAL
54261: IFTRUE 54271
54263: LD_INT 36
54265: DOUBLE
54266: EQUAL
54267: IFTRUE 54271
54269: GO 54296
54271: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54272: LD_ADDR_VAR 0 3
54276: PUSH
54277: LD_INT 15
54279: PPUSH
54280: LD_VAR 0 1
54284: PPUSH
54285: CALL_OW 321
54289: PUSH
54290: LD_INT 2
54292: EQUAL
54293: ST_TO_ADDR
54294: GO 54540
54296: LD_INT 30
54298: DOUBLE
54299: EQUAL
54300: IFTRUE 54304
54302: GO 54329
54304: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54305: LD_ADDR_VAR 0 3
54309: PUSH
54310: LD_INT 20
54312: PPUSH
54313: LD_VAR 0 1
54317: PPUSH
54318: CALL_OW 321
54322: PUSH
54323: LD_INT 2
54325: EQUAL
54326: ST_TO_ADDR
54327: GO 54540
54329: LD_INT 28
54331: DOUBLE
54332: EQUAL
54333: IFTRUE 54343
54335: LD_INT 21
54337: DOUBLE
54338: EQUAL
54339: IFTRUE 54343
54341: GO 54368
54343: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54344: LD_ADDR_VAR 0 3
54348: PUSH
54349: LD_INT 21
54351: PPUSH
54352: LD_VAR 0 1
54356: PPUSH
54357: CALL_OW 321
54361: PUSH
54362: LD_INT 2
54364: EQUAL
54365: ST_TO_ADDR
54366: GO 54540
54368: LD_INT 16
54370: DOUBLE
54371: EQUAL
54372: IFTRUE 54376
54374: GO 54401
54376: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54377: LD_ADDR_VAR 0 3
54381: PUSH
54382: LD_INT 84
54384: PPUSH
54385: LD_VAR 0 1
54389: PPUSH
54390: CALL_OW 321
54394: PUSH
54395: LD_INT 2
54397: EQUAL
54398: ST_TO_ADDR
54399: GO 54540
54401: LD_INT 19
54403: DOUBLE
54404: EQUAL
54405: IFTRUE 54415
54407: LD_INT 23
54409: DOUBLE
54410: EQUAL
54411: IFTRUE 54415
54413: GO 54440
54415: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54416: LD_ADDR_VAR 0 3
54420: PUSH
54421: LD_INT 83
54423: PPUSH
54424: LD_VAR 0 1
54428: PPUSH
54429: CALL_OW 321
54433: PUSH
54434: LD_INT 2
54436: EQUAL
54437: ST_TO_ADDR
54438: GO 54540
54440: LD_INT 17
54442: DOUBLE
54443: EQUAL
54444: IFTRUE 54448
54446: GO 54473
54448: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54449: LD_ADDR_VAR 0 3
54453: PUSH
54454: LD_INT 39
54456: PPUSH
54457: LD_VAR 0 1
54461: PPUSH
54462: CALL_OW 321
54466: PUSH
54467: LD_INT 2
54469: EQUAL
54470: ST_TO_ADDR
54471: GO 54540
54473: LD_INT 18
54475: DOUBLE
54476: EQUAL
54477: IFTRUE 54481
54479: GO 54506
54481: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54482: LD_ADDR_VAR 0 3
54486: PUSH
54487: LD_INT 40
54489: PPUSH
54490: LD_VAR 0 1
54494: PPUSH
54495: CALL_OW 321
54499: PUSH
54500: LD_INT 2
54502: EQUAL
54503: ST_TO_ADDR
54504: GO 54540
54506: LD_INT 27
54508: DOUBLE
54509: EQUAL
54510: IFTRUE 54514
54512: GO 54539
54514: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54515: LD_ADDR_VAR 0 3
54519: PUSH
54520: LD_INT 35
54522: PPUSH
54523: LD_VAR 0 1
54527: PPUSH
54528: CALL_OW 321
54532: PUSH
54533: LD_INT 2
54535: EQUAL
54536: ST_TO_ADDR
54537: GO 54540
54539: POP
// end ;
54540: LD_VAR 0 3
54544: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54545: LD_INT 0
54547: PPUSH
54548: PPUSH
54549: PPUSH
54550: PPUSH
54551: PPUSH
54552: PPUSH
54553: PPUSH
54554: PPUSH
54555: PPUSH
54556: PPUSH
54557: PPUSH
// result := false ;
54558: LD_ADDR_VAR 0 6
54562: PUSH
54563: LD_INT 0
54565: ST_TO_ADDR
// if btype = b_depot then
54566: LD_VAR 0 2
54570: PUSH
54571: LD_INT 0
54573: EQUAL
54574: IFFALSE 54586
// begin result := true ;
54576: LD_ADDR_VAR 0 6
54580: PUSH
54581: LD_INT 1
54583: ST_TO_ADDR
// exit ;
54584: GO 55440
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54586: LD_VAR 0 1
54590: NOT
54591: IFTRUE 54616
54593: PUSH
54594: LD_VAR 0 1
54598: PPUSH
54599: CALL_OW 266
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: LD_INT 1
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: IN
54614: NOT
54615: OR
54616: IFTRUE 54625
54618: PUSH
54619: LD_VAR 0 2
54623: NOT
54624: OR
54625: IFTRUE 54661
54627: PUSH
54628: LD_VAR 0 5
54632: PUSH
54633: LD_INT 0
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: LD_INT 2
54641: PUSH
54642: LD_INT 3
54644: PUSH
54645: LD_INT 4
54647: PUSH
54648: LD_INT 5
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: IN
54659: NOT
54660: OR
54661: IFTRUE 54680
54663: PUSH
54664: LD_VAR 0 3
54668: PPUSH
54669: LD_VAR 0 4
54673: PPUSH
54674: CALL_OW 488
54678: NOT
54679: OR
54680: IFFALSE 54684
// exit ;
54682: GO 55440
// side := GetSide ( depot ) ;
54684: LD_ADDR_VAR 0 9
54688: PUSH
54689: LD_VAR 0 1
54693: PPUSH
54694: CALL_OW 255
54698: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54699: LD_VAR 0 9
54703: PPUSH
54704: LD_VAR 0 2
54708: PPUSH
54709: CALL 54169 0 2
54713: NOT
54714: IFFALSE 54718
// exit ;
54716: GO 55440
// pom := GetBase ( depot ) ;
54718: LD_ADDR_VAR 0 10
54722: PUSH
54723: LD_VAR 0 1
54727: PPUSH
54728: CALL_OW 274
54732: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54733: LD_ADDR_VAR 0 11
54737: PUSH
54738: LD_VAR 0 2
54742: PPUSH
54743: LD_VAR 0 1
54747: PPUSH
54748: CALL_OW 248
54752: PPUSH
54753: CALL_OW 450
54757: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54758: LD_VAR 0 10
54762: PPUSH
54763: LD_INT 1
54765: PPUSH
54766: CALL_OW 275
54770: PUSH
54771: LD_VAR 0 11
54775: PUSH
54776: LD_INT 1
54778: ARRAY
54779: GREATEREQUAL
54780: IFFALSE 54806
54782: PUSH
54783: LD_VAR 0 10
54787: PPUSH
54788: LD_INT 2
54790: PPUSH
54791: CALL_OW 275
54795: PUSH
54796: LD_VAR 0 11
54800: PUSH
54801: LD_INT 2
54803: ARRAY
54804: GREATEREQUAL
54805: AND
54806: IFFALSE 54832
54808: PUSH
54809: LD_VAR 0 10
54813: PPUSH
54814: LD_INT 3
54816: PPUSH
54817: CALL_OW 275
54821: PUSH
54822: LD_VAR 0 11
54826: PUSH
54827: LD_INT 3
54829: ARRAY
54830: GREATEREQUAL
54831: AND
54832: NOT
54833: IFFALSE 54837
// exit ;
54835: GO 55440
// if GetBType ( depot ) = b_depot then
54837: LD_VAR 0 1
54841: PPUSH
54842: CALL_OW 266
54846: PUSH
54847: LD_INT 0
54849: EQUAL
54850: IFFALSE 54862
// dist := 28 else
54852: LD_ADDR_VAR 0 14
54856: PUSH
54857: LD_INT 28
54859: ST_TO_ADDR
54860: GO 54870
// dist := 36 ;
54862: LD_ADDR_VAR 0 14
54866: PUSH
54867: LD_INT 36
54869: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54870: LD_VAR 0 1
54874: PPUSH
54875: LD_VAR 0 3
54879: PPUSH
54880: LD_VAR 0 4
54884: PPUSH
54885: CALL_OW 297
54889: PUSH
54890: LD_VAR 0 14
54894: GREATER
54895: IFFALSE 54899
// exit ;
54897: GO 55440
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54899: LD_ADDR_VAR 0 12
54903: PUSH
54904: LD_VAR 0 2
54908: PPUSH
54909: LD_VAR 0 3
54913: PPUSH
54914: LD_VAR 0 4
54918: PPUSH
54919: LD_VAR 0 5
54923: PPUSH
54924: LD_VAR 0 1
54928: PPUSH
54929: CALL_OW 248
54933: PPUSH
54934: LD_INT 0
54936: PPUSH
54937: CALL 55445 0 6
54941: ST_TO_ADDR
// if not hexes then
54942: LD_VAR 0 12
54946: NOT
54947: IFFALSE 54951
// exit ;
54949: GO 55440
// hex := GetHexInfo ( x , y ) ;
54951: LD_ADDR_VAR 0 15
54955: PUSH
54956: LD_VAR 0 3
54960: PPUSH
54961: LD_VAR 0 4
54965: PPUSH
54966: CALL_OW 546
54970: ST_TO_ADDR
// if hex [ 1 ] then
54971: LD_VAR 0 15
54975: PUSH
54976: LD_INT 1
54978: ARRAY
54979: IFFALSE 54983
// exit ;
54981: GO 55440
// height := hex [ 2 ] ;
54983: LD_ADDR_VAR 0 13
54987: PUSH
54988: LD_VAR 0 15
54992: PUSH
54993: LD_INT 2
54995: ARRAY
54996: ST_TO_ADDR
// for i = 1 to hexes do
54997: LD_ADDR_VAR 0 7
55001: PUSH
55002: DOUBLE
55003: LD_INT 1
55005: DEC
55006: ST_TO_ADDR
55007: LD_VAR 0 12
55011: PUSH
55012: FOR_TO
55013: IFFALSE 55357
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
55015: LD_VAR 0 12
55019: PUSH
55020: LD_VAR 0 7
55024: ARRAY
55025: PUSH
55026: LD_INT 1
55028: ARRAY
55029: PPUSH
55030: LD_VAR 0 12
55034: PUSH
55035: LD_VAR 0 7
55039: ARRAY
55040: PUSH
55041: LD_INT 2
55043: ARRAY
55044: PPUSH
55045: CALL_OW 488
55049: NOT
55050: IFTRUE 55092
55052: PUSH
55053: LD_VAR 0 12
55057: PUSH
55058: LD_VAR 0 7
55062: ARRAY
55063: PUSH
55064: LD_INT 1
55066: ARRAY
55067: PPUSH
55068: LD_VAR 0 12
55072: PUSH
55073: LD_VAR 0 7
55077: ARRAY
55078: PUSH
55079: LD_INT 2
55081: ARRAY
55082: PPUSH
55083: CALL_OW 428
55087: PUSH
55088: LD_INT 0
55090: GREATER
55091: OR
55092: IFTRUE 55130
55094: PUSH
55095: LD_VAR 0 12
55099: PUSH
55100: LD_VAR 0 7
55104: ARRAY
55105: PUSH
55106: LD_INT 1
55108: ARRAY
55109: PPUSH
55110: LD_VAR 0 12
55114: PUSH
55115: LD_VAR 0 7
55119: ARRAY
55120: PUSH
55121: LD_INT 2
55123: ARRAY
55124: PPUSH
55125: CALL_OW 351
55129: OR
55130: IFFALSE 55136
// exit ;
55132: POP
55133: POP
55134: GO 55440
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55136: LD_ADDR_VAR 0 8
55140: PUSH
55141: LD_VAR 0 12
55145: PUSH
55146: LD_VAR 0 7
55150: ARRAY
55151: PUSH
55152: LD_INT 1
55154: ARRAY
55155: PPUSH
55156: LD_VAR 0 12
55160: PUSH
55161: LD_VAR 0 7
55165: ARRAY
55166: PUSH
55167: LD_INT 2
55169: ARRAY
55170: PPUSH
55171: CALL_OW 546
55175: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55176: LD_VAR 0 8
55180: PUSH
55181: LD_INT 1
55183: ARRAY
55184: IFTRUE 55206
55186: PUSH
55187: LD_VAR 0 8
55191: PUSH
55192: LD_INT 2
55194: ARRAY
55195: PUSH
55196: LD_VAR 0 13
55200: PUSH
55201: LD_INT 2
55203: PLUS
55204: GREATER
55205: OR
55206: IFTRUE 55228
55208: PUSH
55209: LD_VAR 0 8
55213: PUSH
55214: LD_INT 2
55216: ARRAY
55217: PUSH
55218: LD_VAR 0 13
55222: PUSH
55223: LD_INT 2
55225: MINUS
55226: LESS
55227: OR
55228: IFTRUE 55296
55230: PUSH
55231: LD_VAR 0 8
55235: PUSH
55236: LD_INT 3
55238: ARRAY
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: LD_INT 8
55245: PUSH
55246: LD_INT 9
55248: PUSH
55249: LD_INT 10
55251: PUSH
55252: LD_INT 11
55254: PUSH
55255: LD_INT 12
55257: PUSH
55258: LD_INT 13
55260: PUSH
55261: LD_INT 16
55263: PUSH
55264: LD_INT 17
55266: PUSH
55267: LD_INT 18
55269: PUSH
55270: LD_INT 19
55272: PUSH
55273: LD_INT 20
55275: PUSH
55276: LD_INT 21
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: IN
55294: NOT
55295: OR
55296: IFTRUE 55309
55298: PUSH
55299: LD_VAR 0 8
55303: PUSH
55304: LD_INT 5
55306: ARRAY
55307: NOT
55308: OR
55309: IFTRUE 55349
55311: PUSH
55312: LD_VAR 0 8
55316: PUSH
55317: LD_INT 6
55319: ARRAY
55320: PUSH
55321: LD_INT 1
55323: PUSH
55324: LD_INT 2
55326: PUSH
55327: LD_INT 7
55329: PUSH
55330: LD_INT 9
55332: PUSH
55333: LD_INT 10
55335: PUSH
55336: LD_INT 11
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: IN
55347: NOT
55348: OR
55349: IFFALSE 55355
// exit ;
55351: POP
55352: POP
55353: GO 55440
// end ;
55355: GO 55012
55357: POP
55358: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55359: LD_VAR 0 9
55363: PPUSH
55364: LD_VAR 0 3
55368: PPUSH
55369: LD_VAR 0 4
55373: PPUSH
55374: LD_INT 20
55376: PPUSH
55377: CALL 47259 0 4
55381: PUSH
55382: LD_INT 4
55384: ARRAY
55385: IFFALSE 55389
// exit ;
55387: GO 55440
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55389: LD_VAR 0 2
55393: PUSH
55394: LD_INT 29
55396: PUSH
55397: LD_INT 30
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: IN
55404: IFFALSE 55428
55406: PUSH
55407: LD_VAR 0 3
55411: PPUSH
55412: LD_VAR 0 4
55416: PPUSH
55417: LD_VAR 0 9
55421: PPUSH
55422: CALL_OW 440
55426: NOT
55427: AND
55428: IFFALSE 55432
// exit ;
55430: GO 55440
// result := true ;
55432: LD_ADDR_VAR 0 6
55436: PUSH
55437: LD_INT 1
55439: ST_TO_ADDR
// end ;
55440: LD_VAR 0 6
55444: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55445: LD_INT 0
55447: PPUSH
55448: PPUSH
55449: PPUSH
55450: PPUSH
55451: PPUSH
55452: PPUSH
55453: PPUSH
55454: PPUSH
55455: PPUSH
55456: PPUSH
55457: PPUSH
55458: PPUSH
55459: PPUSH
55460: PPUSH
55461: PPUSH
55462: PPUSH
55463: PPUSH
55464: PPUSH
55465: PPUSH
55466: PPUSH
55467: PPUSH
55468: PPUSH
55469: PPUSH
55470: PPUSH
55471: PPUSH
55472: PPUSH
55473: PPUSH
55474: PPUSH
55475: PPUSH
55476: PPUSH
55477: PPUSH
55478: PPUSH
55479: PPUSH
55480: PPUSH
55481: PPUSH
55482: PPUSH
55483: PPUSH
55484: PPUSH
55485: PPUSH
55486: PPUSH
55487: PPUSH
55488: PPUSH
55489: PPUSH
55490: PPUSH
55491: PPUSH
55492: PPUSH
55493: PPUSH
55494: PPUSH
55495: PPUSH
55496: PPUSH
55497: PPUSH
55498: PPUSH
55499: PPUSH
55500: PPUSH
55501: PPUSH
55502: PPUSH
55503: PPUSH
55504: PPUSH
// result = [ ] ;
55505: LD_ADDR_VAR 0 7
55509: PUSH
55510: EMPTY
55511: ST_TO_ADDR
// temp_list = [ ] ;
55512: LD_ADDR_VAR 0 9
55516: PUSH
55517: EMPTY
55518: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55519: LD_VAR 0 4
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: LD_INT 2
55532: PUSH
55533: LD_INT 3
55535: PUSH
55536: LD_INT 4
55538: PUSH
55539: LD_INT 5
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: IN
55550: NOT
55551: IFTRUE 55594
55553: PUSH
55554: LD_VAR 0 1
55558: PUSH
55559: LD_INT 0
55561: PUSH
55562: LD_INT 1
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: IN
55569: IFFALSE 55593
55571: PUSH
55572: LD_VAR 0 5
55576: PUSH
55577: LD_INT 1
55579: PUSH
55580: LD_INT 2
55582: PUSH
55583: LD_INT 3
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: LIST
55590: IN
55591: NOT
55592: AND
55593: OR
55594: IFFALSE 55598
// exit ;
55596: GO 73997
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55598: LD_VAR 0 1
55602: PUSH
55603: LD_INT 6
55605: PUSH
55606: LD_INT 7
55608: PUSH
55609: LD_INT 8
55611: PUSH
55612: LD_INT 13
55614: PUSH
55615: LD_INT 12
55617: PUSH
55618: LD_INT 15
55620: PUSH
55621: LD_INT 11
55623: PUSH
55624: LD_INT 14
55626: PUSH
55627: LD_INT 10
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: IN
55641: IFFALSE 55651
// btype = b_lab ;
55643: LD_ADDR_VAR 0 1
55647: PUSH
55648: LD_INT 6
55650: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55651: LD_VAR 0 6
55655: PUSH
55656: LD_INT 0
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: LD_INT 2
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: LIST
55669: IN
55670: NOT
55671: IFTRUE 55739
55673: PUSH
55674: LD_VAR 0 1
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: LD_INT 1
55684: PUSH
55685: LD_INT 2
55687: PUSH
55688: LD_INT 3
55690: PUSH
55691: LD_INT 6
55693: PUSH
55694: LD_INT 36
55696: PUSH
55697: LD_INT 4
55699: PUSH
55700: LD_INT 5
55702: PUSH
55703: LD_INT 31
55705: PUSH
55706: LD_INT 32
55708: PUSH
55709: LD_INT 33
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: IN
55725: NOT
55726: IFFALSE 55738
55728: PUSH
55729: LD_VAR 0 6
55733: PUSH
55734: LD_INT 1
55736: EQUAL
55737: AND
55738: OR
55739: IFTRUE 55771
55741: PUSH
55742: LD_VAR 0 1
55746: PUSH
55747: LD_INT 2
55749: PUSH
55750: LD_INT 3
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: IN
55757: NOT
55758: IFFALSE 55770
55760: PUSH
55761: LD_VAR 0 6
55765: PUSH
55766: LD_INT 2
55768: EQUAL
55769: AND
55770: OR
55771: IFFALSE 55781
// mode = 0 ;
55773: LD_ADDR_VAR 0 6
55777: PUSH
55778: LD_INT 0
55780: ST_TO_ADDR
// case mode of 0 :
55781: LD_VAR 0 6
55785: PUSH
55786: LD_INT 0
55788: DOUBLE
55789: EQUAL
55790: IFTRUE 55794
55792: GO 67247
55794: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55795: LD_ADDR_VAR 0 11
55799: PUSH
55800: LD_INT 0
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: PUSH
55824: LD_INT 0
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 1
55833: PUSH
55834: LD_INT 1
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 0
55843: PUSH
55844: LD_INT 1
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 1
55853: NEG
55854: PUSH
55855: LD_INT 0
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 1
55864: NEG
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: LD_INT 2
55880: NEG
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: LD_INT 2
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: LD_INT 1
55902: NEG
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 1
55910: PUSH
55911: LD_INT 2
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 0
55920: PUSH
55921: LD_INT 2
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 1
55930: NEG
55931: PUSH
55932: LD_INT 1
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 1
55941: PUSH
55942: LD_INT 3
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: LD_INT 3
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 1
55961: NEG
55962: PUSH
55963: LD_INT 2
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55988: LD_ADDR_VAR 0 12
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: LD_INT 1
56008: NEG
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 1
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: PUSH
56027: LD_INT 1
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: LD_INT 1
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 1
56057: NEG
56058: PUSH
56059: LD_INT 1
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 1
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 2
56080: PUSH
56081: LD_INT 0
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 2
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 1
56100: NEG
56101: PUSH
56102: LD_INT 1
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 2
56111: NEG
56112: PUSH
56113: LD_INT 0
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 2
56122: NEG
56123: PUSH
56124: LD_INT 1
56126: NEG
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 2
56134: NEG
56135: PUSH
56136: LD_INT 1
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 3
56145: NEG
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 3
56156: NEG
56157: PUSH
56158: LD_INT 1
56160: NEG
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56184: LD_ADDR_VAR 0 13
56188: PUSH
56189: LD_INT 0
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 0
56201: PUSH
56202: LD_INT 1
56204: NEG
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: LD_INT 0
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 1
56222: PUSH
56223: LD_INT 1
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 0
56232: PUSH
56233: LD_INT 1
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 1
56242: NEG
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 1
56253: NEG
56254: PUSH
56255: LD_INT 1
56257: NEG
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 1
56265: NEG
56266: PUSH
56267: LD_INT 2
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 2
56277: PUSH
56278: LD_INT 1
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 2
56287: PUSH
56288: LD_INT 2
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 1
56297: PUSH
56298: LD_INT 2
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 2
56307: NEG
56308: PUSH
56309: LD_INT 1
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 2
56319: NEG
56320: PUSH
56321: LD_INT 2
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 2
56331: NEG
56332: PUSH
56333: LD_INT 3
56335: NEG
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 3
56343: NEG
56344: PUSH
56345: LD_INT 2
56347: NEG
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 3
56355: NEG
56356: PUSH
56357: LD_INT 3
56359: NEG
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56383: LD_ADDR_VAR 0 14
56387: PUSH
56388: LD_INT 0
56390: PUSH
56391: LD_INT 0
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 0
56400: PUSH
56401: LD_INT 1
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 1
56411: PUSH
56412: LD_INT 0
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 1
56421: PUSH
56422: LD_INT 1
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 0
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 1
56441: NEG
56442: PUSH
56443: LD_INT 0
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 1
56452: NEG
56453: PUSH
56454: LD_INT 1
56456: NEG
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 1
56464: NEG
56465: PUSH
56466: LD_INT 2
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 0
56476: PUSH
56477: LD_INT 2
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 1
56487: PUSH
56488: LD_INT 1
56490: NEG
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 1
56498: PUSH
56499: LD_INT 2
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 0
56508: PUSH
56509: LD_INT 2
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 1
56518: NEG
56519: PUSH
56520: LD_INT 1
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 1
56529: NEG
56530: PUSH
56531: LD_INT 3
56533: NEG
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: LD_INT 3
56544: NEG
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 1
56552: PUSH
56553: LD_INT 2
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56579: LD_ADDR_VAR 0 15
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: LD_INT 1
56599: NEG
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 1
56607: PUSH
56608: LD_INT 0
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 1
56617: PUSH
56618: LD_INT 1
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 0
56627: PUSH
56628: LD_INT 1
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 1
56637: NEG
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 1
56648: NEG
56649: PUSH
56650: LD_INT 1
56652: NEG
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 1
56660: PUSH
56661: LD_INT 1
56663: NEG
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 2
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 2
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 1
56691: NEG
56692: PUSH
56693: LD_INT 1
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 2
56702: NEG
56703: PUSH
56704: LD_INT 0
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 2
56713: NEG
56714: PUSH
56715: LD_INT 1
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 2
56725: PUSH
56726: LD_INT 1
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 3
56736: PUSH
56737: LD_INT 0
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 3
56746: PUSH
56747: LD_INT 1
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56772: LD_ADDR_VAR 0 16
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 0
56789: PUSH
56790: LD_INT 1
56792: NEG
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 1
56800: PUSH
56801: LD_INT 0
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 1
56810: PUSH
56811: LD_INT 1
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: LD_INT 1
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: LD_INT 0
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: LD_INT 1
56845: NEG
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: NEG
56854: PUSH
56855: LD_INT 2
56857: NEG
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 2
56865: PUSH
56866: LD_INT 1
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 2
56875: PUSH
56876: LD_INT 2
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 1
56885: PUSH
56886: LD_INT 2
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 2
56895: NEG
56896: PUSH
56897: LD_INT 1
56899: NEG
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 2
56907: NEG
56908: PUSH
56909: LD_INT 2
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 3
56919: PUSH
56920: LD_INT 2
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 3
56929: PUSH
56930: LD_INT 3
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 2
56939: PUSH
56940: LD_INT 3
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56965: LD_ADDR_VAR 0 17
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 0
56982: PUSH
56983: LD_INT 1
56985: NEG
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 1
56993: PUSH
56994: LD_INT 0
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 1
57003: PUSH
57004: LD_INT 1
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 0
57013: PUSH
57014: LD_INT 1
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 1
57023: NEG
57024: PUSH
57025: LD_INT 0
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 1
57034: NEG
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 1
57046: NEG
57047: PUSH
57048: LD_INT 2
57050: NEG
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 0
57058: PUSH
57059: LD_INT 2
57061: NEG
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 1
57069: PUSH
57070: LD_INT 1
57072: NEG
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 2
57080: PUSH
57081: LD_INT 0
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 2
57090: PUSH
57091: LD_INT 1
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 2
57100: PUSH
57101: LD_INT 2
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 1
57110: PUSH
57111: LD_INT 2
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 0
57120: PUSH
57121: LD_INT 2
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 1
57130: NEG
57131: PUSH
57132: LD_INT 1
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 2
57141: NEG
57142: PUSH
57143: LD_INT 0
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 2
57152: NEG
57153: PUSH
57154: LD_INT 1
57156: NEG
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 2
57164: NEG
57165: PUSH
57166: LD_INT 2
57168: NEG
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57195: LD_ADDR_VAR 0 18
57199: PUSH
57200: LD_INT 0
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 0
57212: PUSH
57213: LD_INT 1
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 1
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 1
57233: PUSH
57234: LD_INT 1
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 0
57243: PUSH
57244: LD_INT 1
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 1
57253: NEG
57254: PUSH
57255: LD_INT 0
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 1
57264: NEG
57265: PUSH
57266: LD_INT 1
57268: NEG
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: LD_INT 2
57280: NEG
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 0
57288: PUSH
57289: LD_INT 2
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 1
57299: PUSH
57300: LD_INT 1
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 2
57310: PUSH
57311: LD_INT 0
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 2
57320: PUSH
57321: LD_INT 1
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 2
57330: PUSH
57331: LD_INT 2
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 1
57340: PUSH
57341: LD_INT 2
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 0
57350: PUSH
57351: LD_INT 2
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 1
57360: NEG
57361: PUSH
57362: LD_INT 1
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 2
57371: NEG
57372: PUSH
57373: LD_INT 0
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 2
57382: NEG
57383: PUSH
57384: LD_INT 1
57386: NEG
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 2
57394: NEG
57395: PUSH
57396: LD_INT 2
57398: NEG
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57425: LD_ADDR_VAR 0 19
57429: PUSH
57430: LD_INT 0
57432: PUSH
57433: LD_INT 0
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 0
57442: PUSH
57443: LD_INT 1
57445: NEG
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 1
57453: PUSH
57454: LD_INT 0
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 1
57463: PUSH
57464: LD_INT 1
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 0
57473: PUSH
57474: LD_INT 1
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 1
57483: NEG
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 1
57494: NEG
57495: PUSH
57496: LD_INT 1
57498: NEG
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 1
57506: NEG
57507: PUSH
57508: LD_INT 2
57510: NEG
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 0
57518: PUSH
57519: LD_INT 2
57521: NEG
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 1
57529: PUSH
57530: LD_INT 1
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 2
57540: PUSH
57541: LD_INT 0
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 2
57550: PUSH
57551: LD_INT 1
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 2
57560: PUSH
57561: LD_INT 2
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 1
57570: PUSH
57571: LD_INT 2
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 0
57580: PUSH
57581: LD_INT 2
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 1
57590: NEG
57591: PUSH
57592: LD_INT 1
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 2
57601: NEG
57602: PUSH
57603: LD_INT 0
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 2
57612: NEG
57613: PUSH
57614: LD_INT 1
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 2
57624: NEG
57625: PUSH
57626: LD_INT 2
57628: NEG
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57655: LD_ADDR_VAR 0 20
57659: PUSH
57660: LD_INT 0
57662: PUSH
57663: LD_INT 0
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 0
57672: PUSH
57673: LD_INT 1
57675: NEG
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 1
57683: PUSH
57684: LD_INT 0
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 1
57693: PUSH
57694: LD_INT 1
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 0
57703: PUSH
57704: LD_INT 1
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: LD_INT 0
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 1
57724: NEG
57725: PUSH
57726: LD_INT 1
57728: NEG
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 1
57736: NEG
57737: PUSH
57738: LD_INT 2
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 0
57748: PUSH
57749: LD_INT 2
57751: NEG
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 1
57759: PUSH
57760: LD_INT 1
57762: NEG
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 2
57770: PUSH
57771: LD_INT 0
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 2
57780: PUSH
57781: LD_INT 1
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 2
57790: PUSH
57791: LD_INT 2
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 1
57800: PUSH
57801: LD_INT 2
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: LD_INT 2
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 1
57820: NEG
57821: PUSH
57822: LD_INT 1
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 2
57831: NEG
57832: PUSH
57833: LD_INT 0
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 2
57842: NEG
57843: PUSH
57844: LD_INT 1
57846: NEG
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 2
57854: NEG
57855: PUSH
57856: LD_INT 2
57858: NEG
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57885: LD_ADDR_VAR 0 21
57889: PUSH
57890: LD_INT 0
57892: PUSH
57893: LD_INT 0
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 0
57902: PUSH
57903: LD_INT 1
57905: NEG
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 1
57913: PUSH
57914: LD_INT 0
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 1
57923: PUSH
57924: LD_INT 1
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: LD_INT 1
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 1
57943: NEG
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 1
57954: NEG
57955: PUSH
57956: LD_INT 1
57958: NEG
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 1
57966: NEG
57967: PUSH
57968: LD_INT 2
57970: NEG
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 0
57978: PUSH
57979: LD_INT 2
57981: NEG
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 1
57989: PUSH
57990: LD_INT 1
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 2
58000: PUSH
58001: LD_INT 0
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 2
58010: PUSH
58011: LD_INT 1
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 2
58020: PUSH
58021: LD_INT 2
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 1
58030: PUSH
58031: LD_INT 2
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 0
58040: PUSH
58041: LD_INT 2
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 1
58050: NEG
58051: PUSH
58052: LD_INT 1
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 2
58061: NEG
58062: PUSH
58063: LD_INT 0
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 2
58072: NEG
58073: PUSH
58074: LD_INT 1
58076: NEG
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 2
58084: NEG
58085: PUSH
58086: LD_INT 2
58088: NEG
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58115: LD_ADDR_VAR 0 22
58119: PUSH
58120: LD_INT 0
58122: PUSH
58123: LD_INT 0
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 0
58132: PUSH
58133: LD_INT 1
58135: NEG
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 1
58143: PUSH
58144: LD_INT 0
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 1
58153: PUSH
58154: LD_INT 1
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 0
58163: PUSH
58164: LD_INT 1
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 1
58173: NEG
58174: PUSH
58175: LD_INT 0
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 1
58184: NEG
58185: PUSH
58186: LD_INT 1
58188: NEG
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 1
58196: NEG
58197: PUSH
58198: LD_INT 2
58200: NEG
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 0
58208: PUSH
58209: LD_INT 2
58211: NEG
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 1
58219: PUSH
58220: LD_INT 1
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 2
58230: PUSH
58231: LD_INT 0
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 2
58240: PUSH
58241: LD_INT 1
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 2
58250: PUSH
58251: LD_INT 2
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 1
58260: PUSH
58261: LD_INT 2
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 0
58270: PUSH
58271: LD_INT 2
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 1
58280: NEG
58281: PUSH
58282: LD_INT 1
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 2
58291: NEG
58292: PUSH
58293: LD_INT 0
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 2
58302: NEG
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 2
58314: NEG
58315: PUSH
58316: LD_INT 2
58318: NEG
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58345: LD_ADDR_VAR 0 23
58349: PUSH
58350: LD_INT 0
58352: PUSH
58353: LD_INT 0
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 0
58362: PUSH
58363: LD_INT 1
58365: NEG
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 1
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 1
58383: PUSH
58384: LD_INT 1
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 0
58393: PUSH
58394: LD_INT 1
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 1
58403: NEG
58404: PUSH
58405: LD_INT 0
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 1
58414: NEG
58415: PUSH
58416: LD_INT 1
58418: NEG
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 1
58426: NEG
58427: PUSH
58428: LD_INT 2
58430: NEG
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 0
58438: PUSH
58439: LD_INT 2
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 1
58449: PUSH
58450: LD_INT 1
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 2
58460: PUSH
58461: LD_INT 0
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 2
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 2
58480: PUSH
58481: LD_INT 2
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 1
58490: PUSH
58491: LD_INT 2
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 0
58500: PUSH
58501: LD_INT 2
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 1
58510: NEG
58511: PUSH
58512: LD_INT 1
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 2
58521: NEG
58522: PUSH
58523: LD_INT 0
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 2
58532: NEG
58533: PUSH
58534: LD_INT 1
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 2
58544: NEG
58545: PUSH
58546: LD_INT 2
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 2
58556: NEG
58557: PUSH
58558: LD_INT 3
58560: NEG
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 1
58568: NEG
58569: PUSH
58570: LD_INT 3
58572: NEG
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 1
58580: PUSH
58581: LD_INT 2
58583: NEG
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 2
58591: PUSH
58592: LD_INT 1
58594: NEG
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58625: LD_ADDR_VAR 0 24
58629: PUSH
58630: LD_INT 0
58632: PUSH
58633: LD_INT 0
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 0
58642: PUSH
58643: LD_INT 1
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 1
58653: PUSH
58654: LD_INT 0
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 1
58663: PUSH
58664: LD_INT 1
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 0
58673: PUSH
58674: LD_INT 1
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 1
58683: NEG
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: NEG
58695: PUSH
58696: LD_INT 1
58698: NEG
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 1
58706: NEG
58707: PUSH
58708: LD_INT 2
58710: NEG
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 0
58718: PUSH
58719: LD_INT 2
58721: NEG
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 1
58729: PUSH
58730: LD_INT 1
58732: NEG
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 2
58740: PUSH
58741: LD_INT 0
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 2
58750: PUSH
58751: LD_INT 1
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 2
58760: PUSH
58761: LD_INT 2
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 1
58770: PUSH
58771: LD_INT 2
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 0
58780: PUSH
58781: LD_INT 2
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 1
58790: NEG
58791: PUSH
58792: LD_INT 1
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 2
58801: NEG
58802: PUSH
58803: LD_INT 0
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 2
58812: NEG
58813: PUSH
58814: LD_INT 1
58816: NEG
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 2
58824: NEG
58825: PUSH
58826: LD_INT 2
58828: NEG
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 1
58836: PUSH
58837: LD_INT 2
58839: NEG
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 2
58847: PUSH
58848: LD_INT 1
58850: NEG
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 3
58858: PUSH
58859: LD_INT 1
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 3
58868: PUSH
58869: LD_INT 2
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58901: LD_ADDR_VAR 0 25
58905: PUSH
58906: LD_INT 0
58908: PUSH
58909: LD_INT 0
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 0
58918: PUSH
58919: LD_INT 1
58921: NEG
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 1
58929: PUSH
58930: LD_INT 0
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 1
58939: PUSH
58940: LD_INT 1
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 0
58949: PUSH
58950: LD_INT 1
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 1
58959: NEG
58960: PUSH
58961: LD_INT 0
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 1
58970: NEG
58971: PUSH
58972: LD_INT 1
58974: NEG
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 1
58982: NEG
58983: PUSH
58984: LD_INT 2
58986: NEG
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 0
58994: PUSH
58995: LD_INT 2
58997: NEG
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 1
59005: PUSH
59006: LD_INT 1
59008: NEG
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 2
59016: PUSH
59017: LD_INT 0
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 2
59026: PUSH
59027: LD_INT 1
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 2
59036: PUSH
59037: LD_INT 2
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 1
59046: PUSH
59047: LD_INT 2
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 0
59056: PUSH
59057: LD_INT 2
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 1
59066: NEG
59067: PUSH
59068: LD_INT 1
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 2
59077: NEG
59078: PUSH
59079: LD_INT 0
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 2
59088: NEG
59089: PUSH
59090: LD_INT 1
59092: NEG
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 2
59100: NEG
59101: PUSH
59102: LD_INT 2
59104: NEG
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 3
59112: PUSH
59113: LD_INT 1
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 3
59122: PUSH
59123: LD_INT 2
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 2
59132: PUSH
59133: LD_INT 3
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 1
59142: PUSH
59143: LD_INT 3
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59175: LD_ADDR_VAR 0 26
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: LD_INT 0
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 0
59192: PUSH
59193: LD_INT 1
59195: NEG
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 1
59203: PUSH
59204: LD_INT 0
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 1
59213: PUSH
59214: LD_INT 1
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: LD_INT 1
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 1
59233: NEG
59234: PUSH
59235: LD_INT 0
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 1
59244: NEG
59245: PUSH
59246: LD_INT 1
59248: NEG
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 1
59256: NEG
59257: PUSH
59258: LD_INT 2
59260: NEG
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 0
59268: PUSH
59269: LD_INT 2
59271: NEG
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 1
59279: PUSH
59280: LD_INT 1
59282: NEG
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 2
59290: PUSH
59291: LD_INT 0
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 2
59300: PUSH
59301: LD_INT 1
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 2
59310: PUSH
59311: LD_INT 2
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 1
59320: PUSH
59321: LD_INT 2
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 0
59330: PUSH
59331: LD_INT 2
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 1
59340: NEG
59341: PUSH
59342: LD_INT 1
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 2
59351: NEG
59352: PUSH
59353: LD_INT 0
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 2
59362: NEG
59363: PUSH
59364: LD_INT 1
59366: NEG
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 2
59374: NEG
59375: PUSH
59376: LD_INT 2
59378: NEG
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 2
59386: PUSH
59387: LD_INT 3
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 1
59396: PUSH
59397: LD_INT 3
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 1
59406: NEG
59407: PUSH
59408: LD_INT 2
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 2
59417: NEG
59418: PUSH
59419: LD_INT 1
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59451: LD_ADDR_VAR 0 27
59455: PUSH
59456: LD_INT 0
59458: PUSH
59459: LD_INT 0
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 0
59468: PUSH
59469: LD_INT 1
59471: NEG
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 1
59479: PUSH
59480: LD_INT 0
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 1
59489: PUSH
59490: LD_INT 1
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 0
59499: PUSH
59500: LD_INT 1
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 1
59509: NEG
59510: PUSH
59511: LD_INT 0
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 1
59520: NEG
59521: PUSH
59522: LD_INT 1
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 1
59532: NEG
59533: PUSH
59534: LD_INT 2
59536: NEG
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 0
59544: PUSH
59545: LD_INT 2
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 1
59555: PUSH
59556: LD_INT 1
59558: NEG
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 2
59566: PUSH
59567: LD_INT 0
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 2
59576: PUSH
59577: LD_INT 1
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 2
59586: PUSH
59587: LD_INT 2
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 1
59596: PUSH
59597: LD_INT 2
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 0
59606: PUSH
59607: LD_INT 2
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 1
59616: NEG
59617: PUSH
59618: LD_INT 1
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 2
59627: NEG
59628: PUSH
59629: LD_INT 0
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 2
59638: NEG
59639: PUSH
59640: LD_INT 1
59642: NEG
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 2
59650: NEG
59651: PUSH
59652: LD_INT 2
59654: NEG
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 1
59662: NEG
59663: PUSH
59664: LD_INT 2
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 2
59673: NEG
59674: PUSH
59675: LD_INT 1
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 3
59684: NEG
59685: PUSH
59686: LD_INT 1
59688: NEG
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 3
59696: NEG
59697: PUSH
59698: LD_INT 2
59700: NEG
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59731: LD_ADDR_VAR 0 28
59735: PUSH
59736: LD_INT 0
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 0
59748: PUSH
59749: LD_INT 1
59751: NEG
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 1
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 1
59769: PUSH
59770: LD_INT 1
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 0
59779: PUSH
59780: LD_INT 1
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 1
59789: NEG
59790: PUSH
59791: LD_INT 0
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 1
59800: NEG
59801: PUSH
59802: LD_INT 1
59804: NEG
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 1
59812: NEG
59813: PUSH
59814: LD_INT 2
59816: NEG
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 0
59824: PUSH
59825: LD_INT 2
59827: NEG
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 1
59835: PUSH
59836: LD_INT 1
59838: NEG
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 2
59846: PUSH
59847: LD_INT 0
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 2
59856: PUSH
59857: LD_INT 1
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 2
59866: PUSH
59867: LD_INT 2
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 1
59876: PUSH
59877: LD_INT 2
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: LD_INT 2
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 1
59896: NEG
59897: PUSH
59898: LD_INT 1
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 2
59907: NEG
59908: PUSH
59909: LD_INT 0
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 2
59918: NEG
59919: PUSH
59920: LD_INT 1
59922: NEG
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 2
59930: NEG
59931: PUSH
59932: LD_INT 2
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 2
59942: NEG
59943: PUSH
59944: LD_INT 3
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 1
59954: NEG
59955: PUSH
59956: LD_INT 3
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 3
59966: NEG
59967: PUSH
59968: LD_INT 1
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 3
59978: NEG
59979: PUSH
59980: LD_INT 2
59982: NEG
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60013: LD_ADDR_VAR 0 29
60017: PUSH
60018: LD_INT 0
60020: PUSH
60021: LD_INT 0
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 0
60030: PUSH
60031: LD_INT 1
60033: NEG
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 1
60041: PUSH
60042: LD_INT 0
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 1
60051: PUSH
60052: LD_INT 1
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 0
60061: PUSH
60062: LD_INT 1
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 1
60071: NEG
60072: PUSH
60073: LD_INT 0
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 1
60082: NEG
60083: PUSH
60084: LD_INT 1
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 1
60094: NEG
60095: PUSH
60096: LD_INT 2
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 0
60106: PUSH
60107: LD_INT 2
60109: NEG
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 1
60117: PUSH
60118: LD_INT 1
60120: NEG
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 2
60128: PUSH
60129: LD_INT 0
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 2
60138: PUSH
60139: LD_INT 1
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 1
60148: PUSH
60149: LD_INT 2
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 0
60158: PUSH
60159: LD_INT 2
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 1
60168: NEG
60169: PUSH
60170: LD_INT 1
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 2
60179: NEG
60180: PUSH
60181: LD_INT 1
60183: NEG
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 2
60191: NEG
60192: PUSH
60193: LD_INT 2
60195: NEG
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 2
60203: NEG
60204: PUSH
60205: LD_INT 3
60207: NEG
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 2
60215: PUSH
60216: LD_INT 1
60218: NEG
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 3
60226: PUSH
60227: LD_INT 1
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 1
60236: PUSH
60237: LD_INT 3
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 1
60246: NEG
60247: PUSH
60248: LD_INT 2
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 3
60257: NEG
60258: PUSH
60259: LD_INT 2
60261: NEG
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60292: LD_ADDR_VAR 0 30
60296: PUSH
60297: LD_INT 0
60299: PUSH
60300: LD_INT 0
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 0
60309: PUSH
60310: LD_INT 1
60312: NEG
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 1
60320: PUSH
60321: LD_INT 0
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 1
60330: PUSH
60331: LD_INT 1
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 0
60340: PUSH
60341: LD_INT 1
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 1
60350: NEG
60351: PUSH
60352: LD_INT 0
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 1
60361: NEG
60362: PUSH
60363: LD_INT 1
60365: NEG
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 1
60373: NEG
60374: PUSH
60375: LD_INT 2
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 0
60385: PUSH
60386: LD_INT 2
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 1
60396: PUSH
60397: LD_INT 1
60399: NEG
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 2
60407: PUSH
60408: LD_INT 0
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 2
60417: PUSH
60418: LD_INT 1
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 2
60427: PUSH
60428: LD_INT 2
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 1
60437: PUSH
60438: LD_INT 2
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 1
60447: NEG
60448: PUSH
60449: LD_INT 1
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 2
60458: NEG
60459: PUSH
60460: LD_INT 0
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 2
60469: NEG
60470: PUSH
60471: LD_INT 1
60473: NEG
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 1
60481: NEG
60482: PUSH
60483: LD_INT 3
60485: NEG
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 1
60493: PUSH
60494: LD_INT 2
60496: NEG
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 3
60504: PUSH
60505: LD_INT 2
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 2
60514: PUSH
60515: LD_INT 3
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 2
60524: NEG
60525: PUSH
60526: LD_INT 1
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 3
60535: NEG
60536: PUSH
60537: LD_INT 1
60539: NEG
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60570: LD_ADDR_VAR 0 31
60574: PUSH
60575: LD_INT 0
60577: PUSH
60578: LD_INT 0
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 0
60587: PUSH
60588: LD_INT 1
60590: NEG
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 1
60598: PUSH
60599: LD_INT 0
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 1
60608: PUSH
60609: LD_INT 1
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 0
60618: PUSH
60619: LD_INT 1
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 1
60628: NEG
60629: PUSH
60630: LD_INT 0
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 1
60639: NEG
60640: PUSH
60641: LD_INT 1
60643: NEG
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 1
60651: NEG
60652: PUSH
60653: LD_INT 2
60655: NEG
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 1
60663: PUSH
60664: LD_INT 1
60666: NEG
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 2
60674: PUSH
60675: LD_INT 0
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 2
60684: PUSH
60685: LD_INT 1
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 2
60694: PUSH
60695: LD_INT 2
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 1
60704: PUSH
60705: LD_INT 2
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 0
60714: PUSH
60715: LD_INT 2
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 1
60724: NEG
60725: PUSH
60726: LD_INT 1
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 2
60735: NEG
60736: PUSH
60737: LD_INT 1
60739: NEG
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 2
60747: NEG
60748: PUSH
60749: LD_INT 2
60751: NEG
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 2
60759: NEG
60760: PUSH
60761: LD_INT 3
60763: NEG
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 2
60771: PUSH
60772: LD_INT 1
60774: NEG
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 3
60782: PUSH
60783: LD_INT 1
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 1
60792: PUSH
60793: LD_INT 3
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 1
60802: NEG
60803: PUSH
60804: LD_INT 2
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 3
60813: NEG
60814: PUSH
60815: LD_INT 2
60817: NEG
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60848: LD_ADDR_VAR 0 32
60852: PUSH
60853: LD_INT 0
60855: PUSH
60856: LD_INT 0
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 0
60865: PUSH
60866: LD_INT 1
60868: NEG
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 1
60876: PUSH
60877: LD_INT 0
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 1
60886: PUSH
60887: LD_INT 1
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 0
60896: PUSH
60897: LD_INT 1
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 1
60906: NEG
60907: PUSH
60908: LD_INT 0
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 1
60917: NEG
60918: PUSH
60919: LD_INT 1
60921: NEG
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 1
60929: NEG
60930: PUSH
60931: LD_INT 2
60933: NEG
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 0
60941: PUSH
60942: LD_INT 2
60944: NEG
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 1
60952: PUSH
60953: LD_INT 1
60955: NEG
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 2
60963: PUSH
60964: LD_INT 1
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 2
60973: PUSH
60974: LD_INT 2
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 1
60983: PUSH
60984: LD_INT 2
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 0
60993: PUSH
60994: LD_INT 2
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 1
61003: NEG
61004: PUSH
61005: LD_INT 1
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 2
61014: NEG
61015: PUSH
61016: LD_INT 0
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 2
61025: NEG
61026: PUSH
61027: LD_INT 1
61029: NEG
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 1
61037: NEG
61038: PUSH
61039: LD_INT 3
61041: NEG
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 1
61049: PUSH
61050: LD_INT 2
61052: NEG
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 3
61060: PUSH
61061: LD_INT 2
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 2
61070: PUSH
61071: LD_INT 3
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 2
61080: NEG
61081: PUSH
61082: LD_INT 1
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 3
61091: NEG
61092: PUSH
61093: LD_INT 1
61095: NEG
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61126: LD_ADDR_VAR 0 33
61130: PUSH
61131: LD_INT 0
61133: PUSH
61134: LD_INT 0
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 0
61143: PUSH
61144: LD_INT 1
61146: NEG
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 1
61154: PUSH
61155: LD_INT 0
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 1
61164: PUSH
61165: LD_INT 1
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 0
61174: PUSH
61175: LD_INT 1
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 1
61184: NEG
61185: PUSH
61186: LD_INT 0
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 1
61195: NEG
61196: PUSH
61197: LD_INT 1
61199: NEG
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 1
61207: NEG
61208: PUSH
61209: LD_INT 2
61211: NEG
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 1
61219: PUSH
61220: LD_INT 1
61222: NEG
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 2
61230: PUSH
61231: LD_INT 0
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 2
61240: PUSH
61241: LD_INT 1
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 1
61250: PUSH
61251: LD_INT 2
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 0
61260: PUSH
61261: LD_INT 2
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 1
61270: NEG
61271: PUSH
61272: LD_INT 1
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 2
61281: NEG
61282: PUSH
61283: LD_INT 0
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 2
61292: NEG
61293: PUSH
61294: LD_INT 1
61296: NEG
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 2
61304: NEG
61305: PUSH
61306: LD_INT 2
61308: NEG
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 2
61316: NEG
61317: PUSH
61318: LD_INT 3
61320: NEG
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 2
61328: PUSH
61329: LD_INT 1
61331: NEG
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 3
61339: PUSH
61340: LD_INT 1
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 1
61349: PUSH
61350: LD_INT 3
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 1
61359: NEG
61360: PUSH
61361: LD_INT 2
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 3
61370: NEG
61371: PUSH
61372: LD_INT 2
61374: NEG
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61405: LD_ADDR_VAR 0 34
61409: PUSH
61410: LD_INT 0
61412: PUSH
61413: LD_INT 0
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 0
61422: PUSH
61423: LD_INT 1
61425: NEG
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 1
61433: PUSH
61434: LD_INT 0
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 1
61443: PUSH
61444: LD_INT 1
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 0
61453: PUSH
61454: LD_INT 1
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 1
61463: NEG
61464: PUSH
61465: LD_INT 0
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 1
61474: NEG
61475: PUSH
61476: LD_INT 1
61478: NEG
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 1
61486: NEG
61487: PUSH
61488: LD_INT 2
61490: NEG
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 0
61498: PUSH
61499: LD_INT 2
61501: NEG
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 1
61509: PUSH
61510: LD_INT 1
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 2
61520: PUSH
61521: LD_INT 1
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 2
61530: PUSH
61531: LD_INT 2
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 1
61540: PUSH
61541: LD_INT 2
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 1
61550: NEG
61551: PUSH
61552: LD_INT 1
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 2
61561: NEG
61562: PUSH
61563: LD_INT 0
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 2
61572: NEG
61573: PUSH
61574: LD_INT 1
61576: NEG
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 2
61584: NEG
61585: PUSH
61586: LD_INT 2
61588: NEG
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 1
61596: NEG
61597: PUSH
61598: LD_INT 3
61600: NEG
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 1
61608: PUSH
61609: LD_INT 2
61611: NEG
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 3
61619: PUSH
61620: LD_INT 2
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 2
61629: PUSH
61630: LD_INT 3
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 2
61639: NEG
61640: PUSH
61641: LD_INT 1
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 3
61650: NEG
61651: PUSH
61652: LD_INT 1
61654: NEG
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61685: LD_ADDR_VAR 0 35
61689: PUSH
61690: LD_INT 0
61692: PUSH
61693: LD_INT 0
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 0
61702: PUSH
61703: LD_INT 1
61705: NEG
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 1
61713: PUSH
61714: LD_INT 0
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 1
61723: PUSH
61724: LD_INT 1
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 0
61733: PUSH
61734: LD_INT 1
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 1
61743: NEG
61744: PUSH
61745: LD_INT 0
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 1
61754: NEG
61755: PUSH
61756: LD_INT 1
61758: NEG
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 2
61766: PUSH
61767: LD_INT 1
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 2
61776: NEG
61777: PUSH
61778: LD_INT 1
61780: NEG
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61797: LD_ADDR_VAR 0 36
61801: PUSH
61802: LD_INT 0
61804: PUSH
61805: LD_INT 0
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 0
61814: PUSH
61815: LD_INT 1
61817: NEG
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 1
61825: PUSH
61826: LD_INT 0
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 1
61835: PUSH
61836: LD_INT 1
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 0
61845: PUSH
61846: LD_INT 1
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 1
61855: NEG
61856: PUSH
61857: LD_INT 0
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 1
61866: NEG
61867: PUSH
61868: LD_INT 1
61870: NEG
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 1
61878: NEG
61879: PUSH
61880: LD_INT 2
61882: NEG
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 1
61890: PUSH
61891: LD_INT 2
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61909: LD_ADDR_VAR 0 37
61913: PUSH
61914: LD_INT 0
61916: PUSH
61917: LD_INT 0
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 0
61926: PUSH
61927: LD_INT 1
61929: NEG
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 1
61937: PUSH
61938: LD_INT 0
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 1
61947: PUSH
61948: LD_INT 1
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 0
61957: PUSH
61958: LD_INT 1
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 1
61967: NEG
61968: PUSH
61969: LD_INT 0
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 1
61978: NEG
61979: PUSH
61980: LD_INT 1
61982: NEG
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 1
61990: PUSH
61991: LD_INT 1
61993: NEG
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 1
62001: NEG
62002: PUSH
62003: LD_INT 1
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62021: LD_ADDR_VAR 0 38
62025: PUSH
62026: LD_INT 0
62028: PUSH
62029: LD_INT 0
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 0
62038: PUSH
62039: LD_INT 1
62041: NEG
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 1
62049: PUSH
62050: LD_INT 0
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 1
62059: PUSH
62060: LD_INT 1
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 0
62069: PUSH
62070: LD_INT 1
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 1
62079: NEG
62080: PUSH
62081: LD_INT 0
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 1
62090: NEG
62091: PUSH
62092: LD_INT 1
62094: NEG
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 2
62102: PUSH
62103: LD_INT 1
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 2
62112: NEG
62113: PUSH
62114: LD_INT 1
62116: NEG
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62133: LD_ADDR_VAR 0 39
62137: PUSH
62138: LD_INT 0
62140: PUSH
62141: LD_INT 0
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 0
62150: PUSH
62151: LD_INT 1
62153: NEG
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 1
62161: PUSH
62162: LD_INT 0
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 1
62171: PUSH
62172: LD_INT 1
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 0
62181: PUSH
62182: LD_INT 1
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 1
62191: NEG
62192: PUSH
62193: LD_INT 0
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 1
62202: NEG
62203: PUSH
62204: LD_INT 1
62206: NEG
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 1
62214: NEG
62215: PUSH
62216: LD_INT 2
62218: NEG
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 1
62226: PUSH
62227: LD_INT 2
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62245: LD_ADDR_VAR 0 40
62249: PUSH
62250: LD_INT 0
62252: PUSH
62253: LD_INT 0
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 0
62262: PUSH
62263: LD_INT 1
62265: NEG
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 1
62273: PUSH
62274: LD_INT 0
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 1
62283: PUSH
62284: LD_INT 1
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 0
62293: PUSH
62294: LD_INT 1
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 1
62303: NEG
62304: PUSH
62305: LD_INT 0
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 1
62314: NEG
62315: PUSH
62316: LD_INT 1
62318: NEG
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 1
62326: PUSH
62327: LD_INT 1
62329: NEG
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 1
62337: NEG
62338: PUSH
62339: LD_INT 1
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62357: LD_ADDR_VAR 0 41
62361: PUSH
62362: LD_INT 0
62364: PUSH
62365: LD_INT 0
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 0
62374: PUSH
62375: LD_INT 1
62377: NEG
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 1
62385: PUSH
62386: LD_INT 0
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 1
62395: PUSH
62396: LD_INT 1
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 0
62405: PUSH
62406: LD_INT 1
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 1
62415: NEG
62416: PUSH
62417: LD_INT 0
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 1
62426: NEG
62427: PUSH
62428: LD_INT 1
62430: NEG
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 1
62438: NEG
62439: PUSH
62440: LD_INT 2
62442: NEG
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 1
62450: PUSH
62451: LD_INT 1
62453: NEG
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 2
62461: PUSH
62462: LD_INT 0
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 2
62471: PUSH
62472: LD_INT 1
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 2
62481: PUSH
62482: LD_INT 2
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 1
62491: PUSH
62492: LD_INT 2
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 1
62501: NEG
62502: PUSH
62503: LD_INT 1
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 2
62512: NEG
62513: PUSH
62514: LD_INT 0
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 2
62523: NEG
62524: PUSH
62525: LD_INT 1
62527: NEG
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 2
62535: NEG
62536: PUSH
62537: LD_INT 2
62539: NEG
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 2
62547: NEG
62548: PUSH
62549: LD_INT 3
62551: NEG
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 2
62559: PUSH
62560: LD_INT 1
62562: NEG
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 3
62570: PUSH
62571: LD_INT 0
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 3
62580: PUSH
62581: LD_INT 1
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 3
62590: PUSH
62591: LD_INT 2
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 3
62600: PUSH
62601: LD_INT 3
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 2
62610: PUSH
62611: LD_INT 3
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 2
62620: NEG
62621: PUSH
62622: LD_INT 1
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 3
62631: NEG
62632: PUSH
62633: LD_INT 0
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 3
62642: NEG
62643: PUSH
62644: LD_INT 1
62646: NEG
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 3
62654: NEG
62655: PUSH
62656: LD_INT 2
62658: NEG
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 3
62666: NEG
62667: PUSH
62668: LD_INT 3
62670: NEG
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62707: LD_ADDR_VAR 0 42
62711: PUSH
62712: LD_INT 0
62714: PUSH
62715: LD_INT 0
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 0
62724: PUSH
62725: LD_INT 1
62727: NEG
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 1
62735: PUSH
62736: LD_INT 0
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 1
62745: PUSH
62746: LD_INT 1
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 0
62755: PUSH
62756: LD_INT 1
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 1
62765: NEG
62766: PUSH
62767: LD_INT 0
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 1
62776: NEG
62777: PUSH
62778: LD_INT 1
62780: NEG
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 1
62788: NEG
62789: PUSH
62790: LD_INT 2
62792: NEG
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 0
62800: PUSH
62801: LD_INT 2
62803: NEG
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 1
62811: PUSH
62812: LD_INT 1
62814: NEG
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 2
62822: PUSH
62823: LD_INT 1
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 2
62832: PUSH
62833: LD_INT 2
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 1
62842: PUSH
62843: LD_INT 2
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 0
62852: PUSH
62853: LD_INT 2
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 1
62862: NEG
62863: PUSH
62864: LD_INT 1
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 2
62873: NEG
62874: PUSH
62875: LD_INT 1
62877: NEG
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 2
62885: NEG
62886: PUSH
62887: LD_INT 2
62889: NEG
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 2
62897: NEG
62898: PUSH
62899: LD_INT 3
62901: NEG
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 1
62909: NEG
62910: PUSH
62911: LD_INT 3
62913: NEG
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 0
62921: PUSH
62922: LD_INT 3
62924: NEG
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 1
62932: PUSH
62933: LD_INT 2
62935: NEG
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 3
62943: PUSH
62944: LD_INT 2
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 3
62953: PUSH
62954: LD_INT 3
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 2
62963: PUSH
62964: LD_INT 3
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 1
62973: PUSH
62974: LD_INT 3
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 0
62983: PUSH
62984: LD_INT 3
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 1
62993: NEG
62994: PUSH
62995: LD_INT 2
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 3
63004: NEG
63005: PUSH
63006: LD_INT 2
63008: NEG
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 3
63016: NEG
63017: PUSH
63018: LD_INT 3
63020: NEG
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63057: LD_ADDR_VAR 0 43
63061: PUSH
63062: LD_INT 0
63064: PUSH
63065: LD_INT 0
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 0
63074: PUSH
63075: LD_INT 1
63077: NEG
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 1
63085: PUSH
63086: LD_INT 0
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 1
63095: PUSH
63096: LD_INT 1
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 0
63105: PUSH
63106: LD_INT 1
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 1
63115: NEG
63116: PUSH
63117: LD_INT 0
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 1
63126: NEG
63127: PUSH
63128: LD_INT 1
63130: NEG
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 1
63138: NEG
63139: PUSH
63140: LD_INT 2
63142: NEG
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 0
63150: PUSH
63151: LD_INT 2
63153: NEG
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 1
63161: PUSH
63162: LD_INT 1
63164: NEG
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 2
63172: PUSH
63173: LD_INT 0
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 2
63182: PUSH
63183: LD_INT 1
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 1
63192: PUSH
63193: LD_INT 2
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 0
63202: PUSH
63203: LD_INT 2
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 1
63212: NEG
63213: PUSH
63214: LD_INT 1
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 2
63223: NEG
63224: PUSH
63225: LD_INT 0
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 2
63234: NEG
63235: PUSH
63236: LD_INT 1
63238: NEG
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 1
63246: NEG
63247: PUSH
63248: LD_INT 3
63250: NEG
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 0
63258: PUSH
63259: LD_INT 3
63261: NEG
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 1
63269: PUSH
63270: LD_INT 2
63272: NEG
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 2
63280: PUSH
63281: LD_INT 1
63283: NEG
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 3
63291: PUSH
63292: LD_INT 0
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 3
63301: PUSH
63302: LD_INT 1
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 1
63311: PUSH
63312: LD_INT 3
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 0
63321: PUSH
63322: LD_INT 3
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 1
63331: NEG
63332: PUSH
63333: LD_INT 2
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 2
63342: NEG
63343: PUSH
63344: LD_INT 1
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 3
63353: NEG
63354: PUSH
63355: LD_INT 0
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 3
63364: NEG
63365: PUSH
63366: LD_INT 1
63368: NEG
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63405: LD_ADDR_VAR 0 44
63409: PUSH
63410: LD_INT 0
63412: PUSH
63413: LD_INT 0
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 0
63422: PUSH
63423: LD_INT 1
63425: NEG
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 1
63433: PUSH
63434: LD_INT 0
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 1
63443: PUSH
63444: LD_INT 1
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 0
63453: PUSH
63454: LD_INT 1
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 1
63463: NEG
63464: PUSH
63465: LD_INT 0
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 1
63474: NEG
63475: PUSH
63476: LD_INT 1
63478: NEG
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 1
63486: NEG
63487: PUSH
63488: LD_INT 2
63490: NEG
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 1
63498: PUSH
63499: LD_INT 1
63501: NEG
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 2
63509: PUSH
63510: LD_INT 0
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 2
63519: PUSH
63520: LD_INT 1
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 2
63529: PUSH
63530: LD_INT 2
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 1
63539: PUSH
63540: LD_INT 2
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 1
63549: NEG
63550: PUSH
63551: LD_INT 1
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 2
63560: NEG
63561: PUSH
63562: LD_INT 0
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 2
63571: NEG
63572: PUSH
63573: LD_INT 1
63575: NEG
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 2
63583: NEG
63584: PUSH
63585: LD_INT 2
63587: NEG
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 2
63595: NEG
63596: PUSH
63597: LD_INT 3
63599: NEG
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 2
63607: PUSH
63608: LD_INT 1
63610: NEG
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 3
63618: PUSH
63619: LD_INT 0
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 3
63628: PUSH
63629: LD_INT 1
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 3
63638: PUSH
63639: LD_INT 2
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 3
63648: PUSH
63649: LD_INT 3
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 2
63658: PUSH
63659: LD_INT 3
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 2
63668: NEG
63669: PUSH
63670: LD_INT 1
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 3
63679: NEG
63680: PUSH
63681: LD_INT 0
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 3
63690: NEG
63691: PUSH
63692: LD_INT 1
63694: NEG
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 3
63702: NEG
63703: PUSH
63704: LD_INT 2
63706: NEG
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 3
63714: NEG
63715: PUSH
63716: LD_INT 3
63718: NEG
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63755: LD_ADDR_VAR 0 45
63759: PUSH
63760: LD_INT 0
63762: PUSH
63763: LD_INT 0
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 0
63772: PUSH
63773: LD_INT 1
63775: NEG
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 1
63783: PUSH
63784: LD_INT 0
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 1
63793: PUSH
63794: LD_INT 1
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 0
63803: PUSH
63804: LD_INT 1
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 1
63813: NEG
63814: PUSH
63815: LD_INT 0
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 1
63824: NEG
63825: PUSH
63826: LD_INT 1
63828: NEG
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 1
63836: NEG
63837: PUSH
63838: LD_INT 2
63840: NEG
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 0
63848: PUSH
63849: LD_INT 2
63851: NEG
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 1
63859: PUSH
63860: LD_INT 1
63862: NEG
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 2
63870: PUSH
63871: LD_INT 1
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 2
63880: PUSH
63881: LD_INT 2
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 1
63890: PUSH
63891: LD_INT 2
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 0
63900: PUSH
63901: LD_INT 2
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 1
63910: NEG
63911: PUSH
63912: LD_INT 1
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 2
63921: NEG
63922: PUSH
63923: LD_INT 1
63925: NEG
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 2
63933: NEG
63934: PUSH
63935: LD_INT 2
63937: NEG
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 2
63945: NEG
63946: PUSH
63947: LD_INT 3
63949: NEG
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 1
63957: NEG
63958: PUSH
63959: LD_INT 3
63961: NEG
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 0
63969: PUSH
63970: LD_INT 3
63972: NEG
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: LD_INT 1
63980: PUSH
63981: LD_INT 2
63983: NEG
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 3
63991: PUSH
63992: LD_INT 2
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 3
64001: PUSH
64002: LD_INT 3
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 2
64011: PUSH
64012: LD_INT 3
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 1
64021: PUSH
64022: LD_INT 3
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 0
64031: PUSH
64032: LD_INT 3
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 1
64041: NEG
64042: PUSH
64043: LD_INT 2
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 3
64052: NEG
64053: PUSH
64054: LD_INT 2
64056: NEG
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 3
64064: NEG
64065: PUSH
64066: LD_INT 3
64068: NEG
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64105: LD_ADDR_VAR 0 46
64109: PUSH
64110: LD_INT 0
64112: PUSH
64113: LD_INT 0
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 0
64122: PUSH
64123: LD_INT 1
64125: NEG
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 1
64133: PUSH
64134: LD_INT 0
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 1
64143: PUSH
64144: LD_INT 1
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: LD_INT 0
64153: PUSH
64154: LD_INT 1
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: LD_INT 1
64163: NEG
64164: PUSH
64165: LD_INT 0
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 1
64174: NEG
64175: PUSH
64176: LD_INT 1
64178: NEG
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 1
64186: NEG
64187: PUSH
64188: LD_INT 2
64190: NEG
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: LD_INT 0
64198: PUSH
64199: LD_INT 2
64201: NEG
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 1
64209: PUSH
64210: LD_INT 1
64212: NEG
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 2
64220: PUSH
64221: LD_INT 0
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 2
64230: PUSH
64231: LD_INT 1
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 1
64240: PUSH
64241: LD_INT 2
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 0
64250: PUSH
64251: LD_INT 2
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 1
64260: NEG
64261: PUSH
64262: LD_INT 1
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 2
64271: NEG
64272: PUSH
64273: LD_INT 0
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 2
64282: NEG
64283: PUSH
64284: LD_INT 1
64286: NEG
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 1
64294: NEG
64295: PUSH
64296: LD_INT 3
64298: NEG
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 0
64306: PUSH
64307: LD_INT 3
64309: NEG
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 1
64317: PUSH
64318: LD_INT 2
64320: NEG
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 2
64328: PUSH
64329: LD_INT 1
64331: NEG
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 3
64339: PUSH
64340: LD_INT 0
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 3
64349: PUSH
64350: LD_INT 1
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: LD_INT 1
64359: PUSH
64360: LD_INT 3
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 0
64369: PUSH
64370: LD_INT 3
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 1
64379: NEG
64380: PUSH
64381: LD_INT 2
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 2
64390: NEG
64391: PUSH
64392: LD_INT 1
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 3
64401: NEG
64402: PUSH
64403: LD_INT 0
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 3
64412: NEG
64413: PUSH
64414: LD_INT 1
64416: NEG
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64453: LD_ADDR_VAR 0 47
64457: PUSH
64458: LD_INT 0
64460: PUSH
64461: LD_INT 0
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 0
64470: PUSH
64471: LD_INT 1
64473: NEG
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 1
64481: PUSH
64482: LD_INT 0
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 1
64491: PUSH
64492: LD_INT 1
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 0
64501: PUSH
64502: LD_INT 1
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: LD_INT 1
64511: NEG
64512: PUSH
64513: LD_INT 0
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: LD_INT 1
64522: NEG
64523: PUSH
64524: LD_INT 1
64526: NEG
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 1
64534: NEG
64535: PUSH
64536: LD_INT 2
64538: NEG
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 0
64546: PUSH
64547: LD_INT 2
64549: NEG
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 1
64557: PUSH
64558: LD_INT 1
64560: NEG
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 2
64568: NEG
64569: PUSH
64570: LD_INT 1
64572: NEG
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 2
64580: NEG
64581: PUSH
64582: LD_INT 2
64584: NEG
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64604: LD_ADDR_VAR 0 48
64608: PUSH
64609: LD_INT 0
64611: PUSH
64612: LD_INT 0
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 0
64621: PUSH
64622: LD_INT 1
64624: NEG
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 1
64632: PUSH
64633: LD_INT 0
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 1
64642: PUSH
64643: LD_INT 1
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 0
64652: PUSH
64653: LD_INT 1
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 1
64662: NEG
64663: PUSH
64664: LD_INT 0
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: LD_INT 1
64673: NEG
64674: PUSH
64675: LD_INT 1
64677: NEG
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PUSH
64683: LD_INT 1
64685: NEG
64686: PUSH
64687: LD_INT 2
64689: NEG
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 0
64697: PUSH
64698: LD_INT 2
64700: NEG
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 1
64708: PUSH
64709: LD_INT 1
64711: NEG
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 2
64719: PUSH
64720: LD_INT 0
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: LD_INT 2
64729: PUSH
64730: LD_INT 1
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64751: LD_ADDR_VAR 0 49
64755: PUSH
64756: LD_INT 0
64758: PUSH
64759: LD_INT 0
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 0
64768: PUSH
64769: LD_INT 1
64771: NEG
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 1
64779: PUSH
64780: LD_INT 0
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: LD_INT 1
64789: PUSH
64790: LD_INT 1
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: LD_INT 0
64799: PUSH
64800: LD_INT 1
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: PUSH
64807: LD_INT 1
64809: NEG
64810: PUSH
64811: LD_INT 0
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: LD_INT 1
64820: NEG
64821: PUSH
64822: LD_INT 1
64824: NEG
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 1
64832: PUSH
64833: LD_INT 1
64835: NEG
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 2
64843: PUSH
64844: LD_INT 0
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 2
64853: PUSH
64854: LD_INT 1
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 2
64863: PUSH
64864: LD_INT 2
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 1
64873: PUSH
64874: LD_INT 2
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: LIST
64885: LIST
64886: LIST
64887: LIST
64888: LIST
64889: LIST
64890: LIST
64891: LIST
64892: LIST
64893: LIST
64894: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64895: LD_ADDR_VAR 0 50
64899: PUSH
64900: LD_INT 0
64902: PUSH
64903: LD_INT 0
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: PUSH
64910: LD_INT 0
64912: PUSH
64913: LD_INT 1
64915: NEG
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: LD_INT 1
64923: PUSH
64924: LD_INT 0
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: LD_INT 1
64933: PUSH
64934: LD_INT 1
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 0
64943: PUSH
64944: LD_INT 1
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 1
64953: NEG
64954: PUSH
64955: LD_INT 0
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 1
64964: NEG
64965: PUSH
64966: LD_INT 1
64968: NEG
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 2
64976: PUSH
64977: LD_INT 1
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 2
64986: PUSH
64987: LD_INT 2
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 1
64996: PUSH
64997: LD_INT 2
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: LD_INT 0
65006: PUSH
65007: LD_INT 2
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 1
65016: NEG
65017: PUSH
65018: LD_INT 1
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: LIST
65029: LIST
65030: LIST
65031: LIST
65032: LIST
65033: LIST
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65039: LD_ADDR_VAR 0 51
65043: PUSH
65044: LD_INT 0
65046: PUSH
65047: LD_INT 0
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 0
65056: PUSH
65057: LD_INT 1
65059: NEG
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 1
65067: PUSH
65068: LD_INT 0
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PUSH
65075: LD_INT 1
65077: PUSH
65078: LD_INT 1
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 0
65087: PUSH
65088: LD_INT 1
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 1
65097: NEG
65098: PUSH
65099: LD_INT 0
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 1
65108: NEG
65109: PUSH
65110: LD_INT 1
65112: NEG
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 1
65120: PUSH
65121: LD_INT 2
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 0
65130: PUSH
65131: LD_INT 2
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 1
65140: NEG
65141: PUSH
65142: LD_INT 1
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 2
65151: NEG
65152: PUSH
65153: LD_INT 0
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: LD_INT 2
65162: NEG
65163: PUSH
65164: LD_INT 1
65166: NEG
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: LIST
65182: LIST
65183: LIST
65184: LIST
65185: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65186: LD_ADDR_VAR 0 52
65190: PUSH
65191: LD_INT 0
65193: PUSH
65194: LD_INT 0
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 0
65203: PUSH
65204: LD_INT 1
65206: NEG
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 1
65214: PUSH
65215: LD_INT 0
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 1
65224: PUSH
65225: LD_INT 1
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 0
65234: PUSH
65235: LD_INT 1
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: LD_INT 1
65244: NEG
65245: PUSH
65246: LD_INT 0
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 1
65255: NEG
65256: PUSH
65257: LD_INT 1
65259: NEG
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 1
65267: NEG
65268: PUSH
65269: LD_INT 2
65271: NEG
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 1
65279: NEG
65280: PUSH
65281: LD_INT 1
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 2
65290: NEG
65291: PUSH
65292: LD_INT 0
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: LD_INT 2
65301: NEG
65302: PUSH
65303: LD_INT 1
65305: NEG
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: LD_INT 2
65313: NEG
65314: PUSH
65315: LD_INT 2
65317: NEG
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: LIST
65333: LIST
65334: LIST
65335: LIST
65336: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65337: LD_ADDR_VAR 0 53
65341: PUSH
65342: LD_INT 0
65344: PUSH
65345: LD_INT 0
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 0
65354: PUSH
65355: LD_INT 1
65357: NEG
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: LD_INT 1
65365: PUSH
65366: LD_INT 0
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: PUSH
65373: LD_INT 1
65375: PUSH
65376: LD_INT 1
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: LD_INT 0
65385: PUSH
65386: LD_INT 1
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 1
65395: NEG
65396: PUSH
65397: LD_INT 0
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PUSH
65404: LD_INT 1
65406: NEG
65407: PUSH
65408: LD_INT 1
65410: NEG
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: PUSH
65416: LD_INT 1
65418: NEG
65419: PUSH
65420: LD_INT 2
65422: NEG
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: LD_INT 0
65430: PUSH
65431: LD_INT 2
65433: NEG
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 1
65441: PUSH
65442: LD_INT 1
65444: NEG
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 2
65452: PUSH
65453: LD_INT 0
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 2
65462: PUSH
65463: LD_INT 1
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 2
65472: PUSH
65473: LD_INT 2
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 1
65482: PUSH
65483: LD_INT 2
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 0
65492: PUSH
65493: LD_INT 2
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: LD_INT 1
65502: NEG
65503: PUSH
65504: LD_INT 1
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 2
65513: NEG
65514: PUSH
65515: LD_INT 0
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 2
65524: NEG
65525: PUSH
65526: LD_INT 1
65528: NEG
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 2
65536: NEG
65537: PUSH
65538: LD_INT 2
65540: NEG
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65567: LD_ADDR_VAR 0 54
65571: PUSH
65572: LD_INT 0
65574: PUSH
65575: LD_INT 0
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 0
65584: PUSH
65585: LD_INT 1
65587: NEG
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_INT 1
65595: PUSH
65596: LD_INT 0
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 1
65605: PUSH
65606: LD_INT 1
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 0
65615: PUSH
65616: LD_INT 1
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 1
65625: NEG
65626: PUSH
65627: LD_INT 0
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: LD_INT 1
65636: NEG
65637: PUSH
65638: LD_INT 1
65640: NEG
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 1
65648: NEG
65649: PUSH
65650: LD_INT 2
65652: NEG
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 0
65660: PUSH
65661: LD_INT 2
65663: NEG
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 1
65671: PUSH
65672: LD_INT 1
65674: NEG
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 2
65682: PUSH
65683: LD_INT 0
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PUSH
65690: LD_INT 2
65692: PUSH
65693: LD_INT 1
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: LD_INT 2
65702: PUSH
65703: LD_INT 2
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: LD_INT 1
65712: PUSH
65713: LD_INT 2
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 0
65722: PUSH
65723: LD_INT 2
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: LD_INT 1
65732: NEG
65733: PUSH
65734: LD_INT 1
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 2
65743: NEG
65744: PUSH
65745: LD_INT 0
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: LD_INT 2
65754: NEG
65755: PUSH
65756: LD_INT 1
65758: NEG
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: LD_INT 2
65766: NEG
65767: PUSH
65768: LD_INT 2
65770: NEG
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65797: LD_ADDR_VAR 0 55
65801: PUSH
65802: LD_INT 0
65804: PUSH
65805: LD_INT 0
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: LD_INT 0
65814: PUSH
65815: LD_INT 1
65817: NEG
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: PUSH
65823: LD_INT 1
65825: PUSH
65826: LD_INT 0
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: LD_INT 1
65835: PUSH
65836: LD_INT 1
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: LD_INT 0
65845: PUSH
65846: LD_INT 1
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 1
65855: NEG
65856: PUSH
65857: LD_INT 0
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: PUSH
65864: LD_INT 1
65866: NEG
65867: PUSH
65868: LD_INT 1
65870: NEG
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: LD_INT 1
65878: NEG
65879: PUSH
65880: LD_INT 2
65882: NEG
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 0
65890: PUSH
65891: LD_INT 2
65893: NEG
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 1
65901: PUSH
65902: LD_INT 1
65904: NEG
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 2
65912: PUSH
65913: LD_INT 0
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 2
65922: PUSH
65923: LD_INT 1
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PUSH
65930: LD_INT 2
65932: PUSH
65933: LD_INT 2
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 1
65942: PUSH
65943: LD_INT 2
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 0
65952: PUSH
65953: LD_INT 2
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 1
65962: NEG
65963: PUSH
65964: LD_INT 1
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: LD_INT 2
65973: NEG
65974: PUSH
65975: LD_INT 0
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 2
65984: NEG
65985: PUSH
65986: LD_INT 1
65988: NEG
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 2
65996: NEG
65997: PUSH
65998: LD_INT 2
66000: NEG
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: LIST
66020: LIST
66021: LIST
66022: LIST
66023: LIST
66024: LIST
66025: LIST
66026: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66027: LD_ADDR_VAR 0 56
66031: PUSH
66032: LD_INT 0
66034: PUSH
66035: LD_INT 0
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 0
66044: PUSH
66045: LD_INT 1
66047: NEG
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: LD_INT 1
66055: PUSH
66056: LD_INT 0
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 1
66065: PUSH
66066: LD_INT 1
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 0
66075: PUSH
66076: LD_INT 1
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: LD_INT 1
66085: NEG
66086: PUSH
66087: LD_INT 0
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 1
66096: NEG
66097: PUSH
66098: LD_INT 1
66100: NEG
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: LD_INT 1
66108: NEG
66109: PUSH
66110: LD_INT 2
66112: NEG
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: LD_INT 0
66120: PUSH
66121: LD_INT 2
66123: NEG
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 1
66131: PUSH
66132: LD_INT 1
66134: NEG
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 2
66142: PUSH
66143: LD_INT 0
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 2
66152: PUSH
66153: LD_INT 1
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 2
66162: PUSH
66163: LD_INT 2
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 1
66172: PUSH
66173: LD_INT 2
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 0
66182: PUSH
66183: LD_INT 2
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: LD_INT 1
66192: NEG
66193: PUSH
66194: LD_INT 1
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: LD_INT 2
66203: NEG
66204: PUSH
66205: LD_INT 0
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: LD_INT 2
66214: NEG
66215: PUSH
66216: LD_INT 1
66218: NEG
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: PUSH
66224: LD_INT 2
66226: NEG
66227: PUSH
66228: LD_INT 2
66230: NEG
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66257: LD_ADDR_VAR 0 57
66261: PUSH
66262: LD_INT 0
66264: PUSH
66265: LD_INT 0
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 0
66274: PUSH
66275: LD_INT 1
66277: NEG
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: LD_INT 1
66285: PUSH
66286: LD_INT 0
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 1
66295: PUSH
66296: LD_INT 1
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PUSH
66303: LD_INT 0
66305: PUSH
66306: LD_INT 1
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 1
66315: NEG
66316: PUSH
66317: LD_INT 0
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 1
66326: NEG
66327: PUSH
66328: LD_INT 1
66330: NEG
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: LD_INT 1
66338: NEG
66339: PUSH
66340: LD_INT 2
66342: NEG
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: PUSH
66348: LD_INT 0
66350: PUSH
66351: LD_INT 2
66353: NEG
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: PUSH
66359: LD_INT 1
66361: PUSH
66362: LD_INT 1
66364: NEG
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: LD_INT 2
66372: PUSH
66373: LD_INT 0
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: PUSH
66380: LD_INT 2
66382: PUSH
66383: LD_INT 1
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: LD_INT 2
66392: PUSH
66393: LD_INT 2
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: PUSH
66400: LD_INT 1
66402: PUSH
66403: LD_INT 2
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: LD_INT 0
66412: PUSH
66413: LD_INT 2
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PUSH
66420: LD_INT 1
66422: NEG
66423: PUSH
66424: LD_INT 1
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 2
66433: NEG
66434: PUSH
66435: LD_INT 0
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 2
66444: NEG
66445: PUSH
66446: LD_INT 1
66448: NEG
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 2
66456: NEG
66457: PUSH
66458: LD_INT 2
66460: NEG
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: LIST
66482: LIST
66483: LIST
66484: LIST
66485: LIST
66486: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66487: LD_ADDR_VAR 0 58
66491: PUSH
66492: LD_INT 0
66494: PUSH
66495: LD_INT 0
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 0
66504: PUSH
66505: LD_INT 1
66507: NEG
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 1
66515: PUSH
66516: LD_INT 0
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 1
66525: PUSH
66526: LD_INT 1
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 0
66535: PUSH
66536: LD_INT 1
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: LD_INT 1
66545: NEG
66546: PUSH
66547: LD_INT 0
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 1
66556: NEG
66557: PUSH
66558: LD_INT 1
66560: NEG
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 1
66568: NEG
66569: PUSH
66570: LD_INT 2
66572: NEG
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 0
66580: PUSH
66581: LD_INT 2
66583: NEG
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: LD_INT 1
66591: PUSH
66592: LD_INT 1
66594: NEG
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 2
66602: PUSH
66603: LD_INT 0
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: LD_INT 2
66612: PUSH
66613: LD_INT 1
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_INT 2
66622: PUSH
66623: LD_INT 2
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: LD_INT 1
66632: PUSH
66633: LD_INT 2
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: LD_INT 0
66642: PUSH
66643: LD_INT 2
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 1
66652: NEG
66653: PUSH
66654: LD_INT 1
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 2
66663: NEG
66664: PUSH
66665: LD_INT 0
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: LD_INT 2
66674: NEG
66675: PUSH
66676: LD_INT 1
66678: NEG
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 2
66686: NEG
66687: PUSH
66688: LD_INT 2
66690: NEG
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66717: LD_ADDR_VAR 0 59
66721: PUSH
66722: LD_INT 0
66724: PUSH
66725: LD_INT 0
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: LD_INT 0
66734: PUSH
66735: LD_INT 1
66737: NEG
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 1
66745: PUSH
66746: LD_INT 0
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 1
66755: PUSH
66756: LD_INT 1
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: LD_INT 0
66765: PUSH
66766: LD_INT 1
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: LD_INT 1
66775: NEG
66776: PUSH
66777: LD_INT 0
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: PUSH
66784: LD_INT 1
66786: NEG
66787: PUSH
66788: LD_INT 1
66790: NEG
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: EMPTY
66797: LIST
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66805: LD_ADDR_VAR 0 60
66809: PUSH
66810: LD_INT 0
66812: PUSH
66813: LD_INT 0
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 0
66822: PUSH
66823: LD_INT 1
66825: NEG
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: LD_INT 1
66833: PUSH
66834: LD_INT 0
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 1
66843: PUSH
66844: LD_INT 1
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 0
66853: PUSH
66854: LD_INT 1
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 1
66863: NEG
66864: PUSH
66865: LD_INT 0
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 1
66874: NEG
66875: PUSH
66876: LD_INT 1
66878: NEG
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66893: LD_ADDR_VAR 0 61
66897: PUSH
66898: LD_INT 0
66900: PUSH
66901: LD_INT 0
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: LD_INT 0
66910: PUSH
66911: LD_INT 1
66913: NEG
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 1
66921: PUSH
66922: LD_INT 0
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 1
66931: PUSH
66932: LD_INT 1
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 0
66941: PUSH
66942: LD_INT 1
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 1
66951: NEG
66952: PUSH
66953: LD_INT 0
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 1
66962: NEG
66963: PUSH
66964: LD_INT 1
66966: NEG
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: LIST
66976: LIST
66977: LIST
66978: LIST
66979: LIST
66980: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66981: LD_ADDR_VAR 0 62
66985: PUSH
66986: LD_INT 0
66988: PUSH
66989: LD_INT 0
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: LD_INT 0
66998: PUSH
66999: LD_INT 1
67001: NEG
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 1
67009: PUSH
67010: LD_INT 0
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 1
67019: PUSH
67020: LD_INT 1
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 0
67029: PUSH
67030: LD_INT 1
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: LD_INT 1
67039: NEG
67040: PUSH
67041: LD_INT 0
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 1
67050: NEG
67051: PUSH
67052: LD_INT 1
67054: NEG
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: LIST
67064: LIST
67065: LIST
67066: LIST
67067: LIST
67068: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67069: LD_ADDR_VAR 0 63
67073: PUSH
67074: LD_INT 0
67076: PUSH
67077: LD_INT 0
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 0
67086: PUSH
67087: LD_INT 1
67089: NEG
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 1
67097: PUSH
67098: LD_INT 0
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_INT 1
67107: PUSH
67108: LD_INT 1
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: LD_INT 0
67117: PUSH
67118: LD_INT 1
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: LD_INT 1
67127: NEG
67128: PUSH
67129: LD_INT 0
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: PUSH
67136: LD_INT 1
67138: NEG
67139: PUSH
67140: LD_INT 1
67142: NEG
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: LIST
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67157: LD_ADDR_VAR 0 64
67161: PUSH
67162: LD_INT 0
67164: PUSH
67165: LD_INT 0
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PUSH
67172: LD_INT 0
67174: PUSH
67175: LD_INT 1
67177: NEG
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: LD_INT 1
67185: PUSH
67186: LD_INT 0
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 1
67195: PUSH
67196: LD_INT 1
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 0
67205: PUSH
67206: LD_INT 1
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 1
67215: NEG
67216: PUSH
67217: LD_INT 0
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 1
67226: NEG
67227: PUSH
67228: LD_INT 1
67230: NEG
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: EMPTY
67237: LIST
67238: LIST
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: ST_TO_ADDR
// end ; 1 :
67245: GO 73142
67247: LD_INT 1
67249: DOUBLE
67250: EQUAL
67251: IFTRUE 67255
67253: GO 69878
67255: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67256: LD_ADDR_VAR 0 11
67260: PUSH
67261: LD_INT 1
67263: NEG
67264: PUSH
67265: LD_INT 3
67267: NEG
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 0
67275: PUSH
67276: LD_INT 3
67278: NEG
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: LD_INT 1
67286: PUSH
67287: LD_INT 2
67289: NEG
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: LIST
67299: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67300: LD_ADDR_VAR 0 12
67304: PUSH
67305: LD_INT 2
67307: PUSH
67308: LD_INT 1
67310: NEG
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PUSH
67316: LD_INT 3
67318: PUSH
67319: LD_INT 0
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PUSH
67326: LD_INT 3
67328: PUSH
67329: LD_INT 1
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: LIST
67340: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67341: LD_ADDR_VAR 0 13
67345: PUSH
67346: LD_INT 3
67348: PUSH
67349: LD_INT 2
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 3
67358: PUSH
67359: LD_INT 3
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 2
67368: PUSH
67369: LD_INT 3
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: LIST
67380: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67381: LD_ADDR_VAR 0 14
67385: PUSH
67386: LD_INT 1
67388: PUSH
67389: LD_INT 3
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: PUSH
67396: LD_INT 0
67398: PUSH
67399: LD_INT 3
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: PUSH
67406: LD_INT 1
67408: NEG
67409: PUSH
67410: LD_INT 2
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: LIST
67421: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67422: LD_ADDR_VAR 0 15
67426: PUSH
67427: LD_INT 2
67429: NEG
67430: PUSH
67431: LD_INT 1
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: PUSH
67438: LD_INT 3
67440: NEG
67441: PUSH
67442: LD_INT 0
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: PUSH
67449: LD_INT 3
67451: NEG
67452: PUSH
67453: LD_INT 1
67455: NEG
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: LIST
67465: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67466: LD_ADDR_VAR 0 16
67470: PUSH
67471: LD_INT 2
67473: NEG
67474: PUSH
67475: LD_INT 3
67477: NEG
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 3
67485: NEG
67486: PUSH
67487: LD_INT 2
67489: NEG
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: LD_INT 3
67497: NEG
67498: PUSH
67499: LD_INT 3
67501: NEG
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: LIST
67511: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67512: LD_ADDR_VAR 0 17
67516: PUSH
67517: LD_INT 1
67519: NEG
67520: PUSH
67521: LD_INT 3
67523: NEG
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 0
67531: PUSH
67532: LD_INT 3
67534: NEG
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 1
67542: PUSH
67543: LD_INT 2
67545: NEG
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: LIST
67555: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67556: LD_ADDR_VAR 0 18
67560: PUSH
67561: LD_INT 2
67563: PUSH
67564: LD_INT 1
67566: NEG
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: LD_INT 3
67574: PUSH
67575: LD_INT 0
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PUSH
67582: LD_INT 3
67584: PUSH
67585: LD_INT 1
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: LIST
67596: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67597: LD_ADDR_VAR 0 19
67601: PUSH
67602: LD_INT 3
67604: PUSH
67605: LD_INT 2
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: LD_INT 3
67614: PUSH
67615: LD_INT 3
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 2
67624: PUSH
67625: LD_INT 3
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: LIST
67636: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67637: LD_ADDR_VAR 0 20
67641: PUSH
67642: LD_INT 1
67644: PUSH
67645: LD_INT 3
67647: PUSH
67648: EMPTY
67649: LIST
67650: LIST
67651: PUSH
67652: LD_INT 0
67654: PUSH
67655: LD_INT 3
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PUSH
67662: LD_INT 1
67664: NEG
67665: PUSH
67666: LD_INT 2
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: LIST
67677: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67678: LD_ADDR_VAR 0 21
67682: PUSH
67683: LD_INT 2
67685: NEG
67686: PUSH
67687: LD_INT 1
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: PUSH
67694: LD_INT 3
67696: NEG
67697: PUSH
67698: LD_INT 0
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: PUSH
67705: LD_INT 3
67707: NEG
67708: PUSH
67709: LD_INT 1
67711: NEG
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: LIST
67721: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67722: LD_ADDR_VAR 0 22
67726: PUSH
67727: LD_INT 2
67729: NEG
67730: PUSH
67731: LD_INT 3
67733: NEG
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 3
67741: NEG
67742: PUSH
67743: LD_INT 2
67745: NEG
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 3
67753: NEG
67754: PUSH
67755: LD_INT 3
67757: NEG
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: LIST
67767: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67768: LD_ADDR_VAR 0 23
67772: PUSH
67773: LD_INT 0
67775: PUSH
67776: LD_INT 3
67778: NEG
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: PUSH
67784: LD_INT 1
67786: NEG
67787: PUSH
67788: LD_INT 4
67790: NEG
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: PUSH
67796: LD_INT 1
67798: PUSH
67799: LD_INT 3
67801: NEG
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: LIST
67811: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67812: LD_ADDR_VAR 0 24
67816: PUSH
67817: LD_INT 3
67819: PUSH
67820: LD_INT 0
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: LD_INT 3
67829: PUSH
67830: LD_INT 1
67832: NEG
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: PUSH
67838: LD_INT 4
67840: PUSH
67841: LD_INT 1
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: LIST
67852: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67853: LD_ADDR_VAR 0 25
67857: PUSH
67858: LD_INT 3
67860: PUSH
67861: LD_INT 3
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: LD_INT 4
67870: PUSH
67871: LD_INT 3
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: LD_INT 3
67880: PUSH
67881: LD_INT 4
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: LIST
67892: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67893: LD_ADDR_VAR 0 26
67897: PUSH
67898: LD_INT 0
67900: PUSH
67901: LD_INT 3
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: LD_INT 1
67910: PUSH
67911: LD_INT 4
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 1
67920: NEG
67921: PUSH
67922: LD_INT 3
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: LIST
67933: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67934: LD_ADDR_VAR 0 27
67938: PUSH
67939: LD_INT 3
67941: NEG
67942: PUSH
67943: LD_INT 0
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: LD_INT 3
67952: NEG
67953: PUSH
67954: LD_INT 1
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: PUSH
67961: LD_INT 4
67963: NEG
67964: PUSH
67965: LD_INT 1
67967: NEG
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: LIST
67977: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67978: LD_ADDR_VAR 0 28
67982: PUSH
67983: LD_INT 3
67985: NEG
67986: PUSH
67987: LD_INT 3
67989: NEG
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PUSH
67995: LD_INT 3
67997: NEG
67998: PUSH
67999: LD_INT 4
68001: NEG
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PUSH
68007: LD_INT 4
68009: NEG
68010: PUSH
68011: LD_INT 3
68013: NEG
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: LIST
68023: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
68024: LD_ADDR_VAR 0 29
68028: PUSH
68029: LD_INT 1
68031: NEG
68032: PUSH
68033: LD_INT 3
68035: NEG
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 0
68043: PUSH
68044: LD_INT 3
68046: NEG
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 1
68054: PUSH
68055: LD_INT 2
68057: NEG
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: PUSH
68063: LD_INT 1
68065: NEG
68066: PUSH
68067: LD_INT 4
68069: NEG
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: LD_INT 0
68077: PUSH
68078: LD_INT 4
68080: NEG
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: PUSH
68086: LD_INT 1
68088: PUSH
68089: LD_INT 3
68091: NEG
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: PUSH
68097: LD_INT 1
68099: NEG
68100: PUSH
68101: LD_INT 5
68103: NEG
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: LD_INT 0
68111: PUSH
68112: LD_INT 5
68114: NEG
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: LD_INT 1
68122: PUSH
68123: LD_INT 4
68125: NEG
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: LD_INT 1
68133: NEG
68134: PUSH
68135: LD_INT 6
68137: NEG
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: PUSH
68143: LD_INT 0
68145: PUSH
68146: LD_INT 6
68148: NEG
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: PUSH
68154: LD_INT 1
68156: PUSH
68157: LD_INT 5
68159: NEG
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: LIST
68169: LIST
68170: LIST
68171: LIST
68172: LIST
68173: LIST
68174: LIST
68175: LIST
68176: LIST
68177: LIST
68178: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68179: LD_ADDR_VAR 0 30
68183: PUSH
68184: LD_INT 2
68186: PUSH
68187: LD_INT 1
68189: NEG
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: PUSH
68195: LD_INT 3
68197: PUSH
68198: LD_INT 0
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PUSH
68205: LD_INT 3
68207: PUSH
68208: LD_INT 1
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: PUSH
68215: LD_INT 3
68217: PUSH
68218: LD_INT 1
68220: NEG
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: PUSH
68226: LD_INT 4
68228: PUSH
68229: LD_INT 0
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: PUSH
68236: LD_INT 4
68238: PUSH
68239: LD_INT 1
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: PUSH
68246: LD_INT 4
68248: PUSH
68249: LD_INT 1
68251: NEG
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: LD_INT 5
68259: PUSH
68260: LD_INT 0
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: LD_INT 5
68269: PUSH
68270: LD_INT 1
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: PUSH
68277: LD_INT 5
68279: PUSH
68280: LD_INT 1
68282: NEG
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: PUSH
68288: LD_INT 6
68290: PUSH
68291: LD_INT 0
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: PUSH
68298: LD_INT 6
68300: PUSH
68301: LD_INT 1
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: LIST
68312: LIST
68313: LIST
68314: LIST
68315: LIST
68316: LIST
68317: LIST
68318: LIST
68319: LIST
68320: LIST
68321: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68322: LD_ADDR_VAR 0 31
68326: PUSH
68327: LD_INT 3
68329: PUSH
68330: LD_INT 2
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: PUSH
68337: LD_INT 3
68339: PUSH
68340: LD_INT 3
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: LD_INT 2
68349: PUSH
68350: LD_INT 3
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: PUSH
68357: LD_INT 4
68359: PUSH
68360: LD_INT 3
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: LD_INT 4
68369: PUSH
68370: LD_INT 4
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 3
68379: PUSH
68380: LD_INT 4
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: LD_INT 5
68389: PUSH
68390: LD_INT 4
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 5
68399: PUSH
68400: LD_INT 5
68402: PUSH
68403: EMPTY
68404: LIST
68405: LIST
68406: PUSH
68407: LD_INT 4
68409: PUSH
68410: LD_INT 5
68412: PUSH
68413: EMPTY
68414: LIST
68415: LIST
68416: PUSH
68417: LD_INT 6
68419: PUSH
68420: LD_INT 5
68422: PUSH
68423: EMPTY
68424: LIST
68425: LIST
68426: PUSH
68427: LD_INT 6
68429: PUSH
68430: LD_INT 6
68432: PUSH
68433: EMPTY
68434: LIST
68435: LIST
68436: PUSH
68437: LD_INT 5
68439: PUSH
68440: LD_INT 6
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: LIST
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68461: LD_ADDR_VAR 0 32
68465: PUSH
68466: LD_INT 1
68468: PUSH
68469: LD_INT 3
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: PUSH
68476: LD_INT 0
68478: PUSH
68479: LD_INT 3
68481: PUSH
68482: EMPTY
68483: LIST
68484: LIST
68485: PUSH
68486: LD_INT 1
68488: NEG
68489: PUSH
68490: LD_INT 2
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PUSH
68497: LD_INT 1
68499: PUSH
68500: LD_INT 4
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: PUSH
68507: LD_INT 0
68509: PUSH
68510: LD_INT 4
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: LD_INT 1
68519: NEG
68520: PUSH
68521: LD_INT 3
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: LD_INT 1
68530: PUSH
68531: LD_INT 5
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: LD_INT 0
68540: PUSH
68541: LD_INT 5
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 1
68550: NEG
68551: PUSH
68552: LD_INT 4
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: PUSH
68559: LD_INT 1
68561: PUSH
68562: LD_INT 6
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: PUSH
68569: LD_INT 0
68571: PUSH
68572: LD_INT 6
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: PUSH
68579: LD_INT 1
68581: NEG
68582: PUSH
68583: LD_INT 5
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: LIST
68594: LIST
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: LIST
68600: LIST
68601: LIST
68602: LIST
68603: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68604: LD_ADDR_VAR 0 33
68608: PUSH
68609: LD_INT 2
68611: NEG
68612: PUSH
68613: LD_INT 1
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: LD_INT 3
68622: NEG
68623: PUSH
68624: LD_INT 0
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 3
68633: NEG
68634: PUSH
68635: LD_INT 1
68637: NEG
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: LD_INT 3
68645: NEG
68646: PUSH
68647: LD_INT 1
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: LD_INT 4
68656: NEG
68657: PUSH
68658: LD_INT 0
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PUSH
68665: LD_INT 4
68667: NEG
68668: PUSH
68669: LD_INT 1
68671: NEG
68672: PUSH
68673: EMPTY
68674: LIST
68675: LIST
68676: PUSH
68677: LD_INT 4
68679: NEG
68680: PUSH
68681: LD_INT 1
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: LD_INT 5
68690: NEG
68691: PUSH
68692: LD_INT 0
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: PUSH
68699: LD_INT 5
68701: NEG
68702: PUSH
68703: LD_INT 1
68705: NEG
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: PUSH
68711: LD_INT 5
68713: NEG
68714: PUSH
68715: LD_INT 1
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 6
68724: NEG
68725: PUSH
68726: LD_INT 0
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: LD_INT 6
68735: NEG
68736: PUSH
68737: LD_INT 1
68739: NEG
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: EMPTY
68746: LIST
68747: LIST
68748: LIST
68749: LIST
68750: LIST
68751: LIST
68752: LIST
68753: LIST
68754: LIST
68755: LIST
68756: LIST
68757: LIST
68758: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68759: LD_ADDR_VAR 0 34
68763: PUSH
68764: LD_INT 2
68766: NEG
68767: PUSH
68768: LD_INT 3
68770: NEG
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 3
68778: NEG
68779: PUSH
68780: LD_INT 2
68782: NEG
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: PUSH
68788: LD_INT 3
68790: NEG
68791: PUSH
68792: LD_INT 3
68794: NEG
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: PUSH
68800: LD_INT 3
68802: NEG
68803: PUSH
68804: LD_INT 4
68806: NEG
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: PUSH
68812: LD_INT 4
68814: NEG
68815: PUSH
68816: LD_INT 3
68818: NEG
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: LD_INT 4
68826: NEG
68827: PUSH
68828: LD_INT 4
68830: NEG
68831: PUSH
68832: EMPTY
68833: LIST
68834: LIST
68835: PUSH
68836: LD_INT 4
68838: NEG
68839: PUSH
68840: LD_INT 5
68842: NEG
68843: PUSH
68844: EMPTY
68845: LIST
68846: LIST
68847: PUSH
68848: LD_INT 5
68850: NEG
68851: PUSH
68852: LD_INT 4
68854: NEG
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: LD_INT 5
68862: NEG
68863: PUSH
68864: LD_INT 5
68866: NEG
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PUSH
68872: LD_INT 5
68874: NEG
68875: PUSH
68876: LD_INT 6
68878: NEG
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: PUSH
68884: LD_INT 6
68886: NEG
68887: PUSH
68888: LD_INT 5
68890: NEG
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: PUSH
68896: LD_INT 6
68898: NEG
68899: PUSH
68900: LD_INT 6
68902: NEG
68903: PUSH
68904: EMPTY
68905: LIST
68906: LIST
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: LIST
68912: LIST
68913: LIST
68914: LIST
68915: LIST
68916: LIST
68917: LIST
68918: LIST
68919: LIST
68920: LIST
68921: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68922: LD_ADDR_VAR 0 41
68926: PUSH
68927: LD_INT 0
68929: PUSH
68930: LD_INT 2
68932: NEG
68933: PUSH
68934: EMPTY
68935: LIST
68936: LIST
68937: PUSH
68938: LD_INT 1
68940: NEG
68941: PUSH
68942: LD_INT 3
68944: NEG
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: PUSH
68950: LD_INT 1
68952: PUSH
68953: LD_INT 2
68955: NEG
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: LIST
68965: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68966: LD_ADDR_VAR 0 42
68970: PUSH
68971: LD_INT 2
68973: PUSH
68974: LD_INT 0
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: PUSH
68981: LD_INT 2
68983: PUSH
68984: LD_INT 1
68986: NEG
68987: PUSH
68988: EMPTY
68989: LIST
68990: LIST
68991: PUSH
68992: LD_INT 3
68994: PUSH
68995: LD_INT 1
68997: PUSH
68998: EMPTY
68999: LIST
69000: LIST
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: LIST
69006: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
69007: LD_ADDR_VAR 0 43
69011: PUSH
69012: LD_INT 2
69014: PUSH
69015: LD_INT 2
69017: PUSH
69018: EMPTY
69019: LIST
69020: LIST
69021: PUSH
69022: LD_INT 3
69024: PUSH
69025: LD_INT 2
69027: PUSH
69028: EMPTY
69029: LIST
69030: LIST
69031: PUSH
69032: LD_INT 2
69034: PUSH
69035: LD_INT 3
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: LIST
69046: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
69047: LD_ADDR_VAR 0 44
69051: PUSH
69052: LD_INT 0
69054: PUSH
69055: LD_INT 2
69057: PUSH
69058: EMPTY
69059: LIST
69060: LIST
69061: PUSH
69062: LD_INT 1
69064: PUSH
69065: LD_INT 3
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: PUSH
69072: LD_INT 1
69074: NEG
69075: PUSH
69076: LD_INT 2
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: LIST
69087: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69088: LD_ADDR_VAR 0 45
69092: PUSH
69093: LD_INT 2
69095: NEG
69096: PUSH
69097: LD_INT 0
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 2
69106: NEG
69107: PUSH
69108: LD_INT 1
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: LD_INT 3
69117: NEG
69118: PUSH
69119: LD_INT 1
69121: NEG
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: LIST
69131: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69132: LD_ADDR_VAR 0 46
69136: PUSH
69137: LD_INT 2
69139: NEG
69140: PUSH
69141: LD_INT 2
69143: NEG
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: PUSH
69149: LD_INT 2
69151: NEG
69152: PUSH
69153: LD_INT 3
69155: NEG
69156: PUSH
69157: EMPTY
69158: LIST
69159: LIST
69160: PUSH
69161: LD_INT 3
69163: NEG
69164: PUSH
69165: LD_INT 2
69167: NEG
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: PUSH
69173: EMPTY
69174: LIST
69175: LIST
69176: LIST
69177: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69178: LD_ADDR_VAR 0 47
69182: PUSH
69183: LD_INT 2
69185: NEG
69186: PUSH
69187: LD_INT 3
69189: NEG
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: PUSH
69195: LD_INT 1
69197: NEG
69198: PUSH
69199: LD_INT 3
69201: NEG
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69211: LD_ADDR_VAR 0 48
69215: PUSH
69216: LD_INT 1
69218: PUSH
69219: LD_INT 2
69221: NEG
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: PUSH
69227: LD_INT 2
69229: PUSH
69230: LD_INT 1
69232: NEG
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69242: LD_ADDR_VAR 0 49
69246: PUSH
69247: LD_INT 3
69249: PUSH
69250: LD_INT 1
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 3
69259: PUSH
69260: LD_INT 2
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69271: LD_ADDR_VAR 0 50
69275: PUSH
69276: LD_INT 2
69278: PUSH
69279: LD_INT 3
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: PUSH
69286: LD_INT 1
69288: PUSH
69289: LD_INT 3
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69300: LD_ADDR_VAR 0 51
69304: PUSH
69305: LD_INT 1
69307: NEG
69308: PUSH
69309: LD_INT 2
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: PUSH
69316: LD_INT 2
69318: NEG
69319: PUSH
69320: LD_INT 1
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69331: LD_ADDR_VAR 0 52
69335: PUSH
69336: LD_INT 3
69338: NEG
69339: PUSH
69340: LD_INT 1
69342: NEG
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: PUSH
69348: LD_INT 3
69350: NEG
69351: PUSH
69352: LD_INT 2
69354: NEG
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69364: LD_ADDR_VAR 0 53
69368: PUSH
69369: LD_INT 1
69371: NEG
69372: PUSH
69373: LD_INT 3
69375: NEG
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: PUSH
69381: LD_INT 0
69383: PUSH
69384: LD_INT 3
69386: NEG
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: PUSH
69392: LD_INT 1
69394: PUSH
69395: LD_INT 2
69397: NEG
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: LIST
69407: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69408: LD_ADDR_VAR 0 54
69412: PUSH
69413: LD_INT 2
69415: PUSH
69416: LD_INT 1
69418: NEG
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 3
69426: PUSH
69427: LD_INT 0
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: PUSH
69434: LD_INT 3
69436: PUSH
69437: LD_INT 1
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: PUSH
69444: EMPTY
69445: LIST
69446: LIST
69447: LIST
69448: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69449: LD_ADDR_VAR 0 55
69453: PUSH
69454: LD_INT 3
69456: PUSH
69457: LD_INT 2
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: PUSH
69464: LD_INT 3
69466: PUSH
69467: LD_INT 3
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: PUSH
69474: LD_INT 2
69476: PUSH
69477: LD_INT 3
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: LIST
69488: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69489: LD_ADDR_VAR 0 56
69493: PUSH
69494: LD_INT 1
69496: PUSH
69497: LD_INT 3
69499: PUSH
69500: EMPTY
69501: LIST
69502: LIST
69503: PUSH
69504: LD_INT 0
69506: PUSH
69507: LD_INT 3
69509: PUSH
69510: EMPTY
69511: LIST
69512: LIST
69513: PUSH
69514: LD_INT 1
69516: NEG
69517: PUSH
69518: LD_INT 2
69520: PUSH
69521: EMPTY
69522: LIST
69523: LIST
69524: PUSH
69525: EMPTY
69526: LIST
69527: LIST
69528: LIST
69529: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69530: LD_ADDR_VAR 0 57
69534: PUSH
69535: LD_INT 2
69537: NEG
69538: PUSH
69539: LD_INT 1
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: LD_INT 3
69548: NEG
69549: PUSH
69550: LD_INT 0
69552: PUSH
69553: EMPTY
69554: LIST
69555: LIST
69556: PUSH
69557: LD_INT 3
69559: NEG
69560: PUSH
69561: LD_INT 1
69563: NEG
69564: PUSH
69565: EMPTY
69566: LIST
69567: LIST
69568: PUSH
69569: EMPTY
69570: LIST
69571: LIST
69572: LIST
69573: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69574: LD_ADDR_VAR 0 58
69578: PUSH
69579: LD_INT 2
69581: NEG
69582: PUSH
69583: LD_INT 3
69585: NEG
69586: PUSH
69587: EMPTY
69588: LIST
69589: LIST
69590: PUSH
69591: LD_INT 3
69593: NEG
69594: PUSH
69595: LD_INT 2
69597: NEG
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: PUSH
69603: LD_INT 3
69605: NEG
69606: PUSH
69607: LD_INT 3
69609: NEG
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: LIST
69619: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69620: LD_ADDR_VAR 0 59
69624: PUSH
69625: LD_INT 1
69627: NEG
69628: PUSH
69629: LD_INT 2
69631: NEG
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: PUSH
69637: LD_INT 0
69639: PUSH
69640: LD_INT 2
69642: NEG
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: PUSH
69648: LD_INT 1
69650: PUSH
69651: LD_INT 1
69653: NEG
69654: PUSH
69655: EMPTY
69656: LIST
69657: LIST
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: LIST
69663: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69664: LD_ADDR_VAR 0 60
69668: PUSH
69669: LD_INT 1
69671: PUSH
69672: LD_INT 1
69674: NEG
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: PUSH
69680: LD_INT 2
69682: PUSH
69683: LD_INT 0
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: LD_INT 2
69692: PUSH
69693: LD_INT 1
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: LIST
69704: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69705: LD_ADDR_VAR 0 61
69709: PUSH
69710: LD_INT 2
69712: PUSH
69713: LD_INT 1
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: PUSH
69720: LD_INT 2
69722: PUSH
69723: LD_INT 2
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PUSH
69730: LD_INT 1
69732: PUSH
69733: LD_INT 2
69735: PUSH
69736: EMPTY
69737: LIST
69738: LIST
69739: PUSH
69740: EMPTY
69741: LIST
69742: LIST
69743: LIST
69744: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69745: LD_ADDR_VAR 0 62
69749: PUSH
69750: LD_INT 1
69752: PUSH
69753: LD_INT 2
69755: PUSH
69756: EMPTY
69757: LIST
69758: LIST
69759: PUSH
69760: LD_INT 0
69762: PUSH
69763: LD_INT 2
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: PUSH
69770: LD_INT 1
69772: NEG
69773: PUSH
69774: LD_INT 1
69776: PUSH
69777: EMPTY
69778: LIST
69779: LIST
69780: PUSH
69781: EMPTY
69782: LIST
69783: LIST
69784: LIST
69785: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69786: LD_ADDR_VAR 0 63
69790: PUSH
69791: LD_INT 1
69793: NEG
69794: PUSH
69795: LD_INT 1
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: PUSH
69802: LD_INT 2
69804: NEG
69805: PUSH
69806: LD_INT 0
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 2
69815: NEG
69816: PUSH
69817: LD_INT 1
69819: NEG
69820: PUSH
69821: EMPTY
69822: LIST
69823: LIST
69824: PUSH
69825: EMPTY
69826: LIST
69827: LIST
69828: LIST
69829: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69830: LD_ADDR_VAR 0 64
69834: PUSH
69835: LD_INT 1
69837: NEG
69838: PUSH
69839: LD_INT 2
69841: NEG
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: PUSH
69847: LD_INT 2
69849: NEG
69850: PUSH
69851: LD_INT 1
69853: NEG
69854: PUSH
69855: EMPTY
69856: LIST
69857: LIST
69858: PUSH
69859: LD_INT 2
69861: NEG
69862: PUSH
69863: LD_INT 2
69865: NEG
69866: PUSH
69867: EMPTY
69868: LIST
69869: LIST
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: LIST
69875: ST_TO_ADDR
// end ; 2 :
69876: GO 73142
69878: LD_INT 2
69880: DOUBLE
69881: EQUAL
69882: IFTRUE 69886
69884: GO 73141
69886: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69887: LD_ADDR_VAR 0 29
69891: PUSH
69892: LD_INT 4
69894: PUSH
69895: LD_INT 0
69897: PUSH
69898: EMPTY
69899: LIST
69900: LIST
69901: PUSH
69902: LD_INT 4
69904: PUSH
69905: LD_INT 1
69907: NEG
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: PUSH
69913: LD_INT 5
69915: PUSH
69916: LD_INT 0
69918: PUSH
69919: EMPTY
69920: LIST
69921: LIST
69922: PUSH
69923: LD_INT 5
69925: PUSH
69926: LD_INT 1
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 4
69935: PUSH
69936: LD_INT 1
69938: PUSH
69939: EMPTY
69940: LIST
69941: LIST
69942: PUSH
69943: LD_INT 3
69945: PUSH
69946: LD_INT 0
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PUSH
69953: LD_INT 3
69955: PUSH
69956: LD_INT 1
69958: NEG
69959: PUSH
69960: EMPTY
69961: LIST
69962: LIST
69963: PUSH
69964: LD_INT 3
69966: PUSH
69967: LD_INT 2
69969: NEG
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_INT 5
69977: PUSH
69978: LD_INT 2
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: LD_INT 3
69987: PUSH
69988: LD_INT 3
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: PUSH
69995: LD_INT 3
69997: PUSH
69998: LD_INT 2
70000: PUSH
70001: EMPTY
70002: LIST
70003: LIST
70004: PUSH
70005: LD_INT 4
70007: PUSH
70008: LD_INT 3
70010: PUSH
70011: EMPTY
70012: LIST
70013: LIST
70014: PUSH
70015: LD_INT 4
70017: PUSH
70018: LD_INT 4
70020: PUSH
70021: EMPTY
70022: LIST
70023: LIST
70024: PUSH
70025: LD_INT 3
70027: PUSH
70028: LD_INT 4
70030: PUSH
70031: EMPTY
70032: LIST
70033: LIST
70034: PUSH
70035: LD_INT 2
70037: PUSH
70038: LD_INT 3
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: PUSH
70045: LD_INT 2
70047: PUSH
70048: LD_INT 2
70050: PUSH
70051: EMPTY
70052: LIST
70053: LIST
70054: PUSH
70055: LD_INT 4
70057: PUSH
70058: LD_INT 2
70060: PUSH
70061: EMPTY
70062: LIST
70063: LIST
70064: PUSH
70065: LD_INT 2
70067: PUSH
70068: LD_INT 4
70070: PUSH
70071: EMPTY
70072: LIST
70073: LIST
70074: PUSH
70075: LD_INT 0
70077: PUSH
70078: LD_INT 4
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: PUSH
70085: LD_INT 0
70087: PUSH
70088: LD_INT 3
70090: PUSH
70091: EMPTY
70092: LIST
70093: LIST
70094: PUSH
70095: LD_INT 1
70097: PUSH
70098: LD_INT 4
70100: PUSH
70101: EMPTY
70102: LIST
70103: LIST
70104: PUSH
70105: LD_INT 1
70107: PUSH
70108: LD_INT 5
70110: PUSH
70111: EMPTY
70112: LIST
70113: LIST
70114: PUSH
70115: LD_INT 0
70117: PUSH
70118: LD_INT 5
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: PUSH
70125: LD_INT 1
70127: NEG
70128: PUSH
70129: LD_INT 4
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: PUSH
70136: LD_INT 1
70138: NEG
70139: PUSH
70140: LD_INT 3
70142: PUSH
70143: EMPTY
70144: LIST
70145: LIST
70146: PUSH
70147: LD_INT 2
70149: PUSH
70150: LD_INT 5
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: PUSH
70157: LD_INT 2
70159: NEG
70160: PUSH
70161: LD_INT 3
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: PUSH
70168: LD_INT 3
70170: NEG
70171: PUSH
70172: LD_INT 0
70174: PUSH
70175: EMPTY
70176: LIST
70177: LIST
70178: PUSH
70179: LD_INT 3
70181: NEG
70182: PUSH
70183: LD_INT 1
70185: NEG
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 2
70193: NEG
70194: PUSH
70195: LD_INT 0
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PUSH
70202: LD_INT 2
70204: NEG
70205: PUSH
70206: LD_INT 1
70208: PUSH
70209: EMPTY
70210: LIST
70211: LIST
70212: PUSH
70213: LD_INT 3
70215: NEG
70216: PUSH
70217: LD_INT 1
70219: PUSH
70220: EMPTY
70221: LIST
70222: LIST
70223: PUSH
70224: LD_INT 4
70226: NEG
70227: PUSH
70228: LD_INT 0
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: PUSH
70235: LD_INT 4
70237: NEG
70238: PUSH
70239: LD_INT 1
70241: NEG
70242: PUSH
70243: EMPTY
70244: LIST
70245: LIST
70246: PUSH
70247: LD_INT 4
70249: NEG
70250: PUSH
70251: LD_INT 2
70253: NEG
70254: PUSH
70255: EMPTY
70256: LIST
70257: LIST
70258: PUSH
70259: LD_INT 2
70261: NEG
70262: PUSH
70263: LD_INT 2
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PUSH
70270: LD_INT 4
70272: NEG
70273: PUSH
70274: LD_INT 4
70276: NEG
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: PUSH
70282: LD_INT 4
70284: NEG
70285: PUSH
70286: LD_INT 5
70288: NEG
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: PUSH
70294: LD_INT 3
70296: NEG
70297: PUSH
70298: LD_INT 4
70300: NEG
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: LD_INT 3
70308: NEG
70309: PUSH
70310: LD_INT 3
70312: NEG
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: PUSH
70318: LD_INT 4
70320: NEG
70321: PUSH
70322: LD_INT 3
70324: NEG
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 5
70332: NEG
70333: PUSH
70334: LD_INT 4
70336: NEG
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: LD_INT 5
70344: NEG
70345: PUSH
70346: LD_INT 5
70348: NEG
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: PUSH
70354: LD_INT 3
70356: NEG
70357: PUSH
70358: LD_INT 5
70360: NEG
70361: PUSH
70362: EMPTY
70363: LIST
70364: LIST
70365: PUSH
70366: LD_INT 5
70368: NEG
70369: PUSH
70370: LD_INT 3
70372: NEG
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: LIST
70382: LIST
70383: LIST
70384: LIST
70385: LIST
70386: LIST
70387: LIST
70388: LIST
70389: LIST
70390: LIST
70391: LIST
70392: LIST
70393: LIST
70394: LIST
70395: LIST
70396: LIST
70397: LIST
70398: LIST
70399: LIST
70400: LIST
70401: LIST
70402: LIST
70403: LIST
70404: LIST
70405: LIST
70406: LIST
70407: LIST
70408: LIST
70409: LIST
70410: LIST
70411: LIST
70412: LIST
70413: LIST
70414: LIST
70415: LIST
70416: LIST
70417: LIST
70418: LIST
70419: LIST
70420: LIST
70421: LIST
70422: LIST
70423: LIST
70424: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70425: LD_ADDR_VAR 0 30
70429: PUSH
70430: LD_INT 4
70432: PUSH
70433: LD_INT 4
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: LD_INT 4
70442: PUSH
70443: LD_INT 3
70445: PUSH
70446: EMPTY
70447: LIST
70448: LIST
70449: PUSH
70450: LD_INT 5
70452: PUSH
70453: LD_INT 4
70455: PUSH
70456: EMPTY
70457: LIST
70458: LIST
70459: PUSH
70460: LD_INT 5
70462: PUSH
70463: LD_INT 5
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: PUSH
70470: LD_INT 4
70472: PUSH
70473: LD_INT 5
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: PUSH
70480: LD_INT 3
70482: PUSH
70483: LD_INT 4
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: PUSH
70490: LD_INT 3
70492: PUSH
70493: LD_INT 3
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: PUSH
70500: LD_INT 5
70502: PUSH
70503: LD_INT 3
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: LD_INT 3
70512: PUSH
70513: LD_INT 5
70515: PUSH
70516: EMPTY
70517: LIST
70518: LIST
70519: PUSH
70520: LD_INT 0
70522: PUSH
70523: LD_INT 3
70525: PUSH
70526: EMPTY
70527: LIST
70528: LIST
70529: PUSH
70530: LD_INT 0
70532: PUSH
70533: LD_INT 2
70535: PUSH
70536: EMPTY
70537: LIST
70538: LIST
70539: PUSH
70540: LD_INT 1
70542: PUSH
70543: LD_INT 3
70545: PUSH
70546: EMPTY
70547: LIST
70548: LIST
70549: PUSH
70550: LD_INT 1
70552: PUSH
70553: LD_INT 4
70555: PUSH
70556: EMPTY
70557: LIST
70558: LIST
70559: PUSH
70560: LD_INT 0
70562: PUSH
70563: LD_INT 4
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: PUSH
70570: LD_INT 1
70572: NEG
70573: PUSH
70574: LD_INT 3
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: PUSH
70581: LD_INT 1
70583: NEG
70584: PUSH
70585: LD_INT 2
70587: PUSH
70588: EMPTY
70589: LIST
70590: LIST
70591: PUSH
70592: LD_INT 2
70594: PUSH
70595: LD_INT 4
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: PUSH
70602: LD_INT 2
70604: NEG
70605: PUSH
70606: LD_INT 2
70608: PUSH
70609: EMPTY
70610: LIST
70611: LIST
70612: PUSH
70613: LD_INT 4
70615: NEG
70616: PUSH
70617: LD_INT 0
70619: PUSH
70620: EMPTY
70621: LIST
70622: LIST
70623: PUSH
70624: LD_INT 4
70626: NEG
70627: PUSH
70628: LD_INT 1
70630: NEG
70631: PUSH
70632: EMPTY
70633: LIST
70634: LIST
70635: PUSH
70636: LD_INT 3
70638: NEG
70639: PUSH
70640: LD_INT 0
70642: PUSH
70643: EMPTY
70644: LIST
70645: LIST
70646: PUSH
70647: LD_INT 3
70649: NEG
70650: PUSH
70651: LD_INT 1
70653: PUSH
70654: EMPTY
70655: LIST
70656: LIST
70657: PUSH
70658: LD_INT 4
70660: NEG
70661: PUSH
70662: LD_INT 1
70664: PUSH
70665: EMPTY
70666: LIST
70667: LIST
70668: PUSH
70669: LD_INT 5
70671: NEG
70672: PUSH
70673: LD_INT 0
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: PUSH
70680: LD_INT 5
70682: NEG
70683: PUSH
70684: LD_INT 1
70686: NEG
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: PUSH
70692: LD_INT 5
70694: NEG
70695: PUSH
70696: LD_INT 2
70698: NEG
70699: PUSH
70700: EMPTY
70701: LIST
70702: LIST
70703: PUSH
70704: LD_INT 3
70706: NEG
70707: PUSH
70708: LD_INT 2
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: PUSH
70715: LD_INT 3
70717: NEG
70718: PUSH
70719: LD_INT 3
70721: NEG
70722: PUSH
70723: EMPTY
70724: LIST
70725: LIST
70726: PUSH
70727: LD_INT 3
70729: NEG
70730: PUSH
70731: LD_INT 4
70733: NEG
70734: PUSH
70735: EMPTY
70736: LIST
70737: LIST
70738: PUSH
70739: LD_INT 2
70741: NEG
70742: PUSH
70743: LD_INT 3
70745: NEG
70746: PUSH
70747: EMPTY
70748: LIST
70749: LIST
70750: PUSH
70751: LD_INT 2
70753: NEG
70754: PUSH
70755: LD_INT 2
70757: NEG
70758: PUSH
70759: EMPTY
70760: LIST
70761: LIST
70762: PUSH
70763: LD_INT 3
70765: NEG
70766: PUSH
70767: LD_INT 2
70769: NEG
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: PUSH
70775: LD_INT 4
70777: NEG
70778: PUSH
70779: LD_INT 3
70781: NEG
70782: PUSH
70783: EMPTY
70784: LIST
70785: LIST
70786: PUSH
70787: LD_INT 4
70789: NEG
70790: PUSH
70791: LD_INT 4
70793: NEG
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 2
70801: NEG
70802: PUSH
70803: LD_INT 4
70805: NEG
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: PUSH
70811: LD_INT 4
70813: NEG
70814: PUSH
70815: LD_INT 2
70817: NEG
70818: PUSH
70819: EMPTY
70820: LIST
70821: LIST
70822: PUSH
70823: LD_INT 0
70825: PUSH
70826: LD_INT 4
70828: NEG
70829: PUSH
70830: EMPTY
70831: LIST
70832: LIST
70833: PUSH
70834: LD_INT 0
70836: PUSH
70837: LD_INT 5
70839: NEG
70840: PUSH
70841: EMPTY
70842: LIST
70843: LIST
70844: PUSH
70845: LD_INT 1
70847: PUSH
70848: LD_INT 4
70850: NEG
70851: PUSH
70852: EMPTY
70853: LIST
70854: LIST
70855: PUSH
70856: LD_INT 1
70858: PUSH
70859: LD_INT 3
70861: NEG
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: PUSH
70867: LD_INT 0
70869: PUSH
70870: LD_INT 3
70872: NEG
70873: PUSH
70874: EMPTY
70875: LIST
70876: LIST
70877: PUSH
70878: LD_INT 1
70880: NEG
70881: PUSH
70882: LD_INT 4
70884: NEG
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: PUSH
70890: LD_INT 1
70892: NEG
70893: PUSH
70894: LD_INT 5
70896: NEG
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: PUSH
70902: LD_INT 2
70904: PUSH
70905: LD_INT 3
70907: NEG
70908: PUSH
70909: EMPTY
70910: LIST
70911: LIST
70912: PUSH
70913: LD_INT 2
70915: NEG
70916: PUSH
70917: LD_INT 5
70919: NEG
70920: PUSH
70921: EMPTY
70922: LIST
70923: LIST
70924: PUSH
70925: EMPTY
70926: LIST
70927: LIST
70928: LIST
70929: LIST
70930: LIST
70931: LIST
70932: LIST
70933: LIST
70934: LIST
70935: LIST
70936: LIST
70937: LIST
70938: LIST
70939: LIST
70940: LIST
70941: LIST
70942: LIST
70943: LIST
70944: LIST
70945: LIST
70946: LIST
70947: LIST
70948: LIST
70949: LIST
70950: LIST
70951: LIST
70952: LIST
70953: LIST
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: LIST
70960: LIST
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: LIST
70967: LIST
70968: LIST
70969: LIST
70970: LIST
70971: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70972: LD_ADDR_VAR 0 31
70976: PUSH
70977: LD_INT 0
70979: PUSH
70980: LD_INT 4
70982: PUSH
70983: EMPTY
70984: LIST
70985: LIST
70986: PUSH
70987: LD_INT 0
70989: PUSH
70990: LD_INT 3
70992: PUSH
70993: EMPTY
70994: LIST
70995: LIST
70996: PUSH
70997: LD_INT 1
70999: PUSH
71000: LD_INT 4
71002: PUSH
71003: EMPTY
71004: LIST
71005: LIST
71006: PUSH
71007: LD_INT 1
71009: PUSH
71010: LD_INT 5
71012: PUSH
71013: EMPTY
71014: LIST
71015: LIST
71016: PUSH
71017: LD_INT 0
71019: PUSH
71020: LD_INT 5
71022: PUSH
71023: EMPTY
71024: LIST
71025: LIST
71026: PUSH
71027: LD_INT 1
71029: NEG
71030: PUSH
71031: LD_INT 4
71033: PUSH
71034: EMPTY
71035: LIST
71036: LIST
71037: PUSH
71038: LD_INT 1
71040: NEG
71041: PUSH
71042: LD_INT 3
71044: PUSH
71045: EMPTY
71046: LIST
71047: LIST
71048: PUSH
71049: LD_INT 2
71051: PUSH
71052: LD_INT 5
71054: PUSH
71055: EMPTY
71056: LIST
71057: LIST
71058: PUSH
71059: LD_INT 2
71061: NEG
71062: PUSH
71063: LD_INT 3
71065: PUSH
71066: EMPTY
71067: LIST
71068: LIST
71069: PUSH
71070: LD_INT 3
71072: NEG
71073: PUSH
71074: LD_INT 0
71076: PUSH
71077: EMPTY
71078: LIST
71079: LIST
71080: PUSH
71081: LD_INT 3
71083: NEG
71084: PUSH
71085: LD_INT 1
71087: NEG
71088: PUSH
71089: EMPTY
71090: LIST
71091: LIST
71092: PUSH
71093: LD_INT 2
71095: NEG
71096: PUSH
71097: LD_INT 0
71099: PUSH
71100: EMPTY
71101: LIST
71102: LIST
71103: PUSH
71104: LD_INT 2
71106: NEG
71107: PUSH
71108: LD_INT 1
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: PUSH
71115: LD_INT 3
71117: NEG
71118: PUSH
71119: LD_INT 1
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: PUSH
71126: LD_INT 4
71128: NEG
71129: PUSH
71130: LD_INT 0
71132: PUSH
71133: EMPTY
71134: LIST
71135: LIST
71136: PUSH
71137: LD_INT 4
71139: NEG
71140: PUSH
71141: LD_INT 1
71143: NEG
71144: PUSH
71145: EMPTY
71146: LIST
71147: LIST
71148: PUSH
71149: LD_INT 4
71151: NEG
71152: PUSH
71153: LD_INT 2
71155: NEG
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: PUSH
71161: LD_INT 2
71163: NEG
71164: PUSH
71165: LD_INT 2
71167: PUSH
71168: EMPTY
71169: LIST
71170: LIST
71171: PUSH
71172: LD_INT 4
71174: NEG
71175: PUSH
71176: LD_INT 4
71178: NEG
71179: PUSH
71180: EMPTY
71181: LIST
71182: LIST
71183: PUSH
71184: LD_INT 4
71186: NEG
71187: PUSH
71188: LD_INT 5
71190: NEG
71191: PUSH
71192: EMPTY
71193: LIST
71194: LIST
71195: PUSH
71196: LD_INT 3
71198: NEG
71199: PUSH
71200: LD_INT 4
71202: NEG
71203: PUSH
71204: EMPTY
71205: LIST
71206: LIST
71207: PUSH
71208: LD_INT 3
71210: NEG
71211: PUSH
71212: LD_INT 3
71214: NEG
71215: PUSH
71216: EMPTY
71217: LIST
71218: LIST
71219: PUSH
71220: LD_INT 4
71222: NEG
71223: PUSH
71224: LD_INT 3
71226: NEG
71227: PUSH
71228: EMPTY
71229: LIST
71230: LIST
71231: PUSH
71232: LD_INT 5
71234: NEG
71235: PUSH
71236: LD_INT 4
71238: NEG
71239: PUSH
71240: EMPTY
71241: LIST
71242: LIST
71243: PUSH
71244: LD_INT 5
71246: NEG
71247: PUSH
71248: LD_INT 5
71250: NEG
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PUSH
71256: LD_INT 3
71258: NEG
71259: PUSH
71260: LD_INT 5
71262: NEG
71263: PUSH
71264: EMPTY
71265: LIST
71266: LIST
71267: PUSH
71268: LD_INT 5
71270: NEG
71271: PUSH
71272: LD_INT 3
71274: NEG
71275: PUSH
71276: EMPTY
71277: LIST
71278: LIST
71279: PUSH
71280: LD_INT 0
71282: PUSH
71283: LD_INT 3
71285: NEG
71286: PUSH
71287: EMPTY
71288: LIST
71289: LIST
71290: PUSH
71291: LD_INT 0
71293: PUSH
71294: LD_INT 4
71296: NEG
71297: PUSH
71298: EMPTY
71299: LIST
71300: LIST
71301: PUSH
71302: LD_INT 1
71304: PUSH
71305: LD_INT 3
71307: NEG
71308: PUSH
71309: EMPTY
71310: LIST
71311: LIST
71312: PUSH
71313: LD_INT 1
71315: PUSH
71316: LD_INT 2
71318: NEG
71319: PUSH
71320: EMPTY
71321: LIST
71322: LIST
71323: PUSH
71324: LD_INT 0
71326: PUSH
71327: LD_INT 2
71329: NEG
71330: PUSH
71331: EMPTY
71332: LIST
71333: LIST
71334: PUSH
71335: LD_INT 1
71337: NEG
71338: PUSH
71339: LD_INT 3
71341: NEG
71342: PUSH
71343: EMPTY
71344: LIST
71345: LIST
71346: PUSH
71347: LD_INT 1
71349: NEG
71350: PUSH
71351: LD_INT 4
71353: NEG
71354: PUSH
71355: EMPTY
71356: LIST
71357: LIST
71358: PUSH
71359: LD_INT 2
71361: PUSH
71362: LD_INT 2
71364: NEG
71365: PUSH
71366: EMPTY
71367: LIST
71368: LIST
71369: PUSH
71370: LD_INT 2
71372: NEG
71373: PUSH
71374: LD_INT 4
71376: NEG
71377: PUSH
71378: EMPTY
71379: LIST
71380: LIST
71381: PUSH
71382: LD_INT 4
71384: PUSH
71385: LD_INT 0
71387: PUSH
71388: EMPTY
71389: LIST
71390: LIST
71391: PUSH
71392: LD_INT 4
71394: PUSH
71395: LD_INT 1
71397: NEG
71398: PUSH
71399: EMPTY
71400: LIST
71401: LIST
71402: PUSH
71403: LD_INT 5
71405: PUSH
71406: LD_INT 0
71408: PUSH
71409: EMPTY
71410: LIST
71411: LIST
71412: PUSH
71413: LD_INT 5
71415: PUSH
71416: LD_INT 1
71418: PUSH
71419: EMPTY
71420: LIST
71421: LIST
71422: PUSH
71423: LD_INT 4
71425: PUSH
71426: LD_INT 1
71428: PUSH
71429: EMPTY
71430: LIST
71431: LIST
71432: PUSH
71433: LD_INT 3
71435: PUSH
71436: LD_INT 0
71438: PUSH
71439: EMPTY
71440: LIST
71441: LIST
71442: PUSH
71443: LD_INT 3
71445: PUSH
71446: LD_INT 1
71448: NEG
71449: PUSH
71450: EMPTY
71451: LIST
71452: LIST
71453: PUSH
71454: LD_INT 3
71456: PUSH
71457: LD_INT 2
71459: NEG
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PUSH
71465: LD_INT 5
71467: PUSH
71468: LD_INT 2
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: PUSH
71475: EMPTY
71476: LIST
71477: LIST
71478: LIST
71479: LIST
71480: LIST
71481: LIST
71482: LIST
71483: LIST
71484: LIST
71485: LIST
71486: LIST
71487: LIST
71488: LIST
71489: LIST
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: LIST
71495: LIST
71496: LIST
71497: LIST
71498: LIST
71499: LIST
71500: LIST
71501: LIST
71502: LIST
71503: LIST
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: LIST
71516: LIST
71517: LIST
71518: LIST
71519: LIST
71520: LIST
71521: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71522: LD_ADDR_VAR 0 32
71526: PUSH
71527: LD_INT 4
71529: NEG
71530: PUSH
71531: LD_INT 0
71533: PUSH
71534: EMPTY
71535: LIST
71536: LIST
71537: PUSH
71538: LD_INT 4
71540: NEG
71541: PUSH
71542: LD_INT 1
71544: NEG
71545: PUSH
71546: EMPTY
71547: LIST
71548: LIST
71549: PUSH
71550: LD_INT 3
71552: NEG
71553: PUSH
71554: LD_INT 0
71556: PUSH
71557: EMPTY
71558: LIST
71559: LIST
71560: PUSH
71561: LD_INT 3
71563: NEG
71564: PUSH
71565: LD_INT 1
71567: PUSH
71568: EMPTY
71569: LIST
71570: LIST
71571: PUSH
71572: LD_INT 4
71574: NEG
71575: PUSH
71576: LD_INT 1
71578: PUSH
71579: EMPTY
71580: LIST
71581: LIST
71582: PUSH
71583: LD_INT 5
71585: NEG
71586: PUSH
71587: LD_INT 0
71589: PUSH
71590: EMPTY
71591: LIST
71592: LIST
71593: PUSH
71594: LD_INT 5
71596: NEG
71597: PUSH
71598: LD_INT 1
71600: NEG
71601: PUSH
71602: EMPTY
71603: LIST
71604: LIST
71605: PUSH
71606: LD_INT 5
71608: NEG
71609: PUSH
71610: LD_INT 2
71612: NEG
71613: PUSH
71614: EMPTY
71615: LIST
71616: LIST
71617: PUSH
71618: LD_INT 3
71620: NEG
71621: PUSH
71622: LD_INT 2
71624: PUSH
71625: EMPTY
71626: LIST
71627: LIST
71628: PUSH
71629: LD_INT 3
71631: NEG
71632: PUSH
71633: LD_INT 3
71635: NEG
71636: PUSH
71637: EMPTY
71638: LIST
71639: LIST
71640: PUSH
71641: LD_INT 3
71643: NEG
71644: PUSH
71645: LD_INT 4
71647: NEG
71648: PUSH
71649: EMPTY
71650: LIST
71651: LIST
71652: PUSH
71653: LD_INT 2
71655: NEG
71656: PUSH
71657: LD_INT 3
71659: NEG
71660: PUSH
71661: EMPTY
71662: LIST
71663: LIST
71664: PUSH
71665: LD_INT 2
71667: NEG
71668: PUSH
71669: LD_INT 2
71671: NEG
71672: PUSH
71673: EMPTY
71674: LIST
71675: LIST
71676: PUSH
71677: LD_INT 3
71679: NEG
71680: PUSH
71681: LD_INT 2
71683: NEG
71684: PUSH
71685: EMPTY
71686: LIST
71687: LIST
71688: PUSH
71689: LD_INT 4
71691: NEG
71692: PUSH
71693: LD_INT 3
71695: NEG
71696: PUSH
71697: EMPTY
71698: LIST
71699: LIST
71700: PUSH
71701: LD_INT 4
71703: NEG
71704: PUSH
71705: LD_INT 4
71707: NEG
71708: PUSH
71709: EMPTY
71710: LIST
71711: LIST
71712: PUSH
71713: LD_INT 2
71715: NEG
71716: PUSH
71717: LD_INT 4
71719: NEG
71720: PUSH
71721: EMPTY
71722: LIST
71723: LIST
71724: PUSH
71725: LD_INT 4
71727: NEG
71728: PUSH
71729: LD_INT 2
71731: NEG
71732: PUSH
71733: EMPTY
71734: LIST
71735: LIST
71736: PUSH
71737: LD_INT 0
71739: PUSH
71740: LD_INT 4
71742: NEG
71743: PUSH
71744: EMPTY
71745: LIST
71746: LIST
71747: PUSH
71748: LD_INT 0
71750: PUSH
71751: LD_INT 5
71753: NEG
71754: PUSH
71755: EMPTY
71756: LIST
71757: LIST
71758: PUSH
71759: LD_INT 1
71761: PUSH
71762: LD_INT 4
71764: NEG
71765: PUSH
71766: EMPTY
71767: LIST
71768: LIST
71769: PUSH
71770: LD_INT 1
71772: PUSH
71773: LD_INT 3
71775: NEG
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: PUSH
71781: LD_INT 0
71783: PUSH
71784: LD_INT 3
71786: NEG
71787: PUSH
71788: EMPTY
71789: LIST
71790: LIST
71791: PUSH
71792: LD_INT 1
71794: NEG
71795: PUSH
71796: LD_INT 4
71798: NEG
71799: PUSH
71800: EMPTY
71801: LIST
71802: LIST
71803: PUSH
71804: LD_INT 1
71806: NEG
71807: PUSH
71808: LD_INT 5
71810: NEG
71811: PUSH
71812: EMPTY
71813: LIST
71814: LIST
71815: PUSH
71816: LD_INT 2
71818: PUSH
71819: LD_INT 3
71821: NEG
71822: PUSH
71823: EMPTY
71824: LIST
71825: LIST
71826: PUSH
71827: LD_INT 2
71829: NEG
71830: PUSH
71831: LD_INT 5
71833: NEG
71834: PUSH
71835: EMPTY
71836: LIST
71837: LIST
71838: PUSH
71839: LD_INT 3
71841: PUSH
71842: LD_INT 0
71844: PUSH
71845: EMPTY
71846: LIST
71847: LIST
71848: PUSH
71849: LD_INT 3
71851: PUSH
71852: LD_INT 1
71854: NEG
71855: PUSH
71856: EMPTY
71857: LIST
71858: LIST
71859: PUSH
71860: LD_INT 4
71862: PUSH
71863: LD_INT 0
71865: PUSH
71866: EMPTY
71867: LIST
71868: LIST
71869: PUSH
71870: LD_INT 4
71872: PUSH
71873: LD_INT 1
71875: PUSH
71876: EMPTY
71877: LIST
71878: LIST
71879: PUSH
71880: LD_INT 3
71882: PUSH
71883: LD_INT 1
71885: PUSH
71886: EMPTY
71887: LIST
71888: LIST
71889: PUSH
71890: LD_INT 2
71892: PUSH
71893: LD_INT 0
71895: PUSH
71896: EMPTY
71897: LIST
71898: LIST
71899: PUSH
71900: LD_INT 2
71902: PUSH
71903: LD_INT 1
71905: NEG
71906: PUSH
71907: EMPTY
71908: LIST
71909: LIST
71910: PUSH
71911: LD_INT 2
71913: PUSH
71914: LD_INT 2
71916: NEG
71917: PUSH
71918: EMPTY
71919: LIST
71920: LIST
71921: PUSH
71922: LD_INT 4
71924: PUSH
71925: LD_INT 2
71927: PUSH
71928: EMPTY
71929: LIST
71930: LIST
71931: PUSH
71932: LD_INT 4
71934: PUSH
71935: LD_INT 4
71937: PUSH
71938: EMPTY
71939: LIST
71940: LIST
71941: PUSH
71942: LD_INT 4
71944: PUSH
71945: LD_INT 3
71947: PUSH
71948: EMPTY
71949: LIST
71950: LIST
71951: PUSH
71952: LD_INT 5
71954: PUSH
71955: LD_INT 4
71957: PUSH
71958: EMPTY
71959: LIST
71960: LIST
71961: PUSH
71962: LD_INT 5
71964: PUSH
71965: LD_INT 5
71967: PUSH
71968: EMPTY
71969: LIST
71970: LIST
71971: PUSH
71972: LD_INT 4
71974: PUSH
71975: LD_INT 5
71977: PUSH
71978: EMPTY
71979: LIST
71980: LIST
71981: PUSH
71982: LD_INT 3
71984: PUSH
71985: LD_INT 4
71987: PUSH
71988: EMPTY
71989: LIST
71990: LIST
71991: PUSH
71992: LD_INT 3
71994: PUSH
71995: LD_INT 3
71997: PUSH
71998: EMPTY
71999: LIST
72000: LIST
72001: PUSH
72002: LD_INT 5
72004: PUSH
72005: LD_INT 3
72007: PUSH
72008: EMPTY
72009: LIST
72010: LIST
72011: PUSH
72012: LD_INT 3
72014: PUSH
72015: LD_INT 5
72017: PUSH
72018: EMPTY
72019: LIST
72020: LIST
72021: PUSH
72022: EMPTY
72023: LIST
72024: LIST
72025: LIST
72026: LIST
72027: LIST
72028: LIST
72029: LIST
72030: LIST
72031: LIST
72032: LIST
72033: LIST
72034: LIST
72035: LIST
72036: LIST
72037: LIST
72038: LIST
72039: LIST
72040: LIST
72041: LIST
72042: LIST
72043: LIST
72044: LIST
72045: LIST
72046: LIST
72047: LIST
72048: LIST
72049: LIST
72050: LIST
72051: LIST
72052: LIST
72053: LIST
72054: LIST
72055: LIST
72056: LIST
72057: LIST
72058: LIST
72059: LIST
72060: LIST
72061: LIST
72062: LIST
72063: LIST
72064: LIST
72065: LIST
72066: LIST
72067: LIST
72068: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
72069: LD_ADDR_VAR 0 33
72073: PUSH
72074: LD_INT 4
72076: NEG
72077: PUSH
72078: LD_INT 4
72080: NEG
72081: PUSH
72082: EMPTY
72083: LIST
72084: LIST
72085: PUSH
72086: LD_INT 4
72088: NEG
72089: PUSH
72090: LD_INT 5
72092: NEG
72093: PUSH
72094: EMPTY
72095: LIST
72096: LIST
72097: PUSH
72098: LD_INT 3
72100: NEG
72101: PUSH
72102: LD_INT 4
72104: NEG
72105: PUSH
72106: EMPTY
72107: LIST
72108: LIST
72109: PUSH
72110: LD_INT 3
72112: NEG
72113: PUSH
72114: LD_INT 3
72116: NEG
72117: PUSH
72118: EMPTY
72119: LIST
72120: LIST
72121: PUSH
72122: LD_INT 4
72124: NEG
72125: PUSH
72126: LD_INT 3
72128: NEG
72129: PUSH
72130: EMPTY
72131: LIST
72132: LIST
72133: PUSH
72134: LD_INT 5
72136: NEG
72137: PUSH
72138: LD_INT 4
72140: NEG
72141: PUSH
72142: EMPTY
72143: LIST
72144: LIST
72145: PUSH
72146: LD_INT 5
72148: NEG
72149: PUSH
72150: LD_INT 5
72152: NEG
72153: PUSH
72154: EMPTY
72155: LIST
72156: LIST
72157: PUSH
72158: LD_INT 3
72160: NEG
72161: PUSH
72162: LD_INT 5
72164: NEG
72165: PUSH
72166: EMPTY
72167: LIST
72168: LIST
72169: PUSH
72170: LD_INT 5
72172: NEG
72173: PUSH
72174: LD_INT 3
72176: NEG
72177: PUSH
72178: EMPTY
72179: LIST
72180: LIST
72181: PUSH
72182: LD_INT 0
72184: PUSH
72185: LD_INT 3
72187: NEG
72188: PUSH
72189: EMPTY
72190: LIST
72191: LIST
72192: PUSH
72193: LD_INT 0
72195: PUSH
72196: LD_INT 4
72198: NEG
72199: PUSH
72200: EMPTY
72201: LIST
72202: LIST
72203: PUSH
72204: LD_INT 1
72206: PUSH
72207: LD_INT 3
72209: NEG
72210: PUSH
72211: EMPTY
72212: LIST
72213: LIST
72214: PUSH
72215: LD_INT 1
72217: PUSH
72218: LD_INT 2
72220: NEG
72221: PUSH
72222: EMPTY
72223: LIST
72224: LIST
72225: PUSH
72226: LD_INT 0
72228: PUSH
72229: LD_INT 2
72231: NEG
72232: PUSH
72233: EMPTY
72234: LIST
72235: LIST
72236: PUSH
72237: LD_INT 1
72239: NEG
72240: PUSH
72241: LD_INT 3
72243: NEG
72244: PUSH
72245: EMPTY
72246: LIST
72247: LIST
72248: PUSH
72249: LD_INT 1
72251: NEG
72252: PUSH
72253: LD_INT 4
72255: NEG
72256: PUSH
72257: EMPTY
72258: LIST
72259: LIST
72260: PUSH
72261: LD_INT 2
72263: PUSH
72264: LD_INT 2
72266: NEG
72267: PUSH
72268: EMPTY
72269: LIST
72270: LIST
72271: PUSH
72272: LD_INT 2
72274: NEG
72275: PUSH
72276: LD_INT 4
72278: NEG
72279: PUSH
72280: EMPTY
72281: LIST
72282: LIST
72283: PUSH
72284: LD_INT 4
72286: PUSH
72287: LD_INT 0
72289: PUSH
72290: EMPTY
72291: LIST
72292: LIST
72293: PUSH
72294: LD_INT 4
72296: PUSH
72297: LD_INT 1
72299: NEG
72300: PUSH
72301: EMPTY
72302: LIST
72303: LIST
72304: PUSH
72305: LD_INT 5
72307: PUSH
72308: LD_INT 0
72310: PUSH
72311: EMPTY
72312: LIST
72313: LIST
72314: PUSH
72315: LD_INT 5
72317: PUSH
72318: LD_INT 1
72320: PUSH
72321: EMPTY
72322: LIST
72323: LIST
72324: PUSH
72325: LD_INT 4
72327: PUSH
72328: LD_INT 1
72330: PUSH
72331: EMPTY
72332: LIST
72333: LIST
72334: PUSH
72335: LD_INT 3
72337: PUSH
72338: LD_INT 0
72340: PUSH
72341: EMPTY
72342: LIST
72343: LIST
72344: PUSH
72345: LD_INT 3
72347: PUSH
72348: LD_INT 1
72350: NEG
72351: PUSH
72352: EMPTY
72353: LIST
72354: LIST
72355: PUSH
72356: LD_INT 3
72358: PUSH
72359: LD_INT 2
72361: NEG
72362: PUSH
72363: EMPTY
72364: LIST
72365: LIST
72366: PUSH
72367: LD_INT 5
72369: PUSH
72370: LD_INT 2
72372: PUSH
72373: EMPTY
72374: LIST
72375: LIST
72376: PUSH
72377: LD_INT 3
72379: PUSH
72380: LD_INT 3
72382: PUSH
72383: EMPTY
72384: LIST
72385: LIST
72386: PUSH
72387: LD_INT 3
72389: PUSH
72390: LD_INT 2
72392: PUSH
72393: EMPTY
72394: LIST
72395: LIST
72396: PUSH
72397: LD_INT 4
72399: PUSH
72400: LD_INT 3
72402: PUSH
72403: EMPTY
72404: LIST
72405: LIST
72406: PUSH
72407: LD_INT 4
72409: PUSH
72410: LD_INT 4
72412: PUSH
72413: EMPTY
72414: LIST
72415: LIST
72416: PUSH
72417: LD_INT 3
72419: PUSH
72420: LD_INT 4
72422: PUSH
72423: EMPTY
72424: LIST
72425: LIST
72426: PUSH
72427: LD_INT 2
72429: PUSH
72430: LD_INT 3
72432: PUSH
72433: EMPTY
72434: LIST
72435: LIST
72436: PUSH
72437: LD_INT 2
72439: PUSH
72440: LD_INT 2
72442: PUSH
72443: EMPTY
72444: LIST
72445: LIST
72446: PUSH
72447: LD_INT 4
72449: PUSH
72450: LD_INT 2
72452: PUSH
72453: EMPTY
72454: LIST
72455: LIST
72456: PUSH
72457: LD_INT 2
72459: PUSH
72460: LD_INT 4
72462: PUSH
72463: EMPTY
72464: LIST
72465: LIST
72466: PUSH
72467: LD_INT 0
72469: PUSH
72470: LD_INT 4
72472: PUSH
72473: EMPTY
72474: LIST
72475: LIST
72476: PUSH
72477: LD_INT 0
72479: PUSH
72480: LD_INT 3
72482: PUSH
72483: EMPTY
72484: LIST
72485: LIST
72486: PUSH
72487: LD_INT 1
72489: PUSH
72490: LD_INT 4
72492: PUSH
72493: EMPTY
72494: LIST
72495: LIST
72496: PUSH
72497: LD_INT 1
72499: PUSH
72500: LD_INT 5
72502: PUSH
72503: EMPTY
72504: LIST
72505: LIST
72506: PUSH
72507: LD_INT 0
72509: PUSH
72510: LD_INT 5
72512: PUSH
72513: EMPTY
72514: LIST
72515: LIST
72516: PUSH
72517: LD_INT 1
72519: NEG
72520: PUSH
72521: LD_INT 4
72523: PUSH
72524: EMPTY
72525: LIST
72526: LIST
72527: PUSH
72528: LD_INT 1
72530: NEG
72531: PUSH
72532: LD_INT 3
72534: PUSH
72535: EMPTY
72536: LIST
72537: LIST
72538: PUSH
72539: LD_INT 2
72541: PUSH
72542: LD_INT 5
72544: PUSH
72545: EMPTY
72546: LIST
72547: LIST
72548: PUSH
72549: LD_INT 2
72551: NEG
72552: PUSH
72553: LD_INT 3
72555: PUSH
72556: EMPTY
72557: LIST
72558: LIST
72559: PUSH
72560: EMPTY
72561: LIST
72562: LIST
72563: LIST
72564: LIST
72565: LIST
72566: LIST
72567: LIST
72568: LIST
72569: LIST
72570: LIST
72571: LIST
72572: LIST
72573: LIST
72574: LIST
72575: LIST
72576: LIST
72577: LIST
72578: LIST
72579: LIST
72580: LIST
72581: LIST
72582: LIST
72583: LIST
72584: LIST
72585: LIST
72586: LIST
72587: LIST
72588: LIST
72589: LIST
72590: LIST
72591: LIST
72592: LIST
72593: LIST
72594: LIST
72595: LIST
72596: LIST
72597: LIST
72598: LIST
72599: LIST
72600: LIST
72601: LIST
72602: LIST
72603: LIST
72604: LIST
72605: LIST
72606: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72607: LD_ADDR_VAR 0 34
72611: PUSH
72612: LD_INT 0
72614: PUSH
72615: LD_INT 4
72617: NEG
72618: PUSH
72619: EMPTY
72620: LIST
72621: LIST
72622: PUSH
72623: LD_INT 0
72625: PUSH
72626: LD_INT 5
72628: NEG
72629: PUSH
72630: EMPTY
72631: LIST
72632: LIST
72633: PUSH
72634: LD_INT 1
72636: PUSH
72637: LD_INT 4
72639: NEG
72640: PUSH
72641: EMPTY
72642: LIST
72643: LIST
72644: PUSH
72645: LD_INT 1
72647: PUSH
72648: LD_INT 3
72650: NEG
72651: PUSH
72652: EMPTY
72653: LIST
72654: LIST
72655: PUSH
72656: LD_INT 0
72658: PUSH
72659: LD_INT 3
72661: NEG
72662: PUSH
72663: EMPTY
72664: LIST
72665: LIST
72666: PUSH
72667: LD_INT 1
72669: NEG
72670: PUSH
72671: LD_INT 4
72673: NEG
72674: PUSH
72675: EMPTY
72676: LIST
72677: LIST
72678: PUSH
72679: LD_INT 1
72681: NEG
72682: PUSH
72683: LD_INT 5
72685: NEG
72686: PUSH
72687: EMPTY
72688: LIST
72689: LIST
72690: PUSH
72691: LD_INT 2
72693: PUSH
72694: LD_INT 3
72696: NEG
72697: PUSH
72698: EMPTY
72699: LIST
72700: LIST
72701: PUSH
72702: LD_INT 2
72704: NEG
72705: PUSH
72706: LD_INT 5
72708: NEG
72709: PUSH
72710: EMPTY
72711: LIST
72712: LIST
72713: PUSH
72714: LD_INT 3
72716: PUSH
72717: LD_INT 0
72719: PUSH
72720: EMPTY
72721: LIST
72722: LIST
72723: PUSH
72724: LD_INT 3
72726: PUSH
72727: LD_INT 1
72729: NEG
72730: PUSH
72731: EMPTY
72732: LIST
72733: LIST
72734: PUSH
72735: LD_INT 4
72737: PUSH
72738: LD_INT 0
72740: PUSH
72741: EMPTY
72742: LIST
72743: LIST
72744: PUSH
72745: LD_INT 4
72747: PUSH
72748: LD_INT 1
72750: PUSH
72751: EMPTY
72752: LIST
72753: LIST
72754: PUSH
72755: LD_INT 3
72757: PUSH
72758: LD_INT 1
72760: PUSH
72761: EMPTY
72762: LIST
72763: LIST
72764: PUSH
72765: LD_INT 2
72767: PUSH
72768: LD_INT 0
72770: PUSH
72771: EMPTY
72772: LIST
72773: LIST
72774: PUSH
72775: LD_INT 2
72777: PUSH
72778: LD_INT 1
72780: NEG
72781: PUSH
72782: EMPTY
72783: LIST
72784: LIST
72785: PUSH
72786: LD_INT 2
72788: PUSH
72789: LD_INT 2
72791: NEG
72792: PUSH
72793: EMPTY
72794: LIST
72795: LIST
72796: PUSH
72797: LD_INT 4
72799: PUSH
72800: LD_INT 2
72802: PUSH
72803: EMPTY
72804: LIST
72805: LIST
72806: PUSH
72807: LD_INT 4
72809: PUSH
72810: LD_INT 4
72812: PUSH
72813: EMPTY
72814: LIST
72815: LIST
72816: PUSH
72817: LD_INT 4
72819: PUSH
72820: LD_INT 3
72822: PUSH
72823: EMPTY
72824: LIST
72825: LIST
72826: PUSH
72827: LD_INT 5
72829: PUSH
72830: LD_INT 4
72832: PUSH
72833: EMPTY
72834: LIST
72835: LIST
72836: PUSH
72837: LD_INT 5
72839: PUSH
72840: LD_INT 5
72842: PUSH
72843: EMPTY
72844: LIST
72845: LIST
72846: PUSH
72847: LD_INT 4
72849: PUSH
72850: LD_INT 5
72852: PUSH
72853: EMPTY
72854: LIST
72855: LIST
72856: PUSH
72857: LD_INT 3
72859: PUSH
72860: LD_INT 4
72862: PUSH
72863: EMPTY
72864: LIST
72865: LIST
72866: PUSH
72867: LD_INT 3
72869: PUSH
72870: LD_INT 3
72872: PUSH
72873: EMPTY
72874: LIST
72875: LIST
72876: PUSH
72877: LD_INT 5
72879: PUSH
72880: LD_INT 3
72882: PUSH
72883: EMPTY
72884: LIST
72885: LIST
72886: PUSH
72887: LD_INT 3
72889: PUSH
72890: LD_INT 5
72892: PUSH
72893: EMPTY
72894: LIST
72895: LIST
72896: PUSH
72897: LD_INT 0
72899: PUSH
72900: LD_INT 3
72902: PUSH
72903: EMPTY
72904: LIST
72905: LIST
72906: PUSH
72907: LD_INT 0
72909: PUSH
72910: LD_INT 2
72912: PUSH
72913: EMPTY
72914: LIST
72915: LIST
72916: PUSH
72917: LD_INT 1
72919: PUSH
72920: LD_INT 3
72922: PUSH
72923: EMPTY
72924: LIST
72925: LIST
72926: PUSH
72927: LD_INT 1
72929: PUSH
72930: LD_INT 4
72932: PUSH
72933: EMPTY
72934: LIST
72935: LIST
72936: PUSH
72937: LD_INT 0
72939: PUSH
72940: LD_INT 4
72942: PUSH
72943: EMPTY
72944: LIST
72945: LIST
72946: PUSH
72947: LD_INT 1
72949: NEG
72950: PUSH
72951: LD_INT 3
72953: PUSH
72954: EMPTY
72955: LIST
72956: LIST
72957: PUSH
72958: LD_INT 1
72960: NEG
72961: PUSH
72962: LD_INT 2
72964: PUSH
72965: EMPTY
72966: LIST
72967: LIST
72968: PUSH
72969: LD_INT 2
72971: PUSH
72972: LD_INT 4
72974: PUSH
72975: EMPTY
72976: LIST
72977: LIST
72978: PUSH
72979: LD_INT 2
72981: NEG
72982: PUSH
72983: LD_INT 2
72985: PUSH
72986: EMPTY
72987: LIST
72988: LIST
72989: PUSH
72990: LD_INT 4
72992: NEG
72993: PUSH
72994: LD_INT 0
72996: PUSH
72997: EMPTY
72998: LIST
72999: LIST
73000: PUSH
73001: LD_INT 4
73003: NEG
73004: PUSH
73005: LD_INT 1
73007: NEG
73008: PUSH
73009: EMPTY
73010: LIST
73011: LIST
73012: PUSH
73013: LD_INT 3
73015: NEG
73016: PUSH
73017: LD_INT 0
73019: PUSH
73020: EMPTY
73021: LIST
73022: LIST
73023: PUSH
73024: LD_INT 3
73026: NEG
73027: PUSH
73028: LD_INT 1
73030: PUSH
73031: EMPTY
73032: LIST
73033: LIST
73034: PUSH
73035: LD_INT 4
73037: NEG
73038: PUSH
73039: LD_INT 1
73041: PUSH
73042: EMPTY
73043: LIST
73044: LIST
73045: PUSH
73046: LD_INT 5
73048: NEG
73049: PUSH
73050: LD_INT 0
73052: PUSH
73053: EMPTY
73054: LIST
73055: LIST
73056: PUSH
73057: LD_INT 5
73059: NEG
73060: PUSH
73061: LD_INT 1
73063: NEG
73064: PUSH
73065: EMPTY
73066: LIST
73067: LIST
73068: PUSH
73069: LD_INT 5
73071: NEG
73072: PUSH
73073: LD_INT 2
73075: NEG
73076: PUSH
73077: EMPTY
73078: LIST
73079: LIST
73080: PUSH
73081: LD_INT 3
73083: NEG
73084: PUSH
73085: LD_INT 2
73087: PUSH
73088: EMPTY
73089: LIST
73090: LIST
73091: PUSH
73092: EMPTY
73093: LIST
73094: LIST
73095: LIST
73096: LIST
73097: LIST
73098: LIST
73099: LIST
73100: LIST
73101: LIST
73102: LIST
73103: LIST
73104: LIST
73105: LIST
73106: LIST
73107: LIST
73108: LIST
73109: LIST
73110: LIST
73111: LIST
73112: LIST
73113: LIST
73114: LIST
73115: LIST
73116: LIST
73117: LIST
73118: LIST
73119: LIST
73120: LIST
73121: LIST
73122: LIST
73123: LIST
73124: LIST
73125: LIST
73126: LIST
73127: LIST
73128: LIST
73129: LIST
73130: LIST
73131: LIST
73132: LIST
73133: LIST
73134: LIST
73135: LIST
73136: LIST
73137: LIST
73138: ST_TO_ADDR
// end ; end ;
73139: GO 73142
73141: POP
// case btype of b_depot , b_warehouse :
73142: LD_VAR 0 1
73146: PUSH
73147: LD_INT 0
73149: DOUBLE
73150: EQUAL
73151: IFTRUE 73161
73153: LD_INT 1
73155: DOUBLE
73156: EQUAL
73157: IFTRUE 73161
73159: GO 73362
73161: POP
// case nation of nation_american :
73162: LD_VAR 0 5
73166: PUSH
73167: LD_INT 1
73169: DOUBLE
73170: EQUAL
73171: IFTRUE 73175
73173: GO 73231
73175: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73176: LD_ADDR_VAR 0 9
73180: PUSH
73181: LD_VAR 0 11
73185: PUSH
73186: LD_VAR 0 12
73190: PUSH
73191: LD_VAR 0 13
73195: PUSH
73196: LD_VAR 0 14
73200: PUSH
73201: LD_VAR 0 15
73205: PUSH
73206: LD_VAR 0 16
73210: PUSH
73211: EMPTY
73212: LIST
73213: LIST
73214: LIST
73215: LIST
73216: LIST
73217: LIST
73218: PUSH
73219: LD_VAR 0 4
73223: PUSH
73224: LD_INT 1
73226: PLUS
73227: ARRAY
73228: ST_TO_ADDR
73229: GO 73360
73231: LD_INT 2
73233: DOUBLE
73234: EQUAL
73235: IFTRUE 73239
73237: GO 73295
73239: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73240: LD_ADDR_VAR 0 9
73244: PUSH
73245: LD_VAR 0 17
73249: PUSH
73250: LD_VAR 0 18
73254: PUSH
73255: LD_VAR 0 19
73259: PUSH
73260: LD_VAR 0 20
73264: PUSH
73265: LD_VAR 0 21
73269: PUSH
73270: LD_VAR 0 22
73274: PUSH
73275: EMPTY
73276: LIST
73277: LIST
73278: LIST
73279: LIST
73280: LIST
73281: LIST
73282: PUSH
73283: LD_VAR 0 4
73287: PUSH
73288: LD_INT 1
73290: PLUS
73291: ARRAY
73292: ST_TO_ADDR
73293: GO 73360
73295: LD_INT 3
73297: DOUBLE
73298: EQUAL
73299: IFTRUE 73303
73301: GO 73359
73303: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73304: LD_ADDR_VAR 0 9
73308: PUSH
73309: LD_VAR 0 23
73313: PUSH
73314: LD_VAR 0 24
73318: PUSH
73319: LD_VAR 0 25
73323: PUSH
73324: LD_VAR 0 26
73328: PUSH
73329: LD_VAR 0 27
73333: PUSH
73334: LD_VAR 0 28
73338: PUSH
73339: EMPTY
73340: LIST
73341: LIST
73342: LIST
73343: LIST
73344: LIST
73345: LIST
73346: PUSH
73347: LD_VAR 0 4
73351: PUSH
73352: LD_INT 1
73354: PLUS
73355: ARRAY
73356: ST_TO_ADDR
73357: GO 73360
73359: POP
73360: GO 73915
73362: LD_INT 2
73364: DOUBLE
73365: EQUAL
73366: IFTRUE 73376
73368: LD_INT 3
73370: DOUBLE
73371: EQUAL
73372: IFTRUE 73376
73374: GO 73432
73376: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73377: LD_ADDR_VAR 0 9
73381: PUSH
73382: LD_VAR 0 29
73386: PUSH
73387: LD_VAR 0 30
73391: PUSH
73392: LD_VAR 0 31
73396: PUSH
73397: LD_VAR 0 32
73401: PUSH
73402: LD_VAR 0 33
73406: PUSH
73407: LD_VAR 0 34
73411: PUSH
73412: EMPTY
73413: LIST
73414: LIST
73415: LIST
73416: LIST
73417: LIST
73418: LIST
73419: PUSH
73420: LD_VAR 0 4
73424: PUSH
73425: LD_INT 1
73427: PLUS
73428: ARRAY
73429: ST_TO_ADDR
73430: GO 73915
73432: LD_INT 16
73434: DOUBLE
73435: EQUAL
73436: IFTRUE 73494
73438: LD_INT 17
73440: DOUBLE
73441: EQUAL
73442: IFTRUE 73494
73444: LD_INT 18
73446: DOUBLE
73447: EQUAL
73448: IFTRUE 73494
73450: LD_INT 19
73452: DOUBLE
73453: EQUAL
73454: IFTRUE 73494
73456: LD_INT 22
73458: DOUBLE
73459: EQUAL
73460: IFTRUE 73494
73462: LD_INT 20
73464: DOUBLE
73465: EQUAL
73466: IFTRUE 73494
73468: LD_INT 21
73470: DOUBLE
73471: EQUAL
73472: IFTRUE 73494
73474: LD_INT 23
73476: DOUBLE
73477: EQUAL
73478: IFTRUE 73494
73480: LD_INT 24
73482: DOUBLE
73483: EQUAL
73484: IFTRUE 73494
73486: LD_INT 25
73488: DOUBLE
73489: EQUAL
73490: IFTRUE 73494
73492: GO 73550
73494: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73495: LD_ADDR_VAR 0 9
73499: PUSH
73500: LD_VAR 0 35
73504: PUSH
73505: LD_VAR 0 36
73509: PUSH
73510: LD_VAR 0 37
73514: PUSH
73515: LD_VAR 0 38
73519: PUSH
73520: LD_VAR 0 39
73524: PUSH
73525: LD_VAR 0 40
73529: PUSH
73530: EMPTY
73531: LIST
73532: LIST
73533: LIST
73534: LIST
73535: LIST
73536: LIST
73537: PUSH
73538: LD_VAR 0 4
73542: PUSH
73543: LD_INT 1
73545: PLUS
73546: ARRAY
73547: ST_TO_ADDR
73548: GO 73915
73550: LD_INT 6
73552: DOUBLE
73553: EQUAL
73554: IFTRUE 73606
73556: LD_INT 7
73558: DOUBLE
73559: EQUAL
73560: IFTRUE 73606
73562: LD_INT 8
73564: DOUBLE
73565: EQUAL
73566: IFTRUE 73606
73568: LD_INT 13
73570: DOUBLE
73571: EQUAL
73572: IFTRUE 73606
73574: LD_INT 12
73576: DOUBLE
73577: EQUAL
73578: IFTRUE 73606
73580: LD_INT 15
73582: DOUBLE
73583: EQUAL
73584: IFTRUE 73606
73586: LD_INT 11
73588: DOUBLE
73589: EQUAL
73590: IFTRUE 73606
73592: LD_INT 14
73594: DOUBLE
73595: EQUAL
73596: IFTRUE 73606
73598: LD_INT 10
73600: DOUBLE
73601: EQUAL
73602: IFTRUE 73606
73604: GO 73662
73606: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73607: LD_ADDR_VAR 0 9
73611: PUSH
73612: LD_VAR 0 41
73616: PUSH
73617: LD_VAR 0 42
73621: PUSH
73622: LD_VAR 0 43
73626: PUSH
73627: LD_VAR 0 44
73631: PUSH
73632: LD_VAR 0 45
73636: PUSH
73637: LD_VAR 0 46
73641: PUSH
73642: EMPTY
73643: LIST
73644: LIST
73645: LIST
73646: LIST
73647: LIST
73648: LIST
73649: PUSH
73650: LD_VAR 0 4
73654: PUSH
73655: LD_INT 1
73657: PLUS
73658: ARRAY
73659: ST_TO_ADDR
73660: GO 73915
73662: LD_INT 36
73664: DOUBLE
73665: EQUAL
73666: IFTRUE 73670
73668: GO 73726
73670: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73671: LD_ADDR_VAR 0 9
73675: PUSH
73676: LD_VAR 0 47
73680: PUSH
73681: LD_VAR 0 48
73685: PUSH
73686: LD_VAR 0 49
73690: PUSH
73691: LD_VAR 0 50
73695: PUSH
73696: LD_VAR 0 51
73700: PUSH
73701: LD_VAR 0 52
73705: PUSH
73706: EMPTY
73707: LIST
73708: LIST
73709: LIST
73710: LIST
73711: LIST
73712: LIST
73713: PUSH
73714: LD_VAR 0 4
73718: PUSH
73719: LD_INT 1
73721: PLUS
73722: ARRAY
73723: ST_TO_ADDR
73724: GO 73915
73726: LD_INT 4
73728: DOUBLE
73729: EQUAL
73730: IFTRUE 73752
73732: LD_INT 5
73734: DOUBLE
73735: EQUAL
73736: IFTRUE 73752
73738: LD_INT 34
73740: DOUBLE
73741: EQUAL
73742: IFTRUE 73752
73744: LD_INT 37
73746: DOUBLE
73747: EQUAL
73748: IFTRUE 73752
73750: GO 73808
73752: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73753: LD_ADDR_VAR 0 9
73757: PUSH
73758: LD_VAR 0 53
73762: PUSH
73763: LD_VAR 0 54
73767: PUSH
73768: LD_VAR 0 55
73772: PUSH
73773: LD_VAR 0 56
73777: PUSH
73778: LD_VAR 0 57
73782: PUSH
73783: LD_VAR 0 58
73787: PUSH
73788: EMPTY
73789: LIST
73790: LIST
73791: LIST
73792: LIST
73793: LIST
73794: LIST
73795: PUSH
73796: LD_VAR 0 4
73800: PUSH
73801: LD_INT 1
73803: PLUS
73804: ARRAY
73805: ST_TO_ADDR
73806: GO 73915
73808: LD_INT 31
73810: DOUBLE
73811: EQUAL
73812: IFTRUE 73858
73814: LD_INT 32
73816: DOUBLE
73817: EQUAL
73818: IFTRUE 73858
73820: LD_INT 33
73822: DOUBLE
73823: EQUAL
73824: IFTRUE 73858
73826: LD_INT 27
73828: DOUBLE
73829: EQUAL
73830: IFTRUE 73858
73832: LD_INT 26
73834: DOUBLE
73835: EQUAL
73836: IFTRUE 73858
73838: LD_INT 28
73840: DOUBLE
73841: EQUAL
73842: IFTRUE 73858
73844: LD_INT 29
73846: DOUBLE
73847: EQUAL
73848: IFTRUE 73858
73850: LD_INT 30
73852: DOUBLE
73853: EQUAL
73854: IFTRUE 73858
73856: GO 73914
73858: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73859: LD_ADDR_VAR 0 9
73863: PUSH
73864: LD_VAR 0 59
73868: PUSH
73869: LD_VAR 0 60
73873: PUSH
73874: LD_VAR 0 61
73878: PUSH
73879: LD_VAR 0 62
73883: PUSH
73884: LD_VAR 0 63
73888: PUSH
73889: LD_VAR 0 64
73893: PUSH
73894: EMPTY
73895: LIST
73896: LIST
73897: LIST
73898: LIST
73899: LIST
73900: LIST
73901: PUSH
73902: LD_VAR 0 4
73906: PUSH
73907: LD_INT 1
73909: PLUS
73910: ARRAY
73911: ST_TO_ADDR
73912: GO 73915
73914: POP
// temp_list2 = [ ] ;
73915: LD_ADDR_VAR 0 10
73919: PUSH
73920: EMPTY
73921: ST_TO_ADDR
// for i in temp_list do
73922: LD_ADDR_VAR 0 8
73926: PUSH
73927: LD_VAR 0 9
73931: PUSH
73932: FOR_IN
73933: IFFALSE 73985
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73935: LD_ADDR_VAR 0 10
73939: PUSH
73940: LD_VAR 0 10
73944: PUSH
73945: LD_VAR 0 8
73949: PUSH
73950: LD_INT 1
73952: ARRAY
73953: PUSH
73954: LD_VAR 0 2
73958: PLUS
73959: PUSH
73960: LD_VAR 0 8
73964: PUSH
73965: LD_INT 2
73967: ARRAY
73968: PUSH
73969: LD_VAR 0 3
73973: PLUS
73974: PUSH
73975: EMPTY
73976: LIST
73977: LIST
73978: PUSH
73979: EMPTY
73980: LIST
73981: ADD
73982: ST_TO_ADDR
73983: GO 73932
73985: POP
73986: POP
// result = temp_list2 ;
73987: LD_ADDR_VAR 0 7
73991: PUSH
73992: LD_VAR 0 10
73996: ST_TO_ADDR
// end ;
73997: LD_VAR 0 7
74001: RET
// export function EnemyInRange ( unit , dist ) ; begin
74002: LD_INT 0
74004: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
74005: LD_ADDR_VAR 0 3
74009: PUSH
74010: LD_VAR 0 1
74014: PPUSH
74015: CALL_OW 255
74019: PPUSH
74020: LD_VAR 0 1
74024: PPUSH
74025: CALL_OW 250
74029: PPUSH
74030: LD_VAR 0 1
74034: PPUSH
74035: CALL_OW 251
74039: PPUSH
74040: LD_VAR 0 2
74044: PPUSH
74045: CALL 47259 0 4
74049: PUSH
74050: LD_INT 4
74052: ARRAY
74053: ST_TO_ADDR
// end ;
74054: LD_VAR 0 3
74058: RET
// export function PlayerSeeMe ( unit ) ; begin
74059: LD_INT 0
74061: PPUSH
// result := See ( your_side , unit ) ;
74062: LD_ADDR_VAR 0 2
74066: PUSH
74067: LD_OWVAR 2
74071: PPUSH
74072: LD_VAR 0 1
74076: PPUSH
74077: CALL_OW 292
74081: ST_TO_ADDR
// end ;
74082: LD_VAR 0 2
74086: RET
// export function ReverseDir ( unit ) ; begin
74087: LD_INT 0
74089: PPUSH
// if not unit then
74090: LD_VAR 0 1
74094: NOT
74095: IFFALSE 74099
// exit ;
74097: GO 74122
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74099: LD_ADDR_VAR 0 2
74103: PUSH
74104: LD_VAR 0 1
74108: PPUSH
74109: CALL_OW 254
74113: PUSH
74114: LD_INT 3
74116: PLUS
74117: PUSH
74118: LD_INT 6
74120: MOD
74121: ST_TO_ADDR
// end ;
74122: LD_VAR 0 2
74126: RET
// export function ReverseArray ( array ) ; var i ; begin
74127: LD_INT 0
74129: PPUSH
74130: PPUSH
// if not array then
74131: LD_VAR 0 1
74135: NOT
74136: IFFALSE 74140
// exit ;
74138: GO 74195
// result := [ ] ;
74140: LD_ADDR_VAR 0 2
74144: PUSH
74145: EMPTY
74146: ST_TO_ADDR
// for i := array downto 1 do
74147: LD_ADDR_VAR 0 3
74151: PUSH
74152: DOUBLE
74153: LD_VAR 0 1
74157: INC
74158: ST_TO_ADDR
74159: LD_INT 1
74161: PUSH
74162: FOR_DOWNTO
74163: IFFALSE 74193
// result := Join ( result , array [ i ] ) ;
74165: LD_ADDR_VAR 0 2
74169: PUSH
74170: LD_VAR 0 2
74174: PPUSH
74175: LD_VAR 0 1
74179: PUSH
74180: LD_VAR 0 3
74184: ARRAY
74185: PPUSH
74186: CALL 79047 0 2
74190: ST_TO_ADDR
74191: GO 74162
74193: POP
74194: POP
// end ;
74195: LD_VAR 0 2
74199: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
74200: LD_INT 0
74202: PPUSH
74203: PPUSH
74204: PPUSH
74205: PPUSH
74206: PPUSH
74207: PPUSH
// if not unit or not hexes then
74208: LD_VAR 0 1
74212: NOT
74213: IFTRUE 74222
74215: PUSH
74216: LD_VAR 0 2
74220: NOT
74221: OR
74222: IFFALSE 74226
// exit ;
74224: GO 74349
// dist := 9999 ;
74226: LD_ADDR_VAR 0 5
74230: PUSH
74231: LD_INT 9999
74233: ST_TO_ADDR
// for i = 1 to hexes do
74234: LD_ADDR_VAR 0 4
74238: PUSH
74239: DOUBLE
74240: LD_INT 1
74242: DEC
74243: ST_TO_ADDR
74244: LD_VAR 0 2
74248: PUSH
74249: FOR_TO
74250: IFFALSE 74337
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74252: LD_ADDR_VAR 0 6
74256: PUSH
74257: LD_VAR 0 1
74261: PPUSH
74262: LD_VAR 0 2
74266: PUSH
74267: LD_VAR 0 4
74271: ARRAY
74272: PUSH
74273: LD_INT 1
74275: ARRAY
74276: PPUSH
74277: LD_VAR 0 2
74281: PUSH
74282: LD_VAR 0 4
74286: ARRAY
74287: PUSH
74288: LD_INT 2
74290: ARRAY
74291: PPUSH
74292: CALL_OW 297
74296: ST_TO_ADDR
// if tdist < dist then
74297: LD_VAR 0 6
74301: PUSH
74302: LD_VAR 0 5
74306: LESS
74307: IFFALSE 74335
// begin hex := hexes [ i ] ;
74309: LD_ADDR_VAR 0 8
74313: PUSH
74314: LD_VAR 0 2
74318: PUSH
74319: LD_VAR 0 4
74323: ARRAY
74324: ST_TO_ADDR
// dist := tdist ;
74325: LD_ADDR_VAR 0 5
74329: PUSH
74330: LD_VAR 0 6
74334: ST_TO_ADDR
// end ; end ;
74335: GO 74249
74337: POP
74338: POP
// result := hex ;
74339: LD_ADDR_VAR 0 3
74343: PUSH
74344: LD_VAR 0 8
74348: ST_TO_ADDR
// end ;
74349: LD_VAR 0 3
74353: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74354: LD_INT 0
74356: PPUSH
74357: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74358: LD_VAR 0 1
74362: NOT
74363: IFTRUE 74402
74365: PUSH
74366: LD_VAR 0 1
74370: PUSH
74371: LD_INT 21
74373: PUSH
74374: LD_INT 2
74376: PUSH
74377: EMPTY
74378: LIST
74379: LIST
74380: PUSH
74381: LD_INT 23
74383: PUSH
74384: LD_INT 2
74386: PUSH
74387: EMPTY
74388: LIST
74389: LIST
74390: PUSH
74391: EMPTY
74392: LIST
74393: LIST
74394: PPUSH
74395: CALL_OW 69
74399: IN
74400: NOT
74401: OR
74402: IFFALSE 74406
// exit ;
74404: GO 74453
// for i = 1 to 3 do
74406: LD_ADDR_VAR 0 3
74410: PUSH
74411: DOUBLE
74412: LD_INT 1
74414: DEC
74415: ST_TO_ADDR
74416: LD_INT 3
74418: PUSH
74419: FOR_TO
74420: IFFALSE 74451
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74422: LD_VAR 0 1
74426: PPUSH
74427: CALL_OW 250
74431: PPUSH
74432: LD_VAR 0 1
74436: PPUSH
74437: CALL_OW 251
74441: PPUSH
74442: LD_INT 1
74444: PPUSH
74445: CALL_OW 453
74449: GO 74419
74451: POP
74452: POP
// end ;
74453: LD_VAR 0 2
74457: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74458: LD_INT 0
74460: PPUSH
74461: PPUSH
74462: PPUSH
74463: PPUSH
74464: PPUSH
74465: PPUSH
// if not unit or not enemy_unit then
74466: LD_VAR 0 1
74470: NOT
74471: IFTRUE 74480
74473: PUSH
74474: LD_VAR 0 2
74478: NOT
74479: OR
74480: IFFALSE 74484
// exit ;
74482: GO 74965
// if GetLives ( i ) < 250 then
74484: LD_VAR 0 4
74488: PPUSH
74489: CALL_OW 256
74493: PUSH
74494: LD_INT 250
74496: LESS
74497: IFFALSE 74510
// begin ComAutodestruct ( i ) ;
74499: LD_VAR 0 4
74503: PPUSH
74504: CALL 74354 0 1
// exit ;
74508: GO 74965
// end ; x := GetX ( enemy_unit ) ;
74510: LD_ADDR_VAR 0 7
74514: PUSH
74515: LD_VAR 0 2
74519: PPUSH
74520: CALL_OW 250
74524: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74525: LD_ADDR_VAR 0 8
74529: PUSH
74530: LD_VAR 0 2
74534: PPUSH
74535: CALL_OW 251
74539: ST_TO_ADDR
// if not x or not y then
74540: LD_VAR 0 7
74544: NOT
74545: IFTRUE 74554
74547: PUSH
74548: LD_VAR 0 8
74552: NOT
74553: OR
74554: IFFALSE 74558
// exit ;
74556: GO 74965
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74558: LD_ADDR_VAR 0 6
74562: PUSH
74563: LD_VAR 0 7
74567: PPUSH
74568: LD_INT 0
74570: PPUSH
74571: LD_INT 4
74573: PPUSH
74574: CALL_OW 272
74578: PUSH
74579: LD_VAR 0 8
74583: PPUSH
74584: LD_INT 0
74586: PPUSH
74587: LD_INT 4
74589: PPUSH
74590: CALL_OW 273
74594: PUSH
74595: EMPTY
74596: LIST
74597: LIST
74598: PUSH
74599: LD_VAR 0 7
74603: PPUSH
74604: LD_INT 1
74606: PPUSH
74607: LD_INT 4
74609: PPUSH
74610: CALL_OW 272
74614: PUSH
74615: LD_VAR 0 8
74619: PPUSH
74620: LD_INT 1
74622: PPUSH
74623: LD_INT 4
74625: PPUSH
74626: CALL_OW 273
74630: PUSH
74631: EMPTY
74632: LIST
74633: LIST
74634: PUSH
74635: LD_VAR 0 7
74639: PPUSH
74640: LD_INT 2
74642: PPUSH
74643: LD_INT 4
74645: PPUSH
74646: CALL_OW 272
74650: PUSH
74651: LD_VAR 0 8
74655: PPUSH
74656: LD_INT 2
74658: PPUSH
74659: LD_INT 4
74661: PPUSH
74662: CALL_OW 273
74666: PUSH
74667: EMPTY
74668: LIST
74669: LIST
74670: PUSH
74671: LD_VAR 0 7
74675: PPUSH
74676: LD_INT 3
74678: PPUSH
74679: LD_INT 4
74681: PPUSH
74682: CALL_OW 272
74686: PUSH
74687: LD_VAR 0 8
74691: PPUSH
74692: LD_INT 3
74694: PPUSH
74695: LD_INT 4
74697: PPUSH
74698: CALL_OW 273
74702: PUSH
74703: EMPTY
74704: LIST
74705: LIST
74706: PUSH
74707: LD_VAR 0 7
74711: PPUSH
74712: LD_INT 4
74714: PPUSH
74715: LD_INT 4
74717: PPUSH
74718: CALL_OW 272
74722: PUSH
74723: LD_VAR 0 8
74727: PPUSH
74728: LD_INT 4
74730: PPUSH
74731: LD_INT 4
74733: PPUSH
74734: CALL_OW 273
74738: PUSH
74739: EMPTY
74740: LIST
74741: LIST
74742: PUSH
74743: LD_VAR 0 7
74747: PPUSH
74748: LD_INT 5
74750: PPUSH
74751: LD_INT 4
74753: PPUSH
74754: CALL_OW 272
74758: PUSH
74759: LD_VAR 0 8
74763: PPUSH
74764: LD_INT 5
74766: PPUSH
74767: LD_INT 4
74769: PPUSH
74770: CALL_OW 273
74774: PUSH
74775: EMPTY
74776: LIST
74777: LIST
74778: PUSH
74779: EMPTY
74780: LIST
74781: LIST
74782: LIST
74783: LIST
74784: LIST
74785: LIST
74786: ST_TO_ADDR
// for i = tmp downto 1 do
74787: LD_ADDR_VAR 0 4
74791: PUSH
74792: DOUBLE
74793: LD_VAR 0 6
74797: INC
74798: ST_TO_ADDR
74799: LD_INT 1
74801: PUSH
74802: FOR_DOWNTO
74803: IFFALSE 74906
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74805: LD_VAR 0 6
74809: PUSH
74810: LD_VAR 0 4
74814: ARRAY
74815: PUSH
74816: LD_INT 1
74818: ARRAY
74819: PPUSH
74820: LD_VAR 0 6
74824: PUSH
74825: LD_VAR 0 4
74829: ARRAY
74830: PUSH
74831: LD_INT 2
74833: ARRAY
74834: PPUSH
74835: CALL_OW 488
74839: NOT
74840: IFTRUE 74882
74842: PUSH
74843: LD_VAR 0 6
74847: PUSH
74848: LD_VAR 0 4
74852: ARRAY
74853: PUSH
74854: LD_INT 1
74856: ARRAY
74857: PPUSH
74858: LD_VAR 0 6
74862: PUSH
74863: LD_VAR 0 4
74867: ARRAY
74868: PUSH
74869: LD_INT 2
74871: ARRAY
74872: PPUSH
74873: CALL_OW 428
74877: PUSH
74878: LD_INT 0
74880: NONEQUAL
74881: OR
74882: IFFALSE 74904
// tmp := Delete ( tmp , i ) ;
74884: LD_ADDR_VAR 0 6
74888: PUSH
74889: LD_VAR 0 6
74893: PPUSH
74894: LD_VAR 0 4
74898: PPUSH
74899: CALL_OW 3
74903: ST_TO_ADDR
74904: GO 74802
74906: POP
74907: POP
// j := GetClosestHex ( unit , tmp ) ;
74908: LD_ADDR_VAR 0 5
74912: PUSH
74913: LD_VAR 0 1
74917: PPUSH
74918: LD_VAR 0 6
74922: PPUSH
74923: CALL 74200 0 2
74927: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74928: LD_VAR 0 1
74932: PPUSH
74933: LD_VAR 0 5
74937: PUSH
74938: LD_INT 1
74940: ARRAY
74941: PPUSH
74942: LD_VAR 0 5
74946: PUSH
74947: LD_INT 2
74949: ARRAY
74950: PPUSH
74951: CALL_OW 111
// result := j ;
74955: LD_ADDR_VAR 0 3
74959: PUSH
74960: LD_VAR 0 5
74964: ST_TO_ADDR
// end ;
74965: LD_VAR 0 3
74969: RET
// export function PrepareApemanSoldier ( ) ; begin
74970: LD_INT 0
74972: PPUSH
// uc_nation := 0 ;
74973: LD_ADDR_OWVAR 21
74977: PUSH
74978: LD_INT 0
74980: ST_TO_ADDR
// hc_sex := sex_male ;
74981: LD_ADDR_OWVAR 27
74985: PUSH
74986: LD_INT 1
74988: ST_TO_ADDR
// hc_name :=  ;
74989: LD_ADDR_OWVAR 26
74993: PUSH
74994: LD_STRING 
74996: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74997: LD_ADDR_OWVAR 28
75001: PUSH
75002: LD_INT 15
75004: ST_TO_ADDR
// hc_gallery :=  ;
75005: LD_ADDR_OWVAR 33
75009: PUSH
75010: LD_STRING 
75012: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75013: LD_ADDR_OWVAR 31
75017: PUSH
75018: LD_INT 0
75020: PPUSH
75021: LD_INT 3
75023: PPUSH
75024: CALL_OW 12
75028: PUSH
75029: LD_INT 0
75031: PPUSH
75032: LD_INT 3
75034: PPUSH
75035: CALL_OW 12
75039: PUSH
75040: LD_INT 0
75042: PUSH
75043: LD_INT 0
75045: PUSH
75046: EMPTY
75047: LIST
75048: LIST
75049: LIST
75050: LIST
75051: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
75052: LD_ADDR_OWVAR 29
75056: PUSH
75057: LD_INT 10
75059: PUSH
75060: LD_INT 12
75062: PUSH
75063: EMPTY
75064: LIST
75065: LIST
75066: ST_TO_ADDR
// end ;
75067: LD_VAR 0 1
75071: RET
// export function PrepareApemanEngineer ( ) ; begin
75072: LD_INT 0
75074: PPUSH
// uc_nation := 0 ;
75075: LD_ADDR_OWVAR 21
75079: PUSH
75080: LD_INT 0
75082: ST_TO_ADDR
// hc_sex := sex_male ;
75083: LD_ADDR_OWVAR 27
75087: PUSH
75088: LD_INT 1
75090: ST_TO_ADDR
// hc_name :=  ;
75091: LD_ADDR_OWVAR 26
75095: PUSH
75096: LD_STRING 
75098: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
75099: LD_ADDR_OWVAR 28
75103: PUSH
75104: LD_INT 16
75106: ST_TO_ADDR
// hc_gallery :=  ;
75107: LD_ADDR_OWVAR 33
75111: PUSH
75112: LD_STRING 
75114: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75115: LD_ADDR_OWVAR 31
75119: PUSH
75120: LD_INT 0
75122: PPUSH
75123: LD_INT 3
75125: PPUSH
75126: CALL_OW 12
75130: PUSH
75131: LD_INT 0
75133: PPUSH
75134: LD_INT 3
75136: PPUSH
75137: CALL_OW 12
75141: PUSH
75142: LD_INT 0
75144: PUSH
75145: LD_INT 0
75147: PUSH
75148: EMPTY
75149: LIST
75150: LIST
75151: LIST
75152: LIST
75153: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
75154: LD_ADDR_OWVAR 29
75158: PUSH
75159: LD_INT 10
75161: PUSH
75162: LD_INT 12
75164: PUSH
75165: EMPTY
75166: LIST
75167: LIST
75168: ST_TO_ADDR
// end ;
75169: LD_VAR 0 1
75173: RET
// export function PrepareApeman ( agressivity ) ; begin
75174: LD_INT 0
75176: PPUSH
// uc_side := 0 ;
75177: LD_ADDR_OWVAR 20
75181: PUSH
75182: LD_INT 0
75184: ST_TO_ADDR
// uc_nation := 0 ;
75185: LD_ADDR_OWVAR 21
75189: PUSH
75190: LD_INT 0
75192: ST_TO_ADDR
// hc_sex := sex_male ;
75193: LD_ADDR_OWVAR 27
75197: PUSH
75198: LD_INT 1
75200: ST_TO_ADDR
// hc_class := class_apeman ;
75201: LD_ADDR_OWVAR 28
75205: PUSH
75206: LD_INT 12
75208: ST_TO_ADDR
// hc_gallery :=  ;
75209: LD_ADDR_OWVAR 33
75213: PUSH
75214: LD_STRING 
75216: ST_TO_ADDR
// hc_name :=  ;
75217: LD_ADDR_OWVAR 26
75221: PUSH
75222: LD_STRING 
75224: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
75225: LD_ADDR_OWVAR 29
75229: PUSH
75230: LD_INT 10
75232: PUSH
75233: LD_INT 12
75235: PUSH
75236: EMPTY
75237: LIST
75238: LIST
75239: ST_TO_ADDR
// if agressivity = 0 then
75240: LD_VAR 0 1
75244: PUSH
75245: LD_INT 0
75247: EQUAL
75248: IFFALSE 75260
// hc_agressivity := 0 else
75250: LD_ADDR_OWVAR 35
75254: PUSH
75255: LD_INT 0
75257: ST_TO_ADDR
75258: GO 75281
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75260: LD_ADDR_OWVAR 35
75264: PUSH
75265: LD_VAR 0 1
75269: NEG
75270: PPUSH
75271: LD_VAR 0 1
75275: PPUSH
75276: CALL_OW 12
75280: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75281: LD_ADDR_OWVAR 31
75285: PUSH
75286: LD_INT 0
75288: PPUSH
75289: LD_INT 3
75291: PPUSH
75292: CALL_OW 12
75296: PUSH
75297: LD_INT 0
75299: PPUSH
75300: LD_INT 3
75302: PPUSH
75303: CALL_OW 12
75307: PUSH
75308: LD_INT 0
75310: PUSH
75311: LD_INT 0
75313: PUSH
75314: EMPTY
75315: LIST
75316: LIST
75317: LIST
75318: LIST
75319: ST_TO_ADDR
// end ;
75320: LD_VAR 0 2
75324: RET
// export function PrepareTiger ( agressivity ) ; begin
75325: LD_INT 0
75327: PPUSH
// uc_side := 0 ;
75328: LD_ADDR_OWVAR 20
75332: PUSH
75333: LD_INT 0
75335: ST_TO_ADDR
// uc_nation := 0 ;
75336: LD_ADDR_OWVAR 21
75340: PUSH
75341: LD_INT 0
75343: ST_TO_ADDR
// InitHc ;
75344: CALL_OW 19
// hc_class := class_tiger ;
75348: LD_ADDR_OWVAR 28
75352: PUSH
75353: LD_INT 14
75355: ST_TO_ADDR
// hc_gallery :=  ;
75356: LD_ADDR_OWVAR 33
75360: PUSH
75361: LD_STRING 
75363: ST_TO_ADDR
// hc_name :=  ;
75364: LD_ADDR_OWVAR 26
75368: PUSH
75369: LD_STRING 
75371: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75372: LD_ADDR_OWVAR 35
75376: PUSH
75377: LD_VAR 0 1
75381: NEG
75382: PPUSH
75383: LD_VAR 0 1
75387: PPUSH
75388: CALL_OW 12
75392: ST_TO_ADDR
// end ;
75393: LD_VAR 0 2
75397: RET
// export function PrepareEnchidna ( ) ; begin
75398: LD_INT 0
75400: PPUSH
// uc_side := 0 ;
75401: LD_ADDR_OWVAR 20
75405: PUSH
75406: LD_INT 0
75408: ST_TO_ADDR
// uc_nation := 0 ;
75409: LD_ADDR_OWVAR 21
75413: PUSH
75414: LD_INT 0
75416: ST_TO_ADDR
// InitHc ;
75417: CALL_OW 19
// hc_class := class_baggie ;
75421: LD_ADDR_OWVAR 28
75425: PUSH
75426: LD_INT 13
75428: ST_TO_ADDR
// hc_gallery :=  ;
75429: LD_ADDR_OWVAR 33
75433: PUSH
75434: LD_STRING 
75436: ST_TO_ADDR
// hc_name :=  ;
75437: LD_ADDR_OWVAR 26
75441: PUSH
75442: LD_STRING 
75444: ST_TO_ADDR
// end ;
75445: LD_VAR 0 1
75449: RET
// export function PrepareFrog ( ) ; begin
75450: LD_INT 0
75452: PPUSH
// uc_side := 0 ;
75453: LD_ADDR_OWVAR 20
75457: PUSH
75458: LD_INT 0
75460: ST_TO_ADDR
// uc_nation := 0 ;
75461: LD_ADDR_OWVAR 21
75465: PUSH
75466: LD_INT 0
75468: ST_TO_ADDR
// InitHc ;
75469: CALL_OW 19
// hc_class := class_frog ;
75473: LD_ADDR_OWVAR 28
75477: PUSH
75478: LD_INT 19
75480: ST_TO_ADDR
// hc_gallery :=  ;
75481: LD_ADDR_OWVAR 33
75485: PUSH
75486: LD_STRING 
75488: ST_TO_ADDR
// hc_name :=  ;
75489: LD_ADDR_OWVAR 26
75493: PUSH
75494: LD_STRING 
75496: ST_TO_ADDR
// end ;
75497: LD_VAR 0 1
75501: RET
// export function PrepareFish ( ) ; begin
75502: LD_INT 0
75504: PPUSH
// uc_side := 0 ;
75505: LD_ADDR_OWVAR 20
75509: PUSH
75510: LD_INT 0
75512: ST_TO_ADDR
// uc_nation := 0 ;
75513: LD_ADDR_OWVAR 21
75517: PUSH
75518: LD_INT 0
75520: ST_TO_ADDR
// InitHc ;
75521: CALL_OW 19
// hc_class := class_fish ;
75525: LD_ADDR_OWVAR 28
75529: PUSH
75530: LD_INT 20
75532: ST_TO_ADDR
// hc_gallery :=  ;
75533: LD_ADDR_OWVAR 33
75537: PUSH
75538: LD_STRING 
75540: ST_TO_ADDR
// hc_name :=  ;
75541: LD_ADDR_OWVAR 26
75545: PUSH
75546: LD_STRING 
75548: ST_TO_ADDR
// end ;
75549: LD_VAR 0 1
75553: RET
// export function PrepareBird ( ) ; begin
75554: LD_INT 0
75556: PPUSH
// uc_side := 0 ;
75557: LD_ADDR_OWVAR 20
75561: PUSH
75562: LD_INT 0
75564: ST_TO_ADDR
// uc_nation := 0 ;
75565: LD_ADDR_OWVAR 21
75569: PUSH
75570: LD_INT 0
75572: ST_TO_ADDR
// InitHc ;
75573: CALL_OW 19
// hc_class := class_phororhacos ;
75577: LD_ADDR_OWVAR 28
75581: PUSH
75582: LD_INT 18
75584: ST_TO_ADDR
// hc_gallery :=  ;
75585: LD_ADDR_OWVAR 33
75589: PUSH
75590: LD_STRING 
75592: ST_TO_ADDR
// hc_name :=  ;
75593: LD_ADDR_OWVAR 26
75597: PUSH
75598: LD_STRING 
75600: ST_TO_ADDR
// end ;
75601: LD_VAR 0 1
75605: RET
// export function PrepareHorse ( ) ; begin
75606: LD_INT 0
75608: PPUSH
// uc_side := 0 ;
75609: LD_ADDR_OWVAR 20
75613: PUSH
75614: LD_INT 0
75616: ST_TO_ADDR
// uc_nation := 0 ;
75617: LD_ADDR_OWVAR 21
75621: PUSH
75622: LD_INT 0
75624: ST_TO_ADDR
// InitHc ;
75625: CALL_OW 19
// hc_class := class_horse ;
75629: LD_ADDR_OWVAR 28
75633: PUSH
75634: LD_INT 21
75636: ST_TO_ADDR
// hc_gallery :=  ;
75637: LD_ADDR_OWVAR 33
75641: PUSH
75642: LD_STRING 
75644: ST_TO_ADDR
// hc_name :=  ;
75645: LD_ADDR_OWVAR 26
75649: PUSH
75650: LD_STRING 
75652: ST_TO_ADDR
// end ;
75653: LD_VAR 0 1
75657: RET
// export function PrepareMastodont ( ) ; begin
75658: LD_INT 0
75660: PPUSH
// uc_side := 0 ;
75661: LD_ADDR_OWVAR 20
75665: PUSH
75666: LD_INT 0
75668: ST_TO_ADDR
// uc_nation := 0 ;
75669: LD_ADDR_OWVAR 21
75673: PUSH
75674: LD_INT 0
75676: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75677: LD_ADDR_OWVAR 37
75681: PUSH
75682: LD_INT 31
75684: ST_TO_ADDR
// vc_control := control_rider ;
75685: LD_ADDR_OWVAR 38
75689: PUSH
75690: LD_INT 4
75692: ST_TO_ADDR
// end ;
75693: LD_VAR 0 1
75697: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75698: LD_INT 0
75700: PPUSH
75701: PPUSH
75702: PPUSH
// uc_side = 0 ;
75703: LD_ADDR_OWVAR 20
75707: PUSH
75708: LD_INT 0
75710: ST_TO_ADDR
// uc_nation = 0 ;
75711: LD_ADDR_OWVAR 21
75715: PUSH
75716: LD_INT 0
75718: ST_TO_ADDR
// InitHc_All ( ) ;
75719: CALL_OW 584
// InitVc ;
75723: CALL_OW 20
// if mastodonts then
75727: LD_VAR 0 6
75731: IFFALSE 75798
// for i = 1 to mastodonts do
75733: LD_ADDR_VAR 0 11
75737: PUSH
75738: DOUBLE
75739: LD_INT 1
75741: DEC
75742: ST_TO_ADDR
75743: LD_VAR 0 6
75747: PUSH
75748: FOR_TO
75749: IFFALSE 75796
// begin vc_chassis := 31 ;
75751: LD_ADDR_OWVAR 37
75755: PUSH
75756: LD_INT 31
75758: ST_TO_ADDR
// vc_control := control_rider ;
75759: LD_ADDR_OWVAR 38
75763: PUSH
75764: LD_INT 4
75766: ST_TO_ADDR
// animal := CreateVehicle ;
75767: LD_ADDR_VAR 0 12
75771: PUSH
75772: CALL_OW 45
75776: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75777: LD_VAR 0 12
75781: PPUSH
75782: LD_VAR 0 8
75786: PPUSH
75787: LD_INT 0
75789: PPUSH
75790: CALL 77940 0 3
// end ;
75794: GO 75748
75796: POP
75797: POP
// if horses then
75798: LD_VAR 0 5
75802: IFFALSE 75869
// for i = 1 to horses do
75804: LD_ADDR_VAR 0 11
75808: PUSH
75809: DOUBLE
75810: LD_INT 1
75812: DEC
75813: ST_TO_ADDR
75814: LD_VAR 0 5
75818: PUSH
75819: FOR_TO
75820: IFFALSE 75867
// begin hc_class := 21 ;
75822: LD_ADDR_OWVAR 28
75826: PUSH
75827: LD_INT 21
75829: ST_TO_ADDR
// hc_gallery :=  ;
75830: LD_ADDR_OWVAR 33
75834: PUSH
75835: LD_STRING 
75837: ST_TO_ADDR
// animal := CreateHuman ;
75838: LD_ADDR_VAR 0 12
75842: PUSH
75843: CALL_OW 44
75847: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75848: LD_VAR 0 12
75852: PPUSH
75853: LD_VAR 0 8
75857: PPUSH
75858: LD_INT 0
75860: PPUSH
75861: CALL 77940 0 3
// end ;
75865: GO 75819
75867: POP
75868: POP
// if birds then
75869: LD_VAR 0 1
75873: IFFALSE 75940
// for i = 1 to birds do
75875: LD_ADDR_VAR 0 11
75879: PUSH
75880: DOUBLE
75881: LD_INT 1
75883: DEC
75884: ST_TO_ADDR
75885: LD_VAR 0 1
75889: PUSH
75890: FOR_TO
75891: IFFALSE 75938
// begin hc_class := 18 ;
75893: LD_ADDR_OWVAR 28
75897: PUSH
75898: LD_INT 18
75900: ST_TO_ADDR
// hc_gallery =  ;
75901: LD_ADDR_OWVAR 33
75905: PUSH
75906: LD_STRING 
75908: ST_TO_ADDR
// animal := CreateHuman ;
75909: LD_ADDR_VAR 0 12
75913: PUSH
75914: CALL_OW 44
75918: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75919: LD_VAR 0 12
75923: PPUSH
75924: LD_VAR 0 8
75928: PPUSH
75929: LD_INT 0
75931: PPUSH
75932: CALL 77940 0 3
// end ;
75936: GO 75890
75938: POP
75939: POP
// if tigers then
75940: LD_VAR 0 2
75944: IFFALSE 76028
// for i = 1 to tigers do
75946: LD_ADDR_VAR 0 11
75950: PUSH
75951: DOUBLE
75952: LD_INT 1
75954: DEC
75955: ST_TO_ADDR
75956: LD_VAR 0 2
75960: PUSH
75961: FOR_TO
75962: IFFALSE 76026
// begin hc_class = class_tiger ;
75964: LD_ADDR_OWVAR 28
75968: PUSH
75969: LD_INT 14
75971: ST_TO_ADDR
// hc_gallery =  ;
75972: LD_ADDR_OWVAR 33
75976: PUSH
75977: LD_STRING 
75979: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75980: LD_ADDR_OWVAR 35
75984: PUSH
75985: LD_INT 7
75987: NEG
75988: PPUSH
75989: LD_INT 7
75991: PPUSH
75992: CALL_OW 12
75996: ST_TO_ADDR
// animal := CreateHuman ;
75997: LD_ADDR_VAR 0 12
76001: PUSH
76002: CALL_OW 44
76006: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76007: LD_VAR 0 12
76011: PPUSH
76012: LD_VAR 0 8
76016: PPUSH
76017: LD_INT 0
76019: PPUSH
76020: CALL 77940 0 3
// end ;
76024: GO 75961
76026: POP
76027: POP
// if apemans then
76028: LD_VAR 0 3
76032: IFFALSE 76155
// for i = 1 to apemans do
76034: LD_ADDR_VAR 0 11
76038: PUSH
76039: DOUBLE
76040: LD_INT 1
76042: DEC
76043: ST_TO_ADDR
76044: LD_VAR 0 3
76048: PUSH
76049: FOR_TO
76050: IFFALSE 76153
// begin hc_class = class_apeman ;
76052: LD_ADDR_OWVAR 28
76056: PUSH
76057: LD_INT 12
76059: ST_TO_ADDR
// hc_gallery =  ;
76060: LD_ADDR_OWVAR 33
76064: PUSH
76065: LD_STRING 
76067: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
76068: LD_ADDR_OWVAR 35
76072: PUSH
76073: LD_INT 2
76075: NEG
76076: PPUSH
76077: LD_INT 2
76079: PPUSH
76080: CALL_OW 12
76084: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
76085: LD_ADDR_OWVAR 31
76089: PUSH
76090: LD_INT 1
76092: PPUSH
76093: LD_INT 3
76095: PPUSH
76096: CALL_OW 12
76100: PUSH
76101: LD_INT 1
76103: PPUSH
76104: LD_INT 3
76106: PPUSH
76107: CALL_OW 12
76111: PUSH
76112: LD_INT 0
76114: PUSH
76115: LD_INT 0
76117: PUSH
76118: EMPTY
76119: LIST
76120: LIST
76121: LIST
76122: LIST
76123: ST_TO_ADDR
// animal := CreateHuman ;
76124: LD_ADDR_VAR 0 12
76128: PUSH
76129: CALL_OW 44
76133: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76134: LD_VAR 0 12
76138: PPUSH
76139: LD_VAR 0 8
76143: PPUSH
76144: LD_INT 0
76146: PPUSH
76147: CALL 77940 0 3
// end ;
76151: GO 76049
76153: POP
76154: POP
// if enchidnas then
76155: LD_VAR 0 4
76159: IFFALSE 76226
// for i = 1 to enchidnas do
76161: LD_ADDR_VAR 0 11
76165: PUSH
76166: DOUBLE
76167: LD_INT 1
76169: DEC
76170: ST_TO_ADDR
76171: LD_VAR 0 4
76175: PUSH
76176: FOR_TO
76177: IFFALSE 76224
// begin hc_class = 13 ;
76179: LD_ADDR_OWVAR 28
76183: PUSH
76184: LD_INT 13
76186: ST_TO_ADDR
// hc_gallery =  ;
76187: LD_ADDR_OWVAR 33
76191: PUSH
76192: LD_STRING 
76194: ST_TO_ADDR
// animal := CreateHuman ;
76195: LD_ADDR_VAR 0 12
76199: PUSH
76200: CALL_OW 44
76204: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76205: LD_VAR 0 12
76209: PPUSH
76210: LD_VAR 0 8
76214: PPUSH
76215: LD_INT 0
76217: PPUSH
76218: CALL 77940 0 3
// end ;
76222: GO 76176
76224: POP
76225: POP
// if fishes then
76226: LD_VAR 0 7
76230: IFFALSE 76297
// for i = 1 to fishes do
76232: LD_ADDR_VAR 0 11
76236: PUSH
76237: DOUBLE
76238: LD_INT 1
76240: DEC
76241: ST_TO_ADDR
76242: LD_VAR 0 7
76246: PUSH
76247: FOR_TO
76248: IFFALSE 76295
// begin hc_class = 20 ;
76250: LD_ADDR_OWVAR 28
76254: PUSH
76255: LD_INT 20
76257: ST_TO_ADDR
// hc_gallery =  ;
76258: LD_ADDR_OWVAR 33
76262: PUSH
76263: LD_STRING 
76265: ST_TO_ADDR
// animal := CreateHuman ;
76266: LD_ADDR_VAR 0 12
76270: PUSH
76271: CALL_OW 44
76275: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
76276: LD_VAR 0 12
76280: PPUSH
76281: LD_VAR 0 9
76285: PPUSH
76286: LD_INT 0
76288: PPUSH
76289: CALL 77940 0 3
// end ;
76293: GO 76247
76295: POP
76296: POP
// end ;
76297: LD_VAR 0 10
76301: RET
// export function WantHeal ( sci , unit ) ; begin
76302: LD_INT 0
76304: PPUSH
// if GetTaskList ( sci ) > 0 then
76305: LD_VAR 0 1
76309: PPUSH
76310: CALL_OW 437
76314: PUSH
76315: LD_INT 0
76317: GREATER
76318: IFFALSE 76390
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
76320: LD_VAR 0 1
76324: PPUSH
76325: CALL_OW 437
76329: PUSH
76330: LD_INT 1
76332: ARRAY
76333: PUSH
76334: LD_INT 1
76336: ARRAY
76337: PUSH
76338: LD_STRING l
76340: EQUAL
76341: IFFALSE 76368
76343: PUSH
76344: LD_VAR 0 1
76348: PPUSH
76349: CALL_OW 437
76353: PUSH
76354: LD_INT 1
76356: ARRAY
76357: PUSH
76358: LD_INT 4
76360: ARRAY
76361: PUSH
76362: LD_VAR 0 2
76366: EQUAL
76367: AND
76368: IFFALSE 76380
// result := true else
76370: LD_ADDR_VAR 0 3
76374: PUSH
76375: LD_INT 1
76377: ST_TO_ADDR
76378: GO 76388
// result := false ;
76380: LD_ADDR_VAR 0 3
76384: PUSH
76385: LD_INT 0
76387: ST_TO_ADDR
// end else
76388: GO 76398
// result := false ;
76390: LD_ADDR_VAR 0 3
76394: PUSH
76395: LD_INT 0
76397: ST_TO_ADDR
// end ;
76398: LD_VAR 0 3
76402: RET
// export function HealTarget ( sci ) ; begin
76403: LD_INT 0
76405: PPUSH
// if not sci then
76406: LD_VAR 0 1
76410: NOT
76411: IFFALSE 76415
// exit ;
76413: GO 76480
// result := 0 ;
76415: LD_ADDR_VAR 0 2
76419: PUSH
76420: LD_INT 0
76422: ST_TO_ADDR
// if GetTaskList ( sci ) then
76423: LD_VAR 0 1
76427: PPUSH
76428: CALL_OW 437
76432: IFFALSE 76480
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76434: LD_VAR 0 1
76438: PPUSH
76439: CALL_OW 437
76443: PUSH
76444: LD_INT 1
76446: ARRAY
76447: PUSH
76448: LD_INT 1
76450: ARRAY
76451: PUSH
76452: LD_STRING l
76454: EQUAL
76455: IFFALSE 76480
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
76457: LD_ADDR_VAR 0 2
76461: PUSH
76462: LD_VAR 0 1
76466: PPUSH
76467: CALL_OW 437
76471: PUSH
76472: LD_INT 1
76474: ARRAY
76475: PUSH
76476: LD_INT 4
76478: ARRAY
76479: ST_TO_ADDR
// end ;
76480: LD_VAR 0 2
76484: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
76485: LD_INT 0
76487: PPUSH
76488: PPUSH
76489: PPUSH
76490: PPUSH
// if not base_units then
76491: LD_VAR 0 1
76495: NOT
76496: IFFALSE 76500
// exit ;
76498: GO 76587
// result := false ;
76500: LD_ADDR_VAR 0 2
76504: PUSH
76505: LD_INT 0
76507: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76508: LD_ADDR_VAR 0 5
76512: PUSH
76513: LD_VAR 0 1
76517: PPUSH
76518: LD_INT 21
76520: PUSH
76521: LD_INT 3
76523: PUSH
76524: EMPTY
76525: LIST
76526: LIST
76527: PPUSH
76528: CALL_OW 72
76532: ST_TO_ADDR
// if not tmp then
76533: LD_VAR 0 5
76537: NOT
76538: IFFALSE 76542
// exit ;
76540: GO 76587
// for i in tmp do
76542: LD_ADDR_VAR 0 3
76546: PUSH
76547: LD_VAR 0 5
76551: PUSH
76552: FOR_IN
76553: IFFALSE 76585
// begin result := EnemyInRange ( i , 22 ) ;
76555: LD_ADDR_VAR 0 2
76559: PUSH
76560: LD_VAR 0 3
76564: PPUSH
76565: LD_INT 22
76567: PPUSH
76568: CALL 74002 0 2
76572: ST_TO_ADDR
// if result then
76573: LD_VAR 0 2
76577: IFFALSE 76583
// exit ;
76579: POP
76580: POP
76581: GO 76587
// end ;
76583: GO 76552
76585: POP
76586: POP
// end ;
76587: LD_VAR 0 2
76591: RET
// export function FilterByTag ( units , tag ) ; begin
76592: LD_INT 0
76594: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
76595: LD_ADDR_VAR 0 3
76599: PUSH
76600: LD_VAR 0 1
76604: PPUSH
76605: LD_INT 120
76607: PUSH
76608: LD_VAR 0 2
76612: PUSH
76613: EMPTY
76614: LIST
76615: LIST
76616: PPUSH
76617: CALL_OW 72
76621: ST_TO_ADDR
// end ;
76622: LD_VAR 0 3
76626: RET
// export function IsDriver ( un ) ; begin
76627: LD_INT 0
76629: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76630: LD_ADDR_VAR 0 2
76634: PUSH
76635: LD_VAR 0 1
76639: PUSH
76640: LD_INT 55
76642: PUSH
76643: EMPTY
76644: LIST
76645: PPUSH
76646: CALL_OW 69
76650: IN
76651: ST_TO_ADDR
// end ;
76652: LD_VAR 0 2
76656: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76657: LD_INT 0
76659: PPUSH
76660: PPUSH
// list := [ ] ;
76661: LD_ADDR_VAR 0 5
76665: PUSH
76666: EMPTY
76667: ST_TO_ADDR
// case d of 0 :
76668: LD_VAR 0 3
76672: PUSH
76673: LD_INT 0
76675: DOUBLE
76676: EQUAL
76677: IFTRUE 76681
76679: GO 76814
76681: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76682: LD_ADDR_VAR 0 5
76686: PUSH
76687: LD_VAR 0 1
76691: PUSH
76692: LD_INT 4
76694: MINUS
76695: PUSH
76696: LD_VAR 0 2
76700: PUSH
76701: LD_INT 4
76703: MINUS
76704: PUSH
76705: LD_INT 2
76707: PUSH
76708: EMPTY
76709: LIST
76710: LIST
76711: LIST
76712: PUSH
76713: LD_VAR 0 1
76717: PUSH
76718: LD_INT 3
76720: MINUS
76721: PUSH
76722: LD_VAR 0 2
76726: PUSH
76727: LD_INT 1
76729: PUSH
76730: EMPTY
76731: LIST
76732: LIST
76733: LIST
76734: PUSH
76735: LD_VAR 0 1
76739: PUSH
76740: LD_INT 4
76742: PLUS
76743: PUSH
76744: LD_VAR 0 2
76748: PUSH
76749: LD_INT 4
76751: PUSH
76752: EMPTY
76753: LIST
76754: LIST
76755: LIST
76756: PUSH
76757: LD_VAR 0 1
76761: PUSH
76762: LD_INT 3
76764: PLUS
76765: PUSH
76766: LD_VAR 0 2
76770: PUSH
76771: LD_INT 3
76773: PLUS
76774: PUSH
76775: LD_INT 5
76777: PUSH
76778: EMPTY
76779: LIST
76780: LIST
76781: LIST
76782: PUSH
76783: LD_VAR 0 1
76787: PUSH
76788: LD_VAR 0 2
76792: PUSH
76793: LD_INT 4
76795: PLUS
76796: PUSH
76797: LD_INT 0
76799: PUSH
76800: EMPTY
76801: LIST
76802: LIST
76803: LIST
76804: PUSH
76805: EMPTY
76806: LIST
76807: LIST
76808: LIST
76809: LIST
76810: LIST
76811: ST_TO_ADDR
// end ; 1 :
76812: GO 77512
76814: LD_INT 1
76816: DOUBLE
76817: EQUAL
76818: IFTRUE 76822
76820: GO 76955
76822: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76823: LD_ADDR_VAR 0 5
76827: PUSH
76828: LD_VAR 0 1
76832: PUSH
76833: LD_VAR 0 2
76837: PUSH
76838: LD_INT 4
76840: MINUS
76841: PUSH
76842: LD_INT 3
76844: PUSH
76845: EMPTY
76846: LIST
76847: LIST
76848: LIST
76849: PUSH
76850: LD_VAR 0 1
76854: PUSH
76855: LD_INT 3
76857: MINUS
76858: PUSH
76859: LD_VAR 0 2
76863: PUSH
76864: LD_INT 3
76866: MINUS
76867: PUSH
76868: LD_INT 2
76870: PUSH
76871: EMPTY
76872: LIST
76873: LIST
76874: LIST
76875: PUSH
76876: LD_VAR 0 1
76880: PUSH
76881: LD_INT 4
76883: MINUS
76884: PUSH
76885: LD_VAR 0 2
76889: PUSH
76890: LD_INT 1
76892: PUSH
76893: EMPTY
76894: LIST
76895: LIST
76896: LIST
76897: PUSH
76898: LD_VAR 0 1
76902: PUSH
76903: LD_VAR 0 2
76907: PUSH
76908: LD_INT 3
76910: PLUS
76911: PUSH
76912: LD_INT 0
76914: PUSH
76915: EMPTY
76916: LIST
76917: LIST
76918: LIST
76919: PUSH
76920: LD_VAR 0 1
76924: PUSH
76925: LD_INT 4
76927: PLUS
76928: PUSH
76929: LD_VAR 0 2
76933: PUSH
76934: LD_INT 4
76936: PLUS
76937: PUSH
76938: LD_INT 5
76940: PUSH
76941: EMPTY
76942: LIST
76943: LIST
76944: LIST
76945: PUSH
76946: EMPTY
76947: LIST
76948: LIST
76949: LIST
76950: LIST
76951: LIST
76952: ST_TO_ADDR
// end ; 2 :
76953: GO 77512
76955: LD_INT 2
76957: DOUBLE
76958: EQUAL
76959: IFTRUE 76963
76961: GO 77092
76963: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76964: LD_ADDR_VAR 0 5
76968: PUSH
76969: LD_VAR 0 1
76973: PUSH
76974: LD_VAR 0 2
76978: PUSH
76979: LD_INT 3
76981: MINUS
76982: PUSH
76983: LD_INT 3
76985: PUSH
76986: EMPTY
76987: LIST
76988: LIST
76989: LIST
76990: PUSH
76991: LD_VAR 0 1
76995: PUSH
76996: LD_INT 4
76998: PLUS
76999: PUSH
77000: LD_VAR 0 2
77004: PUSH
77005: LD_INT 4
77007: PUSH
77008: EMPTY
77009: LIST
77010: LIST
77011: LIST
77012: PUSH
77013: LD_VAR 0 1
77017: PUSH
77018: LD_VAR 0 2
77022: PUSH
77023: LD_INT 4
77025: PLUS
77026: PUSH
77027: LD_INT 0
77029: PUSH
77030: EMPTY
77031: LIST
77032: LIST
77033: LIST
77034: PUSH
77035: LD_VAR 0 1
77039: PUSH
77040: LD_INT 3
77042: MINUS
77043: PUSH
77044: LD_VAR 0 2
77048: PUSH
77049: LD_INT 1
77051: PUSH
77052: EMPTY
77053: LIST
77054: LIST
77055: LIST
77056: PUSH
77057: LD_VAR 0 1
77061: PUSH
77062: LD_INT 4
77064: MINUS
77065: PUSH
77066: LD_VAR 0 2
77070: PUSH
77071: LD_INT 4
77073: MINUS
77074: PUSH
77075: LD_INT 2
77077: PUSH
77078: EMPTY
77079: LIST
77080: LIST
77081: LIST
77082: PUSH
77083: EMPTY
77084: LIST
77085: LIST
77086: LIST
77087: LIST
77088: LIST
77089: ST_TO_ADDR
// end ; 3 :
77090: GO 77512
77092: LD_INT 3
77094: DOUBLE
77095: EQUAL
77096: IFTRUE 77100
77098: GO 77233
77100: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
77101: LD_ADDR_VAR 0 5
77105: PUSH
77106: LD_VAR 0 1
77110: PUSH
77111: LD_INT 3
77113: PLUS
77114: PUSH
77115: LD_VAR 0 2
77119: PUSH
77120: LD_INT 4
77122: PUSH
77123: EMPTY
77124: LIST
77125: LIST
77126: LIST
77127: PUSH
77128: LD_VAR 0 1
77132: PUSH
77133: LD_INT 4
77135: PLUS
77136: PUSH
77137: LD_VAR 0 2
77141: PUSH
77142: LD_INT 4
77144: PLUS
77145: PUSH
77146: LD_INT 5
77148: PUSH
77149: EMPTY
77150: LIST
77151: LIST
77152: LIST
77153: PUSH
77154: LD_VAR 0 1
77158: PUSH
77159: LD_INT 4
77161: MINUS
77162: PUSH
77163: LD_VAR 0 2
77167: PUSH
77168: LD_INT 1
77170: PUSH
77171: EMPTY
77172: LIST
77173: LIST
77174: LIST
77175: PUSH
77176: LD_VAR 0 1
77180: PUSH
77181: LD_VAR 0 2
77185: PUSH
77186: LD_INT 4
77188: MINUS
77189: PUSH
77190: LD_INT 3
77192: PUSH
77193: EMPTY
77194: LIST
77195: LIST
77196: LIST
77197: PUSH
77198: LD_VAR 0 1
77202: PUSH
77203: LD_INT 3
77205: MINUS
77206: PUSH
77207: LD_VAR 0 2
77211: PUSH
77212: LD_INT 3
77214: MINUS
77215: PUSH
77216: LD_INT 2
77218: PUSH
77219: EMPTY
77220: LIST
77221: LIST
77222: LIST
77223: PUSH
77224: EMPTY
77225: LIST
77226: LIST
77227: LIST
77228: LIST
77229: LIST
77230: ST_TO_ADDR
// end ; 4 :
77231: GO 77512
77233: LD_INT 4
77235: DOUBLE
77236: EQUAL
77237: IFTRUE 77241
77239: GO 77374
77241: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
77242: LD_ADDR_VAR 0 5
77246: PUSH
77247: LD_VAR 0 1
77251: PUSH
77252: LD_VAR 0 2
77256: PUSH
77257: LD_INT 4
77259: PLUS
77260: PUSH
77261: LD_INT 0
77263: PUSH
77264: EMPTY
77265: LIST
77266: LIST
77267: LIST
77268: PUSH
77269: LD_VAR 0 1
77273: PUSH
77274: LD_INT 3
77276: PLUS
77277: PUSH
77278: LD_VAR 0 2
77282: PUSH
77283: LD_INT 3
77285: PLUS
77286: PUSH
77287: LD_INT 5
77289: PUSH
77290: EMPTY
77291: LIST
77292: LIST
77293: LIST
77294: PUSH
77295: LD_VAR 0 1
77299: PUSH
77300: LD_INT 4
77302: PLUS
77303: PUSH
77304: LD_VAR 0 2
77308: PUSH
77309: LD_INT 4
77311: PUSH
77312: EMPTY
77313: LIST
77314: LIST
77315: LIST
77316: PUSH
77317: LD_VAR 0 1
77321: PUSH
77322: LD_VAR 0 2
77326: PUSH
77327: LD_INT 3
77329: MINUS
77330: PUSH
77331: LD_INT 3
77333: PUSH
77334: EMPTY
77335: LIST
77336: LIST
77337: LIST
77338: PUSH
77339: LD_VAR 0 1
77343: PUSH
77344: LD_INT 4
77346: MINUS
77347: PUSH
77348: LD_VAR 0 2
77352: PUSH
77353: LD_INT 4
77355: MINUS
77356: PUSH
77357: LD_INT 2
77359: PUSH
77360: EMPTY
77361: LIST
77362: LIST
77363: LIST
77364: PUSH
77365: EMPTY
77366: LIST
77367: LIST
77368: LIST
77369: LIST
77370: LIST
77371: ST_TO_ADDR
// end ; 5 :
77372: GO 77512
77374: LD_INT 5
77376: DOUBLE
77377: EQUAL
77378: IFTRUE 77382
77380: GO 77511
77382: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
77383: LD_ADDR_VAR 0 5
77387: PUSH
77388: LD_VAR 0 1
77392: PUSH
77393: LD_INT 4
77395: MINUS
77396: PUSH
77397: LD_VAR 0 2
77401: PUSH
77402: LD_INT 1
77404: PUSH
77405: EMPTY
77406: LIST
77407: LIST
77408: LIST
77409: PUSH
77410: LD_VAR 0 1
77414: PUSH
77415: LD_VAR 0 2
77419: PUSH
77420: LD_INT 4
77422: MINUS
77423: PUSH
77424: LD_INT 3
77426: PUSH
77427: EMPTY
77428: LIST
77429: LIST
77430: LIST
77431: PUSH
77432: LD_VAR 0 1
77436: PUSH
77437: LD_INT 4
77439: PLUS
77440: PUSH
77441: LD_VAR 0 2
77445: PUSH
77446: LD_INT 4
77448: PLUS
77449: PUSH
77450: LD_INT 5
77452: PUSH
77453: EMPTY
77454: LIST
77455: LIST
77456: LIST
77457: PUSH
77458: LD_VAR 0 1
77462: PUSH
77463: LD_INT 3
77465: PLUS
77466: PUSH
77467: LD_VAR 0 2
77471: PUSH
77472: LD_INT 4
77474: PUSH
77475: EMPTY
77476: LIST
77477: LIST
77478: LIST
77479: PUSH
77480: LD_VAR 0 1
77484: PUSH
77485: LD_VAR 0 2
77489: PUSH
77490: LD_INT 3
77492: PLUS
77493: PUSH
77494: LD_INT 0
77496: PUSH
77497: EMPTY
77498: LIST
77499: LIST
77500: LIST
77501: PUSH
77502: EMPTY
77503: LIST
77504: LIST
77505: LIST
77506: LIST
77507: LIST
77508: ST_TO_ADDR
// end ; end ;
77509: GO 77512
77511: POP
// result := list ;
77512: LD_ADDR_VAR 0 4
77516: PUSH
77517: LD_VAR 0 5
77521: ST_TO_ADDR
// end ;
77522: LD_VAR 0 4
77526: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77527: LD_INT 0
77529: PPUSH
77530: PPUSH
77531: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77532: LD_VAR 0 1
77536: NOT
77537: IFTRUE 77565
77539: PUSH
77540: LD_VAR 0 2
77544: PUSH
77545: LD_INT 1
77547: PUSH
77548: LD_INT 2
77550: PUSH
77551: LD_INT 3
77553: PUSH
77554: LD_INT 4
77556: PUSH
77557: EMPTY
77558: LIST
77559: LIST
77560: LIST
77561: LIST
77562: IN
77563: NOT
77564: OR
77565: IFFALSE 77569
// exit ;
77567: GO 77652
// tmp := [ ] ;
77569: LD_ADDR_VAR 0 5
77573: PUSH
77574: EMPTY
77575: ST_TO_ADDR
// for i in units do
77576: LD_ADDR_VAR 0 4
77580: PUSH
77581: LD_VAR 0 1
77585: PUSH
77586: FOR_IN
77587: IFFALSE 77621
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
77589: LD_ADDR_VAR 0 5
77593: PUSH
77594: LD_VAR 0 5
77598: PPUSH
77599: LD_VAR 0 4
77603: PPUSH
77604: LD_VAR 0 2
77608: PPUSH
77609: CALL_OW 259
77613: PPUSH
77614: CALL 79047 0 2
77618: ST_TO_ADDR
77619: GO 77586
77621: POP
77622: POP
// if not tmp then
77623: LD_VAR 0 5
77627: NOT
77628: IFFALSE 77632
// exit ;
77630: GO 77652
// result := SortListByListDesc ( units , tmp ) ;
77632: LD_ADDR_VAR 0 3
77636: PUSH
77637: LD_VAR 0 1
77641: PPUSH
77642: LD_VAR 0 5
77646: PPUSH
77647: CALL_OW 77
77651: ST_TO_ADDR
// end ;
77652: LD_VAR 0 3
77656: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77657: LD_INT 0
77659: PPUSH
77660: PPUSH
77661: PPUSH
// result := false ;
77662: LD_ADDR_VAR 0 3
77666: PUSH
77667: LD_INT 0
77669: ST_TO_ADDR
// if not building then
77670: LD_VAR 0 2
77674: NOT
77675: IFFALSE 77679
// exit ;
77677: GO 77823
// x := GetX ( building ) ;
77679: LD_ADDR_VAR 0 4
77683: PUSH
77684: LD_VAR 0 2
77688: PPUSH
77689: CALL_OW 250
77693: ST_TO_ADDR
// y := GetY ( building ) ;
77694: LD_ADDR_VAR 0 5
77698: PUSH
77699: LD_VAR 0 2
77703: PPUSH
77704: CALL_OW 251
77708: ST_TO_ADDR
// if not x or not y then
77709: LD_VAR 0 4
77713: NOT
77714: IFTRUE 77723
77716: PUSH
77717: LD_VAR 0 5
77721: NOT
77722: OR
77723: IFFALSE 77727
// exit ;
77725: GO 77823
// if GetTaskList ( unit ) then
77727: LD_VAR 0 1
77731: PPUSH
77732: CALL_OW 437
77736: IFFALSE 77823
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77738: LD_STRING e
77740: PUSH
77741: LD_VAR 0 1
77745: PPUSH
77746: CALL_OW 437
77750: PUSH
77751: LD_INT 1
77753: ARRAY
77754: PUSH
77755: LD_INT 1
77757: ARRAY
77758: EQUAL
77759: IFFALSE 77786
77761: PUSH
77762: LD_VAR 0 4
77766: PUSH
77767: LD_VAR 0 1
77771: PPUSH
77772: CALL_OW 437
77776: PUSH
77777: LD_INT 1
77779: ARRAY
77780: PUSH
77781: LD_INT 2
77783: ARRAY
77784: EQUAL
77785: AND
77786: IFFALSE 77813
77788: PUSH
77789: LD_VAR 0 5
77793: PUSH
77794: LD_VAR 0 1
77798: PPUSH
77799: CALL_OW 437
77803: PUSH
77804: LD_INT 1
77806: ARRAY
77807: PUSH
77808: LD_INT 3
77810: ARRAY
77811: EQUAL
77812: AND
77813: IFFALSE 77823
// result := true end ;
77815: LD_ADDR_VAR 0 3
77819: PUSH
77820: LD_INT 1
77822: ST_TO_ADDR
// end ;
77823: LD_VAR 0 3
77827: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77828: LD_INT 0
77830: PPUSH
// result := false ;
77831: LD_ADDR_VAR 0 4
77835: PUSH
77836: LD_INT 0
77838: ST_TO_ADDR
// if GetTaskList ( unit ) then
77839: LD_VAR 0 1
77843: PPUSH
77844: CALL_OW 437
77848: IFFALSE 77935
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77850: LD_STRING M
77852: PUSH
77853: LD_VAR 0 1
77857: PPUSH
77858: CALL_OW 437
77862: PUSH
77863: LD_INT 1
77865: ARRAY
77866: PUSH
77867: LD_INT 1
77869: ARRAY
77870: EQUAL
77871: IFFALSE 77898
77873: PUSH
77874: LD_VAR 0 2
77878: PUSH
77879: LD_VAR 0 1
77883: PPUSH
77884: CALL_OW 437
77888: PUSH
77889: LD_INT 1
77891: ARRAY
77892: PUSH
77893: LD_INT 2
77895: ARRAY
77896: EQUAL
77897: AND
77898: IFFALSE 77925
77900: PUSH
77901: LD_VAR 0 3
77905: PUSH
77906: LD_VAR 0 1
77910: PPUSH
77911: CALL_OW 437
77915: PUSH
77916: LD_INT 1
77918: ARRAY
77919: PUSH
77920: LD_INT 3
77922: ARRAY
77923: EQUAL
77924: AND
77925: IFFALSE 77935
// result := true ;
77927: LD_ADDR_VAR 0 4
77931: PUSH
77932: LD_INT 1
77934: ST_TO_ADDR
// end ; end ;
77935: LD_VAR 0 4
77939: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77940: LD_INT 0
77942: PPUSH
77943: PPUSH
77944: PPUSH
77945: PPUSH
// if not unit or not area then
77946: LD_VAR 0 1
77950: NOT
77951: IFTRUE 77960
77953: PUSH
77954: LD_VAR 0 2
77958: NOT
77959: OR
77960: IFFALSE 77964
// exit ;
77962: GO 78140
// tmp := AreaToList ( area , i ) ;
77964: LD_ADDR_VAR 0 6
77968: PUSH
77969: LD_VAR 0 2
77973: PPUSH
77974: LD_VAR 0 5
77978: PPUSH
77979: CALL_OW 517
77983: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77984: LD_ADDR_VAR 0 5
77988: PUSH
77989: DOUBLE
77990: LD_INT 1
77992: DEC
77993: ST_TO_ADDR
77994: LD_VAR 0 6
77998: PUSH
77999: LD_INT 1
78001: ARRAY
78002: PUSH
78003: FOR_TO
78004: IFFALSE 78138
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
78006: LD_ADDR_VAR 0 7
78010: PUSH
78011: LD_VAR 0 6
78015: PUSH
78016: LD_INT 1
78018: ARRAY
78019: PUSH
78020: LD_VAR 0 5
78024: ARRAY
78025: PUSH
78026: LD_VAR 0 6
78030: PUSH
78031: LD_INT 2
78033: ARRAY
78034: PUSH
78035: LD_VAR 0 5
78039: ARRAY
78040: PUSH
78041: EMPTY
78042: LIST
78043: LIST
78044: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
78045: LD_INT 92
78047: PUSH
78048: LD_VAR 0 7
78052: PUSH
78053: LD_INT 1
78055: ARRAY
78056: PUSH
78057: LD_VAR 0 7
78061: PUSH
78062: LD_INT 2
78064: ARRAY
78065: PUSH
78066: LD_INT 2
78068: PUSH
78069: EMPTY
78070: LIST
78071: LIST
78072: LIST
78073: LIST
78074: PPUSH
78075: CALL_OW 69
78079: PUSH
78080: LD_INT 0
78082: EQUAL
78083: IFFALSE 78136
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
78085: LD_VAR 0 1
78089: PPUSH
78090: LD_VAR 0 7
78094: PUSH
78095: LD_INT 1
78097: ARRAY
78098: PPUSH
78099: LD_VAR 0 7
78103: PUSH
78104: LD_INT 2
78106: ARRAY
78107: PPUSH
78108: LD_VAR 0 3
78112: PPUSH
78113: CALL_OW 48
// result := IsPlaced ( unit ) ;
78117: LD_ADDR_VAR 0 4
78121: PUSH
78122: LD_VAR 0 1
78126: PPUSH
78127: CALL_OW 305
78131: ST_TO_ADDR
// exit ;
78132: POP
78133: POP
78134: GO 78140
// end ; end ;
78136: GO 78003
78138: POP
78139: POP
// end ;
78140: LD_VAR 0 4
78144: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
78145: LD_INT 0
78147: PPUSH
78148: PPUSH
78149: PPUSH
// if not side or side > 8 then
78150: LD_VAR 0 1
78154: NOT
78155: IFTRUE 78167
78157: PUSH
78158: LD_VAR 0 1
78162: PUSH
78163: LD_INT 8
78165: GREATER
78166: OR
78167: IFFALSE 78171
// exit ;
78169: GO 78358
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
78171: LD_ADDR_VAR 0 4
78175: PUSH
78176: LD_INT 22
78178: PUSH
78179: LD_VAR 0 1
78183: PUSH
78184: EMPTY
78185: LIST
78186: LIST
78187: PUSH
78188: LD_INT 21
78190: PUSH
78191: LD_INT 3
78193: PUSH
78194: EMPTY
78195: LIST
78196: LIST
78197: PUSH
78198: EMPTY
78199: LIST
78200: LIST
78201: PPUSH
78202: CALL_OW 69
78206: ST_TO_ADDR
// if not tmp then
78207: LD_VAR 0 4
78211: NOT
78212: IFFALSE 78216
// exit ;
78214: GO 78358
// enable_addtolog := true ;
78216: LD_ADDR_OWVAR 81
78220: PUSH
78221: LD_INT 1
78223: ST_TO_ADDR
// AddToLog ( [ ) ;
78224: LD_STRING [
78226: PPUSH
78227: CALL_OW 561
// for i in tmp do
78231: LD_ADDR_VAR 0 3
78235: PUSH
78236: LD_VAR 0 4
78240: PUSH
78241: FOR_IN
78242: IFFALSE 78349
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
78244: LD_STRING [
78246: PUSH
78247: LD_VAR 0 3
78251: PPUSH
78252: CALL_OW 266
78256: STR
78257: PUSH
78258: LD_STRING , 
78260: STR
78261: PUSH
78262: LD_VAR 0 3
78266: PPUSH
78267: CALL_OW 250
78271: STR
78272: PUSH
78273: LD_STRING , 
78275: STR
78276: PUSH
78277: LD_VAR 0 3
78281: PPUSH
78282: CALL_OW 251
78286: STR
78287: PUSH
78288: LD_STRING , 
78290: STR
78291: PUSH
78292: LD_VAR 0 3
78296: PPUSH
78297: CALL_OW 254
78301: STR
78302: PUSH
78303: LD_STRING , 
78305: STR
78306: PUSH
78307: LD_VAR 0 3
78311: PPUSH
78312: LD_INT 1
78314: PPUSH
78315: CALL_OW 268
78319: STR
78320: PUSH
78321: LD_STRING , 
78323: STR
78324: PUSH
78325: LD_VAR 0 3
78329: PPUSH
78330: LD_INT 2
78332: PPUSH
78333: CALL_OW 268
78337: STR
78338: PUSH
78339: LD_STRING ],
78341: STR
78342: PPUSH
78343: CALL_OW 561
// end ;
78347: GO 78241
78349: POP
78350: POP
// AddToLog ( ]; ) ;
78351: LD_STRING ];
78353: PPUSH
78354: CALL_OW 561
// end ;
78358: LD_VAR 0 2
78362: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
78363: LD_INT 0
78365: PPUSH
78366: PPUSH
78367: PPUSH
78368: PPUSH
78369: PPUSH
// if not area or not rate or not max then
78370: LD_VAR 0 1
78374: NOT
78375: IFTRUE 78384
78377: PUSH
78378: LD_VAR 0 2
78382: NOT
78383: OR
78384: IFTRUE 78393
78386: PUSH
78387: LD_VAR 0 4
78391: NOT
78392: OR
78393: IFFALSE 78397
// exit ;
78395: GO 78586
// while 1 do
78397: LD_INT 1
78399: IFFALSE 78586
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
78401: LD_ADDR_VAR 0 9
78405: PUSH
78406: LD_VAR 0 1
78410: PPUSH
78411: LD_INT 1
78413: PPUSH
78414: CALL_OW 287
78418: PUSH
78419: LD_INT 10
78421: MUL
78422: ST_TO_ADDR
// r := rate / 10 ;
78423: LD_ADDR_VAR 0 7
78427: PUSH
78428: LD_VAR 0 2
78432: PUSH
78433: LD_INT 10
78435: DIVREAL
78436: ST_TO_ADDR
// time := 1 1$00 ;
78437: LD_ADDR_VAR 0 8
78441: PUSH
78442: LD_INT 2100
78444: ST_TO_ADDR
// if amount < min then
78445: LD_VAR 0 9
78449: PUSH
78450: LD_VAR 0 3
78454: LESS
78455: IFFALSE 78473
// r := r * 2 else
78457: LD_ADDR_VAR 0 7
78461: PUSH
78462: LD_VAR 0 7
78466: PUSH
78467: LD_INT 2
78469: MUL
78470: ST_TO_ADDR
78471: GO 78499
// if amount > max then
78473: LD_VAR 0 9
78477: PUSH
78478: LD_VAR 0 4
78482: GREATER
78483: IFFALSE 78499
// r := r / 2 ;
78485: LD_ADDR_VAR 0 7
78489: PUSH
78490: LD_VAR 0 7
78494: PUSH
78495: LD_INT 2
78497: DIVREAL
78498: ST_TO_ADDR
// time := time / r ;
78499: LD_ADDR_VAR 0 8
78503: PUSH
78504: LD_VAR 0 8
78508: PUSH
78509: LD_VAR 0 7
78513: DIVREAL
78514: ST_TO_ADDR
// if time < 0 then
78515: LD_VAR 0 8
78519: PUSH
78520: LD_INT 0
78522: LESS
78523: IFFALSE 78540
// time := time * - 1 ;
78525: LD_ADDR_VAR 0 8
78529: PUSH
78530: LD_VAR 0 8
78534: PUSH
78535: LD_INT 1
78537: NEG
78538: MUL
78539: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78540: LD_VAR 0 8
78544: PUSH
78545: LD_INT 35
78547: PPUSH
78548: LD_INT 875
78550: PPUSH
78551: CALL_OW 12
78555: PLUS
78556: PPUSH
78557: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78561: LD_INT 1
78563: PPUSH
78564: LD_INT 5
78566: PPUSH
78567: CALL_OW 12
78571: PPUSH
78572: LD_VAR 0 1
78576: PPUSH
78577: LD_INT 1
78579: PPUSH
78580: CALL_OW 55
// end ;
78584: GO 78397
// end ;
78586: LD_VAR 0 5
78590: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78591: LD_INT 0
78593: PPUSH
78594: PPUSH
78595: PPUSH
78596: PPUSH
78597: PPUSH
78598: PPUSH
78599: PPUSH
78600: PPUSH
// if not turrets or not factories then
78601: LD_VAR 0 1
78605: NOT
78606: IFTRUE 78615
78608: PUSH
78609: LD_VAR 0 2
78613: NOT
78614: OR
78615: IFFALSE 78619
// exit ;
78617: GO 78926
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78619: LD_ADDR_VAR 0 10
78623: PUSH
78624: LD_INT 5
78626: PUSH
78627: LD_INT 6
78629: PUSH
78630: EMPTY
78631: LIST
78632: LIST
78633: PUSH
78634: LD_INT 2
78636: PUSH
78637: LD_INT 4
78639: PUSH
78640: EMPTY
78641: LIST
78642: LIST
78643: PUSH
78644: LD_INT 3
78646: PUSH
78647: LD_INT 5
78649: PUSH
78650: EMPTY
78651: LIST
78652: LIST
78653: PUSH
78654: EMPTY
78655: LIST
78656: LIST
78657: LIST
78658: PUSH
78659: LD_INT 24
78661: PUSH
78662: LD_INT 25
78664: PUSH
78665: EMPTY
78666: LIST
78667: LIST
78668: PUSH
78669: LD_INT 23
78671: PUSH
78672: LD_INT 27
78674: PUSH
78675: EMPTY
78676: LIST
78677: LIST
78678: PUSH
78679: EMPTY
78680: LIST
78681: LIST
78682: PUSH
78683: LD_INT 42
78685: PUSH
78686: LD_INT 43
78688: PUSH
78689: EMPTY
78690: LIST
78691: LIST
78692: PUSH
78693: LD_INT 44
78695: PUSH
78696: LD_INT 46
78698: PUSH
78699: EMPTY
78700: LIST
78701: LIST
78702: PUSH
78703: LD_INT 45
78705: PUSH
78706: LD_INT 47
78708: PUSH
78709: EMPTY
78710: LIST
78711: LIST
78712: PUSH
78713: EMPTY
78714: LIST
78715: LIST
78716: LIST
78717: PUSH
78718: EMPTY
78719: LIST
78720: LIST
78721: LIST
78722: ST_TO_ADDR
// result := [ ] ;
78723: LD_ADDR_VAR 0 3
78727: PUSH
78728: EMPTY
78729: ST_TO_ADDR
// for i in turrets do
78730: LD_ADDR_VAR 0 4
78734: PUSH
78735: LD_VAR 0 1
78739: PUSH
78740: FOR_IN
78741: IFFALSE 78924
// begin nat := GetNation ( i ) ;
78743: LD_ADDR_VAR 0 7
78747: PUSH
78748: LD_VAR 0 4
78752: PPUSH
78753: CALL_OW 248
78757: ST_TO_ADDR
// weapon := 0 ;
78758: LD_ADDR_VAR 0 8
78762: PUSH
78763: LD_INT 0
78765: ST_TO_ADDR
// if not nat then
78766: LD_VAR 0 7
78770: NOT
78771: IFFALSE 78775
// continue ;
78773: GO 78740
// for j in list [ nat ] do
78775: LD_ADDR_VAR 0 5
78779: PUSH
78780: LD_VAR 0 10
78784: PUSH
78785: LD_VAR 0 7
78789: ARRAY
78790: PUSH
78791: FOR_IN
78792: IFFALSE 78833
// if GetBWeapon ( i ) = j [ 1 ] then
78794: LD_VAR 0 4
78798: PPUSH
78799: CALL_OW 269
78803: PUSH
78804: LD_VAR 0 5
78808: PUSH
78809: LD_INT 1
78811: ARRAY
78812: EQUAL
78813: IFFALSE 78831
// begin weapon := j [ 2 ] ;
78815: LD_ADDR_VAR 0 8
78819: PUSH
78820: LD_VAR 0 5
78824: PUSH
78825: LD_INT 2
78827: ARRAY
78828: ST_TO_ADDR
// break ;
78829: GO 78833
// end ;
78831: GO 78791
78833: POP
78834: POP
// if not weapon then
78835: LD_VAR 0 8
78839: NOT
78840: IFFALSE 78844
// continue ;
78842: GO 78740
// for k in factories do
78844: LD_ADDR_VAR 0 6
78848: PUSH
78849: LD_VAR 0 2
78853: PUSH
78854: FOR_IN
78855: IFFALSE 78920
// begin weapons := AvailableWeaponList ( k ) ;
78857: LD_ADDR_VAR 0 9
78861: PUSH
78862: LD_VAR 0 6
78866: PPUSH
78867: CALL_OW 478
78871: ST_TO_ADDR
// if not weapons then
78872: LD_VAR 0 9
78876: NOT
78877: IFFALSE 78881
// continue ;
78879: GO 78854
// if weapon in weapons then
78881: LD_VAR 0 8
78885: PUSH
78886: LD_VAR 0 9
78890: IN
78891: IFFALSE 78918
// begin result := [ i , weapon ] ;
78893: LD_ADDR_VAR 0 3
78897: PUSH
78898: LD_VAR 0 4
78902: PUSH
78903: LD_VAR 0 8
78907: PUSH
78908: EMPTY
78909: LIST
78910: LIST
78911: ST_TO_ADDR
// exit ;
78912: POP
78913: POP
78914: POP
78915: POP
78916: GO 78926
// end ; end ;
78918: GO 78854
78920: POP
78921: POP
// end ;
78922: GO 78740
78924: POP
78925: POP
// end ;
78926: LD_VAR 0 3
78930: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78931: LD_INT 0
78933: PPUSH
// if not side or side > 8 then
78934: LD_VAR 0 3
78938: NOT
78939: IFTRUE 78951
78941: PUSH
78942: LD_VAR 0 3
78946: PUSH
78947: LD_INT 8
78949: GREATER
78950: OR
78951: IFFALSE 78955
// exit ;
78953: GO 79014
// if not range then
78955: LD_VAR 0 4
78959: NOT
78960: IFFALSE 78971
// range := - 12 ;
78962: LD_ADDR_VAR 0 4
78966: PUSH
78967: LD_INT 12
78969: NEG
78970: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78971: LD_VAR 0 1
78975: PPUSH
78976: LD_VAR 0 2
78980: PPUSH
78981: LD_VAR 0 3
78985: PPUSH
78986: LD_VAR 0 4
78990: PPUSH
78991: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78995: LD_VAR 0 1
78999: PPUSH
79000: LD_VAR 0 2
79004: PPUSH
79005: LD_VAR 0 3
79009: PPUSH
79010: CALL_OW 331
// end ;
79014: LD_VAR 0 5
79018: RET
// export function Video ( mode ) ; begin
79019: LD_INT 0
79021: PPUSH
// ingame_video = mode ;
79022: LD_ADDR_OWVAR 52
79026: PUSH
79027: LD_VAR 0 1
79031: ST_TO_ADDR
// interface_hidden = mode ;
79032: LD_ADDR_OWVAR 54
79036: PUSH
79037: LD_VAR 0 1
79041: ST_TO_ADDR
// end ;
79042: LD_VAR 0 2
79046: RET
// export function Join ( array , element ) ; begin
79047: LD_INT 0
79049: PPUSH
// result := Replace ( array , array + 1 , element ) ;
79050: LD_ADDR_VAR 0 3
79054: PUSH
79055: LD_VAR 0 1
79059: PPUSH
79060: LD_VAR 0 1
79064: PUSH
79065: LD_INT 1
79067: PLUS
79068: PPUSH
79069: LD_VAR 0 2
79073: PPUSH
79074: CALL_OW 1
79078: ST_TO_ADDR
// end ;
79079: LD_VAR 0 3
79083: RET
// export function JoinUnion ( array , element ) ; begin
79084: LD_INT 0
79086: PPUSH
// result := array union element ;
79087: LD_ADDR_VAR 0 3
79091: PUSH
79092: LD_VAR 0 1
79096: PUSH
79097: LD_VAR 0 2
79101: UNION
79102: ST_TO_ADDR
// end ;
79103: LD_VAR 0 3
79107: RET
// export function GetBehemoths ( side ) ; begin
79108: LD_INT 0
79110: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
79111: LD_ADDR_VAR 0 2
79115: PUSH
79116: LD_INT 22
79118: PUSH
79119: LD_VAR 0 1
79123: PUSH
79124: EMPTY
79125: LIST
79126: LIST
79127: PUSH
79128: LD_INT 31
79130: PUSH
79131: LD_INT 25
79133: PUSH
79134: EMPTY
79135: LIST
79136: LIST
79137: PUSH
79138: EMPTY
79139: LIST
79140: LIST
79141: PPUSH
79142: CALL_OW 69
79146: ST_TO_ADDR
// end ;
79147: LD_VAR 0 2
79151: RET
// export function Shuffle ( array ) ; var i , index ; begin
79152: LD_INT 0
79154: PPUSH
79155: PPUSH
79156: PPUSH
// result := [ ] ;
79157: LD_ADDR_VAR 0 2
79161: PUSH
79162: EMPTY
79163: ST_TO_ADDR
// if not array then
79164: LD_VAR 0 1
79168: NOT
79169: IFFALSE 79173
// exit ;
79171: GO 79272
// Randomize ;
79173: CALL_OW 10
// for i = array downto 1 do
79177: LD_ADDR_VAR 0 3
79181: PUSH
79182: DOUBLE
79183: LD_VAR 0 1
79187: INC
79188: ST_TO_ADDR
79189: LD_INT 1
79191: PUSH
79192: FOR_DOWNTO
79193: IFFALSE 79270
// begin index := rand ( 1 , array ) ;
79195: LD_ADDR_VAR 0 4
79199: PUSH
79200: LD_INT 1
79202: PPUSH
79203: LD_VAR 0 1
79207: PPUSH
79208: CALL_OW 12
79212: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
79213: LD_ADDR_VAR 0 2
79217: PUSH
79218: LD_VAR 0 2
79222: PPUSH
79223: LD_VAR 0 2
79227: PUSH
79228: LD_INT 1
79230: PLUS
79231: PPUSH
79232: LD_VAR 0 1
79236: PUSH
79237: LD_VAR 0 4
79241: ARRAY
79242: PPUSH
79243: CALL_OW 2
79247: ST_TO_ADDR
// array := Delete ( array , index ) ;
79248: LD_ADDR_VAR 0 1
79252: PUSH
79253: LD_VAR 0 1
79257: PPUSH
79258: LD_VAR 0 4
79262: PPUSH
79263: CALL_OW 3
79267: ST_TO_ADDR
// end ;
79268: GO 79192
79270: POP
79271: POP
// end ;
79272: LD_VAR 0 2
79276: RET
// export function GetBaseMaterials ( base ) ; begin
79277: LD_INT 0
79279: PPUSH
// result := [ 0 , 0 , 0 ] ;
79280: LD_ADDR_VAR 0 2
79284: PUSH
79285: LD_INT 0
79287: PUSH
79288: LD_INT 0
79290: PUSH
79291: LD_INT 0
79293: PUSH
79294: EMPTY
79295: LIST
79296: LIST
79297: LIST
79298: ST_TO_ADDR
// if not base then
79299: LD_VAR 0 1
79303: NOT
79304: IFFALSE 79308
// exit ;
79306: GO 79357
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
79308: LD_ADDR_VAR 0 2
79312: PUSH
79313: LD_VAR 0 1
79317: PPUSH
79318: LD_INT 1
79320: PPUSH
79321: CALL_OW 275
79325: PUSH
79326: LD_VAR 0 1
79330: PPUSH
79331: LD_INT 2
79333: PPUSH
79334: CALL_OW 275
79338: PUSH
79339: LD_VAR 0 1
79343: PPUSH
79344: LD_INT 3
79346: PPUSH
79347: CALL_OW 275
79351: PUSH
79352: EMPTY
79353: LIST
79354: LIST
79355: LIST
79356: ST_TO_ADDR
// end ;
79357: LD_VAR 0 2
79361: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
79362: LD_INT 0
79364: PPUSH
79365: PPUSH
// result := array ;
79366: LD_ADDR_VAR 0 3
79370: PUSH
79371: LD_VAR 0 1
79375: ST_TO_ADDR
// if size >= result then
79376: LD_VAR 0 2
79380: PUSH
79381: LD_VAR 0 3
79385: GREATEREQUAL
79386: IFFALSE 79390
// exit ;
79388: GO 79440
// if size then
79390: LD_VAR 0 2
79394: IFFALSE 79440
// for i := array downto size do
79396: LD_ADDR_VAR 0 4
79400: PUSH
79401: DOUBLE
79402: LD_VAR 0 1
79406: INC
79407: ST_TO_ADDR
79408: LD_VAR 0 2
79412: PUSH
79413: FOR_DOWNTO
79414: IFFALSE 79438
// result := Delete ( result , result ) ;
79416: LD_ADDR_VAR 0 3
79420: PUSH
79421: LD_VAR 0 3
79425: PPUSH
79426: LD_VAR 0 3
79430: PPUSH
79431: CALL_OW 3
79435: ST_TO_ADDR
79436: GO 79413
79438: POP
79439: POP
// end ;
79440: LD_VAR 0 3
79444: RET
// export function ComExit ( unit ) ; var tmp ; begin
79445: LD_INT 0
79447: PPUSH
79448: PPUSH
// if not IsInUnit ( unit ) then
79449: LD_VAR 0 1
79453: PPUSH
79454: CALL_OW 310
79458: NOT
79459: IFFALSE 79463
// exit ;
79461: GO 79523
// tmp := IsInUnit ( unit ) ;
79463: LD_ADDR_VAR 0 3
79467: PUSH
79468: LD_VAR 0 1
79472: PPUSH
79473: CALL_OW 310
79477: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
79478: LD_VAR 0 3
79482: PPUSH
79483: CALL_OW 247
79487: PUSH
79488: LD_INT 2
79490: EQUAL
79491: IFFALSE 79504
// ComExitVehicle ( unit ) else
79493: LD_VAR 0 1
79497: PPUSH
79498: CALL_OW 121
79502: GO 79513
// ComExitBuilding ( unit ) ;
79504: LD_VAR 0 1
79508: PPUSH
79509: CALL_OW 122
// result := tmp ;
79513: LD_ADDR_VAR 0 2
79517: PUSH
79518: LD_VAR 0 3
79522: ST_TO_ADDR
// end ;
79523: LD_VAR 0 2
79527: RET
// export function ComExitAll ( units ) ; var i ; begin
79528: LD_INT 0
79530: PPUSH
79531: PPUSH
// if not units then
79532: LD_VAR 0 1
79536: NOT
79537: IFFALSE 79541
// exit ;
79539: GO 79567
// for i in units do
79541: LD_ADDR_VAR 0 3
79545: PUSH
79546: LD_VAR 0 1
79550: PUSH
79551: FOR_IN
79552: IFFALSE 79565
// ComExit ( i ) ;
79554: LD_VAR 0 3
79558: PPUSH
79559: CALL 79445 0 1
79563: GO 79551
79565: POP
79566: POP
// end ;
79567: LD_VAR 0 2
79571: RET
// export function ResetHc ; begin
79572: LD_INT 0
79574: PPUSH
// InitHc ;
79575: CALL_OW 19
// hc_importance := 0 ;
79579: LD_ADDR_OWVAR 32
79583: PUSH
79584: LD_INT 0
79586: ST_TO_ADDR
// end ;
79587: LD_VAR 0 1
79591: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79592: LD_INT 0
79594: PPUSH
79595: PPUSH
79596: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79597: LD_ADDR_VAR 0 6
79601: PUSH
79602: LD_VAR 0 1
79606: PUSH
79607: LD_VAR 0 3
79611: PLUS
79612: PUSH
79613: LD_INT 2
79615: DIV
79616: ST_TO_ADDR
// if _x < 0 then
79617: LD_VAR 0 6
79621: PUSH
79622: LD_INT 0
79624: LESS
79625: IFFALSE 79642
// _x := _x * - 1 ;
79627: LD_ADDR_VAR 0 6
79631: PUSH
79632: LD_VAR 0 6
79636: PUSH
79637: LD_INT 1
79639: NEG
79640: MUL
79641: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79642: LD_ADDR_VAR 0 7
79646: PUSH
79647: LD_VAR 0 2
79651: PUSH
79652: LD_VAR 0 4
79656: PLUS
79657: PUSH
79658: LD_INT 2
79660: DIV
79661: ST_TO_ADDR
// if _y < 0 then
79662: LD_VAR 0 7
79666: PUSH
79667: LD_INT 0
79669: LESS
79670: IFFALSE 79687
// _y := _y * - 1 ;
79672: LD_ADDR_VAR 0 7
79676: PUSH
79677: LD_VAR 0 7
79681: PUSH
79682: LD_INT 1
79684: NEG
79685: MUL
79686: ST_TO_ADDR
// result := [ _x , _y ] ;
79687: LD_ADDR_VAR 0 5
79691: PUSH
79692: LD_VAR 0 6
79696: PUSH
79697: LD_VAR 0 7
79701: PUSH
79702: EMPTY
79703: LIST
79704: LIST
79705: ST_TO_ADDR
// end ;
79706: LD_VAR 0 5
79710: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79711: LD_INT 0
79713: PPUSH
79714: PPUSH
79715: PPUSH
79716: PPUSH
// task := GetTaskList ( unit ) ;
79717: LD_ADDR_VAR 0 7
79721: PUSH
79722: LD_VAR 0 1
79726: PPUSH
79727: CALL_OW 437
79731: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79732: LD_VAR 0 7
79736: NOT
79737: IFFALSE 79756
79739: PUSH
79740: LD_VAR 0 1
79744: PPUSH
79745: LD_VAR 0 2
79749: PPUSH
79750: CALL_OW 308
79754: NOT
79755: AND
79756: IFFALSE 79760
// exit ;
79758: GO 79878
// if IsInArea ( unit , area ) then
79760: LD_VAR 0 1
79764: PPUSH
79765: LD_VAR 0 2
79769: PPUSH
79770: CALL_OW 308
79774: IFFALSE 79792
// begin ComMoveToArea ( unit , goAway ) ;
79776: LD_VAR 0 1
79780: PPUSH
79781: LD_VAR 0 3
79785: PPUSH
79786: CALL_OW 113
// exit ;
79790: GO 79878
// end ; if task [ 1 ] [ 1 ] <> M then
79792: LD_VAR 0 7
79796: PUSH
79797: LD_INT 1
79799: ARRAY
79800: PUSH
79801: LD_INT 1
79803: ARRAY
79804: PUSH
79805: LD_STRING M
79807: NONEQUAL
79808: IFFALSE 79812
// exit ;
79810: GO 79878
// x := task [ 1 ] [ 2 ] ;
79812: LD_ADDR_VAR 0 5
79816: PUSH
79817: LD_VAR 0 7
79821: PUSH
79822: LD_INT 1
79824: ARRAY
79825: PUSH
79826: LD_INT 2
79828: ARRAY
79829: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79830: LD_ADDR_VAR 0 6
79834: PUSH
79835: LD_VAR 0 7
79839: PUSH
79840: LD_INT 1
79842: ARRAY
79843: PUSH
79844: LD_INT 3
79846: ARRAY
79847: ST_TO_ADDR
// if InArea ( x , y , area ) then
79848: LD_VAR 0 5
79852: PPUSH
79853: LD_VAR 0 6
79857: PPUSH
79858: LD_VAR 0 2
79862: PPUSH
79863: CALL_OW 309
79867: IFFALSE 79878
// ComStop ( unit ) ;
79869: LD_VAR 0 1
79873: PPUSH
79874: CALL_OW 141
// end ;
79878: LD_VAR 0 4
79882: RET
// export function Abs ( value ) ; begin
79883: LD_INT 0
79885: PPUSH
// result := value ;
79886: LD_ADDR_VAR 0 2
79890: PUSH
79891: LD_VAR 0 1
79895: ST_TO_ADDR
// if value < 0 then
79896: LD_VAR 0 1
79900: PUSH
79901: LD_INT 0
79903: LESS
79904: IFFALSE 79921
// result := value * - 1 ;
79906: LD_ADDR_VAR 0 2
79910: PUSH
79911: LD_VAR 0 1
79915: PUSH
79916: LD_INT 1
79918: NEG
79919: MUL
79920: ST_TO_ADDR
// end ;
79921: LD_VAR 0 2
79925: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79926: LD_INT 0
79928: PPUSH
79929: PPUSH
79930: PPUSH
79931: PPUSH
79932: PPUSH
79933: PPUSH
79934: PPUSH
79935: PPUSH
// if not unit or not building then
79936: LD_VAR 0 1
79940: NOT
79941: IFTRUE 79950
79943: PUSH
79944: LD_VAR 0 2
79948: NOT
79949: OR
79950: IFFALSE 79954
// exit ;
79952: GO 80182
// x := GetX ( building ) ;
79954: LD_ADDR_VAR 0 4
79958: PUSH
79959: LD_VAR 0 2
79963: PPUSH
79964: CALL_OW 250
79968: ST_TO_ADDR
// y := GetY ( building ) ;
79969: LD_ADDR_VAR 0 6
79973: PUSH
79974: LD_VAR 0 2
79978: PPUSH
79979: CALL_OW 251
79983: ST_TO_ADDR
// d := GetDir ( building ) ;
79984: LD_ADDR_VAR 0 8
79988: PUSH
79989: LD_VAR 0 2
79993: PPUSH
79994: CALL_OW 254
79998: ST_TO_ADDR
// r := 4 ;
79999: LD_ADDR_VAR 0 9
80003: PUSH
80004: LD_INT 4
80006: ST_TO_ADDR
// for i := 1 to 5 do
80007: LD_ADDR_VAR 0 10
80011: PUSH
80012: DOUBLE
80013: LD_INT 1
80015: DEC
80016: ST_TO_ADDR
80017: LD_INT 5
80019: PUSH
80020: FOR_TO
80021: IFFALSE 80180
// begin _x := ShiftX ( x , d , r + i ) ;
80023: LD_ADDR_VAR 0 5
80027: PUSH
80028: LD_VAR 0 4
80032: PPUSH
80033: LD_VAR 0 8
80037: PPUSH
80038: LD_VAR 0 9
80042: PUSH
80043: LD_VAR 0 10
80047: PLUS
80048: PPUSH
80049: CALL_OW 272
80053: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
80054: LD_ADDR_VAR 0 7
80058: PUSH
80059: LD_VAR 0 6
80063: PPUSH
80064: LD_VAR 0 8
80068: PPUSH
80069: LD_VAR 0 9
80073: PUSH
80074: LD_VAR 0 10
80078: PLUS
80079: PPUSH
80080: CALL_OW 273
80084: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
80085: LD_VAR 0 5
80089: PPUSH
80090: LD_VAR 0 7
80094: PPUSH
80095: CALL_OW 488
80099: IFFALSE 80134
80101: PUSH
80102: LD_VAR 0 5
80106: PPUSH
80107: LD_VAR 0 7
80111: PPUSH
80112: CALL_OW 428
80116: PPUSH
80117: CALL_OW 247
80121: PUSH
80122: LD_INT 3
80124: PUSH
80125: LD_INT 2
80127: PUSH
80128: EMPTY
80129: LIST
80130: LIST
80131: IN
80132: NOT
80133: AND
80134: IFFALSE 80178
// begin ComMoveXY ( unit , _x , _y ) ;
80136: LD_VAR 0 1
80140: PPUSH
80141: LD_VAR 0 5
80145: PPUSH
80146: LD_VAR 0 7
80150: PPUSH
80151: CALL_OW 111
// result := [ _x , _y ] ;
80155: LD_ADDR_VAR 0 3
80159: PUSH
80160: LD_VAR 0 5
80164: PUSH
80165: LD_VAR 0 7
80169: PUSH
80170: EMPTY
80171: LIST
80172: LIST
80173: ST_TO_ADDR
// exit ;
80174: POP
80175: POP
80176: GO 80182
// end ; end ;
80178: GO 80020
80180: POP
80181: POP
// end ;
80182: LD_VAR 0 3
80186: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
80187: LD_INT 0
80189: PPUSH
80190: PPUSH
80191: PPUSH
// result := 0 ;
80192: LD_ADDR_VAR 0 3
80196: PUSH
80197: LD_INT 0
80199: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
80200: LD_VAR 0 1
80204: PUSH
80205: LD_INT 0
80207: LESS
80208: IFTRUE 80220
80210: PUSH
80211: LD_VAR 0 1
80215: PUSH
80216: LD_INT 8
80218: GREATER
80219: OR
80220: IFTRUE 80232
80222: PUSH
80223: LD_VAR 0 2
80227: PUSH
80228: LD_INT 0
80230: LESS
80231: OR
80232: IFTRUE 80244
80234: PUSH
80235: LD_VAR 0 2
80239: PUSH
80240: LD_INT 8
80242: GREATER
80243: OR
80244: IFFALSE 80248
// exit ;
80246: GO 80323
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
80248: LD_ADDR_VAR 0 4
80252: PUSH
80253: LD_INT 22
80255: PUSH
80256: LD_VAR 0 2
80260: PUSH
80261: EMPTY
80262: LIST
80263: LIST
80264: PPUSH
80265: CALL_OW 69
80269: PUSH
80270: FOR_IN
80271: IFFALSE 80321
// begin un := UnitShoot ( i ) ;
80273: LD_ADDR_VAR 0 5
80277: PUSH
80278: LD_VAR 0 4
80282: PPUSH
80283: CALL_OW 504
80287: ST_TO_ADDR
// if GetSide ( un ) = side1 then
80288: LD_VAR 0 5
80292: PPUSH
80293: CALL_OW 255
80297: PUSH
80298: LD_VAR 0 1
80302: EQUAL
80303: IFFALSE 80319
// begin result := un ;
80305: LD_ADDR_VAR 0 3
80309: PUSH
80310: LD_VAR 0 5
80314: ST_TO_ADDR
// exit ;
80315: POP
80316: POP
80317: GO 80323
// end ; end ;
80319: GO 80270
80321: POP
80322: POP
// end ;
80323: LD_VAR 0 3
80327: RET
// export function GetCargoBay ( units ) ; begin
80328: LD_INT 0
80330: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
80331: LD_ADDR_VAR 0 2
80335: PUSH
80336: LD_VAR 0 1
80340: PPUSH
80341: LD_INT 2
80343: PUSH
80344: LD_INT 34
80346: PUSH
80347: LD_INT 12
80349: PUSH
80350: EMPTY
80351: LIST
80352: LIST
80353: PUSH
80354: LD_INT 34
80356: PUSH
80357: LD_INT 51
80359: PUSH
80360: EMPTY
80361: LIST
80362: LIST
80363: PUSH
80364: LD_INT 34
80366: PUSH
80367: LD_INT 32
80369: PUSH
80370: EMPTY
80371: LIST
80372: LIST
80373: PUSH
80374: LD_INT 34
80376: PUSH
80377: LD_INT 89
80379: PUSH
80380: EMPTY
80381: LIST
80382: LIST
80383: PUSH
80384: EMPTY
80385: LIST
80386: LIST
80387: LIST
80388: LIST
80389: LIST
80390: PPUSH
80391: CALL_OW 72
80395: ST_TO_ADDR
// end ;
80396: LD_VAR 0 2
80400: RET
// export function Negate ( value ) ; begin
80401: LD_INT 0
80403: PPUSH
// result := not value ;
80404: LD_ADDR_VAR 0 2
80408: PUSH
80409: LD_VAR 0 1
80413: NOT
80414: ST_TO_ADDR
// end ;
80415: LD_VAR 0 2
80419: RET
// export function Inc ( value ) ; begin
80420: LD_INT 0
80422: PPUSH
// result := value + 1 ;
80423: LD_ADDR_VAR 0 2
80427: PUSH
80428: LD_VAR 0 1
80432: PUSH
80433: LD_INT 1
80435: PLUS
80436: ST_TO_ADDR
// end ;
80437: LD_VAR 0 2
80441: RET
// export function Dec ( value ) ; begin
80442: LD_INT 0
80444: PPUSH
// result := value - 1 ;
80445: LD_ADDR_VAR 0 2
80449: PUSH
80450: LD_VAR 0 1
80454: PUSH
80455: LD_INT 1
80457: MINUS
80458: ST_TO_ADDR
// end ;
80459: LD_VAR 0 2
80463: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
80464: LD_INT 0
80466: PPUSH
80467: PPUSH
80468: PPUSH
80469: PPUSH
80470: PPUSH
80471: PPUSH
80472: PPUSH
80473: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
80474: LD_VAR 0 1
80478: PPUSH
80479: LD_VAR 0 2
80483: PPUSH
80484: CALL_OW 488
80488: NOT
80489: IFTRUE 80508
80491: PUSH
80492: LD_VAR 0 3
80496: PPUSH
80497: LD_VAR 0 4
80501: PPUSH
80502: CALL_OW 488
80506: NOT
80507: OR
80508: IFFALSE 80521
// begin result := - 1 ;
80510: LD_ADDR_VAR 0 5
80514: PUSH
80515: LD_INT 1
80517: NEG
80518: ST_TO_ADDR
// exit ;
80519: GO 80756
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
80521: LD_ADDR_VAR 0 12
80525: PUSH
80526: LD_VAR 0 1
80530: PPUSH
80531: LD_VAR 0 2
80535: PPUSH
80536: LD_VAR 0 3
80540: PPUSH
80541: LD_VAR 0 4
80545: PPUSH
80546: CALL 79592 0 4
80550: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80551: LD_ADDR_VAR 0 11
80555: PUSH
80556: LD_VAR 0 1
80560: PPUSH
80561: LD_VAR 0 2
80565: PPUSH
80566: LD_VAR 0 12
80570: PUSH
80571: LD_INT 1
80573: ARRAY
80574: PPUSH
80575: LD_VAR 0 12
80579: PUSH
80580: LD_INT 2
80582: ARRAY
80583: PPUSH
80584: CALL_OW 298
80588: ST_TO_ADDR
// distance := 9999 ;
80589: LD_ADDR_VAR 0 10
80593: PUSH
80594: LD_INT 9999
80596: ST_TO_ADDR
// for i := 0 to 5 do
80597: LD_ADDR_VAR 0 6
80601: PUSH
80602: DOUBLE
80603: LD_INT 0
80605: DEC
80606: ST_TO_ADDR
80607: LD_INT 5
80609: PUSH
80610: FOR_TO
80611: IFFALSE 80754
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80613: LD_ADDR_VAR 0 7
80617: PUSH
80618: LD_VAR 0 1
80622: PPUSH
80623: LD_VAR 0 6
80627: PPUSH
80628: LD_VAR 0 11
80632: PPUSH
80633: CALL_OW 272
80637: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80638: LD_ADDR_VAR 0 8
80642: PUSH
80643: LD_VAR 0 2
80647: PPUSH
80648: LD_VAR 0 6
80652: PPUSH
80653: LD_VAR 0 11
80657: PPUSH
80658: CALL_OW 273
80662: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80663: LD_VAR 0 7
80667: PPUSH
80668: LD_VAR 0 8
80672: PPUSH
80673: CALL_OW 488
80677: NOT
80678: IFFALSE 80682
// continue ;
80680: GO 80610
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80682: LD_ADDR_VAR 0 9
80686: PUSH
80687: LD_VAR 0 12
80691: PUSH
80692: LD_INT 1
80694: ARRAY
80695: PPUSH
80696: LD_VAR 0 12
80700: PUSH
80701: LD_INT 2
80703: ARRAY
80704: PPUSH
80705: LD_VAR 0 7
80709: PPUSH
80710: LD_VAR 0 8
80714: PPUSH
80715: CALL_OW 298
80719: ST_TO_ADDR
// if tmp < distance then
80720: LD_VAR 0 9
80724: PUSH
80725: LD_VAR 0 10
80729: LESS
80730: IFFALSE 80752
// begin result := i ;
80732: LD_ADDR_VAR 0 5
80736: PUSH
80737: LD_VAR 0 6
80741: ST_TO_ADDR
// distance := tmp ;
80742: LD_ADDR_VAR 0 10
80746: PUSH
80747: LD_VAR 0 9
80751: ST_TO_ADDR
// end ; end ;
80752: GO 80610
80754: POP
80755: POP
// end ;
80756: LD_VAR 0 5
80760: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80761: LD_INT 0
80763: PPUSH
80764: PPUSH
// if not driver or not IsInUnit ( driver ) then
80765: LD_VAR 0 1
80769: NOT
80770: IFTRUE 80784
80772: PUSH
80773: LD_VAR 0 1
80777: PPUSH
80778: CALL_OW 310
80782: NOT
80783: OR
80784: IFFALSE 80788
// exit ;
80786: GO 80878
// vehicle := IsInUnit ( driver ) ;
80788: LD_ADDR_VAR 0 3
80792: PUSH
80793: LD_VAR 0 1
80797: PPUSH
80798: CALL_OW 310
80802: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80803: LD_VAR 0 1
80807: PPUSH
80808: LD_STRING \
80810: PUSH
80811: LD_INT 0
80813: PUSH
80814: LD_INT 0
80816: PUSH
80817: LD_INT 0
80819: PUSH
80820: LD_INT 0
80822: PUSH
80823: LD_INT 0
80825: PUSH
80826: LD_INT 0
80828: PUSH
80829: EMPTY
80830: LIST
80831: LIST
80832: LIST
80833: LIST
80834: LIST
80835: LIST
80836: LIST
80837: PUSH
80838: LD_STRING E
80840: PUSH
80841: LD_INT 0
80843: PUSH
80844: LD_INT 0
80846: PUSH
80847: LD_VAR 0 3
80851: PUSH
80852: LD_INT 0
80854: PUSH
80855: LD_INT 0
80857: PUSH
80858: LD_INT 0
80860: PUSH
80861: EMPTY
80862: LIST
80863: LIST
80864: LIST
80865: LIST
80866: LIST
80867: LIST
80868: LIST
80869: PUSH
80870: EMPTY
80871: LIST
80872: LIST
80873: PPUSH
80874: CALL_OW 446
// end ;
80878: LD_VAR 0 2
80882: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80883: LD_INT 0
80885: PPUSH
80886: PPUSH
// if not driver or not IsInUnit ( driver ) then
80887: LD_VAR 0 1
80891: NOT
80892: IFTRUE 80906
80894: PUSH
80895: LD_VAR 0 1
80899: PPUSH
80900: CALL_OW 310
80904: NOT
80905: OR
80906: IFFALSE 80910
// exit ;
80908: GO 81000
// vehicle := IsInUnit ( driver ) ;
80910: LD_ADDR_VAR 0 3
80914: PUSH
80915: LD_VAR 0 1
80919: PPUSH
80920: CALL_OW 310
80924: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80925: LD_VAR 0 1
80929: PPUSH
80930: LD_STRING \
80932: PUSH
80933: LD_INT 0
80935: PUSH
80936: LD_INT 0
80938: PUSH
80939: LD_INT 0
80941: PUSH
80942: LD_INT 0
80944: PUSH
80945: LD_INT 0
80947: PUSH
80948: LD_INT 0
80950: PUSH
80951: EMPTY
80952: LIST
80953: LIST
80954: LIST
80955: LIST
80956: LIST
80957: LIST
80958: LIST
80959: PUSH
80960: LD_STRING E
80962: PUSH
80963: LD_INT 0
80965: PUSH
80966: LD_INT 0
80968: PUSH
80969: LD_VAR 0 3
80973: PUSH
80974: LD_INT 0
80976: PUSH
80977: LD_INT 0
80979: PUSH
80980: LD_INT 0
80982: PUSH
80983: EMPTY
80984: LIST
80985: LIST
80986: LIST
80987: LIST
80988: LIST
80989: LIST
80990: LIST
80991: PUSH
80992: EMPTY
80993: LIST
80994: LIST
80995: PPUSH
80996: CALL_OW 447
// end ;
81000: LD_VAR 0 2
81004: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
81005: LD_INT 0
81007: PPUSH
81008: PPUSH
81009: PPUSH
// tmp := [ ] ;
81010: LD_ADDR_VAR 0 5
81014: PUSH
81015: EMPTY
81016: ST_TO_ADDR
// for i in units do
81017: LD_ADDR_VAR 0 4
81021: PUSH
81022: LD_VAR 0 1
81026: PUSH
81027: FOR_IN
81028: IFFALSE 81066
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
81030: LD_ADDR_VAR 0 5
81034: PUSH
81035: LD_VAR 0 5
81039: PPUSH
81040: LD_VAR 0 5
81044: PUSH
81045: LD_INT 1
81047: PLUS
81048: PPUSH
81049: LD_VAR 0 4
81053: PPUSH
81054: CALL_OW 256
81058: PPUSH
81059: CALL_OW 2
81063: ST_TO_ADDR
81064: GO 81027
81066: POP
81067: POP
// if not tmp then
81068: LD_VAR 0 5
81072: NOT
81073: IFFALSE 81077
// exit ;
81075: GO 81125
// if asc then
81077: LD_VAR 0 2
81081: IFFALSE 81105
// result := SortListByListAsc ( units , tmp ) else
81083: LD_ADDR_VAR 0 3
81087: PUSH
81088: LD_VAR 0 1
81092: PPUSH
81093: LD_VAR 0 5
81097: PPUSH
81098: CALL_OW 76
81102: ST_TO_ADDR
81103: GO 81125
// result := SortListByListDesc ( units , tmp ) ;
81105: LD_ADDR_VAR 0 3
81109: PUSH
81110: LD_VAR 0 1
81114: PPUSH
81115: LD_VAR 0 5
81119: PPUSH
81120: CALL_OW 77
81124: ST_TO_ADDR
// end ;
81125: LD_VAR 0 3
81129: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
81130: LD_INT 0
81132: PPUSH
81133: PPUSH
// task := GetTaskList ( mech ) ;
81134: LD_ADDR_VAR 0 4
81138: PUSH
81139: LD_VAR 0 1
81143: PPUSH
81144: CALL_OW 437
81148: ST_TO_ADDR
// if not task then
81149: LD_VAR 0 4
81153: NOT
81154: IFFALSE 81158
// exit ;
81156: GO 81202
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
81158: LD_ADDR_VAR 0 3
81162: PUSH
81163: LD_VAR 0 4
81167: PUSH
81168: LD_INT 1
81170: ARRAY
81171: PUSH
81172: LD_INT 1
81174: ARRAY
81175: PUSH
81176: LD_STRING r
81178: EQUAL
81179: IFFALSE 81201
81181: PUSH
81182: LD_VAR 0 4
81186: PUSH
81187: LD_INT 1
81189: ARRAY
81190: PUSH
81191: LD_INT 4
81193: ARRAY
81194: PUSH
81195: LD_VAR 0 2
81199: EQUAL
81200: AND
81201: ST_TO_ADDR
// end ;
81202: LD_VAR 0 3
81206: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
81207: LD_INT 0
81209: PPUSH
// SetDir ( unit , d ) ;
81210: LD_VAR 0 1
81214: PPUSH
81215: LD_VAR 0 4
81219: PPUSH
81220: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
81224: LD_ADDR_VAR 0 6
81228: PUSH
81229: LD_VAR 0 1
81233: PPUSH
81234: LD_VAR 0 2
81238: PPUSH
81239: LD_VAR 0 3
81243: PPUSH
81244: LD_VAR 0 5
81248: PPUSH
81249: CALL_OW 48
81253: ST_TO_ADDR
// end ;
81254: LD_VAR 0 6
81258: RET
// export function ToNaturalNumber ( number ) ; begin
81259: LD_INT 0
81261: PPUSH
// result := number div 1 ;
81262: LD_ADDR_VAR 0 2
81266: PUSH
81267: LD_VAR 0 1
81271: PUSH
81272: LD_INT 1
81274: DIV
81275: ST_TO_ADDR
// if number < 0 then
81276: LD_VAR 0 1
81280: PUSH
81281: LD_INT 0
81283: LESS
81284: IFFALSE 81294
// result := 0 ;
81286: LD_ADDR_VAR 0 2
81290: PUSH
81291: LD_INT 0
81293: ST_TO_ADDR
// end ;
81294: LD_VAR 0 2
81298: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
81299: LD_INT 0
81301: PPUSH
81302: PPUSH
81303: PPUSH
// if not buildings then
81304: LD_VAR 0 1
81308: NOT
81309: IFFALSE 81313
// exit ;
81311: GO 81428
// tmp := [ ] ;
81313: LD_ADDR_VAR 0 5
81317: PUSH
81318: EMPTY
81319: ST_TO_ADDR
// for b in buildings do
81320: LD_ADDR_VAR 0 4
81324: PUSH
81325: LD_VAR 0 1
81329: PUSH
81330: FOR_IN
81331: IFFALSE 81369
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
81333: LD_ADDR_VAR 0 5
81337: PUSH
81338: LD_VAR 0 5
81342: PPUSH
81343: LD_VAR 0 5
81347: PUSH
81348: LD_INT 1
81350: PLUS
81351: PPUSH
81352: LD_VAR 0 4
81356: PPUSH
81357: CALL_OW 266
81361: PPUSH
81362: CALL_OW 1
81366: ST_TO_ADDR
81367: GO 81330
81369: POP
81370: POP
// if not tmp then
81371: LD_VAR 0 5
81375: NOT
81376: IFFALSE 81380
// exit ;
81378: GO 81428
// if asc then
81380: LD_VAR 0 2
81384: IFFALSE 81408
// result := SortListByListAsc ( buildings , tmp ) else
81386: LD_ADDR_VAR 0 3
81390: PUSH
81391: LD_VAR 0 1
81395: PPUSH
81396: LD_VAR 0 5
81400: PPUSH
81401: CALL_OW 76
81405: ST_TO_ADDR
81406: GO 81428
// result := SortListByListDesc ( buildings , tmp ) ;
81408: LD_ADDR_VAR 0 3
81412: PUSH
81413: LD_VAR 0 1
81417: PPUSH
81418: LD_VAR 0 5
81422: PPUSH
81423: CALL_OW 77
81427: ST_TO_ADDR
// end ;
81428: LD_VAR 0 3
81432: RET
// export function SortByClass ( units , class ) ; var un ; begin
81433: LD_INT 0
81435: PPUSH
81436: PPUSH
// if not units or not class then
81437: LD_VAR 0 1
81441: NOT
81442: IFTRUE 81451
81444: PUSH
81445: LD_VAR 0 2
81449: NOT
81450: OR
81451: IFFALSE 81455
// exit ;
81453: GO 81550
// result := [ ] ;
81455: LD_ADDR_VAR 0 3
81459: PUSH
81460: EMPTY
81461: ST_TO_ADDR
// for un in units do
81462: LD_ADDR_VAR 0 4
81466: PUSH
81467: LD_VAR 0 1
81471: PUSH
81472: FOR_IN
81473: IFFALSE 81548
// if GetClass ( un ) = class then
81475: LD_VAR 0 4
81479: PPUSH
81480: CALL_OW 257
81484: PUSH
81485: LD_VAR 0 2
81489: EQUAL
81490: IFFALSE 81517
// result := Insert ( result , 1 , un ) else
81492: LD_ADDR_VAR 0 3
81496: PUSH
81497: LD_VAR 0 3
81501: PPUSH
81502: LD_INT 1
81504: PPUSH
81505: LD_VAR 0 4
81509: PPUSH
81510: CALL_OW 2
81514: ST_TO_ADDR
81515: GO 81546
// result := Replace ( result , result + 1 , un ) ;
81517: LD_ADDR_VAR 0 3
81521: PUSH
81522: LD_VAR 0 3
81526: PPUSH
81527: LD_VAR 0 3
81531: PUSH
81532: LD_INT 1
81534: PLUS
81535: PPUSH
81536: LD_VAR 0 4
81540: PPUSH
81541: CALL_OW 1
81545: ST_TO_ADDR
81546: GO 81472
81548: POP
81549: POP
// end ;
81550: LD_VAR 0 3
81554: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
81555: LD_INT 0
81557: PPUSH
81558: PPUSH
81559: PPUSH
81560: PPUSH
81561: PPUSH
81562: PPUSH
81563: PPUSH
// result := [ ] ;
81564: LD_ADDR_VAR 0 4
81568: PUSH
81569: EMPTY
81570: ST_TO_ADDR
// if x - r < 0 then
81571: LD_VAR 0 1
81575: PUSH
81576: LD_VAR 0 3
81580: MINUS
81581: PUSH
81582: LD_INT 0
81584: LESS
81585: IFFALSE 81597
// min_x := 0 else
81587: LD_ADDR_VAR 0 8
81591: PUSH
81592: LD_INT 0
81594: ST_TO_ADDR
81595: GO 81613
// min_x := x - r ;
81597: LD_ADDR_VAR 0 8
81601: PUSH
81602: LD_VAR 0 1
81606: PUSH
81607: LD_VAR 0 3
81611: MINUS
81612: ST_TO_ADDR
// if y - r < 0 then
81613: LD_VAR 0 2
81617: PUSH
81618: LD_VAR 0 3
81622: MINUS
81623: PUSH
81624: LD_INT 0
81626: LESS
81627: IFFALSE 81639
// min_y := 0 else
81629: LD_ADDR_VAR 0 7
81633: PUSH
81634: LD_INT 0
81636: ST_TO_ADDR
81637: GO 81655
// min_y := y - r ;
81639: LD_ADDR_VAR 0 7
81643: PUSH
81644: LD_VAR 0 2
81648: PUSH
81649: LD_VAR 0 3
81653: MINUS
81654: ST_TO_ADDR
// max_x := x + r ;
81655: LD_ADDR_VAR 0 9
81659: PUSH
81660: LD_VAR 0 1
81664: PUSH
81665: LD_VAR 0 3
81669: PLUS
81670: ST_TO_ADDR
// max_y := y + r ;
81671: LD_ADDR_VAR 0 10
81675: PUSH
81676: LD_VAR 0 2
81680: PUSH
81681: LD_VAR 0 3
81685: PLUS
81686: ST_TO_ADDR
// for _x = min_x to max_x do
81687: LD_ADDR_VAR 0 5
81691: PUSH
81692: DOUBLE
81693: LD_VAR 0 8
81697: DEC
81698: ST_TO_ADDR
81699: LD_VAR 0 9
81703: PUSH
81704: FOR_TO
81705: IFFALSE 81806
// for _y = min_y to max_y do
81707: LD_ADDR_VAR 0 6
81711: PUSH
81712: DOUBLE
81713: LD_VAR 0 7
81717: DEC
81718: ST_TO_ADDR
81719: LD_VAR 0 10
81723: PUSH
81724: FOR_TO
81725: IFFALSE 81802
// begin if not ValidHex ( _x , _y ) then
81727: LD_VAR 0 5
81731: PPUSH
81732: LD_VAR 0 6
81736: PPUSH
81737: CALL_OW 488
81741: NOT
81742: IFFALSE 81746
// continue ;
81744: GO 81724
// if GetResourceTypeXY ( _x , _y ) then
81746: LD_VAR 0 5
81750: PPUSH
81751: LD_VAR 0 6
81755: PPUSH
81756: CALL_OW 283
81760: IFFALSE 81800
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81762: LD_ADDR_VAR 0 4
81766: PUSH
81767: LD_VAR 0 4
81771: PPUSH
81772: LD_VAR 0 4
81776: PUSH
81777: LD_INT 1
81779: PLUS
81780: PPUSH
81781: LD_VAR 0 5
81785: PUSH
81786: LD_VAR 0 6
81790: PUSH
81791: EMPTY
81792: LIST
81793: LIST
81794: PPUSH
81795: CALL_OW 1
81799: ST_TO_ADDR
// end ;
81800: GO 81724
81802: POP
81803: POP
81804: GO 81704
81806: POP
81807: POP
// end ;
81808: LD_VAR 0 4
81812: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81813: LD_INT 0
81815: PPUSH
81816: PPUSH
81817: PPUSH
81818: PPUSH
81819: PPUSH
81820: PPUSH
81821: PPUSH
81822: PPUSH
// if not units then
81823: LD_VAR 0 1
81827: NOT
81828: IFFALSE 81832
// exit ;
81830: GO 82364
// result := UnitFilter ( units , [ f_ok ] ) ;
81832: LD_ADDR_VAR 0 3
81836: PUSH
81837: LD_VAR 0 1
81841: PPUSH
81842: LD_INT 50
81844: PUSH
81845: EMPTY
81846: LIST
81847: PPUSH
81848: CALL_OW 72
81852: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81853: LD_ADDR_VAR 0 8
81857: PUSH
81858: LD_VAR 0 1
81862: PUSH
81863: LD_INT 1
81865: ARRAY
81866: PPUSH
81867: CALL_OW 255
81871: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81872: LD_ADDR_VAR 0 10
81876: PUSH
81877: LD_INT 29
81879: PUSH
81880: LD_INT 91
81882: PUSH
81883: LD_INT 49
81885: PUSH
81886: EMPTY
81887: LIST
81888: LIST
81889: LIST
81890: ST_TO_ADDR
// if not result then
81891: LD_VAR 0 3
81895: NOT
81896: IFFALSE 81900
// exit ;
81898: GO 82364
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81900: LD_ADDR_VAR 0 5
81904: PUSH
81905: LD_INT 81
81907: PUSH
81908: LD_VAR 0 8
81912: PUSH
81913: EMPTY
81914: LIST
81915: LIST
81916: PPUSH
81917: CALL_OW 69
81921: ST_TO_ADDR
// for i in result do
81922: LD_ADDR_VAR 0 4
81926: PUSH
81927: LD_VAR 0 3
81931: PUSH
81932: FOR_IN
81933: IFFALSE 82362
// begin tag := GetTag ( i ) + 1 ;
81935: LD_ADDR_VAR 0 9
81939: PUSH
81940: LD_VAR 0 4
81944: PPUSH
81945: CALL_OW 110
81949: PUSH
81950: LD_INT 1
81952: PLUS
81953: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
81954: LD_ADDR_VAR 0 7
81958: PUSH
81959: LD_VAR 0 4
81963: PPUSH
81964: CALL_OW 250
81968: PPUSH
81969: LD_VAR 0 4
81973: PPUSH
81974: CALL_OW 251
81978: PPUSH
81979: LD_INT 4
81981: PPUSH
81982: CALL 81555 0 3
81986: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
81987: LD_VAR 0 4
81991: PPUSH
81992: CALL_OW 247
81996: PUSH
81997: LD_INT 2
81999: EQUAL
82000: IFFALSE 82012
82002: PUSH
82003: LD_VAR 0 7
82007: PUSH
82008: LD_INT 2
82010: GREATER
82011: AND
82012: IFFALSE 82032
82014: PUSH
82015: LD_VAR 0 4
82019: PPUSH
82020: CALL_OW 264
82024: PUSH
82025: LD_VAR 0 10
82029: IN
82030: NOT
82031: AND
82032: IFFALSE 82071
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
82034: LD_VAR 0 4
82038: PPUSH
82039: LD_VAR 0 7
82043: PUSH
82044: LD_INT 1
82046: ARRAY
82047: PUSH
82048: LD_INT 1
82050: ARRAY
82051: PPUSH
82052: LD_VAR 0 7
82056: PUSH
82057: LD_INT 1
82059: ARRAY
82060: PUSH
82061: LD_INT 2
82063: ARRAY
82064: PPUSH
82065: CALL_OW 116
82069: GO 82360
// if path > tag then
82071: LD_VAR 0 2
82075: PUSH
82076: LD_VAR 0 9
82080: GREATER
82081: IFFALSE 82289
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
82083: LD_ADDR_VAR 0 6
82087: PUSH
82088: LD_VAR 0 5
82092: PPUSH
82093: LD_INT 91
82095: PUSH
82096: LD_VAR 0 4
82100: PUSH
82101: LD_INT 8
82103: PUSH
82104: EMPTY
82105: LIST
82106: LIST
82107: LIST
82108: PPUSH
82109: CALL_OW 72
82113: ST_TO_ADDR
// if nearEnemy then
82114: LD_VAR 0 6
82118: IFFALSE 82187
// begin if GetWeapon ( i ) = ru_time_lapser then
82120: LD_VAR 0 4
82124: PPUSH
82125: CALL_OW 264
82129: PUSH
82130: LD_INT 49
82132: EQUAL
82133: IFFALSE 82161
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
82135: LD_VAR 0 4
82139: PPUSH
82140: LD_VAR 0 6
82144: PPUSH
82145: LD_VAR 0 4
82149: PPUSH
82150: CALL_OW 74
82154: PPUSH
82155: CALL_OW 112
82159: GO 82185
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
82161: LD_VAR 0 4
82165: PPUSH
82166: LD_VAR 0 6
82170: PPUSH
82171: LD_VAR 0 4
82175: PPUSH
82176: CALL_OW 74
82180: PPUSH
82181: CALL 83445 0 2
// end else
82185: GO 82287
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
82187: LD_VAR 0 4
82191: PPUSH
82192: LD_VAR 0 2
82196: PUSH
82197: LD_VAR 0 9
82201: ARRAY
82202: PUSH
82203: LD_INT 1
82205: ARRAY
82206: PPUSH
82207: LD_VAR 0 2
82211: PUSH
82212: LD_VAR 0 9
82216: ARRAY
82217: PUSH
82218: LD_INT 2
82220: ARRAY
82221: PPUSH
82222: CALL_OW 297
82226: PUSH
82227: LD_INT 6
82229: GREATER
82230: IFFALSE 82273
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
82232: LD_VAR 0 4
82236: PPUSH
82237: LD_VAR 0 2
82241: PUSH
82242: LD_VAR 0 9
82246: ARRAY
82247: PUSH
82248: LD_INT 1
82250: ARRAY
82251: PPUSH
82252: LD_VAR 0 2
82256: PUSH
82257: LD_VAR 0 9
82261: ARRAY
82262: PUSH
82263: LD_INT 2
82265: ARRAY
82266: PPUSH
82267: CALL_OW 114
82271: GO 82287
// SetTag ( i , tag ) ;
82273: LD_VAR 0 4
82277: PPUSH
82278: LD_VAR 0 9
82282: PPUSH
82283: CALL_OW 109
// end else
82287: GO 82360
// if enemy then
82289: LD_VAR 0 5
82293: IFFALSE 82360
// begin if GetWeapon ( i ) = ru_time_lapser then
82295: LD_VAR 0 4
82299: PPUSH
82300: CALL_OW 264
82304: PUSH
82305: LD_INT 49
82307: EQUAL
82308: IFFALSE 82336
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
82310: LD_VAR 0 4
82314: PPUSH
82315: LD_VAR 0 5
82319: PPUSH
82320: LD_VAR 0 4
82324: PPUSH
82325: CALL_OW 74
82329: PPUSH
82330: CALL_OW 112
82334: GO 82360
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
82336: LD_VAR 0 4
82340: PPUSH
82341: LD_VAR 0 5
82345: PPUSH
82346: LD_VAR 0 4
82350: PPUSH
82351: CALL_OW 74
82355: PPUSH
82356: CALL 83445 0 2
// end ; end ;
82360: GO 81932
82362: POP
82363: POP
// end ;
82364: LD_VAR 0 3
82368: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
82369: LD_INT 0
82371: PPUSH
82372: PPUSH
82373: PPUSH
// if not unit or IsInUnit ( unit ) then
82374: LD_VAR 0 1
82378: NOT
82379: IFTRUE 82392
82381: PUSH
82382: LD_VAR 0 1
82386: PPUSH
82387: CALL_OW 310
82391: OR
82392: IFFALSE 82396
// exit ;
82394: GO 82487
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
82396: LD_ADDR_VAR 0 4
82400: PUSH
82401: LD_VAR 0 1
82405: PPUSH
82406: CALL_OW 250
82410: PPUSH
82411: LD_VAR 0 2
82415: PPUSH
82416: LD_INT 1
82418: PPUSH
82419: CALL_OW 272
82423: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
82424: LD_ADDR_VAR 0 5
82428: PUSH
82429: LD_VAR 0 1
82433: PPUSH
82434: CALL_OW 251
82438: PPUSH
82439: LD_VAR 0 2
82443: PPUSH
82444: LD_INT 1
82446: PPUSH
82447: CALL_OW 273
82451: ST_TO_ADDR
// if ValidHex ( x , y ) then
82452: LD_VAR 0 4
82456: PPUSH
82457: LD_VAR 0 5
82461: PPUSH
82462: CALL_OW 488
82466: IFFALSE 82487
// ComTurnXY ( unit , x , y ) ;
82468: LD_VAR 0 1
82472: PPUSH
82473: LD_VAR 0 4
82477: PPUSH
82478: LD_VAR 0 5
82482: PPUSH
82483: CALL_OW 118
// end ;
82487: LD_VAR 0 3
82491: RET
// export function SeeUnits ( side , units ) ; var i ; begin
82492: LD_INT 0
82494: PPUSH
82495: PPUSH
// result := false ;
82496: LD_ADDR_VAR 0 3
82500: PUSH
82501: LD_INT 0
82503: ST_TO_ADDR
// if not units then
82504: LD_VAR 0 2
82508: NOT
82509: IFFALSE 82513
// exit ;
82511: GO 82558
// for i in units do
82513: LD_ADDR_VAR 0 4
82517: PUSH
82518: LD_VAR 0 2
82522: PUSH
82523: FOR_IN
82524: IFFALSE 82556
// if See ( side , i ) then
82526: LD_VAR 0 1
82530: PPUSH
82531: LD_VAR 0 4
82535: PPUSH
82536: CALL_OW 292
82540: IFFALSE 82554
// begin result := true ;
82542: LD_ADDR_VAR 0 3
82546: PUSH
82547: LD_INT 1
82549: ST_TO_ADDR
// exit ;
82550: POP
82551: POP
82552: GO 82558
// end ;
82554: GO 82523
82556: POP
82557: POP
// end ;
82558: LD_VAR 0 3
82562: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
82563: LD_INT 0
82565: PPUSH
82566: PPUSH
82567: PPUSH
82568: PPUSH
// if not unit or not points then
82569: LD_VAR 0 1
82573: NOT
82574: IFTRUE 82583
82576: PUSH
82577: LD_VAR 0 2
82581: NOT
82582: OR
82583: IFFALSE 82587
// exit ;
82585: GO 82677
// dist := 99999 ;
82587: LD_ADDR_VAR 0 5
82591: PUSH
82592: LD_INT 99999
82594: ST_TO_ADDR
// for i in points do
82595: LD_ADDR_VAR 0 4
82599: PUSH
82600: LD_VAR 0 2
82604: PUSH
82605: FOR_IN
82606: IFFALSE 82675
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
82608: LD_ADDR_VAR 0 6
82612: PUSH
82613: LD_VAR 0 1
82617: PPUSH
82618: LD_VAR 0 4
82622: PUSH
82623: LD_INT 1
82625: ARRAY
82626: PPUSH
82627: LD_VAR 0 4
82631: PUSH
82632: LD_INT 2
82634: ARRAY
82635: PPUSH
82636: CALL_OW 297
82640: ST_TO_ADDR
// if tmpDist < dist then
82641: LD_VAR 0 6
82645: PUSH
82646: LD_VAR 0 5
82650: LESS
82651: IFFALSE 82673
// begin result := i ;
82653: LD_ADDR_VAR 0 3
82657: PUSH
82658: LD_VAR 0 4
82662: ST_TO_ADDR
// dist := tmpDist ;
82663: LD_ADDR_VAR 0 5
82667: PUSH
82668: LD_VAR 0 6
82672: ST_TO_ADDR
// end ; end ;
82673: GO 82605
82675: POP
82676: POP
// end ;
82677: LD_VAR 0 3
82681: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
82682: LD_INT 0
82684: PPUSH
// uc_side := side ;
82685: LD_ADDR_OWVAR 20
82689: PUSH
82690: LD_VAR 0 1
82694: ST_TO_ADDR
// uc_nation := 3 ;
82695: LD_ADDR_OWVAR 21
82699: PUSH
82700: LD_INT 3
82702: ST_TO_ADDR
// vc_chassis := 25 ;
82703: LD_ADDR_OWVAR 37
82707: PUSH
82708: LD_INT 25
82710: ST_TO_ADDR
// vc_engine := engine_siberite ;
82711: LD_ADDR_OWVAR 39
82715: PUSH
82716: LD_INT 3
82718: ST_TO_ADDR
// vc_control := control_computer ;
82719: LD_ADDR_OWVAR 38
82723: PUSH
82724: LD_INT 3
82726: ST_TO_ADDR
// vc_weapon := 59 ;
82727: LD_ADDR_OWVAR 40
82731: PUSH
82732: LD_INT 59
82734: ST_TO_ADDR
// result := CreateVehicle ;
82735: LD_ADDR_VAR 0 5
82739: PUSH
82740: CALL_OW 45
82744: ST_TO_ADDR
// SetDir ( result , d ) ;
82745: LD_VAR 0 5
82749: PPUSH
82750: LD_VAR 0 4
82754: PPUSH
82755: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
82759: LD_VAR 0 5
82763: PPUSH
82764: LD_VAR 0 2
82768: PPUSH
82769: LD_VAR 0 3
82773: PPUSH
82774: LD_INT 0
82776: PPUSH
82777: CALL_OW 48
// end ;
82781: LD_VAR 0 5
82785: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
82786: LD_INT 0
82788: PPUSH
82789: PPUSH
82790: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
82791: LD_ADDR_VAR 0 2
82795: PUSH
82796: LD_INT 0
82798: PUSH
82799: LD_INT 0
82801: PUSH
82802: LD_INT 0
82804: PUSH
82805: LD_INT 0
82807: PUSH
82808: EMPTY
82809: LIST
82810: LIST
82811: LIST
82812: LIST
82813: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
82814: LD_VAR 0 1
82818: NOT
82819: IFTRUE 82852
82821: PUSH
82822: LD_VAR 0 1
82826: PPUSH
82827: CALL_OW 264
82831: PUSH
82832: LD_INT 12
82834: PUSH
82835: LD_INT 51
82837: PUSH
82838: LD_INT 32
82840: PUSH
82841: LD_INT 89
82843: PUSH
82844: EMPTY
82845: LIST
82846: LIST
82847: LIST
82848: LIST
82849: IN
82850: NOT
82851: OR
82852: IFFALSE 82856
// exit ;
82854: GO 82954
// for i := 1 to 3 do
82856: LD_ADDR_VAR 0 3
82860: PUSH
82861: DOUBLE
82862: LD_INT 1
82864: DEC
82865: ST_TO_ADDR
82866: LD_INT 3
82868: PUSH
82869: FOR_TO
82870: IFFALSE 82952
// begin tmp := GetCargo ( cargo , i ) ;
82872: LD_ADDR_VAR 0 4
82876: PUSH
82877: LD_VAR 0 1
82881: PPUSH
82882: LD_VAR 0 3
82886: PPUSH
82887: CALL_OW 289
82891: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82892: LD_ADDR_VAR 0 2
82896: PUSH
82897: LD_VAR 0 2
82901: PPUSH
82902: LD_VAR 0 3
82906: PPUSH
82907: LD_VAR 0 4
82911: PPUSH
82912: CALL_OW 1
82916: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82917: LD_ADDR_VAR 0 2
82921: PUSH
82922: LD_VAR 0 2
82926: PPUSH
82927: LD_INT 4
82929: PPUSH
82930: LD_VAR 0 2
82934: PUSH
82935: LD_INT 4
82937: ARRAY
82938: PUSH
82939: LD_VAR 0 4
82943: PLUS
82944: PPUSH
82945: CALL_OW 1
82949: ST_TO_ADDR
// end ;
82950: GO 82869
82952: POP
82953: POP
// end ;
82954: LD_VAR 0 2
82958: RET
// export function Length ( array ) ; begin
82959: LD_INT 0
82961: PPUSH
// result := array + 0 ;
82962: LD_ADDR_VAR 0 2
82966: PUSH
82967: LD_VAR 0 1
82971: PUSH
82972: LD_INT 0
82974: PLUS
82975: ST_TO_ADDR
// end ;
82976: LD_VAR 0 2
82980: RET
// export function PrepareArray ( array ) ; begin
82981: LD_INT 0
82983: PPUSH
// result := array diff 0 ;
82984: LD_ADDR_VAR 0 2
82988: PUSH
82989: LD_VAR 0 1
82993: PUSH
82994: LD_INT 0
82996: DIFF
82997: ST_TO_ADDR
// if not result [ 1 ] then
82998: LD_VAR 0 2
83002: PUSH
83003: LD_INT 1
83005: ARRAY
83006: NOT
83007: IFFALSE 83027
// result := Delete ( result , 1 ) ;
83009: LD_ADDR_VAR 0 2
83013: PUSH
83014: LD_VAR 0 2
83018: PPUSH
83019: LD_INT 1
83021: PPUSH
83022: CALL_OW 3
83026: ST_TO_ADDR
// end ;
83027: LD_VAR 0 2
83031: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
83032: LD_INT 0
83034: PPUSH
83035: PPUSH
83036: PPUSH
83037: PPUSH
// sibRocketRange := 25 ;
83038: LD_ADDR_VAR 0 6
83042: PUSH
83043: LD_INT 25
83045: ST_TO_ADDR
// result := false ;
83046: LD_ADDR_VAR 0 4
83050: PUSH
83051: LD_INT 0
83053: ST_TO_ADDR
// for i := 0 to 5 do
83054: LD_ADDR_VAR 0 5
83058: PUSH
83059: DOUBLE
83060: LD_INT 0
83062: DEC
83063: ST_TO_ADDR
83064: LD_INT 5
83066: PUSH
83067: FOR_TO
83068: IFFALSE 83135
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
83070: LD_VAR 0 1
83074: PPUSH
83075: LD_VAR 0 5
83079: PPUSH
83080: LD_VAR 0 6
83084: PPUSH
83085: CALL_OW 272
83089: PPUSH
83090: LD_VAR 0 2
83094: PPUSH
83095: LD_VAR 0 5
83099: PPUSH
83100: LD_VAR 0 6
83104: PPUSH
83105: CALL_OW 273
83109: PPUSH
83110: LD_VAR 0 3
83114: PPUSH
83115: CALL_OW 309
83119: IFFALSE 83133
// begin result := true ;
83121: LD_ADDR_VAR 0 4
83125: PUSH
83126: LD_INT 1
83128: ST_TO_ADDR
// exit ;
83129: POP
83130: POP
83131: GO 83137
// end ;
83133: GO 83067
83135: POP
83136: POP
// end ;
83137: LD_VAR 0 4
83141: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
83142: LD_INT 0
83144: PPUSH
83145: PPUSH
83146: PPUSH
// if btype = b_depot then
83147: LD_VAR 0 2
83151: PUSH
83152: LD_INT 0
83154: EQUAL
83155: IFFALSE 83167
// begin result := true ;
83157: LD_ADDR_VAR 0 3
83161: PUSH
83162: LD_INT 1
83164: ST_TO_ADDR
// exit ;
83165: GO 83287
// end ; pom := GetBase ( depot ) ;
83167: LD_ADDR_VAR 0 4
83171: PUSH
83172: LD_VAR 0 1
83176: PPUSH
83177: CALL_OW 274
83181: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
83182: LD_ADDR_VAR 0 5
83186: PUSH
83187: LD_VAR 0 2
83191: PPUSH
83192: LD_VAR 0 1
83196: PPUSH
83197: CALL_OW 248
83201: PPUSH
83202: CALL_OW 450
83206: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
83207: LD_ADDR_VAR 0 3
83211: PUSH
83212: LD_VAR 0 4
83216: PPUSH
83217: LD_INT 1
83219: PPUSH
83220: CALL_OW 275
83224: PUSH
83225: LD_VAR 0 5
83229: PUSH
83230: LD_INT 1
83232: ARRAY
83233: GREATEREQUAL
83234: IFFALSE 83260
83236: PUSH
83237: LD_VAR 0 4
83241: PPUSH
83242: LD_INT 2
83244: PPUSH
83245: CALL_OW 275
83249: PUSH
83250: LD_VAR 0 5
83254: PUSH
83255: LD_INT 2
83257: ARRAY
83258: GREATEREQUAL
83259: AND
83260: IFFALSE 83286
83262: PUSH
83263: LD_VAR 0 4
83267: PPUSH
83268: LD_INT 3
83270: PPUSH
83271: CALL_OW 275
83275: PUSH
83276: LD_VAR 0 5
83280: PUSH
83281: LD_INT 3
83283: ARRAY
83284: GREATEREQUAL
83285: AND
83286: ST_TO_ADDR
// end ;
83287: LD_VAR 0 3
83291: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
83292: LD_INT 0
83294: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
83295: LD_VAR 0 1
83299: PPUSH
83300: LD_VAR 0 2
83304: PPUSH
83305: LD_INT 0
83307: PPUSH
83308: LD_INT 0
83310: PPUSH
83311: LD_INT 1
83313: PPUSH
83314: LD_INT 0
83316: PPUSH
83317: CALL_OW 587
// end ;
83321: LD_VAR 0 3
83325: RET
// export function CenterOnNow ( unit ) ; begin
83326: LD_INT 0
83328: PPUSH
// result := IsInUnit ( unit ) ;
83329: LD_ADDR_VAR 0 2
83333: PUSH
83334: LD_VAR 0 1
83338: PPUSH
83339: CALL_OW 310
83343: ST_TO_ADDR
// if not result then
83344: LD_VAR 0 2
83348: NOT
83349: IFFALSE 83361
// result := unit ;
83351: LD_ADDR_VAR 0 2
83355: PUSH
83356: LD_VAR 0 1
83360: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
83361: LD_VAR 0 1
83365: PPUSH
83366: CALL_OW 87
// end ;
83370: LD_VAR 0 2
83374: RET
// export function ComMoveHex ( unit , hex ) ; begin
83375: LD_INT 0
83377: PPUSH
// if not hex then
83378: LD_VAR 0 2
83382: NOT
83383: IFFALSE 83387
// exit ;
83385: GO 83440
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
83387: LD_VAR 0 2
83391: PUSH
83392: LD_INT 1
83394: ARRAY
83395: PPUSH
83396: LD_VAR 0 2
83400: PUSH
83401: LD_INT 2
83403: ARRAY
83404: PPUSH
83405: CALL_OW 428
83409: IFFALSE 83413
// exit ;
83411: GO 83440
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
83413: LD_VAR 0 1
83417: PPUSH
83418: LD_VAR 0 2
83422: PUSH
83423: LD_INT 1
83425: ARRAY
83426: PPUSH
83427: LD_VAR 0 2
83431: PUSH
83432: LD_INT 2
83434: ARRAY
83435: PPUSH
83436: CALL_OW 111
// end ;
83440: LD_VAR 0 3
83444: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
83445: LD_INT 0
83447: PPUSH
83448: PPUSH
83449: PPUSH
// if not unit or not enemy then
83450: LD_VAR 0 1
83454: NOT
83455: IFTRUE 83464
83457: PUSH
83458: LD_VAR 0 2
83462: NOT
83463: OR
83464: IFFALSE 83468
// exit ;
83466: GO 83594
// x := GetX ( enemy ) ;
83468: LD_ADDR_VAR 0 4
83472: PUSH
83473: LD_VAR 0 2
83477: PPUSH
83478: CALL_OW 250
83482: ST_TO_ADDR
// y := GetY ( enemy ) ;
83483: LD_ADDR_VAR 0 5
83487: PUSH
83488: LD_VAR 0 2
83492: PPUSH
83493: CALL_OW 251
83497: ST_TO_ADDR
// if ValidHex ( x , y ) then
83498: LD_VAR 0 4
83502: PPUSH
83503: LD_VAR 0 5
83507: PPUSH
83508: CALL_OW 488
83512: IFFALSE 83594
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
83514: LD_VAR 0 2
83518: PPUSH
83519: CALL_OW 247
83523: PUSH
83524: LD_INT 3
83526: PUSH
83527: LD_INT 2
83529: PUSH
83530: EMPTY
83531: LIST
83532: LIST
83533: IN
83534: IFTRUE 83557
83536: PUSH
83537: LD_VAR 0 1
83541: PPUSH
83542: CALL_OW 255
83546: PPUSH
83547: LD_VAR 0 2
83551: PPUSH
83552: CALL_OW 292
83556: OR
83557: IFFALSE 83575
// ComAttackUnit ( unit , enemy ) else
83559: LD_VAR 0 1
83563: PPUSH
83564: LD_VAR 0 2
83568: PPUSH
83569: CALL_OW 115
83573: GO 83594
// ComAgressiveMove ( unit , x , y ) ;
83575: LD_VAR 0 1
83579: PPUSH
83580: LD_VAR 0 4
83584: PPUSH
83585: LD_VAR 0 5
83589: PPUSH
83590: CALL_OW 114
// end ;
83594: LD_VAR 0 3
83598: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
83599: LD_INT 0
83601: PPUSH
83602: PPUSH
83603: PPUSH
// list := AreaToList ( area , 0 ) ;
83604: LD_ADDR_VAR 0 5
83608: PUSH
83609: LD_VAR 0 1
83613: PPUSH
83614: LD_INT 0
83616: PPUSH
83617: CALL_OW 517
83621: ST_TO_ADDR
// if not list then
83622: LD_VAR 0 5
83626: NOT
83627: IFFALSE 83631
// exit ;
83629: GO 83761
// if all then
83631: LD_VAR 0 2
83635: IFFALSE 83723
// begin for i := 1 to list [ 1 ] do
83637: LD_ADDR_VAR 0 4
83641: PUSH
83642: DOUBLE
83643: LD_INT 1
83645: DEC
83646: ST_TO_ADDR
83647: LD_VAR 0 5
83651: PUSH
83652: LD_INT 1
83654: ARRAY
83655: PUSH
83656: FOR_TO
83657: IFFALSE 83719
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
83659: LD_ADDR_VAR 0 3
83663: PUSH
83664: LD_VAR 0 3
83668: PPUSH
83669: LD_VAR 0 3
83673: PUSH
83674: LD_INT 1
83676: PLUS
83677: PPUSH
83678: LD_VAR 0 5
83682: PUSH
83683: LD_INT 1
83685: ARRAY
83686: PUSH
83687: LD_VAR 0 4
83691: ARRAY
83692: PUSH
83693: LD_VAR 0 5
83697: PUSH
83698: LD_INT 2
83700: ARRAY
83701: PUSH
83702: LD_VAR 0 4
83706: ARRAY
83707: PUSH
83708: EMPTY
83709: LIST
83710: LIST
83711: PPUSH
83712: CALL_OW 1
83716: ST_TO_ADDR
83717: GO 83656
83719: POP
83720: POP
// exit ;
83721: GO 83761
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
83723: LD_ADDR_VAR 0 3
83727: PUSH
83728: LD_VAR 0 5
83732: PUSH
83733: LD_INT 1
83735: ARRAY
83736: PUSH
83737: LD_INT 1
83739: ARRAY
83740: PUSH
83741: LD_VAR 0 5
83745: PUSH
83746: LD_INT 2
83748: ARRAY
83749: PUSH
83750: LD_INT 1
83752: ARRAY
83753: PUSH
83754: EMPTY
83755: LIST
83756: LIST
83757: PUSH
83758: EMPTY
83759: LIST
83760: ST_TO_ADDR
// end ;
83761: LD_VAR 0 3
83765: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
83766: LD_INT 0
83768: PPUSH
83769: PPUSH
// list := AreaToList ( area , 0 ) ;
83770: LD_ADDR_VAR 0 4
83774: PUSH
83775: LD_VAR 0 1
83779: PPUSH
83780: LD_INT 0
83782: PPUSH
83783: CALL_OW 517
83787: ST_TO_ADDR
// if not list then
83788: LD_VAR 0 4
83792: NOT
83793: IFFALSE 83797
// exit ;
83795: GO 83838
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
83797: LD_ADDR_VAR 0 3
83801: PUSH
83802: LD_VAR 0 4
83806: PUSH
83807: LD_INT 1
83809: ARRAY
83810: PUSH
83811: LD_INT 1
83813: ARRAY
83814: PUSH
83815: LD_VAR 0 4
83819: PUSH
83820: LD_INT 2
83822: ARRAY
83823: PUSH
83824: LD_INT 1
83826: ARRAY
83827: PUSH
83828: LD_VAR 0 2
83832: PUSH
83833: EMPTY
83834: LIST
83835: LIST
83836: LIST
83837: ST_TO_ADDR
// end ;
83838: LD_VAR 0 3
83842: RET
// export function First ( array ) ; begin
83843: LD_INT 0
83845: PPUSH
// if not array then
83846: LD_VAR 0 1
83850: NOT
83851: IFFALSE 83855
// exit ;
83853: GO 83869
// result := array [ 1 ] ;
83855: LD_ADDR_VAR 0 2
83859: PUSH
83860: LD_VAR 0 1
83864: PUSH
83865: LD_INT 1
83867: ARRAY
83868: ST_TO_ADDR
// end ;
83869: LD_VAR 0 2
83873: RET
// export function Last ( array ) ; begin
83874: LD_INT 0
83876: PPUSH
// if not array then
83877: LD_VAR 0 1
83881: NOT
83882: IFFALSE 83886
// exit ;
83884: GO 83902
// result := array [ array ] ;
83886: LD_ADDR_VAR 0 2
83890: PUSH
83891: LD_VAR 0 1
83895: PUSH
83896: LD_VAR 0 1
83900: ARRAY
83901: ST_TO_ADDR
// end ;
83902: LD_VAR 0 2
83906: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
83907: LD_INT 0
83909: PPUSH
83910: PPUSH
// result := [ ] ;
83911: LD_ADDR_VAR 0 5
83915: PUSH
83916: EMPTY
83917: ST_TO_ADDR
// if not array then
83918: LD_VAR 0 1
83922: NOT
83923: IFFALSE 83927
// exit ;
83925: GO 84039
// for i := 1 to array do
83927: LD_ADDR_VAR 0 6
83931: PUSH
83932: DOUBLE
83933: LD_INT 1
83935: DEC
83936: ST_TO_ADDR
83937: LD_VAR 0 1
83941: PUSH
83942: FOR_TO
83943: IFFALSE 84037
// if array [ i ] [ index ] = value then
83945: LD_VAR 0 1
83949: PUSH
83950: LD_VAR 0 6
83954: ARRAY
83955: PUSH
83956: LD_VAR 0 2
83960: ARRAY
83961: PUSH
83962: LD_VAR 0 3
83966: EQUAL
83967: IFFALSE 84035
// begin if indexColumn then
83969: LD_VAR 0 4
83973: IFFALSE 84009
// result := Join ( result , array [ i ] [ indexColumn ] ) else
83975: LD_ADDR_VAR 0 5
83979: PUSH
83980: LD_VAR 0 5
83984: PPUSH
83985: LD_VAR 0 1
83989: PUSH
83990: LD_VAR 0 6
83994: ARRAY
83995: PUSH
83996: LD_VAR 0 4
84000: ARRAY
84001: PPUSH
84002: CALL 79047 0 2
84006: ST_TO_ADDR
84007: GO 84035
// result := Join ( result , array [ i ] ) ;
84009: LD_ADDR_VAR 0 5
84013: PUSH
84014: LD_VAR 0 5
84018: PPUSH
84019: LD_VAR 0 1
84023: PUSH
84024: LD_VAR 0 6
84028: ARRAY
84029: PPUSH
84030: CALL 79047 0 2
84034: ST_TO_ADDR
// end ;
84035: GO 83942
84037: POP
84038: POP
// end ;
84039: LD_VAR 0 5
84043: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
84044: LD_INT 0
84046: PPUSH
// if not vehicles or not parkingPoint then
84047: LD_VAR 0 1
84051: NOT
84052: IFTRUE 84061
84054: PUSH
84055: LD_VAR 0 2
84059: NOT
84060: OR
84061: IFFALSE 84065
// exit ;
84063: GO 84163
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
84065: LD_ADDR_VAR 0 1
84069: PUSH
84070: LD_VAR 0 1
84074: PPUSH
84075: LD_INT 50
84077: PUSH
84078: EMPTY
84079: LIST
84080: PUSH
84081: LD_INT 3
84083: PUSH
84084: LD_INT 92
84086: PUSH
84087: LD_VAR 0 2
84091: PUSH
84092: LD_INT 1
84094: ARRAY
84095: PUSH
84096: LD_VAR 0 2
84100: PUSH
84101: LD_INT 2
84103: ARRAY
84104: PUSH
84105: LD_INT 8
84107: PUSH
84108: EMPTY
84109: LIST
84110: LIST
84111: LIST
84112: LIST
84113: PUSH
84114: EMPTY
84115: LIST
84116: LIST
84117: PUSH
84118: EMPTY
84119: LIST
84120: LIST
84121: PPUSH
84122: CALL_OW 72
84126: ST_TO_ADDR
// if not vehicles then
84127: LD_VAR 0 1
84131: NOT
84132: IFFALSE 84136
// exit ;
84134: GO 84163
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
84136: LD_VAR 0 1
84140: PPUSH
84141: LD_VAR 0 2
84145: PUSH
84146: LD_INT 1
84148: ARRAY
84149: PPUSH
84150: LD_VAR 0 2
84154: PUSH
84155: LD_INT 2
84157: ARRAY
84158: PPUSH
84159: CALL_OW 111
// end ;
84163: LD_VAR 0 3
84167: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
84168: LD_INT 0
84170: PPUSH
84171: PPUSH
84172: PPUSH
// if not side or not area then
84173: LD_VAR 0 1
84177: NOT
84178: IFTRUE 84187
84180: PUSH
84181: LD_VAR 0 2
84185: NOT
84186: OR
84187: IFFALSE 84191
// exit ;
84189: GO 84310
// tmp := AreaToList ( area , 0 ) ;
84191: LD_ADDR_VAR 0 5
84195: PUSH
84196: LD_VAR 0 2
84200: PPUSH
84201: LD_INT 0
84203: PPUSH
84204: CALL_OW 517
84208: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
84209: LD_ADDR_VAR 0 4
84213: PUSH
84214: DOUBLE
84215: LD_INT 1
84217: DEC
84218: ST_TO_ADDR
84219: LD_VAR 0 5
84223: PUSH
84224: LD_INT 1
84226: ARRAY
84227: PUSH
84228: FOR_TO
84229: IFFALSE 84308
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
84231: LD_VAR 0 5
84235: PUSH
84236: LD_INT 1
84238: ARRAY
84239: PUSH
84240: LD_VAR 0 4
84244: ARRAY
84245: PPUSH
84246: LD_VAR 0 5
84250: PUSH
84251: LD_INT 2
84253: ARRAY
84254: PUSH
84255: LD_VAR 0 4
84259: ARRAY
84260: PPUSH
84261: CALL_OW 351
84265: IFFALSE 84306
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
84267: LD_VAR 0 5
84271: PUSH
84272: LD_INT 1
84274: ARRAY
84275: PUSH
84276: LD_VAR 0 4
84280: ARRAY
84281: PPUSH
84282: LD_VAR 0 5
84286: PUSH
84287: LD_INT 2
84289: ARRAY
84290: PUSH
84291: LD_VAR 0 4
84295: ARRAY
84296: PPUSH
84297: LD_VAR 0 1
84301: PPUSH
84302: CALL_OW 244
// end ;
84306: GO 84228
84308: POP
84309: POP
// end ;
84310: LD_VAR 0 3
84314: RET
// export function UniqueArray ( array ) ; var i ; begin
84315: LD_INT 0
84317: PPUSH
84318: PPUSH
// result := [ ] ;
84319: LD_ADDR_VAR 0 2
84323: PUSH
84324: EMPTY
84325: ST_TO_ADDR
// if not array then
84326: LD_VAR 0 1
84330: NOT
84331: IFFALSE 84335
// exit ;
84333: GO 84396
// for i := 1 to array do
84335: LD_ADDR_VAR 0 3
84339: PUSH
84340: DOUBLE
84341: LD_INT 1
84343: DEC
84344: ST_TO_ADDR
84345: LD_VAR 0 1
84349: PUSH
84350: FOR_TO
84351: IFFALSE 84394
// if not array [ i ] in result then
84353: LD_VAR 0 1
84357: PUSH
84358: LD_VAR 0 3
84362: ARRAY
84363: PUSH
84364: LD_VAR 0 2
84368: IN
84369: NOT
84370: IFFALSE 84392
// result := Join ( result , i ) ;
84372: LD_ADDR_VAR 0 2
84376: PUSH
84377: LD_VAR 0 2
84381: PPUSH
84382: LD_VAR 0 3
84386: PPUSH
84387: CALL 79047 0 2
84391: ST_TO_ADDR
84392: GO 84350
84394: POP
84395: POP
// end ; end_of_file
84396: LD_VAR 0 2
84400: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
84401: LD_VAR 0 1
84405: PPUSH
84406: LD_VAR 0 2
84410: PPUSH
84411: LD_VAR 0 3
84415: PPUSH
84416: LD_VAR 0 4
84420: PPUSH
84421: LD_VAR 0 5
84425: PPUSH
84426: LD_VAR 0 6
84430: PPUSH
84431: CALL 18303 0 6
// end ;
84435: PPOPN 6
84437: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
84438: LD_INT 0
84440: PPUSH
// begin if not units then
84441: LD_VAR 0 1
84445: NOT
84446: IFFALSE 84450
// exit ;
84448: GO 84484
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
84450: LD_VAR 0 1
84454: PPUSH
84455: LD_VAR 0 2
84459: PPUSH
84460: LD_VAR 0 3
84464: PPUSH
84465: LD_VAR 0 4
84469: PPUSH
84470: LD_VAR 0 5
84474: PPUSH
84475: LD_VAR 0 6
84479: PPUSH
84480: CALL 40820 0 6
// end ;
84484: PPOPN 7
84486: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
84487: CALL 18183 0 0
// end ;
84491: PPOPN 1
84493: END
