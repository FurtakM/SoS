// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 42 0 0
// PrepareNature ;
   8: CALL 1752 0 0
// PrepareArabian ;
  12: CALL 1941 0 0
// PrepareAmerican ;
  16: CALL 6487 0 0
// PrepareRussian ;
  20: CALL 2862 0 0
// Action ;
  24: CALL 8047 0 0
// if debug then
  28: LD_EXP 1
  32: IFFALSE 41
// FogOff ( 2 ) ;
  34: LD_INT 2
  36: PPUSH
  37: CALL_OW 344
// end ;
  41: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown ; function Init ; begin
  42: LD_INT 0
  44: PPUSH
// debug := false ;
  45: LD_ADDR_EXP 1
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// prefix := 03_ ;
  53: LD_ADDR_EXP 2
  57: PUSH
  58: LD_STRING 03_
  60: ST_TO_ADDR
// baseConstructed := false ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// labConstructed := false ;
  69: LD_ADDR_EXP 4
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  77: LD_ADDR_EXP 5
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// russianAlert := false ;
  85: LD_ADDR_EXP 9
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// activeGrishkoAI := true ;
  93: LD_ADDR_EXP 10
  97: PUSH
  98: LD_INT 1
 100: ST_TO_ADDR
// allowHeikeAttack := false ;
 101: LD_ADDR_EXP 11
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// allowToPatrol := false ;
 109: LD_ADDR_EXP 12
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// omicronFall := false ;
 117: LD_ADDR_EXP 13
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// startAttackOnOmicron := false ;
 125: LD_ADDR_EXP 6
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// kirovDestroyed := false ;
 133: LD_ADDR_EXP 15
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// beriaDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// kaganDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// retreatFromOmicron := false ;
 157: LD_ADDR_EXP 19
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// spottedByPatrol := false ;
 165: LD_ADDR_EXP 7
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// omarCountdown := [ 22 22$00 , 21 21$00 , 20 20$00 ] [ Difficulty ] ;
 173: LD_ADDR_EXP 21
 177: PUSH
 178: LD_INT 46200
 180: PUSH
 181: LD_INT 44100
 183: PUSH
 184: LD_INT 42000
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: PUSH
 192: LD_OWVAR 67
 196: ARRAY
 197: ST_TO_ADDR
// escapeCounter := 0 ;
 198: LD_ADDR_EXP 18
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// loseCounter := 0 ;
 206: LD_ADDR_EXP 14
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// labCaptured := false ;
 214: LD_ADDR_EXP 20
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 222: LD_ADDR_EXP 8
 226: PUSH
 227: LD_INT 3
 229: PUSH
 230: LD_INT 4
 232: PUSH
 233: LD_INT 5
 235: PUSH
 236: LD_INT 6
 238: PUSH
 239: LD_INT 7
 241: PUSH
 242: LD_INT 8
 244: PUSH
 245: EMPTY
 246: LIST
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: LIST
 252: ST_TO_ADDR
// end ; end_of_file
 253: LD_VAR 0 1
 257: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 258: LD_INT 0
 260: PPUSH
 261: PPUSH
// if exist_mode then
 262: LD_VAR 0 2
 266: IFFALSE 291
// unit := CreateCharacter ( prefix & ident ) else
 268: LD_ADDR_VAR 0 5
 272: PUSH
 273: LD_VAR 0 3
 277: PUSH
 278: LD_VAR 0 1
 282: STR
 283: PPUSH
 284: CALL_OW 34
 288: ST_TO_ADDR
 289: GO 306
// unit := NewCharacter ( ident ) ;
 291: LD_ADDR_VAR 0 5
 295: PUSH
 296: LD_VAR 0 1
 300: PPUSH
 301: CALL_OW 25
 305: ST_TO_ADDR
// result := unit ;
 306: LD_ADDR_VAR 0 4
 310: PUSH
 311: LD_VAR 0 5
 315: ST_TO_ADDR
// end ;
 316: LD_VAR 0 4
 320: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 321: LD_INT 0
 323: PPUSH
// uc_side := side ;
 324: LD_ADDR_OWVAR 20
 328: PUSH
 329: LD_VAR 0 1
 333: ST_TO_ADDR
// uc_nation := nation ;
 334: LD_ADDR_OWVAR 21
 338: PUSH
 339: LD_VAR 0 2
 343: ST_TO_ADDR
// vc_chassis := chassis ;
 344: LD_ADDR_OWVAR 37
 348: PUSH
 349: LD_VAR 0 3
 353: ST_TO_ADDR
// vc_engine := engine ;
 354: LD_ADDR_OWVAR 39
 358: PUSH
 359: LD_VAR 0 4
 363: ST_TO_ADDR
// vc_control := control ;
 364: LD_ADDR_OWVAR 38
 368: PUSH
 369: LD_VAR 0 5
 373: ST_TO_ADDR
// vc_weapon := weapon ;
 374: LD_ADDR_OWVAR 40
 378: PUSH
 379: LD_VAR 0 6
 383: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 384: LD_ADDR_OWVAR 41
 388: PUSH
 389: LD_VAR 0 7
 393: ST_TO_ADDR
// result := CreateVehicle ;
 394: LD_ADDR_VAR 0 8
 398: PUSH
 399: CALL_OW 45
 403: ST_TO_ADDR
// end ;
 404: LD_VAR 0 8
 408: RET
// export function SayX ( units , ident ) ; var i ; begin
 409: LD_INT 0
 411: PPUSH
 412: PPUSH
// result := false ;
 413: LD_ADDR_VAR 0 3
 417: PUSH
 418: LD_INT 0
 420: ST_TO_ADDR
// if not units then
 421: LD_VAR 0 1
 425: NOT
 426: IFFALSE 430
// exit ;
 428: GO 484
// for i in units do
 430: LD_ADDR_VAR 0 4
 434: PUSH
 435: LD_VAR 0 1
 439: PUSH
 440: FOR_IN
 441: IFFALSE 482
// if IsOk ( i ) then
 443: LD_VAR 0 4
 447: PPUSH
 448: CALL_OW 302
 452: IFFALSE 480
// begin Say ( i , ident ) ;
 454: LD_VAR 0 4
 458: PPUSH
 459: LD_VAR 0 2
 463: PPUSH
 464: CALL_OW 88
// result := i ;
 468: LD_ADDR_VAR 0 3
 472: PUSH
 473: LD_VAR 0 4
 477: ST_TO_ADDR
// break ;
 478: GO 482
// end ;
 480: GO 440
 482: POP
 483: POP
// end ;
 484: LD_VAR 0 3
 488: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 489: LD_INT 0
 491: PPUSH
 492: PPUSH
 493: PPUSH
// if not observer or not unit then
 494: LD_VAR 0 1
 498: NOT
 499: PUSH
 500: LD_VAR 0 2
 504: NOT
 505: OR
 506: IFFALSE 510
// exit ;
 508: GO 558
// if not See ( GetSide ( observer ) , unit ) then
 510: LD_VAR 0 1
 514: PPUSH
 515: CALL_OW 255
 519: PPUSH
 520: LD_VAR 0 2
 524: PPUSH
 525: CALL_OW 292
 529: NOT
 530: IFFALSE 534
// exit ;
 532: GO 558
// result := GetDistUnits ( observer , unit ) < 12 ;
 534: LD_ADDR_VAR 0 3
 538: PUSH
 539: LD_VAR 0 1
 543: PPUSH
 544: LD_VAR 0 2
 548: PPUSH
 549: CALL_OW 296
 553: PUSH
 554: LD_INT 12
 556: LESS
 557: ST_TO_ADDR
// end ;
 558: LD_VAR 0 3
 562: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 563: LD_INT 0
 565: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 566: LD_VAR 0 2
 570: PUSH
 571: LD_INT 1
 573: ARRAY
 574: PPUSH
 575: LD_VAR 0 2
 579: PUSH
 580: LD_INT 2
 582: ARRAY
 583: PPUSH
 584: CALL_OW 488
 588: PUSH
 589: LD_VAR 0 2
 593: PUSH
 594: LD_INT 1
 596: ARRAY
 597: PPUSH
 598: LD_VAR 0 2
 602: PUSH
 603: LD_INT 2
 605: ARRAY
 606: PPUSH
 607: CALL_OW 428
 611: PUSH
 612: LD_INT 0
 614: EQUAL
 615: AND
 616: IFFALSE 650
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 618: LD_VAR 0 1
 622: PPUSH
 623: LD_VAR 0 2
 627: PUSH
 628: LD_INT 1
 630: ARRAY
 631: PPUSH
 632: LD_VAR 0 2
 636: PUSH
 637: LD_INT 2
 639: ARRAY
 640: PPUSH
 641: LD_VAR 0 3
 645: PPUSH
 646: CALL_OW 48
// end ;
 650: LD_VAR 0 4
 654: RET
// export function Video ( mode ) ; begin
 655: LD_INT 0
 657: PPUSH
// ingame_video = mode ;
 658: LD_ADDR_OWVAR 52
 662: PUSH
 663: LD_VAR 0 1
 667: ST_TO_ADDR
// interface_hidden = mode ;
 668: LD_ADDR_OWVAR 54
 672: PUSH
 673: LD_VAR 0 1
 677: ST_TO_ADDR
// end ;
 678: LD_VAR 0 2
 682: RET
// export function ReverseArray ( array ) ; var i ; begin
 683: LD_INT 0
 685: PPUSH
 686: PPUSH
// if not array then
 687: LD_VAR 0 1
 691: NOT
 692: IFFALSE 696
// exit ;
 694: GO 754
// result := [ ] ;
 696: LD_ADDR_VAR 0 2
 700: PUSH
 701: EMPTY
 702: ST_TO_ADDR
// for i := 1 to array do
 703: LD_ADDR_VAR 0 3
 707: PUSH
 708: DOUBLE
 709: LD_INT 1
 711: DEC
 712: ST_TO_ADDR
 713: LD_VAR 0 1
 717: PUSH
 718: FOR_TO
 719: IFFALSE 752
// result := Insert ( result , 1 , array [ i ] ) ;
 721: LD_ADDR_VAR 0 2
 725: PUSH
 726: LD_VAR 0 2
 730: PPUSH
 731: LD_INT 1
 733: PPUSH
 734: LD_VAR 0 1
 738: PUSH
 739: LD_VAR 0 3
 743: ARRAY
 744: PPUSH
 745: CALL_OW 2
 749: ST_TO_ADDR
 750: GO 718
 752: POP
 753: POP
// end ;
 754: LD_VAR 0 2
 758: RET
// export function ComExit ( unit ) ; begin
 759: LD_INT 0
 761: PPUSH
// result := IsInUnit ( unit ) ;
 762: LD_ADDR_VAR 0 2
 766: PUSH
 767: LD_VAR 0 1
 771: PPUSH
 772: CALL_OW 310
 776: ST_TO_ADDR
// if not result then
 777: LD_VAR 0 2
 781: NOT
 782: IFFALSE 786
// exit ;
 784: GO 821
// if GetType ( result ) = unit_vehicle then
 786: LD_VAR 0 2
 790: PPUSH
 791: CALL_OW 247
 795: PUSH
 796: LD_INT 2
 798: EQUAL
 799: IFFALSE 812
// ComExitVehicle ( unit ) else
 801: LD_VAR 0 1
 805: PPUSH
 806: CALL_OW 121
 810: GO 821
// ComExitBuilding ( unit ) ;
 812: LD_VAR 0 1
 816: PPUSH
 817: CALL_OW 122
// end ;
 821: LD_VAR 0 2
 825: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 826: LD_INT 0
 828: PPUSH
 829: PPUSH
// if not side or not nation then
 830: LD_VAR 0 1
 834: NOT
 835: PUSH
 836: LD_VAR 0 2
 840: NOT
 841: OR
 842: IFFALSE 846
// exit ;
 844: GO 1610
// case nation of nation_american :
 846: LD_VAR 0 2
 850: PUSH
 851: LD_INT 1
 853: DOUBLE
 854: EQUAL
 855: IFTRUE 859
 857: GO 1073
 859: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 860: LD_ADDR_VAR 0 4
 864: PUSH
 865: LD_INT 35
 867: PUSH
 868: LD_INT 45
 870: PUSH
 871: LD_INT 46
 873: PUSH
 874: LD_INT 47
 876: PUSH
 877: LD_INT 82
 879: PUSH
 880: LD_INT 83
 882: PUSH
 883: LD_INT 84
 885: PUSH
 886: LD_INT 85
 888: PUSH
 889: LD_INT 86
 891: PUSH
 892: LD_INT 1
 894: PUSH
 895: LD_INT 2
 897: PUSH
 898: LD_INT 6
 900: PUSH
 901: LD_INT 15
 903: PUSH
 904: LD_INT 16
 906: PUSH
 907: LD_INT 7
 909: PUSH
 910: LD_INT 12
 912: PUSH
 913: LD_INT 13
 915: PUSH
 916: LD_INT 10
 918: PUSH
 919: LD_INT 14
 921: PUSH
 922: LD_INT 20
 924: PUSH
 925: LD_INT 21
 927: PUSH
 928: LD_INT 22
 930: PUSH
 931: LD_INT 25
 933: PUSH
 934: LD_INT 32
 936: PUSH
 937: LD_INT 27
 939: PUSH
 940: LD_INT 36
 942: PUSH
 943: LD_INT 69
 945: PUSH
 946: LD_INT 39
 948: PUSH
 949: LD_INT 34
 951: PUSH
 952: LD_INT 40
 954: PUSH
 955: LD_INT 48
 957: PUSH
 958: LD_INT 49
 960: PUSH
 961: LD_INT 50
 963: PUSH
 964: LD_INT 51
 966: PUSH
 967: LD_INT 52
 969: PUSH
 970: LD_INT 53
 972: PUSH
 973: LD_INT 54
 975: PUSH
 976: LD_INT 55
 978: PUSH
 979: LD_INT 56
 981: PUSH
 982: LD_INT 57
 984: PUSH
 985: LD_INT 58
 987: PUSH
 988: LD_INT 59
 990: PUSH
 991: LD_INT 60
 993: PUSH
 994: LD_INT 61
 996: PUSH
 997: LD_INT 62
 999: PUSH
1000: LD_INT 80
1002: PUSH
1003: LD_INT 82
1005: PUSH
1006: LD_INT 83
1008: PUSH
1009: LD_INT 84
1011: PUSH
1012: LD_INT 85
1014: PUSH
1015: LD_INT 86
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: LIST
1064: LIST
1065: LIST
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: ST_TO_ADDR
1071: GO 1534
1073: LD_INT 2
1075: DOUBLE
1076: EQUAL
1077: IFTRUE 1081
1079: GO 1303
1081: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1082: LD_ADDR_VAR 0 4
1086: PUSH
1087: LD_INT 35
1089: PUSH
1090: LD_INT 45
1092: PUSH
1093: LD_INT 46
1095: PUSH
1096: LD_INT 47
1098: PUSH
1099: LD_INT 82
1101: PUSH
1102: LD_INT 83
1104: PUSH
1105: LD_INT 84
1107: PUSH
1108: LD_INT 85
1110: PUSH
1111: LD_INT 87
1113: PUSH
1114: LD_INT 70
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 11
1122: PUSH
1123: LD_INT 3
1125: PUSH
1126: LD_INT 4
1128: PUSH
1129: LD_INT 5
1131: PUSH
1132: LD_INT 6
1134: PUSH
1135: LD_INT 15
1137: PUSH
1138: LD_INT 18
1140: PUSH
1141: LD_INT 7
1143: PUSH
1144: LD_INT 17
1146: PUSH
1147: LD_INT 8
1149: PUSH
1150: LD_INT 20
1152: PUSH
1153: LD_INT 21
1155: PUSH
1156: LD_INT 22
1158: PUSH
1159: LD_INT 72
1161: PUSH
1162: LD_INT 26
1164: PUSH
1165: LD_INT 69
1167: PUSH
1168: LD_INT 39
1170: PUSH
1171: LD_INT 40
1173: PUSH
1174: LD_INT 41
1176: PUSH
1177: LD_INT 42
1179: PUSH
1180: LD_INT 43
1182: PUSH
1183: LD_INT 48
1185: PUSH
1186: LD_INT 49
1188: PUSH
1189: LD_INT 50
1191: PUSH
1192: LD_INT 51
1194: PUSH
1195: LD_INT 52
1197: PUSH
1198: LD_INT 53
1200: PUSH
1201: LD_INT 54
1203: PUSH
1204: LD_INT 55
1206: PUSH
1207: LD_INT 56
1209: PUSH
1210: LD_INT 60
1212: PUSH
1213: LD_INT 61
1215: PUSH
1216: LD_INT 62
1218: PUSH
1219: LD_INT 66
1221: PUSH
1222: LD_INT 67
1224: PUSH
1225: LD_INT 68
1227: PUSH
1228: LD_INT 81
1230: PUSH
1231: LD_INT 82
1233: PUSH
1234: LD_INT 83
1236: PUSH
1237: LD_INT 84
1239: PUSH
1240: LD_INT 85
1242: PUSH
1243: LD_INT 87
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: LIST
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: LIST
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: LIST
1276: LIST
1277: LIST
1278: LIST
1279: LIST
1280: LIST
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: ST_TO_ADDR
1301: GO 1534
1303: LD_INT 3
1305: DOUBLE
1306: EQUAL
1307: IFTRUE 1311
1309: GO 1533
1311: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1312: LD_ADDR_VAR 0 4
1316: PUSH
1317: LD_INT 46
1319: PUSH
1320: LD_INT 47
1322: PUSH
1323: LD_INT 1
1325: PUSH
1326: LD_INT 2
1328: PUSH
1329: LD_INT 82
1331: PUSH
1332: LD_INT 83
1334: PUSH
1335: LD_INT 84
1337: PUSH
1338: LD_INT 85
1340: PUSH
1341: LD_INT 86
1343: PUSH
1344: LD_INT 11
1346: PUSH
1347: LD_INT 9
1349: PUSH
1350: LD_INT 20
1352: PUSH
1353: LD_INT 19
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 24
1361: PUSH
1362: LD_INT 22
1364: PUSH
1365: LD_INT 25
1367: PUSH
1368: LD_INT 28
1370: PUSH
1371: LD_INT 29
1373: PUSH
1374: LD_INT 30
1376: PUSH
1377: LD_INT 31
1379: PUSH
1380: LD_INT 37
1382: PUSH
1383: LD_INT 38
1385: PUSH
1386: LD_INT 32
1388: PUSH
1389: LD_INT 27
1391: PUSH
1392: LD_INT 33
1394: PUSH
1395: LD_INT 69
1397: PUSH
1398: LD_INT 39
1400: PUSH
1401: LD_INT 34
1403: PUSH
1404: LD_INT 40
1406: PUSH
1407: LD_INT 71
1409: PUSH
1410: LD_INT 23
1412: PUSH
1413: LD_INT 44
1415: PUSH
1416: LD_INT 48
1418: PUSH
1419: LD_INT 49
1421: PUSH
1422: LD_INT 50
1424: PUSH
1425: LD_INT 51
1427: PUSH
1428: LD_INT 52
1430: PUSH
1431: LD_INT 53
1433: PUSH
1434: LD_INT 54
1436: PUSH
1437: LD_INT 55
1439: PUSH
1440: LD_INT 56
1442: PUSH
1443: LD_INT 57
1445: PUSH
1446: LD_INT 58
1448: PUSH
1449: LD_INT 59
1451: PUSH
1452: LD_INT 63
1454: PUSH
1455: LD_INT 64
1457: PUSH
1458: LD_INT 65
1460: PUSH
1461: LD_INT 82
1463: PUSH
1464: LD_INT 83
1466: PUSH
1467: LD_INT 84
1469: PUSH
1470: LD_INT 85
1472: PUSH
1473: LD_INT 86
1475: PUSH
1476: EMPTY
1477: LIST
1478: LIST
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: LIST
1520: LIST
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: ST_TO_ADDR
1531: GO 1534
1533: POP
// if state > - 1 and state < 3 then
1534: LD_VAR 0 3
1538: PUSH
1539: LD_INT 1
1541: NEG
1542: GREATER
1543: PUSH
1544: LD_VAR 0 3
1548: PUSH
1549: LD_INT 3
1551: LESS
1552: AND
1553: IFFALSE 1610
// for i in result do
1555: LD_ADDR_VAR 0 5
1559: PUSH
1560: LD_VAR 0 4
1564: PUSH
1565: FOR_IN
1566: IFFALSE 1608
// if GetTech ( i , side ) <> state then
1568: LD_VAR 0 5
1572: PPUSH
1573: LD_VAR 0 1
1577: PPUSH
1578: CALL_OW 321
1582: PUSH
1583: LD_VAR 0 3
1587: NONEQUAL
1588: IFFALSE 1606
// result := result diff i ;
1590: LD_ADDR_VAR 0 4
1594: PUSH
1595: LD_VAR 0 4
1599: PUSH
1600: LD_VAR 0 5
1604: DIFF
1605: ST_TO_ADDR
1606: GO 1565
1608: POP
1609: POP
// end ;
1610: LD_VAR 0 4
1614: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
1615: LD_INT 0
1617: PPUSH
1618: PPUSH
// InitUc ;
1619: CALL_OW 18
// InitHc ;
1623: CALL_OW 19
// uc_side := 0 ;
1627: LD_ADDR_OWVAR 20
1631: PUSH
1632: LD_INT 0
1634: ST_TO_ADDR
// uc_nation := 0 ;
1635: LD_ADDR_OWVAR 21
1639: PUSH
1640: LD_INT 0
1642: ST_TO_ADDR
// for i = 1 to amount do
1643: LD_ADDR_VAR 0 4
1647: PUSH
1648: DOUBLE
1649: LD_INT 1
1651: DEC
1652: ST_TO_ADDR
1653: LD_VAR 0 2
1657: PUSH
1658: FOR_TO
1659: IFFALSE 1741
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
1661: LD_ADDR_OWVAR 29
1665: PUSH
1666: LD_INT 9
1668: PPUSH
1669: LD_INT 12
1671: PPUSH
1672: CALL_OW 12
1676: PUSH
1677: LD_INT 9
1679: PPUSH
1680: LD_INT 12
1682: PPUSH
1683: CALL_OW 12
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
1692: LD_ADDR_OWVAR 35
1696: PUSH
1697: LD_INT 1
1699: NEG
1700: PPUSH
1701: LD_INT 1
1703: PPUSH
1704: CALL_OW 12
1708: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
1709: LD_INT 0
1711: PPUSH
1712: LD_INT 12
1714: PPUSH
1715: LD_INT 1
1717: PPUSH
1718: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
1722: CALL_OW 44
1726: PPUSH
1727: LD_VAR 0 1
1731: PPUSH
1732: LD_INT 0
1734: PPUSH
1735: CALL_OW 49
// end ;
1739: GO 1658
1741: POP
1742: POP
// InitHc ;
1743: CALL_OW 19
// end ;
1747: LD_VAR 0 3
1751: RET
// export function PrepareNature ; var i ; begin
1752: LD_INT 0
1754: PPUSH
1755: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
1756: LD_INT 18
1758: PPUSH
1759: LD_INT 5
1761: PUSH
1762: LD_INT 4
1764: PUSH
1765: LD_INT 3
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: LIST
1772: PUSH
1773: LD_OWVAR 67
1777: ARRAY
1778: PPUSH
1779: CALL 1615 0 2
// for i := 1 to 3 do
1783: LD_ADDR_VAR 0 2
1787: PUSH
1788: DOUBLE
1789: LD_INT 1
1791: DEC
1792: ST_TO_ADDR
1793: LD_INT 3
1795: PUSH
1796: FOR_TO
1797: IFFALSE 1832
// begin hc_class := 21 ;
1799: LD_ADDR_OWVAR 28
1803: PUSH
1804: LD_INT 21
1806: ST_TO_ADDR
// hc_gallery :=  ;
1807: LD_ADDR_OWVAR 33
1811: PUSH
1812: LD_STRING 
1814: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1815: CALL_OW 44
1819: PPUSH
1820: LD_INT 18
1822: PPUSH
1823: LD_INT 0
1825: PPUSH
1826: CALL_OW 49
// end ;
1830: GO 1796
1832: POP
1833: POP
// for i := 1 to 2 do
1834: LD_ADDR_VAR 0 2
1838: PUSH
1839: DOUBLE
1840: LD_INT 1
1842: DEC
1843: ST_TO_ADDR
1844: LD_INT 2
1846: PUSH
1847: FOR_TO
1848: IFFALSE 1883
// begin hc_class := 18 ;
1850: LD_ADDR_OWVAR 28
1854: PUSH
1855: LD_INT 18
1857: ST_TO_ADDR
// hc_gallery :=  ;
1858: LD_ADDR_OWVAR 33
1862: PUSH
1863: LD_STRING 
1865: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1866: CALL_OW 44
1870: PPUSH
1871: LD_INT 18
1873: PPUSH
1874: LD_INT 0
1876: PPUSH
1877: CALL_OW 49
// end ;
1881: GO 1847
1883: POP
1884: POP
// for i := 1 to 2 do
1885: LD_ADDR_VAR 0 2
1889: PUSH
1890: DOUBLE
1891: LD_INT 1
1893: DEC
1894: ST_TO_ADDR
1895: LD_INT 2
1897: PUSH
1898: FOR_TO
1899: IFFALSE 1934
// begin hc_class := 13 ;
1901: LD_ADDR_OWVAR 28
1905: PUSH
1906: LD_INT 13
1908: ST_TO_ADDR
// hc_gallery :=  ;
1909: LD_ADDR_OWVAR 33
1913: PUSH
1914: LD_STRING 
1916: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1917: CALL_OW 44
1921: PPUSH
1922: LD_INT 18
1924: PPUSH
1925: LD_INT 0
1927: PPUSH
1928: CALL_OW 49
// end ;
1932: GO 1898
1934: POP
1935: POP
// end ; end_of_file
1936: LD_VAR 0 1
1940: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1941: LD_INT 0
1943: PPUSH
1944: PPUSH
// uc_side := 2 ;
1945: LD_ADDR_OWVAR 20
1949: PUSH
1950: LD_INT 2
1952: ST_TO_ADDR
// uc_nation := 2 ;
1953: LD_ADDR_OWVAR 21
1957: PUSH
1958: LD_INT 2
1960: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1961: LD_ADDR_EXP 22
1965: PUSH
1966: LD_STRING Heike
1968: PPUSH
1969: LD_EXP 1
1973: NOT
1974: PPUSH
1975: LD_EXP 2
1979: PPUSH
1980: CALL 258 0 3
1984: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1985: LD_ADDR_EXP 25
1989: PUSH
1990: LD_STRING Ibrahim
1992: PPUSH
1993: LD_EXP 1
1997: NOT
1998: PPUSH
1999: LD_EXP 2
2003: PPUSH
2004: CALL 258 0 3
2008: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
2009: LD_ADDR_EXP 23
2013: PUSH
2014: LD_STRING Givi
2016: PPUSH
2017: LD_EXP 1
2021: NOT
2022: PPUSH
2023: LD_EXP 2
2027: PPUSH
2028: CALL 258 0 3
2032: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
2033: LD_ADDR_EXP 26
2037: PUSH
2038: LD_STRING Kamil
2040: PPUSH
2041: LD_EXP 1
2045: NOT
2046: PPUSH
2047: LD_EXP 2
2051: PPUSH
2052: CALL 258 0 3
2056: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
2057: LD_ADDR_EXP 27
2061: PUSH
2062: LD_STRING Kaia
2064: PPUSH
2065: LD_EXP 1
2069: NOT
2070: PPUSH
2071: LD_EXP 2
2075: PPUSH
2076: CALL 258 0 3
2080: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
2081: LD_ADDR_EXP 28
2085: PUSH
2086: LD_STRING Sophia
2088: PPUSH
2089: LD_EXP 1
2093: NOT
2094: PPUSH
2095: LD_EXP 2
2099: PPUSH
2100: CALL 258 0 3
2104: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2105: LD_ADDR_EXP 29
2109: PUSH
2110: LD_STRING Markov
2112: PPUSH
2113: LD_EXP 1
2117: NOT
2118: PPUSH
2119: LD_EXP 2
2123: PPUSH
2124: CALL 258 0 3
2128: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2129: LD_ADDR_EXP 32
2133: PUSH
2134: LD_STRING Aviradze
2136: PPUSH
2137: LD_EXP 1
2141: NOT
2142: PPUSH
2143: LD_EXP 2
2147: PPUSH
2148: CALL 258 0 3
2152: ST_TO_ADDR
// aviradzeSquad := [ ] ;
2153: LD_ADDR_EXP 35
2157: PUSH
2158: EMPTY
2159: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
2160: LD_ADDR_EXP 33
2164: PUSH
2165: LD_STRING 03_others
2167: PPUSH
2168: CALL_OW 31
2172: ST_TO_ADDR
// uc_side := 5 ;
2173: LD_ADDR_OWVAR 20
2177: PUSH
2178: LD_INT 5
2180: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
2181: LD_ADDR_EXP 31
2185: PUSH
2186: LD_STRING Kurt
2188: PPUSH
2189: LD_INT 0
2191: PPUSH
2192: LD_STRING 
2194: PPUSH
2195: CALL 258 0 3
2199: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2200: LD_ADDR_EXP 24
2204: PUSH
2205: LD_STRING Mike
2207: PPUSH
2208: LD_EXP 1
2212: NOT
2213: PPUSH
2214: LD_EXP 2
2218: PPUSH
2219: CALL 258 0 3
2223: ST_TO_ADDR
// if Mike then
2224: LD_EXP 24
2228: IFFALSE 2251
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
2230: LD_EXP 24
2234: PPUSH
2235: LD_INT 142
2237: PPUSH
2238: LD_INT 63
2240: PPUSH
2241: LD_INT 2
2243: PPUSH
2244: LD_INT 0
2246: PPUSH
2247: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
2251: LD_EXP 31
2255: PPUSH
2256: LD_INT 142
2258: PPUSH
2259: LD_INT 63
2261: PPUSH
2262: LD_INT 3
2264: PPUSH
2265: LD_INT 0
2267: PPUSH
2268: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
2272: LD_EXP 31
2276: PUSH
2277: LD_EXP 24
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PPUSH
2286: CALL_OW 140
// end ;
2290: LD_VAR 0 1
2294: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
2295: LD_INT 0
2297: PPUSH
2298: PPUSH
2299: PPUSH
2300: PPUSH
// uc_side := 5 ;
2301: LD_ADDR_OWVAR 20
2305: PUSH
2306: LD_INT 5
2308: ST_TO_ADDR
// uc_nation := 2 ;
2309: LD_ADDR_OWVAR 21
2313: PUSH
2314: LD_INT 2
2316: ST_TO_ADDR
// InitHc ;
2317: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
2321: LD_ADDR_EXP 30
2325: PUSH
2326: LD_STRING Omar
2328: PPUSH
2329: LD_INT 0
2331: PPUSH
2332: LD_STRING 
2334: PPUSH
2335: CALL 258 0 3
2339: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
2340: LD_EXP 30
2344: PPUSH
2345: LD_INT 284
2347: PPUSH
2348: LD_INT 163
2350: PPUSH
2351: LD_INT 0
2353: PPUSH
2354: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
2358: LD_EXP 30
2362: PPUSH
2363: LD_INT 256
2365: PPUSH
2366: LD_INT 129
2368: PPUSH
2369: CALL_OW 111
// wait ( 0 0$2 ) ;
2373: LD_INT 70
2375: PPUSH
2376: CALL_OW 67
// omarSquad := [ ] ;
2380: LD_ADDR_EXP 34
2384: PUSH
2385: EMPTY
2386: ST_TO_ADDR
// for i := 1 to 5 do
2387: LD_ADDR_VAR 0 2
2391: PUSH
2392: DOUBLE
2393: LD_INT 1
2395: DEC
2396: ST_TO_ADDR
2397: LD_INT 5
2399: PUSH
2400: FOR_TO
2401: IFFALSE 2607
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
2403: LD_INT 5
2405: PPUSH
2406: LD_INT 2
2408: PPUSH
2409: LD_INT 13
2411: PUSH
2412: LD_INT 14
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: PUSH
2419: LD_VAR 0 2
2423: PUSH
2424: LD_INT 2
2426: MOD
2427: PUSH
2428: LD_INT 1
2430: PLUS
2431: ARRAY
2432: PPUSH
2433: LD_INT 1
2435: PPUSH
2436: LD_INT 1
2438: PPUSH
2439: LD_INT 25
2441: PUSH
2442: LD_INT 27
2444: PUSH
2445: LD_INT 26
2447: PUSH
2448: EMPTY
2449: LIST
2450: LIST
2451: LIST
2452: PUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_INT 3
2460: MOD
2461: PUSH
2462: LD_INT 1
2464: PLUS
2465: ARRAY
2466: PPUSH
2467: LD_INT 100
2469: PPUSH
2470: CALL 321 0 7
// veh := CreateVehicle ;
2474: LD_ADDR_VAR 0 4
2478: PUSH
2479: CALL_OW 45
2483: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2484: LD_VAR 0 4
2488: PPUSH
2489: LD_INT 5
2491: PPUSH
2492: CALL_OW 233
// omarSquad := omarSquad union veh ;
2496: LD_ADDR_EXP 34
2500: PUSH
2501: LD_EXP 34
2505: PUSH
2506: LD_VAR 0 4
2510: UNION
2511: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
2512: LD_VAR 0 4
2516: PPUSH
2517: LD_INT 284
2519: PPUSH
2520: LD_INT 163
2522: PPUSH
2523: LD_INT 0
2525: PPUSH
2526: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
2530: LD_INT 0
2532: PPUSH
2533: LD_INT 3
2535: PPUSH
2536: LD_INT 3
2538: PPUSH
2539: CALL_OW 380
// un := CreateHuman ;
2543: LD_ADDR_VAR 0 3
2547: PUSH
2548: CALL_OW 44
2552: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2553: LD_ADDR_EXP 34
2557: PUSH
2558: LD_EXP 34
2562: PUSH
2563: LD_VAR 0 3
2567: UNION
2568: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2569: LD_VAR 0 3
2573: PPUSH
2574: LD_VAR 0 4
2578: PPUSH
2579: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
2583: LD_VAR 0 3
2587: PPUSH
2588: LD_INT 271
2590: PPUSH
2591: LD_INT 144
2593: PPUSH
2594: CALL_OW 111
// wait ( 0 0$2 ) ;
2598: LD_INT 70
2600: PPUSH
2601: CALL_OW 67
// end ;
2605: GO 2400
2607: POP
2608: POP
// for i := 1 to 3 do
2609: LD_ADDR_VAR 0 2
2613: PUSH
2614: DOUBLE
2615: LD_INT 1
2617: DEC
2618: ST_TO_ADDR
2619: LD_INT 3
2621: PUSH
2622: FOR_TO
2623: IFFALSE 2706
// begin PrepareHuman ( false , 1 , 3 ) ;
2625: LD_INT 0
2627: PPUSH
2628: LD_INT 1
2630: PPUSH
2631: LD_INT 3
2633: PPUSH
2634: CALL_OW 380
// un := CreateHuman ;
2638: LD_ADDR_VAR 0 3
2642: PUSH
2643: CALL_OW 44
2647: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2648: LD_ADDR_EXP 34
2652: PUSH
2653: LD_EXP 34
2657: PUSH
2658: LD_VAR 0 3
2662: UNION
2663: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
2664: LD_VAR 0 3
2668: PPUSH
2669: LD_INT 284
2671: PPUSH
2672: LD_INT 163
2674: PPUSH
2675: LD_INT 0
2677: PPUSH
2678: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
2682: LD_VAR 0 3
2686: PPUSH
2687: LD_INT 257
2689: PPUSH
2690: LD_INT 138
2692: PPUSH
2693: CALL_OW 111
// wait ( 0 0$1 ) ;
2697: LD_INT 35
2699: PPUSH
2700: CALL_OW 67
// end ;
2704: GO 2622
2706: POP
2707: POP
// for i := 1 to 6 do
2708: LD_ADDR_VAR 0 2
2712: PUSH
2713: DOUBLE
2714: LD_INT 1
2716: DEC
2717: ST_TO_ADDR
2718: LD_INT 6
2720: PUSH
2721: FOR_TO
2722: IFFALSE 2855
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2724: LD_INT 0
2726: PPUSH
2727: LD_INT 1
2729: PUSH
2730: LD_INT 1
2732: PUSH
2733: LD_INT 4
2735: PUSH
2736: EMPTY
2737: LIST
2738: LIST
2739: LIST
2740: PUSH
2741: LD_VAR 0 2
2745: PUSH
2746: LD_INT 3
2748: MOD
2749: PUSH
2750: LD_INT 1
2752: PLUS
2753: ARRAY
2754: PPUSH
2755: LD_INT 3
2757: PPUSH
2758: CALL_OW 380
// un := CreateHuman ;
2762: LD_ADDR_VAR 0 3
2766: PUSH
2767: CALL_OW 44
2771: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2772: LD_ADDR_EXP 34
2776: PUSH
2777: LD_EXP 34
2781: PUSH
2782: LD_VAR 0 3
2786: UNION
2787: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2788: LD_VAR 0 3
2792: PPUSH
2793: LD_INT 225
2795: PPUSH
2796: LD_INT 163
2798: PPUSH
2799: LD_INT 0
2801: PPUSH
2802: CALL_OW 48
// if i = 1 then
2806: LD_VAR 0 2
2810: PUSH
2811: LD_INT 1
2813: EQUAL
2814: IFFALSE 2831
// SetAttr ( un , attr_speed , 12 ) ;
2816: LD_VAR 0 3
2820: PPUSH
2821: LD_INT 2
2823: PPUSH
2824: LD_INT 12
2826: PPUSH
2827: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2831: LD_VAR 0 3
2835: PPUSH
2836: LD_INT 222
2838: PPUSH
2839: LD_INT 157
2841: PPUSH
2842: CALL_OW 111
// wait ( 0 0$1 ) ;
2846: LD_INT 35
2848: PPUSH
2849: CALL_OW 67
// end ;
2853: GO 2721
2855: POP
2856: POP
// end ; end_of_file
2857: LD_VAR 0 1
2861: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2862: LD_INT 0
2864: PPUSH
2865: PPUSH
2866: PPUSH
2867: PPUSH
2868: PPUSH
2869: PPUSH
// ruLab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ;
2870: LD_ADDR_EXP 46
2874: PUSH
2875: LD_INT 22
2877: PUSH
2878: LD_INT 3
2880: PUSH
2881: EMPTY
2882: LIST
2883: LIST
2884: PUSH
2885: LD_INT 30
2887: PUSH
2888: LD_INT 7
2890: PUSH
2891: EMPTY
2892: LIST
2893: LIST
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: PPUSH
2899: CALL_OW 69
2903: PUSH
2904: LD_INT 1
2906: ARRAY
2907: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2908: LD_ADDR_VAR 0 2
2912: PUSH
2913: LD_INT 21
2915: PUSH
2916: LD_INT 3
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: PUSH
2923: LD_INT 23
2925: PUSH
2926: LD_INT 3
2928: PUSH
2929: EMPTY
2930: LIST
2931: LIST
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PPUSH
2937: CALL_OW 69
2941: PUSH
2942: FOR_IN
2943: IFFALSE 2959
// SetBLevel ( i , 5 ) ;
2945: LD_VAR 0 2
2949: PPUSH
2950: LD_INT 5
2952: PPUSH
2953: CALL_OW 241
2957: GO 2942
2959: POP
2960: POP
// SetBName ( kirov , kirov ) ;
2961: LD_INT 71
2963: PPUSH
2964: LD_STRING kirov
2966: PPUSH
2967: CALL_OW 500
// SetBName ( beria , beria ) ;
2971: LD_INT 106
2973: PPUSH
2974: LD_STRING beria
2976: PPUSH
2977: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2981: LD_INT 112
2983: PPUSH
2984: LD_STRING kagan
2986: PPUSH
2987: CALL_OW 500
// uc_side := 6 ;
2991: LD_ADDR_OWVAR 20
2995: PUSH
2996: LD_INT 6
2998: ST_TO_ADDR
// uc_nation := 3 ;
2999: LD_ADDR_OWVAR 21
3003: PUSH
3004: LD_INT 3
3006: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
3007: LD_ADDR_VAR 0 5
3011: PUSH
3012: LD_INT 22
3014: PUSH
3015: LD_INT 6
3017: PUSH
3018: EMPTY
3019: LIST
3020: LIST
3021: PUSH
3022: LD_INT 30
3024: PUSH
3025: LD_INT 5
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: PUSH
3032: EMPTY
3033: LIST
3034: LIST
3035: PPUSH
3036: CALL_OW 69
3040: PUSH
3041: LD_INT 1
3043: ARRAY
3044: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
3045: LD_ADDR_VAR 0 4
3049: PUSH
3050: LD_INT 22
3052: PUSH
3053: LD_INT 6
3055: PUSH
3056: EMPTY
3057: LIST
3058: LIST
3059: PUSH
3060: LD_INT 30
3062: PUSH
3063: LD_INT 4
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: PUSH
3070: EMPTY
3071: LIST
3072: LIST
3073: PPUSH
3074: CALL_OW 69
3078: PUSH
3079: LD_INT 1
3081: ARRAY
3082: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
3083: LD_ADDR_EXP 40
3087: PUSH
3088: EMPTY
3089: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
3090: LD_ADDR_EXP 41
3094: PUSH
3095: EMPTY
3096: ST_TO_ADDR
// russianPatrol := [ ] ;
3097: LD_ADDR_EXP 43
3101: PUSH
3102: EMPTY
3103: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
3104: LD_ADDR_EXP 36
3108: PUSH
3109: LD_STRING Kurin
3111: PPUSH
3112: LD_INT 0
3114: PPUSH
3115: LD_STRING 
3117: PPUSH
3118: CALL 258 0 3
3122: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
3123: LD_EXP 36
3127: PPUSH
3128: LD_INT 71
3130: PPUSH
3131: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
3135: LD_ADDR_EXP 38
3139: PUSH
3140: LD_STRING Popov
3142: PPUSH
3143: LD_INT 0
3145: PPUSH
3146: LD_STRING 
3148: PPUSH
3149: CALL 258 0 3
3153: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
3154: LD_EXP 38
3158: PPUSH
3159: LD_INT 71
3161: PPUSH
3162: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
3166: LD_ADDR_EXP 37
3170: PUSH
3171: LD_STRING Grishko
3173: PPUSH
3174: LD_INT 0
3176: PPUSH
3177: LD_STRING 
3179: PPUSH
3180: CALL 258 0 3
3184: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
3185: LD_EXP 37
3189: PPUSH
3190: LD_INT 207
3192: PPUSH
3193: LD_INT 106
3195: PPUSH
3196: LD_INT 0
3198: PPUSH
3199: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
3203: LD_EXP 37
3207: PPUSH
3208: LD_INT 209
3210: PPUSH
3211: LD_INT 106
3213: PPUSH
3214: CALL_OW 118
// for i := 1 to 2 do
3218: LD_ADDR_VAR 0 2
3222: PUSH
3223: DOUBLE
3224: LD_INT 1
3226: DEC
3227: ST_TO_ADDR
3228: LD_INT 2
3230: PUSH
3231: FOR_TO
3232: IFFALSE 3287
// begin PrepareHuman ( false , 2 , 2 ) ;
3234: LD_INT 0
3236: PPUSH
3237: LD_INT 2
3239: PPUSH
3240: LD_INT 2
3242: PPUSH
3243: CALL_OW 380
// un := CreateHuman ;
3247: LD_ADDR_VAR 0 3
3251: PUSH
3252: CALL_OW 44
3256: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
3257: LD_VAR 0 3
3261: PPUSH
3262: LD_INT 71
3264: PPUSH
3265: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3269: LD_ADDR_EXP 40
3273: PUSH
3274: LD_EXP 40
3278: PUSH
3279: LD_VAR 0 3
3283: UNION
3284: ST_TO_ADDR
// end ;
3285: GO 3231
3287: POP
3288: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
3289: LD_ADDR_VAR 0 2
3293: PUSH
3294: DOUBLE
3295: LD_INT 1
3297: DEC
3298: ST_TO_ADDR
3299: LD_INT 5
3301: PUSH
3302: LD_INT 6
3304: PUSH
3305: LD_INT 6
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: LIST
3312: PUSH
3313: LD_OWVAR 67
3317: ARRAY
3318: PUSH
3319: FOR_TO
3320: IFFALSE 3394
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3322: LD_INT 0
3324: PPUSH
3325: LD_INT 1
3327: PPUSH
3328: LD_INT 2
3330: PUSH
3331: LD_INT 3
3333: PUSH
3334: LD_INT 4
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: LIST
3341: PUSH
3342: LD_OWVAR 67
3346: ARRAY
3347: PPUSH
3348: CALL_OW 380
// un := CreateHuman ;
3352: LD_ADDR_VAR 0 3
3356: PUSH
3357: CALL_OW 44
3361: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
3362: LD_VAR 0 3
3366: PPUSH
3367: LD_VAR 0 5
3371: PPUSH
3372: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3376: LD_ADDR_EXP 40
3380: PUSH
3381: LD_EXP 40
3385: PUSH
3386: LD_VAR 0 3
3390: UNION
3391: ST_TO_ADDR
// end ;
3392: GO 3319
3394: POP
3395: POP
// for i := 1 to 3 do
3396: LD_ADDR_VAR 0 2
3400: PUSH
3401: DOUBLE
3402: LD_INT 1
3404: DEC
3405: ST_TO_ADDR
3406: LD_INT 3
3408: PUSH
3409: FOR_TO
3410: IFFALSE 3465
// begin PrepareHuman ( false , 3 , 3 ) ;
3412: LD_INT 0
3414: PPUSH
3415: LD_INT 3
3417: PPUSH
3418: LD_INT 3
3420: PPUSH
3421: CALL_OW 380
// un := CreateHuman ;
3425: LD_ADDR_VAR 0 3
3429: PUSH
3430: CALL_OW 44
3434: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
3435: LD_VAR 0 3
3439: PPUSH
3440: LD_INT 92
3442: PPUSH
3443: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3447: LD_ADDR_EXP 40
3451: PUSH
3452: LD_EXP 40
3456: PUSH
3457: LD_VAR 0 3
3461: UNION
3462: ST_TO_ADDR
// end ;
3463: GO 3409
3465: POP
3466: POP
// for i := 1 to 2 do
3467: LD_ADDR_VAR 0 2
3471: PUSH
3472: DOUBLE
3473: LD_INT 1
3475: DEC
3476: ST_TO_ADDR
3477: LD_INT 2
3479: PUSH
3480: FOR_TO
3481: IFFALSE 3536
// begin PrepareHuman ( false , 4 , 3 ) ;
3483: LD_INT 0
3485: PPUSH
3486: LD_INT 4
3488: PPUSH
3489: LD_INT 3
3491: PPUSH
3492: CALL_OW 380
// un := CreateHuman ;
3496: LD_ADDR_VAR 0 3
3500: PUSH
3501: CALL_OW 44
3505: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
3506: LD_VAR 0 3
3510: PPUSH
3511: LD_INT 83
3513: PPUSH
3514: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3518: LD_ADDR_EXP 40
3522: PUSH
3523: LD_EXP 40
3527: PUSH
3528: LD_VAR 0 3
3532: UNION
3533: ST_TO_ADDR
// end ;
3534: GO 3480
3536: POP
3537: POP
// for i := 1 to 5 do
3538: LD_ADDR_VAR 0 2
3542: PUSH
3543: DOUBLE
3544: LD_INT 1
3546: DEC
3547: ST_TO_ADDR
3548: LD_INT 5
3550: PUSH
3551: FOR_TO
3552: IFFALSE 3609
// begin PrepareHuman ( false , 1 , 3 ) ;
3554: LD_INT 0
3556: PPUSH
3557: LD_INT 1
3559: PPUSH
3560: LD_INT 3
3562: PPUSH
3563: CALL_OW 380
// un := CreateHuman ;
3567: LD_ADDR_VAR 0 3
3571: PUSH
3572: CALL_OW 44
3576: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3577: LD_VAR 0 3
3581: PPUSH
3582: LD_VAR 0 4
3586: PPUSH
3587: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3591: LD_ADDR_EXP 42
3595: PUSH
3596: LD_EXP 42
3600: PUSH
3601: LD_VAR 0 3
3605: UNION
3606: ST_TO_ADDR
// end ;
3607: GO 3551
3609: POP
3610: POP
// russianCargo := [ ] ;
3611: LD_ADDR_EXP 45
3615: PUSH
3616: EMPTY
3617: ST_TO_ADDR
// for i := 1 to 2 do
3618: LD_ADDR_VAR 0 2
3622: PUSH
3623: DOUBLE
3624: LD_INT 1
3626: DEC
3627: ST_TO_ADDR
3628: LD_INT 2
3630: PUSH
3631: FOR_TO
3632: IFFALSE 3764
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3634: LD_INT 6
3636: PPUSH
3637: LD_INT 3
3639: PPUSH
3640: LD_INT 21
3642: PPUSH
3643: LD_INT 1
3645: PPUSH
3646: LD_INT 1
3648: PPUSH
3649: LD_INT 51
3651: PPUSH
3652: LD_INT 100
3654: PPUSH
3655: CALL 321 0 7
// un := CreateVehicle ;
3659: LD_ADDR_VAR 0 3
3663: PUSH
3664: CALL_OW 45
3668: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3669: LD_ADDR_EXP 45
3673: PUSH
3674: LD_EXP 45
3678: PUSH
3679: LD_VAR 0 3
3683: UNION
3684: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3685: LD_VAR 0 3
3689: PPUSH
3690: LD_INT 2
3692: PPUSH
3693: LD_INT 100
3695: PPUSH
3696: CALL_OW 290
// SetDir ( un , 4 ) ;
3700: LD_VAR 0 3
3704: PPUSH
3705: LD_INT 4
3707: PPUSH
3708: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3712: LD_VAR 0 3
3716: PPUSH
3717: LD_INT 147
3719: PPUSH
3720: LD_INT 103
3722: PPUSH
3723: LD_INT 4
3725: PPUSH
3726: LD_INT 0
3728: PPUSH
3729: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3733: LD_INT 0
3735: PPUSH
3736: LD_INT 1
3738: PPUSH
3739: LD_OWVAR 67
3743: PPUSH
3744: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3748: CALL_OW 44
3752: PPUSH
3753: LD_VAR 0 3
3757: PPUSH
3758: CALL_OW 52
// end ;
3762: GO 3631
3764: POP
3765: POP
// uc_side := 3 ;
3766: LD_ADDR_OWVAR 20
3770: PUSH
3771: LD_INT 3
3773: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3774: LD_ADDR_EXP 39
3778: PUSH
3779: LD_STRING Burlak
3781: PPUSH
3782: LD_INT 0
3784: PPUSH
3785: LD_STRING 
3787: PPUSH
3788: CALL 258 0 3
3792: ST_TO_ADDR
// for i := 1 to 2 do
3793: LD_ADDR_VAR 0 2
3797: PUSH
3798: DOUBLE
3799: LD_INT 1
3801: DEC
3802: ST_TO_ADDR
3803: LD_INT 2
3805: PUSH
3806: FOR_TO
3807: IFFALSE 3900
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3809: LD_INT 0
3811: PPUSH
3812: LD_INT 1
3814: PPUSH
3815: LD_OWVAR 67
3819: PUSH
3820: LD_INT 1
3822: PLUS
3823: PPUSH
3824: CALL_OW 380
// un := CreateHuman ;
3828: LD_ADDR_VAR 0 3
3832: PUSH
3833: CALL_OW 44
3837: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3838: LD_VAR 0 3
3842: PPUSH
3843: LD_INT 22
3845: PUSH
3846: LD_INT 3
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: PUSH
3853: LD_INT 30
3855: PUSH
3856: LD_INT 32
3858: PUSH
3859: EMPTY
3860: LIST
3861: LIST
3862: PUSH
3863: EMPTY
3864: LIST
3865: LIST
3866: PPUSH
3867: CALL_OW 69
3871: PUSH
3872: LD_VAR 0 2
3876: ARRAY
3877: PPUSH
3878: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3882: LD_ADDR_EXP 41
3886: PUSH
3887: LD_EXP 41
3891: PUSH
3892: LD_VAR 0 3
3896: UNION
3897: ST_TO_ADDR
// end ;
3898: GO 3806
3900: POP
3901: POP
// for i := 1 to 2 do
3902: LD_ADDR_VAR 0 2
3906: PUSH
3907: DOUBLE
3908: LD_INT 1
3910: DEC
3911: ST_TO_ADDR
3912: LD_INT 2
3914: PUSH
3915: FOR_TO
3916: IFFALSE 4007
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3918: LD_INT 0
3920: PPUSH
3921: LD_INT 1
3923: PPUSH
3924: LD_OWVAR 67
3928: PUSH
3929: LD_INT 1
3931: PLUS
3932: PPUSH
3933: CALL_OW 380
// un := CreateHuman ;
3937: LD_ADDR_VAR 0 3
3941: PUSH
3942: CALL_OW 44
3946: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3947: LD_VAR 0 3
3951: PPUSH
3952: LD_INT 22
3954: PUSH
3955: LD_INT 3
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: PUSH
3962: LD_INT 30
3964: PUSH
3965: LD_INT 5
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: PUSH
3972: EMPTY
3973: LIST
3974: LIST
3975: PPUSH
3976: CALL_OW 69
3980: PUSH
3981: LD_INT 1
3983: ARRAY
3984: PPUSH
3985: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3989: LD_ADDR_EXP 41
3993: PUSH
3994: LD_EXP 41
3998: PUSH
3999: LD_VAR 0 3
4003: UNION
4004: ST_TO_ADDR
// end ;
4005: GO 3915
4007: POP
4008: POP
// for i := 1 to 2 do
4009: LD_ADDR_VAR 0 2
4013: PUSH
4014: DOUBLE
4015: LD_INT 1
4017: DEC
4018: ST_TO_ADDR
4019: LD_INT 2
4021: PUSH
4022: FOR_TO
4023: IFFALSE 4110
// begin PrepareHuman ( false , 4 , Difficulty ) ;
4025: LD_INT 0
4027: PPUSH
4028: LD_INT 4
4030: PPUSH
4031: LD_OWVAR 67
4035: PPUSH
4036: CALL_OW 380
// un := CreateHuman ;
4040: LD_ADDR_VAR 0 3
4044: PUSH
4045: CALL_OW 44
4049: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
4050: LD_VAR 0 3
4054: PPUSH
4055: LD_INT 22
4057: PUSH
4058: LD_INT 3
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: PUSH
4065: LD_INT 30
4067: PUSH
4068: LD_INT 7
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PPUSH
4079: CALL_OW 69
4083: PUSH
4084: LD_INT 1
4086: ARRAY
4087: PPUSH
4088: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4092: LD_ADDR_EXP 41
4096: PUSH
4097: LD_EXP 41
4101: PUSH
4102: LD_VAR 0 3
4106: UNION
4107: ST_TO_ADDR
// end ;
4108: GO 4022
4110: POP
4111: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
4112: LD_INT 0
4114: PPUSH
4115: LD_INT 2
4117: PPUSH
4118: LD_OWVAR 67
4122: PPUSH
4123: CALL_OW 380
// un := CreateHuman ;
4127: LD_ADDR_VAR 0 3
4131: PUSH
4132: CALL_OW 44
4136: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
4137: LD_VAR 0 3
4141: PPUSH
4142: LD_INT 106
4144: PPUSH
4145: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4149: LD_ADDR_EXP 41
4153: PUSH
4154: LD_EXP 41
4158: PUSH
4159: LD_VAR 0 3
4163: UNION
4164: ST_TO_ADDR
// for i := 1 to 3 do
4165: LD_ADDR_VAR 0 2
4169: PUSH
4170: DOUBLE
4171: LD_INT 1
4173: DEC
4174: ST_TO_ADDR
4175: LD_INT 3
4177: PUSH
4178: FOR_TO
4179: IFFALSE 4301
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
4181: LD_ADDR_VAR 0 6
4185: PUSH
4186: LD_INT 22
4188: PUSH
4189: LD_INT 3
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: PUSH
4196: LD_INT 30
4198: PUSH
4199: LD_INT 31
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: PPUSH
4210: CALL_OW 69
4214: PUSH
4215: LD_VAR 0 2
4219: ARRAY
4220: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
4221: LD_INT 0
4223: PPUSH
4224: LD_INT 1
4226: PPUSH
4227: LD_OWVAR 67
4231: PPUSH
4232: CALL_OW 380
// un := CreateHuman ;
4236: LD_ADDR_VAR 0 3
4240: PUSH
4241: CALL_OW 44
4245: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
4246: LD_VAR 0 3
4250: PPUSH
4251: LD_VAR 0 6
4255: PPUSH
4256: CALL_OW 254
4260: PUSH
4261: LD_INT 3
4263: PLUS
4264: PPUSH
4265: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
4269: LD_VAR 0 3
4273: PPUSH
4274: LD_VAR 0 6
4278: PPUSH
4279: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4283: LD_ADDR_EXP 41
4287: PUSH
4288: LD_EXP 41
4292: PUSH
4293: LD_VAR 0 3
4297: UNION
4298: ST_TO_ADDR
// end ;
4299: GO 4178
4301: POP
4302: POP
// russianOmicronAttackers := [ ] ;
4303: LD_ADDR_EXP 44
4307: PUSH
4308: EMPTY
4309: ST_TO_ADDR
// for i := 1 to 6 do
4310: LD_ADDR_VAR 0 2
4314: PUSH
4315: DOUBLE
4316: LD_INT 1
4318: DEC
4319: ST_TO_ADDR
4320: LD_INT 6
4322: PUSH
4323: FOR_TO
4324: IFFALSE 4548
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
4326: LD_INT 3
4328: PPUSH
4329: LD_INT 3
4331: PPUSH
4332: LD_INT 21
4334: PUSH
4335: LD_INT 23
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: PUSH
4342: LD_VAR 0 2
4346: PUSH
4347: LD_INT 2
4349: MOD
4350: PUSH
4351: LD_INT 1
4353: PLUS
4354: ARRAY
4355: PPUSH
4356: LD_INT 1
4358: PPUSH
4359: LD_INT 1
4361: PPUSH
4362: LD_INT 43
4364: PUSH
4365: LD_INT 44
4367: PUSH
4368: LD_INT 42
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: LIST
4375: PUSH
4376: LD_VAR 0 2
4380: PUSH
4381: LD_INT 3
4383: MOD
4384: PUSH
4385: LD_INT 1
4387: PLUS
4388: ARRAY
4389: PPUSH
4390: LD_INT 100
4392: PPUSH
4393: CALL 321 0 7
// un := CreateVehicle ;
4397: LD_ADDR_VAR 0 3
4401: PUSH
4402: CALL_OW 45
4406: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
4407: LD_VAR 0 3
4411: PPUSH
4412: LD_INT 0
4414: PUSH
4415: LD_INT 5
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: PUSH
4422: LD_INT 1
4424: PPUSH
4425: LD_INT 2
4427: PPUSH
4428: CALL_OW 12
4432: ARRAY
4433: PPUSH
4434: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
4438: LD_ADDR_EXP 44
4442: PUSH
4443: LD_EXP 44
4447: PUSH
4448: LD_VAR 0 3
4452: UNION
4453: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
4454: LD_VAR 0 3
4458: PPUSH
4459: LD_INT 127
4461: PPUSH
4462: LD_INT 89
4464: PPUSH
4465: LD_INT 7
4467: PPUSH
4468: LD_INT 0
4470: PPUSH
4471: CALL_OW 50
// uc_side := 3 ;
4475: LD_ADDR_OWVAR 20
4479: PUSH
4480: LD_INT 3
4482: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4483: LD_INT 0
4485: PPUSH
4486: LD_INT 3
4488: PPUSH
4489: LD_INT 3
4491: PPUSH
4492: CALL_OW 380
// un := CreateHuman ;
4496: LD_ADDR_VAR 0 3
4500: PUSH
4501: CALL_OW 44
4505: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4506: LD_ADDR_EXP 44
4510: PUSH
4511: LD_EXP 44
4515: PUSH
4516: LD_VAR 0 3
4520: UNION
4521: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4522: LD_VAR 0 3
4526: PPUSH
4527: LD_EXP 44
4531: PUSH
4532: LD_EXP 44
4536: PUSH
4537: LD_INT 1
4539: MINUS
4540: ARRAY
4541: PPUSH
4542: CALL_OW 52
// end ;
4546: GO 4323
4548: POP
4549: POP
// for i := 1 to 3 do
4550: LD_ADDR_VAR 0 2
4554: PUSH
4555: DOUBLE
4556: LD_INT 1
4558: DEC
4559: ST_TO_ADDR
4560: LD_INT 3
4562: PUSH
4563: FOR_TO
4564: IFFALSE 4630
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4566: LD_INT 0
4568: PPUSH
4569: LD_INT 1
4571: PPUSH
4572: LD_OWVAR 67
4576: PPUSH
4577: CALL_OW 380
// un := CreateHuman ;
4581: LD_ADDR_VAR 0 3
4585: PUSH
4586: CALL_OW 44
4590: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4591: LD_ADDR_EXP 44
4595: PUSH
4596: LD_EXP 44
4600: PUSH
4601: LD_VAR 0 3
4605: UNION
4606: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4607: LD_VAR 0 3
4611: PPUSH
4612: LD_INT 91
4614: PPUSH
4615: LD_INT 60
4617: PPUSH
4618: LD_INT 3
4620: PPUSH
4621: LD_INT 0
4623: PPUSH
4624: CALL_OW 50
// end ;
4628: GO 4563
4630: POP
4631: POP
// end ;
4632: LD_VAR 0 1
4636: RET
// every 0 0$3 do var i ;
4637: GO 4639
4639: DISABLE
4640: LD_INT 0
4642: PPUSH
// begin for i := 1 to 4 do
4643: LD_ADDR_VAR 0 1
4647: PUSH
4648: DOUBLE
4649: LD_INT 1
4651: DEC
4652: ST_TO_ADDR
4653: LD_INT 4
4655: PUSH
4656: FOR_TO
4657: IFFALSE 4676
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4659: LD_EXP 42
4663: PUSH
4664: LD_VAR 0 1
4668: ARRAY
4669: PPUSH
4670: CALL_OW 122
4674: GO 4656
4676: POP
4677: POP
// wait ( 3 ) ;
4678: LD_INT 3
4680: PPUSH
4681: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4685: LD_EXP 42
4689: PUSH
4690: LD_INT 1
4692: ARRAY
4693: PPUSH
4694: LD_INT 22
4696: PUSH
4697: LD_INT 6
4699: PUSH
4700: EMPTY
4701: LIST
4702: LIST
4703: PUSH
4704: LD_INT 30
4706: PUSH
4707: LD_INT 31
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: PPUSH
4718: CALL_OW 69
4722: PPUSH
4723: LD_EXP 42
4727: PUSH
4728: LD_INT 1
4730: ARRAY
4731: PPUSH
4732: CALL_OW 74
4736: PPUSH
4737: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4741: LD_EXP 42
4745: PUSH
4746: LD_INT 2
4748: ARRAY
4749: PPUSH
4750: LD_INT 211
4752: PPUSH
4753: LD_INT 107
4755: PPUSH
4756: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4760: LD_EXP 42
4764: PUSH
4765: LD_INT 2
4767: ARRAY
4768: PPUSH
4769: LD_INT 209
4771: PPUSH
4772: LD_INT 106
4774: PPUSH
4775: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4779: LD_EXP 42
4783: PUSH
4784: LD_INT 3
4786: ARRAY
4787: PPUSH
4788: LD_INT 209
4790: PPUSH
4791: LD_INT 103
4793: PPUSH
4794: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4798: LD_EXP 42
4802: PUSH
4803: LD_INT 3
4805: ARRAY
4806: PPUSH
4807: LD_INT 209
4809: PPUSH
4810: LD_INT 106
4812: PPUSH
4813: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4817: LD_EXP 42
4821: PUSH
4822: LD_INT 4
4824: ARRAY
4825: PPUSH
4826: LD_INT 227
4828: PPUSH
4829: LD_INT 117
4831: PPUSH
4832: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4836: LD_EXP 42
4840: PUSH
4841: LD_INT 4
4843: ARRAY
4844: PPUSH
4845: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4849: LD_INT 700
4851: PPUSH
4852: CALL_OW 67
// for i := 3 downto 2 do
4856: LD_ADDR_VAR 0 1
4860: PUSH
4861: DOUBLE
4862: LD_INT 3
4864: INC
4865: ST_TO_ADDR
4866: LD_INT 2
4868: PUSH
4869: FOR_DOWNTO
4870: IFFALSE 5037
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4872: LD_EXP 42
4876: PUSH
4877: LD_VAR 0 1
4881: ARRAY
4882: PPUSH
4883: LD_INT 200
4885: PPUSH
4886: LD_INT 91
4888: PPUSH
4889: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4893: LD_EXP 42
4897: PUSH
4898: LD_VAR 0 1
4902: ARRAY
4903: PPUSH
4904: LD_INT 210
4906: PPUSH
4907: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4911: LD_EXP 42
4915: PUSH
4916: LD_VAR 0 1
4920: ARRAY
4921: PPUSH
4922: LD_INT 224
4924: PPUSH
4925: LD_INT 93
4927: PPUSH
4928: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4932: LD_EXP 42
4936: PUSH
4937: LD_VAR 0 1
4941: ARRAY
4942: PPUSH
4943: LD_INT 210
4945: PPUSH
4946: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4950: LD_EXP 42
4954: PUSH
4955: LD_VAR 0 1
4959: ARRAY
4960: PPUSH
4961: LD_INT 239
4963: PPUSH
4964: LD_INT 123
4966: PPUSH
4967: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4971: LD_EXP 42
4975: PUSH
4976: LD_VAR 0 1
4980: ARRAY
4981: PPUSH
4982: LD_INT 210
4984: PPUSH
4985: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4989: LD_EXP 42
4993: PUSH
4994: LD_VAR 0 1
4998: ARRAY
4999: PPUSH
5000: LD_INT 212
5002: PPUSH
5003: LD_INT 105
5005: PPUSH
5006: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
5010: LD_EXP 42
5014: PUSH
5015: LD_VAR 0 1
5019: ARRAY
5020: PPUSH
5021: LD_INT 700
5023: PPUSH
5024: CALL_OW 202
// wait ( 0 0$30 ) ;
5028: LD_INT 1050
5030: PPUSH
5031: CALL_OW 67
// end ;
5035: GO 4869
5037: POP
5038: POP
// until not activeGrishkoAI ;
5039: LD_EXP 10
5043: NOT
5044: IFFALSE 4849
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
5046: LD_EXP 42
5050: PPUSH
5051: LD_INT 221
5053: PPUSH
5054: LD_INT 110
5056: PPUSH
5057: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
5061: LD_EXP 42
5065: PPUSH
5066: LD_INT 228
5068: PPUSH
5069: LD_INT 115
5071: PPUSH
5072: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
5076: LD_EXP 42
5080: PPUSH
5081: CALL_OW 200
// end ;
5085: PPOPN 1
5087: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
5088: LD_EXP 12
5092: IFFALSE 5710
5094: GO 5096
5096: DISABLE
5097: LD_INT 0
5099: PPUSH
5100: PPUSH
5101: PPUSH
5102: PPUSH
// begin uc_side := 6 ;
5103: LD_ADDR_OWVAR 20
5107: PUSH
5108: LD_INT 6
5110: ST_TO_ADDR
// uc_nation := 3 ;
5111: LD_ADDR_OWVAR 21
5115: PUSH
5116: LD_INT 3
5118: ST_TO_ADDR
// for i := 1 to 3 do
5119: LD_ADDR_VAR 0 2
5123: PUSH
5124: DOUBLE
5125: LD_INT 1
5127: DEC
5128: ST_TO_ADDR
5129: LD_INT 3
5131: PUSH
5132: FOR_TO
5133: IFFALSE 5242
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
5135: LD_INT 0
5137: PPUSH
5138: LD_INT 1
5140: PPUSH
5141: LD_INT 2
5143: PUSH
5144: LD_INT 3
5146: PUSH
5147: LD_INT 4
5149: PUSH
5150: EMPTY
5151: LIST
5152: LIST
5153: LIST
5154: PUSH
5155: LD_OWVAR 67
5159: ARRAY
5160: PPUSH
5161: CALL_OW 380
// un := CreateHuman ;
5165: LD_ADDR_VAR 0 1
5169: PUSH
5170: CALL_OW 44
5174: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
5175: LD_ADDR_EXP 43
5179: PUSH
5180: LD_EXP 43
5184: PUSH
5185: LD_VAR 0 1
5189: UNION
5190: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5191: LD_VAR 0 1
5195: PPUSH
5196: LD_INT 1
5198: PPUSH
5199: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
5203: LD_VAR 0 1
5207: PPUSH
5208: LD_INT 11
5210: PPUSH
5211: LD_INT 0
5213: PPUSH
5214: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
5218: LD_VAR 0 1
5222: PPUSH
5223: LD_INT 210
5225: PPUSH
5226: LD_INT 159
5228: PPUSH
5229: CALL_OW 111
// wait ( 0 0$2 ) ;
5233: LD_INT 70
5235: PPUSH
5236: CALL_OW 67
// end ;
5240: GO 5132
5242: POP
5243: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
5244: LD_ADDR_VAR 0 4
5248: PUSH
5249: LD_INT 172
5251: PUSH
5252: LD_INT 76
5254: PUSH
5255: EMPTY
5256: LIST
5257: LIST
5258: PUSH
5259: LD_INT 150
5261: PUSH
5262: LD_INT 38
5264: PUSH
5265: EMPTY
5266: LIST
5267: LIST
5268: PUSH
5269: LD_INT 148
5271: PUSH
5272: LD_INT 9
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: PUSH
5279: LD_INT 165
5281: PUSH
5282: LD_INT 38
5284: PUSH
5285: EMPTY
5286: LIST
5287: LIST
5288: PUSH
5289: EMPTY
5290: LIST
5291: LIST
5292: LIST
5293: LIST
5294: PUSH
5295: LD_INT 191
5297: PUSH
5298: LD_INT 77
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: PUSH
5305: LD_INT 168
5307: PUSH
5308: LD_INT 42
5310: PUSH
5311: EMPTY
5312: LIST
5313: LIST
5314: PUSH
5315: LD_INT 166
5317: PUSH
5318: LD_INT 11
5320: PUSH
5321: EMPTY
5322: LIST
5323: LIST
5324: PUSH
5325: LD_INT 151
5327: PUSH
5328: LD_INT 12
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: LIST
5339: LIST
5340: PUSH
5341: LD_INT 221
5343: PUSH
5344: LD_INT 88
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: PUSH
5351: LD_INT 217
5353: PUSH
5354: LD_INT 64
5356: PUSH
5357: EMPTY
5358: LIST
5359: LIST
5360: PUSH
5361: LD_INT 232
5363: PUSH
5364: LD_INT 66
5366: PUSH
5367: EMPTY
5368: LIST
5369: LIST
5370: PUSH
5371: LD_INT 200
5373: PUSH
5374: LD_INT 56
5376: PUSH
5377: EMPTY
5378: LIST
5379: LIST
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: LIST
5385: LIST
5386: PUSH
5387: EMPTY
5388: LIST
5389: LIST
5390: LIST
5391: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5392: LD_INT 35
5394: PPUSH
5395: CALL_OW 67
// for i := 1 to patrol do
5399: LD_ADDR_VAR 0 2
5403: PUSH
5404: DOUBLE
5405: LD_INT 1
5407: DEC
5408: ST_TO_ADDR
5409: LD_VAR 0 4
5413: PUSH
5414: FOR_TO
5415: IFFALSE 5674
// begin if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
5417: LD_EXP 43
5421: PUSH
5422: LD_VAR 0 2
5426: ARRAY
5427: PPUSH
5428: CALL_OW 256
5432: PUSH
5433: LD_INT 990
5435: LESS
5436: PUSH
5437: LD_EXP 43
5441: PUSH
5442: LD_VAR 0 2
5446: ARRAY
5447: PPUSH
5448: CALL_OW 110
5452: PUSH
5453: LD_INT 1
5455: EQUAL
5456: AND
5457: IFFALSE 5485
// begin spottedByPatrol := true ;
5459: LD_ADDR_EXP 7
5463: PUSH
5464: LD_INT 1
5466: ST_TO_ADDR
// SetTag ( russianPatrol [ i ] , 2 ) ;
5467: LD_EXP 43
5471: PUSH
5472: LD_VAR 0 2
5476: ARRAY
5477: PPUSH
5478: LD_INT 2
5480: PPUSH
5481: CALL_OW 109
// end ; if GetTag ( russianPatrol [ i ] ) = 2 then
5485: LD_EXP 43
5489: PUSH
5490: LD_VAR 0 2
5494: ARRAY
5495: PPUSH
5496: CALL_OW 110
5500: PUSH
5501: LD_INT 2
5503: EQUAL
5504: IFFALSE 5572
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5506: LD_EXP 43
5510: PUSH
5511: LD_VAR 0 2
5515: ARRAY
5516: PPUSH
5517: LD_INT 166
5519: PPUSH
5520: LD_INT 101
5522: PPUSH
5523: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5527: LD_EXP 43
5531: PUSH
5532: LD_VAR 0 2
5536: ARRAY
5537: PPUSH
5538: LD_INT 71
5540: PPUSH
5541: CALL_OW 296
5545: PUSH
5546: LD_INT 10
5548: LESS
5549: IFFALSE 5570
// russianAlert := [ russianPatrol [ i ] ] ;
5551: LD_ADDR_EXP 9
5555: PUSH
5556: LD_EXP 43
5560: PUSH
5561: LD_VAR 0 2
5565: ARRAY
5566: PUSH
5567: EMPTY
5568: LIST
5569: ST_TO_ADDR
// continue ;
5570: GO 5414
// end ; if not HasTask ( russianPatrol [ i ] ) then
5572: LD_EXP 43
5576: PUSH
5577: LD_VAR 0 2
5581: ARRAY
5582: PPUSH
5583: CALL_OW 314
5587: NOT
5588: IFFALSE 5672
// for j in patrol [ i ] do
5590: LD_ADDR_VAR 0 3
5594: PUSH
5595: LD_VAR 0 4
5599: PUSH
5600: LD_VAR 0 2
5604: ARRAY
5605: PUSH
5606: FOR_IN
5607: IFFALSE 5670
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5609: LD_EXP 43
5613: PUSH
5614: LD_VAR 0 2
5618: ARRAY
5619: PPUSH
5620: LD_INT 35
5622: PPUSH
5623: LD_INT 175
5625: PPUSH
5626: CALL_OW 12
5630: PPUSH
5631: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5635: LD_EXP 43
5639: PUSH
5640: LD_VAR 0 2
5644: ARRAY
5645: PPUSH
5646: LD_VAR 0 3
5650: PUSH
5651: LD_INT 1
5653: ARRAY
5654: PPUSH
5655: LD_VAR 0 3
5659: PUSH
5660: LD_INT 2
5662: ARRAY
5663: PPUSH
5664: CALL_OW 174
// end ;
5668: GO 5606
5670: POP
5671: POP
// end ;
5672: GO 5414
5674: POP
5675: POP
// until not russianPatrol or russianAlert ;
5676: LD_EXP 43
5680: NOT
5681: PUSH
5682: LD_EXP 9
5686: OR
5687: IFFALSE 5392
// if russianPatrol then
5689: LD_EXP 43
5693: IFFALSE 5710
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5695: LD_EXP 43
5699: PPUSH
5700: LD_INT 161
5702: PPUSH
5703: LD_INT 107
5705: PPUSH
5706: CALL_OW 114
// end ;
5710: PPOPN 4
5712: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5713: LD_EXP 6
5717: PUSH
5718: LD_EXP 13
5722: NOT
5723: AND
5724: IFFALSE 6165
5726: GO 5728
5728: DISABLE
5729: LD_INT 0
5731: PPUSH
5732: PPUSH
5733: PPUSH
5734: PPUSH
5735: PPUSH
// begin enable ;
5736: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5737: LD_ADDR_VAR 0 2
5741: PUSH
5742: LD_EXP 44
5746: PPUSH
5747: LD_INT 21
5749: PUSH
5750: LD_INT 2
5752: PUSH
5753: EMPTY
5754: LIST
5755: LIST
5756: PPUSH
5757: CALL_OW 72
5761: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5762: LD_ADDR_VAR 0 4
5766: PUSH
5767: LD_INT 22
5769: PUSH
5770: LD_INT 4
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PPUSH
5777: CALL_OW 69
5781: ST_TO_ADDR
// for i in filter do
5782: LD_ADDR_VAR 0 1
5786: PUSH
5787: LD_VAR 0 2
5791: PUSH
5792: FOR_IN
5793: IFFALSE 6163
// begin tmp := IsDrivenBy ( i ) ;
5795: LD_ADDR_VAR 0 3
5799: PUSH
5800: LD_VAR 0 1
5804: PPUSH
5805: CALL_OW 311
5809: ST_TO_ADDR
// if not tmp then
5810: LD_VAR 0 3
5814: NOT
5815: IFFALSE 5819
// continue ;
5817: GO 5792
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5819: LD_VAR 0 1
5823: PPUSH
5824: CALL_OW 261
5828: PUSH
5829: LD_INT 90
5831: GREATER
5832: PUSH
5833: LD_VAR 0 1
5837: PPUSH
5838: CALL_OW 110
5842: PUSH
5843: LD_INT 2
5845: EQUAL
5846: AND
5847: IFFALSE 5863
// SetTag ( i , 0 ) else
5849: LD_VAR 0 1
5853: PPUSH
5854: LD_INT 0
5856: PPUSH
5857: CALL_OW 109
5861: GO 5914
// if GetTag ( i ) = 2 then
5863: LD_VAR 0 1
5867: PPUSH
5868: CALL_OW 110
5872: PUSH
5873: LD_INT 2
5875: EQUAL
5876: IFFALSE 5914
// begin x := rand ( 1 , 2 ) ;
5878: LD_ADDR_VAR 0 5
5882: PUSH
5883: LD_INT 1
5885: PPUSH
5886: LD_INT 2
5888: PPUSH
5889: CALL_OW 12
5893: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5894: LD_VAR 0 1
5898: PPUSH
5899: LD_EXP 45
5903: PUSH
5904: LD_VAR 0 5
5908: ARRAY
5909: PPUSH
5910: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5914: LD_VAR 0 1
5918: PPUSH
5919: CALL_OW 256
5923: PUSH
5924: LD_INT 600
5926: GREATEREQUAL
5927: PUSH
5928: LD_VAR 0 1
5932: PPUSH
5933: CALL_OW 110
5937: NOT
5938: AND
5939: IFFALSE 5965
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5941: LD_VAR 0 1
5945: PPUSH
5946: LD_VAR 0 4
5950: PPUSH
5951: LD_VAR 0 1
5955: PPUSH
5956: CALL_OW 74
5960: PPUSH
5961: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5965: LD_VAR 0 1
5969: PPUSH
5970: CALL_OW 256
5974: PUSH
5975: LD_INT 600
5977: LESS
5978: PUSH
5979: LD_VAR 0 1
5983: PPUSH
5984: CALL_OW 110
5988: NOT
5989: AND
5990: IFFALSE 6019
// begin SetTag ( i , 1 ) ;
5992: LD_VAR 0 1
5996: PPUSH
5997: LD_INT 1
5999: PPUSH
6000: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
6004: LD_VAR 0 1
6008: PPUSH
6009: LD_INT 62
6011: PPUSH
6012: LD_INT 22
6014: PPUSH
6015: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
6019: LD_VAR 0 1
6023: PPUSH
6024: CALL_OW 110
6028: PUSH
6029: LD_INT 1
6031: EQUAL
6032: PUSH
6033: LD_VAR 0 1
6037: PPUSH
6038: LD_INT 62
6040: PPUSH
6041: LD_INT 22
6043: PPUSH
6044: CALL_OW 297
6048: PUSH
6049: LD_INT 6
6051: LESS
6052: AND
6053: PUSH
6054: LD_VAR 0 3
6058: AND
6059: IFFALSE 6161
// begin ComExitVehicle ( tmp ) ;
6061: LD_VAR 0 3
6065: PPUSH
6066: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
6070: LD_VAR 0 3
6074: PPUSH
6075: LD_VAR 0 1
6079: PPUSH
6080: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
6084: LD_INT 35
6086: PPUSH
6087: CALL_OW 67
// until GetLives ( i ) = 1000 ;
6091: LD_VAR 0 1
6095: PPUSH
6096: CALL_OW 256
6100: PUSH
6101: LD_INT 1000
6103: EQUAL
6104: IFFALSE 6084
// ComEnterUnit ( tmp , i ) ;
6106: LD_VAR 0 3
6110: PPUSH
6111: LD_VAR 0 1
6115: PPUSH
6116: CALL_OW 120
// if GetFuel ( i ) <= 90 then
6120: LD_VAR 0 1
6124: PPUSH
6125: CALL_OW 261
6129: PUSH
6130: LD_INT 90
6132: LESSEQUAL
6133: IFFALSE 6149
// SetTag ( i , 2 ) else
6135: LD_VAR 0 1
6139: PPUSH
6140: LD_INT 2
6142: PPUSH
6143: CALL_OW 109
6147: GO 6161
// SetTag ( i , 0 ) ;
6149: LD_VAR 0 1
6153: PPUSH
6154: LD_INT 0
6156: PPUSH
6157: CALL_OW 109
// end ; end ;
6161: GO 5792
6163: POP
6164: POP
// end ;
6165: PPOPN 5
6167: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
6168: LD_EXP 19
6172: IFFALSE 6374
6174: GO 6176
6176: DISABLE
6177: LD_INT 0
6179: PPUSH
6180: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
6181: LD_EXP 45
6185: PPUSH
6186: LD_INT 79
6188: PPUSH
6189: LD_INT 155
6191: PPUSH
6192: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
6196: LD_EXP 45
6200: PPUSH
6201: LD_INT 16
6203: PPUSH
6204: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6208: LD_ADDR_VAR 0 2
6212: PUSH
6213: LD_EXP 44
6217: PPUSH
6218: LD_INT 50
6220: PUSH
6221: EMPTY
6222: LIST
6223: PPUSH
6224: CALL_OW 72
6228: ST_TO_ADDR
// for i in tmp do
6229: LD_ADDR_VAR 0 1
6233: PUSH
6234: LD_VAR 0 2
6238: PUSH
6239: FOR_IN
6240: IFFALSE 6274
// begin ComAgressiveMove ( i , 123 , 60 ) ;
6242: LD_VAR 0 1
6246: PPUSH
6247: LD_INT 123
6249: PPUSH
6250: LD_INT 60
6252: PPUSH
6253: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
6257: LD_VAR 0 1
6261: PPUSH
6262: LD_INT 153
6264: PPUSH
6265: LD_INT 103
6267: PPUSH
6268: CALL_OW 174
// end ;
6272: GO 6239
6274: POP
6275: POP
// repeat wait ( 0 0$1 ) ;
6276: LD_INT 35
6278: PPUSH
6279: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6283: LD_ADDR_VAR 0 2
6287: PUSH
6288: LD_EXP 44
6292: PPUSH
6293: LD_INT 50
6295: PUSH
6296: EMPTY
6297: LIST
6298: PPUSH
6299: CALL_OW 72
6303: ST_TO_ADDR
// for i in tmp do
6304: LD_ADDR_VAR 0 1
6308: PUSH
6309: LD_VAR 0 2
6313: PUSH
6314: FOR_IN
6315: IFFALSE 6365
// if not HasTask ( i ) then
6317: LD_VAR 0 1
6321: PPUSH
6322: CALL_OW 314
6326: NOT
6327: IFFALSE 6363
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) until not tmp ;
6329: LD_VAR 0 1
6333: PPUSH
6334: LD_INT 81
6336: PUSH
6337: LD_INT 3
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PPUSH
6344: CALL_OW 69
6348: PPUSH
6349: LD_VAR 0 1
6353: PPUSH
6354: CALL_OW 74
6358: PPUSH
6359: CALL_OW 115
6363: GO 6314
6365: POP
6366: POP
6367: LD_VAR 0 2
6371: NOT
6372: IFFALSE 6276
// end ;
6374: PPOPN 2
6376: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6377: LD_INT 22
6379: PUSH
6380: LD_INT 3
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: PUSH
6387: LD_INT 32
6389: PUSH
6390: LD_INT 1
6392: PUSH
6393: EMPTY
6394: LIST
6395: LIST
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: PPUSH
6401: CALL_OW 69
6405: IFFALSE 6484
6407: GO 6409
6409: DISABLE
6410: LD_INT 0
6412: PPUSH
// begin enable ;
6413: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6414: LD_ADDR_VAR 0 1
6418: PUSH
6419: LD_INT 22
6421: PUSH
6422: LD_INT 3
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: PUSH
6429: LD_INT 32
6431: PUSH
6432: LD_INT 1
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PPUSH
6443: CALL_OW 69
6447: PUSH
6448: FOR_IN
6449: IFFALSE 6482
// if GetFuel ( i ) < 1 then
6451: LD_VAR 0 1
6455: PPUSH
6456: CALL_OW 261
6460: PUSH
6461: LD_INT 1
6463: LESS
6464: IFFALSE 6480
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6466: LD_VAR 0 1
6470: PPUSH
6471: CALL_OW 311
6475: PPUSH
6476: CALL_OW 121
6480: GO 6448
6482: POP
6483: POP
// end ; end_of_file
6484: PPOPN 1
6486: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6487: LD_INT 0
6489: PPUSH
6490: PPUSH
6491: PPUSH
// SetBName ( omikron , omikron ) ;
6492: LD_INT 64
6494: PPUSH
6495: LD_STRING omikron
6497: PPUSH
6498: CALL_OW 500
// uc_side := 4 ;
6502: LD_ADDR_OWVAR 20
6506: PUSH
6507: LD_INT 4
6509: ST_TO_ADDR
// uc_nation := 1 ;
6510: LD_ADDR_OWVAR 21
6514: PUSH
6515: LD_INT 1
6517: ST_TO_ADDR
// omicronSquad := [ ] ;
6518: LD_ADDR_EXP 47
6522: PUSH
6523: EMPTY
6524: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6525: LD_ADDR_VAR 0 2
6529: PUSH
6530: LD_INT 22
6532: PUSH
6533: LD_INT 4
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: PUSH
6540: LD_INT 2
6542: PUSH
6543: LD_INT 30
6545: PUSH
6546: LD_INT 32
6548: PUSH
6549: EMPTY
6550: LIST
6551: LIST
6552: PUSH
6553: LD_INT 30
6555: PUSH
6556: LD_INT 31
6558: PUSH
6559: EMPTY
6560: LIST
6561: LIST
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: LIST
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: PPUSH
6572: CALL_OW 69
6576: PUSH
6577: FOR_IN
6578: IFFALSE 6635
// begin PrepareHuman ( false , 1 , 1 ) ;
6580: LD_INT 0
6582: PPUSH
6583: LD_INT 1
6585: PPUSH
6586: LD_INT 1
6588: PPUSH
6589: CALL_OW 380
// un := CreateHuman ;
6593: LD_ADDR_VAR 0 3
6597: PUSH
6598: CALL_OW 44
6602: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6603: LD_ADDR_EXP 47
6607: PUSH
6608: LD_EXP 47
6612: PUSH
6613: LD_VAR 0 3
6617: UNION
6618: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6619: LD_VAR 0 3
6623: PPUSH
6624: LD_VAR 0 2
6628: PPUSH
6629: CALL_OW 52
// end ;
6633: GO 6577
6635: POP
6636: POP
// for i := 1 to 3 do
6637: LD_ADDR_VAR 0 2
6641: PUSH
6642: DOUBLE
6643: LD_INT 1
6645: DEC
6646: ST_TO_ADDR
6647: LD_INT 3
6649: PUSH
6650: FOR_TO
6651: IFFALSE 6706
// begin PrepareHuman ( false , 2 , 2 ) ;
6653: LD_INT 0
6655: PPUSH
6656: LD_INT 2
6658: PPUSH
6659: LD_INT 2
6661: PPUSH
6662: CALL_OW 380
// un := CreateHuman ;
6666: LD_ADDR_VAR 0 3
6670: PUSH
6671: CALL_OW 44
6675: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6676: LD_ADDR_EXP 47
6680: PUSH
6681: LD_EXP 47
6685: PUSH
6686: LD_VAR 0 3
6690: UNION
6691: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6692: LD_VAR 0 3
6696: PPUSH
6697: LD_INT 64
6699: PPUSH
6700: CALL_OW 52
// end ;
6704: GO 6650
6706: POP
6707: POP
// for i := 1 to 2 do
6708: LD_ADDR_VAR 0 2
6712: PUSH
6713: DOUBLE
6714: LD_INT 1
6716: DEC
6717: ST_TO_ADDR
6718: LD_INT 2
6720: PUSH
6721: FOR_TO
6722: IFFALSE 6861
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6724: LD_INT 4
6726: PPUSH
6727: LD_INT 1
6729: PPUSH
6730: LD_INT 2
6732: PPUSH
6733: LD_INT 2
6735: PPUSH
6736: LD_INT 1
6738: PPUSH
6739: LD_INT 3
6741: PPUSH
6742: LD_INT 100
6744: PPUSH
6745: CALL 321 0 7
// un := CreateVehicle ;
6749: LD_ADDR_VAR 0 3
6753: PUSH
6754: CALL_OW 45
6758: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6759: LD_ADDR_EXP 47
6763: PUSH
6764: LD_EXP 47
6768: PUSH
6769: LD_VAR 0 3
6773: UNION
6774: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
6775: LD_VAR 0 3
6779: PPUSH
6780: LD_INT 28
6782: PPUSH
6783: LD_INT 37
6785: PPUSH
6786: LD_INT 6
6788: PPUSH
6789: LD_INT 0
6791: PPUSH
6792: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
6796: LD_INT 0
6798: PPUSH
6799: LD_INT 3
6801: PPUSH
6802: LD_INT 2
6804: PPUSH
6805: CALL_OW 380
// un := CreateHuman ;
6809: LD_ADDR_VAR 0 3
6813: PUSH
6814: CALL_OW 44
6818: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6819: LD_ADDR_EXP 47
6823: PUSH
6824: LD_EXP 47
6828: PUSH
6829: LD_VAR 0 3
6833: UNION
6834: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
6835: LD_VAR 0 3
6839: PPUSH
6840: LD_EXP 47
6844: PUSH
6845: LD_EXP 47
6849: PUSH
6850: LD_INT 1
6852: MINUS
6853: ARRAY
6854: PPUSH
6855: CALL_OW 52
// end ;
6859: GO 6721
6861: POP
6862: POP
// end ;
6863: LD_VAR 0 1
6867: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
6868: LD_INT 0
6870: PPUSH
6871: PPUSH
6872: PPUSH
6873: PPUSH
// uc_side := 4 ;
6874: LD_ADDR_OWVAR 20
6878: PUSH
6879: LD_INT 4
6881: ST_TO_ADDR
// uc_nation := 1 ;
6882: LD_ADDR_OWVAR 21
6886: PUSH
6887: LD_INT 1
6889: ST_TO_ADDR
// tmp := [ ] ;
6890: LD_ADDR_VAR 0 4
6894: PUSH
6895: EMPTY
6896: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
6897: LD_INT 4
6899: PPUSH
6900: LD_INT 1
6902: PPUSH
6903: LD_INT 2
6905: PPUSH
6906: LD_INT 1
6908: PPUSH
6909: LD_INT 1
6911: PPUSH
6912: LD_INT 4
6914: PPUSH
6915: LD_INT 77
6917: PPUSH
6918: CALL 321 0 7
// un := CreateVehicle ;
6922: LD_ADDR_VAR 0 3
6926: PUSH
6927: CALL_OW 45
6931: ST_TO_ADDR
// tmp := tmp union un ;
6932: LD_ADDR_VAR 0 4
6936: PUSH
6937: LD_VAR 0 4
6941: PUSH
6942: LD_VAR 0 3
6946: UNION
6947: ST_TO_ADDR
// SetDir ( un , 2 ) ;
6948: LD_VAR 0 3
6952: PPUSH
6953: LD_INT 2
6955: PPUSH
6956: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
6960: LD_VAR 0 3
6964: PPUSH
6965: LD_INT 106
6967: PPUSH
6968: LD_INT 3
6970: PPUSH
6971: LD_INT 0
6973: PPUSH
6974: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
6978: LD_INT 0
6980: PPUSH
6981: LD_INT 3
6983: PPUSH
6984: LD_INT 2
6986: PPUSH
6987: CALL_OW 380
// un := CreateHuman ;
6991: LD_ADDR_VAR 0 3
6995: PUSH
6996: CALL_OW 44
7000: ST_TO_ADDR
// tmp := tmp union un ;
7001: LD_ADDR_VAR 0 4
7005: PUSH
7006: LD_VAR 0 4
7010: PUSH
7011: LD_VAR 0 3
7015: UNION
7016: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7017: LD_VAR 0 3
7021: PPUSH
7022: LD_VAR 0 4
7026: PUSH
7027: LD_VAR 0 4
7031: PUSH
7032: LD_INT 1
7034: MINUS
7035: ARRAY
7036: PPUSH
7037: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7041: LD_VAR 0 3
7045: PPUSH
7046: LD_INT 109
7048: PPUSH
7049: LD_INT 9
7051: PPUSH
7052: CALL_OW 111
// wait ( 0 0$1 ) ;
7056: LD_INT 35
7058: PPUSH
7059: CALL_OW 67
// for i := 1 to 2 do
7063: LD_ADDR_VAR 0 2
7067: PUSH
7068: DOUBLE
7069: LD_INT 1
7071: DEC
7072: ST_TO_ADDR
7073: LD_INT 2
7075: PUSH
7076: FOR_TO
7077: IFFALSE 7141
// begin PrepareHuman ( false , 1 , 2 ) ;
7079: LD_INT 0
7081: PPUSH
7082: LD_INT 1
7084: PPUSH
7085: LD_INT 2
7087: PPUSH
7088: CALL_OW 380
// un := CreateHuman ;
7092: LD_ADDR_VAR 0 3
7096: PUSH
7097: CALL_OW 44
7101: ST_TO_ADDR
// tmp := tmp union un ;
7102: LD_ADDR_VAR 0 4
7106: PUSH
7107: LD_VAR 0 4
7111: PUSH
7112: LD_VAR 0 3
7116: UNION
7117: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7118: LD_VAR 0 3
7122: PPUSH
7123: LD_INT 105
7125: PPUSH
7126: LD_INT 2
7128: PPUSH
7129: LD_INT 2
7131: PPUSH
7132: LD_INT 0
7134: PPUSH
7135: CALL_OW 50
// end ;
7139: GO 7076
7141: POP
7142: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7143: LD_VAR 0 4
7147: PPUSH
7148: LD_INT 26
7150: PPUSH
7151: LD_INT 35
7153: PPUSH
7154: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7158: LD_INT 35
7160: PPUSH
7161: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7165: LD_VAR 0 4
7169: PPUSH
7170: LD_INT 50
7172: PUSH
7173: EMPTY
7174: LIST
7175: PPUSH
7176: CALL_OW 72
7180: NOT
7181: IFFALSE 7185
// exit ;
7183: GO 7312
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7185: LD_VAR 0 4
7189: PPUSH
7190: LD_INT 91
7192: PUSH
7193: LD_INT 64
7195: PUSH
7196: LD_INT 12
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: LIST
7203: PPUSH
7204: CALL_OW 72
7208: PUSH
7209: LD_VAR 0 4
7213: EQUAL
7214: IFFALSE 7158
// omicronSquad := omicronSquad union tmp ;
7216: LD_ADDR_EXP 47
7220: PUSH
7221: LD_EXP 47
7225: PUSH
7226: LD_VAR 0 4
7230: UNION
7231: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7232: LD_ADDR_VAR 0 2
7236: PUSH
7237: LD_VAR 0 4
7241: PPUSH
7242: LD_INT 25
7244: PUSH
7245: LD_INT 1
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PPUSH
7252: CALL_OW 72
7256: PUSH
7257: FOR_IN
7258: IFFALSE 7310
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7260: LD_VAR 0 2
7264: PPUSH
7265: LD_INT 22
7267: PUSH
7268: LD_INT 4
7270: PUSH
7271: EMPTY
7272: LIST
7273: LIST
7274: PUSH
7275: LD_INT 30
7277: PUSH
7278: LD_INT 4
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: PPUSH
7289: CALL_OW 69
7293: PPUSH
7294: LD_VAR 0 2
7298: PPUSH
7299: CALL_OW 74
7303: PPUSH
7304: CALL_OW 120
7308: GO 7257
7310: POP
7311: POP
// end ;
7312: LD_VAR 0 1
7316: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7317: LD_EXP 13
7321: NOT
7322: IFFALSE 7893
7324: GO 7326
7326: DISABLE
7327: LD_INT 0
7329: PPUSH
7330: PPUSH
7331: PPUSH
7332: PPUSH
// begin enable ;
7333: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7334: LD_ADDR_VAR 0 2
7338: PUSH
7339: LD_INT 22
7341: PUSH
7342: LD_INT 4
7344: PUSH
7345: EMPTY
7346: LIST
7347: LIST
7348: PUSH
7349: LD_INT 21
7351: PUSH
7352: LD_INT 3
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: PUSH
7359: LD_INT 3
7361: PUSH
7362: LD_INT 24
7364: PUSH
7365: LD_INT 1000
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: LIST
7380: PPUSH
7381: CALL_OW 69
7385: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7386: LD_ADDR_VAR 0 3
7390: PUSH
7391: LD_EXP 47
7395: PPUSH
7396: LD_INT 25
7398: PUSH
7399: LD_INT 2
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: PPUSH
7406: CALL_OW 72
7410: ST_TO_ADDR
// if filter and tmp then
7411: LD_VAR 0 2
7415: PUSH
7416: LD_VAR 0 3
7420: AND
7421: IFFALSE 7494
// begin for i in tmp do
7423: LD_ADDR_VAR 0 1
7427: PUSH
7428: LD_VAR 0 3
7432: PUSH
7433: FOR_IN
7434: IFFALSE 7490
// if IsInUnit ( i ) then
7436: LD_VAR 0 1
7440: PPUSH
7441: CALL_OW 310
7445: IFFALSE 7458
// ComExitBuilding ( i ) else
7447: LD_VAR 0 1
7451: PPUSH
7452: CALL_OW 122
7456: GO 7488
// if not HasTask ( i ) then
7458: LD_VAR 0 1
7462: PPUSH
7463: CALL_OW 314
7467: NOT
7468: IFFALSE 7488
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7470: LD_VAR 0 1
7474: PPUSH
7475: LD_VAR 0 2
7479: PUSH
7480: LD_INT 1
7482: ARRAY
7483: PPUSH
7484: CALL_OW 130
7488: GO 7433
7490: POP
7491: POP
// end else
7492: GO 7565
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7494: LD_VAR 0 3
7498: PPUSH
7499: LD_INT 3
7501: PUSH
7502: LD_INT 54
7504: PUSH
7505: EMPTY
7506: LIST
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: PPUSH
7512: CALL_OW 72
7516: IFFALSE 7565
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7518: LD_ADDR_VAR 0 1
7522: PUSH
7523: LD_VAR 0 3
7527: PPUSH
7528: LD_INT 3
7530: PUSH
7531: LD_INT 54
7533: PUSH
7534: EMPTY
7535: LIST
7536: PUSH
7537: EMPTY
7538: LIST
7539: LIST
7540: PPUSH
7541: CALL_OW 72
7545: PUSH
7546: FOR_IN
7547: IFFALSE 7563
// ComEnterUnit ( i , omikron ) ;
7549: LD_VAR 0 1
7553: PPUSH
7554: LD_INT 64
7556: PPUSH
7557: CALL_OW 120
7561: GO 7546
7563: POP
7564: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7565: LD_ADDR_VAR 0 2
7569: PUSH
7570: LD_EXP 47
7574: PPUSH
7575: LD_INT 21
7577: PUSH
7578: LD_INT 2
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: PPUSH
7585: CALL_OW 72
7589: ST_TO_ADDR
// if not filter then
7590: LD_VAR 0 2
7594: NOT
7595: IFFALSE 7599
// exit ;
7597: GO 7893
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7599: LD_ADDR_VAR 0 4
7603: PUSH
7604: LD_INT 13
7606: PPUSH
7607: LD_INT 81
7609: PUSH
7610: LD_INT 4
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: PPUSH
7617: CALL_OW 70
7621: ST_TO_ADDR
// if enemy then
7622: LD_VAR 0 4
7626: IFFALSE 7893
// begin for i in filter do
7628: LD_ADDR_VAR 0 1
7632: PUSH
7633: LD_VAR 0 2
7637: PUSH
7638: FOR_IN
7639: IFFALSE 7891
// begin tmp := IsDrivenBy ( i ) ;
7641: LD_ADDR_VAR 0 3
7645: PUSH
7646: LD_VAR 0 1
7650: PPUSH
7651: CALL_OW 311
7655: ST_TO_ADDR
// if not tmp then
7656: LD_VAR 0 3
7660: NOT
7661: IFFALSE 7665
// continue ;
7663: GO 7638
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7665: LD_VAR 0 1
7669: PPUSH
7670: CALL_OW 256
7674: PUSH
7675: LD_INT 600
7677: GREATEREQUAL
7678: PUSH
7679: LD_VAR 0 1
7683: PPUSH
7684: CALL_OW 110
7688: PUSH
7689: LD_INT 1
7691: NONEQUAL
7692: AND
7693: IFFALSE 7719
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7695: LD_VAR 0 1
7699: PPUSH
7700: LD_VAR 0 4
7704: PPUSH
7705: LD_VAR 0 1
7709: PPUSH
7710: CALL_OW 74
7714: PPUSH
7715: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7719: LD_VAR 0 1
7723: PPUSH
7724: CALL_OW 256
7728: PUSH
7729: LD_INT 600
7731: LESS
7732: PUSH
7733: LD_VAR 0 1
7737: PPUSH
7738: CALL_OW 110
7742: PUSH
7743: LD_INT 1
7745: NONEQUAL
7746: AND
7747: IFFALSE 7776
// begin SetTag ( i , 1 ) ;
7749: LD_VAR 0 1
7753: PPUSH
7754: LD_INT 1
7756: PPUSH
7757: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
7761: LD_VAR 0 1
7765: PPUSH
7766: LD_INT 27
7768: PPUSH
7769: LD_INT 35
7771: PPUSH
7772: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
7776: LD_VAR 0 1
7780: PPUSH
7781: CALL_OW 110
7785: PUSH
7786: LD_INT 1
7788: EQUAL
7789: PUSH
7790: LD_VAR 0 1
7794: PPUSH
7795: LD_INT 27
7797: PPUSH
7798: LD_INT 35
7800: PPUSH
7801: CALL_OW 297
7805: PUSH
7806: LD_INT 6
7808: LESS
7809: AND
7810: PUSH
7811: LD_VAR 0 3
7815: AND
7816: IFFALSE 7889
// begin ComExitVehicle ( tmp ) ;
7818: LD_VAR 0 3
7822: PPUSH
7823: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
7827: LD_VAR 0 3
7831: PPUSH
7832: LD_VAR 0 1
7836: PPUSH
7837: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
7841: LD_INT 35
7843: PPUSH
7844: CALL_OW 67
// until GetLives ( i ) = 1000 ;
7848: LD_VAR 0 1
7852: PPUSH
7853: CALL_OW 256
7857: PUSH
7858: LD_INT 1000
7860: EQUAL
7861: IFFALSE 7841
// ComEnterUnit ( tmp , i ) ;
7863: LD_VAR 0 3
7867: PPUSH
7868: LD_VAR 0 1
7872: PPUSH
7873: CALL_OW 120
// SetTag ( i , 0 ) ;
7877: LD_VAR 0 1
7881: PPUSH
7882: LD_INT 0
7884: PPUSH
7885: CALL_OW 109
// end ; end ;
7889: GO 7638
7891: POP
7892: POP
// end ; end ;
7893: PPOPN 4
7895: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
7896: LD_EXP 13
7900: IFFALSE 8044
7902: GO 7904
7904: DISABLE
7905: LD_INT 0
7907: PPUSH
7908: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
7909: LD_ADDR_VAR 0 2
7913: PUSH
7914: LD_EXP 47
7918: PPUSH
7919: LD_INT 21
7921: PUSH
7922: LD_INT 1
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PUSH
7929: LD_INT 50
7931: PUSH
7932: EMPTY
7933: LIST
7934: PUSH
7935: EMPTY
7936: LIST
7937: LIST
7938: PPUSH
7939: CALL_OW 72
7943: ST_TO_ADDR
// if not tmp then
7944: LD_VAR 0 2
7948: NOT
7949: IFFALSE 7953
// exit ;
7951: GO 8044
// repeat wait ( 0 0$1 ) ;
7953: LD_INT 35
7955: PPUSH
7956: CALL_OW 67
// for i in tmp do
7960: LD_ADDR_VAR 0 1
7964: PUSH
7965: LD_VAR 0 2
7969: PUSH
7970: FOR_IN
7971: IFFALSE 8035
// begin ComExit ( i ) ;
7973: LD_VAR 0 1
7977: PPUSH
7978: CALL 759 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
7982: LD_VAR 0 1
7986: PPUSH
7987: LD_INT 14
7989: PPUSH
7990: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
7994: LD_VAR 0 1
7998: PPUSH
7999: LD_INT 14
8001: PPUSH
8002: CALL_OW 308
8006: IFFALSE 8033
// begin tmp := tmp diff i ;
8008: LD_ADDR_VAR 0 2
8012: PUSH
8013: LD_VAR 0 2
8017: PUSH
8018: LD_VAR 0 1
8022: DIFF
8023: ST_TO_ADDR
// RemoveUnit ( i ) ;
8024: LD_VAR 0 1
8028: PPUSH
8029: CALL_OW 64
// end ; end ;
8033: GO 7970
8035: POP
8036: POP
// until not tmp ;
8037: LD_VAR 0 2
8041: NOT
8042: IFFALSE 7953
// end ; end_of_file
8044: PPOPN 2
8046: END
// export function Action ; var i , un , veh , tmp ; begin
8047: LD_INT 0
8049: PPUSH
8050: PPUSH
8051: PPUSH
8052: PPUSH
8053: PPUSH
// InGameOn ;
8054: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8058: LD_INT 179
8060: PPUSH
8061: LD_INT 5
8063: PPUSH
8064: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8068: LD_ADDR_VAR 0 4
8072: PUSH
8073: LD_INT 2
8075: PPUSH
8076: LD_INT 2
8078: PPUSH
8079: LD_INT 12
8081: PPUSH
8082: LD_INT 1
8084: PPUSH
8085: LD_INT 1
8087: PPUSH
8088: LD_INT 24
8090: PPUSH
8091: LD_INT 33
8093: PPUSH
8094: CALL 321 0 7
8098: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8099: LD_VAR 0 4
8103: PPUSH
8104: LD_INT 2
8106: PPUSH
8107: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8111: LD_VAR 0 4
8115: PPUSH
8116: LD_INT 178
8118: PPUSH
8119: LD_INT 2
8121: PPUSH
8122: LD_INT 0
8124: PPUSH
8125: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8129: LD_EXP 22
8133: PPUSH
8134: LD_VAR 0 4
8138: PPUSH
8139: CALL_OW 52
// if Kamil then
8143: LD_EXP 26
8147: IFFALSE 8182
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8149: LD_EXP 26
8153: PPUSH
8154: LD_INT 207
8156: PPUSH
8157: LD_INT 37
8159: PPUSH
8160: LD_INT 0
8162: PPUSH
8163: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8167: LD_EXP 26
8171: PPUSH
8172: LD_INT 211
8174: PPUSH
8175: LD_INT 38
8177: PPUSH
8178: CALL_OW 118
// end ; if Sophia then
8182: LD_EXP 28
8186: IFFALSE 8221
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8188: LD_EXP 28
8192: PPUSH
8193: LD_INT 209
8195: PPUSH
8196: LD_INT 40
8198: PPUSH
8199: LD_INT 0
8201: PPUSH
8202: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8206: LD_EXP 28
8210: PPUSH
8211: LD_INT 211
8213: PPUSH
8214: LD_INT 38
8216: PPUSH
8217: CALL_OW 118
// end ; if Givi then
8221: LD_EXP 23
8225: IFFALSE 8260
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8227: LD_EXP 23
8231: PPUSH
8232: LD_INT 201
8234: PPUSH
8235: LD_INT 34
8237: PPUSH
8238: LD_INT 0
8240: PPUSH
8241: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8245: LD_EXP 23
8249: PPUSH
8250: LD_INT 206
8252: PPUSH
8253: LD_INT 36
8255: PPUSH
8256: CALL_OW 118
// end ; if Ibrahim then
8260: LD_EXP 25
8264: IFFALSE 8299
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8266: LD_EXP 25
8270: PPUSH
8271: LD_INT 202
8273: PPUSH
8274: LD_INT 39
8276: PPUSH
8277: LD_INT 0
8279: PPUSH
8280: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8284: LD_EXP 25
8288: PPUSH
8289: LD_INT 206
8291: PPUSH
8292: LD_INT 36
8294: PPUSH
8295: CALL_OW 118
// end ; if Markov then
8299: LD_EXP 29
8303: IFFALSE 8390
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8305: LD_ADDR_VAR 0 4
8309: PUSH
8310: LD_INT 2
8312: PPUSH
8313: LD_INT 2
8315: PPUSH
8316: LD_INT 13
8318: PPUSH
8319: LD_INT 1
8321: PPUSH
8322: LD_INT 1
8324: PPUSH
8325: LD_INT 25
8327: PPUSH
8328: LD_INT 80
8330: PUSH
8331: LD_INT 20
8333: PUSH
8334: LD_OWVAR 67
8338: MUL
8339: MINUS
8340: PPUSH
8341: CALL 321 0 7
8345: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8346: LD_VAR 0 4
8350: PPUSH
8351: LD_INT 2
8353: PPUSH
8354: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8358: LD_VAR 0 4
8362: PPUSH
8363: LD_INT 197
8365: PPUSH
8366: LD_INT 35
8368: PPUSH
8369: LD_INT 0
8371: PPUSH
8372: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8376: LD_EXP 29
8380: PPUSH
8381: LD_VAR 0 4
8385: PPUSH
8386: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8390: LD_ADDR_VAR 0 5
8394: PUSH
8395: LD_EXP 27
8399: PUSH
8400: LD_EXP 33
8404: UNION
8405: ST_TO_ADDR
// for i in tmp do
8406: LD_ADDR_VAR 0 2
8410: PUSH
8411: LD_VAR 0 5
8415: PUSH
8416: FOR_IN
8417: IFFALSE 8451
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8419: LD_VAR 0 2
8423: PPUSH
8424: LD_INT 203
8426: PPUSH
8427: LD_INT 41
8429: PPUSH
8430: LD_INT 6
8432: PPUSH
8433: LD_INT 0
8435: PPUSH
8436: CALL_OW 50
// ComHold ( i ) ;
8440: LD_VAR 0 2
8444: PPUSH
8445: CALL_OW 140
// end ;
8449: GO 8416
8451: POP
8452: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8453: LD_INT 22
8455: PUSH
8456: LD_INT 2
8458: PUSH
8459: EMPTY
8460: LIST
8461: LIST
8462: PUSH
8463: LD_INT 25
8465: PUSH
8466: LD_INT 2
8468: PUSH
8469: EMPTY
8470: LIST
8471: LIST
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: PPUSH
8477: CALL_OW 69
8481: NOT
8482: IFFALSE 8496
// SetClass ( Heike , 2 ) ;
8484: LD_EXP 22
8488: PPUSH
8489: LD_INT 2
8491: PPUSH
8492: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8496: LD_EXP 22
8500: PPUSH
8501: LD_INT 183
8503: PPUSH
8504: LD_INT 12
8506: PPUSH
8507: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8511: LD_EXP 22
8515: PPUSH
8516: LD_INT 188
8518: PPUSH
8519: LD_INT 20
8521: PPUSH
8522: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8526: LD_EXP 22
8530: PPUSH
8531: LD_INT 191
8533: PPUSH
8534: LD_INT 25
8536: PPUSH
8537: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8541: LD_EXP 22
8545: PPUSH
8546: LD_INT 203
8548: PPUSH
8549: LD_INT 29
8551: PPUSH
8552: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8556: LD_EXP 22
8560: PPUSH
8561: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8565: LD_INT 35
8567: PPUSH
8568: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8572: LD_EXP 22
8576: PPUSH
8577: CALL_OW 310
8581: NOT
8582: IFFALSE 8565
// CenterOnUnits ( Heike ) ;
8584: LD_EXP 22
8588: PPUSH
8589: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8593: LD_ADDR_VAR 0 5
8597: PUSH
8598: LD_INT 22
8600: PUSH
8601: LD_INT 2
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: PUSH
8608: LD_INT 21
8610: PUSH
8611: LD_INT 1
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: PPUSH
8622: CALL_OW 69
8626: PUSH
8627: LD_EXP 22
8631: PUSH
8632: LD_EXP 29
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: DIFF
8641: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8642: LD_VAR 0 5
8646: PPUSH
8647: LD_EXP 22
8651: PPUSH
8652: CALL_OW 119
// if Givi then
8656: LD_EXP 23
8660: IFFALSE 8678
// ComTurnUnit ( Heike , Givi ) else
8662: LD_EXP 22
8666: PPUSH
8667: LD_EXP 23
8671: PPUSH
8672: CALL_OW 119
8676: GO 8696
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8678: LD_EXP 22
8682: PPUSH
8683: LD_VAR 0 5
8687: PUSH
8688: LD_INT 1
8690: ARRAY
8691: PPUSH
8692: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8696: LD_EXP 22
8700: PPUSH
8701: LD_STRING DH-Start-1
8703: PPUSH
8704: CALL_OW 88
// if Givi then
8708: LD_EXP 23
8712: IFFALSE 8759
// begin Say ( Givi , DG-Start-2 ) ;
8714: LD_EXP 23
8718: PPUSH
8719: LD_STRING DG-Start-2
8721: PPUSH
8722: CALL_OW 88
// if not Mike then
8726: LD_EXP 24
8730: NOT
8731: IFFALSE 8757
// begin Say ( Givi , DG-Start-b-3 ) ;
8733: LD_EXP 23
8737: PPUSH
8738: LD_STRING DG-Start-b-3
8740: PPUSH
8741: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
8745: LD_EXP 22
8749: PPUSH
8750: LD_STRING DH-Start-b-4
8752: PPUSH
8753: CALL_OW 88
// end ; end else
8757: GO 8824
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
8759: LD_EXP 33
8763: PPUSH
8764: LD_INT 26
8766: PUSH
8767: LD_INT 1
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: PPUSH
8774: CALL_OW 72
8778: PUSH
8779: LD_INT 1
8781: ARRAY
8782: PPUSH
8783: LD_STRING DArm-Start-a-2
8785: PPUSH
8786: CALL_OW 88
8790: NOT
8791: IFFALSE 8824
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
8793: LD_EXP 33
8797: PPUSH
8798: LD_INT 26
8800: PUSH
8801: LD_INT 2
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: PPUSH
8808: CALL_OW 72
8812: PUSH
8813: LD_INT 1
8815: ARRAY
8816: PPUSH
8817: LD_STRING DArf-Start-a-2
8819: PPUSH
8820: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
8824: LD_EXP 22
8828: PPUSH
8829: LD_INT 211
8831: PPUSH
8832: LD_INT 38
8834: PPUSH
8835: CALL_OW 118
// wait ( 0 0$1 ) ;
8839: LD_INT 35
8841: PPUSH
8842: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
8846: LD_EXP 22
8850: PPUSH
8851: LD_STRING DH-Start-3
8853: PPUSH
8854: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8858: LD_EXP 22
8862: PPUSH
8863: LD_STRING DH-Start-4
8865: PPUSH
8866: CALL_OW 88
// InGameOff ;
8870: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
8874: LD_STRING Prepare
8876: PPUSH
8877: CALL_OW 337
// SaveForQuickRestart ;
8881: CALL_OW 22
// wait ( 0 0$10 ) ;
8885: LD_INT 350
8887: PPUSH
8888: CALL_OW 67
// if not Aviradze then
8892: LD_EXP 32
8896: NOT
8897: IFFALSE 8901
// exit ;
8899: GO 9105
// SetDir ( Aviradze , 4 ) ;
8901: LD_EXP 32
8905: PPUSH
8906: LD_INT 4
8908: PPUSH
8909: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
8913: LD_EXP 32
8917: PPUSH
8918: LD_INT 225
8920: PPUSH
8921: LD_INT 33
8923: PPUSH
8924: LD_INT 0
8926: PPUSH
8927: CALL_OW 48
// for i := 1 to 2 do
8931: LD_ADDR_VAR 0 2
8935: PUSH
8936: DOUBLE
8937: LD_INT 1
8939: DEC
8940: ST_TO_ADDR
8941: LD_INT 2
8943: PUSH
8944: FOR_TO
8945: IFFALSE 9076
// begin uc_side := 2 ;
8947: LD_ADDR_OWVAR 20
8951: PUSH
8952: LD_INT 2
8954: ST_TO_ADDR
// uc_nation := 0 ;
8955: LD_ADDR_OWVAR 21
8959: PUSH
8960: LD_INT 0
8962: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
8963: LD_INT 0
8965: PPUSH
8966: LD_INT 12
8968: PPUSH
8969: LD_INT 1
8971: PPUSH
8972: CALL_OW 380
// hc_gallery :=  ;
8976: LD_ADDR_OWVAR 33
8980: PUSH
8981: LD_STRING 
8983: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
8984: LD_ADDR_OWVAR 26
8988: PUSH
8989: LD_STRING Artudito
8991: PUSH
8992: LD_STRING Textur
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: PUSH
8999: LD_VAR 0 2
9003: ARRAY
9004: ST_TO_ADDR
// un := CreateHuman ;
9005: LD_ADDR_VAR 0 3
9009: PUSH
9010: CALL_OW 44
9014: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9015: LD_VAR 0 3
9019: PPUSH
9020: LD_INT 224
9022: PUSH
9023: LD_INT 226
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PUSH
9030: LD_VAR 0 2
9034: ARRAY
9035: PPUSH
9036: LD_INT 31
9038: PUSH
9039: LD_INT 35
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: PUSH
9046: LD_VAR 0 2
9050: ARRAY
9051: PPUSH
9052: LD_INT 0
9054: PPUSH
9055: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9059: LD_VAR 0 3
9063: PPUSH
9064: LD_INT 215
9066: PPUSH
9067: LD_INT 36
9069: PPUSH
9070: CALL_OW 111
// end ;
9074: GO 8944
9076: POP
9077: POP
// hc_name :=  ;
9078: LD_ADDR_OWVAR 26
9082: PUSH
9083: LD_STRING 
9085: ST_TO_ADDR
// InitHc ;
9086: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9090: LD_EXP 32
9094: PPUSH
9095: LD_INT 215
9097: PPUSH
9098: LD_INT 36
9100: PPUSH
9101: CALL_OW 111
// end ;
9105: LD_VAR 0 1
9109: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
9110: LD_EXP 3
9114: IFFALSE 10416
9116: GO 9118
9118: DISABLE
9119: LD_INT 0
9121: PPUSH
9122: PPUSH
9123: PPUSH
// begin DialogueOn ;
9124: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9128: LD_EXP 22
9132: PPUSH
9133: LD_STRING DH-base-1
9135: PPUSH
9136: CALL_OW 88
// if Markov then
9140: LD_EXP 29
9144: IFFALSE 9196
// begin Say ( Markov , DMar-base-2 ) ;
9146: LD_EXP 29
9150: PPUSH
9151: LD_STRING DMar-base-2
9153: PPUSH
9154: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9158: LD_EXP 29
9162: PPUSH
9163: LD_STRING DMar-base-3
9165: PPUSH
9166: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9170: LD_EXP 22
9174: PPUSH
9175: LD_STRING DH-base-4
9177: PPUSH
9178: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9182: LD_EXP 29
9186: PPUSH
9187: LD_STRING DMar-base-5
9189: PPUSH
9190: CALL_OW 88
// end else
9194: GO 9273
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9196: LD_EXP 33
9200: PPUSH
9201: LD_INT 26
9203: PUSH
9204: LD_INT 1
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PPUSH
9211: CALL_OW 72
9215: PUSH
9216: LD_INT 1
9218: ARRAY
9219: PPUSH
9220: LD_STRING DArm-base-a-2
9222: PPUSH
9223: CALL_OW 88
9227: NOT
9228: IFFALSE 9261
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9230: LD_EXP 33
9234: PPUSH
9235: LD_INT 26
9237: PUSH
9238: LD_INT 2
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: PPUSH
9245: CALL_OW 72
9249: PUSH
9250: LD_INT 1
9252: ARRAY
9253: PPUSH
9254: LD_STRING DArf-base-a-2
9256: PPUSH
9257: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9261: LD_EXP 22
9265: PPUSH
9266: LD_STRING DH-base-a-3
9268: PPUSH
9269: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9273: LD_EXP 32
9277: PPUSH
9278: LD_STRING DA-base-6
9280: PPUSH
9281: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9285: LD_EXP 32
9289: PPUSH
9290: LD_STRING DA-base-7
9292: PPUSH
9293: CALL_OW 88
// DialogueOff ;
9297: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9301: LD_STRING Flamethrower
9303: PPUSH
9304: CALL_OW 337
// wait ( 2 2$00 ) ;
9308: LD_INT 4200
9310: PPUSH
9311: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9315: LD_EXP 31
9319: PUSH
9320: LD_EXP 24
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: PPUSH
9329: LD_INT 203
9331: PPUSH
9332: LD_INT 37
9334: PPUSH
9335: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9339: LD_INT 22
9341: PUSH
9342: LD_INT 2
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: PUSH
9349: LD_INT 92
9351: PUSH
9352: LD_INT 203
9354: PUSH
9355: LD_INT 37
9357: PUSH
9358: LD_INT 10
9360: PUSH
9361: EMPTY
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: PPUSH
9371: CALL_OW 69
9375: NOT
9376: IFFALSE 9416
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9378: LD_EXP 31
9382: PUSH
9383: LD_EXP 24
9387: PUSH
9388: EMPTY
9389: LIST
9390: LIST
9391: PPUSH
9392: LD_EXP 22
9396: PPUSH
9397: CALL_OW 250
9401: PPUSH
9402: LD_EXP 22
9406: PPUSH
9407: CALL_OW 251
9411: PPUSH
9412: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9416: LD_INT 35
9418: PPUSH
9419: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9423: LD_INT 2
9425: PPUSH
9426: LD_EXP 31
9430: PPUSH
9431: CALL_OW 292
9435: PUSH
9436: LD_EXP 31
9440: PPUSH
9441: LD_EXP 22
9445: PPUSH
9446: CALL_OW 296
9450: PUSH
9451: LD_INT 8
9453: LESS
9454: PUSH
9455: LD_EXP 31
9459: PPUSH
9460: LD_INT 22
9462: PUSH
9463: LD_INT 2
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: PUSH
9470: LD_INT 21
9472: PUSH
9473: LD_INT 3
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: PPUSH
9484: CALL_OW 69
9488: PPUSH
9489: LD_EXP 31
9493: PPUSH
9494: CALL_OW 74
9498: PPUSH
9499: CALL_OW 296
9503: PUSH
9504: LD_INT 7
9506: LESS
9507: OR
9508: AND
9509: PUSH
9510: LD_EXP 31
9514: PPUSH
9515: LD_INT 10
9517: PPUSH
9518: CALL_OW 308
9522: NOT
9523: AND
9524: IFFALSE 9416
// InGameOn ;
9526: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9530: LD_EXP 31
9534: PPUSH
9535: CALL_OW 87
// if IsInUnit ( Heike ) then
9539: LD_EXP 22
9543: PPUSH
9544: CALL_OW 310
9548: IFFALSE 9559
// ComExitBuilding ( Heike ) ;
9550: LD_EXP 22
9554: PPUSH
9555: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9559: LD_EXP 31
9563: PUSH
9564: LD_EXP 24
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: PPUSH
9573: LD_EXP 22
9577: PPUSH
9578: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9582: LD_EXP 22
9586: PPUSH
9587: LD_EXP 31
9591: PPUSH
9592: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9596: LD_INT 22
9598: PUSH
9599: LD_INT 2
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PUSH
9606: LD_INT 91
9608: PUSH
9609: LD_EXP 31
9613: PUSH
9614: LD_INT 10
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: LIST
9621: PUSH
9622: LD_INT 21
9624: PUSH
9625: LD_INT 3
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: LIST
9636: PPUSH
9637: CALL_OW 69
9641: IFFALSE 9667
// begin Say ( Kurt , DKs-scout-1 ) ;
9643: LD_EXP 31
9647: PPUSH
9648: LD_STRING DKs-scout-1
9650: PPUSH
9651: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9655: LD_EXP 22
9659: PPUSH
9660: LD_STRING DH-scout-2
9662: PPUSH
9663: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9667: LD_INT 35
9669: PPUSH
9670: CALL_OW 67
// until GetDistUnits ( Heike , Kurt ) < 6 ;
9674: LD_EXP 22
9678: PPUSH
9679: LD_EXP 31
9683: PPUSH
9684: CALL_OW 296
9688: PUSH
9689: LD_INT 6
9691: LESS
9692: IFFALSE 9667
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
9694: LD_EXP 31
9698: PUSH
9699: LD_EXP 24
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: PPUSH
9708: LD_EXP 22
9712: PPUSH
9713: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
9717: LD_EXP 31
9721: PPUSH
9722: LD_STRING DKs-scout-3
9724: PPUSH
9725: CALL_OW 88
// if Kaia then
9729: LD_EXP 27
9733: IFFALSE 9916
// begin if IsInUnit ( Kaia ) then
9735: LD_EXP 27
9739: PPUSH
9740: CALL_OW 310
9744: IFFALSE 9755
// ComExitBuilding ( Kaia ) ;
9746: LD_EXP 27
9750: PPUSH
9751: CALL_OW 122
// AddComMoveUnit ( Kaia , Kurt ) ;
9755: LD_EXP 27
9759: PPUSH
9760: LD_EXP 31
9764: PPUSH
9765: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
9769: LD_INT 35
9771: PPUSH
9772: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
9776: LD_EXP 27
9780: PPUSH
9781: LD_EXP 31
9785: PPUSH
9786: CALL_OW 296
9790: PUSH
9791: LD_INT 6
9793: LESS
9794: IFFALSE 9769
// ComTurnUnit ( Kaia , Kurt ) ;
9796: LD_EXP 27
9800: PPUSH
9801: LD_EXP 31
9805: PPUSH
9806: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
9810: LD_EXP 27
9814: PPUSH
9815: LD_STRING DK-scout-4
9817: PPUSH
9818: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
9822: LD_EXP 31
9826: PPUSH
9827: LD_EXP 27
9831: PPUSH
9832: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
9836: LD_EXP 31
9840: PPUSH
9841: LD_STRING DKs-scout-5
9843: PPUSH
9844: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
9848: LD_EXP 27
9852: PPUSH
9853: LD_STRING DK-scout-6
9855: PPUSH
9856: CALL_OW 88
// if Mike then
9860: LD_EXP 24
9864: IFFALSE 9916
// begin Say ( Mike , DM-scout-7 ) ;
9866: LD_EXP 24
9870: PPUSH
9871: LD_STRING DM-scout-7
9873: PPUSH
9874: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
9878: LD_EXP 27
9882: PPUSH
9883: LD_EXP 24
9887: PPUSH
9888: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
9892: LD_EXP 27
9896: PPUSH
9897: LD_STRING DK-scout-8
9899: PPUSH
9900: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
9904: LD_EXP 24
9908: PPUSH
9909: LD_STRING DM-scout-9
9911: PPUSH
9912: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
9916: LD_INT 184
9918: PPUSH
9919: LD_INT 100
9921: PPUSH
9922: LD_INT 2
9924: PPUSH
9925: LD_INT 12
9927: NEG
9928: PPUSH
9929: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
9933: LD_INT 184
9935: PPUSH
9936: LD_INT 100
9938: PPUSH
9939: LD_INT 2
9941: PPUSH
9942: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
9946: LD_INT 184
9948: PPUSH
9949: LD_INT 100
9951: PPUSH
9952: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
9956: LD_EXP 31
9960: PPUSH
9961: LD_STRING DKs-scout-10
9963: PPUSH
9964: CALL_OW 88
// wait ( 0 0$1 ) ;
9968: LD_INT 35
9970: PPUSH
9971: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
9975: LD_INT 144
9977: PPUSH
9978: LD_INT 65
9980: PPUSH
9981: LD_INT 2
9983: PPUSH
9984: LD_INT 12
9986: NEG
9987: PPUSH
9988: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
9992: LD_INT 144
9994: PPUSH
9995: LD_INT 65
9997: PPUSH
9998: LD_INT 2
10000: PPUSH
10001: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
10005: LD_INT 144
10007: PPUSH
10008: LD_INT 65
10010: PPUSH
10011: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
10015: LD_EXP 31
10019: PPUSH
10020: LD_STRING DKs-scout-11
10022: PPUSH
10023: CALL_OW 88
// wait ( 0 0$1 ) ;
10027: LD_INT 35
10029: PPUSH
10030: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
10034: LD_EXP 31
10038: PPUSH
10039: CALL_OW 87
// if Mike and not Givi then
10043: LD_EXP 24
10047: PUSH
10048: LD_EXP 23
10052: NOT
10053: AND
10054: IFFALSE 10080
// begin Say ( Mike , DM-scout-a-1 ) ;
10056: LD_EXP 24
10060: PPUSH
10061: LD_STRING DM-scout-a-1
10063: PPUSH
10064: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
10068: LD_EXP 22
10072: PPUSH
10073: LD_STRING DH-scout-a-2
10075: PPUSH
10076: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10080: LD_EXP 31
10084: PUSH
10085: LD_EXP 24
10089: PUSH
10090: EMPTY
10091: LIST
10092: LIST
10093: PPUSH
10094: LD_INT 2
10096: PPUSH
10097: CALL_OW 235
// InGameOff ;
10101: CALL_OW 9
// allowToPatrol := true ;
10105: LD_ADDR_EXP 12
10109: PUSH
10110: LD_INT 1
10112: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10113: LD_INT 3150
10115: PPUSH
10116: CALL_OW 67
// InitHc ;
10120: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 ] [ Difficulty ] do
10124: LD_ADDR_VAR 0 1
10128: PUSH
10129: DOUBLE
10130: LD_INT 1
10132: DEC
10133: ST_TO_ADDR
10134: LD_INT 3
10136: PUSH
10137: LD_INT 3
10139: PUSH
10140: LD_INT 2
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: LIST
10147: PUSH
10148: LD_OWVAR 67
10152: ARRAY
10153: PUSH
10154: FOR_TO
10155: IFFALSE 10414
// begin uc_side := 2 ;
10157: LD_ADDR_OWVAR 20
10161: PUSH
10162: LD_INT 2
10164: ST_TO_ADDR
// uc_nation := 2 ;
10165: LD_ADDR_OWVAR 21
10169: PUSH
10170: LD_INT 2
10172: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 ] [ Difficulty ] ) ;
10173: LD_INT 0
10175: PPUSH
10176: LD_INT 1
10178: PUSH
10179: LD_INT 3
10181: PUSH
10182: LD_INT 1
10184: PUSH
10185: EMPTY
10186: LIST
10187: LIST
10188: LIST
10189: PUSH
10190: LD_VAR 0 1
10194: PUSH
10195: LD_INT 3
10197: MOD
10198: PUSH
10199: LD_INT 1
10201: PLUS
10202: ARRAY
10203: PPUSH
10204: LD_INT 3
10206: PUSH
10207: LD_INT 2
10209: PUSH
10210: LD_INT 2
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: LIST
10217: PUSH
10218: LD_OWVAR 67
10222: ARRAY
10223: PPUSH
10224: CALL_OW 380
// un := CreateHuman ;
10228: LD_ADDR_VAR 0 2
10232: PUSH
10233: CALL_OW 44
10237: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10238: LD_ADDR_EXP 33
10242: PUSH
10243: LD_EXP 33
10247: PUSH
10248: LD_VAR 0 2
10252: UNION
10253: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10254: LD_INT 2
10256: PPUSH
10257: LD_INT 2
10259: PPUSH
10260: LD_INT 13
10262: PPUSH
10263: LD_INT 2
10265: PUSH
10266: LD_INT 1
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: PUSH
10273: LD_VAR 0 1
10277: PUSH
10278: LD_INT 2
10280: MOD
10281: PUSH
10282: LD_INT 1
10284: PLUS
10285: ARRAY
10286: PPUSH
10287: LD_INT 1
10289: PPUSH
10290: LD_INT 27
10292: PUSH
10293: LD_INT 25
10295: PUSH
10296: LD_INT 27
10298: PUSH
10299: LD_INT 23
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: PUSH
10308: LD_OWVAR 67
10312: PUSH
10313: LD_INT 0
10315: PPUSH
10316: LD_INT 1
10318: PPUSH
10319: CALL_OW 12
10323: PLUS
10324: ARRAY
10325: PPUSH
10326: LD_INT 77
10328: PPUSH
10329: CALL 321 0 7
// veh := CreateVehicle ;
10333: LD_ADDR_VAR 0 3
10337: PUSH
10338: CALL_OW 45
10342: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10343: LD_VAR 0 3
10347: PPUSH
10348: LD_INT 2
10350: PPUSH
10351: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10355: LD_VAR 0 3
10359: PPUSH
10360: LD_INT 178
10362: PPUSH
10363: LD_INT 2
10365: PPUSH
10366: LD_INT 2
10368: PPUSH
10369: LD_INT 0
10371: PPUSH
10372: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10376: LD_VAR 0 2
10380: PPUSH
10381: LD_VAR 0 3
10385: PPUSH
10386: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10390: LD_VAR 0 2
10394: PPUSH
10395: LD_INT 183
10397: PPUSH
10398: LD_INT 11
10400: PPUSH
10401: CALL_OW 111
// wait ( 0 0$2 ) ;
10405: LD_INT 70
10407: PPUSH
10408: CALL_OW 67
// end ;
10412: GO 10154
10414: POP
10415: POP
// end ;
10416: PPOPN 3
10418: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10419: LD_EXP 4
10423: PUSH
10424: LD_EXP 32
10428: PPUSH
10429: CALL_OW 302
10433: AND
10434: IFFALSE 10483
10436: GO 10438
10438: DISABLE
// begin DialogueOn ;
10439: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10443: LD_EXP 32
10447: PPUSH
10448: LD_STRING DA-lab-1
10450: PPUSH
10451: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10455: LD_EXP 32
10459: PPUSH
10460: LD_STRING DA-lab-2
10462: PPUSH
10463: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10467: LD_EXP 22
10471: PPUSH
10472: LD_STRING DH-lab-3
10474: PPUSH
10475: CALL_OW 88
// DialogueOff ;
10479: CALL_OW 7
// end ;
10483: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10484: LD_INT 17
10486: PPUSH
10487: LD_INT 2
10489: PPUSH
10490: CALL_OW 321
10494: PUSH
10495: LD_INT 2
10497: EQUAL
10498: IFFALSE 10630
10500: GO 10502
10502: DISABLE
10503: LD_INT 0
10505: PPUSH
// begin DialogueOn ;
10506: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10510: LD_EXP 32
10514: PPUSH
10515: LD_STRING DA-Cam-1
10517: PPUSH
10518: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10522: LD_EXP 32
10526: PPUSH
10527: LD_STRING DA-Cam-2
10529: PPUSH
10530: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10534: LD_EXP 32
10538: PPUSH
10539: LD_STRING DA-Cam-3
10541: PPUSH
10542: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10546: LD_EXP 22
10550: PPUSH
10551: LD_STRING DH-Cam-4
10553: PPUSH
10554: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
10558: LD_EXP 27
10562: PPUSH
10563: LD_STRING DK-Cam-5
10565: PPUSH
10566: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
10570: LD_EXP 27
10574: PPUSH
10575: LD_STRING DK-Cam-6
10577: PPUSH
10578: CALL_OW 88
// DialogueOff ;
10582: CALL_OW 7
// Query ( Camera ) ;
10586: LD_STRING Camera
10588: PPUSH
10589: CALL_OW 97
// hiddenCameraAllowed := true ;
10593: LD_ADDR_EXP 5
10597: PUSH
10598: LD_INT 1
10600: ST_TO_ADDR
// for i in camAreas do
10601: LD_ADDR_VAR 0 1
10605: PUSH
10606: LD_EXP 8
10610: PUSH
10611: FOR_IN
10612: IFFALSE 10628
// SetAreaMapShow ( i , 1 ) ;
10614: LD_VAR 0 1
10618: PPUSH
10619: LD_INT 1
10621: PPUSH
10622: CALL_OW 424
10626: GO 10611
10628: POP
10629: POP
// end ;
10630: PPOPN 1
10632: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
10633: LD_EXP 8
10637: NOT
10638: PUSH
10639: LD_EXP 5
10643: AND
10644: IFFALSE 10742
10646: GO 10648
10648: DISABLE
10649: LD_INT 0
10651: PPUSH
// begin stop_talking := true ;
10652: LD_ADDR_OWVAR 56
10656: PUSH
10657: LD_INT 1
10659: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
10660: LD_ADDR_VAR 0 1
10664: PUSH
10665: LD_INT 22
10667: PUSH
10668: LD_INT 2
10670: PUSH
10671: EMPTY
10672: LIST
10673: LIST
10674: PUSH
10675: LD_INT 21
10677: PUSH
10678: LD_INT 1
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: PUSH
10685: LD_INT 23
10687: PUSH
10688: LD_INT 2
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: LIST
10699: PPUSH
10700: CALL_OW 69
10704: PUSH
10705: FOR_IN
10706: IFFALSE 10725
// AddExperience ( i , 2 , 450 ) ;
10708: LD_VAR 0 1
10712: PPUSH
10713: LD_INT 2
10715: PPUSH
10716: LD_INT 450
10718: PPUSH
10719: CALL_OW 492
10723: GO 10705
10725: POP
10726: POP
// stop_talking := false ;
10727: LD_ADDR_OWVAR 56
10731: PUSH
10732: LD_INT 0
10734: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
10735: LD_STRING ACH_CAMERA
10737: PPUSH
10738: CALL_OW 543
// end ;
10742: PPOPN 1
10744: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
10745: LD_EXP 9
10749: PUSH
10750: LD_EXP 11
10754: NOT
10755: AND
10756: IFFALSE 10849
10758: GO 10760
10760: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert [ 1 ] ) , GetY ( russianAlert [ 1 ] ) , 2 , - 6 ) ;
10761: LD_EXP 9
10765: PUSH
10766: LD_INT 1
10768: ARRAY
10769: PPUSH
10770: CALL_OW 250
10774: PPUSH
10775: LD_EXP 9
10779: PUSH
10780: LD_INT 1
10782: ARRAY
10783: PPUSH
10784: CALL_OW 251
10788: PPUSH
10789: LD_INT 2
10791: PPUSH
10792: LD_INT 6
10794: NEG
10795: PPUSH
10796: CALL_OW 330
// CenterNowOnUnits ( russianAlert [ 1 ] ) ;
10800: LD_EXP 9
10804: PUSH
10805: LD_INT 1
10807: ARRAY
10808: PPUSH
10809: CALL_OW 87
// DialogueOn ;
10813: CALL_OW 6
// if spottedByPatrol then
10817: LD_EXP 7
10821: IFFALSE 10835
// Say ( Heike , DH-Spot-f-3 ) ;
10823: LD_EXP 22
10827: PPUSH
10828: LD_STRING DH-Spot-f-3
10830: PPUSH
10831: CALL_OW 88
// dwait ( 0 0$2 ) ;
10835: LD_INT 70
10837: PPUSH
10838: CALL_OW 68
// YouLost ( Spotted ) ;
10842: LD_STRING Spotted
10844: PPUSH
10845: CALL_OW 104
// end ;
10849: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_see , 2 ] ] ) diff russianPatrol do
10850: LD_INT 2
10852: PUSH
10853: LD_INT 22
10855: PUSH
10856: LD_INT 3
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PUSH
10863: LD_INT 22
10865: PUSH
10866: LD_INT 6
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: LIST
10877: PUSH
10878: LD_INT 101
10880: PUSH
10881: LD_INT 2
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: PPUSH
10892: CALL_OW 69
10896: PUSH
10897: LD_EXP 43
10901: DIFF
10902: IFFALSE 10972
10904: GO 10906
10906: DISABLE
// russianAlert := [ FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_see , 2 ] ] ) diff russianPatrol ] [ 1 ] ;
10907: LD_ADDR_EXP 9
10911: PUSH
10912: LD_INT 2
10914: PUSH
10915: LD_INT 22
10917: PUSH
10918: LD_INT 3
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: PUSH
10925: LD_INT 22
10927: PUSH
10928: LD_INT 6
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: LIST
10939: PUSH
10940: LD_INT 101
10942: PUSH
10943: LD_INT 2
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: PPUSH
10954: CALL_OW 69
10958: PUSH
10959: LD_EXP 43
10963: DIFF
10964: PUSH
10965: EMPTY
10966: LIST
10967: PUSH
10968: LD_INT 1
10970: ARRAY
10971: ST_TO_ADDR
10972: END
// every 0 0$1 trigger russianAlert do var i , tmp , towers , noncombat ;
10973: LD_EXP 9
10977: IFFALSE 11274
10979: GO 10981
10981: DISABLE
10982: LD_INT 0
10984: PPUSH
10985: PPUSH
10986: PPUSH
10987: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_inside ] ] ) ;
10988: LD_ADDR_VAR 0 2
10992: PUSH
10993: LD_EXP 40
10997: PPUSH
10998: LD_INT 25
11000: PUSH
11001: LD_INT 1
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: PUSH
11008: LD_INT 54
11010: PUSH
11011: EMPTY
11012: LIST
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: PPUSH
11018: CALL_OW 72
11022: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
11023: LD_ADDR_VAR 0 3
11027: PUSH
11028: LD_INT 22
11030: PUSH
11031: LD_INT 6
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: PUSH
11038: LD_INT 30
11040: PUSH
11041: LD_INT 32
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: PPUSH
11052: CALL_OW 69
11056: ST_TO_ADDR
// for i := 1 to tmp do
11057: LD_ADDR_VAR 0 1
11061: PUSH
11062: DOUBLE
11063: LD_INT 1
11065: DEC
11066: ST_TO_ADDR
11067: LD_VAR 0 2
11071: PUSH
11072: FOR_TO
11073: IFFALSE 11118
// begin ComExitBuilding ( tmp [ i ] ) ;
11075: LD_VAR 0 2
11079: PUSH
11080: LD_VAR 0 1
11084: ARRAY
11085: PPUSH
11086: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , towers [ i ] ) ;
11090: LD_VAR 0 2
11094: PUSH
11095: LD_VAR 0 1
11099: ARRAY
11100: PPUSH
11101: LD_VAR 0 3
11105: PUSH
11106: LD_VAR 0 1
11110: ARRAY
11111: PPUSH
11112: CALL_OW 180
// end ;
11116: GO 11072
11118: POP
11119: POP
// noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11120: LD_ADDR_VAR 0 4
11124: PUSH
11125: LD_EXP 38
11129: PUSH
11130: LD_EXP 40
11134: PUSH
11135: LD_EXP 41
11139: UNION
11140: PPUSH
11141: LD_INT 3
11143: PUSH
11144: LD_INT 25
11146: PUSH
11147: LD_INT 1
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: PPUSH
11158: CALL_OW 72
11162: UNION
11163: ST_TO_ADDR
// for i in noncombat do
11164: LD_ADDR_VAR 0 1
11168: PUSH
11169: LD_VAR 0 4
11173: PUSH
11174: FOR_IN
11175: IFFALSE 11211
// begin if IsInUnit ( i ) then
11177: LD_VAR 0 1
11181: PPUSH
11182: CALL_OW 310
11186: IFFALSE 11197
// ComExitBuilding ( i ) ;
11188: LD_VAR 0 1
11192: PPUSH
11193: CALL_OW 122
// AddComMoveToArea ( i , westEscapeArea ) ;
11197: LD_VAR 0 1
11201: PPUSH
11202: LD_INT 16
11204: PPUSH
11205: CALL_OW 173
// end ;
11209: GO 11174
11211: POP
11212: POP
// if not allowHeikeAttack then
11213: LD_EXP 11
11217: NOT
11218: IFFALSE 11222
// exit ;
11220: GO 11274
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11222: LD_EXP 36
11226: PPUSH
11227: LD_STRING D9a-Kur-1
11229: PPUSH
11230: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11234: LD_EXP 39
11238: PPUSH
11239: LD_STRING D9a-Bur-1
11241: PPUSH
11242: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11246: LD_EXP 36
11250: PPUSH
11251: LD_STRING D9a-Kur-2
11253: PPUSH
11254: CALL_OW 94
// omicronFall := true ;
11258: LD_ADDR_EXP 13
11262: PUSH
11263: LD_INT 1
11265: ST_TO_ADDR
// retreatFromOmicron := true ;
11266: LD_ADDR_EXP 19
11270: PUSH
11271: LD_INT 1
11273: ST_TO_ADDR
// end ;
11274: PPOPN 4
11276: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11277: LD_INT 16
11279: PPUSH
11280: LD_INT 3
11282: PUSH
11283: LD_INT 22
11285: PUSH
11286: LD_INT 2
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: PUSH
11297: LD_INT 23
11299: PUSH
11300: LD_INT 3
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: PPUSH
11311: CALL_OW 70
11315: IFFALSE 11398
11317: GO 11319
11319: DISABLE
11320: LD_INT 0
11322: PPUSH
// begin enable ;
11323: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11324: LD_ADDR_VAR 0 1
11328: PUSH
11329: LD_INT 16
11331: PPUSH
11332: LD_INT 3
11334: PUSH
11335: LD_INT 22
11337: PUSH
11338: LD_INT 2
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: LD_INT 23
11351: PUSH
11352: LD_INT 3
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: PPUSH
11363: CALL_OW 70
11367: PUSH
11368: FOR_IN
11369: IFFALSE 11396
// begin escapeCounter := escapeCounter + 1 ;
11371: LD_ADDR_EXP 18
11375: PUSH
11376: LD_EXP 18
11380: PUSH
11381: LD_INT 1
11383: PLUS
11384: ST_TO_ADDR
// RemoveUnit ( i ) ;
11385: LD_VAR 0 1
11389: PPUSH
11390: CALL_OW 64
// end ;
11394: GO 11368
11396: POP
11397: POP
// end ;
11398: PPOPN 1
11400: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11401: LD_OWVAR 1
11405: PUSH
11406: LD_INT 13650
11408: PUSH
11409: LD_INT 0
11411: PPUSH
11412: LD_INT 3150
11414: PPUSH
11415: CALL_OW 12
11419: PLUS
11420: GREATEREQUAL
11421: IFFALSE 11430
11423: GO 11425
11425: DISABLE
// SmallAmericanReinforcements ;
11426: CALL 6868 0 0
11430: END
// every 0 0$1 trigger tick >= 9 9$15 do
11431: LD_OWVAR 1
11435: PUSH
11436: LD_INT 19425
11438: GREATEREQUAL
11439: IFFALSE 11504
11441: GO 11443
11443: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11444: LD_EXP 44
11448: PPUSH
11449: LD_INT 21
11451: PUSH
11452: LD_INT 2
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: PPUSH
11459: CALL_OW 72
11463: PPUSH
11464: LD_INT 62
11466: PPUSH
11467: LD_INT 22
11469: PPUSH
11470: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11474: LD_EXP 45
11478: PPUSH
11479: LD_INT 69
11481: PPUSH
11482: LD_INT 27
11484: PPUSH
11485: CALL_OW 111
// wait ( 1 1$00 ) ;
11489: LD_INT 2100
11491: PPUSH
11492: CALL_OW 67
// startAttackOnOmicron := true ;
11496: LD_ADDR_EXP 6
11500: PUSH
11501: LD_INT 1
11503: ST_TO_ADDR
// end ;
11504: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11505: LD_EXP 21
11509: PUSH
11510: LD_INT 0
11512: EQUAL
11513: IFFALSE 13372
11515: GO 11517
11517: DISABLE
11518: LD_INT 0
11520: PPUSH
11521: PPUSH
11522: PPUSH
11523: PPUSH
11524: PPUSH
11525: PPUSH
11526: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11527: LD_INT 5
11529: PPUSH
11530: LD_INT 2
11532: PPUSH
11533: CALL_OW 343
// PrepareOmarForces ;
11537: CALL 2295 0 0
// wait ( 0 0$03 ) ;
11541: LD_INT 105
11543: PPUSH
11544: CALL_OW 67
// allowHeikeAttack := true ;
11548: LD_ADDR_EXP 11
11552: PUSH
11553: LD_INT 1
11555: ST_TO_ADDR
// activeGrishkoAI := false ;
11556: LD_ADDR_EXP 10
11560: PUSH
11561: LD_INT 0
11563: ST_TO_ADDR
// CenterOnUnits ( Omar ) ;
11564: LD_EXP 30
11568: PPUSH
11569: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
11573: LD_ADDR_VAR 0 1
11577: PUSH
11578: LD_INT 22
11580: PUSH
11581: LD_INT 2
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: PUSH
11588: LD_INT 21
11590: PUSH
11591: LD_INT 1
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: PPUSH
11602: CALL_OW 69
11606: PUSH
11607: FOR_IN
11608: IFFALSE 11632
// if HasTask ( i ) then
11610: LD_VAR 0 1
11614: PPUSH
11615: CALL_OW 314
11619: IFFALSE 11630
// ComHold ( i ) ;
11621: LD_VAR 0 1
11625: PPUSH
11626: CALL_OW 140
11630: GO 11607
11632: POP
11633: POP
// DialogueOn ;
11634: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
11638: LD_EXP 30
11642: PPUSH
11643: LD_STRING DO-assault-1
11645: PPUSH
11646: CALL_OW 94
// DialogueOff ;
11650: CALL_OW 7
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
11654: LD_ADDR_VAR 0 1
11658: PUSH
11659: LD_EXP 42
11663: PPUSH
11664: LD_INT 3
11666: PUSH
11667: LD_INT 54
11669: PUSH
11670: EMPTY
11671: LIST
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: PPUSH
11677: CALL_OW 72
11681: PUSH
11682: FOR_IN
11683: IFFALSE 11702
// ComMoveXY ( i , 226 , 114 ) ;
11685: LD_VAR 0 1
11689: PPUSH
11690: LD_INT 226
11692: PPUSH
11693: LD_INT 114
11695: PPUSH
11696: CALL_OW 111
11700: GO 11682
11702: POP
11703: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
11704: LD_EXP 37
11708: PPUSH
11709: LD_INT 22
11711: PUSH
11712: LD_INT 6
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: PUSH
11719: LD_INT 30
11721: PUSH
11722: LD_INT 4
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: PPUSH
11733: CALL_OW 69
11737: PPUSH
11738: LD_EXP 37
11742: PPUSH
11743: CALL_OW 74
11747: PPUSH
11748: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
11752: LD_STRING Attack
11754: PPUSH
11755: CALL_OW 337
// music_class := music_combat ;
11759: LD_ADDR_OWVAR 72
11763: PUSH
11764: LD_INT 1
11766: ST_TO_ADDR
// music_nat := 4 ;
11767: LD_ADDR_OWVAR 71
11771: PUSH
11772: LD_INT 4
11774: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
11775: LD_INT 5
11777: PPUSH
11778: LD_EXP 37
11782: PPUSH
11783: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
11787: LD_INT 6
11789: PPUSH
11790: LD_EXP 34
11794: PPUSH
11795: LD_INT 25
11797: PUSH
11798: LD_INT 1
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: PPUSH
11805: CALL_OW 72
11809: PUSH
11810: LD_INT 4
11812: ARRAY
11813: PPUSH
11814: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
11818: LD_ADDR_VAR 0 1
11822: PUSH
11823: LD_EXP 34
11827: PPUSH
11828: LD_INT 3
11830: PUSH
11831: LD_INT 25
11833: PUSH
11834: LD_INT 4
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: PPUSH
11845: CALL_OW 72
11849: PUSH
11850: FOR_IN
11851: IFFALSE 11870
// ComAgressiveMove ( i , 221 , 110 ) ;
11853: LD_VAR 0 1
11857: PPUSH
11858: LD_INT 221
11860: PPUSH
11861: LD_INT 110
11863: PPUSH
11864: CALL_OW 114
11868: GO 11850
11870: POP
11871: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
11872: LD_EXP 34
11876: PPUSH
11877: LD_INT 25
11879: PUSH
11880: LD_INT 4
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: PPUSH
11887: CALL_OW 72
11891: PPUSH
11892: LD_INT 214
11894: PPUSH
11895: LD_INT 124
11897: PPUSH
11898: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
11902: LD_EXP 34
11906: PPUSH
11907: LD_INT 25
11909: PUSH
11910: LD_INT 1
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PPUSH
11917: CALL_OW 72
11921: PUSH
11922: LD_INT 4
11924: ARRAY
11925: PPUSH
11926: LD_INT 214
11928: PPUSH
11929: LD_INT 114
11931: PPUSH
11932: LD_INT 0
11934: PPUSH
11935: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
11939: LD_EXP 37
11943: PPUSH
11944: LD_STRING D9-Gri-1
11946: PPUSH
11947: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
11951: LD_EXP 36
11955: PPUSH
11956: LD_STRING D9-Kur-1
11958: PPUSH
11959: CALL_OW 94
// wait ( 0 0$1 ) ;
11963: LD_INT 35
11965: PPUSH
11966: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
11970: LD_EXP 30
11974: PPUSH
11975: LD_INT 233
11977: PPUSH
11978: LD_INT 130
11980: PPUSH
11981: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
11985: LD_EXP 37
11989: PPUSH
11990: LD_STRING D9-Gri-2
11992: PPUSH
11993: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
11997: LD_EXP 36
12001: PPUSH
12002: LD_STRING D9-Kur-2
12004: PPUSH
12005: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
12009: LD_EXP 37
12013: PPUSH
12014: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
12018: LD_EXP 37
12022: PPUSH
12023: LD_INT 211
12025: PPUSH
12026: LD_INT 104
12028: PPUSH
12029: CALL_OW 171
// AddComHold ( Grishko ) ;
12033: LD_EXP 37
12037: PPUSH
12038: CALL_OW 200
// repeat wait ( 3 ) ;
12042: LD_INT 3
12044: PPUSH
12045: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
12049: LD_EXP 37
12053: PPUSH
12054: CALL_OW 310
12058: NOT
12059: IFFALSE 12042
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
12061: LD_EXP 34
12065: PPUSH
12066: LD_INT 34
12068: PUSH
12069: LD_INT 26
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: PPUSH
12076: CALL_OW 72
12080: PPUSH
12081: LD_EXP 37
12085: PPUSH
12086: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12090: LD_EXP 34
12094: PPUSH
12095: LD_INT 34
12097: PUSH
12098: LD_INT 26
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: PPUSH
12105: CALL_OW 72
12109: PPUSH
12110: LD_INT 215
12112: PPUSH
12113: LD_INT 106
12115: PPUSH
12116: CALL_OW 174
// repeat wait ( 3 ) ;
12120: LD_INT 3
12122: PPUSH
12123: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12127: LD_EXP 37
12131: PPUSH
12132: CALL_OW 256
12136: PUSH
12137: LD_INT 1000
12139: LESS
12140: IFFALSE 12120
// NormalAttack ( 5 , Grishko ) ;
12142: LD_INT 5
12144: PPUSH
12145: LD_EXP 37
12149: PPUSH
12150: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12154: LD_INT 6
12156: PPUSH
12157: LD_EXP 34
12161: PPUSH
12162: LD_INT 25
12164: PUSH
12165: LD_INT 1
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: PPUSH
12172: CALL_OW 72
12176: PUSH
12177: LD_INT 4
12179: ARRAY
12180: PPUSH
12181: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
12185: LD_EXP 37
12189: PPUSH
12190: LD_STRING D9-Gri-3
12192: PPUSH
12193: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12197: LD_EXP 36
12201: PPUSH
12202: LD_STRING D9-Kur-3
12204: PPUSH
12205: CALL_OW 94
// music_class := music_auto ;
12209: LD_ADDR_OWVAR 72
12213: PUSH
12214: LD_INT 0
12216: ST_TO_ADDR
// music_nat := music_auto ;
12217: LD_ADDR_OWVAR 71
12221: PUSH
12222: LD_INT 0
12224: ST_TO_ADDR
// for i in omarSquad do
12225: LD_ADDR_VAR 0 1
12229: PUSH
12230: LD_EXP 34
12234: PUSH
12235: FOR_IN
12236: IFFALSE 12378
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12238: LD_VAR 0 1
12242: PPUSH
12243: CALL_OW 247
12247: PUSH
12248: LD_INT 2
12250: EQUAL
12251: PUSH
12252: LD_VAR 0 1
12256: PPUSH
12257: CALL_OW 256
12261: PUSH
12262: LD_INT 1000
12264: LESS
12265: AND
12266: IFFALSE 12332
// begin driver := IsDrivenBy ( i ) ;
12268: LD_ADDR_VAR 0 2
12272: PUSH
12273: LD_VAR 0 1
12277: PPUSH
12278: CALL_OW 311
12282: ST_TO_ADDR
// veh := i ;
12283: LD_ADDR_VAR 0 3
12287: PUSH
12288: LD_VAR 0 1
12292: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12293: LD_VAR 0 2
12297: PPUSH
12298: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12302: LD_VAR 0 2
12306: PPUSH
12307: LD_VAR 0 3
12311: PPUSH
12312: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12316: LD_VAR 0 2
12320: PPUSH
12321: LD_VAR 0 3
12325: PPUSH
12326: CALL_OW 180
// end else
12330: GO 12376
// if GetLives ( i ) < 500 then
12332: LD_VAR 0 1
12336: PPUSH
12337: CALL_OW 256
12341: PUSH
12342: LD_INT 500
12344: LESS
12345: IFFALSE 12376
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12347: LD_EXP 34
12351: PPUSH
12352: LD_INT 25
12354: PUSH
12355: LD_INT 4
12357: PUSH
12358: EMPTY
12359: LIST
12360: LIST
12361: PPUSH
12362: CALL_OW 72
12366: PPUSH
12367: LD_VAR 0 1
12371: PPUSH
12372: CALL_OW 188
// end ; end ;
12376: GO 12235
12378: POP
12379: POP
// repeat wait ( 0 0$1 ) ;
12380: LD_INT 35
12382: PPUSH
12383: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12387: LD_EXP 34
12391: PPUSH
12392: LD_INT 3
12394: PUSH
12395: LD_INT 24
12397: PUSH
12398: LD_INT 1000
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: PUSH
12409: LD_INT 21
12411: PUSH
12412: LD_INT 2
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PPUSH
12423: CALL_OW 72
12427: NOT
12428: PUSH
12429: LD_EXP 34
12433: PPUSH
12434: LD_INT 3
12436: PUSH
12437: LD_INT 24
12439: PUSH
12440: LD_INT 250
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: PPUSH
12451: CALL_OW 72
12455: NOT
12456: AND
12457: IFFALSE 12380
// wait ( 0 0$2 ) ;
12459: LD_INT 70
12461: PPUSH
12462: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12466: LD_ADDR_VAR 0 5
12470: PUSH
12471: LD_EXP 34
12475: PPUSH
12476: LD_INT 58
12478: PUSH
12479: EMPTY
12480: LIST
12481: PUSH
12482: LD_INT 21
12484: PUSH
12485: LD_INT 2
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: PPUSH
12496: CALL_OW 72
12500: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
12501: LD_ADDR_VAR 0 6
12505: PUSH
12506: LD_EXP 34
12510: PPUSH
12511: LD_INT 25
12513: PUSH
12514: LD_INT 3
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PUSH
12521: LD_INT 3
12523: PUSH
12524: LD_INT 55
12526: PUSH
12527: EMPTY
12528: LIST
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: PPUSH
12538: CALL_OW 72
12542: ST_TO_ADDR
// for i := 1 to tmp do
12543: LD_ADDR_VAR 0 1
12547: PUSH
12548: DOUBLE
12549: LD_INT 1
12551: DEC
12552: ST_TO_ADDR
12553: LD_VAR 0 5
12557: PUSH
12558: FOR_TO
12559: IFFALSE 12589
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
12561: LD_VAR 0 6
12565: PUSH
12566: LD_VAR 0 1
12570: ARRAY
12571: PPUSH
12572: LD_VAR 0 5
12576: PUSH
12577: LD_VAR 0 1
12581: ARRAY
12582: PPUSH
12583: CALL_OW 120
12587: GO 12558
12589: POP
12590: POP
// wait ( 0 0$5 ) ;
12591: LD_INT 175
12593: PPUSH
12594: CALL_OW 67
// ComMoveXY ( omarSquad , 199 , 141 ) ;
12598: LD_EXP 34
12602: PPUSH
12603: LD_INT 199
12605: PPUSH
12606: LD_INT 141
12608: PPUSH
12609: CALL_OW 111
// ComMoveXY ( Omar , 190 , 143 ) ;
12613: LD_EXP 30
12617: PPUSH
12618: LD_INT 190
12620: PPUSH
12621: LD_INT 143
12623: PPUSH
12624: CALL_OW 111
// AddComHold ( Omar ) ;
12628: LD_EXP 30
12632: PPUSH
12633: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
12637: LD_EXP 34
12641: PPUSH
12642: LD_INT 2
12644: PUSH
12645: LD_INT 25
12647: PUSH
12648: LD_INT 1
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: PUSH
12655: LD_INT 25
12657: PUSH
12658: LD_INT 4
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: LIST
12669: PPUSH
12670: CALL_OW 72
12674: PPUSH
12675: LD_INT 161
12677: PPUSH
12678: LD_INT 130
12680: PPUSH
12681: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
12685: LD_EXP 34
12689: PPUSH
12690: LD_INT 25
12692: PUSH
12693: LD_INT 1
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PPUSH
12700: CALL_OW 72
12704: PPUSH
12705: LD_INT 163
12707: PPUSH
12708: LD_INT 122
12710: PPUSH
12711: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
12715: LD_EXP 34
12719: PPUSH
12720: LD_INT 25
12722: PUSH
12723: LD_INT 1
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: PPUSH
12730: CALL_OW 72
12734: PUSH
12735: LD_INT 4
12737: ARRAY
12738: PPUSH
12739: LD_INT 165
12741: PPUSH
12742: LD_INT 118
12744: PPUSH
12745: LD_INT 0
12747: PPUSH
12748: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
12752: LD_EXP 34
12756: PPUSH
12757: LD_INT 25
12759: PUSH
12760: LD_INT 1
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: PPUSH
12767: CALL_OW 72
12771: PUSH
12772: LD_INT 4
12774: ARRAY
12775: PPUSH
12776: LD_INT 159
12778: PPUSH
12779: LD_INT 116
12781: PPUSH
12782: LD_INT 0
12784: PPUSH
12785: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
12789: LD_EXP 34
12793: PPUSH
12794: LD_INT 21
12796: PUSH
12797: LD_INT 2
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: PPUSH
12804: CALL_OW 72
12808: PPUSH
12809: LD_INT 169
12811: PPUSH
12812: LD_INT 114
12814: PPUSH
12815: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
12819: LD_INT 35
12821: PPUSH
12822: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
12826: LD_ADDR_VAR 0 5
12830: PUSH
12831: LD_EXP 34
12835: PPUSH
12836: LD_INT 25
12838: PUSH
12839: LD_INT 1
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PPUSH
12846: CALL_OW 72
12850: ST_TO_ADDR
// for i in tmp do
12851: LD_ADDR_VAR 0 1
12855: PUSH
12856: LD_VAR 0 5
12860: PUSH
12861: FOR_IN
12862: IFFALSE 12959
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
12864: LD_VAR 0 1
12868: PPUSH
12869: CALL_OW 256
12873: PUSH
12874: LD_INT 600
12876: LESS
12877: PUSH
12878: LD_VAR 0 1
12882: PPUSH
12883: LD_INT 161
12885: PPUSH
12886: LD_INT 130
12888: PPUSH
12889: CALL_OW 297
12893: PUSH
12894: LD_INT 6
12896: GREATER
12897: AND
12898: IFFALSE 12915
// ComMoveXY ( i , 161 , 130 ) ;
12900: LD_VAR 0 1
12904: PPUSH
12905: LD_INT 161
12907: PPUSH
12908: LD_INT 130
12910: PPUSH
12911: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
12915: LD_VAR 0 1
12919: PPUSH
12920: CALL_OW 256
12924: PUSH
12925: LD_INT 1000
12927: EQUAL
12928: PUSH
12929: LD_VAR 0 1
12933: PPUSH
12934: CALL_OW 314
12938: NOT
12939: AND
12940: IFFALSE 12957
// ComAgressiveMove ( i , 160 , 109 ) ;
12942: LD_VAR 0 1
12946: PPUSH
12947: LD_INT 160
12949: PPUSH
12950: LD_INT 109
12952: PPUSH
12953: CALL_OW 114
// end ;
12957: GO 12861
12959: POP
12960: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
12961: LD_ADDR_VAR 0 5
12965: PUSH
12966: LD_EXP 34
12970: PPUSH
12971: LD_INT 21
12973: PUSH
12974: LD_INT 2
12976: PUSH
12977: EMPTY
12978: LIST
12979: LIST
12980: PPUSH
12981: CALL_OW 72
12985: ST_TO_ADDR
// for i in tmp do
12986: LD_ADDR_VAR 0 1
12990: PUSH
12991: LD_VAR 0 5
12995: PUSH
12996: FOR_IN
12997: IFFALSE 13263
// begin tmp2 := IsDrivenBy ( i ) ;
12999: LD_ADDR_VAR 0 6
13003: PUSH
13004: LD_VAR 0 1
13008: PPUSH
13009: CALL_OW 311
13013: ST_TO_ADDR
// if not tmp2 then
13014: LD_VAR 0 6
13018: NOT
13019: IFFALSE 13023
// continue ;
13021: GO 12996
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
13023: LD_VAR 0 1
13027: PPUSH
13028: CALL_OW 256
13032: PUSH
13033: LD_INT 600
13035: GREATEREQUAL
13036: PUSH
13037: LD_VAR 0 1
13041: PPUSH
13042: CALL_OW 110
13046: PUSH
13047: LD_INT 1
13049: EQUAL
13050: AND
13051: IFFALSE 13065
// SetTag ( i , 0 ) ;
13053: LD_VAR 0 1
13057: PPUSH
13058: LD_INT 0
13060: PPUSH
13061: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
13065: LD_VAR 0 1
13069: PPUSH
13070: CALL_OW 256
13074: PUSH
13075: LD_INT 600
13077: GREATEREQUAL
13078: PUSH
13079: LD_VAR 0 1
13083: PPUSH
13084: CALL_OW 110
13088: NOT
13089: AND
13090: IFFALSE 13116
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13092: LD_VAR 0 1
13096: PPUSH
13097: LD_VAR 0 7
13101: PPUSH
13102: LD_VAR 0 1
13106: PPUSH
13107: CALL_OW 74
13111: PPUSH
13112: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13116: LD_VAR 0 1
13120: PPUSH
13121: CALL_OW 256
13125: PUSH
13126: LD_INT 600
13128: LESS
13129: PUSH
13130: LD_VAR 0 1
13134: PPUSH
13135: CALL_OW 110
13139: NOT
13140: AND
13141: IFFALSE 13170
// begin SetTag ( i , 1 ) ;
13143: LD_VAR 0 1
13147: PPUSH
13148: LD_INT 1
13150: PPUSH
13151: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13155: LD_VAR 0 1
13159: PPUSH
13160: LD_INT 202
13162: PPUSH
13163: LD_INT 150
13165: PPUSH
13166: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13170: LD_VAR 0 1
13174: PPUSH
13175: CALL_OW 110
13179: PUSH
13180: LD_INT 1
13182: EQUAL
13183: PUSH
13184: LD_VAR 0 1
13188: PPUSH
13189: LD_INT 202
13191: PPUSH
13192: LD_INT 150
13194: PPUSH
13195: CALL_OW 297
13199: PUSH
13200: LD_INT 6
13202: LESS
13203: AND
13204: PUSH
13205: LD_VAR 0 6
13209: AND
13210: IFFALSE 13261
// begin ComExitVehicle ( tmp2 ) ;
13212: LD_VAR 0 6
13216: PPUSH
13217: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13221: LD_VAR 0 6
13225: PPUSH
13226: LD_VAR 0 1
13230: PPUSH
13231: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13235: LD_VAR 0 6
13239: PPUSH
13240: LD_INT 700
13242: PPUSH
13243: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13247: LD_VAR 0 6
13251: PPUSH
13252: LD_VAR 0 1
13256: PPUSH
13257: CALL_OW 180
// end ; end ;
13261: GO 12996
13263: POP
13264: POP
// until kirovDestroyed ;
13265: LD_EXP 15
13269: IFFALSE 12819
// repeat wait ( 0 0$1 ) ;
13271: LD_INT 35
13273: PPUSH
13274: CALL_OW 67
// for i in omarSquad union Omar do
13278: LD_ADDR_VAR 0 1
13282: PUSH
13283: LD_EXP 34
13287: PUSH
13288: LD_EXP 30
13292: UNION
13293: PUSH
13294: FOR_IN
13295: IFFALSE 13339
// if IsInArea ( i , southRoadArea ) then
13297: LD_VAR 0 1
13301: PPUSH
13302: LD_INT 15
13304: PPUSH
13305: CALL_OW 308
13309: IFFALSE 13322
// RemoveUnit ( i ) else
13311: LD_VAR 0 1
13315: PPUSH
13316: CALL_OW 64
13320: GO 13337
// ComMoveXY ( i , 208 , 162 ) ;
13322: LD_VAR 0 1
13326: PPUSH
13327: LD_INT 208
13329: PPUSH
13330: LD_INT 162
13332: PPUSH
13333: CALL_OW 111
13337: GO 13294
13339: POP
13340: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
13341: LD_INT 22
13343: PUSH
13344: LD_INT 5
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: PUSH
13351: LD_INT 21
13353: PUSH
13354: LD_INT 1
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PPUSH
13365: CALL_OW 69
13369: NOT
13370: IFFALSE 13271
// end ;
13372: PPOPN 7
13374: END
// every 0 0$1 trigger IsDead ( kirov ) do
13375: LD_INT 71
13377: PPUSH
13378: CALL_OW 301
13382: IFFALSE 13399
13384: GO 13386
13386: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
13387: LD_EXP 22
13391: PPUSH
13392: LD_STRING DH-1-Kirov
13394: PPUSH
13395: CALL_OW 88
13399: END
// every 0 0$1 trigger See ( 2 , beria ) do
13400: LD_INT 2
13402: PPUSH
13403: LD_INT 106
13405: PPUSH
13406: CALL_OW 292
13410: IFFALSE 13427
13412: GO 13414
13414: DISABLE
// Say ( Heike , DH-1-Beria ) ;
13415: LD_EXP 22
13419: PPUSH
13420: LD_STRING DH-1-Beria
13422: PPUSH
13423: CALL_OW 88
13427: END
// every 0 0$1 trigger See ( 2 , kagan ) do
13428: LD_INT 2
13430: PPUSH
13431: LD_INT 112
13433: PPUSH
13434: CALL_OW 292
13438: IFFALSE 13455
13440: GO 13442
13442: DISABLE
// Say ( Heike , DH-1-Kagan ) ;
13443: LD_EXP 22
13447: PPUSH
13448: LD_STRING DH-1-Kagan
13450: PPUSH
13451: CALL_OW 88
13455: END
// every 0 0$3 trigger See ( 2 , ruLab ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) and not InBattle ( 2 ) do var i , tmp , q ;
13456: LD_INT 2
13458: PPUSH
13459: LD_EXP 46
13463: PPUSH
13464: CALL_OW 292
13468: PUSH
13469: LD_EXP 46
13473: PPUSH
13474: CALL_OW 302
13478: AND
13479: PUSH
13480: LD_EXP 22
13484: PPUSH
13485: CALL_OW 302
13489: AND
13490: PUSH
13491: LD_EXP 32
13495: PPUSH
13496: CALL_OW 302
13500: AND
13501: PUSH
13502: LD_INT 2
13504: PPUSH
13505: CALL_OW 463
13509: NOT
13510: AND
13511: IFFALSE 13940
13513: GO 13515
13515: DISABLE
13516: LD_INT 0
13518: PPUSH
13519: PPUSH
13520: PPUSH
// begin DialogueOn ;
13521: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
13525: LD_INT 111
13527: PPUSH
13528: LD_INT 90
13530: PPUSH
13531: LD_INT 2
13533: PPUSH
13534: LD_INT 6
13536: NEG
13537: PPUSH
13538: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
13542: LD_INT 111
13544: PPUSH
13545: LD_INT 90
13547: PPUSH
13548: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
13552: LD_EXP 32
13556: PPUSH
13557: LD_STRING DA-Cap-1
13559: PPUSH
13560: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
13564: LD_EXP 22
13568: PPUSH
13569: LD_STRING DH-Cap-2
13571: PPUSH
13572: CALL_OW 88
// DialogueOff ;
13576: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
13580: LD_INT 35
13582: PPUSH
13583: CALL_OW 67
// until beriaDestroyed and IsOk ( ruLab ) and IsOk ( Aviradze ) ;
13587: LD_EXP 16
13591: PUSH
13592: LD_EXP 46
13596: PPUSH
13597: CALL_OW 302
13601: AND
13602: PUSH
13603: LD_EXP 32
13607: PPUSH
13608: CALL_OW 302
13612: AND
13613: IFFALSE 13580
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
13615: LD_ADDR_VAR 0 2
13619: PUSH
13620: LD_EXP 33
13624: PUSH
13625: LD_EXP 25
13629: PUSH
13630: LD_EXP 26
13634: PUSH
13635: LD_EXP 28
13639: PUSH
13640: LD_EXP 27
13644: PUSH
13645: EMPTY
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: UNION
13651: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13652: LD_ADDR_VAR 0 2
13656: PUSH
13657: LD_VAR 0 2
13661: PPUSH
13662: LD_INT 50
13664: PUSH
13665: EMPTY
13666: LIST
13667: PPUSH
13668: CALL_OW 72
13672: ST_TO_ADDR
// if tmp < 2 then
13673: LD_VAR 0 2
13677: PUSH
13678: LD_INT 2
13680: LESS
13681: IFFALSE 13693
// q := 2 else
13683: LD_ADDR_VAR 0 3
13687: PUSH
13688: LD_INT 2
13690: ST_TO_ADDR
13691: GO 13706
// q := Query ( LabCap ) ;
13693: LD_ADDR_VAR 0 3
13697: PUSH
13698: LD_STRING LabCap
13700: PPUSH
13701: CALL_OW 97
13705: ST_TO_ADDR
// case q of 1 :
13706: LD_VAR 0 3
13710: PUSH
13711: LD_INT 1
13713: DOUBLE
13714: EQUAL
13715: IFTRUE 13719
13717: GO 13904
13719: POP
// begin DoNotAttack ( 2 , ruLab ) ;
13720: LD_INT 2
13722: PPUSH
13723: LD_EXP 46
13727: PPUSH
13728: CALL_OW 471
// labCaptured := true ;
13732: LD_ADDR_EXP 20
13736: PUSH
13737: LD_INT 1
13739: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
13740: LD_EXP 22
13744: PPUSH
13745: LD_STRING DH-Cap-a-1
13747: PPUSH
13748: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
13752: LD_EXP 32
13756: PPUSH
13757: LD_STRING DA-Cap-a-2
13759: PPUSH
13760: CALL_OW 88
// SetSide ( ruLab , 8 ) ;
13764: LD_EXP 46
13768: PPUSH
13769: LD_INT 8
13771: PPUSH
13772: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
13776: LD_EXP 32
13780: PPUSH
13781: LD_INT 8
13783: PPUSH
13784: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
13788: LD_ADDR_EXP 35
13792: PUSH
13793: LD_EXP 32
13797: PUSH
13798: EMPTY
13799: LIST
13800: ST_TO_ADDR
// ComEnterUnit ( Aviradze , ruLab ) ;
13801: LD_EXP 32
13805: PPUSH
13806: LD_EXP 46
13810: PPUSH
13811: CALL_OW 120
// for i := 1 to 2 do
13815: LD_ADDR_VAR 0 1
13819: PUSH
13820: DOUBLE
13821: LD_INT 1
13823: DEC
13824: ST_TO_ADDR
13825: LD_INT 2
13827: PUSH
13828: FOR_TO
13829: IFFALSE 13893
// begin aviradzeSquad := aviradzeSquad union tmp [ i ] ;
13831: LD_ADDR_EXP 35
13835: PUSH
13836: LD_EXP 35
13840: PUSH
13841: LD_VAR 0 2
13845: PUSH
13846: LD_VAR 0 1
13850: ARRAY
13851: UNION
13852: ST_TO_ADDR
// SetSide ( tmp [ i ] , 8 ) ;
13853: LD_VAR 0 2
13857: PUSH
13858: LD_VAR 0 1
13862: ARRAY
13863: PPUSH
13864: LD_INT 8
13866: PPUSH
13867: CALL_OW 235
// ComEnterUnit ( tmp [ i ] , ruLab ) ;
13871: LD_VAR 0 2
13875: PUSH
13876: LD_VAR 0 1
13880: ARRAY
13881: PPUSH
13882: LD_EXP 46
13886: PPUSH
13887: CALL_OW 120
// end ;
13891: GO 13828
13893: POP
13894: POP
// SetAchievement ( ACH_LAB ) ;
13895: LD_STRING ACH_LAB
13897: PPUSH
13898: CALL_OW 543
// end ; 2 :
13902: GO 13940
13904: LD_INT 2
13906: DOUBLE
13907: EQUAL
13908: IFTRUE 13912
13910: GO 13939
13912: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
13913: LD_EXP 22
13917: PPUSH
13918: LD_STRING DH-Cap-b-1
13920: PPUSH
13921: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
13925: LD_EXP 32
13929: PPUSH
13930: LD_STRING DA-Cap-b-2
13932: PPUSH
13933: CALL_OW 88
// end ; end ;
13937: GO 13940
13939: POP
// end ;
13940: PPOPN 3
13942: END
// every 0 0$1 trigger debug do var i ;
13943: LD_EXP 1
13947: IFFALSE 13991
13949: GO 13951
13951: DISABLE
13952: LD_INT 0
13954: PPUSH
// begin for i in FilterAllUnits ( [ f_enemy , 2 ] ) do
13955: LD_ADDR_VAR 0 1
13959: PUSH
13960: LD_INT 81
13962: PUSH
13963: LD_INT 2
13965: PUSH
13966: EMPTY
13967: LIST
13968: LIST
13969: PPUSH
13970: CALL_OW 69
13974: PUSH
13975: FOR_IN
13976: IFFALSE 13989
// RemoveUnit ( i ) ;
13978: LD_VAR 0 1
13982: PPUSH
13983: CALL_OW 64
13987: GO 13975
13989: POP
13990: POP
// end ;
13991: PPOPN 1
13993: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
13994: LD_INT 10
13996: PPUSH
13997: LD_INT 22
13999: PUSH
14000: LD_INT 2
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: PUSH
14007: LD_INT 30
14009: PUSH
14010: LD_INT 31
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: PPUSH
14021: CALL_OW 70
14025: PUSH
14026: LD_INT 2
14028: GREATEREQUAL
14029: IFFALSE 14041
14031: GO 14033
14033: DISABLE
// SetAchievement ( ACH_KING ) ;
14034: LD_STRING ACH_KING
14036: PPUSH
14037: CALL_OW 543
14041: END
// every 0 0$1 trigger debug or ( kirovDestroyed and beriaDestroyed and kaganDestroyed ) do var i , tmp , tmp2 , cargo ;
14042: LD_EXP 1
14046: PUSH
14047: LD_EXP 15
14051: PUSH
14052: LD_EXP 16
14056: AND
14057: PUSH
14058: LD_EXP 17
14062: AND
14063: OR
14064: IFFALSE 15252
14066: GO 14068
14068: DISABLE
14069: LD_INT 0
14071: PPUSH
14072: PPUSH
14073: PPUSH
14074: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
14075: LD_STRING GoToWest
14077: PPUSH
14078: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
14082: LD_INT 17
14084: PPUSH
14085: LD_INT 1
14087: PPUSH
14088: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
14092: LD_INT 35
14094: PPUSH
14095: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
14099: LD_ADDR_VAR 0 2
14103: PUSH
14104: LD_INT 17
14106: PPUSH
14107: LD_INT 22
14109: PUSH
14110: LD_INT 2
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PUSH
14117: LD_INT 2
14119: PUSH
14120: LD_INT 21
14122: PUSH
14123: LD_INT 1
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: PUSH
14130: LD_INT 21
14132: PUSH
14133: LD_INT 2
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PUSH
14140: LD_INT 3
14142: PUSH
14143: LD_INT 58
14145: PUSH
14146: EMPTY
14147: LIST
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: LIST
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PPUSH
14166: CALL_OW 70
14170: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
14171: LD_ADDR_VAR 0 3
14175: PUSH
14176: LD_INT 22
14178: PUSH
14179: LD_INT 2
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: PUSH
14186: LD_INT 3
14188: PUSH
14189: LD_INT 55
14191: PUSH
14192: EMPTY
14193: LIST
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: PUSH
14199: LD_INT 2
14201: PUSH
14202: LD_INT 21
14204: PUSH
14205: LD_INT 1
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: PUSH
14212: LD_INT 21
14214: PUSH
14215: LD_INT 2
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: PUSH
14222: LD_INT 3
14224: PUSH
14225: LD_INT 58
14227: PUSH
14228: EMPTY
14229: LIST
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: LIST
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: LIST
14248: PPUSH
14249: CALL_OW 69
14253: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
14254: LD_VAR 0 2
14258: PUSH
14259: LD_INT 0
14261: PLUS
14262: PUSH
14263: LD_VAR 0 3
14267: PUSH
14268: LD_INT 0
14270: PLUS
14271: EQUAL
14272: IFFALSE 14092
// SaveCharacters ( Heike , 04_1_Heike ) ;
14274: LD_EXP 22
14278: PPUSH
14279: LD_STRING 04_1_Heike
14281: PPUSH
14282: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
14286: LD_EXP 32
14290: PUSH
14291: LD_EXP 32
14295: PUSH
14296: LD_EXP 35
14300: IN
14301: NOT
14302: AND
14303: IFFALSE 14319
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
14305: LD_EXP 32
14309: PPUSH
14310: LD_STRING 04_1_Aviradze
14312: PPUSH
14313: CALL_OW 38
14317: GO 14337
// if Aviradze then
14319: LD_EXP 32
14323: IFFALSE 14337
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
14325: LD_EXP 32
14329: PPUSH
14330: LD_STRING 04_1_Aviradze_L
14332: PPUSH
14333: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
14337: LD_EXP 25
14341: PUSH
14342: LD_EXP 25
14346: PUSH
14347: LD_EXP 35
14351: IN
14352: NOT
14353: AND
14354: IFFALSE 14370
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
14356: LD_EXP 25
14360: PPUSH
14361: LD_STRING 04_1_Ibrahim
14363: PPUSH
14364: CALL_OW 38
14368: GO 14388
// if Ibrahim then
14370: LD_EXP 25
14374: IFFALSE 14388
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
14376: LD_EXP 25
14380: PPUSH
14381: LD_STRING 04_1_Ibrahim_L
14383: PPUSH
14384: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
14388: LD_EXP 26
14392: PUSH
14393: LD_EXP 26
14397: PUSH
14398: LD_EXP 35
14402: IN
14403: NOT
14404: AND
14405: IFFALSE 14421
// SaveCharacters ( Kamil , 04_1_Kamil ) else
14407: LD_EXP 26
14411: PPUSH
14412: LD_STRING 04_1_Kamil
14414: PPUSH
14415: CALL_OW 38
14419: GO 14439
// if Kamil then
14421: LD_EXP 26
14425: IFFALSE 14439
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
14427: LD_EXP 26
14431: PPUSH
14432: LD_STRING 04_1_Kamil_L
14434: PPUSH
14435: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
14439: LD_EXP 28
14443: PUSH
14444: LD_EXP 28
14448: PUSH
14449: LD_EXP 35
14453: IN
14454: NOT
14455: AND
14456: IFFALSE 14472
// SaveCharacters ( Sophia , 04_1_Sophia ) else
14458: LD_EXP 28
14462: PPUSH
14463: LD_STRING 04_1_Sophia
14465: PPUSH
14466: CALL_OW 38
14470: GO 14490
// if Sophia then
14472: LD_EXP 28
14476: IFFALSE 14490
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
14478: LD_EXP 28
14482: PPUSH
14483: LD_STRING 04_1_Sophia_L
14485: PPUSH
14486: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
14490: LD_EXP 27
14494: PUSH
14495: LD_EXP 27
14499: PUSH
14500: LD_EXP 35
14504: IN
14505: NOT
14506: AND
14507: IFFALSE 14523
// SaveCharacters ( Kaia , 04_1_Kaia ) else
14509: LD_EXP 27
14513: PPUSH
14514: LD_STRING 04_1_Kaia
14516: PPUSH
14517: CALL_OW 38
14521: GO 14541
// if Kaia then
14523: LD_EXP 27
14527: IFFALSE 14541
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
14529: LD_EXP 27
14533: PPUSH
14534: LD_STRING 04_1_Kaia_L
14536: PPUSH
14537: CALL_OW 38
// if Givi then
14541: LD_EXP 23
14545: IFFALSE 14559
// SaveCharacters ( Givi , 04_1_Givi ) ;
14547: LD_EXP 23
14551: PPUSH
14552: LD_STRING 04_1_Givi
14554: PPUSH
14555: CALL_OW 38
// if Mike then
14559: LD_EXP 24
14563: IFFALSE 14577
// SaveCharacters ( Mike , 04_1_Mike ) ;
14565: LD_EXP 24
14569: PPUSH
14570: LD_STRING 04_1_Mike
14572: PPUSH
14573: CALL_OW 38
// if Markov then
14577: LD_EXP 29
14581: IFFALSE 14595
// SaveCharacters ( Markov , 04_1_Markov ) ;
14583: LD_EXP 29
14587: PPUSH
14588: LD_STRING 04_1_Markov
14590: PPUSH
14591: CALL_OW 38
// if Kurt then
14595: LD_EXP 31
14599: IFFALSE 14613
// SaveCharacters ( Kurt , 04_1_Kurt ) ;
14601: LD_EXP 31
14605: PPUSH
14606: LD_STRING 04_1_Kurt
14608: PPUSH
14609: CALL_OW 38
// if heikeSecondSquad diff aviradzeSquad then
14613: LD_EXP 33
14617: PUSH
14618: LD_EXP 35
14622: DIFF
14623: IFFALSE 14643
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
14625: LD_EXP 33
14629: PUSH
14630: LD_EXP 35
14634: DIFF
14635: PPUSH
14636: LD_STRING 04_1_others
14638: PPUSH
14639: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
14643: LD_EXP 35
14647: PUSH
14648: LD_EXP 33
14652: AND
14653: IFFALSE 14738
// begin tmp := [ ] ;
14655: LD_ADDR_VAR 0 2
14659: PUSH
14660: EMPTY
14661: ST_TO_ADDR
// for i in heikeSecondSquad do
14662: LD_ADDR_VAR 0 1
14666: PUSH
14667: LD_EXP 33
14671: PUSH
14672: FOR_IN
14673: IFFALSE 14718
// if i in aviradzeSquad then
14675: LD_VAR 0 1
14679: PUSH
14680: LD_EXP 35
14684: IN
14685: IFFALSE 14716
// tmp := Replace ( tmp , tmp + 1 , i ) ;
14687: LD_ADDR_VAR 0 2
14691: PUSH
14692: LD_VAR 0 2
14696: PPUSH
14697: LD_VAR 0 2
14701: PUSH
14702: LD_INT 1
14704: PLUS
14705: PPUSH
14706: LD_VAR 0 1
14710: PPUSH
14711: CALL_OW 1
14715: ST_TO_ADDR
14716: GO 14672
14718: POP
14719: POP
// if tmp then
14720: LD_VAR 0 2
14724: IFFALSE 14738
// SaveCharacters ( tmp , 04_1_others_L ) ;
14726: LD_VAR 0 2
14730: PPUSH
14731: LD_STRING 04_1_others_L
14733: PPUSH
14734: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
14738: LD_ADDR_VAR 0 2
14742: PUSH
14743: LD_INT 22
14745: PUSH
14746: LD_INT 2
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: PUSH
14753: LD_INT 23
14755: PUSH
14756: LD_INT 0
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: PPUSH
14767: CALL_OW 69
14771: ST_TO_ADDR
// if tmp then
14772: LD_VAR 0 2
14776: IFFALSE 14790
// SaveCharacters ( tmp , 04_1_apes ) ;
14778: LD_VAR 0 2
14782: PPUSH
14783: LD_STRING 04_1_apes
14785: PPUSH
14786: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
14790: LD_ADDR_VAR 0 2
14794: PUSH
14795: LD_INT 17
14797: PPUSH
14798: LD_INT 21
14800: PUSH
14801: LD_INT 2
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PPUSH
14808: CALL_OW 70
14812: ST_TO_ADDR
// if tmp then
14813: LD_VAR 0 2
14817: IFFALSE 15111
// begin tmp2 := [ ] ;
14819: LD_ADDR_VAR 0 3
14823: PUSH
14824: EMPTY
14825: ST_TO_ADDR
// for i in tmp do
14826: LD_ADDR_VAR 0 1
14830: PUSH
14831: LD_VAR 0 2
14835: PUSH
14836: FOR_IN
14837: IFFALSE 15097
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
14839: LD_VAR 0 1
14843: PPUSH
14844: CALL_OW 264
14848: PUSH
14849: LD_INT 32
14851: PUSH
14852: LD_INT 12
14854: PUSH
14855: LD_INT 51
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: LIST
14862: IN
14863: IFFALSE 15000
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
14865: LD_ADDR_VAR 0 4
14869: PUSH
14870: LD_VAR 0 1
14874: PPUSH
14875: LD_INT 1
14877: PPUSH
14878: CALL_OW 289
14882: PUSH
14883: LD_VAR 0 1
14887: PPUSH
14888: LD_INT 2
14890: PPUSH
14891: CALL_OW 289
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
14900: LD_ADDR_VAR 0 3
14904: PUSH
14905: LD_VAR 0 3
14909: PPUSH
14910: LD_VAR 0 3
14914: PUSH
14915: LD_INT 1
14917: PLUS
14918: PPUSH
14919: LD_VAR 0 1
14923: PPUSH
14924: CALL_OW 265
14928: PUSH
14929: LD_VAR 0 1
14933: PPUSH
14934: CALL_OW 262
14938: PUSH
14939: LD_VAR 0 1
14943: PPUSH
14944: CALL_OW 263
14948: PUSH
14949: LD_VAR 0 1
14953: PPUSH
14954: CALL_OW 264
14958: PUSH
14959: LD_VAR 0 1
14963: PPUSH
14964: CALL_OW 248
14968: PUSH
14969: LD_VAR 0 1
14973: PPUSH
14974: CALL_OW 256
14978: PUSH
14979: LD_VAR 0 4
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: PPUSH
14993: CALL_OW 1
14997: ST_TO_ADDR
// end else
14998: GO 15095
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
15000: LD_ADDR_VAR 0 3
15004: PUSH
15005: LD_VAR 0 3
15009: PPUSH
15010: LD_VAR 0 3
15014: PUSH
15015: LD_INT 1
15017: PLUS
15018: PPUSH
15019: LD_VAR 0 1
15023: PPUSH
15024: CALL_OW 265
15028: PUSH
15029: LD_VAR 0 1
15033: PPUSH
15034: CALL_OW 262
15038: PUSH
15039: LD_VAR 0 1
15043: PPUSH
15044: CALL_OW 263
15048: PUSH
15049: LD_VAR 0 1
15053: PPUSH
15054: CALL_OW 264
15058: PUSH
15059: LD_VAR 0 1
15063: PPUSH
15064: CALL_OW 248
15068: PUSH
15069: LD_VAR 0 1
15073: PPUSH
15074: CALL_OW 256
15078: PUSH
15079: EMPTY
15080: PUSH
15081: EMPTY
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: PPUSH
15090: CALL_OW 1
15094: ST_TO_ADDR
15095: GO 14836
15097: POP
15098: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
15099: LD_VAR 0 3
15103: PPUSH
15104: LD_STRING 04_1_Vehicles
15106: PPUSH
15107: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
15111: LD_EXP 20
15115: PPUSH
15116: LD_STRING 04_1_RuLabCaptured
15118: PPUSH
15119: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
15123: LD_EXP 18
15127: PPUSH
15128: LD_STRING 04_1_EscapeCounter
15130: PPUSH
15131: CALL_OW 39
// SaveVariable ( FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) > 0 , 04_1_BaseHill ) ;
15135: LD_INT 10
15137: PPUSH
15138: LD_INT 22
15140: PUSH
15141: LD_INT 2
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: PUSH
15148: LD_INT 21
15150: PUSH
15151: LD_INT 3
15153: PUSH
15154: EMPTY
15155: LIST
15156: LIST
15157: PUSH
15158: EMPTY
15159: LIST
15160: LIST
15161: PPUSH
15162: CALL_OW 70
15166: PUSH
15167: LD_INT 0
15169: GREATER
15170: PPUSH
15171: LD_STRING 04_1_BaseHill
15173: PPUSH
15174: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
15178: LD_OWVAR 1
15182: PPUSH
15183: LD_STRING 04_1_Time
15185: PPUSH
15186: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
15190: LD_EXP 14
15194: PPUSH
15195: LD_STRING 04_1_DeadCounter
15197: PPUSH
15198: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
15202: LD_INT 22
15204: PUSH
15205: LD_INT 2
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: PUSH
15212: LD_INT 34
15214: PUSH
15215: LD_INT 26
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PPUSH
15226: CALL_OW 69
15230: PUSH
15231: LD_INT 0
15233: PLUS
15234: PPUSH
15235: LD_STRING 04_1_Flamethrower
15237: PPUSH
15238: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
15242: LD_INT 1
15244: PPUSH
15245: LD_STRING __x1\04_cont2
15247: PPUSH
15248: CALL_OW 340
// end ; end_of_file
15252: PPOPN 4
15254: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
15255: LD_VAR 0 1
15259: PPUSH
15260: CALL_OW 266
15264: PUSH
15265: LD_INT 0
15267: EQUAL
15268: PUSH
15269: LD_VAR 0 1
15273: PPUSH
15274: CALL_OW 255
15278: PUSH
15279: LD_INT 2
15281: EQUAL
15282: AND
15283: IFFALSE 15293
// baseConstructed := true ;
15285: LD_ADDR_EXP 3
15289: PUSH
15290: LD_INT 1
15292: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
15293: LD_VAR 0 1
15297: PPUSH
15298: CALL_OW 266
15302: PUSH
15303: LD_INT 6
15305: EQUAL
15306: PUSH
15307: LD_VAR 0 1
15311: PPUSH
15312: CALL_OW 255
15316: PUSH
15317: LD_INT 2
15319: EQUAL
15320: AND
15321: IFFALSE 15331
// labConstructed := true ;
15323: LD_ADDR_EXP 4
15327: PUSH
15328: LD_INT 1
15330: ST_TO_ADDR
// end ;
15331: PPOPN 1
15333: END
// on UnitDestroyed ( un ) do begin if un = Heike then
15334: LD_VAR 0 1
15338: PUSH
15339: LD_EXP 22
15343: EQUAL
15344: IFFALSE 15353
// YouLost ( Heike ) ;
15346: LD_STRING Heike
15348: PPUSH
15349: CALL_OW 104
// if un = Omar then
15353: LD_VAR 0 1
15357: PUSH
15358: LD_EXP 30
15362: EQUAL
15363: IFFALSE 15372
// YouLost ( Omar ) ;
15365: LD_STRING Omar
15367: PPUSH
15368: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
15372: LD_VAR 0 1
15376: PUSH
15377: LD_INT 22
15379: PUSH
15380: LD_INT 2
15382: PUSH
15383: EMPTY
15384: LIST
15385: LIST
15386: PUSH
15387: LD_INT 23
15389: PUSH
15390: LD_INT 2
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: PUSH
15397: LD_INT 21
15399: PUSH
15400: LD_INT 1
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: LIST
15411: PPUSH
15412: CALL_OW 69
15416: IN
15417: IFFALSE 15433
// loseCounter := loseCounter + 1 ;
15419: LD_ADDR_EXP 14
15423: PUSH
15424: LD_EXP 14
15428: PUSH
15429: LD_INT 1
15431: PLUS
15432: ST_TO_ADDR
// if un = omikron then
15433: LD_VAR 0 1
15437: PUSH
15438: LD_INT 64
15440: EQUAL
15441: IFFALSE 15451
// omicronFall := true ;
15443: LD_ADDR_EXP 13
15447: PUSH
15448: LD_INT 1
15450: ST_TO_ADDR
// if un = kirov then
15451: LD_VAR 0 1
15455: PUSH
15456: LD_INT 71
15458: EQUAL
15459: IFFALSE 15476
// begin ChangeMissionObjectives ( KirovDone ) ;
15461: LD_STRING KirovDone
15463: PPUSH
15464: CALL_OW 337
// kirovDestroyed := true ;
15468: LD_ADDR_EXP 15
15472: PUSH
15473: LD_INT 1
15475: ST_TO_ADDR
// end ; if un = beria then
15476: LD_VAR 0 1
15480: PUSH
15481: LD_INT 106
15483: EQUAL
15484: IFFALSE 15501
// begin ChangeMissionObjectives ( BeriaDone ) ;
15486: LD_STRING BeriaDone
15488: PPUSH
15489: CALL_OW 337
// beriaDestroyed := true ;
15493: LD_ADDR_EXP 16
15497: PUSH
15498: LD_INT 1
15500: ST_TO_ADDR
// end ; if un = kagan then
15501: LD_VAR 0 1
15505: PUSH
15506: LD_INT 112
15508: EQUAL
15509: IFFALSE 15526
// begin ChangeMissionObjectives ( KaganDone ) ;
15511: LD_STRING KaganDone
15513: PPUSH
15514: CALL_OW 337
// kaganDestroyed := true ;
15518: LD_ADDR_EXP 17
15522: PUSH
15523: LD_INT 1
15525: ST_TO_ADDR
// end ; if un in russianPatrol then
15526: LD_VAR 0 1
15530: PUSH
15531: LD_EXP 43
15535: IN
15536: IFFALSE 15577
// begin if GetTag ( un ) = 2 then
15538: LD_VAR 0 1
15542: PPUSH
15543: CALL_OW 110
15547: PUSH
15548: LD_INT 2
15550: EQUAL
15551: IFFALSE 15561
// spottedByPatrol := false ;
15553: LD_ADDR_EXP 7
15557: PUSH
15558: LD_INT 0
15560: ST_TO_ADDR
// russianPatrol := russianPatrol diff un ;
15561: LD_ADDR_EXP 43
15565: PUSH
15566: LD_EXP 43
15570: PUSH
15571: LD_VAR 0 1
15575: DIFF
15576: ST_TO_ADDR
// end ; if un in russianOmicronAttackers then
15577: LD_VAR 0 1
15581: PUSH
15582: LD_EXP 44
15586: IN
15587: IFFALSE 15605
// russianOmicronAttackers := russianOmicronAttackers diff un ;
15589: LD_ADDR_EXP 44
15593: PUSH
15594: LD_EXP 44
15598: PUSH
15599: LD_VAR 0 1
15603: DIFF
15604: ST_TO_ADDR
// end ;
15605: PPOPN 1
15607: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
15608: LD_INT 0
15610: PPUSH
15611: PPUSH
15612: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
15613: LD_VAR 0 1
15617: PUSH
15618: LD_INT 2
15620: PUSH
15621: LD_INT 22
15623: PUSH
15624: LD_INT 3
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PUSH
15631: LD_INT 22
15633: PUSH
15634: LD_INT 4
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: PUSH
15641: LD_INT 22
15643: PUSH
15644: LD_INT 6
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: PUSH
15657: LD_INT 30
15659: PUSH
15660: LD_INT 32
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: PPUSH
15671: CALL_OW 69
15675: IN
15676: IFFALSE 15849
// begin sol := UnitsInside ( un ) ;
15678: LD_ADDR_VAR 0 3
15682: PUSH
15683: LD_VAR 0 1
15687: PPUSH
15688: CALL_OW 313
15692: ST_TO_ADDR
// if not sol then
15693: LD_VAR 0 3
15697: NOT
15698: IFFALSE 15702
// exit ;
15700: GO 15849
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
15702: LD_ADDR_VAR 0 4
15706: PUSH
15707: LD_INT 22
15709: PUSH
15710: LD_VAR 0 1
15714: PPUSH
15715: CALL_OW 255
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: LD_INT 2
15726: PUSH
15727: LD_INT 30
15729: PUSH
15730: LD_INT 4
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: PUSH
15737: LD_INT 30
15739: PUSH
15740: LD_INT 5
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: LIST
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: PPUSH
15756: CALL_OW 69
15760: ST_TO_ADDR
// if not nearestBarracks then
15761: LD_VAR 0 4
15765: NOT
15766: IFFALSE 15770
// exit ;
15768: GO 15849
// for i in nearestBarracks do
15770: LD_ADDR_VAR 0 2
15774: PUSH
15775: LD_VAR 0 4
15779: PUSH
15780: FOR_IN
15781: IFFALSE 15816
// if UnitsInside ( i ) = 6 then
15783: LD_VAR 0 2
15787: PPUSH
15788: CALL_OW 313
15792: PUSH
15793: LD_INT 6
15795: EQUAL
15796: IFFALSE 15814
// nearestBarracks := nearestBarracks diff i ;
15798: LD_ADDR_VAR 0 4
15802: PUSH
15803: LD_VAR 0 4
15807: PUSH
15808: LD_VAR 0 2
15812: DIFF
15813: ST_TO_ADDR
15814: GO 15780
15816: POP
15817: POP
// if not nearestBarracks then
15818: LD_VAR 0 4
15822: NOT
15823: IFFALSE 15827
// exit ;
15825: GO 15849
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
15827: LD_VAR 0 3
15831: PUSH
15832: LD_INT 1
15834: ARRAY
15835: PPUSH
15836: LD_VAR 0 4
15840: PUSH
15841: LD_INT 1
15843: ARRAY
15844: PPUSH
15845: CALL_OW 120
// end ; end ;
15849: PPOPN 4
15851: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
15852: LD_INT 0
15854: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
15855: LD_EXP 8
15859: NOT
15860: PUSH
15861: LD_EXP 5
15865: NOT
15866: OR
15867: IFFALSE 15871
// exit ;
15869: GO 15939
// for i in camAreas do
15871: LD_ADDR_VAR 0 5
15875: PUSH
15876: LD_EXP 8
15880: PUSH
15881: FOR_IN
15882: IFFALSE 15937
// if InArea ( x , y , i ) then
15884: LD_VAR 0 3
15888: PPUSH
15889: LD_VAR 0 4
15893: PPUSH
15894: LD_VAR 0 5
15898: PPUSH
15899: CALL_OW 309
15903: IFFALSE 15935
// begin SetAreaMapShow ( i , 0 ) ;
15905: LD_VAR 0 5
15909: PPUSH
15910: LD_INT 0
15912: PPUSH
15913: CALL_OW 424
// camAreas := camAreas diff i ;
15917: LD_ADDR_EXP 8
15921: PUSH
15922: LD_EXP 8
15926: PUSH
15927: LD_VAR 0 5
15931: DIFF
15932: ST_TO_ADDR
// break ;
15933: GO 15937
// end ;
15935: GO 15881
15937: POP
15938: POP
// end ;
15939: PPOPN 5
15941: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
15942: LD_VAR 0 1
15946: PUSH
15947: LD_INT 2
15949: EQUAL
15950: PUSH
15951: LD_VAR 0 2
15955: PUSH
15956: LD_INT 5
15958: PUSH
15959: LD_INT 8
15961: PUSH
15962: EMPTY
15963: LIST
15964: LIST
15965: IN
15966: AND
15967: IFFALSE 15976
// YouLost ( Ally ) ;
15969: LD_STRING Ally
15971: PPUSH
15972: CALL_OW 104
// end ; end_of_file
15976: PPOPN 2
15978: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 200 , 160 , 120 ] [ Difficulty ] do
15979: LD_EXP 11
15983: NOT
15984: PUSH
15985: LD_INT 12
15987: PPUSH
15988: LD_INT 1
15990: PPUSH
15991: CALL_OW 287
15995: PUSH
15996: LD_INT 200
15998: PUSH
15999: LD_INT 160
16001: PUSH
16002: LD_INT 120
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: LIST
16009: PUSH
16010: LD_OWVAR 67
16014: ARRAY
16015: LESS
16016: AND
16017: IFFALSE 16044
16019: GO 16021
16021: DISABLE
// begin enable ;
16022: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
16023: LD_INT 1
16025: PPUSH
16026: LD_INT 5
16028: PPUSH
16029: CALL_OW 12
16033: PPUSH
16034: LD_INT 12
16036: PPUSH
16037: LD_INT 1
16039: PPUSH
16040: CALL_OW 55
// end ; end_of_file
16044: END
// every 0 0$1 trigger omarCountdown do
16045: LD_EXP 21
16049: IFFALSE 16101
16051: GO 16053
16053: DISABLE
// begin enable ;
16054: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
16055: LD_ADDR_OWVAR 47
16059: PUSH
16060: LD_STRING #X104-1
16062: PUSH
16063: LD_EXP 21
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
16072: LD_ADDR_EXP 21
16076: PUSH
16077: LD_EXP 21
16081: PUSH
16082: LD_INT 35
16084: MINUS
16085: ST_TO_ADDR
// if not omarCountdown then
16086: LD_EXP 21
16090: NOT
16091: IFFALSE 16101
// display_strings :=  ;
16093: LD_ADDR_OWVAR 47
16097: PUSH
16098: LD_STRING 
16100: ST_TO_ADDR
// end ;
16101: END
